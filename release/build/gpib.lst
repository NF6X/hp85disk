
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001610  00800100  0001d390  0001d424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001d390  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a38  00801710  00801710  0001ea34  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001ea34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001ea48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000017b8  00000000  00000000  0001ea88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00028f73  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006309  00000000  00000000  000491b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000121c9  00000000  00000000  0004f4bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000051ec  00000000  00000000  00061688  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000481f  00000000  00000000  00066874  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00023c43  00000000  00000000  0006b093  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001798  00000000  00000000  0008ecd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 16 24 	jmp	0x482c	; 0x482c <__ctors_end>
       4:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
       8:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
       c:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      10:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      14:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      18:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      1c:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      20:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      24:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      28:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      2c:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      30:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      34:	0c 94 b7 34 	jmp	0x696e	; 0x696e <__vector_13>
      38:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      3c:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      40:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      44:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      48:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      4c:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      50:	0c 94 80 2b 	jmp	0x5700	; 0x5700 <__vector_20>
      54:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      58:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      5c:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      60:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      64:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      68:	0c 94 53 2e 	jmp	0x5ca6	; 0x5ca6 <__vector_26>
      6c:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      70:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      74:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      78:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      7c:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      80:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      84:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      88:	0c 94 35 24 	jmp	0x486a	; 0x486a <__bad_interrupt>
      8c:	7d 44       	sbci	r23, 0x4D	; 77
      8e:	d0 45       	sbci	r29, 0x50	; 80
      90:	ad 44       	sbci	r26, 0x4D	; 77
      92:	a9 45       	sbci	r26, 0x59	; 89
      94:	a9 45       	sbci	r26, 0x59	; 89
      96:	d0 45       	sbci	r29, 0x50	; 80
      98:	d0 45       	sbci	r29, 0x50	; 80
      9a:	d0 45       	sbci	r29, 0x50	; 80
      9c:	d0 45       	sbci	r29, 0x50	; 80
      9e:	d0 45       	sbci	r29, 0x50	; 80
      a0:	d0 45       	sbci	r29, 0x50	; 80
      a2:	d0 45       	sbci	r29, 0x50	; 80
      a4:	d0 45       	sbci	r29, 0x50	; 80
      a6:	7d 44       	sbci	r23, 0x4D	; 77
      a8:	77 44       	sbci	r23, 0x47	; 71
      aa:	d0 45       	sbci	r29, 0x50	; 80
      ac:	d0 45       	sbci	r29, 0x50	; 80
      ae:	d0 45       	sbci	r29, 0x50	; 80
      b0:	d0 45       	sbci	r29, 0x50	; 80
      b2:	a7 44       	sbci	r26, 0x47	; 71
      b4:	d0 45       	sbci	r29, 0x50	; 80
      b6:	d0 45       	sbci	r29, 0x50	; 80
      b8:	7d 44       	sbci	r23, 0x4D	; 77
      ba:	d0 45       	sbci	r29, 0x50	; 80
      bc:	d0 45       	sbci	r29, 0x50	; 80
      be:	d0 45       	sbci	r29, 0x50	; 80
      c0:	d0 45       	sbci	r29, 0x50	; 80
      c2:	d0 45       	sbci	r29, 0x50	; 80
      c4:	d0 45       	sbci	r29, 0x50	; 80
      c6:	d0 45       	sbci	r29, 0x50	; 80
      c8:	d0 45       	sbci	r29, 0x50	; 80
      ca:	d0 45       	sbci	r29, 0x50	; 80
      cc:	7d 44       	sbci	r23, 0x4D	; 77
      ce:	cb 45       	sbci	r28, 0x5B	; 91
      d0:	ad 44       	sbci	r26, 0x4D	; 77
      d2:	a9 45       	sbci	r26, 0x59	; 89
      d4:	a9 45       	sbci	r26, 0x59	; 89
      d6:	d0 45       	sbci	r29, 0x50	; 80
      d8:	d0 45       	sbci	r29, 0x50	; 80
      da:	d0 45       	sbci	r29, 0x50	; 80
      dc:	d0 45       	sbci	r29, 0x50	; 80
      de:	d0 45       	sbci	r29, 0x50	; 80
      e0:	d0 45       	sbci	r29, 0x50	; 80
      e2:	d0 45       	sbci	r29, 0x50	; 80
      e4:	d0 45       	sbci	r29, 0x50	; 80
      e6:	7d 44       	sbci	r23, 0x4D	; 77
      e8:	77 44       	sbci	r23, 0x47	; 71
      ea:	d0 45       	sbci	r29, 0x50	; 80
      ec:	d0 45       	sbci	r29, 0x50	; 80
      ee:	c6 45       	sbci	r28, 0x56	; 86
      f0:	d0 45       	sbci	r29, 0x50	; 80
      f2:	a7 44       	sbci	r26, 0x47	; 71
      f4:	d0 45       	sbci	r29, 0x50	; 80
      f6:	d0 45       	sbci	r29, 0x50	; 80
      f8:	7d 44       	sbci	r23, 0x4D	; 77
      fa:	f2 45       	sbci	r31, 0x52	; 82
      fc:	d9 46       	sbci	r29, 0x69	; 105
      fe:	e8 45       	sbci	r30, 0x58	; 88
     100:	46 46       	sbci	r20, 0x66	; 102
     102:	2d 46       	sbci	r18, 0x6D	; 109
     104:	d9 46       	sbci	r29, 0x69	; 105
     106:	d9 46       	sbci	r29, 0x69	; 105
     108:	d9 46       	sbci	r29, 0x69	; 105
     10a:	d9 46       	sbci	r29, 0x69	; 105
     10c:	d9 46       	sbci	r29, 0x69	; 105
     10e:	d9 46       	sbci	r29, 0x69	; 105
     110:	d9 46       	sbci	r29, 0x69	; 105
     112:	d9 46       	sbci	r29, 0x69	; 105
     114:	fc 45       	sbci	r31, 0x5C	; 92
     116:	10 46       	sbci	r17, 0x60	; 96
     118:	d9 46       	sbci	r29, 0x69	; 105
     11a:	d9 46       	sbci	r29, 0x69	; 105
     11c:	d9 46       	sbci	r29, 0x69	; 105
     11e:	d9 46       	sbci	r29, 0x69	; 105
     120:	e4 45       	sbci	r30, 0x54	; 84
     122:	d9 46       	sbci	r29, 0x69	; 105
     124:	d9 46       	sbci	r29, 0x69	; 105
     126:	10 46       	sbci	r17, 0x60	; 96
     128:	d9 46       	sbci	r29, 0x69	; 105
     12a:	d9 46       	sbci	r29, 0x69	; 105
     12c:	d9 46       	sbci	r29, 0x69	; 105
     12e:	d9 46       	sbci	r29, 0x69	; 105
     130:	d9 46       	sbci	r29, 0x69	; 105
     132:	d9 46       	sbci	r29, 0x69	; 105
     134:	d9 46       	sbci	r29, 0x69	; 105
     136:	d9 46       	sbci	r29, 0x69	; 105
     138:	d9 46       	sbci	r29, 0x69	; 105
     13a:	f2 45       	sbci	r31, 0x52	; 82
     13c:	74 46       	sbci	r23, 0x64	; 100
     13e:	e8 45       	sbci	r30, 0x58	; 88
     140:	46 46       	sbci	r20, 0x66	; 102
     142:	2d 46       	sbci	r18, 0x6D	; 109
     144:	d9 46       	sbci	r29, 0x69	; 105
     146:	d9 46       	sbci	r29, 0x69	; 105
     148:	d9 46       	sbci	r29, 0x69	; 105
     14a:	d9 46       	sbci	r29, 0x69	; 105
     14c:	d9 46       	sbci	r29, 0x69	; 105
     14e:	d9 46       	sbci	r29, 0x69	; 105
     150:	d9 46       	sbci	r29, 0x69	; 105
     152:	d9 46       	sbci	r29, 0x69	; 105
     154:	fc 45       	sbci	r31, 0x5C	; 92
     156:	10 46       	sbci	r17, 0x60	; 96
     158:	d9 46       	sbci	r29, 0x69	; 105
     15a:	d9 46       	sbci	r29, 0x69	; 105
     15c:	74 46       	sbci	r23, 0x64	; 100
     15e:	d9 46       	sbci	r29, 0x69	; 105
     160:	e4 45       	sbci	r30, 0x54	; 84
     162:	d9 46       	sbci	r29, 0x69	; 105
     164:	d9 46       	sbci	r29, 0x69	; 105
     166:	10 46       	sbci	r17, 0x60	; 96
     168:	f0 6a       	ori	r31, 0xA0	; 160
     16a:	fa 6a       	ori	r31, 0xAA	; 170
     16c:	02 6b       	ori	r16, 0xB2	; 178
     16e:	05 6b       	ori	r16, 0xB5	; 181
     170:	08 6b       	ori	r16, 0xB8	; 184
     172:	0b 6b       	ori	r16, 0xBB	; 187
     174:	0e 6b       	ori	r16, 0xBE	; 190
     176:	11 6b       	ori	r17, 0xB1	; 177
     178:	14 6b       	ori	r17, 0xB4	; 180
     17a:	3c 88       	ldd	r3, Y+20	; 0x14
     17c:	65 88       	ldd	r6, Z+21	; 0x15
     17e:	8c 88       	ldd	r8, Y+20	; 0x14
     180:	a6 88       	ldd	r10, Z+22	; 0x16
     182:	af 88       	ldd	r10, Y+23	; 0x17
     184:	d1 88       	ldd	r13, Z+17	; 0x11
     186:	ec 88       	ldd	r14, Y+20	; 0x14
     188:	fb 88       	ldd	r15, Y+19	; 0x13
     18a:	43 89       	ldd	r20, Z+19	; 0x13
     18c:	17 89       	ldd	r17, Z+23	; 0x17
     18e:	2c 8b       	std	Y+20, r18	; 0x14
     190:	34 8b       	std	Z+20, r19	; 0x14
     192:	39 8b       	std	Y+17, r19	; 0x11
     194:	5d 8b       	std	Y+21, r21	; 0x15
     196:	67 8b       	std	Z+23, r22	; 0x17
     198:	b1 8b       	std	Z+17, r27	; 0x11
     19a:	7c 8b       	std	Y+20, r23	; 0x14
     19c:	7c 8b       	std	Y+20, r23	; 0x14
     19e:	74 8b       	std	Z+20, r23	; 0x14
     1a0:	e4 98       	cbi	0x1c, 4	; 28
     1a2:	06 9a       	sbi	0x00, 6	; 0
     1a4:	66 9a       	sbi	0x0c, 6	; 12
     1a6:	d4 9a       	sbi	0x1a, 4	; 26
     1a8:	ea 9a       	sbi	0x1d, 2	; 29
     1aa:	15 9b       	sbis	0x02, 5	; 2
     1ac:	fa 9b       	sbis	0x1f, 2	; 31
     1ae:	b7 9d       	mul	r27, r7
     1b0:	b7 9d       	mul	r27, r7
     1b2:	b7 9d       	mul	r27, r7
     1b4:	42 9c       	mul	r4, r2
     1b6:	76 9c       	mul	r7, r6
     1b8:	1e 9d       	mul	r17, r14
     1ba:	40 9d       	mul	r20, r0
     1bc:	a6 99       	sbic	0x14, 6	; 20
     1be:	c1 99       	sbic	0x18, 1	; 24
     1c0:	0c be       	out	0x3c, r0	; 60
     1c2:	cb bd       	out	0x2b, r28	; 43
     1c4:	cb bd       	out	0x2b, r28	; 43
     1c6:	cb bd       	out	0x2b, r28	; 43
     1c8:	cb bd       	out	0x2b, r28	; 43
     1ca:	8f bd       	out	0x2f, r24	; 47
     1cc:	96 bd       	out	0x26, r25	; 38
     1ce:	9d bd       	out	0x2d, r25	; 45
     1d0:	ad bd       	out	0x2d, r26	; 45
     1d2:	bb bd       	out	0x2b, r27	; 43
     1d4:	b4 bd       	out	0x24, r27	; 36

000001d6 <__trampolines_end>:
     1d6:	6e 61       	ori	r22, 0x1E	; 30
     1d8:	6e 00       	.word	0x006e	; ????

000001da <__c.2332>:
     1da:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ea:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1fa:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     20a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     21a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     22a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     23a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     24a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     25a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     26a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     27a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     28a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     29a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2aa:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2ba:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2ca:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002d8 <__c.3740>:
     2d8:	63 73 5f 64 69 73 61 62 6c 65 20 77 61 73 3a 20     cs_disable was: 
     2e8:	25 64 2c 20 77 61 6e 74 3a 20 25 64 0a 00           %d, want: %d..

000002f6 <__c.3735>:
     2f6:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     306:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

00000313 <__c.3766>:
     313:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     323:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     333:	25 75 29 0a 00                                      %u)..

00000338 <__c.3757>:
     338:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     348:	61 69 6c 65 64 21 0a 00                             ailed!..

00000350 <__c.3751>:
     350:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     360:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

0000036b <__c.3736>:
     36b:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     37b:	35 75 0a 00                                         5u..

0000037f <__c.3734>:
     37f:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     38f:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

0000039d <__c.3732>:
     39d:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     3ad:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003bb <__c.3730>:
     3bb:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     3cb:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003d9 <__c.3728>:
     3d9:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     3e9:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003f7 <__c.3726>:
     3f7:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     407:	75 0a 00                                            u..

0000040a <__c.3724>:
     40a:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     41a:	75 0a 00                                            u..

0000041d <__c.3722>:
     41d:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

0000042a <__c.3720>:
     42a:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     43a:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000447 <__c.3744>:
     447:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000457 <__c.3737>:
     457:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

00000468 <__c.3730>:
     468:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     478:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

00000486 <__c.3722>:
     486:	72 74 63 5f 72 75 6e 20 2d 20 77 72 69 74 65 20     rtc_run - write 
     496:	73 74 61 74 75 73 20 65 72 72 6f 72 0a 00           status error..

000004a4 <__c.3720>:
     4a4:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 73 74 61     rtc_run read sta
     4b4:	74 75 73 20 65 72 72 6f 72 0a 00                    tus error..

000004bf <__c.3747>:
     4bf:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     4cf:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     4df:	74 20 25 64 0a 00                                   t %d..

000004e5 <__c.3704>:
     4e5:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     4f5:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000505 <__c.3783>:
     505:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

00000515 <__c.3781>:
     515:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

00000526 <__c.3779>:
     526:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     536:	66 61 69 6c 65 64 0a 00                             failed..

0000053e <__c.3777>:
     53e:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

0000054a <__c.3775>:
     54a:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     55a:	64 0a 00                                            d..

0000055d <__c.3773>:
     55d:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     56d:	65 64 0a 00                                         ed..

00000571 <__c.3753>:
     571:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

0000057c <__c.3751>:
     57c:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

0000058a <__c.3737>:
     58a:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

00000594 <__c.3717>:
     594:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5a4:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005b1 <__c.3992>:
     5b1:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005c2 <__c.3990>:
     5c2:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     5d2:	0a 00                                               ..

000005d4 <__c.3988>:
     5d4:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

000005e5 <__c.3986>:
     5e5:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

000005f6 <__c.3984>:
     5f6:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     606:	0a 00                                               ..

00000608 <__c.3977>:
     608:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     618:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     628:	6d 65 0a 00                                         me..

0000062c <__c.3975>:
     62c:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     63c:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

00000646 <__c.3973>:
     646:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     656:	61 69 6c 65 64 0a 00                                ailed..

0000065d <__c.3971>:
     65d:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     66d:	6e 69 74 0a 00                                      nit..

00000672 <__c.3969>:
     672:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     682:	0a 00                                               ..

00000684 <__c.3923>:
     684:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     694:	61 69 6c 65 64 0a 00                                ailed..

0000069b <__c.3921>:
     69b:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

000006ac <__c.3919>:
     6ac:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     6bc:	0a 00                                               ..

000006be <__c.3917>:
     6be:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

000006cf <__c.3915>:
     6cf:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

000006e0 <__c.3913>:
     6e0:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     6f0:	0a 00                                               ..

000006f2 <__c.3892>:
     6f2:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     702:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

00000713 <__c.3767>:
     713:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     723:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

00000730 <__c.3735>:
     730:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

00000740 <__c.3764>:
     740:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

0000074e <__c.3762>:
     74e:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     75e:	25 6c 64 0a 00                                      %ld..

00000763 <__c.3760>:
     763:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     773:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

00000781 <__c.3757>:
     781:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

00000792 <__c.3755>:
     792:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

0000079e <__c.3753>:
     79e:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

000007ae <__c.3740>:
     7ae:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

000007bb <__c.3712>:
     7bb:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     7cb:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

000007d7 <__c.3784>:
     7d7:	0a 00                                               ..

000007d9 <__c.3782>:
     7d9:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     7e9:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     7f9:	73 00                                               s.

000007fb <__c.3780>:
     7fb:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     80b:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

00000816 <__c.3774>:
     816:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     826:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     836:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     846:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     856:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

00000863 <__c.3772>:
     863:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     873:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     883:	30 34 58 0a 00                                      04X..

00000888 <__c.3770>:
     888:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     898:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

000008a6 <__c.3768>:
     8a6:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     8b6:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000008c5 <__c.3766>:
     8c5:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     8d5:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

000008e4 <__c.3764>:
     8e4:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     8f4:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000903 <__c.3762>:
     903:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     913:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

00000922 <__c.3760>:
     922:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     932:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000941 <__c.3758>:
     941:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     951:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

0000095f <__c.3756>:
     95f:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     96f:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

0000097d <__c.3754>:
     97d:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     98d:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

0000099c <__c.3752>:
     99c:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     9ac:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

000009ba <__c.3750>:
     9ba:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

000009cb <__c.3714>:
     9cb:	72 63 3d 25 75 0a 00                                rc=%u..

000009d2 <__c.3752>:
     9d2:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     9e2:	72 65 65 0a 00                                      ree..

000009e7 <__c.3750>:
     9e7:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     9f7:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     a07:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000a10 <__c.3746>:
     a10:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000a1e <__c.3733>:
     a1e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a2e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000a3e <__c.3731>:
     a3e:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000a4c <__c.3729>:
     a4c:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     a5c:	73 74 0a 00                                         st..

00000a60 <__c.3727>:
     a60:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000a70 <__c.3725>:
     a70:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     a80:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000a90 <__c.3717>:
     a90:	69 6e 64 3a 25 64 2c 61 72 67 63 3a 25 64 0a 00     ind:%d,argc:%d..

00000aa0 <__c.3707>:
     aa0:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     ab0:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     ac0:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     ad0:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     ae0:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     af0:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b00:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     b10:	61 74 75 73 20 66 69 6c 65 0a 0a 00                 atus file...

00000b1c <__c.3705>:
     b1c:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000b28 <__c.4037>:
     b28:	25 73 0a 00                                         %s..

00000b2c <__c.4035>:
     b2c:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000b34 <__c.3790>:
     b34:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000b40 <__c.3719>:
     b40:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     b50:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000b58 <__c.3712>:
     b58:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     b68:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000b70 <__c.3876>:
     b70:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000b7b <__c.3872>:
     b7b:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     b8b:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     b9b:	68 0a 00                                            h..

00000b9e <__c.3869>:
     b9e:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000bae <__c.3864>:
     bae:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     bbe:	5b 25 73 5d 0a 00                                   [%s]..

00000bc4 <__c.3862>:
     bc4:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000bd2 <__c.3860>:
     bd2:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     be2:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000bf3 <__c.3847>:
     bf3:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     c03:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000c0d <__c.3842>:
     c0d:	25 73 0a 00                                         %s..

00000c11 <__c.3840>:
     c11:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     c21:	0a 00                                               ..

00000c23 <__c.3828>:
     c23:	0d 00                                               ..

00000c25 <__c.3826>:
     c25:	4d 6f 72 65 2e 2e 00                                More...

00000c2c <__c.3816>:
     c2c:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     c3c:	2e 0a 00                                            ...

00000c3f <__c.3812>:
     c3f:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000c4e <__c.3809>:
     c4e:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000c5b <__c.3807>:
     c5b:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000c68 <__c.3805>:
     c68:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000c78 <__c.3803>:
     c78:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000c85 <__c.3801>:
     c85:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000c95 <__c.3799>:
     c95:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000ca1 <__c.3788>:
     ca1:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000cac <__c.3786>:
     cac:	0a 00                                               ..

00000cae <__c.3781>:
     cae:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cbe <__c.3771>:
     cbe:	72 6d 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     rmdir %s failed.
	...

00000ccf <__c.3769>:
     ccf:	72 6d 20 25 73 20 66 61 69 6c 65 64 0a 00           rm %s failed..

00000cdd <__c.3767>:
     cdd:	72 65 6e 61 6d 65 20 25 73 20 74 6f 20 25 73 0a     rename %s to %s.
	...

00000cee <__c.3765>:
     cee:	25 73 0a 00                                         %s..

00000cf2 <__c.3762>:
     cf2:	6d 6b 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     mkdir %s failed.
	...

00000d03 <__c.3754>:
     d03:	63 68 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     chdir %s failed.
	...

00000d14 <__c.3738>:
     d14:	70 6f 73 69 78 20 70 72 65 66 69 78 20 69 73 20     posix prefix is 
     d24:	6f 70 74 69 6f 6e 61 6c 0a 70 6f 73 69 78 20 63     optional.posix c
     d34:	61 74 20 66 69 6c 65 20 5b 2d 70 5d 0a 70 6f 73     at file [-p].pos
     d44:	69 78 20 63 64 20 64 69 72 0a 70 6f 73 69 78 20     ix cd dir.posix 
     d54:	63 6f 70 79 20 66 69 6c 65 31 20 66 69 6c 65 32     copy file1 file2
     d64:	0a 70 6f 73 69 78 20 6c 73 20 64 69 72 20 5b 2d     .posix ls dir [-
     d74:	6c 5d 0a 70 6f 73 69 78 20 6d 6b 64 69 72 20 64     l].posix mkdir d
     d84:	69 72 0a 70 6f 73 69 78 20 70 61 67 65 20 4e 4e     ir.posix page NN
     d94:	0a 70 6f 73 69 78 20 70 77 64 0a 70 6f 73 69 78     .posix pwd.posix
     da4:	20 72 6d 20 66 69 6c 65 0a 70 6f 73 69 78 20 72      rm file.posix r
     db4:	6d 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 72     mdir dir.posix r
     dc4:	65 6e 61 6d 65 20 6f 6c 64 20 6e 65 77 0a 0a 00     ename old new...

00000dd4 <__c.3736>:
     dd4:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000de0 <__c.3927>:
     de0:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000dee <__c.3921>:
     dee:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000dfb <__c.3914>:
     dfb:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000e09 <__c.3905>:
     e09:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000e16 <__c.3896>:
     e16:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000e27 <__c.3882>:
     e27:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     e37:	5d 0a 00                                            ]..

00000e3a <__c.3864>:
     e3a:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     e4a:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000e57 <__c.4449>:
     e57:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     e67:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     e77:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000e7f <__c.4444>:
     e7f:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     e8f:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000e99 <__c.4434>:
     e99:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     ea9:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     eb9:	28 25 64 29 5d 0a 00                                (%d)]..

00000ec0 <__c.4430>:
     ec0:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     ed0:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     ee0:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000eed <__c.4427>:
     eed:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     efd:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000f06 <__c.4411>:
     f06:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000f11 <__c.4409>:
     f11:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00000f1c <__c.4407>:
     f1c:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

00000f27 <__c.4403>:
     f27:	20 20 20 20 20 00                                        .

00000f2d <__c.4401>:
     f2d:	25 30 32 58 20 25 63 20 00                          %02X %c .

00000f36 <__c.4359>:
     f36:	3c 4e 52 46 44 3d 25 64 2c 4e 44 41 56 3d 25 64     <NRFD=%d,NDAV=%d
     f46:	3e 0a 00                                            >..

00000f49 <__c.4355>:
     f49:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f59:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000f63 <__c.4351>:
     f63:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f73:	20 4e 44 41 43 3d 3d 31 3e 0a 00                     NDAC==1>..

00000f7e <__c.4348>:
     f7e:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f8e:	20 4e 52 46 44 3d 3d 30 3e 0a 00                     NRFD==0>..

00000f99 <__c.4343>:
     f99:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     fa9:	20 4e 52 46 44 3d 3d 31 20 26 26 20 4e 44 41 43      NRFD==1 && NDAC
     fb9:	20 3d 3d 20 30 3e 0a 00                              == 0>..

00000fc1 <__c.4339>:
     fc1:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     fd1:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000fdb <__c.4322>:
     fdb:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
     feb:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
     ffb:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

00001009 <__c.4310>:
    1009:	5b 49 46 43 20 53 45 4e 54 5d 0a 00                 [IFC SENT]..

00001015 <__c.4296>:
    1015:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    1025:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001030 <__c.4294>:
    1030:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    1040:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    1050:	72 61 6e 67 65 0a 00                                range..

00001057 <__c.4289>:
    1057:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    1067:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001072 <__c.4287>:
    1072:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    1082:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    1092:	61 6e 67 65 0a 00                                   ange..

00001098 <__c.4282>:
    1098:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    10a8:	5d 0a 00                                            ]..

000010ab <__c.4277>:
    10ab:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

000010bc <__c.4430>:
    10bc:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

000010cd <__c.4425>:
    10cd:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    10dd:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    10ed:	32 58 48 5d 0a 00                                   2XH]..

000010f3 <__c.4423>:
    10f3:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    1103:	0a 00                                               ..

00001105 <__c.4421>:
    1105:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

00001116 <__c.4416>:
    1116:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

00001122 <__c.4414>:
    1122:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

00001132 <__c.4412>:
    1132:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    1142:	52 5d 0a 00                                         R]..

00001146 <__c.4410>:
    1146:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    1156:	0a 00                                               ..

00001158 <__c.4408>:
    1158:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

00001169 <__c.4406>:
    1169:	5b 55 4e 54 5d 0a 00                                [UNT]..

00001170 <__c.4401>:
    1170:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

0000117c <__c.4399>:
    117c:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    118c:	52 5d 0a 00                                         R]..

00001190 <__c.4397>:
    1190:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

000011a1 <__c.4395>:
    11a1:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    11b1:	0a 00                                               ..

000011b3 <__c.4393>:
    11b3:	0a 00                                               ..

000011b5 <__c.4391>:
    11b5:	5b 55 4e 4c 5d 0a 00                                [UNL]..

000011bc <__c.4386>:
    11bc:	5b 48 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [HPIB (%02XH) no
    11cc:	74 20 64 65 66 69 6e 65 64 5d 0a 00                 t defined]..

000011d8 <__c.4384>:
    11d8:	5b 44 43 4c 5d 0a 00                                [DCL]..

000011df <__c.4382>:
    11df:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

000011ec <__c.4380>:
    11ec:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

000011f8 <__c.4378>:
    11f8:	5b 53 44 43 5d 0a 00                                [SDC]..

000011ff <__c.4376>:
    11ff:	5b 53 50 44 5d 0a 00                                [SPD]..

00001206 <__c.4374>:
    1206:	5b 53 50 45 5d 0a 00                                [SPE]..

0000120d <__c.4372>:
    120d:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    121d:	5d 0a 00                                            ]..

00001220 <__c.4370>:
    1220:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    1230:	5d 0a 00                                            ]..

00001233 <__c.4365>:
    1233:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1243:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

0000124d <__c.4363>:
    124d:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    125d:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

0000126e <__c.4336>:
    126e:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

0000127f <__c.4334>:
    127f:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

0000128c <__c.4332>:
    128c:	3c 42 55 53 3e 0a 00                                <BUS>..

00001293 <__c.4330>:
    1293:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

0000129e <__c.4328>:
    129e:	3c 49 46 43 3e 0a 00                                <IFC>..

000012a5 <__c.4323>:
    12a5:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    12b5:	0a 00                                               ..

000012b7 <__c.4321>:
    12b7:	44 6f 6e 65 0a 00                                   Done..

000012bd <__c.4317>:
    12bd:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000012c9 <__c.4315>:
    12c9:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    12d9:	20 65 78 69 74 0a 00                                 exit..

000012e0 <__c.4313>:
    12e0:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    12f0:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    1300:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

0000130b <__c.4311>:
    130b:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    131b:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

00001325 <__c.4265>:
    1325:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    1335:	6f 74 65 63 74 65 64 0a 00                          otected..

0000133e <__c.4263>:
    133e:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

0000134f <__c.4261>:
    134f:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    135f:	0a 00                                               ..

00001361 <__c.4479>:
    1361:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

0000136e <__c.4471>:
    136e:	67 70 69 62 20 70 72 65 66 69 78 20 69 73 20 6f     gpib prefix is o
    137e:	70 74 69 6f 6e 61 6c 0a 67 70 69 62 20 61 64 64     ptional.gpib add
    138e:	72 65 73 73 65 73 0a 67 70 69 62 20 63 6f 6e 66     resses.gpib conf
    139e:	69 67 0a 67 70 69 62 20 64 65 62 75 67 20 4e 0a     ig.gpib debug N.
    13ae:	67 70 69 62 20 65 6c 61 70 73 65 64 0a 67 70 69     gpib elapsed.gpi
    13be:	62 20 65 6c 61 70 73 65 64 5f 72 65 73 65 74 0a     b elapsed_reset.
    13ce:	67 70 69 62 20 69 66 63 0a 67 70 69 62 20 70 6c     gpib ifc.gpib pl
    13de:	6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78 74 0a     ot filename.txt.
    13ee:	67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f 0a 67     gpib plot_echo.g
    13fe:	70 69 62 20 74 61 73 6b 0a 67 70 69 62 20 74 72     pib task.gpib tr
    140e:	61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74 78 74     ace filename.txt
    141e:	20 5b 42 55 53 5d 0a 0a 0a 00                        [BUS]....

00001428 <__c.4469>:
    1428:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

00001433 <__c.4931>:
    1433:	0a 00                                               ..

00001435 <__c.4926>:
    1435:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

0000143d <__c.4924>:
    143d:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    144d:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    145d:	0a 00                                               ..

0000145f <__c.4922>:
    145f:	53 53 38 30 2d 25 64 00                             SS80-%d.

00001467 <__c.4920>:
    1467:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1477:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1487:	0a 00                                               ..

00001489 <__c.4907>:
    1489:	0a 00                                               ..

0000148b <__c.4905>:
    148b:	45 4e 44 0a 00                                      END..

00001490 <__c.4900>:
    1490:	0a 00                                               ..

00001492 <__c.4898>:
    1492:	45 4e 44 0a 00                                      END..

00001497 <__c.4896>:
    1497:	20 20 45 4e 44 0a 00                                  END..

0000149e <__c.4894>:
    149e:	41 44 44 52 45 53 53 00                             ADDRESS.

000014a6 <__c.4892>:
    14a6:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

000014b0 <__c.4890>:
    14b0:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

000014b9 <__c.4888>:
    14b9:	20 20 45 4e 44 0a 00                                  END..

000014c0 <__c.4886>:
    14c0:	23 20 42 4c 4f 43 4b 53 00                          # BLOCKS.

000014c9 <__c.4884>:
    14c9:	43 59 4c 49 4e 44 45 52 53 00                       CYLINDERS.

000014d3 <__c.4882>:
    14d3:	48 45 41 44 53 00                                   HEADS.

000014d9 <__c.4880>:
    14d9:	53 45 43 54 4f 52 53 5f 50 45 52 5f 54 52 41 43     SECTORS_PER_TRAC
    14e9:	4b 00                                               K.

000014eb <__c.4878>:
    14eb:	42 59 54 45 53 5f 50 45 52 5f 53 45 43 54 4f 52     BYTES_PER_SECTOR
	...

000014fc <__c.4876>:
    14fc:	20 20 47 45 4f 4d 45 54 52 59 0a 00                   GEOMETRY..

00001508 <__c.4874>:
    1508:	20 20 45 4e 44 0a 00                                  END..

0000150f <__c.4872>:
    150f:	49 44 00                                            ID.

00001512 <__c.4870>:
    1512:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

0000151c <__c.4868>:
    151c:	20 20 45 4e 44 0a 00                                  END..

00001523 <__c.4866>:
    1523:	46 49 4c 45 00                                      FILE.

00001528 <__c.4864>:
    1528:	50 50 52 00                                         PPR.

0000152c <__c.4862>:
    152c:	41 44 44 52 45 53 53 00                             ADDRESS.

00001534 <__c.4860>:
    1534:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

0000153e <__c.4858>:
    153e:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    154e:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

0000155d <__c.4856>:
    155d:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001567 <__c.4854>:
    1567:	20 20 45 4e 44 0a 00                                  END..

0000156e <__c.4852>:
    156e:	23 20 42 4c 4f 43 4b 53 00                          # BLOCKS.

00001577 <__c.4850>:
    1577:	49 4e 54 45 52 4c 45 41 56 45 00                    INTERLEAVE.

00001582 <__c.4848>:
    1582:	4d 41 58 5f 42 4c 4f 43 4b 5f 4e 55 4d 42 45 52     MAX_BLOCK_NUMBER
	...

00001593 <__c.4846>:
    1593:	4d 41 58 5f 53 45 43 54 4f 52 00                    MAX_SECTOR.

0000159e <__c.4844>:
    159e:	4d 41 58 5f 48 45 41 44 00                          MAX_HEAD.

000015a7 <__c.4842>:
    15a7:	4d 41 58 5f 43 59 4c 49 4e 44 45 52 00              MAX_CYLINDER.

000015b4 <__c.4840>:
    15b4:	20 20 56 4f 4c 55 4d 45 0a 00                         VOLUME..

000015be <__c.4838>:
    15be:	20 20 45 4e 44 0a 00                                  END..

000015c5 <__c.4836>:
    15c5:	52 45 4d 4f 56 41 42 4c 45 5f 56 4f 4c 55 4d 45     REMOVABLE_VOLUME
    15d5:	53 00                                               S.

000015d7 <__c.4834>:
    15d7:	46 49 58 45 44 5f 56 4f 4c 55 4d 45 53 00           FIXED_VOLUMES.

000015e5 <__c.4832>:
    15e5:	4d 41 58 49 4d 55 4d 5f 49 4e 54 45 52 4c 45 41     MAXIMUM_INTERLEA
    15f5:	56 45 00                                            VE.

000015f8 <__c.4830>:
    15f8:	41 43 43 45 53 53 5f 54 49 4d 45 00                 ACCESS_TIME.

00001604 <__c.4828>:
    1604:	4f 50 54 49 4d 41 4c 5f 52 45 54 52 59 5f 54 49     OPTIMAL_RETRY_TI
    1614:	4d 45 00                                            ME.

00001617 <__c.4826>:
    1617:	43 4f 4e 54 49 4e 55 4f 55 53 5f 54 52 41 4e 53     CONTINUOUS_TRANS
    1627:	46 45 52 5f 52 41 54 45 00                          FER_RATE.

00001630 <__c.4824>:
    1630:	42 4c 4f 43 4b 5f 54 49 4d 45 00                    BLOCK_TIME.

0000163b <__c.4822>:
    163b:	42 55 52 53 54 5f 53 49 5a 45 00                    BURST_SIZE.

00001646 <__c.4820>:
    1646:	42 55 46 46 45 52 45 44 5f 42 4c 4f 43 4b 53 00     BUFFERED_BLOCKS.

00001656 <__c.4818>:
    1656:	42 59 54 45 53 5f 50 45 52 5f 42 4c 4f 43 4b 00     BYTES_PER_BLOCK.

00001666 <__c.4816>:
    1666:	44 45 56 49 43 45 5f 4e 55 4d 42 45 52 00           DEVICE_NUMBER.

00001674 <__c.4814>:
    1674:	55 4e 49 54 5f 54 59 50 45 00                       UNIT_TYPE.

0000167e <__c.4812>:
    167e:	20 20 55 4e 49 54 0a 00                               UNIT..

00001686 <__c.4810>:
    1686:	20 20 45 4e 44 0a 00                                  END..

0000168d <__c.4808>:
    168d:	54 59 50 45 00                                      TYPE.

00001692 <__c.4806>:
    1692:	54 52 41 4e 53 46 45 52 5f 52 41 54 45 00           TRANSFER_RATE.

000016a0 <__c.4804>:
    16a0:	55 4e 49 54 53 5f 49 4e 53 54 41 4c 4c 45 44 00     UNITS_INSTALLED.

000016b0 <__c.4802>:
    16b0:	20 20 43 4f 4e 54 52 4f 4c 4c 45 52 0a 00             CONTROLLER..

000016be <__c.4800>:
    16be:	20 20 45 4e 44 0a 00                                  END..

000016c5 <__c.4798>:
    16c5:	49 44 00                                            ID.

000016c8 <__c.4796>:
    16c8:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

000016d2 <__c.4794>:
    16d2:	20 20 45 4e 44 0a 00                                  END..

000016d9 <__c.4792>:
    16d9:	46 49 4c 45 00                                      FILE.

000016de <__c.4790>:
    16de:	50 50 52 00                                         PPR.

000016e2 <__c.4788>:
    16e2:	41 44 44 52 45 53 53 00                             ADDRESS.

000016ea <__c.4786>:
    16ea:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

000016f4 <__c.4784>:
    16f4:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1704:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001713 <__c.4782>:
    1713:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

0000171c <__c.4779>:
    171c:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    172c:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

0000173c <__c.4771>:
    173c:	0a 00                                               ..

0000173e <__c.4766>:
    173e:	20 20 50 52 49 4e 54 45 52 5f 4d 53 41 20 3d 20       PRINTER_MSA = 
    174e:	25 30 32 58 48 0a 00                                %02XH..

00001755 <__c.4764>:
    1755:	20 20 50 52 49 4e 54 45 52 5f 4d 54 41 20 3d 20       PRINTER_MTA = 
    1765:	25 30 32 58 48 0a 00                                %02XH..

0000176c <__c.4762>:
    176c:	20 20 50 52 49 4e 54 45 52 5f 4d 4c 41 20 3d 20       PRINTER_MLA = 
    177c:	25 30 32 58 48 0a 00                                %02XH..

00001783 <__c.4760>:
    1783:	20 20 41 4d 49 47 4f 5f 4d 53 41 20 20 20 3d 20       AMIGO_MSA   = 
    1793:	25 30 32 58 48 0a 00                                %02XH..

0000179a <__c.4758>:
    179a:	20 20 41 4d 49 47 4f 5f 4d 54 41 20 20 20 3d 20       AMIGO_MTA   = 
    17aa:	25 30 32 58 48 0a 00                                %02XH..

000017b1 <__c.4756>:
    17b1:	20 20 41 4d 49 47 4f 5f 4d 4c 41 20 20 20 3d 20       AMIGO_MLA   = 
    17c1:	25 30 32 58 48 0a 00                                %02XH..

000017c8 <__c.4754>:
    17c8:	20 20 53 53 38 30 5f 4d 53 41 20 20 20 20 3d 20       SS80_MSA    = 
    17d8:	25 30 32 58 48 0a 00                                %02XH..

000017df <__c.4752>:
    17df:	20 20 53 53 38 30 5f 4d 54 41 20 20 20 20 3d 20       SS80_MTA    = 
    17ef:	25 30 32 58 48 0a 00                                %02XH..

000017f6 <__c.4750>:
    17f6:	20 20 53 53 38 30 5f 4d 4c 41 20 20 20 20 3d 20       SS80_MLA    = 
    1806:	25 30 32 58 48 0a 00                                %02XH..

0000180d <__c.4747>:
    180d:	4c 69 73 74 65 6e 20 61 6e 64 20 54 61 6c 6b 20     Listen and Talk 
    181d:	41 64 64 72 65 73 73 20 53 65 74 74 69 6e 67 73     Address Settings
    182d:	0a 00                                               ..

0000182f <__c.4741>:
    182f:	20 20 20 20 25 2d 32 35 73 20 3d 20 22 25 73 22         %-25s = "%s"
    183f:	0a 00                                               ..

00001841 <__c.4730>:
    1841:	20 20 20 20 25 2d 32 35 73 20 3d 20 25 38 6c 78         %-25s = %8lx
    1851:	48 20 28 25 6c 64 29 0a 00                          H (%ld)..

0000185a <__c.4719>:
    185a:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    186a:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    187a:	2a 2a 2a 2a 2a 0a 00                                *****..

00001881 <__c.4717>:
    1881:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    1891:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

0000189e <__c.4715>:
    189e:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    18ae:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    18be:	0a 00                                               ..

000018c0 <__c.4711>:
    18c0:	46 61 74 61 6c 20 55 6e 65 78 70 65 63 74 65 64     Fatal Unexpected
    18d0:	20 53 54 41 54 45 20 25 64 20 61 74 20 6c 69 6e      STATE %d at lin
    18e0:	65 3a 25 64 0a 00                                   e:%d..

000018e6 <__c.4708>:
    18e6:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    18f6:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1906:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001916 <__c.4706>:
    1916:	46 61 74 61 6c 3a 20 41 4d 49 47 4f 20 42 59 54     Fatal: AMIGO BYT
    1926:	45 53 5f 50 45 52 5f 53 45 43 54 4f 52 20 3e 20     ES_PER_SECTOR > 
    1936:	30 78 31 30 30 30 2c 20 73 65 74 20 74 6f 20 32     0x1000, set to 2
    1946:	35 36 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        56 at line:%d..

00001955 <__c.4703>:
    1955:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1965:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1975:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001984 <__c.4700>:
    1984:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1994:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    19a4:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

000019b4 <__c.4698>:
    19b4:	57 61 72 6e 69 6e 67 20 41 4d 49 47 4f 20 41 44     Warning AMIGO AD
    19c4:	44 52 45 53 53 3a 20 25 64 20 3e 20 37 2c 20 64     DRESS: %d > 7, d
    19d4:	69 73 61 62 6c 65 64 20 61 74 20 6c 69 6e 65 3a     isabled at line:
    19e4:	25 64 0a 00                                         %d..

000019e8 <__c.4696>:
    19e8:	46 61 74 61 6c 20 41 4d 49 47 4f 20 41 44 44 52     Fatal AMIGO ADDR
    19f8:	45 53 53 3a 20 25 64 20 3e 20 33 31 20 64 69 73     ESS: %d > 31 dis
    1a08:	61 62 6c 65 64 20 61 74 20 6c 69 6e 65 3a 25 64     abled at line:%d
    1a18:	0a 00                                               ..

00001a1a <__c.4694>:
    1a1a:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    1a2a:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

00001a33 <__c.4691>:
    1a33:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1a43:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1a53:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001a61 <__c.4688>:
    1a61:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1a71:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1a81:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001a8f <__c.4685>:
    1a8f:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1a9f:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1aaf:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001abb <__c.4683>:
    1abb:	46 61 74 61 6c 3a 20 53 53 38 30 20 42 55 52 53     Fatal: SS80 BURS
    1acb:	54 5f 53 49 5a 45 20 3e 20 30 2c 20 73 65 74 20     T_SIZE > 0, set 
    1adb:	74 6f 20 31 20 61 74 20 6c 69 6e 65 3a 25 64 0a     to 1 at line:%d.
	...

00001aec <__c.4681>:
    1aec:	46 61 74 61 6c 3a 20 53 53 38 30 20 42 55 46 46     Fatal: SS80 BUFF
    1afc:	45 52 45 44 5f 42 4c 4f 43 4b 53 20 3e 20 31 2c     ERED_BLOCKS > 1,
    1b0c:	20 73 65 74 20 74 6f 20 31 20 61 74 20 6c 69 6e      set to 1 at lin
    1b1c:	65 3a 25 64 0a 00                                   e:%d..

00001b22 <__c.4679>:
    1b22:	46 61 74 61 6c 3a 20 53 53 38 30 20 42 59 54 45     Fatal: SS80 BYTE
    1b32:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 3e 20 30 78     S_PER_BLOCK > 0x
    1b42:	31 30 30 30 2c 20 73 65 74 20 74 6f 20 32 35 36     1000, set to 256
    1b52:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001b5f <__c.4676>:
    1b5f:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b6f:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1b7f:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1b8f:	0a 00                                               ..

00001b91 <__c.4673>:
    1b91:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1ba1:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1bb1:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001bbf <__c.4670>:
    1bbf:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bcf:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1bdf:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001bed <__c.4668>:
    1bed:	57 61 72 6e 69 6e 67 20 53 53 38 30 20 50 50 52     Warning SS80 PPR
    1bfd:	20 3e 20 37 20 61 74 20 6c 69 6e 65 3a 25 64 0a      > 7 at line:%d.
	...

00001c0e <__c.4666>:
    1c0e:	46 61 74 61 6c 20 53 53 38 30 20 41 44 44 52 45     Fatal SS80 ADDRE
    1c1e:	53 53 20 3e 20 33 31 20 61 74 20 6c 69 6e 65 20     SS > 31 at line 
    1c2e:	64 0a 00                                            d..

00001c31 <__c.4663>:
    1c31:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1c41:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1c51:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001c5e <__c.4660>:
    1c5e:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1c6e:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1c7e:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001c8f <__c.4658>:
    1c8f:	46 61 74 61 6c 20 50 52 49 4e 54 45 52 20 41 44     Fatal PRINTER AD
    1c9f:	44 52 45 53 53 20 6f 75 74 20 6f 66 20 72 61 6e     DRESS out of ran
    1caf:	67 65 3a 20 25 6c 64 20 64 69 73 61 62 6c 65 64     ge: %ld disabled
    1cbf:	3a 25 64 0a 00                                      :%d..

00001cc4 <__c.4655>:
    1cc4:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1cd4:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1ce4:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001cee <__c.4651>:
    1cee:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 52 54     Unexpected START
    1cfe:	20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74 20 6c      token: %s, at l
    1d0e:	69 6e 65 3a 25 64 0a 00                             ine:%d..

00001d16 <__c.4649>:
    1d16:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    1d26:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

00001d2f <__c.4645>:
    1d2f:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    1d3f:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00001d4d <__c.4643>:
    1d4d:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00001d5a <__c.4616>:
    1d5a:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1d6a:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    1d7a:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    1d8a:	6f 20 32 35 36 0a 00                                o 256..

00001d91 <__c.4614>:
    1d91:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1da1:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    1db1:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    1dc1:	20 32 35 36 0a 00                                    256..

00001dc7 <__c.4601>:
    1dc7:	68 70 64 69 72 5f 70 61 72 61 6d 65 74 65 72 73     hpdir_parameters
    1dd7:	20 69 6e 76 61 6c 69 64 20 54 59 50 45 0a 00         invalid TYPE..

00001de6 <__c.4565>:
    1de6:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    1df6:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    1e06:	0a 00                                               ..

00001e08 <__c.4557>:
    1e08:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    1e18:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    1e28:	6c 6c 0a 00                                         ll..

00001e2c <__c.4544>:
    1e2c:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1e3c:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    1e4c:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

00001e57 <__c.4542>:
    1e57:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1e67:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    1e77:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    1e87:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00001e8f <__c.4540>:
    1e8f:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1e9f:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    1eaf:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    1ebf:	3a 25 73 0a 00                                      :%s..

00001ec4 <__c.4538>:
    1ec4:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1ed4:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    1ee4:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    1ef4:	55 4c 4c 0a 00                                      ULL..

00001ef9 <__c.4536>:
    1ef9:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1f09:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    1f19:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    1f29:	66 20 72 61 6e 67 65 0a 00                          f range..

00001f32 <__c.4534>:
    1f32:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1f42:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    1f52:	6e 67 65 0a 00                                      nge..

00001f57 <__c.3767>:
    1f57:	46 6f 75 6e 64 20 4d 6f 64 65 6c 3a 20 25 73 0a     Found Model: %s.
	...

00001f68 <__c.3765>:
    1f68:	25 73 20 25 73 0a 00                                %s %s..

00001f6f <__c.3761>:
    1f6f:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    1f7f:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

00001f8c <__c.4573>:
    1f8c:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    1f9c:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1fac:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1fbc:	48 5d 0a 00                                         H]..

00001fc0 <__c.4571>:
    1fc0:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    1fd0:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1fe0:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1ff0:	48 5d 0a 00                                         H]..

00001ff4 <__c.4569>:
    1ff4:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    2004:	74 5d 0a 00                                         t]..

00002008 <__c.4567>:
    2008:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00002017 <__c.4565>:
    2017:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    2027:	74 65 5d 0a 00                                      te]..

0000202c <__c.4563>:
    202c:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    203c:	61 74 65 5d 0a 00                                   ate]..

00002042 <__c.4561>:
    2042:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    2052:	61 74 65 5d 0a 00                                   ate]..

00002058 <__c.4556>:
    2058:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    2068:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    2078:	5d 0a 00                                            ]..

0000207b <__c.4542>:
    207b:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

0000208a <__c.4540>:
    208a:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    209a:	5d 0a 00                                            ]..

0000209d <__c.4533>:
    209d:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

000020a9 <__c.4519>:
    20a9:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    20b9:	5d 0a 00                                            ]..

000020bc <__c.4517>:
    20bc:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    20cc:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

000020d6 <__c.4510>:
    20d6:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    20e6:	48 5d 0a 00                                         H]..

000020ea <__c.4508>:
    20ea:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    20fa:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

0000210a <__c.4503>:
    210a:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    211a:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    212a:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    213a:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

00002146 <__c.4500>:
    2146:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    2156:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00002166 <__c.4498>:
    2166:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    2176:	29 5d 0a 00                                         )]..

0000217a <__c.4496>:
    217a:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    218a:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    219a:	28 25 64 29 5d 0a 00                                (%d)]..

000021a1 <__c.4494>:
    21a1:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    21b1:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

000021bf <__c.4492>:
    21bf:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    21cf:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

000021dc <__c.4489>:
    21dc:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    21ec:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    21fc:	44 4f 5d 0a 00                                      DO]..

00002201 <__c.4486>:
    2201:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    2211:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

0000221a <__c.4484>:
    221a:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    222a:	5d 0a 00                                            ]..

0000222d <__c.4475>:
    222d:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    223d:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    224d:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    225d:	43 6f 64 65 73 5d 0a 00                             Codes]..

00002265 <__c.4472>:
    2265:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    2275:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00002285 <__c.4470>:
    2285:	5b 53 53 38 30 20 49 6e 69 61 74 65 20 44 69 61     [SS80 Iniate Dia
    2295:	67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f 5d 0a     gnostic - TODO].
	...

000022a6 <__c.4468>:
    22a6:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    22b6:	61 74 75 73 5d 0a 00                                atus]..

000022bd <__c.4466>:
    22bd:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    22cd:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

000022d6 <__c.4464>:
    22d6:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    22e6:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

000022f1 <__c.4462>:
    22f1:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    2301:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

00002310 <__c.4460>:
    2310:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    2320:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

0000232e <__c.4458>:
    232e:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

0000233f <__c.4456>:
    233f:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    234f:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

0000235b <__c.4454>:
    235b:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    236b:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

00002378 <__c.4452>:
    2378:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    2388:	2d 4f 50 5d 0a 00                                   -OP]..

0000238e <__c.4450>:
    238e:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    239e:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

000023af <__c.4448>:
    23af:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    23bf:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    23cf:	44 4f 5d 0a 00                                      DO]..

000023d4 <__c.4446>:
    23d4:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    23e4:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

000023ee <__c.4444>:
    23ee:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    23fe:	2d 4f 50 5d 0a 00                                   -OP]..

00002404 <__c.4442>:
    2404:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

00002412 <__c.4440>:
    2412:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    2422:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

0000242e <__c.4438>:
    242e:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    243e:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

0000244b <__c.4436>:
    244b:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    245b:	20 57 72 69 74 65 5d 0a 00                           Write]..

00002464 <__c.4433>:
    2464:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2474:	20 52 65 61 64 5d 0a 00                              Read]..

0000247c <__c.4431>:
    247c:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    248c:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

00002495 <__c.4428>:
    2495:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    24a5:	25 64 29 5d 0a 00                                   %d)]..

000024ab <__c.4426>:
    24ab:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    24bb:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

000024c4 <__c.4424>:
    24c4:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    24d4:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    24e4:	52 4f 52 5d 0a 00                                   ROR]..

000024ea <__c.4415>:
    24ea:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    24fa:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

00002504 <__c.4410>:
    2504:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    2514:	76 61 6c 69 64 5d 0a 00                             valid]..

0000251c <__c.4405>:
    251c:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    252c:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

0000253b <__c.4403>:
    253b:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    254b:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

00002558 <__c.4401>:
    2558:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    2568:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    2578:	5d 0a 00                                            ]..

0000257b <__c.4399>:
    257b:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

0000258c <__c.4391>:
    258c:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    259c:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

000025a7 <__c.4389>:
    25a7:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    25b7:	73 5d 0a 00                                         s]..

000025bb <__c.4379>:
    25bb:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

000025c6 <__c.4377>:
    25c6:	25 73 3a 0a 00                                      %s:..

000025cb <__c.4352>:
    25cb:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25db:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    25eb:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

000025f6 <__c.4350>:
    25f6:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2606:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    2616:	49 4e 49 53 48 5d 0a 00                             INISH]..

0000261e <__c.4346>:
    261e:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    262e:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    263e:	58 48 29 5d 0a 00                                   XH)]..

00002644 <__c.4344>:
    2644:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    2654:	72 5d 0a 00                                         r]..

00002658 <__c.4340>:
    2658:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    2668:	5d 0a 00                                            ]..

0000266b <__c.4338>:
    266b:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    267b:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    268b:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

00002694 <__c.4326>:
    2694:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    26a4:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    26b4:	62 79 74 65 73 5d 0a 00                             bytes]..

000026bc <__c.4324>:
    26bc:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    26cc:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    26dc:	53 48 5d 0a 00                                      SH]..

000026e1 <__c.4319>:
    26e1:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    26f1:	20 57 72 72 6f 72 5d 0a 00                           Wrror]..

000026fa <__c.4317>:
    26fa:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    270a:	45 72 72 6f 72 5d 0a 00                             Error]..

00002712 <__c.4315>:
    2712:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    2722:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

00002730 <__c.4313>:
    2730:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2740:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    2750:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

00002758 <__c.4296>:
    2758:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    2768:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

00002774 <__c.4280>:
    2774:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    2784:	5d 0a 00                                            ]..

00002787 <__c.4410>:
    2787:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2797:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    27a7:	64 64 72 65 73 73 5d 0a 00                          ddress]..

000027b0 <__c.4407>:
    27b0:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    27c0:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    27d0:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

000027db <__c.4404>:
    27db:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    27eb:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    27fb:	66 66 65 72 65 64 5d 0a 00                          ffered]..

00002804 <__c.4399>:
    2804:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2814:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

00002824 <__c.4396>:
    2824:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    2834:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

00002840 <__c.4393>:
    2840:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2850:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    2860:	0a 00                                               ..

00002862 <__c.4390>:
    2862:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2872:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

00002881 <__c.4387>:
    2881:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2891:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

000028a2 <__c.4384>:
    28a2:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    28b2:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

000028c2 <__c.4380>:
    28c2:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    28d2:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    28e2:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    28f2:	0a 00                                               ..

000028f4 <__c.4375>:
    28f4:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

00002904 <__c.4372>:
    2904:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    2914:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

00002923 <__c.4370>:
    2923:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2933:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    2943:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

0000294e <__c.4368>:
    294e:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    295e:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

0000296e <__c.4366>:
    296e:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    297e:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    298e:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002997 <__c.4364>:
    2997:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    29a7:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

000029b3 <__c.4362>:
    29b3:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    29c3:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    29d3:	0a 00                                               ..

000029d5 <__c.4360>:
    29d5:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

000029e5 <__c.4357>:
    29e5:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    29f5:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

00002a06 <__c.4355>:
    2a06:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2a16:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    2a26:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002a2f <__c.4353>:
    2a2f:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2a3f:	36 5d 0a 00                                         6]..

00002a43 <__c.4350>:
    2a43:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2a53:	35 5d 0a 00                                         5]..

00002a57 <__c.4347>:
    2a57:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2a67:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002a77 <__c.4344>:
    2a77:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2a87:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2a97:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002aa6 <__c.4342>:
    2aa6:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2ab6:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002ac7 <__c.4340>:
    2ac7:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2ad7:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002ae8 <__c.4338>:
    2ae8:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2af8:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    2b08:	0a 00                                               ..

00002b0a <__c.4336>:
    2b0a:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2b1a:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2b2a:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2b3a:	0a 00                                               ..

00002b3c <__c.4324>:
    2b3c:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    2b4c:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    2b5c:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2b6c:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2b7c:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002b8d <__c.4322>:
    2b8d:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2b9d:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2bad:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2bbd:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2bcd:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002bdd <__c.4320>:
    2bdd:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2bed:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2bfd:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2c0d:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2c1d:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002c2d <__c.4318>:
    2c2d:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2c3d:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2c4d:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2c5d:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2c6d:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002c7d <__c.4313>:
    2c7d:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2c8d:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2c9d:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2cad:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2cbd:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2ccd:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2cdd:	58 48 5d 0a 00                                      XH]..

00002ce2 <__c.4311>:
    2ce2:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2cf2:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d02:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2d12:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2d22:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2d32:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2d42:	30 32 58 48 5d 0a 00                                02XH]..

00002d49 <__c.4309>:
    2d49:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2d59:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d69:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2d79:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2d89:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2d99:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2da9:	30 32 58 48 5d 0a 00                                02XH]..

00002db0 <__c.4307>:
    2db0:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2dc0:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2dd0:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2de0:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2df0:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2e00:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2e10:	30 32 58 48 5d 0a 00                                02XH]..

00002e17 <__c.4300>:
    2e17:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002e26 <__c.4287>:
    2e26:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002e33 <__c.4285>:
    2e33:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2e43:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002e4d <__c.4278>:
    2e4d:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2e5d:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002e6c <__c.4271>:
    2e6c:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2e7c:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002e86 <__c.4264>:
    2e86:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    2e96:	6e 65 5d 0a 00                                      ne]..

00002e9b <__c.4260>:
    2e9b:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00002eab <__c.4219>:
    2eab:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    2ebb:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    2ecb:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00002ed6 <__c.4249>:
    2ed6:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    2ee6:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    2ef6:	25 30 34 58 48 5d 0a 00                             %04XH]..

00002efe <__c.4226>:
    2efe:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2f0e:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00002f17 <__c.4212>:
    2f17:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2f27:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002f31 <__c.4210>:
    2f31:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    2f41:	75 73 5d 0a 00                                      us]..

00002f46 <__c.4204>:
    2f46:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2f56:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002f60 <__c.4202>:
    2f60:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    2f70:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002f7e <__c.4196>:
    2f7e:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2f8e:	74 61 74 75 73 5d 0a 00                             tatus]..

00002f96 <__c.4200>:
    2f96:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    2fa6:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

00002fb0 <__c.4198>:
    2fb0:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    2fc0:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

00002fcc <__c.4193>:
    2fcc:	25 30 38 6c 64 0d 00                                %08ld..

00002fd3 <__c.4187>:
    2fd3:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    2fe3:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00002ff4 <__c.4181>:
    2ff4:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00003002 <__c.4179>:
    3002:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    3012:	69 74 65 0a 00                                      ite..

00003017 <__c.4173>:
    3017:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00003023 <__c.4171>:
    3023:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    3033:	6f 3a 25 73 0a 00                                   o:%s..

00003039 <__c.4169>:
    3039:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    3049:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    3059:	74 00                                               t.

0000305b <__c.4837>:
    305b:	09 46 6f 72 6d 61 74 74 69 6e 67 3a 20 77 72 6f     .Formatting: wro
    306b:	74 65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00     te %ld sectors..

0000307b <__c.4835>:
    307b:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    308b:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

0000309b <__c.4833>:
    309b:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    30ab:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    30bb:	30 0a 00                                            0..

000030be <__c.4831>:
    30be:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    30ce:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    30de:	70 74 79 0a 00                                      pty..

000030e3 <__c.4829>:
    30e3:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    30f3:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    3103:	73 20 65 6d 70 74 79 0a 00                          s empty..

0000310c <__c.4816>:
    310c:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    311c:	20 25 31 30 73 0a 00                                 %10s..

00003123 <__c.4814>:
    3123:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    3133:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    3143:	74 20 66 6f 75 6e 64 0a 00                          t found..

0000314c <__c.4812>:
    314c:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    315c:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    316c:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    317c:	74 65 72 73 0a 00                                   ters..

00003182 <__c.4810>:
    3182:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3192:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    31a2:	65 6d 70 74 79 0a 00                                empty..

000031a9 <__c.4808>:
    31a9:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    31b9:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    31c9:	65 6d 70 74 79 0a 00                                empty..

000031d0 <__c.4806>:
    31d0:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    31e0:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    31f0:	20 65 6d 70 74 79 0a 00                              empty..

000031f8 <__c.4797>:
    31f8:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

00003207 <__c.4795>:
    3207:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    3217:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    3227:	20 66 6f 75 6e 64 0a 00                              found..

0000322f <__c.4793>:
    322f:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    323f:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

0000324e <__c.4791>:
    324e:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    325e:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

0000326e <__c.4789>:
    326e:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    327e:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    328e:	70 74 79 0a 00                                      pty..

00003293 <__c.4781>:
    3293:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000032a1 <__c.4776>:
    32a1:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000032af <__c.4774>:
    32af:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    32bf:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    32cf:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000032df <__c.4772>:
    32df:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    32ef:	73 0a 00                                            s..

000032f2 <__c.4770>:
    32f2:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3302:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    3312:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

00003321 <__c.4768>:
    3321:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    3331:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

0000333d <__c.4766>:
    333d:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    334d:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

00003358 <__c.4764>:
    3358:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    3368:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

00003378 <__c.4747>:
    3378:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003386 <__c.4742>:
    3386:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003394 <__c.4740>:
    3394:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    33a4:	73 0a 00                                            s..

000033a7 <__c.4738>:
    33a7:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    33b7:	75 6e 64 3a 25 73 0a 00                             und:%s..

000033bf <__c.4721>:
    33bf:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000033cd <__c.4718>:
    33cd:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    33dd:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    33ed:	20 65 72 72 6f 72 0a 00                              error..

000033f5 <__c.4710>:
    33f5:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003403 <__c.4708>:
    3403:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3413:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    3423:	20 65 72 72 6f 72 0a 00                              error..

0000342b <__c.4705>:
    342b:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    343b:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    344b:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    345b:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    346b:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    347b:	30 32 58 48 0a 00                                   02XH..

00003481 <__c.4703>:
    3481:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3491:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    34a1:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    34b1:	20 25 64 0a 00                                       %d..

000034b6 <__c.4699>:
    34b6:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

000034c6 <__c.4697>:
    34c6:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    34d6:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    34e6:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    34f6:	30 78 45 30 31 33 0a 00                             0xE013..

000034fe <__c.4695>:
    34fe:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    350e:	6e 64 3a 25 73 0a 00                                nd:%s..

00003515 <__c.4693>:
    3515:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3525:	75 6e 64 3a 25 73 0a 00                             und:%s..

0000352d <__c.4669>:
    352d:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000353b <__c.4667>:
    353b:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    354b:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

00003554 <__c.4665>:
    3554:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    3564:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

0000356d <__c.4663>:
    356d:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    357d:	20 20 25 34 64 0a 00                                  %4d..

00003584 <__c.4661>:
    3584:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    3594:	20 20 20 25 73 0a 00                                   %s..

0000359b <__c.4659>:
    359b:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    35ab:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    35bb:	77 72 69 74 65 0a 00                                write..

000035c2 <__c.4657>:
    35c2:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    35d2:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    35e2:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000035f2 <__c.4655>:
    35f2:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3602:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    3612:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

00003621 <__c.4653>:
    3621:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3631:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    3641:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

00003651 <__c.4651>:
    3651:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3661:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    3671:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

00003680 <__c.4649>:
    3680:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3690:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    36a0:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

000036ae <__c.4647>:
    36ae:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    36be:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    36ce:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    36de:	79 0a 00                                            y..

000036e1 <__c.4633>:
    36e1:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000036ef <__c.4631>:
    36ef:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000036fd <__c.4626>:
    36fd:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000370b <__c.4609>:
    370b:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    371b:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    372b:	25 64 0a 00                                         %d..

0000372f <__c.4592>:
    372f:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    373f:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    374f:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    375f:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

00003768 <__c.4578>:
    3768:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3778:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    3788:	62 69 67 0a 00                                      big..

0000378d <__c.4576>:
    378d:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    379d:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    37ad:	63 74 65 72 73 0a 00                                cters..

000037b4 <__c.4569>:
    37b4:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    37c4:	73 0a 00                                            s..

000037c7 <__c.4567>:
    37c7:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    37d7:	73 0a 00                                            s..

000037da <__c.4565>:
    37da:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    37ea:	73 0a 00                                            s..

000037ed <__c.4563>:
    37ed:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

000037fe <__c.4561>:
    37fe:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

0000380b <__c.4559>:
    380b:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

00003817 <__c.4557>:
    3817:	0a 00                                               ..

00003819 <__c.4554>:
    3819:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    3829:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    3839:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

00003849 <__c.4552>:
    3849:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3859:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3869:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3879:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3889:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003895 <__c.4549>:
    3895:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    38a5:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    38b5:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    38c5:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

000038d5 <__c.4547>:
    38d5:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    38e5:	3a 5b 25 73 5d 0a 00                                :[%s]..

000038ec <__c.4537>:
    38ec:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    38fc:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    390c:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    391c:	64 0a 00                                            d..

0000391f <__c.4535>:
    391f:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    392f:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    393f:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    394f:	64 0a 00                                            d..

00003952 <__c.4533>:
    3952:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3962:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3972:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3982:	69 6c 65 64 0a 00                                   iled..

00003988 <__c.4531>:
    3988:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3998:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    39a8:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    39b8:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

000039c7 <__c.4518>:
    39c7:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    39d7:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    39e7:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    39f7:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    3a07:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

00003a18 <__c.4515>:
    3a18:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3a28:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3a38:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003a41 <__c.4513>:
    3a41:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3a51:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3a61:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3a71:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003a79 <__c.4501>:
    3a79:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3a89:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3a99:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3aa9:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3ab9:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003ac6 <__c.4476>:
    3ac6:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3ad6:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003ae6 <__c.4467>:
    3ae6:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3af6:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    3b06:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    3b16:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003b20 <__c.4448>:
    3b20:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

00003b2d <__c.4443>:
    3b2d:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003b3a <__c.4438>:
    3b3a:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003b47 <__c.4430>:
    3b47:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003b54 <__c.4428>:
    3b54:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3b64:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3b74:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3b84:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3b94:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3ba4:	25 6c 64 0a 00                                      %ld..

00003ba9 <__c.4412>:
    3ba9:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3bb9:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3bc9:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003bd5 <__c.4410>:
    3bd5:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3be5:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3bf5:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003c00 <__c.4408>:
    3c00:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3c10:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3c20:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3c30:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3c40:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003c4b <__c.4406>:
    3c4b:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3c5b:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3c6b:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3c7b:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3c8b:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003c96 <__c.4404>:
    3c96:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ca6:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3cb6:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003cc4 <__c.4402>:
    3cc4:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3cd4:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3ce4:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3cf4:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003d05 <__c.4400>:
    3d05:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d15:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3d25:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3d35:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3d45:	58 68 0a 00                                         Xh..

00003d49 <__c.4398>:
    3d49:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d59:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003d6a <__c.4392>:
    3d6a:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3d7a:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3d8a:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003d96 <__c.4390>:
    3d96:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3da6:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3db6:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003dc5 <__c.4388>:
    3dc5:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3dd5:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3de5:	25 6c 64 0a 00                                      %ld..

00003dea <__c.4386>:
    3dea:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3dfa:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3e0a:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3e1a:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003e23 <__c.4384>:
    3e23:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3e33:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3e43:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3e53:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003e5c <__c.4382>:
    3e5c:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3e6c:	58 48 20 3e 20 31 0a 00                             XH > 1..

00003e74 <__c.4380>:
    3e74:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3e84:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    3e94:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    3ea4:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00003ead <__c.4378>:
    3ead:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3ebd:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00003ecc <__c.4371>:
    3ecc:	0a 00                                               ..

00003ece <__c.4369>:
    3ece:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    3ede:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003ee8 <__c.4367>:
    3ee8:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    3ef8:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00003f04 <__c.4365>:
    3f04:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    3f14:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f21 <__c.4363>:
    3f21:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    3f31:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003f3e <__c.4361>:
    3f3e:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    3f4e:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f5b <__c.4359>:
    3f5b:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    3f6b:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00003f77 <__c.4357>:
    3f77:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    3f87:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003f93 <__c.4355>:
    3f93:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    3fa3:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003fad <__c.4353>:
    3fad:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    3fbd:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003fc7 <__c.4351>:
    3fc7:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    3fd7:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003fe3 <__c.4349>:
    3fe3:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    3ff3:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003fff <__c.4347>:
    3fff:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    400f:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000401c <__c.4345>:
    401c:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    402c:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004039 <__c.4343>:
    4039:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    4049:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004055 <__c.4341>:
    4055:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    4065:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000406f <__c.4339>:
    406f:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    407f:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000408c <__c.4337>:
    408c:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    409c:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000040a9 <__c.4335>:
    40a9:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    40b9:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000040c6 <__c.4333>:
    40c6:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    40d6:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000040e3 <__c.4331>:
    40e3:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    40f3:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00004100 <__c.4329>:
    4100:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    4110:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000411d <__c.4327>:
    411d:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    412d:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000413a <__c.4325>:
    413a:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    414a:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004157 <__c.4323>:
    4157:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    4167:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004171 <__c.4321>:
    4171:	0a 25 73 0a 00                                      .%s..

00004176 <__c.4198>:
    4176:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    4186:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    4196:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    41a6:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

000041b3 <__c.4189>:
    41b3:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    41c3:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    41d3:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    41e3:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

000041ef <__c.4180>:
    41ef:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    41ff:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

00004210 <__c.4173>:
    4210:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    4220:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

00004229 <__c.4167>:
    4229:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    4239:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    4249:	25 73 5d 0a 00                                      %s]..

0000424e <__c.4155>:
    424e:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    425e:	6f 69 6e 74 65 72 0a 00                             ointer..

00004266 <__c.4150>:
    4266:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    4276:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    4286:	20 6d 65 6d 6f 72 79 0a 00                           memory..

0000428f <__c.4144>:
    428f:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    429f:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

000042b0 <__c.4131>:
    42b0:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    42c0:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    42d0:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    42e0:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    42f0:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    4300:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    4310:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    4320:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    4330:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    4340:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    4350:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    4360:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    4370:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    4380:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    4390:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    43a0:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    43b0:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    43c0:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    43d0:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    43e0:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    43f0:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    4400:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    4410:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    4420:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    4430:	6d 65 0a 55 73 65 20 2d 64 20 61 66 74 65 72 20     me.Use -d after 
    4440:	66 69 72 73 74 20 6b 65 79 77 6f 72 64 20 27 6c     first keyword 'l
    4450:	69 66 27 20 61 62 6f 76 65 20 66 6f 72 20 4c 49     if' above for LI
    4460:	46 20 66 69 6c 65 73 79 73 74 65 6d 20 64 65 62     F filesystem deb
    4470:	75 67 67 69 6e 67 0a 0a 00                          ugging...

00004479 <__c.4129>:
    4479:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

00004483 <__c.4600>:
    4483:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    4493:	53 4b 0a 00                                         SK..

00004497 <__c.4598>:
    4497:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    44a7:	30 34 78 48 0a 00                                   04xH..

000044ad <__c.4596>:
    44ad:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    44bd:	64 6f 6e 65 0a 00                                   done..

000044c3 <__c.4594>:
    44c3:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    44d3:	6f 6e 65 0a 00                                      one..

000044d8 <__c.4592>:
    44d8:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    44e8:	61 6c 69 7a 65 64 0a 00                             alized..

000044f0 <__c.4590>:
    44f0:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    4500:	0a 00                                               ..

00004502 <__c.4588>:
    4502:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    4512:	7a 65 64 0a 00                                      zed..

00004517 <__c.4586>:
    4517:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    4527:	69 7a 65 64 0a 00                                   ized..

0000452d <__c.4584>:
    452d:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

0000453e <__c.4582>:
    453e:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    454e:	20 73 74 61 72 74 0a 00                              start..

00004556 <__c.4580>:
    4556:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4566:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004570 <__c.4578>:
    4570:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4580:	7a 61 74 69 6f 6e 20 44 6f 6e 65 0a 00              zation Done..

0000458d <__c.4576>:
    458d:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    459d:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

000045ab <__c.4574>:
    45ab:	53 59 53 54 45 4d 5f 54 41 53 4b 5f 43 4f 55 4e     SYSTEM_TASK_COUN
    45bb:	54 45 52 5f 52 45 53 3a 25 6c 64 0a 00              TER_RES:%ld..

000045c8 <__c.4572>:
    45c8:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

000045d7 <__c.4570>:
    45d7:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     initializing RTC
    45e7:	0a 00                                               ..

000045e9 <__c.4568>:
    45e9:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     initializing I2C
    45f9:	20 62 75 73 0a 00                                    bus..

000045ff <__c.4566>:
    45ff:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     initializing SPI
    460f:	20 62 75 73 0a 00                                    bus..

00004615 <__c.4564>:
    4615:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4625:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

0000462f <__c.4562>:
    462f:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    463f:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004649 <__c.4560>:
    4649:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4659:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4669:	35 64 69 73 6b 0a 00                                5disk..

00004670 <__c.4558>:
    4670:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004680 <__c.4556>:
    4680:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    4690:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

0000469d <__c.4554>:
    469d:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    46ad:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

000046bc <__c.4552>:
    46bc:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    46cc:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    46dc:	3a 20 25 6c 64 0a 00                                : %ld..

000046e3 <__c.4550>:
    46e3:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

000046f4 <__c.4548>:
    46f4:	53 74 61 72 74 0a 00                                Start..

000046fb <__c.4540>:
    46fb:	45 72 72 6f 72 3a 5b 25 73 5d 0a 00                 Error:[%s]..

00004707 <__c.4538>:
    4707:	4f 4b 0a 00                                         OK..

0000470b <__c.4536>:
    470b:	0a 3e 00                                            .>.

0000470e <__c.4525>:
    470e:	64 65 6c 61 79 5f 74 65 73 74 73 0a 68 65 6c 70     delay_tests.help
    471e:	0a 6d 65 6d 0a 73 65 74 64 61 74 65 0a 74 69 6d     .mem.setdate.tim
    472e:	65 0a 72 65 73 65 74 0a 0a 00                       e.reset...

00004738 <__c.4519>:
    4738:	4d 79 20 64 65 6c 61 79 73 0a 00                    My delays..

00004743 <__c.4517>:
    4743:	53 79 73 74 65 6d 20 64 65 6c 61 79 73 0a 00        System delays..

00004752 <__c.4513>:
    4752:	0a 00                                               ..

00004754 <__c.4511>:
    4754:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4764:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

0000476e <__c.4509>:
    476e:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    477e:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004788 <__c.4507>:
    4788:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4798:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    47a8:	35 64 69 73 6b 0a 00                                5disk..

000047af <__c.4505>:
    47af:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

000047bf <__c.4503>:
    47bf:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    47cf:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

000047dc <__c.4501>:
    47dc:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    47ec:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

000047fb <__c.4499>:
    47fb:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    480b:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    481b:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..
	...

0000482c <__ctors_end>:
    482c:	11 24       	eor	r1, r1
    482e:	1f be       	out	0x3f, r1	; 63
    4830:	cf ef       	ldi	r28, 0xFF	; 255
    4832:	d0 e4       	ldi	r29, 0x40	; 64
    4834:	de bf       	out	0x3e, r29	; 62
    4836:	cd bf       	out	0x3d, r28	; 61

00004838 <__do_copy_data>:
    4838:	17 e1       	ldi	r17, 0x17	; 23
    483a:	a0 e0       	ldi	r26, 0x00	; 0
    483c:	b1 e0       	ldi	r27, 0x01	; 1
    483e:	e0 e9       	ldi	r30, 0x90	; 144
    4840:	f3 ed       	ldi	r31, 0xD3	; 211
    4842:	01 e0       	ldi	r16, 0x01	; 1
    4844:	0b bf       	out	0x3b, r16	; 59
    4846:	02 c0       	rjmp	.+4      	; 0x484c <__do_copy_data+0x14>
    4848:	07 90       	elpm	r0, Z+
    484a:	0d 92       	st	X+, r0
    484c:	a0 31       	cpi	r26, 0x10	; 16
    484e:	b1 07       	cpc	r27, r17
    4850:	d9 f7       	brne	.-10     	; 0x4848 <__do_copy_data+0x10>

00004852 <__do_clear_bss>:
    4852:	21 e2       	ldi	r18, 0x21	; 33
    4854:	a0 e1       	ldi	r26, 0x10	; 16
    4856:	b7 e1       	ldi	r27, 0x17	; 23
    4858:	01 c0       	rjmp	.+2      	; 0x485c <.do_clear_bss_start>

0000485a <.do_clear_bss_loop>:
    485a:	1d 92       	st	X+, r1

0000485c <.do_clear_bss_start>:
    485c:	a8 34       	cpi	r26, 0x48	; 72
    485e:	b2 07       	cpc	r27, r18
    4860:	e1 f7       	brne	.-8      	; 0x485a <.do_clear_bss_loop>
    4862:	0e 94 e9 e1 	call	0x1c3d2	; 0x1c3d2 <main>
    4866:	0c 94 c6 e9 	jmp	0x1d38c	; 0x1d38c <_exit>

0000486a <__bad_interrupt>:
    486a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000486e <vfprintf>:
    486e:	2f 92       	push	r2
    4870:	3f 92       	push	r3
    4872:	4f 92       	push	r4
    4874:	5f 92       	push	r5
    4876:	6f 92       	push	r6
    4878:	7f 92       	push	r7
    487a:	8f 92       	push	r8
    487c:	9f 92       	push	r9
    487e:	af 92       	push	r10
    4880:	bf 92       	push	r11
    4882:	cf 92       	push	r12
    4884:	df 92       	push	r13
    4886:	ef 92       	push	r14
    4888:	ff 92       	push	r15
    488a:	0f 93       	push	r16
    488c:	1f 93       	push	r17
    488e:	cf 93       	push	r28
    4890:	df 93       	push	r29
    4892:	cd b7       	in	r28, 0x3d	; 61
    4894:	de b7       	in	r29, 0x3e	; 62
    4896:	60 97       	sbiw	r28, 0x10	; 16
    4898:	0f b6       	in	r0, 0x3f	; 63
    489a:	f8 94       	cli
    489c:	de bf       	out	0x3e, r29	; 62
    489e:	0f be       	out	0x3f, r0	; 63
    48a0:	cd bf       	out	0x3d, r28	; 61
    48a2:	7c 01       	movw	r14, r24
    48a4:	1b 01       	movw	r2, r22
    48a6:	6a 01       	movw	r12, r20
    48a8:	fc 01       	movw	r30, r24
    48aa:	17 82       	std	Z+7, r1	; 0x07
    48ac:	16 82       	std	Z+6, r1	; 0x06
    48ae:	83 81       	ldd	r24, Z+3	; 0x03
    48b0:	81 ff       	sbrs	r24, 1
    48b2:	44 c3       	rjmp	.+1672   	; 0x4f3c <vfprintf+0x6ce>
    48b4:	9e 01       	movw	r18, r28
    48b6:	2f 5f       	subi	r18, 0xFF	; 255
    48b8:	3f 4f       	sbci	r19, 0xFF	; 255
    48ba:	39 01       	movw	r6, r18
    48bc:	f7 01       	movw	r30, r14
    48be:	93 81       	ldd	r25, Z+3	; 0x03
    48c0:	f1 01       	movw	r30, r2
    48c2:	93 fd       	sbrc	r25, 3
    48c4:	85 91       	lpm	r24, Z+
    48c6:	93 ff       	sbrs	r25, 3
    48c8:	81 91       	ld	r24, Z+
    48ca:	1f 01       	movw	r2, r30
    48cc:	88 23       	and	r24, r24
    48ce:	09 f4       	brne	.+2      	; 0x48d2 <vfprintf+0x64>
    48d0:	31 c3       	rjmp	.+1634   	; 0x4f34 <vfprintf+0x6c6>
    48d2:	85 32       	cpi	r24, 0x25	; 37
    48d4:	39 f4       	brne	.+14     	; 0x48e4 <vfprintf+0x76>
    48d6:	93 fd       	sbrc	r25, 3
    48d8:	85 91       	lpm	r24, Z+
    48da:	93 ff       	sbrs	r25, 3
    48dc:	81 91       	ld	r24, Z+
    48de:	1f 01       	movw	r2, r30
    48e0:	85 32       	cpi	r24, 0x25	; 37
    48e2:	39 f4       	brne	.+14     	; 0x48f2 <vfprintf+0x84>
    48e4:	b7 01       	movw	r22, r14
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	0e 94 df 76 	call	0xedbe	; 0xedbe <fputc>
    48ec:	56 01       	movw	r10, r12
    48ee:	65 01       	movw	r12, r10
    48f0:	e5 cf       	rjmp	.-54     	; 0x48bc <vfprintf+0x4e>
    48f2:	10 e0       	ldi	r17, 0x00	; 0
    48f4:	51 2c       	mov	r5, r1
    48f6:	91 2c       	mov	r9, r1
    48f8:	ff e1       	ldi	r31, 0x1F	; 31
    48fa:	f9 15       	cp	r31, r9
    48fc:	d8 f0       	brcs	.+54     	; 0x4934 <vfprintf+0xc6>
    48fe:	8b 32       	cpi	r24, 0x2B	; 43
    4900:	79 f0       	breq	.+30     	; 0x4920 <vfprintf+0xb2>
    4902:	38 f4       	brcc	.+14     	; 0x4912 <vfprintf+0xa4>
    4904:	80 32       	cpi	r24, 0x20	; 32
    4906:	79 f0       	breq	.+30     	; 0x4926 <vfprintf+0xb8>
    4908:	83 32       	cpi	r24, 0x23	; 35
    490a:	a1 f4       	brne	.+40     	; 0x4934 <vfprintf+0xc6>
    490c:	f9 2d       	mov	r31, r9
    490e:	f0 61       	ori	r31, 0x10	; 16
    4910:	2e c0       	rjmp	.+92     	; 0x496e <vfprintf+0x100>
    4912:	8d 32       	cpi	r24, 0x2D	; 45
    4914:	61 f0       	breq	.+24     	; 0x492e <vfprintf+0xc0>
    4916:	80 33       	cpi	r24, 0x30	; 48
    4918:	69 f4       	brne	.+26     	; 0x4934 <vfprintf+0xc6>
    491a:	29 2d       	mov	r18, r9
    491c:	21 60       	ori	r18, 0x01	; 1
    491e:	2d c0       	rjmp	.+90     	; 0x497a <vfprintf+0x10c>
    4920:	39 2d       	mov	r19, r9
    4922:	32 60       	ori	r19, 0x02	; 2
    4924:	93 2e       	mov	r9, r19
    4926:	89 2d       	mov	r24, r9
    4928:	84 60       	ori	r24, 0x04	; 4
    492a:	98 2e       	mov	r9, r24
    492c:	2a c0       	rjmp	.+84     	; 0x4982 <vfprintf+0x114>
    492e:	e9 2d       	mov	r30, r9
    4930:	e8 60       	ori	r30, 0x08	; 8
    4932:	15 c0       	rjmp	.+42     	; 0x495e <vfprintf+0xf0>
    4934:	97 fc       	sbrc	r9, 7
    4936:	2d c0       	rjmp	.+90     	; 0x4992 <vfprintf+0x124>
    4938:	20 ed       	ldi	r18, 0xD0	; 208
    493a:	28 0f       	add	r18, r24
    493c:	2a 30       	cpi	r18, 0x0A	; 10
    493e:	88 f4       	brcc	.+34     	; 0x4962 <vfprintf+0xf4>
    4940:	96 fe       	sbrs	r9, 6
    4942:	06 c0       	rjmp	.+12     	; 0x4950 <vfprintf+0xe2>
    4944:	3a e0       	ldi	r19, 0x0A	; 10
    4946:	13 9f       	mul	r17, r19
    4948:	20 0d       	add	r18, r0
    494a:	11 24       	eor	r1, r1
    494c:	12 2f       	mov	r17, r18
    494e:	19 c0       	rjmp	.+50     	; 0x4982 <vfprintf+0x114>
    4950:	8a e0       	ldi	r24, 0x0A	; 10
    4952:	58 9e       	mul	r5, r24
    4954:	20 0d       	add	r18, r0
    4956:	11 24       	eor	r1, r1
    4958:	52 2e       	mov	r5, r18
    495a:	e9 2d       	mov	r30, r9
    495c:	e0 62       	ori	r30, 0x20	; 32
    495e:	9e 2e       	mov	r9, r30
    4960:	10 c0       	rjmp	.+32     	; 0x4982 <vfprintf+0x114>
    4962:	8e 32       	cpi	r24, 0x2E	; 46
    4964:	31 f4       	brne	.+12     	; 0x4972 <vfprintf+0x104>
    4966:	96 fc       	sbrc	r9, 6
    4968:	e5 c2       	rjmp	.+1482   	; 0x4f34 <vfprintf+0x6c6>
    496a:	f9 2d       	mov	r31, r9
    496c:	f0 64       	ori	r31, 0x40	; 64
    496e:	9f 2e       	mov	r9, r31
    4970:	08 c0       	rjmp	.+16     	; 0x4982 <vfprintf+0x114>
    4972:	8c 36       	cpi	r24, 0x6C	; 108
    4974:	21 f4       	brne	.+8      	; 0x497e <vfprintf+0x110>
    4976:	29 2d       	mov	r18, r9
    4978:	20 68       	ori	r18, 0x80	; 128
    497a:	92 2e       	mov	r9, r18
    497c:	02 c0       	rjmp	.+4      	; 0x4982 <vfprintf+0x114>
    497e:	88 36       	cpi	r24, 0x68	; 104
    4980:	41 f4       	brne	.+16     	; 0x4992 <vfprintf+0x124>
    4982:	f1 01       	movw	r30, r2
    4984:	93 fd       	sbrc	r25, 3
    4986:	85 91       	lpm	r24, Z+
    4988:	93 ff       	sbrs	r25, 3
    498a:	81 91       	ld	r24, Z+
    498c:	1f 01       	movw	r2, r30
    498e:	81 11       	cpse	r24, r1
    4990:	b3 cf       	rjmp	.-154    	; 0x48f8 <vfprintf+0x8a>
    4992:	9b eb       	ldi	r25, 0xBB	; 187
    4994:	98 0f       	add	r25, r24
    4996:	93 30       	cpi	r25, 0x03	; 3
    4998:	20 f4       	brcc	.+8      	; 0x49a2 <vfprintf+0x134>
    499a:	99 2d       	mov	r25, r9
    499c:	90 61       	ori	r25, 0x10	; 16
    499e:	80 5e       	subi	r24, 0xE0	; 224
    49a0:	07 c0       	rjmp	.+14     	; 0x49b0 <vfprintf+0x142>
    49a2:	9b e9       	ldi	r25, 0x9B	; 155
    49a4:	98 0f       	add	r25, r24
    49a6:	93 30       	cpi	r25, 0x03	; 3
    49a8:	08 f0       	brcs	.+2      	; 0x49ac <vfprintf+0x13e>
    49aa:	66 c1       	rjmp	.+716    	; 0x4c78 <vfprintf+0x40a>
    49ac:	99 2d       	mov	r25, r9
    49ae:	9f 7e       	andi	r25, 0xEF	; 239
    49b0:	96 ff       	sbrs	r25, 6
    49b2:	16 e0       	ldi	r17, 0x06	; 6
    49b4:	9f 73       	andi	r25, 0x3F	; 63
    49b6:	99 2e       	mov	r9, r25
    49b8:	85 36       	cpi	r24, 0x65	; 101
    49ba:	19 f4       	brne	.+6      	; 0x49c2 <vfprintf+0x154>
    49bc:	90 64       	ori	r25, 0x40	; 64
    49be:	99 2e       	mov	r9, r25
    49c0:	08 c0       	rjmp	.+16     	; 0x49d2 <vfprintf+0x164>
    49c2:	86 36       	cpi	r24, 0x66	; 102
    49c4:	21 f4       	brne	.+8      	; 0x49ce <vfprintf+0x160>
    49c6:	39 2f       	mov	r19, r25
    49c8:	30 68       	ori	r19, 0x80	; 128
    49ca:	93 2e       	mov	r9, r19
    49cc:	02 c0       	rjmp	.+4      	; 0x49d2 <vfprintf+0x164>
    49ce:	11 11       	cpse	r17, r1
    49d0:	11 50       	subi	r17, 0x01	; 1
    49d2:	97 fe       	sbrs	r9, 7
    49d4:	07 c0       	rjmp	.+14     	; 0x49e4 <vfprintf+0x176>
    49d6:	1c 33       	cpi	r17, 0x3C	; 60
    49d8:	50 f4       	brcc	.+20     	; 0x49ee <vfprintf+0x180>
    49da:	44 24       	eor	r4, r4
    49dc:	43 94       	inc	r4
    49de:	41 0e       	add	r4, r17
    49e0:	27 e0       	ldi	r18, 0x07	; 7
    49e2:	0b c0       	rjmp	.+22     	; 0x49fa <vfprintf+0x18c>
    49e4:	18 30       	cpi	r17, 0x08	; 8
    49e6:	38 f0       	brcs	.+14     	; 0x49f6 <vfprintf+0x188>
    49e8:	27 e0       	ldi	r18, 0x07	; 7
    49ea:	17 e0       	ldi	r17, 0x07	; 7
    49ec:	05 c0       	rjmp	.+10     	; 0x49f8 <vfprintf+0x18a>
    49ee:	27 e0       	ldi	r18, 0x07	; 7
    49f0:	9c e3       	ldi	r25, 0x3C	; 60
    49f2:	49 2e       	mov	r4, r25
    49f4:	02 c0       	rjmp	.+4      	; 0x49fa <vfprintf+0x18c>
    49f6:	21 2f       	mov	r18, r17
    49f8:	41 2c       	mov	r4, r1
    49fa:	56 01       	movw	r10, r12
    49fc:	84 e0       	ldi	r24, 0x04	; 4
    49fe:	a8 0e       	add	r10, r24
    4a00:	b1 1c       	adc	r11, r1
    4a02:	f6 01       	movw	r30, r12
    4a04:	60 81       	ld	r22, Z
    4a06:	71 81       	ldd	r23, Z+1	; 0x01
    4a08:	82 81       	ldd	r24, Z+2	; 0x02
    4a0a:	93 81       	ldd	r25, Z+3	; 0x03
    4a0c:	04 2d       	mov	r16, r4
    4a0e:	a3 01       	movw	r20, r6
    4a10:	0e 94 73 e8 	call	0x1d0e6	; 0x1d0e6 <__ftoa_engine>
    4a14:	6c 01       	movw	r12, r24
    4a16:	f9 81       	ldd	r31, Y+1	; 0x01
    4a18:	fc 87       	std	Y+12, r31	; 0x0c
    4a1a:	f0 ff       	sbrs	r31, 0
    4a1c:	02 c0       	rjmp	.+4      	; 0x4a22 <vfprintf+0x1b4>
    4a1e:	f3 ff       	sbrs	r31, 3
    4a20:	06 c0       	rjmp	.+12     	; 0x4a2e <vfprintf+0x1c0>
    4a22:	91 fc       	sbrc	r9, 1
    4a24:	06 c0       	rjmp	.+12     	; 0x4a32 <vfprintf+0x1c4>
    4a26:	92 fe       	sbrs	r9, 2
    4a28:	06 c0       	rjmp	.+12     	; 0x4a36 <vfprintf+0x1c8>
    4a2a:	00 e2       	ldi	r16, 0x20	; 32
    4a2c:	05 c0       	rjmp	.+10     	; 0x4a38 <vfprintf+0x1ca>
    4a2e:	0d e2       	ldi	r16, 0x2D	; 45
    4a30:	03 c0       	rjmp	.+6      	; 0x4a38 <vfprintf+0x1ca>
    4a32:	0b e2       	ldi	r16, 0x2B	; 43
    4a34:	01 c0       	rjmp	.+2      	; 0x4a38 <vfprintf+0x1ca>
    4a36:	00 e0       	ldi	r16, 0x00	; 0
    4a38:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a3a:	8c 70       	andi	r24, 0x0C	; 12
    4a3c:	19 f0       	breq	.+6      	; 0x4a44 <vfprintf+0x1d6>
    4a3e:	01 11       	cpse	r16, r1
    4a40:	5a c2       	rjmp	.+1204   	; 0x4ef6 <vfprintf+0x688>
    4a42:	9b c2       	rjmp	.+1334   	; 0x4f7a <vfprintf+0x70c>
    4a44:	97 fe       	sbrs	r9, 7
    4a46:	10 c0       	rjmp	.+32     	; 0x4a68 <vfprintf+0x1fa>
    4a48:	4c 0c       	add	r4, r12
    4a4a:	fc 85       	ldd	r31, Y+12	; 0x0c
    4a4c:	f4 ff       	sbrs	r31, 4
    4a4e:	04 c0       	rjmp	.+8      	; 0x4a58 <vfprintf+0x1ea>
    4a50:	8a 81       	ldd	r24, Y+2	; 0x02
    4a52:	81 33       	cpi	r24, 0x31	; 49
    4a54:	09 f4       	brne	.+2      	; 0x4a58 <vfprintf+0x1ea>
    4a56:	4a 94       	dec	r4
    4a58:	14 14       	cp	r1, r4
    4a5a:	74 f5       	brge	.+92     	; 0x4ab8 <vfprintf+0x24a>
    4a5c:	28 e0       	ldi	r18, 0x08	; 8
    4a5e:	24 15       	cp	r18, r4
    4a60:	78 f5       	brcc	.+94     	; 0x4ac0 <vfprintf+0x252>
    4a62:	88 e0       	ldi	r24, 0x08	; 8
    4a64:	48 2e       	mov	r4, r24
    4a66:	2c c0       	rjmp	.+88     	; 0x4ac0 <vfprintf+0x252>
    4a68:	96 fc       	sbrc	r9, 6
    4a6a:	2a c0       	rjmp	.+84     	; 0x4ac0 <vfprintf+0x252>
    4a6c:	81 2f       	mov	r24, r17
    4a6e:	90 e0       	ldi	r25, 0x00	; 0
    4a70:	8c 15       	cp	r24, r12
    4a72:	9d 05       	cpc	r25, r13
    4a74:	9c f0       	brlt	.+38     	; 0x4a9c <vfprintf+0x22e>
    4a76:	3c ef       	ldi	r19, 0xFC	; 252
    4a78:	c3 16       	cp	r12, r19
    4a7a:	3f ef       	ldi	r19, 0xFF	; 255
    4a7c:	d3 06       	cpc	r13, r19
    4a7e:	74 f0       	brlt	.+28     	; 0x4a9c <vfprintf+0x22e>
    4a80:	89 2d       	mov	r24, r9
    4a82:	80 68       	ori	r24, 0x80	; 128
    4a84:	98 2e       	mov	r9, r24
    4a86:	0a c0       	rjmp	.+20     	; 0x4a9c <vfprintf+0x22e>
    4a88:	e2 e0       	ldi	r30, 0x02	; 2
    4a8a:	f0 e0       	ldi	r31, 0x00	; 0
    4a8c:	ec 0f       	add	r30, r28
    4a8e:	fd 1f       	adc	r31, r29
    4a90:	e1 0f       	add	r30, r17
    4a92:	f1 1d       	adc	r31, r1
    4a94:	80 81       	ld	r24, Z
    4a96:	80 33       	cpi	r24, 0x30	; 48
    4a98:	19 f4       	brne	.+6      	; 0x4aa0 <vfprintf+0x232>
    4a9a:	11 50       	subi	r17, 0x01	; 1
    4a9c:	11 11       	cpse	r17, r1
    4a9e:	f4 cf       	rjmp	.-24     	; 0x4a88 <vfprintf+0x21a>
    4aa0:	97 fe       	sbrs	r9, 7
    4aa2:	0e c0       	rjmp	.+28     	; 0x4ac0 <vfprintf+0x252>
    4aa4:	44 24       	eor	r4, r4
    4aa6:	43 94       	inc	r4
    4aa8:	41 0e       	add	r4, r17
    4aaa:	81 2f       	mov	r24, r17
    4aac:	90 e0       	ldi	r25, 0x00	; 0
    4aae:	c8 16       	cp	r12, r24
    4ab0:	d9 06       	cpc	r13, r25
    4ab2:	2c f4       	brge	.+10     	; 0x4abe <vfprintf+0x250>
    4ab4:	1c 19       	sub	r17, r12
    4ab6:	04 c0       	rjmp	.+8      	; 0x4ac0 <vfprintf+0x252>
    4ab8:	44 24       	eor	r4, r4
    4aba:	43 94       	inc	r4
    4abc:	01 c0       	rjmp	.+2      	; 0x4ac0 <vfprintf+0x252>
    4abe:	10 e0       	ldi	r17, 0x00	; 0
    4ac0:	97 fe       	sbrs	r9, 7
    4ac2:	06 c0       	rjmp	.+12     	; 0x4ad0 <vfprintf+0x262>
    4ac4:	1c 14       	cp	r1, r12
    4ac6:	1d 04       	cpc	r1, r13
    4ac8:	34 f4       	brge	.+12     	; 0x4ad6 <vfprintf+0x268>
    4aca:	c6 01       	movw	r24, r12
    4acc:	01 96       	adiw	r24, 0x01	; 1
    4ace:	05 c0       	rjmp	.+10     	; 0x4ada <vfprintf+0x26c>
    4ad0:	85 e0       	ldi	r24, 0x05	; 5
    4ad2:	90 e0       	ldi	r25, 0x00	; 0
    4ad4:	02 c0       	rjmp	.+4      	; 0x4ada <vfprintf+0x26c>
    4ad6:	81 e0       	ldi	r24, 0x01	; 1
    4ad8:	90 e0       	ldi	r25, 0x00	; 0
    4ada:	01 11       	cpse	r16, r1
    4adc:	01 96       	adiw	r24, 0x01	; 1
    4ade:	11 23       	and	r17, r17
    4ae0:	31 f0       	breq	.+12     	; 0x4aee <vfprintf+0x280>
    4ae2:	21 2f       	mov	r18, r17
    4ae4:	30 e0       	ldi	r19, 0x00	; 0
    4ae6:	2f 5f       	subi	r18, 0xFF	; 255
    4ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    4aea:	82 0f       	add	r24, r18
    4aec:	93 1f       	adc	r25, r19
    4aee:	25 2d       	mov	r18, r5
    4af0:	30 e0       	ldi	r19, 0x00	; 0
    4af2:	82 17       	cp	r24, r18
    4af4:	93 07       	cpc	r25, r19
    4af6:	14 f4       	brge	.+4      	; 0x4afc <vfprintf+0x28e>
    4af8:	58 1a       	sub	r5, r24
    4afa:	01 c0       	rjmp	.+2      	; 0x4afe <vfprintf+0x290>
    4afc:	51 2c       	mov	r5, r1
    4afe:	89 2d       	mov	r24, r9
    4b00:	89 70       	andi	r24, 0x09	; 9
    4b02:	49 f4       	brne	.+18     	; 0x4b16 <vfprintf+0x2a8>
    4b04:	55 20       	and	r5, r5
    4b06:	39 f0       	breq	.+14     	; 0x4b16 <vfprintf+0x2a8>
    4b08:	b7 01       	movw	r22, r14
    4b0a:	80 e2       	ldi	r24, 0x20	; 32
    4b0c:	90 e0       	ldi	r25, 0x00	; 0
    4b0e:	0e 94 df 76 	call	0xedbe	; 0xedbe <fputc>
    4b12:	5a 94       	dec	r5
    4b14:	f7 cf       	rjmp	.-18     	; 0x4b04 <vfprintf+0x296>
    4b16:	00 23       	and	r16, r16
    4b18:	29 f0       	breq	.+10     	; 0x4b24 <vfprintf+0x2b6>
    4b1a:	b7 01       	movw	r22, r14
    4b1c:	80 2f       	mov	r24, r16
    4b1e:	90 e0       	ldi	r25, 0x00	; 0
    4b20:	0e 94 df 76 	call	0xedbe	; 0xedbe <fputc>
    4b24:	93 fc       	sbrc	r9, 3
    4b26:	09 c0       	rjmp	.+18     	; 0x4b3a <vfprintf+0x2cc>
    4b28:	55 20       	and	r5, r5
    4b2a:	39 f0       	breq	.+14     	; 0x4b3a <vfprintf+0x2cc>
    4b2c:	b7 01       	movw	r22, r14
    4b2e:	80 e3       	ldi	r24, 0x30	; 48
    4b30:	90 e0       	ldi	r25, 0x00	; 0
    4b32:	0e 94 df 76 	call	0xedbe	; 0xedbe <fputc>
    4b36:	5a 94       	dec	r5
    4b38:	f7 cf       	rjmp	.-18     	; 0x4b28 <vfprintf+0x2ba>
    4b3a:	97 fe       	sbrs	r9, 7
    4b3c:	4c c0       	rjmp	.+152    	; 0x4bd6 <vfprintf+0x368>
    4b3e:	46 01       	movw	r8, r12
    4b40:	d7 fe       	sbrs	r13, 7
    4b42:	02 c0       	rjmp	.+4      	; 0x4b48 <vfprintf+0x2da>
    4b44:	81 2c       	mov	r8, r1
    4b46:	91 2c       	mov	r9, r1
    4b48:	c6 01       	movw	r24, r12
    4b4a:	88 19       	sub	r24, r8
    4b4c:	99 09       	sbc	r25, r9
    4b4e:	f3 01       	movw	r30, r6
    4b50:	e8 0f       	add	r30, r24
    4b52:	f9 1f       	adc	r31, r25
    4b54:	fe 87       	std	Y+14, r31	; 0x0e
    4b56:	ed 87       	std	Y+13, r30	; 0x0d
    4b58:	96 01       	movw	r18, r12
    4b5a:	24 19       	sub	r18, r4
    4b5c:	31 09       	sbc	r19, r1
    4b5e:	38 8b       	std	Y+16, r19	; 0x10
    4b60:	2f 87       	std	Y+15, r18	; 0x0f
    4b62:	01 2f       	mov	r16, r17
    4b64:	10 e0       	ldi	r17, 0x00	; 0
    4b66:	11 95       	neg	r17
    4b68:	01 95       	neg	r16
    4b6a:	11 09       	sbc	r17, r1
    4b6c:	3f ef       	ldi	r19, 0xFF	; 255
    4b6e:	83 16       	cp	r8, r19
    4b70:	93 06       	cpc	r9, r19
    4b72:	29 f4       	brne	.+10     	; 0x4b7e <vfprintf+0x310>
    4b74:	b7 01       	movw	r22, r14
    4b76:	8e e2       	ldi	r24, 0x2E	; 46
    4b78:	90 e0       	ldi	r25, 0x00	; 0
    4b7a:	0e 94 df 76 	call	0xedbe	; 0xedbe <fputc>
    4b7e:	c8 14       	cp	r12, r8
    4b80:	d9 04       	cpc	r13, r9
    4b82:	4c f0       	brlt	.+18     	; 0x4b96 <vfprintf+0x328>
    4b84:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b86:	98 89       	ldd	r25, Y+16	; 0x10
    4b88:	88 15       	cp	r24, r8
    4b8a:	99 05       	cpc	r25, r9
    4b8c:	24 f4       	brge	.+8      	; 0x4b96 <vfprintf+0x328>
    4b8e:	ed 85       	ldd	r30, Y+13	; 0x0d
    4b90:	fe 85       	ldd	r31, Y+14	; 0x0e
    4b92:	81 81       	ldd	r24, Z+1	; 0x01
    4b94:	01 c0       	rjmp	.+2      	; 0x4b98 <vfprintf+0x32a>
    4b96:	80 e3       	ldi	r24, 0x30	; 48
    4b98:	f1 e0       	ldi	r31, 0x01	; 1
    4b9a:	8f 1a       	sub	r8, r31
    4b9c:	91 08       	sbc	r9, r1
    4b9e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4ba0:	3e 85       	ldd	r19, Y+14	; 0x0e
    4ba2:	2f 5f       	subi	r18, 0xFF	; 255
    4ba4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ba6:	3e 87       	std	Y+14, r19	; 0x0e
    4ba8:	2d 87       	std	Y+13, r18	; 0x0d
    4baa:	80 16       	cp	r8, r16
    4bac:	91 06       	cpc	r9, r17
    4bae:	2c f0       	brlt	.+10     	; 0x4bba <vfprintf+0x34c>
    4bb0:	b7 01       	movw	r22, r14
    4bb2:	90 e0       	ldi	r25, 0x00	; 0
    4bb4:	0e 94 df 76 	call	0xedbe	; 0xedbe <fputc>
    4bb8:	d9 cf       	rjmp	.-78     	; 0x4b6c <vfprintf+0x2fe>
    4bba:	c8 14       	cp	r12, r8
    4bbc:	d9 04       	cpc	r13, r9
    4bbe:	41 f4       	brne	.+16     	; 0x4bd0 <vfprintf+0x362>
    4bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    4bc2:	96 33       	cpi	r25, 0x36	; 54
    4bc4:	20 f4       	brcc	.+8      	; 0x4bce <vfprintf+0x360>
    4bc6:	95 33       	cpi	r25, 0x35	; 53
    4bc8:	19 f4       	brne	.+6      	; 0x4bd0 <vfprintf+0x362>
    4bca:	3c 85       	ldd	r19, Y+12	; 0x0c
    4bcc:	34 ff       	sbrs	r19, 4
    4bce:	81 e3       	ldi	r24, 0x31	; 49
    4bd0:	b7 01       	movw	r22, r14
    4bd2:	90 e0       	ldi	r25, 0x00	; 0
    4bd4:	4e c0       	rjmp	.+156    	; 0x4c72 <vfprintf+0x404>
    4bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    4bd8:	81 33       	cpi	r24, 0x31	; 49
    4bda:	19 f0       	breq	.+6      	; 0x4be2 <vfprintf+0x374>
    4bdc:	9c 85       	ldd	r25, Y+12	; 0x0c
    4bde:	9f 7e       	andi	r25, 0xEF	; 239
    4be0:	9c 87       	std	Y+12, r25	; 0x0c
    4be2:	b7 01       	movw	r22, r14
    4be4:	90 e0       	ldi	r25, 0x00	; 0
    4be6:	0e 94 df 76 	call	0xedbe	; 0xedbe <fputc>
    4bea:	11 11       	cpse	r17, r1
    4bec:	05 c0       	rjmp	.+10     	; 0x4bf8 <vfprintf+0x38a>
    4bee:	94 fc       	sbrc	r9, 4
    4bf0:	18 c0       	rjmp	.+48     	; 0x4c22 <vfprintf+0x3b4>
    4bf2:	85 e6       	ldi	r24, 0x65	; 101
    4bf4:	90 e0       	ldi	r25, 0x00	; 0
    4bf6:	17 c0       	rjmp	.+46     	; 0x4c26 <vfprintf+0x3b8>
    4bf8:	b7 01       	movw	r22, r14
    4bfa:	8e e2       	ldi	r24, 0x2E	; 46
    4bfc:	90 e0       	ldi	r25, 0x00	; 0
    4bfe:	0e 94 df 76 	call	0xedbe	; 0xedbe <fputc>
    4c02:	1e 5f       	subi	r17, 0xFE	; 254
    4c04:	82 e0       	ldi	r24, 0x02	; 2
    4c06:	01 e0       	ldi	r16, 0x01	; 1
    4c08:	08 0f       	add	r16, r24
    4c0a:	f3 01       	movw	r30, r6
    4c0c:	e8 0f       	add	r30, r24
    4c0e:	f1 1d       	adc	r31, r1
    4c10:	80 81       	ld	r24, Z
    4c12:	b7 01       	movw	r22, r14
    4c14:	90 e0       	ldi	r25, 0x00	; 0
    4c16:	0e 94 df 76 	call	0xedbe	; 0xedbe <fputc>
    4c1a:	80 2f       	mov	r24, r16
    4c1c:	01 13       	cpse	r16, r17
    4c1e:	f3 cf       	rjmp	.-26     	; 0x4c06 <vfprintf+0x398>
    4c20:	e6 cf       	rjmp	.-52     	; 0x4bee <vfprintf+0x380>
    4c22:	85 e4       	ldi	r24, 0x45	; 69
    4c24:	90 e0       	ldi	r25, 0x00	; 0
    4c26:	b7 01       	movw	r22, r14
    4c28:	0e 94 df 76 	call	0xedbe	; 0xedbe <fputc>
    4c2c:	d7 fc       	sbrc	r13, 7
    4c2e:	06 c0       	rjmp	.+12     	; 0x4c3c <vfprintf+0x3ce>
    4c30:	c1 14       	cp	r12, r1
    4c32:	d1 04       	cpc	r13, r1
    4c34:	41 f4       	brne	.+16     	; 0x4c46 <vfprintf+0x3d8>
    4c36:	ec 85       	ldd	r30, Y+12	; 0x0c
    4c38:	e4 ff       	sbrs	r30, 4
    4c3a:	05 c0       	rjmp	.+10     	; 0x4c46 <vfprintf+0x3d8>
    4c3c:	d1 94       	neg	r13
    4c3e:	c1 94       	neg	r12
    4c40:	d1 08       	sbc	r13, r1
    4c42:	8d e2       	ldi	r24, 0x2D	; 45
    4c44:	01 c0       	rjmp	.+2      	; 0x4c48 <vfprintf+0x3da>
    4c46:	8b e2       	ldi	r24, 0x2B	; 43
    4c48:	b7 01       	movw	r22, r14
    4c4a:	90 e0       	ldi	r25, 0x00	; 0
    4c4c:	0e 94 df 76 	call	0xedbe	; 0xedbe <fputc>
    4c50:	80 e3       	ldi	r24, 0x30	; 48
    4c52:	2a e0       	ldi	r18, 0x0A	; 10
    4c54:	c2 16       	cp	r12, r18
    4c56:	d1 04       	cpc	r13, r1
    4c58:	2c f0       	brlt	.+10     	; 0x4c64 <vfprintf+0x3f6>
    4c5a:	8f 5f       	subi	r24, 0xFF	; 255
    4c5c:	fa e0       	ldi	r31, 0x0A	; 10
    4c5e:	cf 1a       	sub	r12, r31
    4c60:	d1 08       	sbc	r13, r1
    4c62:	f7 cf       	rjmp	.-18     	; 0x4c52 <vfprintf+0x3e4>
    4c64:	b7 01       	movw	r22, r14
    4c66:	90 e0       	ldi	r25, 0x00	; 0
    4c68:	0e 94 df 76 	call	0xedbe	; 0xedbe <fputc>
    4c6c:	b7 01       	movw	r22, r14
    4c6e:	c6 01       	movw	r24, r12
    4c70:	c0 96       	adiw	r24, 0x30	; 48
    4c72:	0e 94 df 76 	call	0xedbe	; 0xedbe <fputc>
    4c76:	54 c1       	rjmp	.+680    	; 0x4f20 <vfprintf+0x6b2>
    4c78:	83 36       	cpi	r24, 0x63	; 99
    4c7a:	31 f0       	breq	.+12     	; 0x4c88 <vfprintf+0x41a>
    4c7c:	83 37       	cpi	r24, 0x73	; 115
    4c7e:	79 f0       	breq	.+30     	; 0x4c9e <vfprintf+0x430>
    4c80:	83 35       	cpi	r24, 0x53	; 83
    4c82:	09 f0       	breq	.+2      	; 0x4c86 <vfprintf+0x418>
    4c84:	56 c0       	rjmp	.+172    	; 0x4d32 <vfprintf+0x4c4>
    4c86:	20 c0       	rjmp	.+64     	; 0x4cc8 <vfprintf+0x45a>
    4c88:	56 01       	movw	r10, r12
    4c8a:	32 e0       	ldi	r19, 0x02	; 2
    4c8c:	a3 0e       	add	r10, r19
    4c8e:	b1 1c       	adc	r11, r1
    4c90:	f6 01       	movw	r30, r12
    4c92:	80 81       	ld	r24, Z
    4c94:	89 83       	std	Y+1, r24	; 0x01
    4c96:	01 e0       	ldi	r16, 0x01	; 1
    4c98:	10 e0       	ldi	r17, 0x00	; 0
    4c9a:	63 01       	movw	r12, r6
    4c9c:	12 c0       	rjmp	.+36     	; 0x4cc2 <vfprintf+0x454>
    4c9e:	56 01       	movw	r10, r12
    4ca0:	f2 e0       	ldi	r31, 0x02	; 2
    4ca2:	af 0e       	add	r10, r31
    4ca4:	b1 1c       	adc	r11, r1
    4ca6:	f6 01       	movw	r30, r12
    4ca8:	c0 80       	ld	r12, Z
    4caa:	d1 80       	ldd	r13, Z+1	; 0x01
    4cac:	96 fe       	sbrs	r9, 6
    4cae:	03 c0       	rjmp	.+6      	; 0x4cb6 <vfprintf+0x448>
    4cb0:	61 2f       	mov	r22, r17
    4cb2:	70 e0       	ldi	r23, 0x00	; 0
    4cb4:	02 c0       	rjmp	.+4      	; 0x4cba <vfprintf+0x44c>
    4cb6:	6f ef       	ldi	r22, 0xFF	; 255
    4cb8:	7f ef       	ldi	r23, 0xFF	; 255
    4cba:	c6 01       	movw	r24, r12
    4cbc:	0e 94 5d e9 	call	0x1d2ba	; 0x1d2ba <strnlen>
    4cc0:	8c 01       	movw	r16, r24
    4cc2:	f9 2d       	mov	r31, r9
    4cc4:	ff 77       	andi	r31, 0x7F	; 127
    4cc6:	14 c0       	rjmp	.+40     	; 0x4cf0 <vfprintf+0x482>
    4cc8:	56 01       	movw	r10, r12
    4cca:	22 e0       	ldi	r18, 0x02	; 2
    4ccc:	a2 0e       	add	r10, r18
    4cce:	b1 1c       	adc	r11, r1
    4cd0:	f6 01       	movw	r30, r12
    4cd2:	c0 80       	ld	r12, Z
    4cd4:	d1 80       	ldd	r13, Z+1	; 0x01
    4cd6:	96 fe       	sbrs	r9, 6
    4cd8:	03 c0       	rjmp	.+6      	; 0x4ce0 <vfprintf+0x472>
    4cda:	61 2f       	mov	r22, r17
    4cdc:	70 e0       	ldi	r23, 0x00	; 0
    4cde:	02 c0       	rjmp	.+4      	; 0x4ce4 <vfprintf+0x476>
    4ce0:	6f ef       	ldi	r22, 0xFF	; 255
    4ce2:	7f ef       	ldi	r23, 0xFF	; 255
    4ce4:	c6 01       	movw	r24, r12
    4ce6:	0e 94 4b e9 	call	0x1d296	; 0x1d296 <strnlen_P>
    4cea:	8c 01       	movw	r16, r24
    4cec:	f9 2d       	mov	r31, r9
    4cee:	f0 68       	ori	r31, 0x80	; 128
    4cf0:	9f 2e       	mov	r9, r31
    4cf2:	f3 fd       	sbrc	r31, 3
    4cf4:	1a c0       	rjmp	.+52     	; 0x4d2a <vfprintf+0x4bc>
    4cf6:	85 2d       	mov	r24, r5
    4cf8:	90 e0       	ldi	r25, 0x00	; 0
    4cfa:	08 17       	cp	r16, r24
    4cfc:	19 07       	cpc	r17, r25
    4cfe:	a8 f4       	brcc	.+42     	; 0x4d2a <vfprintf+0x4bc>
    4d00:	b7 01       	movw	r22, r14
    4d02:	80 e2       	ldi	r24, 0x20	; 32
    4d04:	90 e0       	ldi	r25, 0x00	; 0
    4d06:	0e 94 df 76 	call	0xedbe	; 0xedbe <fputc>
    4d0a:	5a 94       	dec	r5
    4d0c:	f4 cf       	rjmp	.-24     	; 0x4cf6 <vfprintf+0x488>
    4d0e:	f6 01       	movw	r30, r12
    4d10:	97 fc       	sbrc	r9, 7
    4d12:	85 91       	lpm	r24, Z+
    4d14:	97 fe       	sbrs	r9, 7
    4d16:	81 91       	ld	r24, Z+
    4d18:	6f 01       	movw	r12, r30
    4d1a:	b7 01       	movw	r22, r14
    4d1c:	90 e0       	ldi	r25, 0x00	; 0
    4d1e:	0e 94 df 76 	call	0xedbe	; 0xedbe <fputc>
    4d22:	51 10       	cpse	r5, r1
    4d24:	5a 94       	dec	r5
    4d26:	01 50       	subi	r16, 0x01	; 1
    4d28:	11 09       	sbc	r17, r1
    4d2a:	01 15       	cp	r16, r1
    4d2c:	11 05       	cpc	r17, r1
    4d2e:	79 f7       	brne	.-34     	; 0x4d0e <vfprintf+0x4a0>
    4d30:	f7 c0       	rjmp	.+494    	; 0x4f20 <vfprintf+0x6b2>
    4d32:	84 36       	cpi	r24, 0x64	; 100
    4d34:	11 f0       	breq	.+4      	; 0x4d3a <vfprintf+0x4cc>
    4d36:	89 36       	cpi	r24, 0x69	; 105
    4d38:	61 f5       	brne	.+88     	; 0x4d92 <vfprintf+0x524>
    4d3a:	56 01       	movw	r10, r12
    4d3c:	97 fe       	sbrs	r9, 7
    4d3e:	09 c0       	rjmp	.+18     	; 0x4d52 <vfprintf+0x4e4>
    4d40:	24 e0       	ldi	r18, 0x04	; 4
    4d42:	a2 0e       	add	r10, r18
    4d44:	b1 1c       	adc	r11, r1
    4d46:	f6 01       	movw	r30, r12
    4d48:	60 81       	ld	r22, Z
    4d4a:	71 81       	ldd	r23, Z+1	; 0x01
    4d4c:	82 81       	ldd	r24, Z+2	; 0x02
    4d4e:	93 81       	ldd	r25, Z+3	; 0x03
    4d50:	0a c0       	rjmp	.+20     	; 0x4d66 <vfprintf+0x4f8>
    4d52:	f2 e0       	ldi	r31, 0x02	; 2
    4d54:	af 0e       	add	r10, r31
    4d56:	b1 1c       	adc	r11, r1
    4d58:	f6 01       	movw	r30, r12
    4d5a:	60 81       	ld	r22, Z
    4d5c:	71 81       	ldd	r23, Z+1	; 0x01
    4d5e:	07 2e       	mov	r0, r23
    4d60:	00 0c       	add	r0, r0
    4d62:	88 0b       	sbc	r24, r24
    4d64:	99 0b       	sbc	r25, r25
    4d66:	f9 2d       	mov	r31, r9
    4d68:	ff 76       	andi	r31, 0x6F	; 111
    4d6a:	9f 2e       	mov	r9, r31
    4d6c:	97 ff       	sbrs	r25, 7
    4d6e:	09 c0       	rjmp	.+18     	; 0x4d82 <vfprintf+0x514>
    4d70:	90 95       	com	r25
    4d72:	80 95       	com	r24
    4d74:	70 95       	com	r23
    4d76:	61 95       	neg	r22
    4d78:	7f 4f       	sbci	r23, 0xFF	; 255
    4d7a:	8f 4f       	sbci	r24, 0xFF	; 255
    4d7c:	9f 4f       	sbci	r25, 0xFF	; 255
    4d7e:	f0 68       	ori	r31, 0x80	; 128
    4d80:	9f 2e       	mov	r9, r31
    4d82:	2a e0       	ldi	r18, 0x0A	; 10
    4d84:	30 e0       	ldi	r19, 0x00	; 0
    4d86:	a3 01       	movw	r20, r6
    4d88:	0e 94 68 e9 	call	0x1d2d0	; 0x1d2d0 <__ultoa_invert>
    4d8c:	c8 2e       	mov	r12, r24
    4d8e:	c6 18       	sub	r12, r6
    4d90:	3f c0       	rjmp	.+126    	; 0x4e10 <vfprintf+0x5a2>
    4d92:	09 2d       	mov	r16, r9
    4d94:	85 37       	cpi	r24, 0x75	; 117
    4d96:	21 f4       	brne	.+8      	; 0x4da0 <vfprintf+0x532>
    4d98:	0f 7e       	andi	r16, 0xEF	; 239
    4d9a:	2a e0       	ldi	r18, 0x0A	; 10
    4d9c:	30 e0       	ldi	r19, 0x00	; 0
    4d9e:	1d c0       	rjmp	.+58     	; 0x4dda <vfprintf+0x56c>
    4da0:	09 7f       	andi	r16, 0xF9	; 249
    4da2:	8f 36       	cpi	r24, 0x6F	; 111
    4da4:	91 f0       	breq	.+36     	; 0x4dca <vfprintf+0x55c>
    4da6:	18 f4       	brcc	.+6      	; 0x4dae <vfprintf+0x540>
    4da8:	88 35       	cpi	r24, 0x58	; 88
    4daa:	59 f0       	breq	.+22     	; 0x4dc2 <vfprintf+0x554>
    4dac:	c3 c0       	rjmp	.+390    	; 0x4f34 <vfprintf+0x6c6>
    4dae:	80 37       	cpi	r24, 0x70	; 112
    4db0:	19 f0       	breq	.+6      	; 0x4db8 <vfprintf+0x54a>
    4db2:	88 37       	cpi	r24, 0x78	; 120
    4db4:	11 f0       	breq	.+4      	; 0x4dba <vfprintf+0x54c>
    4db6:	be c0       	rjmp	.+380    	; 0x4f34 <vfprintf+0x6c6>
    4db8:	00 61       	ori	r16, 0x10	; 16
    4dba:	04 ff       	sbrs	r16, 4
    4dbc:	09 c0       	rjmp	.+18     	; 0x4dd0 <vfprintf+0x562>
    4dbe:	04 60       	ori	r16, 0x04	; 4
    4dc0:	07 c0       	rjmp	.+14     	; 0x4dd0 <vfprintf+0x562>
    4dc2:	94 fe       	sbrs	r9, 4
    4dc4:	08 c0       	rjmp	.+16     	; 0x4dd6 <vfprintf+0x568>
    4dc6:	06 60       	ori	r16, 0x06	; 6
    4dc8:	06 c0       	rjmp	.+12     	; 0x4dd6 <vfprintf+0x568>
    4dca:	28 e0       	ldi	r18, 0x08	; 8
    4dcc:	30 e0       	ldi	r19, 0x00	; 0
    4dce:	05 c0       	rjmp	.+10     	; 0x4dda <vfprintf+0x56c>
    4dd0:	20 e1       	ldi	r18, 0x10	; 16
    4dd2:	30 e0       	ldi	r19, 0x00	; 0
    4dd4:	02 c0       	rjmp	.+4      	; 0x4dda <vfprintf+0x56c>
    4dd6:	20 e1       	ldi	r18, 0x10	; 16
    4dd8:	32 e0       	ldi	r19, 0x02	; 2
    4dda:	56 01       	movw	r10, r12
    4ddc:	07 ff       	sbrs	r16, 7
    4dde:	09 c0       	rjmp	.+18     	; 0x4df2 <vfprintf+0x584>
    4de0:	84 e0       	ldi	r24, 0x04	; 4
    4de2:	a8 0e       	add	r10, r24
    4de4:	b1 1c       	adc	r11, r1
    4de6:	f6 01       	movw	r30, r12
    4de8:	60 81       	ld	r22, Z
    4dea:	71 81       	ldd	r23, Z+1	; 0x01
    4dec:	82 81       	ldd	r24, Z+2	; 0x02
    4dee:	93 81       	ldd	r25, Z+3	; 0x03
    4df0:	08 c0       	rjmp	.+16     	; 0x4e02 <vfprintf+0x594>
    4df2:	f2 e0       	ldi	r31, 0x02	; 2
    4df4:	af 0e       	add	r10, r31
    4df6:	b1 1c       	adc	r11, r1
    4df8:	f6 01       	movw	r30, r12
    4dfa:	60 81       	ld	r22, Z
    4dfc:	71 81       	ldd	r23, Z+1	; 0x01
    4dfe:	80 e0       	ldi	r24, 0x00	; 0
    4e00:	90 e0       	ldi	r25, 0x00	; 0
    4e02:	a3 01       	movw	r20, r6
    4e04:	0e 94 68 e9 	call	0x1d2d0	; 0x1d2d0 <__ultoa_invert>
    4e08:	c8 2e       	mov	r12, r24
    4e0a:	c6 18       	sub	r12, r6
    4e0c:	0f 77       	andi	r16, 0x7F	; 127
    4e0e:	90 2e       	mov	r9, r16
    4e10:	96 fe       	sbrs	r9, 6
    4e12:	0b c0       	rjmp	.+22     	; 0x4e2a <vfprintf+0x5bc>
    4e14:	09 2d       	mov	r16, r9
    4e16:	0e 7f       	andi	r16, 0xFE	; 254
    4e18:	c1 16       	cp	r12, r17
    4e1a:	50 f4       	brcc	.+20     	; 0x4e30 <vfprintf+0x5c2>
    4e1c:	94 fe       	sbrs	r9, 4
    4e1e:	0a c0       	rjmp	.+20     	; 0x4e34 <vfprintf+0x5c6>
    4e20:	92 fc       	sbrc	r9, 2
    4e22:	08 c0       	rjmp	.+16     	; 0x4e34 <vfprintf+0x5c6>
    4e24:	09 2d       	mov	r16, r9
    4e26:	0e 7e       	andi	r16, 0xEE	; 238
    4e28:	05 c0       	rjmp	.+10     	; 0x4e34 <vfprintf+0x5c6>
    4e2a:	dc 2c       	mov	r13, r12
    4e2c:	09 2d       	mov	r16, r9
    4e2e:	03 c0       	rjmp	.+6      	; 0x4e36 <vfprintf+0x5c8>
    4e30:	dc 2c       	mov	r13, r12
    4e32:	01 c0       	rjmp	.+2      	; 0x4e36 <vfprintf+0x5c8>
    4e34:	d1 2e       	mov	r13, r17
    4e36:	04 ff       	sbrs	r16, 4
    4e38:	0d c0       	rjmp	.+26     	; 0x4e54 <vfprintf+0x5e6>
    4e3a:	fe 01       	movw	r30, r28
    4e3c:	ec 0d       	add	r30, r12
    4e3e:	f1 1d       	adc	r31, r1
    4e40:	80 81       	ld	r24, Z
    4e42:	80 33       	cpi	r24, 0x30	; 48
    4e44:	11 f4       	brne	.+4      	; 0x4e4a <vfprintf+0x5dc>
    4e46:	09 7e       	andi	r16, 0xE9	; 233
    4e48:	09 c0       	rjmp	.+18     	; 0x4e5c <vfprintf+0x5ee>
    4e4a:	02 ff       	sbrs	r16, 2
    4e4c:	06 c0       	rjmp	.+12     	; 0x4e5a <vfprintf+0x5ec>
    4e4e:	d3 94       	inc	r13
    4e50:	d3 94       	inc	r13
    4e52:	04 c0       	rjmp	.+8      	; 0x4e5c <vfprintf+0x5ee>
    4e54:	80 2f       	mov	r24, r16
    4e56:	86 78       	andi	r24, 0x86	; 134
    4e58:	09 f0       	breq	.+2      	; 0x4e5c <vfprintf+0x5ee>
    4e5a:	d3 94       	inc	r13
    4e5c:	03 fd       	sbrc	r16, 3
    4e5e:	11 c0       	rjmp	.+34     	; 0x4e82 <vfprintf+0x614>
    4e60:	00 ff       	sbrs	r16, 0
    4e62:	06 c0       	rjmp	.+12     	; 0x4e70 <vfprintf+0x602>
    4e64:	1c 2d       	mov	r17, r12
    4e66:	d5 14       	cp	r13, r5
    4e68:	80 f4       	brcc	.+32     	; 0x4e8a <vfprintf+0x61c>
    4e6a:	15 0d       	add	r17, r5
    4e6c:	1d 19       	sub	r17, r13
    4e6e:	0d c0       	rjmp	.+26     	; 0x4e8a <vfprintf+0x61c>
    4e70:	d5 14       	cp	r13, r5
    4e72:	58 f4       	brcc	.+22     	; 0x4e8a <vfprintf+0x61c>
    4e74:	b7 01       	movw	r22, r14
    4e76:	80 e2       	ldi	r24, 0x20	; 32
    4e78:	90 e0       	ldi	r25, 0x00	; 0
    4e7a:	0e 94 df 76 	call	0xedbe	; 0xedbe <fputc>
    4e7e:	d3 94       	inc	r13
    4e80:	f7 cf       	rjmp	.-18     	; 0x4e70 <vfprintf+0x602>
    4e82:	d5 14       	cp	r13, r5
    4e84:	10 f4       	brcc	.+4      	; 0x4e8a <vfprintf+0x61c>
    4e86:	5d 18       	sub	r5, r13
    4e88:	01 c0       	rjmp	.+2      	; 0x4e8c <vfprintf+0x61e>
    4e8a:	51 2c       	mov	r5, r1
    4e8c:	04 ff       	sbrs	r16, 4
    4e8e:	10 c0       	rjmp	.+32     	; 0x4eb0 <vfprintf+0x642>
    4e90:	b7 01       	movw	r22, r14
    4e92:	80 e3       	ldi	r24, 0x30	; 48
    4e94:	90 e0       	ldi	r25, 0x00	; 0
    4e96:	0e 94 df 76 	call	0xedbe	; 0xedbe <fputc>
    4e9a:	02 ff       	sbrs	r16, 2
    4e9c:	17 c0       	rjmp	.+46     	; 0x4ecc <vfprintf+0x65e>
    4e9e:	01 fd       	sbrc	r16, 1
    4ea0:	03 c0       	rjmp	.+6      	; 0x4ea8 <vfprintf+0x63a>
    4ea2:	88 e7       	ldi	r24, 0x78	; 120
    4ea4:	90 e0       	ldi	r25, 0x00	; 0
    4ea6:	02 c0       	rjmp	.+4      	; 0x4eac <vfprintf+0x63e>
    4ea8:	88 e5       	ldi	r24, 0x58	; 88
    4eaa:	90 e0       	ldi	r25, 0x00	; 0
    4eac:	b7 01       	movw	r22, r14
    4eae:	0c c0       	rjmp	.+24     	; 0x4ec8 <vfprintf+0x65a>
    4eb0:	80 2f       	mov	r24, r16
    4eb2:	86 78       	andi	r24, 0x86	; 134
    4eb4:	59 f0       	breq	.+22     	; 0x4ecc <vfprintf+0x65e>
    4eb6:	01 ff       	sbrs	r16, 1
    4eb8:	02 c0       	rjmp	.+4      	; 0x4ebe <vfprintf+0x650>
    4eba:	8b e2       	ldi	r24, 0x2B	; 43
    4ebc:	01 c0       	rjmp	.+2      	; 0x4ec0 <vfprintf+0x652>
    4ebe:	80 e2       	ldi	r24, 0x20	; 32
    4ec0:	07 fd       	sbrc	r16, 7
    4ec2:	8d e2       	ldi	r24, 0x2D	; 45
    4ec4:	b7 01       	movw	r22, r14
    4ec6:	90 e0       	ldi	r25, 0x00	; 0
    4ec8:	0e 94 df 76 	call	0xedbe	; 0xedbe <fputc>
    4ecc:	c1 16       	cp	r12, r17
    4ece:	38 f4       	brcc	.+14     	; 0x4ede <vfprintf+0x670>
    4ed0:	b7 01       	movw	r22, r14
    4ed2:	80 e3       	ldi	r24, 0x30	; 48
    4ed4:	90 e0       	ldi	r25, 0x00	; 0
    4ed6:	0e 94 df 76 	call	0xedbe	; 0xedbe <fputc>
    4eda:	11 50       	subi	r17, 0x01	; 1
    4edc:	f7 cf       	rjmp	.-18     	; 0x4ecc <vfprintf+0x65e>
    4ede:	ca 94       	dec	r12
    4ee0:	f3 01       	movw	r30, r6
    4ee2:	ec 0d       	add	r30, r12
    4ee4:	f1 1d       	adc	r31, r1
    4ee6:	80 81       	ld	r24, Z
    4ee8:	b7 01       	movw	r22, r14
    4eea:	90 e0       	ldi	r25, 0x00	; 0
    4eec:	0e 94 df 76 	call	0xedbe	; 0xedbe <fputc>
    4ef0:	c1 10       	cpse	r12, r1
    4ef2:	f5 cf       	rjmp	.-22     	; 0x4ede <vfprintf+0x670>
    4ef4:	15 c0       	rjmp	.+42     	; 0x4f20 <vfprintf+0x6b2>
    4ef6:	f4 e0       	ldi	r31, 0x04	; 4
    4ef8:	f5 15       	cp	r31, r5
    4efa:	60 f5       	brcc	.+88     	; 0x4f54 <vfprintf+0x6e6>
    4efc:	84 e0       	ldi	r24, 0x04	; 4
    4efe:	58 1a       	sub	r5, r24
    4f00:	93 fe       	sbrs	r9, 3
    4f02:	1f c0       	rjmp	.+62     	; 0x4f42 <vfprintf+0x6d4>
    4f04:	01 11       	cpse	r16, r1
    4f06:	27 c0       	rjmp	.+78     	; 0x4f56 <vfprintf+0x6e8>
    4f08:	2c 85       	ldd	r18, Y+12	; 0x0c
    4f0a:	23 ff       	sbrs	r18, 3
    4f0c:	2a c0       	rjmp	.+84     	; 0x4f62 <vfprintf+0x6f4>
    4f0e:	06 ed       	ldi	r16, 0xD6	; 214
    4f10:	11 e0       	ldi	r17, 0x01	; 1
    4f12:	39 2d       	mov	r19, r9
    4f14:	30 71       	andi	r19, 0x10	; 16
    4f16:	93 2e       	mov	r9, r19
    4f18:	f8 01       	movw	r30, r16
    4f1a:	84 91       	lpm	r24, Z
    4f1c:	81 11       	cpse	r24, r1
    4f1e:	24 c0       	rjmp	.+72     	; 0x4f68 <vfprintf+0x6fa>
    4f20:	55 20       	and	r5, r5
    4f22:	09 f4       	brne	.+2      	; 0x4f26 <vfprintf+0x6b8>
    4f24:	e4 cc       	rjmp	.-1592   	; 0x48ee <vfprintf+0x80>
    4f26:	b7 01       	movw	r22, r14
    4f28:	80 e2       	ldi	r24, 0x20	; 32
    4f2a:	90 e0       	ldi	r25, 0x00	; 0
    4f2c:	0e 94 df 76 	call	0xedbe	; 0xedbe <fputc>
    4f30:	5a 94       	dec	r5
    4f32:	f6 cf       	rjmp	.-20     	; 0x4f20 <vfprintf+0x6b2>
    4f34:	f7 01       	movw	r30, r14
    4f36:	86 81       	ldd	r24, Z+6	; 0x06
    4f38:	97 81       	ldd	r25, Z+7	; 0x07
    4f3a:	26 c0       	rjmp	.+76     	; 0x4f88 <vfprintf+0x71a>
    4f3c:	8f ef       	ldi	r24, 0xFF	; 255
    4f3e:	9f ef       	ldi	r25, 0xFF	; 255
    4f40:	23 c0       	rjmp	.+70     	; 0x4f88 <vfprintf+0x71a>
    4f42:	b7 01       	movw	r22, r14
    4f44:	80 e2       	ldi	r24, 0x20	; 32
    4f46:	90 e0       	ldi	r25, 0x00	; 0
    4f48:	0e 94 df 76 	call	0xedbe	; 0xedbe <fputc>
    4f4c:	5a 94       	dec	r5
    4f4e:	51 10       	cpse	r5, r1
    4f50:	f8 cf       	rjmp	.-16     	; 0x4f42 <vfprintf+0x6d4>
    4f52:	d8 cf       	rjmp	.-80     	; 0x4f04 <vfprintf+0x696>
    4f54:	51 2c       	mov	r5, r1
    4f56:	b7 01       	movw	r22, r14
    4f58:	80 2f       	mov	r24, r16
    4f5a:	90 e0       	ldi	r25, 0x00	; 0
    4f5c:	0e 94 df 76 	call	0xedbe	; 0xedbe <fputc>
    4f60:	d3 cf       	rjmp	.-90     	; 0x4f08 <vfprintf+0x69a>
    4f62:	0a ed       	ldi	r16, 0xDA	; 218
    4f64:	11 e0       	ldi	r17, 0x01	; 1
    4f66:	d5 cf       	rjmp	.-86     	; 0x4f12 <vfprintf+0x6a4>
    4f68:	91 10       	cpse	r9, r1
    4f6a:	80 52       	subi	r24, 0x20	; 32
    4f6c:	b7 01       	movw	r22, r14
    4f6e:	90 e0       	ldi	r25, 0x00	; 0
    4f70:	0e 94 df 76 	call	0xedbe	; 0xedbe <fputc>
    4f74:	0f 5f       	subi	r16, 0xFF	; 255
    4f76:	1f 4f       	sbci	r17, 0xFF	; 255
    4f78:	cf cf       	rjmp	.-98     	; 0x4f18 <vfprintf+0x6aa>
    4f7a:	23 e0       	ldi	r18, 0x03	; 3
    4f7c:	25 15       	cp	r18, r5
    4f7e:	10 f4       	brcc	.+4      	; 0x4f84 <vfprintf+0x716>
    4f80:	83 e0       	ldi	r24, 0x03	; 3
    4f82:	bd cf       	rjmp	.-134    	; 0x4efe <vfprintf+0x690>
    4f84:	51 2c       	mov	r5, r1
    4f86:	c0 cf       	rjmp	.-128    	; 0x4f08 <vfprintf+0x69a>
    4f88:	60 96       	adiw	r28, 0x10	; 16
    4f8a:	0f b6       	in	r0, 0x3f	; 63
    4f8c:	f8 94       	cli
    4f8e:	de bf       	out	0x3e, r29	; 62
    4f90:	0f be       	out	0x3f, r0	; 63
    4f92:	cd bf       	out	0x3d, r28	; 61
    4f94:	df 91       	pop	r29
    4f96:	cf 91       	pop	r28
    4f98:	1f 91       	pop	r17
    4f9a:	0f 91       	pop	r16
    4f9c:	ff 90       	pop	r15
    4f9e:	ef 90       	pop	r14
    4fa0:	df 90       	pop	r13
    4fa2:	cf 90       	pop	r12
    4fa4:	bf 90       	pop	r11
    4fa6:	af 90       	pop	r10
    4fa8:	9f 90       	pop	r9
    4faa:	8f 90       	pop	r8
    4fac:	7f 90       	pop	r7
    4fae:	6f 90       	pop	r6
    4fb0:	5f 90       	pop	r5
    4fb2:	4f 90       	pop	r4
    4fb4:	3f 90       	pop	r3
    4fb6:	2f 90       	pop	r2
    4fb8:	08 95       	ret

00004fba <chip_select>:
/// @brief SPI CS pin status
/// return CS GPIO pin number or 0xff
uint8_t spi_chip_select_status()
{
    return(_cs_pin);
}
    4fba:	e8 2f       	mov	r30, r24
    4fbc:	e6 95       	lsr	r30
    4fbe:	e6 95       	lsr	r30
    4fc0:	e6 95       	lsr	r30
    4fc2:	93 e0       	ldi	r25, 0x03	; 3
    4fc4:	e9 9f       	mul	r30, r25
    4fc6:	f0 01       	movw	r30, r0
    4fc8:	11 24       	eor	r1, r1
    4fca:	32 a1       	ldd	r19, Z+34	; 0x22
    4fcc:	28 2f       	mov	r18, r24
    4fce:	27 70       	andi	r18, 0x07	; 7
    4fd0:	81 e0       	ldi	r24, 0x01	; 1
    4fd2:	90 e0       	ldi	r25, 0x00	; 0
    4fd4:	01 c0       	rjmp	.+2      	; 0x4fd8 <chip_select+0x1e>
    4fd6:	88 0f       	add	r24, r24
    4fd8:	2a 95       	dec	r18
    4fda:	ea f7       	brpl	.-6      	; 0x4fd6 <chip_select+0x1c>
    4fdc:	98 2f       	mov	r25, r24
    4fde:	90 95       	com	r25
    4fe0:	93 23       	and	r25, r19
    4fe2:	92 a3       	std	Z+34, r25	; 0x22
    4fe4:	91 a1       	ldd	r25, Z+33	; 0x21
    4fe6:	89 2b       	or	r24, r25
    4fe8:	81 a3       	std	Z+33, r24	; 0x21
    4fea:	08 95       	ret

00004fec <chip_deselect>:
    4fec:	e8 2f       	mov	r30, r24
    4fee:	e6 95       	lsr	r30
    4ff0:	e6 95       	lsr	r30
    4ff2:	e6 95       	lsr	r30
    4ff4:	93 e0       	ldi	r25, 0x03	; 3
    4ff6:	e9 9f       	mul	r30, r25
    4ff8:	f0 01       	movw	r30, r0
    4ffa:	11 24       	eor	r1, r1
    4ffc:	32 a1       	ldd	r19, Z+34	; 0x22
    4ffe:	28 2f       	mov	r18, r24
    5000:	27 70       	andi	r18, 0x07	; 7
    5002:	81 e0       	ldi	r24, 0x01	; 1
    5004:	90 e0       	ldi	r25, 0x00	; 0
    5006:	01 c0       	rjmp	.+2      	; 0x500a <chip_deselect+0x1e>
    5008:	88 0f       	add	r24, r24
    500a:	2a 95       	dec	r18
    500c:	ea f7       	brpl	.-6      	; 0x5008 <chip_deselect+0x1c>
    500e:	93 2f       	mov	r25, r19
    5010:	98 2b       	or	r25, r24
    5012:	92 a3       	std	Z+34, r25	; 0x22
    5014:	91 a1       	ldd	r25, Z+33	; 0x21
    5016:	89 2b       	or	r24, r25
    5018:	81 a3       	std	Z+33, r24	; 0x21
    501a:	08 95       	ret

0000501c <chip_select_init>:
    501c:	e7 cf       	rjmp	.-50     	; 0x4fec <chip_deselect>
    501e:	08 95       	ret

00005020 <spi_end>:
    5020:	cf 93       	push	r28
    5022:	ad b7       	in	r26, 0x3d	; 61
    5024:	be b7       	in	r27, 0x3e	; 62
    5026:	17 97       	sbiw	r26, 0x07	; 7
    5028:	0f b6       	in	r0, 0x3f	; 63
    502a:	f8 94       	cli
    502c:	be bf       	out	0x3e, r27	; 62
    502e:	0f be       	out	0x3f, r0	; 63
    5030:	ad bf       	out	0x3d, r26	; 61
    5032:	c8 2f       	mov	r28, r24
    5034:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    5038:	8c 17       	cp	r24, r28
    503a:	99 f0       	breq	.+38     	; 0x5062 <spi_end+0x42>
    503c:	8f 3f       	cpi	r24, 0xFF	; 255
    503e:	89 f0       	breq	.+34     	; 0x5062 <spi_end+0x42>
    5040:	2c 2f       	mov	r18, r28
    5042:	30 e0       	ldi	r19, 0x00	; 0
    5044:	ed b7       	in	r30, 0x3d	; 61
    5046:	fe b7       	in	r31, 0x3e	; 62
    5048:	37 83       	std	Z+7, r19	; 0x07
    504a:	26 83       	std	Z+6, r18	; 0x06
    504c:	90 e0       	ldi	r25, 0x00	; 0
    504e:	95 83       	std	Z+5, r25	; 0x05
    5050:	84 83       	std	Z+4, r24	; 0x04
    5052:	88 ed       	ldi	r24, 0xD8	; 216
    5054:	92 e0       	ldi	r25, 0x02	; 2
    5056:	a0 e0       	ldi	r26, 0x00	; 0
    5058:	81 83       	std	Z+1, r24	; 0x01
    505a:	92 83       	std	Z+2, r25	; 0x02
    505c:	a3 83       	std	Z+3, r26	; 0x03
    505e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    5062:	8c 2f       	mov	r24, r28
    5064:	c3 df       	rcall	.-122    	; 0x4fec <chip_deselect>
    5066:	8f ef       	ldi	r24, 0xFF	; 255
    5068:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    506c:	ad b7       	in	r26, 0x3d	; 61
    506e:	be b7       	in	r27, 0x3e	; 62
    5070:	17 96       	adiw	r26, 0x07	; 7
    5072:	0f b6       	in	r0, 0x3f	; 63
    5074:	f8 94       	cli
    5076:	be bf       	out	0x3e, r27	; 62
    5078:	0f be       	out	0x3f, r0	; 63
    507a:	ad bf       	out	0x3d, r26	; 61
    507c:	cf 91       	pop	r28
    507e:	08 95       	ret

00005080 <spi_TX_buffer>:
/// @brief SPI write buffer
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void spi_TX_buffer(const uint8_t *data, int count)
{
    5080:	c2 c4       	rjmp	.+2436   	; 0x5a06 <SPI0_TX>
    5082:	08 95       	ret

00005084 <spi_RX_buffer>:
    5084:	ea c4       	rjmp	.+2516   	; 0x5a5a <SPI0_RX>
    5086:	08 95       	ret

00005088 <spi_TX>:
    5088:	a1 e0       	ldi	r26, 0x01	; 1
    508a:	b0 e0       	ldi	r27, 0x00	; 0
    508c:	ea e4       	ldi	r30, 0x4A	; 74
    508e:	f8 e2       	ldi	r31, 0x28	; 40
    5090:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
    5094:	89 83       	std	Y+1, r24	; 0x01
    5096:	61 e0       	ldi	r22, 0x01	; 1
    5098:	70 e0       	ldi	r23, 0x00	; 0
    509a:	ce 01       	movw	r24, r28
    509c:	01 96       	adiw	r24, 0x01	; 1
    509e:	b3 d4       	rcall	.+2406   	; 0x5a06 <SPI0_TX>
    50a0:	21 96       	adiw	r28, 0x01	; 1
    50a2:	e2 e0       	ldi	r30, 0x02	; 2
    50a4:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

000050a8 <spi_init>:
    50a8:	cf 92       	push	r12
    50aa:	df 92       	push	r13
    50ac:	ef 92       	push	r14
    50ae:	ff 92       	push	r15
    50b0:	6b 01       	movw	r12, r22
    50b2:	7c 01       	movw	r14, r24
    50b4:	84 2f       	mov	r24, r20
    50b6:	9a df       	rcall	.-204    	; 0x4fec <chip_deselect>
    50b8:	8f ef       	ldi	r24, 0xFF	; 255
    50ba:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    50be:	c7 01       	movw	r24, r14
    50c0:	b6 01       	movw	r22, r12
    50c2:	74 d4       	rcall	.+2280   	; 0x59ac <SPI0_Init>
    50c4:	80 e0       	ldi	r24, 0x00	; 0
    50c6:	90 e0       	ldi	r25, 0x00	; 0
    50c8:	31 d4       	rcall	.+2146   	; 0x592c <SPI0_Mode>
    50ca:	8f ef       	ldi	r24, 0xFF	; 255
    50cc:	dd df       	rcall	.-70     	; 0x5088 <spi_TX>
    50ce:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    50d2:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    50d6:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    50da:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
    50de:	ff 90       	pop	r15
    50e0:	ef 90       	pop	r14
    50e2:	df 90       	pop	r13
    50e4:	cf 90       	pop	r12
    50e6:	08 95       	ret

000050e8 <spi_begin>:
    50e8:	cf 92       	push	r12
    50ea:	df 92       	push	r13
    50ec:	ef 92       	push	r14
    50ee:	ff 92       	push	r15
    50f0:	cf 93       	push	r28
    50f2:	df 93       	push	r29
    50f4:	ad b7       	in	r26, 0x3d	; 61
    50f6:	be b7       	in	r27, 0x3e	; 62
    50f8:	17 97       	sbiw	r26, 0x07	; 7
    50fa:	0f b6       	in	r0, 0x3f	; 63
    50fc:	f8 94       	cli
    50fe:	be bf       	out	0x3e, r27	; 62
    5100:	0f be       	out	0x3f, r0	; 63
    5102:	ad bf       	out	0x3d, r26	; 61
    5104:	6b 01       	movw	r12, r22
    5106:	7c 01       	movw	r14, r24
    5108:	ea 01       	movw	r28, r20
    510a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    510e:	8f 3f       	cpi	r24, 0xFF	; 255
    5110:	79 f0       	breq	.+30     	; 0x5130 <spi_begin+0x48>
    5112:	ed b7       	in	r30, 0x3d	; 61
    5114:	fe b7       	in	r31, 0x3e	; 62
    5116:	46 83       	std	Z+6, r20	; 0x06
    5118:	d7 83       	std	Z+7, r29	; 0x07
    511a:	90 e0       	ldi	r25, 0x00	; 0
    511c:	95 83       	std	Z+5, r25	; 0x05
    511e:	84 83       	std	Z+4, r24	; 0x04
    5120:	86 ef       	ldi	r24, 0xF6	; 246
    5122:	92 e0       	ldi	r25, 0x02	; 2
    5124:	a0 e0       	ldi	r26, 0x00	; 0
    5126:	81 83       	std	Z+1, r24	; 0x01
    5128:	92 83       	std	Z+2, r25	; 0x02
    512a:	a3 83       	std	Z+3, r26	; 0x03
    512c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    5130:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    5134:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    5138:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    513c:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    5140:	8c 15       	cp	r24, r12
    5142:	9d 05       	cpc	r25, r13
    5144:	ae 05       	cpc	r26, r14
    5146:	bf 05       	cpc	r27, r15
    5148:	21 f0       	breq	.+8      	; 0x5152 <spi_begin+0x6a>
    514a:	ae 01       	movw	r20, r28
    514c:	c7 01       	movw	r24, r14
    514e:	b6 01       	movw	r22, r12
    5150:	ab df       	rcall	.-170    	; 0x50a8 <spi_init>
    5152:	8c 2f       	mov	r24, r28
    5154:	32 df       	rcall	.-412    	; 0x4fba <chip_select>
    5156:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
    515a:	ad b7       	in	r26, 0x3d	; 61
    515c:	be b7       	in	r27, 0x3e	; 62
    515e:	17 96       	adiw	r26, 0x07	; 7
    5160:	0f b6       	in	r0, 0x3f	; 63
    5162:	f8 94       	cli
    5164:	be bf       	out	0x3e, r27	; 62
    5166:	0f be       	out	0x3f, r0	; 63
    5168:	ad bf       	out	0x3d, r26	; 61
    516a:	df 91       	pop	r29
    516c:	cf 91       	pop	r28
    516e:	ff 90       	pop	r15
    5170:	ef 90       	pop	r14
    5172:	df 90       	pop	r13
    5174:	cf 90       	pop	r12
    5176:	08 95       	ret

00005178 <spi_TXRX>:
    5178:	a1 e0       	ldi	r26, 0x01	; 1
    517a:	b0 e0       	ldi	r27, 0x00	; 0
    517c:	e2 ec       	ldi	r30, 0xC2	; 194
    517e:	f8 e2       	ldi	r31, 0x28	; 40
    5180:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
    5184:	89 83       	std	Y+1, r24	; 0x01
    5186:	61 e0       	ldi	r22, 0x01	; 1
    5188:	70 e0       	ldi	r23, 0x00	; 0
    518a:	ce 01       	movw	r24, r28
    518c:	01 96       	adiw	r24, 0x01	; 1
    518e:	4f d4       	rcall	.+2206   	; 0x5a2e <SPI0_TXRX>
    5190:	89 81       	ldd	r24, Y+1	; 0x01
    5192:	21 96       	adiw	r28, 0x01	; 1
    5194:	e2 e0       	ldi	r30, 0x02	; 2
    5196:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

0000519a <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    519a:	a2 e0       	ldi	r26, 0x02	; 2
    519c:	b0 e0       	ldi	r27, 0x00	; 0
    519e:	e3 ed       	ldi	r30, 0xD3	; 211
    51a0:	f8 e2       	ldi	r31, 0x28	; 40
    51a2:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    51a6:	20 91 44 21 	lds	r18, 0x2144	; 0x802144 <__brkval>
    51aa:	30 91 45 21 	lds	r19, 0x2145	; 0x802145 <__brkval+0x1>
    51ae:	21 15       	cp	r18, r1
    51b0:	31 05       	cpc	r19, r1
    51b2:	11 f4       	brne	.+4      	; 0x51b8 <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    51b4:	28 e4       	ldi	r18, 0x48	; 72
    51b6:	31 e2       	ldi	r19, 0x21	; 33

    ret = (uint16_t) &v - top;
    return ( ret );
}
    51b8:	ce 01       	movw	r24, r28
    51ba:	01 96       	adiw	r24, 0x01	; 1
    51bc:	82 1b       	sub	r24, r18
    51be:	93 0b       	sbc	r25, r19
    51c0:	22 96       	adiw	r28, 0x02	; 2
    51c2:	e2 e0       	ldi	r30, 0x02	; 2
    51c4:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

000051c8 <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    51c8:	a9 e0       	ldi	r26, 0x09	; 9
    51ca:	b0 e0       	ldi	r27, 0x00	; 0
    51cc:	ea ee       	ldi	r30, 0xEA	; 234
    51ce:	f8 e2       	ldi	r31, 0x28	; 40
    51d0:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    51d4:	e2 df       	rcall	.-60     	; 0x519a <freeRam>
    51d6:	99 87       	std	Y+9, r25	; 0x09

    printf("Free Ram:%u\n", ram);
    51d8:	88 87       	std	Y+8, r24	; 0x08
    51da:	ed b7       	in	r30, 0x3d	; 61
    51dc:	fe b7       	in	r31, 0x3e	; 62
    51de:	95 83       	std	Z+5, r25	; 0x05
    51e0:	84 83       	std	Z+4, r24	; 0x04
    51e2:	8d e1       	ldi	r24, 0x1D	; 29
    51e4:	94 e0       	ldi	r25, 0x04	; 4
    51e6:	a0 e0       	ldi	r26, 0x00	; 0
    51e8:	81 83       	std	Z+1, r24	; 0x01
    51ea:	92 83       	std	Z+2, r25	; 0x02
    51ec:	a3 83       	std	Z+3, r26	; 0x03
    51ee:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    51f2:	8f ef       	ldi	r24, 0xFF	; 255
    51f4:	90 e4       	ldi	r25, 0x40	; 64
    51f6:	ed b7       	in	r30, 0x3d	; 61
    51f8:	fe b7       	in	r31, 0x3e	; 62
    51fa:	95 83       	std	Z+5, r25	; 0x05
    51fc:	84 83       	std	Z+4, r24	; 0x04
    51fe:	8a e0       	ldi	r24, 0x0A	; 10
    5200:	94 e0       	ldi	r25, 0x04	; 4
    5202:	a0 e0       	ldi	r26, 0x00	; 0
    5204:	81 83       	std	Z+1, r24	; 0x01
    5206:	92 83       	std	Z+2, r25	; 0x02
    5208:	a3 83       	std	Z+3, r26	; 0x03
    520a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    520e:	ce 01       	movw	r24, r28
    5210:	08 96       	adiw	r24, 0x08	; 8
    5212:	ed b7       	in	r30, 0x3d	; 61
    5214:	fe b7       	in	r31, 0x3e	; 62
    5216:	95 83       	std	Z+5, r25	; 0x05
    5218:	84 83       	std	Z+4, r24	; 0x04
    521a:	87 ef       	ldi	r24, 0xF7	; 247
    521c:	93 e0       	ldi	r25, 0x03	; 3
    521e:	a0 e0       	ldi	r26, 0x00	; 0
    5220:	81 83       	std	Z+1, r24	; 0x01
    5222:	92 83       	std	Z+2, r25	; 0x02
    5224:	a3 83       	std	Z+3, r26	; 0x03
    5226:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    522a:	88 e4       	ldi	r24, 0x48	; 72
    522c:	91 e2       	ldi	r25, 0x21	; 33
    522e:	ed b7       	in	r30, 0x3d	; 61
    5230:	fe b7       	in	r31, 0x3e	; 62
    5232:	97 83       	std	Z+7, r25	; 0x07
    5234:	86 83       	std	Z+6, r24	; 0x06
    5236:	80 e1       	ldi	r24, 0x10	; 16
    5238:	97 e1       	ldi	r25, 0x17	; 23
    523a:	95 83       	std	Z+5, r25	; 0x05
    523c:	84 83       	std	Z+4, r24	; 0x04
    523e:	89 ed       	ldi	r24, 0xD9	; 217
    5240:	93 e0       	ldi	r25, 0x03	; 3
    5242:	a0 e0       	ldi	r26, 0x00	; 0
    5244:	81 83       	std	Z+1, r24	; 0x01
    5246:	92 83       	std	Z+2, r25	; 0x02
    5248:	a3 83       	std	Z+3, r26	; 0x03
    524a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    524e:	80 e1       	ldi	r24, 0x10	; 16
    5250:	97 e1       	ldi	r25, 0x17	; 23
    5252:	ed b7       	in	r30, 0x3d	; 61
    5254:	fe b7       	in	r31, 0x3e	; 62
    5256:	97 83       	std	Z+7, r25	; 0x07
    5258:	86 83       	std	Z+6, r24	; 0x06
    525a:	80 e0       	ldi	r24, 0x00	; 0
    525c:	91 e0       	ldi	r25, 0x01	; 1
    525e:	95 83       	std	Z+5, r25	; 0x05
    5260:	84 83       	std	Z+4, r24	; 0x04
    5262:	8b eb       	ldi	r24, 0xBB	; 187
    5264:	93 e0       	ldi	r25, 0x03	; 3
    5266:	a0 e0       	ldi	r26, 0x00	; 0
    5268:	81 83       	std	Z+1, r24	; 0x01
    526a:	92 83       	std	Z+2, r25	; 0x02
    526c:	a3 83       	std	Z+3, r26	; 0x03
    526e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    5272:	80 e0       	ldi	r24, 0x00	; 0
    5274:	90 e0       	ldi	r25, 0x00	; 0
    5276:	ed b7       	in	r30, 0x3d	; 61
    5278:	fe b7       	in	r31, 0x3e	; 62
    527a:	97 83       	std	Z+7, r25	; 0x07
    527c:	86 83       	std	Z+6, r24	; 0x06
    527e:	88 e4       	ldi	r24, 0x48	; 72
    5280:	91 e2       	ldi	r25, 0x21	; 33
    5282:	95 83       	std	Z+5, r25	; 0x05
    5284:	84 83       	std	Z+4, r24	; 0x04
    5286:	8d e9       	ldi	r24, 0x9D	; 157
    5288:	93 e0       	ldi	r25, 0x03	; 3
    528a:	a0 e0       	ldi	r26, 0x00	; 0
    528c:	81 83       	std	Z+1, r24	; 0x01
    528e:	92 83       	std	Z+2, r25	; 0x02
    5290:	a3 83       	std	Z+3, r26	; 0x03
    5292:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    5296:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    529a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    529e:	ed b7       	in	r30, 0x3d	; 61
    52a0:	fe b7       	in	r31, 0x3e	; 62
    52a2:	97 83       	std	Z+7, r25	; 0x07
    52a4:	86 83       	std	Z+6, r24	; 0x06
    52a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    52aa:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    52ae:	95 83       	std	Z+5, r25	; 0x05
    52b0:	84 83       	std	Z+4, r24	; 0x04
    52b2:	8f e7       	ldi	r24, 0x7F	; 127
    52b4:	93 e0       	ldi	r25, 0x03	; 3
    52b6:	a0 e0       	ldi	r26, 0x00	; 0
    52b8:	81 83       	std	Z+1, r24	; 0x01
    52ba:	92 83       	std	Z+2, r25	; 0x02
    52bc:	a3 83       	std	Z+3, r26	; 0x03
    52be:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    52c2:	80 91 44 21 	lds	r24, 0x2144	; 0x802144 <__brkval>
    52c6:	90 91 45 21 	lds	r25, 0x2145	; 0x802145 <__brkval+0x1>
    52ca:	ed b7       	in	r30, 0x3d	; 61
    52cc:	fe b7       	in	r31, 0x3e	; 62
    52ce:	95 83       	std	Z+5, r25	; 0x05
    52d0:	84 83       	std	Z+4, r24	; 0x04
    52d2:	8b e6       	ldi	r24, 0x6B	; 107
    52d4:	93 e0       	ldi	r25, 0x03	; 3
    52d6:	a0 e0       	ldi	r26, 0x00	; 0
    52d8:	81 83       	std	Z+1, r24	; 0x01
    52da:	92 83       	std	Z+2, r25	; 0x02
    52dc:	a3 83       	std	Z+3, r26	; 0x03
    52de:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

}
    52e2:	29 96       	adiw	r28, 0x09	; 9
    52e4:	e2 e0       	ldi	r30, 0x02	; 2
    52e6:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

000052ea <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    52ea:	ef 92       	push	r14
    52ec:	ff 92       	push	r15
    52ee:	0f 93       	push	r16
    52f0:	1f 93       	push	r17
    52f2:	cf 93       	push	r28
    52f4:	df 93       	push	r29
    52f6:	ad b7       	in	r26, 0x3d	; 61
    52f8:	be b7       	in	r27, 0x3e	; 62
    52fa:	17 97       	sbiw	r26, 0x07	; 7
    52fc:	0f b6       	in	r0, 0x3f	; 63
    52fe:	f8 94       	cli
    5300:	be bf       	out	0x3e, r27	; 62
    5302:	0f be       	out	0x3f, r0	; 63
    5304:	ad bf       	out	0x3d, r26	; 61
    5306:	8c 01       	movw	r16, r24
    5308:	7b 01       	movw	r14, r22
	void *p = calloc(size, elements);
    530a:	0e 94 34 e7 	call	0x1ce68	; 0x1ce68 <calloc>
    530e:	ec 01       	movw	r28, r24
	if(!p)
    5310:	89 2b       	or	r24, r25
    5312:	71 f4       	brne	.+28     	; 0x5330 <safecalloc+0x46>
	{
		printf("safecalloc(%d,%d) failed!\n", size, elements);
    5314:	ed b7       	in	r30, 0x3d	; 61
    5316:	fe b7       	in	r31, 0x3e	; 62
    5318:	f7 82       	std	Z+7, r15	; 0x07
    531a:	e6 82       	std	Z+6, r14	; 0x06
    531c:	15 83       	std	Z+5, r17	; 0x05
    531e:	04 83       	std	Z+4, r16	; 0x04
    5320:	80 e5       	ldi	r24, 0x50	; 80
    5322:	93 e0       	ldi	r25, 0x03	; 3
    5324:	a0 e0       	ldi	r26, 0x00	; 0
    5326:	81 83       	std	Z+1, r24	; 0x01
    5328:	92 83       	std	Z+2, r25	; 0x02
    532a:	a3 83       	std	Z+3, r26	; 0x03
    532c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
	}
	return(p);
}
    5330:	ce 01       	movw	r24, r28
    5332:	cd b7       	in	r28, 0x3d	; 61
    5334:	de b7       	in	r29, 0x3e	; 62
    5336:	27 96       	adiw	r28, 0x07	; 7
    5338:	e6 e0       	ldi	r30, 0x06	; 6
    533a:	0c 94 ae e4 	jmp	0x1c95c	; 0x1c95c <__epilogue_restores__+0x18>

0000533e <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    533e:	0f 93       	push	r16
    5340:	1f 93       	push	r17
    5342:	cf 93       	push	r28
    5344:	df 93       	push	r29
    5346:	00 d0       	rcall	.+0      	; 0x5348 <safemalloc+0xa>
    5348:	00 d0       	rcall	.+0      	; 0x534a <safemalloc+0xc>
    534a:	1f 92       	push	r1
    534c:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    534e:	61 e0       	ldi	r22, 0x01	; 1
    5350:	70 e0       	ldi	r23, 0x00	; 0
    5352:	0e 94 34 e7 	call	0x1ce68	; 0x1ce68 <calloc>
    5356:	ec 01       	movw	r28, r24
    if(!p)
    5358:	89 2b       	or	r24, r25
    535a:	61 f4       	brne	.+24     	; 0x5374 <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    535c:	ed b7       	in	r30, 0x3d	; 61
    535e:	fe b7       	in	r31, 0x3e	; 62
    5360:	15 83       	std	Z+5, r17	; 0x05
    5362:	04 83       	std	Z+4, r16	; 0x04
    5364:	88 e3       	ldi	r24, 0x38	; 56
    5366:	93 e0       	ldi	r25, 0x03	; 3
    5368:	a0 e0       	ldi	r26, 0x00	; 0
    536a:	81 83       	std	Z+1, r24	; 0x01
    536c:	92 83       	std	Z+2, r25	; 0x02
    536e:	a3 83       	std	Z+3, r26	; 0x03
    5370:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    }
    return(p);
}
    5374:	ce 01       	movw	r24, r28
    5376:	cd b7       	in	r28, 0x3d	; 61
    5378:	de b7       	in	r29, 0x3e	; 62
    537a:	25 96       	adiw	r28, 0x05	; 5
    537c:	e4 e0       	ldi	r30, 0x04	; 4
    537e:	0c 94 b0 e4 	jmp	0x1c960	; 0x1c960 <__epilogue_restores__+0x1c>

00005382 <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    5382:	ad b7       	in	r26, 0x3d	; 61
    5384:	be b7       	in	r27, 0x3e	; 62
    5386:	17 97       	sbiw	r26, 0x07	; 7
    5388:	0f b6       	in	r0, 0x3f	; 63
    538a:	f8 94       	cli
    538c:	be bf       	out	0x3e, r27	; 62
    538e:	0f be       	out	0x3f, r0	; 63
    5390:	ad bf       	out	0x3d, r26	; 61
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    5392:	00 97       	sbiw	r24, 0x00	; 0
    5394:	11 f1       	breq	.+68     	; 0x53da <safefree+0x58>
        return;

    if(__brkval)
    5396:	20 91 44 21 	lds	r18, 0x2144	; 0x802144 <__brkval>
    539a:	30 91 45 21 	lds	r19, 0x2145	; 0x802145 <__brkval+0x1>
    539e:	21 15       	cp	r18, r1
    53a0:	31 05       	cpc	r19, r1
    53a2:	11 f4       	brne	.+4      	; 0x53a8 <safefree+0x26>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    53a4:	28 e4       	ldi	r18, 0x48	; 72
    53a6:	31 e2       	ldi	r19, 0x21	; 33

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    53a8:	41 e2       	ldi	r20, 0x21	; 33
    53aa:	88 34       	cpi	r24, 0x48	; 72
    53ac:	94 07       	cpc	r25, r20
    53ae:	30 f0       	brcs	.+12     	; 0x53bc <safefree+0x3a>
    53b0:	28 17       	cp	r18, r24
    53b2:	39 07       	cpc	r19, r25
    53b4:	18 f0       	brcs	.+6      	; 0x53bc <safefree+0x3a>
        ((uint16_t) p <= top) )
    {
        free(p);
    53b6:	0e 94 e6 e7 	call	0x1cfcc	; 0x1cfcc <free>
        return;
    53ba:	0f c0       	rjmp	.+30     	; 0x53da <safefree+0x58>
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    53bc:	ed b7       	in	r30, 0x3d	; 61
    53be:	fe b7       	in	r31, 0x3e	; 62
    53c0:	37 83       	std	Z+7, r19	; 0x07
    53c2:	26 83       	std	Z+6, r18	; 0x06
    53c4:	95 83       	std	Z+5, r25	; 0x05
    53c6:	84 83       	std	Z+4, r24	; 0x04
    53c8:	83 e1       	ldi	r24, 0x13	; 19
    53ca:	93 e0       	ldi	r25, 0x03	; 3
    53cc:	a0 e0       	ldi	r26, 0x00	; 0
    53ce:	81 83       	std	Z+1, r24	; 0x01
    53d0:	92 83       	std	Z+2, r25	; 0x02
    53d2:	a3 83       	std	Z+3, r26	; 0x03
    53d4:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    PrintFree();
}
    53d8:	f7 de       	rcall	.-530    	; 0x51c8 <PrintFree>
    53da:	ad b7       	in	r26, 0x3d	; 61
    53dc:	be b7       	in	r27, 0x3e	; 62
    53de:	17 96       	adiw	r26, 0x07	; 7
    53e0:	0f b6       	in	r0, 0x3f	; 63
    53e2:	f8 94       	cli
    53e4:	be bf       	out	0x3e, r27	; 62
    53e6:	0f be       	out	0x3f, r0	; 63
    53e8:	ad bf       	out	0x3d, r26	; 61
    53ea:	08 95       	ret

000053ec <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    53ec:	64 36       	cpi	r22, 0x64	; 100
    53ee:	71 05       	cpc	r23, r1
    53f0:	81 05       	cpc	r24, r1
    53f2:	91 05       	cpc	r25, r1
    53f4:	58 f0       	brcs	.+22     	; 0x540c <delayus+0x20>
    {
        us -= 100U;
    53f6:	64 56       	subi	r22, 0x64	; 100
    53f8:	71 09       	sbc	r23, r1
    53fa:	81 09       	sbc	r24, r1
    53fc:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    53fe:	e3 ef       	ldi	r30, 0xF3	; 243
    5400:	f1 e0       	ldi	r31, 0x01	; 1
    5402:	31 97       	sbiw	r30, 0x01	; 1
    5404:	f1 f7       	brne	.-4      	; 0x5402 <delayus+0x16>
    5406:	00 c0       	rjmp	.+0      	; 0x5408 <delayus+0x1c>
    5408:	00 00       	nop
    540a:	f0 cf       	rjmp	.-32     	; 0x53ec <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    540c:	6a 30       	cpi	r22, 0x0A	; 10
    540e:	71 05       	cpc	r23, r1
    5410:	81 05       	cpc	r24, r1
    5412:	91 05       	cpc	r25, r1
    5414:	48 f0       	brcs	.+18     	; 0x5428 <delayus+0x3c>
    {
        us -= 10U;
    5416:	6a 50       	subi	r22, 0x0A	; 10
    5418:	71 09       	sbc	r23, r1
    541a:	81 09       	sbc	r24, r1
    541c:	91 09       	sbc	r25, r1
    541e:	f2 e4       	ldi	r31, 0x42	; 66
    5420:	fa 95       	dec	r31
    5422:	f1 f7       	brne	.-4      	; 0x5420 <delayus+0x34>
    5424:	00 c0       	rjmp	.+0      	; 0x5426 <delayus+0x3a>
    5426:	f2 cf       	rjmp	.-28     	; 0x540c <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    5428:	61 15       	cp	r22, r1
    542a:	71 05       	cpc	r23, r1
    542c:	81 05       	cpc	r24, r1
    542e:	91 05       	cpc	r25, r1
    5430:	49 f0       	breq	.+18     	; 0x5444 <delayus+0x58>
    {
        --us;
    5432:	61 50       	subi	r22, 0x01	; 1
    5434:	71 09       	sbc	r23, r1
    5436:	81 09       	sbc	r24, r1
    5438:	91 09       	sbc	r25, r1
    543a:	26 e0       	ldi	r18, 0x06	; 6
    543c:	2a 95       	dec	r18
    543e:	f1 f7       	brne	.-4      	; 0x543c <delayus+0x50>
    5440:	00 c0       	rjmp	.+0      	; 0x5442 <delayus+0x56>
    5442:	f2 cf       	rjmp	.-28     	; 0x5428 <delayus+0x3c>
        _delay_us(1);
    }
}
    5444:	08 95       	ret

00005446 <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    5446:	61 15       	cp	r22, r1
    5448:	71 05       	cpc	r23, r1
    544a:	81 05       	cpc	r24, r1
    544c:	91 05       	cpc	r25, r1
    544e:	09 f4       	brne	.+2      	; 0x5452 <delayms+0xc>
    5450:	41 c0       	rjmp	.+130    	; 0x54d4 <delayms+0x8e>
    5452:	e3 ef       	ldi	r30, 0xF3	; 243
    5454:	f1 e0       	ldi	r31, 0x01	; 1
    5456:	31 97       	sbiw	r30, 0x01	; 1
    5458:	f1 f7       	brne	.-4      	; 0x5456 <delayms+0x10>
    545a:	00 c0       	rjmp	.+0      	; 0x545c <delayms+0x16>
    545c:	00 00       	nop
    545e:	e3 ef       	ldi	r30, 0xF3	; 243
    5460:	f1 e0       	ldi	r31, 0x01	; 1
    5462:	31 97       	sbiw	r30, 0x01	; 1
    5464:	f1 f7       	brne	.-4      	; 0x5462 <delayms+0x1c>
    5466:	00 c0       	rjmp	.+0      	; 0x5468 <delayms+0x22>
    5468:	00 00       	nop
    546a:	e3 ef       	ldi	r30, 0xF3	; 243
    546c:	f1 e0       	ldi	r31, 0x01	; 1
    546e:	31 97       	sbiw	r30, 0x01	; 1
    5470:	f1 f7       	brne	.-4      	; 0x546e <delayms+0x28>
    5472:	00 c0       	rjmp	.+0      	; 0x5474 <delayms+0x2e>
    5474:	00 00       	nop
    5476:	e3 ef       	ldi	r30, 0xF3	; 243
    5478:	f1 e0       	ldi	r31, 0x01	; 1
    547a:	31 97       	sbiw	r30, 0x01	; 1
    547c:	f1 f7       	brne	.-4      	; 0x547a <delayms+0x34>
    547e:	00 c0       	rjmp	.+0      	; 0x5480 <delayms+0x3a>
    5480:	00 00       	nop
    5482:	e3 ef       	ldi	r30, 0xF3	; 243
    5484:	f1 e0       	ldi	r31, 0x01	; 1
    5486:	31 97       	sbiw	r30, 0x01	; 1
    5488:	f1 f7       	brne	.-4      	; 0x5486 <delayms+0x40>
    548a:	00 c0       	rjmp	.+0      	; 0x548c <delayms+0x46>
    548c:	00 00       	nop
    548e:	e3 ef       	ldi	r30, 0xF3	; 243
    5490:	f1 e0       	ldi	r31, 0x01	; 1
    5492:	31 97       	sbiw	r30, 0x01	; 1
    5494:	f1 f7       	brne	.-4      	; 0x5492 <delayms+0x4c>
    5496:	00 c0       	rjmp	.+0      	; 0x5498 <delayms+0x52>
    5498:	00 00       	nop
    549a:	e3 ef       	ldi	r30, 0xF3	; 243
    549c:	f1 e0       	ldi	r31, 0x01	; 1
    549e:	31 97       	sbiw	r30, 0x01	; 1
    54a0:	f1 f7       	brne	.-4      	; 0x549e <delayms+0x58>
    54a2:	00 c0       	rjmp	.+0      	; 0x54a4 <delayms+0x5e>
    54a4:	00 00       	nop
    54a6:	e3 ef       	ldi	r30, 0xF3	; 243
    54a8:	f1 e0       	ldi	r31, 0x01	; 1
    54aa:	31 97       	sbiw	r30, 0x01	; 1
    54ac:	f1 f7       	brne	.-4      	; 0x54aa <delayms+0x64>
    54ae:	00 c0       	rjmp	.+0      	; 0x54b0 <delayms+0x6a>
    54b0:	00 00       	nop
    54b2:	e3 ef       	ldi	r30, 0xF3	; 243
    54b4:	f1 e0       	ldi	r31, 0x01	; 1
    54b6:	31 97       	sbiw	r30, 0x01	; 1
    54b8:	f1 f7       	brne	.-4      	; 0x54b6 <delayms+0x70>
    54ba:	00 c0       	rjmp	.+0      	; 0x54bc <delayms+0x76>
    54bc:	00 00       	nop
    54be:	e3 ef       	ldi	r30, 0xF3	; 243
    54c0:	f1 e0       	ldi	r31, 0x01	; 1
    54c2:	31 97       	sbiw	r30, 0x01	; 1
    54c4:	f1 f7       	brne	.-4      	; 0x54c2 <delayms+0x7c>
    54c6:	00 c0       	rjmp	.+0      	; 0x54c8 <delayms+0x82>
    54c8:	00 00       	nop
    54ca:	61 50       	subi	r22, 0x01	; 1
    54cc:	71 09       	sbc	r23, r1
    54ce:	81 09       	sbc	r24, r1
    54d0:	91 09       	sbc	r25, r1
    54d2:	b9 cf       	rjmp	.-142    	; 0x5446 <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    54d4:	08 95       	ret

000054d6 <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    54d6:	81 11       	cpse	r24, r1
    54d8:	0e c0       	rjmp	.+28     	; 0x54f6 <uart_rx_flush+0x20>
    54da:	f8 94       	cli
    54dc:	10 92 8f 19 	sts	0x198F, r1	; 0x80198f <uarts+0x4>
    54e0:	10 92 8e 19 	sts	0x198E, r1	; 0x80198e <uarts+0x3>
    54e4:	10 92 8b 19 	sts	0x198B, r1	; 0x80198b <uarts>
    54e8:	10 92 8c 19 	sts	0x198C, r1	; 0x80198c <uarts+0x1>
    54ec:	10 92 8d 19 	sts	0x198D, r1	; 0x80198d <uarts+0x2>
    54f0:	10 92 90 19 	sts	0x1990, r1	; 0x801990 <uarts+0x5>
    54f4:	78 94       	sei
    54f6:	08 95       	ret

000054f8 <uart_ubr>:
    54f8:	4f 92       	push	r4
    54fa:	5f 92       	push	r5
    54fc:	6f 92       	push	r6
    54fe:	7f 92       	push	r7
    5500:	8f 92       	push	r8
    5502:	9f 92       	push	r9
    5504:	af 92       	push	r10
    5506:	bf 92       	push	r11
    5508:	cf 92       	push	r12
    550a:	df 92       	push	r13
    550c:	ef 92       	push	r14
    550e:	ff 92       	push	r15
    5510:	cf 93       	push	r28
    5512:	df 93       	push	r29
    5514:	5a 01       	movw	r10, r20
    5516:	e9 01       	movw	r28, r18
    5518:	0e 94 d2 e5 	call	0x1cba4	; 0x1cba4 <__floatunsisf>
    551c:	2b 01       	movw	r4, r22
    551e:	3c 01       	movw	r6, r24
    5520:	20 e0       	ldi	r18, 0x00	; 0
    5522:	30 e0       	ldi	r19, 0x00	; 0
    5524:	40 e0       	ldi	r20, 0x00	; 0
    5526:	51 e4       	ldi	r21, 0x41	; 65
    5528:	0e 94 88 e6 	call	0x1cd10	; 0x1cd10 <__mulsf3>
    552c:	9b 01       	movw	r18, r22
    552e:	ac 01       	movw	r20, r24
    5530:	60 e8       	ldi	r22, 0x80	; 128
    5532:	76 e9       	ldi	r23, 0x96	; 150
    5534:	88 e9       	ldi	r24, 0x98	; 152
    5536:	9b e4       	ldi	r25, 0x4B	; 75
    5538:	0e 94 39 e5 	call	0x1ca72	; 0x1ca72 <__divsf3>
    553c:	20 e0       	ldi	r18, 0x00	; 0
    553e:	30 e0       	ldi	r19, 0x00	; 0
    5540:	40 e8       	ldi	r20, 0x80	; 128
    5542:	5f e3       	ldi	r21, 0x3F	; 63
    5544:	0e 94 d0 e4 	call	0x1c9a0	; 0x1c9a0 <__subsf3>
    5548:	0e 94 eb e6 	call	0x1cdd6	; 0x1cdd6 <round>
    554c:	0e 94 a6 e5 	call	0x1cb4c	; 0x1cb4c <__fixunssfsi>
    5550:	6b 01       	movw	r12, r22
    5552:	7c 01       	movw	r14, r24
    5554:	c1 14       	cp	r12, r1
    5556:	80 e1       	ldi	r24, 0x10	; 16
    5558:	d8 06       	cpc	r13, r24
    555a:	e1 04       	cpc	r14, r1
    555c:	f1 04       	cpc	r15, r1
    555e:	58 f4       	brcc	.+22     	; 0x5576 <uart_ubr+0x7e>
    5560:	81 e0       	ldi	r24, 0x01	; 1
    5562:	90 e0       	ldi	r25, 0x00	; 0
    5564:	f5 01       	movw	r30, r10
    5566:	91 83       	std	Z+1, r25	; 0x01
    5568:	80 83       	st	Z, r24
    556a:	81 2c       	mov	r8, r1
    556c:	91 2c       	mov	r9, r1
    556e:	a1 2c       	mov	r10, r1
    5570:	21 e4       	ldi	r18, 0x41	; 65
    5572:	b2 2e       	mov	r11, r18
    5574:	31 c0       	rjmp	.+98     	; 0x55d8 <uart_ubr+0xe0>
    5576:	f5 01       	movw	r30, r10
    5578:	11 82       	std	Z+1, r1	; 0x01
    557a:	10 82       	st	Z, r1
    557c:	20 e0       	ldi	r18, 0x00	; 0
    557e:	30 e0       	ldi	r19, 0x00	; 0
    5580:	40 e8       	ldi	r20, 0x80	; 128
    5582:	51 e4       	ldi	r21, 0x41	; 65
    5584:	c3 01       	movw	r24, r6
    5586:	b2 01       	movw	r22, r4
    5588:	0e 94 88 e6 	call	0x1cd10	; 0x1cd10 <__mulsf3>
    558c:	9b 01       	movw	r18, r22
    558e:	ac 01       	movw	r20, r24
    5590:	60 e8       	ldi	r22, 0x80	; 128
    5592:	76 e9       	ldi	r23, 0x96	; 150
    5594:	88 e9       	ldi	r24, 0x98	; 152
    5596:	9b e4       	ldi	r25, 0x4B	; 75
    5598:	0e 94 39 e5 	call	0x1ca72	; 0x1ca72 <__divsf3>
    559c:	20 e0       	ldi	r18, 0x00	; 0
    559e:	30 e0       	ldi	r19, 0x00	; 0
    55a0:	40 e8       	ldi	r20, 0x80	; 128
    55a2:	5f e3       	ldi	r21, 0x3F	; 63
    55a4:	0e 94 d0 e4 	call	0x1c9a0	; 0x1c9a0 <__subsf3>
    55a8:	0e 94 eb e6 	call	0x1cdd6	; 0x1cdd6 <round>
    55ac:	0e 94 a6 e5 	call	0x1cb4c	; 0x1cb4c <__fixunssfsi>
    55b0:	6b 01       	movw	r12, r22
    55b2:	7c 01       	movw	r14, r24
    55b4:	81 2c       	mov	r8, r1
    55b6:	91 2c       	mov	r9, r1
    55b8:	90 e8       	ldi	r25, 0x80	; 128
    55ba:	a9 2e       	mov	r10, r25
    55bc:	91 e4       	ldi	r25, 0x41	; 65
    55be:	b9 2e       	mov	r11, r25
    55c0:	c1 14       	cp	r12, r1
    55c2:	f0 e1       	ldi	r31, 0x10	; 16
    55c4:	df 06       	cpc	r13, r31
    55c6:	e1 04       	cpc	r14, r1
    55c8:	f1 04       	cpc	r15, r1
    55ca:	30 f0       	brcs	.+12     	; 0x55d8 <uart_ubr+0xe0>
    55cc:	cc 24       	eor	r12, r12
    55ce:	ca 94       	dec	r12
    55d0:	8f e0       	ldi	r24, 0x0F	; 15
    55d2:	d8 2e       	mov	r13, r24
    55d4:	e1 2c       	mov	r14, r1
    55d6:	f1 2c       	mov	r15, r1
    55d8:	c7 01       	movw	r24, r14
    55da:	b6 01       	movw	r22, r12
    55dc:	6f 5f       	subi	r22, 0xFF	; 255
    55de:	7f 4f       	sbci	r23, 0xFF	; 255
    55e0:	8f 4f       	sbci	r24, 0xFF	; 255
    55e2:	9f 4f       	sbci	r25, 0xFF	; 255
    55e4:	0e 94 d2 e5 	call	0x1cba4	; 0x1cba4 <__floatunsisf>
    55e8:	a5 01       	movw	r20, r10
    55ea:	94 01       	movw	r18, r8
    55ec:	0e 94 88 e6 	call	0x1cd10	; 0x1cd10 <__mulsf3>
    55f0:	9b 01       	movw	r18, r22
    55f2:	ac 01       	movw	r20, r24
    55f4:	60 e8       	ldi	r22, 0x80	; 128
    55f6:	76 e9       	ldi	r23, 0x96	; 150
    55f8:	88 e9       	ldi	r24, 0x98	; 152
    55fa:	9b e4       	ldi	r25, 0x4B	; 75
    55fc:	0e 94 39 e5 	call	0x1ca72	; 0x1ca72 <__divsf3>
    5600:	0e 94 a6 e5 	call	0x1cb4c	; 0x1cb4c <__fixunssfsi>
    5604:	68 83       	st	Y, r22
    5606:	79 83       	std	Y+1, r23	; 0x01
    5608:	8a 83       	std	Y+2, r24	; 0x02
    560a:	9b 83       	std	Y+3, r25	; 0x03
    560c:	c6 01       	movw	r24, r12
    560e:	df 91       	pop	r29
    5610:	cf 91       	pop	r28
    5612:	ff 90       	pop	r15
    5614:	ef 90       	pop	r14
    5616:	df 90       	pop	r13
    5618:	cf 90       	pop	r12
    561a:	bf 90       	pop	r11
    561c:	af 90       	pop	r10
    561e:	9f 90       	pop	r9
    5620:	8f 90       	pop	r8
    5622:	7f 90       	pop	r7
    5624:	6f 90       	pop	r6
    5626:	5f 90       	pop	r5
    5628:	4f 90       	pop	r4
    562a:	08 95       	ret

0000562c <uart_init>:
    562c:	a6 e0       	ldi	r26, 0x06	; 6
    562e:	b0 e0       	ldi	r27, 0x00	; 0
    5630:	ec e1       	ldi	r30, 0x1C	; 28
    5632:	fb e2       	ldi	r31, 0x2B	; 43
    5634:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
    5638:	1e 82       	std	Y+6, r1	; 0x06
    563a:	1d 82       	std	Y+5, r1	; 0x05
    563c:	81 11       	cpse	r24, r1
    563e:	36 c0       	rjmp	.+108    	; 0x56ac <uart_init+0x80>
    5640:	cb 01       	movw	r24, r22
    5642:	ba 01       	movw	r22, r20
    5644:	9e 01       	movw	r18, r28
    5646:	2f 5f       	subi	r18, 0xFF	; 255
    5648:	3f 4f       	sbci	r19, 0xFF	; 255
    564a:	ae 01       	movw	r20, r28
    564c:	4b 5f       	subi	r20, 0xFB	; 251
    564e:	5f 4f       	sbci	r21, 0xFF	; 255
    5650:	53 df       	rcall	.-346    	; 0x54f8 <uart_ubr>
    5652:	f8 94       	cli
    5654:	10 92 8f 19 	sts	0x198F, r1	; 0x80198f <uarts+0x4>
    5658:	10 92 8e 19 	sts	0x198E, r1	; 0x80198e <uarts+0x3>
    565c:	10 92 8b 19 	sts	0x198B, r1	; 0x80198b <uarts>
    5660:	10 92 8c 19 	sts	0x198C, r1	; 0x80198c <uarts+0x1>
    5664:	10 92 8d 19 	sts	0x198D, r1	; 0x80198d <uarts+0x2>
    5668:	10 92 90 19 	sts	0x1990, r1	; 0x801990 <uarts+0x5>
    566c:	78 94       	sei
    566e:	f8 94       	cli
    5670:	58 9a       	sbi	0x0b, 0	; 11
    5672:	59 9a       	sbi	0x0b, 1	; 11
    5674:	50 98       	cbi	0x0a, 0	; 10
    5676:	51 9a       	sbi	0x0a, 1	; 10
    5678:	28 e9       	ldi	r18, 0x98	; 152
    567a:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    567e:	2d 81       	ldd	r18, Y+5	; 0x05
    5680:	3e 81       	ldd	r19, Y+6	; 0x06
    5682:	23 2b       	or	r18, r19
    5684:	19 f0       	breq	.+6      	; 0x568c <uart_init+0x60>
    5686:	22 e0       	ldi	r18, 0x02	; 2
    5688:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    568c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    5690:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    5694:	78 94       	sei
    5696:	6e e0       	ldi	r22, 0x0E	; 14
    5698:	7c e2       	ldi	r23, 0x2C	; 44
    569a:	83 e2       	ldi	r24, 0x23	; 35
    569c:	9c e2       	ldi	r25, 0x2C	; 44
    569e:	0e 94 a8 79 	call	0xf350	; 0xf350 <fdevopen>
    56a2:	69 81       	ldd	r22, Y+1	; 0x01
    56a4:	7a 81       	ldd	r23, Y+2	; 0x02
    56a6:	8b 81       	ldd	r24, Y+3	; 0x03
    56a8:	9c 81       	ldd	r25, Y+4	; 0x04
    56aa:	03 c0       	rjmp	.+6      	; 0x56b2 <uart_init+0x86>
    56ac:	60 e0       	ldi	r22, 0x00	; 0
    56ae:	70 e0       	ldi	r23, 0x00	; 0
    56b0:	cb 01       	movw	r24, r22
    56b2:	26 96       	adiw	r28, 0x06	; 6
    56b4:	e2 e0       	ldi	r30, 0x02	; 2
    56b6:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

000056ba <uart_rx_interrupt>:
    56ba:	cf 93       	push	r28
    56bc:	df 93       	push	r29
    56be:	27 e5       	ldi	r18, 0x57	; 87
    56c0:	82 9f       	mul	r24, r18
    56c2:	c0 01       	movw	r24, r0
    56c4:	11 24       	eor	r1, r1
    56c6:	fc 01       	movw	r30, r24
    56c8:	e5 57       	subi	r30, 0x75	; 117
    56ca:	f6 4e       	sbci	r31, 0xE6	; 230
    56cc:	83 81       	ldd	r24, Z+3	; 0x03
    56ce:	94 81       	ldd	r25, Z+4	; 0x04
    56d0:	80 35       	cpi	r24, 0x50	; 80
    56d2:	91 05       	cpc	r25, r1
    56d4:	7c f4       	brge	.+30     	; 0x56f4 <uart_rx_interrupt+0x3a>
    56d6:	30 81       	ld	r19, Z
    56d8:	21 e0       	ldi	r18, 0x01	; 1
    56da:	23 0f       	add	r18, r19
    56dc:	20 83       	st	Z, r18
    56de:	ef 01       	movw	r28, r30
    56e0:	c3 0f       	add	r28, r19
    56e2:	d1 1d       	adc	r29, r1
    56e4:	6e 83       	std	Y+6, r22	; 0x06
    56e6:	01 96       	adiw	r24, 0x01	; 1
    56e8:	94 83       	std	Z+4, r25	; 0x04
    56ea:	83 83       	std	Z+3, r24	; 0x03
    56ec:	20 35       	cpi	r18, 0x50	; 80
    56ee:	28 f0       	brcs	.+10     	; 0x56fa <uart_rx_interrupt+0x40>
    56f0:	10 82       	st	Z, r1
    56f2:	03 c0       	rjmp	.+6      	; 0x56fa <uart_rx_interrupt+0x40>
    56f4:	85 81       	ldd	r24, Z+5	; 0x05
    56f6:	81 60       	ori	r24, 0x01	; 1
    56f8:	85 83       	std	Z+5, r24	; 0x05
    56fa:	df 91       	pop	r29
    56fc:	cf 91       	pop	r28
    56fe:	08 95       	ret

00005700 <__vector_20>:
    5700:	1f 92       	push	r1
    5702:	0f 92       	push	r0
    5704:	0f b6       	in	r0, 0x3f	; 63
    5706:	0f 92       	push	r0
    5708:	11 24       	eor	r1, r1
    570a:	0b b6       	in	r0, 0x3b	; 59
    570c:	0f 92       	push	r0
    570e:	2f 93       	push	r18
    5710:	3f 93       	push	r19
    5712:	4f 93       	push	r20
    5714:	5f 93       	push	r21
    5716:	6f 93       	push	r22
    5718:	7f 93       	push	r23
    571a:	8f 93       	push	r24
    571c:	9f 93       	push	r25
    571e:	af 93       	push	r26
    5720:	bf 93       	push	r27
    5722:	ef 93       	push	r30
    5724:	ff 93       	push	r31
    5726:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    572a:	80 e0       	ldi	r24, 0x00	; 0
    572c:	c6 df       	rcall	.-116    	; 0x56ba <uart_rx_interrupt>
    572e:	ff 91       	pop	r31
    5730:	ef 91       	pop	r30
    5732:	bf 91       	pop	r27
    5734:	af 91       	pop	r26
    5736:	9f 91       	pop	r25
    5738:	8f 91       	pop	r24
    573a:	7f 91       	pop	r23
    573c:	6f 91       	pop	r22
    573e:	5f 91       	pop	r21
    5740:	4f 91       	pop	r20
    5742:	3f 91       	pop	r19
    5744:	2f 91       	pop	r18
    5746:	0f 90       	pop	r0
    5748:	0b be       	out	0x3b, r0	; 59
    574a:	0f 90       	pop	r0
    574c:	0f be       	out	0x3f, r0	; 63
    574e:	0f 90       	pop	r0
    5750:	1f 90       	pop	r1
    5752:	18 95       	reti

00005754 <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    5754:	81 11       	cpse	r24, r1
    5756:	07 c0       	rjmp	.+14     	; 0x5766 <uart_rx_count+0x12>
        return(EOF);

    cli();
    5758:	f8 94       	cli

    count = uarts[uart].rx_count;
    575a:	80 91 8e 19 	lds	r24, 0x198E	; 0x80198e <uarts+0x3>
    575e:	90 91 8f 19 	lds	r25, 0x198F	; 0x80198f <uarts+0x4>

    sei();
    5762:	78 94       	sei

    return (count );
    5764:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    5766:	8f ef       	ldi	r24, 0xFF	; 255
    5768:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    576a:	08 95       	ret

0000576c <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    576c:	81 11       	cpse	r24, r1
    576e:	21 c0       	rjmp	.+66     	; 0x57b2 <uart_get_tail+0x46>
	{
        return(EOF);
	}

	while(uart_rx_count(uart) < 1)
    5770:	80 e0       	ldi	r24, 0x00	; 0
    5772:	f0 df       	rcall	.-32     	; 0x5754 <uart_rx_count>
    5774:	18 16       	cp	r1, r24
    5776:	19 06       	cpc	r1, r25
    5778:	dc f7       	brge	.-10     	; 0x5770 <uart_get_tail+0x4>
		;

    cli();
    577a:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    577c:	e0 91 8c 19 	lds	r30, 0x198C	; 0x80198c <uarts+0x1>
    5780:	91 e0       	ldi	r25, 0x01	; 1
    5782:	9e 0f       	add	r25, r30
    5784:	90 93 8c 19 	sts	0x198C, r25	; 0x80198c <uarts+0x1>
    5788:	f0 e0       	ldi	r31, 0x00	; 0
    578a:	e5 57       	subi	r30, 0x75	; 117
    578c:	f6 4e       	sbci	r31, 0xE6	; 230
    578e:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    5790:	90 35       	cpi	r25, 0x50	; 80
    5792:	10 f0       	brcs	.+4      	; 0x5798 <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    5794:	10 92 8c 19 	sts	0x198C, r1	; 0x80198c <uarts+0x1>
    uarts[uart].rx_count--;
    5798:	20 91 8e 19 	lds	r18, 0x198E	; 0x80198e <uarts+0x3>
    579c:	30 91 8f 19 	lds	r19, 0x198F	; 0x80198f <uarts+0x4>
    57a0:	21 50       	subi	r18, 0x01	; 1
    57a2:	31 09       	sbc	r19, r1
    57a4:	30 93 8f 19 	sts	0x198F, r19	; 0x80198f <uarts+0x4>
    57a8:	20 93 8e 19 	sts	0x198E, r18	; 0x80198e <uarts+0x3>
    sei();
    57ac:	78 94       	sei

    return (c & 0xff);
    57ae:	90 e0       	ldi	r25, 0x00	; 0
    57b0:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
	{
        return(EOF);
    57b2:	8f ef       	ldi	r24, 0xFF	; 255
    57b4:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    57b6:	08 95       	ret

000057b8 <uart_rx_byte>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    57b8:	d9 df       	rcall	.-78     	; 0x576c <uart_get_tail>
    57ba:	99 27       	eor	r25, r25
    57bc:	08 95       	ret

000057be <uart_tx_byte>:
    57be:	61 11       	cpse	r22, r1
    57c0:	09 c0       	rjmp	.+18     	; 0x57d4 <uart_tx_byte+0x16>
    57c2:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    57c6:	25 ff       	sbrs	r18, 5
    57c8:	fc cf       	rjmp	.-8      	; 0x57c2 <uart_tx_byte+0x4>
    57ca:	28 2f       	mov	r18, r24
    57cc:	2f 77       	andi	r18, 0x7F	; 127
    57ce:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    57d2:	08 95       	ret
    57d4:	61 30       	cpi	r22, 0x01	; 1
    57d6:	49 f4       	brne	.+18     	; 0x57ea <uart_tx_byte+0x2c>
    57d8:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    57dc:	25 ff       	sbrs	r18, 5
    57de:	fc cf       	rjmp	.-8      	; 0x57d8 <uart_tx_byte+0x1a>
    57e0:	28 2f       	mov	r18, r24
    57e2:	2f 77       	andi	r18, 0x7F	; 127
    57e4:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    57e8:	08 95       	ret
    57ea:	8f ef       	ldi	r24, 0xFF	; 255
    57ec:	9f ef       	ldi	r25, 0xFF	; 255
    57ee:	08 95       	ret

000057f0 <uart_getchar>:
    57f0:	cf 93       	push	r28
    57f2:	81 11       	cpse	r24, r1
    57f4:	0f c0       	rjmp	.+30     	; 0x5814 <uart_getchar+0x24>
    57f6:	e0 df       	rcall	.-64     	; 0x57b8 <uart_rx_byte>
    57f8:	c8 2f       	mov	r28, r24
    57fa:	60 e0       	ldi	r22, 0x00	; 0
    57fc:	90 e0       	ldi	r25, 0x00	; 0
    57fe:	df df       	rcall	.-66     	; 0x57be <uart_tx_byte>
    5800:	cd 30       	cpi	r28, 0x0D	; 13
    5802:	29 f4       	brne	.+10     	; 0x580e <uart_getchar+0x1e>
    5804:	60 e0       	ldi	r22, 0x00	; 0
    5806:	8a e0       	ldi	r24, 0x0A	; 10
    5808:	90 e0       	ldi	r25, 0x00	; 0
    580a:	d9 df       	rcall	.-78     	; 0x57be <uart_tx_byte>
    580c:	ca e0       	ldi	r28, 0x0A	; 10
    580e:	8c 2f       	mov	r24, r28
    5810:	90 e0       	ldi	r25, 0x00	; 0
    5812:	02 c0       	rjmp	.+4      	; 0x5818 <uart_getchar+0x28>
    5814:	8f ef       	ldi	r24, 0xFF	; 255
    5816:	9f ef       	ldi	r25, 0xFF	; 255
    5818:	cf 91       	pop	r28
    581a:	08 95       	ret

0000581c <uart0_getchar>:
    581c:	80 e0       	ldi	r24, 0x00	; 0
    581e:	e8 cf       	rjmp	.-48     	; 0x57f0 <uart_getchar>
    5820:	08 95       	ret

00005822 <uart_putchar>:
    5822:	1f 93       	push	r17
    5824:	cf 93       	push	r28
    5826:	df 93       	push	r29
    5828:	ec 01       	movw	r28, r24
    582a:	16 2f       	mov	r17, r22
    582c:	c8 df       	rcall	.-112    	; 0x57be <uart_tx_byte>
    582e:	ca 30       	cpi	r28, 0x0A	; 10
    5830:	d1 05       	cpc	r29, r1
    5832:	21 f4       	brne	.+8      	; 0x583c <uart_putchar+0x1a>
    5834:	61 2f       	mov	r22, r17
    5836:	8d e0       	ldi	r24, 0x0D	; 13
    5838:	90 e0       	ldi	r25, 0x00	; 0
    583a:	c1 df       	rcall	.-126    	; 0x57be <uart_tx_byte>
    583c:	ce 01       	movw	r24, r28
    583e:	df 91       	pop	r29
    5840:	cf 91       	pop	r28
    5842:	1f 91       	pop	r17
    5844:	08 95       	ret

00005846 <uart0_putchar>:
    5846:	cf 93       	push	r28
    5848:	df 93       	push	r29
    584a:	ec 01       	movw	r28, r24
    584c:	60 e0       	ldi	r22, 0x00	; 0
    584e:	70 e0       	ldi	r23, 0x00	; 0
    5850:	e8 df       	rcall	.-48     	; 0x5822 <uart_putchar>
    5852:	ce 01       	movw	r24, r28
    5854:	df 91       	pop	r29
    5856:	cf 91       	pop	r28
    5858:	08 95       	ret

0000585a <uart_keyhit>:
    585a:	7c cf       	rjmp	.-264    	; 0x5754 <uart_rx_count>
    585c:	08 95       	ret

0000585e <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    585e:	cf 92       	push	r12
    5860:	df 92       	push	r13
    5862:	ef 92       	push	r14
    5864:	ff 92       	push	r15
    5866:	6b 01       	movw	r12, r22
    5868:	7c 01       	movw	r14, r24
    586a:	80 91 12 17 	lds	r24, 0x1712	; 0x801712 <SPI0_Speed_value>
    586e:	90 91 13 17 	lds	r25, 0x1713	; 0x801713 <SPI0_Speed_value+0x1>
    5872:	a0 91 14 17 	lds	r26, 0x1714	; 0x801714 <SPI0_Speed_value+0x2>
    5876:	b0 91 15 17 	lds	r27, 0x1715	; 0x801715 <SPI0_Speed_value+0x3>
    587a:	8c 15       	cp	r24, r12
    587c:	9d 05       	cpc	r25, r13
    587e:	ae 05       	cpc	r26, r14
    5880:	bf 05       	cpc	r27, r15
    5882:	09 f4       	brne	.+2      	; 0x5886 <SPI0_Speed+0x28>
    5884:	4e c0       	rjmp	.+156    	; 0x5922 <SPI0_Speed+0xc4>
    5886:	60 e0       	ldi	r22, 0x00	; 0
    5888:	7d e2       	ldi	r23, 0x2D	; 45
    588a:	81 e3       	ldi	r24, 0x31	; 49
    588c:	91 e0       	ldi	r25, 0x01	; 1
    588e:	a7 01       	movw	r20, r14
    5890:	96 01       	movw	r18, r12
    5892:	0e 94 04 e4 	call	0x1c808	; 0x1c808 <__udivmodsi4>
    5896:	20 38       	cpi	r18, 0x80	; 128
    5898:	31 05       	cpc	r19, r1
    589a:	41 05       	cpc	r20, r1
    589c:	51 05       	cpc	r21, r1
    589e:	28 f4       	brcc	.+10     	; 0x58aa <SPI0_Speed+0x4c>
    58a0:	20 34       	cpi	r18, 0x40	; 64
    58a2:	31 05       	cpc	r19, r1
    58a4:	41 05       	cpc	r20, r1
    58a6:	51 05       	cpc	r21, r1
    58a8:	30 f0       	brcs	.+12     	; 0x58b6 <SPI0_Speed+0x58>
    58aa:	8d b5       	in	r24, 0x2d	; 45
    58ac:	8e 7f       	andi	r24, 0xFE	; 254
    58ae:	8d bd       	out	0x2d, r24	; 45
    58b0:	8c b5       	in	r24, 0x2c	; 44
    58b2:	82 60       	ori	r24, 0x02	; 2
    58b4:	1b c0       	rjmp	.+54     	; 0x58ec <SPI0_Speed+0x8e>
    58b6:	8d b5       	in	r24, 0x2d	; 45
    58b8:	20 32       	cpi	r18, 0x20	; 32
    58ba:	31 05       	cpc	r19, r1
    58bc:	41 05       	cpc	r20, r1
    58be:	51 05       	cpc	r21, r1
    58c0:	28 f0       	brcs	.+10     	; 0x58cc <SPI0_Speed+0x6e>
    58c2:	81 60       	ori	r24, 0x01	; 1
    58c4:	8d bd       	out	0x2d, r24	; 45
    58c6:	8c b5       	in	r24, 0x2c	; 44
    58c8:	82 60       	ori	r24, 0x02	; 2
    58ca:	1f c0       	rjmp	.+62     	; 0x590a <SPI0_Speed+0xac>
    58cc:	20 31       	cpi	r18, 0x10	; 16
    58ce:	31 05       	cpc	r19, r1
    58d0:	41 05       	cpc	r20, r1
    58d2:	51 05       	cpc	r21, r1
    58d4:	10 f0       	brcs	.+4      	; 0x58da <SPI0_Speed+0x7c>
    58d6:	8e 7f       	andi	r24, 0xFE	; 254
    58d8:	06 c0       	rjmp	.+12     	; 0x58e6 <SPI0_Speed+0x88>
    58da:	28 30       	cpi	r18, 0x08	; 8
    58dc:	31 05       	cpc	r19, r1
    58de:	41 05       	cpc	r20, r1
    58e0:	51 05       	cpc	r21, r1
    58e2:	40 f0       	brcs	.+16     	; 0x58f4 <SPI0_Speed+0x96>
    58e4:	81 60       	ori	r24, 0x01	; 1
    58e6:	8d bd       	out	0x2d, r24	; 45
    58e8:	8c b5       	in	r24, 0x2c	; 44
    58ea:	8d 7f       	andi	r24, 0xFD	; 253
    58ec:	8c bd       	out	0x2c, r24	; 44
    58ee:	8c b5       	in	r24, 0x2c	; 44
    58f0:	81 60       	ori	r24, 0x01	; 1
    58f2:	0e c0       	rjmp	.+28     	; 0x5910 <SPI0_Speed+0xb2>
    58f4:	24 30       	cpi	r18, 0x04	; 4
    58f6:	31 05       	cpc	r19, r1
    58f8:	41 05       	cpc	r20, r1
    58fa:	51 05       	cpc	r21, r1
    58fc:	10 f0       	brcs	.+4      	; 0x5902 <SPI0_Speed+0xa4>
    58fe:	8e 7f       	andi	r24, 0xFE	; 254
    5900:	01 c0       	rjmp	.+2      	; 0x5904 <SPI0_Speed+0xa6>
    5902:	81 60       	ori	r24, 0x01	; 1
    5904:	8d bd       	out	0x2d, r24	; 45
    5906:	8c b5       	in	r24, 0x2c	; 44
    5908:	8d 7f       	andi	r24, 0xFD	; 253
    590a:	8c bd       	out	0x2c, r24	; 44
    590c:	8c b5       	in	r24, 0x2c	; 44
    590e:	8e 7f       	andi	r24, 0xFE	; 254
    5910:	8c bd       	out	0x2c, r24	; 44
    5912:	c0 92 12 17 	sts	0x1712, r12	; 0x801712 <SPI0_Speed_value>
    5916:	d0 92 13 17 	sts	0x1713, r13	; 0x801713 <SPI0_Speed_value+0x1>
    591a:	e0 92 14 17 	sts	0x1714, r14	; 0x801714 <SPI0_Speed_value+0x2>
    591e:	f0 92 15 17 	sts	0x1715, r15	; 0x801715 <SPI0_Speed_value+0x3>
    5922:	ff 90       	pop	r15
    5924:	ef 90       	pop	r14
    5926:	df 90       	pop	r13
    5928:	cf 90       	pop	r12
    592a:	08 95       	ret

0000592c <SPI0_Mode>:
    592c:	cf 93       	push	r28
    592e:	df 93       	push	r29
    5930:	00 d0       	rcall	.+0      	; 0x5932 <SPI0_Mode+0x6>
    5932:	00 d0       	rcall	.+0      	; 0x5934 <SPI0_Mode+0x8>
    5934:	1f 92       	push	r1
    5936:	ec 01       	movw	r28, r24
    5938:	81 30       	cpi	r24, 0x01	; 1
    593a:	91 05       	cpc	r25, r1
    593c:	71 f0       	breq	.+28     	; 0x595a <SPI0_Mode+0x2e>
    593e:	2c f4       	brge	.+10     	; 0x594a <SPI0_Mode+0x1e>
    5940:	89 2b       	or	r24, r25
    5942:	c1 f4       	brne	.+48     	; 0x5974 <SPI0_Mode+0x48>
    5944:	8c b5       	in	r24, 0x2c	; 44
    5946:	87 7f       	andi	r24, 0xF7	; 247
    5948:	11 c0       	rjmp	.+34     	; 0x596c <SPI0_Mode+0x40>
    594a:	82 30       	cpi	r24, 0x02	; 2
    594c:	91 05       	cpc	r25, r1
    594e:	61 f0       	breq	.+24     	; 0x5968 <SPI0_Mode+0x3c>
    5950:	03 97       	sbiw	r24, 0x03	; 3
    5952:	81 f4       	brne	.+32     	; 0x5974 <SPI0_Mode+0x48>
    5954:	8c b5       	in	r24, 0x2c	; 44
    5956:	88 60       	ori	r24, 0x08	; 8
    5958:	02 c0       	rjmp	.+4      	; 0x595e <SPI0_Mode+0x32>
    595a:	8c b5       	in	r24, 0x2c	; 44
    595c:	87 7f       	andi	r24, 0xF7	; 247
    595e:	8c bd       	out	0x2c, r24	; 44
    5960:	8c b5       	in	r24, 0x2c	; 44
    5962:	84 60       	ori	r24, 0x04	; 4
    5964:	8c bd       	out	0x2c, r24	; 44
    5966:	12 c0       	rjmp	.+36     	; 0x598c <SPI0_Mode+0x60>
    5968:	8c b5       	in	r24, 0x2c	; 44
    596a:	88 60       	ori	r24, 0x08	; 8
    596c:	8c bd       	out	0x2c, r24	; 44
    596e:	8c b5       	in	r24, 0x2c	; 44
    5970:	8b 7f       	andi	r24, 0xFB	; 251
    5972:	f8 cf       	rjmp	.-16     	; 0x5964 <SPI0_Mode+0x38>
    5974:	ed b7       	in	r30, 0x3d	; 61
    5976:	fe b7       	in	r31, 0x3e	; 62
    5978:	d5 83       	std	Z+5, r29	; 0x05
    597a:	c4 83       	std	Z+4, r28	; 0x04
    597c:	8a e2       	ldi	r24, 0x2A	; 42
    597e:	94 e0       	ldi	r25, 0x04	; 4
    5980:	a0 e0       	ldi	r26, 0x00	; 0
    5982:	81 83       	std	Z+1, r24	; 0x01
    5984:	92 83       	std	Z+2, r25	; 0x02
    5986:	a3 83       	std	Z+3, r26	; 0x03
    5988:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    598c:	d0 93 11 17 	sts	0x1711, r29	; 0x801711 <__data_end+0x1>
    5990:	c0 93 10 17 	sts	0x1710, r28	; 0x801710 <__data_end>
    5994:	cd b7       	in	r28, 0x3d	; 61
    5996:	de b7       	in	r29, 0x3e	; 62
    5998:	25 96       	adiw	r28, 0x05	; 5
    599a:	e2 e0       	ldi	r30, 0x02	; 2
    599c:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

000059a0 <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    59a0:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    59a2:	0d b4       	in	r0, 0x2d	; 45
    59a4:	07 fe       	sbrs	r0, 7
    59a6:	fd cf       	rjmp	.-6      	; 0x59a2 <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    59a8:	8e b5       	in	r24, 0x2e	; 46
}
    59aa:	08 95       	ret

000059ac <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    59ac:	cf 92       	push	r12
    59ae:	df 92       	push	r13
    59b0:	ef 92       	push	r14
    59b2:	ff 92       	push	r15
    59b4:	cf 93       	push	r28
    59b6:	df 93       	push	r29
    59b8:	1f 92       	push	r1
    59ba:	cd b7       	in	r28, 0x3d	; 61
    59bc:	de b7       	in	r29, 0x3e	; 62
    59be:	6b 01       	movw	r12, r22
    59c0:	7c 01       	movw	r14, r24
	printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
	printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
	printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

	SPCR = 0;				// Clear SPCR in case we are not called after RESET
    59c2:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);       // SCK Output
    59c4:	2f 9a       	sbi	0x05, 7	; 5
    59c6:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                                  // MOSI Output
    59c8:	2d 9a       	sbi	0x05, 5	; 5
    59ca:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);   // MISO Input, no pull-up
    59cc:	26 98       	cbi	0x04, 6	; 4

	// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
	GPIO_PIN_LOW(SS); 		// SS Output must be HI prevent slave mode from getting set while initializing
    59ce:	2c 98       	cbi	0x05, 4	; 5
    59d0:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);    // Master Mode
    59d2:	8c b5       	in	r24, 0x2c	; 44
    59d4:	80 61       	ori	r24, 0x10	; 16
    59d6:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);     // Enable SPI
    59d8:	8c b5       	in	r24, 0x2c	; 44
    59da:	80 64       	ori	r24, 0x40	; 64
    59dc:	8c bd       	out	0x2c, r24	; 44

	// SPI Clear any pending interrupt flags
	D = SPSR;
    59de:	8d b5       	in	r24, 0x2d	; 45
    59e0:	89 83       	std	Y+1, r24	; 0x01
	D = SPDR;
    59e2:	8e b5       	in	r24, 0x2e	; 46
    59e4:	89 83       	std	Y+1, r24	; 0x01

	/// Set SPI clock mode 0 
    ///  SPI Mode     CPOL    CPHA            Sample
    ///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    59e6:	80 e0       	ldi	r24, 0x00	; 0
    59e8:	90 e0       	ldi	r25, 0x00	; 0
    59ea:	a0 df       	rcall	.-192    	; 0x592c <SPI0_Mode>

	// Set SPI clock speed
    SPI0_Speed(speed);
    59ec:	c7 01       	movw	r24, r14
    59ee:	b6 01       	movw	r22, r12

    SPI0_TXRX_Byte(0xff);	// Send dummy 0xFF
    59f0:	36 df       	rcall	.-404    	; 0x585e <SPI0_Speed>
    59f2:	8f ef       	ldi	r24, 0xFF	; 255
    59f4:	d5 df       	rcall	.-86     	; 0x59a0 <SPI0_TXRX_Byte>
	SPI0_Init_state = 1;

}
    59f6:	0f 90       	pop	r0
    59f8:	df 91       	pop	r29
    59fa:	cf 91       	pop	r28
    59fc:	ff 90       	pop	r15
    59fe:	ef 90       	pop	r14
    5a00:	df 90       	pop	r13
    5a02:	cf 90       	pop	r12
    5a04:	08 95       	ret

00005a06 <SPI0_TX>:
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    5a06:	0f 93       	push	r16
    5a08:	1f 93       	push	r17
    5a0a:	cf 93       	push	r28
    5a0c:	df 93       	push	r29
    5a0e:	8c 01       	movw	r16, r24
    5a10:	eb 01       	movw	r28, r22

    while(count > 0)
    5a12:	1c 16       	cp	r1, r28
    5a14:	1d 06       	cpc	r1, r29
    5a16:	34 f4       	brge	.+12     	; 0x5a24 <SPI0_TX+0x1e>
    {
		SPI0_TXRX_Byte(*data);
    5a18:	f8 01       	movw	r30, r16
    5a1a:	81 91       	ld	r24, Z+
    5a1c:	8f 01       	movw	r16, r30
    5a1e:	c0 df       	rcall	.-128    	; 0x59a0 <SPI0_TXRX_Byte>
		++data;
		--count;
    5a20:	21 97       	sbiw	r28, 0x01	; 1
    5a22:	f7 cf       	rjmp	.-18     	; 0x5a12 <SPI0_TX+0xc>
	}
}
    5a24:	df 91       	pop	r29
    5a26:	cf 91       	pop	r28
    5a28:	1f 91       	pop	r17
    5a2a:	0f 91       	pop	r16
    5a2c:	08 95       	ret

00005a2e <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    5a2e:	0f 93       	push	r16
    5a30:	1f 93       	push	r17
    5a32:	cf 93       	push	r28
    5a34:	df 93       	push	r29
    5a36:	8c 01       	movw	r16, r24
    5a38:	eb 01       	movw	r28, r22

    while(count > 0)
    5a3a:	1c 16       	cp	r1, r28
    5a3c:	1d 06       	cpc	r1, r29
    5a3e:	44 f4       	brge	.+16     	; 0x5a50 <SPI0_TXRX+0x22>
    {
		*data = SPI0_TXRX_Byte(*data);
    5a40:	f8 01       	movw	r30, r16
    5a42:	80 81       	ld	r24, Z
    5a44:	ad df       	rcall	.-166    	; 0x59a0 <SPI0_TXRX_Byte>
    5a46:	f8 01       	movw	r30, r16
    5a48:	81 93       	st	Z+, r24
    5a4a:	8f 01       	movw	r16, r30
		++data;
		--count;
    5a4c:	21 97       	sbiw	r28, 0x01	; 1
    5a4e:	f5 cf       	rjmp	.-22     	; 0x5a3a <SPI0_TXRX+0xc>
	}
}
    5a50:	df 91       	pop	r29
    5a52:	cf 91       	pop	r28
    5a54:	1f 91       	pop	r17
    5a56:	0f 91       	pop	r16
    5a58:	08 95       	ret

00005a5a <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    5a5a:	0f 93       	push	r16
    5a5c:	1f 93       	push	r17
    5a5e:	cf 93       	push	r28
    5a60:	df 93       	push	r29
    5a62:	8c 01       	movw	r16, r24
    5a64:	eb 01       	movw	r28, r22

    while(count > 0)
    5a66:	1c 16       	cp	r1, r28
    5a68:	1d 06       	cpc	r1, r29
    5a6a:	3c f4       	brge	.+14     	; 0x5a7a <SPI0_RX+0x20>
    {
		*data = SPI0_TXRX_Byte(0xff);
    5a6c:	8f ef       	ldi	r24, 0xFF	; 255
    5a6e:	98 df       	rcall	.-208    	; 0x59a0 <SPI0_TXRX_Byte>
    5a70:	f8 01       	movw	r30, r16
    5a72:	81 93       	st	Z+, r24
    5a74:	8f 01       	movw	r16, r30
		++data;
		--count;
    5a76:	21 97       	sbiw	r28, 0x01	; 1
    5a78:	f6 cf       	rjmp	.-20     	; 0x5a66 <SPI0_RX+0xc>
	}
}
    5a7a:	df 91       	pop	r29
    5a7c:	cf 91       	pop	r28
    5a7e:	1f 91       	pop	r17
    5a80:	0f 91       	pop	r16
    5a82:	08 95       	ret

00005a84 <TWI_Init>:
///
///@return void.
void TWI_Init(const uint8_t Prescale, const uint8_t BitLength)
{

    GPIO_PIN_LATCH_HI(SCL);                   // Pull Up on
    5a84:	40 9a       	sbi	0x08, 0	; 8
    GPIO_PIN_LATCH_HI(SDA);                   // Pull Up on
    5a86:	41 9a       	sbi	0x08, 1	; 8

    BIT_SET(TWCR,TWEN);
    5a88:	ec eb       	ldi	r30, 0xBC	; 188
    5a8a:	f0 e0       	ldi	r31, 0x00	; 0
    5a8c:	90 81       	ld	r25, Z
    5a8e:	94 60       	ori	r25, 0x04	; 4
    5a90:	90 83       	st	Z, r25

    TWSR  = Prescale;
    5a92:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR  = BitLength;
    5a96:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5a9a:	08 95       	ret

00005a9c <TWI_StopTransmission>:


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5a9c:	84 e9       	ldi	r24, 0x94	; 148
    5a9e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5aa2:	08 95       	ret

00005aa4 <TWI_StartTransmission>:
    for (;;)
    {
        bool     BusCaptured = false;
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5aa4:	94 ea       	ldi	r25, 0xA4	; 164
    5aa6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5aaa:	24 e6       	ldi	r18, 0x64	; 100
    5aac:	62 9f       	mul	r22, r18
    5aae:	b0 01       	movw	r22, r0
    5ab0:	11 24       	eor	r1, r1
    5ab2:	61 50       	subi	r22, 0x01	; 1
    5ab4:	71 09       	sbc	r23, r1

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5ab6:	9b 01       	movw	r18, r22
///@return TWI error value on fail.
uint8_t TWI_StartTransmission(const uint8_t SlaveAddress, const uint8_t TimeoutMS)
{
    for (;;)
    {
        bool     BusCaptured = false;
    5ab8:	40 e0       	ldi	r20, 0x00	; 0
    5aba:	50 e0       	ldi	r21, 0x00	; 0
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5abc:	e4 ea       	ldi	r30, 0xA4	; 164
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5abe:	2f 3f       	cpi	r18, 0xFF	; 255
    5ac0:	9f ef       	ldi	r25, 0xFF	; 255
    5ac2:	39 07       	cpc	r19, r25
    5ac4:	41 f1       	breq	.+80     	; 0x5b16 <TWI_StartTransmission+0x72>
    5ac6:	41 15       	cp	r20, r1
    5ac8:	51 05       	cpc	r21, r1
    5aca:	f1 f4       	brne	.+60     	; 0x5b08 <TWI_StartTransmission+0x64>
        {
            if (TWCR & (1 << TWINT))
    5acc:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5ad0:	97 ff       	sbrs	r25, 7
    5ad2:	13 c0       	rjmp	.+38     	; 0x5afa <TWI_StartTransmission+0x56>
            {
                switch (TWSR & TW_STATUS_MASK)
    5ad4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5ad8:	98 7f       	andi	r25, 0xF8	; 248
    5ada:	90 31       	cpi	r25, 0x10	; 16
    5adc:	61 f0       	breq	.+24     	; 0x5af6 <TWI_StartTransmission+0x52>
    5ade:	98 33       	cpi	r25, 0x38	; 56
    5ae0:	39 f0       	breq	.+14     	; 0x5af0 <TWI_StartTransmission+0x4c>
    5ae2:	98 30       	cpi	r25, 0x08	; 8
    5ae4:	41 f0       	breq	.+16     	; 0x5af6 <TWI_StartTransmission+0x52>
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
                        continue;
                    default:
                        TWCR = (1 << TWEN);
    5ae6:	84 e0       	ldi	r24, 0x04	; 4
    5ae8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        return TWI_ERROR_BusFault;
    5aec:	81 e0       	ldi	r24, 0x01	; 1
    5aee:	08 95       	ret
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5af0:	e0 93 bc 00 	sts	0x00BC, r30	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        continue;
    5af4:	06 c0       	rjmp	.+12     	; 0x5b02 <TWI_StartTransmission+0x5e>
            {
                switch (TWSR & TW_STATUS_MASK)
                {
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
    5af6:	41 e0       	ldi	r20, 0x01	; 1
    5af8:	50 e0       	ldi	r21, 0x00	; 0
    5afa:	92 e4       	ldi	r25, 0x42	; 66
    5afc:	9a 95       	dec	r25
    5afe:	f1 f7       	brne	.-4      	; 0x5afc <TWI_StartTransmission+0x58>
    5b00:	00 c0       	rjmp	.+0      	; 0x5b02 <TWI_StartTransmission+0x5e>
    5b02:	21 50       	subi	r18, 0x01	; 1
    5b04:	31 09       	sbc	r19, r1
    5b06:	db cf       	rjmp	.-74     	; 0x5abe <TWI_StartTransmission+0x1a>
            }

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5b08:	23 2b       	or	r18, r19
    5b0a:	29 f4       	brne	.+10     	; 0x5b16 <TWI_StartTransmission+0x72>
        {
            TWCR = (1 << TWEN);
    5b0c:	84 e0       	ldi	r24, 0x04	; 4
    5b0e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            return TWI_ERROR_BusCaptureTimeout;
    5b12:	82 e0       	ldi	r24, 0x02	; 2
    5b14:	08 95       	ret
        }

        TWDR = SlaveAddress;
    5b16:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = ((1 << TWINT) | (1 << TWEN));
    5b1a:	84 e8       	ldi	r24, 0x84	; 132
    5b1c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining--)
    5b20:	6f 3f       	cpi	r22, 0xFF	; 255
    5b22:	8f ef       	ldi	r24, 0xFF	; 255
    5b24:	78 07       	cpc	r23, r24
    5b26:	71 f0       	breq	.+28     	; 0x5b44 <TWI_StartTransmission+0xa0>
        {
            if (TWCR & (1 << TWINT))
    5b28:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b2c:	cb 01       	movw	r24, r22
    5b2e:	01 97       	sbiw	r24, 0x01	; 1
    5b30:	27 fd       	sbrc	r18, 7
    5b32:	06 c0       	rjmp	.+12     	; 0x5b40 <TWI_StartTransmission+0x9c>
    5b34:	22 e4       	ldi	r18, 0x42	; 66
    5b36:	2a 95       	dec	r18
    5b38:	f1 f7       	brne	.-4      	; 0x5b36 <TWI_StartTransmission+0x92>
    5b3a:	00 c0       	rjmp	.+0      	; 0x5b3c <TWI_StartTransmission+0x98>
    5b3c:	bc 01       	movw	r22, r24
    5b3e:	f0 cf       	rjmp	.-32     	; 0x5b20 <TWI_StartTransmission+0x7c>
                break;

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5b40:	67 2b       	or	r22, r23
    5b42:	61 f0       	breq	.+24     	; 0x5b5c <TWI_StartTransmission+0xb8>
            return TWI_ERROR_SlaveResponseTimeout;

        switch (TWSR & TW_STATUS_MASK)
    5b44:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b48:	88 7f       	andi	r24, 0xF8	; 248
    5b4a:	88 31       	cpi	r24, 0x18	; 24
    5b4c:	49 f0       	breq	.+18     	; 0x5b60 <TWI_StartTransmission+0xbc>
    5b4e:	80 34       	cpi	r24, 0x40	; 64
    5b50:	39 f0       	breq	.+14     	; 0x5b60 <TWI_StartTransmission+0xbc>
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5b52:	84 e9       	ldi	r24, 0x94	; 148
    5b54:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                return TWI_ERROR_SlaveNotReady;
    5b58:	84 e0       	ldi	r24, 0x04	; 4
    5b5a:	08 95       	ret

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
            return TWI_ERROR_SlaveResponseTimeout;
    5b5c:	83 e0       	ldi	r24, 0x03	; 3
    5b5e:	08 95       	ret

        switch (TWSR & TW_STATUS_MASK)
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
    5b60:	80 e0       	ldi	r24, 0x00	; 0
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
                return TWI_ERROR_SlaveNotReady;
        }
    }
}
    5b62:	08 95       	ret

00005b64 <TWI_SendByte>:
///
///@return 1 if Acknowledge.
///@return 0 on fail.
bool TWI_SendByte(const uint8_t Byte)
{
    TWDR = Byte;
    5b64:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = ((1 << TWINT) | (1 << TWEN));
    5b68:	84 e8       	ldi	r24, 0x84	; 132
    5b6a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!(TWCR & (1 << TWINT)));
    5b6e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b72:	87 ff       	sbrs	r24, 7
    5b74:	fc cf       	rjmp	.-8      	; 0x5b6e <TWI_SendByte+0xa>

    return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    5b76:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b7a:	98 7f       	andi	r25, 0xF8	; 248
    5b7c:	21 e0       	ldi	r18, 0x01	; 1
    5b7e:	30 e0       	ldi	r19, 0x00	; 0
    5b80:	98 32       	cpi	r25, 0x28	; 40
    5b82:	11 f0       	breq	.+4      	; 0x5b88 <TWI_SendByte+0x24>
    5b84:	20 e0       	ldi	r18, 0x00	; 0
    5b86:	30 e0       	ldi	r19, 0x00	; 0
}
    5b88:	c9 01       	movw	r24, r18
    5b8a:	08 95       	ret

00005b8c <TWI_ReceiveByte>:


bool TWI_ReceiveByte(uint8_t* const Byte,
const bool LastByte)
{
    5b8c:	fc 01       	movw	r30, r24
    uint8_t TWCRMask;

    if (LastByte)
    5b8e:	61 15       	cp	r22, r1
    5b90:	71 05       	cpc	r23, r1
    5b92:	11 f4       	brne	.+4      	; 0x5b98 <TWI_ReceiveByte+0xc>
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
    5b94:	94 ec       	ldi	r25, 0xC4	; 196
    5b96:	01 c0       	rjmp	.+2      	; 0x5b9a <TWI_ReceiveByte+0xe>
const bool LastByte)
{
    uint8_t TWCRMask;

    if (LastByte)
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    5b98:	94 e8       	ldi	r25, 0x84	; 132
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));

    TWCR = TWCRMask;
    5b9a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!BIT_TST(TWCR, TWINT))
    5b9e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5ba2:	87 ff       	sbrs	r24, 7
    5ba4:	fc cf       	rjmp	.-8      	; 0x5b9e <TWI_ReceiveByte+0x12>
        ;
    *Byte = TWDR;
    5ba6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5baa:	80 83       	st	Z, r24

    uint8_t Status = (TWSR & TW_STATUS_MASK);
    5bac:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5bb0:	28 7f       	andi	r18, 0xF8	; 248

    return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
    5bb2:	81 e0       	ldi	r24, 0x01	; 1
    5bb4:	90 e0       	ldi	r25, 0x00	; 0
    5bb6:	67 2b       	or	r22, r23
    5bb8:	19 f0       	breq	.+6      	; 0x5bc0 <TWI_ReceiveByte+0x34>
    5bba:	28 35       	cpi	r18, 0x58	; 88
    5bbc:	19 f4       	brne	.+6      	; 0x5bc4 <TWI_ReceiveByte+0x38>
    5bbe:	03 c0       	rjmp	.+6      	; 0x5bc6 <TWI_ReceiveByte+0x3a>
    5bc0:	20 35       	cpi	r18, 0x50	; 80
    5bc2:	09 f0       	breq	.+2      	; 0x5bc6 <TWI_ReceiveByte+0x3a>
    5bc4:	80 e0       	ldi	r24, 0x00	; 0
}
    5bc6:	08 95       	ret

00005bc8 <TWI_ReadPacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
uint8_t* Buffer,
uint8_t Length)
{
    5bc8:	a0 e0       	ldi	r26, 0x00	; 0
    5bca:	b0 e0       	ldi	r27, 0x00	; 0
    5bcc:	ea ee       	ldi	r30, 0xEA	; 234
    5bce:	fd e2       	ldi	r31, 0x2D	; 45
    5bd0:	0c 94 8d e4 	jmp	0x1c91a	; 0x1c91a <__prologue_saves__+0xe>
    5bd4:	f8 2e       	mov	r15, r24
    5bd6:	b6 2e       	mov	r11, r22
    5bd8:	94 2e       	mov	r9, r20
    5bda:	a5 2e       	mov	r10, r21
    5bdc:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5bde:	8e 7f       	andi	r24, 0xFE	; 254
    5be0:	61 df       	rcall	.-318    	; 0x5aa4 <TWI_StartTransmission>
    5be2:	d8 2f       	mov	r29, r24
    5be4:	81 11       	cpse	r24, r1
    5be6:	2b c0       	rjmp	.+86     	; 0x5c3e <TWI_ReadPacket+0x76>
    5be8:	c9 2c       	mov	r12, r9
    5bea:	da 2c       	mov	r13, r10
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5bec:	cc 23       	and	r28, r28
    5bee:	39 f0       	breq	.+14     	; 0x5bfe <TWI_ReadPacket+0x36>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5bf0:	f6 01       	movw	r30, r12
    5bf2:	81 91       	ld	r24, Z+
    5bf4:	6f 01       	movw	r12, r30
    5bf6:	b6 df       	rcall	.-148    	; 0x5b64 <TWI_SendByte>
    5bf8:	c1 50       	subi	r28, 0x01	; 1
    5bfa:	89 2b       	or	r24, r25
    5bfc:	b9 f7       	brne	.-18     	; 0x5bec <TWI_ReadPacket+0x24>
                ErrorCode = TWI_ERROR_SlaveNAK;
                break;
            }
        }

        if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
    5bfe:	6b 2d       	mov	r22, r11
    5c00:	8f 2d       	mov	r24, r15
    5c02:	81 60       	ori	r24, 0x01	; 1
    5c04:	4f df       	rcall	.-354    	; 0x5aa4 <TWI_StartTransmission>
    5c06:	d8 2f       	mov	r29, r24
    5c08:	81 11       	cpse	r24, r1
    5c0a:	19 c0       	rjmp	.+50     	; 0x5c3e <TWI_ReadPacket+0x76>
    5c0c:	cf ef       	ldi	r28, 0xFF	; 255
    5c0e:	ce 0d       	add	r28, r14
            TimeoutMS)) == TWI_ERROR_NoError)
        {
            while (Length--)
    5c10:	cf 3f       	cpi	r28, 0xFF	; 255
    5c12:	91 f0       	breq	.+36     	; 0x5c38 <TWI_ReadPacket+0x70>
            {
                if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
    5c14:	78 01       	movw	r14, r16
    5c16:	ff ef       	ldi	r31, 0xFF	; 255
    5c18:	ef 1a       	sub	r14, r31
    5c1a:	ff 0a       	sbc	r15, r31
    5c1c:	61 e0       	ldi	r22, 0x01	; 1
    5c1e:	70 e0       	ldi	r23, 0x00	; 0
    5c20:	cc 23       	and	r28, r28
    5c22:	11 f0       	breq	.+4      	; 0x5c28 <TWI_ReadPacket+0x60>
    5c24:	60 e0       	ldi	r22, 0x00	; 0
    5c26:	70 e0       	ldi	r23, 0x00	; 0
    5c28:	c8 01       	movw	r24, r16
    5c2a:	b0 df       	rcall	.-160    	; 0x5b8c <TWI_ReceiveByte>
    5c2c:	c1 50       	subi	r28, 0x01	; 1
    5c2e:	89 2b       	or	r24, r25
    5c30:	11 f0       	breq	.+4      	; 0x5c36 <TWI_ReadPacket+0x6e>
    5c32:	87 01       	movw	r16, r14
    5c34:	ed cf       	rjmp	.-38     	; 0x5c10 <TWI_ReadPacket+0x48>
                {
                    ErrorCode = TWI_ERROR_SlaveNAK;
    5c36:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5c38:	84 e9       	ldi	r24, 0x94	; 148
    5c3a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            TWI_StopTransmission();
        }
    }

    return ErrorCode;
}
    5c3e:	8d 2f       	mov	r24, r29
    5c40:	cd b7       	in	r28, 0x3d	; 61
    5c42:	de b7       	in	r29, 0x3e	; 62
    5c44:	eb e0       	ldi	r30, 0x0B	; 11
    5c46:	0c 94 a9 e4 	jmp	0x1c952	; 0x1c952 <__epilogue_restores__+0xe>

00005c4a <TWI_WritePacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
const uint8_t* Buffer,
uint8_t Length)
{
    5c4a:	a0 e0       	ldi	r26, 0x00	; 0
    5c4c:	b0 e0       	ldi	r27, 0x00	; 0
    5c4e:	eb e2       	ldi	r30, 0x2B	; 43
    5c50:	fe e2       	ldi	r31, 0x2E	; 46
    5c52:	0c 94 8f e4 	jmp	0x1c91e	; 0x1c91e <__prologue_saves__+0x12>
    5c56:	b4 2e       	mov	r11, r20
    5c58:	f5 2e       	mov	r15, r21
    5c5a:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5c5c:	8e 7f       	andi	r24, 0xFE	; 254
    5c5e:	22 df       	rcall	.-444    	; 0x5aa4 <TWI_StartTransmission>
    5c60:	d8 2f       	mov	r29, r24
    5c62:	81 11       	cpse	r24, r1
    5c64:	1a c0       	rjmp	.+52     	; 0x5c9a <TWI_WritePacket+0x50>
    5c66:	cb 2c       	mov	r12, r11
    5c68:	df 2c       	mov	r13, r15
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5c6a:	cc 23       	and	r28, r28
    5c6c:	41 f0       	breq	.+16     	; 0x5c7e <TWI_WritePacket+0x34>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5c6e:	f6 01       	movw	r30, r12
    5c70:	81 91       	ld	r24, Z+
    5c72:	6f 01       	movw	r12, r30
    5c74:	77 df       	rcall	.-274    	; 0x5b64 <TWI_SendByte>
    5c76:	c1 50       	subi	r28, 0x01	; 1
    5c78:	89 2b       	or	r24, r25
    5c7a:	b9 f7       	brne	.-18     	; 0x5c6a <TWI_WritePacket+0x20>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5c7c:	d5 e0       	ldi	r29, 0x05	; 5
    5c7e:	68 01       	movw	r12, r16
                break;
            }
        }

        while (Length--)
    5c80:	ee 20       	and	r14, r14
    5c82:	41 f0       	breq	.+16     	; 0x5c94 <TWI_WritePacket+0x4a>
        {
            if (!(TWI_SendByte(*(Buffer++))))
    5c84:	f6 01       	movw	r30, r12
    5c86:	81 91       	ld	r24, Z+
    5c88:	6f 01       	movw	r12, r30
    5c8a:	6c df       	rcall	.-296    	; 0x5b64 <TWI_SendByte>
    5c8c:	ea 94       	dec	r14
    5c8e:	89 2b       	or	r24, r25
    5c90:	b9 f7       	brne	.-18     	; 0x5c80 <TWI_WritePacket+0x36>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5c92:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5c94:	84 e9       	ldi	r24, 0x94	; 148
    5c96:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TWI_StopTransmission();
    }

    return ErrorCode;
}
    5c9a:	8d 2f       	mov	r24, r29
    5c9c:	cd b7       	in	r28, 0x3d	; 61
    5c9e:	de b7       	in	r29, 0x3e	; 62
    5ca0:	e9 e0       	ldi	r30, 0x09	; 9
    5ca2:	0c 94 ab e4 	jmp	0x1c956	; 0x1c956 <__epilogue_restores__+0x12>

00005ca6 <__vector_26>:
  }

  SREG = sreg;
}

ISR(TWI_vect, ISR_BLOCK) {
    5ca6:	1f 92       	push	r1
    5ca8:	0f 92       	push	r0
    5caa:	0f b6       	in	r0, 0x3f	; 63
    5cac:	0f 92       	push	r0
    5cae:	11 24       	eor	r1, r1
    5cb0:	0b b6       	in	r0, 0x3b	; 59
    5cb2:	0f 92       	push	r0
    5cb4:	2f 93       	push	r18
    5cb6:	3f 93       	push	r19
    5cb8:	4f 93       	push	r20
    5cba:	5f 93       	push	r21
    5cbc:	6f 93       	push	r22
    5cbe:	7f 93       	push	r23
    5cc0:	8f 93       	push	r24
    5cc2:	9f 93       	push	r25
    5cc4:	af 93       	push	r26
    5cc6:	bf 93       	push	r27
    5cc8:	ef 93       	push	r30
    5cca:	ff 93       	push	r31

  uint8_t status = TW_STATUS;
    5ccc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5cd0:	88 7f       	andi	r24, 0xF8	; 248

  /* This interrupt should only fire if there is something to do. */
  assert(op != NULL);
    5cd2:	e0 91 16 17 	lds	r30, 0x1716	; 0x801716 <op>
    5cd6:	f0 91 17 17 	lds	r31, 0x1717	; 0x801717 <op+0x1>
    5cda:	30 97       	sbiw	r30, 0x00	; 0
    5cdc:	09 f4       	brne	.+2      	; 0x5ce0 <__vector_26+0x3a>
    5cde:	6f c0       	rjmp	.+222    	; 0x5dbe <__vector_26+0x118>

  if ((op->address & _BV(0)) == TW_READ) {
    5ce0:	90 81       	ld	r25, Z
    5ce2:	90 ff       	sbrs	r25, 0
    5ce4:	39 c0       	rjmp	.+114    	; 0x5d58 <__vector_26+0xb2>
    /* Master Receiver mode. */
    switch (status) {
    5ce6:	80 34       	cpi	r24, 0x40	; 64
    5ce8:	81 f0       	breq	.+32     	; 0x5d0a <__vector_26+0x64>
    5cea:	38 f4       	brcc	.+14     	; 0x5cfa <__vector_26+0x54>
    5cec:	80 31       	cpi	r24, 0x10	; 16
    5cee:	09 f4       	brne	.+2      	; 0x5cf2 <__vector_26+0x4c>
    5cf0:	45 c0       	rjmp	.+138    	; 0x5d7c <__vector_26+0xd6>
    5cf2:	88 33       	cpi	r24, 0x38	; 56
    5cf4:	09 f4       	brne	.+2      	; 0x5cf8 <__vector_26+0x52>
    5cf6:	94 c0       	rjmp	.+296    	; 0x5e20 <__vector_26+0x17a>
    5cf8:	36 c0       	rjmp	.+108    	; 0x5d66 <__vector_26+0xc0>
    5cfa:	80 35       	cpi	r24, 0x50	; 80
    5cfc:	59 f0       	breq	.+22     	; 0x5d14 <__vector_26+0x6e>
    5cfe:	88 35       	cpi	r24, 0x58	; 88
    5d00:	f1 f0       	breq	.+60     	; 0x5d3e <__vector_26+0x98>
    5d02:	88 34       	cpi	r24, 0x48	; 72
    5d04:	09 f0       	breq	.+2      	; 0x5d08 <__vector_26+0x62>
    5d06:	5b c0       	rjmp	.+182    	; 0x5dbe <__vector_26+0x118>
    5d08:	54 c0       	rjmp	.+168    	; 0x5db2 <__vector_26+0x10c>
      TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTA);
      break;

    /* SLA+R has been transmitted; ACK has been received. */
    case TW_MR_SLA_ACK:
      if (op->buflen == 1) {
    5d0a:	81 81       	ldd	r24, Z+1	; 0x01
    5d0c:	81 30       	cpi	r24, 0x01	; 1
    5d0e:	09 f0       	breq	.+2      	; 0x5d12 <__vector_26+0x6c>
    5d10:	4a c0       	rjmp	.+148    	; 0x5da6 <__vector_26+0x100>
    5d12:	13 c0       	rjmp	.+38     	; 0x5d3a <__vector_26+0x94>
      txn->flags = I2C_TXN_DONE | I2C_TXN_ERR;
      goto next_txn;

    /* Data byte has been received; ACK has been returned. */
    case TW_MR_DATA_ACK:
      op->buf[op->bufpos++] = TWDR;
    5d14:	a3 81       	ldd	r26, Z+3	; 0x03
    5d16:	b4 81       	ldd	r27, Z+4	; 0x04
    5d18:	82 81       	ldd	r24, Z+2	; 0x02
    5d1a:	91 e0       	ldi	r25, 0x01	; 1
    5d1c:	98 0f       	add	r25, r24
    5d1e:	92 83       	std	Z+2, r25	; 0x02
    5d20:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5d24:	a8 0f       	add	r26, r24
    5d26:	b1 1d       	adc	r27, r1
    5d28:	9c 93       	st	X, r25
      if (op->bufpos+1 == op->buflen) {
    5d2a:	82 81       	ldd	r24, Z+2	; 0x02
    5d2c:	21 81       	ldd	r18, Z+1	; 0x01
    5d2e:	90 e0       	ldi	r25, 0x00	; 0
    5d30:	01 96       	adiw	r24, 0x01	; 1
    5d32:	30 e0       	ldi	r19, 0x00	; 0
    5d34:	82 17       	cp	r24, r18
    5d36:	93 07       	cpc	r25, r19
    5d38:	b1 f5       	brne	.+108    	; 0x5da6 <__vector_26+0x100>
        TWCR = TWCR_NOT_ACK;
    5d3a:	85 e8       	ldi	r24, 0x85	; 133
    5d3c:	7c c0       	rjmp	.+248    	; 0x5e36 <__vector_26+0x190>
      }
      break;

    /* Data byte has been received; NOT ACK has been returned. */
    case TW_MR_DATA_NACK:
      op->buf[op->bufpos++] = TWDR;
    5d3e:	83 81       	ldd	r24, Z+3	; 0x03
    5d40:	94 81       	ldd	r25, Z+4	; 0x04
    5d42:	22 81       	ldd	r18, Z+2	; 0x02
    5d44:	31 e0       	ldi	r19, 0x01	; 1
    5d46:	32 0f       	add	r19, r18
    5d48:	32 83       	std	Z+2, r19	; 0x02
    5d4a:	30 91 bb 00 	lds	r19, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5d4e:	fc 01       	movw	r30, r24
    5d50:	e2 0f       	add	r30, r18
    5d52:	f1 1d       	adc	r31, r1
    5d54:	30 83       	st	Z, r19
      goto next_op;
    5d56:	35 c0       	rjmp	.+106    	; 0x5dc2 <__vector_26+0x11c>
    default:
      assert(0 && "unknown status in master receiver mode");
    }
  } else {
    /* Master Transmitter mode. */
    switch (status) {
    5d58:	80 32       	cpi	r24, 0x20	; 32
    5d5a:	59 f1       	breq	.+86     	; 0x5db2 <__vector_26+0x10c>
    5d5c:	38 f4       	brcc	.+14     	; 0x5d6c <__vector_26+0xc6>
    5d5e:	80 31       	cpi	r24, 0x10	; 16
    5d60:	69 f0       	breq	.+26     	; 0x5d7c <__vector_26+0xd6>
    5d62:	88 31       	cpi	r24, 0x18	; 24
    5d64:	a1 f0       	breq	.+40     	; 0x5d8e <__vector_26+0xe8>
    5d66:	88 30       	cpi	r24, 0x08	; 8
    5d68:	51 f5       	brne	.+84     	; 0x5dbe <__vector_26+0x118>
    5d6a:	08 c0       	rjmp	.+16     	; 0x5d7c <__vector_26+0xd6>
    5d6c:	80 33       	cpi	r24, 0x30	; 48
    5d6e:	e9 f0       	breq	.+58     	; 0x5daa <__vector_26+0x104>
    5d70:	88 33       	cpi	r24, 0x38	; 56
    5d72:	09 f4       	brne	.+2      	; 0x5d76 <__vector_26+0xd0>
    5d74:	55 c0       	rjmp	.+170    	; 0x5e20 <__vector_26+0x17a>
    5d76:	88 32       	cpi	r24, 0x28	; 40
    5d78:	11 f5       	brne	.+68     	; 0x5dbe <__vector_26+0x118>
    5d7a:	05 c0       	rjmp	.+10     	; 0x5d86 <__vector_26+0xe0>

    /* A START condition has been transmitted. */
    case TW_START:
    /* A repeated START condition has been transmitted. */
    case TW_REP_START:
      assert(op->buflen > 0);
    5d7c:	81 81       	ldd	r24, Z+1	; 0x01
    5d7e:	88 23       	and	r24, r24
    5d80:	f1 f0       	breq	.+60     	; 0x5dbe <__vector_26+0x118>
      op->bufpos = 0;
    5d82:	12 82       	std	Z+2, r1	; 0x02
    5d84:	0d c0       	rjmp	.+26     	; 0x5da0 <__vector_26+0xfa>
      txn->flags = I2C_TXN_DONE | I2C_TXN_ERR;
      goto next_txn;

    /* Data byte has been transmitted; ACK has been received. */
    case TW_MT_DATA_ACK:
      if (op->bufpos < op->buflen) {
    5d86:	92 81       	ldd	r25, Z+2	; 0x02
    5d88:	81 81       	ldd	r24, Z+1	; 0x01
    5d8a:	98 17       	cp	r25, r24
    5d8c:	d0 f4       	brcc	.+52     	; 0x5dc2 <__vector_26+0x11c>
        TWDR = op->buf[op->bufpos++];
    5d8e:	83 81       	ldd	r24, Z+3	; 0x03
    5d90:	94 81       	ldd	r25, Z+4	; 0x04
    5d92:	22 81       	ldd	r18, Z+2	; 0x02
    5d94:	31 e0       	ldi	r19, 0x01	; 1
    5d96:	32 0f       	add	r19, r18
    5d98:	32 83       	std	Z+2, r19	; 0x02
    5d9a:	fc 01       	movw	r30, r24
    5d9c:	e2 0f       	add	r30, r18
    5d9e:	f1 1d       	adc	r31, r1
    5da0:	80 81       	ld	r24, Z
    5da2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = TWCR_DEFAULT | _BV(TWINT);
    5da6:	85 ec       	ldi	r24, 0xC5	; 197
    5da8:	46 c0       	rjmp	.+140    	; 0x5e36 <__vector_26+0x190>
      /* No more bytes left to transmit... */
      goto next_op;

    /* Data byte has been transmitted; NOT ACK has been received. */
    case TW_MT_DATA_NACK:
      if (op->bufpos < op->buflen) {
    5daa:	92 81       	ldd	r25, Z+2	; 0x02
    5dac:	81 81       	ldd	r24, Z+1	; 0x01
    5dae:	98 17       	cp	r25, r24
    5db0:	40 f4       	brcc	.+16     	; 0x5dc2 <__vector_26+0x11c>
        /* There were more bytes left to transmit! */
        txn->flags = I2C_TXN_DONE | I2C_TXN_ERR;
    5db2:	e0 91 18 17 	lds	r30, 0x1718	; 0x801718 <txn>
    5db6:	f0 91 19 17 	lds	r31, 0x1719	; 0x801719 <txn+0x1>
    5dba:	83 e0       	ldi	r24, 0x03	; 3
    5dbc:	1d c0       	rjmp	.+58     	; 0x5df8 <__vector_26+0x152>
      }

      goto next_op;

    default:
      assert(0 && "unknown status in master transmitter mode");
    5dbe:	0e 94 6f e8 	call	0x1d0de	; 0x1d0de <abort>

next_op:
  /*
   * Advance to next operation in transaction, if possible.
   */
  if (++(txn->opspos) < txn->opslen) {
    5dc2:	e0 91 18 17 	lds	r30, 0x1718	; 0x801718 <txn>
    5dc6:	f0 91 19 17 	lds	r31, 0x1719	; 0x801719 <txn+0x1>
    5dca:	84 81       	ldd	r24, Z+4	; 0x04
    5dcc:	8f 5f       	subi	r24, 0xFF	; 255
    5dce:	84 83       	std	Z+4, r24	; 0x04
    5dd0:	93 81       	ldd	r25, Z+3	; 0x03
    5dd2:	89 17       	cp	r24, r25
    5dd4:	80 f4       	brcc	.+32     	; 0x5df6 <__vector_26+0x150>
    op = &txn->ops[txn->opspos];
    5dd6:	84 81       	ldd	r24, Z+4	; 0x04
    5dd8:	90 e0       	ldi	r25, 0x00	; 0
    5dda:	01 96       	adiw	r24, 0x01	; 1
    5ddc:	45 e0       	ldi	r20, 0x05	; 5
    5dde:	48 9f       	mul	r20, r24
    5de0:	90 01       	movw	r18, r0
    5de2:	49 9f       	mul	r20, r25
    5de4:	30 0d       	add	r19, r0
    5de6:	11 24       	eor	r1, r1
    5de8:	e2 0f       	add	r30, r18
    5dea:	f3 1f       	adc	r31, r19
    5dec:	f0 93 17 17 	sts	0x1717, r31	; 0x801717 <op+0x1>
    5df0:	e0 93 16 17 	sts	0x1716, r30	; 0x801716 <op>
    5df4:	15 c0       	rjmp	.+42     	; 0x5e20 <__vector_26+0x17a>
    TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTA);
    return;
  }

  /* No more operations, mark transaction as done. */
  txn->flags = I2C_TXN_DONE;
    5df6:	81 e0       	ldi	r24, 0x01	; 1
    5df8:	82 83       	std	Z+2, r24	; 0x02

next_txn:
  /*
   * Advance to next transaction, if possible.
   */
  if (txn->next != NULL) {
    5dfa:	e0 91 18 17 	lds	r30, 0x1718	; 0x801718 <txn>
    5dfe:	f0 91 19 17 	lds	r31, 0x1719	; 0x801719 <txn+0x1>
    5e02:	80 81       	ld	r24, Z
    5e04:	91 81       	ldd	r25, Z+1	; 0x01
    5e06:	89 2b       	or	r24, r25
    5e08:	69 f0       	breq	.+26     	; 0x5e24 <__vector_26+0x17e>
    txn = txn->next;
    5e0a:	80 81       	ld	r24, Z
    5e0c:	91 81       	ldd	r25, Z+1	; 0x01
    5e0e:	90 93 19 17 	sts	0x1719, r25	; 0x801719 <txn+0x1>
    5e12:	80 93 18 17 	sts	0x1718, r24	; 0x801718 <txn>
    op = &txn->ops[0];
    5e16:	05 96       	adiw	r24, 0x05	; 5
    5e18:	90 93 17 17 	sts	0x1717, r25	; 0x801717 <op+0x1>
    5e1c:	80 93 16 17 	sts	0x1716, r24	; 0x801716 <op>

    /* Repeated start. */
    TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTA);
    5e20:	85 ee       	ldi	r24, 0xE5	; 229
    5e22:	09 c0       	rjmp	.+18     	; 0x5e36 <__vector_26+0x190>
    return;
  }

  txn = NULL;
    5e24:	10 92 19 17 	sts	0x1719, r1	; 0x801719 <txn+0x1>
    5e28:	10 92 18 17 	sts	0x1718, r1	; 0x801718 <txn>
  op = NULL;
    5e2c:	10 92 17 17 	sts	0x1717, r1	; 0x801717 <op+0x1>
    5e30:	10 92 16 17 	sts	0x1716, r1	; 0x801716 <op>

  /* No more transaction, transmit STOP. */
  TWCR = TWCR_DEFAULT | _BV(TWINT) | _BV(TWSTO);
    5e34:	85 ed       	ldi	r24, 0xD5	; 213
    5e36:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
}
    5e3a:	ff 91       	pop	r31
    5e3c:	ef 91       	pop	r30
    5e3e:	bf 91       	pop	r27
    5e40:	af 91       	pop	r26
    5e42:	9f 91       	pop	r25
    5e44:	8f 91       	pop	r24
    5e46:	7f 91       	pop	r23
    5e48:	6f 91       	pop	r22
    5e4a:	5f 91       	pop	r21
    5e4c:	4f 91       	pop	r20
    5e4e:	3f 91       	pop	r19
    5e50:	2f 91       	pop	r18
    5e52:	0f 90       	pop	r0
    5e54:	0b be       	out	0x3b, r0	; 59
    5e56:	0f 90       	pop	r0
    5e58:	0f be       	out	0x3f, r0	; 63
    5e5a:	0f 90       	pop	r0
    5e5c:	1f 90       	pop	r1
    5e5e:	18 95       	reti

00005e60 <BINtoBCD>:
        return -1;
    }
    if(b & 8)
        return 0;
    return 1;
}
    5e60:	6a e0       	ldi	r22, 0x0A	; 10
    5e62:	0e 94 d1 e3 	call	0x1c7a2	; 0x1c7a2 <__udivmodqi4>
    5e66:	82 95       	swap	r24
    5e68:	80 7f       	andi	r24, 0xF0	; 240
    5e6a:	89 2b       	or	r24, r25
    5e6c:	08 95       	ret

00005e6e <BCDtoBIN>:
    5e6e:	98 2f       	mov	r25, r24
    5e70:	92 95       	swap	r25
    5e72:	9f 70       	andi	r25, 0x0F	; 15
    5e74:	8f 70       	andi	r24, 0x0F	; 15
    5e76:	2a e0       	ldi	r18, 0x0A	; 10
    5e78:	92 9f       	mul	r25, r18
    5e7a:	80 0d       	add	r24, r0
    5e7c:	11 24       	eor	r1, r1
    5e7e:	08 95       	ret

00005e80 <rtc_run>:
///  - -1 = check run state.
///
/// @return  run state 0/1 on success.
/// @return -1 on error.
int rtc_run(int run)
{
    5e80:	cf 92       	push	r12
    5e82:	df 92       	push	r13
    5e84:	ef 92       	push	r14
    5e86:	0f 93       	push	r16
    5e88:	1f 93       	push	r17
    5e8a:	cf 93       	push	r28
    5e8c:	df 93       	push	r29
    5e8e:	00 d0       	rcall	.+0      	; 0x5e90 <rtc_run+0x10>
    5e90:	00 d0       	rcall	.+0      	; 0x5e92 <rtc_run+0x12>
    5e92:	00 d0       	rcall	.+0      	; 0x5e94 <rtc_run+0x14>
    5e94:	cd b7       	in	r28, 0x3d	; 61
    5e96:	de b7       	in	r29, 0x3e	; 62
    5e98:	6c 01       	movw	r12, r24
    uint8_t  WriteAddress;
    uint8_t  ReadAddress;
    uint8_t b = 0;
    5e9a:	1c 82       	std	Y+4, r1	; 0x04

    ReadAddress = 0;
    5e9c:	1d 82       	std	Y+5, r1	; 0x05
    if (TWI_ReadPacket(DS1307_R, RTC_TIMEOUT, &ReadAddress, sizeof(ReadAddress),
    5e9e:	ee 24       	eor	r14, r14
    5ea0:	e3 94       	inc	r14
    5ea2:	8e 01       	movw	r16, r28
    5ea4:	0c 5f       	subi	r16, 0xFC	; 252
    5ea6:	1f 4f       	sbci	r17, 0xFF	; 255
    5ea8:	21 e0       	ldi	r18, 0x01	; 1
    5eaa:	ae 01       	movw	r20, r28
    5eac:	4b 5f       	subi	r20, 0xFB	; 251
    5eae:	5f 4f       	sbci	r21, 0xFF	; 255
    5eb0:	62 e3       	ldi	r22, 0x32	; 50
    5eb2:	81 ed       	ldi	r24, 0xD1	; 209
    5eb4:	89 de       	rcall	.-750    	; 0x5bc8 <TWI_ReadPacket>
    5eb6:	88 23       	and	r24, r24
    5eb8:	19 f0       	breq	.+6      	; 0x5ec0 <rtc_run+0x40>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run read status error\n");
    5eba:	84 ea       	ldi	r24, 0xA4	; 164
    5ebc:	94 e0       	ldi	r25, 0x04	; 4
    5ebe:	2a c0       	rjmp	.+84     	; 0x5f14 <rtc_run+0x94>
    5ec0:	8c 81       	ldd	r24, Y+4	; 0x04
        return -1;
    }

    if(run == -1)
    5ec2:	ff ef       	ldi	r31, 0xFF	; 255
    5ec4:	cf 16       	cp	r12, r31
    5ec6:	df 06       	cpc	r13, r31
    5ec8:	59 f4       	brne	.+22     	; 0x5ee0 <rtc_run+0x60>
        return ((b & 0x80) ? 0 : 1);
    5eca:	08 2e       	mov	r0, r24
    5ecc:	00 0c       	add	r0, r0
    5ece:	99 0b       	sbc	r25, r25
    5ed0:	80 95       	com	r24
    5ed2:	90 95       	com	r25
    5ed4:	89 2f       	mov	r24, r25
    5ed6:	88 1f       	adc	r24, r24
    5ed8:	88 27       	eor	r24, r24
    5eda:	88 1f       	adc	r24, r24
    5edc:	90 e0       	ldi	r25, 0x00	; 0
    5ede:	26 c0       	rjmp	.+76     	; 0x5f2c <rtc_run+0xac>

    b = ( b  & 0x7f) | (run ? 0 : 0x80);
    5ee0:	8f 77       	andi	r24, 0x7F	; 127
    5ee2:	c1 14       	cp	r12, r1
    5ee4:	d1 04       	cpc	r13, r1
    5ee6:	11 f4       	brne	.+4      	; 0x5eec <rtc_run+0x6c>
    5ee8:	90 e8       	ldi	r25, 0x80	; 128
    5eea:	01 c0       	rjmp	.+2      	; 0x5eee <rtc_run+0x6e>
    5eec:	90 e0       	ldi	r25, 0x00	; 0
    5eee:	89 2b       	or	r24, r25
    5ef0:	8c 83       	std	Y+4, r24	; 0x04

    WriteAddress = 0;
    5ef2:	1e 82       	std	Y+6, r1	; 0x06
    if (TWI_WritePacket(DS1307_W, RTC_TIMEOUT, &WriteAddress, sizeof(WriteAddress),
    5ef4:	ee 24       	eor	r14, r14
    5ef6:	e3 94       	inc	r14
    5ef8:	8e 01       	movw	r16, r28
    5efa:	0c 5f       	subi	r16, 0xFC	; 252
    5efc:	1f 4f       	sbci	r17, 0xFF	; 255
    5efe:	21 e0       	ldi	r18, 0x01	; 1
    5f00:	ae 01       	movw	r20, r28
    5f02:	4a 5f       	subi	r20, 0xFA	; 250
    5f04:	5f 4f       	sbci	r21, 0xFF	; 255
    5f06:	62 e3       	ldi	r22, 0x32	; 50
    5f08:	80 ed       	ldi	r24, 0xD0	; 208
    5f0a:	9f de       	rcall	.-706    	; 0x5c4a <TWI_WritePacket>
    5f0c:	88 23       	and	r24, r24
    5f0e:	69 f0       	breq	.+26     	; 0x5f2a <rtc_run+0xaa>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run - write status error\n");
    5f10:	86 e8       	ldi	r24, 0x86	; 134
    5f12:	94 e0       	ldi	r25, 0x04	; 4
    5f14:	a0 e0       	ldi	r26, 0x00	; 0
    5f16:	ed b7       	in	r30, 0x3d	; 61
    5f18:	fe b7       	in	r31, 0x3e	; 62
    5f1a:	81 83       	std	Z+1, r24	; 0x01
    5f1c:	92 83       	std	Z+2, r25	; 0x02
    5f1e:	a3 83       	std	Z+3, r26	; 0x03
    5f20:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        return(-1);
    5f24:	8f ef       	ldi	r24, 0xFF	; 255
    5f26:	9f ef       	ldi	r25, 0xFF	; 255
    5f28:	01 c0       	rjmp	.+2      	; 0x5f2c <rtc_run+0xac>
    5f2a:	c6 01       	movw	r24, r12
    }
    return(run);
}
    5f2c:	26 96       	adiw	r28, 0x06	; 6
    5f2e:	0f b6       	in	r0, 0x3f	; 63
    5f30:	f8 94       	cli
    5f32:	de bf       	out	0x3e, r29	; 62
    5f34:	0f be       	out	0x3f, r0	; 63
    5f36:	cd bf       	out	0x3d, r28	; 61
    5f38:	df 91       	pop	r29
    5f3a:	cf 91       	pop	r28
    5f3c:	1f 91       	pop	r17
    5f3e:	0f 91       	pop	r16
    5f40:	ef 90       	pop	r14
    5f42:	df 90       	pop	r13
    5f44:	cf 90       	pop	r12
    5f46:	08 95       	ret

00005f48 <rtc_write>:
/// @param[in] t: POSIX struct tm * time to set.
///
/// @return 1 on sucess.
/// @return 0 on fail.
uint8_t rtc_write(tm_t *t)
{
    5f48:	ef 92       	push	r14
    5f4a:	0f 93       	push	r16
    5f4c:	1f 93       	push	r17
    5f4e:	cf 93       	push	r28
    5f50:	df 93       	push	r29
    5f52:	cd b7       	in	r28, 0x3d	; 61
    5f54:	de b7       	in	r29, 0x3e	; 62
    5f56:	2c 97       	sbiw	r28, 0x0c	; 12
    5f58:	0f b6       	in	r0, 0x3f	; 63
    5f5a:	f8 94       	cli
    5f5c:	de bf       	out	0x3e, r29	; 62
    5f5e:	0f be       	out	0x3f, r0	; 63
    5f60:	cd bf       	out	0x3d, r28	; 61
    5f62:	8c 01       	movw	r16, r24
    uint8_t buf[8];
    uint8_t WriteAddress;

    buf[0] =  BINtoBCD(t->tm_sec) & 0x7f;
    5f64:	fc 01       	movw	r30, r24
    5f66:	80 81       	ld	r24, Z
    5f68:	7b df       	rcall	.-266    	; 0x5e60 <BINtoBCD>
    5f6a:	8f 77       	andi	r24, 0x7F	; 127
    5f6c:	8c 83       	std	Y+4, r24	; 0x04
    buf[1] =  BINtoBCD(t->tm_min) & 0x7f;
    5f6e:	f8 01       	movw	r30, r16
    5f70:	82 81       	ldd	r24, Z+2	; 0x02
    5f72:	76 df       	rcall	.-276    	; 0x5e60 <BINtoBCD>
    5f74:	8f 77       	andi	r24, 0x7F	; 127
    buf[2] =  BINtoBCD(t->tm_hour) & 0x3f;
    5f76:	8d 83       	std	Y+5, r24	; 0x05
    5f78:	f8 01       	movw	r30, r16
    5f7a:	84 81       	ldd	r24, Z+4	; 0x04
    5f7c:	71 df       	rcall	.-286    	; 0x5e60 <BINtoBCD>
    5f7e:	8f 73       	andi	r24, 0x3F	; 63
    buf[3] =  ((t->tm_wday & 7) + 1) & 0x0f;
    5f80:	8e 83       	std	Y+6, r24	; 0x06
    5f82:	f8 01       	movw	r30, r16
    5f84:	84 85       	ldd	r24, Z+12	; 0x0c
    5f86:	87 70       	andi	r24, 0x07	; 7
    buf[4] =  BINtoBCD(t->tm_mday ) & 0x3f;
    5f88:	8f 5f       	subi	r24, 0xFF	; 255
    5f8a:	8f 83       	std	Y+7, r24	; 0x07
    5f8c:	86 81       	ldd	r24, Z+6	; 0x06
    5f8e:	68 df       	rcall	.-304    	; 0x5e60 <BINtoBCD>
    buf[5] =  BINtoBCD(t->tm_mon + 1) & 0x1f;
    5f90:	8f 73       	andi	r24, 0x3F	; 63
    5f92:	88 87       	std	Y+8, r24	; 0x08
    5f94:	f8 01       	movw	r30, r16
    5f96:	80 85       	ldd	r24, Z+8	; 0x08
    5f98:	8f 5f       	subi	r24, 0xFF	; 255
    5f9a:	62 df       	rcall	.-316    	; 0x5e60 <BINtoBCD>
    buf[6] =  BINtoBCD(t->tm_year - 100) & 0xff;  // 2000 = 0
    5f9c:	8f 71       	andi	r24, 0x1F	; 31
    5f9e:	89 87       	std	Y+9, r24	; 0x09
    5fa0:	f8 01       	movw	r30, r16
    5fa2:	82 85       	ldd	r24, Z+10	; 0x0a
    5fa4:	84 56       	subi	r24, 0x64	; 100
    5fa6:	5c df       	rcall	.-328    	; 0x5e60 <BINtoBCD>
    buf[7] = 0x93;                                // 32khz, out square wave
    5fa8:	8a 87       	std	Y+10, r24	; 0x0a
    5faa:	83 e9       	ldi	r24, 0x93	; 147
	for(i=0;i<7;++i)
		printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    WriteAddress = 0;
    5fac:	8b 87       	std	Y+11, r24	; 0x0b
    if (TWI_WritePacket(DS1307_W, RTC_TIMEOUT, &WriteAddress, sizeof(WriteAddress),
    5fae:	1c 86       	std	Y+12, r1	; 0x0c
    5fb0:	88 e0       	ldi	r24, 0x08	; 8
    5fb2:	e8 2e       	mov	r14, r24
    5fb4:	8e 01       	movw	r16, r28
    5fb6:	0c 5f       	subi	r16, 0xFC	; 252
    5fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    5fba:	21 e0       	ldi	r18, 0x01	; 1
    5fbc:	ae 01       	movw	r20, r28
    5fbe:	44 5f       	subi	r20, 0xF4	; 244
    5fc0:	5f 4f       	sbci	r21, 0xFF	; 255
    5fc2:	62 e3       	ldi	r22, 0x32	; 50
    5fc4:	80 ed       	ldi	r24, 0xD0	; 208
    5fc6:	41 de       	rcall	.-894    	; 0x5c4a <TWI_WritePacket>
    5fc8:	88 23       	and	r24, r24
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_write error\n");
    5fca:	61 f0       	breq	.+24     	; 0x5fe4 <rtc_write+0x9c>
    5fcc:	87 e5       	ldi	r24, 0x57	; 87
    5fce:	94 e0       	ldi	r25, 0x04	; 4
    5fd0:	a0 e0       	ldi	r26, 0x00	; 0
    5fd2:	ed b7       	in	r30, 0x3d	; 61
    5fd4:	fe b7       	in	r31, 0x3e	; 62
    5fd6:	81 83       	std	Z+1, r24	; 0x01
    5fd8:	92 83       	std	Z+2, r25	; 0x02
    5fda:	a3 83       	std	Z+3, r26	; 0x03
    5fdc:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        return(0);
    5fe0:	80 e0       	ldi	r24, 0x00	; 0
    }

    return(1);
    5fe2:	01 c0       	rjmp	.+2      	; 0x5fe6 <rtc_write+0x9e>
}
    5fe4:	81 e0       	ldi	r24, 0x01	; 1
    5fe6:	2c 96       	adiw	r28, 0x0c	; 12
    5fe8:	0f b6       	in	r0, 0x3f	; 63
    5fea:	f8 94       	cli
    5fec:	de bf       	out	0x3e, r29	; 62
    5fee:	0f be       	out	0x3f, r0	; 63
    5ff0:	cd bf       	out	0x3d, r28	; 61
    5ff2:	df 91       	pop	r29
    5ff4:	cf 91       	pop	r28
    5ff6:	1f 91       	pop	r17
    5ff8:	0f 91       	pop	r16
    5ffa:	ef 90       	pop	r14
    5ffc:	08 95       	ret

00005ffe <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  1 on success.
/// @return 0 on fail.
uint8_t rtc_init (int force, time_t seconds)
{
    5ffe:	a7 e0       	ldi	r26, 0x07	; 7
    6000:	b0 e0       	ldi	r27, 0x00	; 0
    6002:	e5 e0       	ldi	r30, 0x05	; 5
    6004:	f0 e3       	ldi	r31, 0x30	; 48
    6006:	0c 94 94 e4 	jmp	0x1c928	; 0x1c928 <__prologue_saves__+0x1c>
    600a:	8c 01       	movw	r16, r24
    600c:	4c 83       	std	Y+4, r20	; 0x04
    600e:	5d 83       	std	Y+5, r21	; 0x05
    6010:	6e 83       	std	Y+6, r22	; 0x06
    6012:	7f 83       	std	Y+7, r23	; 0x07
    int8_t    state;

    tm_t *tmp;

    TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 100000));
    6014:	61 e1       	ldi	r22, 0x11	; 17
    6016:	81 e0       	ldi	r24, 0x01	; 1
    6018:	35 dd       	rcall	.-1430   	; 0x5a84 <TWI_Init>

    if(!force)
    601a:	01 15       	cp	r16, r1
    601c:	11 05       	cpc	r17, r1
    601e:	d9 f4       	brne	.+54     	; 0x6056 <rtc_init+0x58>
    {
        state = rtc_run(-1);
    6020:	8f ef       	ldi	r24, 0xFF	; 255
    6022:	9f ef       	ldi	r25, 0xFF	; 255
    6024:	2d df       	rcall	.-422    	; 0x5e80 <rtc_run>
        if(state < 0)
    6026:	87 ff       	sbrs	r24, 7
    6028:	06 c0       	rjmp	.+12     	; 0x6036 <rtc_init+0x38>
        {
            rtc_ok = 0;
    602a:	10 92 8a 19 	sts	0x198A, r1	; 0x80198a <rtc_ok+0x1>
    602e:	10 92 89 19 	sts	0x1989, r1	; 0x801989 <rtc_ok>
            return 0;
    6032:	10 e0       	ldi	r17, 0x00	; 0
    6034:	2b c0       	rjmp	.+86     	; 0x608c <rtc_init+0x8e>
        }
        if(state == 0)                            // stopped
    6036:	88 23       	and	r24, r24
    6038:	71 f0       	breq	.+28     	; 0x6056 <rtc_init+0x58>
                return(0);
            }
        }
#endif

        if(rtc_run(1) < 0)                        // START RTC
    603a:	05 c0       	rjmp	.+10     	; 0x6046 <rtc_init+0x48>
    603c:	81 e0       	ldi	r24, 0x01	; 1
    603e:	90 e0       	ldi	r25, 0x00	; 0
    6040:	1f df       	rcall	.-450    	; 0x5e80 <rtc_run>
    6042:	97 fd       	sbrc	r25, 7
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    6044:	f2 cf       	rjmp	.-28     	; 0x602a <rtc_init+0x2c>
    6046:	81 e0       	ldi	r24, 0x01	; 1
    6048:	90 e0       	ldi	r25, 0x00	; 0
    604a:	90 93 8a 19 	sts	0x198A, r25	; 0x80198a <rtc_ok+0x1>
    604e:	80 93 89 19 	sts	0x1989, r24	; 0x801989 <rtc_ok>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    6052:	11 e0       	ldi	r17, 0x01	; 1
    6054:	1b c0       	rjmp	.+54     	; 0x608c <rtc_init+0x8e>
    6056:	80 e0       	ldi	r24, 0x00	; 0
    6058:	90 e0       	ldi	r25, 0x00	; 0
    605a:	12 df       	rcall	.-476    	; 0x5e80 <rtc_run>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
        tmp = gmtime(&seconds);
    605c:	97 fd       	sbrc	r25, 7
    605e:	e5 cf       	rjmp	.-54     	; 0x602a <rtc_init+0x2c>
    6060:	ce 01       	movw	r24, r28
        if(!rtc_write(tmp))
    6062:	04 96       	adiw	r24, 0x04	; 4
    6064:	0e 94 c3 38 	call	0x7186	; 0x7186 <gmtime>
    6068:	6f df       	rcall	.-290    	; 0x5f48 <rtc_write>
    606a:	18 2f       	mov	r17, r24
        {
            printf("rtc_init  write epoch failed\n");
    606c:	81 11       	cpse	r24, r1
    606e:	e6 cf       	rjmp	.-52     	; 0x603c <rtc_init+0x3e>
    6070:	88 e6       	ldi	r24, 0x68	; 104
    6072:	94 e0       	ldi	r25, 0x04	; 4
    6074:	a0 e0       	ldi	r26, 0x00	; 0
    6076:	ed b7       	in	r30, 0x3d	; 61
    6078:	fe b7       	in	r31, 0x3e	; 62
    607a:	81 83       	std	Z+1, r24	; 0x01
    607c:	92 83       	std	Z+2, r25	; 0x02
    607e:	a3 83       	std	Z+3, r26	; 0x03
            rtc_ok = 0;
    6080:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    6084:	10 92 8a 19 	sts	0x198A, r1	; 0x80198a <rtc_ok+0x1>
            return 0;
        }
    }
    rtc_ok = 1;
    return 1;
}
    6088:	10 92 89 19 	sts	0x1989, r1	; 0x801989 <rtc_ok>
    608c:	81 2f       	mov	r24, r17
    608e:	27 96       	adiw	r28, 0x07	; 7
    6090:	e4 e0       	ldi	r30, 0x04	; 4
    6092:	0c 94 b0 e4 	jmp	0x1c960	; 0x1c960 <__epilogue_restores__+0x1c>

00006096 <rtc_read>:
///
/// @param[out] t: struct tm * POSIX time returned.
/// @return  1 on sucess.
/// @return 0 on fail.
uint8_t rtc_read(tm_t *t)
{
    6096:	cf 92       	push	r12
    6098:	df 92       	push	r13
    609a:	ef 92       	push	r14
    609c:	0f 93       	push	r16
    609e:	1f 93       	push	r17
    60a0:	cf 93       	push	r28
    60a2:	df 93       	push	r29
    60a4:	cd b7       	in	r28, 0x3d	; 61
    60a6:	de b7       	in	r29, 0x3e	; 62
    60a8:	2c 97       	sbiw	r28, 0x0c	; 12
    60aa:	0f b6       	in	r0, 0x3f	; 63
    60ac:	f8 94       	cli
    60ae:	de bf       	out	0x3e, r29	; 62
    60b0:	0f be       	out	0x3f, r0	; 63
    60b2:	cd bf       	out	0x3d, r28	; 61
    60b4:	6c 01       	movw	r12, r24
    uint8_t buf[8];

    uint8_t ReadAddress = 0;
    60b6:	1c 86       	std	Y+12, r1	; 0x0c

    ReadAddress = 0;
    if (TWI_ReadPacket(DS1307_R, RTC_TIMEOUT, &ReadAddress, sizeof(ReadAddress),
    60b8:	88 e0       	ldi	r24, 0x08	; 8
    60ba:	e8 2e       	mov	r14, r24
    60bc:	8e 01       	movw	r16, r28
    60be:	0c 5f       	subi	r16, 0xFC	; 252
    60c0:	1f 4f       	sbci	r17, 0xFF	; 255
    60c2:	21 e0       	ldi	r18, 0x01	; 1
    60c4:	ae 01       	movw	r20, r28
    60c6:	44 5f       	subi	r20, 0xF4	; 244
    60c8:	5f 4f       	sbci	r21, 0xFF	; 255
    60ca:	62 e3       	ldi	r22, 0x32	; 50
    60cc:	81 ed       	ldi	r24, 0xD1	; 209
    60ce:	7c dd       	rcall	.-1288   	; 0x5bc8 <TWI_ReadPacket>
    60d0:	88 23       	and	r24, r24
    60d2:	61 f0       	breq	.+24     	; 0x60ec <rtc_read+0x56>
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_read error\n");
    60d4:	87 e4       	ldi	r24, 0x47	; 71
    60d6:	94 e0       	ldi	r25, 0x04	; 4
    60d8:	a0 e0       	ldi	r26, 0x00	; 0
    60da:	ed b7       	in	r30, 0x3d	; 61
    60dc:	fe b7       	in	r31, 0x3e	; 62
    60de:	81 83       	std	Z+1, r24	; 0x01
    60e0:	92 83       	std	Z+2, r25	; 0x02
    60e2:	a3 83       	std	Z+3, r26	; 0x03
    60e4:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        return 0;
    60e8:	80 e0       	ldi	r24, 0x00	; 0
    60ea:	33 c0       	rjmp	.+102    	; 0x6152 <rtc_read+0xbc>
    for(i=0;i<7;++i)
        printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    t->tm_sec =   BCDtoBIN( buf[0] & 0x7f);
    60ec:	8c 81       	ldd	r24, Y+4	; 0x04
    60ee:	8f 77       	andi	r24, 0x7F	; 127
    60f0:	be de       	rcall	.-644    	; 0x5e6e <BCDtoBIN>
    60f2:	90 e0       	ldi	r25, 0x00	; 0
    60f4:	f6 01       	movw	r30, r12
    60f6:	91 83       	std	Z+1, r25	; 0x01
    t->tm_min =   BCDtoBIN( buf[1] & 0x7f);
    60f8:	80 83       	st	Z, r24
    60fa:	8d 81       	ldd	r24, Y+5	; 0x05
    60fc:	8f 77       	andi	r24, 0x7F	; 127
    60fe:	b7 de       	rcall	.-658    	; 0x5e6e <BCDtoBIN>
    6100:	90 e0       	ldi	r25, 0x00	; 0
    6102:	f6 01       	movw	r30, r12
    t->tm_hour =  BCDtoBIN( buf[2] & 0x3f);
    6104:	93 83       	std	Z+3, r25	; 0x03
    6106:	82 83       	std	Z+2, r24	; 0x02
    6108:	8e 81       	ldd	r24, Y+6	; 0x06
    610a:	8f 73       	andi	r24, 0x3F	; 63
    610c:	b0 de       	rcall	.-672    	; 0x5e6e <BCDtoBIN>
    610e:	90 e0       	ldi	r25, 0x00	; 0
    6110:	f6 01       	movw	r30, r12
    6112:	95 83       	std	Z+5, r25	; 0x05
    t->tm_wday =  ( buf[3] & 0x07) - 1;
    6114:	84 83       	std	Z+4, r24	; 0x04
    6116:	8f 81       	ldd	r24, Y+7	; 0x07
    6118:	87 70       	andi	r24, 0x07	; 7
    611a:	90 e0       	ldi	r25, 0x00	; 0
    611c:	01 97       	sbiw	r24, 0x01	; 1
    t->tm_mday =  BCDtoBIN( buf[4] & 0x3f) ;
    611e:	95 87       	std	Z+13, r25	; 0x0d
    6120:	84 87       	std	Z+12, r24	; 0x0c
    6122:	88 85       	ldd	r24, Y+8	; 0x08
    6124:	8f 73       	andi	r24, 0x3F	; 63
    6126:	a3 de       	rcall	.-698    	; 0x5e6e <BCDtoBIN>
    6128:	90 e0       	ldi	r25, 0x00	; 0
    612a:	f6 01       	movw	r30, r12
    t->tm_mon=    BCDtoBIN( buf[5] & 0x1f) - 1;
    612c:	97 83       	std	Z+7, r25	; 0x07
    612e:	86 83       	std	Z+6, r24	; 0x06
    6130:	89 85       	ldd	r24, Y+9	; 0x09
    6132:	8f 71       	andi	r24, 0x1F	; 31
    6134:	9c de       	rcall	.-712    	; 0x5e6e <BCDtoBIN>
    6136:	90 e0       	ldi	r25, 0x00	; 0
    6138:	01 97       	sbiw	r24, 0x01	; 1
    613a:	f6 01       	movw	r30, r12
    t->tm_year =  BCDtoBIN( buf[6] & 0xff) + 100;
    613c:	91 87       	std	Z+9, r25	; 0x09
    613e:	80 87       	std	Z+8, r24	; 0x08
    6140:	8a 85       	ldd	r24, Y+10	; 0x0a
    6142:	95 de       	rcall	.-726    	; 0x5e6e <BCDtoBIN>
    6144:	90 e0       	ldi	r25, 0x00	; 0
    6146:	8c 59       	subi	r24, 0x9C	; 156
    6148:	9f 4f       	sbci	r25, 0xFF	; 255
    614a:	f6 01       	movw	r30, r12
    614c:	93 87       	std	Z+11, r25	; 0x0b
        t->tm_min,
        t->tm_sec,
        t->tm_wday);
#endif

    return 1;
    614e:	82 87       	std	Z+10, r24	; 0x0a
}
    6150:	81 e0       	ldi	r24, 0x01	; 1
    6152:	2c 96       	adiw	r28, 0x0c	; 12
    6154:	0f b6       	in	r0, 0x3f	; 63
    6156:	f8 94       	cli
    6158:	de bf       	out	0x3e, r29	; 62
    615a:	0f be       	out	0x3f, r0	; 63
    615c:	cd bf       	out	0x3d, r28	; 61
    615e:	df 91       	pop	r29
    6160:	cf 91       	pop	r28
    6162:	1f 91       	pop	r17
    6164:	0f 91       	pop	r16
    6166:	ef 90       	pop	r14
    6168:	df 90       	pop	r13
    616a:	cf 90       	pop	r12
    616c:	08 95       	ret

0000616e <I2C_Start>:
/*
 *  Move the cursor one character to the right.
 */
void LCD_moveCursorRight()
{
	LCD_moveCursorRightCount(1);
    616e:	64 e1       	ldi	r22, 0x14	; 20
    6170:	99 dc       	rcall	.-1742   	; 0x5aa4 <TWI_StartTransmission>
    6172:	81 11       	cpse	r24, r1
    6174:	07 c0       	rjmp	.+14     	; 0x6184 <I2C_Start+0x16>
    6176:	81 e0       	ldi	r24, 0x01	; 1
    6178:	90 e0       	ldi	r25, 0x00	; 0
    617a:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <LCD_ok+0x1>
    617e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <LCD_ok>
    6182:	04 c0       	rjmp	.+8      	; 0x618c <I2C_Start+0x1e>
    6184:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <LCD_ok+0x1>
    6188:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <LCD_ok>
    618c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <LCD_ok>
    6190:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <LCD_ok+0x1>
    6194:	08 95       	ret

00006196 <I2C_Stop>:
    6196:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <LCD_ok>
    619a:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <LCD_ok+0x1>
    619e:	89 2b       	or	r24, r25
    61a0:	09 f0       	breq	.+2      	; 0x61a4 <I2C_Stop+0xe>
    61a2:	7c cc       	rjmp	.-1800   	; 0x5a9c <TWI_StopTransmission>
    61a4:	08 95       	ret

000061a6 <I2C_Send>:
    61a6:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <LCD_ok>
    61aa:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <LCD_ok+0x1>
    61ae:	21 15       	cp	r18, r1
    61b0:	31 05       	cpc	r19, r1
    61b2:	41 f0       	breq	.+16     	; 0x61c4 <I2C_Send+0x1e>
    61b4:	d7 dc       	rcall	.-1618   	; 0x5b64 <TWI_SendByte>
    61b6:	51 e0       	ldi	r21, 0x01	; 1
    61b8:	40 e0       	ldi	r20, 0x00	; 0
    61ba:	89 2b       	or	r24, r25
    61bc:	09 f0       	breq	.+2      	; 0x61c0 <I2C_Send+0x1a>
    61be:	50 e0       	ldi	r21, 0x00	; 0
    61c0:	25 2f       	mov	r18, r21
    61c2:	34 2f       	mov	r19, r20
    61c4:	c9 01       	movw	r24, r18
    61c6:	08 95       	ret

000061c8 <LCD_putb>:
    61c8:	cf 93       	push	r28
    61ca:	c8 2f       	mov	r28, r24
    61cc:	84 ee       	ldi	r24, 0xE4	; 228
    61ce:	cf df       	rcall	.-98     	; 0x616e <I2C_Start>
    61d0:	89 2b       	or	r24, r25
    61d2:	19 f4       	brne	.+6      	; 0x61da <LCD_putb+0x12>
    61d4:	80 e0       	ldi	r24, 0x00	; 0
    61d6:	90 e0       	ldi	r25, 0x00	; 0
    61d8:	07 c0       	rjmp	.+14     	; 0x61e8 <LCD_putb+0x20>
    61da:	8c 2f       	mov	r24, r28
    61dc:	e4 df       	rcall	.-56     	; 0x61a6 <I2C_Send>
    61de:	89 2b       	or	r24, r25
    61e0:	c9 f3       	breq	.-14     	; 0x61d4 <LCD_putb+0xc>
    61e2:	d9 df       	rcall	.-78     	; 0x6196 <I2C_Stop>
    61e4:	81 e0       	ldi	r24, 0x01	; 1
    61e6:	90 e0       	ldi	r25, 0x00	; 0
    61e8:	cf 91       	pop	r28
    61ea:	08 95       	ret

000061ec <LCD_command>:
    61ec:	cf 93       	push	r28
    61ee:	c8 2f       	mov	r28, r24
    61f0:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lcd_address>
    61f4:	bc df       	rcall	.-136    	; 0x616e <I2C_Start>
    61f6:	89 2b       	or	r24, r25
    61f8:	51 f0       	breq	.+20     	; 0x620e <LCD_command+0x22>
    61fa:	8c e7       	ldi	r24, 0x7C	; 124
    61fc:	d4 df       	rcall	.-88     	; 0x61a6 <I2C_Send>
    61fe:	8c 2f       	mov	r24, r28
    6200:	d2 df       	rcall	.-92     	; 0x61a6 <I2C_Send>
    6202:	c9 df       	rcall	.-110    	; 0x6196 <I2C_Stop>
    6204:	6a e0       	ldi	r22, 0x0A	; 10
    6206:	70 e0       	ldi	r23, 0x00	; 0
    6208:	80 e0       	ldi	r24, 0x00	; 0
    620a:	90 e0       	ldi	r25, 0x00	; 0
    620c:	1c d9       	rcall	.-3528   	; 0x5446 <delayms>
    620e:	cf 91       	pop	r28
    6210:	08 95       	ret

00006212 <LCD_specialCommand>:
    6212:	cf 93       	push	r28
    6214:	c8 2f       	mov	r28, r24
    6216:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lcd_address>
    621a:	a9 df       	rcall	.-174    	; 0x616e <I2C_Start>
    621c:	89 2b       	or	r24, r25
    621e:	51 f0       	breq	.+20     	; 0x6234 <LCD_specialCommand+0x22>
    6220:	8e ef       	ldi	r24, 0xFE	; 254
    6222:	c1 df       	rcall	.-126    	; 0x61a6 <I2C_Send>
    6224:	8c 2f       	mov	r24, r28
    6226:	bf df       	rcall	.-130    	; 0x61a6 <I2C_Send>
    6228:	b6 df       	rcall	.-148    	; 0x6196 <I2C_Stop>
    622a:	62 e3       	ldi	r22, 0x32	; 50
    622c:	70 e0       	ldi	r23, 0x00	; 0
    622e:	80 e0       	ldi	r24, 0x00	; 0
    6230:	90 e0       	ldi	r25, 0x00	; 0
    6232:	09 d9       	rcall	.-3566   	; 0x5446 <delayms>
    6234:	cf 91       	pop	r28
    6236:	08 95       	ret

00006238 <LCD_setCursor>:
    6238:	a8 e0       	ldi	r26, 0x08	; 8
    623a:	b0 e0       	ldi	r27, 0x00	; 0
    623c:	e2 e2       	ldi	r30, 0x22	; 34
    623e:	f1 e3       	ldi	r31, 0x31	; 49
    6240:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
    6244:	98 e0       	ldi	r25, 0x08	; 8
    6246:	e7 e4       	ldi	r30, 0x47	; 71
    6248:	f2 e0       	ldi	r31, 0x02	; 2
    624a:	de 01       	movw	r26, r28
    624c:	11 96       	adiw	r26, 0x01	; 1
    624e:	01 90       	ld	r0, Z+
    6250:	0d 92       	st	X+, r0
    6252:	9a 95       	dec	r25
    6254:	e1 f7       	brne	.-8      	; 0x624e <LCD_setCursor+0x16>
    6256:	64 30       	cpi	r22, 0x04	; 4
    6258:	08 f0       	brcs	.+2      	; 0x625c <LCD_setCursor+0x24>
    625a:	63 e0       	ldi	r22, 0x03	; 3
    625c:	fe 01       	movw	r30, r28
    625e:	31 96       	adiw	r30, 0x01	; 1
    6260:	e6 0f       	add	r30, r22
    6262:	f1 1d       	adc	r31, r1
    6264:	e6 0f       	add	r30, r22
    6266:	f1 1d       	adc	r31, r1
    6268:	90 81       	ld	r25, Z
    626a:	89 0f       	add	r24, r25
    626c:	80 68       	ori	r24, 0x80	; 128
    626e:	d1 df       	rcall	.-94     	; 0x6212 <LCD_specialCommand>
    6270:	28 96       	adiw	r28, 0x08	; 8
    6272:	e2 e0       	ldi	r30, 0x02	; 2
    6274:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

00006278 <LCD_pos>:
    6278:	e0 e1       	ldi	r30, 0x10	; 16
    627a:	f1 e0       	ldi	r31, 0x01	; 1
    627c:	28 2f       	mov	r18, r24
    627e:	30 e0       	ldi	r19, 0x00	; 0
    6280:	31 83       	std	Z+1, r19	; 0x01
    6282:	20 83       	st	Z, r18
    6284:	26 2f       	mov	r18, r22
    6286:	30 e0       	ldi	r19, 0x00	; 0
    6288:	33 83       	std	Z+3, r19	; 0x03
    628a:	22 83       	std	Z+2, r18	; 0x02
    628c:	d5 cf       	rjmp	.-86     	; 0x6238 <LCD_setCursor>
    628e:	08 95       	ret

00006290 <LCD_clear>:
    6290:	8d e2       	ldi	r24, 0x2D	; 45
    6292:	ac df       	rcall	.-168    	; 0x61ec <LCD_command>
    6294:	60 e0       	ldi	r22, 0x00	; 0
    6296:	80 e0       	ldi	r24, 0x00	; 0
    6298:	ef df       	rcall	.-34     	; 0x6278 <LCD_pos>
    629a:	6a e0       	ldi	r22, 0x0A	; 10
    629c:	70 e0       	ldi	r23, 0x00	; 0
    629e:	80 e0       	ldi	r24, 0x00	; 0
    62a0:	90 e0       	ldi	r25, 0x00	; 0
    62a2:	d1 c8       	rjmp	.-3678   	; 0x5446 <delayms>
    62a4:	08 95       	ret

000062a6 <LCD_setFastBacklightRGB>:
} // moveCursorRight


//New command - set backlight with LCD messages or delaymss
void LCD_setFastBacklightRGB(byte r, byte g, byte b)
{
    62a6:	1f 93       	push	r17
    62a8:	cf 93       	push	r28
    62aa:	df 93       	push	r29
    62ac:	18 2f       	mov	r17, r24
    62ae:	d6 2f       	mov	r29, r22
    62b0:	c4 2f       	mov	r28, r20
  //send commands to the display to set backlights
  if( !I2C_Start(lcd_address) )
    62b2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <lcd_address>
    62b6:	5b df       	rcall	.-330    	; 0x616e <I2C_Start>
    62b8:	89 2b       	or	r24, r25
	return;
  I2C_Send(SETTING_COMMAND); //Send special command character
    62ba:	81 f0       	breq	.+32     	; 0x62dc <LCD_setFastBacklightRGB+0x36>
  I2C_Send(SET_RGB_COMMAND); //Send the set RGB character '+' or plus
    62bc:	8c e7       	ldi	r24, 0x7C	; 124
  I2C_Send(r);               //Send the red value
  I2C_Send(g);               //Send the green value
    62be:	73 df       	rcall	.-282    	; 0x61a6 <I2C_Send>
    62c0:	8b e2       	ldi	r24, 0x2B	; 43
  I2C_Send(b);               //Send the blue value
    62c2:	71 df       	rcall	.-286    	; 0x61a6 <I2C_Send>
    62c4:	81 2f       	mov	r24, r17
  I2C_Stop();         //Stop transmission
    62c6:	6f df       	rcall	.-290    	; 0x61a6 <I2C_Send>
    62c8:	8d 2f       	mov	r24, r29
  delayms(10);
    62ca:	6d df       	rcall	.-294    	; 0x61a6 <I2C_Send>
    62cc:	8c 2f       	mov	r24, r28
    62ce:	6b df       	rcall	.-298    	; 0x61a6 <I2C_Send>
    62d0:	62 df       	rcall	.-316    	; 0x6196 <I2C_Stop>
    62d2:	6a e0       	ldi	r22, 0x0A	; 10
    62d4:	70 e0       	ldi	r23, 0x00	; 0
} // setFastBacklight
    62d6:	80 e0       	ldi	r24, 0x00	; 0
    62d8:	90 e0       	ldi	r25, 0x00	; 0
    62da:	b5 d8       	rcall	.-3734   	; 0x5446 <delayms>
    62dc:	df 91       	pop	r29
    62de:	cf 91       	pop	r28
    62e0:	1f 91       	pop	r17
    62e2:	08 95       	ret

000062e4 <LCD_init>:
 *
 */
bool LCD_init(uint8_t addr)
{
  
  if( !I2C_Start(lcd_address = addr) )
    62e4:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <lcd_address>
    62e8:	42 df       	rcall	.-380    	; 0x616e <I2C_Start>
    62ea:	00 97       	sbiw	r24, 0x00	; 0
	return 0;

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    62ec:	61 f1       	breq	.+88     	; 0x6346 <LCD_init+0x62>
    62ee:	8e ef       	ldi	r24, 0xFE	; 254
  I2C_Send(LCD_DISPLAYCONTROL | _displayControl); //Send the display command
    62f0:	5a df       	rcall	.-332    	; 0x61a6 <I2C_Send>
    62f2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_displayControl>

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    62f6:	88 60       	ori	r24, 0x08	; 8
    62f8:	56 df       	rcall	.-340    	; 0x61a6 <I2C_Send>
  I2C_Send(LCD_ENTRYMODESET | _displayMode);      //Send the entry mode command
    62fa:	8e ef       	ldi	r24, 0xFE	; 254
    62fc:	54 df       	rcall	.-344    	; 0x61a6 <I2C_Send>

  I2C_Send(SETTING_COMMAND);                      //Put LCD into setting mode
    62fe:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_displayMode>
  I2C_Send(CLEAR_COMMAND);                        //Send clear display command

  I2C_Send(SETTING_COMMAND);                      //Send special command character
    6302:	84 60       	ori	r24, 0x04	; 4
  I2C_Send(DISABLE_SYSTEM_MESSAGE_DISPLAY);       //Send the set '.' character
    6304:	50 df       	rcall	.-352    	; 0x61a6 <I2C_Send>
    6306:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    6308:	4e df       	rcall	.-356    	; 0x61a6 <I2C_Send>
    630a:	8d e2       	ldi	r24, 0x2D	; 45
  I2C_Send(LCD_SETDDRAMADDR | 0);				// HOME 0,0
    630c:	4c df       	rcall	.-360    	; 0x61a6 <I2C_Send>
    630e:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Stop();
    6310:	4a df       	rcall	.-364    	; 0x61a6 <I2C_Send>
    6312:	8f e2       	ldi	r24, 0x2F	; 47
  delayms(50);                                      //let things settle a bit
    6314:	48 df       	rcall	.-368    	; 0x61a6 <I2C_Send>
    6316:	8e ef       	ldi	r24, 0xFE	; 254
    6318:	46 df       	rcall	.-372    	; 0x61a6 <I2C_Send>
    631a:	80 e8       	ldi	r24, 0x80	; 128
    631c:	44 df       	rcall	.-376    	; 0x61a6 <I2C_Send>
    631e:	3b df       	rcall	.-394    	; 0x6196 <I2C_Stop>

  LCD_setFastBacklightRGB ( 0xC0, 0xC0, 0xC0 );
    6320:	62 e3       	ldi	r22, 0x32	; 50
    6322:	70 e0       	ldi	r23, 0x00	; 0
    6324:	80 e0       	ldi	r24, 0x00	; 0
    6326:	90 e0       	ldi	r25, 0x00	; 0
    6328:	8e d8       	rcall	.-3812   	; 0x5446 <delayms>

  lcd.xpos = 0;
    632a:	40 ec       	ldi	r20, 0xC0	; 192
    632c:	60 ec       	ldi	r22, 0xC0	; 192
    632e:	80 ec       	ldi	r24, 0xC0	; 192
    6330:	ba df       	rcall	.-140    	; 0x62a6 <LCD_setFastBacklightRGB>
  lcd.ypos = 0;
    6332:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <lcd+0x1>
    6336:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <lcd>

  return(1);
    633a:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <lcd+0x3>
} //init
    633e:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <lcd+0x2>
    6342:	81 e0       	ldi	r24, 0x01	; 1
    6344:	90 e0       	ldi	r25, 0x00	; 0
    6346:	08 95       	ret

00006348 <lcd_cleareol>:
	{
		LCD_putb(' ');
		rem--;
	}
	LCD_pos(lcd.xpos = 0,lcd.ypos);
}
    6348:	cf 93       	push	r28
    634a:	df 93       	push	r29
    634c:	c0 91 14 01 	lds	r28, 0x0114	; 0x800114 <lcd+0x4>
    6350:	d0 91 15 01 	lds	r29, 0x0115	; 0x800115 <lcd+0x5>
    6354:	21 97       	sbiw	r28, 0x01	; 1
    6356:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <lcd>
    635a:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <lcd+0x1>
    635e:	c8 1b       	sub	r28, r24
    6360:	d9 0b       	sbc	r29, r25
    6362:	1c 16       	cp	r1, r28
    6364:	1d 06       	cpc	r1, r29
    6366:	24 f4       	brge	.+8      	; 0x6370 <lcd_cleareol+0x28>
    6368:	80 e2       	ldi	r24, 0x20	; 32
    636a:	2e df       	rcall	.-420    	; 0x61c8 <LCD_putb>
    636c:	21 97       	sbiw	r28, 0x01	; 1
    636e:	f9 cf       	rjmp	.-14     	; 0x6362 <lcd_cleareol+0x1a>
    6370:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <lcd+0x4>
    6374:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <lcd+0x5>
    6378:	01 97       	sbiw	r24, 0x01	; 1
    637a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <lcd+0x1>
    637e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <lcd>
    6382:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <lcd+0x2>
    6386:	78 df       	rcall	.-272    	; 0x6278 <LCD_pos>
    6388:	df 91       	pop	r29
    638a:	cf 91       	pop	r28
    638c:	08 95       	ret

0000638e <lcd_putch>:

/// @brief  put character 
/// @param[in] c: character
/// return: void
void lcd_putch(int c)
{
    638e:	cf 93       	push	r28
    6390:	df 93       	push	r29
	int rem;

	if(c < 0 || c > 0x7e)
    6392:	8f 37       	cpi	r24, 0x7F	; 127
    6394:	91 05       	cpc	r25, r1
    6396:	08 f0       	brcs	.+2      	; 0x639a <lcd_putch+0xc>
    6398:	50 c0       	rjmp	.+160    	; 0x643a <lcd_putch+0xac>
    639a:	ec 01       	movw	r28, r24
		return;

	// Normal visible characters
	if(c >= ' ')
    639c:	80 32       	cpi	r24, 0x20	; 32
    639e:	91 05       	cpc	r25, r1
    63a0:	4c f1       	brlt	.+82     	; 0x63f4 <lcd_putch+0x66>
	{
		rem = (lcd.w - 1 - lcd.xpos);
		if( rem <= 0 )
    63a2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <lcd+0x4>
    63a6:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <lcd+0x5>
    63aa:	01 97       	sbiw	r24, 0x01	; 1
    63ac:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <lcd>
    63b0:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <lcd+0x1>
    63b4:	82 1b       	sub	r24, r18
    63b6:	93 0b       	sbc	r25, r19
    63b8:	18 16       	cp	r1, r24
    63ba:	19 06       	cpc	r1, r25
    63bc:	7c f0       	brlt	.+30     	; 0x63dc <lcd_putch+0x4e>
		{
			LCD_pos(++lcd.ypos,lcd.xpos=0);
    63be:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <lcd+0x2>
    63c2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <lcd+0x3>
    63c6:	01 96       	adiw	r24, 0x01	; 1
    63c8:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <lcd+0x3>
    63cc:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <lcd+0x2>
    63d0:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <lcd+0x1>
    63d4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <lcd>
    63d8:	60 e0       	ldi	r22, 0x00	; 0
		}
		(void) LCD_putb(c);
    63da:	4e df       	rcall	.-356    	; 0x6278 <LCD_pos>
    63dc:	8c 2f       	mov	r24, r28
		// uart_putchar(c,0);
		lcd.xpos++;
    63de:	f4 de       	rcall	.-536    	; 0x61c8 <LCD_putb>
    63e0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <lcd>
    63e4:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <lcd+0x1>
    63e8:	01 96       	adiw	r24, 0x01	; 1
    63ea:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <lcd+0x1>
    63ee:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <lcd>
		return;
	}

	// Control characters
	if(c == '\n')
    63f2:	23 c0       	rjmp	.+70     	; 0x643a <lcd_putch+0xac>
    63f4:	8a 30       	cpi	r24, 0x0A	; 10
	{
		// uart_putchar(c,0);
		lcd_cleareol();
    63f6:	91 05       	cpc	r25, r1
    63f8:	91 f4       	brne	.+36     	; 0x641e <lcd_putch+0x90>
		++lcd.ypos;
		lcd.ypos &= 3;
    63fa:	a6 df       	rcall	.-180    	; 0x6348 <lcd_cleareol>
    63fc:	60 91 12 01 	lds	r22, 0x0112	; 0x800112 <lcd+0x2>
    6400:	70 91 13 01 	lds	r23, 0x0113	; 0x800113 <lcd+0x3>
    6404:	6f 5f       	subi	r22, 0xFF	; 255
    6406:	7f 4f       	sbci	r23, 0xFF	; 255
    6408:	63 70       	andi	r22, 0x03	; 3
    640a:	77 27       	eor	r23, r23
    640c:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <lcd+0x3>
    6410:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <lcd+0x2>
		LCD_pos(lcd.xpos=0,lcd.ypos);
    6414:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <lcd+0x1>
    6418:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <lcd>
	}

	if(c == '\f')
    641c:	0c c0       	rjmp	.+24     	; 0x6436 <lcd_putch+0xa8>
	{
		LCD_clear();
    641e:	0c 97       	sbiw	r24, 0x0c	; 12
    6420:	61 f4       	brne	.+24     	; 0x643a <lcd_putch+0xac>
		LCD_pos(lcd.xpos=0,lcd.ypos=0);
    6422:	36 df       	rcall	.-404    	; 0x6290 <LCD_clear>
    6424:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <lcd+0x1>
    6428:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <lcd>
    642c:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <lcd+0x3>
    6430:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <lcd+0x2>
    6434:	60 e0       	ldi	r22, 0x00	; 0
    6436:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    6438:	1f df       	rcall	.-450    	; 0x6278 <LCD_pos>
    643a:	df 91       	pop	r29
    643c:	cf 91       	pop	r28
    643e:	08 95       	ret

00006440 <_putc_win>:


// We do not use the printf structure
static void _putc_win(struct _printf_t *p, char ch)
{
    6440:	fc 01       	movw	r30, r24
	p->sent++;
    6442:	26 81       	ldd	r18, Z+6	; 0x06
    6444:	37 81       	ldd	r19, Z+7	; 0x07
    6446:	2f 5f       	subi	r18, 0xFF	; 255
    6448:	3f 4f       	sbci	r19, 0xFF	; 255
    644a:	37 83       	std	Z+7, r19	; 0x07
    644c:	26 83       	std	Z+6, r18	; 0x06
	lcd_putch(ch);
    644e:	86 2f       	mov	r24, r22
    6450:	90 e0       	ldi	r25, 0x00	; 0
    6452:	9d cf       	rjmp	.-198    	; 0x638e <lcd_putch>
    6454:	08 95       	ret

00006456 <lcd_printf>:
/// @param[in] fmt: printf forat string
/// @param[in] ...: vararg list or arguments
/// @return size of string
MEMSPACE
int lcd_printf(const char *fmt, ... )
{
    6456:	a8 e0       	ldi	r26, 0x08	; 8
    6458:	b0 e0       	ldi	r27, 0x00	; 0
    645a:	e1 e3       	ldi	r30, 0x31	; 49
    645c:	f2 e3       	ldi	r31, 0x32	; 50
    645e:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
    6462:	9e 01       	movw	r18, r28
    6464:	23 5f       	subi	r18, 0xF3	; 243
    6466:	3f 4f       	sbci	r19, 0xFF	; 255
    6468:	f9 01       	movw	r30, r18
    646a:	41 91       	ld	r20, Z+
    646c:	51 91       	ld	r21, Z+
    646e:	9f 01       	movw	r18, r30
    printf_t fn;

    fn.put = _putc_win;
    6470:	80 e2       	ldi	r24, 0x20	; 32
    6472:	92 e3       	ldi	r25, 0x32	; 50
    6474:	9a 83       	std	Y+2, r25	; 0x02
    6476:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    6478:	18 86       	std	Y+8, r1	; 0x08
    647a:	1f 82       	std	Y+7, r1	; 0x07

    va_list va;
    va_start(va, fmt);

    _printf_fn(&fn, fmt, va);
    647c:	60 e8       	ldi	r22, 0x80	; 128
    647e:	ce 01       	movw	r24, r28
    6480:	01 96       	adiw	r24, 0x01	; 1
    6482:	0e 94 04 43 	call	0x8608	; 0x8608 <_printf_fn>

    va_end(va);

	return(fn.sent);

}
    6486:	8f 81       	ldd	r24, Y+7	; 0x07
    6488:	98 85       	ldd	r25, Y+8	; 0x08
    648a:	28 96       	adiw	r28, 0x08	; 8
    648c:	e2 e0       	ldi	r30, 0x02	; 2
    648e:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

00006492 <islower>:
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    6492:	9c 01       	movw	r18, r24
    6494:	21 56       	subi	r18, 0x61	; 97
    6496:	31 09       	sbc	r19, r1
    6498:	81 e0       	ldi	r24, 0x01	; 1
    649a:	90 e0       	ldi	r25, 0x00	; 0
    649c:	2a 31       	cpi	r18, 0x1A	; 26
    649e:	31 05       	cpc	r19, r1
    64a0:	10 f0       	brcs	.+4      	; 0x64a6 <islower+0x14>
    64a2:	80 e0       	ldi	r24, 0x00	; 0
    64a4:	90 e0       	ldi	r25, 0x00	; 0
    64a6:	08 95       	ret

000064a8 <toupper>:
    64a8:	cf 93       	push	r28
    64aa:	df 93       	push	r29
    64ac:	ec 01       	movw	r28, r24
    64ae:	f1 df       	rcall	.-30     	; 0x6492 <islower>
    64b0:	89 2b       	or	r24, r25
    64b2:	19 f0       	breq	.+6      	; 0x64ba <toupper+0x12>
    64b4:	ce 01       	movw	r24, r28
    64b6:	80 97       	sbiw	r24, 0x20	; 32
    64b8:	01 c0       	rjmp	.+2      	; 0x64bc <toupper+0x14>
    64ba:	ce 01       	movw	r24, r28
    64bc:	df 91       	pop	r29
    64be:	cf 91       	pop	r28
    64c0:	08 95       	ret

000064c2 <strcpy>:
    64c2:	fc 01       	movw	r30, r24
    64c4:	db 01       	movw	r26, r22
    64c6:	2d 91       	ld	r18, X+
    64c8:	bd 01       	movw	r22, r26
    64ca:	01 96       	adiw	r24, 0x01	; 1
    64cc:	22 23       	and	r18, r18
    64ce:	11 f0       	breq	.+4      	; 0x64d4 <strcpy+0x12>
    64d0:	20 83       	st	Z, r18
    64d2:	f7 cf       	rjmp	.-18     	; 0x64c2 <strcpy>
    64d4:	10 82       	st	Z, r1
    64d6:	08 95       	ret

000064d8 <strncpy>:
    64d8:	db 01       	movw	r26, r22
    64da:	fc 01       	movw	r30, r24
    64dc:	2d 91       	ld	r18, X+
    64de:	21 11       	cpse	r18, r1
    64e0:	03 c0       	rjmp	.+6      	; 0x64e8 <strncpy+0x10>
    64e2:	4e 0f       	add	r20, r30
    64e4:	5f 1f       	adc	r21, r31
    64e6:	08 c0       	rjmp	.+16     	; 0x64f8 <strncpy+0x20>
    64e8:	41 15       	cp	r20, r1
    64ea:	51 05       	cpc	r21, r1
    64ec:	21 f0       	breq	.+8      	; 0x64f6 <strncpy+0x1e>
    64ee:	21 93       	st	Z+, r18
    64f0:	41 50       	subi	r20, 0x01	; 1
    64f2:	51 09       	sbc	r21, r1
    64f4:	f3 cf       	rjmp	.-26     	; 0x64dc <strncpy+0x4>
    64f6:	08 95       	ret
    64f8:	4e 17       	cp	r20, r30
    64fa:	5f 07       	cpc	r21, r31
    64fc:	11 f0       	breq	.+4      	; 0x6502 <strncpy+0x2a>
    64fe:	11 92       	st	Z+, r1
    6500:	fb cf       	rjmp	.-10     	; 0x64f8 <strncpy+0x20>
    6502:	08 95       	ret

00006504 <strcat>:
    6504:	cf 93       	push	r28
    6506:	df 93       	push	r29
    6508:	d8 2f       	mov	r29, r24
    650a:	c9 2f       	mov	r28, r25
    650c:	28 2f       	mov	r18, r24
    650e:	39 2f       	mov	r19, r25
    6510:	c9 01       	movw	r24, r18
    6512:	2f 5f       	subi	r18, 0xFF	; 255
    6514:	3f 4f       	sbci	r19, 0xFF	; 255
    6516:	fc 01       	movw	r30, r24
    6518:	40 81       	ld	r20, Z
    651a:	41 11       	cpse	r20, r1
    651c:	f9 cf       	rjmp	.-14     	; 0x6510 <strcat+0xc>
    651e:	d1 df       	rcall	.-94     	; 0x64c2 <strcpy>
    6520:	8d 2f       	mov	r24, r29
    6522:	9c 2f       	mov	r25, r28
    6524:	df 91       	pop	r29
    6526:	cf 91       	pop	r28
    6528:	08 95       	ret

0000652a <reverse>:
    652a:	fc 01       	movw	r30, r24
    652c:	01 90       	ld	r0, Z+
    652e:	00 20       	and	r0, r0
    6530:	e9 f7       	brne	.-6      	; 0x652c <reverse+0x2>
    6532:	31 97       	sbiw	r30, 0x01	; 1
    6534:	e8 1b       	sub	r30, r24
    6536:	f9 0b       	sbc	r31, r25
    6538:	af 01       	movw	r20, r30
    653a:	55 95       	asr	r21
    653c:	47 95       	ror	r20
    653e:	e8 0f       	add	r30, r24
    6540:	f9 1f       	adc	r31, r25
    6542:	dc 01       	movw	r26, r24
    6544:	9d 01       	movw	r18, r26
    6546:	28 1b       	sub	r18, r24
    6548:	39 0b       	sbc	r19, r25
    654a:	24 17       	cp	r18, r20
    654c:	35 07       	cpc	r19, r21
    654e:	2c f4       	brge	.+10     	; 0x655a <reverse+0x30>
    6550:	22 91       	ld	r18, -Z
    6552:	3c 91       	ld	r19, X
    6554:	30 83       	st	Z, r19
    6556:	2d 93       	st	X+, r18
    6558:	f5 cf       	rjmp	.-22     	; 0x6544 <reverse+0x1a>
    655a:	08 95       	ret

0000655c <strupper>:
    655c:	cf 93       	push	r28
    655e:	df 93       	push	r29
    6560:	ec 01       	movw	r28, r24
    6562:	88 81       	ld	r24, Y
    6564:	88 23       	and	r24, r24
    6566:	21 f0       	breq	.+8      	; 0x6570 <strupper+0x14>
    6568:	90 e0       	ldi	r25, 0x00	; 0
    656a:	9e df       	rcall	.-196    	; 0x64a8 <toupper>
    656c:	89 93       	st	Y+, r24
    656e:	f9 cf       	rjmp	.-14     	; 0x6562 <strupper+0x6>
    6570:	df 91       	pop	r29
    6572:	cf 91       	pop	r28
    6574:	08 95       	ret

00006576 <strcmp>:
    6576:	dc 01       	movw	r26, r24
    6578:	fb 01       	movw	r30, r22
    657a:	2d 91       	ld	r18, X+
    657c:	41 91       	ld	r20, Z+
    657e:	50 e0       	ldi	r21, 0x00	; 0
    6580:	30 e0       	ldi	r19, 0x00	; 0
    6582:	c9 01       	movw	r24, r18
    6584:	84 1b       	sub	r24, r20
    6586:	95 0b       	sbc	r25, r21
    6588:	11 f4       	brne	.+4      	; 0x658e <strcmp+0x18>
    658a:	45 2b       	or	r20, r21
    658c:	b1 f7       	brne	.-20     	; 0x657a <strcmp+0x4>
    658e:	08 95       	ret

00006590 <strcasecmp>:
    6590:	ef 92       	push	r14
    6592:	ff 92       	push	r15
    6594:	0f 93       	push	r16
    6596:	1f 93       	push	r17
    6598:	cf 93       	push	r28
    659a:	df 93       	push	r29
    659c:	7c 01       	movw	r14, r24
    659e:	8b 01       	movw	r16, r22
    65a0:	f7 01       	movw	r30, r14
    65a2:	81 91       	ld	r24, Z+
    65a4:	7f 01       	movw	r14, r30
    65a6:	90 e0       	ldi	r25, 0x00	; 0
    65a8:	7f df       	rcall	.-258    	; 0x64a8 <toupper>
    65aa:	ec 01       	movw	r28, r24
    65ac:	f8 01       	movw	r30, r16
    65ae:	81 91       	ld	r24, Z+
    65b0:	8f 01       	movw	r16, r30
    65b2:	90 e0       	ldi	r25, 0x00	; 0
    65b4:	79 df       	rcall	.-270    	; 0x64a8 <toupper>
    65b6:	9c 01       	movw	r18, r24
    65b8:	ce 01       	movw	r24, r28
    65ba:	82 1b       	sub	r24, r18
    65bc:	93 0b       	sbc	r25, r19
    65be:	11 f4       	brne	.+4      	; 0x65c4 <strcasecmp+0x34>
    65c0:	23 2b       	or	r18, r19
    65c2:	71 f7       	brne	.-36     	; 0x65a0 <strcasecmp+0x10>
    65c4:	cd b7       	in	r28, 0x3d	; 61
    65c6:	de b7       	in	r29, 0x3e	; 62
    65c8:	e6 e0       	ldi	r30, 0x06	; 6
    65ca:	0c 94 ae e4 	jmp	0x1c95c	; 0x1c95c <__epilogue_restores__+0x18>

000065ce <strncasecmp>:
    65ce:	a0 e0       	ldi	r26, 0x00	; 0
    65d0:	b0 e0       	ldi	r27, 0x00	; 0
    65d2:	ed ee       	ldi	r30, 0xED	; 237
    65d4:	f2 e3       	ldi	r31, 0x32	; 50
    65d6:	0c 94 90 e4 	jmp	0x1c920	; 0x1c920 <__prologue_saves__+0x14>
    65da:	8c 01       	movw	r16, r24
    65dc:	7b 01       	movw	r14, r22
    65de:	6c 01       	movw	r12, r24
    65e0:	c4 0e       	add	r12, r20
    65e2:	d5 1e       	adc	r13, r21
    65e4:	0c 15       	cp	r16, r12
    65e6:	1d 05       	cpc	r17, r13
    65e8:	99 f0       	breq	.+38     	; 0x6610 <strncasecmp+0x42>
    65ea:	f8 01       	movw	r30, r16
    65ec:	81 91       	ld	r24, Z+
    65ee:	8f 01       	movw	r16, r30
    65f0:	90 e0       	ldi	r25, 0x00	; 0
    65f2:	5a df       	rcall	.-332    	; 0x64a8 <toupper>
    65f4:	ec 01       	movw	r28, r24
    65f6:	f7 01       	movw	r30, r14
    65f8:	81 91       	ld	r24, Z+
    65fa:	7f 01       	movw	r14, r30
    65fc:	90 e0       	ldi	r25, 0x00	; 0
    65fe:	54 df       	rcall	.-344    	; 0x64a8 <toupper>
    6600:	9c 01       	movw	r18, r24
    6602:	ce 01       	movw	r24, r28
    6604:	82 1b       	sub	r24, r18
    6606:	93 0b       	sbc	r25, r19
    6608:	29 f4       	brne	.+10     	; 0x6614 <strncasecmp+0x46>
    660a:	23 2b       	or	r18, r19
    660c:	59 f7       	brne	.-42     	; 0x65e4 <strncasecmp+0x16>
    660e:	02 c0       	rjmp	.+4      	; 0x6614 <strncasecmp+0x46>
    6610:	80 e0       	ldi	r24, 0x00	; 0
    6612:	90 e0       	ldi	r25, 0x00	; 0
    6614:	cd b7       	in	r28, 0x3d	; 61
    6616:	de b7       	in	r29, 0x3e	; 62
    6618:	e8 e0       	ldi	r30, 0x08	; 8
    661a:	0c 94 ac e4 	jmp	0x1c958	; 0x1c958 <__epilogue_restores__+0x14>

0000661e <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    661e:	0f 93       	push	r16
    6620:	1f 93       	push	r17
    6622:	cf 93       	push	r28
    6624:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    6626:	00 97       	sbiw	r24, 0x00	; 0
    6628:	99 f0       	breq	.+38     	; 0x6650 <stralloc+0x32>
    662a:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    662c:	fc 01       	movw	r30, r24
    662e:	01 90       	ld	r0, Z+
    6630:	00 20       	and	r0, r0
    6632:	e9 f7       	brne	.-6      	; 0x662e <stralloc+0x10>
    6634:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    6636:	61 e0       	ldi	r22, 0x01	; 1
    6638:	70 e0       	ldi	r23, 0x00	; 0
    663a:	8c 1b       	sub	r24, r28
    663c:	9d 0b       	sbc	r25, r29
    663e:	0e 94 75 29 	call	0x52ea	; 0x52ea <safecalloc>
    6642:	8c 01       	movw	r16, r24
    if(!ptr)
    6644:	00 97       	sbiw	r24, 0x00	; 0
    6646:	21 f0       	breq	.+8      	; 0x6650 <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    6648:	be 01       	movw	r22, r28
    664a:	3b df       	rcall	.-394    	; 0x64c2 <strcpy>
    return(ptr);
    664c:	c8 01       	movw	r24, r16
    664e:	02 c0       	rjmp	.+4      	; 0x6654 <stralloc+0x36>
    6650:	80 e0       	ldi	r24, 0x00	; 0
    6652:	90 e0       	ldi	r25, 0x00	; 0
}
    6654:	df 91       	pop	r29
    6656:	cf 91       	pop	r28
    6658:	1f 91       	pop	r17
    665a:	0f 91       	pop	r16
    665c:	08 95       	ret

0000665e <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    665e:	00 d0       	rcall	.+0      	; 0x6660 <sep+0x2>
    6660:	1f 92       	push	r1
    6662:	85 ee       	ldi	r24, 0xE5	; 229
    6664:	94 e0       	ldi	r25, 0x04	; 4
    6666:	a0 e0       	ldi	r26, 0x00	; 0
    6668:	ed b7       	in	r30, 0x3d	; 61
    666a:	fe b7       	in	r31, 0x3e	; 62
    666c:	81 83       	std	Z+1, r24	; 0x01
    666e:	92 83       	std	Z+2, r25	; 0x02
    6670:	a3 83       	std	Z+3, r26	; 0x03
    6672:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    6676:	0f 90       	pop	r0
    6678:	0f 90       	pop	r0
    667a:	0f 90       	pop	r0
    667c:	08 95       	ret

0000667e <trim_tail>:
    667e:	00 97       	sbiw	r24, 0x00	; 0
    6680:	69 f0       	breq	.+26     	; 0x669c <trim_tail+0x1e>
    6682:	fc 01       	movw	r30, r24
    6684:	01 90       	ld	r0, Z+
    6686:	00 20       	and	r0, r0
    6688:	e9 f7       	brne	.-6      	; 0x6684 <trim_tail+0x6>
    668a:	31 97       	sbiw	r30, 0x01	; 1
    668c:	e8 17       	cp	r30, r24
    668e:	f9 07       	cpc	r31, r25
    6690:	29 f0       	breq	.+10     	; 0x669c <trim_tail+0x1e>
    6692:	22 91       	ld	r18, -Z
    6694:	21 32       	cpi	r18, 0x21	; 33
    6696:	10 f4       	brcc	.+4      	; 0x669c <trim_tail+0x1e>
    6698:	10 82       	st	Z, r1
    669a:	f8 cf       	rjmp	.-16     	; 0x668c <trim_tail+0xe>
    669c:	08 95       	ret

0000669e <skipspaces>:
    669e:	00 97       	sbiw	r24, 0x00	; 0
    66a0:	39 f0       	breq	.+14     	; 0x66b0 <skipspaces+0x12>
    66a2:	fc 01       	movw	r30, r24
    66a4:	cf 01       	movw	r24, r30
    66a6:	21 91       	ld	r18, Z+
    66a8:	20 32       	cpi	r18, 0x20	; 32
    66aa:	e1 f3       	breq	.-8      	; 0x66a4 <skipspaces+0x6>
    66ac:	29 30       	cpi	r18, 0x09	; 9
    66ae:	d1 f3       	breq	.-12     	; 0x66a4 <skipspaces+0x6>
    66b0:	08 95       	ret

000066b2 <MATCH>:
    66b2:	cf 93       	push	r28
    66b4:	df 93       	push	r29
    66b6:	fb 01       	movw	r30, r22
    66b8:	01 90       	ld	r0, Z+
    66ba:	00 20       	and	r0, r0
    66bc:	e9 f7       	brne	.-6      	; 0x66b8 <MATCH+0x6>
    66be:	31 97       	sbiw	r30, 0x01	; 1
    66c0:	ef 01       	movw	r28, r30
    66c2:	c6 1b       	sub	r28, r22
    66c4:	d7 0b       	sbc	r29, r23
    66c6:	57 df       	rcall	.-338    	; 0x6576 <strcmp>
    66c8:	89 2b       	or	r24, r25
    66ca:	11 f4       	brne	.+4      	; 0x66d0 <MATCH+0x1e>
    66cc:	ce 01       	movw	r24, r28
    66ce:	02 c0       	rjmp	.+4      	; 0x66d4 <MATCH+0x22>
    66d0:	80 e0       	ldi	r24, 0x00	; 0
    66d2:	90 e0       	ldi	r25, 0x00	; 0
    66d4:	df 91       	pop	r29
    66d6:	cf 91       	pop	r28
    66d8:	08 95       	ret

000066da <MATCHI>:
    66da:	cf 93       	push	r28
    66dc:	df 93       	push	r29
    66de:	fb 01       	movw	r30, r22
    66e0:	01 90       	ld	r0, Z+
    66e2:	00 20       	and	r0, r0
    66e4:	e9 f7       	brne	.-6      	; 0x66e0 <MATCHI+0x6>
    66e6:	31 97       	sbiw	r30, 0x01	; 1
    66e8:	ef 01       	movw	r28, r30
    66ea:	c6 1b       	sub	r28, r22
    66ec:	d7 0b       	sbc	r29, r23
    66ee:	50 df       	rcall	.-352    	; 0x6590 <strcasecmp>
    66f0:	89 2b       	or	r24, r25
    66f2:	11 f4       	brne	.+4      	; 0x66f8 <MATCHI+0x1e>
    66f4:	ce 01       	movw	r24, r28
    66f6:	02 c0       	rjmp	.+4      	; 0x66fc <MATCHI+0x22>
    66f8:	80 e0       	ldi	r24, 0x00	; 0
    66fa:	90 e0       	ldi	r25, 0x00	; 0
    66fc:	df 91       	pop	r29
    66fe:	cf 91       	pop	r28
    6700:	08 95       	ret

00006702 <MATCHARGS>:
    6702:	a9 e0       	ldi	r26, 0x09	; 9
    6704:	b0 e0       	ldi	r27, 0x00	; 0
    6706:	e7 e8       	ldi	r30, 0x87	; 135
    6708:	f3 e3       	ldi	r31, 0x33	; 51
    670a:	0c 94 92 e4 	jmp	0x1c924	; 0x1c924 <__prologue_saves__+0x18>
    670e:	eb 01       	movw	r28, r22
    6710:	8a 01       	movw	r16, r20
    6712:	79 01       	movw	r14, r18
    6714:	e2 df       	rcall	.-60     	; 0x66da <MATCHI>
    6716:	00 97       	sbiw	r24, 0x00	; 0
    6718:	c1 f0       	breq	.+48     	; 0x674a <MATCHARGS+0x48>
    671a:	e0 16       	cp	r14, r16
    671c:	f1 06       	cpc	r15, r17
    671e:	9c f4       	brge	.+38     	; 0x6746 <MATCHARGS+0x44>
    6720:	ed b7       	in	r30, 0x3d	; 61
    6722:	fe b7       	in	r31, 0x3e	; 62
    6724:	f1 86       	std	Z+9, r15	; 0x09
    6726:	e0 86       	std	Z+8, r14	; 0x08
    6728:	17 83       	std	Z+7, r17	; 0x07
    672a:	06 83       	std	Z+6, r16	; 0x06
    672c:	d5 83       	std	Z+5, r29	; 0x05
    672e:	c4 83       	std	Z+4, r28	; 0x04
    6730:	8f eb       	ldi	r24, 0xBF	; 191
    6732:	94 e0       	ldi	r25, 0x04	; 4
    6734:	a0 e0       	ldi	r26, 0x00	; 0
    6736:	81 83       	std	Z+1, r24	; 0x01
    6738:	92 83       	std	Z+2, r25	; 0x02
    673a:	a3 83       	std	Z+3, r26	; 0x03
    673c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    6740:	80 e0       	ldi	r24, 0x00	; 0
    6742:	90 e0       	ldi	r25, 0x00	; 0
    6744:	02 c0       	rjmp	.+4      	; 0x674a <MATCHARGS+0x48>
    6746:	81 e0       	ldi	r24, 0x01	; 1
    6748:	90 e0       	ldi	r25, 0x00	; 0
    674a:	cd b7       	in	r28, 0x3d	; 61
    674c:	de b7       	in	r29, 0x3e	; 62
    674e:	29 96       	adiw	r28, 0x09	; 9
    6750:	e6 e0       	ldi	r30, 0x06	; 6
    6752:	0c 94 ae e4 	jmp	0x1c95c	; 0x1c95c <__epilogue_restores__+0x18>

00006756 <MATCHI_LEN>:
    6756:	cf 93       	push	r28
    6758:	df 93       	push	r29
    675a:	00 97       	sbiw	r24, 0x00	; 0
    675c:	89 f0       	breq	.+34     	; 0x6780 <MATCHI_LEN+0x2a>
    675e:	61 15       	cp	r22, r1
    6760:	71 05       	cpc	r23, r1
    6762:	71 f0       	breq	.+28     	; 0x6780 <MATCHI_LEN+0x2a>
    6764:	eb 01       	movw	r28, r22
    6766:	09 90       	ld	r0, Y+
    6768:	00 20       	and	r0, r0
    676a:	e9 f7       	brne	.-6      	; 0x6766 <MATCHI_LEN+0x10>
    676c:	21 97       	sbiw	r28, 0x01	; 1
    676e:	c6 1b       	sub	r28, r22
    6770:	d7 0b       	sbc	r29, r23
    6772:	31 f0       	breq	.+12     	; 0x6780 <MATCHI_LEN+0x2a>
    6774:	ae 01       	movw	r20, r28
    6776:	2b df       	rcall	.-426    	; 0x65ce <strncasecmp>
    6778:	89 2b       	or	r24, r25
    677a:	11 f4       	brne	.+4      	; 0x6780 <MATCHI_LEN+0x2a>
    677c:	ce 01       	movw	r24, r28
    677e:	02 c0       	rjmp	.+4      	; 0x6784 <MATCHI_LEN+0x2e>
    6780:	80 e0       	ldi	r24, 0x00	; 0
    6782:	90 e0       	ldi	r25, 0x00	; 0
    6784:	df 91       	pop	r29
    6786:	cf 91       	pop	r28
    6788:	08 95       	ret

0000678a <split_args>:
    678a:	a0 e0       	ldi	r26, 0x00	; 0
    678c:	b0 e0       	ldi	r27, 0x00	; 0
    678e:	eb ec       	ldi	r30, 0xCB	; 203
    6790:	f3 e3       	ldi	r31, 0x33	; 51
    6792:	0c 94 90 e4 	jmp	0x1c920	; 0x1c920 <__prologue_saves__+0x14>
    6796:	dc 01       	movw	r26, r24
    6798:	6a 01       	movw	r12, r20
    679a:	8b 01       	movw	r16, r22
    679c:	fb 01       	movw	r30, r22
    679e:	80 e0       	ldi	r24, 0x00	; 0
    67a0:	90 e0       	ldi	r25, 0x00	; 0
    67a2:	8c 15       	cp	r24, r12
    67a4:	9d 05       	cpc	r25, r13
    67a6:	24 f4       	brge	.+8      	; 0x67b0 <split_args+0x26>
    67a8:	11 92       	st	Z+, r1
    67aa:	11 92       	st	Z+, r1
    67ac:	01 96       	adiw	r24, 0x01	; 1
    67ae:	f9 cf       	rjmp	.-14     	; 0x67a2 <split_args+0x18>
    67b0:	c1 14       	cp	r12, r1
    67b2:	d1 04       	cpc	r13, r1
    67b4:	d9 f1       	breq	.+118    	; 0x682c <split_args+0xa2>
    67b6:	10 97       	sbiw	r26, 0x00	; 0
    67b8:	c9 f1       	breq	.+114    	; 0x682c <split_args+0xa2>
    67ba:	ee 24       	eor	r14, r14
    67bc:	e3 94       	inc	r14
    67be:	f1 2c       	mov	r15, r1
    67c0:	c0 e0       	ldi	r28, 0x00	; 0
    67c2:	d0 e0       	ldi	r29, 0x00	; 0
    67c4:	8c 91       	ld	r24, X
    67c6:	88 23       	and	r24, r24
    67c8:	b1 f1       	breq	.+108    	; 0x6836 <split_args+0xac>
    67ca:	cc 15       	cp	r28, r12
    67cc:	dd 05       	cpc	r29, r13
    67ce:	9c f5       	brge	.+102    	; 0x6836 <split_args+0xac>
    67d0:	cd 01       	movw	r24, r26
    67d2:	65 df       	rcall	.-310    	; 0x669e <skipspaces>
    67d4:	dc 01       	movw	r26, r24
    67d6:	2c 91       	ld	r18, X
    67d8:	22 23       	and	r18, r18
    67da:	69 f1       	breq	.+90     	; 0x6836 <split_args+0xac>
    67dc:	22 32       	cpi	r18, 0x22	; 34
    67de:	79 f4       	brne	.+30     	; 0x67fe <split_args+0x74>
    67e0:	fc 01       	movw	r30, r24
    67e2:	31 96       	adiw	r30, 0x01	; 1
    67e4:	d8 01       	movw	r26, r16
    67e6:	ed 93       	st	X+, r30
    67e8:	fc 93       	st	X, r31
    67ea:	df 01       	movw	r26, r30
    67ec:	80 81       	ld	r24, Z
    67ee:	31 96       	adiw	r30, 0x01	; 1
    67f0:	88 23       	and	r24, r24
    67f2:	a9 f0       	breq	.+42     	; 0x681e <split_args+0x94>
    67f4:	82 32       	cpi	r24, 0x22	; 34
    67f6:	c9 f7       	brne	.-14     	; 0x67ea <split_args+0x60>
    67f8:	1c 92       	st	X, r1
    67fa:	df 01       	movw	r26, r30
    67fc:	10 c0       	rjmp	.+32     	; 0x681e <split_args+0x94>
    67fe:	f8 01       	movw	r30, r16
    6800:	91 83       	std	Z+1, r25	; 0x01
    6802:	80 83       	st	Z, r24
    6804:	fc 01       	movw	r30, r24
    6806:	2e 2f       	mov	r18, r30
    6808:	9f 2f       	mov	r25, r31
    680a:	81 91       	ld	r24, Z+
    680c:	3f ed       	ldi	r19, 0xDF	; 223
    680e:	38 0f       	add	r19, r24
    6810:	3e 35       	cpi	r19, 0x5E	; 94
    6812:	c8 f3       	brcs	.-14     	; 0x6806 <split_args+0x7c>
    6814:	88 23       	and	r24, r24
    6816:	69 f0       	breq	.+26     	; 0x6832 <split_args+0xa8>
    6818:	a2 2f       	mov	r26, r18
    681a:	b9 2f       	mov	r27, r25
    681c:	1d 92       	st	X+, r1
    681e:	21 96       	adiw	r28, 0x01	; 1
    6820:	ff ef       	ldi	r31, 0xFF	; 255
    6822:	ef 1a       	sub	r14, r31
    6824:	ff 0a       	sbc	r15, r31
    6826:	0e 5f       	subi	r16, 0xFE	; 254
    6828:	1f 4f       	sbci	r17, 0xFF	; 255
    682a:	cc cf       	rjmp	.-104    	; 0x67c4 <split_args+0x3a>
    682c:	80 e0       	ldi	r24, 0x00	; 0
    682e:	90 e0       	ldi	r25, 0x00	; 0
    6830:	03 c0       	rjmp	.+6      	; 0x6838 <split_args+0xae>
    6832:	c7 01       	movw	r24, r14
    6834:	01 c0       	rjmp	.+2      	; 0x6838 <split_args+0xae>
    6836:	ce 01       	movw	r24, r28
    6838:	cd b7       	in	r28, 0x3d	; 61
    683a:	de b7       	in	r29, 0x3e	; 62
    683c:	e8 e0       	ldi	r30, 0x08	; 8
    683e:	0c 94 ac e4 	jmp	0x1c958	; 0x1c958 <__epilogue_restores__+0x14>

00006842 <get_token>:
    6842:	ef 92       	push	r14
    6844:	ff 92       	push	r15
    6846:	0f 93       	push	r16
    6848:	1f 93       	push	r17
    684a:	cf 93       	push	r28
    684c:	df 93       	push	r29
    684e:	eb 01       	movw	r28, r22
    6850:	8a 01       	movw	r16, r20
    6852:	18 82       	st	Y, r1
    6854:	00 97       	sbiw	r24, 0x00	; 0
    6856:	89 f1       	breq	.+98     	; 0x68ba <get_token+0x78>
    6858:	fc 01       	movw	r30, r24
    685a:	20 81       	ld	r18, Z
    685c:	22 23       	and	r18, r18
    685e:	79 f1       	breq	.+94     	; 0x68be <get_token+0x7c>
    6860:	1e df       	rcall	.-452    	; 0x669e <skipspaces>
    6862:	7c 01       	movw	r14, r24
    6864:	0c df       	rcall	.-488    	; 0x667e <trim_tail>
    6866:	f7 01       	movw	r30, r14
    6868:	cf 01       	movw	r24, r30
    686a:	21 91       	ld	r18, Z+
    686c:	21 32       	cpi	r18, 0x21	; 33
    686e:	e0 f0       	brcs	.+56     	; 0x68a8 <get_token+0x66>
    6870:	10 16       	cp	r1, r16
    6872:	11 06       	cpc	r1, r17
    6874:	cc f4       	brge	.+50     	; 0x68a8 <get_token+0x66>
    6876:	22 32       	cpi	r18, 0x22	; 34
    6878:	79 f4       	brne	.+30     	; 0x6898 <get_token+0x56>
    687a:	fc 01       	movw	r30, r24
    687c:	31 96       	adiw	r30, 0x01	; 1
    687e:	0c 0f       	add	r16, r28
    6880:	1d 1f       	adc	r17, r29
    6882:	cf 01       	movw	r24, r30
    6884:	21 91       	ld	r18, Z+
    6886:	22 23       	and	r18, r18
    6888:	79 f0       	breq	.+30     	; 0x68a8 <get_token+0x66>
    688a:	22 32       	cpi	r18, 0x22	; 34
    688c:	59 f0       	breq	.+22     	; 0x68a4 <get_token+0x62>
    688e:	c0 17       	cp	r28, r16
    6890:	d1 07       	cpc	r29, r17
    6892:	51 f0       	breq	.+20     	; 0x68a8 <get_token+0x66>
    6894:	29 93       	st	Y+, r18
    6896:	f5 cf       	rjmp	.-22     	; 0x6882 <get_token+0x40>
    6898:	2c 32       	cpi	r18, 0x2C	; 44
    689a:	31 f0       	breq	.+12     	; 0x68a8 <get_token+0x66>
    689c:	29 93       	st	Y+, r18
    689e:	01 50       	subi	r16, 0x01	; 1
    68a0:	11 09       	sbc	r17, r1
    68a2:	e2 cf       	rjmp	.-60     	; 0x6868 <get_token+0x26>
    68a4:	cf 01       	movw	r24, r30
    68a6:	18 82       	st	Y, r1
    68a8:	fa de       	rcall	.-524    	; 0x669e <skipspaces>
    68aa:	fc 01       	movw	r30, r24
    68ac:	80 81       	ld	r24, Z
    68ae:	8c 32       	cpi	r24, 0x2C	; 44
    68b0:	09 f4       	brne	.+2      	; 0x68b4 <get_token+0x72>
    68b2:	31 96       	adiw	r30, 0x01	; 1
    68b4:	18 82       	st	Y, r1
    68b6:	cf 01       	movw	r24, r30
    68b8:	02 c0       	rjmp	.+4      	; 0x68be <get_token+0x7c>
    68ba:	80 e0       	ldi	r24, 0x00	; 0
    68bc:	90 e0       	ldi	r25, 0x00	; 0
    68be:	cd b7       	in	r28, 0x3d	; 61
    68c0:	de b7       	in	r29, 0x3e	; 62
    68c2:	e6 e0       	ldi	r30, 0x06	; 6
    68c4:	0c 94 ae e4 	jmp	0x1c95c	; 0x1c95c <__epilogue_restores__+0x18>

000068c8 <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{ 
    68c8:	a2 e0       	ldi	r26, 0x02	; 2
    68ca:	b0 e0       	ldi	r27, 0x00	; 0
    68cc:	ea e6       	ldi	r30, 0x6A	; 106
    68ce:	f4 e3       	ldi	r31, 0x34	; 52
    68d0:	0c 94 94 e4 	jmp	0x1c928	; 0x1c928 <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    68d4:	00 97       	sbiw	r24, 0x00	; 0
    68d6:	79 f1       	breq	.+94     	; 0x6936 <get_value+0x6e>
    68d8:	fc 01       	movw	r30, r24
    68da:	20 81       	ld	r18, Z
    68dc:	22 23       	and	r18, r18
        return(0);

    ptr = skipspaces(str);
    68de:	59 f1       	breq	.+86     	; 0x6936 <get_value+0x6e>
    68e0:	de de       	rcall	.-580    	; 0x669e <skipspaces>
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    68e2:	8c 01       	movw	r16, r24
    68e4:	6f e4       	ldi	r22, 0x4F	; 79
    68e6:	72 e0       	ldi	r23, 0x02	; 2
    68e8:	36 df       	rcall	.-404    	; 0x6756 <MATCHI_LEN>
    68ea:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 16;
        ptr += ret;
    68ec:	29 f0       	breq	.+10     	; 0x68f8 <get_value+0x30>
    68ee:	08 0f       	add	r16, r24
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    68f0:	19 1f       	adc	r17, r25
    68f2:	40 e1       	ldi	r20, 0x10	; 16
    68f4:	50 e0       	ldi	r21, 0x00	; 0
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    68f6:	18 c0       	rjmp	.+48     	; 0x6928 <get_value+0x60>
    68f8:	62 e5       	ldi	r22, 0x52	; 82
    68fa:	72 e0       	ldi	r23, 0x02	; 2
    68fc:	c8 01       	movw	r24, r16
    68fe:	2b df       	rcall	.-426    	; 0x6756 <MATCHI_LEN>
    6900:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 8;
        ptr += ret;
    6902:	29 f0       	breq	.+10     	; 0x690e <get_value+0x46>
    6904:	08 0f       	add	r16, r24
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    6906:	19 1f       	adc	r17, r25
    6908:	48 e0       	ldi	r20, 0x08	; 8
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    690a:	50 e0       	ldi	r21, 0x00	; 0
    690c:	0d c0       	rjmp	.+26     	; 0x6928 <get_value+0x60>
    690e:	65 e5       	ldi	r22, 0x55	; 85
    6910:	72 e0       	ldi	r23, 0x02	; 2
    6912:	c8 01       	movw	r24, r16
    6914:	20 df       	rcall	.-448    	; 0x6756 <MATCHI_LEN>
    {
        base = 2;
        ptr += ret;
    6916:	00 97       	sbiw	r24, 0x00	; 0
    6918:	29 f0       	breq	.+10     	; 0x6924 <get_value+0x5c>
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    691a:	08 0f       	add	r16, r24
    691c:	19 1f       	adc	r17, r25
    691e:	42 e0       	ldi	r20, 0x02	; 2

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    6920:	50 e0       	ldi	r21, 0x00	; 0
    6922:	02 c0       	rjmp	.+4      	; 0x6928 <get_value+0x60>
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    6924:	4a e0       	ldi	r20, 0x0A	; 10
    6926:	50 e0       	ldi	r21, 0x00	; 0
    6928:	be 01       	movw	r22, r28
    692a:	6f 5f       	subi	r22, 0xFF	; 255
    692c:	7f 4f       	sbci	r23, 0xFF	; 255
    692e:	c8 01       	movw	r24, r16
    6930:	0e 94 9f 47 	call	0x8f3e	; 0x8f3e <strtol>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    6934:	03 c0       	rjmp	.+6      	; 0x693c <get_value+0x74>
    6936:	60 e0       	ldi	r22, 0x00	; 0
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    6938:	70 e0       	ldi	r23, 0x00	; 0
    693a:	cb 01       	movw	r24, r22
    693c:	22 96       	adiw	r28, 0x02	; 2
    693e:	e4 e0       	ldi	r30, 0x04	; 4
    6940:	0c 94 b0 e4 	jmp	0x1c960	; 0x1c960 <__epilogue_restores__+0x1c>

00006944 <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    6944:	78 94       	sei
    6946:	08 95       	ret

00006948 <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    6948:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;   // No Prescale
    694a:	89 e0       	ldi	r24, 0x09	; 9
    694c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    6950:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);    // 0 .. count
    6954:	8f e1       	ldi	r24, 0x1F	; 31
    6956:	9e e4       	ldi	r25, 0x4E	; 78
    6958:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    695c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);              //Enable the Output Compare A interrupt
    6960:	ef e6       	ldi	r30, 0x6F	; 111
    6962:	f0 e0       	ldi	r31, 0x00	; 0
    6964:	80 81       	ld	r24, Z
    6966:	82 60       	ori	r24, 0x02	; 2
    6968:	80 83       	st	Z, r24
    sei();
    696a:	78 94       	sei
    696c:	08 95       	ret

0000696e <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    696e:	1f 92       	push	r1
    6970:	0f 92       	push	r0
    6972:	0f b6       	in	r0, 0x3f	; 63
    6974:	0f 92       	push	r0
    6976:	11 24       	eor	r1, r1
    6978:	0b b6       	in	r0, 0x3b	; 59
    697a:	0f 92       	push	r0
    697c:	2f 93       	push	r18
    697e:	3f 93       	push	r19
    6980:	4f 93       	push	r20
    6982:	5f 93       	push	r21
    6984:	6f 93       	push	r22
    6986:	7f 93       	push	r23
    6988:	8f 93       	push	r24
    698a:	9f 93       	push	r25
    698c:	af 93       	push	r26
    698e:	bf 93       	push	r27
    6990:	ef 93       	push	r30
    execute_timers();
    6992:	ff 93       	push	r31
}
    6994:	36 d2       	rcall	.+1132   	; 0x6e02 <execute_timers>
    6996:	ff 91       	pop	r31
    6998:	ef 91       	pop	r30
    699a:	bf 91       	pop	r27
    699c:	af 91       	pop	r26
    699e:	9f 91       	pop	r25
    69a0:	8f 91       	pop	r24
    69a2:	7f 91       	pop	r23
    69a4:	6f 91       	pop	r22
    69a6:	5f 91       	pop	r21
    69a8:	4f 91       	pop	r20
    69aa:	3f 91       	pop	r19
    69ac:	2f 91       	pop	r18
    69ae:	0f 90       	pop	r0
    69b0:	0b be       	out	0x3b, r0	; 59
    69b2:	0f 90       	pop	r0
    69b4:	0f be       	out	0x3f, r0	; 63
    69b6:	0f 90       	pop	r0
    69b8:	1f 90       	pop	r1
    69ba:	18 95       	reti

000069bc <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    69bc:	0f 93       	push	r16
    69be:	1f 93       	push	r17
    69c0:	cf 93       	push	r28
    69c2:	df 93       	push	r29
    69c4:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

    // disable interrupts
    cli();
    69c6:	f8 94       	cli

    count1 = TCNT1;
    69c8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    69cc:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    69d0:	80 91 e2 19 	lds	r24, 0x19E2	; 0x8019e2 <__clock>
    69d4:	90 91 e3 19 	lds	r25, 0x19E3	; 0x8019e3 <__clock+0x1>
    69d8:	a0 91 e4 19 	lds	r26, 0x19E4	; 0x8019e4 <__clock+0x2>
    69dc:	b0 91 e5 19 	lds	r27, 0x19E5	; 0x8019e5 <__clock+0x3>
    69e0:	80 83       	st	Z, r24
    69e2:	91 83       	std	Z+1, r25	; 0x01
    69e4:	a2 83       	std	Z+2, r26	; 0x02
    69e6:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    69e8:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <__clock+0x4>
    69ec:	90 91 e7 19 	lds	r25, 0x19E7	; 0x8019e7 <__clock+0x5>
    69f0:	a0 91 e8 19 	lds	r26, 0x19E8	; 0x8019e8 <__clock+0x6>
    69f4:	b0 91 e9 19 	lds	r27, 0x19E9	; 0x8019e9 <__clock+0x7>
    69f8:	84 83       	std	Z+4, r24	; 0x04
    69fa:	95 83       	std	Z+5, r25	; 0x05
    69fc:	a6 83       	std	Z+6, r26	; 0x06
    69fe:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    6a00:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6a04:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    6a08:	b1 9b       	sbis	0x16, 1	; 22
    6a0a:	03 c0       	rjmp	.+6      	; 0x6a12 <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6a0c:	c0 e0       	ldi	r28, 0x00	; 0
    6a0e:	d0 e0       	ldi	r29, 0x00	; 0
    6a10:	3f c0       	rjmp	.+126    	; 0x6a90 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    6a12:	82 17       	cp	r24, r18
    6a14:	93 07       	cpc	r25, r19
    6a16:	d0 f1       	brcs	.+116    	; 0x6a8c <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6a18:	c0 e0       	ldi	r28, 0x00	; 0
    6a1a:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    6a1c:	40 e0       	ldi	r20, 0x00	; 0
    6a1e:	50 e0       	ldi	r21, 0x00	; 0
    6a20:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    6a22:	9a 01       	movw	r18, r20
    6a24:	ab 01       	movw	r20, r22
    6a26:	28 0f       	add	r18, r24
    6a28:	39 1f       	adc	r19, r25
    6a2a:	41 1d       	adc	r20, r1
    6a2c:	51 1d       	adc	r21, r1

    // enable interrupts
    sei();
    6a2e:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6a30:	a2 e3       	ldi	r26, 0x32	; 50
    6a32:	b0 e0       	ldi	r27, 0x00	; 0
    6a34:	0e 94 66 e4 	call	0x1c8cc	; 0x1c8cc <__muluhisi3>
    6a38:	04 81       	ldd	r16, Z+4	; 0x04
    6a3a:	15 81       	ldd	r17, Z+5	; 0x05
    6a3c:	26 81       	ldd	r18, Z+6	; 0x06
    6a3e:	37 81       	ldd	r19, Z+7	; 0x07
    6a40:	dc 01       	movw	r26, r24
    6a42:	cb 01       	movw	r24, r22
    6a44:	80 0f       	add	r24, r16
    6a46:	91 1f       	adc	r25, r17
    6a48:	a2 1f       	adc	r26, r18
    6a4a:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    6a4c:	81 15       	cp	r24, r1
    6a4e:	2a ec       	ldi	r18, 0xCA	; 202
    6a50:	92 07       	cpc	r25, r18
    6a52:	2a e9       	ldi	r18, 0x9A	; 154
    6a54:	a2 07       	cpc	r26, r18
    6a56:	2b e3       	ldi	r18, 0x3B	; 59
    6a58:	b2 07       	cpc	r27, r18
    6a5a:	2c f4       	brge	.+10     	; 0x6a66 <clock_gettime+0xaa>
    // enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6a5c:	84 83       	std	Z+4, r24	; 0x04
    6a5e:	95 83       	std	Z+5, r25	; 0x05
    6a60:	a6 83       	std	Z+6, r26	; 0x06
    6a62:	b7 83       	std	Z+7, r27	; 0x07
    6a64:	1a c0       	rjmp	.+52     	; 0x6a9a <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    6a66:	9a 5c       	subi	r25, 0xCA	; 202
    6a68:	aa 49       	sbci	r26, 0x9A	; 154
    6a6a:	bb 43       	sbci	r27, 0x3B	; 59
    6a6c:	84 83       	std	Z+4, r24	; 0x04
    6a6e:	95 83       	std	Z+5, r25	; 0x05
    6a70:	a6 83       	std	Z+6, r26	; 0x06
    6a72:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    6a74:	80 81       	ld	r24, Z
    6a76:	91 81       	ldd	r25, Z+1	; 0x01
    6a78:	a2 81       	ldd	r26, Z+2	; 0x02
    6a7a:	b3 81       	ldd	r27, Z+3	; 0x03
    6a7c:	01 96       	adiw	r24, 0x01	; 1
    6a7e:	a1 1d       	adc	r26, r1
    6a80:	b1 1d       	adc	r27, r1
    6a82:	80 83       	st	Z, r24
    6a84:	91 83       	std	Z+1, r25	; 0x01
    6a86:	a2 83       	std	Z+2, r26	; 0x02
    6a88:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    6a8a:	07 c0       	rjmp	.+14     	; 0x6a9a <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;    // counter overflow and NO pending is an error!
    6a8c:	cf ef       	ldi	r28, 0xFF	; 255
    6a8e:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    6a90:	40 e2       	ldi	r20, 0x20	; 32
    6a92:	5e e4       	ldi	r21, 0x4E	; 78
    6a94:	60 e0       	ldi	r22, 0x00	; 0
    6a96:	70 e0       	ldi	r23, 0x00	; 0
    6a98:	c4 cf       	rjmp	.-120    	; 0x6a22 <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    6a9a:	ce 01       	movw	r24, r28
    6a9c:	df 91       	pop	r29
    6a9e:	cf 91       	pop	r28
    6aa0:	1f 91       	pop	r17
    6aa2:	0f 91       	pop	r16
    6aa4:	08 95       	ret

00006aa6 <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    6aa6:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <__clock+0x4>
    6aaa:	90 91 e7 19 	lds	r25, 0x19E7	; 0x8019e7 <__clock+0x5>
    6aae:	a0 91 e8 19 	lds	r26, 0x19E8	; 0x8019e8 <__clock+0x6>
    6ab2:	b0 91 e9 19 	lds	r27, 0x19E9	; 0x8019e9 <__clock+0x7>
    6ab6:	80 5c       	subi	r24, 0xC0	; 192
    6ab8:	9d 4b       	sbci	r25, 0xBD	; 189
    6aba:	a0 4f       	sbci	r26, 0xF0	; 240
    6abc:	bf 4f       	sbci	r27, 0xFF	; 255
    6abe:	80 93 e6 19 	sts	0x19E6, r24	; 0x8019e6 <__clock+0x4>
    6ac2:	90 93 e7 19 	sts	0x19E7, r25	; 0x8019e7 <__clock+0x5>
    6ac6:	a0 93 e8 19 	sts	0x19E8, r26	; 0x8019e8 <__clock+0x6>
    6aca:	b0 93 e9 19 	sts	0x19E9, r27	; 0x8019e9 <__clock+0x7>
    6ace:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <__clock+0x4>
    6ad2:	90 91 e7 19 	lds	r25, 0x19E7	; 0x8019e7 <__clock+0x5>
    6ad6:	a0 91 e8 19 	lds	r26, 0x19E8	; 0x8019e8 <__clock+0x6>
    6ada:	b0 91 e9 19 	lds	r27, 0x19E9	; 0x8019e9 <__clock+0x7>
    6ade:	81 15       	cp	r24, r1
    6ae0:	9a 4c       	sbci	r25, 0xCA	; 202
    6ae2:	aa 49       	sbci	r26, 0x9A	; 154
    6ae4:	bb 43       	sbci	r27, 0x3B	; 59
    6ae6:	dc f0       	brlt	.+54     	; 0x6b1e <clock_task+0x78>
    6ae8:	80 91 e2 19 	lds	r24, 0x19E2	; 0x8019e2 <__clock>
    6aec:	90 91 e3 19 	lds	r25, 0x19E3	; 0x8019e3 <__clock+0x1>
    6af0:	a0 91 e4 19 	lds	r26, 0x19E4	; 0x8019e4 <__clock+0x2>
    6af4:	b0 91 e5 19 	lds	r27, 0x19E5	; 0x8019e5 <__clock+0x3>
    6af8:	01 96       	adiw	r24, 0x01	; 1
    6afa:	a1 1d       	adc	r26, r1
    6afc:	b1 1d       	adc	r27, r1
    6afe:	80 93 e2 19 	sts	0x19E2, r24	; 0x8019e2 <__clock>
    6b02:	90 93 e3 19 	sts	0x19E3, r25	; 0x8019e3 <__clock+0x1>
    6b06:	a0 93 e4 19 	sts	0x19E4, r26	; 0x8019e4 <__clock+0x2>
    6b0a:	b0 93 e5 19 	sts	0x19E5, r27	; 0x8019e5 <__clock+0x3>
    6b0e:	10 92 e6 19 	sts	0x19E6, r1	; 0x8019e6 <__clock+0x4>
    6b12:	10 92 e7 19 	sts	0x19E7, r1	; 0x8019e7 <__clock+0x5>
    6b16:	10 92 e8 19 	sts	0x19E8, r1	; 0x8019e8 <__clock+0x6>
    6b1a:	10 92 e9 19 	sts	0x19E9, r1	; 0x8019e9 <__clock+0x7>
    6b1e:	08 95       	ret

00006b20 <clock_settime.part.2>:
    6b20:	fc 01       	movw	r30, r24
    6b22:	84 81       	ldd	r24, Z+4	; 0x04
    6b24:	95 81       	ldd	r25, Z+5	; 0x05
    6b26:	a6 81       	ldd	r26, Z+6	; 0x06
    6b28:	b7 81       	ldd	r27, Z+7	; 0x07
    6b2a:	80 93 e6 19 	sts	0x19E6, r24	; 0x8019e6 <__clock+0x4>
    6b2e:	90 93 e7 19 	sts	0x19E7, r25	; 0x8019e7 <__clock+0x5>
    6b32:	a0 93 e8 19 	sts	0x19E8, r26	; 0x8019e8 <__clock+0x6>
    6b36:	b0 93 e9 19 	sts	0x19E9, r27	; 0x8019e9 <__clock+0x7>
    6b3a:	80 81       	ld	r24, Z
    6b3c:	91 81       	ldd	r25, Z+1	; 0x01
    6b3e:	a2 81       	ldd	r26, Z+2	; 0x02
    6b40:	b3 81       	ldd	r27, Z+3	; 0x03
    6b42:	80 93 e2 19 	sts	0x19E2, r24	; 0x8019e2 <__clock>
    6b46:	90 93 e3 19 	sts	0x19E3, r25	; 0x8019e3 <__clock+0x1>
    6b4a:	a0 93 e4 19 	sts	0x19E4, r26	; 0x8019e4 <__clock+0x2>
    6b4e:	b0 93 e5 19 	sts	0x19E5, r27	; 0x8019e5 <__clock+0x3>
    6b52:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <__clock+0x4>
    6b56:	90 91 e7 19 	lds	r25, 0x19E7	; 0x8019e7 <__clock+0x5>
    6b5a:	a0 91 e8 19 	lds	r26, 0x19E8	; 0x8019e8 <__clock+0x6>
    6b5e:	b0 91 e9 19 	lds	r27, 0x19E9	; 0x8019e9 <__clock+0x7>
    6b62:	44 81       	ldd	r20, Z+4	; 0x04
    6b64:	55 81       	ldd	r21, Z+5	; 0x05
    6b66:	66 81       	ldd	r22, Z+6	; 0x06
    6b68:	77 81       	ldd	r23, Z+7	; 0x07
    6b6a:	48 17       	cp	r20, r24
    6b6c:	59 07       	cpc	r21, r25
    6b6e:	6a 07       	cpc	r22, r26
    6b70:	7b 07       	cpc	r23, r27
    6b72:	b9 f6       	brne	.-82     	; 0x6b22 <clock_settime.part.2+0x2>
    6b74:	80 91 e2 19 	lds	r24, 0x19E2	; 0x8019e2 <__clock>
    6b78:	90 91 e3 19 	lds	r25, 0x19E3	; 0x8019e3 <__clock+0x1>
    6b7c:	a0 91 e4 19 	lds	r26, 0x19E4	; 0x8019e4 <__clock+0x2>
    6b80:	b0 91 e5 19 	lds	r27, 0x19E5	; 0x8019e5 <__clock+0x3>
    6b84:	40 81       	ld	r20, Z
    6b86:	51 81       	ldd	r21, Z+1	; 0x01
    6b88:	62 81       	ldd	r22, Z+2	; 0x02
    6b8a:	73 81       	ldd	r23, Z+3	; 0x03
    6b8c:	48 17       	cp	r20, r24
    6b8e:	59 07       	cpc	r21, r25
    6b90:	6a 07       	cpc	r22, r26
    6b92:	7b 07       	cpc	r23, r27
    6b94:	31 f6       	brne	.-116    	; 0x6b22 <clock_settime.part.2+0x2>
    6b96:	80 e0       	ldi	r24, 0x00	; 0
    6b98:	90 e0       	ldi	r25, 0x00	; 0
    6b9a:	08 95       	ret

00006b9c <set_timers>:
    6b9c:	00 d0       	rcall	.+0      	; 0x6b9e <set_timers+0x2>
    6b9e:	1f 92       	push	r1
    6ba0:	00 97       	sbiw	r24, 0x00	; 0
    6ba2:	79 f1       	breq	.+94     	; 0x6c02 <set_timers+0x66>
    6ba4:	ea ee       	ldi	r30, 0xEA	; 234
    6ba6:	f9 e1       	ldi	r31, 0x19	; 25
    6ba8:	4f ef       	ldi	r20, 0xFF	; 255
    6baa:	5f ef       	ldi	r21, 0xFF	; 255
    6bac:	20 e0       	ldi	r18, 0x00	; 0
    6bae:	30 e0       	ldi	r19, 0x00	; 0
    6bb0:	60 81       	ld	r22, Z
    6bb2:	71 81       	ldd	r23, Z+1	; 0x01
    6bb4:	86 17       	cp	r24, r22
    6bb6:	97 07       	cpc	r25, r23
    6bb8:	79 f0       	breq	.+30     	; 0x6bd8 <set_timers+0x3c>
    6bba:	67 2b       	or	r22, r23
    6bbc:	71 f4       	brne	.+28     	; 0x6bda <set_timers+0x3e>
    6bbe:	f9 01       	movw	r30, r18
    6bc0:	ee 0f       	add	r30, r30
    6bc2:	ff 1f       	adc	r31, r31
    6bc4:	e2 0f       	add	r30, r18
    6bc6:	f3 1f       	adc	r31, r19
    6bc8:	e6 51       	subi	r30, 0x16	; 22
    6bca:	f6 4e       	sbci	r31, 0xE6	; 230
    6bcc:	91 83       	std	Z+1, r25	; 0x01
    6bce:	80 83       	st	Z, r24
    6bd0:	81 e0       	ldi	r24, 0x01	; 1
    6bd2:	82 83       	std	Z+2, r24	; 0x02
    6bd4:	c9 01       	movw	r24, r18
    6bd6:	19 c0       	rjmp	.+50     	; 0x6c0a <set_timers+0x6e>
    6bd8:	a9 01       	movw	r20, r18
    6bda:	2f 5f       	subi	r18, 0xFF	; 255
    6bdc:	3f 4f       	sbci	r19, 0xFF	; 255
    6bde:	33 96       	adiw	r30, 0x03	; 3
    6be0:	28 30       	cpi	r18, 0x08	; 8
    6be2:	31 05       	cpc	r19, r1
    6be4:	29 f7       	brne	.-54     	; 0x6bb0 <set_timers+0x14>
    6be6:	4f 3f       	cpi	r20, 0xFF	; 255
    6be8:	8f ef       	ldi	r24, 0xFF	; 255
    6bea:	58 07       	cpc	r21, r24
    6bec:	69 f4       	brne	.+26     	; 0x6c08 <set_timers+0x6c>
    6bee:	84 e9       	ldi	r24, 0x94	; 148
    6bf0:	95 e0       	ldi	r25, 0x05	; 5
    6bf2:	a0 e0       	ldi	r26, 0x00	; 0
    6bf4:	ed b7       	in	r30, 0x3d	; 61
    6bf6:	fe b7       	in	r31, 0x3e	; 62
    6bf8:	81 83       	std	Z+1, r24	; 0x01
    6bfa:	92 83       	std	Z+2, r25	; 0x02
    6bfc:	a3 83       	std	Z+3, r26	; 0x03
    6bfe:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    6c02:	8f ef       	ldi	r24, 0xFF	; 255
    6c04:	9f ef       	ldi	r25, 0xFF	; 255
    6c06:	01 c0       	rjmp	.+2      	; 0x6c0a <set_timers+0x6e>
    6c08:	ca 01       	movw	r24, r20
    6c0a:	0f 90       	pop	r0
    6c0c:	0f 90       	pop	r0
    6c0e:	0f 90       	pop	r0
    6c10:	08 95       	ret

00006c12 <delete_all_timers>:
    6c12:	ea ee       	ldi	r30, 0xEA	; 234
    6c14:	f9 e1       	ldi	r31, 0x19	; 25
    6c16:	12 82       	std	Z+2, r1	; 0x02
    6c18:	11 82       	std	Z+1, r1	; 0x01
    6c1a:	10 82       	st	Z, r1
    6c1c:	33 96       	adiw	r30, 0x03	; 3
    6c1e:	8a e1       	ldi	r24, 0x1A	; 26
    6c20:	e2 30       	cpi	r30, 0x02	; 2
    6c22:	f8 07       	cpc	r31, r24
    6c24:	c1 f7       	brne	.-16     	; 0x6c16 <delete_all_timers+0x4>
    6c26:	08 95       	ret

00006c28 <subtract_timespec>:
    6c28:	0f 93       	push	r16
    6c2a:	1f 93       	push	r17
    6c2c:	cf 93       	push	r28
    6c2e:	df 93       	push	r29
    6c30:	fc 01       	movw	r30, r24
    6c32:	84 81       	ldd	r24, Z+4	; 0x04
    6c34:	95 81       	ldd	r25, Z+5	; 0x05
    6c36:	a6 81       	ldd	r26, Z+6	; 0x06
    6c38:	b7 81       	ldd	r27, Z+7	; 0x07
    6c3a:	eb 01       	movw	r28, r22
    6c3c:	0c 81       	ldd	r16, Y+4	; 0x04
    6c3e:	1d 81       	ldd	r17, Y+5	; 0x05
    6c40:	2e 81       	ldd	r18, Y+6	; 0x06
    6c42:	3f 81       	ldd	r19, Y+7	; 0x07
    6c44:	80 1b       	sub	r24, r16
    6c46:	91 0b       	sbc	r25, r17
    6c48:	a2 0b       	sbc	r26, r18
    6c4a:	b3 0b       	sbc	r27, r19
    6c4c:	b7 fd       	sbrc	r27, 7
    6c4e:	05 c0       	rjmp	.+10     	; 0x6c5a <subtract_timespec+0x32>
    6c50:	84 83       	std	Z+4, r24	; 0x04
    6c52:	95 83       	std	Z+5, r25	; 0x05
    6c54:	a6 83       	std	Z+6, r26	; 0x06
    6c56:	b7 83       	std	Z+7, r27	; 0x07
    6c58:	12 c0       	rjmp	.+36     	; 0x6c7e <subtract_timespec+0x56>
    6c5a:	96 53       	subi	r25, 0x36	; 54
    6c5c:	a5 46       	sbci	r26, 0x65	; 101
    6c5e:	b4 4c       	sbci	r27, 0xC4	; 196
    6c60:	84 83       	std	Z+4, r24	; 0x04
    6c62:	95 83       	std	Z+5, r25	; 0x05
    6c64:	a6 83       	std	Z+6, r26	; 0x06
    6c66:	b7 83       	std	Z+7, r27	; 0x07
    6c68:	80 81       	ld	r24, Z
    6c6a:	91 81       	ldd	r25, Z+1	; 0x01
    6c6c:	a2 81       	ldd	r26, Z+2	; 0x02
    6c6e:	b3 81       	ldd	r27, Z+3	; 0x03
    6c70:	01 97       	sbiw	r24, 0x01	; 1
    6c72:	a1 09       	sbc	r26, r1
    6c74:	b1 09       	sbc	r27, r1
    6c76:	80 83       	st	Z, r24
    6c78:	91 83       	std	Z+1, r25	; 0x01
    6c7a:	a2 83       	std	Z+2, r26	; 0x02
    6c7c:	b3 83       	std	Z+3, r27	; 0x03
    6c7e:	80 81       	ld	r24, Z
    6c80:	91 81       	ldd	r25, Z+1	; 0x01
    6c82:	a2 81       	ldd	r26, Z+2	; 0x02
    6c84:	b3 81       	ldd	r27, Z+3	; 0x03
    6c86:	eb 01       	movw	r28, r22
    6c88:	48 81       	ld	r20, Y
    6c8a:	59 81       	ldd	r21, Y+1	; 0x01
    6c8c:	6a 81       	ldd	r22, Y+2	; 0x02
    6c8e:	7b 81       	ldd	r23, Y+3	; 0x03
    6c90:	84 1b       	sub	r24, r20
    6c92:	95 0b       	sbc	r25, r21
    6c94:	a6 0b       	sbc	r26, r22
    6c96:	b7 0b       	sbc	r27, r23
    6c98:	80 83       	st	Z, r24
    6c9a:	91 83       	std	Z+1, r25	; 0x01
    6c9c:	a2 83       	std	Z+2, r26	; 0x02
    6c9e:	b3 83       	std	Z+3, r27	; 0x03
    6ca0:	df 91       	pop	r29
    6ca2:	cf 91       	pop	r28
    6ca4:	1f 91       	pop	r17
    6ca6:	0f 91       	pop	r16
    6ca8:	08 95       	ret

00006caa <ts_to_str>:
    6caa:	ad b7       	in	r26, 0x3d	; 61
    6cac:	be b7       	in	r27, 0x3e	; 62
    6cae:	1f 97       	sbiw	r26, 0x0f	; 15
    6cb0:	0f b6       	in	r0, 0x3f	; 63
    6cb2:	f8 94       	cli
    6cb4:	be bf       	out	0x3e, r27	; 62
    6cb6:	0f be       	out	0x3f, r0	; 63
    6cb8:	ad bf       	out	0x3d, r26	; 61
    6cba:	fc 01       	movw	r30, r24
    6cbc:	44 81       	ldd	r20, Z+4	; 0x04
    6cbe:	55 81       	ldd	r21, Z+5	; 0x05
    6cc0:	66 81       	ldd	r22, Z+6	; 0x06
    6cc2:	77 81       	ldd	r23, Z+7	; 0x07
    6cc4:	ed b7       	in	r30, 0x3d	; 61
    6cc6:	fe b7       	in	r31, 0x3e	; 62
    6cc8:	44 87       	std	Z+12, r20	; 0x0c
    6cca:	55 87       	std	Z+13, r21	; 0x0d
    6ccc:	66 87       	std	Z+14, r22	; 0x0e
    6cce:	77 87       	std	Z+15, r23	; 0x0f
    6cd0:	fc 01       	movw	r30, r24
    6cd2:	80 81       	ld	r24, Z
    6cd4:	91 81       	ldd	r25, Z+1	; 0x01
    6cd6:	a2 81       	ldd	r26, Z+2	; 0x02
    6cd8:	b3 81       	ldd	r27, Z+3	; 0x03
    6cda:	ed b7       	in	r30, 0x3d	; 61
    6cdc:	fe b7       	in	r31, 0x3e	; 62
    6cde:	80 87       	std	Z+8, r24	; 0x08
    6ce0:	91 87       	std	Z+9, r25	; 0x09
    6ce2:	a2 87       	std	Z+10, r26	; 0x0a
    6ce4:	b3 87       	std	Z+11, r27	; 0x0b
    6ce6:	8a e8       	ldi	r24, 0x8A	; 138
    6ce8:	95 e0       	ldi	r25, 0x05	; 5
    6cea:	a0 e0       	ldi	r26, 0x00	; 0
    6cec:	85 83       	std	Z+5, r24	; 0x05
    6cee:	96 83       	std	Z+6, r25	; 0x06
    6cf0:	a7 83       	std	Z+7, r26	; 0x07
    6cf2:	8f e1       	ldi	r24, 0x1F	; 31
    6cf4:	90 e0       	ldi	r25, 0x00	; 0
    6cf6:	94 83       	std	Z+4, r25	; 0x04
    6cf8:	83 83       	std	Z+3, r24	; 0x03
    6cfa:	82 e2       	ldi	r24, 0x22	; 34
    6cfc:	97 e1       	ldi	r25, 0x17	; 23
    6cfe:	92 83       	std	Z+2, r25	; 0x02
    6d00:	81 83       	std	Z+1, r24	; 0x01
    6d02:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <snprintf_P>
    6d06:	82 e2       	ldi	r24, 0x22	; 34
    6d08:	97 e1       	ldi	r25, 0x17	; 23
    6d0a:	ad b7       	in	r26, 0x3d	; 61
    6d0c:	be b7       	in	r27, 0x3e	; 62
    6d0e:	1f 96       	adiw	r26, 0x0f	; 15
    6d10:	0f b6       	in	r0, 0x3f	; 63
    6d12:	f8 94       	cli
    6d14:	be bf       	out	0x3e, r27	; 62
    6d16:	0f be       	out	0x3f, r0	; 63
    6d18:	ad bf       	out	0x3d, r26	; 61
    6d1a:	08 95       	ret

00006d1c <clock_elapsed_begin>:
    6d1c:	6a e1       	ldi	r22, 0x1A	; 26
    6d1e:	77 e1       	ldi	r23, 0x17	; 23
    6d20:	80 e0       	ldi	r24, 0x00	; 0
    6d22:	90 e0       	ldi	r25, 0x00	; 0
    6d24:	4b ce       	rjmp	.-874    	; 0x69bc <clock_gettime>
    6d26:	08 95       	ret

00006d28 <clock_elapsed_end>:
    6d28:	af e0       	ldi	r26, 0x0F	; 15
    6d2a:	b0 e0       	ldi	r27, 0x00	; 0
    6d2c:	ea e9       	ldi	r30, 0x9A	; 154
    6d2e:	f6 e3       	ldi	r31, 0x36	; 54
    6d30:	0c 94 94 e4 	jmp	0x1c928	; 0x1c928 <__prologue_saves__+0x1c>
    6d34:	8c 01       	movw	r16, r24
    6d36:	be 01       	movw	r22, r28
    6d38:	68 5f       	subi	r22, 0xF8	; 248
    6d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    6d3c:	80 e0       	ldi	r24, 0x00	; 0
    6d3e:	90 e0       	ldi	r25, 0x00	; 0
    6d40:	3d de       	rcall	.-902    	; 0x69bc <clock_gettime>
    6d42:	6a e1       	ldi	r22, 0x1A	; 26
    6d44:	77 e1       	ldi	r23, 0x17	; 23
    6d46:	ce 01       	movw	r24, r28
    6d48:	08 96       	adiw	r24, 0x08	; 8
    6d4a:	6e df       	rcall	.-292    	; 0x6c28 <subtract_timespec>
    6d4c:	01 15       	cp	r16, r1
    6d4e:	11 05       	cpc	r17, r1
    6d50:	b1 f0       	breq	.+44     	; 0x6d7e <clock_elapsed_end+0x56>
    6d52:	f8 01       	movw	r30, r16
    6d54:	80 81       	ld	r24, Z
    6d56:	88 23       	and	r24, r24
    6d58:	91 f0       	breq	.+36     	; 0x6d7e <clock_elapsed_end+0x56>
    6d5a:	ce 01       	movw	r24, r28
    6d5c:	08 96       	adiw	r24, 0x08	; 8
    6d5e:	a5 df       	rcall	.-182    	; 0x6caa <ts_to_str>
    6d60:	ed b7       	in	r30, 0x3d	; 61
    6d62:	fe b7       	in	r31, 0x3e	; 62
    6d64:	97 83       	std	Z+7, r25	; 0x07
    6d66:	86 83       	std	Z+6, r24	; 0x06
    6d68:	15 83       	std	Z+5, r17	; 0x05
    6d6a:	04 83       	std	Z+4, r16	; 0x04
    6d6c:	8c e7       	ldi	r24, 0x7C	; 124
    6d6e:	95 e0       	ldi	r25, 0x05	; 5
    6d70:	a0 e0       	ldi	r26, 0x00	; 0
    6d72:	81 83       	std	Z+1, r24	; 0x01
    6d74:	92 83       	std	Z+2, r25	; 0x02
    6d76:	a3 83       	std	Z+3, r26	; 0x03
    6d78:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    6d7c:	0f c0       	rjmp	.+30     	; 0x6d9c <clock_elapsed_end+0x74>
    6d7e:	ce 01       	movw	r24, r28
    6d80:	08 96       	adiw	r24, 0x08	; 8
    6d82:	93 df       	rcall	.-218    	; 0x6caa <ts_to_str>
    6d84:	ed b7       	in	r30, 0x3d	; 61
    6d86:	fe b7       	in	r31, 0x3e	; 62
    6d88:	95 83       	std	Z+5, r25	; 0x05
    6d8a:	84 83       	std	Z+4, r24	; 0x04
    6d8c:	81 e7       	ldi	r24, 0x71	; 113
    6d8e:	95 e0       	ldi	r25, 0x05	; 5
    6d90:	a0 e0       	ldi	r26, 0x00	; 0
    6d92:	81 83       	std	Z+1, r24	; 0x01
    6d94:	92 83       	std	Z+2, r25	; 0x02
    6d96:	a3 83       	std	Z+3, r26	; 0x03
    6d98:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    6d9c:	2f 96       	adiw	r28, 0x0f	; 15
    6d9e:	e4 e0       	ldi	r30, 0x04	; 4
    6da0:	0c 94 b0 e4 	jmp	0x1c960	; 0x1c960 <__epilogue_restores__+0x1c>

00006da4 <clock_clear>:
    6da4:	a8 e0       	ldi	r26, 0x08	; 8
    6da6:	b0 e0       	ldi	r27, 0x00	; 0
    6da8:	e8 ed       	ldi	r30, 0xD8	; 216
    6daa:	f6 e3       	ldi	r31, 0x36	; 54
    6dac:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
    6db0:	1d 82       	std	Y+5, r1	; 0x05
    6db2:	1e 82       	std	Y+6, r1	; 0x06
    6db4:	1f 82       	std	Y+7, r1	; 0x07
    6db6:	18 86       	std	Y+8, r1	; 0x08
    6db8:	19 82       	std	Y+1, r1	; 0x01
    6dba:	1a 82       	std	Y+2, r1	; 0x02
    6dbc:	1b 82       	std	Y+3, r1	; 0x03
    6dbe:	1c 82       	std	Y+4, r1	; 0x04
    6dc0:	ce 01       	movw	r24, r28
    6dc2:	01 96       	adiw	r24, 0x01	; 1
    6dc4:	ad de       	rcall	.-678    	; 0x6b20 <clock_settime.part.2>
    6dc6:	e2 e0       	ldi	r30, 0x02	; 2
    6dc8:	fa e1       	ldi	r31, 0x1A	; 26
    6dca:	11 82       	std	Z+1, r1	; 0x01
    6dcc:	10 82       	st	Z, r1
    6dce:	13 82       	std	Z+3, r1	; 0x03
    6dd0:	12 82       	std	Z+2, r1	; 0x02
    6dd2:	28 96       	adiw	r28, 0x08	; 8
    6dd4:	e2 e0       	ldi	r30, 0x02	; 2
    6dd6:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

00006dda <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6dda:	80 91 42 17 	lds	r24, 0x1742	; 0x801742 <timers_configured>
    6dde:	90 91 43 17 	lds	r25, 0x1743	; 0x801743 <timers_configured+0x1>
    6de2:	89 2b       	or	r24, r25
    6de4:	69 f0       	breq	.+26     	; 0x6e00 <enable_timers+0x26>
    6de6:	80 91 44 17 	lds	r24, 0x1744	; 0x801744 <timers_enabled>
    6dea:	90 91 45 17 	lds	r25, 0x1745	; 0x801745 <timers_enabled+0x1>
    6dee:	89 2b       	or	r24, r25
    {
        enable_system_task();
    6df0:	39 f4       	brne	.+14     	; 0x6e00 <enable_timers+0x26>
        timers_enabled = 1;
    6df2:	a8 dd       	rcall	.-1200   	; 0x6944 <enable_system_task>
    6df4:	81 e0       	ldi	r24, 0x01	; 1
    6df6:	90 e0       	ldi	r25, 0x00	; 0
    6df8:	90 93 45 17 	sts	0x1745, r25	; 0x801745 <timers_enabled+0x1>
    6dfc:	80 93 44 17 	sts	0x1744, r24	; 0x801744 <timers_enabled>
    6e00:	08 95       	ret

00006e02 <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6e02:	cf 93       	push	r28
    6e04:	df 93       	push	r29
    6e06:	ca ee       	ldi	r28, 0xEA	; 234
    6e08:	d9 e1       	ldi	r29, 0x19	; 25
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    6e0c:	88 23       	and	r24, r24
    6e0e:	29 f0       	breq	.+10     	; 0x6e1a <execute_timers+0x18>
    6e10:	e8 81       	ld	r30, Y
    6e12:	f9 81       	ldd	r31, Y+1	; 0x01
    6e14:	30 97       	sbiw	r30, 0x00	; 0
    6e16:	09 f0       	breq	.+2      	; 0x6e1a <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6e18:	09 95       	icall
    6e1a:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6e1c:	8a e1       	ldi	r24, 0x1A	; 26
    6e1e:	c2 30       	cpi	r28, 0x02	; 2
    6e20:	d8 07       	cpc	r29, r24
    6e22:	99 f7       	brne	.-26     	; 0x6e0a <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6e24:	df 91       	pop	r29
    6e26:	cf 91       	pop	r28
    6e28:	08 95       	ret

00006e2a <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    6e2a:	00 d0       	rcall	.+0      	; 0x6e2c <init_timers+0x2>
    6e2c:	1f 92       	push	r1
    printf("Timers init called\n");
    6e2e:	8d e5       	ldi	r24, 0x5D	; 93
    6e30:	95 e0       	ldi	r25, 0x05	; 5
    6e32:	a0 e0       	ldi	r26, 0x00	; 0
    6e34:	ed b7       	in	r30, 0x3d	; 61
    6e36:	fe b7       	in	r31, 0x3e	; 62
    6e38:	81 83       	std	Z+1, r24	; 0x01
    6e3a:	92 83       	std	Z+2, r25	; 0x02
    6e3c:	a3 83       	std	Z+3, r26	; 0x03
    6e3e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

    if(!timers_configured)
    6e42:	80 91 42 17 	lds	r24, 0x1742	; 0x801742 <timers_configured>
    6e46:	90 91 43 17 	lds	r25, 0x1743	; 0x801743 <timers_configured+0x1>
    6e4a:	89 2b       	or	r24, r25
    {
        install_timers_isr();
    6e4c:	a9 f4       	brne	.+42     	; 0x6e78 <init_timers+0x4e>
        timers_configured = 1;
    6e4e:	7c dd       	rcall	.-1288   	; 0x6948 <install_timers_isr>
    6e50:	81 e0       	ldi	r24, 0x01	; 1
    6e52:	90 e0       	ldi	r25, 0x00	; 0
    6e54:	90 93 43 17 	sts	0x1743, r25	; 0x801743 <timers_configured+0x1>
    6e58:	80 93 42 17 	sts	0x1742, r24	; 0x801742 <timers_configured>
        timers_enabled = 0;
    6e5c:	10 92 45 17 	sts	0x1745, r1	; 0x801745 <timers_enabled+0x1>
    6e60:	10 92 44 17 	sts	0x1744, r1	; 0x801744 <timers_enabled>
        printf("Timers configured\n");
    6e64:	8a e4       	ldi	r24, 0x4A	; 74
    6e66:	95 e0       	ldi	r25, 0x05	; 5
    6e68:	a0 e0       	ldi	r26, 0x00	; 0
    6e6a:	ed b7       	in	r30, 0x3d	; 61
    6e6c:	fe b7       	in	r31, 0x3e	; 62
    6e6e:	81 83       	std	Z+1, r24	; 0x01
    6e70:	92 83       	std	Z+2, r25	; 0x02
    }

    delete_all_timers();
    6e72:	a3 83       	std	Z+3, r26	; 0x03

    clock_clear();
    6e74:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("Clock Init\n");
    6e78:	cc de       	rcall	.-616    	; 0x6c12 <delete_all_timers>
    6e7a:	94 df       	rcall	.-216    	; 0x6da4 <clock_clear>
    6e7c:	8e e3       	ldi	r24, 0x3E	; 62
    6e7e:	95 e0       	ldi	r25, 0x05	; 5
    6e80:	a0 e0       	ldi	r26, 0x00	; 0
    6e82:	ed b7       	in	r30, 0x3d	; 61
    6e84:	fe b7       	in	r31, 0x3e	; 62
    6e86:	81 83       	std	Z+1, r24	; 0x01
    6e88:	92 83       	std	Z+2, r25	; 0x02
    6e8a:	a3 83       	std	Z+3, r26	; 0x03

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6e8c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    6e90:	61 e0       	ldi	r22, 0x01	; 1
    6e92:	70 e0       	ldi	r23, 0x00	; 0
    6e94:	83 e5       	ldi	r24, 0x53	; 83
    6e96:	95 e3       	ldi	r25, 0x35	; 53
    6e98:	81 de       	rcall	.-766    	; 0x6b9c <set_timers>
        printf("Clock task init failed\n");
    6e9a:	01 96       	adiw	r24, 0x01	; 1
    6e9c:	51 f4       	brne	.+20     	; 0x6eb2 <init_timers+0x88>
    6e9e:	86 e2       	ldi	r24, 0x26	; 38
    6ea0:	95 e0       	ldi	r25, 0x05	; 5
    6ea2:	a0 e0       	ldi	r26, 0x00	; 0
    6ea4:	ed b7       	in	r30, 0x3d	; 61
    6ea6:	fe b7       	in	r31, 0x3e	; 62
    6ea8:	81 83       	std	Z+1, r24	; 0x01
    6eaa:	92 83       	std	Z+2, r25	; 0x02
    6eac:	a3 83       	std	Z+3, r26	; 0x03
    printf("Clock Installed\n");
    6eae:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    6eb2:	85 e1       	ldi	r24, 0x15	; 21
    6eb4:	95 e0       	ldi	r25, 0x05	; 5
    6eb6:	a0 e0       	ldi	r26, 0x00	; 0
    6eb8:	ed b7       	in	r30, 0x3d	; 61
    6eba:	fe b7       	in	r31, 0x3e	; 62
    6ebc:	81 83       	std	Z+1, r24	; 0x01
    6ebe:	92 83       	std	Z+2, r25	; 0x02

    enable_timers();
    6ec0:	a3 83       	std	Z+3, r26	; 0x03
    6ec2:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

    printf("Timers enabled\n");
    6ec6:	89 df       	rcall	.-238    	; 0x6dda <enable_timers>
    6ec8:	85 e0       	ldi	r24, 0x05	; 5
    6eca:	95 e0       	ldi	r25, 0x05	; 5
    6ecc:	a0 e0       	ldi	r26, 0x00	; 0
    6ece:	ed b7       	in	r30, 0x3d	; 61
    6ed0:	fe b7       	in	r31, 0x3e	; 62
    6ed2:	81 83       	std	Z+1, r24	; 0x01
    6ed4:	92 83       	std	Z+2, r25	; 0x02
    6ed6:	a3 83       	std	Z+3, r26	; 0x03
}
    6ed8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    6edc:	0f 90       	pop	r0
    6ede:	0f 90       	pop	r0
    6ee0:	0f 90       	pop	r0
    6ee2:	08 95       	ret

00006ee4 <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id, struct timespec *res)
{
    res->tv_sec = 0;
    6ee4:	fb 01       	movw	r30, r22
    6ee6:	10 82       	st	Z, r1
    6ee8:	11 82       	std	Z+1, r1	; 0x01
    6eea:	12 82       	std	Z+2, r1	; 0x02
    6eec:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6eee:	80 e4       	ldi	r24, 0x40	; 64
    6ef0:	92 e4       	ldi	r25, 0x42	; 66
    6ef2:	af e0       	ldi	r26, 0x0F	; 15
    6ef4:	b0 e0       	ldi	r27, 0x00	; 0
    6ef6:	84 83       	std	Z+4, r24	; 0x04
    6ef8:	95 83       	std	Z+5, r25	; 0x05
    6efa:	a6 83       	std	Z+6, r26	; 0x06
    6efc:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
}
    6efe:	80 e0       	ldi	r24, 0x00	; 0
    6f00:	90 e0       	ldi	r25, 0x00	; 0
    6f02:	08 95       	ret

00006f04 <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id, const struct timespec *ts)
{
    if(clk_id)
    6f04:	89 2b       	or	r24, r25
    6f06:	19 f4       	brne	.+6      	; 0x6f0e <clock_settime+0xa>
    6f08:	cb 01       	movw	r24, r22
    6f0a:	0a ce       	rjmp	.-1004   	; 0x6b20 <clock_settime.part.2>
    6f0c:	08 95       	ret
        return(-1);
    6f0e:	8f ef       	ldi	r24, 0xFF	; 255
    6f10:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6f12:	08 95       	ret

00006f14 <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6f14:	9c 01       	movw	r18, r24
    6f16:	83 70       	andi	r24, 0x03	; 3
    6f18:	99 27       	eor	r25, r25
    6f1a:	00 97       	sbiw	r24, 0x00	; 0
    6f1c:	69 f4       	brne	.+26     	; 0x6f38 <IS_Leap+0x24>
    6f1e:	2c 36       	cpi	r18, 0x6C	; 108
    6f20:	47 e0       	ldi	r20, 0x07	; 7
    6f22:	34 07       	cpc	r19, r20
    6f24:	59 f0       	breq	.+22     	; 0x6f3c <IS_Leap+0x28>
    6f26:	51 e0       	ldi	r21, 0x01	; 1
    6f28:	40 e0       	ldi	r20, 0x00	; 0
    6f2a:	24 33       	cpi	r18, 0x34	; 52
    6f2c:	38 40       	sbci	r19, 0x08	; 8
    6f2e:	09 f4       	brne	.+2      	; 0x6f32 <IS_Leap+0x1e>
    6f30:	50 e0       	ldi	r21, 0x00	; 0
    6f32:	85 2f       	mov	r24, r21
    6f34:	94 2f       	mov	r25, r20
    6f36:	08 95       	ret
    6f38:	80 e0       	ldi	r24, 0x00	; 0
    6f3a:	90 e0       	ldi	r25, 0x00	; 0
    6f3c:	08 95       	ret

00006f3e <tm_mon_to_ascii>:
    6f3e:	8c 30       	cpi	r24, 0x0C	; 12
    6f40:	91 05       	cpc	r25, r1
    6f42:	40 f4       	brcc	.+16     	; 0x6f54 <tm_mon_to_ascii+0x16>
    6f44:	88 0f       	add	r24, r24
    6f46:	99 1f       	adc	r25, r25
    6f48:	fc 01       	movw	r30, r24
    6f4a:	e8 5e       	subi	r30, 0xE8	; 232
    6f4c:	fe 4f       	sbci	r31, 0xFE	; 254
    6f4e:	80 81       	ld	r24, Z
    6f50:	91 81       	ldd	r25, Z+1	; 0x01
    6f52:	08 95       	ret
    6f54:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <__Month+0x18>
    6f58:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <__Month+0x19>
    6f5c:	08 95       	ret

00006f5e <Days_Per_Month>:
    6f5e:	cf 93       	push	r28
    6f60:	df 93       	push	r29
    6f62:	8c 30       	cpi	r24, 0x0C	; 12
    6f64:	91 05       	cpc	r25, r1
    6f66:	24 f0       	brlt	.+8      	; 0x6f70 <Days_Per_Month+0x12>
    6f68:	6f 5f       	subi	r22, 0xFF	; 255
    6f6a:	7f 4f       	sbci	r23, 0xFF	; 255
    6f6c:	0c 97       	sbiw	r24, 0x0c	; 12
    6f6e:	f9 cf       	rjmp	.-14     	; 0x6f62 <Days_Per_Month+0x4>
    6f70:	97 ff       	sbrs	r25, 7
    6f72:	04 c0       	rjmp	.+8      	; 0x6f7c <Days_Per_Month+0x1e>
    6f74:	61 50       	subi	r22, 0x01	; 1
    6f76:	71 09       	sbc	r23, r1
    6f78:	0c 96       	adiw	r24, 0x0c	; 12
    6f7a:	fa cf       	rjmp	.-12     	; 0x6f70 <Days_Per_Month+0x12>
    6f7c:	fc 01       	movw	r30, r24
    6f7e:	ee 0f       	add	r30, r30
    6f80:	ff 1f       	adc	r31, r31
    6f82:	e8 55       	subi	r30, 0x58	; 88
    6f84:	fd 4f       	sbci	r31, 0xFD	; 253
    6f86:	c0 81       	ld	r28, Z
    6f88:	d1 81       	ldd	r29, Z+1	; 0x01
    6f8a:	01 97       	sbiw	r24, 0x01	; 1
    6f8c:	29 f4       	brne	.+10     	; 0x6f98 <Days_Per_Month+0x3a>
    6f8e:	cb 01       	movw	r24, r22
    6f90:	c1 df       	rcall	.-126    	; 0x6f14 <IS_Leap>
    6f92:	89 2b       	or	r24, r25
    6f94:	09 f0       	breq	.+2      	; 0x6f98 <Days_Per_Month+0x3a>
    6f96:	21 96       	adiw	r28, 0x01	; 1
    6f98:	ce 01       	movw	r24, r28
    6f9a:	df 91       	pop	r29
    6f9c:	cf 91       	pop	r28
    6f9e:	08 95       	ret

00006fa0 <time_to_tm>:
    6fa0:	a0 e0       	ldi	r26, 0x00	; 0
    6fa2:	b0 e0       	ldi	r27, 0x00	; 0
    6fa4:	e6 ed       	ldi	r30, 0xD6	; 214
    6fa6:	f7 e3       	ldi	r31, 0x37	; 55
    6fa8:	0c 94 88 e4 	jmp	0x1c910	; 0x1c910 <__prologue_saves__+0x4>
    6fac:	e8 01       	movw	r28, r16
    6fae:	e6 e1       	ldi	r30, 0x16	; 22
    6fb0:	d8 01       	movw	r26, r16
    6fb2:	1d 92       	st	X+, r1
    6fb4:	ea 95       	dec	r30
    6fb6:	e9 f7       	brne	.-6      	; 0x6fb2 <time_to_tm+0x12>
    6fb8:	61 15       	cp	r22, r1
    6fba:	bd e5       	ldi	r27, 0x5D	; 93
    6fbc:	7b 07       	cpc	r23, r27
    6fbe:	bd ef       	ldi	r27, 0xFD	; 253
    6fc0:	8b 07       	cpc	r24, r27
    6fc2:	bf ef       	ldi	r27, 0xFF	; 255
    6fc4:	9b 07       	cpc	r25, r27
    6fc6:	08 f0       	brcs	.+2      	; 0x6fca <time_to_tm+0x2a>
    6fc8:	c0 c0       	rjmp	.+384    	; 0x714a <time_to_tm+0x1aa>
    6fca:	6b 01       	movw	r12, r22
    6fcc:	7c 01       	movw	r14, r24
    6fce:	c2 1a       	sub	r12, r18
    6fd0:	d3 0a       	sbc	r13, r19
    6fd2:	e4 0a       	sbc	r14, r20
    6fd4:	f5 0a       	sbc	r15, r21
    6fd6:	46 01       	movw	r8, r12
    6fd8:	57 01       	movw	r10, r14
    6fda:	e0 e8       	ldi	r30, 0x80	; 128
    6fdc:	ce 16       	cp	r12, r30
    6fde:	ee ea       	ldi	r30, 0xAE	; 174
    6fe0:	de 06       	cpc	r13, r30
    6fe2:	ee ef       	ldi	r30, 0xFE	; 254
    6fe4:	ee 06       	cpc	r14, r30
    6fe6:	ef ef       	ldi	r30, 0xFF	; 255
    6fe8:	fe 06       	cpc	r15, r30
    6fea:	50 f0       	brcs	.+20     	; 0x7000 <time_to_tm+0x60>
    6fec:	80 e8       	ldi	r24, 0x80	; 128
    6fee:	88 0e       	add	r8, r24
    6ff0:	81 e5       	ldi	r24, 0x51	; 81
    6ff2:	98 1e       	adc	r9, r24
    6ff4:	81 e0       	ldi	r24, 0x01	; 1
    6ff6:	a8 1e       	adc	r10, r24
    6ff8:	b1 1c       	adc	r11, r1
    6ffa:	01 e0       	ldi	r16, 0x01	; 1
    6ffc:	10 e0       	ldi	r17, 0x00	; 0
    6ffe:	02 c0       	rjmp	.+4      	; 0x7004 <time_to_tm+0x64>
    7000:	00 e0       	ldi	r16, 0x00	; 0
    7002:	10 e0       	ldi	r17, 0x00	; 0
    7004:	8c e3       	ldi	r24, 0x3C	; 60
    7006:	48 2e       	mov	r4, r24
    7008:	51 2c       	mov	r5, r1
    700a:	61 2c       	mov	r6, r1
    700c:	71 2c       	mov	r7, r1
    700e:	c5 01       	movw	r24, r10
    7010:	b4 01       	movw	r22, r8
    7012:	a3 01       	movw	r20, r6
    7014:	92 01       	movw	r18, r4
    7016:	0e 94 04 e4 	call	0x1c808	; 0x1c808 <__udivmodsi4>
    701a:	79 83       	std	Y+1, r23	; 0x01
    701c:	68 83       	st	Y, r22
    701e:	ca 01       	movw	r24, r20
    7020:	b9 01       	movw	r22, r18
    7022:	a3 01       	movw	r20, r6
    7024:	92 01       	movw	r18, r4
    7026:	0e 94 04 e4 	call	0x1c808	; 0x1c808 <__udivmodsi4>
    702a:	7b 83       	std	Y+3, r23	; 0x03
    702c:	6a 83       	std	Y+2, r22	; 0x02
    702e:	c5 01       	movw	r24, r10
    7030:	b4 01       	movw	r22, r8
    7032:	20 e1       	ldi	r18, 0x10	; 16
    7034:	3e e0       	ldi	r19, 0x0E	; 14
    7036:	40 e0       	ldi	r20, 0x00	; 0
    7038:	50 e0       	ldi	r21, 0x00	; 0
    703a:	0e 94 04 e4 	call	0x1c808	; 0x1c808 <__udivmodsi4>
    703e:	ca 01       	movw	r24, r20
    7040:	b9 01       	movw	r22, r18
    7042:	28 e1       	ldi	r18, 0x18	; 24
    7044:	30 e0       	ldi	r19, 0x00	; 0
    7046:	40 e0       	ldi	r20, 0x00	; 0
    7048:	50 e0       	ldi	r21, 0x00	; 0
    704a:	0e 94 04 e4 	call	0x1c808	; 0x1c808 <__udivmodsi4>
    704e:	7d 83       	std	Y+5, r23	; 0x05
    7050:	6c 83       	std	Y+4, r22	; 0x04
    7052:	01 15       	cp	r16, r1
    7054:	11 05       	cpc	r17, r1
    7056:	89 f0       	breq	.+34     	; 0x707a <time_to_tm+0xda>
    7058:	85 e4       	ldi	r24, 0x45	; 69
    705a:	90 e0       	ldi	r25, 0x00	; 0
    705c:	9b 87       	std	Y+11, r25	; 0x0b
    705e:	8a 87       	std	Y+10, r24	; 0x0a
    7060:	8b e0       	ldi	r24, 0x0B	; 11
    7062:	90 e0       	ldi	r25, 0x00	; 0
    7064:	99 87       	std	Y+9, r25	; 0x09
    7066:	88 87       	std	Y+8, r24	; 0x08
    7068:	8f e1       	ldi	r24, 0x1F	; 31
    706a:	90 e0       	ldi	r25, 0x00	; 0
    706c:	9f 83       	std	Y+7, r25	; 0x07
    706e:	8e 83       	std	Y+6, r24	; 0x06
    7070:	83 e0       	ldi	r24, 0x03	; 3
    7072:	90 e0       	ldi	r25, 0x00	; 0
    7074:	9d 87       	std	Y+13, r25	; 0x0d
    7076:	8c 87       	std	Y+12, r24	; 0x0c
    7078:	65 c0       	rjmp	.+202    	; 0x7144 <time_to_tm+0x1a4>
    707a:	c5 01       	movw	r24, r10
    707c:	b4 01       	movw	r22, r8
    707e:	20 e8       	ldi	r18, 0x80	; 128
    7080:	31 e5       	ldi	r19, 0x51	; 81
    7082:	41 e0       	ldi	r20, 0x01	; 1
    7084:	50 e0       	ldi	r21, 0x00	; 0
    7086:	0e 94 04 e4 	call	0x1c808	; 0x1c808 <__udivmodsi4>
    708a:	49 01       	movw	r8, r18
    708c:	5a 01       	movw	r10, r20
    708e:	ca 01       	movw	r24, r20
    7090:	b9 01       	movw	r22, r18
    7092:	6c 5f       	subi	r22, 0xFC	; 252
    7094:	7f 4f       	sbci	r23, 0xFF	; 255
    7096:	8f 4f       	sbci	r24, 0xFF	; 255
    7098:	9f 4f       	sbci	r25, 0xFF	; 255
    709a:	27 e0       	ldi	r18, 0x07	; 7
    709c:	30 e0       	ldi	r19, 0x00	; 0
    709e:	40 e0       	ldi	r20, 0x00	; 0
    70a0:	50 e0       	ldi	r21, 0x00	; 0
    70a2:	0e 94 26 e4 	call	0x1c84c	; 0x1c84c <__divmodsi4>
    70a6:	7d 87       	std	Y+13, r23	; 0x0d
    70a8:	6c 87       	std	Y+12, r22	; 0x0c
    70aa:	02 eb       	ldi	r16, 0xB2	; 178
    70ac:	17 e0       	ldi	r17, 0x07	; 7
    70ae:	c8 01       	movw	r24, r16
    70b0:	31 df       	rcall	.-414    	; 0x6f14 <IS_Leap>
    70b2:	00 97       	sbiw	r24, 0x00	; 0
    70b4:	19 f4       	brne	.+6      	; 0x70bc <time_to_tm+0x11c>
    70b6:	4d e6       	ldi	r20, 0x6D	; 109
    70b8:	51 e0       	ldi	r21, 0x01	; 1
    70ba:	02 c0       	rjmp	.+4      	; 0x70c0 <time_to_tm+0x120>
    70bc:	4e e6       	ldi	r20, 0x6E	; 110
    70be:	51 e0       	ldi	r21, 0x01	; 1
    70c0:	05 2e       	mov	r0, r21
    70c2:	00 0c       	add	r0, r0
    70c4:	66 0b       	sbc	r22, r22
    70c6:	77 0b       	sbc	r23, r23
    70c8:	84 16       	cp	r8, r20
    70ca:	95 06       	cpc	r9, r21
    70cc:	a6 06       	cpc	r10, r22
    70ce:	b7 06       	cpc	r11, r23
    70d0:	3c f0       	brlt	.+14     	; 0x70e0 <time_to_tm+0x140>
    70d2:	0f 5f       	subi	r16, 0xFF	; 255
    70d4:	1f 4f       	sbci	r17, 0xFF	; 255
    70d6:	84 1a       	sub	r8, r20
    70d8:	95 0a       	sbc	r9, r21
    70da:	a6 0a       	sbc	r10, r22
    70dc:	b7 0a       	sbc	r11, r23
    70de:	e7 cf       	rjmp	.-50     	; 0x70ae <time_to_tm+0x10e>
    70e0:	0c 56       	subi	r16, 0x6C	; 108
    70e2:	17 40       	sbci	r17, 0x07	; 7
    70e4:	1b 87       	std	Y+11, r17	; 0x0b
    70e6:	0a 87       	std	Y+10, r16	; 0x0a
    70e8:	9f 86       	std	Y+15, r9	; 0x0f
    70ea:	8e 86       	std	Y+14, r8	; 0x0e
    70ec:	e8 ea       	ldi	r30, 0xA8	; 168
    70ee:	f2 e0       	ldi	r31, 0x02	; 2
    70f0:	20 e0       	ldi	r18, 0x00	; 0
    70f2:	30 e0       	ldi	r19, 0x00	; 0
    70f4:	18 14       	cp	r1, r8
    70f6:	19 04       	cpc	r1, r9
    70f8:	1a 04       	cpc	r1, r10
    70fa:	1b 04       	cpc	r1, r11
    70fc:	e4 f4       	brge	.+56     	; 0x7136 <time_to_tm+0x196>
    70fe:	2c 30       	cpi	r18, 0x0C	; 12
    7100:	31 05       	cpc	r19, r1
    7102:	c9 f0       	breq	.+50     	; 0x7136 <time_to_tm+0x196>
    7104:	41 91       	ld	r20, Z+
    7106:	51 91       	ld	r21, Z+
    7108:	21 30       	cpi	r18, 0x01	; 1
    710a:	31 05       	cpc	r19, r1
    710c:	21 f4       	brne	.+8      	; 0x7116 <time_to_tm+0x176>
    710e:	00 97       	sbiw	r24, 0x00	; 0
    7110:	11 f0       	breq	.+4      	; 0x7116 <time_to_tm+0x176>
    7112:	4f 5f       	subi	r20, 0xFF	; 255
    7114:	5f 4f       	sbci	r21, 0xFF	; 255
    7116:	05 2e       	mov	r0, r21
    7118:	00 0c       	add	r0, r0
    711a:	66 0b       	sbc	r22, r22
    711c:	77 0b       	sbc	r23, r23
    711e:	84 16       	cp	r8, r20
    7120:	95 06       	cpc	r9, r21
    7122:	a6 06       	cpc	r10, r22
    7124:	b7 06       	cpc	r11, r23
    7126:	3c f0       	brlt	.+14     	; 0x7136 <time_to_tm+0x196>
    7128:	84 1a       	sub	r8, r20
    712a:	95 0a       	sbc	r9, r21
    712c:	a6 0a       	sbc	r10, r22
    712e:	b7 0a       	sbc	r11, r23
    7130:	2f 5f       	subi	r18, 0xFF	; 255
    7132:	3f 4f       	sbci	r19, 0xFF	; 255
    7134:	df cf       	rjmp	.-66     	; 0x70f4 <time_to_tm+0x154>
    7136:	39 87       	std	Y+9, r19	; 0x09
    7138:	28 87       	std	Y+8, r18	; 0x08
    713a:	af ef       	ldi	r26, 0xFF	; 255
    713c:	8a 1a       	sub	r8, r26
    713e:	9a 0a       	sbc	r9, r26
    7140:	9f 82       	std	Y+7, r9	; 0x07
    7142:	8e 82       	std	Y+6, r8	; 0x06
    7144:	b6 01       	movw	r22, r12
    7146:	c7 01       	movw	r24, r14
    7148:	04 c0       	rjmp	.+8      	; 0x7152 <time_to_tm+0x1b2>
    714a:	6f ef       	ldi	r22, 0xFF	; 255
    714c:	7f ef       	ldi	r23, 0xFF	; 255
    714e:	8f ef       	ldi	r24, 0xFF	; 255
    7150:	9f ef       	ldi	r25, 0xFF	; 255
    7152:	cd b7       	in	r28, 0x3d	; 61
    7154:	de b7       	in	r29, 0x3e	; 62
    7156:	e0 e1       	ldi	r30, 0x10	; 16
    7158:	0c 94 a4 e4 	jmp	0x1c948	; 0x1c948 <__epilogue_restores__+0x4>

0000715c <gmtime_r>:
    715c:	0f 93       	push	r16
    715e:	1f 93       	push	r17
    7160:	cf 93       	push	r28
    7162:	df 93       	push	r29
    7164:	eb 01       	movw	r28, r22
    7166:	fc 01       	movw	r30, r24
    7168:	60 81       	ld	r22, Z
    716a:	71 81       	ldd	r23, Z+1	; 0x01
    716c:	82 81       	ldd	r24, Z+2	; 0x02
    716e:	93 81       	ldd	r25, Z+3	; 0x03
    7170:	8e 01       	movw	r16, r28
    7172:	20 e0       	ldi	r18, 0x00	; 0
    7174:	30 e0       	ldi	r19, 0x00	; 0
    7176:	a9 01       	movw	r20, r18
    7178:	13 df       	rcall	.-474    	; 0x6fa0 <time_to_tm>
    717a:	ce 01       	movw	r24, r28
    717c:	df 91       	pop	r29
    717e:	cf 91       	pop	r28
    7180:	1f 91       	pop	r17
    7182:	0f 91       	pop	r16
    7184:	08 95       	ret

00007186 <gmtime>:
    7186:	24 e6       	ldi	r18, 0x64	; 100
    7188:	37 e1       	ldi	r19, 0x17	; 23
    718a:	30 93 7b 17 	sts	0x177B, r19	; 0x80177b <p.3795+0x1>
    718e:	20 93 7a 17 	sts	0x177A, r18	; 0x80177a <p.3795>
    7192:	b9 01       	movw	r22, r18
    7194:	e3 df       	rcall	.-58     	; 0x715c <gmtime_r>
    7196:	84 e6       	ldi	r24, 0x64	; 100
    7198:	97 e1       	ldi	r25, 0x17	; 23
    719a:	08 95       	ret

0000719c <gettimezone>:
    719c:	e2 e0       	ldi	r30, 0x02	; 2
    719e:	fa e1       	ldi	r31, 0x1A	; 26
    71a0:	20 81       	ld	r18, Z
    71a2:	31 81       	ldd	r19, Z+1	; 0x01
    71a4:	dc 01       	movw	r26, r24
    71a6:	2d 93       	st	X+, r18
    71a8:	3c 93       	st	X, r19
    71aa:	22 81       	ldd	r18, Z+2	; 0x02
    71ac:	33 81       	ldd	r19, Z+3	; 0x03
    71ae:	fc 01       	movw	r30, r24
    71b0:	33 83       	std	Z+3, r19	; 0x03
    71b2:	22 83       	std	Z+2, r18	; 0x02
    71b4:	80 e0       	ldi	r24, 0x00	; 0
    71b6:	90 e0       	ldi	r25, 0x00	; 0
    71b8:	08 95       	ret

000071ba <settimezone>:
    71ba:	cf 93       	push	r28
    71bc:	df 93       	push	r29
    71be:	ec 01       	movw	r28, r24
    71c0:	28 81       	ld	r18, Y
    71c2:	39 81       	ldd	r19, Y+1	; 0x01
    71c4:	e2 e0       	ldi	r30, 0x02	; 2
    71c6:	fa e1       	ldi	r31, 0x1A	; 26
    71c8:	31 83       	std	Z+1, r19	; 0x01
    71ca:	20 83       	st	Z, r18
    71cc:	8a 81       	ldd	r24, Y+2	; 0x02
    71ce:	9b 81       	ldd	r25, Y+3	; 0x03
    71d0:	93 83       	std	Z+3, r25	; 0x03
    71d2:	82 83       	std	Z+2, r24	; 0x02
    71d4:	80 e0       	ldi	r24, 0x00	; 0
    71d6:	90 e0       	ldi	r25, 0x00	; 0
    71d8:	df 91       	pop	r29
    71da:	cf 91       	pop	r28
    71dc:	08 95       	ret

000071de <gettimeofday>:
    71de:	a8 e0       	ldi	r26, 0x08	; 8
    71e0:	b0 e0       	ldi	r27, 0x00	; 0
    71e2:	e5 ef       	ldi	r30, 0xF5	; 245
    71e4:	f8 e3       	ldi	r31, 0x38	; 56
    71e6:	0c 94 92 e4 	jmp	0x1c924	; 0x1c924 <__prologue_saves__+0x18>
    71ea:	8c 01       	movw	r16, r24
    71ec:	7b 01       	movw	r14, r22
    71ee:	be 01       	movw	r22, r28
    71f0:	6f 5f       	subi	r22, 0xFF	; 255
    71f2:	7f 4f       	sbci	r23, 0xFF	; 255
    71f4:	80 e0       	ldi	r24, 0x00	; 0
    71f6:	90 e0       	ldi	r25, 0x00	; 0
    71f8:	e1 db       	rcall	.-2110   	; 0x69bc <clock_gettime>
    71fa:	89 81       	ldd	r24, Y+1	; 0x01
    71fc:	9a 81       	ldd	r25, Y+2	; 0x02
    71fe:	ab 81       	ldd	r26, Y+3	; 0x03
    7200:	bc 81       	ldd	r27, Y+4	; 0x04
    7202:	f8 01       	movw	r30, r16
    7204:	80 83       	st	Z, r24
    7206:	91 83       	std	Z+1, r25	; 0x01
    7208:	a2 83       	std	Z+2, r26	; 0x02
    720a:	b3 83       	std	Z+3, r27	; 0x03
    720c:	6d 81       	ldd	r22, Y+5	; 0x05
    720e:	7e 81       	ldd	r23, Y+6	; 0x06
    7210:	8f 81       	ldd	r24, Y+7	; 0x07
    7212:	98 85       	ldd	r25, Y+8	; 0x08
    7214:	28 ee       	ldi	r18, 0xE8	; 232
    7216:	33 e0       	ldi	r19, 0x03	; 3
    7218:	40 e0       	ldi	r20, 0x00	; 0
    721a:	50 e0       	ldi	r21, 0x00	; 0
    721c:	0e 94 26 e4 	call	0x1c84c	; 0x1c84c <__divmodsi4>
    7220:	f8 01       	movw	r30, r16
    7222:	24 83       	std	Z+4, r18	; 0x04
    7224:	35 83       	std	Z+5, r19	; 0x05
    7226:	46 83       	std	Z+6, r20	; 0x06
    7228:	57 83       	std	Z+7, r21	; 0x07
    722a:	c7 01       	movw	r24, r14
    722c:	b7 df       	rcall	.-146    	; 0x719c <gettimezone>
    722e:	80 e0       	ldi	r24, 0x00	; 0
    7230:	90 e0       	ldi	r25, 0x00	; 0
    7232:	28 96       	adiw	r28, 0x08	; 8
    7234:	e6 e0       	ldi	r30, 0x06	; 6
    7236:	0c 94 ae e4 	jmp	0x1c95c	; 0x1c95c <__epilogue_restores__+0x18>

0000723a <time>:
    723a:	cf 93       	push	r28
    723c:	df 93       	push	r29
    723e:	ec 01       	movw	r28, r24
    7240:	66 e4       	ldi	r22, 0x46	; 70
    7242:	77 e1       	ldi	r23, 0x17	; 23
    7244:	80 e0       	ldi	r24, 0x00	; 0
    7246:	90 e0       	ldi	r25, 0x00	; 0
    7248:	b9 db       	rcall	.-2190   	; 0x69bc <clock_gettime>
    724a:	20 97       	sbiw	r28, 0x00	; 0
    724c:	61 f0       	breq	.+24     	; 0x7266 <time+0x2c>
    724e:	80 91 46 17 	lds	r24, 0x1746	; 0x801746 <ts.3873>
    7252:	90 91 47 17 	lds	r25, 0x1747	; 0x801747 <ts.3873+0x1>
    7256:	a0 91 48 17 	lds	r26, 0x1748	; 0x801748 <ts.3873+0x2>
    725a:	b0 91 49 17 	lds	r27, 0x1749	; 0x801749 <ts.3873+0x3>
    725e:	88 83       	st	Y, r24
    7260:	99 83       	std	Y+1, r25	; 0x01
    7262:	aa 83       	std	Y+2, r26	; 0x02
    7264:	bb 83       	std	Y+3, r27	; 0x03
    7266:	60 91 46 17 	lds	r22, 0x1746	; 0x801746 <ts.3873>
    726a:	70 91 47 17 	lds	r23, 0x1747	; 0x801747 <ts.3873+0x1>
    726e:	80 91 48 17 	lds	r24, 0x1748	; 0x801748 <ts.3873+0x2>
    7272:	90 91 49 17 	lds	r25, 0x1749	; 0x801749 <ts.3873+0x3>
    7276:	df 91       	pop	r29
    7278:	cf 91       	pop	r28
    727a:	08 95       	ret

0000727c <is_dst>:
    727c:	cf 92       	push	r12
    727e:	df 92       	push	r13
    7280:	ef 92       	push	r14
    7282:	ff 92       	push	r15
    7284:	6b 01       	movw	r12, r22
    7286:	7c 01       	movw	r14, r24
    7288:	05 d4       	rcall	.+2058   	; 0x7a94 <set_dst>
    728a:	80 91 06 1a 	lds	r24, 0x1A06	; 0x801a06 <dst>
    728e:	90 91 07 1a 	lds	r25, 0x1A07	; 0x801a07 <dst+0x1>
    7292:	a0 91 08 1a 	lds	r26, 0x1A08	; 0x801a08 <dst+0x2>
    7296:	b0 91 09 1a 	lds	r27, 0x1A09	; 0x801a09 <dst+0x3>
    729a:	c8 16       	cp	r12, r24
    729c:	d9 06       	cpc	r13, r25
    729e:	ea 06       	cpc	r14, r26
    72a0:	fb 06       	cpc	r15, r27
    72a2:	88 f0       	brcs	.+34     	; 0x72c6 <is_dst+0x4a>
    72a4:	81 e0       	ldi	r24, 0x01	; 1
    72a6:	90 e0       	ldi	r25, 0x00	; 0
    72a8:	40 91 0a 1a 	lds	r20, 0x1A0A	; 0x801a0a <dst+0x4>
    72ac:	50 91 0b 1a 	lds	r21, 0x1A0B	; 0x801a0b <dst+0x5>
    72b0:	60 91 0c 1a 	lds	r22, 0x1A0C	; 0x801a0c <dst+0x6>
    72b4:	70 91 0d 1a 	lds	r23, 0x1A0D	; 0x801a0d <dst+0x7>
    72b8:	4c 15       	cp	r20, r12
    72ba:	5d 05       	cpc	r21, r13
    72bc:	6e 05       	cpc	r22, r14
    72be:	7f 05       	cpc	r23, r15
    72c0:	20 f4       	brcc	.+8      	; 0x72ca <is_dst+0x4e>
    72c2:	80 e0       	ldi	r24, 0x00	; 0
    72c4:	02 c0       	rjmp	.+4      	; 0x72ca <is_dst+0x4e>
    72c6:	80 e0       	ldi	r24, 0x00	; 0
    72c8:	90 e0       	ldi	r25, 0x00	; 0
    72ca:	ff 90       	pop	r15
    72cc:	ef 90       	pop	r14
    72ce:	df 90       	pop	r13
    72d0:	cf 90       	pop	r12
    72d2:	08 95       	ret

000072d4 <localtime_r>:
    72d4:	4f 92       	push	r4
    72d6:	5f 92       	push	r5
    72d8:	6f 92       	push	r6
    72da:	7f 92       	push	r7
    72dc:	af 92       	push	r10
    72de:	bf 92       	push	r11
    72e0:	cf 92       	push	r12
    72e2:	df 92       	push	r13
    72e4:	ef 92       	push	r14
    72e6:	ff 92       	push	r15
    72e8:	0f 93       	push	r16
    72ea:	1f 93       	push	r17
    72ec:	cf 93       	push	r28
    72ee:	df 93       	push	r29
    72f0:	00 d0       	rcall	.+0      	; 0x72f2 <localtime_r+0x1e>
    72f2:	00 d0       	rcall	.+0      	; 0x72f4 <localtime_r+0x20>
    72f4:	cd b7       	in	r28, 0x3d	; 61
    72f6:	de b7       	in	r29, 0x3e	; 62
    72f8:	5b 01       	movw	r10, r22
    72fa:	fc 01       	movw	r30, r24
    72fc:	40 80       	ld	r4, Z
    72fe:	51 80       	ldd	r5, Z+1	; 0x01
    7300:	62 80       	ldd	r6, Z+2	; 0x02
    7302:	73 80       	ldd	r7, Z+3	; 0x03
    7304:	ce 01       	movw	r24, r28
    7306:	01 96       	adiw	r24, 0x01	; 1
    7308:	49 df       	rcall	.-366    	; 0x719c <gettimezone>
    730a:	a9 81       	ldd	r26, Y+1	; 0x01
    730c:	ba 81       	ldd	r27, Y+2	; 0x02
    730e:	2c e3       	ldi	r18, 0x3C	; 60
    7310:	30 e0       	ldi	r19, 0x00	; 0
    7312:	0e 94 60 e4 	call	0x1c8c0	; 0x1c8c0 <__usmulhisi3>
    7316:	6b 01       	movw	r12, r22
    7318:	7c 01       	movw	r14, r24
    731a:	c3 01       	movw	r24, r6
    731c:	b2 01       	movw	r22, r4
    731e:	6c 19       	sub	r22, r12
    7320:	7d 09       	sbc	r23, r13
    7322:	8e 09       	sbc	r24, r14
    7324:	9f 09       	sbc	r25, r15
    7326:	aa df       	rcall	.-172    	; 0x727c <is_dst>
    7328:	89 2b       	or	r24, r25
    732a:	31 f0       	breq	.+12     	; 0x7338 <localtime_r+0x64>
    732c:	f0 e1       	ldi	r31, 0x10	; 16
    732e:	cf 1a       	sub	r12, r31
    7330:	fe e0       	ldi	r31, 0x0E	; 14
    7332:	df 0a       	sbc	r13, r31
    7334:	e1 08       	sbc	r14, r1
    7336:	f1 08       	sbc	r15, r1
    7338:	85 01       	movw	r16, r10
    733a:	a7 01       	movw	r20, r14
    733c:	96 01       	movw	r18, r12
    733e:	c3 01       	movw	r24, r6
    7340:	b2 01       	movw	r22, r4
    7342:	2e de       	rcall	.-932    	; 0x6fa0 <time_to_tm>
    7344:	c5 01       	movw	r24, r10
    7346:	0f 90       	pop	r0
    7348:	0f 90       	pop	r0
    734a:	0f 90       	pop	r0
    734c:	0f 90       	pop	r0
    734e:	df 91       	pop	r29
    7350:	cf 91       	pop	r28
    7352:	1f 91       	pop	r17
    7354:	0f 91       	pop	r16
    7356:	ff 90       	pop	r15
    7358:	ef 90       	pop	r14
    735a:	df 90       	pop	r13
    735c:	cf 90       	pop	r12
    735e:	bf 90       	pop	r11
    7360:	af 90       	pop	r10
    7362:	7f 90       	pop	r7
    7364:	6f 90       	pop	r6
    7366:	5f 90       	pop	r5
    7368:	4f 90       	pop	r4
    736a:	08 95       	ret

0000736c <localtime>:
    736c:	6e e4       	ldi	r22, 0x4E	; 78
    736e:	77 e1       	ldi	r23, 0x17	; 23
    7370:	b1 cf       	rjmp	.-158    	; 0x72d4 <localtime_r>
    7372:	08 95       	ret

00007374 <normalize>:
    7374:	aa e0       	ldi	r26, 0x0A	; 10
    7376:	b0 e0       	ldi	r27, 0x00	; 0
    7378:	e0 ec       	ldi	r30, 0xC0	; 192
    737a:	f9 e3       	ldi	r31, 0x39	; 57
    737c:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
    7380:	7c 01       	movw	r14, r24
    7382:	7a 87       	std	Y+10, r23	; 0x0a
    7384:	69 87       	std	Y+9, r22	; 0x09
    7386:	f7 01       	movw	r30, r14
    7388:	80 81       	ld	r24, Z
    738a:	91 81       	ldd	r25, Z+1	; 0x01
    738c:	8c 33       	cpi	r24, 0x3C	; 60
    738e:	91 05       	cpc	r25, r1
    7390:	5c f0       	brlt	.+22     	; 0x73a8 <normalize+0x34>
    7392:	f7 01       	movw	r30, r14
    7394:	22 81       	ldd	r18, Z+2	; 0x02
    7396:	33 81       	ldd	r19, Z+3	; 0x03
    7398:	2f 5f       	subi	r18, 0xFF	; 255
    739a:	3f 4f       	sbci	r19, 0xFF	; 255
    739c:	33 83       	std	Z+3, r19	; 0x03
    739e:	22 83       	std	Z+2, r18	; 0x02
    73a0:	cc 97       	sbiw	r24, 0x3c	; 60
    73a2:	91 83       	std	Z+1, r25	; 0x01
    73a4:	80 83       	st	Z, r24
    73a6:	ef cf       	rjmp	.-34     	; 0x7386 <normalize+0x12>
    73a8:	f7 01       	movw	r30, r14
    73aa:	01 90       	ld	r0, Z+
    73ac:	f0 81       	ld	r31, Z
    73ae:	e0 2d       	mov	r30, r0
    73b0:	fe 83       	std	Y+6, r31	; 0x06
    73b2:	ed 83       	std	Y+5, r30	; 0x05
    73b4:	f7 ff       	sbrs	r31, 7
    73b6:	0d c0       	rjmp	.+26     	; 0x73d2 <normalize+0x5e>
    73b8:	f7 01       	movw	r30, r14
    73ba:	82 81       	ldd	r24, Z+2	; 0x02
    73bc:	93 81       	ldd	r25, Z+3	; 0x03
    73be:	01 97       	sbiw	r24, 0x01	; 1
    73c0:	93 83       	std	Z+3, r25	; 0x03
    73c2:	82 83       	std	Z+2, r24	; 0x02
    73c4:	6d 81       	ldd	r22, Y+5	; 0x05
    73c6:	7e 81       	ldd	r23, Y+6	; 0x06
    73c8:	64 5c       	subi	r22, 0xC4	; 196
    73ca:	7f 4f       	sbci	r23, 0xFF	; 255
    73cc:	71 83       	std	Z+1, r23	; 0x01
    73ce:	60 83       	st	Z, r22
    73d0:	eb cf       	rjmp	.-42     	; 0x73a8 <normalize+0x34>
    73d2:	f7 01       	movw	r30, r14
    73d4:	82 81       	ldd	r24, Z+2	; 0x02
    73d6:	93 81       	ldd	r25, Z+3	; 0x03
    73d8:	8c 33       	cpi	r24, 0x3C	; 60
    73da:	91 05       	cpc	r25, r1
    73dc:	5c f0       	brlt	.+22     	; 0x73f4 <normalize+0x80>
    73de:	f7 01       	movw	r30, r14
    73e0:	24 81       	ldd	r18, Z+4	; 0x04
    73e2:	35 81       	ldd	r19, Z+5	; 0x05
    73e4:	2f 5f       	subi	r18, 0xFF	; 255
    73e6:	3f 4f       	sbci	r19, 0xFF	; 255
    73e8:	35 83       	std	Z+5, r19	; 0x05
    73ea:	24 83       	std	Z+4, r18	; 0x04
    73ec:	cc 97       	sbiw	r24, 0x3c	; 60
    73ee:	93 83       	std	Z+3, r25	; 0x03
    73f0:	82 83       	std	Z+2, r24	; 0x02
    73f2:	ef cf       	rjmp	.-34     	; 0x73d2 <normalize+0x5e>
    73f4:	f7 01       	movw	r30, r14
    73f6:	22 80       	ldd	r2, Z+2	; 0x02
    73f8:	33 80       	ldd	r3, Z+3	; 0x03
    73fa:	37 fe       	sbrs	r3, 7
    73fc:	0d c0       	rjmp	.+26     	; 0x7418 <normalize+0xa4>
    73fe:	f7 01       	movw	r30, r14
    7400:	84 81       	ldd	r24, Z+4	; 0x04
    7402:	95 81       	ldd	r25, Z+5	; 0x05
    7404:	01 97       	sbiw	r24, 0x01	; 1
    7406:	95 83       	std	Z+5, r25	; 0x05
    7408:	84 83       	std	Z+4, r24	; 0x04
    740a:	fc e3       	ldi	r31, 0x3C	; 60
    740c:	2f 0e       	add	r2, r31
    740e:	31 1c       	adc	r3, r1
    7410:	f7 01       	movw	r30, r14
    7412:	33 82       	std	Z+3, r3	; 0x03
    7414:	22 82       	std	Z+2, r2	; 0x02
    7416:	ee cf       	rjmp	.-36     	; 0x73f4 <normalize+0x80>
    7418:	f7 01       	movw	r30, r14
    741a:	84 81       	ldd	r24, Z+4	; 0x04
    741c:	95 81       	ldd	r25, Z+5	; 0x05
    741e:	88 31       	cpi	r24, 0x18	; 24
    7420:	91 05       	cpc	r25, r1
    7422:	5c f0       	brlt	.+22     	; 0x743a <normalize+0xc6>
    7424:	f7 01       	movw	r30, r14
    7426:	26 81       	ldd	r18, Z+6	; 0x06
    7428:	37 81       	ldd	r19, Z+7	; 0x07
    742a:	2f 5f       	subi	r18, 0xFF	; 255
    742c:	3f 4f       	sbci	r19, 0xFF	; 255
    742e:	37 83       	std	Z+7, r19	; 0x07
    7430:	26 83       	std	Z+6, r18	; 0x06
    7432:	48 97       	sbiw	r24, 0x18	; 24
    7434:	95 83       	std	Z+5, r25	; 0x05
    7436:	84 83       	std	Z+4, r24	; 0x04
    7438:	ef cf       	rjmp	.-34     	; 0x7418 <normalize+0xa4>
    743a:	f7 01       	movw	r30, r14
    743c:	04 81       	ldd	r16, Z+4	; 0x04
    743e:	15 81       	ldd	r17, Z+5	; 0x05
    7440:	17 ff       	sbrs	r17, 7
    7442:	0b c0       	rjmp	.+22     	; 0x745a <normalize+0xe6>
    7444:	f7 01       	movw	r30, r14
    7446:	86 81       	ldd	r24, Z+6	; 0x06
    7448:	97 81       	ldd	r25, Z+7	; 0x07
    744a:	01 97       	sbiw	r24, 0x01	; 1
    744c:	97 83       	std	Z+7, r25	; 0x07
    744e:	86 83       	std	Z+6, r24	; 0x06
    7450:	08 5e       	subi	r16, 0xE8	; 232
    7452:	1f 4f       	sbci	r17, 0xFF	; 255
    7454:	15 83       	std	Z+5, r17	; 0x05
    7456:	04 83       	std	Z+4, r16	; 0x04
    7458:	f0 cf       	rjmp	.-32     	; 0x743a <normalize+0xc6>
    745a:	f7 01       	movw	r30, r14
    745c:	80 85       	ldd	r24, Z+8	; 0x08
    745e:	91 85       	ldd	r25, Z+9	; 0x09
    7460:	8c 30       	cpi	r24, 0x0C	; 12
    7462:	91 05       	cpc	r25, r1
    7464:	5c f0       	brlt	.+22     	; 0x747c <normalize+0x108>
    7466:	f7 01       	movw	r30, r14
    7468:	22 85       	ldd	r18, Z+10	; 0x0a
    746a:	33 85       	ldd	r19, Z+11	; 0x0b
    746c:	2f 5f       	subi	r18, 0xFF	; 255
    746e:	3f 4f       	sbci	r19, 0xFF	; 255
    7470:	33 87       	std	Z+11, r19	; 0x0b
    7472:	22 87       	std	Z+10, r18	; 0x0a
    7474:	0c 97       	sbiw	r24, 0x0c	; 12
    7476:	91 87       	std	Z+9, r25	; 0x09
    7478:	80 87       	std	Z+8, r24	; 0x08
    747a:	ef cf       	rjmp	.-34     	; 0x745a <normalize+0xe6>
    747c:	f7 01       	movw	r30, r14
    747e:	80 85       	ldd	r24, Z+8	; 0x08
    7480:	91 85       	ldd	r25, Z+9	; 0x09
    7482:	97 ff       	sbrs	r25, 7
    7484:	2d c0       	rjmp	.+90     	; 0x74e0 <normalize+0x16c>
    7486:	f7 01       	movw	r30, r14
    7488:	22 85       	ldd	r18, Z+10	; 0x0a
    748a:	33 85       	ldd	r19, Z+11	; 0x0b
    748c:	21 50       	subi	r18, 0x01	; 1
    748e:	31 09       	sbc	r19, r1
    7490:	33 87       	std	Z+11, r19	; 0x0b
    7492:	22 87       	std	Z+10, r18	; 0x0a
    7494:	0c 96       	adiw	r24, 0x0c	; 12
    7496:	91 87       	std	Z+9, r25	; 0x09
    7498:	80 87       	std	Z+8, r24	; 0x08
    749a:	f0 cf       	rjmp	.-32     	; 0x747c <normalize+0x108>
    749c:	f7 01       	movw	r30, r14
    749e:	c6 80       	ldd	r12, Z+6	; 0x06
    74a0:	d7 80       	ldd	r13, Z+7	; 0x07
    74a2:	a0 84       	ldd	r10, Z+8	; 0x08
    74a4:	b1 84       	ldd	r11, Z+9	; 0x09
    74a6:	b4 01       	movw	r22, r8
    74a8:	c5 01       	movw	r24, r10
    74aa:	59 dd       	rcall	.-1358   	; 0x6f5e <Days_Per_Month>
    74ac:	8c 15       	cp	r24, r12
    74ae:	9d 05       	cpc	r25, r13
    74b0:	84 f5       	brge	.+96     	; 0x7512 <normalize+0x19e>
    74b2:	c8 1a       	sub	r12, r24
    74b4:	d9 0a       	sbc	r13, r25
    74b6:	f7 01       	movw	r30, r14
    74b8:	d7 82       	std	Z+7, r13	; 0x07
    74ba:	c6 82       	std	Z+6, r12	; 0x06
    74bc:	c5 01       	movw	r24, r10
    74be:	01 96       	adiw	r24, 0x01	; 1
    74c0:	91 87       	std	Z+9, r25	; 0x09
    74c2:	80 87       	std	Z+8, r24	; 0x08
    74c4:	0c 97       	sbiw	r24, 0x0c	; 12
    74c6:	54 f3       	brlt	.-44     	; 0x749c <normalize+0x128>
    74c8:	fb e0       	ldi	r31, 0x0B	; 11
    74ca:	af 1a       	sub	r10, r31
    74cc:	b1 08       	sbc	r11, r1
    74ce:	f7 01       	movw	r30, r14
    74d0:	b1 86       	std	Z+9, r11	; 0x09
    74d2:	a0 86       	std	Z+8, r10	; 0x08
    74d4:	ff ef       	ldi	r31, 0xFF	; 255
    74d6:	8f 1a       	sub	r8, r31
    74d8:	9f 0a       	sbc	r9, r31
    74da:	f7 01       	movw	r30, r14
    74dc:	93 86       	std	Z+11, r9	; 0x0b
    74de:	82 86       	std	Z+10, r8	; 0x0a
    74e0:	f7 01       	movw	r30, r14
    74e2:	82 84       	ldd	r8, Z+10	; 0x0a
    74e4:	93 84       	ldd	r9, Z+11	; 0x0b
    74e6:	da cf       	rjmp	.-76     	; 0x749c <normalize+0x128>
    74e8:	f7 01       	movw	r30, r14
    74ea:	80 85       	ldd	r24, Z+8	; 0x08
    74ec:	91 85       	ldd	r25, Z+9	; 0x09
    74ee:	9c 01       	movw	r18, r24
    74f0:	21 50       	subi	r18, 0x01	; 1
    74f2:	31 09       	sbc	r19, r1
    74f4:	37 fd       	sbrc	r19, 7
    74f6:	16 c0       	rjmp	.+44     	; 0x7524 <normalize+0x1b0>
    74f8:	31 87       	std	Z+9, r19	; 0x09
    74fa:	20 87       	std	Z+8, r18	; 0x08
    74fc:	f7 01       	movw	r30, r14
    74fe:	62 85       	ldd	r22, Z+10	; 0x0a
    7500:	73 85       	ldd	r23, Z+11	; 0x0b
    7502:	80 85       	ldd	r24, Z+8	; 0x08
    7504:	91 85       	ldd	r25, Z+9	; 0x09
    7506:	2b dd       	rcall	.-1450   	; 0x6f5e <Days_Per_Month>
    7508:	88 0d       	add	r24, r8
    750a:	99 1d       	adc	r25, r9
    750c:	f7 01       	movw	r30, r14
    750e:	97 83       	std	Z+7, r25	; 0x07
    7510:	86 83       	std	Z+6, r24	; 0x06
    7512:	f7 01       	movw	r30, r14
    7514:	86 80       	ldd	r8, Z+6	; 0x06
    7516:	97 80       	ldd	r9, Z+7	; 0x07
    7518:	a2 84       	ldd	r10, Z+10	; 0x0a
    751a:	b3 84       	ldd	r11, Z+11	; 0x0b
    751c:	18 14       	cp	r1, r8
    751e:	19 04       	cpc	r1, r9
    7520:	1c f7       	brge	.-58     	; 0x74e8 <normalize+0x174>
    7522:	0b c0       	rjmp	.+22     	; 0x753a <normalize+0x1c6>
    7524:	0b 96       	adiw	r24, 0x0b	; 11
    7526:	f7 01       	movw	r30, r14
    7528:	91 87       	std	Z+9, r25	; 0x09
    752a:	80 87       	std	Z+8, r24	; 0x08
    752c:	f1 e0       	ldi	r31, 0x01	; 1
    752e:	af 1a       	sub	r10, r31
    7530:	b1 08       	sbc	r11, r1
    7532:	f7 01       	movw	r30, r14
    7534:	b3 86       	std	Z+11, r11	; 0x0b
    7536:	a2 86       	std	Z+10, r10	; 0x0a
    7538:	e1 cf       	rjmp	.-62     	; 0x74fc <normalize+0x188>
    753a:	a5 01       	movw	r20, r10
    753c:	44 59       	subi	r20, 0x94	; 148
    753e:	58 4f       	sbci	r21, 0xF8	; 248
    7540:	58 87       	std	Y+8, r21	; 0x08
    7542:	4f 83       	std	Y+7, r20	; 0x07
    7544:	35 01       	movw	r6, r10
    7546:	56 e4       	ldi	r21, 0x46	; 70
    7548:	65 1a       	sub	r6, r21
    754a:	71 08       	sbc	r7, r1
    754c:	89 e8       	ldi	r24, 0x89	; 137
    754e:	68 16       	cp	r6, r24
    7550:	71 04       	cpc	r7, r1
    7552:	08 f0       	brcs	.+2      	; 0x7556 <normalize+0x1e2>
    7554:	9b c0       	rjmp	.+310    	; 0x768c <normalize+0x318>
    7556:	c0 84       	ldd	r12, Z+8	; 0x08
    7558:	d1 84       	ldd	r13, Z+9	; 0x09
    755a:	9c e0       	ldi	r25, 0x0C	; 12
    755c:	c9 16       	cp	r12, r25
    755e:	d1 04       	cpc	r13, r1
    7560:	08 f0       	brcs	.+2      	; 0x7564 <normalize+0x1f0>
    7562:	94 c0       	rjmp	.+296    	; 0x768c <normalize+0x318>
    7564:	24 01       	movw	r4, r8
    7566:	e1 e0       	ldi	r30, 0x01	; 1
    7568:	4e 1a       	sub	r4, r30
    756a:	51 08       	sbc	r5, r1
    756c:	6f 81       	ldd	r22, Y+7	; 0x07
    756e:	78 85       	ldd	r23, Y+8	; 0x08
    7570:	c6 01       	movw	r24, r12
    7572:	f5 dc       	rcall	.-1558   	; 0x6f5e <Days_Per_Month>
    7574:	48 16       	cp	r4, r24
    7576:	59 06       	cpc	r5, r25
    7578:	0c f0       	brlt	.+2      	; 0x757c <normalize+0x208>
    757a:	88 c0       	rjmp	.+272    	; 0x768c <normalize+0x318>
    757c:	08 31       	cpi	r16, 0x18	; 24
    757e:	11 05       	cpc	r17, r1
    7580:	0c f0       	brlt	.+2      	; 0x7584 <normalize+0x210>
    7582:	84 c0       	rjmp	.+264    	; 0x768c <normalize+0x318>
    7584:	fc e3       	ldi	r31, 0x3C	; 60
    7586:	2f 16       	cp	r2, r31
    7588:	31 04       	cpc	r3, r1
    758a:	0c f0       	brlt	.+2      	; 0x758e <normalize+0x21a>
    758c:	7f c0       	rjmp	.+254    	; 0x768c <normalize+0x318>
    758e:	4d 81       	ldd	r20, Y+5	; 0x05
    7590:	5e 81       	ldd	r21, Y+6	; 0x06
    7592:	4c 33       	cpi	r20, 0x3C	; 60
    7594:	51 05       	cpc	r21, r1
    7596:	0c f0       	brlt	.+2      	; 0x759a <normalize+0x226>
    7598:	79 c0       	rjmp	.+242    	; 0x768c <normalize+0x318>
    759a:	2d e6       	ldi	r18, 0x6D	; 109
    759c:	31 e0       	ldi	r19, 0x01	; 1
    759e:	d3 01       	movw	r26, r6
    75a0:	0e 94 60 e4 	call	0x1c8c0	; 0x1c8c0 <__usmulhisi3>
    75a4:	f6 01       	movw	r30, r12
    75a6:	ee 0f       	add	r30, r30
    75a8:	ff 1f       	adc	r31, r31
    75aa:	e0 54       	subi	r30, 0x40	; 64
    75ac:	fd 4f       	sbci	r31, 0xFD	; 253
    75ae:	20 81       	ld	r18, Z
    75b0:	31 81       	ldd	r19, Z+1	; 0x01
    75b2:	dc 01       	movw	r26, r24
    75b4:	cb 01       	movw	r24, r22
    75b6:	82 0f       	add	r24, r18
    75b8:	93 1f       	adc	r25, r19
    75ba:	a1 1d       	adc	r26, r1
    75bc:	b1 1d       	adc	r27, r1
    75be:	05 2c       	mov	r0, r5
    75c0:	00 0c       	add	r0, r0
    75c2:	66 08       	sbc	r6, r6
    75c4:	77 08       	sbc	r7, r7
    75c6:	48 0e       	add	r4, r24
    75c8:	59 1e       	adc	r5, r25
    75ca:	6a 1e       	adc	r6, r26
    75cc:	7b 1e       	adc	r7, r27
    75ce:	1a 14       	cp	r1, r10
    75d0:	1b 04       	cpc	r1, r11
    75d2:	1c f4       	brge	.+6      	; 0x75da <normalize+0x266>
    75d4:	51 e0       	ldi	r21, 0x01	; 1
    75d6:	a5 1a       	sub	r10, r21
    75d8:	b1 08       	sbc	r11, r1
    75da:	45 01       	movw	r8, r10
    75dc:	95 94       	asr	r9
    75de:	87 94       	ror	r8
    75e0:	95 94       	asr	r9
    75e2:	87 94       	ror	r8
    75e4:	88 ec       	ldi	r24, 0xC8	; 200
    75e6:	a8 16       	cp	r10, r24
    75e8:	b1 04       	cpc	r11, r1
    75ea:	1c f0       	brlt	.+6      	; 0x75f2 <normalize+0x27e>
    75ec:	91 e0       	ldi	r25, 0x01	; 1
    75ee:	89 1a       	sub	r8, r25
    75f0:	91 08       	sbc	r9, r1
    75f2:	09 2c       	mov	r0, r9
    75f4:	00 0c       	add	r0, r0
    75f6:	aa 08       	sbc	r10, r10
    75f8:	bb 08       	sbc	r11, r11
    75fa:	84 0c       	add	r8, r4
    75fc:	95 1c       	adc	r9, r5
    75fe:	a6 1c       	adc	r10, r6
    7600:	b7 1c       	adc	r11, r7
    7602:	24 01       	movw	r4, r8
    7604:	35 01       	movw	r6, r10
    7606:	e1 e1       	ldi	r30, 0x11	; 17
    7608:	4e 1a       	sub	r4, r30
    760a:	51 08       	sbc	r5, r1
    760c:	61 08       	sbc	r6, r1
    760e:	71 08       	sbc	r7, r1
    7610:	f2 e0       	ldi	r31, 0x02	; 2
    7612:	cf 16       	cp	r12, r31
    7614:	d1 04       	cpc	r13, r1
    7616:	64 f0       	brlt	.+24     	; 0x7630 <normalize+0x2bc>
    7618:	8f 81       	ldd	r24, Y+7	; 0x07
    761a:	98 85       	ldd	r25, Y+8	; 0x08
    761c:	7b dc       	rcall	.-1802   	; 0x6f14 <IS_Leap>
    761e:	89 2b       	or	r24, r25
    7620:	39 f0       	breq	.+14     	; 0x7630 <normalize+0x2bc>
    7622:	24 01       	movw	r4, r8
    7624:	35 01       	movw	r6, r10
    7626:	40 e1       	ldi	r20, 0x10	; 16
    7628:	44 1a       	sub	r4, r20
    762a:	51 08       	sbc	r5, r1
    762c:	61 08       	sbc	r6, r1
    762e:	71 08       	sbc	r7, r1
    7630:	a8 e1       	ldi	r26, 0x18	; 24
    7632:	b0 e0       	ldi	r27, 0x00	; 0
    7634:	a3 01       	movw	r20, r6
    7636:	92 01       	movw	r18, r4
    7638:	0e 94 66 e4 	call	0x1c8cc	; 0x1c8cc <__muluhisi3>
    763c:	01 2e       	mov	r0, r17
    763e:	00 0c       	add	r0, r0
    7640:	22 0b       	sbc	r18, r18
    7642:	33 0b       	sbc	r19, r19
    7644:	a9 01       	movw	r20, r18
    7646:	98 01       	movw	r18, r16
    7648:	26 0f       	add	r18, r22
    764a:	37 1f       	adc	r19, r23
    764c:	48 1f       	adc	r20, r24
    764e:	59 1f       	adc	r21, r25
    7650:	ac e3       	ldi	r26, 0x3C	; 60
    7652:	b0 e0       	ldi	r27, 0x00	; 0
    7654:	0e 94 66 e4 	call	0x1c8cc	; 0x1c8cc <__muluhisi3>
    7658:	81 01       	movw	r16, r2
    765a:	03 2c       	mov	r0, r3
    765c:	00 0c       	add	r0, r0
    765e:	22 0b       	sbc	r18, r18
    7660:	33 0b       	sbc	r19, r19
    7662:	a9 01       	movw	r20, r18
    7664:	98 01       	movw	r18, r16
    7666:	26 0f       	add	r18, r22
    7668:	37 1f       	adc	r19, r23
    766a:	48 1f       	adc	r20, r24
    766c:	59 1f       	adc	r21, r25
    766e:	0e 94 66 e4 	call	0x1c8cc	; 0x1c8cc <__muluhisi3>
    7672:	ed 81       	ldd	r30, Y+5	; 0x05
    7674:	fe 81       	ldd	r31, Y+6	; 0x06
    7676:	8f 01       	movw	r16, r30
    7678:	ff 0f       	add	r31, r31
    767a:	22 0b       	sbc	r18, r18
    767c:	33 0b       	sbc	r19, r19
    767e:	48 01       	movw	r8, r16
    7680:	59 01       	movw	r10, r18
    7682:	86 0e       	add	r8, r22
    7684:	97 1e       	adc	r9, r23
    7686:	a8 1e       	adc	r10, r24
    7688:	b9 1e       	adc	r11, r25
    768a:	04 c0       	rjmp	.+8      	; 0x7694 <normalize+0x320>
    768c:	88 24       	eor	r8, r8
    768e:	8a 94       	dec	r8
    7690:	98 2c       	mov	r9, r8
    7692:	54 01       	movw	r10, r8
    7694:	49 85       	ldd	r20, Y+9	; 0x09
    7696:	5a 85       	ldd	r21, Y+10	; 0x0a
    7698:	45 2b       	or	r20, r21
    769a:	e9 f0       	breq	.+58     	; 0x76d6 <normalize+0x362>
    769c:	ce 01       	movw	r24, r28
    769e:	01 96       	adiw	r24, 0x01	; 1
    76a0:	7d dd       	rcall	.-1286   	; 0x719c <gettimezone>
    76a2:	a9 81       	ldd	r26, Y+1	; 0x01
    76a4:	ba 81       	ldd	r27, Y+2	; 0x02
    76a6:	2c e3       	ldi	r18, 0x3C	; 60
    76a8:	30 e0       	ldi	r19, 0x00	; 0
    76aa:	0e 94 60 e4 	call	0x1c8c0	; 0x1c8c0 <__usmulhisi3>
    76ae:	2b 01       	movw	r4, r22
    76b0:	3c 01       	movw	r6, r24
    76b2:	c5 01       	movw	r24, r10
    76b4:	b4 01       	movw	r22, r8
    76b6:	e2 dd       	rcall	.-1084   	; 0x727c <is_dst>
    76b8:	89 2b       	or	r24, r25
    76ba:	51 f0       	breq	.+20     	; 0x76d0 <normalize+0x35c>
    76bc:	50 e1       	ldi	r21, 0x10	; 16
    76be:	45 1a       	sub	r4, r21
    76c0:	5e e0       	ldi	r21, 0x0E	; 14
    76c2:	55 0a       	sbc	r5, r21
    76c4:	61 08       	sbc	r6, r1
    76c6:	71 08       	sbc	r7, r1
    76c8:	cc 24       	eor	r12, r12
    76ca:	c3 94       	inc	r12
    76cc:	d1 2c       	mov	r13, r1
    76ce:	08 c0       	rjmp	.+16     	; 0x76e0 <normalize+0x36c>
    76d0:	c1 2c       	mov	r12, r1
    76d2:	d1 2c       	mov	r13, r1
    76d4:	05 c0       	rjmp	.+10     	; 0x76e0 <normalize+0x36c>
    76d6:	c1 2c       	mov	r12, r1
    76d8:	d1 2c       	mov	r13, r1
    76da:	41 2c       	mov	r4, r1
    76dc:	51 2c       	mov	r5, r1
    76de:	32 01       	movw	r6, r4
    76e0:	87 01       	movw	r16, r14
    76e2:	a3 01       	movw	r20, r6
    76e4:	92 01       	movw	r18, r4
    76e6:	c5 01       	movw	r24, r10
    76e8:	b4 01       	movw	r22, r8
    76ea:	5a dc       	rcall	.-1868   	; 0x6fa0 <time_to_tm>
    76ec:	c1 14       	cp	r12, r1
    76ee:	d1 04       	cpc	r13, r1
    76f0:	29 f0       	breq	.+10     	; 0x76fc <normalize+0x388>
    76f2:	21 e0       	ldi	r18, 0x01	; 1
    76f4:	30 e0       	ldi	r19, 0x00	; 0
    76f6:	f7 01       	movw	r30, r14
    76f8:	31 8b       	std	Z+17, r19	; 0x11
    76fa:	20 8b       	std	Z+16, r18	; 0x10
    76fc:	2a 96       	adiw	r28, 0x0a	; 10
    76fe:	e2 e1       	ldi	r30, 0x12	; 18
    7700:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

00007704 <timegm>:
    7704:	60 e0       	ldi	r22, 0x00	; 0
    7706:	70 e0       	ldi	r23, 0x00	; 0
    7708:	35 ce       	rjmp	.-918    	; 0x7374 <normalize>
    770a:	08 95       	ret

0000770c <setdate_r>:
    770c:	cf 92       	push	r12
    770e:	df 92       	push	r13
    7710:	ef 92       	push	r14
    7712:	ff 92       	push	r15
    7714:	cf 93       	push	r28
    7716:	df 93       	push	r29
    7718:	cd b7       	in	r28, 0x3d	; 61
    771a:	de b7       	in	r29, 0x3e	; 62
    771c:	a5 97       	sbiw	r28, 0x25	; 37
    771e:	0f b6       	in	r0, 0x3f	; 63
    7720:	f8 94       	cli
    7722:	de bf       	out	0x3e, r29	; 62
    7724:	0f be       	out	0x3f, r0	; 63
    7726:	cd bf       	out	0x3d, r28	; 61
    7728:	9d a3       	std	Y+37, r25	; 0x25
    772a:	8c a3       	std	Y+36, r24	; 0x24
    772c:	1f 82       	std	Y+7, r1	; 0x07
    772e:	1e 82       	std	Y+6, r1	; 0x06
    7730:	19 86       	std	Y+9, r1	; 0x09
    7732:	18 86       	std	Y+8, r1	; 0x08
    7734:	1b 86       	std	Y+11, r1	; 0x0b
    7736:	1a 86       	std	Y+10, r1	; 0x0a
    7738:	1d 86       	std	Y+13, r1	; 0x0d
    773a:	1c 86       	std	Y+12, r1	; 0x0c
    773c:	1f 86       	std	Y+15, r1	; 0x0f
    773e:	1e 86       	std	Y+14, r1	; 0x0e
    7740:	19 8a       	std	Y+17, r1	; 0x11
    7742:	18 8a       	std	Y+16, r1	; 0x10
    7744:	8c a1       	ldd	r24, Y+36	; 0x24
    7746:	9d a1       	ldd	r25, Y+37	; 0x25
    7748:	fc 01       	movw	r30, r24
    774a:	20 81       	ld	r18, Z
    774c:	20 32       	cpi	r18, 0x20	; 32
    774e:	21 f4       	brne	.+8      	; 0x7758 <setdate_r+0x4c>
    7750:	01 96       	adiw	r24, 0x01	; 1
    7752:	9d a3       	std	Y+37, r25	; 0x25
    7754:	8c a3       	std	Y+36, r24	; 0x24
    7756:	f6 cf       	rjmp	.-20     	; 0x7744 <setdate_r+0x38>
    7758:	4a e0       	ldi	r20, 0x0A	; 10
    775a:	50 e0       	ldi	r21, 0x00	; 0
    775c:	be 01       	movw	r22, r28
    775e:	6c 5d       	subi	r22, 0xDC	; 220
    7760:	7f 4f       	sbci	r23, 0xFF	; 255
    7762:	0e 94 9f 47 	call	0x8f3e	; 0x8f3e <strtol>
    7766:	79 8b       	std	Y+17, r23	; 0x11
    7768:	68 8b       	std	Y+16, r22	; 0x10
    776a:	8c a1       	ldd	r24, Y+36	; 0x24
    776c:	9d a1       	ldd	r25, Y+37	; 0x25
    776e:	fc 01       	movw	r30, r24
    7770:	20 81       	ld	r18, Z
    7772:	20 32       	cpi	r18, 0x20	; 32
    7774:	21 f4       	brne	.+8      	; 0x777e <setdate_r+0x72>
    7776:	01 96       	adiw	r24, 0x01	; 1
    7778:	9d a3       	std	Y+37, r25	; 0x25
    777a:	8c a3       	std	Y+36, r24	; 0x24
    777c:	f6 cf       	rjmp	.-20     	; 0x776a <setdate_r+0x5e>
    777e:	4a e0       	ldi	r20, 0x0A	; 10
    7780:	50 e0       	ldi	r21, 0x00	; 0
    7782:	be 01       	movw	r22, r28
    7784:	6c 5d       	subi	r22, 0xDC	; 220
    7786:	7f 4f       	sbci	r23, 0xFF	; 255
    7788:	0e 94 9f 47 	call	0x8f3e	; 0x8f3e <strtol>
    778c:	7f 87       	std	Y+15, r23	; 0x0f
    778e:	6e 87       	std	Y+14, r22	; 0x0e
    7790:	8c a1       	ldd	r24, Y+36	; 0x24
    7792:	9d a1       	ldd	r25, Y+37	; 0x25
    7794:	fc 01       	movw	r30, r24
    7796:	20 81       	ld	r18, Z
    7798:	20 32       	cpi	r18, 0x20	; 32
    779a:	21 f4       	brne	.+8      	; 0x77a4 <setdate_r+0x98>
    779c:	01 96       	adiw	r24, 0x01	; 1
    779e:	9d a3       	std	Y+37, r25	; 0x25
    77a0:	8c a3       	std	Y+36, r24	; 0x24
    77a2:	f6 cf       	rjmp	.-20     	; 0x7790 <setdate_r+0x84>
    77a4:	4a e0       	ldi	r20, 0x0A	; 10
    77a6:	50 e0       	ldi	r21, 0x00	; 0
    77a8:	be 01       	movw	r22, r28
    77aa:	6c 5d       	subi	r22, 0xDC	; 220
    77ac:	7f 4f       	sbci	r23, 0xFF	; 255
    77ae:	0e 94 9f 47 	call	0x8f3e	; 0x8f3e <strtol>
    77b2:	7d 87       	std	Y+13, r23	; 0x0d
    77b4:	6c 87       	std	Y+12, r22	; 0x0c
    77b6:	8c a1       	ldd	r24, Y+36	; 0x24
    77b8:	9d a1       	ldd	r25, Y+37	; 0x25
    77ba:	fc 01       	movw	r30, r24
    77bc:	20 81       	ld	r18, Z
    77be:	20 32       	cpi	r18, 0x20	; 32
    77c0:	21 f4       	brne	.+8      	; 0x77ca <setdate_r+0xbe>
    77c2:	01 96       	adiw	r24, 0x01	; 1
    77c4:	9d a3       	std	Y+37, r25	; 0x25
    77c6:	8c a3       	std	Y+36, r24	; 0x24
    77c8:	f6 cf       	rjmp	.-20     	; 0x77b6 <setdate_r+0xaa>
    77ca:	4a e0       	ldi	r20, 0x0A	; 10
    77cc:	50 e0       	ldi	r21, 0x00	; 0
    77ce:	be 01       	movw	r22, r28
    77d0:	6c 5d       	subi	r22, 0xDC	; 220
    77d2:	7f 4f       	sbci	r23, 0xFF	; 255
    77d4:	0e 94 9f 47 	call	0x8f3e	; 0x8f3e <strtol>
    77d8:	7b 87       	std	Y+11, r23	; 0x0b
    77da:	6a 87       	std	Y+10, r22	; 0x0a
    77dc:	ec a1       	ldd	r30, Y+36	; 0x24
    77de:	fd a1       	ldd	r31, Y+37	; 0x25
    77e0:	80 81       	ld	r24, Z
    77e2:	88 23       	and	r24, r24
    77e4:	39 f0       	breq	.+14     	; 0x77f4 <setdate_r+0xe8>
    77e6:	80 32       	cpi	r24, 0x20	; 32
    77e8:	11 f0       	breq	.+4      	; 0x77ee <setdate_r+0xe2>
    77ea:	8a 33       	cpi	r24, 0x3A	; 58
    77ec:	19 f4       	brne	.+6      	; 0x77f4 <setdate_r+0xe8>
    77ee:	31 96       	adiw	r30, 0x01	; 1
    77f0:	fd a3       	std	Y+37, r31	; 0x25
    77f2:	ec a3       	std	Y+36, r30	; 0x24
    77f4:	4a e0       	ldi	r20, 0x0A	; 10
    77f6:	50 e0       	ldi	r21, 0x00	; 0
    77f8:	be 01       	movw	r22, r28
    77fa:	6c 5d       	subi	r22, 0xDC	; 220
    77fc:	7f 4f       	sbci	r23, 0xFF	; 255
    77fe:	8c a1       	ldd	r24, Y+36	; 0x24
    7800:	9d a1       	ldd	r25, Y+37	; 0x25
    7802:	0e 94 9f 47 	call	0x8f3e	; 0x8f3e <strtol>
    7806:	79 87       	std	Y+9, r23	; 0x09
    7808:	68 87       	std	Y+8, r22	; 0x08
    780a:	ec a1       	ldd	r30, Y+36	; 0x24
    780c:	fd a1       	ldd	r31, Y+37	; 0x25
    780e:	80 81       	ld	r24, Z
    7810:	88 23       	and	r24, r24
    7812:	39 f0       	breq	.+14     	; 0x7822 <setdate_r+0x116>
    7814:	80 32       	cpi	r24, 0x20	; 32
    7816:	11 f0       	breq	.+4      	; 0x781c <setdate_r+0x110>
    7818:	8a 33       	cpi	r24, 0x3A	; 58
    781a:	19 f4       	brne	.+6      	; 0x7822 <setdate_r+0x116>
    781c:	31 96       	adiw	r30, 0x01	; 1
    781e:	fd a3       	std	Y+37, r31	; 0x25
    7820:	ec a3       	std	Y+36, r30	; 0x24
    7822:	4a e0       	ldi	r20, 0x0A	; 10
    7824:	50 e0       	ldi	r21, 0x00	; 0
    7826:	be 01       	movw	r22, r28
    7828:	6c 5d       	subi	r22, 0xDC	; 220
    782a:	7f 4f       	sbci	r23, 0xFF	; 255
    782c:	8c a1       	ldd	r24, Y+36	; 0x24
    782e:	9d a1       	ldd	r25, Y+37	; 0x25
    7830:	0e 94 9f 47 	call	0x8f3e	; 0x8f3e <strtol>
    7834:	7f 83       	std	Y+7, r23	; 0x07
    7836:	6e 83       	std	Y+6, r22	; 0x06
    7838:	2e 85       	ldd	r18, Y+14	; 0x0e
    783a:	3f 85       	ldd	r19, Y+15	; 0x0f
    783c:	21 50       	subi	r18, 0x01	; 1
    783e:	31 09       	sbc	r19, r1
    7840:	3f 87       	std	Y+15, r19	; 0x0f
    7842:	2e 87       	std	Y+14, r18	; 0x0e
    7844:	88 89       	ldd	r24, Y+16	; 0x10
    7846:	99 89       	ldd	r25, Y+17	; 0x11
    7848:	ac 01       	movw	r20, r24
    784a:	42 5b       	subi	r20, 0xB2	; 178
    784c:	57 40       	sbci	r21, 0x07	; 7
    784e:	45 34       	cpi	r20, 0x45	; 69
    7850:	51 05       	cpc	r21, r1
    7852:	38 f0       	brcs	.+14     	; 0x7862 <setdate_r+0x156>
    7854:	ed b7       	in	r30, 0x3d	; 61
    7856:	fe b7       	in	r31, 0x3e	; 62
    7858:	95 83       	std	Z+5, r25	; 0x05
    785a:	84 83       	std	Z+4, r24	; 0x04
    785c:	80 ee       	ldi	r24, 0xE0	; 224
    785e:	96 e0       	ldi	r25, 0x06	; 6
    7860:	34 c0       	rjmp	.+104    	; 0x78ca <setdate_r+0x1be>
    7862:	8c 56       	subi	r24, 0x6C	; 108
    7864:	97 40       	sbci	r25, 0x07	; 7
    7866:	99 8b       	std	Y+17, r25	; 0x11
    7868:	88 8b       	std	Y+16, r24	; 0x10
    786a:	2c 30       	cpi	r18, 0x0C	; 12
    786c:	31 05       	cpc	r19, r1
    786e:	38 f0       	brcs	.+14     	; 0x787e <setdate_r+0x172>
    7870:	ed b7       	in	r30, 0x3d	; 61
    7872:	fe b7       	in	r31, 0x3e	; 62
    7874:	95 83       	std	Z+5, r25	; 0x05
    7876:	84 83       	std	Z+4, r24	; 0x04
    7878:	8f ec       	ldi	r24, 0xCF	; 207
    787a:	96 e0       	ldi	r25, 0x06	; 6
    787c:	26 c0       	rjmp	.+76     	; 0x78ca <setdate_r+0x1be>
    787e:	8c 85       	ldd	r24, Y+12	; 0x0c
    7880:	9d 85       	ldd	r25, Y+13	; 0x0d
    7882:	9c 01       	movw	r18, r24
    7884:	21 50       	subi	r18, 0x01	; 1
    7886:	31 09       	sbc	r19, r1
    7888:	2f 31       	cpi	r18, 0x1F	; 31
    788a:	31 05       	cpc	r19, r1
    788c:	38 f0       	brcs	.+14     	; 0x789c <setdate_r+0x190>
    788e:	ed b7       	in	r30, 0x3d	; 61
    7890:	fe b7       	in	r31, 0x3e	; 62
    7892:	95 83       	std	Z+5, r25	; 0x05
    7894:	84 83       	std	Z+4, r24	; 0x04
    7896:	8e eb       	ldi	r24, 0xBE	; 190
    7898:	96 e0       	ldi	r25, 0x06	; 6
    789a:	17 c0       	rjmp	.+46     	; 0x78ca <setdate_r+0x1be>
    789c:	8a 85       	ldd	r24, Y+10	; 0x0a
    789e:	9b 85       	ldd	r25, Y+11	; 0x0b
    78a0:	88 31       	cpi	r24, 0x18	; 24
    78a2:	91 05       	cpc	r25, r1
    78a4:	38 f0       	brcs	.+14     	; 0x78b4 <setdate_r+0x1a8>
    78a6:	ed b7       	in	r30, 0x3d	; 61
    78a8:	fe b7       	in	r31, 0x3e	; 62
    78aa:	95 83       	std	Z+5, r25	; 0x05
    78ac:	84 83       	std	Z+4, r24	; 0x04
    78ae:	8c ea       	ldi	r24, 0xAC	; 172
    78b0:	96 e0       	ldi	r25, 0x06	; 6
    78b2:	0b c0       	rjmp	.+22     	; 0x78ca <setdate_r+0x1be>
    78b4:	88 85       	ldd	r24, Y+8	; 0x08
    78b6:	99 85       	ldd	r25, Y+9	; 0x09
    78b8:	8c 33       	cpi	r24, 0x3C	; 60
    78ba:	91 05       	cpc	r25, r1
    78bc:	68 f0       	brcs	.+26     	; 0x78d8 <setdate_r+0x1cc>
    78be:	ed b7       	in	r30, 0x3d	; 61
    78c0:	fe b7       	in	r31, 0x3e	; 62
    78c2:	95 83       	std	Z+5, r25	; 0x05
    78c4:	84 83       	std	Z+4, r24	; 0x04
    78c6:	8b e9       	ldi	r24, 0x9B	; 155
    78c8:	96 e0       	ldi	r25, 0x06	; 6
    78ca:	a0 e0       	ldi	r26, 0x00	; 0
    78cc:	81 83       	std	Z+1, r24	; 0x01
    78ce:	92 83       	std	Z+2, r25	; 0x02
    78d0:	a3 83       	std	Z+3, r26	; 0x03
    78d2:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    78d6:	25 c0       	rjmp	.+74     	; 0x7922 <setdate_r+0x216>
    78d8:	ce 01       	movw	r24, r28
    78da:	06 96       	adiw	r24, 0x06	; 6
    78dc:	13 df       	rcall	.-474    	; 0x7704 <timegm>
    78de:	6b 01       	movw	r12, r22
    78e0:	7c 01       	movw	r14, r24
    78e2:	6c 8f       	std	Y+28, r22	; 0x1c
    78e4:	7d 8f       	std	Y+29, r23	; 0x1d
    78e6:	8e 8f       	std	Y+30, r24	; 0x1e
    78e8:	9f 8f       	std	Y+31, r25	; 0x1f
    78ea:	18 a2       	std	Y+32, r1	; 0x20
    78ec:	19 a2       	std	Y+33, r1	; 0x21
    78ee:	1a a2       	std	Y+34, r1	; 0x22
    78f0:	1b a2       	std	Y+35, r1	; 0x23
    78f2:	be 01       	movw	r22, r28
    78f4:	64 5e       	subi	r22, 0xE4	; 228
    78f6:	7f 4f       	sbci	r23, 0xFF	; 255
    78f8:	80 e0       	ldi	r24, 0x00	; 0
    78fa:	90 e0       	ldi	r25, 0x00	; 0
    78fc:	03 db       	rcall	.-2554   	; 0x6f04 <clock_settime>
    78fe:	b7 01       	movw	r22, r14
    7900:	a6 01       	movw	r20, r12
    7902:	81 e0       	ldi	r24, 0x01	; 1
    7904:	90 e0       	ldi	r25, 0x00	; 0
    7906:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <rtc_init>
    790a:	81 11       	cpse	r24, r1
    790c:	0d c0       	rjmp	.+26     	; 0x7928 <setdate_r+0x21c>
    790e:	84 e8       	ldi	r24, 0x84	; 132
    7910:	96 e0       	ldi	r25, 0x06	; 6
    7912:	a0 e0       	ldi	r26, 0x00	; 0
    7914:	ed b7       	in	r30, 0x3d	; 61
    7916:	fe b7       	in	r31, 0x3e	; 62
    7918:	81 83       	std	Z+1, r24	; 0x01
    791a:	92 83       	std	Z+2, r25	; 0x02
    791c:	a3 83       	std	Z+3, r26	; 0x03
    791e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    7922:	8f ef       	ldi	r24, 0xFF	; 255
    7924:	9f ef       	ldi	r25, 0xFF	; 255
    7926:	02 c0       	rjmp	.+4      	; 0x792c <setdate_r+0x220>
    7928:	80 e0       	ldi	r24, 0x00	; 0
    792a:	90 e0       	ldi	r25, 0x00	; 0
    792c:	a5 96       	adiw	r28, 0x25	; 37
    792e:	0f b6       	in	r0, 0x3f	; 63
    7930:	f8 94       	cli
    7932:	de bf       	out	0x3e, r29	; 62
    7934:	0f be       	out	0x3f, r0	; 63
    7936:	cd bf       	out	0x3d, r28	; 61
    7938:	df 91       	pop	r29
    793a:	cf 91       	pop	r28
    793c:	ff 90       	pop	r15
    793e:	ef 90       	pop	r14
    7940:	df 90       	pop	r13
    7942:	cf 90       	pop	r12
    7944:	08 95       	ret

00007946 <setdate>:
    7946:	ab e2       	ldi	r26, 0x2B	; 43
    7948:	b0 e0       	ldi	r27, 0x00	; 0
    794a:	e9 ea       	ldi	r30, 0xA9	; 169
    794c:	fc e3       	ldi	r31, 0x3C	; 60
    794e:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
    7952:	82 ef       	ldi	r24, 0xF2	; 242
    7954:	96 e0       	ldi	r25, 0x06	; 6
    7956:	a0 e0       	ldi	r26, 0x00	; 0
    7958:	ed b7       	in	r30, 0x3d	; 61
    795a:	fe b7       	in	r31, 0x3e	; 62
    795c:	81 83       	std	Z+1, r24	; 0x01
    795e:	92 83       	std	Z+2, r25	; 0x02
    7960:	a3 83       	std	Z+3, r26	; 0x03
    7962:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    7966:	40 91 57 1c 	lds	r20, 0x1C57	; 0x801c57 <__iob>
    796a:	50 91 58 1c 	lds	r21, 0x1C58	; 0x801c58 <__iob+0x1>
    796e:	67 e2       	ldi	r22, 0x27	; 39
    7970:	70 e0       	ldi	r23, 0x00	; 0
    7972:	ce 01       	movw	r24, r28
    7974:	04 96       	adiw	r24, 0x04	; 4
    7976:	0e 94 4a 77 	call	0xee94	; 0xee94 <fgets>
    797a:	ce 01       	movw	r24, r28
    797c:	04 96       	adiw	r24, 0x04	; 4
    797e:	c6 de       	rcall	.-628    	; 0x770c <setdate_r>
    7980:	ab 96       	adiw	r28, 0x2b	; 43
    7982:	e2 e0       	ldi	r30, 0x02	; 2
    7984:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

00007988 <find_dst>:
    7988:	a8 e2       	ldi	r26, 0x28	; 40
    798a:	b0 e0       	ldi	r27, 0x00	; 0
    798c:	ea ec       	ldi	r30, 0xCA	; 202
    798e:	fc e3       	ldi	r31, 0x3C	; 60
    7990:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
    7994:	3c 01       	movw	r6, r24
    7996:	1a 01       	movw	r2, r20
    7998:	2b 01       	movw	r4, r22
    799a:	49 01       	movw	r8, r18
    799c:	1c a3       	std	Y+36, r17	; 0x24
    799e:	0b a3       	std	Y+35, r16	; 0x23
    79a0:	de a2       	std	Y+38, r13	; 0x26
    79a2:	cd a2       	std	Y+37, r12	; 0x25
    79a4:	b8 a6       	std	Y+40, r11	; 0x28
    79a6:	af a2       	std	Y+39, r10	; 0x27
    79a8:	be 01       	movw	r22, r28
    79aa:	61 5e       	subi	r22, 0xE1	; 225
    79ac:	7f 4f       	sbci	r23, 0xFF	; 255
    79ae:	ce 01       	movw	r24, r28
    79b0:	47 96       	adiw	r24, 0x17	; 23
    79b2:	15 dc       	rcall	.-2006   	; 0x71de <gettimeofday>
    79b4:	af 8d       	ldd	r26, Y+31	; 0x1f
    79b6:	b8 a1       	ldd	r27, Y+32	; 0x20
    79b8:	2c e3       	ldi	r18, 0x3C	; 60
    79ba:	30 e0       	ldi	r19, 0x00	; 0
    79bc:	0e 94 60 e4 	call	0x1c8c0	; 0x1c8c0 <__usmulhisi3>
    79c0:	5b 01       	movw	r10, r22
    79c2:	6c 01       	movw	r12, r24
    79c4:	61 14       	cp	r6, r1
    79c6:	71 04       	cpc	r7, r1
    79c8:	31 f0       	breq	.+12     	; 0x79d6 <find_dst+0x4e>
    79ca:	20 e1       	ldi	r18, 0x10	; 16
    79cc:	a2 1a       	sub	r10, r18
    79ce:	2e e0       	ldi	r18, 0x0E	; 14
    79d0:	b2 0a       	sbc	r11, r18
    79d2:	c1 08       	sbc	r12, r1
    79d4:	d1 08       	sbc	r13, r1
    79d6:	81 14       	cp	r8, r1
    79d8:	91 04       	cpc	r9, r1
    79da:	39 f0       	breq	.+14     	; 0x79ea <find_dst+0x62>
    79dc:	4c e6       	ldi	r20, 0x6C	; 108
    79de:	84 1a       	sub	r8, r20
    79e0:	47 e0       	ldi	r20, 0x07	; 7
    79e2:	94 0a       	sbc	r9, r20
    79e4:	9c 86       	std	Y+12, r9	; 0x0c
    79e6:	8b 86       	std	Y+11, r8	; 0x0b
    79e8:	11 c0       	rjmp	.+34     	; 0x7a0c <find_dst+0x84>
    79ea:	21 14       	cp	r2, r1
    79ec:	31 04       	cpc	r3, r1
    79ee:	41 04       	cpc	r4, r1
    79f0:	51 04       	cpc	r5, r1
    79f2:	21 f4       	brne	.+8      	; 0x79fc <find_dst+0x74>
    79f4:	2f 88       	ldd	r2, Y+23	; 0x17
    79f6:	38 8c       	ldd	r3, Y+24	; 0x18
    79f8:	49 8c       	ldd	r4, Y+25	; 0x19
    79fa:	5a 8c       	ldd	r5, Y+26	; 0x1a
    79fc:	8e 01       	movw	r16, r28
    79fe:	0f 5f       	subi	r16, 0xFF	; 255
    7a00:	1f 4f       	sbci	r17, 0xFF	; 255
    7a02:	a6 01       	movw	r20, r12
    7a04:	95 01       	movw	r18, r10
    7a06:	c2 01       	movw	r24, r4
    7a08:	b1 01       	movw	r22, r2
    7a0a:	ca da       	rcall	.-2668   	; 0x6fa0 <time_to_tm>
    7a0c:	8b a1       	ldd	r24, Y+35	; 0x23
    7a0e:	9c a1       	ldd	r25, Y+36	; 0x24
    7a10:	01 97       	sbiw	r24, 0x01	; 1
    7a12:	9a 87       	std	Y+10, r25	; 0x0a
    7a14:	89 87       	std	Y+9, r24	; 0x09
    7a16:	81 e0       	ldi	r24, 0x01	; 1
    7a18:	90 e0       	ldi	r25, 0x00	; 0
    7a1a:	98 87       	std	Y+8, r25	; 0x08
    7a1c:	8f 83       	std	Y+7, r24	; 0x07
    7a1e:	8f a1       	ldd	r24, Y+39	; 0x27
    7a20:	98 a5       	ldd	r25, Y+40	; 0x28
    7a22:	9e 83       	std	Y+6, r25	; 0x06
    7a24:	8d 83       	std	Y+5, r24	; 0x05
    7a26:	1c 82       	std	Y+4, r1	; 0x04
    7a28:	1b 82       	std	Y+3, r1	; 0x03
    7a2a:	1a 82       	std	Y+2, r1	; 0x02
    7a2c:	19 82       	std	Y+1, r1	; 0x01
    7a2e:	ce 01       	movw	r24, r28
    7a30:	01 96       	adiw	r24, 0x01	; 1
    7a32:	68 de       	rcall	.-816    	; 0x7704 <timegm>
    7a34:	45 01       	movw	r8, r10
    7a36:	56 01       	movw	r10, r12
    7a38:	86 0e       	add	r8, r22
    7a3a:	97 1e       	adc	r9, r23
    7a3c:	a8 1e       	adc	r10, r24
    7a3e:	b9 1e       	adc	r11, r25
    7a40:	8e 01       	movw	r16, r28
    7a42:	0f 5f       	subi	r16, 0xFF	; 255
    7a44:	1f 4f       	sbci	r17, 0xFF	; 255
    7a46:	20 e0       	ldi	r18, 0x00	; 0
    7a48:	30 e0       	ldi	r19, 0x00	; 0
    7a4a:	a9 01       	movw	r20, r18
    7a4c:	c5 01       	movw	r24, r10
    7a4e:	b4 01       	movw	r22, r8
    7a50:	a7 da       	rcall	.-2738   	; 0x6fa0 <time_to_tm>
    7a52:	2d 85       	ldd	r18, Y+13	; 0x0d
    7a54:	3e 85       	ldd	r19, Y+14	; 0x0e
    7a56:	e7 e0       	ldi	r30, 0x07	; 7
    7a58:	f0 e0       	ldi	r31, 0x00	; 0
    7a5a:	c9 01       	movw	r24, r18
    7a5c:	bf 01       	movw	r22, r30
    7a5e:	0e 94 f1 e3 	call	0x1c7e2	; 0x1c7e2 <__divmodhi4>
    7a62:	4d a1       	ldd	r20, Y+37	; 0x25
    7a64:	5e a1       	ldd	r21, Y+38	; 0x26
    7a66:	48 17       	cp	r20, r24
    7a68:	59 07       	cpc	r21, r25
    7a6a:	21 f4       	brne	.+8      	; 0x7a74 <find_dst+0xec>
    7a6c:	51 e0       	ldi	r21, 0x01	; 1
    7a6e:	e5 1a       	sub	r14, r21
    7a70:	f1 08       	sbc	r15, r1
    7a72:	51 f0       	breq	.+20     	; 0x7a88 <find_dst+0x100>
    7a74:	80 e8       	ldi	r24, 0x80	; 128
    7a76:	88 0e       	add	r8, r24
    7a78:	81 e5       	ldi	r24, 0x51	; 81
    7a7a:	98 1e       	adc	r9, r24
    7a7c:	81 e0       	ldi	r24, 0x01	; 1
    7a7e:	a8 1e       	adc	r10, r24
    7a80:	b1 1c       	adc	r11, r1
    7a82:	2f 5f       	subi	r18, 0xFF	; 255
    7a84:	3f 4f       	sbci	r19, 0xFF	; 255
    7a86:	e9 cf       	rjmp	.-46     	; 0x7a5a <find_dst+0xd2>
    7a88:	c5 01       	movw	r24, r10
    7a8a:	b4 01       	movw	r22, r8
    7a8c:	a8 96       	adiw	r28, 0x28	; 40
    7a8e:	e2 e1       	ldi	r30, 0x12	; 18
    7a90:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

00007a94 <set_dst>:
    7a94:	4f 92       	push	r4
    7a96:	5f 92       	push	r5
    7a98:	6f 92       	push	r6
    7a9a:	7f 92       	push	r7
    7a9c:	af 92       	push	r10
    7a9e:	bf 92       	push	r11
    7aa0:	cf 92       	push	r12
    7aa2:	df 92       	push	r13
    7aa4:	ef 92       	push	r14
    7aa6:	ff 92       	push	r15
    7aa8:	0f 93       	push	r16
    7aaa:	1f 93       	push	r17
    7aac:	cf 93       	push	r28
    7aae:	df 93       	push	r29
    7ab0:	cd b7       	in	r28, 0x3d	; 61
    7ab2:	de b7       	in	r29, 0x3e	; 62
    7ab4:	2c 97       	sbiw	r28, 0x0c	; 12
    7ab6:	0f b6       	in	r0, 0x3f	; 63
    7ab8:	f8 94       	cli
    7aba:	de bf       	out	0x3e, r29	; 62
    7abc:	0f be       	out	0x3f, r0	; 63
    7abe:	cd bf       	out	0x3d, r28	; 61
    7ac0:	2b 01       	movw	r4, r22
    7ac2:	3c 01       	movw	r6, r24
    7ac4:	67 2b       	or	r22, r23
    7ac6:	68 2b       	or	r22, r24
    7ac8:	69 2b       	or	r22, r25
    7aca:	51 f4       	brne	.+20     	; 0x7ae0 <set_dst+0x4c>
    7acc:	be 01       	movw	r22, r28
    7ace:	67 5f       	subi	r22, 0xF7	; 247
    7ad0:	7f 4f       	sbci	r23, 0xFF	; 255
    7ad2:	ce 01       	movw	r24, r28
    7ad4:	01 96       	adiw	r24, 0x01	; 1
    7ad6:	83 db       	rcall	.-2298   	; 0x71de <gettimeofday>
    7ad8:	49 80       	ldd	r4, Y+1	; 0x01
    7ada:	5a 80       	ldd	r5, Y+2	; 0x02
    7adc:	6b 80       	ldd	r6, Y+3	; 0x03
    7ade:	7c 80       	ldd	r7, Y+4	; 0x04
    7ae0:	80 91 0e 1a 	lds	r24, 0x1A0E	; 0x801a0e <dst+0x8>
    7ae4:	90 91 0f 1a 	lds	r25, 0x1A0F	; 0x801a0f <dst+0x9>
    7ae8:	a0 91 10 1a 	lds	r26, 0x1A10	; 0x801a10 <dst+0xa>
    7aec:	b0 91 11 1a 	lds	r27, 0x1A11	; 0x801a11 <dst+0xb>
    7af0:	84 15       	cp	r24, r4
    7af2:	95 05       	cpc	r25, r5
    7af4:	a6 05       	cpc	r26, r6
    7af6:	b7 05       	cpc	r27, r7
    7af8:	50 f0       	brcs	.+20     	; 0x7b0e <set_dst+0x7a>
    7afa:	84 19       	sub	r24, r4
    7afc:	95 09       	sbc	r25, r5
    7afe:	a6 09       	sbc	r26, r6
    7b00:	b7 09       	sbc	r27, r7
    7b02:	80 38       	cpi	r24, 0x80	; 128
    7b04:	91 45       	sbci	r25, 0x51	; 81
    7b06:	a1 40       	sbci	r26, 0x01	; 1
    7b08:	b1 05       	cpc	r27, r1
    7b0a:	70 f4       	brcc	.+28     	; 0x7b28 <set_dst+0x94>
    7b0c:	42 c0       	rjmp	.+132    	; 0x7b92 <set_dst+0xfe>
    7b0e:	a3 01       	movw	r20, r6
    7b10:	92 01       	movw	r18, r4
    7b12:	28 1b       	sub	r18, r24
    7b14:	39 0b       	sbc	r19, r25
    7b16:	4a 0b       	sbc	r20, r26
    7b18:	5b 0b       	sbc	r21, r27
    7b1a:	da 01       	movw	r26, r20
    7b1c:	c9 01       	movw	r24, r18
    7b1e:	80 38       	cpi	r24, 0x80	; 128
    7b20:	91 45       	sbci	r25, 0x51	; 81
    7b22:	a1 40       	sbci	r26, 0x01	; 1
    7b24:	b1 05       	cpc	r27, r1
    7b26:	a8 f1       	brcs	.+106    	; 0x7b92 <set_dst+0xfe>
    7b28:	40 92 0e 1a 	sts	0x1A0E, r4	; 0x801a0e <dst+0x8>
    7b2c:	50 92 0f 1a 	sts	0x1A0F, r5	; 0x801a0f <dst+0x9>
    7b30:	60 92 10 1a 	sts	0x1A10, r6	; 0x801a10 <dst+0xa>
    7b34:	70 92 11 1a 	sts	0x1A11, r7	; 0x801a11 <dst+0xb>
    7b38:	82 e0       	ldi	r24, 0x02	; 2
    7b3a:	a8 2e       	mov	r10, r24
    7b3c:	b1 2c       	mov	r11, r1
    7b3e:	c1 2c       	mov	r12, r1
    7b40:	d1 2c       	mov	r13, r1
    7b42:	92 e0       	ldi	r25, 0x02	; 2
    7b44:	e9 2e       	mov	r14, r25
    7b46:	f1 2c       	mov	r15, r1
    7b48:	03 e0       	ldi	r16, 0x03	; 3
    7b4a:	10 e0       	ldi	r17, 0x00	; 0
    7b4c:	20 e0       	ldi	r18, 0x00	; 0
    7b4e:	30 e0       	ldi	r19, 0x00	; 0
    7b50:	b3 01       	movw	r22, r6
    7b52:	a2 01       	movw	r20, r4
    7b54:	80 e0       	ldi	r24, 0x00	; 0
    7b56:	90 e0       	ldi	r25, 0x00	; 0
    7b58:	17 df       	rcall	.-466    	; 0x7988 <find_dst>
    7b5a:	60 93 06 1a 	sts	0x1A06, r22	; 0x801a06 <dst>
    7b5e:	70 93 07 1a 	sts	0x1A07, r23	; 0x801a07 <dst+0x1>
    7b62:	80 93 08 1a 	sts	0x1A08, r24	; 0x801a08 <dst+0x2>
    7b66:	90 93 09 1a 	sts	0x1A09, r25	; 0x801a09 <dst+0x3>
    7b6a:	ee 24       	eor	r14, r14
    7b6c:	e3 94       	inc	r14
    7b6e:	f1 2c       	mov	r15, r1
    7b70:	0b e0       	ldi	r16, 0x0B	; 11
    7b72:	10 e0       	ldi	r17, 0x00	; 0
    7b74:	20 e0       	ldi	r18, 0x00	; 0
    7b76:	30 e0       	ldi	r19, 0x00	; 0
    7b78:	b3 01       	movw	r22, r6
    7b7a:	a2 01       	movw	r20, r4
    7b7c:	81 e0       	ldi	r24, 0x01	; 1
    7b7e:	90 e0       	ldi	r25, 0x00	; 0
    7b80:	03 df       	rcall	.-506    	; 0x7988 <find_dst>
    7b82:	60 93 0a 1a 	sts	0x1A0A, r22	; 0x801a0a <dst+0x4>
    7b86:	70 93 0b 1a 	sts	0x1A0B, r23	; 0x801a0b <dst+0x5>
    7b8a:	80 93 0c 1a 	sts	0x1A0C, r24	; 0x801a0c <dst+0x6>
    7b8e:	90 93 0d 1a 	sts	0x1A0D, r25	; 0x801a0d <dst+0x7>
    7b92:	2c 96       	adiw	r28, 0x0c	; 12
    7b94:	0f b6       	in	r0, 0x3f	; 63
    7b96:	f8 94       	cli
    7b98:	de bf       	out	0x3e, r29	; 62
    7b9a:	0f be       	out	0x3f, r0	; 63
    7b9c:	cd bf       	out	0x3d, r28	; 61
    7b9e:	df 91       	pop	r29
    7ba0:	cf 91       	pop	r28
    7ba2:	1f 91       	pop	r17
    7ba4:	0f 91       	pop	r16
    7ba6:	ff 90       	pop	r15
    7ba8:	ef 90       	pop	r14
    7baa:	df 90       	pop	r13
    7bac:	cf 90       	pop	r12
    7bae:	bf 90       	pop	r11
    7bb0:	af 90       	pop	r10
    7bb2:	7f 90       	pop	r7
    7bb4:	6f 90       	pop	r6
    7bb6:	5f 90       	pop	r5
    7bb8:	4f 90       	pop	r4
    7bba:	08 95       	ret

00007bbc <asctime_r>:
    7bbc:	a5 e1       	ldi	r26, 0x15	; 21
    7bbe:	b0 e0       	ldi	r27, 0x00	; 0
    7bc0:	e4 ee       	ldi	r30, 0xE4	; 228
    7bc2:	fd e3       	ldi	r31, 0x3D	; 61
    7bc4:	0c 94 94 e4 	jmp	0x1c928	; 0x1c928 <__prologue_saves__+0x1c>
    7bc8:	ec 01       	movw	r28, r24
    7bca:	8b 01       	movw	r16, r22
    7bcc:	60 e0       	ldi	r22, 0x00	; 0
    7bce:	70 e0       	ldi	r23, 0x00	; 0
    7bd0:	d1 db       	rcall	.-2142   	; 0x7374 <normalize>
    7bd2:	80 e2       	ldi	r24, 0x20	; 32
    7bd4:	f8 01       	movw	r30, r16
    7bd6:	11 92       	st	Z+, r1
    7bd8:	8a 95       	dec	r24
    7bda:	e9 f7       	brne	.-6      	; 0x7bd6 <asctime_r+0x1a>
    7bdc:	8a 85       	ldd	r24, Y+10	; 0x0a
    7bde:	9b 85       	ldd	r25, Y+11	; 0x0b
    7be0:	84 59       	subi	r24, 0x94	; 148
    7be2:	98 4f       	sbci	r25, 0xF8	; 248
    7be4:	ed b7       	in	r30, 0x3d	; 61
    7be6:	fe b7       	in	r31, 0x3e	; 62
    7be8:	95 8b       	std	Z+21, r25	; 0x15
    7bea:	84 8b       	std	Z+20, r24	; 0x14
    7bec:	88 81       	ld	r24, Y
    7bee:	99 81       	ldd	r25, Y+1	; 0x01
    7bf0:	93 8b       	std	Z+19, r25	; 0x13
    7bf2:	82 8b       	std	Z+18, r24	; 0x12
    7bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    7bf6:	9b 81       	ldd	r25, Y+3	; 0x03
    7bf8:	91 8b       	std	Z+17, r25	; 0x11
    7bfa:	80 8b       	std	Z+16, r24	; 0x10
    7bfc:	8c 81       	ldd	r24, Y+4	; 0x04
    7bfe:	9d 81       	ldd	r25, Y+5	; 0x05
    7c00:	97 87       	std	Z+15, r25	; 0x0f
    7c02:	86 87       	std	Z+14, r24	; 0x0e
    7c04:	8e 81       	ldd	r24, Y+6	; 0x06
    7c06:	9f 81       	ldd	r25, Y+7	; 0x07
    7c08:	95 87       	std	Z+13, r25	; 0x0d
    7c0a:	84 87       	std	Z+12, r24	; 0x0c
    7c0c:	e8 85       	ldd	r30, Y+8	; 0x08
    7c0e:	f9 85       	ldd	r31, Y+9	; 0x09
    7c10:	ee 0f       	add	r30, r30
    7c12:	ff 1f       	adc	r31, r31
    7c14:	e8 5e       	subi	r30, 0xE8	; 232
    7c16:	fe 4f       	sbci	r31, 0xFE	; 254
    7c18:	80 81       	ld	r24, Z
    7c1a:	91 81       	ldd	r25, Z+1	; 0x01
    7c1c:	ed b7       	in	r30, 0x3d	; 61
    7c1e:	fe b7       	in	r31, 0x3e	; 62
    7c20:	93 87       	std	Z+11, r25	; 0x0b
    7c22:	82 87       	std	Z+10, r24	; 0x0a
    7c24:	ec 85       	ldd	r30, Y+12	; 0x0c
    7c26:	fd 85       	ldd	r31, Y+13	; 0x0d
    7c28:	ee 0f       	add	r30, r30
    7c2a:	ff 1f       	adc	r31, r31
    7c2c:	ee 5c       	subi	r30, 0xCE	; 206
    7c2e:	fe 4f       	sbci	r31, 0xFE	; 254
    7c30:	80 81       	ld	r24, Z
    7c32:	91 81       	ldd	r25, Z+1	; 0x01
    7c34:	ed b7       	in	r30, 0x3d	; 61
    7c36:	fe b7       	in	r31, 0x3e	; 62
    7c38:	91 87       	std	Z+9, r25	; 0x09
    7c3a:	80 87       	std	Z+8, r24	; 0x08
    7c3c:	83 e1       	ldi	r24, 0x13	; 19
    7c3e:	97 e0       	ldi	r25, 0x07	; 7
    7c40:	a0 e0       	ldi	r26, 0x00	; 0
    7c42:	85 83       	std	Z+5, r24	; 0x05
    7c44:	96 83       	std	Z+6, r25	; 0x06
    7c46:	a7 83       	std	Z+7, r26	; 0x07
    7c48:	80 e2       	ldi	r24, 0x20	; 32
    7c4a:	90 e0       	ldi	r25, 0x00	; 0
    7c4c:	94 83       	std	Z+4, r25	; 0x04
    7c4e:	83 83       	std	Z+3, r24	; 0x03
    7c50:	12 83       	std	Z+2, r17	; 0x02
    7c52:	01 83       	std	Z+1, r16	; 0x01
    7c54:	0e 94 3c 47 	call	0x8e78	; 0x8e78 <snprintf_P>
    7c58:	c8 01       	movw	r24, r16
    7c5a:	cd b7       	in	r28, 0x3d	; 61
    7c5c:	de b7       	in	r29, 0x3e	; 62
    7c5e:	65 96       	adiw	r28, 0x15	; 21
    7c60:	e4 e0       	ldi	r30, 0x04	; 4
    7c62:	0c 94 b0 e4 	jmp	0x1c960	; 0x1c960 <__epilogue_restores__+0x1c>

00007c66 <asctime>:
    7c66:	6c e9       	ldi	r22, 0x9C	; 156
    7c68:	77 e1       	ldi	r23, 0x17	; 23
    7c6a:	a8 cf       	rjmp	.-176    	; 0x7bbc <asctime_r>
    7c6c:	08 95       	ret

00007c6e <ctime_gm>:
    7c6e:	a6 e1       	ldi	r26, 0x16	; 22
    7c70:	b0 e0       	ldi	r27, 0x00	; 0
    7c72:	ed e3       	ldi	r30, 0x3D	; 61
    7c74:	fe e3       	ldi	r31, 0x3E	; 62
    7c76:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
    7c7a:	be 01       	movw	r22, r28
    7c7c:	6f 5f       	subi	r22, 0xFF	; 255
    7c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    7c80:	6d da       	rcall	.-2854   	; 0x715c <gmtime_r>
    7c82:	6c e7       	ldi	r22, 0x7C	; 124
    7c84:	77 e1       	ldi	r23, 0x17	; 23
    7c86:	9a df       	rcall	.-204    	; 0x7bbc <asctime_r>
    7c88:	66 96       	adiw	r28, 0x16	; 22
    7c8a:	e2 e0       	ldi	r30, 0x02	; 2
    7c8c:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

00007c90 <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7c90:	a5 e2       	ldi	r26, 0x25	; 37
    7c92:	b0 e0       	ldi	r27, 0x00	; 0
    7c94:	ee e4       	ldi	r30, 0x4E	; 78
    7c96:	fe e3       	ldi	r31, 0x3E	; 62
    7c98:	0c 94 90 e4 	jmp	0x1c920	; 0x1c920 <__prologue_saves__+0x14>
    7c9c:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7c9e:	40 e0       	ldi	r20, 0x00	; 0
    7ca0:	50 e0       	ldi	r21, 0x00	; 0
    7ca2:	ba 01       	movw	r22, r20
    7ca4:	80 e0       	ldi	r24, 0x00	; 0
    7ca6:	90 e0       	ldi	r25, 0x00	; 0
    7ca8:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <rtc_init>
    7cac:	81 11       	cpse	r24, r1
    7cae:	27 c0       	rjmp	.+78     	; 0x7cfe <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7cb0:	82 e7       	ldi	r24, 0x72	; 114
    7cb2:	96 e0       	ldi	r25, 0x06	; 6
    7cb4:	a0 e0       	ldi	r26, 0x00	; 0
    7cb6:	ed b7       	in	r30, 0x3d	; 61
    7cb8:	fe b7       	in	r31, 0x3e	; 62
    7cba:	81 83       	std	Z+1, r24	; 0x01
    7cbc:	92 83       	std	Z+2, r25	; 0x02
    7cbe:	a3 83       	std	Z+3, r26	; 0x03
    7cc0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        printf("attempting rtc init\n");
    7cc4:	8d e5       	ldi	r24, 0x5D	; 93
    7cc6:	96 e0       	ldi	r25, 0x06	; 6
    7cc8:	a0 e0       	ldi	r26, 0x00	; 0
    7cca:	ed b7       	in	r30, 0x3d	; 61
    7ccc:	fe b7       	in	r31, 0x3e	; 62
    7cce:	81 83       	std	Z+1, r24	; 0x01
    7cd0:	92 83       	std	Z+2, r25	; 0x02
    7cd2:	a3 83       	std	Z+3, r26	; 0x03
    7cd4:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7cd8:	40 e0       	ldi	r20, 0x00	; 0
    7cda:	50 e0       	ldi	r21, 0x00	; 0
    7cdc:	ba 01       	movw	r22, r20
    7cde:	81 e0       	ldi	r24, 0x01	; 1
    7ce0:	90 e0       	ldi	r25, 0x00	; 0
    7ce2:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <rtc_init>
    7ce6:	81 11       	cpse	r24, r1
    7ce8:	0a c0       	rjmp	.+20     	; 0x7cfe <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7cea:	86 e4       	ldi	r24, 0x46	; 70
    7cec:	96 e0       	ldi	r25, 0x06	; 6
    7cee:	a0 e0       	ldi	r26, 0x00	; 0
    7cf0:	ed b7       	in	r30, 0x3d	; 61
    7cf2:	fe b7       	in	r31, 0x3e	; 62
    7cf4:	81 83       	std	Z+1, r24	; 0x01
    7cf6:	92 83       	std	Z+2, r25	; 0x02
    7cf8:	a3 83       	std	Z+3, r26	; 0x03
    7cfa:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        }
    }

    if(rtc_read(&tc))
    7cfe:	ce 01       	movw	r24, r28
    7d00:	04 96       	adiw	r24, 0x04	; 4
    7d02:	0e 94 4b 30 	call	0x6096	; 0x6096 <rtc_read>
    7d06:	88 23       	and	r24, r24
    7d08:	51 f0       	breq	.+20     	; 0x7d1e <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7d0a:	ce 01       	movw	r24, r28
    7d0c:	04 96       	adiw	r24, 0x04	; 4
    7d0e:	fa dc       	rcall	.-1548   	; 0x7704 <timegm>
    7d10:	6b 01       	movw	r12, r22
    7d12:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
    7d14:	67 2b       	or	r22, r23
    7d16:	68 2b       	or	r22, r24
    7d18:	69 2b       	or	r22, r25
    7d1a:	c1 f4       	brne	.+48     	; 0x7d4c <initialize_clock+0xbc>
    7d1c:	0a c0       	rjmp	.+20     	; 0x7d32 <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7d1e:	8c e2       	ldi	r24, 0x2C	; 44
    7d20:	96 e0       	ldi	r25, 0x06	; 6
    7d22:	a0 e0       	ldi	r26, 0x00	; 0
    7d24:	ed b7       	in	r30, 0x3d	; 61
    7d26:	fe b7       	in	r31, 0x3e	; 62
    7d28:	81 83       	std	Z+1, r24	; 0x01
    7d2a:	92 83       	std	Z+2, r25	; 0x02
    7d2c:	a3 83       	std	Z+3, r26	; 0x03
    7d2e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7d32:	88 e0       	ldi	r24, 0x08	; 8
    7d34:	96 e0       	ldi	r25, 0x06	; 6
    7d36:	a0 e0       	ldi	r26, 0x00	; 0
    7d38:	ed b7       	in	r30, 0x3d	; 61
    7d3a:	fe b7       	in	r31, 0x3e	; 62
    7d3c:	81 83       	std	Z+1, r24	; 0x01
    7d3e:	92 83       	std	Z+2, r25	; 0x02
    7d40:	a3 83       	std	Z+3, r26	; 0x03
    7d42:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    7d46:	c1 2c       	mov	r12, r1
    7d48:	d1 2c       	mov	r13, r1
    7d4a:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7d4c:	1b a3       	std	Y+35, r17	; 0x23
    7d4e:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    7d50:	1d a2       	std	Y+37, r1	; 0x25
    7d52:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    7d54:	ce 01       	movw	r24, r28
    7d56:	82 96       	adiw	r24, 0x22	; 34
    7d58:	30 da       	rcall	.-2976   	; 0x71ba <settimezone>

    ts.tv_sec = seconds;
    7d5a:	ca 8e       	std	Y+26, r12	; 0x1a
    7d5c:	db 8e       	std	Y+27, r13	; 0x1b
    7d5e:	ec 8e       	std	Y+28, r14	; 0x1c
    7d60:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    7d62:	1e 8e       	std	Y+30, r1	; 0x1e
    7d64:	1f 8e       	std	Y+31, r1	; 0x1f
    7d66:	18 a2       	std	Y+32, r1	; 0x20
    7d68:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    7d6a:	be 01       	movw	r22, r28
    7d6c:	66 5e       	subi	r22, 0xE6	; 230
    7d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    7d70:	80 e0       	ldi	r24, 0x00	; 0
    7d72:	90 e0       	ldi	r25, 0x00	; 0
    7d74:	c7 d8       	rcall	.-3698   	; 0x6f04 <clock_settime>
}
    7d76:	a5 96       	adiw	r28, 0x25	; 37
    7d78:	e8 e0       	ldi	r30, 0x08	; 8
    7d7a:	0c 94 ac e4 	jmp	0x1c958	; 0x1c958 <__epilogue_restores__+0x14>

00007d7e <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7d7e:	a9 e2       	ldi	r26, 0x29	; 41
    7d80:	b0 e0       	ldi	r27, 0x00	; 0
    7d82:	e5 ec       	ldi	r30, 0xC5	; 197
    7d84:	fe e3       	ldi	r31, 0x3E	; 62
    7d86:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7d8a:	ce 01       	movw	r24, r28
    7d8c:	08 96       	adiw	r24, 0x08	; 8
    7d8e:	0e 94 4b 30 	call	0x6096	; 0x6096 <rtc_read>
    7d92:	88 23       	and	r24, r24
    7d94:	29 f1       	breq	.+74     	; 0x7de0 <display_clock+0x62>
    {
        seconds = timegm(&tc);
    7d96:	ce 01       	movw	r24, r28
    7d98:	08 96       	adiw	r24, 0x08	; 8
    7d9a:	b4 dc       	rcall	.-1688   	; 0x7704 <timegm>
    7d9c:	6e a3       	std	Y+38, r22	; 0x26
    7d9e:	7f a3       	std	Y+39, r23	; 0x27
    7da0:	88 a7       	std	Y+40, r24	; 0x28
    7da2:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    7da4:	ed b7       	in	r30, 0x3d	; 61
    7da6:	fe b7       	in	r31, 0x3e	; 62
    7da8:	64 83       	std	Z+4, r22	; 0x04
    7daa:	75 83       	std	Z+5, r23	; 0x05
    7dac:	86 83       	std	Z+6, r24	; 0x06
    7dae:	97 83       	std	Z+7, r25	; 0x07
    7db0:	86 ef       	ldi	r24, 0xF6	; 246
    7db2:	95 e0       	ldi	r25, 0x05	; 5
    7db4:	a0 e0       	ldi	r26, 0x00	; 0
    7db6:	81 83       	std	Z+1, r24	; 0x01
    7db8:	92 83       	std	Z+2, r25	; 0x02
    7dba:	a3 83       	std	Z+3, r26	; 0x03
    7dbc:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7dc0:	ce 01       	movw	r24, r28
    7dc2:	08 96       	adiw	r24, 0x08	; 8
    7dc4:	50 df       	rcall	.-352    	; 0x7c66 <asctime>
    7dc6:	ed b7       	in	r30, 0x3d	; 61
    7dc8:	fe b7       	in	r31, 0x3e	; 62
    7dca:	95 83       	std	Z+5, r25	; 0x05
    7dcc:	84 83       	std	Z+4, r24	; 0x04
    7dce:	85 ee       	ldi	r24, 0xE5	; 229
    7dd0:	95 e0       	ldi	r25, 0x05	; 5
    7dd2:	a0 e0       	ldi	r26, 0x00	; 0
    7dd4:	81 83       	std	Z+1, r24	; 0x01
    7dd6:	92 83       	std	Z+2, r25	; 0x02
    7dd8:	a3 83       	std	Z+3, r26	; 0x03
    7dda:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    7dde:	0a c0       	rjmp	.+20     	; 0x7df4 <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7de0:	84 ed       	ldi	r24, 0xD4	; 212
    7de2:	95 e0       	ldi	r25, 0x05	; 5
    7de4:	a0 e0       	ldi	r26, 0x00	; 0
    7de6:	ed b7       	in	r30, 0x3d	; 61
    7de8:	fe b7       	in	r31, 0x3e	; 62
    7dea:	81 83       	std	Z+1, r24	; 0x01
    7dec:	92 83       	std	Z+2, r25	; 0x02
    7dee:	a3 83       	std	Z+3, r26	; 0x03
    7df0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    }
#endif  // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7df4:	be 01       	movw	r22, r28
    7df6:	62 5e       	subi	r22, 0xE2	; 226
    7df8:	7f 4f       	sbci	r23, 0xFF	; 255
    7dfa:	80 e0       	ldi	r24, 0x00	; 0
    7dfc:	90 e0       	ldi	r25, 0x00	; 0
    7dfe:	0e 94 de 34 	call	0x69bc	; 0x69bc <clock_gettime>
    seconds = ts.tv_sec;
    7e02:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7e04:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7e06:	a8 a1       	ldd	r26, Y+32	; 0x20
    7e08:	b9 a1       	ldd	r27, Y+33	; 0x21
    7e0a:	8e a3       	std	Y+38, r24	; 0x26
    7e0c:	9f a3       	std	Y+39, r25	; 0x27
    7e0e:	a8 a7       	std	Y+40, r26	; 0x28
    7e10:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    7e12:	ed b7       	in	r30, 0x3d	; 61
    7e14:	fe b7       	in	r31, 0x3e	; 62
    7e16:	84 83       	std	Z+4, r24	; 0x04
    7e18:	95 83       	std	Z+5, r25	; 0x05
    7e1a:	a6 83       	std	Z+6, r26	; 0x06
    7e1c:	b7 83       	std	Z+7, r27	; 0x07
    7e1e:	82 ec       	ldi	r24, 0xC2	; 194
    7e20:	95 e0       	ldi	r25, 0x05	; 5
    7e22:	a0 e0       	ldi	r26, 0x00	; 0
    7e24:	81 83       	std	Z+1, r24	; 0x01
    7e26:	92 83       	std	Z+2, r25	; 0x02
    7e28:	a3 83       	std	Z+3, r26	; 0x03
    7e2a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7e2e:	ce 01       	movw	r24, r28
    7e30:	86 96       	adiw	r24, 0x26	; 38
    7e32:	a9 d9       	rcall	.-3246   	; 0x7186 <gmtime>
    7e34:	18 df       	rcall	.-464    	; 0x7c66 <asctime>
    7e36:	ed b7       	in	r30, 0x3d	; 61
    7e38:	fe b7       	in	r31, 0x3e	; 62
    7e3a:	95 83       	std	Z+5, r25	; 0x05
    7e3c:	84 83       	std	Z+4, r24	; 0x04
    7e3e:	81 eb       	ldi	r24, 0xB1	; 177
    7e40:	95 e0       	ldi	r25, 0x05	; 5
    7e42:	a0 e0       	ldi	r26, 0x00	; 0
    7e44:	81 83       	std	Z+1, r24	; 0x01
    7e46:	92 83       	std	Z+2, r25	; 0x02
    7e48:	a3 83       	std	Z+3, r26	; 0x03
    7e4a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
}
    7e4e:	a9 96       	adiw	r28, 0x29	; 41
    7e50:	e2 e0       	ldi	r30, 0x02	; 2
    7e52:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

00007e56 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7e56:	fc 01       	movw	r30, r24
    7e58:	84 81       	ldd	r24, Z+4	; 0x04
    7e5a:	95 81       	ldd	r25, Z+5	; 0x05
    7e5c:	00 97       	sbiw	r24, 0x00	; 0
    7e5e:	79 f0       	breq	.+30     	; 0x7e7e <_putc_buffer_fn+0x28>
    7e60:	66 23       	and	r22, r22
    7e62:	69 f0       	breq	.+26     	; 0x7e7e <_putc_buffer_fn+0x28>
    7e64:	01 97       	sbiw	r24, 0x01	; 1
    7e66:	95 83       	std	Z+5, r25	; 0x05
    7e68:	84 83       	std	Z+4, r24	; 0x04
    7e6a:	86 81       	ldd	r24, Z+6	; 0x06
    7e6c:	97 81       	ldd	r25, Z+7	; 0x07
    7e6e:	01 96       	adiw	r24, 0x01	; 1
    7e70:	97 83       	std	Z+7, r25	; 0x07
    7e72:	86 83       	std	Z+6, r24	; 0x06
    7e74:	a2 81       	ldd	r26, Z+2	; 0x02
    7e76:	b3 81       	ldd	r27, Z+3	; 0x03
    7e78:	6d 93       	st	X+, r22
    7e7a:	b3 83       	std	Z+3, r27	; 0x03
    7e7c:	a2 83       	std	Z+2, r26	; 0x02
    7e7e:	02 80       	ldd	r0, Z+2	; 0x02
    7e80:	f3 81       	ldd	r31, Z+3	; 0x03
    7e82:	e0 2d       	mov	r30, r0
    7e84:	10 82       	st	Z, r1
    7e86:	08 95       	ret

00007e88 <_putc_fn>:
    7e88:	fc 01       	movw	r30, r24
    7e8a:	26 81       	ldd	r18, Z+6	; 0x06
    7e8c:	37 81       	ldd	r19, Z+7	; 0x07
    7e8e:	2f 5f       	subi	r18, 0xFF	; 255
    7e90:	3f 4f       	sbci	r19, 0xFF	; 255
    7e92:	37 83       	std	Z+7, r19	; 0x07
    7e94:	26 83       	std	Z+6, r18	; 0x06
    7e96:	86 2f       	mov	r24, r22
    7e98:	90 e0       	ldi	r25, 0x00	; 0
    7e9a:	0c 94 44 77 	jmp	0xee88	; 0xee88 <putchar>
    7e9e:	08 95       	ret

00007ea0 <bin2num>:
    7ea0:	a0 e0       	ldi	r26, 0x00	; 0
    7ea2:	b0 e0       	ldi	r27, 0x00	; 0
    7ea4:	e6 e5       	ldi	r30, 0x56	; 86
    7ea6:	ff e3       	ldi	r31, 0x3F	; 63
    7ea8:	0c 94 8d e4 	jmp	0x1c91a	; 0x1c91a <__prologue_saves__+0xe>
    7eac:	ea 01       	movw	r28, r20
    7eae:	53 e0       	ldi	r21, 0x03	; 3
    7eb0:	ee 0c       	add	r14, r14
    7eb2:	ff 1c       	adc	r15, r15
    7eb4:	5a 95       	dec	r21
    7eb6:	e1 f7       	brne	.-8      	; 0x7eb0 <bin2num+0x10>
    7eb8:	fc 01       	movw	r30, r24
    7eba:	af 01       	movw	r20, r30
    7ebc:	48 1b       	sub	r20, r24
    7ebe:	59 0b       	sbc	r21, r25
    7ec0:	c4 17       	cp	r28, r20
    7ec2:	d5 07       	cpc	r29, r21
    7ec4:	14 f0       	brlt	.+4      	; 0x7eca <bin2num+0x2a>
    7ec6:	11 92       	st	Z+, r1
    7ec8:	f8 cf       	rjmp	.-16     	; 0x7eba <bin2num+0x1a>
    7eca:	41 e0       	ldi	r20, 0x01	; 1
    7ecc:	e4 1a       	sub	r14, r20
    7ece:	f1 08       	sbc	r15, r1
    7ed0:	5b 01       	movw	r10, r22
    7ed2:	42 e0       	ldi	r20, 0x02	; 2
    7ed4:	a4 1a       	sub	r10, r20
    7ed6:	b1 08       	sbc	r11, r1
    7ed8:	f7 fc       	sbrc	r15, 7
    7eda:	3b c0       	rjmp	.+118    	; 0x7f52 <bin2num+0xb2>
    7edc:	f7 01       	movw	r30, r14
    7ede:	43 e0       	ldi	r20, 0x03	; 3
    7ee0:	f5 95       	asr	r31
    7ee2:	e7 95       	ror	r30
    7ee4:	4a 95       	dec	r20
    7ee6:	e1 f7       	brne	.-8      	; 0x7ee0 <bin2num+0x40>
    7ee8:	e0 0f       	add	r30, r16
    7eea:	f1 1f       	adc	r31, r17
    7eec:	40 81       	ld	r20, Z
    7eee:	50 e0       	ldi	r21, 0x00	; 0
    7ef0:	f7 01       	movw	r30, r14
    7ef2:	e7 70       	andi	r30, 0x07	; 7
    7ef4:	ff 27       	eor	r31, r31
    7ef6:	02 c0       	rjmp	.+4      	; 0x7efc <bin2num+0x5c>
    7ef8:	55 95       	asr	r21
    7efa:	47 95       	ror	r20
    7efc:	ea 95       	dec	r30
    7efe:	e2 f7       	brpl	.-8      	; 0x7ef8 <bin2num+0x58>
    7f00:	41 70       	andi	r20, 0x01	; 1
    7f02:	55 27       	eor	r21, r21
    7f04:	dc 01       	movw	r26, r24
    7f06:	e0 e0       	ldi	r30, 0x00	; 0
    7f08:	f0 e0       	ldi	r31, 0x00	; 0
    7f0a:	ec 17       	cp	r30, r28
    7f0c:	fd 07       	cpc	r31, r29
    7f0e:	ec f4       	brge	.+58     	; 0x7f4a <bin2num+0xaa>
    7f10:	ea 15       	cp	r30, r10
    7f12:	fb 05       	cpc	r31, r11
    7f14:	4c f0       	brlt	.+18     	; 0x7f28 <bin2num+0x88>
    7f16:	dc 01       	movw	r26, r24
    7f18:	ae 0f       	add	r26, r30
    7f1a:	bf 1f       	adc	r27, r31
    7f1c:	1c 92       	st	X, r1
    7f1e:	41 e0       	ldi	r20, 0x01	; 1
    7f20:	e4 1a       	sub	r14, r20
    7f22:	f1 08       	sbc	r15, r1
    7f24:	ef 01       	movw	r28, r30
    7f26:	d8 cf       	rjmp	.-80     	; 0x7ed8 <bin2num+0x38>
    7f28:	9c 90       	ld	r9, X
    7f2a:	99 0c       	add	r9, r9
    7f2c:	94 2a       	or	r9, r20
    7f2e:	49 2d       	mov	r20, r9
    7f30:	50 e0       	ldi	r21, 0x00	; 0
    7f32:	42 17       	cp	r20, r18
    7f34:	53 07       	cpc	r21, r19
    7f36:	24 f0       	brlt	.+8      	; 0x7f40 <bin2num+0xa0>
    7f38:	92 1a       	sub	r9, r18
    7f3a:	41 e0       	ldi	r20, 0x01	; 1
    7f3c:	50 e0       	ldi	r21, 0x00	; 0
    7f3e:	02 c0       	rjmp	.+4      	; 0x7f44 <bin2num+0xa4>
    7f40:	40 e0       	ldi	r20, 0x00	; 0
    7f42:	50 e0       	ldi	r21, 0x00	; 0
    7f44:	9d 92       	st	X+, r9
    7f46:	31 96       	adiw	r30, 0x01	; 1
    7f48:	e0 cf       	rjmp	.-64     	; 0x7f0a <bin2num+0x6a>
    7f4a:	41 15       	cp	r20, r1
    7f4c:	51 05       	cpc	r21, r1
    7f4e:	01 f7       	brne	.-64     	; 0x7f10 <bin2num+0x70>
    7f50:	e2 cf       	rjmp	.-60     	; 0x7f16 <bin2num+0x76>
    7f52:	fc 01       	movw	r30, r24
    7f54:	9f 01       	movw	r18, r30
    7f56:	28 1b       	sub	r18, r24
    7f58:	39 0b       	sbc	r19, r25
    7f5a:	2c 17       	cp	r18, r28
    7f5c:	3d 07       	cpc	r19, r29
    7f5e:	4c f4       	brge	.+18     	; 0x7f72 <bin2num+0xd2>
    7f60:	20 81       	ld	r18, Z
    7f62:	2a 30       	cpi	r18, 0x0A	; 10
    7f64:	10 f4       	brcc	.+4      	; 0x7f6a <bin2num+0xca>
    7f66:	20 5d       	subi	r18, 0xD0	; 208
    7f68:	01 c0       	rjmp	.+2      	; 0x7f6c <bin2num+0xcc>
    7f6a:	29 5a       	subi	r18, 0xA9	; 169
    7f6c:	20 83       	st	Z, r18
    7f6e:	31 96       	adiw	r30, 0x01	; 1
    7f70:	f1 cf       	rjmp	.-30     	; 0x7f54 <bin2num+0xb4>
    7f72:	9e 01       	movw	r18, r28
    7f74:	d7 ff       	sbrs	r29, 7
    7f76:	02 c0       	rjmp	.+4      	; 0x7f7c <bin2num+0xdc>
    7f78:	20 e0       	ldi	r18, 0x00	; 0
    7f7a:	30 e0       	ldi	r19, 0x00	; 0
    7f7c:	c1 14       	cp	r12, r1
    7f7e:	d1 04       	cpc	r13, r1
    7f80:	61 f0       	breq	.+24     	; 0x7f9a <bin2num+0xfa>
    7f82:	61 50       	subi	r22, 0x01	; 1
    7f84:	71 09       	sbc	r23, r1
    7f86:	26 17       	cp	r18, r22
    7f88:	37 07       	cpc	r19, r23
    7f8a:	3c f4       	brge	.+14     	; 0x7f9a <bin2num+0xfa>
    7f8c:	fc 01       	movw	r30, r24
    7f8e:	e2 0f       	add	r30, r18
    7f90:	f3 1f       	adc	r31, r19
    7f92:	c0 82       	st	Z, r12
    7f94:	21 96       	adiw	r28, 0x01	; 1
    7f96:	2f 5f       	subi	r18, 0xFF	; 255
    7f98:	3f 4f       	sbci	r19, 0xFF	; 255
    7f9a:	fc 01       	movw	r30, r24
    7f9c:	e2 0f       	add	r30, r18
    7f9e:	f3 1f       	adc	r31, r19
    7fa0:	10 82       	st	Z, r1
    7fa2:	0e 94 95 32 	call	0x652a	; 0x652a <reverse>
    7fa6:	ce 01       	movw	r24, r28
    7fa8:	cd b7       	in	r28, 0x3d	; 61
    7faa:	de b7       	in	r29, 0x3e	; 62
    7fac:	eb e0       	ldi	r30, 0x0B	; 11
    7fae:	0c 94 a9 e4 	jmp	0x1c952	; 0x1c952 <__epilogue_restores__+0xe>

00007fb2 <pch_init>:
    7fb2:	e2 e1       	ldi	r30, 0x12	; 18
    7fb4:	fa e1       	ldi	r31, 0x1A	; 26
    7fb6:	91 83       	std	Z+1, r25	; 0x01
    7fb8:	80 83       	st	Z, r24
    7fba:	13 82       	std	Z+3, r1	; 0x03
    7fbc:	12 82       	std	Z+2, r1	; 0x02
    7fbe:	61 50       	subi	r22, 0x01	; 1
    7fc0:	71 09       	sbc	r23, r1
    7fc2:	75 83       	std	Z+5, r23	; 0x05
    7fc4:	64 83       	std	Z+4, r22	; 0x04
    7fc6:	fc 01       	movw	r30, r24
    7fc8:	10 82       	st	Z, r1
    7fca:	08 95       	ret

00007fcc <pch>:
    7fcc:	20 91 14 1a 	lds	r18, 0x1A14	; 0x801a14 <_pch+0x2>
    7fd0:	30 91 15 1a 	lds	r19, 0x1A15	; 0x801a15 <_pch+0x3>
    7fd4:	60 91 16 1a 	lds	r22, 0x1A16	; 0x801a16 <_pch+0x4>
    7fd8:	70 91 17 1a 	lds	r23, 0x1A17	; 0x801a17 <_pch+0x5>
    7fdc:	40 91 12 1a 	lds	r20, 0x1A12	; 0x801a12 <_pch>
    7fe0:	50 91 13 1a 	lds	r21, 0x1A13	; 0x801a13 <_pch+0x1>
    7fe4:	26 17       	cp	r18, r22
    7fe6:	37 07       	cpc	r19, r23
    7fe8:	64 f4       	brge	.+24     	; 0x8002 <pch+0x36>
    7fea:	b9 01       	movw	r22, r18
    7fec:	6f 5f       	subi	r22, 0xFF	; 255
    7fee:	7f 4f       	sbci	r23, 0xFF	; 255
    7ff0:	70 93 15 1a 	sts	0x1A15, r23	; 0x801a15 <_pch+0x3>
    7ff4:	60 93 14 1a 	sts	0x1A14, r22	; 0x801a14 <_pch+0x2>
    7ff8:	fa 01       	movw	r30, r20
    7ffa:	e2 0f       	add	r30, r18
    7ffc:	f3 1f       	adc	r31, r19
    7ffe:	80 83       	st	Z, r24
    8000:	04 c0       	rjmp	.+8      	; 0x800a <pch+0x3e>
    8002:	fa 01       	movw	r30, r20
    8004:	e2 0f       	add	r30, r18
    8006:	f3 1f       	adc	r31, r19
    8008:	10 82       	st	Z, r1
    800a:	80 91 14 1a 	lds	r24, 0x1A14	; 0x801a14 <_pch+0x2>
    800e:	90 91 15 1a 	lds	r25, 0x1A15	; 0x801a15 <_pch+0x3>
    8012:	08 95       	ret

00008014 <p_ntoa>:
    8014:	af 92       	push	r10
    8016:	cf 92       	push	r12
    8018:	df 92       	push	r13
    801a:	ef 92       	push	r14
    801c:	ff 92       	push	r15
    801e:	0f 93       	push	r16
    8020:	1f 93       	push	r17
    8022:	cf 93       	push	r28
    8024:	df 93       	push	r29
    8026:	dc 01       	movw	r26, r24
    8028:	eb 01       	movw	r28, r22
    802a:	fa 01       	movw	r30, r20
    802c:	b9 01       	movw	r22, r18
    802e:	98 01       	movw	r18, r16
    8030:	a6 01       	movw	r20, r12
    8032:	9a 2d       	mov	r25, r10
    8034:	a5 fa       	bst	r10, 5
    8036:	cc 24       	eor	r12, r12
    8038:	c0 f8       	bld	r12, 0
    803a:	a6 fc       	sbrc	r10, 6
    803c:	07 c0       	rjmp	.+14     	; 0x804c <p_ntoa+0x38>
    803e:	a2 fc       	sbrc	r10, 2
    8040:	08 c0       	rjmp	.+16     	; 0x8052 <p_ntoa+0x3e>
    8042:	a4 fe       	sbrs	r10, 4
    8044:	09 c0       	rjmp	.+18     	; 0x8058 <p_ntoa+0x44>
    8046:	00 e2       	ldi	r16, 0x20	; 32
    8048:	10 e0       	ldi	r17, 0x00	; 0
    804a:	08 c0       	rjmp	.+16     	; 0x805c <p_ntoa+0x48>
    804c:	0d e2       	ldi	r16, 0x2D	; 45
    804e:	10 e0       	ldi	r17, 0x00	; 0
    8050:	05 c0       	rjmp	.+10     	; 0x805c <p_ntoa+0x48>
    8052:	0b e2       	ldi	r16, 0x2B	; 43
    8054:	10 e0       	ldi	r17, 0x00	; 0
    8056:	02 c0       	rjmp	.+4      	; 0x805c <p_ntoa+0x48>
    8058:	00 e0       	ldi	r16, 0x00	; 0
    805a:	10 e0       	ldi	r17, 0x00	; 0
    805c:	95 ff       	sbrs	r25, 5
    805e:	04 c0       	rjmp	.+8      	; 0x8068 <p_ntoa+0x54>
    8060:	89 2f       	mov	r24, r25
    8062:	8a 70       	andi	r24, 0x0A	; 10
    8064:	09 f0       	breq	.+2      	; 0x8068 <p_ntoa+0x54>
    8066:	c1 2c       	mov	r12, r1
    8068:	c0 fa       	bst	r12, 0
    806a:	95 f9       	bld	r25, 5
    806c:	89 2f       	mov	r24, r25
    806e:	82 70       	andi	r24, 0x02	; 2
    8070:	c8 2e       	mov	r12, r24
    8072:	91 fd       	sbrc	r25, 1
    8074:	02 c0       	rjmp	.+4      	; 0x807a <p_ntoa+0x66>
    8076:	40 e0       	ldi	r20, 0x00	; 0
    8078:	50 e0       	ldi	r21, 0x00	; 0
    807a:	89 2f       	mov	r24, r25
    807c:	83 70       	andi	r24, 0x03	; 3
    807e:	11 f4       	brne	.+4      	; 0x8084 <p_ntoa+0x70>
    8080:	41 e0       	ldi	r20, 0x01	; 1
    8082:	50 e0       	ldi	r21, 0x00	; 0
    8084:	90 ff       	sbrs	r25, 0
    8086:	0c c0       	rjmp	.+24     	; 0x80a0 <p_ntoa+0x8c>
    8088:	95 fd       	sbrc	r25, 5
    808a:	05 c0       	rjmp	.+10     	; 0x8096 <p_ntoa+0x82>
    808c:	c1 10       	cpse	r12, r1
    808e:	08 c0       	rjmp	.+16     	; 0x80a0 <p_ntoa+0x8c>
    8090:	41 e0       	ldi	r20, 0x01	; 1
    8092:	50 e0       	ldi	r21, 0x00	; 0
    8094:	05 c0       	rjmp	.+10     	; 0x80a0 <p_ntoa+0x8c>
    8096:	94 75       	andi	r25, 0x54	; 84
    8098:	a7 01       	movw	r20, r14
    809a:	11 f0       	breq	.+4      	; 0x80a0 <p_ntoa+0x8c>
    809c:	41 50       	subi	r20, 0x01	; 1
    809e:	51 09       	sbc	r21, r1
    80a0:	68 01       	movw	r12, r16
    80a2:	7e 01       	movw	r14, r28
    80a4:	8d 01       	movw	r16, r26
    80a6:	cf 01       	movw	r24, r30
    80a8:	fb de       	rcall	.-522    	; 0x7ea0 <bin2num>
    80aa:	df 91       	pop	r29
    80ac:	cf 91       	pop	r28
    80ae:	1f 91       	pop	r17
    80b0:	0f 91       	pop	r16
    80b2:	ff 90       	pop	r15
    80b4:	ef 90       	pop	r14
    80b6:	df 90       	pop	r13
    80b8:	cf 90       	pop	r12
    80ba:	af 90       	pop	r10
    80bc:	08 95       	ret

000080be <p_ftoa>:
    80be:	2f 92       	push	r2
    80c0:	3f 92       	push	r3
    80c2:	4f 92       	push	r4
    80c4:	5f 92       	push	r5
    80c6:	6f 92       	push	r6
    80c8:	7f 92       	push	r7
    80ca:	8f 92       	push	r8
    80cc:	9f 92       	push	r9
    80ce:	af 92       	push	r10
    80d0:	bf 92       	push	r11
    80d2:	cf 92       	push	r12
    80d4:	ef 92       	push	r14
    80d6:	ff 92       	push	r15
    80d8:	0f 93       	push	r16
    80da:	1f 93       	push	r17
    80dc:	cf 93       	push	r28
    80de:	df 93       	push	r29
    80e0:	4b 01       	movw	r8, r22
    80e2:	5c 01       	movw	r10, r24
    80e4:	1a 01       	movw	r2, r20
    80e6:	38 01       	movw	r6, r16
    80e8:	c6 fa       	bst	r12, 6
    80ea:	cc 27       	eor	r28, r28
    80ec:	c0 f9       	bld	r28, 0
    80ee:	b9 01       	movw	r22, r18
    80f0:	ca 01       	movw	r24, r20
    80f2:	5f df       	rcall	.-322    	; 0x7fb2 <pch_init>
    80f4:	20 e0       	ldi	r18, 0x00	; 0
    80f6:	30 e0       	ldi	r19, 0x00	; 0
    80f8:	a9 01       	movw	r20, r18
    80fa:	c5 01       	movw	r24, r10
    80fc:	b4 01       	movw	r22, r8
    80fe:	0e 94 35 e5 	call	0x1ca6a	; 0x1ca6a <__cmpsf2>
    8102:	87 ff       	sbrs	r24, 7
    8104:	05 c0       	rjmp	.+10     	; 0x8110 <p_ftoa+0x52>
    8106:	b7 fa       	bst	r11, 7
    8108:	b0 94       	com	r11
    810a:	b7 f8       	bld	r11, 7
    810c:	b0 94       	com	r11
    810e:	c1 e0       	ldi	r28, 0x01	; 1
    8110:	c0 fb       	bst	r28, 0
    8112:	c6 f8       	bld	r12, 6
    8114:	c6 fe       	sbrs	r12, 6
    8116:	02 c0       	rjmp	.+4      	; 0x811c <p_ftoa+0x5e>
    8118:	8d e2       	ldi	r24, 0x2D	; 45
    811a:	07 c0       	rjmp	.+14     	; 0x812a <p_ftoa+0x6c>
    811c:	c2 fe       	sbrs	r12, 2
    811e:	02 c0       	rjmp	.+4      	; 0x8124 <p_ftoa+0x66>
    8120:	8b e2       	ldi	r24, 0x2B	; 43
    8122:	03 c0       	rjmp	.+6      	; 0x812a <p_ftoa+0x6c>
    8124:	c4 fe       	sbrs	r12, 4
    8126:	02 c0       	rjmp	.+4      	; 0x812c <p_ftoa+0x6e>
    8128:	80 e2       	ldi	r24, 0x20	; 32
    812a:	50 df       	rcall	.-352    	; 0x7fcc <pch>
    812c:	e7 01       	movw	r28, r14
    812e:	f7 fe       	sbrs	r15, 7
    8130:	02 c0       	rjmp	.+4      	; 0x8136 <p_ftoa+0x78>
    8132:	c0 e0       	ldi	r28, 0x00	; 0
    8134:	d0 e0       	ldi	r29, 0x00	; 0
    8136:	20 e0       	ldi	r18, 0x00	; 0
    8138:	30 e0       	ldi	r19, 0x00	; 0
    813a:	a9 01       	movw	r20, r18
    813c:	c5 01       	movw	r24, r10
    813e:	b4 01       	movw	r22, r8
    8140:	0e 94 35 e5 	call	0x1ca6a	; 0x1ca6a <__cmpsf2>
    8144:	88 23       	and	r24, r24
    8146:	d1 f1       	breq	.+116    	; 0x81bc <p_ftoa+0xfe>
    8148:	c1 fe       	sbrs	r12, 1
    814a:	11 c0       	rjmp	.+34     	; 0x816e <p_ftoa+0xb0>
    814c:	8e 01       	movw	r16, r28
    814e:	60 e0       	ldi	r22, 0x00	; 0
    8150:	70 e0       	ldi	r23, 0x00	; 0
    8152:	80 e0       	ldi	r24, 0x00	; 0
    8154:	9f e3       	ldi	r25, 0x3F	; 63
    8156:	01 15       	cp	r16, r1
    8158:	11 05       	cpc	r17, r1
    815a:	69 f0       	breq	.+26     	; 0x8176 <p_ftoa+0xb8>
    815c:	20 e0       	ldi	r18, 0x00	; 0
    815e:	30 e0       	ldi	r19, 0x00	; 0
    8160:	40 e2       	ldi	r20, 0x20	; 32
    8162:	51 e4       	ldi	r21, 0x41	; 65
    8164:	0e 94 39 e5 	call	0x1ca72	; 0x1ca72 <__divsf3>
    8168:	01 50       	subi	r16, 0x01	; 1
    816a:	11 09       	sbc	r17, r1
    816c:	f4 cf       	rjmp	.-24     	; 0x8156 <p_ftoa+0x98>
    816e:	60 e0       	ldi	r22, 0x00	; 0
    8170:	70 e0       	ldi	r23, 0x00	; 0
    8172:	80 e0       	ldi	r24, 0x00	; 0
    8174:	9f e3       	ldi	r25, 0x3F	; 63
    8176:	9b 01       	movw	r18, r22
    8178:	ac 01       	movw	r20, r24
    817a:	c5 01       	movw	r24, r10
    817c:	b4 01       	movw	r22, r8
    817e:	0e 94 d1 e4 	call	0x1c9a2	; 0x1c9a2 <__addsf3>
    8182:	4b 01       	movw	r8, r22
    8184:	5c 01       	movw	r10, r24
    8186:	ee 24       	eor	r14, r14
    8188:	e3 94       	inc	r14
    818a:	f1 2c       	mov	r15, r1
    818c:	20 e0       	ldi	r18, 0x00	; 0
    818e:	30 e0       	ldi	r19, 0x00	; 0
    8190:	40 e2       	ldi	r20, 0x20	; 32
    8192:	51 e4       	ldi	r21, 0x41	; 65
    8194:	c5 01       	movw	r24, r10
    8196:	b4 01       	movw	r22, r8
    8198:	0e 94 84 e6 	call	0x1cd08	; 0x1cd08 <__gesf2>
    819c:	87 fd       	sbrc	r24, 7
    819e:	11 c0       	rjmp	.+34     	; 0x81c2 <p_ftoa+0x104>
    81a0:	2f ef       	ldi	r18, 0xFF	; 255
    81a2:	e2 1a       	sub	r14, r18
    81a4:	f2 0a       	sbc	r15, r18
    81a6:	20 e0       	ldi	r18, 0x00	; 0
    81a8:	30 e0       	ldi	r19, 0x00	; 0
    81aa:	40 e2       	ldi	r20, 0x20	; 32
    81ac:	51 e4       	ldi	r21, 0x41	; 65
    81ae:	c5 01       	movw	r24, r10
    81b0:	b4 01       	movw	r22, r8
    81b2:	0e 94 39 e5 	call	0x1ca72	; 0x1ca72 <__divsf3>
    81b6:	4b 01       	movw	r8, r22
    81b8:	5c 01       	movw	r10, r24
    81ba:	e8 cf       	rjmp	.-48     	; 0x818c <p_ftoa+0xce>
    81bc:	ee 24       	eor	r14, r14
    81be:	e3 94       	inc	r14
    81c0:	f1 2c       	mov	r15, r1
    81c2:	8c 2d       	mov	r24, r12
    81c4:	88 72       	andi	r24, 0x28	; 40
    81c6:	80 32       	cpi	r24, 0x20	; 32
    81c8:	b9 f4       	brne	.+46     	; 0x81f8 <p_ftoa+0x13a>
    81ca:	83 01       	movw	r16, r6
    81cc:	0e 19       	sub	r16, r14
    81ce:	1f 09       	sbc	r17, r15
    81d0:	80 91 14 1a 	lds	r24, 0x1A14	; 0x801a14 <_pch+0x2>
    81d4:	90 91 15 1a 	lds	r25, 0x1A15	; 0x801a15 <_pch+0x3>
    81d8:	08 1b       	sub	r16, r24
    81da:	19 0b       	sbc	r17, r25
    81dc:	c1 fe       	sbrs	r12, 1
    81de:	06 c0       	rjmp	.+12     	; 0x81ec <p_ftoa+0x12e>
    81e0:	20 97       	sbiw	r28, 0x00	; 0
    81e2:	21 f0       	breq	.+8      	; 0x81ec <p_ftoa+0x12e>
    81e4:	0c 1b       	sub	r16, r28
    81e6:	1d 0b       	sbc	r17, r29
    81e8:	01 50       	subi	r16, 0x01	; 1
    81ea:	11 09       	sbc	r17, r1
    81ec:	10 16       	cp	r1, r16
    81ee:	11 06       	cpc	r1, r17
    81f0:	1c f4       	brge	.+6      	; 0x81f8 <p_ftoa+0x13a>
    81f2:	80 e3       	ldi	r24, 0x30	; 48
    81f4:	eb de       	rcall	.-554    	; 0x7fcc <pch>
    81f6:	f8 cf       	rjmp	.-16     	; 0x81e8 <p_ftoa+0x12a>
    81f8:	c5 01       	movw	r24, r10
    81fa:	b4 01       	movw	r22, r8
    81fc:	0e 94 a1 e5 	call	0x1cb42	; 0x1cb42 <__fixsfsi>
    8200:	2b 01       	movw	r4, r22
    8202:	3c 01       	movw	r6, r24
    8204:	80 e3       	ldi	r24, 0x30	; 48
    8206:	84 0d       	add	r24, r4
    8208:	e1 de       	rcall	.-574    	; 0x7fcc <pch>
    820a:	b2 01       	movw	r22, r4
    820c:	55 0c       	add	r5, r5
    820e:	88 0b       	sbc	r24, r24
    8210:	99 0b       	sbc	r25, r25
    8212:	0e 94 d4 e5 	call	0x1cba8	; 0x1cba8 <__floatsisf>
    8216:	9b 01       	movw	r18, r22
    8218:	ac 01       	movw	r20, r24
    821a:	c5 01       	movw	r24, r10
    821c:	b4 01       	movw	r22, r8
    821e:	0e 94 d0 e4 	call	0x1c9a0	; 0x1c9a0 <__subsf3>
    8222:	21 e0       	ldi	r18, 0x01	; 1
    8224:	e2 1a       	sub	r14, r18
    8226:	f1 08       	sbc	r15, r1
    8228:	20 e0       	ldi	r18, 0x00	; 0
    822a:	30 e0       	ldi	r19, 0x00	; 0
    822c:	40 e2       	ldi	r20, 0x20	; 32
    822e:	51 e4       	ldi	r21, 0x41	; 65
    8230:	0e 94 88 e6 	call	0x1cd10	; 0x1cd10 <__mulsf3>
    8234:	4b 01       	movw	r8, r22
    8236:	5c 01       	movw	r10, r24
    8238:	e1 14       	cp	r14, r1
    823a:	f1 04       	cpc	r15, r1
    823c:	e9 f6       	brne	.-70     	; 0x81f8 <p_ftoa+0x13a>
    823e:	c1 fc       	sbrc	r12, 1
    8240:	1c c0       	rjmp	.+56     	; 0x827a <p_ftoa+0x1bc>
    8242:	80 e0       	ldi	r24, 0x00	; 0
    8244:	c3 de       	rcall	.-634    	; 0x7fcc <pch>
    8246:	f1 01       	movw	r30, r2
    8248:	01 90       	ld	r0, Z+
    824a:	00 20       	and	r0, r0
    824c:	e9 f7       	brne	.-6      	; 0x8248 <p_ftoa+0x18a>
    824e:	31 97       	sbiw	r30, 0x01	; 1
    8250:	cf 01       	movw	r24, r30
    8252:	82 19       	sub	r24, r2
    8254:	93 09       	sbc	r25, r3
    8256:	df 91       	pop	r29
    8258:	cf 91       	pop	r28
    825a:	1f 91       	pop	r17
    825c:	0f 91       	pop	r16
    825e:	ff 90       	pop	r15
    8260:	ef 90       	pop	r14
    8262:	cf 90       	pop	r12
    8264:	bf 90       	pop	r11
    8266:	af 90       	pop	r10
    8268:	9f 90       	pop	r9
    826a:	8f 90       	pop	r8
    826c:	7f 90       	pop	r7
    826e:	6f 90       	pop	r6
    8270:	5f 90       	pop	r5
    8272:	4f 90       	pop	r4
    8274:	3f 90       	pop	r3
    8276:	2f 90       	pop	r2
    8278:	08 95       	ret
    827a:	20 97       	sbiw	r28, 0x00	; 0
    827c:	11 f3       	breq	.-60     	; 0x8242 <p_ftoa+0x184>
    827e:	8e e2       	ldi	r24, 0x2E	; 46
    8280:	a5 de       	rcall	.-694    	; 0x7fcc <pch>
    8282:	c5 01       	movw	r24, r10
    8284:	b4 01       	movw	r22, r8
    8286:	0e 94 a1 e5 	call	0x1cb42	; 0x1cb42 <__fixsfsi>
    828a:	2b 01       	movw	r4, r22
    828c:	3c 01       	movw	r6, r24
    828e:	07 2e       	mov	r0, r23
    8290:	00 0c       	add	r0, r0
    8292:	88 0b       	sbc	r24, r24
    8294:	99 0b       	sbc	r25, r25
    8296:	0e 94 d4 e5 	call	0x1cba8	; 0x1cba8 <__floatsisf>
    829a:	9b 01       	movw	r18, r22
    829c:	ac 01       	movw	r20, r24
    829e:	c5 01       	movw	r24, r10
    82a0:	b4 01       	movw	r22, r8
    82a2:	0e 94 d0 e4 	call	0x1c9a0	; 0x1c9a0 <__subsf3>
    82a6:	4b 01       	movw	r8, r22
    82a8:	5c 01       	movw	r10, r24
    82aa:	80 e3       	ldi	r24, 0x30	; 48
    82ac:	84 0d       	add	r24, r4
    82ae:	8e de       	rcall	.-740    	; 0x7fcc <pch>
    82b0:	21 97       	sbiw	r28, 0x01	; 1
    82b2:	20 e0       	ldi	r18, 0x00	; 0
    82b4:	30 e0       	ldi	r19, 0x00	; 0
    82b6:	40 e2       	ldi	r20, 0x20	; 32
    82b8:	51 e4       	ldi	r21, 0x41	; 65
    82ba:	c5 01       	movw	r24, r10
    82bc:	b4 01       	movw	r22, r8
    82be:	0e 94 88 e6 	call	0x1cd10	; 0x1cd10 <__mulsf3>
    82c2:	4b 01       	movw	r8, r22
    82c4:	5c 01       	movw	r10, r24
    82c6:	20 97       	sbiw	r28, 0x00	; 0
    82c8:	e1 f6       	brne	.-72     	; 0x8282 <p_ftoa+0x1c4>
    82ca:	bb cf       	rjmp	.-138    	; 0x8242 <p_ftoa+0x184>

000082cc <p_etoa>:
    82cc:	ad e0       	ldi	r26, 0x0D	; 13
    82ce:	b0 e0       	ldi	r27, 0x00	; 0
    82d0:	ec e6       	ldi	r30, 0x6C	; 108
    82d2:	f1 e4       	ldi	r31, 0x41	; 65
    82d4:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
    82d8:	4b 01       	movw	r8, r22
    82da:	5c 01       	movw	r10, r24
    82dc:	5b 87       	std	Y+11, r21	; 0x0b
    82de:	4a 87       	std	Y+10, r20	; 0x0a
    82e0:	1d 87       	std	Y+13, r17	; 0x0d
    82e2:	0c 87       	std	Y+12, r16	; 0x0c
    82e4:	3c 2c       	mov	r3, r12
    82e6:	c6 fa       	bst	r12, 6
    82e8:	11 27       	eor	r17, r17
    82ea:	10 f9       	bld	r17, 0
    82ec:	b9 01       	movw	r22, r18
    82ee:	ca 01       	movw	r24, r20
    82f0:	60 de       	rcall	.-832    	; 0x7fb2 <pch_init>
    82f2:	20 e0       	ldi	r18, 0x00	; 0
    82f4:	30 e0       	ldi	r19, 0x00	; 0
    82f6:	a9 01       	movw	r20, r18
    82f8:	c5 01       	movw	r24, r10
    82fa:	b4 01       	movw	r22, r8
    82fc:	0e 94 35 e5 	call	0x1ca6a	; 0x1ca6a <__cmpsf2>
    8300:	87 ff       	sbrs	r24, 7
    8302:	05 c0       	rjmp	.+10     	; 0x830e <p_etoa+0x42>
    8304:	b7 fa       	bst	r11, 7
    8306:	b0 94       	com	r11
    8308:	b7 f8       	bld	r11, 7
    830a:	b0 94       	com	r11
    830c:	11 e0       	ldi	r17, 0x01	; 1
    830e:	10 fb       	bst	r17, 0
    8310:	36 f8       	bld	r3, 6
    8312:	36 fe       	sbrs	r3, 6
    8314:	02 c0       	rjmp	.+4      	; 0x831a <p_etoa+0x4e>
    8316:	8d e2       	ldi	r24, 0x2D	; 45
    8318:	07 c0       	rjmp	.+14     	; 0x8328 <p_etoa+0x5c>
    831a:	32 fe       	sbrs	r3, 2
    831c:	02 c0       	rjmp	.+4      	; 0x8322 <p_etoa+0x56>
    831e:	8b e2       	ldi	r24, 0x2B	; 43
    8320:	03 c0       	rjmp	.+6      	; 0x8328 <p_etoa+0x5c>
    8322:	34 fe       	sbrs	r3, 4
    8324:	02 c0       	rjmp	.+4      	; 0x832a <p_etoa+0x5e>
    8326:	80 e2       	ldi	r24, 0x20	; 32
    8328:	51 de       	rcall	.-862    	; 0x7fcc <pch>
    832a:	37 01       	movw	r6, r14
    832c:	f7 fe       	sbrs	r15, 7
    832e:	02 c0       	rjmp	.+4      	; 0x8334 <p_etoa+0x68>
    8330:	61 2c       	mov	r6, r1
    8332:	71 2c       	mov	r7, r1
    8334:	19 86       	std	Y+9, r1	; 0x09
    8336:	18 86       	std	Y+8, r1	; 0x08
    8338:	20 e0       	ldi	r18, 0x00	; 0
    833a:	30 e0       	ldi	r19, 0x00	; 0
    833c:	a9 01       	movw	r20, r18
    833e:	c5 01       	movw	r24, r10
    8340:	b4 01       	movw	r22, r8
    8342:	0e 94 35 e5 	call	0x1ca6a	; 0x1ca6a <__cmpsf2>
    8346:	23 2d       	mov	r18, r3
    8348:	22 70       	andi	r18, 0x02	; 2
    834a:	22 2e       	mov	r2, r18
    834c:	88 23       	and	r24, r24
    834e:	09 f4       	brne	.+2      	; 0x8352 <p_etoa+0x86>
    8350:	70 c0       	rjmp	.+224    	; 0x8432 <p_etoa+0x166>
    8352:	22 23       	and	r18, r18
    8354:	b1 f0       	breq	.+44     	; 0x8382 <p_etoa+0xb6>
    8356:	83 01       	movw	r16, r6
    8358:	c1 2c       	mov	r12, r1
    835a:	d1 2c       	mov	r13, r1
    835c:	e1 2c       	mov	r14, r1
    835e:	2f e3       	ldi	r18, 0x3F	; 63
    8360:	f2 2e       	mov	r15, r18
    8362:	01 15       	cp	r16, r1
    8364:	11 05       	cpc	r17, r1
    8366:	91 f0       	breq	.+36     	; 0x838c <p_etoa+0xc0>
    8368:	20 e0       	ldi	r18, 0x00	; 0
    836a:	30 e0       	ldi	r19, 0x00	; 0
    836c:	40 e2       	ldi	r20, 0x20	; 32
    836e:	51 e4       	ldi	r21, 0x41	; 65
    8370:	c7 01       	movw	r24, r14
    8372:	b6 01       	movw	r22, r12
    8374:	0e 94 39 e5 	call	0x1ca72	; 0x1ca72 <__divsf3>
    8378:	6b 01       	movw	r12, r22
    837a:	7c 01       	movw	r14, r24
    837c:	01 50       	subi	r16, 0x01	; 1
    837e:	11 09       	sbc	r17, r1
    8380:	f0 cf       	rjmp	.-32     	; 0x8362 <p_etoa+0x96>
    8382:	c1 2c       	mov	r12, r1
    8384:	d1 2c       	mov	r13, r1
    8386:	e1 2c       	mov	r14, r1
    8388:	9f e3       	ldi	r25, 0x3F	; 63
    838a:	f9 2e       	mov	r15, r25
    838c:	41 2c       	mov	r4, r1
    838e:	51 2c       	mov	r5, r1
    8390:	82 01       	movw	r16, r4
    8392:	01 50       	subi	r16, 0x01	; 1
    8394:	11 09       	sbc	r17, r1
    8396:	20 e0       	ldi	r18, 0x00	; 0
    8398:	30 e0       	ldi	r19, 0x00	; 0
    839a:	40 e8       	ldi	r20, 0x80	; 128
    839c:	5f e3       	ldi	r21, 0x3F	; 63
    839e:	c5 01       	movw	r24, r10
    83a0:	b4 01       	movw	r22, r8
    83a2:	0e 94 35 e5 	call	0x1ca6a	; 0x1ca6a <__cmpsf2>
    83a6:	87 ff       	sbrs	r24, 7
    83a8:	0c c0       	rjmp	.+24     	; 0x83c2 <p_etoa+0xf6>
    83aa:	20 e0       	ldi	r18, 0x00	; 0
    83ac:	30 e0       	ldi	r19, 0x00	; 0
    83ae:	40 e2       	ldi	r20, 0x20	; 32
    83b0:	51 e4       	ldi	r21, 0x41	; 65
    83b2:	c5 01       	movw	r24, r10
    83b4:	b4 01       	movw	r22, r8
    83b6:	0e 94 88 e6 	call	0x1cd10	; 0x1cd10 <__mulsf3>
    83ba:	4b 01       	movw	r8, r22
    83bc:	5c 01       	movw	r10, r24
    83be:	28 01       	movw	r4, r16
    83c0:	e7 cf       	rjmp	.-50     	; 0x8390 <p_etoa+0xc4>
    83c2:	82 01       	movw	r16, r4
    83c4:	0f 5f       	subi	r16, 0xFF	; 255
    83c6:	1f 4f       	sbci	r17, 0xFF	; 255
    83c8:	20 e0       	ldi	r18, 0x00	; 0
    83ca:	30 e0       	ldi	r19, 0x00	; 0
    83cc:	40 e2       	ldi	r20, 0x20	; 32
    83ce:	51 e4       	ldi	r21, 0x41	; 65
    83d0:	c5 01       	movw	r24, r10
    83d2:	b4 01       	movw	r22, r8
    83d4:	0e 94 84 e6 	call	0x1cd08	; 0x1cd08 <__gesf2>
    83d8:	87 fd       	sbrc	r24, 7
    83da:	0c c0       	rjmp	.+24     	; 0x83f4 <p_etoa+0x128>
    83dc:	20 e0       	ldi	r18, 0x00	; 0
    83de:	30 e0       	ldi	r19, 0x00	; 0
    83e0:	40 e2       	ldi	r20, 0x20	; 32
    83e2:	51 e4       	ldi	r21, 0x41	; 65
    83e4:	c5 01       	movw	r24, r10
    83e6:	b4 01       	movw	r22, r8
    83e8:	0e 94 39 e5 	call	0x1ca72	; 0x1ca72 <__divsf3>
    83ec:	4b 01       	movw	r8, r22
    83ee:	5c 01       	movw	r10, r24
    83f0:	28 01       	movw	r4, r16
    83f2:	e7 cf       	rjmp	.-50     	; 0x83c2 <p_etoa+0xf6>
    83f4:	a7 01       	movw	r20, r14
    83f6:	96 01       	movw	r18, r12
    83f8:	c5 01       	movw	r24, r10
    83fa:	b4 01       	movw	r22, r8
    83fc:	0e 94 d1 e4 	call	0x1c9a2	; 0x1c9a2 <__addsf3>
    8400:	4b 01       	movw	r8, r22
    8402:	5c 01       	movw	r10, r24
    8404:	82 01       	movw	r16, r4
    8406:	3f ef       	ldi	r19, 0xFF	; 255
    8408:	43 1a       	sub	r4, r19
    840a:	53 0a       	sbc	r5, r19
    840c:	20 e0       	ldi	r18, 0x00	; 0
    840e:	30 e0       	ldi	r19, 0x00	; 0
    8410:	40 e2       	ldi	r20, 0x20	; 32
    8412:	51 e4       	ldi	r21, 0x41	; 65
    8414:	0e 94 84 e6 	call	0x1cd08	; 0x1cd08 <__gesf2>
    8418:	87 fd       	sbrc	r24, 7
    841a:	09 c0       	rjmp	.+18     	; 0x842e <p_etoa+0x162>
    841c:	20 e0       	ldi	r18, 0x00	; 0
    841e:	30 e0       	ldi	r19, 0x00	; 0
    8420:	40 e2       	ldi	r20, 0x20	; 32
    8422:	51 e4       	ldi	r21, 0x41	; 65
    8424:	c5 01       	movw	r24, r10
    8426:	b4 01       	movw	r22, r8
    8428:	0e 94 39 e5 	call	0x1ca72	; 0x1ca72 <__divsf3>
    842c:	e9 cf       	rjmp	.-46     	; 0x8400 <p_etoa+0x134>
    842e:	08 87       	std	Y+8, r16	; 0x08
    8430:	19 87       	std	Y+9, r17	; 0x09
    8432:	85 e6       	ldi	r24, 0x65	; 101
    8434:	89 83       	std	Y+1, r24	; 0x01
    8436:	88 85       	ldd	r24, Y+8	; 0x08
    8438:	99 85       	ldd	r25, Y+9	; 0x09
    843a:	97 ff       	sbrs	r25, 7
    843c:	08 c0       	rjmp	.+16     	; 0x844e <p_etoa+0x182>
    843e:	91 95       	neg	r25
    8440:	81 95       	neg	r24
    8442:	91 09       	sbc	r25, r1
    8444:	99 87       	std	Y+9, r25	; 0x09
    8446:	88 87       	std	Y+8, r24	; 0x08
    8448:	8d e2       	ldi	r24, 0x2D	; 45
    844a:	90 e0       	ldi	r25, 0x00	; 0
    844c:	02 c0       	rjmp	.+4      	; 0x8452 <p_etoa+0x186>
    844e:	8b e2       	ldi	r24, 0x2B	; 43
    8450:	90 e0       	ldi	r25, 0x00	; 0
    8452:	6c 01       	movw	r12, r24
    8454:	82 e0       	ldi	r24, 0x02	; 2
    8456:	e8 2e       	mov	r14, r24
    8458:	f1 2c       	mov	r15, r1
    845a:	8e 01       	movw	r16, r28
    845c:	08 5f       	subi	r16, 0xF8	; 248
    845e:	1f 4f       	sbci	r17, 0xFF	; 255
    8460:	2a e0       	ldi	r18, 0x0A	; 10
    8462:	30 e0       	ldi	r19, 0x00	; 0
    8464:	42 e0       	ldi	r20, 0x02	; 2
    8466:	50 e0       	ldi	r21, 0x00	; 0
    8468:	65 e0       	ldi	r22, 0x05	; 5
    846a:	70 e0       	ldi	r23, 0x00	; 0
    846c:	ce 01       	movw	r24, r28
    846e:	02 96       	adiw	r24, 0x02	; 2
    8470:	17 dd       	rcall	.-1490   	; 0x7ea0 <bin2num>
    8472:	9c 01       	movw	r18, r24
    8474:	93 2d       	mov	r25, r3
    8476:	98 72       	andi	r25, 0x28	; 40
    8478:	90 32       	cpi	r25, 0x20	; 32
    847a:	61 f0       	breq	.+24     	; 0x8494 <p_etoa+0x1c8>
    847c:	c5 01       	movw	r24, r10
    847e:	b4 01       	movw	r22, r8
    8480:	0e 94 a1 e5 	call	0x1cb42	; 0x1cb42 <__fixsfsi>
    8484:	6b 01       	movw	r12, r22
    8486:	7c 01       	movw	r14, r24
    8488:	80 e3       	ldi	r24, 0x30	; 48
    848a:	8c 0d       	add	r24, r12
    848c:	9f dd       	rcall	.-1218   	; 0x7fcc <pch>
    848e:	21 10       	cpse	r2, r1
    8490:	20 c0       	rjmp	.+64     	; 0x84d2 <p_etoa+0x206>
    8492:	5e c0       	rjmp	.+188    	; 0x8550 <p_etoa+0x284>
    8494:	80 91 14 1a 	lds	r24, 0x1A14	; 0x801a14 <_pch+0x2>
    8498:	90 91 15 1a 	lds	r25, 0x1A15	; 0x801a15 <_pch+0x3>
    849c:	0c 85       	ldd	r16, Y+12	; 0x0c
    849e:	1d 85       	ldd	r17, Y+13	; 0x0d
    84a0:	08 1b       	sub	r16, r24
    84a2:	19 0b       	sbc	r17, r25
    84a4:	22 20       	and	r2, r2
    84a6:	41 f0       	breq	.+16     	; 0x84b8 <p_etoa+0x1ec>
    84a8:	61 14       	cp	r6, r1
    84aa:	71 04       	cpc	r7, r1
    84ac:	29 f0       	breq	.+10     	; 0x84b8 <p_etoa+0x1ec>
    84ae:	06 19       	sub	r16, r6
    84b0:	17 09       	sbc	r17, r7
    84b2:	06 50       	subi	r16, 0x06	; 6
    84b4:	11 09       	sbc	r17, r1
    84b6:	02 c0       	rjmp	.+4      	; 0x84bc <p_etoa+0x1f0>
    84b8:	05 50       	subi	r16, 0x05	; 5
    84ba:	11 09       	sbc	r17, r1
    84bc:	24 30       	cpi	r18, 0x04	; 4
    84be:	31 05       	cpc	r19, r1
    84c0:	14 f0       	brlt	.+4      	; 0x84c6 <p_etoa+0x1fa>
    84c2:	01 50       	subi	r16, 0x01	; 1
    84c4:	11 09       	sbc	r17, r1
    84c6:	10 16       	cp	r1, r16
    84c8:	11 06       	cpc	r1, r17
    84ca:	c4 f6       	brge	.-80     	; 0x847c <p_etoa+0x1b0>
    84cc:	80 e3       	ldi	r24, 0x30	; 48
    84ce:	7e dd       	rcall	.-1284   	; 0x7fcc <pch>
    84d0:	f8 cf       	rjmp	.-16     	; 0x84c2 <p_etoa+0x1f6>
    84d2:	61 14       	cp	r6, r1
    84d4:	71 04       	cpc	r7, r1
    84d6:	09 f4       	brne	.+2      	; 0x84da <p_etoa+0x20e>
    84d8:	3b c0       	rjmp	.+118    	; 0x8550 <p_etoa+0x284>
    84da:	b6 01       	movw	r22, r12
    84dc:	dd 0c       	add	r13, r13
    84de:	88 0b       	sbc	r24, r24
    84e0:	99 0b       	sbc	r25, r25
    84e2:	0e 94 d4 e5 	call	0x1cba8	; 0x1cba8 <__floatsisf>
    84e6:	9b 01       	movw	r18, r22
    84e8:	ac 01       	movw	r20, r24
    84ea:	c5 01       	movw	r24, r10
    84ec:	b4 01       	movw	r22, r8
    84ee:	0e 94 d0 e4 	call	0x1c9a0	; 0x1c9a0 <__subsf3>
    84f2:	20 e0       	ldi	r18, 0x00	; 0
    84f4:	30 e0       	ldi	r19, 0x00	; 0
    84f6:	40 e2       	ldi	r20, 0x20	; 32
    84f8:	51 e4       	ldi	r21, 0x41	; 65
    84fa:	0e 94 88 e6 	call	0x1cd10	; 0x1cd10 <__mulsf3>
    84fe:	6b 01       	movw	r12, r22
    8500:	7c 01       	movw	r14, r24
    8502:	8e e2       	ldi	r24, 0x2E	; 46
    8504:	63 dd       	rcall	.-1338   	; 0x7fcc <pch>
    8506:	c7 01       	movw	r24, r14
    8508:	b6 01       	movw	r22, r12
    850a:	0e 94 a1 e5 	call	0x1cb42	; 0x1cb42 <__fixsfsi>
    850e:	4b 01       	movw	r8, r22
    8510:	5c 01       	movw	r10, r24
    8512:	07 2e       	mov	r0, r23
    8514:	00 0c       	add	r0, r0
    8516:	88 0b       	sbc	r24, r24
    8518:	99 0b       	sbc	r25, r25
    851a:	0e 94 d4 e5 	call	0x1cba8	; 0x1cba8 <__floatsisf>
    851e:	9b 01       	movw	r18, r22
    8520:	ac 01       	movw	r20, r24
    8522:	c7 01       	movw	r24, r14
    8524:	b6 01       	movw	r22, r12
    8526:	0e 94 d0 e4 	call	0x1c9a0	; 0x1c9a0 <__subsf3>
    852a:	6b 01       	movw	r12, r22
    852c:	7c 01       	movw	r14, r24
    852e:	80 e3       	ldi	r24, 0x30	; 48
    8530:	88 0d       	add	r24, r8
    8532:	4c dd       	rcall	.-1384   	; 0x7fcc <pch>
    8534:	20 e0       	ldi	r18, 0x00	; 0
    8536:	30 e0       	ldi	r19, 0x00	; 0
    8538:	40 e2       	ldi	r20, 0x20	; 32
    853a:	51 e4       	ldi	r21, 0x41	; 65
    853c:	c7 01       	movw	r24, r14
    853e:	b6 01       	movw	r22, r12
    8540:	0e 94 88 e6 	call	0x1cd10	; 0x1cd10 <__mulsf3>
    8544:	6b 01       	movw	r12, r22
    8546:	7c 01       	movw	r14, r24
    8548:	81 e0       	ldi	r24, 0x01	; 1
    854a:	68 1a       	sub	r6, r24
    854c:	71 08       	sbc	r7, r1
    854e:	d9 f6       	brne	.-74     	; 0x8506 <p_etoa+0x23a>
    8550:	8e 01       	movw	r16, r28
    8552:	0f 5f       	subi	r16, 0xFF	; 255
    8554:	1f 4f       	sbci	r17, 0xFF	; 255
    8556:	f8 01       	movw	r30, r16
    8558:	81 91       	ld	r24, Z+
    855a:	8f 01       	movw	r16, r30
    855c:	88 23       	and	r24, r24
    855e:	11 f0       	breq	.+4      	; 0x8564 <p_etoa+0x298>
    8560:	35 dd       	rcall	.-1430   	; 0x7fcc <pch>
    8562:	f9 cf       	rjmp	.-14     	; 0x8556 <p_etoa+0x28a>
    8564:	33 dd       	rcall	.-1434   	; 0x7fcc <pch>
    8566:	ea 85       	ldd	r30, Y+10	; 0x0a
    8568:	fb 85       	ldd	r31, Y+11	; 0x0b
    856a:	01 90       	ld	r0, Z+
    856c:	00 20       	and	r0, r0
    856e:	e9 f7       	brne	.-6      	; 0x856a <p_etoa+0x29e>
    8570:	cf 01       	movw	r24, r30
    8572:	01 97       	sbiw	r24, 0x01	; 1
    8574:	2a 85       	ldd	r18, Y+10	; 0x0a
    8576:	3b 85       	ldd	r19, Y+11	; 0x0b
    8578:	82 1b       	sub	r24, r18
    857a:	93 0b       	sbc	r25, r19
    857c:	2d 96       	adiw	r28, 0x0d	; 13
    857e:	e2 e1       	ldi	r30, 0x12	; 18
    8580:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

00008584 <_puts_pad>:
    8584:	a0 e0       	ldi	r26, 0x00	; 0
    8586:	b0 e0       	ldi	r27, 0x00	; 0
    8588:	e8 ec       	ldi	r30, 0xC8	; 200
    858a:	f2 e4       	ldi	r31, 0x42	; 66
    858c:	0c 94 8c e4 	jmp	0x1c918	; 0x1c918 <__prologue_saves__+0xc>
    8590:	6c 01       	movw	r12, r24
    8592:	4b 01       	movw	r8, r22
    8594:	79 01       	movw	r14, r18
    8596:	24 17       	cp	r18, r20
    8598:	35 07       	cpc	r19, r21
    859a:	24 f4       	brge	.+8      	; 0x85a4 <_puts_pad+0x20>
    859c:	ea 01       	movw	r28, r20
    859e:	c2 1b       	sub	r28, r18
    85a0:	d3 0b       	sbc	r29, r19
    85a2:	02 c0       	rjmp	.+4      	; 0x85a8 <_puts_pad+0x24>
    85a4:	c0 e0       	ldi	r28, 0x00	; 0
    85a6:	d0 e0       	ldi	r29, 0x00	; 0
    85a8:	01 15       	cp	r16, r1
    85aa:	11 05       	cpc	r17, r1
    85ac:	49 f4       	brne	.+18     	; 0x85c0 <_puts_pad+0x3c>
    85ae:	21 97       	sbiw	r28, 0x01	; 1
    85b0:	38 f0       	brcs	.+14     	; 0x85c0 <_puts_pad+0x3c>
    85b2:	d6 01       	movw	r26, r12
    85b4:	ed 91       	ld	r30, X+
    85b6:	fc 91       	ld	r31, X
    85b8:	60 e2       	ldi	r22, 0x20	; 32
    85ba:	c6 01       	movw	r24, r12
    85bc:	09 95       	icall
    85be:	f7 cf       	rjmp	.-18     	; 0x85ae <_puts_pad+0x2a>
    85c0:	54 01       	movw	r10, r8
    85c2:	f5 01       	movw	r30, r10
    85c4:	61 91       	ld	r22, Z+
    85c6:	5f 01       	movw	r10, r30
    85c8:	66 23       	and	r22, r22
    85ca:	61 f0       	breq	.+24     	; 0x85e4 <_puts_pad+0x60>
    85cc:	e1 14       	cp	r14, r1
    85ce:	f1 04       	cpc	r15, r1
    85d0:	49 f0       	breq	.+18     	; 0x85e4 <_puts_pad+0x60>
    85d2:	d6 01       	movw	r26, r12
    85d4:	ed 91       	ld	r30, X+
    85d6:	fc 91       	ld	r31, X
    85d8:	c6 01       	movw	r24, r12
    85da:	09 95       	icall
    85dc:	b1 e0       	ldi	r27, 0x01	; 1
    85de:	eb 1a       	sub	r14, r27
    85e0:	f1 08       	sbc	r15, r1
    85e2:	ef cf       	rjmp	.-34     	; 0x85c2 <_puts_pad+0x3e>
    85e4:	01 15       	cp	r16, r1
    85e6:	11 05       	cpc	r17, r1
    85e8:	51 f0       	breq	.+20     	; 0x85fe <_puts_pad+0x7a>
    85ea:	20 97       	sbiw	r28, 0x00	; 0
    85ec:	41 f0       	breq	.+16     	; 0x85fe <_puts_pad+0x7a>
    85ee:	d6 01       	movw	r26, r12
    85f0:	ed 91       	ld	r30, X+
    85f2:	fc 91       	ld	r31, X
    85f4:	60 e2       	ldi	r22, 0x20	; 32
    85f6:	c6 01       	movw	r24, r12
    85f8:	09 95       	icall
    85fa:	21 97       	sbiw	r28, 0x01	; 1
    85fc:	f6 cf       	rjmp	.-20     	; 0x85ea <_puts_pad+0x66>
    85fe:	cd b7       	in	r28, 0x3d	; 61
    8600:	de b7       	in	r29, 0x3e	; 62
    8602:	ec e0       	ldi	r30, 0x0C	; 12
    8604:	0c 94 a8 e4 	jmp	0x1c950	; 0x1c950 <__epilogue_restores__+0xc>

00008608 <_printf_fn>:
    8608:	ab e6       	ldi	r26, 0x6B	; 107
    860a:	b0 e0       	ldi	r27, 0x00	; 0
    860c:	ea e0       	ldi	r30, 0x0A	; 10
    860e:	f3 e4       	ldi	r31, 0x43	; 67
    8610:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
    8614:	a5 96       	adiw	r28, 0x25	; 37
    8616:	9f af       	std	Y+63, r25	; 0x3f
    8618:	8e af       	std	Y+62, r24	; 0x3e
    861a:	a5 97       	sbiw	r28, 0x25	; 37
    861c:	6a 01       	movw	r12, r20
    861e:	e6 2e       	mov	r14, r22
    8620:	19 01       	movw	r2, r18
    8622:	a9 96       	adiw	r28, 0x29	; 41
    8624:	1c ae       	std	Y+60, r1	; 0x3c
    8626:	1d ae       	std	Y+61, r1	; 0x3d
    8628:	1e ae       	std	Y+62, r1	; 0x3e
    862a:	1f ae       	std	Y+63, r1	; 0x3f
    862c:	a9 97       	sbiw	r28, 0x29	; 41
    862e:	9e 01       	movw	r18, r28
    8630:	2f 5a       	subi	r18, 0xAF	; 175
    8632:	3f 4f       	sbci	r19, 0xFF	; 255
    8634:	67 96       	adiw	r28, 0x17	; 23
    8636:	3f af       	std	Y+63, r19	; 0x3f
    8638:	2e af       	std	Y+62, r18	; 0x3e
    863a:	67 97       	sbiw	r28, 0x17	; 23
    863c:	ae 01       	movw	r20, r28
    863e:	4d 5b       	subi	r20, 0xBD	; 189
    8640:	5f 4f       	sbci	r21, 0xFF	; 255
    8642:	69 96       	adiw	r28, 0x19	; 25
    8644:	5f af       	std	Y+63, r21	; 0x3f
    8646:	4e af       	std	Y+62, r20	; 0x3e
    8648:	69 97       	sbiw	r28, 0x19	; 25
    864a:	ce 01       	movw	r24, r28
    864c:	85 5b       	subi	r24, 0xB5	; 181
    864e:	9f 4f       	sbci	r25, 0xFF	; 255
    8650:	6b 96       	adiw	r28, 0x1b	; 27
    8652:	9f af       	std	Y+63, r25	; 0x3f
    8654:	8e af       	std	Y+62, r24	; 0x3e
    8656:	6b 97       	sbiw	r28, 0x1b	; 27
    8658:	de 01       	movw	r26, r28
    865a:	ad 5a       	subi	r26, 0xAD	; 173
    865c:	bf 4f       	sbci	r27, 0xFF	; 255
    865e:	6d 96       	adiw	r28, 0x1d	; 29
    8660:	bf af       	std	Y+63, r27	; 0x3f
    8662:	ae af       	std	Y+62, r26	; 0x3e
    8664:	6d 97       	sbiw	r28, 0x1d	; 29
    8666:	f6 01       	movw	r30, r12
    8668:	5e 2d       	mov	r21, r14
    866a:	0e 94 bd e4 	call	0x1c97a	; 0x1c97a <__xload_1>
    866e:	66 23       	and	r22, r22
    8670:	09 f4       	brne	.+2      	; 0x8674 <_printf_fn+0x6c>
    8672:	d7 c3       	rjmp	.+1966   	; 0x8e22 <_printf_fn+0x81a>
    8674:	ae 2d       	mov	r26, r14
    8676:	c6 01       	movw	r24, r12
    8678:	01 96       	adiw	r24, 0x01	; 1
    867a:	a1 1d       	adc	r26, r1
    867c:	3c 01       	movw	r6, r24
    867e:	8a 2e       	mov	r8, r26
    8680:	65 32       	cpi	r22, 0x25	; 37
    8682:	51 f0       	breq	.+20     	; 0x8698 <_printf_fn+0x90>
    8684:	a5 96       	adiw	r28, 0x25	; 37
    8686:	ae ad       	ldd	r26, Y+62	; 0x3e
    8688:	bf ad       	ldd	r27, Y+63	; 0x3f
    868a:	a5 97       	sbiw	r28, 0x25	; 37
    868c:	ed 91       	ld	r30, X+
    868e:	fc 91       	ld	r31, X
    8690:	11 97       	sbiw	r26, 0x01	; 1
    8692:	cd 01       	movw	r24, r26
    8694:	09 95       	icall
    8696:	91 c3       	rjmp	.+1826   	; 0x8dba <_printf_fn+0x7b2>
    8698:	91 2c       	mov	r9, r1
    869a:	f3 01       	movw	r30, r6
    869c:	58 2d       	mov	r21, r8
    869e:	0e 94 bd e4 	call	0x1c97a	; 0x1c97a <__xload_1>
    86a2:	63 32       	cpi	r22, 0x23	; 35
    86a4:	19 f4       	brne	.+6      	; 0x86ac <_printf_fn+0xa4>
    86a6:	68 94       	set
    86a8:	97 f8       	bld	r9, 7
    86aa:	04 c0       	rjmp	.+8      	; 0x86b4 <_printf_fn+0xac>
    86ac:	6b 32       	cpi	r22, 0x2B	; 43
    86ae:	39 f4       	brne	.+14     	; 0x86be <_printf_fn+0xb6>
    86b0:	68 94       	set
    86b2:	92 f8       	bld	r9, 2
    86b4:	bf ef       	ldi	r27, 0xFF	; 255
    86b6:	6b 1a       	sub	r6, r27
    86b8:	7b 0a       	sbc	r7, r27
    86ba:	8b 0a       	sbc	r8, r27
    86bc:	ee cf       	rjmp	.-36     	; 0x869a <_printf_fn+0x92>
    86be:	6d 32       	cpi	r22, 0x2D	; 45
    86c0:	a9 f4       	brne	.+42     	; 0x86ec <_printf_fn+0xe4>
    86c2:	93 fc       	sbrc	r9, 3
    86c4:	05 c0       	rjmp	.+10     	; 0x86d0 <_printf_fn+0xc8>
    86c6:	6d 32       	cpi	r22, 0x2D	; 45
    86c8:	19 f4       	brne	.+6      	; 0x86d0 <_printf_fn+0xc8>
    86ca:	68 94       	set
    86cc:	93 f8       	bld	r9, 3
    86ce:	f2 cf       	rjmp	.-28     	; 0x86b4 <_printf_fn+0xac>
    86d0:	94 fc       	sbrc	r9, 4
    86d2:	05 c0       	rjmp	.+10     	; 0x86de <_printf_fn+0xd6>
    86d4:	60 32       	cpi	r22, 0x20	; 32
    86d6:	19 f4       	brne	.+6      	; 0x86de <_printf_fn+0xd6>
    86d8:	68 94       	set
    86da:	94 f8       	bld	r9, 4
    86dc:	eb cf       	rjmp	.-42     	; 0x86b4 <_printf_fn+0xac>
    86de:	95 fc       	sbrc	r9, 5
    86e0:	e9 cf       	rjmp	.-46     	; 0x86b4 <_printf_fn+0xac>
    86e2:	60 33       	cpi	r22, 0x30	; 48
    86e4:	39 f7       	brne	.-50     	; 0x86b4 <_printf_fn+0xac>
    86e6:	68 94       	set
    86e8:	95 f8       	bld	r9, 5
    86ea:	e4 cf       	rjmp	.-56     	; 0x86b4 <_printf_fn+0xac>
    86ec:	86 2f       	mov	r24, r22
    86ee:	8f 7e       	andi	r24, 0xEF	; 239
    86f0:	80 32       	cpi	r24, 0x20	; 32
    86f2:	39 f3       	breq	.-50     	; 0x86c2 <_printf_fn+0xba>
    86f4:	70 e0       	ldi	r23, 0x00	; 0
    86f6:	60 53       	subi	r22, 0x30	; 48
    86f8:	71 09       	sbc	r23, r1
    86fa:	41 2c       	mov	r4, r1
    86fc:	51 2c       	mov	r5, r1
    86fe:	6a 30       	cpi	r22, 0x0A	; 10
    8700:	71 05       	cpc	r23, r1
    8702:	e0 f4       	brcc	.+56     	; 0x873c <_printf_fn+0x134>
    8704:	2a e0       	ldi	r18, 0x0A	; 10
    8706:	f3 01       	movw	r30, r6
    8708:	58 2d       	mov	r21, r8
    870a:	0e 94 bd e4 	call	0x1c97a	; 0x1c97a <__xload_1>
    870e:	70 e0       	ldi	r23, 0x00	; 0
    8710:	cb 01       	movw	r24, r22
    8712:	c0 97       	sbiw	r24, 0x30	; 48
    8714:	0a 97       	sbiw	r24, 0x0a	; 10
    8716:	80 f4       	brcc	.+32     	; 0x8738 <_printf_fn+0x130>
    8718:	ef ef       	ldi	r30, 0xFF	; 255
    871a:	6e 1a       	sub	r6, r30
    871c:	7e 0a       	sbc	r7, r30
    871e:	8e 0a       	sbc	r8, r30
    8720:	24 9d       	mul	r18, r4
    8722:	c0 01       	movw	r24, r0
    8724:	25 9d       	mul	r18, r5
    8726:	90 0d       	add	r25, r0
    8728:	11 24       	eor	r1, r1
    872a:	68 0f       	add	r22, r24
    872c:	79 1f       	adc	r23, r25
    872e:	2b 01       	movw	r4, r22
    8730:	f0 e3       	ldi	r31, 0x30	; 48
    8732:	4f 1a       	sub	r4, r31
    8734:	51 08       	sbc	r5, r1
    8736:	e7 cf       	rjmp	.-50     	; 0x8706 <_printf_fn+0xfe>
    8738:	68 94       	set
    873a:	90 f8       	bld	r9, 0
    873c:	f3 01       	movw	r30, r6
    873e:	58 2d       	mov	r21, r8
    8740:	0e 94 bd e4 	call	0x1c97a	; 0x1c97a <__xload_1>
    8744:	6e 32       	cpi	r22, 0x2E	; 46
    8746:	59 f5       	brne	.+86     	; 0x879e <_printf_fn+0x196>
    8748:	2f ef       	ldi	r18, 0xFF	; 255
    874a:	62 1a       	sub	r6, r18
    874c:	72 0a       	sbc	r7, r18
    874e:	82 0a       	sbc	r8, r18
    8750:	a1 96       	adiw	r28, 0x21	; 33
    8752:	1f ae       	std	Y+63, r1	; 0x3f
    8754:	1e ae       	std	Y+62, r1	; 0x3e
    8756:	a1 97       	sbiw	r28, 0x21	; 33
    8758:	2a e0       	ldi	r18, 0x0A	; 10
    875a:	f3 01       	movw	r30, r6
    875c:	58 2d       	mov	r21, r8
    875e:	0e 94 bd e4 	call	0x1c97a	; 0x1c97a <__xload_1>
    8762:	70 e0       	ldi	r23, 0x00	; 0
    8764:	cb 01       	movw	r24, r22
    8766:	c0 97       	sbiw	r24, 0x30	; 48
    8768:	0a 97       	sbiw	r24, 0x0a	; 10
    876a:	b0 f4       	brcc	.+44     	; 0x8798 <_printf_fn+0x190>
    876c:	3f ef       	ldi	r19, 0xFF	; 255
    876e:	63 1a       	sub	r6, r19
    8770:	73 0a       	sbc	r7, r19
    8772:	83 0a       	sbc	r8, r19
    8774:	a1 96       	adiw	r28, 0x21	; 33
    8776:	4e ad       	ldd	r20, Y+62	; 0x3e
    8778:	5f ad       	ldd	r21, Y+63	; 0x3f
    877a:	a1 97       	sbiw	r28, 0x21	; 33
    877c:	24 9f       	mul	r18, r20
    877e:	c0 01       	movw	r24, r0
    8780:	25 9f       	mul	r18, r21
    8782:	90 0d       	add	r25, r0
    8784:	11 24       	eor	r1, r1
    8786:	68 0f       	add	r22, r24
    8788:	79 1f       	adc	r23, r25
    878a:	cb 01       	movw	r24, r22
    878c:	c0 97       	sbiw	r24, 0x30	; 48
    878e:	a1 96       	adiw	r28, 0x21	; 33
    8790:	9f af       	std	Y+63, r25	; 0x3f
    8792:	8e af       	std	Y+62, r24	; 0x3e
    8794:	a1 97       	sbiw	r28, 0x21	; 33
    8796:	e1 cf       	rjmp	.-62     	; 0x875a <_printf_fn+0x152>
    8798:	68 94       	set
    879a:	91 f8       	bld	r9, 1
    879c:	04 c0       	rjmp	.+8      	; 0x87a6 <_printf_fn+0x19e>
    879e:	a1 96       	adiw	r28, 0x21	; 33
    87a0:	1f ae       	std	Y+63, r1	; 0x3f
    87a2:	1e ae       	std	Y+62, r1	; 0x3e
    87a4:	a1 97       	sbiw	r28, 0x21	; 33
    87a6:	f3 01       	movw	r30, r6
    87a8:	58 2d       	mov	r21, r8
    87aa:	0e 94 bd e4 	call	0x1c97a	; 0x1c97a <__xload_1>
    87ae:	69 34       	cpi	r22, 0x49	; 73
    87b0:	09 f0       	breq	.+2      	; 0x87b4 <_printf_fn+0x1ac>
    87b2:	45 c0       	rjmp	.+138    	; 0x883e <_printf_fn+0x236>
    87b4:	9f ef       	ldi	r25, 0xFF	; 255
    87b6:	69 1a       	sub	r6, r25
    87b8:	79 0a       	sbc	r7, r25
    87ba:	89 0a       	sbc	r8, r25
    87bc:	6f 96       	adiw	r28, 0x1f	; 31
    87be:	1f ae       	std	Y+63, r1	; 0x3f
    87c0:	1e ae       	std	Y+62, r1	; 0x3e
    87c2:	6f 97       	sbiw	r28, 0x1f	; 31
    87c4:	2a e0       	ldi	r18, 0x0A	; 10
    87c6:	f3 01       	movw	r30, r6
    87c8:	58 2d       	mov	r21, r8
    87ca:	0e 94 bd e4 	call	0x1c97a	; 0x1c97a <__xload_1>
    87ce:	70 e0       	ldi	r23, 0x00	; 0
    87d0:	cb 01       	movw	r24, r22
    87d2:	c0 97       	sbiw	r24, 0x30	; 48
    87d4:	0a 97       	sbiw	r24, 0x0a	; 10
    87d6:	b8 f4       	brcc	.+46     	; 0x8806 <_printf_fn+0x1fe>
    87d8:	af ef       	ldi	r26, 0xFF	; 255
    87da:	6a 1a       	sub	r6, r26
    87dc:	7a 0a       	sbc	r7, r26
    87de:	8a 0a       	sbc	r8, r26
    87e0:	6f 96       	adiw	r28, 0x1f	; 31
    87e2:	ee ad       	ldd	r30, Y+62	; 0x3e
    87e4:	ff ad       	ldd	r31, Y+63	; 0x3f
    87e6:	6f 97       	sbiw	r28, 0x1f	; 31
    87e8:	2e 9f       	mul	r18, r30
    87ea:	c0 01       	movw	r24, r0
    87ec:	2f 9f       	mul	r18, r31
    87ee:	90 0d       	add	r25, r0
    87f0:	11 24       	eor	r1, r1
    87f2:	68 0f       	add	r22, r24
    87f4:	79 1f       	adc	r23, r25
    87f6:	ab 01       	movw	r20, r22
    87f8:	40 53       	subi	r20, 0x30	; 48
    87fa:	51 09       	sbc	r21, r1
    87fc:	6f 96       	adiw	r28, 0x1f	; 31
    87fe:	5f af       	std	Y+63, r21	; 0x3f
    8800:	4e af       	std	Y+62, r20	; 0x3e
    8802:	6f 97       	sbiw	r28, 0x1f	; 31
    8804:	e0 cf       	rjmp	.-64     	; 0x87c6 <_printf_fn+0x1be>
    8806:	6f 96       	adiw	r28, 0x1f	; 31
    8808:	8e ad       	ldd	r24, Y+62	; 0x3e
    880a:	9f ad       	ldd	r25, Y+63	; 0x3f
    880c:	6f 97       	sbiw	r28, 0x1f	; 31
    880e:	00 97       	sbiw	r24, 0x00	; 0
    8810:	09 f4       	brne	.+2      	; 0x8814 <_printf_fn+0x20c>
    8812:	4f c0       	rjmp	.+158    	; 0x88b2 <_printf_fn+0x2aa>
    8814:	87 70       	andi	r24, 0x07	; 7
    8816:	99 27       	eor	r25, r25
    8818:	89 2b       	or	r24, r25
    881a:	09 f0       	breq	.+2      	; 0x881e <_printf_fn+0x216>
    881c:	46 c0       	rjmp	.+140    	; 0x88aa <_printf_fn+0x2a2>
    881e:	6f 96       	adiw	r28, 0x1f	; 31
    8820:	ae ad       	ldd	r26, Y+62	; 0x3e
    8822:	bf ad       	ldd	r27, Y+63	; 0x3f
    8824:	6f 97       	sbiw	r28, 0x1f	; 31
    8826:	83 e0       	ldi	r24, 0x03	; 3
    8828:	b5 95       	asr	r27
    882a:	a7 95       	ror	r26
    882c:	8a 95       	dec	r24
    882e:	e1 f7       	brne	.-8      	; 0x8828 <_printf_fn+0x220>
    8830:	6f 96       	adiw	r28, 0x1f	; 31
    8832:	bf af       	std	Y+63, r27	; 0x3f
    8834:	ae af       	std	Y+62, r26	; 0x3e
    8836:	6f 97       	sbiw	r28, 0x1f	; 31
    8838:	ab 2b       	or	r26, r27
    883a:	d9 f1       	breq	.+118    	; 0x88b2 <_printf_fn+0x2aa>
    883c:	27 c0       	rjmp	.+78     	; 0x888c <_printf_fn+0x284>
    883e:	68 36       	cpi	r22, 0x68	; 104
    8840:	29 f4       	brne	.+10     	; 0x884c <_printf_fn+0x244>
    8842:	bf ef       	ldi	r27, 0xFF	; 255
    8844:	6b 1a       	sub	r6, r27
    8846:	7b 0a       	sbc	r7, r27
    8848:	8b 0a       	sbc	r8, r27
    884a:	ba c2       	rjmp	.+1396   	; 0x8dc0 <_printf_fn+0x7b8>
    884c:	6c 36       	cpi	r22, 0x6C	; 108
    884e:	09 f0       	breq	.+2      	; 0x8852 <_printf_fn+0x24a>
    8850:	b7 c2       	rjmp	.+1390   	; 0x8dc0 <_printf_fn+0x7b8>
    8852:	a8 2d       	mov	r26, r8
    8854:	c3 01       	movw	r24, r6
    8856:	01 96       	adiw	r24, 0x01	; 1
    8858:	a1 1d       	adc	r26, r1
    885a:	fc 01       	movw	r30, r24
    885c:	5a 2f       	mov	r21, r26
    885e:	0e 94 bd e4 	call	0x1c97a	; 0x1c97a <__xload_1>
    8862:	6c 36       	cpi	r22, 0x6C	; 108
    8864:	49 f0       	breq	.+18     	; 0x8878 <_printf_fn+0x270>
    8866:	3c 01       	movw	r6, r24
    8868:	8a 2e       	mov	r8, r26
    886a:	24 e0       	ldi	r18, 0x04	; 4
    886c:	30 e0       	ldi	r19, 0x00	; 0
    886e:	6f 96       	adiw	r28, 0x1f	; 31
    8870:	3f af       	std	Y+63, r19	; 0x3f
    8872:	2e af       	std	Y+62, r18	; 0x3e
    8874:	6f 97       	sbiw	r28, 0x1f	; 31
    8876:	0a c0       	rjmp	.+20     	; 0x888c <_printf_fn+0x284>
    8878:	32 e0       	ldi	r19, 0x02	; 2
    887a:	63 0e       	add	r6, r19
    887c:	71 1c       	adc	r7, r1
    887e:	81 1c       	adc	r8, r1
    8880:	48 e0       	ldi	r20, 0x08	; 8
    8882:	50 e0       	ldi	r21, 0x00	; 0
    8884:	6f 96       	adiw	r28, 0x1f	; 31
    8886:	5f af       	std	Y+63, r21	; 0x3f
    8888:	4e af       	std	Y+62, r20	; 0x3e
    888a:	6f 97       	sbiw	r28, 0x1f	; 31
    888c:	f3 01       	movw	r30, r6
    888e:	58 2d       	mov	r21, r8
    8890:	0e 94 bd e4 	call	0x1c97a	; 0x1c97a <__xload_1>
    8894:	86 2f       	mov	r24, r22
    8896:	90 e0       	ldi	r25, 0x00	; 0
    8898:	a3 96       	adiw	r28, 0x23	; 35
    889a:	9f af       	std	Y+63, r25	; 0x3f
    889c:	8e af       	std	Y+62, r24	; 0x3e
    889e:	a3 97       	sbiw	r28, 0x23	; 35
    88a0:	84 36       	cpi	r24, 0x64	; 100
    88a2:	91 05       	cpc	r25, r1
    88a4:	09 f4       	brne	.+2      	; 0x88a8 <_printf_fn+0x2a0>
    88a6:	93 c2       	rjmp	.+1318   	; 0x8dce <_printf_fn+0x7c6>
    88a8:	08 c0       	rjmp	.+16     	; 0x88ba <_printf_fn+0x2b2>
    88aa:	6f 96       	adiw	r28, 0x1f	; 31
    88ac:	1f ae       	std	Y+63, r1	; 0x3f
    88ae:	1e ae       	std	Y+62, r1	; 0x3e
    88b0:	6f 97       	sbiw	r28, 0x1f	; 31
    88b2:	a3 96       	adiw	r28, 0x23	; 35
    88b4:	1f ae       	std	Y+63, r1	; 0x3f
    88b6:	1e ae       	std	Y+62, r1	; 0x3e
    88b8:	a3 97       	sbiw	r28, 0x23	; 35
    88ba:	31 e0       	ldi	r19, 0x01	; 1
    88bc:	20 e0       	ldi	r18, 0x00	; 0
    88be:	a3 96       	adiw	r28, 0x23	; 35
    88c0:	ae ad       	ldd	r26, Y+62	; 0x3e
    88c2:	bf ad       	ldd	r27, Y+63	; 0x3f
    88c4:	a3 97       	sbiw	r28, 0x23	; 35
    88c6:	a4 34       	cpi	r26, 0x44	; 68
    88c8:	b1 05       	cpc	r27, r1
    88ca:	09 f0       	breq	.+2      	; 0x88ce <_printf_fn+0x2c6>
    88cc:	30 e0       	ldi	r19, 0x00	; 0
    88ce:	83 2f       	mov	r24, r19
    88d0:	92 2f       	mov	r25, r18
    88d2:	a3 96       	adiw	r28, 0x23	; 35
    88d4:	ee ad       	ldd	r30, Y+62	; 0x3e
    88d6:	ff ad       	ldd	r31, Y+63	; 0x3f
    88d8:	a3 97       	sbiw	r28, 0x23	; 35
    88da:	e2 54       	subi	r30, 0x42	; 66
    88dc:	f1 09       	sbc	r31, r1
    88de:	e7 33       	cpi	r30, 0x37	; 55
    88e0:	f1 05       	cpc	r31, r1
    88e2:	08 f0       	brcs	.+2      	; 0x88e6 <_printf_fn+0x2de>
    88e4:	5d c1       	rjmp	.+698    	; 0x8ba0 <_printf_fn+0x598>
    88e6:	ea 5b       	subi	r30, 0xBA	; 186
    88e8:	ff 4f       	sbci	r31, 0xFF	; 255
    88ea:	0c 94 42 e4 	jmp	0x1c884	; 0x1c884 <__tablejump2__>
    88ee:	e2 e0       	ldi	r30, 0x02	; 2
    88f0:	f0 e0       	ldi	r31, 0x00	; 0
    88f2:	6f 96       	adiw	r28, 0x1f	; 31
    88f4:	ff af       	std	Y+63, r31	; 0x3f
    88f6:	ee af       	std	Y+62, r30	; 0x3e
    88f8:	6f 97       	sbiw	r28, 0x1f	; 31
    88fa:	29 2d       	mov	r18, r9
    88fc:	28 72       	andi	r18, 0x28	; 40
    88fe:	28 32       	cpi	r18, 0x28	; 40
    8900:	11 f4       	brne	.+4      	; 0x8906 <_printf_fn+0x2fe>
    8902:	e8 94       	clt
    8904:	95 f8       	bld	r9, 5
    8906:	29 2d       	mov	r18, r9
    8908:	22 72       	andi	r18, 0x22	; 34
    890a:	22 32       	cpi	r18, 0x22	; 34
    890c:	11 f4       	brne	.+4      	; 0x8912 <_printf_fn+0x30a>
    890e:	e8 94       	clt
    8910:	95 f8       	bld	r9, 5
    8912:	29 2d       	mov	r18, r9
    8914:	21 72       	andi	r18, 0x21	; 33
    8916:	21 32       	cpi	r18, 0x21	; 33
    8918:	59 f4       	brne	.+22     	; 0x8930 <_printf_fn+0x328>
    891a:	a1 96       	adiw	r28, 0x21	; 33
    891c:	2e ad       	ldd	r18, Y+62	; 0x3e
    891e:	3f ad       	ldd	r19, Y+63	; 0x3f
    8920:	a1 97       	sbiw	r28, 0x21	; 33
    8922:	24 15       	cp	r18, r4
    8924:	35 05       	cpc	r19, r5
    8926:	24 f4       	brge	.+8      	; 0x8930 <_printf_fn+0x328>
    8928:	a1 96       	adiw	r28, 0x21	; 33
    892a:	5f ae       	std	Y+63, r5	; 0x3f
    892c:	4e ae       	std	Y+62, r4	; 0x3e
    892e:	a1 97       	sbiw	r28, 0x21	; 33
    8930:	29 2d       	mov	r18, r9
    8932:	23 72       	andi	r18, 0x23	; 35
    8934:	23 32       	cpi	r18, 0x23	; 35
    8936:	59 f4       	brne	.+22     	; 0x894e <_printf_fn+0x346>
    8938:	a1 96       	adiw	r28, 0x21	; 33
    893a:	4e ad       	ldd	r20, Y+62	; 0x3e
    893c:	5f ad       	ldd	r21, Y+63	; 0x3f
    893e:	a1 97       	sbiw	r28, 0x21	; 33
    8940:	44 15       	cp	r20, r4
    8942:	55 05       	cpc	r21, r5
    8944:	24 f4       	brge	.+8      	; 0x894e <_printf_fn+0x346>
    8946:	a1 96       	adiw	r28, 0x21	; 33
    8948:	5f ae       	std	Y+63, r5	; 0x3f
    894a:	4e ae       	std	Y+62, r4	; 0x3e
    894c:	a1 97       	sbiw	r28, 0x21	; 33
    894e:	e8 94       	clt
    8950:	94 f8       	bld	r9, 4
    8952:	e8 94       	clt
    8954:	92 f8       	bld	r9, 2
    8956:	e8 94       	clt
    8958:	96 f8       	bld	r9, 6
    895a:	6f 96       	adiw	r28, 0x1f	; 31
    895c:	ae ad       	ldd	r26, Y+62	; 0x3e
    895e:	bf ad       	ldd	r27, Y+63	; 0x3f
    8960:	6f 97       	sbiw	r28, 0x1f	; 31
    8962:	12 97       	sbiw	r26, 0x02	; 2
    8964:	29 f5       	brne	.+74     	; 0x89b0 <_printf_fn+0x3a8>
    8966:	51 01       	movw	r10, r2
    8968:	b2 e0       	ldi	r27, 0x02	; 2
    896a:	ab 0e       	add	r10, r27
    896c:	b1 1c       	adc	r11, r1
    896e:	f1 01       	movw	r30, r2
    8970:	80 81       	ld	r24, Z
    8972:	91 81       	ldd	r25, Z+1	; 0x01
    8974:	65 96       	adiw	r28, 0x15	; 21
    8976:	9f af       	std	Y+63, r25	; 0x3f
    8978:	8e af       	std	Y+62, r24	; 0x3e
    897a:	65 97       	sbiw	r28, 0x15	; 21
    897c:	a3 96       	adiw	r28, 0x23	; 35
    897e:	2e ad       	ldd	r18, Y+62	; 0x3e
    8980:	3f ad       	ldd	r19, Y+63	; 0x3f
    8982:	a3 97       	sbiw	r28, 0x23	; 35
    8984:	24 34       	cpi	r18, 0x44	; 68
    8986:	31 05       	cpc	r19, r1
    8988:	09 f0       	breq	.+2      	; 0x898c <_printf_fn+0x384>
    898a:	b8 c0       	rjmp	.+368    	; 0x8afc <_printf_fn+0x4f4>
    898c:	97 ff       	sbrs	r25, 7
    898e:	b0 c0       	rjmp	.+352    	; 0x8af0 <_printf_fn+0x4e8>
    8990:	68 94       	set
    8992:	96 f8       	bld	r9, 6
    8994:	91 95       	neg	r25
    8996:	81 95       	neg	r24
    8998:	91 09       	sbc	r25, r1
    899a:	65 96       	adiw	r28, 0x15	; 21
    899c:	9f af       	std	Y+63, r25	; 0x3f
    899e:	8e af       	std	Y+62, r24	; 0x3e
    89a0:	65 97       	sbiw	r28, 0x15	; 21
    89a2:	42 e0       	ldi	r20, 0x02	; 2
    89a4:	50 e0       	ldi	r21, 0x00	; 0
    89a6:	6f 96       	adiw	r28, 0x1f	; 31
    89a8:	5f af       	std	Y+63, r21	; 0x3f
    89aa:	4e af       	std	Y+62, r20	; 0x3e
    89ac:	6f 97       	sbiw	r28, 0x1f	; 31
    89ae:	a6 c0       	rjmp	.+332    	; 0x8afc <_printf_fn+0x4f4>
    89b0:	6f 96       	adiw	r28, 0x1f	; 31
    89b2:	ae ad       	ldd	r26, Y+62	; 0x3e
    89b4:	bf ad       	ldd	r27, Y+63	; 0x3f
    89b6:	6f 97       	sbiw	r28, 0x1f	; 31
    89b8:	14 97       	sbiw	r26, 0x04	; 4
    89ba:	59 f5       	brne	.+86     	; 0x8a12 <_printf_fn+0x40a>
    89bc:	51 01       	movw	r10, r2
    89be:	b4 e0       	ldi	r27, 0x04	; 4
    89c0:	ab 0e       	add	r10, r27
    89c2:	b1 1c       	adc	r11, r1
    89c4:	f1 01       	movw	r30, r2
    89c6:	80 81       	ld	r24, Z
    89c8:	91 81       	ldd	r25, Z+1	; 0x01
    89ca:	a2 81       	ldd	r26, Z+2	; 0x02
    89cc:	b3 81       	ldd	r27, Z+3	; 0x03
    89ce:	2f 96       	adiw	r28, 0x0f	; 15
    89d0:	8c af       	std	Y+60, r24	; 0x3c
    89d2:	9d af       	std	Y+61, r25	; 0x3d
    89d4:	ae af       	std	Y+62, r26	; 0x3e
    89d6:	bf af       	std	Y+63, r27	; 0x3f
    89d8:	2f 97       	sbiw	r28, 0x0f	; 15
    89da:	a3 96       	adiw	r28, 0x23	; 35
    89dc:	2e ad       	ldd	r18, Y+62	; 0x3e
    89de:	3f ad       	ldd	r19, Y+63	; 0x3f
    89e0:	a3 97       	sbiw	r28, 0x23	; 35
    89e2:	24 34       	cpi	r18, 0x44	; 68
    89e4:	31 05       	cpc	r19, r1
    89e6:	09 f0       	breq	.+2      	; 0x89ea <_printf_fn+0x3e2>
    89e8:	96 c0       	rjmp	.+300    	; 0x8b16 <_printf_fn+0x50e>
    89ea:	b7 ff       	sbrs	r27, 7
    89ec:	8e c0       	rjmp	.+284    	; 0x8b0a <_printf_fn+0x502>
    89ee:	68 94       	set
    89f0:	96 f8       	bld	r9, 6
    89f2:	b0 95       	com	r27
    89f4:	a0 95       	com	r26
    89f6:	90 95       	com	r25
    89f8:	81 95       	neg	r24
    89fa:	9f 4f       	sbci	r25, 0xFF	; 255
    89fc:	af 4f       	sbci	r26, 0xFF	; 255
    89fe:	bf 4f       	sbci	r27, 0xFF	; 255
    8a00:	2f 96       	adiw	r28, 0x0f	; 15
    8a02:	8c af       	std	Y+60, r24	; 0x3c
    8a04:	9d af       	std	Y+61, r25	; 0x3d
    8a06:	ae af       	std	Y+62, r26	; 0x3e
    8a08:	bf af       	std	Y+63, r27	; 0x3f
    8a0a:	2f 97       	sbiw	r28, 0x0f	; 15
    8a0c:	7e c0       	rjmp	.+252    	; 0x8b0a <_printf_fn+0x502>
    8a0e:	81 e0       	ldi	r24, 0x01	; 1
    8a10:	90 e0       	ldi	r25, 0x00	; 0
    8a12:	6f 96       	adiw	r28, 0x1f	; 31
    8a14:	ae ad       	ldd	r26, Y+62	; 0x3e
    8a16:	bf ad       	ldd	r27, Y+63	; 0x3f
    8a18:	6f 97       	sbiw	r28, 0x1f	; 31
    8a1a:	51 01       	movw	r10, r2
    8a1c:	18 97       	sbiw	r26, 0x08	; 8
    8a1e:	09 f0       	breq	.+2      	; 0x8a22 <_printf_fn+0x41a>
    8a20:	81 c0       	rjmp	.+258    	; 0x8b24 <_printf_fn+0x51c>
    8a22:	b8 e0       	ldi	r27, 0x08	; 8
    8a24:	ab 0e       	add	r10, r27
    8a26:	b1 1c       	adc	r11, r1
    8a28:	f1 01       	movw	r30, r2
    8a2a:	f0 81       	ld	r31, Z
    8a2c:	aa 96       	adiw	r28, 0x2a	; 42
    8a2e:	ff af       	std	Y+63, r31	; 0x3f
    8a30:	aa 97       	sbiw	r28, 0x2a	; 42
    8a32:	f1 01       	movw	r30, r2
    8a34:	f1 80       	ldd	r15, Z+1	; 0x01
    8a36:	02 81       	ldd	r16, Z+2	; 0x02
    8a38:	13 81       	ldd	r17, Z+3	; 0x03
    8a3a:	b4 81       	ldd	r27, Z+4	; 0x04
    8a3c:	f5 81       	ldd	r31, Z+5	; 0x05
    8a3e:	ab 96       	adiw	r28, 0x2b	; 43
    8a40:	ff af       	std	Y+63, r31	; 0x3f
    8a42:	ab 97       	sbiw	r28, 0x2b	; 43
    8a44:	f1 01       	movw	r30, r2
    8a46:	f6 81       	ldd	r31, Z+6	; 0x06
    8a48:	ac 96       	adiw	r28, 0x2c	; 44
    8a4a:	ff af       	std	Y+63, r31	; 0x3f
    8a4c:	ac 97       	sbiw	r28, 0x2c	; 44
    8a4e:	f1 01       	movw	r30, r2
    8a50:	37 80       	ldd	r3, Z+7	; 0x07
    8a52:	aa 96       	adiw	r28, 0x2a	; 42
    8a54:	ff ad       	ldd	r31, Y+63	; 0x3f
    8a56:	aa 97       	sbiw	r28, 0x2a	; 42
    8a58:	24 96       	adiw	r28, 0x04	; 4
    8a5a:	ff af       	std	Y+63, r31	; 0x3f
    8a5c:	24 97       	sbiw	r28, 0x04	; 4
    8a5e:	25 96       	adiw	r28, 0x05	; 5
    8a60:	ff ae       	std	Y+63, r15	; 0x3f
    8a62:	25 97       	sbiw	r28, 0x05	; 5
    8a64:	26 96       	adiw	r28, 0x06	; 6
    8a66:	0f af       	std	Y+63, r16	; 0x3f
    8a68:	26 97       	sbiw	r28, 0x06	; 6
    8a6a:	27 96       	adiw	r28, 0x07	; 7
    8a6c:	1f af       	std	Y+63, r17	; 0x3f
    8a6e:	27 97       	sbiw	r28, 0x07	; 7
    8a70:	28 96       	adiw	r28, 0x08	; 8
    8a72:	bf af       	std	Y+63, r27	; 0x3f
    8a74:	28 97       	sbiw	r28, 0x08	; 8
    8a76:	ab 96       	adiw	r28, 0x2b	; 43
    8a78:	ef ad       	ldd	r30, Y+63	; 0x3f
    8a7a:	ab 97       	sbiw	r28, 0x2b	; 43
    8a7c:	29 96       	adiw	r28, 0x09	; 9
    8a7e:	ef af       	std	Y+63, r30	; 0x3f
    8a80:	29 97       	sbiw	r28, 0x09	; 9
    8a82:	ac 96       	adiw	r28, 0x2c	; 44
    8a84:	ff ad       	ldd	r31, Y+63	; 0x3f
    8a86:	ac 97       	sbiw	r28, 0x2c	; 44
    8a88:	2a 96       	adiw	r28, 0x0a	; 10
    8a8a:	ff af       	std	Y+63, r31	; 0x3f
    8a8c:	2a 97       	sbiw	r28, 0x0a	; 10
    8a8e:	2b 96       	adiw	r28, 0x0b	; 11
    8a90:	3f ae       	std	Y+63, r3	; 0x3f
    8a92:	2b 97       	sbiw	r28, 0x0b	; 11
    8a94:	89 2b       	or	r24, r25
    8a96:	09 f4       	brne	.+2      	; 0x8a9a <_printf_fn+0x492>
    8a98:	50 c0       	rjmp	.+160    	; 0x8b3a <_printf_fn+0x532>
    8a9a:	aa 96       	adiw	r28, 0x2a	; 42
    8a9c:	2f ad       	ldd	r18, Y+63	; 0x3f
    8a9e:	aa 97       	sbiw	r28, 0x2a	; 42
    8aa0:	3f 2d       	mov	r19, r15
    8aa2:	a8 01       	movw	r20, r16
    8aa4:	6b 2f       	mov	r22, r27
    8aa6:	7e 2f       	mov	r23, r30
    8aa8:	8f 2f       	mov	r24, r31
    8aaa:	93 2d       	mov	r25, r3
    8aac:	a0 e0       	ldi	r26, 0x00	; 0
    8aae:	0e 94 c4 e4 	call	0x1c988	; 0x1c988 <__cmpdi2_s8>
    8ab2:	0c f0       	brlt	.+2      	; 0x8ab6 <_printf_fn+0x4ae>
    8ab4:	42 c0       	rjmp	.+132    	; 0x8b3a <_printf_fn+0x532>
    8ab6:	68 94       	set
    8ab8:	96 f8       	bld	r9, 6
    8aba:	0e 94 76 e4 	call	0x1c8ec	; 0x1c8ec <__negdi2>
    8abe:	24 96       	adiw	r28, 0x04	; 4
    8ac0:	2f af       	std	Y+63, r18	; 0x3f
    8ac2:	24 97       	sbiw	r28, 0x04	; 4
    8ac4:	25 96       	adiw	r28, 0x05	; 5
    8ac6:	3f af       	std	Y+63, r19	; 0x3f
    8ac8:	25 97       	sbiw	r28, 0x05	; 5
    8aca:	26 96       	adiw	r28, 0x06	; 6
    8acc:	4f af       	std	Y+63, r20	; 0x3f
    8ace:	26 97       	sbiw	r28, 0x06	; 6
    8ad0:	27 96       	adiw	r28, 0x07	; 7
    8ad2:	5f af       	std	Y+63, r21	; 0x3f
    8ad4:	27 97       	sbiw	r28, 0x07	; 7
    8ad6:	28 96       	adiw	r28, 0x08	; 8
    8ad8:	6f af       	std	Y+63, r22	; 0x3f
    8ada:	28 97       	sbiw	r28, 0x08	; 8
    8adc:	29 96       	adiw	r28, 0x09	; 9
    8ade:	7f af       	std	Y+63, r23	; 0x3f
    8ae0:	29 97       	sbiw	r28, 0x09	; 9
    8ae2:	2a 96       	adiw	r28, 0x0a	; 10
    8ae4:	8f af       	std	Y+63, r24	; 0x3f
    8ae6:	2a 97       	sbiw	r28, 0x0a	; 10
    8ae8:	2b 96       	adiw	r28, 0x0b	; 11
    8aea:	9f af       	std	Y+63, r25	; 0x3f
    8aec:	2b 97       	sbiw	r28, 0x0b	; 11
    8aee:	25 c0       	rjmp	.+74     	; 0x8b3a <_printf_fn+0x532>
    8af0:	22 e0       	ldi	r18, 0x02	; 2
    8af2:	30 e0       	ldi	r19, 0x00	; 0
    8af4:	6f 96       	adiw	r28, 0x1f	; 31
    8af6:	3f af       	std	Y+63, r19	; 0x3f
    8af8:	2e af       	std	Y+62, r18	; 0x3e
    8afa:	6f 97       	sbiw	r28, 0x1f	; 31
    8afc:	6c 96       	adiw	r28, 0x1c	; 28
    8afe:	8f ad       	ldd	r24, Y+63	; 0x3f
    8b00:	6c 97       	sbiw	r28, 0x1c	; 28
    8b02:	6d 96       	adiw	r28, 0x1d	; 29
    8b04:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b06:	6d 97       	sbiw	r28, 0x1d	; 29
    8b08:	1e c0       	rjmp	.+60     	; 0x8b46 <_printf_fn+0x53e>
    8b0a:	44 e0       	ldi	r20, 0x04	; 4
    8b0c:	50 e0       	ldi	r21, 0x00	; 0
    8b0e:	6f 96       	adiw	r28, 0x1f	; 31
    8b10:	5f af       	std	Y+63, r21	; 0x3f
    8b12:	4e af       	std	Y+62, r20	; 0x3e
    8b14:	6f 97       	sbiw	r28, 0x1f	; 31
    8b16:	6a 96       	adiw	r28, 0x1a	; 26
    8b18:	8f ad       	ldd	r24, Y+63	; 0x3f
    8b1a:	6a 97       	sbiw	r28, 0x1a	; 26
    8b1c:	6b 96       	adiw	r28, 0x1b	; 27
    8b1e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b20:	6b 97       	sbiw	r28, 0x1b	; 27
    8b22:	11 c0       	rjmp	.+34     	; 0x8b46 <_printf_fn+0x53e>
    8b24:	66 96       	adiw	r28, 0x16	; 22
    8b26:	8f ad       	ldd	r24, Y+63	; 0x3f
    8b28:	66 97       	sbiw	r28, 0x16	; 22
    8b2a:	67 96       	adiw	r28, 0x17	; 23
    8b2c:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b2e:	67 97       	sbiw	r28, 0x17	; 23
    8b30:	a3 96       	adiw	r28, 0x23	; 35
    8b32:	1f ae       	std	Y+63, r1	; 0x3f
    8b34:	1e ae       	std	Y+62, r1	; 0x3e
    8b36:	a3 97       	sbiw	r28, 0x23	; 35
    8b38:	06 c0       	rjmp	.+12     	; 0x8b46 <_printf_fn+0x53e>
    8b3a:	68 96       	adiw	r28, 0x18	; 24
    8b3c:	8f ad       	ldd	r24, Y+63	; 0x3f
    8b3e:	68 97       	sbiw	r28, 0x18	; 24
    8b40:	69 96       	adiw	r28, 0x19	; 25
    8b42:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b44:	69 97       	sbiw	r28, 0x19	; 25
    8b46:	5f ef       	ldi	r21, 0xFF	; 255
    8b48:	65 1a       	sub	r6, r21
    8b4a:	75 0a       	sbc	r7, r21
    8b4c:	85 0a       	sbc	r8, r21
    8b4e:	15 01       	movw	r2, r10
    8b50:	2d c0       	rjmp	.+90     	; 0x8bac <_printf_fn+0x5a4>
    8b52:	91 fc       	sbrc	r9, 1
    8b54:	08 c0       	rjmp	.+16     	; 0x8b66 <_printf_fn+0x55e>
    8b56:	68 94       	set
    8b58:	91 f8       	bld	r9, 1
    8b5a:	86 e0       	ldi	r24, 0x06	; 6
    8b5c:	90 e0       	ldi	r25, 0x00	; 0
    8b5e:	a1 96       	adiw	r28, 0x21	; 33
    8b60:	9f af       	std	Y+63, r25	; 0x3f
    8b62:	8e af       	std	Y+62, r24	; 0x3e
    8b64:	a1 97       	sbiw	r28, 0x21	; 33
    8b66:	d1 01       	movw	r26, r2
    8b68:	2d 91       	ld	r18, X+
    8b6a:	3d 91       	ld	r19, X+
    8b6c:	4d 91       	ld	r20, X+
    8b6e:	5c 91       	ld	r21, X
    8b70:	a9 96       	adiw	r28, 0x29	; 41
    8b72:	2c af       	std	Y+60, r18	; 0x3c
    8b74:	3d af       	std	Y+61, r19	; 0x3d
    8b76:	4e af       	std	Y+62, r20	; 0x3e
    8b78:	5f af       	std	Y+63, r21	; 0x3f
    8b7a:	a9 97       	sbiw	r28, 0x29	; 41
    8b7c:	bf ef       	ldi	r27, 0xFF	; 255
    8b7e:	6b 1a       	sub	r6, r27
    8b80:	7b 0a       	sbc	r7, r27
    8b82:	8b 0a       	sbc	r8, r27
    8b84:	f1 01       	movw	r30, r2
    8b86:	34 96       	adiw	r30, 0x04	; 4
    8b88:	1f 01       	movw	r2, r30
    8b8a:	0a c0       	rjmp	.+20     	; 0x8ba0 <_printf_fn+0x598>
    8b8c:	ff ef       	ldi	r31, 0xFF	; 255
    8b8e:	6f 1a       	sub	r6, r31
    8b90:	7f 0a       	sbc	r7, r31
    8b92:	8f 0a       	sbc	r8, r31
    8b94:	b0 c0       	rjmp	.+352    	; 0x8cf6 <_printf_fn+0x6ee>
    8b96:	2f ef       	ldi	r18, 0xFF	; 255
    8b98:	62 1a       	sub	r6, r18
    8b9a:	72 0a       	sbc	r7, r18
    8b9c:	82 0a       	sbc	r8, r18
    8b9e:	b8 c0       	rjmp	.+368    	; 0x8d10 <_printf_fn+0x708>
    8ba0:	66 96       	adiw	r28, 0x16	; 22
    8ba2:	8f ad       	ldd	r24, Y+63	; 0x3f
    8ba4:	66 97       	sbiw	r28, 0x16	; 22
    8ba6:	67 96       	adiw	r28, 0x17	; 23
    8ba8:	9f ad       	ldd	r25, Y+63	; 0x3f
    8baa:	67 97       	sbiw	r28, 0x17	; 23
    8bac:	a3 96       	adiw	r28, 0x23	; 35
    8bae:	ee ad       	ldd	r30, Y+62	; 0x3e
    8bb0:	ff ad       	ldd	r31, Y+63	; 0x3f
    8bb2:	a3 97       	sbiw	r28, 0x23	; 35
    8bb4:	e2 54       	subi	r30, 0x42	; 66
    8bb6:	f1 09       	sbc	r31, r1
    8bb8:	e7 33       	cpi	r30, 0x37	; 55
    8bba:	f1 05       	cpc	r31, r1
    8bbc:	08 f0       	brcs	.+2      	; 0x8bc0 <_printf_fn+0x5b8>
    8bbe:	f9 c0       	rjmp	.+498    	; 0x8db2 <_printf_fn+0x7aa>
    8bc0:	e3 58       	subi	r30, 0x83	; 131
    8bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    8bc4:	0c 94 42 e4 	jmp	0x1c884	; 0x1c884 <__tablejump2__>
    8bc8:	e8 94       	clt
    8bca:	94 f8       	bld	r9, 4
    8bcc:	e8 94       	clt
    8bce:	92 f8       	bld	r9, 2
    8bd0:	a9 2c       	mov	r10, r9
    8bd2:	b1 2c       	mov	r11, r1
    8bd4:	a1 96       	adiw	r28, 0x21	; 33
    8bd6:	ce ac       	ldd	r12, Y+62	; 0x3e
    8bd8:	df ac       	ldd	r13, Y+63	; 0x3f
    8bda:	a1 97       	sbiw	r28, 0x21	; 33
    8bdc:	72 01       	movw	r14, r4
    8bde:	0a e0       	ldi	r16, 0x0A	; 10
    8be0:	10 e0       	ldi	r17, 0x00	; 0
    8be2:	13 c0       	rjmp	.+38     	; 0x8c0a <_printf_fn+0x602>
    8be4:	a9 2c       	mov	r10, r9
    8be6:	b1 2c       	mov	r11, r1
    8be8:	a1 96       	adiw	r28, 0x21	; 33
    8bea:	ce ac       	ldd	r12, Y+62	; 0x3e
    8bec:	df ac       	ldd	r13, Y+63	; 0x3f
    8bee:	a1 97       	sbiw	r28, 0x21	; 33
    8bf0:	72 01       	movw	r14, r4
    8bf2:	02 e0       	ldi	r16, 0x02	; 2
    8bf4:	10 e0       	ldi	r17, 0x00	; 0
    8bf6:	09 c0       	rjmp	.+18     	; 0x8c0a <_printf_fn+0x602>
    8bf8:	a9 2c       	mov	r10, r9
    8bfa:	b1 2c       	mov	r11, r1
    8bfc:	a1 96       	adiw	r28, 0x21	; 33
    8bfe:	ce ac       	ldd	r12, Y+62	; 0x3e
    8c00:	df ac       	ldd	r13, Y+63	; 0x3f
    8c02:	a1 97       	sbiw	r28, 0x21	; 33
    8c04:	72 01       	movw	r14, r4
    8c06:	08 e0       	ldi	r16, 0x08	; 8
    8c08:	10 e0       	ldi	r17, 0x00	; 0
    8c0a:	22 e4       	ldi	r18, 0x42	; 66
    8c0c:	30 e0       	ldi	r19, 0x00	; 0
    8c0e:	ae 01       	movw	r20, r28
    8c10:	4f 5f       	subi	r20, 0xFF	; 255
    8c12:	5f 4f       	sbci	r21, 0xFF	; 255
    8c14:	6f 96       	adiw	r28, 0x1f	; 31
    8c16:	6e ad       	ldd	r22, Y+62	; 0x3e
    8c18:	7f ad       	ldd	r23, Y+63	; 0x3f
    8c1a:	6f 97       	sbiw	r28, 0x1f	; 31
    8c1c:	fb d9       	rcall	.-3082   	; 0x8014 <p_ntoa>
    8c1e:	30 c0       	rjmp	.+96     	; 0x8c80 <_printf_fn+0x678>
    8c20:	a9 2c       	mov	r10, r9
    8c22:	b1 2c       	mov	r11, r1
    8c24:	a1 96       	adiw	r28, 0x21	; 33
    8c26:	ce ac       	ldd	r12, Y+62	; 0x3e
    8c28:	df ac       	ldd	r13, Y+63	; 0x3f
    8c2a:	a1 97       	sbiw	r28, 0x21	; 33
    8c2c:	72 01       	movw	r14, r4
    8c2e:	00 e1       	ldi	r16, 0x10	; 16
    8c30:	10 e0       	ldi	r17, 0x00	; 0
    8c32:	22 e4       	ldi	r18, 0x42	; 66
    8c34:	30 e0       	ldi	r19, 0x00	; 0
    8c36:	ae 01       	movw	r20, r28
    8c38:	4f 5f       	subi	r20, 0xFF	; 255
    8c3a:	5f 4f       	sbci	r21, 0xFF	; 255
    8c3c:	6f 96       	adiw	r28, 0x1f	; 31
    8c3e:	6e ad       	ldd	r22, Y+62	; 0x3e
    8c40:	7f ad       	ldd	r23, Y+63	; 0x3f
    8c42:	6f 97       	sbiw	r28, 0x1f	; 31
    8c44:	e7 d9       	rcall	.-3122   	; 0x8014 <p_ntoa>
    8c46:	7c 01       	movw	r14, r24
    8c48:	a3 96       	adiw	r28, 0x23	; 35
    8c4a:	6e ad       	ldd	r22, Y+62	; 0x3e
    8c4c:	7f ad       	ldd	r23, Y+63	; 0x3f
    8c4e:	a3 97       	sbiw	r28, 0x23	; 35
    8c50:	67 7f       	andi	r22, 0xF7	; 247
    8c52:	60 35       	cpi	r22, 0x50	; 80
    8c54:	71 05       	cpc	r23, r1
    8c56:	c9 f5       	brne	.+114    	; 0x8cca <_printf_fn+0x6c2>
    8c58:	34 c0       	rjmp	.+104    	; 0x8cc2 <_printf_fn+0x6ba>
    8c5a:	c9 2c       	mov	r12, r9
    8c5c:	d1 2c       	mov	r13, r1
    8c5e:	a1 96       	adiw	r28, 0x21	; 33
    8c60:	ee ac       	ldd	r14, Y+62	; 0x3e
    8c62:	ff ac       	ldd	r15, Y+63	; 0x3f
    8c64:	a1 97       	sbiw	r28, 0x21	; 33
    8c66:	82 01       	movw	r16, r4
    8c68:	22 e4       	ldi	r18, 0x42	; 66
    8c6a:	30 e0       	ldi	r19, 0x00	; 0
    8c6c:	ae 01       	movw	r20, r28
    8c6e:	4f 5f       	subi	r20, 0xFF	; 255
    8c70:	5f 4f       	sbci	r21, 0xFF	; 255
    8c72:	a9 96       	adiw	r28, 0x29	; 41
    8c74:	6c ad       	ldd	r22, Y+60	; 0x3c
    8c76:	7d ad       	ldd	r23, Y+61	; 0x3d
    8c78:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c7a:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c7c:	a9 97       	sbiw	r28, 0x29	; 41
    8c7e:	1f da       	rcall	.-3010   	; 0x80be <p_ftoa>
    8c80:	93 fa       	bst	r9, 3
    8c82:	00 27       	eor	r16, r16
    8c84:	00 f9       	bld	r16, 0
    8c86:	10 e0       	ldi	r17, 0x00	; 0
    8c88:	9c 01       	movw	r18, r24
    8c8a:	24 c0       	rjmp	.+72     	; 0x8cd4 <_printf_fn+0x6cc>
    8c8c:	c9 2c       	mov	r12, r9
    8c8e:	d1 2c       	mov	r13, r1
    8c90:	a1 96       	adiw	r28, 0x21	; 33
    8c92:	ee ac       	ldd	r14, Y+62	; 0x3e
    8c94:	ff ac       	ldd	r15, Y+63	; 0x3f
    8c96:	a1 97       	sbiw	r28, 0x21	; 33
    8c98:	82 01       	movw	r16, r4
    8c9a:	22 e4       	ldi	r18, 0x42	; 66
    8c9c:	30 e0       	ldi	r19, 0x00	; 0
    8c9e:	ae 01       	movw	r20, r28
    8ca0:	4f 5f       	subi	r20, 0xFF	; 255
    8ca2:	5f 4f       	sbci	r21, 0xFF	; 255
    8ca4:	a9 96       	adiw	r28, 0x29	; 41
    8ca6:	6c ad       	ldd	r22, Y+60	; 0x3c
    8ca8:	7d ad       	ldd	r23, Y+61	; 0x3d
    8caa:	8e ad       	ldd	r24, Y+62	; 0x3e
    8cac:	9f ad       	ldd	r25, Y+63	; 0x3f
    8cae:	a9 97       	sbiw	r28, 0x29	; 41
    8cb0:	0d db       	rcall	.-2534   	; 0x82cc <p_etoa>
    8cb2:	7c 01       	movw	r14, r24
    8cb4:	a3 96       	adiw	r28, 0x23	; 35
    8cb6:	4e ad       	ldd	r20, Y+62	; 0x3e
    8cb8:	5f ad       	ldd	r21, Y+63	; 0x3f
    8cba:	a3 97       	sbiw	r28, 0x23	; 35
    8cbc:	45 34       	cpi	r20, 0x45	; 69
    8cbe:	51 05       	cpc	r21, r1
    8cc0:	21 f4       	brne	.+8      	; 0x8cca <_printf_fn+0x6c2>
    8cc2:	ce 01       	movw	r24, r28
    8cc4:	01 96       	adiw	r24, 0x01	; 1
    8cc6:	0e 94 ae 32 	call	0x655c	; 0x655c <strupper>
    8cca:	93 fa       	bst	r9, 3
    8ccc:	00 27       	eor	r16, r16
    8cce:	00 f9       	bld	r16, 0
    8cd0:	10 e0       	ldi	r17, 0x00	; 0
    8cd2:	97 01       	movw	r18, r14
    8cd4:	a2 01       	movw	r20, r4
    8cd6:	be 01       	movw	r22, r28
    8cd8:	6f 5f       	subi	r22, 0xFF	; 255
    8cda:	7f 4f       	sbci	r23, 0xFF	; 255
    8cdc:	a5 96       	adiw	r28, 0x25	; 37
    8cde:	8e ad       	ldd	r24, Y+62	; 0x3e
    8ce0:	9f ad       	ldd	r25, Y+63	; 0x3f
    8ce2:	a5 97       	sbiw	r28, 0x25	; 37
    8ce4:	4f dc       	rcall	.-1890   	; 0x8584 <_puts_pad>
    8ce6:	69 c0       	rjmp	.+210    	; 0x8dba <_printf_fn+0x7b2>
    8ce8:	a3 96       	adiw	r28, 0x23	; 35
    8cea:	8e ad       	ldd	r24, Y+62	; 0x3e
    8cec:	9f ad       	ldd	r25, Y+63	; 0x3f
    8cee:	a3 97       	sbiw	r28, 0x23	; 35
    8cf0:	83 37       	cpi	r24, 0x73	; 115
    8cf2:	91 05       	cpc	r25, r1
    8cf4:	69 f4       	brne	.+26     	; 0x8d10 <_printf_fn+0x708>
    8cf6:	71 01       	movw	r14, r2
    8cf8:	92 e0       	ldi	r25, 0x02	; 2
    8cfa:	e9 0e       	add	r14, r25
    8cfc:	f1 1c       	adc	r15, r1
    8cfe:	d1 01       	movw	r26, r2
    8d00:	6d 91       	ld	r22, X+
    8d02:	7c 91       	ld	r23, X
    8d04:	61 15       	cp	r22, r1
    8d06:	71 05       	cpc	r23, r1
    8d08:	91 f4       	brne	.+36     	; 0x8d2e <_printf_fn+0x726>
    8d0a:	6a e3       	ldi	r22, 0x3A	; 58
    8d0c:	73 e0       	ldi	r23, 0x03	; 3
    8d0e:	0f c0       	rjmp	.+30     	; 0x8d2e <_printf_fn+0x726>
    8d10:	71 01       	movw	r14, r2
    8d12:	b2 e0       	ldi	r27, 0x02	; 2
    8d14:	eb 0e       	add	r14, r27
    8d16:	f1 1c       	adc	r15, r1
    8d18:	f1 01       	movw	r30, r2
    8d1a:	80 81       	ld	r24, Z
    8d1c:	60 96       	adiw	r28, 0x10	; 16
    8d1e:	8f af       	std	Y+63, r24	; 0x3f
    8d20:	60 97       	sbiw	r28, 0x10	; 16
    8d22:	61 96       	adiw	r28, 0x11	; 17
    8d24:	1f ae       	std	Y+63, r1	; 0x3f
    8d26:	61 97       	sbiw	r28, 0x11	; 17
    8d28:	be 01       	movw	r22, r28
    8d2a:	61 5b       	subi	r22, 0xB1	; 177
    8d2c:	7f 4f       	sbci	r23, 0xFF	; 255
    8d2e:	fb 01       	movw	r30, r22
    8d30:	01 90       	ld	r0, Z+
    8d32:	00 20       	and	r0, r0
    8d34:	e9 f7       	brne	.-6      	; 0x8d30 <_printf_fn+0x728>
    8d36:	31 97       	sbiw	r30, 0x01	; 1
    8d38:	e6 1b       	sub	r30, r22
    8d3a:	f7 0b       	sbc	r31, r23
    8d3c:	a1 96       	adiw	r28, 0x21	; 33
    8d3e:	2e ad       	ldd	r18, Y+62	; 0x3e
    8d40:	3f ad       	ldd	r19, Y+63	; 0x3f
    8d42:	a1 97       	sbiw	r28, 0x21	; 33
    8d44:	23 2b       	or	r18, r19
    8d46:	21 f4       	brne	.+8      	; 0x8d50 <_printf_fn+0x748>
    8d48:	a1 96       	adiw	r28, 0x21	; 33
    8d4a:	ff af       	std	Y+63, r31	; 0x3f
    8d4c:	ee af       	std	Y+62, r30	; 0x3e
    8d4e:	a1 97       	sbiw	r28, 0x21	; 33
    8d50:	a1 96       	adiw	r28, 0x21	; 33
    8d52:	4e ad       	ldd	r20, Y+62	; 0x3e
    8d54:	5f ad       	ldd	r21, Y+63	; 0x3f
    8d56:	a1 97       	sbiw	r28, 0x21	; 33
    8d58:	44 16       	cp	r4, r20
    8d5a:	55 06       	cpc	r5, r21
    8d5c:	3c f4       	brge	.+14     	; 0x8d6c <_printf_fn+0x764>
    8d5e:	41 14       	cp	r4, r1
    8d60:	51 04       	cpc	r5, r1
    8d62:	21 f0       	breq	.+8      	; 0x8d6c <_printf_fn+0x764>
    8d64:	a1 96       	adiw	r28, 0x21	; 33
    8d66:	5f ae       	std	Y+63, r5	; 0x3f
    8d68:	4e ae       	std	Y+62, r4	; 0x3e
    8d6a:	a1 97       	sbiw	r28, 0x21	; 33
    8d6c:	93 fa       	bst	r9, 3
    8d6e:	00 27       	eor	r16, r16
    8d70:	00 f9       	bld	r16, 0
    8d72:	10 e0       	ldi	r17, 0x00	; 0
    8d74:	a1 96       	adiw	r28, 0x21	; 33
    8d76:	2e ad       	ldd	r18, Y+62	; 0x3e
    8d78:	3f ad       	ldd	r19, Y+63	; 0x3f
    8d7a:	a1 97       	sbiw	r28, 0x21	; 33
    8d7c:	a2 01       	movw	r20, r4
    8d7e:	a5 96       	adiw	r28, 0x25	; 37
    8d80:	8e ad       	ldd	r24, Y+62	; 0x3e
    8d82:	9f ad       	ldd	r25, Y+63	; 0x3f
    8d84:	a5 97       	sbiw	r28, 0x25	; 37
    8d86:	fe db       	rcall	.-2052   	; 0x8584 <_puts_pad>
    8d88:	17 01       	movw	r2, r14
    8d8a:	17 c0       	rjmp	.+46     	; 0x8dba <_printf_fn+0x7b2>
    8d8c:	f6 01       	movw	r30, r12
    8d8e:	5e 2d       	mov	r21, r14
    8d90:	0e 94 bd e4 	call	0x1c97a	; 0x1c97a <__xload_1>
    8d94:	66 23       	and	r22, r22
    8d96:	89 f0       	breq	.+34     	; 0x8dba <_printf_fn+0x7b2>
    8d98:	5f ef       	ldi	r21, 0xFF	; 255
    8d9a:	c5 1a       	sub	r12, r21
    8d9c:	d5 0a       	sbc	r13, r21
    8d9e:	e5 0a       	sbc	r14, r21
    8da0:	a5 96       	adiw	r28, 0x25	; 37
    8da2:	ae ad       	ldd	r26, Y+62	; 0x3e
    8da4:	bf ad       	ldd	r27, Y+63	; 0x3f
    8da6:	a5 97       	sbiw	r28, 0x25	; 37
    8da8:	ed 91       	ld	r30, X+
    8daa:	fc 91       	ld	r31, X
    8dac:	11 97       	sbiw	r26, 0x01	; 1
    8dae:	cd 01       	movw	r24, r26
    8db0:	09 95       	icall
    8db2:	6c 14       	cp	r6, r12
    8db4:	7d 04       	cpc	r7, r13
    8db6:	8e 04       	cpc	r8, r14
    8db8:	48 f7       	brcc	.-46     	; 0x8d8c <_printf_fn+0x784>
    8dba:	e8 2c       	mov	r14, r8
    8dbc:	63 01       	movw	r12, r6
    8dbe:	53 cc       	rjmp	.-1882   	; 0x8666 <_printf_fn+0x5e>
    8dc0:	e2 e0       	ldi	r30, 0x02	; 2
    8dc2:	f0 e0       	ldi	r31, 0x00	; 0
    8dc4:	6f 96       	adiw	r28, 0x1f	; 31
    8dc6:	ff af       	std	Y+63, r31	; 0x3f
    8dc8:	ee af       	std	Y+62, r30	; 0x3e
    8dca:	6f 97       	sbiw	r28, 0x1f	; 31
    8dcc:	5f cd       	rjmp	.-1346   	; 0x888c <_printf_fn+0x284>
    8dce:	6f 96       	adiw	r28, 0x1f	; 31
    8dd0:	ee ad       	ldd	r30, Y+62	; 0x3e
    8dd2:	ff ad       	ldd	r31, Y+63	; 0x3f
    8dd4:	6f 97       	sbiw	r28, 0x1f	; 31
    8dd6:	32 97       	sbiw	r30, 0x02	; 2
    8dd8:	61 f4       	brne	.+24     	; 0x8df2 <_printf_fn+0x7ea>
    8dda:	51 01       	movw	r10, r2
    8ddc:	f2 e0       	ldi	r31, 0x02	; 2
    8dde:	af 0e       	add	r10, r31
    8de0:	b1 1c       	adc	r11, r1
    8de2:	d1 01       	movw	r26, r2
    8de4:	8d 91       	ld	r24, X+
    8de6:	9c 91       	ld	r25, X
    8de8:	65 96       	adiw	r28, 0x15	; 21
    8dea:	9f af       	std	Y+63, r25	; 0x3f
    8dec:	8e af       	std	Y+62, r24	; 0x3e
    8dee:	65 97       	sbiw	r28, 0x15	; 21
    8df0:	cd cd       	rjmp	.-1126   	; 0x898c <_printf_fn+0x384>
    8df2:	6f 96       	adiw	r28, 0x1f	; 31
    8df4:	2e ad       	ldd	r18, Y+62	; 0x3e
    8df6:	3f ad       	ldd	r19, Y+63	; 0x3f
    8df8:	6f 97       	sbiw	r28, 0x1f	; 31
    8dfa:	24 30       	cpi	r18, 0x04	; 4
    8dfc:	31 05       	cpc	r19, r1
    8dfe:	09 f0       	breq	.+2      	; 0x8e02 <_printf_fn+0x7fa>
    8e00:	06 ce       	rjmp	.-1012   	; 0x8a0e <_printf_fn+0x406>
    8e02:	51 01       	movw	r10, r2
    8e04:	f4 e0       	ldi	r31, 0x04	; 4
    8e06:	af 0e       	add	r10, r31
    8e08:	b1 1c       	adc	r11, r1
    8e0a:	f1 01       	movw	r30, r2
    8e0c:	80 81       	ld	r24, Z
    8e0e:	91 81       	ldd	r25, Z+1	; 0x01
    8e10:	a2 81       	ldd	r26, Z+2	; 0x02
    8e12:	b3 81       	ldd	r27, Z+3	; 0x03
    8e14:	2f 96       	adiw	r28, 0x0f	; 15
    8e16:	8c af       	std	Y+60, r24	; 0x3c
    8e18:	9d af       	std	Y+61, r25	; 0x3d
    8e1a:	ae af       	std	Y+62, r26	; 0x3e
    8e1c:	bf af       	std	Y+63, r27	; 0x3f
    8e1e:	2f 97       	sbiw	r28, 0x0f	; 15
    8e20:	e4 cd       	rjmp	.-1080   	; 0x89ea <_printf_fn+0x3e2>
    8e22:	c5 59       	subi	r28, 0x95	; 149
    8e24:	df 4f       	sbci	r29, 0xFF	; 255
    8e26:	e2 e1       	ldi	r30, 0x12	; 18
    8e28:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

00008e2c <vsnprintf_P>:
    8e2c:	a8 e0       	ldi	r26, 0x08	; 8
    8e2e:	b0 e0       	ldi	r27, 0x00	; 0
    8e30:	ec e1       	ldi	r30, 0x1C	; 28
    8e32:	f7 e4       	ldi	r31, 0x47	; 71
    8e34:	0c 94 92 e4 	jmp	0x1c924	; 0x1c924 <__prologue_saves__+0x18>
    8e38:	7c 01       	movw	r14, r24
    8e3a:	cb 01       	movw	r24, r22
    8e3c:	64 2f       	mov	r22, r20
    8e3e:	a9 01       	movw	r20, r18
    8e40:	98 01       	movw	r18, r16
    8e42:	f7 01       	movw	r30, r14
    8e44:	10 82       	st	Z, r1
    8e46:	eb e2       	ldi	r30, 0x2B	; 43
    8e48:	ff e3       	ldi	r31, 0x3F	; 63
    8e4a:	fa 83       	std	Y+2, r31	; 0x02
    8e4c:	e9 83       	std	Y+1, r30	; 0x01
    8e4e:	9e 83       	std	Y+6, r25	; 0x06
    8e50:	8d 83       	std	Y+5, r24	; 0x05
    8e52:	18 86       	std	Y+8, r1	; 0x08
    8e54:	1f 82       	std	Y+7, r1	; 0x07
    8e56:	fc 82       	std	Y+4, r15	; 0x04
    8e58:	eb 82       	std	Y+3, r14	; 0x03
    8e5a:	ce 01       	movw	r24, r28
    8e5c:	01 96       	adiw	r24, 0x01	; 1
    8e5e:	d4 db       	rcall	.-2136   	; 0x8608 <_printf_fn>
    8e60:	f7 01       	movw	r30, r14
    8e62:	01 90       	ld	r0, Z+
    8e64:	00 20       	and	r0, r0
    8e66:	e9 f7       	brne	.-6      	; 0x8e62 <vsnprintf_P+0x36>
    8e68:	cf 01       	movw	r24, r30
    8e6a:	01 97       	sbiw	r24, 0x01	; 1
    8e6c:	8e 19       	sub	r24, r14
    8e6e:	9f 09       	sbc	r25, r15
    8e70:	28 96       	adiw	r28, 0x08	; 8
    8e72:	e6 e0       	ldi	r30, 0x06	; 6
    8e74:	0c 94 ae e4 	jmp	0x1c95c	; 0x1c95c <__epilogue_restores__+0x18>

00008e78 <snprintf_P>:
    8e78:	a0 e0       	ldi	r26, 0x00	; 0
    8e7a:	b0 e0       	ldi	r27, 0x00	; 0
    8e7c:	e2 e4       	ldi	r30, 0x42	; 66
    8e7e:	f7 e4       	ldi	r31, 0x47	; 71
    8e80:	0c 94 94 e4 	jmp	0x1c928	; 0x1c928 <__prologue_saves__+0x1c>
    8e84:	8e 01       	movw	r16, r28
    8e86:	02 5f       	subi	r16, 0xF2	; 242
    8e88:	1f 4f       	sbci	r17, 0xFF	; 255
    8e8a:	2b 85       	ldd	r18, Y+11	; 0x0b
    8e8c:	3c 85       	ldd	r19, Y+12	; 0x0c
    8e8e:	4d 85       	ldd	r20, Y+13	; 0x0d
    8e90:	69 85       	ldd	r22, Y+9	; 0x09
    8e92:	7a 85       	ldd	r23, Y+10	; 0x0a
    8e94:	8f 81       	ldd	r24, Y+7	; 0x07
    8e96:	98 85       	ldd	r25, Y+8	; 0x08
    8e98:	c9 df       	rcall	.-110    	; 0x8e2c <vsnprintf_P>
    8e9a:	e4 e0       	ldi	r30, 0x04	; 4
    8e9c:	0c 94 b0 e4 	jmp	0x1c960	; 0x1c960 <__epilogue_restores__+0x1c>

00008ea0 <sprintf_P>:
    8ea0:	a0 e0       	ldi	r26, 0x00	; 0
    8ea2:	b0 e0       	ldi	r27, 0x00	; 0
    8ea4:	e6 e5       	ldi	r30, 0x56	; 86
    8ea6:	f7 e4       	ldi	r31, 0x47	; 71
    8ea8:	0c 94 94 e4 	jmp	0x1c928	; 0x1c928 <__prologue_saves__+0x1c>
    8eac:	8e 01       	movw	r16, r28
    8eae:	04 5f       	subi	r16, 0xF4	; 244
    8eb0:	1f 4f       	sbci	r17, 0xFF	; 255
    8eb2:	29 85       	ldd	r18, Y+9	; 0x09
    8eb4:	3a 85       	ldd	r19, Y+10	; 0x0a
    8eb6:	4b 85       	ldd	r20, Y+11	; 0x0b
    8eb8:	60 e0       	ldi	r22, 0x00	; 0
    8eba:	74 e0       	ldi	r23, 0x04	; 4
    8ebc:	8f 81       	ldd	r24, Y+7	; 0x07
    8ebe:	98 85       	ldd	r25, Y+8	; 0x08
    8ec0:	b5 df       	rcall	.-150    	; 0x8e2c <vsnprintf_P>
    8ec2:	e4 e0       	ldi	r30, 0x04	; 4
    8ec4:	0c 94 b0 e4 	jmp	0x1c960	; 0x1c960 <__epilogue_restores__+0x1c>

00008ec8 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE 
int 
printf_P(__memx const char *format, ...)
{
    8ec8:	a8 e0       	ldi	r26, 0x08	; 8
    8eca:	b0 e0       	ldi	r27, 0x00	; 0
    8ecc:	ea e6       	ldi	r30, 0x6A	; 106
    8ece:	f7 e4       	ldi	r31, 0x47	; 71
    8ed0:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
    8ed4:	9e 01       	movw	r18, r28
    8ed6:	23 5f       	subi	r18, 0xF3	; 243
    8ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    8eda:	f9 01       	movw	r30, r18
    8edc:	41 91       	ld	r20, Z+
    8ede:	51 91       	ld	r21, Z+
    8ee0:	61 91       	ld	r22, Z+
    8ee2:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8ee4:	84 e4       	ldi	r24, 0x44	; 68
    8ee6:	9f e3       	ldi	r25, 0x3F	; 63
    8ee8:	9a 83       	std	Y+2, r25	; 0x02
    8eea:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8eec:	18 86       	std	Y+8, r1	; 0x08
    8eee:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8ef0:	ce 01       	movw	r24, r28
    8ef2:	01 96       	adiw	r24, 0x01	; 1
    8ef4:	89 db       	rcall	.-2286   	; 0x8608 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8ef6:	8f 81       	ldd	r24, Y+7	; 0x07
    8ef8:	98 85       	ldd	r25, Y+8	; 0x08
    8efa:	28 96       	adiw	r28, 0x08	; 8
    8efc:	e2 e0       	ldi	r30, 0x02	; 2
    8efe:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

00008f02 <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8f02:	9c 01       	movw	r18, r24
    8f04:	20 53       	subi	r18, 0x30	; 48
    8f06:	31 09       	sbc	r19, r1
    8f08:	2a 30       	cpi	r18, 0x0A	; 10
    8f0a:	31 05       	cpc	r19, r1
    8f0c:	10 f4       	brcc	.+4      	; 0x8f12 <atodigit+0x10>
    8f0e:	c9 01       	movw	r24, r18
    8f10:	10 c0       	rjmp	.+32     	; 0x8f32 <atodigit+0x30>
    8f12:	9c 01       	movw	r18, r24
    8f14:	21 54       	subi	r18, 0x41	; 65
    8f16:	31 09       	sbc	r19, r1
    8f18:	26 30       	cpi	r18, 0x06	; 6
    8f1a:	31 05       	cpc	r19, r1
    8f1c:	10 f4       	brcc	.+4      	; 0x8f22 <atodigit+0x20>
    8f1e:	c7 97       	sbiw	r24, 0x37	; 55
    8f20:	08 c0       	rjmp	.+16     	; 0x8f32 <atodigit+0x30>
    8f22:	9c 01       	movw	r18, r24
    8f24:	21 56       	subi	r18, 0x61	; 97
    8f26:	31 09       	sbc	r19, r1
    8f28:	26 30       	cpi	r18, 0x06	; 6
    8f2a:	31 05       	cpc	r19, r1
    8f2c:	28 f4       	brcc	.+10     	; 0x8f38 <atodigit+0x36>
    8f2e:	87 55       	subi	r24, 0x57	; 87
    8f30:	91 09       	sbc	r25, r1
    8f32:	86 17       	cp	r24, r22
    8f34:	97 07       	cpc	r25, r23
    8f36:	14 f0       	brlt	.+4      	; 0x8f3c <atodigit+0x3a>
    8f38:	8f ef       	ldi	r24, 0xFF	; 255
    8f3a:	9f ef       	ldi	r25, 0xFF	; 255
    8f3c:	08 95       	ret

00008f3e <strtol>:
    8f3e:	a0 e0       	ldi	r26, 0x00	; 0
    8f40:	b0 e0       	ldi	r27, 0x00	; 0
    8f42:	e5 ea       	ldi	r30, 0xA5	; 165
    8f44:	f7 e4       	ldi	r31, 0x47	; 71
    8f46:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
    8f4a:	2b 01       	movw	r4, r22
    8f4c:	8a 01       	movw	r16, r20
    8f4e:	ec 01       	movw	r28, r24
    8f50:	28 81       	ld	r18, Y
    8f52:	01 96       	adiw	r24, 0x01	; 1
    8f54:	20 32       	cpi	r18, 0x20	; 32
    8f56:	d9 f3       	breq	.-10     	; 0x8f4e <strtol+0x10>
    8f58:	29 30       	cpi	r18, 0x09	; 9
    8f5a:	c9 f3       	breq	.-14     	; 0x8f4e <strtol+0x10>
    8f5c:	2d 32       	cpi	r18, 0x2D	; 45
    8f5e:	29 f4       	brne	.+10     	; 0x8f6a <strtol+0x2c>
    8f60:	ec 01       	movw	r28, r24
    8f62:	66 24       	eor	r6, r6
    8f64:	63 94       	inc	r6
    8f66:	71 2c       	mov	r7, r1
    8f68:	05 c0       	rjmp	.+10     	; 0x8f74 <strtol+0x36>
    8f6a:	2b 32       	cpi	r18, 0x2B	; 43
    8f6c:	09 f4       	brne	.+2      	; 0x8f70 <strtol+0x32>
    8f6e:	ec 01       	movw	r28, r24
    8f70:	61 2c       	mov	r6, r1
    8f72:	71 2c       	mov	r7, r1
    8f74:	9e 01       	movw	r18, r28
    8f76:	2f 5f       	subi	r18, 0xFF	; 255
    8f78:	3f 4f       	sbci	r19, 0xFF	; 255
    8f7a:	88 81       	ld	r24, Y
    8f7c:	80 33       	cpi	r24, 0x30	; 48
    8f7e:	11 f4       	brne	.+4      	; 0x8f84 <strtol+0x46>
    8f80:	e9 01       	movw	r28, r18
    8f82:	f8 cf       	rjmp	.-16     	; 0x8f74 <strtol+0x36>
    8f84:	c1 2c       	mov	r12, r1
    8f86:	d1 2c       	mov	r13, r1
    8f88:	76 01       	movw	r14, r12
    8f8a:	48 01       	movw	r8, r16
    8f8c:	01 2e       	mov	r0, r17
    8f8e:	00 0c       	add	r0, r0
    8f90:	aa 08       	sbc	r10, r10
    8f92:	bb 08       	sbc	r11, r11
    8f94:	3c 2e       	mov	r3, r28
    8f96:	2d 2e       	mov	r2, r29
    8f98:	89 91       	ld	r24, Y+
    8f9a:	88 23       	and	r24, r24
    8f9c:	31 f0       	breq	.+12     	; 0x8faa <strtol+0x6c>
    8f9e:	b8 01       	movw	r22, r16
    8fa0:	90 e0       	ldi	r25, 0x00	; 0
    8fa2:	af df       	rcall	.-162    	; 0x8f02 <atodigit>
    8fa4:	fc 01       	movw	r30, r24
    8fa6:	97 ff       	sbrs	r25, 7
    8fa8:	0c c0       	rjmp	.+24     	; 0x8fc2 <strtol+0x84>
    8faa:	61 14       	cp	r6, r1
    8fac:	71 04       	cpc	r7, r1
    8fae:	c1 f0       	breq	.+48     	; 0x8fe0 <strtol+0xa2>
    8fb0:	f0 94       	com	r15
    8fb2:	e0 94       	com	r14
    8fb4:	d0 94       	com	r13
    8fb6:	c0 94       	com	r12
    8fb8:	c1 1c       	adc	r12, r1
    8fba:	d1 1c       	adc	r13, r1
    8fbc:	e1 1c       	adc	r14, r1
    8fbe:	f1 1c       	adc	r15, r1
    8fc0:	0f c0       	rjmp	.+30     	; 0x8fe0 <strtol+0xa2>
    8fc2:	a5 01       	movw	r20, r10
    8fc4:	94 01       	movw	r18, r8
    8fc6:	c7 01       	movw	r24, r14
    8fc8:	b6 01       	movw	r22, r12
    8fca:	0e 94 c2 e3 	call	0x1c784	; 0x1c784 <__mulsi3>
    8fce:	6f 01       	movw	r12, r30
    8fd0:	ff 0f       	add	r31, r31
    8fd2:	ee 08       	sbc	r14, r14
    8fd4:	ff 08       	sbc	r15, r15
    8fd6:	c6 0e       	add	r12, r22
    8fd8:	d7 1e       	adc	r13, r23
    8fda:	e8 1e       	adc	r14, r24
    8fdc:	f9 1e       	adc	r15, r25
    8fde:	da cf       	rjmp	.-76     	; 0x8f94 <strtol+0x56>
    8fe0:	41 14       	cp	r4, r1
    8fe2:	51 04       	cpc	r5, r1
    8fe4:	19 f0       	breq	.+6      	; 0x8fec <strtol+0xae>
    8fe6:	f2 01       	movw	r30, r4
    8fe8:	30 82       	st	Z, r3
    8fea:	21 82       	std	Z+1, r2	; 0x01
    8fec:	c7 01       	movw	r24, r14
    8fee:	b6 01       	movw	r22, r12
    8ff0:	cd b7       	in	r28, 0x3d	; 61
    8ff2:	de b7       	in	r29, 0x3e	; 62
    8ff4:	e2 e1       	ldi	r30, 0x12	; 18
    8ff6:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

00008ffa <atoi>:
MEMSPACE 
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8ffa:	4a e0       	ldi	r20, 0x0A	; 10
    8ffc:	50 e0       	ldi	r21, 0x00	; 0
    8ffe:	60 e0       	ldi	r22, 0x00	; 0
    9000:	70 e0       	ldi	r23, 0x00	; 0
    9002:	9d df       	rcall	.-198    	; 0x8f3e <strtol>
    return((int)num);
}
    9004:	cb 01       	movw	r24, r22
    9006:	08 95       	ret

00009008 <atol>:
MEMSPACE 
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    9008:	4a e0       	ldi	r20, 0x0A	; 10
    900a:	50 e0       	ldi	r21, 0x00	; 0
    900c:	60 e0       	ldi	r22, 0x00	; 0
    900e:	70 e0       	ldi	r23, 0x00	; 0
    9010:	96 cf       	rjmp	.-212    	; 0x8f3e <strtol>
    return(num);
}
    9012:	08 95       	ret

00009014 <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    9014:	fc 01       	movw	r30, r24
    9016:	62 81       	ldd	r22, Z+2	; 0x02
    9018:	73 81       	ldd	r23, Z+3	; 0x03
    901a:	cb 01       	movw	r24, r22
    901c:	a0 e0       	ldi	r26, 0x00	; 0
    901e:	b0 e0       	ldi	r27, 0x00	; 0
    9020:	ba 2f       	mov	r27, r26
    9022:	a9 2f       	mov	r26, r25
    9024:	98 2f       	mov	r25, r24
    9026:	88 27       	eor	r24, r24
    9028:	21 81       	ldd	r18, Z+1	; 0x01
    902a:	82 2b       	or	r24, r18
    902c:	ba 2f       	mov	r27, r26
    902e:	a9 2f       	mov	r26, r25
    9030:	98 2f       	mov	r25, r24
    9032:	88 27       	eor	r24, r24
    9034:	20 81       	ld	r18, Z
    9036:	bc 01       	movw	r22, r24
    9038:	cd 01       	movw	r24, r26
    903a:	62 2b       	or	r22, r18
    903c:	08 95       	ret

0000903e <st_dword>:
    903e:	fc 01       	movw	r30, r24
    9040:	40 83       	st	Z, r20
    9042:	51 83       	std	Z+1, r21	; 0x01
    9044:	62 83       	std	Z+2, r22	; 0x02
    9046:	73 83       	std	Z+3, r23	; 0x03
    9048:	08 95       	ret

0000904a <mem_set>:
    904a:	48 0f       	add	r20, r24
    904c:	59 1f       	adc	r21, r25
    904e:	fc 01       	movw	r30, r24
    9050:	61 93       	st	Z+, r22
    9052:	cf 01       	movw	r24, r30
    9054:	e4 17       	cp	r30, r20
    9056:	f5 07       	cpc	r31, r21
    9058:	d1 f7       	brne	.-12     	; 0x904e <mem_set+0x4>
    905a:	08 95       	ret

0000905c <mem_cmp>:
    905c:	dc 01       	movw	r26, r24
    905e:	fb 01       	movw	r30, r22
    9060:	2d 91       	ld	r18, X+
    9062:	81 91       	ld	r24, Z+
    9064:	30 e0       	ldi	r19, 0x00	; 0
    9066:	b9 01       	movw	r22, r18
    9068:	68 1b       	sub	r22, r24
    906a:	71 09       	sbc	r23, r1
    906c:	cb 01       	movw	r24, r22
    906e:	41 50       	subi	r20, 0x01	; 1
    9070:	51 09       	sbc	r21, r1
    9072:	11 f0       	breq	.+4      	; 0x9078 <mem_cmp+0x1c>
    9074:	00 97       	sbiw	r24, 0x00	; 0
    9076:	a1 f3       	breq	.-24     	; 0x9060 <mem_cmp+0x4>
    9078:	08 95       	ret

0000907a <tchar2uni>:
    907a:	0f 93       	push	r16
    907c:	1f 93       	push	r17
    907e:	fc 01       	movw	r30, r24
    9080:	a0 81       	ld	r26, Z
    9082:	b1 81       	ldd	r27, Z+1	; 0x01
    9084:	fd 01       	movw	r30, r26
    9086:	31 96       	adiw	r30, 0x01	; 1
    9088:	4c 91       	ld	r20, X
    908a:	47 fd       	sbrc	r20, 7
    908c:	04 c0       	rjmp	.+8      	; 0x9096 <tchar2uni+0x1c>
    908e:	50 e0       	ldi	r21, 0x00	; 0
    9090:	60 e0       	ldi	r22, 0x00	; 0
    9092:	70 e0       	ldi	r23, 0x00	; 0
    9094:	68 c0       	rjmp	.+208    	; 0x9166 <tchar2uni+0xec>
    9096:	24 2f       	mov	r18, r20
    9098:	20 7e       	andi	r18, 0xE0	; 224
    909a:	20 3c       	cpi	r18, 0xC0	; 192
    909c:	39 f4       	brne	.+14     	; 0x90ac <tchar2uni+0x32>
    909e:	4f 71       	andi	r20, 0x1F	; 31
    90a0:	50 e0       	ldi	r21, 0x00	; 0
    90a2:	60 e0       	ldi	r22, 0x00	; 0
    90a4:	70 e0       	ldi	r23, 0x00	; 0
    90a6:	21 e0       	ldi	r18, 0x01	; 1
    90a8:	30 e0       	ldi	r19, 0x00	; 0
    90aa:	16 c0       	rjmp	.+44     	; 0x90d8 <tchar2uni+0x5e>
    90ac:	24 2f       	mov	r18, r20
    90ae:	20 7f       	andi	r18, 0xF0	; 240
    90b0:	20 3e       	cpi	r18, 0xE0	; 224
    90b2:	39 f4       	brne	.+14     	; 0x90c2 <tchar2uni+0x48>
    90b4:	4f 70       	andi	r20, 0x0F	; 15
    90b6:	50 e0       	ldi	r21, 0x00	; 0
    90b8:	60 e0       	ldi	r22, 0x00	; 0
    90ba:	70 e0       	ldi	r23, 0x00	; 0
    90bc:	22 e0       	ldi	r18, 0x02	; 2
    90be:	30 e0       	ldi	r19, 0x00	; 0
    90c0:	0b c0       	rjmp	.+22     	; 0x90d8 <tchar2uni+0x5e>
    90c2:	24 2f       	mov	r18, r20
    90c4:	28 7f       	andi	r18, 0xF8	; 248
    90c6:	20 3f       	cpi	r18, 0xF0	; 240
    90c8:	09 f0       	breq	.+2      	; 0x90cc <tchar2uni+0x52>
    90ca:	54 c0       	rjmp	.+168    	; 0x9174 <tchar2uni+0xfa>
    90cc:	47 70       	andi	r20, 0x07	; 7
    90ce:	50 e0       	ldi	r21, 0x00	; 0
    90d0:	60 e0       	ldi	r22, 0x00	; 0
    90d2:	70 e0       	ldi	r23, 0x00	; 0
    90d4:	23 e0       	ldi	r18, 0x03	; 3
    90d6:	30 e0       	ldi	r19, 0x00	; 0
    90d8:	31 96       	adiw	r30, 0x01	; 1
    90da:	df 01       	movw	r26, r30
    90dc:	11 97       	sbiw	r26, 0x01	; 1
    90de:	ac 91       	ld	r26, X
    90e0:	ba 2f       	mov	r27, r26
    90e2:	b0 7c       	andi	r27, 0xC0	; 192
    90e4:	b0 38       	cpi	r27, 0x80	; 128
    90e6:	09 f0       	breq	.+2      	; 0x90ea <tchar2uni+0x70>
    90e8:	45 c0       	rjmp	.+138    	; 0x9174 <tchar2uni+0xfa>
    90ea:	b6 e0       	ldi	r27, 0x06	; 6
    90ec:	44 0f       	add	r20, r20
    90ee:	55 1f       	adc	r21, r21
    90f0:	66 1f       	adc	r22, r22
    90f2:	77 1f       	adc	r23, r23
    90f4:	ba 95       	dec	r27
    90f6:	d1 f7       	brne	.-12     	; 0x90ec <tchar2uni+0x72>
    90f8:	af 73       	andi	r26, 0x3F	; 63
    90fa:	4a 2b       	or	r20, r26
    90fc:	21 50       	subi	r18, 0x01	; 1
    90fe:	31 09       	sbc	r19, r1
    9100:	59 f7       	brne	.-42     	; 0x90d8 <tchar2uni+0x5e>
    9102:	8a 01       	movw	r16, r20
    9104:	9b 01       	movw	r18, r22
    9106:	00 58       	subi	r16, 0x80	; 128
    9108:	11 09       	sbc	r17, r1
    910a:	21 09       	sbc	r18, r1
    910c:	31 09       	sbc	r19, r1
    910e:	00 38       	cpi	r16, 0x80	; 128
    9110:	1f 4f       	sbci	r17, 0xFF	; 255
    9112:	20 41       	sbci	r18, 0x10	; 16
    9114:	31 05       	cpc	r19, r1
    9116:	70 f5       	brcc	.+92     	; 0x9174 <tchar2uni+0xfa>
    9118:	8a 01       	movw	r16, r20
    911a:	9b 01       	movw	r18, r22
    911c:	18 5d       	subi	r17, 0xD8	; 216
    911e:	21 09       	sbc	r18, r1
    9120:	31 09       	sbc	r19, r1
    9122:	01 15       	cp	r16, r1
    9124:	18 40       	sbci	r17, 0x08	; 8
    9126:	21 05       	cpc	r18, r1
    9128:	31 05       	cpc	r19, r1
    912a:	20 f1       	brcs	.+72     	; 0x9174 <tchar2uni+0xfa>
    912c:	41 15       	cp	r20, r1
    912e:	51 05       	cpc	r21, r1
    9130:	21 e0       	ldi	r18, 0x01	; 1
    9132:	62 07       	cpc	r22, r18
    9134:	71 05       	cpc	r23, r1
    9136:	b8 f0       	brcs	.+46     	; 0x9166 <tchar2uni+0xec>
    9138:	8a 01       	movw	r16, r20
    913a:	9b 01       	movw	r18, r22
    913c:	21 50       	subi	r18, 0x01	; 1
    913e:	31 09       	sbc	r19, r1
    9140:	a6 e0       	ldi	r26, 0x06	; 6
    9142:	00 0f       	add	r16, r16
    9144:	11 1f       	adc	r17, r17
    9146:	22 1f       	adc	r18, r18
    9148:	33 1f       	adc	r19, r19
    914a:	aa 95       	dec	r26
    914c:	d1 f7       	brne	.-12     	; 0x9142 <tchar2uni+0xc8>
    914e:	00 27       	eor	r16, r16
    9150:	11 27       	eor	r17, r17
    9152:	33 70       	andi	r19, 0x03	; 3
    9154:	53 70       	andi	r21, 0x03	; 3
    9156:	66 27       	eor	r22, r22
    9158:	77 27       	eor	r23, r23
    915a:	5c 6d       	ori	r21, 0xDC	; 220
    915c:	78 6d       	ori	r23, 0xD8	; 216
    915e:	40 2b       	or	r20, r16
    9160:	51 2b       	or	r21, r17
    9162:	62 2b       	or	r22, r18
    9164:	73 2b       	or	r23, r19
    9166:	dc 01       	movw	r26, r24
    9168:	ed 93       	st	X+, r30
    916a:	fc 93       	st	X, r31
    916c:	34 2f       	mov	r19, r20
    916e:	25 2f       	mov	r18, r21
    9170:	cb 01       	movw	r24, r22
    9172:	04 c0       	rjmp	.+8      	; 0x917c <tchar2uni+0x102>
    9174:	3f ef       	ldi	r19, 0xFF	; 255
    9176:	2f ef       	ldi	r18, 0xFF	; 255
    9178:	8f ef       	ldi	r24, 0xFF	; 255
    917a:	9f ef       	ldi	r25, 0xFF	; 255
    917c:	63 2f       	mov	r22, r19
    917e:	72 2f       	mov	r23, r18
    9180:	1f 91       	pop	r17
    9182:	0f 91       	pop	r16
    9184:	08 95       	ret

00009186 <clst2sect>:
    9186:	0f 93       	push	r16
    9188:	1f 93       	push	r17
    918a:	fc 01       	movw	r30, r24
    918c:	9a 01       	movw	r18, r20
    918e:	ab 01       	movw	r20, r22
    9190:	22 50       	subi	r18, 0x02	; 2
    9192:	31 09       	sbc	r19, r1
    9194:	41 09       	sbc	r20, r1
    9196:	51 09       	sbc	r21, r1
    9198:	81 8d       	ldd	r24, Z+25	; 0x19
    919a:	92 8d       	ldd	r25, Z+26	; 0x1a
    919c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    919e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    91a0:	02 97       	sbiw	r24, 0x02	; 2
    91a2:	a1 09       	sbc	r26, r1
    91a4:	b1 09       	sbc	r27, r1
    91a6:	28 17       	cp	r18, r24
    91a8:	39 07       	cpc	r19, r25
    91aa:	4a 07       	cpc	r20, r26
    91ac:	5b 07       	cpc	r21, r27
    91ae:	68 f4       	brcc	.+26     	; 0x91ca <clst2sect+0x44>
    91b0:	a1 85       	ldd	r26, Z+9	; 0x09
    91b2:	b2 85       	ldd	r27, Z+10	; 0x0a
    91b4:	0e 94 66 e4 	call	0x1c8cc	; 0x1c8cc <__muluhisi3>
    91b8:	05 a5       	ldd	r16, Z+45	; 0x2d
    91ba:	16 a5       	ldd	r17, Z+46	; 0x2e
    91bc:	27 a5       	ldd	r18, Z+47	; 0x2f
    91be:	30 a9       	ldd	r19, Z+48	; 0x30
    91c0:	60 0f       	add	r22, r16
    91c2:	71 1f       	adc	r23, r17
    91c4:	82 1f       	adc	r24, r18
    91c6:	93 1f       	adc	r25, r19
    91c8:	03 c0       	rjmp	.+6      	; 0x91d0 <clst2sect+0x4a>
    91ca:	60 e0       	ldi	r22, 0x00	; 0
    91cc:	70 e0       	ldi	r23, 0x00	; 0
    91ce:	cb 01       	movw	r24, r22
    91d0:	1f 91       	pop	r17
    91d2:	0f 91       	pop	r16
    91d4:	08 95       	ret

000091d6 <clmt_clust>:
    91d6:	cf 93       	push	r28
    91d8:	df 93       	push	r29
    91da:	fc 01       	movw	r30, r24
    91dc:	c2 a1       	ldd	r28, Z+34	; 0x22
    91de:	d3 a1       	ldd	r29, Z+35	; 0x23
    91e0:	24 96       	adiw	r28, 0x04	; 4
    91e2:	cb 01       	movw	r24, r22
    91e4:	ba 01       	movw	r22, r20
    91e6:	29 e0       	ldi	r18, 0x09	; 9
    91e8:	96 95       	lsr	r25
    91ea:	87 95       	ror	r24
    91ec:	77 95       	ror	r23
    91ee:	67 95       	ror	r22
    91f0:	2a 95       	dec	r18
    91f2:	d1 f7       	brne	.-12     	; 0x91e8 <clmt_clust+0x12>
    91f4:	01 90       	ld	r0, Z+
    91f6:	f0 81       	ld	r31, Z
    91f8:	e0 2d       	mov	r30, r0
    91fa:	21 85       	ldd	r18, Z+9	; 0x09
    91fc:	32 85       	ldd	r19, Z+10	; 0x0a
    91fe:	40 e0       	ldi	r20, 0x00	; 0
    9200:	50 e0       	ldi	r21, 0x00	; 0
    9202:	0e 94 04 e4 	call	0x1c808	; 0x1c808 <__udivmodsi4>
    9206:	88 81       	ld	r24, Y
    9208:	99 81       	ldd	r25, Y+1	; 0x01
    920a:	aa 81       	ldd	r26, Y+2	; 0x02
    920c:	bb 81       	ldd	r27, Y+3	; 0x03
    920e:	00 97       	sbiw	r24, 0x00	; 0
    9210:	a1 05       	cpc	r26, r1
    9212:	b1 05       	cpc	r27, r1
    9214:	b1 f0       	breq	.+44     	; 0x9242 <clmt_clust+0x6c>
    9216:	28 17       	cp	r18, r24
    9218:	39 07       	cpc	r19, r25
    921a:	4a 07       	cpc	r20, r26
    921c:	5b 07       	cpc	r21, r27
    921e:	30 f0       	brcs	.+12     	; 0x922c <clmt_clust+0x56>
    9220:	28 1b       	sub	r18, r24
    9222:	39 0b       	sbc	r19, r25
    9224:	4a 0b       	sbc	r20, r26
    9226:	5b 0b       	sbc	r21, r27
    9228:	28 96       	adiw	r28, 0x08	; 8
    922a:	ed cf       	rjmp	.-38     	; 0x9206 <clmt_clust+0x30>
    922c:	8c 81       	ldd	r24, Y+4	; 0x04
    922e:	9d 81       	ldd	r25, Y+5	; 0x05
    9230:	ae 81       	ldd	r26, Y+6	; 0x06
    9232:	bf 81       	ldd	r27, Y+7	; 0x07
    9234:	bc 01       	movw	r22, r24
    9236:	cd 01       	movw	r24, r26
    9238:	62 0f       	add	r22, r18
    923a:	73 1f       	adc	r23, r19
    923c:	84 1f       	adc	r24, r20
    923e:	95 1f       	adc	r25, r21
    9240:	03 c0       	rjmp	.+6      	; 0x9248 <clmt_clust+0x72>
    9242:	60 e0       	ldi	r22, 0x00	; 0
    9244:	70 e0       	ldi	r23, 0x00	; 0
    9246:	cb 01       	movw	r24, r22
    9248:	df 91       	pop	r29
    924a:	cf 91       	pop	r28
    924c:	08 95       	ret

0000924e <sum_sfn>:
    924e:	fc 01       	movw	r30, r24
    9250:	9c 01       	movw	r18, r24
    9252:	25 5f       	subi	r18, 0xF5	; 245
    9254:	3f 4f       	sbci	r19, 0xFF	; 255
    9256:	80 e0       	ldi	r24, 0x00	; 0
    9258:	98 2f       	mov	r25, r24
    925a:	90 fb       	bst	r25, 0
    925c:	97 95       	ror	r25
    925e:	97 f9       	bld	r25, 7
    9260:	81 91       	ld	r24, Z+
    9262:	89 0f       	add	r24, r25
    9264:	e2 17       	cp	r30, r18
    9266:	f3 07       	cpc	r31, r19
    9268:	b9 f7       	brne	.-18     	; 0x9258 <sum_sfn+0xa>
    926a:	08 95       	ret

0000926c <get_ldnumber>:
    926c:	cf 93       	push	r28
    926e:	df 93       	push	r29
    9270:	dc 01       	movw	r26, r24
    9272:	ed 91       	ld	r30, X+
    9274:	fc 91       	ld	r31, X
    9276:	11 97       	sbiw	r26, 0x01	; 1
    9278:	30 97       	sbiw	r30, 0x00	; 0
    927a:	f9 f0       	breq	.+62     	; 0x92ba <get_ldnumber+0x4e>
    927c:	9f 01       	movw	r18, r30
    927e:	2f 5f       	subi	r18, 0xFF	; 255
    9280:	3f 4f       	sbci	r19, 0xFF	; 255
    9282:	e9 01       	movw	r28, r18
    9284:	21 97       	sbiw	r28, 0x01	; 1
    9286:	88 81       	ld	r24, Y
    9288:	80 32       	cpi	r24, 0x20	; 32
    928a:	18 f0       	brcs	.+6      	; 0x9292 <get_ldnumber+0x26>
    928c:	8a 33       	cpi	r24, 0x3A	; 58
    928e:	b9 f7       	brne	.-18     	; 0x927e <get_ldnumber+0x12>
    9290:	04 c0       	rjmp	.+8      	; 0x929a <get_ldnumber+0x2e>
    9292:	80 91 bc 17 	lds	r24, 0x17BC	; 0x8017bc <CurrVol>
    9296:	90 e0       	ldi	r25, 0x00	; 0
    9298:	12 c0       	rjmp	.+36     	; 0x92be <get_ldnumber+0x52>
    929a:	90 81       	ld	r25, Z
    929c:	80 ed       	ldi	r24, 0xD0	; 208
    929e:	89 0f       	add	r24, r25
    92a0:	8a 30       	cpi	r24, 0x0A	; 10
    92a2:	58 f4       	brcc	.+22     	; 0x92ba <get_ldnumber+0x4e>
    92a4:	32 96       	adiw	r30, 0x02	; 2
    92a6:	2e 17       	cp	r18, r30
    92a8:	3f 07       	cpc	r19, r31
    92aa:	39 f4       	brne	.+14     	; 0x92ba <get_ldnumber+0x4e>
    92ac:	90 33       	cpi	r25, 0x30	; 48
    92ae:	29 f4       	brne	.+10     	; 0x92ba <get_ldnumber+0x4e>
    92b0:	2d 93       	st	X+, r18
    92b2:	3c 93       	st	X, r19
    92b4:	80 e0       	ldi	r24, 0x00	; 0
    92b6:	90 e0       	ldi	r25, 0x00	; 0
    92b8:	02 c0       	rjmp	.+4      	; 0x92be <get_ldnumber+0x52>
    92ba:	8f ef       	ldi	r24, 0xFF	; 255
    92bc:	9f ef       	ldi	r25, 0xFF	; 255
    92be:	df 91       	pop	r29
    92c0:	cf 91       	pop	r28
    92c2:	08 95       	ret

000092c4 <validate>:
    92c4:	0f 93       	push	r16
    92c6:	1f 93       	push	r17
    92c8:	cf 93       	push	r28
    92ca:	df 93       	push	r29
    92cc:	ec 01       	movw	r28, r24
    92ce:	8b 01       	movw	r16, r22
    92d0:	89 2b       	or	r24, r25
    92d2:	f9 f0       	breq	.+62     	; 0x9312 <validate+0x4e>
    92d4:	e8 81       	ld	r30, Y
    92d6:	f9 81       	ldd	r31, Y+1	; 0x01
    92d8:	30 97       	sbiw	r30, 0x00	; 0
    92da:	d9 f0       	breq	.+54     	; 0x9312 <validate+0x4e>
    92dc:	80 81       	ld	r24, Z
    92de:	88 23       	and	r24, r24
    92e0:	c1 f0       	breq	.+48     	; 0x9312 <validate+0x4e>
    92e2:	2a 81       	ldd	r18, Y+2	; 0x02
    92e4:	3b 81       	ldd	r19, Y+3	; 0x03
    92e6:	85 81       	ldd	r24, Z+5	; 0x05
    92e8:	96 81       	ldd	r25, Z+6	; 0x06
    92ea:	28 17       	cp	r18, r24
    92ec:	39 07       	cpc	r19, r25
    92ee:	89 f4       	brne	.+34     	; 0x9312 <validate+0x4e>
    92f0:	81 81       	ldd	r24, Z+1	; 0x01
    92f2:	0e 94 22 6b 	call	0xd644	; 0xd644 <disk_status>
    92f6:	80 fd       	sbrc	r24, 0
    92f8:	0c c0       	rjmp	.+24     	; 0x9312 <validate+0x4e>
    92fa:	28 81       	ld	r18, Y
    92fc:	39 81       	ldd	r19, Y+1	; 0x01
    92fe:	80 e0       	ldi	r24, 0x00	; 0
    9300:	90 e0       	ldi	r25, 0x00	; 0
    9302:	f8 01       	movw	r30, r16
    9304:	31 83       	std	Z+1, r19	; 0x01
    9306:	20 83       	st	Z, r18
    9308:	df 91       	pop	r29
    930a:	cf 91       	pop	r28
    930c:	1f 91       	pop	r17
    930e:	0f 91       	pop	r16
    9310:	08 95       	ret
    9312:	89 e0       	ldi	r24, 0x09	; 9
    9314:	90 e0       	ldi	r25, 0x00	; 0
    9316:	20 e0       	ldi	r18, 0x00	; 0
    9318:	30 e0       	ldi	r19, 0x00	; 0
    931a:	f3 cf       	rjmp	.-26     	; 0x9302 <validate+0x3e>

0000931c <mem_cpy.part.0>:
    931c:	fb 01       	movw	r30, r22
    931e:	48 0f       	add	r20, r24
    9320:	59 1f       	adc	r21, r25
    9322:	21 91       	ld	r18, Z+
    9324:	dc 01       	movw	r26, r24
    9326:	2d 93       	st	X+, r18
    9328:	cd 01       	movw	r24, r26
    932a:	a4 17       	cp	r26, r20
    932c:	b5 07       	cpc	r27, r21
    932e:	c9 f7       	brne	.-14     	; 0x9322 <mem_cpy.part.0+0x6>
    9330:	08 95       	ret

00009332 <put_utf>:
    9332:	0f 93       	push	r16
    9334:	1f 93       	push	r17
    9336:	fa 01       	movw	r30, r20
    9338:	60 38       	cpi	r22, 0x80	; 128
    933a:	71 05       	cpc	r23, r1
    933c:	81 05       	cpc	r24, r1
    933e:	91 05       	cpc	r25, r1
    9340:	30 f4       	brcc	.+12     	; 0x934e <put_utf+0x1c>
    9342:	23 2b       	or	r18, r19
    9344:	09 f4       	brne	.+2      	; 0x9348 <put_utf+0x16>
    9346:	9e c0       	rjmp	.+316    	; 0x9484 <put_utf+0x152>
    9348:	60 83       	st	Z, r22
    934a:	81 e0       	ldi	r24, 0x01	; 1
    934c:	9c c0       	rjmp	.+312    	; 0x9486 <put_utf+0x154>
    934e:	61 15       	cp	r22, r1
    9350:	48 e0       	ldi	r20, 0x08	; 8
    9352:	74 07       	cpc	r23, r20
    9354:	81 05       	cpc	r24, r1
    9356:	91 05       	cpc	r25, r1
    9358:	a0 f4       	brcc	.+40     	; 0x9382 <put_utf+0x50>
    935a:	22 30       	cpi	r18, 0x02	; 2
    935c:	31 05       	cpc	r19, r1
    935e:	08 f4       	brcc	.+2      	; 0x9362 <put_utf+0x30>
    9360:	91 c0       	rjmp	.+290    	; 0x9484 <put_utf+0x152>
    9362:	8b 01       	movw	r16, r22
    9364:	9c 01       	movw	r18, r24
    9366:	76 e0       	ldi	r23, 0x06	; 6
    9368:	36 95       	lsr	r19
    936a:	27 95       	ror	r18
    936c:	17 95       	ror	r17
    936e:	07 95       	ror	r16
    9370:	7a 95       	dec	r23
    9372:	d1 f7       	brne	.-12     	; 0x9368 <put_utf+0x36>
    9374:	00 6c       	ori	r16, 0xC0	; 192
    9376:	00 83       	st	Z, r16
    9378:	6f 73       	andi	r22, 0x3F	; 63
    937a:	60 68       	ori	r22, 0x80	; 128
    937c:	61 83       	std	Z+1, r22	; 0x01
    937e:	82 e0       	ldi	r24, 0x02	; 2
    9380:	82 c0       	rjmp	.+260    	; 0x9486 <put_utf+0x154>
    9382:	61 15       	cp	r22, r1
    9384:	71 05       	cpc	r23, r1
    9386:	41 e0       	ldi	r20, 0x01	; 1
    9388:	84 07       	cpc	r24, r20
    938a:	91 05       	cpc	r25, r1
    938c:	58 f5       	brcc	.+86     	; 0x93e4 <put_utf+0xb2>
    938e:	23 30       	cpi	r18, 0x03	; 3
    9390:	31 05       	cpc	r19, r1
    9392:	08 f4       	brcc	.+2      	; 0x9396 <put_utf+0x64>
    9394:	77 c0       	rjmp	.+238    	; 0x9484 <put_utf+0x152>
    9396:	8b 01       	movw	r16, r22
    9398:	9c 01       	movw	r18, r24
    939a:	18 5d       	subi	r17, 0xD8	; 216
    939c:	21 09       	sbc	r18, r1
    939e:	31 09       	sbc	r19, r1
    93a0:	01 15       	cp	r16, r1
    93a2:	18 40       	sbci	r17, 0x08	; 8
    93a4:	21 05       	cpc	r18, r1
    93a6:	31 05       	cpc	r19, r1
    93a8:	08 f4       	brcc	.+2      	; 0x93ac <put_utf+0x7a>
    93aa:	6c c0       	rjmp	.+216    	; 0x9484 <put_utf+0x152>
    93ac:	8b 01       	movw	r16, r22
    93ae:	9c 01       	movw	r18, r24
    93b0:	4c e0       	ldi	r20, 0x0C	; 12
    93b2:	36 95       	lsr	r19
    93b4:	27 95       	ror	r18
    93b6:	17 95       	ror	r17
    93b8:	07 95       	ror	r16
    93ba:	4a 95       	dec	r20
    93bc:	d1 f7       	brne	.-12     	; 0x93b2 <put_utf+0x80>
    93be:	00 6e       	ori	r16, 0xE0	; 224
    93c0:	00 83       	st	Z, r16
    93c2:	8b 01       	movw	r16, r22
    93c4:	9c 01       	movw	r18, r24
    93c6:	56 e0       	ldi	r21, 0x06	; 6
    93c8:	36 95       	lsr	r19
    93ca:	27 95       	ror	r18
    93cc:	17 95       	ror	r17
    93ce:	07 95       	ror	r16
    93d0:	5a 95       	dec	r21
    93d2:	d1 f7       	brne	.-12     	; 0x93c8 <put_utf+0x96>
    93d4:	0f 73       	andi	r16, 0x3F	; 63
    93d6:	00 68       	ori	r16, 0x80	; 128
    93d8:	01 83       	std	Z+1, r16	; 0x01
    93da:	6f 73       	andi	r22, 0x3F	; 63
    93dc:	60 68       	ori	r22, 0x80	; 128
    93de:	62 83       	std	Z+2, r22	; 0x02
    93e0:	83 e0       	ldi	r24, 0x03	; 3
    93e2:	51 c0       	rjmp	.+162    	; 0x9486 <put_utf+0x154>
    93e4:	24 30       	cpi	r18, 0x04	; 4
    93e6:	31 05       	cpc	r19, r1
    93e8:	08 f4       	brcc	.+2      	; 0x93ec <put_utf+0xba>
    93ea:	4c c0       	rjmp	.+152    	; 0x9484 <put_utf+0x152>
    93ec:	8b 01       	movw	r16, r22
    93ee:	9c 01       	movw	r18, r24
    93f0:	00 27       	eor	r16, r16
    93f2:	11 27       	eor	r17, r17
    93f4:	38 5d       	subi	r19, 0xD8	; 216
    93f6:	b6 e0       	ldi	r27, 0x06	; 6
    93f8:	36 95       	lsr	r19
    93fa:	27 95       	ror	r18
    93fc:	17 95       	ror	r17
    93fe:	07 95       	ror	r16
    9400:	ba 95       	dec	r27
    9402:	d1 f7       	brne	.-12     	; 0x93f8 <put_utf+0xc6>
    9404:	01 15       	cp	r16, r1
    9406:	11 05       	cpc	r17, r1
    9408:	40 e1       	ldi	r20, 0x10	; 16
    940a:	24 07       	cpc	r18, r20
    940c:	31 05       	cpc	r19, r1
    940e:	d0 f5       	brcc	.+116    	; 0x9484 <put_utf+0x152>
    9410:	dc 01       	movw	r26, r24
    9412:	cb 01       	movw	r24, r22
    9414:	aa 27       	eor	r26, r26
    9416:	bb 27       	eor	r27, r27
    9418:	9c 5d       	subi	r25, 0xDC	; 220
    941a:	a1 09       	sbc	r26, r1
    941c:	b1 09       	sbc	r27, r1
    941e:	81 15       	cp	r24, r1
    9420:	44 e0       	ldi	r20, 0x04	; 4
    9422:	94 07       	cpc	r25, r20
    9424:	a1 05       	cpc	r26, r1
    9426:	b1 05       	cpc	r27, r1
    9428:	68 f5       	brcc	.+90     	; 0x9484 <put_utf+0x152>
    942a:	80 2b       	or	r24, r16
    942c:	91 2b       	or	r25, r17
    942e:	a2 2b       	or	r26, r18
    9430:	b3 2b       	or	r27, r19
    9432:	11 96       	adiw	r26, 0x01	; 1
    9434:	ac 01       	movw	r20, r24
    9436:	bd 01       	movw	r22, r26
    9438:	22 e1       	ldi	r18, 0x12	; 18
    943a:	76 95       	lsr	r23
    943c:	67 95       	ror	r22
    943e:	57 95       	ror	r21
    9440:	47 95       	ror	r20
    9442:	2a 95       	dec	r18
    9444:	d1 f7       	brne	.-12     	; 0x943a <put_utf+0x108>
    9446:	40 6f       	ori	r20, 0xF0	; 240
    9448:	40 83       	st	Z, r20
    944a:	ac 01       	movw	r20, r24
    944c:	bd 01       	movw	r22, r26
    944e:	3c e0       	ldi	r19, 0x0C	; 12
    9450:	76 95       	lsr	r23
    9452:	67 95       	ror	r22
    9454:	57 95       	ror	r21
    9456:	47 95       	ror	r20
    9458:	3a 95       	dec	r19
    945a:	d1 f7       	brne	.-12     	; 0x9450 <put_utf+0x11e>
    945c:	4f 73       	andi	r20, 0x3F	; 63
    945e:	40 68       	ori	r20, 0x80	; 128
    9460:	41 83       	std	Z+1, r20	; 0x01
    9462:	ac 01       	movw	r20, r24
    9464:	bd 01       	movw	r22, r26
    9466:	a6 e0       	ldi	r26, 0x06	; 6
    9468:	76 95       	lsr	r23
    946a:	67 95       	ror	r22
    946c:	57 95       	ror	r21
    946e:	47 95       	ror	r20
    9470:	aa 95       	dec	r26
    9472:	d1 f7       	brne	.-12     	; 0x9468 <put_utf+0x136>
    9474:	4f 73       	andi	r20, 0x3F	; 63
    9476:	40 68       	ori	r20, 0x80	; 128
    9478:	42 83       	std	Z+2, r20	; 0x02
    947a:	8f 73       	andi	r24, 0x3F	; 63
    947c:	80 68       	ori	r24, 0x80	; 128
    947e:	83 83       	std	Z+3, r24	; 0x03
    9480:	84 e0       	ldi	r24, 0x04	; 4
    9482:	01 c0       	rjmp	.+2      	; 0x9486 <put_utf+0x154>
    9484:	80 e0       	ldi	r24, 0x00	; 0
    9486:	1f 91       	pop	r17
    9488:	0f 91       	pop	r16
    948a:	08 95       	ret

0000948c <get_fileinfo>:
    948c:	a0 e0       	ldi	r26, 0x00	; 0
    948e:	b0 e0       	ldi	r27, 0x00	; 0
    9490:	ec e4       	ldi	r30, 0x4C	; 76
    9492:	fa e4       	ldi	r31, 0x4A	; 74
    9494:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
    9498:	fc 01       	movw	r30, r24
    949a:	60 80       	ld	r6, Z
    949c:	71 80       	ldd	r7, Z+1	; 0x01
    949e:	fb 01       	movw	r30, r22
    94a0:	16 8a       	std	Z+22, r1	; 0x16
    94a2:	fc 01       	movw	r30, r24
    94a4:	06 89       	ldd	r16, Z+22	; 0x16
    94a6:	17 89       	ldd	r17, Z+23	; 0x17
    94a8:	20 8d       	ldd	r18, Z+24	; 0x18
    94aa:	31 8d       	ldd	r19, Z+25	; 0x19
    94ac:	01 15       	cp	r16, r1
    94ae:	11 05       	cpc	r17, r1
    94b0:	21 05       	cpc	r18, r1
    94b2:	31 05       	cpc	r19, r1
    94b4:	09 f4       	brne	.+2      	; 0x94b8 <get_fileinfo+0x2c>
    94b6:	f5 c0       	rjmp	.+490    	; 0x96a2 <get_fileinfo+0x216>
    94b8:	eb 01       	movw	r28, r22
    94ba:	8c 01       	movw	r16, r24
    94bc:	80 a5       	ldd	r24, Z+40	; 0x28
    94be:	91 a5       	ldd	r25, Z+41	; 0x29
    94c0:	a2 a5       	ldd	r26, Z+42	; 0x2a
    94c2:	b3 a5       	ldd	r27, Z+43	; 0x2b
    94c4:	8f 3f       	cpi	r24, 0xFF	; 255
    94c6:	9f 4f       	sbci	r25, 0xFF	; 255
    94c8:	af 4f       	sbci	r26, 0xFF	; 255
    94ca:	bf 4f       	sbci	r27, 0xFF	; 255
    94cc:	09 f4       	brne	.+2      	; 0x94d0 <get_fileinfo+0x44>
    94ce:	48 c0       	rjmp	.+144    	; 0x9560 <get_fileinfo+0xd4>
    94d0:	a1 2c       	mov	r10, r1
    94d2:	b1 2c       	mov	r11, r1
    94d4:	c1 2c       	mov	r12, r1
    94d6:	d1 2c       	mov	r13, r1
    94d8:	e1 2c       	mov	r14, r1
    94da:	f1 2c       	mov	r15, r1
    94dc:	88 24       	eor	r8, r8
    94de:	8a 94       	dec	r8
    94e0:	91 2c       	mov	r9, r1
    94e2:	f3 01       	movw	r30, r6
    94e4:	83 85       	ldd	r24, Z+11	; 0x0b
    94e6:	94 85       	ldd	r25, Z+12	; 0x0c
    94e8:	fc 01       	movw	r30, r24
    94ea:	ea 0d       	add	r30, r10
    94ec:	fb 1d       	adc	r31, r11
    94ee:	80 81       	ld	r24, Z
    94f0:	91 81       	ldd	r25, Z+1	; 0x01
    94f2:	00 97       	sbiw	r24, 0x00	; 0
    94f4:	69 f1       	breq	.+90     	; 0x9550 <get_fileinfo+0xc4>
    94f6:	c1 14       	cp	r12, r1
    94f8:	d1 04       	cpc	r13, r1
    94fa:	29 f4       	brne	.+10     	; 0x9506 <get_fileinfo+0x7a>
    94fc:	9c 01       	movw	r18, r24
    94fe:	38 5d       	subi	r19, 0xD8	; 216
    9500:	21 15       	cp	r18, r1
    9502:	38 40       	sbci	r19, 0x08	; 8
    9504:	f0 f0       	brcs	.+60     	; 0x9542 <get_fileinfo+0xb6>
    9506:	a7 01       	movw	r20, r14
    9508:	4a 5e       	subi	r20, 0xEA	; 234
    950a:	5f 4f       	sbci	r21, 0xFF	; 255
    950c:	4c 0f       	add	r20, r28
    950e:	5d 1f       	adc	r21, r29
    9510:	16 01       	movw	r2, r12
    9512:	41 2c       	mov	r4, r1
    9514:	51 2c       	mov	r5, r1
    9516:	21 01       	movw	r4, r2
    9518:	33 24       	eor	r3, r3
    951a:	22 24       	eor	r2, r2
    951c:	a0 e0       	ldi	r26, 0x00	; 0
    951e:	b0 e0       	ldi	r27, 0x00	; 0
    9520:	bc 01       	movw	r22, r24
    9522:	cd 01       	movw	r24, r26
    9524:	62 29       	or	r22, r2
    9526:	73 29       	or	r23, r3
    9528:	84 29       	or	r24, r4
    952a:	95 29       	or	r25, r5
    952c:	94 01       	movw	r18, r8
    952e:	2e 19       	sub	r18, r14
    9530:	3f 09       	sbc	r19, r15
    9532:	ff de       	rcall	.-514    	; 0x9332 <put_utf>
    9534:	90 e0       	ldi	r25, 0x00	; 0
    9536:	00 97       	sbiw	r24, 0x00	; 0
    9538:	49 f0       	breq	.+18     	; 0x954c <get_fileinfo+0xc0>
    953a:	e8 0e       	add	r14, r24
    953c:	f9 1e       	adc	r15, r25
    953e:	80 e0       	ldi	r24, 0x00	; 0
    9540:	90 e0       	ldi	r25, 0x00	; 0
    9542:	e2 e0       	ldi	r30, 0x02	; 2
    9544:	ae 0e       	add	r10, r30
    9546:	b1 1c       	adc	r11, r1
    9548:	6c 01       	movw	r12, r24
    954a:	cb cf       	rjmp	.-106    	; 0x94e2 <get_fileinfo+0x56>
    954c:	e1 2c       	mov	r14, r1
    954e:	f1 2c       	mov	r15, r1
    9550:	cd 28       	or	r12, r13
    9552:	11 f0       	breq	.+4      	; 0x9558 <get_fileinfo+0xcc>
    9554:	e1 2c       	mov	r14, r1
    9556:	f1 2c       	mov	r15, r1
    9558:	fe 01       	movw	r30, r28
    955a:	ee 0d       	add	r30, r14
    955c:	ff 1d       	adc	r31, r15
    955e:	16 8a       	std	Z+22, r1	; 0x16
    9560:	e1 2c       	mov	r14, r1
    9562:	f1 2c       	mov	r15, r1
    9564:	80 e0       	ldi	r24, 0x00	; 0
    9566:	90 e0       	ldi	r25, 0x00	; 0
    9568:	2c e0       	ldi	r18, 0x0C	; 12
    956a:	a2 2e       	mov	r10, r18
    956c:	b1 2c       	mov	r11, r1
    956e:	3e e2       	ldi	r19, 0x2E	; 46
    9570:	93 2e       	mov	r9, r19
    9572:	6c 01       	movw	r12, r24
    9574:	ff ef       	ldi	r31, 0xFF	; 255
    9576:	cf 1a       	sub	r12, r31
    9578:	df 0a       	sbc	r13, r31
    957a:	f8 01       	movw	r30, r16
    957c:	22 8d       	ldd	r18, Z+26	; 0x1a
    957e:	33 8d       	ldd	r19, Z+27	; 0x1b
    9580:	f9 01       	movw	r30, r18
    9582:	e8 0f       	add	r30, r24
    9584:	f9 1f       	adc	r31, r25
    9586:	80 81       	ld	r24, Z
    9588:	90 e0       	ldi	r25, 0x00	; 0
    958a:	80 32       	cpi	r24, 0x20	; 32
    958c:	91 05       	cpc	r25, r1
    958e:	71 f1       	breq	.+92     	; 0x95ec <get_fileinfo+0x160>
    9590:	85 30       	cpi	r24, 0x05	; 5
    9592:	91 05       	cpc	r25, r1
    9594:	11 f4       	brne	.+4      	; 0x959a <get_fileinfo+0x10e>
    9596:	85 ee       	ldi	r24, 0xE5	; 229
    9598:	90 e0       	ldi	r25, 0x00	; 0
    959a:	f9 e0       	ldi	r31, 0x09	; 9
    959c:	cf 16       	cp	r12, r31
    959e:	d1 04       	cpc	r13, r1
    95a0:	59 f4       	brne	.+22     	; 0x95b8 <get_fileinfo+0x12c>
    95a2:	2c e0       	ldi	r18, 0x0C	; 12
    95a4:	e2 16       	cp	r14, r18
    95a6:	f1 04       	cpc	r15, r1
    95a8:	38 f4       	brcc	.+14     	; 0x95b8 <get_fileinfo+0x12c>
    95aa:	fe 01       	movw	r30, r28
    95ac:	ee 0d       	add	r30, r14
    95ae:	ff 1d       	adc	r31, r15
    95b0:	91 86       	std	Z+9, r9	; 0x09
    95b2:	f7 01       	movw	r30, r14
    95b4:	31 96       	adiw	r30, 0x01	; 1
    95b6:	7f 01       	movw	r14, r30
    95b8:	65 eb       	ldi	r22, 0xB5	; 181
    95ba:	71 e0       	ldi	r23, 0x01	; 1
    95bc:	0e 94 ab 6a 	call	0xd556	; 0xd556 <ff_oem2uni>
    95c0:	00 97       	sbiw	r24, 0x00	; 0
    95c2:	19 f4       	brne	.+6      	; 0x95ca <get_fileinfo+0x13e>
    95c4:	e1 2c       	mov	r14, r1
    95c6:	f1 2c       	mov	r15, r1
    95c8:	16 c0       	rjmp	.+44     	; 0x95f6 <get_fileinfo+0x16a>
    95ca:	a7 01       	movw	r20, r14
    95cc:	47 5f       	subi	r20, 0xF7	; 247
    95ce:	5f 4f       	sbci	r21, 0xFF	; 255
    95d0:	4c 0f       	add	r20, r28
    95d2:	5d 1f       	adc	r21, r29
    95d4:	bc 01       	movw	r22, r24
    95d6:	80 e0       	ldi	r24, 0x00	; 0
    95d8:	90 e0       	ldi	r25, 0x00	; 0
    95da:	95 01       	movw	r18, r10
    95dc:	2e 19       	sub	r18, r14
    95de:	3f 09       	sbc	r19, r15
    95e0:	a8 de       	rcall	.-688    	; 0x9332 <put_utf>
    95e2:	90 e0       	ldi	r25, 0x00	; 0
    95e4:	00 97       	sbiw	r24, 0x00	; 0
    95e6:	71 f3       	breq	.-36     	; 0x95c4 <get_fileinfo+0x138>
    95e8:	e8 0e       	add	r14, r24
    95ea:	f9 1e       	adc	r15, r25
    95ec:	c6 01       	movw	r24, r12
    95ee:	8b 30       	cpi	r24, 0x0B	; 11
    95f0:	91 05       	cpc	r25, r1
    95f2:	09 f0       	breq	.+2      	; 0x95f6 <get_fileinfo+0x16a>
    95f4:	be cf       	rjmp	.-132    	; 0x9572 <get_fileinfo+0xe6>
    95f6:	fe 01       	movw	r30, r28
    95f8:	ee 0d       	add	r30, r14
    95fa:	ff 1d       	adc	r31, r15
    95fc:	11 86       	std	Z+9, r1	; 0x09
    95fe:	8e 89       	ldd	r24, Y+22	; 0x16
    9600:	81 11       	cpse	r24, r1
    9602:	36 c0       	rjmp	.+108    	; 0x9670 <get_fileinfo+0x1e4>
    9604:	e1 14       	cp	r14, r1
    9606:	f1 04       	cpc	r15, r1
    9608:	31 f0       	breq	.+12     	; 0x9616 <get_fileinfo+0x18a>
    960a:	de 01       	movw	r26, r28
    960c:	19 96       	adiw	r26, 0x09	; 9
    960e:	58 e0       	ldi	r21, 0x08	; 8
    9610:	20 e0       	ldi	r18, 0x00	; 0
    9612:	30 e0       	ldi	r19, 0x00	; 0
    9614:	14 c0       	rjmp	.+40     	; 0x963e <get_fileinfo+0x1b2>
    9616:	8f e3       	ldi	r24, 0x3F	; 63
    9618:	8e 8b       	std	Y+22, r24	; 0x16
    961a:	21 e0       	ldi	r18, 0x01	; 1
    961c:	30 e0       	ldi	r19, 0x00	; 0
    961e:	1c c0       	rjmp	.+56     	; 0x9658 <get_fileinfo+0x1cc>
    9620:	90 e0       	ldi	r25, 0x00	; 0
    9622:	8e 32       	cpi	r24, 0x2E	; 46
    9624:	91 05       	cpc	r25, r1
    9626:	09 f4       	brne	.+2      	; 0x962a <get_fileinfo+0x19e>
    9628:	50 e1       	ldi	r21, 0x10	; 16
    962a:	bc 01       	movw	r22, r24
    962c:	61 54       	subi	r22, 0x41	; 65
    962e:	71 09       	sbc	r23, r1
    9630:	6a 31       	cpi	r22, 0x1A	; 26
    9632:	71 05       	cpc	r23, r1
    9634:	40 f0       	brcs	.+16     	; 0x9646 <get_fileinfo+0x1ba>
    9636:	fd 01       	movw	r30, r26
    9638:	84 87       	std	Z+12, r24	; 0x0c
    963a:	2f 5f       	subi	r18, 0xFF	; 255
    963c:	3f 4f       	sbci	r19, 0xFF	; 255
    963e:	8d 91       	ld	r24, X+
    9640:	81 11       	cpse	r24, r1
    9642:	ee cf       	rjmp	.-36     	; 0x9620 <get_fileinfo+0x194>
    9644:	09 c0       	rjmp	.+18     	; 0x9658 <get_fileinfo+0x1cc>
    9646:	f8 01       	movw	r30, r16
    9648:	62 8d       	ldd	r22, Z+26	; 0x1a
    964a:	73 8d       	ldd	r23, Z+27	; 0x1b
    964c:	fb 01       	movw	r30, r22
    964e:	44 85       	ldd	r20, Z+12	; 0x0c
    9650:	45 23       	and	r20, r21
    9652:	89 f3       	breq	.-30     	; 0x9636 <get_fileinfo+0x1aa>
    9654:	80 96       	adiw	r24, 0x20	; 32
    9656:	ef cf       	rjmp	.-34     	; 0x9636 <get_fileinfo+0x1aa>
    9658:	fe 01       	movw	r30, r28
    965a:	e2 0f       	add	r30, r18
    965c:	f3 1f       	adc	r31, r19
    965e:	16 8a       	std	Z+22, r1	; 0x16
    9660:	f8 01       	movw	r30, r16
    9662:	82 8d       	ldd	r24, Z+26	; 0x1a
    9664:	93 8d       	ldd	r25, Z+27	; 0x1b
    9666:	fc 01       	movw	r30, r24
    9668:	84 85       	ldd	r24, Z+12	; 0x0c
    966a:	81 11       	cpse	r24, r1
    966c:	01 c0       	rjmp	.+2      	; 0x9670 <get_fileinfo+0x1e4>
    966e:	19 86       	std	Y+9, r1	; 0x09
    9670:	f8 01       	movw	r30, r16
    9672:	82 8d       	ldd	r24, Z+26	; 0x1a
    9674:	93 8d       	ldd	r25, Z+27	; 0x1b
    9676:	fc 01       	movw	r30, r24
    9678:	83 85       	ldd	r24, Z+11	; 0x0b
    967a:	88 87       	std	Y+8, r24	; 0x08
    967c:	f8 01       	movw	r30, r16
    967e:	02 8d       	ldd	r16, Z+26	; 0x1a
    9680:	13 8d       	ldd	r17, Z+27	; 0x1b
    9682:	c8 01       	movw	r24, r16
    9684:	4c 96       	adiw	r24, 0x1c	; 28
    9686:	c6 dc       	rcall	.-1652   	; 0x9014 <ld_dword>
    9688:	68 83       	st	Y, r22
    968a:	79 83       	std	Y+1, r23	; 0x01
    968c:	8a 83       	std	Y+2, r24	; 0x02
    968e:	9b 83       	std	Y+3, r25	; 0x03
    9690:	f8 01       	movw	r30, r16
    9692:	86 89       	ldd	r24, Z+22	; 0x16
    9694:	97 89       	ldd	r25, Z+23	; 0x17
    9696:	9f 83       	std	Y+7, r25	; 0x07
    9698:	8e 83       	std	Y+6, r24	; 0x06
    969a:	80 8d       	ldd	r24, Z+24	; 0x18
    969c:	91 8d       	ldd	r25, Z+25	; 0x19
    969e:	9d 83       	std	Y+5, r25	; 0x05
    96a0:	8c 83       	std	Y+4, r24	; 0x04
    96a2:	cd b7       	in	r28, 0x3d	; 61
    96a4:	de b7       	in	r29, 0x3e	; 62
    96a6:	e2 e1       	ldi	r30, 0x12	; 18
    96a8:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

000096ac <ld_clust.isra.4>:
    96ac:	fb 01       	movw	r30, r22
    96ae:	42 8d       	ldd	r20, Z+26	; 0x1a
    96b0:	53 8d       	ldd	r21, Z+27	; 0x1b
    96b2:	60 e0       	ldi	r22, 0x00	; 0
    96b4:	70 e0       	ldi	r23, 0x00	; 0
    96b6:	83 30       	cpi	r24, 0x03	; 3
    96b8:	59 f4       	brne	.+22     	; 0x96d0 <ld_clust.isra.4+0x24>
    96ba:	84 89       	ldd	r24, Z+20	; 0x14
    96bc:	95 89       	ldd	r25, Z+21	; 0x15
    96be:	a0 e0       	ldi	r26, 0x00	; 0
    96c0:	b0 e0       	ldi	r27, 0x00	; 0
    96c2:	dc 01       	movw	r26, r24
    96c4:	99 27       	eor	r25, r25
    96c6:	88 27       	eor	r24, r24
    96c8:	48 2b       	or	r20, r24
    96ca:	59 2b       	or	r21, r25
    96cc:	6a 2b       	or	r22, r26
    96ce:	7b 2b       	or	r23, r27
    96d0:	cb 01       	movw	r24, r22
    96d2:	ba 01       	movw	r22, r20
    96d4:	08 95       	ret

000096d6 <st_clust.isra.5>:
    96d6:	fb 01       	movw	r30, r22
    96d8:	22 8f       	std	Z+26, r18	; 0x1a
    96da:	33 8f       	std	Z+27, r19	; 0x1b
    96dc:	dc 01       	movw	r26, r24
    96de:	8c 91       	ld	r24, X
    96e0:	83 30       	cpi	r24, 0x03	; 3
    96e2:	29 f4       	brne	.+10     	; 0x96ee <st_clust.isra.5+0x18>
    96e4:	ca 01       	movw	r24, r20
    96e6:	aa 27       	eor	r26, r26
    96e8:	bb 27       	eor	r27, r27
    96ea:	84 8b       	std	Z+20, r24	; 0x14
    96ec:	95 8b       	std	Z+21, r25	; 0x15
    96ee:	08 95       	ret

000096f0 <sync_window.part.6>:
    96f0:	8f 92       	push	r8
    96f2:	9f 92       	push	r9
    96f4:	af 92       	push	r10
    96f6:	bf 92       	push	r11
    96f8:	ef 92       	push	r14
    96fa:	ff 92       	push	r15
    96fc:	0f 93       	push	r16
    96fe:	1f 93       	push	r17
    9700:	cf 93       	push	r28
    9702:	df 93       	push	r29
    9704:	ec 01       	movw	r28, r24
    9706:	7c 01       	movw	r14, r24
    9708:	45 e3       	ldi	r20, 0x35	; 53
    970a:	e4 0e       	add	r14, r20
    970c:	f1 1c       	adc	r15, r1
    970e:	29 a9       	ldd	r18, Y+49	; 0x31
    9710:	3a a9       	ldd	r19, Y+50	; 0x32
    9712:	4b a9       	ldd	r20, Y+51	; 0x33
    9714:	5c a9       	ldd	r21, Y+52	; 0x34
    9716:	01 e0       	ldi	r16, 0x01	; 1
    9718:	10 e0       	ldi	r17, 0x00	; 0
    971a:	b7 01       	movw	r22, r14
    971c:	89 81       	ldd	r24, Y+1	; 0x01
    971e:	0e 94 3e 6b 	call	0xd67c	; 0xd67c <disk_write>
    9722:	89 2b       	or	r24, r25
    9724:	41 f5       	brne	.+80     	; 0x9776 <sync_window.part.6+0x86>
    9726:	1b 82       	std	Y+3, r1	; 0x03
    9728:	09 a9       	ldd	r16, Y+49	; 0x31
    972a:	1a a9       	ldd	r17, Y+50	; 0x32
    972c:	2b a9       	ldd	r18, Y+51	; 0x33
    972e:	3c a9       	ldd	r19, Y+52	; 0x34
    9730:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9732:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9734:	af 8d       	ldd	r26, Y+31	; 0x1f
    9736:	b8 a1       	ldd	r27, Y+32	; 0x20
    9738:	8d a0       	ldd	r8, Y+37	; 0x25
    973a:	9e a0       	ldd	r9, Y+38	; 0x26
    973c:	af a0       	ldd	r10, Y+39	; 0x27
    973e:	b8 a4       	ldd	r11, Y+40	; 0x28
    9740:	b9 01       	movw	r22, r18
    9742:	a8 01       	movw	r20, r16
    9744:	48 19       	sub	r20, r8
    9746:	59 09       	sbc	r21, r9
    9748:	6a 09       	sbc	r22, r10
    974a:	7b 09       	sbc	r23, r11
    974c:	48 17       	cp	r20, r24
    974e:	59 07       	cpc	r21, r25
    9750:	6a 07       	cpc	r22, r26
    9752:	7b 07       	cpc	r23, r27
    9754:	98 f4       	brcc	.+38     	; 0x977c <sync_window.part.6+0x8c>
    9756:	6a 81       	ldd	r22, Y+2	; 0x02
    9758:	62 30       	cpi	r22, 0x02	; 2
    975a:	81 f4       	brne	.+32     	; 0x977c <sync_window.part.6+0x8c>
    975c:	a9 01       	movw	r20, r18
    975e:	98 01       	movw	r18, r16
    9760:	28 0f       	add	r18, r24
    9762:	39 1f       	adc	r19, r25
    9764:	4a 1f       	adc	r20, r26
    9766:	5b 1f       	adc	r21, r27
    9768:	01 e0       	ldi	r16, 0x01	; 1
    976a:	10 e0       	ldi	r17, 0x00	; 0
    976c:	b7 01       	movw	r22, r14
    976e:	89 81       	ldd	r24, Y+1	; 0x01
    9770:	0e 94 3e 6b 	call	0xd67c	; 0xd67c <disk_write>
    9774:	03 c0       	rjmp	.+6      	; 0x977c <sync_window.part.6+0x8c>
    9776:	81 e0       	ldi	r24, 0x01	; 1
    9778:	90 e0       	ldi	r25, 0x00	; 0
    977a:	02 c0       	rjmp	.+4      	; 0x9780 <sync_window.part.6+0x90>
    977c:	80 e0       	ldi	r24, 0x00	; 0
    977e:	90 e0       	ldi	r25, 0x00	; 0
    9780:	df 91       	pop	r29
    9782:	cf 91       	pop	r28
    9784:	1f 91       	pop	r17
    9786:	0f 91       	pop	r16
    9788:	ff 90       	pop	r15
    978a:	ef 90       	pop	r14
    978c:	bf 90       	pop	r11
    978e:	af 90       	pop	r10
    9790:	9f 90       	pop	r9
    9792:	8f 90       	pop	r8
    9794:	08 95       	ret

00009796 <sync_fs>:
    9796:	ef 92       	push	r14
    9798:	ff 92       	push	r15
    979a:	0f 93       	push	r16
    979c:	1f 93       	push	r17
    979e:	cf 93       	push	r28
    97a0:	df 93       	push	r29
    97a2:	ec 01       	movw	r28, r24
    97a4:	8b 81       	ldd	r24, Y+3	; 0x03
    97a6:	81 11       	cpse	r24, r1
    97a8:	05 c0       	rjmp	.+10     	; 0x97b4 <sync_fs+0x1e>
    97aa:	88 81       	ld	r24, Y
    97ac:	83 30       	cpi	r24, 0x03	; 3
    97ae:	09 f0       	breq	.+2      	; 0x97b2 <sync_fs+0x1c>
    97b0:	52 c0       	rjmp	.+164    	; 0x9856 <sync_fs+0xc0>
    97b2:	06 c0       	rjmp	.+12     	; 0x97c0 <sync_fs+0x2a>
    97b4:	ce 01       	movw	r24, r28
    97b6:	9c df       	rcall	.-200    	; 0x96f0 <sync_window.part.6>
    97b8:	00 97       	sbiw	r24, 0x00	; 0
    97ba:	09 f0       	breq	.+2      	; 0x97be <sync_fs+0x28>
    97bc:	59 c0       	rjmp	.+178    	; 0x9870 <sync_fs+0xda>
    97be:	f5 cf       	rjmp	.-22     	; 0x97aa <sync_fs+0x14>
    97c0:	8c 81       	ldd	r24, Y+4	; 0x04
    97c2:	81 30       	cpi	r24, 0x01	; 1
    97c4:	09 f0       	breq	.+2      	; 0x97c8 <sync_fs+0x32>
    97c6:	47 c0       	rjmp	.+142    	; 0x9856 <sync_fs+0xc0>
    97c8:	40 e0       	ldi	r20, 0x00	; 0
    97ca:	52 e0       	ldi	r21, 0x02	; 2
    97cc:	60 e0       	ldi	r22, 0x00	; 0
    97ce:	70 e0       	ldi	r23, 0x00	; 0
    97d0:	7e 01       	movw	r14, r28
    97d2:	85 e3       	ldi	r24, 0x35	; 53
    97d4:	e8 0e       	add	r14, r24
    97d6:	f1 1c       	adc	r15, r1
    97d8:	c7 01       	movw	r24, r14
    97da:	37 dc       	rcall	.-1938   	; 0x904a <mem_set>
    97dc:	85 e5       	ldi	r24, 0x55	; 85
    97de:	fe 01       	movw	r30, r28
    97e0:	ed 5c       	subi	r30, 0xCD	; 205
    97e2:	fd 4f       	sbci	r31, 0xFD	; 253
    97e4:	80 83       	st	Z, r24
    97e6:	8a ea       	ldi	r24, 0xAA	; 170
    97e8:	31 96       	adiw	r30, 0x01	; 1
    97ea:	80 83       	st	Z, r24
    97ec:	82 e5       	ldi	r24, 0x52	; 82
    97ee:	8d ab       	std	Y+53, r24	; 0x35
    97f0:	8e ab       	std	Y+54, r24	; 0x36
    97f2:	81 e6       	ldi	r24, 0x61	; 97
    97f4:	8f ab       	std	Y+55, r24	; 0x37
    97f6:	91 e4       	ldi	r25, 0x41	; 65
    97f8:	98 af       	std	Y+56, r25	; 0x38
    97fa:	22 e7       	ldi	r18, 0x72	; 114
    97fc:	7b 97       	sbiw	r30, 0x1b	; 27
    97fe:	20 83       	st	Z, r18
    9800:	31 96       	adiw	r30, 0x01	; 1
    9802:	20 83       	st	Z, r18
    9804:	31 96       	adiw	r30, 0x01	; 1
    9806:	90 83       	st	Z, r25
    9808:	31 96       	adiw	r30, 0x01	; 1
    980a:	80 83       	st	Z, r24
    980c:	49 89       	ldd	r20, Y+17	; 0x11
    980e:	5a 89       	ldd	r21, Y+18	; 0x12
    9810:	6b 89       	ldd	r22, Y+19	; 0x13
    9812:	7c 89       	ldd	r23, Y+20	; 0x14
    9814:	ce 01       	movw	r24, r28
    9816:	83 5e       	subi	r24, 0xE3	; 227
    9818:	9d 4f       	sbci	r25, 0xFD	; 253
    981a:	11 dc       	rcall	.-2014   	; 0x903e <st_dword>
    981c:	4d 85       	ldd	r20, Y+13	; 0x0d
    981e:	5e 85       	ldd	r21, Y+14	; 0x0e
    9820:	6f 85       	ldd	r22, Y+15	; 0x0f
    9822:	78 89       	ldd	r23, Y+16	; 0x10
    9824:	ce 01       	movw	r24, r28
    9826:	8f 5d       	subi	r24, 0xDF	; 223
    9828:	9d 4f       	sbci	r25, 0xFD	; 253
    982a:	09 dc       	rcall	.-2030   	; 0x903e <st_dword>
    982c:	89 a1       	ldd	r24, Y+33	; 0x21
    982e:	9a a1       	ldd	r25, Y+34	; 0x22
    9830:	ab a1       	ldd	r26, Y+35	; 0x23
    9832:	bc a1       	ldd	r27, Y+36	; 0x24
    9834:	9c 01       	movw	r18, r24
    9836:	ad 01       	movw	r20, r26
    9838:	2f 5f       	subi	r18, 0xFF	; 255
    983a:	3f 4f       	sbci	r19, 0xFF	; 255
    983c:	4f 4f       	sbci	r20, 0xFF	; 255
    983e:	5f 4f       	sbci	r21, 0xFF	; 255
    9840:	29 ab       	std	Y+49, r18	; 0x31
    9842:	3a ab       	std	Y+50, r19	; 0x32
    9844:	4b ab       	std	Y+51, r20	; 0x33
    9846:	5c ab       	std	Y+52, r21	; 0x34
    9848:	01 e0       	ldi	r16, 0x01	; 1
    984a:	10 e0       	ldi	r17, 0x00	; 0
    984c:	b7 01       	movw	r22, r14
    984e:	89 81       	ldd	r24, Y+1	; 0x01
    9850:	0e 94 3e 6b 	call	0xd67c	; 0xd67c <disk_write>
    9854:	1c 82       	std	Y+4, r1	; 0x04
    9856:	40 e0       	ldi	r20, 0x00	; 0
    9858:	50 e0       	ldi	r21, 0x00	; 0
    985a:	60 e0       	ldi	r22, 0x00	; 0
    985c:	89 81       	ldd	r24, Y+1	; 0x01
    985e:	0e 94 4e 6b 	call	0xd69c	; 0xd69c <disk_ioctl>
    9862:	31 e0       	ldi	r19, 0x01	; 1
    9864:	20 e0       	ldi	r18, 0x00	; 0
    9866:	89 2b       	or	r24, r25
    9868:	09 f4       	brne	.+2      	; 0x986c <sync_fs+0xd6>
    986a:	30 e0       	ldi	r19, 0x00	; 0
    986c:	83 2f       	mov	r24, r19
    986e:	92 2f       	mov	r25, r18
    9870:	cd b7       	in	r28, 0x3d	; 61
    9872:	de b7       	in	r29, 0x3e	; 62
    9874:	e6 e0       	ldi	r30, 0x06	; 6
    9876:	0c 94 ae e4 	jmp	0x1c95c	; 0x1c95c <__epilogue_restores__+0x18>

0000987a <dir_clear>:
    987a:	4f 92       	push	r4
    987c:	5f 92       	push	r5
    987e:	6f 92       	push	r6
    9880:	7f 92       	push	r7
    9882:	af 92       	push	r10
    9884:	bf 92       	push	r11
    9886:	cf 92       	push	r12
    9888:	df 92       	push	r13
    988a:	ef 92       	push	r14
    988c:	ff 92       	push	r15
    988e:	0f 93       	push	r16
    9890:	1f 93       	push	r17
    9892:	cf 93       	push	r28
    9894:	df 93       	push	r29
    9896:	ec 01       	movw	r28, r24
    9898:	6a 01       	movw	r12, r20
    989a:	7b 01       	movw	r14, r22
    989c:	8b 81       	ldd	r24, Y+3	; 0x03
    989e:	81 11       	cpse	r24, r1
    98a0:	28 c0       	rjmp	.+80     	; 0x98f2 <dir_clear+0x78>
    98a2:	b7 01       	movw	r22, r14
    98a4:	a6 01       	movw	r20, r12
    98a6:	ce 01       	movw	r24, r28
    98a8:	6e dc       	rcall	.-1828   	; 0x9186 <clst2sect>
    98aa:	2b 01       	movw	r4, r22
    98ac:	3c 01       	movw	r6, r24
    98ae:	69 ab       	std	Y+49, r22	; 0x31
    98b0:	7a ab       	std	Y+50, r23	; 0x32
    98b2:	8b ab       	std	Y+51, r24	; 0x33
    98b4:	9c ab       	std	Y+52, r25	; 0x34
    98b6:	5e 01       	movw	r10, r28
    98b8:	25 e3       	ldi	r18, 0x35	; 53
    98ba:	a2 0e       	add	r10, r18
    98bc:	b1 1c       	adc	r11, r1
    98be:	40 e0       	ldi	r20, 0x00	; 0
    98c0:	52 e0       	ldi	r21, 0x02	; 2
    98c2:	60 e0       	ldi	r22, 0x00	; 0
    98c4:	70 e0       	ldi	r23, 0x00	; 0
    98c6:	c5 01       	movw	r24, r10
    98c8:	c0 db       	rcall	.-2176   	; 0x904a <mem_set>
    98ca:	09 85       	ldd	r16, Y+9	; 0x09
    98cc:	1a 85       	ldd	r17, Y+10	; 0x0a
    98ce:	c8 01       	movw	r24, r16
    98d0:	a0 e0       	ldi	r26, 0x00	; 0
    98d2:	b0 e0       	ldi	r27, 0x00	; 0
    98d4:	39 e0       	ldi	r19, 0x09	; 9
    98d6:	88 0f       	add	r24, r24
    98d8:	99 1f       	adc	r25, r25
    98da:	aa 1f       	adc	r26, r26
    98dc:	bb 1f       	adc	r27, r27
    98de:	3a 95       	dec	r19
    98e0:	d1 f7       	brne	.-12     	; 0x98d6 <dir_clear+0x5c>
    98e2:	81 15       	cp	r24, r1
    98e4:	90 48       	sbci	r25, 0x80	; 128
    98e6:	a1 05       	cpc	r26, r1
    98e8:	b1 05       	cpc	r27, r1
    98ea:	50 f0       	brcs	.+20     	; 0x9900 <dir_clear+0x86>
    98ec:	00 e0       	ldi	r16, 0x00	; 0
    98ee:	10 e8       	ldi	r17, 0x80	; 128
    98f0:	14 c0       	rjmp	.+40     	; 0x991a <dir_clear+0xa0>
    98f2:	ce 01       	movw	r24, r28
    98f4:	fd de       	rcall	.-518    	; 0x96f0 <sync_window.part.6>
    98f6:	89 2b       	or	r24, r25
    98f8:	a1 f2       	breq	.-88     	; 0x98a2 <dir_clear+0x28>
    98fa:	81 e0       	ldi	r24, 0x01	; 1
    98fc:	90 e0       	ldi	r25, 0x00	; 0
    98fe:	56 c0       	rjmp	.+172    	; 0x99ac <dir_clear+0x132>
    9900:	10 2f       	mov	r17, r16
    9902:	00 27       	eor	r16, r16
    9904:	11 0f       	add	r17, r17
    9906:	09 c0       	rjmp	.+18     	; 0x991a <dir_clear+0xa0>
    9908:	c8 01       	movw	r24, r16
    990a:	0e 94 72 6a 	call	0xd4e4	; 0xd4e4 <ff_memalloc>
    990e:	6c 01       	movw	r12, r24
    9910:	00 97       	sbiw	r24, 0x00	; 0
    9912:	09 f0       	breq	.+2      	; 0x9916 <dir_clear+0x9c>
    9914:	40 c0       	rjmp	.+128    	; 0x9996 <dir_clear+0x11c>
    9916:	16 95       	lsr	r17
    9918:	07 95       	ror	r16
    991a:	01 30       	cpi	r16, 0x01	; 1
    991c:	82 e0       	ldi	r24, 0x02	; 2
    991e:	18 07       	cpc	r17, r24
    9920:	98 f7       	brcc	.-26     	; 0x9908 <dir_clear+0x8e>
    9922:	e1 2c       	mov	r14, r1
    9924:	f1 2c       	mov	r15, r1
    9926:	11 c0       	rjmp	.+34     	; 0x994a <dir_clear+0xd0>
    9928:	01 e0       	ldi	r16, 0x01	; 1
    992a:	10 e0       	ldi	r17, 0x00	; 0
    992c:	a3 01       	movw	r20, r6
    992e:	92 01       	movw	r18, r4
    9930:	2e 0d       	add	r18, r14
    9932:	3f 1d       	adc	r19, r15
    9934:	41 1d       	adc	r20, r1
    9936:	51 1d       	adc	r21, r1
    9938:	b5 01       	movw	r22, r10
    993a:	89 81       	ldd	r24, Y+1	; 0x01
    993c:	0e 94 3e 6b 	call	0xd67c	; 0xd67c <disk_write>
    9940:	89 2b       	or	r24, r25
    9942:	01 f5       	brne	.+64     	; 0x9984 <dir_clear+0x10a>
    9944:	2f ef       	ldi	r18, 0xFF	; 255
    9946:	e2 1a       	sub	r14, r18
    9948:	f2 0a       	sbc	r15, r18
    994a:	89 85       	ldd	r24, Y+9	; 0x09
    994c:	9a 85       	ldd	r25, Y+10	; 0x0a
    994e:	e8 16       	cp	r14, r24
    9950:	f9 06       	cpc	r15, r25
    9952:	50 f3       	brcs	.-44     	; 0x9928 <dir_clear+0xae>
    9954:	17 c0       	rjmp	.+46     	; 0x9984 <dir_clear+0x10a>
    9956:	85 01       	movw	r16, r10
    9958:	a3 01       	movw	r20, r6
    995a:	92 01       	movw	r18, r4
    995c:	2e 0d       	add	r18, r14
    995e:	3f 1d       	adc	r19, r15
    9960:	41 1d       	adc	r20, r1
    9962:	51 1d       	adc	r21, r1
    9964:	b6 01       	movw	r22, r12
    9966:	89 81       	ldd	r24, Y+1	; 0x01
    9968:	0e 94 3e 6b 	call	0xd67c	; 0xd67c <disk_write>
    996c:	89 2b       	or	r24, r25
    996e:	39 f4       	brne	.+14     	; 0x997e <dir_clear+0x104>
    9970:	ea 0c       	add	r14, r10
    9972:	fb 1c       	adc	r15, r11
    9974:	89 85       	ldd	r24, Y+9	; 0x09
    9976:	9a 85       	ldd	r25, Y+10	; 0x0a
    9978:	e8 16       	cp	r14, r24
    997a:	f9 06       	cpc	r15, r25
    997c:	60 f3       	brcs	.-40     	; 0x9956 <dir_clear+0xdc>
    997e:	c6 01       	movw	r24, r12
    9980:	0e 94 75 6a 	call	0xd4ea	; 0xd4ea <ff_memfree>
    9984:	81 e0       	ldi	r24, 0x01	; 1
    9986:	90 e0       	ldi	r25, 0x00	; 0
    9988:	29 85       	ldd	r18, Y+9	; 0x09
    998a:	3a 85       	ldd	r19, Y+10	; 0x0a
    998c:	2e 15       	cp	r18, r14
    998e:	3f 05       	cpc	r19, r15
    9990:	69 f4       	brne	.+26     	; 0x99ac <dir_clear+0x132>
    9992:	80 e0       	ldi	r24, 0x00	; 0
    9994:	0b c0       	rjmp	.+22     	; 0x99ac <dir_clear+0x132>
    9996:	a8 01       	movw	r20, r16
    9998:	60 e0       	ldi	r22, 0x00	; 0
    999a:	70 e0       	ldi	r23, 0x00	; 0
    999c:	56 db       	rcall	.-2388   	; 0x904a <mem_set>
    999e:	58 01       	movw	r10, r16
    99a0:	ab 2c       	mov	r10, r11
    99a2:	bb 24       	eor	r11, r11
    99a4:	a6 94       	lsr	r10
    99a6:	e1 2c       	mov	r14, r1
    99a8:	f1 2c       	mov	r15, r1
    99aa:	e4 cf       	rjmp	.-56     	; 0x9974 <dir_clear+0xfa>
    99ac:	df 91       	pop	r29
    99ae:	cf 91       	pop	r28
    99b0:	1f 91       	pop	r17
    99b2:	0f 91       	pop	r16
    99b4:	ff 90       	pop	r15
    99b6:	ef 90       	pop	r14
    99b8:	df 90       	pop	r13
    99ba:	cf 90       	pop	r12
    99bc:	bf 90       	pop	r11
    99be:	af 90       	pop	r10
    99c0:	7f 90       	pop	r7
    99c2:	6f 90       	pop	r6
    99c4:	5f 90       	pop	r5
    99c6:	4f 90       	pop	r4
    99c8:	08 95       	ret

000099ca <move_window>:
    99ca:	a0 e0       	ldi	r26, 0x00	; 0
    99cc:	b0 e0       	ldi	r27, 0x00	; 0
    99ce:	eb ee       	ldi	r30, 0xEB	; 235
    99d0:	fc e4       	ldi	r31, 0x4C	; 76
    99d2:	0c 94 90 e4 	jmp	0x1c920	; 0x1c920 <__prologue_saves__+0x14>
    99d6:	ec 01       	movw	r28, r24
    99d8:	6a 01       	movw	r12, r20
    99da:	7b 01       	movw	r14, r22
    99dc:	89 a9       	ldd	r24, Y+49	; 0x31
    99de:	9a a9       	ldd	r25, Y+50	; 0x32
    99e0:	ab a9       	ldd	r26, Y+51	; 0x33
    99e2:	bc a9       	ldd	r27, Y+52	; 0x34
    99e4:	84 17       	cp	r24, r20
    99e6:	95 07       	cpc	r25, r21
    99e8:	a6 07       	cpc	r26, r22
    99ea:	b7 07       	cpc	r27, r23
    99ec:	11 f1       	breq	.+68     	; 0x9a32 <move_window+0x68>
    99ee:	8b 81       	ldd	r24, Y+3	; 0x03
    99f0:	81 11       	cpse	r24, r1
    99f2:	13 c0       	rjmp	.+38     	; 0x9a1a <move_window+0x50>
    99f4:	01 e0       	ldi	r16, 0x01	; 1
    99f6:	10 e0       	ldi	r17, 0x00	; 0
    99f8:	a7 01       	movw	r20, r14
    99fa:	96 01       	movw	r18, r12
    99fc:	be 01       	movw	r22, r28
    99fe:	6b 5c       	subi	r22, 0xCB	; 203
    9a00:	7f 4f       	sbci	r23, 0xFF	; 255
    9a02:	89 81       	ldd	r24, Y+1	; 0x01
    9a04:	0e 94 2e 6b 	call	0xd65c	; 0xd65c <disk_read>
    9a08:	89 2b       	or	r24, r25
    9a0a:	61 f0       	breq	.+24     	; 0x9a24 <move_window+0x5a>
    9a0c:	81 e0       	ldi	r24, 0x01	; 1
    9a0e:	90 e0       	ldi	r25, 0x00	; 0
    9a10:	cc 24       	eor	r12, r12
    9a12:	ca 94       	dec	r12
    9a14:	dc 2c       	mov	r13, r12
    9a16:	76 01       	movw	r14, r12
    9a18:	07 c0       	rjmp	.+14     	; 0x9a28 <move_window+0x5e>
    9a1a:	ce 01       	movw	r24, r28
    9a1c:	69 de       	rcall	.-814    	; 0x96f0 <sync_window.part.6>
    9a1e:	00 97       	sbiw	r24, 0x00	; 0
    9a20:	51 f4       	brne	.+20     	; 0x9a36 <move_window+0x6c>
    9a22:	e8 cf       	rjmp	.-48     	; 0x99f4 <move_window+0x2a>
    9a24:	80 e0       	ldi	r24, 0x00	; 0
    9a26:	90 e0       	ldi	r25, 0x00	; 0
    9a28:	c9 aa       	std	Y+49, r12	; 0x31
    9a2a:	da aa       	std	Y+50, r13	; 0x32
    9a2c:	eb aa       	std	Y+51, r14	; 0x33
    9a2e:	fc aa       	std	Y+52, r15	; 0x34
    9a30:	02 c0       	rjmp	.+4      	; 0x9a36 <move_window+0x6c>
    9a32:	80 e0       	ldi	r24, 0x00	; 0
    9a34:	90 e0       	ldi	r25, 0x00	; 0
    9a36:	cd b7       	in	r28, 0x3d	; 61
    9a38:	de b7       	in	r29, 0x3e	; 62
    9a3a:	e8 e0       	ldi	r30, 0x08	; 8
    9a3c:	0c 94 ac e4 	jmp	0x1c958	; 0x1c958 <__epilogue_restores__+0x14>

00009a40 <check_fs>:
    9a40:	cf 93       	push	r28
    9a42:	df 93       	push	r29
    9a44:	ec 01       	movw	r28, r24
    9a46:	1b 82       	std	Y+3, r1	; 0x03
    9a48:	8f ef       	ldi	r24, 0xFF	; 255
    9a4a:	9f ef       	ldi	r25, 0xFF	; 255
    9a4c:	dc 01       	movw	r26, r24
    9a4e:	89 ab       	std	Y+49, r24	; 0x31
    9a50:	9a ab       	std	Y+50, r25	; 0x32
    9a52:	ab ab       	std	Y+51, r26	; 0x33
    9a54:	bc ab       	std	Y+52, r27	; 0x34
    9a56:	ce 01       	movw	r24, r28
    9a58:	b8 df       	rcall	.-144    	; 0x99ca <move_window>
    9a5a:	89 2b       	or	r24, r25
    9a5c:	19 f5       	brne	.+70     	; 0x9aa4 <check_fs+0x64>
    9a5e:	fe 01       	movw	r30, r28
    9a60:	ed 5c       	subi	r30, 0xCD	; 205
    9a62:	fd 4f       	sbci	r31, 0xFD	; 253
    9a64:	80 81       	ld	r24, Z
    9a66:	91 81       	ldd	r25, Z+1	; 0x01
    9a68:	85 35       	cpi	r24, 0x55	; 85
    9a6a:	9a 4a       	sbci	r25, 0xAA	; 170
    9a6c:	f1 f4       	brne	.+60     	; 0x9aaa <check_fs+0x6a>
    9a6e:	8d a9       	ldd	r24, Y+53	; 0x35
    9a70:	8b 3e       	cpi	r24, 0xEB	; 235
    9a72:	19 f0       	breq	.+6      	; 0x9a7a <check_fs+0x3a>
    9a74:	88 5e       	subi	r24, 0xE8	; 232
    9a76:	82 30       	cpi	r24, 0x02	; 2
    9a78:	f0 f4       	brcc	.+60     	; 0x9ab6 <check_fs+0x76>
    9a7a:	43 e0       	ldi	r20, 0x03	; 3
    9a7c:	50 e0       	ldi	r21, 0x00	; 0
    9a7e:	66 ee       	ldi	r22, 0xE6	; 230
    9a80:	77 e0       	ldi	r23, 0x07	; 7
    9a82:	ce 01       	movw	r24, r28
    9a84:	85 59       	subi	r24, 0x95	; 149
    9a86:	9f 4f       	sbci	r25, 0xFF	; 255
    9a88:	e9 da       	rcall	.-2606   	; 0x905c <mem_cmp>
    9a8a:	89 2b       	or	r24, r25
    9a8c:	89 f0       	breq	.+34     	; 0x9ab0 <check_fs+0x70>
    9a8e:	45 e0       	ldi	r20, 0x05	; 5
    9a90:	50 e0       	ldi	r21, 0x00	; 0
    9a92:	61 e4       	ldi	r22, 0x41	; 65
    9a94:	73 e0       	ldi	r23, 0x03	; 3
    9a96:	ce 01       	movw	r24, r28
    9a98:	89 57       	subi	r24, 0x79	; 121
    9a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    9a9c:	df da       	rcall	.-2626   	; 0x905c <mem_cmp>
    9a9e:	89 2b       	or	r24, r25
    9aa0:	51 f4       	brne	.+20     	; 0x9ab6 <check_fs+0x76>
    9aa2:	06 c0       	rjmp	.+12     	; 0x9ab0 <check_fs+0x70>
    9aa4:	84 e0       	ldi	r24, 0x04	; 4
    9aa6:	90 e0       	ldi	r25, 0x00	; 0
    9aa8:	08 c0       	rjmp	.+16     	; 0x9aba <check_fs+0x7a>
    9aaa:	83 e0       	ldi	r24, 0x03	; 3
    9aac:	90 e0       	ldi	r25, 0x00	; 0
    9aae:	05 c0       	rjmp	.+10     	; 0x9aba <check_fs+0x7a>
    9ab0:	80 e0       	ldi	r24, 0x00	; 0
    9ab2:	90 e0       	ldi	r25, 0x00	; 0
    9ab4:	02 c0       	rjmp	.+4      	; 0x9aba <check_fs+0x7a>
    9ab6:	82 e0       	ldi	r24, 0x02	; 2
    9ab8:	90 e0       	ldi	r25, 0x00	; 0
    9aba:	df 91       	pop	r29
    9abc:	cf 91       	pop	r28
    9abe:	08 95       	ret

00009ac0 <mount_volume>:
    9ac0:	a0 e2       	ldi	r26, 0x20	; 32
    9ac2:	b0 e0       	ldi	r27, 0x00	; 0
    9ac4:	e6 e6       	ldi	r30, 0x66	; 102
    9ac6:	fd e4       	ldi	r31, 0x4D	; 77
    9ac8:	0c 94 88 e4 	jmp	0x1c910	; 0x1c910 <__prologue_saves__+0x4>
    9acc:	5b 01       	movw	r10, r22
    9ace:	f4 2e       	mov	r15, r20
    9ad0:	db 01       	movw	r26, r22
    9ad2:	1d 92       	st	X+, r1
    9ad4:	1c 92       	st	X, r1
    9ad6:	ca db       	rcall	.-2156   	; 0x926c <get_ldnumber>
    9ad8:	6c 01       	movw	r12, r24
    9ada:	97 fd       	sbrc	r25, 7
    9adc:	39 c2       	rjmp	.+1138   	; 0x9f50 <mount_volume+0x490>
    9ade:	fc 01       	movw	r30, r24
    9ae0:	ee 0f       	add	r30, r30
    9ae2:	ff 1f       	adc	r31, r31
    9ae4:	e1 54       	subi	r30, 0x41	; 65
    9ae6:	f8 4e       	sbci	r31, 0xE8	; 232
    9ae8:	00 81       	ld	r16, Z
    9aea:	11 81       	ldd	r17, Z+1	; 0x01
    9aec:	01 15       	cp	r16, r1
    9aee:	11 05       	cpc	r17, r1
    9af0:	09 f4       	brne	.+2      	; 0x9af4 <mount_volume+0x34>
    9af2:	31 c2       	rjmp	.+1122   	; 0x9f56 <mount_volume+0x496>
    9af4:	f5 01       	movw	r30, r10
    9af6:	11 83       	std	Z+1, r17	; 0x01
    9af8:	00 83       	st	Z, r16
    9afa:	ff 2d       	mov	r31, r15
    9afc:	fe 7f       	andi	r31, 0xFE	; 254
    9afe:	ff 2e       	mov	r15, r31
    9b00:	d8 01       	movw	r26, r16
    9b02:	8c 91       	ld	r24, X
    9b04:	88 23       	and	r24, r24
    9b06:	71 f0       	breq	.+28     	; 0x9b24 <mount_volume+0x64>
    9b08:	f8 01       	movw	r30, r16
    9b0a:	81 81       	ldd	r24, Z+1	; 0x01
    9b0c:	0e 94 22 6b 	call	0xd644	; 0xd644 <disk_status>
    9b10:	80 fd       	sbrc	r24, 0
    9b12:	08 c0       	rjmp	.+16     	; 0x9b24 <mount_volume+0x64>
    9b14:	ff 20       	and	r15, r15
    9b16:	09 f4       	brne	.+2      	; 0x9b1a <mount_volume+0x5a>
    9b18:	21 c2       	rjmp	.+1090   	; 0x9f5c <mount_volume+0x49c>
    9b1a:	82 ff       	sbrs	r24, 2
    9b1c:	1f c2       	rjmp	.+1086   	; 0x9f5c <mount_volume+0x49c>
    9b1e:	8a e0       	ldi	r24, 0x0A	; 10
    9b20:	90 e0       	ldi	r25, 0x00	; 0
    9b22:	24 c2       	rjmp	.+1096   	; 0x9f6c <mount_volume+0x4ac>
    9b24:	d8 01       	movw	r26, r16
    9b26:	1c 92       	st	X, r1
    9b28:	f8 01       	movw	r30, r16
    9b2a:	c1 82       	std	Z+1, r12	; 0x01
    9b2c:	8c 2d       	mov	r24, r12
    9b2e:	0e 94 28 6b 	call	0xd650	; 0xd650 <disk_initialize>
    9b32:	80 fd       	sbrc	r24, 0
    9b34:	16 c2       	rjmp	.+1068   	; 0x9f62 <mount_volume+0x4a2>
    9b36:	ff 20       	and	r15, r15
    9b38:	11 f0       	breq	.+4      	; 0x9b3e <mount_volume+0x7e>
    9b3a:	82 fd       	sbrc	r24, 2
    9b3c:	f0 cf       	rjmp	.-32     	; 0x9b1e <mount_volume+0x5e>
    9b3e:	40 e0       	ldi	r20, 0x00	; 0
    9b40:	50 e0       	ldi	r21, 0x00	; 0
    9b42:	ba 01       	movw	r22, r20
    9b44:	c8 01       	movw	r24, r16
    9b46:	7c df       	rcall	.-264    	; 0x9a40 <check_fs>
    9b48:	82 30       	cpi	r24, 0x02	; 2
    9b4a:	91 05       	cpc	r25, r1
    9b4c:	b9 f5       	brne	.+110    	; 0x9bbc <mount_volume+0xfc>
    9b4e:	68 01       	movw	r12, r16
    9b50:	f5 e0       	ldi	r31, 0x05	; 5
    9b52:	cf 1a       	sub	r12, r31
    9b54:	fe ef       	ldi	r31, 0xFE	; 254
    9b56:	df 0a       	sbc	r13, r31
    9b58:	9e 01       	movw	r18, r28
    9b5a:	2f 5f       	subi	r18, 0xFF	; 255
    9b5c:	3f 4f       	sbci	r19, 0xFF	; 255
    9b5e:	79 01       	movw	r14, r18
    9b60:	48 01       	movw	r8, r16
    9b62:	35 ec       	ldi	r19, 0xC5	; 197
    9b64:	83 1a       	sub	r8, r19
    9b66:	3d ef       	ldi	r19, 0xFD	; 253
    9b68:	93 0a       	sbc	r9, r19
    9b6a:	57 01       	movw	r10, r14
    9b6c:	c6 01       	movw	r24, r12
    9b6e:	52 da       	rcall	.-2908   	; 0x9014 <ld_dword>
    9b70:	d5 01       	movw	r26, r10
    9b72:	6d 93       	st	X+, r22
    9b74:	7d 93       	st	X+, r23
    9b76:	8d 93       	st	X+, r24
    9b78:	9d 93       	st	X+, r25
    9b7a:	5d 01       	movw	r10, r26
    9b7c:	b0 e1       	ldi	r27, 0x10	; 16
    9b7e:	cb 0e       	add	r12, r27
    9b80:	d1 1c       	adc	r13, r1
    9b82:	c8 14       	cp	r12, r8
    9b84:	d9 04       	cpc	r13, r9
    9b86:	91 f7       	brne	.-28     	; 0x9b6c <mount_volume+0xac>
    9b88:	6e 01       	movw	r12, r28
    9b8a:	e1 e1       	ldi	r30, 0x11	; 17
    9b8c:	ce 0e       	add	r12, r30
    9b8e:	d1 1c       	adc	r13, r1
    9b90:	d7 01       	movw	r26, r14
    9b92:	4d 91       	ld	r20, X+
    9b94:	5d 91       	ld	r21, X+
    9b96:	6d 91       	ld	r22, X+
    9b98:	7d 91       	ld	r23, X+
    9b9a:	7d 01       	movw	r14, r26
    9b9c:	41 15       	cp	r20, r1
    9b9e:	51 05       	cpc	r21, r1
    9ba0:	61 05       	cpc	r22, r1
    9ba2:	71 05       	cpc	r23, r1
    9ba4:	31 f0       	breq	.+12     	; 0x9bb2 <mount_volume+0xf2>
    9ba6:	c8 01       	movw	r24, r16
    9ba8:	4b df       	rcall	.-362    	; 0x9a40 <check_fs>
    9baa:	82 30       	cpi	r24, 0x02	; 2
    9bac:	91 05       	cpc	r25, r1
    9bae:	18 f4       	brcc	.+6      	; 0x9bb6 <mount_volume+0xf6>
    9bb0:	05 c0       	rjmp	.+10     	; 0x9bbc <mount_volume+0xfc>
    9bb2:	83 e0       	ldi	r24, 0x03	; 3
    9bb4:	90 e0       	ldi	r25, 0x00	; 0
    9bb6:	ce 14       	cp	r12, r14
    9bb8:	df 04       	cpc	r13, r15
    9bba:	51 f7       	brne	.-44     	; 0x9b90 <mount_volume+0xd0>
    9bbc:	84 30       	cpi	r24, 0x04	; 4
    9bbe:	91 05       	cpc	r25, r1
    9bc0:	09 f4       	brne	.+2      	; 0x9bc4 <mount_volume+0x104>
    9bc2:	d2 c1       	rjmp	.+932    	; 0x9f68 <mount_volume+0x4a8>
    9bc4:	02 97       	sbiw	r24, 0x02	; 2
    9bc6:	18 f0       	brcs	.+6      	; 0x9bce <mount_volume+0x10e>
    9bc8:	8d e0       	ldi	r24, 0x0D	; 13
    9bca:	90 e0       	ldi	r25, 0x00	; 0
    9bcc:	cf c1       	rjmp	.+926    	; 0x9f6c <mount_volume+0x4ac>
    9bce:	f8 01       	movw	r30, r16
    9bd0:	e0 5c       	subi	r30, 0xC0	; 192
    9bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    9bd4:	80 81       	ld	r24, Z
    9bd6:	91 81       	ldd	r25, Z+1	; 0x01
    9bd8:	81 15       	cp	r24, r1
    9bda:	92 40       	sbci	r25, 0x02	; 2
    9bdc:	a9 f7       	brne	.-22     	; 0x9bc8 <mount_volume+0x108>
    9bde:	3b 96       	adiw	r30, 0x0b	; 11
    9be0:	40 80       	ld	r4, Z
    9be2:	51 80       	ldd	r5, Z+1	; 0x01
    9be4:	41 14       	cp	r4, r1
    9be6:	51 04       	cpc	r5, r1
    9be8:	19 f0       	breq	.+6      	; 0x9bf0 <mount_volume+0x130>
    9bea:	61 2c       	mov	r6, r1
    9bec:	71 2c       	mov	r7, r1
    9bee:	06 c0       	rjmp	.+12     	; 0x9bfc <mount_volume+0x13c>
    9bf0:	c8 01       	movw	r24, r16
    9bf2:	87 5a       	subi	r24, 0xA7	; 167
    9bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    9bf6:	0e da       	rcall	.-3044   	; 0x9014 <ld_dword>
    9bf8:	2b 01       	movw	r4, r22
    9bfa:	3c 01       	movw	r6, r24
    9bfc:	f8 01       	movw	r30, r16
    9bfe:	21 a9       	ldd	r18, Z+49	; 0x31
    9c00:	32 a9       	ldd	r19, Z+50	; 0x32
    9c02:	43 a9       	ldd	r20, Z+51	; 0x33
    9c04:	54 a9       	ldd	r21, Z+52	; 0x34
    9c06:	29 8b       	std	Y+17, r18	; 0x11
    9c08:	3a 8b       	std	Y+18, r19	; 0x12
    9c0a:	4b 8b       	std	Y+19, r20	; 0x13
    9c0c:	5c 8b       	std	Y+20, r21	; 0x14
    9c0e:	45 8e       	std	Z+29, r4	; 0x1d
    9c10:	56 8e       	std	Z+30, r5	; 0x1e
    9c12:	67 8e       	std	Z+31, r6	; 0x1f
    9c14:	70 a2       	std	Z+32, r7	; 0x20
    9c16:	eb 5b       	subi	r30, 0xBB	; 187
    9c18:	ff 4f       	sbci	r31, 0xFF	; 255
    9c1a:	a0 80       	ld	r10, Z
    9c1c:	f8 01       	movw	r30, r16
    9c1e:	a2 82       	std	Z+2, r10	; 0x02
    9c20:	8f ef       	ldi	r24, 0xFF	; 255
    9c22:	8a 0d       	add	r24, r10
    9c24:	82 30       	cpi	r24, 0x02	; 2
    9c26:	80 f6       	brcc	.-96     	; 0x9bc8 <mount_volume+0x108>
    9c28:	ee 5b       	subi	r30, 0xBE	; 190
    9c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    9c2c:	b0 80       	ld	r11, Z
    9c2e:	8b 2d       	mov	r24, r11
    9c30:	90 e0       	ldi	r25, 0x00	; 0
    9c32:	f8 01       	movw	r30, r16
    9c34:	92 87       	std	Z+10, r25	; 0x0a
    9c36:	81 87       	std	Z+9, r24	; 0x09
    9c38:	00 97       	sbiw	r24, 0x00	; 0
    9c3a:	31 f2       	breq	.-116    	; 0x9bc8 <mount_volume+0x108>
    9c3c:	9c 01       	movw	r18, r24
    9c3e:	21 50       	subi	r18, 0x01	; 1
    9c40:	31 09       	sbc	r19, r1
    9c42:	82 23       	and	r24, r18
    9c44:	93 23       	and	r25, r19
    9c46:	89 2b       	or	r24, r25
    9c48:	09 f0       	breq	.+2      	; 0x9c4c <mount_volume+0x18c>
    9c4a:	be cf       	rjmp	.-132    	; 0x9bc8 <mount_volume+0x108>
    9c4c:	ea 5b       	subi	r30, 0xBA	; 186
    9c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    9c50:	80 80       	ld	r8, Z
    9c52:	91 80       	ldd	r9, Z+1	; 0x01
    9c54:	f8 01       	movw	r30, r16
    9c56:	90 86       	std	Z+8, r9	; 0x08
    9c58:	87 82       	std	Z+7, r8	; 0x07
    9c5a:	c4 01       	movw	r24, r8
    9c5c:	8f 70       	andi	r24, 0x0F	; 15
    9c5e:	99 27       	eor	r25, r25
    9c60:	89 2b       	or	r24, r25
    9c62:	09 f0       	breq	.+2      	; 0x9c66 <mount_volume+0x1a6>
    9c64:	b1 cf       	rjmp	.-158    	; 0x9bc8 <mount_volume+0x108>
    9c66:	e8 5b       	subi	r30, 0xB8	; 184
    9c68:	ff 4f       	sbci	r31, 0xFF	; 255
    9c6a:	80 81       	ld	r24, Z
    9c6c:	91 81       	ldd	r25, Z+1	; 0x01
    9c6e:	6c 01       	movw	r12, r24
    9c70:	e1 2c       	mov	r14, r1
    9c72:	f1 2c       	mov	r15, r1
    9c74:	89 2b       	or	r24, r25
    9c76:	31 f4       	brne	.+12     	; 0x9c84 <mount_volume+0x1c4>
    9c78:	c8 01       	movw	r24, r16
    9c7a:	8b 5a       	subi	r24, 0xAB	; 171
    9c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    9c7e:	ca d9       	rcall	.-3180   	; 0x9014 <ld_dword>
    9c80:	6b 01       	movw	r12, r22
    9c82:	7c 01       	movw	r14, r24
    9c84:	f8 01       	movw	r30, r16
    9c86:	ed 5b       	subi	r30, 0xBD	; 189
    9c88:	ff 4f       	sbci	r31, 0xFF	; 255
    9c8a:	01 90       	ld	r0, Z+
    9c8c:	f0 81       	ld	r31, Z
    9c8e:	e0 2d       	mov	r30, r0
    9c90:	30 97       	sbiw	r30, 0x00	; 0
    9c92:	09 f4       	brne	.+2      	; 0x9c96 <mount_volume+0x1d6>
    9c94:	99 cf       	rjmp	.-206    	; 0x9bc8 <mount_volume+0x108>
    9c96:	aa 2d       	mov	r26, r10
    9c98:	b0 e0       	ldi	r27, 0x00	; 0
    9c9a:	a3 01       	movw	r20, r6
    9c9c:	92 01       	movw	r18, r4
    9c9e:	0e 94 66 e4 	call	0x1c8cc	; 0x1c8cc <__muluhisi3>
    9ca2:	69 8f       	std	Y+25, r22	; 0x19
    9ca4:	7a 8f       	std	Y+26, r23	; 0x1a
    9ca6:	8b 8f       	std	Y+27, r24	; 0x1b
    9ca8:	9c 8f       	std	Y+28, r25	; 0x1c
    9caa:	9f 01       	movw	r18, r30
    9cac:	40 e0       	ldi	r20, 0x00	; 0
    9cae:	50 e0       	ldi	r21, 0x00	; 0
    9cb0:	2d 8f       	std	Y+29, r18	; 0x1d
    9cb2:	3e 8f       	std	Y+30, r19	; 0x1e
    9cb4:	4f 8f       	std	Y+31, r20	; 0x1f
    9cb6:	58 a3       	std	Y+32, r21	; 0x20
    9cb8:	c4 01       	movw	r24, r8
    9cba:	f4 e0       	ldi	r31, 0x04	; 4
    9cbc:	96 95       	lsr	r25
    9cbe:	87 95       	ror	r24
    9cc0:	fa 95       	dec	r31
    9cc2:	e1 f7       	brne	.-8      	; 0x9cbc <mount_volume+0x1fc>
    9cc4:	28 0f       	add	r18, r24
    9cc6:	39 1f       	adc	r19, r25
    9cc8:	41 1d       	adc	r20, r1
    9cca:	51 1d       	adc	r21, r1
    9ccc:	da 01       	movw	r26, r20
    9cce:	c9 01       	movw	r24, r18
    9cd0:	29 8d       	ldd	r18, Y+25	; 0x19
    9cd2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9cd4:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9cd6:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9cd8:	28 0f       	add	r18, r24
    9cda:	39 1f       	adc	r19, r25
    9cdc:	4a 1f       	adc	r20, r26
    9cde:	5b 1f       	adc	r21, r27
    9ce0:	2d 8b       	std	Y+21, r18	; 0x15
    9ce2:	3e 8b       	std	Y+22, r19	; 0x16
    9ce4:	4f 8b       	std	Y+23, r20	; 0x17
    9ce6:	58 8f       	std	Y+24, r21	; 0x18
    9ce8:	c2 16       	cp	r12, r18
    9cea:	d3 06       	cpc	r13, r19
    9cec:	e4 06       	cpc	r14, r20
    9cee:	f5 06       	cpc	r15, r21
    9cf0:	08 f4       	brcc	.+2      	; 0x9cf4 <mount_volume+0x234>
    9cf2:	6a cf       	rjmp	.-300    	; 0x9bc8 <mount_volume+0x108>
    9cf4:	c7 01       	movw	r24, r14
    9cf6:	b6 01       	movw	r22, r12
    9cf8:	62 1b       	sub	r22, r18
    9cfa:	73 0b       	sbc	r23, r19
    9cfc:	84 0b       	sbc	r24, r20
    9cfe:	95 0b       	sbc	r25, r21
    9d00:	2b 2d       	mov	r18, r11
    9d02:	30 e0       	ldi	r19, 0x00	; 0
    9d04:	40 e0       	ldi	r20, 0x00	; 0
    9d06:	50 e0       	ldi	r21, 0x00	; 0
    9d08:	0e 94 04 e4 	call	0x1c808	; 0x1c808 <__udivmodsi4>
    9d0c:	da 01       	movw	r26, r20
    9d0e:	c9 01       	movw	r24, r18
    9d10:	01 97       	sbiw	r24, 0x01	; 1
    9d12:	a1 09       	sbc	r26, r1
    9d14:	b1 09       	sbc	r27, r1
    9d16:	85 3f       	cpi	r24, 0xF5	; 245
    9d18:	9f 4f       	sbci	r25, 0xFF	; 255
    9d1a:	af 4f       	sbci	r26, 0xFF	; 255
    9d1c:	bf 40       	sbci	r27, 0x0F	; 15
    9d1e:	08 f0       	brcs	.+2      	; 0x9d22 <mount_volume+0x262>
    9d20:	53 cf       	rjmp	.-346    	; 0x9bc8 <mount_volume+0x108>
    9d22:	26 3f       	cpi	r18, 0xF6	; 246
    9d24:	8f ef       	ldi	r24, 0xFF	; 255
    9d26:	38 07       	cpc	r19, r24
    9d28:	41 05       	cpc	r20, r1
    9d2a:	51 05       	cpc	r21, r1
    9d2c:	50 f4       	brcc	.+20     	; 0x9d42 <mount_volume+0x282>
    9d2e:	26 3f       	cpi	r18, 0xF6	; 246
    9d30:	9f e0       	ldi	r25, 0x0F	; 15
    9d32:	39 07       	cpc	r19, r25
    9d34:	41 05       	cpc	r20, r1
    9d36:	51 05       	cpc	r21, r1
    9d38:	40 f4       	brcc	.+16     	; 0x9d4a <mount_volume+0x28a>
    9d3a:	aa 24       	eor	r10, r10
    9d3c:	a3 94       	inc	r10
    9d3e:	b1 2c       	mov	r11, r1
    9d40:	07 c0       	rjmp	.+14     	; 0x9d50 <mount_volume+0x290>
    9d42:	73 e0       	ldi	r23, 0x03	; 3
    9d44:	a7 2e       	mov	r10, r23
    9d46:	b1 2c       	mov	r11, r1
    9d48:	03 c0       	rjmp	.+6      	; 0x9d50 <mount_volume+0x290>
    9d4a:	62 e0       	ldi	r22, 0x02	; 2
    9d4c:	a6 2e       	mov	r10, r22
    9d4e:	b1 2c       	mov	r11, r1
    9d50:	69 01       	movw	r12, r18
    9d52:	7a 01       	movw	r14, r20
    9d54:	a2 e0       	ldi	r26, 0x02	; 2
    9d56:	ca 0e       	add	r12, r26
    9d58:	d1 1c       	adc	r13, r1
    9d5a:	e1 1c       	adc	r14, r1
    9d5c:	f1 1c       	adc	r15, r1
    9d5e:	f8 01       	movw	r30, r16
    9d60:	c1 8e       	std	Z+25, r12	; 0x19
    9d62:	d2 8e       	std	Z+26, r13	; 0x1a
    9d64:	e3 8e       	std	Z+27, r14	; 0x1b
    9d66:	f4 8e       	std	Z+28, r15	; 0x1c
    9d68:	29 89       	ldd	r18, Y+17	; 0x11
    9d6a:	3a 89       	ldd	r19, Y+18	; 0x12
    9d6c:	4b 89       	ldd	r20, Y+19	; 0x13
    9d6e:	5c 89       	ldd	r21, Y+20	; 0x14
    9d70:	21 a3       	std	Z+33, r18	; 0x21
    9d72:	32 a3       	std	Z+34, r19	; 0x22
    9d74:	43 a3       	std	Z+35, r20	; 0x23
    9d76:	54 a3       	std	Z+36, r21	; 0x24
    9d78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9d7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9d7c:	af 8d       	ldd	r26, Y+31	; 0x1f
    9d7e:	b8 a1       	ldd	r27, Y+32	; 0x20
    9d80:	28 0f       	add	r18, r24
    9d82:	39 1f       	adc	r19, r25
    9d84:	4a 1f       	adc	r20, r26
    9d86:	5b 1f       	adc	r21, r27
    9d88:	2d 8f       	std	Y+29, r18	; 0x1d
    9d8a:	3e 8f       	std	Y+30, r19	; 0x1e
    9d8c:	4f 8f       	std	Y+31, r20	; 0x1f
    9d8e:	58 a3       	std	Y+32, r21	; 0x20
    9d90:	25 a3       	std	Z+37, r18	; 0x25
    9d92:	36 a3       	std	Z+38, r19	; 0x26
    9d94:	47 a3       	std	Z+39, r20	; 0x27
    9d96:	50 a7       	std	Z+40, r21	; 0x28
    9d98:	49 89       	ldd	r20, Y+17	; 0x11
    9d9a:	5a 89       	ldd	r21, Y+18	; 0x12
    9d9c:	6b 89       	ldd	r22, Y+19	; 0x13
    9d9e:	7c 89       	ldd	r23, Y+20	; 0x14
    9da0:	8d 89       	ldd	r24, Y+21	; 0x15
    9da2:	9e 89       	ldd	r25, Y+22	; 0x16
    9da4:	af 89       	ldd	r26, Y+23	; 0x17
    9da6:	b8 8d       	ldd	r27, Y+24	; 0x18
    9da8:	48 0f       	add	r20, r24
    9daa:	59 1f       	adc	r21, r25
    9dac:	6a 1f       	adc	r22, r26
    9dae:	7b 1f       	adc	r23, r27
    9db0:	45 a7       	std	Z+45, r20	; 0x2d
    9db2:	56 a7       	std	Z+46, r21	; 0x2e
    9db4:	67 a7       	std	Z+47, r22	; 0x2f
    9db6:	70 ab       	std	Z+48, r23	; 0x30
    9db8:	f3 e0       	ldi	r31, 0x03	; 3
    9dba:	af 16       	cp	r10, r31
    9dbc:	b1 04       	cpc	r11, r1
    9dbe:	e9 f4       	brne	.+58     	; 0x9dfa <mount_volume+0x33a>
    9dc0:	f8 01       	movw	r30, r16
    9dc2:	e1 5a       	subi	r30, 0xA1	; 161
    9dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    9dc6:	80 81       	ld	r24, Z
    9dc8:	91 81       	ldd	r25, Z+1	; 0x01
    9dca:	89 2b       	or	r24, r25
    9dcc:	09 f0       	breq	.+2      	; 0x9dd0 <mount_volume+0x310>
    9dce:	fc ce       	rjmp	.-520    	; 0x9bc8 <mount_volume+0x108>
    9dd0:	81 14       	cp	r8, r1
    9dd2:	91 04       	cpc	r9, r1
    9dd4:	09 f0       	breq	.+2      	; 0x9dd8 <mount_volume+0x318>
    9dd6:	f8 ce       	rjmp	.-528    	; 0x9bc8 <mount_volume+0x108>
    9dd8:	c8 01       	movw	r24, r16
    9dda:	8f 59       	subi	r24, 0x9F	; 159
    9ddc:	9f 4f       	sbci	r25, 0xFF	; 255
    9dde:	1a d9       	rcall	.-3532   	; 0x9014 <ld_dword>
    9de0:	f8 01       	movw	r30, r16
    9de2:	61 a7       	std	Z+41, r22	; 0x29
    9de4:	72 a7       	std	Z+42, r23	; 0x2a
    9de6:	83 a7       	std	Z+43, r24	; 0x2b
    9de8:	94 a7       	std	Z+44, r25	; 0x2c
    9dea:	42 e0       	ldi	r20, 0x02	; 2
    9dec:	cc 0c       	add	r12, r12
    9dee:	dd 1c       	adc	r13, r13
    9df0:	ee 1c       	adc	r14, r14
    9df2:	ff 1c       	adc	r15, r15
    9df4:	4a 95       	dec	r20
    9df6:	d1 f7       	brne	.-12     	; 0x9dec <mount_volume+0x32c>
    9df8:	33 c0       	rjmp	.+102    	; 0x9e60 <mount_volume+0x3a0>
    9dfa:	81 14       	cp	r8, r1
    9dfc:	91 04       	cpc	r9, r1
    9dfe:	09 f4       	brne	.+2      	; 0x9e02 <mount_volume+0x342>
    9e00:	e3 ce       	rjmp	.-570    	; 0x9bc8 <mount_volume+0x108>
    9e02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9e04:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9e06:	af 8d       	ldd	r26, Y+31	; 0x1f
    9e08:	b8 a1       	ldd	r27, Y+32	; 0x20
    9e0a:	29 8d       	ldd	r18, Y+25	; 0x19
    9e0c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9e0e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9e10:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9e12:	82 0f       	add	r24, r18
    9e14:	93 1f       	adc	r25, r19
    9e16:	a4 1f       	adc	r26, r20
    9e18:	b5 1f       	adc	r27, r21
    9e1a:	f8 01       	movw	r30, r16
    9e1c:	81 a7       	std	Z+41, r24	; 0x29
    9e1e:	92 a7       	std	Z+42, r25	; 0x2a
    9e20:	a3 a7       	std	Z+43, r26	; 0x2b
    9e22:	b4 a7       	std	Z+44, r27	; 0x2c
    9e24:	f2 e0       	ldi	r31, 0x02	; 2
    9e26:	af 16       	cp	r10, r31
    9e28:	b1 04       	cpc	r11, r1
    9e2a:	29 f4       	brne	.+10     	; 0x9e36 <mount_volume+0x376>
    9e2c:	cc 0c       	add	r12, r12
    9e2e:	dd 1c       	adc	r13, r13
    9e30:	ee 1c       	adc	r14, r14
    9e32:	ff 1c       	adc	r15, r15
    9e34:	15 c0       	rjmp	.+42     	; 0x9e60 <mount_volume+0x3a0>
    9e36:	a3 e0       	ldi	r26, 0x03	; 3
    9e38:	b0 e0       	ldi	r27, 0x00	; 0
    9e3a:	a7 01       	movw	r20, r14
    9e3c:	96 01       	movw	r18, r12
    9e3e:	0e 94 66 e4 	call	0x1c8cc	; 0x1c8cc <__muluhisi3>
    9e42:	dc 01       	movw	r26, r24
    9e44:	cb 01       	movw	r24, r22
    9e46:	b6 95       	lsr	r27
    9e48:	a7 95       	ror	r26
    9e4a:	97 95       	ror	r25
    9e4c:	87 95       	ror	r24
    9e4e:	21 e0       	ldi	r18, 0x01	; 1
    9e50:	c2 22       	and	r12, r18
    9e52:	dd 24       	eor	r13, r13
    9e54:	ee 24       	eor	r14, r14
    9e56:	ff 24       	eor	r15, r15
    9e58:	c8 0e       	add	r12, r24
    9e5a:	d9 1e       	adc	r13, r25
    9e5c:	ea 1e       	adc	r14, r26
    9e5e:	fb 1e       	adc	r15, r27
    9e60:	3f ef       	ldi	r19, 0xFF	; 255
    9e62:	c3 0e       	add	r12, r19
    9e64:	31 e0       	ldi	r19, 0x01	; 1
    9e66:	d3 1e       	adc	r13, r19
    9e68:	e1 1c       	adc	r14, r1
    9e6a:	f1 1c       	adc	r15, r1
    9e6c:	89 e0       	ldi	r24, 0x09	; 9
    9e6e:	f6 94       	lsr	r15
    9e70:	e7 94       	ror	r14
    9e72:	d7 94       	ror	r13
    9e74:	c7 94       	ror	r12
    9e76:	8a 95       	dec	r24
    9e78:	d1 f7       	brne	.-12     	; 0x9e6e <mount_volume+0x3ae>
    9e7a:	4c 14       	cp	r4, r12
    9e7c:	5d 04       	cpc	r5, r13
    9e7e:	6e 04       	cpc	r6, r14
    9e80:	7f 04       	cpc	r7, r15
    9e82:	08 f4       	brcc	.+2      	; 0x9e86 <mount_volume+0x3c6>
    9e84:	a1 ce       	rjmp	.-702    	; 0x9bc8 <mount_volume+0x108>
    9e86:	8f ef       	ldi	r24, 0xFF	; 255
    9e88:	9f ef       	ldi	r25, 0xFF	; 255
    9e8a:	dc 01       	movw	r26, r24
    9e8c:	f8 01       	movw	r30, r16
    9e8e:	81 8b       	std	Z+17, r24	; 0x11
    9e90:	92 8b       	std	Z+18, r25	; 0x12
    9e92:	a3 8b       	std	Z+19, r26	; 0x13
    9e94:	b4 8b       	std	Z+20, r27	; 0x14
    9e96:	85 87       	std	Z+13, r24	; 0x0d
    9e98:	96 87       	std	Z+14, r25	; 0x0e
    9e9a:	a7 87       	std	Z+15, r26	; 0x0f
    9e9c:	b0 8b       	std	Z+16, r27	; 0x10
    9e9e:	80 e8       	ldi	r24, 0x80	; 128
    9ea0:	84 83       	std	Z+4, r24	; 0x04
    9ea2:	f3 e0       	ldi	r31, 0x03	; 3
    9ea4:	af 16       	cp	r10, r31
    9ea6:	b1 04       	cpc	r11, r1
    9ea8:	09 f0       	breq	.+2      	; 0x9eac <mount_volume+0x3ec>
    9eaa:	3f c0       	rjmp	.+126    	; 0x9f2a <mount_volume+0x46a>
    9eac:	f8 01       	movw	r30, r16
    9eae:	eb 59       	subi	r30, 0x9B	; 155
    9eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    9eb2:	80 81       	ld	r24, Z
    9eb4:	91 81       	ldd	r25, Z+1	; 0x01
    9eb6:	01 97       	sbiw	r24, 0x01	; 1
    9eb8:	c1 f5       	brne	.+112    	; 0x9f2a <mount_volume+0x46a>
    9eba:	49 89       	ldd	r20, Y+17	; 0x11
    9ebc:	5a 89       	ldd	r21, Y+18	; 0x12
    9ebe:	6b 89       	ldd	r22, Y+19	; 0x13
    9ec0:	7c 89       	ldd	r23, Y+20	; 0x14
    9ec2:	4f 5f       	subi	r20, 0xFF	; 255
    9ec4:	5f 4f       	sbci	r21, 0xFF	; 255
    9ec6:	6f 4f       	sbci	r22, 0xFF	; 255
    9ec8:	7f 4f       	sbci	r23, 0xFF	; 255
    9eca:	c8 01       	movw	r24, r16
    9ecc:	7e dd       	rcall	.-1284   	; 0x99ca <move_window>
    9ece:	89 2b       	or	r24, r25
    9ed0:	61 f5       	brne	.+88     	; 0x9f2a <mount_volume+0x46a>
    9ed2:	f8 01       	movw	r30, r16
    9ed4:	14 82       	std	Z+4, r1	; 0x04
    9ed6:	ed 5c       	subi	r30, 0xCD	; 205
    9ed8:	fd 4f       	sbci	r31, 0xFD	; 253
    9eda:	80 81       	ld	r24, Z
    9edc:	91 81       	ldd	r25, Z+1	; 0x01
    9ede:	85 35       	cpi	r24, 0x55	; 85
    9ee0:	9a 4a       	sbci	r25, 0xAA	; 170
    9ee2:	19 f5       	brne	.+70     	; 0x9f2a <mount_volume+0x46a>
    9ee4:	c8 01       	movw	r24, r16
    9ee6:	c5 96       	adiw	r24, 0x35	; 53
    9ee8:	95 d8       	rcall	.-3798   	; 0x9014 <ld_dword>
    9eea:	62 35       	cpi	r22, 0x52	; 82
    9eec:	72 45       	sbci	r23, 0x52	; 82
    9eee:	81 46       	sbci	r24, 0x61	; 97
    9ef0:	91 44       	sbci	r25, 0x41	; 65
    9ef2:	d9 f4       	brne	.+54     	; 0x9f2a <mount_volume+0x46a>
    9ef4:	c8 01       	movw	r24, r16
    9ef6:	87 5e       	subi	r24, 0xE7	; 231
    9ef8:	9d 4f       	sbci	r25, 0xFD	; 253
    9efa:	8c d8       	rcall	.-3816   	; 0x9014 <ld_dword>
    9efc:	62 37       	cpi	r22, 0x72	; 114
    9efe:	72 47       	sbci	r23, 0x72	; 114
    9f00:	81 44       	sbci	r24, 0x41	; 65
    9f02:	91 46       	sbci	r25, 0x61	; 97
    9f04:	91 f4       	brne	.+36     	; 0x9f2a <mount_volume+0x46a>
    9f06:	c8 01       	movw	r24, r16
    9f08:	83 5e       	subi	r24, 0xE3	; 227
    9f0a:	9d 4f       	sbci	r25, 0xFD	; 253
    9f0c:	83 d8       	rcall	.-3834   	; 0x9014 <ld_dword>
    9f0e:	f8 01       	movw	r30, r16
    9f10:	61 8b       	std	Z+17, r22	; 0x11
    9f12:	72 8b       	std	Z+18, r23	; 0x12
    9f14:	83 8b       	std	Z+19, r24	; 0x13
    9f16:	94 8b       	std	Z+20, r25	; 0x14
    9f18:	c8 01       	movw	r24, r16
    9f1a:	8f 5d       	subi	r24, 0xDF	; 223
    9f1c:	9d 4f       	sbci	r25, 0xFD	; 253
    9f1e:	7a d8       	rcall	.-3852   	; 0x9014 <ld_dword>
    9f20:	f8 01       	movw	r30, r16
    9f22:	65 87       	std	Z+13, r22	; 0x0d
    9f24:	76 87       	std	Z+14, r23	; 0x0e
    9f26:	87 87       	std	Z+15, r24	; 0x0f
    9f28:	90 8b       	std	Z+16, r25	; 0x10
    9f2a:	d8 01       	movw	r26, r16
    9f2c:	ac 92       	st	X, r10
    9f2e:	80 91 bd 17 	lds	r24, 0x17BD	; 0x8017bd <Fsid>
    9f32:	90 91 be 17 	lds	r25, 0x17BE	; 0x8017be <Fsid+0x1>
    9f36:	01 96       	adiw	r24, 0x01	; 1
    9f38:	90 93 be 17 	sts	0x17BE, r25	; 0x8017be <Fsid+0x1>
    9f3c:	80 93 bd 17 	sts	0x17BD, r24	; 0x8017bd <Fsid>
    9f40:	f8 01       	movw	r30, r16
    9f42:	96 83       	std	Z+6, r25	; 0x06
    9f44:	85 83       	std	Z+5, r24	; 0x05
    9f46:	15 8a       	std	Z+21, r1	; 0x15
    9f48:	16 8a       	std	Z+22, r1	; 0x16
    9f4a:	17 8a       	std	Z+23, r1	; 0x17
    9f4c:	10 8e       	std	Z+24, r1	; 0x18
    9f4e:	06 c0       	rjmp	.+12     	; 0x9f5c <mount_volume+0x49c>
    9f50:	8b e0       	ldi	r24, 0x0B	; 11
    9f52:	90 e0       	ldi	r25, 0x00	; 0
    9f54:	0b c0       	rjmp	.+22     	; 0x9f6c <mount_volume+0x4ac>
    9f56:	8c e0       	ldi	r24, 0x0C	; 12
    9f58:	90 e0       	ldi	r25, 0x00	; 0
    9f5a:	08 c0       	rjmp	.+16     	; 0x9f6c <mount_volume+0x4ac>
    9f5c:	80 e0       	ldi	r24, 0x00	; 0
    9f5e:	90 e0       	ldi	r25, 0x00	; 0
    9f60:	05 c0       	rjmp	.+10     	; 0x9f6c <mount_volume+0x4ac>
    9f62:	83 e0       	ldi	r24, 0x03	; 3
    9f64:	90 e0       	ldi	r25, 0x00	; 0
    9f66:	02 c0       	rjmp	.+4      	; 0x9f6c <mount_volume+0x4ac>
    9f68:	81 e0       	ldi	r24, 0x01	; 1
    9f6a:	90 e0       	ldi	r25, 0x00	; 0
    9f6c:	a0 96       	adiw	r28, 0x20	; 32
    9f6e:	e0 e1       	ldi	r30, 0x10	; 16
    9f70:	0c 94 a4 e4 	jmp	0x1c948	; 0x1c948 <__epilogue_restores__+0x4>

00009f74 <put_fat>:
    9f74:	a6 e0       	ldi	r26, 0x06	; 6
    9f76:	b0 e0       	ldi	r27, 0x00	; 0
    9f78:	e0 ec       	ldi	r30, 0xC0	; 192
    9f7a:	ff e4       	ldi	r31, 0x4F	; 79
    9f7c:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
    9f80:	42 30       	cpi	r20, 0x02	; 2
    9f82:	51 05       	cpc	r21, r1
    9f84:	61 05       	cpc	r22, r1
    9f86:	71 05       	cpc	r23, r1
    9f88:	08 f4       	brcc	.+2      	; 0x9f8c <put_fat+0x18>
    9f8a:	e7 c0       	rjmp	.+462    	; 0xa15a <put_fat+0x1e6>
    9f8c:	fc 01       	movw	r30, r24
    9f8e:	c1 8c       	ldd	r12, Z+25	; 0x19
    9f90:	d2 8c       	ldd	r13, Z+26	; 0x1a
    9f92:	e3 8c       	ldd	r14, Z+27	; 0x1b
    9f94:	f4 8c       	ldd	r15, Z+28	; 0x1c
    9f96:	4c 15       	cp	r20, r12
    9f98:	5d 05       	cpc	r21, r13
    9f9a:	6e 05       	cpc	r22, r14
    9f9c:	7f 05       	cpc	r23, r15
    9f9e:	08 f0       	brcs	.+2      	; 0x9fa2 <put_fat+0x2e>
    9fa0:	dc c0       	rjmp	.+440    	; 0xa15a <put_fat+0x1e6>
    9fa2:	28 01       	movw	r4, r16
    9fa4:	39 01       	movw	r6, r18
    9fa6:	6a 01       	movw	r12, r20
    9fa8:	7b 01       	movw	r14, r22
    9faa:	9e 83       	std	Y+6, r25	; 0x06
    9fac:	8d 83       	std	Y+5, r24	; 0x05
    9fae:	80 81       	ld	r24, Z
    9fb0:	82 30       	cpi	r24, 0x02	; 2
    9fb2:	09 f4       	brne	.+2      	; 0x9fb6 <put_fat+0x42>
    9fb4:	73 c0       	rjmp	.+230    	; 0xa09c <put_fat+0x128>
    9fb6:	83 30       	cpi	r24, 0x03	; 3
    9fb8:	09 f4       	brne	.+2      	; 0x9fbc <put_fat+0x48>
    9fba:	92 c0       	rjmp	.+292    	; 0xa0e0 <put_fat+0x16c>
    9fbc:	81 30       	cpi	r24, 0x01	; 1
    9fbe:	09 f0       	breq	.+2      	; 0x9fc2 <put_fat+0x4e>
    9fc0:	cc c0       	rjmp	.+408    	; 0xa15a <put_fat+0x1e6>
    9fc2:	4a 01       	movw	r8, r20
    9fc4:	96 94       	lsr	r9
    9fc6:	87 94       	ror	r8
    9fc8:	84 0e       	add	r8, r20
    9fca:	95 1e       	adc	r9, r21
    9fcc:	c4 01       	movw	r24, r8
    9fce:	89 2f       	mov	r24, r25
    9fd0:	99 27       	eor	r25, r25
    9fd2:	86 95       	lsr	r24
    9fd4:	45 a1       	ldd	r20, Z+37	; 0x25
    9fd6:	56 a1       	ldd	r21, Z+38	; 0x26
    9fd8:	67 a1       	ldd	r22, Z+39	; 0x27
    9fda:	70 a5       	ldd	r23, Z+40	; 0x28
    9fdc:	48 0f       	add	r20, r24
    9fde:	59 1f       	adc	r21, r25
    9fe0:	61 1d       	adc	r22, r1
    9fe2:	71 1d       	adc	r23, r1
    9fe4:	cf 01       	movw	r24, r30
    9fe6:	f1 dc       	rcall	.-1566   	; 0x99ca <move_window>
    9fe8:	5c 01       	movw	r10, r24
    9fea:	89 2b       	or	r24, r25
    9fec:	09 f0       	breq	.+2      	; 0x9ff0 <put_fat+0x7c>
    9fee:	b8 c0       	rjmp	.+368    	; 0xa160 <put_fat+0x1ec>
    9ff0:	2d 80       	ldd	r2, Y+5	; 0x05
    9ff2:	3e 80       	ldd	r3, Y+6	; 0x06
    9ff4:	f5 e3       	ldi	r31, 0x35	; 53
    9ff6:	2f 0e       	add	r2, r31
    9ff8:	31 1c       	adc	r3, r1
    9ffa:	84 01       	movw	r16, r8
    9ffc:	0f 5f       	subi	r16, 0xFF	; 255
    9ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    a000:	21 e0       	ldi	r18, 0x01	; 1
    a002:	92 22       	and	r9, r18
    a004:	f1 01       	movw	r30, r2
    a006:	e8 0d       	add	r30, r8
    a008:	f9 1d       	adc	r31, r9
    a00a:	d7 01       	movw	r26, r14
    a00c:	c6 01       	movw	r24, r12
    a00e:	81 70       	andi	r24, 0x01	; 1
    a010:	99 27       	eor	r25, r25
    a012:	aa 27       	eor	r26, r26
    a014:	bb 27       	eor	r27, r27
    a016:	89 83       	std	Y+1, r24	; 0x01
    a018:	9a 83       	std	Y+2, r25	; 0x02
    a01a:	ab 83       	std	Y+3, r26	; 0x03
    a01c:	bc 83       	std	Y+4, r27	; 0x04
    a01e:	c0 fe       	sbrs	r12, 0
    a020:	09 c0       	rjmp	.+18     	; 0xa034 <put_fat+0xc0>
    a022:	80 81       	ld	r24, Z
    a024:	28 2f       	mov	r18, r24
    a026:	2f 70       	andi	r18, 0x0F	; 15
    a028:	a0 e1       	ldi	r26, 0x10	; 16
    a02a:	4a 9e       	mul	r4, r26
    a02c:	c0 01       	movw	r24, r0
    a02e:	11 24       	eor	r1, r1
    a030:	82 2b       	or	r24, r18
    a032:	01 c0       	rjmp	.+2      	; 0xa036 <put_fat+0xc2>
    a034:	84 2d       	mov	r24, r4
    a036:	80 83       	st	Z, r24
    a038:	81 e0       	ldi	r24, 0x01	; 1
    a03a:	ed 81       	ldd	r30, Y+5	; 0x05
    a03c:	fe 81       	ldd	r31, Y+6	; 0x06
    a03e:	83 83       	std	Z+3, r24	; 0x03
    a040:	45 a1       	ldd	r20, Z+37	; 0x25
    a042:	56 a1       	ldd	r21, Z+38	; 0x26
    a044:	67 a1       	ldd	r22, Z+39	; 0x27
    a046:	70 a5       	ldd	r23, Z+40	; 0x28
    a048:	c8 01       	movw	r24, r16
    a04a:	89 2f       	mov	r24, r25
    a04c:	99 27       	eor	r25, r25
    a04e:	86 95       	lsr	r24
    a050:	48 0f       	add	r20, r24
    a052:	59 1f       	adc	r21, r25
    a054:	61 1d       	adc	r22, r1
    a056:	71 1d       	adc	r23, r1
    a058:	cf 01       	movw	r24, r30
    a05a:	b7 dc       	rcall	.-1682   	; 0x99ca <move_window>
    a05c:	5c 01       	movw	r10, r24
    a05e:	89 2b       	or	r24, r25
    a060:	09 f0       	breq	.+2      	; 0xa064 <put_fat+0xf0>
    a062:	7e c0       	rjmp	.+252    	; 0xa160 <put_fat+0x1ec>
    a064:	11 70       	andi	r17, 0x01	; 1
    a066:	f1 01       	movw	r30, r2
    a068:	e0 0f       	add	r30, r16
    a06a:	f1 1f       	adc	r31, r17
    a06c:	89 81       	ldd	r24, Y+1	; 0x01
    a06e:	9a 81       	ldd	r25, Y+2	; 0x02
    a070:	ab 81       	ldd	r26, Y+3	; 0x03
    a072:	bc 81       	ldd	r27, Y+4	; 0x04
    a074:	89 2b       	or	r24, r25
    a076:	8a 2b       	or	r24, r26
    a078:	8b 2b       	or	r24, r27
    a07a:	41 f0       	breq	.+16     	; 0xa08c <put_fat+0x118>
    a07c:	54 e0       	ldi	r21, 0x04	; 4
    a07e:	76 94       	lsr	r7
    a080:	67 94       	ror	r6
    a082:	57 94       	ror	r5
    a084:	47 94       	ror	r4
    a086:	5a 95       	dec	r21
    a088:	d1 f7       	brne	.-12     	; 0xa07e <put_fat+0x10a>
    a08a:	06 c0       	rjmp	.+12     	; 0xa098 <put_fat+0x124>
    a08c:	00 81       	ld	r16, Z
    a08e:	00 7f       	andi	r16, 0xF0	; 240
    a090:	85 2d       	mov	r24, r5
    a092:	8f 70       	andi	r24, 0x0F	; 15
    a094:	40 2e       	mov	r4, r16
    a096:	48 2a       	or	r4, r24
    a098:	40 82       	st	Z, r4
    a09a:	5a c0       	rjmp	.+180    	; 0xa150 <put_fat+0x1dc>
    a09c:	77 27       	eor	r23, r23
    a09e:	6f 2d       	mov	r22, r15
    a0a0:	5e 2d       	mov	r21, r14
    a0a2:	4d 2d       	mov	r20, r13
    a0a4:	ed 81       	ldd	r30, Y+5	; 0x05
    a0a6:	fe 81       	ldd	r31, Y+6	; 0x06
    a0a8:	85 a1       	ldd	r24, Z+37	; 0x25
    a0aa:	96 a1       	ldd	r25, Z+38	; 0x26
    a0ac:	a7 a1       	ldd	r26, Z+39	; 0x27
    a0ae:	b0 a5       	ldd	r27, Z+40	; 0x28
    a0b0:	48 0f       	add	r20, r24
    a0b2:	59 1f       	adc	r21, r25
    a0b4:	6a 1f       	adc	r22, r26
    a0b6:	7b 1f       	adc	r23, r27
    a0b8:	cf 01       	movw	r24, r30
    a0ba:	87 dc       	rcall	.-1778   	; 0x99ca <move_window>
    a0bc:	5c 01       	movw	r10, r24
    a0be:	89 2b       	or	r24, r25
    a0c0:	09 f0       	breq	.+2      	; 0xa0c4 <put_fat+0x150>
    a0c2:	4e c0       	rjmp	.+156    	; 0xa160 <put_fat+0x1ec>
    a0c4:	ed 81       	ldd	r30, Y+5	; 0x05
    a0c6:	fe 81       	ldd	r31, Y+6	; 0x06
    a0c8:	f5 96       	adiw	r30, 0x35	; 53
    a0ca:	cc 0c       	add	r12, r12
    a0cc:	dd 1c       	adc	r13, r13
    a0ce:	e8 94       	clt
    a0d0:	c0 f8       	bld	r12, 0
    a0d2:	21 e0       	ldi	r18, 0x01	; 1
    a0d4:	d2 22       	and	r13, r18
    a0d6:	ec 0d       	add	r30, r12
    a0d8:	fd 1d       	adc	r31, r13
    a0da:	40 82       	st	Z, r4
    a0dc:	51 82       	std	Z+1, r5	; 0x01
    a0de:	38 c0       	rjmp	.+112    	; 0xa150 <put_fat+0x1dc>
    a0e0:	ed 81       	ldd	r30, Y+5	; 0x05
    a0e2:	fe 81       	ldd	r31, Y+6	; 0x06
    a0e4:	85 a1       	ldd	r24, Z+37	; 0x25
    a0e6:	96 a1       	ldd	r25, Z+38	; 0x26
    a0e8:	a7 a1       	ldd	r26, Z+39	; 0x27
    a0ea:	b0 a5       	ldd	r27, Z+40	; 0x28
    a0ec:	27 e0       	ldi	r18, 0x07	; 7
    a0ee:	76 95       	lsr	r23
    a0f0:	67 95       	ror	r22
    a0f2:	57 95       	ror	r21
    a0f4:	47 95       	ror	r20
    a0f6:	2a 95       	dec	r18
    a0f8:	d1 f7       	brne	.-12     	; 0xa0ee <put_fat+0x17a>
    a0fa:	48 0f       	add	r20, r24
    a0fc:	59 1f       	adc	r21, r25
    a0fe:	6a 1f       	adc	r22, r26
    a100:	7b 1f       	adc	r23, r27
    a102:	cf 01       	movw	r24, r30
    a104:	62 dc       	rcall	.-1852   	; 0x99ca <move_window>
    a106:	5c 01       	movw	r10, r24
    a108:	89 2b       	or	r24, r25
    a10a:	51 f5       	brne	.+84     	; 0xa160 <put_fat+0x1ec>
    a10c:	4d 81       	ldd	r20, Y+5	; 0x05
    a10e:	5e 81       	ldd	r21, Y+6	; 0x06
    a110:	4b 5c       	subi	r20, 0xCB	; 203
    a112:	5f 4f       	sbci	r21, 0xFF	; 255
    a114:	cc 0c       	add	r12, r12
    a116:	dd 1c       	adc	r13, r13
    a118:	cc 0c       	add	r12, r12
    a11a:	dd 1c       	adc	r13, r13
    a11c:	fc ef       	ldi	r31, 0xFC	; 252
    a11e:	cf 22       	and	r12, r31
    a120:	f1 e0       	ldi	r31, 0x01	; 1
    a122:	df 22       	and	r13, r31
    a124:	c4 0e       	add	r12, r20
    a126:	d5 1e       	adc	r13, r21
    a128:	c6 01       	movw	r24, r12
    a12a:	0e 94 0a 48 	call	0x9014	; 0x9014 <ld_dword>
    a12e:	2f e0       	ldi	r18, 0x0F	; 15
    a130:	72 22       	and	r7, r18
    a132:	dc 01       	movw	r26, r24
    a134:	cb 01       	movw	r24, r22
    a136:	88 27       	eor	r24, r24
    a138:	99 27       	eor	r25, r25
    a13a:	aa 27       	eor	r26, r26
    a13c:	b0 7f       	andi	r27, 0xF0	; 240
    a13e:	b3 01       	movw	r22, r6
    a140:	a2 01       	movw	r20, r4
    a142:	48 2b       	or	r20, r24
    a144:	59 2b       	or	r21, r25
    a146:	6a 2b       	or	r22, r26
    a148:	7b 2b       	or	r23, r27
    a14a:	c6 01       	movw	r24, r12
    a14c:	0e 94 1f 48 	call	0x903e	; 0x903e <st_dword>
    a150:	81 e0       	ldi	r24, 0x01	; 1
    a152:	ed 81       	ldd	r30, Y+5	; 0x05
    a154:	fe 81       	ldd	r31, Y+6	; 0x06
    a156:	83 83       	std	Z+3, r24	; 0x03
    a158:	03 c0       	rjmp	.+6      	; 0xa160 <put_fat+0x1ec>
    a15a:	82 e0       	ldi	r24, 0x02	; 2
    a15c:	a8 2e       	mov	r10, r24
    a15e:	b1 2c       	mov	r11, r1
    a160:	c5 01       	movw	r24, r10
    a162:	26 96       	adiw	r28, 0x06	; 6
    a164:	e2 e1       	ldi	r30, 0x12	; 18
    a166:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

0000a16a <get_fat.isra.10>:
    a16a:	a0 e0       	ldi	r26, 0x00	; 0
    a16c:	b0 e0       	ldi	r27, 0x00	; 0
    a16e:	eb eb       	ldi	r30, 0xBB	; 187
    a170:	f0 e5       	ldi	r31, 0x50	; 80
    a172:	0c 94 8e e4 	jmp	0x1c91c	; 0x1c91c <__prologue_saves__+0x10>
    a176:	42 30       	cpi	r20, 0x02	; 2
    a178:	51 05       	cpc	r21, r1
    a17a:	61 05       	cpc	r22, r1
    a17c:	71 05       	cpc	r23, r1
    a17e:	08 f4       	brcc	.+2      	; 0xa182 <get_fat.isra.10+0x18>
    a180:	9f c0       	rjmp	.+318    	; 0xa2c0 <get_fat.isra.10+0x156>
    a182:	fc 01       	movw	r30, r24
    a184:	01 8d       	ldd	r16, Z+25	; 0x19
    a186:	12 8d       	ldd	r17, Z+26	; 0x1a
    a188:	23 8d       	ldd	r18, Z+27	; 0x1b
    a18a:	34 8d       	ldd	r19, Z+28	; 0x1c
    a18c:	40 17       	cp	r20, r16
    a18e:	51 07       	cpc	r21, r17
    a190:	62 07       	cpc	r22, r18
    a192:	73 07       	cpc	r23, r19
    a194:	08 f0       	brcs	.+2      	; 0xa198 <get_fat.isra.10+0x2e>
    a196:	94 c0       	rjmp	.+296    	; 0xa2c0 <get_fat.isra.10+0x156>
    a198:	6a 01       	movw	r12, r20
    a19a:	7b 01       	movw	r14, r22
    a19c:	8c 01       	movw	r16, r24
    a19e:	80 81       	ld	r24, Z
    a1a0:	82 30       	cpi	r24, 0x02	; 2
    a1a2:	09 f4       	brne	.+2      	; 0xa1a6 <get_fat.isra.10+0x3c>
    a1a4:	4b c0       	rjmp	.+150    	; 0xa23c <get_fat.isra.10+0xd2>
    a1a6:	83 30       	cpi	r24, 0x03	; 3
    a1a8:	09 f4       	brne	.+2      	; 0xa1ac <get_fat.isra.10+0x42>
    a1aa:	67 c0       	rjmp	.+206    	; 0xa27a <get_fat.isra.10+0x110>
    a1ac:	81 30       	cpi	r24, 0x01	; 1
    a1ae:	09 f0       	breq	.+2      	; 0xa1b2 <get_fat.isra.10+0x48>
    a1b0:	87 c0       	rjmp	.+270    	; 0xa2c0 <get_fat.isra.10+0x156>
    a1b2:	ea 01       	movw	r28, r20
    a1b4:	d6 95       	lsr	r29
    a1b6:	c7 95       	ror	r28
    a1b8:	cc 0d       	add	r28, r12
    a1ba:	dd 1d       	adc	r29, r13
    a1bc:	ce 01       	movw	r24, r28
    a1be:	89 2f       	mov	r24, r25
    a1c0:	99 27       	eor	r25, r25
    a1c2:	86 95       	lsr	r24
    a1c4:	45 a1       	ldd	r20, Z+37	; 0x25
    a1c6:	56 a1       	ldd	r21, Z+38	; 0x26
    a1c8:	67 a1       	ldd	r22, Z+39	; 0x27
    a1ca:	70 a5       	ldd	r23, Z+40	; 0x28
    a1cc:	48 0f       	add	r20, r24
    a1ce:	59 1f       	adc	r21, r25
    a1d0:	61 1d       	adc	r22, r1
    a1d2:	71 1d       	adc	r23, r1
    a1d4:	cf 01       	movw	r24, r30
    a1d6:	f9 db       	rcall	.-2062   	; 0x99ca <move_window>
    a1d8:	89 2b       	or	r24, r25
    a1da:	21 f0       	breq	.+8      	; 0xa1e4 <get_fat.isra.10+0x7a>
    a1dc:	6f ef       	ldi	r22, 0xFF	; 255
    a1de:	7f ef       	ldi	r23, 0xFF	; 255
    a1e0:	cb 01       	movw	r24, r22
    a1e2:	72 c0       	rjmp	.+228    	; 0xa2c8 <get_fat.isra.10+0x15e>
    a1e4:	5e 01       	movw	r10, r28
    a1e6:	ff ef       	ldi	r31, 0xFF	; 255
    a1e8:	af 1a       	sub	r10, r31
    a1ea:	bf 0a       	sbc	r11, r31
    a1ec:	d1 70       	andi	r29, 0x01	; 1
    a1ee:	c0 0f       	add	r28, r16
    a1f0:	d1 1f       	adc	r29, r17
    a1f2:	cd a9       	ldd	r28, Y+53	; 0x35
    a1f4:	c5 01       	movw	r24, r10
    a1f6:	89 2f       	mov	r24, r25
    a1f8:	99 27       	eor	r25, r25
    a1fa:	86 95       	lsr	r24
    a1fc:	f8 01       	movw	r30, r16
    a1fe:	45 a1       	ldd	r20, Z+37	; 0x25
    a200:	56 a1       	ldd	r21, Z+38	; 0x26
    a202:	67 a1       	ldd	r22, Z+39	; 0x27
    a204:	70 a5       	ldd	r23, Z+40	; 0x28
    a206:	48 0f       	add	r20, r24
    a208:	59 1f       	adc	r21, r25
    a20a:	61 1d       	adc	r22, r1
    a20c:	71 1d       	adc	r23, r1
    a20e:	c8 01       	movw	r24, r16
    a210:	dc db       	rcall	.-2120   	; 0x99ca <move_window>
    a212:	89 2b       	or	r24, r25
    a214:	19 f7       	brne	.-58     	; 0xa1dc <get_fat.isra.10+0x72>
    a216:	f1 e0       	ldi	r31, 0x01	; 1
    a218:	bf 22       	and	r11, r31
    a21a:	f8 01       	movw	r30, r16
    a21c:	ea 0d       	add	r30, r10
    a21e:	fb 1d       	adc	r31, r11
    a220:	85 a9       	ldd	r24, Z+53	; 0x35
    a222:	6c 2f       	mov	r22, r28
    a224:	70 e0       	ldi	r23, 0x00	; 0
    a226:	78 2b       	or	r23, r24
    a228:	c0 fe       	sbrs	r12, 0
    a22a:	06 c0       	rjmp	.+12     	; 0xa238 <get_fat.isra.10+0xce>
    a22c:	54 e0       	ldi	r21, 0x04	; 4
    a22e:	76 95       	lsr	r23
    a230:	67 95       	ror	r22
    a232:	5a 95       	dec	r21
    a234:	e1 f7       	brne	.-8      	; 0xa22e <get_fat.isra.10+0xc4>
    a236:	1e c0       	rjmp	.+60     	; 0xa274 <get_fat.isra.10+0x10a>
    a238:	7f 70       	andi	r23, 0x0F	; 15
    a23a:	1c c0       	rjmp	.+56     	; 0xa274 <get_fat.isra.10+0x10a>
    a23c:	77 27       	eor	r23, r23
    a23e:	6f 2d       	mov	r22, r15
    a240:	5e 2d       	mov	r21, r14
    a242:	4d 2d       	mov	r20, r13
    a244:	85 a1       	ldd	r24, Z+37	; 0x25
    a246:	96 a1       	ldd	r25, Z+38	; 0x26
    a248:	a7 a1       	ldd	r26, Z+39	; 0x27
    a24a:	b0 a5       	ldd	r27, Z+40	; 0x28
    a24c:	48 0f       	add	r20, r24
    a24e:	59 1f       	adc	r21, r25
    a250:	6a 1f       	adc	r22, r26
    a252:	7b 1f       	adc	r23, r27
    a254:	cf 01       	movw	r24, r30
    a256:	b9 db       	rcall	.-2190   	; 0x99ca <move_window>
    a258:	89 2b       	or	r24, r25
    a25a:	09 f0       	breq	.+2      	; 0xa25e <get_fat.isra.10+0xf4>
    a25c:	bf cf       	rjmp	.-130    	; 0xa1dc <get_fat.isra.10+0x72>
    a25e:	cc 0c       	add	r12, r12
    a260:	dd 1c       	adc	r13, r13
    a262:	e8 94       	clt
    a264:	c0 f8       	bld	r12, 0
    a266:	f1 e0       	ldi	r31, 0x01	; 1
    a268:	df 22       	and	r13, r31
    a26a:	f8 01       	movw	r30, r16
    a26c:	ec 0d       	add	r30, r12
    a26e:	fd 1d       	adc	r31, r13
    a270:	65 a9       	ldd	r22, Z+53	; 0x35
    a272:	76 a9       	ldd	r23, Z+54	; 0x36
    a274:	80 e0       	ldi	r24, 0x00	; 0
    a276:	90 e0       	ldi	r25, 0x00	; 0
    a278:	27 c0       	rjmp	.+78     	; 0xa2c8 <get_fat.isra.10+0x15e>
    a27a:	85 a1       	ldd	r24, Z+37	; 0x25
    a27c:	96 a1       	ldd	r25, Z+38	; 0x26
    a27e:	a7 a1       	ldd	r26, Z+39	; 0x27
    a280:	b0 a5       	ldd	r27, Z+40	; 0x28
    a282:	27 e0       	ldi	r18, 0x07	; 7
    a284:	76 95       	lsr	r23
    a286:	67 95       	ror	r22
    a288:	57 95       	ror	r21
    a28a:	47 95       	ror	r20
    a28c:	2a 95       	dec	r18
    a28e:	d1 f7       	brne	.-12     	; 0xa284 <get_fat.isra.10+0x11a>
    a290:	48 0f       	add	r20, r24
    a292:	59 1f       	adc	r21, r25
    a294:	6a 1f       	adc	r22, r26
    a296:	7b 1f       	adc	r23, r27
    a298:	cf 01       	movw	r24, r30
    a29a:	97 db       	rcall	.-2258   	; 0x99ca <move_window>
    a29c:	89 2b       	or	r24, r25
    a29e:	09 f0       	breq	.+2      	; 0xa2a2 <get_fat.isra.10+0x138>
    a2a0:	9d cf       	rjmp	.-198    	; 0xa1dc <get_fat.isra.10+0x72>
    a2a2:	0b 5c       	subi	r16, 0xCB	; 203
    a2a4:	1f 4f       	sbci	r17, 0xFF	; 255
    a2a6:	cc 0c       	add	r12, r12
    a2a8:	dd 1c       	adc	r13, r13
    a2aa:	cc 0c       	add	r12, r12
    a2ac:	dd 1c       	adc	r13, r13
    a2ae:	c6 01       	movw	r24, r12
    a2b0:	8c 7f       	andi	r24, 0xFC	; 252
    a2b2:	91 70       	andi	r25, 0x01	; 1
    a2b4:	80 0f       	add	r24, r16
    a2b6:	91 1f       	adc	r25, r17
    a2b8:	0e 94 0a 48 	call	0x9014	; 0x9014 <ld_dword>
    a2bc:	9f 70       	andi	r25, 0x0F	; 15
    a2be:	04 c0       	rjmp	.+8      	; 0xa2c8 <get_fat.isra.10+0x15e>
    a2c0:	61 e0       	ldi	r22, 0x01	; 1
    a2c2:	70 e0       	ldi	r23, 0x00	; 0
    a2c4:	80 e0       	ldi	r24, 0x00	; 0
    a2c6:	90 e0       	ldi	r25, 0x00	; 0
    a2c8:	cd b7       	in	r28, 0x3d	; 61
    a2ca:	de b7       	in	r29, 0x3e	; 62
    a2cc:	ea e0       	ldi	r30, 0x0A	; 10
    a2ce:	0c 94 aa e4 	jmp	0x1c954	; 0x1c954 <__epilogue_restores__+0x10>

0000a2d2 <dir_sdi>:
    a2d2:	a0 e0       	ldi	r26, 0x00	; 0
    a2d4:	b0 e0       	ldi	r27, 0x00	; 0
    a2d6:	ef e6       	ldi	r30, 0x6F	; 111
    a2d8:	f1 e5       	ldi	r31, 0x51	; 81
    a2da:	0c 94 88 e4 	jmp	0x1c910	; 0x1c910 <__prologue_saves__+0x4>
    a2de:	ec 01       	movw	r28, r24
    a2e0:	6a 01       	movw	r12, r20
    a2e2:	7b 01       	movw	r14, r22
    a2e4:	41 15       	cp	r20, r1
    a2e6:	51 05       	cpc	r21, r1
    a2e8:	80 e2       	ldi	r24, 0x20	; 32
    a2ea:	68 07       	cpc	r22, r24
    a2ec:	71 05       	cpc	r23, r1
    a2ee:	18 f0       	brcs	.+6      	; 0xa2f6 <dir_sdi+0x24>
    a2f0:	82 e0       	ldi	r24, 0x02	; 2
    a2f2:	90 e0       	ldi	r25, 0x00	; 0
    a2f4:	aa c0       	rjmp	.+340    	; 0xa44a <dir_sdi+0x178>
    a2f6:	db 01       	movw	r26, r22
    a2f8:	ca 01       	movw	r24, r20
    a2fa:	8f 71       	andi	r24, 0x1F	; 31
    a2fc:	99 27       	eor	r25, r25
    a2fe:	aa 27       	eor	r26, r26
    a300:	bb 27       	eor	r27, r27
    a302:	89 2b       	or	r24, r25
    a304:	8a 2b       	or	r24, r26
    a306:	8b 2b       	or	r24, r27
    a308:	99 f7       	brne	.-26     	; 0xa2f0 <dir_sdi+0x1e>
    a30a:	08 81       	ld	r16, Y
    a30c:	19 81       	ldd	r17, Y+1	; 0x01
    a30e:	4e 87       	std	Y+14, r20	; 0x0e
    a310:	5f 87       	std	Y+15, r21	; 0x0f
    a312:	68 8b       	std	Y+16, r22	; 0x10
    a314:	79 8b       	std	Y+17, r23	; 0x11
    a316:	8e 80       	ldd	r8, Y+6	; 0x06
    a318:	9f 80       	ldd	r9, Y+7	; 0x07
    a31a:	a8 84       	ldd	r10, Y+8	; 0x08
    a31c:	b9 84       	ldd	r11, Y+9	; 0x09
    a31e:	81 14       	cp	r8, r1
    a320:	91 04       	cpc	r9, r1
    a322:	a1 04       	cpc	r10, r1
    a324:	b1 04       	cpc	r11, r1
    a326:	51 f5       	brne	.+84     	; 0xa37c <dir_sdi+0xaa>
    a328:	f8 01       	movw	r30, r16
    a32a:	80 81       	ld	r24, Z
    a32c:	83 30       	cpi	r24, 0x03	; 3
    a32e:	40 f0       	brcs	.+16     	; 0xa340 <dir_sdi+0x6e>
    a330:	81 a5       	ldd	r24, Z+41	; 0x29
    a332:	92 a5       	ldd	r25, Z+42	; 0x2a
    a334:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a336:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a338:	00 97       	sbiw	r24, 0x00	; 0
    a33a:	a1 05       	cpc	r26, r1
    a33c:	b1 05       	cpc	r27, r1
    a33e:	e1 f4       	brne	.+56     	; 0xa378 <dir_sdi+0xa6>
    a340:	f8 01       	movw	r30, r16
    a342:	87 81       	ldd	r24, Z+7	; 0x07
    a344:	90 85       	ldd	r25, Z+8	; 0x08
    a346:	a0 e0       	ldi	r26, 0x00	; 0
    a348:	b0 e0       	ldi	r27, 0x00	; 0
    a34a:	b7 01       	movw	r22, r14
    a34c:	a6 01       	movw	r20, r12
    a34e:	25 e0       	ldi	r18, 0x05	; 5
    a350:	76 95       	lsr	r23
    a352:	67 95       	ror	r22
    a354:	57 95       	ror	r21
    a356:	47 95       	ror	r20
    a358:	2a 95       	dec	r18
    a35a:	d1 f7       	brne	.-12     	; 0xa350 <dir_sdi+0x7e>
    a35c:	48 17       	cp	r20, r24
    a35e:	59 07       	cpc	r21, r25
    a360:	6a 07       	cpc	r22, r26
    a362:	7b 07       	cpc	r23, r27
    a364:	28 f6       	brcc	.-118    	; 0xa2f0 <dir_sdi+0x1e>
    a366:	81 a5       	ldd	r24, Z+41	; 0x29
    a368:	92 a5       	ldd	r25, Z+42	; 0x2a
    a36a:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a36c:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a36e:	8e 8b       	std	Y+22, r24	; 0x16
    a370:	9f 8b       	std	Y+23, r25	; 0x17
    a372:	a8 8f       	std	Y+24, r26	; 0x18
    a374:	b9 8f       	std	Y+25, r27	; 0x19
    a376:	3e c0       	rjmp	.+124    	; 0xa3f4 <dir_sdi+0x122>
    a378:	4c 01       	movw	r8, r24
    a37a:	5d 01       	movw	r10, r26
    a37c:	f8 01       	movw	r30, r16
    a37e:	41 84       	ldd	r4, Z+9	; 0x09
    a380:	52 84       	ldd	r5, Z+10	; 0x0a
    a382:	61 2c       	mov	r6, r1
    a384:	71 2c       	mov	r7, r1
    a386:	39 e0       	ldi	r19, 0x09	; 9
    a388:	44 0c       	add	r4, r4
    a38a:	55 1c       	adc	r5, r5
    a38c:	66 1c       	adc	r6, r6
    a38e:	77 1c       	adc	r7, r7
    a390:	3a 95       	dec	r19
    a392:	d1 f7       	brne	.-12     	; 0xa388 <dir_sdi+0xb6>
    a394:	b5 01       	movw	r22, r10
    a396:	a4 01       	movw	r20, r8
    a398:	c4 14       	cp	r12, r4
    a39a:	d5 04       	cpc	r13, r5
    a39c:	e6 04       	cpc	r14, r6
    a39e:	f7 04       	cpc	r15, r7
    a3a0:	10 f1       	brcs	.+68     	; 0xa3e6 <dir_sdi+0x114>
    a3a2:	88 81       	ld	r24, Y
    a3a4:	99 81       	ldd	r25, Y+1	; 0x01
    a3a6:	e1 de       	rcall	.-574    	; 0xa16a <get_fat.isra.10>
    a3a8:	4b 01       	movw	r8, r22
    a3aa:	5c 01       	movw	r10, r24
    a3ac:	6f 3f       	cpi	r22, 0xFF	; 255
    a3ae:	7f 4f       	sbci	r23, 0xFF	; 255
    a3b0:	8f 4f       	sbci	r24, 0xFF	; 255
    a3b2:	9f 4f       	sbci	r25, 0xFF	; 255
    a3b4:	09 f4       	brne	.+2      	; 0xa3b8 <dir_sdi+0xe6>
    a3b6:	47 c0       	rjmp	.+142    	; 0xa446 <dir_sdi+0x174>
    a3b8:	82 e0       	ldi	r24, 0x02	; 2
    a3ba:	88 16       	cp	r8, r24
    a3bc:	91 04       	cpc	r9, r1
    a3be:	a1 04       	cpc	r10, r1
    a3c0:	b1 04       	cpc	r11, r1
    a3c2:	08 f4       	brcc	.+2      	; 0xa3c6 <dir_sdi+0xf4>
    a3c4:	95 cf       	rjmp	.-214    	; 0xa2f0 <dir_sdi+0x1e>
    a3c6:	f8 01       	movw	r30, r16
    a3c8:	81 8d       	ldd	r24, Z+25	; 0x19
    a3ca:	92 8d       	ldd	r25, Z+26	; 0x1a
    a3cc:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a3ce:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a3d0:	88 16       	cp	r8, r24
    a3d2:	99 06       	cpc	r9, r25
    a3d4:	aa 06       	cpc	r10, r26
    a3d6:	bb 06       	cpc	r11, r27
    a3d8:	08 f0       	brcs	.+2      	; 0xa3dc <dir_sdi+0x10a>
    a3da:	8a cf       	rjmp	.-236    	; 0xa2f0 <dir_sdi+0x1e>
    a3dc:	c4 18       	sub	r12, r4
    a3de:	d5 08       	sbc	r13, r5
    a3e0:	e6 08       	sbc	r14, r6
    a3e2:	f7 08       	sbc	r15, r7
    a3e4:	d7 cf       	rjmp	.-82     	; 0xa394 <dir_sdi+0xc2>
    a3e6:	c8 01       	movw	r24, r16
    a3e8:	0e 94 c3 48 	call	0x9186	; 0x9186 <clst2sect>
    a3ec:	6e 8b       	std	Y+22, r22	; 0x16
    a3ee:	7f 8b       	std	Y+23, r23	; 0x17
    a3f0:	88 8f       	std	Y+24, r24	; 0x18
    a3f2:	99 8f       	std	Y+25, r25	; 0x19
    a3f4:	8a 8a       	std	Y+18, r8	; 0x12
    a3f6:	9b 8a       	std	Y+19, r9	; 0x13
    a3f8:	ac 8a       	std	Y+20, r10	; 0x14
    a3fa:	bd 8a       	std	Y+21, r11	; 0x15
    a3fc:	8e 89       	ldd	r24, Y+22	; 0x16
    a3fe:	9f 89       	ldd	r25, Y+23	; 0x17
    a400:	a8 8d       	ldd	r26, Y+24	; 0x18
    a402:	b9 8d       	ldd	r27, Y+25	; 0x19
    a404:	00 97       	sbiw	r24, 0x00	; 0
    a406:	a1 05       	cpc	r26, r1
    a408:	b1 05       	cpc	r27, r1
    a40a:	09 f4       	brne	.+2      	; 0xa40e <dir_sdi+0x13c>
    a40c:	71 cf       	rjmp	.-286    	; 0xa2f0 <dir_sdi+0x1e>
    a40e:	b7 01       	movw	r22, r14
    a410:	a6 01       	movw	r20, r12
    a412:	29 e0       	ldi	r18, 0x09	; 9
    a414:	76 95       	lsr	r23
    a416:	67 95       	ror	r22
    a418:	57 95       	ror	r21
    a41a:	47 95       	ror	r20
    a41c:	2a 95       	dec	r18
    a41e:	d1 f7       	brne	.-12     	; 0xa414 <dir_sdi+0x142>
    a420:	84 0f       	add	r24, r20
    a422:	95 1f       	adc	r25, r21
    a424:	a6 1f       	adc	r26, r22
    a426:	b7 1f       	adc	r27, r23
    a428:	8e 8b       	std	Y+22, r24	; 0x16
    a42a:	9f 8b       	std	Y+23, r25	; 0x17
    a42c:	a8 8f       	std	Y+24, r26	; 0x18
    a42e:	b9 8f       	std	Y+25, r27	; 0x19
    a430:	0b 5c       	subi	r16, 0xCB	; 203
    a432:	1f 4f       	sbci	r17, 0xFF	; 255
    a434:	f1 e0       	ldi	r31, 0x01	; 1
    a436:	df 22       	and	r13, r31
    a438:	c0 0e       	add	r12, r16
    a43a:	d1 1e       	adc	r13, r17
    a43c:	db 8e       	std	Y+27, r13	; 0x1b
    a43e:	ca 8e       	std	Y+26, r12	; 0x1a
    a440:	80 e0       	ldi	r24, 0x00	; 0
    a442:	90 e0       	ldi	r25, 0x00	; 0
    a444:	02 c0       	rjmp	.+4      	; 0xa44a <dir_sdi+0x178>
    a446:	81 e0       	ldi	r24, 0x01	; 1
    a448:	90 e0       	ldi	r25, 0x00	; 0
    a44a:	cd b7       	in	r28, 0x3d	; 61
    a44c:	de b7       	in	r29, 0x3e	; 62
    a44e:	e0 e1       	ldi	r30, 0x10	; 16
    a450:	0c 94 a4 e4 	jmp	0x1c948	; 0x1c948 <__epilogue_restores__+0x4>

0000a454 <create_chain>:
    a454:	a0 e0       	ldi	r26, 0x00	; 0
    a456:	b0 e0       	ldi	r27, 0x00	; 0
    a458:	e0 e3       	ldi	r30, 0x30	; 48
    a45a:	f2 e5       	ldi	r31, 0x52	; 82
    a45c:	0c 94 88 e4 	jmp	0x1c910	; 0x1c910 <__prologue_saves__+0x4>
    a460:	8c 01       	movw	r16, r24
    a462:	2a 01       	movw	r4, r20
    a464:	3b 01       	movw	r6, r22
    a466:	fc 01       	movw	r30, r24
    a468:	c0 81       	ld	r28, Z
    a46a:	d1 81       	ldd	r29, Z+1	; 0x01
    a46c:	41 15       	cp	r20, r1
    a46e:	51 05       	cpc	r21, r1
    a470:	61 05       	cpc	r22, r1
    a472:	71 05       	cpc	r23, r1
    a474:	99 f4       	brne	.+38     	; 0xa49c <create_chain+0x48>
    a476:	8d 84       	ldd	r8, Y+13	; 0x0d
    a478:	9e 84       	ldd	r9, Y+14	; 0x0e
    a47a:	af 84       	ldd	r10, Y+15	; 0x0f
    a47c:	b8 88       	ldd	r11, Y+16	; 0x10
    a47e:	81 14       	cp	r8, r1
    a480:	91 04       	cpc	r9, r1
    a482:	a1 04       	cpc	r10, r1
    a484:	b1 04       	cpc	r11, r1
    a486:	51 f1       	breq	.+84     	; 0xa4dc <create_chain+0x88>
    a488:	89 8d       	ldd	r24, Y+25	; 0x19
    a48a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a48c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a48e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a490:	88 16       	cp	r8, r24
    a492:	99 06       	cpc	r9, r25
    a494:	aa 06       	cpc	r10, r26
    a496:	bb 06       	cpc	r11, r27
    a498:	28 f1       	brcs	.+74     	; 0xa4e4 <create_chain+0x90>
    a49a:	20 c0       	rjmp	.+64     	; 0xa4dc <create_chain+0x88>
    a49c:	ce 01       	movw	r24, r28
    a49e:	65 de       	rcall	.-822    	; 0xa16a <get_fat.isra.10>
    a4a0:	62 30       	cpi	r22, 0x02	; 2
    a4a2:	71 05       	cpc	r23, r1
    a4a4:	81 05       	cpc	r24, r1
    a4a6:	91 05       	cpc	r25, r1
    a4a8:	08 f4       	brcc	.+2      	; 0xa4ac <create_chain+0x58>
    a4aa:	ea c0       	rjmp	.+468    	; 0xa680 <create_chain+0x22c>
    a4ac:	6f 3f       	cpi	r22, 0xFF	; 255
    a4ae:	ff ef       	ldi	r31, 0xFF	; 255
    a4b0:	7f 07       	cpc	r23, r31
    a4b2:	8f 07       	cpc	r24, r31
    a4b4:	9f 07       	cpc	r25, r31
    a4b6:	29 f4       	brne	.+10     	; 0xa4c2 <create_chain+0x6e>
    a4b8:	4f ef       	ldi	r20, 0xFF	; 255
    a4ba:	3f ef       	ldi	r19, 0xFF	; 255
    a4bc:	2f ef       	ldi	r18, 0xFF	; 255
    a4be:	9f ef       	ldi	r25, 0xFF	; 255
    a4c0:	e7 c0       	rjmp	.+462    	; 0xa690 <create_chain+0x23c>
    a4c2:	c9 8c       	ldd	r12, Y+25	; 0x19
    a4c4:	da 8c       	ldd	r13, Y+26	; 0x1a
    a4c6:	eb 8c       	ldd	r14, Y+27	; 0x1b
    a4c8:	fc 8c       	ldd	r15, Y+28	; 0x1c
    a4ca:	6c 15       	cp	r22, r12
    a4cc:	7d 05       	cpc	r23, r13
    a4ce:	8e 05       	cpc	r24, r14
    a4d0:	9f 05       	cpc	r25, r15
    a4d2:	08 f4       	brcc	.+2      	; 0xa4d6 <create_chain+0x82>
    a4d4:	da c0       	rjmp	.+436    	; 0xa68a <create_chain+0x236>
    a4d6:	53 01       	movw	r10, r6
    a4d8:	42 01       	movw	r8, r4
    a4da:	04 c0       	rjmp	.+8      	; 0xa4e4 <create_chain+0x90>
    a4dc:	81 2c       	mov	r8, r1
    a4de:	91 2c       	mov	r9, r1
    a4e0:	54 01       	movw	r10, r8
    a4e2:	83 94       	inc	r8
    a4e4:	89 89       	ldd	r24, Y+17	; 0x11
    a4e6:	9a 89       	ldd	r25, Y+18	; 0x12
    a4e8:	ab 89       	ldd	r26, Y+19	; 0x13
    a4ea:	bc 89       	ldd	r27, Y+20	; 0x14
    a4ec:	89 2b       	or	r24, r25
    a4ee:	8a 2b       	or	r24, r26
    a4f0:	8b 2b       	or	r24, r27
    a4f2:	11 f4       	brne	.+4      	; 0xa4f8 <create_chain+0xa4>
    a4f4:	40 e0       	ldi	r20, 0x00	; 0
    a4f6:	c5 c0       	rjmp	.+394    	; 0xa682 <create_chain+0x22e>
    a4f8:	84 14       	cp	r8, r4
    a4fa:	95 04       	cpc	r9, r5
    a4fc:	a6 04       	cpc	r10, r6
    a4fe:	b7 04       	cpc	r11, r7
    a500:	09 f0       	breq	.+2      	; 0xa504 <create_chain+0xb0>
    a502:	46 c0       	rjmp	.+140    	; 0xa590 <create_chain+0x13c>
    a504:	75 01       	movw	r14, r10
    a506:	64 01       	movw	r12, r8
    a508:	2f ef       	ldi	r18, 0xFF	; 255
    a50a:	c2 1a       	sub	r12, r18
    a50c:	d2 0a       	sbc	r13, r18
    a50e:	e2 0a       	sbc	r14, r18
    a510:	f2 0a       	sbc	r15, r18
    a512:	89 8d       	ldd	r24, Y+25	; 0x19
    a514:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a516:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a518:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a51a:	c8 16       	cp	r12, r24
    a51c:	d9 06       	cpc	r13, r25
    a51e:	ea 06       	cpc	r14, r26
    a520:	fb 06       	cpc	r15, r27
    a522:	28 f0       	brcs	.+10     	; 0xa52e <create_chain+0xda>
    a524:	92 e0       	ldi	r25, 0x02	; 2
    a526:	c9 2e       	mov	r12, r25
    a528:	d1 2c       	mov	r13, r1
    a52a:	e1 2c       	mov	r14, r1
    a52c:	f1 2c       	mov	r15, r1
    a52e:	b7 01       	movw	r22, r14
    a530:	a6 01       	movw	r20, r12
    a532:	f8 01       	movw	r30, r16
    a534:	80 81       	ld	r24, Z
    a536:	91 81       	ldd	r25, Z+1	; 0x01
    a538:	18 de       	rcall	.-976    	; 0xa16a <get_fat.isra.10>
    a53a:	61 30       	cpi	r22, 0x01	; 1
    a53c:	71 05       	cpc	r23, r1
    a53e:	81 05       	cpc	r24, r1
    a540:	91 05       	cpc	r25, r1
    a542:	09 f4       	brne	.+2      	; 0xa546 <create_chain+0xf2>
    a544:	9d c0       	rjmp	.+314    	; 0xa680 <create_chain+0x22c>
    a546:	6f 3f       	cpi	r22, 0xFF	; 255
    a548:	ff ef       	ldi	r31, 0xFF	; 255
    a54a:	7f 07       	cpc	r23, r31
    a54c:	8f 07       	cpc	r24, r31
    a54e:	9f 07       	cpc	r25, r31
    a550:	09 f4       	brne	.+2      	; 0xa554 <create_chain+0x100>
    a552:	b2 cf       	rjmp	.-156    	; 0xa4b8 <create_chain+0x64>
    a554:	67 2b       	or	r22, r23
    a556:	68 2b       	or	r22, r24
    a558:	69 2b       	or	r22, r25
    a55a:	a9 f0       	breq	.+42     	; 0xa586 <create_chain+0x132>
    a55c:	8d 85       	ldd	r24, Y+13	; 0x0d
    a55e:	9e 85       	ldd	r25, Y+14	; 0x0e
    a560:	af 85       	ldd	r26, Y+15	; 0x0f
    a562:	b8 89       	ldd	r27, Y+16	; 0x10
    a564:	82 30       	cpi	r24, 0x02	; 2
    a566:	91 05       	cpc	r25, r1
    a568:	a1 05       	cpc	r26, r1
    a56a:	b1 05       	cpc	r27, r1
    a56c:	88 f0       	brcs	.+34     	; 0xa590 <create_chain+0x13c>
    a56e:	49 8d       	ldd	r20, Y+25	; 0x19
    a570:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a572:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a574:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a576:	84 17       	cp	r24, r20
    a578:	95 07       	cpc	r25, r21
    a57a:	a6 07       	cpc	r26, r22
    a57c:	b7 07       	cpc	r27, r23
    a57e:	40 f4       	brcc	.+16     	; 0xa590 <create_chain+0x13c>
    a580:	4c 01       	movw	r8, r24
    a582:	5d 01       	movw	r10, r26
    a584:	05 c0       	rjmp	.+10     	; 0xa590 <create_chain+0x13c>
    a586:	c1 14       	cp	r12, r1
    a588:	d1 04       	cpc	r13, r1
    a58a:	e1 04       	cpc	r14, r1
    a58c:	f1 04       	cpc	r15, r1
    a58e:	c9 f5       	brne	.+114    	; 0xa602 <create_chain+0x1ae>
    a590:	75 01       	movw	r14, r10
    a592:	64 01       	movw	r12, r8
    a594:	2f ef       	ldi	r18, 0xFF	; 255
    a596:	c2 1a       	sub	r12, r18
    a598:	d2 0a       	sbc	r13, r18
    a59a:	e2 0a       	sbc	r14, r18
    a59c:	f2 0a       	sbc	r15, r18
    a59e:	89 8d       	ldd	r24, Y+25	; 0x19
    a5a0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a5a2:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a5a4:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a5a6:	c8 16       	cp	r12, r24
    a5a8:	d9 06       	cpc	r13, r25
    a5aa:	ea 06       	cpc	r14, r26
    a5ac:	fb 06       	cpc	r15, r27
    a5ae:	60 f0       	brcs	.+24     	; 0xa5c8 <create_chain+0x174>
    a5b0:	82 e0       	ldi	r24, 0x02	; 2
    a5b2:	88 16       	cp	r8, r24
    a5b4:	91 04       	cpc	r9, r1
    a5b6:	a1 04       	cpc	r10, r1
    a5b8:	b1 04       	cpc	r11, r1
    a5ba:	08 f4       	brcc	.+2      	; 0xa5be <create_chain+0x16a>
    a5bc:	9b cf       	rjmp	.-202    	; 0xa4f4 <create_chain+0xa0>
    a5be:	82 e0       	ldi	r24, 0x02	; 2
    a5c0:	c8 2e       	mov	r12, r24
    a5c2:	d1 2c       	mov	r13, r1
    a5c4:	e1 2c       	mov	r14, r1
    a5c6:	f1 2c       	mov	r15, r1
    a5c8:	b7 01       	movw	r22, r14
    a5ca:	a6 01       	movw	r20, r12
    a5cc:	f8 01       	movw	r30, r16
    a5ce:	80 81       	ld	r24, Z
    a5d0:	91 81       	ldd	r25, Z+1	; 0x01
    a5d2:	cb dd       	rcall	.-1130   	; 0xa16a <get_fat.isra.10>
    a5d4:	61 15       	cp	r22, r1
    a5d6:	71 05       	cpc	r23, r1
    a5d8:	81 05       	cpc	r24, r1
    a5da:	91 05       	cpc	r25, r1
    a5dc:	91 f0       	breq	.+36     	; 0xa602 <create_chain+0x1ae>
    a5de:	61 30       	cpi	r22, 0x01	; 1
    a5e0:	71 05       	cpc	r23, r1
    a5e2:	81 05       	cpc	r24, r1
    a5e4:	91 05       	cpc	r25, r1
    a5e6:	09 f4       	brne	.+2      	; 0xa5ea <create_chain+0x196>
    a5e8:	4b c0       	rjmp	.+150    	; 0xa680 <create_chain+0x22c>
    a5ea:	6f 3f       	cpi	r22, 0xFF	; 255
    a5ec:	7f 4f       	sbci	r23, 0xFF	; 255
    a5ee:	8f 4f       	sbci	r24, 0xFF	; 255
    a5f0:	9f 4f       	sbci	r25, 0xFF	; 255
    a5f2:	09 f4       	brne	.+2      	; 0xa5f6 <create_chain+0x1a2>
    a5f4:	61 cf       	rjmp	.-318    	; 0xa4b8 <create_chain+0x64>
    a5f6:	c8 14       	cp	r12, r8
    a5f8:	d9 04       	cpc	r13, r9
    a5fa:	ea 04       	cpc	r14, r10
    a5fc:	fb 04       	cpc	r15, r11
    a5fe:	51 f6       	brne	.-108    	; 0xa594 <create_chain+0x140>
    a600:	79 cf       	rjmp	.-270    	; 0xa4f4 <create_chain+0xa0>
    a602:	0f ef       	ldi	r16, 0xFF	; 255
    a604:	1f ef       	ldi	r17, 0xFF	; 255
    a606:	98 01       	movw	r18, r16
    a608:	b7 01       	movw	r22, r14
    a60a:	a6 01       	movw	r20, r12
    a60c:	ce 01       	movw	r24, r28
    a60e:	b2 dc       	rcall	.-1692   	; 0x9f74 <put_fat>
    a610:	00 97       	sbiw	r24, 0x00	; 0
    a612:	99 f5       	brne	.+102    	; 0xa67a <create_chain+0x226>
    a614:	41 14       	cp	r4, r1
    a616:	51 04       	cpc	r5, r1
    a618:	61 04       	cpc	r6, r1
    a61a:	71 04       	cpc	r7, r1
    a61c:	e9 f4       	brne	.+58     	; 0xa658 <create_chain+0x204>
    a61e:	cd 86       	std	Y+13, r12	; 0x0d
    a620:	de 86       	std	Y+14, r13	; 0x0e
    a622:	ef 86       	std	Y+15, r14	; 0x0f
    a624:	f8 8a       	std	Y+16, r15	; 0x10
    a626:	89 89       	ldd	r24, Y+17	; 0x11
    a628:	9a 89       	ldd	r25, Y+18	; 0x12
    a62a:	ab 89       	ldd	r26, Y+19	; 0x13
    a62c:	bc 89       	ldd	r27, Y+20	; 0x14
    a62e:	49 8d       	ldd	r20, Y+25	; 0x19
    a630:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a632:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a634:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a636:	42 50       	subi	r20, 0x02	; 2
    a638:	51 09       	sbc	r21, r1
    a63a:	61 09       	sbc	r22, r1
    a63c:	71 09       	sbc	r23, r1
    a63e:	48 17       	cp	r20, r24
    a640:	59 07       	cpc	r21, r25
    a642:	6a 07       	cpc	r22, r26
    a644:	7b 07       	cpc	r23, r27
    a646:	88 f0       	brcs	.+34     	; 0xa66a <create_chain+0x216>
    a648:	01 97       	sbiw	r24, 0x01	; 1
    a64a:	a1 09       	sbc	r26, r1
    a64c:	b1 09       	sbc	r27, r1
    a64e:	89 8b       	std	Y+17, r24	; 0x11
    a650:	9a 8b       	std	Y+18, r25	; 0x12
    a652:	ab 8b       	std	Y+19, r26	; 0x13
    a654:	bc 8b       	std	Y+20, r27	; 0x14
    a656:	09 c0       	rjmp	.+18     	; 0xa66a <create_chain+0x216>
    a658:	97 01       	movw	r18, r14
    a65a:	86 01       	movw	r16, r12
    a65c:	b3 01       	movw	r22, r6
    a65e:	a2 01       	movw	r20, r4
    a660:	ce 01       	movw	r24, r28
    a662:	88 dc       	rcall	.-1776   	; 0x9f74 <put_fat>
    a664:	00 97       	sbiw	r24, 0x00	; 0
    a666:	d9 f2       	breq	.-74     	; 0xa61e <create_chain+0x1ca>
    a668:	08 c0       	rjmp	.+16     	; 0xa67a <create_chain+0x226>
    a66a:	8c 81       	ldd	r24, Y+4	; 0x04
    a66c:	81 60       	ori	r24, 0x01	; 1
    a66e:	8c 83       	std	Y+4, r24	; 0x04
    a670:	4c 2d       	mov	r20, r12
    a672:	3d 2d       	mov	r19, r13
    a674:	2e 2d       	mov	r18, r14
    a676:	9f 2d       	mov	r25, r15
    a678:	0b c0       	rjmp	.+22     	; 0xa690 <create_chain+0x23c>
    a67a:	01 97       	sbiw	r24, 0x01	; 1
    a67c:	09 f4       	brne	.+2      	; 0xa680 <create_chain+0x22c>
    a67e:	1c cf       	rjmp	.-456    	; 0xa4b8 <create_chain+0x64>
    a680:	41 e0       	ldi	r20, 0x01	; 1
    a682:	30 e0       	ldi	r19, 0x00	; 0
    a684:	20 e0       	ldi	r18, 0x00	; 0
    a686:	90 e0       	ldi	r25, 0x00	; 0
    a688:	03 c0       	rjmp	.+6      	; 0xa690 <create_chain+0x23c>
    a68a:	46 2f       	mov	r20, r22
    a68c:	37 2f       	mov	r19, r23
    a68e:	28 2f       	mov	r18, r24
    a690:	64 2f       	mov	r22, r20
    a692:	73 2f       	mov	r23, r19
    a694:	82 2f       	mov	r24, r18
    a696:	cd b7       	in	r28, 0x3d	; 61
    a698:	de b7       	in	r29, 0x3e	; 62
    a69a:	e0 e1       	ldi	r30, 0x10	; 16
    a69c:	0c 94 a4 e4 	jmp	0x1c948	; 0x1c948 <__epilogue_restores__+0x4>

0000a6a0 <remove_chain>:
    a6a0:	4f 92       	push	r4
    a6a2:	5f 92       	push	r5
    a6a4:	6f 92       	push	r6
    a6a6:	7f 92       	push	r7
    a6a8:	af 92       	push	r10
    a6aa:	bf 92       	push	r11
    a6ac:	cf 92       	push	r12
    a6ae:	df 92       	push	r13
    a6b0:	ef 92       	push	r14
    a6b2:	ff 92       	push	r15
    a6b4:	0f 93       	push	r16
    a6b6:	1f 93       	push	r17
    a6b8:	cf 93       	push	r28
    a6ba:	df 93       	push	r29
    a6bc:	5c 01       	movw	r10, r24
    a6be:	6a 01       	movw	r12, r20
    a6c0:	7b 01       	movw	r14, r22
    a6c2:	b9 01       	movw	r22, r18
    a6c4:	a8 01       	movw	r20, r16
    a6c6:	22 e0       	ldi	r18, 0x02	; 2
    a6c8:	c2 16       	cp	r12, r18
    a6ca:	d1 04       	cpc	r13, r1
    a6cc:	e1 04       	cpc	r14, r1
    a6ce:	f1 04       	cpc	r15, r1
    a6d0:	10 f4       	brcc	.+4      	; 0xa6d6 <remove_chain+0x36>
    a6d2:	22 e0       	ldi	r18, 0x02	; 2
    a6d4:	27 c0       	rjmp	.+78     	; 0xa724 <remove_chain+0x84>
    a6d6:	fc 01       	movw	r30, r24
    a6d8:	c0 81       	ld	r28, Z
    a6da:	d1 81       	ldd	r29, Z+1	; 0x01
    a6dc:	89 8d       	ldd	r24, Y+25	; 0x19
    a6de:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a6e0:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a6e2:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a6e4:	c8 16       	cp	r12, r24
    a6e6:	d9 06       	cpc	r13, r25
    a6e8:	ea 06       	cpc	r14, r26
    a6ea:	fb 06       	cpc	r15, r27
    a6ec:	90 f7       	brcc	.-28     	; 0xa6d2 <remove_chain+0x32>
    a6ee:	41 15       	cp	r20, r1
    a6f0:	51 05       	cpc	r21, r1
    a6f2:	61 05       	cpc	r22, r1
    a6f4:	71 05       	cpc	r23, r1
    a6f6:	41 f0       	breq	.+16     	; 0xa708 <remove_chain+0x68>
    a6f8:	0f ef       	ldi	r16, 0xFF	; 255
    a6fa:	1f ef       	ldi	r17, 0xFF	; 255
    a6fc:	98 01       	movw	r18, r16
    a6fe:	ce 01       	movw	r24, r28
    a700:	39 dc       	rcall	.-1934   	; 0x9f74 <put_fat>
    a702:	00 97       	sbiw	r24, 0x00	; 0
    a704:	09 f0       	breq	.+2      	; 0xa708 <remove_chain+0x68>
    a706:	4c c0       	rjmp	.+152    	; 0xa7a0 <remove_chain+0x100>
    a708:	b7 01       	movw	r22, r14
    a70a:	a6 01       	movw	r20, r12
    a70c:	f5 01       	movw	r30, r10
    a70e:	80 81       	ld	r24, Z
    a710:	91 81       	ldd	r25, Z+1	; 0x01
    a712:	2b dd       	rcall	.-1450   	; 0xa16a <get_fat.isra.10>
    a714:	2b 01       	movw	r4, r22
    a716:	3c 01       	movw	r6, r24
    a718:	61 15       	cp	r22, r1
    a71a:	71 05       	cpc	r23, r1
    a71c:	81 05       	cpc	r24, r1
    a71e:	91 05       	cpc	r25, r1
    a720:	19 f4       	brne	.+6      	; 0xa728 <remove_chain+0x88>
    a722:	20 e0       	ldi	r18, 0x00	; 0
    a724:	90 e0       	ldi	r25, 0x00	; 0
    a726:	3d c0       	rjmp	.+122    	; 0xa7a2 <remove_chain+0x102>
    a728:	61 30       	cpi	r22, 0x01	; 1
    a72a:	71 05       	cpc	r23, r1
    a72c:	81 05       	cpc	r24, r1
    a72e:	91 05       	cpc	r25, r1
    a730:	81 f2       	breq	.-96     	; 0xa6d2 <remove_chain+0x32>
    a732:	6f 3f       	cpi	r22, 0xFF	; 255
    a734:	7f 4f       	sbci	r23, 0xFF	; 255
    a736:	8f 4f       	sbci	r24, 0xFF	; 255
    a738:	9f 4f       	sbci	r25, 0xFF	; 255
    a73a:	81 f1       	breq	.+96     	; 0xa79c <remove_chain+0xfc>
    a73c:	00 e0       	ldi	r16, 0x00	; 0
    a73e:	10 e0       	ldi	r17, 0x00	; 0
    a740:	98 01       	movw	r18, r16
    a742:	b7 01       	movw	r22, r14
    a744:	a6 01       	movw	r20, r12
    a746:	ce 01       	movw	r24, r28
    a748:	15 dc       	rcall	.-2006   	; 0x9f74 <put_fat>
    a74a:	00 97       	sbiw	r24, 0x00	; 0
    a74c:	49 f5       	brne	.+82     	; 0xa7a0 <remove_chain+0x100>
    a74e:	89 89       	ldd	r24, Y+17	; 0x11
    a750:	9a 89       	ldd	r25, Y+18	; 0x12
    a752:	ab 89       	ldd	r26, Y+19	; 0x13
    a754:	bc 89       	ldd	r27, Y+20	; 0x14
    a756:	49 8d       	ldd	r20, Y+25	; 0x19
    a758:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a75a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a75c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a75e:	6a 01       	movw	r12, r20
    a760:	7b 01       	movw	r14, r22
    a762:	e2 e0       	ldi	r30, 0x02	; 2
    a764:	ce 1a       	sub	r12, r30
    a766:	d1 08       	sbc	r13, r1
    a768:	e1 08       	sbc	r14, r1
    a76a:	f1 08       	sbc	r15, r1
    a76c:	8c 15       	cp	r24, r12
    a76e:	9d 05       	cpc	r25, r13
    a770:	ae 05       	cpc	r26, r14
    a772:	bf 05       	cpc	r27, r15
    a774:	50 f4       	brcc	.+20     	; 0xa78a <remove_chain+0xea>
    a776:	01 96       	adiw	r24, 0x01	; 1
    a778:	a1 1d       	adc	r26, r1
    a77a:	b1 1d       	adc	r27, r1
    a77c:	89 8b       	std	Y+17, r24	; 0x11
    a77e:	9a 8b       	std	Y+18, r25	; 0x12
    a780:	ab 8b       	std	Y+19, r26	; 0x13
    a782:	bc 8b       	std	Y+20, r27	; 0x14
    a784:	8c 81       	ldd	r24, Y+4	; 0x04
    a786:	81 60       	ori	r24, 0x01	; 1
    a788:	8c 83       	std	Y+4, r24	; 0x04
    a78a:	73 01       	movw	r14, r6
    a78c:	62 01       	movw	r12, r4
    a78e:	44 16       	cp	r4, r20
    a790:	55 06       	cpc	r5, r21
    a792:	66 06       	cpc	r6, r22
    a794:	77 06       	cpc	r7, r23
    a796:	08 f4       	brcc	.+2      	; 0xa79a <remove_chain+0xfa>
    a798:	b7 cf       	rjmp	.-146    	; 0xa708 <remove_chain+0x68>
    a79a:	c3 cf       	rjmp	.-122    	; 0xa722 <remove_chain+0x82>
    a79c:	21 e0       	ldi	r18, 0x01	; 1
    a79e:	c2 cf       	rjmp	.-124    	; 0xa724 <remove_chain+0x84>
    a7a0:	28 2f       	mov	r18, r24
    a7a2:	82 2f       	mov	r24, r18
    a7a4:	df 91       	pop	r29
    a7a6:	cf 91       	pop	r28
    a7a8:	1f 91       	pop	r17
    a7aa:	0f 91       	pop	r16
    a7ac:	ff 90       	pop	r15
    a7ae:	ef 90       	pop	r14
    a7b0:	df 90       	pop	r13
    a7b2:	cf 90       	pop	r12
    a7b4:	bf 90       	pop	r11
    a7b6:	af 90       	pop	r10
    a7b8:	7f 90       	pop	r7
    a7ba:	6f 90       	pop	r6
    a7bc:	5f 90       	pop	r5
    a7be:	4f 90       	pop	r4
    a7c0:	08 95       	ret

0000a7c2 <dir_next>:
    a7c2:	4f 92       	push	r4
    a7c4:	5f 92       	push	r5
    a7c6:	6f 92       	push	r6
    a7c8:	7f 92       	push	r7
    a7ca:	af 92       	push	r10
    a7cc:	bf 92       	push	r11
    a7ce:	cf 92       	push	r12
    a7d0:	df 92       	push	r13
    a7d2:	ef 92       	push	r14
    a7d4:	ff 92       	push	r15
    a7d6:	0f 93       	push	r16
    a7d8:	1f 93       	push	r17
    a7da:	cf 93       	push	r28
    a7dc:	df 93       	push	r29
    a7de:	ec 01       	movw	r28, r24
    a7e0:	08 81       	ld	r16, Y
    a7e2:	19 81       	ldd	r17, Y+1	; 0x01
    a7e4:	ce 84       	ldd	r12, Y+14	; 0x0e
    a7e6:	df 84       	ldd	r13, Y+15	; 0x0f
    a7e8:	e8 88       	ldd	r14, Y+16	; 0x10
    a7ea:	f9 88       	ldd	r15, Y+17	; 0x11
    a7ec:	80 e2       	ldi	r24, 0x20	; 32
    a7ee:	c8 0e       	add	r12, r24
    a7f0:	d1 1c       	adc	r13, r1
    a7f2:	e1 1c       	adc	r14, r1
    a7f4:	f1 1c       	adc	r15, r1
    a7f6:	c1 14       	cp	r12, r1
    a7f8:	d1 04       	cpc	r13, r1
    a7fa:	e0 e2       	ldi	r30, 0x20	; 32
    a7fc:	ee 06       	cpc	r14, r30
    a7fe:	f1 04       	cpc	r15, r1
    a800:	20 f0       	brcs	.+8      	; 0xa80a <dir_next+0x48>
    a802:	1e 8a       	std	Y+22, r1	; 0x16
    a804:	1f 8a       	std	Y+23, r1	; 0x17
    a806:	18 8e       	std	Y+24, r1	; 0x18
    a808:	19 8e       	std	Y+25, r1	; 0x19
    a80a:	8e 89       	ldd	r24, Y+22	; 0x16
    a80c:	9f 89       	ldd	r25, Y+23	; 0x17
    a80e:	a8 8d       	ldd	r26, Y+24	; 0x18
    a810:	b9 8d       	ldd	r27, Y+25	; 0x19
    a812:	00 97       	sbiw	r24, 0x00	; 0
    a814:	a1 05       	cpc	r26, r1
    a816:	b1 05       	cpc	r27, r1
    a818:	09 f4       	brne	.+2      	; 0xa81c <dir_next+0x5a>
    a81a:	a7 c0       	rjmp	.+334    	; 0xa96a <dir_next+0x1a8>
    a81c:	5b 01       	movw	r10, r22
    a81e:	b7 01       	movw	r22, r14
    a820:	a6 01       	movw	r20, r12
    a822:	51 70       	andi	r21, 0x01	; 1
    a824:	66 27       	eor	r22, r22
    a826:	77 27       	eor	r23, r23
    a828:	45 2b       	or	r20, r21
    a82a:	46 2b       	or	r20, r22
    a82c:	47 2b       	or	r20, r23
    a82e:	09 f0       	breq	.+2      	; 0xa832 <dir_next+0x70>
    a830:	8d c0       	rjmp	.+282    	; 0xa94c <dir_next+0x18a>
    a832:	01 96       	adiw	r24, 0x01	; 1
    a834:	a1 1d       	adc	r26, r1
    a836:	b1 1d       	adc	r27, r1
    a838:	8e 8b       	std	Y+22, r24	; 0x16
    a83a:	9f 8b       	std	Y+23, r25	; 0x17
    a83c:	a8 8f       	std	Y+24, r26	; 0x18
    a83e:	b9 8f       	std	Y+25, r27	; 0x19
    a840:	4a 89       	ldd	r20, Y+18	; 0x12
    a842:	5b 89       	ldd	r21, Y+19	; 0x13
    a844:	6c 89       	ldd	r22, Y+20	; 0x14
    a846:	7d 89       	ldd	r23, Y+21	; 0x15
    a848:	f8 01       	movw	r30, r16
    a84a:	41 15       	cp	r20, r1
    a84c:	51 05       	cpc	r21, r1
    a84e:	61 05       	cpc	r22, r1
    a850:	71 05       	cpc	r23, r1
    a852:	c1 f4       	brne	.+48     	; 0xa884 <dir_next+0xc2>
    a854:	87 81       	ldd	r24, Z+7	; 0x07
    a856:	90 85       	ldd	r25, Z+8	; 0x08
    a858:	a0 e0       	ldi	r26, 0x00	; 0
    a85a:	b0 e0       	ldi	r27, 0x00	; 0
    a85c:	b7 01       	movw	r22, r14
    a85e:	a6 01       	movw	r20, r12
    a860:	35 e0       	ldi	r19, 0x05	; 5
    a862:	76 95       	lsr	r23
    a864:	67 95       	ror	r22
    a866:	57 95       	ror	r21
    a868:	47 95       	ror	r20
    a86a:	3a 95       	dec	r19
    a86c:	d1 f7       	brne	.-12     	; 0xa862 <dir_next+0xa0>
    a86e:	48 17       	cp	r20, r24
    a870:	59 07       	cpc	r21, r25
    a872:	6a 07       	cpc	r22, r26
    a874:	7b 07       	cpc	r23, r27
    a876:	08 f4       	brcc	.+2      	; 0xa87a <dir_next+0xb8>
    a878:	69 c0       	rjmp	.+210    	; 0xa94c <dir_next+0x18a>
    a87a:	1e 8a       	std	Y+22, r1	; 0x16
    a87c:	1f 8a       	std	Y+23, r1	; 0x17
    a87e:	18 8e       	std	Y+24, r1	; 0x18
    a880:	19 8e       	std	Y+25, r1	; 0x19
    a882:	73 c0       	rjmp	.+230    	; 0xa96a <dir_next+0x1a8>
    a884:	81 85       	ldd	r24, Z+9	; 0x09
    a886:	92 85       	ldd	r25, Z+10	; 0x0a
    a888:	01 97       	sbiw	r24, 0x01	; 1
    a88a:	a0 e0       	ldi	r26, 0x00	; 0
    a88c:	b0 e0       	ldi	r27, 0x00	; 0
    a88e:	26 01       	movw	r4, r12
    a890:	37 01       	movw	r6, r14
    a892:	29 e0       	ldi	r18, 0x09	; 9
    a894:	76 94       	lsr	r7
    a896:	67 94       	ror	r6
    a898:	57 94       	ror	r5
    a89a:	47 94       	ror	r4
    a89c:	2a 95       	dec	r18
    a89e:	d1 f7       	brne	.-12     	; 0xa894 <dir_next+0xd2>
    a8a0:	84 21       	and	r24, r4
    a8a2:	95 21       	and	r25, r5
    a8a4:	a6 21       	and	r26, r6
    a8a6:	b7 21       	and	r27, r7
    a8a8:	89 2b       	or	r24, r25
    a8aa:	8a 2b       	or	r24, r26
    a8ac:	8b 2b       	or	r24, r27
    a8ae:	09 f0       	breq	.+2      	; 0xa8b2 <dir_next+0xf0>
    a8b0:	4d c0       	rjmp	.+154    	; 0xa94c <dir_next+0x18a>
    a8b2:	c8 01       	movw	r24, r16
    a8b4:	5a dc       	rcall	.-1868   	; 0xa16a <get_fat.isra.10>
    a8b6:	2b 01       	movw	r4, r22
    a8b8:	3c 01       	movw	r6, r24
    a8ba:	62 30       	cpi	r22, 0x02	; 2
    a8bc:	71 05       	cpc	r23, r1
    a8be:	81 05       	cpc	r24, r1
    a8c0:	91 05       	cpc	r25, r1
    a8c2:	18 f4       	brcc	.+6      	; 0xa8ca <dir_next+0x108>
    a8c4:	82 e0       	ldi	r24, 0x02	; 2
    a8c6:	90 e0       	ldi	r25, 0x00	; 0
    a8c8:	55 c0       	rjmp	.+170    	; 0xa974 <dir_next+0x1b2>
    a8ca:	8f ef       	ldi	r24, 0xFF	; 255
    a8cc:	48 16       	cp	r4, r24
    a8ce:	58 06       	cpc	r5, r24
    a8d0:	68 06       	cpc	r6, r24
    a8d2:	78 06       	cpc	r7, r24
    a8d4:	19 f4       	brne	.+6      	; 0xa8dc <dir_next+0x11a>
    a8d6:	81 e0       	ldi	r24, 0x01	; 1
    a8d8:	90 e0       	ldi	r25, 0x00	; 0
    a8da:	4c c0       	rjmp	.+152    	; 0xa974 <dir_next+0x1b2>
    a8dc:	f8 01       	movw	r30, r16
    a8de:	81 8d       	ldd	r24, Z+25	; 0x19
    a8e0:	92 8d       	ldd	r25, Z+26	; 0x1a
    a8e2:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a8e4:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a8e6:	48 16       	cp	r4, r24
    a8e8:	59 06       	cpc	r5, r25
    a8ea:	6a 06       	cpc	r6, r26
    a8ec:	7b 06       	cpc	r7, r27
    a8ee:	08 f1       	brcs	.+66     	; 0xa932 <dir_next+0x170>
    a8f0:	ab 28       	or	r10, r11
    a8f2:	19 f2       	breq	.-122    	; 0xa87a <dir_next+0xb8>
    a8f4:	4a 89       	ldd	r20, Y+18	; 0x12
    a8f6:	5b 89       	ldd	r21, Y+19	; 0x13
    a8f8:	6c 89       	ldd	r22, Y+20	; 0x14
    a8fa:	7d 89       	ldd	r23, Y+21	; 0x15
    a8fc:	ce 01       	movw	r24, r28
    a8fe:	aa dd       	rcall	.-1196   	; 0xa454 <create_chain>
    a900:	2b 01       	movw	r4, r22
    a902:	3c 01       	movw	r6, r24
    a904:	61 15       	cp	r22, r1
    a906:	71 05       	cpc	r23, r1
    a908:	81 05       	cpc	r24, r1
    a90a:	91 05       	cpc	r25, r1
    a90c:	89 f1       	breq	.+98     	; 0xa970 <dir_next+0x1ae>
    a90e:	61 30       	cpi	r22, 0x01	; 1
    a910:	71 05       	cpc	r23, r1
    a912:	81 05       	cpc	r24, r1
    a914:	91 05       	cpc	r25, r1
    a916:	b1 f2       	breq	.-84     	; 0xa8c4 <dir_next+0x102>
    a918:	8f ef       	ldi	r24, 0xFF	; 255
    a91a:	48 16       	cp	r4, r24
    a91c:	58 06       	cpc	r5, r24
    a91e:	68 06       	cpc	r6, r24
    a920:	78 06       	cpc	r7, r24
    a922:	c9 f2       	breq	.-78     	; 0xa8d6 <dir_next+0x114>
    a924:	b3 01       	movw	r22, r6
    a926:	a2 01       	movw	r20, r4
    a928:	c8 01       	movw	r24, r16
    a92a:	0e 94 3d 4c 	call	0x987a	; 0x987a <dir_clear>
    a92e:	89 2b       	or	r24, r25
    a930:	91 f6       	brne	.-92     	; 0xa8d6 <dir_next+0x114>
    a932:	4a 8a       	std	Y+18, r4	; 0x12
    a934:	5b 8a       	std	Y+19, r5	; 0x13
    a936:	6c 8a       	std	Y+20, r6	; 0x14
    a938:	7d 8a       	std	Y+21, r7	; 0x15
    a93a:	b3 01       	movw	r22, r6
    a93c:	a2 01       	movw	r20, r4
    a93e:	c8 01       	movw	r24, r16
    a940:	0e 94 c3 48 	call	0x9186	; 0x9186 <clst2sect>
    a944:	6e 8b       	std	Y+22, r22	; 0x16
    a946:	7f 8b       	std	Y+23, r23	; 0x17
    a948:	88 8f       	std	Y+24, r24	; 0x18
    a94a:	99 8f       	std	Y+25, r25	; 0x19
    a94c:	ce 86       	std	Y+14, r12	; 0x0e
    a94e:	df 86       	std	Y+15, r13	; 0x0f
    a950:	e8 8a       	std	Y+16, r14	; 0x10
    a952:	f9 8a       	std	Y+17, r15	; 0x11
    a954:	0b 5c       	subi	r16, 0xCB	; 203
    a956:	1f 4f       	sbci	r17, 0xFF	; 255
    a958:	e1 e0       	ldi	r30, 0x01	; 1
    a95a:	de 22       	and	r13, r30
    a95c:	c0 0e       	add	r12, r16
    a95e:	d1 1e       	adc	r13, r17
    a960:	db 8e       	std	Y+27, r13	; 0x1b
    a962:	ca 8e       	std	Y+26, r12	; 0x1a
    a964:	80 e0       	ldi	r24, 0x00	; 0
    a966:	90 e0       	ldi	r25, 0x00	; 0
    a968:	05 c0       	rjmp	.+10     	; 0xa974 <dir_next+0x1b2>
    a96a:	84 e0       	ldi	r24, 0x04	; 4
    a96c:	90 e0       	ldi	r25, 0x00	; 0
    a96e:	02 c0       	rjmp	.+4      	; 0xa974 <dir_next+0x1b2>
    a970:	87 e0       	ldi	r24, 0x07	; 7
    a972:	90 e0       	ldi	r25, 0x00	; 0
    a974:	df 91       	pop	r29
    a976:	cf 91       	pop	r28
    a978:	1f 91       	pop	r17
    a97a:	0f 91       	pop	r16
    a97c:	ff 90       	pop	r15
    a97e:	ef 90       	pop	r14
    a980:	df 90       	pop	r13
    a982:	cf 90       	pop	r12
    a984:	bf 90       	pop	r11
    a986:	af 90       	pop	r10
    a988:	7f 90       	pop	r7
    a98a:	6f 90       	pop	r6
    a98c:	5f 90       	pop	r5
    a98e:	4f 90       	pop	r4
    a990:	08 95       	ret

0000a992 <dir_alloc>:
    a992:	a0 e0       	ldi	r26, 0x00	; 0
    a994:	b0 e0       	ldi	r27, 0x00	; 0
    a996:	ef ec       	ldi	r30, 0xCF	; 207
    a998:	f4 e5       	ldi	r31, 0x54	; 84
    a99a:	0c 94 90 e4 	jmp	0x1c920	; 0x1c920 <__prologue_saves__+0x14>
    a99e:	ec 01       	movw	r28, r24
    a9a0:	6b 01       	movw	r12, r22
    a9a2:	e8 80       	ld	r14, Y
    a9a4:	f9 80       	ldd	r15, Y+1	; 0x01
    a9a6:	40 e0       	ldi	r20, 0x00	; 0
    a9a8:	50 e0       	ldi	r21, 0x00	; 0
    a9aa:	ba 01       	movw	r22, r20
    a9ac:	92 dc       	rcall	.-1756   	; 0xa2d2 <dir_sdi>
    a9ae:	00 97       	sbiw	r24, 0x00	; 0
    a9b0:	f9 f4       	brne	.+62     	; 0xa9f0 <dir_alloc+0x5e>
    a9b2:	00 e0       	ldi	r16, 0x00	; 0
    a9b4:	10 e0       	ldi	r17, 0x00	; 0
    a9b6:	4e 89       	ldd	r20, Y+22	; 0x16
    a9b8:	5f 89       	ldd	r21, Y+23	; 0x17
    a9ba:	68 8d       	ldd	r22, Y+24	; 0x18
    a9bc:	79 8d       	ldd	r23, Y+25	; 0x19
    a9be:	c7 01       	movw	r24, r14
    a9c0:	04 d8       	rcall	.-4088   	; 0x99ca <move_window>
    a9c2:	00 97       	sbiw	r24, 0x00	; 0
    a9c4:	a9 f4       	brne	.+42     	; 0xa9f0 <dir_alloc+0x5e>
    a9c6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a9c8:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a9ca:	20 81       	ld	r18, Z
    a9cc:	25 3e       	cpi	r18, 0xE5	; 229
    a9ce:	11 f0       	breq	.+4      	; 0xa9d4 <dir_alloc+0x42>
    a9d0:	21 11       	cpse	r18, r1
    a9d2:	06 c0       	rjmp	.+12     	; 0xa9e0 <dir_alloc+0x4e>
    a9d4:	0f 5f       	subi	r16, 0xFF	; 255
    a9d6:	1f 4f       	sbci	r17, 0xFF	; 255
    a9d8:	0c 15       	cp	r16, r12
    a9da:	1d 05       	cpc	r17, r13
    a9dc:	19 f4       	brne	.+6      	; 0xa9e4 <dir_alloc+0x52>
    a9de:	0d c0       	rjmp	.+26     	; 0xa9fa <dir_alloc+0x68>
    a9e0:	00 e0       	ldi	r16, 0x00	; 0
    a9e2:	10 e0       	ldi	r17, 0x00	; 0
    a9e4:	61 e0       	ldi	r22, 0x01	; 1
    a9e6:	70 e0       	ldi	r23, 0x00	; 0
    a9e8:	ce 01       	movw	r24, r28
    a9ea:	eb de       	rcall	.-554    	; 0xa7c2 <dir_next>
    a9ec:	00 97       	sbiw	r24, 0x00	; 0
    a9ee:	19 f3       	breq	.-58     	; 0xa9b6 <dir_alloc+0x24>
    a9f0:	84 30       	cpi	r24, 0x04	; 4
    a9f2:	91 05       	cpc	r25, r1
    a9f4:	11 f4       	brne	.+4      	; 0xa9fa <dir_alloc+0x68>
    a9f6:	87 e0       	ldi	r24, 0x07	; 7
    a9f8:	90 e0       	ldi	r25, 0x00	; 0
    a9fa:	cd b7       	in	r28, 0x3d	; 61
    a9fc:	de b7       	in	r29, 0x3e	; 62
    a9fe:	e8 e0       	ldi	r30, 0x08	; 8
    aa00:	0c 94 ac e4 	jmp	0x1c958	; 0x1c958 <__epilogue_restores__+0x14>

0000aa04 <dir_read>:
    aa04:	a0 e0       	ldi	r26, 0x00	; 0
    aa06:	b0 e0       	ldi	r27, 0x00	; 0
    aa08:	e8 e0       	ldi	r30, 0x08	; 8
    aa0a:	f5 e5       	ldi	r31, 0x55	; 85
    aa0c:	0c 94 8c e4 	jmp	0x1c918	; 0x1c918 <__prologue_saves__+0xc>
    aa10:	ec 01       	movw	r28, r24
    aa12:	7b 01       	movw	r14, r22
    aa14:	a8 80       	ld	r10, Y
    aa16:	b9 80       	ldd	r11, Y+1	; 0x01
    aa18:	dd 24       	eor	r13, r13
    aa1a:	da 94       	dec	r13
    aa1c:	1f ef       	ldi	r17, 0xFF	; 255
    aa1e:	84 e0       	ldi	r24, 0x04	; 4
    aa20:	90 e0       	ldi	r25, 0x00	; 0
    aa22:	fd e0       	ldi	r31, 0x0D	; 13
    aa24:	cf 2e       	mov	r12, r31
    aa26:	4e 89       	ldd	r20, Y+22	; 0x16
    aa28:	5f 89       	ldd	r21, Y+23	; 0x17
    aa2a:	68 8d       	ldd	r22, Y+24	; 0x18
    aa2c:	79 8d       	ldd	r23, Y+25	; 0x19
    aa2e:	41 15       	cp	r20, r1
    aa30:	51 05       	cpc	r21, r1
    aa32:	61 05       	cpc	r22, r1
    aa34:	71 05       	cpc	r23, r1
    aa36:	09 f4       	brne	.+2      	; 0xaa3a <dir_read+0x36>
    aa38:	9a c0       	rjmp	.+308    	; 0xab6e <dir_read+0x16a>
    aa3a:	c5 01       	movw	r24, r10
    aa3c:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <move_window>
    aa40:	00 97       	sbiw	r24, 0x00	; 0
    aa42:	09 f0       	breq	.+2      	; 0xaa46 <dir_read+0x42>
    aa44:	96 c0       	rjmp	.+300    	; 0xab72 <dir_read+0x16e>
    aa46:	8a 8c       	ldd	r8, Y+26	; 0x1a
    aa48:	9b 8c       	ldd	r9, Y+27	; 0x1b
    aa4a:	f4 01       	movw	r30, r8
    aa4c:	00 81       	ld	r16, Z
    aa4e:	00 23       	and	r16, r16
    aa50:	09 f4       	brne	.+2      	; 0xaa54 <dir_read+0x50>
    aa52:	97 c0       	rjmp	.+302    	; 0xab82 <dir_read+0x17e>
    aa54:	83 85       	ldd	r24, Z+11	; 0x0b
    aa56:	8f 73       	andi	r24, 0x3F	; 63
    aa58:	8c 83       	std	Y+4, r24	; 0x04
    aa5a:	05 3e       	cpi	r16, 0xE5	; 229
    aa5c:	09 f4       	brne	.+2      	; 0xaa60 <dir_read+0x5c>
    aa5e:	7e c0       	rjmp	.+252    	; 0xab5c <dir_read+0x158>
    aa60:	0e 32       	cpi	r16, 0x2E	; 46
    aa62:	09 f4       	brne	.+2      	; 0xaa66 <dir_read+0x62>
    aa64:	7b c0       	rjmp	.+246    	; 0xab5c <dir_read+0x158>
    aa66:	21 e0       	ldi	r18, 0x01	; 1
    aa68:	30 e0       	ldi	r19, 0x00	; 0
    aa6a:	98 2f       	mov	r25, r24
    aa6c:	9f 71       	andi	r25, 0x1F	; 31
    aa6e:	98 30       	cpi	r25, 0x08	; 8
    aa70:	11 f0       	breq	.+4      	; 0xaa76 <dir_read+0x72>
    aa72:	20 e0       	ldi	r18, 0x00	; 0
    aa74:	30 e0       	ldi	r19, 0x00	; 0
    aa76:	2e 15       	cp	r18, r14
    aa78:	3f 05       	cpc	r19, r15
    aa7a:	09 f0       	breq	.+2      	; 0xaa7e <dir_read+0x7a>
    aa7c:	6f c0       	rjmp	.+222    	; 0xab5c <dir_read+0x158>
    aa7e:	8f 30       	cpi	r24, 0x0F	; 15
    aa80:	09 f0       	breq	.+2      	; 0xaa84 <dir_read+0x80>
    aa82:	5c c0       	rjmp	.+184    	; 0xab3c <dir_read+0x138>
    aa84:	06 ff       	sbrs	r16, 6
    aa86:	0c c0       	rjmp	.+24     	; 0xaaa0 <dir_read+0x9c>
    aa88:	f4 01       	movw	r30, r8
    aa8a:	85 85       	ldd	r24, Z+13	; 0x0d
    aa8c:	0f 7b       	andi	r16, 0xBF	; 191
    aa8e:	4e 85       	ldd	r20, Y+14	; 0x0e
    aa90:	5f 85       	ldd	r21, Y+15	; 0x0f
    aa92:	68 89       	ldd	r22, Y+16	; 0x10
    aa94:	79 89       	ldd	r23, Y+17	; 0x11
    aa96:	48 a7       	std	Y+40, r20	; 0x28
    aa98:	59 a7       	std	Y+41, r21	; 0x29
    aa9a:	6a a7       	std	Y+42, r22	; 0x2a
    aa9c:	7b a7       	std	Y+43, r23	; 0x2b
    aa9e:	03 c0       	rjmp	.+6      	; 0xaaa6 <dir_read+0xa2>
    aaa0:	10 13       	cpse	r17, r16
    aaa2:	5c c0       	rjmp	.+184    	; 0xab5c <dir_read+0x158>
    aaa4:	8d 2d       	mov	r24, r13
    aaa6:	f4 01       	movw	r30, r8
    aaa8:	d5 84       	ldd	r13, Z+13	; 0x0d
    aaaa:	d8 12       	cpse	r13, r24
    aaac:	56 c0       	rjmp	.+172    	; 0xab5a <dir_read+0x156>
    aaae:	82 8d       	ldd	r24, Z+26	; 0x1a
    aab0:	93 8d       	ldd	r25, Z+27	; 0x1b
    aab2:	89 2b       	or	r24, r25
    aab4:	09 f0       	breq	.+2      	; 0xaab8 <dir_read+0xb4>
    aab6:	52 c0       	rjmp	.+164    	; 0xab5c <dir_read+0x158>
    aab8:	f5 01       	movw	r30, r10
    aaba:	63 85       	ldd	r22, Z+11	; 0x0b
    aabc:	74 85       	ldd	r23, Z+12	; 0x0c
    aabe:	f4 01       	movw	r30, r8
    aac0:	80 81       	ld	r24, Z
    aac2:	90 e0       	ldi	r25, 0x00	; 0
    aac4:	8f 7b       	andi	r24, 0xBF	; 191
    aac6:	01 97       	sbiw	r24, 0x01	; 1
    aac8:	c8 9e       	mul	r12, r24
    aaca:	90 01       	movw	r18, r0
    aacc:	c9 9e       	mul	r12, r25
    aace:	30 0d       	add	r19, r0
    aad0:	11 24       	eor	r1, r1
    aad2:	ab e0       	ldi	r26, 0x0B	; 11
    aad4:	b4 e0       	ldi	r27, 0x04	; 4
    aad6:	81 e0       	ldi	r24, 0x01	; 1
    aad8:	90 e0       	ldi	r25, 0x00	; 0
    aada:	4d 91       	ld	r20, X+
    aadc:	f4 01       	movw	r30, r8
    aade:	e4 0f       	add	r30, r20
    aae0:	f1 1d       	adc	r31, r1
    aae2:	40 81       	ld	r20, Z
    aae4:	51 81       	ldd	r21, Z+1	; 0x01
    aae6:	00 97       	sbiw	r24, 0x00	; 0
    aae8:	81 f0       	breq	.+32     	; 0xab0a <dir_read+0x106>
    aaea:	2f 3f       	cpi	r18, 0xFF	; 255
    aaec:	31 05       	cpc	r19, r1
    aaee:	09 f0       	breq	.+2      	; 0xaaf2 <dir_read+0xee>
    aaf0:	a8 f5       	brcc	.+106    	; 0xab5c <dir_read+0x158>
    aaf2:	c9 01       	movw	r24, r18
    aaf4:	88 0f       	add	r24, r24
    aaf6:	99 1f       	adc	r25, r25
    aaf8:	86 0f       	add	r24, r22
    aafa:	97 1f       	adc	r25, r23
    aafc:	fc 01       	movw	r30, r24
    aafe:	51 83       	std	Z+1, r21	; 0x01
    ab00:	40 83       	st	Z, r20
    ab02:	ca 01       	movw	r24, r20
    ab04:	2f 5f       	subi	r18, 0xFF	; 255
    ab06:	3f 4f       	sbci	r19, 0xFF	; 255
    ab08:	03 c0       	rjmp	.+6      	; 0xab10 <dir_read+0x10c>
    ab0a:	4f 3f       	cpi	r20, 0xFF	; 255
    ab0c:	5f 4f       	sbci	r21, 0xFF	; 255
    ab0e:	31 f5       	brne	.+76     	; 0xab5c <dir_read+0x158>
    ab10:	44 e0       	ldi	r20, 0x04	; 4
    ab12:	a8 31       	cpi	r26, 0x18	; 24
    ab14:	b4 07       	cpc	r27, r20
    ab16:	09 f7       	brne	.-62     	; 0xaada <dir_read+0xd6>
    ab18:	f4 01       	movw	r30, r8
    ab1a:	40 81       	ld	r20, Z
    ab1c:	46 ff       	sbrs	r20, 6
    ab1e:	2e c0       	rjmp	.+92     	; 0xab7c <dir_read+0x178>
    ab20:	89 2b       	or	r24, r25
    ab22:	61 f1       	breq	.+88     	; 0xab7c <dir_read+0x178>
    ab24:	2f 3f       	cpi	r18, 0xFF	; 255
    ab26:	31 05       	cpc	r19, r1
    ab28:	09 f0       	breq	.+2      	; 0xab2c <dir_read+0x128>
    ab2a:	c0 f4       	brcc	.+48     	; 0xab5c <dir_read+0x158>
    ab2c:	22 0f       	add	r18, r18
    ab2e:	33 1f       	adc	r19, r19
    ab30:	fb 01       	movw	r30, r22
    ab32:	e2 0f       	add	r30, r18
    ab34:	f3 1f       	adc	r31, r19
    ab36:	11 82       	std	Z+1, r1	; 0x01
    ab38:	10 82       	st	Z, r1
    ab3a:	20 c0       	rjmp	.+64     	; 0xab7c <dir_read+0x178>
    ab3c:	11 11       	cpse	r17, r1
    ab3e:	05 c0       	rjmp	.+10     	; 0xab4a <dir_read+0x146>
    ab40:	c4 01       	movw	r24, r8
    ab42:	0e 94 27 49 	call	0x924e	; 0x924e <sum_sfn>
    ab46:	d8 16       	cp	r13, r24
    ab48:	f9 f0       	breq	.+62     	; 0xab88 <dir_read+0x184>
    ab4a:	8f ef       	ldi	r24, 0xFF	; 255
    ab4c:	9f ef       	ldi	r25, 0xFF	; 255
    ab4e:	dc 01       	movw	r26, r24
    ab50:	88 a7       	std	Y+40, r24	; 0x28
    ab52:	99 a7       	std	Y+41, r25	; 0x29
    ab54:	aa a7       	std	Y+42, r26	; 0x2a
    ab56:	bb a7       	std	Y+43, r27	; 0x2b
    ab58:	17 c0       	rjmp	.+46     	; 0xab88 <dir_read+0x184>
    ab5a:	d8 2e       	mov	r13, r24
    ab5c:	1f ef       	ldi	r17, 0xFF	; 255
    ab5e:	60 e0       	ldi	r22, 0x00	; 0
    ab60:	70 e0       	ldi	r23, 0x00	; 0
    ab62:	ce 01       	movw	r24, r28
    ab64:	2e de       	rcall	.-932    	; 0xa7c2 <dir_next>
    ab66:	00 97       	sbiw	r24, 0x00	; 0
    ab68:	09 f4       	brne	.+2      	; 0xab6c <dir_read+0x168>
    ab6a:	5d cf       	rjmp	.-326    	; 0xaa26 <dir_read+0x22>
    ab6c:	02 c0       	rjmp	.+4      	; 0xab72 <dir_read+0x16e>
    ab6e:	00 97       	sbiw	r24, 0x00	; 0
    ab70:	59 f0       	breq	.+22     	; 0xab88 <dir_read+0x184>
    ab72:	1e 8a       	std	Y+22, r1	; 0x16
    ab74:	1f 8a       	std	Y+23, r1	; 0x17
    ab76:	18 8e       	std	Y+24, r1	; 0x18
    ab78:	19 8e       	std	Y+25, r1	; 0x19
    ab7a:	08 c0       	rjmp	.+16     	; 0xab8c <dir_read+0x188>
    ab7c:	1f ef       	ldi	r17, 0xFF	; 255
    ab7e:	10 0f       	add	r17, r16
    ab80:	ee cf       	rjmp	.-36     	; 0xab5e <dir_read+0x15a>
    ab82:	84 e0       	ldi	r24, 0x04	; 4
    ab84:	90 e0       	ldi	r25, 0x00	; 0
    ab86:	f5 cf       	rjmp	.-22     	; 0xab72 <dir_read+0x16e>
    ab88:	80 e0       	ldi	r24, 0x00	; 0
    ab8a:	90 e0       	ldi	r25, 0x00	; 0
    ab8c:	cd b7       	in	r28, 0x3d	; 61
    ab8e:	de b7       	in	r29, 0x3e	; 62
    ab90:	ec e0       	ldi	r30, 0x0C	; 12
    ab92:	0c 94 a8 e4 	jmp	0x1c950	; 0x1c950 <__epilogue_restores__+0xc>

0000ab96 <dir_remove>:
    ab96:	a0 e0       	ldi	r26, 0x00	; 0
    ab98:	b0 e0       	ldi	r27, 0x00	; 0
    ab9a:	e1 ed       	ldi	r30, 0xD1	; 209
    ab9c:	f5 e5       	ldi	r31, 0x55	; 85
    ab9e:	0c 94 8e e4 	jmp	0x1c91c	; 0x1c91c <__prologue_saves__+0x10>
    aba2:	ec 01       	movw	r28, r24
    aba4:	08 81       	ld	r16, Y
    aba6:	19 81       	ldd	r17, Y+1	; 0x01
    aba8:	ce 84       	ldd	r12, Y+14	; 0x0e
    abaa:	df 84       	ldd	r13, Y+15	; 0x0f
    abac:	e8 88       	ldd	r14, Y+16	; 0x10
    abae:	f9 88       	ldd	r15, Y+17	; 0x11
    abb0:	48 a5       	ldd	r20, Y+40	; 0x28
    abb2:	59 a5       	ldd	r21, Y+41	; 0x29
    abb4:	6a a5       	ldd	r22, Y+42	; 0x2a
    abb6:	7b a5       	ldd	r23, Y+43	; 0x2b
    abb8:	4f 3f       	cpi	r20, 0xFF	; 255
    abba:	8f ef       	ldi	r24, 0xFF	; 255
    abbc:	58 07       	cpc	r21, r24
    abbe:	68 07       	cpc	r22, r24
    abc0:	78 07       	cpc	r23, r24
    abc2:	29 f4       	brne	.+10     	; 0xabce <dir_remove+0x38>
    abc4:	85 ee       	ldi	r24, 0xE5	; 229
    abc6:	b8 2e       	mov	r11, r24
    abc8:	aa 24       	eor	r10, r10
    abca:	a3 94       	inc	r10
    abcc:	19 c0       	rjmp	.+50     	; 0xac00 <dir_remove+0x6a>
    abce:	ce 01       	movw	r24, r28
    abd0:	80 db       	rcall	.-2304   	; 0xa2d2 <dir_sdi>
    abd2:	00 97       	sbiw	r24, 0x00	; 0
    abd4:	19 f5       	brne	.+70     	; 0xac1c <dir_remove+0x86>
    abd6:	f6 cf       	rjmp	.-20     	; 0xabc4 <dir_remove+0x2e>
    abd8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    abda:	fb 8d       	ldd	r31, Y+27	; 0x1b
    abdc:	b0 82       	st	Z, r11
    abde:	f8 01       	movw	r30, r16
    abe0:	a3 82       	std	Z+3, r10	; 0x03
    abe2:	4e 85       	ldd	r20, Y+14	; 0x0e
    abe4:	5f 85       	ldd	r21, Y+15	; 0x0f
    abe6:	68 89       	ldd	r22, Y+16	; 0x10
    abe8:	79 89       	ldd	r23, Y+17	; 0x11
    abea:	4c 15       	cp	r20, r12
    abec:	5d 05       	cpc	r21, r13
    abee:	6e 05       	cpc	r22, r14
    abf0:	7f 05       	cpc	r23, r15
    abf2:	a0 f4       	brcc	.+40     	; 0xac1c <dir_remove+0x86>
    abf4:	60 e0       	ldi	r22, 0x00	; 0
    abf6:	70 e0       	ldi	r23, 0x00	; 0
    abf8:	ce 01       	movw	r24, r28
    abfa:	e3 dd       	rcall	.-1082   	; 0xa7c2 <dir_next>
    abfc:	00 97       	sbiw	r24, 0x00	; 0
    abfe:	49 f4       	brne	.+18     	; 0xac12 <dir_remove+0x7c>
    ac00:	4e 89       	ldd	r20, Y+22	; 0x16
    ac02:	5f 89       	ldd	r21, Y+23	; 0x17
    ac04:	68 8d       	ldd	r22, Y+24	; 0x18
    ac06:	79 8d       	ldd	r23, Y+25	; 0x19
    ac08:	c8 01       	movw	r24, r16
    ac0a:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <move_window>
    ac0e:	00 97       	sbiw	r24, 0x00	; 0
    ac10:	19 f3       	breq	.-58     	; 0xabd8 <dir_remove+0x42>
    ac12:	84 30       	cpi	r24, 0x04	; 4
    ac14:	91 05       	cpc	r25, r1
    ac16:	11 f4       	brne	.+4      	; 0xac1c <dir_remove+0x86>
    ac18:	82 e0       	ldi	r24, 0x02	; 2
    ac1a:	90 e0       	ldi	r25, 0x00	; 0
    ac1c:	cd b7       	in	r28, 0x3d	; 61
    ac1e:	de b7       	in	r29, 0x3e	; 62
    ac20:	ea e0       	ldi	r30, 0x0A	; 10
    ac22:	0c 94 aa e4 	jmp	0x1c954	; 0x1c954 <__epilogue_restores__+0x10>

0000ac26 <dir_find>:
    ac26:	ac e0       	ldi	r26, 0x0C	; 12
    ac28:	b0 e0       	ldi	r27, 0x00	; 0
    ac2a:	e9 e1       	ldi	r30, 0x19	; 25
    ac2c:	f6 e5       	ldi	r31, 0x56	; 86
    ac2e:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
    ac32:	9c 87       	std	Y+12, r25	; 0x0c
    ac34:	8b 87       	std	Y+11, r24	; 0x0b
    ac36:	fc 01       	movw	r30, r24
    ac38:	01 90       	ld	r0, Z+
    ac3a:	f0 81       	ld	r31, Z
    ac3c:	e0 2d       	mov	r30, r0
    ac3e:	fc 83       	std	Y+4, r31	; 0x04
    ac40:	eb 83       	std	Y+3, r30	; 0x03
    ac42:	40 e0       	ldi	r20, 0x00	; 0
    ac44:	50 e0       	ldi	r21, 0x00	; 0
    ac46:	ba 01       	movw	r22, r20
    ac48:	44 db       	rcall	.-2424   	; 0xa2d2 <dir_sdi>
    ac4a:	00 97       	sbiw	r24, 0x00	; 0
    ac4c:	09 f0       	breq	.+2      	; 0xac50 <dir_find+0x2a>
    ac4e:	e7 c0       	rjmp	.+462    	; 0xae1e <dir_find+0x1f8>
    ac50:	8f ef       	ldi	r24, 0xFF	; 255
    ac52:	9f ef       	ldi	r25, 0xFF	; 255
    ac54:	dc 01       	movw	r26, r24
    ac56:	eb 85       	ldd	r30, Y+11	; 0x0b
    ac58:	fc 85       	ldd	r31, Y+12	; 0x0c
    ac5a:	80 a7       	std	Z+40, r24	; 0x28
    ac5c:	91 a7       	std	Z+41, r25	; 0x29
    ac5e:	a2 a7       	std	Z+42, r26	; 0x2a
    ac60:	b3 a7       	std	Z+43, r27	; 0x2b
    ac62:	0f ef       	ldi	r16, 0xFF	; 255
    ac64:	1f ef       	ldi	r17, 0xFF	; 255
    ac66:	44 24       	eor	r4, r4
    ac68:	4a 94       	dec	r4
    ac6a:	54 2c       	mov	r5, r4
    ac6c:	32 01       	movw	r6, r4
    ac6e:	7c 96       	adiw	r30, 0x1c	; 28
    ac70:	fa 87       	std	Y+10, r31	; 0x0a
    ac72:	e9 87       	std	Y+9, r30	; 0x09
    ac74:	eb 85       	ldd	r30, Y+11	; 0x0b
    ac76:	fc 85       	ldd	r31, Y+12	; 0x0c
    ac78:	46 89       	ldd	r20, Z+22	; 0x16
    ac7a:	57 89       	ldd	r21, Z+23	; 0x17
    ac7c:	60 8d       	ldd	r22, Z+24	; 0x18
    ac7e:	71 8d       	ldd	r23, Z+25	; 0x19
    ac80:	8b 81       	ldd	r24, Y+3	; 0x03
    ac82:	9c 81       	ldd	r25, Y+4	; 0x04
    ac84:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <move_window>
    ac88:	00 97       	sbiw	r24, 0x00	; 0
    ac8a:	09 f0       	breq	.+2      	; 0xac8e <dir_find+0x68>
    ac8c:	c8 c0       	rjmp	.+400    	; 0xae1e <dir_find+0x1f8>
    ac8e:	eb 85       	ldd	r30, Y+11	; 0x0b
    ac90:	fc 85       	ldd	r31, Y+12	; 0x0c
    ac92:	e2 8c       	ldd	r14, Z+26	; 0x1a
    ac94:	f3 8c       	ldd	r15, Z+27	; 0x1b
    ac96:	f7 01       	movw	r30, r14
    ac98:	d0 80       	ld	r13, Z
    ac9a:	dd 20       	and	r13, r13
    ac9c:	09 f4       	brne	.+2      	; 0xaca0 <dir_find+0x7a>
    ac9e:	c1 c0       	rjmp	.+386    	; 0xae22 <dir_find+0x1fc>
    aca0:	93 85       	ldd	r25, Z+11	; 0x0b
    aca2:	89 2f       	mov	r24, r25
    aca4:	8f 73       	andi	r24, 0x3F	; 63
    aca6:	eb 85       	ldd	r30, Y+11	; 0x0b
    aca8:	fc 85       	ldd	r31, Y+12	; 0x0c
    acaa:	84 83       	std	Z+4, r24	; 0x04
    acac:	f5 ee       	ldi	r31, 0xE5	; 229
    acae:	df 16       	cp	r13, r31
    acb0:	09 f4       	brne	.+2      	; 0xacb4 <dir_find+0x8e>
    acb2:	a6 c0       	rjmp	.+332    	; 0xae00 <dir_find+0x1da>
    acb4:	93 ff       	sbrs	r25, 3
    acb6:	04 c0       	rjmp	.+8      	; 0xacc0 <dir_find+0x9a>
    acb8:	8f 30       	cpi	r24, 0x0F	; 15
    acba:	09 f0       	breq	.+2      	; 0xacbe <dir_find+0x98>
    acbc:	a1 c0       	rjmp	.+322    	; 0xae00 <dir_find+0x1da>
    acbe:	03 c0       	rjmp	.+6      	; 0xacc6 <dir_find+0xa0>
    acc0:	8f 30       	cpi	r24, 0x0F	; 15
    acc2:	09 f0       	breq	.+2      	; 0xacc6 <dir_find+0xa0>
    acc4:	88 c0       	rjmp	.+272    	; 0xadd6 <dir_find+0x1b0>
    acc6:	eb 85       	ldd	r30, Y+11	; 0x0b
    acc8:	fc 85       	ldd	r31, Y+12	; 0x0c
    acca:	87 a1       	ldd	r24, Z+39	; 0x27
    accc:	86 fd       	sbrc	r24, 6
    acce:	9f c0       	rjmp	.+318    	; 0xae0e <dir_find+0x1e8>
    acd0:	d6 fe       	sbrs	r13, 6
    acd2:	10 c0       	rjmp	.+32     	; 0xacf4 <dir_find+0xce>
    acd4:	f7 01       	movw	r30, r14
    acd6:	05 85       	ldd	r16, Z+13	; 0x0d
    acd8:	fd 2d       	mov	r31, r13
    acda:	ff 7b       	andi	r31, 0xBF	; 191
    acdc:	df 2e       	mov	r13, r31
    acde:	eb 85       	ldd	r30, Y+11	; 0x0b
    ace0:	fc 85       	ldd	r31, Y+12	; 0x0c
    ace2:	86 85       	ldd	r24, Z+14	; 0x0e
    ace4:	97 85       	ldd	r25, Z+15	; 0x0f
    ace6:	a0 89       	ldd	r26, Z+16	; 0x10
    ace8:	b1 89       	ldd	r27, Z+17	; 0x11
    acea:	80 a7       	std	Z+40, r24	; 0x28
    acec:	91 a7       	std	Z+41, r25	; 0x29
    acee:	a2 a7       	std	Z+42, r26	; 0x2a
    acf0:	b3 a7       	std	Z+43, r27	; 0x2b
    acf2:	02 c0       	rjmp	.+4      	; 0xacf8 <dir_find+0xd2>
    acf4:	1d 11       	cpse	r17, r13
    acf6:	8a c0       	rjmp	.+276    	; 0xae0c <dir_find+0x1e6>
    acf8:	f7 01       	movw	r30, r14
    acfa:	c5 84       	ldd	r12, Z+13	; 0x0d
    acfc:	c0 12       	cpse	r12, r16
    acfe:	86 c0       	rjmp	.+268    	; 0xae0c <dir_find+0x1e6>
    ad00:	82 8d       	ldd	r24, Z+26	; 0x1a
    ad02:	93 8d       	ldd	r25, Z+27	; 0x1b
    ad04:	89 2b       	or	r24, r25
    ad06:	09 f0       	breq	.+2      	; 0xad0a <dir_find+0xe4>
    ad08:	91 c0       	rjmp	.+290    	; 0xae2c <dir_find+0x206>
    ad0a:	eb 81       	ldd	r30, Y+3	; 0x03
    ad0c:	fc 81       	ldd	r31, Y+4	; 0x04
    ad0e:	03 84       	ldd	r0, Z+11	; 0x0b
    ad10:	f4 85       	ldd	r31, Z+12	; 0x0c
    ad12:	e0 2d       	mov	r30, r0
    ad14:	fe 83       	std	Y+6, r31	; 0x06
    ad16:	ed 83       	std	Y+5, r30	; 0x05
    ad18:	f7 01       	movw	r30, r14
    ad1a:	80 81       	ld	r24, Z
    ad1c:	8f 73       	andi	r24, 0x3F	; 63
    ad1e:	90 e0       	ldi	r25, 0x00	; 0
    ad20:	01 97       	sbiw	r24, 0x01	; 1
    ad22:	fd e0       	ldi	r31, 0x0D	; 13
    ad24:	f8 9f       	mul	r31, r24
    ad26:	80 01       	movw	r16, r0
    ad28:	f9 9f       	mul	r31, r25
    ad2a:	10 0d       	add	r17, r0
    ad2c:	11 24       	eor	r1, r1
    ad2e:	2b e0       	ldi	r18, 0x0B	; 11
    ad30:	34 e0       	ldi	r19, 0x04	; 4
    ad32:	3a 83       	std	Y+2, r19	; 0x02
    ad34:	29 83       	std	Y+1, r18	; 0x01
    ad36:	81 e0       	ldi	r24, 0x01	; 1
    ad38:	90 e0       	ldi	r25, 0x00	; 0
    ad3a:	e9 81       	ldd	r30, Y+1	; 0x01
    ad3c:	fa 81       	ldd	r31, Y+2	; 0x02
    ad3e:	21 91       	ld	r18, Z+
    ad40:	fa 83       	std	Y+2, r31	; 0x02
    ad42:	e9 83       	std	Y+1, r30	; 0x01
    ad44:	f7 01       	movw	r30, r14
    ad46:	e2 0f       	add	r30, r18
    ad48:	f1 1d       	adc	r31, r1
    ad4a:	20 80       	ld	r2, Z
    ad4c:	31 80       	ldd	r3, Z+1	; 0x01
    ad4e:	00 97       	sbiw	r24, 0x00	; 0
    ad50:	39 f1       	breq	.+78     	; 0xada0 <dir_find+0x17a>
    ad52:	0f 3f       	cpi	r16, 0xFF	; 255
    ad54:	11 05       	cpc	r17, r1
    ad56:	11 f0       	breq	.+4      	; 0xad5c <dir_find+0x136>
    ad58:	08 f0       	brcs	.+2      	; 0xad5c <dir_find+0x136>
    ad5a:	68 c0       	rjmp	.+208    	; 0xae2c <dir_find+0x206>
    ad5c:	b1 01       	movw	r22, r2
    ad5e:	80 e0       	ldi	r24, 0x00	; 0
    ad60:	90 e0       	ldi	r25, 0x00	; 0
    ad62:	0e 94 c0 6a 	call	0xd580	; 0xd580 <ff_wtoupper>
    ad66:	4b 01       	movw	r8, r22
    ad68:	5c 01       	movw	r10, r24
    ad6a:	98 01       	movw	r18, r16
    ad6c:	2f 5f       	subi	r18, 0xFF	; 255
    ad6e:	3f 4f       	sbci	r19, 0xFF	; 255
    ad70:	38 87       	std	Y+8, r19	; 0x08
    ad72:	2f 83       	std	Y+7, r18	; 0x07
    ad74:	00 0f       	add	r16, r16
    ad76:	11 1f       	adc	r17, r17
    ad78:	ed 81       	ldd	r30, Y+5	; 0x05
    ad7a:	fe 81       	ldd	r31, Y+6	; 0x06
    ad7c:	e0 0f       	add	r30, r16
    ad7e:	f1 1f       	adc	r31, r17
    ad80:	60 81       	ld	r22, Z
    ad82:	71 81       	ldd	r23, Z+1	; 0x01
    ad84:	80 e0       	ldi	r24, 0x00	; 0
    ad86:	90 e0       	ldi	r25, 0x00	; 0
    ad88:	0e 94 c0 6a 	call	0xd580	; 0xd580 <ff_wtoupper>
    ad8c:	86 16       	cp	r8, r22
    ad8e:	97 06       	cpc	r9, r23
    ad90:	a8 06       	cpc	r10, r24
    ad92:	b9 06       	cpc	r11, r25
    ad94:	09 f0       	breq	.+2      	; 0xad98 <dir_find+0x172>
    ad96:	4a c0       	rjmp	.+148    	; 0xae2c <dir_find+0x206>
    ad98:	c1 01       	movw	r24, r2
    ad9a:	0f 81       	ldd	r16, Y+7	; 0x07
    ad9c:	18 85       	ldd	r17, Y+8	; 0x08
    ad9e:	05 c0       	rjmp	.+10     	; 0xadaa <dir_find+0x184>
    ada0:	3f ef       	ldi	r19, 0xFF	; 255
    ada2:	23 16       	cp	r2, r19
    ada4:	33 06       	cpc	r3, r19
    ada6:	09 f0       	breq	.+2      	; 0xadaa <dir_find+0x184>
    ada8:	41 c0       	rjmp	.+130    	; 0xae2c <dir_find+0x206>
    adaa:	e9 81       	ldd	r30, Y+1	; 0x01
    adac:	fa 81       	ldd	r31, Y+2	; 0x02
    adae:	e8 51       	subi	r30, 0x18	; 24
    adb0:	f4 40       	sbci	r31, 0x04	; 4
    adb2:	19 f6       	brne	.-122    	; 0xad3a <dir_find+0x114>
    adb4:	f7 01       	movw	r30, r14
    adb6:	20 81       	ld	r18, Z
    adb8:	26 ff       	sbrs	r18, 6
    adba:	3a c0       	rjmp	.+116    	; 0xae30 <dir_find+0x20a>
    adbc:	89 2b       	or	r24, r25
    adbe:	c1 f1       	breq	.+112    	; 0xae30 <dir_find+0x20a>
    adc0:	00 0f       	add	r16, r16
    adc2:	11 1f       	adc	r17, r17
    adc4:	ed 81       	ldd	r30, Y+5	; 0x05
    adc6:	fe 81       	ldd	r31, Y+6	; 0x06
    adc8:	e0 0f       	add	r30, r16
    adca:	f1 1f       	adc	r31, r17
    adcc:	80 81       	ld	r24, Z
    adce:	91 81       	ldd	r25, Z+1	; 0x01
    add0:	89 2b       	or	r24, r25
    add2:	71 f1       	breq	.+92     	; 0xae30 <dir_find+0x20a>
    add4:	2b c0       	rjmp	.+86     	; 0xae2c <dir_find+0x206>
    add6:	11 11       	cpse	r17, r1
    add8:	05 c0       	rjmp	.+10     	; 0xade4 <dir_find+0x1be>
    adda:	c7 01       	movw	r24, r14
    addc:	0e 94 27 49 	call	0x924e	; 0x924e <sum_sfn>
    ade0:	08 17       	cp	r16, r24
    ade2:	09 f1       	breq	.+66     	; 0xae26 <dir_find+0x200>
    ade4:	eb 85       	ldd	r30, Y+11	; 0x0b
    ade6:	fc 85       	ldd	r31, Y+12	; 0x0c
    ade8:	87 a1       	ldd	r24, Z+39	; 0x27
    adea:	80 fd       	sbrc	r24, 0
    adec:	09 c0       	rjmp	.+18     	; 0xae00 <dir_find+0x1da>
    adee:	4b e0       	ldi	r20, 0x0B	; 11
    adf0:	50 e0       	ldi	r21, 0x00	; 0
    adf2:	69 85       	ldd	r22, Y+9	; 0x09
    adf4:	7a 85       	ldd	r23, Y+10	; 0x0a
    adf6:	c7 01       	movw	r24, r14
    adf8:	0e 94 2e 48 	call	0x905c	; 0x905c <mem_cmp>
    adfc:	89 2b       	or	r24, r25
    adfe:	99 f0       	breq	.+38     	; 0xae26 <dir_find+0x200>
    ae00:	eb 85       	ldd	r30, Y+11	; 0x0b
    ae02:	fc 85       	ldd	r31, Y+12	; 0x0c
    ae04:	40 a6       	std	Z+40, r4	; 0x28
    ae06:	51 a6       	std	Z+41, r5	; 0x29
    ae08:	62 a6       	std	Z+42, r6	; 0x2a
    ae0a:	73 a6       	std	Z+43, r7	; 0x2b
    ae0c:	1f ef       	ldi	r17, 0xFF	; 255
    ae0e:	60 e0       	ldi	r22, 0x00	; 0
    ae10:	70 e0       	ldi	r23, 0x00	; 0
    ae12:	8b 85       	ldd	r24, Y+11	; 0x0b
    ae14:	9c 85       	ldd	r25, Y+12	; 0x0c
    ae16:	d5 dc       	rcall	.-1622   	; 0xa7c2 <dir_next>
    ae18:	00 97       	sbiw	r24, 0x00	; 0
    ae1a:	09 f4       	brne	.+2      	; 0xae1e <dir_find+0x1f8>
    ae1c:	2b cf       	rjmp	.-426    	; 0xac74 <dir_find+0x4e>
    ae1e:	28 2f       	mov	r18, r24
    ae20:	0b c0       	rjmp	.+22     	; 0xae38 <dir_find+0x212>
    ae22:	24 e0       	ldi	r18, 0x04	; 4
    ae24:	01 c0       	rjmp	.+2      	; 0xae28 <dir_find+0x202>
    ae26:	20 e0       	ldi	r18, 0x00	; 0
    ae28:	90 e0       	ldi	r25, 0x00	; 0
    ae2a:	06 c0       	rjmp	.+12     	; 0xae38 <dir_find+0x212>
    ae2c:	0c 2d       	mov	r16, r12
    ae2e:	ee cf       	rjmp	.-36     	; 0xae0c <dir_find+0x1e6>
    ae30:	1f ef       	ldi	r17, 0xFF	; 255
    ae32:	1d 0d       	add	r17, r13
    ae34:	0c 2d       	mov	r16, r12
    ae36:	eb cf       	rjmp	.-42     	; 0xae0e <dir_find+0x1e8>
    ae38:	82 2f       	mov	r24, r18
    ae3a:	2c 96       	adiw	r28, 0x0c	; 12
    ae3c:	e2 e1       	ldi	r30, 0x12	; 18
    ae3e:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

0000ae42 <dir_register>:
    ae42:	a6 e1       	ldi	r26, 0x16	; 22
    ae44:	b0 e0       	ldi	r27, 0x00	; 0
    ae46:	e7 e2       	ldi	r30, 0x27	; 39
    ae48:	f7 e5       	ldi	r31, 0x57	; 87
    ae4a:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
    ae4e:	fc 01       	movw	r30, r24
    ae50:	27 a1       	ldd	r18, Z+39	; 0x27
    ae52:	20 7a       	andi	r18, 0xA0	; 160
    ae54:	09 f0       	breq	.+2      	; 0xae58 <dir_register+0x16>
    ae56:	53 c1       	rjmp	.+678    	; 0xb0fe <dir_register+0x2bc>
    ae58:	c0 80       	ld	r12, Z
    ae5a:	d1 80       	ldd	r13, Z+1	; 0x01
    ae5c:	f6 01       	movw	r30, r12
    ae5e:	a3 85       	ldd	r26, Z+11	; 0x0b
    ae60:	b4 85       	ldd	r27, Z+12	; 0x0c
    ae62:	81 2c       	mov	r8, r1
    ae64:	91 2c       	mov	r9, r1
    ae66:	2d 91       	ld	r18, X+
    ae68:	3d 91       	ld	r19, X+
    ae6a:	23 2b       	or	r18, r19
    ae6c:	21 f0       	breq	.+8      	; 0xae76 <dir_register+0x34>
    ae6e:	ff ef       	ldi	r31, 0xFF	; 255
    ae70:	8f 1a       	sub	r8, r31
    ae72:	9f 0a       	sbc	r9, r31
    ae74:	f8 cf       	rjmp	.-16     	; 0xae66 <dir_register+0x24>
    ae76:	8c 01       	movw	r16, r24
    ae78:	5c 01       	movw	r10, r24
    ae7a:	2c e1       	ldi	r18, 0x1C	; 28
    ae7c:	a2 0e       	add	r10, r18
    ae7e:	b1 1c       	adc	r11, r1
    ae80:	4c e0       	ldi	r20, 0x0C	; 12
    ae82:	50 e0       	ldi	r21, 0x00	; 0
    ae84:	b5 01       	movw	r22, r10
    ae86:	ce 01       	movw	r24, r28
    ae88:	01 96       	adiw	r24, 0x01	; 1
    ae8a:	0e 94 8e 49 	call	0x931c	; 0x931c <mem_cpy.part.0>
    ae8e:	8c 85       	ldd	r24, Y+12	; 0x0c
    ae90:	80 ff       	sbrs	r24, 0
    ae92:	94 c0       	rjmp	.+296    	; 0xafbc <dir_register+0x17a>
    ae94:	80 e4       	ldi	r24, 0x40	; 64
    ae96:	f8 01       	movw	r30, r16
    ae98:	87 a3       	std	Z+39, r24	; 0x27
    ae9a:	41 2c       	mov	r4, r1
    ae9c:	51 2c       	mov	r5, r1
    ae9e:	32 01       	movw	r6, r4
    aea0:	43 94       	inc	r4
    aea2:	72 01       	movw	r14, r4
    aea4:	f6 01       	movw	r30, r12
    aea6:	23 84       	ldd	r2, Z+11	; 0x0b
    aea8:	34 84       	ldd	r3, Z+12	; 0x0c
    aeaa:	4b e0       	ldi	r20, 0x0B	; 11
    aeac:	50 e0       	ldi	r21, 0x00	; 0
    aeae:	be 01       	movw	r22, r28
    aeb0:	6f 5f       	subi	r22, 0xFF	; 255
    aeb2:	7f 4f       	sbci	r23, 0xFF	; 255
    aeb4:	c5 01       	movw	r24, r10
    aeb6:	0e 94 8e 49 	call	0x931c	; 0x931c <mem_cpy.part.0>
    aeba:	f6 e0       	ldi	r31, 0x06	; 6
    aebc:	4f 16       	cp	r4, r31
    aebe:	51 04       	cpc	r5, r1
    aec0:	18 f1       	brcs	.+70     	; 0xaf08 <dir_register+0xc6>
    aec2:	f1 01       	movw	r30, r2
    aec4:	b3 01       	movw	r22, r6
    aec6:	a2 01       	movw	r20, r4
    aec8:	81 91       	ld	r24, Z+
    aeca:	91 91       	ld	r25, Z+
    aecc:	00 97       	sbiw	r24, 0x00	; 0
    aece:	d9 f0       	breq	.+54     	; 0xaf06 <dir_register+0xc4>
    aed0:	20 e1       	ldi	r18, 0x10	; 16
    aed2:	30 e0       	ldi	r19, 0x00	; 0
    aed4:	44 0f       	add	r20, r20
    aed6:	55 1f       	adc	r21, r21
    aed8:	66 1f       	adc	r22, r22
    aeda:	77 1f       	adc	r23, r23
    aedc:	dc 01       	movw	r26, r24
    aede:	a1 70       	andi	r26, 0x01	; 1
    aee0:	bb 27       	eor	r27, r27
    aee2:	4a 0f       	add	r20, r26
    aee4:	5b 1f       	adc	r21, r27
    aee6:	61 1d       	adc	r22, r1
    aee8:	71 1d       	adc	r23, r1
    aeea:	96 95       	lsr	r25
    aeec:	87 95       	ror	r24
    aeee:	60 ff       	sbrs	r22, 0
    aef0:	06 c0       	rjmp	.+12     	; 0xaefe <dir_register+0xbc>
    aef2:	a1 e2       	ldi	r26, 0x21	; 33
    aef4:	4a 27       	eor	r20, r26
    aef6:	a0 e1       	ldi	r26, 0x10	; 16
    aef8:	5a 27       	eor	r21, r26
    aefa:	a1 e0       	ldi	r26, 0x01	; 1
    aefc:	6a 27       	eor	r22, r26
    aefe:	21 50       	subi	r18, 0x01	; 1
    af00:	31 09       	sbc	r19, r1
    af02:	41 f7       	brne	.-48     	; 0xaed4 <dir_register+0x92>
    af04:	e1 cf       	rjmp	.-62     	; 0xaec8 <dir_register+0x86>
    af06:	7a 01       	movw	r14, r20
    af08:	fe 01       	movw	r30, r28
    af0a:	75 96       	adiw	r30, 0x15	; 21
    af0c:	27 e0       	ldi	r18, 0x07	; 7
    af0e:	30 e0       	ldi	r19, 0x00	; 0
    af10:	9e 2d       	mov	r25, r14
    af12:	9f 70       	andi	r25, 0x0F	; 15
    af14:	80 e3       	ldi	r24, 0x30	; 48
    af16:	89 0f       	add	r24, r25
    af18:	8a 33       	cpi	r24, 0x3A	; 58
    af1a:	10 f0       	brcs	.+4      	; 0xaf20 <dir_register+0xde>
    af1c:	87 e3       	ldi	r24, 0x37	; 55
    af1e:	89 0f       	add	r24, r25
    af20:	21 50       	subi	r18, 0x01	; 1
    af22:	31 09       	sbc	r19, r1
    af24:	82 93       	st	-Z, r24
    af26:	a4 e0       	ldi	r26, 0x04	; 4
    af28:	f6 94       	lsr	r15
    af2a:	e7 94       	ror	r14
    af2c:	aa 95       	dec	r26
    af2e:	e1 f7       	brne	.-8      	; 0xaf28 <dir_register+0xe6>
    af30:	e1 14       	cp	r14, r1
    af32:	f1 04       	cpc	r15, r1
    af34:	69 f7       	brne	.-38     	; 0xaf10 <dir_register+0xce>
    af36:	ed e0       	ldi	r30, 0x0D	; 13
    af38:	f0 e0       	ldi	r31, 0x00	; 0
    af3a:	ec 0f       	add	r30, r28
    af3c:	fd 1f       	adc	r31, r29
    af3e:	e2 0f       	add	r30, r18
    af40:	f3 1f       	adc	r31, r19
    af42:	4e e7       	ldi	r20, 0x7E	; 126
    af44:	40 83       	st	Z, r20
    af46:	f5 01       	movw	r30, r10
    af48:	80 e0       	ldi	r24, 0x00	; 0
    af4a:	90 e0       	ldi	r25, 0x00	; 0
    af4c:	28 17       	cp	r18, r24
    af4e:	39 07       	cpc	r19, r25
    af50:	29 f0       	breq	.+10     	; 0xaf5c <dir_register+0x11a>
    af52:	41 91       	ld	r20, Z+
    af54:	40 32       	cpi	r20, 0x20	; 32
    af56:	11 f0       	breq	.+4      	; 0xaf5c <dir_register+0x11a>
    af58:	01 96       	adiw	r24, 0x01	; 1
    af5a:	f8 cf       	rjmp	.-16     	; 0xaf4c <dir_register+0x10a>
    af5c:	f5 01       	movw	r30, r10
    af5e:	e8 0f       	add	r30, r24
    af60:	f9 1f       	adc	r31, r25
    af62:	28 30       	cpi	r18, 0x08	; 8
    af64:	31 05       	cpc	r19, r1
    af66:	50 f4       	brcc	.+20     	; 0xaf7c <dir_register+0x13a>
    af68:	ad e0       	ldi	r26, 0x0D	; 13
    af6a:	b0 e0       	ldi	r27, 0x00	; 0
    af6c:	ac 0f       	add	r26, r28
    af6e:	bd 1f       	adc	r27, r29
    af70:	a2 0f       	add	r26, r18
    af72:	b3 1f       	adc	r27, r19
    af74:	8c 91       	ld	r24, X
    af76:	2f 5f       	subi	r18, 0xFF	; 255
    af78:	3f 4f       	sbci	r19, 0xFF	; 255
    af7a:	01 c0       	rjmp	.+2      	; 0xaf7e <dir_register+0x13c>
    af7c:	80 e2       	ldi	r24, 0x20	; 32
    af7e:	81 93       	st	Z+, r24
    af80:	cf 01       	movw	r24, r30
    af82:	8a 19       	sub	r24, r10
    af84:	9b 09       	sbc	r25, r11
    af86:	08 97       	sbiw	r24, 0x08	; 8
    af88:	60 f3       	brcs	.-40     	; 0xaf62 <dir_register+0x120>
    af8a:	c8 01       	movw	r24, r16
    af8c:	4c de       	rcall	.-872    	; 0xac26 <dir_find>
    af8e:	00 97       	sbiw	r24, 0x00	; 0
    af90:	71 f4       	brne	.+28     	; 0xafae <dir_register+0x16c>
    af92:	8f ef       	ldi	r24, 0xFF	; 255
    af94:	48 1a       	sub	r4, r24
    af96:	58 0a       	sbc	r5, r24
    af98:	68 0a       	sbc	r6, r24
    af9a:	78 0a       	sbc	r7, r24
    af9c:	94 e6       	ldi	r25, 0x64	; 100
    af9e:	49 16       	cp	r4, r25
    afa0:	51 04       	cpc	r5, r1
    afa2:	61 04       	cpc	r6, r1
    afa4:	71 04       	cpc	r7, r1
    afa6:	09 f0       	breq	.+2      	; 0xafaa <dir_register+0x168>
    afa8:	7c cf       	rjmp	.-264    	; 0xaea2 <dir_register+0x60>
    afaa:	27 e0       	ldi	r18, 0x07	; 7
    afac:	a9 c0       	rjmp	.+338    	; 0xb100 <dir_register+0x2be>
    afae:	84 30       	cpi	r24, 0x04	; 4
    afb0:	91 05       	cpc	r25, r1
    afb2:	09 f0       	breq	.+2      	; 0xafb6 <dir_register+0x174>
    afb4:	ce c0       	rjmp	.+412    	; 0xb152 <dir_register+0x310>
    afb6:	8c 85       	ldd	r24, Y+12	; 0x0c
    afb8:	f8 01       	movw	r30, r16
    afba:	87 a3       	std	Z+39, r24	; 0x27
    afbc:	8c 85       	ldd	r24, Y+12	; 0x0c
    afbe:	81 ff       	sbrs	r24, 1
    afc0:	0b c0       	rjmp	.+22     	; 0xafd8 <dir_register+0x196>
    afc2:	c4 01       	movw	r24, r8
    afc4:	0c 96       	adiw	r24, 0x0c	; 12
    afc6:	6d e0       	ldi	r22, 0x0D	; 13
    afc8:	70 e0       	ldi	r23, 0x00	; 0
    afca:	0e 94 dd e3 	call	0x1c7ba	; 0x1c7ba <__udivmodhi4>
    afce:	7b 01       	movw	r14, r22
    afd0:	ff ef       	ldi	r31, 0xFF	; 255
    afd2:	ef 1a       	sub	r14, r31
    afd4:	ff 0a       	sbc	r15, r31
    afd6:	03 c0       	rjmp	.+6      	; 0xafde <dir_register+0x19c>
    afd8:	ee 24       	eor	r14, r14
    afda:	e3 94       	inc	r14
    afdc:	f1 2c       	mov	r15, r1
    afde:	b7 01       	movw	r22, r14
    afe0:	c8 01       	movw	r24, r16
    afe2:	d7 dc       	rcall	.-1618   	; 0xa992 <dir_alloc>
    afe4:	00 97       	sbiw	r24, 0x00	; 0
    afe6:	09 f0       	breq	.+2      	; 0xafea <dir_register+0x1a8>
    afe8:	b4 c0       	rjmp	.+360    	; 0xb152 <dir_register+0x310>
    afea:	21 e0       	ldi	r18, 0x01	; 1
    afec:	e2 1a       	sub	r14, r18
    afee:	f1 08       	sbc	r15, r1
    aff0:	09 f4       	brne	.+2      	; 0xaff4 <dir_register+0x1b2>
    aff2:	88 c0       	rjmp	.+272    	; 0xb104 <dir_register+0x2c2>
    aff4:	f8 01       	movw	r30, r16
    aff6:	46 85       	ldd	r20, Z+14	; 0x0e
    aff8:	57 85       	ldd	r21, Z+15	; 0x0f
    affa:	60 89       	ldd	r22, Z+16	; 0x10
    affc:	71 89       	ldd	r23, Z+17	; 0x11
    affe:	c7 01       	movw	r24, r14
    b000:	e5 e0       	ldi	r30, 0x05	; 5
    b002:	88 0f       	add	r24, r24
    b004:	99 1f       	adc	r25, r25
    b006:	ea 95       	dec	r30
    b008:	e1 f7       	brne	.-8      	; 0xb002 <dir_register+0x1c0>
    b00a:	48 1b       	sub	r20, r24
    b00c:	59 0b       	sbc	r21, r25
    b00e:	61 09       	sbc	r22, r1
    b010:	71 09       	sbc	r23, r1
    b012:	c8 01       	movw	r24, r16
    b014:	5e d9       	rcall	.-3396   	; 0xa2d2 <dir_sdi>
    b016:	00 97       	sbiw	r24, 0x00	; 0
    b018:	09 f0       	breq	.+2      	; 0xb01c <dir_register+0x1da>
    b01a:	9b c0       	rjmp	.+310    	; 0xb152 <dir_register+0x310>
    b01c:	c5 01       	movw	r24, r10
    b01e:	0e 94 27 49 	call	0x924e	; 0x924e <sum_sfn>
    b022:	68 2e       	mov	r6, r24
    b024:	5f e0       	ldi	r21, 0x0F	; 15
    b026:	35 2e       	mov	r3, r21
    b028:	6d e0       	ldi	r22, 0x0D	; 13
    b02a:	46 2e       	mov	r4, r22
    b02c:	78 e1       	ldi	r23, 0x18	; 24
    b02e:	87 2e       	mov	r8, r23
    b030:	74 e0       	ldi	r23, 0x04	; 4
    b032:	97 2e       	mov	r9, r23
    b034:	55 24       	eor	r5, r5
    b036:	53 94       	inc	r5
    b038:	f8 01       	movw	r30, r16
    b03a:	46 89       	ldd	r20, Z+22	; 0x16
    b03c:	57 89       	ldd	r21, Z+23	; 0x17
    b03e:	60 8d       	ldd	r22, Z+24	; 0x18
    b040:	71 8d       	ldd	r23, Z+25	; 0x19
    b042:	c6 01       	movw	r24, r12
    b044:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <move_window>
    b048:	00 97       	sbiw	r24, 0x00	; 0
    b04a:	09 f0       	breq	.+2      	; 0xb04e <dir_register+0x20c>
    b04c:	82 c0       	rjmp	.+260    	; 0xb152 <dir_register+0x310>
    b04e:	f6 01       	movw	r30, r12
    b050:	63 85       	ldd	r22, Z+11	; 0x0b
    b052:	74 85       	ldd	r23, Z+12	; 0x0c
    b054:	f8 01       	movw	r30, r16
    b056:	02 8c       	ldd	r0, Z+26	; 0x1a
    b058:	f3 8d       	ldd	r31, Z+27	; 0x1b
    b05a:	e0 2d       	mov	r30, r0
    b05c:	fe 8b       	std	Y+22, r31	; 0x16
    b05e:	ed 8b       	std	Y+21, r30	; 0x15
    b060:	7e 2c       	mov	r7, r14
    b062:	65 86       	std	Z+13, r6	; 0x0d
    b064:	33 86       	std	Z+11, r3	; 0x0b
    b066:	14 86       	std	Z+12, r1	; 0x0c
    b068:	12 8e       	std	Z+26, r1	; 0x1a
    b06a:	13 8e       	std	Z+27, r1	; 0x1b
    b06c:	97 01       	movw	r18, r14
    b06e:	33 27       	eor	r19, r19
    b070:	21 50       	subi	r18, 0x01	; 1
    b072:	31 09       	sbc	r19, r1
    b074:	42 9e       	mul	r4, r18
    b076:	c0 01       	movw	r24, r0
    b078:	43 9e       	mul	r4, r19
    b07a:	90 0d       	add	r25, r0
    b07c:	11 24       	eor	r1, r1
    b07e:	ab e0       	ldi	r26, 0x0B	; 11
    b080:	b4 e0       	ldi	r27, 0x04	; 4
    b082:	20 e0       	ldi	r18, 0x00	; 0
    b084:	30 e0       	ldi	r19, 0x00	; 0
    b086:	2f 3f       	cpi	r18, 0xFF	; 255
    b088:	ff ef       	ldi	r31, 0xFF	; 255
    b08a:	3f 07       	cpc	r19, r31
    b08c:	49 f0       	breq	.+18     	; 0xb0a0 <dir_register+0x25e>
    b08e:	9c 01       	movw	r18, r24
    b090:	22 0f       	add	r18, r18
    b092:	33 1f       	adc	r19, r19
    b094:	26 0f       	add	r18, r22
    b096:	37 1f       	adc	r19, r23
    b098:	f9 01       	movw	r30, r18
    b09a:	20 81       	ld	r18, Z
    b09c:	31 81       	ldd	r19, Z+1	; 0x01
    b09e:	01 96       	adiw	r24, 0x01	; 1
    b0a0:	4d 91       	ld	r20, X+
    b0a2:	ed 89       	ldd	r30, Y+21	; 0x15
    b0a4:	fe 89       	ldd	r31, Y+22	; 0x16
    b0a6:	e4 0f       	add	r30, r20
    b0a8:	f1 1d       	adc	r31, r1
    b0aa:	20 83       	st	Z, r18
    b0ac:	31 83       	std	Z+1, r19	; 0x01
    b0ae:	21 15       	cp	r18, r1
    b0b0:	31 05       	cpc	r19, r1
    b0b2:	11 f4       	brne	.+4      	; 0xb0b8 <dir_register+0x276>
    b0b4:	2f ef       	ldi	r18, 0xFF	; 255
    b0b6:	3f ef       	ldi	r19, 0xFF	; 255
    b0b8:	8a 16       	cp	r8, r26
    b0ba:	9b 06       	cpc	r9, r27
    b0bc:	21 f7       	brne	.-56     	; 0xb086 <dir_register+0x244>
    b0be:	2f 3f       	cpi	r18, 0xFF	; 255
    b0c0:	3f 4f       	sbci	r19, 0xFF	; 255
    b0c2:	49 f0       	breq	.+18     	; 0xb0d6 <dir_register+0x294>
    b0c4:	88 0f       	add	r24, r24
    b0c6:	99 1f       	adc	r25, r25
    b0c8:	db 01       	movw	r26, r22
    b0ca:	a8 0f       	add	r26, r24
    b0cc:	b9 1f       	adc	r27, r25
    b0ce:	8d 91       	ld	r24, X+
    b0d0:	9c 91       	ld	r25, X
    b0d2:	89 2b       	or	r24, r25
    b0d4:	19 f4       	brne	.+6      	; 0xb0dc <dir_register+0x29a>
    b0d6:	27 2d       	mov	r18, r7
    b0d8:	20 64       	ori	r18, 0x40	; 64
    b0da:	72 2e       	mov	r7, r18
    b0dc:	ed 89       	ldd	r30, Y+21	; 0x15
    b0de:	fe 89       	ldd	r31, Y+22	; 0x16
    b0e0:	70 82       	st	Z, r7
    b0e2:	f6 01       	movw	r30, r12
    b0e4:	53 82       	std	Z+3, r5	; 0x03
    b0e6:	60 e0       	ldi	r22, 0x00	; 0
    b0e8:	70 e0       	ldi	r23, 0x00	; 0
    b0ea:	c8 01       	movw	r24, r16
    b0ec:	6a db       	rcall	.-2348   	; 0xa7c2 <dir_next>
    b0ee:	00 97       	sbiw	r24, 0x00	; 0
    b0f0:	81 f5       	brne	.+96     	; 0xb152 <dir_register+0x310>
    b0f2:	f1 e0       	ldi	r31, 0x01	; 1
    b0f4:	ef 1a       	sub	r14, r31
    b0f6:	f1 08       	sbc	r15, r1
    b0f8:	09 f0       	breq	.+2      	; 0xb0fc <dir_register+0x2ba>
    b0fa:	9e cf       	rjmp	.-196    	; 0xb038 <dir_register+0x1f6>
    b0fc:	03 c0       	rjmp	.+6      	; 0xb104 <dir_register+0x2c2>
    b0fe:	26 e0       	ldi	r18, 0x06	; 6
    b100:	90 e0       	ldi	r25, 0x00	; 0
    b102:	28 c0       	rjmp	.+80     	; 0xb154 <dir_register+0x312>
    b104:	f8 01       	movw	r30, r16
    b106:	46 89       	ldd	r20, Z+22	; 0x16
    b108:	57 89       	ldd	r21, Z+23	; 0x17
    b10a:	60 8d       	ldd	r22, Z+24	; 0x18
    b10c:	71 8d       	ldd	r23, Z+25	; 0x19
    b10e:	c6 01       	movw	r24, r12
    b110:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <move_window>
    b114:	00 97       	sbiw	r24, 0x00	; 0
    b116:	e9 f4       	brne	.+58     	; 0xb152 <dir_register+0x310>
    b118:	40 e2       	ldi	r20, 0x20	; 32
    b11a:	50 e0       	ldi	r21, 0x00	; 0
    b11c:	60 e0       	ldi	r22, 0x00	; 0
    b11e:	70 e0       	ldi	r23, 0x00	; 0
    b120:	f8 01       	movw	r30, r16
    b122:	82 8d       	ldd	r24, Z+26	; 0x1a
    b124:	93 8d       	ldd	r25, Z+27	; 0x1b
    b126:	0e 94 25 48 	call	0x904a	; 0x904a <mem_set>
    b12a:	4b e0       	ldi	r20, 0x0B	; 11
    b12c:	50 e0       	ldi	r21, 0x00	; 0
    b12e:	b5 01       	movw	r22, r10
    b130:	f8 01       	movw	r30, r16
    b132:	82 8d       	ldd	r24, Z+26	; 0x1a
    b134:	93 8d       	ldd	r25, Z+27	; 0x1b
    b136:	0e 94 8e 49 	call	0x931c	; 0x931c <mem_cpy.part.0>
    b13a:	f8 01       	movw	r30, r16
    b13c:	22 8d       	ldd	r18, Z+26	; 0x1a
    b13e:	33 8d       	ldd	r19, Z+27	; 0x1b
    b140:	87 a1       	ldd	r24, Z+39	; 0x27
    b142:	88 71       	andi	r24, 0x18	; 24
    b144:	f9 01       	movw	r30, r18
    b146:	84 87       	std	Z+12, r24	; 0x0c
    b148:	81 e0       	ldi	r24, 0x01	; 1
    b14a:	f6 01       	movw	r30, r12
    b14c:	83 83       	std	Z+3, r24	; 0x03
    b14e:	20 e0       	ldi	r18, 0x00	; 0
    b150:	d7 cf       	rjmp	.-82     	; 0xb100 <dir_register+0x2be>
    b152:	28 2f       	mov	r18, r24
    b154:	82 2f       	mov	r24, r18
    b156:	66 96       	adiw	r28, 0x16	; 22
    b158:	e2 e1       	ldi	r30, 0x12	; 18
    b15a:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

0000b15e <follow_path>:
    b15e:	aa e0       	ldi	r26, 0x0A	; 10
    b160:	b0 e0       	ldi	r27, 0x00	; 0
    b162:	e5 eb       	ldi	r30, 0xB5	; 181
    b164:	f8 e5       	ldi	r31, 0x58	; 88
    b166:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
    b16a:	7c 01       	movw	r14, r24
    b16c:	3b 01       	movw	r6, r22
    b16e:	dc 01       	movw	r26, r24
    b170:	0d 90       	ld	r0, X+
    b172:	bc 91       	ld	r27, X
    b174:	a0 2d       	mov	r26, r0
    b176:	be 83       	std	Y+6, r27	; 0x06
    b178:	ad 83       	std	Y+5, r26	; 0x05
    b17a:	fb 01       	movw	r30, r22
    b17c:	80 81       	ld	r24, Z
    b17e:	8f 32       	cpi	r24, 0x2F	; 47
    b180:	11 f0       	breq	.+4      	; 0xb186 <follow_path+0x28>
    b182:	8c 35       	cpi	r24, 0x5C	; 92
    b184:	11 f4       	brne	.+4      	; 0xb18a <follow_path+0x2c>
    b186:	93 01       	movw	r18, r6
    b188:	0c c0       	rjmp	.+24     	; 0xb1a2 <follow_path+0x44>
    b18a:	ed 81       	ldd	r30, Y+5	; 0x05
    b18c:	fe 81       	ldd	r31, Y+6	; 0x06
    b18e:	85 89       	ldd	r24, Z+21	; 0x15
    b190:	96 89       	ldd	r25, Z+22	; 0x16
    b192:	a7 89       	ldd	r26, Z+23	; 0x17
    b194:	b0 8d       	ldd	r27, Z+24	; 0x18
    b196:	f7 01       	movw	r30, r14
    b198:	86 83       	std	Z+6, r24	; 0x06
    b19a:	97 83       	std	Z+7, r25	; 0x07
    b19c:	a0 87       	std	Z+8, r26	; 0x08
    b19e:	b1 87       	std	Z+9, r27	; 0x09
    b1a0:	0e c0       	rjmp	.+28     	; 0xb1be <follow_path+0x60>
    b1a2:	39 01       	movw	r6, r18
    b1a4:	d9 01       	movw	r26, r18
    b1a6:	8c 91       	ld	r24, X
    b1a8:	2f 5f       	subi	r18, 0xFF	; 255
    b1aa:	3f 4f       	sbci	r19, 0xFF	; 255
    b1ac:	8f 32       	cpi	r24, 0x2F	; 47
    b1ae:	c9 f3       	breq	.-14     	; 0xb1a2 <follow_path+0x44>
    b1b0:	8c 35       	cpi	r24, 0x5C	; 92
    b1b2:	b9 f3       	breq	.-18     	; 0xb1a2 <follow_path+0x44>
    b1b4:	f7 01       	movw	r30, r14
    b1b6:	16 82       	std	Z+6, r1	; 0x06
    b1b8:	17 82       	std	Z+7, r1	; 0x07
    b1ba:	10 86       	std	Z+8, r1	; 0x08
    b1bc:	11 86       	std	Z+9, r1	; 0x09
    b1be:	d3 01       	movw	r26, r6
    b1c0:	8c 91       	ld	r24, X
    b1c2:	80 32       	cpi	r24, 0x20	; 32
    b1c4:	58 f0       	brcs	.+22     	; 0xb1dc <follow_path+0x7e>
    b1c6:	f7 01       	movw	r30, r14
    b1c8:	7c 96       	adiw	r30, 0x1c	; 28
    b1ca:	f8 87       	std	Y+8, r31	; 0x08
    b1cc:	ef 83       	std	Y+7, r30	; 0x07
    b1ce:	2d 81       	ldd	r18, Y+5	; 0x05
    b1d0:	3e 81       	ldd	r19, Y+6	; 0x06
    b1d2:	2b 5c       	subi	r18, 0xCB	; 203
    b1d4:	3f 4f       	sbci	r19, 0xFF	; 255
    b1d6:	3a 87       	std	Y+10, r19	; 0x0a
    b1d8:	29 87       	std	Y+9, r18	; 0x09
    b1da:	96 c0       	rjmp	.+300    	; 0xb308 <follow_path+0x1aa>
    b1dc:	80 e8       	ldi	r24, 0x80	; 128
    b1de:	f7 01       	movw	r30, r14
    b1e0:	87 a3       	std	Z+39, r24	; 0x27
    b1e2:	40 e0       	ldi	r20, 0x00	; 0
    b1e4:	50 e0       	ldi	r21, 0x00	; 0
    b1e6:	ba 01       	movw	r22, r20
    b1e8:	c7 01       	movw	r24, r14
    b1ea:	73 d8       	rcall	.-3866   	; 0xa2d2 <dir_sdi>
    b1ec:	e5 c1       	rjmp	.+970    	; 0xb5b8 <follow_path+0x45a>
    b1ee:	6c 35       	cpi	r22, 0x5C	; 92
    b1f0:	71 05       	cpc	r23, r1
    b1f2:	b9 f1       	breq	.+110    	; 0xb262 <follow_path+0x104>
    b1f4:	60 38       	cpi	r22, 0x80	; 128
    b1f6:	71 05       	cpc	r23, r1
    b1f8:	28 f4       	brcc	.+10     	; 0xb204 <follow_path+0xa6>
    b1fa:	e7 e4       	ldi	r30, 0x47	; 71
    b1fc:	f3 e0       	ldi	r31, 0x03	; 3
    b1fe:	41 91       	ld	r20, Z+
    b200:	41 11       	cpse	r20, r1
    b202:	8c c0       	rjmp	.+280    	; 0xb31c <follow_path+0x1be>
    b204:	0f 3f       	cpi	r16, 0xFF	; 255
    b206:	11 05       	cpc	r17, r1
    b208:	08 f0       	brcs	.+2      	; 0xb20c <follow_path+0xae>
    b20a:	b9 c1       	rjmp	.+882    	; 0xb57e <follow_path+0x420>
    b20c:	f8 01       	movw	r30, r16
    b20e:	ee 0f       	add	r30, r30
    b210:	ff 1f       	adc	r31, r31
    b212:	ea 0d       	add	r30, r10
    b214:	fb 1d       	adc	r31, r11
    b216:	71 83       	std	Z+1, r23	; 0x01
    b218:	60 83       	st	Z, r22
    b21a:	0f 5f       	subi	r16, 0xFF	; 255
    b21c:	1f 4f       	sbci	r17, 0xFF	; 255
    b21e:	ce 01       	movw	r24, r28
    b220:	01 96       	adiw	r24, 0x01	; 1
    b222:	0e 94 3d 48 	call	0x907a	; 0x907a <tchar2uni>
    b226:	6f 3f       	cpi	r22, 0xFF	; 255
    b228:	bf ef       	ldi	r27, 0xFF	; 255
    b22a:	7b 07       	cpc	r23, r27
    b22c:	8b 07       	cpc	r24, r27
    b22e:	9b 07       	cpc	r25, r27
    b230:	09 f4       	brne	.+2      	; 0xb234 <follow_path+0xd6>
    b232:	a5 c1       	rjmp	.+842    	; 0xb57e <follow_path+0x420>
    b234:	61 15       	cp	r22, r1
    b236:	71 05       	cpc	r23, r1
    b238:	e1 e0       	ldi	r30, 0x01	; 1
    b23a:	8e 07       	cpc	r24, r30
    b23c:	91 05       	cpc	r25, r1
    b23e:	48 f0       	brcs	.+18     	; 0xb252 <follow_path+0xf4>
    b240:	f8 01       	movw	r30, r16
    b242:	ee 0f       	add	r30, r30
    b244:	ff 1f       	adc	r31, r31
    b246:	ea 0d       	add	r30, r10
    b248:	fb 1d       	adc	r31, r11
    b24a:	91 83       	std	Z+1, r25	; 0x01
    b24c:	80 83       	st	Z, r24
    b24e:	0f 5f       	subi	r16, 0xFF	; 255
    b250:	1f 4f       	sbci	r17, 0xFF	; 255
    b252:	9b 01       	movw	r18, r22
    b254:	60 32       	cpi	r22, 0x20	; 32
    b256:	71 05       	cpc	r23, r1
    b258:	08 f4       	brcc	.+2      	; 0xb25c <follow_path+0xfe>
    b25a:	6a c0       	rjmp	.+212    	; 0xb330 <follow_path+0x1d2>
    b25c:	6f 32       	cpi	r22, 0x2F	; 47
    b25e:	71 05       	cpc	r23, r1
    b260:	31 f6       	brne	.-116    	; 0xb1ee <follow_path+0x90>
    b262:	e9 81       	ldd	r30, Y+1	; 0x01
    b264:	fa 81       	ldd	r31, Y+2	; 0x02
    b266:	80 81       	ld	r24, Z
    b268:	8f 32       	cpi	r24, 0x2F	; 47
    b26a:	09 f4       	brne	.+2      	; 0xb26e <follow_path+0x110>
    b26c:	5d c0       	rjmp	.+186    	; 0xb328 <follow_path+0x1ca>
    b26e:	8c 35       	cpi	r24, 0x5C	; 92
    b270:	09 f4       	brne	.+2      	; 0xb274 <follow_path+0x116>
    b272:	5a c0       	rjmp	.+180    	; 0xb328 <follow_path+0x1ca>
    b274:	1b 82       	std	Y+3, r1	; 0x03
    b276:	69 80       	ldd	r6, Y+1	; 0x01
    b278:	7a 80       	ldd	r7, Y+2	; 0x02
    b27a:	98 01       	movw	r18, r16
    b27c:	22 0f       	add	r18, r18
    b27e:	33 1f       	adc	r19, r19
    b280:	01 30       	cpi	r16, 0x01	; 1
    b282:	11 05       	cpc	r17, r1
    b284:	09 f0       	breq	.+2      	; 0xb288 <follow_path+0x12a>
    b286:	57 c0       	rjmp	.+174    	; 0xb336 <follow_path+0x1d8>
    b288:	d5 01       	movw	r26, r10
    b28a:	8d 91       	ld	r24, X+
    b28c:	9c 91       	ld	r25, X
    b28e:	8e 97       	sbiw	r24, 0x2e	; 46
    b290:	09 f0       	breq	.+2      	; 0xb294 <follow_path+0x136>
    b292:	5c c0       	rjmp	.+184    	; 0xb34c <follow_path+0x1ee>
    b294:	f9 01       	movw	r30, r18
    b296:	ea 0d       	add	r30, r10
    b298:	fb 1d       	adc	r31, r11
    b29a:	11 82       	std	Z+1, r1	; 0x01
    b29c:	10 82       	st	Z, r1
    b29e:	f7 01       	movw	r30, r14
    b2a0:	7c 96       	adiw	r30, 0x1c	; 28
    b2a2:	80 e0       	ldi	r24, 0x00	; 0
    b2a4:	90 e0       	ldi	r25, 0x00	; 0
    b2a6:	80 17       	cp	r24, r16
    b2a8:	91 07       	cpc	r25, r17
    b2aa:	08 f0       	brcs	.+2      	; 0xb2ae <follow_path+0x150>
    b2ac:	53 c0       	rjmp	.+166    	; 0xb354 <follow_path+0x1f6>
    b2ae:	2e e2       	ldi	r18, 0x2E	; 46
    b2b0:	21 93       	st	Z+, r18
    b2b2:	01 96       	adiw	r24, 0x01	; 1
    b2b4:	8b 30       	cpi	r24, 0x0B	; 11
    b2b6:	91 05       	cpc	r25, r1
    b2b8:	b1 f7       	brne	.-20     	; 0xb2a6 <follow_path+0x148>
    b2ba:	8b 81       	ldd	r24, Y+3	; 0x03
    b2bc:	80 62       	ori	r24, 0x20	; 32
    b2be:	f7 01       	movw	r30, r14
    b2c0:	87 a3       	std	Z+39, r24	; 0x27
    b2c2:	80 e0       	ldi	r24, 0x00	; 0
    b2c4:	90 e0       	ldi	r25, 0x00	; 0
    b2c6:	00 97       	sbiw	r24, 0x00	; 0
    b2c8:	09 f0       	breq	.+2      	; 0xb2cc <follow_path+0x16e>
    b2ca:	76 c1       	rjmp	.+748    	; 0xb5b8 <follow_path+0x45a>
    b2cc:	c7 01       	movw	r24, r14
    b2ce:	ab dc       	rcall	.-1706   	; 0xac26 <dir_find>
    b2d0:	f7 01       	movw	r30, r14
    b2d2:	27 a1       	ldd	r18, Z+39	; 0x27
    b2d4:	00 97       	sbiw	r24, 0x00	; 0
    b2d6:	09 f0       	breq	.+2      	; 0xb2da <follow_path+0x17c>
    b2d8:	55 c1       	rjmp	.+682    	; 0xb584 <follow_path+0x426>
    b2da:	22 fd       	sbrc	r18, 2
    b2dc:	6d c1       	rjmp	.+730    	; 0xb5b8 <follow_path+0x45a>
    b2de:	f7 01       	movw	r30, r14
    b2e0:	84 81       	ldd	r24, Z+4	; 0x04
    b2e2:	84 ff       	sbrs	r24, 4
    b2e4:	60 c1       	rjmp	.+704    	; 0xb5a6 <follow_path+0x448>
    b2e6:	66 85       	ldd	r22, Z+14	; 0x0e
    b2e8:	77 85       	ldd	r23, Z+15	; 0x0f
    b2ea:	71 70       	andi	r23, 0x01	; 1
    b2ec:	29 85       	ldd	r18, Y+9	; 0x09
    b2ee:	3a 85       	ldd	r19, Y+10	; 0x0a
    b2f0:	62 0f       	add	r22, r18
    b2f2:	73 1f       	adc	r23, r19
    b2f4:	ad 81       	ldd	r26, Y+5	; 0x05
    b2f6:	be 81       	ldd	r27, Y+6	; 0x06
    b2f8:	8c 91       	ld	r24, X
    b2fa:	0e 94 56 4b 	call	0x96ac	; 0x96ac <ld_clust.isra.4>
    b2fe:	f7 01       	movw	r30, r14
    b300:	66 83       	std	Z+6, r22	; 0x06
    b302:	77 83       	std	Z+7, r23	; 0x07
    b304:	80 87       	std	Z+8, r24	; 0x08
    b306:	91 87       	std	Z+9, r25	; 0x09
    b308:	7a 82       	std	Y+2, r7	; 0x02
    b30a:	69 82       	std	Y+1, r6	; 0x01
    b30c:	d7 01       	movw	r26, r14
    b30e:	ed 91       	ld	r30, X+
    b310:	fc 91       	ld	r31, X
    b312:	a3 84       	ldd	r10, Z+11	; 0x0b
    b314:	b4 84       	ldd	r11, Z+12	; 0x0c
    b316:	00 e0       	ldi	r16, 0x00	; 0
    b318:	10 e0       	ldi	r17, 0x00	; 0
    b31a:	81 cf       	rjmp	.-254    	; 0xb21e <follow_path+0xc0>
    b31c:	50 e0       	ldi	r21, 0x00	; 0
    b31e:	24 17       	cp	r18, r20
    b320:	35 07       	cpc	r19, r21
    b322:	09 f0       	breq	.+2      	; 0xb326 <follow_path+0x1c8>
    b324:	6c cf       	rjmp	.-296    	; 0xb1fe <follow_path+0xa0>
    b326:	2b c1       	rjmp	.+598    	; 0xb57e <follow_path+0x420>
    b328:	31 96       	adiw	r30, 0x01	; 1
    b32a:	fa 83       	std	Y+2, r31	; 0x02
    b32c:	e9 83       	std	Y+1, r30	; 0x01
    b32e:	99 cf       	rjmp	.-206    	; 0xb262 <follow_path+0x104>
    b330:	f4 e0       	ldi	r31, 0x04	; 4
    b332:	fb 83       	std	Y+3, r31	; 0x03
    b334:	a0 cf       	rjmp	.-192    	; 0xb276 <follow_path+0x118>
    b336:	02 30       	cpi	r16, 0x02	; 2
    b338:	11 05       	cpc	r17, r1
    b33a:	41 f4       	brne	.+16     	; 0xb34c <follow_path+0x1ee>
    b33c:	f5 01       	movw	r30, r10
    b33e:	82 81       	ldd	r24, Z+2	; 0x02
    b340:	93 81       	ldd	r25, Z+3	; 0x03
    b342:	8e 97       	sbiw	r24, 0x2e	; 46
    b344:	19 f4       	brne	.+6      	; 0xb34c <follow_path+0x1ee>
    b346:	80 81       	ld	r24, Z
    b348:	91 81       	ldd	r25, Z+1	; 0x01
    b34a:	a1 cf       	rjmp	.-190    	; 0xb28e <follow_path+0x130>
    b34c:	f9 01       	movw	r30, r18
    b34e:	ea 0d       	add	r30, r10
    b350:	fb 1d       	adc	r31, r11
    b352:	09 c0       	rjmp	.+18     	; 0xb366 <follow_path+0x208>
    b354:	20 e2       	ldi	r18, 0x20	; 32
    b356:	ac cf       	rjmp	.-168    	; 0xb2b0 <follow_path+0x152>
    b358:	92 91       	ld	r25, -Z
    b35a:	82 91       	ld	r24, -Z
    b35c:	80 32       	cpi	r24, 0x20	; 32
    b35e:	91 05       	cpc	r25, r1
    b360:	31 f4       	brne	.+12     	; 0xb36e <follow_path+0x210>
    b362:	01 50       	subi	r16, 0x01	; 1
    b364:	11 09       	sbc	r17, r1
    b366:	01 15       	cp	r16, r1
    b368:	11 05       	cpc	r17, r1
    b36a:	b1 f7       	brne	.-20     	; 0xb358 <follow_path+0x1fa>
    b36c:	02 c0       	rjmp	.+4      	; 0xb372 <follow_path+0x214>
    b36e:	8e 97       	sbiw	r24, 0x2e	; 46
    b370:	c1 f3       	breq	.-16     	; 0xb362 <follow_path+0x204>
    b372:	f8 01       	movw	r30, r16
    b374:	ee 0f       	add	r30, r30
    b376:	ff 1f       	adc	r31, r31
    b378:	ea 0d       	add	r30, r10
    b37a:	fb 1d       	adc	r31, r11
    b37c:	11 82       	std	Z+1, r1	; 0x01
    b37e:	10 82       	st	Z, r1
    b380:	01 15       	cp	r16, r1
    b382:	11 05       	cpc	r17, r1
    b384:	09 f4       	brne	.+2      	; 0xb388 <follow_path+0x22a>
    b386:	fb c0       	rjmp	.+502    	; 0xb57e <follow_path+0x420>
    b388:	d5 01       	movw	r26, r10
    b38a:	41 2c       	mov	r4, r1
    b38c:	51 2c       	mov	r5, r1
    b38e:	8d 91       	ld	r24, X+
    b390:	9d 91       	ld	r25, X+
    b392:	80 32       	cpi	r24, 0x20	; 32
    b394:	91 05       	cpc	r25, r1
    b396:	21 f4       	brne	.+8      	; 0xb3a0 <follow_path+0x242>
    b398:	2f ef       	ldi	r18, 0xFF	; 255
    b39a:	42 1a       	sub	r4, r18
    b39c:	52 0a       	sbc	r5, r18
    b39e:	f7 cf       	rjmp	.-18     	; 0xb38e <follow_path+0x230>
    b3a0:	41 14       	cp	r4, r1
    b3a2:	51 04       	cpc	r5, r1
    b3a4:	11 f4       	brne	.+4      	; 0xb3aa <follow_path+0x24c>
    b3a6:	8e 97       	sbiw	r24, 0x2e	; 46
    b3a8:	39 f4       	brne	.+14     	; 0xb3b8 <follow_path+0x25a>
    b3aa:	3b 81       	ldd	r19, Y+3	; 0x03
    b3ac:	33 60       	ori	r19, 0x03	; 3
    b3ae:	3b 83       	std	Y+3, r19	; 0x03
    b3b0:	03 c0       	rjmp	.+6      	; 0xb3b8 <follow_path+0x25a>
    b3b2:	01 50       	subi	r16, 0x01	; 1
    b3b4:	11 09       	sbc	r17, r1
    b3b6:	21 f0       	breq	.+8      	; 0xb3c0 <follow_path+0x262>
    b3b8:	92 91       	ld	r25, -Z
    b3ba:	82 91       	ld	r24, -Z
    b3bc:	8e 97       	sbiw	r24, 0x2e	; 46
    b3be:	c9 f7       	brne	.-14     	; 0xb3b2 <follow_path+0x254>
    b3c0:	4b e0       	ldi	r20, 0x0B	; 11
    b3c2:	50 e0       	ldi	r21, 0x00	; 0
    b3c4:	60 e2       	ldi	r22, 0x20	; 32
    b3c6:	70 e0       	ldi	r23, 0x00	; 0
    b3c8:	8f 81       	ldd	r24, Y+7	; 0x07
    b3ca:	98 85       	ldd	r25, Y+8	; 0x08
    b3cc:	0e 94 25 48 	call	0x904a	; 0x904a <mem_set>
    b3d0:	48 e0       	ldi	r20, 0x08	; 8
    b3d2:	84 2e       	mov	r8, r20
    b3d4:	91 2c       	mov	r9, r1
    b3d6:	c1 2c       	mov	r12, r1
    b3d8:	d1 2c       	mov	r13, r1
    b3da:	1c 82       	std	Y+4, r1	; 0x04
    b3dc:	12 01       	movw	r2, r4
    b3de:	8f ef       	ldi	r24, 0xFF	; 255
    b3e0:	28 1a       	sub	r2, r24
    b3e2:	38 0a       	sbc	r3, r24
    b3e4:	44 0c       	add	r4, r4
    b3e6:	55 1c       	adc	r5, r5
    b3e8:	f5 01       	movw	r30, r10
    b3ea:	e4 0d       	add	r30, r4
    b3ec:	f5 1d       	adc	r31, r5
    b3ee:	80 81       	ld	r24, Z
    b3f0:	91 81       	ldd	r25, Z+1	; 0x01
    b3f2:	00 97       	sbiw	r24, 0x00	; 0
    b3f4:	09 f4       	brne	.+2      	; 0xb3f8 <follow_path+0x29a>
    b3f6:	98 c0       	rjmp	.+304    	; 0xb528 <follow_path+0x3ca>
    b3f8:	80 32       	cpi	r24, 0x20	; 32
    b3fa:	91 05       	cpc	r25, r1
    b3fc:	31 f0       	breq	.+12     	; 0xb40a <follow_path+0x2ac>
    b3fe:	8e 32       	cpi	r24, 0x2E	; 46
    b400:	91 05       	cpc	r25, r1
    b402:	41 f4       	brne	.+16     	; 0xb414 <follow_path+0x2b6>
    b404:	20 16       	cp	r2, r16
    b406:	31 06       	cpc	r3, r17
    b408:	61 f0       	breq	.+24     	; 0xb422 <follow_path+0x2c4>
    b40a:	9b 81       	ldd	r25, Y+3	; 0x03
    b40c:	93 60       	ori	r25, 0x03	; 3
    b40e:	9b 83       	std	Y+3, r25	; 0x03
    b410:	21 01       	movw	r4, r2
    b412:	e4 cf       	rjmp	.-56     	; 0xb3dc <follow_path+0x27e>
    b414:	c8 14       	cp	r12, r8
    b416:	d9 04       	cpc	r13, r9
    b418:	40 f4       	brcc	.+16     	; 0xb42a <follow_path+0x2cc>
    b41a:	20 16       	cp	r2, r16
    b41c:	31 06       	cpc	r3, r17
    b41e:	31 f5       	brne	.+76     	; 0xb46c <follow_path+0x30e>
    b420:	c5 c0       	rjmp	.+394    	; 0xb5ac <follow_path+0x44e>
    b422:	c8 14       	cp	r12, r8
    b424:	d9 04       	cpc	r13, r9
    b426:	08 f4       	brcc	.+2      	; 0xb42a <follow_path+0x2cc>
    b428:	c1 c0       	rjmp	.+386    	; 0xb5ac <follow_path+0x44e>
    b42a:	ab e0       	ldi	r26, 0x0B	; 11
    b42c:	8a 16       	cp	r8, r26
    b42e:	91 04       	cpc	r9, r1
    b430:	39 f4       	brne	.+14     	; 0xb440 <follow_path+0x2e2>
    b432:	bb 81       	ldd	r27, Y+3	; 0x03
    b434:	b3 60       	ori	r27, 0x03	; 3
    b436:	bb 83       	std	Y+3, r27	; 0x03
    b438:	2b e0       	ldi	r18, 0x0B	; 11
    b43a:	82 2e       	mov	r8, r18
    b43c:	91 2c       	mov	r9, r1
    b43e:	74 c0       	rjmp	.+232    	; 0xb528 <follow_path+0x3ca>
    b440:	20 16       	cp	r2, r16
    b442:	31 06       	cpc	r3, r17
    b444:	39 f0       	breq	.+14     	; 0xb454 <follow_path+0x2f6>
    b446:	eb 81       	ldd	r30, Y+3	; 0x03
    b448:	e3 60       	ori	r30, 0x03	; 3
    b44a:	eb 83       	std	Y+3, r30	; 0x03
    b44c:	02 15       	cp	r16, r2
    b44e:	13 05       	cpc	r17, r3
    b450:	08 f4       	brcc	.+2      	; 0xb454 <follow_path+0x2f6>
    b452:	6a c0       	rjmp	.+212    	; 0xb528 <follow_path+0x3ca>
    b454:	fc 81       	ldd	r31, Y+4	; 0x04
    b456:	ff 0f       	add	r31, r31
    b458:	ff 0f       	add	r31, r31
    b45a:	fc 83       	std	Y+4, r31	; 0x04
    b45c:	18 01       	movw	r2, r16
    b45e:	8b e0       	ldi	r24, 0x0B	; 11
    b460:	88 2e       	mov	r8, r24
    b462:	91 2c       	mov	r9, r1
    b464:	98 e0       	ldi	r25, 0x08	; 8
    b466:	c9 2e       	mov	r12, r25
    b468:	d1 2c       	mov	r13, r1
    b46a:	d2 cf       	rjmp	.-92     	; 0xb410 <follow_path+0x2b2>
    b46c:	80 38       	cpi	r24, 0x80	; 128
    b46e:	91 05       	cpc	r25, r1
    b470:	78 f1       	brcs	.+94     	; 0xb4d0 <follow_path+0x372>
    b472:	2b 81       	ldd	r18, Y+3	; 0x03
    b474:	22 60       	ori	r18, 0x02	; 2
    b476:	52 2e       	mov	r5, r18
    b478:	bc 01       	movw	r22, r24
    b47a:	80 e0       	ldi	r24, 0x00	; 0
    b47c:	90 e0       	ldi	r25, 0x00	; 0
    b47e:	45 eb       	ldi	r20, 0xB5	; 181
    b480:	51 e0       	ldi	r21, 0x01	; 1
    b482:	0e 94 78 6a 	call	0xd4f0	; 0xd4f0 <ff_uni2oem>
    b486:	87 ff       	sbrs	r24, 7
    b488:	08 c0       	rjmp	.+16     	; 0xb49a <follow_path+0x33c>
    b48a:	8f 77       	andi	r24, 0x7F	; 127
    b48c:	99 27       	eor	r25, r25
    b48e:	fc 01       	movw	r30, r24
    b490:	e5 57       	subi	r30, 0x75	; 117
    b492:	fc 4f       	sbci	r31, 0xFC	; 252
    b494:	80 81       	ld	r24, Z
    b496:	90 e0       	ldi	r25, 0x00	; 0
    b498:	18 c0       	rjmp	.+48     	; 0xb4ca <follow_path+0x36c>
    b49a:	8f 3f       	cpi	r24, 0xFF	; 255
    b49c:	91 05       	cpc	r25, r1
    b49e:	a9 f0       	breq	.+42     	; 0xb4ca <follow_path+0x36c>
    b4a0:	a0 f0       	brcs	.+40     	; 0xb4ca <follow_path+0x36c>
    b4a2:	94 01       	movw	r18, r8
    b4a4:	21 50       	subi	r18, 0x01	; 1
    b4a6:	31 09       	sbc	r19, r1
    b4a8:	c2 16       	cp	r12, r18
    b4aa:	d3 06       	cpc	r13, r19
    b4ac:	28 f0       	brcs	.+10     	; 0xb4b8 <follow_path+0x35a>
    b4ae:	3b 81       	ldd	r19, Y+3	; 0x03
    b4b0:	33 60       	ori	r19, 0x03	; 3
    b4b2:	3b 83       	std	Y+3, r19	; 0x03
    b4b4:	64 01       	movw	r12, r8
    b4b6:	ac cf       	rjmp	.-168    	; 0xb410 <follow_path+0x2b2>
    b4b8:	f7 01       	movw	r30, r14
    b4ba:	ec 0d       	add	r30, r12
    b4bc:	fd 1d       	adc	r31, r13
    b4be:	94 8f       	std	Z+28, r25	; 0x1c
    b4c0:	d6 01       	movw	r26, r12
    b4c2:	11 96       	adiw	r26, 0x01	; 1
    b4c4:	6d 01       	movw	r12, r26
    b4c6:	5b 82       	std	Y+3, r5	; 0x03
    b4c8:	26 c0       	rjmp	.+76     	; 0xb516 <follow_path+0x3b8>
    b4ca:	00 97       	sbiw	r24, 0x00	; 0
    b4cc:	59 f0       	breq	.+22     	; 0xb4e4 <follow_path+0x386>
    b4ce:	5b 82       	std	Y+3, r5	; 0x03
    b4d0:	e0 e5       	ldi	r30, 0x50	; 80
    b4d2:	f3 e0       	ldi	r31, 0x03	; 3
    b4d4:	21 91       	ld	r18, Z+
    b4d6:	22 23       	and	r18, r18
    b4d8:	59 f0       	breq	.+22     	; 0xb4f0 <follow_path+0x392>
    b4da:	30 e0       	ldi	r19, 0x00	; 0
    b4dc:	82 17       	cp	r24, r18
    b4de:	93 07       	cpc	r25, r19
    b4e0:	c9 f7       	brne	.-14     	; 0xb4d4 <follow_path+0x376>
    b4e2:	5b 80       	ldd	r5, Y+3	; 0x03
    b4e4:	b5 2d       	mov	r27, r5
    b4e6:	b3 60       	ori	r27, 0x03	; 3
    b4e8:	bb 83       	std	Y+3, r27	; 0x03
    b4ea:	8f e5       	ldi	r24, 0x5F	; 95
    b4ec:	90 e0       	ldi	r25, 0x00	; 0
    b4ee:	13 c0       	rjmp	.+38     	; 0xb516 <follow_path+0x3b8>
    b4f0:	9c 01       	movw	r18, r24
    b4f2:	21 54       	subi	r18, 0x41	; 65
    b4f4:	31 09       	sbc	r19, r1
    b4f6:	2a 31       	cpi	r18, 0x1A	; 26
    b4f8:	31 05       	cpc	r19, r1
    b4fa:	18 f4       	brcc	.+6      	; 0xb502 <follow_path+0x3a4>
    b4fc:	ec 81       	ldd	r30, Y+4	; 0x04
    b4fe:	e2 60       	ori	r30, 0x02	; 2
    b500:	ec 83       	std	Y+4, r30	; 0x04
    b502:	9c 01       	movw	r18, r24
    b504:	21 56       	subi	r18, 0x61	; 97
    b506:	31 09       	sbc	r19, r1
    b508:	2a 31       	cpi	r18, 0x1A	; 26
    b50a:	31 05       	cpc	r19, r1
    b50c:	20 f4       	brcc	.+8      	; 0xb516 <follow_path+0x3b8>
    b50e:	fc 81       	ldd	r31, Y+4	; 0x04
    b510:	f1 60       	ori	r31, 0x01	; 1
    b512:	fc 83       	std	Y+4, r31	; 0x04
    b514:	80 97       	sbiw	r24, 0x20	; 32
    b516:	f7 01       	movw	r30, r14
    b518:	ec 0d       	add	r30, r12
    b51a:	fd 1d       	adc	r31, r13
    b51c:	84 8f       	std	Z+28, r24	; 0x1c
    b51e:	96 01       	movw	r18, r12
    b520:	2f 5f       	subi	r18, 0xFF	; 255
    b522:	3f 4f       	sbci	r19, 0xFF	; 255
    b524:	69 01       	movw	r12, r18
    b526:	74 cf       	rjmp	.-280    	; 0xb410 <follow_path+0x2b2>
    b528:	f7 01       	movw	r30, r14
    b52a:	84 8d       	ldd	r24, Z+28	; 0x1c
    b52c:	85 3e       	cpi	r24, 0xE5	; 229
    b52e:	11 f4       	brne	.+4      	; 0xb534 <follow_path+0x3d6>
    b530:	25 e0       	ldi	r18, 0x05	; 5
    b532:	24 8f       	std	Z+28, r18	; 0x1c
    b534:	38 e0       	ldi	r19, 0x08	; 8
    b536:	83 16       	cp	r8, r19
    b538:	91 04       	cpc	r9, r1
    b53a:	21 f4       	brne	.+8      	; 0xb544 <follow_path+0x3e6>
    b53c:	8c 81       	ldd	r24, Y+4	; 0x04
    b53e:	88 0f       	add	r24, r24
    b540:	88 0f       	add	r24, r24
    b542:	8c 83       	std	Y+4, r24	; 0x04
    b544:	8c 81       	ldd	r24, Y+4	; 0x04
    b546:	8c 70       	andi	r24, 0x0C	; 12
    b548:	8c 30       	cpi	r24, 0x0C	; 12
    b54a:	21 f0       	breq	.+8      	; 0xb554 <follow_path+0x3f6>
    b54c:	8c 81       	ldd	r24, Y+4	; 0x04
    b54e:	83 70       	andi	r24, 0x03	; 3
    b550:	83 30       	cpi	r24, 0x03	; 3
    b552:	19 f4       	brne	.+6      	; 0xb55a <follow_path+0x3fc>
    b554:	9b 81       	ldd	r25, Y+3	; 0x03
    b556:	92 60       	ori	r25, 0x02	; 2
    b558:	9b 83       	std	Y+3, r25	; 0x03
    b55a:	ab 81       	ldd	r26, Y+3	; 0x03
    b55c:	a1 fd       	sbrc	r26, 1
    b55e:	0b c0       	rjmp	.+22     	; 0xb576 <follow_path+0x418>
    b560:	bc 81       	ldd	r27, Y+4	; 0x04
    b562:	b0 ff       	sbrs	r27, 0
    b564:	02 c0       	rjmp	.+4      	; 0xb56a <follow_path+0x40c>
    b566:	a0 61       	ori	r26, 0x10	; 16
    b568:	ab 83       	std	Y+3, r26	; 0x03
    b56a:	ec 81       	ldd	r30, Y+4	; 0x04
    b56c:	e2 ff       	sbrs	r30, 2
    b56e:	03 c0       	rjmp	.+6      	; 0xb576 <follow_path+0x418>
    b570:	fb 81       	ldd	r31, Y+3	; 0x03
    b572:	f8 60       	ori	r31, 0x08	; 8
    b574:	fb 83       	std	Y+3, r31	; 0x03
    b576:	2b 81       	ldd	r18, Y+3	; 0x03
    b578:	f7 01       	movw	r30, r14
    b57a:	27 a3       	std	Z+39, r18	; 0x27
    b57c:	a2 ce       	rjmp	.-700    	; 0xb2c2 <follow_path+0x164>
    b57e:	86 e0       	ldi	r24, 0x06	; 6
    b580:	90 e0       	ldi	r25, 0x00	; 0
    b582:	a1 ce       	rjmp	.-702    	; 0xb2c6 <follow_path+0x168>
    b584:	84 30       	cpi	r24, 0x04	; 4
    b586:	91 05       	cpc	r25, r1
    b588:	b9 f4       	brne	.+46     	; 0xb5b8 <follow_path+0x45a>
    b58a:	32 2f       	mov	r19, r18
    b58c:	34 70       	andi	r19, 0x04	; 4
    b58e:	25 ff       	sbrs	r18, 5
    b590:	08 c0       	rjmp	.+16     	; 0xb5a2 <follow_path+0x444>
    b592:	33 23       	and	r19, r19
    b594:	09 f4       	brne	.+2      	; 0xb598 <follow_path+0x43a>
    b596:	b8 ce       	rjmp	.-656    	; 0xb308 <follow_path+0x1aa>
    b598:	80 e8       	ldi	r24, 0x80	; 128
    b59a:	87 a3       	std	Z+39, r24	; 0x27
    b59c:	80 e0       	ldi	r24, 0x00	; 0
    b59e:	90 e0       	ldi	r25, 0x00	; 0
    b5a0:	0b c0       	rjmp	.+22     	; 0xb5b8 <follow_path+0x45a>
    b5a2:	31 11       	cpse	r19, r1
    b5a4:	09 c0       	rjmp	.+18     	; 0xb5b8 <follow_path+0x45a>
    b5a6:	85 e0       	ldi	r24, 0x05	; 5
    b5a8:	90 e0       	ldi	r25, 0x00	; 0
    b5aa:	06 c0       	rjmp	.+12     	; 0xb5b8 <follow_path+0x45a>
    b5ac:	fb e0       	ldi	r31, 0x0B	; 11
    b5ae:	8f 16       	cp	r8, r31
    b5b0:	91 04       	cpc	r9, r1
    b5b2:	09 f0       	breq	.+2      	; 0xb5b6 <follow_path+0x458>
    b5b4:	4f cf       	rjmp	.-354    	; 0xb454 <follow_path+0x2f6>
    b5b6:	3d cf       	rjmp	.-390    	; 0xb432 <follow_path+0x2d4>
    b5b8:	2a 96       	adiw	r28, 0x0a	; 10
    b5ba:	e2 e1       	ldi	r30, 0x12	; 18
    b5bc:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

0000b5c0 <f_mount>:
    b5c0:	a6 e0       	ldi	r26, 0x06	; 6
    b5c2:	b0 e0       	ldi	r27, 0x00	; 0
    b5c4:	e6 ee       	ldi	r30, 0xE6	; 230
    b5c6:	fa e5       	ldi	r31, 0x5A	; 90
    b5c8:	0c 94 95 e4 	jmp	0x1c92a	; 0x1c92a <__prologue_saves__+0x1e>
    b5cc:	9c 83       	std	Y+4, r25	; 0x04
    b5ce:	8b 83       	std	Y+3, r24	; 0x03
    b5d0:	7e 83       	std	Y+6, r23	; 0x06
    b5d2:	6d 83       	std	Y+5, r22	; 0x05
    b5d4:	14 2f       	mov	r17, r20
    b5d6:	7a 83       	std	Y+2, r23	; 0x02
    b5d8:	69 83       	std	Y+1, r22	; 0x01
    b5da:	ce 01       	movw	r24, r28
    b5dc:	01 96       	adiw	r24, 0x01	; 1
    b5de:	0e 94 36 49 	call	0x926c	; 0x926c <get_ldnumber>
    b5e2:	97 fd       	sbrc	r25, 7
    b5e4:	20 c0       	rjmp	.+64     	; 0xb626 <f_mount+0x66>
    b5e6:	88 0f       	add	r24, r24
    b5e8:	99 1f       	adc	r25, r25
    b5ea:	fc 01       	movw	r30, r24
    b5ec:	e1 54       	subi	r30, 0x41	; 65
    b5ee:	f8 4e       	sbci	r31, 0xE8	; 232
    b5f0:	01 90       	ld	r0, Z+
    b5f2:	f0 81       	ld	r31, Z
    b5f4:	e0 2d       	mov	r30, r0
    b5f6:	30 97       	sbiw	r30, 0x00	; 0
    b5f8:	09 f0       	breq	.+2      	; 0xb5fc <f_mount+0x3c>
    b5fa:	10 82       	st	Z, r1
    b5fc:	eb 81       	ldd	r30, Y+3	; 0x03
    b5fe:	fc 81       	ldd	r31, Y+4	; 0x04
    b600:	30 97       	sbiw	r30, 0x00	; 0
    b602:	09 f0       	breq	.+2      	; 0xb606 <f_mount+0x46>
    b604:	10 82       	st	Z, r1
    b606:	dc 01       	movw	r26, r24
    b608:	a1 54       	subi	r26, 0x41	; 65
    b60a:	b8 4e       	sbci	r27, 0xE8	; 232
    b60c:	ed 93       	st	X+, r30
    b60e:	fc 93       	st	X, r31
    b610:	11 23       	and	r17, r17
    b612:	61 f0       	breq	.+24     	; 0xb62c <f_mount+0x6c>
    b614:	40 e0       	ldi	r20, 0x00	; 0
    b616:	be 01       	movw	r22, r28
    b618:	6d 5f       	subi	r22, 0xFD	; 253
    b61a:	7f 4f       	sbci	r23, 0xFF	; 255
    b61c:	ce 01       	movw	r24, r28
    b61e:	05 96       	adiw	r24, 0x05	; 5
    b620:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
    b624:	05 c0       	rjmp	.+10     	; 0xb630 <f_mount+0x70>
    b626:	8b e0       	ldi	r24, 0x0B	; 11
    b628:	90 e0       	ldi	r25, 0x00	; 0
    b62a:	02 c0       	rjmp	.+4      	; 0xb630 <f_mount+0x70>
    b62c:	80 e0       	ldi	r24, 0x00	; 0
    b62e:	90 e0       	ldi	r25, 0x00	; 0
    b630:	26 96       	adiw	r28, 0x06	; 6
    b632:	e3 e0       	ldi	r30, 0x03	; 3
    b634:	0c 94 b1 e4 	jmp	0x1c962	; 0x1c962 <__epilogue_restores__+0x1e>

0000b638 <f_open>:
    b638:	a6 e3       	ldi	r26, 0x36	; 54
    b63a:	b0 e0       	ldi	r27, 0x00	; 0
    b63c:	e2 e2       	ldi	r30, 0x22	; 34
    b63e:	fb e5       	ldi	r31, 0x5B	; 91
    b640:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
    b644:	7a ab       	std	Y+50, r23	; 0x32
    b646:	69 ab       	std	Y+49, r22	; 0x31
    b648:	00 97       	sbiw	r24, 0x00	; 0
    b64a:	09 f4       	brne	.+2      	; 0xb64e <f_open+0x16>
    b64c:	93 c1       	rjmp	.+806    	; 0xb974 <f_open+0x33c>
    b64e:	74 2e       	mov	r7, r20
    b650:	7c 01       	movw	r14, r24
    b652:	24 2f       	mov	r18, r20
    b654:	2f 73       	andi	r18, 0x3F	; 63
    b656:	32 2e       	mov	r3, r18
    b658:	42 2f       	mov	r20, r18
    b65a:	be 01       	movw	r22, r28
    b65c:	61 5d       	subi	r22, 0xD1	; 209
    b65e:	7f 4f       	sbci	r23, 0xFF	; 255
    b660:	ce 01       	movw	r24, r28
    b662:	c1 96       	adiw	r24, 0x31	; 49
    b664:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
    b668:	00 97       	sbiw	r24, 0x00	; 0
    b66a:	09 f0       	breq	.+2      	; 0xb66e <f_open+0x36>
    b66c:	7d c1       	rjmp	.+762    	; 0xb968 <f_open+0x330>
    b66e:	8f a5       	ldd	r24, Y+47	; 0x2f
    b670:	98 a9       	ldd	r25, Y+48	; 0x30
    b672:	9a 83       	std	Y+2, r25	; 0x02
    b674:	89 83       	std	Y+1, r24	; 0x01
    b676:	80 e0       	ldi	r24, 0x00	; 0
    b678:	92 e0       	ldi	r25, 0x02	; 2
    b67a:	0e 94 72 6a 	call	0xd4e4	; 0xd4e4 <ff_memalloc>
    b67e:	5c 01       	movw	r10, r24
    b680:	00 97       	sbiw	r24, 0x00	; 0
    b682:	09 f4       	brne	.+2      	; 0xb686 <f_open+0x4e>
    b684:	79 c1       	rjmp	.+754    	; 0xb978 <f_open+0x340>
    b686:	ef a5       	ldd	r30, Y+47	; 0x2f
    b688:	f8 a9       	ldd	r31, Y+48	; 0x30
    b68a:	94 87       	std	Z+12, r25	; 0x0c
    b68c:	83 87       	std	Z+11, r24	; 0x0b
    b68e:	69 a9       	ldd	r22, Y+49	; 0x31
    b690:	7a a9       	ldd	r23, Y+50	; 0x32
    b692:	ce 01       	movw	r24, r28
    b694:	01 96       	adiw	r24, 0x01	; 1
    b696:	63 dd       	rcall	.-1338   	; 0xb15e <follow_path>
    b698:	8c 01       	movw	r16, r24
    b69a:	89 2b       	or	r24, r25
    b69c:	29 f4       	brne	.+10     	; 0xb6a8 <f_open+0x70>
    b69e:	88 a5       	ldd	r24, Y+40	; 0x28
    b6a0:	87 ff       	sbrs	r24, 7
    b6a2:	02 c0       	rjmp	.+4      	; 0xb6a8 <f_open+0x70>
    b6a4:	06 e0       	ldi	r16, 0x06	; 6
    b6a6:	10 e0       	ldi	r17, 0x00	; 0
    b6a8:	87 2d       	mov	r24, r7
    b6aa:	8c 71       	andi	r24, 0x1C	; 28
    b6ac:	09 f4       	brne	.+2      	; 0xb6b0 <f_open+0x78>
    b6ae:	75 c0       	rjmp	.+234    	; 0xb79a <f_open+0x162>
    b6b0:	01 15       	cp	r16, r1
    b6b2:	11 05       	cpc	r17, r1
    b6b4:	79 f0       	breq	.+30     	; 0xb6d4 <f_open+0x9c>
    b6b6:	04 30       	cpi	r16, 0x04	; 4
    b6b8:	11 05       	cpc	r17, r1
    b6ba:	09 f0       	breq	.+2      	; 0xb6be <f_open+0x86>
    b6bc:	6d c1       	rjmp	.+730    	; 0xb998 <f_open+0x360>
    b6be:	ce 01       	movw	r24, r28
    b6c0:	01 96       	adiw	r24, 0x01	; 1
    b6c2:	bf db       	rcall	.-2178   	; 0xae42 <dir_register>
    b6c4:	8c 01       	movw	r16, r24
    b6c6:	89 2b       	or	r24, r25
    b6c8:	09 f0       	breq	.+2      	; 0xb6cc <f_open+0x94>
    b6ca:	66 c1       	rjmp	.+716    	; 0xb998 <f_open+0x360>
    b6cc:	33 2d       	mov	r19, r3
    b6ce:	38 60       	ori	r19, 0x08	; 8
    b6d0:	33 2e       	mov	r3, r19
    b6d2:	06 c0       	rjmp	.+12     	; 0xb6e0 <f_open+0xa8>
    b6d4:	8d 81       	ldd	r24, Y+5	; 0x05
    b6d6:	81 71       	andi	r24, 0x11	; 17
    b6d8:	09 f0       	breq	.+2      	; 0xb6dc <f_open+0xa4>
    b6da:	5c c1       	rjmp	.+696    	; 0xb994 <f_open+0x35c>
    b6dc:	72 fc       	sbrc	r7, 2
    b6de:	51 c1       	rjmp	.+674    	; 0xb982 <f_open+0x34a>
    b6e0:	33 fe       	sbrs	r3, 3
    b6e2:	6b c0       	rjmp	.+214    	; 0xb7ba <f_open+0x182>
    b6e4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b6e6:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b6e8:	ef a5       	ldd	r30, Y+47	; 0x2f
    b6ea:	f8 a9       	ldd	r31, Y+48	; 0x30
    b6ec:	b8 01       	movw	r22, r16
    b6ee:	80 81       	ld	r24, Z
    b6f0:	0e 94 56 4b 	call	0x96ac	; 0x96ac <ld_clust.isra.4>
    b6f4:	2b 01       	movw	r4, r22
    b6f6:	3c 01       	movw	r6, r24
    b6f8:	0e 94 6d 71 	call	0xe2da	; 0xe2da <get_fattime>
    b6fc:	ab 01       	movw	r20, r22
    b6fe:	bc 01       	movw	r22, r24
    b700:	c8 01       	movw	r24, r16
    b702:	0e 96       	adiw	r24, 0x0e	; 14
    b704:	0e 94 1f 48 	call	0x903e	; 0x903e <st_dword>
    b708:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b70a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b70c:	80 e2       	ldi	r24, 0x20	; 32
    b70e:	83 87       	std	Z+11, r24	; 0x0b
    b710:	af a5       	ldd	r26, Y+47	; 0x2f
    b712:	b8 a9       	ldd	r27, Y+48	; 0x30
    b714:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b716:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b718:	12 8e       	std	Z+26, r1	; 0x1a
    b71a:	13 8e       	std	Z+27, r1	; 0x1b
    b71c:	8c 91       	ld	r24, X
    b71e:	83 30       	cpi	r24, 0x03	; 3
    b720:	11 f4       	brne	.+4      	; 0xb726 <f_open+0xee>
    b722:	14 8a       	std	Z+20, r1	; 0x14
    b724:	15 8a       	std	Z+21, r1	; 0x15
    b726:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b728:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b72a:	14 8e       	std	Z+28, r1	; 0x1c
    b72c:	15 8e       	std	Z+29, r1	; 0x1d
    b72e:	16 8e       	std	Z+30, r1	; 0x1e
    b730:	17 8e       	std	Z+31, r1	; 0x1f
    b732:	81 e0       	ldi	r24, 0x01	; 1
    b734:	fd 01       	movw	r30, r26
    b736:	83 83       	std	Z+3, r24	; 0x03
    b738:	41 14       	cp	r4, r1
    b73a:	51 04       	cpc	r5, r1
    b73c:	61 04       	cpc	r6, r1
    b73e:	71 04       	cpc	r7, r1
    b740:	c9 f1       	breq	.+114    	; 0xb7b4 <f_open+0x17c>
    b742:	21 a9       	ldd	r18, Z+49	; 0x31
    b744:	32 a9       	ldd	r19, Z+50	; 0x32
    b746:	43 a9       	ldd	r20, Z+51	; 0x33
    b748:	54 a9       	ldd	r21, Z+52	; 0x34
    b74a:	2b ab       	std	Y+51, r18	; 0x33
    b74c:	3c ab       	std	Y+52, r19	; 0x34
    b74e:	4d ab       	std	Y+53, r20	; 0x35
    b750:	5e ab       	std	Y+54, r21	; 0x36
    b752:	00 e0       	ldi	r16, 0x00	; 0
    b754:	10 e0       	ldi	r17, 0x00	; 0
    b756:	98 01       	movw	r18, r16
    b758:	b3 01       	movw	r22, r6
    b75a:	a2 01       	movw	r20, r4
    b75c:	ce 01       	movw	r24, r28
    b75e:	01 96       	adiw	r24, 0x01	; 1
    b760:	0e 94 50 53 	call	0xa6a0	; 0xa6a0 <remove_chain>
    b764:	8c 01       	movw	r16, r24
    b766:	89 2b       	or	r24, r25
    b768:	09 f0       	breq	.+2      	; 0xb76c <f_open+0x134>
    b76a:	16 c1       	rjmp	.+556    	; 0xb998 <f_open+0x360>
    b76c:	4b a9       	ldd	r20, Y+51	; 0x33
    b76e:	5c a9       	ldd	r21, Y+52	; 0x34
    b770:	6d a9       	ldd	r22, Y+53	; 0x35
    b772:	7e a9       	ldd	r23, Y+54	; 0x36
    b774:	8f a5       	ldd	r24, Y+47	; 0x2f
    b776:	98 a9       	ldd	r25, Y+48	; 0x30
    b778:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <move_window>
    b77c:	8c 01       	movw	r16, r24
    b77e:	ef a5       	ldd	r30, Y+47	; 0x2f
    b780:	f8 a9       	ldd	r31, Y+48	; 0x30
    b782:	21 e0       	ldi	r18, 0x01	; 1
    b784:	42 1a       	sub	r4, r18
    b786:	51 08       	sbc	r5, r1
    b788:	61 08       	sbc	r6, r1
    b78a:	71 08       	sbc	r7, r1
    b78c:	45 86       	std	Z+13, r4	; 0x0d
    b78e:	56 86       	std	Z+14, r5	; 0x0e
    b790:	67 86       	std	Z+15, r6	; 0x0f
    b792:	70 8a       	std	Z+16, r7	; 0x10
    b794:	89 2b       	or	r24, r25
    b796:	61 f0       	breq	.+24     	; 0xb7b0 <f_open+0x178>
    b798:	ff c0       	rjmp	.+510    	; 0xb998 <f_open+0x360>
    b79a:	01 15       	cp	r16, r1
    b79c:	11 05       	cpc	r17, r1
    b79e:	09 f0       	breq	.+2      	; 0xb7a2 <f_open+0x16a>
    b7a0:	fb c0       	rjmp	.+502    	; 0xb998 <f_open+0x360>
    b7a2:	8d 81       	ldd	r24, Y+5	; 0x05
    b7a4:	84 fd       	sbrc	r24, 4
    b7a6:	f3 c0       	rjmp	.+486    	; 0xb98e <f_open+0x356>
    b7a8:	71 fe       	sbrs	r7, 1
    b7aa:	02 c0       	rjmp	.+4      	; 0xb7b0 <f_open+0x178>
    b7ac:	80 fd       	sbrc	r24, 0
    b7ae:	f2 c0       	rjmp	.+484    	; 0xb994 <f_open+0x35c>
    b7b0:	33 fe       	sbrs	r3, 3
    b7b2:	03 c0       	rjmp	.+6      	; 0xb7ba <f_open+0x182>
    b7b4:	33 2d       	mov	r19, r3
    b7b6:	30 64       	ori	r19, 0x40	; 64
    b7b8:	33 2e       	mov	r3, r19
    b7ba:	0f a5       	ldd	r16, Y+47	; 0x2f
    b7bc:	18 a9       	ldd	r17, Y+48	; 0x30
    b7be:	f8 01       	movw	r30, r16
    b7c0:	81 a9       	ldd	r24, Z+49	; 0x31
    b7c2:	92 a9       	ldd	r25, Z+50	; 0x32
    b7c4:	a3 a9       	ldd	r26, Z+51	; 0x33
    b7c6:	b4 a9       	ldd	r27, Z+52	; 0x34
    b7c8:	f7 01       	movw	r30, r14
    b7ca:	84 8f       	std	Z+28, r24	; 0x1c
    b7cc:	95 8f       	std	Z+29, r25	; 0x1d
    b7ce:	a6 8f       	std	Z+30, r26	; 0x1e
    b7d0:	b7 8f       	std	Z+31, r27	; 0x1f
    b7d2:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b7d4:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b7d6:	71 a2       	std	Z+33, r7	; 0x21
    b7d8:	60 a2       	std	Z+32, r6	; 0x20
    b7da:	b3 01       	movw	r22, r6
    b7dc:	f8 01       	movw	r30, r16
    b7de:	80 81       	ld	r24, Z
    b7e0:	0e 94 56 4b 	call	0x96ac	; 0x96ac <ld_clust.isra.4>
    b7e4:	f7 01       	movw	r30, r14
    b7e6:	66 83       	std	Z+6, r22	; 0x06
    b7e8:	77 83       	std	Z+7, r23	; 0x07
    b7ea:	80 87       	std	Z+8, r24	; 0x08
    b7ec:	91 87       	std	Z+9, r25	; 0x09
    b7ee:	c3 01       	movw	r24, r6
    b7f0:	4c 96       	adiw	r24, 0x1c	; 28
    b7f2:	0e 94 0a 48 	call	0x9014	; 0x9014 <ld_dword>
    b7f6:	f7 01       	movw	r30, r14
    b7f8:	62 87       	std	Z+10, r22	; 0x0a
    b7fa:	73 87       	std	Z+11, r23	; 0x0b
    b7fc:	84 87       	std	Z+12, r24	; 0x0c
    b7fe:	95 87       	std	Z+13, r25	; 0x0d
    b800:	13 a2       	std	Z+35, r1	; 0x23
    b802:	12 a2       	std	Z+34, r1	; 0x22
    b804:	11 83       	std	Z+1, r17	; 0x01
    b806:	00 83       	st	Z, r16
    b808:	f8 01       	movw	r30, r16
    b80a:	85 81       	ldd	r24, Z+5	; 0x05
    b80c:	96 81       	ldd	r25, Z+6	; 0x06
    b80e:	f7 01       	movw	r30, r14
    b810:	93 83       	std	Z+3, r25	; 0x03
    b812:	82 83       	std	Z+2, r24	; 0x02
    b814:	36 86       	std	Z+14, r3	; 0x0e
    b816:	17 86       	std	Z+15, r1	; 0x0f
    b818:	10 8e       	std	Z+24, r1	; 0x18
    b81a:	11 8e       	std	Z+25, r1	; 0x19
    b81c:	12 8e       	std	Z+26, r1	; 0x1a
    b81e:	13 8e       	std	Z+27, r1	; 0x1b
    b820:	10 8a       	std	Z+16, r1	; 0x10
    b822:	11 8a       	std	Z+17, r1	; 0x11
    b824:	12 8a       	std	Z+18, r1	; 0x12
    b826:	13 8a       	std	Z+19, r1	; 0x13
    b828:	67 01       	movw	r12, r14
    b82a:	f4 e2       	ldi	r31, 0x24	; 36
    b82c:	cf 0e       	add	r12, r31
    b82e:	d1 1c       	adc	r13, r1
    b830:	40 e0       	ldi	r20, 0x00	; 0
    b832:	52 e0       	ldi	r21, 0x02	; 2
    b834:	60 e0       	ldi	r22, 0x00	; 0
    b836:	70 e0       	ldi	r23, 0x00	; 0
    b838:	c6 01       	movw	r24, r12
    b83a:	0e 94 25 48 	call	0x904a	; 0x904a <mem_set>
    b83e:	35 fc       	sbrc	r3, 5
    b840:	03 c0       	rjmp	.+6      	; 0xb848 <f_open+0x210>
    b842:	00 e0       	ldi	r16, 0x00	; 0
    b844:	10 e0       	ldi	r17, 0x00	; 0
    b846:	89 c0       	rjmp	.+274    	; 0xb95a <f_open+0x322>
    b848:	f7 01       	movw	r30, r14
    b84a:	62 84       	ldd	r6, Z+10	; 0x0a
    b84c:	73 84       	ldd	r7, Z+11	; 0x0b
    b84e:	84 84       	ldd	r8, Z+12	; 0x0c
    b850:	95 84       	ldd	r9, Z+13	; 0x0d
    b852:	61 14       	cp	r6, r1
    b854:	71 04       	cpc	r7, r1
    b856:	81 04       	cpc	r8, r1
    b858:	91 04       	cpc	r9, r1
    b85a:	99 f3       	breq	.-26     	; 0xb842 <f_open+0x20a>
    b85c:	60 8a       	std	Z+16, r6	; 0x10
    b85e:	71 8a       	std	Z+17, r7	; 0x11
    b860:	82 8a       	std	Z+18, r8	; 0x12
    b862:	93 8a       	std	Z+19, r9	; 0x13
    b864:	ef a5       	ldd	r30, Y+47	; 0x2f
    b866:	f8 a9       	ldd	r31, Y+48	; 0x30
    b868:	21 84       	ldd	r2, Z+9	; 0x09
    b86a:	32 84       	ldd	r3, Z+10	; 0x0a
    b86c:	c1 01       	movw	r24, r2
    b86e:	a0 e0       	ldi	r26, 0x00	; 0
    b870:	b0 e0       	ldi	r27, 0x00	; 0
    b872:	1c 01       	movw	r2, r24
    b874:	2d 01       	movw	r4, r26
    b876:	59 e0       	ldi	r21, 0x09	; 9
    b878:	22 0c       	add	r2, r2
    b87a:	33 1c       	adc	r3, r3
    b87c:	44 1c       	adc	r4, r4
    b87e:	55 1c       	adc	r5, r5
    b880:	5a 95       	dec	r21
    b882:	d1 f7       	brne	.-12     	; 0xb878 <f_open+0x240>
    b884:	f7 01       	movw	r30, r14
    b886:	46 81       	ldd	r20, Z+6	; 0x06
    b888:	57 81       	ldd	r21, Z+7	; 0x07
    b88a:	60 85       	ldd	r22, Z+8	; 0x08
    b88c:	71 85       	ldd	r23, Z+9	; 0x09
    b88e:	26 14       	cp	r2, r6
    b890:	37 04       	cpc	r3, r7
    b892:	48 04       	cpc	r4, r8
    b894:	59 04       	cpc	r5, r9
    b896:	f0 f4       	brcc	.+60     	; 0xb8d4 <f_open+0x29c>
    b898:	f7 01       	movw	r30, r14
    b89a:	80 81       	ld	r24, Z
    b89c:	91 81       	ldd	r25, Z+1	; 0x01
    b89e:	0e 94 b5 50 	call	0xa16a	; 0xa16a <get_fat.isra.10>
    b8a2:	ab 01       	movw	r20, r22
    b8a4:	bc 01       	movw	r22, r24
    b8a6:	d4 01       	movw	r26, r8
    b8a8:	c3 01       	movw	r24, r6
    b8aa:	82 19       	sub	r24, r2
    b8ac:	93 09       	sbc	r25, r3
    b8ae:	a4 09       	sbc	r26, r4
    b8b0:	b5 09       	sbc	r27, r5
    b8b2:	3c 01       	movw	r6, r24
    b8b4:	4d 01       	movw	r8, r26
    b8b6:	42 30       	cpi	r20, 0x02	; 2
    b8b8:	51 05       	cpc	r21, r1
    b8ba:	61 05       	cpc	r22, r1
    b8bc:	71 05       	cpc	r23, r1
    b8be:	08 f4       	brcc	.+2      	; 0xb8c2 <f_open+0x28a>
    b8c0:	63 c0       	rjmp	.+198    	; 0xb988 <f_open+0x350>
    b8c2:	4f 3f       	cpi	r20, 0xFF	; 255
    b8c4:	ff ef       	ldi	r31, 0xFF	; 255
    b8c6:	5f 07       	cpc	r21, r31
    b8c8:	6f 07       	cpc	r22, r31
    b8ca:	7f 07       	cpc	r23, r31
    b8cc:	01 f7       	brne	.-64     	; 0xb88e <f_open+0x256>
    b8ce:	01 e0       	ldi	r16, 0x01	; 1
    b8d0:	10 e0       	ldi	r17, 0x00	; 0
    b8d2:	02 c0       	rjmp	.+4      	; 0xb8d8 <f_open+0x2a0>
    b8d4:	00 e0       	ldi	r16, 0x00	; 0
    b8d6:	10 e0       	ldi	r17, 0x00	; 0
    b8d8:	f7 01       	movw	r30, r14
    b8da:	44 8b       	std	Z+20, r20	; 0x14
    b8dc:	55 8b       	std	Z+21, r21	; 0x15
    b8de:	66 8b       	std	Z+22, r22	; 0x16
    b8e0:	77 8b       	std	Z+23, r23	; 0x17
    b8e2:	01 15       	cp	r16, r1
    b8e4:	11 05       	cpc	r17, r1
    b8e6:	c9 f5       	brne	.+114    	; 0xb95a <f_open+0x322>
    b8e8:	d4 01       	movw	r26, r8
    b8ea:	c3 01       	movw	r24, r6
    b8ec:	91 70       	andi	r25, 0x01	; 1
    b8ee:	aa 27       	eor	r26, r26
    b8f0:	bb 27       	eor	r27, r27
    b8f2:	89 2b       	or	r24, r25
    b8f4:	8a 2b       	or	r24, r26
    b8f6:	8b 2b       	or	r24, r27
    b8f8:	09 f4       	brne	.+2      	; 0xb8fc <f_open+0x2c4>
    b8fa:	a3 cf       	rjmp	.-186    	; 0xb842 <f_open+0x20a>
    b8fc:	4f a4       	ldd	r4, Y+47	; 0x2f
    b8fe:	58 a8       	ldd	r5, Y+48	; 0x30
    b900:	c2 01       	movw	r24, r4
    b902:	0e 94 c3 48 	call	0x9186	; 0x9186 <clst2sect>
    b906:	61 15       	cp	r22, r1
    b908:	71 05       	cpc	r23, r1
    b90a:	81 05       	cpc	r24, r1
    b90c:	91 05       	cpc	r25, r1
    b90e:	19 f1       	breq	.+70     	; 0xb956 <f_open+0x31e>
    b910:	94 01       	movw	r18, r8
    b912:	83 01       	movw	r16, r6
    b914:	49 e0       	ldi	r20, 0x09	; 9
    b916:	36 95       	lsr	r19
    b918:	27 95       	ror	r18
    b91a:	17 95       	ror	r17
    b91c:	07 95       	ror	r16
    b91e:	4a 95       	dec	r20
    b920:	d1 f7       	brne	.-12     	; 0xb916 <f_open+0x2de>
    b922:	a9 01       	movw	r20, r18
    b924:	98 01       	movw	r18, r16
    b926:	26 0f       	add	r18, r22
    b928:	37 1f       	adc	r19, r23
    b92a:	48 1f       	adc	r20, r24
    b92c:	59 1f       	adc	r21, r25
    b92e:	f7 01       	movw	r30, r14
    b930:	20 8f       	std	Z+24, r18	; 0x18
    b932:	31 8f       	std	Z+25, r19	; 0x19
    b934:	42 8f       	std	Z+26, r20	; 0x1a
    b936:	53 8f       	std	Z+27, r21	; 0x1b
    b938:	01 e0       	ldi	r16, 0x01	; 1
    b93a:	10 e0       	ldi	r17, 0x00	; 0
    b93c:	b6 01       	movw	r22, r12
    b93e:	f2 01       	movw	r30, r4
    b940:	81 81       	ldd	r24, Z+1	; 0x01
    b942:	0e 94 2e 6b 	call	0xd65c	; 0xd65c <disk_read>
    b946:	31 e0       	ldi	r19, 0x01	; 1
    b948:	20 e0       	ldi	r18, 0x00	; 0
    b94a:	89 2b       	or	r24, r25
    b94c:	09 f4       	brne	.+2      	; 0xb950 <f_open+0x318>
    b94e:	30 e0       	ldi	r19, 0x00	; 0
    b950:	03 2f       	mov	r16, r19
    b952:	12 2f       	mov	r17, r18
    b954:	02 c0       	rjmp	.+4      	; 0xb95a <f_open+0x322>
    b956:	02 e0       	ldi	r16, 0x02	; 2
    b958:	10 e0       	ldi	r17, 0x00	; 0
    b95a:	c5 01       	movw	r24, r10
    b95c:	0e 94 75 6a 	call	0xd4ea	; 0xd4ea <ff_memfree>
    b960:	01 15       	cp	r16, r1
    b962:	11 05       	cpc	r17, r1
    b964:	59 f0       	breq	.+22     	; 0xb97c <f_open+0x344>
    b966:	01 c0       	rjmp	.+2      	; 0xb96a <f_open+0x332>
    b968:	8c 01       	movw	r16, r24
    b96a:	f7 01       	movw	r30, r14
    b96c:	11 82       	std	Z+1, r1	; 0x01
    b96e:	10 82       	st	Z, r1
    b970:	c8 01       	movw	r24, r16
    b972:	16 c0       	rjmp	.+44     	; 0xb9a0 <f_open+0x368>
    b974:	89 e0       	ldi	r24, 0x09	; 9
    b976:	03 c0       	rjmp	.+6      	; 0xb97e <f_open+0x346>
    b978:	81 e1       	ldi	r24, 0x11	; 17
    b97a:	01 c0       	rjmp	.+2      	; 0xb97e <f_open+0x346>
    b97c:	80 e0       	ldi	r24, 0x00	; 0
    b97e:	90 e0       	ldi	r25, 0x00	; 0
    b980:	0f c0       	rjmp	.+30     	; 0xb9a0 <f_open+0x368>
    b982:	08 e0       	ldi	r16, 0x08	; 8
    b984:	10 e0       	ldi	r17, 0x00	; 0
    b986:	08 c0       	rjmp	.+16     	; 0xb998 <f_open+0x360>
    b988:	02 e0       	ldi	r16, 0x02	; 2
    b98a:	10 e0       	ldi	r17, 0x00	; 0
    b98c:	a5 cf       	rjmp	.-182    	; 0xb8d8 <f_open+0x2a0>
    b98e:	04 e0       	ldi	r16, 0x04	; 4
    b990:	10 e0       	ldi	r17, 0x00	; 0
    b992:	02 c0       	rjmp	.+4      	; 0xb998 <f_open+0x360>
    b994:	07 e0       	ldi	r16, 0x07	; 7
    b996:	10 e0       	ldi	r17, 0x00	; 0
    b998:	c5 01       	movw	r24, r10
    b99a:	0e 94 75 6a 	call	0xd4ea	; 0xd4ea <ff_memfree>
    b99e:	e5 cf       	rjmp	.-54     	; 0xb96a <f_open+0x332>
    b9a0:	e6 96       	adiw	r28, 0x36	; 54
    b9a2:	e2 e1       	ldi	r30, 0x12	; 18
    b9a4:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

0000b9a8 <f_read>:
    b9a8:	a6 e0       	ldi	r26, 0x06	; 6
    b9aa:	b0 e0       	ldi	r27, 0x00	; 0
    b9ac:	ea ed       	ldi	r30, 0xDA	; 218
    b9ae:	fc e5       	ldi	r31, 0x5C	; 92
    b9b0:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
    b9b4:	7c 01       	movw	r14, r24
    b9b6:	4b 01       	movw	r8, r22
    b9b8:	5a 01       	movw	r10, r20
    b9ba:	3e 83       	std	Y+6, r19	; 0x06
    b9bc:	2d 83       	std	Y+5, r18	; 0x05
    b9be:	f9 01       	movw	r30, r18
    b9c0:	11 82       	std	Z+1, r1	; 0x01
    b9c2:	10 82       	st	Z, r1
    b9c4:	be 01       	movw	r22, r28
    b9c6:	6f 5f       	subi	r22, 0xFF	; 255
    b9c8:	7f 4f       	sbci	r23, 0xFF	; 255
    b9ca:	0e 94 62 49 	call	0x92c4	; 0x92c4 <validate>
    b9ce:	00 97       	sbiw	r24, 0x00	; 0
    b9d0:	09 f0       	breq	.+2      	; 0xb9d4 <f_read+0x2c>
    b9d2:	31 c1       	rjmp	.+610    	; 0xbc36 <f_read+0x28e>
    b9d4:	f7 01       	movw	r30, r14
    b9d6:	87 85       	ldd	r24, Z+15	; 0x0f
    b9d8:	90 e0       	ldi	r25, 0x00	; 0
    b9da:	00 97       	sbiw	r24, 0x00	; 0
    b9dc:	09 f0       	breq	.+2      	; 0xb9e0 <f_read+0x38>
    b9de:	2b c1       	rjmp	.+598    	; 0xbc36 <f_read+0x28e>
    b9e0:	86 85       	ldd	r24, Z+14	; 0x0e
    b9e2:	80 ff       	sbrs	r24, 0
    b9e4:	26 c1       	rjmp	.+588    	; 0xbc32 <f_read+0x28a>
    b9e6:	82 85       	ldd	r24, Z+10	; 0x0a
    b9e8:	93 85       	ldd	r25, Z+11	; 0x0b
    b9ea:	a4 85       	ldd	r26, Z+12	; 0x0c
    b9ec:	b5 85       	ldd	r27, Z+13	; 0x0d
    b9ee:	40 89       	ldd	r20, Z+16	; 0x10
    b9f0:	51 89       	ldd	r21, Z+17	; 0x11
    b9f2:	62 89       	ldd	r22, Z+18	; 0x12
    b9f4:	73 89       	ldd	r23, Z+19	; 0x13
    b9f6:	84 1b       	sub	r24, r20
    b9f8:	95 0b       	sbc	r25, r21
    b9fa:	a6 0b       	sbc	r26, r22
    b9fc:	b7 0b       	sbc	r27, r23
    b9fe:	a5 01       	movw	r20, r10
    ba00:	60 e0       	ldi	r22, 0x00	; 0
    ba02:	70 e0       	ldi	r23, 0x00	; 0
    ba04:	84 17       	cp	r24, r20
    ba06:	95 07       	cpc	r25, r21
    ba08:	a6 07       	cpc	r26, r22
    ba0a:	b7 07       	cpc	r27, r23
    ba0c:	08 f4       	brcc	.+2      	; 0xba10 <f_read+0x68>
    ba0e:	5c 01       	movw	r10, r24
    ba10:	17 01       	movw	r2, r14
    ba12:	f4 e2       	ldi	r31, 0x24	; 36
    ba14:	2f 0e       	add	r2, r31
    ba16:	31 1c       	adc	r3, r1
    ba18:	a1 14       	cp	r10, r1
    ba1a:	b1 04       	cpc	r11, r1
    ba1c:	09 f4       	brne	.+2      	; 0xba20 <f_read+0x78>
    ba1e:	07 c1       	rjmp	.+526    	; 0xbc2e <f_read+0x286>
    ba20:	f7 01       	movw	r30, r14
    ba22:	40 89       	ldd	r20, Z+16	; 0x10
    ba24:	51 89       	ldd	r21, Z+17	; 0x11
    ba26:	62 89       	ldd	r22, Z+18	; 0x12
    ba28:	73 89       	ldd	r23, Z+19	; 0x13
    ba2a:	db 01       	movw	r26, r22
    ba2c:	ca 01       	movw	r24, r20
    ba2e:	91 70       	andi	r25, 0x01	; 1
    ba30:	aa 27       	eor	r26, r26
    ba32:	bb 27       	eor	r27, r27
    ba34:	89 2b       	or	r24, r25
    ba36:	8a 2b       	or	r24, r26
    ba38:	8b 2b       	or	r24, r27
    ba3a:	09 f0       	breq	.+2      	; 0xba3e <f_read+0x96>
    ba3c:	cb c0       	rjmp	.+406    	; 0xbbd4 <f_read+0x22c>
    ba3e:	e9 81       	ldd	r30, Y+1	; 0x01
    ba40:	fa 81       	ldd	r31, Y+2	; 0x02
    ba42:	01 85       	ldd	r16, Z+9	; 0x09
    ba44:	12 85       	ldd	r17, Z+10	; 0x0a
    ba46:	01 50       	subi	r16, 0x01	; 1
    ba48:	11 09       	sbc	r17, r1
    ba4a:	db 01       	movw	r26, r22
    ba4c:	ca 01       	movw	r24, r20
    ba4e:	e9 e0       	ldi	r30, 0x09	; 9
    ba50:	b6 95       	lsr	r27
    ba52:	a7 95       	ror	r26
    ba54:	97 95       	ror	r25
    ba56:	87 95       	ror	r24
    ba58:	ea 95       	dec	r30
    ba5a:	d1 f7       	brne	.-12     	; 0xba50 <f_read+0xa8>
    ba5c:	08 23       	and	r16, r24
    ba5e:	19 23       	and	r17, r25
    ba60:	01 15       	cp	r16, r1
    ba62:	11 05       	cpc	r17, r1
    ba64:	91 f5       	brne	.+100    	; 0xbaca <f_read+0x122>
    ba66:	f7 01       	movw	r30, r14
    ba68:	41 15       	cp	r20, r1
    ba6a:	51 05       	cpc	r21, r1
    ba6c:	61 05       	cpc	r22, r1
    ba6e:	71 05       	cpc	r23, r1
    ba70:	29 f4       	brne	.+10     	; 0xba7c <f_read+0xd4>
    ba72:	66 81       	ldd	r22, Z+6	; 0x06
    ba74:	77 81       	ldd	r23, Z+7	; 0x07
    ba76:	80 85       	ldd	r24, Z+8	; 0x08
    ba78:	91 85       	ldd	r25, Z+9	; 0x09
    ba7a:	11 c0       	rjmp	.+34     	; 0xba9e <f_read+0xf6>
    ba7c:	82 a1       	ldd	r24, Z+34	; 0x22
    ba7e:	93 a1       	ldd	r25, Z+35	; 0x23
    ba80:	89 2b       	or	r24, r25
    ba82:	21 f0       	breq	.+8      	; 0xba8c <f_read+0xe4>
    ba84:	c7 01       	movw	r24, r14
    ba86:	0e 94 eb 48 	call	0x91d6	; 0x91d6 <clmt_clust>
    ba8a:	09 c0       	rjmp	.+18     	; 0xba9e <f_read+0xf6>
    ba8c:	f7 01       	movw	r30, r14
    ba8e:	44 89       	ldd	r20, Z+20	; 0x14
    ba90:	55 89       	ldd	r21, Z+21	; 0x15
    ba92:	66 89       	ldd	r22, Z+22	; 0x16
    ba94:	77 89       	ldd	r23, Z+23	; 0x17
    ba96:	80 81       	ld	r24, Z
    ba98:	91 81       	ldd	r25, Z+1	; 0x01
    ba9a:	0e 94 b5 50 	call	0xa16a	; 0xa16a <get_fat.isra.10>
    ba9e:	62 30       	cpi	r22, 0x02	; 2
    baa0:	71 05       	cpc	r23, r1
    baa2:	81 05       	cpc	r24, r1
    baa4:	91 05       	cpc	r25, r1
    baa6:	10 f4       	brcc	.+4      	; 0xbaac <f_read+0x104>
    baa8:	82 e0       	ldi	r24, 0x02	; 2
    baaa:	07 c0       	rjmp	.+14     	; 0xbaba <f_read+0x112>
    baac:	6f 3f       	cpi	r22, 0xFF	; 255
    baae:	ff ef       	ldi	r31, 0xFF	; 255
    bab0:	7f 07       	cpc	r23, r31
    bab2:	8f 07       	cpc	r24, r31
    bab4:	9f 07       	cpc	r25, r31
    bab6:	21 f4       	brne	.+8      	; 0xbac0 <f_read+0x118>
    bab8:	81 e0       	ldi	r24, 0x01	; 1
    baba:	f7 01       	movw	r30, r14
    babc:	87 87       	std	Z+15, r24	; 0x0f
    babe:	ba c0       	rjmp	.+372    	; 0xbc34 <f_read+0x28c>
    bac0:	f7 01       	movw	r30, r14
    bac2:	64 8b       	std	Z+20, r22	; 0x14
    bac4:	75 8b       	std	Z+21, r23	; 0x15
    bac6:	86 8b       	std	Z+22, r24	; 0x16
    bac8:	97 8b       	std	Z+23, r25	; 0x17
    baca:	89 81       	ldd	r24, Y+1	; 0x01
    bacc:	9a 81       	ldd	r25, Y+2	; 0x02
    bace:	9c 83       	std	Y+4, r25	; 0x04
    bad0:	8b 83       	std	Y+3, r24	; 0x03
    bad2:	f7 01       	movw	r30, r14
    bad4:	44 89       	ldd	r20, Z+20	; 0x14
    bad6:	55 89       	ldd	r21, Z+21	; 0x15
    bad8:	66 89       	ldd	r22, Z+22	; 0x16
    bada:	77 89       	ldd	r23, Z+23	; 0x17
    badc:	0e 94 c3 48 	call	0x9186	; 0x9186 <clst2sect>
    bae0:	61 15       	cp	r22, r1
    bae2:	71 05       	cpc	r23, r1
    bae4:	81 05       	cpc	r24, r1
    bae6:	91 05       	cpc	r25, r1
    bae8:	f9 f2       	breq	.-66     	; 0xbaa8 <f_read+0x100>
    baea:	2b 01       	movw	r4, r22
    baec:	3c 01       	movw	r6, r24
    baee:	40 0e       	add	r4, r16
    baf0:	51 1e       	adc	r5, r17
    baf2:	61 1c       	adc	r6, r1
    baf4:	71 1c       	adc	r7, r1
    baf6:	65 01       	movw	r12, r10
    baf8:	cd 2c       	mov	r12, r13
    bafa:	dd 24       	eor	r13, r13
    bafc:	c6 94       	lsr	r12
    bafe:	c1 14       	cp	r12, r1
    bb00:	d1 04       	cpc	r13, r1
    bb02:	d1 f1       	breq	.+116    	; 0xbb78 <f_read+0x1d0>
    bb04:	eb 81       	ldd	r30, Y+3	; 0x03
    bb06:	fc 81       	ldd	r31, Y+4	; 0x04
    bb08:	81 85       	ldd	r24, Z+9	; 0x09
    bb0a:	92 85       	ldd	r25, Z+10	; 0x0a
    bb0c:	98 01       	movw	r18, r16
    bb0e:	2c 0d       	add	r18, r12
    bb10:	3d 1d       	adc	r19, r13
    bb12:	82 17       	cp	r24, r18
    bb14:	93 07       	cpc	r25, r19
    bb16:	18 f4       	brcc	.+6      	; 0xbb1e <f_read+0x176>
    bb18:	6c 01       	movw	r12, r24
    bb1a:	c0 1a       	sub	r12, r16
    bb1c:	d1 0a       	sbc	r13, r17
    bb1e:	86 01       	movw	r16, r12
    bb20:	a3 01       	movw	r20, r6
    bb22:	92 01       	movw	r18, r4
    bb24:	b4 01       	movw	r22, r8
    bb26:	eb 81       	ldd	r30, Y+3	; 0x03
    bb28:	fc 81       	ldd	r31, Y+4	; 0x04
    bb2a:	81 81       	ldd	r24, Z+1	; 0x01
    bb2c:	0e 94 2e 6b 	call	0xd65c	; 0xd65c <disk_read>
    bb30:	89 2b       	or	r24, r25
    bb32:	11 f6       	brne	.-124    	; 0xbab8 <f_read+0x110>
    bb34:	f7 01       	movw	r30, r14
    bb36:	86 85       	ldd	r24, Z+14	; 0x0e
    bb38:	87 ff       	sbrs	r24, 7
    bb3a:	1a c0       	rjmp	.+52     	; 0xbb70 <f_read+0x1c8>
    bb3c:	80 8d       	ldd	r24, Z+24	; 0x18
    bb3e:	91 8d       	ldd	r25, Z+25	; 0x19
    bb40:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bb42:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bb44:	84 19       	sub	r24, r4
    bb46:	95 09       	sbc	r25, r5
    bb48:	a6 09       	sbc	r26, r6
    bb4a:	b7 09       	sbc	r27, r7
    bb4c:	a6 01       	movw	r20, r12
    bb4e:	60 e0       	ldi	r22, 0x00	; 0
    bb50:	70 e0       	ldi	r23, 0x00	; 0
    bb52:	84 17       	cp	r24, r20
    bb54:	95 07       	cpc	r25, r21
    bb56:	a6 07       	cpc	r26, r22
    bb58:	b7 07       	cpc	r27, r23
    bb5a:	50 f4       	brcc	.+20     	; 0xbb70 <f_read+0x1c8>
    bb5c:	98 2f       	mov	r25, r24
    bb5e:	88 27       	eor	r24, r24
    bb60:	99 0f       	add	r25, r25
    bb62:	40 e0       	ldi	r20, 0x00	; 0
    bb64:	52 e0       	ldi	r21, 0x02	; 2
    bb66:	b1 01       	movw	r22, r2
    bb68:	88 0d       	add	r24, r8
    bb6a:	99 1d       	adc	r25, r9
    bb6c:	0e 94 8e 49 	call	0x931c	; 0x931c <mem_cpy.part.0>
    bb70:	dc 2c       	mov	r13, r12
    bb72:	cc 24       	eor	r12, r12
    bb74:	dd 0c       	add	r13, r13
    bb76:	41 c0       	rjmp	.+130    	; 0xbbfa <f_read+0x252>
    bb78:	f7 01       	movw	r30, r14
    bb7a:	20 8d       	ldd	r18, Z+24	; 0x18
    bb7c:	31 8d       	ldd	r19, Z+25	; 0x19
    bb7e:	42 8d       	ldd	r20, Z+26	; 0x1a
    bb80:	53 8d       	ldd	r21, Z+27	; 0x1b
    bb82:	42 16       	cp	r4, r18
    bb84:	53 06       	cpc	r5, r19
    bb86:	64 06       	cpc	r6, r20
    bb88:	75 06       	cpc	r7, r21
    bb8a:	f9 f0       	breq	.+62     	; 0xbbca <f_read+0x222>
    bb8c:	86 85       	ldd	r24, Z+14	; 0x0e
    bb8e:	87 ff       	sbrs	r24, 7
    bb90:	0f c0       	rjmp	.+30     	; 0xbbb0 <f_read+0x208>
    bb92:	01 e0       	ldi	r16, 0x01	; 1
    bb94:	10 e0       	ldi	r17, 0x00	; 0
    bb96:	b1 01       	movw	r22, r2
    bb98:	eb 81       	ldd	r30, Y+3	; 0x03
    bb9a:	fc 81       	ldd	r31, Y+4	; 0x04
    bb9c:	81 81       	ldd	r24, Z+1	; 0x01
    bb9e:	0e 94 3e 6b 	call	0xd67c	; 0xd67c <disk_write>
    bba2:	89 2b       	or	r24, r25
    bba4:	09 f0       	breq	.+2      	; 0xbba8 <f_read+0x200>
    bba6:	88 cf       	rjmp	.-240    	; 0xbab8 <f_read+0x110>
    bba8:	f7 01       	movw	r30, r14
    bbaa:	86 85       	ldd	r24, Z+14	; 0x0e
    bbac:	8f 77       	andi	r24, 0x7F	; 127
    bbae:	86 87       	std	Z+14, r24	; 0x0e
    bbb0:	e9 81       	ldd	r30, Y+1	; 0x01
    bbb2:	fa 81       	ldd	r31, Y+2	; 0x02
    bbb4:	01 e0       	ldi	r16, 0x01	; 1
    bbb6:	10 e0       	ldi	r17, 0x00	; 0
    bbb8:	a3 01       	movw	r20, r6
    bbba:	92 01       	movw	r18, r4
    bbbc:	b1 01       	movw	r22, r2
    bbbe:	81 81       	ldd	r24, Z+1	; 0x01
    bbc0:	0e 94 2e 6b 	call	0xd65c	; 0xd65c <disk_read>
    bbc4:	89 2b       	or	r24, r25
    bbc6:	09 f0       	breq	.+2      	; 0xbbca <f_read+0x222>
    bbc8:	77 cf       	rjmp	.-274    	; 0xbab8 <f_read+0x110>
    bbca:	f7 01       	movw	r30, r14
    bbcc:	40 8e       	std	Z+24, r4	; 0x18
    bbce:	51 8e       	std	Z+25, r5	; 0x19
    bbd0:	62 8e       	std	Z+26, r6	; 0x1a
    bbd2:	73 8e       	std	Z+27, r7	; 0x1b
    bbd4:	f7 01       	movw	r30, r14
    bbd6:	60 89       	ldd	r22, Z+16	; 0x10
    bbd8:	71 89       	ldd	r23, Z+17	; 0x11
    bbda:	71 70       	andi	r23, 0x01	; 1
    bbdc:	80 e0       	ldi	r24, 0x00	; 0
    bbde:	92 e0       	ldi	r25, 0x02	; 2
    bbe0:	86 1b       	sub	r24, r22
    bbe2:	97 0b       	sbc	r25, r23
    bbe4:	65 01       	movw	r12, r10
    bbe6:	8a 15       	cp	r24, r10
    bbe8:	9b 05       	cpc	r25, r11
    bbea:	08 f4       	brcc	.+2      	; 0xbbee <f_read+0x246>
    bbec:	6c 01       	movw	r12, r24
    bbee:	62 0d       	add	r22, r2
    bbf0:	73 1d       	adc	r23, r3
    bbf2:	a6 01       	movw	r20, r12
    bbf4:	c4 01       	movw	r24, r8
    bbf6:	0e 94 8e 49 	call	0x931c	; 0x931c <mem_cpy.part.0>
    bbfa:	ac 18       	sub	r10, r12
    bbfc:	bd 08       	sbc	r11, r13
    bbfe:	ed 81       	ldd	r30, Y+5	; 0x05
    bc00:	fe 81       	ldd	r31, Y+6	; 0x06
    bc02:	80 81       	ld	r24, Z
    bc04:	91 81       	ldd	r25, Z+1	; 0x01
    bc06:	8c 0d       	add	r24, r12
    bc08:	9d 1d       	adc	r25, r13
    bc0a:	91 83       	std	Z+1, r25	; 0x01
    bc0c:	80 83       	st	Z, r24
    bc0e:	8c 0c       	add	r8, r12
    bc10:	9d 1c       	adc	r9, r13
    bc12:	f7 01       	movw	r30, r14
    bc14:	80 89       	ldd	r24, Z+16	; 0x10
    bc16:	91 89       	ldd	r25, Z+17	; 0x11
    bc18:	a2 89       	ldd	r26, Z+18	; 0x12
    bc1a:	b3 89       	ldd	r27, Z+19	; 0x13
    bc1c:	8c 0d       	add	r24, r12
    bc1e:	9d 1d       	adc	r25, r13
    bc20:	a1 1d       	adc	r26, r1
    bc22:	b1 1d       	adc	r27, r1
    bc24:	80 8b       	std	Z+16, r24	; 0x10
    bc26:	91 8b       	std	Z+17, r25	; 0x11
    bc28:	a2 8b       	std	Z+18, r26	; 0x12
    bc2a:	b3 8b       	std	Z+19, r27	; 0x13
    bc2c:	f5 ce       	rjmp	.-534    	; 0xba18 <f_read+0x70>
    bc2e:	80 e0       	ldi	r24, 0x00	; 0
    bc30:	01 c0       	rjmp	.+2      	; 0xbc34 <f_read+0x28c>
    bc32:	87 e0       	ldi	r24, 0x07	; 7
    bc34:	90 e0       	ldi	r25, 0x00	; 0
    bc36:	26 96       	adiw	r28, 0x06	; 6
    bc38:	e2 e1       	ldi	r30, 0x12	; 18
    bc3a:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

0000bc3e <f_write>:
    bc3e:	a8 e0       	ldi	r26, 0x08	; 8
    bc40:	b0 e0       	ldi	r27, 0x00	; 0
    bc42:	e5 e2       	ldi	r30, 0x25	; 37
    bc44:	fe e5       	ldi	r31, 0x5E	; 94
    bc46:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
    bc4a:	7c 01       	movw	r14, r24
    bc4c:	3b 01       	movw	r6, r22
    bc4e:	5a 01       	movw	r10, r20
    bc50:	38 87       	std	Y+8, r19	; 0x08
    bc52:	2f 83       	std	Y+7, r18	; 0x07
    bc54:	f9 01       	movw	r30, r18
    bc56:	11 82       	std	Z+1, r1	; 0x01
    bc58:	10 82       	st	Z, r1
    bc5a:	be 01       	movw	r22, r28
    bc5c:	6f 5f       	subi	r22, 0xFF	; 255
    bc5e:	7f 4f       	sbci	r23, 0xFF	; 255
    bc60:	0e 94 62 49 	call	0x92c4	; 0x92c4 <validate>
    bc64:	00 97       	sbiw	r24, 0x00	; 0
    bc66:	09 f0       	breq	.+2      	; 0xbc6a <f_write+0x2c>
    bc68:	7d c1       	rjmp	.+762    	; 0xbf64 <f_write+0x326>
    bc6a:	f7 01       	movw	r30, r14
    bc6c:	87 85       	ldd	r24, Z+15	; 0x0f
    bc6e:	90 e0       	ldi	r25, 0x00	; 0
    bc70:	00 97       	sbiw	r24, 0x00	; 0
    bc72:	09 f0       	breq	.+2      	; 0xbc76 <f_write+0x38>
    bc74:	77 c1       	rjmp	.+750    	; 0xbf64 <f_write+0x326>
    bc76:	86 85       	ldd	r24, Z+14	; 0x0e
    bc78:	81 ff       	sbrs	r24, 1
    bc7a:	72 c1       	rjmp	.+740    	; 0xbf60 <f_write+0x322>
    bc7c:	80 89       	ldd	r24, Z+16	; 0x10
    bc7e:	91 89       	ldd	r25, Z+17	; 0x11
    bc80:	a2 89       	ldd	r26, Z+18	; 0x12
    bc82:	b3 89       	ldd	r27, Z+19	; 0x13
    bc84:	ac 01       	movw	r20, r24
    bc86:	bd 01       	movw	r22, r26
    bc88:	4a 0d       	add	r20, r10
    bc8a:	5b 1d       	adc	r21, r11
    bc8c:	61 1d       	adc	r22, r1
    bc8e:	71 1d       	adc	r23, r1
    bc90:	48 17       	cp	r20, r24
    bc92:	59 07       	cpc	r21, r25
    bc94:	6a 07       	cpc	r22, r26
    bc96:	7b 07       	cpc	r23, r27
    bc98:	18 f4       	brcc	.+6      	; 0xbca0 <f_write+0x62>
    bc9a:	5c 01       	movw	r10, r24
    bc9c:	a0 94       	com	r10
    bc9e:	b0 94       	com	r11
    bca0:	97 01       	movw	r18, r14
    bca2:	2c 5d       	subi	r18, 0xDC	; 220
    bca4:	3f 4f       	sbci	r19, 0xFF	; 255
    bca6:	3e 83       	std	Y+6, r19	; 0x06
    bca8:	2d 83       	std	Y+5, r18	; 0x05
    bcaa:	a1 14       	cp	r10, r1
    bcac:	b1 04       	cpc	r11, r1
    bcae:	09 f4       	brne	.+2      	; 0xbcb2 <f_write+0x74>
    bcb0:	4d c0       	rjmp	.+154    	; 0xbd4c <f_write+0x10e>
    bcb2:	f7 01       	movw	r30, r14
    bcb4:	40 89       	ldd	r20, Z+16	; 0x10
    bcb6:	51 89       	ldd	r21, Z+17	; 0x11
    bcb8:	62 89       	ldd	r22, Z+18	; 0x12
    bcba:	73 89       	ldd	r23, Z+19	; 0x13
    bcbc:	db 01       	movw	r26, r22
    bcbe:	ca 01       	movw	r24, r20
    bcc0:	91 70       	andi	r25, 0x01	; 1
    bcc2:	aa 27       	eor	r26, r26
    bcc4:	bb 27       	eor	r27, r27
    bcc6:	89 2b       	or	r24, r25
    bcc8:	8a 2b       	or	r24, r26
    bcca:	8b 2b       	or	r24, r27
    bccc:	09 f0       	breq	.+2      	; 0xbcd0 <f_write+0x92>
    bcce:	05 c1       	rjmp	.+522    	; 0xbeda <f_write+0x29c>
    bcd0:	e9 81       	ldd	r30, Y+1	; 0x01
    bcd2:	fa 81       	ldd	r31, Y+2	; 0x02
    bcd4:	81 84       	ldd	r8, Z+9	; 0x09
    bcd6:	92 84       	ldd	r9, Z+10	; 0x0a
    bcd8:	f1 e0       	ldi	r31, 0x01	; 1
    bcda:	8f 1a       	sub	r8, r31
    bcdc:	91 08       	sbc	r9, r1
    bcde:	db 01       	movw	r26, r22
    bce0:	ca 01       	movw	r24, r20
    bce2:	e9 e0       	ldi	r30, 0x09	; 9
    bce4:	b6 95       	lsr	r27
    bce6:	a7 95       	ror	r26
    bce8:	97 95       	ror	r25
    bcea:	87 95       	ror	r24
    bcec:	ea 95       	dec	r30
    bcee:	d1 f7       	brne	.-12     	; 0xbce4 <f_write+0xa6>
    bcf0:	88 22       	and	r8, r24
    bcf2:	99 22       	and	r9, r25
    bcf4:	81 14       	cp	r8, r1
    bcf6:	91 04       	cpc	r9, r1
    bcf8:	09 f0       	breq	.+2      	; 0xbcfc <f_write+0xbe>
    bcfa:	51 c0       	rjmp	.+162    	; 0xbd9e <f_write+0x160>
    bcfc:	f7 01       	movw	r30, r14
    bcfe:	41 15       	cp	r20, r1
    bd00:	51 05       	cpc	r21, r1
    bd02:	61 05       	cpc	r22, r1
    bd04:	71 05       	cpc	r23, r1
    bd06:	69 f4       	brne	.+26     	; 0xbd22 <f_write+0xe4>
    bd08:	66 81       	ldd	r22, Z+6	; 0x06
    bd0a:	77 81       	ldd	r23, Z+7	; 0x07
    bd0c:	80 85       	ldd	r24, Z+8	; 0x08
    bd0e:	91 85       	ldd	r25, Z+9	; 0x09
    bd10:	61 15       	cp	r22, r1
    bd12:	71 05       	cpc	r23, r1
    bd14:	81 05       	cpc	r24, r1
    bd16:	91 05       	cpc	r25, r1
    bd18:	f9 f4       	brne	.+62     	; 0xbd58 <f_write+0x11a>
    bd1a:	40 e0       	ldi	r20, 0x00	; 0
    bd1c:	50 e0       	ldi	r21, 0x00	; 0
    bd1e:	ba 01       	movw	r22, r20
    bd20:	0d c0       	rjmp	.+26     	; 0xbd3c <f_write+0xfe>
    bd22:	82 a1       	ldd	r24, Z+34	; 0x22
    bd24:	93 a1       	ldd	r25, Z+35	; 0x23
    bd26:	89 2b       	or	r24, r25
    bd28:	21 f0       	breq	.+8      	; 0xbd32 <f_write+0xf4>
    bd2a:	c7 01       	movw	r24, r14
    bd2c:	0e 94 eb 48 	call	0x91d6	; 0x91d6 <clmt_clust>
    bd30:	08 c0       	rjmp	.+16     	; 0xbd42 <f_write+0x104>
    bd32:	f7 01       	movw	r30, r14
    bd34:	44 89       	ldd	r20, Z+20	; 0x14
    bd36:	55 89       	ldd	r21, Z+21	; 0x15
    bd38:	66 89       	ldd	r22, Z+22	; 0x16
    bd3a:	77 89       	ldd	r23, Z+23	; 0x17
    bd3c:	c7 01       	movw	r24, r14
    bd3e:	0e 94 2a 52 	call	0xa454	; 0xa454 <create_chain>
    bd42:	61 15       	cp	r22, r1
    bd44:	71 05       	cpc	r23, r1
    bd46:	81 05       	cpc	r24, r1
    bd48:	91 05       	cpc	r25, r1
    bd4a:	31 f4       	brne	.+12     	; 0xbd58 <f_write+0x11a>
    bd4c:	f7 01       	movw	r30, r14
    bd4e:	86 85       	ldd	r24, Z+14	; 0x0e
    bd50:	80 64       	ori	r24, 0x40	; 64
    bd52:	86 87       	std	Z+14, r24	; 0x0e
    bd54:	80 e0       	ldi	r24, 0x00	; 0
    bd56:	05 c1       	rjmp	.+522    	; 0xbf62 <f_write+0x324>
    bd58:	61 30       	cpi	r22, 0x01	; 1
    bd5a:	71 05       	cpc	r23, r1
    bd5c:	81 05       	cpc	r24, r1
    bd5e:	91 05       	cpc	r25, r1
    bd60:	11 f4       	brne	.+4      	; 0xbd66 <f_write+0x128>
    bd62:	82 e0       	ldi	r24, 0x02	; 2
    bd64:	07 c0       	rjmp	.+14     	; 0xbd74 <f_write+0x136>
    bd66:	6f 3f       	cpi	r22, 0xFF	; 255
    bd68:	ff ef       	ldi	r31, 0xFF	; 255
    bd6a:	7f 07       	cpc	r23, r31
    bd6c:	8f 07       	cpc	r24, r31
    bd6e:	9f 07       	cpc	r25, r31
    bd70:	21 f4       	brne	.+8      	; 0xbd7a <f_write+0x13c>
    bd72:	81 e0       	ldi	r24, 0x01	; 1
    bd74:	f7 01       	movw	r30, r14
    bd76:	87 87       	std	Z+15, r24	; 0x0f
    bd78:	f4 c0       	rjmp	.+488    	; 0xbf62 <f_write+0x324>
    bd7a:	f7 01       	movw	r30, r14
    bd7c:	64 8b       	std	Z+20, r22	; 0x14
    bd7e:	75 8b       	std	Z+21, r23	; 0x15
    bd80:	86 8b       	std	Z+22, r24	; 0x16
    bd82:	97 8b       	std	Z+23, r25	; 0x17
    bd84:	06 81       	ldd	r16, Z+6	; 0x06
    bd86:	17 81       	ldd	r17, Z+7	; 0x07
    bd88:	20 85       	ldd	r18, Z+8	; 0x08
    bd8a:	31 85       	ldd	r19, Z+9	; 0x09
    bd8c:	01 15       	cp	r16, r1
    bd8e:	11 05       	cpc	r17, r1
    bd90:	21 05       	cpc	r18, r1
    bd92:	31 05       	cpc	r19, r1
    bd94:	21 f4       	brne	.+8      	; 0xbd9e <f_write+0x160>
    bd96:	66 83       	std	Z+6, r22	; 0x06
    bd98:	77 83       	std	Z+7, r23	; 0x07
    bd9a:	80 87       	std	Z+8, r24	; 0x08
    bd9c:	91 87       	std	Z+9, r25	; 0x09
    bd9e:	f7 01       	movw	r30, r14
    bda0:	86 85       	ldd	r24, Z+14	; 0x0e
    bda2:	87 ff       	sbrs	r24, 7
    bda4:	13 c0       	rjmp	.+38     	; 0xbdcc <f_write+0x18e>
    bda6:	20 8d       	ldd	r18, Z+24	; 0x18
    bda8:	31 8d       	ldd	r19, Z+25	; 0x19
    bdaa:	42 8d       	ldd	r20, Z+26	; 0x1a
    bdac:	53 8d       	ldd	r21, Z+27	; 0x1b
    bdae:	e9 81       	ldd	r30, Y+1	; 0x01
    bdb0:	fa 81       	ldd	r31, Y+2	; 0x02
    bdb2:	01 e0       	ldi	r16, 0x01	; 1
    bdb4:	10 e0       	ldi	r17, 0x00	; 0
    bdb6:	6d 81       	ldd	r22, Y+5	; 0x05
    bdb8:	7e 81       	ldd	r23, Y+6	; 0x06
    bdba:	81 81       	ldd	r24, Z+1	; 0x01
    bdbc:	0e 94 3e 6b 	call	0xd67c	; 0xd67c <disk_write>
    bdc0:	89 2b       	or	r24, r25
    bdc2:	b9 f6       	brne	.-82     	; 0xbd72 <f_write+0x134>
    bdc4:	f7 01       	movw	r30, r14
    bdc6:	86 85       	ldd	r24, Z+14	; 0x0e
    bdc8:	8f 77       	andi	r24, 0x7F	; 127
    bdca:	86 87       	std	Z+14, r24	; 0x0e
    bdcc:	29 81       	ldd	r18, Y+1	; 0x01
    bdce:	3a 81       	ldd	r19, Y+2	; 0x02
    bdd0:	3c 83       	std	Y+4, r19	; 0x04
    bdd2:	2b 83       	std	Y+3, r18	; 0x03
    bdd4:	f7 01       	movw	r30, r14
    bdd6:	44 89       	ldd	r20, Z+20	; 0x14
    bdd8:	55 89       	ldd	r21, Z+21	; 0x15
    bdda:	66 89       	ldd	r22, Z+22	; 0x16
    bddc:	77 89       	ldd	r23, Z+23	; 0x17
    bdde:	c9 01       	movw	r24, r18
    bde0:	0e 94 c3 48 	call	0x9186	; 0x9186 <clst2sect>
    bde4:	61 15       	cp	r22, r1
    bde6:	71 05       	cpc	r23, r1
    bde8:	81 05       	cpc	r24, r1
    bdea:	91 05       	cpc	r25, r1
    bdec:	09 f4       	brne	.+2      	; 0xbdf0 <f_write+0x1b2>
    bdee:	b9 cf       	rjmp	.-142    	; 0xbd62 <f_write+0x124>
    bdf0:	1b 01       	movw	r2, r22
    bdf2:	2c 01       	movw	r4, r24
    bdf4:	28 0c       	add	r2, r8
    bdf6:	39 1c       	adc	r3, r9
    bdf8:	41 1c       	adc	r4, r1
    bdfa:	51 1c       	adc	r5, r1
    bdfc:	65 01       	movw	r12, r10
    bdfe:	cd 2c       	mov	r12, r13
    be00:	dd 24       	eor	r13, r13
    be02:	c6 94       	lsr	r12
    be04:	c1 14       	cp	r12, r1
    be06:	d1 04       	cpc	r13, r1
    be08:	f1 f1       	breq	.+124    	; 0xbe86 <f_write+0x248>
    be0a:	eb 81       	ldd	r30, Y+3	; 0x03
    be0c:	fc 81       	ldd	r31, Y+4	; 0x04
    be0e:	81 85       	ldd	r24, Z+9	; 0x09
    be10:	92 85       	ldd	r25, Z+10	; 0x0a
    be12:	94 01       	movw	r18, r8
    be14:	2c 0d       	add	r18, r12
    be16:	3d 1d       	adc	r19, r13
    be18:	82 17       	cp	r24, r18
    be1a:	93 07       	cpc	r25, r19
    be1c:	18 f4       	brcc	.+6      	; 0xbe24 <f_write+0x1e6>
    be1e:	6c 01       	movw	r12, r24
    be20:	c8 18       	sub	r12, r8
    be22:	d9 08       	sbc	r13, r9
    be24:	86 01       	movw	r16, r12
    be26:	a2 01       	movw	r20, r4
    be28:	91 01       	movw	r18, r2
    be2a:	b3 01       	movw	r22, r6
    be2c:	eb 81       	ldd	r30, Y+3	; 0x03
    be2e:	fc 81       	ldd	r31, Y+4	; 0x04
    be30:	81 81       	ldd	r24, Z+1	; 0x01
    be32:	0e 94 3e 6b 	call	0xd67c	; 0xd67c <disk_write>
    be36:	89 2b       	or	r24, r25
    be38:	09 f0       	breq	.+2      	; 0xbe3c <f_write+0x1fe>
    be3a:	9b cf       	rjmp	.-202    	; 0xbd72 <f_write+0x134>
    be3c:	f7 01       	movw	r30, r14
    be3e:	80 8d       	ldd	r24, Z+24	; 0x18
    be40:	91 8d       	ldd	r25, Z+25	; 0x19
    be42:	a2 8d       	ldd	r26, Z+26	; 0x1a
    be44:	b3 8d       	ldd	r27, Z+27	; 0x1b
    be46:	82 19       	sub	r24, r2
    be48:	93 09       	sbc	r25, r3
    be4a:	a4 09       	sbc	r26, r4
    be4c:	b5 09       	sbc	r27, r5
    be4e:	a6 01       	movw	r20, r12
    be50:	60 e0       	ldi	r22, 0x00	; 0
    be52:	70 e0       	ldi	r23, 0x00	; 0
    be54:	84 17       	cp	r24, r20
    be56:	95 07       	cpc	r25, r21
    be58:	a6 07       	cpc	r26, r22
    be5a:	b7 07       	cpc	r27, r23
    be5c:	80 f4       	brcc	.+32     	; 0xbe7e <f_write+0x240>
    be5e:	98 2f       	mov	r25, r24
    be60:	88 27       	eor	r24, r24
    be62:	99 0f       	add	r25, r25
    be64:	b3 01       	movw	r22, r6
    be66:	68 0f       	add	r22, r24
    be68:	79 1f       	adc	r23, r25
    be6a:	40 e0       	ldi	r20, 0x00	; 0
    be6c:	52 e0       	ldi	r21, 0x02	; 2
    be6e:	8d 81       	ldd	r24, Y+5	; 0x05
    be70:	9e 81       	ldd	r25, Y+6	; 0x06
    be72:	0e 94 8e 49 	call	0x931c	; 0x931c <mem_cpy.part.0>
    be76:	f7 01       	movw	r30, r14
    be78:	86 85       	ldd	r24, Z+14	; 0x0e
    be7a:	8f 77       	andi	r24, 0x7F	; 127
    be7c:	86 87       	std	Z+14, r24	; 0x0e
    be7e:	dc 2c       	mov	r13, r12
    be80:	cc 24       	eor	r12, r12
    be82:	dd 0c       	add	r13, r13
    be84:	43 c0       	rjmp	.+134    	; 0xbf0c <f_write+0x2ce>
    be86:	f7 01       	movw	r30, r14
    be88:	80 8d       	ldd	r24, Z+24	; 0x18
    be8a:	91 8d       	ldd	r25, Z+25	; 0x19
    be8c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    be8e:	b3 8d       	ldd	r27, Z+27	; 0x1b
    be90:	28 16       	cp	r2, r24
    be92:	39 06       	cpc	r3, r25
    be94:	4a 06       	cpc	r4, r26
    be96:	5b 06       	cpc	r5, r27
    be98:	d9 f0       	breq	.+54     	; 0xbed0 <f_write+0x292>
    be9a:	40 89       	ldd	r20, Z+16	; 0x10
    be9c:	51 89       	ldd	r21, Z+17	; 0x11
    be9e:	62 89       	ldd	r22, Z+18	; 0x12
    bea0:	73 89       	ldd	r23, Z+19	; 0x13
    bea2:	82 85       	ldd	r24, Z+10	; 0x0a
    bea4:	93 85       	ldd	r25, Z+11	; 0x0b
    bea6:	a4 85       	ldd	r26, Z+12	; 0x0c
    bea8:	b5 85       	ldd	r27, Z+13	; 0x0d
    beaa:	48 17       	cp	r20, r24
    beac:	59 07       	cpc	r21, r25
    beae:	6a 07       	cpc	r22, r26
    beb0:	7b 07       	cpc	r23, r27
    beb2:	70 f4       	brcc	.+28     	; 0xbed0 <f_write+0x292>
    beb4:	01 e0       	ldi	r16, 0x01	; 1
    beb6:	10 e0       	ldi	r17, 0x00	; 0
    beb8:	a2 01       	movw	r20, r4
    beba:	91 01       	movw	r18, r2
    bebc:	6d 81       	ldd	r22, Y+5	; 0x05
    bebe:	7e 81       	ldd	r23, Y+6	; 0x06
    bec0:	eb 81       	ldd	r30, Y+3	; 0x03
    bec2:	fc 81       	ldd	r31, Y+4	; 0x04
    bec4:	81 81       	ldd	r24, Z+1	; 0x01
    bec6:	0e 94 2e 6b 	call	0xd65c	; 0xd65c <disk_read>
    beca:	89 2b       	or	r24, r25
    becc:	09 f0       	breq	.+2      	; 0xbed0 <f_write+0x292>
    bece:	51 cf       	rjmp	.-350    	; 0xbd72 <f_write+0x134>
    bed0:	f7 01       	movw	r30, r14
    bed2:	20 8e       	std	Z+24, r2	; 0x18
    bed4:	31 8e       	std	Z+25, r3	; 0x19
    bed6:	42 8e       	std	Z+26, r4	; 0x1a
    bed8:	53 8e       	std	Z+27, r5	; 0x1b
    beda:	f7 01       	movw	r30, r14
    bedc:	80 89       	ldd	r24, Z+16	; 0x10
    bede:	91 89       	ldd	r25, Z+17	; 0x11
    bee0:	91 70       	andi	r25, 0x01	; 1
    bee2:	20 e0       	ldi	r18, 0x00	; 0
    bee4:	32 e0       	ldi	r19, 0x02	; 2
    bee6:	28 1b       	sub	r18, r24
    bee8:	39 0b       	sbc	r19, r25
    beea:	65 01       	movw	r12, r10
    beec:	2a 15       	cp	r18, r10
    beee:	3b 05       	cpc	r19, r11
    bef0:	08 f4       	brcc	.+2      	; 0xbef4 <f_write+0x2b6>
    bef2:	69 01       	movw	r12, r18
    bef4:	a6 01       	movw	r20, r12
    bef6:	b3 01       	movw	r22, r6
    bef8:	2d 81       	ldd	r18, Y+5	; 0x05
    befa:	3e 81       	ldd	r19, Y+6	; 0x06
    befc:	82 0f       	add	r24, r18
    befe:	93 1f       	adc	r25, r19
    bf00:	0e 94 8e 49 	call	0x931c	; 0x931c <mem_cpy.part.0>
    bf04:	f7 01       	movw	r30, r14
    bf06:	86 85       	ldd	r24, Z+14	; 0x0e
    bf08:	80 68       	ori	r24, 0x80	; 128
    bf0a:	86 87       	std	Z+14, r24	; 0x0e
    bf0c:	ac 18       	sub	r10, r12
    bf0e:	bd 08       	sbc	r11, r13
    bf10:	ef 81       	ldd	r30, Y+7	; 0x07
    bf12:	f8 85       	ldd	r31, Y+8	; 0x08
    bf14:	80 81       	ld	r24, Z
    bf16:	91 81       	ldd	r25, Z+1	; 0x01
    bf18:	8c 0d       	add	r24, r12
    bf1a:	9d 1d       	adc	r25, r13
    bf1c:	91 83       	std	Z+1, r25	; 0x01
    bf1e:	80 83       	st	Z, r24
    bf20:	6c 0c       	add	r6, r12
    bf22:	7d 1c       	adc	r7, r13
    bf24:	f7 01       	movw	r30, r14
    bf26:	80 89       	ldd	r24, Z+16	; 0x10
    bf28:	91 89       	ldd	r25, Z+17	; 0x11
    bf2a:	a2 89       	ldd	r26, Z+18	; 0x12
    bf2c:	b3 89       	ldd	r27, Z+19	; 0x13
    bf2e:	8c 0d       	add	r24, r12
    bf30:	9d 1d       	adc	r25, r13
    bf32:	a1 1d       	adc	r26, r1
    bf34:	b1 1d       	adc	r27, r1
    bf36:	80 8b       	std	Z+16, r24	; 0x10
    bf38:	91 8b       	std	Z+17, r25	; 0x11
    bf3a:	a2 8b       	std	Z+18, r26	; 0x12
    bf3c:	b3 8b       	std	Z+19, r27	; 0x13
    bf3e:	42 85       	ldd	r20, Z+10	; 0x0a
    bf40:	53 85       	ldd	r21, Z+11	; 0x0b
    bf42:	64 85       	ldd	r22, Z+12	; 0x0c
    bf44:	75 85       	ldd	r23, Z+13	; 0x0d
    bf46:	48 17       	cp	r20, r24
    bf48:	59 07       	cpc	r21, r25
    bf4a:	6a 07       	cpc	r22, r26
    bf4c:	7b 07       	cpc	r23, r27
    bf4e:	10 f4       	brcc	.+4      	; 0xbf54 <f_write+0x316>
    bf50:	ac 01       	movw	r20, r24
    bf52:	bd 01       	movw	r22, r26
    bf54:	f7 01       	movw	r30, r14
    bf56:	42 87       	std	Z+10, r20	; 0x0a
    bf58:	53 87       	std	Z+11, r21	; 0x0b
    bf5a:	64 87       	std	Z+12, r22	; 0x0c
    bf5c:	75 87       	std	Z+13, r23	; 0x0d
    bf5e:	a5 ce       	rjmp	.-694    	; 0xbcaa <f_write+0x6c>
    bf60:	87 e0       	ldi	r24, 0x07	; 7
    bf62:	90 e0       	ldi	r25, 0x00	; 0
    bf64:	28 96       	adiw	r28, 0x08	; 8
    bf66:	e2 e1       	ldi	r30, 0x12	; 18
    bf68:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

0000bf6c <f_sync>:
    bf6c:	8f 92       	push	r8
    bf6e:	9f 92       	push	r9
    bf70:	af 92       	push	r10
    bf72:	bf 92       	push	r11
    bf74:	ef 92       	push	r14
    bf76:	ff 92       	push	r15
    bf78:	0f 93       	push	r16
    bf7a:	1f 93       	push	r17
    bf7c:	cf 93       	push	r28
    bf7e:	df 93       	push	r29
    bf80:	00 d0       	rcall	.+0      	; 0xbf82 <f_sync+0x16>
    bf82:	cd b7       	in	r28, 0x3d	; 61
    bf84:	de b7       	in	r29, 0x3e	; 62
    bf86:	7c 01       	movw	r14, r24
    bf88:	be 01       	movw	r22, r28
    bf8a:	6f 5f       	subi	r22, 0xFF	; 255
    bf8c:	7f 4f       	sbci	r23, 0xFF	; 255
    bf8e:	0e 94 62 49 	call	0x92c4	; 0x92c4 <validate>
    bf92:	00 97       	sbiw	r24, 0x00	; 0
    bf94:	09 f0       	breq	.+2      	; 0xbf98 <f_sync+0x2c>
    bf96:	5d c0       	rjmp	.+186    	; 0xc052 <f_sync+0xe6>
    bf98:	f7 01       	movw	r30, r14
    bf9a:	86 85       	ldd	r24, Z+14	; 0x0e
    bf9c:	86 ff       	sbrs	r24, 6
    bf9e:	55 c0       	rjmp	.+170    	; 0xc04a <f_sync+0xde>
    bfa0:	87 ff       	sbrs	r24, 7
    bfa2:	15 c0       	rjmp	.+42     	; 0xbfce <f_sync+0x62>
    bfa4:	20 8d       	ldd	r18, Z+24	; 0x18
    bfa6:	31 8d       	ldd	r19, Z+25	; 0x19
    bfa8:	42 8d       	ldd	r20, Z+26	; 0x1a
    bfaa:	53 8d       	ldd	r21, Z+27	; 0x1b
    bfac:	e9 81       	ldd	r30, Y+1	; 0x01
    bfae:	fa 81       	ldd	r31, Y+2	; 0x02
    bfb0:	01 e0       	ldi	r16, 0x01	; 1
    bfb2:	10 e0       	ldi	r17, 0x00	; 0
    bfb4:	b7 01       	movw	r22, r14
    bfb6:	6c 5d       	subi	r22, 0xDC	; 220
    bfb8:	7f 4f       	sbci	r23, 0xFF	; 255
    bfba:	81 81       	ldd	r24, Z+1	; 0x01
    bfbc:	0e 94 3e 6b 	call	0xd67c	; 0xd67c <disk_write>
    bfc0:	89 2b       	or	r24, r25
    bfc2:	09 f0       	breq	.+2      	; 0xbfc6 <f_sync+0x5a>
    bfc4:	44 c0       	rjmp	.+136    	; 0xc04e <f_sync+0xe2>
    bfc6:	f7 01       	movw	r30, r14
    bfc8:	86 85       	ldd	r24, Z+14	; 0x0e
    bfca:	8f 77       	andi	r24, 0x7F	; 127
    bfcc:	86 87       	std	Z+14, r24	; 0x0e
    bfce:	0e 94 6d 71 	call	0xe2da	; 0xe2da <get_fattime>
    bfd2:	4b 01       	movw	r8, r22
    bfd4:	5c 01       	movw	r10, r24
    bfd6:	f7 01       	movw	r30, r14
    bfd8:	44 8d       	ldd	r20, Z+28	; 0x1c
    bfda:	55 8d       	ldd	r21, Z+29	; 0x1d
    bfdc:	66 8d       	ldd	r22, Z+30	; 0x1e
    bfde:	77 8d       	ldd	r23, Z+31	; 0x1f
    bfe0:	89 81       	ldd	r24, Y+1	; 0x01
    bfe2:	9a 81       	ldd	r25, Y+2	; 0x02
    bfe4:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <move_window>
    bfe8:	00 97       	sbiw	r24, 0x00	; 0
    bfea:	99 f5       	brne	.+102    	; 0xc052 <f_sync+0xe6>
    bfec:	f7 01       	movw	r30, r14
    bfee:	00 a1       	ldd	r16, Z+32	; 0x20
    bff0:	11 a1       	ldd	r17, Z+33	; 0x21
    bff2:	f8 01       	movw	r30, r16
    bff4:	83 85       	ldd	r24, Z+11	; 0x0b
    bff6:	80 62       	ori	r24, 0x20	; 32
    bff8:	83 87       	std	Z+11, r24	; 0x0b
    bffa:	f7 01       	movw	r30, r14
    bffc:	26 81       	ldd	r18, Z+6	; 0x06
    bffe:	37 81       	ldd	r19, Z+7	; 0x07
    c000:	40 85       	ldd	r20, Z+8	; 0x08
    c002:	51 85       	ldd	r21, Z+9	; 0x09
    c004:	b8 01       	movw	r22, r16
    c006:	80 81       	ld	r24, Z
    c008:	91 81       	ldd	r25, Z+1	; 0x01
    c00a:	0e 94 6b 4b 	call	0x96d6	; 0x96d6 <st_clust.isra.5>
    c00e:	f7 01       	movw	r30, r14
    c010:	42 85       	ldd	r20, Z+10	; 0x0a
    c012:	53 85       	ldd	r21, Z+11	; 0x0b
    c014:	64 85       	ldd	r22, Z+12	; 0x0c
    c016:	75 85       	ldd	r23, Z+13	; 0x0d
    c018:	c8 01       	movw	r24, r16
    c01a:	4c 96       	adiw	r24, 0x1c	; 28
    c01c:	0e 94 1f 48 	call	0x903e	; 0x903e <st_dword>
    c020:	b5 01       	movw	r22, r10
    c022:	a4 01       	movw	r20, r8
    c024:	c8 01       	movw	r24, r16
    c026:	46 96       	adiw	r24, 0x16	; 22
    c028:	0e 94 1f 48 	call	0x903e	; 0x903e <st_dword>
    c02c:	f8 01       	movw	r30, r16
    c02e:	12 8a       	std	Z+18, r1	; 0x12
    c030:	13 8a       	std	Z+19, r1	; 0x13
    c032:	89 81       	ldd	r24, Y+1	; 0x01
    c034:	9a 81       	ldd	r25, Y+2	; 0x02
    c036:	21 e0       	ldi	r18, 0x01	; 1
    c038:	fc 01       	movw	r30, r24
    c03a:	23 83       	std	Z+3, r18	; 0x03
    c03c:	0e 94 cb 4b 	call	0x9796	; 0x9796 <sync_fs>
    c040:	f7 01       	movw	r30, r14
    c042:	26 85       	ldd	r18, Z+14	; 0x0e
    c044:	2f 7b       	andi	r18, 0xBF	; 191
    c046:	26 87       	std	Z+14, r18	; 0x0e
    c048:	04 c0       	rjmp	.+8      	; 0xc052 <f_sync+0xe6>
    c04a:	80 e0       	ldi	r24, 0x00	; 0
    c04c:	01 c0       	rjmp	.+2      	; 0xc050 <f_sync+0xe4>
    c04e:	81 e0       	ldi	r24, 0x01	; 1
    c050:	90 e0       	ldi	r25, 0x00	; 0
    c052:	0f 90       	pop	r0
    c054:	0f 90       	pop	r0
    c056:	df 91       	pop	r29
    c058:	cf 91       	pop	r28
    c05a:	1f 91       	pop	r17
    c05c:	0f 91       	pop	r16
    c05e:	ff 90       	pop	r15
    c060:	ef 90       	pop	r14
    c062:	bf 90       	pop	r11
    c064:	af 90       	pop	r10
    c066:	9f 90       	pop	r9
    c068:	8f 90       	pop	r8
    c06a:	08 95       	ret

0000c06c <f_close>:
    c06c:	a2 e0       	ldi	r26, 0x02	; 2
    c06e:	b0 e0       	ldi	r27, 0x00	; 0
    c070:	ec e3       	ldi	r30, 0x3C	; 60
    c072:	f0 e6       	ldi	r31, 0x60	; 96
    c074:	0c 94 94 e4 	jmp	0x1c928	; 0x1c928 <__prologue_saves__+0x1c>
    c078:	8c 01       	movw	r16, r24
    c07a:	78 df       	rcall	.-272    	; 0xbf6c <f_sync>
    c07c:	00 97       	sbiw	r24, 0x00	; 0
    c07e:	59 f4       	brne	.+22     	; 0xc096 <f_close+0x2a>
    c080:	be 01       	movw	r22, r28
    c082:	6f 5f       	subi	r22, 0xFF	; 255
    c084:	7f 4f       	sbci	r23, 0xFF	; 255
    c086:	c8 01       	movw	r24, r16
    c088:	0e 94 62 49 	call	0x92c4	; 0x92c4 <validate>
    c08c:	00 97       	sbiw	r24, 0x00	; 0
    c08e:	19 f4       	brne	.+6      	; 0xc096 <f_close+0x2a>
    c090:	f8 01       	movw	r30, r16
    c092:	11 82       	std	Z+1, r1	; 0x01
    c094:	10 82       	st	Z, r1
    c096:	22 96       	adiw	r28, 0x02	; 2
    c098:	e4 e0       	ldi	r30, 0x04	; 4
    c09a:	0c 94 b0 e4 	jmp	0x1c960	; 0x1c960 <__epilogue_restores__+0x1c>

0000c09e <f_chdir>:
    c09e:	a2 e3       	ldi	r26, 0x32	; 50
    c0a0:	b0 e0       	ldi	r27, 0x00	; 0
    c0a2:	e5 e5       	ldi	r30, 0x55	; 85
    c0a4:	f0 e6       	ldi	r31, 0x60	; 96
    c0a6:	0c 94 90 e4 	jmp	0x1c920	; 0x1c920 <__prologue_saves__+0x14>
    c0aa:	9a ab       	std	Y+50, r25	; 0x32
    c0ac:	89 ab       	std	Y+49, r24	; 0x31
    c0ae:	40 e0       	ldi	r20, 0x00	; 0
    c0b0:	be 01       	movw	r22, r28
    c0b2:	61 5d       	subi	r22, 0xD1	; 209
    c0b4:	7f 4f       	sbci	r23, 0xFF	; 255
    c0b6:	ce 01       	movw	r24, r28
    c0b8:	c1 96       	adiw	r24, 0x31	; 49
    c0ba:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
    c0be:	00 97       	sbiw	r24, 0x00	; 0
    c0c0:	09 f0       	breq	.+2      	; 0xc0c4 <f_chdir+0x26>
    c0c2:	44 c0       	rjmp	.+136    	; 0xc14c <f_chdir+0xae>
    c0c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    c0c6:	98 a9       	ldd	r25, Y+48	; 0x30
    c0c8:	9a 83       	std	Y+2, r25	; 0x02
    c0ca:	89 83       	std	Y+1, r24	; 0x01
    c0cc:	80 e0       	ldi	r24, 0x00	; 0
    c0ce:	92 e0       	ldi	r25, 0x02	; 2
    c0d0:	0e 94 72 6a 	call	0xd4e4	; 0xd4e4 <ff_memalloc>
    c0d4:	7c 01       	movw	r14, r24
    c0d6:	00 97       	sbiw	r24, 0x00	; 0
    c0d8:	a9 f1       	breq	.+106    	; 0xc144 <f_chdir+0xa6>
    c0da:	ef a5       	ldd	r30, Y+47	; 0x2f
    c0dc:	f8 a9       	ldd	r31, Y+48	; 0x30
    c0de:	94 87       	std	Z+12, r25	; 0x0c
    c0e0:	83 87       	std	Z+11, r24	; 0x0b
    c0e2:	69 a9       	ldd	r22, Y+49	; 0x31
    c0e4:	7a a9       	ldd	r23, Y+50	; 0x32
    c0e6:	ce 01       	movw	r24, r28
    c0e8:	01 96       	adiw	r24, 0x01	; 1
    c0ea:	39 d8       	rcall	.-3982   	; 0xb15e <follow_path>
    c0ec:	8c 01       	movw	r16, r24
    c0ee:	89 2b       	or	r24, r25
    c0f0:	09 f5       	brne	.+66     	; 0xc134 <f_chdir+0x96>
    c0f2:	88 a5       	ldd	r24, Y+40	; 0x28
    c0f4:	87 ff       	sbrs	r24, 7
    c0f6:	0b c0       	rjmp	.+22     	; 0xc10e <f_chdir+0x70>
    c0f8:	ef a5       	ldd	r30, Y+47	; 0x2f
    c0fa:	f8 a9       	ldd	r31, Y+48	; 0x30
    c0fc:	8f 81       	ldd	r24, Y+7	; 0x07
    c0fe:	98 85       	ldd	r25, Y+8	; 0x08
    c100:	a9 85       	ldd	r26, Y+9	; 0x09
    c102:	ba 85       	ldd	r27, Y+10	; 0x0a
    c104:	85 8b       	std	Z+21, r24	; 0x15
    c106:	96 8b       	std	Z+22, r25	; 0x16
    c108:	a7 8b       	std	Z+23, r26	; 0x17
    c10a:	b0 8f       	std	Z+24, r27	; 0x18
    c10c:	13 c0       	rjmp	.+38     	; 0xc134 <f_chdir+0x96>
    c10e:	8d 81       	ldd	r24, Y+5	; 0x05
    c110:	84 ff       	sbrs	r24, 4
    c112:	0e c0       	rjmp	.+28     	; 0xc130 <f_chdir+0x92>
    c114:	cf a4       	ldd	r12, Y+47	; 0x2f
    c116:	d8 a8       	ldd	r13, Y+48	; 0x30
    c118:	6b 8d       	ldd	r22, Y+27	; 0x1b
    c11a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    c11c:	f6 01       	movw	r30, r12
    c11e:	80 81       	ld	r24, Z
    c120:	0e 94 56 4b 	call	0x96ac	; 0x96ac <ld_clust.isra.4>
    c124:	f6 01       	movw	r30, r12
    c126:	65 8b       	std	Z+21, r22	; 0x15
    c128:	76 8b       	std	Z+22, r23	; 0x16
    c12a:	87 8b       	std	Z+23, r24	; 0x17
    c12c:	90 8f       	std	Z+24, r25	; 0x18
    c12e:	02 c0       	rjmp	.+4      	; 0xc134 <f_chdir+0x96>
    c130:	05 e0       	ldi	r16, 0x05	; 5
    c132:	10 e0       	ldi	r17, 0x00	; 0
    c134:	c7 01       	movw	r24, r14
    c136:	0e 94 75 6a 	call	0xd4ea	; 0xd4ea <ff_memfree>
    c13a:	04 30       	cpi	r16, 0x04	; 4
    c13c:	11 05       	cpc	r17, r1
    c13e:	29 f4       	brne	.+10     	; 0xc14a <f_chdir+0xac>
    c140:	85 e0       	ldi	r24, 0x05	; 5
    c142:	01 c0       	rjmp	.+2      	; 0xc146 <f_chdir+0xa8>
    c144:	81 e1       	ldi	r24, 0x11	; 17
    c146:	90 e0       	ldi	r25, 0x00	; 0
    c148:	01 c0       	rjmp	.+2      	; 0xc14c <f_chdir+0xae>
    c14a:	c8 01       	movw	r24, r16
    c14c:	e2 96       	adiw	r28, 0x32	; 50
    c14e:	e8 e0       	ldi	r30, 0x08	; 8
    c150:	0c 94 ac e4 	jmp	0x1c958	; 0x1c958 <__epilogue_restores__+0x14>

0000c154 <f_getcwd>:
    c154:	a8 e4       	ldi	r26, 0x48	; 72
    c156:	b1 e0       	ldi	r27, 0x01	; 1
    c158:	e0 eb       	ldi	r30, 0xB0	; 176
    c15a:	f0 e6       	ldi	r31, 0x60	; 96
    c15c:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
    c160:	c9 5b       	subi	r28, 0xB9	; 185
    c162:	de 4f       	sbci	r29, 0xFE	; 254
    c164:	99 83       	std	Y+1, r25	; 0x01
    c166:	88 83       	st	Y, r24
    c168:	c7 54       	subi	r28, 0x47	; 71
    c16a:	d1 40       	sbci	r29, 0x01	; 1
    c16c:	4b 01       	movw	r8, r22
    c16e:	7c 01       	movw	r14, r24
    c170:	fc 01       	movw	r30, r24
    c172:	10 82       	st	Z, r1
    c174:	40 e0       	ldi	r20, 0x00	; 0
    c176:	be 01       	movw	r22, r28
    c178:	6b 5b       	subi	r22, 0xBB	; 187
    c17a:	7e 4f       	sbci	r23, 0xFE	; 254
    c17c:	ce 01       	movw	r24, r28
    c17e:	89 5b       	subi	r24, 0xB9	; 185
    c180:	9e 4f       	sbci	r25, 0xFE	; 254
    c182:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
    c186:	1c 01       	movw	r2, r24
    c188:	89 2b       	or	r24, r25
    c18a:	09 f0       	breq	.+2      	; 0xc18e <f_getcwd+0x3a>
    c18c:	03 c1       	rjmp	.+518    	; 0xc394 <f_getcwd+0x240>
    c18e:	cb 5b       	subi	r28, 0xBB	; 187
    c190:	de 4f       	sbci	r29, 0xFE	; 254
    c192:	88 81       	ld	r24, Y
    c194:	99 81       	ldd	r25, Y+1	; 0x01
    c196:	c5 54       	subi	r28, 0x45	; 69
    c198:	d1 40       	sbci	r29, 0x01	; 1
    c19a:	c9 5e       	subi	r28, 0xE9	; 233
    c19c:	de 4f       	sbci	r29, 0xFE	; 254
    c19e:	99 83       	std	Y+1, r25	; 0x01
    c1a0:	88 83       	st	Y, r24
    c1a2:	c7 51       	subi	r28, 0x17	; 23
    c1a4:	d1 40       	sbci	r29, 0x01	; 1
    c1a6:	80 e0       	ldi	r24, 0x00	; 0
    c1a8:	92 e0       	ldi	r25, 0x02	; 2
    c1aa:	0e 94 72 6a 	call	0xd4e4	; 0xd4e4 <ff_memalloc>
    c1ae:	5c 01       	movw	r10, r24
    c1b0:	00 97       	sbiw	r24, 0x00	; 0
    c1b2:	09 f4       	brne	.+2      	; 0xc1b6 <f_getcwd+0x62>
    c1b4:	f3 c0       	rjmp	.+486    	; 0xc39c <f_getcwd+0x248>
    c1b6:	cb 5b       	subi	r28, 0xBB	; 187
    c1b8:	de 4f       	sbci	r29, 0xFE	; 254
    c1ba:	e8 81       	ld	r30, Y
    c1bc:	f9 81       	ldd	r31, Y+1	; 0x01
    c1be:	c5 54       	subi	r28, 0x45	; 69
    c1c0:	d1 40       	sbci	r29, 0x01	; 1
    c1c2:	94 87       	std	Z+12, r25	; 0x0c
    c1c4:	83 87       	std	Z+11, r24	; 0x0b
    c1c6:	85 89       	ldd	r24, Z+21	; 0x15
    c1c8:	96 89       	ldd	r25, Z+22	; 0x16
    c1ca:	a7 89       	ldd	r26, Z+23	; 0x17
    c1cc:	b0 8d       	ldd	r27, Z+24	; 0x18
    c1ce:	c3 5e       	subi	r28, 0xE3	; 227
    c1d0:	de 4f       	sbci	r29, 0xFE	; 254
    c1d2:	88 83       	st	Y, r24
    c1d4:	99 83       	std	Y+1, r25	; 0x01
    c1d6:	aa 83       	std	Y+2, r26	; 0x02
    c1d8:	bb 83       	std	Y+3, r27	; 0x03
    c1da:	cd 51       	subi	r28, 0x1D	; 29
    c1dc:	d1 40       	sbci	r29, 0x01	; 1
    c1de:	84 01       	movw	r16, r8
    c1e0:	ce 01       	movw	r24, r28
    c1e2:	01 96       	adiw	r24, 0x01	; 1
    c1e4:	6c 01       	movw	r12, r24
    c1e6:	c3 5e       	subi	r28, 0xE3	; 227
    c1e8:	de 4f       	sbci	r29, 0xFE	; 254
    c1ea:	48 80       	ld	r4, Y
    c1ec:	59 80       	ldd	r5, Y+1	; 0x01
    c1ee:	6a 80       	ldd	r6, Y+2	; 0x02
    c1f0:	7b 80       	ldd	r7, Y+3	; 0x03
    c1f2:	cd 51       	subi	r28, 0x1D	; 29
    c1f4:	d1 40       	sbci	r29, 0x01	; 1
    c1f6:	41 14       	cp	r4, r1
    c1f8:	51 04       	cpc	r5, r1
    c1fa:	61 04       	cpc	r6, r1
    c1fc:	71 04       	cpc	r7, r1
    c1fe:	09 f4       	brne	.+2      	; 0xc202 <f_getcwd+0xae>
    c200:	a3 c0       	rjmp	.+326    	; 0xc348 <f_getcwd+0x1f4>
    c202:	40 e2       	ldi	r20, 0x20	; 32
    c204:	50 e0       	ldi	r21, 0x00	; 0
    c206:	60 e0       	ldi	r22, 0x00	; 0
    c208:	70 e0       	ldi	r23, 0x00	; 0
    c20a:	ce 01       	movw	r24, r28
    c20c:	89 5e       	subi	r24, 0xE9	; 233
    c20e:	9e 4f       	sbci	r25, 0xFE	; 254
    c210:	0e 94 69 51 	call	0xa2d2	; 0xa2d2 <dir_sdi>
    c214:	00 97       	sbiw	r24, 0x00	; 0
    c216:	09 f0       	breq	.+2      	; 0xc21a <f_getcwd+0xc6>
    c218:	c6 c0       	rjmp	.+396    	; 0xc3a6 <f_getcwd+0x252>
    c21a:	c3 5d       	subi	r28, 0xD3	; 211
    c21c:	de 4f       	sbci	r29, 0xFE	; 254
    c21e:	48 81       	ld	r20, Y
    c220:	59 81       	ldd	r21, Y+1	; 0x01
    c222:	6a 81       	ldd	r22, Y+2	; 0x02
    c224:	7b 81       	ldd	r23, Y+3	; 0x03
    c226:	cd 52       	subi	r28, 0x2D	; 45
    c228:	d1 40       	sbci	r29, 0x01	; 1
    c22a:	cb 5b       	subi	r28, 0xBB	; 187
    c22c:	de 4f       	sbci	r29, 0xFE	; 254
    c22e:	88 81       	ld	r24, Y
    c230:	99 81       	ldd	r25, Y+1	; 0x01
    c232:	c5 54       	subi	r28, 0x45	; 69
    c234:	d1 40       	sbci	r29, 0x01	; 1
    c236:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <move_window>
    c23a:	00 97       	sbiw	r24, 0x00	; 0
    c23c:	09 f0       	breq	.+2      	; 0xc240 <f_getcwd+0xec>
    c23e:	b3 c0       	rjmp	.+358    	; 0xc3a6 <f_getcwd+0x252>
    c240:	cf 5c       	subi	r28, 0xCF	; 207
    c242:	de 4f       	sbci	r29, 0xFE	; 254
    c244:	68 81       	ld	r22, Y
    c246:	79 81       	ldd	r23, Y+1	; 0x01
    c248:	c1 53       	subi	r28, 0x31	; 49
    c24a:	d1 40       	sbci	r29, 0x01	; 1
    c24c:	cb 5b       	subi	r28, 0xBB	; 187
    c24e:	de 4f       	sbci	r29, 0xFE	; 254
    c250:	e8 81       	ld	r30, Y
    c252:	f9 81       	ldd	r31, Y+1	; 0x01
    c254:	c5 54       	subi	r28, 0x45	; 69
    c256:	d1 40       	sbci	r29, 0x01	; 1
    c258:	80 81       	ld	r24, Z
    c25a:	0e 94 56 4b 	call	0x96ac	; 0x96ac <ld_clust.isra.4>
    c25e:	c3 5e       	subi	r28, 0xE3	; 227
    c260:	de 4f       	sbci	r29, 0xFE	; 254
    c262:	68 83       	st	Y, r22
    c264:	79 83       	std	Y+1, r23	; 0x01
    c266:	8a 83       	std	Y+2, r24	; 0x02
    c268:	9b 83       	std	Y+3, r25	; 0x03
    c26a:	cd 51       	subi	r28, 0x1D	; 29
    c26c:	d1 40       	sbci	r29, 0x01	; 1
    c26e:	40 e0       	ldi	r20, 0x00	; 0
    c270:	50 e0       	ldi	r21, 0x00	; 0
    c272:	ba 01       	movw	r22, r20
    c274:	ce 01       	movw	r24, r28
    c276:	89 5e       	subi	r24, 0xE9	; 233
    c278:	9e 4f       	sbci	r25, 0xFE	; 254
    c27a:	0e 94 69 51 	call	0xa2d2	; 0xa2d2 <dir_sdi>
    c27e:	00 97       	sbiw	r24, 0x00	; 0
    c280:	09 f0       	breq	.+2      	; 0xc284 <f_getcwd+0x130>
    c282:	91 c0       	rjmp	.+290    	; 0xc3a6 <f_getcwd+0x252>
    c284:	60 e0       	ldi	r22, 0x00	; 0
    c286:	70 e0       	ldi	r23, 0x00	; 0
    c288:	ce 01       	movw	r24, r28
    c28a:	89 5e       	subi	r24, 0xE9	; 233
    c28c:	9e 4f       	sbci	r25, 0xFE	; 254
    c28e:	0e 94 02 55 	call	0xaa04	; 0xaa04 <dir_read>
    c292:	00 97       	sbiw	r24, 0x00	; 0
    c294:	09 f0       	breq	.+2      	; 0xc298 <f_getcwd+0x144>
    c296:	89 c0       	rjmp	.+274    	; 0xc3aa <f_getcwd+0x256>
    c298:	cf 5c       	subi	r28, 0xCF	; 207
    c29a:	de 4f       	sbci	r29, 0xFE	; 254
    c29c:	68 81       	ld	r22, Y
    c29e:	79 81       	ldd	r23, Y+1	; 0x01
    c2a0:	c1 53       	subi	r28, 0x31	; 49
    c2a2:	d1 40       	sbci	r29, 0x01	; 1
    c2a4:	cb 5b       	subi	r28, 0xBB	; 187
    c2a6:	de 4f       	sbci	r29, 0xFE	; 254
    c2a8:	e8 81       	ld	r30, Y
    c2aa:	f9 81       	ldd	r31, Y+1	; 0x01
    c2ac:	c5 54       	subi	r28, 0x45	; 69
    c2ae:	d1 40       	sbci	r29, 0x01	; 1
    c2b0:	80 81       	ld	r24, Z
    c2b2:	0e 94 56 4b 	call	0x96ac	; 0x96ac <ld_clust.isra.4>
    c2b6:	46 16       	cp	r4, r22
    c2b8:	57 06       	cpc	r5, r23
    c2ba:	68 06       	cpc	r6, r24
    c2bc:	79 06       	cpc	r7, r25
    c2be:	41 f4       	brne	.+16     	; 0xc2d0 <f_getcwd+0x17c>
    c2c0:	b6 01       	movw	r22, r12
    c2c2:	ce 01       	movw	r24, r28
    c2c4:	89 5e       	subi	r24, 0xE9	; 233
    c2c6:	9e 4f       	sbci	r25, 0xFE	; 254
    c2c8:	0e 94 46 4a 	call	0x948c	; 0x948c <get_fileinfo>
    c2cc:	f6 01       	movw	r30, r12
    c2ce:	0a c0       	rjmp	.+20     	; 0xc2e4 <f_getcwd+0x190>
    c2d0:	60 e0       	ldi	r22, 0x00	; 0
    c2d2:	70 e0       	ldi	r23, 0x00	; 0
    c2d4:	ce 01       	movw	r24, r28
    c2d6:	89 5e       	subi	r24, 0xE9	; 233
    c2d8:	9e 4f       	sbci	r25, 0xFE	; 254
    c2da:	0e 94 e1 53 	call	0xa7c2	; 0xa7c2 <dir_next>
    c2de:	00 97       	sbiw	r24, 0x00	; 0
    c2e0:	89 f2       	breq	.-94     	; 0xc284 <f_getcwd+0x130>
    c2e2:	63 c0       	rjmp	.+198    	; 0xc3aa <f_getcwd+0x256>
    c2e4:	cf 01       	movw	r24, r30
    c2e6:	8c 19       	sub	r24, r12
    c2e8:	9d 09       	sbc	r25, r13
    c2ea:	31 96       	adiw	r30, 0x01	; 1
    c2ec:	25 89       	ldd	r18, Z+21	; 0x15
    c2ee:	21 11       	cpse	r18, r1
    c2f0:	f9 cf       	rjmp	.-14     	; 0xc2e4 <f_getcwd+0x190>
    c2f2:	9c 01       	movw	r18, r24
    c2f4:	2f 5f       	subi	r18, 0xFF	; 255
    c2f6:	3f 4f       	sbci	r19, 0xFF	; 255
    c2f8:	02 17       	cp	r16, r18
    c2fa:	13 07       	cpc	r17, r19
    c2fc:	08 f4       	brcc	.+2      	; 0xc300 <f_getcwd+0x1ac>
    c2fe:	51 c0       	rjmp	.+162    	; 0xc3a2 <f_getcwd+0x24e>
    c300:	f6 01       	movw	r30, r12
    c302:	e8 0f       	add	r30, r24
    c304:	f9 1f       	adc	r31, r25
    c306:	98 01       	movw	r18, r16
    c308:	ce 16       	cp	r12, r30
    c30a:	df 06       	cpc	r13, r31
    c30c:	71 f0       	breq	.+28     	; 0xc32a <f_getcwd+0x1d6>
    c30e:	21 50       	subi	r18, 0x01	; 1
    c310:	31 09       	sbc	r19, r1
    c312:	45 89       	ldd	r20, Z+21	; 0x15
    c314:	c9 5b       	subi	r28, 0xB9	; 185
    c316:	de 4f       	sbci	r29, 0xFE	; 254
    c318:	a8 81       	ld	r26, Y
    c31a:	b9 81       	ldd	r27, Y+1	; 0x01
    c31c:	c7 54       	subi	r28, 0x47	; 71
    c31e:	d1 40       	sbci	r29, 0x01	; 1
    c320:	a2 0f       	add	r26, r18
    c322:	b3 1f       	adc	r27, r19
    c324:	4c 93       	st	X, r20
    c326:	31 97       	sbiw	r30, 0x01	; 1
    c328:	ef cf       	rjmp	.-34     	; 0xc308 <f_getcwd+0x1b4>
    c32a:	80 95       	com	r24
    c32c:	90 95       	com	r25
    c32e:	08 0f       	add	r16, r24
    c330:	19 1f       	adc	r17, r25
    c332:	c9 5b       	subi	r28, 0xB9	; 185
    c334:	de 4f       	sbci	r29, 0xFE	; 254
    c336:	e8 81       	ld	r30, Y
    c338:	f9 81       	ldd	r31, Y+1	; 0x01
    c33a:	c7 54       	subi	r28, 0x47	; 71
    c33c:	d1 40       	sbci	r29, 0x01	; 1
    c33e:	e0 0f       	add	r30, r16
    c340:	f1 1f       	adc	r31, r17
    c342:	9f e2       	ldi	r25, 0x2F	; 47
    c344:	90 83       	st	Z, r25
    c346:	4f cf       	rjmp	.-354    	; 0xc1e6 <f_getcwd+0x92>
    c348:	08 15       	cp	r16, r8
    c34a:	19 05       	cpc	r17, r9
    c34c:	61 f4       	brne	.+24     	; 0xc366 <f_getcwd+0x212>
    c34e:	01 50       	subi	r16, 0x01	; 1
    c350:	11 09       	sbc	r17, r1
    c352:	c9 5b       	subi	r28, 0xB9	; 185
    c354:	de 4f       	sbci	r29, 0xFE	; 254
    c356:	e8 81       	ld	r30, Y
    c358:	f9 81       	ldd	r31, Y+1	; 0x01
    c35a:	c7 54       	subi	r28, 0x47	; 71
    c35c:	d1 40       	sbci	r29, 0x01	; 1
    c35e:	e0 0f       	add	r30, r16
    c360:	f1 1f       	adc	r31, r17
    c362:	8f e2       	ldi	r24, 0x2F	; 47
    c364:	80 83       	st	Z, r24
    c366:	ef ef       	ldi	r30, 0xFF	; 255
    c368:	ee 1a       	sub	r14, r30
    c36a:	fe 0a       	sbc	r15, r30
    c36c:	c9 5b       	subi	r28, 0xB9	; 185
    c36e:	de 4f       	sbci	r29, 0xFE	; 254
    c370:	e8 81       	ld	r30, Y
    c372:	f9 81       	ldd	r31, Y+1	; 0x01
    c374:	c7 54       	subi	r28, 0x47	; 71
    c376:	d1 40       	sbci	r29, 0x01	; 1
    c378:	e0 0f       	add	r30, r16
    c37a:	f1 1f       	adc	r31, r17
    c37c:	80 81       	ld	r24, Z
    c37e:	f7 01       	movw	r30, r14
    c380:	31 97       	sbiw	r30, 0x01	; 1
    c382:	80 83       	st	Z, r24
    c384:	0f 5f       	subi	r16, 0xFF	; 255
    c386:	1f 4f       	sbci	r17, 0xFF	; 255
    c388:	08 15       	cp	r16, r8
    c38a:	19 05       	cpc	r17, r9
    c38c:	60 f3       	brcs	.-40     	; 0xc366 <f_getcwd+0x212>
    c38e:	c5 01       	movw	r24, r10
    c390:	0e 94 75 6a 	call	0xd4ea	; 0xd4ea <ff_memfree>
    c394:	f7 01       	movw	r30, r14
    c396:	10 82       	st	Z, r1
    c398:	c1 01       	movw	r24, r2
    c39a:	0d c0       	rjmp	.+26     	; 0xc3b6 <f_getcwd+0x262>
    c39c:	81 e1       	ldi	r24, 0x11	; 17
    c39e:	90 e0       	ldi	r25, 0x00	; 0
    c3a0:	0a c0       	rjmp	.+20     	; 0xc3b6 <f_getcwd+0x262>
    c3a2:	81 e1       	ldi	r24, 0x11	; 17
    c3a4:	90 e0       	ldi	r25, 0x00	; 0
    c3a6:	1c 01       	movw	r2, r24
    c3a8:	f2 cf       	rjmp	.-28     	; 0xc38e <f_getcwd+0x23a>
    c3aa:	84 30       	cpi	r24, 0x04	; 4
    c3ac:	91 05       	cpc	r25, r1
    c3ae:	d9 f7       	brne	.-10     	; 0xc3a6 <f_getcwd+0x252>
    c3b0:	82 e0       	ldi	r24, 0x02	; 2
    c3b2:	90 e0       	ldi	r25, 0x00	; 0
    c3b4:	f8 cf       	rjmp	.-16     	; 0xc3a6 <f_getcwd+0x252>
    c3b6:	c8 5b       	subi	r28, 0xB8	; 184
    c3b8:	de 4f       	sbci	r29, 0xFE	; 254
    c3ba:	e2 e1       	ldi	r30, 0x12	; 18
    c3bc:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

0000c3c0 <f_lseek>:
    c3c0:	aa e0       	ldi	r26, 0x0A	; 10
    c3c2:	b0 e0       	ldi	r27, 0x00	; 0
    c3c4:	e6 ee       	ldi	r30, 0xE6	; 230
    c3c6:	f1 e6       	ldi	r31, 0x61	; 97
    c3c8:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
    c3cc:	1c 01       	movw	r2, r24
    c3ce:	6a 01       	movw	r12, r20
    c3d0:	7b 01       	movw	r14, r22
    c3d2:	be 01       	movw	r22, r28
    c3d4:	6f 5f       	subi	r22, 0xFF	; 255
    c3d6:	7f 4f       	sbci	r23, 0xFF	; 255
    c3d8:	0e 94 62 49 	call	0x92c4	; 0x92c4 <validate>
    c3dc:	00 97       	sbiw	r24, 0x00	; 0
    c3de:	09 f0       	breq	.+2      	; 0xc3e2 <f_lseek+0x22>
    c3e0:	a7 c2       	rjmp	.+1358   	; 0xc930 <f_lseek+0x570>
    c3e2:	f1 01       	movw	r30, r2
    c3e4:	87 85       	ldd	r24, Z+15	; 0x0f
    c3e6:	90 e0       	ldi	r25, 0x00	; 0
    c3e8:	00 97       	sbiw	r24, 0x00	; 0
    c3ea:	09 f0       	breq	.+2      	; 0xc3ee <f_lseek+0x2e>
    c3ec:	a1 c2       	rjmp	.+1346   	; 0xc930 <f_lseek+0x570>
    c3ee:	22 a1       	ldd	r18, Z+34	; 0x22
    c3f0:	33 a1       	ldd	r19, Z+35	; 0x23
    c3f2:	21 15       	cp	r18, r1
    c3f4:	31 05       	cpc	r19, r1
    c3f6:	09 f4       	brne	.+2      	; 0xc3fa <f_lseek+0x3a>
    c3f8:	2e c1       	rjmp	.+604    	; 0xc656 <f_lseek+0x296>
    c3fa:	ff ef       	ldi	r31, 0xFF	; 255
    c3fc:	cf 16       	cp	r12, r31
    c3fe:	df 06       	cpc	r13, r31
    c400:	ef 06       	cpc	r14, r31
    c402:	ff 06       	cpc	r15, r31
    c404:	09 f0       	breq	.+2      	; 0xc408 <f_lseek+0x48>
    c406:	9a c0       	rjmp	.+308    	; 0xc53c <f_lseek+0x17c>
    c408:	89 01       	movw	r16, r18
    c40a:	0c 5f       	subi	r16, 0xFC	; 252
    c40c:	1f 4f       	sbci	r17, 0xFF	; 255
    c40e:	d9 01       	movw	r26, r18
    c410:	4d 91       	ld	r20, X+
    c412:	5d 91       	ld	r21, X+
    c414:	6d 91       	ld	r22, X+
    c416:	7c 91       	ld	r23, X
    c418:	4f 83       	std	Y+7, r20	; 0x07
    c41a:	58 87       	std	Y+8, r21	; 0x08
    c41c:	69 87       	std	Y+9, r22	; 0x09
    c41e:	7a 87       	std	Y+10, r23	; 0x0a
    c420:	f1 01       	movw	r30, r2
    c422:	86 80       	ldd	r8, Z+6	; 0x06
    c424:	97 80       	ldd	r9, Z+7	; 0x07
    c426:	a0 84       	ldd	r10, Z+8	; 0x08
    c428:	b1 84       	ldd	r11, Z+9	; 0x09
    c42a:	52 e0       	ldi	r21, 0x02	; 2
    c42c:	c5 2e       	mov	r12, r21
    c42e:	d1 2c       	mov	r13, r1
    c430:	e1 2c       	mov	r14, r1
    c432:	f1 2c       	mov	r15, r1
    c434:	81 14       	cp	r8, r1
    c436:	91 04       	cpc	r9, r1
    c438:	a1 04       	cpc	r10, r1
    c43a:	b1 04       	cpc	r11, r1
    c43c:	09 f4       	brne	.+2      	; 0xc440 <f_lseek+0x80>
    c43e:	65 c0       	rjmp	.+202    	; 0xc50a <f_lseek+0x14a>
    c440:	24 01       	movw	r4, r8
    c442:	35 01       	movw	r6, r10
    c444:	1b 82       	std	Y+3, r1	; 0x03
    c446:	1c 82       	std	Y+4, r1	; 0x04
    c448:	1d 82       	std	Y+5, r1	; 0x05
    c44a:	1e 82       	std	Y+6, r1	; 0x06
    c44c:	2b 81       	ldd	r18, Y+3	; 0x03
    c44e:	3c 81       	ldd	r19, Y+4	; 0x04
    c450:	4d 81       	ldd	r20, Y+5	; 0x05
    c452:	5e 81       	ldd	r21, Y+6	; 0x06
    c454:	2f 5f       	subi	r18, 0xFF	; 255
    c456:	3f 4f       	sbci	r19, 0xFF	; 255
    c458:	4f 4f       	sbci	r20, 0xFF	; 255
    c45a:	5f 4f       	sbci	r21, 0xFF	; 255
    c45c:	2b 83       	std	Y+3, r18	; 0x03
    c45e:	3c 83       	std	Y+4, r19	; 0x04
    c460:	4d 83       	std	Y+5, r20	; 0x05
    c462:	5e 83       	std	Y+6, r21	; 0x06
    c464:	b3 01       	movw	r22, r6
    c466:	a2 01       	movw	r20, r4
    c468:	d1 01       	movw	r26, r2
    c46a:	8d 91       	ld	r24, X+
    c46c:	9c 91       	ld	r25, X
    c46e:	0e 94 b5 50 	call	0xa16a	; 0xa16a <get_fat.isra.10>
    c472:	62 30       	cpi	r22, 0x02	; 2
    c474:	71 05       	cpc	r23, r1
    c476:	81 05       	cpc	r24, r1
    c478:	91 05       	cpc	r25, r1
    c47a:	10 f4       	brcc	.+4      	; 0xc480 <f_lseek+0xc0>
    c47c:	82 e0       	ldi	r24, 0x02	; 2
    c47e:	07 c0       	rjmp	.+14     	; 0xc48e <f_lseek+0xce>
    c480:	6f 3f       	cpi	r22, 0xFF	; 255
    c482:	ff ef       	ldi	r31, 0xFF	; 255
    c484:	7f 07       	cpc	r23, r31
    c486:	8f 07       	cpc	r24, r31
    c488:	9f 07       	cpc	r25, r31
    c48a:	29 f4       	brne	.+10     	; 0xc496 <f_lseek+0xd6>
    c48c:	81 e0       	ldi	r24, 0x01	; 1
    c48e:	f1 01       	movw	r30, r2
    c490:	87 87       	std	Z+15, r24	; 0x0f
    c492:	90 e0       	ldi	r25, 0x00	; 0
    c494:	4d c2       	rjmp	.+1178   	; 0xc930 <f_lseek+0x570>
    c496:	a3 01       	movw	r20, r6
    c498:	92 01       	movw	r18, r4
    c49a:	2f 5f       	subi	r18, 0xFF	; 255
    c49c:	3f 4f       	sbci	r19, 0xFF	; 255
    c49e:	4f 4f       	sbci	r20, 0xFF	; 255
    c4a0:	5f 4f       	sbci	r21, 0xFF	; 255
    c4a2:	2b 01       	movw	r4, r22
    c4a4:	3c 01       	movw	r6, r24
    c4a6:	62 17       	cp	r22, r18
    c4a8:	73 07       	cpc	r23, r19
    c4aa:	84 07       	cpc	r24, r20
    c4ac:	95 07       	cpc	r25, r21
    c4ae:	71 f2       	breq	.-100    	; 0xc44c <f_lseek+0x8c>
    c4b0:	f2 e0       	ldi	r31, 0x02	; 2
    c4b2:	cf 0e       	add	r12, r31
    c4b4:	d1 1c       	adc	r13, r1
    c4b6:	e1 1c       	adc	r14, r1
    c4b8:	f1 1c       	adc	r15, r1
    c4ba:	2f 81       	ldd	r18, Y+7	; 0x07
    c4bc:	38 85       	ldd	r19, Y+8	; 0x08
    c4be:	49 85       	ldd	r20, Y+9	; 0x09
    c4c0:	5a 85       	ldd	r21, Y+10	; 0x0a
    c4c2:	2c 15       	cp	r18, r12
    c4c4:	3d 05       	cpc	r19, r13
    c4c6:	4e 05       	cpc	r20, r14
    c4c8:	5f 05       	cpc	r21, r15
    c4ca:	88 f0       	brcs	.+34     	; 0xc4ee <f_lseek+0x12e>
    c4cc:	2b 81       	ldd	r18, Y+3	; 0x03
    c4ce:	3c 81       	ldd	r19, Y+4	; 0x04
    c4d0:	4d 81       	ldd	r20, Y+5	; 0x05
    c4d2:	5e 81       	ldd	r21, Y+6	; 0x06
    c4d4:	d8 01       	movw	r26, r16
    c4d6:	2d 93       	st	X+, r18
    c4d8:	3d 93       	st	X+, r19
    c4da:	4d 93       	st	X+, r20
    c4dc:	5c 93       	st	X, r21
    c4de:	13 97       	sbiw	r26, 0x03	; 3
    c4e0:	f8 01       	movw	r30, r16
    c4e2:	84 82       	std	Z+4, r8	; 0x04
    c4e4:	95 82       	std	Z+5, r9	; 0x05
    c4e6:	a6 82       	std	Z+6, r10	; 0x06
    c4e8:	b7 82       	std	Z+7, r11	; 0x07
    c4ea:	08 5f       	subi	r16, 0xF8	; 248
    c4ec:	1f 4f       	sbci	r17, 0xFF	; 255
    c4ee:	e9 81       	ldd	r30, Y+1	; 0x01
    c4f0:	fa 81       	ldd	r31, Y+2	; 0x02
    c4f2:	81 8c       	ldd	r8, Z+25	; 0x19
    c4f4:	92 8c       	ldd	r9, Z+26	; 0x1a
    c4f6:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c4f8:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c4fa:	68 15       	cp	r22, r8
    c4fc:	79 05       	cpc	r23, r9
    c4fe:	8a 05       	cpc	r24, r10
    c500:	9b 05       	cpc	r25, r11
    c502:	18 f4       	brcc	.+6      	; 0xc50a <f_lseek+0x14a>
    c504:	4b 01       	movw	r8, r22
    c506:	5c 01       	movw	r10, r24
    c508:	9b cf       	rjmp	.-202    	; 0xc440 <f_lseek+0x80>
    c50a:	f1 01       	movw	r30, r2
    c50c:	a2 a1       	ldd	r26, Z+34	; 0x22
    c50e:	b3 a1       	ldd	r27, Z+35	; 0x23
    c510:	cd 92       	st	X+, r12
    c512:	dd 92       	st	X+, r13
    c514:	ed 92       	st	X+, r14
    c516:	fc 92       	st	X, r15
    c518:	13 97       	sbiw	r26, 0x03	; 3
    c51a:	2f 81       	ldd	r18, Y+7	; 0x07
    c51c:	38 85       	ldd	r19, Y+8	; 0x08
    c51e:	49 85       	ldd	r20, Y+9	; 0x09
    c520:	5a 85       	ldd	r21, Y+10	; 0x0a
    c522:	2c 15       	cp	r18, r12
    c524:	3d 05       	cpc	r19, r13
    c526:	4e 05       	cpc	r20, r14
    c528:	5f 05       	cpc	r21, r15
    c52a:	08 f4       	brcc	.+2      	; 0xc52e <f_lseek+0x16e>
    c52c:	f8 c1       	rjmp	.+1008   	; 0xc91e <f_lseek+0x55e>
    c52e:	d8 01       	movw	r26, r16
    c530:	1d 92       	st	X+, r1
    c532:	1d 92       	st	X+, r1
    c534:	1d 92       	st	X+, r1
    c536:	1c 92       	st	X, r1
    c538:	13 97       	sbiw	r26, 0x03	; 3
    c53a:	ef c1       	rjmp	.+990    	; 0xc91a <f_lseek+0x55a>
    c53c:	f1 01       	movw	r30, r2
    c53e:	82 85       	ldd	r24, Z+10	; 0x0a
    c540:	93 85       	ldd	r25, Z+11	; 0x0b
    c542:	a4 85       	ldd	r26, Z+12	; 0x0c
    c544:	b5 85       	ldd	r27, Z+13	; 0x0d
    c546:	46 01       	movw	r8, r12
    c548:	57 01       	movw	r10, r14
    c54a:	8c 15       	cp	r24, r12
    c54c:	9d 05       	cpc	r25, r13
    c54e:	ae 05       	cpc	r26, r14
    c550:	bf 05       	cpc	r27, r15
    c552:	10 f4       	brcc	.+4      	; 0xc558 <f_lseek+0x198>
    c554:	4c 01       	movw	r8, r24
    c556:	5d 01       	movw	r10, r26
    c558:	f1 01       	movw	r30, r2
    c55a:	80 8a       	std	Z+16, r8	; 0x10
    c55c:	91 8a       	std	Z+17, r9	; 0x11
    c55e:	a2 8a       	std	Z+18, r10	; 0x12
    c560:	b3 8a       	std	Z+19, r11	; 0x13
    c562:	81 14       	cp	r8, r1
    c564:	91 04       	cpc	r9, r1
    c566:	a1 04       	cpc	r10, r1
    c568:	b1 04       	cpc	r11, r1
    c56a:	09 f4       	brne	.+2      	; 0xc56e <f_lseek+0x1ae>
    c56c:	d6 c1       	rjmp	.+940    	; 0xc91a <f_lseek+0x55a>
    c56e:	24 01       	movw	r4, r8
    c570:	35 01       	movw	r6, r10
    c572:	f1 e0       	ldi	r31, 0x01	; 1
    c574:	4f 1a       	sub	r4, r31
    c576:	51 08       	sbc	r5, r1
    c578:	61 08       	sbc	r6, r1
    c57a:	71 08       	sbc	r7, r1
    c57c:	b3 01       	movw	r22, r6
    c57e:	a2 01       	movw	r20, r4
    c580:	c1 01       	movw	r24, r2
    c582:	0e 94 eb 48 	call	0x91d6	; 0x91d6 <clmt_clust>
    c586:	ab 01       	movw	r20, r22
    c588:	bc 01       	movw	r22, r24
    c58a:	f1 01       	movw	r30, r2
    c58c:	44 8b       	std	Z+20, r20	; 0x14
    c58e:	55 8b       	std	Z+21, r21	; 0x15
    c590:	66 8b       	std	Z+22, r22	; 0x16
    c592:	77 8b       	std	Z+23, r23	; 0x17
    c594:	e9 80       	ldd	r14, Y+1	; 0x01
    c596:	fa 80       	ldd	r15, Y+2	; 0x02
    c598:	c7 01       	movw	r24, r14
    c59a:	0e 94 c3 48 	call	0x9186	; 0x9186 <clst2sect>
    c59e:	61 15       	cp	r22, r1
    c5a0:	71 05       	cpc	r23, r1
    c5a2:	81 05       	cpc	r24, r1
    c5a4:	91 05       	cpc	r25, r1
    c5a6:	09 f4       	brne	.+2      	; 0xc5aa <f_lseek+0x1ea>
    c5a8:	69 cf       	rjmp	.-302    	; 0xc47c <f_lseek+0xbc>
    c5aa:	95 01       	movw	r18, r10
    c5ac:	84 01       	movw	r16, r8
    c5ae:	11 70       	andi	r17, 0x01	; 1
    c5b0:	22 27       	eor	r18, r18
    c5b2:	33 27       	eor	r19, r19
    c5b4:	01 15       	cp	r16, r1
    c5b6:	11 05       	cpc	r17, r1
    c5b8:	21 05       	cpc	r18, r1
    c5ba:	31 05       	cpc	r19, r1
    c5bc:	09 f4       	brne	.+2      	; 0xc5c0 <f_lseek+0x200>
    c5be:	ad c1       	rjmp	.+858    	; 0xc91a <f_lseek+0x55a>
    c5c0:	f7 01       	movw	r30, r14
    c5c2:	81 84       	ldd	r8, Z+9	; 0x09
    c5c4:	92 84       	ldd	r9, Z+10	; 0x0a
    c5c6:	f1 e0       	ldi	r31, 0x01	; 1
    c5c8:	8f 1a       	sub	r8, r31
    c5ca:	91 08       	sbc	r9, r1
    c5cc:	a1 2c       	mov	r10, r1
    c5ce:	b1 2c       	mov	r11, r1
    c5d0:	49 e0       	ldi	r20, 0x09	; 9
    c5d2:	76 94       	lsr	r7
    c5d4:	67 94       	ror	r6
    c5d6:	57 94       	ror	r5
    c5d8:	47 94       	ror	r4
    c5da:	4a 95       	dec	r20
    c5dc:	d1 f7       	brne	.-12     	; 0xc5d2 <f_lseek+0x212>
    c5de:	48 20       	and	r4, r8
    c5e0:	59 20       	and	r5, r9
    c5e2:	6a 20       	and	r6, r10
    c5e4:	7b 20       	and	r7, r11
    c5e6:	53 01       	movw	r10, r6
    c5e8:	42 01       	movw	r8, r4
    c5ea:	86 0e       	add	r8, r22
    c5ec:	97 1e       	adc	r9, r23
    c5ee:	a8 1e       	adc	r10, r24
    c5f0:	b9 1e       	adc	r11, r25
    c5f2:	f1 01       	movw	r30, r2
    c5f4:	20 8d       	ldd	r18, Z+24	; 0x18
    c5f6:	31 8d       	ldd	r19, Z+25	; 0x19
    c5f8:	42 8d       	ldd	r20, Z+26	; 0x1a
    c5fa:	53 8d       	ldd	r21, Z+27	; 0x1b
    c5fc:	82 16       	cp	r8, r18
    c5fe:	93 06       	cpc	r9, r19
    c600:	a4 06       	cpc	r10, r20
    c602:	b5 06       	cpc	r11, r21
    c604:	09 f4       	brne	.+2      	; 0xc608 <f_lseek+0x248>
    c606:	89 c1       	rjmp	.+786    	; 0xc91a <f_lseek+0x55a>
    c608:	86 85       	ldd	r24, Z+14	; 0x0e
    c60a:	b1 01       	movw	r22, r2
    c60c:	6c 5d       	subi	r22, 0xDC	; 220
    c60e:	7f 4f       	sbci	r23, 0xFF	; 255
    c610:	6b 01       	movw	r12, r22
    c612:	87 ff       	sbrs	r24, 7
    c614:	0d c0       	rjmp	.+26     	; 0xc630 <f_lseek+0x270>
    c616:	01 e0       	ldi	r16, 0x01	; 1
    c618:	10 e0       	ldi	r17, 0x00	; 0
    c61a:	f7 01       	movw	r30, r14
    c61c:	81 81       	ldd	r24, Z+1	; 0x01
    c61e:	0e 94 3e 6b 	call	0xd67c	; 0xd67c <disk_write>
    c622:	89 2b       	or	r24, r25
    c624:	09 f0       	breq	.+2      	; 0xc628 <f_lseek+0x268>
    c626:	32 cf       	rjmp	.-412    	; 0xc48c <f_lseek+0xcc>
    c628:	f1 01       	movw	r30, r2
    c62a:	86 85       	ldd	r24, Z+14	; 0x0e
    c62c:	8f 77       	andi	r24, 0x7F	; 127
    c62e:	86 87       	std	Z+14, r24	; 0x0e
    c630:	e9 81       	ldd	r30, Y+1	; 0x01
    c632:	fa 81       	ldd	r31, Y+2	; 0x02
    c634:	01 e0       	ldi	r16, 0x01	; 1
    c636:	10 e0       	ldi	r17, 0x00	; 0
    c638:	a5 01       	movw	r20, r10
    c63a:	94 01       	movw	r18, r8
    c63c:	b6 01       	movw	r22, r12
    c63e:	81 81       	ldd	r24, Z+1	; 0x01
    c640:	0e 94 2e 6b 	call	0xd65c	; 0xd65c <disk_read>
    c644:	89 2b       	or	r24, r25
    c646:	09 f0       	breq	.+2      	; 0xc64a <f_lseek+0x28a>
    c648:	21 cf       	rjmp	.-446    	; 0xc48c <f_lseek+0xcc>
    c64a:	f1 01       	movw	r30, r2
    c64c:	80 8e       	std	Z+24, r8	; 0x18
    c64e:	91 8e       	std	Z+25, r9	; 0x19
    c650:	a2 8e       	std	Z+26, r10	; 0x1a
    c652:	b3 8e       	std	Z+27, r11	; 0x1b
    c654:	62 c1       	rjmp	.+708    	; 0xc91a <f_lseek+0x55a>
    c656:	f1 01       	movw	r30, r2
    c658:	82 85       	ldd	r24, Z+10	; 0x0a
    c65a:	93 85       	ldd	r25, Z+11	; 0x0b
    c65c:	a4 85       	ldd	r26, Z+12	; 0x0c
    c65e:	b5 85       	ldd	r27, Z+13	; 0x0d
    c660:	8c 15       	cp	r24, r12
    c662:	9d 05       	cpc	r25, r13
    c664:	ae 05       	cpc	r26, r14
    c666:	bf 05       	cpc	r27, r15
    c668:	28 f4       	brcc	.+10     	; 0xc674 <f_lseek+0x2b4>
    c66a:	26 85       	ldd	r18, Z+14	; 0x0e
    c66c:	21 fd       	sbrc	r18, 1
    c66e:	02 c0       	rjmp	.+4      	; 0xc674 <f_lseek+0x2b4>
    c670:	6c 01       	movw	r12, r24
    c672:	7d 01       	movw	r14, r26
    c674:	f1 01       	movw	r30, r2
    c676:	40 88       	ldd	r4, Z+16	; 0x10
    c678:	51 88       	ldd	r5, Z+17	; 0x11
    c67a:	62 88       	ldd	r6, Z+18	; 0x12
    c67c:	73 88       	ldd	r7, Z+19	; 0x13
    c67e:	10 8a       	std	Z+16, r1	; 0x10
    c680:	11 8a       	std	Z+17, r1	; 0x11
    c682:	12 8a       	std	Z+18, r1	; 0x12
    c684:	13 8a       	std	Z+19, r1	; 0x13
    c686:	c1 14       	cp	r12, r1
    c688:	d1 04       	cpc	r13, r1
    c68a:	e1 04       	cpc	r14, r1
    c68c:	f1 04       	cpc	r15, r1
    c68e:	09 f4       	brne	.+2      	; 0xc692 <f_lseek+0x2d2>
    c690:	48 c1       	rjmp	.+656    	; 0xc922 <f_lseek+0x562>
    c692:	e9 81       	ldd	r30, Y+1	; 0x01
    c694:	fa 81       	ldd	r31, Y+2	; 0x02
    c696:	81 84       	ldd	r8, Z+9	; 0x09
    c698:	92 84       	ldd	r9, Z+10	; 0x0a
    c69a:	a1 2c       	mov	r10, r1
    c69c:	b1 2c       	mov	r11, r1
    c69e:	39 e0       	ldi	r19, 0x09	; 9
    c6a0:	88 0c       	add	r8, r8
    c6a2:	99 1c       	adc	r9, r9
    c6a4:	aa 1c       	adc	r10, r10
    c6a6:	bb 1c       	adc	r11, r11
    c6a8:	3a 95       	dec	r19
    c6aa:	d1 f7       	brne	.-12     	; 0xc6a0 <f_lseek+0x2e0>
    c6ac:	41 14       	cp	r4, r1
    c6ae:	51 04       	cpc	r5, r1
    c6b0:	61 04       	cpc	r6, r1
    c6b2:	71 04       	cpc	r7, r1
    c6b4:	d9 f1       	breq	.+118    	; 0xc72c <f_lseek+0x36c>
    c6b6:	f1 e0       	ldi	r31, 0x01	; 1
    c6b8:	4f 1a       	sub	r4, r31
    c6ba:	51 08       	sbc	r5, r1
    c6bc:	61 08       	sbc	r6, r1
    c6be:	71 08       	sbc	r7, r1
    c6c0:	c7 01       	movw	r24, r14
    c6c2:	b6 01       	movw	r22, r12
    c6c4:	61 50       	subi	r22, 0x01	; 1
    c6c6:	71 09       	sbc	r23, r1
    c6c8:	81 09       	sbc	r24, r1
    c6ca:	91 09       	sbc	r25, r1
    c6cc:	a5 01       	movw	r20, r10
    c6ce:	94 01       	movw	r18, r8
    c6d0:	0e 94 04 e4 	call	0x1c808	; 0x1c808 <__udivmodsi4>
    c6d4:	2b 83       	std	Y+3, r18	; 0x03
    c6d6:	3c 83       	std	Y+4, r19	; 0x04
    c6d8:	4d 83       	std	Y+5, r20	; 0x05
    c6da:	5e 83       	std	Y+6, r21	; 0x06
    c6dc:	c3 01       	movw	r24, r6
    c6de:	b2 01       	movw	r22, r4
    c6e0:	a5 01       	movw	r20, r10
    c6e2:	94 01       	movw	r18, r8
    c6e4:	0e 94 04 e4 	call	0x1c808	; 0x1c808 <__udivmodsi4>
    c6e8:	6b 81       	ldd	r22, Y+3	; 0x03
    c6ea:	7c 81       	ldd	r23, Y+4	; 0x04
    c6ec:	8d 81       	ldd	r24, Y+5	; 0x05
    c6ee:	9e 81       	ldd	r25, Y+6	; 0x06
    c6f0:	62 17       	cp	r22, r18
    c6f2:	73 07       	cpc	r23, r19
    c6f4:	84 07       	cpc	r24, r20
    c6f6:	95 07       	cpc	r25, r21
    c6f8:	c8 f0       	brcs	.+50     	; 0xc72c <f_lseek+0x36c>
    c6fa:	88 27       	eor	r24, r24
    c6fc:	99 27       	eor	r25, r25
    c6fe:	dc 01       	movw	r26, r24
    c700:	88 19       	sub	r24, r8
    c702:	99 09       	sbc	r25, r9
    c704:	aa 09       	sbc	r26, r10
    c706:	bb 09       	sbc	r27, r11
    c708:	48 22       	and	r4, r24
    c70a:	59 22       	and	r5, r25
    c70c:	6a 22       	and	r6, r26
    c70e:	7b 22       	and	r7, r27
    c710:	f1 01       	movw	r30, r2
    c712:	40 8a       	std	Z+16, r4	; 0x10
    c714:	51 8a       	std	Z+17, r5	; 0x11
    c716:	62 8a       	std	Z+18, r6	; 0x12
    c718:	73 8a       	std	Z+19, r7	; 0x13
    c71a:	c4 18       	sub	r12, r4
    c71c:	d5 08       	sbc	r13, r5
    c71e:	e6 08       	sbc	r14, r6
    c720:	f7 08       	sbc	r15, r7
    c722:	44 89       	ldd	r20, Z+20	; 0x14
    c724:	55 89       	ldd	r21, Z+21	; 0x15
    c726:	66 89       	ldd	r22, Z+22	; 0x16
    c728:	77 89       	ldd	r23, Z+23	; 0x17
    c72a:	29 c0       	rjmp	.+82     	; 0xc77e <f_lseek+0x3be>
    c72c:	f1 01       	movw	r30, r2
    c72e:	46 81       	ldd	r20, Z+6	; 0x06
    c730:	57 81       	ldd	r21, Z+7	; 0x07
    c732:	60 85       	ldd	r22, Z+8	; 0x08
    c734:	71 85       	ldd	r23, Z+9	; 0x09
    c736:	41 15       	cp	r20, r1
    c738:	51 05       	cpc	r21, r1
    c73a:	61 05       	cpc	r22, r1
    c73c:	71 05       	cpc	r23, r1
    c73e:	d1 f4       	brne	.+52     	; 0xc774 <f_lseek+0x3b4>
    c740:	40 e0       	ldi	r20, 0x00	; 0
    c742:	50 e0       	ldi	r21, 0x00	; 0
    c744:	ba 01       	movw	r22, r20
    c746:	c1 01       	movw	r24, r2
    c748:	0e 94 2a 52 	call	0xa454	; 0xa454 <create_chain>
    c74c:	ab 01       	movw	r20, r22
    c74e:	bc 01       	movw	r22, r24
    c750:	41 30       	cpi	r20, 0x01	; 1
    c752:	51 05       	cpc	r21, r1
    c754:	61 05       	cpc	r22, r1
    c756:	71 05       	cpc	r23, r1
    c758:	09 f4       	brne	.+2      	; 0xc75c <f_lseek+0x39c>
    c75a:	90 ce       	rjmp	.-736    	; 0xc47c <f_lseek+0xbc>
    c75c:	4f 3f       	cpi	r20, 0xFF	; 255
    c75e:	ff ef       	ldi	r31, 0xFF	; 255
    c760:	5f 07       	cpc	r21, r31
    c762:	6f 07       	cpc	r22, r31
    c764:	7f 07       	cpc	r23, r31
    c766:	09 f4       	brne	.+2      	; 0xc76a <f_lseek+0x3aa>
    c768:	91 ce       	rjmp	.-734    	; 0xc48c <f_lseek+0xcc>
    c76a:	f1 01       	movw	r30, r2
    c76c:	46 83       	std	Z+6, r20	; 0x06
    c76e:	57 83       	std	Z+7, r21	; 0x07
    c770:	60 87       	std	Z+8, r22	; 0x08
    c772:	71 87       	std	Z+9, r23	; 0x09
    c774:	f1 01       	movw	r30, r2
    c776:	44 8b       	std	Z+20, r20	; 0x14
    c778:	55 8b       	std	Z+21, r21	; 0x15
    c77a:	66 8b       	std	Z+22, r22	; 0x16
    c77c:	77 8b       	std	Z+23, r23	; 0x17
    c77e:	41 15       	cp	r20, r1
    c780:	51 05       	cpc	r21, r1
    c782:	61 05       	cpc	r22, r1
    c784:	71 05       	cpc	r23, r1
    c786:	09 f0       	breq	.+2      	; 0xc78a <f_lseek+0x3ca>
    c788:	40 c0       	rjmp	.+128    	; 0xc80a <f_lseek+0x44a>
    c78a:	c1 2c       	mov	r12, r1
    c78c:	d1 2c       	mov	r13, r1
    c78e:	76 01       	movw	r14, r12
    c790:	79 c0       	rjmp	.+242    	; 0xc884 <f_lseek+0x4c4>
    c792:	c8 18       	sub	r12, r8
    c794:	d9 08       	sbc	r13, r9
    c796:	ea 08       	sbc	r14, r10
    c798:	fb 08       	sbc	r15, r11
    c79a:	f1 01       	movw	r30, r2
    c79c:	80 89       	ldd	r24, Z+16	; 0x10
    c79e:	91 89       	ldd	r25, Z+17	; 0x11
    c7a0:	a2 89       	ldd	r26, Z+18	; 0x12
    c7a2:	b3 89       	ldd	r27, Z+19	; 0x13
    c7a4:	88 0d       	add	r24, r8
    c7a6:	99 1d       	adc	r25, r9
    c7a8:	aa 1d       	adc	r26, r10
    c7aa:	bb 1d       	adc	r27, r11
    c7ac:	80 8b       	std	Z+16, r24	; 0x10
    c7ae:	91 8b       	std	Z+17, r25	; 0x11
    c7b0:	a2 8b       	std	Z+18, r26	; 0x12
    c7b2:	b3 8b       	std	Z+19, r27	; 0x13
    c7b4:	86 85       	ldd	r24, Z+14	; 0x0e
    c7b6:	81 ff       	sbrs	r24, 1
    c7b8:	2f c0       	rjmp	.+94     	; 0xc818 <f_lseek+0x458>
    c7ba:	c1 01       	movw	r24, r2
    c7bc:	0e 94 2a 52 	call	0xa454	; 0xa454 <create_chain>
    c7c0:	ab 01       	movw	r20, r22
    c7c2:	bc 01       	movw	r22, r24
    c7c4:	41 15       	cp	r20, r1
    c7c6:	51 05       	cpc	r21, r1
    c7c8:	61 05       	cpc	r22, r1
    c7ca:	71 05       	cpc	r23, r1
    c7cc:	61 f1       	breq	.+88     	; 0xc826 <f_lseek+0x466>
    c7ce:	4f 3f       	cpi	r20, 0xFF	; 255
    c7d0:	bf ef       	ldi	r27, 0xFF	; 255
    c7d2:	5b 07       	cpc	r21, r27
    c7d4:	6b 07       	cpc	r22, r27
    c7d6:	7b 07       	cpc	r23, r27
    c7d8:	09 f4       	brne	.+2      	; 0xc7dc <f_lseek+0x41c>
    c7da:	58 ce       	rjmp	.-848    	; 0xc48c <f_lseek+0xcc>
    c7dc:	42 30       	cpi	r20, 0x02	; 2
    c7de:	51 05       	cpc	r21, r1
    c7e0:	61 05       	cpc	r22, r1
    c7e2:	71 05       	cpc	r23, r1
    c7e4:	08 f4       	brcc	.+2      	; 0xc7e8 <f_lseek+0x428>
    c7e6:	4a ce       	rjmp	.-876    	; 0xc47c <f_lseek+0xbc>
    c7e8:	e9 81       	ldd	r30, Y+1	; 0x01
    c7ea:	fa 81       	ldd	r31, Y+2	; 0x02
    c7ec:	81 8d       	ldd	r24, Z+25	; 0x19
    c7ee:	92 8d       	ldd	r25, Z+26	; 0x1a
    c7f0:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c7f2:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c7f4:	48 17       	cp	r20, r24
    c7f6:	59 07       	cpc	r21, r25
    c7f8:	6a 07       	cpc	r22, r26
    c7fa:	7b 07       	cpc	r23, r27
    c7fc:	08 f0       	brcs	.+2      	; 0xc800 <f_lseek+0x440>
    c7fe:	3e ce       	rjmp	.-900    	; 0xc47c <f_lseek+0xbc>
    c800:	f1 01       	movw	r30, r2
    c802:	44 8b       	std	Z+20, r20	; 0x14
    c804:	55 8b       	std	Z+21, r21	; 0x15
    c806:	66 8b       	std	Z+22, r22	; 0x16
    c808:	77 8b       	std	Z+23, r23	; 0x17
    c80a:	8c 14       	cp	r8, r12
    c80c:	9d 04       	cpc	r9, r13
    c80e:	ae 04       	cpc	r10, r14
    c810:	bf 04       	cpc	r11, r15
    c812:	08 f4       	brcc	.+2      	; 0xc816 <f_lseek+0x456>
    c814:	be cf       	rjmp	.-132    	; 0xc792 <f_lseek+0x3d2>
    c816:	0a c0       	rjmp	.+20     	; 0xc82c <f_lseek+0x46c>
    c818:	80 81       	ld	r24, Z
    c81a:	91 81       	ldd	r25, Z+1	; 0x01
    c81c:	0e 94 b5 50 	call	0xa16a	; 0xa16a <get_fat.isra.10>
    c820:	ab 01       	movw	r20, r22
    c822:	bc 01       	movw	r22, r24
    c824:	d4 cf       	rjmp	.-88     	; 0xc7ce <f_lseek+0x40e>
    c826:	c1 2c       	mov	r12, r1
    c828:	d1 2c       	mov	r13, r1
    c82a:	76 01       	movw	r14, r12
    c82c:	f1 01       	movw	r30, r2
    c82e:	80 89       	ldd	r24, Z+16	; 0x10
    c830:	91 89       	ldd	r25, Z+17	; 0x11
    c832:	a2 89       	ldd	r26, Z+18	; 0x12
    c834:	b3 89       	ldd	r27, Z+19	; 0x13
    c836:	8c 0d       	add	r24, r12
    c838:	9d 1d       	adc	r25, r13
    c83a:	ae 1d       	adc	r26, r14
    c83c:	bf 1d       	adc	r27, r15
    c83e:	80 8b       	std	Z+16, r24	; 0x10
    c840:	91 8b       	std	Z+17, r25	; 0x11
    c842:	a2 8b       	std	Z+18, r26	; 0x12
    c844:	b3 8b       	std	Z+19, r27	; 0x13
    c846:	d7 01       	movw	r26, r14
    c848:	c6 01       	movw	r24, r12
    c84a:	91 70       	andi	r25, 0x01	; 1
    c84c:	aa 27       	eor	r26, r26
    c84e:	bb 27       	eor	r27, r27
    c850:	89 2b       	or	r24, r25
    c852:	8a 2b       	or	r24, r26
    c854:	8b 2b       	or	r24, r27
    c856:	09 f4       	brne	.+2      	; 0xc85a <f_lseek+0x49a>
    c858:	98 cf       	rjmp	.-208    	; 0xc78a <f_lseek+0x3ca>
    c85a:	89 81       	ldd	r24, Y+1	; 0x01
    c85c:	9a 81       	ldd	r25, Y+2	; 0x02
    c85e:	0e 94 c3 48 	call	0x9186	; 0x9186 <clst2sect>
    c862:	61 15       	cp	r22, r1
    c864:	71 05       	cpc	r23, r1
    c866:	81 05       	cpc	r24, r1
    c868:	91 05       	cpc	r25, r1
    c86a:	09 f4       	brne	.+2      	; 0xc86e <f_lseek+0x4ae>
    c86c:	07 ce       	rjmp	.-1010   	; 0xc47c <f_lseek+0xbc>
    c86e:	29 e0       	ldi	r18, 0x09	; 9
    c870:	f6 94       	lsr	r15
    c872:	e7 94       	ror	r14
    c874:	d7 94       	ror	r13
    c876:	c7 94       	ror	r12
    c878:	2a 95       	dec	r18
    c87a:	d1 f7       	brne	.-12     	; 0xc870 <f_lseek+0x4b0>
    c87c:	c6 0e       	add	r12, r22
    c87e:	d7 1e       	adc	r13, r23
    c880:	e8 1e       	adc	r14, r24
    c882:	f9 1e       	adc	r15, r25
    c884:	f1 01       	movw	r30, r2
    c886:	80 89       	ldd	r24, Z+16	; 0x10
    c888:	91 89       	ldd	r25, Z+17	; 0x11
    c88a:	a2 89       	ldd	r26, Z+18	; 0x12
    c88c:	b3 89       	ldd	r27, Z+19	; 0x13
    c88e:	42 85       	ldd	r20, Z+10	; 0x0a
    c890:	53 85       	ldd	r21, Z+11	; 0x0b
    c892:	64 85       	ldd	r22, Z+12	; 0x0c
    c894:	75 85       	ldd	r23, Z+13	; 0x0d
    c896:	48 17       	cp	r20, r24
    c898:	59 07       	cpc	r21, r25
    c89a:	6a 07       	cpc	r22, r26
    c89c:	7b 07       	cpc	r23, r27
    c89e:	38 f4       	brcc	.+14     	; 0xc8ae <f_lseek+0x4ee>
    c8a0:	82 87       	std	Z+10, r24	; 0x0a
    c8a2:	93 87       	std	Z+11, r25	; 0x0b
    c8a4:	a4 87       	std	Z+12, r26	; 0x0c
    c8a6:	b5 87       	std	Z+13, r27	; 0x0d
    c8a8:	26 85       	ldd	r18, Z+14	; 0x0e
    c8aa:	20 64       	ori	r18, 0x40	; 64
    c8ac:	26 87       	std	Z+14, r18	; 0x0e
    c8ae:	91 70       	andi	r25, 0x01	; 1
    c8b0:	aa 27       	eor	r26, r26
    c8b2:	bb 27       	eor	r27, r27
    c8b4:	89 2b       	or	r24, r25
    c8b6:	8a 2b       	or	r24, r26
    c8b8:	8b 2b       	or	r24, r27
    c8ba:	79 f1       	breq	.+94     	; 0xc91a <f_lseek+0x55a>
    c8bc:	f1 01       	movw	r30, r2
    c8be:	20 8d       	ldd	r18, Z+24	; 0x18
    c8c0:	31 8d       	ldd	r19, Z+25	; 0x19
    c8c2:	42 8d       	ldd	r20, Z+26	; 0x1a
    c8c4:	53 8d       	ldd	r21, Z+27	; 0x1b
    c8c6:	2c 15       	cp	r18, r12
    c8c8:	3d 05       	cpc	r19, r13
    c8ca:	4e 05       	cpc	r20, r14
    c8cc:	5f 05       	cpc	r21, r15
    c8ce:	29 f1       	breq	.+74     	; 0xc91a <f_lseek+0x55a>
    c8d0:	86 85       	ldd	r24, Z+14	; 0x0e
    c8d2:	b1 01       	movw	r22, r2
    c8d4:	6c 5d       	subi	r22, 0xDC	; 220
    c8d6:	7f 4f       	sbci	r23, 0xFF	; 255
    c8d8:	5b 01       	movw	r10, r22
    c8da:	87 ff       	sbrs	r24, 7
    c8dc:	0d c0       	rjmp	.+26     	; 0xc8f8 <f_lseek+0x538>
    c8de:	e9 81       	ldd	r30, Y+1	; 0x01
    c8e0:	fa 81       	ldd	r31, Y+2	; 0x02
    c8e2:	01 e0       	ldi	r16, 0x01	; 1
    c8e4:	10 e0       	ldi	r17, 0x00	; 0
    c8e6:	81 81       	ldd	r24, Z+1	; 0x01
    c8e8:	c9 d6       	rcall	.+3474   	; 0xd67c <disk_write>
    c8ea:	89 2b       	or	r24, r25
    c8ec:	09 f0       	breq	.+2      	; 0xc8f0 <f_lseek+0x530>
    c8ee:	ce cd       	rjmp	.-1124   	; 0xc48c <f_lseek+0xcc>
    c8f0:	f1 01       	movw	r30, r2
    c8f2:	86 85       	ldd	r24, Z+14	; 0x0e
    c8f4:	8f 77       	andi	r24, 0x7F	; 127
    c8f6:	86 87       	std	Z+14, r24	; 0x0e
    c8f8:	e9 81       	ldd	r30, Y+1	; 0x01
    c8fa:	fa 81       	ldd	r31, Y+2	; 0x02
    c8fc:	01 e0       	ldi	r16, 0x01	; 1
    c8fe:	10 e0       	ldi	r17, 0x00	; 0
    c900:	a7 01       	movw	r20, r14
    c902:	96 01       	movw	r18, r12
    c904:	b5 01       	movw	r22, r10
    c906:	81 81       	ldd	r24, Z+1	; 0x01
    c908:	a9 d6       	rcall	.+3410   	; 0xd65c <disk_read>
    c90a:	89 2b       	or	r24, r25
    c90c:	09 f0       	breq	.+2      	; 0xc910 <f_lseek+0x550>
    c90e:	be cd       	rjmp	.-1156   	; 0xc48c <f_lseek+0xcc>
    c910:	f1 01       	movw	r30, r2
    c912:	c0 8e       	std	Z+24, r12	; 0x18
    c914:	d1 8e       	std	Z+25, r13	; 0x19
    c916:	e2 8e       	std	Z+26, r14	; 0x1a
    c918:	f3 8e       	std	Z+27, r15	; 0x1b
    c91a:	80 e0       	ldi	r24, 0x00	; 0
    c91c:	ba cd       	rjmp	.-1164   	; 0xc492 <f_lseek+0xd2>
    c91e:	81 e1       	ldi	r24, 0x11	; 17
    c920:	b8 cd       	rjmp	.-1168   	; 0xc492 <f_lseek+0xd2>
    c922:	80 e0       	ldi	r24, 0x00	; 0
    c924:	90 e0       	ldi	r25, 0x00	; 0
    c926:	dc 01       	movw	r26, r24
    c928:	c1 2c       	mov	r12, r1
    c92a:	d1 2c       	mov	r13, r1
    c92c:	76 01       	movw	r14, r12
    c92e:	bf cf       	rjmp	.-130    	; 0xc8ae <f_lseek+0x4ee>
    c930:	2a 96       	adiw	r28, 0x0a	; 10
    c932:	e2 e1       	ldi	r30, 0x12	; 18
    c934:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

0000c938 <f_opendir>:
    c938:	a4 e0       	ldi	r26, 0x04	; 4
    c93a:	b0 e0       	ldi	r27, 0x00	; 0
    c93c:	e2 ea       	ldi	r30, 0xA2	; 162
    c93e:	f4 e6       	ldi	r31, 0x64	; 100
    c940:	0c 94 90 e4 	jmp	0x1c920	; 0x1c920 <__prologue_saves__+0x14>
    c944:	7c 83       	std	Y+4, r23	; 0x04
    c946:	6b 83       	std	Y+3, r22	; 0x03
    c948:	00 97       	sbiw	r24, 0x00	; 0
    c94a:	09 f4       	brne	.+2      	; 0xc94e <f_opendir+0x16>
    c94c:	48 c0       	rjmp	.+144    	; 0xc9de <f_opendir+0xa6>
    c94e:	8c 01       	movw	r16, r24
    c950:	40 e0       	ldi	r20, 0x00	; 0
    c952:	be 01       	movw	r22, r28
    c954:	6f 5f       	subi	r22, 0xFF	; 255
    c956:	7f 4f       	sbci	r23, 0xFF	; 255
    c958:	ce 01       	movw	r24, r28
    c95a:	03 96       	adiw	r24, 0x03	; 3
    c95c:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
    c960:	7c 01       	movw	r14, r24
    c962:	89 2b       	or	r24, r25
    c964:	b9 f5       	brne	.+110    	; 0xc9d4 <f_opendir+0x9c>
    c966:	89 81       	ldd	r24, Y+1	; 0x01
    c968:	9a 81       	ldd	r25, Y+2	; 0x02
    c96a:	f8 01       	movw	r30, r16
    c96c:	91 83       	std	Z+1, r25	; 0x01
    c96e:	80 83       	st	Z, r24
    c970:	80 e0       	ldi	r24, 0x00	; 0
    c972:	92 e0       	ldi	r25, 0x02	; 2
    c974:	b7 d5       	rcall	.+2926   	; 0xd4e4 <ff_memalloc>
    c976:	6c 01       	movw	r12, r24
    c978:	00 97       	sbiw	r24, 0x00	; 0
    c97a:	99 f1       	breq	.+102    	; 0xc9e2 <f_opendir+0xaa>
    c97c:	e9 81       	ldd	r30, Y+1	; 0x01
    c97e:	fa 81       	ldd	r31, Y+2	; 0x02
    c980:	94 87       	std	Z+12, r25	; 0x0c
    c982:	83 87       	std	Z+11, r24	; 0x0b
    c984:	6b 81       	ldd	r22, Y+3	; 0x03
    c986:	7c 81       	ldd	r23, Y+4	; 0x04
    c988:	c8 01       	movw	r24, r16
    c98a:	0e 94 af 58 	call	0xb15e	; 0xb15e <follow_path>
    c98e:	7c 01       	movw	r14, r24
    c990:	89 2b       	or	r24, r25
    c992:	b9 f4       	brne	.+46     	; 0xc9c2 <f_opendir+0x8a>
    c994:	f8 01       	movw	r30, r16
    c996:	87 a1       	ldd	r24, Z+39	; 0x27
    c998:	87 fd       	sbrc	r24, 7
    c99a:	28 c0       	rjmp	.+80     	; 0xc9ec <f_opendir+0xb4>
    c99c:	84 81       	ldd	r24, Z+4	; 0x04
    c99e:	84 ff       	sbrs	r24, 4
    c9a0:	0d c0       	rjmp	.+26     	; 0xc9bc <f_opendir+0x84>
    c9a2:	62 8d       	ldd	r22, Z+26	; 0x1a
    c9a4:	73 8d       	ldd	r23, Z+27	; 0x1b
    c9a6:	e9 81       	ldd	r30, Y+1	; 0x01
    c9a8:	fa 81       	ldd	r31, Y+2	; 0x02
    c9aa:	80 81       	ld	r24, Z
    c9ac:	0e 94 56 4b 	call	0x96ac	; 0x96ac <ld_clust.isra.4>
    c9b0:	f8 01       	movw	r30, r16
    c9b2:	66 83       	std	Z+6, r22	; 0x06
    c9b4:	77 83       	std	Z+7, r23	; 0x07
    c9b6:	80 87       	std	Z+8, r24	; 0x08
    c9b8:	91 87       	std	Z+9, r25	; 0x09
    c9ba:	18 c0       	rjmp	.+48     	; 0xc9ec <f_opendir+0xb4>
    c9bc:	95 e0       	ldi	r25, 0x05	; 5
    c9be:	e9 2e       	mov	r14, r25
    c9c0:	f1 2c       	mov	r15, r1
    c9c2:	c6 01       	movw	r24, r12
    c9c4:	92 d5       	rcall	.+2852   	; 0xd4ea <ff_memfree>
    c9c6:	f4 e0       	ldi	r31, 0x04	; 4
    c9c8:	ef 16       	cp	r14, r31
    c9ca:	f1 04       	cpc	r15, r1
    c9cc:	f1 f0       	breq	.+60     	; 0xca0a <f_opendir+0xd2>
    c9ce:	e1 14       	cp	r14, r1
    c9d0:	f1 04       	cpc	r15, r1
    c9d2:	49 f0       	breq	.+18     	; 0xc9e6 <f_opendir+0xae>
    c9d4:	f8 01       	movw	r30, r16
    c9d6:	11 82       	std	Z+1, r1	; 0x01
    c9d8:	10 82       	st	Z, r1
    c9da:	c7 01       	movw	r24, r14
    c9dc:	1a c0       	rjmp	.+52     	; 0xca12 <f_opendir+0xda>
    c9de:	89 e0       	ldi	r24, 0x09	; 9
    c9e0:	03 c0       	rjmp	.+6      	; 0xc9e8 <f_opendir+0xb0>
    c9e2:	81 e1       	ldi	r24, 0x11	; 17
    c9e4:	01 c0       	rjmp	.+2      	; 0xc9e8 <f_opendir+0xb0>
    c9e6:	80 e0       	ldi	r24, 0x00	; 0
    c9e8:	90 e0       	ldi	r25, 0x00	; 0
    c9ea:	13 c0       	rjmp	.+38     	; 0xca12 <f_opendir+0xda>
    c9ec:	e9 81       	ldd	r30, Y+1	; 0x01
    c9ee:	fa 81       	ldd	r31, Y+2	; 0x02
    c9f0:	85 81       	ldd	r24, Z+5	; 0x05
    c9f2:	96 81       	ldd	r25, Z+6	; 0x06
    c9f4:	f8 01       	movw	r30, r16
    c9f6:	93 83       	std	Z+3, r25	; 0x03
    c9f8:	82 83       	std	Z+2, r24	; 0x02
    c9fa:	40 e0       	ldi	r20, 0x00	; 0
    c9fc:	50 e0       	ldi	r21, 0x00	; 0
    c9fe:	ba 01       	movw	r22, r20
    ca00:	c8 01       	movw	r24, r16
    ca02:	0e 94 69 51 	call	0xa2d2	; 0xa2d2 <dir_sdi>
    ca06:	7c 01       	movw	r14, r24
    ca08:	dc cf       	rjmp	.-72     	; 0xc9c2 <f_opendir+0x8a>
    ca0a:	85 e0       	ldi	r24, 0x05	; 5
    ca0c:	e8 2e       	mov	r14, r24
    ca0e:	f1 2c       	mov	r15, r1
    ca10:	e1 cf       	rjmp	.-62     	; 0xc9d4 <f_opendir+0x9c>
    ca12:	24 96       	adiw	r28, 0x04	; 4
    ca14:	e8 e0       	ldi	r30, 0x08	; 8
    ca16:	0c 94 ac e4 	jmp	0x1c958	; 0x1c958 <__epilogue_restores__+0x14>

0000ca1a <f_closedir>:
    ca1a:	a2 e0       	ldi	r26, 0x02	; 2
    ca1c:	b0 e0       	ldi	r27, 0x00	; 0
    ca1e:	e3 e1       	ldi	r30, 0x13	; 19
    ca20:	f5 e6       	ldi	r31, 0x65	; 101
    ca22:	0c 94 94 e4 	jmp	0x1c928	; 0x1c928 <__prologue_saves__+0x1c>
    ca26:	8c 01       	movw	r16, r24
    ca28:	be 01       	movw	r22, r28
    ca2a:	6f 5f       	subi	r22, 0xFF	; 255
    ca2c:	7f 4f       	sbci	r23, 0xFF	; 255
    ca2e:	0e 94 62 49 	call	0x92c4	; 0x92c4 <validate>
    ca32:	00 97       	sbiw	r24, 0x00	; 0
    ca34:	19 f4       	brne	.+6      	; 0xca3c <f_closedir+0x22>
    ca36:	f8 01       	movw	r30, r16
    ca38:	11 82       	std	Z+1, r1	; 0x01
    ca3a:	10 82       	st	Z, r1
    ca3c:	22 96       	adiw	r28, 0x02	; 2
    ca3e:	e4 e0       	ldi	r30, 0x04	; 4
    ca40:	0c 94 b0 e4 	jmp	0x1c960	; 0x1c960 <__epilogue_restores__+0x1c>

0000ca44 <f_readdir>:
    ca44:	a2 e0       	ldi	r26, 0x02	; 2
    ca46:	b0 e0       	ldi	r27, 0x00	; 0
    ca48:	e8 e2       	ldi	r30, 0x28	; 40
    ca4a:	f5 e6       	ldi	r31, 0x65	; 101
    ca4c:	0c 94 8e e4 	jmp	0x1c91c	; 0x1c91c <__prologue_saves__+0x10>
    ca50:	7c 01       	movw	r14, r24
    ca52:	5b 01       	movw	r10, r22
    ca54:	be 01       	movw	r22, r28
    ca56:	6f 5f       	subi	r22, 0xFF	; 255
    ca58:	7f 4f       	sbci	r23, 0xFF	; 255
    ca5a:	0e 94 62 49 	call	0x92c4	; 0x92c4 <validate>
    ca5e:	00 97       	sbiw	r24, 0x00	; 0
    ca60:	89 f5       	brne	.+98     	; 0xcac4 <f_readdir+0x80>
    ca62:	a1 14       	cp	r10, r1
    ca64:	b1 04       	cpc	r11, r1
    ca66:	39 f4       	brne	.+14     	; 0xca76 <f_readdir+0x32>
    ca68:	40 e0       	ldi	r20, 0x00	; 0
    ca6a:	50 e0       	ldi	r21, 0x00	; 0
    ca6c:	ba 01       	movw	r22, r20
    ca6e:	c7 01       	movw	r24, r14
    ca70:	0e 94 69 51 	call	0xa2d2	; 0xa2d2 <dir_sdi>
    ca74:	27 c0       	rjmp	.+78     	; 0xcac4 <f_readdir+0x80>
    ca76:	80 e0       	ldi	r24, 0x00	; 0
    ca78:	92 e0       	ldi	r25, 0x02	; 2
    ca7a:	34 d5       	rcall	.+2664   	; 0xd4e4 <ff_memalloc>
    ca7c:	6c 01       	movw	r12, r24
    ca7e:	00 97       	sbiw	r24, 0x00	; 0
    ca80:	f9 f0       	breq	.+62     	; 0xcac0 <f_readdir+0x7c>
    ca82:	e9 81       	ldd	r30, Y+1	; 0x01
    ca84:	fa 81       	ldd	r31, Y+2	; 0x02
    ca86:	94 87       	std	Z+12, r25	; 0x0c
    ca88:	83 87       	std	Z+11, r24	; 0x0b
    ca8a:	60 e0       	ldi	r22, 0x00	; 0
    ca8c:	70 e0       	ldi	r23, 0x00	; 0
    ca8e:	c7 01       	movw	r24, r14
    ca90:	0e 94 02 55 	call	0xaa04	; 0xaa04 <dir_read>
    ca94:	8c 01       	movw	r16, r24
    ca96:	8b 7f       	andi	r24, 0xFB	; 251
    ca98:	89 2b       	or	r24, r25
    ca9a:	71 f4       	brne	.+28     	; 0xcab8 <f_readdir+0x74>
    ca9c:	b5 01       	movw	r22, r10
    ca9e:	c7 01       	movw	r24, r14
    caa0:	0e 94 46 4a 	call	0x948c	; 0x948c <get_fileinfo>
    caa4:	60 e0       	ldi	r22, 0x00	; 0
    caa6:	70 e0       	ldi	r23, 0x00	; 0
    caa8:	c7 01       	movw	r24, r14
    caaa:	0e 94 e1 53 	call	0xa7c2	; 0xa7c2 <dir_next>
    caae:	8c 01       	movw	r16, r24
    cab0:	04 97       	sbiw	r24, 0x04	; 4
    cab2:	11 f4       	brne	.+4      	; 0xcab8 <f_readdir+0x74>
    cab4:	00 e0       	ldi	r16, 0x00	; 0
    cab6:	10 e0       	ldi	r17, 0x00	; 0
    cab8:	c6 01       	movw	r24, r12
    caba:	17 d5       	rcall	.+2606   	; 0xd4ea <ff_memfree>
    cabc:	c8 01       	movw	r24, r16
    cabe:	02 c0       	rjmp	.+4      	; 0xcac4 <f_readdir+0x80>
    cac0:	81 e1       	ldi	r24, 0x11	; 17
    cac2:	90 e0       	ldi	r25, 0x00	; 0
    cac4:	22 96       	adiw	r28, 0x02	; 2
    cac6:	ea e0       	ldi	r30, 0x0A	; 10
    cac8:	0c 94 aa e4 	jmp	0x1c954	; 0x1c954 <__epilogue_restores__+0x10>

0000cacc <f_stat>:
    cacc:	a0 e3       	ldi	r26, 0x30	; 48
    cace:	b0 e0       	ldi	r27, 0x00	; 0
    cad0:	ec e6       	ldi	r30, 0x6C	; 108
    cad2:	f5 e6       	ldi	r31, 0x65	; 101
    cad4:	0c 94 90 e4 	jmp	0x1c920	; 0x1c920 <__prologue_saves__+0x14>
    cad8:	98 ab       	std	Y+48, r25	; 0x30
    cada:	8f a7       	std	Y+47, r24	; 0x2f
    cadc:	6b 01       	movw	r12, r22
    cade:	40 e0       	ldi	r20, 0x00	; 0
    cae0:	be 01       	movw	r22, r28
    cae2:	6f 5f       	subi	r22, 0xFF	; 255
    cae4:	7f 4f       	sbci	r23, 0xFF	; 255
    cae6:	ce 01       	movw	r24, r28
    cae8:	8f 96       	adiw	r24, 0x2f	; 47
    caea:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
    caee:	00 97       	sbiw	r24, 0x00	; 0
    caf0:	39 f5       	brne	.+78     	; 0xcb40 <f_stat+0x74>
    caf2:	80 e0       	ldi	r24, 0x00	; 0
    caf4:	92 e0       	ldi	r25, 0x02	; 2
    caf6:	f6 d4       	rcall	.+2540   	; 0xd4e4 <ff_memalloc>
    caf8:	7c 01       	movw	r14, r24
    cafa:	00 97       	sbiw	r24, 0x00	; 0
    cafc:	f9 f0       	breq	.+62     	; 0xcb3c <f_stat+0x70>
    cafe:	e9 81       	ldd	r30, Y+1	; 0x01
    cb00:	fa 81       	ldd	r31, Y+2	; 0x02
    cb02:	94 87       	std	Z+12, r25	; 0x0c
    cb04:	83 87       	std	Z+11, r24	; 0x0b
    cb06:	6f a5       	ldd	r22, Y+47	; 0x2f
    cb08:	78 a9       	ldd	r23, Y+48	; 0x30
    cb0a:	ce 01       	movw	r24, r28
    cb0c:	01 96       	adiw	r24, 0x01	; 1
    cb0e:	0e 94 af 58 	call	0xb15e	; 0xb15e <follow_path>
    cb12:	8c 01       	movw	r16, r24
    cb14:	89 2b       	or	r24, r25
    cb16:	71 f4       	brne	.+28     	; 0xcb34 <f_stat+0x68>
    cb18:	88 a5       	ldd	r24, Y+40	; 0x28
    cb1a:	87 fd       	sbrc	r24, 7
    cb1c:	09 c0       	rjmp	.+18     	; 0xcb30 <f_stat+0x64>
    cb1e:	c1 14       	cp	r12, r1
    cb20:	d1 04       	cpc	r13, r1
    cb22:	41 f0       	breq	.+16     	; 0xcb34 <f_stat+0x68>
    cb24:	b6 01       	movw	r22, r12
    cb26:	ce 01       	movw	r24, r28
    cb28:	01 96       	adiw	r24, 0x01	; 1
    cb2a:	0e 94 46 4a 	call	0x948c	; 0x948c <get_fileinfo>
    cb2e:	02 c0       	rjmp	.+4      	; 0xcb34 <f_stat+0x68>
    cb30:	06 e0       	ldi	r16, 0x06	; 6
    cb32:	10 e0       	ldi	r17, 0x00	; 0
    cb34:	c7 01       	movw	r24, r14
    cb36:	d9 d4       	rcall	.+2482   	; 0xd4ea <ff_memfree>
    cb38:	c8 01       	movw	r24, r16
    cb3a:	02 c0       	rjmp	.+4      	; 0xcb40 <f_stat+0x74>
    cb3c:	81 e1       	ldi	r24, 0x11	; 17
    cb3e:	90 e0       	ldi	r25, 0x00	; 0
    cb40:	e0 96       	adiw	r28, 0x30	; 48
    cb42:	e8 e0       	ldi	r30, 0x08	; 8
    cb44:	0c 94 ac e4 	jmp	0x1c958	; 0x1c958 <__epilogue_restores__+0x14>

0000cb48 <f_getfree>:
    cb48:	aa e0       	ldi	r26, 0x0A	; 10
    cb4a:	b0 e0       	ldi	r27, 0x00	; 0
    cb4c:	ea ea       	ldi	r30, 0xAA	; 170
    cb4e:	f5 e6       	ldi	r31, 0x65	; 101
    cb50:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
    cb54:	9c 83       	std	Y+4, r25	; 0x04
    cb56:	8b 83       	std	Y+3, r24	; 0x03
    cb58:	7e 83       	std	Y+6, r23	; 0x06
    cb5a:	6d 83       	std	Y+5, r22	; 0x05
    cb5c:	7a 01       	movw	r14, r20
    cb5e:	40 e0       	ldi	r20, 0x00	; 0
    cb60:	be 01       	movw	r22, r28
    cb62:	6f 5f       	subi	r22, 0xFF	; 255
    cb64:	7f 4f       	sbci	r23, 0xFF	; 255
    cb66:	ce 01       	movw	r24, r28
    cb68:	03 96       	adiw	r24, 0x03	; 3
    cb6a:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
    cb6e:	8c 01       	movw	r16, r24
    cb70:	89 2b       	or	r24, r25
    cb72:	09 f0       	breq	.+2      	; 0xcb76 <f_getfree+0x2e>
    cb74:	c4 c0       	rjmp	.+392    	; 0xccfe <f_getfree+0x1b6>
    cb76:	69 80       	ldd	r6, Y+1	; 0x01
    cb78:	7a 80       	ldd	r7, Y+2	; 0x02
    cb7a:	d7 01       	movw	r26, r14
    cb7c:	6d 92       	st	X+, r6
    cb7e:	7c 92       	st	X, r7
    cb80:	f3 01       	movw	r30, r6
    cb82:	81 89       	ldd	r24, Z+17	; 0x11
    cb84:	92 89       	ldd	r25, Z+18	; 0x12
    cb86:	a3 89       	ldd	r26, Z+19	; 0x13
    cb88:	b4 89       	ldd	r27, Z+20	; 0x14
    cb8a:	81 8c       	ldd	r8, Z+25	; 0x19
    cb8c:	92 8c       	ldd	r9, Z+26	; 0x1a
    cb8e:	a3 8c       	ldd	r10, Z+27	; 0x1b
    cb90:	b4 8c       	ldd	r11, Z+28	; 0x1c
    cb92:	b5 01       	movw	r22, r10
    cb94:	a4 01       	movw	r20, r8
    cb96:	42 50       	subi	r20, 0x02	; 2
    cb98:	51 09       	sbc	r21, r1
    cb9a:	61 09       	sbc	r22, r1
    cb9c:	71 09       	sbc	r23, r1
    cb9e:	48 17       	cp	r20, r24
    cba0:	59 07       	cpc	r21, r25
    cba2:	6a 07       	cpc	r22, r26
    cba4:	7b 07       	cpc	r23, r27
    cba6:	38 f0       	brcs	.+14     	; 0xcbb6 <f_getfree+0x6e>
    cba8:	ed 81       	ldd	r30, Y+5	; 0x05
    cbaa:	fe 81       	ldd	r31, Y+6	; 0x06
    cbac:	80 83       	st	Z, r24
    cbae:	91 83       	std	Z+1, r25	; 0x01
    cbb0:	a2 83       	std	Z+2, r26	; 0x02
    cbb2:	b3 83       	std	Z+3, r27	; 0x03
    cbb4:	a4 c0       	rjmp	.+328    	; 0xccfe <f_getfree+0x1b6>
    cbb6:	80 81       	ld	r24, Z
    cbb8:	81 30       	cpi	r24, 0x01	; 1
    cbba:	a1 f5       	brne	.+104    	; 0xcc24 <f_getfree+0xdc>
    cbbc:	82 e0       	ldi	r24, 0x02	; 2
    cbbe:	88 2e       	mov	r8, r24
    cbc0:	91 2c       	mov	r9, r1
    cbc2:	a1 2c       	mov	r10, r1
    cbc4:	b1 2c       	mov	r11, r1
    cbc6:	c1 2c       	mov	r12, r1
    cbc8:	d1 2c       	mov	r13, r1
    cbca:	76 01       	movw	r14, r12
    cbcc:	b5 01       	movw	r22, r10
    cbce:	a4 01       	movw	r20, r8
    cbd0:	c3 01       	movw	r24, r6
    cbd2:	0e 94 b5 50 	call	0xa16a	; 0xa16a <get_fat.isra.10>
    cbd6:	6f 3f       	cpi	r22, 0xFF	; 255
    cbd8:	bf ef       	ldi	r27, 0xFF	; 255
    cbda:	7b 07       	cpc	r23, r27
    cbdc:	8b 07       	cpc	r24, r27
    cbde:	9b 07       	cpc	r25, r27
    cbe0:	09 f4       	brne	.+2      	; 0xcbe4 <f_getfree+0x9c>
    cbe2:	76 c0       	rjmp	.+236    	; 0xccd0 <f_getfree+0x188>
    cbe4:	61 30       	cpi	r22, 0x01	; 1
    cbe6:	71 05       	cpc	r23, r1
    cbe8:	81 05       	cpc	r24, r1
    cbea:	91 05       	cpc	r25, r1
    cbec:	09 f4       	brne	.+2      	; 0xcbf0 <f_getfree+0xa8>
    cbee:	73 c0       	rjmp	.+230    	; 0xccd6 <f_getfree+0x18e>
    cbf0:	67 2b       	or	r22, r23
    cbf2:	68 2b       	or	r22, r24
    cbf4:	69 2b       	or	r22, r25
    cbf6:	29 f4       	brne	.+10     	; 0xcc02 <f_getfree+0xba>
    cbf8:	ef ef       	ldi	r30, 0xFF	; 255
    cbfa:	ce 1a       	sub	r12, r30
    cbfc:	de 0a       	sbc	r13, r30
    cbfe:	ee 0a       	sbc	r14, r30
    cc00:	fe 0a       	sbc	r15, r30
    cc02:	ff ef       	ldi	r31, 0xFF	; 255
    cc04:	8f 1a       	sub	r8, r31
    cc06:	9f 0a       	sbc	r9, r31
    cc08:	af 0a       	sbc	r10, r31
    cc0a:	bf 0a       	sbc	r11, r31
    cc0c:	e9 81       	ldd	r30, Y+1	; 0x01
    cc0e:	fa 81       	ldd	r31, Y+2	; 0x02
    cc10:	81 8d       	ldd	r24, Z+25	; 0x19
    cc12:	92 8d       	ldd	r25, Z+26	; 0x1a
    cc14:	a3 8d       	ldd	r26, Z+27	; 0x1b
    cc16:	b4 8d       	ldd	r27, Z+28	; 0x1c
    cc18:	88 16       	cp	r8, r24
    cc1a:	99 06       	cpc	r9, r25
    cc1c:	aa 06       	cpc	r10, r26
    cc1e:	bb 06       	cpc	r11, r27
    cc20:	a8 f2       	brcs	.-86     	; 0xcbcc <f_getfree+0x84>
    cc22:	5d c0       	rjmp	.+186    	; 0xccde <f_getfree+0x196>
    cc24:	f3 01       	movw	r30, r6
    cc26:	45 a0       	ldd	r4, Z+37	; 0x25
    cc28:	56 a0       	ldd	r5, Z+38	; 0x26
    cc2a:	67 a0       	ldd	r6, Z+39	; 0x27
    cc2c:	70 a4       	ldd	r7, Z+40	; 0x28
    cc2e:	21 2c       	mov	r2, r1
    cc30:	31 2c       	mov	r3, r1
    cc32:	c1 2c       	mov	r12, r1
    cc34:	d1 2c       	mov	r13, r1
    cc36:	76 01       	movw	r14, r12
    cc38:	21 14       	cp	r2, r1
    cc3a:	31 04       	cpc	r3, r1
    cc3c:	b1 f4       	brne	.+44     	; 0xcc6a <f_getfree+0x122>
    cc3e:	d3 01       	movw	r26, r6
    cc40:	c2 01       	movw	r24, r4
    cc42:	01 96       	adiw	r24, 0x01	; 1
    cc44:	a1 1d       	adc	r26, r1
    cc46:	b1 1d       	adc	r27, r1
    cc48:	8f 83       	std	Y+7, r24	; 0x07
    cc4a:	98 87       	std	Y+8, r25	; 0x08
    cc4c:	a9 87       	std	Y+9, r26	; 0x09
    cc4e:	ba 87       	std	Y+10, r27	; 0x0a
    cc50:	b3 01       	movw	r22, r6
    cc52:	a2 01       	movw	r20, r4
    cc54:	89 81       	ldd	r24, Y+1	; 0x01
    cc56:	9a 81       	ldd	r25, Y+2	; 0x02
    cc58:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <move_window>
    cc5c:	00 97       	sbiw	r24, 0x00	; 0
    cc5e:	09 f0       	breq	.+2      	; 0xcc62 <f_getfree+0x11a>
    cc60:	3d c0       	rjmp	.+122    	; 0xccdc <f_getfree+0x194>
    cc62:	4f 80       	ldd	r4, Y+7	; 0x07
    cc64:	58 84       	ldd	r5, Y+8	; 0x08
    cc66:	69 84       	ldd	r6, Y+9	; 0x09
    cc68:	7a 84       	ldd	r7, Y+10	; 0x0a
    cc6a:	e9 81       	ldd	r30, Y+1	; 0x01
    cc6c:	fa 81       	ldd	r31, Y+2	; 0x02
    cc6e:	80 81       	ld	r24, Z
    cc70:	82 30       	cpi	r24, 0x02	; 2
    cc72:	79 f4       	brne	.+30     	; 0xcc92 <f_getfree+0x14a>
    cc74:	e2 0d       	add	r30, r2
    cc76:	f3 1d       	adc	r31, r3
    cc78:	85 a9       	ldd	r24, Z+53	; 0x35
    cc7a:	96 a9       	ldd	r25, Z+54	; 0x36
    cc7c:	89 2b       	or	r24, r25
    cc7e:	29 f4       	brne	.+10     	; 0xcc8a <f_getfree+0x142>
    cc80:	9f ef       	ldi	r25, 0xFF	; 255
    cc82:	c9 1a       	sub	r12, r25
    cc84:	d9 0a       	sbc	r13, r25
    cc86:	e9 0a       	sbc	r14, r25
    cc88:	f9 0a       	sbc	r15, r25
    cc8a:	a2 e0       	ldi	r26, 0x02	; 2
    cc8c:	2a 0e       	add	r2, r26
    cc8e:	31 1c       	adc	r3, r1
    cc90:	15 c0       	rjmp	.+42     	; 0xccbc <f_getfree+0x174>
    cc92:	cf 01       	movw	r24, r30
    cc94:	c5 96       	adiw	r24, 0x35	; 53
    cc96:	82 0d       	add	r24, r2
    cc98:	93 1d       	adc	r25, r3
    cc9a:	0e 94 0a 48 	call	0x9014	; 0x9014 <ld_dword>
    cc9e:	dc 01       	movw	r26, r24
    cca0:	cb 01       	movw	r24, r22
    cca2:	bf 70       	andi	r27, 0x0F	; 15
    cca4:	89 2b       	or	r24, r25
    cca6:	8a 2b       	or	r24, r26
    cca8:	8b 2b       	or	r24, r27
    ccaa:	29 f4       	brne	.+10     	; 0xccb6 <f_getfree+0x16e>
    ccac:	bf ef       	ldi	r27, 0xFF	; 255
    ccae:	cb 1a       	sub	r12, r27
    ccb0:	db 0a       	sbc	r13, r27
    ccb2:	eb 0a       	sbc	r14, r27
    ccb4:	fb 0a       	sbc	r15, r27
    ccb6:	e4 e0       	ldi	r30, 0x04	; 4
    ccb8:	2e 0e       	add	r2, r30
    ccba:	31 1c       	adc	r3, r1
    ccbc:	f1 e0       	ldi	r31, 0x01	; 1
    ccbe:	3f 22       	and	r3, r31
    ccc0:	21 e0       	ldi	r18, 0x01	; 1
    ccc2:	82 1a       	sub	r8, r18
    ccc4:	91 08       	sbc	r9, r1
    ccc6:	a1 08       	sbc	r10, r1
    ccc8:	b1 08       	sbc	r11, r1
    ccca:	09 f0       	breq	.+2      	; 0xccce <f_getfree+0x186>
    cccc:	b5 cf       	rjmp	.-150    	; 0xcc38 <f_getfree+0xf0>
    ccce:	07 c0       	rjmp	.+14     	; 0xccde <f_getfree+0x196>
    ccd0:	01 e0       	ldi	r16, 0x01	; 1
    ccd2:	10 e0       	ldi	r17, 0x00	; 0
    ccd4:	04 c0       	rjmp	.+8      	; 0xccde <f_getfree+0x196>
    ccd6:	02 e0       	ldi	r16, 0x02	; 2
    ccd8:	10 e0       	ldi	r17, 0x00	; 0
    ccda:	01 c0       	rjmp	.+2      	; 0xccde <f_getfree+0x196>
    ccdc:	8c 01       	movw	r16, r24
    ccde:	ad 81       	ldd	r26, Y+5	; 0x05
    cce0:	be 81       	ldd	r27, Y+6	; 0x06
    cce2:	cd 92       	st	X+, r12
    cce4:	dd 92       	st	X+, r13
    cce6:	ed 92       	st	X+, r14
    cce8:	fc 92       	st	X, r15
    ccea:	13 97       	sbiw	r26, 0x03	; 3
    ccec:	e9 81       	ldd	r30, Y+1	; 0x01
    ccee:	fa 81       	ldd	r31, Y+2	; 0x02
    ccf0:	c1 8a       	std	Z+17, r12	; 0x11
    ccf2:	d2 8a       	std	Z+18, r13	; 0x12
    ccf4:	e3 8a       	std	Z+19, r14	; 0x13
    ccf6:	f4 8a       	std	Z+20, r15	; 0x14
    ccf8:	84 81       	ldd	r24, Z+4	; 0x04
    ccfa:	81 60       	ori	r24, 0x01	; 1
    ccfc:	84 83       	std	Z+4, r24	; 0x04
    ccfe:	c8 01       	movw	r24, r16
    cd00:	2a 96       	adiw	r28, 0x0a	; 10
    cd02:	e2 e1       	ldi	r30, 0x12	; 18
    cd04:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

0000cd08 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    cd08:	a0 e6       	ldi	r26, 0x60	; 96
    cd0a:	b0 e0       	ldi	r27, 0x00	; 0
    cd0c:	ea e8       	ldi	r30, 0x8A	; 138
    cd0e:	f6 e6       	ldi	r31, 0x66	; 102
    cd10:	0c 94 8d e4 	jmp	0x1c91a	; 0x1c91a <__prologue_saves__+0xe>
    cd14:	a1 96       	adiw	r28, 0x21	; 33
    cd16:	9f af       	std	Y+63, r25	; 0x3f
    cd18:	8e af       	std	Y+62, r24	; 0x3e
    cd1a:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    cd1c:	42 e0       	ldi	r20, 0x02	; 2
    cd1e:	be 01       	movw	r22, r28
    cd20:	63 5a       	subi	r22, 0xA3	; 163
    cd22:	7f 4f       	sbci	r23, 0xFF	; 255
    cd24:	ce 01       	movw	r24, r28
    cd26:	81 5a       	subi	r24, 0xA1	; 161
    cd28:	9f 4f       	sbci	r25, 0xFF	; 255
    cd2a:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
	if (res == FR_OK) {
    cd2e:	00 97       	sbiw	r24, 0x00	; 0
    cd30:	09 f0       	breq	.+2      	; 0xcd34 <f_unlink+0x2c>
    cd32:	8c c0       	rjmp	.+280    	; 0xce4c <f_unlink+0x144>
		dj.obj.fs = fs;
    cd34:	6f 96       	adiw	r28, 0x1f	; 31
    cd36:	8e ad       	ldd	r24, Y+62	; 0x3e
    cd38:	9f ad       	ldd	r25, Y+63	; 0x3f
    cd3a:	6f 97       	sbiw	r28, 0x1f	; 31
    cd3c:	98 ab       	std	Y+48, r25	; 0x30
    cd3e:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cd40:	80 e0       	ldi	r24, 0x00	; 0
    cd42:	92 e0       	ldi	r25, 0x02	; 2
    cd44:	cf d3       	rcall	.+1950   	; 0xd4e4 <ff_memalloc>
    cd46:	5c 01       	movw	r10, r24
    cd48:	00 97       	sbiw	r24, 0x00	; 0
    cd4a:	09 f4       	brne	.+2      	; 0xcd4e <f_unlink+0x46>
    cd4c:	49 c0       	rjmp	.+146    	; 0xcde0 <f_unlink+0xd8>
    cd4e:	6f 96       	adiw	r28, 0x1f	; 31
    cd50:	ee ad       	ldd	r30, Y+62	; 0x3e
    cd52:	ff ad       	ldd	r31, Y+63	; 0x3f
    cd54:	6f 97       	sbiw	r28, 0x1f	; 31
    cd56:	94 87       	std	Z+12, r25	; 0x0c
    cd58:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    cd5a:	a1 96       	adiw	r28, 0x21	; 33
    cd5c:	6e ad       	ldd	r22, Y+62	; 0x3e
    cd5e:	7f ad       	ldd	r23, Y+63	; 0x3f
    cd60:	a1 97       	sbiw	r28, 0x21	; 33
    cd62:	ce 01       	movw	r24, r28
    cd64:	8f 96       	adiw	r24, 0x2f	; 47
    cd66:	0e 94 af 58 	call	0xb15e	; 0xb15e <follow_path>
    cd6a:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    cd6c:	89 2b       	or	r24, r25
    cd6e:	a1 f5       	brne	.+104    	; 0xcdd8 <f_unlink+0xd0>
    cd70:	67 96       	adiw	r28, 0x17	; 23
    cd72:	8f ad       	ldd	r24, Y+63	; 0x3f
    cd74:	67 97       	sbiw	r28, 0x17	; 23
    cd76:	85 fd       	sbrc	r24, 5
    cd78:	36 c0       	rjmp	.+108    	; 0xcde6 <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    cd7a:	87 fd       	sbrc	r24, 7
    cd7c:	34 c0       	rjmp	.+104    	; 0xcde6 <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    cd7e:	9b a8       	ldd	r9, Y+51	; 0x33
    cd80:	90 fc       	sbrc	r9, 0
    cd82:	40 c0       	rjmp	.+128    	; 0xce04 <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    cd84:	6f 96       	adiw	r28, 0x1f	; 31
    cd86:	0e ad       	ldd	r16, Y+62	; 0x3e
    cd88:	1f ad       	ldd	r17, Y+63	; 0x3f
    cd8a:	6f 97       	sbiw	r28, 0x1f	; 31
    cd8c:	2b 96       	adiw	r28, 0x0b	; 11
    cd8e:	6e ad       	ldd	r22, Y+62	; 0x3e
    cd90:	7f ad       	ldd	r23, Y+63	; 0x3f
    cd92:	2b 97       	sbiw	r28, 0x0b	; 11
    cd94:	f8 01       	movw	r30, r16
    cd96:	80 81       	ld	r24, Z
    cd98:	0e 94 56 4b 	call	0x96ac	; 0x96ac <ld_clust.isra.4>
    cd9c:	6b 01       	movw	r12, r22
    cd9e:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    cda0:	94 fe       	sbrs	r9, 4
    cda2:	33 c0       	rjmp	.+102    	; 0xce0a <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    cda4:	f8 01       	movw	r30, r16
    cda6:	85 89       	ldd	r24, Z+21	; 0x15
    cda8:	96 89       	ldd	r25, Z+22	; 0x16
    cdaa:	a7 89       	ldd	r26, Z+23	; 0x17
    cdac:	b0 8d       	ldd	r27, Z+24	; 0x18
    cdae:	c8 16       	cp	r12, r24
    cdb0:	d9 06       	cpc	r13, r25
    cdb2:	ea 06       	cpc	r14, r26
    cdb4:	fb 06       	cpc	r15, r27
    cdb6:	31 f1       	breq	.+76     	; 0xce04 <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    cdb8:	1a 83       	std	Y+2, r17	; 0x02
    cdba:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    cdbc:	cf 82       	std	Y+7, r12	; 0x07
    cdbe:	d8 86       	std	Y+8, r13	; 0x08
    cdc0:	e9 86       	std	Y+9, r14	; 0x09
    cdc2:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    cdc4:	40 e0       	ldi	r20, 0x00	; 0
    cdc6:	50 e0       	ldi	r21, 0x00	; 0
    cdc8:	ba 01       	movw	r22, r20
    cdca:	ce 01       	movw	r24, r28
    cdcc:	01 96       	adiw	r24, 0x01	; 1
    cdce:	0e 94 69 51 	call	0xa2d2	; 0xa2d2 <dir_sdi>
    cdd2:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    cdd4:	89 2b       	or	r24, r25
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cdd6:	51 f0       	breq	.+20     	; 0xcdec <f_unlink+0xe4>
    cdd8:	c5 01       	movw	r24, r10
    cdda:	87 d3       	rcall	.+1806   	; 0xd4ea <ff_memfree>
    cddc:	c8 01       	movw	r24, r16

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cdde:	36 c0       	rjmp	.+108    	; 0xce4c <f_unlink+0x144>
    cde0:	81 e1       	ldi	r24, 0x11	; 17
    cde2:	90 e0       	ldi	r25, 0x00	; 0
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    cde4:	33 c0       	rjmp	.+102    	; 0xce4c <f_unlink+0x144>
    cde6:	06 e0       	ldi	r16, 0x06	; 6
    cde8:	10 e0       	ldi	r17, 0x00	; 0
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    cdea:	f6 cf       	rjmp	.-20     	; 0xcdd8 <f_unlink+0xd0>
    cdec:	60 e0       	ldi	r22, 0x00	; 0
    cdee:	70 e0       	ldi	r23, 0x00	; 0
    cdf0:	ce 01       	movw	r24, r28
    cdf2:	01 96       	adiw	r24, 0x01	; 1
    cdf4:	0e 94 02 55 	call	0xaa04	; 0xaa04 <dir_read>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    cdf8:	8c 01       	movw	r16, r24
    cdfa:	00 97       	sbiw	r24, 0x00	; 0
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    cdfc:	19 f0       	breq	.+6      	; 0xce04 <f_unlink+0xfc>
    cdfe:	04 97       	sbiw	r24, 0x04	; 4
    ce00:	21 f0       	breq	.+8      	; 0xce0a <f_unlink+0x102>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    ce02:	ea cf       	rjmp	.-44     	; 0xcdd8 <f_unlink+0xd0>
    ce04:	07 e0       	ldi	r16, 0x07	; 7
    ce06:	10 e0       	ldi	r17, 0x00	; 0
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    ce08:	e7 cf       	rjmp	.-50     	; 0xcdd8 <f_unlink+0xd0>
    ce0a:	ce 01       	movw	r24, r28
    ce0c:	8f 96       	adiw	r24, 0x2f	; 47
    ce0e:	0e 94 cb 55 	call	0xab96	; 0xab96 <dir_remove>
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    ce12:	8c 01       	movw	r16, r24
    ce14:	89 2b       	or	r24, r25
    ce16:	01 f7       	brne	.-64     	; 0xcdd8 <f_unlink+0xd0>
    ce18:	c1 14       	cp	r12, r1
    ce1a:	d1 04       	cpc	r13, r1
    ce1c:	e1 04       	cpc	r14, r1
    ce1e:	f1 04       	cpc	r15, r1
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    ce20:	41 f4       	brne	.+16     	; 0xce32 <f_unlink+0x12a>
    ce22:	6f 96       	adiw	r28, 0x1f	; 31
    ce24:	8e ad       	ldd	r24, Y+62	; 0x3e
    ce26:	9f ad       	ldd	r25, Y+63	; 0x3f
    ce28:	6f 97       	sbiw	r28, 0x1f	; 31
    ce2a:	0e 94 cb 4b 	call	0x9796	; 0x9796 <sync_fs>
    ce2e:	8c 01       	movw	r16, r24
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    ce30:	d3 cf       	rjmp	.-90     	; 0xcdd8 <f_unlink+0xd0>
    ce32:	00 e0       	ldi	r16, 0x00	; 0
    ce34:	10 e0       	ldi	r17, 0x00	; 0
    ce36:	98 01       	movw	r18, r16
    ce38:	b7 01       	movw	r22, r14
    ce3a:	a6 01       	movw	r20, r12
    ce3c:	ce 01       	movw	r24, r28
    ce3e:	8f 96       	adiw	r24, 0x2f	; 47
    ce40:	0e 94 50 53 	call	0xa6a0	; 0xa6a0 <remove_chain>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    ce44:	8c 01       	movw	r16, r24
    ce46:	89 2b       	or	r24, r25
    ce48:	39 f6       	brne	.-114    	; 0xcdd8 <f_unlink+0xd0>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    ce4a:	eb cf       	rjmp	.-42     	; 0xce22 <f_unlink+0x11a>
    ce4c:	c0 5a       	subi	r28, 0xA0	; 160
    ce4e:	df 4f       	sbci	r29, 0xFF	; 255
    ce50:	eb e0       	ldi	r30, 0x0B	; 11
    ce52:	0c 94 a9 e4 	jmp	0x1c952	; 0x1c952 <__epilogue_restores__+0xe>

0000ce56 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    ce56:	a0 e4       	ldi	r26, 0x40	; 64
    ce58:	b0 e0       	ldi	r27, 0x00	; 0
    ce5a:	e1 e3       	ldi	r30, 0x31	; 49
    ce5c:	f7 e6       	ldi	r31, 0x67	; 103
    ce5e:	0c 94 88 e4 	jmp	0x1c910	; 0x1c910 <__prologue_saves__+0x4>
    ce62:	21 96       	adiw	r28, 0x01	; 1
    ce64:	9f af       	std	Y+63, r25	; 0x3f
    ce66:	8e af       	std	Y+62, r24	; 0x3e
    ce68:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    ce6a:	42 e0       	ldi	r20, 0x02	; 2
    ce6c:	be 01       	movw	r22, r28
    ce6e:	63 5c       	subi	r22, 0xC3	; 195
    ce70:	7f 4f       	sbci	r23, 0xFF	; 255
    ce72:	ce 01       	movw	r24, r28
    ce74:	cf 96       	adiw	r24, 0x3f	; 63
    ce76:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
	if (res == FR_OK) {
    ce7a:	00 97       	sbiw	r24, 0x00	; 0
    ce7c:	09 f0       	breq	.+2      	; 0xce80 <f_mkdir+0x2a>
    ce7e:	d6 c0       	rjmp	.+428    	; 0xd02c <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    ce80:	8d ad       	ldd	r24, Y+61	; 0x3d
    ce82:	9e ad       	ldd	r25, Y+62	; 0x3e
    ce84:	9a 83       	std	Y+2, r25	; 0x02
    ce86:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    ce88:	80 e0       	ldi	r24, 0x00	; 0
    ce8a:	92 e0       	ldi	r25, 0x02	; 2
    ce8c:	2b d3       	rcall	.+1622   	; 0xd4e4 <ff_memalloc>
    ce8e:	6c 01       	movw	r12, r24
    ce90:	00 97       	sbiw	r24, 0x00	; 0
    ce92:	e9 f0       	breq	.+58     	; 0xcece <f_mkdir+0x78>
    ce94:	ed ad       	ldd	r30, Y+61	; 0x3d
    ce96:	fe ad       	ldd	r31, Y+62	; 0x3e
    ce98:	94 87       	std	Z+12, r25	; 0x0c
    ce9a:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    ce9c:	21 96       	adiw	r28, 0x01	; 1
    ce9e:	6e ad       	ldd	r22, Y+62	; 0x3e
    cea0:	7f ad       	ldd	r23, Y+63	; 0x3f
    cea2:	21 97       	sbiw	r28, 0x01	; 1
    cea4:	ce 01       	movw	r24, r28
    cea6:	01 96       	adiw	r24, 0x01	; 1
    cea8:	0e 94 af 58 	call	0xb15e	; 0xb15e <follow_path>
    ceac:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    ceae:	89 2b       	or	r24, r25
    ceb0:	89 f0       	breq	.+34     	; 0xced4 <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    ceb2:	84 e0       	ldi	r24, 0x04	; 4
    ceb4:	e8 16       	cp	r14, r24
    ceb6:	f1 04       	cpc	r15, r1
    ceb8:	31 f4       	brne	.+12     	; 0xcec6 <f_mkdir+0x70>
    ceba:	88 a5       	ldd	r24, Y+40	; 0x28
    cebc:	85 ff       	sbrs	r24, 5
    cebe:	0e c0       	rjmp	.+28     	; 0xcedc <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    cec0:	26 e0       	ldi	r18, 0x06	; 6
    cec2:	e2 2e       	mov	r14, r18
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    cec4:	f1 2c       	mov	r15, r1
    cec6:	c6 01       	movw	r24, r12
    cec8:	10 d3       	rcall	.+1568   	; 0xd4ea <ff_memfree>
    ceca:	c7 01       	movw	r24, r14


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cecc:	af c0       	rjmp	.+350    	; 0xd02c <f_mkdir+0x1d6>
    cece:	81 e1       	ldi	r24, 0x11	; 17
    ced0:	90 e0       	ldi	r25, 0x00	; 0
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    ced2:	ac c0       	rjmp	.+344    	; 0xd02c <f_mkdir+0x1d6>
    ced4:	38 e0       	ldi	r19, 0x08	; 8
    ced6:	e3 2e       	mov	r14, r19
    ced8:	f1 2c       	mov	r15, r1
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    ceda:	f5 cf       	rjmp	.-22     	; 0xcec6 <f_mkdir+0x70>
    cedc:	8d ad       	ldd	r24, Y+61	; 0x3d
    cede:	9e ad       	ldd	r25, Y+62	; 0x3e
    cee0:	98 ab       	std	Y+48, r25	; 0x30
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    cee2:	8f a7       	std	Y+47, r24	; 0x2f
    cee4:	40 e0       	ldi	r20, 0x00	; 0
    cee6:	50 e0       	ldi	r21, 0x00	; 0
    cee8:	ba 01       	movw	r22, r20
    ceea:	ce 01       	movw	r24, r28
    ceec:	8f 96       	adiw	r24, 0x2f	; 47
    ceee:	0e 94 2a 52 	call	0xa454	; 0xa454 <create_chain>
    cef2:	4b 01       	movw	r8, r22
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cef4:	5c 01       	movw	r10, r24
    cef6:	67 2b       	or	r22, r23
    cef8:	68 2b       	or	r22, r24
    cefa:	69 2b       	or	r22, r25
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cefc:	09 f1       	breq	.+66     	; 0xcf40 <f_mkdir+0xea>
    cefe:	e1 e0       	ldi	r30, 0x01	; 1
    cf00:	8e 16       	cp	r8, r30
    cf02:	91 04       	cpc	r9, r1
    cf04:	a1 04       	cpc	r10, r1
    cf06:	b1 04       	cpc	r11, r1
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    cf08:	61 f0       	breq	.+24     	; 0xcf22 <f_mkdir+0xcc>
    cf0a:	ff ef       	ldi	r31, 0xFF	; 255
    cf0c:	8f 16       	cp	r8, r31
    cf0e:	9f 06       	cpc	r9, r31
    cf10:	af 06       	cpc	r10, r31
    cf12:	bf 06       	cpc	r11, r31
			tm = GET_FATTIME();
    cf14:	d9 f4       	brne	.+54     	; 0xcf4c <f_mkdir+0xf6>
    cf16:	0e 94 6d 71 	call	0xe2da	; 0xe2da <get_fattime>
    cf1a:	ee 24       	eor	r14, r14
    cf1c:	e3 94       	inc	r14
    cf1e:	f1 2c       	mov	r15, r1
    cf20:	05 c0       	rjmp	.+10     	; 0xcf2c <f_mkdir+0xd6>
    cf22:	0e 94 6d 71 	call	0xe2da	; 0xe2da <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cf26:	92 e0       	ldi	r25, 0x02	; 2
    cf28:	e9 2e       	mov	r14, r25
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    cf2a:	f1 2c       	mov	r15, r1
    cf2c:	00 e0       	ldi	r16, 0x00	; 0
    cf2e:	10 e0       	ldi	r17, 0x00	; 0
    cf30:	98 01       	movw	r18, r16
    cf32:	b5 01       	movw	r22, r10
    cf34:	a4 01       	movw	r20, r8
    cf36:	ce 01       	movw	r24, r28
    cf38:	8f 96       	adiw	r24, 0x2f	; 47
    cf3a:	0e 94 50 53 	call	0xa6a0	; 0xa6a0 <remove_chain>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cf3e:	c3 cf       	rjmp	.-122    	; 0xcec6 <f_mkdir+0x70>
    cf40:	0e 94 6d 71 	call	0xe2da	; 0xe2da <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cf44:	87 e0       	ldi	r24, 0x07	; 7
    cf46:	e8 2e       	mov	r14, r24
    cf48:	f1 2c       	mov	r15, r1
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cf4a:	f0 cf       	rjmp	.-32     	; 0xcf2c <f_mkdir+0xd6>
    cf4c:	0e 94 6d 71 	call	0xe2da	; 0xe2da <get_fattime>
    cf50:	2b 01       	movw	r4, r22
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    cf52:	3c 01       	movw	r6, r24
    cf54:	b5 01       	movw	r22, r10
    cf56:	a4 01       	movw	r20, r8
    cf58:	8d ad       	ldd	r24, Y+61	; 0x3d
    cf5a:	9e ad       	ldd	r25, Y+62	; 0x3e
    cf5c:	0e 94 3d 4c 	call	0x987a	; 0x987a <dir_clear>
				if (res == FR_OK) {
    cf60:	7c 01       	movw	r14, r24
    cf62:	89 2b       	or	r24, r25
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    cf64:	19 f7       	brne	.-58     	; 0xcf2c <f_mkdir+0xd6>
    cf66:	8d ad       	ldd	r24, Y+61	; 0x3d
    cf68:	9e ad       	ldd	r25, Y+62	; 0x3e
    cf6a:	4b e0       	ldi	r20, 0x0B	; 11
    cf6c:	50 e0       	ldi	r21, 0x00	; 0
    cf6e:	60 e2       	ldi	r22, 0x20	; 32
    cf70:	70 e0       	ldi	r23, 0x00	; 0
    cf72:	c5 96       	adiw	r24, 0x35	; 53
    cf74:	0e 94 25 48 	call	0x904a	; 0x904a <mem_set>
						fs->win[DIR_Name] = '.';
    cf78:	8d ad       	ldd	r24, Y+61	; 0x3d
    cf7a:	9e ad       	ldd	r25, Y+62	; 0x3e
    cf7c:	1e e2       	ldi	r17, 0x2E	; 46
    cf7e:	fc 01       	movw	r30, r24
						fs->win[DIR_Attr] = AM_DIR;
    cf80:	15 ab       	std	Z+53, r17	; 0x35
    cf82:	e0 5c       	subi	r30, 0xC0	; 192
    cf84:	ff 4f       	sbci	r31, 0xFF	; 255
    cf86:	20 e1       	ldi	r18, 0x10	; 16
						st_dword(fs->win + DIR_ModTime, tm);
    cf88:	20 83       	st	Z, r18
    cf8a:	b3 01       	movw	r22, r6
    cf8c:	a2 01       	movw	r20, r4
    cf8e:	85 5b       	subi	r24, 0xB5	; 181
    cf90:	9f 4f       	sbci	r25, 0xFF	; 255
    cf92:	0e 94 1f 48 	call	0x903e	; 0x903e <st_dword>
						st_clust(fs, fs->win, dcl);
    cf96:	8d ad       	ldd	r24, Y+61	; 0x3d
    cf98:	9e ad       	ldd	r25, Y+62	; 0x3e
    cf9a:	bc 01       	movw	r22, r24
    cf9c:	6b 5c       	subi	r22, 0xCB	; 203
    cf9e:	7f 4f       	sbci	r23, 0xFF	; 255
    cfa0:	a5 01       	movw	r20, r10
    cfa2:	94 01       	movw	r18, r8
    cfa4:	0e 94 6b 4b 	call	0x96d6	; 0x96d6 <st_clust.isra.5>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    cfa8:	8d ad       	ldd	r24, Y+61	; 0x3d
    cfaa:	9e ad       	ldd	r25, Y+62	; 0x3e
    cfac:	bc 01       	movw	r22, r24
    cfae:	6b 5c       	subi	r22, 0xCB	; 203
    cfb0:	7f 4f       	sbci	r23, 0xFF	; 255
    cfb2:	40 e2       	ldi	r20, 0x20	; 32
    cfb4:	50 e0       	ldi	r21, 0x00	; 0
    cfb6:	8b 5a       	subi	r24, 0xAB	; 171
    cfb8:	9f 4f       	sbci	r25, 0xFF	; 255
    cfba:	0e 94 8e 49 	call	0x931c	; 0x931c <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    cfbe:	8d ad       	ldd	r24, Y+61	; 0x3d
    cfc0:	9e ad       	ldd	r25, Y+62	; 0x3e
    cfc2:	fc 01       	movw	r30, r24
    cfc4:	ea 5a       	subi	r30, 0xAA	; 170
    cfc6:	ff 4f       	sbci	r31, 0xFF	; 255
						st_clust(fs, fs->win + SZDIRE, pcl);
    cfc8:	10 83       	st	Z, r17
    cfca:	2f 81       	ldd	r18, Y+7	; 0x07
    cfcc:	38 85       	ldd	r19, Y+8	; 0x08
    cfce:	49 85       	ldd	r20, Y+9	; 0x09
    cfd0:	5a 85       	ldd	r21, Y+10	; 0x0a
    cfd2:	bc 01       	movw	r22, r24
    cfd4:	6b 5a       	subi	r22, 0xAB	; 171
    cfd6:	7f 4f       	sbci	r23, 0xFF	; 255
    cfd8:	0e 94 6b 4b 	call	0x96d6	; 0x96d6 <st_clust.isra.5>
						fs->wflag = 1;
    cfdc:	ed ad       	ldd	r30, Y+61	; 0x3d
    cfde:	fe ad       	ldd	r31, Y+62	; 0x3e
    cfe0:	81 e0       	ldi	r24, 0x01	; 1
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    cfe2:	83 83       	std	Z+3, r24	; 0x03
    cfe4:	ce 01       	movw	r24, r28
    cfe6:	01 96       	adiw	r24, 0x01	; 1
    cfe8:	0e 94 21 57 	call	0xae42	; 0xae42 <dir_register>
				}
			}
			if (res == FR_OK) {
    cfec:	7c 01       	movw	r14, r24
    cfee:	89 2b       	or	r24, r25
    cff0:	09 f0       	breq	.+2      	; 0xcff4 <f_mkdir+0x19e>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    cff2:	9c cf       	rjmp	.-200    	; 0xcf2c <f_mkdir+0xd6>
    cff4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cff6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cff8:	b3 01       	movw	r22, r6
    cffa:	a2 01       	movw	r20, r4
    cffc:	46 96       	adiw	r24, 0x16	; 22
    cffe:	0e 94 1f 48 	call	0x903e	; 0x903e <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    d002:	6b 8d       	ldd	r22, Y+27	; 0x1b
    d004:	7c 8d       	ldd	r23, Y+28	; 0x1c
    d006:	a5 01       	movw	r20, r10
    d008:	94 01       	movw	r18, r8
    d00a:	8d ad       	ldd	r24, Y+61	; 0x3d
    d00c:	9e ad       	ldd	r25, Y+62	; 0x3e
    d00e:	0e 94 6b 4b 	call	0x96d6	; 0x96d6 <st_clust.isra.5>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    d012:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d014:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d016:	80 e1       	ldi	r24, 0x10	; 16
					fs->wflag = 1;
    d018:	83 87       	std	Z+11, r24	; 0x0b
    d01a:	8d ad       	ldd	r24, Y+61	; 0x3d
    d01c:	9e ad       	ldd	r25, Y+62	; 0x3e
    d01e:	21 e0       	ldi	r18, 0x01	; 1
    d020:	fc 01       	movw	r30, r24
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    d022:	23 83       	std	Z+3, r18	; 0x03
    d024:	0e 94 cb 4b 	call	0x9796	; 0x9796 <sync_fs>
    d028:	7c 01       	movw	r14, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d02a:	4d cf       	rjmp	.-358    	; 0xcec6 <f_mkdir+0x70>
    d02c:	c0 5c       	subi	r28, 0xC0	; 192
    d02e:	df 4f       	sbci	r29, 0xFF	; 255
    d030:	e0 e1       	ldi	r30, 0x10	; 16
    d032:	0c 94 a4 e4 	jmp	0x1c948	; 0x1c948 <__epilogue_restores__+0x4>

0000d036 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    d036:	a2 e8       	ldi	r26, 0x82	; 130
    d038:	b0 e0       	ldi	r27, 0x00	; 0
    d03a:	e1 e2       	ldi	r30, 0x21	; 33
    d03c:	f8 e6       	ldi	r31, 0x68	; 104
    d03e:	0c 94 8f e4 	jmp	0x1c91e	; 0x1c91e <__prologue_saves__+0x12>
    d042:	c1 58       	subi	r28, 0x81	; 129
    d044:	df 4f       	sbci	r29, 0xFF	; 255
    d046:	99 83       	std	Y+1, r25	; 0x01
    d048:	88 83       	st	Y, r24
    d04a:	cf 57       	subi	r28, 0x7F	; 127
    d04c:	d0 40       	sbci	r29, 0x00	; 0
    d04e:	cf 57       	subi	r28, 0x7F	; 127
    d050:	df 4f       	sbci	r29, 0xFF	; 255
    d052:	79 83       	std	Y+1, r23	; 0x01
    d054:	68 83       	st	Y, r22
    d056:	c1 58       	subi	r28, 0x81	; 129
    d058:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    d05a:	ce 01       	movw	r24, r28
    d05c:	8f 57       	subi	r24, 0x7F	; 127
    d05e:	9f 4f       	sbci	r25, 0xFF	; 255
    d060:	0e 94 36 49 	call	0x926c	; 0x926c <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    d064:	42 e0       	ldi	r20, 0x02	; 2
    d066:	be 01       	movw	r22, r28
    d068:	63 58       	subi	r22, 0x83	; 131
    d06a:	7f 4f       	sbci	r23, 0xFF	; 255
    d06c:	ce 01       	movw	r24, r28
    d06e:	81 58       	subi	r24, 0x81	; 129
    d070:	9f 4f       	sbci	r25, 0xFF	; 255
    d072:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
	if (res == FR_OK) {
    d076:	00 97       	sbiw	r24, 0x00	; 0
    d078:	09 f0       	breq	.+2      	; 0xd07c <f_rename+0x46>
    d07a:	ed c0       	rjmp	.+474    	; 0xd256 <f_rename+0x220>
		djo.obj.fs = fs;
    d07c:	ef 96       	adiw	r28, 0x3f	; 63
    d07e:	8e ad       	ldd	r24, Y+62	; 0x3e
    d080:	9f ad       	ldd	r25, Y+63	; 0x3f
    d082:	ef 97       	sbiw	r28, 0x3f	; 63
    d084:	98 ab       	std	Y+48, r25	; 0x30
    d086:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    d088:	80 e0       	ldi	r24, 0x00	; 0
    d08a:	92 e0       	ldi	r25, 0x02	; 2
    d08c:	2b d2       	rcall	.+1110   	; 0xd4e4 <ff_memalloc>
    d08e:	6c 01       	movw	r12, r24
    d090:	00 97       	sbiw	r24, 0x00	; 0
    d092:	f1 f0       	breq	.+60     	; 0xd0d0 <f_rename+0x9a>
    d094:	ef 96       	adiw	r28, 0x3f	; 63
    d096:	ee ad       	ldd	r30, Y+62	; 0x3e
    d098:	ff ad       	ldd	r31, Y+63	; 0x3f
    d09a:	ef 97       	sbiw	r28, 0x3f	; 63
    d09c:	94 87       	std	Z+12, r25	; 0x0c
    d09e:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    d0a0:	c1 58       	subi	r28, 0x81	; 129
    d0a2:	df 4f       	sbci	r29, 0xFF	; 255
    d0a4:	68 81       	ld	r22, Y
    d0a6:	79 81       	ldd	r23, Y+1	; 0x01
    d0a8:	cf 57       	subi	r28, 0x7F	; 127
    d0aa:	d0 40       	sbci	r29, 0x00	; 0
    d0ac:	ce 01       	movw	r24, r28
    d0ae:	8f 96       	adiw	r24, 0x2f	; 47
    d0b0:	0e 94 af 58 	call	0xb15e	; 0xb15e <follow_path>
    d0b4:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    d0b6:	89 2b       	or	r24, r25
    d0b8:	39 f4       	brne	.+14     	; 0xd0c8 <f_rename+0x92>
    d0ba:	67 96       	adiw	r28, 0x17	; 23
    d0bc:	8f ad       	ldd	r24, Y+63	; 0x3f
    d0be:	67 97       	sbiw	r28, 0x17	; 23
    d0c0:	80 7a       	andi	r24, 0xA0	; 160
    d0c2:	49 f0       	breq	.+18     	; 0xd0d6 <f_rename+0xa0>
    d0c4:	06 e0       	ldi	r16, 0x06	; 6
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    d0c6:	10 e0       	ldi	r17, 0x00	; 0
    d0c8:	c6 01       	movw	r24, r12
    d0ca:	0f d2       	rcall	.+1054   	; 0xd4ea <ff_memfree>
    d0cc:	c8 01       	movw	r24, r16

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    d0ce:	c3 c0       	rjmp	.+390    	; 0xd256 <f_rename+0x220>
    d0d0:	81 e1       	ldi	r24, 0x11	; 17
    d0d2:	90 e0       	ldi	r25, 0x00	; 0
    d0d4:	c0 c0       	rjmp	.+384    	; 0xd256 <f_rename+0x220>
    d0d6:	2b 96       	adiw	r28, 0x0b	; 11
    d0d8:	6e ad       	ldd	r22, Y+62	; 0x3e
    d0da:	7f ad       	ldd	r23, Y+63	; 0x3f
    d0dc:	2b 97       	sbiw	r28, 0x0b	; 11
    d0de:	40 e2       	ldi	r20, 0x20	; 32
    d0e0:	50 e0       	ldi	r21, 0x00	; 0
    d0e2:	ce 01       	movw	r24, r28
    d0e4:	83 5a       	subi	r24, 0xA3	; 163
    d0e6:	9f 4f       	sbci	r25, 0xFF	; 255
    d0e8:	0e 94 8e 49 	call	0x931c	; 0x931c <mem_cpy.part.0>
    d0ec:	4e e2       	ldi	r20, 0x2E	; 46
    d0ee:	50 e0       	ldi	r21, 0x00	; 0
    d0f0:	be 01       	movw	r22, r28
    d0f2:	61 5d       	subi	r22, 0xD1	; 209
    d0f4:	7f 4f       	sbci	r23, 0xFF	; 255
    d0f6:	ce 01       	movw	r24, r28
    d0f8:	01 96       	adiw	r24, 0x01	; 1
    d0fa:	0e 94 8e 49 	call	0x931c	; 0x931c <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    d0fe:	cf 57       	subi	r28, 0x7F	; 127
    d100:	df 4f       	sbci	r29, 0xFF	; 255
    d102:	68 81       	ld	r22, Y
    d104:	79 81       	ldd	r23, Y+1	; 0x01
    d106:	c1 58       	subi	r28, 0x81	; 129
    d108:	d0 40       	sbci	r29, 0x00	; 0
    d10a:	ce 01       	movw	r24, r28
    d10c:	01 96       	adiw	r24, 0x01	; 1
    d10e:	0e 94 af 58 	call	0xb15e	; 0xb15e <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    d112:	8c 01       	movw	r16, r24
    d114:	89 2b       	or	r24, r25
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    d116:	f9 f4       	brne	.+62     	; 0xd156 <f_rename+0x120>
    d118:	4f 81       	ldd	r20, Y+7	; 0x07
    d11a:	58 85       	ldd	r21, Y+8	; 0x08
    d11c:	69 85       	ldd	r22, Y+9	; 0x09
    d11e:	7a 85       	ldd	r23, Y+10	; 0x0a
    d120:	8d a9       	ldd	r24, Y+53	; 0x35
    d122:	9e a9       	ldd	r25, Y+54	; 0x36
    d124:	af a9       	ldd	r26, Y+55	; 0x37
    d126:	b8 ad       	ldd	r27, Y+56	; 0x38
    d128:	48 17       	cp	r20, r24
    d12a:	59 07       	cpc	r21, r25
    d12c:	6a 07       	cpc	r22, r26
    d12e:	7b 07       	cpc	r23, r27
    d130:	09 f0       	breq	.+2      	; 0xd134 <f_rename+0xfe>
    d132:	8b c0       	rjmp	.+278    	; 0xd24a <f_rename+0x214>
    d134:	4f 85       	ldd	r20, Y+15	; 0x0f
    d136:	58 89       	ldd	r21, Y+16	; 0x10
    d138:	69 89       	ldd	r22, Y+17	; 0x11
    d13a:	7a 89       	ldd	r23, Y+18	; 0x12
    d13c:	21 96       	adiw	r28, 0x01	; 1
    d13e:	8c ad       	ldd	r24, Y+60	; 0x3c
    d140:	9d ad       	ldd	r25, Y+61	; 0x3d
    d142:	ae ad       	ldd	r26, Y+62	; 0x3e
    d144:	bf ad       	ldd	r27, Y+63	; 0x3f
    d146:	21 97       	sbiw	r28, 0x01	; 1
    d148:	48 17       	cp	r20, r24
    d14a:	59 07       	cpc	r21, r25
    d14c:	6a 07       	cpc	r22, r26
    d14e:	7b 07       	cpc	r23, r27
    d150:	09 f0       	breq	.+2      	; 0xd154 <f_rename+0x11e>
    d152:	7b c0       	rjmp	.+246    	; 0xd24a <f_rename+0x214>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    d154:	04 c0       	rjmp	.+8      	; 0xd15e <f_rename+0x128>
    d156:	04 30       	cpi	r16, 0x04	; 4
    d158:	11 05       	cpc	r17, r1
    d15a:	09 f0       	breq	.+2      	; 0xd15e <f_rename+0x128>
					res = dir_register(&djn);			/* Register the new entry */
    d15c:	b5 cf       	rjmp	.-150    	; 0xd0c8 <f_rename+0x92>
    d15e:	ce 01       	movw	r24, r28
    d160:	01 96       	adiw	r24, 0x01	; 1
    d162:	0e 94 21 57 	call	0xae42	; 0xae42 <dir_register>
					if (res == FR_OK) {
    d166:	8c 01       	movw	r16, r24
    d168:	89 2b       	or	r24, r25
    d16a:	09 f0       	breq	.+2      	; 0xd16e <f_rename+0x138>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    d16c:	ad cf       	rjmp	.-166    	; 0xd0c8 <f_rename+0x92>
    d16e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    d170:	1c 8d       	ldd	r17, Y+28	; 0x1c
    d172:	6d e5       	ldi	r22, 0x5D	; 93
    d174:	70 e0       	ldi	r23, 0x00	; 0
    d176:	6c 0f       	add	r22, r28
    d178:	7d 1f       	adc	r23, r29
    d17a:	63 5f       	subi	r22, 0xF3	; 243
    d17c:	7f 4f       	sbci	r23, 0xFF	; 255
    d17e:	43 e1       	ldi	r20, 0x13	; 19
    d180:	50 e0       	ldi	r21, 0x00	; 0
    d182:	c8 01       	movw	r24, r16
    d184:	0d 96       	adiw	r24, 0x0d	; 13
    d186:	0e 94 8e 49 	call	0x931c	; 0x931c <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    d18a:	a9 96       	adiw	r28, 0x29	; 41
    d18c:	8f ad       	ldd	r24, Y+63	; 0x3f
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    d18e:	a9 97       	sbiw	r28, 0x29	; 41
    d190:	84 ff       	sbrs	r24, 4
    d192:	80 62       	ori	r24, 0x20	; 32
    d194:	f8 01       	movw	r30, r16
						fs->wflag = 1;
    d196:	83 87       	std	Z+11, r24	; 0x0b
    d198:	ef 96       	adiw	r28, 0x3f	; 63
    d19a:	ee ac       	ldd	r14, Y+62	; 0x3e
    d19c:	ff ac       	ldd	r15, Y+63	; 0x3f
    d19e:	ef 97       	sbiw	r28, 0x3f	; 63
    d1a0:	bb 24       	eor	r11, r11
    d1a2:	b3 94       	inc	r11
    d1a4:	f7 01       	movw	r30, r14
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    d1a6:	b3 82       	std	Z+3, r11	; 0x03
    d1a8:	f8 01       	movw	r30, r16
    d1aa:	83 85       	ldd	r24, Z+11	; 0x0b
    d1ac:	84 ff       	sbrs	r24, 4
    d1ae:	3d c0       	rjmp	.+122    	; 0xd22a <f_rename+0x1f4>
    d1b0:	4d a9       	ldd	r20, Y+53	; 0x35
    d1b2:	5e a9       	ldd	r21, Y+54	; 0x36
    d1b4:	6f a9       	ldd	r22, Y+55	; 0x37
    d1b6:	78 ad       	ldd	r23, Y+56	; 0x38
    d1b8:	8f 81       	ldd	r24, Y+7	; 0x07
    d1ba:	98 85       	ldd	r25, Y+8	; 0x08
    d1bc:	a9 85       	ldd	r26, Y+9	; 0x09
    d1be:	ba 85       	ldd	r27, Y+10	; 0x0a
    d1c0:	48 17       	cp	r20, r24
    d1c2:	59 07       	cpc	r21, r25
    d1c4:	6a 07       	cpc	r22, r26
    d1c6:	7b 07       	cpc	r23, r27
							sect = clst2sect(fs, ld_clust(fs, dir));
    d1c8:	81 f1       	breq	.+96     	; 0xd22a <f_rename+0x1f4>
    d1ca:	b8 01       	movw	r22, r16
    d1cc:	f7 01       	movw	r30, r14
    d1ce:	80 81       	ld	r24, Z
    d1d0:	0e 94 56 4b 	call	0x96ac	; 0x96ac <ld_clust.isra.4>
    d1d4:	ab 01       	movw	r20, r22
    d1d6:	bc 01       	movw	r22, r24
    d1d8:	c7 01       	movw	r24, r14
    d1da:	0e 94 c3 48 	call	0x9186	; 0x9186 <clst2sect>
    d1de:	ab 01       	movw	r20, r22
							if (sect == 0) {
    d1e0:	bc 01       	movw	r22, r24
    d1e2:	41 15       	cp	r20, r1
    d1e4:	51 05       	cpc	r21, r1
    d1e6:	61 05       	cpc	r22, r1
    d1e8:	71 05       	cpc	r23, r1
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    d1ea:	91 f1       	breq	.+100    	; 0xd250 <f_rename+0x21a>
    d1ec:	c7 01       	movw	r24, r14
    d1ee:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    d1f2:	8c 01       	movw	r16, r24
    d1f4:	89 2b       	or	r24, r25
    d1f6:	09 f0       	breq	.+2      	; 0xd1fa <f_rename+0x1c4>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    d1f8:	67 cf       	rjmp	.-306    	; 0xd0c8 <f_rename+0x92>
    d1fa:	ef 96       	adiw	r28, 0x3f	; 63
    d1fc:	8e ad       	ldd	r24, Y+62	; 0x3e
    d1fe:	9f ad       	ldd	r25, Y+63	; 0x3f
								if (res == FR_OK && dir[1] == '.') {
    d200:	ef 97       	sbiw	r28, 0x3f	; 63
    d202:	fc 01       	movw	r30, r24
    d204:	ea 5a       	subi	r30, 0xAA	; 170
    d206:	ff 4f       	sbci	r31, 0xFF	; 255
    d208:	20 81       	ld	r18, Z
    d20a:	2e 32       	cpi	r18, 0x2E	; 46
									st_clust(fs, dir, djn.obj.sclust);
    d20c:	71 f4       	brne	.+28     	; 0xd22a <f_rename+0x1f4>
    d20e:	2f 81       	ldd	r18, Y+7	; 0x07
    d210:	38 85       	ldd	r19, Y+8	; 0x08
    d212:	49 85       	ldd	r20, Y+9	; 0x09
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    d214:	5a 85       	ldd	r21, Y+10	; 0x0a
    d216:	bc 01       	movw	r22, r24
    d218:	6b 5a       	subi	r22, 0xAB	; 171
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    d21a:	7f 4f       	sbci	r23, 0xFF	; 255
    d21c:	0e 94 6b 4b 	call	0x96d6	; 0x96d6 <st_clust.isra.5>
									fs->wflag = 1;
    d220:	ef 96       	adiw	r28, 0x3f	; 63
    d222:	ee ad       	ldd	r30, Y+62	; 0x3e
    d224:	ff ad       	ldd	r31, Y+63	; 0x3f
    d226:	ef 97       	sbiw	r28, 0x3f	; 63
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    d228:	b3 82       	std	Z+3, r11	; 0x03
    d22a:	ce 01       	movw	r24, r28
    d22c:	8f 96       	adiw	r24, 0x2f	; 47
    d22e:	0e 94 cb 55 	call	0xab96	; 0xab96 <dir_remove>
				if (res == FR_OK) {
    d232:	8c 01       	movw	r16, r24
    d234:	89 2b       	or	r24, r25
    d236:	09 f0       	breq	.+2      	; 0xd23a <f_rename+0x204>
					res = sync_fs(fs);
    d238:	47 cf       	rjmp	.-370    	; 0xd0c8 <f_rename+0x92>
    d23a:	ef 96       	adiw	r28, 0x3f	; 63
    d23c:	8e ad       	ldd	r24, Y+62	; 0x3e
    d23e:	9f ad       	ldd	r25, Y+63	; 0x3f
    d240:	ef 97       	sbiw	r28, 0x3f	; 63
    d242:	0e 94 cb 4b 	call	0x9796	; 0x9796 <sync_fs>
    d246:	8c 01       	movw	r16, r24
    d248:	3f cf       	rjmp	.-386    	; 0xd0c8 <f_rename+0x92>
    d24a:	08 e0       	ldi	r16, 0x08	; 8
    d24c:	10 e0       	ldi	r17, 0x00	; 0
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    d24e:	3c cf       	rjmp	.-392    	; 0xd0c8 <f_rename+0x92>
    d250:	02 e0       	ldi	r16, 0x02	; 2
    d252:	10 e0       	ldi	r17, 0x00	; 0
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d254:	39 cf       	rjmp	.-398    	; 0xd0c8 <f_rename+0x92>
    d256:	ce 57       	subi	r28, 0x7E	; 126
    d258:	df 4f       	sbci	r29, 0xFF	; 255
    d25a:	e9 e0       	ldi	r30, 0x09	; 9
    d25c:	0c 94 ab e4 	jmp	0x1c956	; 0x1c956 <__epilogue_restores__+0x12>

0000d260 <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    d260:	a2 e3       	ldi	r26, 0x32	; 50
    d262:	b0 e0       	ldi	r27, 0x00	; 0
    d264:	e6 e3       	ldi	r30, 0x36	; 54
    d266:	f9 e6       	ldi	r31, 0x69	; 105
    d268:	0c 94 90 e4 	jmp	0x1c920	; 0x1c920 <__prologue_saves__+0x14>
    d26c:	9a ab       	std	Y+50, r25	; 0x32
    d26e:	89 ab       	std	Y+49, r24	; 0x31
    d270:	e6 2e       	mov	r14, r22
    d272:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d274:	42 e0       	ldi	r20, 0x02	; 2
    d276:	be 01       	movw	r22, r28
    d278:	61 5d       	subi	r22, 0xD1	; 209
    d27a:	7f 4f       	sbci	r23, 0xFF	; 255
    d27c:	ce 01       	movw	r24, r28
    d27e:	c1 96       	adiw	r24, 0x31	; 49
    d280:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
	if (res == FR_OK) {
    d284:	00 97       	sbiw	r24, 0x00	; 0
    d286:	a9 f5       	brne	.+106    	; 0xd2f2 <f_chmod+0x92>
		dj.obj.fs = fs;
    d288:	8f a5       	ldd	r24, Y+47	; 0x2f
    d28a:	98 a9       	ldd	r25, Y+48	; 0x30
    d28c:	9a 83       	std	Y+2, r25	; 0x02
    d28e:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d290:	80 e0       	ldi	r24, 0x00	; 0
    d292:	92 e0       	ldi	r25, 0x02	; 2
    d294:	27 d1       	rcall	.+590    	; 0xd4e4 <ff_memalloc>
    d296:	6c 01       	movw	r12, r24
    d298:	00 97       	sbiw	r24, 0x00	; 0
    d29a:	b1 f0       	breq	.+44     	; 0xd2c8 <f_chmod+0x68>
    d29c:	ef a5       	ldd	r30, Y+47	; 0x2f
    d29e:	f8 a9       	ldd	r31, Y+48	; 0x30
    d2a0:	94 87       	std	Z+12, r25	; 0x0c
    d2a2:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d2a4:	69 a9       	ldd	r22, Y+49	; 0x31
    d2a6:	7a a9       	ldd	r23, Y+50	; 0x32
    d2a8:	ce 01       	movw	r24, r28
    d2aa:	01 96       	adiw	r24, 0x01	; 1
    d2ac:	0e 94 af 58 	call	0xb15e	; 0xb15e <follow_path>
    d2b0:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d2b2:	89 2b       	or	r24, r25
    d2b4:	29 f4       	brne	.+10     	; 0xd2c0 <f_chmod+0x60>
    d2b6:	88 a5       	ldd	r24, Y+40	; 0x28
    d2b8:	80 7a       	andi	r24, 0xA0	; 160
    d2ba:	49 f0       	breq	.+18     	; 0xd2ce <f_chmod+0x6e>
    d2bc:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d2be:	10 e0       	ldi	r17, 0x00	; 0
    d2c0:	c6 01       	movw	r24, r12
    d2c2:	13 d1       	rcall	.+550    	; 0xd4ea <ff_memfree>
    d2c4:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d2c6:	15 c0       	rjmp	.+42     	; 0xd2f2 <f_chmod+0x92>
    d2c8:	81 e1       	ldi	r24, 0x11	; 17
    d2ca:	90 e0       	ldi	r25, 0x00	; 0
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    d2cc:	12 c0       	rjmp	.+36     	; 0xd2f2 <f_chmod+0x92>
    d2ce:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d2d0:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d2d2:	83 85       	ldd	r24, Z+11	; 0x0b
    d2d4:	6e 2d       	mov	r22, r14
    d2d6:	68 27       	eor	r22, r24
    d2d8:	6f 21       	and	r22, r15
    d2da:	67 72       	andi	r22, 0x27	; 39
    d2dc:	68 27       	eor	r22, r24
				fs->wflag = 1;
    d2de:	63 87       	std	Z+11, r22	; 0x0b
    d2e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    d2e2:	98 a9       	ldd	r25, Y+48	; 0x30
    d2e4:	21 e0       	ldi	r18, 0x01	; 1
    d2e6:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d2e8:	23 83       	std	Z+3, r18	; 0x03
    d2ea:	0e 94 cb 4b 	call	0x9796	; 0x9796 <sync_fs>
    d2ee:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d2f0:	e7 cf       	rjmp	.-50     	; 0xd2c0 <f_chmod+0x60>
    d2f2:	e2 96       	adiw	r28, 0x32	; 50
    d2f4:	e8 e0       	ldi	r30, 0x08	; 8
    d2f6:	0c 94 ac e4 	jmp	0x1c958	; 0x1c958 <__epilogue_restores__+0x14>

0000d2fa <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    d2fa:	a2 e3       	ldi	r26, 0x32	; 50
    d2fc:	b0 e0       	ldi	r27, 0x00	; 0
    d2fe:	e3 e8       	ldi	r30, 0x83	; 131
    d300:	f9 e6       	ldi	r31, 0x69	; 105
    d302:	0c 94 90 e4 	jmp	0x1c920	; 0x1c920 <__prologue_saves__+0x14>
    d306:	9a ab       	std	Y+50, r25	; 0x32
    d308:	89 ab       	std	Y+49, r24	; 0x31
    d30a:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d30c:	42 e0       	ldi	r20, 0x02	; 2
    d30e:	be 01       	movw	r22, r28
    d310:	61 5d       	subi	r22, 0xD1	; 209
    d312:	7f 4f       	sbci	r23, 0xFF	; 255
    d314:	ce 01       	movw	r24, r28
    d316:	c1 96       	adiw	r24, 0x31	; 49
    d318:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
	if (res == FR_OK) {
    d31c:	00 97       	sbiw	r24, 0x00	; 0
    d31e:	09 f0       	breq	.+2      	; 0xd322 <f_utime+0x28>
    d320:	41 c0       	rjmp	.+130    	; 0xd3a4 <f_utime+0xaa>
		dj.obj.fs = fs;
    d322:	8f a5       	ldd	r24, Y+47	; 0x2f
    d324:	98 a9       	ldd	r25, Y+48	; 0x30
    d326:	9a 83       	std	Y+2, r25	; 0x02
    d328:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d32a:	80 e0       	ldi	r24, 0x00	; 0
    d32c:	92 e0       	ldi	r25, 0x02	; 2
    d32e:	da d0       	rcall	.+436    	; 0xd4e4 <ff_memalloc>
    d330:	7c 01       	movw	r14, r24
    d332:	00 97       	sbiw	r24, 0x00	; 0
    d334:	b1 f0       	breq	.+44     	; 0xd362 <f_utime+0x68>
    d336:	ef a5       	ldd	r30, Y+47	; 0x2f
    d338:	f8 a9       	ldd	r31, Y+48	; 0x30
    d33a:	94 87       	std	Z+12, r25	; 0x0c
    d33c:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d33e:	69 a9       	ldd	r22, Y+49	; 0x31
    d340:	7a a9       	ldd	r23, Y+50	; 0x32
    d342:	ce 01       	movw	r24, r28
    d344:	01 96       	adiw	r24, 0x01	; 1
    d346:	0e 94 af 58 	call	0xb15e	; 0xb15e <follow_path>
    d34a:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d34c:	89 2b       	or	r24, r25
    d34e:	29 f4       	brne	.+10     	; 0xd35a <f_utime+0x60>
    d350:	88 a5       	ldd	r24, Y+40	; 0x28
    d352:	80 7a       	andi	r24, 0xA0	; 160
    d354:	49 f0       	breq	.+18     	; 0xd368 <f_utime+0x6e>
    d356:	06 e0       	ldi	r16, 0x06	; 6
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d358:	10 e0       	ldi	r17, 0x00	; 0
    d35a:	c7 01       	movw	r24, r14
    d35c:	c6 d0       	rcall	.+396    	; 0xd4ea <ff_memfree>
    d35e:	c8 01       	movw	r24, r16


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d360:	21 c0       	rjmp	.+66     	; 0xd3a4 <f_utime+0xaa>
    d362:	81 e1       	ldi	r24, 0x11	; 17
    d364:	90 e0       	ldi	r25, 0x00	; 0
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    d366:	1e c0       	rjmp	.+60     	; 0xd3a4 <f_utime+0xaa>
    d368:	f6 01       	movw	r30, r12
    d36a:	44 81       	ldd	r20, Z+4	; 0x04
    d36c:	55 81       	ldd	r21, Z+5	; 0x05
    d36e:	60 e0       	ldi	r22, 0x00	; 0
    d370:	70 e0       	ldi	r23, 0x00	; 0
    d372:	ba 01       	movw	r22, r20
    d374:	55 27       	eor	r21, r21
    d376:	44 27       	eor	r20, r20
    d378:	86 81       	ldd	r24, Z+6	; 0x06
    d37a:	97 81       	ldd	r25, Z+7	; 0x07
    d37c:	a0 e0       	ldi	r26, 0x00	; 0
    d37e:	b0 e0       	ldi	r27, 0x00	; 0
    d380:	48 2b       	or	r20, r24
    d382:	59 2b       	or	r21, r25
    d384:	6a 2b       	or	r22, r26
    d386:	7b 2b       	or	r23, r27
    d388:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d38a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d38c:	46 96       	adiw	r24, 0x16	; 22
    d38e:	0e 94 1f 48 	call	0x903e	; 0x903e <st_dword>
				fs->wflag = 1;
    d392:	8f a5       	ldd	r24, Y+47	; 0x2f
    d394:	98 a9       	ldd	r25, Y+48	; 0x30
    d396:	21 e0       	ldi	r18, 0x01	; 1
    d398:	fc 01       	movw	r30, r24
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d39a:	23 83       	std	Z+3, r18	; 0x03
    d39c:	0e 94 cb 4b 	call	0x9796	; 0x9796 <sync_fs>
    d3a0:	8c 01       	movw	r16, r24
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d3a2:	db cf       	rjmp	.-74     	; 0xd35a <f_utime+0x60>
    d3a4:	e2 96       	adiw	r28, 0x32	; 50
    d3a6:	e8 e0       	ldi	r30, 0x08	; 8
    d3a8:	0c 94 ac e4 	jmp	0x1c958	; 0x1c958 <__epilogue_restores__+0x14>

0000d3ac <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    d3ac:	a2 e3       	ldi	r26, 0x32	; 50
    d3ae:	b0 e0       	ldi	r27, 0x00	; 0
    d3b0:	ec ed       	ldi	r30, 0xDC	; 220
    d3b2:	f9 e6       	ldi	r31, 0x69	; 105
    d3b4:	0c 94 8c e4 	jmp	0x1c918	; 0x1c918 <__prologue_saves__+0xc>
    d3b8:	9a ab       	std	Y+50, r25	; 0x32
    d3ba:	89 ab       	std	Y+49, r24	; 0x31
    d3bc:	6b 01       	movw	r12, r22
    d3be:	5a 01       	movw	r10, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    d3c0:	40 e0       	ldi	r20, 0x00	; 0
    d3c2:	be 01       	movw	r22, r28
    d3c4:	61 5d       	subi	r22, 0xD1	; 209
    d3c6:	7f 4f       	sbci	r23, 0xFF	; 255
    d3c8:	ce 01       	movw	r24, r28
    d3ca:	c1 96       	adiw	r24, 0x31	; 49
    d3cc:	0e 94 60 4d 	call	0x9ac0	; 0x9ac0 <mount_volume>
    d3d0:	7c 01       	movw	r14, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    d3d2:	89 2b       	or	r24, r25
    d3d4:	09 f0       	breq	.+2      	; 0xd3d8 <f_getlabel+0x2c>
    d3d6:	81 c0       	rjmp	.+258    	; 0xd4da <f_getlabel+0x12e>
    d3d8:	c1 14       	cp	r12, r1
    d3da:	d1 04       	cpc	r13, r1
    d3dc:	09 f4       	brne	.+2      	; 0xd3e0 <f_getlabel+0x34>
    d3de:	53 c0       	rjmp	.+166    	; 0xd486 <f_getlabel+0xda>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    d3e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    d3e2:	98 a9       	ldd	r25, Y+48	; 0x30
    d3e4:	9a 83       	std	Y+2, r25	; 0x02
    d3e6:	89 83       	std	Y+1, r24	; 0x01
    d3e8:	1f 82       	std	Y+7, r1	; 0x07
    d3ea:	18 86       	std	Y+8, r1	; 0x08
    d3ec:	19 86       	std	Y+9, r1	; 0x09
    d3ee:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    d3f0:	40 e0       	ldi	r20, 0x00	; 0
    d3f2:	50 e0       	ldi	r21, 0x00	; 0
    d3f4:	ba 01       	movw	r22, r20
    d3f6:	ce 01       	movw	r24, r28
    d3f8:	01 96       	adiw	r24, 0x01	; 1
    d3fa:	0e 94 69 51 	call	0xa2d2	; 0xa2d2 <dir_sdi>
		if (res == FR_OK) {
    d3fe:	00 97       	sbiw	r24, 0x00	; 0
    d400:	e9 f5       	brne	.+122    	; 0xd47c <f_getlabel+0xd0>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    d402:	61 e0       	ldi	r22, 0x01	; 1
    d404:	70 e0       	ldi	r23, 0x00	; 0
    d406:	ce 01       	movw	r24, r28
    d408:	01 96       	adiw	r24, 0x01	; 1
    d40a:	0e 94 02 55 	call	0xaa04	; 0xaa04 <dir_read>
		 	if (res == FR_OK) {
    d40e:	00 97       	sbiw	r24, 0x00	; 0
    d410:	a9 f5       	brne	.+106    	; 0xd47c <f_getlabel+0xd0>
    d412:	00 e0       	ldi	r16, 0x00	; 0
    d414:	10 e0       	ldi	r17, 0x00	; 0
    d416:	80 e0       	ldi	r24, 0x00	; 0
    d418:	90 e0       	ldi	r25, 0x00	; 0
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    d41a:	4c 01       	movw	r8, r24
    d41c:	2f ef       	ldi	r18, 0xFF	; 255
    d41e:	82 1a       	sub	r8, r18
    d420:	92 0a       	sbc	r9, r18
    d422:	2b 8d       	ldd	r18, Y+27	; 0x1b
    d424:	3c 8d       	ldd	r19, Y+28	; 0x1c
    d426:	f9 01       	movw	r30, r18
    d428:	e8 0f       	add	r30, r24
    d42a:	f9 1f       	adc	r31, r25
    d42c:	80 81       	ld	r24, Z
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
    d42e:	65 eb       	ldi	r22, 0xB5	; 181
    d430:	71 e0       	ldi	r23, 0x01	; 1
    d432:	90 e0       	ldi	r25, 0x00	; 0
    d434:	90 d0       	rcall	.+288    	; 0xd556 <ff_oem2uni>
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    d436:	00 97       	sbiw	r24, 0x00	; 0
    d438:	19 f4       	brne	.+6      	; 0xd440 <f_getlabel+0x94>
						if (wc == 0) { di = 0; break; }
    d43a:	00 e0       	ldi	r16, 0x00	; 0
    d43c:	10 e0       	ldi	r17, 0x00	; 0
    d43e:	13 c0       	rjmp	.+38     	; 0xd466 <f_getlabel+0xba>
					while (si < 11) {
						wc = dj.dir[si++];
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    d440:	bc 01       	movw	r22, r24
    d442:	80 e0       	ldi	r24, 0x00	; 0
    d444:	90 e0       	ldi	r25, 0x00	; 0
    d446:	24 e0       	ldi	r18, 0x04	; 4
    d448:	30 e0       	ldi	r19, 0x00	; 0
    d44a:	a6 01       	movw	r20, r12
    d44c:	40 0f       	add	r20, r16
    d44e:	51 1f       	adc	r21, r17
    d450:	0e 94 99 49 	call	0x9332	; 0x9332 <put_utf>
    d454:	90 e0       	ldi	r25, 0x00	; 0
						if (wc == 0) { di = 0; break; }
    d456:	00 97       	sbiw	r24, 0x00	; 0
    d458:	81 f3       	breq	.-32     	; 0xd43a <f_getlabel+0x8e>
						di += wc;
    d45a:	08 0f       	add	r16, r24
    d45c:	19 1f       	adc	r17, r25
    d45e:	c4 01       	movw	r24, r8
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    d460:	8b 30       	cpi	r24, 0x0B	; 11
    d462:	91 05       	cpc	r25, r1
    d464:	d1 f6       	brne	.-76     	; 0xd41a <f_getlabel+0x6e>
    d466:	f6 01       	movw	r30, r12
    d468:	e0 0f       	add	r30, r16
    d46a:	f1 1f       	adc	r31, r17
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    d46c:	10 82       	st	Z, r1
						if (di == 0) break;
    d46e:	ce 16       	cp	r12, r30
    d470:	df 06       	cpc	r13, r31
    d472:	49 f0       	breq	.+18     	; 0xd486 <f_getlabel+0xda>
					} while (label[--di] == ' ');
    d474:	82 91       	ld	r24, -Z
    d476:	80 32       	cpi	r24, 0x20	; 32
    d478:	c9 f3       	breq	.-14     	; 0xd46c <f_getlabel+0xc0>
    d47a:	05 c0       	rjmp	.+10     	; 0xd486 <f_getlabel+0xda>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d47c:	84 30       	cpi	r24, 0x04	; 4
    d47e:	91 05       	cpc	r25, r1
    d480:	59 f5       	brne	.+86     	; 0xd4d8 <f_getlabel+0x12c>
			label[0] = 0;
    d482:	f6 01       	movw	r30, r12
    d484:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    d486:	a1 14       	cp	r10, r1
    d488:	b1 04       	cpc	r11, r1
    d48a:	39 f1       	breq	.+78     	; 0xd4da <f_getlabel+0x12e>
		res = move_window(fs, fs->volbase);
    d48c:	8f a5       	ldd	r24, Y+47	; 0x2f
    d48e:	98 a9       	ldd	r25, Y+48	; 0x30
    d490:	fc 01       	movw	r30, r24
    d492:	41 a1       	ldd	r20, Z+33	; 0x21
    d494:	52 a1       	ldd	r21, Z+34	; 0x22
    d496:	63 a1       	ldd	r22, Z+35	; 0x23
    d498:	74 a1       	ldd	r23, Z+36	; 0x24
    d49a:	0e 94 e5 4c 	call	0x99ca	; 0x99ca <move_window>
    d49e:	7c 01       	movw	r14, r24
		if (res == FR_OK) {
    d4a0:	89 2b       	or	r24, r25
    d4a2:	d9 f4       	brne	.+54     	; 0xd4da <f_getlabel+0x12e>
			switch (fs->fs_type) {
    d4a4:	ef a5       	ldd	r30, Y+47	; 0x2f
    d4a6:	f8 a9       	ldd	r31, Y+48	; 0x30
    d4a8:	80 81       	ld	r24, Z
    d4aa:	83 30       	cpi	r24, 0x03	; 3
    d4ac:	29 f0       	breq	.+10     	; 0xd4b8 <f_getlabel+0x10c>
    d4ae:	84 30       	cpi	r24, 0x04	; 4
    d4b0:	31 f0       	breq	.+12     	; 0xd4be <f_getlabel+0x112>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    d4b2:	87 e2       	ldi	r24, 0x27	; 39
    d4b4:	90 e0       	ldi	r25, 0x00	; 0
    d4b6:	05 c0       	rjmp	.+10     	; 0xd4c2 <f_getlabel+0x116>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    d4b8:	83 e4       	ldi	r24, 0x43	; 67
    d4ba:	90 e0       	ldi	r25, 0x00	; 0
    d4bc:	02 c0       	rjmp	.+4      	; 0xd4c2 <f_getlabel+0x116>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    d4be:	84 e6       	ldi	r24, 0x64	; 100
    d4c0:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    d4c2:	f5 96       	adiw	r30, 0x35	; 53
    d4c4:	8e 0f       	add	r24, r30
    d4c6:	9f 1f       	adc	r25, r31
    d4c8:	0e 94 0a 48 	call	0x9014	; 0x9014 <ld_dword>
    d4cc:	f5 01       	movw	r30, r10
    d4ce:	60 83       	st	Z, r22
    d4d0:	71 83       	std	Z+1, r23	; 0x01
    d4d2:	82 83       	std	Z+2, r24	; 0x02
    d4d4:	93 83       	std	Z+3, r25	; 0x03
    d4d6:	01 c0       	rjmp	.+2      	; 0xd4da <f_getlabel+0x12e>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d4d8:	7c 01       	movw	r14, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    d4da:	c7 01       	movw	r24, r14
    d4dc:	e2 96       	adiw	r28, 0x32	; 50
    d4de:	ec e0       	ldi	r30, 0x0C	; 12
    d4e0:	0c 94 a8 e4 	jmp	0x1c950	; 0x1c950 <__epilogue_restores__+0xc>

0000d4e4 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d4e4:	0c 94 9f 29 	jmp	0x533e	; 0x533e <safemalloc>
}
    d4e8:	08 95       	ret

0000d4ea <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    d4ea:	0c 94 c1 29 	jmp	0x5382	; 0x5382 <safefree>
    d4ee:	08 95       	ret

0000d4f0 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    d4f0:	cf 92       	push	r12
    d4f2:	df 92       	push	r13
    d4f4:	ef 92       	push	r14
    d4f6:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    d4f8:	60 38       	cpi	r22, 0x80	; 128
    d4fa:	71 05       	cpc	r23, r1
    d4fc:	81 05       	cpc	r24, r1
    d4fe:	91 05       	cpc	r25, r1
    d500:	10 f4       	brcc	.+4      	; 0xd506 <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    d502:	cb 01       	movw	r24, r22
    d504:	23 c0       	rjmp	.+70     	; 0xd54c <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    d506:	61 15       	cp	r22, r1
    d508:	71 05       	cpc	r23, r1
    d50a:	21 e0       	ldi	r18, 0x01	; 1
    d50c:	82 07       	cpc	r24, r18
    d50e:	91 05       	cpc	r25, r1
    d510:	d8 f4       	brcc	.+54     	; 0xd548 <ff_uni2oem+0x58>
    d512:	45 3b       	cpi	r20, 0xB5	; 181
    d514:	51 40       	sbci	r21, 0x01	; 1
    d516:	c1 f4       	brne	.+48     	; 0xd548 <ff_uni2oem+0x58>
    d518:	e6 ec       	ldi	r30, 0xC6	; 198
    d51a:	f6 e0       	ldi	r31, 0x06	; 6
    d51c:	20 e0       	ldi	r18, 0x00	; 0
    d51e:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    d520:	c1 90       	ld	r12, Z+
    d522:	d1 90       	ld	r13, Z+
    d524:	e1 2c       	mov	r14, r1
    d526:	f1 2c       	mov	r15, r1
    d528:	6c 15       	cp	r22, r12
    d52a:	7d 05       	cpc	r23, r13
    d52c:	8e 05       	cpc	r24, r14
    d52e:	9f 05       	cpc	r25, r15
    d530:	29 f0       	breq	.+10     	; 0xd53c <ff_uni2oem+0x4c>
    d532:	2f 5f       	subi	r18, 0xFF	; 255
    d534:	3f 4f       	sbci	r19, 0xFF	; 255
    d536:	20 38       	cpi	r18, 0x80	; 128
    d538:	31 05       	cpc	r19, r1
    d53a:	91 f7       	brne	.-28     	; 0xd520 <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    d53c:	b9 01       	movw	r22, r18
    d53e:	60 58       	subi	r22, 0x80	; 128
    d540:	7f 4f       	sbci	r23, 0xFF	; 255
    d542:	cb 01       	movw	r24, r22
    d544:	99 27       	eor	r25, r25
    d546:	02 c0       	rjmp	.+4      	; 0xd54c <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d548:	80 e0       	ldi	r24, 0x00	; 0
    d54a:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d54c:	ff 90       	pop	r15
    d54e:	ef 90       	pop	r14
    d550:	df 90       	pop	r13
    d552:	cf 90       	pop	r12
    d554:	08 95       	ret

0000d556 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    d556:	80 38       	cpi	r24, 0x80	; 128
    d558:	91 05       	cpc	r25, r1
    d55a:	88 f0       	brcs	.+34     	; 0xd57e <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    d55c:	65 3b       	cpi	r22, 0xB5	; 181
    d55e:	71 40       	sbci	r23, 0x01	; 1
    d560:	61 f4       	brne	.+24     	; 0xd57a <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    d562:	8f 3f       	cpi	r24, 0xFF	; 255
    d564:	91 05       	cpc	r25, r1
    d566:	09 f0       	breq	.+2      	; 0xd56a <ff_oem2uni+0x14>
    d568:	40 f4       	brcc	.+16     	; 0xd57a <ff_oem2uni+0x24>
    d56a:	88 0f       	add	r24, r24
    d56c:	99 1f       	adc	r25, r25
    d56e:	fc 01       	movw	r30, r24
    d570:	ea 53       	subi	r30, 0x3A	; 58
    d572:	fa 4f       	sbci	r31, 0xFA	; 250
    d574:	80 81       	ld	r24, Z
    d576:	91 81       	ldd	r25, Z+1	; 0x01
    d578:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d57a:	80 e0       	ldi	r24, 0x00	; 0
    d57c:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    d57e:	08 95       	ret

0000d580 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    d580:	61 15       	cp	r22, r1
    d582:	71 05       	cpc	r23, r1
    d584:	21 e0       	ldi	r18, 0x01	; 1
    d586:	82 07       	cpc	r24, r18
    d588:	91 05       	cpc	r25, r1
    d58a:	08 f0       	brcs	.+2      	; 0xd58e <ff_wtoupper+0xe>
    d58c:	5a c0       	rjmp	.+180    	; 0xd642 <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    d58e:	61 15       	cp	r22, r1
    d590:	80 e1       	ldi	r24, 0x10	; 16
    d592:	78 07       	cpc	r23, r24
    d594:	18 f0       	brcs	.+6      	; 0xd59c <ff_wtoupper+0x1c>
    d596:	a8 e1       	ldi	r26, 0x18	; 24
    d598:	b4 e0       	ldi	r27, 0x04	; 4
    d59a:	02 c0       	rjmp	.+4      	; 0xd5a0 <ff_wtoupper+0x20>
    d59c:	a4 ed       	ldi	r26, 0xD4	; 212
    d59e:	b4 e0       	ldi	r27, 0x04	; 4
		for (;;) {
			bc = *p++;								/* Get the block base */
    d5a0:	2d 91       	ld	r18, X+
    d5a2:	3c 91       	ld	r19, X
    d5a4:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    d5a6:	21 15       	cp	r18, r1
    d5a8:	31 05       	cpc	r19, r1
    d5aa:	09 f4       	brne	.+2      	; 0xd5ae <ff_wtoupper+0x2e>
    d5ac:	48 c0       	rjmp	.+144    	; 0xd63e <ff_wtoupper+0xbe>
    d5ae:	62 17       	cp	r22, r18
    d5b0:	73 07       	cpc	r23, r19
    d5b2:	08 f4       	brcc	.+2      	; 0xd5b6 <ff_wtoupper+0x36>
    d5b4:	44 c0       	rjmp	.+136    	; 0xd63e <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d5b6:	14 96       	adiw	r26, 0x04	; 4
    d5b8:	fd 01       	movw	r30, r26
    d5ba:	32 97       	sbiw	r30, 0x02	; 2
    d5bc:	80 81       	ld	r24, Z
    d5be:	91 81       	ldd	r25, Z+1	; 0x01
    d5c0:	e9 2f       	mov	r30, r25
    d5c2:	ff 27       	eor	r31, r31
    d5c4:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d5c6:	a9 01       	movw	r20, r18
    d5c8:	48 0f       	add	r20, r24
    d5ca:	59 1f       	adc	r21, r25
    d5cc:	64 17       	cp	r22, r20
    d5ce:	75 07       	cpc	r23, r21
    d5d0:	70 f5       	brcc	.+92     	; 0xd62e <ff_wtoupper+0xae>
				switch (cmd) {
    d5d2:	e9 30       	cpi	r30, 0x09	; 9
    d5d4:	f1 05       	cpc	r31, r1
    d5d6:	98 f5       	brcc	.+102    	; 0xd63e <ff_wtoupper+0xbe>
    d5d8:	ec 54       	subi	r30, 0x4C	; 76
    d5da:	ff 4f       	sbci	r31, 0xFF	; 255
    d5dc:	0c 94 42 e4 	jmp	0x1c884	; 0x1c884 <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d5e0:	62 1b       	sub	r22, r18
    d5e2:	73 0b       	sbc	r23, r19
    d5e4:	fb 01       	movw	r30, r22
    d5e6:	ee 0f       	add	r30, r30
    d5e8:	ff 1f       	adc	r31, r31
    d5ea:	ea 0f       	add	r30, r26
    d5ec:	fb 1f       	adc	r31, r27
    d5ee:	60 81       	ld	r22, Z
    d5f0:	71 81       	ldd	r23, Z+1	; 0x01
    d5f2:	25 c0       	rjmp	.+74     	; 0xd63e <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d5f4:	cb 01       	movw	r24, r22
    d5f6:	82 1b       	sub	r24, r18
    d5f8:	93 0b       	sbc	r25, r19
    d5fa:	81 70       	andi	r24, 0x01	; 1
    d5fc:	99 27       	eor	r25, r25
    d5fe:	68 1b       	sub	r22, r24
    d600:	79 0b       	sbc	r23, r25
    d602:	1d c0       	rjmp	.+58     	; 0xd63e <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d604:	60 51       	subi	r22, 0x10	; 16
    d606:	71 09       	sbc	r23, r1
    d608:	1a c0       	rjmp	.+52     	; 0xd63e <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d60a:	60 52       	subi	r22, 0x20	; 32
    d60c:	71 09       	sbc	r23, r1
    d60e:	17 c0       	rjmp	.+46     	; 0xd63e <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d610:	60 53       	subi	r22, 0x30	; 48
    d612:	71 09       	sbc	r23, r1
    d614:	14 c0       	rjmp	.+40     	; 0xd63e <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d616:	6a 51       	subi	r22, 0x1A	; 26
    d618:	71 09       	sbc	r23, r1
    d61a:	11 c0       	rjmp	.+34     	; 0xd63e <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d61c:	68 5f       	subi	r22, 0xF8	; 248
    d61e:	7f 4f       	sbci	r23, 0xFF	; 255
    d620:	0e c0       	rjmp	.+28     	; 0xd63e <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d622:	60 55       	subi	r22, 0x50	; 80
    d624:	71 09       	sbc	r23, r1
    d626:	0b c0       	rjmp	.+22     	; 0xd63e <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d628:	60 56       	subi	r22, 0x60	; 96
    d62a:	7c 41       	sbci	r23, 0x1C	; 28
    d62c:	08 c0       	rjmp	.+16     	; 0xd63e <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d62e:	ef 2b       	or	r30, r31
    d630:	09 f0       	breq	.+2      	; 0xd634 <ff_wtoupper+0xb4>
    d632:	b6 cf       	rjmp	.-148    	; 0xd5a0 <ff_wtoupper+0x20>
    d634:	88 0f       	add	r24, r24
    d636:	99 1f       	adc	r25, r25
    d638:	a8 0f       	add	r26, r24
    d63a:	b9 1f       	adc	r27, r25
    d63c:	b1 cf       	rjmp	.-158    	; 0xd5a0 <ff_wtoupper+0x20>
		}
		uni = uc;
    d63e:	80 e0       	ldi	r24, 0x00	; 0
    d640:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d642:	08 95       	ret

0000d644 <disk_status>:

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
	switch (pdrv) {
    d644:	81 11       	cpse	r24, r1
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_status() );
    d646:	02 c0       	rjmp	.+4      	; 0xd64c <disk_status+0x8>
    d648:	a0 c1       	rjmp	.+832    	; 0xd98a <mmc_disk_status>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_status() );
#endif
	}
	return STA_NOINIT;
    d64a:	08 95       	ret
}
    d64c:	81 e0       	ldi	r24, 0x01	; 1
    d64e:	08 95       	ret

0000d650 <disk_initialize>:
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{

	switch (pdrv) {
    d650:	81 11       	cpse	r24, r1
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_initialize() );
    d652:	02 c0       	rjmp	.+4      	; 0xd658 <disk_initialize+0x8>
    d654:	fd c0       	rjmp	.+506    	; 0xd850 <mmc_disk_initialize>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_initialize() );
#endif
	}
	return STA_NOINIT;
    d656:	08 95       	ret
}
    d658:	81 e0       	ldi	r24, 0x01	; 1
    d65a:	08 95       	ret

0000d65c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
    d65c:	0f 93       	push	r16
    d65e:	1f 93       	push	r17
    d660:	fb 01       	movw	r30, r22
	switch (pdrv) {
    d662:	81 11       	cpse	r24, r1
    d664:	06 c0       	rjmp	.+12     	; 0xd672 <disk_read+0x16>
    d666:	ba 01       	movw	r22, r20
    d668:	a9 01       	movw	r20, r18
    d66a:	cf 01       	movw	r24, r30
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_read(buff, sector, count) );
    d66c:	98 01       	movw	r18, r16
    d66e:	90 d1       	rcall	.+800    	; 0xd990 <mmc_disk_read>
    d670:	02 c0       	rjmp	.+4      	; 0xd676 <disk_read+0x1a>
#ifdef DRV_USB
	case DEV_USB :
		return ( usb_disk_read(buff, sector, count) );
#endif
	}
	return RES_PARERR;
    d672:	84 e0       	ldi	r24, 0x04	; 4
    d674:	90 e0       	ldi	r25, 0x00	; 0
}
    d676:	1f 91       	pop	r17
    d678:	0f 91       	pop	r16
    d67a:	08 95       	ret

0000d67c <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
    d67c:	0f 93       	push	r16
    d67e:	1f 93       	push	r17
    d680:	fb 01       	movw	r30, r22
	switch (pdrv) {
    d682:	81 11       	cpse	r24, r1
    d684:	06 c0       	rjmp	.+12     	; 0xd692 <disk_write+0x16>
    d686:	ba 01       	movw	r22, r20
    d688:	a9 01       	movw	r20, r18
    d68a:	cf 01       	movw	r24, r30
#ifdef DRV_MMC
	case DEV_MMC :
		return ( mmc_disk_write(buff, sector, count) );
    d68c:	98 01       	movw	r18, r16
    d68e:	c6 d1       	rcall	.+908    	; 0xda1c <mmc_disk_write>
    d690:	02 c0       	rjmp	.+4      	; 0xd696 <disk_write+0x1a>
	case DEV_USB :
		return ( usb_disk_write(buff, sector, count) );
#endif
	}

	return RES_PARERR;
    d692:	84 e0       	ldi	r24, 0x04	; 4
    d694:	90 e0       	ldi	r25, 0x00	; 0
}
    d696:	1f 91       	pop	r17
    d698:	0f 91       	pop	r16
    d69a:	08 95       	ret

0000d69c <disk_ioctl>:
DRESULT disk_ioctl (
    BYTE pdrv,      /* Physical drive nmuber (0..) */
    BYTE cmd,       /* Control code */
    void *buff      /* Buffer to send/receive control data */
)
{
    d69c:	96 2f       	mov	r25, r22
    switch (pdrv) {
    d69e:	81 11       	cpse	r24, r1
    d6a0:	04 c0       	rjmp	.+8      	; 0xd6aa <disk_ioctl+0xe>
    d6a2:	ba 01       	movw	r22, r20
#ifdef DRV_MMC
    case DEV_MMC :
        return ( mmc_disk_ioctl(cmd, buff) );
    d6a4:	89 2f       	mov	r24, r25
    d6a6:	1f c2       	rjmp	.+1086   	; 0xdae6 <mmc_disk_ioctl>
#ifdef DRV_USB
    case DEV_MMC :
        return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d6a8:	08 95       	ret
    d6aa:	84 e0       	ldi	r24, 0x04	; 4
}
    d6ac:	90 e0       	ldi	r25, 0x00	; 0
    d6ae:	08 95       	ret

0000d6b0 <xchg_spi>:
///@return Data read
static
BYTE xchg_spi (     /* Returns received data */
    BYTE dat        /* Data to be sent */
)
{
    d6b0:	d7 c4       	rjmp	.+2478   	; 0xe060 <mmc_spi_TXRX>
    d6b2:	08 95       	ret

0000d6b4 <deselect>:
    d6b4:	ac d4       	rcall	.+2392   	; 0xe00e <mmc_spi_end>
    d6b6:	8f ef       	ldi	r24, 0xFF	; 255
    d6b8:	fb df       	rcall	.-10     	; 0xd6b0 <xchg_spi>
    d6ba:	8f ef       	ldi	r24, 0xFF	; 255
    d6bc:	f9 cf       	rjmp	.-14     	; 0xd6b0 <xchg_spi>
    d6be:	08 95       	ret

0000d6c0 <rcvr_datablock>:
    d6c0:	0f 93       	push	r16
    d6c2:	1f 93       	push	r17
    d6c4:	cf 93       	push	r28
    d6c6:	df 93       	push	r29
    d6c8:	ec 01       	movw	r28, r24
    d6ca:	8b 01       	movw	r16, r22
    d6cc:	46 9a       	sbi	0x08, 6	; 8
    d6ce:	3e 9a       	sbi	0x07, 6	; 7
    d6d0:	88 ee       	ldi	r24, 0xE8	; 232
    d6d2:	93 e0       	ldi	r25, 0x03	; 3
    d6d4:	c8 d4       	rcall	.+2448   	; 0xe066 <mmc_set_ms_timeout>
    d6d6:	8f ef       	ldi	r24, 0xFF	; 255
    d6d8:	c3 d4       	rcall	.+2438   	; 0xe060 <mmc_spi_TXRX>
    d6da:	8f 3f       	cpi	r24, 0xFF	; 255
    d6dc:	31 f4       	brne	.+12     	; 0xd6ea <rcvr_datablock+0x2a>
    d6de:	ca d4       	rcall	.+2452   	; 0xe074 <mmc_test_timeout>
    d6e0:	89 2b       	or	r24, r25
    d6e2:	c9 f3       	breq	.-14     	; 0xd6d6 <rcvr_datablock+0x16>
    d6e4:	80 e0       	ldi	r24, 0x00	; 0
    d6e6:	90 e0       	ldi	r25, 0x00	; 0
    d6e8:	0d c0       	rjmp	.+26     	; 0xd704 <rcvr_datablock+0x44>
    d6ea:	8e 3f       	cpi	r24, 0xFE	; 254
    d6ec:	d9 f7       	brne	.-10     	; 0xd6e4 <rcvr_datablock+0x24>
    d6ee:	b8 01       	movw	r22, r16
    d6f0:	ce 01       	movw	r24, r28
    d6f2:	b3 d4       	rcall	.+2406   	; 0xe05a <mmc_spi_RX_buffer>
    d6f4:	8f ef       	ldi	r24, 0xFF	; 255
    d6f6:	dc df       	rcall	.-72     	; 0xd6b0 <xchg_spi>
    d6f8:	8f ef       	ldi	r24, 0xFF	; 255
    d6fa:	da df       	rcall	.-76     	; 0xd6b0 <xchg_spi>
    d6fc:	46 98       	cbi	0x08, 6	; 8
    d6fe:	3e 9a       	sbi	0x07, 6	; 7
    d700:	81 e0       	ldi	r24, 0x01	; 1
    d702:	90 e0       	ldi	r25, 0x00	; 0
    d704:	df 91       	pop	r29
    d706:	cf 91       	pop	r28
    d708:	1f 91       	pop	r17
    d70a:	0f 91       	pop	r16
    d70c:	08 95       	ret

0000d70e <wait_ready>:
    d70e:	cf 93       	push	r28
    d710:	aa d4       	rcall	.+2388   	; 0xe066 <mmc_set_ms_timeout>
    d712:	8f ef       	ldi	r24, 0xFF	; 255
    d714:	a5 d4       	rcall	.+2378   	; 0xe060 <mmc_spi_TXRX>
    d716:	c8 2f       	mov	r28, r24
    d718:	8f 3f       	cpi	r24, 0xFF	; 255
    d71a:	19 f0       	breq	.+6      	; 0xd722 <wait_ready+0x14>
    d71c:	ab d4       	rcall	.+2390   	; 0xe074 <mmc_test_timeout>
    d71e:	89 2b       	or	r24, r25
    d720:	c1 f3       	breq	.-16     	; 0xd712 <wait_ready+0x4>
    d722:	81 e0       	ldi	r24, 0x01	; 1
    d724:	90 e0       	ldi	r25, 0x00	; 0
    d726:	cf 3f       	cpi	r28, 0xFF	; 255
    d728:	11 f0       	breq	.+4      	; 0xd72e <wait_ready+0x20>
    d72a:	80 e0       	ldi	r24, 0x00	; 0
    d72c:	90 e0       	ldi	r25, 0x00	; 0
    d72e:	cf 91       	pop	r28
    d730:	08 95       	ret

0000d732 <select>:
    d732:	cf 93       	push	r28
    d734:	df 93       	push	r29
    d736:	00 d0       	rcall	.+0      	; 0xd738 <select+0x6>
    d738:	1f 92       	push	r1
    d73a:	5c d4       	rcall	.+2232   	; 0xdff4 <mmc_spi_begin>
    d73c:	8f ef       	ldi	r24, 0xFF	; 255
    d73e:	b8 df       	rcall	.-144    	; 0xd6b0 <xchg_spi>
    d740:	88 ee       	ldi	r24, 0xE8	; 232
    d742:	93 e0       	ldi	r25, 0x03	; 3
    d744:	e4 df       	rcall	.-56     	; 0xd70e <wait_ready>
    d746:	ec 01       	movw	r28, r24
    d748:	89 2b       	or	r24, r25
    d74a:	61 f4       	brne	.+24     	; 0xd764 <select+0x32>
    d74c:	80 e3       	ldi	r24, 0x30	; 48
    d74e:	97 e0       	ldi	r25, 0x07	; 7
    d750:	a0 e0       	ldi	r26, 0x00	; 0
    d752:	ed b7       	in	r30, 0x3d	; 61
    d754:	fe b7       	in	r31, 0x3e	; 62
    d756:	81 83       	std	Z+1, r24	; 0x01
    d758:	92 83       	std	Z+2, r25	; 0x02
    d75a:	a3 83       	std	Z+3, r26	; 0x03
    d75c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    d760:	a9 df       	rcall	.-174    	; 0xd6b4 <deselect>
    d762:	02 c0       	rjmp	.+4      	; 0xd768 <select+0x36>
    d764:	c1 e0       	ldi	r28, 0x01	; 1
    d766:	d0 e0       	ldi	r29, 0x00	; 0
    d768:	ce 01       	movw	r24, r28
    d76a:	cd b7       	in	r28, 0x3d	; 61
    d76c:	de b7       	in	r29, 0x3e	; 62
    d76e:	23 96       	adiw	r28, 0x03	; 3
    d770:	e2 e0       	ldi	r30, 0x02	; 2
    d772:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

0000d776 <send_cmd>:
    d776:	ff 92       	push	r15
    d778:	0f 93       	push	r16
    d77a:	1f 93       	push	r17
    d77c:	cf 93       	push	r28
    d77e:	df 93       	push	r29
    d780:	c8 2f       	mov	r28, r24
    d782:	d4 2f       	mov	r29, r20
    d784:	15 2f       	mov	r17, r21
    d786:	06 2f       	mov	r16, r22
    d788:	f7 2e       	mov	r15, r23
    d78a:	87 ff       	sbrs	r24, 7
    d78c:	08 c0       	rjmp	.+16     	; 0xd79e <send_cmd+0x28>
    d78e:	40 e0       	ldi	r20, 0x00	; 0
    d790:	50 e0       	ldi	r21, 0x00	; 0
    d792:	ba 01       	movw	r22, r20
    d794:	87 e3       	ldi	r24, 0x37	; 55
    d796:	ef df       	rcall	.-34     	; 0xd776 <send_cmd>
    d798:	82 30       	cpi	r24, 0x02	; 2
    d79a:	58 f5       	brcc	.+86     	; 0xd7f2 <send_cmd+0x7c>
    d79c:	cf 77       	andi	r28, 0x7F	; 127
    d79e:	cc 30       	cpi	r28, 0x0C	; 12
    d7a0:	71 f4       	brne	.+28     	; 0xd7be <send_cmd+0x48>
    d7a2:	8c 2f       	mov	r24, r28
    d7a4:	80 64       	ori	r24, 0x40	; 64
    d7a6:	84 df       	rcall	.-248    	; 0xd6b0 <xchg_spi>
    d7a8:	8f 2d       	mov	r24, r15
    d7aa:	82 df       	rcall	.-252    	; 0xd6b0 <xchg_spi>
    d7ac:	80 2f       	mov	r24, r16
    d7ae:	80 df       	rcall	.-256    	; 0xd6b0 <xchg_spi>
    d7b0:	81 2f       	mov	r24, r17
    d7b2:	7e df       	rcall	.-260    	; 0xd6b0 <xchg_spi>
    d7b4:	8d 2f       	mov	r24, r29
    d7b6:	7c df       	rcall	.-264    	; 0xd6b0 <xchg_spi>
    d7b8:	cc 23       	and	r28, r28
    d7ba:	c9 f0       	breq	.+50     	; 0xd7ee <send_cmd+0x78>
    d7bc:	06 c0       	rjmp	.+12     	; 0xd7ca <send_cmd+0x54>
    d7be:	7a df       	rcall	.-268    	; 0xd6b4 <deselect>
    d7c0:	b8 df       	rcall	.-144    	; 0xd732 <select>
    d7c2:	89 2b       	or	r24, r25
    d7c4:	71 f7       	brne	.-36     	; 0xd7a2 <send_cmd+0x2c>
    d7c6:	8f ef       	ldi	r24, 0xFF	; 255
    d7c8:	14 c0       	rjmp	.+40     	; 0xd7f2 <send_cmd+0x7c>
    d7ca:	c8 30       	cpi	r28, 0x08	; 8
    d7cc:	11 f4       	brne	.+4      	; 0xd7d2 <send_cmd+0x5c>
    d7ce:	87 e8       	ldi	r24, 0x87	; 135
    d7d0:	01 c0       	rjmp	.+2      	; 0xd7d4 <send_cmd+0x5e>
    d7d2:	81 e0       	ldi	r24, 0x01	; 1
    d7d4:	6d df       	rcall	.-294    	; 0xd6b0 <xchg_spi>
    d7d6:	cc 30       	cpi	r28, 0x0C	; 12
    d7d8:	11 f4       	brne	.+4      	; 0xd7de <send_cmd+0x68>
    d7da:	8f ef       	ldi	r24, 0xFF	; 255
    d7dc:	69 df       	rcall	.-302    	; 0xd6b0 <xchg_spi>
    d7de:	ca e0       	ldi	r28, 0x0A	; 10
    d7e0:	8f ef       	ldi	r24, 0xFF	; 255
    d7e2:	3e d4       	rcall	.+2172   	; 0xe060 <mmc_spi_TXRX>
    d7e4:	87 ff       	sbrs	r24, 7
    d7e6:	05 c0       	rjmp	.+10     	; 0xd7f2 <send_cmd+0x7c>
    d7e8:	c1 50       	subi	r28, 0x01	; 1
    d7ea:	d1 f7       	brne	.-12     	; 0xd7e0 <send_cmd+0x6a>
    d7ec:	02 c0       	rjmp	.+4      	; 0xd7f2 <send_cmd+0x7c>
    d7ee:	85 e9       	ldi	r24, 0x95	; 149
    d7f0:	f5 cf       	rjmp	.-22     	; 0xd7dc <send_cmd+0x66>
    d7f2:	cd b7       	in	r28, 0x3d	; 61
    d7f4:	de b7       	in	r29, 0x3e	; 62
    d7f6:	e5 e0       	ldi	r30, 0x05	; 5
    d7f8:	0c 94 af e4 	jmp	0x1c95e	; 0x1c95e <__epilogue_restores__+0x1a>

0000d7fc <xmit_datablock>:
    d7fc:	0f 93       	push	r16
    d7fe:	1f 93       	push	r17
    d800:	cf 93       	push	r28
    d802:	8c 01       	movw	r16, r24
    d804:	c6 2f       	mov	r28, r22
    d806:	2c 9a       	sbi	0x05, 4	; 5
    d808:	24 9a       	sbi	0x04, 4	; 4
    d80a:	88 ee       	ldi	r24, 0xE8	; 232
    d80c:	93 e0       	ldi	r25, 0x03	; 3
    d80e:	7f df       	rcall	.-258    	; 0xd70e <wait_ready>
    d810:	89 2b       	or	r24, r25
    d812:	19 f4       	brne	.+6      	; 0xd81a <xmit_datablock+0x1e>
    d814:	80 e0       	ldi	r24, 0x00	; 0
    d816:	90 e0       	ldi	r25, 0x00	; 0
    d818:	17 c0       	rjmp	.+46     	; 0xd848 <xmit_datablock+0x4c>
    d81a:	8c 2f       	mov	r24, r28
    d81c:	49 df       	rcall	.-366    	; 0xd6b0 <xchg_spi>
    d81e:	cd 3f       	cpi	r28, 0xFD	; 253
    d820:	29 f4       	brne	.+10     	; 0xd82c <xmit_datablock+0x30>
    d822:	46 98       	cbi	0x08, 6	; 8
    d824:	3e 9a       	sbi	0x07, 6	; 7
    d826:	81 e0       	ldi	r24, 0x01	; 1
    d828:	90 e0       	ldi	r25, 0x00	; 0
    d82a:	0e c0       	rjmp	.+28     	; 0xd848 <xmit_datablock+0x4c>
    d82c:	60 e0       	ldi	r22, 0x00	; 0
    d82e:	72 e0       	ldi	r23, 0x02	; 2
    d830:	c8 01       	movw	r24, r16
    d832:	10 d4       	rcall	.+2080   	; 0xe054 <mmc_spi_TX_buffer>
    d834:	8f ef       	ldi	r24, 0xFF	; 255
    d836:	3c df       	rcall	.-392    	; 0xd6b0 <xchg_spi>
    d838:	8f ef       	ldi	r24, 0xFF	; 255
    d83a:	3a df       	rcall	.-396    	; 0xd6b0 <xchg_spi>
    d83c:	8f ef       	ldi	r24, 0xFF	; 255
    d83e:	10 d4       	rcall	.+2080   	; 0xe060 <mmc_spi_TXRX>
    d840:	8f 71       	andi	r24, 0x1F	; 31
    d842:	85 30       	cpi	r24, 0x05	; 5
    d844:	39 f7       	brne	.-50     	; 0xd814 <xmit_datablock+0x18>
    d846:	ed cf       	rjmp	.-38     	; 0xd822 <xmit_datablock+0x26>
    d848:	cf 91       	pop	r28
    d84a:	1f 91       	pop	r17
    d84c:	0f 91       	pop	r16
    d84e:	08 95       	ret

0000d850 <mmc_disk_initialize>:
    d850:	a4 e0       	ldi	r26, 0x04	; 4
    d852:	b0 e0       	ldi	r27, 0x00	; 0
    d854:	ee e2       	ldi	r30, 0x2E	; 46
    d856:	fc e6       	ldi	r31, 0x6C	; 108
    d858:	0c 94 90 e4 	jmp	0x1c920	; 0x1c920 <__prologue_saves__+0x14>
    d85c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d860:	81 fd       	sbrc	r24, 1
    d862:	8d c0       	rjmp	.+282    	; 0xd97e <mmc_disk_initialize+0x12e>
    d864:	d8 d3       	rcall	.+1968   	; 0xe016 <mmc_slow>
    d866:	1a e0       	ldi	r17, 0x0A	; 10
    d868:	8f ef       	ldi	r24, 0xFF	; 255
    d86a:	22 df       	rcall	.-444    	; 0xd6b0 <xchg_spi>
    d86c:	11 50       	subi	r17, 0x01	; 1
    d86e:	e1 f7       	brne	.-8      	; 0xd868 <mmc_disk_initialize+0x18>
    d870:	40 e0       	ldi	r20, 0x00	; 0
    d872:	50 e0       	ldi	r21, 0x00	; 0
    d874:	ba 01       	movw	r22, r20
    d876:	80 e0       	ldi	r24, 0x00	; 0
    d878:	7e df       	rcall	.-260    	; 0xd776 <send_cmd>
    d87a:	81 30       	cpi	r24, 0x01	; 1
    d87c:	09 f0       	breq	.+2      	; 0xd880 <mmc_disk_initialize+0x30>
    d87e:	6f c0       	rjmp	.+222    	; 0xd95e <mmc_disk_initialize+0x10e>
    d880:	80 ed       	ldi	r24, 0xD0	; 208
    d882:	97 e0       	ldi	r25, 0x07	; 7
    d884:	f0 d3       	rcall	.+2016   	; 0xe066 <mmc_set_ms_timeout>
    d886:	4a ea       	ldi	r20, 0xAA	; 170
    d888:	51 e0       	ldi	r21, 0x01	; 1
    d88a:	60 e0       	ldi	r22, 0x00	; 0
    d88c:	70 e0       	ldi	r23, 0x00	; 0
    d88e:	88 e0       	ldi	r24, 0x08	; 8
    d890:	72 df       	rcall	.-284    	; 0xd776 <send_cmd>
    d892:	81 30       	cpi	r24, 0x01	; 1
    d894:	09 f0       	breq	.+2      	; 0xd898 <mmc_disk_initialize+0x48>
    d896:	3d c0       	rjmp	.+122    	; 0xd912 <mmc_disk_initialize+0xc2>
    d898:	8e 01       	movw	r16, r28
    d89a:	0f 5f       	subi	r16, 0xFF	; 255
    d89c:	1f 4f       	sbci	r17, 0xFF	; 255
    d89e:	6e 01       	movw	r12, r28
    d8a0:	85 e0       	ldi	r24, 0x05	; 5
    d8a2:	c8 0e       	add	r12, r24
    d8a4:	d1 1c       	adc	r13, r1
    d8a6:	78 01       	movw	r14, r16
    d8a8:	8f ef       	ldi	r24, 0xFF	; 255
    d8aa:	da d3       	rcall	.+1972   	; 0xe060 <mmc_spi_TXRX>
    d8ac:	f7 01       	movw	r30, r14
    d8ae:	81 93       	st	Z+, r24
    d8b0:	7f 01       	movw	r14, r30
    d8b2:	ce 16       	cp	r12, r30
    d8b4:	df 06       	cpc	r13, r31
    d8b6:	c1 f7       	brne	.-16     	; 0xd8a8 <mmc_disk_initialize+0x58>
    d8b8:	8b 81       	ldd	r24, Y+3	; 0x03
    d8ba:	81 30       	cpi	r24, 0x01	; 1
    d8bc:	09 f0       	breq	.+2      	; 0xd8c0 <mmc_disk_initialize+0x70>
    d8be:	4f c0       	rjmp	.+158    	; 0xd95e <mmc_disk_initialize+0x10e>
    d8c0:	8c 81       	ldd	r24, Y+4	; 0x04
    d8c2:	8a 3a       	cpi	r24, 0xAA	; 170
    d8c4:	09 f0       	breq	.+2      	; 0xd8c8 <mmc_disk_initialize+0x78>
    d8c6:	4b c0       	rjmp	.+150    	; 0xd95e <mmc_disk_initialize+0x10e>
    d8c8:	d5 d3       	rcall	.+1962   	; 0xe074 <mmc_test_timeout>
    d8ca:	89 2b       	or	r24, r25
    d8cc:	29 f0       	breq	.+10     	; 0xd8d8 <mmc_disk_initialize+0x88>
    d8ce:	d2 d3       	rcall	.+1956   	; 0xe074 <mmc_test_timeout>
    d8d0:	89 2b       	or	r24, r25
    d8d2:	09 f0       	breq	.+2      	; 0xd8d6 <mmc_disk_initialize+0x86>
    d8d4:	44 c0       	rjmp	.+136    	; 0xd95e <mmc_disk_initialize+0x10e>
    d8d6:	09 c0       	rjmp	.+18     	; 0xd8ea <mmc_disk_initialize+0x9a>
    d8d8:	40 e0       	ldi	r20, 0x00	; 0
    d8da:	50 e0       	ldi	r21, 0x00	; 0
    d8dc:	60 e0       	ldi	r22, 0x00	; 0
    d8de:	70 e4       	ldi	r23, 0x40	; 64
    d8e0:	89 ea       	ldi	r24, 0xA9	; 169
    d8e2:	49 df       	rcall	.-366    	; 0xd776 <send_cmd>
    d8e4:	81 11       	cpse	r24, r1
    d8e6:	f0 cf       	rjmp	.-32     	; 0xd8c8 <mmc_disk_initialize+0x78>
    d8e8:	f2 cf       	rjmp	.-28     	; 0xd8ce <mmc_disk_initialize+0x7e>
    d8ea:	40 e0       	ldi	r20, 0x00	; 0
    d8ec:	50 e0       	ldi	r21, 0x00	; 0
    d8ee:	ba 01       	movw	r22, r20
    d8f0:	8a e3       	ldi	r24, 0x3A	; 58
    d8f2:	41 df       	rcall	.-382    	; 0xd776 <send_cmd>
    d8f4:	81 11       	cpse	r24, r1
    d8f6:	33 c0       	rjmp	.+102    	; 0xd95e <mmc_disk_initialize+0x10e>
    d8f8:	8f ef       	ldi	r24, 0xFF	; 255
    d8fa:	b2 d3       	rcall	.+1892   	; 0xe060 <mmc_spi_TXRX>
    d8fc:	f8 01       	movw	r30, r16
    d8fe:	81 93       	st	Z+, r24
    d900:	8f 01       	movw	r16, r30
    d902:	ce 16       	cp	r12, r30
    d904:	df 06       	cpc	r13, r31
    d906:	c1 f7       	brne	.-16     	; 0xd8f8 <mmc_disk_initialize+0xa8>
    d908:	89 81       	ldd	r24, Y+1	; 0x01
    d90a:	86 fd       	sbrc	r24, 6
    d90c:	2a c0       	rjmp	.+84     	; 0xd962 <mmc_disk_initialize+0x112>
    d90e:	14 e0       	ldi	r17, 0x04	; 4
    d910:	29 c0       	rjmp	.+82     	; 0xd964 <mmc_disk_initialize+0x114>
    d912:	80 ed       	ldi	r24, 0xD0	; 208
    d914:	97 e0       	ldi	r25, 0x07	; 7
    d916:	a7 d3       	rcall	.+1870   	; 0xe066 <mmc_set_ms_timeout>
    d918:	40 e0       	ldi	r20, 0x00	; 0
    d91a:	50 e0       	ldi	r21, 0x00	; 0
    d91c:	ba 01       	movw	r22, r20
    d91e:	89 ea       	ldi	r24, 0xA9	; 169
    d920:	2a df       	rcall	.-428    	; 0xd776 <send_cmd>
    d922:	82 30       	cpi	r24, 0x02	; 2
    d924:	18 f0       	brcs	.+6      	; 0xd92c <mmc_disk_initialize+0xdc>
    d926:	11 e0       	ldi	r17, 0x01	; 1
    d928:	01 e0       	ldi	r16, 0x01	; 1
    d92a:	02 c0       	rjmp	.+4      	; 0xd930 <mmc_disk_initialize+0xe0>
    d92c:	12 e0       	ldi	r17, 0x02	; 2
    d92e:	09 ea       	ldi	r16, 0xA9	; 169
    d930:	a1 d3       	rcall	.+1858   	; 0xe074 <mmc_test_timeout>
    d932:	89 2b       	or	r24, r25
    d934:	21 f0       	breq	.+8      	; 0xd93e <mmc_disk_initialize+0xee>
    d936:	9e d3       	rcall	.+1852   	; 0xe074 <mmc_test_timeout>
    d938:	89 2b       	or	r24, r25
    d93a:	89 f4       	brne	.+34     	; 0xd95e <mmc_disk_initialize+0x10e>
    d93c:	08 c0       	rjmp	.+16     	; 0xd94e <mmc_disk_initialize+0xfe>
    d93e:	40 e0       	ldi	r20, 0x00	; 0
    d940:	50 e0       	ldi	r21, 0x00	; 0
    d942:	ba 01       	movw	r22, r20
    d944:	80 2f       	mov	r24, r16
    d946:	17 df       	rcall	.-466    	; 0xd776 <send_cmd>
    d948:	81 11       	cpse	r24, r1
    d94a:	f2 cf       	rjmp	.-28     	; 0xd930 <mmc_disk_initialize+0xe0>
    d94c:	f4 cf       	rjmp	.-24     	; 0xd936 <mmc_disk_initialize+0xe6>
    d94e:	40 e0       	ldi	r20, 0x00	; 0
    d950:	52 e0       	ldi	r21, 0x02	; 2
    d952:	60 e0       	ldi	r22, 0x00	; 0
    d954:	70 e0       	ldi	r23, 0x00	; 0
    d956:	80 e1       	ldi	r24, 0x10	; 16
    d958:	0e df       	rcall	.-484    	; 0xd776 <send_cmd>
    d95a:	88 23       	and	r24, r24
    d95c:	19 f0       	breq	.+6      	; 0xd964 <mmc_disk_initialize+0x114>
    d95e:	10 e0       	ldi	r17, 0x00	; 0
    d960:	01 c0       	rjmp	.+2      	; 0xd964 <mmc_disk_initialize+0x114>
    d962:	1c e0       	ldi	r17, 0x0C	; 12
    d964:	10 93 c1 17 	sts	0x17C1, r17	; 0x8017c1 <CardType>
    d968:	a5 de       	rcall	.-694    	; 0xd6b4 <deselect>
    d96a:	11 23       	and	r17, r17
    d96c:	39 f0       	breq	.+14     	; 0xd97c <mmc_disk_initialize+0x12c>
    d96e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d972:	8e 7f       	andi	r24, 0xFE	; 254
    d974:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <Stat>
    d978:	60 d3       	rcall	.+1728   	; 0xe03a <mmc_fast>
    d97a:	01 c0       	rjmp	.+2      	; 0xd97e <mmc_disk_initialize+0x12e>
    d97c:	3b d4       	rcall	.+2166   	; 0xe1f4 <mmc_power_off>
    d97e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d982:	24 96       	adiw	r28, 0x04	; 4
    d984:	e8 e0       	ldi	r30, 0x08	; 8
    d986:	0c 94 ac e4 	jmp	0x1c958	; 0x1c958 <__epilogue_restores__+0x14>

0000d98a <mmc_disk_status>:
    d98a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d98e:	08 95       	ret

0000d990 <mmc_disk_read>:
    d990:	ef 92       	push	r14
    d992:	ff 92       	push	r15
    d994:	1f 93       	push	r17
    d996:	cf 93       	push	r28
    d998:	df 93       	push	r29
    d99a:	7c 01       	movw	r14, r24
    d99c:	e9 01       	movw	r28, r18
    d99e:	20 97       	sbiw	r28, 0x00	; 0
    d9a0:	19 f4       	brne	.+6      	; 0xd9a8 <mmc_disk_read+0x18>
    d9a2:	88 de       	rcall	.-752    	; 0xd6b4 <deselect>
    d9a4:	84 e0       	ldi	r24, 0x04	; 4
    d9a6:	06 c0       	rjmp	.+12     	; 0xd9b4 <mmc_disk_read+0x24>
    d9a8:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    d9ac:	80 ff       	sbrs	r24, 0
    d9ae:	04 c0       	rjmp	.+8      	; 0xd9b8 <mmc_disk_read+0x28>
    d9b0:	81 de       	rcall	.-766    	; 0xd6b4 <deselect>
    d9b2:	83 e0       	ldi	r24, 0x03	; 3
    d9b4:	90 e0       	ldi	r25, 0x00	; 0
    d9b6:	2c c0       	rjmp	.+88     	; 0xda10 <mmc_disk_read+0x80>
    d9b8:	80 91 c1 17 	lds	r24, 0x17C1	; 0x8017c1 <CardType>
    d9bc:	83 fd       	sbrc	r24, 3
    d9be:	07 c0       	rjmp	.+14     	; 0xd9ce <mmc_disk_read+0x3e>
    d9c0:	89 e0       	ldi	r24, 0x09	; 9
    d9c2:	44 0f       	add	r20, r20
    d9c4:	55 1f       	adc	r21, r21
    d9c6:	66 1f       	adc	r22, r22
    d9c8:	77 1f       	adc	r23, r23
    d9ca:	8a 95       	dec	r24
    d9cc:	d1 f7       	brne	.-12     	; 0xd9c2 <mmc_disk_read+0x32>
    d9ce:	c2 30       	cpi	r28, 0x02	; 2
    d9d0:	d1 05       	cpc	r29, r1
    d9d2:	10 f4       	brcc	.+4      	; 0xd9d8 <mmc_disk_read+0x48>
    d9d4:	11 e1       	ldi	r17, 0x11	; 17
    d9d6:	01 c0       	rjmp	.+2      	; 0xd9da <mmc_disk_read+0x4a>
    d9d8:	12 e1       	ldi	r17, 0x12	; 18
    d9da:	81 2f       	mov	r24, r17
    d9dc:	cc de       	rcall	.-616    	; 0xd776 <send_cmd>
    d9de:	81 11       	cpse	r24, r1
    d9e0:	11 c0       	rjmp	.+34     	; 0xda04 <mmc_disk_read+0x74>
    d9e2:	60 e0       	ldi	r22, 0x00	; 0
    d9e4:	72 e0       	ldi	r23, 0x02	; 2
    d9e6:	c7 01       	movw	r24, r14
    d9e8:	6b de       	rcall	.-810    	; 0xd6c0 <rcvr_datablock>
    d9ea:	89 2b       	or	r24, r25
    d9ec:	21 f0       	breq	.+8      	; 0xd9f6 <mmc_disk_read+0x66>
    d9ee:	8e ef       	ldi	r24, 0xFE	; 254
    d9f0:	f8 1a       	sub	r15, r24
    d9f2:	21 97       	sbiw	r28, 0x01	; 1
    d9f4:	b1 f7       	brne	.-20     	; 0xd9e2 <mmc_disk_read+0x52>
    d9f6:	12 31       	cpi	r17, 0x12	; 18
    d9f8:	29 f4       	brne	.+10     	; 0xda04 <mmc_disk_read+0x74>
    d9fa:	40 e0       	ldi	r20, 0x00	; 0
    d9fc:	50 e0       	ldi	r21, 0x00	; 0
    d9fe:	ba 01       	movw	r22, r20
    da00:	8c e0       	ldi	r24, 0x0C	; 12
    da02:	b9 de       	rcall	.-654    	; 0xd776 <send_cmd>
    da04:	57 de       	rcall	.-850    	; 0xd6b4 <deselect>
    da06:	81 e0       	ldi	r24, 0x01	; 1
    da08:	90 e0       	ldi	r25, 0x00	; 0
    da0a:	cd 2b       	or	r28, r29
    da0c:	09 f4       	brne	.+2      	; 0xda10 <mmc_disk_read+0x80>
    da0e:	80 e0       	ldi	r24, 0x00	; 0
    da10:	df 91       	pop	r29
    da12:	cf 91       	pop	r28
    da14:	1f 91       	pop	r17
    da16:	ff 90       	pop	r15
    da18:	ef 90       	pop	r14
    da1a:	08 95       	ret

0000da1c <mmc_disk_write>:
    da1c:	a0 e0       	ldi	r26, 0x00	; 0
    da1e:	b0 e0       	ldi	r27, 0x00	; 0
    da20:	e4 e1       	ldi	r30, 0x14	; 20
    da22:	fd e6       	ldi	r31, 0x6D	; 109
    da24:	0c 94 90 e4 	jmp	0x1c920	; 0x1c920 <__prologue_saves__+0x14>
    da28:	8c 01       	movw	r16, r24
    da2a:	6a 01       	movw	r12, r20
    da2c:	7b 01       	movw	r14, r22
    da2e:	e9 01       	movw	r28, r18
    da30:	20 97       	sbiw	r28, 0x00	; 0
    da32:	19 f4       	brne	.+6      	; 0xda3a <mmc_disk_write+0x1e>
    da34:	3f de       	rcall	.-898    	; 0xd6b4 <deselect>
    da36:	84 e0       	ldi	r24, 0x04	; 4
    da38:	06 c0       	rjmp	.+12     	; 0xda46 <mmc_disk_write+0x2a>
    da3a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    da3e:	80 ff       	sbrs	r24, 0
    da40:	04 c0       	rjmp	.+8      	; 0xda4a <mmc_disk_write+0x2e>
    da42:	38 de       	rcall	.-912    	; 0xd6b4 <deselect>
    da44:	83 e0       	ldi	r24, 0x03	; 3
    da46:	90 e0       	ldi	r25, 0x00	; 0
    da48:	49 c0       	rjmp	.+146    	; 0xdadc <mmc_disk_write+0xc0>
    da4a:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    da4e:	82 ff       	sbrs	r24, 2
    da50:	03 c0       	rjmp	.+6      	; 0xda58 <mmc_disk_write+0x3c>
    da52:	30 de       	rcall	.-928    	; 0xd6b4 <deselect>
    da54:	82 e0       	ldi	r24, 0x02	; 2
    da56:	f7 cf       	rjmp	.-18     	; 0xda46 <mmc_disk_write+0x2a>
    da58:	80 91 c1 17 	lds	r24, 0x17C1	; 0x8017c1 <CardType>
    da5c:	83 fd       	sbrc	r24, 3
    da5e:	07 c0       	rjmp	.+14     	; 0xda6e <mmc_disk_write+0x52>
    da60:	99 e0       	ldi	r25, 0x09	; 9
    da62:	cc 0c       	add	r12, r12
    da64:	dd 1c       	adc	r13, r13
    da66:	ee 1c       	adc	r14, r14
    da68:	ff 1c       	adc	r15, r15
    da6a:	9a 95       	dec	r25
    da6c:	d1 f7       	brne	.-12     	; 0xda62 <mmc_disk_write+0x46>
    da6e:	c1 30       	cpi	r28, 0x01	; 1
    da70:	d1 05       	cpc	r29, r1
    da72:	89 f4       	brne	.+34     	; 0xda96 <mmc_disk_write+0x7a>
    da74:	b7 01       	movw	r22, r14
    da76:	a6 01       	movw	r20, r12
    da78:	88 e1       	ldi	r24, 0x18	; 24
    da7a:	7d de       	rcall	.-774    	; 0xd776 <send_cmd>
    da7c:	81 11       	cpse	r24, r1
    da7e:	26 c0       	rjmp	.+76     	; 0xdacc <mmc_disk_write+0xb0>
    da80:	6e ef       	ldi	r22, 0xFE	; 254
    da82:	c8 01       	movw	r24, r16
    da84:	bb de       	rcall	.-650    	; 0xd7fc <xmit_datablock>
    da86:	31 e0       	ldi	r19, 0x01	; 1
    da88:	20 e0       	ldi	r18, 0x00	; 0
    da8a:	89 2b       	or	r24, r25
    da8c:	09 f0       	breq	.+2      	; 0xda90 <mmc_disk_write+0x74>
    da8e:	30 e0       	ldi	r19, 0x00	; 0
    da90:	c3 2f       	mov	r28, r19
    da92:	d2 2f       	mov	r29, r18
    da94:	1d c0       	rjmp	.+58     	; 0xdad0 <mmc_disk_write+0xb4>
    da96:	86 70       	andi	r24, 0x06	; 6
    da98:	29 f0       	breq	.+10     	; 0xdaa4 <mmc_disk_write+0x88>
    da9a:	ae 01       	movw	r20, r28
    da9c:	60 e0       	ldi	r22, 0x00	; 0
    da9e:	70 e0       	ldi	r23, 0x00	; 0
    daa0:	87 e9       	ldi	r24, 0x97	; 151
    daa2:	69 de       	rcall	.-814    	; 0xd776 <send_cmd>
    daa4:	b7 01       	movw	r22, r14
    daa6:	a6 01       	movw	r20, r12
    daa8:	89 e1       	ldi	r24, 0x19	; 25
    daaa:	65 de       	rcall	.-822    	; 0xd776 <send_cmd>
    daac:	81 11       	cpse	r24, r1
    daae:	10 c0       	rjmp	.+32     	; 0xdad0 <mmc_disk_write+0xb4>
    dab0:	6c ef       	ldi	r22, 0xFC	; 252
    dab2:	c8 01       	movw	r24, r16
    dab4:	a3 de       	rcall	.-698    	; 0xd7fc <xmit_datablock>
    dab6:	89 2b       	or	r24, r25
    dab8:	19 f0       	breq	.+6      	; 0xdac0 <mmc_disk_write+0xa4>
    daba:	1e 5f       	subi	r17, 0xFE	; 254
    dabc:	21 97       	sbiw	r28, 0x01	; 1
    dabe:	c1 f7       	brne	.-16     	; 0xdab0 <mmc_disk_write+0x94>
    dac0:	6d ef       	ldi	r22, 0xFD	; 253
    dac2:	80 e0       	ldi	r24, 0x00	; 0
    dac4:	90 e0       	ldi	r25, 0x00	; 0
    dac6:	9a de       	rcall	.-716    	; 0xd7fc <xmit_datablock>
    dac8:	89 2b       	or	r24, r25
    daca:	11 f4       	brne	.+4      	; 0xdad0 <mmc_disk_write+0xb4>
    dacc:	c1 e0       	ldi	r28, 0x01	; 1
    dace:	d0 e0       	ldi	r29, 0x00	; 0
    dad0:	f1 dd       	rcall	.-1054   	; 0xd6b4 <deselect>
    dad2:	81 e0       	ldi	r24, 0x01	; 1
    dad4:	90 e0       	ldi	r25, 0x00	; 0
    dad6:	cd 2b       	or	r28, r29
    dad8:	09 f4       	brne	.+2      	; 0xdadc <mmc_disk_write+0xc0>
    dada:	80 e0       	ldi	r24, 0x00	; 0
    dadc:	cd b7       	in	r28, 0x3d	; 61
    dade:	de b7       	in	r29, 0x3e	; 62
    dae0:	e8 e0       	ldi	r30, 0x08	; 8
    dae2:	0c 94 ac e4 	jmp	0x1c958	; 0x1c958 <__epilogue_restores__+0x14>

0000dae6 <mmc_disk_ioctl>:
    dae6:	a0 e1       	ldi	r26, 0x10	; 16
    dae8:	b0 e0       	ldi	r27, 0x00	; 0
    daea:	e9 e7       	ldi	r30, 0x79	; 121
    daec:	fd e6       	ldi	r31, 0x6D	; 109
    daee:	0c 94 90 e4 	jmp	0x1c920	; 0x1c920 <__prologue_saves__+0x14>
    daf2:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <Stat>
    daf6:	90 fd       	sbrc	r25, 0
    daf8:	2b c2       	rjmp	.+1110   	; 0xdf50 <mmc_disk_ioctl+0x46a>
    dafa:	8b 01       	movw	r16, r22
    dafc:	83 33       	cpi	r24, 0x33	; 51
    dafe:	09 f4       	brne	.+2      	; 0xdb02 <mmc_disk_ioctl+0x1c>
    db00:	01 c1       	rjmp	.+514    	; 0xdd04 <mmc_disk_ioctl+0x21e>
    db02:	a0 f4       	brcc	.+40     	; 0xdb2c <mmc_disk_ioctl+0x46>
    db04:	83 30       	cpi	r24, 0x03	; 3
    db06:	09 f4       	brne	.+2      	; 0xdb0a <mmc_disk_ioctl+0x24>
    db08:	85 c0       	rjmp	.+266    	; 0xdc14 <mmc_disk_ioctl+0x12e>
    db0a:	28 f4       	brcc	.+10     	; 0xdb16 <mmc_disk_ioctl+0x30>
    db0c:	88 23       	and	r24, r24
    db0e:	11 f1       	breq	.+68     	; 0xdb54 <mmc_disk_ioctl+0x6e>
    db10:	81 30       	cpi	r24, 0x01	; 1
    db12:	11 f1       	breq	.+68     	; 0xdb58 <mmc_disk_ioctl+0x72>
    db14:	1f c2       	rjmp	.+1086   	; 0xdf54 <mmc_disk_ioctl+0x46e>
    db16:	87 30       	cpi	r24, 0x07	; 7
    db18:	09 f4       	brne	.+2      	; 0xdb1c <mmc_disk_ioctl+0x36>
    db1a:	2a c1       	rjmp	.+596    	; 0xdd70 <mmc_disk_ioctl+0x28a>
    db1c:	82 33       	cpi	r24, 0x32	; 50
    db1e:	09 f0       	breq	.+2      	; 0xdb22 <mmc_disk_ioctl+0x3c>
    db20:	19 c2       	rjmp	.+1074   	; 0xdf54 <mmc_disk_ioctl+0x46e>
    db22:	80 91 c1 17 	lds	r24, 0x17C1	; 0x8017c1 <CardType>
    db26:	fb 01       	movw	r30, r22
    db28:	80 83       	st	Z, r24
    db2a:	28 c1       	rjmp	.+592    	; 0xdd7c <mmc_disk_ioctl+0x296>
    db2c:	86 33       	cpi	r24, 0x36	; 54
    db2e:	09 f4       	brne	.+2      	; 0xdb32 <mmc_disk_ioctl+0x4c>
    db30:	0c c1       	rjmp	.+536    	; 0xdd4a <mmc_disk_ioctl+0x264>
    db32:	38 f4       	brcc	.+14     	; 0xdb42 <mmc_disk_ioctl+0x5c>
    db34:	84 33       	cpi	r24, 0x34	; 52
    db36:	09 f4       	brne	.+2      	; 0xdb3a <mmc_disk_ioctl+0x54>
    db38:	ea c0       	rjmp	.+468    	; 0xdd0e <mmc_disk_ioctl+0x228>
    db3a:	85 33       	cpi	r24, 0x35	; 53
    db3c:	09 f4       	brne	.+2      	; 0xdb40 <mmc_disk_ioctl+0x5a>
    db3e:	f1 c0       	rjmp	.+482    	; 0xdd22 <mmc_disk_ioctl+0x23c>
    db40:	09 c2       	rjmp	.+1042   	; 0xdf54 <mmc_disk_ioctl+0x46e>
    db42:	88 33       	cpi	r24, 0x38	; 56
    db44:	09 f4       	brne	.+2      	; 0xdb48 <mmc_disk_ioctl+0x62>
    db46:	74 c1       	rjmp	.+744    	; 0xde30 <mmc_disk_ioctl+0x34a>
    db48:	08 f4       	brcc	.+2      	; 0xdb4c <mmc_disk_ioctl+0x66>
    db4a:	1a c1       	rjmp	.+564    	; 0xdd80 <mmc_disk_ioctl+0x29a>
    db4c:	89 33       	cpi	r24, 0x39	; 57
    db4e:	09 f4       	brne	.+2      	; 0xdb52 <mmc_disk_ioctl+0x6c>
    db50:	bc c1       	rjmp	.+888    	; 0xdeca <mmc_disk_ioctl+0x3e4>
    db52:	00 c2       	rjmp	.+1024   	; 0xdf54 <mmc_disk_ioctl+0x46e>
    db54:	ee dd       	rcall	.-1060   	; 0xd732 <select>
    db56:	06 c1       	rjmp	.+524    	; 0xdd64 <mmc_disk_ioctl+0x27e>
    db58:	40 e0       	ldi	r20, 0x00	; 0
    db5a:	50 e0       	ldi	r21, 0x00	; 0
    db5c:	ba 01       	movw	r22, r20
    db5e:	89 e0       	ldi	r24, 0x09	; 9
    db60:	0a de       	rcall	.-1004   	; 0xd776 <send_cmd>
    db62:	81 11       	cpse	r24, r1
    db64:	f1 c1       	rjmp	.+994    	; 0xdf48 <mmc_disk_ioctl+0x462>
    db66:	60 e1       	ldi	r22, 0x10	; 16
    db68:	70 e0       	ldi	r23, 0x00	; 0
    db6a:	ce 01       	movw	r24, r28
    db6c:	01 96       	adiw	r24, 0x01	; 1
    db6e:	a8 dd       	rcall	.-1200   	; 0xd6c0 <rcvr_datablock>
    db70:	89 2b       	or	r24, r25
    db72:	09 f4       	brne	.+2      	; 0xdb76 <mmc_disk_ioctl+0x90>
    db74:	e9 c1       	rjmp	.+978    	; 0xdf48 <mmc_disk_ioctl+0x462>
    db76:	99 81       	ldd	r25, Y+1	; 0x01
    db78:	92 95       	swap	r25
    db7a:	96 95       	lsr	r25
    db7c:	96 95       	lsr	r25
    db7e:	93 70       	andi	r25, 0x03	; 3
    db80:	29 85       	ldd	r18, Y+9	; 0x09
    db82:	4a 85       	ldd	r20, Y+10	; 0x0a
    db84:	88 85       	ldd	r24, Y+8	; 0x08
    db86:	91 30       	cpi	r25, 0x01	; 1
    db88:	d9 f4       	brne	.+54     	; 0xdbc0 <mmc_disk_ioctl+0xda>
    db8a:	30 e0       	ldi	r19, 0x00	; 0
    db8c:	32 2f       	mov	r19, r18
    db8e:	22 27       	eor	r18, r18
    db90:	24 0f       	add	r18, r20
    db92:	31 1d       	adc	r19, r1
    db94:	8f 73       	andi	r24, 0x3F	; 63
    db96:	90 e0       	ldi	r25, 0x00	; 0
    db98:	a0 e0       	ldi	r26, 0x00	; 0
    db9a:	b0 e0       	ldi	r27, 0x00	; 0
    db9c:	dc 01       	movw	r26, r24
    db9e:	99 27       	eor	r25, r25
    dba0:	88 27       	eor	r24, r24
    dba2:	01 96       	adiw	r24, 0x01	; 1
    dba4:	a1 1d       	adc	r26, r1
    dba6:	b1 1d       	adc	r27, r1
    dba8:	82 0f       	add	r24, r18
    dbaa:	93 1f       	adc	r25, r19
    dbac:	a1 1d       	adc	r26, r1
    dbae:	b1 1d       	adc	r27, r1
    dbb0:	fa e0       	ldi	r31, 0x0A	; 10
    dbb2:	88 0f       	add	r24, r24
    dbb4:	99 1f       	adc	r25, r25
    dbb6:	aa 1f       	adc	r26, r26
    dbb8:	bb 1f       	adc	r27, r27
    dbba:	fa 95       	dec	r31
    dbbc:	d1 f7       	brne	.-12     	; 0xdbb2 <mmc_disk_ioctl+0xcc>
    dbbe:	9b c0       	rjmp	.+310    	; 0xdcf6 <mmc_disk_ioctl+0x210>
    dbc0:	22 95       	swap	r18
    dbc2:	26 95       	lsr	r18
    dbc4:	26 95       	lsr	r18
    dbc6:	23 70       	andi	r18, 0x03	; 3
    dbc8:	f4 e0       	ldi	r31, 0x04	; 4
    dbca:	8f 9f       	mul	r24, r31
    dbcc:	c0 01       	movw	r24, r0
    dbce:	11 24       	eor	r1, r1
    dbd0:	82 0f       	add	r24, r18
    dbd2:	91 1d       	adc	r25, r1
    dbd4:	01 96       	adiw	r24, 0x01	; 1
    dbd6:	2f 81       	ldd	r18, Y+7	; 0x07
    dbd8:	23 70       	andi	r18, 0x03	; 3
    dbda:	30 e0       	ldi	r19, 0x00	; 0
    dbdc:	32 2f       	mov	r19, r18
    dbde:	22 27       	eor	r18, r18
    dbe0:	33 0f       	add	r19, r19
    dbe2:	33 0f       	add	r19, r19
    dbe4:	82 0f       	add	r24, r18
    dbe6:	93 1f       	adc	r25, r19
    dbe8:	a0 e0       	ldi	r26, 0x00	; 0
    dbea:	b0 e0       	ldi	r27, 0x00	; 0
    dbec:	2e 81       	ldd	r18, Y+6	; 0x06
    dbee:	32 2f       	mov	r19, r18
    dbf0:	3f 70       	andi	r19, 0x0F	; 15
    dbf2:	2b 85       	ldd	r18, Y+11	; 0x0b
    dbf4:	22 1f       	adc	r18, r18
    dbf6:	22 27       	eor	r18, r18
    dbf8:	22 1f       	adc	r18, r18
    dbfa:	23 0f       	add	r18, r19
    dbfc:	43 70       	andi	r20, 0x03	; 3
    dbfe:	44 0f       	add	r20, r20
    dc00:	42 0f       	add	r20, r18
    dc02:	47 50       	subi	r20, 0x07	; 7
    dc04:	04 c0       	rjmp	.+8      	; 0xdc0e <mmc_disk_ioctl+0x128>
    dc06:	88 0f       	add	r24, r24
    dc08:	99 1f       	adc	r25, r25
    dc0a:	aa 1f       	adc	r26, r26
    dc0c:	bb 1f       	adc	r27, r27
    dc0e:	4a 95       	dec	r20
    dc10:	d2 f7       	brpl	.-12     	; 0xdc06 <mmc_disk_ioctl+0x120>
    dc12:	71 c0       	rjmp	.+226    	; 0xdcf6 <mmc_disk_ioctl+0x210>
    dc14:	80 91 c1 17 	lds	r24, 0x17C1	; 0x8017c1 <CardType>
    dc18:	40 e0       	ldi	r20, 0x00	; 0
    dc1a:	50 e0       	ldi	r21, 0x00	; 0
    dc1c:	ba 01       	movw	r22, r20
    dc1e:	82 ff       	sbrs	r24, 2
    dc20:	24 c0       	rjmp	.+72     	; 0xdc6a <mmc_disk_ioctl+0x184>
    dc22:	8d e8       	ldi	r24, 0x8D	; 141
    dc24:	a8 dd       	rcall	.-1200   	; 0xd776 <send_cmd>
    dc26:	81 11       	cpse	r24, r1
    dc28:	8f c1       	rjmp	.+798    	; 0xdf48 <mmc_disk_ioctl+0x462>
    dc2a:	8f ef       	ldi	r24, 0xFF	; 255
    dc2c:	41 dd       	rcall	.-1406   	; 0xd6b0 <xchg_spi>
    dc2e:	60 e1       	ldi	r22, 0x10	; 16
    dc30:	70 e0       	ldi	r23, 0x00	; 0
    dc32:	ce 01       	movw	r24, r28
    dc34:	01 96       	adiw	r24, 0x01	; 1
    dc36:	44 dd       	rcall	.-1400   	; 0xd6c0 <rcvr_datablock>
    dc38:	89 2b       	or	r24, r25
    dc3a:	09 f4       	brne	.+2      	; 0xdc3e <mmc_disk_ioctl+0x158>
    dc3c:	85 c1       	rjmp	.+778    	; 0xdf48 <mmc_disk_ioctl+0x462>
    dc3e:	50 e3       	ldi	r21, 0x30	; 48
    dc40:	f5 2e       	mov	r15, r21
    dc42:	8f ef       	ldi	r24, 0xFF	; 255
    dc44:	35 dd       	rcall	.-1430   	; 0xd6b0 <xchg_spi>
    dc46:	fa 94       	dec	r15
    dc48:	f1 10       	cpse	r15, r1
    dc4a:	fb cf       	rjmp	.-10     	; 0xdc42 <mmc_disk_ioctl+0x15c>
    dc4c:	2b 85       	ldd	r18, Y+11	; 0x0b
    dc4e:	22 95       	swap	r18
    dc50:	2f 70       	andi	r18, 0x0F	; 15
    dc52:	80 e1       	ldi	r24, 0x10	; 16
    dc54:	90 e0       	ldi	r25, 0x00	; 0
    dc56:	a0 e0       	ldi	r26, 0x00	; 0
    dc58:	b0 e0       	ldi	r27, 0x00	; 0
    dc5a:	04 c0       	rjmp	.+8      	; 0xdc64 <mmc_disk_ioctl+0x17e>
    dc5c:	88 0f       	add	r24, r24
    dc5e:	99 1f       	adc	r25, r25
    dc60:	aa 1f       	adc	r26, r26
    dc62:	bb 1f       	adc	r27, r27
    dc64:	2a 95       	dec	r18
    dc66:	d2 f7       	brpl	.-12     	; 0xdc5c <mmc_disk_ioctl+0x176>
    dc68:	46 c0       	rjmp	.+140    	; 0xdcf6 <mmc_disk_ioctl+0x210>
    dc6a:	89 e0       	ldi	r24, 0x09	; 9
    dc6c:	84 dd       	rcall	.-1272   	; 0xd776 <send_cmd>
    dc6e:	81 11       	cpse	r24, r1
    dc70:	6b c1       	rjmp	.+726    	; 0xdf48 <mmc_disk_ioctl+0x462>
    dc72:	60 e1       	ldi	r22, 0x10	; 16
    dc74:	70 e0       	ldi	r23, 0x00	; 0
    dc76:	ce 01       	movw	r24, r28
    dc78:	01 96       	adiw	r24, 0x01	; 1
    dc7a:	22 dd       	rcall	.-1468   	; 0xd6c0 <rcvr_datablock>
    dc7c:	89 2b       	or	r24, r25
    dc7e:	09 f4       	brne	.+2      	; 0xdc82 <mmc_disk_ioctl+0x19c>
    dc80:	63 c1       	rjmp	.+710    	; 0xdf48 <mmc_disk_ioctl+0x462>
    dc82:	90 91 c1 17 	lds	r25, 0x17C1	; 0x8017c1 <CardType>
    dc86:	2b 85       	ldd	r18, Y+11	; 0x0b
    dc88:	8c 85       	ldd	r24, Y+12	; 0x0c
    dc8a:	91 ff       	sbrs	r25, 1
    dc8c:	16 c0       	rjmp	.+44     	; 0xdcba <mmc_disk_ioctl+0x1d4>
    dc8e:	2f 73       	andi	r18, 0x3F	; 63
    dc90:	88 1f       	adc	r24, r24
    dc92:	88 27       	eor	r24, r24
    dc94:	88 1f       	adc	r24, r24
    dc96:	90 e0       	ldi	r25, 0x00	; 0
    dc98:	01 96       	adiw	r24, 0x01	; 1
    dc9a:	82 0f       	add	r24, r18
    dc9c:	91 1d       	adc	r25, r1
    dc9e:	82 0f       	add	r24, r18
    dca0:	91 1d       	adc	r25, r1
    dca2:	2e 85       	ldd	r18, Y+14	; 0x0e
    dca4:	22 95       	swap	r18
    dca6:	26 95       	lsr	r18
    dca8:	26 95       	lsr	r18
    dcaa:	23 70       	andi	r18, 0x03	; 3
    dcac:	21 50       	subi	r18, 0x01	; 1
    dcae:	02 c0       	rjmp	.+4      	; 0xdcb4 <mmc_disk_ioctl+0x1ce>
    dcb0:	88 0f       	add	r24, r24
    dcb2:	99 1f       	adc	r25, r25
    dcb4:	2a 95       	dec	r18
    dcb6:	e2 f7       	brpl	.-8      	; 0xdcb0 <mmc_disk_ioctl+0x1ca>
    dcb8:	1c c0       	rjmp	.+56     	; 0xdcf2 <mmc_disk_ioctl+0x20c>
    dcba:	38 2f       	mov	r19, r24
    dcbc:	33 70       	andi	r19, 0x03	; 3
    dcbe:	82 95       	swap	r24
    dcc0:	86 95       	lsr	r24
    dcc2:	87 70       	andi	r24, 0x07	; 7
    dcc4:	90 e0       	ldi	r25, 0x00	; 0
    dcc6:	f8 e0       	ldi	r31, 0x08	; 8
    dcc8:	3f 9f       	mul	r19, r31
    dcca:	80 0d       	add	r24, r0
    dccc:	91 1d       	adc	r25, r1
    dcce:	11 24       	eor	r1, r1
    dcd0:	01 96       	adiw	r24, 0x01	; 1
    dcd2:	2c 77       	andi	r18, 0x7C	; 124
    dcd4:	30 e0       	ldi	r19, 0x00	; 0
    dcd6:	35 95       	asr	r19
    dcd8:	27 95       	ror	r18
    dcda:	35 95       	asr	r19
    dcdc:	27 95       	ror	r18
    dcde:	2f 5f       	subi	r18, 0xFF	; 255
    dce0:	3f 4f       	sbci	r19, 0xFF	; 255
    dce2:	82 9f       	mul	r24, r18
    dce4:	a0 01       	movw	r20, r0
    dce6:	83 9f       	mul	r24, r19
    dce8:	50 0d       	add	r21, r0
    dcea:	92 9f       	mul	r25, r18
    dcec:	50 0d       	add	r21, r0
    dcee:	11 24       	eor	r1, r1
    dcf0:	ca 01       	movw	r24, r20
    dcf2:	a0 e0       	ldi	r26, 0x00	; 0
    dcf4:	b0 e0       	ldi	r27, 0x00	; 0
    dcf6:	f8 01       	movw	r30, r16
    dcf8:	80 83       	st	Z, r24
    dcfa:	91 83       	std	Z+1, r25	; 0x01
    dcfc:	a2 83       	std	Z+2, r26	; 0x02
    dcfe:	b3 83       	std	Z+3, r27	; 0x03
    dd00:	00 e0       	ldi	r16, 0x00	; 0
    dd02:	23 c1       	rjmp	.+582    	; 0xdf4a <mmc_disk_ioctl+0x464>
    dd04:	40 e0       	ldi	r20, 0x00	; 0
    dd06:	50 e0       	ldi	r21, 0x00	; 0
    dd08:	ba 01       	movw	r22, r20
    dd0a:	89 e0       	ldi	r24, 0x09	; 9
    dd0c:	04 c0       	rjmp	.+8      	; 0xdd16 <mmc_disk_ioctl+0x230>
    dd0e:	40 e0       	ldi	r20, 0x00	; 0
    dd10:	50 e0       	ldi	r21, 0x00	; 0
    dd12:	ba 01       	movw	r22, r20
    dd14:	8a e0       	ldi	r24, 0x0A	; 10
    dd16:	2f dd       	rcall	.-1442   	; 0xd776 <send_cmd>
    dd18:	81 11       	cpse	r24, r1
    dd1a:	16 c1       	rjmp	.+556    	; 0xdf48 <mmc_disk_ioctl+0x462>
    dd1c:	60 e1       	ldi	r22, 0x10	; 16
    dd1e:	70 e0       	ldi	r23, 0x00	; 0
    dd20:	1f c0       	rjmp	.+62     	; 0xdd60 <mmc_disk_ioctl+0x27a>
    dd22:	40 e0       	ldi	r20, 0x00	; 0
    dd24:	50 e0       	ldi	r21, 0x00	; 0
    dd26:	ba 01       	movw	r22, r20
    dd28:	8a e3       	ldi	r24, 0x3A	; 58
    dd2a:	25 dd       	rcall	.-1462   	; 0xd776 <send_cmd>
    dd2c:	81 11       	cpse	r24, r1
    dd2e:	0c c1       	rjmp	.+536    	; 0xdf48 <mmc_disk_ioctl+0x462>
    dd30:	78 01       	movw	r14, r16
    dd32:	f4 e0       	ldi	r31, 0x04	; 4
    dd34:	ef 0e       	add	r14, r31
    dd36:	f1 1c       	adc	r15, r1
    dd38:	8f ef       	ldi	r24, 0xFF	; 255
    dd3a:	92 d1       	rcall	.+804    	; 0xe060 <mmc_spi_TXRX>
    dd3c:	f8 01       	movw	r30, r16
    dd3e:	81 93       	st	Z+, r24
    dd40:	8f 01       	movw	r16, r30
    dd42:	ee 15       	cp	r30, r14
    dd44:	ff 05       	cpc	r31, r15
    dd46:	c1 f7       	brne	.-16     	; 0xdd38 <mmc_disk_ioctl+0x252>
    dd48:	db cf       	rjmp	.-74     	; 0xdd00 <mmc_disk_ioctl+0x21a>
    dd4a:	40 e0       	ldi	r20, 0x00	; 0
    dd4c:	50 e0       	ldi	r21, 0x00	; 0
    dd4e:	ba 01       	movw	r22, r20
    dd50:	8d e8       	ldi	r24, 0x8D	; 141
    dd52:	11 dd       	rcall	.-1502   	; 0xd776 <send_cmd>
    dd54:	81 11       	cpse	r24, r1
    dd56:	f8 c0       	rjmp	.+496    	; 0xdf48 <mmc_disk_ioctl+0x462>
    dd58:	8f ef       	ldi	r24, 0xFF	; 255
    dd5a:	aa dc       	rcall	.-1708   	; 0xd6b0 <xchg_spi>
    dd5c:	60 e4       	ldi	r22, 0x40	; 64
    dd5e:	70 e0       	ldi	r23, 0x00	; 0
    dd60:	c8 01       	movw	r24, r16
    dd62:	ae dc       	rcall	.-1700   	; 0xd6c0 <rcvr_datablock>
    dd64:	01 e0       	ldi	r16, 0x01	; 1
    dd66:	10 e0       	ldi	r17, 0x00	; 0
    dd68:	89 2b       	or	r24, r25
    dd6a:	09 f4       	brne	.+2      	; 0xdd6e <mmc_disk_ioctl+0x288>
    dd6c:	ef c0       	rjmp	.+478    	; 0xdf4c <mmc_disk_ioctl+0x466>
    dd6e:	ea c0       	rjmp	.+468    	; 0xdf44 <mmc_disk_ioctl+0x45e>
    dd70:	41 d2       	rcall	.+1154   	; 0xe1f4 <mmc_power_off>
    dd72:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    dd76:	81 60       	ori	r24, 0x01	; 1
    dd78:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <Stat>
    dd7c:	00 e0       	ldi	r16, 0x00	; 0
    dd7e:	eb c0       	rjmp	.+470    	; 0xdf56 <mmc_disk_ioctl+0x470>
    dd80:	fb 01       	movw	r30, r22
    dd82:	43 81       	ldd	r20, Z+3	; 0x03
    dd84:	54 81       	ldd	r21, Z+4	; 0x04
    dd86:	65 81       	ldd	r22, Z+5	; 0x05
    dd88:	76 81       	ldd	r23, Z+6	; 0x06
    dd8a:	39 e0       	ldi	r19, 0x09	; 9
    dd8c:	44 0f       	add	r20, r20
    dd8e:	55 1f       	adc	r21, r21
    dd90:	66 1f       	adc	r22, r22
    dd92:	77 1f       	adc	r23, r23
    dd94:	3a 95       	dec	r19
    dd96:	d1 f7       	brne	.-12     	; 0xdd8c <mmc_disk_ioctl+0x2a6>
    dd98:	70 68       	ori	r23, 0x80	; 128
    dd9a:	80 81       	ld	r24, Z
    dd9c:	90 e0       	ldi	r25, 0x00	; 0
    dd9e:	a0 e0       	ldi	r26, 0x00	; 0
    dda0:	b0 e0       	ldi	r27, 0x00	; 0
    dda2:	2c e1       	ldi	r18, 0x1C	; 28
    dda4:	88 0f       	add	r24, r24
    dda6:	99 1f       	adc	r25, r25
    dda8:	aa 1f       	adc	r26, r26
    ddaa:	bb 1f       	adc	r27, r27
    ddac:	2a 95       	dec	r18
    ddae:	d1 f7       	brne	.-12     	; 0xdda4 <mmc_disk_ioctl+0x2be>
    ddb0:	48 2b       	or	r20, r24
    ddb2:	59 2b       	or	r21, r25
    ddb4:	6a 2b       	or	r22, r26
    ddb6:	7b 2b       	or	r23, r27
    ddb8:	81 81       	ldd	r24, Z+1	; 0x01
    ddba:	92 81       	ldd	r25, Z+2	; 0x02
    ddbc:	01 97       	sbiw	r24, 0x01	; 1
    ddbe:	91 70       	andi	r25, 0x01	; 1
    ddc0:	a0 e0       	ldi	r26, 0x00	; 0
    ddc2:	b0 e0       	ldi	r27, 0x00	; 0
    ddc4:	48 2b       	or	r20, r24
    ddc6:	59 2b       	or	r21, r25
    ddc8:	6a 2b       	or	r22, r26
    ddca:	7b 2b       	or	r23, r27
    ddcc:	80 e3       	ldi	r24, 0x30	; 48
    ddce:	d3 dc       	rcall	.-1626   	; 0xd776 <send_cmd>
    ddd0:	81 11       	cpse	r24, r1
    ddd2:	ba c0       	rjmp	.+372    	; 0xdf48 <mmc_disk_ioctl+0x462>
    ddd4:	88 ee       	ldi	r24, 0xE8	; 232
    ddd6:	93 e0       	ldi	r25, 0x03	; 3
    ddd8:	46 d1       	rcall	.+652    	; 0xe066 <mmc_set_ms_timeout>
    ddda:	8f ef       	ldi	r24, 0xFF	; 255
    dddc:	41 d1       	rcall	.+642    	; 0xe060 <mmc_spi_TXRX>
    ddde:	8f 3f       	cpi	r24, 0xFF	; 255
    dde0:	21 f4       	brne	.+8      	; 0xddea <mmc_disk_ioctl+0x304>
    dde2:	48 d1       	rcall	.+656    	; 0xe074 <mmc_test_timeout>
    dde4:	89 2b       	or	r24, r25
    dde6:	c9 f3       	breq	.-14     	; 0xddda <mmc_disk_ioctl+0x2f4>
    dde8:	af c0       	rjmp	.+350    	; 0xdf48 <mmc_disk_ioctl+0x462>
    ddea:	8e 3f       	cpi	r24, 0xFE	; 254
    ddec:	09 f0       	breq	.+2      	; 0xddf0 <mmc_disk_ioctl+0x30a>
    ddee:	ac c0       	rjmp	.+344    	; 0xdf48 <mmc_disk_ioctl+0x462>
    ddf0:	f8 01       	movw	r30, r16
    ddf2:	e7 80       	ldd	r14, Z+7	; 0x07
    ddf4:	f0 84       	ldd	r15, Z+8	; 0x08
    ddf6:	c1 80       	ldd	r12, Z+1	; 0x01
    ddf8:	d2 80       	ldd	r13, Z+2	; 0x02
    ddfa:	ce 0c       	add	r12, r14
    ddfc:	df 1c       	adc	r13, r15
    ddfe:	ce 14       	cp	r12, r14
    de00:	df 04       	cpc	r13, r15
    de02:	31 f0       	breq	.+12     	; 0xde10 <mmc_disk_ioctl+0x32a>
    de04:	8f ef       	ldi	r24, 0xFF	; 255
    de06:	2c d1       	rcall	.+600    	; 0xe060 <mmc_spi_TXRX>
    de08:	f7 01       	movw	r30, r14
    de0a:	81 93       	st	Z+, r24
    de0c:	7f 01       	movw	r14, r30
    de0e:	f7 cf       	rjmp	.-18     	; 0xddfe <mmc_disk_ioctl+0x318>
    de10:	f8 01       	movw	r30, r16
    de12:	81 81       	ldd	r24, Z+1	; 0x01
    de14:	92 81       	ldd	r25, Z+2	; 0x02
    de16:	02 e0       	ldi	r16, 0x02	; 2
    de18:	12 e0       	ldi	r17, 0x02	; 2
    de1a:	08 1b       	sub	r16, r24
    de1c:	19 0b       	sbc	r17, r25
    de1e:	01 15       	cp	r16, r1
    de20:	11 05       	cpc	r17, r1
    de22:	09 f4       	brne	.+2      	; 0xde26 <mmc_disk_ioctl+0x340>
    de24:	6d cf       	rjmp	.-294    	; 0xdd00 <mmc_disk_ioctl+0x21a>
    de26:	8f ef       	ldi	r24, 0xFF	; 255
    de28:	43 dc       	rcall	.-1914   	; 0xd6b0 <xchg_spi>
    de2a:	01 50       	subi	r16, 0x01	; 1
    de2c:	11 09       	sbc	r17, r1
    de2e:	f7 cf       	rjmp	.-18     	; 0xde1e <mmc_disk_ioctl+0x338>
    de30:	fb 01       	movw	r30, r22
    de32:	43 81       	ldd	r20, Z+3	; 0x03
    de34:	54 81       	ldd	r21, Z+4	; 0x04
    de36:	65 81       	ldd	r22, Z+5	; 0x05
    de38:	76 81       	ldd	r23, Z+6	; 0x06
    de3a:	39 e0       	ldi	r19, 0x09	; 9
    de3c:	44 0f       	add	r20, r20
    de3e:	55 1f       	adc	r21, r21
    de40:	66 1f       	adc	r22, r22
    de42:	77 1f       	adc	r23, r23
    de44:	3a 95       	dec	r19
    de46:	d1 f7       	brne	.-12     	; 0xde3c <mmc_disk_ioctl+0x356>
    de48:	70 68       	ori	r23, 0x80	; 128
    de4a:	80 81       	ld	r24, Z
    de4c:	90 e0       	ldi	r25, 0x00	; 0
    de4e:	a0 e0       	ldi	r26, 0x00	; 0
    de50:	b0 e0       	ldi	r27, 0x00	; 0
    de52:	2c e1       	ldi	r18, 0x1C	; 28
    de54:	88 0f       	add	r24, r24
    de56:	99 1f       	adc	r25, r25
    de58:	aa 1f       	adc	r26, r26
    de5a:	bb 1f       	adc	r27, r27
    de5c:	2a 95       	dec	r18
    de5e:	d1 f7       	brne	.-12     	; 0xde54 <mmc_disk_ioctl+0x36e>
    de60:	48 2b       	or	r20, r24
    de62:	59 2b       	or	r21, r25
    de64:	6a 2b       	or	r22, r26
    de66:	7b 2b       	or	r23, r27
    de68:	81 81       	ldd	r24, Z+1	; 0x01
    de6a:	92 81       	ldd	r25, Z+2	; 0x02
    de6c:	01 97       	sbiw	r24, 0x01	; 1
    de6e:	91 70       	andi	r25, 0x01	; 1
    de70:	a0 e0       	ldi	r26, 0x00	; 0
    de72:	b0 e0       	ldi	r27, 0x00	; 0
    de74:	48 2b       	or	r20, r24
    de76:	59 2b       	or	r21, r25
    de78:	6a 2b       	or	r22, r26
    de7a:	7b 2b       	or	r23, r27
    de7c:	81 e3       	ldi	r24, 0x31	; 49
    de7e:	7b dc       	rcall	.-1802   	; 0xd776 <send_cmd>
    de80:	81 11       	cpse	r24, r1
    de82:	62 c0       	rjmp	.+196    	; 0xdf48 <mmc_disk_ioctl+0x462>
    de84:	8f ef       	ldi	r24, 0xFF	; 255
    de86:	14 dc       	rcall	.-2008   	; 0xd6b0 <xchg_spi>
    de88:	8e ef       	ldi	r24, 0xFE	; 254
    de8a:	12 dc       	rcall	.-2012   	; 0xd6b0 <xchg_spi>
    de8c:	f8 01       	movw	r30, r16
    de8e:	e7 80       	ldd	r14, Z+7	; 0x07
    de90:	f0 84       	ldd	r15, Z+8	; 0x08
    de92:	c1 80       	ldd	r12, Z+1	; 0x01
    de94:	d2 80       	ldd	r13, Z+2	; 0x02
    de96:	ce 0c       	add	r12, r14
    de98:	df 1c       	adc	r13, r15
    de9a:	ec 14       	cp	r14, r12
    de9c:	fd 04       	cpc	r15, r13
    de9e:	29 f0       	breq	.+10     	; 0xdeaa <mmc_disk_ioctl+0x3c4>
    dea0:	f7 01       	movw	r30, r14
    dea2:	81 91       	ld	r24, Z+
    dea4:	7f 01       	movw	r14, r30
    dea6:	04 dc       	rcall	.-2040   	; 0xd6b0 <xchg_spi>
    dea8:	f8 cf       	rjmp	.-16     	; 0xde9a <mmc_disk_ioctl+0x3b4>
    deaa:	f8 01       	movw	r30, r16
    deac:	81 81       	ldd	r24, Z+1	; 0x01
    deae:	92 81       	ldd	r25, Z+2	; 0x02
    deb0:	02 e0       	ldi	r16, 0x02	; 2
    deb2:	12 e0       	ldi	r17, 0x02	; 2
    deb4:	08 1b       	sub	r16, r24
    deb6:	19 0b       	sbc	r17, r25
    deb8:	8f ef       	ldi	r24, 0xFF	; 255
    deba:	01 15       	cp	r16, r1
    debc:	11 05       	cpc	r17, r1
    debe:	09 f4       	brne	.+2      	; 0xdec2 <mmc_disk_ioctl+0x3dc>
    dec0:	3b c0       	rjmp	.+118    	; 0xdf38 <mmc_disk_ioctl+0x452>
    dec2:	f6 db       	rcall	.-2068   	; 0xd6b0 <xchg_spi>
    dec4:	01 50       	subi	r16, 0x01	; 1
    dec6:	11 09       	sbc	r17, r1
    dec8:	f7 cf       	rjmp	.-18     	; 0xdeb8 <mmc_disk_ioctl+0x3d2>
    deca:	fb 01       	movw	r30, r22
    decc:	43 81       	ldd	r20, Z+3	; 0x03
    dece:	54 81       	ldd	r21, Z+4	; 0x04
    ded0:	65 81       	ldd	r22, Z+5	; 0x05
    ded2:	76 81       	ldd	r23, Z+6	; 0x06
    ded4:	89 e0       	ldi	r24, 0x09	; 9
    ded6:	44 0f       	add	r20, r20
    ded8:	55 1f       	adc	r21, r21
    deda:	66 1f       	adc	r22, r22
    dedc:	77 1f       	adc	r23, r23
    dede:	8a 95       	dec	r24
    dee0:	d1 f7       	brne	.-12     	; 0xded6 <mmc_disk_ioctl+0x3f0>
    dee2:	74 68       	ori	r23, 0x84	; 132
    dee4:	80 81       	ld	r24, Z
    dee6:	90 e0       	ldi	r25, 0x00	; 0
    dee8:	a0 e0       	ldi	r26, 0x00	; 0
    deea:	b0 e0       	ldi	r27, 0x00	; 0
    deec:	2c e1       	ldi	r18, 0x1C	; 28
    deee:	88 0f       	add	r24, r24
    def0:	99 1f       	adc	r25, r25
    def2:	aa 1f       	adc	r26, r26
    def4:	bb 1f       	adc	r27, r27
    def6:	2a 95       	dec	r18
    def8:	d1 f7       	brne	.-12     	; 0xdeee <mmc_disk_ioctl+0x408>
    defa:	48 2b       	or	r20, r24
    defc:	59 2b       	or	r21, r25
    defe:	6a 2b       	or	r22, r26
    df00:	7b 2b       	or	r23, r27
    df02:	82 81       	ldd	r24, Z+2	; 0x02
    df04:	90 e0       	ldi	r25, 0x00	; 0
    df06:	a0 e0       	ldi	r26, 0x00	; 0
    df08:	b0 e0       	ldi	r27, 0x00	; 0
    df0a:	48 2b       	or	r20, r24
    df0c:	59 2b       	or	r21, r25
    df0e:	6a 2b       	or	r22, r26
    df10:	7b 2b       	or	r23, r27
    df12:	81 e3       	ldi	r24, 0x31	; 49
    df14:	30 dc       	rcall	.-1952   	; 0xd776 <send_cmd>
    df16:	81 11       	cpse	r24, r1
    df18:	17 c0       	rjmp	.+46     	; 0xdf48 <mmc_disk_ioctl+0x462>
    df1a:	8f ef       	ldi	r24, 0xFF	; 255
    df1c:	c9 db       	rcall	.-2158   	; 0xd6b0 <xchg_spi>
    df1e:	8e ef       	ldi	r24, 0xFE	; 254
    df20:	c7 db       	rcall	.-2162   	; 0xd6b0 <xchg_spi>
    df22:	f8 01       	movw	r30, r16
    df24:	81 81       	ldd	r24, Z+1	; 0x01
    df26:	c4 db       	rcall	.-2168   	; 0xd6b0 <xchg_spi>
    df28:	01 e0       	ldi	r16, 0x01	; 1
    df2a:	12 e0       	ldi	r17, 0x02	; 2
    df2c:	8f ef       	ldi	r24, 0xFF	; 255
    df2e:	c0 db       	rcall	.-2176   	; 0xd6b0 <xchg_spi>
    df30:	01 50       	subi	r16, 0x01	; 1
    df32:	11 09       	sbc	r17, r1
    df34:	d9 f7       	brne	.-10     	; 0xdf2c <mmc_disk_ioctl+0x446>
    df36:	8f ef       	ldi	r24, 0xFF	; 255
    df38:	93 d0       	rcall	.+294    	; 0xe060 <mmc_spi_TXRX>
    df3a:	8f 71       	andi	r24, 0x1F	; 31
    df3c:	01 e0       	ldi	r16, 0x01	; 1
    df3e:	10 e0       	ldi	r17, 0x00	; 0
    df40:	85 30       	cpi	r24, 0x05	; 5
    df42:	21 f4       	brne	.+8      	; 0xdf4c <mmc_disk_ioctl+0x466>
    df44:	00 e0       	ldi	r16, 0x00	; 0
    df46:	02 c0       	rjmp	.+4      	; 0xdf4c <mmc_disk_ioctl+0x466>
    df48:	01 e0       	ldi	r16, 0x01	; 1
    df4a:	10 e0       	ldi	r17, 0x00	; 0
    df4c:	b3 db       	rcall	.-2202   	; 0xd6b4 <deselect>
    df4e:	04 c0       	rjmp	.+8      	; 0xdf58 <mmc_disk_ioctl+0x472>
    df50:	03 e0       	ldi	r16, 0x03	; 3
    df52:	01 c0       	rjmp	.+2      	; 0xdf56 <mmc_disk_ioctl+0x470>
    df54:	04 e0       	ldi	r16, 0x04	; 4
    df56:	10 e0       	ldi	r17, 0x00	; 0
    df58:	c8 01       	movw	r24, r16
    df5a:	60 96       	adiw	r28, 0x10	; 16
    df5c:	e8 e0       	ldi	r30, 0x08	; 8
    df5e:	0c 94 ac e4 	jmp	0x1c958	; 0x1c958 <__epilogue_restores__+0x14>

0000df62 <mmc_disk_timerproc>:
    df62:	80 91 c3 17 	lds	r24, 0x17C3	; 0x8017c3 <Timer1>
    df66:	88 23       	and	r24, r24
    df68:	19 f0       	breq	.+6      	; 0xdf70 <mmc_disk_timerproc+0xe>
    df6a:	81 50       	subi	r24, 0x01	; 1
    df6c:	80 93 c3 17 	sts	0x17C3, r24	; 0x8017c3 <Timer1>
    df70:	80 91 c2 17 	lds	r24, 0x17C2	; 0x8017c2 <Timer2>
    df74:	88 23       	and	r24, r24
    df76:	19 f0       	breq	.+6      	; 0xdf7e <mmc_disk_timerproc+0x1c>
    df78:	81 50       	subi	r24, 0x01	; 1
    df7a:	80 93 c2 17 	sts	0x17C2, r24	; 0x8017c2 <Timer2>
    df7e:	08 95       	ret

0000df80 <mmc_task>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    df80:	80 91 cc 17 	lds	r24, 0x17CC	; 0x8017cc <_mmc_timeout>
    df84:	90 91 cd 17 	lds	r25, 0x17CD	; 0x8017cd <_mmc_timeout+0x1>
    df88:	00 97       	sbiw	r24, 0x00	; 0
    df8a:	29 f0       	breq	.+10     	; 0xdf96 <mmc_task+0x16>
    df8c:	01 97       	sbiw	r24, 0x01	; 1
    df8e:	90 93 cd 17 	sts	0x17CD, r25	; 0x8017cd <_mmc_timeout+0x1>
    df92:	80 93 cc 17 	sts	0x17CC, r24	; 0x8017cc <_mmc_timeout>
    df96:	80 91 c6 17 	lds	r24, 0x17C6	; 0x8017c6 <_mmc_pre>
    df9a:	90 91 c7 17 	lds	r25, 0x17C7	; 0x8017c7 <_mmc_pre+0x1>
    df9e:	8a 30       	cpi	r24, 0x0A	; 10
    dfa0:	91 05       	cpc	r25, r1
    dfa2:	30 f4       	brcc	.+12     	; 0xdfb0 <mmc_task+0x30>
    dfa4:	01 96       	adiw	r24, 0x01	; 1
    dfa6:	90 93 c7 17 	sts	0x17C7, r25	; 0x8017c7 <_mmc_pre+0x1>
    dfaa:	80 93 c6 17 	sts	0x17C6, r24	; 0x8017c6 <_mmc_pre>
    dfae:	08 95       	ret
    dfb0:	10 92 c7 17 	sts	0x17C7, r1	; 0x8017c7 <_mmc_pre+0x1>
    dfb4:	10 92 c6 17 	sts	0x17C6, r1	; 0x8017c6 <_mmc_pre>
    dfb8:	d4 cf       	rjmp	.-88     	; 0xdf62 <mmc_disk_timerproc>
    dfba:	08 95       	ret

0000dfbc <mmc_install_timer>:
    dfbc:	00 d0       	rcall	.+0      	; 0xdfbe <mmc_install_timer+0x2>
    dfbe:	1f 92       	push	r1
    dfc0:	10 92 cd 17 	sts	0x17CD, r1	; 0x8017cd <_mmc_timeout+0x1>
    dfc4:	10 92 cc 17 	sts	0x17CC, r1	; 0x8017cc <_mmc_timeout>
    dfc8:	61 e0       	ldi	r22, 0x01	; 1
    dfca:	70 e0       	ldi	r23, 0x00	; 0
    dfcc:	80 ec       	ldi	r24, 0xC0	; 192
    dfce:	9f e6       	ldi	r25, 0x6F	; 111
    dfd0:	0e 94 ce 35 	call	0x6b9c	; 0x6b9c <set_timers>
    dfd4:	01 96       	adiw	r24, 0x01	; 1
    dfd6:	51 f4       	brne	.+20     	; 0xdfec <mmc_install_timer+0x30>
    dfd8:	8b eb       	ldi	r24, 0xBB	; 187
    dfda:	97 e0       	ldi	r25, 0x07	; 7
    dfdc:	a0 e0       	ldi	r26, 0x00	; 0
    dfde:	ed b7       	in	r30, 0x3d	; 61
    dfe0:	fe b7       	in	r31, 0x3e	; 62
    dfe2:	81 83       	std	Z+1, r24	; 0x01
    dfe4:	92 83       	std	Z+2, r25	; 0x02
    dfe6:	a3 83       	std	Z+3, r26	; 0x03
    dfe8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    dfec:	0f 90       	pop	r0
    dfee:	0f 90       	pop	r0
    dff0:	0f 90       	pop	r0
    dff2:	08 95       	ret

0000dff4 <mmc_spi_begin>:
    dff4:	60 91 c8 17 	lds	r22, 0x17C8	; 0x8017c8 <_mmc_clock>
    dff8:	70 91 c9 17 	lds	r23, 0x17C9	; 0x8017c9 <_mmc_clock+0x1>
    dffc:	80 91 ca 17 	lds	r24, 0x17CA	; 0x8017ca <_mmc_clock+0x2>
    e000:	90 91 cb 17 	lds	r25, 0x17CB	; 0x8017cb <_mmc_clock+0x3>
    e004:	4b e0       	ldi	r20, 0x0B	; 11
    e006:	50 e0       	ldi	r21, 0x00	; 0
    e008:	0c 94 74 28 	jmp	0x50e8	; 0x50e8 <spi_begin>
    e00c:	08 95       	ret

0000e00e <mmc_spi_end>:
    e00e:	8b e0       	ldi	r24, 0x0B	; 11
    e010:	0c 94 10 28 	jmp	0x5020	; 0x5020 <spi_end>
    e014:	08 95       	ret

0000e016 <mmc_slow>:
    e016:	80 e2       	ldi	r24, 0x20	; 32
    e018:	91 ea       	ldi	r25, 0xA1	; 161
    e01a:	a7 e0       	ldi	r26, 0x07	; 7
    e01c:	b0 e0       	ldi	r27, 0x00	; 0
    e01e:	80 93 c8 17 	sts	0x17C8, r24	; 0x8017c8 <_mmc_clock>
    e022:	90 93 c9 17 	sts	0x17C9, r25	; 0x8017c9 <_mmc_clock+0x1>
    e026:	a0 93 ca 17 	sts	0x17CA, r26	; 0x8017ca <_mmc_clock+0x2>
    e02a:	b0 93 cb 17 	sts	0x17CB, r27	; 0x8017cb <_mmc_clock+0x3>
    e02e:	08 95       	ret

0000e030 <mmc_spi_init>:
    e030:	8b e0       	ldi	r24, 0x0B	; 11
    e032:	0e 94 0e 28 	call	0x501c	; 0x501c <chip_select_init>
    e036:	ef cf       	rjmp	.-34     	; 0xe016 <mmc_slow>
    e038:	08 95       	ret

0000e03a <mmc_fast>:
    e03a:	80 ea       	ldi	r24, 0xA0	; 160
    e03c:	95 e2       	ldi	r25, 0x25	; 37
    e03e:	a6 e2       	ldi	r26, 0x26	; 38
    e040:	b0 e0       	ldi	r27, 0x00	; 0
    e042:	80 93 c8 17 	sts	0x17C8, r24	; 0x8017c8 <_mmc_clock>
    e046:	90 93 c9 17 	sts	0x17C9, r25	; 0x8017c9 <_mmc_clock+0x1>
    e04a:	a0 93 ca 17 	sts	0x17CA, r26	; 0x8017ca <_mmc_clock+0x2>
    e04e:	b0 93 cb 17 	sts	0x17CB, r27	; 0x8017cb <_mmc_clock+0x3>
    e052:	08 95       	ret

0000e054 <mmc_spi_TX_buffer>:
    e054:	0c 94 40 28 	jmp	0x5080	; 0x5080 <spi_TX_buffer>
    e058:	08 95       	ret

0000e05a <mmc_spi_RX_buffer>:
    e05a:	0c 94 42 28 	jmp	0x5084	; 0x5084 <spi_RX_buffer>
    e05e:	08 95       	ret

0000e060 <mmc_spi_TXRX>:
    e060:	0c 94 bc 28 	jmp	0x5178	; 0x5178 <spi_TXRX>
    e064:	08 95       	ret

0000e066 <mmc_set_ms_timeout>:
    e066:	f8 94       	cli
    e068:	90 93 cd 17 	sts	0x17CD, r25	; 0x8017cd <_mmc_timeout+0x1>
    e06c:	80 93 cc 17 	sts	0x17CC, r24	; 0x8017cc <_mmc_timeout>
    e070:	78 94       	sei
    e072:	08 95       	ret

0000e074 <mmc_test_timeout>:
    e074:	00 d0       	rcall	.+0      	; 0xe076 <mmc_test_timeout+0x2>
    e076:	1f 92       	push	r1
    e078:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    e07c:	81 fd       	sbrc	r24, 1
    e07e:	15 c0       	rjmp	.+42     	; 0xe0aa <mmc_test_timeout+0x36>
    e080:	80 91 cc 17 	lds	r24, 0x17CC	; 0x8017cc <_mmc_timeout>
    e084:	90 91 cd 17 	lds	r25, 0x17CD	; 0x8017cd <_mmc_timeout+0x1>
    e088:	89 2b       	or	r24, r25
    e08a:	91 f4       	brne	.+36     	; 0xe0b0 <mmc_test_timeout+0x3c>
    e08c:	8e ea       	ldi	r24, 0xAE	; 174
    e08e:	97 e0       	ldi	r25, 0x07	; 7
    e090:	a0 e0       	ldi	r26, 0x00	; 0
    e092:	ed b7       	in	r30, 0x3d	; 61
    e094:	fe b7       	in	r31, 0x3e	; 62
    e096:	81 83       	std	Z+1, r24	; 0x01
    e098:	92 83       	std	Z+2, r25	; 0x02
    e09a:	a3 83       	std	Z+3, r26	; 0x03
    e09c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    e0a0:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <Stat>
    e0a4:	83 60       	ori	r24, 0x03	; 3
    e0a6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <Stat>
    e0aa:	81 e0       	ldi	r24, 0x01	; 1
    e0ac:	90 e0       	ldi	r25, 0x00	; 0
    e0ae:	02 c0       	rjmp	.+4      	; 0xe0b4 <mmc_test_timeout+0x40>
    e0b0:	80 e0       	ldi	r24, 0x00	; 0
    e0b2:	90 e0       	ldi	r25, 0x00	; 0
    e0b4:	0f 90       	pop	r0
    e0b6:	0f 90       	pop	r0
    e0b8:	0f 90       	pop	r0
    e0ba:	08 95       	ret

0000e0bc <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    e0bc:	ab e0       	ldi	r26, 0x0B	; 11
    e0be:	b0 e0       	ldi	r27, 0x00	; 0
    e0c0:	e4 e6       	ldi	r30, 0x64	; 100
    e0c2:	f0 e7       	ldi	r31, 0x70	; 112
    e0c4:	0c 94 92 e4 	jmp	0x1c924	; 0x1c924 <__prologue_saves__+0x18>
    e0c8:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    e0ca:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <Stat>

    mmc_spi_init();

    if( verbose)
    e0ce:	b0 df       	rcall	.-160    	; 0xe030 <mmc_spi_init>
    e0d0:	e1 14       	cp	r14, r1
    e0d2:	f1 04       	cpc	r15, r1
    {
        printf("START MMC INIT\n");
    e0d4:	51 f0       	breq	.+20     	; 0xe0ea <mmc_init+0x2e>
    e0d6:	8e e9       	ldi	r24, 0x9E	; 158
    e0d8:	97 e0       	ldi	r25, 0x07	; 7
    e0da:	a0 e0       	ldi	r26, 0x00	; 0
    e0dc:	ed b7       	in	r30, 0x3d	; 61
    e0de:	fe b7       	in	r31, 0x3e	; 62
    e0e0:	81 83       	std	Z+1, r24	; 0x01
    e0e2:	92 83       	std	Z+2, r25	; 0x02
    e0e4:	a3 83       	std	Z+3, r26	; 0x03
    e0e6:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    }
    // we only install timers once!
    if(!mmc_init_flag)
    e0ea:	80 91 c4 17 	lds	r24, 0x17C4	; 0x8017c4 <mmc_init_flag>
    e0ee:	90 91 c5 17 	lds	r25, 0x17C5	; 0x8017c5 <mmc_init_flag+0x1>
        mmc_install_timer();
    e0f2:	89 2b       	or	r24, r25
    e0f4:	09 f4       	brne	.+2      	; 0xe0f8 <mmc_init+0x3c>

    if( verbose)
    e0f6:	62 df       	rcall	.-316    	; 0xdfbc <mmc_install_timer>
    e0f8:	e1 14       	cp	r14, r1
    e0fa:	f1 04       	cpc	r15, r1
    {
#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    e0fc:	c1 f0       	breq	.+48     	; 0xe12e <mmc_init+0x72>
    e0fe:	82 e9       	ldi	r24, 0x92	; 146
    e100:	97 e0       	ldi	r25, 0x07	; 7
    e102:	a0 e0       	ldi	r26, 0x00	; 0
    e104:	ed b7       	in	r30, 0x3d	; 61
    e106:	fe b7       	in	r31, 0x3e	; 62
    e108:	81 83       	std	Z+1, r24	; 0x01
    e10a:	92 83       	std	Z+2, r25	; 0x02
    e10c:	a3 83       	std	Z+3, r26	; 0x03
    e10e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    e112:	85 eb       	ldi	r24, 0xB5	; 181
    e114:	91 e0       	ldi	r25, 0x01	; 1
    e116:	ed b7       	in	r30, 0x3d	; 61
    e118:	fe b7       	in	r31, 0x3e	; 62
    e11a:	95 83       	std	Z+5, r25	; 0x05
    e11c:	84 83       	std	Z+4, r24	; 0x04
    e11e:	81 e8       	ldi	r24, 0x81	; 129
    e120:	97 e0       	ldi	r25, 0x07	; 7
    e122:	a0 e0       	ldi	r26, 0x00	; 0
    e124:	81 83       	std	Z+1, r24	; 0x01
    e126:	92 83       	std	Z+2, r25	; 0x02
    e128:	a3 83       	std	Z+3, r26	; 0x03
    }

    rc = disk_initialize(DEV_MMC);    // aliased to mmc_disk_initialize()
    e12a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    e12e:	80 e0       	ldi	r24, 0x00	; 0
    e130:	8f da       	rcall	.-2786   	; 0xd650 <disk_initialize>
    e132:	08 2f       	mov	r16, r24

    if( rc != RES_OK  )
    e134:	10 e0       	ldi	r17, 0x00	; 0
    e136:	01 15       	cp	r16, r1
        put_rc(rc);
    e138:	11 05       	cpc	r17, r1
    e13a:	19 f0       	breq	.+6      	; 0xe142 <mmc_init+0x86>
    e13c:	c8 01       	movw	r24, r16
    e13e:	e0 d0       	rcall	.+448    	; 0xe300 <put_rc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    e140:	0e c0       	rjmp	.+28     	; 0xe15e <mmc_init+0xa2>
    e142:	40 e0       	ldi	r20, 0x00	; 0
    e144:	66 ec       	ldi	r22, 0xC6	; 198
    e146:	77 e0       	ldi	r23, 0x07	; 7
    e148:	88 e1       	ldi	r24, 0x18	; 24
    e14a:	9a e1       	ldi	r25, 0x1A	; 26
    e14c:	0e 94 e0 5a 	call	0xb5c0	; 0xb5c0 <f_mount>

    if( rc != RES_OK || verbose)
    e150:	8c 01       	movw	r16, r24
    e152:	89 2b       	or	r24, r25
    e154:	21 f4       	brne	.+8      	; 0xe15e <mmc_init+0xa2>
    e156:	e1 14       	cp	r14, r1
    e158:	f1 04       	cpc	r15, r1
        put_rc( rc );
    e15a:	09 f4       	brne	.+2      	; 0xe15e <mmc_init+0xa2>
    e15c:	40 c0       	rjmp	.+128    	; 0xe1de <mmc_init+0x122>
    e15e:	c8 01       	movw	r24, r16

    if (verbose )
    e160:	cf d0       	rcall	.+414    	; 0xe300 <put_rc>
    e162:	e1 14       	cp	r14, r1
    e164:	f1 04       	cpc	r15, r1
    {
        DWORD blksize = 0;
    e166:	d9 f1       	breq	.+118    	; 0xe1de <mmc_init+0x122>
    e168:	18 86       	std	Y+8, r1	; 0x08
    e16a:	19 86       	std	Y+9, r1	; 0x09
    e16c:	1a 86       	std	Y+10, r1	; 0x0a
        if(rc == RES_OK)
    e16e:	1b 86       	std	Y+11, r1	; 0x0b
    e170:	01 15       	cp	r16, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    e172:	11 05       	cpc	r17, r1
    e174:	51 f5       	brne	.+84     	; 0xe1ca <mmc_init+0x10e>
    e176:	ae 01       	movw	r20, r28
    e178:	48 5f       	subi	r20, 0xF8	; 248
    e17a:	5f 4f       	sbci	r21, 0xFF	; 255
    e17c:	63 e0       	ldi	r22, 0x03	; 3
            if( rc != RES_OK)
    e17e:	80 e0       	ldi	r24, 0x00	; 0
    e180:	8d da       	rcall	.-2790   	; 0xd69c <disk_ioctl>
            {
                put_rc( rc );
    e182:	8c 01       	movw	r16, r24
    e184:	00 97       	sbiw	r24, 0x00	; 0
                printf("MMC Block Size - read failed\n");
    e186:	61 f0       	breq	.+24     	; 0xe1a0 <mmc_init+0xe4>
    e188:	bb d0       	rcall	.+374    	; 0xe300 <put_rc>
    e18a:	83 e6       	ldi	r24, 0x63	; 99
    e18c:	97 e0       	ldi	r25, 0x07	; 7
    e18e:	a0 e0       	ldi	r26, 0x00	; 0
    e190:	ed b7       	in	r30, 0x3d	; 61
    e192:	fe b7       	in	r31, 0x3e	; 62
    e194:	81 83       	std	Z+1, r24	; 0x01
    e196:	92 83       	std	Z+2, r25	; 0x02
    e198:	a3 83       	std	Z+3, r26	; 0x03
    e19a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    e19e:	15 c0       	rjmp	.+42     	; 0xe1ca <mmc_init+0x10e>
    e1a0:	88 85       	ldd	r24, Y+8	; 0x08
    e1a2:	99 85       	ldd	r25, Y+9	; 0x09
    e1a4:	aa 85       	ldd	r26, Y+10	; 0x0a
    e1a6:	bb 85       	ldd	r27, Y+11	; 0x0b
    e1a8:	ed b7       	in	r30, 0x3d	; 61
    e1aa:	fe b7       	in	r31, 0x3e	; 62
    e1ac:	84 83       	std	Z+4, r24	; 0x04
    e1ae:	95 83       	std	Z+5, r25	; 0x05
    e1b0:	a6 83       	std	Z+6, r26	; 0x06
    e1b2:	b7 83       	std	Z+7, r27	; 0x07
    e1b4:	8e e4       	ldi	r24, 0x4E	; 78
    e1b6:	97 e0       	ldi	r25, 0x07	; 7
    e1b8:	a0 e0       	ldi	r26, 0x00	; 0
    e1ba:	81 83       	std	Z+1, r24	; 0x01
    e1bc:	92 83       	std	Z+2, r25	; 0x02
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    e1be:	a3 83       	std	Z+3, r26	; 0x03
    e1c0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    e1c4:	86 ec       	ldi	r24, 0xC6	; 198
            }
        }
        printf("END MMC INIT\n");
    e1c6:	97 e0       	ldi	r25, 0x07	; 7
    e1c8:	2f d1       	rcall	.+606    	; 0xe428 <fatfs_status>
    e1ca:	80 e4       	ldi	r24, 0x40	; 64
    e1cc:	97 e0       	ldi	r25, 0x07	; 7
    e1ce:	a0 e0       	ldi	r26, 0x00	; 0
    e1d0:	ed b7       	in	r30, 0x3d	; 61
    e1d2:	fe b7       	in	r31, 0x3e	; 62
    e1d4:	81 83       	std	Z+1, r24	; 0x01
    e1d6:	92 83       	std	Z+2, r25	; 0x02
    e1d8:	a3 83       	std	Z+3, r26	; 0x03
    }
    mmc_init_flag = 1;
    e1da:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    e1de:	81 e0       	ldi	r24, 0x01	; 1
    e1e0:	90 e0       	ldi	r25, 0x00	; 0
    e1e2:	90 93 c5 17 	sts	0x17C5, r25	; 0x8017c5 <mmc_init_flag+0x1>

    return( rc ) ;
}
    e1e6:	80 93 c4 17 	sts	0x17C4, r24	; 0x8017c4 <mmc_init_flag>
    e1ea:	c8 01       	movw	r24, r16
    e1ec:	2b 96       	adiw	r28, 0x0b	; 11
    e1ee:	e6 e0       	ldi	r30, 0x06	; 6
    e1f0:	0c 94 ae e4 	jmp	0x1c95c	; 0x1c95c <__epilogue_restores__+0x18>

0000e1f4 <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    e1f4:	08 95       	ret

0000e1f6 <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
    return (1);
}
    e1f6:	81 e0       	ldi	r24, 0x01	; 1
    e1f8:	90 e0       	ldi	r25, 0x00	; 0
    e1fa:	08 95       	ret

0000e1fc <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    e1fc:	80 e0       	ldi	r24, 0x00	; 0
    e1fe:	90 e0       	ldi	r25, 0x00	; 0
    e200:	08 95       	ret

0000e202 <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    e202:	0f 93       	push	r16
    e204:	1f 93       	push	r17
    e206:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    e208:	46 81       	ldd	r20, Z+6	; 0x06
    e20a:	57 81       	ldd	r21, Z+7	; 0x07
    e20c:	05 2e       	mov	r0, r21
    e20e:	00 0c       	add	r0, r0
    e210:	66 0b       	sbc	r22, r22
    e212:	77 0b       	sbc	r23, r23
    e214:	ba 01       	movw	r22, r20
    e216:	55 27       	eor	r21, r21
    e218:	44 27       	eor	r20, r20
    e21a:	84 81       	ldd	r24, Z+4	; 0x04
    e21c:	95 81       	ldd	r25, Z+5	; 0x05
    e21e:	09 2e       	mov	r0, r25
    e220:	00 0c       	add	r0, r0
    e222:	aa 0b       	sbc	r26, r26
    e224:	bb 0b       	sbc	r27, r27
    e226:	2b e0       	ldi	r18, 0x0B	; 11
    e228:	88 0f       	add	r24, r24
    e22a:	99 1f       	adc	r25, r25
    e22c:	aa 1f       	adc	r26, r26
    e22e:	bb 1f       	adc	r27, r27
    e230:	2a 95       	dec	r18
    e232:	d1 f7       	brne	.-12     	; 0xe228 <tm_to_fat+0x26>
    e234:	48 2b       	or	r20, r24
    e236:	59 2b       	or	r21, r25
    e238:	6a 2b       	or	r22, r26
    e23a:	7b 2b       	or	r23, r27
    e23c:	82 81       	ldd	r24, Z+2	; 0x02
    e23e:	93 81       	ldd	r25, Z+3	; 0x03
    e240:	09 2e       	mov	r0, r25
    e242:	00 0c       	add	r0, r0
    e244:	aa 0b       	sbc	r26, r26
    e246:	bb 0b       	sbc	r27, r27
    e248:	35 e0       	ldi	r19, 0x05	; 5
    e24a:	88 0f       	add	r24, r24
    e24c:	99 1f       	adc	r25, r25
    e24e:	aa 1f       	adc	r26, r26
    e250:	bb 1f       	adc	r27, r27
    e252:	3a 95       	dec	r19
    e254:	d1 f7       	brne	.-12     	; 0xe24a <tm_to_fat+0x48>
    e256:	48 2b       	or	r20, r24
    e258:	59 2b       	or	r21, r25
    e25a:	6a 2b       	or	r22, r26
    e25c:	7b 2b       	or	r23, r27
    e25e:	80 81       	ld	r24, Z
    e260:	91 81       	ldd	r25, Z+1	; 0x01
    e262:	09 2e       	mov	r0, r25
    e264:	00 0c       	add	r0, r0
    e266:	aa 0b       	sbc	r26, r26
    e268:	bb 0b       	sbc	r27, r27
    e26a:	b6 95       	lsr	r27
    e26c:	a7 95       	ror	r26
    e26e:	97 95       	ror	r25
    e270:	87 95       	ror	r24
    e272:	84 2b       	or	r24, r20
    e274:	95 2b       	or	r25, r21
    e276:	a6 2b       	or	r26, r22
    e278:	b7 2b       	or	r27, r23
    e27a:	02 85       	ldd	r16, Z+10	; 0x0a
    e27c:	13 85       	ldd	r17, Z+11	; 0x0b
    e27e:	00 55       	subi	r16, 0x50	; 80
    e280:	11 09       	sbc	r17, r1
    e282:	01 2e       	mov	r0, r17
    e284:	00 0c       	add	r0, r0
    e286:	22 0b       	sbc	r18, r18
    e288:	33 0b       	sbc	r19, r19
    e28a:	49 e1       	ldi	r20, 0x19	; 25
    e28c:	00 0f       	add	r16, r16
    e28e:	11 1f       	adc	r17, r17
    e290:	22 1f       	adc	r18, r18
    e292:	33 1f       	adc	r19, r19
    e294:	4a 95       	dec	r20
    e296:	d1 f7       	brne	.-12     	; 0xe28c <tm_to_fat+0x8a>
    e298:	ac 01       	movw	r20, r24
    e29a:	bd 01       	movw	r22, r26
    e29c:	40 2b       	or	r20, r16
    e29e:	51 2b       	or	r21, r17
    e2a0:	62 2b       	or	r22, r18
    e2a2:	73 2b       	or	r23, r19
    e2a4:	80 85       	ldd	r24, Z+8	; 0x08
    e2a6:	91 85       	ldd	r25, Z+9	; 0x09
    e2a8:	09 2e       	mov	r0, r25
    e2aa:	00 0c       	add	r0, r0
    e2ac:	aa 0b       	sbc	r26, r26
    e2ae:	bb 0b       	sbc	r27, r27
    e2b0:	01 96       	adiw	r24, 0x01	; 1
    e2b2:	a1 1d       	adc	r26, r1
    e2b4:	b1 1d       	adc	r27, r1
    e2b6:	e5 e1       	ldi	r30, 0x15	; 21
    e2b8:	88 0f       	add	r24, r24
    e2ba:	99 1f       	adc	r25, r25
    e2bc:	aa 1f       	adc	r26, r26
    e2be:	bb 1f       	adc	r27, r27
    e2c0:	ea 95       	dec	r30
    e2c2:	d1 f7       	brne	.-12     	; 0xe2b8 <tm_to_fat+0xb6>
    e2c4:	8a 01       	movw	r16, r20
    e2c6:	9b 01       	movw	r18, r22
    e2c8:	08 2b       	or	r16, r24
    e2ca:	19 2b       	or	r17, r25
    e2cc:	2a 2b       	or	r18, r26
    e2ce:	3b 2b       	or	r19, r27
    e2d0:	c9 01       	movw	r24, r18
    e2d2:	b8 01       	movw	r22, r16
}
    e2d4:	1f 91       	pop	r17
    e2d6:	0f 91       	pop	r16
    e2d8:	08 95       	ret

0000e2da <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    e2da:	a4 e0       	ldi	r26, 0x04	; 4
    e2dc:	b0 e0       	ldi	r27, 0x00	; 0
    e2de:	e3 e7       	ldi	r30, 0x73	; 115
    e2e0:	f1 e7       	ldi	r31, 0x71	; 113
    e2e2:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    e2e6:	ce 01       	movw	r24, r28
    e2e8:	01 96       	adiw	r24, 0x01	; 1
    e2ea:	0e 94 1d 39 	call	0x723a	; 0x723a <time>
    return( tm_to_fat(localtime(&t)));
    e2ee:	ce 01       	movw	r24, r28
    e2f0:	01 96       	adiw	r24, 0x01	; 1
    e2f2:	0e 94 b6 39 	call	0x736c	; 0x736c <localtime>
    e2f6:	85 df       	rcall	.-246    	; 0xe202 <tm_to_fat>
}
    e2f8:	24 96       	adiw	r28, 0x04	; 4
    e2fa:	e2 e0       	ldi	r30, 0x02	; 2
    e2fc:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

0000e300 <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    e300:	00 d0       	rcall	.+0      	; 0xe302 <put_rc+0x2>
    e302:	00 d0       	rcall	.+0      	; 0xe304 <put_rc+0x4>
    e304:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    e306:	ed b7       	in	r30, 0x3d	; 61
    e308:	fe b7       	in	r31, 0x3e	; 62
    e30a:	95 83       	std	Z+5, r25	; 0x05
    e30c:	84 83       	std	Z+4, r24	; 0x04
    e30e:	8b ec       	ldi	r24, 0xCB	; 203
    e310:	99 e0       	ldi	r25, 0x09	; 9
    e312:	a0 e0       	ldi	r26, 0x00	; 0
    e314:	81 83       	std	Z+1, r24	; 0x01
    e316:	92 83       	std	Z+2, r25	; 0x02
    e318:	a3 83       	std	Z+3, r26	; 0x03
    e31a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#endif
}
    e31e:	0f 90       	pop	r0
    e320:	0f 90       	pop	r0
    e322:	0f 90       	pop	r0
    e324:	0f 90       	pop	r0
    e326:	0f 90       	pop	r0
    e328:	08 95       	ret

0000e32a <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    e32a:	a4 e4       	ldi	r26, 0x44	; 68
    e32c:	b1 e0       	ldi	r27, 0x01	; 1
    e32e:	eb e9       	ldi	r30, 0x9B	; 155
    e330:	f1 e7       	ldi	r31, 0x71	; 113
    e332:	0c 94 91 e4 	jmp	0x1c922	; 0x1c922 <__prologue_saves__+0x16>
    e336:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    e338:	bc 01       	movw	r22, r24
    e33a:	ce 01       	movw	r24, r28
    e33c:	89 5e       	subi	r24, 0xE9	; 233
    e33e:	9e 4f       	sbci	r25, 0xFE	; 254
    e340:	0e 94 9c 64 	call	0xc938	; 0xc938 <f_opendir>
    if (fr == FR_OK) {
    e344:	00 97       	sbiw	r24, 0x00	; 0
    e346:	09 f0       	breq	.+2      	; 0xe34a <fatfs_scan_files+0x20>
    e348:	5b c0       	rjmp	.+182    	; 0xe400 <fatfs_scan_files+0xd6>
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
            if (info.fattrib & AM_DIR) {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e34a:	8f e2       	ldi	r24, 0x2F	; 47
    e34c:	d8 2e       	mov	r13, r24
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK) {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
    e34e:	be 01       	movw	r22, r28
    e350:	6f 5f       	subi	r22, 0xFF	; 255
    e352:	7f 4f       	sbci	r23, 0xFF	; 255
    e354:	ce 01       	movw	r24, r28
    e356:	89 5e       	subi	r24, 0xE9	; 233
    e358:	9e 4f       	sbci	r25, 0xFE	; 254
    e35a:	0e 94 22 65 	call	0xca44	; 0xca44 <f_readdir>
    e35e:	00 97       	sbiw	r24, 0x00	; 0
    e360:	09 f0       	breq	.+2      	; 0xe364 <fatfs_scan_files+0x3a>
    e362:	4e c0       	rjmp	.+156    	; 0xe400 <fatfs_scan_files+0xd6>
    e364:	2f 89       	ldd	r18, Y+23	; 0x17
    e366:	22 23       	and	r18, r18
    e368:	09 f4       	brne	.+2      	; 0xe36c <fatfs_scan_files+0x42>
    e36a:	4a c0       	rjmp	.+148    	; 0xe400 <fatfs_scan_files+0xd6>
            if (info.fattrib & AM_DIR) {
    e36c:	89 85       	ldd	r24, Y+9	; 0x09
    e36e:	84 ff       	sbrs	r24, 4
    e370:	25 c0       	rjmp	.+74     	; 0xe3bc <fatfs_scan_files+0x92>
                AccDirs++;
    e372:	80 91 51 1c 	lds	r24, 0x1C51	; 0x801c51 <AccDirs>
    e376:	90 91 52 1c 	lds	r25, 0x1C52	; 0x801c52 <AccDirs+0x1>
    e37a:	01 96       	adiw	r24, 0x01	; 1
    e37c:	90 93 52 1c 	sts	0x1C52, r25	; 0x801c52 <AccDirs+0x1>
    e380:	80 93 51 1c 	sts	0x1C51, r24	; 0x801c51 <AccDirs>
                i = strlen(path);
    e384:	f8 01       	movw	r30, r16
    e386:	01 90       	ld	r0, Z+
    e388:	00 20       	and	r0, r0
    e38a:	e9 f7       	brne	.-6      	; 0xe386 <fatfs_scan_files+0x5c>
    e38c:	31 97       	sbiw	r30, 0x01	; 1
    e38e:	e0 1b       	sub	r30, r16
    e390:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e392:	78 01       	movw	r14, r16
    e394:	ee 0e       	add	r14, r30
    e396:	ff 1e       	adc	r15, r31
    e398:	d7 01       	movw	r26, r14
    e39a:	dc 92       	st	X, r13
    e39c:	cf 01       	movw	r24, r30
    e39e:	01 96       	adiw	r24, 0x01	; 1
    e3a0:	be 01       	movw	r22, r28
    e3a2:	69 5e       	subi	r22, 0xE9	; 233
    e3a4:	7f 4f       	sbci	r23, 0xFF	; 255
    e3a6:	80 0f       	add	r24, r16
    e3a8:	91 1f       	adc	r25, r17
    e3aa:	0e 94 61 32 	call	0x64c2	; 0x64c2 <strcpy>
                fr = fatfs_scan_files(path);
    e3ae:	c8 01       	movw	r24, r16
    e3b0:	bc df       	rcall	.-136    	; 0xe32a <fatfs_scan_files>
                path[i] = 0;
    e3b2:	f7 01       	movw	r30, r14
    e3b4:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    e3b6:	00 97       	sbiw	r24, 0x00	; 0
    e3b8:	51 f2       	breq	.-108    	; 0xe34e <fatfs_scan_files+0x24>
    e3ba:	22 c0       	rjmp	.+68     	; 0xe400 <fatfs_scan_files+0xd6>
            } else {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    e3bc:	80 91 53 1c 	lds	r24, 0x1C53	; 0x801c53 <AccFiles>
    e3c0:	90 91 54 1c 	lds	r25, 0x1C54	; 0x801c54 <AccFiles+0x1>
    e3c4:	01 96       	adiw	r24, 0x01	; 1
    e3c6:	90 93 54 1c 	sts	0x1C54, r25	; 0x801c54 <AccFiles+0x1>
    e3ca:	80 93 53 1c 	sts	0x1C53, r24	; 0x801c53 <AccFiles>
                AccSize += info.fsize;
    e3ce:	40 91 4d 1c 	lds	r20, 0x1C4D	; 0x801c4d <AccSize>
    e3d2:	50 91 4e 1c 	lds	r21, 0x1C4E	; 0x801c4e <AccSize+0x1>
    e3d6:	60 91 4f 1c 	lds	r22, 0x1C4F	; 0x801c4f <AccSize+0x2>
    e3da:	70 91 50 1c 	lds	r23, 0x1C50	; 0x801c50 <AccSize+0x3>
    e3de:	89 81       	ldd	r24, Y+1	; 0x01
    e3e0:	9a 81       	ldd	r25, Y+2	; 0x02
    e3e2:	ab 81       	ldd	r26, Y+3	; 0x03
    e3e4:	bc 81       	ldd	r27, Y+4	; 0x04
    e3e6:	84 0f       	add	r24, r20
    e3e8:	95 1f       	adc	r25, r21
    e3ea:	a6 1f       	adc	r26, r22
    e3ec:	b7 1f       	adc	r27, r23
    e3ee:	80 93 4d 1c 	sts	0x1C4D, r24	; 0x801c4d <AccSize>
    e3f2:	90 93 4e 1c 	sts	0x1C4E, r25	; 0x801c4e <AccSize+0x1>
    e3f6:	a0 93 4f 1c 	sts	0x1C4F, r26	; 0x801c4f <AccSize+0x2>
    e3fa:	b0 93 50 1c 	sts	0x1C50, r27	; 0x801c50 <AccSize+0x3>
    e3fe:	a7 cf       	rjmp	.-178    	; 0xe34e <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e400:	cc 5b       	subi	r28, 0xBC	; 188
    e402:	de 4f       	sbci	r29, 0xFE	; 254
    e404:	e7 e0       	ldi	r30, 0x07	; 7
    e406:	0c 94 ad e4 	jmp	0x1c95a	; 0x1c95a <__epilogue_restores__+0x16>

0000e40a <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e40a:	01 97       	sbiw	r24, 0x01	; 1
    e40c:	84 30       	cpi	r24, 0x04	; 4
    e40e:	91 05       	cpc	r25, r1
    e410:	40 f4       	brcc	.+16     	; 0xe422 <fatfs_fstype+0x18>
    e412:	88 0f       	add	r24, r24
    e414:	99 1f       	adc	r25, r25
    e416:	fc 01       	movw	r30, r24
    e418:	e6 51       	subi	r30, 0x16	; 22
    e41a:	f8 4f       	sbci	r31, 0xF8	; 248
    e41c:	80 81       	ld	r24, Z
    e41e:	91 81       	ldd	r25, Z+1	; 0x01
    e420:	08 95       	ret
    char *ptr;
    switch(type)
    e422:	88 ec       	ldi	r24, 0xC8	; 200
    e424:	97 e0       	ldi	r25, 0x07	; 7
        default:
             ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e426:	08 95       	ret

0000e428 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    e428:	a7 e3       	ldi	r26, 0x37	; 55
    e42a:	b0 e0       	ldi	r27, 0x00	; 0
    e42c:	ea e1       	ldi	r30, 0x1A	; 26
    e42e:	f2 e7       	ldi	r31, 0x72	; 114
    e430:	0c 94 90 e4 	jmp	0x1c920	; 0x1c920 <__prologue_saves__+0x14>
    e434:	7c 01       	movw	r14, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn; // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    e436:	fc 01       	movw	r30, r24
    e438:	21 91       	ld	r18, Z+
    e43a:	cf 01       	movw	r24, r30
    e43c:	20 32       	cpi	r18, 0x20	; 32
    e43e:	d1 f3       	breq	.-12     	; 0xe434 <fatfs_status+0xc>
    e440:	29 30       	cpi	r18, 0x09	; 9
    e442:	c1 f3       	breq	.-16     	; 0xe434 <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    e444:	ed b7       	in	r30, 0x3d	; 61
    e446:	fe b7       	in	r31, 0x3e	; 62
    e448:	e4 82       	std	Z+4, r14	; 0x04
    e44a:	f5 82       	std	Z+5, r15	; 0x05
    e44c:	8a eb       	ldi	r24, 0xBA	; 186
    e44e:	99 e0       	ldi	r25, 0x09	; 9
    e450:	a0 e0       	ldi	r26, 0x00	; 0
    e452:	81 83       	std	Z+1, r24	; 0x01
    e454:	92 83       	std	Z+2, r25	; 0x02
    e456:	a3 83       	std	Z+3, r26	; 0x03
    e458:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    e45c:	ae 01       	movw	r20, r28
    e45e:	4a 5c       	subi	r20, 0xCA	; 202
    e460:	5f 4f       	sbci	r21, 0xFF	; 255
    e462:	be 01       	movw	r22, r28
    e464:	6e 5c       	subi	r22, 0xCE	; 206
    e466:	7f 4f       	sbci	r23, 0xFF	; 255
    e468:	c7 01       	movw	r24, r14
    e46a:	0e 94 a4 65 	call	0xcb48	; 0xcb48 <f_getfree>
    if (res)
    e46e:	00 97       	sbiw	r24, 0x00	; 0
    e470:	09 f0       	breq	.+2      	; 0xe474 <fatfs_status+0x4c>
    e472:	f8 c0       	rjmp	.+496    	; 0xe664 <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e474:	ee a9       	ldd	r30, Y+54	; 0x36
    e476:	ff a9       	ldd	r31, Y+55	; 0x37
    e478:	80 81       	ld	r24, Z
    e47a:	90 e0       	ldi	r25, 0x00	; 0
    e47c:	c6 df       	rcall	.-116    	; 0xe40a <fatfs_fstype>
    e47e:	ed b7       	in	r30, 0x3d	; 61
    e480:	fe b7       	in	r31, 0x3e	; 62
    e482:	95 83       	std	Z+5, r25	; 0x05
    e484:	84 83       	std	Z+4, r24	; 0x04
    e486:	8c e9       	ldi	r24, 0x9C	; 156
    e488:	99 e0       	ldi	r25, 0x09	; 9
    e48a:	a0 e0       	ldi	r26, 0x00	; 0
    e48c:	81 83       	std	Z+1, r24	; 0x01
    e48e:	92 83       	std	Z+2, r25	; 0x02
    e490:	a3 83       	std	Z+3, r26	; 0x03
    e492:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e496:	ee a9       	ldd	r30, Y+54	; 0x36
    e498:	ff a9       	ldd	r31, Y+55	; 0x37
    e49a:	81 85       	ldd	r24, Z+9	; 0x09
    e49c:	92 85       	ldd	r25, Z+10	; 0x0a
    e49e:	a0 e0       	ldi	r26, 0x00	; 0
    e4a0:	b0 e0       	ldi	r27, 0x00	; 0
    e4a2:	39 e0       	ldi	r19, 0x09	; 9
    e4a4:	88 0f       	add	r24, r24
    e4a6:	99 1f       	adc	r25, r25
    e4a8:	aa 1f       	adc	r26, r26
    e4aa:	bb 1f       	adc	r27, r27
    e4ac:	3a 95       	dec	r19
    e4ae:	d1 f7       	brne	.-12     	; 0xe4a4 <fatfs_status+0x7c>
    e4b0:	ed b7       	in	r30, 0x3d	; 61
    e4b2:	fe b7       	in	r31, 0x3e	; 62
    e4b4:	84 83       	std	Z+4, r24	; 0x04
    e4b6:	95 83       	std	Z+5, r25	; 0x05
    e4b8:	a6 83       	std	Z+6, r26	; 0x06
    e4ba:	b7 83       	std	Z+7, r27	; 0x07
    e4bc:	8d e7       	ldi	r24, 0x7D	; 125
    e4be:	99 e0       	ldi	r25, 0x09	; 9
    e4c0:	a0 e0       	ldi	r26, 0x00	; 0
    e4c2:	81 83       	std	Z+1, r24	; 0x01
    e4c4:	92 83       	std	Z+2, r25	; 0x02
    e4c6:	a3 83       	std	Z+3, r26	; 0x03
    e4c8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e4cc:	ee a9       	ldd	r30, Y+54	; 0x36
    e4ce:	ff a9       	ldd	r31, Y+55	; 0x37
    e4d0:	82 81       	ldd	r24, Z+2	; 0x02
    e4d2:	90 e0       	ldi	r25, 0x00	; 0
    e4d4:	ed b7       	in	r30, 0x3d	; 61
    e4d6:	fe b7       	in	r31, 0x3e	; 62
    e4d8:	95 83       	std	Z+5, r25	; 0x05
    e4da:	84 83       	std	Z+4, r24	; 0x04
    e4dc:	8f e5       	ldi	r24, 0x5F	; 95
    e4de:	99 e0       	ldi	r25, 0x09	; 9
    e4e0:	a0 e0       	ldi	r26, 0x00	; 0
    e4e2:	81 83       	std	Z+1, r24	; 0x01
    e4e4:	92 83       	std	Z+2, r25	; 0x02
    e4e6:	a3 83       	std	Z+3, r26	; 0x03
    e4e8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e4ec:	ee a9       	ldd	r30, Y+54	; 0x36
    e4ee:	ff a9       	ldd	r31, Y+55	; 0x37
    e4f0:	87 81       	ldd	r24, Z+7	; 0x07
    e4f2:	90 85       	ldd	r25, Z+8	; 0x08
    e4f4:	ed b7       	in	r30, 0x3d	; 61
    e4f6:	fe b7       	in	r31, 0x3e	; 62
    e4f8:	95 83       	std	Z+5, r25	; 0x05
    e4fa:	84 83       	std	Z+4, r24	; 0x04
    e4fc:	81 e4       	ldi	r24, 0x41	; 65
    e4fe:	99 e0       	ldi	r25, 0x09	; 9
    e500:	a0 e0       	ldi	r26, 0x00	; 0
    e502:	81 83       	std	Z+1, r24	; 0x01
    e504:	92 83       	std	Z+2, r25	; 0x02
    e506:	a3 83       	std	Z+3, r26	; 0x03
    e508:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e50c:	ee a9       	ldd	r30, Y+54	; 0x36
    e50e:	ff a9       	ldd	r31, Y+55	; 0x37
    e510:	85 8d       	ldd	r24, Z+29	; 0x1d
    e512:	96 8d       	ldd	r25, Z+30	; 0x1e
    e514:	a7 8d       	ldd	r26, Z+31	; 0x1f
    e516:	b0 a1       	ldd	r27, Z+32	; 0x20
    e518:	ed b7       	in	r30, 0x3d	; 61
    e51a:	fe b7       	in	r31, 0x3e	; 62
    e51c:	84 83       	std	Z+4, r24	; 0x04
    e51e:	95 83       	std	Z+5, r25	; 0x05
    e520:	a6 83       	std	Z+6, r26	; 0x06
    e522:	b7 83       	std	Z+7, r27	; 0x07
    e524:	82 e2       	ldi	r24, 0x22	; 34
    e526:	99 e0       	ldi	r25, 0x09	; 9
    e528:	a0 e0       	ldi	r26, 0x00	; 0
    e52a:	81 83       	std	Z+1, r24	; 0x01
    e52c:	92 83       	std	Z+2, r25	; 0x02
    e52e:	a3 83       	std	Z+3, r26	; 0x03
    e530:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e534:	ee a9       	ldd	r30, Y+54	; 0x36
    e536:	ff a9       	ldd	r31, Y+55	; 0x37
    e538:	81 8d       	ldd	r24, Z+25	; 0x19
    e53a:	92 8d       	ldd	r25, Z+26	; 0x1a
    e53c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e53e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e540:	02 97       	sbiw	r24, 0x02	; 2
    e542:	a1 09       	sbc	r26, r1
    e544:	b1 09       	sbc	r27, r1
    e546:	ed b7       	in	r30, 0x3d	; 61
    e548:	fe b7       	in	r31, 0x3e	; 62
    e54a:	84 83       	std	Z+4, r24	; 0x04
    e54c:	95 83       	std	Z+5, r25	; 0x05
    e54e:	a6 83       	std	Z+6, r26	; 0x06
    e550:	b7 83       	std	Z+7, r27	; 0x07
    e552:	83 e0       	ldi	r24, 0x03	; 3
    e554:	99 e0       	ldi	r25, 0x09	; 9
    e556:	a0 e0       	ldi	r26, 0x00	; 0
    e558:	81 83       	std	Z+1, r24	; 0x01
    e55a:	92 83       	std	Z+2, r25	; 0x02
    e55c:	a3 83       	std	Z+3, r26	; 0x03
    e55e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e562:	ee a9       	ldd	r30, Y+54	; 0x36
    e564:	ff a9       	ldd	r31, Y+55	; 0x37
    e566:	85 a1       	ldd	r24, Z+37	; 0x25
    e568:	96 a1       	ldd	r25, Z+38	; 0x26
    e56a:	a7 a1       	ldd	r26, Z+39	; 0x27
    e56c:	b0 a5       	ldd	r27, Z+40	; 0x28
    e56e:	ed b7       	in	r30, 0x3d	; 61
    e570:	fe b7       	in	r31, 0x3e	; 62
    e572:	84 83       	std	Z+4, r24	; 0x04
    e574:	95 83       	std	Z+5, r25	; 0x05
    e576:	a6 83       	std	Z+6, r26	; 0x06
    e578:	b7 83       	std	Z+7, r27	; 0x07
    e57a:	84 ee       	ldi	r24, 0xE4	; 228
    e57c:	98 e0       	ldi	r25, 0x08	; 8
    e57e:	a0 e0       	ldi	r26, 0x00	; 0
    e580:	81 83       	std	Z+1, r24	; 0x01
    e582:	92 83       	std	Z+2, r25	; 0x02
    e584:	a3 83       	std	Z+3, r26	; 0x03
    e586:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e58a:	ee a9       	ldd	r30, Y+54	; 0x36
    e58c:	ff a9       	ldd	r31, Y+55	; 0x37
    e58e:	81 a5       	ldd	r24, Z+41	; 0x29
    e590:	92 a5       	ldd	r25, Z+42	; 0x2a
    e592:	a3 a5       	ldd	r26, Z+43	; 0x2b
    e594:	b4 a5       	ldd	r27, Z+44	; 0x2c
    e596:	ed b7       	in	r30, 0x3d	; 61
    e598:	fe b7       	in	r31, 0x3e	; 62
    e59a:	84 83       	std	Z+4, r24	; 0x04
    e59c:	95 83       	std	Z+5, r25	; 0x05
    e59e:	a6 83       	std	Z+6, r26	; 0x06
    e5a0:	b7 83       	std	Z+7, r27	; 0x07
    e5a2:	85 ec       	ldi	r24, 0xC5	; 197
    e5a4:	98 e0       	ldi	r25, 0x08	; 8
    e5a6:	a0 e0       	ldi	r26, 0x00	; 0
    e5a8:	81 83       	std	Z+1, r24	; 0x01
    e5aa:	92 83       	std	Z+2, r25	; 0x02
    e5ac:	a3 83       	std	Z+3, r26	; 0x03
    e5ae:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e5b2:	ee a9       	ldd	r30, Y+54	; 0x36
    e5b4:	ff a9       	ldd	r31, Y+55	; 0x37
    e5b6:	85 a5       	ldd	r24, Z+45	; 0x2d
    e5b8:	96 a5       	ldd	r25, Z+46	; 0x2e
    e5ba:	a7 a5       	ldd	r26, Z+47	; 0x2f
    e5bc:	b0 a9       	ldd	r27, Z+48	; 0x30
    e5be:	ed b7       	in	r30, 0x3d	; 61
    e5c0:	fe b7       	in	r31, 0x3e	; 62
    e5c2:	84 83       	std	Z+4, r24	; 0x04
    e5c4:	95 83       	std	Z+5, r25	; 0x05
    e5c6:	a6 83       	std	Z+6, r26	; 0x06
    e5c8:	b7 83       	std	Z+7, r27	; 0x07
    e5ca:	86 ea       	ldi	r24, 0xA6	; 166
    e5cc:	98 e0       	ldi	r25, 0x08	; 8
    e5ce:	a0 e0       	ldi	r26, 0x00	; 0
    e5d0:	81 83       	std	Z+1, r24	; 0x01
    e5d2:	92 83       	std	Z+2, r25	; 0x02
    e5d4:	a3 83       	std	Z+3, r26	; 0x03
    e5d6:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e5da:	ae 01       	movw	r20, r28
    e5dc:	42 5d       	subi	r20, 0xD2	; 210
    e5de:	5f 4f       	sbci	r21, 0xFF	; 255
    e5e0:	be 01       	movw	r22, r28
    e5e2:	6c 5e       	subi	r22, 0xEC	; 236
    e5e4:	7f 4f       	sbci	r23, 0xFF	; 255
    e5e6:	c7 01       	movw	r24, r14
    e5e8:	0e 94 d6 69 	call	0xd3ac	; 0xd3ac <f_getlabel>
    if (res)
    e5ec:	00 97       	sbiw	r24, 0x00	; 0
    e5ee:	d1 f5       	brne	.+116    	; 0xe664 <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e5f0:	8c 89       	ldd	r24, Y+20	; 0x14
    e5f2:	81 11       	cpse	r24, r1
    e5f4:	03 c0       	rjmp	.+6      	; 0xe5fc <fatfs_status+0x1d4>
    e5f6:	80 ed       	ldi	r24, 0xD0	; 208
    e5f8:	97 e0       	ldi	r25, 0x07	; 7
    e5fa:	02 c0       	rjmp	.+4      	; 0xe600 <fatfs_status+0x1d8>
    e5fc:	ce 01       	movw	r24, r28
    e5fe:	44 96       	adiw	r24, 0x14	; 20
    e600:	ed b7       	in	r30, 0x3d	; 61
    e602:	fe b7       	in	r31, 0x3e	; 62
    e604:	95 83       	std	Z+5, r25	; 0x05
    e606:	84 83       	std	Z+4, r24	; 0x04
    e608:	88 e8       	ldi	r24, 0x88	; 136
    e60a:	98 e0       	ldi	r25, 0x08	; 8
    e60c:	a0 e0       	ldi	r26, 0x00	; 0
    e60e:	81 83       	std	Z+1, r24	; 0x01
    e610:	92 83       	std	Z+2, r25	; 0x02
    e612:	a3 83       	std	Z+3, r26	; 0x03
    e614:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e618:	8e a5       	ldd	r24, Y+46	; 0x2e
    e61a:	9f a5       	ldd	r25, Y+47	; 0x2f
    e61c:	a8 a9       	ldd	r26, Y+48	; 0x30
    e61e:	b9 a9       	ldd	r27, Y+49	; 0x31
    e620:	ed b7       	in	r30, 0x3d	; 61
    e622:	fe b7       	in	r31, 0x3e	; 62
    e624:	97 83       	std	Z+7, r25	; 0x07
    e626:	86 83       	std	Z+6, r24	; 0x06
    e628:	b5 83       	std	Z+5, r27	; 0x05
    e62a:	a4 83       	std	Z+4, r26	; 0x04
    e62c:	83 e6       	ldi	r24, 0x63	; 99
    e62e:	98 e0       	ldi	r25, 0x08	; 8
    e630:	a0 e0       	ldi	r26, 0x00	; 0
    e632:	81 83       	std	Z+1, r24	; 0x01
    e634:	92 83       	std	Z+2, r25	; 0x02
    e636:	a3 83       	std	Z+3, r26	; 0x03
    e638:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e63c:	10 92 52 1c 	sts	0x1C52, r1	; 0x801c52 <AccDirs+0x1>
    e640:	10 92 51 1c 	sts	0x1C51, r1	; 0x801c51 <AccDirs>
    e644:	10 92 54 1c 	sts	0x1C54, r1	; 0x801c54 <AccFiles+0x1>
    e648:	10 92 53 1c 	sts	0x1C53, r1	; 0x801c53 <AccFiles>
    e64c:	10 92 4d 1c 	sts	0x1C4D, r1	; 0x801c4d <AccSize>
    e650:	10 92 4e 1c 	sts	0x1C4E, r1	; 0x801c4e <AccSize+0x1>
    e654:	10 92 4f 1c 	sts	0x1C4F, r1	; 0x801c4f <AccSize+0x2>
    e658:	10 92 50 1c 	sts	0x1C50, r1	; 0x801c50 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    if (res)
    e65c:	c7 01       	movw	r24, r14
    {
        put_rc(res);
    e65e:	65 de       	rcall	.-822    	; 0xe32a <fatfs_scan_files>
    e660:	00 97       	sbiw	r24, 0x00	; 0
        return;
    e662:	11 f0       	breq	.+4      	; 0xe668 <fatfs_status+0x240>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e664:	4d de       	rcall	.-870    	; 0xe300 <put_rc>
    e666:	56 c0       	rjmp	.+172    	; 0xe714 <fatfs_status+0x2ec>
    e668:	0e a9       	ldd	r16, Y+54	; 0x36
    e66a:	1f a9       	ldd	r17, Y+55	; 0x37
    e66c:	f8 01       	movw	r30, r16
    e66e:	c1 84       	ldd	r12, Z+9	; 0x09
    e670:	d2 84       	ldd	r13, Z+10	; 0x0a
    e672:	e1 2c       	mov	r14, r1
    e674:	f1 2c       	mov	r15, r1
    e676:	6a a9       	ldd	r22, Y+50	; 0x32
    e678:	7b a9       	ldd	r23, Y+51	; 0x33
    e67a:	8c a9       	ldd	r24, Y+52	; 0x34
    e67c:	9d a9       	ldd	r25, Y+53	; 0x35
    e67e:	a7 01       	movw	r20, r14
    e680:	96 01       	movw	r18, r12
    e682:	0e 94 c2 e3 	call	0x1c784	; 0x1c784 <__mulsi3>
    e686:	22 e0       	ldi	r18, 0x02	; 2
    e688:	30 e0       	ldi	r19, 0x00	; 0
    e68a:	40 e0       	ldi	r20, 0x00	; 0
    e68c:	50 e0       	ldi	r21, 0x00	; 0
    e68e:	0e 94 26 e4 	call	0x1c84c	; 0x1c84c <__divmodsi4>
    e692:	ed b7       	in	r30, 0x3d	; 61
    e694:	fe b7       	in	r31, 0x3e	; 62
    e696:	20 8b       	std	Z+16, r18	; 0x10
    e698:	31 8b       	std	Z+17, r19	; 0x11
    e69a:	42 8b       	std	Z+18, r20	; 0x12
    e69c:	53 8b       	std	Z+19, r21	; 0x13
    e69e:	f8 01       	movw	r30, r16
    e6a0:	81 8d       	ldd	r24, Z+25	; 0x19
    e6a2:	92 8d       	ldd	r25, Z+26	; 0x1a
    e6a4:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e6a6:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e6a8:	9c 01       	movw	r18, r24
    e6aa:	ad 01       	movw	r20, r26
    e6ac:	22 50       	subi	r18, 0x02	; 2
    e6ae:	31 09       	sbc	r19, r1
    e6b0:	41 09       	sbc	r20, r1
    e6b2:	51 09       	sbc	r21, r1
    e6b4:	c7 01       	movw	r24, r14
    e6b6:	b6 01       	movw	r22, r12
    e6b8:	0e 94 c2 e3 	call	0x1c784	; 0x1c784 <__mulsi3>
    e6bc:	dc 01       	movw	r26, r24
    e6be:	cb 01       	movw	r24, r22
    e6c0:	b6 95       	lsr	r27
    e6c2:	a7 95       	ror	r26
    e6c4:	97 95       	ror	r25
    e6c6:	87 95       	ror	r24
    e6c8:	ed b7       	in	r30, 0x3d	; 61
    e6ca:	fe b7       	in	r31, 0x3e	; 62
    e6cc:	84 87       	std	Z+12, r24	; 0x0c
    e6ce:	95 87       	std	Z+13, r25	; 0x0d
    e6d0:	a6 87       	std	Z+14, r26	; 0x0e
    e6d2:	b7 87       	std	Z+15, r27	; 0x0f
    e6d4:	80 91 51 1c 	lds	r24, 0x1C51	; 0x801c51 <AccDirs>
    e6d8:	90 91 52 1c 	lds	r25, 0x1C52	; 0x801c52 <AccDirs+0x1>
    e6dc:	93 87       	std	Z+11, r25	; 0x0b
    e6de:	82 87       	std	Z+10, r24	; 0x0a
    e6e0:	80 91 4d 1c 	lds	r24, 0x1C4D	; 0x801c4d <AccSize>
    e6e4:	90 91 4e 1c 	lds	r25, 0x1C4E	; 0x801c4e <AccSize+0x1>
    e6e8:	a0 91 4f 1c 	lds	r26, 0x1C4F	; 0x801c4f <AccSize+0x2>
    e6ec:	b0 91 50 1c 	lds	r27, 0x1C50	; 0x801c50 <AccSize+0x3>
    e6f0:	86 83       	std	Z+6, r24	; 0x06
    e6f2:	97 83       	std	Z+7, r25	; 0x07
    e6f4:	a0 87       	std	Z+8, r26	; 0x08
    e6f6:	b1 87       	std	Z+9, r27	; 0x09
    e6f8:	80 91 53 1c 	lds	r24, 0x1C53	; 0x801c53 <AccFiles>
    e6fc:	90 91 54 1c 	lds	r25, 0x1C54	; 0x801c54 <AccFiles+0x1>
    e700:	95 83       	std	Z+5, r25	; 0x05
    e702:	84 83       	std	Z+4, r24	; 0x04
    e704:	86 e1       	ldi	r24, 0x16	; 22
    e706:	98 e0       	ldi	r25, 0x08	; 8
    e708:	a0 e0       	ldi	r26, 0x00	; 0
    e70a:	81 83       	std	Z+1, r24	; 0x01
    e70c:	92 83       	std	Z+2, r25	; 0x02
    e70e:	a3 83       	std	Z+3, r26	; 0x03
                 "%lu KB total disk space.\n%lu KB available.\n",
            AccFiles, AccSize, AccDirs,
            (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
    );

}
    e710:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    e714:	e7 96       	adiw	r28, 0x37	; 55
    e716:	e8 e0       	ldi	r30, 0x08	; 8
    e718:	0c 94 ac e4 	jmp	0x1c958	; 0x1c958 <__epilogue_restores__+0x14>

0000e71c <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e71c:	ab e1       	ldi	r26, 0x1B	; 27
    e71e:	b0 e0       	ldi	r27, 0x00	; 0
    e720:	e4 e9       	ldi	r30, 0x94	; 148
    e722:	f3 e7       	ldi	r31, 0x73	; 115
    e724:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
    e728:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e72a:	fc 01       	movw	r30, r24
    e72c:	86 89       	ldd	r24, Z+22	; 0x16
    e72e:	81 11       	cpse	r24, r1
    e730:	03 c0       	rjmp	.+6      	; 0xe738 <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e732:	8b ef       	ldi	r24, 0xFB	; 251
    e734:	97 e0       	ldi	r25, 0x07	; 7
    e736:	69 c0       	rjmp	.+210    	; 0xe80a <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e738:	fd 01       	movw	r30, r26
    e73a:	80 85       	ldd	r24, Z+8	; 0x08
    e73c:	84 fd       	sbrc	r24, 4
    e73e:	02 c0       	rjmp	.+4      	; 0xe744 <fatfs_filinfo_list+0x28>
    e740:	9d e2       	ldi	r25, 0x2D	; 45
    e742:	01 c0       	rjmp	.+2      	; 0xe746 <fatfs_filinfo_list+0x2a>
    e744:	94 e4       	ldi	r25, 0x44	; 68
    e746:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e748:	80 fd       	sbrc	r24, 0
    e74a:	02 c0       	rjmp	.+4      	; 0xe750 <fatfs_filinfo_list+0x34>
    e74c:	9d e2       	ldi	r25, 0x2D	; 45
    e74e:	01 c0       	rjmp	.+2      	; 0xe752 <fatfs_filinfo_list+0x36>
    e750:	92 e5       	ldi	r25, 0x52	; 82
    e752:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e754:	81 fd       	sbrc	r24, 1
    e756:	02 c0       	rjmp	.+4      	; 0xe75c <fatfs_filinfo_list+0x40>
    e758:	9d e2       	ldi	r25, 0x2D	; 45
    e75a:	01 c0       	rjmp	.+2      	; 0xe75e <fatfs_filinfo_list+0x42>
    e75c:	98 e4       	ldi	r25, 0x48	; 72
    e75e:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e760:	82 fd       	sbrc	r24, 2
    e762:	02 c0       	rjmp	.+4      	; 0xe768 <fatfs_filinfo_list+0x4c>
    e764:	9d e2       	ldi	r25, 0x2D	; 45
    e766:	01 c0       	rjmp	.+2      	; 0xe76a <fatfs_filinfo_list+0x4e>
    e768:	93 e5       	ldi	r25, 0x53	; 83
    e76a:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e76c:	85 fd       	sbrc	r24, 5
    e76e:	02 c0       	rjmp	.+4      	; 0xe774 <fatfs_filinfo_list+0x58>
    e770:	8d e2       	ldi	r24, 0x2D	; 45
    e772:	01 c0       	rjmp	.+2      	; 0xe776 <fatfs_filinfo_list+0x5a>
    e774:	81 e4       	ldi	r24, 0x41	; 65
    e776:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e778:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e77a:	fd 01       	movw	r30, r26
    e77c:	24 81       	ldd	r18, Z+4	; 0x04
    e77e:	35 81       	ldd	r19, Z+5	; 0x05
    e780:	46 81       	ldd	r20, Z+6	; 0x06
    e782:	57 81       	ldd	r21, Z+7	; 0x07
    e784:	cd 01       	movw	r24, r26
    e786:	46 96       	adiw	r24, 0x16	; 22
    e788:	ed b7       	in	r30, 0x3d	; 61
    e78a:	fe b7       	in	r31, 0x3e	; 62
    e78c:	95 8b       	std	Z+21, r25	; 0x15
    e78e:	84 8b       	std	Z+20, r24	; 0x14
    e790:	8d 91       	ld	r24, X+
    e792:	9d 91       	ld	r25, X+
    e794:	0d 90       	ld	r0, X+
    e796:	bc 91       	ld	r27, X
    e798:	a0 2d       	mov	r26, r0
    e79a:	80 8b       	std	Z+16, r24	; 0x10
    e79c:	91 8b       	std	Z+17, r25	; 0x11
    e79e:	a2 8b       	std	Z+18, r26	; 0x12
    e7a0:	b3 8b       	std	Z+19, r27	; 0x13
    e7a2:	ca 01       	movw	r24, r20
    e7a4:	45 e0       	ldi	r20, 0x05	; 5
    e7a6:	96 95       	lsr	r25
    e7a8:	87 95       	ror	r24
    e7aa:	4a 95       	dec	r20
    e7ac:	e1 f7       	brne	.-8      	; 0xe7a6 <fatfs_filinfo_list+0x8a>
    e7ae:	8f 73       	andi	r24, 0x3F	; 63
    e7b0:	99 27       	eor	r25, r25
    e7b2:	97 87       	std	Z+15, r25	; 0x0f
    e7b4:	86 87       	std	Z+14, r24	; 0x0e
    e7b6:	85 2f       	mov	r24, r21
    e7b8:	86 95       	lsr	r24
    e7ba:	86 95       	lsr	r24
    e7bc:	86 95       	lsr	r24
    e7be:	84 87       	std	Z+12, r24	; 0x0c
    e7c0:	15 86       	std	Z+13, r1	; 0x0d
    e7c2:	c9 01       	movw	r24, r18
    e7c4:	8f 71       	andi	r24, 0x1F	; 31
    e7c6:	99 27       	eor	r25, r25
    e7c8:	93 87       	std	Z+11, r25	; 0x0b
    e7ca:	82 87       	std	Z+10, r24	; 0x0a
    e7cc:	c9 01       	movw	r24, r18
    e7ce:	55 e0       	ldi	r21, 0x05	; 5
    e7d0:	96 95       	lsr	r25
    e7d2:	87 95       	ror	r24
    e7d4:	5a 95       	dec	r21
    e7d6:	e1 f7       	brne	.-8      	; 0xe7d0 <fatfs_filinfo_list+0xb4>
    e7d8:	8f 70       	andi	r24, 0x0F	; 15
    e7da:	99 27       	eor	r25, r25
    e7dc:	91 87       	std	Z+9, r25	; 0x09
    e7de:	80 87       	std	Z+8, r24	; 0x08
    e7e0:	23 2f       	mov	r18, r19
    e7e2:	33 27       	eor	r19, r19
    e7e4:	26 95       	lsr	r18
    e7e6:	24 54       	subi	r18, 0x44	; 68
    e7e8:	38 4f       	sbci	r19, 0xF8	; 248
    e7ea:	37 83       	std	Z+7, r19	; 0x07
    e7ec:	26 83       	std	Z+6, r18	; 0x06
    e7ee:	ce 01       	movw	r24, r28
    e7f0:	46 96       	adiw	r24, 0x16	; 22
    e7f2:	95 83       	std	Z+5, r25	; 0x05
    e7f4:	84 83       	std	Z+4, r24	; 0x04
    e7f6:	89 ed       	ldi	r24, 0xD9	; 217
    e7f8:	97 e0       	ldi	r25, 0x07	; 7
    e7fa:	a0 e0       	ldi	r26, 0x00	; 0
    e7fc:	81 83       	std	Z+1, r24	; 0x01
    e7fe:	92 83       	std	Z+2, r25	; 0x02
    e800:	a3 83       	std	Z+3, r26	; 0x03
    e802:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e806:	87 ed       	ldi	r24, 0xD7	; 215
    e808:	97 e0       	ldi	r25, 0x07	; 7
    e80a:	a0 e0       	ldi	r26, 0x00	; 0
    e80c:	ed b7       	in	r30, 0x3d	; 61
    e80e:	fe b7       	in	r31, 0x3e	; 62
    e810:	81 83       	std	Z+1, r24	; 0x01
    e812:	92 83       	std	Z+2, r25	; 0x02
    e814:	a3 83       	std	Z+3, r26	; 0x03
    e816:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
}
    e81a:	6b 96       	adiw	r28, 0x1b	; 27
    e81c:	e2 e0       	ldi	r30, 0x02	; 2
    e81e:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

0000e822 <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e822:	cf 93       	push	r28
    e824:	df 93       	push	r29
    e826:	00 d0       	rcall	.+0      	; 0xe828 <fatfs_help+0x6>
    e828:	1f 92       	push	r1
    e82a:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    e82c:	8c e1       	ldi	r24, 0x1C	; 28
    e82e:	9b e0       	ldi	r25, 0x0B	; 11
    e830:	a0 e0       	ldi	r26, 0x00	; 0
    e832:	ed b7       	in	r30, 0x3d	; 61
    e834:	fe b7       	in	r31, 0x3e	; 62
    e836:	81 83       	std	Z+1, r24	; 0x01
    e838:	92 83       	std	Z+2, r25	; 0x02
    e83a:	a3 83       	std	Z+3, r26	; 0x03
    e83c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    
    if(full)
    e840:	cd 2b       	or	r28, r29
    e842:	51 f0       	breq	.+20     	; 0xe858 <fatfs_help+0x36>
    {
        printf(
    e844:	80 ea       	ldi	r24, 0xA0	; 160
    e846:	9a e0       	ldi	r25, 0x0A	; 10
    e848:	a0 e0       	ldi	r26, 0x00	; 0
    e84a:	ed b7       	in	r30, 0x3d	; 61
    e84c:	fe b7       	in	r31, 0x3e	; 62
    e84e:	81 83       	std	Z+1, r24	; 0x01
    e850:	92 83       	std	Z+2, r25	; 0x02
    e852:	a3 83       	std	Z+3, r26	; 0x03
    e854:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#endif
        "\n"
        );
    }
        
}
    e858:	cd b7       	in	r28, 0x3d	; 61
    e85a:	de b7       	in	r29, 0x3e	; 62
    e85c:	23 96       	adiw	r28, 0x03	; 3
    e85e:	e2 e0       	ldi	r30, 0x02	; 2
    e860:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

0000e864 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    e864:	a5 e5       	ldi	r26, 0x55	; 85
    e866:	b2 e0       	ldi	r27, 0x02	; 2
    e868:	e8 e3       	ldi	r30, 0x38	; 56
    e86a:	f4 e7       	ldi	r31, 0x74	; 116
    e86c:	0c 94 90 e4 	jmp	0x1c920	; 0x1c920 <__prologue_saves__+0x14>
    e870:	8e 01       	movw	r16, r28
    e872:	0e 5d       	subi	r16, 0xDE	; 222
    e874:	1e 4f       	sbci	r17, 0xFE	; 254
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[256]; 

    if(!name || !*name)
    e876:	00 97       	sbiw	r24, 0x00	; 0
    e878:	21 f0       	breq	.+8      	; 0xe882 <fatfs_ls+0x1e>
    e87a:	fc 01       	movw	r30, r24
    e87c:	20 81       	ld	r18, Z
    e87e:	21 11       	cpse	r18, r1
    e880:	03 c0       	rjmp	.+6      	; 0xe888 <fatfs_ls+0x24>
    {
        strcpy(buff,".");
    e882:	6d e0       	ldi	r22, 0x0D	; 13
    e884:	72 e1       	ldi	r23, 0x12	; 18
    e886:	01 c0       	rjmp	.+2      	; 0xe88a <fatfs_ls+0x26>
    }
    else
    {
        strcpy(buff,name);
    e888:	bc 01       	movw	r22, r24
    e88a:	c8 01       	movw	r24, r16
    e88c:	0e 94 61 32 	call	0x64c2	; 0x64c2 <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e890:	ed b7       	in	r30, 0x3d	; 61
    e892:	fe b7       	in	r31, 0x3e	; 62
    e894:	15 83       	std	Z+5, r17	; 0x05
    e896:	04 83       	std	Z+4, r16	; 0x04
    e898:	80 e1       	ldi	r24, 0x10	; 16
    e89a:	9a e0       	ldi	r25, 0x0A	; 10
    e89c:	a0 e0       	ldi	r26, 0x00	; 0
    e89e:	81 83       	std	Z+1, r24	; 0x01
    e8a0:	92 83       	std	Z+2, r25	; 0x02
    e8a2:	a3 83       	std	Z+3, r26	; 0x03
    e8a4:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

    res = f_opendir(&dirs, buff);
    e8a8:	b8 01       	movw	r22, r16
    e8aa:	ce 01       	movw	r24, r28
    e8ac:	8e 5d       	subi	r24, 0xDE	; 222
    e8ae:	9d 4f       	sbci	r25, 0xFD	; 253
    e8b0:	0e 94 9c 64 	call	0xc938	; 0xc938 <f_opendir>
    if (res) { put_rc(res); return; }
    e8b4:	00 97       	sbiw	r24, 0x00	; 0
    e8b6:	11 f0       	breq	.+4      	; 0xe8bc <fatfs_ls+0x58>
    e8b8:	23 dd       	rcall	.-1466   	; 0xe300 <put_rc>
    p1 = s1 = s2 = 0;
    e8ba:	8a c0       	rjmp	.+276    	; 0xe9d0 <fatfs_ls+0x16c>
    e8bc:	c0 5b       	subi	r28, 0xB0	; 176
    e8be:	dd 4f       	sbci	r29, 0xFD	; 253
    e8c0:	18 82       	st	Y, r1
    e8c2:	19 82       	std	Y+1, r1	; 0x01
    e8c4:	1a 82       	std	Y+2, r1	; 0x02
    e8c6:	1b 82       	std	Y+3, r1	; 0x03
    e8c8:	c0 55       	subi	r28, 0x50	; 80
    e8ca:	d2 40       	sbci	r29, 0x02	; 2
    e8cc:	c1 2c       	mov	r12, r1
    e8ce:	d1 2c       	mov	r13, r1
    e8d0:	e1 2c       	mov	r14, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e8d2:	f1 2c       	mov	r15, r1
    e8d4:	be 01       	movw	r22, r28
    e8d6:	64 5f       	subi	r22, 0xF4	; 244
    e8d8:	7f 4f       	sbci	r23, 0xFF	; 255
    e8da:	ce 01       	movw	r24, r28
    e8dc:	8e 5d       	subi	r24, 0xDE	; 222
    e8de:	9d 4f       	sbci	r25, 0xFD	; 253
    e8e0:	0e 94 22 65 	call	0xca44	; 0xca44 <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    e8e4:	89 2b       	or	r24, r25
    e8e6:	49 f5       	brne	.+82     	; 0xe93a <fatfs_ls+0xd6>
    e8e8:	8a a1       	ldd	r24, Y+34	; 0x22
    e8ea:	88 23       	and	r24, r24
        if (fno.fattrib & AM_DIR)
    e8ec:	31 f1       	breq	.+76     	; 0xe93a <fatfs_ls+0xd6>
    e8ee:	8c 89       	ldd	r24, Y+20	; 0x14
    e8f0:	84 ff       	sbrs	r24, 4
        {
            s2++;
    e8f2:	04 c0       	rjmp	.+8      	; 0xe8fc <fatfs_ls+0x98>
    e8f4:	ff ef       	ldi	r31, 0xFF	; 255
    e8f6:	cf 1a       	sub	r12, r31
    e8f8:	df 0a       	sbc	r13, r31
        }
        else
        {
            s1++; p1 += fno.fsize;
    e8fa:	1b c0       	rjmp	.+54     	; 0xe932 <fatfs_ls+0xce>
    e8fc:	8f ef       	ldi	r24, 0xFF	; 255
    e8fe:	e8 1a       	sub	r14, r24
    e900:	f8 0a       	sbc	r15, r24
    e902:	4c 85       	ldd	r20, Y+12	; 0x0c
    e904:	5d 85       	ldd	r21, Y+13	; 0x0d
    e906:	6e 85       	ldd	r22, Y+14	; 0x0e
    e908:	7f 85       	ldd	r23, Y+15	; 0x0f
    e90a:	c0 5b       	subi	r28, 0xB0	; 176
    e90c:	dd 4f       	sbci	r29, 0xFD	; 253
    e90e:	88 81       	ld	r24, Y
    e910:	99 81       	ldd	r25, Y+1	; 0x01
    e912:	aa 81       	ldd	r26, Y+2	; 0x02
    e914:	bb 81       	ldd	r27, Y+3	; 0x03
    e916:	c0 55       	subi	r28, 0x50	; 80
    e918:	d2 40       	sbci	r29, 0x02	; 2
    e91a:	84 0f       	add	r24, r20
    e91c:	95 1f       	adc	r25, r21
    e91e:	a6 1f       	adc	r26, r22
    e920:	b7 1f       	adc	r27, r23
    e922:	c0 5b       	subi	r28, 0xB0	; 176
    e924:	dd 4f       	sbci	r29, 0xFD	; 253
    e926:	88 83       	st	Y, r24
    e928:	99 83       	std	Y+1, r25	; 0x01
    e92a:	aa 83       	std	Y+2, r26	; 0x02
    e92c:	bb 83       	std	Y+3, r27	; 0x03
    e92e:	c0 55       	subi	r28, 0x50	; 80
        }
        fatfs_filinfo_list(&fno);
    e930:	d2 40       	sbci	r29, 0x02	; 2
    e932:	ce 01       	movw	r24, r28
    e934:	0c 96       	adiw	r24, 0x0c	; 12
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e936:	f2 de       	rcall	.-540    	; 0xe71c <fatfs_filinfo_list>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e938:	cd cf       	rjmp	.-102    	; 0xe8d4 <fatfs_ls+0x70>
    e93a:	ed b7       	in	r30, 0x3d	; 61
    e93c:	fe b7       	in	r31, 0x3e	; 62
    e93e:	d3 86       	std	Z+11, r13	; 0x0b
    e940:	c2 86       	std	Z+10, r12	; 0x0a
    e942:	c0 5b       	subi	r28, 0xB0	; 176
    e944:	dd 4f       	sbci	r29, 0xFD	; 253
    e946:	88 81       	ld	r24, Y
    e948:	99 81       	ldd	r25, Y+1	; 0x01
    e94a:	aa 81       	ldd	r26, Y+2	; 0x02
    e94c:	bb 81       	ldd	r27, Y+3	; 0x03
    e94e:	c0 55       	subi	r28, 0x50	; 80
    e950:	d2 40       	sbci	r29, 0x02	; 2
    e952:	86 83       	std	Z+6, r24	; 0x06
    e954:	97 83       	std	Z+7, r25	; 0x07
    e956:	a0 87       	std	Z+8, r26	; 0x08
    e958:	b1 87       	std	Z+9, r27	; 0x09
    e95a:	f5 82       	std	Z+5, r15	; 0x05
    e95c:	e4 82       	std	Z+4, r14	; 0x04
    e95e:	87 ee       	ldi	r24, 0xE7	; 231
    e960:	99 e0       	ldi	r25, 0x09	; 9
    e962:	a0 e0       	ldi	r26, 0x00	; 0
    e964:	81 83       	std	Z+1, r24	; 0x01
    e966:	92 83       	std	Z+2, r25	; 0x02
    e968:	a3 83       	std	Z+3, r26	; 0x03
    e96a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e96e:	ae 01       	movw	r20, r28
    e970:	4c 5a       	subi	r20, 0xAC	; 172
    e972:	5d 4f       	sbci	r21, 0xFD	; 253
    e974:	be 01       	movw	r22, r28
    e976:	60 5b       	subi	r22, 0xB0	; 176
    e978:	7d 4f       	sbci	r23, 0xFD	; 253
    e97a:	c8 01       	movw	r24, r16
    e97c:	0e 94 a4 65 	call	0xcb48	; 0xcb48 <f_getfree>
    e980:	89 2b       	or	r24, r25
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e982:	31 f5       	brne	.+76     	; 0xe9d0 <fatfs_ls+0x16c>
    e984:	cc 5a       	subi	r28, 0xAC	; 172
    e986:	dd 4f       	sbci	r29, 0xFD	; 253
    e988:	e8 81       	ld	r30, Y
    e98a:	f9 81       	ldd	r31, Y+1	; 0x01
    e98c:	c4 55       	subi	r28, 0x54	; 84
    e98e:	d2 40       	sbci	r29, 0x02	; 2
    e990:	a1 85       	ldd	r26, Z+9	; 0x09
    e992:	b2 85       	ldd	r27, Z+10	; 0x0a
    e994:	c0 5b       	subi	r28, 0xB0	; 176
    e996:	dd 4f       	sbci	r29, 0xFD	; 253
    e998:	28 81       	ld	r18, Y
    e99a:	39 81       	ldd	r19, Y+1	; 0x01
    e99c:	4a 81       	ldd	r20, Y+2	; 0x02
    e99e:	5b 81       	ldd	r21, Y+3	; 0x03
    e9a0:	c0 55       	subi	r28, 0x50	; 80
    e9a2:	d2 40       	sbci	r29, 0x02	; 2
    e9a4:	0e 94 66 e4 	call	0x1c8cc	; 0x1c8cc <__muluhisi3>
    e9a8:	22 e0       	ldi	r18, 0x02	; 2
    e9aa:	30 e0       	ldi	r19, 0x00	; 0
    e9ac:	40 e0       	ldi	r20, 0x00	; 0
    e9ae:	50 e0       	ldi	r21, 0x00	; 0
    e9b0:	0e 94 26 e4 	call	0x1c84c	; 0x1c84c <__divmodsi4>
    e9b4:	ed b7       	in	r30, 0x3d	; 61
    e9b6:	fe b7       	in	r31, 0x3e	; 62
    e9b8:	24 83       	std	Z+4, r18	; 0x04
    e9ba:	35 83       	std	Z+5, r19	; 0x05
    e9bc:	46 83       	std	Z+6, r20	; 0x06
    e9be:	57 83       	std	Z+7, r21	; 0x07
    e9c0:	82 ed       	ldi	r24, 0xD2	; 210
    e9c2:	99 e0       	ldi	r25, 0x09	; 9
    e9c4:	a0 e0       	ldi	r26, 0x00	; 0
    e9c6:	81 83       	std	Z+1, r24	; 0x01
    e9c8:	92 83       	std	Z+2, r25	; 0x02
    e9ca:	a3 83       	std	Z+3, r26	; 0x03
    e9cc:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
}
    e9d0:	cb 5a       	subi	r28, 0xAB	; 171
    e9d2:	dd 4f       	sbci	r29, 0xFD	; 253
    e9d4:	e8 e0       	ldi	r30, 0x08	; 8
    e9d6:	0c 94 ac e4 	jmp	0x1c958	; 0x1c958 <__epilogue_restores__+0x14>

0000e9da <mmc_test>:
/// - Assumes the device is formatted
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    e9da:	00 d0       	rcall	.+0      	; 0xe9dc <mmc_test+0x2>
    e9dc:	1f 92       	push	r1
    printf("==============================\n");
    e9de:	80 e7       	ldi	r24, 0x70	; 112
    e9e0:	9a e0       	ldi	r25, 0x0A	; 10
    e9e2:	a0 e0       	ldi	r26, 0x00	; 0
    e9e4:	ed b7       	in	r30, 0x3d	; 61
    e9e6:	fe b7       	in	r31, 0x3e	; 62
    e9e8:	81 83       	std	Z+1, r24	; 0x01
    e9ea:	92 83       	std	Z+2, r25	; 0x02
    e9ec:	a3 83       	std	Z+3, r26	; 0x03
    e9ee:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("START MMC TEST\n");
    e9f2:	80 e6       	ldi	r24, 0x60	; 96
    e9f4:	9a e0       	ldi	r25, 0x0A	; 10
    e9f6:	a0 e0       	ldi	r26, 0x00	; 0
    e9f8:	ed b7       	in	r30, 0x3d	; 61
    e9fa:	fe b7       	in	r31, 0x3e	; 62
    e9fc:	81 83       	std	Z+1, r24	; 0x01
    e9fe:	92 83       	std	Z+2, r25	; 0x02
    ea00:	a3 83       	std	Z+3, r26	; 0x03
    ea02:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    fatfs_status("/");
    ea06:	86 ec       	ldi	r24, 0xC6	; 198
    ea08:	97 e0       	ldi	r25, 0x07	; 7
    ea0a:	0e dd       	rcall	.-1508   	; 0xe428 <fatfs_status>
    printf("MMC Directory List\n");
    ea0c:	8c e4       	ldi	r24, 0x4C	; 76
    ea0e:	9a e0       	ldi	r25, 0x0A	; 10
    ea10:	a0 e0       	ldi	r26, 0x00	; 0
    ea12:	ed b7       	in	r30, 0x3d	; 61
    ea14:	fe b7       	in	r31, 0x3e	; 62
    ea16:	81 83       	std	Z+1, r24	; 0x01
    ea18:	92 83       	std	Z+2, r25	; 0x02
    ea1a:	a3 83       	std	Z+3, r26	; 0x03
    ea1c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    fatfs_ls("/");
    ea20:	86 ec       	ldi	r24, 0xC6	; 198
    ea22:	97 e0       	ldi	r25, 0x07	; 7
    ea24:	1f df       	rcall	.-450    	; 0xe864 <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    ea26:	8e e3       	ldi	r24, 0x3E	; 62
    ea28:	9a e0       	ldi	r25, 0x0A	; 10
    ea2a:	a0 e0       	ldi	r26, 0x00	; 0
    ea2c:	ed b7       	in	r30, 0x3d	; 61
    ea2e:	fe b7       	in	r31, 0x3e	; 62
    ea30:	81 83       	std	Z+1, r24	; 0x01
    ea32:	92 83       	std	Z+2, r25	; 0x02
    ea34:	a3 83       	std	Z+3, r26	; 0x03
    ea36:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("==============================\n");
    ea3a:	8e e1       	ldi	r24, 0x1E	; 30
    ea3c:	9a e0       	ldi	r25, 0x0A	; 10
    ea3e:	a0 e0       	ldi	r26, 0x00	; 0
    ea40:	ed b7       	in	r30, 0x3d	; 61
    ea42:	fe b7       	in	r31, 0x3e	; 62
    ea44:	81 83       	std	Z+1, r24	; 0x01
    ea46:	92 83       	std	Z+2, r25	; 0x02
    ea48:	a3 83       	std	Z+3, r26	; 0x03
    ea4a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
}
    ea4e:	0f 90       	pop	r0
    ea50:	0f 90       	pop	r0
    ea52:	0f 90       	pop	r0
    ea54:	08 95       	ret

0000ea56 <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    ea56:	ef 92       	push	r14
    ea58:	ff 92       	push	r15
    ea5a:	0f 93       	push	r16
    ea5c:	1f 93       	push	r17
    ea5e:	cf 93       	push	r28
    ea60:	df 93       	push	r29
    ea62:	ad b7       	in	r26, 0x3d	; 61
    ea64:	be b7       	in	r27, 0x3e	; 62
    ea66:	17 97       	sbiw	r26, 0x07	; 7
    ea68:	0f b6       	in	r0, 0x3f	; 63
    ea6a:	f8 94       	cli
    ea6c:	be bf       	out	0x3e, r27	; 62
    ea6e:	0f be       	out	0x3f, r0	; 63
    ea70:	ad bf       	out	0x3d, r26	; 61
    char *ptr;
    int ind;


    ind = 0;
    ptr = argv[ind++];
    ea72:	fb 01       	movw	r30, r22
    ea74:	20 81       	ld	r18, Z
    ea76:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    ea78:	21 15       	cp	r18, r1
    ea7a:	31 05       	cpc	r19, r1
    ea7c:	19 f4       	brne	.+6      	; 0xea84 <fatfs_tests+0x2e>
        return(0);
    ea7e:	80 e0       	ldi	r24, 0x00	; 0
    ea80:	90 e0       	ldi	r25, 0x00	; 0
    ea82:	73 c0       	rjmp	.+230    	; 0xeb6a <fatfs_tests+0x114>
    ea84:	eb 01       	movw	r28, r22
    ea86:	8c 01       	movw	r16, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    ea88:	62 ef       	ldi	r22, 0xF2	; 242
    ea8a:	77 e0       	ldi	r23, 0x07	; 7
    ea8c:	c9 01       	movw	r24, r18
    ea8e:	0e 94 59 33 	call	0x66b2	; 0x66b2 <MATCH>
    ea92:	89 2b       	or	r24, r25
    ea94:	a1 f3       	breq	.-24     	; 0xea7e <fatfs_tests+0x28>
    {
        ptr = argv[ind++];
    ea96:	ea 80       	ldd	r14, Y+2	; 0x02
    ea98:	fb 80       	ldd	r15, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    ea9a:	e1 14       	cp	r14, r1
    ea9c:	f1 04       	cpc	r15, r1
    ea9e:	21 f4       	brne	.+8      	; 0xeaa8 <fatfs_tests+0x52>
        {
            fatfs_help(1);
    eaa0:	81 e0       	ldi	r24, 0x01	; 1
    eaa2:	90 e0       	ldi	r25, 0x00	; 0
    eaa4:	be de       	rcall	.-644    	; 0xe822 <fatfs_help>
    eaa6:	5f c0       	rjmp	.+190    	; 0xeb66 <fatfs_tests+0x110>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    eaa8:	6e eb       	ldi	r22, 0xBE	; 190
    eaaa:	75 e1       	ldi	r23, 0x15	; 21
    eaac:	c7 01       	movw	r24, r14
    eaae:	0e 94 59 33 	call	0x66b2	; 0x66b2 <MATCH>
    eab2:	89 2b       	or	r24, r25
    eab4:	a9 f7       	brne	.-22     	; 0xeaa0 <fatfs_tests+0x4a>
    {
        return(0);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    eab6:	98 01       	movw	r18, r16
    eab8:	42 e0       	ldi	r20, 0x02	; 2
    eaba:	50 e0       	ldi	r21, 0x00	; 0
    eabc:	68 ef       	ldi	r22, 0xF8	; 248
    eabe:	77 e0       	ldi	r23, 0x07	; 7
    eac0:	c7 01       	movw	r24, r14
    eac2:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
    eac6:	89 2b       	or	r24, r25
    eac8:	31 f1       	breq	.+76     	; 0xeb16 <fatfs_tests+0xc0>
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
    eaca:	ed b7       	in	r30, 0x3d	; 61
    eacc:	fe b7       	in	r31, 0x3e	; 62
    eace:	17 83       	std	Z+7, r17	; 0x07
    ead0:	06 83       	std	Z+6, r16	; 0x06
    ead2:	82 e0       	ldi	r24, 0x02	; 2
    ead4:	90 e0       	ldi	r25, 0x00	; 0
    ead6:	95 83       	std	Z+5, r25	; 0x05
    ead8:	84 83       	std	Z+4, r24	; 0x04
    eada:	80 e9       	ldi	r24, 0x90	; 144
    eadc:	9a e0       	ldi	r25, 0x0A	; 10
    eade:	a0 e0       	ldi	r26, 0x00	; 0
    eae0:	81 83       	std	Z+1, r24	; 0x01
    eae2:	92 83       	std	Z+2, r25	; 0x02
    eae4:	a3 83       	std	Z+3, r26	; 0x03
    eae6:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    eaea:	7e 01       	movw	r14, r28
    eaec:	f4 e0       	ldi	r31, 0x04	; 4
    eaee:	ef 0e       	add	r14, r31
    eaf0:	f1 1c       	adc	r15, r1
        for(i=ind;i<argc;++i)
    eaf2:	c2 e0       	ldi	r28, 0x02	; 2
    eaf4:	d0 e0       	ldi	r29, 0x00	; 0
    eaf6:	c0 17       	cp	r28, r16
    eaf8:	d1 07       	cpc	r29, r17
    eafa:	3c f4       	brge	.+14     	; 0xeb0a <fatfs_tests+0xb4>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    eafc:	f7 01       	movw	r30, r14
    eafe:	81 91       	ld	r24, Z+
    eb00:	91 91       	ld	r25, Z+
    eb02:	7f 01       	movw	r14, r30
    eb04:	af de       	rcall	.-674    	; 0xe864 <fatfs_ls>
    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    eb06:	21 96       	adiw	r28, 0x01	; 1
    eb08:	f6 cf       	rjmp	.-20     	; 0xeaf6 <fatfs_tests+0xa0>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    eb0a:	22 97       	sbiw	r28, 0x02	; 2
        {
            fatfs_ls("");
    eb0c:	61 f5       	brne	.+88     	; 0xeb66 <fatfs_tests+0x110>
    eb0e:	8e ed       	ldi	r24, 0xDE	; 222
    eb10:	96 e1       	ldi	r25, 0x16	; 22
    eb12:	a8 de       	rcall	.-688    	; 0xe864 <fatfs_ls>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    eb14:	28 c0       	rjmp	.+80     	; 0xeb66 <fatfs_tests+0x110>
    eb16:	98 01       	movw	r18, r16
    eb18:	42 e0       	ldi	r20, 0x02	; 2
    eb1a:	50 e0       	ldi	r21, 0x00	; 0
    eb1c:	6b ef       	ldi	r22, 0xFB	; 251
    eb1e:	77 e0       	ldi	r23, 0x07	; 7
    eb20:	c7 01       	movw	r24, r14
    eb22:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
    {
        mmc_test();
    eb26:	89 2b       	or	r24, r25
    eb28:	11 f0       	breq	.+4      	; 0xeb2e <fatfs_tests+0xd8>
    eb2a:	57 df       	rcall	.-338    	; 0xe9da <mmc_test>
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    eb2c:	1c c0       	rjmp	.+56     	; 0xeb66 <fatfs_tests+0x110>
    eb2e:	98 01       	movw	r18, r16
    eb30:	42 e0       	ldi	r20, 0x02	; 2
    eb32:	50 e0       	ldi	r21, 0x00	; 0
    eb34:	64 e0       	ldi	r22, 0x04	; 4
    eb36:	78 e0       	ldi	r23, 0x08	; 8
    eb38:	c7 01       	movw	r24, r14
    eb3a:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
    {
        mmc_init(1);
    eb3e:	89 2b       	or	r24, r25
    eb40:	21 f0       	breq	.+8      	; 0xeb4a <fatfs_tests+0xf4>
    eb42:	81 e0       	ldi	r24, 0x01	; 1
    eb44:	90 e0       	ldi	r25, 0x00	; 0
    eb46:	ba da       	rcall	.-2700   	; 0xe0bc <mmc_init>
        return(1);
    }

    if (MATCHARGS(ptr,"status", (ind + 1), argc))
    eb48:	0e c0       	rjmp	.+28     	; 0xeb66 <fatfs_tests+0x110>
    eb4a:	98 01       	movw	r18, r16
    eb4c:	43 e0       	ldi	r20, 0x03	; 3
    eb4e:	50 e0       	ldi	r21, 0x00	; 0
    eb50:	6d e0       	ldi	r22, 0x0D	; 13
    eb52:	78 e0       	ldi	r23, 0x08	; 8
    eb54:	c7 01       	movw	r24, r14
    eb56:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
    eb5a:	89 2b       	or	r24, r25
    {
        fatfs_status(argv[ind]);
    eb5c:	09 f4       	brne	.+2      	; 0xeb60 <fatfs_tests+0x10a>
    eb5e:	8f cf       	rjmp	.-226    	; 0xea7e <fatfs_tests+0x28>
    eb60:	8c 81       	ldd	r24, Y+4	; 0x04
    eb62:	9d 81       	ldd	r25, Y+5	; 0x05
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    eb64:	61 dc       	rcall	.-1854   	; 0xe428 <fatfs_status>
    eb66:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
    eb68:	90 e0       	ldi	r25, 0x00	; 0
    eb6a:	cd b7       	in	r28, 0x3d	; 61
    eb6c:	de b7       	in	r29, 0x3e	; 62
    eb6e:	27 96       	adiw	r28, 0x07	; 7
    eb70:	e6 e0       	ldi	r30, 0x06	; 6
    eb72:	0c 94 ae e4 	jmp	0x1c95c	; 0x1c95c <__epilogue_restores__+0x18>

0000eb76 <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    eb76:	8f 92       	push	r8
    eb78:	9f 92       	push	r9
    eb7a:	af 92       	push	r10
    eb7c:	bf 92       	push	r11
    eb7e:	ef 92       	push	r14
    eb80:	ff 92       	push	r15
    eb82:	0f 93       	push	r16
    eb84:	1f 93       	push	r17
    eb86:	cf 93       	push	r28
    eb88:	df 93       	push	r29
    eb8a:	00 d0       	rcall	.+0      	; 0xeb8c <fatfs_getc+0x16>
    eb8c:	1f 92       	push	r1
    eb8e:	cd b7       	in	r28, 0x3d	; 61
    eb90:	de b7       	in	r29, 0x3e	; 62
    eb92:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    eb96:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    eb9a:	00 97       	sbiw	r24, 0x00	; 0
    eb9c:	39 f4       	brne	.+14     	; 0xebac <fatfs_getc+0x36>
    eb9e:	89 e0       	ldi	r24, 0x09	; 9
    eba0:	90 e0       	ldi	r25, 0x00	; 0
    eba2:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    eba6:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    ebaa:	2f c0       	rjmp	.+94     	; 0xec0a <fatfs_getc+0x94>
    ebac:	fc 01       	movw	r30, r24
    ebae:	e4 84       	ldd	r14, Z+12	; 0x0c
    ebb0:	f5 84       	ldd	r15, Z+13	; 0x0d
    ebb2:	e1 14       	cp	r14, r1
    ebb4:	f1 04       	cpc	r15, r1
    ebb6:	99 f3       	breq	.-26     	; 0xeb9e <fatfs_getc+0x28>
    ebb8:	8c 01       	movw	r16, r24
    ebba:	9e 01       	movw	r18, r28
    ebbc:	2f 5f       	subi	r18, 0xFF	; 255
    ebbe:	3f 4f       	sbci	r19, 0xFF	; 255
    ebc0:	41 e0       	ldi	r20, 0x01	; 1
    ebc2:	50 e0       	ldi	r21, 0x00	; 0
    ebc4:	be 01       	movw	r22, r28
    ebc6:	6d 5f       	subi	r22, 0xFD	; 253
    ebc8:	7f 4f       	sbci	r23, 0xFF	; 255
    ebca:	c7 01       	movw	r24, r14
    ebcc:	0e 94 d4 5c 	call	0xb9a8	; 0xb9a8 <f_read>
    ebd0:	00 97       	sbiw	r24, 0x00	; 0
    ebd2:	31 f4       	brne	.+12     	; 0xebe0 <fatfs_getc+0x6a>
    ebd4:	29 81       	ldd	r18, Y+1	; 0x01
    ebd6:	3a 81       	ldd	r19, Y+2	; 0x02
    ebd8:	21 30       	cpi	r18, 0x01	; 1
    ebda:	31 05       	cpc	r19, r1
    ebdc:	c9 f0       	breq	.+50     	; 0xec10 <fatfs_getc+0x9a>
    ebde:	03 c0       	rjmp	.+6      	; 0xebe6 <fatfs_getc+0x70>
    ebe0:	84 31       	cpi	r24, 0x14	; 20
    ebe2:	91 05       	cpc	r25, r1
    ebe4:	40 f4       	brcc	.+16     	; 0xebf6 <fatfs_getc+0x80>
    ebe6:	fc 01       	movw	r30, r24
    ebe8:	ea 53       	subi	r30, 0x3A	; 58
    ebea:	f5 4f       	sbci	r31, 0xF5	; 245
    ebec:	80 81       	ld	r24, Z
    ebee:	08 2e       	mov	r0, r24
    ebf0:	00 0c       	add	r0, r0
    ebf2:	99 0b       	sbc	r25, r25
    ebf4:	02 c0       	rjmp	.+4      	; 0xebfa <fatfs_getc+0x84>
    ebf6:	83 e2       	ldi	r24, 0x23	; 35
    ebf8:	90 e0       	ldi	r25, 0x00	; 0
    ebfa:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    ebfe:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    ec02:	f8 01       	movw	r30, r16
    ec04:	83 81       	ldd	r24, Z+3	; 0x03
    ec06:	80 62       	ori	r24, 0x20	; 32
    ec08:	83 83       	std	Z+3, r24	; 0x03
    ec0a:	8f ef       	ldi	r24, 0xFF	; 255
    ec0c:	9f ef       	ldi	r25, 0xFF	; 255
    ec0e:	28 c0       	rjmp	.+80     	; 0xec60 <fatfs_getc+0xea>
    ec10:	8b 81       	ldd	r24, Y+3	; 0x03
    ec12:	8d 30       	cpi	r24, 0x0D	; 13
    ec14:	01 f5       	brne	.+64     	; 0xec56 <fatfs_getc+0xe0>
    ec16:	f7 01       	movw	r30, r14
    ec18:	80 88       	ldd	r8, Z+16	; 0x10
    ec1a:	91 88       	ldd	r9, Z+17	; 0x11
    ec1c:	a2 88       	ldd	r10, Z+18	; 0x12
    ec1e:	b3 88       	ldd	r11, Z+19	; 0x13
    ec20:	9e 01       	movw	r18, r28
    ec22:	2f 5f       	subi	r18, 0xFF	; 255
    ec24:	3f 4f       	sbci	r19, 0xFF	; 255
    ec26:	41 e0       	ldi	r20, 0x01	; 1
    ec28:	50 e0       	ldi	r21, 0x00	; 0
    ec2a:	be 01       	movw	r22, r28
    ec2c:	6d 5f       	subi	r22, 0xFD	; 253
    ec2e:	7f 4f       	sbci	r23, 0xFF	; 255
    ec30:	c7 01       	movw	r24, r14
    ec32:	0e 94 d4 5c 	call	0xb9a8	; 0xb9a8 <f_read>
    ec36:	89 2b       	or	r24, r25
    ec38:	89 f4       	brne	.+34     	; 0xec5c <fatfs_getc+0xe6>
    ec3a:	89 81       	ldd	r24, Y+1	; 0x01
    ec3c:	9a 81       	ldd	r25, Y+2	; 0x02
    ec3e:	01 97       	sbiw	r24, 0x01	; 1
    ec40:	69 f4       	brne	.+26     	; 0xec5c <fatfs_getc+0xe6>
    ec42:	8b 81       	ldd	r24, Y+3	; 0x03
    ec44:	8a 30       	cpi	r24, 0x0A	; 10
    ec46:	31 f0       	breq	.+12     	; 0xec54 <fatfs_getc+0xde>
    ec48:	b5 01       	movw	r22, r10
    ec4a:	a4 01       	movw	r20, r8
    ec4c:	c7 01       	movw	r24, r14
    ec4e:	0e 94 e0 61 	call	0xc3c0	; 0xc3c0 <f_lseek>
    ec52:	04 c0       	rjmp	.+8      	; 0xec5c <fatfs_getc+0xe6>
    ec54:	8b 83       	std	Y+3, r24	; 0x03
    ec56:	8b 81       	ldd	r24, Y+3	; 0x03
    ec58:	90 e0       	ldi	r25, 0x00	; 0
    ec5a:	02 c0       	rjmp	.+4      	; 0xec60 <fatfs_getc+0xea>
    ec5c:	8a e0       	ldi	r24, 0x0A	; 10
    ec5e:	90 e0       	ldi	r25, 0x00	; 0
    ec60:	0f 90       	pop	r0
    ec62:	0f 90       	pop	r0
    ec64:	0f 90       	pop	r0
    ec66:	df 91       	pop	r29
    ec68:	cf 91       	pop	r28
    ec6a:	1f 91       	pop	r17
    ec6c:	0f 91       	pop	r16
    ec6e:	ff 90       	pop	r15
    ec70:	ef 90       	pop	r14
    ec72:	bf 90       	pop	r11
    ec74:	af 90       	pop	r10
    ec76:	9f 90       	pop	r9
    ec78:	8f 90       	pop	r8
    ec7a:	08 95       	ret

0000ec7c <fatfs_putc>:
    ec7c:	a3 e0       	ldi	r26, 0x03	; 3
    ec7e:	b0 e0       	ldi	r27, 0x00	; 0
    ec80:	e4 e4       	ldi	r30, 0x44	; 68
    ec82:	f6 e7       	ldi	r31, 0x76	; 118
    ec84:	0c 94 94 e4 	jmp	0x1c928	; 0x1c928 <__prologue_saves__+0x1c>
    ec88:	8b 83       	std	Y+3, r24	; 0x03
    ec8a:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    ec8e:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    ec92:	61 15       	cp	r22, r1
    ec94:	71 05       	cpc	r23, r1
    ec96:	39 f4       	brne	.+14     	; 0xeca6 <fatfs_putc+0x2a>
    ec98:	89 e0       	ldi	r24, 0x09	; 9
    ec9a:	90 e0       	ldi	r25, 0x00	; 0
    ec9c:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    eca0:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    eca4:	2d c0       	rjmp	.+90     	; 0xed00 <fatfs_putc+0x84>
    eca6:	fb 01       	movw	r30, r22
    eca8:	84 85       	ldd	r24, Z+12	; 0x0c
    ecaa:	95 85       	ldd	r25, Z+13	; 0x0d
    ecac:	00 97       	sbiw	r24, 0x00	; 0
    ecae:	a1 f3       	breq	.-24     	; 0xec98 <fatfs_putc+0x1c>
    ecb0:	8b 01       	movw	r16, r22
    ecb2:	9e 01       	movw	r18, r28
    ecb4:	2f 5f       	subi	r18, 0xFF	; 255
    ecb6:	3f 4f       	sbci	r19, 0xFF	; 255
    ecb8:	41 e0       	ldi	r20, 0x01	; 1
    ecba:	50 e0       	ldi	r21, 0x00	; 0
    ecbc:	be 01       	movw	r22, r28
    ecbe:	6d 5f       	subi	r22, 0xFD	; 253
    ecc0:	7f 4f       	sbci	r23, 0xFF	; 255
    ecc2:	0e 94 1f 5e 	call	0xbc3e	; 0xbc3e <f_write>
    ecc6:	00 97       	sbiw	r24, 0x00	; 0
    ecc8:	31 f4       	brne	.+12     	; 0xecd6 <fatfs_putc+0x5a>
    ecca:	29 81       	ldd	r18, Y+1	; 0x01
    eccc:	3a 81       	ldd	r19, Y+2	; 0x02
    ecce:	21 30       	cpi	r18, 0x01	; 1
    ecd0:	31 05       	cpc	r19, r1
    ecd2:	c9 f0       	breq	.+50     	; 0xed06 <fatfs_putc+0x8a>
    ecd4:	03 c0       	rjmp	.+6      	; 0xecdc <fatfs_putc+0x60>
    ecd6:	84 31       	cpi	r24, 0x14	; 20
    ecd8:	91 05       	cpc	r25, r1
    ecda:	40 f4       	brcc	.+16     	; 0xecec <fatfs_putc+0x70>
    ecdc:	fc 01       	movw	r30, r24
    ecde:	ea 53       	subi	r30, 0x3A	; 58
    ece0:	f5 4f       	sbci	r31, 0xF5	; 245
    ece2:	80 81       	ld	r24, Z
    ece4:	08 2e       	mov	r0, r24
    ece6:	00 0c       	add	r0, r0
    ece8:	99 0b       	sbc	r25, r25
    ecea:	02 c0       	rjmp	.+4      	; 0xecf0 <fatfs_putc+0x74>
    ecec:	83 e2       	ldi	r24, 0x23	; 35
    ecee:	90 e0       	ldi	r25, 0x00	; 0
    ecf0:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    ecf4:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    ecf8:	f8 01       	movw	r30, r16
    ecfa:	83 81       	ldd	r24, Z+3	; 0x03
    ecfc:	80 62       	ori	r24, 0x20	; 32
    ecfe:	83 83       	std	Z+3, r24	; 0x03
    ed00:	8f ef       	ldi	r24, 0xFF	; 255
    ed02:	9f ef       	ldi	r25, 0xFF	; 255
    ed04:	02 c0       	rjmp	.+4      	; 0xed0a <fatfs_putc+0x8e>
    ed06:	8b 81       	ldd	r24, Y+3	; 0x03
    ed08:	90 e0       	ldi	r25, 0x00	; 0
    ed0a:	23 96       	adiw	r28, 0x03	; 3
    ed0c:	e4 e0       	ldi	r30, 0x04	; 4
    ed0e:	0c 94 b0 e4 	jmp	0x1c960	; 0x1c960 <__epilogue_restores__+0x1c>

0000ed12 <fgetc>:
    ed12:	cf 93       	push	r28
    ed14:	df 93       	push	r29
    ed16:	00 d0       	rcall	.+0      	; 0xed18 <fgetc+0x6>
    ed18:	1f 92       	push	r1
    ed1a:	ec 01       	movw	r28, r24
    ed1c:	00 97       	sbiw	r24, 0x00	; 0
    ed1e:	39 f4       	brne	.+14     	; 0xed2e <fgetc+0x1c>
    ed20:	89 e0       	ldi	r24, 0x09	; 9
    ed22:	90 e0       	ldi	r25, 0x00	; 0
    ed24:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    ed28:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    ed2c:	40 c0       	rjmp	.+128    	; 0xedae <fgetc+0x9c>
    ed2e:	2b 81       	ldd	r18, Y+3	; 0x03
    ed30:	20 ff       	sbrs	r18, 0
    ed32:	3d c0       	rjmp	.+122    	; 0xedae <fgetc+0x9c>
    ed34:	26 ff       	sbrs	r18, 6
    ed36:	0a c0       	rjmp	.+20     	; 0xed4c <fgetc+0x3a>
    ed38:	2f 7b       	andi	r18, 0xBF	; 191
    ed3a:	2b 83       	std	Y+3, r18	; 0x03
    ed3c:	8e 81       	ldd	r24, Y+6	; 0x06
    ed3e:	9f 81       	ldd	r25, Y+7	; 0x07
    ed40:	01 96       	adiw	r24, 0x01	; 1
    ed42:	9f 83       	std	Y+7, r25	; 0x07
    ed44:	8e 83       	std	Y+6, r24	; 0x06
    ed46:	8a 81       	ldd	r24, Y+2	; 0x02
    ed48:	90 e0       	ldi	r25, 0x00	; 0
    ed4a:	33 c0       	rjmp	.+102    	; 0xedb2 <fgetc+0xa0>
    ed4c:	22 ff       	sbrs	r18, 2
    ed4e:	0d c0       	rjmp	.+26     	; 0xed6a <fgetc+0x58>
    ed50:	e8 81       	ld	r30, Y
    ed52:	f9 81       	ldd	r31, Y+1	; 0x01
    ed54:	80 81       	ld	r24, Z
    ed56:	90 e0       	ldi	r25, 0x00	; 0
    ed58:	00 97       	sbiw	r24, 0x00	; 0
    ed5a:	19 f4       	brne	.+6      	; 0xed62 <fgetc+0x50>
    ed5c:	20 62       	ori	r18, 0x20	; 32
    ed5e:	2b 83       	std	Y+3, r18	; 0x03
    ed60:	26 c0       	rjmp	.+76     	; 0xedae <fgetc+0x9c>
    ed62:	31 96       	adiw	r30, 0x01	; 1
    ed64:	f9 83       	std	Y+1, r31	; 0x01
    ed66:	e8 83       	st	Y, r30
    ed68:	1b c0       	rjmp	.+54     	; 0xeda0 <fgetc+0x8e>
    ed6a:	ea 85       	ldd	r30, Y+10	; 0x0a
    ed6c:	fb 85       	ldd	r31, Y+11	; 0x0b
    ed6e:	30 97       	sbiw	r30, 0x00	; 0
    ed70:	59 f4       	brne	.+22     	; 0xed88 <fgetc+0x76>
    ed72:	88 e5       	ldi	r24, 0x58	; 88
    ed74:	9b e0       	ldi	r25, 0x0B	; 11
    ed76:	a0 e0       	ldi	r26, 0x00	; 0
    ed78:	ed b7       	in	r30, 0x3d	; 61
    ed7a:	fe b7       	in	r31, 0x3e	; 62
    ed7c:	81 83       	std	Z+1, r24	; 0x01
    ed7e:	92 83       	std	Z+2, r25	; 0x02
    ed80:	a3 83       	std	Z+3, r26	; 0x03
    ed82:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    ed86:	13 c0       	rjmp	.+38     	; 0xedae <fgetc+0x9c>
    ed88:	09 95       	icall
    ed8a:	97 ff       	sbrs	r25, 7
    ed8c:	09 c0       	rjmp	.+18     	; 0xeda0 <fgetc+0x8e>
    ed8e:	2b 81       	ldd	r18, Y+3	; 0x03
    ed90:	02 96       	adiw	r24, 0x02	; 2
    ed92:	11 f0       	breq	.+4      	; 0xed98 <fgetc+0x86>
    ed94:	80 e2       	ldi	r24, 0x20	; 32
    ed96:	01 c0       	rjmp	.+2      	; 0xed9a <fgetc+0x88>
    ed98:	80 e1       	ldi	r24, 0x10	; 16
    ed9a:	82 2b       	or	r24, r18
    ed9c:	8b 83       	std	Y+3, r24	; 0x03
    ed9e:	07 c0       	rjmp	.+14     	; 0xedae <fgetc+0x9c>
    eda0:	2e 81       	ldd	r18, Y+6	; 0x06
    eda2:	3f 81       	ldd	r19, Y+7	; 0x07
    eda4:	2f 5f       	subi	r18, 0xFF	; 255
    eda6:	3f 4f       	sbci	r19, 0xFF	; 255
    eda8:	3f 83       	std	Y+7, r19	; 0x07
    edaa:	2e 83       	std	Y+6, r18	; 0x06
    edac:	02 c0       	rjmp	.+4      	; 0xedb2 <fgetc+0xa0>
    edae:	8f ef       	ldi	r24, 0xFF	; 255
    edb0:	9f ef       	ldi	r25, 0xFF	; 255
    edb2:	cd b7       	in	r28, 0x3d	; 61
    edb4:	de b7       	in	r29, 0x3e	; 62
    edb6:	23 96       	adiw	r28, 0x03	; 3
    edb8:	e2 e0       	ldi	r30, 0x02	; 2
    edba:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

0000edbe <fputc>:
    edbe:	cf 93       	push	r28
    edc0:	df 93       	push	r29
    edc2:	00 d0       	rcall	.+0      	; 0xedc4 <fputc+0x6>
    edc4:	1f 92       	push	r1
    edc6:	eb 01       	movw	r28, r22
    edc8:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    edcc:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    edd0:	20 91 59 1c 	lds	r18, 0x1C59	; 0x801c59 <__iob+0x2>
    edd4:	30 91 5a 1c 	lds	r19, 0x1C5A	; 0x801c5a <__iob+0x3>
    edd8:	62 17       	cp	r22, r18
    edda:	73 07       	cpc	r23, r19
    eddc:	49 f0       	breq	.+18     	; 0xedf0 <fputc+0x32>
    edde:	20 91 5b 1c 	lds	r18, 0x1C5B	; 0x801c5b <__iob+0x4>
    ede2:	30 91 5c 1c 	lds	r19, 0x1C5C	; 0x801c5c <__iob+0x5>
    ede6:	62 17       	cp	r22, r18
    ede8:	73 07       	cpc	r23, r19
    edea:	11 f0       	breq	.+4      	; 0xedf0 <fputc+0x32>
    edec:	47 df       	rcall	.-370    	; 0xec7c <fatfs_putc>
    edee:	33 c0       	rjmp	.+102    	; 0xee56 <fputc+0x98>
    edf0:	2b 81       	ldd	r18, Y+3	; 0x03
    edf2:	21 ff       	sbrs	r18, 1
    edf4:	2e c0       	rjmp	.+92     	; 0xee52 <fputc+0x94>
    edf6:	22 ff       	sbrs	r18, 2
    edf8:	10 c0       	rjmp	.+32     	; 0xee1a <fputc+0x5c>
    edfa:	4e 81       	ldd	r20, Y+6	; 0x06
    edfc:	5f 81       	ldd	r21, Y+7	; 0x07
    edfe:	2c 81       	ldd	r18, Y+4	; 0x04
    ee00:	3d 81       	ldd	r19, Y+5	; 0x05
    ee02:	42 17       	cp	r20, r18
    ee04:	53 07       	cpc	r21, r19
    ee06:	f4 f4       	brge	.+60     	; 0xee44 <fputc+0x86>
    ee08:	e8 81       	ld	r30, Y
    ee0a:	f9 81       	ldd	r31, Y+1	; 0x01
    ee0c:	9f 01       	movw	r18, r30
    ee0e:	2f 5f       	subi	r18, 0xFF	; 255
    ee10:	3f 4f       	sbci	r19, 0xFF	; 255
    ee12:	39 83       	std	Y+1, r19	; 0x01
    ee14:	28 83       	st	Y, r18
    ee16:	80 83       	st	Z, r24
    ee18:	15 c0       	rjmp	.+42     	; 0xee44 <fputc+0x86>
    ee1a:	e8 85       	ldd	r30, Y+8	; 0x08
    ee1c:	f9 85       	ldd	r31, Y+9	; 0x09
    ee1e:	30 97       	sbiw	r30, 0x00	; 0
    ee20:	59 f4       	brne	.+22     	; 0xee38 <fputc+0x7a>
    ee22:	80 e4       	ldi	r24, 0x40	; 64
    ee24:	9b e0       	ldi	r25, 0x0B	; 11
    ee26:	a0 e0       	ldi	r26, 0x00	; 0
    ee28:	ed b7       	in	r30, 0x3d	; 61
    ee2a:	fe b7       	in	r31, 0x3e	; 62
    ee2c:	81 83       	std	Z+1, r24	; 0x01
    ee2e:	92 83       	std	Z+2, r25	; 0x02
    ee30:	a3 83       	std	Z+3, r26	; 0x03
    ee32:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    ee36:	0d c0       	rjmp	.+26     	; 0xee52 <fputc+0x94>
    ee38:	be 01       	movw	r22, r28
    ee3a:	09 95       	icall
    ee3c:	8f 3f       	cpi	r24, 0xFF	; 255
    ee3e:	ff ef       	ldi	r31, 0xFF	; 255
    ee40:	9f 07       	cpc	r25, r31
    ee42:	39 f0       	breq	.+14     	; 0xee52 <fputc+0x94>
    ee44:	2e 81       	ldd	r18, Y+6	; 0x06
    ee46:	3f 81       	ldd	r19, Y+7	; 0x07
    ee48:	2f 5f       	subi	r18, 0xFF	; 255
    ee4a:	3f 4f       	sbci	r19, 0xFF	; 255
    ee4c:	3f 83       	std	Y+7, r19	; 0x07
    ee4e:	2e 83       	std	Y+6, r18	; 0x06
    ee50:	02 c0       	rjmp	.+4      	; 0xee56 <fputc+0x98>
    ee52:	8f ef       	ldi	r24, 0xFF	; 255
    ee54:	9f ef       	ldi	r25, 0xFF	; 255
    ee56:	cd b7       	in	r28, 0x3d	; 61
    ee58:	de b7       	in	r29, 0x3e	; 62
    ee5a:	23 96       	adiw	r28, 0x03	; 3
    ee5c:	e2 e0       	ldi	r30, 0x02	; 2
    ee5e:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

0000ee62 <_fprintf_putc>:
    ee62:	fc 01       	movw	r30, r24
    ee64:	86 2f       	mov	r24, r22
    ee66:	26 81       	ldd	r18, Z+6	; 0x06
    ee68:	37 81       	ldd	r19, Z+7	; 0x07
    ee6a:	2f 5f       	subi	r18, 0xFF	; 255
    ee6c:	3f 4f       	sbci	r19, 0xFF	; 255
    ee6e:	37 83       	std	Z+7, r19	; 0x07
    ee70:	26 83       	std	Z+6, r18	; 0x06
    ee72:	62 81       	ldd	r22, Z+2	; 0x02
    ee74:	73 81       	ldd	r23, Z+3	; 0x03
    ee76:	90 e0       	ldi	r25, 0x00	; 0
    ee78:	a2 cf       	rjmp	.-188    	; 0xedbe <fputc>
    ee7a:	08 95       	ret

0000ee7c <getchar>:
    ee7c:	80 91 57 1c 	lds	r24, 0x1C57	; 0x801c57 <__iob>
    ee80:	90 91 58 1c 	lds	r25, 0x1C58	; 0x801c58 <__iob+0x1>
    ee84:	46 cf       	rjmp	.-372    	; 0xed12 <fgetc>
    ee86:	08 95       	ret

0000ee88 <putchar>:
    ee88:	60 91 59 1c 	lds	r22, 0x1C59	; 0x801c59 <__iob+0x2>
    ee8c:	70 91 5a 1c 	lds	r23, 0x1C5A	; 0x801c5a <__iob+0x3>
    ee90:	96 cf       	rjmp	.-212    	; 0xedbe <fputc>
    ee92:	08 95       	ret

0000ee94 <fgets>:
    ee94:	a0 e0       	ldi	r26, 0x00	; 0
    ee96:	b0 e0       	ldi	r27, 0x00	; 0
    ee98:	e0 e5       	ldi	r30, 0x50	; 80
    ee9a:	f7 e7       	ldi	r31, 0x77	; 119
    ee9c:	0c 94 90 e4 	jmp	0x1c920	; 0x1c920 <__prologue_saves__+0x14>
    eea0:	7c 01       	movw	r14, r24
    eea2:	6a 01       	movw	r12, r20
    eea4:	8b 01       	movw	r16, r22
    eea6:	c0 e0       	ldi	r28, 0x00	; 0
    eea8:	d0 e0       	ldi	r29, 0x00	; 0
    eeaa:	01 15       	cp	r16, r1
    eeac:	11 05       	cpc	r17, r1
    eeae:	41 f0       	breq	.+16     	; 0xeec0 <fgets+0x2c>
    eeb0:	c6 01       	movw	r24, r12
    eeb2:	2f df       	rcall	.-418    	; 0xed12 <fgetc>
    eeb4:	8f 3f       	cpi	r24, 0xFF	; 255
    eeb6:	2f ef       	ldi	r18, 0xFF	; 255
    eeb8:	92 07       	cpc	r25, r18
    eeba:	39 f4       	brne	.+14     	; 0xeeca <fgets+0x36>
    eebc:	20 97       	sbiw	r28, 0x00	; 0
    eebe:	b9 f0       	breq	.+46     	; 0xeeee <fgets+0x5a>
    eec0:	ce 0d       	add	r28, r14
    eec2:	df 1d       	adc	r29, r15
    eec4:	18 82       	st	Y, r1
    eec6:	c7 01       	movw	r24, r14
    eec8:	14 c0       	rjmp	.+40     	; 0xeef2 <fgets+0x5e>
    eeca:	8a 30       	cpi	r24, 0x0A	; 10
    eecc:	91 05       	cpc	r25, r1
    eece:	c1 f3       	breq	.-16     	; 0xeec0 <fgets+0x2c>
    eed0:	88 30       	cpi	r24, 0x08	; 8
    eed2:	91 05       	cpc	r25, r1
    eed4:	21 f4       	brne	.+8      	; 0xeede <fgets+0x4a>
    eed6:	20 97       	sbiw	r28, 0x00	; 0
    eed8:	39 f0       	breq	.+14     	; 0xeee8 <fgets+0x54>
    eeda:	21 97       	sbiw	r28, 0x01	; 1
    eedc:	05 c0       	rjmp	.+10     	; 0xeee8 <fgets+0x54>
    eede:	f7 01       	movw	r30, r14
    eee0:	ec 0f       	add	r30, r28
    eee2:	fd 1f       	adc	r31, r29
    eee4:	80 83       	st	Z, r24
    eee6:	21 96       	adiw	r28, 0x01	; 1
    eee8:	01 50       	subi	r16, 0x01	; 1
    eeea:	11 09       	sbc	r17, r1
    eeec:	de cf       	rjmp	.-68     	; 0xeeaa <fgets+0x16>
    eeee:	80 e0       	ldi	r24, 0x00	; 0
    eef0:	90 e0       	ldi	r25, 0x00	; 0
    eef2:	cd b7       	in	r28, 0x3d	; 61
    eef4:	de b7       	in	r29, 0x3e	; 62
    eef6:	e8 e0       	ldi	r30, 0x08	; 8
    eef8:	0c 94 ac e4 	jmp	0x1c958	; 0x1c958 <__epilogue_restores__+0x14>

0000eefc <fputs>:
    eefc:	0f 93       	push	r16
    eefe:	1f 93       	push	r17
    ef00:	cf 93       	push	r28
    ef02:	df 93       	push	r29
    ef04:	8b 01       	movw	r16, r22
    ef06:	ec 01       	movw	r28, r24
    ef08:	89 91       	ld	r24, Y+
    ef0a:	88 23       	and	r24, r24
    ef0c:	41 f0       	breq	.+16     	; 0xef1e <fputs+0x22>
    ef0e:	b8 01       	movw	r22, r16
    ef10:	90 e0       	ldi	r25, 0x00	; 0
    ef12:	55 df       	rcall	.-342    	; 0xedbe <fputc>
    ef14:	8f 3f       	cpi	r24, 0xFF	; 255
    ef16:	2f ef       	ldi	r18, 0xFF	; 255
    ef18:	92 07       	cpc	r25, r18
    ef1a:	b1 f7       	brne	.-20     	; 0xef08 <fputs+0xc>
    ef1c:	02 c0       	rjmp	.+4      	; 0xef22 <fputs+0x26>
    ef1e:	80 e0       	ldi	r24, 0x00	; 0
    ef20:	90 e0       	ldi	r25, 0x00	; 0
    ef22:	df 91       	pop	r29
    ef24:	cf 91       	pop	r28
    ef26:	1f 91       	pop	r17
    ef28:	0f 91       	pop	r16
    ef2a:	08 95       	ret

0000ef2c <puts>:
    ef2c:	cf 93       	push	r28
    ef2e:	df 93       	push	r29
    ef30:	ec 01       	movw	r28, r24
    ef32:	89 91       	ld	r24, Y+
    ef34:	60 91 59 1c 	lds	r22, 0x1C59	; 0x801c59 <__iob+0x2>
    ef38:	70 91 5a 1c 	lds	r23, 0x1C5A	; 0x801c5a <__iob+0x3>
    ef3c:	88 23       	and	r24, r24
    ef3e:	39 f0       	breq	.+14     	; 0xef4e <puts+0x22>
    ef40:	90 e0       	ldi	r25, 0x00	; 0
    ef42:	3d df       	rcall	.-390    	; 0xedbe <fputc>
    ef44:	8f 3f       	cpi	r24, 0xFF	; 255
    ef46:	2f ef       	ldi	r18, 0xFF	; 255
    ef48:	92 07       	cpc	r25, r18
    ef4a:	99 f7       	brne	.-26     	; 0xef32 <puts+0x6>
    ef4c:	03 c0       	rjmp	.+6      	; 0xef54 <puts+0x28>
    ef4e:	8a e0       	ldi	r24, 0x0A	; 10
    ef50:	90 e0       	ldi	r25, 0x00	; 0
    ef52:	35 df       	rcall	.-406    	; 0xedbe <fputc>
    ef54:	df 91       	pop	r29
    ef56:	cf 91       	pop	r28
    ef58:	08 95       	ret

0000ef5a <fileno>:
    ef5a:	00 97       	sbiw	r24, 0x00	; 0
    ef5c:	39 f4       	brne	.+14     	; 0xef6c <fileno+0x12>
    ef5e:	89 e0       	ldi	r24, 0x09	; 9
    ef60:	90 e0       	ldi	r25, 0x00	; 0
    ef62:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    ef66:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    ef6a:	0e c0       	rjmp	.+28     	; 0xef88 <fileno+0x2e>
    ef6c:	e7 e5       	ldi	r30, 0x57	; 87
    ef6e:	fc e1       	ldi	r31, 0x1C	; 28
    ef70:	20 e0       	ldi	r18, 0x00	; 0
    ef72:	30 e0       	ldi	r19, 0x00	; 0
    ef74:	41 91       	ld	r20, Z+
    ef76:	51 91       	ld	r21, Z+
    ef78:	84 17       	cp	r24, r20
    ef7a:	95 07       	cpc	r25, r21
    ef7c:	41 f0       	breq	.+16     	; 0xef8e <fileno+0x34>
    ef7e:	2f 5f       	subi	r18, 0xFF	; 255
    ef80:	3f 4f       	sbci	r19, 0xFF	; 255
    ef82:	20 31       	cpi	r18, 0x10	; 16
    ef84:	31 05       	cpc	r19, r1
    ef86:	b1 f7       	brne	.-20     	; 0xef74 <fileno+0x1a>
    ef88:	8f ef       	ldi	r24, 0xFF	; 255
    ef8a:	9f ef       	ldi	r25, 0xFF	; 255
    ef8c:	08 95       	ret
    ef8e:	c9 01       	movw	r24, r18
    ef90:	08 95       	ret

0000ef92 <fileno_to_stream>:
    ef92:	80 31       	cpi	r24, 0x10	; 16
    ef94:	91 05       	cpc	r25, r1
    ef96:	48 f4       	brcc	.+18     	; 0xefaa <fileno_to_stream+0x18>
    ef98:	88 0f       	add	r24, r24
    ef9a:	99 1f       	adc	r25, r25
    ef9c:	fc 01       	movw	r30, r24
    ef9e:	e9 5a       	subi	r30, 0xA9	; 169
    efa0:	f3 4e       	sbci	r31, 0xE3	; 227
    efa2:	80 81       	ld	r24, Z
    efa4:	91 81       	ldd	r25, Z+1	; 0x01
    efa6:	00 97       	sbiw	r24, 0x00	; 0
    efa8:	41 f4       	brne	.+16     	; 0xefba <fileno_to_stream+0x28>
    efaa:	89 e0       	ldi	r24, 0x09	; 9
    efac:	90 e0       	ldi	r25, 0x00	; 0
    efae:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    efb2:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    efb6:	80 e0       	ldi	r24, 0x00	; 0
    efb8:	90 e0       	ldi	r25, 0x00	; 0
    efba:	08 95       	ret

0000efbc <mctime>:
    efbc:	a4 e0       	ldi	r26, 0x04	; 4
    efbe:	b0 e0       	ldi	r27, 0x00	; 0
    efc0:	e4 ee       	ldi	r30, 0xE4	; 228
    efc2:	f7 e7       	ldi	r31, 0x77	; 119
    efc4:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
    efc8:	69 83       	std	Y+1, r22	; 0x01
    efca:	7a 83       	std	Y+2, r23	; 0x02
    efcc:	8b 83       	std	Y+3, r24	; 0x03
    efce:	9c 83       	std	Y+4, r25	; 0x04
    efd0:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    efd4:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    efd8:	ce 01       	movw	r24, r28
    efda:	01 96       	adiw	r24, 0x01	; 1
    efdc:	0e 94 37 3e 	call	0x7c6e	; 0x7c6e <ctime_gm>
    efe0:	fc 01       	movw	r30, r24
    efe2:	01 90       	ld	r0, Z+
    efe4:	00 20       	and	r0, r0
    efe6:	e9 f7       	brne	.-6      	; 0xefe2 <mctime+0x26>
    efe8:	31 97       	sbiw	r30, 0x01	; 1
    efea:	e8 1b       	sub	r30, r24
    efec:	f9 0b       	sbc	r31, r25
    efee:	39 f0       	breq	.+14     	; 0xeffe <mctime+0x42>
    eff0:	31 97       	sbiw	r30, 0x01	; 1
    eff2:	e8 0f       	add	r30, r24
    eff4:	f9 1f       	adc	r31, r25
    eff6:	20 81       	ld	r18, Z
    eff8:	2a 30       	cpi	r18, 0x0A	; 10
    effa:	09 f4       	brne	.+2      	; 0xeffe <mctime+0x42>
    effc:	10 82       	st	Z, r1
    effe:	24 96       	adiw	r28, 0x04	; 4
    f000:	e2 e0       	ldi	r30, 0x02	; 2
    f002:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

0000f006 <basename>:
    f006:	00 97       	sbiw	r24, 0x00	; 0
    f008:	49 f0       	breq	.+18     	; 0xf01c <basename+0x16>
    f00a:	fc 01       	movw	r30, r24
    f00c:	21 91       	ld	r18, Z+
    f00e:	22 23       	and	r18, r18
    f010:	21 f0       	breq	.+8      	; 0xf01a <basename+0x14>
    f012:	2f 32       	cpi	r18, 0x2F	; 47
    f014:	d9 f7       	brne	.-10     	; 0xf00c <basename+0x6>
    f016:	cf 01       	movw	r24, r30
    f018:	f9 cf       	rjmp	.-14     	; 0xf00c <basename+0x6>
    f01a:	08 95       	ret
    f01c:	8e ed       	ldi	r24, 0xDE	; 222
    f01e:	96 e1       	ldi	r25, 0x16	; 22
    f020:	08 95       	ret

0000f022 <chdir>:
    f022:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    f026:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    f02a:	0e 94 4f 60 	call	0xc09e	; 0xc09e <f_chdir>
    f02e:	00 97       	sbiw	r24, 0x00	; 0
    f030:	a1 f0       	breq	.+40     	; 0xf05a <chdir+0x38>
    f032:	84 31       	cpi	r24, 0x14	; 20
    f034:	91 05       	cpc	r25, r1
    f036:	40 f4       	brcc	.+16     	; 0xf048 <chdir+0x26>
    f038:	fc 01       	movw	r30, r24
    f03a:	ea 53       	subi	r30, 0x3A	; 58
    f03c:	f5 4f       	sbci	r31, 0xF5	; 245
    f03e:	80 81       	ld	r24, Z
    f040:	08 2e       	mov	r0, r24
    f042:	00 0c       	add	r0, r0
    f044:	99 0b       	sbc	r25, r25
    f046:	02 c0       	rjmp	.+4      	; 0xf04c <chdir+0x2a>
    f048:	83 e2       	ldi	r24, 0x23	; 35
    f04a:	90 e0       	ldi	r25, 0x00	; 0
    f04c:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f050:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f054:	8f ef       	ldi	r24, 0xFF	; 255
    f056:	9f ef       	ldi	r25, 0xFF	; 255
    f058:	08 95       	ret
    f05a:	80 e0       	ldi	r24, 0x00	; 0
    f05c:	90 e0       	ldi	r25, 0x00	; 0
    f05e:	08 95       	ret

0000f060 <chmod>:
    f060:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    f064:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    f068:	42 79       	andi	r20, 0x92	; 146
    f06a:	55 27       	eor	r21, r21
    f06c:	66 27       	eor	r22, r22
    f06e:	77 27       	eor	r23, r23
    f070:	45 2b       	or	r20, r21
    f072:	46 2b       	or	r20, r22
    f074:	47 2b       	or	r20, r23
    f076:	19 f0       	breq	.+6      	; 0xf07e <chmod+0x1e>
    f078:	80 e0       	ldi	r24, 0x00	; 0
    f07a:	90 e0       	ldi	r25, 0x00	; 0
    f07c:	08 95       	ret
    f07e:	41 e0       	ldi	r20, 0x01	; 1
    f080:	61 e0       	ldi	r22, 0x01	; 1
    f082:	0e 94 30 69 	call	0xd260	; 0xd260 <f_chmod>
    f086:	00 97       	sbiw	r24, 0x00	; 0
    f088:	b9 f3       	breq	.-18     	; 0xf078 <chmod+0x18>
    f08a:	84 31       	cpi	r24, 0x14	; 20
    f08c:	91 05       	cpc	r25, r1
    f08e:	40 f4       	brcc	.+16     	; 0xf0a0 <chmod+0x40>
    f090:	fc 01       	movw	r30, r24
    f092:	ea 53       	subi	r30, 0x3A	; 58
    f094:	f5 4f       	sbci	r31, 0xF5	; 245
    f096:	80 81       	ld	r24, Z
    f098:	08 2e       	mov	r0, r24
    f09a:	00 0c       	add	r0, r0
    f09c:	99 0b       	sbc	r25, r25
    f09e:	02 c0       	rjmp	.+4      	; 0xf0a4 <chmod+0x44>
    f0a0:	83 e2       	ldi	r24, 0x23	; 35
    f0a2:	90 e0       	ldi	r25, 0x00	; 0
    f0a4:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f0a8:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f0ac:	8f ef       	ldi	r24, 0xFF	; 255
    f0ae:	9f ef       	ldi	r25, 0xFF	; 255
    f0b0:	08 95       	ret

0000f0b2 <getcwd>:
    f0b2:	cf 93       	push	r28
    f0b4:	df 93       	push	r29
    f0b6:	d8 2f       	mov	r29, r24
    f0b8:	c9 2f       	mov	r28, r25
    f0ba:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    f0be:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    f0c2:	0e 94 aa 60 	call	0xc154	; 0xc154 <f_getcwd>
    f0c6:	00 97       	sbiw	r24, 0x00	; 0
    f0c8:	a1 f0       	breq	.+40     	; 0xf0f2 <getcwd+0x40>
    f0ca:	84 31       	cpi	r24, 0x14	; 20
    f0cc:	91 05       	cpc	r25, r1
    f0ce:	40 f4       	brcc	.+16     	; 0xf0e0 <getcwd+0x2e>
    f0d0:	fc 01       	movw	r30, r24
    f0d2:	ea 53       	subi	r30, 0x3A	; 58
    f0d4:	f5 4f       	sbci	r31, 0xF5	; 245
    f0d6:	80 81       	ld	r24, Z
    f0d8:	08 2e       	mov	r0, r24
    f0da:	00 0c       	add	r0, r0
    f0dc:	99 0b       	sbc	r25, r25
    f0de:	02 c0       	rjmp	.+4      	; 0xf0e4 <getcwd+0x32>
    f0e0:	83 e2       	ldi	r24, 0x23	; 35
    f0e2:	90 e0       	ldi	r25, 0x00	; 0
    f0e4:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f0e8:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f0ec:	80 e0       	ldi	r24, 0x00	; 0
    f0ee:	90 e0       	ldi	r25, 0x00	; 0
    f0f0:	02 c0       	rjmp	.+4      	; 0xf0f6 <getcwd+0x44>
    f0f2:	8d 2f       	mov	r24, r29
    f0f4:	9c 2f       	mov	r25, r28
    f0f6:	df 91       	pop	r29
    f0f8:	cf 91       	pop	r28
    f0fa:	08 95       	ret

0000f0fc <mkdir>:
    f0fc:	cf 93       	push	r28
    f0fe:	df 93       	push	r29
    f100:	ec 01       	movw	r28, r24
    f102:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    f106:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    f10a:	41 15       	cp	r20, r1
    f10c:	51 05       	cpc	r21, r1
    f10e:	61 05       	cpc	r22, r1
    f110:	71 05       	cpc	r23, r1
    f112:	41 f4       	brne	.+16     	; 0xf124 <mkdir+0x28>
    f114:	ce 01       	movw	r24, r28
    f116:	0e 94 2b 67 	call	0xce56	; 0xce56 <f_mkdir>
    f11a:	00 97       	sbiw	r24, 0x00	; 0
    f11c:	39 f4       	brne	.+14     	; 0xf12c <mkdir+0x30>
    f11e:	80 e0       	ldi	r24, 0x00	; 0
    f120:	90 e0       	ldi	r25, 0x00	; 0
    f122:	17 c0       	rjmp	.+46     	; 0xf152 <mkdir+0x56>
    f124:	9d df       	rcall	.-198    	; 0xf060 <chmod>
    f126:	89 2b       	or	r24, r25
    f128:	a9 f3       	breq	.-22     	; 0xf114 <mkdir+0x18>
    f12a:	11 c0       	rjmp	.+34     	; 0xf14e <mkdir+0x52>
    f12c:	84 31       	cpi	r24, 0x14	; 20
    f12e:	91 05       	cpc	r25, r1
    f130:	40 f4       	brcc	.+16     	; 0xf142 <mkdir+0x46>
    f132:	fc 01       	movw	r30, r24
    f134:	ea 53       	subi	r30, 0x3A	; 58
    f136:	f5 4f       	sbci	r31, 0xF5	; 245
    f138:	80 81       	ld	r24, Z
    f13a:	08 2e       	mov	r0, r24
    f13c:	00 0c       	add	r0, r0
    f13e:	99 0b       	sbc	r25, r25
    f140:	02 c0       	rjmp	.+4      	; 0xf146 <mkdir+0x4a>
    f142:	83 e2       	ldi	r24, 0x23	; 35
    f144:	90 e0       	ldi	r25, 0x00	; 0
    f146:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f14a:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f14e:	8f ef       	ldi	r24, 0xFF	; 255
    f150:	9f ef       	ldi	r25, 0xFF	; 255
    f152:	df 91       	pop	r29
    f154:	cf 91       	pop	r28
    f156:	08 95       	ret

0000f158 <rename>:
    f158:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    f15c:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    f160:	0e 94 1b 68 	call	0xd036	; 0xd036 <f_rename>
    f164:	00 97       	sbiw	r24, 0x00	; 0
    f166:	a1 f0       	breq	.+40     	; 0xf190 <rename+0x38>
    f168:	84 31       	cpi	r24, 0x14	; 20
    f16a:	91 05       	cpc	r25, r1
    f16c:	40 f4       	brcc	.+16     	; 0xf17e <rename+0x26>
    f16e:	fc 01       	movw	r30, r24
    f170:	ea 53       	subi	r30, 0x3A	; 58
    f172:	f5 4f       	sbci	r31, 0xF5	; 245
    f174:	80 81       	ld	r24, Z
    f176:	08 2e       	mov	r0, r24
    f178:	00 0c       	add	r0, r0
    f17a:	99 0b       	sbc	r25, r25
    f17c:	02 c0       	rjmp	.+4      	; 0xf182 <rename+0x2a>
    f17e:	83 e2       	ldi	r24, 0x23	; 35
    f180:	90 e0       	ldi	r25, 0x00	; 0
    f182:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f186:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f18a:	8f ef       	ldi	r24, 0xFF	; 255
    f18c:	9f ef       	ldi	r25, 0xFF	; 255
    f18e:	08 95       	ret
    f190:	80 e0       	ldi	r24, 0x00	; 0
    f192:	90 e0       	ldi	r25, 0x00	; 0
    f194:	08 95       	ret

0000f196 <unlink>:
    f196:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    f19a:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    f19e:	0e 94 84 66 	call	0xcd08	; 0xcd08 <f_unlink>
    f1a2:	00 97       	sbiw	r24, 0x00	; 0
    f1a4:	a1 f0       	breq	.+40     	; 0xf1ce <unlink+0x38>
    f1a6:	84 31       	cpi	r24, 0x14	; 20
    f1a8:	91 05       	cpc	r25, r1
    f1aa:	40 f4       	brcc	.+16     	; 0xf1bc <unlink+0x26>
    f1ac:	fc 01       	movw	r30, r24
    f1ae:	ea 53       	subi	r30, 0x3A	; 58
    f1b0:	f5 4f       	sbci	r31, 0xF5	; 245
    f1b2:	80 81       	ld	r24, Z
    f1b4:	08 2e       	mov	r0, r24
    f1b6:	00 0c       	add	r0, r0
    f1b8:	99 0b       	sbc	r25, r25
    f1ba:	02 c0       	rjmp	.+4      	; 0xf1c0 <unlink+0x2a>
    f1bc:	83 e2       	ldi	r24, 0x23	; 35
    f1be:	90 e0       	ldi	r25, 0x00	; 0
    f1c0:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f1c4:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f1c8:	8f ef       	ldi	r24, 0xFF	; 255
    f1ca:	9f ef       	ldi	r25, 0xFF	; 255
    f1cc:	08 95       	ret
    f1ce:	80 e0       	ldi	r24, 0x00	; 0
    f1d0:	90 e0       	ldi	r25, 0x00	; 0
    f1d2:	08 95       	ret

0000f1d4 <rmdir>:
    f1d4:	e0 cf       	rjmp	.-64     	; 0xf196 <unlink>
    f1d6:	08 95       	ret

0000f1d8 <closedir>:
    f1d8:	0e 94 0d 65 	call	0xca1a	; 0xca1a <f_closedir>
    f1dc:	00 97       	sbiw	r24, 0x00	; 0
    f1de:	a1 f0       	breq	.+40     	; 0xf208 <closedir+0x30>
    f1e0:	84 31       	cpi	r24, 0x14	; 20
    f1e2:	91 05       	cpc	r25, r1
    f1e4:	40 f4       	brcc	.+16     	; 0xf1f6 <closedir+0x1e>
    f1e6:	fc 01       	movw	r30, r24
    f1e8:	ea 53       	subi	r30, 0x3A	; 58
    f1ea:	f5 4f       	sbci	r31, 0xF5	; 245
    f1ec:	80 81       	ld	r24, Z
    f1ee:	08 2e       	mov	r0, r24
    f1f0:	00 0c       	add	r0, r0
    f1f2:	99 0b       	sbc	r25, r25
    f1f4:	02 c0       	rjmp	.+4      	; 0xf1fa <closedir+0x22>
    f1f6:	83 e2       	ldi	r24, 0x23	; 35
    f1f8:	90 e0       	ldi	r25, 0x00	; 0
    f1fa:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f1fe:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f202:	8f ef       	ldi	r24, 0xFF	; 255
    f204:	9f ef       	ldi	r25, 0xFF	; 255
    f206:	08 95       	ret
    f208:	80 e0       	ldi	r24, 0x00	; 0
    f20a:	90 e0       	ldi	r25, 0x00	; 0
    f20c:	08 95       	ret

0000f20e <opendir>:
    f20e:	bc 01       	movw	r22, r24
    f210:	8d ec       	ldi	r24, 0xCD	; 205
    f212:	98 e1       	ldi	r25, 0x18	; 24
    f214:	0e 94 9c 64 	call	0xc938	; 0xc938 <f_opendir>
    f218:	00 97       	sbiw	r24, 0x00	; 0
    f21a:	a1 f0       	breq	.+40     	; 0xf244 <opendir+0x36>
    f21c:	84 31       	cpi	r24, 0x14	; 20
    f21e:	91 05       	cpc	r25, r1
    f220:	40 f4       	brcc	.+16     	; 0xf232 <opendir+0x24>
    f222:	fc 01       	movw	r30, r24
    f224:	ea 53       	subi	r30, 0x3A	; 58
    f226:	f5 4f       	sbci	r31, 0xF5	; 245
    f228:	80 81       	ld	r24, Z
    f22a:	08 2e       	mov	r0, r24
    f22c:	00 0c       	add	r0, r0
    f22e:	99 0b       	sbc	r25, r25
    f230:	02 c0       	rjmp	.+4      	; 0xf236 <opendir+0x28>
    f232:	83 e2       	ldi	r24, 0x23	; 35
    f234:	90 e0       	ldi	r25, 0x00	; 0
    f236:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f23a:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f23e:	80 e0       	ldi	r24, 0x00	; 0
    f240:	90 e0       	ldi	r25, 0x00	; 0
    f242:	08 95       	ret
    f244:	8d ec       	ldi	r24, 0xCD	; 205
    f246:	98 e1       	ldi	r25, 0x18	; 24
    f248:	08 95       	ret

0000f24a <readdir>:
    f24a:	a6 e1       	ldi	r26, 0x16	; 22
    f24c:	b1 e0       	ldi	r27, 0x01	; 1
    f24e:	eb e2       	ldi	r30, 0x2B	; 43
    f250:	f9 e7       	ldi	r31, 0x79	; 121
    f252:	0c 94 94 e4 	jmp	0x1c928	; 0x1c928 <__prologue_saves__+0x1c>
    f256:	10 92 ce 17 	sts	0x17CE, r1	; 0x8017ce <_de>
    f25a:	be 01       	movw	r22, r28
    f25c:	6f 5f       	subi	r22, 0xFF	; 255
    f25e:	7f 4f       	sbci	r23, 0xFF	; 255
    f260:	0e 94 22 65 	call	0xca44	; 0xca44 <f_readdir>
    f264:	00 97       	sbiw	r24, 0x00	; 0
    f266:	a1 f0       	breq	.+40     	; 0xf290 <readdir+0x46>
    f268:	84 31       	cpi	r24, 0x14	; 20
    f26a:	91 05       	cpc	r25, r1
    f26c:	40 f4       	brcc	.+16     	; 0xf27e <readdir+0x34>
    f26e:	fc 01       	movw	r30, r24
    f270:	ea 53       	subi	r30, 0x3A	; 58
    f272:	f5 4f       	sbci	r31, 0xF5	; 245
    f274:	80 81       	ld	r24, Z
    f276:	08 2e       	mov	r0, r24
    f278:	00 0c       	add	r0, r0
    f27a:	99 0b       	sbc	r25, r25
    f27c:	02 c0       	rjmp	.+4      	; 0xf282 <readdir+0x38>
    f27e:	83 e2       	ldi	r24, 0x23	; 35
    f280:	90 e0       	ldi	r25, 0x00	; 0
    f282:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f286:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f28a:	80 e0       	ldi	r24, 0x00	; 0
    f28c:	90 e0       	ldi	r25, 0x00	; 0
    f28e:	16 c0       	rjmp	.+44     	; 0xf2bc <readdir+0x72>
    f290:	be 01       	movw	r22, r28
    f292:	69 5e       	subi	r22, 0xE9	; 233
    f294:	7f 4f       	sbci	r23, 0xFF	; 255
    f296:	fb 01       	movw	r30, r22
    f298:	01 90       	ld	r0, Z+
    f29a:	00 20       	and	r0, r0
    f29c:	e9 f7       	brne	.-6      	; 0xf298 <readdir+0x4e>
    f29e:	31 97       	sbiw	r30, 0x01	; 1
    f2a0:	8f 01       	movw	r16, r30
    f2a2:	06 1b       	sub	r16, r22
    f2a4:	17 0b       	sbc	r17, r23
    f2a6:	a8 01       	movw	r20, r16
    f2a8:	8e ec       	ldi	r24, 0xCE	; 206
    f2aa:	97 e1       	ldi	r25, 0x17	; 23
    f2ac:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <strncpy>
    f2b0:	f8 01       	movw	r30, r16
    f2b2:	e2 53       	subi	r30, 0x32	; 50
    f2b4:	f8 4e       	sbci	r31, 0xE8	; 232
    f2b6:	10 82       	st	Z, r1
    f2b8:	8e ec       	ldi	r24, 0xCE	; 206
    f2ba:	97 e1       	ldi	r25, 0x17	; 23
    f2bc:	ca 5e       	subi	r28, 0xEA	; 234
    f2be:	de 4f       	sbci	r29, 0xFE	; 254
    f2c0:	e4 e0       	ldi	r30, 0x04	; 4
    f2c2:	0c 94 b0 e4 	jmp	0x1c960	; 0x1c960 <__epilogue_restores__+0x1c>

0000f2c6 <perror>:
    f2c6:	ad b7       	in	r26, 0x3d	; 61
    f2c8:	be b7       	in	r27, 0x3e	; 62
    f2ca:	17 97       	sbiw	r26, 0x07	; 7
    f2cc:	0f b6       	in	r0, 0x3f	; 63
    f2ce:	f8 94       	cli
    f2d0:	be bf       	out	0x3e, r27	; 62
    f2d2:	0f be       	out	0x3f, r0	; 63
    f2d4:	ad bf       	out	0x3d, r26	; 61
    f2d6:	20 91 55 1c 	lds	r18, 0x1C55	; 0x801c55 <errno>
    f2da:	30 91 56 1c 	lds	r19, 0x1C56	; 0x801c56 <errno+0x1>
    f2de:	23 32       	cpi	r18, 0x23	; 35
    f2e0:	31 05       	cpc	r19, r1
    f2e2:	40 f4       	brcc	.+16     	; 0xf2f4 <perror+0x2e>
    f2e4:	22 0f       	add	r18, r18
    f2e6:	33 1f       	adc	r19, r19
    f2e8:	f9 01       	movw	r30, r18
    f2ea:	ed 5b       	subi	r30, 0xBD	; 189
    f2ec:	fe 4f       	sbci	r31, 0xFE	; 254
    f2ee:	20 81       	ld	r18, Z
    f2f0:	31 81       	ldd	r19, Z+1	; 0x01
    f2f2:	04 c0       	rjmp	.+8      	; 0xf2fc <perror+0x36>
    f2f4:	20 91 89 01 	lds	r18, 0x0189	; 0x800189 <sys_errlist+0x46>
    f2f8:	30 91 8a 01 	lds	r19, 0x018A	; 0x80018a <sys_errlist+0x47>
    f2fc:	00 97       	sbiw	r24, 0x00	; 0
    f2fe:	99 f0       	breq	.+38     	; 0xf326 <perror+0x60>
    f300:	fc 01       	movw	r30, r24
    f302:	40 81       	ld	r20, Z
    f304:	44 23       	and	r20, r20
    f306:	79 f0       	breq	.+30     	; 0xf326 <perror+0x60>
    f308:	ed b7       	in	r30, 0x3d	; 61
    f30a:	fe b7       	in	r31, 0x3e	; 62
    f30c:	37 83       	std	Z+7, r19	; 0x07
    f30e:	26 83       	std	Z+6, r18	; 0x06
    f310:	95 83       	std	Z+5, r25	; 0x05
    f312:	84 83       	std	Z+4, r24	; 0x04
    f314:	8c e2       	ldi	r24, 0x2C	; 44
    f316:	9b e0       	ldi	r25, 0x0B	; 11
    f318:	a0 e0       	ldi	r26, 0x00	; 0
    f31a:	81 83       	std	Z+1, r24	; 0x01
    f31c:	92 83       	std	Z+2, r25	; 0x02
    f31e:	a3 83       	std	Z+3, r26	; 0x03
    f320:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    f324:	0c c0       	rjmp	.+24     	; 0xf33e <perror+0x78>
    f326:	ed b7       	in	r30, 0x3d	; 61
    f328:	fe b7       	in	r31, 0x3e	; 62
    f32a:	35 83       	std	Z+5, r19	; 0x05
    f32c:	24 83       	std	Z+4, r18	; 0x04
    f32e:	88 e2       	ldi	r24, 0x28	; 40
    f330:	9b e0       	ldi	r25, 0x0B	; 11
    f332:	a0 e0       	ldi	r26, 0x00	; 0
    f334:	81 83       	std	Z+1, r24	; 0x01
    f336:	92 83       	std	Z+2, r25	; 0x02
    f338:	a3 83       	std	Z+3, r26	; 0x03
    f33a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    f33e:	ad b7       	in	r26, 0x3d	; 61
    f340:	be b7       	in	r27, 0x3e	; 62
    f342:	17 96       	adiw	r26, 0x07	; 7
    f344:	0f b6       	in	r0, 0x3f	; 63
    f346:	f8 94       	cli
    f348:	be bf       	out	0x3e, r27	; 62
    f34a:	0f be       	out	0x3f, r0	; 63
    f34c:	ad bf       	out	0x3d, r26	; 61
    f34e:	08 95       	ret

0000f350 <fdevopen>:
    f350:	0f 93       	push	r16
    f352:	1f 93       	push	r17
    f354:	cf 93       	push	r28
    f356:	df 93       	push	r29
    f358:	00 97       	sbiw	r24, 0x00	; 0
    f35a:	31 f4       	brne	.+12     	; 0xf368 <fdevopen+0x18>
    f35c:	61 15       	cp	r22, r1
    f35e:	71 05       	cpc	r23, r1
    f360:	19 f4       	brne	.+6      	; 0xf368 <fdevopen+0x18>
    f362:	80 e0       	ldi	r24, 0x00	; 0
    f364:	90 e0       	ldi	r25, 0x00	; 0
    f366:	3a c0       	rjmp	.+116    	; 0xf3dc <fdevopen+0x8c>
    f368:	8b 01       	movw	r16, r22
    f36a:	ec 01       	movw	r28, r24
    f36c:	6e e0       	ldi	r22, 0x0E	; 14
    f36e:	70 e0       	ldi	r23, 0x00	; 0
    f370:	81 e0       	ldi	r24, 0x01	; 1
    f372:	90 e0       	ldi	r25, 0x00	; 0
    f374:	0e 94 75 29 	call	0x52ea	; 0x52ea <safecalloc>
    f378:	fc 01       	movw	r30, r24
    f37a:	89 2b       	or	r24, r25
    f37c:	91 f3       	breq	.-28     	; 0xf362 <fdevopen+0x12>
    f37e:	80 e8       	ldi	r24, 0x80	; 128
    f380:	83 83       	std	Z+3, r24	; 0x03
    f382:	01 15       	cp	r16, r1
    f384:	11 05       	cpc	r17, r1
    f386:	71 f0       	breq	.+28     	; 0xf3a4 <fdevopen+0x54>
    f388:	13 87       	std	Z+11, r17	; 0x0b
    f38a:	02 87       	std	Z+10, r16	; 0x0a
    f38c:	81 e8       	ldi	r24, 0x81	; 129
    f38e:	83 83       	std	Z+3, r24	; 0x03
    f390:	80 91 57 1c 	lds	r24, 0x1C57	; 0x801c57 <__iob>
    f394:	90 91 58 1c 	lds	r25, 0x1C58	; 0x801c58 <__iob+0x1>
    f398:	89 2b       	or	r24, r25
    f39a:	21 f4       	brne	.+8      	; 0xf3a4 <fdevopen+0x54>
    f39c:	f0 93 58 1c 	sts	0x1C58, r31	; 0x801c58 <__iob+0x1>
    f3a0:	e0 93 57 1c 	sts	0x1C57, r30	; 0x801c57 <__iob>
    f3a4:	20 97       	sbiw	r28, 0x00	; 0
    f3a6:	c9 f0       	breq	.+50     	; 0xf3da <fdevopen+0x8a>
    f3a8:	d1 87       	std	Z+9, r29	; 0x09
    f3aa:	c0 87       	std	Z+8, r28	; 0x08
    f3ac:	83 81       	ldd	r24, Z+3	; 0x03
    f3ae:	82 60       	ori	r24, 0x02	; 2
    f3b0:	83 83       	std	Z+3, r24	; 0x03
    f3b2:	80 91 59 1c 	lds	r24, 0x1C59	; 0x801c59 <__iob+0x2>
    f3b6:	90 91 5a 1c 	lds	r25, 0x1C5A	; 0x801c5a <__iob+0x3>
    f3ba:	89 2b       	or	r24, r25
    f3bc:	21 f4       	brne	.+8      	; 0xf3c6 <fdevopen+0x76>
    f3be:	f0 93 5a 1c 	sts	0x1C5A, r31	; 0x801c5a <__iob+0x3>
    f3c2:	e0 93 59 1c 	sts	0x1C59, r30	; 0x801c59 <__iob+0x2>
    f3c6:	80 91 5b 1c 	lds	r24, 0x1C5B	; 0x801c5b <__iob+0x4>
    f3ca:	90 91 5c 1c 	lds	r25, 0x1C5C	; 0x801c5c <__iob+0x5>
    f3ce:	89 2b       	or	r24, r25
    f3d0:	21 f4       	brne	.+8      	; 0xf3da <fdevopen+0x8a>
    f3d2:	f0 93 5c 1c 	sts	0x1C5C, r31	; 0x801c5c <__iob+0x5>
    f3d6:	e0 93 5b 1c 	sts	0x1C5B, r30	; 0x801c5b <__iob+0x4>
    f3da:	cf 01       	movw	r24, r30
    f3dc:	df 91       	pop	r29
    f3de:	cf 91       	pop	r28
    f3e0:	1f 91       	pop	r17
    f3e2:	0f 91       	pop	r16
    f3e4:	08 95       	ret

0000f3e6 <fat_time_to_unix>:
    f3e6:	a6 e1       	ldi	r26, 0x16	; 22
    f3e8:	b0 e0       	ldi	r27, 0x00	; 0
    f3ea:	e9 ef       	ldi	r30, 0xF9	; 249
    f3ec:	f9 e7       	ldi	r31, 0x79	; 121
    f3ee:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
    f3f2:	fe 01       	movw	r30, r28
    f3f4:	31 96       	adiw	r30, 0x01	; 1
    f3f6:	26 e1       	ldi	r18, 0x16	; 22
    f3f8:	df 01       	movw	r26, r30
    f3fa:	1d 92       	st	X+, r1
    f3fc:	2a 95       	dec	r18
    f3fe:	e9 f7       	brne	.-6      	; 0xf3fa <fat_time_to_unix+0x14>
    f400:	9b 01       	movw	r18, r22
    f402:	22 0f       	add	r18, r18
    f404:	33 1f       	adc	r19, r19
    f406:	2e 73       	andi	r18, 0x3E	; 62
    f408:	33 27       	eor	r19, r19
    f40a:	3a 83       	std	Y+2, r19	; 0x02
    f40c:	29 83       	std	Y+1, r18	; 0x01
    f40e:	9b 01       	movw	r18, r22
    f410:	55 e0       	ldi	r21, 0x05	; 5
    f412:	36 95       	lsr	r19
    f414:	27 95       	ror	r18
    f416:	5a 95       	dec	r21
    f418:	e1 f7       	brne	.-8      	; 0xf412 <fat_time_to_unix+0x2c>
    f41a:	2f 73       	andi	r18, 0x3F	; 63
    f41c:	33 27       	eor	r19, r19
    f41e:	3c 83       	std	Y+4, r19	; 0x04
    f420:	2b 83       	std	Y+3, r18	; 0x03
    f422:	27 2f       	mov	r18, r23
    f424:	26 95       	lsr	r18
    f426:	26 95       	lsr	r18
    f428:	26 95       	lsr	r18
    f42a:	2d 83       	std	Y+5, r18	; 0x05
    f42c:	1e 82       	std	Y+6, r1	; 0x06
    f42e:	9c 01       	movw	r18, r24
    f430:	2f 71       	andi	r18, 0x1F	; 31
    f432:	33 27       	eor	r19, r19
    f434:	38 87       	std	Y+8, r19	; 0x08
    f436:	2f 83       	std	Y+7, r18	; 0x07
    f438:	9c 01       	movw	r18, r24
    f43a:	65 e0       	ldi	r22, 0x05	; 5
    f43c:	36 95       	lsr	r19
    f43e:	27 95       	ror	r18
    f440:	6a 95       	dec	r22
    f442:	e1 f7       	brne	.-8      	; 0xf43c <fat_time_to_unix+0x56>
    f444:	2f 70       	andi	r18, 0x0F	; 15
    f446:	33 27       	eor	r19, r19
    f448:	21 50       	subi	r18, 0x01	; 1
    f44a:	31 09       	sbc	r19, r1
    f44c:	3a 87       	std	Y+10, r19	; 0x0a
    f44e:	29 87       	std	Y+9, r18	; 0x09
    f450:	9c 01       	movw	r18, r24
    f452:	23 2f       	mov	r18, r19
    f454:	33 27       	eor	r19, r19
    f456:	26 95       	lsr	r18
    f458:	20 5b       	subi	r18, 0xB0	; 176
    f45a:	3f 4f       	sbci	r19, 0xFF	; 255
    f45c:	3c 87       	std	Y+12, r19	; 0x0c
    f45e:	2b 87       	std	Y+11, r18	; 0x0b
    f460:	cf 01       	movw	r24, r30
    f462:	0e 94 82 3b 	call	0x7704	; 0x7704 <timegm>
    f466:	66 96       	adiw	r28, 0x16	; 22
    f468:	e2 e0       	ldi	r30, 0x02	; 2
    f46a:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

0000f46e <stat>:
    f46e:	a6 e1       	ldi	r26, 0x16	; 22
    f470:	b1 e0       	ldi	r27, 0x01	; 1
    f472:	ed e3       	ldi	r30, 0x3D	; 61
    f474:	fa e7       	ldi	r31, 0x7A	; 122
    f476:	0c 94 90 e4 	jmp	0x1c920	; 0x1c920 <__prologue_saves__+0x14>
    f47a:	6c 01       	movw	r12, r24
    f47c:	8b 01       	movw	r16, r22
    f47e:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    f482:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    f486:	6c e1       	ldi	r22, 0x1C	; 28
    f488:	78 e0       	ldi	r23, 0x08	; 8
    f48a:	0e 94 59 33 	call	0x66b2	; 0x66b2 <MATCH>
    f48e:	89 2b       	or	r24, r25
    f490:	01 f1       	breq	.+64     	; 0xf4d2 <stat+0x64>
    f492:	f8 01       	movw	r30, r16
    f494:	14 a2       	std	Z+36, r1	; 0x24
    f496:	15 a2       	std	Z+37, r1	; 0x25
    f498:	16 a2       	std	Z+38, r1	; 0x26
    f49a:	17 a2       	std	Z+39, r1	; 0x27
    f49c:	10 a6       	std	Z+40, r1	; 0x28
    f49e:	11 a6       	std	Z+41, r1	; 0x29
    f4a0:	12 a6       	std	Z+42, r1	; 0x2a
    f4a2:	13 a6       	std	Z+43, r1	; 0x2b
    f4a4:	14 a6       	std	Z+44, r1	; 0x2c
    f4a6:	15 a6       	std	Z+45, r1	; 0x2d
    f4a8:	16 a6       	std	Z+46, r1	; 0x2e
    f4aa:	17 a6       	std	Z+47, r1	; 0x2f
    f4ac:	11 8a       	std	Z+17, r1	; 0x11
    f4ae:	10 8a       	std	Z+16, r1	; 0x10
    f4b0:	13 8a       	std	Z+19, r1	; 0x13
    f4b2:	12 8a       	std	Z+18, r1	; 0x12
    f4b4:	10 8e       	std	Z+24, r1	; 0x18
    f4b6:	11 8e       	std	Z+25, r1	; 0x19
    f4b8:	12 8e       	std	Z+26, r1	; 0x1a
    f4ba:	13 8e       	std	Z+27, r1	; 0x1b
    f4bc:	80 e0       	ldi	r24, 0x00	; 0
    f4be:	90 e4       	ldi	r25, 0x40	; 64
    f4c0:	a0 e0       	ldi	r26, 0x00	; 0
    f4c2:	b0 e0       	ldi	r27, 0x00	; 0
    f4c4:	80 87       	std	Z+8, r24	; 0x08
    f4c6:	91 87       	std	Z+9, r25	; 0x09
    f4c8:	a2 87       	std	Z+10, r26	; 0x0a
    f4ca:	b3 87       	std	Z+11, r27	; 0x0b
    f4cc:	e1 2c       	mov	r14, r1
    f4ce:	f1 2c       	mov	r15, r1
    f4d0:	62 c0       	rjmp	.+196    	; 0xf596 <stat+0x128>
    f4d2:	66 ec       	ldi	r22, 0xC6	; 198
    f4d4:	77 e0       	ldi	r23, 0x07	; 7
    f4d6:	c6 01       	movw	r24, r12
    f4d8:	0e 94 59 33 	call	0x66b2	; 0x66b2 <MATCH>
    f4dc:	89 2b       	or	r24, r25
    f4de:	c9 f6       	brne	.-78     	; 0xf492 <stat+0x24>
    f4e0:	6d e0       	ldi	r22, 0x0D	; 13
    f4e2:	72 e1       	ldi	r23, 0x12	; 18
    f4e4:	c6 01       	movw	r24, r12
    f4e6:	0e 94 59 33 	call	0x66b2	; 0x66b2 <MATCH>
    f4ea:	7c 01       	movw	r14, r24
    f4ec:	89 2b       	or	r24, r25
    f4ee:	89 f6       	brne	.-94     	; 0xf492 <stat+0x24>
    f4f0:	be 01       	movw	r22, r28
    f4f2:	6f 5f       	subi	r22, 0xFF	; 255
    f4f4:	7f 4f       	sbci	r23, 0xFF	; 255
    f4f6:	c6 01       	movw	r24, r12
    f4f8:	0e 94 66 65 	call	0xcacc	; 0xcacc <f_stat>
    f4fc:	00 97       	sbiw	r24, 0x00	; 0
    f4fe:	a9 f0       	breq	.+42     	; 0xf52a <stat+0xbc>
    f500:	84 31       	cpi	r24, 0x14	; 20
    f502:	91 05       	cpc	r25, r1
    f504:	40 f4       	brcc	.+16     	; 0xf516 <stat+0xa8>
    f506:	fc 01       	movw	r30, r24
    f508:	ea 53       	subi	r30, 0x3A	; 58
    f50a:	f5 4f       	sbci	r31, 0xF5	; 245
    f50c:	80 81       	ld	r24, Z
    f50e:	08 2e       	mov	r0, r24
    f510:	00 0c       	add	r0, r0
    f512:	99 0b       	sbc	r25, r25
    f514:	02 c0       	rjmp	.+4      	; 0xf51a <stat+0xac>
    f516:	83 e2       	ldi	r24, 0x23	; 35
    f518:	90 e0       	ldi	r25, 0x00	; 0
    f51a:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f51e:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f522:	ee 24       	eor	r14, r14
    f524:	ea 94       	dec	r14
    f526:	fe 2c       	mov	r15, r14
    f528:	36 c0       	rjmp	.+108    	; 0xf596 <stat+0x128>
    f52a:	89 81       	ldd	r24, Y+1	; 0x01
    f52c:	9a 81       	ldd	r25, Y+2	; 0x02
    f52e:	ab 81       	ldd	r26, Y+3	; 0x03
    f530:	bc 81       	ldd	r27, Y+4	; 0x04
    f532:	f8 01       	movw	r30, r16
    f534:	80 8f       	std	Z+24, r24	; 0x18
    f536:	91 8f       	std	Z+25, r25	; 0x19
    f538:	a2 8f       	std	Z+26, r26	; 0x1a
    f53a:	b3 8f       	std	Z+27, r27	; 0x1b
    f53c:	6f 81       	ldd	r22, Y+7	; 0x07
    f53e:	78 85       	ldd	r23, Y+8	; 0x08
    f540:	8d 81       	ldd	r24, Y+5	; 0x05
    f542:	9e 81       	ldd	r25, Y+6	; 0x06
    f544:	50 df       	rcall	.-352    	; 0xf3e6 <fat_time_to_unix>
    f546:	f8 01       	movw	r30, r16
    f548:	64 a3       	std	Z+36, r22	; 0x24
    f54a:	75 a3       	std	Z+37, r23	; 0x25
    f54c:	86 a3       	std	Z+38, r24	; 0x26
    f54e:	97 a3       	std	Z+39, r25	; 0x27
    f550:	60 a7       	std	Z+40, r22	; 0x28
    f552:	71 a7       	std	Z+41, r23	; 0x29
    f554:	82 a7       	std	Z+42, r24	; 0x2a
    f556:	93 a7       	std	Z+43, r25	; 0x2b
    f558:	64 a7       	std	Z+44, r22	; 0x2c
    f55a:	75 a7       	std	Z+45, r23	; 0x2d
    f55c:	86 a7       	std	Z+46, r24	; 0x2e
    f55e:	97 a7       	std	Z+47, r25	; 0x2f
    f560:	29 85       	ldd	r18, Y+9	; 0x09
    f562:	20 fd       	sbrc	r18, 0
    f564:	03 c0       	rjmp	.+6      	; 0xf56c <stat+0xfe>
    f566:	8f ef       	ldi	r24, 0xFF	; 255
    f568:	91 e0       	ldi	r25, 0x01	; 1
    f56a:	02 c0       	rjmp	.+4      	; 0xf570 <stat+0x102>
    f56c:	8d e6       	ldi	r24, 0x6D	; 109
    f56e:	91 e0       	ldi	r25, 0x01	; 1
    f570:	48 ee       	ldi	r20, 0xE8	; 232
    f572:	53 e0       	ldi	r21, 0x03	; 3
    f574:	f8 01       	movw	r30, r16
    f576:	51 8b       	std	Z+17, r21	; 0x11
    f578:	40 8b       	std	Z+16, r20	; 0x10
    f57a:	53 8b       	std	Z+19, r21	; 0x13
    f57c:	42 8b       	std	Z+18, r20	; 0x12
    f57e:	24 ff       	sbrs	r18, 4
    f580:	02 c0       	rjmp	.+4      	; 0xf586 <stat+0x118>
    f582:	90 64       	ori	r25, 0x40	; 64
    f584:	01 c0       	rjmp	.+2      	; 0xf588 <stat+0x11a>
    f586:	90 68       	ori	r25, 0x80	; 128
    f588:	a0 e0       	ldi	r26, 0x00	; 0
    f58a:	b0 e0       	ldi	r27, 0x00	; 0
    f58c:	f8 01       	movw	r30, r16
    f58e:	80 87       	std	Z+8, r24	; 0x08
    f590:	91 87       	std	Z+9, r25	; 0x09
    f592:	a2 87       	std	Z+10, r26	; 0x0a
    f594:	b3 87       	std	Z+11, r27	; 0x0b
    f596:	c7 01       	movw	r24, r14
    f598:	ca 5e       	subi	r28, 0xEA	; 234
    f59a:	de 4f       	sbci	r29, 0xFE	; 254
    f59c:	e8 e0       	ldi	r30, 0x08	; 8
    f59e:	0c 94 ac e4 	jmp	0x1c958	; 0x1c958 <__epilogue_restores__+0x14>

0000f5a2 <unix_time_to_fat>:
    f5a2:	a4 e0       	ldi	r26, 0x04	; 4
    f5a4:	b0 e0       	ldi	r27, 0x00	; 0
    f5a6:	e7 ed       	ldi	r30, 0xD7	; 215
    f5a8:	fa e7       	ldi	r31, 0x7A	; 122
    f5aa:	0c 94 92 e4 	jmp	0x1c924	; 0x1c924 <__prologue_saves__+0x18>
    f5ae:	69 83       	std	Y+1, r22	; 0x01
    f5b0:	7a 83       	std	Y+2, r23	; 0x02
    f5b2:	8b 83       	std	Y+3, r24	; 0x03
    f5b4:	9c 83       	std	Y+4, r25	; 0x04
    f5b6:	7a 01       	movw	r14, r20
    f5b8:	89 01       	movw	r16, r18
    f5ba:	ce 01       	movw	r24, r28
    f5bc:	01 96       	adiw	r24, 0x01	; 1
    f5be:	0e 94 c3 38 	call	0x7186	; 0x7186 <gmtime>
    f5c2:	fc 01       	movw	r30, r24
    f5c4:	22 85       	ldd	r18, Z+10	; 0x0a
    f5c6:	33 85       	ldd	r19, Z+11	; 0x0b
    f5c8:	20 55       	subi	r18, 0x50	; 80
    f5ca:	31 09       	sbc	r19, r1
    f5cc:	c9 01       	movw	r24, r18
    f5ce:	98 2f       	mov	r25, r24
    f5d0:	88 27       	eor	r24, r24
    f5d2:	99 0f       	add	r25, r25
    f5d4:	20 85       	ldd	r18, Z+8	; 0x08
    f5d6:	31 85       	ldd	r19, Z+9	; 0x09
    f5d8:	2f 5f       	subi	r18, 0xFF	; 255
    f5da:	3f 4f       	sbci	r19, 0xFF	; 255
    f5dc:	45 e0       	ldi	r20, 0x05	; 5
    f5de:	22 0f       	add	r18, r18
    f5e0:	33 1f       	adc	r19, r19
    f5e2:	4a 95       	dec	r20
    f5e4:	e1 f7       	brne	.-8      	; 0xf5de <unix_time_to_fat+0x3c>
    f5e6:	28 2b       	or	r18, r24
    f5e8:	39 2b       	or	r19, r25
    f5ea:	86 81       	ldd	r24, Z+6	; 0x06
    f5ec:	97 81       	ldd	r25, Z+7	; 0x07
    f5ee:	28 2b       	or	r18, r24
    f5f0:	39 2b       	or	r19, r25
    f5f2:	d7 01       	movw	r26, r14
    f5f4:	2d 93       	st	X+, r18
    f5f6:	3c 93       	st	X, r19
    f5f8:	84 81       	ldd	r24, Z+4	; 0x04
    f5fa:	20 e0       	ldi	r18, 0x00	; 0
    f5fc:	30 e0       	ldi	r19, 0x00	; 0
    f5fe:	38 2f       	mov	r19, r24
    f600:	33 0f       	add	r19, r19
    f602:	33 0f       	add	r19, r19
    f604:	33 0f       	add	r19, r19
    f606:	82 81       	ldd	r24, Z+2	; 0x02
    f608:	93 81       	ldd	r25, Z+3	; 0x03
    f60a:	55 e0       	ldi	r21, 0x05	; 5
    f60c:	88 0f       	add	r24, r24
    f60e:	99 1f       	adc	r25, r25
    f610:	5a 95       	dec	r21
    f612:	e1 f7       	brne	.-8      	; 0xf60c <unix_time_to_fat+0x6a>
    f614:	82 2b       	or	r24, r18
    f616:	93 2b       	or	r25, r19
    f618:	20 81       	ld	r18, Z
    f61a:	31 81       	ldd	r19, Z+1	; 0x01
    f61c:	36 95       	lsr	r19
    f61e:	27 95       	ror	r18
    f620:	82 2b       	or	r24, r18
    f622:	93 2b       	or	r25, r19
    f624:	f8 01       	movw	r30, r16
    f626:	91 83       	std	Z+1, r25	; 0x01
    f628:	80 83       	st	Z, r24
    f62a:	24 96       	adiw	r28, 0x04	; 4
    f62c:	e6 e0       	ldi	r30, 0x06	; 6
    f62e:	0c 94 ae e4 	jmp	0x1c95c	; 0x1c95c <__epilogue_restores__+0x18>

0000f632 <utime>:
    f632:	aa e1       	ldi	r26, 0x1A	; 26
    f634:	b1 e0       	ldi	r27, 0x01	; 1
    f636:	ef e1       	ldi	r30, 0x1F	; 31
    f638:	fb e7       	ldi	r31, 0x7B	; 123
    f63a:	0c 94 94 e4 	jmp	0x1c928	; 0x1c928 <__prologue_saves__+0x1c>
    f63e:	8c 01       	movw	r16, r24
    f640:	61 15       	cp	r22, r1
    f642:	71 05       	cpc	r23, r1
    f644:	31 f0       	breq	.+12     	; 0xf652 <utime+0x20>
    f646:	fb 01       	movw	r30, r22
    f648:	64 81       	ldd	r22, Z+4	; 0x04
    f64a:	75 81       	ldd	r23, Z+5	; 0x05
    f64c:	86 81       	ldd	r24, Z+6	; 0x06
    f64e:	97 81       	ldd	r25, Z+7	; 0x07
    f650:	04 c0       	rjmp	.+8      	; 0xf65a <utime+0x28>
    f652:	80 e0       	ldi	r24, 0x00	; 0
    f654:	90 e0       	ldi	r25, 0x00	; 0
    f656:	0e 94 1d 39 	call	0x723a	; 0x723a <time>
    f65a:	9e 01       	movw	r18, r28
    f65c:	29 5e       	subi	r18, 0xE9	; 233
    f65e:	3e 4f       	sbci	r19, 0xFE	; 254
    f660:	ae 01       	movw	r20, r28
    f662:	47 5e       	subi	r20, 0xE7	; 231
    f664:	5e 4f       	sbci	r21, 0xFE	; 254
    f666:	9d df       	rcall	.-198    	; 0xf5a2 <unix_time_to_fat>
    f668:	c7 5e       	subi	r28, 0xE7	; 231
    f66a:	de 4f       	sbci	r29, 0xFE	; 254
    f66c:	88 81       	ld	r24, Y
    f66e:	99 81       	ldd	r25, Y+1	; 0x01
    f670:	c9 51       	subi	r28, 0x19	; 25
    f672:	d1 40       	sbci	r29, 0x01	; 1
    f674:	9e 83       	std	Y+6, r25	; 0x06
    f676:	8d 83       	std	Y+5, r24	; 0x05
    f678:	c9 5e       	subi	r28, 0xE9	; 233
    f67a:	de 4f       	sbci	r29, 0xFE	; 254
    f67c:	88 81       	ld	r24, Y
    f67e:	99 81       	ldd	r25, Y+1	; 0x01
    f680:	c7 51       	subi	r28, 0x17	; 23
    f682:	d1 40       	sbci	r29, 0x01	; 1
    f684:	98 87       	std	Y+8, r25	; 0x08
    f686:	8f 83       	std	Y+7, r24	; 0x07
    f688:	be 01       	movw	r22, r28
    f68a:	6f 5f       	subi	r22, 0xFF	; 255
    f68c:	7f 4f       	sbci	r23, 0xFF	; 255
    f68e:	c8 01       	movw	r24, r16
    f690:	0e 94 7d 69 	call	0xd2fa	; 0xd2fa <f_utime>
    f694:	84 31       	cpi	r24, 0x14	; 20
    f696:	91 05       	cpc	r25, r1
    f698:	40 f4       	brcc	.+16     	; 0xf6aa <utime+0x78>
    f69a:	fc 01       	movw	r30, r24
    f69c:	ea 53       	subi	r30, 0x3A	; 58
    f69e:	f5 4f       	sbci	r31, 0xF5	; 245
    f6a0:	80 81       	ld	r24, Z
    f6a2:	08 2e       	mov	r0, r24
    f6a4:	00 0c       	add	r0, r0
    f6a6:	99 0b       	sbc	r25, r25
    f6a8:	02 c0       	rjmp	.+4      	; 0xf6ae <utime+0x7c>
    f6aa:	83 e2       	ldi	r24, 0x23	; 35
    f6ac:	90 e0       	ldi	r25, 0x00	; 0
    f6ae:	c6 5e       	subi	r28, 0xE6	; 230
    f6b0:	de 4f       	sbci	r29, 0xFE	; 254
    f6b2:	e4 e0       	ldi	r30, 0x04	; 4
    f6b4:	0c 94 b0 e4 	jmp	0x1c960	; 0x1c960 <__epilogue_restores__+0x1c>

0000f6b8 <fileno_to_fatfs>:
    f6b8:	83 30       	cpi	r24, 0x03	; 3
    f6ba:	91 05       	cpc	r25, r1
    f6bc:	48 f4       	brcc	.+18     	; 0xf6d0 <fileno_to_fatfs+0x18>
    f6be:	89 e0       	ldi	r24, 0x09	; 9
    f6c0:	90 e0       	ldi	r25, 0x00	; 0
    f6c2:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f6c6:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f6ca:	80 e0       	ldi	r24, 0x00	; 0
    f6cc:	90 e0       	ldi	r25, 0x00	; 0
    f6ce:	08 95       	ret
    f6d0:	60 dc       	rcall	.-1856   	; 0xef92 <fileno_to_stream>
    f6d2:	00 97       	sbiw	r24, 0x00	; 0
    f6d4:	d1 f3       	breq	.-12     	; 0xf6ca <fileno_to_fatfs+0x12>
    f6d6:	fc 01       	movw	r30, r24
    f6d8:	84 85       	ldd	r24, Z+12	; 0x0c
    f6da:	95 85       	ldd	r25, Z+13	; 0x0d
    f6dc:	00 97       	sbiw	r24, 0x00	; 0
    f6de:	79 f3       	breq	.-34     	; 0xf6be <fileno_to_fatfs+0x6>
    f6e0:	08 95       	ret

0000f6e2 <ftell>:
    f6e2:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    f6e6:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    f6ea:	37 dc       	rcall	.-1938   	; 0xef5a <fileno>
    f6ec:	83 30       	cpi	r24, 0x03	; 3
    f6ee:	91 05       	cpc	r25, r1
    f6f0:	48 f0       	brcs	.+18     	; 0xf704 <ftell+0x22>
    f6f2:	e2 df       	rcall	.-60     	; 0xf6b8 <fileno_to_fatfs>
    f6f4:	00 97       	sbiw	r24, 0x00	; 0
    f6f6:	51 f4       	brne	.+20     	; 0xf70c <ftell+0x2a>
    f6f8:	89 e0       	ldi	r24, 0x09	; 9
    f6fa:	90 e0       	ldi	r25, 0x00	; 0
    f6fc:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f700:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f704:	6f ef       	ldi	r22, 0xFF	; 255
    f706:	7f ef       	ldi	r23, 0xFF	; 255
    f708:	cb 01       	movw	r24, r22
    f70a:	08 95       	ret
    f70c:	fc 01       	movw	r30, r24
    f70e:	60 89       	ldd	r22, Z+16	; 0x10
    f710:	71 89       	ldd	r23, Z+17	; 0x11
    f712:	82 89       	ldd	r24, Z+18	; 0x12
    f714:	93 89       	ldd	r25, Z+19	; 0x13
    f716:	08 95       	ret

0000f718 <lseek>:
    f718:	a3 e0       	ldi	r26, 0x03	; 3
    f71a:	b0 e0       	ldi	r27, 0x00	; 0
    f71c:	e2 e9       	ldi	r30, 0x92	; 146
    f71e:	fb e7       	ldi	r31, 0x7B	; 123
    f720:	0c 94 8e e4 	jmp	0x1c91c	; 0x1c91c <__prologue_saves__+0x10>
    f724:	5c 01       	movw	r10, r24
    f726:	6a 01       	movw	r12, r20
    f728:	7b 01       	movw	r14, r22
    f72a:	89 01       	movw	r16, r18
    f72c:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    f730:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    f734:	c1 df       	rcall	.-126    	; 0xf6b8 <fileno_to_fatfs>
    f736:	ec 01       	movw	r28, r24
    f738:	89 2b       	or	r24, r25
    f73a:	19 f4       	brne	.+6      	; 0xf742 <lseek+0x2a>
    f73c:	88 e1       	ldi	r24, 0x18	; 24
    f73e:	90 e0       	ldi	r25, 0x00	; 0
    f740:	26 c0       	rjmp	.+76     	; 0xf78e <lseek+0x76>
    f742:	83 e0       	ldi	r24, 0x03	; 3
    f744:	a8 16       	cp	r10, r24
    f746:	b1 04       	cpc	r11, r1
    f748:	d0 f1       	brcs	.+116    	; 0xf7be <lseek+0xa6>
    f74a:	c5 01       	movw	r24, r10
    f74c:	22 dc       	rcall	.-1980   	; 0xef92 <fileno_to_stream>
    f74e:	fc 01       	movw	r30, r24
    f750:	93 81       	ldd	r25, Z+3	; 0x03
    f752:	90 64       	ori	r25, 0x40	; 64
    f754:	93 83       	std	Z+3, r25	; 0x03
    f756:	02 30       	cpi	r16, 0x02	; 2
    f758:	11 05       	cpc	r17, r1
    f75a:	a9 f5       	brne	.+106    	; 0xf7c6 <lseek+0xae>
    f75c:	8a 85       	ldd	r24, Y+10	; 0x0a
    f75e:	9b 85       	ldd	r25, Y+11	; 0x0b
    f760:	ac 85       	ldd	r26, Y+12	; 0x0c
    f762:	bd 85       	ldd	r27, Y+13	; 0x0d
    f764:	c8 0e       	add	r12, r24
    f766:	d9 1e       	adc	r13, r25
    f768:	ea 1e       	adc	r14, r26
    f76a:	fb 1e       	adc	r15, r27
    f76c:	b7 01       	movw	r22, r14
    f76e:	a6 01       	movw	r20, r12
    f770:	ce 01       	movw	r24, r28
    f772:	0e 94 e0 61 	call	0xc3c0	; 0xc3c0 <f_lseek>
    f776:	00 97       	sbiw	r24, 0x00	; 0
    f778:	79 f0       	breq	.+30     	; 0xf798 <lseek+0x80>
    f77a:	84 31       	cpi	r24, 0x14	; 20
    f77c:	91 05       	cpc	r25, r1
    f77e:	58 f5       	brcc	.+86     	; 0xf7d6 <lseek+0xbe>
    f780:	fc 01       	movw	r30, r24
    f782:	ea 53       	subi	r30, 0x3A	; 58
    f784:	f5 4f       	sbci	r31, 0xF5	; 245
    f786:	80 81       	ld	r24, Z
    f788:	08 2e       	mov	r0, r24
    f78a:	00 0c       	add	r0, r0
    f78c:	99 0b       	sbc	r25, r25
    f78e:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f792:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f796:	13 c0       	rjmp	.+38     	; 0xf7be <lseek+0xa6>
    f798:	68 89       	ldd	r22, Y+16	; 0x10
    f79a:	79 89       	ldd	r23, Y+17	; 0x11
    f79c:	8a 89       	ldd	r24, Y+18	; 0x12
    f79e:	9b 89       	ldd	r25, Y+19	; 0x13
    f7a0:	c6 16       	cp	r12, r22
    f7a2:	d7 06       	cpc	r13, r23
    f7a4:	e8 06       	cpc	r14, r24
    f7a6:	f9 06       	cpc	r15, r25
    f7a8:	c9 f0       	breq	.+50     	; 0xf7dc <lseek+0xc4>
    f7aa:	84 e3       	ldi	r24, 0x34	; 52
    f7ac:	9b e0       	ldi	r25, 0x0B	; 11
    f7ae:	a0 e0       	ldi	r26, 0x00	; 0
    f7b0:	ed b7       	in	r30, 0x3d	; 61
    f7b2:	fe b7       	in	r31, 0x3e	; 62
    f7b4:	81 83       	std	Z+1, r24	; 0x01
    f7b6:	92 83       	std	Z+2, r25	; 0x02
    f7b8:	a3 83       	std	Z+3, r26	; 0x03
    f7ba:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    f7be:	6f ef       	ldi	r22, 0xFF	; 255
    f7c0:	7f ef       	ldi	r23, 0xFF	; 255
    f7c2:	cb 01       	movw	r24, r22
    f7c4:	0b c0       	rjmp	.+22     	; 0xf7dc <lseek+0xc4>
    f7c6:	01 30       	cpi	r16, 0x01	; 1
    f7c8:	11 05       	cpc	r17, r1
    f7ca:	81 f6       	brne	.-96     	; 0xf76c <lseek+0x54>
    f7cc:	88 89       	ldd	r24, Y+16	; 0x10
    f7ce:	99 89       	ldd	r25, Y+17	; 0x11
    f7d0:	aa 89       	ldd	r26, Y+18	; 0x12
    f7d2:	bb 89       	ldd	r27, Y+19	; 0x13
    f7d4:	c7 cf       	rjmp	.-114    	; 0xf764 <lseek+0x4c>
    f7d6:	83 e2       	ldi	r24, 0x23	; 35
    f7d8:	90 e0       	ldi	r25, 0x00	; 0
    f7da:	d9 cf       	rjmp	.-78     	; 0xf78e <lseek+0x76>
    f7dc:	cd b7       	in	r28, 0x3d	; 61
    f7de:	de b7       	in	r29, 0x3e	; 62
    f7e0:	23 96       	adiw	r28, 0x03	; 3
    f7e2:	ea e0       	ldi	r30, 0x0A	; 10
    f7e4:	0c 94 aa e4 	jmp	0x1c954	; 0x1c954 <__epilogue_restores__+0x10>

0000f7e8 <fseek>:
    f7e8:	cf 92       	push	r12
    f7ea:	df 92       	push	r13
    f7ec:	ef 92       	push	r14
    f7ee:	ff 92       	push	r15
    f7f0:	cf 93       	push	r28
    f7f2:	df 93       	push	r29
    f7f4:	6a 01       	movw	r12, r20
    f7f6:	7b 01       	movw	r14, r22
    f7f8:	e9 01       	movw	r28, r18
    f7fa:	af db       	rcall	.-2210   	; 0xef5a <fileno>
    f7fc:	97 fd       	sbrc	r25, 7
    f7fe:	12 c0       	rjmp	.+36     	; 0xf824 <fseek+0x3c>
    f800:	9e 01       	movw	r18, r28
    f802:	b7 01       	movw	r22, r14
    f804:	a6 01       	movw	r20, r12
    f806:	88 df       	rcall	.-240    	; 0xf718 <lseek>
    f808:	21 e0       	ldi	r18, 0x01	; 1
    f80a:	30 e0       	ldi	r19, 0x00	; 0
    f80c:	6f 3f       	cpi	r22, 0xFF	; 255
    f80e:	7f 4f       	sbci	r23, 0xFF	; 255
    f810:	8f 4f       	sbci	r24, 0xFF	; 255
    f812:	9f 4f       	sbci	r25, 0xFF	; 255
    f814:	11 f0       	breq	.+4      	; 0xf81a <fseek+0x32>
    f816:	20 e0       	ldi	r18, 0x00	; 0
    f818:	30 e0       	ldi	r19, 0x00	; 0
    f81a:	88 27       	eor	r24, r24
    f81c:	99 27       	eor	r25, r25
    f81e:	82 1b       	sub	r24, r18
    f820:	93 0b       	sbc	r25, r19
    f822:	02 c0       	rjmp	.+4      	; 0xf828 <fseek+0x40>
    f824:	8f ef       	ldi	r24, 0xFF	; 255
    f826:	9f ef       	ldi	r25, 0xFF	; 255
    f828:	df 91       	pop	r29
    f82a:	cf 91       	pop	r28
    f82c:	ff 90       	pop	r15
    f82e:	ef 90       	pop	r14
    f830:	df 90       	pop	r13
    f832:	cf 90       	pop	r12
    f834:	08 95       	ret

0000f836 <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f836:	a2 e0       	ldi	r26, 0x02	; 2
    f838:	b0 e0       	ldi	r27, 0x00	; 0
    f83a:	e1 e2       	ldi	r30, 0x21	; 33
    f83c:	fc e7       	ldi	r31, 0x7C	; 124
    f83e:	0c 94 8e e4 	jmp	0x1c91c	; 0x1c91c <__prologue_saves__+0x10>
    f842:	5c 01       	movw	r10, r24
    f844:	8b 01       	movw	r16, r22
    f846:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

    //FIXME
    *(char *) buf = 0;
    f848:	fb 01       	movw	r30, r22
    f84a:	10 82       	st	Z, r1

    errno = 0;
    f84c:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    f850:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>

    // TTY read function
    // FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f854:	9e db       	rcall	.-2244   	; 0xef92 <fileno_to_stream>
    if(stream == stdin)
    f856:	7c 01       	movw	r14, r24
    f858:	80 91 57 1c 	lds	r24, 0x1C57	; 0x801c57 <__iob>
    f85c:	90 91 58 1c 	lds	r25, 0x1C58	; 0x801c58 <__iob+0x1>
    f860:	e8 16       	cp	r14, r24
    f862:	f9 06       	cpc	r15, r25
    {
        char *ptr = (char *) buf;
        // ungetc is undefined for read
        stream->flags |= __SUNGET;
    f864:	c9 f4       	brne	.+50     	; 0xf898 <read+0x62>
    f866:	f7 01       	movw	r30, r14
    f868:	83 81       	ldd	r24, Z+3	; 0x03
    f86a:	80 64       	ori	r24, 0x40	; 64
        size = 0;
    f86c:	83 83       	std	Z+3, r24	; 0x03
    f86e:	1a 82       	std	Y+2, r1	; 0x02
    f870:	19 82       	std	Y+1, r1	; 0x01
    f872:	c0 0e       	add	r12, r16
        while(count--)
    f874:	d1 1e       	adc	r13, r17
    f876:	0c 15       	cp	r16, r12
    f878:	1d 05       	cpc	r17, r13
        {
            ret = fgetc(stream);
    f87a:	09 f4       	brne	.+2      	; 0xf87e <read+0x48>
    f87c:	3d c0       	rjmp	.+122    	; 0xf8f8 <read+0xc2>
            if(ret < 0)
    f87e:	c7 01       	movw	r24, r14
    f880:	48 da       	rcall	.-2928   	; 0xed12 <fgetc>
                break;
            
            *ptr++ = ret;
    f882:	97 fd       	sbrc	r25, 7
    f884:	39 c0       	rjmp	.+114    	; 0xf8f8 <read+0xc2>
    f886:	f8 01       	movw	r30, r16
            ++size;
    f888:	81 93       	st	Z+, r24
    f88a:	8f 01       	movw	r16, r30
    f88c:	89 81       	ldd	r24, Y+1	; 0x01
    f88e:	9a 81       	ldd	r25, Y+2	; 0x02
    f890:	01 96       	adiw	r24, 0x01	; 1
    f892:	9a 83       	std	Y+2, r25	; 0x02
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f894:	89 83       	std	Y+1, r24	; 0x01
    f896:	ef cf       	rjmp	.-34     	; 0xf876 <read+0x40>
    f898:	80 91 59 1c 	lds	r24, 0x1C59	; 0x801c59 <__iob+0x2>
    f89c:	90 91 5a 1c 	lds	r25, 0x1C5A	; 0x801c5a <__iob+0x3>
    f8a0:	e8 16       	cp	r14, r24
    f8a2:	f9 06       	cpc	r15, r25
    f8a4:	71 f1       	breq	.+92     	; 0xf902 <read+0xcc>
    f8a6:	80 91 5b 1c 	lds	r24, 0x1C5B	; 0x801c5b <__iob+0x4>
    f8aa:	90 91 5c 1c 	lds	r25, 0x1C5C	; 0x801c5c <__iob+0x5>
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f8ae:	e8 16       	cp	r14, r24
    f8b0:	f9 06       	cpc	r15, r25
    f8b2:	39 f1       	breq	.+78     	; 0xf902 <read+0xcc>
    if ( fh == NULL )
    f8b4:	c5 01       	movw	r24, r10
    f8b6:	00 df       	rcall	.-512    	; 0xf6b8 <fileno_to_fatfs>
    {
        errno = EBADF;
    f8b8:	00 97       	sbiw	r24, 0x00	; 0
    f8ba:	19 f4       	brne	.+6      	; 0xf8c2 <read+0x8c>
    f8bc:	89 e0       	ldi	r24, 0x09	; 9
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f8be:	90 e0       	ldi	r25, 0x00	; 0
    f8c0:	16 c0       	rjmp	.+44     	; 0xf8ee <read+0xb8>
    f8c2:	9e 01       	movw	r18, r28
    f8c4:	2f 5f       	subi	r18, 0xFF	; 255
    f8c6:	3f 4f       	sbci	r19, 0xFF	; 255
    f8c8:	a6 01       	movw	r20, r12
    f8ca:	b8 01       	movw	r22, r16
    if(res != FR_OK)
    f8cc:	0e 94 d4 5c 	call	0xb9a8	; 0xb9a8 <f_read>
    f8d0:	00 97       	sbiw	r24, 0x00	; 0
    f8d2:	91 f0       	breq	.+36     	; 0xf8f8 <read+0xc2>
    f8d4:	84 31       	cpi	r24, 0x14	; 20
    f8d6:	91 05       	cpc	r25, r1
    f8d8:	40 f4       	brcc	.+16     	; 0xf8ea <read+0xb4>
    f8da:	fc 01       	movw	r30, r24
    f8dc:	ea 53       	subi	r30, 0x3A	; 58
    f8de:	f5 4f       	sbci	r31, 0xF5	; 245
    f8e0:	80 81       	ld	r24, Z
    f8e2:	08 2e       	mov	r0, r24
    f8e4:	00 0c       	add	r0, r0
    f8e6:	99 0b       	sbc	r25, r25
    f8e8:	02 c0       	rjmp	.+4      	; 0xf8ee <read+0xb8>
    {
        errno = fatfs_to_errno(res);
    f8ea:	83 e2       	ldi	r24, 0x23	; 35
    f8ec:	90 e0       	ldi	r25, 0x00	; 0
    f8ee:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    f8f2:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
        return(-1);
    }
    return ((ssize_t) size);
    f8f6:	05 c0       	rjmp	.+10     	; 0xf902 <read+0xcc>
    f8f8:	69 81       	ldd	r22, Y+1	; 0x01
    f8fa:	7a 81       	ldd	r23, Y+2	; 0x02
    f8fc:	80 e0       	ldi	r24, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f8fe:	90 e0       	ldi	r25, 0x00	; 0
    f900:	03 c0       	rjmp	.+6      	; 0xf908 <read+0xd2>
    f902:	6f ef       	ldi	r22, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f904:	7f ef       	ldi	r23, 0xFF	; 255
    f906:	cb 01       	movw	r24, r22
    f908:	22 96       	adiw	r28, 0x02	; 2
    f90a:	ea e0       	ldi	r30, 0x0A	; 10
    f90c:	0c 94 aa e4 	jmp	0x1c954	; 0x1c954 <__epilogue_restores__+0x10>

0000f910 <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f910:	0f 93       	push	r16
    f912:	1f 93       	push	r17
    f914:	cf 93       	push	r28
    f916:	df 93       	push	r29
    f918:	ec 01       	movw	r28, r24
    f91a:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f91c:	64 9f       	mul	r22, r20
    f91e:	80 01       	movw	r16, r0
    f920:	65 9f       	mul	r22, r21
    f922:	10 0d       	add	r17, r0
    f924:	74 9f       	mul	r23, r20
    f926:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    f928:	11 24       	eor	r1, r1
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f92a:	17 db       	rcall	.-2514   	; 0xef5a <fileno>
    f92c:	a8 01       	movw	r20, r16
    f92e:	be 01       	movw	r22, r28
    if(ret < 0)
    f930:	82 df       	rcall	.-252    	; 0xf836 <read>
    f932:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    f934:	02 c0       	rjmp	.+4      	; 0xf93a <fread+0x2a>
    f936:	cb 01       	movw	r24, r22
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f938:	02 c0       	rjmp	.+4      	; 0xf93e <fread+0x2e>
    f93a:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    f93c:	90 e0       	ldi	r25, 0x00	; 0
    f93e:	df 91       	pop	r29
    f940:	cf 91       	pop	r28
    f942:	1f 91       	pop	r17
    f944:	0f 91       	pop	r16
    f946:	08 95       	ret

0000f948 <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f948:	cf 93       	push	r28
    f94a:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f94c:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    f950:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f954:	83 30       	cpi	r24, 0x03	; 3
    f956:	91 05       	cpc	r25, r1
    f958:	18 f4       	brcc	.+6      	; 0xf960 <syncfs+0x18>

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f95a:	89 e0       	ldi	r24, 0x09	; 9
    f95c:	90 e0       	ldi	r25, 0x00	; 0
    f95e:	18 c0       	rjmp	.+48     	; 0xf990 <syncfs+0x48>
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f960:	ec 01       	movw	r28, r24
    f962:	17 db       	rcall	.-2514   	; 0xef92 <fileno_to_stream>
    // reset unget on sync
    stream->flags |= __SUNGET;
    f964:	fc 01       	movw	r30, r24
    f966:	93 81       	ldd	r25, Z+3	; 0x03

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f968:	90 64       	ori	r25, 0x40	; 64
    f96a:	93 83       	std	Z+3, r25	; 0x03
    if(fh == NULL)
    f96c:	ce 01       	movw	r24, r28
    f96e:	a4 de       	rcall	.-696    	; 0xf6b8 <fileno_to_fatfs>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f970:	00 97       	sbiw	r24, 0x00	; 0
    f972:	99 f3       	breq	.-26     	; 0xf95a <syncfs+0x12>
    if (res != FR_OK)
    f974:	0e 94 b6 5f 	call	0xbf6c	; 0xbf6c <f_sync>
    f978:	00 97       	sbiw	r24, 0x00	; 0
    f97a:	a1 f0       	breq	.+40     	; 0xf9a4 <syncfs+0x5c>
    f97c:	84 31       	cpi	r24, 0x14	; 20
    f97e:	91 05       	cpc	r25, r1
    f980:	70 f4       	brcc	.+28     	; 0xf99e <syncfs+0x56>
    f982:	fc 01       	movw	r30, r24
    f984:	ea 53       	subi	r30, 0x3A	; 58
    f986:	f5 4f       	sbci	r31, 0xF5	; 245
    f988:	80 81       	ld	r24, Z
    f98a:	08 2e       	mov	r0, r24
    {
        errno = fatfs_to_errno(res);
    f98c:	00 0c       	add	r0, r0
    f98e:	99 0b       	sbc	r25, r25
    f990:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
        return(-1);
    f994:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    f998:	8f ef       	ldi	r24, 0xFF	; 255
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f99a:	9f ef       	ldi	r25, 0xFF	; 255
    f99c:	05 c0       	rjmp	.+10     	; 0xf9a8 <syncfs+0x60>
    f99e:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f9a0:	90 e0       	ldi	r25, 0x00	; 0
    f9a2:	f6 cf       	rjmp	.-20     	; 0xf990 <syncfs+0x48>
}
    f9a4:	80 e0       	ldi	r24, 0x00	; 0
    f9a6:	90 e0       	ldi	r25, 0x00	; 0
    f9a8:	df 91       	pop	r29
    f9aa:	cf 91       	pop	r28
    f9ac:	08 95       	ret

0000f9ae <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f9ae:	cf 93       	push	r28
    f9b0:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f9b2:	c0 e0       	ldi	r28, 0x00	; 0
    f9b4:	d0 e0       	ldi	r29, 0x00	; 0
    f9b6:	21 96       	adiw	r28, 0x01	; 1
    f9b8:	c0 31       	cpi	r28, 0x10	; 16
    f9ba:	d1 05       	cpc	r29, r1
    f9bc:	51 f0       	breq	.+20     	; 0xf9d2 <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f9be:	c3 30       	cpi	r28, 0x03	; 3
    f9c0:	d1 05       	cpc	r29, r1
    f9c2:	cc f3       	brlt	.-14     	; 0xf9b6 <sync+0x8>
    {
        if(isatty(i))
            continue;

        // fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f9c4:	ce 01       	movw	r24, r28
    f9c6:	78 de       	rcall	.-784    	; 0xf6b8 <fileno_to_fatfs>
        if(fh == NULL)
    f9c8:	89 2b       	or	r24, r25
            continue;

        (void ) syncfs(i);
    f9ca:	a9 f3       	breq	.-22     	; 0xf9b6 <sync+0x8>
    f9cc:	ce 01       	movw	r24, r28
    f9ce:	bc df       	rcall	.-136    	; 0xf948 <syncfs>
    }
}
    f9d0:	f2 cf       	rjmp	.-28     	; 0xf9b6 <sync+0x8>
    f9d2:	df 91       	pop	r29
    f9d4:	cf 91       	pop	r28
    f9d6:	08 95       	ret

0000f9d8 <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f9d8:	a2 e0       	ldi	r26, 0x02	; 2
    f9da:	b0 e0       	ldi	r27, 0x00	; 0
    f9dc:	e2 ef       	ldi	r30, 0xF2	; 242
    f9de:	fc e7       	ldi	r31, 0x7C	; 124
    f9e0:	0c 94 8c e4 	jmp	0x1c918	; 0x1c918 <__prologue_saves__+0xc>
    f9e4:	8c 01       	movw	r16, r24
    f9e6:	b6 2e       	mov	r11, r22
    f9e8:	f7 2e       	mov	r15, r23
    f9ea:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f9ec:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    f9f0:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>

    // TTY read function
    stream = fileno_to_stream(fd);
    f9f4:	ce da       	rcall	.-2660   	; 0xef92 <fileno_to_stream>
    if(stream == stdout || stream == stderr)
    f9f6:	6c 01       	movw	r12, r24
    f9f8:	80 91 59 1c 	lds	r24, 0x1C59	; 0x801c59 <__iob+0x2>
    f9fc:	90 91 5a 1c 	lds	r25, 0x1C5A	; 0x801c5a <__iob+0x3>
    fa00:	c8 16       	cp	r12, r24
    fa02:	d9 06       	cpc	r13, r25
    fa04:	39 f0       	breq	.+14     	; 0xfa14 <write+0x3c>
    fa06:	80 91 5b 1c 	lds	r24, 0x1C5B	; 0x801c5b <__iob+0x4>
    fa0a:	90 91 5c 1c 	lds	r25, 0x1C5C	; 0x801c5c <__iob+0x5>
    fa0e:	c8 16       	cp	r12, r24
    fa10:	d9 06       	cpc	r13, r25
    {
        char *ptr = (char *) buf;   
        size = 0;
    fa12:	d1 f4       	brne	.+52     	; 0xfa48 <write+0x70>
    fa14:	1a 82       	std	Y+2, r1	; 0x02
    fa16:	19 82       	std	Y+1, r1	; 0x01
    fa18:	0b 2d       	mov	r16, r11
    fa1a:	1f 2d       	mov	r17, r15
    fa1c:	78 01       	movw	r14, r16
    fa1e:	e8 0c       	add	r14, r8
        while(count--)
    fa20:	f9 1c       	adc	r15, r9
    fa22:	0e 15       	cp	r16, r14
    fa24:	1f 05       	cpc	r17, r15
        {
            int c,ret;
            c = *ptr++;
    fa26:	d1 f1       	breq	.+116    	; 0xfa9c <write+0xc4>
    fa28:	f8 01       	movw	r30, r16
    fa2a:	a1 90       	ld	r10, Z+
    fa2c:	8f 01       	movw	r16, r30
            ret = fputc(c, stream);
    fa2e:	b1 2c       	mov	r11, r1
    fa30:	b6 01       	movw	r22, r12
    fa32:	c5 01       	movw	r24, r10
            if(c != ret)
    fa34:	c4 d9       	rcall	.-3192   	; 0xedbe <fputc>
    fa36:	a8 16       	cp	r10, r24
    fa38:	b9 06       	cpc	r11, r25
                break;

            ++size;
    fa3a:	81 f5       	brne	.+96     	; 0xfa9c <write+0xc4>
    fa3c:	89 81       	ldd	r24, Y+1	; 0x01
    fa3e:	9a 81       	ldd	r25, Y+2	; 0x02
    fa40:	01 96       	adiw	r24, 0x01	; 1
    fa42:	9a 83       	std	Y+2, r25	; 0x02
    fa44:	89 83       	std	Y+1, r24	; 0x01
        }
        return(size);
    }
    if(stream == stdin)
    fa46:	ed cf       	rjmp	.-38     	; 0xfa22 <write+0x4a>
    fa48:	80 91 57 1c 	lds	r24, 0x1C57	; 0x801c57 <__iob>
    fa4c:	90 91 58 1c 	lds	r25, 0x1C58	; 0x801c58 <__iob+0x1>
    fa50:	c8 16       	cp	r12, r24
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    fa52:	d9 06       	cpc	r13, r25
    fa54:	41 f1       	breq	.+80     	; 0xfaa6 <write+0xce>
    if ( fh == NULL )
    fa56:	c8 01       	movw	r24, r16
    fa58:	2f de       	rcall	.-930    	; 0xf6b8 <fileno_to_fatfs>
    {
        errno = EBADF;
    fa5a:	00 97       	sbiw	r24, 0x00	; 0
    fa5c:	19 f4       	brne	.+6      	; 0xfa64 <write+0x8c>
    fa5e:	89 e0       	ldi	r24, 0x09	; 9
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    fa60:	90 e0       	ldi	r25, 0x00	; 0
    fa62:	17 c0       	rjmp	.+46     	; 0xfa92 <write+0xba>
    fa64:	9e 01       	movw	r18, r28
    fa66:	2f 5f       	subi	r18, 0xFF	; 255
    fa68:	3f 4f       	sbci	r19, 0xFF	; 255
    fa6a:	a4 01       	movw	r20, r8
    fa6c:	6b 2d       	mov	r22, r11
    fa6e:	7f 2d       	mov	r23, r15
    if(res != FR_OK)
    fa70:	0e 94 1f 5e 	call	0xbc3e	; 0xbc3e <f_write>
    fa74:	00 97       	sbiw	r24, 0x00	; 0
    fa76:	91 f0       	breq	.+36     	; 0xfa9c <write+0xc4>
    fa78:	84 31       	cpi	r24, 0x14	; 20
    fa7a:	91 05       	cpc	r25, r1
    fa7c:	40 f4       	brcc	.+16     	; 0xfa8e <write+0xb6>
    fa7e:	fc 01       	movw	r30, r24
    fa80:	ea 53       	subi	r30, 0x3A	; 58
    fa82:	f5 4f       	sbci	r31, 0xF5	; 245
    fa84:	80 81       	ld	r24, Z
    fa86:	08 2e       	mov	r0, r24
    fa88:	00 0c       	add	r0, r0
    fa8a:	99 0b       	sbc	r25, r25
    fa8c:	02 c0       	rjmp	.+4      	; 0xfa92 <write+0xba>
    {
        errno = fatfs_to_errno(res);
    fa8e:	83 e2       	ldi	r24, 0x23	; 35
    fa90:	90 e0       	ldi	r25, 0x00	; 0
    fa92:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    fa96:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
        return(-1);
    }
    return ((ssize_t) size);
    fa9a:	05 c0       	rjmp	.+10     	; 0xfaa6 <write+0xce>
    fa9c:	69 81       	ldd	r22, Y+1	; 0x01
    fa9e:	7a 81       	ldd	r23, Y+2	; 0x02
    faa0:	80 e0       	ldi	r24, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    faa2:	90 e0       	ldi	r25, 0x00	; 0
    faa4:	03 c0       	rjmp	.+6      	; 0xfaac <write+0xd4>
    faa6:	6f ef       	ldi	r22, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    faa8:	7f ef       	ldi	r23, 0xFF	; 255
    faaa:	cb 01       	movw	r24, r22
    faac:	22 96       	adiw	r28, 0x02	; 2
    faae:	ec e0       	ldi	r30, 0x0C	; 12
    fab0:	0c 94 a8 e4 	jmp	0x1c950	; 0x1c950 <__epilogue_restores__+0xc>

0000fab4 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    fab4:	0f 93       	push	r16
    fab6:	1f 93       	push	r17
    fab8:	cf 93       	push	r28
    faba:	df 93       	push	r29
    fabc:	ec 01       	movw	r28, r24
    fabe:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    fac0:	64 9f       	mul	r22, r20
    fac2:	80 01       	movw	r16, r0
    fac4:	65 9f       	mul	r22, r21
    fac6:	10 0d       	add	r17, r0
    fac8:	74 9f       	mul	r23, r20
    faca:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    facc:	11 24       	eor	r1, r1
    ssize_t ret;
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    face:	45 da       	rcall	.-2934   	; 0xef5a <fileno>
    fad0:	a8 01       	movw	r20, r16
    fad2:	be 01       	movw	r22, r28

    if(ret < 0)
    fad4:	81 df       	rcall	.-254    	; 0xf9d8 <write>
    fad6:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    fad8:	02 c0       	rjmp	.+4      	; 0xfade <fwrite+0x2a>
    fada:	cb 01       	movw	r24, r22
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    fadc:	02 c0       	rjmp	.+4      	; 0xfae2 <fwrite+0x2e>
    fade:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    fae0:	90 e0       	ldi	r25, 0x00	; 0
    fae2:	df 91       	pop	r29
    fae4:	cf 91       	pop	r28
    fae6:	1f 91       	pop	r17
    fae8:	0f 91       	pop	r16
    faea:	08 95       	ret

0000faec <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    faec:	0f 93       	push	r16
    faee:	1f 93       	push	r17
    faf0:	cf 93       	push	r28
    faf2:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    faf4:	83 30       	cpi	r24, 0x03	; 3
    faf6:	91 05       	cpc	r25, r1
    faf8:	48 f4       	brcc	.+18     	; 0xfb0c <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    fafa:	89 e0       	ldi	r24, 0x09	; 9
    fafc:	90 e0       	ldi	r25, 0x00	; 0
    fafe:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    fb02:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
        return(-1);
    fb06:	8f ef       	ldi	r24, 0xFF	; 255
    fb08:	9f ef       	ldi	r25, 0xFF	; 255
    fb0a:	20 c0       	rjmp	.+64     	; 0xfb4c <free_file_descriptor+0x60>
    }

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    fb0c:	ec 01       	movw	r28, r24
    fb0e:	41 da       	rcall	.-2942   	; 0xef92 <fileno_to_stream>
    if(stream == NULL)
    fb10:	8c 01       	movw	r16, r24
    fb12:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    fb14:	c1 f3       	breq	.-16     	; 0xfb06 <free_file_descriptor+0x1a>
    fb16:	f8 01       	movw	r30, r16
    fb18:	84 85       	ldd	r24, Z+12	; 0x0c

    if(fh != NULL)
    fb1a:	95 85       	ldd	r25, Z+13	; 0x0d
    fb1c:	00 97       	sbiw	r24, 0x00	; 0
    {
        safefree(fh);
    fb1e:	11 f0       	breq	.+4      	; 0xfb24 <free_file_descriptor+0x38>
    fb20:	0e 94 c1 29 	call	0x5382	; 0x5382 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    fb24:	f8 01       	movw	r30, r16
    fb26:	80 81       	ld	r24, Z
    fb28:	91 81       	ldd	r25, Z+1	; 0x01
    fb2a:	00 97       	sbiw	r24, 0x00	; 0
    fb2c:	21 f0       	breq	.+8      	; 0xfb36 <free_file_descriptor+0x4a>
    fb2e:	23 81       	ldd	r18, Z+3	; 0x03
    {
        safefree(stream->buf);
    fb30:	27 fd       	sbrc	r18, 7
    fb32:	0e 94 c1 29 	call	0x5382	; 0x5382 <safefree>
    }

    __iob[fileno]  = NULL;
    fb36:	fe 01       	movw	r30, r28
    fb38:	ee 0f       	add	r30, r30
    fb3a:	ff 1f       	adc	r31, r31
    fb3c:	e9 5a       	subi	r30, 0xA9	; 169
    fb3e:	f3 4e       	sbci	r31, 0xE3	; 227
    fb40:	11 82       	std	Z+1, r1	; 0x01
    safefree(stream);
    fb42:	10 82       	st	Z, r1
    fb44:	c8 01       	movw	r24, r16
    fb46:	0e 94 c1 29 	call	0x5382	; 0x5382 <safefree>
    return(fileno);
}
    fb4a:	ce 01       	movw	r24, r28
    fb4c:	df 91       	pop	r29
    fb4e:	cf 91       	pop	r28
    fb50:	1f 91       	pop	r17
    fb52:	0f 91       	pop	r16
    fb54:	08 95       	ret

0000fb56 <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    fb56:	0f 93       	push	r16
    fb58:	1f 93       	push	r17
    fb5a:	cf 93       	push	r28
    fb5c:	df 93       	push	r29
    fb5e:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    fb60:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    fb64:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    fb68:	14 da       	rcall	.-3032   	; 0xef92 <fileno_to_stream>
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    fb6a:	89 2b       	or	r24, r25
    fb6c:	d9 f0       	breq	.+54     	; 0xfba4 <close+0x4e>
    if(fh == NULL)
    fb6e:	c8 01       	movw	r24, r16
    fb70:	a3 dd       	rcall	.-1210   	; 0xf6b8 <fileno_to_fatfs>
    {
        return(-1);
    }
    res = f_close(fh);
    fb72:	00 97       	sbiw	r24, 0x00	; 0
    fb74:	b9 f0       	breq	.+46     	; 0xfba4 <close+0x4e>
    free_file_descriptor(fileno);
    fb76:	0e 94 36 60 	call	0xc06c	; 0xc06c <f_close>
    fb7a:	ec 01       	movw	r28, r24
    if (res != FR_OK)
    fb7c:	c8 01       	movw	r24, r16
    fb7e:	b6 df       	rcall	.-148    	; 0xfaec <free_file_descriptor>
    fb80:	20 97       	sbiw	r28, 0x00	; 0
    fb82:	99 f0       	breq	.+38     	; 0xfbaa <close+0x54>
    fb84:	c4 31       	cpi	r28, 0x14	; 20
    fb86:	d1 05       	cpc	r29, r1
    fb88:	38 f4       	brcc	.+14     	; 0xfb98 <close+0x42>
    fb8a:	ca 53       	subi	r28, 0x3A	; 58
    fb8c:	d5 4f       	sbci	r29, 0xF5	; 245
    fb8e:	88 81       	ld	r24, Y
    fb90:	08 2e       	mov	r0, r24
    fb92:	00 0c       	add	r0, r0
    fb94:	99 0b       	sbc	r25, r25
    fb96:	02 c0       	rjmp	.+4      	; 0xfb9c <close+0x46>
    {
        errno = fatfs_to_errno(res);
    fb98:	83 e2       	ldi	r24, 0x23	; 35
    fb9a:	90 e0       	ldi	r25, 0x00	; 0
    fb9c:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
        return(-1);
    fba0:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    fba4:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return(0);
    fba6:	9f ef       	ldi	r25, 0xFF	; 255
    fba8:	02 c0       	rjmp	.+4      	; 0xfbae <close+0x58>
}
    fbaa:	80 e0       	ldi	r24, 0x00	; 0
    fbac:	90 e0       	ldi	r25, 0x00	; 0
    fbae:	df 91       	pop	r29
    fbb0:	cf 91       	pop	r28
    fbb2:	1f 91       	pop	r17
    fbb4:	0f 91       	pop	r16
    fbb6:	08 95       	ret

0000fbb8 <fclose>:
    fbb8:	d0 d9       	rcall	.-3168   	; 0xef5a <fileno>
    fbba:	97 fd       	sbrc	r25, 7
    fbbc:	02 c0       	rjmp	.+4      	; 0xfbc2 <fclose+0xa>
    fbbe:	cb cf       	rjmp	.-106    	; 0xfb56 <close>
    fbc0:	08 95       	ret
    fbc2:	8f ef       	ldi	r24, 0xFF	; 255
    fbc4:	9f ef       	ldi	r25, 0xFF	; 255
    fbc6:	08 95       	ret

0000fbc8 <new_file_descriptor>:
    fbc8:	0f 93       	push	r16
    fbca:	1f 93       	push	r17
    fbcc:	cf 93       	push	r28
    fbce:	df 93       	push	r29
    fbd0:	e7 e5       	ldi	r30, 0x57	; 87
    fbd2:	fc e1       	ldi	r31, 0x1C	; 28
    fbd4:	c0 e0       	ldi	r28, 0x00	; 0
    fbd6:	d0 e0       	ldi	r29, 0x00	; 0
    fbd8:	21 96       	adiw	r28, 0x01	; 1
    fbda:	c0 31       	cpi	r28, 0x10	; 16
    fbdc:	d1 05       	cpc	r29, r1
    fbde:	49 f0       	breq	.+18     	; 0xfbf2 <new_file_descriptor+0x2a>
    fbe0:	c3 30       	cpi	r28, 0x03	; 3
    fbe2:	d1 05       	cpc	r29, r1
    fbe4:	24 f0       	brlt	.+8      	; 0xfbee <new_file_descriptor+0x26>
    fbe6:	82 81       	ldd	r24, Z+2	; 0x02
    fbe8:	93 81       	ldd	r25, Z+3	; 0x03
    fbea:	89 2b       	or	r24, r25
    fbec:	59 f0       	breq	.+22     	; 0xfc04 <new_file_descriptor+0x3c>
    fbee:	32 96       	adiw	r30, 0x02	; 2
    fbf0:	f3 cf       	rjmp	.-26     	; 0xfbd8 <new_file_descriptor+0x10>
    fbf2:	87 e1       	ldi	r24, 0x17	; 23
    fbf4:	90 e0       	ldi	r25, 0x00	; 0
    fbf6:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    fbfa:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    fbfe:	8f ef       	ldi	r24, 0xFF	; 255
    fc00:	9f ef       	ldi	r25, 0xFF	; 255
    fc02:	22 c0       	rjmp	.+68     	; 0xfc48 <new_file_descriptor+0x80>
    fc04:	61 e0       	ldi	r22, 0x01	; 1
    fc06:	70 e0       	ldi	r23, 0x00	; 0
    fc08:	8e e0       	ldi	r24, 0x0E	; 14
    fc0a:	90 e0       	ldi	r25, 0x00	; 0
    fc0c:	0e 94 75 29 	call	0x52ea	; 0x52ea <safecalloc>
    fc10:	8c 01       	movw	r16, r24
    fc12:	89 2b       	or	r24, r25
    fc14:	59 f0       	breq	.+22     	; 0xfc2c <new_file_descriptor+0x64>
    fc16:	61 e0       	ldi	r22, 0x01	; 1
    fc18:	70 e0       	ldi	r23, 0x00	; 0
    fc1a:	84 e2       	ldi	r24, 0x24	; 36
    fc1c:	92 e0       	ldi	r25, 0x02	; 2
    fc1e:	0e 94 75 29 	call	0x52ea	; 0x52ea <safecalloc>
    fc22:	00 97       	sbiw	r24, 0x00	; 0
    fc24:	31 f4       	brne	.+12     	; 0xfc32 <new_file_descriptor+0x6a>
    fc26:	c8 01       	movw	r24, r16
    fc28:	0e 94 c1 29 	call	0x5382	; 0x5382 <safefree>
    fc2c:	8c e0       	ldi	r24, 0x0C	; 12
    fc2e:	90 e0       	ldi	r25, 0x00	; 0
    fc30:	e2 cf       	rjmp	.-60     	; 0xfbf6 <new_file_descriptor+0x2e>
    fc32:	fe 01       	movw	r30, r28
    fc34:	ee 0f       	add	r30, r30
    fc36:	ff 1f       	adc	r31, r31
    fc38:	e9 5a       	subi	r30, 0xA9	; 169
    fc3a:	f3 4e       	sbci	r31, 0xE3	; 227
    fc3c:	11 83       	std	Z+1, r17	; 0x01
    fc3e:	00 83       	st	Z, r16
    fc40:	f8 01       	movw	r30, r16
    fc42:	95 87       	std	Z+13, r25	; 0x0d
    fc44:	84 87       	std	Z+12, r24	; 0x0c
    fc46:	ce 01       	movw	r24, r28
    fc48:	df 91       	pop	r29
    fc4a:	cf 91       	pop	r28
    fc4c:	1f 91       	pop	r17
    fc4e:	0f 91       	pop	r16
    fc50:	08 95       	ret

0000fc52 <open>:
    fc52:	a0 e0       	ldi	r26, 0x00	; 0
    fc54:	b0 e0       	ldi	r27, 0x00	; 0
    fc56:	ef e2       	ldi	r30, 0x2F	; 47
    fc58:	fe e7       	ldi	r31, 0x7E	; 126
    fc5a:	0c 94 8a e4 	jmp	0x1c914	; 0x1c914 <__prologue_saves__+0x8>
    fc5e:	5c 01       	movw	r10, r24
    fc60:	6b 01       	movw	r12, r22
    fc62:	10 92 56 1c 	sts	0x1C56, r1	; 0x801c56 <errno+0x1>
    fc66:	10 92 55 1c 	sts	0x1C55, r1	; 0x801c55 <errno>
    fc6a:	7b 01       	movw	r14, r22
    fc6c:	83 e0       	ldi	r24, 0x03	; 3
    fc6e:	e8 22       	and	r14, r24
    fc70:	ff 24       	eor	r15, r15
    fc72:	e2 e0       	ldi	r30, 0x02	; 2
    fc74:	ee 16       	cp	r14, r30
    fc76:	f1 04       	cpc	r15, r1
    fc78:	31 f0       	breq	.+12     	; 0xfc86 <open+0x34>
    fc7a:	e1 14       	cp	r14, r1
    fc7c:	f1 04       	cpc	r15, r1
    fc7e:	31 f0       	breq	.+12     	; 0xfc8c <open+0x3a>
    fc80:	02 e0       	ldi	r16, 0x02	; 2
    fc82:	10 e0       	ldi	r17, 0x00	; 0
    fc84:	05 c0       	rjmp	.+10     	; 0xfc90 <open+0x3e>
    fc86:	03 e0       	ldi	r16, 0x03	; 3
    fc88:	10 e0       	ldi	r17, 0x00	; 0
    fc8a:	02 c0       	rjmp	.+4      	; 0xfc90 <open+0x3e>
    fc8c:	01 e0       	ldi	r16, 0x01	; 1
    fc8e:	10 e0       	ldi	r17, 0x00	; 0
    fc90:	c6 fe       	sbrs	r12, 6
    fc92:	05 c0       	rjmp	.+10     	; 0xfc9e <open+0x4c>
    fc94:	d1 fe       	sbrs	r13, 1
    fc96:	02 c0       	rjmp	.+4      	; 0xfc9c <open+0x4a>
    fc98:	08 60       	ori	r16, 0x08	; 8
    fc9a:	01 c0       	rjmp	.+2      	; 0xfc9e <open+0x4c>
    fc9c:	00 61       	ori	r16, 0x10	; 16
    fc9e:	94 df       	rcall	.-216    	; 0xfbc8 <new_file_descriptor>
    fca0:	3c 01       	movw	r6, r24
    fca2:	77 d9       	rcall	.-3346   	; 0xef92 <fileno_to_stream>
    fca4:	ec 01       	movw	r28, r24
    fca6:	c3 01       	movw	r24, r6
    fca8:	20 97       	sbiw	r28, 0x00	; 0
    fcaa:	09 f4       	brne	.+2      	; 0xfcae <open+0x5c>
    fcac:	48 c0       	rjmp	.+144    	; 0xfd3e <open+0xec>
    fcae:	04 dd       	rcall	.-1528   	; 0xf6b8 <fileno_to_fatfs>
    fcb0:	4c 01       	movw	r8, r24
    fcb2:	00 97       	sbiw	r24, 0x00	; 0
    fcb4:	59 f4       	brne	.+22     	; 0xfccc <open+0x7a>
    fcb6:	c3 01       	movw	r24, r6
    fcb8:	19 df       	rcall	.-462    	; 0xfaec <free_file_descriptor>
    fcba:	89 e0       	ldi	r24, 0x09	; 9
    fcbc:	90 e0       	ldi	r25, 0x00	; 0
    fcbe:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    fcc2:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    fcc6:	8f ef       	ldi	r24, 0xFF	; 255
    fcc8:	9f ef       	ldi	r25, 0xFF	; 255
    fcca:	5d c0       	rjmp	.+186    	; 0xfd86 <open+0x134>
    fccc:	40 2f       	mov	r20, r16
    fcce:	b5 01       	movw	r22, r10
    fcd0:	0e 94 1c 5b 	call	0xb638	; 0xb638 <f_open>
    fcd4:	00 97       	sbiw	r24, 0x00	; 0
    fcd6:	91 f0       	breq	.+36     	; 0xfcfc <open+0xaa>
    fcd8:	84 31       	cpi	r24, 0x14	; 20
    fcda:	91 05       	cpc	r25, r1
    fcdc:	40 f4       	brcc	.+16     	; 0xfcee <open+0x9c>
    fcde:	fc 01       	movw	r30, r24
    fce0:	ea 53       	subi	r30, 0x3A	; 58
    fce2:	f5 4f       	sbci	r31, 0xF5	; 245
    fce4:	80 81       	ld	r24, Z
    fce6:	08 2e       	mov	r0, r24
    fce8:	00 0c       	add	r0, r0
    fcea:	99 0b       	sbc	r25, r25
    fcec:	02 c0       	rjmp	.+4      	; 0xfcf2 <open+0xa0>
    fcee:	83 e2       	ldi	r24, 0x23	; 35
    fcf0:	90 e0       	ldi	r25, 0x00	; 0
    fcf2:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    fcf6:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    fcfa:	20 c0       	rjmp	.+64     	; 0xfd3c <open+0xea>
    fcfc:	d2 fe       	sbrs	r13, 2
    fcfe:	21 c0       	rjmp	.+66     	; 0xfd42 <open+0xf0>
    fd00:	f4 01       	movw	r30, r8
    fd02:	42 85       	ldd	r20, Z+10	; 0x0a
    fd04:	53 85       	ldd	r21, Z+11	; 0x0b
    fd06:	64 85       	ldd	r22, Z+12	; 0x0c
    fd08:	75 85       	ldd	r23, Z+13	; 0x0d
    fd0a:	c4 01       	movw	r24, r8
    fd0c:	0e 94 e0 61 	call	0xc3c0	; 0xc3c0 <f_lseek>
    fd10:	00 97       	sbiw	r24, 0x00	; 0
    fd12:	b9 f0       	breq	.+46     	; 0xfd42 <open+0xf0>
    fd14:	84 31       	cpi	r24, 0x14	; 20
    fd16:	91 05       	cpc	r25, r1
    fd18:	40 f4       	brcc	.+16     	; 0xfd2a <open+0xd8>
    fd1a:	fc 01       	movw	r30, r24
    fd1c:	ea 53       	subi	r30, 0x3A	; 58
    fd1e:	f5 4f       	sbci	r31, 0xF5	; 245
    fd20:	80 81       	ld	r24, Z
    fd22:	08 2e       	mov	r0, r24
    fd24:	00 0c       	add	r0, r0
    fd26:	99 0b       	sbc	r25, r25
    fd28:	02 c0       	rjmp	.+4      	; 0xfd2e <open+0xdc>
    fd2a:	83 e2       	ldi	r24, 0x23	; 35
    fd2c:	90 e0       	ldi	r25, 0x00	; 0
    fd2e:	90 93 56 1c 	sts	0x1C56, r25	; 0x801c56 <errno+0x1>
    fd32:	80 93 55 1c 	sts	0x1C55, r24	; 0x801c55 <errno>
    fd36:	c4 01       	movw	r24, r8
    fd38:	0e 94 36 60 	call	0xc06c	; 0xc06c <f_close>
    fd3c:	c3 01       	movw	r24, r6
    fd3e:	d6 de       	rcall	.-596    	; 0xfaec <free_file_descriptor>
    fd40:	c2 cf       	rjmp	.-124    	; 0xfcc6 <open+0x74>
    fd42:	f2 e0       	ldi	r31, 0x02	; 2
    fd44:	ef 16       	cp	r14, r31
    fd46:	f1 04       	cpc	r15, r1
    fd48:	51 f4       	brne	.+20     	; 0xfd5e <open+0x10c>
    fd4a:	8e e3       	ldi	r24, 0x3E	; 62
    fd4c:	96 e7       	ldi	r25, 0x76	; 118
    fd4e:	99 87       	std	Y+9, r25	; 0x09
    fd50:	88 87       	std	Y+8, r24	; 0x08
    fd52:	8b eb       	ldi	r24, 0xBB	; 187
    fd54:	95 e7       	ldi	r25, 0x75	; 117
    fd56:	9b 87       	std	Y+11, r25	; 0x0b
    fd58:	8a 87       	std	Y+10, r24	; 0x0a
    fd5a:	83 e0       	ldi	r24, 0x03	; 3
    fd5c:	12 c0       	rjmp	.+36     	; 0xfd82 <open+0x130>
    fd5e:	e1 14       	cp	r14, r1
    fd60:	f1 04       	cpc	r15, r1
    fd62:	41 f4       	brne	.+16     	; 0xfd74 <open+0x122>
    fd64:	19 86       	std	Y+9, r1	; 0x09
    fd66:	18 86       	std	Y+8, r1	; 0x08
    fd68:	8b eb       	ldi	r24, 0xBB	; 187
    fd6a:	95 e7       	ldi	r25, 0x75	; 117
    fd6c:	9b 87       	std	Y+11, r25	; 0x0b
    fd6e:	8a 87       	std	Y+10, r24	; 0x0a
    fd70:	81 e0       	ldi	r24, 0x01	; 1
    fd72:	07 c0       	rjmp	.+14     	; 0xfd82 <open+0x130>
    fd74:	8e e3       	ldi	r24, 0x3E	; 62
    fd76:	96 e7       	ldi	r25, 0x76	; 118
    fd78:	99 87       	std	Y+9, r25	; 0x09
    fd7a:	88 87       	std	Y+8, r24	; 0x08
    fd7c:	1b 86       	std	Y+11, r1	; 0x0b
    fd7e:	1a 86       	std	Y+10, r1	; 0x0a
    fd80:	82 e0       	ldi	r24, 0x02	; 2
    fd82:	8b 83       	std	Y+3, r24	; 0x03
    fd84:	c3 01       	movw	r24, r6
    fd86:	cd b7       	in	r28, 0x3d	; 61
    fd88:	de b7       	in	r29, 0x3e	; 62
    fd8a:	ee e0       	ldi	r30, 0x0E	; 14
    fd8c:	0c 94 a6 e4 	jmp	0x1c94c	; 0x1c94c <__epilogue_restores__+0x8>

0000fd90 <posix_fopen_modes_to_open>:
    fd90:	cf 93       	push	r28
    fd92:	df 93       	push	r29
    fd94:	ec 01       	movw	r28, r24
    fd96:	62 e6       	ldi	r22, 0x62	; 98
    fd98:	72 e0       	ldi	r23, 0x02	; 2
    fd9a:	0e 94 bb 32 	call	0x6576	; 0x6576 <strcmp>
    fd9e:	00 97       	sbiw	r24, 0x00	; 0
    fda0:	09 f4       	brne	.+2      	; 0xfda4 <posix_fopen_modes_to_open+0x14>
    fda2:	5d c0       	rjmp	.+186    	; 0xfe5e <posix_fopen_modes_to_open+0xce>
    fda4:	6e e1       	ldi	r22, 0x1E	; 30
    fda6:	78 e0       	ldi	r23, 0x08	; 8
    fda8:	ce 01       	movw	r24, r28
    fdaa:	0e 94 bb 32 	call	0x6576	; 0x6576 <strcmp>
    fdae:	00 97       	sbiw	r24, 0x00	; 0
    fdb0:	09 f4       	brne	.+2      	; 0xfdb4 <posix_fopen_modes_to_open+0x24>
    fdb2:	55 c0       	rjmp	.+170    	; 0xfe5e <posix_fopen_modes_to_open+0xce>
    fdb4:	61 e2       	ldi	r22, 0x21	; 33
    fdb6:	78 e0       	ldi	r23, 0x08	; 8
    fdb8:	ce 01       	movw	r24, r28
    fdba:	0e 94 bb 32 	call	0x6576	; 0x6576 <strcmp>
    fdbe:	89 2b       	or	r24, r25
    fdc0:	09 f4       	brne	.+2      	; 0xfdc4 <posix_fopen_modes_to_open+0x34>
    fdc2:	42 c0       	rjmp	.+132    	; 0xfe48 <posix_fopen_modes_to_open+0xb8>
    fdc4:	64 e2       	ldi	r22, 0x24	; 36
    fdc6:	78 e0       	ldi	r23, 0x08	; 8
    fdc8:	ce 01       	movw	r24, r28
    fdca:	0e 94 bb 32 	call	0x6576	; 0x6576 <strcmp>
    fdce:	89 2b       	or	r24, r25
    fdd0:	d9 f1       	breq	.+118    	; 0xfe48 <posix_fopen_modes_to_open+0xb8>
    fdd2:	68 e2       	ldi	r22, 0x28	; 40
    fdd4:	78 e0       	ldi	r23, 0x08	; 8
    fdd6:	ce 01       	movw	r24, r28
    fdd8:	0e 94 bb 32 	call	0x6576	; 0x6576 <strcmp>
    fddc:	89 2b       	or	r24, r25
    fdde:	a1 f1       	breq	.+104    	; 0xfe48 <posix_fopen_modes_to_open+0xb8>
    fde0:	6d ed       	ldi	r22, 0xDD	; 221
    fde2:	79 e0       	ldi	r23, 0x09	; 9
    fde4:	ce 01       	movw	r24, r28
    fde6:	0e 94 bb 32 	call	0x6576	; 0x6576 <strcmp>
    fdea:	89 2b       	or	r24, r25
    fdec:	81 f1       	breq	.+96     	; 0xfe4e <posix_fopen_modes_to_open+0xbe>
    fdee:	6c e2       	ldi	r22, 0x2C	; 44
    fdf0:	78 e0       	ldi	r23, 0x08	; 8
    fdf2:	ce 01       	movw	r24, r28
    fdf4:	0e 94 bb 32 	call	0x6576	; 0x6576 <strcmp>
    fdf8:	89 2b       	or	r24, r25
    fdfa:	49 f1       	breq	.+82     	; 0xfe4e <posix_fopen_modes_to_open+0xbe>
    fdfc:	6f e2       	ldi	r22, 0x2F	; 47
    fdfe:	78 e0       	ldi	r23, 0x08	; 8
    fe00:	ce 01       	movw	r24, r28
    fe02:	0e 94 bb 32 	call	0x6576	; 0x6576 <strcmp>
    fe06:	89 2b       	or	r24, r25
    fe08:	29 f1       	breq	.+74     	; 0xfe54 <posix_fopen_modes_to_open+0xc4>
    fe0a:	62 e3       	ldi	r22, 0x32	; 50
    fe0c:	78 e0       	ldi	r23, 0x08	; 8
    fe0e:	ce 01       	movw	r24, r28
    fe10:	0e 94 bb 32 	call	0x6576	; 0x6576 <strcmp>
    fe14:	89 2b       	or	r24, r25
    fe16:	f1 f0       	breq	.+60     	; 0xfe54 <posix_fopen_modes_to_open+0xc4>
    fe18:	66 e3       	ldi	r22, 0x36	; 54
    fe1a:	78 e0       	ldi	r23, 0x08	; 8
    fe1c:	ce 01       	movw	r24, r28
    fe1e:	0e 94 bb 32 	call	0x6576	; 0x6576 <strcmp>
    fe22:	89 2b       	or	r24, r25
    fe24:	b9 f0       	breq	.+46     	; 0xfe54 <posix_fopen_modes_to_open+0xc4>
    fe26:	6e e3       	ldi	r22, 0x3E	; 62
    fe28:	72 e1       	ldi	r23, 0x12	; 18
    fe2a:	ce 01       	movw	r24, r28
    fe2c:	0e 94 bb 32 	call	0x6576	; 0x6576 <strcmp>
    fe30:	89 2b       	or	r24, r25
    fe32:	99 f0       	breq	.+38     	; 0xfe5a <posix_fopen_modes_to_open+0xca>
    fe34:	6a e3       	ldi	r22, 0x3A	; 58
    fe36:	78 e0       	ldi	r23, 0x08	; 8
    fe38:	ce 01       	movw	r24, r28
    fe3a:	0e 94 bb 32 	call	0x6576	; 0x6576 <strcmp>
    fe3e:	89 2b       	or	r24, r25
    fe40:	61 f0       	breq	.+24     	; 0xfe5a <posix_fopen_modes_to_open+0xca>
    fe42:	8f ef       	ldi	r24, 0xFF	; 255
    fe44:	9f ef       	ldi	r25, 0xFF	; 255
    fe46:	0b c0       	rjmp	.+22     	; 0xfe5e <posix_fopen_modes_to_open+0xce>
    fe48:	82 e0       	ldi	r24, 0x02	; 2
    fe4a:	92 e0       	ldi	r25, 0x02	; 2
    fe4c:	08 c0       	rjmp	.+16     	; 0xfe5e <posix_fopen_modes_to_open+0xce>
    fe4e:	81 e4       	ldi	r24, 0x41	; 65
    fe50:	92 e0       	ldi	r25, 0x02	; 2
    fe52:	05 c0       	rjmp	.+10     	; 0xfe5e <posix_fopen_modes_to_open+0xce>
    fe54:	82 e4       	ldi	r24, 0x42	; 66
    fe56:	92 e0       	ldi	r25, 0x02	; 2
    fe58:	02 c0       	rjmp	.+4      	; 0xfe5e <posix_fopen_modes_to_open+0xce>
    fe5a:	81 e4       	ldi	r24, 0x41	; 65
    fe5c:	94 e0       	ldi	r25, 0x04	; 4
    fe5e:	df 91       	pop	r29
    fe60:	cf 91       	pop	r28
    fe62:	08 95       	ret

0000fe64 <fopen>:
    fe64:	cf 93       	push	r28
    fe66:	df 93       	push	r29
    fe68:	ec 01       	movw	r28, r24
    fe6a:	cb 01       	movw	r24, r22
    fe6c:	91 df       	rcall	.-222    	; 0xfd90 <posix_fopen_modes_to_open>
    fe6e:	bc 01       	movw	r22, r24
    fe70:	ce 01       	movw	r24, r28
    fe72:	ef de       	rcall	.-546    	; 0xfc52 <open>
    fe74:	8e d8       	rcall	.-3812   	; 0xef92 <fileno_to_stream>
    fe76:	df 91       	pop	r29
    fe78:	cf 91       	pop	r28
    fe7a:	08 95       	ret

0000fe7c <fprintf>:
    fe7c:	a8 e0       	ldi	r26, 0x08	; 8
    fe7e:	b0 e0       	ldi	r27, 0x00	; 0
    fe80:	e4 e4       	ldi	r30, 0x44	; 68
    fe82:	ff e7       	ldi	r31, 0x7F	; 127
    fe84:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
    fe88:	81 e3       	ldi	r24, 0x31	; 49
    fe8a:	97 e7       	ldi	r25, 0x77	; 119
    fe8c:	9a 83       	std	Y+2, r25	; 0x02
    fe8e:	89 83       	std	Y+1, r24	; 0x01
    fe90:	18 86       	std	Y+8, r1	; 0x08
    fe92:	1f 82       	std	Y+7, r1	; 0x07
    fe94:	8d 85       	ldd	r24, Y+13	; 0x0d
    fe96:	9e 85       	ldd	r25, Y+14	; 0x0e
    fe98:	9c 83       	std	Y+4, r25	; 0x04
    fe9a:	8b 83       	std	Y+3, r24	; 0x03
    fe9c:	4f 85       	ldd	r20, Y+15	; 0x0f
    fe9e:	58 89       	ldd	r21, Y+16	; 0x10
    fea0:	60 e8       	ldi	r22, 0x80	; 128
    fea2:	9e 01       	movw	r18, r28
    fea4:	2f 5e       	subi	r18, 0xEF	; 239
    fea6:	3f 4f       	sbci	r19, 0xFF	; 255
    fea8:	ce 01       	movw	r24, r28
    feaa:	01 96       	adiw	r24, 0x01	; 1
    feac:	0e 94 04 43 	call	0x8608	; 0x8608 <_printf_fn>
    feb0:	8f 81       	ldd	r24, Y+7	; 0x07
    feb2:	98 85       	ldd	r25, Y+8	; 0x08
    feb4:	28 96       	adiw	r28, 0x08	; 8
    feb6:	e2 e0       	ldi	r30, 0x02	; 2
    feb8:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

0000febc <posix_help>:
    febc:	cf 93       	push	r28
    febe:	df 93       	push	r29
    fec0:	00 d0       	rcall	.+0      	; 0xfec2 <posix_help+0x6>
    fec2:	1f 92       	push	r1
    fec4:	ec 01       	movw	r28, r24
    fec6:	84 ed       	ldi	r24, 0xD4	; 212
    fec8:	9d e0       	ldi	r25, 0x0D	; 13
    feca:	a0 e0       	ldi	r26, 0x00	; 0
    fecc:	ed b7       	in	r30, 0x3d	; 61
    fece:	fe b7       	in	r31, 0x3e	; 62
    fed0:	81 83       	std	Z+1, r24	; 0x01
    fed2:	92 83       	std	Z+2, r25	; 0x02
    fed4:	a3 83       	std	Z+3, r26	; 0x03
    fed6:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    feda:	cd 2b       	or	r28, r29
    fedc:	51 f0       	breq	.+20     	; 0xfef2 <posix_help+0x36>
    fede:	84 e1       	ldi	r24, 0x14	; 20
    fee0:	9d e0       	ldi	r25, 0x0D	; 13
    fee2:	a0 e0       	ldi	r26, 0x00	; 0
    fee4:	ed b7       	in	r30, 0x3d	; 61
    fee6:	fe b7       	in	r31, 0x3e	; 62
    fee8:	81 83       	std	Z+1, r24	; 0x01
    feea:	92 83       	std	Z+2, r25	; 0x02
    feec:	a3 83       	std	Z+3, r26	; 0x03
    feee:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    fef2:	cd b7       	in	r28, 0x3d	; 61
    fef4:	de b7       	in	r29, 0x3e	; 62
    fef6:	23 96       	adiw	r28, 0x03	; 3
    fef8:	e2 e0       	ldi	r30, 0x02	; 2
    fefa:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

0000fefe <copy>:
    fefe:	4f 92       	push	r4
    ff00:	5f 92       	push	r5
    ff02:	6f 92       	push	r6
    ff04:	8f 92       	push	r8
    ff06:	9f 92       	push	r9
    ff08:	af 92       	push	r10
    ff0a:	bf 92       	push	r11
    ff0c:	cf 92       	push	r12
    ff0e:	df 92       	push	r13
    ff10:	ef 92       	push	r14
    ff12:	ff 92       	push	r15
    ff14:	0f 93       	push	r16
    ff16:	1f 93       	push	r17
    ff18:	cf 93       	push	r28
    ff1a:	df 93       	push	r29
    ff1c:	ad b7       	in	r26, 0x3d	; 61
    ff1e:	be b7       	in	r27, 0x3e	; 62
    ff20:	17 97       	sbiw	r26, 0x07	; 7
    ff22:	0f b6       	in	r0, 0x3f	; 63
    ff24:	f8 94       	cli
    ff26:	be bf       	out	0x3e, r27	; 62
    ff28:	0f be       	out	0x3f, r0	; 63
    ff2a:	ad bf       	out	0x3d, r26	; 61
    ff2c:	8c 01       	movw	r16, r24
    ff2e:	eb 01       	movw	r28, r22
    ff30:	ed b7       	in	r30, 0x3d	; 61
    ff32:	fe b7       	in	r31, 0x3e	; 62
    ff34:	95 83       	std	Z+5, r25	; 0x05
    ff36:	84 83       	std	Z+4, r24	; 0x04
    ff38:	85 e9       	ldi	r24, 0x95	; 149
    ff3a:	9c e0       	ldi	r25, 0x0C	; 12
    ff3c:	a0 e0       	ldi	r26, 0x00	; 0
    ff3e:	81 83       	std	Z+1, r24	; 0x01
    ff40:	92 83       	std	Z+2, r25	; 0x02
    ff42:	a3 83       	std	Z+3, r26	; 0x03
    ff44:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    ff48:	6e e1       	ldi	r22, 0x1E	; 30
    ff4a:	78 e0       	ldi	r23, 0x08	; 8
    ff4c:	c8 01       	movw	r24, r16
    ff4e:	8a df       	rcall	.-236    	; 0xfe64 <fopen>
    ff50:	7c 01       	movw	r14, r24
    ff52:	ed b7       	in	r30, 0x3d	; 61
    ff54:	fe b7       	in	r31, 0x3e	; 62
    ff56:	89 2b       	or	r24, r25
    ff58:	59 f4       	brne	.+22     	; 0xff70 <__DATA_REGION_LENGTH__+0x70>
    ff5a:	15 83       	std	Z+5, r17	; 0x05
    ff5c:	04 83       	std	Z+4, r16	; 0x04
    ff5e:	85 e8       	ldi	r24, 0x85	; 133
    ff60:	9c e0       	ldi	r25, 0x0C	; 12
    ff62:	a0 e0       	ldi	r26, 0x00	; 0
    ff64:	81 83       	std	Z+1, r24	; 0x01
    ff66:	92 83       	std	Z+2, r25	; 0x02
    ff68:	a3 83       	std	Z+3, r26	; 0x03
    ff6a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    ff6e:	20 c0       	rjmp	.+64     	; 0xffb0 <__DATA_REGION_LENGTH__+0xb0>
    ff70:	d5 83       	std	Z+5, r29	; 0x05
    ff72:	c4 83       	std	Z+4, r28	; 0x04
    ff74:	88 e7       	ldi	r24, 0x78	; 120
    ff76:	9c e0       	ldi	r25, 0x0C	; 12
    ff78:	a0 e0       	ldi	r26, 0x00	; 0
    ff7a:	81 83       	std	Z+1, r24	; 0x01
    ff7c:	92 83       	std	Z+2, r25	; 0x02
    ff7e:	a3 83       	std	Z+3, r26	; 0x03
    ff80:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    ff84:	6c e2       	ldi	r22, 0x2C	; 44
    ff86:	78 e0       	ldi	r23, 0x08	; 8
    ff88:	ce 01       	movw	r24, r28
    ff8a:	6c df       	rcall	.-296    	; 0xfe64 <fopen>
    ff8c:	8c 01       	movw	r16, r24
    ff8e:	89 2b       	or	r24, r25
    ff90:	a1 f4       	brne	.+40     	; 0xffba <__DATA_REGION_LENGTH__+0xba>
    ff92:	ed b7       	in	r30, 0x3d	; 61
    ff94:	fe b7       	in	r31, 0x3e	; 62
    ff96:	d5 83       	std	Z+5, r29	; 0x05
    ff98:	c4 83       	std	Z+4, r28	; 0x04
    ff9a:	88 e6       	ldi	r24, 0x68	; 104
    ff9c:	9c e0       	ldi	r25, 0x0C	; 12
    ff9e:	a0 e0       	ldi	r26, 0x00	; 0
    ffa0:	81 83       	std	Z+1, r24	; 0x01
    ffa2:	92 83       	std	Z+2, r25	; 0x02
    ffa4:	a3 83       	std	Z+3, r26	; 0x03
    ffa6:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    ffaa:	80 e0       	ldi	r24, 0x00	; 0
    ffac:	90 e0       	ldi	r25, 0x00	; 0
    ffae:	04 de       	rcall	.-1016   	; 0xfbb8 <fclose>
    ffb0:	60 e0       	ldi	r22, 0x00	; 0
    ffb2:	70 e0       	ldi	r23, 0x00	; 0
    ffb4:	80 e0       	ldi	r24, 0x00	; 0
    ffb6:	90 e0       	ldi	r25, 0x00	; 0
    ffb8:	68 c0       	rjmp	.+208    	; 0x1008a <__EEPROM_REGION_LENGTH__+0x8a>
    ffba:	61 e0       	ldi	r22, 0x01	; 1
    ffbc:	70 e0       	ldi	r23, 0x00	; 0
    ffbe:	80 e0       	ldi	r24, 0x00	; 0
    ffc0:	92 e0       	ldi	r25, 0x02	; 2
    ffc2:	0e 94 75 29 	call	0x52ea	; 0x52ea <safecalloc>
    ffc6:	6c 01       	movw	r12, r24
    ffc8:	89 2b       	or	r24, r25
    ffca:	21 f4       	brne	.+8      	; 0xffd4 <__DATA_REGION_LENGTH__+0xd4>
    ffcc:	c7 01       	movw	r24, r14
    ffce:	f4 dd       	rcall	.-1048   	; 0xfbb8 <fclose>
    ffd0:	c8 01       	movw	r24, r16
    ffd2:	ed cf       	rjmp	.-38     	; 0xffae <__DATA_REGION_LENGTH__+0xae>
    ffd4:	8b e5       	ldi	r24, 0x5B	; 91
    ffd6:	9c e0       	ldi	r25, 0x0C	; 12
    ffd8:	a0 e0       	ldi	r26, 0x00	; 0
    ffda:	ed b7       	in	r30, 0x3d	; 61
    ffdc:	fe b7       	in	r31, 0x3e	; 62
    ffde:	81 83       	std	Z+1, r24	; 0x01
    ffe0:	92 83       	std	Z+2, r25	; 0x02
    ffe2:	a3 83       	std	Z+3, r26	; 0x03
    ffe4:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    ffe8:	81 2c       	mov	r8, r1
    ffea:	91 2c       	mov	r9, r1
    ffec:	54 01       	movw	r10, r8
    ffee:	8f e3       	ldi	r24, 0x3F	; 63
    fff0:	9c e0       	ldi	r25, 0x0C	; 12
    fff2:	2c 01       	movw	r4, r24
    fff4:	61 2c       	mov	r6, r1
    fff6:	97 01       	movw	r18, r14
    fff8:	40 e0       	ldi	r20, 0x00	; 0
    fffa:	52 e0       	ldi	r21, 0x02	; 2
    fffc:	61 e0       	ldi	r22, 0x01	; 1
    fffe:	70 e0       	ldi	r23, 0x00	; 0
   10000:	c6 01       	movw	r24, r12
   10002:	86 dc       	rcall	.-1780   	; 0xf910 <fread>
   10004:	ec 01       	movw	r28, r24
   10006:	18 16       	cp	r1, r24
   10008:	19 06       	cpc	r1, r25
   1000a:	44 f5       	brge	.+80     	; 0x1005c <__EEPROM_REGION_LENGTH__+0x5c>
   1000c:	98 01       	movw	r18, r16
   1000e:	ae 01       	movw	r20, r28
   10010:	61 e0       	ldi	r22, 0x01	; 1
   10012:	70 e0       	ldi	r23, 0x00	; 0
   10014:	c6 01       	movw	r24, r12
   10016:	4e dd       	rcall	.-1380   	; 0xfab4 <fwrite>
   10018:	8c 17       	cp	r24, r28
   1001a:	9d 07       	cpc	r25, r29
   1001c:	5c f4       	brge	.+22     	; 0x10034 <__EEPROM_REGION_LENGTH__+0x34>
   1001e:	8e e4       	ldi	r24, 0x4E	; 78
   10020:	9c e0       	ldi	r25, 0x0C	; 12
   10022:	a0 e0       	ldi	r26, 0x00	; 0
   10024:	ed b7       	in	r30, 0x3d	; 61
   10026:	fe b7       	in	r31, 0x3e	; 62
   10028:	81 83       	std	Z+1, r24	; 0x01
   1002a:	92 83       	std	Z+2, r25	; 0x02
   1002c:	a3 83       	std	Z+3, r26	; 0x03
   1002e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   10032:	14 c0       	rjmp	.+40     	; 0x1005c <__EEPROM_REGION_LENGTH__+0x5c>
   10034:	ce 01       	movw	r24, r28
   10036:	dd 0f       	add	r29, r29
   10038:	aa 0b       	sbc	r26, r26
   1003a:	bb 0b       	sbc	r27, r27
   1003c:	88 0e       	add	r8, r24
   1003e:	99 1e       	adc	r9, r25
   10040:	aa 1e       	adc	r10, r26
   10042:	bb 1e       	adc	r11, r27
   10044:	ed b7       	in	r30, 0x3d	; 61
   10046:	fe b7       	in	r31, 0x3e	; 62
   10048:	84 82       	std	Z+4, r8	; 0x04
   1004a:	95 82       	std	Z+5, r9	; 0x05
   1004c:	a6 82       	std	Z+6, r10	; 0x06
   1004e:	b7 82       	std	Z+7, r11	; 0x07
   10050:	41 82       	std	Z+1, r4	; 0x01
   10052:	52 82       	std	Z+2, r5	; 0x02
   10054:	63 82       	std	Z+3, r6	; 0x03
   10056:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1005a:	cd cf       	rjmp	.-102    	; 0xfff6 <__DATA_REGION_LENGTH__+0xf6>
   1005c:	ed b7       	in	r30, 0x3d	; 61
   1005e:	fe b7       	in	r31, 0x3e	; 62
   10060:	84 82       	std	Z+4, r8	; 0x04
   10062:	95 82       	std	Z+5, r9	; 0x05
   10064:	a6 82       	std	Z+6, r10	; 0x06
   10066:	b7 82       	std	Z+7, r11	; 0x07
   10068:	8c e2       	ldi	r24, 0x2C	; 44
   1006a:	9c e0       	ldi	r25, 0x0C	; 12
   1006c:	a0 e0       	ldi	r26, 0x00	; 0
   1006e:	81 83       	std	Z+1, r24	; 0x01
   10070:	92 83       	std	Z+2, r25	; 0x02
   10072:	a3 83       	std	Z+3, r26	; 0x03
   10074:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   10078:	c6 01       	movw	r24, r12
   1007a:	0e 94 c1 29 	call	0x5382	; 0x5382 <safefree>
   1007e:	c7 01       	movw	r24, r14
   10080:	9b dd       	rcall	.-1226   	; 0xfbb8 <fclose>
   10082:	c8 01       	movw	r24, r16
   10084:	99 dd       	rcall	.-1230   	; 0xfbb8 <fclose>
   10086:	b4 01       	movw	r22, r8
   10088:	c5 01       	movw	r24, r10
   1008a:	ad b7       	in	r26, 0x3d	; 61
   1008c:	be b7       	in	r27, 0x3e	; 62
   1008e:	17 96       	adiw	r26, 0x07	; 7
   10090:	0f b6       	in	r0, 0x3f	; 63
   10092:	f8 94       	cli
   10094:	be bf       	out	0x3e, r27	; 62
   10096:	0f be       	out	0x3f, r0	; 63
   10098:	ad bf       	out	0x3d, r26	; 61
   1009a:	df 91       	pop	r29
   1009c:	cf 91       	pop	r28
   1009e:	1f 91       	pop	r17
   100a0:	0f 91       	pop	r16
   100a2:	ff 90       	pop	r15
   100a4:	ef 90       	pop	r14
   100a6:	df 90       	pop	r13
   100a8:	cf 90       	pop	r12
   100aa:	bf 90       	pop	r11
   100ac:	af 90       	pop	r10
   100ae:	9f 90       	pop	r9
   100b0:	8f 90       	pop	r8
   100b2:	6f 90       	pop	r6
   100b4:	5f 90       	pop	r5
   100b6:	4f 90       	pop	r4
   100b8:	08 95       	ret

000100ba <testpage>:
   100ba:	cf 93       	push	r28
   100bc:	df 93       	push	r29
   100be:	00 d0       	rcall	.+0      	; 0x100c0 <testpage+0x6>
   100c0:	1f 92       	push	r1
   100c2:	20 91 8d 01 	lds	r18, 0x018D	; 0x80018d <_pagesize>
   100c6:	30 91 8e 01 	lds	r19, 0x018E	; 0x80018e <_pagesize+0x1>
   100ca:	82 17       	cp	r24, r18
   100cc:	93 07       	cpc	r25, r19
   100ce:	3c f1       	brlt	.+78     	; 0x1011e <testpage+0x64>
   100d0:	85 e2       	ldi	r24, 0x25	; 37
   100d2:	9c e0       	ldi	r25, 0x0C	; 12
   100d4:	a0 e0       	ldi	r26, 0x00	; 0
   100d6:	ed b7       	in	r30, 0x3d	; 61
   100d8:	fe b7       	in	r31, 0x3e	; 62
   100da:	81 83       	std	Z+1, r24	; 0x01
   100dc:	92 83       	std	Z+2, r25	; 0x02
   100de:	a3 83       	std	Z+3, r26	; 0x03
   100e0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   100e4:	0e 94 3e 77 	call	0xee7c	; 0xee7c <getchar>
   100e8:	ec 01       	movw	r28, r24
   100ea:	83 e2       	ldi	r24, 0x23	; 35
   100ec:	9c e0       	ldi	r25, 0x0C	; 12
   100ee:	a0 e0       	ldi	r26, 0x00	; 0
   100f0:	ed b7       	in	r30, 0x3d	; 61
   100f2:	fe b7       	in	r31, 0x3e	; 62
   100f4:	81 83       	std	Z+1, r24	; 0x01
   100f6:	92 83       	std	Z+2, r25	; 0x02
   100f8:	a3 83       	std	Z+3, r26	; 0x03
   100fa:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   100fe:	c1 37       	cpi	r28, 0x71	; 113
   10100:	d1 05       	cpc	r29, r1
   10102:	41 f0       	breq	.+16     	; 0x10114 <testpage+0x5a>
   10104:	2a 97       	sbiw	r28, 0x0a	; 10
   10106:	49 f4       	brne	.+18     	; 0x1011a <testpage+0x60>
   10108:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <_pagesize>
   1010c:	90 91 8e 01 	lds	r25, 0x018E	; 0x80018e <_pagesize+0x1>
   10110:	01 97       	sbiw	r24, 0x01	; 1
   10112:	05 c0       	rjmp	.+10     	; 0x1011e <testpage+0x64>
   10114:	8f ef       	ldi	r24, 0xFF	; 255
   10116:	9f ef       	ldi	r25, 0xFF	; 255
   10118:	02 c0       	rjmp	.+4      	; 0x1011e <testpage+0x64>
   1011a:	80 e0       	ldi	r24, 0x00	; 0
   1011c:	90 e0       	ldi	r25, 0x00	; 0
   1011e:	cd b7       	in	r28, 0x3d	; 61
   10120:	de b7       	in	r29, 0x3e	; 62
   10122:	23 96       	adiw	r28, 0x03	; 3
   10124:	e2 e0       	ldi	r30, 0x02	; 2
   10126:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

0001012a <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
   1012a:	a7 e0       	ldi	r26, 0x07	; 7
   1012c:	b1 e0       	ldi	r27, 0x01	; 1
   1012e:	eb e9       	ldi	r30, 0x9B	; 155
   10130:	f0 e8       	ldi	r31, 0x80	; 128
   10132:	0c 94 8c e4 	jmp	0x1c918	; 0x1c918 <__prologue_saves__+0xc>
   10136:	8c 01       	movw	r16, r24
   10138:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
   1013a:	6e e1       	ldi	r22, 0x1E	; 30
   1013c:	78 e0       	ldi	r23, 0x08	; 8
   1013e:	92 de       	rcall	.-732    	; 0xfe64 <fopen>
   10140:	7c 01       	movw	r14, r24
    if (!fp)
   10142:	89 2b       	or	r24, r25
   10144:	41 f0       	breq	.+16     	; 0x10156 <cat+0x2c>
   10146:	c1 2c       	mov	r12, r1
   10148:	d1 2c       	mov	r13, r1
   1014a:	a1 2c       	mov	r10, r1
   1014c:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   1014e:	8e 01       	movw	r16, r28
   10150:	08 5f       	subi	r16, 0xF8	; 248
   10152:	1f 4f       	sbci	r17, 0xFF	; 255
   10154:	22 c0       	rjmp	.+68     	; 0x1019a <cat+0x70>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
   10156:	ed b7       	in	r30, 0x3d	; 61
   10158:	fe b7       	in	r31, 0x3e	; 62
   1015a:	15 83       	std	Z+5, r17	; 0x05
   1015c:	04 83       	std	Z+4, r16	; 0x04
   1015e:	8e ea       	ldi	r24, 0xAE	; 174
   10160:	9c e0       	ldi	r25, 0x0C	; 12
   10162:	a0 e0       	ldi	r26, 0x00	; 0
   10164:	81 83       	std	Z+1, r24	; 0x01
   10166:	92 83       	std	Z+2, r25	; 0x02
   10168:	a3 83       	std	Z+3, r26	; 0x03
   1016a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        return(0);
   1016e:	c1 2c       	mov	r12, r1
   10170:	d1 2c       	mov	r13, r1
   10172:	76 01       	movw	r14, r12
   10174:	3f c0       	rjmp	.+126    	; 0x101f4 <cat+0xca>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
   10176:	c8 01       	movw	r24, r16
   10178:	0e 94 3f 33 	call	0x667e	; 0x667e <trim_tail>
        size += strlen(line);
   1017c:	f8 01       	movw	r30, r16
   1017e:	01 90       	ld	r0, Z+
   10180:	00 20       	and	r0, r0
   10182:	e9 f7       	brne	.-6      	; 0x1017e <cat+0x54>
   10184:	31 97       	sbiw	r30, 0x01	; 1
   10186:	e0 1b       	sub	r30, r16
   10188:	f1 0b       	sbc	r31, r17
   1018a:	ce 0e       	add	r12, r30
   1018c:	df 1e       	adc	r13, r31
        puts(line);
   1018e:	c8 01       	movw	r24, r16
   10190:	0e 94 96 77 	call	0xef2c	; 0xef2c <puts>
        if(dopage)
   10194:	81 14       	cp	r8, r1
   10196:	91 04       	cpc	r9, r1
   10198:	49 f4       	brne	.+18     	; 0x101ac <cat+0x82>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   1019a:	a7 01       	movw	r20, r14
   1019c:	6e ef       	ldi	r22, 0xFE	; 254
   1019e:	70 e0       	ldi	r23, 0x00	; 0
   101a0:	c8 01       	movw	r24, r16
   101a2:	0e 94 4a 77 	call	0xee94	; 0xee94 <fgets>
   101a6:	89 2b       	or	r24, r25
   101a8:	31 f7       	brne	.-52     	; 0x10176 <cat+0x4c>
   101aa:	06 c0       	rjmp	.+12     	; 0x101b8 <cat+0x8e>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
   101ac:	c5 01       	movw	r24, r10
   101ae:	01 96       	adiw	r24, 0x01	; 1
   101b0:	84 df       	rcall	.-248    	; 0x100ba <testpage>
   101b2:	5c 01       	movw	r10, r24
            if(count < 0)
   101b4:	97 ff       	sbrs	r25, 7
   101b6:	f1 cf       	rjmp	.-30     	; 0x1019a <cat+0x70>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   101b8:	8c ea       	ldi	r24, 0xAC	; 172
   101ba:	9c e0       	ldi	r25, 0x0C	; 12
   101bc:	a0 e0       	ldi	r26, 0x00	; 0
   101be:	ed b7       	in	r30, 0x3d	; 61
   101c0:	fe b7       	in	r31, 0x3e	; 62
   101c2:	81 83       	std	Z+1, r24	; 0x01
   101c4:	92 83       	std	Z+2, r25	; 0x02
   101c6:	a3 83       	std	Z+3, r26	; 0x03
   101c8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    fclose(fp);
   101cc:	c7 01       	movw	r24, r14
   101ce:	f4 dc       	rcall	.-1560   	; 0xfbb8 <fclose>
    printf("%ld bytes\n", (long)size);
   101d0:	0d 2c       	mov	r0, r13
   101d2:	00 0c       	add	r0, r0
   101d4:	ee 08       	sbc	r14, r14
   101d6:	ff 08       	sbc	r15, r15
   101d8:	ed b7       	in	r30, 0x3d	; 61
   101da:	fe b7       	in	r31, 0x3e	; 62
   101dc:	c4 82       	std	Z+4, r12	; 0x04
   101de:	d5 82       	std	Z+5, r13	; 0x05
   101e0:	e6 82       	std	Z+6, r14	; 0x06
   101e2:	f7 82       	std	Z+7, r15	; 0x07
   101e4:	81 ea       	ldi	r24, 0xA1	; 161
   101e6:	9c e0       	ldi	r25, 0x0C	; 12
   101e8:	a0 e0       	ldi	r26, 0x00	; 0
   101ea:	81 83       	std	Z+1, r24	; 0x01
   101ec:	92 83       	std	Z+2, r25	; 0x02
   101ee:	a3 83       	std	Z+3, r26	; 0x03
   101f0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    return(size);
}
   101f4:	c7 01       	movw	r24, r14
   101f6:	b6 01       	movw	r22, r12
   101f8:	c9 5f       	subi	r28, 0xF9	; 249
   101fa:	de 4f       	sbci	r29, 0xFE	; 254
   101fc:	ec e0       	ldi	r30, 0x0C	; 12
   101fe:	0c 94 a8 e4 	jmp	0x1c950	; 0x1c950 <__epilogue_restores__+0xc>

00010202 <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10202:	4f 92       	push	r4
   10204:	5f 92       	push	r5
   10206:	6f 92       	push	r6
   10208:	7f 92       	push	r7
   1020a:	af 92       	push	r10
   1020c:	bf 92       	push	r11
   1020e:	cf 92       	push	r12
   10210:	df 92       	push	r13
   10212:	ef 92       	push	r14
   10214:	ff 92       	push	r15
   10216:	0f 93       	push	r16
   10218:	1f 93       	push	r17
   1021a:	cf 93       	push	r28
   1021c:	df 93       	push	r29
   1021e:	cd b7       	in	r28, 0x3d	; 61
   10220:	de b7       	in	r29, 0x3e	; 62
   10222:	c9 54       	subi	r28, 0x49	; 73
   10224:	d1 09       	sbc	r29, r1
   10226:	0f b6       	in	r0, 0x3f	; 63
   10228:	f8 94       	cli
   1022a:	de bf       	out	0x3e, r29	; 62
   1022c:	0f be       	out	0x3f, r0	; 63
   1022e:	cd bf       	out	0x3d, r28	; 61
   10230:	8c 01       	movw	r16, r24
   10232:	7b 01       	movw	r14, r22
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;


    if(stat(name, &sp) == -1) 
   10234:	be 01       	movw	r22, r28
   10236:	62 5f       	subi	r22, 0xF2	; 242
   10238:	7f 4f       	sbci	r23, 0xFF	; 255
   1023a:	19 d9       	rcall	.-3534   	; 0xf46e <stat>
   1023c:	01 96       	adiw	r24, 0x01	; 1
   1023e:	79 f4       	brne	.+30     	; 0x1025e <ls_info+0x5c>
    {
        printf("can not stat: %s\n", name);
   10240:	ed b7       	in	r30, 0x3d	; 61
   10242:	fe b7       	in	r31, 0x3e	; 62
   10244:	15 83       	std	Z+5, r17	; 0x05
   10246:	04 83       	std	Z+4, r16	; 0x04
   10248:	81 e1       	ldi	r24, 0x11	; 17
   1024a:	9c e0       	ldi	r25, 0x0C	; 12
   1024c:	a0 e0       	ldi	r26, 0x00	; 0
   1024e:	81 83       	std	Z+1, r24	; 0x01
   10250:	92 83       	std	Z+2, r25	; 0x02
   10252:	a3 83       	std	Z+3, r26	; 0x03
   10254:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        return(0);
   10258:	80 e0       	ldi	r24, 0x00	; 0
   1025a:	90 e0       	ldi	r25, 0x00	; 0
   1025c:	77 c0       	rjmp	.+238    	; 0x1034c <ls_info+0x14a>
    }

    if(!verbose)
   1025e:	ef 28       	or	r14, r15
   10260:	81 f4       	brne	.+32     	; 0x10282 <ls_info+0x80>
    {
        printf("%s\n",basename(name));
   10262:	c8 01       	movw	r24, r16
   10264:	0e 94 03 78 	call	0xf006	; 0xf006 <basename>
   10268:	ed b7       	in	r30, 0x3d	; 61
   1026a:	fe b7       	in	r31, 0x3e	; 62
   1026c:	95 83       	std	Z+5, r25	; 0x05
   1026e:	84 83       	std	Z+4, r24	; 0x04
   10270:	8d e0       	ldi	r24, 0x0D	; 13
   10272:	9c e0       	ldi	r25, 0x0C	; 12
   10274:	a0 e0       	ldi	r26, 0x00	; 0
   10276:	81 83       	std	Z+1, r24	; 0x01
   10278:	92 83       	std	Z+2, r25	; 0x02
   1027a:	a3 83       	std	Z+3, r26	; 0x03
   1027c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   10280:	63 c0       	rjmp	.+198    	; 0x10348 <ls_info+0x146>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
   10282:	4e 88       	ldd	r4, Y+22	; 0x16
   10284:	5f 88       	ldd	r5, Y+23	; 0x17
   10286:	68 8c       	ldd	r6, Y+24	; 0x18
   10288:	79 8c       	ldd	r7, Y+25	; 0x19
   1028a:	d3 01       	movw	r26, r6
   1028c:	c2 01       	movw	r24, r4
   1028e:	88 27       	eor	r24, r24
   10290:	90 7f       	andi	r25, 0xF0	; 240
   10292:	aa 27       	eor	r26, r26
   10294:	bb 27       	eor	r27, r27
   10296:	81 15       	cp	r24, r1
   10298:	90 44       	sbci	r25, 0x40	; 64
   1029a:	a1 05       	cpc	r26, r1
   1029c:	b1 05       	cpc	r27, r1
   1029e:	11 f4       	brne	.+4      	; 0x102a4 <ls_info+0xa2>
        *p++ = 'd';
   102a0:	84 e6       	ldi	r24, 0x64	; 100
   102a2:	01 c0       	rjmp	.+2      	; 0x102a6 <ls_info+0xa4>
    else
        *p++ = '-';
   102a4:	8d e2       	ldi	r24, 0x2D	; 45
   102a6:	8e af       	std	Y+62, r24	; 0x3e
   102a8:	fe 01       	movw	r30, r28
   102aa:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   102ac:	e1 2c       	mov	r14, r1
   102ae:	ff 24       	eor	r15, r15
   102b0:	f3 94       	inc	r15
   102b2:	20 e0       	ldi	r18, 0x00	; 0
   102b4:	30 e0       	ldi	r19, 0x00	; 0
   102b6:	be 2e       	mov	r11, r30
   102b8:	af 2e       	mov	r10, r31
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   102ba:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   102bc:	53 e0       	ldi	r21, 0x03	; 3
   102be:	c5 2e       	mov	r12, r21
   102c0:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
   102c2:	c7 01       	movw	r24, r14
   102c4:	a0 e0       	ldi	r26, 0x00	; 0
   102c6:	b0 e0       	ldi	r27, 0x00	; 0
   102c8:	84 21       	and	r24, r4
   102ca:	95 21       	and	r25, r5
   102cc:	a6 21       	and	r26, r6
   102ce:	b7 21       	and	r27, r7
   102d0:	89 2b       	or	r24, r25
   102d2:	8a 2b       	or	r24, r26
   102d4:	8b 2b       	or	r24, r27
   102d6:	51 f0       	breq	.+20     	; 0x102ec <ls_info+0xea>
            *p++ = cm[ i % 3];
   102d8:	c9 01       	movw	r24, r18
   102da:	b6 01       	movw	r22, r12
   102dc:	0e 94 f1 e3 	call	0x1c7e2	; 0x1c7e2 <__divmodhi4>
   102e0:	dc 01       	movw	r26, r24
   102e2:	a6 52       	subi	r26, 0x26	; 38
   102e4:	b5 4f       	sbci	r27, 0xF5	; 245
   102e6:	8c 91       	ld	r24, X
   102e8:	81 83       	std	Z+1, r24	; 0x01
   102ea:	01 c0       	rjmp	.+2      	; 0x102ee <ls_info+0xec>
        else
            *p++ = '-';
   102ec:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   102ee:	f6 94       	lsr	r15
   102f0:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   102f2:	2f 5f       	subi	r18, 0xFF	; 255
   102f4:	3f 4f       	sbci	r19, 0xFF	; 255
   102f6:	31 96       	adiw	r30, 0x01	; 1
   102f8:	29 30       	cpi	r18, 0x09	; 9
   102fa:	31 05       	cpc	r19, r1
   102fc:	11 f7       	brne	.-60     	; 0x102c2 <ls_info+0xc0>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   102fe:	29 96       	adiw	r28, 0x09	; 9
   10300:	1f ae       	std	Y+63, r1	; 0x3f
   10302:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
   10304:	4e a0       	ldd	r4, Y+38	; 0x26
   10306:	5f a0       	ldd	r5, Y+39	; 0x27
   10308:	68 a4       	ldd	r6, Y+40	; 0x28
   1030a:	79 a4       	ldd	r7, Y+41	; 0x29
   1030c:	6e a9       	ldd	r22, Y+54	; 0x36
   1030e:	7f a9       	ldd	r23, Y+55	; 0x37
   10310:	88 ad       	ldd	r24, Y+56	; 0x38
   10312:	99 ad       	ldd	r25, Y+57	; 0x39
   10314:	0e 94 de 77 	call	0xefbc	; 0xefbc <mctime>
   10318:	7c 01       	movw	r14, r24
   1031a:	c8 01       	movw	r24, r16
   1031c:	0e 94 03 78 	call	0xf006	; 0xf006 <basename>
   10320:	ed b7       	in	r30, 0x3d	; 61
   10322:	fe b7       	in	r31, 0x3e	; 62
   10324:	95 87       	std	Z+13, r25	; 0x0d
   10326:	84 87       	std	Z+12, r24	; 0x0c
   10328:	f3 86       	std	Z+11, r15	; 0x0b
   1032a:	e2 86       	std	Z+10, r14	; 0x0a
   1032c:	46 82       	std	Z+6, r4	; 0x06
   1032e:	57 82       	std	Z+7, r5	; 0x07
   10330:	60 86       	std	Z+8, r6	; 0x08
   10332:	71 86       	std	Z+9, r7	; 0x09
   10334:	b4 82       	std	Z+4, r11	; 0x04
   10336:	a5 82       	std	Z+5, r10	; 0x05
   10338:	83 ef       	ldi	r24, 0xF3	; 243
   1033a:	9b e0       	ldi	r25, 0x0B	; 11
   1033c:	a0 e0       	ldi	r26, 0x00	; 0
   1033e:	81 83       	std	Z+1, r24	; 0x01
   10340:	92 83       	std	Z+2, r25	; 0x02
   10342:	a3 83       	std	Z+3, r26	; 0x03
   10344:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        attr, 
        (long) sp.st_size, 
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   10348:	81 e0       	ldi	r24, 0x01	; 1
   1034a:	90 e0       	ldi	r25, 0x00	; 0
}
   1034c:	c7 5b       	subi	r28, 0xB7	; 183
   1034e:	df 4f       	sbci	r29, 0xFF	; 255
   10350:	0f b6       	in	r0, 0x3f	; 63
   10352:	f8 94       	cli
   10354:	de bf       	out	0x3e, r29	; 62
   10356:	0f be       	out	0x3f, r0	; 63
   10358:	cd bf       	out	0x3d, r28	; 61
   1035a:	df 91       	pop	r29
   1035c:	cf 91       	pop	r28
   1035e:	1f 91       	pop	r17
   10360:	0f 91       	pop	r16
   10362:	ff 90       	pop	r15
   10364:	ef 90       	pop	r14
   10366:	df 90       	pop	r13
   10368:	cf 90       	pop	r12
   1036a:	bf 90       	pop	r11
   1036c:	af 90       	pop	r10
   1036e:	7f 90       	pop	r7
   10370:	6f 90       	pop	r6
   10372:	5f 90       	pop	r5
   10374:	4f 90       	pop	r4
   10376:	08 95       	ret

00010378 <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
   10378:	2f 92       	push	r2
   1037a:	3f 92       	push	r3
   1037c:	4f 92       	push	r4
   1037e:	5f 92       	push	r5
   10380:	6f 92       	push	r6
   10382:	8f 92       	push	r8
   10384:	9f 92       	push	r9
   10386:	af 92       	push	r10
   10388:	bf 92       	push	r11
   1038a:	cf 92       	push	r12
   1038c:	df 92       	push	r13
   1038e:	ef 92       	push	r14
   10390:	ff 92       	push	r15
   10392:	0f 93       	push	r16
   10394:	1f 93       	push	r17
   10396:	cf 93       	push	r28
   10398:	df 93       	push	r29
   1039a:	cd b7       	in	r28, 0x3d	; 61
   1039c:	de b7       	in	r29, 0x3e	; 62
   1039e:	c7 53       	subi	r28, 0x37	; 55
   103a0:	d1 40       	sbci	r29, 0x01	; 1
   103a2:	0f b6       	in	r0, 0x3f	; 63
   103a4:	f8 94       	cli
   103a6:	de bf       	out	0x3e, r29	; 62
   103a8:	0f be       	out	0x3f, r0	; 63
   103aa:	cd bf       	out	0x3d, r28	; 61
   103ac:	7c 01       	movw	r14, r24
   103ae:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   103b0:	1e 82       	std	Y+6, r1	; 0x06
   103b2:	8e 01       	movw	r16, r28
   103b4:	0a 5f       	subi	r16, 0xFA	; 250
   103b6:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   103b8:	00 97       	sbiw	r24, 0x00	; 0
   103ba:	91 f4       	brne	.+36     	; 0x103e0 <ls+0x68>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   103bc:	6e ef       	ldi	r22, 0xFE	; 254
   103be:	70 e0       	ldi	r23, 0x00	; 0
   103c0:	c8 01       	movw	r24, r16
   103c2:	0e 94 59 78 	call	0xf0b2	; 0xf0b2 <getcwd>
   103c6:	89 2b       	or	r24, r25
   103c8:	d1 f4       	brne	.+52     	; 0x103fe <ls+0x86>
        {
            printf("ls: Can't get current directory\n"); 
   103ca:	82 ed       	ldi	r24, 0xD2	; 210
   103cc:	9b e0       	ldi	r25, 0x0B	; 11
   103ce:	a0 e0       	ldi	r26, 0x00	; 0
   103d0:	ed b7       	in	r30, 0x3d	; 61
   103d2:	fe b7       	in	r31, 0x3e	; 62
   103d4:	81 83       	std	Z+1, r24	; 0x01
   103d6:	92 83       	std	Z+2, r25	; 0x02
   103d8:	a3 83       	std	Z+3, r26	; 0x03
   103da:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   103de:	37 c0       	rjmp	.+110    	; 0x1044e <ls+0xd6>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   103e0:	fc 01       	movw	r30, r24
   103e2:	80 81       	ld	r24, Z
   103e4:	88 23       	and	r24, r24
   103e6:	51 f3       	breq	.-44     	; 0x103bc <ls+0x44>
   103e8:	6d e0       	ldi	r22, 0x0D	; 13
   103ea:	72 e1       	ldi	r23, 0x12	; 18
   103ec:	c7 01       	movw	r24, r14
   103ee:	0e 94 59 33 	call	0x66b2	; 0x66b2 <MATCH>
   103f2:	89 2b       	or	r24, r25
   103f4:	19 f7       	brne	.-58     	; 0x103bc <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   103f6:	b7 01       	movw	r22, r14
   103f8:	c8 01       	movw	r24, r16
   103fa:	0e 94 61 32 	call	0x64c2	; 0x64c2 <strcpy>
    }
    len = strlen(fullpath);
   103fe:	f8 01       	movw	r30, r16
   10400:	01 90       	ld	r0, Z+
   10402:	00 20       	and	r0, r0
   10404:	e9 f7       	brne	.-6      	; 0x10400 <ls+0x88>
   10406:	31 97       	sbiw	r30, 0x01	; 1
   10408:	1f 01       	movw	r2, r30
   1040a:	20 1a       	sub	r2, r16
   1040c:	31 0a       	sbc	r3, r17


    printf("Listing:[%s]\n",fullpath);
   1040e:	ed b7       	in	r30, 0x3d	; 61
   10410:	fe b7       	in	r31, 0x3e	; 62
   10412:	15 83       	std	Z+5, r17	; 0x05
   10414:	04 83       	std	Z+4, r16	; 0x04
   10416:	84 ec       	ldi	r24, 0xC4	; 196
   10418:	9b e0       	ldi	r25, 0x0B	; 11
   1041a:	a0 e0       	ldi	r26, 0x00	; 0
   1041c:	81 83       	std	Z+1, r24	; 0x01
   1041e:	92 83       	std	Z+2, r25	; 0x02
   10420:	a3 83       	std	Z+3, r26	; 0x03
   10422:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

    if (stat(fullpath, &st)) 
   10426:	be 01       	movw	r22, r28
   10428:	6a 5f       	subi	r22, 0xFA	; 250
   1042a:	7e 4f       	sbci	r23, 0xFE	; 254
   1042c:	c8 01       	movw	r24, r16
   1042e:	1f d8       	rcall	.-4034   	; 0xf46e <stat>
   10430:	7c 01       	movw	r14, r24
   10432:	89 2b       	or	r24, r25
   10434:	79 f0       	breq	.+30     	; 0x10454 <ls+0xdc>
    { 
        printf("ls: cannot stat [%s]\n", fullpath); 
   10436:	ed b7       	in	r30, 0x3d	; 61
   10438:	fe b7       	in	r31, 0x3e	; 62
   1043a:	15 83       	std	Z+5, r17	; 0x05
   1043c:	04 83       	std	Z+4, r16	; 0x04
   1043e:	8e ea       	ldi	r24, 0xAE	; 174
   10440:	9b e0       	ldi	r25, 0x0B	; 11
   10442:	a0 e0       	ldi	r26, 0x00	; 0
   10444:	81 83       	std	Z+1, r24	; 0x01
   10446:	92 83       	std	Z+2, r25	; 0x02
   10448:	a3 83       	std	Z+3, r26	; 0x03
   1044a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        return(0); 
   1044e:	e1 2c       	mov	r14, r1
   10450:	f1 2c       	mov	r15, r1
   10452:	8c c0       	rjmp	.+280    	; 0x1056c <ls+0x1f4>
    }

    switch (st.st_mode & S_IFMT) 
   10454:	c2 5f       	subi	r28, 0xF2	; 242
   10456:	de 4f       	sbci	r29, 0xFE	; 254
   10458:	88 81       	ld	r24, Y
   1045a:	99 81       	ldd	r25, Y+1	; 0x01
   1045c:	aa 81       	ldd	r26, Y+2	; 0x02
   1045e:	bb 81       	ldd	r27, Y+3	; 0x03
   10460:	ce 50       	subi	r28, 0x0E	; 14
   10462:	d1 40       	sbci	r29, 0x01	; 1
   10464:	88 27       	eor	r24, r24
   10466:	90 7f       	andi	r25, 0xF0	; 240
   10468:	aa 27       	eor	r26, r26
   1046a:	bb 27       	eor	r27, r27
   1046c:	81 15       	cp	r24, r1
   1046e:	f0 e4       	ldi	r31, 0x40	; 64
   10470:	9f 07       	cpc	r25, r31
   10472:	a1 05       	cpc	r26, r1
   10474:	b1 05       	cpc	r27, r1
   10476:	59 f0       	breq	.+22     	; 0x1048e <ls+0x116>
   10478:	81 15       	cp	r24, r1
   1047a:	90 48       	sbci	r25, 0x80	; 128
   1047c:	a1 05       	cpc	r26, r1
   1047e:	b1 05       	cpc	r27, r1
   10480:	09 f0       	breq	.+2      	; 0x10484 <ls+0x10c>
   10482:	66 c0       	rjmp	.+204    	; 0x10550 <ls+0x1d8>
    {
    case S_IFREG:
        files = ls_info(fullpath,verbose);
   10484:	b4 01       	movw	r22, r8
   10486:	c8 01       	movw	r24, r16
   10488:	bc de       	rcall	.-648    	; 0x10202 <ls_info>
   1048a:	7c 01       	movw	r14, r24
        break;
   1048c:	63 c0       	rjmp	.+198    	; 0x10554 <ls+0x1dc>
    case S_IFDIR:
        dirp = opendir(fullpath);
   1048e:	c8 01       	movw	r24, r16
   10490:	0e 94 07 79 	call	0xf20e	; 0xf20e <opendir>
   10494:	5c 01       	movw	r10, r24
        if(!dirp)
   10496:	89 2b       	or	r24, r25
   10498:	81 f0       	breq	.+32     	; 0x104ba <ls+0x142>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   1049a:	e1 2c       	mov	r14, r1
   1049c:	f1 2c       	mov	r15, r1
                strcat(fullpath,"/");
            }
            strcat(fullpath,de->d_name);
            files +=ls_info(fullpath,verbose);
            // restore path
            fullpath[len] = 0;
   1049e:	c8 01       	movw	r24, r16
   104a0:	82 0d       	add	r24, r2
   104a2:	93 1d       	adc	r25, r3
   104a4:	ca 5c       	subi	r28, 0xCA	; 202
   104a6:	de 4f       	sbci	r29, 0xFE	; 254
   104a8:	99 83       	std	Y+1, r25	; 0x01
   104aa:	88 83       	st	Y, r24
   104ac:	c6 53       	subi	r28, 0x36	; 54
   104ae:	d1 40       	sbci	r29, 0x01	; 1
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   104b0:	8b e7       	ldi	r24, 0x7B	; 123
   104b2:	9b e0       	ldi	r25, 0x0B	; 11
   104b4:	2c 01       	movw	r4, r24
   104b6:	61 2c       	mov	r6, r1
   104b8:	24 c0       	rjmp	.+72     	; 0x10502 <ls+0x18a>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
        if(!dirp)
        {
            printf("opendir failed\n");
   104ba:	8e e9       	ldi	r24, 0x9E	; 158
   104bc:	9b e0       	ldi	r25, 0x0B	; 11
   104be:	a0 e0       	ldi	r26, 0x00	; 0
   104c0:	ed b7       	in	r30, 0x3d	; 61
   104c2:	fe b7       	in	r31, 0x3e	; 62
   104c4:	81 83       	std	Z+1, r24	; 0x01
   104c6:	92 83       	std	Z+2, r25	; 0x02
   104c8:	a3 83       	std	Z+3, r26	; 0x03
   104ca:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            return(0);
   104ce:	4e c0       	rjmp	.+156    	; 0x1056c <ls+0x1f4>
        }
        while ( (de = readdir(dirp)) ) 
        {
            if(de->d_name[0] == 0)
   104d0:	f6 01       	movw	r30, r12
   104d2:	80 81       	ld	r24, Z
   104d4:	88 23       	and	r24, r24
   104d6:	d9 f0       	breq	.+54     	; 0x1050e <ls+0x196>
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
   104d8:	f6 01       	movw	r30, r12
   104da:	01 90       	ld	r0, Z+
   104dc:	00 20       	and	r0, r0
   104de:	e9 f7       	brne	.-6      	; 0x104da <ls+0x162>
   104e0:	31 97       	sbiw	r30, 0x01	; 1
   104e2:	ec 19       	sub	r30, r12
   104e4:	fd 09       	sbc	r31, r13
            if(len + len2 >= MAX_NAME_LEN)
   104e6:	e2 0d       	add	r30, r2
   104e8:	f3 1d       	adc	r31, r3
   104ea:	ef 3f       	cpi	r30, 0xFF	; 255
   104ec:	f1 05       	cpc	r31, r1
   104ee:	9c f0       	brlt	.+38     	; 0x10516 <ls+0x19e>
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   104f0:	ed b7       	in	r30, 0x3d	; 61
   104f2:	fe b7       	in	r31, 0x3e	; 62
   104f4:	d5 82       	std	Z+5, r13	; 0x05
   104f6:	c4 82       	std	Z+4, r12	; 0x04
   104f8:	41 82       	std	Z+1, r4	; 0x01
   104fa:	52 82       	std	Z+2, r5	; 0x02
   104fc:	63 82       	std	Z+3, r6	; 0x03
   104fe:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        if(!dirp)
        {
            printf("opendir failed\n");
            return(0);
        }
        while ( (de = readdir(dirp)) ) 
   10502:	c5 01       	movw	r24, r10
   10504:	0e 94 25 79 	call	0xf24a	; 0xf24a <readdir>
   10508:	6c 01       	movw	r12, r24
   1050a:	89 2b       	or	r24, r25
   1050c:	09 f7       	brne	.-62     	; 0x104d0 <ls+0x158>
#ifdef ESP8266
            optimistic_yield(1000);
            wdt_reset();
#endif
        }
        closedir(dirp);
   1050e:	c5 01       	movw	r24, r10
   10510:	0e 94 ec 78 	call	0xf1d8	; 0xf1d8 <closedir>
        break;
   10514:	1f c0       	rjmp	.+62     	; 0x10554 <ls+0x1dc>
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
                continue;
            }
            if(!MATCH(fullpath,"/") )
   10516:	66 ec       	ldi	r22, 0xC6	; 198
   10518:	77 e0       	ldi	r23, 0x07	; 7
   1051a:	c8 01       	movw	r24, r16
   1051c:	0e 94 59 33 	call	0x66b2	; 0x66b2 <MATCH>
   10520:	89 2b       	or	r24, r25
   10522:	29 f4       	brne	.+10     	; 0x1052e <ls+0x1b6>
            {
                strcat(fullpath,"/");
   10524:	66 ec       	ldi	r22, 0xC6	; 198
   10526:	77 e0       	ldi	r23, 0x07	; 7
   10528:	c8 01       	movw	r24, r16
   1052a:	0e 94 82 32 	call	0x6504	; 0x6504 <strcat>
            }
            strcat(fullpath,de->d_name);
   1052e:	b6 01       	movw	r22, r12
   10530:	c8 01       	movw	r24, r16
   10532:	0e 94 82 32 	call	0x6504	; 0x6504 <strcat>
            files +=ls_info(fullpath,verbose);
   10536:	b4 01       	movw	r22, r8
   10538:	c8 01       	movw	r24, r16
   1053a:	63 de       	rcall	.-826    	; 0x10202 <ls_info>
   1053c:	e8 0e       	add	r14, r24
   1053e:	f9 1e       	adc	r15, r25
            // restore path
            fullpath[len] = 0;
   10540:	ca 5c       	subi	r28, 0xCA	; 202
   10542:	de 4f       	sbci	r29, 0xFE	; 254
   10544:	e8 81       	ld	r30, Y
   10546:	f9 81       	ldd	r31, Y+1	; 0x01
   10548:	c6 53       	subi	r28, 0x36	; 54
   1054a:	d1 40       	sbci	r29, 0x01	; 1
   1054c:	10 82       	st	Z, r1
   1054e:	d9 cf       	rjmp	.-78     	; 0x10502 <ls+0x18a>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   10550:	e1 2c       	mov	r14, r1
   10552:	f1 2c       	mov	r15, r1
#endif
        }
        closedir(dirp);
        break;
    }
    printf("Files: %d\n", (int)files);
   10554:	ed b7       	in	r30, 0x3d	; 61
   10556:	fe b7       	in	r31, 0x3e	; 62
   10558:	f5 82       	std	Z+5, r15	; 0x05
   1055a:	e4 82       	std	Z+4, r14	; 0x04
   1055c:	80 e7       	ldi	r24, 0x70	; 112
   1055e:	9b e0       	ldi	r25, 0x0B	; 11
   10560:	a0 e0       	ldi	r26, 0x00	; 0
   10562:	81 83       	std	Z+1, r24	; 0x01
   10564:	92 83       	std	Z+2, r25	; 0x02
   10566:	a3 83       	std	Z+3, r26	; 0x03
   10568:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    return(files);
}
   1056c:	c7 01       	movw	r24, r14
   1056e:	c9 5c       	subi	r28, 0xC9	; 201
   10570:	de 4f       	sbci	r29, 0xFE	; 254
   10572:	0f b6       	in	r0, 0x3f	; 63
   10574:	f8 94       	cli
   10576:	de bf       	out	0x3e, r29	; 62
   10578:	0f be       	out	0x3f, r0	; 63
   1057a:	cd bf       	out	0x3d, r28	; 61
   1057c:	df 91       	pop	r29
   1057e:	cf 91       	pop	r28
   10580:	1f 91       	pop	r17
   10582:	0f 91       	pop	r16
   10584:	ff 90       	pop	r15
   10586:	ef 90       	pop	r14
   10588:	df 90       	pop	r13
   1058a:	cf 90       	pop	r12
   1058c:	bf 90       	pop	r11
   1058e:	af 90       	pop	r10
   10590:	9f 90       	pop	r9
   10592:	8f 90       	pop	r8
   10594:	6f 90       	pop	r6
   10596:	5f 90       	pop	r5
   10598:	4f 90       	pop	r4
   1059a:	3f 90       	pop	r3
   1059c:	2f 90       	pop	r2
   1059e:	08 95       	ret

000105a0 <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   105a0:	a7 e0       	ldi	r26, 0x07	; 7
   105a2:	b1 e0       	ldi	r27, 0x01	; 1
   105a4:	e6 ed       	ldi	r30, 0xD6	; 214
   105a6:	f2 e8       	ldi	r31, 0x82	; 130
   105a8:	0c 94 88 e4 	jmp	0x1c910	; 0x1c910 <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   105ac:	fb 01       	movw	r30, r22
   105ae:	c0 80       	ld	r12, Z
   105b0:	d1 80       	ldd	r13, Z+1	; 0x01

    if(!ptr)
   105b2:	c1 14       	cp	r12, r1
   105b4:	d1 04       	cpc	r13, r1
   105b6:	09 f4       	brne	.+2      	; 0x105ba <posix_tests+0x1a>
   105b8:	9a c1       	rjmp	.+820    	; 0x108ee <posix_tests+0x34e>
   105ba:	2b 01       	movw	r4, r22
   105bc:	8c 01       	movw	r16, r24
        return(0);

    if( MATCH(ptr,"posix") )
   105be:	6e ed       	ldi	r22, 0xDE	; 222
   105c0:	7a e0       	ldi	r23, 0x0A	; 10
   105c2:	c6 01       	movw	r24, r12
   105c4:	0e 94 59 33 	call	0x66b2	; 0x66b2 <MATCH>
   105c8:	89 2b       	or	r24, r25
   105ca:	a9 f0       	breq	.+42     	; 0x105f6 <posix_tests+0x56>
    {
        ptr = argv[ind++];
   105cc:	f2 01       	movw	r30, r4
   105ce:	c2 80       	ldd	r12, Z+2	; 0x02
   105d0:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   105d2:	c1 14       	cp	r12, r1
   105d4:	d1 04       	cpc	r13, r1
   105d6:	21 f4       	brne	.+8      	; 0x105e0 <posix_tests+0x40>
        {
            posix_help(1);
   105d8:	81 e0       	ldi	r24, 0x01	; 1
   105da:	90 e0       	ldi	r25, 0x00	; 0
   105dc:	6f dc       	rcall	.-1826   	; 0xfebc <posix_help>
   105de:	28 c1       	rjmp	.+592    	; 0x10830 <posix_tests+0x290>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   105e0:	6e eb       	ldi	r22, 0xBE	; 190
   105e2:	75 e1       	ldi	r23, 0x15	; 21
   105e4:	c6 01       	movw	r24, r12
   105e6:	0e 94 59 33 	call	0x66b2	; 0x66b2 <MATCH>
   105ea:	89 2b       	or	r24, r25
   105ec:	a9 f7       	brne	.-22     	; 0x105d8 <posix_tests+0x38>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   105ee:	22 e0       	ldi	r18, 0x02	; 2
   105f0:	62 2e       	mov	r6, r18
   105f2:	71 2c       	mov	r7, r1
   105f4:	03 c0       	rjmp	.+6      	; 0x105fc <posix_tests+0x5c>
{
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   105f6:	66 24       	eor	r6, r6
   105f8:	63 94       	inc	r6
   105fa:	71 2c       	mov	r7, r1
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   105fc:	73 01       	movw	r14, r6
   105fe:	ff ef       	ldi	r31, 0xFF	; 255
   10600:	ef 1a       	sub	r14, r31
   10602:	ff 0a       	sbc	r15, r31
   10604:	98 01       	movw	r18, r16
   10606:	a7 01       	movw	r20, r14
   10608:	64 ee       	ldi	r22, 0xE4	; 228
   1060a:	7a e0       	ldi	r23, 0x0A	; 10
   1060c:	c6 01       	movw	r24, r12
   1060e:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   10612:	89 2b       	or	r24, r25
   10614:	a1 f1       	breq	.+104    	; 0x1067e <posix_tests+0xde>
   10616:	73 01       	movw	r14, r6
   10618:	ee 0c       	add	r14, r14
   1061a:	ff 1c       	adc	r15, r15
   1061c:	e4 0c       	add	r14, r4
   1061e:	f5 1c       	adc	r15, r5
   10620:	57 01       	movw	r10, r14
   10622:	47 01       	movw	r8, r14
   10624:	63 01       	movw	r12, r6
   10626:	41 2c       	mov	r4, r1
   10628:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1062a:	c0 16       	cp	r12, r16
   1062c:	d1 06       	cpc	r13, r17
   1062e:	1c f5       	brge	.+70     	; 0x10676 <posix_tests+0xd6>
        {
            if(MATCH(argv[i],"-p"))
   10630:	68 ee       	ldi	r22, 0xE8	; 232
   10632:	7a e0       	ldi	r23, 0x0A	; 10
   10634:	f4 01       	movw	r30, r8
   10636:	81 91       	ld	r24, Z+
   10638:	91 91       	ld	r25, Z+
   1063a:	4f 01       	movw	r8, r30
   1063c:	0e 94 59 33 	call	0x66b2	; 0x66b2 <MATCH>
   10640:	89 2b       	or	r24, r25
   10642:	19 f0       	breq	.+6      	; 0x1064a <posix_tests+0xaa>
                page = 1;
   10644:	44 24       	eor	r4, r4
   10646:	43 94       	inc	r4
   10648:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1064a:	ff ef       	ldi	r31, 0xFF	; 255
   1064c:	cf 1a       	sub	r12, r31
   1064e:	df 0a       	sbc	r13, r31
   10650:	ec cf       	rjmp	.-40     	; 0x1062a <posix_tests+0x8a>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   10652:	68 ee       	ldi	r22, 0xE8	; 232
   10654:	7a e0       	ldi	r23, 0x0A	; 10
   10656:	f5 01       	movw	r30, r10
   10658:	81 91       	ld	r24, Z+
   1065a:	91 91       	ld	r25, Z+
   1065c:	5f 01       	movw	r10, r30
   1065e:	0e 94 59 33 	call	0x66b2	; 0x66b2 <MATCH>
   10662:	89 2b       	or	r24, r25
   10664:	29 f4       	brne	.+10     	; 0x10670 <posix_tests+0xd0>
				cat(argv[ind], page);
   10666:	b2 01       	movw	r22, r4
   10668:	f7 01       	movw	r30, r14
   1066a:	80 81       	ld	r24, Z
   1066c:	91 81       	ldd	r25, Z+1	; 0x01
   1066e:	5d dd       	rcall	.-1350   	; 0x1012a <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   10670:	ff ef       	ldi	r31, 0xFF	; 255
   10672:	6f 1a       	sub	r6, r31
   10674:	7f 0a       	sbc	r7, r31
   10676:	60 16       	cp	r6, r16
   10678:	71 06       	cpc	r7, r17
   1067a:	5c f3       	brlt	.-42     	; 0x10652 <posix_tests+0xb2>
   1067c:	d9 c0       	rjmp	.+434    	; 0x10830 <posix_tests+0x290>
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   1067e:	53 01       	movw	r10, r6
   10680:	82 e0       	ldi	r24, 0x02	; 2
   10682:	a8 0e       	add	r10, r24
   10684:	b1 1c       	adc	r11, r1
   10686:	98 01       	movw	r18, r16
   10688:	a5 01       	movw	r20, r10
   1068a:	6b ee       	ldi	r22, 0xEB	; 235
   1068c:	7a e0       	ldi	r23, 0x0A	; 10
   1068e:	c6 01       	movw	r24, r12
   10690:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   10694:	89 2b       	or	r24, r25
   10696:	59 f0       	breq	.+22     	; 0x106ae <posix_tests+0x10e>
    {
        copy(argv[ind],argv[ind+1]);
   10698:	f3 01       	movw	r30, r6
   1069a:	ee 0f       	add	r30, r30
   1069c:	ff 1f       	adc	r31, r31
   1069e:	e4 0d       	add	r30, r4
   106a0:	f5 1d       	adc	r31, r5
   106a2:	62 81       	ldd	r22, Z+2	; 0x02
   106a4:	73 81       	ldd	r23, Z+3	; 0x03
   106a6:	80 81       	ld	r24, Z
   106a8:	91 81       	ldd	r25, Z+1	; 0x01
   106aa:	29 dc       	rcall	.-1966   	; 0xfefe <copy>
   106ac:	c1 c0       	rjmp	.+386    	; 0x10830 <posix_tests+0x290>
        return(1);
    }

    if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   106ae:	98 01       	movw	r18, r16
   106b0:	a7 01       	movw	r20, r14
   106b2:	60 ef       	ldi	r22, 0xF0	; 240
   106b4:	7a e0       	ldi	r23, 0x0A	; 10
   106b6:	c6 01       	movw	r24, r12
   106b8:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   106bc:	89 2b       	or	r24, r25
   106be:	b9 f0       	breq	.+46     	; 0x106ee <posix_tests+0x14e>
    {
        if ( chdir(argv[ind]) != 0)
   106c0:	73 01       	movw	r14, r6
   106c2:	ee 0c       	add	r14, r14
   106c4:	ff 1c       	adc	r15, r15
   106c6:	e4 0c       	add	r14, r4
   106c8:	f5 1c       	adc	r15, r5
   106ca:	f7 01       	movw	r30, r14
   106cc:	80 81       	ld	r24, Z
   106ce:	91 81       	ldd	r25, Z+1	; 0x01
   106d0:	0e 94 11 78 	call	0xf022	; 0xf022 <chdir>
   106d4:	89 2b       	or	r24, r25
   106d6:	09 f4       	brne	.+2      	; 0x106da <posix_tests+0x13a>
   106d8:	ab c0       	rjmp	.+342    	; 0x10830 <posix_tests+0x290>
			printf("chdir %s failed\n", argv[ind]);
   106da:	f7 01       	movw	r30, r14
   106dc:	80 81       	ld	r24, Z
   106de:	91 81       	ldd	r25, Z+1	; 0x01
   106e0:	ed b7       	in	r30, 0x3d	; 61
   106e2:	fe b7       	in	r31, 0x3e	; 62
   106e4:	95 83       	std	Z+5, r25	; 0x05
   106e6:	84 83       	std	Z+4, r24	; 0x04
   106e8:	83 e0       	ldi	r24, 0x03	; 3
   106ea:	9d e0       	ldi	r25, 0x0D	; 13
   106ec:	9b c0       	rjmp	.+310    	; 0x10824 <posix_tests+0x284>
        logfile(argv[ind],argv[ind+1]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
   106ee:	98 01       	movw	r18, r16
   106f0:	a3 01       	movw	r20, r6
   106f2:	68 ef       	ldi	r22, 0xF8	; 248
   106f4:	77 e0       	ldi	r23, 0x07	; 7
   106f6:	c6 01       	movw	r24, r12
   106f8:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   106fc:	4c 01       	movw	r8, r24
   106fe:	89 2b       	or	r24, r25
   10700:	69 f1       	breq	.+90     	; 0x1075c <posix_tests+0x1bc>
   10702:	73 01       	movw	r14, r6
   10704:	ee 0c       	add	r14, r14
   10706:	ff 1c       	adc	r15, r15
   10708:	e4 0c       	add	r14, r4
   1070a:	f5 1c       	adc	r15, r5
   1070c:	c1 2c       	mov	r12, r1
   1070e:	d1 2c       	mov	r13, r1
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   10710:	c6 01       	movw	r24, r12
   10712:	86 0d       	add	r24, r6
   10714:	97 1d       	adc	r25, r7
   10716:	80 17       	cp	r24, r16
   10718:	91 07       	cpc	r25, r17
   1071a:	b4 f4       	brge	.+44     	; 0x10748 <posix_tests+0x1a8>
        {
            if(!MATCH(argv[i],"-l"))
   1071c:	63 ef       	ldi	r22, 0xF3	; 243
   1071e:	7a e0       	ldi	r23, 0x0A	; 10
   10720:	f7 01       	movw	r30, r14
   10722:	80 81       	ld	r24, Z
   10724:	91 81       	ldd	r25, Z+1	; 0x01
   10726:	0e 94 59 33 	call	0x66b2	; 0x66b2 <MATCH>
   1072a:	89 2b       	or	r24, r25
   1072c:	31 f4       	brne	.+12     	; 0x1073a <posix_tests+0x19a>
                ls(argv[i],1);
   1072e:	61 e0       	ldi	r22, 0x01	; 1
   10730:	70 e0       	ldi	r23, 0x00	; 0
   10732:	f7 01       	movw	r30, r14
   10734:	80 81       	ld	r24, Z
   10736:	91 81       	ldd	r25, Z+1	; 0x01
   10738:	1f de       	rcall	.-962    	; 0x10378 <ls>
            ++args;
   1073a:	ff ef       	ldi	r31, 0xFF	; 255
   1073c:	cf 1a       	sub	r12, r31
   1073e:	df 0a       	sbc	r13, r31
   10740:	82 e0       	ldi	r24, 0x02	; 2
   10742:	e8 0e       	add	r14, r24
   10744:	f1 1c       	adc	r15, r1
   10746:	e4 cf       	rjmp	.-56     	; 0x10710 <posix_tests+0x170>
        }
        if(!args)
   10748:	c1 14       	cp	r12, r1
   1074a:	d1 04       	cpc	r13, r1
   1074c:	09 f0       	breq	.+2      	; 0x10750 <posix_tests+0x1b0>
        {
            ls("",1);
   1074e:	70 c0       	rjmp	.+224    	; 0x10830 <posix_tests+0x290>
   10750:	61 e0       	ldi	r22, 0x01	; 1
   10752:	70 e0       	ldi	r23, 0x00	; 0
   10754:	8e ed       	ldi	r24, 0xDE	; 222
   10756:	96 e1       	ldi	r25, 0x16	; 22
   10758:	0f de       	rcall	.-994    	; 0x10378 <ls>
        mkfs(argv[ind++]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   1075a:	6a c0       	rjmp	.+212    	; 0x10830 <posix_tests+0x290>
   1075c:	98 01       	movw	r18, r16
   1075e:	a7 01       	movw	r20, r14
   10760:	66 ef       	ldi	r22, 0xF6	; 246
   10762:	7a e0       	ldi	r23, 0x0A	; 10
   10764:	c6 01       	movw	r24, r12
   10766:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   1076a:	89 2b       	or	r24, r25
    {
        int mode = 0777;
        if((ind+2) <= argc)
   1076c:	71 f1       	breq	.+92     	; 0x107ca <posix_tests+0x22a>
   1076e:	e0 16       	cp	r14, r16
   10770:	f1 06       	cpc	r15, r17
        {
            mode = strtol(argv[ind+1],NULL,8);
   10772:	7c f4       	brge	.+30     	; 0x10792 <posix_tests+0x1f2>
   10774:	ee 0c       	add	r14, r14
   10776:	ff 1c       	adc	r15, r15
   10778:	f2 01       	movw	r30, r4
   1077a:	ee 0d       	add	r30, r14
   1077c:	ff 1d       	adc	r31, r15
   1077e:	48 e0       	ldi	r20, 0x08	; 8
   10780:	50 e0       	ldi	r21, 0x00	; 0
   10782:	60 e0       	ldi	r22, 0x00	; 0
   10784:	70 e0       	ldi	r23, 0x00	; 0
   10786:	80 81       	ld	r24, Z
   10788:	91 81       	ldd	r25, Z+1	; 0x01
   1078a:	0e 94 9f 47 	call	0x8f3e	; 0x8f3e <strtol>
   1078e:	ab 01       	movw	r20, r22
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   10790:	02 c0       	rjmp	.+4      	; 0x10796 <posix_tests+0x1f6>
   10792:	4f ef       	ldi	r20, 0xFF	; 255
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        if ( mkdir(argv[ind],mode) != 0 )
   10794:	51 e0       	ldi	r21, 0x01	; 1
   10796:	73 01       	movw	r14, r6
   10798:	ee 0c       	add	r14, r14
   1079a:	ff 1c       	adc	r15, r15
   1079c:	e4 0c       	add	r14, r4
   1079e:	f5 1c       	adc	r15, r5
   107a0:	05 2e       	mov	r0, r21
   107a2:	00 0c       	add	r0, r0
   107a4:	66 0b       	sbc	r22, r22
   107a6:	77 0b       	sbc	r23, r23
   107a8:	f7 01       	movw	r30, r14
   107aa:	80 81       	ld	r24, Z
   107ac:	91 81       	ldd	r25, Z+1	; 0x01
   107ae:	0e 94 7e 78 	call	0xf0fc	; 0xf0fc <mkdir>
   107b2:	89 2b       	or	r24, r25
		{
			printf("mkdir %s failed\n", argv[ind]);
   107b4:	e9 f1       	breq	.+122    	; 0x10830 <posix_tests+0x290>
   107b6:	f7 01       	movw	r30, r14
   107b8:	80 81       	ld	r24, Z
   107ba:	91 81       	ldd	r25, Z+1	; 0x01
   107bc:	ed b7       	in	r30, 0x3d	; 61
   107be:	fe b7       	in	r31, 0x3e	; 62
   107c0:	95 83       	std	Z+5, r25	; 0x05
   107c2:	84 83       	std	Z+4, r24	; 0x04
   107c4:	82 ef       	ldi	r24, 0xF2	; 242
   107c6:	9c e0       	ldi	r25, 0x0C	; 12
			return(0);
		}
        return(1);
    }

    if (MATCHARGS(ptr,"page", (ind + 1), argc))
   107c8:	b4 c0       	rjmp	.+360    	; 0x10932 <posix_tests+0x392>
   107ca:	98 01       	movw	r18, r16
   107cc:	a7 01       	movw	r20, r14
   107ce:	6c ef       	ldi	r22, 0xFC	; 252
   107d0:	7a e0       	ldi	r23, 0x0A	; 10
   107d2:	c6 01       	movw	r24, r12
   107d4:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   107d8:	89 2b       	or	r24, r25
    {
        setpage(atoi(argv[ind]));
   107da:	71 f0       	breq	.+28     	; 0x107f8 <posix_tests+0x258>
   107dc:	66 0c       	add	r6, r6
   107de:	77 1c       	adc	r7, r7
   107e0:	f2 01       	movw	r30, r4
   107e2:	e6 0d       	add	r30, r6
   107e4:	f7 1d       	adc	r31, r7
   107e6:	80 81       	ld	r24, Z
   107e8:	91 81       	ldd	r25, Z+1	; 0x01
   107ea:	0e 94 fd 47 	call	0x8ffa	; 0x8ffa <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   107ee:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <_pagesize+0x1>
   107f2:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <_pagesize>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   107f6:	1c c0       	rjmp	.+56     	; 0x10830 <posix_tests+0x290>
   107f8:	98 01       	movw	r18, r16
   107fa:	a3 01       	movw	r20, r6
   107fc:	61 e0       	ldi	r22, 0x01	; 1
   107fe:	7b e0       	ldi	r23, 0x0B	; 11
   10800:	c6 01       	movw	r24, r12
   10802:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   10806:	4c 01       	movw	r8, r24
   10808:	89 2b       	or	r24, r25
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   1080a:	b1 f0       	breq	.+44     	; 0x10838 <posix_tests+0x298>
   1080c:	6e ef       	ldi	r22, 0xFE	; 254
   1080e:	70 e0       	ldi	r23, 0x00	; 0
   10810:	ce 01       	movw	r24, r28
   10812:	08 96       	adiw	r24, 0x08	; 8
   10814:	0e 94 59 78 	call	0xf0b2	; 0xf0b2 <getcwd>
   10818:	ed b7       	in	r30, 0x3d	; 61
   1081a:	fe b7       	in	r31, 0x3e	; 62
   1081c:	95 83       	std	Z+5, r25	; 0x05
   1081e:	84 83       	std	Z+4, r24	; 0x04
   10820:	8e ee       	ldi	r24, 0xEE	; 238
   10822:	9c e0       	ldi	r25, 0x0C	; 12
   10824:	a0 e0       	ldi	r26, 0x00	; 0
   10826:	81 83       	std	Z+1, r24	; 0x01
   10828:	92 83       	std	Z+2, r25	; 0x02
   1082a:	a3 83       	std	Z+3, r26	; 0x03
   1082c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        return(1);
   10830:	88 24       	eor	r8, r8
   10832:	83 94       	inc	r8
   10834:	91 2c       	mov	r9, r1
    }

    if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   10836:	83 c0       	rjmp	.+262    	; 0x1093e <posix_tests+0x39e>
   10838:	98 01       	movw	r18, r16
   1083a:	a5 01       	movw	r20, r10
   1083c:	65 e0       	ldi	r22, 0x05	; 5
   1083e:	7b e0       	ldi	r23, 0x0B	; 11
   10840:	c6 01       	movw	r24, r12
   10842:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   10846:	89 2b       	or	r24, r25
    {
        if( rename(argv[ind],argv[ind+1]) != 0)
   10848:	61 f1       	breq	.+88     	; 0x108a2 <posix_tests+0x302>
   1084a:	66 0c       	add	r6, r6
   1084c:	77 1c       	adc	r7, r7
   1084e:	82 01       	movw	r16, r4
   10850:	06 0d       	add	r16, r6
   10852:	17 1d       	adc	r17, r7
   10854:	f2 e0       	ldi	r31, 0x02	; 2
   10856:	6f 0e       	add	r6, r31
   10858:	71 1c       	adc	r7, r1
   1085a:	72 01       	movw	r14, r4
   1085c:	e6 0c       	add	r14, r6
   1085e:	f7 1c       	adc	r15, r7
   10860:	f7 01       	movw	r30, r14
   10862:	60 81       	ld	r22, Z
   10864:	71 81       	ldd	r23, Z+1	; 0x01
   10866:	f8 01       	movw	r30, r16
   10868:	80 81       	ld	r24, Z
   1086a:	91 81       	ldd	r25, Z+1	; 0x01
   1086c:	0e 94 ac 78 	call	0xf158	; 0xf158 <rename>
   10870:	89 2b       	or	r24, r25
		{
			printf("rename %s to %s\n", argv[ind], argv[ind+1]);
   10872:	f1 f2       	breq	.-68     	; 0x10830 <posix_tests+0x290>
   10874:	f7 01       	movw	r30, r14
   10876:	80 81       	ld	r24, Z
   10878:	91 81       	ldd	r25, Z+1	; 0x01
   1087a:	ed b7       	in	r30, 0x3d	; 61
   1087c:	fe b7       	in	r31, 0x3e	; 62
   1087e:	97 83       	std	Z+7, r25	; 0x07
   10880:	86 83       	std	Z+6, r24	; 0x06
   10882:	f8 01       	movw	r30, r16
   10884:	80 81       	ld	r24, Z
   10886:	91 81       	ldd	r25, Z+1	; 0x01
   10888:	ed b7       	in	r30, 0x3d	; 61
   1088a:	fe b7       	in	r31, 0x3e	; 62
   1088c:	95 83       	std	Z+5, r25	; 0x05
   1088e:	84 83       	std	Z+4, r24	; 0x04
   10890:	8d ed       	ldi	r24, 0xDD	; 221
   10892:	9c e0       	ldi	r25, 0x0C	; 12
   10894:	a0 e0       	ldi	r26, 0x00	; 0
   10896:	81 83       	std	Z+1, r24	; 0x01
   10898:	92 83       	std	Z+2, r25	; 0x02
   1089a:	a3 83       	std	Z+3, r26	; 0x03
   1089c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
			return(0);
		}
        return(1);
    }

    if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   108a0:	4e c0       	rjmp	.+156    	; 0x1093e <posix_tests+0x39e>
   108a2:	98 01       	movw	r18, r16
   108a4:	a7 01       	movw	r20, r14
   108a6:	6c e0       	ldi	r22, 0x0C	; 12
   108a8:	7b e0       	ldi	r23, 0x0B	; 11
   108aa:	c6 01       	movw	r24, r12
   108ac:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   108b0:	4c 01       	movw	r8, r24
   108b2:	89 2b       	or	r24, r25
    {
        if ( unlink(argv[ind]) != 0)
   108b4:	f9 f0       	breq	.+62     	; 0x108f4 <posix_tests+0x354>
   108b6:	73 01       	movw	r14, r6
   108b8:	ee 0c       	add	r14, r14
   108ba:	ff 1c       	adc	r15, r15
   108bc:	e4 0c       	add	r14, r4
   108be:	f5 1c       	adc	r15, r5
   108c0:	f7 01       	movw	r30, r14
   108c2:	80 81       	ld	r24, Z
   108c4:	91 81       	ldd	r25, Z+1	; 0x01
   108c6:	0e 94 cb 78 	call	0xf196	; 0xf196 <unlink>
   108ca:	89 2b       	or	r24, r25
   108cc:	09 f4       	brne	.+2      	; 0x108d0 <posix_tests+0x330>
		{
			printf("rm %s failed\n", argv[ind]);
   108ce:	b0 cf       	rjmp	.-160    	; 0x10830 <posix_tests+0x290>
   108d0:	f7 01       	movw	r30, r14
   108d2:	80 81       	ld	r24, Z
   108d4:	91 81       	ldd	r25, Z+1	; 0x01
   108d6:	ed b7       	in	r30, 0x3d	; 61
   108d8:	fe b7       	in	r31, 0x3e	; 62
   108da:	95 83       	std	Z+5, r25	; 0x05
   108dc:	84 83       	std	Z+4, r24	; 0x04
   108de:	8f ec       	ldi	r24, 0xCF	; 207
   108e0:	9c e0       	ldi	r25, 0x0C	; 12
   108e2:	a0 e0       	ldi	r26, 0x00	; 0
   108e4:	81 83       	std	Z+1, r24	; 0x01
   108e6:	92 83       	std	Z+2, r25	; 0x02
   108e8:	a3 83       	std	Z+3, r26	; 0x03
   108ea:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
			return(0);
   108ee:	81 2c       	mov	r8, r1
   108f0:	91 2c       	mov	r9, r1
        dump_stat(&p);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   108f2:	25 c0       	rjmp	.+74     	; 0x1093e <posix_tests+0x39e>
   108f4:	98 01       	movw	r18, r16
   108f6:	a7 01       	movw	r20, r14
   108f8:	6f e0       	ldi	r22, 0x0F	; 15
   108fa:	7b e0       	ldi	r23, 0x0B	; 11
   108fc:	c6 01       	movw	r24, r12
   108fe:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   10902:	89 2b       	or	r24, r25
    {
        if ( rmdir(argv[ind]) != 0)
   10904:	a1 f3       	breq	.-24     	; 0x108ee <posix_tests+0x34e>
   10906:	73 01       	movw	r14, r6
   10908:	ee 0c       	add	r14, r14
   1090a:	ff 1c       	adc	r15, r15
   1090c:	e4 0c       	add	r14, r4
   1090e:	f5 1c       	adc	r15, r5
   10910:	f7 01       	movw	r30, r14
   10912:	80 81       	ld	r24, Z
   10914:	91 81       	ldd	r25, Z+1	; 0x01
   10916:	0e 94 ea 78 	call	0xf1d4	; 0xf1d4 <rmdir>
   1091a:	89 2b       	or	r24, r25
   1091c:	09 f4       	brne	.+2      	; 0x10920 <posix_tests+0x380>
		{
			printf("rmdir %s failed\n", argv[ind]);
   1091e:	88 cf       	rjmp	.-240    	; 0x10830 <posix_tests+0x290>
   10920:	f7 01       	movw	r30, r14
   10922:	80 81       	ld	r24, Z
   10924:	91 81       	ldd	r25, Z+1	; 0x01
   10926:	ed b7       	in	r30, 0x3d	; 61
   10928:	fe b7       	in	r31, 0x3e	; 62
   1092a:	95 83       	std	Z+5, r25	; 0x05
   1092c:	84 83       	std	Z+4, r24	; 0x04
   1092e:	8e eb       	ldi	r24, 0xBE	; 190
   10930:	9c e0       	ldi	r25, 0x0C	; 12
   10932:	a0 e0       	ldi	r26, 0x00	; 0
   10934:	81 83       	std	Z+1, r24	; 0x01
   10936:	92 83       	std	Z+2, r25	; 0x02
   10938:	a3 83       	std	Z+3, r26	; 0x03
   1093a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        return(1);
    }
#endif

    return(0);
}
   1093e:	c4 01       	movw	r24, r8
   10940:	c9 5f       	subi	r28, 0xF9	; 249
   10942:	de 4f       	sbci	r29, 0xFE	; 254
   10944:	e0 e1       	ldi	r30, 0x10	; 16
   10946:	0c 94 a4 e4 	jmp	0x1c948	; 0x1c948 <__epilogue_restores__+0x4>

0001094a <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   1094a:	00 d0       	rcall	.+0      	; 0x1094c <gpib_timer_init+0x2>
   1094c:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   1094e:	61 e0       	ldi	r22, 0x01	; 1
   10950:	70 e0       	ldi	r23, 0x00	; 0
   10952:	81 e6       	ldi	r24, 0x61	; 97
   10954:	96 e8       	ldi	r25, 0x86	; 134
   10956:	0e 94 ce 35 	call	0x6b9c	; 0x6b9c <set_timers>
   1095a:	01 96       	adiw	r24, 0x01	; 1
   1095c:	51 f4       	brne	.+20     	; 0x10972 <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   1095e:	8a e3       	ldi	r24, 0x3A	; 58
   10960:	9e e0       	ldi	r25, 0x0E	; 14
   10962:	a0 e0       	ldi	r26, 0x00	; 0
   10964:	ed b7       	in	r30, 0x3d	; 61
   10966:	fe b7       	in	r31, 0x3e	; 62
   10968:	81 83       	std	Z+1, r24	; 0x01
   1096a:	92 83       	std	Z+2, r25	; 0x02
   1096c:	a3 83       	std	Z+3, r26	; 0x03
   1096e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

    gpib_timer_reset();
}
   10972:	95 d1       	rcall	.+810    	; 0x10c9e <gpib_timer_reset>
   10974:	0f 90       	pop	r0
   10976:	0f 90       	pop	r0
   10978:	0f 90       	pop	r0
   1097a:	08 95       	ret

0001097c <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   1097c:	28 2f       	mov	r18, r24
   1097e:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   10980:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   10982:	88 0f       	add	r24, r24
        if(mask & 1)
   10984:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   10986:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   10988:	26 95       	lsr	r18
   1098a:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   1098c:	d1 f7       	brne	.-12     	; 0x10982 <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   1098e:	08 95       	ret

00010990 <ppr_set>:
   10990:	f5 df       	rcall	.-22     	; 0x1097c <reverse_8bits>
   10992:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <_ppr_reg>
   10996:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <SPI0_TXRX_Byte>
   1099a:	2a 9a       	sbi	0x05, 2	; 5
   1099c:	22 9a       	sbi	0x04, 2	; 4
   1099e:	2a 98       	cbi	0x05, 2	; 5
   109a0:	22 9a       	sbi	0x04, 2	; 4
   109a2:	08 95       	ret

000109a4 <ppr_reg>:
   109a4:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <_ppr_reg>
   109a8:	e9 cf       	rjmp	.-46     	; 0x1097c <reverse_8bits>
   109aa:	08 95       	ret

000109ac <ppr_init>:
   109ac:	00 d0       	rcall	.+0      	; 0x109ae <ppr_init+0x2>
   109ae:	1f 92       	push	r1
   109b0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   109b4:	81 ff       	sbrs	r24, 1
   109b6:	0a c0       	rjmp	.+20     	; 0x109cc <ppr_init+0x20>
   109b8:	87 e2       	ldi	r24, 0x27	; 39
   109ba:	9e e0       	ldi	r25, 0x0E	; 14
   109bc:	a0 e0       	ldi	r26, 0x00	; 0
   109be:	ed b7       	in	r30, 0x3d	; 61
   109c0:	fe b7       	in	r31, 0x3e	; 62
   109c2:	81 83       	std	Z+1, r24	; 0x01
   109c4:	92 83       	std	Z+2, r25	; 0x02
   109c6:	a3 83       	std	Z+3, r26	; 0x03
   109c8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   109cc:	80 e0       	ldi	r24, 0x00	; 0
   109ce:	e0 df       	rcall	.-64     	; 0x10990 <ppr_set>
   109d0:	0f 90       	pop	r0
   109d2:	0f 90       	pop	r0
   109d4:	0f 90       	pop	r0
   109d6:	08 95       	ret

000109d8 <ppr_bit_set>:
   109d8:	21 e0       	ldi	r18, 0x01	; 1
   109da:	30 e0       	ldi	r19, 0x00	; 0
   109dc:	01 c0       	rjmp	.+2      	; 0x109e0 <ppr_bit_set+0x8>
   109de:	22 0f       	add	r18, r18
   109e0:	8a 95       	dec	r24
   109e2:	ea f7       	brpl	.-6      	; 0x109de <ppr_bit_set+0x6>
   109e4:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <_ppr_reg>
   109e8:	82 2b       	or	r24, r18
   109ea:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <_ppr_reg>
   109ee:	d0 cf       	rjmp	.-96     	; 0x10990 <ppr_set>
   109f0:	08 95       	ret

000109f2 <ppr_bit_clr>:
   109f2:	21 e0       	ldi	r18, 0x01	; 1
   109f4:	30 e0       	ldi	r19, 0x00	; 0
   109f6:	01 c0       	rjmp	.+2      	; 0x109fa <ppr_bit_clr+0x8>
   109f8:	22 0f       	add	r18, r18
   109fa:	8a 95       	dec	r24
   109fc:	ea f7       	brpl	.-6      	; 0x109f8 <ppr_bit_clr+0x6>
   109fe:	20 95       	com	r18
   10a00:	80 91 fb 18 	lds	r24, 0x18FB	; 0x8018fb <_ppr_reg>
   10a04:	82 23       	and	r24, r18
   10a06:	80 93 fb 18 	sts	0x18FB, r24	; 0x8018fb <_ppr_reg>
   10a0a:	c2 cf       	rjmp	.-124    	; 0x10990 <ppr_set>
   10a0c:	08 95       	ret

00010a0e <dbf_open>:
   10a0e:	0f 93       	push	r16
   10a10:	1f 93       	push	r17
   10a12:	cf 93       	push	r28
   10a14:	df 93       	push	r29
   10a16:	00 d0       	rcall	.+0      	; 0x10a18 <dbf_open+0xa>
   10a18:	00 d0       	rcall	.+0      	; 0x10a1a <dbf_open+0xc>
   10a1a:	1f 92       	push	r1
   10a1c:	8b 01       	movw	r16, r22
   10a1e:	0e 94 1c 5b 	call	0xb638	; 0xb638 <f_open>
   10a22:	ec 01       	movw	r28, r24
   10a24:	89 2b       	or	r24, r25
   10a26:	79 f0       	breq	.+30     	; 0x10a46 <dbf_open+0x38>
   10a28:	ed b7       	in	r30, 0x3d	; 61
   10a2a:	fe b7       	in	r31, 0x3e	; 62
   10a2c:	15 83       	std	Z+5, r17	; 0x05
   10a2e:	04 83       	std	Z+4, r16	; 0x04
   10a30:	86 e1       	ldi	r24, 0x16	; 22
   10a32:	9e e0       	ldi	r25, 0x0E	; 14
   10a34:	a0 e0       	ldi	r26, 0x00	; 0
   10a36:	81 83       	std	Z+1, r24	; 0x01
   10a38:	92 83       	std	Z+2, r25	; 0x02
   10a3a:	a3 83       	std	Z+3, r26	; 0x03
   10a3c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   10a40:	ce 01       	movw	r24, r28
   10a42:	0e 94 80 71 	call	0xe300	; 0xe300 <put_rc>
   10a46:	ce 01       	movw	r24, r28
   10a48:	cd b7       	in	r28, 0x3d	; 61
   10a4a:	de b7       	in	r29, 0x3e	; 62
   10a4c:	25 96       	adiw	r28, 0x05	; 5
   10a4e:	e4 e0       	ldi	r30, 0x04	; 4
   10a50:	0c 94 b0 e4 	jmp	0x1c960	; 0x1c960 <__epilogue_restores__+0x1c>

00010a54 <dbf_read>:
   10a54:	cf 93       	push	r28
   10a56:	df 93       	push	r29
   10a58:	00 d0       	rcall	.+0      	; 0x10a5a <dbf_read+0x6>
   10a5a:	1f 92       	push	r1
   10a5c:	0e 94 d4 5c 	call	0xb9a8	; 0xb9a8 <f_read>
   10a60:	ec 01       	movw	r28, r24
   10a62:	89 2b       	or	r24, r25
   10a64:	69 f0       	breq	.+26     	; 0x10a80 <dbf_read+0x2c>
   10a66:	89 e0       	ldi	r24, 0x09	; 9
   10a68:	9e e0       	ldi	r25, 0x0E	; 14
   10a6a:	a0 e0       	ldi	r26, 0x00	; 0
   10a6c:	ed b7       	in	r30, 0x3d	; 61
   10a6e:	fe b7       	in	r31, 0x3e	; 62
   10a70:	81 83       	std	Z+1, r24	; 0x01
   10a72:	92 83       	std	Z+2, r25	; 0x02
   10a74:	a3 83       	std	Z+3, r26	; 0x03
   10a76:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   10a7a:	ce 01       	movw	r24, r28
   10a7c:	0e 94 80 71 	call	0xe300	; 0xe300 <put_rc>
   10a80:	ce 01       	movw	r24, r28
   10a82:	cd b7       	in	r28, 0x3d	; 61
   10a84:	de b7       	in	r29, 0x3e	; 62
   10a86:	23 96       	adiw	r28, 0x03	; 3
   10a88:	e2 e0       	ldi	r30, 0x02	; 2
   10a8a:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

00010a8e <dbf_write>:
   10a8e:	cf 93       	push	r28
   10a90:	df 93       	push	r29
   10a92:	00 d0       	rcall	.+0      	; 0x10a94 <dbf_write+0x6>
   10a94:	1f 92       	push	r1
   10a96:	0e 94 1f 5e 	call	0xbc3e	; 0xbc3e <f_write>
   10a9a:	ec 01       	movw	r28, r24
   10a9c:	89 2b       	or	r24, r25
   10a9e:	69 f0       	breq	.+26     	; 0x10aba <dbf_write+0x2c>
   10aa0:	8b ef       	ldi	r24, 0xFB	; 251
   10aa2:	9d e0       	ldi	r25, 0x0D	; 13
   10aa4:	a0 e0       	ldi	r26, 0x00	; 0
   10aa6:	ed b7       	in	r30, 0x3d	; 61
   10aa8:	fe b7       	in	r31, 0x3e	; 62
   10aaa:	81 83       	std	Z+1, r24	; 0x01
   10aac:	92 83       	std	Z+2, r25	; 0x02
   10aae:	a3 83       	std	Z+3, r26	; 0x03
   10ab0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   10ab4:	ce 01       	movw	r24, r28
   10ab6:	0e 94 80 71 	call	0xe300	; 0xe300 <put_rc>
   10aba:	ce 01       	movw	r24, r28
   10abc:	cd b7       	in	r28, 0x3d	; 61
   10abe:	de b7       	in	r29, 0x3e	; 62
   10ac0:	23 96       	adiw	r28, 0x03	; 3
   10ac2:	e2 e0       	ldi	r30, 0x02	; 2
   10ac4:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

00010ac8 <dbf_lseek>:
   10ac8:	cf 93       	push	r28
   10aca:	df 93       	push	r29
   10acc:	00 d0       	rcall	.+0      	; 0x10ace <dbf_lseek+0x6>
   10ace:	1f 92       	push	r1
   10ad0:	0e 94 e0 61 	call	0xc3c0	; 0xc3c0 <f_lseek>
   10ad4:	ec 01       	movw	r28, r24
   10ad6:	89 2b       	or	r24, r25
   10ad8:	69 f0       	breq	.+26     	; 0x10af4 <dbf_lseek+0x2c>
   10ada:	8e ee       	ldi	r24, 0xEE	; 238
   10adc:	9d e0       	ldi	r25, 0x0D	; 13
   10ade:	a0 e0       	ldi	r26, 0x00	; 0
   10ae0:	ed b7       	in	r30, 0x3d	; 61
   10ae2:	fe b7       	in	r31, 0x3e	; 62
   10ae4:	81 83       	std	Z+1, r24	; 0x01
   10ae6:	92 83       	std	Z+2, r25	; 0x02
   10ae8:	a3 83       	std	Z+3, r26	; 0x03
   10aea:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   10aee:	ce 01       	movw	r24, r28
   10af0:	0e 94 80 71 	call	0xe300	; 0xe300 <put_rc>
   10af4:	ce 01       	movw	r24, r28
   10af6:	cd b7       	in	r28, 0x3d	; 61
   10af8:	de b7       	in	r29, 0x3e	; 62
   10afa:	23 96       	adiw	r28, 0x03	; 3
   10afc:	e2 e0       	ldi	r30, 0x02	; 2
   10afe:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

00010b02 <dbf_close>:
   10b02:	cf 93       	push	r28
   10b04:	df 93       	push	r29
   10b06:	00 d0       	rcall	.+0      	; 0x10b08 <dbf_close+0x6>
   10b08:	1f 92       	push	r1
   10b0a:	0e 94 36 60 	call	0xc06c	; 0xc06c <f_close>
   10b0e:	ec 01       	movw	r28, r24
   10b10:	89 2b       	or	r24, r25
   10b12:	69 f0       	breq	.+26     	; 0x10b2e <dbf_close+0x2c>
   10b14:	80 ee       	ldi	r24, 0xE0	; 224
   10b16:	9d e0       	ldi	r25, 0x0D	; 13
   10b18:	a0 e0       	ldi	r26, 0x00	; 0
   10b1a:	ed b7       	in	r30, 0x3d	; 61
   10b1c:	fe b7       	in	r31, 0x3e	; 62
   10b1e:	81 83       	std	Z+1, r24	; 0x01
   10b20:	92 83       	std	Z+2, r25	; 0x02
   10b22:	a3 83       	std	Z+3, r26	; 0x03
   10b24:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   10b28:	ce 01       	movw	r24, r28
   10b2a:	0e 94 80 71 	call	0xe300	; 0xe300 <put_rc>
   10b2e:	ce 01       	movw	r24, r28
   10b30:	cd b7       	in	r28, 0x3d	; 61
   10b32:	de b7       	in	r29, 0x3e	; 62
   10b34:	23 96       	adiw	r28, 0x03	; 3
   10b36:	e2 e0       	ldi	r30, 0x02	; 2
   10b38:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

00010b3c <dbf_open_read>:
   10b3c:	a6 e2       	ldi	r26, 0x26	; 38
   10b3e:	b2 e0       	ldi	r27, 0x02	; 2
   10b40:	e4 ea       	ldi	r30, 0xA4	; 164
   10b42:	f5 e8       	ldi	r31, 0x85	; 133
   10b44:	0c 94 8c e4 	jmp	0x1c918	; 0x1c918 <__prologue_saves__+0xc>
   10b48:	4a 01       	movw	r8, r20
   10b4a:	5b 01       	movw	r10, r22
   10b4c:	69 01       	movw	r12, r18
   10b4e:	cb 5d       	subi	r28, 0xDB	; 219
   10b50:	dd 4f       	sbci	r29, 0xFD	; 253
   10b52:	19 82       	std	Y+1, r1	; 0x01
   10b54:	18 82       	st	Y, r1
   10b56:	c5 52       	subi	r28, 0x25	; 37
   10b58:	d2 40       	sbci	r29, 0x02	; 2
   10b5a:	43 e0       	ldi	r20, 0x03	; 3
   10b5c:	bc 01       	movw	r22, r24
   10b5e:	ce 01       	movw	r24, r28
   10b60:	01 96       	adiw	r24, 0x01	; 1
   10b62:	55 df       	rcall	.-342    	; 0x10a0e <dbf_open>
   10b64:	89 2b       	or	r24, r25
   10b66:	19 f0       	breq	.+6      	; 0x10b6e <dbf_open_read+0x32>
   10b68:	81 e1       	ldi	r24, 0x11	; 17
   10b6a:	90 e0       	ldi	r25, 0x00	; 0
   10b6c:	2f c0       	rjmp	.+94     	; 0x10bcc <dbf_open_read+0x90>
   10b6e:	b5 01       	movw	r22, r10
   10b70:	a4 01       	movw	r20, r8
   10b72:	ce 01       	movw	r24, r28
   10b74:	01 96       	adiw	r24, 0x01	; 1
   10b76:	a8 df       	rcall	.-176    	; 0x10ac8 <dbf_lseek>
   10b78:	89 2b       	or	r24, r25
   10b7a:	59 f0       	breq	.+22     	; 0x10b92 <dbf_open_read+0x56>
   10b7c:	85 e0       	ldi	r24, 0x05	; 5
   10b7e:	90 e0       	ldi	r25, 0x00	; 0
   10b80:	f7 01       	movw	r30, r14
   10b82:	91 83       	std	Z+1, r25	; 0x01
   10b84:	80 83       	st	Z, r24
   10b86:	ce 01       	movw	r24, r28
   10b88:	01 96       	adiw	r24, 0x01	; 1
   10b8a:	bb df       	rcall	.-138    	; 0x10b02 <dbf_close>
   10b8c:	8f ef       	ldi	r24, 0xFF	; 255
   10b8e:	9f ef       	ldi	r25, 0xFF	; 255
   10b90:	27 c0       	rjmp	.+78     	; 0x10be0 <dbf_open_read+0xa4>
   10b92:	9e 01       	movw	r18, r28
   10b94:	2b 5d       	subi	r18, 0xDB	; 219
   10b96:	3d 4f       	sbci	r19, 0xFD	; 253
   10b98:	a8 01       	movw	r20, r16
   10b9a:	b6 01       	movw	r22, r12
   10b9c:	ce 01       	movw	r24, r28
   10b9e:	01 96       	adiw	r24, 0x01	; 1
   10ba0:	59 df       	rcall	.-334    	; 0x10a54 <dbf_read>
   10ba2:	89 2b       	or	r24, r25
   10ba4:	49 f4       	brne	.+18     	; 0x10bb8 <dbf_open_read+0x7c>
   10ba6:	cb 5d       	subi	r28, 0xDB	; 219
   10ba8:	dd 4f       	sbci	r29, 0xFD	; 253
   10baa:	88 81       	ld	r24, Y
   10bac:	99 81       	ldd	r25, Y+1	; 0x01
   10bae:	c5 52       	subi	r28, 0x25	; 37
   10bb0:	d2 40       	sbci	r29, 0x02	; 2
   10bb2:	08 17       	cp	r16, r24
   10bb4:	19 07       	cpc	r17, r25
   10bb6:	19 f0       	breq	.+6      	; 0x10bbe <dbf_open_read+0x82>
   10bb8:	81 e0       	ldi	r24, 0x01	; 1
   10bba:	90 e0       	ldi	r25, 0x00	; 0
   10bbc:	e1 cf       	rjmp	.-62     	; 0x10b80 <dbf_open_read+0x44>
   10bbe:	ce 01       	movw	r24, r28
   10bc0:	01 96       	adiw	r24, 0x01	; 1
   10bc2:	9f df       	rcall	.-194    	; 0x10b02 <dbf_close>
   10bc4:	89 2b       	or	r24, r25
   10bc6:	31 f0       	breq	.+12     	; 0x10bd4 <dbf_open_read+0x98>
   10bc8:	80 e1       	ldi	r24, 0x10	; 16
   10bca:	90 e0       	ldi	r25, 0x00	; 0
   10bcc:	f7 01       	movw	r30, r14
   10bce:	91 83       	std	Z+1, r25	; 0x01
   10bd0:	80 83       	st	Z, r24
   10bd2:	dc cf       	rjmp	.-72     	; 0x10b8c <dbf_open_read+0x50>
   10bd4:	cb 5d       	subi	r28, 0xDB	; 219
   10bd6:	dd 4f       	sbci	r29, 0xFD	; 253
   10bd8:	88 81       	ld	r24, Y
   10bda:	99 81       	ldd	r25, Y+1	; 0x01
   10bdc:	c5 52       	subi	r28, 0x25	; 37
   10bde:	d2 40       	sbci	r29, 0x02	; 2
   10be0:	ca 5d       	subi	r28, 0xDA	; 218
   10be2:	dd 4f       	sbci	r29, 0xFD	; 253
   10be4:	ec e0       	ldi	r30, 0x0C	; 12
   10be6:	0c 94 a8 e4 	jmp	0x1c950	; 0x1c950 <__epilogue_restores__+0xc>

00010bea <dbf_open_write>:
   10bea:	a6 e2       	ldi	r26, 0x26	; 38
   10bec:	b2 e0       	ldi	r27, 0x02	; 2
   10bee:	eb ef       	ldi	r30, 0xFB	; 251
   10bf0:	f5 e8       	ldi	r31, 0x85	; 133
   10bf2:	0c 94 8c e4 	jmp	0x1c918	; 0x1c918 <__prologue_saves__+0xc>
   10bf6:	4a 01       	movw	r8, r20
   10bf8:	5b 01       	movw	r10, r22
   10bfa:	69 01       	movw	r12, r18
   10bfc:	cb 5d       	subi	r28, 0xDB	; 219
   10bfe:	dd 4f       	sbci	r29, 0xFD	; 253
   10c00:	19 82       	std	Y+1, r1	; 0x01
   10c02:	18 82       	st	Y, r1
   10c04:	c5 52       	subi	r28, 0x25	; 37
   10c06:	d2 40       	sbci	r29, 0x02	; 2
   10c08:	43 e0       	ldi	r20, 0x03	; 3
   10c0a:	bc 01       	movw	r22, r24
   10c0c:	ce 01       	movw	r24, r28
   10c0e:	01 96       	adiw	r24, 0x01	; 1
   10c10:	fe de       	rcall	.-516    	; 0x10a0e <dbf_open>
   10c12:	89 2b       	or	r24, r25
   10c14:	19 f0       	breq	.+6      	; 0x10c1c <dbf_open_write+0x32>
   10c16:	81 e1       	ldi	r24, 0x11	; 17
   10c18:	90 e0       	ldi	r25, 0x00	; 0
   10c1a:	2f c0       	rjmp	.+94     	; 0x10c7a <dbf_open_write+0x90>
   10c1c:	b5 01       	movw	r22, r10
   10c1e:	a4 01       	movw	r20, r8
   10c20:	ce 01       	movw	r24, r28
   10c22:	01 96       	adiw	r24, 0x01	; 1
   10c24:	51 df       	rcall	.-350    	; 0x10ac8 <dbf_lseek>
   10c26:	89 2b       	or	r24, r25
   10c28:	59 f0       	breq	.+22     	; 0x10c40 <dbf_open_write+0x56>
   10c2a:	85 e0       	ldi	r24, 0x05	; 5
   10c2c:	90 e0       	ldi	r25, 0x00	; 0
   10c2e:	f7 01       	movw	r30, r14
   10c30:	91 83       	std	Z+1, r25	; 0x01
   10c32:	80 83       	st	Z, r24
   10c34:	ce 01       	movw	r24, r28
   10c36:	01 96       	adiw	r24, 0x01	; 1
   10c38:	64 df       	rcall	.-312    	; 0x10b02 <dbf_close>
   10c3a:	8f ef       	ldi	r24, 0xFF	; 255
   10c3c:	9f ef       	ldi	r25, 0xFF	; 255
   10c3e:	27 c0       	rjmp	.+78     	; 0x10c8e <dbf_open_write+0xa4>
   10c40:	9e 01       	movw	r18, r28
   10c42:	2b 5d       	subi	r18, 0xDB	; 219
   10c44:	3d 4f       	sbci	r19, 0xFD	; 253
   10c46:	a8 01       	movw	r20, r16
   10c48:	b6 01       	movw	r22, r12
   10c4a:	ce 01       	movw	r24, r28
   10c4c:	01 96       	adiw	r24, 0x01	; 1
   10c4e:	1f df       	rcall	.-450    	; 0x10a8e <dbf_write>
   10c50:	89 2b       	or	r24, r25
   10c52:	49 f4       	brne	.+18     	; 0x10c66 <dbf_open_write+0x7c>
   10c54:	cb 5d       	subi	r28, 0xDB	; 219
   10c56:	dd 4f       	sbci	r29, 0xFD	; 253
   10c58:	88 81       	ld	r24, Y
   10c5a:	99 81       	ldd	r25, Y+1	; 0x01
   10c5c:	c5 52       	subi	r28, 0x25	; 37
   10c5e:	d2 40       	sbci	r29, 0x02	; 2
   10c60:	08 17       	cp	r16, r24
   10c62:	19 07       	cpc	r17, r25
   10c64:	19 f0       	breq	.+6      	; 0x10c6c <dbf_open_write+0x82>
   10c66:	81 e0       	ldi	r24, 0x01	; 1
   10c68:	90 e0       	ldi	r25, 0x00	; 0
   10c6a:	e1 cf       	rjmp	.-62     	; 0x10c2e <dbf_open_write+0x44>
   10c6c:	ce 01       	movw	r24, r28
   10c6e:	01 96       	adiw	r24, 0x01	; 1
   10c70:	48 df       	rcall	.-368    	; 0x10b02 <dbf_close>
   10c72:	89 2b       	or	r24, r25
   10c74:	31 f0       	breq	.+12     	; 0x10c82 <dbf_open_write+0x98>
   10c76:	80 e1       	ldi	r24, 0x10	; 16
   10c78:	90 e0       	ldi	r25, 0x00	; 0
   10c7a:	f7 01       	movw	r30, r14
   10c7c:	91 83       	std	Z+1, r25	; 0x01
   10c7e:	80 83       	st	Z, r24
   10c80:	dc cf       	rjmp	.-72     	; 0x10c3a <dbf_open_write+0x50>
   10c82:	cb 5d       	subi	r28, 0xDB	; 219
   10c84:	dd 4f       	sbci	r29, 0xFD	; 253
   10c86:	88 81       	ld	r24, Y
   10c88:	99 81       	ldd	r25, Y+1	; 0x01
   10c8a:	c5 52       	subi	r28, 0x25	; 37
   10c8c:	d2 40       	sbci	r29, 0x02	; 2
   10c8e:	ca 5d       	subi	r28, 0xDA	; 218
   10c90:	dd 4f       	sbci	r29, 0xFD	; 253
   10c92:	ec e0       	ldi	r30, 0x0C	; 12
   10c94:	0c 94 a8 e4 	jmp	0x1c950	; 0x1c950 <__epilogue_restores__+0xc>

00010c98 <gpib_timer_elapsed_begin>:
   10c98:	0c 94 8e 36 	jmp	0x6d1c	; 0x6d1c <clock_elapsed_begin>
   10c9c:	08 95       	ret

00010c9e <gpib_timer_reset>:
   10c9e:	f8 94       	cli
   10ca0:	e7 e7       	ldi	r30, 0x77	; 119
   10ca2:	fc e1       	ldi	r31, 0x1C	; 28
   10ca4:	10 82       	st	Z, r1
   10ca6:	11 82       	std	Z+1, r1	; 0x01
   10ca8:	12 82       	std	Z+2, r1	; 0x02
   10caa:	13 82       	std	Z+3, r1	; 0x03
   10cac:	14 82       	std	Z+4, r1	; 0x04
   10cae:	15 82       	std	Z+5, r1	; 0x05
   10cb0:	16 82       	std	Z+6, r1	; 0x06
   10cb2:	17 82       	std	Z+7, r1	; 0x07
   10cb4:	81 e0       	ldi	r24, 0x01	; 1
   10cb6:	80 87       	std	Z+8, r24	; 0x08
   10cb8:	78 94       	sei
   10cba:	08 95       	ret

00010cbc <gpib_timer_elapsed_end>:
   10cbc:	0c 94 94 36 	jmp	0x6d28	; 0x6d28 <clock_elapsed_end>
   10cc0:	08 95       	ret

00010cc2 <gpib_timer_task>:
   10cc2:	f8 94       	cli
   10cc4:	80 91 7b 1c 	lds	r24, 0x1C7B	; 0x801c7b <gpib_timer+0x4>
   10cc8:	90 91 7c 1c 	lds	r25, 0x1C7C	; 0x801c7c <gpib_timer+0x5>
   10ccc:	a0 91 7d 1c 	lds	r26, 0x1C7D	; 0x801c7d <gpib_timer+0x6>
   10cd0:	b0 91 7e 1c 	lds	r27, 0x1C7E	; 0x801c7e <gpib_timer+0x7>
   10cd4:	89 2b       	or	r24, r25
   10cd6:	8a 2b       	or	r24, r26
   10cd8:	8b 2b       	or	r24, r27
   10cda:	a1 f0       	breq	.+40     	; 0x10d04 <gpib_timer_task+0x42>
   10cdc:	80 91 7b 1c 	lds	r24, 0x1C7B	; 0x801c7b <gpib_timer+0x4>
   10ce0:	90 91 7c 1c 	lds	r25, 0x1C7C	; 0x801c7c <gpib_timer+0x5>
   10ce4:	a0 91 7d 1c 	lds	r26, 0x1C7D	; 0x801c7d <gpib_timer+0x6>
   10ce8:	b0 91 7e 1c 	lds	r27, 0x1C7E	; 0x801c7e <gpib_timer+0x7>
   10cec:	01 97       	sbiw	r24, 0x01	; 1
   10cee:	a1 09       	sbc	r26, r1
   10cf0:	b1 09       	sbc	r27, r1
   10cf2:	80 93 7b 1c 	sts	0x1C7B, r24	; 0x801c7b <gpib_timer+0x4>
   10cf6:	90 93 7c 1c 	sts	0x1C7C, r25	; 0x801c7c <gpib_timer+0x5>
   10cfa:	a0 93 7d 1c 	sts	0x1C7D, r26	; 0x801c7d <gpib_timer+0x6>
   10cfe:	b0 93 7e 1c 	sts	0x1C7E, r27	; 0x801c7e <gpib_timer+0x7>
   10d02:	03 c0       	rjmp	.+6      	; 0x10d0a <gpib_timer_task+0x48>
   10d04:	81 e0       	ldi	r24, 0x01	; 1
   10d06:	80 93 7f 1c 	sts	0x1C7F, r24	; 0x801c7f <gpib_timer+0x8>
   10d0a:	78 94       	sei
   10d0c:	08 95       	ret

00010d0e <gpib_timeout_set>:
   10d0e:	f8 94       	cli
   10d10:	e7 e7       	ldi	r30, 0x77	; 119
   10d12:	fc e1       	ldi	r31, 0x1C	; 28
   10d14:	64 83       	std	Z+4, r22	; 0x04
   10d16:	75 83       	std	Z+5, r23	; 0x05
   10d18:	86 83       	std	Z+6, r24	; 0x06
   10d1a:	97 83       	std	Z+7, r25	; 0x07
   10d1c:	10 86       	std	Z+8, r1	; 0x08
   10d1e:	78 94       	sei
   10d20:	08 95       	ret

00010d22 <gpib_bus_read_init>:
   10d22:	54 98       	cbi	0x0a, 4	; 10
   10d24:	57 98       	cbi	0x0a, 7	; 10
   10d26:	45 98       	cbi	0x08, 5	; 8
   10d28:	3d 9a       	sbi	0x07, 5	; 7
   10d2a:	11 b8       	out	0x01, r1	; 1
   10d2c:	2f ef       	ldi	r18, 0xFF	; 255
   10d2e:	22 b9       	out	0x02, r18	; 2
   10d30:	43 98       	cbi	0x08, 3	; 8
   10d32:	3b 9a       	sbi	0x07, 3	; 7
   10d34:	21 98       	cbi	0x04, 1	; 4
   10d36:	56 98       	cbi	0x0a, 6	; 10
   10d38:	20 98       	cbi	0x04, 0	; 4
   10d3a:	55 98       	cbi	0x0a, 5	; 10
   10d3c:	89 2b       	or	r24, r25
   10d3e:	39 f4       	brne	.+14     	; 0x10d4e <gpib_bus_read_init+0x2c>
   10d40:	52 98       	cbi	0x0a, 2	; 10
   10d42:	53 98       	cbi	0x0a, 3	; 10
   10d44:	8d e0       	ldi	r24, 0x0D	; 13
   10d46:	8a 95       	dec	r24
   10d48:	f1 f7       	brne	.-4      	; 0x10d46 <gpib_bus_read_init+0x24>
   10d4a:	00 00       	nop
   10d4c:	04 c0       	rjmp	.+8      	; 0x10d56 <gpib_bus_read_init+0x34>
   10d4e:	5b 98       	cbi	0x0b, 3	; 11
   10d50:	53 9a       	sbi	0x0a, 3	; 10
   10d52:	5a 98       	cbi	0x0b, 2	; 11
   10d54:	52 9a       	sbi	0x0a, 2	; 10
   10d56:	42 98       	cbi	0x08, 2	; 8
   10d58:	3a 9a       	sbi	0x07, 2	; 7
   10d5a:	44 9a       	sbi	0x08, 4	; 8
   10d5c:	3c 9a       	sbi	0x07, 4	; 7
   10d5e:	8d e0       	ldi	r24, 0x0D	; 13
   10d60:	8a 95       	dec	r24
   10d62:	f1 f7       	brne	.-4      	; 0x10d60 <gpib_bus_read_init+0x3e>
   10d64:	00 00       	nop
   10d66:	08 95       	ret

00010d68 <gpib_bus_init>:
   10d68:	00 d0       	rcall	.+0      	; 0x10d6a <gpib_bus_init+0x2>
   10d6a:	1f 92       	push	r1
   10d6c:	10 92 fc 18 	sts	0x18FC, r1	; 0x8018fc <gpib_unread_f>
   10d70:	11 b8       	out	0x01, r1	; 1
   10d72:	8f ef       	ldi	r24, 0xFF	; 255
   10d74:	82 b9       	out	0x02, r24	; 2
   10d76:	21 98       	cbi	0x04, 1	; 4
   10d78:	52 98       	cbi	0x0a, 2	; 10
   10d7a:	53 98       	cbi	0x0a, 3	; 10
   10d7c:	54 98       	cbi	0x0a, 4	; 10
   10d7e:	57 98       	cbi	0x0a, 7	; 10
   10d80:	56 98       	cbi	0x0a, 6	; 10
   10d82:	20 98       	cbi	0x04, 0	; 4
   10d84:	55 98       	cbi	0x0a, 5	; 10
   10d86:	45 98       	cbi	0x08, 5	; 8
   10d88:	3d 9a       	sbi	0x07, 5	; 7
   10d8a:	43 98       	cbi	0x08, 3	; 8
   10d8c:	3b 9a       	sbi	0x07, 3	; 7
   10d8e:	42 98       	cbi	0x08, 2	; 8
   10d90:	3a 9a       	sbi	0x07, 2	; 7
   10d92:	44 9a       	sbi	0x08, 4	; 8
   10d94:	3c 9a       	sbi	0x07, 4	; 7
   10d96:	8d e0       	ldi	r24, 0x0D	; 13
   10d98:	8a 95       	dec	r24
   10d9a:	f1 f7       	brne	.-4      	; 0x10d98 <gpib_bus_init+0x30>
   10d9c:	00 00       	nop
   10d9e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10da2:	82 ff       	sbrs	r24, 2
   10da4:	0a c0       	rjmp	.+20     	; 0x10dba <gpib_bus_init+0x52>
   10da6:	8b ea       	ldi	r24, 0xAB	; 171
   10da8:	90 e1       	ldi	r25, 0x10	; 16
   10daa:	a0 e0       	ldi	r26, 0x00	; 0
   10dac:	ed b7       	in	r30, 0x3d	; 61
   10dae:	fe b7       	in	r31, 0x3e	; 62
   10db0:	81 83       	std	Z+1, r24	; 0x01
   10db2:	92 83       	std	Z+2, r25	; 0x02
   10db4:	a3 83       	std	Z+3, r26	; 0x03
   10db6:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   10dba:	0f 90       	pop	r0
   10dbc:	0f 90       	pop	r0
   10dbe:	0f 90       	pop	r0
   10dc0:	08 95       	ret

00010dc2 <gpib_state_init>:
   10dc2:	00 d0       	rcall	.+0      	; 0x10dc4 <gpib_state_init+0x2>
   10dc4:	1f 92       	push	r1
   10dc6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10dca:	82 ff       	sbrs	r24, 2
   10dcc:	0a c0       	rjmp	.+20     	; 0x10de2 <gpib_state_init+0x20>
   10dce:	88 e9       	ldi	r24, 0x98	; 152
   10dd0:	90 e1       	ldi	r25, 0x10	; 16
   10dd2:	a0 e0       	ldi	r26, 0x00	; 0
   10dd4:	ed b7       	in	r30, 0x3d	; 61
   10dd6:	fe b7       	in	r31, 0x3e	; 62
   10dd8:	81 83       	std	Z+1, r24	; 0x01
   10dda:	92 83       	std	Z+2, r25	; 0x02
   10ddc:	a3 83       	std	Z+3, r26	; 0x03
   10dde:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   10de2:	e4 dd       	rcall	.-1080   	; 0x109ac <ppr_init>
   10de4:	0e 94 50 91 	call	0x122a0	; 0x122a0 <listen_cleanup>
   10de8:	0e 94 68 92 	call	0x124d0	; 0x124d0 <talk_cleanup>
   10dec:	10 92 83 1e 	sts	0x1E83, r1	; 0x801e83 <spoll>
   10df0:	10 92 86 1e 	sts	0x1E86, r1	; 0x801e86 <talking>
   10df4:	10 92 89 1e 	sts	0x1E89, r1	; 0x801e89 <talking_last>
   10df8:	10 92 88 1e 	sts	0x1E88, r1	; 0x801e88 <listening>
   10dfc:	10 92 82 1e 	sts	0x1E82, r1	; 0x801e82 <listening_last>
   10e00:	10 92 81 1c 	sts	0x1C81, r1	; 0x801c81 <lastcmd+0x1>
   10e04:	10 92 80 1c 	sts	0x1C80, r1	; 0x801c80 <lastcmd>
   10e08:	10 92 85 1e 	sts	0x1E85, r1	; 0x801e85 <current+0x1>
   10e0c:	10 92 84 1e 	sts	0x1E84, r1	; 0x801e84 <current>
   10e10:	10 92 87 1e 	sts	0x1E87, r1	; 0x801e87 <secondary>
   10e14:	0f 90       	pop	r0
   10e16:	0f 90       	pop	r0
   10e18:	0f 90       	pop	r0
   10e1a:	08 95       	ret

00010e1c <gpib_enable_PPR>:
   10e1c:	cf 93       	push	r28
   10e1e:	df 93       	push	r29
   10e20:	ad b7       	in	r26, 0x3d	; 61
   10e22:	be b7       	in	r27, 0x3e	; 62
   10e24:	17 97       	sbiw	r26, 0x07	; 7
   10e26:	0f b6       	in	r0, 0x3f	; 63
   10e28:	f8 94       	cli
   10e2a:	be bf       	out	0x3e, r27	; 62
   10e2c:	0f be       	out	0x3f, r0	; 63
   10e2e:	ad bf       	out	0x3d, r26	; 61
   10e30:	ec 01       	movw	r28, r24
   10e32:	88 30       	cpi	r24, 0x08	; 8
   10e34:	91 05       	cpc	r25, r1
   10e36:	68 f0       	brcs	.+26     	; 0x10e52 <gpib_enable_PPR+0x36>
   10e38:	ed b7       	in	r30, 0x3d	; 61
   10e3a:	fe b7       	in	r31, 0x3e	; 62
   10e3c:	95 83       	std	Z+5, r25	; 0x05
   10e3e:	84 83       	std	Z+4, r24	; 0x04
   10e40:	82 e7       	ldi	r24, 0x72	; 114
   10e42:	90 e1       	ldi	r25, 0x10	; 16
   10e44:	a0 e0       	ldi	r26, 0x00	; 0
   10e46:	81 83       	std	Z+1, r24	; 0x01
   10e48:	92 83       	std	Z+2, r25	; 0x02
   10e4a:	a3 83       	std	Z+3, r26	; 0x03
   10e4c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   10e50:	15 c0       	rjmp	.+42     	; 0x10e7c <gpib_enable_PPR+0x60>
   10e52:	c2 dd       	rcall	.-1148   	; 0x109d8 <ppr_bit_set>
   10e54:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10e58:	81 ff       	sbrs	r24, 1
   10e5a:	10 c0       	rjmp	.+32     	; 0x10e7c <gpib_enable_PPR+0x60>
   10e5c:	a3 dd       	rcall	.-1210   	; 0x109a4 <ppr_reg>
   10e5e:	90 e0       	ldi	r25, 0x00	; 0
   10e60:	ed b7       	in	r30, 0x3d	; 61
   10e62:	fe b7       	in	r31, 0x3e	; 62
   10e64:	97 83       	std	Z+7, r25	; 0x07
   10e66:	86 83       	std	Z+6, r24	; 0x06
   10e68:	d5 83       	std	Z+5, r29	; 0x05
   10e6a:	c4 83       	std	Z+4, r28	; 0x04
   10e6c:	87 e5       	ldi	r24, 0x57	; 87
   10e6e:	90 e1       	ldi	r25, 0x10	; 16
   10e70:	a0 e0       	ldi	r26, 0x00	; 0
   10e72:	81 83       	std	Z+1, r24	; 0x01
   10e74:	92 83       	std	Z+2, r25	; 0x02
   10e76:	a3 83       	std	Z+3, r26	; 0x03
   10e78:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   10e7c:	cd b7       	in	r28, 0x3d	; 61
   10e7e:	de b7       	in	r29, 0x3e	; 62
   10e80:	27 96       	adiw	r28, 0x07	; 7
   10e82:	e2 e0       	ldi	r30, 0x02	; 2
   10e84:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

00010e88 <gpib_disable_PPR>:
   10e88:	cf 93       	push	r28
   10e8a:	df 93       	push	r29
   10e8c:	ad b7       	in	r26, 0x3d	; 61
   10e8e:	be b7       	in	r27, 0x3e	; 62
   10e90:	17 97       	sbiw	r26, 0x07	; 7
   10e92:	0f b6       	in	r0, 0x3f	; 63
   10e94:	f8 94       	cli
   10e96:	be bf       	out	0x3e, r27	; 62
   10e98:	0f be       	out	0x3f, r0	; 63
   10e9a:	ad bf       	out	0x3d, r26	; 61
   10e9c:	ec 01       	movw	r28, r24
   10e9e:	88 30       	cpi	r24, 0x08	; 8
   10ea0:	91 05       	cpc	r25, r1
   10ea2:	68 f0       	brcs	.+26     	; 0x10ebe <gpib_disable_PPR+0x36>
   10ea4:	ed b7       	in	r30, 0x3d	; 61
   10ea6:	fe b7       	in	r31, 0x3e	; 62
   10ea8:	95 83       	std	Z+5, r25	; 0x05
   10eaa:	84 83       	std	Z+4, r24	; 0x04
   10eac:	80 e3       	ldi	r24, 0x30	; 48
   10eae:	90 e1       	ldi	r25, 0x10	; 16
   10eb0:	a0 e0       	ldi	r26, 0x00	; 0
   10eb2:	81 83       	std	Z+1, r24	; 0x01
   10eb4:	92 83       	std	Z+2, r25	; 0x02
   10eb6:	a3 83       	std	Z+3, r26	; 0x03
   10eb8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   10ebc:	15 c0       	rjmp	.+42     	; 0x10ee8 <gpib_disable_PPR+0x60>
   10ebe:	99 dd       	rcall	.-1230   	; 0x109f2 <ppr_bit_clr>
   10ec0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10ec4:	81 ff       	sbrs	r24, 1
   10ec6:	10 c0       	rjmp	.+32     	; 0x10ee8 <gpib_disable_PPR+0x60>
   10ec8:	6d dd       	rcall	.-1318   	; 0x109a4 <ppr_reg>
   10eca:	90 e0       	ldi	r25, 0x00	; 0
   10ecc:	ed b7       	in	r30, 0x3d	; 61
   10ece:	fe b7       	in	r31, 0x3e	; 62
   10ed0:	97 83       	std	Z+7, r25	; 0x07
   10ed2:	86 83       	std	Z+6, r24	; 0x06
   10ed4:	d5 83       	std	Z+5, r29	; 0x05
   10ed6:	c4 83       	std	Z+4, r28	; 0x04
   10ed8:	85 e1       	ldi	r24, 0x15	; 21
   10eda:	90 e1       	ldi	r25, 0x10	; 16
   10edc:	a0 e0       	ldi	r26, 0x00	; 0
   10ede:	81 83       	std	Z+1, r24	; 0x01
   10ee0:	92 83       	std	Z+2, r25	; 0x02
   10ee2:	a3 83       	std	Z+3, r26	; 0x03
   10ee4:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   10ee8:	cd b7       	in	r28, 0x3d	; 61
   10eea:	de b7       	in	r29, 0x3e	; 62
   10eec:	27 96       	adiw	r28, 0x07	; 7
   10eee:	e2 e0       	ldi	r30, 0x02	; 2
   10ef0:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

00010ef4 <gpib_assert_ifc>:
   10ef4:	00 d0       	rcall	.+0      	; 0x10ef6 <gpib_assert_ifc+0x2>
   10ef6:	1f 92       	push	r1
   10ef8:	5c 98       	cbi	0x0b, 4	; 11
   10efa:	54 9a       	sbi	0x0a, 4	; 10
   10efc:	6a ef       	ldi	r22, 0xFA	; 250
   10efe:	70 e0       	ldi	r23, 0x00	; 0
   10f00:	80 e0       	ldi	r24, 0x00	; 0
   10f02:	90 e0       	ldi	r25, 0x00	; 0
   10f04:	0e 94 f6 29 	call	0x53ec	; 0x53ec <delayus>
   10f08:	54 98       	cbi	0x0a, 4	; 10
   10f0a:	6a ef       	ldi	r22, 0xFA	; 250
   10f0c:	70 e0       	ldi	r23, 0x00	; 0
   10f0e:	80 e0       	ldi	r24, 0x00	; 0
   10f10:	90 e0       	ldi	r25, 0x00	; 0
   10f12:	0e 94 f6 29 	call	0x53ec	; 0x53ec <delayus>
   10f16:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10f1a:	82 ff       	sbrs	r24, 2
   10f1c:	0a c0       	rjmp	.+20     	; 0x10f32 <gpib_assert_ifc+0x3e>
   10f1e:	89 e0       	ldi	r24, 0x09	; 9
   10f20:	90 e1       	ldi	r25, 0x10	; 16
   10f22:	a0 e0       	ldi	r26, 0x00	; 0
   10f24:	ed b7       	in	r30, 0x3d	; 61
   10f26:	fe b7       	in	r31, 0x3e	; 62
   10f28:	81 83       	std	Z+1, r24	; 0x01
   10f2a:	92 83       	std	Z+2, r25	; 0x02
   10f2c:	a3 83       	std	Z+3, r26	; 0x03
   10f2e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   10f32:	0f 90       	pop	r0
   10f34:	0f 90       	pop	r0
   10f36:	0f 90       	pop	r0
   10f38:	08 95       	ret

00010f3a <gpib_unread>:
   10f3a:	cf 93       	push	r28
   10f3c:	df 93       	push	r29
   10f3e:	00 d0       	rcall	.+0      	; 0x10f40 <gpib_unread+0x6>
   10f40:	1f 92       	push	r1
   10f42:	ec 01       	movw	r28, r24
   10f44:	80 91 fc 18 	lds	r24, 0x18FC	; 0x8018fc <gpib_unread_f>
   10f48:	81 11       	cpse	r24, r1
   10f4a:	08 c0       	rjmp	.+16     	; 0x10f5c <gpib_unread+0x22>
   10f4c:	d0 93 8b 1e 	sts	0x1E8B, r29	; 0x801e8b <gpib_unread_data+0x1>
   10f50:	c0 93 8a 1e 	sts	0x1E8A, r28	; 0x801e8a <gpib_unread_data>
   10f54:	81 e0       	ldi	r24, 0x01	; 1
   10f56:	80 93 fc 18 	sts	0x18FC, r24	; 0x8018fc <gpib_unread_f>
   10f5a:	12 c0       	rjmp	.+36     	; 0x10f80 <gpib_unread+0x46>
   10f5c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   10f60:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   10f64:	85 70       	andi	r24, 0x05	; 5
   10f66:	99 27       	eor	r25, r25
   10f68:	89 2b       	or	r24, r25
   10f6a:	51 f0       	breq	.+20     	; 0x10f80 <gpib_unread+0x46>
   10f6c:	8b ed       	ldi	r24, 0xDB	; 219
   10f6e:	9f e0       	ldi	r25, 0x0F	; 15
   10f70:	a0 e0       	ldi	r26, 0x00	; 0
   10f72:	ed b7       	in	r30, 0x3d	; 61
   10f74:	fe b7       	in	r31, 0x3e	; 62
   10f76:	81 83       	std	Z+1, r24	; 0x01
   10f78:	92 83       	std	Z+2, r25	; 0x02
   10f7a:	a3 83       	std	Z+3, r26	; 0x03
   10f7c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   10f80:	ce 01       	movw	r24, r28
   10f82:	cd b7       	in	r28, 0x3d	; 61
   10f84:	de b7       	in	r29, 0x3e	; 62
   10f86:	23 96       	adiw	r28, 0x03	; 3
   10f88:	e2 e0       	ldi	r30, 0x02	; 2
   10f8a:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

00010f8e <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10f8e:	11 b8       	out	0x01, r1	; 1
   10f90:	80 b1       	in	r24, 0x00	; 0
   10f92:	80 95       	com	r24

    ///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10f94:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10f96:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10f98:	08 95       	ret

00010f9a <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10f9a:	4e 99       	sbic	0x09, 6	; 9
   10f9c:	03 c0       	rjmp	.+6      	; 0x10fa4 <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10f9e:	80 e0       	ldi	r24, 0x00	; 0
   10fa0:	94 e0       	ldi	r25, 0x04	; 4
   10fa2:	02 c0       	rjmp	.+4      	; 0x10fa8 <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10fa4:	80 e0       	ldi	r24, 0x00	; 0
   10fa6:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10fa8:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10faa:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10fac:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10fae:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10fb0:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10fb2:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10fb4:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10fb6:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10fb8:	08 95       	ret

00010fba <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10fba:	19 99       	sbic	0x03, 1	; 3
   10fbc:	03 c0       	rjmp	.+6      	; 0x10fc4 <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10fbe:	80 e0       	ldi	r24, 0x00	; 0
   10fc0:	90 e2       	ldi	r25, 0x20	; 32
   10fc2:	02 c0       	rjmp	.+4      	; 0x10fc8 <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10fc4:	80 e0       	ldi	r24, 0x00	; 0
   10fc6:	90 e0       	ldi	r25, 0x00	; 0
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10fc8:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10fca:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10fcc:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10fce:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10fd0:	08 95       	ret

00010fd2 <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10fd2:	2f 92       	push	r2
   10fd4:	3f 92       	push	r3
   10fd6:	4f 92       	push	r4
   10fd8:	6f 92       	push	r6
   10fda:	7f 92       	push	r7
   10fdc:	8f 92       	push	r8
   10fde:	cf 92       	push	r12
   10fe0:	df 92       	push	r13
   10fe2:	ef 92       	push	r14
   10fe4:	1f 93       	push	r17
   10fe6:	cf 93       	push	r28
   10fe8:	df 93       	push	r29
   10fea:	cd b7       	in	r28, 0x3d	; 61
   10fec:	de b7       	in	r29, 0x3e	; 62
   10fee:	2f 97       	sbiw	r28, 0x0f	; 15
   10ff0:	0f b6       	in	r0, 0x3f	; 63
   10ff2:	f8 94       	cli
   10ff4:	de bf       	out	0x3e, r29	; 62
   10ff6:	0f be       	out	0x3f, r0	; 63
   10ff8:	cd bf       	out	0x3d, r28	; 61
   10ffa:	9f 87       	std	Y+15, r25	; 0x0f
   10ffc:	8e 87       	std	Y+14, r24	; 0x0e
    uint8_t tx_state;

	// Wait for DAV to be released before starting
	// Read state for DAV
	gpib_bus_read_init(0);
   10ffe:	80 e0       	ldi	r24, 0x00	; 0
   11000:	90 e0       	ldi	r25, 0x00	; 0
   11002:	8f de       	rcall	.-738    	; 0x10d22 <gpib_bus_read_init>
	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   11004:	64 ef       	ldi	r22, 0xF4	; 244
   11006:	71 e0       	ldi	r23, 0x01	; 1
   11008:	80 e0       	ldi	r24, 0x00	; 0
   1100a:	90 e0       	ldi	r25, 0x00	; 0
   1100c:	80 de       	rcall	.-768    	; 0x10d0e <gpib_timeout_set>

	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
   1100e:	10 e0       	ldi	r17, 0x00	; 0
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   11010:	89 e4       	ldi	r24, 0x49	; 73
   11012:	9f e0       	ldi	r25, 0x0F	; 15
   11014:	6c 01       	movw	r12, r24
   11016:	e1 2c       	mov	r14, r1
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NDAC==1>\n");
   11018:	83 e6       	ldi	r24, 0x63	; 99
   1101a:	9f e0       	ldi	r25, 0x0F	; 15
   1101c:	3c 01       	movw	r6, r24
   1101e:	81 2c       	mov	r8, r1
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==0>\n");
   11020:	8e e7       	ldi	r24, 0x7E	; 126
   11022:	9f e0       	ldi	r25, 0x0F	; 15
   11024:	1c 01       	movw	r2, r24
   11026:	41 2c       	mov	r4, r1
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   11028:	89 e9       	ldi	r24, 0x99	; 153
   1102a:	9f e0       	ldi	r25, 0x0F	; 15
   1102c:	9c 01       	movw	r18, r24
   1102e:	40 e0       	ldi	r20, 0x00	; 0
   11030:	28 87       	std	Y+8, r18	; 0x08
   11032:	39 87       	std	Y+9, r19	; 0x09
   11034:	4a 87       	std	Y+10, r20	; 0x0a
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   11036:	81 ec       	ldi	r24, 0xC1	; 193
   11038:	9f e0       	ldi	r25, 0x0F	; 15
   1103a:	9c 01       	movw	r18, r24
   1103c:	40 e0       	ldi	r20, 0x00	; 0
   1103e:	2b 87       	std	Y+11, r18	; 0x0b
   11040:	3c 87       	std	Y+12, r19	; 0x0c
   11042:	4d 87       	std	Y+13, r20	; 0x0d
    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
    {
        if(uart_keyhit(0))
   11044:	80 e0       	ldi	r24, 0x00	; 0
   11046:	0e 94 2d 2c 	call	0x585a	; 0x585a <uart_keyhit>
   1104a:	89 2b       	or	r24, r25
   1104c:	09 f0       	breq	.+2      	; 0x11050 <gpib_write_byte+0x7e>
   1104e:	1b c1       	rjmp	.+566    	; 0x11286 <gpib_write_byte+0x2b4>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   11050:	4c 99       	sbic	0x09, 4	; 9
   11052:	07 c0       	rjmp	.+14     	; 0x11062 <gpib_write_byte+0x90>
        {
            ch |= IFC_FLAG;
   11054:	8e 85       	ldd	r24, Y+14	; 0x0e
   11056:	9f 85       	ldd	r25, Y+15	; 0x0f
   11058:	90 61       	ori	r25, 0x10	; 16
   1105a:	9f 87       	std	Y+15, r25	; 0x0f
			gpib_bus_init();
   1105c:	8e 87       	std	Y+14, r24	; 0x0e
   1105e:	84 de       	rcall	.-760    	; 0x10d68 <gpib_bus_init>
            break;
   11060:	12 c1       	rjmp	.+548    	; 0x11286 <gpib_write_byte+0x2b4>
        }

        switch(tx_state)
   11062:	81 2f       	mov	r24, r17
   11064:	90 e0       	ldi	r25, 0x00	; 0
   11066:	8a 30       	cpi	r24, 0x0A	; 10
   11068:	91 05       	cpc	r25, r1
   1106a:	08 f0       	brcs	.+2      	; 0x1106e <gpib_write_byte+0x9c>
   1106c:	02 c1       	rjmp	.+516    	; 0x11272 <gpib_write_byte+0x2a0>
   1106e:	fc 01       	movw	r30, r24
   11070:	e3 54       	subi	r30, 0x43	; 67
   11072:	ff 4f       	sbci	r31, 0xFF	; 255
   11074:	0c 94 42 e4 	jmp	0x1c884	; 0x1c884 <__tablejump2__>
        {
            case GPIB_TX_START:
                // Wait for release of DAV and EOI before starting
				// IF DAV = 0 the bus is busy
                if(GPIB_PIN_TST(DAV) == 1)
   11078:	19 9b       	sbis	0x03, 1	; 3
   1107a:	12 c0       	rjmp	.+36     	; 0x110a0 <gpib_write_byte+0xce>
					// We arive here in Read Mode - see gpib_bus_read_init(0);

					// Switch GBIB driver direction to Write
					// CPU has BUS already set IN with pullups = 0xff - see gpib_bus_read_init(0);
					// When we switch the GPIB drivers will be in OC mode and off the bus (0xff)
					GPIB_IO_HI(TE); // BUS OUT, DAV OUT, NRFD and NDAC IN
   1107c:	42 9a       	sbi	0x08, 2	; 8
   1107e:	3a 9a       	sbi	0x07, 2	; 7
					GPIB_IO_LOW(DC);// ATN OUT, EOI OUT, SRQ IN
   11080:	44 98       	cbi	0x08, 4	; 8
   11082:	3c 9a       	sbi	0x07, 4	; 7
#endif
                    // My testing with various GPIB devices shows that we MUST assert ATN EARLY!
                    if(ch & ATN_FLAG)
   11084:	ee 85       	ldd	r30, Y+14	; 0x0e
   11086:	ff 85       	ldd	r31, Y+15	; 0x0f
   11088:	f2 ff       	sbrs	r31, 2
   1108a:	03 c0       	rjmp	.+6      	; 0x11092 <gpib_write_byte+0xc0>
                        GPIB_IO_LOW(ATN);   // FYI: SS80 never sends ATN from a device
   1108c:	5e 98       	cbi	0x0b, 6	; 11
   1108e:	56 9a       	sbi	0x0a, 6	; 10
   11090:	01 c0       	rjmp	.+2      	; 0x11094 <gpib_write_byte+0xc2>
                    else
                        GPIB_PIN_FLOAT_UP(ATN);
   11092:	56 98       	cbi	0x0a, 6	; 10

                    gpib_timeout_set(HTIMEOUT);
   11094:	64 ef       	ldi	r22, 0xF4	; 244
   11096:	71 e0       	ldi	r23, 0x01	; 1
   11098:	80 e0       	ldi	r24, 0x00	; 0
   1109a:	90 e0       	ldi	r25, 0x00	; 0
   1109c:	38 de       	rcall	.-912    	; 0x10d0e <gpib_timeout_set>
                    tx_state = GPIB_TX_WAIT_READY;
   1109e:	11 e0       	ldi	r17, 0x01	; 1
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   110a0:	80 91 7f 1c 	lds	r24, 0x1C7F	; 0x801c7f <gpib_timer+0x8>
                        GPIB_PIN_FLOAT_UP(ATN);

                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
   110a4:	88 23       	and	r24, r24
   110a6:	71 f2       	breq	.-100    	; 0x11044 <gpib_write_byte+0x72>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   110a8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   110ac:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   110b0:	85 70       	andi	r24, 0x05	; 5
   110b2:	99 27       	eor	r25, r25
   110b4:	89 2b       	or	r24, r25
   110b6:	51 f1       	breq	.+84     	; 0x1110c <gpib_write_byte+0x13a>
                        printf("<BUS waiting for DAV==1>\n");
   110b8:	2b 85       	ldd	r18, Y+11	; 0x0b
   110ba:	3c 85       	ldd	r19, Y+12	; 0x0c
   110bc:	4d 85       	ldd	r20, Y+13	; 0x0d
   110be:	ed b7       	in	r30, 0x3d	; 61
   110c0:	fe b7       	in	r31, 0x3e	; 62
   110c2:	21 83       	std	Z+1, r18	; 0x01
   110c4:	32 83       	std	Z+2, r19	; 0x02
   110c6:	43 83       	std	Z+3, r20	; 0x03
   110c8:	1f c0       	rjmp	.+62     	; 0x11108 <gpib_write_byte+0x136>
                }
                break;

            case GPIB_TX_WAIT_READY:
                // Wait for ready condition
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
   110ca:	4a 9b       	sbis	0x09, 2	; 9
   110cc:	08 c0       	rjmp	.+16     	; 0x110de <gpib_write_byte+0x10c>
   110ce:	4b 99       	sbic	0x09, 3	; 9
                {
                    gpib_timeout_set(HTIMEOUT);
   110d0:	06 c0       	rjmp	.+12     	; 0x110de <gpib_write_byte+0x10c>
   110d2:	64 ef       	ldi	r22, 0xF4	; 244
   110d4:	71 e0       	ldi	r23, 0x01	; 1
   110d6:	80 e0       	ldi	r24, 0x00	; 0
   110d8:	90 e0       	ldi	r25, 0x00	; 0
                    tx_state = GPIB_TX_PUT_DATA;
   110da:	19 de       	rcall	.-974    	; 0x10d0e <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   110dc:	12 e0       	ldi	r17, 0x02	; 2
   110de:	80 91 7f 1c 	lds	r24, 0x1C7F	; 0x801c7f <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
   110e2:	88 23       	and	r24, r24
   110e4:	09 f4       	brne	.+2      	; 0x110e8 <gpib_write_byte+0x116>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   110e6:	ae cf       	rjmp	.-164    	; 0x11044 <gpib_write_byte+0x72>
   110e8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   110ec:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   110f0:	85 70       	andi	r24, 0x05	; 5
   110f2:	99 27       	eor	r25, r25
   110f4:	89 2b       	or	r24, r25
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   110f6:	51 f0       	breq	.+20     	; 0x1110c <gpib_write_byte+0x13a>
   110f8:	88 85       	ldd	r24, Y+8	; 0x08
   110fa:	99 85       	ldd	r25, Y+9	; 0x09
   110fc:	aa 85       	ldd	r26, Y+10	; 0x0a
   110fe:	ed b7       	in	r30, 0x3d	; 61
   11100:	fe b7       	in	r31, 0x3e	; 62
   11102:	81 83       	std	Z+1, r24	; 0x01
   11104:	92 83       	std	Z+2, r25	; 0x02
   11106:	a3 83       	std	Z+3, r26	; 0x03
   11108:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#endif
                    ch |= TIMEOUT_FLAG;
   1110c:	2e 85       	ldd	r18, Y+14	; 0x0e
   1110e:	3f 85       	ldd	r19, Y+15	; 0x0f
   11110:	30 64       	ori	r19, 0x40	; 64
   11112:	3f 87       	std	Y+15, r19	; 0x0f
   11114:	2e 87       	std	Y+14, r18	; 0x0e
                }
                break;

            case GPIB_TX_PUT_DATA:

                if(ch & EOI_FLAG)
   11116:	b5 c0       	rjmp	.+362    	; 0x11282 <gpib_write_byte+0x2b0>
   11118:	8e 85       	ldd	r24, Y+14	; 0x0e
   1111a:	9f 85       	ldd	r25, Y+15	; 0x0f
   1111c:	90 ff       	sbrs	r25, 0
                    GPIB_IO_LOW(EOI);
   1111e:	03 c0       	rjmp	.+6      	; 0x11126 <gpib_write_byte+0x154>
   11120:	28 98       	cbi	0x05, 0	; 5
   11122:	20 9a       	sbi	0x04, 0	; 4
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   11124:	01 c0       	rjmp	.+2      	; 0x11128 <gpib_write_byte+0x156>

                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   11126:	20 98       	cbi	0x04, 0	; 4
   11128:	8f ef       	ldi	r24, 0xFF	; 255
   1112a:	81 b9       	out	0x01, r24	; 1
   1112c:	8e 85       	ldd	r24, Y+14	; 0x0e
   1112e:	80 95       	com	r24
#if BOARD == 2
				// Switch to Tristate mode to soeed up Write
                GPIB_IO_HI(PE); 
   11130:	82 b9       	out	0x02, r24	; 2
   11132:	43 9a       	sbi	0x08, 3	; 8
   11134:	3b 9a       	sbi	0x07, 3	; 7
   11136:	9d e0       	ldi	r25, 0x0D	; 13
   11138:	9a 95       	dec	r25
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   1113a:	f1 f7       	brne	.-4      	; 0x11138 <gpib_write_byte+0x166>
   1113c:	00 00       	nop
   1113e:	64 ef       	ldi	r22, 0xF4	; 244
   11140:	71 e0       	ldi	r23, 0x01	; 1
   11142:	80 e0       	ldi	r24, 0x00	; 0
   11144:	90 e0       	ldi	r25, 0x00	; 0
                tx_state = GPIB_TX_SET_DAV_LOW;
   11146:	e3 dd       	rcall	.-1082   	; 0x10d0e <gpib_timeout_set>
                break;


            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   11148:	13 e0       	ldi	r17, 0x03	; 3
                gpib_timeout_set(HTIMEOUT);
   1114a:	7c cf       	rjmp	.-264    	; 0x11044 <gpib_write_byte+0x72>
   1114c:	29 98       	cbi	0x05, 1	; 5
   1114e:	21 9a       	sbi	0x04, 1	; 4
   11150:	64 ef       	ldi	r22, 0xF4	; 244
   11152:	71 e0       	ldi	r23, 0x01	; 1
   11154:	80 e0       	ldi	r24, 0x00	; 0
                tx_state = GPIB_TX_WAIT_FOR_NRFD_LOW;
                break;

            ///@brief first device is ready
            case GPIB_TX_WAIT_FOR_NRFD_LOW:
                if (GPIB_PIN_TST(NRFD) == 0)
   11156:	90 e0       	ldi	r25, 0x00	; 0
   11158:	da dd       	rcall	.-1100   	; 0x10d0e <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   1115a:	14 e0       	ldi	r17, 0x04	; 4
   1115c:	73 cf       	rjmp	.-282    	; 0x11044 <gpib_write_byte+0x72>
   1115e:	4a 99       	sbic	0x09, 2	; 9
   11160:	07 c0       	rjmp	.+14     	; 0x11170 <gpib_write_byte+0x19e>
   11162:	64 ef       	ldi	r22, 0xF4	; 244
   11164:	71 e0       	ldi	r23, 0x01	; 1
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   11166:	80 e0       	ldi	r24, 0x00	; 0
                    break;
   11168:	90 e0       	ldi	r25, 0x00	; 0
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   1116a:	d1 dd       	rcall	.-1118   	; 0x10d0e <gpib_timeout_set>
   1116c:	15 e0       	ldi	r17, 0x05	; 5
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
                    break;
                }
                if (gpib_timeout_test())
   1116e:	6a cf       	rjmp	.-300    	; 0x11044 <gpib_write_byte+0x72>
   11170:	80 91 7f 1c 	lds	r24, 0x1C7F	; 0x801c7f <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11174:	88 23       	and	r24, r24
   11176:	09 f4       	brne	.+2      	; 0x1117a <gpib_write_byte+0x1a8>
   11178:	65 cf       	rjmp	.-310    	; 0x11044 <gpib_write_byte+0x72>
   1117a:	ee 85       	ldd	r30, Y+14	; 0x0e
   1117c:	ff 85       	ldd	r31, Y+15	; 0x0f
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   1117e:	f0 64       	ori	r31, 0x40	; 64
   11180:	ff 87       	std	Y+15, r31	; 0x0f
   11182:	ee 87       	std	Y+14, r30	; 0x0e
   11184:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11188:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1118c:	85 70       	andi	r24, 0x05	; 5
   1118e:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NRFD==0>\n");
   11190:	89 2b       	or	r24, r25
   11192:	09 f4       	brne	.+2      	; 0x11196 <gpib_write_byte+0x1c4>
   11194:	76 c0       	rjmp	.+236    	; 0x11282 <gpib_write_byte+0x2b0>
   11196:	ed b7       	in	r30, 0x3d	; 61
   11198:	fe b7       	in	r31, 0x3e	; 62
   1119a:	21 82       	std	Z+1, r2	; 0x01
                }
                break;

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
   1119c:	32 82       	std	Z+2, r3	; 0x02
   1119e:	43 82       	std	Z+3, r4	; 0x03
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   111a0:	43 c0       	rjmp	.+134    	; 0x11228 <gpib_write_byte+0x256>
   111a2:	4b 99       	sbic	0x09, 3	; 9
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   111a4:	6a c0       	rjmp	.+212    	; 0x1127a <gpib_write_byte+0x2a8>
   111a6:	80 91 7f 1c 	lds	r24, 0x1C7F	; 0x801c7f <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   111aa:	88 23       	and	r24, r24
   111ac:	09 f4       	brne	.+2      	; 0x111b0 <gpib_write_byte+0x1de>
   111ae:	4a cf       	rjmp	.-364    	; 0x11044 <gpib_write_byte+0x72>
   111b0:	2e 85       	ldd	r18, Y+14	; 0x0e
   111b2:	3f 85       	ldd	r19, Y+15	; 0x0f
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   111b4:	30 64       	ori	r19, 0x40	; 64
   111b6:	3f 87       	std	Y+15, r19	; 0x0f
   111b8:	2e 87       	std	Y+14, r18	; 0x0e
   111ba:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   111be:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   111c2:	85 70       	andi	r24, 0x05	; 5
   111c4:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NDAC==1>\n");
   111c6:	89 2b       	or	r24, r25
   111c8:	09 f4       	brne	.+2      	; 0x111cc <gpib_write_byte+0x1fa>
   111ca:	5b c0       	rjmp	.+182    	; 0x11282 <gpib_write_byte+0x2b0>
   111cc:	ed b7       	in	r30, 0x3d	; 61
   111ce:	fe b7       	in	r31, 0x3e	; 62
                }
                break;

            ///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   111d0:	61 82       	std	Z+1, r6	; 0x01
   111d2:	72 82       	std	Z+2, r7	; 0x02
   111d4:	83 82       	std	Z+3, r8	; 0x03
   111d6:	28 c0       	rjmp	.+80     	; 0x11228 <gpib_write_byte+0x256>
				GPIB_BUS_SETTLE();			// give some time

				gpib_bus_read_init(0);		// Free BUS, NOT busy
   111d8:	21 98       	cbi	0x04, 1	; 4
   111da:	fd e0       	ldi	r31, 0x0D	; 13
   111dc:	fa 95       	dec	r31
   111de:	f1 f7       	brne	.-4      	; 0x111dc <gpib_write_byte+0x20a>

                gpib_timeout_set(HTIMEOUT);
   111e0:	00 00       	nop
   111e2:	80 e0       	ldi	r24, 0x00	; 0
   111e4:	90 e0       	ldi	r25, 0x00	; 0
   111e6:	9d dd       	rcall	.-1222   	; 0x10d22 <gpib_bus_read_init>
   111e8:	64 ef       	ldi	r22, 0xF4	; 244
   111ea:	71 e0       	ldi	r23, 0x01	; 1
                tx_state = GPIB_TX_WAIT_FOR_DAV_HI;
   111ec:	80 e0       	ldi	r24, 0x00	; 0
                break;
   111ee:	90 e0       	ldi	r25, 0x00	; 0

			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
   111f0:	8e dd       	rcall	.-1252   	; 0x10d0e <gpib_timeout_set>
   111f2:	17 e0       	ldi	r17, 0x07	; 7
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   111f4:	27 cf       	rjmp	.-434    	; 0x11044 <gpib_write_byte+0x72>
   111f6:	19 99       	sbic	0x03, 1	; 3
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
                    break;
                }
                if (gpib_timeout_test())
   111f8:	42 c0       	rjmp	.+132    	; 0x1127e <gpib_write_byte+0x2ac>
   111fa:	80 91 7f 1c 	lds	r24, 0x1C7F	; 0x801c7f <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   111fe:	88 23       	and	r24, r24
   11200:	09 f4       	brne	.+2      	; 0x11204 <gpib_write_byte+0x232>
   11202:	20 cf       	rjmp	.-448    	; 0x11044 <gpib_write_byte+0x72>
   11204:	2e 85       	ldd	r18, Y+14	; 0x0e
   11206:	3f 85       	ldd	r19, Y+15	; 0x0f
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   11208:	30 64       	ori	r19, 0x40	; 64
   1120a:	3f 87       	std	Y+15, r19	; 0x0f
   1120c:	2e 87       	std	Y+14, r18	; 0x0e
   1120e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11212:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11216:	85 70       	andi	r24, 0x05	; 5
                        printf("<BUS waiting for DAV==1>\n");
   11218:	99 27       	eor	r25, r25
   1121a:	89 2b       	or	r24, r25
   1121c:	91 f1       	breq	.+100    	; 0x11282 <gpib_write_byte+0x2b0>
   1121e:	ed b7       	in	r30, 0x3d	; 61
   11220:	fe b7       	in	r31, 0x3e	; 62
   11222:	c1 82       	std	Z+1, r12	; 0x01
   11224:	d2 82       	std	Z+2, r13	; 0x02
   11226:	e3 82       	std	Z+3, r14	; 0x03
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
#if SDEBUG
                if(debuglevel & (1+4))
   11228:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1122c:	2a c0       	rjmp	.+84     	; 0x11282 <gpib_write_byte+0x2b0>
   1122e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11232:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11236:	85 70       	andi	r24, 0x05	; 5
                    printf("<NRFD=%d,NDAV=%d>\n", GPIB_PIN_TST(NRFD),GPIB_PIN_TST(NDAC));
   11238:	99 27       	eor	r25, r25
   1123a:	89 2b       	or	r24, r25
   1123c:	b1 f0       	breq	.+44     	; 0x1126a <gpib_write_byte+0x298>
   1123e:	89 b1       	in	r24, 0x09	; 9
   11240:	99 b1       	in	r25, 0x09	; 9
   11242:	93 fb       	bst	r25, 3
   11244:	99 27       	eor	r25, r25
   11246:	90 f9       	bld	r25, 0
   11248:	ed b7       	in	r30, 0x3d	; 61
   1124a:	fe b7       	in	r31, 0x3e	; 62
   1124c:	96 83       	std	Z+6, r25	; 0x06
   1124e:	17 82       	std	Z+7, r1	; 0x07
   11250:	82 fb       	bst	r24, 2
   11252:	88 27       	eor	r24, r24
   11254:	80 f9       	bld	r24, 0
   11256:	84 83       	std	Z+4, r24	; 0x04
   11258:	15 82       	std	Z+5, r1	; 0x05
   1125a:	86 e3       	ldi	r24, 0x36	; 54
   1125c:	9f e0       	ldi	r25, 0x0F	; 15
   1125e:	a0 e0       	ldi	r26, 0x00	; 0
   11260:	81 83       	std	Z+1, r24	; 0x01
#endif
// Free BUS, BUSY on error
				gpib_bus_read_init(1);		
   11262:	92 83       	std	Z+2, r25	; 0x02
   11264:	a3 83       	std	Z+3, r26	; 0x03
   11266:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
                tx_state = GPIB_TX_DONE;
                break;
   1126a:	81 e0       	ldi	r24, 0x01	; 1
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
   1126c:	90 e0       	ldi	r25, 0x00	; 0
   1126e:	59 dd       	rcall	.-1358   	; 0x10d22 <gpib_bus_read_init>
   11270:	0a c0       	rjmp	.+20     	; 0x11286 <gpib_write_byte+0x2b4>
   11272:	1a 30       	cpi	r17, 0x0A	; 10

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   11274:	09 f0       	breq	.+2      	; 0x11278 <gpib_write_byte+0x2a6>
   11276:	e6 ce       	rjmp	.-564    	; 0x11044 <gpib_write_byte+0x72>
			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
   11278:	06 c0       	rjmp	.+12     	; 0x11286 <gpib_write_byte+0x2b4>
   1127a:	16 e0       	ldi	r17, 0x06	; 6
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   1127c:	e3 ce       	rjmp	.-570    	; 0x11044 <gpib_write_byte+0x72>
   1127e:	18 e0       	ldi	r17, 0x08	; 8
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   11280:	e1 ce       	rjmp	.-574    	; 0x11044 <gpib_write_byte+0x72>
   11282:	19 e0       	ldi	r17, 0x09	; 9
   11284:	df ce       	rjmp	.-578    	; 0x11044 <gpib_write_byte+0x72>
   11286:	8e 85       	ldd	r24, Y+14	; 0x0e
   11288:	9f 85       	ldd	r25, Y+15	; 0x0f
   1128a:	2f 96       	adiw	r28, 0x0f	; 15
   1128c:	0f b6       	in	r0, 0x3f	; 63
   1128e:	f8 94       	cli
   11290:	de bf       	out	0x3e, r29	; 62
   11292:	0f be       	out	0x3f, r0	; 63
   11294:	cd bf       	out	0x3d, r28	; 61
   11296:	df 91       	pop	r29
   11298:	cf 91       	pop	r28
   1129a:	1f 91       	pop	r17
   1129c:	ef 90       	pop	r14
   1129e:	df 90       	pop	r13
   112a0:	cf 90       	pop	r12
   112a2:	8f 90       	pop	r8
   112a4:	7f 90       	pop	r7
   112a6:	6f 90       	pop	r6
   112a8:	4f 90       	pop	r4
   112aa:	3f 90       	pop	r3
   112ac:	2f 90       	pop	r2
   112ae:	08 95       	ret

000112b0 <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   112b0:	cf 93       	push	r28
   112b2:	df 93       	push	r29
   112b4:	ec 01       	movw	r28, r24
    if(fo == NULL)
   112b6:	89 2b       	or	r24, r25
   112b8:	21 f4       	brne	.+8      	; 0x112c2 <gpib_decode_header+0x12>
        fo = stdout;
   112ba:	c0 91 59 1c 	lds	r28, 0x1C59	; 0x801c59 <__iob+0x2>
   112be:	d0 91 5a 1c 	lds	r29, 0x1C5A	; 0x801c5a <__iob+0x3>
        
    fprintf(fo,"===========================================\n");
   112c2:	be 01       	movw	r22, r28
   112c4:	81 e2       	ldi	r24, 0x21	; 33
   112c6:	9b e0       	ldi	r25, 0x0B	; 11
   112c8:	0e 94 7e 77 	call	0xeefc	; 0xeefc <fputs>
    fprintf(fo,"GPIB bus state\n");
   112cc:	be 01       	movw	r22, r28
   112ce:	8e e4       	ldi	r24, 0x4E	; 78
   112d0:	9b e0       	ldi	r25, 0x0B	; 11
   112d2:	0e 94 7e 77 	call	0xeefc	; 0xeefc <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   112d6:	be 01       	movw	r22, r28
   112d8:	8e e5       	ldi	r24, 0x5E	; 94
   112da:	9b e0       	ldi	r25, 0x0B	; 11
   112dc:	0e 94 7e 77 	call	0xeefc	; 0xeefc <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   112e0:	be 01       	movw	r22, r28
   112e2:	82 e7       	ldi	r24, 0x72	; 114
   112e4:	9b e0       	ldi	r25, 0x0B	; 11
   112e6:	0e 94 7e 77 	call	0xeefc	; 0xeefc <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   112ea:	be 01       	movw	r22, r28
   112ec:	85 e9       	ldi	r24, 0x95	; 149
   112ee:	9b e0       	ldi	r25, 0x0B	; 11
   112f0:	0e 94 7e 77 	call	0xeefc	; 0xeefc <fputs>
    fprintf(fo,"     A = ATN\n");
   112f4:	be 01       	movw	r22, r28
   112f6:	8f eb       	ldi	r24, 0xBF	; 191
   112f8:	9b e0       	ldi	r25, 0x0B	; 11
   112fa:	0e 94 7e 77 	call	0xeefc	; 0xeefc <fputs>
    fprintf(fo,"      E = EOI\n");
   112fe:	be 01       	movw	r22, r28
   11300:	8d ec       	ldi	r24, 0xCD	; 205
   11302:	9b e0       	ldi	r25, 0x0B	; 11
   11304:	0e 94 7e 77 	call	0xeefc	; 0xeefc <fputs>
    fprintf(fo,"       S = SRQ\n");
   11308:	be 01       	movw	r22, r28
   1130a:	8c ed       	ldi	r24, 0xDC	; 220
   1130c:	9b e0       	ldi	r25, 0x0B	; 11
   1130e:	0e 94 7e 77 	call	0xeefc	; 0xeefc <fputs>
    fprintf(fo,"        R = REN\n");
   11312:	be 01       	movw	r22, r28
   11314:	8c ee       	ldi	r24, 0xEC	; 236
   11316:	9b e0       	ldi	r25, 0x0B	; 11
   11318:	0e 94 7e 77 	call	0xeefc	; 0xeefc <fputs>
    fprintf(fo,"         I = IFC\n");
   1131c:	be 01       	movw	r22, r28
   1131e:	8d ef       	ldi	r24, 0xFD	; 253
   11320:	9b e0       	ldi	r25, 0x0B	; 11
   11322:	0e 94 7e 77 	call	0xeefc	; 0xeefc <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   11326:	be 01       	movw	r22, r28
   11328:	8f e0       	ldi	r24, 0x0F	; 15
   1132a:	9c e0       	ldi	r25, 0x0C	; 12
   1132c:	0e 94 7e 77 	call	0xeefc	; 0xeefc <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   11330:	be 01       	movw	r22, r28
   11332:	81 e3       	ldi	r24, 0x31	; 49
   11334:	9c e0       	ldi	r25, 0x0C	; 12
   11336:	0e 94 7e 77 	call	0xeefc	; 0xeefc <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   1133a:	be 01       	movw	r22, r28
   1133c:	89 e4       	ldi	r24, 0x49	; 73
   1133e:	9c e0       	ldi	r25, 0x0C	; 12
   11340:	0e 94 7e 77 	call	0xeefc	; 0xeefc <fputs>
    fprintf(fo,"              GPIB commands\n");
   11344:	be 01       	movw	r22, r28
   11346:	84 e6       	ldi	r24, 0x64	; 100
   11348:	9c e0       	ldi	r25, 0x0C	; 12
   1134a:	0e 94 7e 77 	call	0xeefc	; 0xeefc <fputs>
}
   1134e:	df 91       	pop	r29
   11350:	cf 91       	pop	r28
   11352:	08 95       	ret

00011354 <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   11354:	a9 e8       	ldi	r26, 0x89	; 137
   11356:	b0 e0       	ldi	r27, 0x00	; 0
   11358:	e0 eb       	ldi	r30, 0xB0	; 176
   1135a:	f9 e8       	ldi	r31, 0x89	; 137
   1135c:	0c 94 8c e4 	jmp	0x1c918	; 0x1c918 <__prologue_saves__+0xc>
   11360:	8c 01       	movw	r16, r24
   11362:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   11364:	1a 86       	std	Y+10, r1	; 0x0a
   11366:	4c 01       	movw	r8, r24
   11368:	88 24       	eor	r8, r8
   1136a:	44 e0       	ldi	r20, 0x04	; 4
   1136c:	94 22       	and	r9, r20
   1136e:	ce 01       	movw	r24, r28
   11370:	0a 96       	adiw	r24, 0x0a	; 10
   11372:	7c 01       	movw	r14, r24

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   11374:	62 30       	cpi	r22, 0x02	; 2
   11376:	71 05       	cpc	r23, r1
   11378:	e8 f4       	brcc	.+58     	; 0x113b4 <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   1137a:	81 14       	cp	r8, r1
   1137c:	91 04       	cpc	r9, r1
   1137e:	29 f4       	brne	.+10     	; 0x1138a <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   11380:	80 2f       	mov	r24, r16

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   11382:	90 ee       	ldi	r25, 0xE0	; 224
   11384:	90 0f       	add	r25, r16
   11386:	9f 35       	cpi	r25, 0x5F	; 95
   11388:	08 f0       	brcs	.+2      	; 0x1138c <gpib_trace_display+0x38>
    str[0] = 0;

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
   1138a:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   1138c:	90 e0       	ldi	r25, 0x00	; 0
   1138e:	ed b7       	in	r30, 0x3d	; 61
   11390:	fe b7       	in	r31, 0x3e	; 62
   11392:	91 87       	std	Z+9, r25	; 0x09
   11394:	80 87       	std	Z+8, r24	; 0x08
   11396:	c8 01       	movw	r24, r16
   11398:	99 27       	eor	r25, r25
   1139a:	97 83       	std	Z+7, r25	; 0x07
   1139c:	86 83       	std	Z+6, r24	; 0x06
   1139e:	8d e2       	ldi	r24, 0x2D	; 45
   113a0:	9f e0       	ldi	r25, 0x0F	; 15
   113a2:	a0 e0       	ldi	r26, 0x00	; 0
   113a4:	83 83       	std	Z+3, r24	; 0x03
   113a6:	94 83       	std	Z+4, r25	; 0x04
   113a8:	a5 83       	std	Z+5, r26	; 0x05
   113aa:	f2 82       	std	Z+2, r15	; 0x02
   113ac:	e1 82       	std	Z+1, r14	; 0x01
   113ae:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <sprintf_P>
   113b2:	0c c0       	rjmp	.+24     	; 0x113cc <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   113b4:	87 e2       	ldi	r24, 0x27	; 39
   113b6:	9f e0       	ldi	r25, 0x0F	; 15
   113b8:	a0 e0       	ldi	r26, 0x00	; 0
   113ba:	ed b7       	in	r30, 0x3d	; 61
   113bc:	fe b7       	in	r31, 0x3e	; 62
   113be:	83 83       	std	Z+3, r24	; 0x03
   113c0:	94 83       	std	Z+4, r25	; 0x04
   113c2:	a5 83       	std	Z+5, r26	; 0x05
   113c4:	f2 82       	std	Z+2, r15	; 0x02
   113c6:	e1 82       	std	Z+1, r14	; 0x01
   113c8:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <sprintf_P>
    }

    tmp = str + strlen(str);
   113cc:	f7 01       	movw	r30, r14
   113ce:	01 90       	ld	r0, Z+
   113d0:	00 20       	and	r0, r0
   113d2:	e9 f7       	brne	.-6      	; 0x113ce <gpib_trace_display+0x7a>
   113d4:	31 97       	sbiw	r30, 0x01	; 1
   113d6:	cf 01       	movw	r24, r30
   113d8:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   113da:	81 14       	cp	r8, r1
   113dc:	91 04       	cpc	r9, r1
   113de:	11 f0       	breq	.+4      	; 0x113e4 <gpib_trace_display+0x90>
        *tmp++ = 'A';
   113e0:	21 e4       	ldi	r18, 0x41	; 65
   113e2:	01 c0       	rjmp	.+2      	; 0x113e6 <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   113e4:	2d e2       	ldi	r18, 0x2D	; 45
   113e6:	20 83       	st	Z, r18
   113e8:	dc 01       	movw	r26, r24
   113ea:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   113ec:	10 ff       	sbrs	r17, 0
   113ee:	02 c0       	rjmp	.+4      	; 0x113f4 <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   113f0:	25 e4       	ldi	r18, 0x45	; 69
   113f2:	01 c0       	rjmp	.+2      	; 0x113f6 <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   113f4:	2d e2       	ldi	r18, 0x2D	; 45
   113f6:	fc 01       	movw	r30, r24
   113f8:	20 83       	st	Z, r18
   113fa:	fd 01       	movw	r30, r26
   113fc:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   113fe:	11 ff       	sbrs	r17, 1
   11400:	02 c0       	rjmp	.+4      	; 0x11406 <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   11402:	83 e5       	ldi	r24, 0x53	; 83
   11404:	01 c0       	rjmp	.+2      	; 0x11408 <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   11406:	8d e2       	ldi	r24, 0x2D	; 45
   11408:	8c 93       	st	X, r24
   1140a:	df 01       	movw	r26, r30
   1140c:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   1140e:	13 ff       	sbrs	r17, 3
   11410:	02 c0       	rjmp	.+4      	; 0x11416 <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   11412:	82 e5       	ldi	r24, 0x52	; 82
   11414:	01 c0       	rjmp	.+2      	; 0x11418 <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   11416:	8d e2       	ldi	r24, 0x2D	; 45
   11418:	80 83       	st	Z, r24
   1141a:	fd 01       	movw	r30, r26
   1141c:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   1141e:	14 ff       	sbrs	r17, 4
   11420:	02 c0       	rjmp	.+4      	; 0x11426 <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   11422:	89 e4       	ldi	r24, 0x49	; 73
   11424:	01 c0       	rjmp	.+2      	; 0x11428 <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   11426:	8d e2       	ldi	r24, 0x2D	; 45
   11428:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   1142a:	a1 14       	cp	r10, r1
   1142c:	b1 04       	cpc	r11, r1
   1142e:	d1 f4       	brne	.+52     	; 0x11464 <gpib_trace_display+0x110>
   11430:	df 01       	movw	r26, r30
   11432:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   11434:	15 ff       	sbrs	r17, 5
   11436:	02 c0       	rjmp	.+4      	; 0x1143c <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   11438:	80 e5       	ldi	r24, 0x50	; 80
   1143a:	01 c0       	rjmp	.+2      	; 0x1143e <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   1143c:	8d e2       	ldi	r24, 0x2D	; 45
   1143e:	80 83       	st	Z, r24
   11440:	fd 01       	movw	r30, r26
   11442:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   11444:	16 ff       	sbrs	r17, 6
   11446:	02 c0       	rjmp	.+4      	; 0x1144c <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   11448:	84 e5       	ldi	r24, 0x54	; 84
   1144a:	01 c0       	rjmp	.+2      	; 0x1144e <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   1144c:	8d e2       	ldi	r24, 0x2D	; 45
   1144e:	8c 93       	st	X, r24
   11450:	cf 01       	movw	r24, r30
   11452:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   11454:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   11456:	17 ff       	sbrs	r17, 7
   11458:	02 c0       	rjmp	.+4      	; 0x1145e <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   1145a:	82 e4       	ldi	r24, 0x42	; 66
   1145c:	01 c0       	rjmp	.+2      	; 0x11460 <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   1145e:	8d e2       	ldi	r24, 0x2D	; 45
   11460:	80 83       	st	Z, r24
   11462:	08 c0       	rjmp	.+16     	; 0x11474 <gpib_trace_display+0x120>
    }
    else
    {
        // not used when tracing
        *tmp++ = '-';
   11464:	8d e2       	ldi	r24, 0x2D	; 45
   11466:	80 83       	st	Z, r24
        *tmp++ = '-';
   11468:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   1146a:	6f 01       	movw	r12, r30
   1146c:	43 e0       	ldi	r20, 0x03	; 3
   1146e:	c4 0e       	add	r12, r20
   11470:	d1 1c       	adc	r13, r1
   11472:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   11474:	f6 01       	movw	r30, r12
   11476:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   11478:	f1 e0       	ldi	r31, 0x01	; 1
   1147a:	af 1a       	sub	r10, r31
   1147c:	b1 08       	sbc	r11, r1
   1147e:	42 e0       	ldi	r20, 0x02	; 2
   11480:	a4 16       	cp	r10, r20
   11482:	b1 04       	cpc	r11, r1
   11484:	f0 f4       	brcc	.+60     	; 0x114c2 <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   11486:	15 ff       	sbrs	r17, 5
   11488:	03 c0       	rjmp	.+6      	; 0x11490 <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   1148a:	61 e8       	ldi	r22, 0x81	; 129
   1148c:	7c e0       	ldi	r23, 0x0C	; 12
   1148e:	02 c0       	rjmp	.+4      	; 0x11494 <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   11490:	65 e8       	ldi	r22, 0x85	; 133
   11492:	73 e0       	ldi	r23, 0x03	; 3
   11494:	c7 01       	movw	r24, r14
   11496:	0e 94 82 32 	call	0x6504	; 0x6504 <strcat>
        if(status & NRFD_FLAG)
   1149a:	16 ff       	sbrs	r17, 6
   1149c:	03 c0       	rjmp	.+6      	; 0x114a4 <gpib_trace_display+0x150>
            strcat(str," NRFD");
   1149e:	67 e8       	ldi	r22, 0x87	; 135
   114a0:	7c e0       	ldi	r23, 0x0C	; 12
   114a2:	02 c0       	rjmp	.+4      	; 0x114a8 <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   114a4:	65 e8       	ldi	r22, 0x85	; 133
   114a6:	73 e0       	ldi	r23, 0x03	; 3
   114a8:	c7 01       	movw	r24, r14
   114aa:	0e 94 82 32 	call	0x6504	; 0x6504 <strcat>
        if(status & NDAC_FLAG)
   114ae:	17 ff       	sbrs	r17, 7
   114b0:	03 c0       	rjmp	.+6      	; 0x114b8 <gpib_trace_display+0x164>
            strcat(str," NDAC");
   114b2:	6d e8       	ldi	r22, 0x8D	; 141
   114b4:	7c e0       	ldi	r23, 0x0C	; 12
   114b6:	02 c0       	rjmp	.+4      	; 0x114bc <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   114b8:	65 e8       	ldi	r22, 0x85	; 133
   114ba:	73 e0       	ldi	r23, 0x03	; 3
   114bc:	c7 01       	movw	r24, r14
   114be:	0e 94 82 32 	call	0x6504	; 0x6504 <strcat>
    }

    if( (status & ATN_FLAG) )
   114c2:	81 14       	cp	r8, r1
   114c4:	91 04       	cpc	r9, r1
   114c6:	09 f4       	brne	.+2      	; 0x114ca <gpib_trace_display+0x176>
   114c8:	5a c0       	rjmp	.+180    	; 0x1157e <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   114ca:	c8 01       	movw	r24, r16
   114cc:	8f 77       	andi	r24, 0x7F	; 127
   114ce:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   114d0:	9c 01       	movw	r18, r24
   114d2:	20 52       	subi	r18, 0x20	; 32
   114d4:	31 09       	sbc	r19, r1
   114d6:	2f 31       	cpi	r18, 0x1F	; 31
   114d8:	31 05       	cpc	r19, r1
   114da:	48 f4       	brcc	.+18     	; 0x114ee <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   114dc:	0f 71       	andi	r16, 0x1F	; 31
   114de:	11 27       	eor	r17, r17
   114e0:	ed b7       	in	r30, 0x3d	; 61
   114e2:	fe b7       	in	r31, 0x3e	; 62
   114e4:	17 83       	std	Z+7, r17	; 0x07
   114e6:	06 83       	std	Z+6, r16	; 0x06
   114e8:	8c e1       	ldi	r24, 0x1C	; 28
   114ea:	9f e0       	ldi	r25, 0x0F	; 15
   114ec:	0e c0       	rjmp	.+28     	; 0x1150a <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   114ee:	9c 01       	movw	r18, r24
   114f0:	20 54       	subi	r18, 0x40	; 64
   114f2:	31 09       	sbc	r19, r1
   114f4:	2f 30       	cpi	r18, 0x0F	; 15
   114f6:	31 05       	cpc	r19, r1
   114f8:	88 f4       	brcc	.+34     	; 0x1151c <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   114fa:	0f 71       	andi	r16, 0x1F	; 31
   114fc:	11 27       	eor	r17, r17
   114fe:	ed b7       	in	r30, 0x3d	; 61
   11500:	fe b7       	in	r31, 0x3e	; 62
   11502:	17 83       	std	Z+7, r17	; 0x07
   11504:	06 83       	std	Z+6, r16	; 0x06
   11506:	81 e1       	ldi	r24, 0x11	; 17
   11508:	9f e0       	ldi	r25, 0x0F	; 15
   1150a:	a0 e0       	ldi	r26, 0x00	; 0
   1150c:	83 83       	std	Z+3, r24	; 0x03
   1150e:	94 83       	std	Z+4, r25	; 0x04
   11510:	a5 83       	std	Z+5, r26	; 0x05
   11512:	d2 82       	std	Z+2, r13	; 0x02
   11514:	c1 82       	std	Z+1, r12	; 0x01
   11516:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <sprintf_P>
   1151a:	31 c0       	rjmp	.+98     	; 0x1157e <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   1151c:	9c 01       	movw	r18, r24
   1151e:	20 56       	subi	r18, 0x60	; 96
   11520:	31 09       	sbc	r19, r1
   11522:	20 31       	cpi	r18, 0x10	; 16
   11524:	31 05       	cpc	r19, r1
   11526:	28 f0       	brcs	.+10     	; 0x11532 <gpib_trace_display+0x1de>
   11528:	ef e8       	ldi	r30, 0x8F	; 143
   1152a:	f1 e0       	ldi	r31, 0x01	; 1
   1152c:	00 e0       	ldi	r16, 0x00	; 0
   1152e:	10 e0       	ldi	r17, 0x00	; 0
   11530:	0b c0       	rjmp	.+22     	; 0x11548 <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   11532:	0f 71       	andi	r16, 0x1F	; 31
   11534:	11 27       	eor	r17, r17
   11536:	ed b7       	in	r30, 0x3d	; 61
   11538:	fe b7       	in	r31, 0x3e	; 62
   1153a:	17 83       	std	Z+7, r17	; 0x07
   1153c:	06 83       	std	Z+6, r16	; 0x06
   1153e:	86 e0       	ldi	r24, 0x06	; 6
   11540:	9f e0       	ldi	r25, 0x0F	; 15
   11542:	e3 cf       	rjmp	.-58     	; 0x1150a <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   11544:	0f 5f       	subi	r16, 0xFF	; 255
   11546:	1f 4f       	sbci	r17, 0xFF	; 255
   11548:	20 81       	ld	r18, Z
   1154a:	31 81       	ldd	r19, Z+1	; 0x01
   1154c:	2f 3f       	cpi	r18, 0xFF	; 255
   1154e:	4f ef       	ldi	r20, 0xFF	; 255
   11550:	34 07       	cpc	r19, r20
   11552:	a9 f0       	breq	.+42     	; 0x1157e <gpib_trace_display+0x22a>
   11554:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   11556:	82 17       	cp	r24, r18
   11558:	93 07       	cpc	r25, r19
   1155a:	a1 f7       	brne	.-24     	; 0x11544 <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   1155c:	69 e8       	ldi	r22, 0x89	; 137
   1155e:	73 e0       	ldi	r23, 0x03	; 3
   11560:	c6 01       	movw	r24, r12
   11562:	0e 94 82 32 	call	0x6504	; 0x6504 <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   11566:	f8 01       	movw	r30, r16
   11568:	ee 0f       	add	r30, r30
   1156a:	ff 1f       	adc	r31, r31
   1156c:	ee 0f       	add	r30, r30
   1156e:	ff 1f       	adc	r31, r31
   11570:	e1 57       	subi	r30, 0x71	; 113
   11572:	fe 4f       	sbci	r31, 0xFE	; 254
   11574:	62 81       	ldd	r22, Z+2	; 0x02
   11576:	73 81       	ldd	r23, Z+3	; 0x03
   11578:	c6 01       	movw	r24, r12
   1157a:	0e 94 82 32 	call	0x6504	; 0x6504 <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   1157e:	20 91 fd 18 	lds	r18, 0x18FD	; 0x8018fd <gpib_log_fp>
   11582:	30 91 fe 18 	lds	r19, 0x18FE	; 0x8018fe <gpib_log_fp+0x1>
   11586:	80 91 59 1c 	lds	r24, 0x1C59	; 0x801c59 <__iob+0x2>
   1158a:	90 91 5a 1c 	lds	r25, 0x1C5A	; 0x801c5a <__iob+0x3>
   1158e:	23 2b       	or	r18, r19
   11590:	21 f4       	brne	.+8      	; 0x1159a <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   11592:	90 93 fe 18 	sts	0x18FE, r25	; 0x8018fe <gpib_log_fp+0x1>
   11596:	80 93 fd 18 	sts	0x18FD, r24	; 0x8018fd <gpib_log_fp>

    // Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   1159a:	20 91 fd 18 	lds	r18, 0x18FD	; 0x8018fd <gpib_log_fp>
   1159e:	30 91 fe 18 	lds	r19, 0x18FE	; 0x8018fe <gpib_log_fp+0x1>
   115a2:	82 17       	cp	r24, r18
   115a4:	93 07       	cpc	r25, r19
   115a6:	19 f0       	breq	.+6      	; 0x115ae <gpib_trace_display+0x25a>
        puts(str);
   115a8:	c7 01       	movw	r24, r14
   115aa:	0e 94 96 77 	call	0xef2c	; 0xef2c <puts>

    // Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   115ae:	ed b7       	in	r30, 0x3d	; 61
   115b0:	fe b7       	in	r31, 0x3e	; 62
   115b2:	f6 82       	std	Z+6, r15	; 0x06
   115b4:	e5 82       	std	Z+5, r14	; 0x05
   115b6:	83 e9       	ldi	r24, 0x93	; 147
   115b8:	9c e0       	ldi	r25, 0x0C	; 12
   115ba:	94 83       	std	Z+4, r25	; 0x04
   115bc:	83 83       	std	Z+3, r24	; 0x03
   115be:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <gpib_log_fp>
   115c2:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <gpib_log_fp+0x1>
   115c6:	92 83       	std	Z+2, r25	; 0x02
   115c8:	81 83       	std	Z+1, r24	; 0x01
   115ca:	0e 94 3e 7f 	call	0xfe7c	; 0xfe7c <fprintf>
}
   115ce:	c7 57       	subi	r28, 0x77	; 119
   115d0:	df 4f       	sbci	r29, 0xFF	; 255
   115d2:	ec e0       	ldi	r30, 0x0C	; 12
   115d4:	0c 94 a8 e4 	jmp	0x1c950	; 0x1c950 <__epilogue_restores__+0xc>

000115d8 <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   115d8:	af 92       	push	r10
   115da:	bf 92       	push	r11
   115dc:	cf 92       	push	r12
   115de:	df 92       	push	r13
   115e0:	ff 92       	push	r15
   115e2:	0f 93       	push	r16
   115e4:	1f 93       	push	r17
   115e6:	cf 93       	push	r28
   115e8:	df 93       	push	r29

    ch = 0;
    control_last = 0;

    // If we have an unread state it has already been traced!
    if(gpib_unread_f)
   115ea:	20 91 fc 18 	lds	r18, 0x18FC	; 0x8018fc <gpib_unread_f>
   115ee:	22 23       	and	r18, r18
   115f0:	39 f0       	breq	.+14     	; 0x11600 <gpib_read_byte+0x28>
    {
        gpib_unread_f = 0;
   115f2:	10 92 fc 18 	sts	0x18FC, r1	; 0x8018fc <gpib_unread_f>
        return(gpib_unread_data);
   115f6:	80 91 8a 1e 	lds	r24, 0x1E8A	; 0x801e8a <gpib_unread_data>
   115fa:	90 91 8b 1e 	lds	r25, 0x1E8B	; 0x801e8b <gpib_unread_data+0x1>
   115fe:	b8 c0       	rjmp	.+368    	; 0x11770 <gpib_read_byte+0x198>
   11600:	6c 01       	movw	r12, r24
    }

	gpib_bus_read_init(1); // Busy until we are ready
   11602:	81 e0       	ldi	r24, 0x01	; 1
   11604:	90 e0       	ldi	r25, 0x00	; 0
   11606:	8d db       	rcall	.-2278   	; 0x10d22 <gpib_bus_read_init>


///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
    if(trace)
   11608:	c1 14       	cp	r12, r1
   1160a:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   1160c:	51 f0       	breq	.+20     	; 0x11622 <gpib_read_byte+0x4a>
   1160e:	c5 dc       	rcall	.-1654   	; 0x10f9a <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   11610:	8c 01       	movw	r16, r24
   11612:	d3 dc       	rcall	.-1626   	; 0x10fba <gpib_handshake_pin_read>
   11614:	08 2b       	or	r16, r24
        gpib_trace_display(control_last, TRACE_BUS);
   11616:	19 2b       	or	r17, r25
   11618:	62 e0       	ldi	r22, 0x02	; 2
   1161a:	70 e0       	ldi	r23, 0x00	; 0
   1161c:	c8 01       	movw	r24, r16
   1161e:	9a de       	rcall	.-716    	; 0x11354 <gpib_trace_display>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   11620:	02 c0       	rjmp	.+4      	; 0x11626 <gpib_read_byte+0x4e>
   11622:	00 e0       	ldi	r16, 0x00	; 0
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   11624:	10 e0       	ldi	r17, 0x00	; 0
   11626:	f1 2c       	mov	r15, r1
   11628:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(uart_keyhit(0))
   1162a:	d0 e0       	ldi	r29, 0x00	; 0
   1162c:	80 e0       	ldi	r24, 0x00	; 0
   1162e:	0e 94 2d 2c 	call	0x585a	; 0x585a <uart_keyhit>
   11632:	89 2b       	or	r24, r25
		if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   11634:	09 f0       	breq	.+2      	; 0x11638 <gpib_read_byte+0x60>
   11636:	78 c0       	rjmp	.+240    	; 0x11728 <gpib_read_byte+0x150>
        {
            ch |= IFC_FLAG;
   11638:	4c 99       	sbic	0x09, 4	; 9
			gpib_bus_init();
   1163a:	03 c0       	rjmp	.+6      	; 0x11642 <gpib_read_byte+0x6a>
   1163c:	d0 61       	ori	r29, 0x10	; 16
   1163e:	94 db       	rcall	.-2264   	; 0x10d68 <gpib_bus_init>
            break;
        }


        switch(rx_state)
   11640:	73 c0       	rjmp	.+230    	; 0x11728 <gpib_read_byte+0x150>
   11642:	8f 2d       	mov	r24, r15
   11644:	90 e0       	ldi	r25, 0x00	; 0
   11646:	89 30       	cpi	r24, 0x09	; 9
   11648:	91 05       	cpc	r25, r1
   1164a:	08 f0       	brcs	.+2      	; 0x1164e <gpib_read_byte+0x76>
   1164c:	51 c0       	rjmp	.+162    	; 0x116f0 <gpib_read_byte+0x118>
   1164e:	fc 01       	movw	r30, r24
   11650:	e9 53       	subi	r30, 0x39	; 57
   11652:	ff 4f       	sbci	r31, 0xFF	; 255
   11654:	0c 94 42 e4 	jmp	0x1c884	; 0x1c884 <__tablejump2__>
   11658:	52 98       	cbi	0x0a, 2	; 10
   1165a:	8d e0       	ldi	r24, 0x0D	; 13
   1165c:	8a 95       	dec	r24
   1165e:	f1 f7       	brne	.-4      	; 0x1165c <gpib_read_byte+0x84>
        {
            case GPIB_RX_START:
                ///@brief Signal that we are ready to ready
                GPIB_PIN_FLOAT_UP(NRFD);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   11660:	00 00       	nop
   11662:	ff 24       	eor	r15, r15
   11664:	f3 94       	inc	r15
                break;

            case GPIB_RX_WAIT_FOR_DAV_LOW:
                ///@brief Wait for Ready acknowledge
                if ( GPIB_PIN_TST(DAV) == 0 )
   11666:	7f c0       	rjmp	.+254    	; 0x11766 <gpib_read_byte+0x18e>
                    rx_state = GPIB_RX_DAV_IS_LOW;
   11668:	19 99       	sbic	0x03, 1	; 3
                break;

// Accept Data
            case GPIB_RX_DAV_IS_LOW:
                GPIB_IO_LOW(NRFD);                // BUSY
   1166a:	7d c0       	rjmp	.+250    	; 0x11766 <gpib_read_byte+0x18e>

                ///@brief gpib_bus_read strips command parity if ATN is low at read time
                bus = gpib_bus_read();
   1166c:	62 e0       	ldi	r22, 0x02	; 2
   1166e:	f6 2e       	mov	r15, r22
   11670:	7a c0       	rjmp	.+244    	; 0x11766 <gpib_read_byte+0x18e>
   11672:	5a 98       	cbi	0x0b, 2	; 11
                ch |= bus;
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                control_last = gpib_control_pin_read();
   11674:	52 9a       	sbi	0x0a, 2	; 10
   11676:	8b dc       	rcall	.-1770   	; 0x10f8e <gpib_bus_read>
   11678:	a8 2e       	mov	r10, r24
   1167a:	b1 2c       	mov	r11, r1
                ch |= control_last;
   1167c:	8e dc       	rcall	.-1764   	; 0x10f9a <gpib_control_pin_read>
   1167e:	8c 01       	movw	r16, r24

                if(trace)
   11680:	c8 2b       	or	r28, r24
   11682:	d9 2b       	or	r29, r25
   11684:	ca 29       	or	r28, r10
                {
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                    control_last |= gpib_handshake_pin_read();
   11686:	db 29       	or	r29, r11
   11688:	c1 14       	cp	r12, r1
   1168a:	d1 04       	cpc	r13, r1
                    gpib_trace_display(bus | control_last, TRACE_READ);
   1168c:	49 f0       	breq	.+18     	; 0x116a0 <gpib_read_byte+0xc8>
   1168e:	95 dc       	rcall	.-1750   	; 0x10fba <gpib_handshake_pin_read>
   11690:	08 2b       	or	r16, r24
   11692:	19 2b       	or	r17, r25
   11694:	61 e0       	ldi	r22, 0x01	; 1
   11696:	70 e0       	ldi	r23, 0x00	; 0
   11698:	c5 01       	movw	r24, r10
   1169a:	80 2b       	or	r24, r16
   1169c:	91 2b       	or	r25, r17
   1169e:	5a de       	rcall	.-844    	; 0x11354 <gpib_trace_display>
                }

                GPIB_PIN_FLOAT_UP(NDAC);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                gpib_timeout_set(HTIMEOUT);
   116a0:	53 98       	cbi	0x0a, 3	; 10
   116a2:	8d e0       	ldi	r24, 0x0D	; 13
   116a4:	8a 95       	dec	r24
   116a6:	f1 f7       	brne	.-4      	; 0x116a4 <gpib_read_byte+0xcc>
   116a8:	00 00       	nop
#if BOARD == 2
				/// FIXME do we want to keep the next state ?
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   116aa:	64 ef       	ldi	r22, 0xF4	; 244
   116ac:	71 e0       	ldi	r23, 0x01	; 1
   116ae:	80 e0       	ldi	r24, 0x00	; 0
/// FIXME We clould add a test for read/write state ??
///@brief V2 boards we can't - not a big deal as the DAV test works anyway
            ///@brief Wait for NDAC float HI

            case GPIB_RX_WAIT_FOR_NDAC_HI:
                if (GPIB_PIN_TST(NDAC) == 1)
   116b0:	90 e0       	ldi	r25, 0x00	; 0
   116b2:	2d db       	rcall	.-2470   	; 0x10d0e <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   116b4:	54 e0       	ldi	r21, 0x04	; 4
   116b6:	f5 2e       	mov	r15, r21
   116b8:	56 c0       	rjmp	.+172    	; 0x11766 <gpib_read_byte+0x18e>
   116ba:	4b 9b       	sbis	0x09, 3	; 9
   116bc:	0c c0       	rjmp	.+24     	; 0x116d6 <gpib_read_byte+0xfe>
   116be:	64 ef       	ldi	r22, 0xF4	; 244
                    rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   116c0:	71 e0       	ldi	r23, 0x01	; 1
   116c2:	80 e0       	ldi	r24, 0x00	; 0
   116c4:	90 e0       	ldi	r25, 0x00	; 0
                }
                break;

            ///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   116c6:	23 db       	rcall	.-2490   	; 0x10d0e <gpib_timeout_set>
   116c8:	44 e0       	ldi	r20, 0x04	; 4
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
   116ca:	f4 2e       	mov	r15, r20
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   116cc:	04 c0       	rjmp	.+8      	; 0x116d6 <gpib_read_byte+0xfe>
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
				}
                if (gpib_timeout_test())
   116ce:	19 9b       	sbis	0x03, 1	; 3
   116d0:	02 c0       	rjmp	.+4      	; 0x116d6 <gpib_read_byte+0xfe>
   116d2:	35 e0       	ldi	r19, 0x05	; 5
                {
                    ch |= TIMEOUT_FLAG;
   116d4:	f3 2e       	mov	r15, r19
                    rx_state = GPIB_RX_ERROR;
   116d6:	80 91 7f 1c 	lds	r24, 0x1C7F	; 0x801c7f <gpib_timer+0x8>
   116da:	88 23       	and	r24, r24
            case GPIB_RX_ERROR:
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
   116dc:	09 f4       	brne	.+2      	; 0x116e0 <gpib_read_byte+0x108>
   116de:	43 c0       	rjmp	.+134    	; 0x11766 <gpib_read_byte+0x18e>
   116e0:	d0 64       	ori	r29, 0x40	; 64
                break;
        }

        if(trace)
   116e2:	27 e0       	ldi	r18, 0x07	; 7
   116e4:	f2 2e       	mov	r15, r18
   116e6:	3f c0       	rjmp	.+126    	; 0x11766 <gpib_read_byte+0x18e>
   116e8:	81 e0       	ldi	r24, 0x01	; 1
   116ea:	90 e0       	ldi	r25, 0x00	; 0
   116ec:	1a db       	rcall	.-2508   	; 0x10d22 <gpib_bus_read_init>
   116ee:	04 c0       	rjmp	.+8      	; 0x116f8 <gpib_read_byte+0x120>
   116f0:	c1 14       	cp	r12, r1
        {
			/// V2 boards can not read all control and handshake bits at once
			/// FIXME We could add a test for read/write state ??
			/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   116f2:	d1 04       	cpc	r13, r1
   116f4:	99 f0       	breq	.+38     	; 0x1171c <gpib_read_byte+0x144>
   116f6:	05 c0       	rjmp	.+10     	; 0x11702 <gpib_read_byte+0x12a>
            control |= gpib_handshake_pin_read();
   116f8:	c1 14       	cp	r12, r1
   116fa:	d1 04       	cpc	r13, r1
   116fc:	a9 f0       	breq	.+42     	; 0x11728 <gpib_read_byte+0x150>
   116fe:	98 e0       	ldi	r25, 0x08	; 8
            if(control_last != control)
   11700:	f9 2e       	mov	r15, r25
   11702:	4b dc       	rcall	.-1898   	; 0x10f9a <gpib_control_pin_read>
   11704:	5c 01       	movw	r10, r24
            {
                gpib_trace_display(control, TRACE_BUS);
   11706:	59 dc       	rcall	.-1870   	; 0x10fba <gpib_handshake_pin_read>
   11708:	a8 2a       	or	r10, r24
   1170a:	b9 2a       	or	r11, r25
   1170c:	a0 16       	cp	r10, r16
   1170e:	b1 06       	cpc	r11, r17
   11710:	31 f0       	breq	.+12     	; 0x1171e <gpib_read_byte+0x146>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   11712:	62 e0       	ldi	r22, 0x02	; 2
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   11714:	70 e0       	ldi	r23, 0x00	; 0
   11716:	c5 01       	movw	r24, r10
   11718:	1d de       	rcall	.-966    	; 0x11354 <gpib_trace_display>
   1171a:	01 c0       	rjmp	.+2      	; 0x1171e <gpib_read_byte+0x146>
   1171c:	58 01       	movw	r10, r16
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   1171e:	88 e0       	ldi	r24, 0x08	; 8
   11720:	f8 16       	cp	r15, r24
   11722:	11 f0       	breq	.+4      	; 0x11728 <gpib_read_byte+0x150>
   11724:	85 01       	movw	r16, r10
   11726:	82 cf       	rjmp	.-252    	; 0x1162c <gpib_read_byte+0x54>
   11728:	80 91 84 1e 	lds	r24, 0x1E84	; 0x801e84 <current>
   1172c:	90 91 85 1e 	lds	r25, 0x1E85	; 0x801e85 <current+0x1>

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   11730:	90 93 81 1c 	sts	0x1C81, r25	; 0x801c81 <lastcmd+0x1>
   11734:	80 93 80 1c 	sts	0x1C80, r24	; 0x801c80 <lastcmd>
   11738:	ce 01       	movw	r24, r28
   1173a:	88 27       	eor	r24, r24
        current = 0;
   1173c:	90 7d       	andi	r25, 0xD0	; 208
   1173e:	89 2b       	or	r24, r25
   11740:	11 f4       	brne	.+4      	; 0x11746 <gpib_read_byte+0x16e>
   11742:	d2 fd       	sbrc	r29, 2
   11744:	05 c0       	rjmp	.+10     	; 0x11750 <gpib_read_byte+0x178>
    else
        current = ch & CMD_MASK;
   11746:	10 92 85 1e 	sts	0x1E85, r1	; 0x801e85 <current+0x1>
   1174a:	10 92 84 1e 	sts	0x1E84, r1	; 0x801e84 <current>
   1174e:	07 c0       	rjmp	.+14     	; 0x1175e <gpib_read_byte+0x186>
   11750:	ce 01       	movw	r24, r28
   11752:	8f 77       	andi	r24, 0x7F	; 127
   11754:	99 27       	eor	r25, r25
   11756:	90 93 85 1e 	sts	0x1E85, r25	; 0x801e85 <current+0x1>
                }
                break;

            ///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
                rx_state = GPIB_RX_FINISH;        // DONE
   1175a:	80 93 84 1e 	sts	0x1E84, r24	; 0x801e84 <current>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   1175e:	ce 01       	movw	r24, r28
   11760:	07 c0       	rjmp	.+14     	; 0x11770 <gpib_read_byte+0x198>
   11762:	86 e0       	ldi	r24, 0x06	; 6
   11764:	f8 2e       	mov	r15, r24
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   11766:	c1 14       	cp	r12, r1
   11768:	d1 04       	cpc	r13, r1
   1176a:	09 f4       	brne	.+2      	; 0x1176e <gpib_read_byte+0x196>
   1176c:	5f cf       	rjmp	.-322    	; 0x1162c <gpib_read_byte+0x54>
   1176e:	c9 cf       	rjmp	.-110    	; 0x11702 <gpib_read_byte+0x12a>
   11770:	df 91       	pop	r29
   11772:	cf 91       	pop	r28
   11774:	1f 91       	pop	r17
   11776:	0f 91       	pop	r16
   11778:	ff 90       	pop	r15
   1177a:	df 90       	pop	r13
   1177c:	cf 90       	pop	r12
   1177e:	bf 90       	pop	r11
   11780:	af 90       	pop	r10
   11782:	08 95       	ret

00011784 <gpib_decode>:
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   11784:	60 e0       	ldi	r22, 0x00	; 0
   11786:	70 e0       	ldi	r23, 0x00	; 0
   11788:	e5 cd       	rjmp	.-1078   	; 0x11354 <gpib_trace_display>
   1178a:	08 95       	ret

0001178c <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   1178c:	a7 e0       	ldi	r26, 0x07	; 7
   1178e:	b0 e0       	ldi	r27, 0x00	; 0
   11790:	ec ec       	ldi	r30, 0xCC	; 204
   11792:	fb e8       	ldi	r31, 0x8B	; 139
   11794:	0c 94 8e e4 	jmp	0x1c91c	; 0x1c91c <__prologue_saves__+0x10>
   11798:	5b 01       	movw	r10, r22
   1179a:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   1179c:	fa 01       	movw	r30, r20
   1179e:	20 81       	ld	r18, Z
   117a0:	31 81       	ldd	r19, Z+1	; 0x01
   117a2:	22 27       	eor	r18, r18
   117a4:	31 83       	std	Z+1, r19	; 0x01
   117a6:	20 83       	st	Z, r18

    if(!size)
   117a8:	67 2b       	or	r22, r23
   117aa:	21 f0       	breq	.+8      	; 0x117b4 <gpib_read_str+0x28>
   117ac:	7c 01       	movw	r14, r24
   117ae:	00 e0       	ldi	r16, 0x00	; 0
   117b0:	10 e0       	ldi	r17, 0x00	; 0
   117b2:	28 c0       	rjmp	.+80     	; 0x11804 <gpib_read_str+0x78>
    {
        if(debuglevel & (1+4))
   117b4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   117b8:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   117bc:	85 70       	andi	r24, 0x05	; 5
   117be:	99 27       	eor	r25, r25
   117c0:	89 2b       	or	r24, r25
   117c2:	09 f4       	brne	.+2      	; 0x117c6 <gpib_read_str+0x3a>
   117c4:	7c c0       	rjmp	.+248    	; 0x118be <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   117c6:	8d ee       	ldi	r24, 0xED	; 237
   117c8:	9e e0       	ldi	r25, 0x0E	; 14
   117ca:	a0 e0       	ldi	r26, 0x00	; 0
   117cc:	ed b7       	in	r30, 0x3d	; 61
   117ce:	fe b7       	in	r31, 0x3e	; 62
   117d0:	81 83       	std	Z+1, r24	; 0x01
   117d2:	92 83       	std	Z+2, r25	; 0x02
   117d4:	a3 83       	std	Z+3, r26	; 0x03
   117d6:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   117da:	71 c0       	rjmp	.+226    	; 0x118be <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   117dc:	8c 27       	eor	r24, r28
   117de:	9d 27       	eor	r25, r29
   117e0:	92 fd       	sbrc	r25, 2
   117e2:	2e c0       	rjmp	.+92     	; 0x11840 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   117e4:	ce 01       	movw	r24, r28
   117e6:	88 27       	eor	r24, r24
   117e8:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   117ea:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   117ec:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   117ee:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   117f0:	f7 01       	movw	r30, r14
   117f2:	20 83       	st	Z, r18
        ++ind;
   117f4:	0f 5f       	subi	r16, 0xFF	; 255
   117f6:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   117f8:	89 2b       	or	r24, r25
   117fa:	09 f4       	brne	.+2      	; 0x117fe <gpib_read_str+0x72>
   117fc:	3c c0       	rjmp	.+120    	; 0x11876 <gpib_read_str+0xea>
   117fe:	ff ef       	ldi	r31, 0xFF	; 255
   11800:	ef 1a       	sub	r14, r31
   11802:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (1+4))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   11804:	0a 15       	cp	r16, r10
   11806:	1b 05       	cpc	r17, r11
   11808:	0c f0       	brlt	.+2      	; 0x1180c <gpib_read_str+0x80>
   1180a:	3f c0       	rjmp	.+126    	; 0x1188a <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   1180c:	80 e0       	ldi	r24, 0x00	; 0
   1180e:	90 e0       	ldi	r25, 0x00	; 0
   11810:	e3 de       	rcall	.-570    	; 0x115d8 <gpib_read_byte>
   11812:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & 256)
   11814:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11818:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1181c:	90 ff       	sbrs	r25, 0
            gpib_decode(val);
   1181e:	02 c0       	rjmp	.+4      	; 0x11824 <gpib_read_str+0x98>
   11820:	ce 01       	movw	r24, r28
#endif
        if(val & ERROR_MASK)
   11822:	b0 df       	rcall	.-160    	; 0x11784 <gpib_decode>
   11824:	9e 01       	movw	r18, r28
   11826:	22 27       	eor	r18, r18
   11828:	30 7d       	andi	r19, 0xD0	; 208
   1182a:	f6 01       	movw	r30, r12
   1182c:	80 81       	ld	r24, Z
   1182e:	91 81       	ldd	r25, Z+1	; 0x01
   11830:	21 15       	cp	r18, r1
   11832:	31 05       	cpc	r19, r1
        {
            *status |= (val & ERROR_MASK);
   11834:	99 f2       	breq	.-90     	; 0x117dc <gpib_read_str+0x50>
   11836:	82 2b       	or	r24, r18
   11838:	93 2b       	or	r25, r19
   1183a:	91 83       	std	Z+1, r25	; 0x01
            break;
   1183c:	80 83       	st	Z, r24
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (1+4))
   1183e:	28 c0       	rjmp	.+80     	; 0x11890 <gpib_read_str+0x104>
   11840:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11844:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11848:	85 70       	andi	r24, 0x05	; 5
   1184a:	99 27       	eor	r25, r25
   1184c:	89 2b       	or	r24, r25
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   1184e:	81 f0       	breq	.+32     	; 0x11870 <gpib_read_str+0xe4>
   11850:	ce 01       	movw	r24, r28
   11852:	99 27       	eor	r25, r25
   11854:	ed b7       	in	r30, 0x3d	; 61
   11856:	fe b7       	in	r31, 0x3e	; 62
   11858:	97 83       	std	Z+7, r25	; 0x07
   1185a:	86 83       	std	Z+6, r24	; 0x06
   1185c:	15 83       	std	Z+5, r17	; 0x05
   1185e:	04 83       	std	Z+4, r16	; 0x04
   11860:	80 ec       	ldi	r24, 0xC0	; 192
   11862:	9e e0       	ldi	r25, 0x0E	; 14
   11864:	a0 e0       	ldi	r26, 0x00	; 0
   11866:	81 83       	std	Z+1, r24	; 0x01
   11868:	92 83       	std	Z+2, r25	; 0x02
   1186a:	a3 83       	std	Z+3, r26	; 0x03
            gpib_unread(val);
   1186c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   11870:	ce 01       	movw	r24, r28
            break;
   11872:	63 db       	rcall	.-2362   	; 0x10f3a <gpib_unread>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   11874:	0d c0       	rjmp	.+26     	; 0x11890 <gpib_read_str+0x104>
   11876:	d0 ff       	sbrs	r29, 0
        {

            if(*status & EOI_FLAG)
   11878:	c2 cf       	rjmp	.-124    	; 0x117fe <gpib_read_str+0x72>
   1187a:	f6 01       	movw	r30, r12
   1187c:	80 81       	ld	r24, Z
   1187e:	91 81       	ldd	r25, Z+1	; 0x01
   11880:	90 fd       	sbrc	r25, 0
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   11882:	1f c0       	rjmp	.+62     	; 0x118c2 <gpib_read_str+0x136>
   11884:	91 60       	ori	r25, 0x01	; 1
   11886:	91 83       	std	Z+1, r25	; 0x01
            break;
        }
    }
    if ( ind != size )
   11888:	80 83       	st	Z, r24
   1188a:	0a 15       	cp	r16, r10
   1188c:	1b 05       	cpc	r17, r11
    {
        if(debuglevel & (1+4))
   1188e:	c9 f0       	breq	.+50     	; 0x118c2 <gpib_read_str+0x136>
   11890:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11894:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11898:	85 70       	andi	r24, 0x05	; 5
   1189a:	99 27       	eor	r25, r25
   1189c:	89 2b       	or	r24, r25
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   1189e:	89 f0       	breq	.+34     	; 0x118c2 <gpib_read_str+0x136>
   118a0:	ed b7       	in	r30, 0x3d	; 61
   118a2:	fe b7       	in	r31, 0x3e	; 62
   118a4:	b7 82       	std	Z+7, r11	; 0x07
   118a6:	a6 82       	std	Z+6, r10	; 0x06
   118a8:	15 83       	std	Z+5, r17	; 0x05
   118aa:	04 83       	std	Z+4, r16	; 0x04
   118ac:	89 e9       	ldi	r24, 0x99	; 153
   118ae:	9e e0       	ldi	r25, 0x0E	; 14
   118b0:	a0 e0       	ldi	r26, 0x00	; 0
   118b2:	81 83       	std	Z+1, r24	; 0x01
   118b4:	92 83       	std	Z+2, r25	; 0x02
   118b6:	a3 83       	std	Z+3, r26	; 0x03
   118b8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   118bc:	02 c0       	rjmp	.+4      	; 0x118c2 <gpib_read_str+0x136>
   118be:	00 e0       	ldi	r16, 0x00	; 0
    }
    return(ind);
}
   118c0:	10 e0       	ldi	r17, 0x00	; 0
   118c2:	c8 01       	movw	r24, r16
   118c4:	cd b7       	in	r28, 0x3d	; 61
   118c6:	de b7       	in	r29, 0x3e	; 62
   118c8:	27 96       	adiw	r28, 0x07	; 7
   118ca:	ea e0       	ldi	r30, 0x0A	; 10
   118cc:	0c 94 aa e4 	jmp	0x1c954	; 0x1c954 <__epilogue_restores__+0x10>

000118d0 <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   118d0:	a7 e0       	ldi	r26, 0x07	; 7
   118d2:	b0 e0       	ldi	r27, 0x00	; 0
   118d4:	ee e6       	ldi	r30, 0x6E	; 110
   118d6:	fc e8       	ldi	r31, 0x8C	; 140
   118d8:	0c 94 8e e4 	jmp	0x1c91c	; 0x1c91c <__prologue_saves__+0x10>
   118dc:	8b 01       	movw	r16, r22
   118de:	7a 01       	movw	r14, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   118e0:	fa 01       	movw	r30, r20
   118e2:	20 81       	ld	r18, Z
   118e4:	31 81       	ldd	r19, Z+1	; 0x01
   118e6:	22 27       	eor	r18, r18
   118e8:	31 83       	std	Z+1, r19	; 0x01
   118ea:	20 83       	st	Z, r18

    if(!size)
   118ec:	67 2b       	or	r22, r23
   118ee:	21 f0       	breq	.+8      	; 0x118f8 <gpib_write_str+0x28>
   118f0:	6c 01       	movw	r12, r24
   118f2:	c0 e0       	ldi	r28, 0x00	; 0
   118f4:	d0 e0       	ldi	r29, 0x00	; 0
   118f6:	35 c0       	rjmp	.+106    	; 0x11962 <gpib_write_str+0x92>
    {
        if(debuglevel & (1+4))
   118f8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   118fc:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11900:	85 70       	andi	r24, 0x05	; 5
   11902:	99 27       	eor	r25, r25
   11904:	89 2b       	or	r24, r25
   11906:	09 f4       	brne	.+2      	; 0x1190a <gpib_write_str+0x3a>
   11908:	4f c0       	rjmp	.+158    	; 0x119a8 <gpib_write_str+0xd8>
            printf("gpib_write_str: size = 0\n");
   1190a:	8f e7       	ldi	r24, 0x7F	; 127
   1190c:	9e e0       	ldi	r25, 0x0E	; 14
   1190e:	a0 e0       	ldi	r26, 0x00	; 0
   11910:	ed b7       	in	r30, 0x3d	; 61
   11912:	fe b7       	in	r31, 0x3e	; 62
   11914:	81 83       	std	Z+1, r24	; 0x01
   11916:	92 83       	std	Z+2, r25	; 0x02
   11918:	a3 83       	std	Z+3, r26	; 0x03
   1191a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1191e:	44 c0       	rjmp	.+136    	; 0x119a8 <gpib_write_str+0xd8>
    }

    while(ind < size)
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   11920:	21 96       	adiw	r28, 0x01	; 1
   11922:	f6 01       	movw	r30, r12
   11924:	81 91       	ld	r24, Z+
   11926:	6f 01       	movw	r12, r30
   11928:	90 e0       	ldi	r25, 0x00	; 0

        if(*status & ATN_FLAG)
   1192a:	f7 01       	movw	r30, r14
   1192c:	20 81       	ld	r18, Z
   1192e:	31 81       	ldd	r19, Z+1	; 0x01
   11930:	32 fd       	sbrc	r19, 2
        {
            ch |= ATN_FLAG;
   11932:	94 60       	ori	r25, 0x04	; 4
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   11934:	30 fd       	sbrc	r19, 0
            ch |= EOI_FLAG;

/// @return Returns

        val = gpib_write_byte(ch);
   11936:	19 c0       	rjmp	.+50     	; 0x1196a <gpib_write_str+0x9a>
        *status |= (val & ERROR_MASK);
   11938:	4c db       	rcall	.-2408   	; 0x10fd2 <gpib_write_byte>
   1193a:	5c 01       	movw	r10, r24
   1193c:	aa 24       	eor	r10, r10
   1193e:	f0 ed       	ldi	r31, 0xD0	; 208
   11940:	bf 22       	and	r11, r31
   11942:	f7 01       	movw	r30, r14
   11944:	20 81       	ld	r18, Z
   11946:	31 81       	ldd	r19, Z+1	; 0x01
   11948:	2a 29       	or	r18, r10
   1194a:	3b 29       	or	r19, r11
   1194c:	31 83       	std	Z+1, r19	; 0x01

#if SDEBUG
        if(debuglevel & 256)
   1194e:	20 83       	st	Z, r18
   11950:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   11954:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
            gpib_decode(val);
   11958:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   1195a:	14 df       	rcall	.-472    	; 0x11784 <gpib_decode>
   1195c:	a1 14       	cp	r10, r1
   1195e:	b1 04       	cpc	r11, r1
    {
        if(debuglevel & (1+4))
            printf("gpib_write_str: size = 0\n");
    }

    while(ind < size)
   11960:	49 f4       	brne	.+18     	; 0x11974 <gpib_write_str+0xa4>
   11962:	c0 17       	cp	r28, r16
   11964:	d1 07       	cpc	r29, r17
   11966:	e4 f2       	brlt	.-72     	; 0x11920 <gpib_write_str+0x50>
        if(*status & ATN_FLAG)
        {
            ch |= ATN_FLAG;
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   11968:	05 c0       	rjmp	.+10     	; 0x11974 <gpib_write_str+0xa4>
   1196a:	0c 17       	cp	r16, r28
   1196c:	1d 07       	cpc	r17, r29
            ch |= EOI_FLAG;
   1196e:	21 f7       	brne	.-56     	; 0x11938 <gpib_write_str+0x68>
   11970:	91 60       	ori	r25, 0x01	; 1
        {
            break;
        }

    }                                             // while(ind < size)
    if ( ind != size )
   11972:	e2 cf       	rjmp	.-60     	; 0x11938 <gpib_write_str+0x68>
   11974:	c0 17       	cp	r28, r16
   11976:	d1 07       	cpc	r29, r17
    {
        if(debuglevel & (1+4))
   11978:	c9 f0       	breq	.+50     	; 0x119ac <gpib_write_str+0xdc>
   1197a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1197e:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11982:	85 70       	andi	r24, 0x05	; 5
   11984:	99 27       	eor	r25, r25
   11986:	89 2b       	or	r24, r25
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   11988:	89 f0       	breq	.+34     	; 0x119ac <gpib_write_str+0xdc>
   1198a:	ed b7       	in	r30, 0x3d	; 61
   1198c:	fe b7       	in	r31, 0x3e	; 62
   1198e:	17 83       	std	Z+7, r17	; 0x07
   11990:	06 83       	std	Z+6, r16	; 0x06
   11992:	d5 83       	std	Z+5, r29	; 0x05
   11994:	c4 83       	std	Z+4, r28	; 0x04
   11996:	87 e5       	ldi	r24, 0x57	; 87
   11998:	9e e0       	ldi	r25, 0x0E	; 14
   1199a:	a0 e0       	ldi	r26, 0x00	; 0
   1199c:	81 83       	std	Z+1, r24	; 0x01
   1199e:	92 83       	std	Z+2, r25	; 0x02
   119a0:	a3 83       	std	Z+3, r26	; 0x03
   119a2:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;

    if(!size)
   119a6:	02 c0       	rjmp	.+4      	; 0x119ac <gpib_write_str+0xdc>
   119a8:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(debuglevel & (1+4))
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
    }
    return(ind);
}
   119aa:	d0 e0       	ldi	r29, 0x00	; 0
   119ac:	ce 01       	movw	r24, r28
   119ae:	cd b7       	in	r28, 0x3d	; 61
   119b0:	de b7       	in	r29, 0x3e	; 62
   119b2:	27 96       	adiw	r28, 0x07	; 7
   119b4:	ea e0       	ldi	r30, 0x0A	; 10
   119b6:	0c 94 aa e4 	jmp	0x1c954	; 0x1c954 <__epilogue_restores__+0x10>

000119ba <gpib_file_init>:
   119ba:	ad b7       	in	r26, 0x3d	; 61
   119bc:	be b7       	in	r27, 0x3e	; 62
   119be:	17 97       	sbiw	r26, 0x07	; 7
   119c0:	0f b6       	in	r0, 0x3f	; 63
   119c2:	f8 94       	cli
   119c4:	be bf       	out	0x3e, r27	; 62
   119c6:	0f be       	out	0x3f, r0	; 63
   119c8:	ad bf       	out	0x3d, r26	; 61
   119ca:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <debuglevel+0x1>
   119ce:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <debuglevel>
   119d2:	85 ec       	ldi	r24, 0xC5	; 197
   119d4:	91 e0       	ldi	r25, 0x01	; 1
   119d6:	0e 94 de 97 	call	0x12fbc	; 0x12fbc <Read_Config>
   119da:	18 16       	cp	r1, r24
   119dc:	19 06       	cpc	r1, r25
   119de:	8c f4       	brge	.+34     	; 0x11a02 <gpib_file_init+0x48>
   119e0:	ed b7       	in	r30, 0x3d	; 61
   119e2:	fe b7       	in	r31, 0x3e	; 62
   119e4:	97 83       	std	Z+7, r25	; 0x07
   119e6:	86 83       	std	Z+6, r24	; 0x06
   119e8:	85 ec       	ldi	r24, 0xC5	; 197
   119ea:	91 e0       	ldi	r25, 0x01	; 1
   119ec:	95 83       	std	Z+5, r25	; 0x05
   119ee:	84 83       	std	Z+4, r24	; 0x04
   119f0:	8f e4       	ldi	r24, 0x4F	; 79
   119f2:	93 e1       	ldi	r25, 0x13	; 19
   119f4:	a0 e0       	ldi	r26, 0x00	; 0
   119f6:	81 83       	std	Z+1, r24	; 0x01
   119f8:	92 83       	std	Z+2, r25	; 0x02
   119fa:	a3 83       	std	Z+3, r26	; 0x03
   119fc:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   11a00:	10 c0       	rjmp	.+32     	; 0x11a22 <gpib_file_init+0x68>
   11a02:	89 2b       	or	r24, r25
   11a04:	71 f0       	breq	.+28     	; 0x11a22 <gpib_file_init+0x68>
   11a06:	85 ec       	ldi	r24, 0xC5	; 197
   11a08:	91 e0       	ldi	r25, 0x01	; 1
   11a0a:	ed b7       	in	r30, 0x3d	; 61
   11a0c:	fe b7       	in	r31, 0x3e	; 62
   11a0e:	95 83       	std	Z+5, r25	; 0x05
   11a10:	84 83       	std	Z+4, r24	; 0x04
   11a12:	8e e3       	ldi	r24, 0x3E	; 62
   11a14:	93 e1       	ldi	r25, 0x13	; 19
   11a16:	a0 e0       	ldi	r26, 0x00	; 0
   11a18:	81 83       	std	Z+1, r24	; 0x01
   11a1a:	92 83       	std	Z+2, r25	; 0x02
   11a1c:	a3 83       	std	Z+3, r26	; 0x03
   11a1e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   11a22:	0e 94 98 96 	call	0x12d30	; 0x12d30 <set_Config_Defaults>
   11a26:	0e 94 fe 70 	call	0xe1fc	; 0xe1fc <mmc_wp_status>
   11a2a:	89 2b       	or	r24, r25
   11a2c:	51 f0       	breq	.+20     	; 0x11a42 <gpib_file_init+0x88>
   11a2e:	85 e2       	ldi	r24, 0x25	; 37
   11a30:	93 e1       	ldi	r25, 0x13	; 19
   11a32:	a0 e0       	ldi	r26, 0x00	; 0
   11a34:	ed b7       	in	r30, 0x3d	; 61
   11a36:	fe b7       	in	r31, 0x3e	; 62
   11a38:	81 83       	std	Z+1, r24	; 0x01
   11a3a:	92 83       	std	Z+2, r25	; 0x02
   11a3c:	a3 83       	std	Z+3, r26	; 0x03
   11a3e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   11a42:	ad b7       	in	r26, 0x3d	; 61
   11a44:	be b7       	in	r27, 0x3e	; 62
   11a46:	17 96       	adiw	r26, 0x07	; 7
   11a48:	0f b6       	in	r0, 0x3f	; 63
   11a4a:	f8 94       	cli
   11a4c:	be bf       	out	0x3e, r27	; 62
   11a4e:	0f be       	out	0x3f, r0	; 63
   11a50:	ad bf       	out	0x3d, r26	; 61
   11a52:	08 95       	ret

00011a54 <SS80_is_MLA>:
   11a54:	40 e2       	ldi	r20, 0x20	; 32
   11a56:	50 e0       	ldi	r21, 0x00	; 0
   11a58:	bc 01       	movw	r22, r24
   11a5a:	83 e0       	ldi	r24, 0x03	; 3
   11a5c:	90 e0       	ldi	r25, 0x00	; 0
   11a5e:	ce d6       	rcall	.+3484   	; 0x127fc <find_device>
   11a60:	8f 3f       	cpi	r24, 0xFF	; 255
   11a62:	2f ef       	ldi	r18, 0xFF	; 255
   11a64:	92 07       	cpc	r25, r18
   11a66:	11 f0       	breq	.+4      	; 0x11a6c <SS80_is_MLA+0x18>
   11a68:	f3 c6       	rjmp	.+3558   	; 0x12850 <set_active_device>
   11a6a:	08 95       	ret
   11a6c:	80 e0       	ldi	r24, 0x00	; 0
   11a6e:	90 e0       	ldi	r25, 0x00	; 0
   11a70:	08 95       	ret

00011a72 <SS80_is_MTA>:
   11a72:	40 e4       	ldi	r20, 0x40	; 64
   11a74:	50 e0       	ldi	r21, 0x00	; 0
   11a76:	bc 01       	movw	r22, r24
   11a78:	83 e0       	ldi	r24, 0x03	; 3
   11a7a:	90 e0       	ldi	r25, 0x00	; 0
   11a7c:	bf d6       	rcall	.+3454   	; 0x127fc <find_device>
   11a7e:	8f 3f       	cpi	r24, 0xFF	; 255
   11a80:	2f ef       	ldi	r18, 0xFF	; 255
   11a82:	92 07       	cpc	r25, r18
   11a84:	11 f0       	breq	.+4      	; 0x11a8a <SS80_is_MTA+0x18>
   11a86:	e4 c6       	rjmp	.+3528   	; 0x12850 <set_active_device>
   11a88:	08 95       	ret
   11a8a:	80 e0       	ldi	r24, 0x00	; 0
   11a8c:	90 e0       	ldi	r25, 0x00	; 0
   11a8e:	08 95       	ret

00011a90 <SS80_is_MSA>:
   11a90:	40 e6       	ldi	r20, 0x60	; 96
   11a92:	50 e0       	ldi	r21, 0x00	; 0
   11a94:	bc 01       	movw	r22, r24
   11a96:	83 e0       	ldi	r24, 0x03	; 3
   11a98:	90 e0       	ldi	r25, 0x00	; 0
   11a9a:	b0 d6       	rcall	.+3424   	; 0x127fc <find_device>
   11a9c:	8f 3f       	cpi	r24, 0xFF	; 255
   11a9e:	2f ef       	ldi	r18, 0xFF	; 255
   11aa0:	92 07       	cpc	r25, r18
   11aa2:	11 f0       	breq	.+4      	; 0x11aa8 <SS80_is_MSA+0x18>
   11aa4:	d5 c6       	rjmp	.+3498   	; 0x12850 <set_active_device>
   11aa6:	08 95       	ret
   11aa8:	80 e0       	ldi	r24, 0x00	; 0
   11aaa:	90 e0       	ldi	r25, 0x00	; 0
   11aac:	08 95       	ret

00011aae <AMIGO_is_MLA>:
   11aae:	40 e2       	ldi	r20, 0x20	; 32
   11ab0:	50 e0       	ldi	r21, 0x00	; 0
   11ab2:	bc 01       	movw	r22, r24
   11ab4:	81 e0       	ldi	r24, 0x01	; 1
   11ab6:	90 e0       	ldi	r25, 0x00	; 0
   11ab8:	a1 d6       	rcall	.+3394   	; 0x127fc <find_device>
   11aba:	8f 3f       	cpi	r24, 0xFF	; 255
   11abc:	2f ef       	ldi	r18, 0xFF	; 255
   11abe:	92 07       	cpc	r25, r18
   11ac0:	11 f0       	breq	.+4      	; 0x11ac6 <AMIGO_is_MLA+0x18>
   11ac2:	c6 c6       	rjmp	.+3468   	; 0x12850 <set_active_device>
   11ac4:	08 95       	ret
   11ac6:	80 e0       	ldi	r24, 0x00	; 0
   11ac8:	90 e0       	ldi	r25, 0x00	; 0
   11aca:	08 95       	ret

00011acc <AMIGO_is_MTA>:
   11acc:	40 e4       	ldi	r20, 0x40	; 64
   11ace:	50 e0       	ldi	r21, 0x00	; 0
   11ad0:	bc 01       	movw	r22, r24
   11ad2:	81 e0       	ldi	r24, 0x01	; 1
   11ad4:	90 e0       	ldi	r25, 0x00	; 0
   11ad6:	92 d6       	rcall	.+3364   	; 0x127fc <find_device>
   11ad8:	8f 3f       	cpi	r24, 0xFF	; 255
   11ada:	2f ef       	ldi	r18, 0xFF	; 255
   11adc:	92 07       	cpc	r25, r18
   11ade:	11 f0       	breq	.+4      	; 0x11ae4 <AMIGO_is_MTA+0x18>
   11ae0:	b7 c6       	rjmp	.+3438   	; 0x12850 <set_active_device>
   11ae2:	08 95       	ret
   11ae4:	80 e0       	ldi	r24, 0x00	; 0
   11ae6:	90 e0       	ldi	r25, 0x00	; 0
   11ae8:	08 95       	ret

00011aea <AMIGO_is_MSA>:
   11aea:	40 e6       	ldi	r20, 0x60	; 96
   11aec:	50 e0       	ldi	r21, 0x00	; 0
   11aee:	bc 01       	movw	r22, r24
   11af0:	81 e0       	ldi	r24, 0x01	; 1
   11af2:	90 e0       	ldi	r25, 0x00	; 0
   11af4:	83 d6       	rcall	.+3334   	; 0x127fc <find_device>
   11af6:	8f 3f       	cpi	r24, 0xFF	; 255
   11af8:	2f ef       	ldi	r18, 0xFF	; 255
   11afa:	92 07       	cpc	r25, r18
   11afc:	11 f0       	breq	.+4      	; 0x11b02 <AMIGO_is_MSA+0x18>
   11afe:	a8 c6       	rjmp	.+3408   	; 0x12850 <set_active_device>
   11b00:	08 95       	ret
   11b02:	80 e0       	ldi	r24, 0x00	; 0
   11b04:	90 e0       	ldi	r25, 0x00	; 0
   11b06:	08 95       	ret

00011b08 <PRINTER_is_MLA>:
   11b08:	40 e2       	ldi	r20, 0x20	; 32
   11b0a:	50 e0       	ldi	r21, 0x00	; 0
   11b0c:	bc 01       	movw	r22, r24
   11b0e:	84 e0       	ldi	r24, 0x04	; 4
   11b10:	90 e0       	ldi	r25, 0x00	; 0
   11b12:	74 d6       	rcall	.+3304   	; 0x127fc <find_device>
   11b14:	8f 3f       	cpi	r24, 0xFF	; 255
   11b16:	2f ef       	ldi	r18, 0xFF	; 255
   11b18:	92 07       	cpc	r25, r18
   11b1a:	11 f0       	breq	.+4      	; 0x11b20 <PRINTER_is_MLA+0x18>
   11b1c:	99 c6       	rjmp	.+3378   	; 0x12850 <set_active_device>
   11b1e:	08 95       	ret
   11b20:	80 e0       	ldi	r24, 0x00	; 0
   11b22:	90 e0       	ldi	r25, 0x00	; 0
   11b24:	08 95       	ret

00011b26 <PRINTER_is_MTA>:
   11b26:	40 e4       	ldi	r20, 0x40	; 64
   11b28:	50 e0       	ldi	r21, 0x00	; 0
   11b2a:	bc 01       	movw	r22, r24
   11b2c:	84 e0       	ldi	r24, 0x04	; 4
   11b2e:	90 e0       	ldi	r25, 0x00	; 0
   11b30:	65 d6       	rcall	.+3274   	; 0x127fc <find_device>
   11b32:	8f 3f       	cpi	r24, 0xFF	; 255
   11b34:	2f ef       	ldi	r18, 0xFF	; 255
   11b36:	92 07       	cpc	r25, r18
   11b38:	11 f0       	breq	.+4      	; 0x11b3e <PRINTER_is_MTA+0x18>
   11b3a:	8a c6       	rjmp	.+3348   	; 0x12850 <set_active_device>
   11b3c:	08 95       	ret
   11b3e:	80 e0       	ldi	r24, 0x00	; 0
   11b40:	90 e0       	ldi	r25, 0x00	; 0
   11b42:	08 95       	ret

00011b44 <gpib_init_devices>:
   11b44:	11 d9       	rcall	.-3550   	; 0x10d68 <gpib_bus_init>
   11b46:	3d d9       	rcall	.-3462   	; 0x10dc2 <gpib_state_init>
   11b48:	0e 94 96 ae 	call	0x15d2c	; 0x15d2c <SS80_init>
   11b4c:	0e 94 25 b4 	call	0x1684a	; 0x1684a <amigo_init>
   11b50:	0c 94 19 bf 	jmp	0x17e32	; 0x17e32 <printer_close>
   11b54:	08 95       	ret

00011b56 <gpib_trace_task>:
/// @param name: File name to save log file to.
/// @return  void
///   Exit on Key Press

void gpib_trace_task( char *name , int detail)
{
   11b56:	0f 93       	push	r16
   11b58:	1f 93       	push	r17
   11b5a:	cf 93       	push	r28
   11b5c:	df 93       	push	r29
   11b5e:	00 d0       	rcall	.+0      	; 0x11b60 <gpib_trace_task+0xa>
   11b60:	00 d0       	rcall	.+0      	; 0x11b62 <gpib_trace_task+0xc>
   11b62:	1f 92       	push	r1
   11b64:	eb 01       	movw	r28, r22
    int ch;

    if(name && *name)
   11b66:	00 97       	sbiw	r24, 0x00	; 0
   11b68:	09 f4       	brne	.+2      	; 0x11b6c <gpib_trace_task+0x16>
   11b6a:	44 c0       	rjmp	.+136    	; 0x11bf4 <gpib_trace_task+0x9e>
   11b6c:	fc 01       	movw	r30, r24
   11b6e:	20 81       	ld	r18, Z
   11b70:	22 23       	and	r18, r18
   11b72:	09 f4       	brne	.+2      	; 0x11b76 <gpib_trace_task+0x20>
   11b74:	3f c0       	rjmp	.+126    	; 0x11bf4 <gpib_trace_task+0x9e>
    {
        name = skipspaces(name);
   11b76:	0e 94 4f 33 	call	0x669e	; 0x669e <skipspaces>
   11b7a:	8c 01       	movw	r16, r24
        printf("Capturing GPIB BUS to:%s\n", name);
   11b7c:	ed b7       	in	r30, 0x3d	; 61
   11b7e:	fe b7       	in	r31, 0x3e	; 62
   11b80:	95 83       	std	Z+5, r25	; 0x05
   11b82:	84 83       	std	Z+4, r24	; 0x04
   11b84:	8b e0       	ldi	r24, 0x0B	; 11
   11b86:	93 e1       	ldi	r25, 0x13	; 19
   11b88:	a0 e0       	ldi	r26, 0x00	; 0
   11b8a:	81 83       	std	Z+1, r24	; 0x01
   11b8c:	92 83       	std	Z+2, r25	; 0x02
   11b8e:	a3 83       	std	Z+3, r26	; 0x03
   11b90:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
       if(detail)
   11b94:	20 97       	sbiw	r28, 0x00	; 0
   11b96:	51 f0       	breq	.+20     	; 0x11bac <gpib_trace_task+0x56>
            printf("FULL GPIB BUS handshake logging requested\n");
   11b98:	80 ee       	ldi	r24, 0xE0	; 224
   11b9a:	92 e1       	ldi	r25, 0x12	; 18
   11b9c:	a0 e0       	ldi	r26, 0x00	; 0
   11b9e:	ed b7       	in	r30, 0x3d	; 61
   11ba0:	fe b7       	in	r31, 0x3e	; 62
   11ba2:	81 83       	std	Z+1, r24	; 0x01
   11ba4:	92 83       	std	Z+2, r25	; 0x02
   11ba6:	a3 83       	std	Z+3, r26	; 0x03
   11ba8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        printf("Press ANY key to exit\n");
   11bac:	89 ec       	ldi	r24, 0xC9	; 201
   11bae:	92 e1       	ldi	r25, 0x12	; 18
   11bb0:	a0 e0       	ldi	r26, 0x00	; 0
   11bb2:	ed b7       	in	r30, 0x3d	; 61
   11bb4:	fe b7       	in	r31, 0x3e	; 62
   11bb6:	81 83       	std	Z+1, r24	; 0x01
   11bb8:	92 83       	std	Z+2, r25	; 0x02
   11bba:	a3 83       	std	Z+3, r26	; 0x03
   11bbc:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

        gpib_log_fp = fopen(name,"wb");
   11bc0:	6c e2       	ldi	r22, 0x2C	; 44
   11bc2:	78 e0       	ldi	r23, 0x08	; 8
   11bc4:	c8 01       	movw	r24, r16
   11bc6:	0e 94 32 7f 	call	0xfe64	; 0xfe64 <fopen>
   11bca:	90 93 fe 18 	sts	0x18FE, r25	; 0x8018fe <gpib_log_fp+0x1>
   11bce:	80 93 fd 18 	sts	0x18FD, r24	; 0x8018fd <gpib_log_fp>
        if(gpib_log_fp == NULL)
   11bd2:	89 2b       	or	r24, r25
   11bd4:	b9 f4       	brne	.+46     	; 0x11c04 <gpib_trace_task+0xae>
        {
            perror("open failed");
   11bd6:	87 ec       	ldi	r24, 0xC7	; 199
   11bd8:	9c e0       	ldi	r25, 0x0C	; 12
   11bda:	0e 94 63 79 	call	0xf2c6	; 0xf2c6 <perror>
            printf("exiting...\n");
   11bde:	8d eb       	ldi	r24, 0xBD	; 189
   11be0:	92 e1       	ldi	r25, 0x12	; 18
   11be2:	a0 e0       	ldi	r26, 0x00	; 0
   11be4:	ed b7       	in	r30, 0x3d	; 61
   11be6:	fe b7       	in	r31, 0x3e	; 62
   11be8:	81 83       	std	Z+1, r24	; 0x01
   11bea:	92 83       	std	Z+2, r25	; 0x02
   11bec:	a3 83       	std	Z+3, r26	; 0x03
   11bee:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            return;
   11bf2:	3e c0       	rjmp	.+124    	; 0x11c70 <gpib_trace_task+0x11a>
        }
    }
    else
    {
        gpib_log_fp = stdout;
   11bf4:	80 91 59 1c 	lds	r24, 0x1C59	; 0x801c59 <__iob+0x2>
   11bf8:	90 91 5a 1c 	lds	r25, 0x1C5A	; 0x801c5a <__iob+0x3>
   11bfc:	90 93 fe 18 	sts	0x18FE, r25	; 0x8018fe <gpib_log_fp+0x1>
   11c00:	80 93 fd 18 	sts	0x18FD, r24	; 0x8018fd <gpib_log_fp>
    }

    gpib_state_init();                            // Init PPR talking and listening states
    gpib_init_devices();
   11c04:	de d8       	rcall	.-3652   	; 0x10dc2 <gpib_state_init>

    gpib_decode_header(gpib_log_fp);
   11c06:	9e df       	rcall	.-196    	; 0x11b44 <gpib_init_devices>
   11c08:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <gpib_log_fp>
   11c0c:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <gpib_log_fp+0x1>
    while(1)                                      // Main loop, forever
    {
        if(uart_keyhit(0))
   11c10:	4f db       	rcall	.-2402   	; 0x112b0 <gpib_decode_header>
   11c12:	80 e0       	ldi	r24, 0x00	; 0
   11c14:	0e 94 2d 2c 	call	0x585a	; 0x585a <uart_keyhit>
            break;

        ch = gpib_read_byte(detail);
   11c18:	89 2b       	or	r24, r25
   11c1a:	31 f4       	brne	.+12     	; 0x11c28 <gpib_trace_task+0xd2>
        if(!detail)
   11c1c:	ce 01       	movw	r24, r28
   11c1e:	dc dc       	rcall	.-1608   	; 0x115d8 <gpib_read_byte>
            gpib_decode(ch);
   11c20:	20 97       	sbiw	r28, 0x00	; 0
   11c22:	b9 f7       	brne	.-18     	; 0x11c12 <gpib_trace_task+0xbc>
   11c24:	af dd       	rcall	.-1186   	; 0x11784 <gpib_decode>
    }

    printf("Done\n");
   11c26:	f5 cf       	rjmp	.-22     	; 0x11c12 <gpib_trace_task+0xbc>
   11c28:	87 eb       	ldi	r24, 0xB7	; 183
   11c2a:	92 e1       	ldi	r25, 0x12	; 18
   11c2c:	a0 e0       	ldi	r26, 0x00	; 0
   11c2e:	ed b7       	in	r30, 0x3d	; 61
   11c30:	fe b7       	in	r31, 0x3e	; 62
   11c32:	81 83       	std	Z+1, r24	; 0x01
   11c34:	92 83       	std	Z+2, r25	; 0x02
   11c36:	a3 83       	std	Z+3, r26	; 0x03
   11c38:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    if(gpib_log_fp)
   11c3c:	80 91 fd 18 	lds	r24, 0x18FD	; 0x8018fd <gpib_log_fp>
   11c40:	90 91 fe 18 	lds	r25, 0x18FE	; 0x8018fe <gpib_log_fp+0x1>
   11c44:	00 97       	sbiw	r24, 0x00	; 0
    {
        fclose(gpib_log_fp);
   11c46:	a1 f0       	breq	.+40     	; 0x11c70 <gpib_trace_task+0x11a>
   11c48:	0e 94 dc 7d 	call	0xfbb8	; 0xfbb8 <fclose>
        printf("Capturing Closed\n");
   11c4c:	85 ea       	ldi	r24, 0xA5	; 165
   11c4e:	92 e1       	ldi	r25, 0x12	; 18
   11c50:	a0 e0       	ldi	r26, 0x00	; 0
   11c52:	ed b7       	in	r30, 0x3d	; 61
   11c54:	fe b7       	in	r31, 0x3e	; 62
   11c56:	81 83       	std	Z+1, r24	; 0x01
   11c58:	92 83       	std	Z+2, r25	; 0x02
   11c5a:	a3 83       	std	Z+3, r26	; 0x03
   11c5c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        gpib_log_fp = stdout;
   11c60:	80 91 59 1c 	lds	r24, 0x1C59	; 0x801c59 <__iob+0x2>
   11c64:	90 91 5a 1c 	lds	r25, 0x1C5A	; 0x801c5a <__iob+0x3>
   11c68:	90 93 fe 18 	sts	0x18FE, r25	; 0x8018fe <gpib_log_fp+0x1>
   11c6c:	80 93 fd 18 	sts	0x18FD, r24	; 0x8018fd <gpib_log_fp>
    }
}
   11c70:	cd b7       	in	r28, 0x3d	; 61
   11c72:	de b7       	in	r29, 0x3e	; 62
   11c74:	25 96       	adiw	r28, 0x05	; 5
   11c76:	e4 e0       	ldi	r30, 0x04	; 4
   11c78:	0c 94 b0 e4 	jmp	0x1c960	; 0x1c960 <__epilogue_restores__+0x1c>

00011c7c <gpib_error_test>:
///
/// @return  val
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{
   11c7c:	ef 92       	push	r14
   11c7e:	ff 92       	push	r15
   11c80:	0f 93       	push	r16
   11c82:	1f 93       	push	r17
   11c84:	cf 93       	push	r28
   11c86:	df 93       	push	r29
   11c88:	00 d0       	rcall	.+0      	; 0x11c8a <gpib_error_test+0xe>
   11c8a:	1f 92       	push	r1
   11c8c:	7c 01       	movw	r14, r24

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11c8e:	ec 01       	movw	r28, r24
   11c90:	cc 27       	eor	r28, r28
   11c92:	d0 7d       	andi	r29, 0xD0	; 208
   11c94:	20 97       	sbiw	r28, 0x00	; 0
   11c96:	61 f0       	breq	.+24     	; 0x11cb0 <gpib_error_test+0x34>
    {
        val &= ERROR_MASK;

        ///@brief IFC is and important state so display it for most messages
        if(debuglevel & (2+4+8+0x20))
   11c98:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11c9c:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11ca0:	8e 72       	andi	r24, 0x2E	; 46
   11ca2:	99 27       	eor	r25, r25
   11ca4:	87 01       	movw	r16, r14
   11ca6:	00 27       	eor	r16, r16
   11ca8:	10 71       	andi	r17, 0x10	; 16
   11caa:	89 2b       	or	r24, r25
   11cac:	59 f4       	brne	.+22     	; 0x11cc4 <gpib_error_test+0x48>
   11cae:	17 c0       	rjmp	.+46     	; 0x11cde <gpib_error_test+0x62>
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11cb0:	80 e0       	ldi	r24, 0x00	; 0
   11cb2:	0e 94 2d 2c 	call	0x585a	; 0x585a <uart_keyhit>
   11cb6:	89 2b       	or	r24, r25
   11cb8:	79 f7       	brne	.-34     	; 0x11c98 <gpib_error_test+0x1c>
   11cba:	0e 94 fb 70 	call	0xe1f6	; 0xe1f6 <mmc_ins_status>
   11cbe:	01 97       	sbiw	r24, 0x01	; 1
   11cc0:	59 f7       	brne	.-42     	; 0x11c98 <gpib_error_test+0x1c>
   11cc2:	62 c0       	rjmp	.+196    	; 0x11d88 <gpib_error_test+0x10c>

        ///@brief IFC is and important state so display it for most messages
        if(debuglevel & (2+4+8+0x20))
        {
            /// Bus Clear, reseat all states, etc
            if(val & IFC_FLAG)
   11cc4:	01 15       	cp	r16, r1
   11cc6:	11 05       	cpc	r17, r1
   11cc8:	51 f0       	breq	.+20     	; 0x11cde <gpib_error_test+0x62>
                printf("<IFC>\n");
   11cca:	8e e9       	ldi	r24, 0x9E	; 158
   11ccc:	92 e1       	ldi	r25, 0x12	; 18
   11cce:	a0 e0       	ldi	r26, 0x00	; 0
   11cd0:	ed b7       	in	r30, 0x3d	; 61
   11cd2:	fe b7       	in	r31, 0x3e	; 62
   11cd4:	81 83       	std	Z+1, r24	; 0x01
   11cd6:	92 83       	std	Z+2, r25	; 0x02
   11cd8:	a3 83       	std	Z+3, r26	; 0x03
   11cda:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        }

        if(debuglevel & (1+4))
   11cde:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11ce2:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11ce6:	85 70       	andi	r24, 0x05	; 5
   11ce8:	99 27       	eor	r25, r25
   11cea:	89 2b       	or	r24, r25
   11cec:	c1 f0       	breq	.+48     	; 0x11d1e <gpib_error_test+0xa2>
        {
            if(val & TIMEOUT_FLAG)
   11cee:	f6 fe       	sbrs	r15, 6
   11cf0:	0a c0       	rjmp	.+20     	; 0x11d06 <gpib_error_test+0x8a>
                printf("<TIMEOUT>\n");
   11cf2:	83 e9       	ldi	r24, 0x93	; 147
   11cf4:	92 e1       	ldi	r25, 0x12	; 18
   11cf6:	a0 e0       	ldi	r26, 0x00	; 0
   11cf8:	ed b7       	in	r30, 0x3d	; 61
   11cfa:	fe b7       	in	r31, 0x3e	; 62
   11cfc:	81 83       	std	Z+1, r24	; 0x01
   11cfe:	92 83       	std	Z+2, r25	; 0x02
   11d00:	a3 83       	std	Z+3, r26	; 0x03
   11d02:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            if(val & BUS_ERROR_FLAG)
   11d06:	d7 ff       	sbrs	r29, 7
   11d08:	0a c0       	rjmp	.+20     	; 0x11d1e <gpib_error_test+0xa2>
                printf("<BUS>\n");
   11d0a:	8c e8       	ldi	r24, 0x8C	; 140
   11d0c:	92 e1       	ldi	r25, 0x12	; 18
   11d0e:	a0 e0       	ldi	r26, 0x00	; 0
   11d10:	ed b7       	in	r30, 0x3d	; 61
   11d12:	fe b7       	in	r31, 0x3e	; 62
   11d14:	81 83       	std	Z+1, r24	; 0x01
   11d16:	92 83       	std	Z+2, r25	; 0x02
   11d18:	a3 83       	std	Z+3, r26	; 0x03
   11d1a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        }

        if(uart_keyhit(0))
   11d1e:	80 e0       	ldi	r24, 0x00	; 0
   11d20:	0e 94 2d 2c 	call	0x585a	; 0x585a <uart_keyhit>
   11d24:	89 2b       	or	r24, r25
   11d26:	51 f0       	breq	.+20     	; 0x11d3c <gpib_error_test+0xc0>
            printf("<INTERRUPT>\n");
   11d28:	8f e7       	ldi	r24, 0x7F	; 127
   11d2a:	92 e1       	ldi	r25, 0x12	; 18
   11d2c:	a0 e0       	ldi	r26, 0x00	; 0
   11d2e:	ed b7       	in	r30, 0x3d	; 61
   11d30:	fe b7       	in	r31, 0x3e	; 62
   11d32:	81 83       	std	Z+1, r24	; 0x01
   11d34:	92 83       	std	Z+2, r25	; 0x02
   11d36:	a3 83       	std	Z+3, r26	; 0x03
   11d38:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

        if( mmc_ins_status() != 1 )
   11d3c:	0e 94 fb 70 	call	0xe1f6	; 0xe1f6 <mmc_ins_status>
   11d40:	01 97       	sbiw	r24, 0x01	; 1
   11d42:	51 f0       	breq	.+20     	; 0x11d58 <gpib_error_test+0xdc>
            printf("<MEDIA MISSING>\n");
   11d44:	8e e6       	ldi	r24, 0x6E	; 110
   11d46:	92 e1       	ldi	r25, 0x12	; 18
   11d48:	a0 e0       	ldi	r26, 0x00	; 0
   11d4a:	ed b7       	in	r30, 0x3d	; 61
   11d4c:	fe b7       	in	r31, 0x3e	; 62
   11d4e:	81 83       	std	Z+1, r24	; 0x01
   11d50:	92 83       	std	Z+2, r25	; 0x02
   11d52:	a3 83       	std	Z+3, r26	; 0x03
   11d54:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

        if(val & IFC_FLAG)
   11d58:	01 15       	cp	r16, r1
   11d5a:	11 05       	cpc	r17, r1
        {
            gpib_init_devices();
   11d5c:	09 f0       	breq	.+2      	; 0x11d60 <gpib_error_test+0xe4>
        }

        if(uart_keyhit(0))
   11d5e:	f2 de       	rcall	.-540    	; 0x11b44 <gpib_init_devices>
   11d60:	80 e0       	ldi	r24, 0x00	; 0
   11d62:	0e 94 2d 2c 	call	0x585a	; 0x585a <uart_keyhit>
        {
            gpib_init_devices();
   11d66:	89 2b       	or	r24, r25
   11d68:	11 f0       	breq	.+4      	; 0x11d6e <gpib_error_test+0xf2>
   11d6a:	ec de       	rcall	.-552    	; 0x11b44 <gpib_init_devices>
            return(ABORT_FLAG);
        }

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
   11d6c:	0b c0       	rjmp	.+22     	; 0x11d84 <gpib_error_test+0x108>
   11d6e:	0e 94 fb 70 	call	0xe1f6	; 0xe1f6 <mmc_ins_status>
   11d72:	01 97       	sbiw	r24, 0x01	; 1
        {
            return(ABORT_FLAG);
        }

		// Wait for IFC free
        if(val & IFC_FLAG )
   11d74:	39 f4       	brne	.+14     	; 0x11d84 <gpib_error_test+0x108>
   11d76:	01 15       	cp	r16, r1
   11d78:	11 05       	cpc	r17, r1
        {
            while(GPIB_IO_RD(IFC) == 0)
   11d7a:	31 f0       	breq	.+12     	; 0x11d88 <gpib_error_test+0x10c>
   11d7c:	54 98       	cbi	0x0a, 4	; 10
   11d7e:	4c 9b       	sbis	0x09, 4	; 9
   11d80:	fd cf       	rjmp	.-6      	; 0x11d7c <gpib_error_test+0x100>

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
        {
            return(ABORT_FLAG);
   11d82:	02 c0       	rjmp	.+4      	; 0x11d88 <gpib_error_test+0x10c>
   11d84:	c1 e0       	ldi	r28, 0x01	; 1
                ;
        }
        return(val);
    }
    return(0);
}
   11d86:	d0 e0       	ldi	r29, 0x00	; 0
   11d88:	ce 01       	movw	r24, r28
   11d8a:	cd b7       	in	r28, 0x3d	; 61
   11d8c:	de b7       	in	r29, 0x3e	; 62
   11d8e:	23 96       	adiw	r28, 0x03	; 3
   11d90:	e6 e0       	ldi	r30, 0x06	; 6
   11d92:	0c 94 ae e4 	jmp	0x1c95c	; 0x1c95c <__epilogue_restores__+0x18>

00011d96 <GPIB_COMMANDS>:
///
/// @return GPIB status from emulator command.
/// @return 0 if no emulator command processed.

uint16_t GPIB_COMMANDS(uint16_t val, uint8_t unread)
{
   11d96:	1f 93       	push	r17
   11d98:	cf 93       	push	r28
   11d9a:	df 93       	push	r29
   11d9c:	ec 01       	movw	r28, r24
   11d9e:	16 2f       	mov	r17, r22
    uint16_t status;

    ///@brief talking ?
    if(talking != UNT)
   11da0:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   11da4:	8f 35       	cpi	r24, 0x5F	; 95
   11da6:	91 f0       	breq	.+36     	; 0x11dcc <GPIB_COMMANDS+0x36>
    {

#ifdef AMIGO
        if ( AMIGO_is_MLA(listening) )
   11da8:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   11dac:	90 e0       	ldi	r25, 0x00	; 0
   11dae:	7f de       	rcall	.-770    	; 0x11aae <AMIGO_is_MLA>
   11db0:	89 2b       	or	r24, r25
   11db2:	c9 f4       	brne	.+50     	; 0x11de6 <GPIB_COMMANDS+0x50>
            secondary = 0;
            return(status);
        }
#endif                      // ifdef AMIGO

        if ( SS80_is_MLA(listening) )
   11db4:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   11db8:	90 e0       	ldi	r25, 0x00	; 0
   11dba:	4c de       	rcall	.-872    	; 0x11a54 <SS80_is_MLA>
   11dbc:	89 2b       	or	r24, r25
   11dbe:	11 f5       	brne	.+68     	; 0x11e04 <GPIB_COMMANDS+0x6e>
            status = SS80_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MLA(listening) )
   11dc0:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   11dc4:	90 e0       	ldi	r25, 0x00	; 0
   11dc6:	a0 de       	rcall	.-704    	; 0x11b08 <PRINTER_is_MLA>
   11dc8:	89 2b       	or	r24, r25
   11dca:	59 f5       	brne	.+86     	; 0x11e22 <GPIB_COMMANDS+0x8c>
            return(status);
        }
    }

    ///@brief listening ?
    if(listening != UNL)
   11dcc:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   11dd0:	8f 33       	cpi	r24, 0x3F	; 63
   11dd2:	19 f4       	brne	.+6      	; 0x11dda <GPIB_COMMANDS+0x44>
            status = PRINTER_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }
    }
    return(0);
   11dd4:	80 e0       	ldi	r24, 0x00	; 0
   11dd6:	90 e0       	ldi	r25, 0x00	; 0

    ///@brief listening ?
    if(listening != UNL)
    {
#ifdef AMIGO
        if ( AMIGO_is_MTA(talking) )
   11dd8:	2e c0       	rjmp	.+92     	; 0x11e36 <GPIB_COMMANDS+0xa0>
   11dda:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   11dde:	90 e0       	ldi	r25, 0x00	; 0
   11de0:	75 de       	rcall	.-790    	; 0x11acc <AMIGO_is_MTA>
        {
            if(unread)
   11de2:	89 2b       	or	r24, r25
   11de4:	49 f0       	breq	.+18     	; 0x11df8 <GPIB_COMMANDS+0x62>
                gpib_unread(val);
   11de6:	11 23       	and	r17, r17
   11de8:	11 f0       	breq	.+4      	; 0x11dee <GPIB_COMMANDS+0x58>
   11dea:	ce 01       	movw	r24, r28
            status = AMIGO_COMMANDS(secondary);
   11dec:	a6 d8       	rcall	.-3764   	; 0x10f3a <gpib_unread>
   11dee:	80 91 87 1e 	lds	r24, 0x1E87	; 0x801e87 <secondary>
   11df2:	0e 94 14 be 	call	0x17c28	; 0x17c28 <AMIGO_COMMANDS>
            secondary = 0;
            return(status);
        }
#endif 

        if ( SS80_is_MTA(talking) )
   11df6:	1d c0       	rjmp	.+58     	; 0x11e32 <GPIB_COMMANDS+0x9c>
   11df8:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   11dfc:	90 e0       	ldi	r25, 0x00	; 0
   11dfe:	39 de       	rcall	.-910    	; 0x11a72 <SS80_is_MTA>
        {
            if(unread)
   11e00:	89 2b       	or	r24, r25
   11e02:	49 f0       	breq	.+18     	; 0x11e16 <GPIB_COMMANDS+0x80>
                gpib_unread(val);
   11e04:	11 23       	and	r17, r17
   11e06:	11 f0       	breq	.+4      	; 0x11e0c <GPIB_COMMANDS+0x76>
   11e08:	ce 01       	movw	r24, r28
            status = SS80_COMMANDS(secondary);
   11e0a:	97 d8       	rcall	.-3794   	; 0x10f3a <gpib_unread>
   11e0c:	80 91 87 1e 	lds	r24, 0x1E87	; 0x801e87 <secondary>
   11e10:	0e 94 71 b2 	call	0x164e2	; 0x164e2 <SS80_COMMANDS>
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MTA(talking) )
   11e14:	0e c0       	rjmp	.+28     	; 0x11e32 <GPIB_COMMANDS+0x9c>
   11e16:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   11e1a:	90 e0       	ldi	r25, 0x00	; 0
   11e1c:	84 de       	rcall	.-760    	; 0x11b26 <PRINTER_is_MTA>
        {
            if(unread)
   11e1e:	89 2b       	or	r24, r25
   11e20:	c9 f2       	breq	.-78     	; 0x11dd4 <GPIB_COMMANDS+0x3e>
                gpib_unread(val);
   11e22:	11 23       	and	r17, r17
   11e24:	11 f0       	breq	.+4      	; 0x11e2a <GPIB_COMMANDS+0x94>
   11e26:	ce 01       	movw	r24, r28
            status = PRINTER_COMMANDS(secondary);
   11e28:	88 d8       	rcall	.-3824   	; 0x10f3a <gpib_unread>
   11e2a:	80 91 87 1e 	lds	r24, 0x1E87	; 0x801e87 <secondary>
   11e2e:	0e 94 8d c0 	call	0x1811a	; 0x1811a <PRINTER_COMMANDS>
            secondary = 0;
   11e32:	10 92 87 1e 	sts	0x1E87, r1	; 0x801e87 <secondary>
            return(status);
        }
    }
    return(0);
}
   11e36:	df 91       	pop	r29
   11e38:	cf 91       	pop	r28
   11e3a:	1f 91       	pop	r17
   11e3c:	08 95       	ret

00011e3e <Send_Identify>:
///
/// @return  0 on GPIB error returns error flags
/// @see gpib.h ERROR_MASK for a full list.

int Send_Identify(uint8_t ch, uint16_t ID)
{
   11e3e:	cf 92       	push	r12
   11e40:	df 92       	push	r13
   11e42:	ff 92       	push	r15
   11e44:	0f 93       	push	r16
   11e46:	1f 93       	push	r17
   11e48:	cf 93       	push	r28
   11e4a:	df 93       	push	r29
   11e4c:	cd b7       	in	r28, 0x3d	; 61
   11e4e:	de b7       	in	r29, 0x3e	; 62
   11e50:	2b 97       	sbiw	r28, 0x0b	; 11
   11e52:	0f b6       	in	r0, 0x3f	; 63
   11e54:	f8 94       	cli
   11e56:	de bf       	out	0x3e, r29	; 62
   11e58:	0f be       	out	0x3f, r0	; 63
   11e5a:	cd bf       	out	0x3d, r28	; 61
   11e5c:	f8 2e       	mov	r15, r24
   11e5e:	6b 01       	movw	r12, r22
    uint16_t status = EOI_FLAG;
   11e60:	80 e0       	ldi	r24, 0x00	; 0
   11e62:	91 e0       	ldi	r25, 0x01	; 1
   11e64:	9b 87       	std	Y+11, r25	; 0x0b
   11e66:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t tmp[2];

    V2B_MSB(tmp,0,2,ID);
   11e68:	8b 01       	movw	r16, r22
   11e6a:	20 e0       	ldi	r18, 0x00	; 0
   11e6c:	30 e0       	ldi	r19, 0x00	; 0
   11e6e:	42 e0       	ldi	r20, 0x02	; 2
   11e70:	50 e0       	ldi	r21, 0x00	; 0
   11e72:	60 e0       	ldi	r22, 0x00	; 0
   11e74:	70 e0       	ldi	r23, 0x00	; 0
   11e76:	ce 01       	movw	r24, r28
   11e78:	08 96       	adiw	r24, 0x08	; 8
   11e7a:	18 d4       	rcall	.+2096   	; 0x126ac <V2B_MSB>
    if(gpib_write_str(tmp,2, &status) != 2)
   11e7c:	ae 01       	movw	r20, r28
   11e7e:	46 5f       	subi	r20, 0xF6	; 246
   11e80:	5f 4f       	sbci	r21, 0xFF	; 255
   11e82:	62 e0       	ldi	r22, 0x02	; 2
   11e84:	70 e0       	ldi	r23, 0x00	; 0
   11e86:	ce 01       	movw	r24, r28
   11e88:	08 96       	adiw	r24, 0x08	; 8
   11e8a:	22 dd       	rcall	.-1468   	; 0x118d0 <gpib_write_str>
   11e8c:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   11e90:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11e94:	02 97       	sbiw	r24, 0x02	; 2
   11e96:	79 f0       	breq	.+30     	; 0x11eb6 <Send_Identify+0x78>
    {
        if(debuglevel & (1+4))
   11e98:	25 70       	andi	r18, 0x05	; 5
   11e9a:	33 27       	eor	r19, r19
   11e9c:	23 2b       	or	r18, r19
   11e9e:	e9 f0       	breq	.+58     	; 0x11eda <Send_Identify+0x9c>
            printf("[IDENT Unit:%02XH=%04XH FAILED]\n", 
   11ea0:	ed b7       	in	r30, 0x3d	; 61
   11ea2:	fe b7       	in	r31, 0x3e	; 62
   11ea4:	d7 82       	std	Z+7, r13	; 0x07
   11ea6:	c6 82       	std	Z+6, r12	; 0x06
   11ea8:	8f 2d       	mov	r24, r15
   11eaa:	90 e0       	ldi	r25, 0x00	; 0
   11eac:	95 83       	std	Z+5, r25	; 0x05
   11eae:	84 83       	std	Z+4, r24	; 0x04
   11eb0:	8d e4       	ldi	r24, 0x4D	; 77
   11eb2:	92 e1       	ldi	r25, 0x12	; 18
   11eb4:	0c c0       	rjmp	.+24     	; 0x11ece <Send_Identify+0x90>
                (int)ch,(int)ID);
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & 4)
   11eb6:	22 ff       	sbrs	r18, 2
   11eb8:	10 c0       	rjmp	.+32     	; 0x11eda <Send_Identify+0x9c>
        printf("[IDENT Unit:%02XH=%04XH]\n", (int)ch,(int)ID);
   11eba:	ed b7       	in	r30, 0x3d	; 61
   11ebc:	fe b7       	in	r31, 0x3e	; 62
   11ebe:	d7 82       	std	Z+7, r13	; 0x07
   11ec0:	c6 82       	std	Z+6, r12	; 0x06
   11ec2:	8f 2d       	mov	r24, r15
   11ec4:	90 e0       	ldi	r25, 0x00	; 0
   11ec6:	95 83       	std	Z+5, r25	; 0x05
   11ec8:	84 83       	std	Z+4, r24	; 0x04
   11eca:	83 e3       	ldi	r24, 0x33	; 51
   11ecc:	92 e1       	ldi	r25, 0x12	; 18
   11ece:	a0 e0       	ldi	r26, 0x00	; 0
   11ed0:	81 83       	std	Z+1, r24	; 0x01
   11ed2:	92 83       	std	Z+2, r25	; 0x02
   11ed4:	a3 83       	std	Z+3, r26	; 0x03
   11ed6:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#endif
    return (status & ERROR_MASK);
   11eda:	8a 85       	ldd	r24, Y+10	; 0x0a
   11edc:	9b 85       	ldd	r25, Y+11	; 0x0b
   11ede:	88 27       	eor	r24, r24
   11ee0:	90 7d       	andi	r25, 0xD0	; 208
}
   11ee2:	2b 96       	adiw	r28, 0x0b	; 11
   11ee4:	0f b6       	in	r0, 0x3f	; 63
   11ee6:	f8 94       	cli
   11ee8:	de bf       	out	0x3e, r29	; 62
   11eea:	0f be       	out	0x3f, r0	; 63
   11eec:	cd bf       	out	0x3d, r28	; 61
   11eee:	df 91       	pop	r29
   11ef0:	cf 91       	pop	r28
   11ef2:	1f 91       	pop	r17
   11ef4:	0f 91       	pop	r16
   11ef6:	ff 90       	pop	r15
   11ef8:	df 90       	pop	r13
   11efa:	cf 90       	pop	r12
   11efc:	08 95       	ret

00011efe <GPIB>:
/// @return  0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list.

int GPIB(uint8_t ch)
{
   11efe:	00 d0       	rcall	.+0      	; 0x11f00 <GPIB+0x2>
   11f00:	00 d0       	rcall	.+0      	; 0x11f02 <GPIB+0x4>
   11f02:	1f 92       	push	r1
   11f04:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   11f08:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
    ///@brief Parallel Poll Configure
    ///TODO
    if(ch == PPC)
   11f0c:	85 30       	cpi	r24, 0x05	; 5
   11f0e:	89 f4       	brne	.+34     	; 0x11f32 <GPIB+0x34>
    {
#if SDEBUG
        if(debuglevel & (4+16))
   11f10:	24 71       	andi	r18, 0x14	; 20
   11f12:	33 27       	eor	r19, r19
   11f14:	23 2b       	or	r18, r19
   11f16:	51 f0       	breq	.+20     	; 0x11f2c <GPIB+0x2e>
            printf("[PPC unsupported]\n");
   11f18:	80 e2       	ldi	r24, 0x20	; 32
   11f1a:	92 e1       	ldi	r25, 0x12	; 18
   11f1c:	a0 e0       	ldi	r26, 0x00	; 0
   11f1e:	ed b7       	in	r30, 0x3d	; 61
   11f20:	fe b7       	in	r31, 0x3e	; 62
   11f22:	81 83       	std	Z+1, r24	; 0x01
   11f24:	92 83       	std	Z+2, r25	; 0x02
   11f26:	a3 83       	std	Z+3, r26	; 0x03
   11f28:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#endif
        spoll = 0;
   11f2c:	10 92 83 1e 	sts	0x1E83, r1	; 0x801e83 <spoll>
   11f30:	9c c0       	rjmp	.+312    	; 0x1206a <GPIB+0x16c>
        return 0;
    }
    ///@brief Parallel Poll Unconfigure
    ///TODO
    if(ch == PPU)
   11f32:	85 31       	cpi	r24, 0x15	; 21
   11f34:	39 f4       	brne	.+14     	; 0x11f44 <GPIB+0x46>
    {
#if SDEBUG
        if(debuglevel & (4+16))
   11f36:	24 71       	andi	r18, 0x14	; 20
   11f38:	33 27       	eor	r19, r19
   11f3a:	23 2b       	or	r18, r19
   11f3c:	b9 f3       	breq	.-18     	; 0x11f2c <GPIB+0x2e>
            printf("[PPU unsupported]\n");
   11f3e:	8d e0       	ldi	r24, 0x0D	; 13
   11f40:	92 e1       	ldi	r25, 0x12	; 18
   11f42:	ec cf       	rjmp	.-40     	; 0x11f1c <GPIB+0x1e>
    }

/// @todo FIXME
#if defined(SPOLL)
    ///@brief Serial Poll Enable
    if(ch == SPE)
   11f44:	88 31       	cpi	r24, 0x18	; 24
   11f46:	c9 f4       	brne	.+50     	; 0x11f7a <GPIB+0x7c>
    {
#if SDEBUG
        if(debuglevel & 4)
   11f48:	22 ff       	sbrs	r18, 2
   11f4a:	0a c0       	rjmp	.+20     	; 0x11f60 <GPIB+0x62>
            printf("[SPE]\n");
   11f4c:	86 e0       	ldi	r24, 0x06	; 6
   11f4e:	92 e1       	ldi	r25, 0x12	; 18
   11f50:	a0 e0       	ldi	r26, 0x00	; 0
   11f52:	ed b7       	in	r30, 0x3d	; 61
   11f54:	fe b7       	in	r31, 0x3e	; 62
   11f56:	81 83       	std	Z+1, r24	; 0x01
   11f58:	92 83       	std	Z+2, r25	; 0x02
   11f5a:	a3 83       	std	Z+3, r26	; 0x03
   11f5c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#endif
        spoll = 1;
   11f60:	81 e0       	ldi	r24, 0x01	; 1
   11f62:	80 93 83 1e 	sts	0x1E83, r24	; 0x801e83 <spoll>
        if(SS80_is_MTA(talking))
   11f66:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   11f6a:	90 e0       	ldi	r25, 0x00	; 0
   11f6c:	82 dd       	rcall	.-1276   	; 0x11a72 <SS80_is_MTA>
   11f6e:	89 2b       	or	r24, r25
   11f70:	09 f4       	brne	.+2      	; 0x11f74 <GPIB+0x76>
   11f72:	7b c0       	rjmp	.+246    	; 0x1206a <GPIB+0x16c>
        {
            return( SS80_Report() );
   11f74:	0e 94 2a ae 	call	0x15c54	; 0x15c54 <SS80_Report>
   11f78:	7a c0       	rjmp	.+244    	; 0x1206e <GPIB+0x170>
        }
        return 0;
    }

    ///@brief Serial Poll Disable
    if(ch == SPD)
   11f7a:	89 31       	cpi	r24, 0x19	; 25
   11f7c:	29 f4       	brne	.+10     	; 0x11f88 <GPIB+0x8a>
    {
#if SDEBUG
        if(debuglevel & 4)
   11f7e:	22 ff       	sbrs	r18, 2
   11f80:	d5 cf       	rjmp	.-86     	; 0x11f2c <GPIB+0x2e>
            printf("[SPD]\n");
   11f82:	8f ef       	ldi	r24, 0xFF	; 255
   11f84:	91 e1       	ldi	r25, 0x11	; 17
   11f86:	ca cf       	rjmp	.-108    	; 0x11f1c <GPIB+0x1e>
        return 0;
    }
#endif                      // #if defined(SPOLL)

    ///@brief Selected Device Clear
    if(ch == SDC )
   11f88:	84 30       	cpi	r24, 0x04	; 4
   11f8a:	09 f0       	breq	.+2      	; 0x11f8e <GPIB+0x90>
   11f8c:	48 c0       	rjmp	.+144    	; 0x1201e <GPIB+0x120>
    {
#if SDEBUG
        if(debuglevel & 4)
   11f8e:	22 ff       	sbrs	r18, 2
   11f90:	0a c0       	rjmp	.+20     	; 0x11fa6 <GPIB+0xa8>
            printf("[SDC]\n");
   11f92:	88 ef       	ldi	r24, 0xF8	; 248
   11f94:	91 e1       	ldi	r25, 0x11	; 17
   11f96:	a0 e0       	ldi	r26, 0x00	; 0
   11f98:	ed b7       	in	r30, 0x3d	; 61
   11f9a:	fe b7       	in	r31, 0x3e	; 62
   11f9c:	81 83       	std	Z+1, r24	; 0x01
   11f9e:	92 83       	std	Z+2, r25	; 0x02
   11fa0:	a3 83       	std	Z+3, r26	; 0x03
   11fa2:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#endif
        if(SS80_is_MLA(listening))
   11fa6:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   11faa:	90 e0       	ldi	r25, 0x00	; 0
   11fac:	53 dd       	rcall	.-1370   	; 0x11a54 <SS80_is_MLA>
   11fae:	89 2b       	or	r24, r25
   11fb0:	d9 f0       	breq	.+54     	; 0x11fe8 <GPIB+0xea>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
///  CS80 3-4
#if SDEBUG
            if(debuglevel & (4+32))
   11fb2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11fb6:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11fba:	84 72       	andi	r24, 0x24	; 36
   11fbc:	99 27       	eor	r25, r25
   11fbe:	89 2b       	or	r24, r25
   11fc0:	51 f0       	breq	.+20     	; 0x11fd6 <GPIB+0xd8>
                printf("[SDC SS80]\n");
   11fc2:	8c ee       	ldi	r24, 0xEC	; 236
   11fc4:	91 e1       	ldi	r25, 0x11	; 17
   11fc6:	a0 e0       	ldi	r26, 0x00	; 0
   11fc8:	ed b7       	in	r30, 0x3d	; 61
   11fca:	fe b7       	in	r31, 0x3e	; 62
   11fcc:	81 83       	std	Z+1, r24	; 0x01
   11fce:	92 83       	std	Z+2, r25	; 0x02
   11fd0:	a3 83       	std	Z+3, r26	; 0x03
   11fd2:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#endif
            return(SS80_Selected_Device_Clear(SS80s->unitNO) );
   11fd6:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   11fda:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   11fde:	85 81       	ldd	r24, Z+5	; 0x05
   11fe0:	90 e0       	ldi	r25, 0x00	; 0
   11fe2:	0e 94 f6 ae 	call	0x15dec	; 0x15dec <SS80_Selected_Device_Clear>
   11fe6:	43 c0       	rjmp	.+134    	; 0x1206e <GPIB+0x170>
        }

#ifdef AMIGO
        if(AMIGO_is_MLA(listening))
   11fe8:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   11fec:	90 e0       	ldi	r25, 0x00	; 0
   11fee:	5f dd       	rcall	.-1346   	; 0x11aae <AMIGO_is_MLA>
   11ff0:	89 2b       	or	r24, r25
   11ff2:	d9 f1       	breq	.+118    	; 0x1206a <GPIB+0x16c>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
#if SDEBUG
            if(debuglevel & (4+32))
   11ff4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   11ff8:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   11ffc:	84 72       	andi	r24, 0x24	; 36
   11ffe:	99 27       	eor	r25, r25
   12000:	89 2b       	or	r24, r25
   12002:	51 f0       	breq	.+20     	; 0x12018 <GPIB+0x11a>
                printf("[SDC AMIGO]\n");
   12004:	8f ed       	ldi	r24, 0xDF	; 223
   12006:	91 e1       	ldi	r25, 0x11	; 17
   12008:	a0 e0       	ldi	r26, 0x00	; 0
   1200a:	ed b7       	in	r30, 0x3d	; 61
   1200c:	fe b7       	in	r31, 0x3e	; 62
   1200e:	81 83       	std	Z+1, r24	; 0x01
   12010:	92 83       	std	Z+2, r25	; 0x02
   12012:	a3 83       	std	Z+3, r26	; 0x03
   12014:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#endif
            return( amigo_cmd_clear() );
   12018:	0e 94 fc b8 	call	0x171f8	; 0x171f8 <amigo_cmd_clear>
   1201c:	28 c0       	rjmp	.+80     	; 0x1206e <GPIB+0x170>
        /// @todo FIXME
        return( 0 );
    }

    ///@brief   (Universal) Device Clear
    if(ch == DCL )
   1201e:	84 31       	cpi	r24, 0x14	; 20
   12020:	99 f4       	brne	.+38     	; 0x12048 <GPIB+0x14a>
    {
#if SDEBUG
        if(debuglevel & 4)
   12022:	22 ff       	sbrs	r18, 2
   12024:	0a c0       	rjmp	.+20     	; 0x1203a <GPIB+0x13c>
            printf("[DCL]\n");
   12026:	88 ed       	ldi	r24, 0xD8	; 216
   12028:	91 e1       	ldi	r25, 0x11	; 17
   1202a:	a0 e0       	ldi	r26, 0x00	; 0
   1202c:	ed b7       	in	r30, 0x3d	; 61
   1202e:	fe b7       	in	r31, 0x3e	; 62
   12030:	81 83       	std	Z+1, r24	; 0x01
   12032:	92 83       	std	Z+2, r25	; 0x02
   12034:	a3 83       	std	Z+3, r26	; 0x03
   12036:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#endif
        SS80_Universal_Device_Clear();
   1203a:	0e 94 e8 ae 	call	0x15dd0	; 0x15dd0 <SS80_Universal_Device_Clear>

#ifdef AMIGO
        amigo_cmd_clear();
   1203e:	0e 94 fc b8 	call	0x171f8	; 0x171f8 <amigo_cmd_clear>
#endif

/// @todo Fixme
        printer_close();
   12042:	0e 94 19 bf 	call	0x17e32	; 0x17e32 <printer_close>
   12046:	11 c0       	rjmp	.+34     	; 0x1206a <GPIB+0x16c>
        return( 0 );
    }

    if(debuglevel & (1+4+16))
   12048:	25 71       	andi	r18, 0x15	; 21
   1204a:	33 27       	eor	r19, r19
   1204c:	23 2b       	or	r18, r19
   1204e:	69 f0       	breq	.+26     	; 0x1206a <GPIB+0x16c>
        printf("[HPIB (%02XH) not defined]\n", 0xff & ch);
   12050:	90 e0       	ldi	r25, 0x00	; 0
   12052:	ed b7       	in	r30, 0x3d	; 61
   12054:	fe b7       	in	r31, 0x3e	; 62
   12056:	95 83       	std	Z+5, r25	; 0x05
   12058:	84 83       	std	Z+4, r24	; 0x04
   1205a:	8c eb       	ldi	r24, 0xBC	; 188
   1205c:	91 e1       	ldi	r25, 0x11	; 17
   1205e:	a0 e0       	ldi	r26, 0x00	; 0
   12060:	81 83       	std	Z+1, r24	; 0x01
   12062:	92 83       	std	Z+2, r25	; 0x02
   12064:	a3 83       	std	Z+3, r26	; 0x03
   12066:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    return(0);
   1206a:	80 e0       	ldi	r24, 0x00	; 0
   1206c:	90 e0       	ldi	r25, 0x00	; 0
}
   1206e:	0f 90       	pop	r0
   12070:	0f 90       	pop	r0
   12072:	0f 90       	pop	r0
   12074:	0f 90       	pop	r0
   12076:	0f 90       	pop	r0
   12078:	08 95       	ret

0001207a <GPIB_TALK>:
/// @param[in] ch 8 bit talk command
///
/// @return  0

int GPIB_TALK(uint8_t ch)
{
   1207a:	cf 93       	push	r28
   1207c:	df 93       	push	r29
   1207e:	00 d0       	rcall	.+0      	; 0x12080 <GPIB_TALK+0x6>
   12080:	00 d0       	rcall	.+0      	; 0x12082 <GPIB_TALK+0x8>
   12082:	1f 92       	push	r1

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///  save talking state
    talking_last = talking;
   12084:	90 91 86 1e 	lds	r25, 0x1E86	; 0x801e86 <talking>
   12088:	90 93 89 1e 	sts	0x1E89, r25	; 0x801e89 <talking_last>
    talking = ch;
   1208c:	80 93 86 1e 	sts	0x1E86, r24	; 0x801e86 <talking>

    talk_cleanup();

    ///@brief  Universal Untalk
    if(ch == UNT)
   12090:	8f 35       	cpi	r24, 0x5F	; 95
   12092:	79 f4       	brne	.+30     	; 0x120b2 <GPIB_TALK+0x38>
    {
        //FIXME talking = 0 ????
#if SDEBUG
        if(debuglevel & 4)
   12094:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   12098:	82 ff       	sbrs	r24, 2
   1209a:	7f c0       	rjmp	.+254    	; 0x1219a <GPIB_TALK+0x120>
            printf("[UNT]\n");
   1209c:	89 e6       	ldi	r24, 0x69	; 105
   1209e:	91 e1       	ldi	r25, 0x11	; 17
   120a0:	a0 e0       	ldi	r26, 0x00	; 0
   120a2:	ed b7       	in	r30, 0x3d	; 61
   120a4:	fe b7       	in	r31, 0x3e	; 62
   120a6:	81 83       	std	Z+1, r24	; 0x01
   120a8:	92 83       	std	Z+2, r25	; 0x02
   120aa:	a3 83       	std	Z+3, r26	; 0x03
   120ac:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   120b0:	74 c0       	rjmp	.+232    	; 0x1219a <GPIB_TALK+0x120>
#endif
        return(0);
    }

    
    if(SS80_is_MTA(ch))
   120b2:	c8 2f       	mov	r28, r24
   120b4:	d0 e0       	ldi	r29, 0x00	; 0
   120b6:	ce 01       	movw	r24, r28
   120b8:	dc dc       	rcall	.-1608   	; 0x11a72 <SS80_is_MTA>
   120ba:	89 2b       	or	r24, r25
   120bc:	e1 f0       	breq	.+56     	; 0x120f6 <GPIB_TALK+0x7c>
    {
#if SDEBUG
        if(debuglevel & (4+32))
   120be:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   120c2:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   120c6:	84 72       	andi	r24, 0x24	; 36
   120c8:	99 27       	eor	r25, r25
   120ca:	89 2b       	or	r24, r25
   120cc:	61 f0       	breq	.+24     	; 0x120e6 <GPIB_TALK+0x6c>
            printf("[TA %02XH SS80]\n", 0xff & ch);
   120ce:	ed b7       	in	r30, 0x3d	; 61
   120d0:	fe b7       	in	r31, 0x3e	; 62
   120d2:	d5 83       	std	Z+5, r29	; 0x05
   120d4:	c4 83       	std	Z+4, r28	; 0x04
   120d6:	88 e5       	ldi	r24, 0x58	; 88
   120d8:	91 e1       	ldi	r25, 0x11	; 17
   120da:	a0 e0       	ldi	r26, 0x00	; 0
   120dc:	81 83       	std	Z+1, r24	; 0x01
   120de:	92 83       	std	Z+2, r25	; 0x02
   120e0:	a3 83       	std	Z+3, r26	; 0x03
   120e2:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#endif

        if (spoll)
   120e6:	80 91 83 1e 	lds	r24, 0x1E83	; 0x801e83 <spoll>
   120ea:	88 23       	and	r24, r24
   120ec:	09 f4       	brne	.+2      	; 0x120f0 <GPIB_TALK+0x76>
   120ee:	55 c0       	rjmp	.+170    	; 0x1219a <GPIB_TALK+0x120>
        {
            SS80_Report();
   120f0:	0e 94 2a ae 	call	0x15c54	; 0x15c54 <SS80_Report>
        }
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MTA(ch))
   120f4:	52 c0       	rjmp	.+164    	; 0x1219a <GPIB_TALK+0x120>
   120f6:	ce 01       	movw	r24, r28
   120f8:	e9 dc       	rcall	.-1582   	; 0x11acc <AMIGO_is_MTA>
   120fa:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (4+32))
   120fc:	81 f0       	breq	.+32     	; 0x1211e <GPIB_TALK+0xa4>
   120fe:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   12102:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12106:	84 72       	andi	r24, 0x24	; 36
   12108:	99 27       	eor	r25, r25
   1210a:	89 2b       	or	r24, r25
   1210c:	09 f4       	brne	.+2      	; 0x12110 <GPIB_TALK+0x96>
            printf("[TA %02XH AMIGO]\n", 0xff & ch);
   1210e:	45 c0       	rjmp	.+138    	; 0x1219a <GPIB_TALK+0x120>
   12110:	ed b7       	in	r30, 0x3d	; 61
   12112:	fe b7       	in	r31, 0x3e	; 62
   12114:	d5 83       	std	Z+5, r29	; 0x05
   12116:	c4 83       	std	Z+4, r28	; 0x04
   12118:	86 e4       	ldi	r24, 0x46	; 70
#endif
        return(0);
    }
#endif                      // #ifdef AMIGO

    if(PRINTER_is_MTA(ch))
   1211a:	91 e1       	ldi	r25, 0x11	; 17
   1211c:	38 c0       	rjmp	.+112    	; 0x1218e <GPIB_TALK+0x114>
   1211e:	ce 01       	movw	r24, r28
   12120:	02 dd       	rcall	.-1532   	; 0x11b26 <PRINTER_is_MTA>
   12122:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (4+32))
   12124:	79 f0       	breq	.+30     	; 0x12144 <GPIB_TALK+0xca>
   12126:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1212a:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1212e:	84 72       	andi	r24, 0x24	; 36
   12130:	99 27       	eor	r25, r25
   12132:	89 2b       	or	r24, r25
            printf("[TA %02XH PRINTER]\n", 0xff & ch);
   12134:	91 f1       	breq	.+100    	; 0x1219a <GPIB_TALK+0x120>
   12136:	ed b7       	in	r30, 0x3d	; 61
   12138:	fe b7       	in	r31, 0x3e	; 62
   1213a:	d5 83       	std	Z+5, r29	; 0x05
   1213c:	c4 83       	std	Z+4, r28	; 0x04
   1213e:	82 e3       	ldi	r24, 0x32	; 50
#endif
        return(0);
    }

    if(PRINTER_is_MLA(listening))
   12140:	91 e1       	ldi	r25, 0x11	; 17
   12142:	25 c0       	rjmp	.+74     	; 0x1218e <GPIB_TALK+0x114>
   12144:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   12148:	90 e0       	ldi	r25, 0x00	; 0
   1214a:	de dc       	rcall	.-1604   	; 0x11b08 <PRINTER_is_MLA>
   1214c:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   12150:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
    {
        if(debuglevel & (4+32))
   12154:	89 2b       	or	r24, r25
   12156:	99 f0       	breq	.+38     	; 0x1217e <GPIB_TALK+0x104>
   12158:	24 72       	andi	r18, 0x24	; 36
   1215a:	33 27       	eor	r19, r19
            printf("[PRINTER OPEN]\n");
   1215c:	23 2b       	or	r18, r19
   1215e:	51 f0       	breq	.+20     	; 0x12174 <GPIB_TALK+0xfa>
   12160:	82 e2       	ldi	r24, 0x22	; 34
   12162:	91 e1       	ldi	r25, 0x11	; 17
   12164:	a0 e0       	ldi	r26, 0x00	; 0
   12166:	ed b7       	in	r30, 0x3d	; 61
   12168:	fe b7       	in	r31, 0x3e	; 62
   1216a:	81 83       	std	Z+1, r24	; 0x01
   1216c:	92 83       	std	Z+2, r25	; 0x02
   1216e:	a3 83       	std	Z+3, r26	; 0x03
        printer_open(NULL);
   12170:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   12174:	80 e0       	ldi	r24, 0x00	; 0
   12176:	90 e0       	ldi	r25, 0x00	; 0
   12178:	0e 94 71 bf 	call	0x17ee2	; 0x17ee2 <printer_open>
        return(0);
    }

#if SDEBUG
    if(debuglevel & 4)
   1217c:	0e c0       	rjmp	.+28     	; 0x1219a <GPIB_TALK+0x120>
        printf("[TA %02XH]\n", 0xff & ch);
   1217e:	22 ff       	sbrs	r18, 2
   12180:	0c c0       	rjmp	.+24     	; 0x1219a <GPIB_TALK+0x120>
   12182:	ed b7       	in	r30, 0x3d	; 61
   12184:	fe b7       	in	r31, 0x3e	; 62
   12186:	d5 83       	std	Z+5, r29	; 0x05
   12188:	c4 83       	std	Z+4, r28	; 0x04
   1218a:	86 e1       	ldi	r24, 0x16	; 22
   1218c:	91 e1       	ldi	r25, 0x11	; 17
   1218e:	a0 e0       	ldi	r26, 0x00	; 0
   12190:	81 83       	std	Z+1, r24	; 0x01
   12192:	92 83       	std	Z+2, r25	; 0x02
   12194:	a3 83       	std	Z+3, r26	; 0x03
#endif
    return(0);
}                                                 // Talk Address primary address group
   12196:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1219a:	80 e0       	ldi	r24, 0x00	; 0
   1219c:	90 e0       	ldi	r25, 0x00	; 0
   1219e:	cd b7       	in	r28, 0x3d	; 61
   121a0:	de b7       	in	r29, 0x3e	; 62
   121a2:	25 96       	adiw	r28, 0x05	; 5
   121a4:	e2 e0       	ldi	r30, 0x02	; 2
   121a6:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

000121aa <GPIB_SECONDARY_ADDRESS>:
///
/// @param[in] ch 8 bit secondary address.
///
/// @return  0
int GPIB_SECONDARY_ADDRESS(uint8_t ch)
{
   121aa:	a9 e0       	ldi	r26, 0x09	; 9
   121ac:	b0 e0       	ldi	r27, 0x00	; 0
   121ae:	eb ed       	ldi	r30, 0xDB	; 219
   121b0:	f0 e9       	ldi	r31, 0x90	; 144
   121b2:	0c 94 95 e4 	jmp	0x1c92a	; 0x1c92a <__prologue_saves__+0x1e>
   121b6:	18 2f       	mov	r17, r24
///  note: any errors will reset lastcmd
///  Universal Talk mode
///  Treat this as a Secondary Address ?
///  SS80 Ident 4-31
///  If we have our secondary address then send IDENT
    if(SS80_is_MSA(ch) )
   121b8:	c8 2f       	mov	r28, r24
   121ba:	d0 e0       	ldi	r29, 0x00	; 0
   121bc:	ce 01       	movw	r24, r28
   121be:	68 dc       	rcall	.-1840   	; 0x11a90 <SS80_is_MSA>
   121c0:	89 2b       	or	r24, r25
   121c2:	09 f1       	breq	.+66     	; 0x12206 <GPIB_SECONDARY_ADDRESS+0x5c>
    {
#if SDEBUG
        if(debuglevel & (4+32))
   121c4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   121c8:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   121cc:	84 72       	andi	r24, 0x24	; 36
   121ce:	99 27       	eor	r25, r25
   121d0:	89 2b       	or	r24, r25
   121d2:	61 f0       	breq	.+24     	; 0x121ec <GPIB_SECONDARY_ADDRESS+0x42>
            printf("[SA %02XH SS80]\n", 0xff & ch);
   121d4:	ed b7       	in	r30, 0x3d	; 61
   121d6:	fe b7       	in	r31, 0x3e	; 62
   121d8:	d5 83       	std	Z+5, r29	; 0x05
   121da:	c4 83       	std	Z+4, r28	; 0x04
   121dc:	85 e0       	ldi	r24, 0x05	; 5
   121de:	91 e1       	ldi	r25, 0x11	; 17
   121e0:	a0 e0       	ldi	r26, 0x00	; 0
   121e2:	81 83       	std	Z+1, r24	; 0x01
   121e4:	92 83       	std	Z+2, r25	; 0x02
   121e6:	a3 83       	std	Z+3, r26	; 0x03
   121e8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#endif
        ///@brief ch = secondary address
        gpib_disable_PPR(SS80p->HEADER.PPR);
   121ec:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   121f0:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   121f4:	81 81       	ldd	r24, Z+1	; 0x01
   121f6:	90 e0       	ldi	r25, 0x00	; 0
   121f8:	0e 94 44 87 	call	0x10e88	; 0x10e88 <gpib_disable_PPR>
        return(Send_Identify( ch, SS80p->CONFIG.ID) );
   121fc:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   12200:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>

    }

#ifdef AMIGO
    if(AMIGO_is_MSA(ch) )
   12204:	25 c0       	rjmp	.+74     	; 0x12250 <GPIB_SECONDARY_ADDRESS+0xa6>
   12206:	ce 01       	movw	r24, r28
   12208:	70 dc       	rcall	.-1824   	; 0x11aea <AMIGO_is_MSA>
   1220a:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1220e:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12212:	89 2b       	or	r24, r25
    {
/// @todo 
///     Two identify bytes should be repeated until untalked
#if SDEBUG
        if(debuglevel & (4+32))
   12214:	11 f1       	breq	.+68     	; 0x1225a <GPIB_SECONDARY_ADDRESS+0xb0>
   12216:	c9 01       	movw	r24, r18
   12218:	84 72       	andi	r24, 0x24	; 36
   1221a:	99 27       	eor	r25, r25
   1221c:	89 2b       	or	r24, r25
            printf("[SA %02XH AMIGO]\n", 0xff & ch);
   1221e:	61 f0       	breq	.+24     	; 0x12238 <GPIB_SECONDARY_ADDRESS+0x8e>
   12220:	ed b7       	in	r30, 0x3d	; 61
   12222:	fe b7       	in	r31, 0x3e	; 62
   12224:	d5 83       	std	Z+5, r29	; 0x05
   12226:	c4 83       	std	Z+4, r28	; 0x04
   12228:	83 ef       	ldi	r24, 0xF3	; 243
   1222a:	90 e1       	ldi	r25, 0x10	; 16
   1222c:	a0 e0       	ldi	r26, 0x00	; 0
   1222e:	81 83       	std	Z+1, r24	; 0x01
   12230:	92 83       	std	Z+2, r25	; 0x02
   12232:	a3 83       	std	Z+3, r26	; 0x03
   12234:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#endif
        ///@brief ch = secondary address
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   12238:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   1223c:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   12240:	81 81       	ldd	r24, Z+1	; 0x01
   12242:	90 e0       	ldi	r25, 0x00	; 0
   12244:	0e 94 44 87 	call	0x10e88	; 0x10e88 <gpib_disable_PPR>
        return( Send_Identify( ch, AMIGOp->CONFIG.ID) );
   12248:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   1224c:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   12250:	64 81       	ldd	r22, Z+4	; 0x04
   12252:	75 81       	ldd	r23, Z+5	; 0x05
   12254:	81 2f       	mov	r24, r17
   12256:	f3 dd       	rcall	.-1050   	; 0x11e3e <Send_Identify>
    }
#endif                      // #ifdef AMIGO

#if SDEBUG
    if(debuglevel & (4+32))
   12258:	1d c0       	rjmp	.+58     	; 0x12294 <GPIB_SECONDARY_ADDRESS+0xea>
   1225a:	c9 01       	movw	r24, r18
   1225c:	84 72       	andi	r24, 0x24	; 36
   1225e:	99 27       	eor	r25, r25
   12260:	00 97       	sbiw	r24, 0x00	; 0
        printf("[SA %02XH, listen:%02XH, talk:%02XH]\n",
   12262:	c1 f0       	breq	.+48     	; 0x12294 <GPIB_SECONDARY_ADDRESS+0xea>
   12264:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   12268:	90 e0       	ldi	r25, 0x00	; 0
   1226a:	ed b7       	in	r30, 0x3d	; 61
   1226c:	fe b7       	in	r31, 0x3e	; 62
   1226e:	91 87       	std	Z+9, r25	; 0x09
   12270:	80 87       	std	Z+8, r24	; 0x08
   12272:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   12276:	90 e0       	ldi	r25, 0x00	; 0
   12278:	97 83       	std	Z+7, r25	; 0x07
   1227a:	86 83       	std	Z+6, r24	; 0x06
   1227c:	d5 83       	std	Z+5, r29	; 0x05
   1227e:	c4 83       	std	Z+4, r28	; 0x04
   12280:	8d ec       	ldi	r24, 0xCD	; 205
   12282:	90 e1       	ldi	r25, 0x10	; 16
   12284:	a0 e0       	ldi	r26, 0x00	; 0
   12286:	81 83       	std	Z+1, r24	; 0x01
   12288:	92 83       	std	Z+2, r25	; 0x02
   1228a:	a3 83       	std	Z+3, r26	; 0x03
   1228c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
#endif
    return(0);
   12290:	80 e0       	ldi	r24, 0x00	; 0
} 
   12292:	90 e0       	ldi	r25, 0x00	; 0
   12294:	cd b7       	in	r28, 0x3d	; 61
   12296:	de b7       	in	r29, 0x3e	; 62
   12298:	29 96       	adiw	r28, 0x09	; 9
   1229a:	e3 e0       	ldi	r30, 0x03	; 3
   1229c:	0c 94 b1 e4 	jmp	0x1c962	; 0x1c962 <__epilogue_restores__+0x1e>

000122a0 <listen_cleanup>:
/// - Used to cleanup or close at the end of any listen address transition.
/// - Also called when GPIB bus reset or unlisten.
/// For now we just use this to close printer capture
/// @return  void
void listen_cleanup()
{
   122a0:	00 d0       	rcall	.+0      	; 0x122a2 <listen_cleanup+0x2>
   122a2:	1f 92       	push	r1
    if(listening_last)
   122a4:	60 91 82 1e 	lds	r22, 0x1E82	; 0x801e82 <listening_last>
   122a8:	66 23       	and	r22, r22
   122aa:	e1 f0       	breq	.+56     	; 0x122e4 <listen_cleanup+0x44>
    {
        int index = find_device(PRINTER_TYPE, listening_last, BASE_MLA);
   122ac:	70 e0       	ldi	r23, 0x00	; 0
   122ae:	40 e2       	ldi	r20, 0x20	; 32
   122b0:	50 e0       	ldi	r21, 0x00	; 0
   122b2:	84 e0       	ldi	r24, 0x04	; 4
   122b4:	90 e0       	ldi	r25, 0x00	; 0
   122b6:	a2 d2       	rcall	.+1348   	; 0x127fc <find_device>
        if(index == -1)
   122b8:	01 96       	adiw	r24, 0x01	; 1
   122ba:	a1 f0       	breq	.+40     	; 0x122e4 <listen_cleanup+0x44>
            return;

        //We should not set the active device globally
        //FIXME if we have to then printer close should temprarily do so
        if(debuglevel & (4+32))
   122bc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   122c0:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   122c4:	84 72       	andi	r24, 0x24	; 36
   122c6:	99 27       	eor	r25, r25
   122c8:	89 2b       	or	r24, r25
   122ca:	51 f0       	breq	.+20     	; 0x122e0 <listen_cleanup+0x40>
            printf("[PRINTER close]\n");
   122cc:	8c eb       	ldi	r24, 0xBC	; 188
   122ce:	90 e1       	ldi	r25, 0x10	; 16
   122d0:	a0 e0       	ldi	r26, 0x00	; 0
   122d2:	ed b7       	in	r30, 0x3d	; 61
   122d4:	fe b7       	in	r31, 0x3e	; 62
   122d6:	81 83       	std	Z+1, r24	; 0x01
   122d8:	92 83       	std	Z+2, r25	; 0x02
   122da:	a3 83       	std	Z+3, r26	; 0x03
   122dc:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        printer_close();
   122e0:	0e 94 19 bf 	call	0x17e32	; 0x17e32 <printer_close>
    }
}
   122e4:	0f 90       	pop	r0
   122e6:	0f 90       	pop	r0
   122e8:	0f 90       	pop	r0
   122ea:	08 95       	ret

000122ec <GPIB_LISTEN>:
/// @param[in] ch 8 bit listen command
///
/// @return  0 

int GPIB_LISTEN(uint8_t ch)
{
   122ec:	cf 93       	push	r28
   122ee:	df 93       	push	r29
   122f0:	00 d0       	rcall	.+0      	; 0x122f2 <GPIB_LISTEN+0x6>
   122f2:	00 d0       	rcall	.+0      	; 0x122f4 <GPIB_LISTEN+0x8>
   122f4:	1f 92       	push	r1
   122f6:	c8 2f       	mov	r28, r24
    listening_last = listening;
   122f8:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   122fc:	80 93 82 1e 	sts	0x1E82, r24	; 0x801e82 <listening_last>
    listening = ch;
   12300:	c0 93 88 1e 	sts	0x1E88, r28	; 0x801e88 <listening>
    listen_cleanup();

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
    ///@brief  Universal Unlisten
    if(ch == UNL)                                 
   12304:	cd df       	rcall	.-102    	; 0x122a0 <listen_cleanup>
   12306:	cf 33       	cpi	r28, 0x3F	; 63
    {
        listening = 0;
   12308:	19 f5       	brne	.+70     	; 0x12350 <GPIB_LISTEN+0x64>
   1230a:	10 92 88 1e 	sts	0x1E88, r1	; 0x801e88 <listening>
    
#if SDEBUG
        if(debuglevel & 4)
   1230e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   12312:	82 ff       	sbrs	r24, 2
        {
            printf("[UNL]\n");
   12314:	74 c0       	rjmp	.+232    	; 0x123fe <GPIB_LISTEN+0x112>
   12316:	85 eb       	ldi	r24, 0xB5	; 181
   12318:	91 e1       	ldi	r25, 0x11	; 17
   1231a:	a0 e0       	ldi	r26, 0x00	; 0
   1231c:	ed b7       	in	r30, 0x3d	; 61
   1231e:	fe b7       	in	r31, 0x3e	; 62
   12320:	81 83       	std	Z+1, r24	; 0x01
   12322:	92 83       	std	Z+2, r25	; 0x02
   12324:	a3 83       	std	Z+3, r26	; 0x03
   12326:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            ///@brief add a line break if we both Untalk and Unlisten
            if(lastcmd == UNT)
   1232a:	80 91 80 1c 	lds	r24, 0x1C80	; 0x801c80 <lastcmd>
   1232e:	90 91 81 1c 	lds	r25, 0x1C81	; 0x801c81 <lastcmd+0x1>
   12332:	8f 35       	cpi	r24, 0x5F	; 95
   12334:	91 05       	cpc	r25, r1
   12336:	09 f0       	breq	.+2      	; 0x1233a <GPIB_LISTEN+0x4e>
                printf("\n");
   12338:	62 c0       	rjmp	.+196    	; 0x123fe <GPIB_LISTEN+0x112>
   1233a:	83 eb       	ldi	r24, 0xB3	; 179
   1233c:	91 e1       	ldi	r25, 0x11	; 17
   1233e:	a0 e0       	ldi	r26, 0x00	; 0
   12340:	ed b7       	in	r30, 0x3d	; 61
   12342:	fe b7       	in	r31, 0x3e	; 62
   12344:	81 83       	std	Z+1, r24	; 0x01
   12346:	92 83       	std	Z+2, r25	; 0x02
   12348:	a3 83       	std	Z+3, r26	; 0x03
   1234a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#endif
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MLA(ch))
   1234e:	57 c0       	rjmp	.+174    	; 0x123fe <GPIB_LISTEN+0x112>
   12350:	d0 e0       	ldi	r29, 0x00	; 0
   12352:	ce 01       	movw	r24, r28
   12354:	ac db       	rcall	.-2216   	; 0x11aae <AMIGO_is_MLA>
   12356:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (4+32))
   12358:	81 f0       	breq	.+32     	; 0x1237a <GPIB_LISTEN+0x8e>
   1235a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1235e:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12362:	84 72       	andi	r24, 0x24	; 36
   12364:	99 27       	eor	r25, r25
   12366:	89 2b       	or	r24, r25
   12368:	09 f4       	brne	.+2      	; 0x1236c <GPIB_LISTEN+0x80>
            printf("[LA %02XH AMIGO]\n", 0xff & ch);
   1236a:	49 c0       	rjmp	.+146    	; 0x123fe <GPIB_LISTEN+0x112>
   1236c:	ed b7       	in	r30, 0x3d	; 61
   1236e:	fe b7       	in	r31, 0x3e	; 62
   12370:	d5 83       	std	Z+5, r29	; 0x05
   12372:	c4 83       	std	Z+4, r28	; 0x04
   12374:	81 ea       	ldi	r24, 0xA1	; 161
#endif
        return(0);
    }
#endif                      // #ifdef AMIGO

    if(SS80_is_MLA(ch))
   12376:	91 e1       	ldi	r25, 0x11	; 17
   12378:	3c c0       	rjmp	.+120    	; 0x123f2 <GPIB_LISTEN+0x106>
   1237a:	ce 01       	movw	r24, r28
   1237c:	6b db       	rcall	.-2346   	; 0x11a54 <SS80_is_MLA>
   1237e:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (4+32))
   12380:	79 f0       	breq	.+30     	; 0x123a0 <GPIB_LISTEN+0xb4>
   12382:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   12386:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1238a:	84 72       	andi	r24, 0x24	; 36
   1238c:	99 27       	eor	r25, r25
   1238e:	89 2b       	or	r24, r25
            printf("[LA %02XH SS80]\n", 0xff & ch);
   12390:	b1 f1       	breq	.+108    	; 0x123fe <GPIB_LISTEN+0x112>
   12392:	ed b7       	in	r30, 0x3d	; 61
   12394:	fe b7       	in	r31, 0x3e	; 62
   12396:	d5 83       	std	Z+5, r29	; 0x05
   12398:	c4 83       	std	Z+4, r28	; 0x04
   1239a:	80 e9       	ldi	r24, 0x90	; 144
#endif
        return(0);
    }

    if(PRINTER_is_MLA(ch))
   1239c:	91 e1       	ldi	r25, 0x11	; 17
   1239e:	29 c0       	rjmp	.+82     	; 0x123f2 <GPIB_LISTEN+0x106>
   123a0:	ce 01       	movw	r24, r28
   123a2:	b2 db       	rcall	.-2204   	; 0x11b08 <PRINTER_is_MLA>
   123a4:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   123a8:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   123ac:	89 2b       	or	r24, r25
    {
#if SDEBUG
        if(debuglevel & (4+32))
   123ae:	c9 f0       	breq	.+50     	; 0x123e2 <GPIB_LISTEN+0xf6>
   123b0:	24 72       	andi	r18, 0x24	; 36
   123b2:	33 27       	eor	r19, r19
   123b4:	23 2b       	or	r18, r19
            printf("[LA %02XH PRINTER]\n", 0xff & ch);
   123b6:	61 f0       	breq	.+24     	; 0x123d0 <GPIB_LISTEN+0xe4>
   123b8:	ed b7       	in	r30, 0x3d	; 61
   123ba:	fe b7       	in	r31, 0x3e	; 62
   123bc:	d5 83       	std	Z+5, r29	; 0x05
   123be:	c4 83       	std	Z+4, r28	; 0x04
   123c0:	8c e7       	ldi	r24, 0x7C	; 124
   123c2:	91 e1       	ldi	r25, 0x11	; 17
   123c4:	a0 e0       	ldi	r26, 0x00	; 0
   123c6:	81 83       	std	Z+1, r24	; 0x01
   123c8:	92 83       	std	Z+2, r25	; 0x02
   123ca:	a3 83       	std	Z+3, r26	; 0x03
   123cc:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#endif
        if(talking != UNT)
   123d0:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   123d4:	8f 35       	cpi	r24, 0x5F	; 95
        {
            ///@brief NULL creates a file named based on date and time
            printer_open(NULL);
   123d6:	99 f0       	breq	.+38     	; 0x123fe <GPIB_LISTEN+0x112>
   123d8:	80 e0       	ldi	r24, 0x00	; 0
   123da:	90 e0       	ldi	r25, 0x00	; 0
   123dc:	0e 94 71 bf 	call	0x17ee2	; 0x17ee2 <printer_open>
        }
        return(0);
    }
#if SDEBUG
    if(debuglevel & 4)
   123e0:	0e c0       	rjmp	.+28     	; 0x123fe <GPIB_LISTEN+0x112>
   123e2:	22 ff       	sbrs	r18, 2
        printf("[LA %02XH]\n", 0xff & ch);
   123e4:	0c c0       	rjmp	.+24     	; 0x123fe <GPIB_LISTEN+0x112>
   123e6:	ed b7       	in	r30, 0x3d	; 61
   123e8:	fe b7       	in	r31, 0x3e	; 62
   123ea:	d5 83       	std	Z+5, r29	; 0x05
   123ec:	c4 83       	std	Z+4, r28	; 0x04
   123ee:	80 e7       	ldi	r24, 0x70	; 112
   123f0:	91 e1       	ldi	r25, 0x11	; 17
   123f2:	a0 e0       	ldi	r26, 0x00	; 0
   123f4:	81 83       	std	Z+1, r24	; 0x01
   123f6:	92 83       	std	Z+2, r25	; 0x02
   123f8:	a3 83       	std	Z+3, r26	; 0x03
   123fa:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#endif
    return(0);
}                                                 // Listen Primary Address group
   123fe:	80 e0       	ldi	r24, 0x00	; 0
   12400:	90 e0       	ldi	r25, 0x00	; 0
   12402:	cd b7       	in	r28, 0x3d	; 61
   12404:	de b7       	in	r29, 0x3e	; 62
   12406:	25 96       	adiw	r28, 0x05	; 5
   12408:	e2 e0       	ldi	r30, 0x02	; 2
   1240a:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

0001240e <gpib_task>:
/// - Reads and processes GPIB control or data bytes
/// and calls emulator task.
/// @return  void

void gpib_task(void)
{
   1240e:	cf 93       	push	r28
   12410:	df 93       	push	r29
    uint16_t val;
    uint8_t ch;
    uint16_t status;

    gpib_state_init();                            // Init PPR talking and listening states
   12412:	0e 94 e1 86 	call	0x10dc2	; 0x10dc2 <gpib_state_init>
    gpib_init_devices();                          // Init devices

    gpib_log_fp = NULL;
   12416:	96 db       	rcall	.-2260   	; 0x11b44 <gpib_init_devices>
   12418:	10 92 fe 18 	sts	0x18FE, r1	; 0x8018fe <gpib_log_fp+0x1>
   1241c:	10 92 fd 18 	sts	0x18FD, r1	; 0x8018fd <gpib_log_fp>

    while(1)
    {

        val = gpib_read_byte(NO_TRACE);
   12420:	80 e0       	ldi	r24, 0x00	; 0
   12422:	90 e0       	ldi	r25, 0x00	; 0
   12424:	d9 d8       	rcall	.-3662   	; 0x115d8 <gpib_read_byte>

#if SDEBUG
        if(debuglevel & 8)
   12426:	ec 01       	movw	r28, r24
   12428:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
            gpib_decode(val);
   1242c:	83 ff       	sbrs	r24, 3
   1242e:	02 c0       	rjmp	.+4      	; 0x12434 <gpib_task+0x26>
#endif
        status = gpib_error_test(val);
   12430:	ce 01       	movw	r24, r28
   12432:	a8 d9       	rcall	.-3248   	; 0x11784 <gpib_decode>
        if(status & ABORT_FLAG)
        {
            return;
        }
        else if(status & MEDIA_FLAG)
   12434:	ce 01       	movw	r24, r28
   12436:	22 dc       	rcall	.-1980   	; 0x11c7c <gpib_error_test>
   12438:	9c 01       	movw	r18, r24
   1243a:	23 70       	andi	r18, 0x03	; 3
   1243c:	33 27       	eor	r19, r19
   1243e:	23 2b       	or	r18, r19
        {
            return;
        }
        else if(status)
   12440:	09 f0       	breq	.+2      	; 0x12444 <gpib_task+0x36>
   12442:	43 c0       	rjmp	.+134    	; 0x124ca <gpib_task+0xbc>
        {
            continue;
        }
        ///@brief GPIB commands with ATN set (COMMANDS)
        if(val & ATN_FLAG)
   12444:	89 2b       	or	r24, r25
   12446:	61 f7       	brne	.-40     	; 0x12420 <gpib_task+0x12>
        {
            ch = val & CMD_MASK;
   12448:	d2 ff       	sbrs	r29, 2
            if(ch <= 0x1f)
   1244a:	26 c0       	rjmp	.+76     	; 0x12498 <gpib_task+0x8a>
            {
                GPIB(ch);
   1244c:	8c 2f       	mov	r24, r28
   1244e:	8f 77       	andi	r24, 0x7F	; 127
                continue;
   12450:	80 32       	cpi	r24, 0x20	; 32
            }
            ///@brief GPIB listen
            if(ch >= 0x20 && ch <= 0x3f)
   12452:	10 f4       	brcc	.+4      	; 0x12458 <gpib_task+0x4a>
   12454:	54 dd       	rcall	.-1368   	; 0x11efe <GPIB>
   12456:	e4 cf       	rjmp	.-56     	; 0x12420 <gpib_task+0x12>
            {
                GPIB_LISTEN(ch);
   12458:	90 ee       	ldi	r25, 0xE0	; 224
   1245a:	98 0f       	add	r25, r24
                continue;
            }
            ///@brief GPIB talk
            if(ch >= 0x40 && ch <= 0x5f)
   1245c:	90 32       	cpi	r25, 0x20	; 32
   1245e:	10 f4       	brcc	.+4      	; 0x12464 <gpib_task+0x56>
   12460:	45 df       	rcall	.-374    	; 0x122ec <GPIB_LISTEN>
            {
                GPIB_TALK(ch);
   12462:	de cf       	rjmp	.-68     	; 0x12420 <gpib_task+0x12>
   12464:	90 ec       	ldi	r25, 0xC0	; 192
                continue;
   12466:	98 0f       	add	r25, r24
            }

            ///@brief GPIB secondary
            /// Note: We know ch >= 0x60 && ch <= 0x7f because of previous tests

            if( listening && lastcmd == UNT)
   12468:	90 32       	cpi	r25, 0x20	; 32
   1246a:	10 f4       	brcc	.+4      	; 0x12470 <gpib_task+0x62>
   1246c:	06 de       	rcall	.-1012   	; 0x1207a <GPIB_TALK>
   1246e:	d8 cf       	rjmp	.-80     	; 0x12420 <gpib_task+0x12>
   12470:	90 91 88 1e 	lds	r25, 0x1E88	; 0x801e88 <listening>
   12474:	99 23       	and	r25, r25
   12476:	59 f0       	breq	.+22     	; 0x1248e <gpib_task+0x80>
   12478:	20 91 80 1c 	lds	r18, 0x1C80	; 0x801c80 <lastcmd>
            {
                secondary = 0;
   1247c:	30 91 81 1c 	lds	r19, 0x1C81	; 0x801c81 <lastcmd+0x1>
                GPIB_SECONDARY_ADDRESS(ch);
   12480:	2f 35       	cpi	r18, 0x5F	; 95
   12482:	31 05       	cpc	r19, r1
                continue;
   12484:	21 f4       	brne	.+8      	; 0x1248e <gpib_task+0x80>
            }

            ///@brief We have to keep track of secondary address that may happen out of order with older AMIGO protocol
            /// this method works for SS80 as well
            secondary = ch;
   12486:	10 92 87 1e 	sts	0x1E87, r1	; 0x801e87 <secondary>
            ///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(secondary,0);
   1248a:	8f de       	rcall	.-738    	; 0x121aa <GPIB_SECONDARY_ADDRESS>
        }                                         // GPIB ATN

        ///@brief GPIB commands without ATN set (DATA)
        else                                      // GPIB Data
        {
            if ( PRINTER_is_MLA(listening) )
   1248c:	c9 cf       	rjmp	.-110    	; 0x12420 <gpib_task+0x12>
   1248e:	80 93 87 1e 	sts	0x1E87, r24	; 0x801e87 <secondary>
   12492:	60 e0       	ldi	r22, 0x00	; 0
   12494:	90 e0       	ldi	r25, 0x00	; 0
   12496:	12 c0       	rjmp	.+36     	; 0x124bc <gpib_task+0xae>
   12498:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
            {
                printer_buffer( 0xff & val );
   1249c:	90 e0       	ldi	r25, 0x00	; 0
   1249e:	34 db       	rcall	.-2456   	; 0x11b08 <PRINTER_is_MLA>
   124a0:	89 2b       	or	r24, r25
                continue;
            }

            if(!secondary)
   124a2:	29 f0       	breq	.+10     	; 0x124ae <gpib_task+0xa0>
   124a4:	ce 01       	movw	r24, r28
   124a6:	99 27       	eor	r25, r25
                continue;

            // ONLY secondar commands at this point
            ///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(val,1);
   124a8:	0e 94 14 c0 	call	0x18028	; 0x18028 <printer_buffer>
   124ac:	b9 cf       	rjmp	.-142    	; 0x12420 <gpib_task+0x12>
   124ae:	80 91 87 1e 	lds	r24, 0x1E87	; 0x801e87 <secondary>
            status = gpib_error_test(status);
   124b2:	88 23       	and	r24, r24

            if(status & ( ABORT_FLAG | MEDIA_FLAG ))
   124b4:	09 f4       	brne	.+2      	; 0x124b8 <gpib_task+0xaa>
   124b6:	b4 cf       	rjmp	.-152    	; 0x12420 <gpib_task+0x12>
   124b8:	61 e0       	ldi	r22, 0x01	; 1
   124ba:	ce 01       	movw	r24, r28
   124bc:	6c dc       	rcall	.-1832   	; 0x11d96 <GPIB_COMMANDS>
            }
            continue;
        }
    }                                             // while(1)
    return;
}
   124be:	de db       	rcall	.-2116   	; 0x11c7c <gpib_error_test>
   124c0:	83 70       	andi	r24, 0x03	; 3
   124c2:	99 27       	eor	r25, r25
   124c4:	89 2b       	or	r24, r25
   124c6:	09 f4       	brne	.+2      	; 0x124ca <gpib_task+0xbc>
   124c8:	ab cf       	rjmp	.-170    	; 0x12420 <gpib_task+0x12>
   124ca:	df 91       	pop	r29
   124cc:	cf 91       	pop	r28
   124ce:	08 95       	ret

000124d0 <talk_cleanup>:
/// - Not used in this emulator.
/// 
/// @return  void

void talk_cleanup()
{
   124d0:	08 95       	ret

000124d2 <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   124d2:	cf 93       	push	r28
   124d4:	df 93       	push	r29
   124d6:	00 d0       	rcall	.+0      	; 0x124d8 <gpib_help+0x6>
   124d8:	1f 92       	push	r1
   124da:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   124dc:	88 e2       	ldi	r24, 0x28	; 40
   124de:	94 e1       	ldi	r25, 0x14	; 20
   124e0:	a0 e0       	ldi	r26, 0x00	; 0
   124e2:	ed b7       	in	r30, 0x3d	; 61
   124e4:	fe b7       	in	r31, 0x3e	; 62
   124e6:	81 83       	std	Z+1, r24	; 0x01
   124e8:	92 83       	std	Z+2, r25	; 0x02
   124ea:	a3 83       	std	Z+3, r26	; 0x03
   124ec:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    if(full)
   124f0:	cd 2b       	or	r28, r29
   124f2:	51 f0       	breq	.+20     	; 0x12508 <gpib_help+0x36>
    {
        printf("gpib prefix is optional\n"
   124f4:	8e e6       	ldi	r24, 0x6E	; 110
   124f6:	93 e1       	ldi	r25, 0x13	; 19
   124f8:	a0 e0       	ldi	r26, 0x00	; 0
   124fa:	ed b7       	in	r30, 0x3d	; 61
   124fc:	fe b7       	in	r31, 0x3e	; 62
   124fe:	81 83       	std	Z+1, r24	; 0x01
   12500:	92 83       	std	Z+2, r25	; 0x02
   12502:	a3 83       	std	Z+3, r26	; 0x03
   12504:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            "gpib ppr_set XX\n"
#endif
            "\n"
            );
    }
}
   12508:	cd b7       	in	r28, 0x3d	; 61
   1250a:	de b7       	in	r29, 0x3e	; 62
   1250c:	23 96       	adiw	r28, 0x03	; 3
   1250e:	e2 e0       	ldi	r30, 0x02	; 2
   12510:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

00012514 <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   12514:	ef 92       	push	r14
   12516:	ff 92       	push	r15
   12518:	0f 93       	push	r16
   1251a:	1f 93       	push	r17
   1251c:	cf 93       	push	r28
   1251e:	df 93       	push	r29
   12520:	00 d0       	rcall	.+0      	; 0x12522 <gpib_tests+0xe>
   12522:	00 d0       	rcall	.+0      	; 0x12524 <gpib_tests+0x10>
   12524:	1f 92       	push	r1
   12526:	8c 01       	movw	r16, r24

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   12528:	eb 01       	movw	r28, r22
   1252a:	88 81       	ld	r24, Y
   1252c:	99 81       	ldd	r25, Y+1	; 0x01

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   1252e:	00 97       	sbiw	r24, 0x00	; 0
   12530:	19 f4       	brne	.+6      	; 0x12538 <gpib_tests+0x24>
        return(0);
   12532:	80 e0       	ldi	r24, 0x00	; 0
   12534:	90 e0       	ldi	r25, 0x00	; 0
   12536:	b4 c0       	rjmp	.+360    	; 0x126a0 <gpib_tests+0x18c>
   12538:	7b 01       	movw	r14, r22

    ind = 0;
    ptr = argv[ind++];

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   1253a:	63 ed       	ldi	r22, 0xD3	; 211
   1253c:	7c e0       	ldi	r23, 0x0C	; 12
   1253e:	0e 94 59 33 	call	0x66b2	; 0x66b2 <MATCH>
   12542:	89 2b       	or	r24, r25
   12544:	b1 f3       	breq	.-20     	; 0x12532 <gpib_tests+0x1e>
        return(0);

    ptr = argv[ind++];
   12546:	0a 80       	ldd	r0, Y+2	; 0x02
   12548:	db 81       	ldd	r29, Y+3	; 0x03
   1254a:	c0 2d       	mov	r28, r0
    if ( !ptr || MATCH(ptr,"help") )
   1254c:	20 97       	sbiw	r28, 0x00	; 0
   1254e:	21 f4       	brne	.+8      	; 0x12558 <gpib_tests+0x44>
    {
        gpib_help(1);
   12550:	81 e0       	ldi	r24, 0x01	; 1
   12552:	90 e0       	ldi	r25, 0x00	; 0
   12554:	be df       	rcall	.-132    	; 0x124d2 <gpib_help>
   12556:	a2 c0       	rjmp	.+324    	; 0x1269c <gpib_tests+0x188>
    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
        return(0);

    ptr = argv[ind++];
    if ( !ptr || MATCH(ptr,"help") )
   12558:	6e eb       	ldi	r22, 0xBE	; 190
   1255a:	75 e1       	ldi	r23, 0x15	; 21
   1255c:	ce 01       	movw	r24, r28
   1255e:	0e 94 59 33 	call	0x66b2	; 0x66b2 <MATCH>
   12562:	89 2b       	or	r24, r25
   12564:	a9 f7       	brne	.-22     	; 0x12550 <gpib_tests+0x3c>
    {
        gpib_help(1);
        return(1);
    }

    if (MATCHI(ptr,"debug") )
   12566:	68 ed       	ldi	r22, 0xD8	; 216
   12568:	7c e0       	ldi	r23, 0x0C	; 12
   1256a:	ce 01       	movw	r24, r28
   1256c:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
   12570:	89 2b       	or	r24, r25
   12572:	29 f1       	breq	.+74     	; 0x125be <gpib_tests+0xaa>
    {
        ptr = argv[ind];
		if(*ptr == '=')
   12574:	e7 01       	movw	r28, r14
   12576:	ec 81       	ldd	r30, Y+4	; 0x04
   12578:	fd 81       	ldd	r31, Y+5	; 0x05
   1257a:	80 81       	ld	r24, Z
   1257c:	8d 33       	cpi	r24, 0x3D	; 61
   1257e:	19 f4       	brne	.+6      	; 0x12586 <gpib_tests+0x72>
			++ind;
   12580:	63 e0       	ldi	r22, 0x03	; 3
   12582:	70 e0       	ldi	r23, 0x00	; 0
   12584:	02 c0       	rjmp	.+4      	; 0x1258a <gpib_tests+0x76>

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
        return(0);

    ptr = argv[ind++];
   12586:	62 e0       	ldi	r22, 0x02	; 2
   12588:	70 e0       	ldi	r23, 0x00	; 0
    if (MATCHI(ptr,"debug") )
    {
        ptr = argv[ind];
		if(*ptr == '=')
			++ind;
        debuglevel = get_value(argv[ind]);
   1258a:	66 0f       	add	r22, r22
   1258c:	77 1f       	adc	r23, r23
   1258e:	f7 01       	movw	r30, r14
   12590:	e6 0f       	add	r30, r22
   12592:	f7 1f       	adc	r31, r23
   12594:	80 81       	ld	r24, Z
   12596:	91 81       	ldd	r25, Z+1	; 0x01
   12598:	0e 94 64 34 	call	0x68c8	; 0x68c8 <get_value>
   1259c:	70 93 c4 01 	sts	0x01C4, r23	; 0x8001c4 <debuglevel+0x1>
   125a0:	60 93 c3 01 	sts	0x01C3, r22	; 0x8001c3 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   125a4:	ed b7       	in	r30, 0x3d	; 61
   125a6:	fe b7       	in	r31, 0x3e	; 62
   125a8:	75 83       	std	Z+5, r23	; 0x05
   125aa:	64 83       	std	Z+4, r22	; 0x04
   125ac:	81 e6       	ldi	r24, 0x61	; 97
   125ae:	93 e1       	ldi	r25, 0x13	; 19
   125b0:	a0 e0       	ldi	r26, 0x00	; 0
   125b2:	81 83       	std	Z+1, r24	; 0x01
   125b4:	92 83       	std	Z+2, r25	; 0x02
   125b6:	a3 83       	std	Z+3, r26	; 0x03
   125b8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   125bc:	6f c0       	rjmp	.+222    	; 0x1269c <gpib_tests+0x188>
        return(1);
    }

    if (MATCHARGS(ptr,"addresses",(ind+0),argc))
   125be:	98 01       	movw	r18, r16
   125c0:	42 e0       	ldi	r20, 0x02	; 2
   125c2:	50 e0       	ldi	r21, 0x00	; 0
   125c4:	6e ed       	ldi	r22, 0xDE	; 222
   125c6:	7c e0       	ldi	r23, 0x0C	; 12
   125c8:	ce 01       	movw	r24, r28
   125ca:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   125ce:	89 2b       	or	r24, r25
   125d0:	19 f0       	breq	.+6      	; 0x125d8 <gpib_tests+0xc4>
    {
        display_Addresses();
   125d2:	0e 94 c6 9e 	call	0x13d8c	; 0x13d8c <display_Addresses>
   125d6:	62 c0       	rjmp	.+196    	; 0x1269c <gpib_tests+0x188>
        return(1);
    }

    if (MATCHARGS(ptr,"config",(ind+0),argc))
   125d8:	98 01       	movw	r18, r16
   125da:	42 e0       	ldi	r20, 0x02	; 2
   125dc:	50 e0       	ldi	r21, 0x00	; 0
   125de:	68 ee       	ldi	r22, 0xE8	; 232
   125e0:	7c e0       	ldi	r23, 0x0C	; 12
   125e2:	ce 01       	movw	r24, r28
   125e4:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   125e8:	89 2b       	or	r24, r25
   125ea:	19 f0       	breq	.+6      	; 0x125f2 <gpib_tests+0xde>
    {
        display_Config();
   125ec:	0e 94 cb 9f 	call	0x13f96	; 0x13f96 <display_Config>
   125f0:	55 c0       	rjmp	.+170    	; 0x1269c <gpib_tests+0x188>
        return(1);
    }


    if (MATCHARGS(ptr,"elapsed_reset",(ind+0),argc))
   125f2:	98 01       	movw	r18, r16
   125f4:	42 e0       	ldi	r20, 0x02	; 2
   125f6:	50 e0       	ldi	r21, 0x00	; 0
   125f8:	6f ee       	ldi	r22, 0xEF	; 239
   125fa:	7c e0       	ldi	r23, 0x0C	; 12
   125fc:	ce 01       	movw	r24, r28
   125fe:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   12602:	89 2b       	or	r24, r25
   12604:	19 f0       	breq	.+6      	; 0x1260c <gpib_tests+0xf8>
    {
        gpib_timer_elapsed_begin();
   12606:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_timer_elapsed_begin>
   1260a:	48 c0       	rjmp	.+144    	; 0x1269c <gpib_tests+0x188>
        return(1);
    }

    if (MATCHARGS(ptr,"elapsed",(ind+0),argc))
   1260c:	98 01       	movw	r18, r16
   1260e:	42 e0       	ldi	r20, 0x02	; 2
   12610:	50 e0       	ldi	r21, 0x00	; 0
   12612:	6d ef       	ldi	r22, 0xFD	; 253
   12614:	7c e0       	ldi	r23, 0x0C	; 12
   12616:	ce 01       	movw	r24, r28
   12618:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   1261c:	89 2b       	or	r24, r25
   1261e:	29 f0       	breq	.+10     	; 0x1262a <gpib_tests+0x116>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   12620:	85 e0       	ldi	r24, 0x05	; 5
   12622:	9d e0       	ldi	r25, 0x0D	; 13
   12624:	0e 94 5e 86 	call	0x10cbc	; 0x10cbc <gpib_timer_elapsed_end>
   12628:	39 c0       	rjmp	.+114    	; 0x1269c <gpib_tests+0x188>
        return(1);
    }

    if ( MATCHARGS(ptr, "ifc",(ind+0),argc))
   1262a:	98 01       	movw	r18, r16
   1262c:	42 e0       	ldi	r20, 0x02	; 2
   1262e:	50 e0       	ldi	r21, 0x00	; 0
   12630:	63 e1       	ldi	r22, 0x13	; 19
   12632:	7d e0       	ldi	r23, 0x0D	; 13
   12634:	ce 01       	movw	r24, r28
   12636:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   1263a:	89 2b       	or	r24, r25
   1263c:	19 f0       	breq	.+6      	; 0x12644 <gpib_tests+0x130>
    {
        gpib_assert_ifc();
   1263e:	0e 94 7a 87 	call	0x10ef4	; 0x10ef4 <gpib_assert_ifc>
   12642:	2c c0       	rjmp	.+88     	; 0x1269c <gpib_tests+0x188>
        return(1);

    }

    if (MATCHARGS(ptr,"task",(ind+0),argc))
   12644:	98 01       	movw	r18, r16
   12646:	42 e0       	ldi	r20, 0x02	; 2
   12648:	50 e0       	ldi	r21, 0x00	; 0
   1264a:	67 e1       	ldi	r22, 0x17	; 23
   1264c:	7d e0       	ldi	r23, 0x0D	; 13
   1264e:	ce 01       	movw	r24, r28
   12650:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   12654:	89 2b       	or	r24, r25
    {
        gpib_task();
   12656:	11 f0       	breq	.+4      	; 0x1265c <gpib_tests+0x148>
   12658:	da de       	rcall	.-588    	; 0x1240e <gpib_task>
   1265a:	20 c0       	rjmp	.+64     	; 0x1269c <gpib_tests+0x188>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   1265c:	98 01       	movw	r18, r16
   1265e:	43 e0       	ldi	r20, 0x03	; 3
   12660:	50 e0       	ldi	r21, 0x00	; 0
   12662:	6c e1       	ldi	r22, 0x1C	; 28
   12664:	7d e0       	ldi	r23, 0x0D	; 13
   12666:	ce 01       	movw	r24, r28
   12668:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   1266c:	89 2b       	or	r24, r25
   1266e:	09 f4       	brne	.+2      	; 0x12672 <gpib_tests+0x15e>
   12670:	60 cf       	rjmp	.-320    	; 0x12532 <gpib_tests+0x1e>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   12672:	f7 01       	movw	r30, r14
   12674:	86 81       	ldd	r24, Z+6	; 0x06
   12676:	97 81       	ldd	r25, Z+7	; 0x07
   12678:	00 97       	sbiw	r24, 0x00	; 0
   1267a:	51 f0       	breq	.+20     	; 0x12690 <gpib_tests+0x17c>
   1267c:	62 e2       	ldi	r22, 0x22	; 34
   1267e:	7d e0       	ldi	r23, 0x0D	; 13
   12680:	0e 94 59 33 	call	0x66b2	; 0x66b2 <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   12684:	61 e0       	ldi	r22, 0x01	; 1
   12686:	70 e0       	ldi	r23, 0x00	; 0
   12688:	89 2b       	or	r24, r25
   1268a:	21 f4       	brne	.+8      	; 0x12694 <gpib_tests+0x180>
   1268c:	60 e0       	ldi	r22, 0x00	; 0
   1268e:	02 c0       	rjmp	.+4      	; 0x12694 <gpib_tests+0x180>
   12690:	60 e0       	ldi	r22, 0x00	; 0
   12692:	70 e0       	ldi	r23, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   12694:	e7 01       	movw	r28, r14
   12696:	8c 81       	ldd	r24, Y+4	; 0x04
   12698:	9d 81       	ldd	r25, Y+5	; 0x05
   1269a:	5d da       	rcall	.-2886   	; 0x11b56 <gpib_trace_task>
        return(1);
   1269c:	81 e0       	ldi	r24, 0x01	; 1
   1269e:	90 e0       	ldi	r25, 0x00	; 0

	} // port write 
#endif  // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   126a0:	cd b7       	in	r28, 0x3d	; 61
   126a2:	de b7       	in	r29, 0x3e	; 62
   126a4:	25 96       	adiw	r28, 0x05	; 5
   126a6:	e6 e0       	ldi	r30, 0x06	; 6
   126a8:	0c 94 ae e4 	jmp	0x1c95c	; 0x1c95c <__epilogue_restores__+0x18>

000126ac <V2B_MSB>:
   126ac:	0f 93       	push	r16
   126ae:	1f 93       	push	r17
   126b0:	da 01       	movw	r26, r20
   126b2:	11 97       	sbiw	r26, 0x01	; 1
   126b4:	b7 fd       	sbrc	r27, 7
   126b6:	0b c0       	rjmp	.+22     	; 0x126ce <V2B_MSB+0x22>
   126b8:	fd 01       	movw	r30, r26
   126ba:	e6 0f       	add	r30, r22
   126bc:	f7 1f       	adc	r31, r23
   126be:	e8 0f       	add	r30, r24
   126c0:	f9 1f       	adc	r31, r25
   126c2:	00 83       	st	Z, r16
   126c4:	01 2f       	mov	r16, r17
   126c6:	12 2f       	mov	r17, r18
   126c8:	23 2f       	mov	r18, r19
   126ca:	33 27       	eor	r19, r19
   126cc:	f2 cf       	rjmp	.-28     	; 0x126b2 <V2B_MSB+0x6>
   126ce:	1f 91       	pop	r17
   126d0:	0f 91       	pop	r16
   126d2:	08 95       	ret

000126d4 <V2B_LSB>:
   126d4:	0f 93       	push	r16
   126d6:	1f 93       	push	r17
   126d8:	fc 01       	movw	r30, r24
   126da:	e6 0f       	add	r30, r22
   126dc:	f7 1f       	adc	r31, r23
   126de:	bf 01       	movw	r22, r30
   126e0:	cf 01       	movw	r24, r30
   126e2:	86 1b       	sub	r24, r22
   126e4:	97 0b       	sbc	r25, r23
   126e6:	84 17       	cp	r24, r20
   126e8:	95 07       	cpc	r25, r21
   126ea:	34 f4       	brge	.+12     	; 0x126f8 <V2B_LSB+0x24>
   126ec:	01 93       	st	Z+, r16
   126ee:	01 2f       	mov	r16, r17
   126f0:	12 2f       	mov	r17, r18
   126f2:	23 2f       	mov	r18, r19
   126f4:	33 27       	eor	r19, r19
   126f6:	f4 cf       	rjmp	.-24     	; 0x126e0 <V2B_LSB+0xc>
   126f8:	1f 91       	pop	r17
   126fa:	0f 91       	pop	r16
   126fc:	08 95       	ret

000126fe <B2V_MSB>:
   126fe:	cf 92       	push	r12
   12700:	df 92       	push	r13
   12702:	ef 92       	push	r14
   12704:	ff 92       	push	r15
   12706:	fc 01       	movw	r30, r24
   12708:	e6 0f       	add	r30, r22
   1270a:	f7 1f       	adc	r31, r23
   1270c:	60 e0       	ldi	r22, 0x00	; 0
   1270e:	70 e0       	ldi	r23, 0x00	; 0
   12710:	cb 01       	movw	r24, r22
   12712:	df 01       	movw	r26, r30
   12714:	9f 01       	movw	r18, r30
   12716:	2a 1b       	sub	r18, r26
   12718:	3b 0b       	sbc	r19, r27
   1271a:	24 17       	cp	r18, r20
   1271c:	35 07       	cpc	r19, r21
   1271e:	4c f4       	brge	.+18     	; 0x12732 <B2V_MSB+0x34>
   12720:	cc 24       	eor	r12, r12
   12722:	d6 2e       	mov	r13, r22
   12724:	e7 2e       	mov	r14, r23
   12726:	f8 2e       	mov	r15, r24
   12728:	21 91       	ld	r18, Z+
   1272a:	c7 01       	movw	r24, r14
   1272c:	b6 01       	movw	r22, r12
   1272e:	62 2b       	or	r22, r18
   12730:	f1 cf       	rjmp	.-30     	; 0x12714 <B2V_MSB+0x16>
   12732:	ff 90       	pop	r15
   12734:	ef 90       	pop	r14
   12736:	df 90       	pop	r13
   12738:	cf 90       	pop	r12
   1273a:	08 95       	ret

0001273c <B2V_LSB>:
   1273c:	cf 92       	push	r12
   1273e:	df 92       	push	r13
   12740:	ef 92       	push	r14
   12742:	ff 92       	push	r15
   12744:	9c 01       	movw	r18, r24
   12746:	db 01       	movw	r26, r22
   12748:	60 e0       	ldi	r22, 0x00	; 0
   1274a:	70 e0       	ldi	r23, 0x00	; 0
   1274c:	cb 01       	movw	r24, r22
   1274e:	41 50       	subi	r20, 0x01	; 1
   12750:	51 09       	sbc	r21, r1
   12752:	57 fd       	sbrc	r21, 7
   12754:	0e c0       	rjmp	.+28     	; 0x12772 <B2V_LSB+0x36>
   12756:	cc 24       	eor	r12, r12
   12758:	d6 2e       	mov	r13, r22
   1275a:	e7 2e       	mov	r14, r23
   1275c:	f8 2e       	mov	r15, r24
   1275e:	fa 01       	movw	r30, r20
   12760:	ea 0f       	add	r30, r26
   12762:	fb 1f       	adc	r31, r27
   12764:	e2 0f       	add	r30, r18
   12766:	f3 1f       	adc	r31, r19
   12768:	e0 81       	ld	r30, Z
   1276a:	c7 01       	movw	r24, r14
   1276c:	b6 01       	movw	r22, r12
   1276e:	6e 2b       	or	r22, r30
   12770:	ee cf       	rjmp	.-36     	; 0x1274e <B2V_LSB+0x12>
   12772:	ff 90       	pop	r15
   12774:	ef 90       	pop	r14
   12776:	df 90       	pop	r13
   12778:	cf 90       	pop	r12
   1277a:	08 95       	ret

0001277c <find_type>:
   1277c:	ec e8       	ldi	r30, 0x8C	; 140
   1277e:	fe e1       	ldi	r31, 0x1E	; 30
   12780:	20 e0       	ldi	r18, 0x00	; 0
   12782:	30 e0       	ldi	r19, 0x00	; 0
   12784:	40 81       	ld	r20, Z
   12786:	50 e0       	ldi	r21, 0x00	; 0
   12788:	48 17       	cp	r20, r24
   1278a:	59 07       	cpc	r21, r25
   1278c:	49 f0       	breq	.+18     	; 0x127a0 <find_type+0x24>
   1278e:	2f 5f       	subi	r18, 0xFF	; 255
   12790:	3f 4f       	sbci	r19, 0xFF	; 255
   12792:	bb 96       	adiw	r30, 0x2b	; 43
   12794:	2c 30       	cpi	r18, 0x0C	; 12
   12796:	31 05       	cpc	r19, r1
   12798:	a9 f7       	brne	.-22     	; 0x12784 <find_type+0x8>
   1279a:	8f ef       	ldi	r24, 0xFF	; 255
   1279c:	9f ef       	ldi	r25, 0xFF	; 255
   1279e:	08 95       	ret
   127a0:	c9 01       	movw	r24, r18
   127a2:	08 95       	ret

000127a4 <count_drive_types>:
   127a4:	28 2f       	mov	r18, r24
   127a6:	ec e8       	ldi	r30, 0x8C	; 140
   127a8:	fe e1       	ldi	r31, 0x1E	; 30
   127aa:	80 e0       	ldi	r24, 0x00	; 0
   127ac:	90 e0       	ldi	r25, 0x00	; 0
   127ae:	30 81       	ld	r19, Z
   127b0:	32 13       	cpse	r19, r18
   127b2:	01 c0       	rjmp	.+2      	; 0x127b6 <count_drive_types+0x12>
   127b4:	01 96       	adiw	r24, 0x01	; 1
   127b6:	bb 96       	adiw	r30, 0x2b	; 43
   127b8:	30 e2       	ldi	r19, 0x20	; 32
   127ba:	e0 39       	cpi	r30, 0x90	; 144
   127bc:	f3 07       	cpc	r31, r19
   127be:	b9 f7       	brne	.-18     	; 0x127ae <count_drive_types+0xa>
   127c0:	08 95       	ret

000127c2 <type_to_str>:
   127c2:	00 97       	sbiw	r24, 0x00	; 0
   127c4:	59 f0       	breq	.+22     	; 0x127dc <type_to_str+0x1a>
   127c6:	81 30       	cpi	r24, 0x01	; 1
   127c8:	91 05       	cpc	r25, r1
   127ca:	59 f0       	breq	.+22     	; 0x127e2 <type_to_str+0x20>
   127cc:	83 30       	cpi	r24, 0x03	; 3
   127ce:	91 05       	cpc	r25, r1
   127d0:	59 f0       	breq	.+22     	; 0x127e8 <type_to_str+0x26>
   127d2:	04 97       	sbiw	r24, 0x04	; 4
   127d4:	61 f0       	breq	.+24     	; 0x127ee <type_to_str+0x2c>
   127d6:	80 e5       	ldi	r24, 0x50	; 80
   127d8:	9d e0       	ldi	r25, 0x0D	; 13
   127da:	08 95       	ret
   127dc:	86 e2       	ldi	r24, 0x26	; 38
   127de:	9d e0       	ldi	r25, 0x0D	; 13
   127e0:	08 95       	ret
   127e2:	8e e2       	ldi	r24, 0x2E	; 46
   127e4:	9d e0       	ldi	r25, 0x0D	; 13
   127e6:	08 95       	ret
   127e8:	86 e4       	ldi	r24, 0x46	; 70
   127ea:	9d e0       	ldi	r25, 0x0D	; 13
   127ec:	08 95       	ret
   127ee:	89 e3       	ldi	r24, 0x39	; 57
   127f0:	9d e0       	ldi	r25, 0x0D	; 13
   127f2:	08 95       	ret

000127f4 <find_free>:
   127f4:	80 e0       	ldi	r24, 0x00	; 0
   127f6:	90 e0       	ldi	r25, 0x00	; 0
   127f8:	c1 cf       	rjmp	.-126    	; 0x1277c <find_type>
   127fa:	08 95       	ret

000127fc <find_device>:
   127fc:	9b 01       	movw	r18, r22
   127fe:	20 52       	subi	r18, 0x20	; 32
   12800:	31 09       	sbc	r19, r1
   12802:	2f 35       	cpi	r18, 0x5F	; 95
   12804:	31 05       	cpc	r19, r1
   12806:	f8 f4       	brcc	.+62     	; 0x12846 <find_device+0x4a>
   12808:	64 17       	cp	r22, r20
   1280a:	75 07       	cpc	r23, r21
   1280c:	e4 f0       	brlt	.+56     	; 0x12846 <find_device+0x4a>
   1280e:	9a 01       	movw	r18, r20
   12810:	22 5e       	subi	r18, 0xE2	; 226
   12812:	3f 4f       	sbci	r19, 0xFF	; 255
   12814:	26 17       	cp	r18, r22
   12816:	37 07       	cpc	r19, r23
   12818:	b4 f0       	brlt	.+44     	; 0x12846 <find_device+0x4a>
   1281a:	64 1b       	sub	r22, r20
   1281c:	75 0b       	sbc	r23, r21
   1281e:	ec e8       	ldi	r30, 0x8C	; 140
   12820:	fe e1       	ldi	r31, 0x1E	; 30
   12822:	20 e0       	ldi	r18, 0x00	; 0
   12824:	30 e0       	ldi	r19, 0x00	; 0
   12826:	40 81       	ld	r20, Z
   12828:	50 e0       	ldi	r21, 0x00	; 0
   1282a:	48 17       	cp	r20, r24
   1282c:	59 07       	cpc	r21, r25
   1282e:	29 f4       	brne	.+10     	; 0x1283a <find_device+0x3e>
   12830:	41 81       	ldd	r20, Z+1	; 0x01
   12832:	50 e0       	ldi	r21, 0x00	; 0
   12834:	64 17       	cp	r22, r20
   12836:	75 07       	cpc	r23, r21
   12838:	49 f0       	breq	.+18     	; 0x1284c <find_device+0x50>
   1283a:	2f 5f       	subi	r18, 0xFF	; 255
   1283c:	3f 4f       	sbci	r19, 0xFF	; 255
   1283e:	bb 96       	adiw	r30, 0x2b	; 43
   12840:	2c 30       	cpi	r18, 0x0C	; 12
   12842:	31 05       	cpc	r19, r1
   12844:	81 f7       	brne	.-32     	; 0x12826 <find_device+0x2a>
   12846:	8f ef       	ldi	r24, 0xFF	; 255
   12848:	9f ef       	ldi	r25, 0xFF	; 255
   1284a:	08 95       	ret
   1284c:	c9 01       	movw	r24, r18
   1284e:	08 95       	ret

00012850 <set_active_device>:
   12850:	a9 e0       	ldi	r26, 0x09	; 9
   12852:	b0 e0       	ldi	r27, 0x00	; 0
   12854:	ee e2       	ldi	r30, 0x2E	; 46
   12856:	f4 e9       	ldi	r31, 0x94	; 148
   12858:	0c 94 94 e4 	jmp	0x1c928	; 0x1c928 <__prologue_saves__+0x1c>
   1285c:	8f 3f       	cpi	r24, 0xFF	; 255
   1285e:	2f ef       	ldi	r18, 0xFF	; 255
   12860:	92 07       	cpc	r25, r18
   12862:	09 f4       	brne	.+2      	; 0x12866 <set_active_device+0x16>
   12864:	d0 c0       	rjmp	.+416    	; 0x12a06 <set_active_device+0x1b6>
   12866:	ec 01       	movw	r28, r24
   12868:	0c 97       	sbiw	r24, 0x0c	; 12
   1286a:	b0 f0       	brcs	.+44     	; 0x12898 <set_active_device+0x48>
   1286c:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   12870:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12874:	c9 01       	movw	r24, r18
   12876:	81 70       	andi	r24, 0x01	; 1
   12878:	99 27       	eor	r25, r25
   1287a:	20 ff       	sbrs	r18, 0
   1287c:	c6 c0       	rjmp	.+396    	; 0x12a0a <set_active_device+0x1ba>
   1287e:	ed b7       	in	r30, 0x3d	; 61
   12880:	fe b7       	in	r31, 0x3e	; 62
   12882:	d5 83       	std	Z+5, r29	; 0x05
   12884:	c4 83       	std	Z+4, r28	; 0x04
   12886:	82 e3       	ldi	r24, 0x32	; 50
   12888:	9f e1       	ldi	r25, 0x1F	; 31
   1288a:	a0 e0       	ldi	r26, 0x00	; 0
   1288c:	81 83       	std	Z+1, r24	; 0x01
   1288e:	92 83       	std	Z+2, r25	; 0x02
   12890:	a3 83       	std	Z+3, r26	; 0x03
   12892:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   12896:	b7 c0       	rjmp	.+366    	; 0x12a06 <set_active_device+0x1b6>
   12898:	8b e2       	ldi	r24, 0x2B	; 43
   1289a:	8c 9f       	mul	r24, r28
   1289c:	f0 01       	movw	r30, r0
   1289e:	8d 9f       	mul	r24, r29
   128a0:	f0 0d       	add	r31, r0
   128a2:	11 24       	eor	r1, r1
   128a4:	e4 57       	subi	r30, 0x74	; 116
   128a6:	f1 4e       	sbci	r31, 0xE1	; 225
   128a8:	21 81       	ldd	r18, Z+1	; 0x01
   128aa:	2f 31       	cpi	r18, 0x1F	; 31
   128ac:	d0 f0       	brcs	.+52     	; 0x128e2 <set_active_device+0x92>
   128ae:	40 91 c3 01 	lds	r20, 0x01C3	; 0x8001c3 <debuglevel>
   128b2:	50 91 c4 01 	lds	r21, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   128b6:	ca 01       	movw	r24, r20
   128b8:	81 70       	andi	r24, 0x01	; 1
   128ba:	99 27       	eor	r25, r25
   128bc:	40 ff       	sbrs	r20, 0
   128be:	a5 c0       	rjmp	.+330    	; 0x12a0a <set_active_device+0x1ba>
   128c0:	82 2f       	mov	r24, r18
   128c2:	90 e0       	ldi	r25, 0x00	; 0
   128c4:	ed b7       	in	r30, 0x3d	; 61
   128c6:	fe b7       	in	r31, 0x3e	; 62
   128c8:	97 83       	std	Z+7, r25	; 0x07
   128ca:	86 83       	std	Z+6, r24	; 0x06
   128cc:	d5 83       	std	Z+5, r29	; 0x05
   128ce:	c4 83       	std	Z+4, r28	; 0x04
   128d0:	89 ef       	ldi	r24, 0xF9	; 249
   128d2:	9e e1       	ldi	r25, 0x1E	; 30
   128d4:	a0 e0       	ldi	r26, 0x00	; 0
   128d6:	81 83       	std	Z+1, r24	; 0x01
   128d8:	92 83       	std	Z+2, r25	; 0x02
   128da:	a3 83       	std	Z+3, r26	; 0x03
   128dc:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   128e0:	92 c0       	rjmp	.+292    	; 0x12a06 <set_active_device+0x1b6>
   128e2:	20 81       	ld	r18, Z
   128e4:	02 2f       	mov	r16, r18
   128e6:	10 e0       	ldi	r17, 0x00	; 0
   128e8:	87 a1       	ldd	r24, Z+39	; 0x27
   128ea:	90 a5       	ldd	r25, Z+40	; 0x28
   128ec:	00 97       	sbiw	r24, 0x00	; 0
   128ee:	b1 f4       	brne	.+44     	; 0x1291c <set_active_device+0xcc>
   128f0:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   128f4:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   128f8:	c9 01       	movw	r24, r18
   128fa:	81 70       	andi	r24, 0x01	; 1
   128fc:	99 27       	eor	r25, r25
   128fe:	20 ff       	sbrs	r18, 0
   12900:	84 c0       	rjmp	.+264    	; 0x12a0a <set_active_device+0x1ba>
   12902:	c8 01       	movw	r24, r16
   12904:	5e df       	rcall	.-324    	; 0x127c2 <type_to_str>
   12906:	ed b7       	in	r30, 0x3d	; 61
   12908:	fe b7       	in	r31, 0x3e	; 62
   1290a:	91 87       	std	Z+9, r25	; 0x09
   1290c:	80 87       	std	Z+8, r24	; 0x08
   1290e:	17 83       	std	Z+7, r17	; 0x07
   12910:	06 83       	std	Z+6, r16	; 0x06
   12912:	d5 83       	std	Z+5, r29	; 0x05
   12914:	c4 83       	std	Z+4, r28	; 0x04
   12916:	84 ec       	ldi	r24, 0xC4	; 196
   12918:	9e e1       	ldi	r25, 0x1E	; 30
   1291a:	6f c0       	rjmp	.+222    	; 0x129fa <set_active_device+0x1aa>
   1291c:	01 15       	cp	r16, r1
   1291e:	11 05       	cpc	r17, r1
   12920:	b9 f4       	brne	.+46     	; 0x12950 <set_active_device+0x100>
   12922:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   12926:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1292a:	c9 01       	movw	r24, r18
   1292c:	81 70       	andi	r24, 0x01	; 1
   1292e:	99 27       	eor	r25, r25
   12930:	20 ff       	sbrs	r18, 0
   12932:	6b c0       	rjmp	.+214    	; 0x12a0a <set_active_device+0x1ba>
   12934:	80 e0       	ldi	r24, 0x00	; 0
   12936:	90 e0       	ldi	r25, 0x00	; 0
   12938:	44 df       	rcall	.-376    	; 0x127c2 <type_to_str>
   1293a:	ed b7       	in	r30, 0x3d	; 61
   1293c:	fe b7       	in	r31, 0x3e	; 62
   1293e:	91 87       	std	Z+9, r25	; 0x09
   12940:	80 87       	std	Z+8, r24	; 0x08
   12942:	17 82       	std	Z+7, r1	; 0x07
   12944:	16 82       	std	Z+6, r1	; 0x06
   12946:	d5 83       	std	Z+5, r29	; 0x05
   12948:	c4 83       	std	Z+4, r28	; 0x04
   1294a:	8f e8       	ldi	r24, 0x8F	; 143
   1294c:	9e e1       	ldi	r25, 0x1E	; 30
   1294e:	55 c0       	rjmp	.+170    	; 0x129fa <set_active_device+0x1aa>
   12950:	04 30       	cpi	r16, 0x04	; 4
   12952:	11 05       	cpc	r17, r1
   12954:	29 f4       	brne	.+10     	; 0x12960 <set_active_device+0x110>
   12956:	90 93 0a 19 	sts	0x190A, r25	; 0x80190a <PRINTERp+0x1>
   1295a:	80 93 09 19 	sts	0x1909, r24	; 0x801909 <PRINTERp>
   1295e:	35 c0       	rjmp	.+106    	; 0x129ca <set_active_device+0x17a>
   12960:	2d 7f       	andi	r18, 0xFD	; 253
   12962:	21 30       	cpi	r18, 0x01	; 1
   12964:	a9 f5       	brne	.+106    	; 0x129d0 <set_active_device+0x180>
   12966:	21 a5       	ldd	r18, Z+41	; 0x29
   12968:	32 a5       	ldd	r19, Z+42	; 0x2a
   1296a:	21 15       	cp	r18, r1
   1296c:	31 05       	cpc	r19, r1
   1296e:	b1 f4       	brne	.+44     	; 0x1299c <set_active_device+0x14c>
   12970:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   12974:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   12978:	c9 01       	movw	r24, r18
   1297a:	81 70       	andi	r24, 0x01	; 1
   1297c:	99 27       	eor	r25, r25
   1297e:	20 ff       	sbrs	r18, 0
   12980:	44 c0       	rjmp	.+136    	; 0x12a0a <set_active_device+0x1ba>
   12982:	c8 01       	movw	r24, r16
   12984:	1e df       	rcall	.-452    	; 0x127c2 <type_to_str>
   12986:	ed b7       	in	r30, 0x3d	; 61
   12988:	fe b7       	in	r31, 0x3e	; 62
   1298a:	91 87       	std	Z+9, r25	; 0x09
   1298c:	80 87       	std	Z+8, r24	; 0x08
   1298e:	17 83       	std	Z+7, r17	; 0x07
   12990:	06 83       	std	Z+6, r16	; 0x06
   12992:	d5 83       	std	Z+5, r29	; 0x05
   12994:	c4 83       	std	Z+4, r28	; 0x04
   12996:	87 e5       	ldi	r24, 0x57	; 87
   12998:	9e e1       	ldi	r25, 0x1E	; 30
   1299a:	2f c0       	rjmp	.+94     	; 0x129fa <set_active_device+0x1aa>
   1299c:	01 30       	cpi	r16, 0x01	; 1
   1299e:	11 05       	cpc	r17, r1
   129a0:	49 f4       	brne	.+18     	; 0x129b4 <set_active_device+0x164>
   129a2:	90 93 04 19 	sts	0x1904, r25	; 0x801904 <AMIGOp+0x1>
   129a6:	80 93 03 19 	sts	0x1903, r24	; 0x801903 <AMIGOp>
   129aa:	30 93 02 19 	sts	0x1902, r19	; 0x801902 <AMIGOs+0x1>
   129ae:	20 93 01 19 	sts	0x1901, r18	; 0x801901 <AMIGOs>
   129b2:	0b c0       	rjmp	.+22     	; 0x129ca <set_active_device+0x17a>
   129b4:	03 30       	cpi	r16, 0x03	; 3
   129b6:	11 05       	cpc	r17, r1
   129b8:	59 f4       	brne	.+22     	; 0x129d0 <set_active_device+0x180>
   129ba:	90 93 08 19 	sts	0x1908, r25	; 0x801908 <SS80p+0x1>
   129be:	80 93 07 19 	sts	0x1907, r24	; 0x801907 <SS80p>
   129c2:	30 93 06 19 	sts	0x1906, r19	; 0x801906 <SS80s+0x1>
   129c6:	20 93 05 19 	sts	0x1905, r18	; 0x801905 <SS80s>
   129ca:	81 e0       	ldi	r24, 0x01	; 1
   129cc:	90 e0       	ldi	r25, 0x00	; 0
   129ce:	1d c0       	rjmp	.+58     	; 0x12a0a <set_active_device+0x1ba>
   129d0:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   129d4:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   129d8:	c9 01       	movw	r24, r18
   129da:	81 70       	andi	r24, 0x01	; 1
   129dc:	99 27       	eor	r25, r25
   129de:	20 ff       	sbrs	r18, 0
   129e0:	14 c0       	rjmp	.+40     	; 0x12a0a <set_active_device+0x1ba>
   129e2:	c8 01       	movw	r24, r16
   129e4:	ee de       	rcall	.-548    	; 0x127c2 <type_to_str>
   129e6:	ed b7       	in	r30, 0x3d	; 61
   129e8:	fe b7       	in	r31, 0x3e	; 62
   129ea:	91 87       	std	Z+9, r25	; 0x09
   129ec:	80 87       	std	Z+8, r24	; 0x08
   129ee:	17 83       	std	Z+7, r17	; 0x07
   129f0:	06 83       	std	Z+6, r16	; 0x06
   129f2:	d5 83       	std	Z+5, r29	; 0x05
   129f4:	c4 83       	std	Z+4, r28	; 0x04
   129f6:	8c e2       	ldi	r24, 0x2C	; 44
   129f8:	9e e1       	ldi	r25, 0x1E	; 30
   129fa:	a0 e0       	ldi	r26, 0x00	; 0
   129fc:	81 83       	std	Z+1, r24	; 0x01
   129fe:	92 83       	std	Z+2, r25	; 0x02
   12a00:	a3 83       	std	Z+3, r26	; 0x03
   12a02:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   12a06:	80 e0       	ldi	r24, 0x00	; 0
   12a08:	90 e0       	ldi	r25, 0x00	; 0
   12a0a:	cd b7       	in	r28, 0x3d	; 61
   12a0c:	de b7       	in	r29, 0x3e	; 62
   12a0e:	29 96       	adiw	r28, 0x09	; 9
   12a10:	e4 e0       	ldi	r30, 0x04	; 4
   12a12:	0c 94 b0 e4 	jmp	0x1c960	; 0x1c960 <__epilogue_restores__+0x1c>

00012a16 <SS80_Set_Defaults>:
   12a16:	0f 93       	push	r16
   12a18:	1f 93       	push	r17
   12a1a:	cf 93       	push	r28
   12a1c:	df 93       	push	r29
   12a1e:	ec 01       	movw	r28, r24
   12a20:	82 e0       	ldi	r24, 0x02	; 2
   12a22:	90 e0       	ldi	r25, 0x00	; 0
   12a24:	ab de       	rcall	.-682    	; 0x1277c <find_type>
   12a26:	97 fd       	sbrc	r25, 7
   12a28:	6b c0       	rjmp	.+214    	; 0x12b00 <SS80_Set_Defaults+0xea>
   12a2a:	2b e2       	ldi	r18, 0x2B	; 43
   12a2c:	2c 9f       	mul	r18, r28
   12a2e:	f0 01       	movw	r30, r0
   12a30:	2d 9f       	mul	r18, r29
   12a32:	f0 0d       	add	r31, r0
   12a34:	11 24       	eor	r1, r1
   12a36:	e4 57       	subi	r30, 0x74	; 116
   12a38:	f1 4e       	sbci	r31, 0xE1	; 225
   12a3a:	c7 a1       	ldd	r28, Z+39	; 0x27
   12a3c:	d0 a5       	ldd	r29, Z+40	; 0x28
   12a3e:	28 9f       	mul	r18, r24
   12a40:	f0 01       	movw	r30, r0
   12a42:	29 9f       	mul	r18, r25
   12a44:	f0 0d       	add	r31, r0
   12a46:	11 24       	eor	r1, r1
   12a48:	e4 57       	subi	r30, 0x74	; 116
   12a4a:	f1 4e       	sbci	r31, 0xE1	; 225
   12a4c:	07 a1       	ldd	r16, Z+39	; 0x27
   12a4e:	10 a5       	ldd	r17, Z+40	; 0x28
   12a50:	f8 01       	movw	r30, r16
   12a52:	80 81       	ld	r24, Z
   12a54:	88 83       	st	Y, r24
   12a56:	81 81       	ldd	r24, Z+1	; 0x01
   12a58:	89 83       	std	Y+1, r24	; 0x01
   12a5a:	82 81       	ldd	r24, Z+2	; 0x02
   12a5c:	93 81       	ldd	r25, Z+3	; 0x03
   12a5e:	0e 94 0f 33 	call	0x661e	; 0x661e <stralloc>
   12a62:	9b 83       	std	Y+3, r25	; 0x03
   12a64:	8a 83       	std	Y+2, r24	; 0x02
   12a66:	f8 01       	movw	r30, r16
   12a68:	84 81       	ldd	r24, Z+4	; 0x04
   12a6a:	95 81       	ldd	r25, Z+5	; 0x05
   12a6c:	9d 83       	std	Y+5, r25	; 0x05
   12a6e:	8c 83       	std	Y+4, r24	; 0x04
   12a70:	86 81       	ldd	r24, Z+6	; 0x06
   12a72:	97 81       	ldd	r25, Z+7	; 0x07
   12a74:	9f 83       	std	Y+7, r25	; 0x07
   12a76:	8e 83       	std	Y+6, r24	; 0x06
   12a78:	80 85       	ldd	r24, Z+8	; 0x08
   12a7a:	91 85       	ldd	r25, Z+9	; 0x09
   12a7c:	99 87       	std	Y+9, r25	; 0x09
   12a7e:	88 87       	std	Y+8, r24	; 0x08
   12a80:	82 85       	ldd	r24, Z+10	; 0x0a
   12a82:	8a 87       	std	Y+10, r24	; 0x0a
   12a84:	83 85       	ldd	r24, Z+11	; 0x0b
   12a86:	8b 87       	std	Y+11, r24	; 0x0b
   12a88:	84 85       	ldd	r24, Z+12	; 0x0c
   12a8a:	95 85       	ldd	r25, Z+13	; 0x0d
   12a8c:	a6 85       	ldd	r26, Z+14	; 0x0e
   12a8e:	b7 85       	ldd	r27, Z+15	; 0x0f
   12a90:	8c 87       	std	Y+12, r24	; 0x0c
   12a92:	9d 87       	std	Y+13, r25	; 0x0d
   12a94:	ae 87       	std	Y+14, r26	; 0x0e
   12a96:	bf 87       	std	Y+15, r27	; 0x0f
   12a98:	80 89       	ldd	r24, Z+16	; 0x10
   12a9a:	91 89       	ldd	r25, Z+17	; 0x11
   12a9c:	99 8b       	std	Y+17, r25	; 0x11
   12a9e:	88 8b       	std	Y+16, r24	; 0x10
   12aa0:	82 89       	ldd	r24, Z+18	; 0x12
   12aa2:	8a 8b       	std	Y+18, r24	; 0x12
   12aa4:	83 89       	ldd	r24, Z+19	; 0x13
   12aa6:	8b 8b       	std	Y+19, r24	; 0x13
   12aa8:	84 89       	ldd	r24, Z+20	; 0x14
   12aaa:	95 89       	ldd	r25, Z+21	; 0x15
   12aac:	9d 8b       	std	Y+21, r25	; 0x15
   12aae:	8c 8b       	std	Y+20, r24	; 0x14
   12ab0:	86 89       	ldd	r24, Z+22	; 0x16
   12ab2:	97 89       	ldd	r25, Z+23	; 0x17
   12ab4:	9f 8b       	std	Y+23, r25	; 0x17
   12ab6:	8e 8b       	std	Y+22, r24	; 0x16
   12ab8:	80 8d       	ldd	r24, Z+24	; 0x18
   12aba:	91 8d       	ldd	r25, Z+25	; 0x19
   12abc:	99 8f       	std	Y+25, r25	; 0x19
   12abe:	88 8f       	std	Y+24, r24	; 0x18
   12ac0:	82 8d       	ldd	r24, Z+26	; 0x1a
   12ac2:	93 8d       	ldd	r25, Z+27	; 0x1b
   12ac4:	9b 8f       	std	Y+27, r25	; 0x1b
   12ac6:	8a 8f       	std	Y+26, r24	; 0x1a
   12ac8:	84 8d       	ldd	r24, Z+28	; 0x1c
   12aca:	8c 8f       	std	Y+28, r24	; 0x1c
   12acc:	85 8d       	ldd	r24, Z+29	; 0x1d
   12ace:	8d 8f       	std	Y+29, r24	; 0x1d
   12ad0:	87 8d       	ldd	r24, Z+31	; 0x1f
   12ad2:	90 a1       	ldd	r25, Z+32	; 0x20
   12ad4:	a1 a1       	ldd	r26, Z+33	; 0x21
   12ad6:	b2 a1       	ldd	r27, Z+34	; 0x22
   12ad8:	8f 8f       	std	Y+31, r24	; 0x1f
   12ada:	98 a3       	std	Y+32, r25	; 0x20
   12adc:	a9 a3       	std	Y+33, r26	; 0x21
   12ade:	ba a3       	std	Y+34, r27	; 0x22
   12ae0:	83 a1       	ldd	r24, Z+35	; 0x23
   12ae2:	8b a3       	std	Y+35, r24	; 0x23
   12ae4:	84 a1       	ldd	r24, Z+36	; 0x24
   12ae6:	95 a1       	ldd	r25, Z+37	; 0x25
   12ae8:	9d a3       	std	Y+37, r25	; 0x25
   12aea:	8c a3       	std	Y+36, r24	; 0x24
   12aec:	86 a1       	ldd	r24, Z+38	; 0x26
   12aee:	97 a1       	ldd	r25, Z+39	; 0x27
   12af0:	a0 a5       	ldd	r26, Z+40	; 0x28
   12af2:	b1 a5       	ldd	r27, Z+41	; 0x29
   12af4:	8e a3       	std	Y+38, r24	; 0x26
   12af6:	9f a3       	std	Y+39, r25	; 0x27
   12af8:	a8 a7       	std	Y+40, r26	; 0x28
   12afa:	b9 a7       	std	Y+41, r27	; 0x29
   12afc:	82 a5       	ldd	r24, Z+42	; 0x2a
   12afe:	8a a7       	std	Y+42, r24	; 0x2a
   12b00:	df 91       	pop	r29
   12b02:	cf 91       	pop	r28
   12b04:	1f 91       	pop	r17
   12b06:	0f 91       	pop	r16
   12b08:	08 95       	ret

00012b0a <alloc_device>:
   12b0a:	0f 93       	push	r16
   12b0c:	1f 93       	push	r17
   12b0e:	cf 93       	push	r28
   12b10:	df 93       	push	r29
   12b12:	ad b7       	in	r26, 0x3d	; 61
   12b14:	be b7       	in	r27, 0x3e	; 62
   12b16:	17 97       	sbiw	r26, 0x07	; 7
   12b18:	0f b6       	in	r0, 0x3f	; 63
   12b1a:	f8 94       	cli
   12b1c:	be bf       	out	0x3e, r27	; 62
   12b1e:	0f be       	out	0x3f, r0	; 63
   12b20:	ad bf       	out	0x3d, r26	; 61
   12b22:	8c 01       	movw	r16, r24
   12b24:	67 de       	rcall	.-818    	; 0x127f4 <find_free>
   12b26:	ec 01       	movw	r28, r24
   12b28:	cf 3f       	cpi	r28, 0xFF	; 255
   12b2a:	8f ef       	ldi	r24, 0xFF	; 255
   12b2c:	d8 07       	cpc	r29, r24
   12b2e:	89 f4       	brne	.+34     	; 0x12b52 <alloc_device+0x48>
   12b30:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   12b34:	80 ff       	sbrs	r24, 0
   12b36:	a1 c0       	rjmp	.+322    	; 0x12c7a <alloc_device+0x170>
   12b38:	ed b7       	in	r30, 0x3d	; 61
   12b3a:	fe b7       	in	r31, 0x3e	; 62
   12b3c:	15 83       	std	Z+5, r17	; 0x05
   12b3e:	04 83       	std	Z+4, r16	; 0x04
   12b40:	88 e0       	ldi	r24, 0x08	; 8
   12b42:	9e e1       	ldi	r25, 0x1E	; 30
   12b44:	a0 e0       	ldi	r26, 0x00	; 0
   12b46:	81 83       	std	Z+1, r24	; 0x01
   12b48:	92 83       	std	Z+2, r25	; 0x02
   12b4a:	a3 83       	std	Z+3, r26	; 0x03
   12b4c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   12b50:	94 c0       	rjmp	.+296    	; 0x12c7a <alloc_device+0x170>
   12b52:	02 30       	cpi	r16, 0x02	; 2
   12b54:	11 05       	cpc	r17, r1
   12b56:	e1 f1       	breq	.+120    	; 0x12bd0 <alloc_device+0xc6>
   12b58:	ec f4       	brge	.+58     	; 0x12b94 <alloc_device+0x8a>
   12b5a:	01 30       	cpi	r16, 0x01	; 1
   12b5c:	11 05       	cpc	r17, r1
   12b5e:	09 f0       	breq	.+2      	; 0x12b62 <alloc_device+0x58>
   12b60:	76 c0       	rjmp	.+236    	; 0x12c4e <alloc_device+0x144>
   12b62:	8b e2       	ldi	r24, 0x2B	; 43
   12b64:	8c 9f       	mul	r24, r28
   12b66:	80 01       	movw	r16, r0
   12b68:	8d 9f       	mul	r24, r29
   12b6a:	10 0d       	add	r17, r0
   12b6c:	11 24       	eor	r1, r1
   12b6e:	04 57       	subi	r16, 0x74	; 116
   12b70:	11 4e       	sbci	r17, 0xE1	; 225
   12b72:	81 e0       	ldi	r24, 0x01	; 1
   12b74:	f8 01       	movw	r30, r16
   12b76:	80 83       	st	Z, r24
   12b78:	61 e0       	ldi	r22, 0x01	; 1
   12b7a:	70 e0       	ldi	r23, 0x00	; 0
   12b7c:	85 e1       	ldi	r24, 0x15	; 21
   12b7e:	90 e0       	ldi	r25, 0x00	; 0
   12b80:	0e 94 75 29 	call	0x52ea	; 0x52ea <safecalloc>
   12b84:	f8 01       	movw	r30, r16
   12b86:	90 a7       	std	Z+40, r25	; 0x28
   12b88:	87 a3       	std	Z+39, r24	; 0x27
   12b8a:	61 e0       	ldi	r22, 0x01	; 1
   12b8c:	70 e0       	ldi	r23, 0x00	; 0
   12b8e:	88 e1       	ldi	r24, 0x18	; 24
   12b90:	90 e0       	ldi	r25, 0x00	; 0
   12b92:	57 c0       	rjmp	.+174    	; 0x12c42 <alloc_device+0x138>
   12b94:	03 30       	cpi	r16, 0x03	; 3
   12b96:	11 05       	cpc	r17, r1
   12b98:	a1 f1       	breq	.+104    	; 0x12c02 <alloc_device+0xf8>
   12b9a:	04 30       	cpi	r16, 0x04	; 4
   12b9c:	11 05       	cpc	r17, r1
   12b9e:	09 f0       	breq	.+2      	; 0x12ba2 <alloc_device+0x98>
   12ba0:	56 c0       	rjmp	.+172    	; 0x12c4e <alloc_device+0x144>
   12ba2:	8b e2       	ldi	r24, 0x2B	; 43
   12ba4:	8c 9f       	mul	r24, r28
   12ba6:	80 01       	movw	r16, r0
   12ba8:	8d 9f       	mul	r24, r29
   12baa:	10 0d       	add	r17, r0
   12bac:	11 24       	eor	r1, r1
   12bae:	04 57       	subi	r16, 0x74	; 116
   12bb0:	11 4e       	sbci	r17, 0xE1	; 225
   12bb2:	84 e0       	ldi	r24, 0x04	; 4
   12bb4:	f8 01       	movw	r30, r16
   12bb6:	80 83       	st	Z, r24
   12bb8:	61 e0       	ldi	r22, 0x01	; 1
   12bba:	70 e0       	ldi	r23, 0x00	; 0
   12bbc:	8b e0       	ldi	r24, 0x0B	; 11
   12bbe:	90 e0       	ldi	r25, 0x00	; 0
   12bc0:	0e 94 75 29 	call	0x52ea	; 0x52ea <safecalloc>
   12bc4:	f8 01       	movw	r30, r16
   12bc6:	90 a7       	std	Z+40, r25	; 0x28
   12bc8:	87 a3       	std	Z+39, r24	; 0x27
   12bca:	12 a6       	std	Z+42, r1	; 0x2a
   12bcc:	11 a6       	std	Z+41, r1	; 0x29
   12bce:	55 c0       	rjmp	.+170    	; 0x12c7a <alloc_device+0x170>
   12bd0:	8b e2       	ldi	r24, 0x2B	; 43
   12bd2:	8c 9f       	mul	r24, r28
   12bd4:	80 01       	movw	r16, r0
   12bd6:	8d 9f       	mul	r24, r29
   12bd8:	10 0d       	add	r17, r0
   12bda:	11 24       	eor	r1, r1
   12bdc:	04 57       	subi	r16, 0x74	; 116
   12bde:	11 4e       	sbci	r17, 0xE1	; 225
   12be0:	82 e0       	ldi	r24, 0x02	; 2
   12be2:	f8 01       	movw	r30, r16
   12be4:	80 83       	st	Z, r24
   12be6:	61 e0       	ldi	r22, 0x01	; 1
   12be8:	70 e0       	ldi	r23, 0x00	; 0
   12bea:	82 e3       	ldi	r24, 0x32	; 50
   12bec:	90 e0       	ldi	r25, 0x00	; 0
   12bee:	0e 94 75 29 	call	0x52ea	; 0x52ea <safecalloc>
   12bf2:	f8 01       	movw	r30, r16
   12bf4:	90 a7       	std	Z+40, r25	; 0x28
   12bf6:	87 a3       	std	Z+39, r24	; 0x27
   12bf8:	61 e0       	ldi	r22, 0x01	; 1
   12bfa:	70 e0       	ldi	r23, 0x00	; 0
   12bfc:	86 e1       	ldi	r24, 0x16	; 22
   12bfe:	90 e0       	ldi	r25, 0x00	; 0
   12c00:	20 c0       	rjmp	.+64     	; 0x12c42 <alloc_device+0x138>
   12c02:	8b e2       	ldi	r24, 0x2B	; 43
   12c04:	8c 9f       	mul	r24, r28
   12c06:	80 01       	movw	r16, r0
   12c08:	8d 9f       	mul	r24, r29
   12c0a:	10 0d       	add	r17, r0
   12c0c:	11 24       	eor	r1, r1
   12c0e:	04 57       	subi	r16, 0x74	; 116
   12c10:	11 4e       	sbci	r17, 0xE1	; 225
   12c12:	83 e0       	ldi	r24, 0x03	; 3
   12c14:	f8 01       	movw	r30, r16
   12c16:	80 83       	st	Z, r24
   12c18:	61 e0       	ldi	r22, 0x01	; 1
   12c1a:	70 e0       	ldi	r23, 0x00	; 0
   12c1c:	82 e3       	ldi	r24, 0x32	; 50
   12c1e:	90 e0       	ldi	r25, 0x00	; 0
   12c20:	0e 94 75 29 	call	0x52ea	; 0x52ea <safecalloc>
   12c24:	f8 01       	movw	r30, r16
   12c26:	90 a7       	std	Z+40, r25	; 0x28
   12c28:	87 a3       	std	Z+39, r24	; 0x27
   12c2a:	61 e0       	ldi	r22, 0x01	; 1
   12c2c:	70 e0       	ldi	r23, 0x00	; 0
   12c2e:	86 e1       	ldi	r24, 0x16	; 22
   12c30:	90 e0       	ldi	r25, 0x00	; 0
   12c32:	0e 94 75 29 	call	0x52ea	; 0x52ea <safecalloc>
   12c36:	f8 01       	movw	r30, r16
   12c38:	92 a7       	std	Z+42, r25	; 0x2a
   12c3a:	81 a7       	std	Z+41, r24	; 0x29
   12c3c:	ce 01       	movw	r24, r28
   12c3e:	eb de       	rcall	.-554    	; 0x12a16 <SS80_Set_Defaults>
   12c40:	1c c0       	rjmp	.+56     	; 0x12c7a <alloc_device+0x170>
   12c42:	0e 94 75 29 	call	0x52ea	; 0x52ea <safecalloc>
   12c46:	f8 01       	movw	r30, r16
   12c48:	92 a7       	std	Z+42, r25	; 0x2a
   12c4a:	81 a7       	std	Z+41, r24	; 0x29
   12c4c:	16 c0       	rjmp	.+44     	; 0x12c7a <alloc_device+0x170>
   12c4e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   12c52:	80 ff       	sbrs	r24, 0
   12c54:	10 c0       	rjmp	.+32     	; 0x12c76 <alloc_device+0x16c>
   12c56:	c8 01       	movw	r24, r16
   12c58:	b4 dd       	rcall	.-1176   	; 0x127c2 <type_to_str>
   12c5a:	ed b7       	in	r30, 0x3d	; 61
   12c5c:	fe b7       	in	r31, 0x3e	; 62
   12c5e:	97 83       	std	Z+7, r25	; 0x07
   12c60:	86 83       	std	Z+6, r24	; 0x06
   12c62:	15 83       	std	Z+5, r17	; 0x05
   12c64:	04 83       	std	Z+4, r16	; 0x04
   12c66:	86 ee       	ldi	r24, 0xE6	; 230
   12c68:	9d e1       	ldi	r25, 0x1D	; 29
   12c6a:	a0 e0       	ldi	r26, 0x00	; 0
   12c6c:	81 83       	std	Z+1, r24	; 0x01
   12c6e:	92 83       	std	Z+2, r25	; 0x02
   12c70:	a3 83       	std	Z+3, r26	; 0x03
   12c72:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   12c76:	cf ef       	ldi	r28, 0xFF	; 255
   12c78:	df ef       	ldi	r29, 0xFF	; 255
   12c7a:	ce 01       	movw	r24, r28
   12c7c:	cd b7       	in	r28, 0x3d	; 61
   12c7e:	de b7       	in	r29, 0x3e	; 62
   12c80:	27 96       	adiw	r28, 0x07	; 7
   12c82:	e4 e0       	ldi	r30, 0x04	; 4
   12c84:	0c 94 b0 e4 	jmp	0x1c960	; 0x1c960 <__epilogue_restores__+0x1c>

00012c88 <init_Devices>:
   12c88:	cf 93       	push	r28
   12c8a:	df 93       	push	r29
   12c8c:	10 92 16 19 	sts	0x1916, r1	; 0x801916 <stack_ind+0x1>
   12c90:	10 92 15 19 	sts	0x1915, r1	; 0x801915 <stack_ind>
   12c94:	ec e8       	ldi	r30, 0x8C	; 140
   12c96:	fe e1       	ldi	r31, 0x1E	; 30
   12c98:	9f ef       	ldi	r25, 0xFF	; 255
   12c9a:	80 e2       	ldi	r24, 0x20	; 32
   12c9c:	10 82       	st	Z, r1
   12c9e:	11 82       	std	Z+1, r1	; 0x01
   12ca0:	92 83       	std	Z+2, r25	; 0x02
   12ca2:	13 82       	std	Z+3, r1	; 0x03
   12ca4:	14 82       	std	Z+4, r1	; 0x04
   12ca6:	15 82       	std	Z+5, r1	; 0x05
   12ca8:	16 82       	std	Z+6, r1	; 0x06
   12caa:	df 01       	movw	r26, r30
   12cac:	17 96       	adiw	r26, 0x07	; 7
   12cae:	ed 01       	movw	r28, r26
   12cb0:	28 2f       	mov	r18, r24
   12cb2:	19 92       	st	Y+, r1
   12cb4:	2a 95       	dec	r18
   12cb6:	e9 f7       	brne	.-6      	; 0x12cb2 <init_Devices+0x2a>
   12cb8:	10 a6       	std	Z+40, r1	; 0x28
   12cba:	17 a2       	std	Z+39, r1	; 0x27
   12cbc:	12 a6       	std	Z+42, r1	; 0x2a
   12cbe:	11 a6       	std	Z+41, r1	; 0x29
   12cc0:	bb 96       	adiw	r30, 0x2b	; 43
   12cc2:	c0 e2       	ldi	r28, 0x20	; 32
   12cc4:	e0 39       	cpi	r30, 0x90	; 144
   12cc6:	fc 07       	cpc	r31, r28
   12cc8:	49 f7       	brne	.-46     	; 0x12c9c <init_Devices+0x14>
   12cca:	df 91       	pop	r29
   12ccc:	cf 91       	pop	r28
   12cce:	08 95       	ret

00012cd0 <push_state>:
   12cd0:	20 91 15 19 	lds	r18, 0x1915	; 0x801915 <stack_ind>
   12cd4:	30 91 16 19 	lds	r19, 0x1916	; 0x801916 <stack_ind+0x1>
   12cd8:	25 30       	cpi	r18, 0x05	; 5
   12cda:	31 05       	cpc	r19, r1
   12cdc:	7c f4       	brge	.+30     	; 0x12cfc <push_state+0x2c>
   12cde:	a9 01       	movw	r20, r18
   12ce0:	4f 5f       	subi	r20, 0xFF	; 255
   12ce2:	5f 4f       	sbci	r21, 0xFF	; 255
   12ce4:	50 93 16 19 	sts	0x1916, r21	; 0x801916 <stack_ind+0x1>
   12ce8:	40 93 15 19 	sts	0x1915, r20	; 0x801915 <stack_ind>
   12cec:	22 0f       	add	r18, r18
   12cee:	33 1f       	adc	r19, r19
   12cf0:	f9 01       	movw	r30, r18
   12cf2:	e5 5f       	subi	r30, 0xF5	; 245
   12cf4:	f6 4e       	sbci	r31, 0xE6	; 230
   12cf6:	80 83       	st	Z, r24
   12cf8:	91 83       	std	Z+1, r25	; 0x01
   12cfa:	08 95       	ret
   12cfc:	80 e0       	ldi	r24, 0x00	; 0
   12cfe:	90 e0       	ldi	r25, 0x00	; 0
   12d00:	08 95       	ret

00012d02 <pop_state>:
   12d02:	80 91 15 19 	lds	r24, 0x1915	; 0x801915 <stack_ind>
   12d06:	90 91 16 19 	lds	r25, 0x1916	; 0x801916 <stack_ind+0x1>
   12d0a:	18 16       	cp	r1, r24
   12d0c:	19 06       	cpc	r1, r25
   12d0e:	6c f4       	brge	.+26     	; 0x12d2a <pop_state+0x28>
   12d10:	01 97       	sbiw	r24, 0x01	; 1
   12d12:	90 93 16 19 	sts	0x1916, r25	; 0x801916 <stack_ind+0x1>
   12d16:	80 93 15 19 	sts	0x1915, r24	; 0x801915 <stack_ind>
   12d1a:	88 0f       	add	r24, r24
   12d1c:	99 1f       	adc	r25, r25
   12d1e:	fc 01       	movw	r30, r24
   12d20:	e5 5f       	subi	r30, 0xF5	; 245
   12d22:	f6 4e       	sbci	r31, 0xE6	; 230
   12d24:	80 81       	ld	r24, Z
   12d26:	91 81       	ldd	r25, Z+1	; 0x01
   12d28:	08 95       	ret
   12d2a:	80 e0       	ldi	r24, 0x00	; 0
   12d2c:	90 e0       	ldi	r25, 0x00	; 0
   12d2e:	08 95       	ret

00012d30 <set_Config_Defaults>:
   12d30:	08 95       	ret

00012d32 <hpdir_set_device>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
void hpdir_set_device(int index)
{
   12d32:	00 d0       	rcall	.+0      	; 0x12d34 <hpdir_set_device+0x2>
   12d34:	1f 92       	push	r1
    SS80DiskType *SS80p = NULL;
#ifdef AMIGO
    AMIGODiskType *AMIGOp = NULL;
#endif
	if(Devices[index].TYPE == SS80_TYPE)
   12d36:	2b e2       	ldi	r18, 0x2B	; 43
   12d38:	28 9f       	mul	r18, r24
   12d3a:	f0 01       	movw	r30, r0
   12d3c:	29 9f       	mul	r18, r25
   12d3e:	f0 0d       	add	r31, r0
   12d40:	11 24       	eor	r1, r1
   12d42:	e4 57       	subi	r30, 0x74	; 116
   12d44:	f1 4e       	sbci	r31, 0xE1	; 225
   12d46:	20 81       	ld	r18, Z
   12d48:	23 30       	cpi	r18, 0x03	; 3
   12d4a:	a9 f5       	brne	.+106    	; 0x12db6 <hpdir_set_device+0x84>
	{
		SS80p = (SS80DiskType *) Devices[index].dev;
   12d4c:	07 a0       	ldd	r0, Z+39	; 0x27
   12d4e:	f0 a5       	ldd	r31, Z+40	; 0x28
   12d50:	e0 2d       	mov	r30, r0
		return;
	}

	if(Devices[index].TYPE == SS80_TYPE)
	{
		SS80p->CONFIG.ID 				= hpdir.ID;
   12d52:	20 91 10 21 	lds	r18, 0x2110	; 0x802110 <hpdir+0x80>
   12d56:	30 91 11 21 	lds	r19, 0x2111	; 0x802111 <hpdir+0x81>
   12d5a:	35 83       	std	Z+5, r19	; 0x05
   12d5c:	24 83       	std	Z+4, r18	; 0x04
		SS80p->UNIT.DEVICE_NUMBER 		= hpdir.DEVICE_NUMBER;
   12d5e:	40 91 1c 21 	lds	r20, 0x211C	; 0x80211c <hpdir+0x8c>
   12d62:	50 91 1d 21 	lds	r21, 0x211D	; 0x80211d <hpdir+0x8d>
   12d66:	60 91 1e 21 	lds	r22, 0x211E	; 0x80211e <hpdir+0x8e>
   12d6a:	70 91 1f 21 	lds	r23, 0x211F	; 0x80211f <hpdir+0x8f>
   12d6e:	44 87       	std	Z+12, r20	; 0x0c
   12d70:	55 87       	std	Z+13, r21	; 0x0d
   12d72:	66 87       	std	Z+14, r22	; 0x0e
   12d74:	77 87       	std	Z+15, r23	; 0x0f
		SS80p->UNIT.BYTES_PER_BLOCK 	= hpdir.BYTES_PER_SECTOR;
   12d76:	20 91 30 21 	lds	r18, 0x2130	; 0x802130 <hpdir+0xa0>
   12d7a:	30 91 31 21 	lds	r19, 0x2131	; 0x802131 <hpdir+0xa1>
   12d7e:	31 8b       	std	Z+17, r19	; 0x11
   12d80:	20 8b       	std	Z+16, r18	; 0x10

		// CHS NOT used in this emulator!
		SS80p->VOLUME.MAX_CYLINDER 		= 0;	// hpdir.CYLINDERS-1;
   12d82:	17 8e       	std	Z+31, r1	; 0x1f
   12d84:	10 a2       	std	Z+32, r1	; 0x20
   12d86:	11 a2       	std	Z+33, r1	; 0x21
   12d88:	12 a2       	std	Z+34, r1	; 0x22
		SS80p->VOLUME.MAX_HEAD 			= 0;	// hpdir.HEADS-1;
   12d8a:	13 a2       	std	Z+35, r1	; 0x23
		SS80p->VOLUME.MAX_SECTOR 		= 0;	// hpdir.SECTORS-1;
   12d8c:	15 a2       	std	Z+37, r1	; 0x25
   12d8e:	14 a2       	std	Z+36, r1	; 0x24

		SS80p->VOLUME.MAX_BLOCK_NUMBER 	= hpdir.BLOCKS-1;
   12d90:	40 91 3c 21 	lds	r20, 0x213C	; 0x80213c <hpdir+0xac>
   12d94:	50 91 3d 21 	lds	r21, 0x213D	; 0x80213d <hpdir+0xad>
   12d98:	60 91 3e 21 	lds	r22, 0x213E	; 0x80213e <hpdir+0xae>
   12d9c:	70 91 3f 21 	lds	r23, 0x213F	; 0x80213f <hpdir+0xaf>
   12da0:	41 50       	subi	r20, 0x01	; 1
   12da2:	51 09       	sbc	r21, r1
   12da4:	61 09       	sbc	r22, r1
   12da6:	71 09       	sbc	r23, r1
   12da8:	46 a3       	std	Z+38, r20	; 0x26
   12daa:	57 a3       	std	Z+39, r21	; 0x27
   12dac:	60 a7       	std	Z+40, r22	; 0x28
   12dae:	71 a7       	std	Z+41, r23	; 0x29
///@return 1 on sucess or 0 on fail
void hpdir_set_device(int index)
{
    SS80DiskType *SS80p = NULL;
#ifdef AMIGO
    AMIGODiskType *AMIGOp = NULL;
   12db0:	e0 e0       	ldi	r30, 0x00	; 0
   12db2:	f0 e0       	ldi	r31, 0x00	; 0
   12db4:	11 c0       	rjmp	.+34     	; 0x12dd8 <hpdir_set_device+0xa6>
	if(Devices[index].TYPE == SS80_TYPE)
	{
		SS80p = (SS80DiskType *) Devices[index].dev;
	}
#ifdef AMIGO
	else if(Devices[index].TYPE == AMIGO_TYPE)
   12db6:	21 30       	cpi	r18, 0x01	; 1
   12db8:	21 f4       	brne	.+8      	; 0x12dc2 <hpdir_set_device+0x90>
	{
		AMIGOp = (AMIGODiskType *) Devices[index].dev;
   12dba:	07 a0       	ldd	r0, Z+39	; 0x27
   12dbc:	f0 a5       	ldd	r31, Z+40	; 0x28
   12dbe:	e0 2d       	mov	r30, r0
   12dc0:	0b c0       	rjmp	.+22     	; 0x12dd8 <hpdir_set_device+0xa6>
	}
#endif
	else
	{
		printf("hpdir_parameters invalid TYPE\n");
   12dc2:	87 ec       	ldi	r24, 0xC7	; 199
   12dc4:	9d e1       	ldi	r25, 0x1D	; 29
   12dc6:	a0 e0       	ldi	r26, 0x00	; 0
   12dc8:	ed b7       	in	r30, 0x3d	; 61
   12dca:	fe b7       	in	r31, 0x3e	; 62
   12dcc:	81 83       	std	Z+1, r24	; 0x01
   12dce:	92 83       	std	Z+2, r25	; 0x02
   12dd0:	a3 83       	std	Z+3, r26	; 0x03
   12dd2:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
		return;
   12dd6:	47 c0       	rjmp	.+142    	; 0x12e66 <hpdir_set_device+0x134>

		SS80p->VOLUME.MAX_BLOCK_NUMBER 	= hpdir.BLOCKS-1;
	}

#ifdef AMIGO
	if(Devices[index].TYPE == AMIGO_TYPE)
   12dd8:	2b e2       	ldi	r18, 0x2B	; 43
   12dda:	28 9f       	mul	r18, r24
   12ddc:	d0 01       	movw	r26, r0
   12dde:	29 9f       	mul	r18, r25
   12de0:	b0 0d       	add	r27, r0
   12de2:	11 24       	eor	r1, r1
   12de4:	a4 57       	subi	r26, 0x74	; 116
   12de6:	b1 4e       	sbci	r27, 0xE1	; 225
   12de8:	2c 91       	ld	r18, X
   12dea:	21 30       	cpi	r18, 0x01	; 1
   12dec:	f1 f4       	brne	.+60     	; 0x12e2a <hpdir_set_device+0xf8>
	{
		AMIGOp->CONFIG.ID = hpdir.ID;
   12dee:	20 91 10 21 	lds	r18, 0x2110	; 0x802110 <hpdir+0x80>
   12df2:	30 91 11 21 	lds	r19, 0x2111	; 0x802111 <hpdir+0x81>
   12df6:	35 83       	std	Z+5, r19	; 0x05
   12df8:	24 83       	std	Z+4, r18	; 0x04
		AMIGOp->GEOMETRY.BYTES_PER_SECTOR = hpdir.BYTES_PER_SECTOR;
   12dfa:	20 91 30 21 	lds	r18, 0x2130	; 0x802130 <hpdir+0xa0>
   12dfe:	30 91 31 21 	lds	r19, 0x2131	; 0x802131 <hpdir+0xa1>
   12e02:	37 83       	std	Z+7, r19	; 0x07
   12e04:	26 83       	std	Z+6, r18	; 0x06
		AMIGOp->GEOMETRY.SECTORS_PER_TRACK = hpdir.SECTORS;
   12e06:	20 91 2c 21 	lds	r18, 0x212C	; 0x80212c <hpdir+0x9c>
   12e0a:	30 91 2d 21 	lds	r19, 0x212D	; 0x80212d <hpdir+0x9d>
   12e0e:	31 87       	std	Z+9, r19	; 0x09
   12e10:	20 87       	std	Z+8, r18	; 0x08
		AMIGOp->GEOMETRY.HEADS = hpdir.HEADS;
   12e12:	20 91 28 21 	lds	r18, 0x2128	; 0x802128 <hpdir+0x98>
   12e16:	30 91 29 21 	lds	r19, 0x2129	; 0x802129 <hpdir+0x99>
   12e1a:	33 87       	std	Z+11, r19	; 0x0b
   12e1c:	22 87       	std	Z+10, r18	; 0x0a
		AMIGOp->GEOMETRY.CYLINDERS = hpdir.CYLINDERS;
   12e1e:	20 91 24 21 	lds	r18, 0x2124	; 0x802124 <hpdir+0x94>
   12e22:	30 91 25 21 	lds	r19, 0x2125	; 0x802125 <hpdir+0x95>
   12e26:	35 87       	std	Z+13, r19	; 0x0d
   12e28:	24 87       	std	Z+12, r18	; 0x0c
	}
#endif
	Devices[index].BLOCKS = hpdir.BLOCKS;
   12e2a:	4b e2       	ldi	r20, 0x2B	; 43
   12e2c:	48 9f       	mul	r20, r24
   12e2e:	90 01       	movw	r18, r0
   12e30:	49 9f       	mul	r20, r25
   12e32:	30 0d       	add	r19, r0
   12e34:	11 24       	eor	r1, r1
   12e36:	f9 01       	movw	r30, r18
   12e38:	e4 57       	subi	r30, 0x74	; 116
   12e3a:	f1 4e       	sbci	r31, 0xE1	; 225
   12e3c:	80 91 3c 21 	lds	r24, 0x213C	; 0x80213c <hpdir+0xac>
   12e40:	90 91 3d 21 	lds	r25, 0x213D	; 0x80213d <hpdir+0xad>
   12e44:	a0 91 3e 21 	lds	r26, 0x213E	; 0x80213e <hpdir+0xae>
   12e48:	b0 91 3f 21 	lds	r27, 0x213F	; 0x80213f <hpdir+0xaf>
   12e4c:	83 83       	std	Z+3, r24	; 0x03
   12e4e:	94 83       	std	Z+4, r25	; 0x04
   12e50:	a5 83       	std	Z+5, r26	; 0x05
   12e52:	b6 83       	std	Z+6, r27	; 0x06
	strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
   12e54:	4e e1       	ldi	r20, 0x1E	; 30
   12e56:	50 e0       	ldi	r21, 0x00	; 0
   12e58:	60 e9       	ldi	r22, 0x90	; 144
   12e5a:	70 e2       	ldi	r23, 0x20	; 32
   12e5c:	c9 01       	movw	r24, r18
   12e5e:	8d 56       	subi	r24, 0x6D	; 109
   12e60:	91 4e       	sbci	r25, 0xE1	; 225
   12e62:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <strncpy>

}
   12e66:	0f 90       	pop	r0
   12e68:	0f 90       	pop	r0
   12e6a:	0f 90       	pop	r0
   12e6c:	08 95       	ret

00012e6e <hpdir_set_parameters>:
///@param[in] index: Devices index
///@param[in] model: model string
///
///@return void
void hpdir_set_parameters(int index, char *model)
{
   12e6e:	cf 93       	push	r28
   12e70:	df 93       	push	r29
   12e72:	ec 01       	movw	r28, r24
   12e74:	cb 01       	movw	r24, r22
	if ( hpdir_find_drive( model, 0 ,1) )
   12e76:	41 e0       	ldi	r20, 0x01	; 1
   12e78:	50 e0       	ldi	r21, 0x00	; 0
   12e7a:	60 e0       	ldi	r22, 0x00	; 0
   12e7c:	70 e0       	ldi	r23, 0x00	; 0
   12e7e:	0e 94 c7 a4 	call	0x1498e	; 0x1498e <hpdir_find_drive>
   12e82:	89 2b       	or	r24, r25
   12e84:	11 f0       	breq	.+4      	; 0x12e8a <hpdir_set_parameters+0x1c>
		hpdir_set_device(index);
   12e86:	ce 01       	movw	r24, r28
   12e88:	54 df       	rcall	.-344    	; 0x12d32 <hpdir_set_device>
}
   12e8a:	df 91       	pop	r29
   12e8c:	cf 91       	pop	r28
   12e8e:	08 95       	ret

00012e90 <Post_Config>:

/// ===============================================
/// @brief Post Process COnfiguration file after reading
/// @return  void
void Post_Config()
{
   12e90:	4f 92       	push	r4
   12e92:	5f 92       	push	r5
   12e94:	6f 92       	push	r6
   12e96:	7f 92       	push	r7
   12e98:	8f 92       	push	r8
   12e9a:	af 92       	push	r10
   12e9c:	bf 92       	push	r11
   12e9e:	cf 92       	push	r12
   12ea0:	df 92       	push	r13
   12ea2:	ef 92       	push	r14
   12ea4:	0f 93       	push	r16
   12ea6:	1f 93       	push	r17
   12ea8:	cf 93       	push	r28
   12eaa:	df 93       	push	r29
   12eac:	00 d0       	rcall	.+0      	; 0x12eae <Post_Config+0x1e>
   12eae:	00 d0       	rcall	.+0      	; 0x12eb0 <Post_Config+0x20>
   12eb0:	1f 92       	push	r1
   12eb2:	cc e8       	ldi	r28, 0x8C	; 140
   12eb4:	de e1       	ldi	r29, 0x1E	; 30
   12eb6:	80 e9       	ldi	r24, 0x90	; 144
   12eb8:	48 2e       	mov	r4, r24
   12eba:	80 e2       	ldi	r24, 0x20	; 32
   12ebc:	58 2e       	mov	r5, r24
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
			if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
			{
				AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   12ebe:	a1 2c       	mov	r10, r1
   12ec0:	bb 24       	eor	r11, r11
   12ec2:	b3 94       	inc	r11
				printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   12ec4:	8a e5       	ldi	r24, 0x5A	; 90
   12ec6:	9d e1       	ldi	r25, 0x1D	; 29
   12ec8:	6c 01       	movw	r12, r24
   12eca:	e1 2c       	mov	r14, r1
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
			if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
			{
				// SS80p->UNIT.BYTES_PER_BLOCK = 256;
				printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   12ecc:	81 e9       	ldi	r24, 0x91	; 145
   12ece:	9d e1       	ldi	r25, 0x1D	; 29
   12ed0:	3c 01       	movw	r6, r24
   12ed2:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   12ed4:	88 81       	ld	r24, Y
   12ed6:	88 23       	and	r24, r24
   12ed8:	09 f4       	brne	.+2      	; 0x12edc <Post_Config+0x4c>
   12eda:	57 c0       	rjmp	.+174    	; 0x12f8a <Post_Config+0xfa>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   12edc:	83 30       	cpi	r24, 0x03	; 3
   12ede:	f9 f4       	brne	.+62     	; 0x12f1e <Post_Config+0x8e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   12ee0:	0f a1       	ldd	r16, Y+39	; 0x27
   12ee2:	18 a5       	ldd	r17, Y+40	; 0x28
			if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   12ee4:	f8 01       	movw	r30, r16
   12ee6:	80 89       	ldd	r24, Z+16	; 0x10
   12ee8:	91 89       	ldd	r25, Z+17	; 0x11
   12eea:	81 15       	cp	r24, r1
   12eec:	91 40       	sbci	r25, 0x01	; 1
   12eee:	59 f0       	breq	.+22     	; 0x12f06 <Post_Config+0x76>
			{
				// SS80p->UNIT.BYTES_PER_BLOCK = 256;
				printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   12ef0:	ce 01       	movw	r24, r28
   12ef2:	07 96       	adiw	r24, 0x07	; 7
   12ef4:	ed b7       	in	r30, 0x3d	; 61
   12ef6:	fe b7       	in	r31, 0x3e	; 62
   12ef8:	95 83       	std	Z+5, r25	; 0x05
   12efa:	84 83       	std	Z+4, r24	; 0x04
   12efc:	61 82       	std	Z+1, r6	; 0x01
   12efe:	72 82       	std	Z+2, r7	; 0x02
   12f00:	83 82       	std	Z+3, r8	; 0x03
   12f02:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
			}
			sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
			Devices[i].BLOCKS = sectors;
   12f06:	f8 01       	movw	r30, r16
   12f08:	86 a1       	ldd	r24, Z+38	; 0x26
   12f0a:	97 a1       	ldd	r25, Z+39	; 0x27
   12f0c:	a0 a5       	ldd	r26, Z+40	; 0x28
   12f0e:	b1 a5       	ldd	r27, Z+41	; 0x29
   12f10:	01 96       	adiw	r24, 0x01	; 1
   12f12:	a1 1d       	adc	r26, r1
   12f14:	b1 1d       	adc	r27, r1
   12f16:	8b 83       	std	Y+3, r24	; 0x03
   12f18:	9c 83       	std	Y+4, r25	; 0x04
   12f1a:	ad 83       	std	Y+5, r26	; 0x05
   12f1c:	be 83       	std	Y+6, r27	; 0x06
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   12f1e:	88 81       	ld	r24, Y
   12f20:	81 30       	cpi	r24, 0x01	; 1
   12f22:	99 f5       	brne	.+102    	; 0x12f8a <Post_Config+0xfa>
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
   12f24:	0f a1       	ldd	r16, Y+39	; 0x27
   12f26:	18 a5       	ldd	r17, Y+40	; 0x28
			if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   12f28:	f8 01       	movw	r30, r16
   12f2a:	86 81       	ldd	r24, Z+6	; 0x06
   12f2c:	97 81       	ldd	r25, Z+7	; 0x07
   12f2e:	81 15       	cp	r24, r1
   12f30:	91 40       	sbci	r25, 0x01	; 1
   12f32:	71 f0       	breq	.+28     	; 0x12f50 <Post_Config+0xc0>
			{
				AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   12f34:	f8 01       	movw	r30, r16
   12f36:	b7 82       	std	Z+7, r11	; 0x07
   12f38:	a6 82       	std	Z+6, r10	; 0x06
				printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   12f3a:	ce 01       	movw	r24, r28
   12f3c:	07 96       	adiw	r24, 0x07	; 7
   12f3e:	ed b7       	in	r30, 0x3d	; 61
   12f40:	fe b7       	in	r31, 0x3e	; 62
   12f42:	95 83       	std	Z+5, r25	; 0x05
   12f44:	84 83       	std	Z+4, r24	; 0x04
   12f46:	c1 82       	std	Z+1, r12	; 0x01
   12f48:	d2 82       	std	Z+2, r13	; 0x02
   12f4a:	e3 82       	std	Z+3, r14	; 0x03
   12f4c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
			}
			sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
				 * AMIGOp->GEOMETRY.HEADS
				 * AMIGOp->GEOMETRY.CYLINDERS;
			Devices[i].BLOCKS = sectors;
   12f50:	f8 01       	movw	r30, r16
   12f52:	20 85       	ldd	r18, Z+8	; 0x08
   12f54:	31 85       	ldd	r19, Z+9	; 0x09
   12f56:	82 85       	ldd	r24, Z+10	; 0x0a
   12f58:	93 85       	ldd	r25, Z+11	; 0x0b
   12f5a:	28 9f       	mul	r18, r24
   12f5c:	a0 01       	movw	r20, r0
   12f5e:	29 9f       	mul	r18, r25
   12f60:	50 0d       	add	r21, r0
   12f62:	38 9f       	mul	r19, r24
   12f64:	50 0d       	add	r21, r0
   12f66:	11 24       	eor	r1, r1
   12f68:	24 85       	ldd	r18, Z+12	; 0x0c
   12f6a:	35 85       	ldd	r19, Z+13	; 0x0d
   12f6c:	42 9f       	mul	r20, r18
   12f6e:	c0 01       	movw	r24, r0
   12f70:	43 9f       	mul	r20, r19
   12f72:	90 0d       	add	r25, r0
   12f74:	52 9f       	mul	r21, r18
   12f76:	90 0d       	add	r25, r0
   12f78:	11 24       	eor	r1, r1
   12f7a:	09 2e       	mov	r0, r25
   12f7c:	00 0c       	add	r0, r0
   12f7e:	aa 0b       	sbc	r26, r26
   12f80:	bb 0b       	sbc	r27, r27
   12f82:	8b 83       	std	Y+3, r24	; 0x03
   12f84:	9c 83       	std	Y+4, r25	; 0x04
   12f86:	ad 83       	std	Y+5, r26	; 0x05
   12f88:	be 83       	std	Y+6, r27	; 0x06
   12f8a:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   12f8c:	4c 16       	cp	r4, r28
   12f8e:	5d 06       	cpc	r5, r29
   12f90:	09 f0       	breq	.+2      	; 0x12f94 <Post_Config+0x104>
   12f92:	a0 cf       	rjmp	.-192    	; 0x12ed4 <Post_Config+0x44>
				 * AMIGOp->GEOMETRY.CYLINDERS;
			Devices[i].BLOCKS = sectors;
        } 
#endif // #ifdef AMIGO
    }
}
   12f94:	0f 90       	pop	r0
   12f96:	0f 90       	pop	r0
   12f98:	0f 90       	pop	r0
   12f9a:	0f 90       	pop	r0
   12f9c:	0f 90       	pop	r0
   12f9e:	df 91       	pop	r29
   12fa0:	cf 91       	pop	r28
   12fa2:	1f 91       	pop	r17
   12fa4:	0f 91       	pop	r16
   12fa6:	ef 90       	pop	r14
   12fa8:	df 90       	pop	r13
   12faa:	cf 90       	pop	r12
   12fac:	bf 90       	pop	r11
   12fae:	af 90       	pop	r10
   12fb0:	8f 90       	pop	r8
   12fb2:	7f 90       	pop	r7
   12fb4:	6f 90       	pop	r6
   12fb6:	5f 90       	pop	r5
   12fb8:	4f 90       	pop	r4
   12fba:	08 95       	ret

00012fbc <Read_Config>:
/// Set all drive parameters and debuglevel 
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   12fbc:	a3 ea       	ldi	r26, 0xA3	; 163
   12fbe:	b1 e0       	ldi	r27, 0x01	; 1
   12fc0:	e4 ee       	ldi	r30, 0xE4	; 228
   12fc2:	f7 e9       	ldi	r31, 0x97	; 151
   12fc4:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
    char *ptr;
    char str[128];
    char token[128];
    char arg[128];

    init_Devices();
   12fc8:	8c 01       	movw	r16, r24

    lines = 0;
   12fca:	5e de       	rcall	.-836    	; 0x12c88 <init_Devices>
   12fcc:	10 92 00 19 	sts	0x1900, r1	; 0x801900 <lines+0x1>
   12fd0:	10 92 ff 18 	sts	0x18FF, r1	; 0x8018ff <lines>

    printf("Reading: %s\n", name);
   12fd4:	ed b7       	in	r30, 0x3d	; 61
   12fd6:	fe b7       	in	r31, 0x3e	; 62
   12fd8:	15 83       	std	Z+5, r17	; 0x05
   12fda:	04 83       	std	Z+4, r16	; 0x04
   12fdc:	8d e4       	ldi	r24, 0x4D	; 77
   12fde:	9d e1       	ldi	r25, 0x1D	; 29
   12fe0:	a0 e0       	ldi	r26, 0x00	; 0
   12fe2:	81 83       	std	Z+1, r24	; 0x01
   12fe4:	92 83       	std	Z+2, r25	; 0x02
   12fe6:	a3 83       	std	Z+3, r26	; 0x03
   12fe8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    cfg = fopen(name, "rb");
   12fec:	6e e1       	ldi	r22, 0x1E	; 30
   12fee:	78 e0       	ldi	r23, 0x08	; 8
   12ff0:	c8 01       	movw	r24, r16
   12ff2:	0e 94 32 7f 	call	0xfe64	; 0xfe64 <fopen>
   12ff6:	c0 57       	subi	r28, 0x70	; 112
   12ff8:	de 4f       	sbci	r29, 0xFE	; 254
   12ffa:	99 83       	std	Y+1, r25	; 0x01
   12ffc:	88 83       	st	Y, r24
   12ffe:	c0 59       	subi	r28, 0x90	; 144
    if(cfg == NULL)
   13000:	d1 40       	sbci	r29, 0x01	; 1
   13002:	89 2b       	or	r24, r25
   13004:	09 f4       	brne	.+2      	; 0x13008 <Read_Config+0x4c>
   13006:	60 c0       	rjmp	.+192    	; 0x130c8 <Read_Config+0x10c>
   13008:	c4 57       	subi	r28, 0x74	; 116
   1300a:	de 4f       	sbci	r29, 0xFE	; 254
   1300c:	19 82       	std	Y+1, r1	; 0x01
   1300e:	18 82       	st	Y, r1
   13010:	cc 58       	subi	r28, 0x8C	; 140
   13012:	d1 40       	sbci	r29, 0x01	; 1
   13014:	a1 2c       	mov	r10, r1
   13016:	b1 2c       	mov	r11, r1
   13018:	c2 57       	subi	r28, 0x72	; 114
   1301a:	de 4f       	sbci	r29, 0xFE	; 254
   1301c:	19 82       	std	Y+1, r1	; 0x01
   1301e:	18 82       	st	Y, r1
   13020:	ce 58       	subi	r28, 0x8E	; 142
   13022:	d1 40       	sbci	r29, 0x01	; 1
   13024:	c1 2c       	mov	r12, r1
   13026:	d1 2c       	mov	r13, r1
   13028:	e1 2c       	mov	r14, r1
   1302a:	f1 2c       	mov	r15, r1
   1302c:	c6 57       	subi	r28, 0x76	; 118
   1302e:	de 4f       	sbci	r29, 0xFE	; 254
   13030:	19 82       	std	Y+1, r1	; 0x01
   13032:	18 82       	st	Y, r1
   13034:	ca 58       	subi	r28, 0x8A	; 138
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   13036:	d1 40       	sbci	r29, 0x01	; 1
   13038:	4e 01       	movw	r8, r28
   1303a:	f6 ef       	ldi	r31, 0xF6	; 246
   1303c:	8f 1a       	sub	r8, r31
   1303e:	fe ef       	ldi	r31, 0xFE	; 254
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Fatal Unexpected STATE %d at line:%d\n", state, lines);
   13040:	9f 0a       	sbc	r9, r31
   13042:	80 ec       	ldi	r24, 0xC0	; 192
   13044:	98 e1       	ldi	r25, 0x18	; 24
   13046:	9c 01       	movw	r18, r24
   13048:	40 e0       	ldi	r20, 0x00	; 0
   1304a:	ce 56       	subi	r28, 0x6E	; 110
   1304c:	de 4f       	sbci	r29, 0xFE	; 254
   1304e:	28 83       	st	Y, r18
   13050:	39 83       	std	Y+1, r19	; 0x01
   13052:	4a 83       	std	Y+2, r20	; 0x02
   13054:	c2 59       	subi	r28, 0x92	; 146
            {
                AMIGOp->GEOMETRY.CYLINDERS = val.w;
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", str,lines);
   13056:	d1 40       	sbci	r29, 0x01	; 1
   13058:	86 ee       	ldi	r24, 0xE6	; 230
   1305a:	98 e1       	ldi	r25, 0x18	; 24
   1305c:	9c 01       	movw	r18, r24
   1305e:	40 e0       	ldi	r20, 0x00	; 0
   13060:	cb 56       	subi	r28, 0x6B	; 107
   13062:	de 4f       	sbci	r29, 0xFE	; 254
   13064:	28 83       	st	Y, r18
   13066:	39 83       	std	Y+1, r19	; 0x01
   13068:	4a 83       	std	Y+2, r20	; 0x02
   1306a:	c5 59       	subi	r28, 0x95	; 149
        case AMIGO_GEOMETRY:
            if( MATCHI (token,"BYTES_PER_SECTOR") )
            {
                if(val.w > 0x1000)
				{
					printf("Fatal: AMIGO BYTES_PER_SECTOR > 0x1000, set to 256 at line:%d\n", lines);
   1306c:	d1 40       	sbci	r29, 0x01	; 1
   1306e:	86 e1       	ldi	r24, 0x16	; 22
   13070:	99 e1       	ldi	r25, 0x19	; 25
   13072:	9c 01       	movw	r18, r24
   13074:	40 e0       	ldi	r20, 0x00	; 0
   13076:	c8 56       	subi	r28, 0x68	; 104
   13078:	de 4f       	sbci	r29, 0xFE	; 254
   1307a:	28 83       	st	Y, r18
   1307c:	39 83       	std	Y+1, r19	; 0x01
   1307e:	4a 83       	std	Y+2, r20	; 0x02
   13080:	c8 59       	subi	r28, 0x98	; 152
            {
                AMIGOp->CONFIG.ID = val.w;
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", str,lines);
   13082:	d1 40       	sbci	r29, 0x01	; 1
   13084:	85 e5       	ldi	r24, 0x55	; 85
   13086:	99 e1       	ldi	r25, 0x19	; 25
   13088:	9c 01       	movw	r18, r24
   1308a:	40 e0       	ldi	r20, 0x00	; 0
   1308c:	c5 56       	subi	r28, 0x65	; 101
   1308e:	de 4f       	sbci	r29, 0xFE	; 254
   13090:	28 83       	st	Y, r18
   13092:	39 83       	std	Y+1, r19	; 0x01
   13094:	4a 83       	std	Y+2, r20	; 0x02
   13096:	cb 59       	subi	r28, 0x9B	; 155
            {
                AMIGOp->HEADER.NAME = stralloc(arg);
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", str,lines);
   13098:	d1 40       	sbci	r29, 0x01	; 1
   1309a:	84 e8       	ldi	r24, 0x84	; 132
   1309c:	99 e1       	ldi	r25, 0x19	; 25
   1309e:	9c 01       	movw	r18, r24
   130a0:	40 e0       	ldi	r20, 0x00	; 0
   130a2:	c2 56       	subi	r28, 0x62	; 98
   130a4:	de 4f       	sbci	r29, 0xFE	; 254
   130a6:	28 83       	st	Y, r18
   130a8:	39 83       	std	Y+1, r19	; 0x01
   130aa:	4a 83       	std	Y+2, r20	; 0x02
   130ac:	ce 59       	subi	r28, 0x9E	; 158
            }
            else if( MATCHI (token,"PPR") )
            {
                if(val.b > 7)
				{
					printf("Warning AMIGO ADDRESS: %d > 7, disabled at line:%d\n", str,lines);
   130ae:	d1 40       	sbci	r29, 0x01	; 1
   130b0:	84 eb       	ldi	r24, 0xB4	; 180
   130b2:	99 e1       	ldi	r25, 0x19	; 25
   130b4:	9c 01       	movw	r18, r24
   130b6:	40 e0       	ldi	r20, 0x00	; 0
   130b8:	cf 55       	subi	r28, 0x5F	; 95
   130ba:	de 4f       	sbci	r29, 0xFE	; 254
   130bc:	28 83       	st	Y, r18
   130be:	39 83       	std	Y+1, r19	; 0x01
   130c0:	4a 83       	std	Y+2, r20	; 0x02
   130c2:	c1 5a       	subi	r28, 0xA1	; 161
   130c4:	d1 40       	sbci	r29, 0x01	; 1
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
        //FIXME
        perror("Read_Config - open");
   130c6:	27 c0       	rjmp	.+78     	; 0x13116 <Read_Config+0x15a>
   130c8:	88 e7       	ldi	r24, 0x78	; 120
   130ca:	9d e0       	ldi	r25, 0x0D	; 13
   130cc:	0e 94 63 79 	call	0xf2c6	; 0xf2c6 <perror>
        printf("Read_Config: open(%s) failed\n", name);
   130d0:	ed b7       	in	r30, 0x3d	; 61
   130d2:	fe b7       	in	r31, 0x3e	; 62
   130d4:	15 83       	std	Z+5, r17	; 0x05
   130d6:	04 83       	std	Z+4, r16	; 0x04
   130d8:	8f e2       	ldi	r24, 0x2F	; 47
   130da:	9d e1       	ldi	r25, 0x1D	; 29
   130dc:	a0 e0       	ldi	r26, 0x00	; 0
   130de:	81 83       	std	Z+1, r24	; 0x01
   130e0:	92 83       	std	Z+2, r25	; 0x02
   130e2:	a3 83       	std	Z+3, r26	; 0x03
   130e4:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        set_Config_Defaults();
        return(errors);
   130e8:	81 e0       	ldi	r24, 0x01	; 1
   130ea:	90 e0       	ldi	r25, 0x00	; 0
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   130ec:	a9 c5       	rjmp	.+2898   	; 0x13c40 <Read_Config+0xc84>
   130ee:	2f 5f       	subi	r18, 0xFF	; 255
   130f0:	3f 4f       	sbci	r19, 0xFF	; 255
   130f2:	30 93 00 19 	sts	0x1900, r19	; 0x801900 <lines+0x1>
   130f6:	20 93 ff 18 	sts	0x18FF, r18	; 0x8018ff <lines>

        ptr = str;

        trim_tail(ptr);
   130fa:	c4 01       	movw	r24, r8
   130fc:	0e 94 3f 33 	call	0x667e	; 0x667e <trim_tail>
        ptr = skipspaces(ptr);
   13100:	c4 01       	movw	r24, r8
   13102:	0e 94 4f 33 	call	0x669e	; 0x669e <skipspaces>
        len = strlen(ptr);
   13106:	fc 01       	movw	r30, r24
   13108:	01 90       	ld	r0, Z+
   1310a:	00 20       	and	r0, r0
   1310c:	e9 f7       	brne	.-6      	; 0x13108 <Read_Config+0x14c>

        if(!len)
   1310e:	31 97       	sbiw	r30, 0x01	; 1
   13110:	8e 17       	cp	r24, r30
   13112:	9f 07       	cpc	r25, r31
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   13114:	91 f4       	brne	.+36     	; 0x1313a <Read_Config+0x17e>
   13116:	c0 57       	subi	r28, 0x70	; 112
   13118:	de 4f       	sbci	r29, 0xFE	; 254
   1311a:	48 81       	ld	r20, Y
   1311c:	59 81       	ldd	r21, Y+1	; 0x01
   1311e:	c0 59       	subi	r28, 0x90	; 144
   13120:	d1 40       	sbci	r29, 0x01	; 1
   13122:	6e e7       	ldi	r22, 0x7E	; 126
   13124:	70 e0       	ldi	r23, 0x00	; 0
   13126:	c4 01       	movw	r24, r8
   13128:	0e 94 4a 77 	call	0xee94	; 0xee94 <fgets>
   1312c:	20 91 ff 18 	lds	r18, 0x18FF	; 0x8018ff <lines>
   13130:	30 91 00 19 	lds	r19, 0x1900	; 0x801900 <lines+0x1>
   13134:	89 2b       	or	r24, r25
   13136:	d9 f6       	brne	.-74     	; 0x130ee <Read_Config+0x132>

        if(!len)
            continue;

        // Skip comments
        if(*ptr == '#')
   13138:	3a c5       	rjmp	.+2676   	; 0x13bae <Read_Config+0xbf2>
   1313a:	dc 01       	movw	r26, r24
   1313c:	2c 91       	ld	r18, X
   1313e:	23 32       	cpi	r18, 0x23	; 35
            continue;

		*token = 0;
   13140:	51 f3       	breq	.-44     	; 0x13116 <Read_Config+0x15a>
   13142:	8e 01       	movw	r16, r28
   13144:	06 57       	subi	r16, 0x76	; 118
   13146:	1f 4f       	sbci	r17, 0xFF	; 255
   13148:	f8 01       	movw	r30, r16
		*arg = 0;
   1314a:	10 82       	st	Z, r1
		val.l = 0;

		// To save on code we process a token and optional argument here
		ptr = get_token(ptr,token, sizeof(token)-2);
   1314c:	1a 86       	std	Y+10, r1	; 0x0a
   1314e:	4e e7       	ldi	r20, 0x7E	; 126
   13150:	50 e0       	ldi	r21, 0x00	; 0
   13152:	b8 01       	movw	r22, r16
   13154:	0e 94 21 34 	call	0x6842	; 0x6842 <get_token>

		// Argument
		ptr = get_token(ptr,arg, sizeof(arg)-2);
   13158:	4e e7       	ldi	r20, 0x7E	; 126
   1315a:	50 e0       	ldi	r21, 0x00	; 0
   1315c:	be 01       	movw	r22, r28
   1315e:	66 5f       	subi	r22, 0xF6	; 246
   13160:	7f 4f       	sbci	r23, 0xFF	; 255
   13162:	0e 94 21 34 	call	0x6842	; 0x6842 <get_token>
		if( MATCHI(arg,"=") )
   13166:	3c 01       	movw	r6, r24
   13168:	6b e8       	ldi	r22, 0x8B	; 139
   1316a:	7d e0       	ldi	r23, 0x0D	; 13
   1316c:	ce 01       	movw	r24, r28
   1316e:	0a 96       	adiw	r24, 0x0a	; 10
   13170:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
   13174:	89 2b       	or	r24, r25
			ptr = get_token(ptr,arg,sizeof(arg)-2);
   13176:	41 f0       	breq	.+16     	; 0x13188 <Read_Config+0x1cc>
   13178:	4e e7       	ldi	r20, 0x7E	; 126
   1317a:	50 e0       	ldi	r21, 0x00	; 0
   1317c:	be 01       	movw	r22, r28
   1317e:	66 5f       	subi	r22, 0xF6	; 246
   13180:	7f 4f       	sbci	r23, 0xFF	; 255
   13182:	c3 01       	movw	r24, r6
   13184:	0e 94 21 34 	call	0x6842	; 0x6842 <get_token>
		val.l = get_value(arg);
   13188:	ce 01       	movw	r24, r28
   1318a:	0a 96       	adiw	r24, 0x0a	; 10
   1318c:	0e 94 64 34 	call	0x68c8	; 0x68c8 <get_value>
   13190:	2b 01       	movw	r4, r22
   13192:	3c 01       	movw	r6, r24
   13194:	36 2e       	mov	r3, r22

        //FIXME check for state and last state
        if( MATCHI(token,"END") )
   13196:	25 2c       	mov	r2, r5
   13198:	6d e8       	ldi	r22, 0x8D	; 141
   1319a:	7d e0       	ldi	r23, 0x0D	; 13
   1319c:	c8 01       	movw	r24, r16
   1319e:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
        {
            state = pop_state();
   131a2:	89 2b       	or	r24, r25
   131a4:	11 f0       	breq	.+4      	; 0x131aa <Read_Config+0x1ee>
   131a6:	ad dd       	rcall	.-1190   	; 0x12d02 <pop_state>
            continue;
        }

        switch(state)
   131a8:	2c c0       	rjmp	.+88     	; 0x13202 <Read_Config+0x246>
   131aa:	c6 57       	subi	r28, 0x76	; 118
   131ac:	de 4f       	sbci	r29, 0xFE	; 254
   131ae:	28 81       	ld	r18, Y
   131b0:	39 81       	ldd	r19, Y+1	; 0x01
   131b2:	ca 58       	subi	r28, 0x8A	; 138
   131b4:	d1 40       	sbci	r29, 0x01	; 1
   131b6:	20 31       	cpi	r18, 0x10	; 16
   131b8:	31 05       	cpc	r19, r1
   131ba:	08 f0       	brcs	.+2      	; 0x131be <Read_Config+0x202>
   131bc:	d8 c4       	rjmp	.+2480   	; 0x13b6e <Read_Config+0xbb2>
   131be:	f9 01       	movw	r30, r18
   131c0:	e0 53       	subi	r30, 0x30	; 48
   131c2:	ff 4f       	sbci	r31, 0xFF	; 255
   131c4:	0c 94 42 e4 	jmp	0x1c884	; 0x1c884 <__tablejump2__>
        {
        case START_STATE:

            if( MATCHI (token,"SS80_DEFAULT") )
   131c8:	61 e9       	ldi	r22, 0x91	; 145
   131ca:	7d e0       	ldi	r23, 0x0D	; 13
   131cc:	c8 01       	movw	r24, r16
   131ce:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                push_state(state);
   131d2:	89 2b       	or	r24, r25
   131d4:	e9 f0       	breq	.+58     	; 0x13210 <Read_Config+0x254>
				state = SS80_STATE;
				index = alloc_device(SS80_DEFAULT_TYPE);
   131d6:	80 e0       	ldi	r24, 0x00	; 0
   131d8:	90 e0       	ldi	r25, 0x00	; 0
   131da:	7a dd       	rcall	.-1292   	; 0x12cd0 <push_state>
   131dc:	82 e0       	ldi	r24, 0x02	; 2
   131de:	90 e0       	ldi	r25, 0x00	; 0
				if(index == -1)
   131e0:	94 dc       	rcall	.-1752   	; 0x12b0a <alloc_device>
   131e2:	6c 01       	movw	r12, r24
   131e4:	01 96       	adiw	r24, 0x01	; 1
					state = START_STATE;
				else
					SS80p = (SS80DiskType *) Devices[index].dev;
   131e6:	09 f4       	brne	.+2      	; 0x131ea <Read_Config+0x22e>
   131e8:	96 cf       	rjmp	.-212    	; 0x13116 <Read_Config+0x15a>
   131ea:	8b e2       	ldi	r24, 0x2B	; 43
   131ec:	8c 9d       	mul	r24, r12
   131ee:	f0 01       	movw	r30, r0
   131f0:	8d 9d       	mul	r24, r13
   131f2:	f0 0d       	add	r31, r0
   131f4:	11 24       	eor	r1, r1
   131f6:	e4 57       	subi	r30, 0x74	; 116
   131f8:	f1 4e       	sbci	r31, 0xE1	; 225
        case START_STATE:

            if( MATCHI (token,"SS80_DEFAULT") )
            {
                push_state(state);
				state = SS80_STATE;
   131fa:	a7 a0       	ldd	r10, Z+39	; 0x27
   131fc:	b0 a4       	ldd	r11, Z+40	; 0x28
   131fe:	81 e0       	ldi	r24, 0x01	; 1
   13200:	90 e0       	ldi	r25, 0x00	; 0
   13202:	c6 57       	subi	r28, 0x76	; 118
   13204:	de 4f       	sbci	r29, 0xFE	; 254
   13206:	99 83       	std	Y+1, r25	; 0x01
   13208:	88 83       	st	Y, r24
   1320a:	ca 58       	subi	r28, 0x8A	; 138
					state = START_STATE;
				else
					SS80p = (SS80DiskType *) Devices[index].dev;
            }

            else if( MATCHI (token,"SS80") || MATCHI (token, "CS80") )
   1320c:	d1 40       	sbci	r29, 0x01	; 1
   1320e:	83 cf       	rjmp	.-250    	; 0x13116 <Read_Config+0x15a>
   13210:	6e e9       	ldi	r22, 0x9E	; 158
   13212:	7d e0       	ldi	r23, 0x0D	; 13
   13214:	c8 01       	movw	r24, r16
   13216:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                push_state(state);
   1321a:	89 2b       	or	r24, r25
   1321c:	f1 f0       	breq	.+60     	; 0x1325a <Read_Config+0x29e>
				state = SS80_STATE;
				index = alloc_device(SS80_TYPE);
   1321e:	80 e0       	ldi	r24, 0x00	; 0
   13220:	90 e0       	ldi	r25, 0x00	; 0
   13222:	56 dd       	rcall	.-1364   	; 0x12cd0 <push_state>
   13224:	83 e0       	ldi	r24, 0x03	; 3
   13226:	90 e0       	ldi	r25, 0x00	; 0
				if(index == -1)
   13228:	70 dc       	rcall	.-1824   	; 0x12b0a <alloc_device>
   1322a:	6c 01       	movw	r12, r24
   1322c:	9f ef       	ldi	r25, 0xFF	; 255
   1322e:	c9 16       	cp	r12, r25
   13230:	d9 06       	cpc	r13, r25
				{
					state = START_STATE;
				}
				else
				{
					SS80p = (SS80DiskType *) Devices[index].dev;
   13232:	09 f4       	brne	.+2      	; 0x13236 <Read_Config+0x27a>
   13234:	70 cf       	rjmp	.-288    	; 0x13116 <Read_Config+0x15a>
   13236:	8b e2       	ldi	r24, 0x2B	; 43
   13238:	8c 9d       	mul	r24, r12
   1323a:	f0 01       	movw	r30, r0
   1323c:	8d 9d       	mul	r24, r13
   1323e:	f0 0d       	add	r31, r0
   13240:	11 24       	eor	r1, r1
   13242:	e4 57       	subi	r30, 0x74	; 116
					hpdir_set_parameters(index,arg);	// Also sets Devices[index].model
   13244:	f1 4e       	sbci	r31, 0xE1	; 225
   13246:	a7 a0       	ldd	r10, Z+39	; 0x27
   13248:	b0 a4       	ldd	r11, Z+40	; 0x28
   1324a:	be 01       	movw	r22, r28
   1324c:	66 5f       	subi	r22, 0xF6	; 246
   1324e:	7f 4f       	sbci	r23, 0xFF	; 255
            }

            else if( MATCHI (token,"SS80") || MATCHI (token, "CS80") )
            {
                push_state(state);
				state = SS80_STATE;
   13250:	c6 01       	movw	r24, r12
   13252:	0d de       	rcall	.-998    	; 0x12e6e <hpdir_set_parameters>
   13254:	a1 e0       	ldi	r26, 0x01	; 1
					state = START_STATE;
				else
					SS80p = (SS80DiskType *) Devices[index].dev;
            }

            else if( MATCHI (token,"SS80") || MATCHI (token, "CS80") )
   13256:	b0 e0       	ldi	r27, 0x00	; 0
   13258:	05 c1       	rjmp	.+522    	; 0x13464 <Read_Config+0x4a8>
   1325a:	63 ea       	ldi	r22, 0xA3	; 163
   1325c:	7d e0       	ldi	r23, 0x0D	; 13
   1325e:	c8 01       	movw	r24, r16
   13260:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
					hpdir_set_parameters(index,arg);	// Also sets Devices[index].model
				}
			}

#ifdef AMIGO
            else if( MATCHI (token,"AMIGO") )
   13264:	89 2b       	or	r24, r25
   13266:	d9 f6       	brne	.-74     	; 0x1321e <Read_Config+0x262>
   13268:	68 ea       	ldi	r22, 0xA8	; 168
   1326a:	7d e0       	ldi	r23, 0x0D	; 13
   1326c:	c8 01       	movw	r24, r16
            {
                push_state(state);
   1326e:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
   13272:	89 2b       	or	r24, r25
   13274:	11 f1       	breq	.+68     	; 0x132ba <Read_Config+0x2fe>
                state = AMIGO_STATE;
                index = alloc_device(AMIGO_TYPE);
   13276:	80 e0       	ldi	r24, 0x00	; 0
   13278:	90 e0       	ldi	r25, 0x00	; 0
   1327a:	2a dd       	rcall	.-1452   	; 0x12cd0 <push_state>
   1327c:	81 e0       	ldi	r24, 0x01	; 1
   1327e:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   13280:	44 dc       	rcall	.-1912   	; 0x12b0a <alloc_device>
   13282:	6c 01       	movw	r12, r24
   13284:	01 96       	adiw	r24, 0x01	; 1
				{
                    state = START_STATE;
				}
                else
				{
                    AMIGOp = (AMIGODiskType *) Devices[index].dev;
   13286:	09 f4       	brne	.+2      	; 0x1328a <Read_Config+0x2ce>
   13288:	46 cf       	rjmp	.-372    	; 0x13116 <Read_Config+0x15a>
   1328a:	8b e2       	ldi	r24, 0x2B	; 43
   1328c:	8c 9d       	mul	r24, r12
   1328e:	f0 01       	movw	r30, r0
   13290:	8d 9d       	mul	r24, r13
   13292:	f0 0d       	add	r31, r0
   13294:	11 24       	eor	r1, r1
   13296:	e4 57       	subi	r30, 0x74	; 116
   13298:	f1 4e       	sbci	r31, 0xE1	; 225
   1329a:	27 a1       	ldd	r18, Z+39	; 0x27
   1329c:	30 a5       	ldd	r19, Z+40	; 0x28
   1329e:	c4 57       	subi	r28, 0x74	; 116
   132a0:	de 4f       	sbci	r29, 0xFE	; 254
   132a2:	39 83       	std	Y+1, r19	; 0x01
					hpdir_set_parameters(index,arg);	// Also sets Devices[index.model
   132a4:	28 83       	st	Y, r18
   132a6:	cc 58       	subi	r28, 0x8C	; 140
   132a8:	d1 40       	sbci	r29, 0x01	; 1
   132aa:	be 01       	movw	r22, r28
   132ac:	66 5f       	subi	r22, 0xF6	; 246
   132ae:	7f 4f       	sbci	r23, 0xFF	; 255

#ifdef AMIGO
            else if( MATCHI (token,"AMIGO") )
            {
                push_state(state);
                state = AMIGO_STATE;
   132b0:	c6 01       	movw	r24, r12
   132b2:	dd dd       	rcall	.-1094   	; 0x12e6e <hpdir_set_parameters>
                    AMIGOp = (AMIGODiskType *) Devices[index].dev;
					hpdir_set_parameters(index,arg);	// Also sets Devices[index.model
				}
			}
#endif
            else if( MATCHI (token,"PRINTER") )
   132b4:	8a e0       	ldi	r24, 0x0A	; 10
   132b6:	90 e0       	ldi	r25, 0x00	; 0
   132b8:	a4 cf       	rjmp	.-184    	; 0x13202 <Read_Config+0x246>
   132ba:	6e ea       	ldi	r22, 0xAE	; 174
   132bc:	7d e0       	ldi	r23, 0x0D	; 13
   132be:	c8 01       	movw	r24, r16
            {
                push_state(state);
   132c0:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
   132c4:	89 2b       	or	r24, r25
   132c6:	f9 f0       	breq	.+62     	; 0x13306 <Read_Config+0x34a>
                state = PRINTER_STATE;
                index = alloc_device(PRINTER_TYPE);
   132c8:	80 e0       	ldi	r24, 0x00	; 0
   132ca:	90 e0       	ldi	r25, 0x00	; 0
   132cc:	01 dd       	rcall	.-1534   	; 0x12cd0 <push_state>
   132ce:	84 e0       	ldi	r24, 0x04	; 4
   132d0:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   132d2:	1b dc       	rcall	.-1994   	; 0x12b0a <alloc_device>
   132d4:	6c 01       	movw	r12, r24
   132d6:	9f ef       	ldi	r25, 0xFF	; 255
   132d8:	c9 16       	cp	r12, r25
   132da:	d9 06       	cpc	r13, r25
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   132dc:	09 f4       	brne	.+2      	; 0x132e0 <Read_Config+0x324>
   132de:	1b cf       	rjmp	.-458    	; 0x13116 <Read_Config+0x15a>
   132e0:	8b e2       	ldi	r24, 0x2B	; 43
   132e2:	8c 9d       	mul	r24, r12
   132e4:	f0 01       	movw	r30, r0
   132e6:	8d 9d       	mul	r24, r13
   132e8:	f0 0d       	add	r31, r0
   132ea:	11 24       	eor	r1, r1
   132ec:	e4 57       	subi	r30, 0x74	; 116
   132ee:	f1 4e       	sbci	r31, 0xE1	; 225
   132f0:	a7 a1       	ldd	r26, Z+39	; 0x27
   132f2:	b0 a5       	ldd	r27, Z+40	; 0x28
   132f4:	c2 57       	subi	r28, 0x72	; 114
   132f6:	de 4f       	sbci	r29, 0xFE	; 254
   132f8:	b9 83       	std	Y+1, r27	; 0x01
   132fa:	a8 83       	st	Y, r26
			}
#endif
            else if( MATCHI (token,"PRINTER") )
            {
                push_state(state);
                state = PRINTER_STATE;
   132fc:	ce 58       	subi	r28, 0x8E	; 142
   132fe:	d1 40       	sbci	r29, 0x01	; 1
   13300:	ee e0       	ldi	r30, 0x0E	; 14
                if(index == -1)
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
            }
            else if( MATCHI (token,"DEBUG") )
   13302:	f0 e0       	ldi	r31, 0x00	; 0
   13304:	c2 c0       	rjmp	.+388    	; 0x1348a <Read_Config+0x4ce>
   13306:	66 eb       	ldi	r22, 0xB6	; 182
   13308:	7d e0       	ldi	r23, 0x0D	; 13
   1330a:	c8 01       	movw	r24, r16
   1330c:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
				debuglevel = val.w;
   13310:	89 2b       	or	r24, r25
   13312:	29 f0       	breq	.+10     	; 0x1331e <Read_Config+0x362>
   13314:	50 92 c4 01 	sts	0x01C4, r5	; 0x8001c4 <debuglevel+0x1>
   13318:	40 92 c3 01 	sts	0x01C3, r4	; 0x8001c3 <debuglevel>
            }
            else if( MATCHI (token,"PRINTER_DEFAULT_ADDRESS") )
   1331c:	fc ce       	rjmp	.-520    	; 0x13116 <Read_Config+0x15a>
   1331e:	6c eb       	ldi	r22, 0xBC	; 188
   13320:	7d e0       	ldi	r23, 0x0D	; 13
   13322:	c8 01       	movw	r24, r16
   13324:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
   13328:	20 91 ff 18 	lds	r18, 0x18FF	; 0x8018ff <lines>
            {
                //FIXME REMOVE from config
                printf("Skipping %s, at line:%d\n", str,lines);
   1332c:	30 91 00 19 	lds	r19, 0x1900	; 0x801900 <lines+0x1>
   13330:	ed b7       	in	r30, 0x3d	; 61
   13332:	fe b7       	in	r31, 0x3e	; 62
   13334:	37 83       	std	Z+7, r19	; 0x07
   13336:	26 83       	std	Z+6, r18	; 0x06
            }
            else if( MATCHI (token,"DEBUG") )
            {
				debuglevel = val.w;
            }
            else if( MATCHI (token,"PRINTER_DEFAULT_ADDRESS") )
   13338:	95 82       	std	Z+5, r9	; 0x05
   1333a:	84 82       	std	Z+4, r8	; 0x04
            {
                //FIXME REMOVE from config
                printf("Skipping %s, at line:%d\n", str,lines);
   1333c:	89 2b       	or	r24, r25
   1333e:	19 f0       	breq	.+6      	; 0x13346 <Read_Config+0x38a>
            }
            else
            {
                printf("Unexpected START token: %s, at line:%d\n", str,lines);
   13340:	86 e1       	ldi	r24, 0x16	; 22
   13342:	9d e1       	ldi	r25, 0x1D	; 29
                ++errors;
            }
            break;

        case PRINTER_STATE:
            if( MATCHI (token,"CONFIG") )
   13344:	e6 c2       	rjmp	.+1484   	; 0x13912 <Read_Config+0x956>
   13346:	8e ee       	ldi	r24, 0xEE	; 238
   13348:	9c e1       	ldi	r25, 0x1C	; 28
   1334a:	19 c0       	rjmp	.+50     	; 0x1337e <Read_Config+0x3c2>
   1334c:	64 ed       	ldi	r22, 0xD4	; 212
   1334e:	7d e0       	ldi	r23, 0x0D	; 13
   13350:	c8 01       	movw	r24, r16
            {
                push_state(state);
   13352:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
   13356:	89 2b       	or	r24, r25
   13358:	31 f0       	breq	.+12     	; 0x13366 <Read_Config+0x3aa>
                state = PRINTER_CONFIG;
   1335a:	8e e0       	ldi	r24, 0x0E	; 14
   1335c:	90 e0       	ldi	r25, 0x00	; 0
   1335e:	b8 dc       	rcall	.-1680   	; 0x12cd0 <push_state>
            }
            else
            {
                printf("Unexpected PRINTER token: %s, at line:%d\n", str,lines);
   13360:	2f e0       	ldi	r18, 0x0F	; 15
   13362:	30 e0       	ldi	r19, 0x00	; 0
   13364:	5f c0       	rjmp	.+190    	; 0x13424 <Read_Config+0x468>
   13366:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   1336a:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   1336e:	ed b7       	in	r30, 0x3d	; 61
   13370:	fe b7       	in	r31, 0x3e	; 62
   13372:	97 83       	std	Z+7, r25	; 0x07
   13374:	86 83       	std	Z+6, r24	; 0x06
   13376:	95 82       	std	Z+5, r9	; 0x05
   13378:	84 82       	std	Z+4, r8	; 0x04
   1337a:	84 ec       	ldi	r24, 0xC4	; 196
                ++errors;
            }
            break;

        case PRINTER_CONFIG:
            if( MATCHI (token,"ADDRESS") )
   1337c:	9c e1       	ldi	r25, 0x1C	; 28
   1337e:	a0 e0       	ldi	r26, 0x00	; 0
   13380:	0d c4       	rjmp	.+2074   	; 0x13b9c <Read_Config+0xbe0>
   13382:	6c ec       	ldi	r22, 0xCC	; 204
   13384:	7d e0       	ldi	r23, 0x0D	; 13
   13386:	c8 01       	movw	r24, r16
   13388:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
				if(val.b > 31)
   1338c:	89 2b       	or	r24, r25
   1338e:	89 f1       	breq	.+98     	; 0x133f2 <Read_Config+0x436>
				{
					printf("Fatal PRINTER ADDRESS out of range: %ld disabled:%d\n", val.l, lines);
   13390:	2f e1       	ldi	r18, 0x1F	; 31
   13392:	24 15       	cp	r18, r4
   13394:	c8 f4       	brcc	.+50     	; 0x133c8 <Read_Config+0x40c>
   13396:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   1339a:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   1339e:	ed b7       	in	r30, 0x3d	; 61
   133a0:	fe b7       	in	r31, 0x3e	; 62
   133a2:	91 87       	std	Z+9, r25	; 0x09
   133a4:	80 87       	std	Z+8, r24	; 0x08
   133a6:	44 82       	std	Z+4, r4	; 0x04
   133a8:	55 82       	std	Z+5, r5	; 0x05
   133aa:	66 82       	std	Z+6, r6	; 0x06
   133ac:	77 82       	std	Z+7, r7	; 0x07
   133ae:	8f e8       	ldi	r24, 0x8F	; 143
   133b0:	9c e1       	ldi	r25, 0x1C	; 28
   133b2:	a0 e0       	ldi	r26, 0x00	; 0
   133b4:	81 83       	std	Z+1, r24	; 0x01
   133b6:	92 83       	std	Z+2, r25	; 0x02
					val.b = 0xff;
   133b8:	a3 83       	std	Z+3, r26	; 0x03
   133ba:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
                    ++errors;
   133be:	33 24       	eor	r3, r3
   133c0:	3a 94       	dec	r3
				}
                Devices[index].ADDRESS = val.b;
   133c2:	ff ef       	ldi	r31, 0xFF	; 255
   133c4:	ef 1a       	sub	r14, r31
   133c6:	ff 0a       	sbc	r15, r31
   133c8:	8b e2       	ldi	r24, 0x2B	; 43
   133ca:	8c 9d       	mul	r24, r12
   133cc:	f0 01       	movw	r30, r0
   133ce:	8d 9d       	mul	r24, r13
   133d0:	f0 0d       	add	r31, r0
   133d2:	11 24       	eor	r1, r1
                PRINTERp->HEADER.ADDRESS  = val.b;
   133d4:	e4 57       	subi	r30, 0x74	; 116
   133d6:	f1 4e       	sbci	r31, 0xE1	; 225
   133d8:	31 82       	std	Z+1, r3	; 0x01
   133da:	c2 57       	subi	r28, 0x72	; 114
   133dc:	de 4f       	sbci	r29, 0xFE	; 254
   133de:	a8 81       	ld	r26, Y
   133e0:	b9 81       	ldd	r27, Y+1	; 0x01
                // NO PPR
                Devices[index].PPR = 0xff;
   133e2:	ce 58       	subi	r28, 0x8E	; 142
   133e4:	d1 40       	sbci	r29, 0x01	; 1
                PRINTERp->HEADER.PPR = 0xff;
   133e6:	3c 92       	st	X, r3
   133e8:	8f ef       	ldi	r24, 0xFF	; 255
   133ea:	82 83       	std	Z+2, r24	; 0x02
            }
            else
            {
                printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", str,lines);
   133ec:	fd 01       	movw	r30, r26
   133ee:	81 83       	std	Z+1, r24	; 0x01
   133f0:	92 ce       	rjmp	.-732    	; 0x13116 <Read_Config+0x15a>
   133f2:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   133f6:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   133fa:	ed b7       	in	r30, 0x3d	; 61
   133fc:	fe b7       	in	r31, 0x3e	; 62
   133fe:	97 83       	std	Z+7, r25	; 0x07
   13400:	86 83       	std	Z+6, r24	; 0x06
   13402:	95 82       	std	Z+5, r9	; 0x05
                ++errors;
            }
            break;

        case SS80_STATE:
            if( MATCHI (token,"HEADER") )
   13404:	84 82       	std	Z+4, r8	; 0x04
   13406:	8e e5       	ldi	r24, 0x5E	; 94
   13408:	9c e1       	ldi	r25, 0x1C	; 28
   1340a:	b9 cf       	rjmp	.-142    	; 0x1337e <Read_Config+0x3c2>
   1340c:	6b ed       	ldi	r22, 0xDB	; 219
   1340e:	7d e0       	ldi	r23, 0x0D	; 13
   13410:	c8 01       	movw	r24, r16
            {
                push_state(state);
   13412:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
   13416:	89 2b       	or	r24, r25
   13418:	61 f0       	breq	.+24     	; 0x13432 <Read_Config+0x476>
                state = SS80_HEADER;
   1341a:	81 e0       	ldi	r24, 0x01	; 1
   1341c:	90 e0       	ldi	r25, 0x00	; 0
   1341e:	58 dc       	rcall	.-1872   	; 0x12cd0 <push_state>
   13420:	22 e0       	ldi	r18, 0x02	; 2
   13422:	30 e0       	ldi	r19, 0x00	; 0
   13424:	c6 57       	subi	r28, 0x76	; 118
   13426:	de 4f       	sbci	r29, 0xFE	; 254
   13428:	39 83       	std	Y+1, r19	; 0x01
            }
            else if( MATCHI (token,"CONFIG") )
   1342a:	28 83       	st	Y, r18
   1342c:	ca 58       	subi	r28, 0x8A	; 138
   1342e:	d1 40       	sbci	r29, 0x01	; 1
   13430:	72 ce       	rjmp	.-796    	; 0x13116 <Read_Config+0x15a>
   13432:	64 ed       	ldi	r22, 0xD4	; 212
   13434:	7d e0       	ldi	r23, 0x0D	; 13
   13436:	c8 01       	movw	r24, r16
            {
                push_state(state);
   13438:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
   1343c:	89 2b       	or	r24, r25
                state = SS80_CONFIG;
   1343e:	31 f0       	breq	.+12     	; 0x1344c <Read_Config+0x490>
   13440:	81 e0       	ldi	r24, 0x01	; 1
   13442:	90 e0       	ldi	r25, 0x00	; 0
            }
            else if( MATCHI (token,"CONTROLLER") )
   13444:	45 dc       	rcall	.-1910   	; 0x12cd0 <push_state>
   13446:	83 e0       	ldi	r24, 0x03	; 3
   13448:	90 e0       	ldi	r25, 0x00	; 0
   1344a:	db ce       	rjmp	.-586    	; 0x13202 <Read_Config+0x246>
   1344c:	62 ee       	ldi	r22, 0xE2	; 226
   1344e:	7d e0       	ldi	r23, 0x0D	; 13
   13450:	c8 01       	movw	r24, r16
            {
                push_state(state);
   13452:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
   13456:	89 2b       	or	r24, r25
   13458:	61 f0       	breq	.+24     	; 0x13472 <Read_Config+0x4b6>
                state = SS80_CONTROLLER;
   1345a:	81 e0       	ldi	r24, 0x01	; 1
   1345c:	90 e0       	ldi	r25, 0x00	; 0
   1345e:	38 dc       	rcall	.-1936   	; 0x12cd0 <push_state>
   13460:	a4 e0       	ldi	r26, 0x04	; 4
   13462:	b0 e0       	ldi	r27, 0x00	; 0
   13464:	c6 57       	subi	r28, 0x76	; 118
   13466:	de 4f       	sbci	r29, 0xFE	; 254
   13468:	b9 83       	std	Y+1, r27	; 0x01
            }
            else if( MATCHI (token,"UNIT") )
   1346a:	a8 83       	st	Y, r26
   1346c:	ca 58       	subi	r28, 0x8A	; 138
   1346e:	d1 40       	sbci	r29, 0x01	; 1
   13470:	52 ce       	rjmp	.-860    	; 0x13116 <Read_Config+0x15a>
   13472:	6d ee       	ldi	r22, 0xED	; 237
   13474:	7d e0       	ldi	r23, 0x0D	; 13
   13476:	c8 01       	movw	r24, r16
            {
                push_state(state);
   13478:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
   1347c:	89 2b       	or	r24, r25
   1347e:	61 f0       	breq	.+24     	; 0x13498 <Read_Config+0x4dc>
                state = SS80_UNIT;
   13480:	81 e0       	ldi	r24, 0x01	; 1
   13482:	90 e0       	ldi	r25, 0x00	; 0
   13484:	25 dc       	rcall	.-1974   	; 0x12cd0 <push_state>
   13486:	e5 e0       	ldi	r30, 0x05	; 5
   13488:	f0 e0       	ldi	r31, 0x00	; 0
   1348a:	c6 57       	subi	r28, 0x76	; 118
   1348c:	de 4f       	sbci	r29, 0xFE	; 254
   1348e:	f9 83       	std	Y+1, r31	; 0x01
            }
            else if( MATCHI (token,"VOLUME") )
   13490:	e8 83       	st	Y, r30
   13492:	ca 58       	subi	r28, 0x8A	; 138
   13494:	d1 40       	sbci	r29, 0x01	; 1
   13496:	3f ce       	rjmp	.-898    	; 0x13116 <Read_Config+0x15a>
   13498:	62 ef       	ldi	r22, 0xF2	; 242
   1349a:	7d e0       	ldi	r23, 0x0D	; 13
   1349c:	c8 01       	movw	r24, r16
            {
                push_state(state);
   1349e:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
   134a2:	89 2b       	or	r24, r25
   134a4:	31 f0       	breq	.+12     	; 0x134b2 <Read_Config+0x4f6>
                state = SS80_VOLUME;
   134a6:	81 e0       	ldi	r24, 0x01	; 1
   134a8:	90 e0       	ldi	r25, 0x00	; 0
   134aa:	12 dc       	rcall	.-2012   	; 0x12cd0 <push_state>
            }
            else
            {
                printf("Unexpected SS80 START token: %s, at line:%d\n", str,lines);
   134ac:	26 e0       	ldi	r18, 0x06	; 6
   134ae:	30 e0       	ldi	r19, 0x00	; 0
   134b0:	b9 cf       	rjmp	.-142    	; 0x13424 <Read_Config+0x468>
   134b2:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   134b6:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   134ba:	ed b7       	in	r30, 0x3d	; 61
   134bc:	fe b7       	in	r31, 0x3e	; 62
   134be:	97 83       	std	Z+7, r25	; 0x07
   134c0:	86 83       	std	Z+6, r24	; 0x06
   134c2:	95 82       	std	Z+5, r9	; 0x05
   134c4:	84 82       	std	Z+4, r8	; 0x04
            }
            break;


        case SS80_HEADER:
            if( MATCHI (token,"ADDRESS") )
   134c6:	81 e3       	ldi	r24, 0x31	; 49
   134c8:	9c e1       	ldi	r25, 0x1C	; 28
   134ca:	59 cf       	rjmp	.-334    	; 0x1337e <Read_Config+0x3c2>
   134cc:	6c ec       	ldi	r22, 0xCC	; 204
   134ce:	7d e0       	ldi	r23, 0x0D	; 13
   134d0:	c8 01       	movw	r24, r16
   134d2:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                if(val.b > 31)
   134d6:	89 2b       	or	r24, r25
   134d8:	19 f1       	breq	.+70     	; 0x13520 <Read_Config+0x564>
				{
					printf("Fatal SS80 ADDRESS > 31 at line d\n", lines);
   134da:	2f e1       	ldi	r18, 0x1F	; 31
   134dc:	24 15       	cp	r18, r4
   134de:	a8 f4       	brcc	.+42     	; 0x1350a <Read_Config+0x54e>
   134e0:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   134e4:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   134e8:	ed b7       	in	r30, 0x3d	; 61
   134ea:	fe b7       	in	r31, 0x3e	; 62
   134ec:	95 83       	std	Z+5, r25	; 0x05
   134ee:	84 83       	std	Z+4, r24	; 0x04
   134f0:	8e e0       	ldi	r24, 0x0E	; 14
   134f2:	9c e1       	ldi	r25, 0x1C	; 28
   134f4:	a0 e0       	ldi	r26, 0x00	; 0
   134f6:	81 83       	std	Z+1, r24	; 0x01
   134f8:	92 83       	std	Z+2, r25	; 0x02
					val.b = 0xff;
   134fa:	a3 83       	std	Z+3, r26	; 0x03
   134fc:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
					++errors;
   13500:	33 24       	eor	r3, r3
   13502:	3a 94       	dec	r3
				}
                Devices[index].ADDRESS = val.b;
   13504:	ff ef       	ldi	r31, 0xFF	; 255
   13506:	ef 1a       	sub	r14, r31
   13508:	ff 0a       	sbc	r15, r31
   1350a:	8b e2       	ldi	r24, 0x2B	; 43
   1350c:	8c 9d       	mul	r24, r12
   1350e:	f0 01       	movw	r30, r0
   13510:	8d 9d       	mul	r24, r13
   13512:	f0 0d       	add	r31, r0
   13514:	11 24       	eor	r1, r1
                SS80p->HEADER.ADDRESS  = val.b;
   13516:	e4 57       	subi	r30, 0x74	; 116
   13518:	f1 4e       	sbci	r31, 0xE1	; 225
            }
            else if( MATCHI (token,"PPR") )
   1351a:	31 82       	std	Z+1, r3	; 0x01
   1351c:	d5 01       	movw	r26, r10
   1351e:	30 c2       	rjmp	.+1120   	; 0x13980 <Read_Config+0x9c4>
   13520:	69 ef       	ldi	r22, 0xF9	; 249
   13522:	7d e0       	ldi	r23, 0x0D	; 13
   13524:	c8 01       	movw	r24, r16
   13526:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                if(val.b > 7)
   1352a:	89 2b       	or	r24, r25
   1352c:	19 f1       	breq	.+70     	; 0x13574 <Read_Config+0x5b8>
				{
					printf("Warning SS80 PPR > 7 at line:%d\n", lines);
   1352e:	b7 e0       	ldi	r27, 0x07	; 7
   13530:	b4 15       	cp	r27, r4
   13532:	a8 f4       	brcc	.+42     	; 0x1355e <Read_Config+0x5a2>
   13534:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   13538:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   1353c:	ed b7       	in	r30, 0x3d	; 61
   1353e:	fe b7       	in	r31, 0x3e	; 62
   13540:	95 83       	std	Z+5, r25	; 0x05
   13542:	84 83       	std	Z+4, r24	; 0x04
   13544:	8d ee       	ldi	r24, 0xED	; 237
   13546:	9b e1       	ldi	r25, 0x1B	; 27
   13548:	a0 e0       	ldi	r26, 0x00	; 0
   1354a:	81 83       	std	Z+1, r24	; 0x01
   1354c:	92 83       	std	Z+2, r25	; 0x02
					val.b = 0xff;
   1354e:	a3 83       	std	Z+3, r26	; 0x03
   13550:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
					++errors;
   13554:	33 24       	eor	r3, r3
   13556:	3a 94       	dec	r3
				}
                Devices[index].PPR = val.b;
   13558:	ff ef       	ldi	r31, 0xFF	; 255
   1355a:	ef 1a       	sub	r14, r31
   1355c:	ff 0a       	sbc	r15, r31
   1355e:	8b e2       	ldi	r24, 0x2B	; 43
   13560:	8c 9d       	mul	r24, r12
   13562:	f0 01       	movw	r30, r0
   13564:	8d 9d       	mul	r24, r13
   13566:	f0 0d       	add	r31, r0
   13568:	11 24       	eor	r1, r1
                SS80p->HEADER.PPR = val.b;
   1356a:	e4 57       	subi	r30, 0x74	; 116
   1356c:	f1 4e       	sbci	r31, 0xE1	; 225
            }
            else if( MATCHI (token,"FILE") )
   1356e:	32 82       	std	Z+2, r3	; 0x02
   13570:	f5 01       	movw	r30, r10
   13572:	3c c2       	rjmp	.+1144   	; 0x139ec <Read_Config+0xa30>
   13574:	6d ef       	ldi	r22, 0xFD	; 253
   13576:	7d e0       	ldi	r23, 0x0D	; 13
   13578:	c8 01       	movw	r24, r16
   1357a:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                SS80p->HEADER.NAME = stralloc(arg);
   1357e:	89 2b       	or	r24, r25
   13580:	31 f0       	breq	.+12     	; 0x1358e <Read_Config+0x5d2>
   13582:	ce 01       	movw	r24, r28
   13584:	0a 96       	adiw	r24, 0x0a	; 10
   13586:	0e 94 0f 33 	call	0x661e	; 0x661e <stralloc>
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", token,lines);
   1358a:	f5 01       	movw	r30, r10
   1358c:	42 c2       	rjmp	.+1156   	; 0x13a12 <Read_Config+0xa56>
   1358e:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   13592:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   13596:	ed b7       	in	r30, 0x3d	; 61
   13598:	fe b7       	in	r31, 0x3e	; 62
   1359a:	97 83       	std	Z+7, r25	; 0x07
   1359c:	86 83       	std	Z+6, r24	; 0x06
   1359e:	15 83       	std	Z+5, r17	; 0x05
   135a0:	04 83       	std	Z+4, r16	; 0x04
                ++errors;
            }
            break;

        case SS80_CONFIG:
            if( MATCHI (token,"ID") )
   135a2:	8f eb       	ldi	r24, 0xBF	; 191
   135a4:	9b e1       	ldi	r25, 0x1B	; 27
   135a6:	eb ce       	rjmp	.-554    	; 0x1337e <Read_Config+0x3c2>
   135a8:	62 e0       	ldi	r22, 0x02	; 2
   135aa:	7e e0       	ldi	r23, 0x0E	; 14
   135ac:	c8 01       	movw	r24, r16
   135ae:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                SS80p->CONFIG.ID = val.w;
   135b2:	89 2b       	or	r24, r25
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", str,lines);
   135b4:	11 f0       	breq	.+4      	; 0x135ba <Read_Config+0x5fe>
   135b6:	f5 01       	movw	r30, r10
   135b8:	4e c2       	rjmp	.+1180   	; 0x13a56 <Read_Config+0xa9a>
   135ba:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   135be:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   135c2:	ed b7       	in	r30, 0x3d	; 61
   135c4:	fe b7       	in	r31, 0x3e	; 62
   135c6:	97 83       	std	Z+7, r25	; 0x07
   135c8:	86 83       	std	Z+6, r24	; 0x06
   135ca:	95 82       	std	Z+5, r9	; 0x05
   135cc:	84 82       	std	Z+4, r8	; 0x04
                ++errors;
            }
            break;

        case SS80_CONTROLLER:
            if( MATCHI (token,"UNITS_INSTALLED") )
   135ce:	81 e9       	ldi	r24, 0x91	; 145
   135d0:	9b e1       	ldi	r25, 0x1B	; 27
   135d2:	d5 ce       	rjmp	.-598    	; 0x1337e <Read_Config+0x3c2>
   135d4:	65 e0       	ldi	r22, 0x05	; 5
   135d6:	7e e0       	ldi	r23, 0x0E	; 14
   135d8:	c8 01       	movw	r24, r16
   135da:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   135de:	89 2b       	or	r24, r25
   135e0:	21 f0       	breq	.+8      	; 0x135ea <Read_Config+0x62e>
   135e2:	f5 01       	movw	r30, r10
            }
            else if( MATCHI (token,"TRANSFER_RATE") )
   135e4:	57 82       	std	Z+7, r5	; 0x07
   135e6:	46 82       	std	Z+6, r4	; 0x06
   135e8:	96 cd       	rjmp	.-1236   	; 0x13116 <Read_Config+0x15a>
   135ea:	66 e8       	ldi	r22, 0x86	; 134
   135ec:	7e e0       	ldi	r23, 0x0E	; 14
   135ee:	c8 01       	movw	r24, r16
   135f0:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   135f4:	89 2b       	or	r24, r25
            }
            else if( MATCHI (token,"TYPE") )
   135f6:	11 f0       	breq	.+4      	; 0x135fc <Read_Config+0x640>
   135f8:	f5 01       	movw	r30, r10
   135fa:	81 c2       	rjmp	.+1282   	; 0x13afe <Read_Config+0xb42>
   135fc:	68 e5       	ldi	r22, 0x58	; 88
   135fe:	7d e0       	ldi	r23, 0x0D	; 13
   13600:	c8 01       	movw	r24, r16
   13602:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                SS80p->CONTROLLER.TYPE = val.w;
   13606:	89 2b       	or	r24, r25
   13608:	19 f0       	breq	.+6      	; 0x13610 <Read_Config+0x654>
            }
            else
            {
                printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", token,lines);
   1360a:	f5 01       	movw	r30, r10
   1360c:	42 86       	std	Z+10, r4	; 0x0a
   1360e:	83 cd       	rjmp	.-1274   	; 0x13116 <Read_Config+0x15a>
   13610:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   13614:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   13618:	ed b7       	in	r30, 0x3d	; 61
   1361a:	fe b7       	in	r31, 0x3e	; 62
   1361c:	97 83       	std	Z+7, r25	; 0x07
   1361e:	86 83       	std	Z+6, r24	; 0x06
   13620:	15 83       	std	Z+5, r17	; 0x05
   13622:	04 83       	std	Z+4, r16	; 0x04
            }
            break;


        case SS80_UNIT:
            if( MATCHI (token,"UNIT_TYPE") )
   13624:	8f e5       	ldi	r24, 0x5F	; 95
   13626:	9b e1       	ldi	r25, 0x1B	; 27
   13628:	aa ce       	rjmp	.-684    	; 0x1337e <Read_Config+0x3c2>
   1362a:	65 e1       	ldi	r22, 0x15	; 21
   1362c:	7e e0       	ldi	r23, 0x0E	; 14
   1362e:	c8 01       	movw	r24, r16
   13630:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                SS80p->UNIT.UNIT_TYPE = val.w;
   13634:	89 2b       	or	r24, r25
   13636:	19 f0       	breq	.+6      	; 0x1363e <Read_Config+0x682>
            }
            else if( MATCHI (token,"DEVICE_NUMBER") )
   13638:	f5 01       	movw	r30, r10
   1363a:	43 86       	std	Z+11, r4	; 0x0b
   1363c:	6c cd       	rjmp	.-1320   	; 0x13116 <Read_Config+0x15a>
   1363e:	6f e1       	ldi	r22, 0x1F	; 31
   13640:	7e e0       	ldi	r23, 0x0E	; 14
   13642:	c8 01       	movw	r24, r16
   13644:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                SS80p->UNIT.DEVICE_NUMBER = val.l;
   13648:	89 2b       	or	r24, r25
   1364a:	31 f0       	breq	.+12     	; 0x13658 <Read_Config+0x69c>
   1364c:	f5 01       	movw	r30, r10
   1364e:	44 86       	std	Z+12, r4	; 0x0c
   13650:	55 86       	std	Z+13, r5	; 0x0d
            }
            else if( MATCHI (token,"BYTES_PER_BLOCK") )
   13652:	66 86       	std	Z+14, r6	; 0x0e
   13654:	77 86       	std	Z+15, r7	; 0x0f
   13656:	5f cd       	rjmp	.-1346   	; 0x13116 <Read_Config+0x15a>
   13658:	6d e2       	ldi	r22, 0x2D	; 45
   1365a:	7e e0       	ldi	r23, 0x0E	; 14
   1365c:	c8 01       	movw	r24, r16
   1365e:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                if(val.w > 0x1000)
   13662:	89 2b       	or	r24, r25
   13664:	11 f1       	breq	.+68     	; 0x136aa <Read_Config+0x6ee>
   13666:	f1 e0       	ldi	r31, 0x01	; 1
   13668:	4f 16       	cp	r4, r31
				{
					printf("Fatal: SS80 BYTES_PER_BLOCK > 0x1000, set to 256 at line:%d\n", lines);
   1366a:	f0 e1       	ldi	r31, 0x10	; 16
   1366c:	5f 06       	cpc	r5, r31
   1366e:	b8 f0       	brcs	.+46     	; 0x1369e <Read_Config+0x6e2>
   13670:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   13674:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   13678:	ed b7       	in	r30, 0x3d	; 61
   1367a:	fe b7       	in	r31, 0x3e	; 62
   1367c:	95 83       	std	Z+5, r25	; 0x05
   1367e:	84 83       	std	Z+4, r24	; 0x04
   13680:	82 e2       	ldi	r24, 0x22	; 34
   13682:	9b e1       	ldi	r25, 0x1B	; 27
   13684:	a0 e0       	ldi	r26, 0x00	; 0
   13686:	81 83       	std	Z+1, r24	; 0x01
   13688:	92 83       	std	Z+2, r25	; 0x02
					val.w = 256;
   1368a:	a3 83       	std	Z+3, r26	; 0x03
   1368c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   13690:	80 e0       	ldi	r24, 0x00	; 0
                    ++errors;
   13692:	91 e0       	ldi	r25, 0x01	; 1
   13694:	38 2e       	mov	r3, r24
   13696:	29 2e       	mov	r2, r25
				}
                SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   13698:	ff ef       	ldi	r31, 0xFF	; 255
   1369a:	ef 1a       	sub	r14, r31
   1369c:	ff 0a       	sbc	r15, r31
   1369e:	83 2d       	mov	r24, r3
   136a0:	92 2d       	mov	r25, r2
   136a2:	f5 01       	movw	r30, r10
            }
            else if( MATCHI (token,"BUFFERED_BLOCKS") )
   136a4:	91 8b       	std	Z+17, r25	; 0x11
   136a6:	80 8b       	std	Z+16, r24	; 0x10
   136a8:	36 cd       	rjmp	.-1428   	; 0x13116 <Read_Config+0x15a>
   136aa:	6d e3       	ldi	r22, 0x3D	; 61
   136ac:	7e e0       	ldi	r23, 0x0E	; 14
   136ae:	c8 01       	movw	r24, r16
   136b0:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
				if(val.b > 1)
   136b4:	89 2b       	or	r24, r25
   136b6:	e9 f0       	breq	.+58     	; 0x136f2 <Read_Config+0x736>
				{
					printf("Fatal: SS80 BUFFERED_BLOCKS > 1, set to 1 at line:%d\n", lines);
   136b8:	f1 e0       	ldi	r31, 0x01	; 1
   136ba:	f4 15       	cp	r31, r4
   136bc:	b8 f4       	brcc	.+46     	; 0x136ec <Read_Config+0x730>
   136be:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   136c2:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   136c6:	ed b7       	in	r30, 0x3d	; 61
   136c8:	fe b7       	in	r31, 0x3e	; 62
   136ca:	95 83       	std	Z+5, r25	; 0x05
   136cc:	84 83       	std	Z+4, r24	; 0x04
   136ce:	8c ee       	ldi	r24, 0xEC	; 236
   136d0:	9a e1       	ldi	r25, 0x1A	; 26
   136d2:	a0 e0       	ldi	r26, 0x00	; 0
   136d4:	81 83       	std	Z+1, r24	; 0x01
   136d6:	92 83       	std	Z+2, r25	; 0x02
                    ++errors;
   136d8:	a3 83       	std	Z+3, r26	; 0x03
   136da:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
					val.w = 1;
   136de:	ff ef       	ldi	r31, 0xFF	; 255
   136e0:	ef 1a       	sub	r14, r31
   136e2:	ff 0a       	sbc	r15, r31
   136e4:	81 e0       	ldi	r24, 0x01	; 1
				}
                SS80p->UNIT.BUFFERED_BLOCKS = val.b;
   136e6:	90 e0       	ldi	r25, 0x00	; 0
   136e8:	38 2e       	mov	r3, r24
   136ea:	29 2e       	mov	r2, r25
            }
            else if( MATCHI (token,"BURST_SIZE") )
   136ec:	f5 01       	movw	r30, r10
   136ee:	32 8a       	std	Z+18, r3	; 0x12
   136f0:	12 cd       	rjmp	.-1500   	; 0x13116 <Read_Config+0x15a>
   136f2:	6d e4       	ldi	r22, 0x4D	; 77
   136f4:	7e e0       	ldi	r23, 0x0E	; 14
   136f6:	c8 01       	movw	r24, r16
   136f8:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
				if(val.b > 0)
   136fc:	89 2b       	or	r24, r25
				{
					printf("Fatal: SS80 BURST_SIZE > 0, set to 1 at line:%d\n", lines);
   136fe:	e1 f0       	breq	.+56     	; 0x13738 <Read_Config+0x77c>
   13700:	44 20       	and	r4, r4
   13702:	b9 f0       	breq	.+46     	; 0x13732 <Read_Config+0x776>
   13704:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   13708:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   1370c:	ed b7       	in	r30, 0x3d	; 61
   1370e:	fe b7       	in	r31, 0x3e	; 62
   13710:	95 83       	std	Z+5, r25	; 0x05
   13712:	84 83       	std	Z+4, r24	; 0x04
   13714:	8b eb       	ldi	r24, 0xBB	; 187
   13716:	9a e1       	ldi	r25, 0x1A	; 26
   13718:	a0 e0       	ldi	r26, 0x00	; 0
   1371a:	81 83       	std	Z+1, r24	; 0x01
   1371c:	92 83       	std	Z+2, r25	; 0x02
                    ++errors;
   1371e:	a3 83       	std	Z+3, r26	; 0x03
   13720:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
					val.w = 0;
   13724:	ff ef       	ldi	r31, 0xFF	; 255
   13726:	ef 1a       	sub	r14, r31
   13728:	ff 0a       	sbc	r15, r31
   1372a:	80 e0       	ldi	r24, 0x00	; 0
				}
                SS80p->UNIT.BURST_SIZE = val.b;
   1372c:	90 e0       	ldi	r25, 0x00	; 0
   1372e:	38 2e       	mov	r3, r24
   13730:	29 2e       	mov	r2, r25
            }
            else if( MATCHI (token,"BLOCK_TIME") )
   13732:	f5 01       	movw	r30, r10
   13734:	33 8a       	std	Z+19, r3	; 0x13
   13736:	ef cc       	rjmp	.-1570   	; 0x13116 <Read_Config+0x15a>
   13738:	68 e5       	ldi	r22, 0x58	; 88
   1373a:	7e e0       	ldi	r23, 0x0E	; 14
   1373c:	c8 01       	movw	r24, r16
   1373e:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                SS80p->UNIT.BLOCK_TIME = val.w;
   13742:	89 2b       	or	r24, r25
   13744:	21 f0       	breq	.+8      	; 0x1374e <Read_Config+0x792>
   13746:	f5 01       	movw	r30, r10
            }
            else if( MATCHI (token,"CONTINUOUS_TRANSFER_RATE") || MATCHI (token,"CONTINOUS_TRANSFER_RATE") )
   13748:	55 8a       	std	Z+21, r5	; 0x15
   1374a:	44 8a       	std	Z+20, r4	; 0x14
   1374c:	e4 cc       	rjmp	.-1592   	; 0x13116 <Read_Config+0x15a>
   1374e:	63 e6       	ldi	r22, 0x63	; 99
   13750:	7e e0       	ldi	r23, 0x0E	; 14
   13752:	c8 01       	movw	r24, r16
   13754:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   13758:	89 2b       	or	r24, r25
   1375a:	21 f0       	breq	.+8      	; 0x13764 <Read_Config+0x7a8>
   1375c:	f5 01       	movw	r30, r10
            }
            else if( MATCHI (token,"BLOCK_TIME") )
            {
                SS80p->UNIT.BLOCK_TIME = val.w;
            }
            else if( MATCHI (token,"CONTINUOUS_TRANSFER_RATE") || MATCHI (token,"CONTINOUS_TRANSFER_RATE") )
   1375e:	57 8a       	std	Z+23, r5	; 0x17
   13760:	46 8a       	std	Z+22, r4	; 0x16
   13762:	d9 cc       	rjmp	.-1614   	; 0x13116 <Read_Config+0x15a>
   13764:	6c e7       	ldi	r22, 0x7C	; 124
   13766:	7e e0       	ldi	r23, 0x0E	; 14
   13768:	c8 01       	movw	r24, r16
   1376a:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
            }
            else if( MATCHI (token,"OPTIMAL_RETRY_TIME") )
   1376e:	89 2b       	or	r24, r25
   13770:	a9 f7       	brne	.-22     	; 0x1375c <Read_Config+0x7a0>
   13772:	64 e9       	ldi	r22, 0x94	; 148
   13774:	7e e0       	ldi	r23, 0x0E	; 14
   13776:	c8 01       	movw	r24, r16
   13778:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   1377c:	89 2b       	or	r24, r25
   1377e:	21 f0       	breq	.+8      	; 0x13788 <Read_Config+0x7cc>
   13780:	f5 01       	movw	r30, r10
            }
            else if( MATCHI (token,"ACCESS_TIME") )
   13782:	51 8e       	std	Z+25, r5	; 0x19
   13784:	40 8e       	std	Z+24, r4	; 0x18
   13786:	c7 cc       	rjmp	.-1650   	; 0x13116 <Read_Config+0x15a>
   13788:	67 ea       	ldi	r22, 0xA7	; 167
   1378a:	7e e0       	ldi	r23, 0x0E	; 14
   1378c:	c8 01       	movw	r24, r16
   1378e:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                SS80p->UNIT.ACCESS_TIME = val.w;
   13792:	89 2b       	or	r24, r25
   13794:	21 f0       	breq	.+8      	; 0x1379e <Read_Config+0x7e2>
   13796:	f5 01       	movw	r30, r10
            }
            else if( MATCHI (token,"MAXIMUM_INTERLEAVE") )
   13798:	53 8e       	std	Z+27, r5	; 0x1b
   1379a:	42 8e       	std	Z+26, r4	; 0x1a
   1379c:	bc cc       	rjmp	.-1672   	; 0x13116 <Read_Config+0x15a>
   1379e:	63 eb       	ldi	r22, 0xB3	; 179
   137a0:	7e e0       	ldi	r23, 0x0E	; 14
   137a2:	c8 01       	movw	r24, r16
   137a4:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   137a8:	89 2b       	or	r24, r25
   137aa:	19 f0       	breq	.+6      	; 0x137b2 <Read_Config+0x7f6>
            }
            else if( MATCHI (token,"FIXED_VOLUMES") )
   137ac:	f5 01       	movw	r30, r10
   137ae:	44 8e       	std	Z+28, r4	; 0x1c
   137b0:	b2 cc       	rjmp	.-1692   	; 0x13116 <Read_Config+0x15a>
   137b2:	66 ec       	ldi	r22, 0xC6	; 198
   137b4:	7e e0       	ldi	r23, 0x0E	; 14
   137b6:	c8 01       	movw	r24, r16
   137b8:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                SS80p->UNIT.FIXED_VOLUMES = val.b;
   137bc:	89 2b       	or	r24, r25
   137be:	19 f0       	breq	.+6      	; 0x137c6 <Read_Config+0x80a>
            }
            else if( MATCHI (token,"REMOVABLE_VOLUMES") )
   137c0:	f5 01       	movw	r30, r10
   137c2:	45 8e       	std	Z+29, r4	; 0x1d
   137c4:	a8 cc       	rjmp	.-1712   	; 0x13116 <Read_Config+0x15a>
   137c6:	64 ed       	ldi	r22, 0xD4	; 212
   137c8:	7e e0       	ldi	r23, 0x0E	; 14
   137ca:	c8 01       	movw	r24, r16
   137cc:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   137d0:	89 2b       	or	r24, r25
   137d2:	19 f0       	breq	.+6      	; 0x137da <Read_Config+0x81e>
            }
            else
            {
                printf("Unexpected SS80 UNIT token: %s, at line:%d\n", token,lines);
   137d4:	f5 01       	movw	r30, r10
   137d6:	46 8e       	std	Z+30, r4	; 0x1e
   137d8:	9e cc       	rjmp	.-1732   	; 0x13116 <Read_Config+0x15a>
   137da:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   137de:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   137e2:	ed b7       	in	r30, 0x3d	; 61
   137e4:	fe b7       	in	r31, 0x3e	; 62
   137e6:	97 83       	std	Z+7, r25	; 0x07
   137e8:	86 83       	std	Z+6, r24	; 0x06
   137ea:	15 83       	std	Z+5, r17	; 0x05
   137ec:	04 83       	std	Z+4, r16	; 0x04
                ++errors;
            }
            break;

        case SS80_VOLUME:
            if( MATCHI (token,"MAX_CYLINDER") )
   137ee:	8f e8       	ldi	r24, 0x8F	; 143
   137f0:	9a e1       	ldi	r25, 0x1A	; 26
   137f2:	c5 cd       	rjmp	.-1142   	; 0x1337e <Read_Config+0x3c2>
   137f4:	66 ee       	ldi	r22, 0xE6	; 230
   137f6:	7e e0       	ldi	r23, 0x0E	; 14
   137f8:	c8 01       	movw	r24, r16
   137fa:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                SS80p->VOLUME.MAX_CYLINDER = val.l;
   137fe:	89 2b       	or	r24, r25
   13800:	31 f0       	breq	.+12     	; 0x1380e <Read_Config+0x852>
   13802:	f5 01       	movw	r30, r10
   13804:	47 8e       	std	Z+31, r4	; 0x1f
   13806:	50 a2       	std	Z+32, r5	; 0x20
            }
            else if( MATCHI (token,"MAX_HEAD") )
   13808:	61 a2       	std	Z+33, r6	; 0x21
   1380a:	72 a2       	std	Z+34, r7	; 0x22
   1380c:	84 cc       	rjmp	.-1784   	; 0x13116 <Read_Config+0x15a>
   1380e:	63 ef       	ldi	r22, 0xF3	; 243
   13810:	7e e0       	ldi	r23, 0x0E	; 14
   13812:	c8 01       	movw	r24, r16
   13814:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                SS80p->VOLUME.MAX_HEAD = val.b;
   13818:	89 2b       	or	r24, r25
   1381a:	19 f0       	breq	.+6      	; 0x13822 <Read_Config+0x866>
            }
            else if( MATCHI (token,"MAX_SECTOR") )
   1381c:	f5 01       	movw	r30, r10
   1381e:	43 a2       	std	Z+35, r4	; 0x23
   13820:	7a cc       	rjmp	.-1804   	; 0x13116 <Read_Config+0x15a>
   13822:	6c ef       	ldi	r22, 0xFC	; 252
   13824:	7e e0       	ldi	r23, 0x0E	; 14
   13826:	c8 01       	movw	r24, r16
   13828:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                SS80p->VOLUME.MAX_SECTOR = val.w;
   1382c:	89 2b       	or	r24, r25
   1382e:	21 f0       	breq	.+8      	; 0x13838 <Read_Config+0x87c>
   13830:	f5 01       	movw	r30, r10
            }
            else if( MATCHI (token,"MAX_BLOCK_NUMBER") )
   13832:	55 a2       	std	Z+37, r5	; 0x25
   13834:	44 a2       	std	Z+36, r4	; 0x24
   13836:	6f cc       	rjmp	.-1826   	; 0x13116 <Read_Config+0x15a>
   13838:	67 e0       	ldi	r22, 0x07	; 7
   1383a:	7f e0       	ldi	r23, 0x0F	; 15
   1383c:	c8 01       	movw	r24, r16
   1383e:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                SS80p->VOLUME.MAX_BLOCK_NUMBER = val.w;
   13842:	89 2b       	or	r24, r25
   13844:	41 f0       	breq	.+16     	; 0x13856 <Read_Config+0x89a>
   13846:	61 2c       	mov	r6, r1
   13848:	71 2c       	mov	r7, r1
   1384a:	f5 01       	movw	r30, r10
   1384c:	46 a2       	std	Z+38, r4	; 0x26
   1384e:	57 a2       	std	Z+39, r5	; 0x27
            }
            else if( MATCHI (token,"INTERLEAVE") )
   13850:	60 a6       	std	Z+40, r6	; 0x28
   13852:	71 a6       	std	Z+41, r7	; 0x29
   13854:	60 cc       	rjmp	.-1856   	; 0x13116 <Read_Config+0x15a>
   13856:	6b eb       	ldi	r22, 0xBB	; 187
   13858:	7e e0       	ldi	r23, 0x0E	; 14
   1385a:	c8 01       	movw	r24, r16
   1385c:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                SS80p->VOLUME.INTERLEAVE = val.b;
   13860:	89 2b       	or	r24, r25
   13862:	19 f0       	breq	.+6      	; 0x1386a <Read_Config+0x8ae>

            }
            else
            {
                printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", token,lines);
   13864:	f5 01       	movw	r30, r10
   13866:	42 a6       	std	Z+42, r4	; 0x2a
   13868:	56 cc       	rjmp	.-1876   	; 0x13116 <Read_Config+0x15a>
   1386a:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   1386e:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   13872:	ed b7       	in	r30, 0x3d	; 61
   13874:	fe b7       	in	r31, 0x3e	; 62
   13876:	97 83       	std	Z+7, r25	; 0x07
   13878:	86 83       	std	Z+6, r24	; 0x06
   1387a:	15 83       	std	Z+5, r17	; 0x05
            }
            break;

#ifdef AMIGO
        case AMIGO_STATE:
            if( MATCHI (token,"HEADER") )
   1387c:	04 83       	std	Z+4, r16	; 0x04
   1387e:	81 e6       	ldi	r24, 0x61	; 97
   13880:	9a e1       	ldi	r25, 0x1A	; 26
   13882:	7d cd       	rjmp	.-1286   	; 0x1337e <Read_Config+0x3c2>
   13884:	6b ed       	ldi	r22, 0xDB	; 219
   13886:	7d e0       	ldi	r23, 0x0D	; 13
            {
                push_state(state);
   13888:	c8 01       	movw	r24, r16
   1388a:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
   1388e:	89 2b       	or	r24, r25
                state = AMIGO_HEADER;
   13890:	31 f0       	breq	.+12     	; 0x1389e <Read_Config+0x8e2>
   13892:	8a e0       	ldi	r24, 0x0A	; 10
   13894:	90 e0       	ldi	r25, 0x00	; 0
            }
            else if( MATCHI (token,"CONFIG") )
   13896:	1c da       	rcall	.-3016   	; 0x12cd0 <push_state>
   13898:	2b e0       	ldi	r18, 0x0B	; 11
   1389a:	30 e0       	ldi	r19, 0x00	; 0
   1389c:	c3 cd       	rjmp	.-1146   	; 0x13424 <Read_Config+0x468>
   1389e:	64 ed       	ldi	r22, 0xD4	; 212
   138a0:	7d e0       	ldi	r23, 0x0D	; 13
            {
                push_state(state);
   138a2:	c8 01       	movw	r24, r16
   138a4:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
   138a8:	89 2b       	or	r24, r25
                state = AMIGO_CONFIG;
   138aa:	31 f0       	breq	.+12     	; 0x138b8 <Read_Config+0x8fc>
   138ac:	8a e0       	ldi	r24, 0x0A	; 10
   138ae:	90 e0       	ldi	r25, 0x00	; 0
            }
            else if( MATCHI (token,"GEOMETRY") )
   138b0:	0f da       	rcall	.-3042   	; 0x12cd0 <push_state>
   138b2:	8c e0       	ldi	r24, 0x0C	; 12
   138b4:	90 e0       	ldi	r25, 0x00	; 0
   138b6:	a5 cc       	rjmp	.-1718   	; 0x13202 <Read_Config+0x246>
   138b8:	68 e1       	ldi	r22, 0x18	; 24
   138ba:	7f e0       	ldi	r23, 0x0F	; 15
   138bc:	c8 01       	movw	r24, r16
            {
                push_state(state);
   138be:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
   138c2:	89 2b       	or	r24, r25
   138c4:	31 f0       	breq	.+12     	; 0x138d2 <Read_Config+0x916>
                state = AMIGO_GEOMETRY;
   138c6:	8a e0       	ldi	r24, 0x0A	; 10
   138c8:	90 e0       	ldi	r25, 0x00	; 0
   138ca:	02 da       	rcall	.-3068   	; 0x12cd0 <push_state>
            }
            else
            {
                printf("Unexpected AMIGO START token: %s, at line:%d\n", str,lines);
   138cc:	ad e0       	ldi	r26, 0x0D	; 13
   138ce:	b0 e0       	ldi	r27, 0x00	; 0
   138d0:	c9 cd       	rjmp	.-1134   	; 0x13464 <Read_Config+0x4a8>
   138d2:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   138d6:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   138da:	ed b7       	in	r30, 0x3d	; 61
   138dc:	fe b7       	in	r31, 0x3e	; 62
   138de:	97 83       	std	Z+7, r25	; 0x07
   138e0:	86 83       	std	Z+6, r24	; 0x06
   138e2:	95 82       	std	Z+5, r9	; 0x05
   138e4:	84 82       	std	Z+4, r8	; 0x04
                ++errors;
            }
            break;

        case AMIGO_HEADER:
            if( MATCHI (token,"DRIVE") )
   138e6:	83 e3       	ldi	r24, 0x33	; 51
   138e8:	9a e1       	ldi	r25, 0x1A	; 26
   138ea:	49 cd       	rjmp	.-1390   	; 0x1337e <Read_Config+0x3c2>
   138ec:	61 e2       	ldi	r22, 0x21	; 33
   138ee:	7f e0       	ldi	r23, 0x0F	; 15
   138f0:	c8 01       	movw	r24, r16
   138f2:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                //skip this
                printf("Skipping %s, at line:%d\n", str,lines);
   138f6:	89 2b       	or	r24, r25
   138f8:	99 f0       	breq	.+38     	; 0x13920 <Read_Config+0x964>
   138fa:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   138fe:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   13902:	ed b7       	in	r30, 0x3d	; 61
   13904:	fe b7       	in	r31, 0x3e	; 62
   13906:	97 83       	std	Z+7, r25	; 0x07
   13908:	86 83       	std	Z+6, r24	; 0x06
   1390a:	95 82       	std	Z+5, r9	; 0x05
   1390c:	84 82       	std	Z+4, r8	; 0x04
   1390e:	8a e1       	ldi	r24, 0x1A	; 26
   13910:	9a e1       	ldi	r25, 0x1A	; 26
   13912:	a0 e0       	ldi	r26, 0x00	; 0
   13914:	81 83       	std	Z+1, r24	; 0x01
   13916:	92 83       	std	Z+2, r25	; 0x02
   13918:	a3 83       	std	Z+3, r26	; 0x03
            }
            else if( MATCHI (token,"ADDRESS") )
   1391a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1391e:	fb cb       	rjmp	.-2058   	; 0x13116 <Read_Config+0x15a>
   13920:	6c ec       	ldi	r22, 0xCC	; 204
   13922:	7d e0       	ldi	r23, 0x0D	; 13
   13924:	c8 01       	movw	r24, r16
   13926:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                if(val.b > 31)
   1392a:	89 2b       	or	r24, r25
   1392c:	59 f1       	breq	.+86     	; 0x13984 <Read_Config+0x9c8>
				{
					printf("Fatal AMIGO ADDRESS: %d > 31 disabled at line:%d\n", str,lines);
   1392e:	ff e1       	ldi	r31, 0x1F	; 31
   13930:	f4 15       	cp	r31, r4
   13932:	b8 f4       	brcc	.+46     	; 0x13962 <Read_Config+0x9a6>
   13934:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   13938:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   1393c:	ed b7       	in	r30, 0x3d	; 61
   1393e:	fe b7       	in	r31, 0x3e	; 62
   13940:	97 83       	std	Z+7, r25	; 0x07
   13942:	86 83       	std	Z+6, r24	; 0x06
   13944:	95 82       	std	Z+5, r9	; 0x05
   13946:	84 82       	std	Z+4, r8	; 0x04
   13948:	88 ee       	ldi	r24, 0xE8	; 232
   1394a:	99 e1       	ldi	r25, 0x19	; 25
   1394c:	a0 e0       	ldi	r26, 0x00	; 0
   1394e:	81 83       	std	Z+1, r24	; 0x01
   13950:	92 83       	std	Z+2, r25	; 0x02
					val.b = 0xff;
   13952:	a3 83       	std	Z+3, r26	; 0x03
   13954:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
					++errors;
   13958:	33 24       	eor	r3, r3
   1395a:	3a 94       	dec	r3
				}
                Devices[index].ADDRESS = val.b;
   1395c:	ff ef       	ldi	r31, 0xFF	; 255
   1395e:	ef 1a       	sub	r14, r31
   13960:	ff 0a       	sbc	r15, r31
   13962:	8b e2       	ldi	r24, 0x2B	; 43
   13964:	8c 9d       	mul	r24, r12
   13966:	f0 01       	movw	r30, r0
   13968:	8d 9d       	mul	r24, r13
   1396a:	f0 0d       	add	r31, r0
   1396c:	11 24       	eor	r1, r1
                AMIGOp->HEADER.ADDRESS = val.b;
   1396e:	e4 57       	subi	r30, 0x74	; 116
   13970:	f1 4e       	sbci	r31, 0xE1	; 225
   13972:	31 82       	std	Z+1, r3	; 0x01
   13974:	c4 57       	subi	r28, 0x74	; 116
   13976:	de 4f       	sbci	r29, 0xFE	; 254
   13978:	a8 81       	ld	r26, Y
   1397a:	b9 81       	ldd	r27, Y+1	; 0x01
   1397c:	cc 58       	subi	r28, 0x8C	; 140
            }
            else if( MATCHI (token,"PPR") )
   1397e:	d1 40       	sbci	r29, 0x01	; 1
   13980:	3c 92       	st	X, r3
   13982:	c9 cb       	rjmp	.-2158   	; 0x13116 <Read_Config+0x15a>
   13984:	69 ef       	ldi	r22, 0xF9	; 249
   13986:	7d e0       	ldi	r23, 0x0D	; 13
   13988:	c8 01       	movw	r24, r16
   1398a:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                if(val.b > 7)
   1398e:	89 2b       	or	r24, r25
   13990:	79 f1       	breq	.+94     	; 0x139f0 <Read_Config+0xa34>
				{
					printf("Warning AMIGO ADDRESS: %d > 7, disabled at line:%d\n", str,lines);
   13992:	b7 e0       	ldi	r27, 0x07	; 7
   13994:	b4 15       	cp	r27, r4
   13996:	d8 f4       	brcc	.+54     	; 0x139ce <Read_Config+0xa12>
   13998:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   1399c:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   139a0:	ed b7       	in	r30, 0x3d	; 61
   139a2:	fe b7       	in	r31, 0x3e	; 62
   139a4:	97 83       	std	Z+7, r25	; 0x07
   139a6:	86 83       	std	Z+6, r24	; 0x06
   139a8:	95 82       	std	Z+5, r9	; 0x05
   139aa:	84 82       	std	Z+4, r8	; 0x04
   139ac:	cf 55       	subi	r28, 0x5F	; 95
   139ae:	de 4f       	sbci	r29, 0xFE	; 254
   139b0:	28 81       	ld	r18, Y
   139b2:	39 81       	ldd	r19, Y+1	; 0x01
   139b4:	4a 81       	ldd	r20, Y+2	; 0x02
   139b6:	c1 5a       	subi	r28, 0xA1	; 161
   139b8:	d1 40       	sbci	r29, 0x01	; 1
   139ba:	21 83       	std	Z+1, r18	; 0x01
   139bc:	32 83       	std	Z+2, r19	; 0x02
					val.b = 0xff;
   139be:	43 83       	std	Z+3, r20	; 0x03
   139c0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
					++errors;
   139c4:	33 24       	eor	r3, r3
   139c6:	3a 94       	dec	r3
				}
                Devices[index].PPR = val.b;
   139c8:	ff ef       	ldi	r31, 0xFF	; 255
   139ca:	ef 1a       	sub	r14, r31
   139cc:	ff 0a       	sbc	r15, r31
   139ce:	8b e2       	ldi	r24, 0x2B	; 43
   139d0:	8c 9d       	mul	r24, r12
   139d2:	f0 01       	movw	r30, r0
   139d4:	8d 9d       	mul	r24, r13
   139d6:	f0 0d       	add	r31, r0
   139d8:	11 24       	eor	r1, r1
                AMIGOp->HEADER.PPR = val.b;
   139da:	e4 57       	subi	r30, 0x74	; 116
   139dc:	f1 4e       	sbci	r31, 0xE1	; 225
   139de:	32 82       	std	Z+2, r3	; 0x02
   139e0:	c4 57       	subi	r28, 0x74	; 116
   139e2:	de 4f       	sbci	r29, 0xFE	; 254
   139e4:	e8 81       	ld	r30, Y
   139e6:	f9 81       	ldd	r31, Y+1	; 0x01
   139e8:	cc 58       	subi	r28, 0x8C	; 140
            }
            else if( MATCHI (token,"FILE") )
   139ea:	d1 40       	sbci	r29, 0x01	; 1
   139ec:	31 82       	std	Z+1, r3	; 0x01
   139ee:	93 cb       	rjmp	.-2266   	; 0x13116 <Read_Config+0x15a>
   139f0:	6d ef       	ldi	r22, 0xFD	; 253
   139f2:	7d e0       	ldi	r23, 0x0D	; 13
   139f4:	c8 01       	movw	r24, r16
   139f6:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                AMIGOp->HEADER.NAME = stralloc(arg);
   139fa:	89 2b       	or	r24, r25
   139fc:	69 f0       	breq	.+26     	; 0x13a18 <Read_Config+0xa5c>
   139fe:	ce 01       	movw	r24, r28
   13a00:	0a 96       	adiw	r24, 0x0a	; 10
   13a02:	0e 94 0f 33 	call	0x661e	; 0x661e <stralloc>
   13a06:	c4 57       	subi	r28, 0x74	; 116
   13a08:	de 4f       	sbci	r29, 0xFE	; 254
   13a0a:	e8 81       	ld	r30, Y
   13a0c:	f9 81       	ldd	r31, Y+1	; 0x01
   13a0e:	cc 58       	subi	r28, 0x8C	; 140
   13a10:	d1 40       	sbci	r29, 0x01	; 1
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", str,lines);
   13a12:	93 83       	std	Z+3, r25	; 0x03
   13a14:	82 83       	std	Z+2, r24	; 0x02
   13a16:	7f cb       	rjmp	.-2306   	; 0x13116 <Read_Config+0x15a>
   13a18:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   13a1c:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   13a20:	ed b7       	in	r30, 0x3d	; 61
   13a22:	fe b7       	in	r31, 0x3e	; 62
   13a24:	97 83       	std	Z+7, r25	; 0x07
   13a26:	86 83       	std	Z+6, r24	; 0x06
   13a28:	95 82       	std	Z+5, r9	; 0x05
   13a2a:	84 82       	std	Z+4, r8	; 0x04
   13a2c:	c2 56       	subi	r28, 0x62	; 98
   13a2e:	de 4f       	sbci	r29, 0xFE	; 254
   13a30:	28 81       	ld	r18, Y
   13a32:	39 81       	ldd	r19, Y+1	; 0x01
   13a34:	4a 81       	ldd	r20, Y+2	; 0x02
                ++errors;
            }
            break;

        case AMIGO_CONFIG:
            if( MATCHI (token,"ID") )
   13a36:	ce 59       	subi	r28, 0x9E	; 158
   13a38:	d1 40       	sbci	r29, 0x01	; 1
   13a3a:	95 c0       	rjmp	.+298    	; 0x13b66 <Read_Config+0xbaa>
   13a3c:	62 e0       	ldi	r22, 0x02	; 2
   13a3e:	7e e0       	ldi	r23, 0x0E	; 14
   13a40:	c8 01       	movw	r24, r16
   13a42:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                AMIGOp->CONFIG.ID = val.w;
   13a46:	89 2b       	or	r24, r25
   13a48:	49 f0       	breq	.+18     	; 0x13a5c <Read_Config+0xaa0>
   13a4a:	c4 57       	subi	r28, 0x74	; 116
   13a4c:	de 4f       	sbci	r29, 0xFE	; 254
   13a4e:	e8 81       	ld	r30, Y
   13a50:	f9 81       	ldd	r31, Y+1	; 0x01
   13a52:	cc 58       	subi	r28, 0x8C	; 140
   13a54:	d1 40       	sbci	r29, 0x01	; 1
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", str,lines);
   13a56:	55 82       	std	Z+5, r5	; 0x05
   13a58:	44 82       	std	Z+4, r4	; 0x04
   13a5a:	5d cb       	rjmp	.-2374   	; 0x13116 <Read_Config+0x15a>
   13a5c:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   13a60:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   13a64:	ed b7       	in	r30, 0x3d	; 61
   13a66:	fe b7       	in	r31, 0x3e	; 62
   13a68:	97 83       	std	Z+7, r25	; 0x07
   13a6a:	86 83       	std	Z+6, r24	; 0x06
   13a6c:	95 82       	std	Z+5, r9	; 0x05
   13a6e:	84 82       	std	Z+4, r8	; 0x04
   13a70:	c5 56       	subi	r28, 0x65	; 101
   13a72:	de 4f       	sbci	r29, 0xFE	; 254
   13a74:	28 81       	ld	r18, Y
   13a76:	39 81       	ldd	r19, Y+1	; 0x01
   13a78:	4a 81       	ldd	r20, Y+2	; 0x02
                ++errors;
            }
            break;

        case AMIGO_GEOMETRY:
            if( MATCHI (token,"BYTES_PER_SECTOR") )
   13a7a:	cb 59       	subi	r28, 0x9B	; 155
   13a7c:	d1 40       	sbci	r29, 0x01	; 1
   13a7e:	73 c0       	rjmp	.+230    	; 0x13b66 <Read_Config+0xbaa>
   13a80:	67 e2       	ldi	r22, 0x27	; 39
   13a82:	7f e0       	ldi	r23, 0x0F	; 15
   13a84:	c8 01       	movw	r24, r16
   13a86:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                if(val.w > 0x1000)
   13a8a:	89 2b       	or	r24, r25
   13a8c:	59 f1       	breq	.+86     	; 0x13ae4 <Read_Config+0xb28>
   13a8e:	21 e0       	ldi	r18, 0x01	; 1
   13a90:	42 16       	cp	r4, r18
				{
					printf("Fatal: AMIGO BYTES_PER_SECTOR > 0x1000, set to 256 at line:%d\n", lines);
   13a92:	20 e1       	ldi	r18, 0x10	; 16
   13a94:	52 06       	cpc	r5, r18
   13a96:	d8 f0       	brcs	.+54     	; 0x13ace <Read_Config+0xb12>
   13a98:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   13a9c:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   13aa0:	ed b7       	in	r30, 0x3d	; 61
   13aa2:	fe b7       	in	r31, 0x3e	; 62
   13aa4:	95 83       	std	Z+5, r25	; 0x05
   13aa6:	84 83       	std	Z+4, r24	; 0x04
   13aa8:	c8 56       	subi	r28, 0x68	; 104
   13aaa:	de 4f       	sbci	r29, 0xFE	; 254
   13aac:	28 81       	ld	r18, Y
   13aae:	39 81       	ldd	r19, Y+1	; 0x01
   13ab0:	4a 81       	ldd	r20, Y+2	; 0x02
   13ab2:	c8 59       	subi	r28, 0x98	; 152
   13ab4:	d1 40       	sbci	r29, 0x01	; 1
   13ab6:	21 83       	std	Z+1, r18	; 0x01
   13ab8:	32 83       	std	Z+2, r19	; 0x02
					val.w = 256;
   13aba:	43 83       	std	Z+3, r20	; 0x03
   13abc:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   13ac0:	80 e0       	ldi	r24, 0x00	; 0
                    ++errors;
   13ac2:	91 e0       	ldi	r25, 0x01	; 1
   13ac4:	38 2e       	mov	r3, r24
   13ac6:	29 2e       	mov	r2, r25
				}
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13ac8:	ff ef       	ldi	r31, 0xFF	; 255
   13aca:	ef 1a       	sub	r14, r31
   13acc:	ff 0a       	sbc	r15, r31
   13ace:	83 2d       	mov	r24, r3
   13ad0:	92 2d       	mov	r25, r2
   13ad2:	c4 57       	subi	r28, 0x74	; 116
   13ad4:	de 4f       	sbci	r29, 0xFE	; 254
   13ad6:	e8 81       	ld	r30, Y
   13ad8:	f9 81       	ldd	r31, Y+1	; 0x01
   13ada:	cc 58       	subi	r28, 0x8C	; 140
   13adc:	d1 40       	sbci	r29, 0x01	; 1
            }
            else if( MATCHI (token,"SECTORS_PER_TRACK") )
   13ade:	97 83       	std	Z+7, r25	; 0x07
   13ae0:	86 83       	std	Z+6, r24	; 0x06
   13ae2:	19 cb       	rjmp	.-2510   	; 0x13116 <Read_Config+0x15a>
   13ae4:	68 e3       	ldi	r22, 0x38	; 56
   13ae6:	7f e0       	ldi	r23, 0x0F	; 15
   13ae8:	c8 01       	movw	r24, r16
   13aea:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13aee:	89 2b       	or	r24, r25
   13af0:	49 f0       	breq	.+18     	; 0x13b04 <Read_Config+0xb48>
   13af2:	c4 57       	subi	r28, 0x74	; 116
   13af4:	de 4f       	sbci	r29, 0xFE	; 254
   13af6:	e8 81       	ld	r30, Y
   13af8:	f9 81       	ldd	r31, Y+1	; 0x01
   13afa:	cc 58       	subi	r28, 0x8C	; 140
   13afc:	d1 40       	sbci	r29, 0x01	; 1
            }
            else if( MATCHI (token,"HEADS") )
   13afe:	51 86       	std	Z+9, r5	; 0x09
   13b00:	40 86       	std	Z+8, r4	; 0x08
   13b02:	09 cb       	rjmp	.-2542   	; 0x13116 <Read_Config+0x15a>
   13b04:	6a e4       	ldi	r22, 0x4A	; 74
   13b06:	7f e0       	ldi	r23, 0x0F	; 15
   13b08:	c8 01       	movw	r24, r16
   13b0a:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                AMIGOp->GEOMETRY.HEADS = val.w;
   13b0e:	89 2b       	or	r24, r25
   13b10:	49 f0       	breq	.+18     	; 0x13b24 <Read_Config+0xb68>
   13b12:	c4 57       	subi	r28, 0x74	; 116
   13b14:	de 4f       	sbci	r29, 0xFE	; 254
   13b16:	e8 81       	ld	r30, Y
   13b18:	f9 81       	ldd	r31, Y+1	; 0x01
   13b1a:	cc 58       	subi	r28, 0x8C	; 140
   13b1c:	d1 40       	sbci	r29, 0x01	; 1
            }
            else if( MATCHI (token,"CYLINDERS") )
   13b1e:	53 86       	std	Z+11, r5	; 0x0b
   13b20:	42 86       	std	Z+10, r4	; 0x0a
   13b22:	f9 ca       	rjmp	.-2574   	; 0x13116 <Read_Config+0x15a>
   13b24:	60 e5       	ldi	r22, 0x50	; 80
   13b26:	7f e0       	ldi	r23, 0x0F	; 15
   13b28:	c8 01       	movw	r24, r16
   13b2a:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
            {
                AMIGOp->GEOMETRY.CYLINDERS = val.w;
   13b2e:	89 2b       	or	r24, r25
   13b30:	49 f0       	breq	.+18     	; 0x13b44 <Read_Config+0xb88>
   13b32:	c4 57       	subi	r28, 0x74	; 116
   13b34:	de 4f       	sbci	r29, 0xFE	; 254
   13b36:	e8 81       	ld	r30, Y
   13b38:	f9 81       	ldd	r31, Y+1	; 0x01
   13b3a:	cc 58       	subi	r28, 0x8C	; 140
   13b3c:	d1 40       	sbci	r29, 0x01	; 1
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", str,lines);
   13b3e:	55 86       	std	Z+13, r5	; 0x0d
   13b40:	44 86       	std	Z+12, r4	; 0x0c
   13b42:	e9 ca       	rjmp	.-2606   	; 0x13116 <Read_Config+0x15a>
   13b44:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   13b48:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   13b4c:	ed b7       	in	r30, 0x3d	; 61
   13b4e:	fe b7       	in	r31, 0x3e	; 62
   13b50:	97 83       	std	Z+7, r25	; 0x07
   13b52:	86 83       	std	Z+6, r24	; 0x06
   13b54:	95 82       	std	Z+5, r9	; 0x05
   13b56:	84 82       	std	Z+4, r8	; 0x04
   13b58:	cb 56       	subi	r28, 0x6B	; 107
   13b5a:	de 4f       	sbci	r29, 0xFE	; 254
   13b5c:	28 81       	ld	r18, Y
   13b5e:	39 81       	ldd	r19, Y+1	; 0x01
   13b60:	4a 81       	ldd	r20, Y+2	; 0x02
   13b62:	c5 59       	subi	r28, 0x95	; 149
   13b64:	d1 40       	sbci	r29, 0x01	; 1
   13b66:	21 83       	std	Z+1, r18	; 0x01
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Fatal Unexpected STATE %d at line:%d\n", state, lines);
   13b68:	32 83       	std	Z+2, r19	; 0x02
   13b6a:	43 83       	std	Z+3, r20	; 0x03
   13b6c:	1a c0       	rjmp	.+52     	; 0x13ba2 <Read_Config+0xbe6>
   13b6e:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   13b72:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   13b76:	ed b7       	in	r30, 0x3d	; 61
   13b78:	fe b7       	in	r31, 0x3e	; 62
   13b7a:	97 83       	std	Z+7, r25	; 0x07
   13b7c:	86 83       	std	Z+6, r24	; 0x06
   13b7e:	c6 57       	subi	r28, 0x76	; 118
   13b80:	de 4f       	sbci	r29, 0xFE	; 254
   13b82:	28 81       	ld	r18, Y
   13b84:	39 81       	ldd	r19, Y+1	; 0x01
   13b86:	ca 58       	subi	r28, 0x8A	; 138
   13b88:	d1 40       	sbci	r29, 0x01	; 1
   13b8a:	35 83       	std	Z+5, r19	; 0x05
   13b8c:	24 83       	std	Z+4, r18	; 0x04
   13b8e:	ce 56       	subi	r28, 0x6E	; 110
   13b90:	de 4f       	sbci	r29, 0xFE	; 254
   13b92:	88 81       	ld	r24, Y
   13b94:	99 81       	ldd	r25, Y+1	; 0x01
   13b96:	aa 81       	ldd	r26, Y+2	; 0x02
   13b98:	c2 59       	subi	r28, 0x92	; 146
   13b9a:	d1 40       	sbci	r29, 0x01	; 1
   13b9c:	81 83       	std	Z+1, r24	; 0x01
   13b9e:	92 83       	std	Z+2, r25	; 0x02
            ++errors;
   13ba0:	a3 83       	std	Z+3, r26	; 0x03
   13ba2:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            break;
   13ba6:	ff ef       	ldi	r31, 0xFF	; 255

        } // switch
    } //while
    if(state != START_STATE)
   13ba8:	ef 1a       	sub	r14, r31
   13baa:	ff 0a       	sbc	r15, r31
   13bac:	b4 ca       	rjmp	.-2712   	; 0x13116 <Read_Config+0x15a>
   13bae:	c6 57       	subi	r28, 0x76	; 118
   13bb0:	de 4f       	sbci	r29, 0xFE	; 254
   13bb2:	88 81       	ld	r24, Y
   13bb4:	99 81       	ldd	r25, Y+1	; 0x01
   13bb6:	ca 58       	subi	r28, 0x8A	; 138
    {
        printf("Missing END statement at line:%d\n", lines);
   13bb8:	d1 40       	sbci	r29, 0x01	; 1
   13bba:	89 2b       	or	r24, r25
   13bbc:	79 f0       	breq	.+30     	; 0x13bdc <Read_Config+0xc20>
   13bbe:	ed b7       	in	r30, 0x3d	; 61
   13bc0:	fe b7       	in	r31, 0x3e	; 62
   13bc2:	35 83       	std	Z+5, r19	; 0x05
   13bc4:	24 83       	std	Z+4, r18	; 0x04
   13bc6:	8e e9       	ldi	r24, 0x9E	; 158
   13bc8:	98 e1       	ldi	r25, 0x18	; 24
   13bca:	a0 e0       	ldi	r26, 0x00	; 0
   13bcc:	81 83       	std	Z+1, r24	; 0x01
   13bce:	92 83       	std	Z+2, r25	; 0x02
        ++errors;
   13bd0:	a3 83       	std	Z+3, r26	; 0x03
   13bd2:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    }
    printf("Read_Config: read(%d) lines\n", lines);
   13bd6:	ff ef       	ldi	r31, 0xFF	; 255
   13bd8:	ef 1a       	sub	r14, r31
   13bda:	ff 0a       	sbc	r15, r31
   13bdc:	80 91 ff 18 	lds	r24, 0x18FF	; 0x8018ff <lines>
   13be0:	90 91 00 19 	lds	r25, 0x1900	; 0x801900 <lines+0x1>
   13be4:	ed b7       	in	r30, 0x3d	; 61
   13be6:	fe b7       	in	r31, 0x3e	; 62
   13be8:	95 83       	std	Z+5, r25	; 0x05
   13bea:	84 83       	std	Z+4, r24	; 0x04
   13bec:	81 e8       	ldi	r24, 0x81	; 129
   13bee:	98 e1       	ldi	r25, 0x18	; 24
   13bf0:	a0 e0       	ldi	r26, 0x00	; 0
   13bf2:	81 83       	std	Z+1, r24	; 0x01
   13bf4:	92 83       	std	Z+2, r25	; 0x02
    if(errors)
   13bf6:	a3 83       	std	Z+3, r26	; 0x03
   13bf8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   13bfc:	e1 14       	cp	r14, r1
   13bfe:	f1 04       	cpc	r15, r1
   13c00:	61 f0       	breq	.+24     	; 0x13c1a <Read_Config+0xc5e>
   13c02:	ed b7       	in	r30, 0x3d	; 61
   13c04:	fe b7       	in	r31, 0x3e	; 62
   13c06:	f5 82       	std	Z+5, r15	; 0x05
   13c08:	e4 82       	std	Z+4, r14	; 0x04
   13c0a:	8a e5       	ldi	r24, 0x5A	; 90
   13c0c:	98 e1       	ldi	r25, 0x18	; 24
   13c0e:	a0 e0       	ldi	r26, 0x00	; 0
   13c10:	81 83       	std	Z+1, r24	; 0x01

    ret = fclose(cfg);
   13c12:	92 83       	std	Z+2, r25	; 0x02
   13c14:	a3 83       	std	Z+3, r26	; 0x03
   13c16:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   13c1a:	c0 57       	subi	r28, 0x70	; 112
   13c1c:	de 4f       	sbci	r29, 0xFE	; 254
   13c1e:	88 81       	ld	r24, Y
   13c20:	99 81       	ldd	r25, Y+1	; 0x01
    if(ret == EOF)
   13c22:	c0 59       	subi	r28, 0x90	; 144
   13c24:	d1 40       	sbci	r29, 0x01	; 1
    {
        perror("Read_Config - close error");
   13c26:	0e 94 dc 7d 	call	0xfbb8	; 0xfbb8 <fclose>
   13c2a:	01 96       	adiw	r24, 0x01	; 1
   13c2c:	39 f4       	brne	.+14     	; 0x13c3c <Read_Config+0xc80>
        ++errors;
   13c2e:	8a e5       	ldi	r24, 0x5A	; 90
   13c30:	9f e0       	ldi	r25, 0x0F	; 15
   13c32:	0e 94 63 79 	call	0xf2c6	; 0xf2c6 <perror>
    }

	// Post process device values
	Post_Config();
   13c36:	2f ef       	ldi	r18, 0xFF	; 255

    return(errors);
   13c38:	e2 1a       	sub	r14, r18
}
   13c3a:	f2 0a       	sbc	r15, r18
   13c3c:	29 d9       	rcall	.-3502   	; 0x12e90 <Post_Config>
   13c3e:	c7 01       	movw	r24, r14
   13c40:	cd 55       	subi	r28, 0x5D	; 93
   13c42:	de 4f       	sbci	r29, 0xFE	; 254
   13c44:	e2 e1       	ldi	r30, 0x12	; 18
   13c46:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

00013c4a <print_var_P>:
/// @brief Display Configuration File variable
/// @param str: title
/// @param val: variable value
/// @return  void
void print_var_P(__memx const char *str, uint32_t val)
{
   13c4a:	8f 92       	push	r8
   13c4c:	9f 92       	push	r9
   13c4e:	af 92       	push	r10
   13c50:	bf 92       	push	r11
   13c52:	cf 92       	push	r12
   13c54:	df 92       	push	r13
   13c56:	ef 92       	push	r14
   13c58:	0f 93       	push	r16
   13c5a:	1f 93       	push	r17
   13c5c:	cf 93       	push	r28
   13c5e:	df 93       	push	r29
   13c60:	cd b7       	in	r28, 0x3d	; 61
   13c62:	de b7       	in	r29, 0x3e	; 62
   13c64:	cd 54       	subi	r28, 0x4D	; 77
   13c66:	d1 09       	sbc	r29, r1
   13c68:	0f b6       	in	r0, 0x3f	; 63
   13c6a:	f8 94       	cli
   13c6c:	de bf       	out	0x3e, r29	; 62
   13c6e:	0f be       	out	0x3f, r0	; 63
   13c70:	cd bf       	out	0x3d, r28	; 61
   13c72:	6b 01       	movw	r12, r22
   13c74:	e8 2e       	mov	r14, r24
   13c76:	49 01       	movw	r8, r18
   13c78:	5a 01       	movw	r10, r20
   13c7a:	de 01       	movw	r26, r28
   13c7c:	1e 96       	adiw	r26, 0x0e	; 14
    char tmp[64];
    int i=0;
   13c7e:	80 e0       	ldi	r24, 0x00	; 0
   13c80:	90 e0       	ldi	r25, 0x00	; 0
   13c82:	8d 01       	movw	r16, r26
    while( *str && i < 62)
   13c84:	f6 01       	movw	r30, r12
   13c86:	5e 2d       	mov	r21, r14
   13c88:	0e 94 bd e4 	call	0x1c97a	; 0x1c97a <__xload_1>
   13c8c:	66 23       	and	r22, r22
   13c8e:	51 f0       	breq	.+20     	; 0x13ca4 <print_var_P+0x5a>
   13c90:	8e 33       	cpi	r24, 0x3E	; 62
   13c92:	91 05       	cpc	r25, r1
   13c94:	39 f0       	breq	.+14     	; 0x13ca4 <print_var_P+0x5a>
        tmp[i++] = *str++;
   13c96:	01 96       	adiw	r24, 0x01	; 1
   13c98:	2f ef       	ldi	r18, 0xFF	; 255
   13c9a:	c2 1a       	sub	r12, r18
   13c9c:	d2 0a       	sbc	r13, r18
   13c9e:	e2 0a       	sbc	r14, r18
   13ca0:	6d 93       	st	X+, r22
   13ca2:	f0 cf       	rjmp	.-32     	; 0x13c84 <print_var_P+0x3a>
    tmp[i++] = 0;
   13ca4:	f8 01       	movw	r30, r16
   13ca6:	e8 0f       	add	r30, r24
   13ca8:	f9 1f       	adc	r31, r25
   13caa:	10 82       	st	Z, r1

    printf("    %-25s = %8lxH (%ld)\n", tmp, val, val); 
   13cac:	ed b7       	in	r30, 0x3d	; 61
   13cae:	fe b7       	in	r31, 0x3e	; 62
   13cb0:	82 86       	std	Z+10, r8	; 0x0a
   13cb2:	93 86       	std	Z+11, r9	; 0x0b
   13cb4:	a4 86       	std	Z+12, r10	; 0x0c
   13cb6:	b5 86       	std	Z+13, r11	; 0x0d
   13cb8:	86 82       	std	Z+6, r8	; 0x06
   13cba:	97 82       	std	Z+7, r9	; 0x07
   13cbc:	a0 86       	std	Z+8, r10	; 0x08
   13cbe:	b1 86       	std	Z+9, r11	; 0x09
   13cc0:	15 83       	std	Z+5, r17	; 0x05
   13cc2:	04 83       	std	Z+4, r16	; 0x04
   13cc4:	81 e4       	ldi	r24, 0x41	; 65
   13cc6:	98 e1       	ldi	r25, 0x18	; 24
   13cc8:	a0 e0       	ldi	r26, 0x00	; 0
   13cca:	81 83       	std	Z+1, r24	; 0x01
   13ccc:	92 83       	std	Z+2, r25	; 0x02
   13cce:	a3 83       	std	Z+3, r26	; 0x03
   13cd0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
}
   13cd4:	c3 5b       	subi	r28, 0xB3	; 179
   13cd6:	df 4f       	sbci	r29, 0xFF	; 255
   13cd8:	0f b6       	in	r0, 0x3f	; 63
   13cda:	f8 94       	cli
   13cdc:	de bf       	out	0x3e, r29	; 62
   13cde:	0f be       	out	0x3f, r0	; 63
   13ce0:	cd bf       	out	0x3d, r28	; 61
   13ce2:	df 91       	pop	r29
   13ce4:	cf 91       	pop	r28
   13ce6:	1f 91       	pop	r17
   13ce8:	0f 91       	pop	r16
   13cea:	ef 90       	pop	r14
   13cec:	df 90       	pop	r13
   13cee:	cf 90       	pop	r12
   13cf0:	bf 90       	pop	r11
   13cf2:	af 90       	pop	r10
   13cf4:	9f 90       	pop	r9
   13cf6:	8f 90       	pop	r8
   13cf8:	08 95       	ret

00013cfa <print_str_P>:
/// @brief Display Configuration File string
/// @param *str: title
/// @param *arg: string
/// @return  void
void print_str_P(__memx const char *str, char *arg)
{
   13cfa:	cf 92       	push	r12
   13cfc:	df 92       	push	r13
   13cfe:	ef 92       	push	r14
   13d00:	0f 93       	push	r16
   13d02:	1f 93       	push	r17
   13d04:	cf 93       	push	r28
   13d06:	df 93       	push	r29
   13d08:	cd b7       	in	r28, 0x3d	; 61
   13d0a:	de b7       	in	r29, 0x3e	; 62
   13d0c:	c7 54       	subi	r28, 0x47	; 71
   13d0e:	d1 09       	sbc	r29, r1
   13d10:	0f b6       	in	r0, 0x3f	; 63
   13d12:	f8 94       	cli
   13d14:	de bf       	out	0x3e, r29	; 62
   13d16:	0f be       	out	0x3f, r0	; 63
   13d18:	cd bf       	out	0x3d, r28	; 61
   13d1a:	6b 01       	movw	r12, r22
   13d1c:	e8 2e       	mov	r14, r24
   13d1e:	8a 01       	movw	r16, r20
   13d20:	de 01       	movw	r26, r28
   13d22:	18 96       	adiw	r26, 0x08	; 8
    char tmp[64];
    int i=0;
   13d24:	80 e0       	ldi	r24, 0x00	; 0
   13d26:	90 e0       	ldi	r25, 0x00	; 0
   13d28:	9d 01       	movw	r18, r26
    while( *str && i < 62)
   13d2a:	f6 01       	movw	r30, r12
   13d2c:	5e 2d       	mov	r21, r14
   13d2e:	0e 94 bd e4 	call	0x1c97a	; 0x1c97a <__xload_1>
   13d32:	66 23       	and	r22, r22
   13d34:	51 f0       	breq	.+20     	; 0x13d4a <print_str_P+0x50>
   13d36:	8e 33       	cpi	r24, 0x3E	; 62
   13d38:	91 05       	cpc	r25, r1
   13d3a:	39 f0       	breq	.+14     	; 0x13d4a <print_str_P+0x50>
        tmp[i++] = *str++;
   13d3c:	01 96       	adiw	r24, 0x01	; 1
   13d3e:	4f ef       	ldi	r20, 0xFF	; 255
   13d40:	c4 1a       	sub	r12, r20
   13d42:	d4 0a       	sbc	r13, r20
   13d44:	e4 0a       	sbc	r14, r20
   13d46:	6d 93       	st	X+, r22
   13d48:	f0 cf       	rjmp	.-32     	; 0x13d2a <print_str_P+0x30>
    tmp[i++] = 0;
   13d4a:	f9 01       	movw	r30, r18
   13d4c:	e8 0f       	add	r30, r24
   13d4e:	f9 1f       	adc	r31, r25
   13d50:	10 82       	st	Z, r1
    printf("    %-25s = \"%s\"\n", tmp, arg);   
   13d52:	ed b7       	in	r30, 0x3d	; 61
   13d54:	fe b7       	in	r31, 0x3e	; 62
   13d56:	17 83       	std	Z+7, r17	; 0x07
   13d58:	06 83       	std	Z+6, r16	; 0x06
   13d5a:	35 83       	std	Z+5, r19	; 0x05
   13d5c:	24 83       	std	Z+4, r18	; 0x04
   13d5e:	8f e2       	ldi	r24, 0x2F	; 47
   13d60:	98 e1       	ldi	r25, 0x18	; 24
   13d62:	a0 e0       	ldi	r26, 0x00	; 0
   13d64:	81 83       	std	Z+1, r24	; 0x01
   13d66:	92 83       	std	Z+2, r25	; 0x02
   13d68:	a3 83       	std	Z+3, r26	; 0x03
   13d6a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
}
   13d6e:	c9 5b       	subi	r28, 0xB9	; 185
   13d70:	df 4f       	sbci	r29, 0xFF	; 255
   13d72:	0f b6       	in	r0, 0x3f	; 63
   13d74:	f8 94       	cli
   13d76:	de bf       	out	0x3e, r29	; 62
   13d78:	0f be       	out	0x3f, r0	; 63
   13d7a:	cd bf       	out	0x3d, r28	; 61
   13d7c:	df 91       	pop	r29
   13d7e:	cf 91       	pop	r28
   13d80:	1f 91       	pop	r17
   13d82:	0f 91       	pop	r16
   13d84:	ef 90       	pop	r14
   13d86:	df 90       	pop	r13
   13d88:	cf 90       	pop	r12
   13d8a:	08 95       	ret

00013d8c <display_Addresses>:

/// ===============================================
/// @brief Display Configuration device address saummary
/// @return  void
void display_Addresses()
{
   13d8c:	2f 92       	push	r2
   13d8e:	3f 92       	push	r3
   13d90:	4f 92       	push	r4
   13d92:	6f 92       	push	r6
   13d94:	7f 92       	push	r7
   13d96:	8f 92       	push	r8
   13d98:	af 92       	push	r10
   13d9a:	bf 92       	push	r11
   13d9c:	cf 92       	push	r12
   13d9e:	df 92       	push	r13
   13da0:	ef 92       	push	r14
   13da2:	0f 93       	push	r16
   13da4:	1f 93       	push	r17
   13da6:	cf 93       	push	r28
   13da8:	df 93       	push	r29
   13daa:	cd b7       	in	r28, 0x3d	; 61
   13dac:	de b7       	in	r29, 0x3e	; 62
   13dae:	60 97       	sbiw	r28, 0x10	; 16
   13db0:	0f b6       	in	r0, 0x3f	; 63
   13db2:	f8 94       	cli
   13db4:	de bf       	out	0x3e, r29	; 62
   13db6:	0f be       	out	0x3f, r0	; 63
   13db8:	cd bf       	out	0x3d, r28	; 61
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
   13dba:	8d e0       	ldi	r24, 0x0D	; 13
   13dbc:	98 e1       	ldi	r25, 0x18	; 24
   13dbe:	a0 e0       	ldi	r26, 0x00	; 0
   13dc0:	ed b7       	in	r30, 0x3d	; 61
   13dc2:	fe b7       	in	r31, 0x3e	; 62
   13dc4:	81 83       	std	Z+1, r24	; 0x01
   13dc6:	92 83       	std	Z+2, r25	; 0x02
   13dc8:	a3 83       	std	Z+3, r26	; 0x03
   13dca:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   13dce:	0c e8       	ldi	r16, 0x8C	; 140
   13dd0:	1e e1       	ldi	r17, 0x1E	; 30
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   13dd2:	8c e6       	ldi	r24, 0x6C	; 108
   13dd4:	97 e1       	ldi	r25, 0x17	; 23
   13dd6:	9c 01       	movw	r18, r24
   13dd8:	40 e0       	ldi	r20, 0x00	; 0
   13dda:	2e 83       	std	Y+6, r18	; 0x06
   13ddc:	3f 83       	std	Y+7, r19	; 0x07
   13dde:	48 87       	std	Y+8, r20	; 0x08
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   13de0:	85 e5       	ldi	r24, 0x55	; 85
   13de2:	97 e1       	ldi	r25, 0x17	; 23
   13de4:	9c 01       	movw	r18, r24
   13de6:	40 e0       	ldi	r20, 0x00	; 0
   13de8:	29 87       	std	Y+9, r18	; 0x09
   13dea:	3a 87       	std	Y+10, r19	; 0x0a
   13dec:	4b 87       	std	Y+11, r20	; 0x0b
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   13dee:	8e e3       	ldi	r24, 0x3E	; 62
   13df0:	97 e1       	ldi	r25, 0x17	; 23
   13df2:	6c 01       	movw	r12, r24
   13df4:	e1 2c       	mov	r14, r1
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   13df6:	81 eb       	ldi	r24, 0xB1	; 177
   13df8:	97 e1       	ldi	r25, 0x17	; 23
   13dfa:	3c 01       	movw	r6, r24
   13dfc:	81 2c       	mov	r8, r1
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   13dfe:	8a e9       	ldi	r24, 0x9A	; 154
   13e00:	97 e1       	ldi	r25, 0x17	; 23
   13e02:	1c 01       	movw	r2, r24
   13e04:	41 2c       	mov	r4, r1
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   13e06:	83 e8       	ldi	r24, 0x83	; 131
   13e08:	97 e1       	ldi	r25, 0x17	; 23
   13e0a:	9c 01       	movw	r18, r24
   13e0c:	40 e0       	ldi	r20, 0x00	; 0
   13e0e:	2c 87       	std	Y+12, r18	; 0x0c
   13e10:	3d 87       	std	Y+13, r19	; 0x0d
   13e12:	4e 87       	std	Y+14, r20	; 0x0e
            continue;
        address = Devices[i].ADDRESS;

        if(Devices[i].TYPE == SS80_TYPE)
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   13e14:	86 ef       	ldi	r24, 0xF6	; 246
   13e16:	a8 2e       	mov	r10, r24
   13e18:	87 e1       	ldi	r24, 0x17	; 23
   13e1a:	b8 2e       	mov	r11, r24
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13e1c:	f8 01       	movw	r30, r16
   13e1e:	80 81       	ld	r24, Z
   13e20:	88 23       	and	r24, r24
   13e22:	09 f4       	brne	.+2      	; 0x13e26 <display_Addresses+0x9a>
   13e24:	91 c0       	rjmp	.+290    	; 0x13f48 <display_Addresses+0x1bc>
            continue;
        address = Devices[i].ADDRESS;
   13e26:	f1 81       	ldd	r31, Z+1	; 0x01
   13e28:	2f 2f       	mov	r18, r31
   13e2a:	30 e0       	ldi	r19, 0x00	; 0
   13e2c:	38 8b       	std	Y+16, r19	; 0x10
   13e2e:	2f 87       	std	Y+15, r18	; 0x0f

        if(Devices[i].TYPE == SS80_TYPE)
   13e30:	83 30       	cpi	r24, 0x03	; 3
   13e32:	69 f5       	brne	.+90     	; 0x13e8e <display_Addresses+0x102>
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   13e34:	c9 01       	movw	r24, r18
   13e36:	80 96       	adiw	r24, 0x20	; 32
   13e38:	ed b7       	in	r30, 0x3d	; 61
   13e3a:	fe b7       	in	r31, 0x3e	; 62
   13e3c:	95 83       	std	Z+5, r25	; 0x05
   13e3e:	84 83       	std	Z+4, r24	; 0x04
   13e40:	c5 01       	movw	r24, r10
   13e42:	a0 e0       	ldi	r26, 0x00	; 0
   13e44:	81 83       	std	Z+1, r24	; 0x01
   13e46:	92 83       	std	Z+2, r25	; 0x02
   13e48:	a3 83       	std	Z+3, r26	; 0x03
   13e4a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            printf("  SS80_MTA    = %02XH\n",BASE_MTA + address );
   13e4e:	8f 85       	ldd	r24, Y+15	; 0x0f
   13e50:	98 89       	ldd	r25, Y+16	; 0x10
   13e52:	80 5c       	subi	r24, 0xC0	; 192
   13e54:	9f 4f       	sbci	r25, 0xFF	; 255
   13e56:	ed b7       	in	r30, 0x3d	; 61
   13e58:	fe b7       	in	r31, 0x3e	; 62
   13e5a:	95 83       	std	Z+5, r25	; 0x05
   13e5c:	84 83       	std	Z+4, r24	; 0x04
   13e5e:	8f ed       	ldi	r24, 0xDF	; 223
   13e60:	97 e1       	ldi	r25, 0x17	; 23
   13e62:	a0 e0       	ldi	r26, 0x00	; 0
   13e64:	81 83       	std	Z+1, r24	; 0x01
   13e66:	92 83       	std	Z+2, r25	; 0x02
   13e68:	a3 83       	std	Z+3, r26	; 0x03
   13e6a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
   13e6e:	8f 85       	ldd	r24, Y+15	; 0x0f
   13e70:	98 89       	ldd	r25, Y+16	; 0x10
   13e72:	80 5a       	subi	r24, 0xA0	; 160
   13e74:	9f 4f       	sbci	r25, 0xFF	; 255
   13e76:	ed b7       	in	r30, 0x3d	; 61
   13e78:	fe b7       	in	r31, 0x3e	; 62
   13e7a:	95 83       	std	Z+5, r25	; 0x05
   13e7c:	84 83       	std	Z+4, r24	; 0x04
   13e7e:	88 ec       	ldi	r24, 0xC8	; 200
   13e80:	97 e1       	ldi	r25, 0x17	; 23
   13e82:	a0 e0       	ldi	r26, 0x00	; 0
   13e84:	81 83       	std	Z+1, r24	; 0x01
   13e86:	92 83       	std	Z+2, r25	; 0x02
   13e88:	a3 83       	std	Z+3, r26	; 0x03
   13e8a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   13e8e:	f8 01       	movw	r30, r16
   13e90:	80 81       	ld	r24, Z
   13e92:	81 30       	cpi	r24, 0x01	; 1
   13e94:	49 f5       	brne	.+82     	; 0x13ee8 <display_Addresses+0x15c>
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   13e96:	8f 85       	ldd	r24, Y+15	; 0x0f
   13e98:	98 89       	ldd	r25, Y+16	; 0x10
   13e9a:	80 96       	adiw	r24, 0x20	; 32
   13e9c:	ed b7       	in	r30, 0x3d	; 61
   13e9e:	fe b7       	in	r31, 0x3e	; 62
   13ea0:	95 83       	std	Z+5, r25	; 0x05
   13ea2:	84 83       	std	Z+4, r24	; 0x04
   13ea4:	61 82       	std	Z+1, r6	; 0x01
   13ea6:	72 82       	std	Z+2, r7	; 0x02
   13ea8:	83 82       	std	Z+3, r8	; 0x03
   13eaa:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   13eae:	8f 85       	ldd	r24, Y+15	; 0x0f
   13eb0:	98 89       	ldd	r25, Y+16	; 0x10
   13eb2:	80 5c       	subi	r24, 0xC0	; 192
   13eb4:	9f 4f       	sbci	r25, 0xFF	; 255
   13eb6:	ed b7       	in	r30, 0x3d	; 61
   13eb8:	fe b7       	in	r31, 0x3e	; 62
   13eba:	95 83       	std	Z+5, r25	; 0x05
   13ebc:	84 83       	std	Z+4, r24	; 0x04
   13ebe:	21 82       	std	Z+1, r2	; 0x01
   13ec0:	32 82       	std	Z+2, r3	; 0x02
   13ec2:	43 82       	std	Z+3, r4	; 0x03
   13ec4:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   13ec8:	8f 85       	ldd	r24, Y+15	; 0x0f
   13eca:	98 89       	ldd	r25, Y+16	; 0x10
   13ecc:	80 5a       	subi	r24, 0xA0	; 160
   13ece:	9f 4f       	sbci	r25, 0xFF	; 255
   13ed0:	ed b7       	in	r30, 0x3d	; 61
   13ed2:	fe b7       	in	r31, 0x3e	; 62
   13ed4:	95 83       	std	Z+5, r25	; 0x05
   13ed6:	84 83       	std	Z+4, r24	; 0x04
   13ed8:	2c 85       	ldd	r18, Y+12	; 0x0c
   13eda:	3d 85       	ldd	r19, Y+13	; 0x0d
   13edc:	4e 85       	ldd	r20, Y+14	; 0x0e
   13ede:	21 83       	std	Z+1, r18	; 0x01
   13ee0:	32 83       	std	Z+2, r19	; 0x02
   13ee2:	43 83       	std	Z+3, r20	; 0x03
   13ee4:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
   13ee8:	f8 01       	movw	r30, r16
   13eea:	80 81       	ld	r24, Z
   13eec:	84 30       	cpi	r24, 0x04	; 4
   13eee:	61 f5       	brne	.+88     	; 0x13f48 <display_Addresses+0x1bc>
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   13ef0:	8f 85       	ldd	r24, Y+15	; 0x0f
   13ef2:	98 89       	ldd	r25, Y+16	; 0x10
   13ef4:	80 96       	adiw	r24, 0x20	; 32
   13ef6:	ed b7       	in	r30, 0x3d	; 61
   13ef8:	fe b7       	in	r31, 0x3e	; 62
   13efa:	95 83       	std	Z+5, r25	; 0x05
   13efc:	84 83       	std	Z+4, r24	; 0x04
   13efe:	2e 81       	ldd	r18, Y+6	; 0x06
   13f00:	3f 81       	ldd	r19, Y+7	; 0x07
   13f02:	48 85       	ldd	r20, Y+8	; 0x08
   13f04:	21 83       	std	Z+1, r18	; 0x01
   13f06:	32 83       	std	Z+2, r19	; 0x02
   13f08:	43 83       	std	Z+3, r20	; 0x03
   13f0a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   13f0e:	8f 85       	ldd	r24, Y+15	; 0x0f
   13f10:	98 89       	ldd	r25, Y+16	; 0x10
   13f12:	80 5c       	subi	r24, 0xC0	; 192
   13f14:	9f 4f       	sbci	r25, 0xFF	; 255
   13f16:	ed b7       	in	r30, 0x3d	; 61
   13f18:	fe b7       	in	r31, 0x3e	; 62
   13f1a:	95 83       	std	Z+5, r25	; 0x05
   13f1c:	84 83       	std	Z+4, r24	; 0x04
   13f1e:	29 85       	ldd	r18, Y+9	; 0x09
   13f20:	3a 85       	ldd	r19, Y+10	; 0x0a
   13f22:	4b 85       	ldd	r20, Y+11	; 0x0b
   13f24:	21 83       	std	Z+1, r18	; 0x01
   13f26:	32 83       	std	Z+2, r19	; 0x02
   13f28:	43 83       	std	Z+3, r20	; 0x03
   13f2a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   13f2e:	2f 85       	ldd	r18, Y+15	; 0x0f
   13f30:	38 89       	ldd	r19, Y+16	; 0x10
   13f32:	20 5a       	subi	r18, 0xA0	; 160
   13f34:	3f 4f       	sbci	r19, 0xFF	; 255
   13f36:	ed b7       	in	r30, 0x3d	; 61
   13f38:	fe b7       	in	r31, 0x3e	; 62
   13f3a:	35 83       	std	Z+5, r19	; 0x05
   13f3c:	24 83       	std	Z+4, r18	; 0x04
   13f3e:	c1 82       	std	Z+1, r12	; 0x01
   13f40:	d2 82       	std	Z+2, r13	; 0x02
   13f42:	e3 82       	std	Z+3, r14	; 0x03
   13f44:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   13f48:	05 5d       	subi	r16, 0xD5	; 213
   13f4a:	1f 4f       	sbci	r17, 0xFF	; 255
void display_Addresses()
{
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   13f4c:	f0 e2       	ldi	r31, 0x20	; 32
   13f4e:	00 39       	cpi	r16, 0x90	; 144
   13f50:	1f 07       	cpc	r17, r31
   13f52:	09 f0       	breq	.+2      	; 0x13f56 <display_Addresses+0x1ca>
   13f54:	63 cf       	rjmp	.-314    	; 0x13e1c <display_Addresses+0x90>
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
        }
    }
    printf("\n");
   13f56:	8c e3       	ldi	r24, 0x3C	; 60
   13f58:	97 e1       	ldi	r25, 0x17	; 23
   13f5a:	a0 e0       	ldi	r26, 0x00	; 0
   13f5c:	ed b7       	in	r30, 0x3d	; 61
   13f5e:	fe b7       	in	r31, 0x3e	; 62
   13f60:	81 83       	std	Z+1, r24	; 0x01
   13f62:	92 83       	std	Z+2, r25	; 0x02
   13f64:	a3 83       	std	Z+3, r26	; 0x03
   13f66:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
}
   13f6a:	60 96       	adiw	r28, 0x10	; 16
   13f6c:	0f b6       	in	r0, 0x3f	; 63
   13f6e:	f8 94       	cli
   13f70:	de bf       	out	0x3e, r29	; 62
   13f72:	0f be       	out	0x3f, r0	; 63
   13f74:	cd bf       	out	0x3d, r28	; 61
   13f76:	df 91       	pop	r29
   13f78:	cf 91       	pop	r28
   13f7a:	1f 91       	pop	r17
   13f7c:	0f 91       	pop	r16
   13f7e:	ef 90       	pop	r14
   13f80:	df 90       	pop	r13
   13f82:	cf 90       	pop	r12
   13f84:	bf 90       	pop	r11
   13f86:	af 90       	pop	r10
   13f88:	8f 90       	pop	r8
   13f8a:	7f 90       	pop	r7
   13f8c:	6f 90       	pop	r6
   13f8e:	4f 90       	pop	r4
   13f90:	3f 90       	pop	r3
   13f92:	2f 90       	pop	r2
   13f94:	08 95       	ret

00013f96 <display_Config>:

/// ===============================================
/// @brief Display current Configuration File values
/// @return  void
void display_Config()
{
   13f96:	2f 92       	push	r2
   13f98:	3f 92       	push	r3
   13f9a:	4f 92       	push	r4
   13f9c:	6f 92       	push	r6
   13f9e:	7f 92       	push	r7
   13fa0:	8f 92       	push	r8
   13fa2:	af 92       	push	r10
   13fa4:	bf 92       	push	r11
   13fa6:	cf 92       	push	r12
   13fa8:	df 92       	push	r13
   13faa:	ef 92       	push	r14
   13fac:	0f 93       	push	r16
   13fae:	1f 93       	push	r17
   13fb0:	cf 93       	push	r28
   13fb2:	df 93       	push	r29
   13fb4:	cd b7       	in	r28, 0x3d	; 61
   13fb6:	de b7       	in	r29, 0x3e	; 62
   13fb8:	60 97       	sbiw	r28, 0x10	; 16
   13fba:	0f b6       	in	r0, 0x3f	; 63
   13fbc:	f8 94       	cli
   13fbe:	de bf       	out	0x3e, r29	; 62
   13fc0:	0f be       	out	0x3f, r0	; 63
   13fc2:	cd bf       	out	0x3d, r28	; 61
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
   13fc4:	8c e1       	ldi	r24, 0x1C	; 28
   13fc6:	97 e1       	ldi	r25, 0x17	; 23
   13fc8:	a0 e0       	ldi	r26, 0x00	; 0
   13fca:	ed b7       	in	r30, 0x3d	; 61
   13fcc:	fe b7       	in	r31, 0x3e	; 62
   13fce:	81 83       	std	Z+1, r24	; 0x01
   13fd0:	92 83       	std	Z+2, r25	; 0x02
   13fd2:	a3 83       	std	Z+3, r26	; 0x03
   13fd4:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   13fd8:	0c e8       	ldi	r16, 0x8C	; 140
   13fda:	1e e1       	ldi	r17, 0x1E	; 30
            printf("PRINTER\n");
            printf("  CONFIG\n");
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
			printf("  END\n");
        }
		printf("END\n");
   13fdc:	82 e9       	ldi	r24, 0x92	; 146
   13fde:	94 e1       	ldi	r25, 0x14	; 20
   13fe0:	9c 01       	movw	r18, r24
   13fe2:	40 e0       	ldi	r20, 0x00	; 0
   13fe4:	2e 83       	std	Y+6, r18	; 0x06
   13fe6:	3f 83       	std	Y+7, r19	; 0x07
   13fe8:	48 87       	std	Y+8, r20	; 0x08
		printf("\n");
   13fea:	80 e9       	ldi	r24, 0x90	; 144
   13fec:	94 e1       	ldi	r25, 0x14	; 20
   13fee:	9c 01       	movw	r18, r24
   13ff0:	40 e0       	ldi	r20, 0x00	; 0
   13ff2:	29 87       	std	Y+9, r18	; 0x09
   13ff4:	3a 87       	std	Y+10, r19	; 0x0a
   13ff6:	4b 87       	std	Y+11, r20	; 0x0b

        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;

            printf("PRINTER\n");
   13ff8:	80 eb       	ldi	r24, 0xB0	; 176
   13ffa:	94 e1       	ldi	r25, 0x14	; 20
   13ffc:	9c 01       	movw	r18, r24
   13ffe:	40 e0       	ldi	r20, 0x00	; 0
   14000:	2c 87       	std	Y+12, r18	; 0x0c
   14002:	3d 87       	std	Y+13, r19	; 0x0d
   14004:	4e 87       	std	Y+14, r20	; 0x0e
            printf("  CONFIG\n");
   14006:	86 ea       	ldi	r24, 0xA6	; 166
   14008:	94 e1       	ldi	r25, 0x14	; 20
   1400a:	1c 01       	movw	r2, r24
   1400c:	41 2c       	mov	r4, r1
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   1400e:	8e e9       	ldi	r24, 0x9E	; 158
   14010:	94 e1       	ldi	r25, 0x14	; 20
   14012:	6c 01       	movw	r12, r24
   14014:	e1 2c       	mov	r14, r1
			printf("  END\n");
   14016:	87 e9       	ldi	r24, 0x97	; 151
   14018:	94 e1       	ldi	r25, 0x14	; 20
   1401a:	3c 01       	movw	r6, r24
   1401c:	81 2c       	mov	r8, r1
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;

            printf("AMIGO %s\n", Devices[i].model);
   1401e:	8d e5       	ldi	r24, 0x5D	; 93
   14020:	a8 2e       	mov	r10, r24
   14022:	85 e1       	ldi	r24, 0x15	; 21
   14024:	b8 2e       	mov	r11, r24
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   14026:	f8 01       	movw	r30, r16
   14028:	80 81       	ld	r24, Z
   1402a:	88 23       	and	r24, r24
   1402c:	09 f4       	brne	.+2      	; 0x14030 <display_Config+0x9a>
   1402e:	90 c2       	rjmp	.+1312   	; 0x14550 <display_Config+0x5ba>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   14030:	83 30       	cpi	r24, 0x03	; 3
   14032:	09 f0       	breq	.+2      	; 0x14036 <display_Config+0xa0>
   14034:	84 c1       	rjmp	.+776    	; 0x1433e <display_Config+0x3a8>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   14036:	27 a1       	ldd	r18, Z+39	; 0x27
   14038:	30 a5       	ldd	r19, Z+40	; 0x28
   1403a:	38 8b       	std	Y+16, r19	; 0x10
   1403c:	2f 87       	std	Y+15, r18	; 0x0f

            printf("SS80 %s\n", Devices[i].model);
   1403e:	c8 01       	movw	r24, r16
   14040:	07 96       	adiw	r24, 0x07	; 7
   14042:	ed b7       	in	r30, 0x3d	; 61
   14044:	fe b7       	in	r31, 0x3e	; 62
   14046:	95 83       	std	Z+5, r25	; 0x05
   14048:	84 83       	std	Z+4, r24	; 0x04
   1404a:	83 e1       	ldi	r24, 0x13	; 19
   1404c:	97 e1       	ldi	r25, 0x17	; 23
   1404e:	a0 e0       	ldi	r26, 0x00	; 0
   14050:	81 83       	std	Z+1, r24	; 0x01
   14052:	92 83       	std	Z+2, r25	; 0x02
   14054:	a3 83       	std	Z+3, r26	; 0x03
   14056:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
			printf("  # HP85 BASIC ADDRESS :D7%d0\n", (int) SS80p->HEADER.ADDRESS);
   1405a:	ef 85       	ldd	r30, Y+15	; 0x0f
   1405c:	f8 89       	ldd	r31, Y+16	; 0x10
   1405e:	80 81       	ld	r24, Z
   14060:	90 e0       	ldi	r25, 0x00	; 0
   14062:	ed b7       	in	r30, 0x3d	; 61
   14064:	fe b7       	in	r31, 0x3e	; 62
   14066:	95 83       	std	Z+5, r25	; 0x05
   14068:	84 83       	std	Z+4, r24	; 0x04
   1406a:	84 ef       	ldi	r24, 0xF4	; 244
   1406c:	96 e1       	ldi	r25, 0x16	; 22
   1406e:	a0 e0       	ldi	r26, 0x00	; 0
   14070:	81 83       	std	Z+1, r24	; 0x01
   14072:	92 83       	std	Z+2, r25	; 0x02
   14074:	a3 83       	std	Z+3, r26	; 0x03
   14076:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            printf("  CONFIG\n");
   1407a:	8a ee       	ldi	r24, 0xEA	; 234
   1407c:	96 e1       	ldi	r25, 0x16	; 22
   1407e:	a0 e0       	ldi	r26, 0x00	; 0
   14080:	ed b7       	in	r30, 0x3d	; 61
   14082:	fe b7       	in	r31, 0x3e	; 62
   14084:	81 83       	std	Z+1, r24	; 0x01
   14086:	92 83       	std	Z+2, r25	; 0x02
   14088:	a3 83       	std	Z+3, r26	; 0x03
   1408a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
                print_var("ADDRESS", (uint32_t) SS80p->HEADER.ADDRESS);
   1408e:	ef 85       	ldd	r30, Y+15	; 0x0f
   14090:	f8 89       	ldd	r31, Y+16	; 0x10
   14092:	20 81       	ld	r18, Z
   14094:	30 e0       	ldi	r19, 0x00	; 0
   14096:	40 e0       	ldi	r20, 0x00	; 0
   14098:	50 e0       	ldi	r21, 0x00	; 0
   1409a:	62 ee       	ldi	r22, 0xE2	; 226
   1409c:	76 e1       	ldi	r23, 0x16	; 22
   1409e:	80 e0       	ldi	r24, 0x00	; 0
   140a0:	d4 dd       	rcall	.-1112   	; 0x13c4a <print_var_P>
                print_var("PPR", (uint32_t) SS80p->HEADER.PPR);
   140a2:	ef 85       	ldd	r30, Y+15	; 0x0f
   140a4:	f8 89       	ldd	r31, Y+16	; 0x10
   140a6:	21 81       	ldd	r18, Z+1	; 0x01
   140a8:	30 e0       	ldi	r19, 0x00	; 0
   140aa:	40 e0       	ldi	r20, 0x00	; 0
   140ac:	50 e0       	ldi	r21, 0x00	; 0
   140ae:	6e ed       	ldi	r22, 0xDE	; 222
   140b0:	76 e1       	ldi	r23, 0x16	; 22
   140b2:	80 e0       	ldi	r24, 0x00	; 0
   140b4:	ca dd       	rcall	.-1132   	; 0x13c4a <print_var_P>
                print_str("FILE", SS80p->HEADER.NAME);
   140b6:	ef 85       	ldd	r30, Y+15	; 0x0f
   140b8:	f8 89       	ldd	r31, Y+16	; 0x10
   140ba:	42 81       	ldd	r20, Z+2	; 0x02
   140bc:	53 81       	ldd	r21, Z+3	; 0x03
   140be:	69 ed       	ldi	r22, 0xD9	; 217
   140c0:	76 e1       	ldi	r23, 0x16	; 22
   140c2:	80 e0       	ldi	r24, 0x00	; 0
   140c4:	1a de       	rcall	.-972    	; 0x13cfa <print_str_P>
			printf("  END\n");
   140c6:	82 ed       	ldi	r24, 0xD2	; 210
   140c8:	96 e1       	ldi	r25, 0x16	; 22
   140ca:	a0 e0       	ldi	r26, 0x00	; 0
   140cc:	ed b7       	in	r30, 0x3d	; 61
   140ce:	fe b7       	in	r31, 0x3e	; 62
   140d0:	81 83       	std	Z+1, r24	; 0x01
   140d2:	92 83       	std	Z+2, r25	; 0x02
   140d4:	a3 83       	std	Z+3, r26	; 0x03
   140d6:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            printf("  HEADER\n");
   140da:	88 ec       	ldi	r24, 0xC8	; 200
   140dc:	96 e1       	ldi	r25, 0x16	; 22
   140de:	a0 e0       	ldi	r26, 0x00	; 0
   140e0:	ed b7       	in	r30, 0x3d	; 61
   140e2:	fe b7       	in	r31, 0x3e	; 62
   140e4:	81 83       	std	Z+1, r24	; 0x01
   140e6:	92 83       	std	Z+2, r25	; 0x02
   140e8:	a3 83       	std	Z+3, r26	; 0x03
   140ea:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
                print_var("ID", (uint32_t) SS80p->CONFIG.ID);
   140ee:	ef 85       	ldd	r30, Y+15	; 0x0f
   140f0:	f8 89       	ldd	r31, Y+16	; 0x10
   140f2:	24 81       	ldd	r18, Z+4	; 0x04
   140f4:	35 81       	ldd	r19, Z+5	; 0x05
   140f6:	40 e0       	ldi	r20, 0x00	; 0
   140f8:	50 e0       	ldi	r21, 0x00	; 0
   140fa:	65 ec       	ldi	r22, 0xC5	; 197
   140fc:	76 e1       	ldi	r23, 0x16	; 22
   140fe:	80 e0       	ldi	r24, 0x00	; 0
   14100:	a4 dd       	rcall	.-1208   	; 0x13c4a <print_var_P>
			printf("  END\n");
   14102:	8e eb       	ldi	r24, 0xBE	; 190
   14104:	96 e1       	ldi	r25, 0x16	; 22
   14106:	a0 e0       	ldi	r26, 0x00	; 0
   14108:	ed b7       	in	r30, 0x3d	; 61
   1410a:	fe b7       	in	r31, 0x3e	; 62
   1410c:	81 83       	std	Z+1, r24	; 0x01
   1410e:	92 83       	std	Z+2, r25	; 0x02
   14110:	a3 83       	std	Z+3, r26	; 0x03
   14112:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            printf("  CONTROLLER\n");
   14116:	80 eb       	ldi	r24, 0xB0	; 176
   14118:	96 e1       	ldi	r25, 0x16	; 22
   1411a:	a0 e0       	ldi	r26, 0x00	; 0
   1411c:	ed b7       	in	r30, 0x3d	; 61
   1411e:	fe b7       	in	r31, 0x3e	; 62
   14120:	81 83       	std	Z+1, r24	; 0x01
   14122:	92 83       	std	Z+2, r25	; 0x02
   14124:	a3 83       	std	Z+3, r26	; 0x03
   14126:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
                print_var("UNITS_INSTALLED", (uint32_t) SS80p->CONTROLLER.UNITS_INSTALLED);
   1412a:	ef 85       	ldd	r30, Y+15	; 0x0f
   1412c:	f8 89       	ldd	r31, Y+16	; 0x10
   1412e:	26 81       	ldd	r18, Z+6	; 0x06
   14130:	37 81       	ldd	r19, Z+7	; 0x07
   14132:	40 e0       	ldi	r20, 0x00	; 0
   14134:	50 e0       	ldi	r21, 0x00	; 0
   14136:	60 ea       	ldi	r22, 0xA0	; 160
   14138:	76 e1       	ldi	r23, 0x16	; 22
   1413a:	80 e0       	ldi	r24, 0x00	; 0
   1413c:	86 dd       	rcall	.-1268   	; 0x13c4a <print_var_P>
                print_var("TRANSFER_RATE", (uint32_t)  SS80p->CONTROLLER.TRANSFER_RATE);
   1413e:	ef 85       	ldd	r30, Y+15	; 0x0f
   14140:	f8 89       	ldd	r31, Y+16	; 0x10
   14142:	20 85       	ldd	r18, Z+8	; 0x08
   14144:	31 85       	ldd	r19, Z+9	; 0x09
   14146:	40 e0       	ldi	r20, 0x00	; 0
   14148:	50 e0       	ldi	r21, 0x00	; 0
   1414a:	62 e9       	ldi	r22, 0x92	; 146
   1414c:	76 e1       	ldi	r23, 0x16	; 22
   1414e:	80 e0       	ldi	r24, 0x00	; 0
   14150:	7c dd       	rcall	.-1288   	; 0x13c4a <print_var_P>
                print_var("TYPE", (uint32_t)  SS80p->CONTROLLER.TYPE);
   14152:	ef 85       	ldd	r30, Y+15	; 0x0f
   14154:	f8 89       	ldd	r31, Y+16	; 0x10
   14156:	22 85       	ldd	r18, Z+10	; 0x0a
   14158:	30 e0       	ldi	r19, 0x00	; 0
   1415a:	40 e0       	ldi	r20, 0x00	; 0
   1415c:	50 e0       	ldi	r21, 0x00	; 0
   1415e:	6d e8       	ldi	r22, 0x8D	; 141
   14160:	76 e1       	ldi	r23, 0x16	; 22
   14162:	80 e0       	ldi	r24, 0x00	; 0
   14164:	72 dd       	rcall	.-1308   	; 0x13c4a <print_var_P>
			printf("  END\n");
   14166:	86 e8       	ldi	r24, 0x86	; 134
   14168:	96 e1       	ldi	r25, 0x16	; 22
   1416a:	a0 e0       	ldi	r26, 0x00	; 0
   1416c:	ed b7       	in	r30, 0x3d	; 61
   1416e:	fe b7       	in	r31, 0x3e	; 62
   14170:	81 83       	std	Z+1, r24	; 0x01
   14172:	92 83       	std	Z+2, r25	; 0x02
   14174:	a3 83       	std	Z+3, r26	; 0x03
   14176:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            printf("  UNIT\n");
   1417a:	8e e7       	ldi	r24, 0x7E	; 126
   1417c:	96 e1       	ldi	r25, 0x16	; 22
   1417e:	a0 e0       	ldi	r26, 0x00	; 0
   14180:	ed b7       	in	r30, 0x3d	; 61
   14182:	fe b7       	in	r31, 0x3e	; 62
   14184:	81 83       	std	Z+1, r24	; 0x01
   14186:	92 83       	std	Z+2, r25	; 0x02
   14188:	a3 83       	std	Z+3, r26	; 0x03
   1418a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
                print_var("UNIT_TYPE", (uint32_t)SS80p->UNIT.UNIT_TYPE);
   1418e:	ef 85       	ldd	r30, Y+15	; 0x0f
   14190:	f8 89       	ldd	r31, Y+16	; 0x10
   14192:	23 85       	ldd	r18, Z+11	; 0x0b
   14194:	30 e0       	ldi	r19, 0x00	; 0
   14196:	40 e0       	ldi	r20, 0x00	; 0
   14198:	50 e0       	ldi	r21, 0x00	; 0
   1419a:	64 e7       	ldi	r22, 0x74	; 116
   1419c:	76 e1       	ldi	r23, 0x16	; 22
   1419e:	80 e0       	ldi	r24, 0x00	; 0
   141a0:	54 dd       	rcall	.-1368   	; 0x13c4a <print_var_P>
                print_var("DEVICE_NUMBER", (uint32_t)SS80p->UNIT.DEVICE_NUMBER);
   141a2:	ef 85       	ldd	r30, Y+15	; 0x0f
   141a4:	f8 89       	ldd	r31, Y+16	; 0x10
   141a6:	24 85       	ldd	r18, Z+12	; 0x0c
   141a8:	35 85       	ldd	r19, Z+13	; 0x0d
   141aa:	46 85       	ldd	r20, Z+14	; 0x0e
   141ac:	57 85       	ldd	r21, Z+15	; 0x0f
   141ae:	66 e6       	ldi	r22, 0x66	; 102
   141b0:	76 e1       	ldi	r23, 0x16	; 22
   141b2:	80 e0       	ldi	r24, 0x00	; 0
                print_var("BYTES_PER_BLOCK", (uint32_t)SS80p->UNIT.BYTES_PER_BLOCK);
   141b4:	4a dd       	rcall	.-1388   	; 0x13c4a <print_var_P>
   141b6:	ef 85       	ldd	r30, Y+15	; 0x0f
   141b8:	f8 89       	ldd	r31, Y+16	; 0x10
   141ba:	20 89       	ldd	r18, Z+16	; 0x10
   141bc:	31 89       	ldd	r19, Z+17	; 0x11
   141be:	40 e0       	ldi	r20, 0x00	; 0
   141c0:	50 e0       	ldi	r21, 0x00	; 0
   141c2:	66 e5       	ldi	r22, 0x56	; 86
   141c4:	76 e1       	ldi	r23, 0x16	; 22
                print_var("BUFFERED_BLOCKS", (uint32_t)SS80p->UNIT.BUFFERED_BLOCKS);
   141c6:	80 e0       	ldi	r24, 0x00	; 0
   141c8:	40 dd       	rcall	.-1408   	; 0x13c4a <print_var_P>
   141ca:	ef 85       	ldd	r30, Y+15	; 0x0f
   141cc:	f8 89       	ldd	r31, Y+16	; 0x10
   141ce:	22 89       	ldd	r18, Z+18	; 0x12
   141d0:	30 e0       	ldi	r19, 0x00	; 0
   141d2:	40 e0       	ldi	r20, 0x00	; 0
   141d4:	50 e0       	ldi	r21, 0x00	; 0
   141d6:	66 e4       	ldi	r22, 0x46	; 70
   141d8:	76 e1       	ldi	r23, 0x16	; 22
                print_var("BURST_SIZE", (uint32_t)SS80p->UNIT.BURST_SIZE);
   141da:	80 e0       	ldi	r24, 0x00	; 0
   141dc:	36 dd       	rcall	.-1428   	; 0x13c4a <print_var_P>
   141de:	ef 85       	ldd	r30, Y+15	; 0x0f
   141e0:	f8 89       	ldd	r31, Y+16	; 0x10
   141e2:	23 89       	ldd	r18, Z+19	; 0x13
   141e4:	30 e0       	ldi	r19, 0x00	; 0
   141e6:	40 e0       	ldi	r20, 0x00	; 0
   141e8:	50 e0       	ldi	r21, 0x00	; 0
   141ea:	6b e3       	ldi	r22, 0x3B	; 59
   141ec:	76 e1       	ldi	r23, 0x16	; 22
                print_var("BLOCK_TIME", (uint32_t)SS80p->UNIT.BLOCK_TIME);
   141ee:	80 e0       	ldi	r24, 0x00	; 0
   141f0:	2c dd       	rcall	.-1448   	; 0x13c4a <print_var_P>
   141f2:	ef 85       	ldd	r30, Y+15	; 0x0f
   141f4:	f8 89       	ldd	r31, Y+16	; 0x10
   141f6:	24 89       	ldd	r18, Z+20	; 0x14
   141f8:	35 89       	ldd	r19, Z+21	; 0x15
   141fa:	40 e0       	ldi	r20, 0x00	; 0
   141fc:	50 e0       	ldi	r21, 0x00	; 0
   141fe:	60 e3       	ldi	r22, 0x30	; 48
   14200:	76 e1       	ldi	r23, 0x16	; 22
                print_var("CONTINUOUS_TRANSFER_RATE", (uint32_t)SS80p->UNIT.CONTINUOUS_TRANSFER_RATE);
   14202:	80 e0       	ldi	r24, 0x00	; 0
   14204:	22 dd       	rcall	.-1468   	; 0x13c4a <print_var_P>
   14206:	ef 85       	ldd	r30, Y+15	; 0x0f
   14208:	f8 89       	ldd	r31, Y+16	; 0x10
   1420a:	26 89       	ldd	r18, Z+22	; 0x16
   1420c:	37 89       	ldd	r19, Z+23	; 0x17
   1420e:	40 e0       	ldi	r20, 0x00	; 0
   14210:	50 e0       	ldi	r21, 0x00	; 0
   14212:	67 e1       	ldi	r22, 0x17	; 23
   14214:	76 e1       	ldi	r23, 0x16	; 22
                print_var("OPTIMAL_RETRY_TIME", (uint32_t)SS80p->UNIT.OPTIMAL_RETRY_TIME);
   14216:	80 e0       	ldi	r24, 0x00	; 0
   14218:	18 dd       	rcall	.-1488   	; 0x13c4a <print_var_P>
   1421a:	ef 85       	ldd	r30, Y+15	; 0x0f
   1421c:	f8 89       	ldd	r31, Y+16	; 0x10
   1421e:	20 8d       	ldd	r18, Z+24	; 0x18
   14220:	31 8d       	ldd	r19, Z+25	; 0x19
   14222:	40 e0       	ldi	r20, 0x00	; 0
   14224:	50 e0       	ldi	r21, 0x00	; 0
   14226:	64 e0       	ldi	r22, 0x04	; 4
   14228:	76 e1       	ldi	r23, 0x16	; 22
                print_var("ACCESS_TIME", (uint32_t)SS80p->UNIT.ACCESS_TIME);
   1422a:	80 e0       	ldi	r24, 0x00	; 0
   1422c:	0e dd       	rcall	.-1508   	; 0x13c4a <print_var_P>
   1422e:	ef 85       	ldd	r30, Y+15	; 0x0f
   14230:	f8 89       	ldd	r31, Y+16	; 0x10
   14232:	22 8d       	ldd	r18, Z+26	; 0x1a
   14234:	33 8d       	ldd	r19, Z+27	; 0x1b
   14236:	40 e0       	ldi	r20, 0x00	; 0
   14238:	50 e0       	ldi	r21, 0x00	; 0
   1423a:	68 ef       	ldi	r22, 0xF8	; 248
   1423c:	75 e1       	ldi	r23, 0x15	; 21
                print_var("MAXIMUM_INTERLEAVE", (uint32_t)SS80p->UNIT.MAXIMUM_INTERLEAVE);
   1423e:	80 e0       	ldi	r24, 0x00	; 0
   14240:	04 dd       	rcall	.-1528   	; 0x13c4a <print_var_P>
   14242:	ef 85       	ldd	r30, Y+15	; 0x0f
   14244:	f8 89       	ldd	r31, Y+16	; 0x10
   14246:	24 8d       	ldd	r18, Z+28	; 0x1c
   14248:	30 e0       	ldi	r19, 0x00	; 0
   1424a:	40 e0       	ldi	r20, 0x00	; 0
   1424c:	50 e0       	ldi	r21, 0x00	; 0
   1424e:	65 ee       	ldi	r22, 0xE5	; 229
   14250:	75 e1       	ldi	r23, 0x15	; 21
                print_var("FIXED_VOLUMES", (uint32_t)SS80p->UNIT.FIXED_VOLUMES);
   14252:	80 e0       	ldi	r24, 0x00	; 0
   14254:	fa dc       	rcall	.-1548   	; 0x13c4a <print_var_P>
   14256:	ef 85       	ldd	r30, Y+15	; 0x0f
   14258:	f8 89       	ldd	r31, Y+16	; 0x10
   1425a:	25 8d       	ldd	r18, Z+29	; 0x1d
   1425c:	30 e0       	ldi	r19, 0x00	; 0
   1425e:	40 e0       	ldi	r20, 0x00	; 0
   14260:	50 e0       	ldi	r21, 0x00	; 0
   14262:	67 ed       	ldi	r22, 0xD7	; 215
   14264:	75 e1       	ldi	r23, 0x15	; 21
                print_var("REMOVABLE_VOLUMES", (uint32_t)SS80p->UNIT.REMOVABLE_VOLUMES);
   14266:	80 e0       	ldi	r24, 0x00	; 0
   14268:	f0 dc       	rcall	.-1568   	; 0x13c4a <print_var_P>
   1426a:	ef 85       	ldd	r30, Y+15	; 0x0f
   1426c:	f8 89       	ldd	r31, Y+16	; 0x10
   1426e:	26 8d       	ldd	r18, Z+30	; 0x1e
   14270:	30 e0       	ldi	r19, 0x00	; 0
   14272:	40 e0       	ldi	r20, 0x00	; 0
   14274:	50 e0       	ldi	r21, 0x00	; 0
   14276:	65 ec       	ldi	r22, 0xC5	; 197
   14278:	75 e1       	ldi	r23, 0x15	; 21
   1427a:	80 e0       	ldi	r24, 0x00	; 0
			printf("  END\n");
   1427c:	e6 dc       	rcall	.-1588   	; 0x13c4a <print_var_P>
   1427e:	8e eb       	ldi	r24, 0xBE	; 190
   14280:	95 e1       	ldi	r25, 0x15	; 21
   14282:	a0 e0       	ldi	r26, 0x00	; 0
   14284:	ed b7       	in	r30, 0x3d	; 61
   14286:	fe b7       	in	r31, 0x3e	; 62
   14288:	81 83       	std	Z+1, r24	; 0x01
   1428a:	92 83       	std	Z+2, r25	; 0x02
   1428c:	a3 83       	std	Z+3, r26	; 0x03
            printf("  VOLUME\n");
   1428e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   14292:	84 eb       	ldi	r24, 0xB4	; 180
   14294:	95 e1       	ldi	r25, 0x15	; 21
   14296:	a0 e0       	ldi	r26, 0x00	; 0
   14298:	ed b7       	in	r30, 0x3d	; 61
   1429a:	fe b7       	in	r31, 0x3e	; 62
   1429c:	81 83       	std	Z+1, r24	; 0x01
                print_var("MAX_CYLINDER", (uint32_t)SS80p->VOLUME.MAX_CYLINDER);
   1429e:	92 83       	std	Z+2, r25	; 0x02
   142a0:	a3 83       	std	Z+3, r26	; 0x03
   142a2:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   142a6:	ef 85       	ldd	r30, Y+15	; 0x0f
   142a8:	f8 89       	ldd	r31, Y+16	; 0x10
   142aa:	27 8d       	ldd	r18, Z+31	; 0x1f
   142ac:	30 a1       	ldd	r19, Z+32	; 0x20
   142ae:	41 a1       	ldd	r20, Z+33	; 0x21
                print_var("MAX_HEAD", (uint32_t)SS80p->VOLUME.MAX_HEAD);
   142b0:	52 a1       	ldd	r21, Z+34	; 0x22
   142b2:	67 ea       	ldi	r22, 0xA7	; 167
   142b4:	75 e1       	ldi	r23, 0x15	; 21
   142b6:	80 e0       	ldi	r24, 0x00	; 0
   142b8:	c8 dc       	rcall	.-1648   	; 0x13c4a <print_var_P>
   142ba:	ef 85       	ldd	r30, Y+15	; 0x0f
   142bc:	f8 89       	ldd	r31, Y+16	; 0x10
   142be:	23 a1       	ldd	r18, Z+35	; 0x23
   142c0:	30 e0       	ldi	r19, 0x00	; 0
   142c2:	40 e0       	ldi	r20, 0x00	; 0
                print_var("MAX_SECTOR", (uint32_t)SS80p->VOLUME.MAX_SECTOR);
   142c4:	50 e0       	ldi	r21, 0x00	; 0
   142c6:	6e e9       	ldi	r22, 0x9E	; 158
   142c8:	75 e1       	ldi	r23, 0x15	; 21
   142ca:	80 e0       	ldi	r24, 0x00	; 0
   142cc:	be dc       	rcall	.-1668   	; 0x13c4a <print_var_P>
   142ce:	ef 85       	ldd	r30, Y+15	; 0x0f
   142d0:	f8 89       	ldd	r31, Y+16	; 0x10
   142d2:	24 a1       	ldd	r18, Z+36	; 0x24
   142d4:	35 a1       	ldd	r19, Z+37	; 0x25
   142d6:	40 e0       	ldi	r20, 0x00	; 0
                print_var("MAX_BLOCK_NUMBER", (uint32_t)SS80p->VOLUME.MAX_BLOCK_NUMBER);
   142d8:	50 e0       	ldi	r21, 0x00	; 0
   142da:	63 e9       	ldi	r22, 0x93	; 147
   142dc:	75 e1       	ldi	r23, 0x15	; 21
   142de:	80 e0       	ldi	r24, 0x00	; 0
   142e0:	b4 dc       	rcall	.-1688   	; 0x13c4a <print_var_P>
   142e2:	ef 85       	ldd	r30, Y+15	; 0x0f
   142e4:	f8 89       	ldd	r31, Y+16	; 0x10
   142e6:	26 a1       	ldd	r18, Z+38	; 0x26
   142e8:	37 a1       	ldd	r19, Z+39	; 0x27
   142ea:	40 a5       	ldd	r20, Z+40	; 0x28
   142ec:	51 a5       	ldd	r21, Z+41	; 0x29
                print_var("INTERLEAVE", (uint32_t)SS80p->VOLUME.INTERLEAVE);
   142ee:	62 e8       	ldi	r22, 0x82	; 130
   142f0:	75 e1       	ldi	r23, 0x15	; 21
   142f2:	80 e0       	ldi	r24, 0x00	; 0
   142f4:	aa dc       	rcall	.-1708   	; 0x13c4a <print_var_P>
   142f6:	ef 85       	ldd	r30, Y+15	; 0x0f
   142f8:	f8 89       	ldd	r31, Y+16	; 0x10
   142fa:	22 a5       	ldd	r18, Z+42	; 0x2a
   142fc:	30 e0       	ldi	r19, 0x00	; 0
   142fe:	40 e0       	ldi	r20, 0x00	; 0
   14300:	50 e0       	ldi	r21, 0x00	; 0
                print_var("# BLOCKS", (uint32_t)SS80p->VOLUME.MAX_BLOCK_NUMBER+1);
   14302:	67 e7       	ldi	r22, 0x77	; 119
   14304:	75 e1       	ldi	r23, 0x15	; 21
   14306:	80 e0       	ldi	r24, 0x00	; 0
   14308:	a0 dc       	rcall	.-1728   	; 0x13c4a <print_var_P>
   1430a:	ef 85       	ldd	r30, Y+15	; 0x0f
   1430c:	f8 89       	ldd	r31, Y+16	; 0x10
   1430e:	86 a1       	ldd	r24, Z+38	; 0x26
   14310:	97 a1       	ldd	r25, Z+39	; 0x27
   14312:	a0 a5       	ldd	r26, Z+40	; 0x28
   14314:	b1 a5       	ldd	r27, Z+41	; 0x29
   14316:	9c 01       	movw	r18, r24
   14318:	ad 01       	movw	r20, r26
   1431a:	2f 5f       	subi	r18, 0xFF	; 255
   1431c:	3f 4f       	sbci	r19, 0xFF	; 255
   1431e:	4f 4f       	sbci	r20, 0xFF	; 255
   14320:	5f 4f       	sbci	r21, 0xFF	; 255
   14322:	6e e6       	ldi	r22, 0x6E	; 110
			printf("  END\n");
   14324:	75 e1       	ldi	r23, 0x15	; 21
   14326:	80 e0       	ldi	r24, 0x00	; 0
   14328:	90 dc       	rcall	.-1760   	; 0x13c4a <print_var_P>
   1432a:	87 e6       	ldi	r24, 0x67	; 103
   1432c:	95 e1       	ldi	r25, 0x15	; 21
   1432e:	a0 e0       	ldi	r26, 0x00	; 0
   14330:	ed b7       	in	r30, 0x3d	; 61
   14332:	fe b7       	in	r31, 0x3e	; 62
   14334:	81 83       	std	Z+1, r24	; 0x01
   14336:	92 83       	std	Z+2, r25	; 0x02
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   14338:	a3 83       	std	Z+3, r26	; 0x03
   1433a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1433e:	f8 01       	movw	r30, r16
   14340:	80 81       	ld	r24, Z
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   14342:	81 30       	cpi	r24, 0x01	; 1
   14344:	09 f0       	breq	.+2      	; 0x14348 <display_Config+0x3b2>
   14346:	c7 c0       	rjmp	.+398    	; 0x144d6 <display_Config+0x540>
   14348:	27 a1       	ldd	r18, Z+39	; 0x27

            printf("AMIGO %s\n", Devices[i].model);
   1434a:	30 a5       	ldd	r19, Z+40	; 0x28
   1434c:	38 8b       	std	Y+16, r19	; 0x10
   1434e:	2f 87       	std	Y+15, r18	; 0x0f
   14350:	c8 01       	movw	r24, r16
   14352:	07 96       	adiw	r24, 0x07	; 7
   14354:	ed b7       	in	r30, 0x3d	; 61
   14356:	fe b7       	in	r31, 0x3e	; 62
   14358:	95 83       	std	Z+5, r25	; 0x05
   1435a:	84 83       	std	Z+4, r24	; 0x04
   1435c:	c5 01       	movw	r24, r10
   1435e:	a0 e0       	ldi	r26, 0x00	; 0
   14360:	81 83       	std	Z+1, r24	; 0x01
   14362:	92 83       	std	Z+2, r25	; 0x02
			printf("  # HP85 BASIC ADDRESS :D7%d0\n", (int) AMIGOp->HEADER.ADDRESS);
   14364:	a3 83       	std	Z+3, r26	; 0x03
   14366:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1436a:	ef 85       	ldd	r30, Y+15	; 0x0f
   1436c:	f8 89       	ldd	r31, Y+16	; 0x10
   1436e:	80 81       	ld	r24, Z
   14370:	90 e0       	ldi	r25, 0x00	; 0
   14372:	ed b7       	in	r30, 0x3d	; 61
   14374:	fe b7       	in	r31, 0x3e	; 62
   14376:	95 83       	std	Z+5, r25	; 0x05
   14378:	84 83       	std	Z+4, r24	; 0x04
   1437a:	8e e3       	ldi	r24, 0x3E	; 62
   1437c:	95 e1       	ldi	r25, 0x15	; 21
   1437e:	a0 e0       	ldi	r26, 0x00	; 0
   14380:	81 83       	std	Z+1, r24	; 0x01
            printf("  HEADER\n");
   14382:	92 83       	std	Z+2, r25	; 0x02
   14384:	a3 83       	std	Z+3, r26	; 0x03
   14386:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1438a:	84 e3       	ldi	r24, 0x34	; 52
   1438c:	95 e1       	ldi	r25, 0x15	; 21
   1438e:	a0 e0       	ldi	r26, 0x00	; 0
   14390:	ed b7       	in	r30, 0x3d	; 61
   14392:	fe b7       	in	r31, 0x3e	; 62
                print_var("ADDRESS", (uint32_t) AMIGOp->HEADER.ADDRESS);
   14394:	81 83       	std	Z+1, r24	; 0x01
   14396:	92 83       	std	Z+2, r25	; 0x02
   14398:	a3 83       	std	Z+3, r26	; 0x03
   1439a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1439e:	ef 85       	ldd	r30, Y+15	; 0x0f
   143a0:	f8 89       	ldd	r31, Y+16	; 0x10
   143a2:	20 81       	ld	r18, Z
   143a4:	30 e0       	ldi	r19, 0x00	; 0
   143a6:	40 e0       	ldi	r20, 0x00	; 0
                print_var("PPR", (uint32_t) AMIGOp->HEADER.PPR);
   143a8:	50 e0       	ldi	r21, 0x00	; 0
   143aa:	6c e2       	ldi	r22, 0x2C	; 44
   143ac:	75 e1       	ldi	r23, 0x15	; 21
   143ae:	80 e0       	ldi	r24, 0x00	; 0
   143b0:	4c dc       	rcall	.-1896   	; 0x13c4a <print_var_P>
   143b2:	ef 85       	ldd	r30, Y+15	; 0x0f
   143b4:	f8 89       	ldd	r31, Y+16	; 0x10
   143b6:	21 81       	ldd	r18, Z+1	; 0x01
   143b8:	30 e0       	ldi	r19, 0x00	; 0
   143ba:	40 e0       	ldi	r20, 0x00	; 0
   143bc:	50 e0       	ldi	r21, 0x00	; 0
                print_str("FILE", AMIGOp->HEADER.NAME);
   143be:	68 e2       	ldi	r22, 0x28	; 40
   143c0:	75 e1       	ldi	r23, 0x15	; 21
   143c2:	80 e0       	ldi	r24, 0x00	; 0
   143c4:	42 dc       	rcall	.-1916   	; 0x13c4a <print_var_P>
   143c6:	ef 85       	ldd	r30, Y+15	; 0x0f
   143c8:	f8 89       	ldd	r31, Y+16	; 0x10
   143ca:	42 81       	ldd	r20, Z+2	; 0x02
   143cc:	53 81       	ldd	r21, Z+3	; 0x03
   143ce:	63 e2       	ldi	r22, 0x23	; 35
			printf("  END\n");
   143d0:	75 e1       	ldi	r23, 0x15	; 21
   143d2:	80 e0       	ldi	r24, 0x00	; 0
   143d4:	92 dc       	rcall	.-1756   	; 0x13cfa <print_str_P>
   143d6:	8c e1       	ldi	r24, 0x1C	; 28
   143d8:	95 e1       	ldi	r25, 0x15	; 21
   143da:	a0 e0       	ldi	r26, 0x00	; 0
   143dc:	ed b7       	in	r30, 0x3d	; 61
   143de:	fe b7       	in	r31, 0x3e	; 62
   143e0:	81 83       	std	Z+1, r24	; 0x01
            printf("  CONFIG\n");
   143e2:	92 83       	std	Z+2, r25	; 0x02
   143e4:	a3 83       	std	Z+3, r26	; 0x03
   143e6:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   143ea:	82 e1       	ldi	r24, 0x12	; 18
   143ec:	95 e1       	ldi	r25, 0x15	; 21
   143ee:	a0 e0       	ldi	r26, 0x00	; 0
   143f0:	ed b7       	in	r30, 0x3d	; 61
   143f2:	fe b7       	in	r31, 0x3e	; 62
   143f4:	81 83       	std	Z+1, r24	; 0x01
                print_var("ID", (uint32_t) AMIGOp->CONFIG.ID);
   143f6:	92 83       	std	Z+2, r25	; 0x02
   143f8:	a3 83       	std	Z+3, r26	; 0x03
   143fa:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   143fe:	ef 85       	ldd	r30, Y+15	; 0x0f
   14400:	f8 89       	ldd	r31, Y+16	; 0x10
   14402:	24 81       	ldd	r18, Z+4	; 0x04
   14404:	35 81       	ldd	r19, Z+5	; 0x05
   14406:	40 e0       	ldi	r20, 0x00	; 0
   14408:	50 e0       	ldi	r21, 0x00	; 0
   1440a:	6f e0       	ldi	r22, 0x0F	; 15
			printf("  END\n");
   1440c:	75 e1       	ldi	r23, 0x15	; 21
   1440e:	80 e0       	ldi	r24, 0x00	; 0
   14410:	1c dc       	rcall	.-1992   	; 0x13c4a <print_var_P>
   14412:	88 e0       	ldi	r24, 0x08	; 8
   14414:	95 e1       	ldi	r25, 0x15	; 21
   14416:	a0 e0       	ldi	r26, 0x00	; 0
   14418:	ed b7       	in	r30, 0x3d	; 61
   1441a:	fe b7       	in	r31, 0x3e	; 62
   1441c:	81 83       	std	Z+1, r24	; 0x01
            printf("  GEOMETRY\n");
   1441e:	92 83       	std	Z+2, r25	; 0x02
   14420:	a3 83       	std	Z+3, r26	; 0x03
   14422:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   14426:	8c ef       	ldi	r24, 0xFC	; 252
   14428:	94 e1       	ldi	r25, 0x14	; 20
   1442a:	a0 e0       	ldi	r26, 0x00	; 0
   1442c:	ed b7       	in	r30, 0x3d	; 61
   1442e:	fe b7       	in	r31, 0x3e	; 62
                print_var("BYTES_PER_SECTOR", (uint32_t) AMIGOp->GEOMETRY.BYTES_PER_SECTOR);
   14430:	81 83       	std	Z+1, r24	; 0x01
   14432:	92 83       	std	Z+2, r25	; 0x02
   14434:	a3 83       	std	Z+3, r26	; 0x03
   14436:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1443a:	ef 85       	ldd	r30, Y+15	; 0x0f
   1443c:	f8 89       	ldd	r31, Y+16	; 0x10
   1443e:	26 81       	ldd	r18, Z+6	; 0x06
   14440:	37 81       	ldd	r19, Z+7	; 0x07
   14442:	03 2e       	mov	r0, r19
   14444:	00 0c       	add	r0, r0
   14446:	44 0b       	sbc	r20, r20
                print_var("SECTORS_PER_TRACK", (uint32_t) AMIGOp->GEOMETRY.SECTORS_PER_TRACK);
   14448:	55 0b       	sbc	r21, r21
   1444a:	6b ee       	ldi	r22, 0xEB	; 235
   1444c:	74 e1       	ldi	r23, 0x14	; 20
   1444e:	80 e0       	ldi	r24, 0x00	; 0
   14450:	fc db       	rcall	.-2056   	; 0x13c4a <print_var_P>
   14452:	ef 85       	ldd	r30, Y+15	; 0x0f
   14454:	f8 89       	ldd	r31, Y+16	; 0x10
   14456:	20 85       	ldd	r18, Z+8	; 0x08
   14458:	31 85       	ldd	r19, Z+9	; 0x09
   1445a:	03 2e       	mov	r0, r19
   1445c:	00 0c       	add	r0, r0
   1445e:	44 0b       	sbc	r20, r20
                print_var("HEADS", (uint32_t) AMIGOp->GEOMETRY.HEADS);
   14460:	55 0b       	sbc	r21, r21
   14462:	69 ed       	ldi	r22, 0xD9	; 217
   14464:	74 e1       	ldi	r23, 0x14	; 20
   14466:	80 e0       	ldi	r24, 0x00	; 0
   14468:	f0 db       	rcall	.-2080   	; 0x13c4a <print_var_P>
   1446a:	ef 85       	ldd	r30, Y+15	; 0x0f
   1446c:	f8 89       	ldd	r31, Y+16	; 0x10
   1446e:	22 85       	ldd	r18, Z+10	; 0x0a
   14470:	33 85       	ldd	r19, Z+11	; 0x0b
   14472:	03 2e       	mov	r0, r19
   14474:	00 0c       	add	r0, r0
   14476:	44 0b       	sbc	r20, r20
                print_var("CYLINDERS", (uint32_t) AMIGOp->GEOMETRY.CYLINDERS);
   14478:	55 0b       	sbc	r21, r21
   1447a:	63 ed       	ldi	r22, 0xD3	; 211
   1447c:	74 e1       	ldi	r23, 0x14	; 20
   1447e:	80 e0       	ldi	r24, 0x00	; 0
   14480:	e4 db       	rcall	.-2104   	; 0x13c4a <print_var_P>
   14482:	ef 85       	ldd	r30, Y+15	; 0x0f
   14484:	f8 89       	ldd	r31, Y+16	; 0x10
   14486:	24 85       	ldd	r18, Z+12	; 0x0c
   14488:	35 85       	ldd	r19, Z+13	; 0x0d
   1448a:	03 2e       	mov	r0, r19
   1448c:	00 0c       	add	r0, r0
   1448e:	44 0b       	sbc	r20, r20
   14490:	55 0b       	sbc	r21, r21
                print_var("# BLOCKS", (uint32_t)AMIGOp->GEOMETRY.CYLINDERS * AMIGOp->GEOMETRY.SECTORS_PER_TRACK * AMIGOp->GEOMETRY.HEADS );
   14492:	69 ec       	ldi	r22, 0xC9	; 201
   14494:	74 e1       	ldi	r23, 0x14	; 20
   14496:	80 e0       	ldi	r24, 0x00	; 0
   14498:	d8 db       	rcall	.-2128   	; 0x13c4a <print_var_P>
   1449a:	ef 85       	ldd	r30, Y+15	; 0x0f
   1449c:	f8 89       	ldd	r31, Y+16	; 0x10
   1449e:	24 85       	ldd	r18, Z+12	; 0x0c
   144a0:	35 85       	ldd	r19, Z+13	; 0x0d
   144a2:	a0 85       	ldd	r26, Z+8	; 0x08
   144a4:	b1 85       	ldd	r27, Z+9	; 0x09
   144a6:	0e 94 4b e4 	call	0x1c896	; 0x1c896 <__mulhisi3>
   144aa:	9b 01       	movw	r18, r22
   144ac:	ac 01       	movw	r20, r24
   144ae:	a2 85       	ldd	r26, Z+10	; 0x0a
   144b0:	b3 85       	ldd	r27, Z+11	; 0x0b
   144b2:	0e 94 70 e4 	call	0x1c8e0	; 0x1c8e0 <__mulshisi3>
   144b6:	9b 01       	movw	r18, r22
   144b8:	ac 01       	movw	r20, r24
   144ba:	60 ec       	ldi	r22, 0xC0	; 192
			printf("  END\n");
   144bc:	74 e1       	ldi	r23, 0x14	; 20
   144be:	80 e0       	ldi	r24, 0x00	; 0
   144c0:	c4 db       	rcall	.-2168   	; 0x13c4a <print_var_P>
   144c2:	89 eb       	ldi	r24, 0xB9	; 185
   144c4:	94 e1       	ldi	r25, 0x14	; 20
   144c6:	a0 e0       	ldi	r26, 0x00	; 0
   144c8:	ed b7       	in	r30, 0x3d	; 61
   144ca:	fe b7       	in	r31, 0x3e	; 62
   144cc:	81 83       	std	Z+1, r24	; 0x01
        } 
#endif // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
   144ce:	92 83       	std	Z+2, r25	; 0x02
   144d0:	a3 83       	std	Z+3, r26	; 0x03
   144d2:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
   144d6:	f8 01       	movw	r30, r16
   144d8:	80 81       	ld	r24, Z
   144da:	84 30       	cpi	r24, 0x04	; 4
   144dc:	29 f5       	brne	.+74     	; 0x14528 <display_Config+0x592>

            printf("PRINTER\n");
   144de:	27 a1       	ldd	r18, Z+39	; 0x27
   144e0:	30 a5       	ldd	r19, Z+40	; 0x28
   144e2:	38 8b       	std	Y+16, r19	; 0x10
   144e4:	2f 87       	std	Y+15, r18	; 0x0f
   144e6:	8c 85       	ldd	r24, Y+12	; 0x0c
   144e8:	9d 85       	ldd	r25, Y+13	; 0x0d
   144ea:	ae 85       	ldd	r26, Y+14	; 0x0e
   144ec:	ed b7       	in	r30, 0x3d	; 61
   144ee:	fe b7       	in	r31, 0x3e	; 62
   144f0:	81 83       	std	Z+1, r24	; 0x01
            printf("  CONFIG\n");
   144f2:	92 83       	std	Z+2, r25	; 0x02
   144f4:	a3 83       	std	Z+3, r26	; 0x03
   144f6:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   144fa:	ed b7       	in	r30, 0x3d	; 61
   144fc:	fe b7       	in	r31, 0x3e	; 62
   144fe:	21 82       	std	Z+1, r2	; 0x01
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   14500:	32 82       	std	Z+2, r3	; 0x02
   14502:	43 82       	std	Z+3, r4	; 0x03
   14504:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   14508:	ef 85       	ldd	r30, Y+15	; 0x0f
   1450a:	f8 89       	ldd	r31, Y+16	; 0x10
   1450c:	20 81       	ld	r18, Z
   1450e:	30 e0       	ldi	r19, 0x00	; 0
   14510:	40 e0       	ldi	r20, 0x00	; 0
   14512:	50 e0       	ldi	r21, 0x00	; 0
			printf("  END\n");
   14514:	8e 2d       	mov	r24, r14
   14516:	b6 01       	movw	r22, r12
   14518:	98 db       	rcall	.-2256   	; 0x13c4a <print_var_P>
   1451a:	ed b7       	in	r30, 0x3d	; 61
   1451c:	fe b7       	in	r31, 0x3e	; 62
   1451e:	61 82       	std	Z+1, r6	; 0x01
   14520:	72 82       	std	Z+2, r7	; 0x02
        }
		printf("END\n");
   14522:	83 82       	std	Z+3, r8	; 0x03
   14524:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   14528:	2e 81       	ldd	r18, Y+6	; 0x06
   1452a:	3f 81       	ldd	r19, Y+7	; 0x07
   1452c:	48 85       	ldd	r20, Y+8	; 0x08
   1452e:	ed b7       	in	r30, 0x3d	; 61
   14530:	fe b7       	in	r31, 0x3e	; 62
   14532:	21 83       	std	Z+1, r18	; 0x01
   14534:	32 83       	std	Z+2, r19	; 0x02
		printf("\n");
   14536:	43 83       	std	Z+3, r20	; 0x03
   14538:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1453c:	29 85       	ldd	r18, Y+9	; 0x09
   1453e:	3a 85       	ldd	r19, Y+10	; 0x0a
   14540:	4b 85       	ldd	r20, Y+11	; 0x0b
   14542:	ed b7       	in	r30, 0x3d	; 61
   14544:	fe b7       	in	r31, 0x3e	; 62
   14546:	21 83       	std	Z+1, r18	; 0x01
   14548:	32 83       	std	Z+2, r19	; 0x02
   1454a:	43 83       	std	Z+3, r20	; 0x03
   1454c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   14550:	05 5d       	subi	r16, 0xD5	; 213
   14552:	1f 4f       	sbci	r17, 0xFF	; 255
   14554:	f0 e2       	ldi	r31, 0x20	; 32
   14556:	00 39       	cpi	r16, 0x90	; 144
			printf("  END\n");
        }
		printf("END\n");
		printf("\n");
    }
    printf("END\n");
   14558:	1f 07       	cpc	r17, r31
   1455a:	09 f0       	breq	.+2      	; 0x1455e <display_Config+0x5c8>
   1455c:	64 cd       	rjmp	.-1336   	; 0x14026 <display_Config+0x90>
   1455e:	8b e8       	ldi	r24, 0x8B	; 139
   14560:	94 e1       	ldi	r25, 0x14	; 20
   14562:	a0 e0       	ldi	r26, 0x00	; 0
   14564:	ed b7       	in	r30, 0x3d	; 61
   14566:	fe b7       	in	r31, 0x3e	; 62
   14568:	81 83       	std	Z+1, r24	; 0x01
   1456a:	92 83       	std	Z+2, r25	; 0x02
    printf("\n");
   1456c:	a3 83       	std	Z+3, r26	; 0x03
   1456e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   14572:	89 e8       	ldi	r24, 0x89	; 137
   14574:	94 e1       	ldi	r25, 0x14	; 20
   14576:	a0 e0       	ldi	r26, 0x00	; 0
   14578:	ed b7       	in	r30, 0x3d	; 61
   1457a:	fe b7       	in	r31, 0x3e	; 62
   1457c:	81 83       	std	Z+1, r24	; 0x01
   1457e:	92 83       	std	Z+2, r25	; 0x02
}
   14580:	a3 83       	std	Z+3, r26	; 0x03
   14582:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   14586:	60 96       	adiw	r28, 0x10	; 16
   14588:	0f b6       	in	r0, 0x3f	; 63
   1458a:	f8 94       	cli
   1458c:	de bf       	out	0x3e, r29	; 62
   1458e:	0f be       	out	0x3f, r0	; 63
   14590:	cd bf       	out	0x3d, r28	; 61
   14592:	df 91       	pop	r29
   14594:	cf 91       	pop	r28
   14596:	1f 91       	pop	r17
   14598:	0f 91       	pop	r16
   1459a:	ef 90       	pop	r14
   1459c:	df 90       	pop	r13
   1459e:	cf 90       	pop	r12
   145a0:	bf 90       	pop	r11
   145a2:	af 90       	pop	r10
   145a4:	8f 90       	pop	r8
   145a6:	7f 90       	pop	r7
   145a8:	6f 90       	pop	r6
   145aa:	4f 90       	pop	r4
   145ac:	3f 90       	pop	r3
   145ae:	2f 90       	pop	r2
   145b0:	08 95       	ret

000145b2 <format_drives>:

/// ===============================================
/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   145b2:	2f 92       	push	r2
   145b4:	3f 92       	push	r3
   145b6:	4f 92       	push	r4
   145b8:	6f 92       	push	r6
   145ba:	7f 92       	push	r7
   145bc:	8f 92       	push	r8
   145be:	af 92       	push	r10
   145c0:	bf 92       	push	r11
   145c2:	cf 92       	push	r12
   145c4:	ef 92       	push	r14
   145c6:	ff 92       	push	r15
   145c8:	0f 93       	push	r16
   145ca:	1f 93       	push	r17
   145cc:	cf 93       	push	r28
   145ce:	df 93       	push	r29
   145d0:	cd b7       	in	r28, 0x3d	; 61
   145d2:	de b7       	in	r29, 0x3e	; 62
   145d4:	c6 56       	subi	r28, 0x66	; 102
   145d6:	d1 09       	sbc	r29, r1
   145d8:	0f b6       	in	r0, 0x3f	; 63
   145da:	f8 94       	cli
   145dc:	de bf       	out	0x3e, r29	; 62
   145de:	0f be       	out	0x3f, r0	; 63
   145e0:	cd bf       	out	0x3d, r28	; 61
   145e2:	2c e8       	ldi	r18, 0x8C	; 140
   145e4:	3e e1       	ldi	r19, 0x1E	; 30
   145e6:	6a 96       	adiw	r28, 0x1a	; 26
   145e8:	3f af       	std	Y+63, r19	; 0x3f
   145ea:	2e af       	std	Y+62, r18	; 0x3e
   145ec:	6a 97       	sbiw	r28, 0x1a	; 26
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
    int amigo = 1;
   145ee:	81 e0       	ldi	r24, 0x01	; 1
   145f0:	90 e0       	ldi	r25, 0x00	; 0
   145f2:	a2 96       	adiw	r28, 0x22	; 34
   145f4:	9f af       	std	Y+63, r25	; 0x3f
   145f6:	8e af       	std	Y+62, r24	; 0x3e
   145f8:	a2 97       	sbiw	r28, 0x22	; 34
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
   145fa:	a1 e0       	ldi	r26, 0x01	; 1
   145fc:	b0 e0       	ldi	r27, 0x00	; 0
   145fe:	a0 96       	adiw	r28, 0x20	; 32
   14600:	bf af       	std	Y+63, r27	; 0x3f
   14602:	ae af       	std	Y+62, r26	; 0x3e
   14604:	a0 97       	sbiw	r28, 0x20	; 32
                {
                    printf("Can not use non 256 byte sectors\n");
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                sprintf(label,"AMIGO%d", amigo);
   14606:	85 e3       	ldi	r24, 0x35	; 53
   14608:	94 e1       	ldi	r25, 0x14	; 20
   1460a:	9c 01       	movw	r18, r24
   1460c:	40 e0       	ldi	r20, 0x00	; 0
   1460e:	a7 96       	adiw	r28, 0x27	; 39
   14610:	2d af       	std	Y+61, r18	; 0x3d
   14612:	3e af       	std	Y+62, r19	; 0x3e
   14614:	4f af       	std	Y+63, r20	; 0x3f
   14616:	a7 97       	sbiw	r28, 0x27	; 39
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   14618:	8d e3       	ldi	r24, 0x3D	; 61
   1461a:	94 e1       	ldi	r25, 0x14	; 20
   1461c:	3c 01       	movw	r6, r24
   1461e:	81 2c       	mov	r8, r1
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                sprintf(label,"SS80-%d", ss80);
   14620:	8f e5       	ldi	r24, 0x5F	; 95
   14622:	94 e1       	ldi	r25, 0x14	; 20
   14624:	5c 01       	movw	r10, r24
   14626:	c1 2c       	mov	r12, r1

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   14628:	87 e6       	ldi	r24, 0x67	; 103
   1462a:	94 e1       	ldi	r25, 0x14	; 20
   1462c:	1c 01       	movw	r2, r24
   1462e:	41 2c       	mov	r4, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   14630:	6a 96       	adiw	r28, 0x1a	; 26
   14632:	ae ad       	ldd	r26, Y+62	; 0x3e
   14634:	bf ad       	ldd	r27, Y+63	; 0x3f
   14636:	6a 97       	sbiw	r28, 0x1a	; 26
   14638:	8c 91       	ld	r24, X
   1463a:	88 23       	and	r24, r24
   1463c:	09 f4       	brne	.+2      	; 0x14640 <format_drives+0x8e>
   1463e:	dc c0       	rjmp	.+440    	; 0x147f8 <format_drives+0x246>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   14640:	83 30       	cpi	r24, 0x03	; 3
   14642:	09 f0       	breq	.+2      	; 0x14646 <format_drives+0x94>
   14644:	65 c0       	rjmp	.+202    	; 0x14710 <format_drives+0x15e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   14646:	fd 01       	movw	r30, r26
   14648:	07 a1       	ldd	r16, Z+39	; 0x27
   1464a:	10 a5       	ldd	r17, Z+40	; 0x28

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
   1464c:	be 01       	movw	r22, r28
   1464e:	68 5f       	subi	r22, 0xF8	; 248
   14650:	7f 4f       	sbci	r23, 0xFF	; 255
   14652:	f8 01       	movw	r30, r16
   14654:	82 81       	ldd	r24, Z+2	; 0x02
   14656:	93 81       	ldd	r25, Z+3	; 0x03
   14658:	0e 94 37 7a 	call	0xf46e	; 0xf46e <stat>
   1465c:	01 96       	adiw	r24, 0x01	; 1
   1465e:	09 f0       	breq	.+2      	; 0x14662 <format_drives+0xb0>
   14660:	4d c0       	rjmp	.+154    	; 0x146fc <format_drives+0x14a>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   14662:	f8 01       	movw	r30, r16
   14664:	80 89       	ldd	r24, Z+16	; 0x10
   14666:	91 89       	ldd	r25, Z+17	; 0x11
   14668:	81 15       	cp	r24, r1
   1466a:	91 40       	sbci	r25, 0x01	; 1
   1466c:	31 f0       	breq	.+12     	; 0x1467a <format_drives+0xc8>
                {
                    printf("Can not use non 256 byte sectors\n");
   1466e:	ed b7       	in	r30, 0x3d	; 61
   14670:	fe b7       	in	r31, 0x3e	; 62
   14672:	21 82       	std	Z+1, r2	; 0x01
   14674:	32 82       	std	Z+2, r3	; 0x02
   14676:	43 82       	std	Z+3, r4	; 0x03
   14678:	6c c0       	rjmp	.+216    	; 0x14752 <format_drives+0x1a0>
                    continue;
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
   1467a:	6a 96       	adiw	r28, 0x1a	; 26
   1467c:	ee ad       	ldd	r30, Y+62	; 0x3e
   1467e:	ff ad       	ldd	r31, Y+63	; 0x3f
   14680:	6a 97       	sbiw	r28, 0x1a	; 26
   14682:	83 81       	ldd	r24, Z+3	; 0x03
   14684:	94 81       	ldd	r25, Z+4	; 0x04
   14686:	a5 81       	ldd	r26, Z+5	; 0x05
   14688:	b6 81       	ldd	r27, Z+6	; 0x06
   1468a:	6e 96       	adiw	r28, 0x1e	; 30
   1468c:	8c af       	std	Y+60, r24	; 0x3c
   1468e:	9d af       	std	Y+61, r25	; 0x3d
   14690:	ae af       	std	Y+62, r26	; 0x3e
   14692:	bf af       	std	Y+63, r27	; 0x3f
   14694:	6e 97       	sbiw	r28, 0x1e	; 30
                sprintf(label,"SS80-%d", ss80);
   14696:	a0 96       	adiw	r28, 0x20	; 32
   14698:	2e ad       	ldd	r18, Y+62	; 0x3e
   1469a:	3f ad       	ldd	r19, Y+63	; 0x3f
   1469c:	a0 97       	sbiw	r28, 0x20	; 32
   1469e:	ed b7       	in	r30, 0x3d	; 61
   146a0:	fe b7       	in	r31, 0x3e	; 62
   146a2:	37 83       	std	Z+7, r19	; 0x07
   146a4:	26 83       	std	Z+6, r18	; 0x06
   146a6:	a3 82       	std	Z+3, r10	; 0x03
   146a8:	b4 82       	std	Z+4, r11	; 0x04
   146aa:	c5 82       	std	Z+5, r12	; 0x05
   146ac:	28 e3       	ldi	r18, 0x38	; 56
   146ae:	30 e0       	ldi	r19, 0x00	; 0
   146b0:	2c 0f       	add	r18, r28
   146b2:	3d 1f       	adc	r19, r29
   146b4:	32 83       	std	Z+2, r19	; 0x02
   146b6:	21 83       	std	Z+1, r18	; 0x01
   146b8:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   146bc:	f8 01       	movw	r30, r16
   146be:	02 80       	ldd	r0, Z+2	; 0x02
   146c0:	f3 81       	ldd	r31, Z+3	; 0x03
   146c2:	e0 2d       	mov	r30, r0
   146c4:	a4 96       	adiw	r28, 0x24	; 36
   146c6:	ff af       	std	Y+63, r31	; 0x3f
   146c8:	ee af       	std	Y+62, r30	; 0x3e
   146ca:	a4 97       	sbiw	r28, 0x24	; 36
                    label,
                    lif_dir_count(sectors), 
   146cc:	6e 96       	adiw	r28, 0x1e	; 30
   146ce:	6c ad       	ldd	r22, Y+60	; 0x3c
   146d0:	7d ad       	ldd	r23, Y+61	; 0x3d
   146d2:	8e ad       	ldd	r24, Y+62	; 0x3e
   146d4:	9f ad       	ldd	r25, Y+63	; 0x3f
   146d6:	6e 97       	sbiw	r28, 0x1e	; 30
   146d8:	3d d1       	rcall	.+634    	; 0x14954 <lif_dir_count>
   146da:	9b 01       	movw	r18, r22
   146dc:	ac 01       	movw	r20, r24
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                sprintf(label,"SS80-%d", ss80);
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   146de:	6e 96       	adiw	r28, 0x1e	; 30
   146e0:	ec ac       	ldd	r14, Y+60	; 0x3c
   146e2:	fd ac       	ldd	r15, Y+61	; 0x3d
   146e4:	0e ad       	ldd	r16, Y+62	; 0x3e
   146e6:	1f ad       	ldd	r17, Y+63	; 0x3f
   146e8:	6e 97       	sbiw	r28, 0x1e	; 30
   146ea:	be 01       	movw	r22, r28
   146ec:	68 5c       	subi	r22, 0xC8	; 200
   146ee:	7f 4f       	sbci	r23, 0xFF	; 255
   146f0:	a4 96       	adiw	r28, 0x24	; 36
   146f2:	8e ad       	ldd	r24, Y+62	; 0x3e
   146f4:	9f ad       	ldd	r25, Y+63	; 0x3f
   146f6:	a4 97       	sbiw	r28, 0x24	; 36
   146f8:	0e 94 64 de 	call	0x1bcc8	; 0x1bcc8 <lif_create_image>
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif

            }
            ss80++;
   146fc:	a0 96       	adiw	r28, 0x20	; 32
   146fe:	2e ad       	ldd	r18, Y+62	; 0x3e
   14700:	3f ad       	ldd	r19, Y+63	; 0x3f
   14702:	a0 97       	sbiw	r28, 0x20	; 32
   14704:	2f 5f       	subi	r18, 0xFF	; 255
   14706:	3f 4f       	sbci	r19, 0xFF	; 255
   14708:	a0 96       	adiw	r28, 0x20	; 32
   1470a:	3f af       	std	Y+63, r19	; 0x3f
   1470c:	2e af       	std	Y+62, r18	; 0x3e
   1470e:	a0 97       	sbiw	r28, 0x20	; 32
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   14710:	6a 96       	adiw	r28, 0x1a	; 26
   14712:	ae ad       	ldd	r26, Y+62	; 0x3e
   14714:	bf ad       	ldd	r27, Y+63	; 0x3f
   14716:	6a 97       	sbiw	r28, 0x1a	; 26
   14718:	8c 91       	ld	r24, X
   1471a:	81 30       	cpi	r24, 0x01	; 1
   1471c:	09 f0       	breq	.+2      	; 0x14720 <format_drives+0x16e>
   1471e:	6c c0       	rjmp	.+216    	; 0x147f8 <format_drives+0x246>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   14720:	fd 01       	movw	r30, r26
   14722:	07 a1       	ldd	r16, Z+39	; 0x27
   14724:	10 a5       	ldd	r17, Z+40	; 0x28
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
   14726:	be 01       	movw	r22, r28
   14728:	68 5f       	subi	r22, 0xF8	; 248
   1472a:	7f 4f       	sbci	r23, 0xFF	; 255
   1472c:	f8 01       	movw	r30, r16
   1472e:	82 81       	ldd	r24, Z+2	; 0x02
   14730:	93 81       	ldd	r25, Z+3	; 0x03
   14732:	0e 94 37 7a 	call	0xf46e	; 0xf46e <stat>
   14736:	01 96       	adiw	r24, 0x01	; 1
   14738:	09 f0       	breq	.+2      	; 0x1473c <format_drives+0x18a>
   1473a:	54 c0       	rjmp	.+168    	; 0x147e4 <format_drives+0x232>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   1473c:	f8 01       	movw	r30, r16
   1473e:	86 81       	ldd	r24, Z+6	; 0x06
   14740:	97 81       	ldd	r25, Z+7	; 0x07
   14742:	81 15       	cp	r24, r1
   14744:	91 40       	sbci	r25, 0x01	; 1
   14746:	41 f0       	breq	.+16     	; 0x14758 <format_drives+0x1a6>
                {
                    printf("Can not use non 256 byte sectors\n");
   14748:	ed b7       	in	r30, 0x3d	; 61
   1474a:	fe b7       	in	r31, 0x3e	; 62
   1474c:	61 82       	std	Z+1, r6	; 0x01
   1474e:	72 82       	std	Z+2, r7	; 0x02
   14750:	83 82       	std	Z+3, r8	; 0x03
   14752:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
                    continue;
   14756:	50 c0       	rjmp	.+160    	; 0x147f8 <format_drives+0x246>
                }
                sectors = Devices[i].BLOCKS;
   14758:	6a 96       	adiw	r28, 0x1a	; 26
   1475a:	ee ad       	ldd	r30, Y+62	; 0x3e
   1475c:	ff ad       	ldd	r31, Y+63	; 0x3f
   1475e:	6a 97       	sbiw	r28, 0x1a	; 26
   14760:	83 81       	ldd	r24, Z+3	; 0x03
   14762:	94 81       	ldd	r25, Z+4	; 0x04
   14764:	a5 81       	ldd	r26, Z+5	; 0x05
   14766:	b6 81       	ldd	r27, Z+6	; 0x06
   14768:	6e 96       	adiw	r28, 0x1e	; 30
   1476a:	8c af       	std	Y+60, r24	; 0x3c
   1476c:	9d af       	std	Y+61, r25	; 0x3d
   1476e:	ae af       	std	Y+62, r26	; 0x3e
   14770:	bf af       	std	Y+63, r27	; 0x3f
   14772:	6e 97       	sbiw	r28, 0x1e	; 30
                sprintf(label,"AMIGO%d", amigo);
   14774:	a2 96       	adiw	r28, 0x22	; 34
   14776:	2e ad       	ldd	r18, Y+62	; 0x3e
   14778:	3f ad       	ldd	r19, Y+63	; 0x3f
   1477a:	a2 97       	sbiw	r28, 0x22	; 34
   1477c:	ed b7       	in	r30, 0x3d	; 61
   1477e:	fe b7       	in	r31, 0x3e	; 62
   14780:	37 83       	std	Z+7, r19	; 0x07
   14782:	26 83       	std	Z+6, r18	; 0x06
   14784:	a7 96       	adiw	r28, 0x27	; 39
   14786:	8d ad       	ldd	r24, Y+61	; 0x3d
   14788:	9e ad       	ldd	r25, Y+62	; 0x3e
   1478a:	af ad       	ldd	r26, Y+63	; 0x3f
   1478c:	a7 97       	sbiw	r28, 0x27	; 39
   1478e:	83 83       	std	Z+3, r24	; 0x03
   14790:	94 83       	std	Z+4, r25	; 0x04
   14792:	a5 83       	std	Z+5, r26	; 0x05
   14794:	28 e3       	ldi	r18, 0x38	; 56
   14796:	30 e0       	ldi	r19, 0x00	; 0
   14798:	2c 0f       	add	r18, r28
   1479a:	3d 1f       	adc	r19, r29
   1479c:	32 83       	std	Z+2, r19	; 0x02
   1479e:	21 83       	std	Z+1, r18	; 0x01
   147a0:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   147a4:	f8 01       	movw	r30, r16
   147a6:	02 80       	ldd	r0, Z+2	; 0x02
   147a8:	f3 81       	ldd	r31, Z+3	; 0x03
   147aa:	e0 2d       	mov	r30, r0
   147ac:	a4 96       	adiw	r28, 0x24	; 36
   147ae:	ff af       	std	Y+63, r31	; 0x3f
   147b0:	ee af       	std	Y+62, r30	; 0x3e
   147b2:	a4 97       	sbiw	r28, 0x24	; 36
                    label,
                    lif_dir_count(sectors), 
   147b4:	6e 96       	adiw	r28, 0x1e	; 30
   147b6:	6c ad       	ldd	r22, Y+60	; 0x3c
   147b8:	7d ad       	ldd	r23, Y+61	; 0x3d
   147ba:	8e ad       	ldd	r24, Y+62	; 0x3e
   147bc:	9f ad       	ldd	r25, Y+63	; 0x3f
   147be:	6e 97       	sbiw	r28, 0x1e	; 30
   147c0:	c9 d0       	rcall	.+402    	; 0x14954 <lif_dir_count>
   147c2:	9b 01       	movw	r18, r22
   147c4:	ac 01       	movw	r20, r24
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                sprintf(label,"AMIGO%d", amigo);
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   147c6:	6e 96       	adiw	r28, 0x1e	; 30
   147c8:	ec ac       	ldd	r14, Y+60	; 0x3c
   147ca:	fd ac       	ldd	r15, Y+61	; 0x3d
   147cc:	0e ad       	ldd	r16, Y+62	; 0x3e
   147ce:	1f ad       	ldd	r17, Y+63	; 0x3f
   147d0:	6e 97       	sbiw	r28, 0x1e	; 30
   147d2:	be 01       	movw	r22, r28
   147d4:	68 5c       	subi	r22, 0xC8	; 200
   147d6:	7f 4f       	sbci	r23, 0xFF	; 255
   147d8:	a4 96       	adiw	r28, 0x24	; 36
   147da:	8e ad       	ldd	r24, Y+62	; 0x3e
   147dc:	9f ad       	ldd	r25, Y+63	; 0x3f
   147de:	a4 97       	sbiw	r28, 0x24	; 36
   147e0:	0e 94 64 de 	call	0x1bcc8	; 0x1bcc8 <lif_create_image>
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
            }
            amigo++;
   147e4:	a2 96       	adiw	r28, 0x22	; 34
   147e6:	2e ad       	ldd	r18, Y+62	; 0x3e
   147e8:	3f ad       	ldd	r19, Y+63	; 0x3f
   147ea:	a2 97       	sbiw	r28, 0x22	; 34
   147ec:	2f 5f       	subi	r18, 0xFF	; 255
   147ee:	3f 4f       	sbci	r19, 0xFF	; 255
   147f0:	a2 96       	adiw	r28, 0x22	; 34
   147f2:	3f af       	std	Y+63, r19	; 0x3f
   147f4:	2e af       	std	Y+62, r18	; 0x3e
   147f6:	a2 97       	sbiw	r28, 0x22	; 34
   147f8:	6a 96       	adiw	r28, 0x1a	; 26
   147fa:	8e ad       	ldd	r24, Y+62	; 0x3e
   147fc:	9f ad       	ldd	r25, Y+63	; 0x3f
   147fe:	6a 97       	sbiw	r28, 0x1a	; 26
   14800:	8b 96       	adiw	r24, 0x2b	; 43
   14802:	6a 96       	adiw	r28, 0x1a	; 26
   14804:	9f af       	std	Y+63, r25	; 0x3f
   14806:	8e af       	std	Y+62, r24	; 0x3e
   14808:	6a 97       	sbiw	r28, 0x1a	; 26
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   1480a:	a0 e9       	ldi	r26, 0x90	; 144
   1480c:	b0 e2       	ldi	r27, 0x20	; 32
   1480e:	a8 17       	cp	r26, r24
   14810:	b9 07       	cpc	r27, r25
   14812:	09 f0       	breq	.+2      	; 0x14816 <format_drives+0x264>
   14814:	0d cf       	rjmp	.-486    	; 0x14630 <format_drives+0x7e>
            }
            amigo++;
        } 
#endif // #ifdef AMIGO
    }
    printf("\n");
   14816:	83 e3       	ldi	r24, 0x33	; 51
   14818:	94 e1       	ldi	r25, 0x14	; 20
   1481a:	a0 e0       	ldi	r26, 0x00	; 0
   1481c:	ed b7       	in	r30, 0x3d	; 61
   1481e:	fe b7       	in	r31, 0x3e	; 62
   14820:	81 83       	std	Z+1, r24	; 0x01
   14822:	92 83       	std	Z+2, r25	; 0x02
   14824:	a3 83       	std	Z+3, r26	; 0x03
   14826:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
}
   1482a:	ca 59       	subi	r28, 0x9A	; 154
   1482c:	df 4f       	sbci	r29, 0xFF	; 255
   1482e:	0f b6       	in	r0, 0x3f	; 63
   14830:	f8 94       	cli
   14832:	de bf       	out	0x3e, r29	; 62
   14834:	0f be       	out	0x3f, r0	; 63
   14836:	cd bf       	out	0x3d, r28	; 61
   14838:	df 91       	pop	r29
   1483a:	cf 91       	pop	r28
   1483c:	1f 91       	pop	r17
   1483e:	0f 91       	pop	r16
   14840:	ff 90       	pop	r15
   14842:	ef 90       	pop	r14
   14844:	cf 90       	pop	r12
   14846:	bf 90       	pop	r11
   14848:	af 90       	pop	r10
   1484a:	8f 90       	pop	r8
   1484c:	7f 90       	pop	r7
   1484e:	6f 90       	pop	r6
   14850:	4f 90       	pop	r4
   14852:	3f 90       	pop	r3
   14854:	2f 90       	pop	r2
   14856:	08 95       	ret

00014858 <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1);		// 1
   14858:	8f e1       	ldi	r24, 0x1F	; 31
   1485a:	e0 e9       	ldi	r30, 0x90	; 144
   1485c:	f0 e2       	ldi	r31, 0x20	; 32
   1485e:	df 01       	movw	r26, r30
   14860:	98 2f       	mov	r25, r24
   14862:	1d 92       	st	X+, r1
   14864:	9a 95       	dec	r25
   14866:	e9 f7       	brne	.-6      	; 0x14862 <hpdir_init+0xa>
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);	// 2
   14868:	9f e3       	ldi	r25, 0x3F	; 63
   1486a:	e0 eb       	ldi	r30, 0xB0	; 176
   1486c:	f0 e2       	ldi	r31, 0x20	; 32
   1486e:	df 01       	movw	r26, r30
   14870:	1d 92       	st	X+, r1
   14872:	9a 95       	dec	r25
   14874:	e9 f7       	brne	.-6      	; 0x14870 <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);		// 3
   14876:	e0 ef       	ldi	r30, 0xF0	; 240
   14878:	f0 e2       	ldi	r31, 0x20	; 32
   1487a:	df 01       	movw	r26, r30
   1487c:	1d 92       	st	X+, r1
   1487e:	8a 95       	dec	r24
   14880:	e9 f7       	brne	.-6      	; 0x1487c <hpdir_init+0x24>
    hpdir.ID = 0;						// 4
   14882:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <hpdir+0x80>
   14886:	10 92 11 21 	sts	0x2111, r1	; 0x802111 <hpdir+0x81>
   1488a:	10 92 12 21 	sts	0x2112, r1	; 0x802112 <hpdir+0x82>
   1488e:	10 92 13 21 	sts	0x2113, r1	; 0x802113 <hpdir+0x83>
	hpdir.mask_stat2 = 0;				// 5
   14892:	10 92 14 21 	sts	0x2114, r1	; 0x802114 <hpdir+0x84>
   14896:	10 92 15 21 	sts	0x2115, r1	; 0x802115 <hpdir+0x85>
   1489a:	10 92 16 21 	sts	0x2116, r1	; 0x802116 <hpdir+0x86>
   1489e:	10 92 17 21 	sts	0x2117, r1	; 0x802117 <hpdir+0x87>
	hpdir.id_stat2 = 0;					// 6
   148a2:	10 92 18 21 	sts	0x2118, r1	; 0x802118 <hpdir+0x88>
   148a6:	10 92 19 21 	sts	0x2119, r1	; 0x802119 <hpdir+0x89>
   148aa:	10 92 1a 21 	sts	0x211A, r1	; 0x80211a <hpdir+0x8a>
   148ae:	10 92 1b 21 	sts	0x211B, r1	; 0x80211b <hpdir+0x8b>
	hpdir.DEVICE_NUMBER = 0;			// 7
   148b2:	10 92 1c 21 	sts	0x211C, r1	; 0x80211c <hpdir+0x8c>
   148b6:	10 92 1d 21 	sts	0x211D, r1	; 0x80211d <hpdir+0x8d>
   148ba:	10 92 1e 21 	sts	0x211E, r1	; 0x80211e <hpdir+0x8e>
   148be:	10 92 1f 21 	sts	0x211F, r1	; 0x80211f <hpdir+0x8f>
	hpdir.UNITS_INSTALLED = 0x8001;		// 8
   148c2:	81 e0       	ldi	r24, 0x01	; 1
   148c4:	90 e8       	ldi	r25, 0x80	; 128
   148c6:	a0 e0       	ldi	r26, 0x00	; 0
   148c8:	b0 e0       	ldi	r27, 0x00	; 0
   148ca:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <hpdir+0x90>
   148ce:	90 93 21 21 	sts	0x2121, r25	; 0x802121 <hpdir+0x91>
   148d2:	a0 93 22 21 	sts	0x2122, r26	; 0x802122 <hpdir+0x92>
   148d6:	b0 93 23 21 	sts	0x2123, r27	; 0x802123 <hpdir+0x93>
	hpdir.CYLINDERS = 0;  				// 9
   148da:	10 92 24 21 	sts	0x2124, r1	; 0x802124 <hpdir+0x94>
   148de:	10 92 25 21 	sts	0x2125, r1	; 0x802125 <hpdir+0x95>
   148e2:	10 92 26 21 	sts	0x2126, r1	; 0x802126 <hpdir+0x96>
   148e6:	10 92 27 21 	sts	0x2127, r1	; 0x802127 <hpdir+0x97>
	hpdir.HEADS= 0;	     				// 10
   148ea:	10 92 28 21 	sts	0x2128, r1	; 0x802128 <hpdir+0x98>
   148ee:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <hpdir+0x99>
   148f2:	10 92 2a 21 	sts	0x212A, r1	; 0x80212a <hpdir+0x9a>
   148f6:	10 92 2b 21 	sts	0x212B, r1	; 0x80212b <hpdir+0x9b>
	hpdir.SECTORS= 0;    				// 11
   148fa:	10 92 2c 21 	sts	0x212C, r1	; 0x80212c <hpdir+0x9c>
   148fe:	10 92 2d 21 	sts	0x212D, r1	; 0x80212d <hpdir+0x9d>
   14902:	10 92 2e 21 	sts	0x212E, r1	; 0x80212e <hpdir+0x9e>
   14906:	10 92 2f 21 	sts	0x212F, r1	; 0x80212f <hpdir+0x9f>
	hpdir.BYTES_PER_SECTOR = 0;			// 12
   1490a:	10 92 30 21 	sts	0x2130, r1	; 0x802130 <hpdir+0xa0>
   1490e:	10 92 31 21 	sts	0x2131, r1	; 0x802131 <hpdir+0xa1>
   14912:	10 92 32 21 	sts	0x2132, r1	; 0x802132 <hpdir+0xa2>
   14916:	10 92 33 21 	sts	0x2133, r1	; 0x802133 <hpdir+0xa3>
	hpdir.INTERLEAVE = 0;				// 13
   1491a:	10 92 34 21 	sts	0x2134, r1	; 0x802134 <hpdir+0xa4>
   1491e:	10 92 35 21 	sts	0x2135, r1	; 0x802135 <hpdir+0xa5>
   14922:	10 92 36 21 	sts	0x2136, r1	; 0x802136 <hpdir+0xa6>
   14926:	10 92 37 21 	sts	0x2137, r1	; 0x802137 <hpdir+0xa7>
    hpdir.FIXED = 1;					// 14 ALWAYS 1
   1492a:	81 e0       	ldi	r24, 0x01	; 1
   1492c:	90 e0       	ldi	r25, 0x00	; 0
   1492e:	a0 e0       	ldi	r26, 0x00	; 0
   14930:	b0 e0       	ldi	r27, 0x00	; 0
   14932:	80 93 38 21 	sts	0x2138, r24	; 0x802138 <hpdir+0xa8>
   14936:	90 93 39 21 	sts	0x2139, r25	; 0x802139 <hpdir+0xa9>
   1493a:	a0 93 3a 21 	sts	0x213A, r26	; 0x80213a <hpdir+0xaa>
   1493e:	b0 93 3b 21 	sts	0x213B, r27	; 0x80213b <hpdir+0xab>

	// Computed values
    hpdir.BLOCKS = 0;
   14942:	10 92 3c 21 	sts	0x213C, r1	; 0x80213c <hpdir+0xac>
   14946:	10 92 3d 21 	sts	0x213D, r1	; 0x80213d <hpdir+0xad>
   1494a:	10 92 3e 21 	sts	0x213E, r1	; 0x80213e <hpdir+0xae>
   1494e:	10 92 3f 21 	sts	0x213F, r1	; 0x80213f <hpdir+0xaf>
   14952:	08 95       	ret

00014954 <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
	int scale = 0;
   14954:	20 e0       	ldi	r18, 0x00	; 0
   14956:	30 e0       	ldi	r19, 0x00	; 0
	long num = 1;
	while(blocks)
   14958:	61 15       	cp	r22, r1
   1495a:	71 05       	cpc	r23, r1
   1495c:	81 05       	cpc	r24, r1
   1495e:	91 05       	cpc	r25, r1
   14960:	39 f0       	breq	.+14     	; 0x14970 <lif_dir_count+0x1c>
	{
		scale++;
   14962:	2f 5f       	subi	r18, 0xFF	; 255
   14964:	3f 4f       	sbci	r19, 0xFF	; 255
 		blocks >>= 1;
   14966:	95 95       	asr	r25
   14968:	87 95       	ror	r24
   1496a:	77 95       	ror	r23
   1496c:	67 95       	ror	r22
   1496e:	f4 cf       	rjmp	.-24     	; 0x14958 <lif_dir_count+0x4>
	}
	scale>>=1;
   14970:	35 95       	asr	r19
   14972:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
	int scale = 0;
	long num = 1;
   14974:	61 e0       	ldi	r22, 0x01	; 1
   14976:	70 e0       	ldi	r23, 0x00	; 0
   14978:	80 e0       	ldi	r24, 0x00	; 0
   1497a:	90 e0       	ldi	r25, 0x00	; 0
	{
		scale++;
 		blocks >>= 1;
	}
	scale>>=1;
	while(scale--)
   1497c:	21 50       	subi	r18, 0x01	; 1
   1497e:	31 09       	sbc	r19, r1
   14980:	28 f0       	brcs	.+10     	; 0x1498c <lif_dir_count+0x38>
		num <<=1;
   14982:	66 0f       	add	r22, r22
   14984:	77 1f       	adc	r23, r23
   14986:	88 1f       	adc	r24, r24
   14988:	99 1f       	adc	r25, r25
   1498a:	f8 cf       	rjmp	.-16     	; 0x1497c <lif_dir_count+0x28>
	return(num);
}
   1498c:	08 95       	ret

0001498e <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   1498e:	2f 92       	push	r2
   14990:	3f 92       	push	r3
   14992:	4f 92       	push	r4
   14994:	5f 92       	push	r5
   14996:	6f 92       	push	r6
   14998:	8f 92       	push	r8
   1499a:	9f 92       	push	r9
   1499c:	af 92       	push	r10
   1499e:	bf 92       	push	r11
   149a0:	cf 92       	push	r12
   149a2:	df 92       	push	r13
   149a4:	ef 92       	push	r14
   149a6:	ff 92       	push	r15
   149a8:	0f 93       	push	r16
   149aa:	1f 93       	push	r17
   149ac:	cf 93       	push	r28
   149ae:	df 93       	push	r29
   149b0:	cd b7       	in	r28, 0x3d	; 61
   149b2:	de b7       	in	r29, 0x3e	; 62
   149b4:	c9 58       	subi	r28, 0x89	; 137
   149b6:	d1 40       	sbci	r29, 0x01	; 1
   149b8:	0f b6       	in	r0, 0x3f	; 63
   149ba:	f8 94       	cli
   149bc:	de bf       	out	0x3e, r29	; 62
   149be:	0f be       	out	0x3f, r0	; 63
   149c0:	cd bf       	out	0x3d, r28	; 61
   149c2:	6c 01       	movw	r12, r24
   149c4:	c8 57       	subi	r28, 0x78	; 120
   149c6:	de 4f       	sbci	r29, 0xFE	; 254
   149c8:	79 83       	std	Y+1, r23	; 0x01
   149ca:	68 83       	st	Y, r22
   149cc:	c8 58       	subi	r28, 0x88	; 136
   149ce:	d1 40       	sbci	r29, 0x01	; 1
	FILE *cfg;
	char *ptr;
    char str[256];
    char token[128];

	hpdir_init();
   149d0:	5a 01       	movw	r10, r20

	cfg = fopen("hpdir.ini","rb");
   149d2:	42 df       	rcall	.-380    	; 0x14858 <hpdir_init>
   149d4:	6e e1       	ldi	r22, 0x1E	; 30
   149d6:	78 e0       	ldi	r23, 0x08	; 8
   149d8:	85 e7       	ldi	r24, 0x75	; 117
   149da:	9f e0       	ldi	r25, 0x0F	; 15
   149dc:	0e 94 32 7f 	call	0xfe64	; 0xfe64 <fopen>

#ifndef LIF_STAND_ALONE
	if(cfg == NULL)
   149e0:	7c 01       	movw	r14, r24
   149e2:	89 2b       	or	r24, r25
		cfg = fopen("/hpdir.ini","rb");
   149e4:	49 f4       	brne	.+18     	; 0x149f8 <hpdir_find_drive+0x6a>
   149e6:	6e e1       	ldi	r22, 0x1E	; 30
   149e8:	78 e0       	ldi	r23, 0x08	; 8
   149ea:	84 e7       	ldi	r24, 0x74	; 116
   149ec:	9f e0       	ldi	r25, 0x0F	; 15
   149ee:	0e 94 32 7f 	call	0xfe64	; 0xfe64 <fopen>
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

	if(cfg == NULL)
   149f2:	7c 01       	movw	r14, r24
   149f4:	89 2b       	or	r24, r25
		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
			driveinfo = 1;
   149f6:	51 f0       	breq	.+20     	; 0x14a0c <hpdir_find_drive+0x7e>
   149f8:	21 2c       	mov	r2, r1

		if(*ptr == '[' && driveinfo == 1 )
                break;

		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);
   149fa:	31 2c       	mov	r3, r1
   149fc:	8e 01       	movw	r16, r28
   149fe:	08 5f       	subi	r16, 0xF8	; 248
		if( driveinfo != 1)
			continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   14a00:	1e 4f       	sbci	r17, 0xFE	; 254
   14a02:	88 e6       	ldi	r24, 0x68	; 104
   14a04:	9f e1       	ldi	r25, 0x1F	; 31
   14a06:	2c 01       	movw	r4, r24
   14a08:	61 2c       	mov	r6, r1
    }
#endif

	if(cfg == NULL)
	{
		if(verbose)
   14a0a:	1e c0       	rjmp	.+60     	; 0x14a48 <hpdir_find_drive+0xba>
   14a0c:	ab 28       	or	r10, r11
   14a0e:	09 f4       	brne	.+2      	; 0x14a12 <hpdir_find_drive+0x84>
			printf("Error: hpdir.ini not found!\n");
   14a10:	69 c1       	rjmp	.+722    	; 0x14ce4 <hpdir_find_drive+0x356>
   14a12:	8f e6       	ldi	r24, 0x6F	; 111
   14a14:	9f e1       	ldi	r25, 0x1F	; 31
   14a16:	a0 e0       	ldi	r26, 0x00	; 0
   14a18:	ed b7       	in	r30, 0x3d	; 61
   14a1a:	fe b7       	in	r31, 0x3e	; 62
   14a1c:	81 83       	std	Z+1, r24	; 0x01
   14a1e:	92 83       	std	Z+2, r25	; 0x02
   14a20:	a3 83       	std	Z+3, r26	; 0x03
   14a22:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
		errors = 0;
        ptr = str;

        trim_tail(ptr);
   14a26:	5e c1       	rjmp	.+700    	; 0x14ce4 <hpdir_find_drive+0x356>
   14a28:	ce 01       	movw	r24, r28
   14a2a:	08 96       	adiw	r24, 0x08	; 8
   14a2c:	0e 94 3f 33 	call	0x667e	; 0x667e <trim_tail>
        ptr = skipspaces(ptr);
   14a30:	ce 01       	movw	r24, r28
   14a32:	08 96       	adiw	r24, 0x08	; 8
   14a34:	0e 94 4f 33 	call	0x669e	; 0x669e <skipspaces>

        len = strlen(ptr);
   14a38:	fc 01       	movw	r30, r24
   14a3a:	01 90       	ld	r0, Z+
   14a3c:	00 20       	and	r0, r0
   14a3e:	e9 f7       	brne	.-6      	; 0x14a3a <hpdir_find_drive+0xac>
        if(!len)
   14a40:	31 97       	sbiw	r30, 0x01	; 1
   14a42:	8e 17       	cp	r24, r30
   14a44:	9f 07       	cpc	r25, r31
		return(0);
	}

	// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   14a46:	51 f4       	brne	.+20     	; 0x14a5c <hpdir_find_drive+0xce>
   14a48:	a7 01       	movw	r20, r14
   14a4a:	6e ef       	ldi	r22, 0xFE	; 254
   14a4c:	70 e0       	ldi	r23, 0x00	; 0
   14a4e:	ce 01       	movw	r24, r28
   14a50:	08 96       	adiw	r24, 0x08	; 8
   14a52:	0e 94 4a 77 	call	0xee94	; 0xee94 <fgets>
   14a56:	89 2b       	or	r24, r25
   14a58:	39 f7       	brne	.-50     	; 0x14a28 <hpdir_find_drive+0x9a>
        len = strlen(ptr);
        if(!len)
            continue;

        // Skip comments
        if(*ptr == ';' || *ptr == '#' )
   14a5a:	0c c0       	rjmp	.+24     	; 0x14a74 <hpdir_find_drive+0xe6>
   14a5c:	fc 01       	movw	r30, r24
   14a5e:	20 81       	ld	r18, Z
   14a60:	2b 33       	cpi	r18, 0x3B	; 59
   14a62:	91 f3       	breq	.-28     	; 0x14a48 <hpdir_find_drive+0xba>
   14a64:	23 32       	cpi	r18, 0x23	; 35
            continue;

		if(*ptr == '[' && driveinfo == 1 )
   14a66:	81 f3       	breq	.-32     	; 0x14a48 <hpdir_find_drive+0xba>
   14a68:	2b 35       	cpi	r18, 0x5B	; 91
   14a6a:	31 f4       	brne	.+12     	; 0x14a78 <hpdir_find_drive+0xea>
   14a6c:	f1 e0       	ldi	r31, 0x01	; 1
   14a6e:	2f 16       	cp	r2, r31
   14a70:	31 04       	cpc	r3, r1
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   14a72:	11 f4       	brne	.+4      	; 0x14a78 <hpdir_find_drive+0xea>
   14a74:	00 e0       	ldi	r16, 0x00	; 0

		if(*ptr == '[' && driveinfo == 1 )
                break;

		// MODEL something else
		ptr = get_token(ptr, token, 	sizeof(token)-2);
   14a76:	30 c1       	rjmp	.+608    	; 0x14cd8 <hpdir_find_drive+0x34a>
   14a78:	4e e7       	ldi	r20, 0x7E	; 126
   14a7a:	50 e0       	ldi	r21, 0x00	; 0
   14a7c:	b8 01       	movw	r22, r16
   14a7e:	0e 94 21 34 	call	0x6842	; 0x6842 <get_token>

        if(MATCHI(token,"[driveinfo]"))
   14a82:	4c 01       	movw	r8, r24
   14a84:	6f e7       	ldi	r22, 0x7F	; 127
   14a86:	7f e0       	ldi	r23, 0x0F	; 15
   14a88:	c8 01       	movw	r24, r16
   14a8a:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
   14a8e:	89 2b       	or	r24, r25
        {
			driveinfo = 1;
   14a90:	21 f0       	breq	.+8      	; 0x14a9a <hpdir_find_drive+0x10c>
   14a92:	22 24       	eor	r2, r2
   14a94:	23 94       	inc	r2
   14a96:	31 2c       	mov	r3, r1
            continue;
        }

		if( driveinfo != 1)
   14a98:	d7 cf       	rjmp	.-82     	; 0x14a48 <hpdir_find_drive+0xba>
   14a9a:	21 e0       	ldi	r18, 0x01	; 1
   14a9c:	22 16       	cp	r2, r18
   14a9e:	31 04       	cpc	r3, r1
			continue;

        if(list)
   14aa0:	99 f6       	brne	.-90     	; 0x14a48 <hpdir_find_drive+0xba>
   14aa2:	c8 57       	subi	r28, 0x78	; 120
   14aa4:	de 4f       	sbci	r29, 0xFE	; 254
   14aa6:	88 81       	ld	r24, Y
   14aa8:	99 81       	ldd	r25, Y+1	; 0x01
   14aaa:	c8 58       	subi	r28, 0x88	; 136
   14aac:	d1 40       	sbci	r29, 0x01	; 1
   14aae:	89 2b       	or	r24, r25
        {
            printf("%s %s\n", token, ptr);
   14ab0:	61 f0       	breq	.+24     	; 0x14aca <hpdir_find_drive+0x13c>
   14ab2:	ed b7       	in	r30, 0x3d	; 61
   14ab4:	fe b7       	in	r31, 0x3e	; 62
   14ab6:	97 82       	std	Z+7, r9	; 0x07
   14ab8:	86 82       	std	Z+6, r8	; 0x06
   14aba:	15 83       	std	Z+5, r17	; 0x05
   14abc:	04 83       	std	Z+4, r16	; 0x04
   14abe:	41 82       	std	Z+1, r4	; 0x01
   14ac0:	52 82       	std	Z+2, r5	; 0x02
   14ac2:	63 82       	std	Z+3, r6	; 0x03
   14ac4:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            continue;
        }

		if ( ! MATCHI(model,token) )
   14ac8:	bf cf       	rjmp	.-130    	; 0x14a48 <hpdir_find_drive+0xba>
   14aca:	b8 01       	movw	r22, r16
   14acc:	c6 01       	movw	r24, r12
   14ace:	0e 94 6d 33 	call	0x66da	; 0x66da <MATCHI>
			continue;

		hpdir_init();
   14ad2:	89 2b       	or	r24, r25
   14ad4:	f1 f2       	breq	.-68     	; 0x14a92 <hpdir_find_drive+0x104>

		if(verbose)
   14ad6:	c0 de       	rcall	.-640    	; 0x14858 <hpdir_init>
   14ad8:	ab 28       	or	r10, r11
			printf("Found Model: %s\n", model);
   14ada:	61 f0       	breq	.+24     	; 0x14af4 <hpdir_find_drive+0x166>
   14adc:	ed b7       	in	r30, 0x3d	; 61
   14ade:	fe b7       	in	r31, 0x3e	; 62
   14ae0:	d5 82       	std	Z+5, r13	; 0x05
   14ae2:	c4 82       	std	Z+4, r12	; 0x04
   14ae4:	87 e5       	ldi	r24, 0x57	; 87
   14ae6:	9f e1       	ldi	r25, 0x1F	; 31
   14ae8:	a0 e0       	ldi	r26, 0x00	; 0
   14aea:	81 83       	std	Z+1, r24	; 0x01
   14aec:	92 83       	std	Z+2, r25	; 0x02
   14aee:	a3 83       	std	Z+3, r26	; 0x03
   14af0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

		strncpy(hpdir.model,token,sizeof(hpdir.model)-2);				// 1 Model
   14af4:	4e e1       	ldi	r20, 0x1E	; 30
   14af6:	50 e0       	ldi	r21, 0x00	; 0
   14af8:	b8 01       	movw	r22, r16
   14afa:	80 e9       	ldi	r24, 0x90	; 144
   14afc:	90 e2       	ldi	r25, 0x20	; 32
   14afe:	0e 94 6c 32 	call	0x64d8	; 0x64d8 <strncpy>

		ptr = get_token(ptr, token, 	sizeof(token)-2);				// =
   14b02:	4e e7       	ldi	r20, 0x7E	; 126
   14b04:	50 e0       	ldi	r21, 0x00	; 0
   14b06:	b8 01       	movw	r22, r16
   14b08:	c4 01       	movw	r24, r8
   14b0a:	0e 94 21 34 	call	0x6842	; 0x6842 <get_token>

		ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);	// 2 Comment
   14b0e:	4e e3       	ldi	r20, 0x3E	; 62
   14b10:	50 e0       	ldi	r21, 0x00	; 0
   14b12:	60 eb       	ldi	r22, 0xB0	; 176
   14b14:	70 e2       	ldi	r23, 0x20	; 32
   14b16:	0e 94 21 34 	call	0x6842	; 0x6842 <get_token>

		ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);		// 3 AMIGO/SS80/CS80
   14b1a:	4e e1       	ldi	r20, 0x1E	; 30
   14b1c:	50 e0       	ldi	r21, 0x00	; 0
   14b1e:	60 ef       	ldi	r22, 0xF0	; 240
   14b20:	70 e2       	ldi	r23, 0x20	; 32
   14b22:	0e 94 21 34 	call	0x6842	; 0x6842 <get_token>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 4 Identify ID
   14b26:	4e e7       	ldi	r20, 0x7E	; 126
   14b28:	50 e0       	ldi	r21, 0x00	; 0
   14b2a:	b8 01       	movw	r22, r16
   14b2c:	0e 94 21 34 	call	0x6842	; 0x6842 <get_token>
		hpdir.ID = get_value(token);
   14b30:	6c 01       	movw	r12, r24
   14b32:	c8 01       	movw	r24, r16
   14b34:	0e 94 64 34 	call	0x68c8	; 0x68c8 <get_value>
   14b38:	60 93 10 21 	sts	0x2110, r22	; 0x802110 <hpdir+0x80>
   14b3c:	70 93 11 21 	sts	0x2111, r23	; 0x802111 <hpdir+0x81>
   14b40:	80 93 12 21 	sts	0x2112, r24	; 0x802112 <hpdir+0x82>
   14b44:	90 93 13 21 	sts	0x2113, r25	; 0x802113 <hpdir+0x83>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 5 MASK STAT 2
   14b48:	4e e7       	ldi	r20, 0x7E	; 126
   14b4a:	50 e0       	ldi	r21, 0x00	; 0
   14b4c:	b8 01       	movw	r22, r16
   14b4e:	c6 01       	movw	r24, r12
   14b50:	0e 94 21 34 	call	0x6842	; 0x6842 <get_token>
		hpdir.mask_stat2 = get_value(token);
   14b54:	6c 01       	movw	r12, r24
   14b56:	c8 01       	movw	r24, r16
   14b58:	0e 94 64 34 	call	0x68c8	; 0x68c8 <get_value>
   14b5c:	60 93 14 21 	sts	0x2114, r22	; 0x802114 <hpdir+0x84>
   14b60:	70 93 15 21 	sts	0x2115, r23	; 0x802115 <hpdir+0x85>
   14b64:	80 93 16 21 	sts	0x2116, r24	; 0x802116 <hpdir+0x86>
   14b68:	90 93 17 21 	sts	0x2117, r25	; 0x802117 <hpdir+0x87>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 6 STAT2
   14b6c:	4e e7       	ldi	r20, 0x7E	; 126
   14b6e:	50 e0       	ldi	r21, 0x00	; 0
   14b70:	b8 01       	movw	r22, r16
   14b72:	c6 01       	movw	r24, r12
   14b74:	0e 94 21 34 	call	0x6842	; 0x6842 <get_token>
		hpdir.id_stat2 = get_value(token);
   14b78:	6c 01       	movw	r12, r24
   14b7a:	c8 01       	movw	r24, r16
   14b7c:	0e 94 64 34 	call	0x68c8	; 0x68c8 <get_value>
   14b80:	60 93 18 21 	sts	0x2118, r22	; 0x802118 <hpdir+0x88>
   14b84:	70 93 19 21 	sts	0x2119, r23	; 0x802119 <hpdir+0x89>
   14b88:	80 93 1a 21 	sts	0x211A, r24	; 0x80211a <hpdir+0x8a>
   14b8c:	90 93 1b 21 	sts	0x211B, r25	; 0x80211b <hpdir+0x8b>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 7 BCD include model number
   14b90:	4e e7       	ldi	r20, 0x7E	; 126
   14b92:	50 e0       	ldi	r21, 0x00	; 0
   14b94:	b8 01       	movw	r22, r16
   14b96:	c6 01       	movw	r24, r12
   14b98:	0e 94 21 34 	call	0x6842	; 0x6842 <get_token>
		hpdir.DEVICE_NUMBER = get_value(token);
   14b9c:	6c 01       	movw	r12, r24
   14b9e:	c8 01       	movw	r24, r16
   14ba0:	0e 94 64 34 	call	0x68c8	; 0x68c8 <get_value>
   14ba4:	60 93 1c 21 	sts	0x211C, r22	; 0x80211c <hpdir+0x8c>
   14ba8:	70 93 1d 21 	sts	0x211D, r23	; 0x80211d <hpdir+0x8d>
   14bac:	80 93 1e 21 	sts	0x211E, r24	; 0x80211e <hpdir+0x8e>
   14bb0:	90 93 1f 21 	sts	0x211F, r25	; 0x80211f <hpdir+0x8f>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 8 Units installed
   14bb4:	4e e7       	ldi	r20, 0x7E	; 126
   14bb6:	50 e0       	ldi	r21, 0x00	; 0
   14bb8:	b8 01       	movw	r22, r16
   14bba:	c6 01       	movw	r24, r12
   14bbc:	0e 94 21 34 	call	0x6842	; 0x6842 <get_token>
		hpdir.UNITS_INSTALLED = get_value(token);
   14bc0:	6c 01       	movw	r12, r24
   14bc2:	c8 01       	movw	r24, r16
   14bc4:	0e 94 64 34 	call	0x68c8	; 0x68c8 <get_value>
   14bc8:	60 93 20 21 	sts	0x2120, r22	; 0x802120 <hpdir+0x90>
   14bcc:	70 93 21 21 	sts	0x2121, r23	; 0x802121 <hpdir+0x91>
   14bd0:	80 93 22 21 	sts	0x2122, r24	; 0x802122 <hpdir+0x92>
   14bd4:	90 93 23 21 	sts	0x2123, r25	; 0x802123 <hpdir+0x93>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 9 Cylinders
   14bd8:	4e e7       	ldi	r20, 0x7E	; 126
   14bda:	50 e0       	ldi	r21, 0x00	; 0
   14bdc:	b8 01       	movw	r22, r16
   14bde:	c6 01       	movw	r24, r12
   14be0:	0e 94 21 34 	call	0x6842	; 0x6842 <get_token>
		hpdir.CYLINDERS = get_value(token);
   14be4:	6c 01       	movw	r12, r24
   14be6:	c8 01       	movw	r24, r16
   14be8:	0e 94 64 34 	call	0x68c8	; 0x68c8 <get_value>
   14bec:	60 93 24 21 	sts	0x2124, r22	; 0x802124 <hpdir+0x94>
   14bf0:	70 93 25 21 	sts	0x2125, r23	; 0x802125 <hpdir+0x95>
   14bf4:	80 93 26 21 	sts	0x2126, r24	; 0x802126 <hpdir+0x96>
   14bf8:	90 93 27 21 	sts	0x2127, r25	; 0x802127 <hpdir+0x97>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 10 Heads
   14bfc:	4e e7       	ldi	r20, 0x7E	; 126
   14bfe:	50 e0       	ldi	r21, 0x00	; 0
   14c00:	b8 01       	movw	r22, r16
   14c02:	c6 01       	movw	r24, r12
   14c04:	0e 94 21 34 	call	0x6842	; 0x6842 <get_token>
		hpdir.HEADS = get_value(token);
   14c08:	6c 01       	movw	r12, r24
   14c0a:	c8 01       	movw	r24, r16
   14c0c:	0e 94 64 34 	call	0x68c8	; 0x68c8 <get_value>
   14c10:	60 93 28 21 	sts	0x2128, r22	; 0x802128 <hpdir+0x98>
   14c14:	70 93 29 21 	sts	0x2129, r23	; 0x802129 <hpdir+0x99>
   14c18:	80 93 2a 21 	sts	0x212A, r24	; 0x80212a <hpdir+0x9a>
   14c1c:	90 93 2b 21 	sts	0x212B, r25	; 0x80212b <hpdir+0x9b>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 11 Sectors
   14c20:	4e e7       	ldi	r20, 0x7E	; 126
   14c22:	50 e0       	ldi	r21, 0x00	; 0
   14c24:	b8 01       	movw	r22, r16
   14c26:	c6 01       	movw	r24, r12
   14c28:	0e 94 21 34 	call	0x6842	; 0x6842 <get_token>
		hpdir.SECTORS = get_value(token);
   14c2c:	6c 01       	movw	r12, r24
   14c2e:	c8 01       	movw	r24, r16
   14c30:	0e 94 64 34 	call	0x68c8	; 0x68c8 <get_value>
   14c34:	60 93 2c 21 	sts	0x212C, r22	; 0x80212c <hpdir+0x9c>
   14c38:	70 93 2d 21 	sts	0x212D, r23	; 0x80212d <hpdir+0x9d>
   14c3c:	80 93 2e 21 	sts	0x212E, r24	; 0x80212e <hpdir+0x9e>
   14c40:	90 93 2f 21 	sts	0x212F, r25	; 0x80212f <hpdir+0x9f>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 12 Bytes Per Block/Sector
   14c44:	4e e7       	ldi	r20, 0x7E	; 126
   14c46:	50 e0       	ldi	r21, 0x00	; 0
   14c48:	b8 01       	movw	r22, r16
   14c4a:	c6 01       	movw	r24, r12
   14c4c:	0e 94 21 34 	call	0x6842	; 0x6842 <get_token>
		hpdir.BYTES_PER_SECTOR = get_value(token);
   14c50:	6c 01       	movw	r12, r24
   14c52:	c8 01       	movw	r24, r16
   14c54:	0e 94 64 34 	call	0x68c8	; 0x68c8 <get_value>
   14c58:	60 93 30 21 	sts	0x2130, r22	; 0x802130 <hpdir+0xa0>
   14c5c:	70 93 31 21 	sts	0x2131, r23	; 0x802131 <hpdir+0xa1>
   14c60:	80 93 32 21 	sts	0x2132, r24	; 0x802132 <hpdir+0xa2>
   14c64:	90 93 33 21 	sts	0x2133, r25	; 0x802133 <hpdir+0xa3>

		ptr = get_token(ptr, token, 		sizeof(token)-2);			// 13 Interleave
   14c68:	4e e7       	ldi	r20, 0x7E	; 126
   14c6a:	50 e0       	ldi	r21, 0x00	; 0
   14c6c:	b8 01       	movw	r22, r16
   14c6e:	c6 01       	movw	r24, r12
   14c70:	0e 94 21 34 	call	0x6842	; 0x6842 <get_token>
		hpdir.INTERLEAVE = get_value(token);
   14c74:	c8 01       	movw	r24, r16
   14c76:	0e 94 64 34 	call	0x68c8	; 0x68c8 <get_value>
   14c7a:	60 93 34 21 	sts	0x2134, r22	; 0x802134 <hpdir+0xa4>
   14c7e:	70 93 35 21 	sts	0x2135, r23	; 0x802135 <hpdir+0xa5>
   14c82:	80 93 36 21 	sts	0x2136, r24	; 0x802136 <hpdir+0xa6>
   14c86:	90 93 37 21 	sts	0x2137, r25	; 0x802137 <hpdir+0xa7>

		// Computed values
		hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   14c8a:	20 91 24 21 	lds	r18, 0x2124	; 0x802124 <hpdir+0x94>
   14c8e:	30 91 25 21 	lds	r19, 0x2125	; 0x802125 <hpdir+0x95>
   14c92:	40 91 26 21 	lds	r20, 0x2126	; 0x802126 <hpdir+0x96>
   14c96:	50 91 27 21 	lds	r21, 0x2127	; 0x802127 <hpdir+0x97>
   14c9a:	60 91 28 21 	lds	r22, 0x2128	; 0x802128 <hpdir+0x98>
   14c9e:	70 91 29 21 	lds	r23, 0x2129	; 0x802129 <hpdir+0x99>
   14ca2:	80 91 2a 21 	lds	r24, 0x212A	; 0x80212a <hpdir+0x9a>
   14ca6:	90 91 2b 21 	lds	r25, 0x212B	; 0x80212b <hpdir+0x9b>
   14caa:	0e 94 c2 e3 	call	0x1c784	; 0x1c784 <__mulsi3>
   14cae:	9b 01       	movw	r18, r22
   14cb0:	ac 01       	movw	r20, r24
   14cb2:	60 91 2c 21 	lds	r22, 0x212C	; 0x80212c <hpdir+0x9c>
   14cb6:	70 91 2d 21 	lds	r23, 0x212D	; 0x80212d <hpdir+0x9d>
   14cba:	80 91 2e 21 	lds	r24, 0x212E	; 0x80212e <hpdir+0x9e>
   14cbe:	90 91 2f 21 	lds	r25, 0x212F	; 0x80212f <hpdir+0x9f>
   14cc2:	0e 94 c2 e3 	call	0x1c784	; 0x1c784 <__mulsi3>
   14cc6:	60 93 3c 21 	sts	0x213C, r22	; 0x80213c <hpdir+0xac>
   14cca:	70 93 3d 21 	sts	0x213D, r23	; 0x80213d <hpdir+0xad>
   14cce:	80 93 3e 21 	sts	0x213E, r24	; 0x80213e <hpdir+0xae>
   14cd2:	90 93 3f 21 	sts	0x213F, r25	; 0x80213f <hpdir+0xaf>
		{
			if(verbose)
				printf("Error /hpdir.ini parsing\n");
			break;
		}
		found = 1;
   14cd6:	01 e0       	ldi	r16, 0x01	; 1
		break;

	}	// while
	fclose(cfg);
   14cd8:	10 e0       	ldi	r17, 0x00	; 0
   14cda:	c7 01       	movw	r24, r14
   14cdc:	0e 94 dc 7d 	call	0xfbb8	; 0xfbb8 <fclose>
	return(found);
   14ce0:	c8 01       	movw	r24, r16

	if(cfg == NULL)
	{
		if(verbose)
			printf("Error: hpdir.ini not found!\n");
		return(0);
   14ce2:	02 c0       	rjmp	.+4      	; 0x14ce8 <hpdir_find_drive+0x35a>
   14ce4:	80 e0       	ldi	r24, 0x00	; 0
		break;

	}	// while
	fclose(cfg);
	return(found);
}
   14ce6:	90 e0       	ldi	r25, 0x00	; 0
   14ce8:	c7 57       	subi	r28, 0x77	; 119
   14cea:	de 4f       	sbci	r29, 0xFE	; 254
   14cec:	0f b6       	in	r0, 0x3f	; 63
   14cee:	f8 94       	cli
   14cf0:	de bf       	out	0x3e, r29	; 62
   14cf2:	0f be       	out	0x3f, r0	; 63
   14cf4:	cd bf       	out	0x3d, r28	; 61
   14cf6:	df 91       	pop	r29
   14cf8:	cf 91       	pop	r28
   14cfa:	1f 91       	pop	r17
   14cfc:	0f 91       	pop	r16
   14cfe:	ff 90       	pop	r15
   14d00:	ef 90       	pop	r14
   14d02:	df 90       	pop	r13
   14d04:	cf 90       	pop	r12
   14d06:	bf 90       	pop	r11
   14d08:	af 90       	pop	r10
   14d0a:	9f 90       	pop	r9
   14d0c:	8f 90       	pop	r8
   14d0e:	6f 90       	pop	r6
   14d10:	5f 90       	pop	r5
   14d12:	4f 90       	pop	r4
   14d14:	3f 90       	pop	r3
   14d16:	2f 90       	pop	r2
   14d18:	08 95       	ret

00014d1a <SS80ControllerPack>:
   14d1a:	0f 93       	push	r16
   14d1c:	1f 93       	push	r17
   14d1e:	25 e0       	ldi	r18, 0x05	; 5
   14d20:	30 e0       	ldi	r19, 0x00	; 0
   14d22:	fc 01       	movw	r30, r24
   14d24:	31 83       	std	Z+1, r19	; 0x01
   14d26:	20 83       	st	Z, r18
   14d28:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14d2c:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14d30:	06 81       	ldd	r16, Z+6	; 0x06
   14d32:	17 81       	ldd	r17, Z+7	; 0x07
   14d34:	20 e0       	ldi	r18, 0x00	; 0
   14d36:	30 e0       	ldi	r19, 0x00	; 0
   14d38:	42 e0       	ldi	r20, 0x02	; 2
   14d3a:	50 e0       	ldi	r21, 0x00	; 0
   14d3c:	60 e0       	ldi	r22, 0x00	; 0
   14d3e:	70 e0       	ldi	r23, 0x00	; 0
   14d40:	87 e3       	ldi	r24, 0x37	; 55
   14d42:	99 e1       	ldi	r25, 0x19	; 25
   14d44:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   14d48:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14d4c:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14d50:	00 85       	ldd	r16, Z+8	; 0x08
   14d52:	11 85       	ldd	r17, Z+9	; 0x09
   14d54:	20 e0       	ldi	r18, 0x00	; 0
   14d56:	30 e0       	ldi	r19, 0x00	; 0
   14d58:	42 e0       	ldi	r20, 0x02	; 2
   14d5a:	50 e0       	ldi	r21, 0x00	; 0
   14d5c:	61 e0       	ldi	r22, 0x01	; 1
   14d5e:	70 e0       	ldi	r23, 0x00	; 0
   14d60:	87 e3       	ldi	r24, 0x37	; 55
   14d62:	99 e1       	ldi	r25, 0x19	; 25
   14d64:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   14d68:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14d6c:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14d70:	02 85       	ldd	r16, Z+10	; 0x0a
   14d72:	10 e0       	ldi	r17, 0x00	; 0
   14d74:	20 e0       	ldi	r18, 0x00	; 0
   14d76:	30 e0       	ldi	r19, 0x00	; 0
   14d78:	41 e0       	ldi	r20, 0x01	; 1
   14d7a:	50 e0       	ldi	r21, 0x00	; 0
   14d7c:	64 e0       	ldi	r22, 0x04	; 4
   14d7e:	70 e0       	ldi	r23, 0x00	; 0
   14d80:	87 e3       	ldi	r24, 0x37	; 55
   14d82:	99 e1       	ldi	r25, 0x19	; 25
   14d84:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   14d88:	87 e3       	ldi	r24, 0x37	; 55
   14d8a:	99 e1       	ldi	r25, 0x19	; 25
   14d8c:	1f 91       	pop	r17
   14d8e:	0f 91       	pop	r16
   14d90:	08 95       	ret

00014d92 <SS80UnitPack>:
   14d92:	0f 93       	push	r16
   14d94:	1f 93       	push	r17
   14d96:	23 e1       	ldi	r18, 0x13	; 19
   14d98:	30 e0       	ldi	r19, 0x00	; 0
   14d9a:	fc 01       	movw	r30, r24
   14d9c:	31 83       	std	Z+1, r19	; 0x01
   14d9e:	20 83       	st	Z, r18
   14da0:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14da4:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14da8:	03 85       	ldd	r16, Z+11	; 0x0b
   14daa:	10 e0       	ldi	r17, 0x00	; 0
   14dac:	20 e0       	ldi	r18, 0x00	; 0
   14dae:	30 e0       	ldi	r19, 0x00	; 0
   14db0:	41 e0       	ldi	r20, 0x01	; 1
   14db2:	50 e0       	ldi	r21, 0x00	; 0
   14db4:	60 e0       	ldi	r22, 0x00	; 0
   14db6:	70 e0       	ldi	r23, 0x00	; 0
   14db8:	84 e2       	ldi	r24, 0x24	; 36
   14dba:	99 e1       	ldi	r25, 0x19	; 25
   14dbc:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   14dc0:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14dc4:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14dc8:	04 85       	ldd	r16, Z+12	; 0x0c
   14dca:	15 85       	ldd	r17, Z+13	; 0x0d
   14dcc:	26 85       	ldd	r18, Z+14	; 0x0e
   14dce:	37 85       	ldd	r19, Z+15	; 0x0f
   14dd0:	43 e0       	ldi	r20, 0x03	; 3
   14dd2:	50 e0       	ldi	r21, 0x00	; 0
   14dd4:	61 e0       	ldi	r22, 0x01	; 1
   14dd6:	70 e0       	ldi	r23, 0x00	; 0
   14dd8:	84 e2       	ldi	r24, 0x24	; 36
   14dda:	99 e1       	ldi	r25, 0x19	; 25
   14ddc:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   14de0:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14de4:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14de8:	00 89       	ldd	r16, Z+16	; 0x10
   14dea:	11 89       	ldd	r17, Z+17	; 0x11
   14dec:	20 e0       	ldi	r18, 0x00	; 0
   14dee:	30 e0       	ldi	r19, 0x00	; 0
   14df0:	42 e0       	ldi	r20, 0x02	; 2
   14df2:	50 e0       	ldi	r21, 0x00	; 0
   14df4:	64 e0       	ldi	r22, 0x04	; 4
   14df6:	70 e0       	ldi	r23, 0x00	; 0
   14df8:	84 e2       	ldi	r24, 0x24	; 36
   14dfa:	99 e1       	ldi	r25, 0x19	; 25
   14dfc:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   14e00:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14e04:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14e08:	02 89       	ldd	r16, Z+18	; 0x12
   14e0a:	10 e0       	ldi	r17, 0x00	; 0
   14e0c:	20 e0       	ldi	r18, 0x00	; 0
   14e0e:	30 e0       	ldi	r19, 0x00	; 0
   14e10:	41 e0       	ldi	r20, 0x01	; 1
   14e12:	50 e0       	ldi	r21, 0x00	; 0
   14e14:	66 e0       	ldi	r22, 0x06	; 6
   14e16:	70 e0       	ldi	r23, 0x00	; 0
   14e18:	84 e2       	ldi	r24, 0x24	; 36
   14e1a:	99 e1       	ldi	r25, 0x19	; 25
   14e1c:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   14e20:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14e24:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14e28:	03 89       	ldd	r16, Z+19	; 0x13
   14e2a:	10 e0       	ldi	r17, 0x00	; 0
   14e2c:	20 e0       	ldi	r18, 0x00	; 0
   14e2e:	30 e0       	ldi	r19, 0x00	; 0
   14e30:	41 e0       	ldi	r20, 0x01	; 1
   14e32:	50 e0       	ldi	r21, 0x00	; 0
   14e34:	67 e0       	ldi	r22, 0x07	; 7
   14e36:	70 e0       	ldi	r23, 0x00	; 0
   14e38:	84 e2       	ldi	r24, 0x24	; 36
   14e3a:	99 e1       	ldi	r25, 0x19	; 25
   14e3c:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   14e40:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14e44:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14e48:	04 89       	ldd	r16, Z+20	; 0x14
   14e4a:	15 89       	ldd	r17, Z+21	; 0x15
   14e4c:	20 e0       	ldi	r18, 0x00	; 0
   14e4e:	30 e0       	ldi	r19, 0x00	; 0
   14e50:	42 e0       	ldi	r20, 0x02	; 2
   14e52:	50 e0       	ldi	r21, 0x00	; 0
   14e54:	68 e0       	ldi	r22, 0x08	; 8
   14e56:	70 e0       	ldi	r23, 0x00	; 0
   14e58:	84 e2       	ldi	r24, 0x24	; 36
   14e5a:	99 e1       	ldi	r25, 0x19	; 25
   14e5c:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   14e60:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14e64:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14e68:	06 89       	ldd	r16, Z+22	; 0x16
   14e6a:	17 89       	ldd	r17, Z+23	; 0x17
   14e6c:	20 e0       	ldi	r18, 0x00	; 0
   14e6e:	30 e0       	ldi	r19, 0x00	; 0
   14e70:	42 e0       	ldi	r20, 0x02	; 2
   14e72:	50 e0       	ldi	r21, 0x00	; 0
   14e74:	6a e0       	ldi	r22, 0x0A	; 10
   14e76:	70 e0       	ldi	r23, 0x00	; 0
   14e78:	84 e2       	ldi	r24, 0x24	; 36
   14e7a:	99 e1       	ldi	r25, 0x19	; 25
   14e7c:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   14e80:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14e84:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14e88:	00 8d       	ldd	r16, Z+24	; 0x18
   14e8a:	11 8d       	ldd	r17, Z+25	; 0x19
   14e8c:	20 e0       	ldi	r18, 0x00	; 0
   14e8e:	30 e0       	ldi	r19, 0x00	; 0
   14e90:	42 e0       	ldi	r20, 0x02	; 2
   14e92:	50 e0       	ldi	r21, 0x00	; 0
   14e94:	6c e0       	ldi	r22, 0x0C	; 12
   14e96:	70 e0       	ldi	r23, 0x00	; 0
   14e98:	84 e2       	ldi	r24, 0x24	; 36
   14e9a:	99 e1       	ldi	r25, 0x19	; 25
   14e9c:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   14ea0:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14ea4:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14ea8:	02 8d       	ldd	r16, Z+26	; 0x1a
   14eaa:	13 8d       	ldd	r17, Z+27	; 0x1b
   14eac:	20 e0       	ldi	r18, 0x00	; 0
   14eae:	30 e0       	ldi	r19, 0x00	; 0
   14eb0:	42 e0       	ldi	r20, 0x02	; 2
   14eb2:	50 e0       	ldi	r21, 0x00	; 0
   14eb4:	6e e0       	ldi	r22, 0x0E	; 14
   14eb6:	70 e0       	ldi	r23, 0x00	; 0
   14eb8:	84 e2       	ldi	r24, 0x24	; 36
   14eba:	99 e1       	ldi	r25, 0x19	; 25
   14ebc:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   14ec0:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14ec4:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14ec8:	04 8d       	ldd	r16, Z+28	; 0x1c
   14eca:	10 e0       	ldi	r17, 0x00	; 0
   14ecc:	20 e0       	ldi	r18, 0x00	; 0
   14ece:	30 e0       	ldi	r19, 0x00	; 0
   14ed0:	41 e0       	ldi	r20, 0x01	; 1
   14ed2:	50 e0       	ldi	r21, 0x00	; 0
   14ed4:	60 e1       	ldi	r22, 0x10	; 16
   14ed6:	70 e0       	ldi	r23, 0x00	; 0
   14ed8:	84 e2       	ldi	r24, 0x24	; 36
   14eda:	99 e1       	ldi	r25, 0x19	; 25
   14edc:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   14ee0:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14ee4:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14ee8:	05 8d       	ldd	r16, Z+29	; 0x1d
   14eea:	10 e0       	ldi	r17, 0x00	; 0
   14eec:	20 e0       	ldi	r18, 0x00	; 0
   14eee:	30 e0       	ldi	r19, 0x00	; 0
   14ef0:	41 e0       	ldi	r20, 0x01	; 1
   14ef2:	50 e0       	ldi	r21, 0x00	; 0
   14ef4:	61 e1       	ldi	r22, 0x11	; 17
   14ef6:	70 e0       	ldi	r23, 0x00	; 0
   14ef8:	84 e2       	ldi	r24, 0x24	; 36
   14efa:	99 e1       	ldi	r25, 0x19	; 25
   14efc:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   14f00:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14f04:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14f08:	06 8d       	ldd	r16, Z+30	; 0x1e
   14f0a:	10 e0       	ldi	r17, 0x00	; 0
   14f0c:	20 e0       	ldi	r18, 0x00	; 0
   14f0e:	30 e0       	ldi	r19, 0x00	; 0
   14f10:	41 e0       	ldi	r20, 0x01	; 1
   14f12:	50 e0       	ldi	r21, 0x00	; 0
   14f14:	62 e1       	ldi	r22, 0x12	; 18
   14f16:	70 e0       	ldi	r23, 0x00	; 0
   14f18:	84 e2       	ldi	r24, 0x24	; 36
   14f1a:	99 e1       	ldi	r25, 0x19	; 25
   14f1c:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   14f20:	84 e2       	ldi	r24, 0x24	; 36
   14f22:	99 e1       	ldi	r25, 0x19	; 25
   14f24:	1f 91       	pop	r17
   14f26:	0f 91       	pop	r16
   14f28:	08 95       	ret

00014f2a <SS80VolumePack>:
   14f2a:	0f 93       	push	r16
   14f2c:	1f 93       	push	r17
   14f2e:	2d e0       	ldi	r18, 0x0D	; 13
   14f30:	30 e0       	ldi	r19, 0x00	; 0
   14f32:	fc 01       	movw	r30, r24
   14f34:	31 83       	std	Z+1, r19	; 0x01
   14f36:	20 83       	st	Z, r18
   14f38:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14f3c:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14f40:	07 8d       	ldd	r16, Z+31	; 0x1f
   14f42:	10 a1       	ldd	r17, Z+32	; 0x20
   14f44:	21 a1       	ldd	r18, Z+33	; 0x21
   14f46:	32 a1       	ldd	r19, Z+34	; 0x22
   14f48:	43 e0       	ldi	r20, 0x03	; 3
   14f4a:	50 e0       	ldi	r21, 0x00	; 0
   14f4c:	60 e0       	ldi	r22, 0x00	; 0
   14f4e:	70 e0       	ldi	r23, 0x00	; 0
   14f50:	87 e1       	ldi	r24, 0x17	; 23
   14f52:	99 e1       	ldi	r25, 0x19	; 25
   14f54:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   14f58:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14f5c:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14f60:	03 a1       	ldd	r16, Z+35	; 0x23
   14f62:	10 e0       	ldi	r17, 0x00	; 0
   14f64:	20 e0       	ldi	r18, 0x00	; 0
   14f66:	30 e0       	ldi	r19, 0x00	; 0
   14f68:	41 e0       	ldi	r20, 0x01	; 1
   14f6a:	50 e0       	ldi	r21, 0x00	; 0
   14f6c:	63 e0       	ldi	r22, 0x03	; 3
   14f6e:	70 e0       	ldi	r23, 0x00	; 0
   14f70:	87 e1       	ldi	r24, 0x17	; 23
   14f72:	99 e1       	ldi	r25, 0x19	; 25
   14f74:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   14f78:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14f7c:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14f80:	04 a1       	ldd	r16, Z+36	; 0x24
   14f82:	15 a1       	ldd	r17, Z+37	; 0x25
   14f84:	20 e0       	ldi	r18, 0x00	; 0
   14f86:	30 e0       	ldi	r19, 0x00	; 0
   14f88:	42 e0       	ldi	r20, 0x02	; 2
   14f8a:	50 e0       	ldi	r21, 0x00	; 0
   14f8c:	64 e0       	ldi	r22, 0x04	; 4
   14f8e:	70 e0       	ldi	r23, 0x00	; 0
   14f90:	87 e1       	ldi	r24, 0x17	; 23
   14f92:	99 e1       	ldi	r25, 0x19	; 25
   14f94:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   14f98:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14f9c:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14fa0:	06 a1       	ldd	r16, Z+38	; 0x26
   14fa2:	17 a1       	ldd	r17, Z+39	; 0x27
   14fa4:	20 a5       	ldd	r18, Z+40	; 0x28
   14fa6:	31 a5       	ldd	r19, Z+41	; 0x29
   14fa8:	46 e0       	ldi	r20, 0x06	; 6
   14faa:	50 e0       	ldi	r21, 0x00	; 0
   14fac:	66 e0       	ldi	r22, 0x06	; 6
   14fae:	70 e0       	ldi	r23, 0x00	; 0
   14fb0:	87 e1       	ldi	r24, 0x17	; 23
   14fb2:	99 e1       	ldi	r25, 0x19	; 25
   14fb4:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   14fb8:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   14fbc:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   14fc0:	02 a5       	ldd	r16, Z+42	; 0x2a
   14fc2:	10 e0       	ldi	r17, 0x00	; 0
   14fc4:	20 e0       	ldi	r18, 0x00	; 0
   14fc6:	30 e0       	ldi	r19, 0x00	; 0
   14fc8:	41 e0       	ldi	r20, 0x01	; 1
   14fca:	50 e0       	ldi	r21, 0x00	; 0
   14fcc:	6c e0       	ldi	r22, 0x0C	; 12
   14fce:	70 e0       	ldi	r23, 0x00	; 0
   14fd0:	87 e1       	ldi	r24, 0x17	; 23
   14fd2:	99 e1       	ldi	r25, 0x19	; 25
   14fd4:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   14fd8:	87 e1       	ldi	r24, 0x17	; 23
   14fda:	99 e1       	ldi	r25, 0x19	; 25
   14fdc:	1f 91       	pop	r17
   14fde:	0f 91       	pop	r16
   14fe0:	08 95       	ret

00014fe2 <SS80_test_extended_status>:
   14fe2:	9b 01       	movw	r18, r22
   14fe4:	43 e0       	ldi	r20, 0x03	; 3
   14fe6:	35 95       	asr	r19
   14fe8:	27 95       	ror	r18
   14fea:	4a 95       	dec	r20
   14fec:	e1 f7       	brne	.-8      	; 0x14fe6 <SS80_test_extended_status+0x4>
   14fee:	82 0f       	add	r24, r18
   14ff0:	93 1f       	adc	r25, r19
   14ff2:	67 70       	andi	r22, 0x07	; 7
   14ff4:	77 27       	eor	r23, r23
   14ff6:	20 e8       	ldi	r18, 0x80	; 128
   14ff8:	30 e0       	ldi	r19, 0x00	; 0
   14ffa:	02 c0       	rjmp	.+4      	; 0x15000 <SS80_test_extended_status+0x1e>
   14ffc:	35 95       	asr	r19
   14ffe:	27 95       	ror	r18
   15000:	6a 95       	dec	r22
   15002:	e2 f7       	brpl	.-8      	; 0x14ffc <SS80_test_extended_status+0x1a>
   15004:	fc 01       	movw	r30, r24
   15006:	80 81       	ld	r24, Z
   15008:	28 23       	and	r18, r24
   1500a:	81 e0       	ldi	r24, 0x01	; 1
   1500c:	90 e0       	ldi	r25, 0x00	; 0
   1500e:	11 f4       	brne	.+4      	; 0x15014 <SS80_test_extended_status+0x32>
   15010:	80 e0       	ldi	r24, 0x00	; 0
   15012:	90 e0       	ldi	r25, 0x00	; 0
   15014:	08 95       	ret

00015016 <SS80_display_extended_status>:
   15016:	6f 92       	push	r6
   15018:	7f 92       	push	r7
   1501a:	8f 92       	push	r8
   1501c:	ef 92       	push	r14
   1501e:	ff 92       	push	r15
   15020:	0f 93       	push	r16
   15022:	1f 93       	push	r17
   15024:	cf 93       	push	r28
   15026:	df 93       	push	r29
   15028:	ad b7       	in	r26, 0x3d	; 61
   1502a:	be b7       	in	r27, 0x3e	; 62
   1502c:	17 97       	sbiw	r26, 0x07	; 7
   1502e:	0f b6       	in	r0, 0x3f	; 63
   15030:	f8 94       	cli
   15032:	be bf       	out	0x3e, r27	; 62
   15034:	0f be       	out	0x3f, r0	; 63
   15036:	ad bf       	out	0x3d, r26	; 61
   15038:	fc 01       	movw	r30, r24
   1503a:	ac 01       	movw	r20, r24
   1503c:	48 5f       	subi	r20, 0xF8	; 248
   1503e:	5f 4f       	sbci	r21, 0xFF	; 255
   15040:	20 e0       	ldi	r18, 0x00	; 0
   15042:	30 e0       	ldi	r19, 0x00	; 0
   15044:	a1 91       	ld	r26, Z+
   15046:	aa 23       	and	r26, r26
   15048:	11 f0       	breq	.+4      	; 0x1504e <SS80_display_extended_status+0x38>
   1504a:	21 e0       	ldi	r18, 0x01	; 1
   1504c:	30 e0       	ldi	r19, 0x00	; 0
   1504e:	e4 17       	cp	r30, r20
   15050:	f5 07       	cpc	r31, r21
   15052:	c1 f7       	brne	.-16     	; 0x15044 <SS80_display_extended_status+0x2e>
   15054:	23 2b       	or	r18, r19
   15056:	81 f1       	breq	.+96     	; 0x150b8 <SS80_display_extended_status+0xa2>
   15058:	ec 01       	movw	r28, r24
   1505a:	ed b7       	in	r30, 0x3d	; 61
   1505c:	fe b7       	in	r31, 0x3e	; 62
   1505e:	75 83       	std	Z+5, r23	; 0x05
   15060:	64 83       	std	Z+4, r22	; 0x04
   15062:	86 ec       	ldi	r24, 0xC6	; 198
   15064:	95 e2       	ldi	r25, 0x25	; 37
   15066:	a0 e0       	ldi	r26, 0x00	; 0
   15068:	81 83       	std	Z+1, r24	; 0x01
   1506a:	92 83       	std	Z+2, r25	; 0x02
   1506c:	a3 83       	std	Z+3, r26	; 0x03
   1506e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   15072:	01 ed       	ldi	r16, 0xD1	; 209
   15074:	11 e0       	ldi	r17, 0x01	; 1
   15076:	8b eb       	ldi	r24, 0xBB	; 187
   15078:	95 e2       	ldi	r25, 0x25	; 37
   1507a:	3c 01       	movw	r6, r24
   1507c:	81 2c       	mov	r8, r1
   1507e:	f8 01       	movw	r30, r16
   15080:	e0 80       	ld	r14, Z
{
#ifdef ESP8266
    hspi_RX((uint8_t *) data,count);
#endif
#ifdef AVR
    SPI0_RX((uint8_t *)data,count);
   15082:	f1 80       	ldd	r15, Z+1	; 0x01
   15084:	ff ef       	ldi	r31, 0xFF	; 255
   15086:	ef 16       	cp	r14, r31
   15088:	ff 06       	cpc	r15, r31
   1508a:	b1 f0       	breq	.+44     	; 0x150b8 <SS80_display_extended_status+0xa2>
   1508c:	b7 01       	movw	r22, r14
   1508e:	ce 01       	movw	r24, r28
   15090:	a8 df       	rcall	.-176    	; 0x14fe2 <SS80_test_extended_status>
   15092:	89 2b       	or	r24, r25
   15094:	71 f0       	breq	.+28     	; 0x150b2 <SS80_display_extended_status+0x9c>
   15096:	f8 01       	movw	r30, r16
   15098:	82 81       	ldd	r24, Z+2	; 0x02
   1509a:	93 81       	ldd	r25, Z+3	; 0x03
   1509c:	ed b7       	in	r30, 0x3d	; 61
   1509e:	fe b7       	in	r31, 0x3e	; 62
   150a0:	97 83       	std	Z+7, r25	; 0x07
   150a2:	86 83       	std	Z+6, r24	; 0x06
   150a4:	f5 82       	std	Z+5, r15	; 0x05
   150a6:	e4 82       	std	Z+4, r14	; 0x04
   150a8:	61 82       	std	Z+1, r6	; 0x01
   150aa:	72 82       	std	Z+2, r7	; 0x02
   150ac:	83 82       	std	Z+3, r8	; 0x03
   150ae:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   150b2:	0c 5f       	subi	r16, 0xFC	; 252
   150b4:	1f 4f       	sbci	r17, 0xFF	; 255
   150b6:	e3 cf       	rjmp	.-58     	; 0x1507e <SS80_display_extended_status+0x68>
   150b8:	ad b7       	in	r26, 0x3d	; 61
   150ba:	be b7       	in	r27, 0x3e	; 62
   150bc:	17 96       	adiw	r26, 0x07	; 7
   150be:	0f b6       	in	r0, 0x3f	; 63
   150c0:	f8 94       	cli
   150c2:	be bf       	out	0x3e, r27	; 62
   150c4:	0f be       	out	0x3f, r0	; 63
   150c6:	ad bf       	out	0x3d, r26	; 61
   150c8:	df 91       	pop	r29
   150ca:	cf 91       	pop	r28
   150cc:	1f 91       	pop	r17
   150ce:	0f 91       	pop	r16
   150d0:	ff 90       	pop	r15
   150d2:	ef 90       	pop	r14
   150d4:	8f 90       	pop	r8
   150d6:	7f 90       	pop	r7
   150d8:	6f 90       	pop	r6
   150da:	08 95       	ret

000150dc <SS80_send_status>:
   150dc:	a9 e1       	ldi	r26, 0x19	; 25
   150de:	b0 e0       	ldi	r27, 0x00	; 0
   150e0:	e4 e7       	ldi	r30, 0x74	; 116
   150e2:	f8 ea       	ldi	r31, 0xA8	; 168
   150e4:	0c 94 92 e4 	jmp	0x1c924	; 0x1c924 <__prologue_saves__+0x18>
   150e8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   150ec:	85 ff       	sbrs	r24, 5
   150ee:	0a c0       	rjmp	.+20     	; 0x15104 <SS80_send_status+0x28>
   150f0:	87 ea       	ldi	r24, 0xA7	; 167
   150f2:	95 e2       	ldi	r25, 0x25	; 37
   150f4:	a0 e0       	ldi	r26, 0x00	; 0
   150f6:	ed b7       	in	r30, 0x3d	; 61
   150f8:	fe b7       	in	r31, 0x3e	; 62
   150fa:	81 83       	std	Z+1, r24	; 0x01
   150fc:	92 83       	std	Z+2, r25	; 0x02
   150fe:	a3 83       	std	Z+3, r26	; 0x03
   15100:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   15104:	ce 01       	movw	r24, r28
   15106:	04 96       	adiw	r24, 0x04	; 4
   15108:	7c 01       	movw	r14, r24
   1510a:	84 e1       	ldi	r24, 0x14	; 20
   1510c:	f7 01       	movw	r30, r14
   1510e:	11 92       	st	Z+, r1
   15110:	8a 95       	dec	r24
   15112:	e9 f7       	brne	.-6      	; 0x1510e <SS80_send_status+0x32>
   15114:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15118:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   1511c:	86 81       	ldd	r24, Z+6	; 0x06
   1511e:	20 e1       	ldi	r18, 0x10	; 16
   15120:	82 9f       	mul	r24, r18
   15122:	c0 01       	movw	r24, r0
   15124:	11 24       	eor	r1, r1
   15126:	95 81       	ldd	r25, Z+5	; 0x05
   15128:	9f 70       	andi	r25, 0x0F	; 15
   1512a:	89 2b       	or	r24, r25
   1512c:	8c 83       	std	Y+4, r24	; 0x04
   1512e:	8f ef       	ldi	r24, 0xFF	; 255
   15130:	8d 83       	std	Y+5, r24	; 0x05
   15132:	83 81       	ldd	r24, Z+3	; 0x03
   15134:	86 ff       	sbrs	r24, 6
   15136:	02 c0       	rjmp	.+4      	; 0x1513c <SS80_send_status+0x60>
   15138:	92 e0       	ldi	r25, 0x02	; 2
   1513a:	9e 83       	std	Y+6, r25	; 0x06
   1513c:	82 ff       	sbrs	r24, 2
   1513e:	03 c0       	rjmp	.+6      	; 0x15146 <SS80_send_status+0x6a>
   15140:	9e 81       	ldd	r25, Y+6	; 0x06
   15142:	91 60       	ori	r25, 0x01	; 1
   15144:	9e 83       	std	Y+6, r25	; 0x06
   15146:	80 ff       	sbrs	r24, 0
   15148:	02 c0       	rjmp	.+4      	; 0x1514e <SS80_send_status+0x72>
   1514a:	82 e0       	ldi	r24, 0x02	; 2
   1514c:	88 87       	std	Y+8, r24	; 0x08
   1514e:	83 81       	ldd	r24, Z+3	; 0x03
   15150:	81 ff       	sbrs	r24, 1
   15152:	03 c0       	rjmp	.+6      	; 0x1515a <SS80_send_status+0x7e>
   15154:	88 85       	ldd	r24, Y+8	; 0x08
   15156:	82 60       	ori	r24, 0x02	; 2
   15158:	88 87       	std	Y+8, r24	; 0x08
   1515a:	83 81       	ldd	r24, Z+3	; 0x03
   1515c:	83 ff       	sbrs	r24, 3
   1515e:	02 c0       	rjmp	.+4      	; 0x15164 <SS80_send_status+0x88>
   15160:	88 e0       	ldi	r24, 0x08	; 8
   15162:	8a 87       	std	Y+10, r24	; 0x0a
   15164:	83 81       	ldd	r24, Z+3	; 0x03
   15166:	94 81       	ldd	r25, Z+4	; 0x04
   15168:	89 2b       	or	r24, r25
   1516a:	59 f4       	brne	.+22     	; 0x15182 <SS80_send_status+0xa6>
   1516c:	07 81       	ldd	r16, Z+7	; 0x07
   1516e:	10 85       	ldd	r17, Z+8	; 0x08
   15170:	21 85       	ldd	r18, Z+9	; 0x09
   15172:	32 85       	ldd	r19, Z+10	; 0x0a
   15174:	46 e0       	ldi	r20, 0x06	; 6
   15176:	50 e0       	ldi	r21, 0x00	; 0
   15178:	6a e0       	ldi	r22, 0x0A	; 10
   1517a:	70 e0       	ldi	r23, 0x00	; 0
   1517c:	c7 01       	movw	r24, r14
   1517e:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   15182:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15186:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   1518a:	83 81       	ldd	r24, Z+3	; 0x03
   1518c:	94 81       	ldd	r25, Z+4	; 0x04
   1518e:	89 2b       	or	r24, r25
   15190:	11 f0       	breq	.+4      	; 0x15196 <SS80_send_status+0xba>
   15192:	81 e0       	ldi	r24, 0x01	; 1
   15194:	82 83       	std	Z+2, r24	; 0x02
   15196:	80 e0       	ldi	r24, 0x00	; 0
   15198:	91 e0       	ldi	r25, 0x01	; 1
   1519a:	99 8f       	std	Y+25, r25	; 0x19
   1519c:	88 8f       	std	Y+24, r24	; 0x18
   1519e:	ae 01       	movw	r20, r28
   151a0:	48 5e       	subi	r20, 0xE8	; 232
   151a2:	5f 4f       	sbci	r21, 0xFF	; 255
   151a4:	64 e1       	ldi	r22, 0x14	; 20
   151a6:	70 e0       	ldi	r23, 0x00	; 0
   151a8:	c7 01       	movw	r24, r14
   151aa:	0e 94 68 8c 	call	0x118d0	; 0x118d0 <gpib_write_str>
   151ae:	44 97       	sbiw	r24, 0x14	; 20
   151b0:	71 f0       	breq	.+28     	; 0x151ce <SS80_send_status+0xf2>
   151b2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   151b6:	80 ff       	sbrs	r24, 0
   151b8:	0a c0       	rjmp	.+20     	; 0x151ce <SS80_send_status+0xf2>
   151ba:	8c e8       	ldi	r24, 0x8C	; 140
   151bc:	95 e2       	ldi	r25, 0x25	; 37
   151be:	a0 e0       	ldi	r26, 0x00	; 0
   151c0:	ed b7       	in	r30, 0x3d	; 61
   151c2:	fe b7       	in	r31, 0x3e	; 62
   151c4:	81 83       	std	Z+1, r24	; 0x01
   151c6:	92 83       	std	Z+2, r25	; 0x02
   151c8:	a3 83       	std	Z+3, r26	; 0x03
   151ca:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   151ce:	88 8d       	ldd	r24, Y+24	; 0x18
   151d0:	99 8d       	ldd	r25, Y+25	; 0x19
   151d2:	88 27       	eor	r24, r24
   151d4:	90 7d       	andi	r25, 0xD0	; 208
   151d6:	69 96       	adiw	r28, 0x19	; 25
   151d8:	e6 e0       	ldi	r30, 0x06	; 6
   151da:	0c 94 ae e4 	jmp	0x1c95c	; 0x1c95c <__epilogue_restores__+0x18>

000151de <SS80_describe>:
   151de:	a7 e0       	ldi	r26, 0x07	; 7
   151e0:	b0 e0       	ldi	r27, 0x00	; 0
   151e2:	e5 ef       	ldi	r30, 0xF5	; 245
   151e4:	f8 ea       	ldi	r31, 0xA8	; 168
   151e6:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
   151ea:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   151ee:	85 ff       	sbrs	r24, 5
   151f0:	0a c0       	rjmp	.+20     	; 0x15206 <SS80_describe+0x28>
   151f2:	8b e7       	ldi	r24, 0x7B	; 123
   151f4:	95 e2       	ldi	r25, 0x25	; 37
   151f6:	a0 e0       	ldi	r26, 0x00	; 0
   151f8:	ed b7       	in	r30, 0x3d	; 61
   151fa:	fe b7       	in	r31, 0x3e	; 62
   151fc:	81 83       	std	Z+1, r24	; 0x01
   151fe:	92 83       	std	Z+2, r25	; 0x02
   15200:	a3 83       	std	Z+3, r26	; 0x03
   15202:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   15206:	1f 82       	std	Y+7, r1	; 0x07
   15208:	1e 82       	std	Y+6, r1	; 0x06
   1520a:	ce 01       	movw	r24, r28
   1520c:	04 96       	adiw	r24, 0x04	; 4
   1520e:	85 dd       	rcall	.-1270   	; 0x14d1a <SS80ControllerPack>
   15210:	6c 81       	ldd	r22, Y+4	; 0x04
   15212:	7d 81       	ldd	r23, Y+5	; 0x05
   15214:	ae 01       	movw	r20, r28
   15216:	4a 5f       	subi	r20, 0xFA	; 250
   15218:	5f 4f       	sbci	r21, 0xFF	; 255
   1521a:	0e 94 68 8c 	call	0x118d0	; 0x118d0 <gpib_write_str>
   1521e:	2c 81       	ldd	r18, Y+4	; 0x04
   15220:	3d 81       	ldd	r19, Y+5	; 0x05
   15222:	82 17       	cp	r24, r18
   15224:	93 07       	cpc	r25, r19
   15226:	39 f0       	breq	.+14     	; 0x15236 <SS80_describe+0x58>
   15228:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1522c:	80 ff       	sbrs	r24, 0
   1522e:	3c c0       	rjmp	.+120    	; 0x152a8 <SS80_describe+0xca>
   15230:	88 e5       	ldi	r24, 0x58	; 88
   15232:	95 e2       	ldi	r25, 0x25	; 37
   15234:	31 c0       	rjmp	.+98     	; 0x15298 <SS80_describe+0xba>
   15236:	1f 82       	std	Y+7, r1	; 0x07
   15238:	1e 82       	std	Y+6, r1	; 0x06
   1523a:	ce 01       	movw	r24, r28
   1523c:	04 96       	adiw	r24, 0x04	; 4
   1523e:	a9 dd       	rcall	.-1198   	; 0x14d92 <SS80UnitPack>
   15240:	6c 81       	ldd	r22, Y+4	; 0x04
   15242:	7d 81       	ldd	r23, Y+5	; 0x05
   15244:	ae 01       	movw	r20, r28
   15246:	4a 5f       	subi	r20, 0xFA	; 250
   15248:	5f 4f       	sbci	r21, 0xFF	; 255
   1524a:	0e 94 68 8c 	call	0x118d0	; 0x118d0 <gpib_write_str>
   1524e:	2c 81       	ldd	r18, Y+4	; 0x04
   15250:	3d 81       	ldd	r19, Y+5	; 0x05
   15252:	82 17       	cp	r24, r18
   15254:	93 07       	cpc	r25, r19
   15256:	39 f0       	breq	.+14     	; 0x15266 <SS80_describe+0x88>
   15258:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1525c:	80 ff       	sbrs	r24, 0
   1525e:	24 c0       	rjmp	.+72     	; 0x152a8 <SS80_describe+0xca>
   15260:	8b e3       	ldi	r24, 0x3B	; 59
   15262:	95 e2       	ldi	r25, 0x25	; 37
   15264:	19 c0       	rjmp	.+50     	; 0x15298 <SS80_describe+0xba>
   15266:	80 e0       	ldi	r24, 0x00	; 0
   15268:	91 e0       	ldi	r25, 0x01	; 1
   1526a:	9f 83       	std	Y+7, r25	; 0x07
   1526c:	8e 83       	std	Y+6, r24	; 0x06
   1526e:	ce 01       	movw	r24, r28
   15270:	04 96       	adiw	r24, 0x04	; 4
   15272:	5b de       	rcall	.-842    	; 0x14f2a <SS80VolumePack>
   15274:	6c 81       	ldd	r22, Y+4	; 0x04
   15276:	7d 81       	ldd	r23, Y+5	; 0x05
   15278:	ae 01       	movw	r20, r28
   1527a:	4a 5f       	subi	r20, 0xFA	; 250
   1527c:	5f 4f       	sbci	r21, 0xFF	; 255
   1527e:	0e 94 68 8c 	call	0x118d0	; 0x118d0 <gpib_write_str>
   15282:	2c 81       	ldd	r18, Y+4	; 0x04
   15284:	3d 81       	ldd	r19, Y+5	; 0x05
   15286:	82 17       	cp	r24, r18
   15288:	93 07       	cpc	r25, r19
   1528a:	99 f0       	breq	.+38     	; 0x152b2 <SS80_describe+0xd4>
   1528c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15290:	80 ff       	sbrs	r24, 0
   15292:	0a c0       	rjmp	.+20     	; 0x152a8 <SS80_describe+0xca>
   15294:	8c e1       	ldi	r24, 0x1C	; 28
   15296:	95 e2       	ldi	r25, 0x25	; 37
   15298:	a0 e0       	ldi	r26, 0x00	; 0
   1529a:	ed b7       	in	r30, 0x3d	; 61
   1529c:	fe b7       	in	r31, 0x3e	; 62
   1529e:	81 83       	std	Z+1, r24	; 0x01
   152a0:	92 83       	std	Z+2, r25	; 0x02
   152a2:	a3 83       	std	Z+3, r26	; 0x03
   152a4:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   152a8:	8e 81       	ldd	r24, Y+6	; 0x06
   152aa:	9f 81       	ldd	r25, Y+7	; 0x07
   152ac:	88 27       	eor	r24, r24
   152ae:	90 7d       	andi	r25, 0xD0	; 208
   152b0:	02 c0       	rjmp	.+4      	; 0x152b6 <SS80_describe+0xd8>
   152b2:	80 e0       	ldi	r24, 0x00	; 0
   152b4:	90 e0       	ldi	r25, 0x00	; 0
   152b6:	27 96       	adiw	r28, 0x07	; 7
   152b8:	e2 e0       	ldi	r30, 0x02	; 2
   152ba:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

000152be <SS80_Check_Unit>:
   152be:	00 d0       	rcall	.+0      	; 0x152c0 <SS80_Check_Unit+0x2>
   152c0:	00 d0       	rcall	.+0      	; 0x152c2 <SS80_Check_Unit+0x4>
   152c2:	1f 92       	push	r1
   152c4:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   152c8:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   152cc:	88 23       	and	r24, r24
   152ce:	c9 f0       	breq	.+50     	; 0x15302 <SS80_Check_Unit+0x44>
   152d0:	8f 30       	cpi	r24, 0x0F	; 15
   152d2:	b9 f0       	breq	.+46     	; 0x15302 <SS80_Check_Unit+0x44>
   152d4:	23 81       	ldd	r18, Z+3	; 0x03
   152d6:	34 81       	ldd	r19, Z+4	; 0x04
   152d8:	20 64       	ori	r18, 0x40	; 64
   152da:	34 83       	std	Z+4, r19	; 0x04
   152dc:	23 83       	std	Z+3, r18	; 0x03
   152de:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <debuglevel>
   152e2:	90 ff       	sbrs	r25, 0
   152e4:	0f c0       	rjmp	.+30     	; 0x15304 <SS80_Check_Unit+0x46>
   152e6:	90 e0       	ldi	r25, 0x00	; 0
   152e8:	ed b7       	in	r30, 0x3d	; 61
   152ea:	fe b7       	in	r31, 0x3e	; 62
   152ec:	95 83       	std	Z+5, r25	; 0x05
   152ee:	84 83       	std	Z+4, r24	; 0x04
   152f0:	84 e0       	ldi	r24, 0x04	; 4
   152f2:	95 e2       	ldi	r25, 0x25	; 37
   152f4:	a0 e0       	ldi	r26, 0x00	; 0
   152f6:	81 83       	std	Z+1, r24	; 0x01
   152f8:	92 83       	std	Z+2, r25	; 0x02
   152fa:	a3 83       	std	Z+3, r26	; 0x03
   152fc:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   15300:	01 c0       	rjmp	.+2      	; 0x15304 <SS80_Check_Unit+0x46>
   15302:	85 83       	std	Z+5, r24	; 0x05
   15304:	0f 90       	pop	r0
   15306:	0f 90       	pop	r0
   15308:	0f 90       	pop	r0
   1530a:	0f 90       	pop	r0
   1530c:	0f 90       	pop	r0
   1530e:	08 95       	ret

00015310 <SS80_Check_Volume>:
   15310:	00 d0       	rcall	.+0      	; 0x15312 <SS80_Check_Volume+0x2>
   15312:	00 d0       	rcall	.+0      	; 0x15314 <SS80_Check_Volume+0x4>
   15314:	1f 92       	push	r1
   15316:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   1531a:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   1531e:	88 23       	and	r24, r24
   15320:	b9 f0       	breq	.+46     	; 0x15350 <SS80_Check_Volume+0x40>
   15322:	23 81       	ldd	r18, Z+3	; 0x03
   15324:	34 81       	ldd	r19, Z+4	; 0x04
   15326:	20 64       	ori	r18, 0x40	; 64
   15328:	34 83       	std	Z+4, r19	; 0x04
   1532a:	23 83       	std	Z+3, r18	; 0x03
   1532c:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <debuglevel>
   15330:	90 ff       	sbrs	r25, 0
   15332:	0f c0       	rjmp	.+30     	; 0x15352 <SS80_Check_Volume+0x42>
   15334:	90 e0       	ldi	r25, 0x00	; 0
   15336:	ed b7       	in	r30, 0x3d	; 61
   15338:	fe b7       	in	r31, 0x3e	; 62
   1533a:	95 83       	std	Z+5, r25	; 0x05
   1533c:	84 83       	std	Z+4, r24	; 0x04
   1533e:	8a ee       	ldi	r24, 0xEA	; 234
   15340:	94 e2       	ldi	r25, 0x24	; 36
   15342:	a0 e0       	ldi	r26, 0x00	; 0
   15344:	81 83       	std	Z+1, r24	; 0x01
   15346:	92 83       	std	Z+2, r25	; 0x02
   15348:	a3 83       	std	Z+3, r26	; 0x03
   1534a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1534e:	01 c0       	rjmp	.+2      	; 0x15352 <SS80_Check_Volume+0x42>
   15350:	16 82       	std	Z+6, r1	; 0x06
   15352:	0f 90       	pop	r0
   15354:	0f 90       	pop	r0
   15356:	0f 90       	pop	r0
   15358:	0f 90       	pop	r0
   1535a:	0f 90       	pop	r0
   1535c:	08 95       	ret

0001535e <SS80_Command_State>:
   1535e:	2f 92       	push	r2
   15360:	3f 92       	push	r3
   15362:	4f 92       	push	r4
   15364:	6f 92       	push	r6
   15366:	7f 92       	push	r7
   15368:	8f 92       	push	r8
   1536a:	af 92       	push	r10
   1536c:	bf 92       	push	r11
   1536e:	cf 92       	push	r12
   15370:	ef 92       	push	r14
   15372:	ff 92       	push	r15
   15374:	0f 93       	push	r16
   15376:	1f 93       	push	r17
   15378:	cf 93       	push	r28
   1537a:	df 93       	push	r29
   1537c:	cd b7       	in	r28, 0x3d	; 61
   1537e:	de b7       	in	r29, 0x3e	; 62
   15380:	66 97       	sbiw	r28, 0x16	; 22
   15382:	0f b6       	in	r0, 0x3f	; 63
   15384:	f8 94       	cli
   15386:	de bf       	out	0x3e, r29	; 62
   15388:	0f be       	out	0x3f, r0	; 63
   1538a:	cd bf       	out	0x3d, r28	; 61
   1538c:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15390:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   15394:	81 81       	ldd	r24, Z+1	; 0x01
   15396:	90 e0       	ldi	r25, 0x00	; 0
   15398:	0e 94 44 87 	call	0x10e88	; 0x10e88 <gpib_disable_PPR>
   1539c:	80 e0       	ldi	r24, 0x00	; 0
   1539e:	91 e0       	ldi	r25, 0x01	; 1
   153a0:	99 87       	std	Y+9, r25	; 0x09
   153a2:	88 87       	std	Y+8, r24	; 0x08
   153a4:	ae 01       	movw	r20, r28
   153a6:	48 5f       	subi	r20, 0xF8	; 248
   153a8:	5f 4f       	sbci	r21, 0xFF	; 255
   153aa:	60 e0       	ldi	r22, 0x00	; 0
   153ac:	72 e0       	ldi	r23, 0x02	; 2
   153ae:	82 e8       	ldi	r24, 0x82	; 130
   153b0:	9c e1       	ldi	r25, 0x1C	; 28
   153b2:	0e 94 c6 8b 	call	0x1178c	; 0x1178c <gpib_read_str>
   153b6:	9b 87       	std	Y+11, r25	; 0x0b
   153b8:	8a 87       	std	Y+10, r24	; 0x0a
   153ba:	88 85       	ldd	r24, Y+8	; 0x08
   153bc:	99 85       	ldd	r25, Y+9	; 0x09
   153be:	9c 01       	movw	r18, r24
   153c0:	22 27       	eor	r18, r18
   153c2:	30 7d       	andi	r19, 0xD0	; 208
   153c4:	23 2b       	or	r18, r19
   153c6:	79 f0       	breq	.+30     	; 0x153e6 <SS80_Command_State+0x88>
   153c8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   153cc:	80 ff       	sbrs	r24, 0
   153ce:	1e c2       	rjmp	.+1084   	; 0x1580c <SS80_Command_State+0x4ae>
   153d0:	84 ec       	ldi	r24, 0xC4	; 196
   153d2:	94 e2       	ldi	r25, 0x24	; 36
   153d4:	a0 e0       	ldi	r26, 0x00	; 0
   153d6:	ed b7       	in	r30, 0x3d	; 61
   153d8:	fe b7       	in	r31, 0x3e	; 62
   153da:	81 83       	std	Z+1, r24	; 0x01
   153dc:	92 83       	std	Z+2, r25	; 0x02
   153de:	a3 83       	std	Z+3, r26	; 0x03
   153e0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   153e4:	13 c2       	rjmp	.+1062   	; 0x1580c <SS80_Command_State+0x4ae>
   153e6:	2a 85       	ldd	r18, Y+10	; 0x0a
   153e8:	3b 85       	ldd	r19, Y+11	; 0x0b
   153ea:	23 2b       	or	r18, r19
   153ec:	09 f4       	brne	.+2      	; 0x153f0 <SS80_Command_State+0x92>
   153ee:	13 c2       	rjmp	.+1062   	; 0x15816 <SS80_Command_State+0x4b8>
   153f0:	90 fd       	sbrc	r25, 0
   153f2:	0e c0       	rjmp	.+28     	; 0x15410 <SS80_Command_State+0xb2>
   153f4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   153f8:	80 ff       	sbrs	r24, 0
   153fa:	0a c0       	rjmp	.+20     	; 0x15410 <SS80_Command_State+0xb2>
   153fc:	8b ea       	ldi	r24, 0xAB	; 171
   153fe:	94 e2       	ldi	r25, 0x24	; 36
   15400:	a0 e0       	ldi	r26, 0x00	; 0
   15402:	ed b7       	in	r30, 0x3d	; 61
   15404:	fe b7       	in	r31, 0x3e	; 62
   15406:	81 83       	std	Z+1, r24	; 0x01
   15408:	92 83       	std	Z+2, r25	; 0x02
   1540a:	a3 83       	std	Z+3, r26	; 0x03
   1540c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   15410:	e1 2c       	mov	r14, r1
   15412:	f1 2c       	mov	r15, r1
   15414:	8f ea       	ldi	r24, 0xAF	; 175
   15416:	93 e2       	ldi	r25, 0x23	; 35
   15418:	9c 01       	movw	r18, r24
   1541a:	40 e0       	ldi	r20, 0x00	; 0
   1541c:	2e 87       	std	Y+14, r18	; 0x0e
   1541e:	3f 87       	std	Y+15, r19	; 0x0f
   15420:	48 8b       	std	Y+16, r20	; 0x10
   15422:	84 ed       	ldi	r24, 0xD4	; 212
   15424:	93 e2       	ldi	r25, 0x23	; 35
   15426:	9c 01       	movw	r18, r24
   15428:	40 e0       	ldi	r20, 0x00	; 0
   1542a:	29 8b       	std	Y+17, r18	; 0x11
   1542c:	3a 8b       	std	Y+18, r19	; 0x12
   1542e:	4b 8b       	std	Y+19, r20	; 0x13
   15430:	8e ee       	ldi	r24, 0xEE	; 238
   15432:	93 e2       	ldi	r25, 0x23	; 35
   15434:	9c 01       	movw	r18, r24
   15436:	40 e0       	ldi	r20, 0x00	; 0
   15438:	2c 8b       	std	Y+20, r18	; 0x14
   1543a:	3d 8b       	std	Y+21, r19	; 0x15
   1543c:	4e 8b       	std	Y+22, r20	; 0x16
   1543e:	84 e0       	ldi	r24, 0x04	; 4
   15440:	94 e2       	ldi	r25, 0x24	; 36
   15442:	3c 01       	movw	r6, r24
   15444:	81 2c       	mov	r8, r1
   15446:	82 e1       	ldi	r24, 0x12	; 18
   15448:	94 e2       	ldi	r25, 0x24	; 36
   1544a:	5c 01       	movw	r10, r24
   1544c:	c1 2c       	mov	r12, r1
   1544e:	8e e2       	ldi	r24, 0x2E	; 46
   15450:	94 e2       	ldi	r25, 0x24	; 36
   15452:	1c 01       	movw	r2, r24
   15454:	41 2c       	mov	r4, r1
   15456:	2a 85       	ldd	r18, Y+10	; 0x0a
   15458:	3b 85       	ldd	r19, Y+11	; 0x0b
   1545a:	87 01       	movw	r16, r14
   1545c:	e2 16       	cp	r14, r18
   1545e:	f3 06       	cpc	r15, r19
   15460:	0c f0       	brlt	.+2      	; 0x15464 <SS80_Command_State+0x106>
   15462:	b3 c1       	rjmp	.+870    	; 0x157ca <SS80_Command_State+0x46c>
   15464:	0f 5f       	subi	r16, 0xFF	; 255
   15466:	1f 4f       	sbci	r17, 0xFF	; 255
   15468:	f7 01       	movw	r30, r14
   1546a:	ee 57       	subi	r30, 0x7E	; 126
   1546c:	f3 4e       	sbci	r31, 0xE3	; 227
   1546e:	80 81       	ld	r24, Z
   15470:	28 2f       	mov	r18, r24
   15472:	30 e0       	ldi	r19, 0x00	; 0
   15474:	a9 01       	movw	r20, r18
   15476:	40 52       	subi	r20, 0x20	; 32
   15478:	51 09       	sbc	r21, r1
   1547a:	40 31       	cpi	r20, 0x10	; 16
   1547c:	51 05       	cpc	r21, r1
   1547e:	98 f4       	brcc	.+38     	; 0x154a6 <SS80_Command_State+0x148>
   15480:	80 52       	subi	r24, 0x20	; 32
   15482:	1d df       	rcall	.-454    	; 0x152be <SS80_Check_Unit>
   15484:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15488:	85 ff       	sbrs	r24, 5
   1548a:	9d c1       	rjmp	.+826    	; 0x157c6 <SS80_Command_State+0x468>
   1548c:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15490:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15494:	85 81       	ldd	r24, Z+5	; 0x05
   15496:	90 e0       	ldi	r25, 0x00	; 0
   15498:	ed b7       	in	r30, 0x3d	; 61
   1549a:	fe b7       	in	r31, 0x3e	; 62
   1549c:	95 83       	std	Z+5, r25	; 0x05
   1549e:	84 83       	std	Z+4, r24	; 0x04
   154a0:	85 e9       	ldi	r24, 0x95	; 149
   154a2:	94 e2       	ldi	r25, 0x24	; 36
   154a4:	19 c0       	rjmp	.+50     	; 0x154d8 <SS80_Command_State+0x17a>
   154a6:	a9 01       	movw	r20, r18
   154a8:	40 54       	subi	r20, 0x40	; 64
   154aa:	51 09       	sbc	r21, r1
   154ac:	40 31       	cpi	r20, 0x10	; 16
   154ae:	51 05       	cpc	r21, r1
   154b0:	d0 f4       	brcc	.+52     	; 0x154e6 <SS80_Command_State+0x188>
   154b2:	80 54       	subi	r24, 0x40	; 64
   154b4:	2d df       	rcall	.-422    	; 0x15310 <SS80_Check_Volume>
   154b6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   154ba:	85 ff       	sbrs	r24, 5
   154bc:	84 c1       	rjmp	.+776    	; 0x157c6 <SS80_Command_State+0x468>
   154be:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   154c2:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   154c6:	86 81       	ldd	r24, Z+6	; 0x06
   154c8:	90 e0       	ldi	r25, 0x00	; 0
   154ca:	ed b7       	in	r30, 0x3d	; 61
   154cc:	fe b7       	in	r31, 0x3e	; 62
   154ce:	95 83       	std	Z+5, r25	; 0x05
   154d0:	84 83       	std	Z+4, r24	; 0x04
   154d2:	2c e7       	ldi	r18, 0x7C	; 124
   154d4:	34 e2       	ldi	r19, 0x24	; 36
   154d6:	c9 01       	movw	r24, r18
   154d8:	a0 e0       	ldi	r26, 0x00	; 0
   154da:	81 83       	std	Z+1, r24	; 0x01
   154dc:	92 83       	std	Z+2, r25	; 0x02
   154de:	a3 83       	std	Z+3, r26	; 0x03
   154e0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   154e4:	70 c1       	rjmp	.+736    	; 0x157c6 <SS80_Command_State+0x468>
   154e6:	21 15       	cp	r18, r1
   154e8:	31 05       	cpc	r19, r1
   154ea:	79 f4       	brne	.+30     	; 0x1550a <SS80_Command_State+0x1ac>
   154ec:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   154f0:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   154f4:	81 e0       	ldi	r24, 0x01	; 1
   154f6:	90 e0       	ldi	r25, 0x00	; 0
   154f8:	91 83       	std	Z+1, r25	; 0x01
   154fa:	80 83       	st	Z, r24
   154fc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15500:	85 ff       	sbrs	r24, 5
   15502:	63 c1       	rjmp	.+710    	; 0x157ca <SS80_Command_State+0x46c>
   15504:	84 e6       	ldi	r24, 0x64	; 100
   15506:	94 e2       	ldi	r25, 0x24	; 36
   15508:	0f c0       	rjmp	.+30     	; 0x15528 <SS80_Command_State+0x1ca>
   1550a:	22 30       	cpi	r18, 0x02	; 2
   1550c:	31 05       	cpc	r19, r1
   1550e:	a9 f4       	brne	.+42     	; 0x1553a <SS80_Command_State+0x1dc>
   15510:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15514:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15518:	31 83       	std	Z+1, r19	; 0x01
   1551a:	20 83       	st	Z, r18
   1551c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15520:	85 ff       	sbrs	r24, 5
   15522:	53 c1       	rjmp	.+678    	; 0x157ca <SS80_Command_State+0x46c>
   15524:	8b e4       	ldi	r24, 0x4B	; 75
   15526:	94 e2       	ldi	r25, 0x24	; 36
   15528:	a0 e0       	ldi	r26, 0x00	; 0
   1552a:	ed b7       	in	r30, 0x3d	; 61
   1552c:	fe b7       	in	r31, 0x3e	; 62
   1552e:	81 83       	std	Z+1, r24	; 0x01
   15530:	92 83       	std	Z+2, r25	; 0x02
   15532:	a3 83       	std	Z+3, r26	; 0x03
   15534:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   15538:	48 c1       	rjmp	.+656    	; 0x157ca <SS80_Command_State+0x46c>
   1553a:	20 31       	cpi	r18, 0x10	; 16
   1553c:	31 05       	cpc	r19, r1
   1553e:	b1 f5       	brne	.+108    	; 0x155ac <SS80_Command_State+0x24e>
   15540:	20 91 05 19 	lds	r18, 0x1905	; 0x801905 <SS80s>
   15544:	30 91 06 19 	lds	r19, 0x1906	; 0x801906 <SS80s+0x1>
   15548:	3d 87       	std	Y+13, r19	; 0x0d
   1554a:	2c 87       	std	Y+12, r18	; 0x0c
   1554c:	46 e0       	ldi	r20, 0x06	; 6
   1554e:	50 e0       	ldi	r21, 0x00	; 0
   15550:	b8 01       	movw	r22, r16
   15552:	82 e8       	ldi	r24, 0x82	; 130
   15554:	9c e1       	ldi	r25, 0x1C	; 28
   15556:	0e 94 7f 93 	call	0x126fe	; 0x126fe <B2V_MSB>
   1555a:	ec 85       	ldd	r30, Y+12	; 0x0c
   1555c:	fd 85       	ldd	r31, Y+13	; 0x0d
   1555e:	67 83       	std	Z+7, r22	; 0x07
   15560:	70 87       	std	Z+8, r23	; 0x08
   15562:	81 87       	std	Z+9, r24	; 0x09
   15564:	92 87       	std	Z+10, r25	; 0x0a
   15566:	87 01       	movw	r16, r14
   15568:	09 5f       	subi	r16, 0xF9	; 249
   1556a:	1f 4f       	sbci	r17, 0xFF	; 255
   1556c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15570:	85 ff       	sbrs	r24, 5
   15572:	29 c1       	rjmp	.+594    	; 0x157c6 <SS80_Command_State+0x468>
   15574:	20 91 05 19 	lds	r18, 0x1905	; 0x801905 <SS80s>
   15578:	30 91 06 19 	lds	r19, 0x1906	; 0x801906 <SS80s+0x1>
   1557c:	80 91 07 19 	lds	r24, 0x1907	; 0x801907 <SS80p>
   15580:	90 91 08 19 	lds	r25, 0x1908	; 0x801908 <SS80p+0x1>
   15584:	fc 01       	movw	r30, r24
   15586:	a0 89       	ldd	r26, Z+16	; 0x10
   15588:	b1 89       	ldd	r27, Z+17	; 0x11
   1558a:	f9 01       	movw	r30, r18
   1558c:	27 81       	ldd	r18, Z+7	; 0x07
   1558e:	30 85       	ldd	r19, Z+8	; 0x08
   15590:	41 85       	ldd	r20, Z+9	; 0x09
   15592:	52 85       	ldd	r21, Z+10	; 0x0a
   15594:	0e 94 66 e4 	call	0x1c8cc	; 0x1c8cc <__muluhisi3>
   15598:	ed b7       	in	r30, 0x3d	; 61
   1559a:	fe b7       	in	r31, 0x3e	; 62
   1559c:	64 83       	std	Z+4, r22	; 0x04
   1559e:	75 83       	std	Z+5, r23	; 0x05
   155a0:	86 83       	std	Z+6, r24	; 0x06
   155a2:	97 83       	std	Z+7, r25	; 0x07
   155a4:	21 82       	std	Z+1, r2	; 0x01
   155a6:	32 82       	std	Z+2, r3	; 0x02
   155a8:	43 82       	std	Z+3, r4	; 0x03
   155aa:	2e c0       	rjmp	.+92     	; 0x15608 <SS80_Command_State+0x2aa>
   155ac:	28 31       	cpi	r18, 0x18	; 24
   155ae:	31 05       	cpc	r19, r1
   155b0:	71 f5       	brne	.+92     	; 0x1560e <SS80_Command_State+0x2b0>
   155b2:	20 91 05 19 	lds	r18, 0x1905	; 0x801905 <SS80s>
   155b6:	30 91 06 19 	lds	r19, 0x1906	; 0x801906 <SS80s+0x1>
   155ba:	3d 87       	std	Y+13, r19	; 0x0d
   155bc:	2c 87       	std	Y+12, r18	; 0x0c
   155be:	44 e0       	ldi	r20, 0x04	; 4
   155c0:	50 e0       	ldi	r21, 0x00	; 0
   155c2:	b8 01       	movw	r22, r16
   155c4:	82 e8       	ldi	r24, 0x82	; 130
   155c6:	9c e1       	ldi	r25, 0x1C	; 28
   155c8:	0e 94 7f 93 	call	0x126fe	; 0x126fe <B2V_MSB>
   155cc:	ec 85       	ldd	r30, Y+12	; 0x0c
   155ce:	fd 85       	ldd	r31, Y+13	; 0x0d
   155d0:	63 87       	std	Z+11, r22	; 0x0b
   155d2:	74 87       	std	Z+12, r23	; 0x0c
   155d4:	85 87       	std	Z+13, r24	; 0x0d
   155d6:	96 87       	std	Z+14, r25	; 0x0e
   155d8:	87 01       	movw	r16, r14
   155da:	0b 5f       	subi	r16, 0xFB	; 251
   155dc:	1f 4f       	sbci	r17, 0xFF	; 255
   155de:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   155e2:	85 ff       	sbrs	r24, 5
   155e4:	f0 c0       	rjmp	.+480    	; 0x157c6 <SS80_Command_State+0x468>
   155e6:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   155ea:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   155ee:	83 85       	ldd	r24, Z+11	; 0x0b
   155f0:	94 85       	ldd	r25, Z+12	; 0x0c
   155f2:	a5 85       	ldd	r26, Z+13	; 0x0d
   155f4:	b6 85       	ldd	r27, Z+14	; 0x0e
   155f6:	ed b7       	in	r30, 0x3d	; 61
   155f8:	fe b7       	in	r31, 0x3e	; 62
   155fa:	84 83       	std	Z+4, r24	; 0x04
   155fc:	95 83       	std	Z+5, r25	; 0x05
   155fe:	a6 83       	std	Z+6, r26	; 0x06
   15600:	b7 83       	std	Z+7, r27	; 0x07
   15602:	a1 82       	std	Z+1, r10	; 0x01
   15604:	b2 82       	std	Z+2, r11	; 0x02
   15606:	c3 82       	std	Z+3, r12	; 0x03
   15608:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1560c:	dc c0       	rjmp	.+440    	; 0x157c6 <SS80_Command_State+0x468>
   1560e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15612:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   15616:	24 33       	cpi	r18, 0x34	; 52
   15618:	31 05       	cpc	r19, r1
   1561a:	41 f4       	brne	.+16     	; 0x1562c <SS80_Command_State+0x2ce>
   1561c:	85 ff       	sbrs	r24, 5
   1561e:	d3 c0       	rjmp	.+422    	; 0x157c6 <SS80_Command_State+0x468>
   15620:	ed b7       	in	r30, 0x3d	; 61
   15622:	fe b7       	in	r31, 0x3e	; 62
   15624:	61 82       	std	Z+1, r6	; 0x01
   15626:	72 82       	std	Z+2, r7	; 0x02
   15628:	83 82       	std	Z+3, r8	; 0x03
   1562a:	2b c0       	rjmp	.+86     	; 0x15682 <SS80_Command_State+0x324>
   1562c:	29 33       	cpi	r18, 0x39	; 57
   1562e:	31 05       	cpc	r19, r1
   15630:	49 f4       	brne	.+18     	; 0x15644 <SS80_Command_State+0x2e6>
   15632:	87 01       	movw	r16, r14
   15634:	0d 5f       	subi	r16, 0xFD	; 253
   15636:	1f 4f       	sbci	r17, 0xFF	; 255
   15638:	85 ff       	sbrs	r24, 5
   1563a:	c5 c0       	rjmp	.+394    	; 0x157c6 <SS80_Command_State+0x468>
   1563c:	2c 89       	ldd	r18, Y+20	; 0x14
   1563e:	3d 89       	ldd	r19, Y+21	; 0x15
   15640:	4e 89       	ldd	r20, Y+22	; 0x16
   15642:	1a c0       	rjmp	.+52     	; 0x15678 <SS80_Command_State+0x31a>
   15644:	2b 33       	cpi	r18, 0x3B	; 59
   15646:	31 05       	cpc	r19, r1
   15648:	49 f4       	brne	.+18     	; 0x1565c <SS80_Command_State+0x2fe>
   1564a:	87 01       	movw	r16, r14
   1564c:	0e 5f       	subi	r16, 0xFE	; 254
   1564e:	1f 4f       	sbci	r17, 0xFF	; 255
   15650:	85 ff       	sbrs	r24, 5
   15652:	b9 c0       	rjmp	.+370    	; 0x157c6 <SS80_Command_State+0x468>
   15654:	29 89       	ldd	r18, Y+17	; 0x11
   15656:	3a 89       	ldd	r19, Y+18	; 0x12
   15658:	4b 89       	ldd	r20, Y+19	; 0x13
   1565a:	0e c0       	rjmp	.+28     	; 0x15678 <SS80_Command_State+0x31a>
   1565c:	28 34       	cpi	r18, 0x48	; 72
   1565e:	31 05       	cpc	r19, r1
   15660:	99 f4       	brne	.+38     	; 0x15688 <SS80_Command_State+0x32a>
   15662:	87 01       	movw	r16, r14
   15664:	0e 5f       	subi	r16, 0xFE	; 254
   15666:	1f 4f       	sbci	r17, 0xFF	; 255
   15668:	80 73       	andi	r24, 0x30	; 48
   1566a:	99 27       	eor	r25, r25
   1566c:	89 2b       	or	r24, r25
   1566e:	09 f4       	brne	.+2      	; 0x15672 <SS80_Command_State+0x314>
   15670:	aa c0       	rjmp	.+340    	; 0x157c6 <SS80_Command_State+0x468>
   15672:	2e 85       	ldd	r18, Y+14	; 0x0e
   15674:	3f 85       	ldd	r19, Y+15	; 0x0f
   15676:	48 89       	ldd	r20, Y+16	; 0x10
   15678:	ed b7       	in	r30, 0x3d	; 61
   1567a:	fe b7       	in	r31, 0x3e	; 62
   1567c:	21 83       	std	Z+1, r18	; 0x01
   1567e:	32 83       	std	Z+2, r19	; 0x02
   15680:	43 83       	std	Z+3, r20	; 0x03
   15682:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   15686:	9f c0       	rjmp	.+318    	; 0x157c6 <SS80_Command_State+0x468>
   15688:	24 30       	cpi	r18, 0x04	; 4
   1568a:	31 05       	cpc	r19, r1
   1568c:	41 f4       	brne	.+16     	; 0x1569e <SS80_Command_State+0x340>
   1568e:	80 73       	andi	r24, 0x30	; 48
   15690:	99 27       	eor	r25, r25
   15692:	89 2b       	or	r24, r25
   15694:	09 f4       	brne	.+2      	; 0x15698 <SS80_Command_State+0x33a>
   15696:	99 c0       	rjmp	.+306    	; 0x157ca <SS80_Command_State+0x46c>
   15698:	8e e8       	ldi	r24, 0x8E	; 142
   1569a:	93 e2       	ldi	r25, 0x23	; 35
   1569c:	45 cf       	rjmp	.-374    	; 0x15528 <SS80_Command_State+0x1ca>
   1569e:	2e 30       	cpi	r18, 0x0E	; 14
   156a0:	31 05       	cpc	r19, r1
   156a2:	29 f4       	brne	.+10     	; 0x156ae <SS80_Command_State+0x350>
   156a4:	85 ff       	sbrs	r24, 5
   156a6:	91 c0       	rjmp	.+290    	; 0x157ca <SS80_Command_State+0x46c>
   156a8:	88 e7       	ldi	r24, 0x78	; 120
   156aa:	93 e2       	ldi	r25, 0x23	; 35
   156ac:	3d cf       	rjmp	.-390    	; 0x15528 <SS80_Command_State+0x1ca>
   156ae:	2f 30       	cpi	r18, 0x0F	; 15
   156b0:	31 05       	cpc	r19, r1
   156b2:	29 f4       	brne	.+10     	; 0x156be <SS80_Command_State+0x360>
   156b4:	85 ff       	sbrs	r24, 5
   156b6:	89 c0       	rjmp	.+274    	; 0x157ca <SS80_Command_State+0x46c>
   156b8:	8b e5       	ldi	r24, 0x5B	; 91
   156ba:	93 e2       	ldi	r25, 0x23	; 35
   156bc:	35 cf       	rjmp	.-406    	; 0x15528 <SS80_Command_State+0x1ca>
   156be:	21 33       	cpi	r18, 0x31	; 49
   156c0:	31 05       	cpc	r19, r1
   156c2:	41 f4       	brne	.+16     	; 0x156d4 <SS80_Command_State+0x376>
   156c4:	87 01       	movw	r16, r14
   156c6:	0d 5f       	subi	r16, 0xFD	; 253
   156c8:	1f 4f       	sbci	r17, 0xFF	; 255
   156ca:	85 ff       	sbrs	r24, 5
   156cc:	7e c0       	rjmp	.+252    	; 0x157ca <SS80_Command_State+0x46c>
   156ce:	8f e3       	ldi	r24, 0x3F	; 63
   156d0:	93 e2       	ldi	r25, 0x23	; 35
   156d2:	2a cf       	rjmp	.-428    	; 0x15528 <SS80_Command_State+0x1ca>
   156d4:	25 33       	cpi	r18, 0x35	; 53
   156d6:	31 05       	cpc	r19, r1
   156d8:	69 f4       	brne	.+26     	; 0x156f4 <SS80_Command_State+0x396>
   156da:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   156de:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   156e2:	24 e0       	ldi	r18, 0x04	; 4
   156e4:	30 e0       	ldi	r19, 0x00	; 0
   156e6:	31 83       	std	Z+1, r19	; 0x01
   156e8:	20 83       	st	Z, r18
   156ea:	85 ff       	sbrs	r24, 5
   156ec:	6e c0       	rjmp	.+220    	; 0x157ca <SS80_Command_State+0x46c>
   156ee:	8e e2       	ldi	r24, 0x2E	; 46
   156f0:	93 e2       	ldi	r25, 0x23	; 35
   156f2:	1a cf       	rjmp	.-460    	; 0x15528 <SS80_Command_State+0x1ca>
   156f4:	27 33       	cpi	r18, 0x37	; 55
   156f6:	31 05       	cpc	r19, r1
   156f8:	59 f4       	brne	.+22     	; 0x15710 <SS80_Command_State+0x3b2>
   156fa:	87 01       	movw	r16, r14
   156fc:	0d 5f       	subi	r16, 0xFD	; 253
   156fe:	1f 4f       	sbci	r17, 0xFF	; 255
   15700:	80 73       	andi	r24, 0x30	; 48
   15702:	99 27       	eor	r25, r25
   15704:	89 2b       	or	r24, r25
   15706:	09 f4       	brne	.+2      	; 0x1570a <SS80_Command_State+0x3ac>
   15708:	60 c0       	rjmp	.+192    	; 0x157ca <SS80_Command_State+0x46c>
   1570a:	80 e1       	ldi	r24, 0x10	; 16
   1570c:	93 e2       	ldi	r25, 0x23	; 35
   1570e:	0c cf       	rjmp	.-488    	; 0x15528 <SS80_Command_State+0x1ca>
   15710:	2e 33       	cpi	r18, 0x3E	; 62
   15712:	31 05       	cpc	r19, r1
   15714:	c1 f4       	brne	.+48     	; 0x15746 <SS80_Command_State+0x3e8>
   15716:	80 73       	andi	r24, 0x30	; 48
   15718:	99 27       	eor	r25, r25
   1571a:	89 2b       	or	r24, r25
   1571c:	81 f0       	breq	.+32     	; 0x1573e <SS80_Command_State+0x3e0>
   1571e:	81 ef       	ldi	r24, 0xF1	; 241
   15720:	92 e2       	ldi	r25, 0x22	; 34
   15722:	a0 e0       	ldi	r26, 0x00	; 0
   15724:	ed b7       	in	r30, 0x3d	; 61
   15726:	fe b7       	in	r31, 0x3e	; 62
   15728:	81 83       	std	Z+1, r24	; 0x01
   1572a:	92 83       	std	Z+2, r25	; 0x02
   1572c:	a3 83       	std	Z+3, r26	; 0x03
   1572e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   15732:	6b e8       	ldi	r22, 0x8B	; 139
   15734:	7f e0       	ldi	r23, 0x0F	; 15
   15736:	c8 01       	movw	r24, r16
   15738:	8e 57       	subi	r24, 0x7E	; 126
   1573a:	93 4e       	sbci	r25, 0xE3	; 227
   1573c:	6c dc       	rcall	.-1832   	; 0x15016 <SS80_display_extended_status>
   1573e:	87 01       	movw	r16, r14
   15740:	07 5f       	subi	r16, 0xF7	; 247
   15742:	1f 4f       	sbci	r17, 0xFF	; 255
   15744:	42 c0       	rjmp	.+132    	; 0x157ca <SS80_Command_State+0x46c>
   15746:	2c 34       	cpi	r18, 0x4C	; 76
   15748:	31 05       	cpc	r19, r1
   1574a:	39 f4       	brne	.+14     	; 0x1575a <SS80_Command_State+0x3fc>
   1574c:	80 73       	andi	r24, 0x30	; 48
   1574e:	99 27       	eor	r25, r25
   15750:	89 2b       	or	r24, r25
   15752:	d9 f1       	breq	.+118    	; 0x157ca <SS80_Command_State+0x46c>
   15754:	86 ed       	ldi	r24, 0xD6	; 214
   15756:	92 e2       	ldi	r25, 0x22	; 34
   15758:	e7 ce       	rjmp	.-562    	; 0x15528 <SS80_Command_State+0x1ca>
   1575a:	2d 34       	cpi	r18, 0x4D	; 77
   1575c:	31 05       	cpc	r19, r1
   1575e:	39 f4       	brne	.+14     	; 0x1576e <SS80_Command_State+0x410>
   15760:	80 73       	andi	r24, 0x30	; 48
   15762:	99 27       	eor	r25, r25
   15764:	89 2b       	or	r24, r25
   15766:	89 f1       	breq	.+98     	; 0x157ca <SS80_Command_State+0x46c>
   15768:	8d eb       	ldi	r24, 0xBD	; 189
   1576a:	92 e2       	ldi	r25, 0x22	; 34
   1576c:	dd ce       	rjmp	.-582    	; 0x15528 <SS80_Command_State+0x1ca>
   1576e:	2d 30       	cpi	r18, 0x0D	; 13
   15770:	31 05       	cpc	r19, r1
   15772:	69 f4       	brne	.+26     	; 0x1578e <SS80_Command_State+0x430>
   15774:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15778:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   1577c:	23 e0       	ldi	r18, 0x03	; 3
   1577e:	30 e0       	ldi	r19, 0x00	; 0
   15780:	31 83       	std	Z+1, r19	; 0x01
   15782:	20 83       	st	Z, r18
   15784:	85 ff       	sbrs	r24, 5
   15786:	21 c0       	rjmp	.+66     	; 0x157ca <SS80_Command_State+0x46c>
   15788:	86 ea       	ldi	r24, 0xA6	; 166
   1578a:	92 e2       	ldi	r25, 0x22	; 34
   1578c:	cd ce       	rjmp	.-614    	; 0x15528 <SS80_Command_State+0x1ca>
   1578e:	23 33       	cpi	r18, 0x33	; 51
   15790:	31 05       	cpc	r19, r1
   15792:	51 f4       	brne	.+20     	; 0x157a8 <SS80_Command_State+0x44a>
   15794:	87 01       	movw	r16, r14
   15796:	0c 5f       	subi	r16, 0xFC	; 252
   15798:	1f 4f       	sbci	r17, 0xFF	; 255
   1579a:	80 73       	andi	r24, 0x30	; 48
   1579c:	99 27       	eor	r25, r25
   1579e:	89 2b       	or	r24, r25
   157a0:	a1 f0       	breq	.+40     	; 0x157ca <SS80_Command_State+0x46c>
   157a2:	85 e8       	ldi	r24, 0x85	; 133
   157a4:	92 e2       	ldi	r25, 0x22	; 34
   157a6:	c0 ce       	rjmp	.-640    	; 0x15528 <SS80_Command_State+0x1ca>
   157a8:	80 ff       	sbrs	r24, 0
   157aa:	28 c0       	rjmp	.+80     	; 0x157fc <SS80_Command_State+0x49e>
   157ac:	ed b7       	in	r30, 0x3d	; 61
   157ae:	fe b7       	in	r31, 0x3e	; 62
   157b0:	35 83       	std	Z+5, r19	; 0x05
   157b2:	24 83       	std	Z+4, r18	; 0x04
   157b4:	85 e6       	ldi	r24, 0x65	; 101
   157b6:	92 e2       	ldi	r25, 0x22	; 34
   157b8:	a0 e0       	ldi	r26, 0x00	; 0
   157ba:	81 83       	std	Z+1, r24	; 0x01
///
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
   157bc:	92 83       	std	Z+2, r25	; 0x02
   157be:	a3 83       	std	Z+3, r26	; 0x03
   157c0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   157c4:	02 c0       	rjmp	.+4      	; 0x157ca <SS80_Command_State+0x46c>
   157c6:	78 01       	movw	r14, r16
   157c8:	46 ce       	rjmp	.-884    	; 0x15456 <SS80_Command_State+0xf8>
   157ca:	8a 85       	ldd	r24, Y+10	; 0x0a
   157cc:	9b 85       	ldd	r25, Y+11	; 0x0b
   157ce:	08 17       	cp	r16, r24
   157d0:	19 07       	cpc	r17, r25
   157d2:	a1 f0       	breq	.+40     	; 0x157fc <SS80_Command_State+0x49e>
   157d4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   157d8:	80 ff       	sbrs	r24, 0
   157da:	10 c0       	rjmp	.+32     	; 0x157fc <SS80_Command_State+0x49e>
   157dc:	2a 85       	ldd	r18, Y+10	; 0x0a
   157de:	3b 85       	ldd	r19, Y+11	; 0x0b
   157e0:	ed b7       	in	r30, 0x3d	; 61
   157e2:	fe b7       	in	r31, 0x3e	; 62
   157e4:	37 83       	std	Z+7, r19	; 0x07
   157e6:	26 83       	std	Z+6, r18	; 0x06
   157e8:	15 83       	std	Z+5, r17	; 0x05
   157ea:	04 83       	std	Z+4, r16	; 0x04
   157ec:	8d e2       	ldi	r24, 0x2D	; 45
   157ee:	92 e2       	ldi	r25, 0x22	; 34
   157f0:	a0 e0       	ldi	r26, 0x00	; 0
   157f2:	81 83       	std	Z+1, r24	; 0x01
   157f4:	92 83       	std	Z+2, r25	; 0x02
   157f6:	a3 83       	std	Z+3, r26	; 0x03
   157f8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   157fc:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15800:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   15804:	81 81       	ldd	r24, Z+1	; 0x01
   15806:	90 e0       	ldi	r25, 0x00	; 0
   15808:	0e 94 0e 87 	call	0x10e1c	; 0x10e1c <gpib_enable_PPR>
   1580c:	88 85       	ldd	r24, Y+8	; 0x08
   1580e:	99 85       	ldd	r25, Y+9	; 0x09
   15810:	88 27       	eor	r24, r24
   15812:	90 7d       	andi	r25, 0xD0	; 208
   15814:	02 c0       	rjmp	.+4      	; 0x1581a <SS80_Command_State+0x4bc>
   15816:	80 e0       	ldi	r24, 0x00	; 0
   15818:	90 e0       	ldi	r25, 0x00	; 0
   1581a:	66 96       	adiw	r28, 0x16	; 22
   1581c:	0f b6       	in	r0, 0x3f	; 63
   1581e:	f8 94       	cli
   15820:	de bf       	out	0x3e, r29	; 62
   15822:	0f be       	out	0x3f, r0	; 63
   15824:	cd bf       	out	0x3d, r28	; 61
   15826:	df 91       	pop	r29
   15828:	cf 91       	pop	r28
   1582a:	1f 91       	pop	r17
   1582c:	0f 91       	pop	r16
   1582e:	ff 90       	pop	r15
   15830:	ef 90       	pop	r14
   15832:	cf 90       	pop	r12
   15834:	bf 90       	pop	r11
   15836:	af 90       	pop	r10
   15838:	8f 90       	pop	r8
   1583a:	7f 90       	pop	r7
   1583c:	6f 90       	pop	r6
   1583e:	4f 90       	pop	r4
   15840:	3f 90       	pop	r3
   15842:	2f 90       	pop	r2
   15844:	08 95       	ret

00015846 <SS80_cmd_seek>:
   15846:	a7 e0       	ldi	r26, 0x07	; 7
   15848:	b0 e0       	ldi	r27, 0x00	; 0
   1584a:	e9 e2       	ldi	r30, 0x29	; 41
   1584c:	fc ea       	ldi	r31, 0xAC	; 172
   1584e:	0c 94 88 e4 	jmp	0x1c910	; 0x1c910 <__prologue_saves__+0x4>
   15852:	c0 91 05 19 	lds	r28, 0x1905	; 0x801905 <SS80s>
   15856:	d0 91 06 19 	lds	r29, 0x1906	; 0x801906 <SS80s+0x1>
    return ( uart_rx_count( uart ) );
}
   1585a:	8f 80       	ldd	r8, Y+7	; 0x07
   1585c:	98 84       	ldd	r9, Y+8	; 0x08
   1585e:	a9 84       	ldd	r10, Y+9	; 0x09
   15860:	ba 84       	ldd	r11, Y+10	; 0x0a
   15862:	00 91 07 19 	lds	r16, 0x1907	; 0x801907 <SS80p>
   15866:	10 91 08 19 	lds	r17, 0x1908	; 0x801908 <SS80p+0x1>
   1586a:	f8 01       	movw	r30, r16
   1586c:	c0 88       	ldd	r12, Z+16	; 0x10
   1586e:	d1 88       	ldd	r13, Z+17	; 0x11
   15870:	e1 2c       	mov	r14, r1
   15872:	f1 2c       	mov	r15, r1
   15874:	6b 85       	ldd	r22, Y+11	; 0x0b
   15876:	7c 85       	ldd	r23, Y+12	; 0x0c
   15878:	8d 85       	ldd	r24, Y+13	; 0x0d
   1587a:	9e 85       	ldd	r25, Y+14	; 0x0e
   1587c:	a7 01       	movw	r20, r14
   1587e:	96 01       	movw	r18, r12
   15880:	0e 94 04 e4 	call	0x1c808	; 0x1c808 <__udivmodsi4>
   15884:	da 01       	movw	r26, r20
   15886:	c9 01       	movw	r24, r18
   15888:	88 0d       	add	r24, r8
   1588a:	99 1d       	adc	r25, r9
   1588c:	aa 1d       	adc	r26, r10
   1588e:	bb 1d       	adc	r27, r11
   15890:	f8 01       	movw	r30, r16
   15892:	46 a0       	ldd	r4, Z+38	; 0x26
   15894:	57 a0       	ldd	r5, Z+39	; 0x27
   15896:	60 a4       	ldd	r6, Z+40	; 0x28
   15898:	71 a4       	ldd	r7, Z+41	; 0x29
   1589a:	40 91 c3 01 	lds	r20, 0x01C3	; 0x8001c3 <debuglevel>
   1589e:	50 91 c4 01 	lds	r21, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   158a2:	48 16       	cp	r4, r24
   158a4:	59 06       	cpc	r5, r25
   158a6:	6a 06       	cpc	r6, r26
   158a8:	7b 06       	cpc	r7, r27
   158aa:	f0 f4       	brcc	.+60     	; 0x158e8 <SS80_cmd_seek+0xa2>
   158ac:	81 e0       	ldi	r24, 0x01	; 1
   158ae:	8a 83       	std	Y+2, r24	; 0x02
   158b0:	8b 81       	ldd	r24, Y+3	; 0x03
   158b2:	9c 81       	ldd	r25, Y+4	; 0x04
   158b4:	84 60       	ori	r24, 0x04	; 4
   158b6:	9c 83       	std	Y+4, r25	; 0x04
   158b8:	8b 83       	std	Y+3, r24	; 0x03
   158ba:	40 ff       	sbrs	r20, 0
   158bc:	31 c0       	rjmp	.+98     	; 0x15920 <SS80_cmd_seek+0xda>
   158be:	a0 89       	ldd	r26, Z+16	; 0x10
   158c0:	b1 89       	ldd	r27, Z+17	; 0x11
   158c2:	a5 01       	movw	r20, r10
   158c4:	94 01       	movw	r18, r8
   158c6:	0e 94 66 e4 	call	0x1c8cc	; 0x1c8cc <__muluhisi3>
   158ca:	ed b7       	in	r30, 0x3d	; 61
   158cc:	fe b7       	in	r31, 0x3e	; 62
   158ce:	64 83       	std	Z+4, r22	; 0x04
   158d0:	75 83       	std	Z+5, r23	; 0x05
   158d2:	86 83       	std	Z+6, r24	; 0x06
   158d4:	97 83       	std	Z+7, r25	; 0x07
   158d6:	8a ee       	ldi	r24, 0xEA	; 234
   158d8:	90 e2       	ldi	r25, 0x20	; 32
   158da:	a0 e0       	ldi	r26, 0x00	; 0
   158dc:	81 83       	std	Z+1, r24	; 0x01
   158de:	92 83       	std	Z+2, r25	; 0x02
   158e0:	a3 83       	std	Z+3, r26	; 0x03
   158e2:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   158e6:	1c c0       	rjmp	.+56     	; 0x15920 <SS80_cmd_seek+0xda>
   158e8:	ca 01       	movw	r24, r20
   158ea:	80 72       	andi	r24, 0x20	; 32
   158ec:	99 27       	eor	r25, r25
   158ee:	45 ff       	sbrs	r20, 5
   158f0:	19 c0       	rjmp	.+50     	; 0x15924 <SS80_cmd_seek+0xde>
   158f2:	a5 01       	movw	r20, r10
   158f4:	94 01       	movw	r18, r8
   158f6:	c7 01       	movw	r24, r14
   158f8:	b6 01       	movw	r22, r12
   158fa:	0e 94 c2 e3 	call	0x1c784	; 0x1c784 <__mulsi3>
   158fe:	ed b7       	in	r30, 0x3d	; 61
   15900:	fe b7       	in	r31, 0x3e	; 62
   15902:	64 83       	std	Z+4, r22	; 0x04
   15904:	75 83       	std	Z+5, r23	; 0x05
   15906:	86 83       	std	Z+6, r24	; 0x06
   15908:	97 83       	std	Z+7, r25	; 0x07
   1590a:	86 ed       	ldi	r24, 0xD6	; 214
   1590c:	90 e2       	ldi	r25, 0x20	; 32
   1590e:	a0 e0       	ldi	r26, 0x00	; 0
   15910:	81 83       	std	Z+1, r24	; 0x01
   15912:	92 83       	std	Z+2, r25	; 0x02
   15914:	a3 83       	std	Z+3, r26	; 0x03
   15916:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1591a:	80 e0       	ldi	r24, 0x00	; 0
   1591c:	90 e0       	ldi	r25, 0x00	; 0
   1591e:	02 c0       	rjmp	.+4      	; 0x15924 <SS80_cmd_seek+0xde>
   15920:	81 e0       	ldi	r24, 0x01	; 1
   15922:	90 e0       	ldi	r25, 0x00	; 0
   15924:	cd b7       	in	r28, 0x3d	; 61
   15926:	de b7       	in	r29, 0x3e	; 62
   15928:	27 96       	adiw	r28, 0x07	; 7
   1592a:	e0 e1       	ldi	r30, 0x10	; 16
   1592c:	0c 94 a4 e4 	jmp	0x1c948	; 0x1c948 <__epilogue_restores__+0x4>

00015930 <SS80_locate_and_write>:
   15930:	a3 e1       	ldi	r26, 0x13	; 19
   15932:	b0 e0       	ldi	r27, 0x00	; 0
   15934:	ee e9       	ldi	r30, 0x9E	; 158
   15936:	fc ea       	ldi	r31, 0xAC	; 172
   15938:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
   1593c:	00 91 05 19 	lds	r16, 0x1905	; 0x801905 <SS80s>
   15940:	10 91 06 19 	lds	r17, 0x1906	; 0x801906 <SS80s+0x1>
   15944:	80 91 07 19 	lds	r24, 0x1907	; 0x801907 <SS80p>
   15948:	90 91 08 19 	lds	r25, 0x1908	; 0x801908 <SS80p+0x1>
   1594c:	fc 01       	movw	r30, r24
   1594e:	a0 89       	ldd	r26, Z+16	; 0x10
   15950:	b1 89       	ldd	r27, Z+17	; 0x11
   15952:	f8 01       	movw	r30, r16
   15954:	27 81       	ldd	r18, Z+7	; 0x07
   15956:	30 85       	ldd	r19, Z+8	; 0x08
   15958:	41 85       	ldd	r20, Z+9	; 0x09
   1595a:	52 85       	ldd	r21, Z+10	; 0x0a
   1595c:	0e 94 66 e4 	call	0x1c8cc	; 0x1c8cc <__muluhisi3>
   15960:	4b 01       	movw	r8, r22
   15962:	5c 01       	movw	r10, r24
   15964:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15968:	85 ff       	sbrs	r24, 5
   1596a:	16 c0       	rjmp	.+44     	; 0x15998 <SS80_locate_and_write+0x68>
   1596c:	83 85       	ldd	r24, Z+11	; 0x0b
   1596e:	94 85       	ldd	r25, Z+12	; 0x0c
   15970:	a5 85       	ldd	r26, Z+13	; 0x0d
   15972:	b6 85       	ldd	r27, Z+14	; 0x0e
   15974:	ed b7       	in	r30, 0x3d	; 61
   15976:	fe b7       	in	r31, 0x3e	; 62
   15978:	80 87       	std	Z+8, r24	; 0x08
   1597a:	91 87       	std	Z+9, r25	; 0x09
   1597c:	a2 87       	std	Z+10, r26	; 0x0a
   1597e:	b3 87       	std	Z+11, r27	; 0x0b
   15980:	84 82       	std	Z+4, r8	; 0x04
   15982:	95 82       	std	Z+5, r9	; 0x05
   15984:	a6 82       	std	Z+6, r10	; 0x06
   15986:	b7 82       	std	Z+7, r11	; 0x07
   15988:	8b e6       	ldi	r24, 0x6B	; 107
   1598a:	96 e2       	ldi	r25, 0x26	; 38
   1598c:	a0 e0       	ldi	r26, 0x00	; 0
   1598e:	81 83       	std	Z+1, r24	; 0x01
   15990:	92 83       	std	Z+2, r25	; 0x02
   15992:	a3 83       	std	Z+3, r26	; 0x03
   15994:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   15998:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   1599c:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   159a0:	12 82       	std	Z+2, r1	; 0x02
   159a2:	54 98       	cbi	0x0a, 4	; 10
   159a4:	4c 99       	sbic	0x09, 4	; 9
   159a6:	03 c0       	rjmp	.+6      	; 0x159ae <SS80_locate_and_write+0x7e>
   159a8:	80 e0       	ldi	r24, 0x00	; 0
   159aa:	90 e1       	ldi	r25, 0x10	; 16
   159ac:	4f c1       	rjmp	.+670    	; 0x15c4c <SS80_locate_and_write+0x31c>
   159ae:	4b df       	rcall	.-362    	; 0x15846 <SS80_cmd_seek>
   159b0:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   159b4:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   159b8:	89 2b       	or	r24, r25
   159ba:	41 f0       	breq	.+16     	; 0x159cc <SS80_locate_and_write+0x9c>
   159bc:	83 81       	ldd	r24, Z+3	; 0x03
   159be:	94 81       	ldd	r25, Z+4	; 0x04
   159c0:	82 60       	ori	r24, 0x02	; 2
   159c2:	94 83       	std	Z+4, r25	; 0x04
   159c4:	83 83       	std	Z+3, r24	; 0x03
   159c6:	01 e0       	ldi	r16, 0x01	; 1
   159c8:	10 e0       	ldi	r17, 0x00	; 0
   159ca:	02 c0       	rjmp	.+4      	; 0x159d0 <SS80_locate_and_write+0xa0>
   159cc:	00 e0       	ldi	r16, 0x00	; 0
   159ce:	10 e0       	ldi	r17, 0x00	; 0
   159d0:	23 84       	ldd	r2, Z+11	; 0x0b
   159d2:	34 84       	ldd	r3, Z+12	; 0x0c
   159d4:	1d 86       	std	Y+13, r1	; 0x0d
   159d6:	1c 86       	std	Y+12, r1	; 0x0c
   159d8:	41 2c       	mov	r4, r1
   159da:	51 2c       	mov	r5, r1
   159dc:	32 01       	movw	r6, r4
   159de:	8e e1       	ldi	r24, 0x1E	; 30
   159e0:	96 e2       	ldi	r25, 0x26	; 38
   159e2:	9c 01       	movw	r18, r24
   159e4:	40 e0       	ldi	r20, 0x00	; 0
   159e6:	2e 87       	std	Y+14, r18	; 0x0e
   159e8:	3f 87       	std	Y+15, r19	; 0x0f
   159ea:	48 8b       	std	Y+16, r20	; 0x10
   159ec:	84 e4       	ldi	r24, 0x44	; 68
   159ee:	96 e2       	ldi	r25, 0x26	; 38
   159f0:	9c 01       	movw	r18, r24
   159f2:	40 e0       	ldi	r20, 0x00	; 0
   159f4:	29 8b       	std	Y+17, r18	; 0x11
   159f6:	3a 8b       	std	Y+18, r19	; 0x12
   159f8:	4b 8b       	std	Y+19, r20	; 0x13
   159fa:	12 14       	cp	r1, r2
   159fc:	13 04       	cpc	r1, r3
   159fe:	0c f0       	brlt	.+2      	; 0x15a02 <SS80_locate_and_write+0xd2>
   15a00:	f5 c0       	rjmp	.+490    	; 0x15bec <SS80_locate_and_write+0x2bc>
   15a02:	54 98       	cbi	0x0a, 4	; 10
   15a04:	4c 9b       	sbis	0x09, 4	; 9
   15a06:	d0 cf       	rjmp	.-96     	; 0x159a8 <SS80_locate_and_write+0x78>
   15a08:	71 01       	movw	r14, r2
   15a0a:	31 e0       	ldi	r19, 0x01	; 1
   15a0c:	23 16       	cp	r2, r19
   15a0e:	33 06       	cpc	r3, r19
   15a10:	1c f0       	brlt	.+6      	; 0x15a18 <SS80_locate_and_write+0xe8>
   15a12:	e1 2c       	mov	r14, r1
   15a14:	ff 24       	eor	r15, r15
   15a16:	f3 94       	inc	r15
   15a18:	e2 e8       	ldi	r30, 0x82	; 130
   15a1a:	fc e1       	ldi	r31, 0x1C	; 28
   15a1c:	20 e0       	ldi	r18, 0x00	; 0
   15a1e:	32 e0       	ldi	r19, 0x02	; 2
   15a20:	11 92       	st	Z+, r1
   15a22:	21 50       	subi	r18, 0x01	; 1
   15a24:	30 40       	sbci	r19, 0x00	; 0
   15a26:	e1 f7       	brne	.-8      	; 0x15a20 <SS80_locate_and_write+0xf0>
   15a28:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15a2c:	87 fd       	sbrc	r24, 7
   15a2e:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_timer_elapsed_begin>
   15a32:	ae 01       	movw	r20, r28
   15a34:	44 5f       	subi	r20, 0xF4	; 244
   15a36:	5f 4f       	sbci	r21, 0xFF	; 255
   15a38:	b7 01       	movw	r22, r14
   15a3a:	82 e8       	ldi	r24, 0x82	; 130
   15a3c:	9c e1       	ldi	r25, 0x1C	; 28
   15a3e:	0e 94 c6 8b 	call	0x1178c	; 0x1178c <gpib_read_str>
   15a42:	6c 01       	movw	r12, r24
   15a44:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15a48:	87 ff       	sbrs	r24, 7
   15a4a:	04 c0       	rjmp	.+8      	; 0x15a54 <SS80_locate_and_write+0x124>
   15a4c:	87 ea       	ldi	r24, 0xA7	; 167
   15a4e:	9f e0       	ldi	r25, 0x0F	; 15
   15a50:	0e 94 5e 86 	call	0x10cbc	; 0x10cbc <gpib_timer_elapsed_end>
   15a54:	ce 14       	cp	r12, r14
   15a56:	df 04       	cpc	r13, r15
   15a58:	39 f1       	breq	.+78     	; 0x15aa8 <SS80_locate_and_write+0x178>
   15a5a:	8c 85       	ldd	r24, Y+12	; 0x0c
   15a5c:	9d 85       	ldd	r25, Y+13	; 0x0d
   15a5e:	9c 01       	movw	r18, r24
   15a60:	22 27       	eor	r18, r18
   15a62:	30 7d       	andi	r19, 0xD0	; 208
   15a64:	23 2b       	or	r18, r19
   15a66:	d1 f0       	breq	.+52     	; 0x15a9c <SS80_locate_and_write+0x16c>
   15a68:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15a6c:	80 ff       	sbrs	r24, 0
   15a6e:	0a c0       	rjmp	.+20     	; 0x15a84 <SS80_locate_and_write+0x154>
   15a70:	88 e5       	ldi	r24, 0x58	; 88
   15a72:	96 e2       	ldi	r25, 0x26	; 38
   15a74:	a0 e0       	ldi	r26, 0x00	; 0
   15a76:	ed b7       	in	r30, 0x3d	; 61
   15a78:	fe b7       	in	r31, 0x3e	; 62
   15a7a:	81 83       	std	Z+1, r24	; 0x01
   15a7c:	92 83       	std	Z+2, r25	; 0x02
   15a7e:	a3 83       	std	Z+3, r26	; 0x03
   15a80:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   15a84:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15a88:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15a8c:	83 81       	ldd	r24, Z+3	; 0x03
   15a8e:	94 81       	ldd	r25, Z+4	; 0x04
   15a90:	82 60       	ori	r24, 0x02	; 2
   15a92:	94 83       	std	Z+4, r25	; 0x04
   15a94:	83 83       	std	Z+3, r24	; 0x03
   15a96:	81 e0       	ldi	r24, 0x01	; 1
   15a98:	82 83       	std	Z+2, r24	; 0x02
   15a9a:	99 c0       	rjmp	.+306    	; 0x15bce <SS80_locate_and_write+0x29e>
   15a9c:	c1 14       	cp	r12, r1
   15a9e:	d1 04       	cpc	r13, r1
   15aa0:	09 f0       	breq	.+2      	; 0x15aa4 <SS80_locate_and_write+0x174>
   15aa2:	d0 c0       	rjmp	.+416    	; 0x15c44 <SS80_locate_and_write+0x314>
   15aa4:	90 fd       	sbrc	r25, 0
   15aa6:	93 c0       	rjmp	.+294    	; 0x15bce <SS80_locate_and_write+0x29e>
   15aa8:	01 15       	cp	r16, r1
   15aaa:	11 05       	cpc	r17, r1
   15aac:	09 f0       	breq	.+2      	; 0x15ab0 <SS80_locate_and_write+0x180>
   15aae:	84 c0       	rjmp	.+264    	; 0x15bb8 <SS80_locate_and_write+0x288>
   15ab0:	c1 14       	cp	r12, r1
   15ab2:	d1 04       	cpc	r13, r1
   15ab4:	09 f4       	brne	.+2      	; 0x15ab8 <SS80_locate_and_write+0x188>
   15ab6:	82 c0       	rjmp	.+260    	; 0x15bbc <SS80_locate_and_write+0x28c>
   15ab8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15abc:	86 fd       	sbrc	r24, 6
   15abe:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_timer_elapsed_begin>
   15ac2:	e0 90 05 19 	lds	r14, 0x1905	; 0x801905 <SS80s>
   15ac6:	f0 90 06 19 	lds	r15, 0x1906	; 0x801906 <SS80s+0x1>
   15aca:	f3 e0       	ldi	r31, 0x03	; 3
   15acc:	ef 0e       	add	r14, r31
   15ace:	f1 1c       	adc	r15, r1
   15ad0:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15ad4:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   15ad8:	86 01       	movw	r16, r12
   15ada:	22 e8       	ldi	r18, 0x82	; 130
   15adc:	3c e1       	ldi	r19, 0x1C	; 28
   15ade:	b5 01       	movw	r22, r10
   15ae0:	a4 01       	movw	r20, r8
   15ae2:	82 81       	ldd	r24, Z+2	; 0x02
   15ae4:	93 81       	ldd	r25, Z+3	; 0x03
   15ae6:	0e 94 f5 85 	call	0x10bea	; 0x10bea <dbf_open_write>
   15aea:	7c 01       	movw	r14, r24
   15aec:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15af0:	86 ff       	sbrs	r24, 6
   15af2:	04 c0       	rjmp	.+8      	; 0x15afc <SS80_locate_and_write+0x1cc>
   15af4:	81 eb       	ldi	r24, 0xB1	; 177
   15af6:	9f e0       	ldi	r25, 0x0F	; 15
   15af8:	0e 94 5e 86 	call	0x10cbc	; 0x10cbc <gpib_timer_elapsed_end>
   15afc:	ce 14       	cp	r12, r14
   15afe:	df 04       	cpc	r13, r15
   15b00:	39 f1       	breq	.+78     	; 0x15b50 <SS80_locate_and_write+0x220>
   15b02:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15b06:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15b0a:	83 81       	ldd	r24, Z+3	; 0x03
   15b0c:	94 81       	ldd	r25, Z+4	; 0x04
   15b0e:	82 60       	ori	r24, 0x02	; 2
   15b10:	94 83       	std	Z+4, r25	; 0x04
   15b12:	83 83       	std	Z+3, r24	; 0x03
   15b14:	0e 94 fe 70 	call	0xe1fc	; 0xe1fc <mmc_wp_status>
   15b18:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15b1c:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15b20:	89 2b       	or	r24, r25
   15b22:	29 f0       	breq	.+10     	; 0x15b2e <SS80_locate_and_write+0x1fe>
   15b24:	83 81       	ldd	r24, Z+3	; 0x03
   15b26:	94 81       	ldd	r25, Z+4	; 0x04
   15b28:	88 60       	ori	r24, 0x08	; 8
   15b2a:	94 83       	std	Z+4, r25	; 0x04
   15b2c:	83 83       	std	Z+3, r24	; 0x03
   15b2e:	21 e0       	ldi	r18, 0x01	; 1
   15b30:	22 83       	std	Z+2, r18	; 0x02
   15b32:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15b36:	80 ff       	sbrs	r24, 0
   15b38:	27 c0       	rjmp	.+78     	; 0x15b88 <SS80_locate_and_write+0x258>
   15b3a:	89 89       	ldd	r24, Y+17	; 0x11
   15b3c:	9a 89       	ldd	r25, Y+18	; 0x12
   15b3e:	ab 89       	ldd	r26, Y+19	; 0x13
   15b40:	ed b7       	in	r30, 0x3d	; 61
   15b42:	fe b7       	in	r31, 0x3e	; 62
   15b44:	81 83       	std	Z+1, r24	; 0x01
   15b46:	92 83       	std	Z+2, r25	; 0x02
   15b48:	a3 83       	std	Z+3, r26	; 0x03
   15b4a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   15b4e:	1c c0       	rjmp	.+56     	; 0x15b88 <SS80_locate_and_write+0x258>
   15b50:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15b54:	85 ff       	sbrs	r24, 5
   15b56:	0c c0       	rjmp	.+24     	; 0x15b70 <SS80_locate_and_write+0x240>
   15b58:	ed b7       	in	r30, 0x3d	; 61
   15b5a:	fe b7       	in	r31, 0x3e	; 62
   15b5c:	d5 82       	std	Z+5, r13	; 0x05
   15b5e:	c4 82       	std	Z+4, r12	; 0x04
   15b60:	2e 85       	ldd	r18, Y+14	; 0x0e
   15b62:	3f 85       	ldd	r19, Y+15	; 0x0f
   15b64:	48 89       	ldd	r20, Y+16	; 0x10
   15b66:	21 83       	std	Z+1, r18	; 0x01
   15b68:	32 83       	std	Z+2, r19	; 0x02
   15b6a:	43 83       	std	Z+3, r20	; 0x03
   15b6c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   15b70:	c6 01       	movw	r24, r12
   15b72:	0d 2c       	mov	r0, r13
   15b74:	00 0c       	add	r0, r0
   15b76:	aa 0b       	sbc	r26, r26
   15b78:	bb 0b       	sbc	r27, r27
   15b7a:	88 0e       	add	r8, r24
   15b7c:	99 1e       	adc	r9, r25
   15b7e:	aa 1e       	adc	r10, r26
   15b80:	bb 1e       	adc	r11, r27
   15b82:	00 e0       	ldi	r16, 0x00	; 0
   15b84:	10 e0       	ldi	r17, 0x00	; 0
   15b86:	05 c0       	rjmp	.+10     	; 0x15b92 <SS80_locate_and_write+0x262>
   15b88:	ec 14       	cp	r14, r12
   15b8a:	fd 04       	cpc	r15, r13
   15b8c:	64 f0       	brlt	.+24     	; 0x15ba6 <SS80_locate_and_write+0x276>
   15b8e:	01 e0       	ldi	r16, 0x01	; 1
   15b90:	10 e0       	ldi	r17, 0x00	; 0
   15b92:	c7 01       	movw	r24, r14
   15b94:	0f 2c       	mov	r0, r15
   15b96:	00 0c       	add	r0, r0
   15b98:	aa 0b       	sbc	r26, r26
   15b9a:	bb 0b       	sbc	r27, r27
   15b9c:	48 0e       	add	r4, r24
   15b9e:	59 1e       	adc	r5, r25
   15ba0:	6a 1e       	adc	r6, r26
   15ba2:	7b 1e       	adc	r7, r27
   15ba4:	0b c0       	rjmp	.+22     	; 0x15bbc <SS80_locate_and_write+0x28c>
   15ba6:	c6 01       	movw	r24, r12
   15ba8:	0d 2c       	mov	r0, r13
   15baa:	00 0c       	add	r0, r0
   15bac:	aa 0b       	sbc	r26, r26
   15bae:	bb 0b       	sbc	r27, r27
   15bb0:	48 0e       	add	r4, r24
   15bb2:	59 1e       	adc	r5, r25
   15bb4:	6a 1e       	adc	r6, r26
   15bb6:	7b 1e       	adc	r7, r27
   15bb8:	01 e0       	ldi	r16, 0x01	; 1
   15bba:	10 e0       	ldi	r17, 0x00	; 0
   15bbc:	2c 18       	sub	r2, r12
   15bbe:	3d 08       	sbc	r3, r13
   15bc0:	8c 85       	ldd	r24, Y+12	; 0x0c
   15bc2:	9d 85       	ldd	r25, Y+13	; 0x0d
   15bc4:	90 ff       	sbrs	r25, 0
   15bc6:	19 cf       	rjmp	.-462    	; 0x159fa <SS80_locate_and_write+0xca>
   15bc8:	12 14       	cp	r1, r2
   15bca:	13 04       	cpc	r1, r3
   15bcc:	7c f4       	brge	.+30     	; 0x15bec <SS80_locate_and_write+0x2bc>
   15bce:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15bd2:	80 ff       	sbrs	r24, 0
   15bd4:	1d c0       	rjmp	.+58     	; 0x15c10 <SS80_locate_and_write+0x2e0>
   15bd6:	86 ef       	ldi	r24, 0xF6	; 246
   15bd8:	95 e2       	ldi	r25, 0x25	; 37
   15bda:	a0 e0       	ldi	r26, 0x00	; 0
   15bdc:	ed b7       	in	r30, 0x3d	; 61
   15bde:	fe b7       	in	r31, 0x3e	; 62
   15be0:	81 83       	std	Z+1, r24	; 0x01
   15be2:	92 83       	std	Z+2, r25	; 0x02
   15be4:	a3 83       	std	Z+3, r26	; 0x03
   15be6:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   15bea:	12 c0       	rjmp	.+36     	; 0x15c10 <SS80_locate_and_write+0x2e0>
   15bec:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15bf0:	85 ff       	sbrs	r24, 5
   15bf2:	0e c0       	rjmp	.+28     	; 0x15c10 <SS80_locate_and_write+0x2e0>
   15bf4:	ed b7       	in	r30, 0x3d	; 61
   15bf6:	fe b7       	in	r31, 0x3e	; 62
   15bf8:	44 82       	std	Z+4, r4	; 0x04
   15bfa:	55 82       	std	Z+5, r5	; 0x05
   15bfc:	66 82       	std	Z+6, r6	; 0x06
   15bfe:	77 82       	std	Z+7, r7	; 0x07
   15c00:	8b ec       	ldi	r24, 0xCB	; 203
   15c02:	95 e2       	ldi	r25, 0x25	; 37
   15c04:	a0 e0       	ldi	r26, 0x00	; 0
   15c06:	81 83       	std	Z+1, r24	; 0x01
   15c08:	92 83       	std	Z+2, r25	; 0x02
   15c0a:	a3 83       	std	Z+3, r26	; 0x03
   15c0c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   15c10:	00 91 05 19 	lds	r16, 0x1905	; 0x801905 <SS80s>
   15c14:	10 91 06 19 	lds	r17, 0x1906	; 0x801906 <SS80s+0x1>
   15c18:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15c1c:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   15c20:	20 89       	ldd	r18, Z+16	; 0x10
   15c22:	31 89       	ldd	r19, Z+17	; 0x11
   15c24:	40 e0       	ldi	r20, 0x00	; 0
   15c26:	50 e0       	ldi	r21, 0x00	; 0
   15c28:	c5 01       	movw	r24, r10
   15c2a:	b4 01       	movw	r22, r8
   15c2c:	0e 94 04 e4 	call	0x1c808	; 0x1c808 <__udivmodsi4>
   15c30:	f8 01       	movw	r30, r16
   15c32:	27 83       	std	Z+7, r18	; 0x07
   15c34:	30 87       	std	Z+8, r19	; 0x08
   15c36:	41 87       	std	Z+9, r20	; 0x09
   15c38:	52 87       	std	Z+10, r21	; 0x0a
   15c3a:	8c 85       	ldd	r24, Y+12	; 0x0c
   15c3c:	9d 85       	ldd	r25, Y+13	; 0x0d
   15c3e:	88 27       	eor	r24, r24
   15c40:	90 7d       	andi	r25, 0xD0	; 208
   15c42:	04 c0       	rjmp	.+8      	; 0x15c4c <SS80_locate_and_write+0x31c>
   15c44:	01 2b       	or	r16, r17
   15c46:	09 f4       	brne	.+2      	; 0x15c4a <SS80_locate_and_write+0x31a>
   15c48:	37 cf       	rjmp	.-402    	; 0x15ab8 <SS80_locate_and_write+0x188>
   15c4a:	b6 cf       	rjmp	.-148    	; 0x15bb8 <SS80_locate_and_write+0x288>
   15c4c:	63 96       	adiw	r28, 0x13	; 19
   15c4e:	e2 e1       	ldi	r30, 0x12	; 18
   15c50:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

00015c54 <SS80_Report>:
   15c54:	a8 e0       	ldi	r26, 0x08	; 8
   15c56:	b0 e0       	ldi	r27, 0x00	; 0
   15c58:	e0 e3       	ldi	r30, 0x30	; 48
   15c5a:	fe ea       	ldi	r31, 0xAE	; 174
   15c5c:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
   15c60:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15c64:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15c68:	82 81       	ldd	r24, Z+2	; 0x02
   15c6a:	88 87       	std	Y+8, r24	; 0x08
   15c6c:	80 e0       	ldi	r24, 0x00	; 0
   15c6e:	91 e0       	ldi	r25, 0x01	; 1
   15c70:	9f 83       	std	Y+7, r25	; 0x07
   15c72:	8e 83       	std	Y+6, r24	; 0x06
   15c74:	ae 01       	movw	r20, r28
   15c76:	4a 5f       	subi	r20, 0xFA	; 250
   15c78:	5f 4f       	sbci	r21, 0xFF	; 255
   15c7a:	61 e0       	ldi	r22, 0x01	; 1
   15c7c:	70 e0       	ldi	r23, 0x00	; 0
   15c7e:	ce 01       	movw	r24, r28
   15c80:	08 96       	adiw	r24, 0x08	; 8
   15c82:	0e 94 68 8c 	call	0x118d0	; 0x118d0 <gpib_write_str>
   15c86:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   15c8a:	01 97       	sbiw	r24, 0x01	; 1
   15c8c:	89 f0       	breq	.+34     	; 0x15cb0 <SS80_Report+0x5c>
   15c8e:	20 ff       	sbrs	r18, 0
   15c90:	0a c0       	rjmp	.+20     	; 0x15ca6 <SS80_Report+0x52>
   15c92:	8c eb       	ldi	r24, 0xBC	; 188
   15c94:	90 e2       	ldi	r25, 0x20	; 32
   15c96:	a0 e0       	ldi	r26, 0x00	; 0
   15c98:	ed b7       	in	r30, 0x3d	; 61
   15c9a:	fe b7       	in	r31, 0x3e	; 62
   15c9c:	81 83       	std	Z+1, r24	; 0x01
   15c9e:	92 83       	std	Z+2, r25	; 0x02
   15ca0:	a3 83       	std	Z+3, r26	; 0x03
   15ca2:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   15ca6:	8e 81       	ldd	r24, Y+6	; 0x06
   15ca8:	9f 81       	ldd	r25, Y+7	; 0x07
   15caa:	88 27       	eor	r24, r24
   15cac:	90 7d       	andi	r25, 0xD0	; 208
   15cae:	1b c0       	rjmp	.+54     	; 0x15ce6 <SS80_Report+0x92>
   15cb0:	25 ff       	sbrs	r18, 5
   15cb2:	12 c0       	rjmp	.+36     	; 0x15cd8 <SS80_Report+0x84>
   15cb4:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15cb8:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15cbc:	82 81       	ldd	r24, Z+2	; 0x02
   15cbe:	90 e0       	ldi	r25, 0x00	; 0
   15cc0:	ed b7       	in	r30, 0x3d	; 61
   15cc2:	fe b7       	in	r31, 0x3e	; 62
   15cc4:	95 83       	std	Z+5, r25	; 0x05
   15cc6:	84 83       	std	Z+4, r24	; 0x04
   15cc8:	89 ea       	ldi	r24, 0xA9	; 169
   15cca:	90 e2       	ldi	r25, 0x20	; 32
   15ccc:	a0 e0       	ldi	r26, 0x00	; 0
   15cce:	81 83       	std	Z+1, r24	; 0x01
   15cd0:	92 83       	std	Z+2, r25	; 0x02
   15cd2:	a3 83       	std	Z+3, r26	; 0x03
   15cd4:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   15cd8:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15cdc:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15ce0:	12 82       	std	Z+2, r1	; 0x02
   15ce2:	80 e0       	ldi	r24, 0x00	; 0
   15ce4:	90 e0       	ldi	r25, 0x00	; 0
   15ce6:	28 96       	adiw	r28, 0x08	; 8
   15ce8:	e2 e0       	ldi	r30, 0x02	; 2
   15cea:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

00015cee <Clear_Common>:
   15cee:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15cf2:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15cf6:	25 81       	ldd	r18, Z+5	; 0x05
   15cf8:	30 e0       	ldi	r19, 0x00	; 0
   15cfa:	28 17       	cp	r18, r24
   15cfc:	39 07       	cpc	r19, r25
   15cfe:	19 f0       	breq	.+6      	; 0x15d06 <Clear_Common+0x18>
   15d00:	0f 97       	sbiw	r24, 0x0f	; 15
   15d02:	99 f4       	brne	.+38     	; 0x15d2a <Clear_Common+0x3c>
   15d04:	03 c0       	rjmp	.+6      	; 0x15d0c <Clear_Common+0x1e>
   15d06:	2f 30       	cpi	r18, 0x0F	; 15
   15d08:	31 05       	cpc	r19, r1
   15d0a:	09 f4       	brne	.+2      	; 0x15d0e <Clear_Common+0x20>
   15d0c:	15 82       	std	Z+5, r1	; 0x05
   15d0e:	16 82       	std	Z+6, r1	; 0x06
   15d10:	17 82       	std	Z+7, r1	; 0x07
   15d12:	10 86       	std	Z+8, r1	; 0x08
   15d14:	11 86       	std	Z+9, r1	; 0x09
   15d16:	12 86       	std	Z+10, r1	; 0x0a
   15d18:	13 86       	std	Z+11, r1	; 0x0b
   15d1a:	14 86       	std	Z+12, r1	; 0x0c
   15d1c:	15 86       	std	Z+13, r1	; 0x0d
   15d1e:	16 86       	std	Z+14, r1	; 0x0e
   15d20:	11 82       	std	Z+1, r1	; 0x01
   15d22:	10 82       	st	Z, r1
   15d24:	14 82       	std	Z+4, r1	; 0x04
   15d26:	13 82       	std	Z+3, r1	; 0x03
   15d28:	12 82       	std	Z+2, r1	; 0x02
   15d2a:	08 95       	ret

00015d2c <SS80_init>:
   15d2c:	a5 e0       	ldi	r26, 0x05	; 5
   15d2e:	b0 e0       	ldi	r27, 0x00	; 0
   15d30:	ec e9       	ldi	r30, 0x9C	; 156
   15d32:	fe ea       	ldi	r31, 0xAE	; 174
   15d34:	0c 94 90 e4 	jmp	0x1c920	; 0x1c920 <__prologue_saves__+0x14>
   15d38:	05 e6       	ldi	r16, 0x65	; 101
   15d3a:	10 e2       	ldi	r17, 0x20	; 32
   15d3c:	cb e0       	ldi	r28, 0x0B	; 11
   15d3e:	d0 e0       	ldi	r29, 0x00	; 0
   15d40:	82 e0       	ldi	r24, 0x02	; 2
   15d42:	f8 2e       	mov	r15, r24
   15d44:	84 e7       	ldi	r24, 0x74	; 116
   15d46:	97 e2       	ldi	r25, 0x27	; 39
   15d48:	6c 01       	movw	r12, r24
   15d4a:	e1 2c       	mov	r14, r1
   15d4c:	f8 01       	movw	r30, r16
   15d4e:	80 81       	ld	r24, Z
   15d50:	83 30       	cpi	r24, 0x03	; 3
   15d52:	29 f5       	brne	.+74     	; 0x15d9e <SS80_init+0x72>
   15d54:	ce 01       	movw	r24, r28
   15d56:	0e 94 28 94 	call	0x12850	; 0x12850 <set_active_device>
   15d5a:	89 2b       	or	r24, r25
   15d5c:	01 f1       	breq	.+64     	; 0x15d9e <SS80_init+0x72>
   15d5e:	8f e0       	ldi	r24, 0x0F	; 15
   15d60:	90 e0       	ldi	r25, 0x00	; 0
   15d62:	c5 df       	rcall	.-118    	; 0x15cee <Clear_Common>
   15d64:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15d68:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15d6c:	f2 82       	std	Z+2, r15	; 0x02
   15d6e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15d72:	85 ff       	sbrs	r24, 5
   15d74:	0c c0       	rjmp	.+24     	; 0x15d8e <SS80_init+0x62>
   15d76:	f8 01       	movw	r30, r16
   15d78:	81 81       	ldd	r24, Z+1	; 0x01
   15d7a:	90 e0       	ldi	r25, 0x00	; 0
   15d7c:	ed b7       	in	r30, 0x3d	; 61
   15d7e:	fe b7       	in	r31, 0x3e	; 62
   15d80:	95 83       	std	Z+5, r25	; 0x05
   15d82:	84 83       	std	Z+4, r24	; 0x04
   15d84:	c1 82       	std	Z+1, r12	; 0x01
   15d86:	d2 82       	std	Z+2, r13	; 0x02
   15d88:	e3 82       	std	Z+3, r14	; 0x03
   15d8a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   15d8e:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15d92:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   15d96:	81 81       	ldd	r24, Z+1	; 0x01
   15d98:	90 e0       	ldi	r25, 0x00	; 0
   15d9a:	0e 94 44 87 	call	0x10e88	; 0x10e88 <gpib_disable_PPR>
   15d9e:	21 97       	sbiw	r28, 0x01	; 1
   15da0:	0b 52       	subi	r16, 0x2B	; 43
   15da2:	11 09       	sbc	r17, r1
   15da4:	cf 3f       	cpi	r28, 0xFF	; 255
   15da6:	ff ef       	ldi	r31, 0xFF	; 255
   15da8:	df 07       	cpc	r29, r31
   15daa:	81 f6       	brne	.-96     	; 0x15d4c <SS80_init+0x20>
   15dac:	cd b7       	in	r28, 0x3d	; 61
   15dae:	de b7       	in	r29, 0x3e	; 62
   15db0:	25 96       	adiw	r28, 0x05	; 5
   15db2:	e8 e0       	ldi	r30, 0x08	; 8
   15db4:	0c 94 ac e4 	jmp	0x1c958	; 0x1c958 <__epilogue_restores__+0x14>

00015db8 <SS80_Channel_Independent_Clear>:
   15db8:	9a df       	rcall	.-204    	; 0x15cee <Clear_Common>
   15dba:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15dbe:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   15dc2:	81 81       	ldd	r24, Z+1	; 0x01
   15dc4:	90 e0       	ldi	r25, 0x00	; 0
   15dc6:	0e 94 0e 87 	call	0x10e1c	; 0x10e1c <gpib_enable_PPR>
   15dca:	80 e0       	ldi	r24, 0x00	; 0
   15dcc:	90 e0       	ldi	r25, 0x00	; 0
   15dce:	08 95       	ret

00015dd0 <SS80_Universal_Device_Clear>:
   15dd0:	8f e0       	ldi	r24, 0x0F	; 15
   15dd2:	90 e0       	ldi	r25, 0x00	; 0
   15dd4:	8c df       	rcall	.-232    	; 0x15cee <Clear_Common>
   15dd6:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15dda:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   15dde:	81 81       	ldd	r24, Z+1	; 0x01
   15de0:	90 e0       	ldi	r25, 0x00	; 0
   15de2:	0e 94 0e 87 	call	0x10e1c	; 0x10e1c <gpib_enable_PPR>
   15de6:	80 e0       	ldi	r24, 0x00	; 0
   15de8:	90 e0       	ldi	r25, 0x00	; 0
   15dea:	08 95       	ret

00015dec <SS80_Selected_Device_Clear>:
   15dec:	cf 93       	push	r28
   15dee:	df 93       	push	r29
   15df0:	00 d0       	rcall	.+0      	; 0x15df2 <SS80_Selected_Device_Clear+0x6>
   15df2:	1f 92       	push	r1
   15df4:	ec 01       	movw	r28, r24
   15df6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15dfa:	85 ff       	sbrs	r24, 5
   15dfc:	0a c0       	rjmp	.+20     	; 0x15e12 <SS80_Selected_Device_Clear+0x26>
   15dfe:	8d e9       	ldi	r24, 0x9D	; 157
   15e00:	90 e2       	ldi	r25, 0x20	; 32
   15e02:	a0 e0       	ldi	r26, 0x00	; 0
   15e04:	ed b7       	in	r30, 0x3d	; 61
   15e06:	fe b7       	in	r31, 0x3e	; 62
   15e08:	81 83       	std	Z+1, r24	; 0x01
   15e0a:	92 83       	std	Z+2, r25	; 0x02
   15e0c:	a3 83       	std	Z+3, r26	; 0x03
   15e0e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   15e12:	ce 01       	movw	r24, r28
   15e14:	6c df       	rcall	.-296    	; 0x15cee <Clear_Common>
   15e16:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15e1a:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   15e1e:	81 81       	ldd	r24, Z+1	; 0x01
   15e20:	90 e0       	ldi	r25, 0x00	; 0
   15e22:	0e 94 0e 87 	call	0x10e1c	; 0x10e1c <gpib_enable_PPR>
   15e26:	80 e0       	ldi	r24, 0x00	; 0
   15e28:	90 e0       	ldi	r25, 0x00	; 0
   15e2a:	cd b7       	in	r28, 0x3d	; 61
   15e2c:	de b7       	in	r29, 0x3e	; 62
   15e2e:	23 96       	adiw	r28, 0x03	; 3
   15e30:	e2 e0       	ldi	r30, 0x02	; 2
   15e32:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

00015e36 <SS80_Amigo_Clear>:
   15e36:	a6 e0       	ldi	r26, 0x06	; 6
   15e38:	b0 e0       	ldi	r27, 0x00	; 0
   15e3a:	e1 e2       	ldi	r30, 0x21	; 33
   15e3c:	ff ea       	ldi	r31, 0xAF	; 175
   15e3e:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
   15e42:	1d 82       	std	Y+5, r1	; 0x05
   15e44:	1c 82       	std	Y+4, r1	; 0x04
   15e46:	ae 01       	movw	r20, r28
   15e48:	4c 5f       	subi	r20, 0xFC	; 252
   15e4a:	5f 4f       	sbci	r21, 0xFF	; 255
   15e4c:	61 e0       	ldi	r22, 0x01	; 1
   15e4e:	70 e0       	ldi	r23, 0x00	; 0
   15e50:	ce 01       	movw	r24, r28
   15e52:	06 96       	adiw	r24, 0x06	; 6
   15e54:	0e 94 c6 8b 	call	0x1178c	; 0x1178c <gpib_read_str>
   15e58:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   15e5c:	01 97       	sbiw	r24, 0x01	; 1
   15e5e:	89 f0       	breq	.+34     	; 0x15e82 <SS80_Amigo_Clear+0x4c>
   15e60:	20 ff       	sbrs	r18, 0
   15e62:	0a c0       	rjmp	.+20     	; 0x15e78 <SS80_Amigo_Clear+0x42>
   15e64:	8a e8       	ldi	r24, 0x8A	; 138
   15e66:	90 e2       	ldi	r25, 0x20	; 32
   15e68:	a0 e0       	ldi	r26, 0x00	; 0
   15e6a:	ed b7       	in	r30, 0x3d	; 61
   15e6c:	fe b7       	in	r31, 0x3e	; 62
   15e6e:	81 83       	std	Z+1, r24	; 0x01
   15e70:	92 83       	std	Z+2, r25	; 0x02
   15e72:	a3 83       	std	Z+3, r26	; 0x03
   15e74:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   15e78:	8c 81       	ldd	r24, Y+4	; 0x04
   15e7a:	9d 81       	ldd	r25, Y+5	; 0x05
   15e7c:	88 27       	eor	r24, r24
   15e7e:	90 7d       	andi	r25, 0xD0	; 208
   15e80:	19 c0       	rjmp	.+50     	; 0x15eb4 <SS80_Amigo_Clear+0x7e>
   15e82:	25 ff       	sbrs	r18, 5
   15e84:	0a c0       	rjmp	.+20     	; 0x15e9a <SS80_Amigo_Clear+0x64>
   15e86:	8b e7       	ldi	r24, 0x7B	; 123
   15e88:	90 e2       	ldi	r25, 0x20	; 32
   15e8a:	a0 e0       	ldi	r26, 0x00	; 0
   15e8c:	ed b7       	in	r30, 0x3d	; 61
   15e8e:	fe b7       	in	r31, 0x3e	; 62
   15e90:	81 83       	std	Z+1, r24	; 0x01
   15e92:	92 83       	std	Z+2, r25	; 0x02
   15e94:	a3 83       	std	Z+3, r26	; 0x03
   15e96:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   15e9a:	8f e0       	ldi	r24, 0x0F	; 15
   15e9c:	90 e0       	ldi	r25, 0x00	; 0
   15e9e:	27 df       	rcall	.-434    	; 0x15cee <Clear_Common>
   15ea0:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15ea4:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   15ea8:	81 81       	ldd	r24, Z+1	; 0x01
   15eaa:	90 e0       	ldi	r25, 0x00	; 0
   15eac:	0e 94 0e 87 	call	0x10e1c	; 0x10e1c <gpib_enable_PPR>
   15eb0:	80 e0       	ldi	r24, 0x00	; 0
   15eb2:	90 e0       	ldi	r25, 0x00	; 0
   15eb4:	26 96       	adiw	r28, 0x06	; 6
   15eb6:	e2 e0       	ldi	r30, 0x02	; 2
   15eb8:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

00015ebc <SS80_Cancel>:
   15ebc:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   15ec0:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   15ec4:	11 82       	std	Z+1, r1	; 0x01
   15ec6:	10 82       	st	Z, r1
   15ec8:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15ecc:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   15ed0:	81 81       	ldd	r24, Z+1	; 0x01
   15ed2:	90 e0       	ldi	r25, 0x00	; 0
   15ed4:	0e 94 0e 87 	call	0x10e1c	; 0x10e1c <gpib_enable_PPR>
   15ed8:	80 e0       	ldi	r24, 0x00	; 0
   15eda:	90 e0       	ldi	r25, 0x00	; 0
   15edc:	08 95       	ret

00015ede <SS80_Transparent_State>:
   15ede:	a9 e0       	ldi	r26, 0x09	; 9
   15ee0:	b0 e0       	ldi	r27, 0x00	; 0
   15ee2:	e5 e7       	ldi	r30, 0x75	; 117
   15ee4:	ff ea       	ldi	r31, 0xAF	; 175
   15ee6:	0c 94 8e e4 	jmp	0x1c91c	; 0x1c91c <__prologue_saves__+0x10>
   15eea:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15eee:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   15ef2:	81 81       	ldd	r24, Z+1	; 0x01
   15ef4:	90 e0       	ldi	r25, 0x00	; 0
   15ef6:	0e 94 44 87 	call	0x10e88	; 0x10e88 <gpib_disable_PPR>
   15efa:	80 e0       	ldi	r24, 0x00	; 0
   15efc:	91 e0       	ldi	r25, 0x01	; 1
   15efe:	99 87       	std	Y+9, r25	; 0x09
   15f00:	88 87       	std	Y+8, r24	; 0x08
   15f02:	ae 01       	movw	r20, r28
   15f04:	48 5f       	subi	r20, 0xF8	; 248
   15f06:	5f 4f       	sbci	r21, 0xFF	; 255
   15f08:	60 e0       	ldi	r22, 0x00	; 0
   15f0a:	72 e0       	ldi	r23, 0x02	; 2
   15f0c:	82 e8       	ldi	r24, 0x82	; 130
   15f0e:	9c e1       	ldi	r25, 0x1C	; 28
   15f10:	0e 94 c6 8b 	call	0x1178c	; 0x1178c <gpib_read_str>
   15f14:	7c 01       	movw	r14, r24
   15f16:	88 85       	ldd	r24, Y+8	; 0x08
   15f18:	99 85       	ldd	r25, Y+9	; 0x09
   15f1a:	9c 01       	movw	r18, r24
   15f1c:	22 27       	eor	r18, r18
   15f1e:	30 7d       	andi	r19, 0xD0	; 208
   15f20:	23 2b       	or	r18, r19
   15f22:	79 f0       	breq	.+30     	; 0x15f42 <SS80_Transparent_State+0x64>
   15f24:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15f28:	80 ff       	sbrs	r24, 0
   15f2a:	da c0       	rjmp	.+436    	; 0x160e0 <SS80_Transparent_State+0x202>
   15f2c:	8a e1       	ldi	r24, 0x1A	; 26
   15f2e:	92 e2       	ldi	r25, 0x22	; 34
   15f30:	a0 e0       	ldi	r26, 0x00	; 0
   15f32:	ed b7       	in	r30, 0x3d	; 61
   15f34:	fe b7       	in	r31, 0x3e	; 62
   15f36:	81 83       	std	Z+1, r24	; 0x01
   15f38:	92 83       	std	Z+2, r25	; 0x02
   15f3a:	a3 83       	std	Z+3, r26	; 0x03
   15f3c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   15f40:	cf c0       	rjmp	.+414    	; 0x160e0 <SS80_Transparent_State+0x202>
   15f42:	e1 14       	cp	r14, r1
   15f44:	f1 04       	cpc	r15, r1
   15f46:	09 f4       	brne	.+2      	; 0x15f4a <SS80_Transparent_State+0x6c>
   15f48:	d0 c0       	rjmp	.+416    	; 0x160ea <SS80_Transparent_State+0x20c>
   15f4a:	90 fd       	sbrc	r25, 0
   15f4c:	0e c0       	rjmp	.+28     	; 0x15f6a <SS80_Transparent_State+0x8c>
   15f4e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15f52:	80 ff       	sbrs	r24, 0
   15f54:	0a c0       	rjmp	.+20     	; 0x15f6a <SS80_Transparent_State+0x8c>
   15f56:	81 e0       	ldi	r24, 0x01	; 1
   15f58:	92 e2       	ldi	r25, 0x22	; 34
   15f5a:	a0 e0       	ldi	r26, 0x00	; 0
   15f5c:	ed b7       	in	r30, 0x3d	; 61
   15f5e:	fe b7       	in	r31, 0x3e	; 62
   15f60:	81 83       	std	Z+1, r24	; 0x01
   15f62:	92 83       	std	Z+2, r25	; 0x02
   15f64:	a3 83       	std	Z+3, r26	; 0x03
   15f66:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   15f6a:	82 e8       	ldi	r24, 0x82	; 130
   15f6c:	a8 2e       	mov	r10, r24
   15f6e:	8c e1       	ldi	r24, 0x1C	; 28
   15f70:	b8 2e       	mov	r11, r24
   15f72:	00 e0       	ldi	r16, 0x00	; 0
   15f74:	10 e0       	ldi	r17, 0x00	; 0
   15f76:	0e 15       	cp	r16, r14
   15f78:	1f 05       	cpc	r17, r15
   15f7a:	0c f0       	brlt	.+2      	; 0x15f7e <SS80_Transparent_State+0xa0>
   15f7c:	9c c0       	rjmp	.+312    	; 0x160b6 <SS80_Transparent_State+0x1d8>
   15f7e:	68 01       	movw	r12, r16
   15f80:	ff ef       	ldi	r31, 0xFF	; 255
   15f82:	cf 1a       	sub	r12, r31
   15f84:	df 0a       	sbc	r13, r31
   15f86:	f5 01       	movw	r30, r10
   15f88:	81 91       	ld	r24, Z+
   15f8a:	5f 01       	movw	r10, r30
   15f8c:	28 2f       	mov	r18, r24
   15f8e:	30 e0       	ldi	r19, 0x00	; 0
   15f90:	a9 01       	movw	r20, r18
   15f92:	40 52       	subi	r20, 0x20	; 32
   15f94:	51 09       	sbc	r21, r1
   15f96:	40 31       	cpi	r20, 0x10	; 16
   15f98:	51 05       	cpc	r21, r1
   15f9a:	20 f4       	brcc	.+8      	; 0x15fa4 <SS80_Transparent_State+0xc6>
   15f9c:	80 52       	subi	r24, 0x20	; 32
   15f9e:	8f d9       	rcall	.-3298   	; 0x152be <SS80_Check_Unit>
   15fa0:	86 01       	movw	r16, r12
   15fa2:	e9 cf       	rjmp	.-46     	; 0x15f76 <SS80_Transparent_State+0x98>
   15fa4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   15fa8:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   15fac:	21 30       	cpi	r18, 0x01	; 1
   15fae:	31 05       	cpc	r19, r1
   15fb0:	c9 f4       	brne	.+50     	; 0x15fe4 <SS80_Transparent_State+0x106>
   15fb2:	0e 5f       	subi	r16, 0xFE	; 254
   15fb4:	1f 4f       	sbci	r17, 0xFF	; 255
   15fb6:	80 73       	andi	r24, 0x30	; 48
   15fb8:	99 27       	eor	r25, r25
   15fba:	89 2b       	or	r24, r25
   15fbc:	51 f0       	breq	.+20     	; 0x15fd2 <SS80_Transparent_State+0xf4>
   15fbe:	8c ed       	ldi	r24, 0xDC	; 220
   15fc0:	91 e2       	ldi	r25, 0x21	; 33
   15fc2:	a0 e0       	ldi	r26, 0x00	; 0
   15fc4:	ed b7       	in	r30, 0x3d	; 61
   15fc6:	fe b7       	in	r31, 0x3e	; 62
   15fc8:	81 83       	std	Z+1, r24	; 0x01
   15fca:	92 83       	std	Z+2, r25	; 0x02
   15fcc:	a3 83       	std	Z+3, r26	; 0x03
   15fce:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   15fd2:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   15fd6:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   15fda:	81 81       	ldd	r24, Z+1	; 0x01
   15fdc:	90 e0       	ldi	r25, 0x00	; 0
   15fde:	0e 94 0e 87 	call	0x10e1c	; 0x10e1c <gpib_enable_PPR>
   15fe2:	69 c0       	rjmp	.+210    	; 0x160b6 <SS80_Transparent_State+0x1d8>
   15fe4:	22 30       	cpi	r18, 0x02	; 2
   15fe6:	31 05       	cpc	r19, r1
   15fe8:	51 f4       	brne	.+20     	; 0x15ffe <SS80_Transparent_State+0x120>
   15fea:	0b 5f       	subi	r16, 0xFB	; 251
   15fec:	1f 4f       	sbci	r17, 0xFF	; 255
   15fee:	80 73       	andi	r24, 0x30	; 48
   15ff0:	99 27       	eor	r25, r25
   15ff2:	89 2b       	or	r24, r25
   15ff4:	09 f4       	brne	.+2      	; 0x15ff8 <SS80_Transparent_State+0x11a>
   15ff6:	5f c0       	rjmp	.+190    	; 0x160b6 <SS80_Transparent_State+0x1d8>
   15ff8:	8f eb       	ldi	r24, 0xBF	; 191
   15ffa:	91 e2       	ldi	r25, 0x21	; 33
   15ffc:	0c c0       	rjmp	.+24     	; 0x16016 <SS80_Transparent_State+0x138>
   15ffe:	23 30       	cpi	r18, 0x03	; 3
   16000:	31 05       	cpc	r19, r1
   16002:	91 f4       	brne	.+36     	; 0x16028 <SS80_Transparent_State+0x14a>
   16004:	0b 5f       	subi	r16, 0xFB	; 251
   16006:	1f 4f       	sbci	r17, 0xFF	; 255
   16008:	80 73       	andi	r24, 0x30	; 48
   1600a:	99 27       	eor	r25, r25
   1600c:	89 2b       	or	r24, r25
   1600e:	09 f4       	brne	.+2      	; 0x16012 <SS80_Transparent_State+0x134>
   16010:	52 c0       	rjmp	.+164    	; 0x160b6 <SS80_Transparent_State+0x1d8>
   16012:	81 ea       	ldi	r24, 0xA1	; 161
   16014:	91 e2       	ldi	r25, 0x21	; 33
   16016:	a0 e0       	ldi	r26, 0x00	; 0
   16018:	ed b7       	in	r30, 0x3d	; 61
   1601a:	fe b7       	in	r31, 0x3e	; 62
   1601c:	81 83       	std	Z+1, r24	; 0x01
   1601e:	92 83       	std	Z+2, r25	; 0x02
   16020:	a3 83       	std	Z+3, r26	; 0x03
   16022:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   16026:	47 c0       	rjmp	.+142    	; 0x160b6 <SS80_Transparent_State+0x1d8>
   16028:	28 30       	cpi	r18, 0x08	; 8
   1602a:	31 05       	cpc	r19, r1
   1602c:	e1 f4       	brne	.+56     	; 0x16066 <SS80_Transparent_State+0x188>
   1602e:	85 ff       	sbrs	r24, 5
   16030:	12 c0       	rjmp	.+36     	; 0x16056 <SS80_Transparent_State+0x178>
   16032:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   16036:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   1603a:	85 81       	ldd	r24, Z+5	; 0x05
   1603c:	90 e0       	ldi	r25, 0x00	; 0
   1603e:	ed b7       	in	r30, 0x3d	; 61
   16040:	fe b7       	in	r31, 0x3e	; 62
   16042:	95 83       	std	Z+5, r25	; 0x05
   16044:	84 83       	std	Z+4, r24	; 0x04
   16046:	8a e7       	ldi	r24, 0x7A	; 122
   16048:	91 e2       	ldi	r25, 0x21	; 33
   1604a:	a0 e0       	ldi	r26, 0x00	; 0
   1604c:	81 83       	std	Z+1, r24	; 0x01
   1604e:	92 83       	std	Z+2, r25	; 0x02
   16050:	a3 83       	std	Z+3, r26	; 0x03
   16052:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   16056:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   1605a:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   1605e:	85 81       	ldd	r24, Z+5	; 0x05
   16060:	90 e0       	ldi	r25, 0x00	; 0
   16062:	aa de       	rcall	.-684    	; 0x15db8 <SS80_Channel_Independent_Clear>
   16064:	44 c0       	rjmp	.+136    	; 0x160ee <SS80_Transparent_State+0x210>
   16066:	29 30       	cpi	r18, 0x09	; 9
   16068:	31 05       	cpc	r19, r1
   1606a:	b1 f4       	brne	.+44     	; 0x16098 <SS80_Transparent_State+0x1ba>
   1606c:	85 ff       	sbrs	r24, 5
   1606e:	12 c0       	rjmp	.+36     	; 0x16094 <SS80_Transparent_State+0x1b6>
   16070:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   16074:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   16078:	85 81       	ldd	r24, Z+5	; 0x05
   1607a:	90 e0       	ldi	r25, 0x00	; 0
   1607c:	ed b7       	in	r30, 0x3d	; 61
   1607e:	fe b7       	in	r31, 0x3e	; 62
   16080:	95 83       	std	Z+5, r25	; 0x05
   16082:	84 83       	std	Z+4, r24	; 0x04
   16084:	86 e6       	ldi	r24, 0x66	; 102
   16086:	91 e2       	ldi	r25, 0x21	; 33
   16088:	a0 e0       	ldi	r26, 0x00	; 0
   1608a:	81 83       	std	Z+1, r24	; 0x01
   1608c:	92 83       	std	Z+2, r25	; 0x02
   1608e:	a3 83       	std	Z+3, r26	; 0x03
   16090:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   16094:	13 df       	rcall	.-474    	; 0x15ebc <SS80_Cancel>
   16096:	2b c0       	rjmp	.+86     	; 0x160ee <SS80_Transparent_State+0x210>
   16098:	80 ff       	sbrs	r24, 0
   1609a:	22 c0       	rjmp	.+68     	; 0x160e0 <SS80_Transparent_State+0x202>
   1609c:	ed b7       	in	r30, 0x3d	; 61
   1609e:	fe b7       	in	r31, 0x3e	; 62
   160a0:	35 83       	std	Z+5, r19	; 0x05
   160a2:	24 83       	std	Z+4, r18	; 0x04
   160a4:	86 e4       	ldi	r24, 0x46	; 70
   160a6:	91 e2       	ldi	r25, 0x21	; 33
   160a8:	a0 e0       	ldi	r26, 0x00	; 0
   160aa:	81 83       	std	Z+1, r24	; 0x01
   160ac:	92 83       	std	Z+2, r25	; 0x02
   160ae:	a3 83       	std	Z+3, r26	; 0x03
   160b0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   160b4:	86 01       	movw	r16, r12
   160b6:	0e 15       	cp	r16, r14
   160b8:	1f 05       	cpc	r17, r15
   160ba:	91 f0       	breq	.+36     	; 0x160e0 <SS80_Transparent_State+0x202>
   160bc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   160c0:	80 ff       	sbrs	r24, 0
   160c2:	0e c0       	rjmp	.+28     	; 0x160e0 <SS80_Transparent_State+0x202>
   160c4:	ed b7       	in	r30, 0x3d	; 61
   160c6:	fe b7       	in	r31, 0x3e	; 62
   160c8:	f7 82       	std	Z+7, r15	; 0x07
   160ca:	e6 82       	std	Z+6, r14	; 0x06
   160cc:	15 83       	std	Z+5, r17	; 0x05
   160ce:	04 83       	std	Z+4, r16	; 0x04
   160d0:	8a e0       	ldi	r24, 0x0A	; 10
   160d2:	91 e2       	ldi	r25, 0x21	; 33
   160d4:	a0 e0       	ldi	r26, 0x00	; 0
   160d6:	81 83       	std	Z+1, r24	; 0x01
   160d8:	92 83       	std	Z+2, r25	; 0x02
   160da:	a3 83       	std	Z+3, r26	; 0x03
   160dc:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   160e0:	88 85       	ldd	r24, Y+8	; 0x08
   160e2:	99 85       	ldd	r25, Y+9	; 0x09
   160e4:	88 27       	eor	r24, r24
   160e6:	90 7d       	andi	r25, 0xD0	; 208
   160e8:	02 c0       	rjmp	.+4      	; 0x160ee <SS80_Transparent_State+0x210>
   160ea:	80 e0       	ldi	r24, 0x00	; 0
   160ec:	90 e0       	ldi	r25, 0x00	; 0
   160ee:	29 96       	adiw	r28, 0x09	; 9
   160f0:	ea e0       	ldi	r30, 0x0A	; 10
   160f2:	0c 94 aa e4 	jmp	0x1c954	; 0x1c954 <__epilogue_restores__+0x10>

000160f6 <SS80_error_return>:
   160f6:	a6 e0       	ldi	r26, 0x06	; 6
   160f8:	b0 e0       	ldi	r27, 0x00	; 0
   160fa:	e1 e8       	ldi	r30, 0x81	; 129
   160fc:	f0 eb       	ldi	r31, 0xB0	; 176
   160fe:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
   16102:	80 e0       	ldi	r24, 0x00	; 0
   16104:	91 e0       	ldi	r25, 0x01	; 1
   16106:	9d 83       	std	Y+5, r25	; 0x05
   16108:	8c 83       	std	Y+4, r24	; 0x04
   1610a:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   1610e:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   16112:	81 e0       	ldi	r24, 0x01	; 1
   16114:	82 83       	std	Z+2, r24	; 0x02
   16116:	8e 83       	std	Y+6, r24	; 0x06
   16118:	ae 01       	movw	r20, r28
   1611a:	4c 5f       	subi	r20, 0xFC	; 252
   1611c:	5f 4f       	sbci	r21, 0xFF	; 255
   1611e:	61 e0       	ldi	r22, 0x01	; 1
   16120:	70 e0       	ldi	r23, 0x00	; 0
   16122:	ce 01       	movw	r24, r28
   16124:	06 96       	adiw	r24, 0x06	; 6
   16126:	0e 94 68 8c 	call	0x118d0	; 0x118d0 <gpib_write_str>
   1612a:	01 97       	sbiw	r24, 0x01	; 1
   1612c:	99 f0       	breq	.+38     	; 0x16154 <SS80_error_return+0x5e>
   1612e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16132:	80 ff       	sbrs	r24, 0
   16134:	0a c0       	rjmp	.+20     	; 0x1614a <SS80_error_return+0x54>
   16136:	88 e5       	ldi	r24, 0x58	; 88
   16138:	90 e2       	ldi	r25, 0x20	; 32
   1613a:	a0 e0       	ldi	r26, 0x00	; 0
   1613c:	ed b7       	in	r30, 0x3d	; 61
   1613e:	fe b7       	in	r31, 0x3e	; 62
   16140:	81 83       	std	Z+1, r24	; 0x01
   16142:	92 83       	std	Z+2, r25	; 0x02
   16144:	a3 83       	std	Z+3, r26	; 0x03
   16146:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1614a:	8c 81       	ldd	r24, Y+4	; 0x04
   1614c:	9d 81       	ldd	r25, Y+5	; 0x05
   1614e:	88 27       	eor	r24, r24
   16150:	90 7d       	andi	r25, 0xD0	; 208
   16152:	07 c0       	rjmp	.+14     	; 0x16162 <SS80_error_return+0x6c>
   16154:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   16158:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   1615c:	12 82       	std	Z+2, r1	; 0x02
   1615e:	80 e0       	ldi	r24, 0x00	; 0
   16160:	90 e0       	ldi	r25, 0x00	; 0
   16162:	26 96       	adiw	r28, 0x06	; 6
   16164:	e2 e0       	ldi	r30, 0x02	; 2
   16166:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

0001616a <SS80_locate_and_read>:
/// - Phases: Command, Report
/// @param[in] u: Unit
/// @return  0

int SS80_Channel_Independent_Clear( int u )
{
   1616a:	a7 e1       	ldi	r26, 0x17	; 23
   1616c:	b0 e0       	ldi	r27, 0x00	; 0
   1616e:	eb eb       	ldi	r30, 0xBB	; 187
   16170:	f0 eb       	ldi	r31, 0xB0	; 176
   16172:	0c 94 87 e4 	jmp	0x1c90e	; 0x1c90e <__prologue_saves__+0x2>
   16176:	60 91 05 19 	lds	r22, 0x1905	; 0x801905 <SS80s>
   1617a:	70 91 06 19 	lds	r23, 0x1906	; 0x801906 <SS80s+0x1>
   1617e:	fb 01       	movw	r30, r22
   16180:	27 81       	ldd	r18, Z+7	; 0x07
   16182:	30 85       	ldd	r19, Z+8	; 0x08
   16184:	41 85       	ldd	r20, Z+9	; 0x09
   16186:	52 85       	ldd	r21, Z+10	; 0x0a
   16188:	80 91 07 19 	lds	r24, 0x1907	; 0x801907 <SS80p>
   1618c:	90 91 08 19 	lds	r25, 0x1908	; 0x801908 <SS80p+0x1>
   16190:	fc 01       	movw	r30, r24
   16192:	a0 89       	ldd	r26, Z+16	; 0x10
   16194:	b1 89       	ldd	r27, Z+17	; 0x11
   16196:	fb 01       	movw	r30, r22
   16198:	12 82       	std	Z+2, r1	; 0x02
   1619a:	1d 86       	std	Y+13, r1	; 0x0d
   1619c:	1c 86       	std	Y+12, r1	; 0x0c
   1619e:	54 98       	cbi	0x0a, 4	; 10
   161a0:	4c 99       	sbic	0x09, 4	; 9
   161a2:	03 c0       	rjmp	.+6      	; 0x161aa <SS80_locate_and_read+0x40>
   161a4:	80 e0       	ldi	r24, 0x00	; 0
   161a6:	90 e1       	ldi	r25, 0x10	; 16
   161a8:	3e c1       	rjmp	.+636    	; 0x16426 <SS80_locate_and_read+0x2bc>
   161aa:	0e 94 66 e4 	call	0x1c8cc	; 0x1c8cc <__muluhisi3>
   161ae:	4b 01       	movw	r8, r22
   161b0:	5c 01       	movw	r10, r24
   161b2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   161b6:	85 ff       	sbrs	r24, 5
   161b8:	1a c0       	rjmp	.+52     	; 0x161ee <SS80_locate_and_read+0x84>
   161ba:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   161be:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   161c2:	83 85       	ldd	r24, Z+11	; 0x0b
   161c4:	94 85       	ldd	r25, Z+12	; 0x0c
   161c6:	a5 85       	ldd	r26, Z+13	; 0x0d
   161c8:	b6 85       	ldd	r27, Z+14	; 0x0e
   161ca:	ed b7       	in	r30, 0x3d	; 61
   161cc:	fe b7       	in	r31, 0x3e	; 62
   161ce:	80 87       	std	Z+8, r24	; 0x08
   161d0:	91 87       	std	Z+9, r25	; 0x09
   161d2:	a2 87       	std	Z+10, r26	; 0x0a
   161d4:	b3 87       	std	Z+11, r27	; 0x0b
   161d6:	84 82       	std	Z+4, r8	; 0x04
   161d8:	95 82       	std	Z+5, r9	; 0x05
   161da:	a6 82       	std	Z+6, r10	; 0x06
   161dc:	b7 82       	std	Z+7, r11	; 0x07
   161de:	80 e3       	ldi	r24, 0x30	; 48
   161e0:	97 e2       	ldi	r25, 0x27	; 39
   161e2:	a0 e0       	ldi	r26, 0x00	; 0
   161e4:	81 83       	std	Z+1, r24	; 0x01
   161e6:	92 83       	std	Z+2, r25	; 0x02
   161e8:	a3 83       	std	Z+3, r26	; 0x03
   161ea:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   161ee:	2b db       	rcall	.-2474   	; 0x15846 <SS80_cmd_seek>
   161f0:	89 2b       	or	r24, r25
   161f2:	09 f0       	breq	.+2      	; 0x161f6 <SS80_locate_and_read+0x8c>
   161f4:	ae c0       	rjmp	.+348    	; 0x16352 <SS80_locate_and_read+0x1e8>
   161f6:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   161fa:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   161fe:	43 84       	ldd	r4, Z+11	; 0x0b
   16200:	54 84       	ldd	r5, Z+12	; 0x0c
   16202:	65 84       	ldd	r6, Z+13	; 0x0d
   16204:	76 84       	ldd	r7, Z+14	; 0x0e
   16206:	1e 86       	std	Y+14, r1	; 0x0e
   16208:	1f 86       	std	Y+15, r1	; 0x0f
   1620a:	18 8a       	std	Y+16, r1	; 0x10
   1620c:	19 8a       	std	Y+17, r1	; 0x11
   1620e:	82 e1       	ldi	r24, 0x12	; 18
   16210:	97 e2       	ldi	r25, 0x27	; 39
   16212:	9c 01       	movw	r18, r24
   16214:	40 e0       	ldi	r20, 0x00	; 0
   16216:	2a 8b       	std	Y+18, r18	; 0x12
   16218:	3b 8b       	std	Y+19, r19	; 0x13
   1621a:	4c 8b       	std	Y+20, r20	; 0x14
   1621c:	33 24       	eor	r3, r3
   1621e:	33 94       	inc	r3
   16220:	81 ee       	ldi	r24, 0xE1	; 225
   16222:	96 e2       	ldi	r25, 0x26	; 38
   16224:	9c 01       	movw	r18, r24
   16226:	40 e0       	ldi	r20, 0x00	; 0
   16228:	2d 8b       	std	Y+21, r18	; 0x15
   1622a:	3e 8b       	std	Y+22, r19	; 0x16
   1622c:	4f 8b       	std	Y+23, r20	; 0x17
   1622e:	34 c0       	rjmp	.+104    	; 0x16298 <SS80_locate_and_read+0x12e>
   16230:	86 fd       	sbrc	r24, 6
   16232:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_timer_elapsed_begin>
   16236:	ae 01       	movw	r20, r28
   16238:	44 5f       	subi	r20, 0xF4	; 244
   1623a:	5f 4f       	sbci	r21, 0xFF	; 255
   1623c:	b6 01       	movw	r22, r12
   1623e:	82 e8       	ldi	r24, 0x82	; 130
   16240:	9c e1       	ldi	r25, 0x1C	; 28
   16242:	0e 94 68 8c 	call	0x118d0	; 0x118d0 <gpib_write_str>
   16246:	8c 01       	movw	r16, r24
   16248:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1624c:	86 ff       	sbrs	r24, 6
   1624e:	04 c0       	rjmp	.+8      	; 0x16258 <SS80_locate_and_read+0xee>
   16250:	86 ec       	ldi	r24, 0xC6	; 198
   16252:	9f e0       	ldi	r25, 0x0F	; 15
   16254:	0e 94 5e 86 	call	0x10cbc	; 0x10cbc <gpib_timer_elapsed_end>
   16258:	c0 16       	cp	r12, r16
   1625a:	d1 06       	cpc	r13, r17
   1625c:	09 f0       	breq	.+2      	; 0x16260 <SS80_locate_and_read+0xf6>
   1625e:	82 c0       	rjmp	.+260    	; 0x16364 <SS80_locate_and_read+0x1fa>
   16260:	0d 2c       	mov	r0, r13
   16262:	00 0c       	add	r0, r0
   16264:	ee 08       	sbc	r14, r14
   16266:	ff 08       	sbc	r15, r15
   16268:	8c 0c       	add	r8, r12
   1626a:	9d 1c       	adc	r9, r13
   1626c:	ae 1c       	adc	r10, r14
   1626e:	bf 1c       	adc	r11, r15
   16270:	01 2e       	mov	r0, r17
   16272:	00 0c       	add	r0, r0
   16274:	22 0b       	sbc	r18, r18
   16276:	33 0b       	sbc	r19, r19
   16278:	8e 85       	ldd	r24, Y+14	; 0x0e
   1627a:	9f 85       	ldd	r25, Y+15	; 0x0f
   1627c:	a8 89       	ldd	r26, Y+16	; 0x10
   1627e:	b9 89       	ldd	r27, Y+17	; 0x11
   16280:	80 0f       	add	r24, r16
   16282:	91 1f       	adc	r25, r17
   16284:	a2 1f       	adc	r26, r18
   16286:	b3 1f       	adc	r27, r19
   16288:	8e 87       	std	Y+14, r24	; 0x0e
   1628a:	9f 87       	std	Y+15, r25	; 0x0f
   1628c:	a8 8b       	std	Y+16, r26	; 0x10
   1628e:	b9 8b       	std	Y+17, r27	; 0x11
   16290:	40 1a       	sub	r4, r16
   16292:	51 0a       	sbc	r5, r17
   16294:	62 0a       	sbc	r6, r18
   16296:	73 0a       	sbc	r7, r19
   16298:	41 14       	cp	r4, r1
   1629a:	51 04       	cpc	r5, r1
   1629c:	61 04       	cpc	r6, r1
   1629e:	71 04       	cpc	r7, r1
   162a0:	09 f4       	brne	.+2      	; 0x162a4 <SS80_locate_and_read+0x13a>
   162a2:	92 c0       	rjmp	.+292    	; 0x163c8 <SS80_locate_and_read+0x25e>
   162a4:	54 98       	cbi	0x0a, 4	; 10
   162a6:	4c 9b       	sbis	0x09, 4	; 9
   162a8:	7d cf       	rjmp	.-262    	; 0x161a4 <SS80_locate_and_read+0x3a>
   162aa:	31 e0       	ldi	r19, 0x01	; 1
   162ac:	43 16       	cp	r4, r19
   162ae:	53 06       	cpc	r5, r19
   162b0:	61 04       	cpc	r6, r1
   162b2:	71 04       	cpc	r7, r1
   162b4:	08 f4       	brcc	.+2      	; 0x162b8 <SS80_locate_and_read+0x14e>
   162b6:	4f c0       	rjmp	.+158    	; 0x16356 <SS80_locate_and_read+0x1ec>
   162b8:	1d 86       	std	Y+13, r1	; 0x0d
   162ba:	1c 86       	std	Y+12, r1	; 0x0c
   162bc:	c1 2c       	mov	r12, r1
   162be:	dd 24       	eor	r13, r13
   162c0:	d3 94       	inc	r13
   162c2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   162c6:	86 fd       	sbrc	r24, 6
   162c8:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_timer_elapsed_begin>
   162cc:	e0 90 05 19 	lds	r14, 0x1905	; 0x801905 <SS80s>
   162d0:	f0 90 06 19 	lds	r15, 0x1906	; 0x801906 <SS80s+0x1>
   162d4:	43 e0       	ldi	r20, 0x03	; 3
   162d6:	e4 0e       	add	r14, r20
   162d8:	f1 1c       	adc	r15, r1
   162da:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   162de:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   162e2:	86 01       	movw	r16, r12
   162e4:	22 e8       	ldi	r18, 0x82	; 130
   162e6:	3c e1       	ldi	r19, 0x1C	; 28
   162e8:	b5 01       	movw	r22, r10
   162ea:	a4 01       	movw	r20, r8
   162ec:	82 81       	ldd	r24, Z+2	; 0x02
   162ee:	93 81       	ldd	r25, Z+3	; 0x03
   162f0:	0e 94 9e 85 	call	0x10b3c	; 0x10b3c <dbf_open_read>
   162f4:	8c 01       	movw	r16, r24
   162f6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   162fa:	86 ff       	sbrs	r24, 6
   162fc:	04 c0       	rjmp	.+8      	; 0x16306 <SS80_locate_and_read+0x19c>
   162fe:	8c eb       	ldi	r24, 0xBC	; 188
   16300:	9f e0       	ldi	r25, 0x0F	; 15
   16302:	0e 94 5e 86 	call	0x10cbc	; 0x10cbc <gpib_timer_elapsed_end>
   16306:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1630a:	85 ff       	sbrs	r24, 5
   1630c:	0c c0       	rjmp	.+24     	; 0x16326 <SS80_locate_and_read+0x1bc>
   1630e:	ed b7       	in	r30, 0x3d	; 61
   16310:	fe b7       	in	r31, 0x3e	; 62
   16312:	15 83       	std	Z+5, r17	; 0x05
   16314:	04 83       	std	Z+4, r16	; 0x04
   16316:	2a 89       	ldd	r18, Y+18	; 0x12
   16318:	3b 89       	ldd	r19, Y+19	; 0x13
   1631a:	4c 89       	ldd	r20, Y+20	; 0x14
   1631c:	21 83       	std	Z+1, r18	; 0x01
   1631e:	32 83       	std	Z+2, r19	; 0x02
   16320:	43 83       	std	Z+3, r20	; 0x03
   16322:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   16326:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1632a:	17 ff       	sbrs	r17, 7
   1632c:	81 cf       	rjmp	.-254    	; 0x16230 <SS80_locate_and_read+0xc6>
   1632e:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   16332:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   16336:	91 e0       	ldi	r25, 0x01	; 1
   16338:	92 83       	std	Z+2, r25	; 0x02
   1633a:	80 ff       	sbrs	r24, 0
   1633c:	0a c0       	rjmp	.+20     	; 0x16352 <SS80_locate_and_read+0x1e8>
   1633e:	8a ef       	ldi	r24, 0xFA	; 250
   16340:	96 e2       	ldi	r25, 0x26	; 38
   16342:	a0 e0       	ldi	r26, 0x00	; 0
   16344:	ed b7       	in	r30, 0x3d	; 61
   16346:	fe b7       	in	r31, 0x3e	; 62
   16348:	81 83       	std	Z+1, r24	; 0x01
   1634a:	92 83       	std	Z+2, r25	; 0x02
   1634c:	a3 83       	std	Z+3, r26	; 0x03
   1634e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   16352:	d1 de       	rcall	.-606    	; 0x160f6 <SS80_error_return>
   16354:	68 c0       	rjmp	.+208    	; 0x16426 <SS80_locate_and_read+0x2bc>
   16356:	62 01       	movw	r12, r4
   16358:	8c 85       	ldd	r24, Y+12	; 0x0c
   1635a:	9d 85       	ldd	r25, Y+13	; 0x0d
   1635c:	91 60       	ori	r25, 0x01	; 1
   1635e:	9d 87       	std	Y+13, r25	; 0x0d
   16360:	8c 87       	std	Y+12, r24	; 0x0c
   16362:	af cf       	rjmp	.-162    	; 0x162c2 <SS80_locate_and_read+0x158>
   16364:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   16368:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   1636c:	32 82       	std	Z+2, r3	; 0x02
   1636e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16372:	80 ff       	sbrs	r24, 0
   16374:	0a c0       	rjmp	.+20     	; 0x1638a <SS80_locate_and_read+0x220>
   16376:	2d 89       	ldd	r18, Y+21	; 0x15
   16378:	3e 89       	ldd	r19, Y+22	; 0x16
   1637a:	4f 89       	ldd	r20, Y+23	; 0x17
   1637c:	ed b7       	in	r30, 0x3d	; 61
   1637e:	fe b7       	in	r31, 0x3e	; 62
   16380:	21 83       	std	Z+1, r18	; 0x01
   16382:	32 83       	std	Z+2, r19	; 0x02
   16384:	43 83       	std	Z+3, r20	; 0x03
   16386:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1638a:	8c 85       	ldd	r24, Y+12	; 0x0c
   1638c:	9d 85       	ldd	r25, Y+13	; 0x0d
   1638e:	88 27       	eor	r24, r24
   16390:	90 7d       	andi	r25, 0xD0	; 208
   16392:	89 2b       	or	r24, r25
   16394:	09 f4       	brne	.+2      	; 0x16398 <SS80_locate_and_read+0x22e>
   16396:	64 cf       	rjmp	.-312    	; 0x16260 <SS80_locate_and_read+0xf6>
   16398:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   1639c:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   163a0:	83 81       	ldd	r24, Z+3	; 0x03
   163a2:	94 81       	ldd	r25, Z+4	; 0x04
   163a4:	80 62       	ori	r24, 0x20	; 32
   163a6:	94 83       	std	Z+4, r25	; 0x04
   163a8:	83 83       	std	Z+3, r24	; 0x03
   163aa:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   163ae:	80 ff       	sbrs	r24, 0
   163b0:	21 c0       	rjmp	.+66     	; 0x163f4 <SS80_locate_and_read+0x28a>
   163b2:	8c eb       	ldi	r24, 0xBC	; 188
   163b4:	96 e2       	ldi	r25, 0x26	; 38
   163b6:	a0 e0       	ldi	r26, 0x00	; 0
   163b8:	ed b7       	in	r30, 0x3d	; 61
   163ba:	fe b7       	in	r31, 0x3e	; 62
   163bc:	81 83       	std	Z+1, r24	; 0x01
   163be:	92 83       	std	Z+2, r25	; 0x02
   163c0:	a3 83       	std	Z+3, r26	; 0x03
   163c2:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   163c6:	16 c0       	rjmp	.+44     	; 0x163f4 <SS80_locate_and_read+0x28a>
   163c8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   163cc:	85 ff       	sbrs	r24, 5
   163ce:	12 c0       	rjmp	.+36     	; 0x163f4 <SS80_locate_and_read+0x28a>
   163d0:	8e 85       	ldd	r24, Y+14	; 0x0e
   163d2:	9f 85       	ldd	r25, Y+15	; 0x0f
   163d4:	a8 89       	ldd	r26, Y+16	; 0x10
   163d6:	b9 89       	ldd	r27, Y+17	; 0x11
   163d8:	ed b7       	in	r30, 0x3d	; 61
   163da:	fe b7       	in	r31, 0x3e	; 62
   163dc:	84 83       	std	Z+4, r24	; 0x04
   163de:	95 83       	std	Z+5, r25	; 0x05
   163e0:	a6 83       	std	Z+6, r26	; 0x06
   163e2:	b7 83       	std	Z+7, r27	; 0x07
   163e4:	84 e9       	ldi	r24, 0x94	; 148
   163e6:	96 e2       	ldi	r25, 0x26	; 38
   163e8:	a0 e0       	ldi	r26, 0x00	; 0
   163ea:	81 83       	std	Z+1, r24	; 0x01
   163ec:	92 83       	std	Z+2, r25	; 0x02
   163ee:	a3 83       	std	Z+3, r26	; 0x03
   163f0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   163f4:	00 91 05 19 	lds	r16, 0x1905	; 0x801905 <SS80s>
   163f8:	10 91 06 19 	lds	r17, 0x1906	; 0x801906 <SS80s+0x1>
   163fc:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   16400:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   16404:	20 89       	ldd	r18, Z+16	; 0x10
   16406:	31 89       	ldd	r19, Z+17	; 0x11
   16408:	40 e0       	ldi	r20, 0x00	; 0
   1640a:	50 e0       	ldi	r21, 0x00	; 0
   1640c:	c5 01       	movw	r24, r10
   1640e:	b4 01       	movw	r22, r8
   16410:	0e 94 04 e4 	call	0x1c808	; 0x1c808 <__udivmodsi4>
   16414:	f8 01       	movw	r30, r16
   16416:	27 83       	std	Z+7, r18	; 0x07
   16418:	30 87       	std	Z+8, r19	; 0x08
   1641a:	41 87       	std	Z+9, r20	; 0x09
   1641c:	52 87       	std	Z+10, r21	; 0x0a
   1641e:	8c 85       	ldd	r24, Y+12	; 0x0c
   16420:	9d 85       	ldd	r25, Y+13	; 0x0d
   16422:	88 27       	eor	r24, r24
   16424:	90 7d       	andi	r25, 0xD0	; 208
   16426:	67 96       	adiw	r28, 0x17	; 23
   16428:	e1 e1       	ldi	r30, 0x11	; 17
   1642a:	0c 94 a3 e4 	jmp	0x1c946	; 0x1c946 <__epilogue_restores__+0x2>

0001642e <SS80_Execute_State>:
   1642e:	cf 93       	push	r28
   16430:	df 93       	push	r29
   16432:	00 d0       	rcall	.+0      	; 0x16434 <SS80_Execute_State+0x6>
   16434:	00 d0       	rcall	.+0      	; 0x16436 <SS80_Execute_State+0x8>
   16436:	1f 92       	push	r1
   16438:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   1643c:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   16440:	81 81       	ldd	r24, Z+1	; 0x01
   16442:	90 e0       	ldi	r25, 0x00	; 0
   16444:	0e 94 44 87 	call	0x10e88	; 0x10e88 <gpib_disable_PPR>
   16448:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   1644c:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   16450:	80 81       	ld	r24, Z
   16452:	91 81       	ldd	r25, Z+1	; 0x01
   16454:	82 30       	cpi	r24, 0x02	; 2
   16456:	91 05       	cpc	r25, r1
   16458:	89 f0       	breq	.+34     	; 0x1647c <SS80_Execute_State+0x4e>
   1645a:	3c f4       	brge	.+14     	; 0x1646a <SS80_Execute_State+0x3c>
   1645c:	00 97       	sbiw	r24, 0x00	; 0
   1645e:	81 f1       	breq	.+96     	; 0x164c0 <SS80_Execute_State+0x92>
   16460:	81 30       	cpi	r24, 0x01	; 1
   16462:	91 05       	cpc	r25, r1
   16464:	b9 f4       	brne	.+46     	; 0x16494 <SS80_Execute_State+0x66>
   16466:	81 de       	rcall	.-766    	; 0x1616a <SS80_locate_and_read>
   16468:	0d c0       	rjmp	.+26     	; 0x16484 <SS80_Execute_State+0x56>
   1646a:	83 30       	cpi	r24, 0x03	; 3
   1646c:	91 05       	cpc	r25, r1
   1646e:	41 f0       	breq	.+16     	; 0x16480 <SS80_Execute_State+0x52>
   16470:	84 30       	cpi	r24, 0x04	; 4
   16472:	91 05       	cpc	r25, r1
   16474:	79 f4       	brne	.+30     	; 0x16494 <SS80_Execute_State+0x66>
   16476:	0e 94 ef a8 	call	0x151de	; 0x151de <SS80_describe>
   1647a:	04 c0       	rjmp	.+8      	; 0x16484 <SS80_Execute_State+0x56>
   1647c:	59 da       	rcall	.-2894   	; 0x15930 <SS80_locate_and_write>
   1647e:	02 c0       	rjmp	.+4      	; 0x16484 <SS80_Execute_State+0x56>
   16480:	0e 94 6e a8 	call	0x150dc	; 0x150dc <SS80_send_status>
   16484:	ec 01       	movw	r28, r24
   16486:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   1648a:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   1648e:	11 82       	std	Z+1, r1	; 0x01
   16490:	10 82       	st	Z, r1
   16492:	18 c0       	rjmp	.+48     	; 0x164c4 <SS80_Execute_State+0x96>
   16494:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   16498:	20 ff       	sbrs	r18, 0
   1649a:	0c c0       	rjmp	.+24     	; 0x164b4 <SS80_Execute_State+0x86>
   1649c:	ed b7       	in	r30, 0x3d	; 61
   1649e:	fe b7       	in	r31, 0x3e	; 62
   164a0:	95 83       	std	Z+5, r25	; 0x05
   164a2:	84 83       	std	Z+4, r24	; 0x04
   164a4:	88 e5       	ldi	r24, 0x58	; 88
   164a6:	97 e2       	ldi	r25, 0x27	; 39
   164a8:	a0 e0       	ldi	r26, 0x00	; 0
   164aa:	81 83       	std	Z+1, r24	; 0x01
   164ac:	92 83       	std	Z+2, r25	; 0x02
   164ae:	a3 83       	std	Z+3, r26	; 0x03
   164b0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   164b4:	e0 91 05 19 	lds	r30, 0x1905	; 0x801905 <SS80s>
   164b8:	f0 91 06 19 	lds	r31, 0x1906	; 0x801906 <SS80s+0x1>
   164bc:	11 82       	std	Z+1, r1	; 0x01
   164be:	10 82       	st	Z, r1
   164c0:	c0 e0       	ldi	r28, 0x00	; 0
   164c2:	d0 e0       	ldi	r29, 0x00	; 0
   164c4:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   164c8:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   164cc:	81 81       	ldd	r24, Z+1	; 0x01
   164ce:	90 e0       	ldi	r25, 0x00	; 0
   164d0:	0e 94 0e 87 	call	0x10e1c	; 0x10e1c <gpib_enable_PPR>
   164d4:	ce 01       	movw	r24, r28
   164d6:	cd b7       	in	r28, 0x3d	; 61
   164d8:	de b7       	in	r29, 0x3e	; 62
   164da:	25 96       	adiw	r28, 0x05	; 5
   164dc:	e2 e0       	ldi	r30, 0x02	; 2
   164de:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

000164e2 <SS80_COMMANDS>:
   164e2:	a9 e0       	ldi	r26, 0x09	; 9
   164e4:	b0 e0       	ldi	r27, 0x00	; 0
   164e6:	e7 e7       	ldi	r30, 0x77	; 119
   164e8:	f2 eb       	ldi	r31, 0xB2	; 178
   164ea:	0c 94 95 e4 	jmp	0x1c92a	; 0x1c92a <__prologue_saves__+0x1e>
   164ee:	18 2f       	mov	r17, r24
   164f0:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   164f4:	90 e0       	ldi	r25, 0x00	; 0
   164f6:	0e 94 39 8d 	call	0x11a72	; 0x11a72 <SS80_is_MTA>
   164fa:	89 2b       	or	r24, r25
   164fc:	19 f0       	breq	.+6      	; 0x16504 <SS80_COMMANDS+0x22>
   164fe:	15 36       	cpi	r17, 0x65	; 101
   16500:	19 f5       	brne	.+70     	; 0x16548 <SS80_COMMANDS+0x66>
   16502:	09 c0       	rjmp	.+18     	; 0x16516 <SS80_COMMANDS+0x34>
   16504:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   16508:	90 e0       	ldi	r25, 0x00	; 0
   1650a:	0e 94 2a 8d 	call	0x11a54	; 0x11a54 <SS80_is_MLA>
   1650e:	ec 01       	movw	r28, r24
   16510:	89 2b       	or	r24, r25
   16512:	a9 f7       	brne	.-22     	; 0x164fe <SS80_COMMANDS+0x1c>
   16514:	ad c0       	rjmp	.+346    	; 0x16670 <SS80_COMMANDS+0x18e>
   16516:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   1651a:	90 e0       	ldi	r25, 0x00	; 0
   1651c:	0e 94 2a 8d 	call	0x11a54	; 0x11a54 <SS80_is_MLA>
   16520:	89 2b       	or	r24, r25
   16522:	09 f4       	brne	.+2      	; 0x16526 <SS80_COMMANDS+0x44>
   16524:	a2 c0       	rjmp	.+324    	; 0x1666a <SS80_COMMANDS+0x188>
   16526:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1652a:	85 ff       	sbrs	r24, 5
   1652c:	0a c0       	rjmp	.+20     	; 0x16542 <SS80_COMMANDS+0x60>
   1652e:	82 e4       	ldi	r24, 0x42	; 66
   16530:	90 e2       	ldi	r25, 0x20	; 32
   16532:	a0 e0       	ldi	r26, 0x00	; 0
   16534:	ed b7       	in	r30, 0x3d	; 61
   16536:	fe b7       	in	r31, 0x3e	; 62
   16538:	81 83       	std	Z+1, r24	; 0x01
   1653a:	92 83       	std	Z+2, r25	; 0x02
   1653c:	a3 83       	std	Z+3, r26	; 0x03
   1653e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   16542:	0e 94 af a9 	call	0x1535e	; 0x1535e <SS80_Command_State>
   16546:	73 c0       	rjmp	.+230    	; 0x1662e <SS80_COMMANDS+0x14c>
   16548:	1e 36       	cpi	r17, 0x6E	; 110
   1654a:	01 f5       	brne	.+64     	; 0x1658c <SS80_COMMANDS+0xaa>
   1654c:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   16550:	90 e0       	ldi	r25, 0x00	; 0
   16552:	0e 94 2a 8d 	call	0x11a54	; 0x11a54 <SS80_is_MLA>
   16556:	89 2b       	or	r24, r25
   16558:	79 f0       	breq	.+30     	; 0x16578 <SS80_COMMANDS+0x96>
   1655a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1655e:	85 ff       	sbrs	r24, 5
   16560:	13 c0       	rjmp	.+38     	; 0x16588 <SS80_COMMANDS+0xa6>
   16562:	8c e2       	ldi	r24, 0x2C	; 44
   16564:	90 e2       	ldi	r25, 0x20	; 32
   16566:	a0 e0       	ldi	r26, 0x00	; 0
   16568:	ed b7       	in	r30, 0x3d	; 61
   1656a:	fe b7       	in	r31, 0x3e	; 62
   1656c:	81 83       	std	Z+1, r24	; 0x01
   1656e:	92 83       	std	Z+2, r25	; 0x02
   16570:	a3 83       	std	Z+3, r26	; 0x03
   16572:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   16576:	08 c0       	rjmp	.+16     	; 0x16588 <SS80_COMMANDS+0xa6>
   16578:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   1657c:	90 e0       	ldi	r25, 0x00	; 0
   1657e:	0e 94 39 8d 	call	0x11a72	; 0x11a72 <SS80_is_MTA>
   16582:	89 2b       	or	r24, r25
   16584:	51 f7       	brne	.-44     	; 0x1655a <SS80_COMMANDS+0x78>
   16586:	71 c0       	rjmp	.+226    	; 0x1666a <SS80_COMMANDS+0x188>
   16588:	52 df       	rcall	.-348    	; 0x1642e <SS80_Execute_State>
   1658a:	51 c0       	rjmp	.+162    	; 0x1662e <SS80_COMMANDS+0x14c>
   1658c:	10 37       	cpi	r17, 0x70	; 112
   1658e:	b9 f5       	brne	.+110    	; 0x165fe <SS80_COMMANDS+0x11c>
   16590:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   16594:	90 e0       	ldi	r25, 0x00	; 0
   16596:	0e 94 39 8d 	call	0x11a72	; 0x11a72 <SS80_is_MTA>
   1659a:	89 2b       	or	r24, r25
   1659c:	81 f0       	breq	.+32     	; 0x165be <SS80_COMMANDS+0xdc>
   1659e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   165a2:	85 ff       	sbrs	r24, 5
   165a4:	0a c0       	rjmp	.+20     	; 0x165ba <SS80_COMMANDS+0xd8>
   165a6:	87 e1       	ldi	r24, 0x17	; 23
   165a8:	90 e2       	ldi	r25, 0x20	; 32
   165aa:	a0 e0       	ldi	r26, 0x00	; 0
   165ac:	ed b7       	in	r30, 0x3d	; 61
   165ae:	fe b7       	in	r31, 0x3e	; 62
   165b0:	81 83       	std	Z+1, r24	; 0x01
   165b2:	92 83       	std	Z+2, r25	; 0x02
   165b4:	a3 83       	std	Z+3, r26	; 0x03
   165b6:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   165ba:	4c db       	rcall	.-2408   	; 0x15c54 <SS80_Report>
   165bc:	38 c0       	rjmp	.+112    	; 0x1662e <SS80_COMMANDS+0x14c>
   165be:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   165c2:	90 e0       	ldi	r25, 0x00	; 0
   165c4:	0e 94 2a 8d 	call	0x11a54	; 0x11a54 <SS80_is_MLA>
   165c8:	89 2b       	or	r24, r25
   165ca:	09 f4       	brne	.+2      	; 0x165ce <SS80_COMMANDS+0xec>
   165cc:	4e c0       	rjmp	.+156    	; 0x1666a <SS80_COMMANDS+0x188>
   165ce:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   165d2:	85 ff       	sbrs	r24, 5
   165d4:	0a c0       	rjmp	.+20     	; 0x165ea <SS80_COMMANDS+0x108>
   165d6:	88 e0       	ldi	r24, 0x08	; 8
   165d8:	90 e2       	ldi	r25, 0x20	; 32
   165da:	a0 e0       	ldi	r26, 0x00	; 0
   165dc:	ed b7       	in	r30, 0x3d	; 61
   165de:	fe b7       	in	r31, 0x3e	; 62
   165e0:	81 83       	std	Z+1, r24	; 0x01
   165e2:	92 83       	std	Z+2, r25	; 0x02
   165e4:	a3 83       	std	Z+3, r26	; 0x03
   165e6:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   165ea:	e0 91 07 19 	lds	r30, 0x1907	; 0x801907 <SS80p>
   165ee:	f0 91 08 19 	lds	r31, 0x1908	; 0x801908 <SS80p+0x1>
   165f2:	81 81       	ldd	r24, Z+1	; 0x01
   165f4:	90 e0       	ldi	r25, 0x00	; 0
   165f6:	0e 94 44 87 	call	0x10e88	; 0x10e88 <gpib_disable_PPR>
   165fa:	1d dc       	rcall	.-1990   	; 0x15e36 <SS80_Amigo_Clear>
   165fc:	18 c0       	rjmp	.+48     	; 0x1662e <SS80_COMMANDS+0x14c>
   165fe:	12 37       	cpi	r17, 0x72	; 114
   16600:	c1 f4       	brne	.+48     	; 0x16632 <SS80_COMMANDS+0x150>
   16602:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   16606:	90 e0       	ldi	r25, 0x00	; 0
   16608:	0e 94 2a 8d 	call	0x11a54	; 0x11a54 <SS80_is_MLA>
   1660c:	89 2b       	or	r24, r25
   1660e:	89 f0       	breq	.+34     	; 0x16632 <SS80_COMMANDS+0x150>
   16610:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16614:	85 ff       	sbrs	r24, 5
   16616:	0a c0       	rjmp	.+20     	; 0x1662c <SS80_COMMANDS+0x14a>
   16618:	84 ef       	ldi	r24, 0xF4	; 244
   1661a:	9f e1       	ldi	r25, 0x1F	; 31
   1661c:	a0 e0       	ldi	r26, 0x00	; 0
   1661e:	ed b7       	in	r30, 0x3d	; 61
   16620:	fe b7       	in	r31, 0x3e	; 62
   16622:	81 83       	std	Z+1, r24	; 0x01
   16624:	92 83       	std	Z+2, r25	; 0x02
   16626:	a3 83       	std	Z+3, r26	; 0x03
   16628:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1662c:	58 dc       	rcall	.-1872   	; 0x15ede <SS80_Transparent_State>
   1662e:	ec 01       	movw	r28, r24
   16630:	3b c0       	rjmp	.+118    	; 0x166a8 <SS80_COMMANDS+0x1c6>
   16632:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16636:	80 ff       	sbrs	r24, 0
   16638:	18 c0       	rjmp	.+48     	; 0x1666a <SS80_COMMANDS+0x188>
   1663a:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   1663e:	90 e0       	ldi	r25, 0x00	; 0
   16640:	ed b7       	in	r30, 0x3d	; 61
   16642:	fe b7       	in	r31, 0x3e	; 62
   16644:	91 87       	std	Z+9, r25	; 0x09
   16646:	80 87       	std	Z+8, r24	; 0x08
   16648:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   1664c:	90 e0       	ldi	r25, 0x00	; 0
   1664e:	97 83       	std	Z+7, r25	; 0x07
   16650:	86 83       	std	Z+6, r24	; 0x06
   16652:	81 2f       	mov	r24, r17
   16654:	90 e0       	ldi	r25, 0x00	; 0
   16656:	95 83       	std	Z+5, r25	; 0x05
   16658:	84 83       	std	Z+4, r24	; 0x04
   1665a:	80 ec       	ldi	r24, 0xC0	; 192
   1665c:	9f e1       	ldi	r25, 0x1F	; 31
   1665e:	a0 e0       	ldi	r26, 0x00	; 0
   16660:	81 83       	std	Z+1, r24	; 0x01
   16662:	92 83       	std	Z+2, r25	; 0x02
   16664:	a3 83       	std	Z+3, r26	; 0x03
   16666:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1666a:	c0 e0       	ldi	r28, 0x00	; 0
   1666c:	d0 e0       	ldi	r29, 0x00	; 0
   1666e:	1c c0       	rjmp	.+56     	; 0x166a8 <SS80_COMMANDS+0x1c6>
   16670:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16674:	80 ff       	sbrs	r24, 0
   16676:	f9 cf       	rjmp	.-14     	; 0x1666a <SS80_COMMANDS+0x188>
   16678:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   1667c:	90 e0       	ldi	r25, 0x00	; 0
   1667e:	ed b7       	in	r30, 0x3d	; 61
   16680:	fe b7       	in	r31, 0x3e	; 62
   16682:	91 87       	std	Z+9, r25	; 0x09
   16684:	80 87       	std	Z+8, r24	; 0x08
   16686:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   1668a:	90 e0       	ldi	r25, 0x00	; 0
   1668c:	97 83       	std	Z+7, r25	; 0x07
   1668e:	86 83       	std	Z+6, r24	; 0x06
   16690:	81 2f       	mov	r24, r17
   16692:	90 e0       	ldi	r25, 0x00	; 0
   16694:	95 83       	std	Z+5, r25	; 0x05
   16696:	84 83       	std	Z+4, r24	; 0x04
   16698:	8c e8       	ldi	r24, 0x8C	; 140
   1669a:	9f e1       	ldi	r25, 0x1F	; 31
   1669c:	a0 e0       	ldi	r26, 0x00	; 0
   1669e:	81 83       	std	Z+1, r24	; 0x01
   166a0:	92 83       	std	Z+2, r25	; 0x02
   166a2:	a3 83       	std	Z+3, r26	; 0x03
   166a4:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   166a8:	ce 01       	movw	r24, r28
   166aa:	cd b7       	in	r28, 0x3d	; 61
   166ac:	de b7       	in	r29, 0x3e	; 62
   166ae:	29 96       	adiw	r28, 0x09	; 9
   166b0:	e3 e0       	ldi	r30, 0x03	; 3
   166b2:	0c 94 b1 e4 	jmp	0x1c962	; 0x1c962 <__epilogue_restores__+0x1e>

000166b6 <amigo_overflow_check>:
   166b6:	cf 92       	push	r12
   166b8:	df 92       	push	r13
   166ba:	ef 92       	push	r14
   166bc:	0f 93       	push	r16
   166be:	1f 93       	push	r17
   166c0:	cf 93       	push	r28
   166c2:	df 93       	push	r29
   166c4:	00 d0       	rcall	.+0      	; 0x166c6 <amigo_overflow_check+0x10>
   166c6:	00 d0       	rcall	.+0      	; 0x166c8 <amigo_overflow_check+0x12>
   166c8:	1f 92       	push	r1
   166ca:	ec 01       	movw	r28, r24
   166cc:	8b 01       	movw	r16, r22
   166ce:	80 e0       	ldi	r24, 0x00	; 0
   166d0:	90 e0       	ldi	r25, 0x00	; 0
   166d2:	2e ef       	ldi	r18, 0xFE	; 254
   166d4:	3e e2       	ldi	r19, 0x2E	; 46
   166d6:	69 01       	movw	r12, r18
   166d8:	e1 2c       	mov	r14, r1
   166da:	2d 81       	ldd	r18, Y+5	; 0x05
   166dc:	30 e0       	ldi	r19, 0x00	; 0
   166de:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   166e2:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   166e6:	40 85       	ldd	r20, Z+8	; 0x08
   166e8:	51 85       	ldd	r21, Z+9	; 0x09
   166ea:	24 17       	cp	r18, r20
   166ec:	35 07       	cpc	r19, r21
   166ee:	64 f1       	brlt	.+88     	; 0x16748 <amigo_overflow_check+0x92>
   166f0:	1d 82       	std	Y+5, r1	; 0x05
   166f2:	2c 81       	ldd	r18, Y+4	; 0x04
   166f4:	2f 5f       	subi	r18, 0xFF	; 255
   166f6:	2c 83       	std	Y+4, r18	; 0x04
   166f8:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   166fc:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16700:	2c 81       	ldd	r18, Y+4	; 0x04
   16702:	30 e0       	ldi	r19, 0x00	; 0
   16704:	42 85       	ldd	r20, Z+10	; 0x0a
   16706:	53 85       	ldd	r21, Z+11	; 0x0b
   16708:	24 17       	cp	r18, r20
   1670a:	35 07       	cpc	r19, r21
   1670c:	34 f3       	brlt	.-52     	; 0x166da <amigo_overflow_check+0x24>
   1670e:	1c 82       	std	Y+4, r1	; 0x04
   16710:	2b 81       	ldd	r18, Y+3	; 0x03
   16712:	2f 5f       	subi	r18, 0xFF	; 255
   16714:	2b 83       	std	Y+3, r18	; 0x03
   16716:	30 e0       	ldi	r19, 0x00	; 0
   16718:	44 85       	ldd	r20, Z+12	; 0x0c
   1671a:	55 85       	ldd	r21, Z+13	; 0x0d
   1671c:	24 17       	cp	r18, r20
   1671e:	35 07       	cpc	r19, r21
   16720:	5c f3       	brlt	.-42     	; 0x166f8 <amigo_overflow_check+0x42>
   16722:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16726:	80 ff       	sbrs	r24, 0
   16728:	0c c0       	rjmp	.+24     	; 0x16742 <amigo_overflow_check+0x8c>
   1672a:	01 15       	cp	r16, r1
   1672c:	11 05       	cpc	r17, r1
   1672e:	49 f0       	breq	.+18     	; 0x16742 <amigo_overflow_check+0x8c>
   16730:	ed b7       	in	r30, 0x3d	; 61
   16732:	fe b7       	in	r31, 0x3e	; 62
   16734:	15 83       	std	Z+5, r17	; 0x05
   16736:	04 83       	std	Z+4, r16	; 0x04
   16738:	c1 82       	std	Z+1, r12	; 0x01
   1673a:	d2 82       	std	Z+2, r13	; 0x02
   1673c:	e3 82       	std	Z+3, r14	; 0x03
   1673e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   16742:	81 e0       	ldi	r24, 0x01	; 1
   16744:	90 e0       	ldi	r25, 0x00	; 0
   16746:	d8 cf       	rjmp	.-80     	; 0x166f8 <amigo_overflow_check+0x42>
   16748:	0f 90       	pop	r0
   1674a:	0f 90       	pop	r0
   1674c:	0f 90       	pop	r0
   1674e:	0f 90       	pop	r0
   16750:	0f 90       	pop	r0
   16752:	df 91       	pop	r29
   16754:	cf 91       	pop	r28
   16756:	1f 91       	pop	r17
   16758:	0f 91       	pop	r16
   1675a:	ef 90       	pop	r14
   1675c:	df 90       	pop	r13
   1675e:	cf 90       	pop	r12
   16760:	08 95       	ret

00016762 <amigo_chs_to_logical>:
   16762:	a1 e1       	ldi	r26, 0x11	; 17
   16764:	b0 e0       	ldi	r27, 0x00	; 0
   16766:	e7 eb       	ldi	r30, 0xB7	; 183
   16768:	f3 eb       	ldi	r31, 0xB3	; 179
   1676a:	0c 94 8a e4 	jmp	0x1c914	; 0x1c914 <__prologue_saves__+0x8>
   1676e:	8b 01       	movw	r16, r22
   16770:	60 91 03 19 	lds	r22, 0x1903	; 0x801903 <AMIGOp>
   16774:	70 91 04 19 	lds	r23, 0x1904	; 0x801904 <AMIGOp+0x1>
   16778:	fb 01       	movw	r30, r22
   1677a:	40 85       	ldd	r20, Z+8	; 0x08
   1677c:	51 85       	ldd	r21, Z+9	; 0x09
   1677e:	fc 01       	movw	r30, r24
   16780:	c4 81       	ldd	r28, Z+4	; 0x04
   16782:	d0 e0       	ldi	r29, 0x00	; 0
   16784:	4c 9f       	mul	r20, r28
   16786:	90 01       	movw	r18, r0
   16788:	4d 9f       	mul	r20, r29
   1678a:	30 0d       	add	r19, r0
   1678c:	5c 9f       	mul	r21, r28
   1678e:	30 0d       	add	r19, r0
   16790:	11 24       	eor	r1, r1
   16792:	49 01       	movw	r8, r18
   16794:	33 0f       	add	r19, r19
   16796:	aa 08       	sbc	r10, r10
   16798:	bb 08       	sbc	r11, r11
   1679a:	63 80       	ldd	r6, Z+3	; 0x03
   1679c:	71 2c       	mov	r7, r1
   1679e:	fb 01       	movw	r30, r22
   167a0:	e2 84       	ldd	r14, Z+10	; 0x0a
   167a2:	f3 84       	ldd	r15, Z+11	; 0x0b
   167a4:	4e 9d       	mul	r20, r14
   167a6:	d0 01       	movw	r26, r0
   167a8:	4f 9d       	mul	r20, r15
   167aa:	b0 0d       	add	r27, r0
   167ac:	5e 9d       	mul	r21, r14
   167ae:	b0 0d       	add	r27, r0
   167b0:	11 24       	eor	r1, r1
   167b2:	a6 9d       	mul	r26, r6
   167b4:	90 01       	movw	r18, r0
   167b6:	a7 9d       	mul	r26, r7
   167b8:	30 0d       	add	r19, r0
   167ba:	b6 9d       	mul	r27, r6
   167bc:	30 0d       	add	r19, r0
   167be:	11 24       	eor	r1, r1
   167c0:	69 01       	movw	r12, r18
   167c2:	33 0f       	add	r19, r19
   167c4:	ee 08       	sbc	r14, r14
   167c6:	ff 08       	sbc	r15, r15
   167c8:	8c 0c       	add	r8, r12
   167ca:	9d 1c       	adc	r9, r13
   167cc:	ae 1c       	adc	r10, r14
   167ce:	bf 1c       	adc	r11, r15
   167d0:	fc 01       	movw	r30, r24
   167d2:	f5 80       	ldd	r15, Z+5	; 0x05
   167d4:	a5 01       	movw	r20, r10
   167d6:	94 01       	movw	r18, r8
   167d8:	2f 0d       	add	r18, r15
   167da:	31 1d       	adc	r19, r1
   167dc:	41 1d       	adc	r20, r1
   167de:	51 1d       	adc	r21, r1
   167e0:	fb 01       	movw	r30, r22
   167e2:	a6 81       	ldd	r26, Z+6	; 0x06
   167e4:	b7 81       	ldd	r27, Z+7	; 0x07
   167e6:	0e 94 70 e4 	call	0x1c8e0	; 0x1c8e0 <__mulshisi3>
   167ea:	4b 01       	movw	r8, r22
   167ec:	5c 01       	movw	r10, r24
   167ee:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   167f2:	85 ff       	sbrs	r24, 5
   167f4:	22 c0       	rjmp	.+68     	; 0x1683a <amigo_chs_to_logical+0xd8>
   167f6:	8f 2d       	mov	r24, r15
   167f8:	90 e0       	ldi	r25, 0x00	; 0
   167fa:	ed b7       	in	r30, 0x3d	; 61
   167fc:	fe b7       	in	r31, 0x3e	; 62
   167fe:	91 8b       	std	Z+17, r25	; 0x11
   16800:	80 8b       	std	Z+16, r24	; 0x10
   16802:	d7 87       	std	Z+15, r29	; 0x0f
   16804:	c6 87       	std	Z+14, r28	; 0x0e
   16806:	75 86       	std	Z+13, r7	; 0x0d
   16808:	64 86       	std	Z+12, r6	; 0x0c
   1680a:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   1680e:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16812:	81 81       	ldd	r24, Z+1	; 0x01
   16814:	90 e0       	ldi	r25, 0x00	; 0
   16816:	ed b7       	in	r30, 0x3d	; 61
   16818:	fe b7       	in	r31, 0x3e	; 62
   1681a:	93 87       	std	Z+11, r25	; 0x0b
   1681c:	82 87       	std	Z+10, r24	; 0x0a
   1681e:	86 82       	std	Z+6, r8	; 0x06
   16820:	97 82       	std	Z+7, r9	; 0x07
   16822:	a0 86       	std	Z+8, r10	; 0x08
   16824:	b1 86       	std	Z+9, r11	; 0x09
   16826:	15 83       	std	Z+5, r17	; 0x05
   16828:	04 83       	std	Z+4, r16	; 0x04
   1682a:	8b ea       	ldi	r24, 0xAB	; 171
   1682c:	9e e2       	ldi	r25, 0x2E	; 46
   1682e:	a0 e0       	ldi	r26, 0x00	; 0
   16830:	81 83       	std	Z+1, r24	; 0x01
   16832:	92 83       	std	Z+2, r25	; 0x02
   16834:	a3 83       	std	Z+3, r26	; 0x03
   16836:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1683a:	c5 01       	movw	r24, r10
   1683c:	b4 01       	movw	r22, r8
   1683e:	cd b7       	in	r28, 0x3d	; 61
   16840:	de b7       	in	r29, 0x3e	; 62
   16842:	61 96       	adiw	r28, 0x11	; 17
   16844:	ee e0       	ldi	r30, 0x0E	; 14
   16846:	0c 94 a6 e4 	jmp	0x1c94c	; 0x1c94c <__epilogue_restores__+0x8>

0001684a <amigo_init>:
   1684a:	ef 92       	push	r14
   1684c:	ff 92       	push	r15
   1684e:	0f 93       	push	r16
   16850:	1f 93       	push	r17
   16852:	cf 93       	push	r28
   16854:	df 93       	push	r29
   16856:	05 e6       	ldi	r16, 0x65	; 101
   16858:	10 e2       	ldi	r17, 0x20	; 32
   1685a:	cb e0       	ldi	r28, 0x0B	; 11
   1685c:	d0 e0       	ldi	r29, 0x00	; 0
   1685e:	84 e0       	ldi	r24, 0x04	; 4
   16860:	f8 2e       	mov	r15, r24
   16862:	92 e0       	ldi	r25, 0x02	; 2
   16864:	e9 2e       	mov	r14, r25
   16866:	d8 01       	movw	r26, r16
   16868:	8c 91       	ld	r24, X
   1686a:	81 30       	cpi	r24, 0x01	; 1
   1686c:	31 f5       	brne	.+76     	; 0x168ba <amigo_init+0x70>
   1686e:	ce 01       	movw	r24, r28
   16870:	0e 94 28 94 	call	0x12850	; 0x12850 <set_active_device>
   16874:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16878:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   1687c:	10 82       	st	Z, r1
   1687e:	9f 01       	movw	r18, r30
   16880:	27 5f       	subi	r18, 0xF7	; 247
   16882:	3f 4f       	sbci	r19, 0xFF	; 255
   16884:	d9 01       	movw	r26, r18
   16886:	8f 2d       	mov	r24, r15
   16888:	1d 92       	st	X+, r1
   1688a:	8a 95       	dec	r24
   1688c:	e9 f7       	brne	.-6      	; 0x16888 <amigo_init+0x3e>
   1688e:	2c 5f       	subi	r18, 0xFC	; 252
   16890:	3f 4f       	sbci	r19, 0xFF	; 255
   16892:	d9 01       	movw	r26, r18
   16894:	8f 2d       	mov	r24, r15
   16896:	1d 92       	st	X+, r1
   16898:	8a 95       	dec	r24
   1689a:	e9 f7       	brne	.-6      	; 0x16896 <amigo_init+0x4c>
   1689c:	11 82       	std	Z+1, r1	; 0x01
   1689e:	15 82       	std	Z+5, r1	; 0x05
   168a0:	14 82       	std	Z+4, r1	; 0x04
   168a2:	13 82       	std	Z+3, r1	; 0x03
   168a4:	e6 82       	std	Z+6, r14	; 0x06
   168a6:	10 86       	std	Z+8, r1	; 0x08
   168a8:	17 82       	std	Z+7, r1	; 0x07
   168aa:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   168ae:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   168b2:	81 81       	ldd	r24, Z+1	; 0x01
   168b4:	90 e0       	ldi	r25, 0x00	; 0
   168b6:	0e 94 44 87 	call	0x10e88	; 0x10e88 <gpib_disable_PPR>
   168ba:	21 97       	sbiw	r28, 0x01	; 1
   168bc:	0b 52       	subi	r16, 0x2B	; 43
   168be:	11 09       	sbc	r17, r1
   168c0:	cf 3f       	cpi	r28, 0xFF	; 255
   168c2:	af ef       	ldi	r26, 0xFF	; 255
   168c4:	da 07       	cpc	r29, r26
   168c6:	79 f6       	brne	.-98     	; 0x16866 <amigo_init+0x1c>
   168c8:	cd b7       	in	r28, 0x3d	; 61
   168ca:	de b7       	in	r29, 0x3e	; 62
   168cc:	e6 e0       	ldi	r30, 0x06	; 6
   168ce:	0c 94 ae e4 	jmp	0x1c95c	; 0x1c95c <__epilogue_restores__+0x18>

000168d2 <amigo_request_logical_address>:
   168d2:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   168d6:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   168da:	15 86       	std	Z+13, r1	; 0x0d
   168dc:	83 81       	ldd	r24, Z+3	; 0x03
   168de:	86 87       	std	Z+14, r24	; 0x0e
   168e0:	84 81       	ldd	r24, Z+4	; 0x04
   168e2:	87 87       	std	Z+15, r24	; 0x0f
   168e4:	85 81       	ldd	r24, Z+5	; 0x05
   168e6:	80 8b       	std	Z+16, r24	; 0x10
   168e8:	80 e0       	ldi	r24, 0x00	; 0
   168ea:	90 e0       	ldi	r25, 0x00	; 0
   168ec:	08 95       	ret

000168ee <amigo_request_status>:
   168ee:	00 d0       	rcall	.+0      	; 0x168f0 <amigo_request_status+0x2>
   168f0:	1f 92       	push	r1
   168f2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   168f6:	85 ff       	sbrs	r24, 5
   168f8:	0a c0       	rjmp	.+20     	; 0x1690e <amigo_request_status+0x20>
   168fa:	8e e7       	ldi	r24, 0x7E	; 126
   168fc:	9f e2       	ldi	r25, 0x2F	; 47
   168fe:	a0 e0       	ldi	r26, 0x00	; 0
   16900:	ed b7       	in	r30, 0x3d	; 61
   16902:	fe b7       	in	r31, 0x3e	; 62
   16904:	81 83       	std	Z+1, r24	; 0x01
   16906:	92 83       	std	Z+2, r25	; 0x02
   16908:	a3 83       	std	Z+3, r26	; 0x03
   1690a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1690e:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16912:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16916:	11 86       	std	Z+9, r1	; 0x09
   16918:	81 81       	ldd	r24, Z+1	; 0x01
   1691a:	82 87       	std	Z+10, r24	; 0x0a
   1691c:	8d e0       	ldi	r24, 0x0D	; 13
   1691e:	83 87       	std	Z+11, r24	; 0x0b
   16920:	14 86       	std	Z+12, r1	; 0x0c
   16922:	0e 94 fe 70 	call	0xe1fc	; 0xe1fc <mmc_wp_status>
   16926:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   1692a:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   1692e:	89 2b       	or	r24, r25
   16930:	19 f0       	breq	.+6      	; 0x16938 <amigo_request_status+0x4a>
   16932:	84 85       	ldd	r24, Z+12	; 0x0c
   16934:	80 66       	ori	r24, 0x60	; 96
   16936:	84 87       	std	Z+12, r24	; 0x0c
   16938:	86 81       	ldd	r24, Z+6	; 0x06
   1693a:	82 30       	cpi	r24, 0x02	; 2
   1693c:	31 f4       	brne	.+12     	; 0x1694a <amigo_request_status+0x5c>
   1693e:	83 e1       	ldi	r24, 0x13	; 19
   16940:	81 87       	std	Z+9, r24	; 0x09
   16942:	84 85       	ldd	r24, Z+12	; 0x0c
   16944:	88 60       	ori	r24, 0x08	; 8
   16946:	84 87       	std	Z+12, r24	; 0x0c
   16948:	21 c0       	rjmp	.+66     	; 0x1698c <amigo_request_status+0x9e>
   1694a:	27 81       	ldd	r18, Z+7	; 0x07
   1694c:	30 85       	ldd	r19, Z+8	; 0x08
   1694e:	21 15       	cp	r18, r1
   16950:	31 05       	cpc	r19, r1
   16952:	11 f4       	brne	.+4      	; 0x16958 <amigo_request_status+0x6a>
   16954:	81 30       	cpi	r24, 0x01	; 1
   16956:	d1 f4       	brne	.+52     	; 0x1698c <amigo_request_status+0x9e>
   16958:	26 fd       	sbrc	r18, 6
   1695a:	0c c0       	rjmp	.+24     	; 0x16974 <amigo_request_status+0x86>
   1695c:	25 ff       	sbrs	r18, 5
   1695e:	03 c0       	rjmp	.+6      	; 0x16966 <amigo_request_status+0x78>
   16960:	8a e0       	ldi	r24, 0x0A	; 10
   16962:	81 87       	std	Z+9, r24	; 0x09
   16964:	0d c0       	rjmp	.+26     	; 0x16980 <amigo_request_status+0x92>
   16966:	84 85       	ldd	r24, Z+12	; 0x0c
   16968:	24 ff       	sbrs	r18, 4
   1696a:	02 c0       	rjmp	.+4      	; 0x16970 <amigo_request_status+0x82>
   1696c:	83 60       	ori	r24, 0x03	; 3
   1696e:	07 c0       	rjmp	.+14     	; 0x1697e <amigo_request_status+0x90>
   16970:	21 ff       	sbrs	r18, 1
   16972:	02 c0       	rjmp	.+4      	; 0x16978 <amigo_request_status+0x8a>
   16974:	83 e1       	ldi	r24, 0x13	; 19
   16976:	f5 cf       	rjmp	.-22     	; 0x16962 <amigo_request_status+0x74>
   16978:	22 ff       	sbrs	r18, 2
   1697a:	02 c0       	rjmp	.+4      	; 0x16980 <amigo_request_status+0x92>
   1697c:	84 60       	ori	r24, 0x04	; 4
   1697e:	84 87       	std	Z+12, r24	; 0x0c
   16980:	84 85       	ldd	r24, Z+12	; 0x0c
   16982:	80 61       	ori	r24, 0x10	; 16
   16984:	84 87       	std	Z+12, r24	; 0x0c
   16986:	83 85       	ldd	r24, Z+11	; 0x0b
   16988:	80 68       	ori	r24, 0x80	; 128
   1698a:	83 87       	std	Z+11, r24	; 0x0b
   1698c:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16990:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16994:	81 81       	ldd	r24, Z+1	; 0x01
   16996:	90 e0       	ldi	r25, 0x00	; 0
   16998:	0e 94 0e 87 	call	0x10e1c	; 0x10e1c <gpib_enable_PPR>
   1699c:	80 e0       	ldi	r24, 0x00	; 0
   1699e:	90 e0       	ldi	r25, 0x00	; 0
   169a0:	0f 90       	pop	r0
   169a2:	0f 90       	pop	r0
   169a4:	0f 90       	pop	r0
   169a6:	08 95       	ret

000169a8 <amigo_send_logical_address>:
   169a8:	a5 e0       	ldi	r26, 0x05	; 5
   169aa:	b0 e0       	ldi	r27, 0x00	; 0
   169ac:	ea ed       	ldi	r30, 0xDA	; 218
   169ae:	f4 eb       	ldi	r31, 0xB4	; 180
   169b0:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
   169b4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   169b8:	85 ff       	sbrs	r24, 5
   169ba:	0a c0       	rjmp	.+20     	; 0x169d0 <amigo_send_logical_address+0x28>
   169bc:	80 e6       	ldi	r24, 0x60	; 96
   169be:	9f e2       	ldi	r25, 0x2F	; 47
   169c0:	a0 e0       	ldi	r26, 0x00	; 0
   169c2:	ed b7       	in	r30, 0x3d	; 61
   169c4:	fe b7       	in	r31, 0x3e	; 62
   169c6:	81 83       	std	Z+1, r24	; 0x01
   169c8:	92 83       	std	Z+2, r25	; 0x02
   169ca:	a3 83       	std	Z+3, r26	; 0x03
   169cc:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   169d0:	80 e0       	ldi	r24, 0x00	; 0
   169d2:	91 e0       	ldi	r25, 0x01	; 1
   169d4:	9d 83       	std	Y+5, r25	; 0x05
   169d6:	8c 83       	std	Y+4, r24	; 0x04
   169d8:	80 91 01 19 	lds	r24, 0x1901	; 0x801901 <AMIGOs>
   169dc:	90 91 02 19 	lds	r25, 0x1902	; 0x801902 <AMIGOs+0x1>
   169e0:	ae 01       	movw	r20, r28
   169e2:	4c 5f       	subi	r20, 0xFC	; 252
   169e4:	5f 4f       	sbci	r21, 0xFF	; 255
   169e6:	64 e0       	ldi	r22, 0x04	; 4
   169e8:	70 e0       	ldi	r23, 0x00	; 0
   169ea:	0d 96       	adiw	r24, 0x0d	; 13
   169ec:	0e 94 68 8c 	call	0x118d0	; 0x118d0 <gpib_write_str>
   169f0:	2c 81       	ldd	r18, Y+4	; 0x04
   169f2:	3d 81       	ldd	r19, Y+5	; 0x05
   169f4:	22 27       	eor	r18, r18
   169f6:	30 7d       	andi	r19, 0xD0	; 208
   169f8:	23 2b       	or	r18, r19
   169fa:	49 f0       	breq	.+18     	; 0x16a0e <amigo_send_logical_address+0x66>
   169fc:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16a00:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16a04:	27 81       	ldd	r18, Z+7	; 0x07
   16a06:	30 85       	ldd	r19, Z+8	; 0x08
   16a08:	20 62       	ori	r18, 0x20	; 32
   16a0a:	30 87       	std	Z+8, r19	; 0x08
   16a0c:	27 83       	std	Z+7, r18	; 0x07
   16a0e:	04 97       	sbiw	r24, 0x04	; 4
   16a10:	c9 f0       	breq	.+50     	; 0x16a44 <amigo_send_logical_address+0x9c>
   16a12:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16a16:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16a1a:	87 81       	ldd	r24, Z+7	; 0x07
   16a1c:	90 85       	ldd	r25, Z+8	; 0x08
   16a1e:	80 62       	ori	r24, 0x20	; 32
   16a20:	90 87       	std	Z+8, r25	; 0x08
   16a22:	87 83       	std	Z+7, r24	; 0x07
   16a24:	81 e0       	ldi	r24, 0x01	; 1
   16a26:	86 83       	std	Z+6, r24	; 0x06
   16a28:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16a2c:	80 ff       	sbrs	r24, 0
   16a2e:	0a c0       	rjmp	.+20     	; 0x16a44 <amigo_send_logical_address+0x9c>
   16a30:	86 e4       	ldi	r24, 0x46	; 70
   16a32:	9f e2       	ldi	r25, 0x2F	; 47
   16a34:	a0 e0       	ldi	r26, 0x00	; 0
   16a36:	ed b7       	in	r30, 0x3d	; 61
   16a38:	fe b7       	in	r31, 0x3e	; 62
   16a3a:	81 83       	std	Z+1, r24	; 0x01
   16a3c:	92 83       	std	Z+2, r25	; 0x02
   16a3e:	a3 83       	std	Z+3, r26	; 0x03
   16a40:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   16a44:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16a48:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16a4c:	81 81       	ldd	r24, Z+1	; 0x01
   16a4e:	90 e0       	ldi	r25, 0x00	; 0
   16a50:	0e 94 0e 87 	call	0x10e1c	; 0x10e1c <gpib_enable_PPR>
   16a54:	8c 81       	ldd	r24, Y+4	; 0x04
   16a56:	9d 81       	ldd	r25, Y+5	; 0x05
   16a58:	88 27       	eor	r24, r24
   16a5a:	90 7d       	andi	r25, 0xD0	; 208
   16a5c:	25 96       	adiw	r28, 0x05	; 5
   16a5e:	e2 e0       	ldi	r30, 0x02	; 2
   16a60:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

00016a64 <amigo_send_status>:
   16a64:	a5 e0       	ldi	r26, 0x05	; 5
   16a66:	b0 e0       	ldi	r27, 0x00	; 0
   16a68:	e8 e3       	ldi	r30, 0x38	; 56
   16a6a:	f5 eb       	ldi	r31, 0xB5	; 181
   16a6c:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
   16a70:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16a74:	85 ff       	sbrs	r24, 5
   16a76:	0a c0       	rjmp	.+20     	; 0x16a8c <amigo_send_status+0x28>
   16a78:	81 e3       	ldi	r24, 0x31	; 49
   16a7a:	9f e2       	ldi	r25, 0x2F	; 47
   16a7c:	a0 e0       	ldi	r26, 0x00	; 0
   16a7e:	ed b7       	in	r30, 0x3d	; 61
   16a80:	fe b7       	in	r31, 0x3e	; 62
   16a82:	81 83       	std	Z+1, r24	; 0x01
   16a84:	92 83       	std	Z+2, r25	; 0x02
   16a86:	a3 83       	std	Z+3, r26	; 0x03
   16a88:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   16a8c:	80 e0       	ldi	r24, 0x00	; 0
   16a8e:	91 e0       	ldi	r25, 0x01	; 1
   16a90:	9d 83       	std	Y+5, r25	; 0x05
   16a92:	8c 83       	std	Y+4, r24	; 0x04
   16a94:	80 91 01 19 	lds	r24, 0x1901	; 0x801901 <AMIGOs>
   16a98:	90 91 02 19 	lds	r25, 0x1902	; 0x801902 <AMIGOs+0x1>
   16a9c:	ae 01       	movw	r20, r28
   16a9e:	4c 5f       	subi	r20, 0xFC	; 252
   16aa0:	5f 4f       	sbci	r21, 0xFF	; 255
   16aa2:	64 e0       	ldi	r22, 0x04	; 4
   16aa4:	70 e0       	ldi	r23, 0x00	; 0
   16aa6:	09 96       	adiw	r24, 0x09	; 9
   16aa8:	0e 94 68 8c 	call	0x118d0	; 0x118d0 <gpib_write_str>
   16aac:	2c 81       	ldd	r18, Y+4	; 0x04
   16aae:	3d 81       	ldd	r19, Y+5	; 0x05
   16ab0:	22 27       	eor	r18, r18
   16ab2:	30 7d       	andi	r19, 0xD0	; 208
   16ab4:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16ab8:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16abc:	23 2b       	or	r18, r19
   16abe:	29 f0       	breq	.+10     	; 0x16aca <amigo_send_status+0x66>
   16ac0:	27 81       	ldd	r18, Z+7	; 0x07
   16ac2:	30 85       	ldd	r19, Z+8	; 0x08
   16ac4:	20 62       	ori	r18, 0x20	; 32
   16ac6:	30 87       	std	Z+8, r19	; 0x08
   16ac8:	27 83       	std	Z+7, r18	; 0x07
   16aca:	04 97       	sbiw	r24, 0x04	; 4
   16acc:	b1 f0       	breq	.+44     	; 0x16afa <amigo_send_status+0x96>
   16ace:	87 81       	ldd	r24, Z+7	; 0x07
   16ad0:	90 85       	ldd	r25, Z+8	; 0x08
   16ad2:	80 62       	ori	r24, 0x20	; 32
   16ad4:	90 87       	std	Z+8, r25	; 0x08
   16ad6:	87 83       	std	Z+7, r24	; 0x07
   16ad8:	81 e0       	ldi	r24, 0x01	; 1
   16ada:	86 83       	std	Z+6, r24	; 0x06
   16adc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16ae0:	80 ff       	sbrs	r24, 0
   16ae2:	0e c0       	rjmp	.+28     	; 0x16b00 <amigo_send_status+0x9c>
   16ae4:	87 e1       	ldi	r24, 0x17	; 23
   16ae6:	9f e2       	ldi	r25, 0x2F	; 47
   16ae8:	a0 e0       	ldi	r26, 0x00	; 0
   16aea:	ed b7       	in	r30, 0x3d	; 61
   16aec:	fe b7       	in	r31, 0x3e	; 62
   16aee:	81 83       	std	Z+1, r24	; 0x01
   16af0:	92 83       	std	Z+2, r25	; 0x02
   16af2:	a3 83       	std	Z+3, r26	; 0x03
   16af4:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   16af8:	03 c0       	rjmp	.+6      	; 0x16b00 <amigo_send_status+0x9c>
   16afa:	10 86       	std	Z+8, r1	; 0x08
   16afc:	17 82       	std	Z+7, r1	; 0x07
   16afe:	16 82       	std	Z+6, r1	; 0x06
   16b00:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16b04:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16b08:	81 81       	ldd	r24, Z+1	; 0x01
   16b0a:	90 e0       	ldi	r25, 0x00	; 0
   16b0c:	0e 94 0e 87 	call	0x10e1c	; 0x10e1c <gpib_enable_PPR>
   16b10:	8c 81       	ldd	r24, Y+4	; 0x04
   16b12:	9d 81       	ldd	r25, Y+5	; 0x05
   16b14:	88 27       	eor	r24, r24
   16b16:	90 7d       	andi	r25, 0xD0	; 208
   16b18:	25 96       	adiw	r28, 0x05	; 5
   16b1a:	e2 e0       	ldi	r30, 0x02	; 2
   16b1c:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

00016b20 <amigo_increment>:
   16b20:	a1 e1       	ldi	r26, 0x11	; 17
   16b22:	b0 e0       	ldi	r27, 0x00	; 0
   16b24:	e6 e9       	ldi	r30, 0x96	; 150
   16b26:	f5 eb       	ldi	r31, 0xB5	; 181
   16b28:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
   16b2c:	bc 01       	movw	r22, r24
   16b2e:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16b32:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16b36:	91 e1       	ldi	r25, 0x11	; 17
   16b38:	de 01       	movw	r26, r28
   16b3a:	11 96       	adiw	r26, 0x01	; 1
   16b3c:	01 90       	ld	r0, Z+
   16b3e:	0d 92       	st	X+, r0
   16b40:	9a 95       	dec	r25
   16b42:	e1 f7       	brne	.-8      	; 0x16b3c <amigo_increment+0x1c>
   16b44:	9e 81       	ldd	r25, Y+6	; 0x06
   16b46:	9f 5f       	subi	r25, 0xFF	; 255
   16b48:	9e 83       	std	Y+6, r25	; 0x06
   16b4a:	ce 01       	movw	r24, r28
   16b4c:	01 96       	adiw	r24, 0x01	; 1
   16b4e:	b3 dd       	rcall	.-1178   	; 0x166b6 <amigo_overflow_check>
   16b50:	00 97       	sbiw	r24, 0x00	; 0
   16b52:	59 f4       	brne	.+22     	; 0x16b6a <amigo_increment+0x4a>
   16b54:	a0 91 01 19 	lds	r26, 0x1901	; 0x801901 <AMIGOs>
   16b58:	b0 91 02 19 	lds	r27, 0x1902	; 0x801902 <AMIGOs+0x1>
   16b5c:	21 e1       	ldi	r18, 0x11	; 17
   16b5e:	fe 01       	movw	r30, r28
   16b60:	31 96       	adiw	r30, 0x01	; 1
   16b62:	01 90       	ld	r0, Z+
   16b64:	0d 92       	st	X+, r0
   16b66:	2a 95       	dec	r18
   16b68:	e1 f7       	brne	.-8      	; 0x16b62 <amigo_increment+0x42>
   16b6a:	61 96       	adiw	r28, 0x11	; 17
   16b6c:	e2 e0       	ldi	r30, 0x02	; 2
   16b6e:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

00016b72 <amigo_seek>:
   16b72:	0f 93       	push	r16
   16b74:	1f 93       	push	r17
   16b76:	cf 93       	push	r28
   16b78:	df 93       	push	r29
   16b7a:	ec 01       	movw	r28, r24
   16b7c:	62 ea       	ldi	r22, 0xA2	; 162
   16b7e:	74 e1       	ldi	r23, 0x14	; 20
   16b80:	9a dd       	rcall	.-1228   	; 0x166b6 <amigo_overflow_check>
   16b82:	8c 01       	movw	r16, r24
   16b84:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16b88:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16b8c:	89 2b       	or	r24, r25
   16b8e:	41 f0       	breq	.+16     	; 0x16ba0 <amigo_seek+0x2e>
   16b90:	81 e0       	ldi	r24, 0x01	; 1
   16b92:	86 83       	std	Z+6, r24	; 0x06
   16b94:	87 81       	ldd	r24, Z+7	; 0x07
   16b96:	90 85       	ldd	r25, Z+8	; 0x08
   16b98:	84 60       	ori	r24, 0x04	; 4
   16b9a:	90 87       	std	Z+8, r25	; 0x08
   16b9c:	87 83       	std	Z+7, r24	; 0x07
   16b9e:	06 c0       	rjmp	.+12     	; 0x16bac <amigo_seek+0x3a>
   16ba0:	8d 81       	ldd	r24, Y+5	; 0x05
   16ba2:	85 83       	std	Z+5, r24	; 0x05
   16ba4:	8c 81       	ldd	r24, Y+4	; 0x04
   16ba6:	84 83       	std	Z+4, r24	; 0x04
   16ba8:	8b 81       	ldd	r24, Y+3	; 0x03
   16baa:	83 83       	std	Z+3, r24	; 0x03
   16bac:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16bb0:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16bb4:	81 81       	ldd	r24, Z+1	; 0x01
   16bb6:	90 e0       	ldi	r25, 0x00	; 0
   16bb8:	0e 94 0e 87 	call	0x10e1c	; 0x10e1c <gpib_enable_PPR>
   16bbc:	c8 01       	movw	r24, r16
   16bbe:	df 91       	pop	r29
   16bc0:	cf 91       	pop	r28
   16bc2:	1f 91       	pop	r17
   16bc4:	0f 91       	pop	r16
   16bc6:	08 95       	ret

00016bc8 <amigo_verify>:
   16bc8:	8f 92       	push	r8
   16bca:	9f 92       	push	r9
   16bcc:	af 92       	push	r10
   16bce:	bf 92       	push	r11
   16bd0:	ef 92       	push	r14
   16bd2:	ff 92       	push	r15
   16bd4:	0f 93       	push	r16
   16bd6:	1f 93       	push	r17
   16bd8:	cf 93       	push	r28
   16bda:	df 93       	push	r29
   16bdc:	ad b7       	in	r26, 0x3d	; 61
   16bde:	be b7       	in	r27, 0x3e	; 62
   16be0:	19 97       	sbiw	r26, 0x09	; 9
   16be2:	0f b6       	in	r0, 0x3f	; 63
   16be4:	f8 94       	cli
   16be6:	be bf       	out	0x3e, r27	; 62
   16be8:	0f be       	out	0x3f, r0	; 63
   16bea:	ad bf       	out	0x3d, r26	; 61
   16bec:	7c 01       	movw	r14, r24
   16bee:	67 ea       	ldi	r22, 0xA7	; 167
   16bf0:	74 e1       	ldi	r23, 0x14	; 20
   16bf2:	80 91 01 19 	lds	r24, 0x1901	; 0x801901 <AMIGOs>
   16bf6:	90 91 02 19 	lds	r25, 0x1902	; 0x801902 <AMIGOs+0x1>
   16bfa:	b3 dd       	rcall	.-1178   	; 0x16762 <amigo_chs_to_logical>
   16bfc:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   16c00:	25 ff       	sbrs	r18, 5
   16c02:	10 c0       	rjmp	.+32     	; 0x16c24 <amigo_verify+0x5c>
   16c04:	ed b7       	in	r30, 0x3d	; 61
   16c06:	fe b7       	in	r31, 0x3e	; 62
   16c08:	e0 86       	std	Z+8, r14	; 0x08
   16c0a:	f1 86       	std	Z+9, r15	; 0x09
   16c0c:	64 83       	std	Z+4, r22	; 0x04
   16c0e:	75 83       	std	Z+5, r23	; 0x05
   16c10:	86 83       	std	Z+6, r24	; 0x06
   16c12:	97 83       	std	Z+7, r25	; 0x07
   16c14:	86 ed       	ldi	r24, 0xD6	; 214
   16c16:	9e e2       	ldi	r25, 0x2E	; 46
   16c18:	a0 e0       	ldi	r26, 0x00	; 0
   16c1a:	81 83       	std	Z+1, r24	; 0x01
   16c1c:	92 83       	std	Z+2, r25	; 0x02
   16c1e:	a3 83       	std	Z+3, r26	; 0x03
   16c20:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   16c24:	e7 01       	movw	r28, r14
   16c26:	20 97       	sbiw	r28, 0x00	; 0
   16c28:	09 f4       	brne	.+2      	; 0x16c2c <amigo_verify+0x64>
   16c2a:	49 c0       	rjmp	.+146    	; 0x16cbe <amigo_verify+0xf6>
   16c2c:	64 eb       	ldi	r22, 0xB4	; 180
   16c2e:	74 e1       	ldi	r23, 0x14	; 20
   16c30:	80 91 01 19 	lds	r24, 0x1901	; 0x801901 <AMIGOs>
   16c34:	90 91 02 19 	lds	r25, 0x1902	; 0x801902 <AMIGOs+0x1>
   16c38:	94 dd       	rcall	.-1240   	; 0x16762 <amigo_chs_to_logical>
   16c3a:	4b 01       	movw	r8, r22
   16c3c:	5c 01       	movw	r10, r24
   16c3e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16c42:	86 fd       	sbrc	r24, 6
   16c44:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_timer_elapsed_begin>
   16c48:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16c4c:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16c50:	e0 90 01 19 	lds	r14, 0x1901	; 0x801901 <AMIGOs>
   16c54:	f0 90 02 19 	lds	r15, 0x1902	; 0x801902 <AMIGOs+0x1>
   16c58:	87 e0       	ldi	r24, 0x07	; 7
   16c5a:	e8 0e       	add	r14, r24
   16c5c:	f1 1c       	adc	r15, r1
   16c5e:	06 81       	ldd	r16, Z+6	; 0x06
   16c60:	17 81       	ldd	r17, Z+7	; 0x07
   16c62:	22 e8       	ldi	r18, 0x82	; 130
   16c64:	3c e1       	ldi	r19, 0x1C	; 28
   16c66:	b5 01       	movw	r22, r10
   16c68:	a4 01       	movw	r20, r8
   16c6a:	82 81       	ldd	r24, Z+2	; 0x02
   16c6c:	93 81       	ldd	r25, Z+3	; 0x03
   16c6e:	0e 94 9e 85 	call	0x10b3c	; 0x10b3c <dbf_open_read>
   16c72:	7c 01       	movw	r14, r24
   16c74:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16c78:	86 ff       	sbrs	r24, 6
   16c7a:	04 c0       	rjmp	.+8      	; 0x16c84 <amigo_verify+0xbc>
   16c7c:	8c eb       	ldi	r24, 0xBC	; 188
   16c7e:	9f e0       	ldi	r25, 0x0F	; 15
   16c80:	0e 94 5e 86 	call	0x10cbc	; 0x10cbc <gpib_timer_elapsed_end>
   16c84:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16c88:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16c8c:	86 81       	ldd	r24, Z+6	; 0x06
   16c8e:	97 81       	ldd	r25, Z+7	; 0x07
   16c90:	e8 16       	cp	r14, r24
   16c92:	f9 06       	cpc	r15, r25
   16c94:	61 f0       	breq	.+24     	; 0x16cae <amigo_verify+0xe6>
   16c96:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16c9a:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16c9e:	81 e0       	ldi	r24, 0x01	; 1
   16ca0:	86 83       	std	Z+6, r24	; 0x06
   16ca2:	87 81       	ldd	r24, Z+7	; 0x07
   16ca4:	90 85       	ldd	r25, Z+8	; 0x08
   16ca6:	81 60       	ori	r24, 0x01	; 1
   16ca8:	90 87       	std	Z+8, r25	; 0x08
   16caa:	87 83       	std	Z+7, r24	; 0x07
   16cac:	0b c0       	rjmp	.+22     	; 0x16cc4 <amigo_verify+0xfc>
   16cae:	8c eb       	ldi	r24, 0xBC	; 188
   16cb0:	94 e1       	ldi	r25, 0x14	; 20
   16cb2:	36 df       	rcall	.-404    	; 0x16b20 <amigo_increment>
   16cb4:	21 97       	sbiw	r28, 0x01	; 1
   16cb6:	89 2b       	or	r24, r25
   16cb8:	09 f4       	brne	.+2      	; 0x16cbc <amigo_verify+0xf4>
   16cba:	b5 cf       	rjmp	.-150    	; 0x16c26 <amigo_verify+0x5e>
   16cbc:	03 c0       	rjmp	.+6      	; 0x16cc4 <amigo_verify+0xfc>
   16cbe:	c0 e0       	ldi	r28, 0x00	; 0
   16cc0:	d0 e0       	ldi	r29, 0x00	; 0
   16cc2:	02 c0       	rjmp	.+4      	; 0x16cc8 <amigo_verify+0x100>
   16cc4:	c1 e0       	ldi	r28, 0x01	; 1
   16cc6:	d0 e0       	ldi	r29, 0x00	; 0
   16cc8:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16ccc:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16cd0:	81 81       	ldd	r24, Z+1	; 0x01
   16cd2:	90 e0       	ldi	r25, 0x00	; 0
   16cd4:	0e 94 0e 87 	call	0x10e1c	; 0x10e1c <gpib_enable_PPR>
   16cd8:	ce 01       	movw	r24, r28
   16cda:	ad b7       	in	r26, 0x3d	; 61
   16cdc:	be b7       	in	r27, 0x3e	; 62
   16cde:	19 96       	adiw	r26, 0x09	; 9
   16ce0:	0f b6       	in	r0, 0x3f	; 63
   16ce2:	f8 94       	cli
   16ce4:	be bf       	out	0x3e, r27	; 62
   16ce6:	0f be       	out	0x3f, r0	; 63
   16ce8:	ad bf       	out	0x3d, r26	; 61
   16cea:	df 91       	pop	r29
   16cec:	cf 91       	pop	r28
   16cee:	1f 91       	pop	r17
   16cf0:	0f 91       	pop	r16
   16cf2:	ff 90       	pop	r15
   16cf4:	ef 90       	pop	r14
   16cf6:	bf 90       	pop	r11
   16cf8:	af 90       	pop	r10
   16cfa:	9f 90       	pop	r9
   16cfc:	8f 90       	pop	r8
   16cfe:	08 95       	ret

00016d00 <amigo_format>:
   16d00:	ef 92       	push	r14
   16d02:	ff 92       	push	r15
   16d04:	0f 93       	push	r16
   16d06:	1f 93       	push	r17
   16d08:	cf 93       	push	r28
   16d0a:	df 93       	push	r29
   16d0c:	00 d0       	rcall	.+0      	; 0x16d0e <amigo_format+0xe>
   16d0e:	1f 92       	push	r1
   16d10:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16d14:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16d18:	15 82       	std	Z+5, r1	; 0x05
   16d1a:	14 82       	std	Z+4, r1	; 0x04
   16d1c:	13 82       	std	Z+3, r1	; 0x03
   16d1e:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16d22:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16d26:	46 81       	ldd	r20, Z+6	; 0x06
   16d28:	57 81       	ldd	r21, Z+7	; 0x07
   16d2a:	68 2f       	mov	r22, r24
   16d2c:	70 e0       	ldi	r23, 0x00	; 0
   16d2e:	82 e8       	ldi	r24, 0x82	; 130
   16d30:	9c e1       	ldi	r25, 0x1C	; 28
   16d32:	0e 94 56 e9 	call	0x1d2ac	; 0x1d2ac <memset>
   16d36:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16d3a:	85 ff       	sbrs	r24, 5
   16d3c:	0a c0       	rjmp	.+20     	; 0x16d52 <amigo_format+0x52>
   16d3e:	8b e9       	ldi	r24, 0x9B	; 155
   16d40:	9e e2       	ldi	r25, 0x2E	; 46
   16d42:	a0 e0       	ldi	r26, 0x00	; 0
   16d44:	ed b7       	in	r30, 0x3d	; 61
   16d46:	fe b7       	in	r31, 0x3e	; 62
   16d48:	81 83       	std	Z+1, r24	; 0x01
   16d4a:	92 83       	std	Z+2, r25	; 0x02
   16d4c:	a3 83       	std	Z+3, r26	; 0x03
   16d4e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   16d52:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16d56:	86 fd       	sbrc	r24, 6
   16d58:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_timer_elapsed_begin>
   16d5c:	63 ec       	ldi	r22, 0xC3	; 195
   16d5e:	74 e1       	ldi	r23, 0x14	; 20
   16d60:	80 91 01 19 	lds	r24, 0x1901	; 0x801901 <AMIGOs>
   16d64:	90 91 02 19 	lds	r25, 0x1902	; 0x801902 <AMIGOs+0x1>
   16d68:	fc dc       	rcall	.-1544   	; 0x16762 <amigo_chs_to_logical>
   16d6a:	ab 01       	movw	r20, r22
   16d6c:	bc 01       	movw	r22, r24
   16d6e:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16d72:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16d76:	e0 90 01 19 	lds	r14, 0x1901	; 0x801901 <AMIGOs>
   16d7a:	f0 90 02 19 	lds	r15, 0x1902	; 0x801902 <AMIGOs+0x1>
   16d7e:	87 e0       	ldi	r24, 0x07	; 7
   16d80:	e8 0e       	add	r14, r24
   16d82:	f1 1c       	adc	r15, r1
   16d84:	06 81       	ldd	r16, Z+6	; 0x06
   16d86:	17 81       	ldd	r17, Z+7	; 0x07
   16d88:	22 e8       	ldi	r18, 0x82	; 130
   16d8a:	3c e1       	ldi	r19, 0x1C	; 28
   16d8c:	82 81       	ldd	r24, Z+2	; 0x02
   16d8e:	93 81       	ldd	r25, Z+3	; 0x03
   16d90:	0e 94 f5 85 	call	0x10bea	; 0x10bea <dbf_open_write>
   16d94:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16d98:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16d9c:	26 81       	ldd	r18, Z+6	; 0x06
   16d9e:	37 81       	ldd	r19, Z+7	; 0x07
   16da0:	82 17       	cp	r24, r18
   16da2:	93 07       	cpc	r25, r19
   16da4:	71 f0       	breq	.+28     	; 0x16dc2 <amigo_format+0xc2>
   16da6:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16daa:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16dae:	87 81       	ldd	r24, Z+7	; 0x07
   16db0:	90 85       	ldd	r25, Z+8	; 0x08
   16db2:	82 60       	ori	r24, 0x02	; 2
   16db4:	90 87       	std	Z+8, r25	; 0x08
   16db6:	87 83       	std	Z+7, r24	; 0x07
   16db8:	81 e0       	ldi	r24, 0x01	; 1
   16dba:	86 83       	std	Z+6, r24	; 0x06
   16dbc:	c1 e0       	ldi	r28, 0x01	; 1
   16dbe:	d0 e0       	ldi	r29, 0x00	; 0
   16dc0:	0f c0       	rjmp	.+30     	; 0x16de0 <amigo_format+0xe0>
   16dc2:	80 e0       	ldi	r24, 0x00	; 0
   16dc4:	90 e0       	ldi	r25, 0x00	; 0
   16dc6:	ac de       	rcall	.-680    	; 0x16b20 <amigo_increment>
   16dc8:	89 2b       	or	r24, r25
   16dca:	41 f2       	breq	.-112    	; 0x16d5c <amigo_format+0x5c>
   16dcc:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16dd0:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16dd4:	15 82       	std	Z+5, r1	; 0x05
   16dd6:	14 82       	std	Z+4, r1	; 0x04
   16dd8:	13 82       	std	Z+3, r1	; 0x03
   16dda:	16 82       	std	Z+6, r1	; 0x06
   16ddc:	c0 e0       	ldi	r28, 0x00	; 0
   16dde:	d0 e0       	ldi	r29, 0x00	; 0
   16de0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16de4:	86 ff       	sbrs	r24, 6
   16de6:	04 c0       	rjmp	.+8      	; 0x16df0 <amigo_format+0xf0>
   16de8:	83 ec       	ldi	r24, 0xC3	; 195
   16dea:	94 e1       	ldi	r25, 0x14	; 20
   16dec:	0e 94 5e 86 	call	0x10cbc	; 0x10cbc <gpib_timer_elapsed_end>
   16df0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16df4:	85 ff       	sbrs	r24, 5
   16df6:	0a c0       	rjmp	.+20     	; 0x16e0c <amigo_format+0x10c>
   16df8:	86 e8       	ldi	r24, 0x86	; 134
   16dfa:	9e e2       	ldi	r25, 0x2E	; 46
   16dfc:	a0 e0       	ldi	r26, 0x00	; 0
   16dfe:	ed b7       	in	r30, 0x3d	; 61
   16e00:	fe b7       	in	r31, 0x3e	; 62
   16e02:	81 83       	std	Z+1, r24	; 0x01
   16e04:	92 83       	std	Z+2, r25	; 0x02
   16e06:	a3 83       	std	Z+3, r26	; 0x03
   16e08:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   16e0c:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16e10:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16e14:	81 81       	ldd	r24, Z+1	; 0x01
   16e16:	90 e0       	ldi	r25, 0x00	; 0
   16e18:	0e 94 0e 87 	call	0x10e1c	; 0x10e1c <gpib_enable_PPR>
   16e1c:	ce 01       	movw	r24, r28
   16e1e:	cd b7       	in	r28, 0x3d	; 61
   16e20:	de b7       	in	r29, 0x3e	; 62
   16e22:	23 96       	adiw	r28, 0x03	; 3
   16e24:	e6 e0       	ldi	r30, 0x06	; 6
   16e26:	0c 94 ae e4 	jmp	0x1c95c	; 0x1c95c <__epilogue_restores__+0x18>

00016e2a <amigo_buffered_read>:
   16e2a:	8f 92       	push	r8
   16e2c:	9f 92       	push	r9
   16e2e:	af 92       	push	r10
   16e30:	bf 92       	push	r11
   16e32:	ef 92       	push	r14
   16e34:	ff 92       	push	r15
   16e36:	0f 93       	push	r16
   16e38:	1f 93       	push	r17
   16e3a:	cf 93       	push	r28
   16e3c:	df 93       	push	r29
   16e3e:	00 d0       	rcall	.+0      	; 0x16e40 <amigo_buffered_read+0x16>
   16e40:	00 d0       	rcall	.+0      	; 0x16e42 <amigo_buffered_read+0x18>
   16e42:	1f 92       	push	r1
   16e44:	cd b7       	in	r28, 0x3d	; 61
   16e46:	de b7       	in	r29, 0x3e	; 62
   16e48:	6a ec       	ldi	r22, 0xCA	; 202
   16e4a:	74 e1       	ldi	r23, 0x14	; 20
   16e4c:	80 91 01 19 	lds	r24, 0x1901	; 0x801901 <AMIGOs>
   16e50:	90 91 02 19 	lds	r25, 0x1902	; 0x801902 <AMIGOs+0x1>
   16e54:	86 dc       	rcall	.-1780   	; 0x16762 <amigo_chs_to_logical>
   16e56:	4b 01       	movw	r8, r22
   16e58:	5c 01       	movw	r10, r24
   16e5a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16e5e:	86 fd       	sbrc	r24, 6
   16e60:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_timer_elapsed_begin>
   16e64:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16e68:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16e6c:	e0 90 01 19 	lds	r14, 0x1901	; 0x801901 <AMIGOs>
   16e70:	f0 90 02 19 	lds	r15, 0x1902	; 0x801902 <AMIGOs+0x1>
   16e74:	87 e0       	ldi	r24, 0x07	; 7
   16e76:	e8 0e       	add	r14, r24
   16e78:	f1 1c       	adc	r15, r1
   16e7a:	06 81       	ldd	r16, Z+6	; 0x06
   16e7c:	17 81       	ldd	r17, Z+7	; 0x07
   16e7e:	22 e8       	ldi	r18, 0x82	; 130
   16e80:	3c e1       	ldi	r19, 0x1C	; 28
   16e82:	b5 01       	movw	r22, r10
   16e84:	a4 01       	movw	r20, r8
   16e86:	82 81       	ldd	r24, Z+2	; 0x02
   16e88:	93 81       	ldd	r25, Z+3	; 0x03
   16e8a:	0e 94 9e 85 	call	0x10b3c	; 0x10b3c <dbf_open_read>
   16e8e:	7c 01       	movw	r14, r24
   16e90:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16e94:	86 ff       	sbrs	r24, 6
   16e96:	04 c0       	rjmp	.+8      	; 0x16ea0 <amigo_buffered_read+0x76>
   16e98:	8c eb       	ldi	r24, 0xBC	; 188
   16e9a:	9f e0       	ldi	r25, 0x0F	; 15
   16e9c:	0e 94 5e 86 	call	0x10cbc	; 0x10cbc <gpib_timer_elapsed_end>
   16ea0:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16ea4:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16ea8:	86 81       	ldd	r24, Z+6	; 0x06
   16eaa:	97 81       	ldd	r25, Z+7	; 0x07
   16eac:	e8 16       	cp	r14, r24
   16eae:	f9 06       	cpc	r15, r25
   16eb0:	39 f0       	breq	.+14     	; 0x16ec0 <amigo_buffered_read+0x96>
   16eb2:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16eb6:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16eba:	81 e0       	ldi	r24, 0x01	; 1
   16ebc:	86 83       	std	Z+6, r24	; 0x06
   16ebe:	6c c0       	rjmp	.+216    	; 0x16f98 <amigo_buffered_read+0x16e>
   16ec0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16ec4:	87 fd       	sbrc	r24, 7
   16ec6:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_timer_elapsed_begin>
   16eca:	80 e0       	ldi	r24, 0x00	; 0
   16ecc:	91 e0       	ldi	r25, 0x01	; 1
   16ece:	9d 83       	std	Y+5, r25	; 0x05
   16ed0:	8c 83       	std	Y+4, r24	; 0x04
   16ed2:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16ed6:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16eda:	66 81       	ldd	r22, Z+6	; 0x06
   16edc:	77 81       	ldd	r23, Z+7	; 0x07
   16ede:	ae 01       	movw	r20, r28
   16ee0:	4c 5f       	subi	r20, 0xFC	; 252
   16ee2:	5f 4f       	sbci	r21, 0xFF	; 255
   16ee4:	82 e8       	ldi	r24, 0x82	; 130
   16ee6:	9c e1       	ldi	r25, 0x1C	; 28
   16ee8:	0e 94 68 8c 	call	0x118d0	; 0x118d0 <gpib_write_str>
   16eec:	7c 01       	movw	r14, r24
   16eee:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16ef2:	87 ff       	sbrs	r24, 7
   16ef4:	04 c0       	rjmp	.+8      	; 0x16efe <amigo_buffered_read+0xd4>
   16ef6:	88 ed       	ldi	r24, 0xD8	; 216
   16ef8:	94 e1       	ldi	r25, 0x14	; 20
   16efa:	0e 94 5e 86 	call	0x10cbc	; 0x10cbc <gpib_timer_elapsed_end>
   16efe:	8c 81       	ldd	r24, Y+4	; 0x04
   16f00:	9d 81       	ldd	r25, Y+5	; 0x05
   16f02:	88 27       	eor	r24, r24
   16f04:	90 7d       	andi	r25, 0xD0	; 208
   16f06:	89 2b       	or	r24, r25
   16f08:	49 f4       	brne	.+18     	; 0x16f1c <amigo_buffered_read+0xf2>
   16f0a:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16f0e:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16f12:	86 81       	ldd	r24, Z+6	; 0x06
   16f14:	97 81       	ldd	r25, Z+7	; 0x07
   16f16:	e8 16       	cp	r14, r24
   16f18:	f9 06       	cpc	r15, r25
   16f1a:	31 f1       	breq	.+76     	; 0x16f68 <amigo_buffered_read+0x13e>
   16f1c:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16f20:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16f24:	81 e0       	ldi	r24, 0x01	; 1
   16f26:	86 83       	std	Z+6, r24	; 0x06
   16f28:	87 81       	ldd	r24, Z+7	; 0x07
   16f2a:	90 85       	ldd	r25, Z+8	; 0x08
   16f2c:	80 62       	ori	r24, 0x20	; 32
   16f2e:	90 87       	std	Z+8, r25	; 0x08
   16f30:	87 83       	std	Z+7, r24	; 0x07
   16f32:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16f36:	80 ff       	sbrs	r24, 0
   16f38:	0a c0       	rjmp	.+20     	; 0x16f4e <amigo_buffered_read+0x124>
   16f3a:	8c e6       	ldi	r24, 0x6C	; 108
   16f3c:	9e e2       	ldi	r25, 0x2E	; 46
   16f3e:	a0 e0       	ldi	r26, 0x00	; 0
   16f40:	ed b7       	in	r30, 0x3d	; 61
   16f42:	fe b7       	in	r31, 0x3e	; 62
   16f44:	81 83       	std	Z+1, r24	; 0x01
   16f46:	92 83       	std	Z+2, r25	; 0x02
   16f48:	a3 83       	std	Z+3, r26	; 0x03
   16f4a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   16f4e:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16f52:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16f56:	81 81       	ldd	r24, Z+1	; 0x01
   16f58:	90 e0       	ldi	r25, 0x00	; 0
   16f5a:	0e 94 0e 87 	call	0x10e1c	; 0x10e1c <gpib_enable_PPR>
   16f5e:	8c 81       	ldd	r24, Y+4	; 0x04
   16f60:	9d 81       	ldd	r25, Y+5	; 0x05
   16f62:	88 27       	eor	r24, r24
   16f64:	90 7d       	andi	r25, 0xD0	; 208
   16f66:	1a c0       	rjmp	.+52     	; 0x16f9c <amigo_buffered_read+0x172>
   16f68:	8a ec       	ldi	r24, 0xCA	; 202
   16f6a:	94 e1       	ldi	r25, 0x14	; 20
   16f6c:	d9 dd       	rcall	.-1102   	; 0x16b20 <amigo_increment>
   16f6e:	89 2b       	or	r24, r25
   16f70:	59 f0       	breq	.+22     	; 0x16f88 <amigo_buffered_read+0x15e>
   16f72:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   16f76:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   16f7a:	81 e0       	ldi	r24, 0x01	; 1
   16f7c:	86 83       	std	Z+6, r24	; 0x06
   16f7e:	87 81       	ldd	r24, Z+7	; 0x07
   16f80:	90 85       	ldd	r25, Z+8	; 0x08
   16f82:	84 60       	ori	r24, 0x04	; 4
   16f84:	90 87       	std	Z+8, r25	; 0x08
   16f86:	87 83       	std	Z+7, r24	; 0x07
   16f88:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16f8c:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   16f90:	81 81       	ldd	r24, Z+1	; 0x01
   16f92:	90 e0       	ldi	r25, 0x00	; 0
   16f94:	0e 94 0e 87 	call	0x10e1c	; 0x10e1c <gpib_enable_PPR>
   16f98:	80 e0       	ldi	r24, 0x00	; 0
   16f9a:	90 e0       	ldi	r25, 0x00	; 0
   16f9c:	0f 90       	pop	r0
   16f9e:	0f 90       	pop	r0
   16fa0:	0f 90       	pop	r0
   16fa2:	0f 90       	pop	r0
   16fa4:	0f 90       	pop	r0
   16fa6:	df 91       	pop	r29
   16fa8:	cf 91       	pop	r28
   16faa:	1f 91       	pop	r17
   16fac:	0f 91       	pop	r16
   16fae:	ff 90       	pop	r15
   16fb0:	ef 90       	pop	r14
   16fb2:	bf 90       	pop	r11
   16fb4:	af 90       	pop	r10
   16fb6:	9f 90       	pop	r9
   16fb8:	8f 90       	pop	r8
   16fba:	08 95       	ret

00016fbc <amigo_buffered_write>:
   16fbc:	8f 92       	push	r8
   16fbe:	9f 92       	push	r9
   16fc0:	af 92       	push	r10
   16fc2:	bf 92       	push	r11
   16fc4:	ef 92       	push	r14
   16fc6:	ff 92       	push	r15
   16fc8:	0f 93       	push	r16
   16fca:	1f 93       	push	r17
   16fcc:	cf 93       	push	r28
   16fce:	df 93       	push	r29
   16fd0:	00 d0       	rcall	.+0      	; 0x16fd2 <amigo_buffered_write+0x16>
   16fd2:	00 d0       	rcall	.+0      	; 0x16fd4 <amigo_buffered_write+0x18>
   16fd4:	1f 92       	push	r1
   16fd6:	cd b7       	in	r28, 0x3d	; 61
   16fd8:	de b7       	in	r29, 0x3e	; 62
   16fda:	63 ee       	ldi	r22, 0xE3	; 227
   16fdc:	74 e1       	ldi	r23, 0x14	; 20
   16fde:	80 91 01 19 	lds	r24, 0x1901	; 0x801901 <AMIGOs>
   16fe2:	90 91 02 19 	lds	r25, 0x1902	; 0x801902 <AMIGOs+0x1>
   16fe6:	bd db       	rcall	.-2182   	; 0x16762 <amigo_chs_to_logical>
   16fe8:	4b 01       	movw	r8, r22
   16fea:	5c 01       	movw	r10, r24
   16fec:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   16ff0:	87 fd       	sbrc	r24, 7
   16ff2:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_timer_elapsed_begin>
   16ff6:	1d 82       	std	Y+5, r1	; 0x05
   16ff8:	1c 82       	std	Y+4, r1	; 0x04
   16ffa:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   16ffe:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   17002:	66 81       	ldd	r22, Z+6	; 0x06
   17004:	77 81       	ldd	r23, Z+7	; 0x07
   17006:	ae 01       	movw	r20, r28
   17008:	4c 5f       	subi	r20, 0xFC	; 252
   1700a:	5f 4f       	sbci	r21, 0xFF	; 255
   1700c:	82 e8       	ldi	r24, 0x82	; 130
   1700e:	9c e1       	ldi	r25, 0x1C	; 28
   17010:	0e 94 c6 8b 	call	0x1178c	; 0x1178c <gpib_read_str>
   17014:	7c 01       	movw	r14, r24
   17016:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1701a:	87 ff       	sbrs	r24, 7
   1701c:	04 c0       	rjmp	.+8      	; 0x17026 <amigo_buffered_write+0x6a>
   1701e:	82 ef       	ldi	r24, 0xF2	; 242
   17020:	94 e1       	ldi	r25, 0x14	; 20
   17022:	0e 94 5e 86 	call	0x10cbc	; 0x10cbc <gpib_timer_elapsed_end>
   17026:	8c 81       	ldd	r24, Y+4	; 0x04
   17028:	9d 81       	ldd	r25, Y+5	; 0x05
   1702a:	88 27       	eor	r24, r24
   1702c:	90 7d       	andi	r25, 0xD0	; 208
   1702e:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   17032:	89 2b       	or	r24, r25
   17034:	49 f4       	brne	.+18     	; 0x17048 <amigo_buffered_write+0x8c>
   17036:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   1703a:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   1703e:	86 81       	ldd	r24, Z+6	; 0x06
   17040:	97 81       	ldd	r25, Z+7	; 0x07
   17042:	e8 16       	cp	r14, r24
   17044:	f9 06       	cpc	r15, r25
   17046:	c1 f0       	breq	.+48     	; 0x17078 <amigo_buffered_write+0xbc>
   17048:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   1704c:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   17050:	81 e0       	ldi	r24, 0x01	; 1
   17052:	86 83       	std	Z+6, r24	; 0x06
   17054:	87 81       	ldd	r24, Z+7	; 0x07
   17056:	90 85       	ldd	r25, Z+8	; 0x08
   17058:	80 62       	ori	r24, 0x20	; 32
   1705a:	90 87       	std	Z+8, r25	; 0x08
   1705c:	87 83       	std	Z+7, r24	; 0x07
   1705e:	20 ff       	sbrs	r18, 0
   17060:	4e c0       	rjmp	.+156    	; 0x170fe <amigo_buffered_write+0x142>
   17062:	8d e4       	ldi	r24, 0x4D	; 77
   17064:	9e e2       	ldi	r25, 0x2E	; 46
   17066:	a0 e0       	ldi	r26, 0x00	; 0
   17068:	ed b7       	in	r30, 0x3d	; 61
   1706a:	fe b7       	in	r31, 0x3e	; 62
   1706c:	81 83       	std	Z+1, r24	; 0x01
   1706e:	92 83       	std	Z+2, r25	; 0x02
   17070:	a3 83       	std	Z+3, r26	; 0x03
   17072:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   17076:	43 c0       	rjmp	.+134    	; 0x170fe <amigo_buffered_write+0x142>
   17078:	26 fd       	sbrc	r18, 6
   1707a:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_timer_elapsed_begin>
   1707e:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   17082:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   17086:	e0 90 01 19 	lds	r14, 0x1901	; 0x801901 <AMIGOs>
   1708a:	f0 90 02 19 	lds	r15, 0x1902	; 0x801902 <AMIGOs+0x1>
   1708e:	87 e0       	ldi	r24, 0x07	; 7
   17090:	e8 0e       	add	r14, r24
   17092:	f1 1c       	adc	r15, r1
   17094:	06 81       	ldd	r16, Z+6	; 0x06
   17096:	17 81       	ldd	r17, Z+7	; 0x07
   17098:	22 e8       	ldi	r18, 0x82	; 130
   1709a:	3c e1       	ldi	r19, 0x1C	; 28
   1709c:	b5 01       	movw	r22, r10
   1709e:	a4 01       	movw	r20, r8
   170a0:	82 81       	ldd	r24, Z+2	; 0x02
   170a2:	93 81       	ldd	r25, Z+3	; 0x03
   170a4:	0e 94 f5 85 	call	0x10bea	; 0x10bea <dbf_open_write>
   170a8:	7c 01       	movw	r14, r24
   170aa:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   170ae:	86 ff       	sbrs	r24, 6
   170b0:	04 c0       	rjmp	.+8      	; 0x170ba <amigo_buffered_write+0xfe>
   170b2:	81 eb       	ldi	r24, 0xB1	; 177
   170b4:	9f e0       	ldi	r25, 0x0F	; 15
   170b6:	0e 94 5e 86 	call	0x10cbc	; 0x10cbc <gpib_timer_elapsed_end>
   170ba:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   170be:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   170c2:	86 81       	ldd	r24, Z+6	; 0x06
   170c4:	97 81       	ldd	r25, Z+7	; 0x07
   170c6:	e8 16       	cp	r14, r24
   170c8:	f9 06       	cpc	r15, r25
   170ca:	49 f0       	breq	.+18     	; 0x170de <amigo_buffered_write+0x122>
   170cc:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   170d0:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   170d4:	81 e0       	ldi	r24, 0x01	; 1
   170d6:	86 83       	std	Z+6, r24	; 0x06
   170d8:	80 e0       	ldi	r24, 0x00	; 0
   170da:	90 e0       	ldi	r25, 0x00	; 0
   170dc:	1c c0       	rjmp	.+56     	; 0x17116 <amigo_buffered_write+0x15a>
   170de:	83 ee       	ldi	r24, 0xE3	; 227
   170e0:	94 e1       	ldi	r25, 0x14	; 20
   170e2:	1e dd       	rcall	.-1476   	; 0x16b20 <amigo_increment>
   170e4:	89 2b       	or	r24, r25
   170e6:	59 f0       	breq	.+22     	; 0x170fe <amigo_buffered_write+0x142>
   170e8:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   170ec:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   170f0:	81 e0       	ldi	r24, 0x01	; 1
   170f2:	86 83       	std	Z+6, r24	; 0x06
   170f4:	87 81       	ldd	r24, Z+7	; 0x07
   170f6:	90 85       	ldd	r25, Z+8	; 0x08
   170f8:	84 60       	ori	r24, 0x04	; 4
   170fa:	90 87       	std	Z+8, r25	; 0x08
   170fc:	87 83       	std	Z+7, r24	; 0x07
   170fe:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   17102:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   17106:	81 81       	ldd	r24, Z+1	; 0x01
   17108:	90 e0       	ldi	r25, 0x00	; 0
   1710a:	0e 94 0e 87 	call	0x10e1c	; 0x10e1c <gpib_enable_PPR>
   1710e:	8c 81       	ldd	r24, Y+4	; 0x04
   17110:	9d 81       	ldd	r25, Y+5	; 0x05
   17112:	88 27       	eor	r24, r24
   17114:	90 7d       	andi	r25, 0xD0	; 208
   17116:	0f 90       	pop	r0
   17118:	0f 90       	pop	r0
   1711a:	0f 90       	pop	r0
   1711c:	0f 90       	pop	r0
   1711e:	0f 90       	pop	r0
   17120:	df 91       	pop	r29
   17122:	cf 91       	pop	r28
   17124:	1f 91       	pop	r17
   17126:	0f 91       	pop	r16
   17128:	ff 90       	pop	r15
   1712a:	ef 90       	pop	r14
   1712c:	bf 90       	pop	r11
   1712e:	af 90       	pop	r10
   17130:	9f 90       	pop	r9
   17132:	8f 90       	pop	r8
   17134:	08 95       	ret

00017136 <amigo_cmd_dsj>:
   17136:	a8 e0       	ldi	r26, 0x08	; 8
   17138:	b0 e0       	ldi	r27, 0x00	; 0
   1713a:	e1 ea       	ldi	r30, 0xA1	; 161
   1713c:	f8 eb       	ldi	r31, 0xB8	; 184
   1713e:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
   17142:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   17146:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   1714a:	86 81       	ldd	r24, Z+6	; 0x06
   1714c:	88 87       	std	Y+8, r24	; 0x08
   1714e:	80 e0       	ldi	r24, 0x00	; 0
   17150:	91 e0       	ldi	r25, 0x01	; 1
   17152:	9f 83       	std	Y+7, r25	; 0x07
   17154:	8e 83       	std	Y+6, r24	; 0x06
   17156:	ae 01       	movw	r20, r28
   17158:	4a 5f       	subi	r20, 0xFA	; 250
   1715a:	5f 4f       	sbci	r21, 0xFF	; 255
   1715c:	61 e0       	ldi	r22, 0x01	; 1
   1715e:	70 e0       	ldi	r23, 0x00	; 0
   17160:	ce 01       	movw	r24, r28
   17162:	08 96       	adiw	r24, 0x08	; 8
   17164:	0e 94 68 8c 	call	0x118d0	; 0x118d0 <gpib_write_str>
   17168:	2e 81       	ldd	r18, Y+6	; 0x06
   1716a:	3f 81       	ldd	r19, Y+7	; 0x07
   1716c:	22 27       	eor	r18, r18
   1716e:	30 7d       	andi	r19, 0xD0	; 208
   17170:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   17174:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   17178:	23 2b       	or	r18, r19
   1717a:	29 f0       	breq	.+10     	; 0x17186 <amigo_cmd_dsj+0x50>
   1717c:	27 81       	ldd	r18, Z+7	; 0x07
   1717e:	30 85       	ldd	r19, Z+8	; 0x08
   17180:	20 62       	ori	r18, 0x20	; 32
   17182:	30 87       	std	Z+8, r19	; 0x08
   17184:	27 83       	std	Z+7, r18	; 0x07
   17186:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1718a:	01 97       	sbiw	r24, 0x01	; 1
   1718c:	c1 f0       	breq	.+48     	; 0x171be <amigo_cmd_dsj+0x88>
   1718e:	81 e0       	ldi	r24, 0x01	; 1
   17190:	86 83       	std	Z+6, r24	; 0x06
   17192:	87 81       	ldd	r24, Z+7	; 0x07
   17194:	90 85       	ldd	r25, Z+8	; 0x08
   17196:	80 62       	ori	r24, 0x20	; 32
   17198:	90 87       	std	Z+8, r25	; 0x08
   1719a:	87 83       	std	Z+7, r24	; 0x07
   1719c:	20 ff       	sbrs	r18, 0
   1719e:	0a c0       	rjmp	.+20     	; 0x171b4 <amigo_cmd_dsj+0x7e>
   171a0:	83 e3       	ldi	r24, 0x33	; 51
   171a2:	9e e2       	ldi	r25, 0x2E	; 46
   171a4:	a0 e0       	ldi	r26, 0x00	; 0
   171a6:	ed b7       	in	r30, 0x3d	; 61
   171a8:	fe b7       	in	r31, 0x3e	; 62
   171aa:	81 83       	std	Z+1, r24	; 0x01
   171ac:	92 83       	std	Z+2, r25	; 0x02
   171ae:	a3 83       	std	Z+3, r26	; 0x03
   171b0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   171b4:	8e 81       	ldd	r24, Y+6	; 0x06
   171b6:	9f 81       	ldd	r25, Y+7	; 0x07
   171b8:	88 27       	eor	r24, r24
   171ba:	90 7d       	andi	r25, 0xD0	; 208
   171bc:	19 c0       	rjmp	.+50     	; 0x171f0 <amigo_cmd_dsj+0xba>
   171be:	25 ff       	sbrs	r18, 5
   171c0:	0e c0       	rjmp	.+28     	; 0x171de <amigo_cmd_dsj+0xa8>
   171c2:	86 81       	ldd	r24, Z+6	; 0x06
   171c4:	90 e0       	ldi	r25, 0x00	; 0
   171c6:	ed b7       	in	r30, 0x3d	; 61
   171c8:	fe b7       	in	r31, 0x3e	; 62
   171ca:	95 83       	std	Z+5, r25	; 0x05
   171cc:	84 83       	std	Z+4, r24	; 0x04
   171ce:	86 e2       	ldi	r24, 0x26	; 38
   171d0:	9e e2       	ldi	r25, 0x2E	; 46
   171d2:	a0 e0       	ldi	r26, 0x00	; 0
   171d4:	81 83       	std	Z+1, r24	; 0x01
   171d6:	92 83       	std	Z+2, r25	; 0x02
   171d8:	a3 83       	std	Z+3, r26	; 0x03
   171da:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   171de:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   171e2:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   171e6:	16 82       	std	Z+6, r1	; 0x06
   171e8:	10 86       	std	Z+8, r1	; 0x08
   171ea:	17 82       	std	Z+7, r1	; 0x07
   171ec:	80 e0       	ldi	r24, 0x00	; 0
   171ee:	90 e0       	ldi	r25, 0x00	; 0
   171f0:	28 96       	adiw	r28, 0x08	; 8
   171f2:	e2 e0       	ldi	r30, 0x02	; 2
   171f4:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

000171f8 <amigo_cmd_clear>:
   171f8:	00 d0       	rcall	.+0      	; 0x171fa <amigo_cmd_clear+0x2>
   171fa:	1f 92       	push	r1
   171fc:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17200:	85 ff       	sbrs	r24, 5
   17202:	0a c0       	rjmp	.+20     	; 0x17218 <amigo_cmd_clear+0x20>
   17204:	87 e1       	ldi	r24, 0x17	; 23
   17206:	9e e2       	ldi	r25, 0x2E	; 46
   17208:	a0 e0       	ldi	r26, 0x00	; 0
   1720a:	ed b7       	in	r30, 0x3d	; 61
   1720c:	fe b7       	in	r31, 0x3e	; 62
   1720e:	81 83       	std	Z+1, r24	; 0x01
   17210:	92 83       	std	Z+2, r25	; 0x02
   17212:	a3 83       	std	Z+3, r26	; 0x03
   17214:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   17218:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   1721c:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   17220:	15 82       	std	Z+5, r1	; 0x05
   17222:	14 82       	std	Z+4, r1	; 0x04
   17224:	13 82       	std	Z+3, r1	; 0x03
   17226:	16 82       	std	Z+6, r1	; 0x06
   17228:	10 86       	std	Z+8, r1	; 0x08
   1722a:	17 82       	std	Z+7, r1	; 0x07
   1722c:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   17230:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   17234:	81 81       	ldd	r24, Z+1	; 0x01
   17236:	90 e0       	ldi	r25, 0x00	; 0
   17238:	0e 94 0e 87 	call	0x10e1c	; 0x10e1c <gpib_enable_PPR>
   1723c:	80 e0       	ldi	r24, 0x00	; 0
   1723e:	90 e0       	ldi	r25, 0x00	; 0
   17240:	0f 90       	pop	r0
   17242:	0f 90       	pop	r0
   17244:	0f 90       	pop	r0
   17246:	08 95       	ret

00017248 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   17248:	af e0       	ldi	r26, 0x0F	; 15
   1724a:	b0 e0       	ldi	r27, 0x00	; 0
   1724c:	ea e2       	ldi	r30, 0x2A	; 42
   1724e:	f9 eb       	ldi	r31, 0xB9	; 185
   17250:	0c 94 92 e4 	jmp	0x1c924	; 0x1c924 <__prologue_saves__+0x18>
   17254:	c8 2f       	mov	r28, r24
   17256:	e6 2e       	mov	r14, r22
   17258:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   1725a:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   1725e:	90 e0       	ldi	r25, 0x00	; 0
   17260:	0e 94 57 8d 	call	0x11aae	; 0x11aae <AMIGO_is_MLA>
   17264:	20 91 86 1e 	lds	r18, 0x1E86	; 0x801e86 <talking>
   17268:	f1 2c       	mov	r15, r1
   1726a:	d0 e0       	ldi	r29, 0x00	; 0
   1726c:	89 2b       	or	r24, r25
   1726e:	f1 f0       	breq	.+60     	; 0x172ac <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17270:	82 2f       	mov	r24, r18
   17272:	90 e0       	ldi	r25, 0x00	; 0
   17274:	ed b7       	in	r30, 0x3d	; 61
   17276:	fe b7       	in	r31, 0x3e	; 62
   17278:	97 87       	std	Z+15, r25	; 0x0f
   1727a:	86 87       	std	Z+14, r24	; 0x0e
   1727c:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17280:	90 e0       	ldi	r25, 0x00	; 0
   17282:	95 87       	std	Z+13, r25	; 0x0d
   17284:	84 87       	std	Z+12, r24	; 0x0c
   17286:	13 87       	std	Z+11, r17	; 0x0b
   17288:	02 87       	std	Z+10, r16	; 0x0a
   1728a:	f1 86       	std	Z+9, r15	; 0x09
   1728c:	e0 86       	std	Z+8, r14	; 0x08
   1728e:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   17292:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   17296:	80 81       	ld	r24, Z
   17298:	90 e0       	ldi	r25, 0x00	; 0
   1729a:	ed b7       	in	r30, 0x3d	; 61
   1729c:	fe b7       	in	r31, 0x3e	; 62
   1729e:	97 83       	std	Z+7, r25	; 0x07
   172a0:	86 83       	std	Z+6, r24	; 0x06
   172a2:	d5 83       	std	Z+5, r29	; 0x05
   172a4:	c4 83       	std	Z+4, r28	; 0x04
   172a6:	80 eb       	ldi	r24, 0xB0	; 176
   172a8:	9d e2       	ldi	r25, 0x2D	; 45
   172aa:	51 c0       	rjmp	.+162    	; 0x1734e <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   172ac:	82 2f       	mov	r24, r18
   172ae:	90 e0       	ldi	r25, 0x00	; 0
   172b0:	0e 94 66 8d 	call	0x11acc	; 0x11acc <AMIGO_is_MTA>
   172b4:	20 91 88 1e 	lds	r18, 0x1E88	; 0x801e88 <listening>
   172b8:	30 91 86 1e 	lds	r19, 0x1E86	; 0x801e86 <talking>
   172bc:	a0 91 01 19 	lds	r26, 0x1901	; 0x801901 <AMIGOs>
   172c0:	b0 91 02 19 	lds	r27, 0x1902	; 0x801902 <AMIGOs+0x1>
   172c4:	89 2b       	or	r24, r25
   172c6:	b1 f0       	breq	.+44     	; 0x172f4 <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   172c8:	83 2f       	mov	r24, r19
   172ca:	90 e0       	ldi	r25, 0x00	; 0
   172cc:	ed b7       	in	r30, 0x3d	; 61
   172ce:	fe b7       	in	r31, 0x3e	; 62
   172d0:	97 87       	std	Z+15, r25	; 0x0f
   172d2:	86 87       	std	Z+14, r24	; 0x0e
   172d4:	30 e0       	ldi	r19, 0x00	; 0
   172d6:	35 87       	std	Z+13, r19	; 0x0d
   172d8:	24 87       	std	Z+12, r18	; 0x0c
   172da:	13 87       	std	Z+11, r17	; 0x0b
   172dc:	02 87       	std	Z+10, r16	; 0x0a
   172de:	f1 86       	std	Z+9, r15	; 0x09
   172e0:	e0 86       	std	Z+8, r14	; 0x08
   172e2:	8c 91       	ld	r24, X
   172e4:	90 e0       	ldi	r25, 0x00	; 0
   172e6:	97 83       	std	Z+7, r25	; 0x07
   172e8:	86 83       	std	Z+6, r24	; 0x06
   172ea:	d5 83       	std	Z+5, r29	; 0x05
   172ec:	c4 83       	std	Z+4, r28	; 0x04
   172ee:	89 e4       	ldi	r24, 0x49	; 73
   172f0:	9d e2       	ldi	r25, 0x2D	; 45
   172f2:	2d c0       	rjmp	.+90     	; 0x1734e <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   172f4:	3f 35       	cpi	r19, 0x5F	; 95
   172f6:	b1 f4       	brne	.+44     	; 0x17324 <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   172f8:	8f e5       	ldi	r24, 0x5F	; 95
   172fa:	90 e0       	ldi	r25, 0x00	; 0
   172fc:	ed b7       	in	r30, 0x3d	; 61
   172fe:	fe b7       	in	r31, 0x3e	; 62
   17300:	97 87       	std	Z+15, r25	; 0x0f
   17302:	86 87       	std	Z+14, r24	; 0x0e
   17304:	30 e0       	ldi	r19, 0x00	; 0
   17306:	35 87       	std	Z+13, r19	; 0x0d
   17308:	24 87       	std	Z+12, r18	; 0x0c
   1730a:	13 87       	std	Z+11, r17	; 0x0b
   1730c:	02 87       	std	Z+10, r16	; 0x0a
   1730e:	f1 86       	std	Z+9, r15	; 0x09
   17310:	e0 86       	std	Z+8, r14	; 0x08
   17312:	8c 91       	ld	r24, X
   17314:	90 e0       	ldi	r25, 0x00	; 0
   17316:	97 83       	std	Z+7, r25	; 0x07
   17318:	86 83       	std	Z+6, r24	; 0x06
   1731a:	d5 83       	std	Z+5, r29	; 0x05
   1731c:	c4 83       	std	Z+4, r28	; 0x04
   1731e:	82 ee       	ldi	r24, 0xE2	; 226
   17320:	9c e2       	ldi	r25, 0x2C	; 44
   17322:	15 c0       	rjmp	.+42     	; 0x1734e <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17324:	83 2f       	mov	r24, r19
   17326:	90 e0       	ldi	r25, 0x00	; 0
   17328:	ed b7       	in	r30, 0x3d	; 61
   1732a:	fe b7       	in	r31, 0x3e	; 62
   1732c:	97 87       	std	Z+15, r25	; 0x0f
   1732e:	86 87       	std	Z+14, r24	; 0x0e
   17330:	30 e0       	ldi	r19, 0x00	; 0
   17332:	35 87       	std	Z+13, r19	; 0x0d
   17334:	24 87       	std	Z+12, r18	; 0x0c
   17336:	13 87       	std	Z+11, r17	; 0x0b
   17338:	02 87       	std	Z+10, r16	; 0x0a
   1733a:	f1 86       	std	Z+9, r15	; 0x09
   1733c:	e0 86       	std	Z+8, r14	; 0x08
   1733e:	8c 91       	ld	r24, X
   17340:	90 e0       	ldi	r25, 0x00	; 0
   17342:	97 83       	std	Z+7, r25	; 0x07
   17344:	86 83       	std	Z+6, r24	; 0x06
   17346:	d5 83       	std	Z+5, r29	; 0x05
   17348:	c4 83       	std	Z+4, r28	; 0x04
   1734a:	8d e7       	ldi	r24, 0x7D	; 125
   1734c:	9c e2       	ldi	r25, 0x2C	; 44
   1734e:	a0 e0       	ldi	r26, 0x00	; 0
   17350:	81 83       	std	Z+1, r24	; 0x01
   17352:	92 83       	std	Z+2, r25	; 0x02
   17354:	a3 83       	std	Z+3, r26	; 0x03
   17356:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1735a:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   1735e:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   17362:	81 81       	ldd	r24, Z+1	; 0x01
   17364:	90 e0       	ldi	r25, 0x00	; 0
   17366:	0e 94 0e 87 	call	0x10e1c	; 0x10e1c <gpib_enable_PPR>
    return(0);
}
   1736a:	80 e0       	ldi	r24, 0x00	; 0
   1736c:	90 e0       	ldi	r25, 0x00	; 0
   1736e:	cd b7       	in	r28, 0x3d	; 61
   17370:	de b7       	in	r29, 0x3e	; 62
   17372:	2f 96       	adiw	r28, 0x0f	; 15
   17374:	e6 e0       	ldi	r30, 0x06	; 6
   17376:	0c 94 ae e4 	jmp	0x1c95c	; 0x1c95c <__epilogue_restores__+0x18>

0001737a <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   1737a:	ab e0       	ldi	r26, 0x0B	; 11
   1737c:	b0 e0       	ldi	r27, 0x00	; 0
   1737e:	e3 ec       	ldi	r30, 0xC3	; 195
   17380:	f9 eb       	ldi	r31, 0xB9	; 185
   17382:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
   17386:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   17388:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   1738c:	90 e0       	ldi	r25, 0x00	; 0
   1738e:	0e 94 57 8d 	call	0x11aae	; 0x11aae <AMIGO_is_MLA>
   17392:	20 91 86 1e 	lds	r18, 0x1E86	; 0x801e86 <talking>
   17396:	d0 e0       	ldi	r29, 0x00	; 0
   17398:	89 2b       	or	r24, r25
   1739a:	d1 f0       	breq	.+52     	; 0x173d0 <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   1739c:	82 2f       	mov	r24, r18
   1739e:	90 e0       	ldi	r25, 0x00	; 0
   173a0:	ed b7       	in	r30, 0x3d	; 61
   173a2:	fe b7       	in	r31, 0x3e	; 62
   173a4:	93 87       	std	Z+11, r25	; 0x0b
   173a6:	82 87       	std	Z+10, r24	; 0x0a
   173a8:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   173ac:	90 e0       	ldi	r25, 0x00	; 0
   173ae:	91 87       	std	Z+9, r25	; 0x09
   173b0:	80 87       	std	Z+8, r24	; 0x08
   173b2:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   173b6:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   173ba:	80 81       	ld	r24, Z
   173bc:	90 e0       	ldi	r25, 0x00	; 0
   173be:	ed b7       	in	r30, 0x3d	; 61
   173c0:	fe b7       	in	r31, 0x3e	; 62
   173c2:	97 83       	std	Z+7, r25	; 0x07
   173c4:	86 83       	std	Z+6, r24	; 0x06
   173c6:	d5 83       	std	Z+5, r29	; 0x05
   173c8:	c4 83       	std	Z+4, r28	; 0x04
   173ca:	8d e2       	ldi	r24, 0x2D	; 45
   173cc:	9c e2       	ldi	r25, 0x2C	; 44
   173ce:	43 c0       	rjmp	.+134    	; 0x17456 <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   173d0:	82 2f       	mov	r24, r18
   173d2:	90 e0       	ldi	r25, 0x00	; 0
   173d4:	0e 94 66 8d 	call	0x11acc	; 0x11acc <AMIGO_is_MTA>
   173d8:	20 91 88 1e 	lds	r18, 0x1E88	; 0x801e88 <listening>
   173dc:	40 91 86 1e 	lds	r20, 0x1E86	; 0x801e86 <talking>
   173e0:	a0 91 01 19 	lds	r26, 0x1901	; 0x801901 <AMIGOs>
   173e4:	b0 91 02 19 	lds	r27, 0x1902	; 0x801902 <AMIGOs+0x1>
   173e8:	89 2b       	or	r24, r25
   173ea:	89 f0       	breq	.+34     	; 0x1740e <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   173ec:	50 e0       	ldi	r21, 0x00	; 0
   173ee:	ed b7       	in	r30, 0x3d	; 61
   173f0:	fe b7       	in	r31, 0x3e	; 62
   173f2:	53 87       	std	Z+11, r21	; 0x0b
   173f4:	42 87       	std	Z+10, r20	; 0x0a
   173f6:	30 e0       	ldi	r19, 0x00	; 0
   173f8:	31 87       	std	Z+9, r19	; 0x09
   173fa:	20 87       	std	Z+8, r18	; 0x08
   173fc:	8c 91       	ld	r24, X
   173fe:	90 e0       	ldi	r25, 0x00	; 0
   17400:	97 83       	std	Z+7, r25	; 0x07
   17402:	86 83       	std	Z+6, r24	; 0x06
   17404:	d5 83       	std	Z+5, r29	; 0x05
   17406:	c4 83       	std	Z+4, r28	; 0x04
   17408:	8d ed       	ldi	r24, 0xDD	; 221
   1740a:	9b e2       	ldi	r25, 0x2B	; 43
   1740c:	24 c0       	rjmp	.+72     	; 0x17456 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   1740e:	4f 35       	cpi	r20, 0x5F	; 95
   17410:	91 f4       	brne	.+36     	; 0x17436 <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17412:	8f e5       	ldi	r24, 0x5F	; 95
   17414:	90 e0       	ldi	r25, 0x00	; 0
   17416:	ed b7       	in	r30, 0x3d	; 61
   17418:	fe b7       	in	r31, 0x3e	; 62
   1741a:	93 87       	std	Z+11, r25	; 0x0b
   1741c:	82 87       	std	Z+10, r24	; 0x0a
   1741e:	30 e0       	ldi	r19, 0x00	; 0
   17420:	31 87       	std	Z+9, r19	; 0x09
   17422:	20 87       	std	Z+8, r18	; 0x08
   17424:	8c 91       	ld	r24, X
   17426:	90 e0       	ldi	r25, 0x00	; 0
   17428:	97 83       	std	Z+7, r25	; 0x07
   1742a:	86 83       	std	Z+6, r24	; 0x06
   1742c:	d5 83       	std	Z+5, r29	; 0x05
   1742e:	c4 83       	std	Z+4, r28	; 0x04
   17430:	8d e8       	ldi	r24, 0x8D	; 141
   17432:	9b e2       	ldi	r25, 0x2B	; 43
   17434:	10 c0       	rjmp	.+32     	; 0x17456 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17436:	50 e0       	ldi	r21, 0x00	; 0
   17438:	ed b7       	in	r30, 0x3d	; 61
   1743a:	fe b7       	in	r31, 0x3e	; 62
   1743c:	53 87       	std	Z+11, r21	; 0x0b
   1743e:	42 87       	std	Z+10, r20	; 0x0a
   17440:	30 e0       	ldi	r19, 0x00	; 0
   17442:	31 87       	std	Z+9, r19	; 0x09
   17444:	20 87       	std	Z+8, r18	; 0x08
   17446:	8c 91       	ld	r24, X
   17448:	90 e0       	ldi	r25, 0x00	; 0
   1744a:	97 83       	std	Z+7, r25	; 0x07
   1744c:	86 83       	std	Z+6, r24	; 0x06
   1744e:	d5 83       	std	Z+5, r29	; 0x05
   17450:	c4 83       	std	Z+4, r28	; 0x04
   17452:	8c e3       	ldi	r24, 0x3C	; 60
   17454:	9b e2       	ldi	r25, 0x2B	; 43
   17456:	a0 e0       	ldi	r26, 0x00	; 0
   17458:	81 83       	std	Z+1, r24	; 0x01
   1745a:	92 83       	std	Z+2, r25	; 0x02
   1745c:	a3 83       	std	Z+3, r26	; 0x03
   1745e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17462:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   17466:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   1746a:	81 81       	ldd	r24, Z+1	; 0x01
   1746c:	90 e0       	ldi	r25, 0x00	; 0
   1746e:	0e 94 0e 87 	call	0x10e1c	; 0x10e1c <gpib_enable_PPR>
    return(0);
}
   17472:	80 e0       	ldi	r24, 0x00	; 0
   17474:	90 e0       	ldi	r25, 0x00	; 0
   17476:	cd b7       	in	r28, 0x3d	; 61
   17478:	de b7       	in	r29, 0x3e	; 62
   1747a:	2b 96       	adiw	r28, 0x0b	; 11
   1747c:	e2 e0       	ldi	r30, 0x02	; 2
   1747e:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

00017482 <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   17482:	8f 30       	cpi	r24, 0x0F	; 15
   17484:	29 f0       	breq	.+10     	; 0x17490 <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   17486:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   1748a:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   1748e:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   17490:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   17494:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   17498:	81 81       	ldd	r24, Z+1	; 0x01
   1749a:	88 23       	and	r24, r24
   1749c:	29 f0       	breq	.+10     	; 0x174a8 <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   1749e:	87 81       	ldd	r24, Z+7	; 0x07
   174a0:	90 85       	ldd	r25, Z+8	; 0x08
   174a2:	80 64       	ori	r24, 0x40	; 64
   174a4:	90 87       	std	Z+8, r25	; 0x08
   174a6:	87 83       	std	Z+7, r24	; 0x07
   174a8:	08 95       	ret

000174aa <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   174aa:	ac e1       	ldi	r26, 0x1C	; 28
   174ac:	b0 e0       	ldi	r27, 0x00	; 0
   174ae:	eb e5       	ldi	r30, 0x5B	; 91
   174b0:	fa eb       	ldi	r31, 0xBA	; 186
   174b2:	0c 94 92 e4 	jmp	0x1c924	; 0x1c924 <__prologue_saves__+0x18>
   174b6:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & 32)
   174b8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   174bc:	85 ff       	sbrs	r24, 5
   174be:	16 c0       	rjmp	.+44     	; 0x174ec <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   174c0:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   174c4:	90 e0       	ldi	r25, 0x00	; 0
   174c6:	ed b7       	in	r30, 0x3d	; 61
   174c8:	fe b7       	in	r31, 0x3e	; 62
   174ca:	91 87       	std	Z+9, r25	; 0x09
   174cc:	80 87       	std	Z+8, r24	; 0x08
   174ce:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   174d2:	90 e0       	ldi	r25, 0x00	; 0
   174d4:	97 83       	std	Z+7, r25	; 0x07
   174d6:	86 83       	std	Z+6, r24	; 0x06
   174d8:	f5 82       	std	Z+5, r15	; 0x05
   174da:	e4 82       	std	Z+4, r14	; 0x04
   174dc:	8a e0       	ldi	r24, 0x0A	; 10
   174de:	9b e2       	ldi	r25, 0x2B	; 43
   174e0:	a0 e0       	ldi	r26, 0x00	; 0
   174e2:	81 83       	std	Z+1, r24	; 0x01
   174e4:	92 83       	std	Z+2, r25	; 0x02
   174e6:	a3 83       	std	Z+3, r26	; 0x03
   174e8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   174ec:	fe e7       	ldi	r31, 0x7E	; 126
   174ee:	ef 16       	cp	r14, r31
   174f0:	f1 04       	cpc	r15, r1
   174f2:	f1 f5       	brne	.+124    	; 0x17570 <Amigo_Command+0xc6>
   174f4:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   174f8:	90 e0       	ldi	r25, 0x00	; 0
   174fa:	0e 94 66 8d 	call	0x11acc	; 0x11acc <AMIGO_is_MTA>
   174fe:	89 2b       	or	r24, r25
   17500:	09 f4       	brne	.+2      	; 0x17504 <Amigo_Command+0x5a>
   17502:	86 c0       	rjmp	.+268    	; 0x17610 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17504:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   17508:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   1750c:	81 81       	ldd	r24, Z+1	; 0x01
   1750e:	90 e0       	ldi	r25, 0x00	; 0
   17510:	0e 94 44 87 	call	0x10e88	; 0x10e88 <gpib_disable_PPR>
        status = EOI_FLAG;
   17514:	80 e0       	ldi	r24, 0x00	; 0
   17516:	91 e0       	ldi	r25, 0x01	; 1
   17518:	9c 8f       	std	Y+28, r25	; 0x1c
   1751a:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   1751c:	ae 01       	movw	r20, r28
   1751e:	45 5e       	subi	r20, 0xE5	; 229
   17520:	5f 4f       	sbci	r21, 0xFF	; 255
   17522:	60 e0       	ldi	r22, 0x00	; 0
   17524:	72 e0       	ldi	r23, 0x02	; 2
   17526:	82 e8       	ldi	r24, 0x82	; 130
   17528:	9c e1       	ldi	r25, 0x1C	; 28
   1752a:	0e 94 68 8c 	call	0x118d0	; 0x118d0 <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1752e:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   17532:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   17536:	81 81       	ldd	r24, Z+1	; 0x01
   17538:	90 e0       	ldi	r25, 0x00	; 0
   1753a:	0e 94 0e 87 	call	0x10e1c	; 0x10e1c <gpib_enable_PPR>
        if(status & ERROR_MASK)
   1753e:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17540:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17542:	88 27       	eor	r24, r24
   17544:	90 7d       	andi	r25, 0xD0	; 208
   17546:	89 2b       	or	r24, r25
   17548:	09 f4       	brne	.+2      	; 0x1754c <Amigo_Command+0xa2>
   1754a:	87 c2       	rjmp	.+1294   	; 0x17a5a <Amigo_Command+0x5b0>
        {
            AMIGOs->dsj = 1;
   1754c:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   17550:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   17554:	81 e0       	ldi	r24, 0x01	; 1
   17556:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   17558:	87 81       	ldd	r24, Z+7	; 0x07
   1755a:	90 85       	ldd	r25, Z+8	; 0x08
   1755c:	80 62       	ori	r24, 0x20	; 32
   1755e:	90 87       	std	Z+8, r25	; 0x08
   17560:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   17562:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17566:	80 ff       	sbrs	r24, 0
   17568:	78 c2       	rjmp	.+1264   	; 0x17a5a <Amigo_Command+0x5b0>
                printf("[AMIGO_Command:GPIB write error]\n");
   1756a:	88 ee       	ldi	r24, 0xE8	; 232
   1756c:	9a e2       	ldi	r25, 0x2A	; 42
   1756e:	8e c0       	rjmp	.+284    	; 0x1768c <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   17570:	ff e7       	ldi	r31, 0x7F	; 127
   17572:	ef 16       	cp	r14, r31
   17574:	f1 04       	cpc	r15, r1
   17576:	09 f0       	breq	.+2      	; 0x1757a <Amigo_Command+0xd0>
   17578:	4b c0       	rjmp	.+150    	; 0x17610 <Amigo_Command+0x166>
   1757a:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   1757e:	90 e0       	ldi	r25, 0x00	; 0
   17580:	0e 94 57 8d 	call	0x11aae	; 0x11aae <AMIGO_is_MLA>
   17584:	89 2b       	or	r24, r25
   17586:	09 f4       	brne	.+2      	; 0x1758a <Amigo_Command+0xe0>
   17588:	43 c0       	rjmp	.+134    	; 0x17610 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1758a:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   1758e:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   17592:	81 81       	ldd	r24, Z+1	; 0x01
   17594:	90 e0       	ldi	r25, 0x00	; 0
   17596:	0e 94 44 87 	call	0x10e88	; 0x10e88 <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & 128)
   1759a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1759e:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   175a0:	0e 94 4c 86 	call	0x10c98	; 0x10c98 <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   175a4:	80 e0       	ldi	r24, 0x00	; 0
   175a6:	91 e0       	ldi	r25, 0x01	; 1
   175a8:	9c 8f       	std	Y+28, r25	; 0x1c
   175aa:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   175ac:	ae 01       	movw	r20, r28
   175ae:	45 5e       	subi	r20, 0xE5	; 229
   175b0:	5f 4f       	sbci	r21, 0xFF	; 255
   175b2:	60 e0       	ldi	r22, 0x00	; 0
   175b4:	72 e0       	ldi	r23, 0x02	; 2
   175b6:	82 e8       	ldi	r24, 0x82	; 130
   175b8:	9c e1       	ldi	r25, 0x1C	; 28
   175ba:	0e 94 c6 8b 	call	0x1178c	; 0x1178c <gpib_read_str>
#if SDEBUG
        if(debuglevel & 128)
   175be:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   175c2:	87 ff       	sbrs	r24, 7
   175c4:	04 c0       	rjmp	.+8      	; 0x175ce <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read str");
   175c6:	82 ef       	ldi	r24, 0xF2	; 242
   175c8:	94 e1       	ldi	r25, 0x14	; 20
   175ca:	0e 94 5e 86 	call	0x10cbc	; 0x10cbc <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   175ce:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   175d2:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   175d6:	81 81       	ldd	r24, Z+1	; 0x01
   175d8:	90 e0       	ldi	r25, 0x00	; 0
   175da:	0e 94 0e 87 	call	0x10e1c	; 0x10e1c <gpib_enable_PPR>
        if(status & ERROR_MASK)
   175de:	8b 8d       	ldd	r24, Y+27	; 0x1b
   175e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
   175e2:	88 27       	eor	r24, r24
   175e4:	90 7d       	andi	r25, 0xD0	; 208
   175e6:	89 2b       	or	r24, r25
   175e8:	09 f4       	brne	.+2      	; 0x175ec <Amigo_Command+0x142>
   175ea:	37 c2       	rjmp	.+1134   	; 0x17a5a <Amigo_Command+0x5b0>
        {
            AMIGOs->dsj = 1;
   175ec:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   175f0:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   175f4:	81 e0       	ldi	r24, 0x01	; 1
   175f6:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   175f8:	87 81       	ldd	r24, Z+7	; 0x07
   175fa:	90 85       	ldd	r25, Z+8	; 0x08
   175fc:	80 62       	ori	r24, 0x20	; 32
   175fe:	90 87       	std	Z+8, r25	; 0x08
   17600:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   17602:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17606:	80 ff       	sbrs	r24, 0
   17608:	28 c2       	rjmp	.+1104   	; 0x17a5a <Amigo_Command+0x5b0>
                printf("[AMIGO Command:GPIB read error]\n");
   1760a:	87 ec       	ldi	r24, 0xC7	; 199
   1760c:	9a e2       	ldi	r25, 0x2A	; 42
   1760e:	3e c0       	rjmp	.+124    	; 0x1768c <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   17610:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17614:	90 e0       	ldi	r25, 0x00	; 0
   17616:	0e 94 57 8d 	call	0x11aae	; 0x11aae <AMIGO_is_MLA>
   1761a:	89 2b       	or	r24, r25
   1761c:	19 f4       	brne	.+6      	; 0x17624 <Amigo_Command+0x17a>
        return(0);
   1761e:	80 e0       	ldi	r24, 0x00	; 0
   17620:	90 e0       	ldi	r25, 0x00	; 0
   17622:	23 c2       	rjmp	.+1094   	; 0x17a6a <Amigo_Command+0x5c0>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   17624:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   17628:	90 e0       	ldi	r25, 0x00	; 0
   1762a:	0e 94 66 8d 	call	0x11acc	; 0x11acc <AMIGO_is_MTA>
   1762e:	89 2b       	or	r24, r25
   17630:	b1 f7       	brne	.-20     	; 0x1761e <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17632:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   17636:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   1763a:	81 81       	ldd	r24, Z+1	; 0x01
   1763c:	90 e0       	ldi	r25, 0x00	; 0
   1763e:	0e 94 44 87 	call	0x10e88	; 0x10e88 <gpib_disable_PPR>


///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   17642:	80 e0       	ldi	r24, 0x00	; 0
   17644:	91 e0       	ldi	r25, 0x01	; 1
   17646:	9c 8f       	std	Y+28, r25	; 0x1c
   17648:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   1764a:	ae 01       	movw	r20, r28
   1764c:	45 5e       	subi	r20, 0xE5	; 229
   1764e:	5f 4f       	sbci	r21, 0xFF	; 255
   17650:	60 e0       	ldi	r22, 0x00	; 0
   17652:	72 e0       	ldi	r23, 0x02	; 2
   17654:	82 e8       	ldi	r24, 0x82	; 130
   17656:	9c e1       	ldi	r25, 0x1C	; 28
   17658:	0e 94 c6 8b 	call	0x1178c	; 0x1178c <gpib_read_str>
   1765c:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   1765e:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17660:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17662:	88 27       	eor	r24, r24
   17664:	90 7d       	andi	r25, 0xD0	; 208
   17666:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1766a:	89 2b       	or	r24, r25
   1766c:	c1 f0       	breq	.+48     	; 0x1769e <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   1766e:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   17672:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   17676:	81 e0       	ldi	r24, 0x01	; 1
   17678:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   1767a:	87 81       	ldd	r24, Z+7	; 0x07
   1767c:	90 85       	ldd	r25, Z+8	; 0x08
   1767e:	80 62       	ori	r24, 0x20	; 32
   17680:	90 87       	std	Z+8, r25	; 0x08
   17682:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & 1)
   17684:	20 ff       	sbrs	r18, 0
   17686:	e9 c1       	rjmp	.+978    	; 0x17a5a <Amigo_Command+0x5b0>
            printf("[AMIGO Command:GPIB read error]\n");
   17688:	86 ea       	ldi	r24, 0xA6	; 166
   1768a:	9a e2       	ldi	r25, 0x2A	; 42
   1768c:	a0 e0       	ldi	r26, 0x00	; 0
   1768e:	ed b7       	in	r30, 0x3d	; 61
   17690:	fe b7       	in	r31, 0x3e	; 62
   17692:	81 83       	std	Z+1, r24	; 0x01
   17694:	92 83       	std	Z+2, r25	; 0x02
   17696:	a3 83       	std	Z+3, r26	; 0x03
   17698:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1769c:	de c1       	rjmp	.+956    	; 0x17a5a <Amigo_Command+0x5b0>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & 32)
   1769e:	25 ff       	sbrs	r18, 5
   176a0:	0e c0       	rjmp	.+28     	; 0x176be <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   176a2:	ed b7       	in	r30, 0x3d	; 61
   176a4:	fe b7       	in	r31, 0x3e	; 62
   176a6:	17 83       	std	Z+7, r17	; 0x07
   176a8:	06 83       	std	Z+6, r16	; 0x06
   176aa:	f5 82       	std	Z+5, r15	; 0x05
   176ac:	e4 82       	std	Z+4, r14	; 0x04
   176ae:	87 e7       	ldi	r24, 0x77	; 119
   176b0:	9a e2       	ldi	r25, 0x2A	; 42
   176b2:	a0 e0       	ldi	r26, 0x00	; 0
   176b4:	81 83       	std	Z+1, r24	; 0x01
   176b6:	92 83       	std	Z+2, r25	; 0x02
   176b8:	a3 83       	std	Z+3, r26	; 0x03
   176ba:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            secondary, len);
#endif
    if(!len)
   176be:	01 15       	cp	r16, r1
   176c0:	11 05       	cpc	r17, r1
   176c2:	61 f4       	brne	.+24     	; 0x176dc <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   176c4:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   176c8:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   176cc:	81 e0       	ldi	r24, 0x01	; 1
   176ce:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   176d0:	87 81       	ldd	r24, Z+7	; 0x07
   176d2:	90 85       	ldd	r25, Z+8	; 0x08
   176d4:	80 62       	ori	r24, 0x20	; 32
   176d6:	90 87       	std	Z+8, r25	; 0x08
   176d8:	87 83       	std	Z+7, r24	; 0x07
   176da:	bf c1       	rjmp	.+894    	; 0x17a5a <Amigo_Command+0x5b0>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   176dc:	60 91 82 1c 	lds	r22, 0x1C82	; 0x801c82 <gpib_iobuff>

    if (secondary == 0x68)
   176e0:	f8 e6       	ldi	r31, 0x68	; 104
   176e2:	ef 16       	cp	r14, r31
   176e4:	f1 04       	cpc	r15, r1
   176e6:	09 f0       	breq	.+2      	; 0x176ea <Amigo_Command+0x240>
   176e8:	28 c1       	rjmp	.+592    	; 0x1793a <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   176ea:	61 11       	cpse	r22, r1
   176ec:	2e c0       	rjmp	.+92     	; 0x1774a <Amigo_Command+0x2a0>
   176ee:	02 30       	cpi	r16, 0x02	; 2
   176f0:	11 05       	cpc	r17, r1
   176f2:	09 f0       	breq	.+2      	; 0x176f6 <Amigo_Command+0x24c>
   176f4:	b7 c1       	rjmp	.+878    	; 0x17a64 <Amigo_Command+0x5ba>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   176f6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   176fa:	85 ff       	sbrs	r24, 5
   176fc:	0a c0       	rjmp	.+20     	; 0x17712 <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   176fe:	87 e5       	ldi	r24, 0x57	; 87
   17700:	9a e2       	ldi	r25, 0x2A	; 42
   17702:	a0 e0       	ldi	r26, 0x00	; 0
   17704:	ed b7       	in	r30, 0x3d	; 61
   17706:	fe b7       	in	r31, 0x3e	; 62
   17708:	81 83       	std	Z+1, r24	; 0x01
   1770a:	92 83       	std	Z+2, r25	; 0x02
   1770c:	a3 83       	std	Z+3, r26	; 0x03
   1770e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#endif
            ///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   17712:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   17716:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   1771a:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   1771c:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   1771e:	10 86       	std	Z+8, r1	; 0x08
   17720:	17 82       	std	Z+7, r1	; 0x07
            /// Fill in temparary address
            tmp.cyl = 0;
   17722:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   17724:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x1>
   17728:	98 2f       	mov	r25, r24
   1772a:	92 95       	swap	r25
   1772c:	96 95       	lsr	r25
   1772e:	96 95       	lsr	r25
   17730:	93 70       	andi	r25, 0x03	; 3
   17732:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   17734:	8f 73       	andi	r24, 0x3F	; 63
   17736:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
            //update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   17738:	ce 01       	movw	r24, r28
   1773a:	0a 96       	adiw	r24, 0x0a	; 10
   1773c:	1a da       	rcall	.-3020   	; 0x16b72 <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   1773e:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   17742:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   17746:	85 e0       	ldi	r24, 0x05	; 5
   17748:	5c c1       	rjmp	.+696    	; 0x17a02 <Amigo_Command+0x558>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   1774a:	62 30       	cpi	r22, 0x02	; 2
   1774c:	09 f0       	breq	.+2      	; 0x17750 <Amigo_Command+0x2a6>
   1774e:	3f c0       	rjmp	.+126    	; 0x177ce <Amigo_Command+0x324>
   17750:	05 30       	cpi	r16, 0x05	; 5
   17752:	11 05       	cpc	r17, r1
   17754:	d1 f4       	brne	.+52     	; 0x1778a <Amigo_Command+0x2e0>
/// @brief 
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   17756:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1775a:	85 ff       	sbrs	r24, 5
   1775c:	0a c0       	rjmp	.+20     	; 0x17772 <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   1775e:	83 e4       	ldi	r24, 0x43	; 67
   17760:	9a e2       	ldi	r25, 0x2A	; 42
   17762:	a0 e0       	ldi	r26, 0x00	; 0
   17764:	ed b7       	in	r30, 0x3d	; 61
   17766:	fe b7       	in	r31, 0x3e	; 62
   17768:	81 83       	std	Z+1, r24	; 0x01
   1776a:	92 83       	std	Z+2, r25	; 0x02
   1776c:	a3 83       	std	Z+3, r26	; 0x03
   1776e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17772:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x1>
   17776:	85 de       	rcall	.-758    	; 0x17482 <amigo_check_unit>

            /// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   17778:	80 91 84 1c 	lds	r24, 0x1C84	; 0x801c84 <gpib_iobuff+0x2>
   1777c:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   1777e:	80 91 85 1c 	lds	r24, 0x1C85	; 0x801c85 <gpib_iobuff+0x3>
   17782:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   17784:	80 91 86 1c 	lds	r24, 0x1C86	; 0x801c86 <gpib_iobuff+0x4>
   17788:	1d c0       	rjmp	.+58     	; 0x177c4 <Amigo_Command+0x31a>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   1778a:	06 30       	cpi	r16, 0x06	; 6
   1778c:	11 05       	cpc	r17, r1
   1778e:	09 f0       	breq	.+2      	; 0x17792 <Amigo_Command+0x2e8>
   17790:	69 c1       	rjmp	.+722    	; 0x17a64 <Amigo_Command+0x5ba>
/// @brief 
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   17792:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17796:	85 ff       	sbrs	r24, 5
   17798:	0a c0       	rjmp	.+20     	; 0x177ae <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   1779a:	8f e2       	ldi	r24, 0x2F	; 47
   1779c:	9a e2       	ldi	r25, 0x2A	; 42
   1779e:	a0 e0       	ldi	r26, 0x00	; 0
   177a0:	ed b7       	in	r30, 0x3d	; 61
   177a2:	fe b7       	in	r31, 0x3e	; 62
   177a4:	81 83       	std	Z+1, r24	; 0x01
   177a6:	92 83       	std	Z+2, r25	; 0x02
   177a8:	a3 83       	std	Z+3, r26	; 0x03
   177aa:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   177ae:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x1>
   177b2:	67 de       	rcall	.-818    	; 0x17482 <amigo_check_unit>
            /// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   177b4:	80 91 85 1c 	lds	r24, 0x1C85	; 0x801c85 <gpib_iobuff+0x3>
   177b8:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   177ba:	80 91 86 1c 	lds	r24, 0x1C86	; 0x801c86 <gpib_iobuff+0x4>
   177be:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   177c0:	80 91 87 1c 	lds	r24, 0x1C87	; 0x801c87 <gpib_iobuff+0x5>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   177c4:	8f 87       	std	Y+15, r24	; 0x0f
   177c6:	ce 01       	movw	r24, r28
   177c8:	0a 96       	adiw	r24, 0x0a	; 10
   177ca:	d3 d9       	rcall	.-3162   	; 0x16b72 <amigo_seek>
   177cc:	1b c1       	rjmp	.+566    	; 0x17a04 <Amigo_Command+0x55a>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   177ce:	63 30       	cpi	r22, 0x03	; 3
   177d0:	e9 f4       	brne	.+58     	; 0x1780c <Amigo_Command+0x362>
   177d2:	02 30       	cpi	r16, 0x02	; 2
   177d4:	11 05       	cpc	r17, r1
   177d6:	09 f0       	breq	.+2      	; 0x177da <Amigo_Command+0x330>
   177d8:	45 c1       	rjmp	.+650    	; 0x17a64 <Amigo_Command+0x5ba>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & 32)
   177da:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   177de:	85 ff       	sbrs	r24, 5
   177e0:	0a c0       	rjmp	.+20     	; 0x177f6 <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   177e2:	86 e0       	ldi	r24, 0x06	; 6
   177e4:	9a e2       	ldi	r25, 0x2A	; 42
   177e6:	a0 e0       	ldi	r26, 0x00	; 0
   177e8:	ed b7       	in	r30, 0x3d	; 61
   177ea:	fe b7       	in	r31, 0x3e	; 62
   177ec:	81 83       	std	Z+1, r24	; 0x01
   177ee:	92 83       	std	Z+2, r25	; 0x02
   177f0:	a3 83       	std	Z+3, r26	; 0x03
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   177f2:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   177f6:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x1>
            amigo_request_status();
   177fa:	43 de       	rcall	.-890    	; 0x17482 <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   177fc:	78 d8       	rcall	.-3856   	; 0x168ee <amigo_request_status>
   177fe:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   17802:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   17806:	83 e0       	ldi	r24, 0x03	; 3
   17808:	80 83       	st	Z, r24
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   1780a:	27 c1       	rjmp	.+590    	; 0x17a5a <Amigo_Command+0x5b0>
   1780c:	65 30       	cpi	r22, 0x05	; 5
   1780e:	d9 f4       	brne	.+54     	; 0x17846 <Amigo_Command+0x39c>
   17810:	02 30       	cpi	r16, 0x02	; 2
   17812:	11 05       	cpc	r17, r1
   17814:	09 f0       	breq	.+2      	; 0x17818 <Amigo_Command+0x36e>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & 32)
   17816:	26 c1       	rjmp	.+588    	; 0x17a64 <Amigo_Command+0x5ba>
   17818:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1781c:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Read Unbuffered Command]\n");
   1781e:	0a c0       	rjmp	.+20     	; 0x17834 <Amigo_Command+0x38a>
   17820:	85 ee       	ldi	r24, 0xE5	; 229
   17822:	99 e2       	ldi	r25, 0x29	; 41
   17824:	a0 e0       	ldi	r26, 0x00	; 0
   17826:	ed b7       	in	r30, 0x3d	; 61
   17828:	fe b7       	in	r31, 0x3e	; 62
   1782a:	81 83       	std	Z+1, r24	; 0x01
   1782c:	92 83       	std	Z+2, r25	; 0x02
   1782e:	a3 83       	std	Z+3, r26	; 0x03
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17830:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   17834:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   17838:	24 de       	rcall	.-952    	; 0x17482 <amigo_check_unit>
   1783a:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   1783e:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   17842:	86 e0       	ldi	r24, 0x06	; 6
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x07 && len == 4)
   17844:	de c0       	rjmp	.+444    	; 0x17a02 <Amigo_Command+0x558>
   17846:	67 30       	cpi	r22, 0x07	; 7
   17848:	f9 f4       	brne	.+62     	; 0x17888 <Amigo_Command+0x3de>
   1784a:	04 30       	cpi	r16, 0x04	; 4
   1784c:	11 05       	cpc	r17, r1
   1784e:	09 f0       	breq	.+2      	; 0x17852 <Amigo_Command+0x3a8>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & 32)
   17850:	09 c1       	rjmp	.+530    	; 0x17a64 <Amigo_Command+0x5ba>
   17852:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17856:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Verify]\n");
   17858:	0a c0       	rjmp	.+20     	; 0x1786e <Amigo_Command+0x3c4>
   1785a:	85 ed       	ldi	r24, 0xD5	; 213
   1785c:	99 e2       	ldi	r25, 0x29	; 41
   1785e:	a0 e0       	ldi	r26, 0x00	; 0
   17860:	ed b7       	in	r30, 0x3d	; 61
   17862:	fe b7       	in	r31, 0x3e	; 62
   17864:	81 83       	std	Z+1, r24	; 0x01
   17866:	92 83       	std	Z+2, r25	; 0x02
   17868:	a3 83       	std	Z+3, r26	; 0x03
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1786a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1786e:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x1>
            sectors = (0xff & *ptr++) << 8;
   17872:	07 de       	rcall	.-1010   	; 0x17482 <amigo_check_unit>
   17874:	80 91 84 1c 	lds	r24, 0x1C84	; 0x801c84 <gpib_iobuff+0x2>
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   17878:	90 e0       	ldi	r25, 0x00	; 0
   1787a:	98 2f       	mov	r25, r24
   1787c:	88 27       	eor	r24, r24
   1787e:	20 91 85 1c 	lds	r18, 0x1C85	; 0x801c85 <gpib_iobuff+0x3>
   17882:	82 2b       	or	r24, r18
        }
        else if(op == 0x08 && len == 2)
   17884:	a1 d9       	rcall	.-3262   	; 0x16bc8 <amigo_verify>
   17886:	f1 c0       	rjmp	.+482    	; 0x17a6a <Amigo_Command+0x5c0>
   17888:	68 30       	cpi	r22, 0x08	; 8
   1788a:	d9 f4       	brne	.+54     	; 0x178c2 <Amigo_Command+0x418>
   1788c:	02 30       	cpi	r16, 0x02	; 2
   1788e:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17890:	09 f0       	breq	.+2      	; 0x17894 <Amigo_Command+0x3ea>
   17892:	e8 c0       	rjmp	.+464    	; 0x17a64 <Amigo_Command+0x5ba>
   17894:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Write Unbuffered Command]\n");
   17898:	85 ff       	sbrs	r24, 5
   1789a:	0a c0       	rjmp	.+20     	; 0x178b0 <Amigo_Command+0x406>
   1789c:	83 eb       	ldi	r24, 0xB3	; 179
   1789e:	99 e2       	ldi	r25, 0x29	; 41
   178a0:	a0 e0       	ldi	r26, 0x00	; 0
   178a2:	ed b7       	in	r30, 0x3d	; 61
   178a4:	fe b7       	in	r31, 0x3e	; 62
   178a6:	81 83       	std	Z+1, r24	; 0x01
   178a8:	92 83       	std	Z+2, r25	; 0x02
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   178aa:	a3 83       	std	Z+3, r26	; 0x03
   178ac:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   178b0:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   178b4:	e6 dd       	rcall	.-1076   	; 0x17482 <amigo_check_unit>
   178b6:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   178ba:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   178be:	88 e0       	ldi	r24, 0x08	; 8
   178c0:	a0 c0       	rjmp	.+320    	; 0x17a02 <Amigo_Command+0x558>
   178c2:	86 2f       	mov	r24, r22
   178c4:	8f 7d       	andi	r24, 0xDF	; 223
   178c6:	8b 30       	cpi	r24, 0x0B	; 11
   178c8:	d9 f4       	brne	.+54     	; 0x17900 <Amigo_Command+0x456>
   178ca:	02 30       	cpi	r16, 0x02	; 2
   178cc:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   178ce:	09 f0       	breq	.+2      	; 0x178d2 <Amigo_Command+0x428>
   178d0:	c9 c0       	rjmp	.+402    	; 0x17a64 <Amigo_Command+0x5ba>
   178d2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Initialize Command]\n");
   178d6:	85 ff       	sbrs	r24, 5
   178d8:	0a c0       	rjmp	.+20     	; 0x178ee <Amigo_Command+0x444>
   178da:	87 e9       	ldi	r24, 0x97	; 151
   178dc:	99 e2       	ldi	r25, 0x29	; 41
   178de:	a0 e0       	ldi	r26, 0x00	; 0
   178e0:	ed b7       	in	r30, 0x3d	; 61
   178e2:	fe b7       	in	r31, 0x3e	; 62
   178e4:	81 83       	std	Z+1, r24	; 0x01
   178e6:	92 83       	std	Z+2, r25	; 0x02
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   178e8:	a3 83       	std	Z+3, r26	; 0x03
   178ea:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   178ee:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_INITIALIZE;
   178f2:	c7 dd       	rcall	.-1138   	; 0x17482 <amigo_check_unit>
   178f4:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   178f8:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   178fc:	8a e0       	ldi	r24, 0x0A	; 10
   178fe:	81 c0       	rjmp	.+258    	; 0x17a02 <Amigo_Command+0x558>
   17900:	64 31       	cpi	r22, 0x14	; 20
   17902:	09 f0       	breq	.+2      	; 0x17906 <Amigo_Command+0x45c>
   17904:	af c0       	rjmp	.+350    	; 0x17a64 <Amigo_Command+0x5ba>
   17906:	02 30       	cpi	r16, 0x02	; 2
   17908:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   1790a:	09 f0       	breq	.+2      	; 0x1790e <Amigo_Command+0x464>
   1790c:	ab c0       	rjmp	.+342    	; 0x17a64 <Amigo_Command+0x5ba>
   1790e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Request Logical Address Command]\n");
   17912:	85 ff       	sbrs	r24, 5
   17914:	0a c0       	rjmp	.+20     	; 0x1792a <Amigo_Command+0x480>
   17916:	8e e6       	ldi	r24, 0x6E	; 110
   17918:	99 e2       	ldi	r25, 0x29	; 41
   1791a:	a0 e0       	ldi	r26, 0x00	; 0
   1791c:	ed b7       	in	r30, 0x3d	; 61
   1791e:	fe b7       	in	r31, 0x3e	; 62
   17920:	81 83       	std	Z+1, r24	; 0x01
   17922:	92 83       	std	Z+2, r25	; 0x02
   17924:	a3 83       	std	Z+3, r26	; 0x03
#endif
            amigo_request_logical_address();
   17926:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   1792a:	0e 94 69 b4 	call	0x168d2	; 0x168d2 <amigo_request_logical_address>
   1792e:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   17932:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   17936:	84 e0       	ldi	r24, 0x04	; 4
   17938:	64 c0       	rjmp	.+200    	; 0x17a02 <Amigo_Command+0x558>
   1793a:	f9 e6       	ldi	r31, 0x69	; 105
   1793c:	ef 16       	cp	r14, r31
    {
        if(op == 0x08 && len == 2)
   1793e:	f1 04       	cpc	r15, r1
   17940:	f1 f4       	brne	.+60     	; 0x1797e <Amigo_Command+0x4d4>
   17942:	68 30       	cpi	r22, 0x08	; 8
   17944:	09 f0       	breq	.+2      	; 0x17948 <Amigo_Command+0x49e>
   17946:	8e c0       	rjmp	.+284    	; 0x17a64 <Amigo_Command+0x5ba>
   17948:	02 30       	cpi	r16, 0x02	; 2
   1794a:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   1794c:	09 f0       	breq	.+2      	; 0x17950 <Amigo_Command+0x4a6>
   1794e:	8a c0       	rjmp	.+276    	; 0x17a64 <Amigo_Command+0x5ba>
   17950:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Write Buffered Command]\n");
   17954:	85 ff       	sbrs	r24, 5
   17956:	0a c0       	rjmp	.+20     	; 0x1796c <Amigo_Command+0x4c2>
   17958:	8e e4       	ldi	r24, 0x4E	; 78
   1795a:	99 e2       	ldi	r25, 0x29	; 41
   1795c:	a0 e0       	ldi	r26, 0x00	; 0
   1795e:	ed b7       	in	r30, 0x3d	; 61
   17960:	fe b7       	in	r31, 0x3e	; 62
   17962:	81 83       	std	Z+1, r24	; 0x01
   17964:	92 83       	std	Z+2, r25	; 0x02
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17966:	a3 83       	std	Z+3, r26	; 0x03
   17968:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1796c:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   17970:	88 dd       	rcall	.-1264   	; 0x17482 <amigo_check_unit>
   17972:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   17976:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   1797a:	89 e0       	ldi	r24, 0x09	; 9
   1797c:	42 c0       	rjmp	.+132    	; 0x17a02 <Amigo_Command+0x558>
   1797e:	fa e6       	ldi	r31, 0x6A	; 106
   17980:	ef 16       	cp	r14, r31
   17982:	f1 04       	cpc	r15, r1
    {
        if(op == 0x08 && len == 2)
   17984:	09 f0       	breq	.+2      	; 0x17988 <Amigo_Command+0x4de>
   17986:	47 c0       	rjmp	.+142    	; 0x17a16 <Amigo_Command+0x56c>
   17988:	68 30       	cpi	r22, 0x08	; 8
   1798a:	f1 f4       	brne	.+60     	; 0x179c8 <Amigo_Command+0x51e>
   1798c:	02 30       	cpi	r16, 0x02	; 2
   1798e:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   17990:	09 f0       	breq	.+2      	; 0x17994 <Amigo_Command+0x4ea>
   17992:	68 c0       	rjmp	.+208    	; 0x17a64 <Amigo_Command+0x5ba>
   17994:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   17998:	85 ff       	sbrs	r24, 5
   1799a:	0a c0       	rjmp	.+20     	; 0x179b0 <Amigo_Command+0x506>
   1799c:	83 e2       	ldi	r24, 0x23	; 35
   1799e:	99 e2       	ldi	r25, 0x29	; 41
   179a0:	a0 e0       	ldi	r26, 0x00	; 0
   179a2:	ed b7       	in	r30, 0x3d	; 61
   179a4:	fe b7       	in	r31, 0x3e	; 62
   179a6:	81 83       	std	Z+1, r24	; 0x01
   179a8:	92 83       	std	Z+2, r25	; 0x02
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   179aa:	a3 83       	std	Z+3, r26	; 0x03
   179ac:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   179b0:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   179b4:	66 dd       	rcall	.-1332   	; 0x17482 <amigo_check_unit>
   179b6:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   179ba:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
            amigo_request_status();
   179be:	82 e0       	ldi	r24, 0x02	; 2
   179c0:	80 83       	st	Z, r24
   179c2:	0e 94 77 b4 	call	0x168ee	; 0x168ee <amigo_request_status>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   179c6:	49 c0       	rjmp	.+146    	; 0x17a5a <Amigo_Command+0x5b0>
   179c8:	65 30       	cpi	r22, 0x05	; 5
   179ca:	09 f0       	breq	.+2      	; 0x179ce <Amigo_Command+0x524>
   179cc:	4b c0       	rjmp	.+150    	; 0x17a64 <Amigo_Command+0x5ba>
   179ce:	02 30       	cpi	r16, 0x02	; 2
   179d0:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   179d2:	09 f0       	breq	.+2      	; 0x179d6 <Amigo_Command+0x52c>
   179d4:	47 c0       	rjmp	.+142    	; 0x17a64 <Amigo_Command+0x5ba>
   179d6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Read Buffered Command]\n");
   179da:	85 ff       	sbrs	r24, 5
   179dc:	0a c0       	rjmp	.+20     	; 0x179f2 <Amigo_Command+0x548>
   179de:	84 e0       	ldi	r24, 0x04	; 4
   179e0:	99 e2       	ldi	r25, 0x29	; 41
   179e2:	a0 e0       	ldi	r26, 0x00	; 0
   179e4:	ed b7       	in	r30, 0x3d	; 61
   179e6:	fe b7       	in	r31, 0x3e	; 62
   179e8:	81 83       	std	Z+1, r24	; 0x01
   179ea:	92 83       	std	Z+2, r25	; 0x02
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   179ec:	a3 83       	std	Z+3, r26	; 0x03
   179ee:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   179f2:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   179f6:	45 dd       	rcall	.-1398   	; 0x17482 <amigo_check_unit>
   179f8:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   179fc:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17a00:	87 e0       	ldi	r24, 0x07	; 7
   17a02:	80 83       	st	Z, r24
   17a04:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   17a08:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   17a0c:	81 81       	ldd	r24, Z+1	; 0x01
   17a0e:	90 e0       	ldi	r25, 0x00	; 0
   17a10:	0e 94 0e 87 	call	0x10e1c	; 0x10e1c <gpib_enable_PPR>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6C)
   17a14:	22 c0       	rjmp	.+68     	; 0x17a5a <Amigo_Command+0x5b0>
   17a16:	fc e6       	ldi	r31, 0x6C	; 108
   17a18:	ef 16       	cp	r14, r31
    {
        if(op == 0x18 && len == 5)
   17a1a:	f1 04       	cpc	r15, r1
   17a1c:	d1 f4       	brne	.+52     	; 0x17a52 <Amigo_Command+0x5a8>
   17a1e:	68 31       	cpi	r22, 0x18	; 24
   17a20:	09 f5       	brne	.+66     	; 0x17a64 <Amigo_Command+0x5ba>
   17a22:	05 30       	cpi	r16, 0x05	; 5
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & 32)
   17a24:	11 05       	cpc	r17, r1
   17a26:	f1 f4       	brne	.+60     	; 0x17a64 <Amigo_Command+0x5ba>
   17a28:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
                printf("[AMIGO Format]\n");
   17a2c:	85 ff       	sbrs	r24, 5
   17a2e:	0a c0       	rjmp	.+20     	; 0x17a44 <Amigo_Command+0x59a>
   17a30:	84 ef       	ldi	r24, 0xF4	; 244
   17a32:	98 e2       	ldi	r25, 0x28	; 40
   17a34:	a0 e0       	ldi	r26, 0x00	; 0
   17a36:	ed b7       	in	r30, 0x3d	; 61
   17a38:	fe b7       	in	r31, 0x3e	; 62
   17a3a:	81 83       	std	Z+1, r24	; 0x01
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17a3c:	92 83       	std	Z+2, r25	; 0x02
   17a3e:	a3 83       	std	Z+3, r26	; 0x03
   17a40:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            ++ptr; // override not used
            ++ptr; // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   17a44:	80 91 83 1c 	lds	r24, 0x1C83	; 0x801c83 <gpib_iobuff+0x1>
   17a48:	1c dd       	rcall	.-1480   	; 0x17482 <amigo_check_unit>
   17a4a:	80 91 86 1c 	lds	r24, 0x1C86	; 0x801c86 <gpib_iobuff+0x4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   17a4e:	58 d9       	rcall	.-3408   	; 0x16d00 <amigo_format>
   17a50:	04 c0       	rjmp	.+8      	; 0x17a5a <Amigo_Command+0x5b0>
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   17a52:	f0 e7       	ldi	r31, 0x70	; 112
   17a54:	ef 16       	cp	r14, r31
   17a56:	f1 04       	cpc	r15, r1
   17a58:	29 f4       	brne	.+10     	; 0x17a64 <Amigo_Command+0x5ba>
   17a5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    }
    return ( amigo_todo_op(secondary, op, len) );
   17a5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17a5e:	88 27       	eor	r24, r24
   17a60:	90 7d       	andi	r25, 0xD0	; 208
   17a62:	03 c0       	rjmp	.+6      	; 0x17a6a <Amigo_Command+0x5c0>
}
   17a64:	a8 01       	movw	r20, r16
   17a66:	8e 2d       	mov	r24, r14
   17a68:	ef db       	rcall	.-2082   	; 0x17248 <amigo_todo_op>
   17a6a:	6c 96       	adiw	r28, 0x1c	; 28
   17a6c:	e6 e0       	ldi	r30, 0x06	; 6
   17a6e:	0c 94 ae e4 	jmp	0x1c95c	; 0x1c95c <__epilogue_restores__+0x18>

00017a72 <Amigo_Execute>:
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)


int Amigo_Execute( int secondary )
{
   17a72:	a9 e0       	ldi	r26, 0x09	; 9
   17a74:	b0 e0       	ldi	r27, 0x00	; 0
   17a76:	ef e3       	ldi	r30, 0x3F	; 63
   17a78:	fd eb       	ldi	r31, 0xBD	; 189
   17a7a:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
   17a7e:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & 32)
   17a80:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17a84:	85 ff       	sbrs	r24, 5
   17a86:	16 c0       	rjmp	.+44     	; 0x17ab4 <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   17a88:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   17a8c:	90 e0       	ldi	r25, 0x00	; 0
   17a8e:	ed b7       	in	r30, 0x3d	; 61
   17a90:	fe b7       	in	r31, 0x3e	; 62
   17a92:	91 87       	std	Z+9, r25	; 0x09
   17a94:	80 87       	std	Z+8, r24	; 0x08
   17a96:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17a9a:	90 e0       	ldi	r25, 0x00	; 0
   17a9c:	97 83       	std	Z+7, r25	; 0x07
   17a9e:	86 83       	std	Z+6, r24	; 0x06
   17aa0:	d5 83       	std	Z+5, r29	; 0x05
   17aa2:	c4 83       	std	Z+4, r28	; 0x04
   17aa4:	82 ec       	ldi	r24, 0xC2	; 194
   17aa6:	98 e2       	ldi	r25, 0x28	; 40
   17aa8:	a0 e0       	ldi	r26, 0x00	; 0
   17aaa:	81 83       	std	Z+1, r24	; 0x01
   17aac:	92 83       	std	Z+2, r25	; 0x02
   17aae:	a3 83       	std	Z+3, r26	; 0x03
   17ab0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   17ab4:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   17ab8:	8f 35       	cpi	r24, 0x5F	; 95
   17aba:	09 f4       	brne	.+2      	; 0x17abe <Amigo_Execute+0x4c>
   17abc:	ad c0       	rjmp	.+346    	; 0x17c18 <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17abe:	90 e0       	ldi	r25, 0x00	; 0
   17ac0:	0e 94 66 8d 	call	0x11acc	; 0x11acc <AMIGO_is_MTA>
   17ac4:	89 2b       	or	r24, r25
   17ac6:	39 f0       	breq	.+14     	; 0x17ad6 <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   17ac8:	ce 01       	movw	r24, r28
   17aca:	87 7f       	andi	r24, 0xF7	; 247
   17acc:	80 36       	cpi	r24, 0x60	; 96
   17ace:	91 05       	cpc	r25, r1
   17ad0:	09 f0       	breq	.+2      	; 0x17ad4 <Amigo_Execute+0x62>
   17ad2:	a2 c0       	rjmp	.+324    	; 0x17c18 <Amigo_Execute+0x1a6>
   17ad4:	08 c0       	rjmp	.+16     	; 0x17ae6 <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17ad6:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17ada:	90 e0       	ldi	r25, 0x00	; 0
   17adc:	0e 94 57 8d 	call	0x11aae	; 0x11aae <AMIGO_is_MLA>
   17ae0:	89 2b       	or	r24, r25
   17ae2:	91 f7       	brne	.-28     	; 0x17ac8 <Amigo_Execute+0x56>
   17ae4:	99 c0       	rjmp	.+306    	; 0x17c18 <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17ae6:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   17aea:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   17aee:	81 81       	ldd	r24, Z+1	; 0x01
   17af0:	90 e0       	ldi	r25, 0x00	; 0
   17af2:	0e 94 44 87 	call	0x10e88	; 0x10e88 <gpib_disable_PPR>

    if(secondary == 0x60)
   17af6:	c0 36       	cpi	r28, 0x60	; 96
   17af8:	d1 05       	cpc	r29, r1
   17afa:	09 f0       	breq	.+2      	; 0x17afe <Amigo_Execute+0x8c>
   17afc:	4e c0       	rjmp	.+156    	; 0x17b9a <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   17afe:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   17b02:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   17b06:	e0 81       	ld	r30, Z
   17b08:	8e 2f       	mov	r24, r30
   17b0a:	90 e0       	ldi	r25, 0x00	; 0
   17b0c:	8b 30       	cpi	r24, 0x0B	; 11
   17b0e:	91 05       	cpc	r25, r1
   17b10:	08 f0       	brcs	.+2      	; 0x17b14 <Amigo_Execute+0xa2>
   17b12:	41 c0       	rjmp	.+130    	; 0x17b96 <Amigo_Execute+0x124>
   17b14:	fc 01       	movw	r30, r24
   17b16:	e0 52       	subi	r30, 0x20	; 32
   17b18:	ff 4f       	sbci	r31, 0xFF	; 255
   17b1a:	0c 94 42 e4 	jmp	0x1c884	; 0x1c884 <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & 32)
   17b1e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17b22:	85 ff       	sbrs	r24, 5
   17b24:	18 c0       	rjmp	.+48     	; 0x17b56 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   17b26:	82 ea       	ldi	r24, 0xA2	; 162
   17b28:	98 e2       	ldi	r25, 0x28	; 40
   17b2a:	0d c0       	rjmp	.+26     	; 0x17b46 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17b2c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17b30:	85 ff       	sbrs	r24, 5
   17b32:	11 c0       	rjmp	.+34     	; 0x17b56 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   17b34:	81 e8       	ldi	r24, 0x81	; 129
   17b36:	98 e2       	ldi	r25, 0x28	; 40
   17b38:	06 c0       	rjmp	.+12     	; 0x17b46 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17b3a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17b3e:	85 ff       	sbrs	r24, 5
   17b40:	0a c0       	rjmp	.+20     	; 0x17b56 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   17b42:	82 e6       	ldi	r24, 0x62	; 98
   17b44:	98 e2       	ldi	r25, 0x28	; 40
   17b46:	a0 e0       	ldi	r26, 0x00	; 0
   17b48:	ed b7       	in	r30, 0x3d	; 61
   17b4a:	fe b7       	in	r31, 0x3e	; 62
   17b4c:	81 83       	std	Z+1, r24	; 0x01
   17b4e:	92 83       	std	Z+2, r25	; 0x02
   17b50:	a3 83       	std	Z+3, r26	; 0x03
   17b52:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#endif
                return ( amigo_buffered_read() );
   17b56:	69 d9       	rcall	.-3374   	; 0x16e2a <amigo_buffered_read>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17b58:	61 c0       	rjmp	.+194    	; 0x17c1c <Amigo_Execute+0x1aa>
   17b5a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17b5e:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Unbuffered]\n");
   17b60:	18 c0       	rjmp	.+48     	; 0x17b92 <Amigo_Execute+0x120>
   17b62:	80 e4       	ldi	r24, 0x40	; 64
   17b64:	98 e2       	ldi	r25, 0x28	; 40
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & 32)
   17b66:	0d c0       	rjmp	.+26     	; 0x17b82 <Amigo_Execute+0x110>
   17b68:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17b6c:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Initialize]\n");
   17b6e:	11 c0       	rjmp	.+34     	; 0x17b92 <Amigo_Execute+0x120>
   17b70:	84 e2       	ldi	r24, 0x24	; 36
   17b72:	98 e2       	ldi	r25, 0x28	; 40
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17b74:	06 c0       	rjmp	.+12     	; 0x17b82 <Amigo_Execute+0x110>
   17b76:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17b7a:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Buffered]\n");
   17b7c:	0a c0       	rjmp	.+20     	; 0x17b92 <Amigo_Execute+0x120>
   17b7e:	84 e0       	ldi	r24, 0x04	; 4
   17b80:	98 e2       	ldi	r25, 0x28	; 40
   17b82:	a0 e0       	ldi	r26, 0x00	; 0
   17b84:	ed b7       	in	r30, 0x3d	; 61
   17b86:	fe b7       	in	r31, 0x3e	; 62
   17b88:	81 83       	std	Z+1, r24	; 0x01
   17b8a:	92 83       	std	Z+2, r25	; 0x02
   17b8c:	a3 83       	std	Z+3, r26	; 0x03
#endif
                return ( amigo_buffered_write() );
   17b8e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   17b92:	14 da       	rcall	.-3032   	; 0x16fbc <amigo_buffered_write>
            default:
                return ( amigo_todo(secondary) );
   17b94:	43 c0       	rjmp	.+134    	; 0x17c1c <Amigo_Execute+0x1aa>
   17b96:	80 e6       	ldi	r24, 0x60	; 96
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   17b98:	3d c0       	rjmp	.+122    	; 0x17c14 <Amigo_Execute+0x1a2>
   17b9a:	c8 36       	cpi	r28, 0x68	; 104
   17b9c:	d1 05       	cpc	r29, r1
    {
        switch(AMIGOs->state)
   17b9e:	e1 f5       	brne	.+120    	; 0x17c18 <Amigo_Execute+0x1a6>
   17ba0:	e0 91 01 19 	lds	r30, 0x1901	; 0x801901 <AMIGOs>
   17ba4:	f0 91 02 19 	lds	r31, 0x1902	; 0x801902 <AMIGOs+0x1>
   17ba8:	80 81       	ld	r24, Z
   17baa:	82 30       	cpi	r24, 0x02	; 2
   17bac:	81 f0       	breq	.+32     	; 0x17bce <Amigo_Execute+0x15c>
   17bae:	18 f4       	brcc	.+6      	; 0x17bb6 <Amigo_Execute+0x144>
   17bb0:	88 23       	and	r24, r24
   17bb2:	91 f1       	breq	.+100    	; 0x17c18 <Amigo_Execute+0x1a6>
   17bb4:	2e c0       	rjmp	.+92     	; 0x17c12 <Amigo_Execute+0x1a0>
   17bb6:	83 30       	cpi	r24, 0x03	; 3
   17bb8:	19 f0       	breq	.+6      	; 0x17bc0 <Amigo_Execute+0x14e>
   17bba:	84 30       	cpi	r24, 0x04	; 4
   17bbc:	c9 f0       	breq	.+50     	; 0x17bf0 <Amigo_Execute+0x17e>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17bbe:	29 c0       	rjmp	.+82     	; 0x17c12 <Amigo_Execute+0x1a0>
   17bc0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17bc4:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Status Buffered]\n");
   17bc6:	11 c0       	rjmp	.+34     	; 0x17bea <Amigo_Execute+0x178>
   17bc8:	8b ed       	ldi	r24, 0xDB	; 219
   17bca:	97 e2       	ldi	r25, 0x27	; 39
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   17bcc:	06 c0       	rjmp	.+12     	; 0x17bda <Amigo_Execute+0x168>
   17bce:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17bd2:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   17bd4:	0a c0       	rjmp	.+20     	; 0x17bea <Amigo_Execute+0x178>
   17bd6:	80 eb       	ldi	r24, 0xB0	; 176
   17bd8:	97 e2       	ldi	r25, 0x27	; 39
   17bda:	a0 e0       	ldi	r26, 0x00	; 0
   17bdc:	ed b7       	in	r30, 0x3d	; 61
   17bde:	fe b7       	in	r31, 0x3e	; 62
   17be0:	81 83       	std	Z+1, r24	; 0x01
   17be2:	92 83       	std	Z+2, r25	; 0x02
   17be4:	a3 83       	std	Z+3, r26	; 0x03
   17be6:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#endif
                return ( amigo_send_status() );
   17bea:	0e 94 32 b5 	call	0x16a64	; 0x16a64 <amigo_send_status>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & 32)
   17bee:	16 c0       	rjmp	.+44     	; 0x17c1c <Amigo_Execute+0x1aa>
   17bf0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17bf4:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Logical Address]\n");
   17bf6:	0a c0       	rjmp	.+20     	; 0x17c0c <Amigo_Execute+0x19a>
   17bf8:	87 e8       	ldi	r24, 0x87	; 135
   17bfa:	97 e2       	ldi	r25, 0x27	; 39
   17bfc:	a0 e0       	ldi	r26, 0x00	; 0
   17bfe:	ed b7       	in	r30, 0x3d	; 61
   17c00:	fe b7       	in	r31, 0x3e	; 62
   17c02:	81 83       	std	Z+1, r24	; 0x01
   17c04:	92 83       	std	Z+2, r25	; 0x02
   17c06:	a3 83       	std	Z+3, r26	; 0x03
   17c08:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#endif
                return ( amigo_send_logical_address() );
   17c0c:	0e 94 d4 b4 	call	0x169a8	; 0x169a8 <amigo_send_logical_address>
            default:
                return ( amigo_todo(secondary) );
   17c10:	05 c0       	rjmp	.+10     	; 0x17c1c <Amigo_Execute+0x1aa>
   17c12:	88 e6       	ldi	r24, 0x68	; 104
   17c14:	b2 db       	rcall	.-2204   	; 0x1737a <amigo_todo>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   17c16:	02 c0       	rjmp	.+4      	; 0x17c1c <Amigo_Execute+0x1aa>
   17c18:	80 e0       	ldi	r24, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   17c1a:	90 e0       	ldi	r25, 0x00	; 0
   17c1c:	cd b7       	in	r28, 0x3d	; 61
   17c1e:	de b7       	in	r29, 0x3e	; 62
   17c20:	29 96       	adiw	r28, 0x09	; 9
   17c22:	e2 e0       	ldi	r30, 0x02	; 2
   17c24:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

00017c28 <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   17c28:	cf 93       	push	r28
   17c2a:	df 93       	push	r29
   17c2c:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17c2e:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   17c32:	90 e0       	ldi	r25, 0x00	; 0
   17c34:	0e 94 66 8d 	call	0x11acc	; 0x11acc <AMIGO_is_MTA>
   17c38:	89 2b       	or	r24, r25
   17c3a:	51 f0       	breq	.+20     	; 0x17c50 <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   17c3c:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   17c40:	8f 35       	cpi	r24, 0x5F	; 95
   17c42:	71 f4       	brne	.+28     	; 0x17c60 <AMIGO_COMMANDS+0x38>
   17c44:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17c48:	90 e0       	ldi	r25, 0x00	; 0
   17c4a:	0e 94 57 8d 	call	0x11aae	; 0x11aae <AMIGO_is_MLA>
   17c4e:	08 c0       	rjmp	.+16     	; 0x17c60 <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17c50:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17c54:	90 e0       	ldi	r25, 0x00	; 0
   17c56:	0e 94 57 8d 	call	0x11aae	; 0x11aae <AMIGO_is_MLA>
   17c5a:	89 2b       	or	r24, r25
   17c5c:	79 f7       	brne	.-34     	; 0x17c3c <AMIGO_COMMANDS+0x14>
   17c5e:	76 c0       	rjmp	.+236    	; 0x17d4c <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
            // printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   17c60:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17c64:	81 11       	cpse	r24, r1
   17c66:	05 c0       	rjmp	.+10     	; 0x17c72 <AMIGO_COMMANDS+0x4a>
   17c68:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   17c6c:	90 e0       	ldi	r25, 0x00	; 0
   17c6e:	0e 94 66 8d 	call	0x11acc	; 0x11acc <AMIGO_is_MTA>
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17c72:	c0 36       	cpi	r28, 0x60	; 96
   17c74:	99 f4       	brne	.+38     	; 0x17c9c <AMIGO_COMMANDS+0x74>
   17c76:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   17c7a:	90 e0       	ldi	r25, 0x00	; 0
   17c7c:	0e 94 66 8d 	call	0x11acc	; 0x11acc <AMIGO_is_MTA>
   17c80:	89 2b       	or	r24, r25
   17c82:	19 f0       	breq	.+6      	; 0x17c8a <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   17c84:	80 e6       	ldi	r24, 0x60	; 96
   17c86:	90 e0       	ldi	r25, 0x00	; 0
   17c88:	14 c0       	rjmp	.+40     	; 0x17cb2 <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17c8a:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17c8e:	90 e0       	ldi	r25, 0x00	; 0
   17c90:	0e 94 57 8d 	call	0x11aae	; 0x11aae <AMIGO_is_MLA>
   17c94:	89 2b       	or	r24, r25
   17c96:	09 f4       	brne	.+2      	; 0x17c9a <AMIGO_COMMANDS+0x72>
   17c98:	59 c0       	rjmp	.+178    	; 0x17d4c <AMIGO_COMMANDS+0x124>
   17c9a:	f4 cf       	rjmp	.-24     	; 0x17c84 <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   17c9c:	c8 36       	cpi	r28, 0x68	; 104
   17c9e:	c1 f4       	brne	.+48     	; 0x17cd0 <AMIGO_COMMANDS+0xa8>
   17ca0:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   17ca4:	90 e0       	ldi	r25, 0x00	; 0
   17ca6:	0e 94 66 8d 	call	0x11acc	; 0x11acc <AMIGO_is_MTA>
   17caa:	89 2b       	or	r24, r25
   17cac:	21 f0       	breq	.+8      	; 0x17cb6 <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   17cae:	88 e6       	ldi	r24, 0x68	; 104
   17cb0:	90 e0       	ldi	r25, 0x00	; 0
   17cb2:	df de       	rcall	.-578    	; 0x17a72 <Amigo_Execute>
   17cb4:	0b c0       	rjmp	.+22     	; 0x17ccc <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
   17cb6:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17cba:	90 e0       	ldi	r25, 0x00	; 0
   17cbc:	0e 94 57 8d 	call	0x11aae	; 0x11aae <AMIGO_is_MLA>
   17cc0:	89 2b       	or	r24, r25
   17cc2:	09 f4       	brne	.+2      	; 0x17cc6 <AMIGO_COMMANDS+0x9e>
   17cc4:	43 c0       	rjmp	.+134    	; 0x17d4c <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17cc6:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
   17cc8:	90 e0       	ldi	r25, 0x00	; 0
   17cca:	ef db       	rcall	.-2082   	; 0x174aa <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   17ccc:	ec 01       	movw	r28, r24
   17cce:	40 c0       	rjmp	.+128    	; 0x17d50 <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) ) // Single byte command
   17cd0:	c9 36       	cpi	r28, 0x69	; 105
   17cd2:	51 f4       	brne	.+20     	; 0x17ce8 <AMIGO_COMMANDS+0xc0>
   17cd4:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17cd8:	90 e0       	ldi	r25, 0x00	; 0
   17cda:	0e 94 57 8d 	call	0x11aae	; 0x11aae <AMIGO_is_MLA>
   17cde:	89 2b       	or	r24, r25
   17ce0:	a9 f1       	breq	.+106    	; 0x17d4c <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17ce2:	89 e6       	ldi	r24, 0x69	; 105
   17ce4:	90 e0       	ldi	r25, 0x00	; 0
   17ce6:	f1 cf       	rjmp	.-30     	; 0x17cca <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) ) // Single byte command
   17ce8:	ca 36       	cpi	r28, 0x6A	; 106
   17cea:	51 f4       	brne	.+20     	; 0x17d00 <AMIGO_COMMANDS+0xd8>
   17cec:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17cf0:	90 e0       	ldi	r25, 0x00	; 0
   17cf2:	0e 94 57 8d 	call	0x11aae	; 0x11aae <AMIGO_is_MLA>
   17cf6:	89 2b       	or	r24, r25
   17cf8:	49 f1       	breq	.+82     	; 0x17d4c <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17cfa:	8a e6       	ldi	r24, 0x6A	; 106
   17cfc:	90 e0       	ldi	r25, 0x00	; 0
   17cfe:	e5 cf       	rjmp	.-54     	; 0x17cca <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
   17d00:	cc 36       	cpi	r28, 0x6C	; 108
   17d02:	51 f4       	brne	.+20     	; 0x17d18 <AMIGO_COMMANDS+0xf0>
   17d04:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17d08:	90 e0       	ldi	r25, 0x00	; 0
   17d0a:	0e 94 57 8d 	call	0x11aae	; 0x11aae <AMIGO_is_MLA>
   17d0e:	89 2b       	or	r24, r25
   17d10:	e9 f0       	breq	.+58     	; 0x17d4c <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17d12:	8c e6       	ldi	r24, 0x6C	; 108
   17d14:	90 e0       	ldi	r25, 0x00	; 0
   17d16:	d9 cf       	rjmp	.-78     	; 0x17cca <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   17d18:	c0 37       	cpi	r28, 0x70	; 112
   17d1a:	c1 f4       	brne	.+48     	; 0x17d4c <AMIGO_COMMANDS+0x124>
   17d1c:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   17d20:	90 e0       	ldi	r25, 0x00	; 0
   17d22:	0e 94 66 8d 	call	0x11acc	; 0x11acc <AMIGO_is_MTA>
   17d26:	ec 01       	movw	r28, r24
   17d28:	89 2b       	or	r24, r25
   17d2a:	51 f0       	breq	.+20     	; 0x17d40 <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17d2c:	e0 91 03 19 	lds	r30, 0x1903	; 0x801903 <AMIGOp>
   17d30:	f0 91 04 19 	lds	r31, 0x1904	; 0x801904 <AMIGOp+0x1>
   17d34:	81 81       	ldd	r24, Z+1	; 0x01
   17d36:	90 e0       	ldi	r25, 0x00	; 0
   17d38:	0e 94 44 87 	call	0x10e88	; 0x10e88 <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   17d3c:	fc d9       	rcall	.-3080   	; 0x17136 <amigo_cmd_dsj>
   17d3e:	c6 cf       	rjmp	.-116    	; 0x17ccc <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   17d40:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   17d44:	90 e0       	ldi	r25, 0x00	; 0
   17d46:	0e 94 57 8d 	call	0x11aae	; 0x11aae <AMIGO_is_MLA>
   17d4a:	02 c0       	rjmp	.+4      	; 0x17d50 <AMIGO_COMMANDS+0x128>
        {
            // NOP
        }
    }
    return(0);
   17d4c:	c0 e0       	ldi	r28, 0x00	; 0
   17d4e:	d0 e0       	ldi	r29, 0x00	; 0
}
   17d50:	ce 01       	movw	r24, r28
   17d52:	df 91       	pop	r29
   17d54:	cf 91       	pop	r28
   17d56:	08 95       	ret

00017d58 <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   17d58:	ec e3       	ldi	r30, 0x3C	; 60
   17d5a:	f9 e1       	ldi	r31, 0x19	; 25
   17d5c:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   17d5e:	10 82       	st	Z, r1
   17d60:	11 82       	std	Z+1, r1	; 0x01
   17d62:	12 82       	std	Z+2, r1	; 0x02
   17d64:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   17d66:	15 82       	std	Z+5, r1	; 0x05
   17d68:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   17d6a:	12 86       	std	Z+10, r1	; 0x0a
   17d6c:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   17d6e:	14 86       	std	Z+12, r1	; 0x0c
   17d70:	13 86       	std	Z+11, r1	; 0x0b
   17d72:	08 95       	ret

00017d74 <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   17d74:	cf 93       	push	r28
   17d76:	df 93       	push	r29
   17d78:	ad b7       	in	r26, 0x3d	; 61
   17d7a:	be b7       	in	r27, 0x3e	; 62
   17d7c:	17 97       	sbiw	r26, 0x07	; 7
   17d7e:	0f b6       	in	r0, 0x3f	; 63
   17d80:	f8 94       	cli
   17d82:	be bf       	out	0x3e, r27	; 62
   17d84:	0f be       	out	0x3f, r0	; 63
   17d86:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   17d88:	20 91 45 19 	lds	r18, 0x1945	; 0x801945 <plot+0x9>
   17d8c:	30 91 46 19 	lds	r19, 0x1946	; 0x801946 <plot+0xa>
   17d90:	21 15       	cp	r18, r1
   17d92:	31 05       	cpc	r19, r1
   17d94:	09 f4       	brne	.+2      	; 0x17d98 <receive_plot_flush+0x24>
   17d96:	45 c0       	rjmp	.+138    	; 0x17e22 <receive_plot_flush+0xae>
   17d98:	80 91 40 19 	lds	r24, 0x1940	; 0x801940 <plot+0x4>
   17d9c:	90 91 41 19 	lds	r25, 0x1941	; 0x801941 <plot+0x5>
   17da0:	00 97       	sbiw	r24, 0x00	; 0
   17da2:	09 f4       	brne	.+2      	; 0x17da6 <receive_plot_flush+0x32>
   17da4:	40 c0       	rjmp	.+128    	; 0x17e26 <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   17da6:	ac 01       	movw	r20, r24
   17da8:	61 e0       	ldi	r22, 0x01	; 1
   17daa:	70 e0       	ldi	r23, 0x00	; 0
   17dac:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <plot+0xb>
   17db0:	90 91 48 19 	lds	r25, 0x1948	; 0x801948 <plot+0xc>
   17db4:	0e 94 5a 7d 	call	0xfab4	; 0xfab4 <fwrite>
   17db8:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   17dba:	80 91 40 19 	lds	r24, 0x1940	; 0x801940 <plot+0x4>
   17dbe:	90 91 41 19 	lds	r25, 0x1941	; 0x801941 <plot+0x5>
   17dc2:	c8 17       	cp	r28, r24
   17dc4:	d9 07       	cpc	r29, r25
   17dc6:	09 f1       	breq	.+66     	; 0x17e0a <receive_plot_flush+0x96>
    {
        if(debuglevel & (1+32))
   17dc8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17dcc:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   17dd0:	81 72       	andi	r24, 0x21	; 33
   17dd2:	99 27       	eor	r25, r25
   17dd4:	89 2b       	or	r24, r25
   17dd6:	b1 f0       	breq	.+44     	; 0x17e04 <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   17dd8:	80 e0       	ldi	r24, 0x00	; 0
   17dda:	95 e1       	ldi	r25, 0x15	; 21
   17ddc:	0e 94 63 79 	call	0xf2c6	; 0xf2c6 <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   17de0:	ed b7       	in	r30, 0x3d	; 61
   17de2:	fe b7       	in	r31, 0x3e	; 62
   17de4:	d7 83       	std	Z+7, r29	; 0x07
   17de6:	c6 83       	std	Z+6, r28	; 0x06
   17de8:	80 91 40 19 	lds	r24, 0x1940	; 0x801940 <plot+0x4>
   17dec:	90 91 41 19 	lds	r25, 0x1941	; 0x801941 <plot+0x5>
   17df0:	95 83       	std	Z+5, r25	; 0x05
   17df2:	84 83       	std	Z+4, r24	; 0x04
   17df4:	83 ed       	ldi	r24, 0xD3	; 211
   17df6:	9f e2       	ldi	r25, 0x2F	; 47
   17df8:	a0 e0       	ldi	r26, 0x00	; 0
   17dfa:	81 83       	std	Z+1, r24	; 0x01
   17dfc:	92 83       	std	Z+2, r25	; 0x02
   17dfe:	a3 83       	std	Z+3, r26	; 0x03
   17e00:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        }
        return(-1);
   17e04:	8f ef       	ldi	r24, 0xFF	; 255
   17e06:	9f ef       	ldi	r25, 0xFF	; 255
   17e08:	0e c0       	rjmp	.+28     	; 0x17e26 <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   17e0a:	80 91 45 19 	lds	r24, 0x1945	; 0x801945 <plot+0x9>
   17e0e:	90 91 46 19 	lds	r25, 0x1946	; 0x801946 <plot+0xa>
   17e12:	0e 94 ad 77 	call	0xef5a	; 0xef5a <fileno>
    if(fno < 0)
   17e16:	97 fd       	sbrc	r25, 7
   17e18:	f5 cf       	rjmp	.-22     	; 0x17e04 <receive_plot_flush+0x90>
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
   17e1a:	0e 94 a4 7c 	call	0xf948	; 0xf948 <syncfs>
    return (ret);
   17e1e:	ce 01       	movw	r24, r28
   17e20:	02 c0       	rjmp	.+4      	; 0x17e26 <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   17e22:	80 e0       	ldi	r24, 0x00	; 0
   17e24:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
    return (ret);
}
   17e26:	cd b7       	in	r28, 0x3d	; 61
   17e28:	de b7       	in	r29, 0x3e	; 62
   17e2a:	27 96       	adiw	r28, 0x07	; 7
   17e2c:	e2 e0       	ldi	r30, 0x02	; 2
   17e2e:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

00017e32 <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   17e32:	ad b7       	in	r26, 0x3d	; 61
   17e34:	be b7       	in	r27, 0x3e	; 62
   17e36:	17 97       	sbiw	r26, 0x07	; 7
   17e38:	0f b6       	in	r0, 0x3f	; 63
   17e3a:	f8 94       	cli
   17e3c:	be bf       	out	0x3e, r27	; 62
   17e3e:	0f be       	out	0x3f, r0	; 63
    if( receive_plot_flush() < 0 )
   17e40:	ad bf       	out	0x3d, r26	; 61
   17e42:	98 df       	rcall	.-208    	; 0x17d74 <receive_plot_flush>
   17e44:	97 ff       	sbrs	r25, 7
        plot.error = 1;
   17e46:	03 c0       	rjmp	.+6      	; 0x17e4e <printer_close+0x1c>
   17e48:	81 e0       	ldi	r24, 0x01	; 1
   17e4a:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <plot+0x8>

    if(debuglevel & (1+32))
   17e4e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17e52:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   17e56:	81 72       	andi	r24, 0x21	; 33
   17e58:	99 27       	eor	r25, r25
   17e5a:	89 2b       	or	r24, r25
    {
        if(plot.error)
   17e5c:	71 f0       	breq	.+28     	; 0x17e7a <printer_close+0x48>
   17e5e:	80 91 44 19 	lds	r24, 0x1944	; 0x801944 <plot+0x8>
   17e62:	88 23       	and	r24, r24
            printf("ERROR durring write\n");
   17e64:	51 f0       	breq	.+20     	; 0x17e7a <printer_close+0x48>
   17e66:	82 e0       	ldi	r24, 0x02	; 2
   17e68:	90 e3       	ldi	r25, 0x30	; 48
   17e6a:	a0 e0       	ldi	r26, 0x00	; 0
   17e6c:	ed b7       	in	r30, 0x3d	; 61
   17e6e:	fe b7       	in	r31, 0x3e	; 62
   17e70:	81 83       	std	Z+1, r24	; 0x01
   17e72:	92 83       	std	Z+2, r25	; 0x02
   17e74:	a3 83       	std	Z+3, r26	; 0x03
   17e76:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    }

    if(plot.fp)
   17e7a:	80 91 45 19 	lds	r24, 0x1945	; 0x801945 <plot+0x9>
   17e7e:	90 91 46 19 	lds	r25, 0x1946	; 0x801946 <plot+0xa>
   17e82:	00 97       	sbiw	r24, 0x00	; 0
    {
        fclose(plot.fp);
   17e84:	e1 f0       	breq	.+56     	; 0x17ebe <printer_close+0x8c>
   17e86:	0e 94 dc 7d 	call	0xfbb8	; 0xfbb8 <fclose>
        if(debuglevel & 32)
   17e8a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17e8e:	85 ff       	sbrs	r24, 5
            printf("\nDONE: %08ld\n",plot.count);
   17e90:	16 c0       	rjmp	.+44     	; 0x17ebe <printer_close+0x8c>
   17e92:	80 91 3c 19 	lds	r24, 0x193C	; 0x80193c <plot>
   17e96:	90 91 3d 19 	lds	r25, 0x193D	; 0x80193d <plot+0x1>
   17e9a:	a0 91 3e 19 	lds	r26, 0x193E	; 0x80193e <plot+0x2>
   17e9e:	b0 91 3f 19 	lds	r27, 0x193F	; 0x80193f <plot+0x3>
   17ea2:	ed b7       	in	r30, 0x3d	; 61
   17ea4:	fe b7       	in	r31, 0x3e	; 62
   17ea6:	84 83       	std	Z+4, r24	; 0x04
   17ea8:	95 83       	std	Z+5, r25	; 0x05
   17eaa:	a6 83       	std	Z+6, r26	; 0x06
   17eac:	b7 83       	std	Z+7, r27	; 0x07
   17eae:	84 ef       	ldi	r24, 0xF4	; 244
   17eb0:	9f e2       	ldi	r25, 0x2F	; 47
   17eb2:	a0 e0       	ldi	r26, 0x00	; 0
   17eb4:	81 83       	std	Z+1, r24	; 0x01
   17eb6:	92 83       	std	Z+2, r25	; 0x02
   17eb8:	a3 83       	std	Z+3, r26	; 0x03
   17eba:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    }

    if(plot.buf)
   17ebe:	80 91 47 19 	lds	r24, 0x1947	; 0x801947 <plot+0xb>
   17ec2:	90 91 48 19 	lds	r25, 0x1948	; 0x801948 <plot+0xc>
   17ec6:	00 97       	sbiw	r24, 0x00	; 0
        safefree(plot.buf);
   17ec8:	11 f0       	breq	.+4      	; 0x17ece <printer_close+0x9c>
    printer_init();
   17eca:	0e 94 c1 29 	call	0x5382	; 0x5382 <safefree>
}
   17ece:	44 df       	rcall	.-376    	; 0x17d58 <printer_init>
   17ed0:	ad b7       	in	r26, 0x3d	; 61
   17ed2:	be b7       	in	r27, 0x3e	; 62
   17ed4:	17 96       	adiw	r26, 0x07	; 7
   17ed6:	0f b6       	in	r0, 0x3f	; 63
   17ed8:	f8 94       	cli
   17eda:	be bf       	out	0x3e, r27	; 62
   17edc:	0f be       	out	0x3f, r0	; 63
   17ede:	ad bf       	out	0x3d, r26	; 61
   17ee0:	08 95       	ret

00017ee2 <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   17ee2:	ad e5       	ldi	r26, 0x5D	; 93
   17ee4:	b0 e0       	ldi	r27, 0x00	; 0
   17ee6:	e7 e7       	ldi	r30, 0x77	; 119
   17ee8:	ff eb       	ldi	r31, 0xBF	; 191
   17eea:	0c 94 92 e4 	jmp	0x1c924	; 0x1c924 <__prologue_saves__+0x18>
   17eee:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   17ef0:	89 2b       	or	r24, r25
   17ef2:	09 f0       	breq	.+2      	; 0x17ef6 <printer_open+0x14>
   17ef4:	4f c0       	rjmp	.+158    	; 0x17f94 <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   17ef6:	be 01       	movw	r22, r28
   17ef8:	6e 5a       	subi	r22, 0xAE	; 174
   17efa:	7f 4f       	sbci	r23, 0xFF	; 255
   17efc:	80 e0       	ldi	r24, 0x00	; 0
   17efe:	90 e0       	ldi	r25, 0x00	; 0
   17f00:	0e 94 de 34 	call	0x69bc	; 0x69bc <clock_gettime>
        seconds = ts.tv_sec;
   17f04:	66 96       	adiw	r28, 0x16	; 22
   17f06:	8c ad       	ldd	r24, Y+60	; 0x3c
   17f08:	9d ad       	ldd	r25, Y+61	; 0x3d
   17f0a:	ae ad       	ldd	r26, Y+62	; 0x3e
   17f0c:	bf ad       	ldd	r27, Y+63	; 0x3f
   17f0e:	66 97       	sbiw	r28, 0x16	; 22
   17f10:	6e 96       	adiw	r28, 0x1e	; 30
   17f12:	8c af       	std	Y+60, r24	; 0x3c
   17f14:	9d af       	std	Y+61, r25	; 0x3d
   17f16:	ae af       	std	Y+62, r26	; 0x3e
   17f18:	bf af       	std	Y+63, r27	; 0x3f
   17f1a:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   17f1c:	ce 01       	movw	r24, r28
   17f1e:	86 5a       	subi	r24, 0xA6	; 166
   17f20:	9f 4f       	sbci	r25, 0xFF	; 255
   17f22:	0e 94 c3 38 	call	0x7186	; 0x7186 <gmtime>
   17f26:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   17f28:	fc 01       	movw	r30, r24
   17f2a:	e6 80       	ldd	r14, Z+6	; 0x06
   17f2c:	f7 80       	ldd	r15, Z+7	; 0x07
   17f2e:	80 85       	ldd	r24, Z+8	; 0x08
   17f30:	91 85       	ldd	r25, Z+9	; 0x09
   17f32:	0e 94 9f 37 	call	0x6f3e	; 0x6f3e <tm_mon_to_ascii>
   17f36:	f8 01       	movw	r30, r16
   17f38:	20 81       	ld	r18, Z
   17f3a:	31 81       	ldd	r19, Z+1	; 0x01
   17f3c:	ed b7       	in	r30, 0x3d	; 61
   17f3e:	fe b7       	in	r31, 0x3e	; 62
   17f40:	31 8b       	std	Z+17, r19	; 0x11
   17f42:	20 8b       	std	Z+16, r18	; 0x10
   17f44:	f8 01       	movw	r30, r16
   17f46:	22 81       	ldd	r18, Z+2	; 0x02
   17f48:	33 81       	ldd	r19, Z+3	; 0x03
   17f4a:	ed b7       	in	r30, 0x3d	; 61
   17f4c:	fe b7       	in	r31, 0x3e	; 62
   17f4e:	37 87       	std	Z+15, r19	; 0x0f
   17f50:	26 87       	std	Z+14, r18	; 0x0e
   17f52:	f8 01       	movw	r30, r16
   17f54:	24 81       	ldd	r18, Z+4	; 0x04
   17f56:	35 81       	ldd	r19, Z+5	; 0x05
   17f58:	ed b7       	in	r30, 0x3d	; 61
   17f5a:	fe b7       	in	r31, 0x3e	; 62
   17f5c:	35 87       	std	Z+13, r19	; 0x0d
   17f5e:	24 87       	std	Z+12, r18	; 0x0c
   17f60:	f8 01       	movw	r30, r16
   17f62:	22 85       	ldd	r18, Z+10	; 0x0a
   17f64:	33 85       	ldd	r19, Z+11	; 0x0b
   17f66:	24 59       	subi	r18, 0x94	; 148
   17f68:	38 4f       	sbci	r19, 0xF8	; 248
   17f6a:	ed b7       	in	r30, 0x3d	; 61
   17f6c:	fe b7       	in	r31, 0x3e	; 62
   17f6e:	33 87       	std	Z+11, r19	; 0x0b
   17f70:	22 87       	std	Z+10, r18	; 0x0a
   17f72:	91 87       	std	Z+9, r25	; 0x09
   17f74:	80 87       	std	Z+8, r24	; 0x08
   17f76:	f7 82       	std	Z+7, r15	; 0x07
   17f78:	e6 82       	std	Z+6, r14	; 0x06
   17f7a:	89 e3       	ldi	r24, 0x39	; 57
   17f7c:	90 e3       	ldi	r25, 0x30	; 48
   17f7e:	a0 e0       	ldi	r26, 0x00	; 0
   17f80:	83 83       	std	Z+3, r24	; 0x03
   17f82:	94 83       	std	Z+4, r25	; 0x04
   17f84:	a5 83       	std	Z+5, r26	; 0x05
   17f86:	8e 01       	movw	r16, r28
   17f88:	0e 5e       	subi	r16, 0xEE	; 238
   17f8a:	1f 4f       	sbci	r17, 0xFF	; 255
   17f8c:	12 83       	std	Z+2, r17	; 0x02
   17f8e:	01 83       	std	Z+1, r16	; 0x01
   17f90:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & 32)
   17f94:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17f98:	85 ff       	sbrs	r24, 5
   17f9a:	0c c0       	rjmp	.+24     	; 0x17fb4 <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   17f9c:	ed b7       	in	r30, 0x3d	; 61
   17f9e:	fe b7       	in	r31, 0x3e	; 62
   17fa0:	15 83       	std	Z+5, r17	; 0x05
   17fa2:	04 83       	std	Z+4, r16	; 0x04
   17fa4:	83 e2       	ldi	r24, 0x23	; 35
   17fa6:	90 e3       	ldi	r25, 0x30	; 48
   17fa8:	a0 e0       	ldi	r26, 0x00	; 0
   17faa:	81 83       	std	Z+1, r24	; 0x01
   17fac:	92 83       	std	Z+2, r25	; 0x02
   17fae:	a3 83       	std	Z+3, r26	; 0x03
   17fb0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

    plot.fp = fopen(ptr,"wb");
   17fb4:	6c e2       	ldi	r22, 0x2C	; 44
   17fb6:	78 e0       	ldi	r23, 0x08	; 8
   17fb8:	c8 01       	movw	r24, r16
   17fba:	0e 94 32 7f 	call	0xfe64	; 0xfe64 <fopen>
   17fbe:	90 93 46 19 	sts	0x1946, r25	; 0x801946 <plot+0xa>
   17fc2:	80 93 45 19 	sts	0x1945, r24	; 0x801945 <plot+0x9>
    if(plot.fp == NULL)
   17fc6:	89 2b       	or	r24, r25
   17fc8:	b9 f4       	brne	.+46     	; 0x17ff8 <printer_open+0x116>
    {
        if(debuglevel & (1+32))
   17fca:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   17fce:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   17fd2:	81 72       	andi	r24, 0x21	; 33
   17fd4:	99 27       	eor	r25, r25
   17fd6:	89 2b       	or	r24, r25
   17fd8:	11 f1       	breq	.+68     	; 0x1801e <printer_open+0x13c>
        {
            perror("open failed");
   17fda:	87 ec       	ldi	r24, 0xC7	; 199
   17fdc:	9c e0       	ldi	r25, 0x0C	; 12
   17fde:	0e 94 63 79 	call	0xf2c6	; 0xf2c6 <perror>
            printf("exiting...\n");
   17fe2:	87 e1       	ldi	r24, 0x17	; 23
   17fe4:	90 e3       	ldi	r25, 0x30	; 48
   17fe6:	a0 e0       	ldi	r26, 0x00	; 0
   17fe8:	ed b7       	in	r30, 0x3d	; 61
   17fea:	fe b7       	in	r31, 0x3e	; 62
   17fec:	81 83       	std	Z+1, r24	; 0x01
   17fee:	92 83       	std	Z+2, r25	; 0x02
   17ff0:	a3 83       	std	Z+3, r26	; 0x03
   17ff2:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   17ff6:	13 c0       	rjmp	.+38     	; 0x1801e <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   17ff8:	61 e0       	ldi	r22, 0x01	; 1
   17ffa:	70 e0       	ldi	r23, 0x00	; 0
   17ffc:	81 e0       	ldi	r24, 0x01	; 1
   17ffe:	92 e0       	ldi	r25, 0x02	; 2
   18000:	0e 94 75 29 	call	0x52ea	; 0x52ea <safecalloc>
   18004:	90 93 48 19 	sts	0x1948, r25	; 0x801948 <plot+0xc>
   18008:	80 93 47 19 	sts	0x1947, r24	; 0x801947 <plot+0xb>
    if(plot.buf == NULL)
   1800c:	89 2b       	or	r24, r25
        printer_close();
   1800e:	09 f4       	brne	.+2      	; 0x18012 <printer_open+0x130>
    plot.size = 512;
   18010:	10 df       	rcall	.-480    	; 0x17e32 <printer_close>
   18012:	80 e0       	ldi	r24, 0x00	; 0
   18014:	92 e0       	ldi	r25, 0x02	; 2
   18016:	90 93 43 19 	sts	0x1943, r25	; 0x801943 <plot+0x7>
   1801a:	80 93 42 19 	sts	0x1942, r24	; 0x801942 <plot+0x6>
}
   1801e:	c3 5a       	subi	r28, 0xA3	; 163
   18020:	df 4f       	sbci	r29, 0xFF	; 255
   18022:	e6 e0       	ldi	r30, 0x06	; 6
   18024:	0c 94 ae e4 	jmp	0x1c95c	; 0x1c95c <__epilogue_restores__+0x18>

00018028 <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   18028:	cf 93       	push	r28
   1802a:	df 93       	push	r29
   1802c:	ad b7       	in	r26, 0x3d	; 61
   1802e:	be b7       	in	r27, 0x3e	; 62
   18030:	17 97       	sbiw	r26, 0x07	; 7
   18032:	0f b6       	in	r0, 0x3f	; 63
   18034:	f8 94       	cli
   18036:	be bf       	out	0x3e, r27	; 62
   18038:	0f be       	out	0x3f, r0	; 63
   1803a:	ad bf       	out	0x3d, r26	; 61
   1803c:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (1+32))
   1803e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18042:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   18046:	81 72       	andi	r24, 0x21	; 33
   18048:	99 27       	eor	r25, r25
   1804a:	89 2b       	or	r24, r25
   1804c:	c1 f0       	breq	.+48     	; 0x1807e <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   1804e:	80 91 3c 19 	lds	r24, 0x193C	; 0x80193c <plot>
   18052:	30 91 3d 19 	lds	r19, 0x193D	; 0x80193d <plot+0x1>
   18056:	20 91 3e 19 	lds	r18, 0x193E	; 0x80193e <plot+0x2>
   1805a:	90 91 3f 19 	lds	r25, 0x193F	; 0x80193f <plot+0x3>
   1805e:	81 11       	cpse	r24, r1
   18060:	0e c0       	rjmp	.+28     	; 0x1807e <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   18062:	ed b7       	in	r30, 0x3d	; 61
   18064:	fe b7       	in	r31, 0x3e	; 62
   18066:	84 83       	std	Z+4, r24	; 0x04
   18068:	35 83       	std	Z+5, r19	; 0x05
   1806a:	26 83       	std	Z+6, r18	; 0x06
   1806c:	97 83       	std	Z+7, r25	; 0x07
   1806e:	8c ec       	ldi	r24, 0xCC	; 204
   18070:	9f e2       	ldi	r25, 0x2F	; 47
   18072:	a0 e0       	ldi	r26, 0x00	; 0
   18074:	81 83       	std	Z+1, r24	; 0x01
   18076:	92 83       	std	Z+2, r25	; 0x02
   18078:	a3 83       	std	Z+3, r26	; 0x03
   1807a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   1807e:	ce 01       	movw	r24, r28
   18080:	88 27       	eor	r24, r24
   18082:	97 7f       	andi	r25, 0xF7	; 247
   18084:	89 2b       	or	r24, r25
    {
        if( receive_plot_flush() )
   18086:	41 f0       	breq	.+16     	; 0x18098 <printer_buffer+0x70>
   18088:	75 de       	rcall	.-790    	; 0x17d74 <receive_plot_flush>
   1808a:	89 2b       	or	r24, r25
   1808c:	09 f4       	brne	.+2      	; 0x18090 <printer_buffer+0x68>
            plot.error = 1;
   1808e:	3f c0       	rjmp	.+126    	; 0x1810e <printer_buffer+0xe6>
   18090:	81 e0       	ldi	r24, 0x01	; 1
   18092:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <plot+0x8>
        //plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   18096:	3b c0       	rjmp	.+118    	; 0x1810e <printer_buffer+0xe6>
   18098:	20 91 47 19 	lds	r18, 0x1947	; 0x801947 <plot+0xb>
   1809c:	30 91 48 19 	lds	r19, 0x1948	; 0x801948 <plot+0xc>
   180a0:	80 91 40 19 	lds	r24, 0x1940	; 0x801940 <plot+0x4>
   180a4:	90 91 41 19 	lds	r25, 0x1941	; 0x801941 <plot+0x5>
   180a8:	ac 01       	movw	r20, r24
   180aa:	4f 5f       	subi	r20, 0xFF	; 255
   180ac:	5f 4f       	sbci	r21, 0xFF	; 255
   180ae:	50 93 41 19 	sts	0x1941, r21	; 0x801941 <plot+0x5>
   180b2:	40 93 40 19 	sts	0x1940, r20	; 0x801940 <plot+0x4>
   180b6:	f9 01       	movw	r30, r18
   180b8:	e8 0f       	add	r30, r24
   180ba:	f9 1f       	adc	r31, r25
        plot.count++;
   180bc:	c0 83       	st	Z, r28
   180be:	80 91 3c 19 	lds	r24, 0x193C	; 0x80193c <plot>
   180c2:	90 91 3d 19 	lds	r25, 0x193D	; 0x80193d <plot+0x1>
   180c6:	a0 91 3e 19 	lds	r26, 0x193E	; 0x80193e <plot+0x2>
   180ca:	b0 91 3f 19 	lds	r27, 0x193F	; 0x80193f <plot+0x3>
   180ce:	01 96       	adiw	r24, 0x01	; 1
   180d0:	a1 1d       	adc	r26, r1
   180d2:	b1 1d       	adc	r27, r1
   180d4:	80 93 3c 19 	sts	0x193C, r24	; 0x80193c <plot>
   180d8:	90 93 3d 19 	sts	0x193D, r25	; 0x80193d <plot+0x1>
   180dc:	a0 93 3e 19 	sts	0x193E, r26	; 0x80193e <plot+0x2>
   180e0:	b0 93 3f 19 	sts	0x193F, r27	; 0x80193f <plot+0x3>

        if(plot.ind >= plot.size)
   180e4:	20 91 40 19 	lds	r18, 0x1940	; 0x801940 <plot+0x4>
   180e8:	30 91 41 19 	lds	r19, 0x1941	; 0x801941 <plot+0x5>
   180ec:	80 91 42 19 	lds	r24, 0x1942	; 0x801942 <plot+0x6>
   180f0:	90 91 43 19 	lds	r25, 0x1943	; 0x801943 <plot+0x7>
   180f4:	28 17       	cp	r18, r24
        {
            if( receive_plot_flush() < 0 )
   180f6:	39 07       	cpc	r19, r25
   180f8:	54 f0       	brlt	.+20     	; 0x1810e <printer_buffer+0xe6>
   180fa:	3c de       	rcall	.-904    	; 0x17d74 <receive_plot_flush>
   180fc:	97 ff       	sbrs	r25, 7
                plot.error = 1;
   180fe:	03 c0       	rjmp	.+6      	; 0x18106 <printer_buffer+0xde>
   18100:	81 e0       	ldi	r24, 0x01	; 1
   18102:	80 93 44 19 	sts	0x1944, r24	; 0x801944 <plot+0x8>
            plot.ind  = 0;
   18106:	10 92 41 19 	sts	0x1941, r1	; 0x801941 <plot+0x5>
   1810a:	10 92 40 19 	sts	0x1940, r1	; 0x801940 <plot+0x4>
        }
    }
}
   1810e:	cd b7       	in	r28, 0x3d	; 61
   18110:	de b7       	in	r29, 0x3e	; 62
   18112:	27 96       	adiw	r28, 0x07	; 7
   18114:	e2 e0       	ldi	r30, 0x02	; 2
   18116:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

0001811a <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   1811a:	cf 93       	push	r28
   1811c:	00 d0       	rcall	.+0      	; 0x1811e <PRINTER_COMMANDS+0x4>
   1811e:	00 d0       	rcall	.+0      	; 0x18120 <PRINTER_COMMANDS+0x6>
   18120:	1f 92       	push	r1
   18122:	c8 2f       	mov	r28, r24

    // We could, for example, use secondaries to set file names, etc
    // We don not use them yet
    if(PRINTER_is_MLA(listening))
   18124:	80 91 88 1e 	lds	r24, 0x1E88	; 0x801e88 <listening>
   18128:	90 e0       	ldi	r25, 0x00	; 0
   1812a:	0e 94 84 8d 	call	0x11b08	; 0x11b08 <PRINTER_is_MLA>
   1812e:	89 2b       	or	r24, r25
   18130:	69 f0       	breq	.+26     	; 0x1814c <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & 32)
   18132:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18136:	85 ff       	sbrs	r24, 5
   18138:	22 c0       	rjmp	.+68     	; 0x1817e <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   1813a:	8c 2f       	mov	r24, r28
   1813c:	90 e0       	ldi	r25, 0x00	; 0
   1813e:	ed b7       	in	r30, 0x3d	; 61
   18140:	fe b7       	in	r31, 0x3e	; 62
   18142:	95 83       	std	Z+5, r25	; 0x05
   18144:	84 83       	std	Z+4, r24	; 0x04
   18146:	80 eb       	ldi	r24, 0xB0	; 176
   18148:	9f e2       	ldi	r25, 0x2F	; 47
   1814a:	13 c0       	rjmp	.+38     	; 0x18172 <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   1814c:	80 91 86 1e 	lds	r24, 0x1E86	; 0x801e86 <talking>
   18150:	90 e0       	ldi	r25, 0x00	; 0
   18152:	0e 94 93 8d 	call	0x11b26	; 0x11b26 <PRINTER_is_MTA>
   18156:	89 2b       	or	r24, r25
   18158:	91 f0       	breq	.+36     	; 0x1817e <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & 32)
   1815a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1815e:	85 ff       	sbrs	r24, 5
   18160:	0e c0       	rjmp	.+28     	; 0x1817e <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   18162:	8c 2f       	mov	r24, r28
   18164:	90 e0       	ldi	r25, 0x00	; 0
   18166:	ed b7       	in	r30, 0x3d	; 61
   18168:	fe b7       	in	r31, 0x3e	; 62
   1816a:	95 83       	std	Z+5, r25	; 0x05
   1816c:	84 83       	std	Z+4, r24	; 0x04
   1816e:	86 e9       	ldi	r24, 0x96	; 150
   18170:	9f e2       	ldi	r25, 0x2F	; 47
   18172:	a0 e0       	ldi	r26, 0x00	; 0
   18174:	81 83       	std	Z+1, r24	; 0x01
   18176:	92 83       	std	Z+2, r25	; 0x02
   18178:	a3 83       	std	Z+3, r26	; 0x03
   1817a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#endif
        return(0);
    }
    return(0);
}
   1817e:	80 e0       	ldi	r24, 0x00	; 0
   18180:	90 e0       	ldi	r25, 0x00	; 0
   18182:	0f 90       	pop	r0
   18184:	0f 90       	pop	r0
   18186:	0f 90       	pop	r0
   18188:	0f 90       	pop	r0
   1818a:	0f 90       	pop	r0
   1818c:	cf 91       	pop	r28
   1818e:	08 95       	ret

00018190 <lif_help>:
   18190:	cf 93       	push	r28
   18192:	df 93       	push	r29
   18194:	00 d0       	rcall	.+0      	; 0x18196 <lif_help+0x6>
   18196:	1f 92       	push	r1
   18198:	ec 01       	movw	r28, r24
   1819a:	89 e7       	ldi	r24, 0x79	; 121
   1819c:	94 e4       	ldi	r25, 0x44	; 68
   1819e:	a0 e0       	ldi	r26, 0x00	; 0
   181a0:	ed b7       	in	r30, 0x3d	; 61
   181a2:	fe b7       	in	r31, 0x3e	; 62
   181a4:	81 83       	std	Z+1, r24	; 0x01
   181a6:	92 83       	std	Z+2, r25	; 0x02
   181a8:	a3 83       	std	Z+3, r26	; 0x03
   181aa:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   181ae:	cd 2b       	or	r28, r29
   181b0:	51 f0       	breq	.+20     	; 0x181c6 <lif_help+0x36>
   181b2:	80 eb       	ldi	r24, 0xB0	; 176
   181b4:	92 e4       	ldi	r25, 0x42	; 66
   181b6:	a0 e0       	ldi	r26, 0x00	; 0
   181b8:	ed b7       	in	r30, 0x3d	; 61
   181ba:	fe b7       	in	r31, 0x3e	; 62
   181bc:	81 83       	std	Z+1, r24	; 0x01
   181be:	92 83       	std	Z+2, r25	; 0x02
   181c0:	a3 83       	std	Z+3, r26	; 0x03
   181c2:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   181c6:	cd b7       	in	r28, 0x3d	; 61
   181c8:	de b7       	in	r29, 0x3e	; 62
   181ca:	23 96       	adiw	r28, 0x03	; 3
   181cc:	e2 e0       	ldi	r30, 0x02	; 2
   181ce:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

000181d2 <lif_calloc>:
   181d2:	cf 92       	push	r12
   181d4:	df 92       	push	r13
   181d6:	ef 92       	push	r14
   181d8:	ff 92       	push	r15
   181da:	cf 93       	push	r28
   181dc:	df 93       	push	r29
   181de:	ad b7       	in	r26, 0x3d	; 61
   181e0:	be b7       	in	r27, 0x3e	; 62
   181e2:	17 97       	sbiw	r26, 0x07	; 7
   181e4:	0f b6       	in	r0, 0x3f	; 63
   181e6:	f8 94       	cli
   181e8:	be bf       	out	0x3e, r27	; 62
   181ea:	0f be       	out	0x3f, r0	; 63
   181ec:	ad bf       	out	0x3d, r26	; 61
   181ee:	6b 01       	movw	r12, r22
   181f0:	7c 01       	movw	r14, r24
   181f2:	61 e0       	ldi	r22, 0x01	; 1
   181f4:	70 e0       	ldi	r23, 0x00	; 0
   181f6:	c6 01       	movw	r24, r12
   181f8:	0e 94 75 29 	call	0x52ea	; 0x52ea <safecalloc>
   181fc:	ec 01       	movw	r28, r24
   181fe:	89 2b       	or	r24, r25
   18200:	71 f4       	brne	.+28     	; 0x1821e <lif_calloc+0x4c>
   18202:	ed b7       	in	r30, 0x3d	; 61
   18204:	fe b7       	in	r31, 0x3e	; 62
   18206:	c4 82       	std	Z+4, r12	; 0x04
   18208:	d5 82       	std	Z+5, r13	; 0x05
   1820a:	e6 82       	std	Z+6, r14	; 0x06
   1820c:	f7 82       	std	Z+7, r15	; 0x07
   1820e:	86 e6       	ldi	r24, 0x66	; 102
   18210:	92 e4       	ldi	r25, 0x42	; 66
   18212:	a0 e0       	ldi	r26, 0x00	; 0
   18214:	81 83       	std	Z+1, r24	; 0x01
   18216:	92 83       	std	Z+2, r25	; 0x02
   18218:	a3 83       	std	Z+3, r26	; 0x03
   1821a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1821e:	ce 01       	movw	r24, r28
   18220:	ad b7       	in	r26, 0x3d	; 61
   18222:	be b7       	in	r27, 0x3e	; 62
   18224:	17 96       	adiw	r26, 0x07	; 7
   18226:	0f b6       	in	r0, 0x3f	; 63
   18228:	f8 94       	cli
   1822a:	be bf       	out	0x3e, r27	; 62
   1822c:	0f be       	out	0x3f, r0	; 63
   1822e:	ad bf       	out	0x3d, r26	; 61
   18230:	df 91       	pop	r29
   18232:	cf 91       	pop	r28
   18234:	ff 90       	pop	r15
   18236:	ef 90       	pop	r14
   18238:	df 90       	pop	r13
   1823a:	cf 90       	pop	r12
   1823c:	08 95       	ret

0001823e <lif_free>:
   1823e:	00 d0       	rcall	.+0      	; 0x18240 <lif_free+0x2>
   18240:	1f 92       	push	r1
   18242:	00 97       	sbiw	r24, 0x00	; 0
   18244:	59 f4       	brne	.+22     	; 0x1825c <lif_free+0x1e>
   18246:	8e e4       	ldi	r24, 0x4E	; 78
   18248:	92 e4       	ldi	r25, 0x42	; 66
   1824a:	a0 e0       	ldi	r26, 0x00	; 0
   1824c:	ed b7       	in	r30, 0x3d	; 61
   1824e:	fe b7       	in	r31, 0x3e	; 62
   18250:	81 83       	std	Z+1, r24	; 0x01
   18252:	92 83       	std	Z+2, r25	; 0x02
   18254:	a3 83       	std	Z+3, r26	; 0x03
   18256:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1825a:	02 c0       	rjmp	.+4      	; 0x18260 <lif_free+0x22>
   1825c:	0e 94 c1 29 	call	0x5382	; 0x5382 <safefree>
   18260:	0f 90       	pop	r0
   18262:	0f 90       	pop	r0
   18264:	0f 90       	pop	r0
   18266:	08 95       	ret

00018268 <lif_stralloc>:
   18268:	0f 93       	push	r16
   1826a:	1f 93       	push	r17
   1826c:	cf 93       	push	r28
   1826e:	df 93       	push	r29
   18270:	ec 01       	movw	r28, r24
   18272:	fc 01       	movw	r30, r24
   18274:	01 90       	ld	r0, Z+
   18276:	00 20       	and	r0, r0
   18278:	e9 f7       	brne	.-6      	; 0x18274 <lif_stralloc+0xc>
   1827a:	bf 01       	movw	r22, r30
   1827c:	68 1b       	sub	r22, r24
   1827e:	79 0b       	sbc	r23, r25
   18280:	6d 5f       	subi	r22, 0xFD	; 253
   18282:	7f 4f       	sbci	r23, 0xFF	; 255
   18284:	07 2e       	mov	r0, r23
   18286:	00 0c       	add	r0, r0
   18288:	88 0b       	sbc	r24, r24
   1828a:	99 0b       	sbc	r25, r25
   1828c:	a2 df       	rcall	.-188    	; 0x181d2 <lif_calloc>
   1828e:	8c 01       	movw	r16, r24
   18290:	00 97       	sbiw	r24, 0x00	; 0
   18292:	19 f0       	breq	.+6      	; 0x1829a <lif_stralloc+0x32>
   18294:	be 01       	movw	r22, r28
   18296:	0e 94 61 32 	call	0x64c2	; 0x64c2 <strcpy>
   1829a:	c8 01       	movw	r24, r16
   1829c:	df 91       	pop	r29
   1829e:	cf 91       	pop	r28
   182a0:	1f 91       	pop	r17
   182a2:	0f 91       	pop	r16
   182a4:	08 95       	ret

000182a6 <lif_open>:
   182a6:	ef 92       	push	r14
   182a8:	ff 92       	push	r15
   182aa:	0f 93       	push	r16
   182ac:	1f 93       	push	r17
   182ae:	cf 93       	push	r28
   182b0:	df 93       	push	r29
   182b2:	ad b7       	in	r26, 0x3d	; 61
   182b4:	be b7       	in	r27, 0x3e	; 62
   182b6:	17 97       	sbiw	r26, 0x07	; 7
   182b8:	0f b6       	in	r0, 0x3f	; 63
   182ba:	f8 94       	cli
   182bc:	be bf       	out	0x3e, r27	; 62
   182be:	0f be       	out	0x3f, r0	; 63
   182c0:	ad bf       	out	0x3d, r26	; 61
   182c2:	8c 01       	movw	r16, r24
   182c4:	7b 01       	movw	r14, r22
   182c6:	0e 94 32 7f 	call	0xfe64	; 0xfe64 <fopen>
   182ca:	ec 01       	movw	r28, r24
   182cc:	89 2b       	or	r24, r25
   182ce:	71 f4       	brne	.+28     	; 0x182ec <lif_open+0x46>
   182d0:	ed b7       	in	r30, 0x3d	; 61
   182d2:	fe b7       	in	r31, 0x3e	; 62
   182d4:	f7 82       	std	Z+7, r15	; 0x07
   182d6:	e6 82       	std	Z+6, r14	; 0x06
   182d8:	15 83       	std	Z+5, r17	; 0x05
   182da:	04 83       	std	Z+4, r16	; 0x04
   182dc:	89 e2       	ldi	r24, 0x29	; 41
   182de:	92 e4       	ldi	r25, 0x42	; 66
   182e0:	a0 e0       	ldi	r26, 0x00	; 0
   182e2:	81 83       	std	Z+1, r24	; 0x01
   182e4:	92 83       	std	Z+2, r25	; 0x02
   182e6:	a3 83       	std	Z+3, r26	; 0x03
   182e8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   182ec:	ce 01       	movw	r24, r28
   182ee:	cd b7       	in	r28, 0x3d	; 61
   182f0:	de b7       	in	r29, 0x3e	; 62
   182f2:	27 96       	adiw	r28, 0x07	; 7
   182f4:	e6 e0       	ldi	r30, 0x06	; 6
   182f6:	0c 94 ae e4 	jmp	0x1c95c	; 0x1c95c <__epilogue_restores__+0x18>

000182fa <lif_stat>:
   182fa:	0f 93       	push	r16
   182fc:	1f 93       	push	r17
   182fe:	cf 93       	push	r28
   18300:	df 93       	push	r29
   18302:	00 d0       	rcall	.+0      	; 0x18304 <lif_stat+0xa>
   18304:	00 d0       	rcall	.+0      	; 0x18306 <lif_stat+0xc>
   18306:	1f 92       	push	r1
   18308:	8c 01       	movw	r16, r24
   1830a:	d6 2f       	mov	r29, r22
   1830c:	c7 2f       	mov	r28, r23
   1830e:	0e 94 37 7a 	call	0xf46e	; 0xf46e <stat>
   18312:	97 ff       	sbrs	r25, 7
   18314:	0f c0       	rjmp	.+30     	; 0x18334 <lif_stat+0x3a>
   18316:	ed b7       	in	r30, 0x3d	; 61
   18318:	fe b7       	in	r31, 0x3e	; 62
   1831a:	15 83       	std	Z+5, r17	; 0x05
   1831c:	04 83       	std	Z+4, r16	; 0x04
   1831e:	80 e1       	ldi	r24, 0x10	; 16
   18320:	92 e4       	ldi	r25, 0x42	; 66
   18322:	a0 e0       	ldi	r26, 0x00	; 0
   18324:	81 83       	std	Z+1, r24	; 0x01
   18326:	92 83       	std	Z+2, r25	; 0x02
   18328:	a3 83       	std	Z+3, r26	; 0x03
   1832a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1832e:	80 e0       	ldi	r24, 0x00	; 0
   18330:	90 e0       	ldi	r25, 0x00	; 0
   18332:	02 c0       	rjmp	.+4      	; 0x18338 <lif_stat+0x3e>
   18334:	8d 2f       	mov	r24, r29
   18336:	9c 2f       	mov	r25, r28
   18338:	cd b7       	in	r28, 0x3d	; 61
   1833a:	de b7       	in	r29, 0x3e	; 62
   1833c:	25 96       	adiw	r28, 0x05	; 5
   1833e:	e4 e0       	ldi	r30, 0x04	; 4
   18340:	0c 94 b0 e4 	jmp	0x1c960	; 0x1c960 <__epilogue_restores__+0x1c>

00018344 <lif_seek_msg>:
   18344:	a9 e0       	ldi	r26, 0x09	; 9
   18346:	b0 e0       	ldi	r27, 0x00	; 0
   18348:	e8 ea       	ldi	r30, 0xA8	; 168
   1834a:	f1 ec       	ldi	r31, 0xC1	; 193
   1834c:	0c 94 90 e4 	jmp	0x1c920	; 0x1c920 <__prologue_saves__+0x14>
   18350:	ec 01       	movw	r28, r24
   18352:	6a 01       	movw	r12, r20
   18354:	7b 01       	movw	r14, r22
   18356:	89 01       	movw	r16, r18
   18358:	0e 94 71 7b 	call	0xf6e2	; 0xf6e2 <ftell>
   1835c:	6c 15       	cp	r22, r12
   1835e:	7d 05       	cpc	r23, r13
   18360:	8e 05       	cpc	r24, r14
   18362:	9f 05       	cpc	r25, r15
   18364:	19 f4       	brne	.+6      	; 0x1836c <lif_seek_msg+0x28>
   18366:	81 e0       	ldi	r24, 0x01	; 1
   18368:	90 e0       	ldi	r25, 0x00	; 0
   1836a:	1b c0       	rjmp	.+54     	; 0x183a2 <lif_seek_msg+0x5e>
   1836c:	20 e0       	ldi	r18, 0x00	; 0
   1836e:	30 e0       	ldi	r19, 0x00	; 0
   18370:	b7 01       	movw	r22, r14
   18372:	a6 01       	movw	r20, r12
   18374:	ce 01       	movw	r24, r28
   18376:	0e 94 f4 7b 	call	0xf7e8	; 0xf7e8 <fseek>
   1837a:	97 ff       	sbrs	r25, 7
   1837c:	f4 cf       	rjmp	.-24     	; 0x18366 <lif_seek_msg+0x22>
   1837e:	ed b7       	in	r30, 0x3d	; 61
   18380:	fe b7       	in	r31, 0x3e	; 62
   18382:	c6 82       	std	Z+6, r12	; 0x06
   18384:	d7 82       	std	Z+7, r13	; 0x07
   18386:	e0 86       	std	Z+8, r14	; 0x08
   18388:	f1 86       	std	Z+9, r15	; 0x09
   1838a:	15 83       	std	Z+5, r17	; 0x05
   1838c:	04 83       	std	Z+4, r16	; 0x04
   1838e:	8f ee       	ldi	r24, 0xEF	; 239
   18390:	91 e4       	ldi	r25, 0x41	; 65
   18392:	a0 e0       	ldi	r26, 0x00	; 0
   18394:	81 83       	std	Z+1, r24	; 0x01
   18396:	92 83       	std	Z+2, r25	; 0x02
   18398:	a3 83       	std	Z+3, r26	; 0x03
   1839a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1839e:	80 e0       	ldi	r24, 0x00	; 0
   183a0:	90 e0       	ldi	r25, 0x00	; 0
   183a2:	cd b7       	in	r28, 0x3d	; 61
   183a4:	de b7       	in	r29, 0x3e	; 62
   183a6:	29 96       	adiw	r28, 0x09	; 9
   183a8:	e8 e0       	ldi	r30, 0x08	; 8
   183aa:	0c 94 ac e4 	jmp	0x1c958	; 0x1c958 <__epilogue_restores__+0x14>

000183ae <lif_read>:
   183ae:	af e0       	ldi	r26, 0x0F	; 15
   183b0:	b0 e0       	ldi	r27, 0x00	; 0
   183b2:	ed ed       	ldi	r30, 0xDD	; 221
   183b4:	f1 ec       	ldi	r31, 0xC1	; 193
   183b6:	0c 94 8c e4 	jmp	0x1c918	; 0x1c918 <__prologue_saves__+0xc>
   183ba:	ec 01       	movw	r28, r24
   183bc:	7b 01       	movw	r14, r22
   183be:	49 01       	movw	r8, r18
   183c0:	5a 01       	movw	r10, r20
   183c2:	28 81       	ld	r18, Y
   183c4:	39 81       	ldd	r19, Y+1	; 0x01
   183c6:	b5 01       	movw	r22, r10
   183c8:	a4 01       	movw	r20, r8
   183ca:	8a 81       	ldd	r24, Y+2	; 0x02
   183cc:	9b 81       	ldd	r25, Y+3	; 0x03
   183ce:	ba df       	rcall	.-140    	; 0x18344 <lif_seek_msg>
   183d0:	89 2b       	or	r24, r25
   183d2:	91 f1       	breq	.+100    	; 0x18438 <lif_read+0x8a>
   183d4:	2a 81       	ldd	r18, Y+2	; 0x02
   183d6:	3b 81       	ldd	r19, Y+3	; 0x03
   183d8:	a8 01       	movw	r20, r16
   183da:	61 e0       	ldi	r22, 0x01	; 1
   183dc:	70 e0       	ldi	r23, 0x00	; 0
   183de:	c7 01       	movw	r24, r14
   183e0:	0e 94 88 7c 	call	0xf910	; 0xf910 <fread>
   183e4:	6c 01       	movw	r12, r24
   183e6:	e1 2c       	mov	r14, r1
   183e8:	f1 2c       	mov	r15, r1
   183ea:	b8 01       	movw	r22, r16
   183ec:	01 2e       	mov	r0, r17
   183ee:	00 0c       	add	r0, r0
   183f0:	88 0b       	sbc	r24, r24
   183f2:	99 0b       	sbc	r25, r25
   183f4:	c6 16       	cp	r12, r22
   183f6:	d7 06       	cpc	r13, r23
   183f8:	e8 06       	cpc	r14, r24
   183fa:	f9 06       	cpc	r15, r25
   183fc:	19 f1       	breq	.+70     	; 0x18444 <lif_read+0x96>
   183fe:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   18402:	80 ff       	sbrs	r24, 0
   18404:	1d c0       	rjmp	.+58     	; 0x18440 <lif_read+0x92>
   18406:	ed b7       	in	r30, 0x3d	; 61
   18408:	fe b7       	in	r31, 0x3e	; 62
   1840a:	17 87       	std	Z+15, r17	; 0x0f
   1840c:	06 87       	std	Z+14, r16	; 0x0e
   1840e:	c2 86       	std	Z+10, r12	; 0x0a
   18410:	d3 86       	std	Z+11, r13	; 0x0b
   18412:	e4 86       	std	Z+12, r14	; 0x0c
   18414:	f5 86       	std	Z+13, r15	; 0x0d
   18416:	86 82       	std	Z+6, r8	; 0x06
   18418:	97 82       	std	Z+7, r9	; 0x07
   1841a:	a0 86       	std	Z+8, r10	; 0x08
   1841c:	b1 86       	std	Z+9, r11	; 0x09
   1841e:	88 81       	ld	r24, Y
   18420:	99 81       	ldd	r25, Y+1	; 0x01
   18422:	95 83       	std	Z+5, r25	; 0x05
   18424:	84 83       	std	Z+4, r24	; 0x04
   18426:	83 eb       	ldi	r24, 0xB3	; 179
   18428:	91 e4       	ldi	r25, 0x41	; 65
   1842a:	a0 e0       	ldi	r26, 0x00	; 0
   1842c:	81 83       	std	Z+1, r24	; 0x01
   1842e:	92 83       	std	Z+2, r25	; 0x02
   18430:	a3 83       	std	Z+3, r26	; 0x03
   18432:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   18436:	04 c0       	rjmp	.+8      	; 0x18440 <lif_read+0x92>
   18438:	60 e0       	ldi	r22, 0x00	; 0
   1843a:	70 e0       	ldi	r23, 0x00	; 0
   1843c:	cb 01       	movw	r24, r22
   1843e:	02 c0       	rjmp	.+4      	; 0x18444 <lif_read+0x96>
   18440:	c7 01       	movw	r24, r14
   18442:	b6 01       	movw	r22, r12
   18444:	cd b7       	in	r28, 0x3d	; 61
   18446:	de b7       	in	r29, 0x3e	; 62
   18448:	2f 96       	adiw	r28, 0x0f	; 15
   1844a:	ec e0       	ldi	r30, 0x0C	; 12
   1844c:	0c 94 a8 e4 	jmp	0x1c950	; 0x1c950 <__epilogue_restores__+0xc>

00018450 <lif_write>:
   18450:	8f 92       	push	r8
   18452:	9f 92       	push	r9
   18454:	af 92       	push	r10
   18456:	bf 92       	push	r11
   18458:	ef 92       	push	r14
   1845a:	ff 92       	push	r15
   1845c:	0f 93       	push	r16
   1845e:	1f 93       	push	r17
   18460:	cf 93       	push	r28
   18462:	df 93       	push	r29
   18464:	ad b7       	in	r26, 0x3d	; 61
   18466:	be b7       	in	r27, 0x3e	; 62
   18468:	1d 97       	sbiw	r26, 0x0d	; 13
   1846a:	0f b6       	in	r0, 0x3f	; 63
   1846c:	f8 94       	cli
   1846e:	be bf       	out	0x3e, r27	; 62
   18470:	0f be       	out	0x3f, r0	; 63
   18472:	ad bf       	out	0x3d, r26	; 61
   18474:	7c 01       	movw	r14, r24
   18476:	eb 01       	movw	r28, r22
   18478:	49 01       	movw	r8, r18
   1847a:	5a 01       	movw	r10, r20
   1847c:	fc 01       	movw	r30, r24
   1847e:	20 81       	ld	r18, Z
   18480:	31 81       	ldd	r19, Z+1	; 0x01
   18482:	b5 01       	movw	r22, r10
   18484:	a4 01       	movw	r20, r8
   18486:	82 81       	ldd	r24, Z+2	; 0x02
   18488:	93 81       	ldd	r25, Z+3	; 0x03
   1848a:	5c df       	rcall	.-328    	; 0x18344 <lif_seek_msg>
   1848c:	00 97       	sbiw	r24, 0x00	; 0
   1848e:	71 f1       	breq	.+92     	; 0x184ec <lif_write+0x9c>
   18490:	f7 01       	movw	r30, r14
   18492:	22 81       	ldd	r18, Z+2	; 0x02
   18494:	33 81       	ldd	r19, Z+3	; 0x03
   18496:	a8 01       	movw	r20, r16
   18498:	61 e0       	ldi	r22, 0x01	; 1
   1849a:	70 e0       	ldi	r23, 0x00	; 0
   1849c:	ce 01       	movw	r24, r28
   1849e:	0e 94 5a 7d 	call	0xfab4	; 0xfab4 <fwrite>
   184a2:	ec 01       	movw	r28, r24
   184a4:	08 17       	cp	r16, r24
   184a6:	19 07       	cpc	r17, r25
   184a8:	f1 f0       	breq	.+60     	; 0x184e6 <lif_write+0x96>
   184aa:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   184ae:	80 ff       	sbrs	r24, 0
   184b0:	1c c0       	rjmp	.+56     	; 0x184ea <lif_write+0x9a>
   184b2:	ed b7       	in	r30, 0x3d	; 61
   184b4:	fe b7       	in	r31, 0x3e	; 62
   184b6:	15 87       	std	Z+13, r17	; 0x0d
   184b8:	04 87       	std	Z+12, r16	; 0x0c
   184ba:	d3 87       	std	Z+11, r29	; 0x0b
   184bc:	c2 87       	std	Z+10, r28	; 0x0a
   184be:	86 82       	std	Z+6, r8	; 0x06
   184c0:	97 82       	std	Z+7, r9	; 0x07
   184c2:	a0 86       	std	Z+8, r10	; 0x08
   184c4:	b1 86       	std	Z+9, r11	; 0x09
   184c6:	f7 01       	movw	r30, r14
   184c8:	80 81       	ld	r24, Z
   184ca:	91 81       	ldd	r25, Z+1	; 0x01
   184cc:	ed b7       	in	r30, 0x3d	; 61
   184ce:	fe b7       	in	r31, 0x3e	; 62
   184d0:	95 83       	std	Z+5, r25	; 0x05
   184d2:	84 83       	std	Z+4, r24	; 0x04
   184d4:	86 e7       	ldi	r24, 0x76	; 118
   184d6:	91 e4       	ldi	r25, 0x41	; 65
   184d8:	a0 e0       	ldi	r26, 0x00	; 0
   184da:	81 83       	std	Z+1, r24	; 0x01
   184dc:	92 83       	std	Z+2, r25	; 0x02
   184de:	a3 83       	std	Z+3, r26	; 0x03
   184e0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   184e4:	02 c0       	rjmp	.+4      	; 0x184ea <lif_write+0x9a>
   184e6:	c8 01       	movw	r24, r16
   184e8:	01 c0       	rjmp	.+2      	; 0x184ec <lif_write+0x9c>
   184ea:	ce 01       	movw	r24, r28
   184ec:	ad b7       	in	r26, 0x3d	; 61
   184ee:	be b7       	in	r27, 0x3e	; 62
   184f0:	1d 96       	adiw	r26, 0x0d	; 13
   184f2:	0f b6       	in	r0, 0x3f	; 63
   184f4:	f8 94       	cli
   184f6:	be bf       	out	0x3e, r27	; 62
   184f8:	0f be       	out	0x3f, r0	; 63
   184fa:	ad bf       	out	0x3d, r26	; 61
   184fc:	df 91       	pop	r29
   184fe:	cf 91       	pop	r28
   18500:	1f 91       	pop	r17
   18502:	0f 91       	pop	r16
   18504:	ff 90       	pop	r15
   18506:	ef 90       	pop	r14
   18508:	bf 90       	pop	r11
   1850a:	af 90       	pop	r10
   1850c:	9f 90       	pop	r9
   1850e:	8f 90       	pop	r8
   18510:	08 95       	ret

00018512 <lif_chars>:
   18512:	80 32       	cpi	r24, 0x20	; 32
   18514:	91 05       	cpc	r25, r1
   18516:	e1 f0       	breq	.+56     	; 0x18550 <lif_chars+0x3e>
   18518:	9c 01       	movw	r18, r24
   1851a:	21 56       	subi	r18, 0x61	; 97
   1851c:	31 09       	sbc	r19, r1
   1851e:	2a 31       	cpi	r18, 0x1A	; 26
   18520:	31 05       	cpc	r19, r1
   18522:	10 f4       	brcc	.+4      	; 0x18528 <lif_chars+0x16>
   18524:	80 97       	sbiw	r24, 0x20	; 32
   18526:	08 95       	ret
   18528:	9c 01       	movw	r18, r24
   1852a:	21 54       	subi	r18, 0x41	; 65
   1852c:	31 09       	sbc	r19, r1
   1852e:	2a 31       	cpi	r18, 0x1A	; 26
   18530:	31 05       	cpc	r19, r1
   18532:	c8 f0       	brcs	.+50     	; 0x18566 <lif_chars+0x54>
   18534:	16 16       	cp	r1, r22
   18536:	17 06       	cpc	r1, r23
   18538:	74 f4       	brge	.+28     	; 0x18556 <lif_chars+0x44>
   1853a:	2f 5e       	subi	r18, 0xEF	; 239
   1853c:	3f 4f       	sbci	r19, 0xFF	; 255
   1853e:	2a 30       	cpi	r18, 0x0A	; 10
   18540:	31 05       	cpc	r19, r1
   18542:	88 f0       	brcs	.+34     	; 0x18566 <lif_chars+0x54>
   18544:	8f 35       	cpi	r24, 0x5F	; 95
   18546:	91 05       	cpc	r25, r1
   18548:	49 f0       	breq	.+18     	; 0x1855c <lif_chars+0x4a>
   1854a:	8d 97       	sbiw	r24, 0x2d	; 45
   1854c:	21 f4       	brne	.+8      	; 0x18556 <lif_chars+0x44>
   1854e:	09 c0       	rjmp	.+18     	; 0x18562 <lif_chars+0x50>
   18550:	80 e2       	ldi	r24, 0x20	; 32
   18552:	90 e0       	ldi	r25, 0x00	; 0
   18554:	08 95       	ret
   18556:	80 e0       	ldi	r24, 0x00	; 0
   18558:	90 e0       	ldi	r25, 0x00	; 0
   1855a:	08 95       	ret
   1855c:	8f e5       	ldi	r24, 0x5F	; 95
   1855e:	90 e0       	ldi	r25, 0x00	; 0
   18560:	08 95       	ret
   18562:	8d e2       	ldi	r24, 0x2D	; 45
   18564:	90 e0       	ldi	r25, 0x00	; 0
   18566:	08 95       	ret

00018568 <lif_B2S>:
   18568:	a0 e0       	ldi	r26, 0x00	; 0
   1856a:	b0 e0       	ldi	r27, 0x00	; 0
   1856c:	ea eb       	ldi	r30, 0xBA	; 186
   1856e:	f2 ec       	ldi	r31, 0xC2	; 194
   18570:	0c 94 8c e4 	jmp	0x1c918	; 0x1c918 <__prologue_saves__+0xc>
   18574:	5c 01       	movw	r10, r24
   18576:	6b 01       	movw	r12, r22
   18578:	ea 01       	movw	r28, r20
   1857a:	4c 01       	movw	r8, r24
   1857c:	ee 24       	eor	r14, r14
   1857e:	e3 94       	inc	r14
   18580:	f1 2c       	mov	r15, r1
   18582:	00 e0       	ldi	r16, 0x00	; 0
   18584:	10 e0       	ldi	r17, 0x00	; 0
   18586:	0c 17       	cp	r16, r28
   18588:	1d 07       	cpc	r17, r29
   1858a:	6c f4       	brge	.+26     	; 0x185a6 <lif_B2S+0x3e>
   1858c:	f4 01       	movw	r30, r8
   1858e:	81 91       	ld	r24, Z+
   18590:	4f 01       	movw	r8, r30
   18592:	b8 01       	movw	r22, r16
   18594:	90 e0       	ldi	r25, 0x00	; 0
   18596:	bd df       	rcall	.-134    	; 0x18512 <lif_chars>
   18598:	89 2b       	or	r24, r25
   1859a:	11 f4       	brne	.+4      	; 0x185a0 <lif_B2S+0x38>
   1859c:	e1 2c       	mov	r14, r1
   1859e:	f1 2c       	mov	r15, r1
   185a0:	0f 5f       	subi	r16, 0xFF	; 255
   185a2:	1f 4f       	sbci	r17, 0xFF	; 255
   185a4:	f0 cf       	rjmp	.-32     	; 0x18586 <lif_B2S+0x1e>
   185a6:	d6 01       	movw	r26, r12
   185a8:	f5 01       	movw	r30, r10
   185aa:	cf 01       	movw	r24, r30
   185ac:	8a 19       	sub	r24, r10
   185ae:	9b 09       	sbc	r25, r11
   185b0:	8c 17       	cp	r24, r28
   185b2:	9d 07       	cpc	r25, r29
   185b4:	1c f4       	brge	.+6      	; 0x185bc <lif_B2S+0x54>
   185b6:	81 91       	ld	r24, Z+
   185b8:	8d 93       	st	X+, r24
   185ba:	f7 cf       	rjmp	.-18     	; 0x185aa <lif_B2S+0x42>
   185bc:	d7 ff       	sbrs	r29, 7
   185be:	02 c0       	rjmp	.+4      	; 0x185c4 <lif_B2S+0x5c>
   185c0:	c0 e0       	ldi	r28, 0x00	; 0
   185c2:	d0 e0       	ldi	r29, 0x00	; 0
   185c4:	cc 0d       	add	r28, r12
   185c6:	dd 1d       	adc	r29, r13
   185c8:	18 82       	st	Y, r1
   185ca:	c6 01       	movw	r24, r12
   185cc:	0e 94 3f 33 	call	0x667e	; 0x667e <trim_tail>
   185d0:	c7 01       	movw	r24, r14
   185d2:	cd b7       	in	r28, 0x3d	; 61
   185d4:	de b7       	in	r29, 0x3e	; 62
   185d6:	ec e0       	ldi	r30, 0x0C	; 12
   185d8:	0c 94 a8 e4 	jmp	0x1c950	; 0x1c950 <__epilogue_restores__+0xc>

000185dc <lif_checkname>:
   185dc:	ef 92       	push	r14
   185de:	ff 92       	push	r15
   185e0:	0f 93       	push	r16
   185e2:	1f 93       	push	r17
   185e4:	cf 93       	push	r28
   185e6:	df 93       	push	r29
   185e8:	7c 01       	movw	r14, r24
   185ea:	ec 01       	movw	r28, r24
   185ec:	01 e0       	ldi	r16, 0x01	; 1
   185ee:	10 e0       	ldi	r17, 0x00	; 0
   185f0:	be 01       	movw	r22, r28
   185f2:	6e 19       	sub	r22, r14
   185f4:	7f 09       	sbc	r23, r15
   185f6:	89 91       	ld	r24, Y+
   185f8:	88 23       	and	r24, r24
   185fa:	39 f0       	breq	.+14     	; 0x1860a <lif_checkname+0x2e>
   185fc:	90 e0       	ldi	r25, 0x00	; 0
   185fe:	89 df       	rcall	.-238    	; 0x18512 <lif_chars>
   18600:	89 2b       	or	r24, r25
   18602:	b1 f7       	brne	.-20     	; 0x185f0 <lif_checkname+0x14>
   18604:	00 e0       	ldi	r16, 0x00	; 0
   18606:	10 e0       	ldi	r17, 0x00	; 0
   18608:	f3 cf       	rjmp	.-26     	; 0x185f0 <lif_checkname+0x14>
   1860a:	c8 01       	movw	r24, r16
   1860c:	cd b7       	in	r28, 0x3d	; 61
   1860e:	de b7       	in	r29, 0x3e	; 62
   18610:	e6 e0       	ldi	r30, 0x06	; 6
   18612:	0c 94 ae e4 	jmp	0x1c95c	; 0x1c95c <__epilogue_restores__+0x18>

00018616 <lif_S2B>:
   18616:	fb 01       	movw	r30, r22
   18618:	dc 01       	movw	r26, r24
   1861a:	20 e0       	ldi	r18, 0x00	; 0
   1861c:	30 e0       	ldi	r19, 0x00	; 0
   1861e:	61 91       	ld	r22, Z+
   18620:	61 11       	cpse	r22, r1
   18622:	05 c0       	rjmp	.+10     	; 0x1862e <lif_S2B+0x18>
   18624:	fc 01       	movw	r30, r24
   18626:	e2 0f       	add	r30, r18
   18628:	f3 1f       	adc	r31, r19
   1862a:	60 e2       	ldi	r22, 0x20	; 32
   1862c:	08 c0       	rjmp	.+16     	; 0x1863e <lif_S2B+0x28>
   1862e:	24 17       	cp	r18, r20
   18630:	35 07       	cpc	r19, r21
   18632:	24 f4       	brge	.+8      	; 0x1863c <lif_S2B+0x26>
   18634:	6d 93       	st	X+, r22
   18636:	2f 5f       	subi	r18, 0xFF	; 255
   18638:	3f 4f       	sbci	r19, 0xFF	; 255
   1863a:	f1 cf       	rjmp	.-30     	; 0x1861e <lif_S2B+0x8>
   1863c:	08 95       	ret
   1863e:	9f 01       	movw	r18, r30
   18640:	28 1b       	sub	r18, r24
   18642:	39 0b       	sbc	r19, r25
   18644:	24 17       	cp	r18, r20
   18646:	35 07       	cpc	r19, r21
   18648:	14 f4       	brge	.+4      	; 0x1864e <lif_S2B+0x38>
   1864a:	61 93       	st	Z+, r22
   1864c:	f8 cf       	rjmp	.-16     	; 0x1863e <lif_S2B+0x28>
   1864e:	08 95       	ret

00018650 <lif_fixname>:
   18650:	a0 e0       	ldi	r26, 0x00	; 0
   18652:	b0 e0       	ldi	r27, 0x00	; 0
   18654:	ee e2       	ldi	r30, 0x2E	; 46
   18656:	f3 ec       	ldi	r31, 0xC3	; 195
   18658:	0c 94 8f e4 	jmp	0x1c91e	; 0x1c91e <__prologue_saves__+0x12>
   1865c:	8c 01       	movw	r16, r24
   1865e:	cb 01       	movw	r24, r22
   18660:	7a 01       	movw	r14, r20
   18662:	0e 94 03 78 	call	0xf006	; 0xf006 <basename>
   18666:	6c 01       	movw	r12, r24
   18668:	e8 01       	movw	r28, r16
   1866a:	80 e2       	ldi	r24, 0x20	; 32
   1866c:	b8 2e       	mov	r11, r24
   1866e:	be 01       	movw	r22, r28
   18670:	60 1b       	sub	r22, r16
   18672:	71 0b       	sbc	r23, r17
   18674:	f6 01       	movw	r30, r12
   18676:	81 91       	ld	r24, Z+
   18678:	6f 01       	movw	r12, r30
   1867a:	81 11       	cpse	r24, r1
   1867c:	02 c0       	rjmp	.+4      	; 0x18682 <lif_fixname+0x32>
   1867e:	20 e2       	ldi	r18, 0x20	; 32
   18680:	0e c0       	rjmp	.+28     	; 0x1869e <lif_fixname+0x4e>
   18682:	1e 14       	cp	r1, r14
   18684:	1f 04       	cpc	r1, r15
   18686:	dc f7       	brge	.-10     	; 0x1867e <lif_fixname+0x2e>
   18688:	8e 32       	cpi	r24, 0x2E	; 46
   1868a:	c9 f3       	breq	.-14     	; 0x1867e <lif_fixname+0x2e>
   1868c:	90 e0       	ldi	r25, 0x00	; 0
   1868e:	41 df       	rcall	.-382    	; 0x18512 <lif_chars>
   18690:	88 23       	and	r24, r24
   18692:	11 f0       	breq	.+4      	; 0x18698 <lif_fixname+0x48>
   18694:	88 83       	st	Y, r24
   18696:	01 c0       	rjmp	.+2      	; 0x1869a <lif_fixname+0x4a>
   18698:	b8 82       	st	Y, r11
   1869a:	21 96       	adiw	r28, 0x01	; 1
   1869c:	e8 cf       	rjmp	.-48     	; 0x1866e <lif_fixname+0x1e>
   1869e:	ce 01       	movw	r24, r28
   186a0:	80 1b       	sub	r24, r16
   186a2:	91 0b       	sbc	r25, r17
   186a4:	8e 15       	cp	r24, r14
   186a6:	9f 05       	cpc	r25, r15
   186a8:	14 f4       	brge	.+4      	; 0x186ae <lif_fixname+0x5e>
   186aa:	29 93       	st	Y+, r18
   186ac:	f8 cf       	rjmp	.-16     	; 0x1869e <lif_fixname+0x4e>
   186ae:	18 82       	st	Y, r1
   186b0:	f8 01       	movw	r30, r16
   186b2:	01 90       	ld	r0, Z+
   186b4:	00 20       	and	r0, r0
   186b6:	e9 f7       	brne	.-6      	; 0x186b2 <lif_fixname+0x62>
   186b8:	cf 01       	movw	r24, r30
   186ba:	01 97       	sbiw	r24, 0x01	; 1
   186bc:	80 1b       	sub	r24, r16
   186be:	91 0b       	sbc	r25, r17
   186c0:	cd b7       	in	r28, 0x3d	; 61
   186c2:	de b7       	in	r29, 0x3e	; 62
   186c4:	e9 e0       	ldi	r30, 0x09	; 9
   186c6:	0c 94 ab e4 	jmp	0x1c956	; 0x1c956 <__epilogue_restores__+0x12>

000186ca <lif_vol2str>:
   186ca:	ef 92       	push	r14
   186cc:	ff 92       	push	r15
   186ce:	0f 93       	push	r16
   186d0:	1f 93       	push	r17
   186d2:	cf 93       	push	r28
   186d4:	df 93       	push	r29
   186d6:	7c 01       	movw	r14, r24
   186d8:	eb 01       	movw	r28, r22
   186da:	fc 01       	movw	r30, r24
   186dc:	04 a1       	ldd	r16, Z+36	; 0x24
   186de:	15 a1       	ldd	r17, Z+37	; 0x25
   186e0:	20 e0       	ldi	r18, 0x00	; 0
   186e2:	30 e0       	ldi	r19, 0x00	; 0
   186e4:	42 e0       	ldi	r20, 0x02	; 2
   186e6:	50 e0       	ldi	r21, 0x00	; 0
   186e8:	60 e0       	ldi	r22, 0x00	; 0
   186ea:	70 e0       	ldi	r23, 0x00	; 0
   186ec:	ce 01       	movw	r24, r28
   186ee:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   186f2:	b7 01       	movw	r22, r14
   186f4:	6a 5d       	subi	r22, 0xDA	; 218
   186f6:	7f 4f       	sbci	r23, 0xFF	; 255
   186f8:	46 e0       	ldi	r20, 0x06	; 6
   186fa:	50 e0       	ldi	r21, 0x00	; 0
   186fc:	ce 01       	movw	r24, r28
   186fe:	02 96       	adiw	r24, 0x02	; 2
   18700:	8a df       	rcall	.-236    	; 0x18616 <lif_S2B>
   18702:	f7 01       	movw	r30, r14
   18704:	05 a5       	ldd	r16, Z+45	; 0x2d
   18706:	16 a5       	ldd	r17, Z+46	; 0x2e
   18708:	27 a5       	ldd	r18, Z+47	; 0x2f
   1870a:	30 a9       	ldd	r19, Z+48	; 0x30
   1870c:	44 e0       	ldi	r20, 0x04	; 4
   1870e:	50 e0       	ldi	r21, 0x00	; 0
   18710:	68 e0       	ldi	r22, 0x08	; 8
   18712:	70 e0       	ldi	r23, 0x00	; 0
   18714:	ce 01       	movw	r24, r28
   18716:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   1871a:	f7 01       	movw	r30, r14
   1871c:	01 a9       	ldd	r16, Z+49	; 0x31
   1871e:	12 a9       	ldd	r17, Z+50	; 0x32
   18720:	20 e0       	ldi	r18, 0x00	; 0
   18722:	30 e0       	ldi	r19, 0x00	; 0
   18724:	42 e0       	ldi	r20, 0x02	; 2
   18726:	50 e0       	ldi	r21, 0x00	; 0
   18728:	6c e0       	ldi	r22, 0x0C	; 12
   1872a:	70 e0       	ldi	r23, 0x00	; 0
   1872c:	ce 01       	movw	r24, r28
   1872e:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   18732:	00 e0       	ldi	r16, 0x00	; 0
   18734:	10 e0       	ldi	r17, 0x00	; 0
   18736:	98 01       	movw	r18, r16
   18738:	42 e0       	ldi	r20, 0x02	; 2
   1873a:	50 e0       	ldi	r21, 0x00	; 0
   1873c:	6e e0       	ldi	r22, 0x0E	; 14
   1873e:	70 e0       	ldi	r23, 0x00	; 0
   18740:	ce 01       	movw	r24, r28
   18742:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   18746:	f7 01       	movw	r30, r14
   18748:	05 a9       	ldd	r16, Z+53	; 0x35
   1874a:	16 a9       	ldd	r17, Z+54	; 0x36
   1874c:	27 a9       	ldd	r18, Z+55	; 0x37
   1874e:	30 ad       	ldd	r19, Z+56	; 0x38
   18750:	44 e0       	ldi	r20, 0x04	; 4
   18752:	50 e0       	ldi	r21, 0x00	; 0
   18754:	60 e1       	ldi	r22, 0x10	; 16
   18756:	70 e0       	ldi	r23, 0x00	; 0
   18758:	ce 01       	movw	r24, r28
   1875a:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   1875e:	f7 01       	movw	r30, r14
   18760:	01 ad       	ldd	r16, Z+57	; 0x39
   18762:	12 ad       	ldd	r17, Z+58	; 0x3a
   18764:	20 e0       	ldi	r18, 0x00	; 0
   18766:	30 e0       	ldi	r19, 0x00	; 0
   18768:	42 e0       	ldi	r20, 0x02	; 2
   1876a:	50 e0       	ldi	r21, 0x00	; 0
   1876c:	64 e1       	ldi	r22, 0x14	; 20
   1876e:	70 e0       	ldi	r23, 0x00	; 0
   18770:	ce 01       	movw	r24, r28
   18772:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   18776:	00 e0       	ldi	r16, 0x00	; 0
   18778:	10 e0       	ldi	r17, 0x00	; 0
   1877a:	98 01       	movw	r18, r16
   1877c:	42 e0       	ldi	r20, 0x02	; 2
   1877e:	50 e0       	ldi	r21, 0x00	; 0
   18780:	66 e1       	ldi	r22, 0x16	; 22
   18782:	70 e0       	ldi	r23, 0x00	; 0
   18784:	ce 01       	movw	r24, r28
   18786:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   1878a:	f7 01       	movw	r30, r14
   1878c:	fd 96       	adiw	r30, 0x3d	; 61
   1878e:	00 81       	ld	r16, Z
   18790:	11 81       	ldd	r17, Z+1	; 0x01
   18792:	22 81       	ldd	r18, Z+2	; 0x02
   18794:	33 81       	ldd	r19, Z+3	; 0x03
   18796:	44 e0       	ldi	r20, 0x04	; 4
   18798:	50 e0       	ldi	r21, 0x00	; 0
   1879a:	68 e1       	ldi	r22, 0x18	; 24
   1879c:	70 e0       	ldi	r23, 0x00	; 0
   1879e:	ce 01       	movw	r24, r28
   187a0:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   187a4:	f7 01       	movw	r30, r14
   187a6:	ef 5b       	subi	r30, 0xBF	; 191
   187a8:	ff 4f       	sbci	r31, 0xFF	; 255
   187aa:	00 81       	ld	r16, Z
   187ac:	11 81       	ldd	r17, Z+1	; 0x01
   187ae:	22 81       	ldd	r18, Z+2	; 0x02
   187b0:	33 81       	ldd	r19, Z+3	; 0x03
   187b2:	44 e0       	ldi	r20, 0x04	; 4
   187b4:	50 e0       	ldi	r21, 0x00	; 0
   187b6:	6c e1       	ldi	r22, 0x1C	; 28
   187b8:	70 e0       	ldi	r23, 0x00	; 0
   187ba:	ce 01       	movw	r24, r28
   187bc:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   187c0:	f7 01       	movw	r30, r14
   187c2:	eb 5b       	subi	r30, 0xBB	; 187
   187c4:	ff 4f       	sbci	r31, 0xFF	; 255
   187c6:	00 81       	ld	r16, Z
   187c8:	11 81       	ldd	r17, Z+1	; 0x01
   187ca:	22 81       	ldd	r18, Z+2	; 0x02
   187cc:	33 81       	ldd	r19, Z+3	; 0x03
   187ce:	44 e0       	ldi	r20, 0x04	; 4
   187d0:	50 e0       	ldi	r21, 0x00	; 0
   187d2:	60 e2       	ldi	r22, 0x20	; 32
   187d4:	70 e0       	ldi	r23, 0x00	; 0
   187d6:	ce 01       	movw	r24, r28
   187d8:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   187dc:	de 01       	movw	r26, r28
   187de:	94 96       	adiw	r26, 0x24	; 36
   187e0:	f7 01       	movw	r30, r14
   187e2:	e7 5b       	subi	r30, 0xB7	; 183
   187e4:	ff 4f       	sbci	r31, 0xFF	; 255
   187e6:	86 e0       	ldi	r24, 0x06	; 6
   187e8:	01 90       	ld	r0, Z+
   187ea:	0d 92       	st	X+, r0
   187ec:	8a 95       	dec	r24
   187ee:	e1 f7       	brne	.-8      	; 0x187e8 <lif_vol2str+0x11e>
   187f0:	cd b7       	in	r28, 0x3d	; 61
   187f2:	de b7       	in	r29, 0x3e	; 62
   187f4:	e6 e0       	ldi	r30, 0x06	; 6
   187f6:	0c 94 ae e4 	jmp	0x1c95c	; 0x1c95c <__epilogue_restores__+0x18>

000187fa <lif_str2vol>:
   187fa:	0f 93       	push	r16
   187fc:	1f 93       	push	r17
   187fe:	cf 93       	push	r28
   18800:	df 93       	push	r29
   18802:	8c 01       	movw	r16, r24
   18804:	eb 01       	movw	r28, r22
   18806:	42 e0       	ldi	r20, 0x02	; 2
   18808:	50 e0       	ldi	r21, 0x00	; 0
   1880a:	60 e0       	ldi	r22, 0x00	; 0
   1880c:	70 e0       	ldi	r23, 0x00	; 0
   1880e:	0e 94 7f 93 	call	0x126fe	; 0x126fe <B2V_MSB>
   18812:	7d a3       	std	Y+37, r23	; 0x25
   18814:	6c a3       	std	Y+36, r22	; 0x24
   18816:	be 01       	movw	r22, r28
   18818:	6a 5d       	subi	r22, 0xDA	; 218
   1881a:	7f 4f       	sbci	r23, 0xFF	; 255
   1881c:	46 e0       	ldi	r20, 0x06	; 6
   1881e:	50 e0       	ldi	r21, 0x00	; 0
   18820:	c8 01       	movw	r24, r16
   18822:	02 96       	adiw	r24, 0x02	; 2
   18824:	a1 de       	rcall	.-702    	; 0x18568 <lif_B2S>
   18826:	44 e0       	ldi	r20, 0x04	; 4
   18828:	50 e0       	ldi	r21, 0x00	; 0
   1882a:	68 e0       	ldi	r22, 0x08	; 8
   1882c:	70 e0       	ldi	r23, 0x00	; 0
   1882e:	c8 01       	movw	r24, r16
   18830:	0e 94 7f 93 	call	0x126fe	; 0x126fe <B2V_MSB>
   18834:	6d a7       	std	Y+45, r22	; 0x2d
   18836:	7e a7       	std	Y+46, r23	; 0x2e
   18838:	8f a7       	std	Y+47, r24	; 0x2f
   1883a:	98 ab       	std	Y+48, r25	; 0x30
   1883c:	42 e0       	ldi	r20, 0x02	; 2
   1883e:	50 e0       	ldi	r21, 0x00	; 0
   18840:	6c e0       	ldi	r22, 0x0C	; 12
   18842:	70 e0       	ldi	r23, 0x00	; 0
   18844:	c8 01       	movw	r24, r16
   18846:	0e 94 7f 93 	call	0x126fe	; 0x126fe <B2V_MSB>
   1884a:	7a ab       	std	Y+50, r23	; 0x32
   1884c:	69 ab       	std	Y+49, r22	; 0x31
   1884e:	42 e0       	ldi	r20, 0x02	; 2
   18850:	50 e0       	ldi	r21, 0x00	; 0
   18852:	6e e0       	ldi	r22, 0x0E	; 14
   18854:	70 e0       	ldi	r23, 0x00	; 0
   18856:	c8 01       	movw	r24, r16
   18858:	0e 94 7f 93 	call	0x126fe	; 0x126fe <B2V_MSB>
   1885c:	7c ab       	std	Y+52, r23	; 0x34
   1885e:	6b ab       	std	Y+51, r22	; 0x33
   18860:	44 e0       	ldi	r20, 0x04	; 4
   18862:	50 e0       	ldi	r21, 0x00	; 0
   18864:	60 e1       	ldi	r22, 0x10	; 16
   18866:	70 e0       	ldi	r23, 0x00	; 0
   18868:	c8 01       	movw	r24, r16
   1886a:	0e 94 7f 93 	call	0x126fe	; 0x126fe <B2V_MSB>
   1886e:	6d ab       	std	Y+53, r22	; 0x35
   18870:	7e ab       	std	Y+54, r23	; 0x36
   18872:	8f ab       	std	Y+55, r24	; 0x37
   18874:	98 af       	std	Y+56, r25	; 0x38
   18876:	42 e0       	ldi	r20, 0x02	; 2
   18878:	50 e0       	ldi	r21, 0x00	; 0
   1887a:	64 e1       	ldi	r22, 0x14	; 20
   1887c:	70 e0       	ldi	r23, 0x00	; 0
   1887e:	c8 01       	movw	r24, r16
   18880:	0e 94 7f 93 	call	0x126fe	; 0x126fe <B2V_MSB>
   18884:	7a af       	std	Y+58, r23	; 0x3a
   18886:	69 af       	std	Y+57, r22	; 0x39
   18888:	42 e0       	ldi	r20, 0x02	; 2
   1888a:	50 e0       	ldi	r21, 0x00	; 0
   1888c:	66 e1       	ldi	r22, 0x16	; 22
   1888e:	70 e0       	ldi	r23, 0x00	; 0
   18890:	c8 01       	movw	r24, r16
   18892:	0e 94 7f 93 	call	0x126fe	; 0x126fe <B2V_MSB>
   18896:	7c af       	std	Y+60, r23	; 0x3c
   18898:	6b af       	std	Y+59, r22	; 0x3b
   1889a:	44 e0       	ldi	r20, 0x04	; 4
   1889c:	50 e0       	ldi	r21, 0x00	; 0
   1889e:	68 e1       	ldi	r22, 0x18	; 24
   188a0:	70 e0       	ldi	r23, 0x00	; 0
   188a2:	c8 01       	movw	r24, r16
   188a4:	0e 94 7f 93 	call	0x126fe	; 0x126fe <B2V_MSB>
   188a8:	fe 01       	movw	r30, r28
   188aa:	fd 96       	adiw	r30, 0x3d	; 61
   188ac:	60 83       	st	Z, r22
   188ae:	71 83       	std	Z+1, r23	; 0x01
   188b0:	82 83       	std	Z+2, r24	; 0x02
   188b2:	93 83       	std	Z+3, r25	; 0x03
   188b4:	44 e0       	ldi	r20, 0x04	; 4
   188b6:	50 e0       	ldi	r21, 0x00	; 0
   188b8:	6c e1       	ldi	r22, 0x1C	; 28
   188ba:	70 e0       	ldi	r23, 0x00	; 0
   188bc:	c8 01       	movw	r24, r16
   188be:	0e 94 7f 93 	call	0x126fe	; 0x126fe <B2V_MSB>
   188c2:	fe 01       	movw	r30, r28
   188c4:	ef 5b       	subi	r30, 0xBF	; 191
   188c6:	ff 4f       	sbci	r31, 0xFF	; 255
   188c8:	60 83       	st	Z, r22
   188ca:	71 83       	std	Z+1, r23	; 0x01
   188cc:	82 83       	std	Z+2, r24	; 0x02
   188ce:	93 83       	std	Z+3, r25	; 0x03
   188d0:	44 e0       	ldi	r20, 0x04	; 4
   188d2:	50 e0       	ldi	r21, 0x00	; 0
   188d4:	60 e2       	ldi	r22, 0x20	; 32
   188d6:	70 e0       	ldi	r23, 0x00	; 0
   188d8:	c8 01       	movw	r24, r16
   188da:	0e 94 7f 93 	call	0x126fe	; 0x126fe <B2V_MSB>
   188de:	fe 01       	movw	r30, r28
   188e0:	eb 5b       	subi	r30, 0xBB	; 187
   188e2:	ff 4f       	sbci	r31, 0xFF	; 255
   188e4:	60 83       	st	Z, r22
   188e6:	71 83       	std	Z+1, r23	; 0x01
   188e8:	82 83       	std	Z+2, r24	; 0x02
   188ea:	93 83       	std	Z+3, r25	; 0x03
   188ec:	de 01       	movw	r26, r28
   188ee:	a7 5b       	subi	r26, 0xB7	; 183
   188f0:	bf 4f       	sbci	r27, 0xFF	; 255
   188f2:	f8 01       	movw	r30, r16
   188f4:	b4 96       	adiw	r30, 0x24	; 36
   188f6:	86 e0       	ldi	r24, 0x06	; 6
   188f8:	01 90       	ld	r0, Z+
   188fa:	0d 92       	st	X+, r0
   188fc:	8a 95       	dec	r24
   188fe:	e1 f7       	brne	.-8      	; 0x188f8 <lif_str2vol+0xfe>
   18900:	df 91       	pop	r29
   18902:	cf 91       	pop	r28
   18904:	1f 91       	pop	r17
   18906:	0f 91       	pop	r16
   18908:	08 95       	ret

0001890a <lif_dir2str>:
   1890a:	ef 92       	push	r14
   1890c:	ff 92       	push	r15
   1890e:	0f 93       	push	r16
   18910:	1f 93       	push	r17
   18912:	cf 93       	push	r28
   18914:	df 93       	push	r29
   18916:	ec 01       	movw	r28, r24
   18918:	7b 01       	movw	r14, r22
   1891a:	bc 01       	movw	r22, r24
   1891c:	61 5b       	subi	r22, 0xB1	; 177
   1891e:	7f 4f       	sbci	r23, 0xFF	; 255
   18920:	4a e0       	ldi	r20, 0x0A	; 10
   18922:	50 e0       	ldi	r21, 0x00	; 0
   18924:	c7 01       	movw	r24, r14
   18926:	77 de       	rcall	.-786    	; 0x18616 <lif_S2B>
   18928:	fe 01       	movw	r30, r28
   1892a:	e6 5a       	subi	r30, 0xA6	; 166
   1892c:	ff 4f       	sbci	r31, 0xFF	; 255
   1892e:	00 81       	ld	r16, Z
   18930:	11 81       	ldd	r17, Z+1	; 0x01
   18932:	20 e0       	ldi	r18, 0x00	; 0
   18934:	30 e0       	ldi	r19, 0x00	; 0
   18936:	42 e0       	ldi	r20, 0x02	; 2
   18938:	50 e0       	ldi	r21, 0x00	; 0
   1893a:	6a e0       	ldi	r22, 0x0A	; 10
   1893c:	70 e0       	ldi	r23, 0x00	; 0
   1893e:	c7 01       	movw	r24, r14
   18940:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   18944:	fe 01       	movw	r30, r28
   18946:	e4 5a       	subi	r30, 0xA4	; 164
   18948:	ff 4f       	sbci	r31, 0xFF	; 255
   1894a:	00 81       	ld	r16, Z
   1894c:	11 81       	ldd	r17, Z+1	; 0x01
   1894e:	22 81       	ldd	r18, Z+2	; 0x02
   18950:	33 81       	ldd	r19, Z+3	; 0x03
   18952:	44 e0       	ldi	r20, 0x04	; 4
   18954:	50 e0       	ldi	r21, 0x00	; 0
   18956:	6c e0       	ldi	r22, 0x0C	; 12
   18958:	70 e0       	ldi	r23, 0x00	; 0
   1895a:	c7 01       	movw	r24, r14
   1895c:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   18960:	fe 01       	movw	r30, r28
   18962:	e0 5a       	subi	r30, 0xA0	; 160
   18964:	ff 4f       	sbci	r31, 0xFF	; 255
   18966:	00 81       	ld	r16, Z
   18968:	11 81       	ldd	r17, Z+1	; 0x01
   1896a:	22 81       	ldd	r18, Z+2	; 0x02
   1896c:	33 81       	ldd	r19, Z+3	; 0x03
   1896e:	44 e0       	ldi	r20, 0x04	; 4
   18970:	50 e0       	ldi	r21, 0x00	; 0
   18972:	60 e1       	ldi	r22, 0x10	; 16
   18974:	70 e0       	ldi	r23, 0x00	; 0
   18976:	c7 01       	movw	r24, r14
   18978:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   1897c:	d7 01       	movw	r26, r14
   1897e:	54 96       	adiw	r26, 0x14	; 20
   18980:	fe 01       	movw	r30, r28
   18982:	ec 59       	subi	r30, 0x9C	; 156
   18984:	ff 4f       	sbci	r31, 0xFF	; 255
   18986:	86 e0       	ldi	r24, 0x06	; 6
   18988:	01 90       	ld	r0, Z+
   1898a:	0d 92       	st	X+, r0
   1898c:	8a 95       	dec	r24
   1898e:	e1 f7       	brne	.-8      	; 0x18988 <lif_dir2str+0x7e>
   18990:	fe 01       	movw	r30, r28
   18992:	e6 59       	subi	r30, 0x96	; 150
   18994:	ff 4f       	sbci	r31, 0xFF	; 255
   18996:	00 81       	ld	r16, Z
   18998:	11 81       	ldd	r17, Z+1	; 0x01
   1899a:	20 e0       	ldi	r18, 0x00	; 0
   1899c:	30 e0       	ldi	r19, 0x00	; 0
   1899e:	42 e0       	ldi	r20, 0x02	; 2
   189a0:	50 e0       	ldi	r21, 0x00	; 0
   189a2:	6a e1       	ldi	r22, 0x1A	; 26
   189a4:	70 e0       	ldi	r23, 0x00	; 0
   189a6:	c7 01       	movw	r24, r14
   189a8:	0e 94 56 93 	call	0x126ac	; 0x126ac <V2B_MSB>
   189ac:	fe 01       	movw	r30, r28
   189ae:	e4 59       	subi	r30, 0x94	; 148
   189b0:	ff 4f       	sbci	r31, 0xFF	; 255
   189b2:	00 81       	ld	r16, Z
   189b4:	11 81       	ldd	r17, Z+1	; 0x01
   189b6:	20 e0       	ldi	r18, 0x00	; 0
   189b8:	30 e0       	ldi	r19, 0x00	; 0
   189ba:	42 e0       	ldi	r20, 0x02	; 2
   189bc:	50 e0       	ldi	r21, 0x00	; 0
   189be:	6c e1       	ldi	r22, 0x1C	; 28
   189c0:	70 e0       	ldi	r23, 0x00	; 0
   189c2:	c7 01       	movw	r24, r14
   189c4:	0e 94 6a 93 	call	0x126d4	; 0x126d4 <V2B_LSB>
   189c8:	c2 59       	subi	r28, 0x92	; 146
   189ca:	df 4f       	sbci	r29, 0xFF	; 255
   189cc:	08 81       	ld	r16, Y
   189ce:	19 81       	ldd	r17, Y+1	; 0x01
   189d0:	20 e0       	ldi	r18, 0x00	; 0
   189d2:	30 e0       	ldi	r19, 0x00	; 0
   189d4:	42 e0       	ldi	r20, 0x02	; 2
   189d6:	50 e0       	ldi	r21, 0x00	; 0
   189d8:	6e e1       	ldi	r22, 0x1E	; 30
   189da:	70 e0       	ldi	r23, 0x00	; 0
   189dc:	c7 01       	movw	r24, r14
   189de:	0e 94 6a 93 	call	0x126d4	; 0x126d4 <V2B_LSB>
   189e2:	cd b7       	in	r28, 0x3d	; 61
   189e4:	de b7       	in	r29, 0x3e	; 62
   189e6:	e6 e0       	ldi	r30, 0x06	; 6
   189e8:	0c 94 ae e4 	jmp	0x1c95c	; 0x1c95c <__epilogue_restores__+0x18>

000189ec <lif_str2dir>:
   189ec:	0f 93       	push	r16
   189ee:	1f 93       	push	r17
   189f0:	cf 93       	push	r28
   189f2:	df 93       	push	r29
   189f4:	8c 01       	movw	r16, r24
   189f6:	eb 01       	movw	r28, r22
   189f8:	61 5b       	subi	r22, 0xB1	; 177
   189fa:	7f 4f       	sbci	r23, 0xFF	; 255
   189fc:	4a e0       	ldi	r20, 0x0A	; 10
   189fe:	50 e0       	ldi	r21, 0x00	; 0
   18a00:	b3 dd       	rcall	.-1178   	; 0x18568 <lif_B2S>
   18a02:	42 e0       	ldi	r20, 0x02	; 2
   18a04:	50 e0       	ldi	r21, 0x00	; 0
   18a06:	6a e0       	ldi	r22, 0x0A	; 10
   18a08:	70 e0       	ldi	r23, 0x00	; 0
   18a0a:	c8 01       	movw	r24, r16
   18a0c:	0e 94 7f 93 	call	0x126fe	; 0x126fe <B2V_MSB>
   18a10:	fe 01       	movw	r30, r28
   18a12:	e6 5a       	subi	r30, 0xA6	; 166
   18a14:	ff 4f       	sbci	r31, 0xFF	; 255
   18a16:	71 83       	std	Z+1, r23	; 0x01
   18a18:	60 83       	st	Z, r22
   18a1a:	44 e0       	ldi	r20, 0x04	; 4
   18a1c:	50 e0       	ldi	r21, 0x00	; 0
   18a1e:	6c e0       	ldi	r22, 0x0C	; 12
   18a20:	70 e0       	ldi	r23, 0x00	; 0
   18a22:	c8 01       	movw	r24, r16
   18a24:	0e 94 7f 93 	call	0x126fe	; 0x126fe <B2V_MSB>
   18a28:	fe 01       	movw	r30, r28
   18a2a:	e4 5a       	subi	r30, 0xA4	; 164
   18a2c:	ff 4f       	sbci	r31, 0xFF	; 255
   18a2e:	60 83       	st	Z, r22
   18a30:	71 83       	std	Z+1, r23	; 0x01
   18a32:	82 83       	std	Z+2, r24	; 0x02
   18a34:	93 83       	std	Z+3, r25	; 0x03
   18a36:	44 e0       	ldi	r20, 0x04	; 4
   18a38:	50 e0       	ldi	r21, 0x00	; 0
   18a3a:	60 e1       	ldi	r22, 0x10	; 16
   18a3c:	70 e0       	ldi	r23, 0x00	; 0
   18a3e:	c8 01       	movw	r24, r16
   18a40:	0e 94 7f 93 	call	0x126fe	; 0x126fe <B2V_MSB>
   18a44:	fe 01       	movw	r30, r28
   18a46:	e0 5a       	subi	r30, 0xA0	; 160
   18a48:	ff 4f       	sbci	r31, 0xFF	; 255
   18a4a:	60 83       	st	Z, r22
   18a4c:	71 83       	std	Z+1, r23	; 0x01
   18a4e:	82 83       	std	Z+2, r24	; 0x02
   18a50:	93 83       	std	Z+3, r25	; 0x03
   18a52:	de 01       	movw	r26, r28
   18a54:	ac 59       	subi	r26, 0x9C	; 156
   18a56:	bf 4f       	sbci	r27, 0xFF	; 255
   18a58:	f8 01       	movw	r30, r16
   18a5a:	74 96       	adiw	r30, 0x14	; 20
   18a5c:	86 e0       	ldi	r24, 0x06	; 6
   18a5e:	01 90       	ld	r0, Z+
   18a60:	0d 92       	st	X+, r0
   18a62:	8a 95       	dec	r24
   18a64:	e1 f7       	brne	.-8      	; 0x18a5e <lif_str2dir+0x72>
   18a66:	42 e0       	ldi	r20, 0x02	; 2
   18a68:	50 e0       	ldi	r21, 0x00	; 0
   18a6a:	6a e1       	ldi	r22, 0x1A	; 26
   18a6c:	70 e0       	ldi	r23, 0x00	; 0
   18a6e:	c8 01       	movw	r24, r16
   18a70:	0e 94 7f 93 	call	0x126fe	; 0x126fe <B2V_MSB>
   18a74:	fe 01       	movw	r30, r28
   18a76:	e6 59       	subi	r30, 0x96	; 150
   18a78:	ff 4f       	sbci	r31, 0xFF	; 255
   18a7a:	71 83       	std	Z+1, r23	; 0x01
   18a7c:	60 83       	st	Z, r22
   18a7e:	42 e0       	ldi	r20, 0x02	; 2
   18a80:	50 e0       	ldi	r21, 0x00	; 0
   18a82:	6c e1       	ldi	r22, 0x1C	; 28
   18a84:	70 e0       	ldi	r23, 0x00	; 0
   18a86:	c8 01       	movw	r24, r16
   18a88:	0e 94 9e 93 	call	0x1273c	; 0x1273c <B2V_LSB>
   18a8c:	fe 01       	movw	r30, r28
   18a8e:	e4 59       	subi	r30, 0x94	; 148
   18a90:	ff 4f       	sbci	r31, 0xFF	; 255
   18a92:	71 83       	std	Z+1, r23	; 0x01
   18a94:	60 83       	st	Z, r22
   18a96:	42 e0       	ldi	r20, 0x02	; 2
   18a98:	50 e0       	ldi	r21, 0x00	; 0
   18a9a:	6e e1       	ldi	r22, 0x1E	; 30
   18a9c:	70 e0       	ldi	r23, 0x00	; 0
   18a9e:	c8 01       	movw	r24, r16
   18aa0:	0e 94 9e 93 	call	0x1273c	; 0x1273c <B2V_LSB>
   18aa4:	c2 59       	subi	r28, 0x92	; 146
   18aa6:	df 4f       	sbci	r29, 0xFF	; 255
   18aa8:	79 83       	std	Y+1, r23	; 0x01
   18aaa:	68 83       	st	Y, r22
   18aac:	df 91       	pop	r29
   18aae:	cf 91       	pop	r28
   18ab0:	1f 91       	pop	r17
   18ab2:	0f 91       	pop	r16
   18ab4:	08 95       	ret

00018ab6 <lif_BIN2BCD>:
   18ab6:	6a e0       	ldi	r22, 0x0A	; 10
   18ab8:	0e 94 d1 e3 	call	0x1c7a2	; 0x1c7a2 <__udivmodqi4>
   18abc:	82 95       	swap	r24
   18abe:	80 7f       	andi	r24, 0xF0	; 240
   18ac0:	89 2b       	or	r24, r25
   18ac2:	08 95       	ret

00018ac4 <lif_BCD2BIN>:
   18ac4:	28 2f       	mov	r18, r24
   18ac6:	22 95       	swap	r18
   18ac8:	2f 70       	andi	r18, 0x0F	; 15
   18aca:	8f 70       	andi	r24, 0x0F	; 15
   18acc:	90 e0       	ldi	r25, 0x00	; 0
   18ace:	3a e0       	ldi	r19, 0x0A	; 10
   18ad0:	23 9f       	mul	r18, r19
   18ad2:	80 0d       	add	r24, r0
   18ad4:	91 1d       	adc	r25, r1
   18ad6:	11 24       	eor	r1, r1
   18ad8:	08 95       	ret

00018ada <lif_time2lifbcd>:
   18ada:	aa e1       	ldi	r26, 0x1A	; 26
   18adc:	b0 e0       	ldi	r27, 0x00	; 0
   18ade:	e3 e7       	ldi	r30, 0x73	; 115
   18ae0:	f5 ec       	ldi	r31, 0xC5	; 197
   18ae2:	0c 94 94 e4 	jmp	0x1c928	; 0x1c928 <__prologue_saves__+0x1c>
   18ae6:	8b 01       	movw	r16, r22
   18ae8:	9c 01       	movw	r18, r24
   18aea:	6f 8b       	std	Y+23, r22	; 0x17
   18aec:	78 8f       	std	Y+24, r23	; 0x18
   18aee:	89 8f       	std	Y+25, r24	; 0x19
   18af0:	9a 8f       	std	Y+26, r25	; 0x1a
   18af2:	67 2b       	or	r22, r23
   18af4:	68 2b       	or	r22, r24
   18af6:	69 2b       	or	r22, r25
   18af8:	41 f4       	brne	.+16     	; 0x18b0a <lif_time2lifbcd+0x30>
   18afa:	fa 01       	movw	r30, r20
   18afc:	ca 01       	movw	r24, r20
   18afe:	06 96       	adiw	r24, 0x06	; 6
   18b00:	11 92       	st	Z+, r1
   18b02:	e8 17       	cp	r30, r24
   18b04:	f9 07       	cpc	r31, r25
   18b06:	e1 f7       	brne	.-8      	; 0x18b00 <lif_time2lifbcd+0x26>
   18b08:	26 c0       	rjmp	.+76     	; 0x18b56 <lif_time2lifbcd+0x7c>
   18b0a:	8a 01       	movw	r16, r20
   18b0c:	be 01       	movw	r22, r28
   18b0e:	6f 5f       	subi	r22, 0xFF	; 255
   18b10:	7f 4f       	sbci	r23, 0xFF	; 255
   18b12:	ce 01       	movw	r24, r28
   18b14:	47 96       	adiw	r24, 0x17	; 23
   18b16:	0e 94 ae 38 	call	0x715c	; 0x715c <gmtime_r>
   18b1a:	8b 85       	ldd	r24, Y+11	; 0x0b
   18b1c:	9c 85       	ldd	r25, Y+12	; 0x0c
   18b1e:	64 e6       	ldi	r22, 0x64	; 100
   18b20:	70 e0       	ldi	r23, 0x00	; 0
   18b22:	0e 94 f1 e3 	call	0x1c7e2	; 0x1c7e2 <__divmodhi4>
   18b26:	c7 df       	rcall	.-114    	; 0x18ab6 <lif_BIN2BCD>
   18b28:	f8 01       	movw	r30, r16
   18b2a:	80 83       	st	Z, r24
   18b2c:	89 85       	ldd	r24, Y+9	; 0x09
   18b2e:	8f 5f       	subi	r24, 0xFF	; 255
   18b30:	c2 df       	rcall	.-124    	; 0x18ab6 <lif_BIN2BCD>
   18b32:	f8 01       	movw	r30, r16
   18b34:	81 83       	std	Z+1, r24	; 0x01
   18b36:	8f 81       	ldd	r24, Y+7	; 0x07
   18b38:	be df       	rcall	.-132    	; 0x18ab6 <lif_BIN2BCD>
   18b3a:	f8 01       	movw	r30, r16
   18b3c:	82 83       	std	Z+2, r24	; 0x02
   18b3e:	8d 81       	ldd	r24, Y+5	; 0x05
   18b40:	ba df       	rcall	.-140    	; 0x18ab6 <lif_BIN2BCD>
   18b42:	f8 01       	movw	r30, r16
   18b44:	83 83       	std	Z+3, r24	; 0x03
   18b46:	8b 81       	ldd	r24, Y+3	; 0x03
   18b48:	b6 df       	rcall	.-148    	; 0x18ab6 <lif_BIN2BCD>
   18b4a:	f8 01       	movw	r30, r16
   18b4c:	84 83       	std	Z+4, r24	; 0x04
   18b4e:	89 81       	ldd	r24, Y+1	; 0x01
   18b50:	b2 df       	rcall	.-156    	; 0x18ab6 <lif_BIN2BCD>
   18b52:	f8 01       	movw	r30, r16
   18b54:	85 83       	std	Z+5, r24	; 0x05
   18b56:	6a 96       	adiw	r28, 0x1a	; 26
   18b58:	e4 e0       	ldi	r30, 0x04	; 4
   18b5a:	0c 94 b0 e4 	jmp	0x1c960	; 0x1c960 <__epilogue_restores__+0x1c>

00018b5e <lif_lifbcd2time>:
   18b5e:	a6 e1       	ldi	r26, 0x16	; 22
   18b60:	b0 e0       	ldi	r27, 0x00	; 0
   18b62:	e5 eb       	ldi	r30, 0xB5	; 181
   18b64:	f5 ec       	ldi	r31, 0xC5	; 197
   18b66:	0c 94 8e e4 	jmp	0x1c91c	; 0x1c91c <__prologue_saves__+0x10>
   18b6a:	8c 01       	movw	r16, r24
   18b6c:	7c 01       	movw	r14, r24
   18b6e:	5c 01       	movw	r10, r24
   18b70:	26 e0       	ldi	r18, 0x06	; 6
   18b72:	a2 0e       	add	r10, r18
   18b74:	b1 1c       	adc	r11, r1
   18b76:	cc 24       	eor	r12, r12
   18b78:	c3 94       	inc	r12
   18b7a:	d1 2c       	mov	r13, r1
   18b7c:	f7 01       	movw	r30, r14
   18b7e:	81 91       	ld	r24, Z+
   18b80:	7f 01       	movw	r14, r30
   18b82:	a0 df       	rcall	.-192    	; 0x18ac4 <lif_BCD2BIN>
   18b84:	89 2b       	or	r24, r25
   18b86:	11 f0       	breq	.+4      	; 0x18b8c <lif_lifbcd2time+0x2e>
   18b88:	c1 2c       	mov	r12, r1
   18b8a:	d1 2c       	mov	r13, r1
   18b8c:	ea 14       	cp	r14, r10
   18b8e:	fb 04       	cpc	r15, r11
   18b90:	a9 f7       	brne	.-22     	; 0x18b7c <lif_lifbcd2time+0x1e>
   18b92:	c1 14       	cp	r12, r1
   18b94:	d1 04       	cpc	r13, r1
   18b96:	61 f5       	brne	.+88     	; 0x18bf0 <lif_lifbcd2time+0x92>
   18b98:	f8 01       	movw	r30, r16
   18b9a:	80 81       	ld	r24, Z
   18b9c:	93 df       	rcall	.-218    	; 0x18ac4 <lif_BCD2BIN>
   18b9e:	7c 01       	movw	r14, r24
   18ba0:	f8 01       	movw	r30, r16
   18ba2:	81 81       	ldd	r24, Z+1	; 0x01
   18ba4:	8f df       	rcall	.-226    	; 0x18ac4 <lif_BCD2BIN>
   18ba6:	01 97       	sbiw	r24, 0x01	; 1
   18ba8:	f6 e4       	ldi	r31, 0x46	; 70
   18baa:	ef 16       	cp	r14, r31
   18bac:	f1 04       	cpc	r15, r1
   18bae:	1c f4       	brge	.+6      	; 0x18bb6 <lif_lifbcd2time+0x58>
   18bb0:	24 e6       	ldi	r18, 0x64	; 100
   18bb2:	e2 0e       	add	r14, r18
   18bb4:	f1 1c       	adc	r15, r1
   18bb6:	fc 86       	std	Y+12, r15	; 0x0c
   18bb8:	eb 86       	std	Y+11, r14	; 0x0b
   18bba:	9a 87       	std	Y+10, r25	; 0x0a
   18bbc:	89 87       	std	Y+9, r24	; 0x09
   18bbe:	f8 01       	movw	r30, r16
   18bc0:	82 81       	ldd	r24, Z+2	; 0x02
   18bc2:	80 df       	rcall	.-256    	; 0x18ac4 <lif_BCD2BIN>
   18bc4:	98 87       	std	Y+8, r25	; 0x08
   18bc6:	8f 83       	std	Y+7, r24	; 0x07
   18bc8:	f8 01       	movw	r30, r16
   18bca:	83 81       	ldd	r24, Z+3	; 0x03
   18bcc:	7b df       	rcall	.-266    	; 0x18ac4 <lif_BCD2BIN>
   18bce:	9e 83       	std	Y+6, r25	; 0x06
   18bd0:	8d 83       	std	Y+5, r24	; 0x05
   18bd2:	f8 01       	movw	r30, r16
   18bd4:	84 81       	ldd	r24, Z+4	; 0x04
   18bd6:	76 df       	rcall	.-276    	; 0x18ac4 <lif_BCD2BIN>
   18bd8:	9c 83       	std	Y+4, r25	; 0x04
   18bda:	8b 83       	std	Y+3, r24	; 0x03
   18bdc:	f8 01       	movw	r30, r16
   18bde:	85 81       	ldd	r24, Z+5	; 0x05
   18be0:	71 df       	rcall	.-286    	; 0x18ac4 <lif_BCD2BIN>
   18be2:	9a 83       	std	Y+2, r25	; 0x02
   18be4:	89 83       	std	Y+1, r24	; 0x01
   18be6:	ce 01       	movw	r24, r28
   18be8:	01 96       	adiw	r24, 0x01	; 1
   18bea:	0e 94 82 3b 	call	0x7704	; 0x7704 <timegm>
   18bee:	03 c0       	rjmp	.+6      	; 0x18bf6 <lif_lifbcd2time+0x98>
   18bf0:	60 e0       	ldi	r22, 0x00	; 0
   18bf2:	70 e0       	ldi	r23, 0x00	; 0
   18bf4:	cb 01       	movw	r24, r22
   18bf6:	66 96       	adiw	r28, 0x16	; 22
   18bf8:	ea e0       	ldi	r30, 0x0A	; 10
   18bfa:	0c 94 aa e4 	jmp	0x1c954	; 0x1c954 <__epilogue_restores__+0x10>

00018bfe <lif_ctime_gmt>:
   18bfe:	a6 e1       	ldi	r26, 0x16	; 22
   18c00:	b0 e0       	ldi	r27, 0x00	; 0
   18c02:	e5 e0       	ldi	r30, 0x05	; 5
   18c04:	f6 ec       	ldi	r31, 0xC6	; 198
   18c06:	0c 94 94 e4 	jmp	0x1c928	; 0x1c928 <__prologue_saves__+0x1c>
   18c0a:	20 e2       	ldi	r18, 0x20	; 32
   18c0c:	e9 e6       	ldi	r30, 0x69	; 105
   18c0e:	f9 e1       	ldi	r31, 0x19	; 25
   18c10:	df 01       	movw	r26, r30
   18c12:	1d 92       	st	X+, r1
   18c14:	2a 95       	dec	r18
   18c16:	e9 f7       	brne	.-6      	; 0x18c12 <lif_ctime_gmt+0x14>
   18c18:	be 01       	movw	r22, r28
   18c1a:	6f 5f       	subi	r22, 0xFF	; 255
   18c1c:	7f 4f       	sbci	r23, 0xFF	; 255
   18c1e:	0e 94 ae 38 	call	0x715c	; 0x715c <gmtime_r>
   18c22:	69 e6       	ldi	r22, 0x69	; 105
   18c24:	79 e1       	ldi	r23, 0x19	; 25
   18c26:	0e 94 de 3d 	call	0x7bbc	; 0x7bbc <asctime_r>
   18c2a:	8c 01       	movw	r16, r24
   18c2c:	0e 94 3f 33 	call	0x667e	; 0x667e <trim_tail>
   18c30:	c8 01       	movw	r24, r16
   18c32:	66 96       	adiw	r28, 0x16	; 22
   18c34:	e4 e0       	ldi	r30, 0x04	; 4
   18c36:	0c 94 b0 e4 	jmp	0x1c960	; 0x1c960 <__epilogue_restores__+0x1c>

00018c3a <lif_lifbcd2timestr>:
   18c3a:	a4 e0       	ldi	r26, 0x04	; 4
   18c3c:	b0 e0       	ldi	r27, 0x00	; 0
   18c3e:	e3 e2       	ldi	r30, 0x23	; 35
   18c40:	f6 ec       	ldi	r31, 0xC6	; 198
   18c42:	0c 94 96 e4 	jmp	0x1c92c	; 0x1c92c <__prologue_saves__+0x20>
   18c46:	20 e2       	ldi	r18, 0x20	; 32
   18c48:	e9 e4       	ldi	r30, 0x49	; 73
   18c4a:	f9 e1       	ldi	r31, 0x19	; 25
   18c4c:	df 01       	movw	r26, r30
   18c4e:	1d 92       	st	X+, r1
   18c50:	2a 95       	dec	r18
   18c52:	e9 f7       	brne	.-6      	; 0x18c4e <lif_lifbcd2timestr+0x14>
   18c54:	84 df       	rcall	.-248    	; 0x18b5e <lif_lifbcd2time>
   18c56:	69 83       	std	Y+1, r22	; 0x01
   18c58:	7a 83       	std	Y+2, r23	; 0x02
   18c5a:	8b 83       	std	Y+3, r24	; 0x03
   18c5c:	9c 83       	std	Y+4, r25	; 0x04
   18c5e:	67 2b       	or	r22, r23
   18c60:	68 2b       	or	r22, r24
   18c62:	69 2b       	or	r22, r25
   18c64:	29 f0       	breq	.+10     	; 0x18c70 <lif_lifbcd2timestr+0x36>
   18c66:	ce 01       	movw	r24, r28
   18c68:	01 96       	adiw	r24, 0x01	; 1
   18c6a:	c9 df       	rcall	.-110    	; 0x18bfe <lif_ctime_gmt>
   18c6c:	bc 01       	movw	r22, r24
   18c6e:	02 c0       	rjmp	.+4      	; 0x18c74 <lif_lifbcd2timestr+0x3a>
   18c70:	69 e3       	ldi	r22, 0x39	; 57
   18c72:	75 e1       	ldi	r23, 0x15	; 21
   18c74:	89 e4       	ldi	r24, 0x49	; 73
   18c76:	99 e1       	ldi	r25, 0x19	; 25
   18c78:	0e 94 61 32 	call	0x64c2	; 0x64c2 <strcpy>
   18c7c:	89 e4       	ldi	r24, 0x49	; 73
   18c7e:	99 e1       	ldi	r25, 0x19	; 25
   18c80:	24 96       	adiw	r28, 0x04	; 4
   18c82:	e2 e0       	ldi	r30, 0x02	; 2
   18c84:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

00018c88 <lif_image_clear>:
   18c88:	20 e7       	ldi	r18, 0x70	; 112
   18c8a:	fc 01       	movw	r30, r24
   18c8c:	11 92       	st	Z+, r1
   18c8e:	2a 95       	dec	r18
   18c90:	e9 f7       	brne	.-6      	; 0x18c8c <lif_image_clear+0x4>
   18c92:	08 95       	ret

00018c94 <lif_dir_clear>:
   18c94:	81 5b       	subi	r24, 0xB1	; 177
   18c96:	9f 4f       	sbci	r25, 0xFF	; 255
   18c98:	21 e2       	ldi	r18, 0x21	; 33
   18c9a:	fc 01       	movw	r30, r24
   18c9c:	11 92       	st	Z+, r1
   18c9e:	2a 95       	dec	r18
   18ca0:	e9 f7       	brne	.-6      	; 0x18c9c <lif_dir_clear+0x8>
   18ca2:	08 95       	ret

00018ca4 <lif_vol_clear>:
   18ca4:	84 96       	adiw	r24, 0x24	; 36
   18ca6:	2b e2       	ldi	r18, 0x2B	; 43
   18ca8:	fc 01       	movw	r30, r24
   18caa:	11 92       	st	Z+, r1
   18cac:	2a 95       	dec	r18
   18cae:	e9 f7       	brne	.-6      	; 0x18caa <lif_vol_clear+0x6>
   18cb0:	08 95       	ret

00018cb2 <lif_dump_vol>:
   18cb2:	cf 93       	push	r28
   18cb4:	df 93       	push	r29
   18cb6:	ad b7       	in	r26, 0x3d	; 61
   18cb8:	be b7       	in	r27, 0x3e	; 62
   18cba:	17 97       	sbiw	r26, 0x07	; 7
   18cbc:	0f b6       	in	r0, 0x3f	; 63
   18cbe:	f8 94       	cli
   18cc0:	be bf       	out	0x3e, r27	; 62
   18cc2:	0f be       	out	0x3f, r0	; 63
   18cc4:	ad bf       	out	0x3d, r26	; 61
   18cc6:	ec 01       	movw	r28, r24
   18cc8:	ed b7       	in	r30, 0x3d	; 61
   18cca:	fe b7       	in	r31, 0x3e	; 62
   18ccc:	75 83       	std	Z+5, r23	; 0x05
   18cce:	64 83       	std	Z+4, r22	; 0x04
   18cd0:	81 e7       	ldi	r24, 0x71	; 113
   18cd2:	91 e4       	ldi	r25, 0x41	; 65
   18cd4:	a0 e0       	ldi	r26, 0x00	; 0
   18cd6:	81 83       	std	Z+1, r24	; 0x01
   18cd8:	92 83       	std	Z+2, r25	; 0x02
   18cda:	a3 83       	std	Z+3, r26	; 0x03
   18cdc:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   18ce0:	88 81       	ld	r24, Y
   18ce2:	99 81       	ldd	r25, Y+1	; 0x01
   18ce4:	ed b7       	in	r30, 0x3d	; 61
   18ce6:	fe b7       	in	r31, 0x3e	; 62
   18ce8:	95 83       	std	Z+5, r25	; 0x05
   18cea:	84 83       	std	Z+4, r24	; 0x04
   18cec:	87 e5       	ldi	r24, 0x57	; 87
   18cee:	91 e4       	ldi	r25, 0x41	; 65
   18cf0:	a0 e0       	ldi	r26, 0x00	; 0
   18cf2:	81 83       	std	Z+1, r24	; 0x01
   18cf4:	92 83       	std	Z+2, r25	; 0x02
   18cf6:	a3 83       	std	Z+3, r26	; 0x03
   18cf8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   18cfc:	8c 81       	ldd	r24, Y+4	; 0x04
   18cfe:	9d 81       	ldd	r25, Y+5	; 0x05
   18d00:	ae 81       	ldd	r26, Y+6	; 0x06
   18d02:	bf 81       	ldd	r27, Y+7	; 0x07
   18d04:	ed b7       	in	r30, 0x3d	; 61
   18d06:	fe b7       	in	r31, 0x3e	; 62
   18d08:	84 83       	std	Z+4, r24	; 0x04
   18d0a:	95 83       	std	Z+5, r25	; 0x05
   18d0c:	a6 83       	std	Z+6, r26	; 0x06
   18d0e:	b7 83       	std	Z+7, r27	; 0x07
   18d10:	8a e3       	ldi	r24, 0x3A	; 58
   18d12:	91 e4       	ldi	r25, 0x41	; 65
   18d14:	a0 e0       	ldi	r26, 0x00	; 0
   18d16:	81 83       	std	Z+1, r24	; 0x01
   18d18:	92 83       	std	Z+2, r25	; 0x02
   18d1a:	a3 83       	std	Z+3, r26	; 0x03
   18d1c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   18d20:	88 85       	ldd	r24, Y+8	; 0x08
   18d22:	99 85       	ldd	r25, Y+9	; 0x09
   18d24:	aa 85       	ldd	r26, Y+10	; 0x0a
   18d26:	bb 85       	ldd	r27, Y+11	; 0x0b
   18d28:	ed b7       	in	r30, 0x3d	; 61
   18d2a:	fe b7       	in	r31, 0x3e	; 62
   18d2c:	84 83       	std	Z+4, r24	; 0x04
   18d2e:	95 83       	std	Z+5, r25	; 0x05
   18d30:	a6 83       	std	Z+6, r26	; 0x06
   18d32:	b7 83       	std	Z+7, r27	; 0x07
   18d34:	8d e1       	ldi	r24, 0x1D	; 29
   18d36:	91 e4       	ldi	r25, 0x41	; 65
   18d38:	a0 e0       	ldi	r26, 0x00	; 0
   18d3a:	81 83       	std	Z+1, r24	; 0x01
   18d3c:	92 83       	std	Z+2, r25	; 0x02
   18d3e:	a3 83       	std	Z+3, r26	; 0x03
   18d40:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   18d44:	8c 85       	ldd	r24, Y+12	; 0x0c
   18d46:	9d 85       	ldd	r25, Y+13	; 0x0d
   18d48:	ae 85       	ldd	r26, Y+14	; 0x0e
   18d4a:	bf 85       	ldd	r27, Y+15	; 0x0f
   18d4c:	ed b7       	in	r30, 0x3d	; 61
   18d4e:	fe b7       	in	r31, 0x3e	; 62
   18d50:	84 83       	std	Z+4, r24	; 0x04
   18d52:	95 83       	std	Z+5, r25	; 0x05
   18d54:	a6 83       	std	Z+6, r26	; 0x06
   18d56:	b7 83       	std	Z+7, r27	; 0x07
   18d58:	80 e0       	ldi	r24, 0x00	; 0
   18d5a:	91 e4       	ldi	r25, 0x41	; 65
   18d5c:	a0 e0       	ldi	r26, 0x00	; 0
   18d5e:	81 83       	std	Z+1, r24	; 0x01
   18d60:	92 83       	std	Z+2, r25	; 0x02
   18d62:	a3 83       	std	Z+3, r26	; 0x03
   18d64:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   18d68:	88 89       	ldd	r24, Y+16	; 0x10
   18d6a:	99 89       	ldd	r25, Y+17	; 0x11
   18d6c:	aa 89       	ldd	r26, Y+18	; 0x12
   18d6e:	bb 89       	ldd	r27, Y+19	; 0x13
   18d70:	ed b7       	in	r30, 0x3d	; 61
   18d72:	fe b7       	in	r31, 0x3e	; 62
   18d74:	84 83       	std	Z+4, r24	; 0x04
   18d76:	95 83       	std	Z+5, r25	; 0x05
   18d78:	a6 83       	std	Z+6, r26	; 0x06
   18d7a:	b7 83       	std	Z+7, r27	; 0x07
   18d7c:	83 ee       	ldi	r24, 0xE3	; 227
   18d7e:	90 e4       	ldi	r25, 0x40	; 64
   18d80:	a0 e0       	ldi	r26, 0x00	; 0
   18d82:	81 83       	std	Z+1, r24	; 0x01
   18d84:	92 83       	std	Z+2, r25	; 0x02
   18d86:	a3 83       	std	Z+3, r26	; 0x03
   18d88:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   18d8c:	8c 89       	ldd	r24, Y+20	; 0x14
   18d8e:	9d 89       	ldd	r25, Y+21	; 0x15
   18d90:	ae 89       	ldd	r26, Y+22	; 0x16
   18d92:	bf 89       	ldd	r27, Y+23	; 0x17
   18d94:	ed b7       	in	r30, 0x3d	; 61
   18d96:	fe b7       	in	r31, 0x3e	; 62
   18d98:	84 83       	std	Z+4, r24	; 0x04
   18d9a:	95 83       	std	Z+5, r25	; 0x05
   18d9c:	a6 83       	std	Z+6, r26	; 0x06
   18d9e:	b7 83       	std	Z+7, r27	; 0x07
   18da0:	86 ec       	ldi	r24, 0xC6	; 198
   18da2:	90 e4       	ldi	r25, 0x40	; 64
   18da4:	a0 e0       	ldi	r26, 0x00	; 0
   18da6:	81 83       	std	Z+1, r24	; 0x01
   18da8:	92 83       	std	Z+2, r25	; 0x02
   18daa:	a3 83       	std	Z+3, r26	; 0x03
   18dac:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   18db0:	88 8d       	ldd	r24, Y+24	; 0x18
   18db2:	99 8d       	ldd	r25, Y+25	; 0x19
   18db4:	aa 8d       	ldd	r26, Y+26	; 0x1a
   18db6:	bb 8d       	ldd	r27, Y+27	; 0x1b
   18db8:	ed b7       	in	r30, 0x3d	; 61
   18dba:	fe b7       	in	r31, 0x3e	; 62
   18dbc:	84 83       	std	Z+4, r24	; 0x04
   18dbe:	95 83       	std	Z+5, r25	; 0x05
   18dc0:	a6 83       	std	Z+6, r26	; 0x06
   18dc2:	b7 83       	std	Z+7, r27	; 0x07
   18dc4:	89 ea       	ldi	r24, 0xA9	; 169
   18dc6:	90 e4       	ldi	r25, 0x40	; 64
   18dc8:	a0 e0       	ldi	r26, 0x00	; 0
   18dca:	81 83       	std	Z+1, r24	; 0x01
   18dcc:	92 83       	std	Z+2, r25	; 0x02
   18dce:	a3 83       	std	Z+3, r26	; 0x03
   18dd0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   18dd4:	8c 8d       	ldd	r24, Y+28	; 0x1c
   18dd6:	9d 8d       	ldd	r25, Y+29	; 0x1d
   18dd8:	09 2e       	mov	r0, r25
   18dda:	00 0c       	add	r0, r0
   18ddc:	aa 0b       	sbc	r26, r26
   18dde:	bb 0b       	sbc	r27, r27
   18de0:	ed b7       	in	r30, 0x3d	; 61
   18de2:	fe b7       	in	r31, 0x3e	; 62
   18de4:	84 83       	std	Z+4, r24	; 0x04
   18de6:	95 83       	std	Z+5, r25	; 0x05
   18de8:	a6 83       	std	Z+6, r26	; 0x06
   18dea:	b7 83       	std	Z+7, r27	; 0x07
   18dec:	8c e8       	ldi	r24, 0x8C	; 140
   18dee:	90 e4       	ldi	r25, 0x40	; 64
   18df0:	a0 e0       	ldi	r26, 0x00	; 0
   18df2:	81 83       	std	Z+1, r24	; 0x01
   18df4:	92 83       	std	Z+2, r25	; 0x02
   18df6:	a3 83       	std	Z+3, r26	; 0x03
   18df8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   18dfc:	8e 8d       	ldd	r24, Y+30	; 0x1e
   18dfe:	9f 8d       	ldd	r25, Y+31	; 0x1f
   18e00:	09 2e       	mov	r0, r25
   18e02:	00 0c       	add	r0, r0
   18e04:	aa 0b       	sbc	r26, r26
   18e06:	bb 0b       	sbc	r27, r27
   18e08:	ed b7       	in	r30, 0x3d	; 61
   18e0a:	fe b7       	in	r31, 0x3e	; 62
   18e0c:	84 83       	std	Z+4, r24	; 0x04
   18e0e:	95 83       	std	Z+5, r25	; 0x05
   18e10:	a6 83       	std	Z+6, r26	; 0x06
   18e12:	b7 83       	std	Z+7, r27	; 0x07
   18e14:	8f e6       	ldi	r24, 0x6F	; 111
   18e16:	90 e4       	ldi	r25, 0x40	; 64
   18e18:	a0 e0       	ldi	r26, 0x00	; 0
   18e1a:	81 83       	std	Z+1, r24	; 0x01
   18e1c:	92 83       	std	Z+2, r25	; 0x02
   18e1e:	a3 83       	std	Z+3, r26	; 0x03
   18e20:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   18e24:	ce 01       	movw	r24, r28
   18e26:	86 96       	adiw	r24, 0x26	; 38
   18e28:	ed b7       	in	r30, 0x3d	; 61
   18e2a:	fe b7       	in	r31, 0x3e	; 62
   18e2c:	95 83       	std	Z+5, r25	; 0x05
   18e2e:	84 83       	std	Z+4, r24	; 0x04
   18e30:	85 e5       	ldi	r24, 0x55	; 85
   18e32:	90 e4       	ldi	r25, 0x40	; 64
   18e34:	a0 e0       	ldi	r26, 0x00	; 0
   18e36:	81 83       	std	Z+1, r24	; 0x01
   18e38:	92 83       	std	Z+2, r25	; 0x02
   18e3a:	a3 83       	std	Z+3, r26	; 0x03
   18e3c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   18e40:	8c a1       	ldd	r24, Y+36	; 0x24
   18e42:	9d a1       	ldd	r25, Y+37	; 0x25
   18e44:	ed b7       	in	r30, 0x3d	; 61
   18e46:	fe b7       	in	r31, 0x3e	; 62
   18e48:	95 83       	std	Z+5, r25	; 0x05
   18e4a:	84 83       	std	Z+4, r24	; 0x04
   18e4c:	89 e3       	ldi	r24, 0x39	; 57
   18e4e:	90 e4       	ldi	r25, 0x40	; 64
   18e50:	a0 e0       	ldi	r26, 0x00	; 0
   18e52:	81 83       	std	Z+1, r24	; 0x01
   18e54:	92 83       	std	Z+2, r25	; 0x02
   18e56:	a3 83       	std	Z+3, r26	; 0x03
   18e58:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   18e5c:	8d a5       	ldd	r24, Y+45	; 0x2d
   18e5e:	9e a5       	ldd	r25, Y+46	; 0x2e
   18e60:	af a5       	ldd	r26, Y+47	; 0x2f
   18e62:	b8 a9       	ldd	r27, Y+48	; 0x30
   18e64:	ed b7       	in	r30, 0x3d	; 61
   18e66:	fe b7       	in	r31, 0x3e	; 62
   18e68:	84 83       	std	Z+4, r24	; 0x04
   18e6a:	95 83       	std	Z+5, r25	; 0x05
   18e6c:	a6 83       	std	Z+6, r26	; 0x06
   18e6e:	b7 83       	std	Z+7, r27	; 0x07
   18e70:	8c e1       	ldi	r24, 0x1C	; 28
   18e72:	90 e4       	ldi	r25, 0x40	; 64
   18e74:	a0 e0       	ldi	r26, 0x00	; 0
   18e76:	81 83       	std	Z+1, r24	; 0x01
   18e78:	92 83       	std	Z+2, r25	; 0x02
   18e7a:	a3 83       	std	Z+3, r26	; 0x03
   18e7c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   18e80:	8d a9       	ldd	r24, Y+53	; 0x35
   18e82:	9e a9       	ldd	r25, Y+54	; 0x36
   18e84:	af a9       	ldd	r26, Y+55	; 0x37
   18e86:	b8 ad       	ldd	r27, Y+56	; 0x38
   18e88:	ed b7       	in	r30, 0x3d	; 61
   18e8a:	fe b7       	in	r31, 0x3e	; 62
   18e8c:	84 83       	std	Z+4, r24	; 0x04
   18e8e:	95 83       	std	Z+5, r25	; 0x05
   18e90:	a6 83       	std	Z+6, r26	; 0x06
   18e92:	b7 83       	std	Z+7, r27	; 0x07
   18e94:	8f ef       	ldi	r24, 0xFF	; 255
   18e96:	9f e3       	ldi	r25, 0x3F	; 63
   18e98:	a0 e0       	ldi	r26, 0x00	; 0
   18e9a:	81 83       	std	Z+1, r24	; 0x01
   18e9c:	92 83       	std	Z+2, r25	; 0x02
   18e9e:	a3 83       	std	Z+3, r26	; 0x03
   18ea0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   18ea4:	89 a9       	ldd	r24, Y+49	; 0x31
   18ea6:	9a a9       	ldd	r25, Y+50	; 0x32
   18ea8:	ed b7       	in	r30, 0x3d	; 61
   18eaa:	fe b7       	in	r31, 0x3e	; 62
   18eac:	95 83       	std	Z+5, r25	; 0x05
   18eae:	84 83       	std	Z+4, r24	; 0x04
   18eb0:	83 ee       	ldi	r24, 0xE3	; 227
   18eb2:	9f e3       	ldi	r25, 0x3F	; 63
   18eb4:	a0 e0       	ldi	r26, 0x00	; 0
   18eb6:	81 83       	std	Z+1, r24	; 0x01
   18eb8:	92 83       	std	Z+2, r25	; 0x02
   18eba:	a3 83       	std	Z+3, r26	; 0x03
   18ebc:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   18ec0:	89 ad       	ldd	r24, Y+57	; 0x39
   18ec2:	9a ad       	ldd	r25, Y+58	; 0x3a
   18ec4:	ed b7       	in	r30, 0x3d	; 61
   18ec6:	fe b7       	in	r31, 0x3e	; 62
   18ec8:	95 83       	std	Z+5, r25	; 0x05
   18eca:	84 83       	std	Z+4, r24	; 0x04
   18ecc:	87 ec       	ldi	r24, 0xC7	; 199
   18ece:	9f e3       	ldi	r25, 0x3F	; 63
   18ed0:	a0 e0       	ldi	r26, 0x00	; 0
   18ed2:	81 83       	std	Z+1, r24	; 0x01
   18ed4:	92 83       	std	Z+2, r25	; 0x02
   18ed6:	a3 83       	std	Z+3, r26	; 0x03
   18ed8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   18edc:	ce 01       	movw	r24, r28
   18ede:	87 5b       	subi	r24, 0xB7	; 183
   18ee0:	9f 4f       	sbci	r25, 0xFF	; 255
   18ee2:	ab de       	rcall	.-682    	; 0x18c3a <lif_lifbcd2timestr>
   18ee4:	ed b7       	in	r30, 0x3d	; 61
   18ee6:	fe b7       	in	r31, 0x3e	; 62
   18ee8:	95 83       	std	Z+5, r25	; 0x05
   18eea:	84 83       	std	Z+4, r24	; 0x04
   18eec:	8d ea       	ldi	r24, 0xAD	; 173
   18eee:	9f e3       	ldi	r25, 0x3F	; 63
   18ef0:	a0 e0       	ldi	r26, 0x00	; 0
   18ef2:	81 83       	std	Z+1, r24	; 0x01
   18ef4:	92 83       	std	Z+2, r25	; 0x02
   18ef6:	a3 83       	std	Z+3, r26	; 0x03
   18ef8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   18efc:	ce 01       	movw	r24, r28
   18efe:	81 5b       	subi	r24, 0xB1	; 177
   18f00:	9f 4f       	sbci	r25, 0xFF	; 255
   18f02:	ed b7       	in	r30, 0x3d	; 61
   18f04:	fe b7       	in	r31, 0x3e	; 62
   18f06:	95 83       	std	Z+5, r25	; 0x05
   18f08:	84 83       	std	Z+4, r24	; 0x04
   18f0a:	83 e9       	ldi	r24, 0x93	; 147
   18f0c:	9f e3       	ldi	r25, 0x3F	; 63
   18f0e:	a0 e0       	ldi	r26, 0x00	; 0
   18f10:	81 83       	std	Z+1, r24	; 0x01
   18f12:	92 83       	std	Z+2, r25	; 0x02
   18f14:	a3 83       	std	Z+3, r26	; 0x03
   18f16:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   18f1a:	fe 01       	movw	r30, r28
   18f1c:	e6 5a       	subi	r30, 0xA6	; 166
   18f1e:	ff 4f       	sbci	r31, 0xFF	; 255
   18f20:	80 81       	ld	r24, Z
   18f22:	91 81       	ldd	r25, Z+1	; 0x01
   18f24:	ed b7       	in	r30, 0x3d	; 61
   18f26:	fe b7       	in	r31, 0x3e	; 62
   18f28:	95 83       	std	Z+5, r25	; 0x05
   18f2a:	84 83       	std	Z+4, r24	; 0x04
   18f2c:	87 e7       	ldi	r24, 0x77	; 119
   18f2e:	9f e3       	ldi	r25, 0x3F	; 63
   18f30:	a0 e0       	ldi	r26, 0x00	; 0
   18f32:	81 83       	std	Z+1, r24	; 0x01
   18f34:	92 83       	std	Z+2, r25	; 0x02
   18f36:	a3 83       	std	Z+3, r26	; 0x03
   18f38:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   18f3c:	fe 01       	movw	r30, r28
   18f3e:	e6 59       	subi	r30, 0x96	; 150
   18f40:	ff 4f       	sbci	r31, 0xFF	; 255
   18f42:	80 81       	ld	r24, Z
   18f44:	91 81       	ldd	r25, Z+1	; 0x01
   18f46:	ed b7       	in	r30, 0x3d	; 61
   18f48:	fe b7       	in	r31, 0x3e	; 62
   18f4a:	95 83       	std	Z+5, r25	; 0x05
   18f4c:	84 83       	std	Z+4, r24	; 0x04
   18f4e:	8b e5       	ldi	r24, 0x5B	; 91
   18f50:	9f e3       	ldi	r25, 0x3F	; 63
   18f52:	a0 e0       	ldi	r26, 0x00	; 0
   18f54:	81 83       	std	Z+1, r24	; 0x01
   18f56:	92 83       	std	Z+2, r25	; 0x02
   18f58:	a3 83       	std	Z+3, r26	; 0x03
   18f5a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   18f5e:	fe 01       	movw	r30, r28
   18f60:	e4 5a       	subi	r30, 0xA4	; 164
   18f62:	ff 4f       	sbci	r31, 0xFF	; 255
   18f64:	80 81       	ld	r24, Z
   18f66:	91 81       	ldd	r25, Z+1	; 0x01
   18f68:	a2 81       	ldd	r26, Z+2	; 0x02
   18f6a:	b3 81       	ldd	r27, Z+3	; 0x03
   18f6c:	ed b7       	in	r30, 0x3d	; 61
   18f6e:	fe b7       	in	r31, 0x3e	; 62
   18f70:	84 83       	std	Z+4, r24	; 0x04
   18f72:	95 83       	std	Z+5, r25	; 0x05
   18f74:	a6 83       	std	Z+6, r26	; 0x06
   18f76:	b7 83       	std	Z+7, r27	; 0x07
   18f78:	8e e3       	ldi	r24, 0x3E	; 62
   18f7a:	9f e3       	ldi	r25, 0x3F	; 63
   18f7c:	a0 e0       	ldi	r26, 0x00	; 0
   18f7e:	81 83       	std	Z+1, r24	; 0x01
   18f80:	92 83       	std	Z+2, r25	; 0x02
   18f82:	a3 83       	std	Z+3, r26	; 0x03
   18f84:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   18f88:	fe 01       	movw	r30, r28
   18f8a:	e0 5a       	subi	r30, 0xA0	; 160
   18f8c:	ff 4f       	sbci	r31, 0xFF	; 255
   18f8e:	80 81       	ld	r24, Z
   18f90:	91 81       	ldd	r25, Z+1	; 0x01
   18f92:	a2 81       	ldd	r26, Z+2	; 0x02
   18f94:	b3 81       	ldd	r27, Z+3	; 0x03
   18f96:	ed b7       	in	r30, 0x3d	; 61
   18f98:	fe b7       	in	r31, 0x3e	; 62
   18f9a:	84 83       	std	Z+4, r24	; 0x04
   18f9c:	95 83       	std	Z+5, r25	; 0x05
   18f9e:	a6 83       	std	Z+6, r26	; 0x06
   18fa0:	b7 83       	std	Z+7, r27	; 0x07
   18fa2:	81 e2       	ldi	r24, 0x21	; 33
   18fa4:	9f e3       	ldi	r25, 0x3F	; 63
   18fa6:	a0 e0       	ldi	r26, 0x00	; 0
   18fa8:	81 83       	std	Z+1, r24	; 0x01
   18faa:	92 83       	std	Z+2, r25	; 0x02
   18fac:	a3 83       	std	Z+3, r26	; 0x03
   18fae:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   18fb2:	fe 01       	movw	r30, r28
   18fb4:	e4 59       	subi	r30, 0x94	; 148
   18fb6:	ff 4f       	sbci	r31, 0xFF	; 255
   18fb8:	80 81       	ld	r24, Z
   18fba:	91 81       	ldd	r25, Z+1	; 0x01
   18fbc:	a0 e0       	ldi	r26, 0x00	; 0
   18fbe:	b0 e0       	ldi	r27, 0x00	; 0
   18fc0:	ed b7       	in	r30, 0x3d	; 61
   18fc2:	fe b7       	in	r31, 0x3e	; 62
   18fc4:	84 83       	std	Z+4, r24	; 0x04
   18fc6:	95 83       	std	Z+5, r25	; 0x05
   18fc8:	a6 83       	std	Z+6, r26	; 0x06
   18fca:	b7 83       	std	Z+7, r27	; 0x07
   18fcc:	84 e0       	ldi	r24, 0x04	; 4
   18fce:	9f e3       	ldi	r25, 0x3F	; 63
   18fd0:	a0 e0       	ldi	r26, 0x00	; 0
   18fd2:	81 83       	std	Z+1, r24	; 0x01
   18fd4:	92 83       	std	Z+2, r25	; 0x02
   18fd6:	a3 83       	std	Z+3, r26	; 0x03
   18fd8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   18fdc:	fe 01       	movw	r30, r28
   18fde:	e2 59       	subi	r30, 0x92	; 146
   18fe0:	ff 4f       	sbci	r31, 0xFF	; 255
   18fe2:	80 81       	ld	r24, Z
   18fe4:	91 81       	ldd	r25, Z+1	; 0x01
   18fe6:	ed b7       	in	r30, 0x3d	; 61
   18fe8:	fe b7       	in	r31, 0x3e	; 62
   18fea:	95 83       	std	Z+5, r25	; 0x05
   18fec:	84 83       	std	Z+4, r24	; 0x04
   18fee:	88 ee       	ldi	r24, 0xE8	; 232
   18ff0:	9e e3       	ldi	r25, 0x3E	; 62
   18ff2:	a0 e0       	ldi	r26, 0x00	; 0
   18ff4:	81 83       	std	Z+1, r24	; 0x01
   18ff6:	92 83       	std	Z+2, r25	; 0x02
   18ff8:	a3 83       	std	Z+3, r26	; 0x03
   18ffa:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   18ffe:	ce 01       	movw	r24, r28
   19000:	8c 59       	subi	r24, 0x9C	; 156
   19002:	9f 4f       	sbci	r25, 0xFF	; 255
   19004:	1a de       	rcall	.-972    	; 0x18c3a <lif_lifbcd2timestr>
   19006:	ed b7       	in	r30, 0x3d	; 61
   19008:	fe b7       	in	r31, 0x3e	; 62
   1900a:	95 83       	std	Z+5, r25	; 0x05
   1900c:	84 83       	std	Z+4, r24	; 0x04
   1900e:	8e ec       	ldi	r24, 0xCE	; 206
   19010:	9e e3       	ldi	r25, 0x3E	; 62
   19012:	a0 e0       	ldi	r26, 0x00	; 0
   19014:	81 83       	std	Z+1, r24	; 0x01
   19016:	92 83       	std	Z+2, r25	; 0x02
   19018:	a3 83       	std	Z+3, r26	; 0x03
   1901a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1901e:	8c ec       	ldi	r24, 0xCC	; 204
   19020:	9e e3       	ldi	r25, 0x3E	; 62
   19022:	a0 e0       	ldi	r26, 0x00	; 0
   19024:	ed b7       	in	r30, 0x3d	; 61
   19026:	fe b7       	in	r31, 0x3e	; 62
   19028:	81 83       	std	Z+1, r24	; 0x01
   1902a:	92 83       	std	Z+2, r25	; 0x02
   1902c:	a3 83       	std	Z+3, r26	; 0x03
   1902e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   19032:	cd b7       	in	r28, 0x3d	; 61
   19034:	de b7       	in	r29, 0x3e	; 62
   19036:	27 96       	adiw	r28, 0x07	; 7
   19038:	e2 e0       	ldi	r30, 0x02	; 2
   1903a:	0c 94 b2 e4 	jmp	0x1c964	; 0x1c964 <__epilogue_restores__+0x20>

0001903e <lif_check_volume>:
   1903e:	0f 93       	push	r16
   19040:	1f 93       	push	r17
   19042:	cf 93       	push	r28
   19044:	df 93       	push	r29
   19046:	ad b7       	in	r26, 0x3d	; 61
   19048:	be b7       	in	r27, 0x3e	; 62
   1904a:	17 97       	sbiw	r26, 0x07	; 7
   1904c:	0f b6       	in	r0, 0x3f	; 63
   1904e:	f8 94       	cli
   19050:	be bf       	out	0x3e, r27	; 62
   19052:	0f be       	out	0x3f, r0	; 63
   19054:	ad bf       	out	0x3d, r26	; 61
   19056:	ec 01       	movw	r28, r24
   19058:	86 96       	adiw	r24, 0x26	; 38
   1905a:	c0 da       	rcall	.-2688   	; 0x185dc <lif_checkname>
   1905c:	89 2b       	or	r24, r25
   1905e:	79 f4       	brne	.+30     	; 0x1907e <lif_check_volume+0x40>
   19060:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   19064:	80 ff       	sbrs	r24, 0
   19066:	0e c0       	rjmp	.+28     	; 0x19084 <lif_check_volume+0x46>
   19068:	8d ea       	ldi	r24, 0xAD	; 173
   1906a:	9e e3       	ldi	r25, 0x3E	; 62
   1906c:	a0 e0       	ldi	r26, 0x00	; 0
   1906e:	ed b7       	in	r30, 0x3d	; 61
   19070:	fe b7       	in	r31, 0x3e	; 62
   19072:	81 83       	std	Z+1, r24	; 0x01
   19074:	92 83       	std	Z+2, r25	; 0x02
   19076:	a3 83       	std	Z+3, r26	; 0x03
   19078:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1907c:	03 c0       	rjmp	.+6      	; 0x19084 <lif_check_volume+0x46>
   1907e:	81 e0       	ldi	r24, 0x01	; 1
   19080:	90 e0       	ldi	r25, 0x00	; 0
   19082:	02 c0       	rjmp	.+4      	; 0x19088 <lif_check_volume+0x4a>
   19084:	80 e0       	ldi	r24, 0x00	; 0
   19086:	90 e0       	ldi	r25, 0x00	; 0
   19088:	29 a9       	ldd	r18, Y+49	; 0x31
   1908a:	3a a9       	ldd	r19, Y+50	; 0x32
   1908c:	21 15       	cp	r18, r1
   1908e:	f0 e1       	ldi	r31, 0x10	; 16
   19090:	3f 07       	cpc	r19, r31
   19092:	91 f0       	breq	.+36     	; 0x190b8 <lif_check_volume+0x7a>
   19094:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   19098:	80 ff       	sbrs	r24, 0
   1909a:	0c c0       	rjmp	.+24     	; 0x190b4 <lif_check_volume+0x76>
   1909c:	ed b7       	in	r30, 0x3d	; 61
   1909e:	fe b7       	in	r31, 0x3e	; 62
   190a0:	35 83       	std	Z+5, r19	; 0x05
   190a2:	24 83       	std	Z+4, r18	; 0x04
   190a4:	84 e7       	ldi	r24, 0x74	; 116
   190a6:	9e e3       	ldi	r25, 0x3E	; 62
   190a8:	a0 e0       	ldi	r26, 0x00	; 0
   190aa:	81 83       	std	Z+1, r24	; 0x01
   190ac:	92 83       	std	Z+2, r25	; 0x02
   190ae:	a3 83       	std	Z+3, r26	; 0x03
   190b0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   190b4:	80 e0       	ldi	r24, 0x00	; 0
   190b6:	90 e0       	ldi	r25, 0x00	; 0
   190b8:	29 ad       	ldd	r18, Y+57	; 0x39
   190ba:	3a ad       	ldd	r19, Y+58	; 0x3a
   190bc:	22 30       	cpi	r18, 0x02	; 2
   190be:	31 05       	cpc	r19, r1
   190c0:	90 f0       	brcs	.+36     	; 0x190e6 <lif_check_volume+0xa8>
   190c2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   190c6:	80 ff       	sbrs	r24, 0
   190c8:	0c c0       	rjmp	.+24     	; 0x190e2 <lif_check_volume+0xa4>
   190ca:	ed b7       	in	r30, 0x3d	; 61
   190cc:	fe b7       	in	r31, 0x3e	; 62
   190ce:	35 83       	std	Z+5, r19	; 0x05
   190d0:	24 83       	std	Z+4, r18	; 0x04
   190d2:	8c e5       	ldi	r24, 0x5C	; 92
   190d4:	9e e3       	ldi	r25, 0x3E	; 62
   190d6:	a0 e0       	ldi	r26, 0x00	; 0
   190d8:	81 83       	std	Z+1, r24	; 0x01
   190da:	92 83       	std	Z+2, r25	; 0x02
   190dc:	a3 83       	std	Z+3, r26	; 0x03
   190de:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   190e2:	80 e0       	ldi	r24, 0x00	; 0
   190e4:	90 e0       	ldi	r25, 0x00	; 0
   190e6:	2b a9       	ldd	r18, Y+51	; 0x33
   190e8:	3c a9       	ldd	r19, Y+52	; 0x34
   190ea:	23 2b       	or	r18, r19
   190ec:	81 f0       	breq	.+32     	; 0x1910e <lif_check_volume+0xd0>
   190ee:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   190f2:	80 ff       	sbrs	r24, 0
   190f4:	0a c0       	rjmp	.+20     	; 0x1910a <lif_check_volume+0xcc>
   190f6:	83 e2       	ldi	r24, 0x23	; 35
   190f8:	9e e3       	ldi	r25, 0x3E	; 62
   190fa:	a0 e0       	ldi	r26, 0x00	; 0
   190fc:	ed b7       	in	r30, 0x3d	; 61
   190fe:	fe b7       	in	r31, 0x3e	; 62
   19100:	81 83       	std	Z+1, r24	; 0x01
   19102:	92 83       	std	Z+2, r25	; 0x02
   19104:	a3 83       	std	Z+3, r26	; 0x03
   19106:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1910a:	80 e0       	ldi	r24, 0x00	; 0
   1910c:	90 e0       	ldi	r25, 0x00	; 0
   1910e:	2b ad       	ldd	r18, Y+59	; 0x3b
   19110:	3c ad       	ldd	r19, Y+60	; 0x3c
   19112:	23 2b       	or	r18, r19
   19114:	81 f0       	breq	.+32     	; 0x19136 <lif_check_volume+0xf8>
   19116:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1911a:	80 ff       	sbrs	r24, 0
   1911c:	0a c0       	rjmp	.+20     	; 0x19132 <lif_check_volume+0xf4>
   1911e:	8a ee       	ldi	r24, 0xEA	; 234
   19120:	9d e3       	ldi	r25, 0x3D	; 61
   19122:	a0 e0       	ldi	r26, 0x00	; 0
   19124:	ed b7       	in	r30, 0x3d	; 61
   19126:	fe b7       	in	r31, 0x3e	; 62
   19128:	81 83       	std	Z+1, r24	; 0x01
   1912a:	92 83       	std	Z+2, r25	; 0x02
   1912c:	a3 83       	std	Z+3, r26	; 0x03
   1912e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   19132:	80 e0       	ldi	r24, 0x00	; 0
   19134:	90 e0       	ldi	r25, 0x00	; 0
   19136:	4d a5       	ldd	r20, Y+45	; 0x2d
   19138:	5e a5       	ldd	r21, Y+46	; 0x2e
   1913a:	6f a5       	ldd	r22, Y+47	; 0x2f
   1913c:	78 a9       	ldd	r23, Y+48	; 0x30
   1913e:	45 2b       	or	r20, r21
   19140:	46 2b       	or	r20, r22
   19142:	47 2b       	or	r20, r23
   19144:	a1 f4       	brne	.+40     	; 0x1916e <lif_check_volume+0x130>
   19146:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1914a:	80 ff       	sbrs	r24, 0
   1914c:	0e c0       	rjmp	.+28     	; 0x1916a <lif_check_volume+0x12c>
   1914e:	ed b7       	in	r30, 0x3d	; 61
   19150:	fe b7       	in	r31, 0x3e	; 62
   19152:	14 82       	std	Z+4, r1	; 0x04
   19154:	15 82       	std	Z+5, r1	; 0x05
   19156:	16 82       	std	Z+6, r1	; 0x06
   19158:	17 82       	std	Z+7, r1	; 0x07
   1915a:	85 ec       	ldi	r24, 0xC5	; 197
   1915c:	9d e3       	ldi	r25, 0x3D	; 61
   1915e:	a0 e0       	ldi	r26, 0x00	; 0
   19160:	81 83       	std	Z+1, r24	; 0x01
   19162:	92 83       	std	Z+2, r25	; 0x02
   19164:	a3 83       	std	Z+3, r26	; 0x03
   19166:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1916a:	80 e0       	ldi	r24, 0x00	; 0
   1916c:	90 e0       	ldi	r25, 0x00	; 0
   1916e:	4d a9       	ldd	r20, Y+53	; 0x35
   19170:	5e a9       	ldd	r21, Y+54	; 0x36
   19172:	6f a9       	ldd	r22, Y+55	; 0x37
   19174:	78 ad       	ldd	r23, Y+56	; 0x38
   19176:	45 2b       	or	r20, r21
   19178:	46 2b       	or	r20, r22
   1917a:	47 2b       	or	r20, r23
   1917c:	81 f4       	brne	.+32     	; 0x1919e <lif_check_volume+0x160>
   1917e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   19182:	80 ff       	sbrs	r24, 0
   19184:	0a c0       	rjmp	.+20     	; 0x1919a <lif_check_volume+0x15c>
   19186:	86 e9       	ldi	r24, 0x96	; 150
   19188:	9d e3       	ldi	r25, 0x3D	; 61
   1918a:	a0 e0       	ldi	r26, 0x00	; 0
   1918c:	ed b7       	in	r30, 0x3d	; 61
   1918e:	fe b7       	in	r31, 0x3e	; 62
   19190:	81 83       	std	Z+1, r24	; 0x01
   19192:	92 83       	std	Z+2, r25	; 0x02
   19194:	a3 83       	std	Z+3, r26	; 0x03
   19196:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1919a:	80 e0       	ldi	r24, 0x00	; 0
   1919c:	90 e0       	ldi	r25, 0x00	; 0
   1919e:	0d a5       	ldd	r16, Y+45	; 0x2d
   191a0:	1e a5       	ldd	r17, Y+46	; 0x2e
   191a2:	2f a5       	ldd	r18, Y+47	; 0x2f
   191a4:	38 a9       	ldd	r19, Y+48	; 0x30
   191a6:	4d a9       	ldd	r20, Y+53	; 0x35
   191a8:	5e a9       	ldd	r21, Y+54	; 0x36
   191aa:	6f a9       	ldd	r22, Y+55	; 0x37
   191ac:	78 ad       	ldd	r23, Y+56	; 0x38
   191ae:	40 0f       	add	r20, r16
   191b0:	51 1f       	adc	r21, r17
   191b2:	62 1f       	adc	r22, r18
   191b4:	73 1f       	adc	r23, r19
   191b6:	0c 81       	ldd	r16, Y+4	; 0x04
   191b8:	1d 81       	ldd	r17, Y+5	; 0x05
   191ba:	2e 81       	ldd	r18, Y+6	; 0x06
   191bc:	3f 81       	ldd	r19, Y+7	; 0x07
   191be:	04 17       	cp	r16, r20
   191c0:	15 07       	cpc	r17, r21
   191c2:	26 07       	cpc	r18, r22
   191c4:	37 07       	cpc	r19, r23
   191c6:	80 f4       	brcc	.+32     	; 0x191e8 <lif_check_volume+0x1aa>
   191c8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   191cc:	80 ff       	sbrs	r24, 0
   191ce:	0a c0       	rjmp	.+20     	; 0x191e4 <lif_check_volume+0x1a6>
   191d0:	8a e6       	ldi	r24, 0x6A	; 106
   191d2:	9d e3       	ldi	r25, 0x3D	; 61
   191d4:	a0 e0       	ldi	r26, 0x00	; 0
   191d6:	ed b7       	in	r30, 0x3d	; 61
   191d8:	fe b7       	in	r31, 0x3e	; 62
   191da:	81 83       	std	Z+1, r24	; 0x01
   191dc:	92 83       	std	Z+2, r25	; 0x02
   191de:	a3 83       	std	Z+3, r26	; 0x03
   191e0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   191e4:	80 e0       	ldi	r24, 0x00	; 0
   191e6:	90 e0       	ldi	r25, 0x00	; 0
   191e8:	cd b7       	in	r28, 0x3d	; 61
   191ea:	de b7       	in	r29, 0x3e	; 62
   191ec:	27 96       	adiw	r28, 0x07	; 7
   191ee:	e4 e0       	ldi	r30, 0x04	; 4
   191f0:	0c 94 b0 e4 	jmp	0x1c960	; 0x1c960 <__epilogue_restores__+0x1c>

000191f4 <lif_check_dir>:
   191f4:	a5 e1       	ldi	r26, 0x15	; 21
   191f6:	b0 e0       	ldi	r27, 0x00	; 0
   191f8:	e0 e0       	ldi	r30, 0x00	; 0
   191fa:	f9 ec       	ldi	r31, 0xC9	; 201
   191fc:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
   19200:	6c 01       	movw	r12, r24
   19202:	2a e5       	ldi	r18, 0x5A	; 90
   19204:	c2 0e       	add	r12, r18
   19206:	d1 1c       	adc	r13, r1
   19208:	f6 01       	movw	r30, r12
   1920a:	20 81       	ld	r18, Z
   1920c:	31 81       	ldd	r19, Z+1	; 0x01
   1920e:	21 50       	subi	r18, 0x01	; 1
   19210:	31 09       	sbc	r19, r1
   19212:	2e 3f       	cpi	r18, 0xFE	; 254
   19214:	3f 4f       	sbci	r19, 0xFF	; 255
   19216:	08 f0       	brcs	.+2      	; 0x1921a <lif_check_dir+0x26>
   19218:	8e c1       	rjmp	.+796    	; 0x19536 <lif_check_dir+0x342>
   1921a:	9d 8b       	std	Y+21, r25	; 0x15
   1921c:	8c 8b       	std	Y+20, r24	; 0x14
   1921e:	7c 01       	movw	r14, r24
   19220:	2f e4       	ldi	r18, 0x4F	; 79
   19222:	e2 0e       	add	r14, r18
   19224:	f1 1c       	adc	r15, r1
   19226:	c7 01       	movw	r24, r14
   19228:	d9 d9       	rcall	.-3150   	; 0x185dc <lif_checkname>
   1922a:	89 2b       	or	r24, r25
   1922c:	89 f4       	brne	.+34     	; 0x19250 <lif_check_dir+0x5c>
   1922e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   19232:	80 ff       	sbrs	r24, 0
   19234:	0f c0       	rjmp	.+30     	; 0x19254 <lif_check_dir+0x60>
   19236:	ed b7       	in	r30, 0x3d	; 61
   19238:	fe b7       	in	r31, 0x3e	; 62
   1923a:	f5 82       	std	Z+5, r15	; 0x05
   1923c:	e4 82       	std	Z+4, r14	; 0x04
   1923e:	89 e4       	ldi	r24, 0x49	; 73
   19240:	9d e3       	ldi	r25, 0x3D	; 61
   19242:	a0 e0       	ldi	r26, 0x00	; 0
   19244:	81 83       	std	Z+1, r24	; 0x01
   19246:	92 83       	std	Z+2, r25	; 0x02
   19248:	a3 83       	std	Z+3, r26	; 0x03
   1924a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1924e:	02 c0       	rjmp	.+4      	; 0x19254 <lif_check_dir+0x60>
   19250:	01 e0       	ldi	r16, 0x01	; 1
   19252:	01 c0       	rjmp	.+2      	; 0x19256 <lif_check_dir+0x62>
   19254:	00 e0       	ldi	r16, 0x00	; 0
   19256:	10 e0       	ldi	r17, 0x00	; 0
   19258:	ec 89       	ldd	r30, Y+20	; 0x14
   1925a:	fd 89       	ldd	r31, Y+21	; 0x15
   1925c:	84 85       	ldd	r24, Z+12	; 0x0c
   1925e:	95 85       	ldd	r25, Z+13	; 0x0d
   19260:	a6 85       	ldd	r26, Z+14	; 0x0e
   19262:	b7 85       	ldd	r27, Z+15	; 0x0f
   19264:	00 97       	sbiw	r24, 0x00	; 0
   19266:	a1 05       	cpc	r26, r1
   19268:	b1 05       	cpc	r27, r1
   1926a:	29 f1       	breq	.+74     	; 0x192b6 <lif_check_dir+0xc2>
   1926c:	e4 5a       	subi	r30, 0xA4	; 164
   1926e:	ff 4f       	sbci	r31, 0xFF	; 255
   19270:	40 81       	ld	r20, Z
   19272:	51 81       	ldd	r21, Z+1	; 0x01
   19274:	62 81       	ldd	r22, Z+2	; 0x02
   19276:	73 81       	ldd	r23, Z+3	; 0x03
   19278:	48 17       	cp	r20, r24
   1927a:	59 07       	cpc	r21, r25
   1927c:	6a 07       	cpc	r22, r26
   1927e:	7b 07       	cpc	r23, r27
   19280:	d0 f4       	brcc	.+52     	; 0x192b6 <lif_check_dir+0xc2>
   19282:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   19286:	20 ff       	sbrs	r18, 0
   19288:	14 c0       	rjmp	.+40     	; 0x192b2 <lif_check_dir+0xbe>
   1928a:	ed b7       	in	r30, 0x3d	; 61
   1928c:	fe b7       	in	r31, 0x3e	; 62
   1928e:	82 87       	std	Z+10, r24	; 0x0a
   19290:	93 87       	std	Z+11, r25	; 0x0b
   19292:	a4 87       	std	Z+12, r26	; 0x0c
   19294:	b5 87       	std	Z+13, r27	; 0x0d
   19296:	46 83       	std	Z+6, r20	; 0x06
   19298:	57 83       	std	Z+7, r21	; 0x07
   1929a:	60 87       	std	Z+8, r22	; 0x08
   1929c:	71 87       	std	Z+9, r23	; 0x09
   1929e:	f5 82       	std	Z+5, r15	; 0x05
   192a0:	e4 82       	std	Z+4, r14	; 0x04
   192a2:	85 e0       	ldi	r24, 0x05	; 5
   192a4:	9d e3       	ldi	r25, 0x3D	; 61
   192a6:	a0 e0       	ldi	r26, 0x00	; 0
   192a8:	81 83       	std	Z+1, r24	; 0x01
   192aa:	92 83       	std	Z+2, r25	; 0x02
   192ac:	a3 83       	std	Z+3, r26	; 0x03
   192ae:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   192b2:	00 e0       	ldi	r16, 0x00	; 0
   192b4:	10 e0       	ldi	r17, 0x00	; 0
   192b6:	ec 89       	ldd	r30, Y+20	; 0x14
   192b8:	fd 89       	ldd	r31, Y+21	; 0x15
   192ba:	44 81       	ldd	r20, Z+4	; 0x04
   192bc:	55 81       	ldd	r21, Z+5	; 0x05
   192be:	66 81       	ldd	r22, Z+6	; 0x06
   192c0:	77 81       	ldd	r23, Z+7	; 0x07
   192c2:	41 15       	cp	r20, r1
   192c4:	51 05       	cpc	r21, r1
   192c6:	61 05       	cpc	r22, r1
   192c8:	71 05       	cpc	r23, r1
   192ca:	89 f1       	breq	.+98     	; 0x1932e <lif_check_dir+0x13a>
   192cc:	e4 5a       	subi	r30, 0xA4	; 164
   192ce:	ff 4f       	sbci	r31, 0xFF	; 255
   192d0:	80 80       	ld	r8, Z
   192d2:	91 80       	ldd	r9, Z+1	; 0x01
   192d4:	a2 80       	ldd	r10, Z+2	; 0x02
   192d6:	b3 80       	ldd	r11, Z+3	; 0x03
   192d8:	ec 89       	ldd	r30, Y+20	; 0x14
   192da:	fd 89       	ldd	r31, Y+21	; 0x15
   192dc:	e0 5a       	subi	r30, 0xA0	; 160
   192de:	ff 4f       	sbci	r31, 0xFF	; 255
   192e0:	80 81       	ld	r24, Z
   192e2:	91 81       	ldd	r25, Z+1	; 0x01
   192e4:	a2 81       	ldd	r26, Z+2	; 0x02
   192e6:	b3 81       	ldd	r27, Z+3	; 0x03
   192e8:	88 0d       	add	r24, r8
   192ea:	99 1d       	adc	r25, r9
   192ec:	aa 1d       	adc	r26, r10
   192ee:	bb 1d       	adc	r27, r11
   192f0:	48 17       	cp	r20, r24
   192f2:	59 07       	cpc	r21, r25
   192f4:	6a 07       	cpc	r22, r26
   192f6:	7b 07       	cpc	r23, r27
   192f8:	d0 f4       	brcc	.+52     	; 0x1932e <lif_check_dir+0x13a>
   192fa:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   192fe:	20 ff       	sbrs	r18, 0
   19300:	14 c0       	rjmp	.+40     	; 0x1932a <lif_check_dir+0x136>
   19302:	ed b7       	in	r30, 0x3d	; 61
   19304:	fe b7       	in	r31, 0x3e	; 62
   19306:	42 87       	std	Z+10, r20	; 0x0a
   19308:	53 87       	std	Z+11, r21	; 0x0b
   1930a:	64 87       	std	Z+12, r22	; 0x0c
   1930c:	75 87       	std	Z+13, r23	; 0x0d
   1930e:	86 83       	std	Z+6, r24	; 0x06
   19310:	97 83       	std	Z+7, r25	; 0x07
   19312:	a0 87       	std	Z+8, r26	; 0x08
   19314:	b1 87       	std	Z+9, r27	; 0x09
   19316:	f5 82       	std	Z+5, r15	; 0x05
   19318:	e4 82       	std	Z+4, r14	; 0x04
   1931a:	84 ec       	ldi	r24, 0xC4	; 196
   1931c:	9c e3       	ldi	r25, 0x3C	; 60
   1931e:	a0 e0       	ldi	r26, 0x00	; 0
   19320:	81 83       	std	Z+1, r24	; 0x01
   19322:	92 83       	std	Z+2, r25	; 0x02
   19324:	a3 83       	std	Z+3, r26	; 0x03
   19326:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1932a:	00 e0       	ldi	r16, 0x00	; 0
   1932c:	10 e0       	ldi	r17, 0x00	; 0
   1932e:	ec 89       	ldd	r30, Y+20	; 0x14
   19330:	fd 89       	ldd	r31, Y+21	; 0x15
   19332:	e6 59       	subi	r30, 0x96	; 150
   19334:	ff 4f       	sbci	r31, 0xFF	; 255
   19336:	80 81       	ld	r24, Z
   19338:	91 81       	ldd	r25, Z+1	; 0x01
   1933a:	81 30       	cpi	r24, 0x01	; 1
   1933c:	f0 e8       	ldi	r31, 0x80	; 128
   1933e:	9f 07       	cpc	r25, r31
   19340:	a1 f0       	breq	.+40     	; 0x1936a <lif_check_dir+0x176>
   19342:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   19346:	20 ff       	sbrs	r18, 0
   19348:	0e c0       	rjmp	.+28     	; 0x19366 <lif_check_dir+0x172>
   1934a:	ed b7       	in	r30, 0x3d	; 61
   1934c:	fe b7       	in	r31, 0x3e	; 62
   1934e:	97 83       	std	Z+7, r25	; 0x07
   19350:	86 83       	std	Z+6, r24	; 0x06
   19352:	f5 82       	std	Z+5, r15	; 0x05
   19354:	e4 82       	std	Z+4, r14	; 0x04
   19356:	86 e9       	ldi	r24, 0x96	; 150
   19358:	9c e3       	ldi	r25, 0x3C	; 60
   1935a:	a0 e0       	ldi	r26, 0x00	; 0
   1935c:	81 83       	std	Z+1, r24	; 0x01
   1935e:	92 83       	std	Z+2, r25	; 0x02
   19360:	a3 83       	std	Z+3, r26	; 0x03
   19362:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   19366:	00 e0       	ldi	r16, 0x00	; 0
   19368:	10 e0       	ldi	r17, 0x00	; 0
   1936a:	f6 01       	movw	r30, r12
   1936c:	80 81       	ld	r24, Z
   1936e:	91 81       	ldd	r25, Z+1	; 0x01
   19370:	8c 7f       	andi	r24, 0xFC	; 252
   19372:	80 31       	cpi	r24, 0x10	; 16
   19374:	90 4e       	sbci	r25, 0xE0	; 224
   19376:	09 f0       	breq	.+2      	; 0x1937a <lif_check_dir+0x186>
   19378:	af c0       	rjmp	.+350    	; 0x194d8 <lif_check_dir+0x2e4>
   1937a:	cc 88       	ldd	r12, Y+20	; 0x14
   1937c:	dd 88       	ldd	r13, Y+21	; 0x15
   1937e:	2c e6       	ldi	r18, 0x6C	; 108
   19380:	c2 0e       	add	r12, r18
   19382:	d1 1c       	adc	r13, r1
   19384:	f6 01       	movw	r30, r12
   19386:	80 81       	ld	r24, Z
   19388:	91 81       	ldd	r25, Z+1	; 0x01
   1938a:	00 97       	sbiw	r24, 0x00	; 0
   1938c:	09 f4       	brne	.+2      	; 0x19390 <lif_check_dir+0x19c>
   1938e:	a4 c0       	rjmp	.+328    	; 0x194d8 <lif_check_dir+0x2e4>
   19390:	4c 01       	movw	r8, r24
   19392:	a1 2c       	mov	r10, r1
   19394:	b1 2c       	mov	r11, r1
   19396:	77 27       	eor	r23, r23
   19398:	6b 2d       	mov	r22, r11
   1939a:	5a 2d       	mov	r21, r10
   1939c:	49 2d       	mov	r20, r9
   1939e:	9c 01       	movw	r18, r24
   193a0:	33 27       	eor	r19, r19
   193a2:	3b 8b       	std	Y+19, r19	; 0x13
   193a4:	2a 8b       	std	Y+18, r18	; 0x12
   193a6:	db 01       	movw	r26, r22
   193a8:	ca 01       	movw	r24, r20
   193aa:	23 2b       	or	r18, r19
   193ac:	19 f0       	breq	.+6      	; 0x193b4 <lif_check_dir+0x1c0>
   193ae:	01 96       	adiw	r24, 0x01	; 1
   193b0:	a1 1d       	adc	r26, r1
   193b2:	b1 1d       	adc	r27, r1
   193b4:	2c 88       	ldd	r2, Y+20	; 0x14
   193b6:	3d 88       	ldd	r3, Y+21	; 0x15
   193b8:	30 e6       	ldi	r19, 0x60	; 96
   193ba:	23 0e       	add	r2, r19
   193bc:	31 1c       	adc	r3, r1
   193be:	f1 01       	movw	r30, r2
   193c0:	40 80       	ld	r4, Z
   193c2:	51 80       	ldd	r5, Z+1	; 0x01
   193c4:	62 80       	ldd	r6, Z+2	; 0x02
   193c6:	73 80       	ldd	r7, Z+3	; 0x03
   193c8:	48 16       	cp	r4, r24
   193ca:	59 06       	cpc	r5, r25
   193cc:	6a 06       	cpc	r6, r26
   193ce:	7b 06       	cpc	r7, r27
   193d0:	30 f5       	brcc	.+76     	; 0x1941e <lif_check_dir+0x22a>
   193d2:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   193d6:	20 ff       	sbrs	r18, 0
   193d8:	20 c0       	rjmp	.+64     	; 0x1941a <lif_check_dir+0x226>
   193da:	2a 89       	ldd	r18, Y+18	; 0x12
   193dc:	3b 89       	ldd	r19, Y+19	; 0x13
   193de:	23 2b       	or	r18, r19
   193e0:	21 f0       	breq	.+8      	; 0x193ea <lif_check_dir+0x1f6>
   193e2:	4f 5f       	subi	r20, 0xFF	; 255
   193e4:	5f 4f       	sbci	r21, 0xFF	; 255
   193e6:	6f 4f       	sbci	r22, 0xFF	; 255
   193e8:	7f 4f       	sbci	r23, 0xFF	; 255
   193ea:	ed b7       	in	r30, 0x3d	; 61
   193ec:	fe b7       	in	r31, 0x3e	; 62
   193ee:	46 86       	std	Z+14, r4	; 0x0e
   193f0:	57 86       	std	Z+15, r5	; 0x0f
   193f2:	60 8a       	std	Z+16, r6	; 0x10
   193f4:	71 8a       	std	Z+17, r7	; 0x11
   193f6:	42 87       	std	Z+10, r20	; 0x0a
   193f8:	53 87       	std	Z+11, r21	; 0x0b
   193fa:	64 87       	std	Z+12, r22	; 0x0c
   193fc:	75 87       	std	Z+13, r23	; 0x0d
   193fe:	86 82       	std	Z+6, r8	; 0x06
   19400:	97 82       	std	Z+7, r9	; 0x07
   19402:	a0 86       	std	Z+8, r10	; 0x08
   19404:	b1 86       	std	Z+9, r11	; 0x09
   19406:	f5 82       	std	Z+5, r15	; 0x05
   19408:	e4 82       	std	Z+4, r14	; 0x04
   1940a:	8b e4       	ldi	r24, 0x4B	; 75
   1940c:	9c e3       	ldi	r25, 0x3C	; 60
   1940e:	a0 e0       	ldi	r26, 0x00	; 0
   19410:	81 83       	std	Z+1, r24	; 0x01
   19412:	92 83       	std	Z+2, r25	; 0x02
   19414:	a3 83       	std	Z+3, r26	; 0x03
   19416:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1941a:	00 e0       	ldi	r16, 0x00	; 0
   1941c:	10 e0       	ldi	r17, 0x00	; 0
   1941e:	f6 01       	movw	r30, r12
   19420:	20 81       	ld	r18, Z
   19422:	31 81       	ldd	r19, Z+1	; 0x01
   19424:	a9 01       	movw	r20, r18
   19426:	60 e0       	ldi	r22, 0x00	; 0
   19428:	70 e0       	ldi	r23, 0x00	; 0
   1942a:	bb 27       	eor	r27, r27
   1942c:	a7 2f       	mov	r26, r23
   1942e:	96 2f       	mov	r25, r22
   19430:	85 2f       	mov	r24, r21
   19432:	f9 01       	movw	r30, r18
   19434:	ff 27       	eor	r31, r31
   19436:	fb 8b       	std	Y+19, r31	; 0x13
   19438:	ea 8b       	std	Y+18, r30	; 0x12
   1943a:	2c 01       	movw	r4, r24
   1943c:	3d 01       	movw	r6, r26
   1943e:	ef 2b       	or	r30, r31
   19440:	29 f0       	breq	.+10     	; 0x1944c <lif_check_dir+0x258>
   19442:	ff ef       	ldi	r31, 0xFF	; 255
   19444:	4f 1a       	sub	r4, r31
   19446:	5f 0a       	sbc	r5, r31
   19448:	6f 0a       	sbc	r6, r31
   1944a:	7f 0a       	sbc	r7, r31
   1944c:	f1 01       	movw	r30, r2
   1944e:	80 80       	ld	r8, Z
   19450:	91 80       	ldd	r9, Z+1	; 0x01
   19452:	a2 80       	ldd	r10, Z+2	; 0x02
   19454:	b3 80       	ldd	r11, Z+3	; 0x03
   19456:	48 14       	cp	r4, r8
   19458:	59 04       	cpc	r5, r9
   1945a:	6a 04       	cpc	r6, r10
   1945c:	7b 04       	cpc	r7, r11
   1945e:	28 f5       	brcc	.+74     	; 0x194aa <lif_check_dir+0x2b6>
   19460:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   19464:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   19468:	32 ff       	sbrs	r19, 2
   1946a:	1f c0       	rjmp	.+62     	; 0x194aa <lif_check_dir+0x2b6>
   1946c:	2a 89       	ldd	r18, Y+18	; 0x12
   1946e:	3b 89       	ldd	r19, Y+19	; 0x13
   19470:	23 2b       	or	r18, r19
   19472:	19 f0       	breq	.+6      	; 0x1947a <lif_check_dir+0x286>
   19474:	01 96       	adiw	r24, 0x01	; 1
   19476:	a1 1d       	adc	r26, r1
   19478:	b1 1d       	adc	r27, r1
   1947a:	ed b7       	in	r30, 0x3d	; 61
   1947c:	fe b7       	in	r31, 0x3e	; 62
   1947e:	86 86       	std	Z+14, r8	; 0x0e
   19480:	97 86       	std	Z+15, r9	; 0x0f
   19482:	a0 8a       	std	Z+16, r10	; 0x10
   19484:	b1 8a       	std	Z+17, r11	; 0x11
   19486:	82 87       	std	Z+10, r24	; 0x0a
   19488:	93 87       	std	Z+11, r25	; 0x0b
   1948a:	a4 87       	std	Z+12, r26	; 0x0c
   1948c:	b5 87       	std	Z+13, r27	; 0x0d
   1948e:	46 83       	std	Z+6, r20	; 0x06
   19490:	57 83       	std	Z+7, r21	; 0x07
   19492:	60 87       	std	Z+8, r22	; 0x08
   19494:	71 87       	std	Z+9, r23	; 0x09
   19496:	f5 82       	std	Z+5, r15	; 0x05
   19498:	e4 82       	std	Z+4, r14	; 0x04
   1949a:	80 e0       	ldi	r24, 0x00	; 0
   1949c:	9c e3       	ldi	r25, 0x3C	; 60
   1949e:	a0 e0       	ldi	r26, 0x00	; 0
   194a0:	81 83       	std	Z+1, r24	; 0x01
   194a2:	92 83       	std	Z+2, r25	; 0x02
   194a4:	a3 83       	std	Z+3, r26	; 0x03
   194a6:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   194aa:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   194ae:	80 ff       	sbrs	r24, 0
   194b0:	13 c0       	rjmp	.+38     	; 0x194d8 <lif_check_dir+0x2e4>
   194b2:	f6 01       	movw	r30, r12
   194b4:	80 81       	ld	r24, Z
   194b6:	91 81       	ldd	r25, Z+1	; 0x01
   194b8:	89 2b       	or	r24, r25
   194ba:	71 f4       	brne	.+28     	; 0x194d8 <lif_check_dir+0x2e4>
   194bc:	ed b7       	in	r30, 0x3d	; 61
   194be:	fe b7       	in	r31, 0x3e	; 62
   194c0:	f5 82       	std	Z+5, r15	; 0x05
   194c2:	e4 82       	std	Z+4, r14	; 0x04
   194c4:	85 ed       	ldi	r24, 0xD5	; 213
   194c6:	9b e3       	ldi	r25, 0x3B	; 59
   194c8:	a0 e0       	ldi	r26, 0x00	; 0
   194ca:	81 83       	std	Z+1, r24	; 0x01
   194cc:	92 83       	std	Z+2, r25	; 0x02
   194ce:	a3 83       	std	Z+3, r26	; 0x03
   194d0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   194d4:	00 e0       	ldi	r16, 0x00	; 0
   194d6:	10 e0       	ldi	r17, 0x00	; 0
   194d8:	ec 89       	ldd	r30, Y+20	; 0x14
   194da:	fd 89       	ldd	r31, Y+21	; 0x15
   194dc:	e2 59       	subi	r30, 0x92	; 146
   194de:	ff 4f       	sbci	r31, 0xFF	; 255
   194e0:	20 81       	ld	r18, Z
   194e2:	31 81       	ldd	r19, Z+1	; 0x01
   194e4:	21 15       	cp	r18, r1
   194e6:	f1 e0       	ldi	r31, 0x01	; 1
   194e8:	3f 07       	cpc	r19, r31
   194ea:	41 f1       	breq	.+80     	; 0x1953c <lif_check_dir+0x348>
   194ec:	40 91 c3 01 	lds	r20, 0x01C3	; 0x8001c3 <debuglevel>
   194f0:	50 91 c4 01 	lds	r21, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   194f4:	ca 01       	movw	r24, r20
   194f6:	81 70       	andi	r24, 0x01	; 1
   194f8:	99 27       	eor	r25, r25
   194fa:	40 ff       	sbrs	r20, 0
   194fc:	20 c0       	rjmp	.+64     	; 0x1953e <lif_check_dir+0x34a>
   194fe:	c9 01       	movw	r24, r18
   19500:	a0 e0       	ldi	r26, 0x00	; 0
   19502:	b0 e0       	ldi	r27, 0x00	; 0
   19504:	ed b7       	in	r30, 0x3d	; 61
   19506:	fe b7       	in	r31, 0x3e	; 62
   19508:	86 83       	std	Z+6, r24	; 0x06
   1950a:	97 83       	std	Z+7, r25	; 0x07
   1950c:	a0 87       	std	Z+8, r26	; 0x08
   1950e:	b1 87       	std	Z+9, r27	; 0x09
   19510:	ec 89       	ldd	r30, Y+20	; 0x14
   19512:	fd 89       	ldd	r31, Y+21	; 0x15
   19514:	80 81       	ld	r24, Z
   19516:	91 81       	ldd	r25, Z+1	; 0x01
   19518:	ed b7       	in	r30, 0x3d	; 61
   1951a:	fe b7       	in	r31, 0x3e	; 62
   1951c:	95 83       	std	Z+5, r25	; 0x05
   1951e:	84 83       	std	Z+4, r24	; 0x04
   19520:	89 ea       	ldi	r24, 0xA9	; 169
   19522:	9b e3       	ldi	r25, 0x3B	; 59
   19524:	a0 e0       	ldi	r26, 0x00	; 0
   19526:	81 83       	std	Z+1, r24	; 0x01
   19528:	92 83       	std	Z+2, r25	; 0x02
   1952a:	a3 83       	std	Z+3, r26	; 0x03
   1952c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   19530:	80 e0       	ldi	r24, 0x00	; 0
   19532:	90 e0       	ldi	r25, 0x00	; 0
   19534:	04 c0       	rjmp	.+8      	; 0x1953e <lif_check_dir+0x34a>
   19536:	81 e0       	ldi	r24, 0x01	; 1
   19538:	90 e0       	ldi	r25, 0x00	; 0
   1953a:	01 c0       	rjmp	.+2      	; 0x1953e <lif_check_dir+0x34a>
   1953c:	c8 01       	movw	r24, r16
   1953e:	65 96       	adiw	r28, 0x15	; 21
   19540:	e2 e1       	ldi	r30, 0x12	; 18
   19542:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

00019546 <lif_close_volume>:
   19546:	cf 93       	push	r28
   19548:	df 93       	push	r29
   1954a:	00 97       	sbiw	r24, 0x00	; 0
   1954c:	f9 f0       	breq	.+62     	; 0x1958c <lif_close_volume+0x46>
   1954e:	ec 01       	movw	r28, r24
   19550:	8a 81       	ldd	r24, Y+2	; 0x02
   19552:	9b 81       	ldd	r25, Y+3	; 0x03
   19554:	00 97       	sbiw	r24, 0x00	; 0
   19556:	79 f0       	breq	.+30     	; 0x19576 <lif_close_volume+0x30>
   19558:	22 e0       	ldi	r18, 0x02	; 2
   1955a:	30 e0       	ldi	r19, 0x00	; 0
   1955c:	40 e0       	ldi	r20, 0x00	; 0
   1955e:	50 e0       	ldi	r21, 0x00	; 0
   19560:	ba 01       	movw	r22, r20
   19562:	0e 94 f4 7b 	call	0xf7e8	; 0xf7e8 <fseek>
   19566:	8a 81       	ldd	r24, Y+2	; 0x02
   19568:	9b 81       	ldd	r25, Y+3	; 0x03
   1956a:	0e 94 dc 7d 	call	0xfbb8	; 0xfbb8 <fclose>
   1956e:	1b 82       	std	Y+3, r1	; 0x03
   19570:	1a 82       	std	Y+2, r1	; 0x02
   19572:	0e 94 d7 7c 	call	0xf9ae	; 0xf9ae <sync>
   19576:	88 81       	ld	r24, Y
   19578:	99 81       	ldd	r25, Y+1	; 0x01
   1957a:	00 97       	sbiw	r24, 0x00	; 0
   1957c:	11 f0       	breq	.+4      	; 0x19582 <lif_close_volume+0x3c>
   1957e:	0e 94 1f c1 	call	0x1823e	; 0x1823e <lif_free>
   19582:	ce 01       	movw	r24, r28
   19584:	8f db       	rcall	.-2274   	; 0x18ca4 <lif_vol_clear>
   19586:	ce 01       	movw	r24, r28
   19588:	0e 94 1f c1 	call	0x1823e	; 0x1823e <lif_free>
   1958c:	df 91       	pop	r29
   1958e:	cf 91       	pop	r28
   19590:	08 95       	ret

00019592 <lif_checkdirindex>:
   19592:	cf 92       	push	r12
   19594:	df 92       	push	r13
   19596:	ef 92       	push	r14
   19598:	ff 92       	push	r15
   1959a:	cf 93       	push	r28
   1959c:	df 93       	push	r29
   1959e:	ad b7       	in	r26, 0x3d	; 61
   195a0:	be b7       	in	r27, 0x3e	; 62
   195a2:	17 97       	sbiw	r26, 0x07	; 7
   195a4:	0f b6       	in	r0, 0x3f	; 63
   195a6:	f8 94       	cli
   195a8:	be bf       	out	0x3e, r27	; 62
   195aa:	0f be       	out	0x3f, r0	; 63
   195ac:	ad bf       	out	0x3d, r26	; 61
   195ae:	9b 01       	movw	r18, r22
   195b0:	77 fd       	sbrc	r23, 7
   195b2:	25 c0       	rjmp	.+74     	; 0x195fe <lif_checkdirindex+0x6c>
   195b4:	ab 01       	movw	r20, r22
   195b6:	77 0f       	add	r23, r23
   195b8:	66 0b       	sbc	r22, r22
   195ba:	77 0b       	sbc	r23, r23
   195bc:	e5 e0       	ldi	r30, 0x05	; 5
   195be:	44 0f       	add	r20, r20
   195c0:	55 1f       	adc	r21, r21
   195c2:	66 1f       	adc	r22, r22
   195c4:	77 1f       	adc	r23, r23
   195c6:	ea 95       	dec	r30
   195c8:	d1 f7       	brne	.-12     	; 0x195be <lif_checkdirindex+0x2c>
   195ca:	c5 2e       	mov	r12, r21
   195cc:	d6 2e       	mov	r13, r22
   195ce:	e7 2e       	mov	r14, r23
   195d0:	ff 24       	eor	r15, r15
   195d2:	55 27       	eor	r21, r21
   195d4:	66 27       	eor	r22, r22
   195d6:	77 27       	eor	r23, r23
   195d8:	45 2b       	or	r20, r21
   195da:	46 2b       	or	r20, r22
   195dc:	47 2b       	or	r20, r23
   195de:	29 f0       	breq	.+10     	; 0x195ea <lif_checkdirindex+0x58>
   195e0:	4f ef       	ldi	r20, 0xFF	; 255
   195e2:	c4 1a       	sub	r12, r20
   195e4:	d4 0a       	sbc	r13, r20
   195e6:	e4 0a       	sbc	r14, r20
   195e8:	f4 0a       	sbc	r15, r20
   195ea:	fc 01       	movw	r30, r24
   195ec:	45 a9       	ldd	r20, Z+53	; 0x35
   195ee:	56 a9       	ldd	r21, Z+54	; 0x36
   195f0:	67 a9       	ldd	r22, Z+55	; 0x37
   195f2:	70 ad       	ldd	r23, Z+56	; 0x38
   195f4:	4c 15       	cp	r20, r12
   195f6:	5d 05       	cpc	r21, r13
   195f8:	6e 05       	cpc	r22, r14
   195fa:	7f 05       	cpc	r23, r15
   195fc:	08 f5       	brcc	.+66     	; 0x19640 <lif_checkdirindex+0xae>
   195fe:	ec 01       	movw	r28, r24
   19600:	ed b7       	in	r30, 0x3d	; 61
   19602:	fe b7       	in	r31, 0x3e	; 62
   19604:	37 83       	std	Z+7, r19	; 0x07
   19606:	26 83       	std	Z+6, r18	; 0x06
   19608:	88 81       	ld	r24, Y
   1960a:	99 81       	ldd	r25, Y+1	; 0x01
   1960c:	95 83       	std	Z+5, r25	; 0x05
   1960e:	84 83       	std	Z+4, r24	; 0x04
   19610:	86 ee       	ldi	r24, 0xE6	; 230
   19612:	9a e3       	ldi	r25, 0x3A	; 58
   19614:	a0 e0       	ldi	r26, 0x00	; 0
   19616:	81 83       	std	Z+1, r24	; 0x01
   19618:	92 83       	std	Z+2, r25	; 0x02
   1961a:	a3 83       	std	Z+3, r26	; 0x03
   1961c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   19620:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   19624:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   19628:	c9 01       	movw	r24, r18
   1962a:	88 27       	eor	r24, r24
   1962c:	94 70       	andi	r25, 0x04	; 4
   1962e:	32 ff       	sbrs	r19, 2
   19630:	09 c0       	rjmp	.+18     	; 0x19644 <lif_checkdirindex+0xb2>
   19632:	61 e4       	ldi	r22, 0x41	; 65
   19634:	75 e1       	ldi	r23, 0x15	; 21
   19636:	ce 01       	movw	r24, r28
   19638:	3c db       	rcall	.-2440   	; 0x18cb2 <lif_dump_vol>
   1963a:	80 e0       	ldi	r24, 0x00	; 0
   1963c:	90 e0       	ldi	r25, 0x00	; 0
   1963e:	02 c0       	rjmp	.+4      	; 0x19644 <lif_checkdirindex+0xb2>
   19640:	81 e0       	ldi	r24, 0x01	; 1
   19642:	90 e0       	ldi	r25, 0x00	; 0
   19644:	ad b7       	in	r26, 0x3d	; 61
   19646:	be b7       	in	r27, 0x3e	; 62
   19648:	17 96       	adiw	r26, 0x07	; 7
   1964a:	0f b6       	in	r0, 0x3f	; 63
   1964c:	f8 94       	cli
   1964e:	be bf       	out	0x3e, r27	; 62
   19650:	0f be       	out	0x3f, r0	; 63
   19652:	ad bf       	out	0x3d, r26	; 61
   19654:	df 91       	pop	r29
   19656:	cf 91       	pop	r28
   19658:	ff 90       	pop	r15
   1965a:	ef 90       	pop	r14
   1965c:	df 90       	pop	r13
   1965e:	cf 90       	pop	r12
   19660:	08 95       	ret

00019662 <lif_readdirindex>:
   19662:	a5 e2       	ldi	r26, 0x25	; 37
   19664:	b0 e0       	ldi	r27, 0x00	; 0
   19666:	e7 e3       	ldi	r30, 0x37	; 55
   19668:	fb ec       	ldi	r31, 0xCB	; 203
   1966a:	0c 94 90 e4 	jmp	0x1c920	; 0x1c920 <__prologue_saves__+0x14>
   1966e:	7c 01       	movw	r14, r24
   19670:	6b 01       	movw	r12, r22
   19672:	8f df       	rcall	.-226    	; 0x19592 <lif_checkdirindex>
   19674:	89 2b       	or	r24, r25
   19676:	19 f4       	brne	.+6      	; 0x1967e <lif_readdirindex+0x1c>
   19678:	00 e0       	ldi	r16, 0x00	; 0
   1967a:	10 e0       	ldi	r17, 0x00	; 0
   1967c:	54 c0       	rjmp	.+168    	; 0x19726 <lif_readdirindex+0xc4>
   1967e:	f7 01       	movw	r30, r14
   19680:	85 a5       	ldd	r24, Z+45	; 0x2d
   19682:	96 a5       	ldd	r25, Z+46	; 0x2e
   19684:	a7 a5       	ldd	r26, Z+47	; 0x2f
   19686:	b0 a9       	ldd	r27, Z+48	; 0x30
   19688:	44 27       	eor	r20, r20
   1968a:	58 2f       	mov	r21, r24
   1968c:	69 2f       	mov	r22, r25
   1968e:	7a 2f       	mov	r23, r26
   19690:	c6 01       	movw	r24, r12
   19692:	0d 2c       	mov	r0, r13
   19694:	00 0c       	add	r0, r0
   19696:	aa 0b       	sbc	r26, r26
   19698:	bb 0b       	sbc	r27, r27
   1969a:	35 e0       	ldi	r19, 0x05	; 5
   1969c:	88 0f       	add	r24, r24
   1969e:	99 1f       	adc	r25, r25
   196a0:	aa 1f       	adc	r26, r26
   196a2:	bb 1f       	adc	r27, r27
   196a4:	3a 95       	dec	r19
   196a6:	d1 f7       	brne	.-12     	; 0x1969c <lif_readdirindex+0x3a>
   196a8:	9a 01       	movw	r18, r20
   196aa:	ab 01       	movw	r20, r22
   196ac:	28 0f       	add	r18, r24
   196ae:	39 1f       	adc	r19, r25
   196b0:	4a 1f       	adc	r20, r26
   196b2:	5b 1f       	adc	r21, r27
   196b4:	00 e2       	ldi	r16, 0x20	; 32
   196b6:	10 e0       	ldi	r17, 0x00	; 0
   196b8:	be 01       	movw	r22, r28
   196ba:	6a 5f       	subi	r22, 0xFA	; 250
   196bc:	7f 4f       	sbci	r23, 0xFF	; 255
   196be:	c7 01       	movw	r24, r14
   196c0:	0e 94 d7 c1 	call	0x183ae	; 0x183ae <lif_read>
   196c4:	60 32       	cpi	r22, 0x20	; 32
   196c6:	71 05       	cpc	r23, r1
   196c8:	81 05       	cpc	r24, r1
   196ca:	91 05       	cpc	r25, r1
   196cc:	a8 f2       	brcs	.-86     	; 0x19678 <lif_readdirindex+0x16>
   196ce:	b7 01       	movw	r22, r14
   196d0:	ce 01       	movw	r24, r28
   196d2:	06 96       	adiw	r24, 0x06	; 6
   196d4:	8b d9       	rcall	.-3306   	; 0x189ec <lif_str2dir>
   196d6:	f7 01       	movw	r30, r14
   196d8:	e6 5a       	subi	r30, 0xA6	; 166
   196da:	ff 4f       	sbci	r31, 0xFF	; 255
   196dc:	80 81       	ld	r24, Z
   196de:	91 81       	ldd	r25, Z+1	; 0x01
   196e0:	01 96       	adiw	r24, 0x01	; 1
   196e2:	19 f4       	brne	.+6      	; 0x196ea <lif_readdirindex+0x88>
   196e4:	f7 01       	movw	r30, r14
   196e6:	d3 a2       	std	Z+35, r13	; 0x23
   196e8:	c2 a2       	std	Z+34, r12	; 0x22
   196ea:	c7 01       	movw	r24, r14
   196ec:	83 dd       	rcall	.-1274   	; 0x191f4 <lif_check_dir>
   196ee:	8c 01       	movw	r16, r24
   196f0:	89 2b       	or	r24, r25
   196f2:	b9 f4       	brne	.+46     	; 0x19722 <lif_readdirindex+0xc0>
   196f4:	ed b7       	in	r30, 0x3d	; 61
   196f6:	fe b7       	in	r31, 0x3e	; 62
   196f8:	d5 82       	std	Z+5, r13	; 0x05
   196fa:	c4 82       	std	Z+4, r12	; 0x04
   196fc:	86 ec       	ldi	r24, 0xC6	; 198
   196fe:	9a e3       	ldi	r25, 0x3A	; 58
   19700:	a0 e0       	ldi	r26, 0x00	; 0
   19702:	81 83       	std	Z+1, r24	; 0x01
   19704:	92 83       	std	Z+2, r25	; 0x02
   19706:	a3 83       	std	Z+3, r26	; 0x03
   19708:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1970c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   19710:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   19714:	92 ff       	sbrs	r25, 2
   19716:	b0 cf       	rjmp	.-160    	; 0x19678 <lif_readdirindex+0x16>
   19718:	62 e5       	ldi	r22, 0x52	; 82
   1971a:	75 e1       	ldi	r23, 0x15	; 21
   1971c:	c7 01       	movw	r24, r14
   1971e:	c9 da       	rcall	.-2670   	; 0x18cb2 <lif_dump_vol>
   19720:	02 c0       	rjmp	.+4      	; 0x19726 <lif_readdirindex+0xc4>
   19722:	01 e0       	ldi	r16, 0x01	; 1
   19724:	10 e0       	ldi	r17, 0x00	; 0
   19726:	c8 01       	movw	r24, r16
   19728:	a5 96       	adiw	r28, 0x25	; 37
   1972a:	e8 e0       	ldi	r30, 0x08	; 8
   1972c:	0c 94 ac e4 	jmp	0x1c958	; 0x1c958 <__epilogue_restores__+0x14>

00019730 <lif_writedirindex>:
   19730:	a0 e2       	ldi	r26, 0x20	; 32
   19732:	b0 e0       	ldi	r27, 0x00	; 0
   19734:	ee e9       	ldi	r30, 0x9E	; 158
   19736:	fb ec       	ldi	r31, 0xCB	; 203
   19738:	0c 94 8e e4 	jmp	0x1c91c	; 0x1c91c <__prologue_saves__+0x10>
   1973c:	5c 01       	movw	r10, r24
   1973e:	6b 01       	movw	r12, r22
   19740:	59 dd       	rcall	.-1358   	; 0x191f4 <lif_check_dir>
   19742:	7c 01       	movw	r14, r24
   19744:	89 2b       	or	r24, r25
   19746:	71 f4       	brne	.+28     	; 0x19764 <lif_writedirindex+0x34>
   19748:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1974c:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   19750:	92 fd       	sbrc	r25, 2
   19752:	03 c0       	rjmp	.+6      	; 0x1975a <lif_writedirindex+0x2a>
   19754:	e1 2c       	mov	r14, r1
   19756:	f1 2c       	mov	r15, r1
   19758:	42 c0       	rjmp	.+132    	; 0x197de <lif_writedirindex+0xae>
   1975a:	63 e6       	ldi	r22, 0x63	; 99
   1975c:	75 e1       	ldi	r23, 0x15	; 21
   1975e:	c5 01       	movw	r24, r10
   19760:	a8 da       	rcall	.-2736   	; 0x18cb2 <lif_dump_vol>
   19762:	3d c0       	rjmp	.+122    	; 0x197de <lif_writedirindex+0xae>
   19764:	b6 01       	movw	r22, r12
   19766:	c5 01       	movw	r24, r10
   19768:	14 df       	rcall	.-472    	; 0x19592 <lif_checkdirindex>
   1976a:	89 2b       	or	r24, r25
   1976c:	99 f3       	breq	.-26     	; 0x19754 <lif_writedirindex+0x24>
   1976e:	f5 01       	movw	r30, r10
   19770:	e6 5a       	subi	r30, 0xA6	; 166
   19772:	ff 4f       	sbci	r31, 0xFF	; 255
   19774:	80 81       	ld	r24, Z
   19776:	91 81       	ldd	r25, Z+1	; 0x01
   19778:	01 96       	adiw	r24, 0x01	; 1
   1977a:	19 f4       	brne	.+6      	; 0x19782 <lif_writedirindex+0x52>
   1977c:	f5 01       	movw	r30, r10
   1977e:	d3 a2       	std	Z+35, r13	; 0x23
   19780:	c2 a2       	std	Z+34, r12	; 0x22
   19782:	f5 01       	movw	r30, r10
   19784:	85 a5       	ldd	r24, Z+45	; 0x2d
   19786:	96 a5       	ldd	r25, Z+46	; 0x2e
   19788:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1978a:	b0 a9       	ldd	r27, Z+48	; 0x30
   1978c:	ba 2f       	mov	r27, r26
   1978e:	a9 2f       	mov	r26, r25
   19790:	98 2f       	mov	r25, r24
   19792:	88 27       	eor	r24, r24
   19794:	0d 2c       	mov	r0, r13
   19796:	00 0c       	add	r0, r0
   19798:	ee 08       	sbc	r14, r14
   1979a:	ff 08       	sbc	r15, r15
   1979c:	35 e0       	ldi	r19, 0x05	; 5
   1979e:	cc 0c       	add	r12, r12
   197a0:	dd 1c       	adc	r13, r13
   197a2:	ee 1c       	adc	r14, r14
   197a4:	ff 1c       	adc	r15, r15
   197a6:	3a 95       	dec	r19
   197a8:	d1 f7       	brne	.-12     	; 0x1979e <lif_writedirindex+0x6e>
   197aa:	c8 0e       	add	r12, r24
   197ac:	d9 1e       	adc	r13, r25
   197ae:	ea 1e       	adc	r14, r26
   197b0:	fb 1e       	adc	r15, r27
   197b2:	be 01       	movw	r22, r28
   197b4:	6f 5f       	subi	r22, 0xFF	; 255
   197b6:	7f 4f       	sbci	r23, 0xFF	; 255
   197b8:	c5 01       	movw	r24, r10
   197ba:	a7 d8       	rcall	.-3762   	; 0x1890a <lif_dir2str>
   197bc:	00 e2       	ldi	r16, 0x20	; 32
   197be:	10 e0       	ldi	r17, 0x00	; 0
   197c0:	a7 01       	movw	r20, r14
   197c2:	96 01       	movw	r18, r12
   197c4:	be 01       	movw	r22, r28
   197c6:	6f 5f       	subi	r22, 0xFF	; 255
   197c8:	7f 4f       	sbci	r23, 0xFF	; 255
   197ca:	c5 01       	movw	r24, r10
   197cc:	0e 94 28 c2 	call	0x18450	; 0x18450 <lif_write>
   197d0:	31 e0       	ldi	r19, 0x01	; 1
   197d2:	20 e0       	ldi	r18, 0x00	; 0
   197d4:	80 97       	sbiw	r24, 0x20	; 32
   197d6:	0c f4       	brge	.+2      	; 0x197da <lif_writedirindex+0xaa>
   197d8:	30 e0       	ldi	r19, 0x00	; 0
   197da:	e3 2e       	mov	r14, r19
   197dc:	f2 2e       	mov	r15, r18
   197de:	c7 01       	movw	r24, r14
   197e0:	a0 96       	adiw	r28, 0x20	; 32
   197e2:	ea e0       	ldi	r30, 0x0A	; 10
   197e4:	0c 94 aa e4 	jmp	0x1c954	; 0x1c954 <__epilogue_restores__+0x10>

000197e8 <lif_writedirEOF>:
   197e8:	0f 93       	push	r16
   197ea:	1f 93       	push	r17
   197ec:	cf 93       	push	r28
   197ee:	df 93       	push	r29
   197f0:	ec 01       	movw	r28, r24
   197f2:	8b 01       	movw	r16, r22
   197f4:	4f da       	rcall	.-2914   	; 0x18c94 <lif_dir_clear>
   197f6:	fe 01       	movw	r30, r28
   197f8:	e6 5a       	subi	r30, 0xA6	; 166
   197fa:	ff 4f       	sbci	r31, 0xFF	; 255
   197fc:	8f ef       	ldi	r24, 0xFF	; 255
   197fe:	9f ef       	ldi	r25, 0xFF	; 255
   19800:	91 83       	std	Z+1, r25	; 0x01
   19802:	80 83       	st	Z, r24
   19804:	1b a3       	std	Y+35, r17	; 0x23
   19806:	0a a3       	std	Y+34, r16	; 0x22
   19808:	b8 01       	movw	r22, r16
   1980a:	ce 01       	movw	r24, r28
   1980c:	91 df       	rcall	.-222    	; 0x19730 <lif_writedirindex>
   1980e:	df 91       	pop	r29
   19810:	cf 91       	pop	r28
   19812:	1f 91       	pop	r17
   19814:	0f 91       	pop	r16
   19816:	08 95       	ret

00019818 <lif_updatefree>:
   19818:	2f 92       	push	r2
   1981a:	3f 92       	push	r3
   1981c:	4f 92       	push	r4
   1981e:	5f 92       	push	r5
   19820:	6f 92       	push	r6
   19822:	7f 92       	push	r7
   19824:	8f 92       	push	r8
   19826:	af 92       	push	r10
   19828:	bf 92       	push	r11
   1982a:	cf 92       	push	r12
   1982c:	df 92       	push	r13
   1982e:	ef 92       	push	r14
   19830:	ff 92       	push	r15
   19832:	0f 93       	push	r16
   19834:	1f 93       	push	r17
   19836:	cf 93       	push	r28
   19838:	df 93       	push	r29
   1983a:	cd b7       	in	r28, 0x3d	; 61
   1983c:	de b7       	in	r29, 0x3e	; 62
   1983e:	2f 97       	sbiw	r28, 0x0f	; 15
   19840:	0f b6       	in	r0, 0x3f	; 63
   19842:	f8 94       	cli
   19844:	de bf       	out	0x3e, r29	; 62
   19846:	0f be       	out	0x3f, r0	; 63
   19848:	cd bf       	out	0x3d, r28	; 61
   1984a:	9f 87       	std	Y+15, r25	; 0x0f
   1984c:	8e 87       	std	Y+14, r24	; 0x0e
   1984e:	fc 01       	movw	r30, r24
   19850:	24 84       	ldd	r2, Z+12	; 0x0c
   19852:	35 84       	ldd	r3, Z+13	; 0x0d
   19854:	46 84       	ldd	r4, Z+14	; 0x0e
   19856:	57 84       	ldd	r5, Z+15	; 0x0f
   19858:	80 89       	ldd	r24, Z+16	; 0x10
   1985a:	91 89       	ldd	r25, Z+17	; 0x11
   1985c:	a2 89       	ldd	r26, Z+18	; 0x12
   1985e:	b3 89       	ldd	r27, Z+19	; 0x13
   19860:	80 8f       	std	Z+24, r24	; 0x18
   19862:	91 8f       	std	Z+25, r25	; 0x19
   19864:	a2 8f       	std	Z+26, r26	; 0x1a
   19866:	b3 8f       	std	Z+27, r27	; 0x1b
   19868:	14 8a       	std	Z+20, r1	; 0x14
   1986a:	15 8a       	std	Z+21, r1	; 0x15
   1986c:	16 8a       	std	Z+22, r1	; 0x16
   1986e:	17 8a       	std	Z+23, r1	; 0x17
   19870:	17 8e       	std	Z+31, r1	; 0x1f
   19872:	16 8e       	std	Z+30, r1	; 0x1e
   19874:	15 8e       	std	Z+29, r1	; 0x1d
   19876:	14 8e       	std	Z+28, r1	; 0x1c
   19878:	11 a2       	std	Z+33, r1	; 0x21
   1987a:	10 a2       	std	Z+32, r1	; 0x20
   1987c:	13 a2       	std	Z+35, r1	; 0x23
   1987e:	12 a2       	std	Z+34, r1	; 0x22
   19880:	cc 24       	eor	r12, r12
   19882:	c3 94       	inc	r12
   19884:	d1 2c       	mov	r13, r1
   19886:	0f ef       	ldi	r16, 0xFF	; 255
   19888:	1f ef       	ldi	r17, 0xFF	; 255
   1988a:	e6 5a       	subi	r30, 0xA6	; 166
   1988c:	ff 4f       	sbci	r31, 0xFF	; 255
   1988e:	f9 87       	std	Y+9, r31	; 0x09
   19890:	e8 87       	std	Y+8, r30	; 0x08
   19892:	ae 84       	ldd	r10, Y+14	; 0x0e
   19894:	bf 84       	ldd	r11, Y+15	; 0x0f
   19896:	fc e5       	ldi	r31, 0x5C	; 92
   19898:	af 0e       	add	r10, r31
   1989a:	b1 1c       	adc	r11, r1
   1989c:	8e 85       	ldd	r24, Y+14	; 0x0e
   1989e:	9f 85       	ldd	r25, Y+15	; 0x0f
   198a0:	80 5a       	subi	r24, 0xA0	; 160
   198a2:	9f 4f       	sbci	r25, 0xFF	; 255
   198a4:	9b 87       	std	Y+11, r25	; 0x0b
   198a6:	8a 87       	std	Y+10, r24	; 0x0a
   198a8:	ee 85       	ldd	r30, Y+14	; 0x0e
   198aa:	ff 85       	ldd	r31, Y+15	; 0x0f
   198ac:	e1 5b       	subi	r30, 0xB1	; 177
   198ae:	ff 4f       	sbci	r31, 0xFF	; 255
   198b0:	fd 87       	std	Y+13, r31	; 0x0d
   198b2:	ec 87       	std	Y+12, r30	; 0x0c
   198b4:	89 e7       	ldi	r24, 0x79	; 121
   198b6:	9a e3       	ldi	r25, 0x3A	; 58
   198b8:	3c 01       	movw	r6, r24
   198ba:	81 2c       	mov	r8, r1
   198bc:	76 01       	movw	r14, r12
   198be:	21 e0       	ldi	r18, 0x01	; 1
   198c0:	e2 1a       	sub	r14, r18
   198c2:	f1 08       	sbc	r15, r1
   198c4:	b7 01       	movw	r22, r14
   198c6:	8e 85       	ldd	r24, Y+14	; 0x0e
   198c8:	9f 85       	ldd	r25, Y+15	; 0x0f
   198ca:	cb de       	rcall	.-618    	; 0x19662 <lif_readdirindex>
   198cc:	89 2b       	or	r24, r25
   198ce:	19 f4       	brne	.+6      	; 0x198d6 <lif_updatefree+0xbe>
   198d0:	80 e0       	ldi	r24, 0x00	; 0
   198d2:	90 e0       	ldi	r25, 0x00	; 0
   198d4:	91 c0       	rjmp	.+290    	; 0x199f8 <lif_updatefree+0x1e0>
   198d6:	e8 85       	ldd	r30, Y+8	; 0x08
   198d8:	f9 85       	ldd	r31, Y+9	; 0x09
   198da:	80 81       	ld	r24, Z
   198dc:	91 81       	ldd	r25, Z+1	; 0x01
   198de:	8f 3f       	cpi	r24, 0xFF	; 255
   198e0:	ff ef       	ldi	r31, 0xFF	; 255
   198e2:	9f 07       	cpc	r25, r31
   198e4:	c1 f4       	brne	.+48     	; 0x19916 <lif_updatefree+0xfe>
   198e6:	ee 85       	ldd	r30, Y+14	; 0x0e
   198e8:	ff 85       	ldd	r31, Y+15	; 0x0f
   198ea:	0f 3f       	cpi	r16, 0xFF	; 255
   198ec:	2f ef       	ldi	r18, 0xFF	; 255
   198ee:	12 07       	cpc	r17, r18
   198f0:	09 f4       	brne	.+2      	; 0x198f4 <lif_updatefree+0xdc>
   198f2:	78 c0       	rjmp	.+240    	; 0x199e4 <lif_updatefree+0x1cc>
   198f4:	13 a3       	std	Z+35, r17	; 0x23
   198f6:	02 a3       	std	Z+34, r16	; 0x22
   198f8:	e0 1a       	sub	r14, r16
   198fa:	f1 0a       	sbc	r15, r17
   198fc:	86 8d       	ldd	r24, Z+30	; 0x1e
   198fe:	97 8d       	ldd	r25, Z+31	; 0x1f
   19900:	8e 19       	sub	r24, r14
   19902:	9f 09       	sbc	r25, r15
   19904:	97 8f       	std	Z+31, r25	; 0x1f
   19906:	86 8f       	std	Z+30, r24	; 0x1e
   19908:	b8 01       	movw	r22, r16
   1990a:	cf 01       	movw	r24, r30
   1990c:	6d df       	rcall	.-294    	; 0x197e8 <lif_writedirEOF>
   1990e:	89 2b       	or	r24, r25
   19910:	09 f0       	breq	.+2      	; 0x19914 <lif_updatefree+0xfc>
   19912:	6a c0       	rjmp	.+212    	; 0x199e8 <lif_updatefree+0x1d0>
   19914:	dd cf       	rjmp	.-70     	; 0x198d0 <lif_updatefree+0xb8>
   19916:	89 2b       	or	r24, r25
   19918:	81 f4       	brne	.+32     	; 0x1993a <lif_updatefree+0x122>
   1991a:	0f 3f       	cpi	r16, 0xFF	; 255
   1991c:	ff ef       	ldi	r31, 0xFF	; 255
   1991e:	1f 07       	cpc	r17, r31
   19920:	09 f4       	brne	.+2      	; 0x19924 <lif_updatefree+0x10c>
   19922:	87 01       	movw	r16, r14
   19924:	ee 85       	ldd	r30, Y+14	; 0x0e
   19926:	ff 85       	ldd	r31, Y+15	; 0x0f
   19928:	86 8d       	ldd	r24, Z+30	; 0x1e
   1992a:	97 8d       	ldd	r25, Z+31	; 0x1f
   1992c:	01 96       	adiw	r24, 0x01	; 1
   1992e:	97 8f       	std	Z+31, r25	; 0x1f
   19930:	86 8f       	std	Z+30, r24	; 0x1e
   19932:	ff ef       	ldi	r31, 0xFF	; 255
   19934:	cf 1a       	sub	r12, r31
   19936:	df 0a       	sbc	r13, r31
   19938:	c1 cf       	rjmp	.-126    	; 0x198bc <lif_updatefree+0xa4>
   1993a:	f5 01       	movw	r30, r10
   1993c:	80 81       	ld	r24, Z
   1993e:	91 81       	ldd	r25, Z+1	; 0x01
   19940:	a2 81       	ldd	r26, Z+2	; 0x02
   19942:	b3 81       	ldd	r27, Z+3	; 0x03
   19944:	82 15       	cp	r24, r2
   19946:	93 05       	cpc	r25, r3
   19948:	a4 05       	cpc	r26, r4
   1994a:	b5 05       	cpc	r27, r5
   1994c:	b8 f4       	brcc	.+46     	; 0x1997c <lif_updatefree+0x164>
   1994e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   19952:	80 ff       	sbrs	r24, 0
   19954:	13 c0       	rjmp	.+38     	; 0x1997c <lif_updatefree+0x164>
   19956:	8c 85       	ldd	r24, Y+12	; 0x0c
   19958:	9d 85       	ldd	r25, Y+13	; 0x0d
   1995a:	ed b7       	in	r30, 0x3d	; 61
   1995c:	fe b7       	in	r31, 0x3e	; 62
   1995e:	97 83       	std	Z+7, r25	; 0x07
   19960:	86 83       	std	Z+6, r24	; 0x06
   19962:	ee 85       	ldd	r30, Y+14	; 0x0e
   19964:	ff 85       	ldd	r31, Y+15	; 0x0f
   19966:	80 81       	ld	r24, Z
   19968:	91 81       	ldd	r25, Z+1	; 0x01
   1996a:	ed b7       	in	r30, 0x3d	; 61
   1996c:	fe b7       	in	r31, 0x3e	; 62
   1996e:	95 83       	std	Z+5, r25	; 0x05
   19970:	84 83       	std	Z+4, r24	; 0x04
   19972:	61 82       	std	Z+1, r6	; 0x01
   19974:	72 82       	std	Z+2, r7	; 0x02
   19976:	83 82       	std	Z+3, r8	; 0x03
   19978:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1997c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1997e:	fb 85       	ldd	r31, Y+11	; 0x0b
   19980:	80 81       	ld	r24, Z
   19982:	91 81       	ldd	r25, Z+1	; 0x01
   19984:	a2 81       	ldd	r26, Z+2	; 0x02
   19986:	b3 81       	ldd	r27, Z+3	; 0x03
   19988:	ee 85       	ldd	r30, Y+14	; 0x0e
   1998a:	ff 85       	ldd	r31, Y+15	; 0x0f
   1998c:	44 89       	ldd	r20, Z+20	; 0x14
   1998e:	55 89       	ldd	r21, Z+21	; 0x15
   19990:	66 89       	ldd	r22, Z+22	; 0x16
   19992:	77 89       	ldd	r23, Z+23	; 0x17
   19994:	48 0f       	add	r20, r24
   19996:	59 1f       	adc	r21, r25
   19998:	6a 1f       	adc	r22, r26
   1999a:	7b 1f       	adc	r23, r27
   1999c:	44 8b       	std	Z+20, r20	; 0x14
   1999e:	55 8b       	std	Z+21, r21	; 0x15
   199a0:	66 8b       	std	Z+22, r22	; 0x16
   199a2:	77 8b       	std	Z+23, r23	; 0x17
   199a4:	40 8d       	ldd	r20, Z+24	; 0x18
   199a6:	51 8d       	ldd	r21, Z+25	; 0x19
   199a8:	62 8d       	ldd	r22, Z+26	; 0x1a
   199aa:	73 8d       	ldd	r23, Z+27	; 0x1b
   199ac:	48 1b       	sub	r20, r24
   199ae:	59 0b       	sbc	r21, r25
   199b0:	6a 0b       	sbc	r22, r26
   199b2:	7b 0b       	sbc	r23, r27
   199b4:	40 8f       	std	Z+24, r20	; 0x18
   199b6:	51 8f       	std	Z+25, r21	; 0x19
   199b8:	62 8f       	std	Z+26, r22	; 0x1a
   199ba:	73 8f       	std	Z+27, r23	; 0x1b
   199bc:	24 8d       	ldd	r18, Z+28	; 0x1c
   199be:	35 8d       	ldd	r19, Z+29	; 0x1d
   199c0:	2f 5f       	subi	r18, 0xFF	; 255
   199c2:	3f 4f       	sbci	r19, 0xFF	; 255
   199c4:	35 8f       	std	Z+29, r19	; 0x1d
   199c6:	24 8f       	std	Z+28, r18	; 0x1c
   199c8:	f5 01       	movw	r30, r10
   199ca:	40 81       	ld	r20, Z
   199cc:	51 81       	ldd	r21, Z+1	; 0x01
   199ce:	62 81       	ldd	r22, Z+2	; 0x02
   199d0:	73 81       	ldd	r23, Z+3	; 0x03
   199d2:	1c 01       	movw	r2, r24
   199d4:	2d 01       	movw	r4, r26
   199d6:	24 0e       	add	r2, r20
   199d8:	35 1e       	adc	r3, r21
   199da:	46 1e       	adc	r4, r22
   199dc:	57 1e       	adc	r5, r23
   199de:	0f ef       	ldi	r16, 0xFF	; 255
   199e0:	1f ef       	ldi	r17, 0xFF	; 255
   199e2:	a7 cf       	rjmp	.-178    	; 0x19932 <lif_updatefree+0x11a>
   199e4:	f3 a2       	std	Z+35, r15	; 0x23
   199e6:	e2 a2       	std	Z+34, r14	; 0x22
   199e8:	8f ef       	ldi	r24, 0xFF	; 255
   199ea:	9f ef       	ldi	r25, 0xFF	; 255
   199ec:	ee 85       	ldd	r30, Y+14	; 0x0e
   199ee:	ff 85       	ldd	r31, Y+15	; 0x0f
   199f0:	91 a3       	std	Z+33, r25	; 0x21
   199f2:	80 a3       	std	Z+32, r24	; 0x20
   199f4:	8e 85       	ldd	r24, Y+14	; 0x0e
   199f6:	9f 85       	ldd	r25, Y+15	; 0x0f
   199f8:	2f 96       	adiw	r28, 0x0f	; 15
   199fa:	0f b6       	in	r0, 0x3f	; 63
   199fc:	f8 94       	cli
   199fe:	de bf       	out	0x3e, r29	; 62
   19a00:	0f be       	out	0x3f, r0	; 63
   19a02:	cd bf       	out	0x3d, r28	; 61
   19a04:	df 91       	pop	r29
   19a06:	cf 91       	pop	r28
   19a08:	1f 91       	pop	r17
   19a0a:	0f 91       	pop	r16
   19a0c:	ff 90       	pop	r15
   19a0e:	ef 90       	pop	r14
   19a10:	df 90       	pop	r13
   19a12:	cf 90       	pop	r12
   19a14:	bf 90       	pop	r11
   19a16:	af 90       	pop	r10
   19a18:	8f 90       	pop	r8
   19a1a:	7f 90       	pop	r7
   19a1c:	6f 90       	pop	r6
   19a1e:	5f 90       	pop	r5
   19a20:	4f 90       	pop	r4
   19a22:	3f 90       	pop	r3
   19a24:	2f 90       	pop	r2
   19a26:	08 95       	ret

00019a28 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   19a28:	a9 e2       	ldi	r26, 0x29	; 41
   19a2a:	b1 e0       	ldi	r27, 0x01	; 1
   19a2c:	ea e1       	ldi	r30, 0x1A	; 26
   19a2e:	fd ec       	ldi	r31, 0xCD	; 205
   19a30:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
   19a34:	4c 01       	movw	r8, r24
   19a36:	3b 01       	movw	r6, r22
   19a38:	19 01       	movw	r2, r18
   19a3a:	2a 01       	movw	r4, r20
   19a3c:	ca 5d       	subi	r28, 0xDA	; 218
   19a3e:	de 4f       	sbci	r29, 0xFE	; 254
   19a40:	e8 82       	st	Y, r14
   19a42:	f9 82       	std	Y+1, r15	; 0x01
   19a44:	0a 83       	std	Y+2, r16	; 0x02
   19a46:	1b 83       	std	Y+3, r17	; 0x03
   19a48:	c6 52       	subi	r28, 0x26	; 38
   19a4a:	d1 40       	sbci	r29, 0x01	; 1
   19a4c:	c2 5e       	subi	r28, 0xE2	; 226
   19a4e:	de 4f       	sbci	r29, 0xFE	; 254
   19a50:	a8 82       	st	Y, r10
   19a52:	b9 82       	std	Y+1, r11	; 0x01
   19a54:	ca 82       	std	Y+2, r12	; 0x02
   19a56:	db 82       	std	Y+3, r13	; 0x03
   19a58:	ce 51       	subi	r28, 0x1E	; 30
   19a5a:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   19a5c:	80 e0       	ldi	r24, 0x00	; 0
   19a5e:	90 e0       	ldi	r25, 0x00	; 0
   19a60:	0e 94 1d 39 	call	0x723a	; 0x723a <time>
   19a64:	5b 01       	movw	r10, r22
   19a66:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   19a68:	64 e7       	ldi	r22, 0x74	; 116
   19a6a:	70 e0       	ldi	r23, 0x00	; 0
   19a6c:	80 e0       	ldi	r24, 0x00	; 0
   19a6e:	90 e0       	ldi	r25, 0x00	; 0
   19a70:	0e 94 e9 c0 	call	0x181d2	; 0x181d2 <lif_calloc>
   19a74:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   19a76:	89 2b       	or	r24, r25
   19a78:	09 f4       	brne	.+2      	; 0x19a7c <lif_create_volume+0x54>
   19a7a:	b6 c2       	rjmp	.+1388   	; 0x19fe8 <lif_create_volume+0x5c0>
        return(NULL);

	printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   19a7c:	c2 5e       	subi	r28, 0xE2	; 226
   19a7e:	de 4f       	sbci	r29, 0xFE	; 254
   19a80:	28 81       	ld	r18, Y
   19a82:	39 81       	ldd	r19, Y+1	; 0x01
   19a84:	4a 81       	ldd	r20, Y+2	; 0x02
   19a86:	5b 81       	ldd	r21, Y+3	; 0x03
   19a88:	ce 51       	subi	r28, 0x1E	; 30
   19a8a:	d1 40       	sbci	r29, 0x01	; 1
   19a8c:	ed b7       	in	r30, 0x3d	; 61
   19a8e:	fe b7       	in	r31, 0x3e	; 62
   19a90:	20 8b       	std	Z+16, r18	; 0x10
   19a92:	31 8b       	std	Z+17, r19	; 0x11
   19a94:	42 8b       	std	Z+18, r20	; 0x12
   19a96:	53 8b       	std	Z+19, r21	; 0x13
   19a98:	ca 5d       	subi	r28, 0xDA	; 218
   19a9a:	de 4f       	sbci	r29, 0xFE	; 254
   19a9c:	28 81       	ld	r18, Y
   19a9e:	39 81       	ldd	r19, Y+1	; 0x01
   19aa0:	4a 81       	ldd	r20, Y+2	; 0x02
   19aa2:	5b 81       	ldd	r21, Y+3	; 0x03
   19aa4:	c6 52       	subi	r28, 0x26	; 38
   19aa6:	d1 40       	sbci	r29, 0x01	; 1
   19aa8:	24 87       	std	Z+12, r18	; 0x0c
   19aaa:	35 87       	std	Z+13, r19	; 0x0d
   19aac:	46 87       	std	Z+14, r20	; 0x0e
   19aae:	57 87       	std	Z+15, r21	; 0x0f
   19ab0:	20 86       	std	Z+8, r2	; 0x08
   19ab2:	31 86       	std	Z+9, r3	; 0x09
   19ab4:	42 86       	std	Z+10, r4	; 0x0a
   19ab6:	53 86       	std	Z+11, r5	; 0x0b
   19ab8:	77 82       	std	Z+7, r7	; 0x07
   19aba:	66 82       	std	Z+6, r6	; 0x06
   19abc:	95 82       	std	Z+5, r9	; 0x05
   19abe:	84 82       	std	Z+4, r8	; 0x04
   19ac0:	84 e5       	ldi	r24, 0x54	; 84
   19ac2:	9b e3       	ldi	r25, 0x3B	; 59
   19ac4:	a0 e0       	ldi	r26, 0x00	; 0
   19ac6:	81 83       	std	Z+1, r24	; 0x01
   19ac8:	92 83       	std	Z+2, r25	; 0x02
   19aca:	a3 83       	std	Z+3, r26	; 0x03
   19acc:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
		imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & 0x400)
   19ad0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   19ad4:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   19ad8:	92 ff       	sbrs	r25, 2
   19ada:	04 c0       	rjmp	.+8      	; 0x19ae4 <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   19adc:	65 e7       	ldi	r22, 0x75	; 117
   19ade:	75 e1       	ldi	r23, 0x15	; 21
   19ae0:	c7 01       	movw	r24, r14
    
    lif_image_clear(LIF);
   19ae2:	e7 d8       	rcall	.-3634   	; 0x18cb2 <lif_dump_vol>
   19ae4:	c7 01       	movw	r24, r14

    // Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   19ae6:	d0 d8       	rcall	.-3680   	; 0x18c88 <lif_image_clear>
   19ae8:	80 e0       	ldi	r24, 0x00	; 0
   19aea:	90 e8       	ldi	r25, 0x80	; 128
   19aec:	f7 01       	movw	r30, r14
   19aee:	95 a3       	std	Z+37, r25	; 0x25
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   19af0:	84 a3       	std	Z+36, r24	; 0x24
   19af2:	46 e0       	ldi	r20, 0x06	; 6
   19af4:	50 e0       	ldi	r21, 0x00	; 0
   19af6:	b3 01       	movw	r22, r6
   19af8:	c7 01       	movw	r24, r14
   19afa:	86 96       	adiw	r24, 0x26	; 38
   19afc:	0e 94 28 c3 	call	0x18650	; 0x18650 <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   19b00:	f7 01       	movw	r30, r14
   19b02:	25 a6       	std	Z+45, r2	; 0x2d
   19b04:	36 a6       	std	Z+46, r3	; 0x2e
   19b06:	47 a6       	std	Z+47, r4	; 0x2f
    LIF->VOL.DirSectors = dirsectors;
   19b08:	50 aa       	std	Z+48, r5	; 0x30
   19b0a:	ca 5d       	subi	r28, 0xDA	; 218
   19b0c:	de 4f       	sbci	r29, 0xFE	; 254
   19b0e:	28 81       	ld	r18, Y
   19b10:	39 81       	ldd	r19, Y+1	; 0x01
   19b12:	4a 81       	ldd	r20, Y+2	; 0x02
   19b14:	5b 81       	ldd	r21, Y+3	; 0x03
   19b16:	c6 52       	subi	r28, 0x26	; 38
   19b18:	d1 40       	sbci	r29, 0x01	; 1
   19b1a:	25 ab       	std	Z+53, r18	; 0x35
   19b1c:	36 ab       	std	Z+54, r19	; 0x36
   19b1e:	47 ab       	std	Z+55, r20	; 0x37
    LIF->VOL.System3000LIFid = 0x1000;
   19b20:	50 af       	std	Z+56, r21	; 0x38
   19b22:	80 e0       	ldi	r24, 0x00	; 0
   19b24:	90 e1       	ldi	r25, 0x10	; 16
   19b26:	92 ab       	std	Z+50, r25	; 0x32
    LIF->VOL.tracks_per_side = 0;
   19b28:	81 ab       	std	Z+49, r24	; 0x31
   19b2a:	fd 96       	adiw	r30, 0x3d	; 61
   19b2c:	10 82       	st	Z, r1
   19b2e:	11 82       	std	Z+1, r1	; 0x01
   19b30:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sides = 0;
   19b32:	13 82       	std	Z+3, r1	; 0x03
   19b34:	34 96       	adiw	r30, 0x04	; 4
   19b36:	10 82       	st	Z, r1
   19b38:	11 82       	std	Z+1, r1	; 0x01
   19b3a:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sectors_per_track = 0;
   19b3c:	13 82       	std	Z+3, r1	; 0x03
   19b3e:	34 96       	adiw	r30, 0x04	; 4
   19b40:	10 82       	st	Z, r1
   19b42:	11 82       	std	Z+1, r1	; 0x01
   19b44:	12 82       	std	Z+2, r1	; 0x02
    ///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   19b46:	13 82       	std	Z+3, r1	; 0x03
   19b48:	a7 01       	movw	r20, r14
   19b4a:	47 5b       	subi	r20, 0xB7	; 183
   19b4c:	5f 4f       	sbci	r21, 0xFF	; 255
   19b4e:	c6 01       	movw	r24, r12
   19b50:	b5 01       	movw	r22, r10
   19b52:	0e 94 6d c5 	call	0x18ada	; 0x18ada <lif_time2lifbcd>

    // update LIF headers
    LIF->name = lif_stralloc(imagename);
   19b56:	c4 01       	movw	r24, r8
   19b58:	0e 94 34 c1 	call	0x18268	; 0x18268 <lif_stralloc>
   19b5c:	d7 01       	movw	r26, r14
   19b5e:	8d 93       	st	X+, r24
    if(LIF->name == NULL)
   19b60:	9c 93       	st	X, r25
   19b62:	89 2b       	or	r24, r25
   19b64:	09 f4       	brne	.+2      	; 0x19b68 <lif_create_volume+0x140>
        lif_close_volume(LIF);
        return(NULL);
    }

    // Initilize all LIF headers
    LIF->filesectors = filesectors;
   19b66:	35 c2       	rjmp	.+1130   	; 0x19fd2 <lif_create_volume+0x5aa>
   19b68:	c2 5e       	subi	r28, 0xE2	; 226
   19b6a:	de 4f       	sbci	r29, 0xFE	; 254
   19b6c:	28 81       	ld	r18, Y
   19b6e:	39 81       	ldd	r19, Y+1	; 0x01
   19b70:	4a 81       	ldd	r20, Y+2	; 0x02
   19b72:	5b 81       	ldd	r21, Y+3	; 0x03
   19b74:	ce 51       	subi	r28, 0x1E	; 30
   19b76:	d1 40       	sbci	r29, 0x01	; 1
   19b78:	f7 01       	movw	r30, r14
   19b7a:	20 8b       	std	Z+16, r18	; 0x10
   19b7c:	31 8b       	std	Z+17, r19	; 0x11
   19b7e:	42 8b       	std	Z+18, r20	; 0x12
    LIF->filestart = dirstart + dirsectors;
   19b80:	53 8b       	std	Z+19, r21	; 0x13
   19b82:	ca 5d       	subi	r28, 0xDA	; 218
   19b84:	de 4f       	sbci	r29, 0xFE	; 254
   19b86:	88 81       	ld	r24, Y
   19b88:	99 81       	ldd	r25, Y+1	; 0x01
   19b8a:	aa 81       	ldd	r26, Y+2	; 0x02
   19b8c:	bb 81       	ldd	r27, Y+3	; 0x03
   19b8e:	c6 52       	subi	r28, 0x26	; 38
   19b90:	d1 40       	sbci	r29, 0x01	; 1
   19b92:	82 0d       	add	r24, r2
   19b94:	93 1d       	adc	r25, r3
   19b96:	a4 1d       	adc	r26, r4
   19b98:	b5 1d       	adc	r27, r5
   19b9a:	84 87       	std	Z+12, r24	; 0x0c
   19b9c:	95 87       	std	Z+13, r25	; 0x0d
   19b9e:	a6 87       	std	Z+14, r26	; 0x0e
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   19ba0:	b7 87       	std	Z+15, r27	; 0x0f
   19ba2:	82 0f       	add	r24, r18
   19ba4:	93 1f       	adc	r25, r19
   19ba6:	a4 1f       	adc	r26, r20
   19ba8:	b5 1f       	adc	r27, r21
   19baa:	84 83       	std	Z+4, r24	; 0x04
   19bac:	95 83       	std	Z+5, r25	; 0x05
   19bae:	a6 83       	std	Z+6, r26	; 0x06
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   19bb0:	b7 83       	std	Z+7, r27	; 0x07
   19bb2:	ba 2f       	mov	r27, r26
   19bb4:	a9 2f       	mov	r26, r25
   19bb6:	98 2f       	mov	r25, r24
   19bb8:	88 27       	eor	r24, r24
   19bba:	80 87       	std	Z+8, r24	; 0x08
   19bbc:	91 87       	std	Z+9, r25	; 0x09
   19bbe:	a2 87       	std	Z+10, r26	; 0x0a
    LIF->freesectors = LIF->filesectors;
   19bc0:	b3 87       	std	Z+11, r27	; 0x0b
   19bc2:	20 8f       	std	Z+24, r18	; 0x18
   19bc4:	31 8f       	std	Z+25, r19	; 0x19
   19bc6:	42 8f       	std	Z+26, r20	; 0x1a
    LIF->usedsectors = 0;
   19bc8:	53 8f       	std	Z+27, r21	; 0x1b
   19bca:	14 8a       	std	Z+20, r1	; 0x14
   19bcc:	15 8a       	std	Z+21, r1	; 0x15
   19bce:	16 8a       	std	Z+22, r1	; 0x16
    LIF->files = 0;
   19bd0:	17 8a       	std	Z+23, r1	; 0x17
   19bd2:	15 8e       	std	Z+29, r1	; 0x1d
    LIF->purged = 0;
   19bd4:	14 8e       	std	Z+28, r1	; 0x1c
   19bd6:	17 8e       	std	Z+31, r1	; 0x1f
    LIF->dirindex = 0;
   19bd8:	16 8e       	std	Z+30, r1	; 0x1e
   19bda:	11 a2       	std	Z+33, r1	; 0x21
    LIF->EOFindex = 0;
   19bdc:	10 a2       	std	Z+32, r1	; 0x20
   19bde:	13 a2       	std	Z+35, r1	; 0x23

    memset(buffer,0,LIF_SECTOR_SIZE);
   19be0:	12 a2       	std	Z+34, r1	; 0x22
   19be2:	61 2c       	mov	r6, r1
   19be4:	77 24       	eor	r7, r7
   19be6:	73 94       	inc	r7
   19be8:	9e 01       	movw	r18, r28
   19bea:	2c 5e       	subi	r18, 0xEC	; 236
   19bec:	3f 4f       	sbci	r19, 0xFF	; 255
   19bee:	49 01       	movw	r8, r18
   19bf0:	d9 01       	movw	r26, r18
   19bf2:	f3 01       	movw	r30, r6
   19bf4:	1d 92       	st	X+, r1
   19bf6:	31 97       	sbiw	r30, 0x01	; 1

    lif_vol2str(LIF,buffer);
   19bf8:	e9 f7       	brne	.-6      	; 0x19bf4 <lif_create_volume+0x1cc>
   19bfa:	b9 01       	movw	r22, r18
   19bfc:	c7 01       	movw	r24, r14
   19bfe:	0e 94 65 c3 	call	0x186ca	; 0x186ca <lif_vol2str>

    // Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   19c02:	66 e3       	ldi	r22, 0x36	; 54
   19c04:	78 e0       	ldi	r23, 0x08	; 8
   19c06:	d7 01       	movw	r26, r14
   19c08:	8d 91       	ld	r24, X+
   19c0a:	9c 91       	ld	r25, X
   19c0c:	0e 94 53 c1 	call	0x182a6	; 0x182a6 <lif_open>
   19c10:	f7 01       	movw	r30, r14
   19c12:	93 83       	std	Z+3, r25	; 0x03
    if(LIF->fp == NULL)
   19c14:	82 83       	std	Z+2, r24	; 0x02
   19c16:	89 2b       	or	r24, r25
   19c18:	09 f4       	brne	.+2      	; 0x19c1c <lif_create_volume+0x1f4>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19c1a:	db c1       	rjmp	.+950    	; 0x19fd2 <lif_create_volume+0x5aa>
   19c1c:	00 e0       	ldi	r16, 0x00	; 0
   19c1e:	11 e0       	ldi	r17, 0x01	; 1
   19c20:	20 e0       	ldi	r18, 0x00	; 0
   19c22:	30 e0       	ldi	r19, 0x00	; 0
   19c24:	a9 01       	movw	r20, r18
   19c26:	b4 01       	movw	r22, r8
   19c28:	c7 01       	movw	r24, r14
   19c2a:	0e 94 28 c2 	call	0x18450	; 0x18450 <lif_write>
   19c2e:	9c 01       	movw	r18, r24
   19c30:	99 0f       	add	r25, r25
   19c32:	44 0b       	sbc	r20, r20
   19c34:	55 0b       	sbc	r21, r21
   19c36:	ca 5e       	subi	r28, 0xEA	; 234
   19c38:	de 4f       	sbci	r29, 0xFE	; 254
   19c3a:	28 83       	st	Y, r18
   19c3c:	39 83       	std	Y+1, r19	; 0x01
   19c3e:	4a 83       	std	Y+2, r20	; 0x02
   19c40:	5b 83       	std	Y+3, r21	; 0x03
   19c42:	c6 51       	subi	r28, 0x16	; 22

    if(size < LIF_SECTOR_SIZE)
   19c44:	d1 40       	sbci	r29, 0x01	; 1
   19c46:	2f 3f       	cpi	r18, 0xFF	; 255
   19c48:	31 05       	cpc	r19, r1
   19c4a:	41 05       	cpc	r20, r1
   19c4c:	51 05       	cpc	r21, r1
   19c4e:	09 f0       	breq	.+2      	; 0x19c52 <lif_create_volume+0x22a>
   19c50:	0c f4       	brge	.+2      	; 0x19c54 <lif_create_volume+0x22c>
    }
    offset += size;
    ++count;


    memset(buffer,0,LIF_SECTOR_SIZE);
   19c52:	bf c1       	rjmp	.+894    	; 0x19fd2 <lif_create_volume+0x5aa>
   19c54:	d4 01       	movw	r26, r8
   19c56:	f3 01       	movw	r30, r6
   19c58:	1d 92       	st	X+, r1
   19c5a:	31 97       	sbiw	r30, 0x01	; 1

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19c5c:	e9 f7       	brne	.-6      	; 0x19c58 <lif_create_volume+0x230>
   19c5e:	21 e0       	ldi	r18, 0x01	; 1
   19c60:	30 e0       	ldi	r19, 0x00	; 0
   19c62:	40 e0       	ldi	r20, 0x00	; 0
   19c64:	50 e0       	ldi	r21, 0x00	; 0
   19c66:	c6 5e       	subi	r28, 0xE6	; 230
   19c68:	de 4f       	sbci	r29, 0xFE	; 254
   19c6a:	28 83       	st	Y, r18
   19c6c:	39 83       	std	Y+1, r19	; 0x01
   19c6e:	4a 83       	std	Y+2, r20	; 0x02
   19c70:	5b 83       	std	Y+3, r21	; 0x03
   19c72:	ca 51       	subi	r28, 0x1A	; 26
   19c74:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
            printf("\tWrote: %ld\r", count);
   19c76:	64 01       	movw	r12, r8
   19c78:	87 e4       	ldi	r24, 0x47	; 71
   19c7a:	9b e3       	ldi	r25, 0x3B	; 59
   19c7c:	3c 01       	movw	r6, r24


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19c7e:	81 2c       	mov	r8, r1
   19c80:	c6 5e       	subi	r28, 0xE6	; 230
   19c82:	de 4f       	sbci	r29, 0xFE	; 254
   19c84:	88 81       	ld	r24, Y
   19c86:	99 81       	ldd	r25, Y+1	; 0x01
   19c88:	aa 81       	ldd	r26, Y+2	; 0x02
   19c8a:	bb 81       	ldd	r27, Y+3	; 0x03
   19c8c:	ca 51       	subi	r28, 0x1A	; 26
   19c8e:	d1 40       	sbci	r29, 0x01	; 1
   19c90:	82 15       	cp	r24, r2
   19c92:	93 05       	cpc	r25, r3
   19c94:	a4 05       	cpc	r26, r4
   19c96:	b5 05       	cpc	r27, r5
   19c98:	0c f0       	brlt	.+2      	; 0x19c9c <lif_create_volume+0x274>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19c9a:	55 c0       	rjmp	.+170    	; 0x19d46 <lif_create_volume+0x31e>
   19c9c:	00 e0       	ldi	r16, 0x00	; 0
   19c9e:	11 e0       	ldi	r17, 0x01	; 1
   19ca0:	ca 5e       	subi	r28, 0xEA	; 234
   19ca2:	de 4f       	sbci	r29, 0xFE	; 254
   19ca4:	28 81       	ld	r18, Y
   19ca6:	39 81       	ldd	r19, Y+1	; 0x01
   19ca8:	4a 81       	ldd	r20, Y+2	; 0x02
   19caa:	5b 81       	ldd	r21, Y+3	; 0x03
   19cac:	c6 51       	subi	r28, 0x16	; 22
   19cae:	d1 40       	sbci	r29, 0x01	; 1
   19cb0:	b6 01       	movw	r22, r12
   19cb2:	c7 01       	movw	r24, r14
   19cb4:	0e 94 28 c2 	call	0x18450	; 0x18450 <lif_write>
   19cb8:	09 2e       	mov	r0, r25
   19cba:	00 0c       	add	r0, r0
   19cbc:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   19cbe:	bb 0b       	sbc	r27, r27
   19cc0:	8f 3f       	cpi	r24, 0xFF	; 255
   19cc2:	91 05       	cpc	r25, r1
   19cc4:	a1 05       	cpc	r26, r1
   19cc6:	b1 05       	cpc	r27, r1
   19cc8:	09 f0       	breq	.+2      	; 0x19ccc <lif_create_volume+0x2a4>
   19cca:	0c f4       	brge	.+2      	; 0x19cce <lif_create_volume+0x2a6>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19ccc:	82 c1       	rjmp	.+772    	; 0x19fd2 <lif_create_volume+0x5aa>
   19cce:	ca 5e       	subi	r28, 0xEA	; 234
   19cd0:	de 4f       	sbci	r29, 0xFE	; 254
   19cd2:	28 81       	ld	r18, Y
   19cd4:	39 81       	ldd	r19, Y+1	; 0x01
   19cd6:	4a 81       	ldd	r20, Y+2	; 0x02
   19cd8:	5b 81       	ldd	r21, Y+3	; 0x03
   19cda:	c6 51       	subi	r28, 0x16	; 22
   19cdc:	d1 40       	sbci	r29, 0x01	; 1
   19cde:	28 0f       	add	r18, r24
   19ce0:	39 1f       	adc	r19, r25
   19ce2:	4a 1f       	adc	r20, r26
   19ce4:	5b 1f       	adc	r21, r27
   19ce6:	ca 5e       	subi	r28, 0xEA	; 234
   19ce8:	de 4f       	sbci	r29, 0xFE	; 254
   19cea:	28 83       	st	Y, r18
   19cec:	39 83       	std	Y+1, r19	; 0x01
   19cee:	4a 83       	std	Y+2, r20	; 0x02
   19cf0:	5b 83       	std	Y+3, r21	; 0x03
   19cf2:	c6 51       	subi	r28, 0x16	; 22
            printf("\tWrote: %ld\r", count);
   19cf4:	d1 40       	sbci	r29, 0x01	; 1
   19cf6:	c6 5e       	subi	r28, 0xE6	; 230
   19cf8:	de 4f       	sbci	r29, 0xFE	; 254
   19cfa:	88 81       	ld	r24, Y
   19cfc:	99 81       	ldd	r25, Y+1	; 0x01
   19cfe:	aa 81       	ldd	r26, Y+2	; 0x02
   19d00:	bb 81       	ldd	r27, Y+3	; 0x03
   19d02:	ca 51       	subi	r28, 0x1A	; 26
   19d04:	d1 40       	sbci	r29, 0x01	; 1
   19d06:	ed b7       	in	r30, 0x3d	; 61
   19d08:	fe b7       	in	r31, 0x3e	; 62
   19d0a:	84 83       	std	Z+4, r24	; 0x04
   19d0c:	95 83       	std	Z+5, r25	; 0x05
   19d0e:	a6 83       	std	Z+6, r26	; 0x06
   19d10:	b7 83       	std	Z+7, r27	; 0x07
   19d12:	61 82       	std	Z+1, r6	; 0x01
   19d14:	72 82       	std	Z+2, r7	; 0x02
   19d16:	83 82       	std	Z+3, r8	; 0x03
   19d18:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19d1c:	c6 5e       	subi	r28, 0xE6	; 230
   19d1e:	de 4f       	sbci	r29, 0xFE	; 254
   19d20:	28 81       	ld	r18, Y
   19d22:	39 81       	ldd	r19, Y+1	; 0x01
   19d24:	4a 81       	ldd	r20, Y+2	; 0x02
   19d26:	5b 81       	ldd	r21, Y+3	; 0x03
   19d28:	ca 51       	subi	r28, 0x1A	; 26
   19d2a:	d1 40       	sbci	r29, 0x01	; 1
   19d2c:	2f 5f       	subi	r18, 0xFF	; 255
   19d2e:	3f 4f       	sbci	r19, 0xFF	; 255
   19d30:	4f 4f       	sbci	r20, 0xFF	; 255
   19d32:	5f 4f       	sbci	r21, 0xFF	; 255
   19d34:	c6 5e       	subi	r28, 0xE6	; 230
   19d36:	de 4f       	sbci	r29, 0xFE	; 254
   19d38:	28 83       	st	Y, r18
   19d3a:	39 83       	std	Y+1, r19	; 0x01
   19d3c:	4a 83       	std	Y+2, r20	; 0x02
   19d3e:	5b 83       	std	Y+3, r21	; 0x03
   19d40:	ca 51       	subi	r28, 0x1A	; 26
   19d42:	d1 40       	sbci	r29, 0x01	; 1
            printf("\tWrote: %ld\r", count);
        ++count;
    }

    // Write Directory sectors
    lif_dir_clear(LIF);
   19d44:	9d cf       	rjmp	.-198    	; 0x19c80 <lif_create_volume+0x258>
   19d46:	c7 01       	movw	r24, r14
   19d48:	0e 94 4a c6 	call	0x18c94	; 0x18c94 <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   19d4c:	8f ef       	ldi	r24, 0xFF	; 255
   19d4e:	9f ef       	ldi	r25, 0xFF	; 255
   19d50:	f7 01       	movw	r30, r14
   19d52:	e6 5a       	subi	r30, 0xA6	; 166
   19d54:	ff 4f       	sbci	r31, 0xFF	; 255
   19d56:	91 83       	std	Z+1, r25	; 0x01
   19d58:	80 83       	st	Z, r24
   19d5a:	46 01       	movw	r8, r12
   19d5c:	6e 01       	movw	r12, r28
   19d5e:	9c ee       	ldi	r25, 0xEC	; 236
   19d60:	c9 1a       	sub	r12, r25
   19d62:	9e ef       	ldi	r25, 0xFE	; 254

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   19d64:	d9 0a       	sbc	r13, r25
   19d66:	b4 01       	movw	r22, r8
   19d68:	c7 01       	movw	r24, r14
   19d6a:	0e 94 85 c4 	call	0x1890a	; 0x1890a <lif_dir2str>
   19d6e:	a0 e2       	ldi	r26, 0x20	; 32
   19d70:	8a 0e       	add	r8, r26

    // Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   19d72:	91 1c       	adc	r9, r1
   19d74:	c8 14       	cp	r12, r8
   19d76:	d9 04       	cpc	r13, r9
   19d78:	b1 f7       	brne	.-20     	; 0x19d66 <lif_create_volume+0x33e>
   19d7a:	a1 2c       	mov	r10, r1
   19d7c:	b1 2c       	mov	r11, r1
   19d7e:	65 01       	movw	r12, r10
   19d80:	fe 01       	movw	r30, r28
   19d82:	74 96       	adiw	r30, 0x14	; 20
   19d84:	cc 5e       	subi	r28, 0xEC	; 236
   19d86:	de 4f       	sbci	r29, 0xFE	; 254
   19d88:	f9 83       	std	Y+1, r31	; 0x01
   19d8a:	e8 83       	st	Y, r30
   19d8c:	c4 51       	subi	r28, 0x14	; 20
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   19d8e:	d1 40       	sbci	r29, 0x01	; 1
   19d90:	84 e6       	ldi	r24, 0x64	; 100
   19d92:	28 2e       	mov	r2, r24
   19d94:	31 2c       	mov	r3, r1
   19d96:	41 2c       	mov	r4, r1
            printf("\tWrote: %ld\r", count);
   19d98:	51 2c       	mov	r5, r1
   19d9a:	8a e3       	ldi	r24, 0x3A	; 58
   19d9c:	9b e3       	ldi	r25, 0x3B	; 59
   19d9e:	3c 01       	movw	r6, r24
   19da0:	81 2c       	mov	r8, r1
   19da2:	c6 5e       	subi	r28, 0xE6	; 230
   19da4:	de 4f       	sbci	r29, 0xFE	; 254
   19da6:	28 81       	ld	r18, Y
   19da8:	39 81       	ldd	r19, Y+1	; 0x01
   19daa:	4a 81       	ldd	r20, Y+2	; 0x02
   19dac:	5b 81       	ldd	r21, Y+3	; 0x03
   19dae:	ca 51       	subi	r28, 0x1A	; 26
   19db0:	d1 40       	sbci	r29, 0x01	; 1
   19db2:	2a 0d       	add	r18, r10
   19db4:	3b 1d       	adc	r19, r11
   19db6:	4c 1d       	adc	r20, r12
   19db8:	5d 1d       	adc	r21, r13
   19dba:	ce 5d       	subi	r28, 0xDE	; 222
   19dbc:	de 4f       	sbci	r29, 0xFE	; 254
   19dbe:	28 83       	st	Y, r18
   19dc0:	39 83       	std	Y+1, r19	; 0x01
   19dc2:	4a 83       	std	Y+2, r20	; 0x02
   19dc4:	5b 83       	std	Y+3, r21	; 0x03
   19dc6:	c2 52       	subi	r28, 0x22	; 34
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19dc8:	d1 40       	sbci	r29, 0x01	; 1
   19dca:	ca 5d       	subi	r28, 0xDA	; 218
   19dcc:	de 4f       	sbci	r29, 0xFE	; 254
   19dce:	88 81       	ld	r24, Y
   19dd0:	99 81       	ldd	r25, Y+1	; 0x01
   19dd2:	aa 81       	ldd	r26, Y+2	; 0x02
   19dd4:	bb 81       	ldd	r27, Y+3	; 0x03
   19dd6:	c6 52       	subi	r28, 0x26	; 38
   19dd8:	d1 40       	sbci	r29, 0x01	; 1
   19dda:	a8 16       	cp	r10, r24
   19ddc:	b9 06       	cpc	r11, r25
   19dde:	ca 06       	cpc	r12, r26
   19de0:	db 06       	cpc	r13, r27
   19de2:	0c f0       	brlt	.+2      	; 0x19de6 <lif_create_volume+0x3be>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19de4:	58 c0       	rjmp	.+176    	; 0x19e96 <lif_create_volume+0x46e>
   19de6:	00 e0       	ldi	r16, 0x00	; 0
   19de8:	11 e0       	ldi	r17, 0x01	; 1
   19dea:	ca 5e       	subi	r28, 0xEA	; 234
   19dec:	de 4f       	sbci	r29, 0xFE	; 254
   19dee:	28 81       	ld	r18, Y
   19df0:	39 81       	ldd	r19, Y+1	; 0x01
   19df2:	4a 81       	ldd	r20, Y+2	; 0x02
   19df4:	5b 81       	ldd	r21, Y+3	; 0x03
   19df6:	c6 51       	subi	r28, 0x16	; 22
   19df8:	d1 40       	sbci	r29, 0x01	; 1
   19dfa:	be 01       	movw	r22, r28
   19dfc:	6c 5e       	subi	r22, 0xEC	; 236
   19dfe:	7f 4f       	sbci	r23, 0xFF	; 255
   19e00:	c7 01       	movw	r24, r14
   19e02:	0e 94 28 c2 	call	0x18450	; 0x18450 <lif_write>
   19e06:	09 2e       	mov	r0, r25
   19e08:	00 0c       	add	r0, r0
   19e0a:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   19e0c:	bb 0b       	sbc	r27, r27
   19e0e:	8f 3f       	cpi	r24, 0xFF	; 255
   19e10:	91 05       	cpc	r25, r1
   19e12:	a1 05       	cpc	r26, r1
   19e14:	b1 05       	cpc	r27, r1
   19e16:	09 f0       	breq	.+2      	; 0x19e1a <lif_create_volume+0x3f2>
   19e18:	0c f4       	brge	.+2      	; 0x19e1c <lif_create_volume+0x3f4>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19e1a:	db c0       	rjmp	.+438    	; 0x19fd2 <lif_create_volume+0x5aa>
   19e1c:	ca 5e       	subi	r28, 0xEA	; 234
   19e1e:	de 4f       	sbci	r29, 0xFE	; 254
   19e20:	28 81       	ld	r18, Y
   19e22:	39 81       	ldd	r19, Y+1	; 0x01
   19e24:	4a 81       	ldd	r20, Y+2	; 0x02
   19e26:	5b 81       	ldd	r21, Y+3	; 0x03
   19e28:	c6 51       	subi	r28, 0x16	; 22
   19e2a:	d1 40       	sbci	r29, 0x01	; 1
   19e2c:	28 0f       	add	r18, r24
   19e2e:	39 1f       	adc	r19, r25
   19e30:	4a 1f       	adc	r20, r26
   19e32:	5b 1f       	adc	r21, r27
   19e34:	ca 5e       	subi	r28, 0xEA	; 234
   19e36:	de 4f       	sbci	r29, 0xFE	; 254
   19e38:	28 83       	st	Y, r18
   19e3a:	39 83       	std	Y+1, r19	; 0x01
   19e3c:	4a 83       	std	Y+2, r20	; 0x02
   19e3e:	5b 83       	std	Y+3, r21	; 0x03
   19e40:	c6 51       	subi	r28, 0x16	; 22
        if((count % 100) == 0)
   19e42:	d1 40       	sbci	r29, 0x01	; 1
   19e44:	ce 5d       	subi	r28, 0xDE	; 222
   19e46:	de 4f       	sbci	r29, 0xFE	; 254
   19e48:	68 81       	ld	r22, Y
   19e4a:	79 81       	ldd	r23, Y+1	; 0x01
   19e4c:	8a 81       	ldd	r24, Y+2	; 0x02
   19e4e:	9b 81       	ldd	r25, Y+3	; 0x03
   19e50:	c2 52       	subi	r28, 0x22	; 34
   19e52:	d1 40       	sbci	r29, 0x01	; 1
   19e54:	a2 01       	movw	r20, r4
   19e56:	91 01       	movw	r18, r2
   19e58:	0e 94 26 e4 	call	0x1c84c	; 0x1c84c <__divmodsi4>
   19e5c:	67 2b       	or	r22, r23
   19e5e:	68 2b       	or	r22, r24
   19e60:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   19e62:	99 f4       	brne	.+38     	; 0x19e8a <lif_create_volume+0x462>
   19e64:	ce 5d       	subi	r28, 0xDE	; 222
   19e66:	de 4f       	sbci	r29, 0xFE	; 254
   19e68:	88 81       	ld	r24, Y
   19e6a:	99 81       	ldd	r25, Y+1	; 0x01
   19e6c:	aa 81       	ldd	r26, Y+2	; 0x02
   19e6e:	bb 81       	ldd	r27, Y+3	; 0x03
   19e70:	c2 52       	subi	r28, 0x22	; 34
   19e72:	d1 40       	sbci	r29, 0x01	; 1
   19e74:	ed b7       	in	r30, 0x3d	; 61
   19e76:	fe b7       	in	r31, 0x3e	; 62
   19e78:	84 83       	std	Z+4, r24	; 0x04
   19e7a:	95 83       	std	Z+5, r25	; 0x05
   19e7c:	a6 83       	std	Z+6, r26	; 0x06
   19e7e:	b7 83       	std	Z+7, r27	; 0x07
   19e80:	61 82       	std	Z+1, r6	; 0x01
   19e82:	72 82       	std	Z+2, r7	; 0x02
   19e84:	83 82       	std	Z+3, r8	; 0x03
   19e86:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19e8a:	ff ef       	ldi	r31, 0xFF	; 255
   19e8c:	af 1a       	sub	r10, r31
   19e8e:	bf 0a       	sbc	r11, r31
   19e90:	cf 0a       	sbc	r12, r31
   19e92:	df 0a       	sbc	r13, r31
            printf("\tWrote: %ld\r", count);
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   19e94:	86 cf       	rjmp	.-244    	; 0x19da2 <lif_create_volume+0x37a>
   19e96:	80 e0       	ldi	r24, 0x00	; 0
   19e98:	91 e0       	ldi	r25, 0x01	; 1
   19e9a:	cc 5e       	subi	r28, 0xEC	; 236
   19e9c:	de 4f       	sbci	r29, 0xFE	; 254
   19e9e:	a8 81       	ld	r26, Y
   19ea0:	b9 81       	ldd	r27, Y+1	; 0x01
   19ea2:	c4 51       	subi	r28, 0x14	; 20
   19ea4:	d1 40       	sbci	r29, 0x01	; 1
   19ea6:	fc 01       	movw	r30, r24
   19ea8:	1d 92       	st	X+, r1
   19eaa:	31 97       	sbiw	r30, 0x01	; 1
    for(i=0;i<filesectors;++i)
   19eac:	e9 f7       	brne	.-6      	; 0x19ea8 <lif_create_volume+0x480>
   19eae:	81 2c       	mov	r8, r1
   19eb0:	91 2c       	mov	r9, r1
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   19eb2:	54 01       	movw	r10, r8
   19eb4:	8d e2       	ldi	r24, 0x2D	; 45
   19eb6:	9b e3       	ldi	r25, 0x3B	; 59
   19eb8:	9c 01       	movw	r18, r24
   19eba:	40 e0       	ldi	r20, 0x00	; 0
   19ebc:	c6 5e       	subi	r28, 0xE6	; 230
   19ebe:	de 4f       	sbci	r29, 0xFE	; 254
   19ec0:	28 83       	st	Y, r18
   19ec2:	39 83       	std	Y+1, r19	; 0x01
   19ec4:	4a 83       	std	Y+2, r20	; 0x02
   19ec6:	ca 51       	subi	r28, 0x1A	; 26
   19ec8:	d1 40       	sbci	r29, 0x01	; 1
   19eca:	ce 5d       	subi	r28, 0xDE	; 222
   19ecc:	de 4f       	sbci	r29, 0xFE	; 254
   19ece:	48 80       	ld	r4, Y
   19ed0:	59 80       	ldd	r5, Y+1	; 0x01
   19ed2:	6a 80       	ldd	r6, Y+2	; 0x02
   19ed4:	7b 80       	ldd	r7, Y+3	; 0x03
   19ed6:	c2 52       	subi	r28, 0x22	; 34
   19ed8:	d1 40       	sbci	r29, 0x01	; 1
   19eda:	48 0c       	add	r4, r8
   19edc:	59 1c       	adc	r5, r9
   19ede:	6a 1c       	adc	r6, r10
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19ee0:	7b 1c       	adc	r7, r11
   19ee2:	c2 5e       	subi	r28, 0xE2	; 226
   19ee4:	de 4f       	sbci	r29, 0xFE	; 254
   19ee6:	28 81       	ld	r18, Y
   19ee8:	39 81       	ldd	r19, Y+1	; 0x01
   19eea:	4a 81       	ldd	r20, Y+2	; 0x02
   19eec:	5b 81       	ldd	r21, Y+3	; 0x03
   19eee:	ce 51       	subi	r28, 0x1E	; 30
   19ef0:	d1 40       	sbci	r29, 0x01	; 1
   19ef2:	82 16       	cp	r8, r18
   19ef4:	93 06       	cpc	r9, r19
   19ef6:	a4 06       	cpc	r10, r20
   19ef8:	b5 06       	cpc	r11, r21
   19efa:	0c f0       	brlt	.+2      	; 0x19efe <lif_create_volume+0x4d6>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19efc:	53 c0       	rjmp	.+166    	; 0x19fa4 <lif_create_volume+0x57c>
   19efe:	00 e0       	ldi	r16, 0x00	; 0
   19f00:	11 e0       	ldi	r17, 0x01	; 1
   19f02:	ca 5e       	subi	r28, 0xEA	; 234
   19f04:	de 4f       	sbci	r29, 0xFE	; 254
   19f06:	28 81       	ld	r18, Y
   19f08:	39 81       	ldd	r19, Y+1	; 0x01
   19f0a:	4a 81       	ldd	r20, Y+2	; 0x02
   19f0c:	5b 81       	ldd	r21, Y+3	; 0x03
   19f0e:	c6 51       	subi	r28, 0x16	; 22
   19f10:	d1 40       	sbci	r29, 0x01	; 1
   19f12:	be 01       	movw	r22, r28
   19f14:	6c 5e       	subi	r22, 0xEC	; 236
   19f16:	7f 4f       	sbci	r23, 0xFF	; 255
   19f18:	c7 01       	movw	r24, r14
   19f1a:	0e 94 28 c2 	call	0x18450	; 0x18450 <lif_write>
   19f1e:	09 2e       	mov	r0, r25
   19f20:	00 0c       	add	r0, r0
   19f22:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   19f24:	bb 0b       	sbc	r27, r27
   19f26:	8f 3f       	cpi	r24, 0xFF	; 255
   19f28:	91 05       	cpc	r25, r1
   19f2a:	a1 05       	cpc	r26, r1
   19f2c:	b1 05       	cpc	r27, r1
   19f2e:	09 f0       	breq	.+2      	; 0x19f32 <lif_create_volume+0x50a>
   19f30:	0c f4       	brge	.+2      	; 0x19f34 <lif_create_volume+0x50c>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19f32:	4f c0       	rjmp	.+158    	; 0x19fd2 <lif_create_volume+0x5aa>
   19f34:	ca 5e       	subi	r28, 0xEA	; 234
   19f36:	de 4f       	sbci	r29, 0xFE	; 254
   19f38:	28 81       	ld	r18, Y
   19f3a:	39 81       	ldd	r19, Y+1	; 0x01
   19f3c:	4a 81       	ldd	r20, Y+2	; 0x02
   19f3e:	5b 81       	ldd	r21, Y+3	; 0x03
   19f40:	c6 51       	subi	r28, 0x16	; 22
   19f42:	d1 40       	sbci	r29, 0x01	; 1
   19f44:	28 0f       	add	r18, r24
   19f46:	39 1f       	adc	r19, r25
   19f48:	4a 1f       	adc	r20, r26
   19f4a:	5b 1f       	adc	r21, r27
   19f4c:	ca 5e       	subi	r28, 0xEA	; 234
   19f4e:	de 4f       	sbci	r29, 0xFE	; 254
   19f50:	28 83       	st	Y, r18
   19f52:	39 83       	std	Y+1, r19	; 0x01
   19f54:	4a 83       	std	Y+2, r20	; 0x02
   19f56:	5b 83       	std	Y+3, r21	; 0x03
   19f58:	c6 51       	subi	r28, 0x16	; 22
        if((count % 100) == 0)
   19f5a:	d1 40       	sbci	r29, 0x01	; 1
   19f5c:	c3 01       	movw	r24, r6
   19f5e:	b2 01       	movw	r22, r4
   19f60:	24 e6       	ldi	r18, 0x64	; 100
   19f62:	30 e0       	ldi	r19, 0x00	; 0
   19f64:	40 e0       	ldi	r20, 0x00	; 0
   19f66:	50 e0       	ldi	r21, 0x00	; 0
   19f68:	0e 94 26 e4 	call	0x1c84c	; 0x1c84c <__divmodsi4>
   19f6c:	67 2b       	or	r22, r23
   19f6e:	68 2b       	or	r22, r24
   19f70:	69 2b       	or	r22, r25
            printf("\tWrote: %ld\r", count);
   19f72:	91 f4       	brne	.+36     	; 0x19f98 <lif_create_volume+0x570>
   19f74:	ed b7       	in	r30, 0x3d	; 61
   19f76:	fe b7       	in	r31, 0x3e	; 62
   19f78:	44 82       	std	Z+4, r4	; 0x04
   19f7a:	55 82       	std	Z+5, r5	; 0x05
   19f7c:	66 82       	std	Z+6, r6	; 0x06
   19f7e:	77 82       	std	Z+7, r7	; 0x07
   19f80:	c6 5e       	subi	r28, 0xE6	; 230
   19f82:	de 4f       	sbci	r29, 0xFE	; 254
   19f84:	28 81       	ld	r18, Y
   19f86:	39 81       	ldd	r19, Y+1	; 0x01
   19f88:	4a 81       	ldd	r20, Y+2	; 0x02
   19f8a:	ca 51       	subi	r28, 0x1A	; 26
   19f8c:	d1 40       	sbci	r29, 0x01	; 1
   19f8e:	21 83       	std	Z+1, r18	; 0x01
   19f90:	32 83       	std	Z+2, r19	; 0x02
   19f92:	43 83       	std	Z+3, r20	; 0x03
   19f94:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19f98:	ff ef       	ldi	r31, 0xFF	; 255
   19f9a:	8f 1a       	sub	r8, r31
   19f9c:	9f 0a       	sbc	r9, r31
   19f9e:	af 0a       	sbc	r10, r31
   19fa0:	bf 0a       	sbc	r11, r31
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   19fa2:	93 cf       	rjmp	.-218    	; 0x19eca <lif_create_volume+0x4a2>
   19fa4:	ed b7       	in	r30, 0x3d	; 61
   19fa6:	fe b7       	in	r31, 0x3e	; 62
   19fa8:	44 82       	std	Z+4, r4	; 0x04
   19faa:	55 82       	std	Z+5, r5	; 0x05
   19fac:	66 82       	std	Z+6, r6	; 0x06
   19fae:	77 82       	std	Z+7, r7	; 0x07
   19fb0:	80 e2       	ldi	r24, 0x20	; 32
   19fb2:	9b e3       	ldi	r25, 0x3B	; 59
   19fb4:	a0 e0       	ldi	r26, 0x00	; 0
   19fb6:	81 83       	std	Z+1, r24	; 0x01
   19fb8:	92 83       	std	Z+2, r25	; 0x02
   19fba:	a3 83       	std	Z+3, r26	; 0x03
   19fbc:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
    // Directory index
    LIF->dirindex = -1;
   19fc0:	8f ef       	ldi	r24, 0xFF	; 255
   19fc2:	9f ef       	ldi	r25, 0xFF	; 255
   19fc4:	f7 01       	movw	r30, r14
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

    // As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   19fc6:	91 a3       	std	Z+33, r25	; 0x21
   19fc8:	80 a3       	std	Z+32, r24	; 0x20
   19fca:	c7 01       	movw	r24, r14
   19fcc:	38 d8       	rcall	.-3984   	; 0x1903e <lif_check_volume>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19fce:	89 2b       	or	r24, r25
   19fd0:	19 f4       	brne	.+6      	; 0x19fd8 <lif_create_volume+0x5b0>
   19fd2:	c7 01       	movw	r24, r14
   19fd4:	b8 da       	rcall	.-2704   	; 0x19546 <lif_close_volume>
        lif_closedir(LIF);
        return(NULL);
    }

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
   19fd6:	08 c0       	rjmp	.+16     	; 0x19fe8 <lif_create_volume+0x5c0>
   19fd8:	c7 01       	movw	r24, r14
   19fda:	1e dc       	rcall	.-1988   	; 0x19818 <lif_updatefree>
   19fdc:	6c 01       	movw	r12, r24
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19fde:	89 2b       	or	r24, r25
   19fe0:	31 f4       	brne	.+12     	; 0x19fee <lif_create_volume+0x5c6>
   19fe2:	c7 01       	movw	r24, r14

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   19fe4:	b0 da       	rcall	.-2720   	; 0x19546 <lif_close_volume>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   19fe6:	04 c0       	rjmp	.+8      	; 0x19ff0 <lif_create_volume+0x5c8>
   19fe8:	c1 2c       	mov	r12, r1
   19fea:	d1 2c       	mov	r13, r1
   19fec:	01 c0       	rjmp	.+2      	; 0x19ff0 <lif_create_volume+0x5c8>
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   19fee:	67 01       	movw	r12, r14
   19ff0:	c6 01       	movw	r24, r12
   19ff2:	c7 5d       	subi	r28, 0xD7	; 215
   19ff4:	de 4f       	sbci	r29, 0xFE	; 254
   19ff6:	e2 e1       	ldi	r30, 0x12	; 18
   19ff8:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

00019ffc <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   19ffc:	ad e1       	ldi	r26, 0x1D	; 29
   19ffe:	b0 e0       	ldi	r27, 0x00	; 0
   1a000:	e4 e0       	ldi	r30, 0x04	; 4
   1a002:	f0 ed       	ldi	r31, 0xD0	; 208
   1a004:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
   1a008:	9d 8f       	std	Y+29, r25	; 0x1d
   1a00a:	8c 8f       	std	Y+28, r24	; 0x1c
   1a00c:	4a 01       	movw	r8, r20
   1a00e:	5b 01       	movw	r10, r22

    // Directory index
    index = 0;

    // Start of free space
    start = LIF->filestart;
   1a010:	fc 01       	movw	r30, r24
   1a012:	c4 84       	ldd	r12, Z+12	; 0x0c
   1a014:	d5 84       	ldd	r13, Z+13	; 0x0d
   1a016:	e6 84       	ldd	r14, Z+14	; 0x0e

    // Update all file information
    if(lif_updatefree(LIF) == NULL)
   1a018:	f7 84       	ldd	r15, Z+15	; 0x0f
   1a01a:	fe db       	rcall	.-2052   	; 0x19818 <lif_updatefree>
   1a01c:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a01e:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a020:	40 8d       	ldd	r20, Z+24	; 0x18
   1a022:	51 8d       	ldd	r21, Z+25	; 0x19
   1a024:	62 8d       	ldd	r22, Z+26	; 0x1a
   1a026:	73 8d       	ldd	r23, Z+27	; 0x1b
   1a028:	89 2b       	or	r24, r25
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   1a02a:	99 f4       	brne	.+38     	; 0x1a052 <lif_newdir+0x56>
   1a02c:	ed b7       	in	r30, 0x3d	; 61
   1a02e:	fe b7       	in	r31, 0x3e	; 62
   1a030:	80 86       	std	Z+8, r8	; 0x08
   1a032:	91 86       	std	Z+9, r9	; 0x09
   1a034:	a2 86       	std	Z+10, r10	; 0x0a
   1a036:	b3 86       	std	Z+11, r11	; 0x0b
   1a038:	44 83       	std	Z+4, r20	; 0x04
   1a03a:	55 83       	std	Z+5, r21	; 0x05
   1a03c:	66 83       	std	Z+6, r22	; 0x06
   1a03e:	77 83       	std	Z+7, r23	; 0x07
   1a040:	81 e4       	ldi	r24, 0x41	; 65
   1a042:	9a e3       	ldi	r25, 0x3A	; 58
   1a044:	a0 e0       	ldi	r26, 0x00	; 0
   1a046:	81 83       	std	Z+1, r24	; 0x01
   1a048:	92 83       	std	Z+2, r25	; 0x02
   1a04a:	a3 83       	std	Z+3, r26	; 0x03
   1a04c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        return(-1);
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
   1a050:	2f c1       	rjmp	.+606    	; 0x1a2b0 <lif_newdir+0x2b4>
   1a052:	48 15       	cp	r20, r8
   1a054:	59 05       	cpc	r21, r9
   1a056:	6a 05       	cpc	r22, r10
   1a058:	7b 05       	cpc	r23, r11
   1a05a:	c4 f0       	brlt	.+48     	; 0x1a08c <lif_newdir+0x90>
   1a05c:	44 24       	eor	r4, r4
   1a05e:	43 94       	inc	r4
   1a060:	51 2c       	mov	r5, r1
   1a062:	61 2c       	mov	r6, r1
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a064:	71 2c       	mov	r7, r1
   1a066:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a068:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a06a:	86 5a       	subi	r24, 0xA6	; 166
   1a06c:	9f 4f       	sbci	r25, 0xFF	; 255
   1a06e:	9d 8b       	std	Y+21, r25	; 0x15
   1a070:	8c 8b       	std	Y+20, r24	; 0x14
   1a072:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a074:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a076:	e4 5a       	subi	r30, 0xA4	; 164
   1a078:	ff 4f       	sbci	r31, 0xFF	; 255
   1a07a:	fb 8b       	std	Y+19, r31	; 0x13
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a07c:	ea 8b       	std	Y+18, r30	; 0x12
   1a07e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a080:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a082:	80 5a       	subi	r24, 0xA0	; 160
   1a084:	9f 4f       	sbci	r25, 0xFF	; 255
   1a086:	9f 8b       	std	Y+23, r25	; 0x17
   1a088:	8e 8b       	std	Y+22, r24	; 0x16
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   1a08a:	21 c0       	rjmp	.+66     	; 0x1a0ce <lif_newdir+0xd2>
   1a08c:	ed b7       	in	r30, 0x3d	; 61
   1a08e:	fe b7       	in	r31, 0x3e	; 62
   1a090:	44 83       	std	Z+4, r20	; 0x04
   1a092:	55 83       	std	Z+5, r21	; 0x05
   1a094:	66 83       	std	Z+6, r22	; 0x06
   1a096:	77 83       	std	Z+7, r23	; 0x07
   1a098:	88 e1       	ldi	r24, 0x18	; 24
   1a09a:	9a e3       	ldi	r25, 0x3A	; 58
   1a09c:	a0 e0       	ldi	r26, 0x00	; 0
   1a09e:	81 83       	std	Z+1, r24	; 0x01
   1a0a0:	92 83       	std	Z+2, r25	; 0x02
   1a0a2:	a3 83       	std	Z+3, r26	; 0x03
   1a0a4:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a0a8:	03 c1       	rjmp	.+518    	; 0x1a2b0 <lif_newdir+0x2b4>
   1a0aa:	ec 89       	ldd	r30, Y+20	; 0x14
   1a0ac:	fd 89       	ldd	r31, Y+21	; 0x15
   1a0ae:	80 81       	ld	r24, Z
   1a0b0:	91 81       	ldd	r25, Z+1	; 0x01
   1a0b2:	8f 3f       	cpi	r24, 0xFF	; 255
   1a0b4:	ff ef       	ldi	r31, 0xFF	; 255
   1a0b6:	9f 07       	cpc	r25, r31
            return(index);
        }


        // PURGED records
        if(LIF->DIR.FileType == 0)
   1a0b8:	a1 f0       	breq	.+40     	; 0x1a0e2 <lif_newdir+0xe6>
   1a0ba:	89 2b       	or	r24, r25
   1a0bc:	09 f0       	breq	.+2      	; 0x1a0c0 <lif_newdir+0xc4>
        {
            if(freestate == 0)
   1a0be:	ce c0       	rjmp	.+412    	; 0x1a25c <lif_newdir+0x260>
   1a0c0:	61 14       	cp	r6, r1
   1a0c2:	71 04       	cpc	r7, r1
   1a0c4:	09 f4       	brne	.+2      	; 0x1a0c8 <lif_newdir+0xcc>
   1a0c6:	c1 c0       	rjmp	.+386    	; 0x1a24a <lif_newdir+0x24e>
   1a0c8:	ff ef       	ldi	r31, 0xFF	; 255
   1a0ca:	4f 1a       	sub	r4, r31
   1a0cc:	5f 0a       	sbc	r5, r31
   1a0ce:	82 01       	movw	r16, r4
   1a0d0:	01 50       	subi	r16, 0x01	; 1

    // Update free space and EOF pointers
    while(1)
    {
        // Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   1a0d2:	11 09       	sbc	r17, r1
   1a0d4:	b8 01       	movw	r22, r16
   1a0d6:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a0d8:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a0da:	c3 da       	rcall	.-2682   	; 0x19662 <lif_readdirindex>
   1a0dc:	89 2b       	or	r24, r25
   1a0de:	29 f7       	brne	.-54     	; 0x1a0aa <lif_newdir+0xae>
        if(LIF->DIR.FileType == 0xffff)
        {

            // Was enough free space found in purged area ?
            // Do NOT need to update EOF!
            if(freestate == 2)
   1a0e0:	e7 c0       	rjmp	.+462    	; 0x1a2b0 <lif_newdir+0x2b4>
   1a0e2:	22 e0       	ldi	r18, 0x02	; 2
   1a0e4:	62 16       	cp	r6, r18
   1a0e6:	71 04       	cpc	r7, r1
   1a0e8:	09 f0       	breq	.+2      	; 0x1a0ec <lif_newdir+0xf0>
            {
                // Update free pace for new file
                lif_dir_clear(LIF);
   1a0ea:	46 c0       	rjmp	.+140    	; 0x1a178 <lif_newdir+0x17c>
   1a0ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a0ee:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a0f0:	0e 94 4a c6 	call	0x18c94	; 0x18c94 <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   1a0f4:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a0f6:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a0f8:	e4 5a       	subi	r30, 0xA4	; 164
   1a0fa:	ff 4f       	sbci	r31, 0xFF	; 255
   1a0fc:	88 8d       	ldd	r24, Y+24	; 0x18
   1a0fe:	80 83       	st	Z, r24
   1a100:	99 8d       	ldd	r25, Y+25	; 0x19
   1a102:	91 83       	std	Z+1, r25	; 0x01
   1a104:	2a 8d       	ldd	r18, Y+26	; 0x1a
   1a106:	22 83       	std	Z+2, r18	; 0x02
   1a108:	8b 8d       	ldd	r24, Y+27	; 0x1b
                LIF->DIR.FileSectors = sectors;
   1a10a:	83 83       	std	Z+3, r24	; 0x03
   1a10c:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a10e:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a110:	e0 5a       	subi	r30, 0xA0	; 160
   1a112:	ff 4f       	sbci	r31, 0xFF	; 255
   1a114:	80 82       	st	Z, r8
   1a116:	91 82       	std	Z+1, r9	; 0x01
   1a118:	a2 82       	std	Z+2, r10	; 0x02
                LIF->usedsectors += sectors;
   1a11a:	b3 82       	std	Z+3, r11	; 0x03
   1a11c:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a11e:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a120:	84 89       	ldd	r24, Z+20	; 0x14
   1a122:	95 89       	ldd	r25, Z+21	; 0x15
   1a124:	a6 89       	ldd	r26, Z+22	; 0x16
   1a126:	b7 89       	ldd	r27, Z+23	; 0x17
   1a128:	88 0d       	add	r24, r8
   1a12a:	99 1d       	adc	r25, r9
   1a12c:	aa 1d       	adc	r26, r10
   1a12e:	bb 1d       	adc	r27, r11
   1a130:	84 8b       	std	Z+20, r24	; 0x14
   1a132:	95 8b       	std	Z+21, r25	; 0x15
   1a134:	a6 8b       	std	Z+22, r26	; 0x16
                LIF->freesectors -= sectors;
   1a136:	b7 8b       	std	Z+23, r27	; 0x17
   1a138:	80 8d       	ldd	r24, Z+24	; 0x18
   1a13a:	91 8d       	ldd	r25, Z+25	; 0x19
   1a13c:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a13e:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a140:	88 19       	sub	r24, r8
   1a142:	99 09       	sbc	r25, r9
   1a144:	aa 09       	sbc	r26, r10
   1a146:	bb 09       	sbc	r27, r11
   1a148:	80 8f       	std	Z+24, r24	; 0x18
   1a14a:	91 8f       	std	Z+25, r25	; 0x19
   1a14c:	a2 8f       	std	Z+26, r26	; 0x1a
                LIF->files++;
   1a14e:	b3 8f       	std	Z+27, r27	; 0x1b
   1a150:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a152:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a154:	01 96       	adiw	r24, 0x01	; 1
   1a156:	95 8f       	std	Z+29, r25	; 0x1d
                LIF->purged--;
   1a158:	84 8f       	std	Z+28, r24	; 0x1c
   1a15a:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a15c:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a15e:	01 97       	sbiw	r24, 0x01	; 1
   1a160:	97 8f       	std	Z+31, r25	; 0x1f
                LIF->dirindex = freeindex;
   1a162:	86 8f       	std	Z+30, r24	; 0x1e
                // Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   1a164:	20 a2       	std	Z+32, r2	; 0x20
   1a166:	31 a2       	std	Z+33, r3	; 0x21
   1a168:	b1 01       	movw	r22, r2
   1a16a:	cf 01       	movw	r24, r30
   1a16c:	e1 da       	rcall	.-2622   	; 0x19730 <lif_writedirindex>
   1a16e:	89 2b       	or	r24, r25
   1a170:	09 f4       	brne	.+2      	; 0x1a174 <lif_newdir+0x178>
   1a172:	9e c0       	rjmp	.+316    	; 0x1a2b0 <lif_newdir+0x2b4>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & 0x400)
   1a174:	c1 01       	movw	r24, r2
   1a176:	9e c0       	rjmp	.+316    	; 0x1a2b4 <lif_newdir+0x2b8>
   1a178:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a17c:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n", 
   1a180:	92 ff       	sbrs	r25, 2
   1a182:	1e c0       	rjmp	.+60     	; 0x1a1c0 <lif_newdir+0x1c4>
   1a184:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a186:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a188:	80 8d       	ldd	r24, Z+24	; 0x18
   1a18a:	91 8d       	ldd	r25, Z+25	; 0x19
   1a18c:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a18e:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a190:	ed b7       	in	r30, 0x3d	; 61
   1a192:	fe b7       	in	r31, 0x3e	; 62
   1a194:	86 87       	std	Z+14, r24	; 0x0e
   1a196:	97 87       	std	Z+15, r25	; 0x0f
   1a198:	a0 8b       	std	Z+16, r26	; 0x10
   1a19a:	b1 8b       	std	Z+17, r27	; 0x11
   1a19c:	82 86       	std	Z+10, r8	; 0x0a
   1a19e:	93 86       	std	Z+11, r9	; 0x0b
   1a1a0:	a4 86       	std	Z+12, r10	; 0x0c
   1a1a2:	b5 86       	std	Z+13, r11	; 0x0d
   1a1a4:	c6 82       	std	Z+6, r12	; 0x06
   1a1a6:	d7 82       	std	Z+7, r13	; 0x07
   1a1a8:	e0 86       	std	Z+8, r14	; 0x08
   1a1aa:	f1 86       	std	Z+9, r15	; 0x09
   1a1ac:	15 83       	std	Z+5, r17	; 0x05
   1a1ae:	04 83       	std	Z+4, r16	; 0x04
   1a1b0:	87 ec       	ldi	r24, 0xC7	; 199
   1a1b2:	99 e3       	ldi	r25, 0x39	; 57
   1a1b4:	a0 e0       	ldi	r26, 0x00	; 0
   1a1b6:	81 83       	std	Z+1, r24	; 0x01
   1a1b8:	92 83       	std	Z+2, r25	; 0x02
   1a1ba:	a3 83       	std	Z+3, r26	; 0x03
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

            // Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1a1bc:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1a1c0:	b8 01       	movw	r22, r16
   1a1c2:	6f 5f       	subi	r22, 0xFF	; 255
   1a1c4:	7f 4f       	sbci	r23, 0xFF	; 255
   1a1c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a1c8:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a1ca:	0e db       	rcall	.-2532   	; 0x197e8 <lif_writedirEOF>
   1a1cc:	89 2b       	or	r24, r25
            {
                break;
            }

            lif_dir_clear(LIF);
   1a1ce:	09 f4       	brne	.+2      	; 0x1a1d2 <lif_newdir+0x1d6>
   1a1d0:	6f c0       	rjmp	.+222    	; 0x1a2b0 <lif_newdir+0x2b4>
   1a1d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a1d4:	9d 8d       	ldd	r25, Y+29	; 0x1d
            LIF->DIR.FileStartSector = start;
   1a1d6:	0e 94 4a c6 	call	0x18c94	; 0x18c94 <lif_dir_clear>
   1a1da:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a1dc:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a1de:	e4 5a       	subi	r30, 0xA4	; 164
   1a1e0:	ff 4f       	sbci	r31, 0xFF	; 255
   1a1e2:	c0 82       	st	Z, r12
   1a1e4:	d1 82       	std	Z+1, r13	; 0x01
            LIF->DIR.FileSectors = sectors;
   1a1e6:	e2 82       	std	Z+2, r14	; 0x02
   1a1e8:	f3 82       	std	Z+3, r15	; 0x03
   1a1ea:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a1ec:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a1ee:	e0 5a       	subi	r30, 0xA0	; 160
   1a1f0:	ff 4f       	sbci	r31, 0xFF	; 255
   1a1f2:	80 82       	st	Z, r8
   1a1f4:	91 82       	std	Z+1, r9	; 0x01
            LIF->usedsectors += sectors;
   1a1f6:	a2 82       	std	Z+2, r10	; 0x02
   1a1f8:	b3 82       	std	Z+3, r11	; 0x03
   1a1fa:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a1fc:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a1fe:	84 89       	ldd	r24, Z+20	; 0x14
   1a200:	95 89       	ldd	r25, Z+21	; 0x15
   1a202:	a6 89       	ldd	r26, Z+22	; 0x16
   1a204:	b7 89       	ldd	r27, Z+23	; 0x17
   1a206:	88 0d       	add	r24, r8
   1a208:	99 1d       	adc	r25, r9
   1a20a:	aa 1d       	adc	r26, r10
   1a20c:	bb 1d       	adc	r27, r11
   1a20e:	84 8b       	std	Z+20, r24	; 0x14
   1a210:	95 8b       	std	Z+21, r25	; 0x15
            LIF->freesectors -= sectors;
   1a212:	a6 8b       	std	Z+22, r26	; 0x16
   1a214:	b7 8b       	std	Z+23, r27	; 0x17
   1a216:	80 8d       	ldd	r24, Z+24	; 0x18
   1a218:	91 8d       	ldd	r25, Z+25	; 0x19
   1a21a:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a21c:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a21e:	88 19       	sub	r24, r8
   1a220:	99 09       	sbc	r25, r9
   1a222:	aa 09       	sbc	r26, r10
   1a224:	bb 09       	sbc	r27, r11
   1a226:	80 8f       	std	Z+24, r24	; 0x18
   1a228:	91 8f       	std	Z+25, r25	; 0x19
            LIF->files++;
   1a22a:	a2 8f       	std	Z+26, r26	; 0x1a
   1a22c:	b3 8f       	std	Z+27, r27	; 0x1b
   1a22e:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a230:	95 8d       	ldd	r25, Z+29	; 0x1d
            LIF->dirindex = index;
   1a232:	01 96       	adiw	r24, 0x01	; 1
            // Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   1a234:	95 8f       	std	Z+29, r25	; 0x1d
   1a236:	84 8f       	std	Z+28, r24	; 0x1c
   1a238:	11 a3       	std	Z+33, r17	; 0x21
   1a23a:	00 a3       	std	Z+32, r16	; 0x20
   1a23c:	b8 01       	movw	r22, r16
   1a23e:	cf 01       	movw	r24, r30
   1a240:	77 da       	rcall	.-2834   	; 0x19730 <lif_writedirindex>
   1a242:	89 2b       	or	r24, r25


        // PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   1a244:	a9 f1       	breq	.+106    	; 0x1a2b0 <lif_newdir+0x2b4>
   1a246:	c8 01       	movw	r24, r16
   1a248:	35 c0       	rjmp	.+106    	; 0x1a2b4 <lif_newdir+0x2b8>
   1a24a:	c8 8e       	std	Y+24, r12	; 0x18
   1a24c:	d9 8e       	std	Y+25, r13	; 0x19
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   1a24e:	ea 8e       	std	Y+26, r14	; 0x1a
   1a250:	fb 8e       	std	Y+27, r15	; 0x1b
   1a252:	18 01       	movw	r2, r16
            }
            ++index;
            continue;
   1a254:	66 24       	eor	r6, r6
        }
        

        // VALID record
        if(freestate == 1)
   1a256:	63 94       	inc	r6
   1a258:	71 2c       	mov	r7, r1
   1a25a:	36 cf       	rjmp	.-404    	; 0x1a0c8 <lif_newdir+0xcc>
   1a25c:	f1 e0       	ldi	r31, 0x01	; 1
        {
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   1a25e:	6f 16       	cp	r6, r31
   1a260:	71 04       	cpc	r7, r1
   1a262:	a9 f4       	brne	.+42     	; 0x1a28e <lif_newdir+0x292>
   1a264:	ea 89       	ldd	r30, Y+18	; 0x12
   1a266:	fb 89       	ldd	r31, Y+19	; 0x13
   1a268:	80 81       	ld	r24, Z
   1a26a:	91 81       	ldd	r25, Z+1	; 0x01
   1a26c:	a2 81       	ldd	r26, Z+2	; 0x02
   1a26e:	b3 81       	ldd	r27, Z+3	; 0x03
   1a270:	8c 19       	sub	r24, r12
   1a272:	9d 09       	sbc	r25, r13
   1a274:	ae 09       	sbc	r26, r14
   1a276:	bf 09       	sbc	r27, r15
   1a278:	88 15       	cp	r24, r8
   1a27a:	99 05       	cpc	r25, r9
                freestate = 2;      // Found free space in purged record
            else
                freestate = 0;  // Try again
   1a27c:	aa 05       	cpc	r26, r10
   1a27e:	bb 05       	cpc	r27, r11
   1a280:	1c f4       	brge	.+6      	; 0x1a288 <lif_newdir+0x28c>
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;      // Found free space in purged record
   1a282:	61 2c       	mov	r6, r1
   1a284:	71 2c       	mov	r7, r1
   1a286:	03 c0       	rjmp	.+6      	; 0x1a28e <lif_newdir+0x292>
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a288:	82 e0       	ldi	r24, 0x02	; 2
   1a28a:	68 2e       	mov	r6, r24
   1a28c:	71 2c       	mov	r7, r1
   1a28e:	ea 89       	ldd	r30, Y+18	; 0x12
   1a290:	fb 89       	ldd	r31, Y+19	; 0x13
   1a292:	c0 80       	ld	r12, Z
   1a294:	d1 80       	ldd	r13, Z+1	; 0x01
   1a296:	e2 80       	ldd	r14, Z+2	; 0x02
   1a298:	f3 80       	ldd	r15, Z+3	; 0x03
   1a29a:	ee 89       	ldd	r30, Y+22	; 0x16
   1a29c:	ff 89       	ldd	r31, Y+23	; 0x17
   1a29e:	80 81       	ld	r24, Z
   1a2a0:	91 81       	ldd	r25, Z+1	; 0x01
   1a2a2:	a2 81       	ldd	r26, Z+2	; 0x02
   1a2a4:	b3 81       	ldd	r27, Z+3	; 0x03
   1a2a6:	c8 0e       	add	r12, r24
   1a2a8:	d9 1e       	adc	r13, r25
        ++index;
    }
    // ERROR
    return(-1);
   1a2aa:	ea 1e       	adc	r14, r26
   1a2ac:	fb 1e       	adc	r15, r27
}
   1a2ae:	0c cf       	rjmp	.-488    	; 0x1a0c8 <lif_newdir+0xcc>
   1a2b0:	8f ef       	ldi	r24, 0xFF	; 255
   1a2b2:	9f ef       	ldi	r25, 0xFF	; 255
   1a2b4:	6d 96       	adiw	r28, 0x1d	; 29
   1a2b6:	e2 e1       	ldi	r30, 0x12	; 18
   1a2b8:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

0001a2bc <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1a2bc:	a9 e3       	ldi	r26, 0x39	; 57
   1a2be:	b1 e0       	ldi	r27, 0x01	; 1
   1a2c0:	e4 e6       	ldi	r30, 0x64	; 100
   1a2c2:	f1 ed       	ldi	r31, 0xD1	; 209
   1a2c4:	0c 94 8c e4 	jmp	0x1c918	; 0x1c918 <__prologue_saves__+0xc>
   1a2c8:	6c 01       	movw	r12, r24
   1a2ca:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];


    sp = lif_stat(name, (stat_t *)&sb);
   1a2cc:	be 01       	movw	r22, r28
   1a2ce:	66 5f       	subi	r22, 0xF6	; 246
   1a2d0:	7e 4f       	sbci	r23, 0xFE	; 254
   1a2d2:	0e 94 7d c1 	call	0x182fa	; 0x182fa <lif_stat>
   1a2d6:	5c 01       	movw	r10, r24
    if(sp == NULL)
   1a2d8:	00 97       	sbiw	r24, 0x00	; 0
   1a2da:	f9 f0       	breq	.+62     	; 0x1a31a <lif_open_volume+0x5e>
        return(NULL);


    // To read LIF volume we must have at minimum two sectors
    // volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   1a2dc:	fc 01       	movw	r30, r24
   1a2de:	80 8d       	ldd	r24, Z+24	; 0x18
   1a2e0:	91 8d       	ldd	r25, Z+25	; 0x19
   1a2e2:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a2e4:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a2e6:	81 15       	cp	r24, r1
   1a2e8:	f2 e0       	ldi	r31, 0x02	; 2
   1a2ea:	9f 07       	cpc	r25, r31
   1a2ec:	a1 05       	cpc	r26, r1
   1a2ee:	b1 05       	cpc	r27, r1
   1a2f0:	b8 f4       	brcc	.+46     	; 0x1a320 <lif_open_volume+0x64>
    {
        if(debuglevel & 1)
   1a2f2:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1a2f6:	20 ff       	sbrs	r18, 0
   1a2f8:	10 c0       	rjmp	.+32     	; 0x1a31a <lif_open_volume+0x5e>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   1a2fa:	ed b7       	in	r30, 0x3d	; 61
   1a2fc:	fe b7       	in	r31, 0x3e	; 62
   1a2fe:	86 83       	std	Z+6, r24	; 0x06
   1a300:	97 83       	std	Z+7, r25	; 0x07
   1a302:	a0 87       	std	Z+8, r26	; 0x08
   1a304:	b1 87       	std	Z+9, r27	; 0x09
   1a306:	d5 82       	std	Z+5, r13	; 0x05
   1a308:	c4 82       	std	Z+4, r12	; 0x04
   1a30a:	88 e8       	ldi	r24, 0x88	; 136
   1a30c:	99 e3       	ldi	r25, 0x39	; 57
   1a30e:	a0 e0       	ldi	r26, 0x00	; 0
   1a310:	81 83       	std	Z+1, r24	; 0x01
   1a312:	92 83       	std	Z+2, r25	; 0x02
   1a314:	a3 83       	std	Z+3, r26	; 0x03
   1a316:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        return(NULL);
   1a31a:	00 e0       	ldi	r16, 0x00	; 0
   1a31c:	10 e0       	ldi	r17, 0x00	; 0
   1a31e:	c2 c0       	rjmp	.+388    	; 0x1a4a4 <lif_open_volume+0x1e8>
    }


    // Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1a320:	64 e7       	ldi	r22, 0x74	; 116
   1a322:	70 e0       	ldi	r23, 0x00	; 0
   1a324:	80 e0       	ldi	r24, 0x00	; 0
   1a326:	90 e0       	ldi	r25, 0x00	; 0
   1a328:	0e 94 e9 c0 	call	0x181d2	; 0x181d2 <lif_calloc>
   1a32c:	7c 01       	movw	r14, r24
    if(!LIF)
   1a32e:	89 2b       	or	r24, r25
   1a330:	a1 f3       	breq	.-24     	; 0x1a31a <lif_open_volume+0x5e>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1a332:	c6 01       	movw	r24, r12
   1a334:	0e 94 34 c1 	call	0x18268	; 0x18268 <lif_stralloc>
   1a338:	f7 01       	movw	r30, r14
   1a33a:	91 83       	std	Z+1, r25	; 0x01
   1a33c:	80 83       	st	Z, r24
    if(!LIF->name)
   1a33e:	00 97       	sbiw	r24, 0x00	; 0
   1a340:	09 f4       	brne	.+2      	; 0x1a344 <lif_open_volume+0x88>
   1a342:	5a c0       	rjmp	.+180    	; 0x1a3f8 <lif_open_volume+0x13c>
    {
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
   1a344:	f5 01       	movw	r30, r10
   1a346:	80 8c       	ldd	r8, Z+24	; 0x18
   1a348:	91 8c       	ldd	r9, Z+25	; 0x19
   1a34a:	a2 8c       	ldd	r10, Z+26	; 0x1a
   1a34c:	b3 8c       	ldd	r11, Z+27	; 0x1b
   1a34e:	f7 01       	movw	r30, r14
   1a350:	80 86       	std	Z+8, r8	; 0x08
   1a352:	91 86       	std	Z+9, r9	; 0x09
   1a354:	a2 86       	std	Z+10, r10	; 0x0a
   1a356:	b3 86       	std	Z+11, r11	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a358:	77 27       	eor	r23, r23
   1a35a:	6b 2d       	mov	r22, r11
   1a35c:	5a 2d       	mov	r21, r10
   1a35e:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a360:	88 20       	and	r8, r8
   1a362:	21 f0       	breq	.+8      	; 0x1a36c <lif_open_volume+0xb0>
        ++sectors;
   1a364:	4f 5f       	subi	r20, 0xFF	; 255
   1a366:	5f 4f       	sbci	r21, 0xFF	; 255
   1a368:	6f 4f       	sbci	r22, 0xFF	; 255
   1a36a:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   1a36c:	f7 01       	movw	r30, r14
   1a36e:	44 83       	std	Z+4, r20	; 0x04
   1a370:	55 83       	std	Z+5, r21	; 0x05
   1a372:	66 83       	std	Z+6, r22	; 0x06
   1a374:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   1a376:	b8 01       	movw	r22, r16
   1a378:	0e 94 53 c1 	call	0x182a6	; 0x182a6 <lif_open>
   1a37c:	f7 01       	movw	r30, r14
   1a37e:	93 83       	std	Z+3, r25	; 0x03
   1a380:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   1a382:	89 2b       	or	r24, r25
   1a384:	c9 f1       	breq	.+114    	; 0x1a3f8 <lif_open_volume+0x13c>
        return(NULL);
    }
        
        
    // Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1a386:	00 e0       	ldi	r16, 0x00	; 0
   1a388:	11 e0       	ldi	r17, 0x01	; 1
   1a38a:	20 e0       	ldi	r18, 0x00	; 0
   1a38c:	30 e0       	ldi	r19, 0x00	; 0
   1a38e:	a9 01       	movw	r20, r18
   1a390:	be 01       	movw	r22, r28
   1a392:	66 5f       	subi	r22, 0xF6	; 246
   1a394:	7f 4f       	sbci	r23, 0xFF	; 255
   1a396:	c7 01       	movw	r24, r14
   1a398:	0e 94 d7 c1 	call	0x183ae	; 0x183ae <lif_read>
   1a39c:	6f 3f       	cpi	r22, 0xFF	; 255
   1a39e:	71 05       	cpc	r23, r1
   1a3a0:	81 05       	cpc	r24, r1
   1a3a2:	91 05       	cpc	r25, r1
   1a3a4:	09 f0       	breq	.+2      	; 0x1a3a8 <lif_open_volume+0xec>
   1a3a6:	5c f4       	brge	.+22     	; 0x1a3be <lif_open_volume+0x102>
    {
        if(debuglevel & 1)
   1a3a8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a3ac:	80 ff       	sbrs	r24, 0
   1a3ae:	24 c0       	rjmp	.+72     	; 0x1a3f8 <lif_open_volume+0x13c>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   1a3b0:	ed b7       	in	r30, 0x3d	; 61
   1a3b2:	fe b7       	in	r31, 0x3e	; 62
   1a3b4:	d5 82       	std	Z+5, r13	; 0x05
   1a3b6:	c4 82       	std	Z+4, r12	; 0x04
   1a3b8:	82 e5       	ldi	r24, 0x52	; 82
   1a3ba:	99 e3       	ldi	r25, 0x39	; 57
   1a3bc:	17 c0       	rjmp	.+46     	; 0x1a3ec <lif_open_volume+0x130>
        lif_closedir(LIF);
        return(NULL);
    }

    // Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   1a3be:	b7 01       	movw	r22, r14
   1a3c0:	ce 01       	movw	r24, r28
   1a3c2:	0a 96       	adiw	r24, 0x0a	; 10
   1a3c4:	0e 94 fd c3 	call	0x187fa	; 0x187fa <lif_str2vol>

    // Validate basic Volume headers 
    if( !lif_check_volume(LIF) )
   1a3c8:	c7 01       	movw	r24, r14
   1a3ca:	0e 94 1f c8 	call	0x1903e	; 0x1903e <lif_check_volume>
   1a3ce:	89 2b       	or	r24, r25
   1a3d0:	b1 f4       	brne	.+44     	; 0x1a3fe <lif_open_volume+0x142>
    {
        if(debuglevel & 1)
   1a3d2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a3d6:	80 ff       	sbrs	r24, 0
   1a3d8:	0f c0       	rjmp	.+30     	; 0x1a3f8 <lif_open_volume+0x13c>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   1a3da:	f7 01       	movw	r30, r14
   1a3dc:	80 81       	ld	r24, Z
   1a3de:	91 81       	ldd	r25, Z+1	; 0x01
   1a3e0:	ed b7       	in	r30, 0x3d	; 61
   1a3e2:	fe b7       	in	r31, 0x3e	; 62
   1a3e4:	95 83       	std	Z+5, r25	; 0x05
   1a3e6:	84 83       	std	Z+4, r24	; 0x04
   1a3e8:	8f e1       	ldi	r24, 0x1F	; 31
   1a3ea:	99 e3       	ldi	r25, 0x39	; 57
   1a3ec:	a0 e0       	ldi	r26, 0x00	; 0
   1a3ee:	81 83       	std	Z+1, r24	; 0x01
   1a3f0:	92 83       	std	Z+2, r25	; 0x02
   1a3f2:	a3 83       	std	Z+3, r26	; 0x03
   1a3f4:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a3f8:	c7 01       	movw	r24, r14
   1a3fa:	a5 d8       	rcall	.-3766   	; 0x19546 <lif_close_volume>
   1a3fc:	8e cf       	rjmp	.-228    	; 0x1a31a <lif_open_volume+0x5e>
        lif_closedir(LIF);
        return(NULL);
    }

    // Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1a3fe:	f7 01       	movw	r30, r14
   1a400:	45 a5       	ldd	r20, Z+45	; 0x2d
   1a402:	56 a5       	ldd	r21, Z+46	; 0x2e
   1a404:	67 a5       	ldd	r22, Z+47	; 0x2f
   1a406:	70 a9       	ldd	r23, Z+48	; 0x30
   1a408:	85 a9       	ldd	r24, Z+53	; 0x35
   1a40a:	96 a9       	ldd	r25, Z+54	; 0x36
   1a40c:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a40e:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a410:	48 0f       	add	r20, r24
   1a412:	59 1f       	adc	r21, r25
   1a414:	6a 1f       	adc	r22, r26
   1a416:	7b 1f       	adc	r23, r27
   1a418:	44 87       	std	Z+12, r20	; 0x0c
   1a41a:	55 87       	std	Z+13, r21	; 0x0d
   1a41c:	66 87       	std	Z+14, r22	; 0x0e
   1a41e:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1a420:	84 81       	ldd	r24, Z+4	; 0x04
   1a422:	95 81       	ldd	r25, Z+5	; 0x05
   1a424:	a6 81       	ldd	r26, Z+6	; 0x06
   1a426:	b7 81       	ldd	r27, Z+7	; 0x07
   1a428:	84 1b       	sub	r24, r20
   1a42a:	95 0b       	sbc	r25, r21
   1a42c:	a6 0b       	sbc	r26, r22
   1a42e:	b7 0b       	sbc	r27, r23
   1a430:	80 8b       	std	Z+16, r24	; 0x10
   1a432:	91 8b       	std	Z+17, r25	; 0x11
   1a434:	a2 8b       	std	Z+18, r26	; 0x12
   1a436:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   1a438:	80 8f       	std	Z+24, r24	; 0x18
   1a43a:	91 8f       	std	Z+25, r25	; 0x19
   1a43c:	a2 8f       	std	Z+26, r26	; 0x1a
   1a43e:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1a440:	14 8a       	std	Z+20, r1	; 0x14
   1a442:	15 8a       	std	Z+21, r1	; 0x15
   1a444:	16 8a       	std	Z+22, r1	; 0x16
   1a446:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   1a448:	17 8e       	std	Z+31, r1	; 0x1f
   1a44a:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   1a44c:	15 8e       	std	Z+29, r1	; 0x1d
   1a44e:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1a450:	11 a2       	std	Z+33, r1	; 0x21
   1a452:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1a454:	13 a2       	std	Z+35, r1	; 0x23

    if( lif_updatefree(LIF) == NULL)
   1a456:	12 a2       	std	Z+34, r1	; 0x22
   1a458:	c7 01       	movw	r24, r14
   1a45a:	de d9       	rcall	.-3140   	; 0x19818 <lif_updatefree>
   1a45c:	8c 01       	movw	r16, r24
   1a45e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a462:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1a466:	01 15       	cp	r16, r1
   1a468:	11 05       	cpc	r17, r1
    {
        if(debuglevel & 1)
   1a46a:	a1 f4       	brne	.+40     	; 0x1a494 <lif_open_volume+0x1d8>
   1a46c:	80 ff       	sbrs	r24, 0
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1a46e:	0f c0       	rjmp	.+30     	; 0x1a48e <lif_open_volume+0x1d2>
   1a470:	f7 01       	movw	r30, r14
   1a472:	80 81       	ld	r24, Z
   1a474:	91 81       	ldd	r25, Z+1	; 0x01
   1a476:	ed b7       	in	r30, 0x3d	; 61
   1a478:	fe b7       	in	r31, 0x3e	; 62
   1a47a:	95 83       	std	Z+5, r25	; 0x05
   1a47c:	84 83       	std	Z+4, r24	; 0x04
   1a47e:	8c ee       	ldi	r24, 0xEC	; 236
   1a480:	98 e3       	ldi	r25, 0x38	; 56
   1a482:	a0 e0       	ldi	r26, 0x00	; 0
   1a484:	81 83       	std	Z+1, r24	; 0x01
   1a486:	92 83       	std	Z+2, r25	; 0x02
   1a488:	a3 83       	std	Z+3, r26	; 0x03
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a48a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1a48e:	c7 01       	movw	r24, r14
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & 1)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1a490:	5a d8       	rcall	.-3916   	; 0x19546 <lif_close_volume>
    }

	if(debuglevel &0x400)
   1a492:	08 c0       	rjmp	.+16     	; 0x1a4a4 <lif_open_volume+0x1e8>
   1a494:	92 ff       	sbrs	r25, 2
		lif_dump_vol(LIF, "Volume Listing");	
   1a496:	05 c0       	rjmp	.+10     	; 0x1a4a2 <lif_open_volume+0x1e6>
   1a498:	67 e8       	ldi	r22, 0x87	; 135
   1a49a:	75 e1       	ldi	r23, 0x15	; 21
   1a49c:	c7 01       	movw	r24, r14
   1a49e:	0e 94 59 c6 	call	0x18cb2	; 0x18cb2 <lif_dump_vol>
    return( LIF );
}
   1a4a2:	87 01       	movw	r16, r14
   1a4a4:	c8 01       	movw	r24, r16
   1a4a6:	c7 5c       	subi	r28, 0xC7	; 199
   1a4a8:	de 4f       	sbci	r29, 0xFE	; 254
   1a4aa:	ec e0       	ldi	r30, 0x0C	; 12
   1a4ac:	0c 94 a8 e4 	jmp	0x1c950	; 0x1c950 <__epilogue_restores__+0xc>

0001a4b0 <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   1a4b0:	2f 92       	push	r2
   1a4b2:	3f 92       	push	r3
   1a4b4:	4f 92       	push	r4
   1a4b6:	5f 92       	push	r5
   1a4b8:	6f 92       	push	r6
   1a4ba:	8f 92       	push	r8
   1a4bc:	9f 92       	push	r9
   1a4be:	af 92       	push	r10
   1a4c0:	bf 92       	push	r11
   1a4c2:	cf 92       	push	r12
   1a4c4:	df 92       	push	r13
   1a4c6:	ef 92       	push	r14
   1a4c8:	0f 93       	push	r16
   1a4ca:	1f 93       	push	r17
   1a4cc:	cf 93       	push	r28
   1a4ce:	df 93       	push	r29
   1a4d0:	cd b7       	in	r28, 0x3d	; 61
   1a4d2:	de b7       	in	r29, 0x3e	; 62
   1a4d4:	af 97       	sbiw	r28, 0x2f	; 47
   1a4d6:	0f b6       	in	r0, 0x3f	; 63
   1a4d8:	f8 94       	cli
   1a4da:	de bf       	out	0x3e, r29	; 62
   1a4dc:	0f be       	out	0x3f, r0	; 63
   1a4de:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1a4e0:	68 e2       	ldi	r22, 0x28	; 40
   1a4e2:	78 e0       	ldi	r23, 0x08	; 8
   1a4e4:	eb de       	rcall	.-554    	; 0x1a2bc <lif_open_volume>
   1a4e6:	9f a7       	std	Y+47, r25	; 0x2f
   1a4e8:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   1a4ea:	00 97       	sbiw	r24, 0x00	; 0
   1a4ec:	09 f4       	brne	.+2      	; 0x1a4f0 <lif_dir+0x40>
   1a4ee:	9e c1       	rjmp	.+828    	; 0x1a82c <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1a4f0:	fc 01       	movw	r30, r24
   1a4f2:	86 a1       	ldd	r24, Z+38	; 0x26
   1a4f4:	88 23       	and	r24, r24
   1a4f6:	21 f0       	breq	.+8      	; 0x1a500 <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1a4f8:	8f 01       	movw	r16, r30
   1a4fa:	0a 5d       	subi	r16, 0xDA	; 218
   1a4fc:	1f 4f       	sbci	r17, 0xFF	; 255
   1a4fe:	02 c0       	rjmp	.+4      	; 0x1a504 <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   1a500:	09 e3       	ldi	r16, 0x39	; 57
   1a502:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1a504:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a506:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a508:	87 5b       	subi	r24, 0xB7	; 183
   1a50a:	9f 4f       	sbci	r25, 0xFF	; 255
   1a50c:	0e 94 1d c6 	call	0x18c3a	; 0x18c3a <lif_lifbcd2timestr>
   1a510:	ed b7       	in	r30, 0x3d	; 61
   1a512:	fe b7       	in	r31, 0x3e	; 62
   1a514:	97 83       	std	Z+7, r25	; 0x07
   1a516:	86 83       	std	Z+6, r24	; 0x06
   1a518:	15 83       	std	Z+5, r17	; 0x05
   1a51a:	04 83       	std	Z+4, r16	; 0x04
   1a51c:	85 ed       	ldi	r24, 0xD5	; 213
   1a51e:	98 e3       	ldi	r25, 0x38	; 56
   1a520:	a0 e0       	ldi	r26, 0x00	; 0
   1a522:	81 83       	std	Z+1, r24	; 0x01
   1a524:	92 83       	std	Z+2, r25	; 0x02
   1a526:	a3 83       	std	Z+3, r26	; 0x03
   1a528:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1a52c:	85 e9       	ldi	r24, 0x95	; 149
   1a52e:	98 e3       	ldi	r25, 0x38	; 56
   1a530:	a0 e0       	ldi	r26, 0x00	; 0
   1a532:	ed b7       	in	r30, 0x3d	; 61
   1a534:	fe b7       	in	r31, 0x3e	; 62
   1a536:	81 83       	std	Z+1, r24	; 0x01
   1a538:	92 83       	std	Z+2, r25	; 0x02
   1a53a:	a3 83       	std	Z+3, r26	; 0x03
   1a53c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1a540:	00 e2       	ldi	r16, 0x20	; 32
   1a542:	10 e0       	ldi	r17, 0x00	; 0
   1a544:	1f 8b       	std	Y+23, r17	; 0x17
   1a546:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1a548:	21 2c       	mov	r2, r1
   1a54a:	31 2c       	mov	r3, r1

        if(!lif_readdirindex(LIF,index))
            break;


        if(LIF->DIR.FileType == 0xffff)
   1a54c:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a54e:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a550:	06 5a       	subi	r16, 0xA6	; 166
   1a552:	1f 4f       	sbci	r17, 0xFF	; 255
   1a554:	1d 8f       	std	Y+29, r17	; 0x1d
   1a556:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a558:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a55a:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a55c:	00 5a       	subi	r16, 0xA0	; 160
   1a55e:	1f 4f       	sbci	r17, 0xFF	; 255
   1a560:	1d a3       	std	Y+37, r17	; 0x25
   1a562:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a564:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a566:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a568:	04 59       	subi	r16, 0x94	; 148
   1a56a:	1f 4f       	sbci	r17, 0xFF	; 255
   1a56c:	1f a3       	std	Y+39, r17	; 0x27
   1a56e:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1a570:	89 e4       	ldi	r24, 0x49	; 73
   1a572:	98 e3       	ldi	r25, 0x38	; 56
   1a574:	6c 01       	movw	r12, r24
   1a576:	e1 2c       	mov	r14, r1
   1a578:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a57a:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a57c:	01 5b       	subi	r16, 0xB1	; 177
   1a57e:	1f 4f       	sbci	r17, 0xFF	; 255
   1a580:	1f 8f       	std	Y+31, r17	; 0x1f
   1a582:	0e 8f       	std	Y+30, r16	; 0x1e
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1a584:	89 e1       	ldi	r24, 0x19	; 25
   1a586:	98 e3       	ldi	r25, 0x38	; 56
   1a588:	2c 01       	movw	r4, r24
   1a58a:	61 2c       	mov	r6, r1
   1a58c:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a58e:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a590:	04 5a       	subi	r16, 0xA4	; 164
   1a592:	1f 4f       	sbci	r17, 0xFF	; 255
   1a594:	19 a7       	std	Y+41, r17	; 0x29
   1a596:	08 a7       	std	Y+40, r16	; 0x28
   1a598:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a59a:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a59c:	02 59       	subi	r16, 0x92	; 146
   1a59e:	1f 4f       	sbci	r17, 0xFF	; 255
   1a5a0:	1b a7       	std	Y+43, r17	; 0x2b
   1a5a2:	0a a7       	std	Y+42, r16	; 0x2a
   1a5a4:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a5a6:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a5a8:	0c 59       	subi	r16, 0x9C	; 156
   1a5aa:	1f 4f       	sbci	r17, 0xFF	; 255
   1a5ac:	1d a7       	std	Y+45, r17	; 0x2d
   1a5ae:	0c a7       	std	Y+44, r16	; 0x2c
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1a5b0:	b1 01       	movw	r22, r2
   1a5b2:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a5b4:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a5b6:	55 d8       	rcall	.-3926   	; 0x19662 <lif_readdirindex>
   1a5b8:	89 2b       	or	r24, r25
   1a5ba:	09 f4       	brne	.+2      	; 0x1a5be <lif_dir+0x10e>
   1a5bc:	ad c0       	rjmp	.+346    	; 0x1a718 <lif_dir+0x268>
            break;


        if(LIF->DIR.FileType == 0xffff)
   1a5be:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a5c0:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a5c2:	8d 91       	ld	r24, X+
   1a5c4:	9c 91       	ld	r25, X
   1a5c6:	8f 3f       	cpi	r24, 0xFF	; 255
   1a5c8:	bf ef       	ldi	r27, 0xFF	; 255
   1a5ca:	9b 07       	cpc	r25, r27
   1a5cc:	09 f4       	brne	.+2      	; 0x1a5d0 <lif_dir+0x120>
   1a5ce:	a4 c0       	rjmp	.+328    	; 0x1a718 <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a5d0:	ec a1       	ldd	r30, Y+36	; 0x24
   1a5d2:	fd a1       	ldd	r31, Y+37	; 0x25
   1a5d4:	40 81       	ld	r20, Z
   1a5d6:	51 81       	ldd	r21, Z+1	; 0x01
   1a5d8:	62 81       	ldd	r22, Z+2	; 0x02
   1a5da:	73 81       	ldd	r23, Z+3	; 0x03
   1a5dc:	00 27       	eor	r16, r16
   1a5de:	14 2f       	mov	r17, r20
   1a5e0:	25 2f       	mov	r18, r21
   1a5e2:	36 2f       	mov	r19, r22
   1a5e4:	08 8f       	std	Y+24, r16	; 0x18
   1a5e6:	19 8f       	std	Y+25, r17	; 0x19
   1a5e8:	2a 8f       	std	Y+26, r18	; 0x1a
   1a5ea:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1a5ec:	8c 7f       	andi	r24, 0xFC	; 252
   1a5ee:	80 31       	cpi	r24, 0x10	; 16
   1a5f0:	90 4e       	sbci	r25, 0xE0	; 224
   1a5f2:	09 f0       	breq	.+2      	; 0x1a5f6 <lif_dir+0x146>
   1a5f4:	4b c0       	rjmp	.+150    	; 0x1a68c <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a5f6:	ae a1       	ldd	r26, Y+38	; 0x26
   1a5f8:	bf a1       	ldd	r27, Y+39	; 0x27
   1a5fa:	8d 91       	ld	r24, X+
   1a5fc:	9c 91       	ld	r25, X
   1a5fe:	00 97       	sbiw	r24, 0x00	; 0
   1a600:	b9 f0       	breq	.+46     	; 0x1a630 <lif_dir+0x180>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a602:	4c 01       	movw	r8, r24
   1a604:	a1 2c       	mov	r10, r1
   1a606:	b1 2c       	mov	r11, r1
   1a608:	33 27       	eor	r19, r19
   1a60a:	2b 2d       	mov	r18, r11
   1a60c:	1a 2d       	mov	r17, r10
   1a60e:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a610:	88 23       	and	r24, r24
   1a612:	21 f0       	breq	.+8      	; 0x1a61c <lif_dir+0x16c>
        ++sectors;
   1a614:	0f 5f       	subi	r16, 0xFF	; 255
   1a616:	1f 4f       	sbci	r17, 0xFF	; 255
   1a618:	2f 4f       	sbci	r18, 0xFF	; 255
   1a61a:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a61c:	40 17       	cp	r20, r16
   1a61e:	51 07       	cpc	r21, r17
   1a620:	62 07       	cpc	r22, r18
   1a622:	73 07       	cpc	r23, r19
   1a624:	29 f4       	brne	.+10     	; 0x1a630 <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   1a626:	88 8e       	std	Y+24, r8	; 0x18
   1a628:	99 8e       	std	Y+25, r9	; 0x19
   1a62a:	aa 8e       	std	Y+26, r10	; 0x1a
   1a62c:	bb 8e       	std	Y+27, r11	; 0x1b
   1a62e:	2e c0       	rjmp	.+92     	; 0x1a68c <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
   1a630:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1a634:	30 91 c4 01 	lds	r19, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1a638:	32 ff       	sbrs	r19, 2
   1a63a:	24 c0       	rjmp	.+72     	; 0x1a684 <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1a63c:	4c 01       	movw	r8, r24
   1a63e:	a1 2c       	mov	r10, r1
   1a640:	b1 2c       	mov	r11, r1
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a642:	33 27       	eor	r19, r19
   1a644:	2b 2d       	mov	r18, r11
   1a646:	1a 2d       	mov	r17, r10
   1a648:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a64a:	88 23       	and	r24, r24
   1a64c:	21 f0       	breq	.+8      	; 0x1a656 <lif_dir+0x1a6>
        ++sectors;
   1a64e:	0f 5f       	subi	r16, 0xFF	; 255
   1a650:	1f 4f       	sbci	r17, 0xFF	; 255
   1a652:	2f 4f       	sbci	r18, 0xFF	; 255
   1a654:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1a656:	ed b7       	in	r30, 0x3d	; 61
   1a658:	fe b7       	in	r31, 0x3e	; 62
   1a65a:	46 87       	std	Z+14, r20	; 0x0e
   1a65c:	57 87       	std	Z+15, r21	; 0x0f
   1a65e:	60 8b       	std	Z+16, r22	; 0x10
   1a660:	71 8b       	std	Z+17, r23	; 0x11
   1a662:	02 87       	std	Z+10, r16	; 0x0a
   1a664:	13 87       	std	Z+11, r17	; 0x0b
   1a666:	24 87       	std	Z+12, r18	; 0x0c
   1a668:	35 87       	std	Z+13, r19	; 0x0d
   1a66a:	86 82       	std	Z+6, r8	; 0x06
   1a66c:	97 82       	std	Z+7, r9	; 0x07
   1a66e:	a0 86       	std	Z+8, r10	; 0x08
   1a670:	b1 86       	std	Z+9, r11	; 0x09
   1a672:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a674:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a676:	15 83       	std	Z+5, r17	; 0x05
   1a678:	04 83       	std	Z+4, r16	; 0x04
   1a67a:	c1 82       	std	Z+1, r12	; 0x01
   1a67c:	d2 82       	std	Z+2, r13	; 0x02
   1a67e:	e3 82       	std	Z+3, r14	; 0x03
   1a680:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1a684:	01 e2       	ldi	r16, 0x21	; 33
   1a686:	10 e0       	ldi	r17, 0x00	; 0
   1a688:	1f 8b       	std	Y+23, r17	; 0x17
   1a68a:	0e 8b       	std	Y+22, r16	; 0x16
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1a68c:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a68e:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a690:	8d 90       	ld	r8, X+
   1a692:	9c 90       	ld	r9, X
   1a694:	81 14       	cp	r8, r1
   1a696:	91 04       	cpc	r9, r1
   1a698:	19 f0       	breq	.+6      	; 0x1a6a0 <lif_dir+0x1f0>
   1a69a:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a69c:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a69e:	02 c0       	rjmp	.+4      	; 0x1a6a4 <lif_dir+0x1f4>
   1a6a0:	06 e9       	ldi	r16, 0x96	; 150
   1a6a2:	15 e1       	ldi	r17, 0x15	; 21
   1a6a4:	a8 a5       	ldd	r26, Y+40	; 0x28
   1a6a6:	b9 a5       	ldd	r27, Y+41	; 0x29
   1a6a8:	8d 91       	ld	r24, X+
   1a6aa:	9d 91       	ld	r25, X+
   1a6ac:	0d 90       	ld	r0, X+
   1a6ae:	bc 91       	ld	r27, X
   1a6b0:	a0 2d       	mov	r26, r0
   1a6b2:	88 a3       	std	Y+32, r24	; 0x20
   1a6b4:	99 a3       	std	Y+33, r25	; 0x21
   1a6b6:	aa a3       	std	Y+34, r26	; 0x22
   1a6b8:	bb a3       	std	Y+35, r27	; 0x23
   1a6ba:	ea a5       	ldd	r30, Y+42	; 0x2a
   1a6bc:	fb a5       	ldd	r31, Y+43	; 0x2b
   1a6be:	a0 80       	ld	r10, Z
   1a6c0:	b1 80       	ldd	r11, Z+1	; 0x01
   1a6c2:	8c a5       	ldd	r24, Y+44	; 0x2c
   1a6c4:	9d a5       	ldd	r25, Y+45	; 0x2d
   1a6c6:	0e 94 1d c6 	call	0x18c3a	; 0x18c3a <lif_lifbcd2timestr>
   1a6ca:	ed b7       	in	r30, 0x3d	; 61
   1a6cc:	fe b7       	in	r31, 0x3e	; 62
   1a6ce:	95 8b       	std	Z+21, r25	; 0x15
   1a6d0:	84 8b       	std	Z+20, r24	; 0x14
   1a6d2:	b3 8a       	std	Z+19, r11	; 0x13
   1a6d4:	a2 8a       	std	Z+18, r10	; 0x12
   1a6d6:	2e 89       	ldd	r18, Y+22	; 0x16
   1a6d8:	3f 89       	ldd	r19, Y+23	; 0x17
   1a6da:	31 8b       	std	Z+17, r19	; 0x11
   1a6dc:	20 8b       	std	Z+16, r18	; 0x10
   1a6de:	88 8d       	ldd	r24, Y+24	; 0x18
   1a6e0:	99 8d       	ldd	r25, Y+25	; 0x19
   1a6e2:	aa 8d       	ldd	r26, Y+26	; 0x1a
   1a6e4:	bb 8d       	ldd	r27, Y+27	; 0x1b
   1a6e6:	84 87       	std	Z+12, r24	; 0x0c
   1a6e8:	95 87       	std	Z+13, r25	; 0x0d
   1a6ea:	a6 87       	std	Z+14, r26	; 0x0e
   1a6ec:	b7 87       	std	Z+15, r27	; 0x0f
   1a6ee:	88 a1       	ldd	r24, Y+32	; 0x20
   1a6f0:	99 a1       	ldd	r25, Y+33	; 0x21
   1a6f2:	aa a1       	ldd	r26, Y+34	; 0x22
   1a6f4:	bb a1       	ldd	r27, Y+35	; 0x23
   1a6f6:	80 87       	std	Z+8, r24	; 0x08
   1a6f8:	91 87       	std	Z+9, r25	; 0x09
   1a6fa:	a2 87       	std	Z+10, r26	; 0x0a
   1a6fc:	b3 87       	std	Z+11, r27	; 0x0b
   1a6fe:	97 82       	std	Z+7, r9	; 0x07
   1a700:	86 82       	std	Z+6, r8	; 0x06
   1a702:	15 83       	std	Z+5, r17	; 0x05
   1a704:	04 83       	std	Z+4, r16	; 0x04
   1a706:	41 82       	std	Z+1, r4	; 0x01
   1a708:	52 82       	std	Z+2, r5	; 0x02
   1a70a:	63 82       	std	Z+3, r6	; 0x03
   1a70c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            (long)bytes, 
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1a710:	ff ef       	ldi	r31, 0xFF	; 255
   1a712:	2f 1a       	sub	r2, r31
   1a714:	3f 0a       	sbc	r3, r31
    }   
   1a716:	4c cf       	rjmp	.-360    	; 0x1a5b0 <lif_dir+0x100>

    printf("\n");
   1a718:	87 e1       	ldi	r24, 0x17	; 23
   1a71a:	98 e3       	ldi	r25, 0x38	; 56
   1a71c:	a0 e0       	ldi	r26, 0x00	; 0
   1a71e:	ed b7       	in	r30, 0x3d	; 61
   1a720:	fe b7       	in	r31, 0x3e	; 62
   1a722:	81 83       	std	Z+1, r24	; 0x01
   1a724:	92 83       	std	Z+2, r25	; 0x02
   1a726:	a3 83       	std	Z+3, r26	; 0x03
   1a728:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1a72c:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a72e:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a730:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a732:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a734:	09 2e       	mov	r0, r25
   1a736:	00 0c       	add	r0, r0
   1a738:	aa 0b       	sbc	r26, r26
   1a73a:	bb 0b       	sbc	r27, r27
   1a73c:	ed b7       	in	r30, 0x3d	; 61
   1a73e:	fe b7       	in	r31, 0x3e	; 62
   1a740:	84 83       	std	Z+4, r24	; 0x04
   1a742:	95 83       	std	Z+5, r25	; 0x05
   1a744:	a6 83       	std	Z+6, r26	; 0x06
   1a746:	b7 83       	std	Z+7, r27	; 0x07
   1a748:	8b e0       	ldi	r24, 0x0B	; 11
   1a74a:	98 e3       	ldi	r25, 0x38	; 56
   1a74c:	a0 e0       	ldi	r26, 0x00	; 0
   1a74e:	81 83       	std	Z+1, r24	; 0x01
   1a750:	92 83       	std	Z+2, r25	; 0x02
   1a752:	a3 83       	std	Z+3, r26	; 0x03
   1a754:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1a758:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a75a:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a75c:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a75e:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a760:	09 2e       	mov	r0, r25
   1a762:	00 0c       	add	r0, r0
   1a764:	aa 0b       	sbc	r26, r26
   1a766:	bb 0b       	sbc	r27, r27
   1a768:	ed b7       	in	r30, 0x3d	; 61
   1a76a:	fe b7       	in	r31, 0x3e	; 62
   1a76c:	84 83       	std	Z+4, r24	; 0x04
   1a76e:	95 83       	std	Z+5, r25	; 0x05
   1a770:	a6 83       	std	Z+6, r26	; 0x06
   1a772:	b7 83       	std	Z+7, r27	; 0x07
   1a774:	8e ef       	ldi	r24, 0xFE	; 254
   1a776:	97 e3       	ldi	r25, 0x37	; 55
   1a778:	a0 e0       	ldi	r26, 0x00	; 0
   1a77a:	81 83       	std	Z+1, r24	; 0x01
   1a77c:	92 83       	std	Z+2, r25	; 0x02
   1a77e:	a3 83       	std	Z+3, r26	; 0x03
   1a780:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1a784:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a786:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a788:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a78a:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a78c:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a78e:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a790:	ed b7       	in	r30, 0x3d	; 61
   1a792:	fe b7       	in	r31, 0x3e	; 62
   1a794:	84 83       	std	Z+4, r24	; 0x04
   1a796:	95 83       	std	Z+5, r25	; 0x05
   1a798:	a6 83       	std	Z+6, r26	; 0x06
   1a79a:	b7 83       	std	Z+7, r27	; 0x07
   1a79c:	8d ee       	ldi	r24, 0xED	; 237
   1a79e:	97 e3       	ldi	r25, 0x37	; 55
   1a7a0:	a0 e0       	ldi	r26, 0x00	; 0
   1a7a2:	81 83       	std	Z+1, r24	; 0x01
   1a7a4:	92 83       	std	Z+2, r25	; 0x02
   1a7a6:	a3 83       	std	Z+3, r26	; 0x03
   1a7a8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1a7ac:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a7ae:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a7b0:	85 a9       	ldd	r24, Z+53	; 0x35
   1a7b2:	96 a9       	ldd	r25, Z+54	; 0x36
   1a7b4:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a7b6:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a7b8:	ed b7       	in	r30, 0x3d	; 61
   1a7ba:	fe b7       	in	r31, 0x3e	; 62
   1a7bc:	84 83       	std	Z+4, r24	; 0x04
   1a7be:	95 83       	std	Z+5, r25	; 0x05
   1a7c0:	a6 83       	std	Z+6, r26	; 0x06
   1a7c2:	b7 83       	std	Z+7, r27	; 0x07
   1a7c4:	8a ed       	ldi	r24, 0xDA	; 218
   1a7c6:	97 e3       	ldi	r25, 0x37	; 55
   1a7c8:	a0 e0       	ldi	r26, 0x00	; 0
   1a7ca:	81 83       	std	Z+1, r24	; 0x01
   1a7cc:	92 83       	std	Z+2, r25	; 0x02
   1a7ce:	a3 83       	std	Z+3, r26	; 0x03
   1a7d0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1a7d4:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a7d6:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a7d8:	84 89       	ldd	r24, Z+20	; 0x14
   1a7da:	95 89       	ldd	r25, Z+21	; 0x15
   1a7dc:	a6 89       	ldd	r26, Z+22	; 0x16
   1a7de:	b7 89       	ldd	r27, Z+23	; 0x17
   1a7e0:	ed b7       	in	r30, 0x3d	; 61
   1a7e2:	fe b7       	in	r31, 0x3e	; 62
   1a7e4:	84 83       	std	Z+4, r24	; 0x04
   1a7e6:	95 83       	std	Z+5, r25	; 0x05
   1a7e8:	a6 83       	std	Z+6, r26	; 0x06
   1a7ea:	b7 83       	std	Z+7, r27	; 0x07
   1a7ec:	87 ec       	ldi	r24, 0xC7	; 199
   1a7ee:	97 e3       	ldi	r25, 0x37	; 55
   1a7f0:	a0 e0       	ldi	r26, 0x00	; 0
   1a7f2:	81 83       	std	Z+1, r24	; 0x01
   1a7f4:	92 83       	std	Z+2, r25	; 0x02
   1a7f6:	a3 83       	std	Z+3, r26	; 0x03
   1a7f8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1a7fc:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a7fe:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a800:	80 8d       	ldd	r24, Z+24	; 0x18
   1a802:	91 8d       	ldd	r25, Z+25	; 0x19
   1a804:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a806:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a808:	ed b7       	in	r30, 0x3d	; 61
   1a80a:	fe b7       	in	r31, 0x3e	; 62
   1a80c:	84 83       	std	Z+4, r24	; 0x04
   1a80e:	95 83       	std	Z+5, r25	; 0x05
   1a810:	a6 83       	std	Z+6, r26	; 0x06
   1a812:	b7 83       	std	Z+7, r27	; 0x07
   1a814:	84 eb       	ldi	r24, 0xB4	; 180
   1a816:	97 e3       	ldi	r25, 0x37	; 55
   1a818:	a0 e0       	ldi	r26, 0x00	; 0
   1a81a:	81 83       	std	Z+1, r24	; 0x01
   1a81c:	92 83       	std	Z+2, r25	; 0x02
   1a81e:	a3 83       	std	Z+3, r26	; 0x03
   1a820:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a824:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a826:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a828:	0e 94 a3 ca 	call	0x19546	; 0x19546 <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1a82c:	af 96       	adiw	r28, 0x2f	; 47
   1a82e:	0f b6       	in	r0, 0x3f	; 63
   1a830:	f8 94       	cli
   1a832:	de bf       	out	0x3e, r29	; 62
   1a834:	0f be       	out	0x3f, r0	; 63
   1a836:	cd bf       	out	0x3d, r28	; 61
   1a838:	df 91       	pop	r29
   1a83a:	cf 91       	pop	r28
   1a83c:	1f 91       	pop	r17
   1a83e:	0f 91       	pop	r16
   1a840:	ef 90       	pop	r14
   1a842:	df 90       	pop	r13
   1a844:	cf 90       	pop	r12
   1a846:	bf 90       	pop	r11
   1a848:	af 90       	pop	r10
   1a84a:	9f 90       	pop	r9
   1a84c:	8f 90       	pop	r8
   1a84e:	6f 90       	pop	r6
   1a850:	5f 90       	pop	r5
   1a852:	4f 90       	pop	r4
   1a854:	3f 90       	pop	r3
   1a856:	2f 90       	pop	r2
   1a858:	08 95       	ret

0001a85a <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a85a:	a5 e0       	ldi	r26, 0x05	; 5
   1a85c:	b0 e0       	ldi	r27, 0x00	; 0
   1a85e:	e3 e3       	ldi	r30, 0x33	; 51
   1a860:	f4 ed       	ldi	r31, 0xD4	; 212
   1a862:	0c 94 8e e4 	jmp	0x1c91c	; 0x1c91c <__prologue_saves__+0x10>
   1a866:	7c 01       	movw	r14, r24
   1a868:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   1a86a:	cb 01       	movw	r24, r22
   1a86c:	0e 94 ee c2 	call	0x185dc	; 0x185dc <lif_checkname>
   1a870:	89 2b       	or	r24, r25
   1a872:	59 f4       	brne	.+22     	; 0x1a88a <lif_find_file+0x30>
    {
        if(debuglevel & 1)
   1a874:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a878:	80 ff       	sbrs	r24, 0
   1a87a:	46 c0       	rjmp	.+140    	; 0x1a908 <lif_find_file+0xae>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a87c:	ed b7       	in	r30, 0x3d	; 61
   1a87e:	fe b7       	in	r31, 0x3e	; 62
   1a880:	d5 83       	std	Z+5, r29	; 0x05
   1a882:	c4 83       	std	Z+4, r28	; 0x04
   1a884:	8d e8       	ldi	r24, 0x8D	; 141
   1a886:	97 e3       	ldi	r25, 0x37	; 55
   1a888:	13 c0       	rjmp	.+38     	; 0x1a8b0 <lif_find_file+0x56>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a88a:	fe 01       	movw	r30, r28
   1a88c:	01 90       	ld	r0, Z+
   1a88e:	00 20       	and	r0, r0
   1a890:	e9 f7       	brne	.-6      	; 0x1a88c <lif_find_file+0x32>
   1a892:	31 97       	sbiw	r30, 0x01	; 1
   1a894:	ec 1b       	sub	r30, r28
   1a896:	fd 0b       	sbc	r31, r29
   1a898:	3b 97       	sbiw	r30, 0x0b	; 11
   1a89a:	88 f0       	brcs	.+34     	; 0x1a8be <lif_find_file+0x64>
    {
        if(debuglevel & 1)
   1a89c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1a8a0:	80 ff       	sbrs	r24, 0
   1a8a2:	32 c0       	rjmp	.+100    	; 0x1a908 <lif_find_file+0xae>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a8a4:	ed b7       	in	r30, 0x3d	; 61
   1a8a6:	fe b7       	in	r31, 0x3e	; 62
   1a8a8:	d5 83       	std	Z+5, r29	; 0x05
   1a8aa:	c4 83       	std	Z+4, r28	; 0x04
   1a8ac:	88 e6       	ldi	r24, 0x68	; 104
   1a8ae:	97 e3       	ldi	r25, 0x37	; 55
   1a8b0:	a0 e0       	ldi	r26, 0x00	; 0
   1a8b2:	81 83       	std	Z+1, r24	; 0x01
   1a8b4:	92 83       	std	Z+2, r25	; 0x02
   1a8b6:	a3 83       	std	Z+3, r26	; 0x03
   1a8b8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1a8bc:	25 c0       	rjmp	.+74     	; 0x1a908 <lif_find_file+0xae>
        return(-1);
    }

    if(LIF == NULL)
   1a8be:	e1 14       	cp	r14, r1
   1a8c0:	f1 04       	cpc	r15, r1
   1a8c2:	11 f1       	breq	.+68     	; 0x1a908 <lif_find_file+0xae>
   1a8c4:	00 e0       	ldi	r16, 0x00	; 0
   1a8c6:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a8c8:	67 01       	movw	r12, r14
   1a8ca:	fa e5       	ldi	r31, 0x5A	; 90
   1a8cc:	cf 0e       	add	r12, r31
   1a8ce:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a8d0:	57 01       	movw	r10, r14
   1a8d2:	2f e4       	ldi	r18, 0x4F	; 79
   1a8d4:	a2 0e       	add	r10, r18
   1a8d6:	b1 1c       	adc	r11, r1
        return(-1);
    
    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1a8d8:	b8 01       	movw	r22, r16
   1a8da:	c7 01       	movw	r24, r14
   1a8dc:	0e 94 31 cb 	call	0x19662	; 0x19662 <lif_readdirindex>
   1a8e0:	89 2b       	or	r24, r25
   1a8e2:	91 f0       	breq	.+36     	; 0x1a908 <lif_find_file+0xae>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a8e4:	f6 01       	movw	r30, r12
   1a8e6:	80 81       	ld	r24, Z
   1a8e8:	91 81       	ldd	r25, Z+1	; 0x01
   1a8ea:	8f 3f       	cpi	r24, 0xFF	; 255
   1a8ec:	ff ef       	ldi	r31, 0xFF	; 255
   1a8ee:	9f 07       	cpc	r25, r31
   1a8f0:	59 f0       	breq	.+22     	; 0x1a908 <lif_find_file+0xae>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a8f2:	89 2b       	or	r24, r25
   1a8f4:	31 f0       	breq	.+12     	; 0x1a902 <lif_find_file+0xa8>
   1a8f6:	be 01       	movw	r22, r28
   1a8f8:	c5 01       	movw	r24, r10
   1a8fa:	0e 94 c8 32 	call	0x6590	; 0x6590 <strcasecmp>
   1a8fe:	89 2b       	or	r24, r25
   1a900:	31 f0       	breq	.+12     	; 0x1a90e <lif_find_file+0xb4>
            break;
        ++index;
   1a902:	0f 5f       	subi	r16, 0xFF	; 255
   1a904:	1f 4f       	sbci	r17, 0xFF	; 255
   1a906:	e8 cf       	rjmp	.-48     	; 0x1a8d8 <lif_find_file+0x7e>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & 1)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1a908:	8f ef       	ldi	r24, 0xFF	; 255
   1a90a:	9f ef       	ldi	r25, 0xFF	; 255
   1a90c:	01 c0       	rjmp	.+2      	; 0x1a910 <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a90e:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   1a910:	cd b7       	in	r28, 0x3d	; 61
   1a912:	de b7       	in	r29, 0x3e	; 62
   1a914:	25 96       	adiw	r28, 0x05	; 5
   1a916:	ea e0       	ldi	r30, 0x0A	; 10
   1a918:	0c 94 aa e4 	jmp	0x1c954	; 0x1c954 <__epilogue_restores__+0x10>

0001a91c <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1a91c:	a5 e0       	ldi	r26, 0x05	; 5
   1a91e:	b0 e0       	ldi	r27, 0x00	; 0
   1a920:	e4 e9       	ldi	r30, 0x94	; 148
   1a922:	f4 ed       	ldi	r31, 0xD4	; 212
   1a924:	0c 94 90 e4 	jmp	0x1c920	; 0x1c920 <__prologue_saves__+0x14>
   1a928:	6b 01       	movw	r12, r22
   1a92a:	7c 01       	movw	r14, r24
   1a92c:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1a92e:	20 e0       	ldi	r18, 0x00	; 0
   1a930:	31 e0       	ldi	r19, 0x01	; 1
   1a932:	40 e0       	ldi	r20, 0x00	; 0
   1a934:	50 e0       	ldi	r21, 0x00	; 0
   1a936:	0e 94 26 e4 	call	0x1c84c	; 0x1c84c <__divmodsi4>
    if(!pos)
   1a93a:	61 15       	cp	r22, r1
   1a93c:	71 05       	cpc	r23, r1
   1a93e:	d1 f1       	breq	.+116    	; 0x1a9b4 <lif_e010_pad_sector+0x98>
        return(0);

    // Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1a940:	c0 e0       	ldi	r28, 0x00	; 0
   1a942:	d1 e0       	ldi	r29, 0x01	; 1
   1a944:	c6 1b       	sub	r28, r22
   1a946:	d7 0b       	sbc	r29, r23

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
   1a948:	f8 01       	movw	r30, r16
   1a94a:	8f ee       	ldi	r24, 0xEF	; 239
   1a94c:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1a94e:	2f ef       	ldi	r18, 0xFF	; 255

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1a950:	cf 01       	movw	r24, r30
   1a952:	80 1b       	sub	r24, r16
   1a954:	91 0b       	sbc	r25, r17
   1a956:	8c 17       	cp	r24, r28
   1a958:	9d 07       	cpc	r25, r29
   1a95a:	14 f4       	brge	.+4      	; 0x1a960 <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1a95c:	21 93       	st	Z+, r18
   1a95e:	f8 cf       	rjmp	.-16     	; 0x1a950 <lif_e010_pad_sector+0x34>
   1a960:	1c 16       	cp	r1, r28
   1a962:	1d 06       	cpc	r1, r29
   1a964:	14 f0       	brlt	.+4      	; 0x1a96a <lif_e010_pad_sector+0x4e>
   1a966:	c1 e0       	ldi	r28, 0x01	; 1
   1a968:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1a96a:	ce 01       	movw	r24, r28
   1a96c:	0d 2e       	mov	r0, r29
   1a96e:	00 0c       	add	r0, r0
   1a970:	aa 0b       	sbc	r26, r26
   1a972:	bb 0b       	sbc	r27, r27
   1a974:	bc 01       	movw	r22, r24
   1a976:	cd 01       	movw	r24, r26
   1a978:	6c 0d       	add	r22, r12
   1a97a:	7d 1d       	adc	r23, r13
   1a97c:	8e 1d       	adc	r24, r14
   1a97e:	9f 1d       	adc	r25, r15
   1a980:	20 e0       	ldi	r18, 0x00	; 0
   1a982:	31 e0       	ldi	r19, 0x01	; 1
   1a984:	40 e0       	ldi	r20, 0x00	; 0
   1a986:	50 e0       	ldi	r21, 0x00	; 0
   1a988:	0e 94 26 e4 	call	0x1c84c	; 0x1c84c <__divmodsi4>
    // NEW SECTOR
    // Debugging make sure we are at sector boundry
    if(pos)
   1a98c:	61 15       	cp	r22, r1
   1a98e:	71 05       	cpc	r23, r1
   1a990:	a1 f0       	breq	.+40     	; 0x1a9ba <lif_e010_pad_sector+0x9e>
    {
        if(debuglevel & 1)
   1a992:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1a996:	20 ff       	sbrs	r18, 0
   1a998:	12 c0       	rjmp	.+36     	; 0x1a9be <lif_e010_pad_sector+0xa2>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1a99a:	ed b7       	in	r30, 0x3d	; 61
   1a99c:	fe b7       	in	r31, 0x3e	; 62
   1a99e:	75 83       	std	Z+5, r23	; 0x05
   1a9a0:	64 83       	std	Z+4, r22	; 0x04
   1a9a2:	8f e2       	ldi	r24, 0x2F	; 47
   1a9a4:	97 e3       	ldi	r25, 0x37	; 55
   1a9a6:	a0 e0       	ldi	r26, 0x00	; 0
   1a9a8:	81 83       	std	Z+1, r24	; 0x01
   1a9aa:	92 83       	std	Z+2, r25	; 0x02
   1a9ac:	a3 83       	std	Z+3, r26	; 0x03
   1a9ae:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1a9b2:	05 c0       	rjmp	.+10     	; 0x1a9be <lif_e010_pad_sector+0xa2>
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1a9b4:	80 e0       	ldi	r24, 0x00	; 0
   1a9b6:	90 e0       	ldi	r25, 0x00	; 0
   1a9b8:	04 c0       	rjmp	.+8      	; 0x1a9c2 <lif_e010_pad_sector+0xa6>
   1a9ba:	ce 01       	movw	r24, r28
   1a9bc:	02 c0       	rjmp	.+4      	; 0x1a9c2 <lif_e010_pad_sector+0xa6>
    // Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & 1)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1a9be:	8f ef       	ldi	r24, 0xFF	; 255
   1a9c0:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1a9c2:	cd b7       	in	r28, 0x3d	; 61
   1a9c4:	de b7       	in	r29, 0x3e	; 62
   1a9c6:	25 96       	adiw	r28, 0x05	; 5
   1a9c8:	e8 e0       	ldi	r30, 0x08	; 8
   1a9ca:	0c 94 ac e4 	jmp	0x1c958	; 0x1c958 <__epilogue_restores__+0x14>

0001a9ce <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1a9ce:	a5 e0       	ldi	r26, 0x05	; 5
   1a9d0:	b0 e0       	ldi	r27, 0x00	; 0
   1a9d2:	ed ee       	ldi	r30, 0xED	; 237
   1a9d4:	f4 ed       	ldi	r31, 0xD4	; 212
   1a9d6:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
   1a9da:	ec 01       	movw	r28, r24
   1a9dc:	4a 01       	movw	r8, r20
   1a9de:	5b 01       	movw	r10, r22
   1a9e0:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;
    
    // String size
    len = strlen(str);
   1a9e2:	fc 01       	movw	r30, r24
   1a9e4:	01 90       	ld	r0, Z+
   1a9e6:	00 20       	and	r0, r0
   1a9e8:	e9 f7       	brne	.-6      	; 0x1a9e4 <lif_ascii_string_to_e010+0x16>
   1a9ea:	31 97       	sbiw	r30, 0x01	; 1
   1a9ec:	6f 01       	movw	r12, r30
   1a9ee:	c8 1a       	sub	r12, r24
   1a9f0:	d9 0a       	sbc	r13, r25
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a9f2:	41 2c       	mov	r4, r1
   1a9f4:	51 2c       	mov	r5, r1
   1a9f6:	32 01       	movw	r6, r4
   1a9f8:	53 94       	inc	r5
   1a9fa:	cb 01       	movw	r24, r22
   1a9fc:	ba 01       	movw	r22, r20
   1a9fe:	a3 01       	movw	r20, r6
   1aa00:	92 01       	movw	r18, r4
   1aa02:	0e 94 26 e4 	call	0x1c84c	; 0x1c84c <__divmodsi4>
   1aa06:	21 2c       	mov	r2, r1
   1aa08:	33 24       	eor	r3, r3
   1aa0a:	33 94       	inc	r3
   1aa0c:	c1 01       	movw	r24, r2
   1aa0e:	86 1b       	sub	r24, r22
   1aa10:	97 0b       	sbc	r25, r23

    /// We ALWAYS pad a sector if:
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1aa12:	86 30       	cpi	r24, 0x06	; 6
   1aa14:	91 05       	cpc	r25, r1
   1aa16:	20 f0       	brcs	.+8      	; 0x1aa20 <lif_ascii_string_to_e010+0x52>
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1aa18:	1c 01       	movw	r2, r24
    
    // String size
    len = strlen(str);

    // Output buffer index
    ind = 0;
   1aa1a:	00 e0       	ldi	r16, 0x00	; 0
   1aa1c:	10 e0       	ldi	r17, 0x00	; 0
   1aa1e:	17 c0       	rjmp	.+46     	; 0x1aa4e <lif_ascii_string_to_e010+0x80>
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1aa20:	a7 01       	movw	r20, r14
   1aa22:	c5 01       	movw	r24, r10
   1aa24:	b4 01       	movw	r22, r8
   1aa26:	7a df       	rcall	.-268    	; 0x1a91c <lif_e010_pad_sector>
   1aa28:	8c 01       	movw	r16, r24
        if(ind < 0)
   1aa2a:	97 fd       	sbrc	r25, 7
   1aa2c:	81 c0       	rjmp	.+258    	; 0x1ab30 <lif_ascii_string_to_e010+0x162>
            return(ind);

        // Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
        // Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1aa2e:	09 2e       	mov	r0, r25
   1aa30:	00 0c       	add	r0, r0
   1aa32:	aa 0b       	sbc	r26, r26
   1aa34:	bb 0b       	sbc	r27, r27
   1aa36:	bc 01       	movw	r22, r24
   1aa38:	cd 01       	movw	r24, r26
   1aa3a:	68 0d       	add	r22, r8
   1aa3c:	79 1d       	adc	r23, r9
   1aa3e:	8a 1d       	adc	r24, r10
   1aa40:	9b 1d       	adc	r25, r11
   1aa42:	a3 01       	movw	r20, r6
   1aa44:	92 01       	movw	r18, r4
   1aa46:	0e 94 26 e4 	call	0x1c84c	; 0x1c84c <__divmodsi4>
   1aa4a:	26 1a       	sub	r2, r22
   1aa4c:	37 0a       	sbc	r3, r23
   1aa4e:	f7 01       	movw	r30, r14
   1aa50:	e0 0f       	add	r30, r16
   1aa52:	f1 1f       	adc	r31, r17
   1aa54:	0d 5f       	subi	r16, 0xFD	; 253
   1aa56:	1f 4f       	sbci	r17, 0xFF	; 255
    }

    // Note: IMPORTANT we have >= 6 bytes!!!

    // Do not have to split, there is enough room
    if(rem >= (3 + len)) 
   1aa58:	c6 01       	movw	r24, r12
   1aa5a:	02 96       	adiw	r24, 0x02	; 2
   1aa5c:	82 15       	cp	r24, r2
   1aa5e:	93 05       	cpc	r25, r3
   1aa60:	84 f4       	brge	.+32     	; 0x1aa82 <lif_ascii_string_to_e010+0xb4>
    {

        // Write string in new sector
        // The full string + header will fit
        wbuf[ind++] = 0xDF;
   1aa62:	8f ed       	ldi	r24, 0xDF	; 223
   1aa64:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1aa66:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1aa68:	d2 82       	std	Z+2, r13	; 0x02
   1aa6a:	f7 01       	movw	r30, r14
   1aa6c:	e0 0f       	add	r30, r16
   1aa6e:	f1 1f       	adc	r31, r17
   1aa70:	cf 01       	movw	r24, r30
   1aa72:	8e 19       	sub	r24, r14
   1aa74:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1aa76:	29 91       	ld	r18, Y+
   1aa78:	22 23       	and	r18, r18
   1aa7a:	09 f4       	brne	.+2      	; 0x1aa7e <lif_ascii_string_to_e010+0xb0>
   1aa7c:	59 c0       	rjmp	.+178    	; 0x1ab30 <lif_ascii_string_to_e010+0x162>
            wbuf[ind++] = *str++;
   1aa7e:	21 93       	st	Z+, r18
   1aa80:	f7 cf       	rjmp	.-18     	; 0x1aa70 <lif_ascii_string_to_e010+0xa2>

        // CURRENT SECTOR
        // String spans a sector , so split the string

        // 1st Split string header
        wbuf[ind++] = 0xCF;
   1aa82:	8f ec       	ldi	r24, 0xCF	; 207
   1aa84:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1aa86:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1aa88:	d2 82       	std	Z+2, r13	; 0x02
   1aa8a:	d7 01       	movw	r26, r14
   1aa8c:	a0 0f       	add	r26, r16
   1aa8e:	b1 1f       	adc	r27, r17
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1aa90:	fe 01       	movw	r30, r28
   1aa92:	81 91       	ld	r24, Z+
   1aa94:	81 11       	cpse	r24, r1
   1aa96:	0e c0       	rjmp	.+28     	; 0x1aab4 <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1aa98:	c8 01       	movw	r24, r16
   1aa9a:	01 2e       	mov	r0, r17
   1aa9c:	00 0c       	add	r0, r0
   1aa9e:	aa 0b       	sbc	r26, r26
   1aaa0:	bb 0b       	sbc	r27, r27
   1aaa2:	bc 01       	movw	r22, r24
   1aaa4:	cd 01       	movw	r24, r26
   1aaa6:	68 0d       	add	r22, r8
   1aaa8:	79 1d       	adc	r23, r9
   1aaaa:	8a 1d       	adc	r24, r10
   1aaac:	9b 1d       	adc	r25, r11
   1aaae:	61 11       	cpse	r22, r1
   1aab0:	09 c0       	rjmp	.+18     	; 0x1aac4 <lif_ascii_string_to_e010+0xf6>
   1aab2:	1f c0       	rjmp	.+62     	; 0x1aaf2 <lif_ascii_string_to_e010+0x124>
        // 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1aab4:	02 15       	cp	r16, r2
   1aab6:	13 05       	cpc	r17, r3
   1aab8:	7c f7       	brge	.-34     	; 0x1aa98 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1aaba:	0f 5f       	subi	r16, 0xFF	; 255
   1aabc:	1f 4f       	sbci	r17, 0xFF	; 255
   1aabe:	8d 93       	st	X+, r24
   1aac0:	ef 01       	movw	r28, r30
   1aac2:	e6 cf       	rjmp	.-52     	; 0x1aa90 <lif_ascii_string_to_e010+0xc2>

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
   1aac4:	20 91 c3 01 	lds	r18, 0x01C3	; 0x8001c3 <debuglevel>
   1aac8:	20 ff       	sbrs	r18, 0
   1aaca:	30 c0       	rjmp	.+96     	; 0x1ab2c <lif_ascii_string_to_e010+0x15e>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1aacc:	20 e0       	ldi	r18, 0x00	; 0
   1aace:	31 e0       	ldi	r19, 0x01	; 1
   1aad0:	40 e0       	ldi	r20, 0x00	; 0
   1aad2:	50 e0       	ldi	r21, 0x00	; 0
   1aad4:	0e 94 26 e4 	call	0x1c84c	; 0x1c84c <__divmodsi4>
   1aad8:	ed b7       	in	r30, 0x3d	; 61
   1aada:	fe b7       	in	r31, 0x3e	; 62
   1aadc:	75 83       	std	Z+5, r23	; 0x05
   1aade:	64 83       	std	Z+4, r22	; 0x04
   1aae0:	8b e0       	ldi	r24, 0x0B	; 11
   1aae2:	97 e3       	ldi	r25, 0x37	; 55
   1aae4:	a0 e0       	ldi	r26, 0x00	; 0
   1aae6:	81 83       	std	Z+1, r24	; 0x01
   1aae8:	92 83       	std	Z+2, r25	; 0x02
   1aaea:	a3 83       	std	Z+3, r26	; 0x03
   1aaec:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1aaf0:	1d c0       	rjmp	.+58     	; 0x1ab2c <lif_ascii_string_to_e010+0x15e>
            return(-1);
        }

        // Update remining string length
        len = strlen(str);
   1aaf2:	fe 01       	movw	r30, r28
   1aaf4:	01 90       	ld	r0, Z+
   1aaf6:	00 20       	and	r0, r0
   1aaf8:	e9 f7       	brne	.-6      	; 0x1aaf4 <lif_ascii_string_to_e010+0x126>
   1aafa:	31 97       	sbiw	r30, 0x01	; 1
   1aafc:	9f 01       	movw	r18, r30
   1aafe:	2c 1b       	sub	r18, r28
   1ab00:	3d 0b       	sbc	r19, r29
        // 2nd Split string header 
        wbuf[ind++] = 0x6F;
   1ab02:	d7 01       	movw	r26, r14
   1ab04:	a0 0f       	add	r26, r16
   1ab06:	b1 1f       	adc	r27, r17
   1ab08:	8f e6       	ldi	r24, 0x6F	; 111
   1ab0a:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1ab0c:	fd 01       	movw	r30, r26
   1ab0e:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1ab10:	32 83       	std	Z+2, r19	; 0x02
   1ab12:	0d 5f       	subi	r16, 0xFD	; 253
   1ab14:	1f 4f       	sbci	r17, 0xFF	; 255
   1ab16:	f7 01       	movw	r30, r14
   1ab18:	e0 0f       	add	r30, r16
   1ab1a:	f1 1f       	adc	r31, r17
   1ab1c:	cf 01       	movw	r24, r30
   1ab1e:	8e 19       	sub	r24, r14
   1ab20:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1ab22:	29 91       	ld	r18, Y+
   1ab24:	22 23       	and	r18, r18
   1ab26:	21 f0       	breq	.+8      	; 0x1ab30 <lif_ascii_string_to_e010+0x162>
            wbuf[ind++] = *str++;
   1ab28:	21 93       	st	Z+, r18
   1ab2a:	f8 cf       	rjmp	.-16     	; 0x1ab1c <lif_ascii_string_to_e010+0x14e>
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1ab2c:	8f ef       	ldi	r24, 0xFF	; 255
   1ab2e:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1ab30:	cd b7       	in	r28, 0x3d	; 61
   1ab32:	de b7       	in	r29, 0x3e	; 62
   1ab34:	25 96       	adiw	r28, 0x05	; 5
   1ab36:	e2 e1       	ldi	r30, 0x12	; 18
   1ab38:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

0001ab3c <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1ab3c:	ad e0       	ldi	r26, 0x0D	; 13
   1ab3e:	b3 e0       	ldi	r27, 0x03	; 3
   1ab40:	e4 ea       	ldi	r30, 0xA4	; 164
   1ab42:	f5 ed       	ldi	r31, 0xD5	; 213
   1ab44:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
   1ab48:	5c 01       	movw	r10, r24
   1ab4a:	2a 01       	movw	r4, r20
   1ab4c:	3b 01       	movw	r6, r22
   1ab4e:	c9 01       	movw	r24, r18
    // strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
    // output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1ab50:	6e e1       	ldi	r22, 0x1E	; 30
   1ab52:	78 e0       	ldi	r23, 0x08	; 8
   1ab54:	0e 94 53 c1 	call	0x182a6	; 0x182a6 <lif_open>
   1ab58:	c7 5f       	subi	r28, 0xF7	; 247
   1ab5a:	dc 4f       	sbci	r29, 0xFC	; 252
   1ab5c:	99 83       	std	Y+1, r25	; 0x01
   1ab5e:	88 83       	st	Y, r24
   1ab60:	c9 50       	subi	r28, 0x09	; 9
   1ab62:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1ab64:	89 2b       	or	r24, r25
   1ab66:	09 f4       	brne	.+2      	; 0x1ab6a <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1ab68:	63 c0       	rjmp	.+198    	; 0x1ac30 <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1ab6a:	81 2c       	mov	r8, r1
   1ab6c:	91 2c       	mov	r9, r1
   1ab6e:	c1 2c       	mov	r12, r1
   1ab70:	d1 2c       	mov	r13, r1
   1ab72:	76 01       	movw	r14, r12

        if(count > 256)
        {       
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1ab74:	8d ef       	ldi	r24, 0xFD	; 253
   1ab76:	96 e3       	ldi	r25, 0x36	; 54
   1ab78:	9c 01       	movw	r18, r24
   1ab7a:	40 e0       	ldi	r20, 0x00	; 0
   1ab7c:	c5 5f       	subi	r28, 0xF5	; 245
   1ab7e:	dc 4f       	sbci	r29, 0xFC	; 252
   1ab80:	28 83       	st	Y, r18
   1ab82:	39 83       	std	Y+1, r19	; 0x01
   1ab84:	4a 83       	std	Y+2, r20	; 0x02
   1ab86:	cb 50       	subi	r28, 0x0B	; 11
   1ab88:	d3 40       	sbci	r29, 0x03	; 3
   1ab8a:	14 c0       	rjmp	.+40     	; 0x1abb4 <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1ab8c:	c1 01       	movw	r24, r2
   1ab8e:	03 2c       	mov	r0, r3
   1ab90:	00 0c       	add	r0, r0
   1ab92:	aa 0b       	sbc	r26, r26
   1ab94:	bb 0b       	sbc	r27, r27
   1ab96:	48 0e       	add	r4, r24
   1ab98:	59 1e       	adc	r5, r25
   1ab9a:	6a 1e       	adc	r6, r26
   1ab9c:	7b 1e       	adc	r7, r27
        bytes += size;
   1ab9e:	c8 0e       	add	r12, r24
   1aba0:	d9 1e       	adc	r13, r25
   1aba2:	ea 1e       	adc	r14, r26
   1aba4:	fb 1e       	adc	r15, r27
        count += size;
   1aba6:	82 0c       	add	r8, r2
   1aba8:	93 1c       	adc	r9, r3

        if(count > 256)
   1abaa:	31 e0       	ldi	r19, 0x01	; 1
   1abac:	83 16       	cp	r8, r19
   1abae:	93 06       	cpc	r9, r19
   1abb0:	0c f0       	brlt	.+2      	; 0x1abb4 <lif_add_ascii_file_as_e010_wrapper+0x78>
   1abb2:	43 c0       	rjmp	.+134    	; 0x1ac3a <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

    // Read user file and write LIF records
    // reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1abb4:	c7 5f       	subi	r28, 0xF7	; 247
   1abb6:	dc 4f       	sbci	r29, 0xFC	; 252
   1abb8:	48 81       	ld	r20, Y
   1abba:	59 81       	ldd	r21, Y+1	; 0x01
   1abbc:	c9 50       	subi	r28, 0x09	; 9
   1abbe:	d3 40       	sbci	r29, 0x03	; 3
   1abc0:	6d ef       	ldi	r22, 0xFD	; 253
   1abc2:	70 e0       	ldi	r23, 0x00	; 0
   1abc4:	ce 01       	movw	r24, r28
   1abc6:	88 5f       	subi	r24, 0xF8	; 248
   1abc8:	9d 4f       	sbci	r25, 0xFD	; 253
   1abca:	0e 94 4a 77 	call	0xee94	; 0xee94 <fgets>
   1abce:	89 2b       	or	r24, r25
   1abd0:	09 f4       	brne	.+2      	; 0x1abd4 <lif_add_ascii_file_as_e010_wrapper+0x98>
   1abd2:	4b c0       	rjmp	.+150    	; 0x1ac6a <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1abd4:	ce 01       	movw	r24, r28
   1abd6:	88 5f       	subi	r24, 0xF8	; 248
   1abd8:	9d 4f       	sbci	r25, 0xFD	; 253
   1abda:	0e 94 3f 33 	call	0x667e	; 0x667e <trim_tail>

        strcat((char *)str,"\r"); // HP85 lines end with "\r"
   1abde:	6f e9       	ldi	r22, 0x9F	; 159
   1abe0:	75 e1       	ldi	r23, 0x15	; 21
   1abe2:	ce 01       	movw	r24, r28
   1abe4:	88 5f       	subi	r24, 0xF8	; 248
   1abe6:	9d 4f       	sbci	r25, 0xFD	; 253
   1abe8:	0e 94 82 32 	call	0x6504	; 0x6504 <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1abec:	9e 01       	movw	r18, r28
   1abee:	28 5f       	subi	r18, 0xF8	; 248
   1abf0:	3f 4f       	sbci	r19, 0xFF	; 255
   1abf2:	b3 01       	movw	r22, r6
   1abf4:	a2 01       	movw	r20, r4
   1abf6:	ce 01       	movw	r24, r28
   1abf8:	88 5f       	subi	r24, 0xF8	; 248
   1abfa:	9d 4f       	sbci	r25, 0xFD	; 253
   1abfc:	e8 de       	rcall	.-560    	; 0x1a9ce <lif_ascii_string_to_e010>
   1abfe:	1c 01       	movw	r2, r24
        // Write string
        // Now Write string
        if(LIF)
   1ac00:	a1 14       	cp	r10, r1
   1ac02:	b1 04       	cpc	r11, r1
   1ac04:	19 f2       	breq	.-122    	; 0x1ab8c <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1ac06:	8c 01       	movw	r16, r24
   1ac08:	a3 01       	movw	r20, r6
   1ac0a:	92 01       	movw	r18, r4
   1ac0c:	be 01       	movw	r22, r28
   1ac0e:	68 5f       	subi	r22, 0xF8	; 248
   1ac10:	7f 4f       	sbci	r23, 0xFF	; 255
   1ac12:	c5 01       	movw	r24, r10
   1ac14:	0e 94 28 c2 	call	0x18450	; 0x18450 <lif_write>
            if(len < size)
   1ac18:	82 15       	cp	r24, r2
   1ac1a:	93 05       	cpc	r25, r3
   1ac1c:	0c f0       	brlt	.+2      	; 0x1ac20 <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1ac1e:	b6 cf       	rjmp	.-148    	; 0x1ab8c <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1ac20:	c7 5f       	subi	r28, 0xF7	; 247
   1ac22:	dc 4f       	sbci	r29, 0xFC	; 252
   1ac24:	88 81       	ld	r24, Y
   1ac26:	99 81       	ldd	r25, Y+1	; 0x01
   1ac28:	c9 50       	subi	r28, 0x09	; 9
   1ac2a:	d3 40       	sbci	r29, 0x03	; 3
   1ac2c:	0e 94 dc 7d 	call	0xfbb8	; 0xfbb8 <fclose>
                return(-1);
   1ac30:	6f ef       	ldi	r22, 0xFF	; 255
   1ac32:	7f ef       	ldi	r23, 0xFF	; 255
   1ac34:	8f ef       	ldi	r24, 0xFF	; 255
   1ac36:	9f ef       	ldi	r25, 0xFF	; 255
   1ac38:	84 c0       	rjmp	.+264    	; 0x1ad42 <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {       
            count = 0;
            if(LIF)
   1ac3a:	a1 14       	cp	r10, r1
   1ac3c:	b1 04       	cpc	r11, r1
   1ac3e:	91 f0       	breq	.+36     	; 0x1ac64 <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1ac40:	ed b7       	in	r30, 0x3d	; 61
   1ac42:	fe b7       	in	r31, 0x3e	; 62
   1ac44:	c4 82       	std	Z+4, r12	; 0x04
   1ac46:	d5 82       	std	Z+5, r13	; 0x05
   1ac48:	e6 82       	std	Z+6, r14	; 0x06
   1ac4a:	f7 82       	std	Z+7, r15	; 0x07
   1ac4c:	c5 5f       	subi	r28, 0xF5	; 245
   1ac4e:	dc 4f       	sbci	r29, 0xFC	; 252
   1ac50:	28 81       	ld	r18, Y
   1ac52:	39 81       	ldd	r19, Y+1	; 0x01
   1ac54:	4a 81       	ldd	r20, Y+2	; 0x02
   1ac56:	cb 50       	subi	r28, 0x0B	; 11
   1ac58:	d3 40       	sbci	r29, 0x03	; 3
   1ac5a:	21 83       	std	Z+1, r18	; 0x01
   1ac5c:	32 83       	std	Z+2, r19	; 0x02
   1ac5e:	43 83       	std	Z+3, r20	; 0x03
   1ac60:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {       
            count = 0;
   1ac64:	81 2c       	mov	r8, r1
   1ac66:	91 2c       	mov	r9, r1
   1ac68:	a5 cf       	rjmp	.-182    	; 0x1abb4 <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1ac6a:	c7 5f       	subi	r28, 0xF7	; 247
   1ac6c:	dc 4f       	sbci	r29, 0xFC	; 252
   1ac6e:	88 81       	ld	r24, Y
   1ac70:	99 81       	ldd	r25, Y+1	; 0x01
   1ac72:	c9 50       	subi	r28, 0x09	; 9
   1ac74:	d3 40       	sbci	r29, 0x03	; 3
   1ac76:	0e 94 dc 7d 	call	0xfbb8	; 0xfbb8 <fclose>

    // Write EOF
    str[0] = 0;
   1ac7a:	c8 5f       	subi	r28, 0xF8	; 248
   1ac7c:	dd 4f       	sbci	r29, 0xFD	; 253
   1ac7e:	18 82       	st	Y, r1
   1ac80:	c8 50       	subi	r28, 0x08	; 8
   1ac82:	d2 40       	sbci	r29, 0x02	; 2
    // We only want to return the count of bytes in the file NOT the padding at the end
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1ac84:	9e 01       	movw	r18, r28
   1ac86:	28 5f       	subi	r18, 0xF8	; 248
   1ac88:	3f 4f       	sbci	r19, 0xFF	; 255
   1ac8a:	b3 01       	movw	r22, r6
   1ac8c:	a2 01       	movw	r20, r4
   1ac8e:	ce 01       	movw	r24, r28
   1ac90:	88 5f       	subi	r24, 0xF8	; 248
   1ac92:	9d 4f       	sbci	r25, 0xFD	; 253
   1ac94:	9c de       	rcall	.-712    	; 0x1a9ce <lif_ascii_string_to_e010>
   1ac96:	4c 01       	movw	r8, r24

    if(LIF)
   1ac98:	a1 14       	cp	r10, r1
   1ac9a:	b1 04       	cpc	r11, r1
   1ac9c:	d1 f4       	brne	.+52     	; 0x1acd2 <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1ac9e:	c4 01       	movw	r24, r8
   1aca0:	09 2c       	mov	r0, r9
   1aca2:	00 0c       	add	r0, r0
   1aca4:	aa 0b       	sbc	r26, r26
   1aca6:	bb 0b       	sbc	r27, r27
   1aca8:	c8 0e       	add	r12, r24
   1acaa:	d9 1e       	adc	r13, r25
   1acac:	ea 1e       	adc	r14, r26
   1acae:	fb 1e       	adc	r15, r27

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
   1acb0:	12 01       	movw	r2, r4
   1acb2:	23 01       	movw	r4, r6
   1acb4:	28 0e       	add	r2, r24
   1acb6:	39 1e       	adc	r3, r25
   1acb8:	4a 1e       	adc	r4, r26
   1acba:	5b 1e       	adc	r5, r27
   1acbc:	ae 01       	movw	r20, r28
   1acbe:	48 5f       	subi	r20, 0xF8	; 248
   1acc0:	5f 4f       	sbci	r21, 0xFF	; 255
   1acc2:	c2 01       	movw	r24, r4
   1acc4:	b1 01       	movw	r22, r2
   1acc6:	2a de       	rcall	.-940    	; 0x1a91c <lif_e010_pad_sector>
   1acc8:	3c 01       	movw	r6, r24
    if(LIF)
   1acca:	a1 14       	cp	r10, r1
   1accc:	b1 04       	cpc	r11, r1
   1acce:	e1 f4       	brne	.+56     	; 0x1ad08 <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1acd0:	36 c0       	rjmp	.+108    	; 0x1ad3e <lif_add_ascii_file_as_e010_wrapper+0x202>
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1acd2:	ed b7       	in	r30, 0x3d	; 61
   1acd4:	fe b7       	in	r31, 0x3e	; 62
   1acd6:	c4 82       	std	Z+4, r12	; 0x04
   1acd8:	d5 82       	std	Z+5, r13	; 0x05
   1acda:	e6 82       	std	Z+6, r14	; 0x06
   1acdc:	f7 82       	std	Z+7, r15	; 0x07
   1acde:	8f ee       	ldi	r24, 0xEF	; 239
   1ace0:	96 e3       	ldi	r25, 0x36	; 54
   1ace2:	a0 e0       	ldi	r26, 0x00	; 0
   1ace4:	81 83       	std	Z+1, r24	; 0x01
   1ace6:	92 83       	std	Z+2, r25	; 0x02
   1ace8:	a3 83       	std	Z+3, r26	; 0x03
   1acea:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1acee:	84 01       	movw	r16, r8
   1acf0:	a3 01       	movw	r20, r6
   1acf2:	92 01       	movw	r18, r4
   1acf4:	be 01       	movw	r22, r28
   1acf6:	68 5f       	subi	r22, 0xF8	; 248
   1acf8:	7f 4f       	sbci	r23, 0xFF	; 255
   1acfa:	c5 01       	movw	r24, r10
   1acfc:	0e 94 28 c2 	call	0x18450	; 0x18450 <lif_write>
        if(len < size)
   1ad00:	88 15       	cp	r24, r8
   1ad02:	99 05       	cpc	r25, r9
   1ad04:	64 f6       	brge	.-104    	; 0x1ac9e <lif_add_ascii_file_as_e010_wrapper+0x162>
   1ad06:	94 cf       	rjmp	.-216    	; 0x1ac30 <lif_add_ascii_file_as_e010_wrapper+0xf4>

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1ad08:	8c 01       	movw	r16, r24
   1ad0a:	a2 01       	movw	r20, r4
   1ad0c:	91 01       	movw	r18, r2
   1ad0e:	be 01       	movw	r22, r28
   1ad10:	68 5f       	subi	r22, 0xF8	; 248
   1ad12:	7f 4f       	sbci	r23, 0xFF	; 255
   1ad14:	c5 01       	movw	r24, r10
   1ad16:	0e 94 28 c2 	call	0x18450	; 0x18450 <lif_write>
        if(len < size)
   1ad1a:	86 15       	cp	r24, r6
   1ad1c:	97 05       	cpc	r25, r7
   1ad1e:	0c f4       	brge	.+2      	; 0x1ad22 <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1ad20:	87 cf       	rjmp	.-242    	; 0x1ac30 <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1ad22:	ed b7       	in	r30, 0x3d	; 61
   1ad24:	fe b7       	in	r31, 0x3e	; 62
   1ad26:	c4 82       	std	Z+4, r12	; 0x04
   1ad28:	d5 82       	std	Z+5, r13	; 0x05
   1ad2a:	e6 82       	std	Z+6, r14	; 0x06
   1ad2c:	f7 82       	std	Z+7, r15	; 0x07
   1ad2e:	81 ee       	ldi	r24, 0xE1	; 225
   1ad30:	96 e3       	ldi	r25, 0x36	; 54
   1ad32:	a0 e0       	ldi	r26, 0x00	; 0
   1ad34:	81 83       	std	Z+1, r24	; 0x01
   1ad36:	92 83       	std	Z+2, r25	; 0x02
   1ad38:	a3 83       	std	Z+3, r26	; 0x03
   1ad3a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

    return(bytes);
   1ad3e:	b6 01       	movw	r22, r12
   1ad40:	c7 01       	movw	r24, r14
}
   1ad42:	c3 5f       	subi	r28, 0xF3	; 243
   1ad44:	dc 4f       	sbci	r29, 0xFC	; 252
   1ad46:	e2 e1       	ldi	r30, 0x12	; 18
   1ad48:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

0001ad4c <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1ad4c:	ab e3       	ldi	r26, 0x3B	; 59
   1ad4e:	b0 e0       	ldi	r27, 0x00	; 0
   1ad50:	ec ea       	ldi	r30, 0xAC	; 172
   1ad52:	f6 ed       	ldi	r31, 0xD6	; 214
   1ad54:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
   1ad58:	6c 01       	movw	r12, r24
   1ad5a:	1b 01       	movw	r2, r22
   1ad5c:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;
    stat_t st, *sp;


    if(!*lifimagename)
   1ad5e:	fc 01       	movw	r30, r24
   1ad60:	80 81       	ld	r24, Z
   1ad62:	81 11       	cpse	r24, r1
   1ad64:	03 c0       	rjmp	.+6      	; 0x1ad6c <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1ad66:	8e ea       	ldi	r24, 0xAE	; 174
   1ad68:	96 e3       	ldi	r25, 0x36	; 54
   1ad6a:	1a c0       	rjmp	.+52     	; 0x1ada0 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1ad6c:	fb 01       	movw	r30, r22
   1ad6e:	80 81       	ld	r24, Z
   1ad70:	81 11       	cpse	r24, r1
   1ad72:	03 c0       	rjmp	.+6      	; 0x1ad7a <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1ad74:	80 e8       	ldi	r24, 0x80	; 128
   1ad76:	96 e3       	ldi	r25, 0x36	; 54
   1ad78:	13 c0       	rjmp	.+38     	; 0x1ada0 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1ad7a:	fa 01       	movw	r30, r20
   1ad7c:	80 81       	ld	r24, Z
   1ad7e:	81 11       	cpse	r24, r1
   1ad80:	03 c0       	rjmp	.+6      	; 0x1ad88 <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1ad82:	81 e5       	ldi	r24, 0x51	; 81
   1ad84:	96 e3       	ldi	r25, 0x36	; 54
   1ad86:	0c c0       	rjmp	.+24     	; 0x1ada0 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

    //Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1ad88:	be 01       	movw	r22, r28
   1ad8a:	66 5f       	subi	r22, 0xF6	; 246
   1ad8c:	7f 4f       	sbci	r23, 0xFF	; 255
   1ad8e:	ca 01       	movw	r24, r20
   1ad90:	0e 94 7d c1 	call	0x182fa	; 0x182fa <lif_stat>
   1ad94:	9b af       	std	Y+59, r25	; 0x3b
   1ad96:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1ad98:	89 2b       	or	r24, r25
   1ad9a:	59 f4       	brne	.+22     	; 0x1adb2 <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1ad9c:	81 e2       	ldi	r24, 0x21	; 33
   1ad9e:	96 e3       	ldi	r25, 0x36	; 54
   1ada0:	a0 e0       	ldi	r26, 0x00	; 0
   1ada2:	ed b7       	in	r30, 0x3d	; 61
   1ada4:	fe b7       	in	r31, 0x3e	; 62
   1ada6:	81 83       	std	Z+1, r24	; 0x01
   1ada8:	92 83       	std	Z+2, r25	; 0x02
   1adaa:	a3 83       	std	Z+3, r26	; 0x03
   1adac:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1adb0:	01 c1       	rjmp	.+514    	; 0x1afb4 <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & 0x400)
   1adb2:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1adb6:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1adba:	92 ff       	sbrs	r25, 2
   1adbc:	10 c0       	rjmp	.+32     	; 0x1adde <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1adbe:	ed b7       	in	r30, 0x3d	; 61
   1adc0:	fe b7       	in	r31, 0x3e	; 62
   1adc2:	f1 86       	std	Z+9, r15	; 0x09
   1adc4:	e0 86       	std	Z+8, r14	; 0x08
   1adc6:	37 82       	std	Z+7, r3	; 0x07
   1adc8:	26 82       	std	Z+6, r2	; 0x06
   1adca:	d5 82       	std	Z+5, r13	; 0x05
   1adcc:	c4 82       	std	Z+4, r12	; 0x04
   1adce:	82 ef       	ldi	r24, 0xF2	; 242
   1add0:	95 e3       	ldi	r25, 0x35	; 53
   1add2:	a0 e0       	ldi	r26, 0x00	; 0
   1add4:	81 83       	std	Z+1, r24	; 0x01
   1add6:	92 83       	std	Z+2, r25	; 0x02
   1add8:	a3 83       	std	Z+3, r26	; 0x03
   1adda:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            lifimagename, lifname, userfile);

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1adde:	97 01       	movw	r18, r14
   1ade0:	40 e0       	ldi	r20, 0x00	; 0
   1ade2:	50 e0       	ldi	r21, 0x00	; 0
   1ade4:	ba 01       	movw	r22, r20
   1ade6:	80 e0       	ldi	r24, 0x00	; 0
   1ade8:	90 e0       	ldi	r25, 0x00	; 0
   1adea:	a8 de       	rcall	.-688    	; 0x1ab3c <lif_add_ascii_file_as_e010_wrapper>
   1adec:	4b 01       	movw	r8, r22
   1adee:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1adf0:	47 2e       	mov	r4, r23
   1adf2:	58 2e       	mov	r5, r24
   1adf4:	69 2e       	mov	r6, r25
   1adf6:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1adf8:	66 23       	and	r22, r22
   1adfa:	29 f0       	breq	.+10     	; 0x1ae06 <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1adfc:	ff ef       	ldi	r31, 0xFF	; 255
   1adfe:	4f 1a       	sub	r4, r31
   1ae00:	5f 0a       	sbc	r5, r31
   1ae02:	6f 0a       	sbc	r6, r31
   1ae04:	7f 0a       	sbc	r7, r31

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1ae06:	61 e2       	ldi	r22, 0x21	; 33
   1ae08:	78 e0       	ldi	r23, 0x08	; 8
   1ae0a:	c6 01       	movw	r24, r12
   1ae0c:	57 da       	rcall	.-2898   	; 0x1a2bc <lif_open_volume>
   1ae0e:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1ae10:	00 97       	sbiw	r24, 0x00	; 0
   1ae12:	09 f4       	brne	.+2      	; 0x1ae16 <lif_add_ascii_file_as_e010+0xca>
        return(-1); 

    // Now find free record
    index = lif_newdir(LIF, sectors);
   1ae14:	cf c0       	rjmp	.+414    	; 0x1afb4 <lif_add_ascii_file_as_e010+0x268>
   1ae16:	b3 01       	movw	r22, r6
   1ae18:	a2 01       	movw	r20, r4
   1ae1a:	f0 d8       	rcall	.-3616   	; 0x19ffc <lif_newdir>
    if(index == -1)
   1ae1c:	3c 01       	movw	r6, r24
   1ae1e:	8f ef       	ldi	r24, 0xFF	; 255
   1ae20:	68 16       	cp	r6, r24
   1ae22:	78 06       	cpc	r7, r24
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1ae24:	79 f4       	brne	.+30     	; 0x1ae44 <lif_add_ascii_file_as_e010+0xf8>
   1ae26:	ed b7       	in	r30, 0x3d	; 61
   1ae28:	fe b7       	in	r31, 0x3e	; 62
   1ae2a:	f7 82       	std	Z+7, r15	; 0x07
   1ae2c:	e6 82       	std	Z+6, r14	; 0x06
   1ae2e:	d5 82       	std	Z+5, r13	; 0x05
   1ae30:	c4 82       	std	Z+4, r12	; 0x04
   1ae32:	82 ec       	ldi	r24, 0xC2	; 194
   1ae34:	95 e3       	ldi	r25, 0x35	; 53
   1ae36:	a0 e0       	ldi	r26, 0x00	; 0
   1ae38:	81 83       	std	Z+1, r24	; 0x01
   1ae3a:	92 83       	std	Z+2, r25	; 0x02
   1ae3c:	a3 83       	std	Z+3, r26	; 0x03
   1ae3e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            lif_closedir(LIF);
            return(-1);
    }

    // Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1ae42:	a0 c0       	rjmp	.+320    	; 0x1af84 <lif_add_ascii_file_as_e010+0x238>
   1ae44:	68 01       	movw	r12, r16
   1ae46:	ff e4       	ldi	r31, 0x4F	; 79
   1ae48:	cf 0e       	add	r12, r31
   1ae4a:	d1 1c       	adc	r13, r1
   1ae4c:	4a e0       	ldi	r20, 0x0A	; 10
   1ae4e:	50 e0       	ldi	r21, 0x00	; 0
   1ae50:	b1 01       	movw	r22, r2
   1ae52:	c6 01       	movw	r24, r12
   1ae54:	0e 94 28 c3 	call	0x18650	; 0x18650 <lif_fixname>
    LIF->DIR.FileType = 0xe010;             // 10
   1ae58:	80 e1       	ldi	r24, 0x10	; 16
   1ae5a:	90 ee       	ldi	r25, 0xE0	; 224
   1ae5c:	f8 01       	movw	r30, r16
   1ae5e:	e6 5a       	subi	r30, 0xA6	; 166
   1ae60:	ff 4f       	sbci	r31, 0xFF	; 255
   1ae62:	91 83       	std	Z+1, r25	; 0x01
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1ae64:	80 83       	st	Z, r24
   1ae66:	ea ad       	ldd	r30, Y+58	; 0x3a
   1ae68:	fb ad       	ldd	r31, Y+59	; 0x3b
   1ae6a:	60 a5       	ldd	r22, Z+40	; 0x28
   1ae6c:	71 a5       	ldd	r23, Z+41	; 0x29
   1ae6e:	82 a5       	ldd	r24, Z+42	; 0x2a
   1ae70:	93 a5       	ldd	r25, Z+43	; 0x2b
   1ae72:	a8 01       	movw	r20, r16
   1ae74:	4c 59       	subi	r20, 0x9C	; 156
   1ae76:	5f 4f       	sbci	r21, 0xFF	; 255
   1ae78:	0e 94 6d c5 	call	0x18ada	; 0x18ada <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;            // 26
   1ae7c:	81 e0       	ldi	r24, 0x01	; 1
   1ae7e:	90 e8       	ldi	r25, 0x80	; 128
   1ae80:	f8 01       	movw	r30, r16
   1ae82:	e6 59       	subi	r30, 0x96	; 150
   1ae84:	ff 4f       	sbci	r31, 0xFF	; 255
   1ae86:	91 83       	std	Z+1, r25	; 0x01
    LIF->DIR.FileBytes = bytes;                 // 28
   1ae88:	80 83       	st	Z, r24
   1ae8a:	32 96       	adiw	r30, 0x02	; 2
   1ae8c:	91 82       	std	Z+1, r9	; 0x01
    LIF->DIR.SectorSize  = 0x100;           // 30
   1ae8e:	80 82       	st	Z, r8
   1ae90:	80 e0       	ldi	r24, 0x00	; 0
   1ae92:	91 e0       	ldi	r25, 0x01	; 1
   1ae94:	32 96       	adiw	r30, 0x02	; 2
   1ae96:	91 83       	std	Z+1, r25	; 0x01
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1ae98:	80 83       	st	Z, r24
   1ae9a:	58 01       	movw	r10, r16
   1ae9c:	fc e5       	ldi	r31, 0x5C	; 92
   1ae9e:	af 0e       	add	r10, r31
   1aea0:	b1 1c       	adc	r11, r1
   1aea2:	f5 01       	movw	r30, r10
   1aea4:	80 81       	ld	r24, Z
   1aea6:	91 81       	ldd	r25, Z+1	; 0x01
   1aea8:	a2 81       	ldd	r26, Z+2	; 0x02
   1aeaa:	b3 81       	ldd	r27, Z+3	; 0x03
   1aeac:	22 24       	eor	r2, r2
   1aeae:	38 2e       	mov	r3, r24
   1aeb0:	49 2e       	mov	r4, r25

    if(debuglevel & 0x400)
   1aeb2:	5a 2e       	mov	r5, r26
   1aeb4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1aeb8:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1aebc:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1aebe:	05 c0       	rjmp	.+10     	; 0x1aeca <lif_add_ascii_file_as_e010+0x17e>
   1aec0:	61 ea       	ldi	r22, 0xA1	; 161
   1aec2:	75 e1       	ldi	r23, 0x15	; 21
   1aec4:	c8 01       	movw	r24, r16
   1aec6:	0e 94 59 c6 	call	0x18cb2	; 0x18cb2 <lif_dump_vol>

    // Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1aeca:	97 01       	movw	r18, r14
   1aecc:	b2 01       	movw	r22, r4
   1aece:	a1 01       	movw	r20, r2
   1aed0:	c8 01       	movw	r24, r16
   1aed2:	34 de       	rcall	.-920    	; 0x1ab3c <lif_add_ascii_file_as_e010_wrapper>
   1aed4:	4b 01       	movw	r8, r22

    if(debuglevel & 0x400)
   1aed6:	7c 01       	movw	r14, r24
   1aed8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1aedc:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1aee0:	92 ff       	sbrs	r25, 2
    {
        printf("New Directory Information AFTER write\n");
   1aee2:	4a c0       	rjmp	.+148    	; 0x1af78 <lif_add_ascii_file_as_e010+0x22c>
   1aee4:	8b e9       	ldi	r24, 0x9B	; 155
   1aee6:	95 e3       	ldi	r25, 0x35	; 53
   1aee8:	a0 e0       	ldi	r26, 0x00	; 0
   1aeea:	ed b7       	in	r30, 0x3d	; 61
   1aeec:	fe b7       	in	r31, 0x3e	; 62
   1aeee:	81 83       	std	Z+1, r24	; 0x01
   1aef0:	92 83       	std	Z+2, r25	; 0x02
   1aef2:	a3 83       	std	Z+3, r26	; 0x03
   1aef4:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1aef8:	ed b7       	in	r30, 0x3d	; 61
   1aefa:	fe b7       	in	r31, 0x3e	; 62
   1aefc:	d5 82       	std	Z+5, r13	; 0x05
   1aefe:	c4 82       	std	Z+4, r12	; 0x04
   1af00:	84 e8       	ldi	r24, 0x84	; 132
   1af02:	95 e3       	ldi	r25, 0x35	; 53
   1af04:	a0 e0       	ldi	r26, 0x00	; 0
   1af06:	81 83       	std	Z+1, r24	; 0x01
   1af08:	92 83       	std	Z+2, r25	; 0x02
   1af0a:	a3 83       	std	Z+3, r26	; 0x03
   1af0c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1af10:	ed b7       	in	r30, 0x3d	; 61
   1af12:	fe b7       	in	r31, 0x3e	; 62
   1af14:	75 82       	std	Z+5, r7	; 0x05
   1af16:	64 82       	std	Z+4, r6	; 0x04
   1af18:	8d e6       	ldi	r24, 0x6D	; 109
   1af1a:	95 e3       	ldi	r25, 0x35	; 53
   1af1c:	a0 e0       	ldi	r26, 0x00	; 0
   1af1e:	81 83       	std	Z+1, r24	; 0x01
   1af20:	92 83       	std	Z+2, r25	; 0x02
   1af22:	a3 83       	std	Z+3, r26	; 0x03
   1af24:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1af28:	f5 01       	movw	r30, r10
   1af2a:	80 81       	ld	r24, Z
   1af2c:	91 81       	ldd	r25, Z+1	; 0x01
   1af2e:	a2 81       	ldd	r26, Z+2	; 0x02
   1af30:	b3 81       	ldd	r27, Z+3	; 0x03
   1af32:	ed b7       	in	r30, 0x3d	; 61
   1af34:	fe b7       	in	r31, 0x3e	; 62
   1af36:	84 83       	std	Z+4, r24	; 0x04
   1af38:	95 83       	std	Z+5, r25	; 0x05
   1af3a:	a6 83       	std	Z+6, r26	; 0x06
   1af3c:	b7 83       	std	Z+7, r27	; 0x07
   1af3e:	84 e5       	ldi	r24, 0x54	; 84
   1af40:	95 e3       	ldi	r25, 0x35	; 53
   1af42:	a0 e0       	ldi	r26, 0x00	; 0
   1af44:	81 83       	std	Z+1, r24	; 0x01
   1af46:	92 83       	std	Z+2, r25	; 0x02
   1af48:	a3 83       	std	Z+3, r26	; 0x03
   1af4a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1af4e:	f8 01       	movw	r30, r16
   1af50:	e0 5a       	subi	r30, 0xA0	; 160
   1af52:	ff 4f       	sbci	r31, 0xFF	; 255
   1af54:	80 81       	ld	r24, Z
   1af56:	91 81       	ldd	r25, Z+1	; 0x01
   1af58:	a2 81       	ldd	r26, Z+2	; 0x02
   1af5a:	b3 81       	ldd	r27, Z+3	; 0x03
   1af5c:	ed b7       	in	r30, 0x3d	; 61
   1af5e:	fe b7       	in	r31, 0x3e	; 62
   1af60:	84 83       	std	Z+4, r24	; 0x04
   1af62:	95 83       	std	Z+5, r25	; 0x05
   1af64:	a6 83       	std	Z+6, r26	; 0x06
   1af66:	b7 83       	std	Z+7, r27	; 0x07
   1af68:	8b e3       	ldi	r24, 0x3B	; 59
   1af6a:	95 e3       	ldi	r25, 0x35	; 53
   1af6c:	a0 e0       	ldi	r26, 0x00	; 0
   1af6e:	81 83       	std	Z+1, r24	; 0x01
   1af70:	92 83       	std	Z+2, r25	; 0x02
   1af72:	a3 83       	std	Z+3, r26	; 0x03
   1af74:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    }

    // Write directory record
    // Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1af78:	b3 01       	movw	r22, r6
   1af7a:	c8 01       	movw	r24, r16
   1af7c:	0e 94 98 cb 	call	0x19730	; 0x19730 <lif_writedirindex>
   1af80:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1af82:	21 f4       	brne	.+8      	; 0x1af8c <lif_add_ascii_file_as_e010+0x240>
   1af84:	c8 01       	movw	r24, r16
   1af86:	0e 94 a3 ca 	call	0x19546	; 0x19546 <lif_close_volume>
   1af8a:	14 c0       	rjmp	.+40     	; 0x1afb4 <lif_add_ascii_file_as_e010+0x268>
   1af8c:	c8 01       	movw	r24, r16
   1af8e:	0e 94 a3 ca 	call	0x19546	; 0x19546 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1af92:	ed b7       	in	r30, 0x3d	; 61
   1af94:	fe b7       	in	r31, 0x3e	; 62
   1af96:	84 82       	std	Z+4, r8	; 0x04
   1af98:	95 82       	std	Z+5, r9	; 0x05
   1af9a:	e6 82       	std	Z+6, r14	; 0x06
   1af9c:	f7 82       	std	Z+7, r15	; 0x07
   1af9e:	8d e2       	ldi	r24, 0x2D	; 45
   1afa0:	95 e3       	ldi	r25, 0x35	; 53
   1afa2:	a0 e0       	ldi	r26, 0x00	; 0
   1afa4:	81 83       	std	Z+1, r24	; 0x01
   1afa6:	92 83       	std	Z+2, r25	; 0x02
   1afa8:	a3 83       	std	Z+3, r26	; 0x03
   1afaa:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

    // Return file size
    return(bytes);
   1afae:	b4 01       	movw	r22, r8
   1afb0:	c7 01       	movw	r24, r14
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1); 
   1afb2:	04 c0       	rjmp	.+8      	; 0x1afbc <lif_add_ascii_file_as_e010+0x270>
   1afb4:	6f ef       	ldi	r22, 0xFF	; 255
   1afb6:	7f ef       	ldi	r23, 0xFF	; 255
   1afb8:	8f ef       	ldi	r24, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

    // Return file size
    return(bytes);
}
   1afba:	9f ef       	ldi	r25, 0xFF	; 255
   1afbc:	eb 96       	adiw	r28, 0x3b	; 59
   1afbe:	e2 e1       	ldi	r30, 0x12	; 18
   1afc0:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

0001afc4 <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1afc4:	a7 e3       	ldi	r26, 0x37	; 55
   1afc6:	b2 e0       	ldi	r27, 0x02	; 2
   1afc8:	e8 ee       	ldi	r30, 0xE8	; 232
   1afca:	f7 ed       	ldi	r31, 0xD7	; 215
   1afcc:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
   1afd0:	7c 01       	movw	r14, r24
   1afd2:	8b 01       	movw	r16, r22
   1afd4:	ca 5d       	subi	r28, 0xDA	; 218
   1afd6:	dd 4f       	sbci	r29, 0xFD	; 253
   1afd8:	59 83       	std	Y+1, r21	; 0x01
   1afda:	48 83       	st	Y, r20
   1afdc:	c6 52       	subi	r28, 0x26	; 38
   1afde:	d2 40       	sbci	r29, 0x02	; 2
    uint8_t buf[LIF_SECTOR_SIZE+4];
    // Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];


    LIF = lif_open_volume(lifimagename,"r");
   1afe0:	62 e6       	ldi	r22, 0x62	; 98
   1afe2:	72 e0       	ldi	r23, 0x02	; 2
   1afe4:	6b d9       	rcall	.-3370   	; 0x1a2bc <lif_open_volume>
   1afe6:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1afe8:	00 97       	sbiw	r24, 0x00	; 0
   1afea:	69 f4       	brne	.+26     	; 0x1b006 <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1afec:	ed b7       	in	r30, 0x3d	; 61
   1afee:	fe b7       	in	r31, 0x3e	; 62
   1aff0:	f5 82       	std	Z+5, r15	; 0x05
   1aff2:	e4 82       	std	Z+4, r14	; 0x04
   1aff4:	85 e1       	ldi	r24, 0x15	; 21
   1aff6:	95 e3       	ldi	r25, 0x35	; 53
   1aff8:	a0 e0       	ldi	r26, 0x00	; 0
   1affa:	81 83       	std	Z+1, r24	; 0x01
   1affc:	92 83       	std	Z+2, r25	; 0x02
   1affe:	a3 83       	std	Z+3, r26	; 0x03
   1b000:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1b004:	13 c0       	rjmp	.+38     	; 0x1b02c <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b006:	b8 01       	movw	r22, r16
   1b008:	28 dc       	rcall	.-1968   	; 0x1a85a <lif_find_file>
    if(index == -1)
   1b00a:	01 96       	adiw	r24, 0x01	; 1
   1b00c:	91 f4       	brne	.+36     	; 0x1b032 <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1b00e:	ed b7       	in	r30, 0x3d	; 61
   1b010:	fe b7       	in	r31, 0x3e	; 62
   1b012:	15 83       	std	Z+5, r17	; 0x05
   1b014:	04 83       	std	Z+4, r16	; 0x04
   1b016:	8e ef       	ldi	r24, 0xFE	; 254
   1b018:	94 e3       	ldi	r25, 0x34	; 52
   1b01a:	a0 e0       	ldi	r26, 0x00	; 0
   1b01c:	81 83       	std	Z+1, r24	; 0x01
   1b01e:	92 83       	std	Z+2, r25	; 0x02
   1b020:	a3 83       	std	Z+3, r26	; 0x03
   1b022:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b026:	c6 01       	movw	r24, r12
   1b028:	0e 94 a3 ca 	call	0x19546	; 0x19546 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b02c:	80 e0       	ldi	r24, 0x00	; 0
   1b02e:	90 e0       	ldi	r25, 0x00	; 0
   1b030:	73 c2       	rjmp	.+1254   	; 0x1b518 <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1b032:	f6 01       	movw	r30, r12
   1b034:	e6 5a       	subi	r30, 0xA6	; 166
   1b036:	ff 4f       	sbci	r31, 0xFF	; 255
   1b038:	80 81       	ld	r24, Z
   1b03a:	91 81       	ldd	r25, Z+1	; 0x01
   1b03c:	9c 01       	movw	r18, r24
   1b03e:	2c 7f       	andi	r18, 0xFC	; 252
   1b040:	20 31       	cpi	r18, 0x10	; 16
   1b042:	30 4e       	sbci	r19, 0xE0	; 224
   1b044:	a9 f0       	breq	.+42     	; 0x1b070 <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1b046:	ed b7       	in	r30, 0x3d	; 61
   1b048:	fe b7       	in	r31, 0x3e	; 62
   1b04a:	97 83       	std	Z+7, r25	; 0x07
   1b04c:	86 83       	std	Z+6, r24	; 0x06
   1b04e:	ca 5d       	subi	r28, 0xDA	; 218
   1b050:	dd 4f       	sbci	r29, 0xFD	; 253
   1b052:	28 81       	ld	r18, Y
   1b054:	39 81       	ldd	r19, Y+1	; 0x01
   1b056:	c6 52       	subi	r28, 0x26	; 38
   1b058:	d2 40       	sbci	r29, 0x02	; 2
   1b05a:	35 83       	std	Z+5, r19	; 0x05
   1b05c:	24 83       	std	Z+4, r18	; 0x04
   1b05e:	86 ec       	ldi	r24, 0xC6	; 198
   1b060:	94 e3       	ldi	r25, 0x34	; 52
   1b062:	a0 e0       	ldi	r26, 0x00	; 0
   1b064:	81 83       	std	Z+1, r24	; 0x01
   1b066:	92 83       	std	Z+2, r25	; 0x02
   1b068:	a3 83       	std	Z+3, r26	; 0x03
   1b06a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1b06e:	db cf       	rjmp	.-74     	; 0x1b026 <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1b070:	f6 01       	movw	r30, r12
   1b072:	e4 5a       	subi	r30, 0xA4	; 164
   1b074:	ff 4f       	sbci	r31, 0xFF	; 255
   1b076:	80 80       	ld	r8, Z
   1b078:	91 80       	ldd	r9, Z+1	; 0x01
   1b07a:	a2 80       	ldd	r10, Z+2	; 0x02
   1b07c:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1b07e:	34 96       	adiw	r30, 0x04	; 4
   1b080:	80 81       	ld	r24, Z
   1b082:	91 81       	ldd	r25, Z+1	; 0x01
   1b084:	a2 81       	ldd	r26, Z+2	; 0x02
   1b086:	b3 81       	ldd	r27, Z+3	; 0x03
   1b088:	a5 01       	movw	r20, r10
   1b08a:	94 01       	movw	r18, r8
   1b08c:	28 0f       	add	r18, r24
   1b08e:	39 1f       	adc	r19, r25
   1b090:	4a 1f       	adc	r20, r26
   1b092:	5b 1f       	adc	r21, r27
   1b094:	c4 5d       	subi	r28, 0xD4	; 212
   1b096:	dd 4f       	sbci	r29, 0xFD	; 253
   1b098:	28 83       	st	Y, r18
   1b09a:	39 83       	std	Y+1, r19	; 0x01
   1b09c:	4a 83       	std	Y+2, r20	; 0x02
   1b09e:	5b 83       	std	Y+3, r21	; 0x03
   1b0a0:	cc 52       	subi	r28, 0x2C	; 44
   1b0a2:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1b0a4:	c6 01       	movw	r24, r12
   1b0a6:	8c 59       	subi	r24, 0x9C	; 156
   1b0a8:	9f 4f       	sbci	r25, 0xFF	; 255
   1b0aa:	0e 94 af c5 	call	0x18b5e	; 0x18b5e <lif_lifbcd2time>
   1b0ae:	c8 5d       	subi	r28, 0xD8	; 216
   1b0b0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0b2:	68 83       	st	Y, r22
   1b0b4:	79 83       	std	Y+1, r23	; 0x01
   1b0b6:	8a 83       	std	Y+2, r24	; 0x02
   1b0b8:	9b 83       	std	Y+3, r25	; 0x03
   1b0ba:	c8 52       	subi	r28, 0x28	; 40
   1b0bc:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1b0be:	ba 2d       	mov	r27, r10
   1b0c0:	a9 2d       	mov	r26, r9
   1b0c2:	98 2d       	mov	r25, r8
   1b0c4:	88 27       	eor	r24, r24
   1b0c6:	c2 5e       	subi	r28, 0xE2	; 226
   1b0c8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0ca:	88 83       	st	Y, r24
   1b0cc:	99 83       	std	Y+1, r25	; 0x01
   1b0ce:	aa 83       	std	Y+2, r26	; 0x02
   1b0d0:	bb 83       	std	Y+3, r27	; 0x03
   1b0d2:	ce 51       	subi	r28, 0x1E	; 30
   1b0d4:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1b0d6:	6c e2       	ldi	r22, 0x2C	; 44
   1b0d8:	78 e0       	ldi	r23, 0x08	; 8
   1b0da:	ca 5d       	subi	r28, 0xDA	; 218
   1b0dc:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0de:	88 81       	ld	r24, Y
   1b0e0:	99 81       	ldd	r25, Y+1	; 0x01
   1b0e2:	c6 52       	subi	r28, 0x26	; 38
   1b0e4:	d2 40       	sbci	r29, 0x02	; 2
   1b0e6:	0e 94 53 c1 	call	0x182a6	; 0x182a6 <lif_open>
   1b0ea:	cc 5d       	subi	r28, 0xDC	; 220
   1b0ec:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0ee:	99 83       	std	Y+1, r25	; 0x01
   1b0f0:	88 83       	st	Y, r24
   1b0f2:	c4 52       	subi	r28, 0x24	; 36
   1b0f4:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1b0f6:	89 2b       	or	r24, r25
   1b0f8:	09 f4       	brne	.+2      	; 0x1b0fc <lif_extract_e010_as_ascii+0x138>
   1b0fa:	95 cf       	rjmp	.-214    	; 0x1b026 <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1b0fc:	ca 5d       	subi	r28, 0xDA	; 218
   1b0fe:	dd 4f       	sbci	r29, 0xFD	; 253
   1b100:	28 81       	ld	r18, Y
   1b102:	39 81       	ldd	r19, Y+1	; 0x01
   1b104:	c6 52       	subi	r28, 0x26	; 38
   1b106:	d2 40       	sbci	r29, 0x02	; 2
   1b108:	ed b7       	in	r30, 0x3d	; 61
   1b10a:	fe b7       	in	r31, 0x3e	; 62
   1b10c:	35 83       	std	Z+5, r19	; 0x05
   1b10e:	24 83       	std	Z+4, r18	; 0x04
   1b110:	86 eb       	ldi	r24, 0xB6	; 182
   1b112:	94 e3       	ldi	r25, 0x34	; 52
   1b114:	a0 e0       	ldi	r26, 0x00	; 0
   1b116:	81 83       	std	Z+1, r24	; 0x01
   1b118:	92 83       	std	Z+2, r25	; 0x02
   1b11a:	a3 83       	std	Z+3, r26	; 0x03
   1b11c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

    bytes = 0;
    wind = 0;
   1b120:	21 2c       	mov	r2, r1
   1b122:	31 2c       	mov	r3, r1
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1b124:	ce 5d       	subi	r28, 0xDE	; 222
   1b126:	dd 4f       	sbci	r29, 0xFD	; 253
   1b128:	19 82       	std	Y+1, r1	; 0x01
   1b12a:	18 82       	st	Y, r1
   1b12c:	c2 52       	subi	r28, 0x22	; 34
   1b12e:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
   1b130:	ee 24       	eor	r14, r14
   1b132:	e3 94       	inc	r14
   1b134:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1b136:	41 2c       	mov	r4, r1
   1b138:	51 2c       	mov	r5, r1
   1b13a:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1b13c:	85 ef       	ldi	r24, 0xF5	; 245
   1b13e:	93 e3       	ldi	r25, 0x33	; 51
   1b140:	9c 01       	movw	r18, r24
   1b142:	40 e0       	ldi	r20, 0x00	; 0
   1b144:	ce 5c       	subi	r28, 0xCE	; 206
   1b146:	dd 4f       	sbci	r29, 0xFD	; 253
   1b148:	28 83       	st	Y, r18
   1b14a:	39 83       	std	Y+1, r19	; 0x01
   1b14c:	4a 83       	std	Y+2, r20	; 0x02
   1b14e:	c2 53       	subi	r28, 0x32	; 50
   1b150:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b152:	83 e0       	ldi	r24, 0x03	; 3
   1b154:	94 e3       	ldi	r25, 0x34	; 52
   1b156:	9c 01       	movw	r18, r24
   1b158:	40 e0       	ldi	r20, 0x00	; 0
   1b15a:	cb 5c       	subi	r28, 0xCB	; 203
   1b15c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b15e:	28 83       	st	Y, r18
   1b160:	39 83       	std	Y+1, r19	; 0x01
   1b162:	4a 83       	std	Y+2, r20	; 0x02
   1b164:	c5 53       	subi	r28, 0x35	; 53
   1b166:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1b168:	c2 5e       	subi	r28, 0xE2	; 226
   1b16a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b16c:	28 81       	ld	r18, Y
   1b16e:	39 81       	ldd	r19, Y+1	; 0x01
   1b170:	4a 81       	ldd	r20, Y+2	; 0x02
   1b172:	5b 81       	ldd	r21, Y+3	; 0x03
   1b174:	ce 51       	subi	r28, 0x1E	; 30
   1b176:	d2 40       	sbci	r29, 0x02	; 2
   1b178:	bb 27       	eor	r27, r27
   1b17a:	a5 2f       	mov	r26, r21
   1b17c:	94 2f       	mov	r25, r20
   1b17e:	83 2f       	mov	r24, r19
   1b180:	c4 5d       	subi	r28, 0xD4	; 212
   1b182:	dd 4f       	sbci	r29, 0xFD	; 253
   1b184:	28 81       	ld	r18, Y
   1b186:	39 81       	ldd	r19, Y+1	; 0x01
   1b188:	4a 81       	ldd	r20, Y+2	; 0x02
   1b18a:	5b 81       	ldd	r21, Y+3	; 0x03
   1b18c:	cc 52       	subi	r28, 0x2C	; 44
   1b18e:	d2 40       	sbci	r29, 0x02	; 2
   1b190:	28 17       	cp	r18, r24
   1b192:	39 07       	cpc	r19, r25
   1b194:	4a 07       	cpc	r20, r26
   1b196:	5b 07       	cpc	r21, r27
   1b198:	08 f4       	brcc	.+2      	; 0x1b19c <lif_extract_e010_as_ascii+0x1d8>
   1b19a:	51 c1       	rjmp	.+674    	; 0x1b43e <lif_extract_e010_as_ascii+0x47a>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b19c:	00 e0       	ldi	r16, 0x00	; 0
   1b19e:	11 e0       	ldi	r17, 0x01	; 1
   1b1a0:	c2 5e       	subi	r28, 0xE2	; 226
   1b1a2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1a4:	28 81       	ld	r18, Y
   1b1a6:	39 81       	ldd	r19, Y+1	; 0x01
   1b1a8:	4a 81       	ldd	r20, Y+2	; 0x02
   1b1aa:	5b 81       	ldd	r21, Y+3	; 0x03
   1b1ac:	ce 51       	subi	r28, 0x1E	; 30
   1b1ae:	d2 40       	sbci	r29, 0x02	; 2
   1b1b0:	be 01       	movw	r22, r28
   1b1b2:	60 5f       	subi	r22, 0xF0	; 240
   1b1b4:	7e 4f       	sbci	r23, 0xFE	; 254
   1b1b6:	c6 01       	movw	r24, r12
   1b1b8:	0e 94 d7 c1 	call	0x183ae	; 0x183ae <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b1bc:	6f 3f       	cpi	r22, 0xFF	; 255
   1b1be:	71 05       	cpc	r23, r1
   1b1c0:	09 f0       	breq	.+2      	; 0x1b1c4 <lif_extract_e010_as_ascii+0x200>
   1b1c2:	0c f4       	brge	.+2      	; 0x1b1c6 <lif_extract_e010_as_ascii+0x202>
   1b1c4:	3a c1       	rjmp	.+628    	; 0x1b43a <lif_extract_e010_as_ascii+0x476>
   1b1c6:	00 e0       	ldi	r16, 0x00	; 0
   1b1c8:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b1ca:	ce 5d       	subi	r28, 0xDE	; 222
   1b1cc:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1ce:	88 81       	ld	r24, Y
   1b1d0:	99 81       	ldd	r25, Y+1	; 0x01
   1b1d2:	c2 52       	subi	r28, 0x22	; 34
   1b1d4:	d2 40       	sbci	r29, 0x02	; 2
   1b1d6:	89 2b       	or	r24, r25
   1b1d8:	09 f0       	breq	.+2      	; 0x1b1dc <lif_extract_e010_as_ascii+0x218>
   1b1da:	1b c1       	rjmp	.+566    	; 0x1b412 <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1b1dc:	e0 e1       	ldi	r30, 0x10	; 16
   1b1de:	f1 e0       	ldi	r31, 0x01	; 1
   1b1e0:	ec 0f       	add	r30, r28
   1b1e2:	fd 1f       	adc	r31, r29
   1b1e4:	e0 0f       	add	r30, r16
   1b1e6:	f1 1f       	adc	r31, r17
   1b1e8:	80 81       	ld	r24, Z
   1b1ea:	98 2f       	mov	r25, r24
   1b1ec:	9f 7e       	andi	r25, 0xEF	; 239
   1b1ee:	9f 3c       	cpi	r25, 0xCF	; 207
   1b1f0:	11 f0       	breq	.+4      	; 0x1b1f6 <lif_extract_e010_as_ascii+0x232>
   1b1f2:	8f 36       	cpi	r24, 0x6F	; 111
   1b1f4:	c9 f5       	brne	.+114    	; 0x1b268 <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1b1f6:	e0 e1       	ldi	r30, 0x10	; 16
   1b1f8:	f1 e0       	ldi	r31, 0x01	; 1
   1b1fa:	ec 0f       	add	r30, r28
   1b1fc:	fd 1f       	adc	r31, r29
   1b1fe:	e0 0f       	add	r30, r16
   1b200:	f1 1f       	adc	r31, r17
   1b202:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8); 
   1b204:	f8 01       	movw	r30, r16
   1b206:	32 96       	adiw	r30, 0x02	; 2
   1b208:	40 e1       	ldi	r20, 0x10	; 16
   1b20a:	51 e0       	ldi	r21, 0x01	; 1
   1b20c:	4c 0f       	add	r20, r28
   1b20e:	5d 1f       	adc	r21, r29
   1b210:	e4 0f       	add	r30, r20
   1b212:	f5 1f       	adc	r31, r21
   1b214:	0d 5f       	subi	r16, 0xFD	; 253
   1b216:	1f 4f       	sbci	r17, 0xFF	; 255
   1b218:	80 81       	ld	r24, Z
   1b21a:	b1 2c       	mov	r11, r1
   1b21c:	b8 2a       	or	r11, r24
                // EOF ?
                if(len == 0)
   1b21e:	a1 14       	cp	r10, r1
   1b220:	b1 04       	cpc	r11, r1
   1b222:	09 f4       	brne	.+2      	; 0x1b226 <lif_extract_e010_as_ascii+0x262>
   1b224:	ee c0       	rjmp	.+476    	; 0x1b402 <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1b226:	5f ef       	ldi	r21, 0xFF	; 255
   1b228:	a5 16       	cp	r10, r21
   1b22a:	b1 04       	cpc	r11, r1
   1b22c:	09 f0       	breq	.+2      	; 0x1b230 <lif_extract_e010_as_ascii+0x26c>
   1b22e:	7c f4       	brge	.+30     	; 0x1b24e <lif_extract_e010_as_ascii+0x28a>
   1b230:	c4 5e       	subi	r28, 0xE4	; 228
   1b232:	dd 4f       	sbci	r29, 0xFD	; 253
   1b234:	19 82       	std	Y+1, r1	; 0x01
   1b236:	18 82       	st	Y, r1
   1b238:	cc 51       	subi	r28, 0x1C	; 28
   1b23a:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1b23c:	c5 01       	movw	r24, r10
   1b23e:	01 97       	sbiw	r24, 0x01	; 1
   1b240:	c0 5d       	subi	r28, 0xD0	; 208
   1b242:	dd 4f       	sbci	r29, 0xFD	; 253
   1b244:	99 83       	std	Y+1, r25	; 0x01
   1b246:	88 83       	st	Y, r24
   1b248:	c0 53       	subi	r28, 0x30	; 48
   1b24a:	d2 40       	sbci	r29, 0x02	; 2
   1b24c:	68 c0       	rjmp	.+208    	; 0x1b31e <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1b24e:	ed b7       	in	r30, 0x3d	; 61
   1b250:	fe b7       	in	r31, 0x3e	; 62
   1b252:	b5 82       	std	Z+5, r11	; 0x05
   1b254:	a4 82       	std	Z+4, r10	; 0x04
   1b256:	81 e8       	ldi	r24, 0x81	; 129
   1b258:	94 e3       	ldi	r25, 0x34	; 52
   1b25a:	a0 e0       	ldi	r26, 0x00	; 0
   1b25c:	81 83       	std	Z+1, r24	; 0x01
   1b25e:	92 83       	std	Z+2, r25	; 0x02
   1b260:	a3 83       	std	Z+3, r26	; 0x03
   1b262:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1b266:	1e c0       	rjmp	.+60     	; 0x1b2a4 <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1b268:	8f 3e       	cpi	r24, 0xEF	; 239
   1b26a:	09 f4       	brne	.+2      	; 0x1b26e <lif_extract_e010_as_ascii+0x2aa>
   1b26c:	d2 c0       	rjmp	.+420    	; 0x1b412 <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1b26e:	ed b7       	in	r30, 0x3d	; 61
   1b270:	fe b7       	in	r31, 0x3e	; 62
   1b272:	13 87       	std	Z+11, r17	; 0x0b
   1b274:	02 87       	std	Z+10, r16	; 0x0a
   1b276:	c2 5e       	subi	r28, 0xE2	; 226
   1b278:	dd 4f       	sbci	r29, 0xFD	; 253
   1b27a:	28 81       	ld	r18, Y
   1b27c:	39 81       	ldd	r19, Y+1	; 0x01
   1b27e:	4a 81       	ldd	r20, Y+2	; 0x02
   1b280:	5b 81       	ldd	r21, Y+3	; 0x03
   1b282:	ce 51       	subi	r28, 0x1E	; 30
   1b284:	d2 40       	sbci	r29, 0x02	; 2
   1b286:	26 83       	std	Z+6, r18	; 0x06
   1b288:	37 83       	std	Z+7, r19	; 0x07
   1b28a:	40 87       	std	Z+8, r20	; 0x08
   1b28c:	51 87       	std	Z+9, r21	; 0x09
   1b28e:	90 e0       	ldi	r25, 0x00	; 0
   1b290:	95 83       	std	Z+5, r25	; 0x05
   1b292:	84 83       	std	Z+4, r24	; 0x04
   1b294:	8b e2       	ldi	r24, 0x2B	; 43
   1b296:	94 e3       	ldi	r25, 0x34	; 52
   1b298:	a0 e0       	ldi	r26, 0x00	; 0
   1b29a:	81 83       	std	Z+1, r24	; 0x01
   1b29c:	92 83       	std	Z+2, r25	; 0x02
   1b29e:	a3 83       	std	Z+3, r26	; 0x03
   1b2a0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
                status = 0;
                done = 1;
   1b2a4:	21 e0       	ldi	r18, 0x01	; 1
   1b2a6:	30 e0       	ldi	r19, 0x00	; 0
   1b2a8:	ce 5d       	subi	r28, 0xDE	; 222
   1b2aa:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2ac:	39 83       	std	Y+1, r19	; 0x01
   1b2ae:	28 83       	st	Y, r18
   1b2b0:	c2 52       	subi	r28, 0x22	; 34
   1b2b2:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1b2b4:	e1 2c       	mov	r14, r1
   1b2b6:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1b2b8:	ac c0       	rjmp	.+344    	; 0x1b412 <lif_extract_e010_as_ascii+0x44e>
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b2ba:	0f 3f       	cpi	r16, 0xFF	; 255
   1b2bc:	11 05       	cpc	r17, r1
   1b2be:	11 f0       	breq	.+4      	; 0x1b2c4 <lif_extract_e010_as_ascii+0x300>
   1b2c0:	0c f0       	brlt	.+2      	; 0x1b2c4 <lif_extract_e010_as_ascii+0x300>
   1b2c2:	a7 c0       	rjmp	.+334    	; 0x1b412 <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b2c4:	e0 e1       	ldi	r30, 0x10	; 16
   1b2c6:	f1 e0       	ldi	r31, 0x01	; 1
   1b2c8:	ec 0f       	add	r30, r28
   1b2ca:	fd 1f       	adc	r31, r29
   1b2cc:	e0 0f       	add	r30, r16
   1b2ce:	f1 1f       	adc	r31, r17
   1b2d0:	20 81       	ld	r18, Z
   1b2d2:	a1 01       	movw	r20, r2
   1b2d4:	4f 5f       	subi	r20, 0xFF	; 255
   1b2d6:	5f 4f       	sbci	r21, 0xFF	; 255
   1b2d8:	4a 01       	movw	r8, r20
   1b2da:	2d 30       	cpi	r18, 0x0D	; 13
   1b2dc:	51 f1       	breq	.+84     	; 0x1b332 <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1b2de:	98 2d       	mov	r25, r8
   1b2e0:	89 2d       	mov	r24, r9
   1b2e2:	0f 5f       	subi	r16, 0xFF	; 255
   1b2e4:	1f 4f       	sbci	r17, 0xFF	; 255
   1b2e6:	ec e0       	ldi	r30, 0x0C	; 12
   1b2e8:	f0 e0       	ldi	r31, 0x00	; 0
   1b2ea:	ec 0f       	add	r30, r28
   1b2ec:	fd 1f       	adc	r31, r29
   1b2ee:	e2 0d       	add	r30, r2
   1b2f0:	f3 1d       	adc	r31, r3
   1b2f2:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1b2f4:	ef ef       	ldi	r30, 0xFF	; 255
   1b2f6:	8e 16       	cp	r8, r30
   1b2f8:	91 04       	cpc	r9, r1
   1b2fa:	09 f0       	breq	.+2      	; 0x1b2fe <lif_extract_e010_as_ascii+0x33a>
   1b2fc:	ac f5       	brge	.+106    	; 0x1b368 <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b2fe:	c4 5e       	subi	r28, 0xE4	; 228
   1b300:	dd 4f       	sbci	r29, 0xFD	; 253
   1b302:	28 81       	ld	r18, Y
   1b304:	39 81       	ldd	r19, Y+1	; 0x01
   1b306:	cc 51       	subi	r28, 0x1C	; 28
   1b308:	d2 40       	sbci	r29, 0x02	; 2
   1b30a:	2f 5f       	subi	r18, 0xFF	; 255
   1b30c:	3f 4f       	sbci	r19, 0xFF	; 255
   1b30e:	c4 5e       	subi	r28, 0xE4	; 228
   1b310:	dd 4f       	sbci	r29, 0xFD	; 253
   1b312:	39 83       	std	Y+1, r19	; 0x01
   1b314:	28 83       	st	Y, r18
   1b316:	cc 51       	subi	r28, 0x1C	; 28
   1b318:	d2 40       	sbci	r29, 0x02	; 2
   1b31a:	29 2e       	mov	r2, r25
   1b31c:	38 2e       	mov	r3, r24
   1b31e:	c4 5e       	subi	r28, 0xE4	; 228
   1b320:	dd 4f       	sbci	r29, 0xFD	; 253
   1b322:	48 81       	ld	r20, Y
   1b324:	59 81       	ldd	r21, Y+1	; 0x01
   1b326:	cc 51       	subi	r28, 0x1C	; 28
   1b328:	d2 40       	sbci	r29, 0x02	; 2
   1b32a:	4a 15       	cp	r20, r10
   1b32c:	5b 05       	cpc	r21, r11
   1b32e:	2c f2       	brlt	.-118    	; 0x1b2ba <lif_extract_e010_as_ascii+0x2f6>
   1b330:	62 c0       	rjmp	.+196    	; 0x1b3f6 <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b332:	c4 5e       	subi	r28, 0xE4	; 228
   1b334:	dd 4f       	sbci	r29, 0xFD	; 253
   1b336:	88 81       	ld	r24, Y
   1b338:	99 81       	ldd	r25, Y+1	; 0x01
   1b33a:	cc 51       	subi	r28, 0x1C	; 28
   1b33c:	d2 40       	sbci	r29, 0x02	; 2
   1b33e:	c0 5d       	subi	r28, 0xD0	; 208
   1b340:	dd 4f       	sbci	r29, 0xFD	; 253
   1b342:	a8 81       	ld	r26, Y
   1b344:	b9 81       	ldd	r27, Y+1	; 0x01
   1b346:	c0 53       	subi	r28, 0x30	; 48
   1b348:	d2 40       	sbci	r29, 0x02	; 2
   1b34a:	8a 17       	cp	r24, r26
   1b34c:	9b 07       	cpc	r25, r27
   1b34e:	39 f6       	brne	.-114    	; 0x1b2de <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1b350:	ec e0       	ldi	r30, 0x0C	; 12
   1b352:	f0 e0       	ldi	r31, 0x00	; 0
   1b354:	ec 0f       	add	r30, r28
   1b356:	fd 1f       	adc	r31, r29
   1b358:	e2 0d       	add	r30, r2
   1b35a:	f3 1d       	adc	r31, r3
   1b35c:	ba e0       	ldi	r27, 0x0A	; 10
   1b35e:	b0 83       	st	Z, r27
                    ++ind;
   1b360:	0f 5f       	subi	r16, 0xFF	; 255
   1b362:	1f 4f       	sbci	r17, 0xFF	; 255
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1b364:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1b366:	47 c0       	rjmp	.+142    	; 0x1b3f6 <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1b368:	cc 5d       	subi	r28, 0xDC	; 220
   1b36a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b36c:	28 81       	ld	r18, Y
   1b36e:	39 81       	ldd	r19, Y+1	; 0x01
   1b370:	c4 52       	subi	r28, 0x24	; 36
   1b372:	d2 40       	sbci	r29, 0x02	; 2
   1b374:	a4 01       	movw	r20, r8
   1b376:	61 e0       	ldi	r22, 0x01	; 1
   1b378:	70 e0       	ldi	r23, 0x00	; 0
   1b37a:	ce 01       	movw	r24, r28
   1b37c:	0c 96       	adiw	r24, 0x0c	; 12
   1b37e:	0e 94 5a 7d 	call	0xfab4	; 0xfab4 <fwrite>
                    if(size < wind)
   1b382:	88 15       	cp	r24, r8
   1b384:	99 05       	cpc	r25, r9
   1b386:	d4 f4       	brge	.+52     	; 0x1b3bc <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b388:	cb 5c       	subi	r28, 0xCB	; 203
   1b38a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b38c:	28 81       	ld	r18, Y
   1b38e:	39 81       	ldd	r19, Y+1	; 0x01
   1b390:	4a 81       	ldd	r20, Y+2	; 0x02
   1b392:	c5 53       	subi	r28, 0x35	; 53
   1b394:	d2 40       	sbci	r29, 0x02	; 2
   1b396:	ed b7       	in	r30, 0x3d	; 61
   1b398:	fe b7       	in	r31, 0x3e	; 62
   1b39a:	21 83       	std	Z+1, r18	; 0x01
   1b39c:	32 83       	std	Z+2, r19	; 0x02
   1b39e:	43 83       	std	Z+3, r20	; 0x03
   1b3a0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1b3a4:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1b3a6:	21 e0       	ldi	r18, 0x01	; 1
   1b3a8:	30 e0       	ldi	r19, 0x00	; 0
   1b3aa:	ce 5d       	subi	r28, 0xDE	; 222
   1b3ac:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3ae:	39 83       	std	Y+1, r19	; 0x01
   1b3b0:	28 83       	st	Y, r18
   1b3b2:	c2 52       	subi	r28, 0x22	; 34
   1b3b4:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1b3b6:	e1 2c       	mov	r14, r1
   1b3b8:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1b3ba:	1d c0       	rjmp	.+58     	; 0x1b3f6 <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1b3bc:	09 2e       	mov	r0, r25
   1b3be:	00 0c       	add	r0, r0
   1b3c0:	aa 0b       	sbc	r26, r26
   1b3c2:	bb 0b       	sbc	r27, r27
   1b3c4:	48 0e       	add	r4, r24
   1b3c6:	59 1e       	adc	r5, r25
   1b3c8:	6a 1e       	adc	r6, r26
   1b3ca:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1b3cc:	ed b7       	in	r30, 0x3d	; 61
   1b3ce:	fe b7       	in	r31, 0x3e	; 62
   1b3d0:	44 82       	std	Z+4, r4	; 0x04
   1b3d2:	55 82       	std	Z+5, r5	; 0x05
   1b3d4:	66 82       	std	Z+6, r6	; 0x06
   1b3d6:	77 82       	std	Z+7, r7	; 0x07
   1b3d8:	ce 5c       	subi	r28, 0xCE	; 206
   1b3da:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3dc:	28 81       	ld	r18, Y
   1b3de:	39 81       	ldd	r19, Y+1	; 0x01
   1b3e0:	4a 81       	ldd	r20, Y+2	; 0x02
   1b3e2:	c2 53       	subi	r28, 0x32	; 50
   1b3e4:	d2 40       	sbci	r29, 0x02	; 2
   1b3e6:	21 83       	std	Z+1, r18	; 0x01
   1b3e8:	32 83       	std	Z+2, r19	; 0x02
   1b3ea:	43 83       	std	Z+3, r20	; 0x03
   1b3ec:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
                    wind = 0;
   1b3f0:	90 e0       	ldi	r25, 0x00	; 0
   1b3f2:	80 e0       	ldi	r24, 0x00	; 0
   1b3f4:	84 cf       	rjmp	.-248    	; 0x1b2fe <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b3f6:	0f 3f       	cpi	r16, 0xFF	; 255
   1b3f8:	11 05       	cpc	r17, r1
   1b3fa:	09 f0       	breq	.+2      	; 0x1b3fe <lif_extract_e010_as_ascii+0x43a>
   1b3fc:	0c f4       	brge	.+2      	; 0x1b400 <lif_extract_e010_as_ascii+0x43c>
   1b3fe:	e5 ce       	rjmp	.-566    	; 0x1b1ca <lif_extract_e010_as_ascii+0x206>
   1b400:	08 c0       	rjmp	.+16     	; 0x1b412 <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8); 
                // EOF ?
                if(len == 0)
                {
                    done = 1;
   1b402:	a1 e0       	ldi	r26, 0x01	; 1
   1b404:	b0 e0       	ldi	r27, 0x00	; 0
   1b406:	ce 5d       	subi	r28, 0xDE	; 222
   1b408:	dd 4f       	sbci	r29, 0xFD	; 253
   1b40a:	b9 83       	std	Y+1, r27	; 0x01
   1b40c:	a8 83       	st	Y, r26
   1b40e:	c2 52       	subi	r28, 0x22	; 34
   1b410:	d2 40       	sbci	r29, 0x02	; 2

            }   // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }   // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1b412:	c2 5e       	subi	r28, 0xE2	; 226
   1b414:	dd 4f       	sbci	r29, 0xFD	; 253
   1b416:	28 81       	ld	r18, Y
   1b418:	39 81       	ldd	r19, Y+1	; 0x01
   1b41a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b41c:	5b 81       	ldd	r21, Y+3	; 0x03
   1b41e:	ce 51       	subi	r28, 0x1E	; 30
   1b420:	d2 40       	sbci	r29, 0x02	; 2
   1b422:	3f 5f       	subi	r19, 0xFF	; 255
   1b424:	4f 4f       	sbci	r20, 0xFF	; 255
   1b426:	5f 4f       	sbci	r21, 0xFF	; 255
   1b428:	c2 5e       	subi	r28, 0xE2	; 226
   1b42a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b42c:	28 83       	st	Y, r18
   1b42e:	39 83       	std	Y+1, r19	; 0x01
   1b430:	4a 83       	std	Y+2, r20	; 0x02
   1b432:	5b 83       	std	Y+3, r21	; 0x03
   1b434:	ce 51       	subi	r28, 0x1E	; 30
   1b436:	d2 40       	sbci	r29, 0x02	; 2
   1b438:	97 ce       	rjmp	.-722    	; 0x1b168 <lif_extract_e010_as_ascii+0x1a4>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1b43a:	e1 2c       	mov	r14, r1
   1b43c:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b43e:	c6 01       	movw	r24, r12
   1b440:	0e 94 a3 ca 	call	0x19546	; 0x19546 <lif_close_volume>

    }   // while(offset <= end)

    lif_closedir(LIF);
    // Flush any remaining bytes
    if(wind)
   1b444:	21 14       	cp	r2, r1
   1b446:	31 04       	cpc	r3, r1
   1b448:	31 f1       	breq	.+76     	; 0x1b496 <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1b44a:	cc 5d       	subi	r28, 0xDC	; 220
   1b44c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b44e:	28 81       	ld	r18, Y
   1b450:	39 81       	ldd	r19, Y+1	; 0x01
   1b452:	c4 52       	subi	r28, 0x24	; 36
   1b454:	d2 40       	sbci	r29, 0x02	; 2
   1b456:	a1 01       	movw	r20, r2
   1b458:	61 e0       	ldi	r22, 0x01	; 1
   1b45a:	70 e0       	ldi	r23, 0x00	; 0
   1b45c:	ce 01       	movw	r24, r28
   1b45e:	0c 96       	adiw	r24, 0x0c	; 12
   1b460:	0e 94 5a 7d 	call	0xfab4	; 0xfab4 <fwrite>
   1b464:	8c 01       	movw	r16, r24
        if(size < wind)
   1b466:	82 15       	cp	r24, r2
   1b468:	93 05       	cpc	r25, r3
   1b46a:	64 f4       	brge	.+24     	; 0x1b484 <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1b46c:	8d ec       	ldi	r24, 0xCD	; 205
   1b46e:	93 e3       	ldi	r25, 0x33	; 51
   1b470:	a0 e0       	ldi	r26, 0x00	; 0
   1b472:	ed b7       	in	r30, 0x3d	; 61
   1b474:	fe b7       	in	r31, 0x3e	; 62
   1b476:	81 83       	std	Z+1, r24	; 0x01
   1b478:	92 83       	std	Z+2, r25	; 0x02
   1b47a:	a3 83       	std	Z+3, r26	; 0x03
   1b47c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            status = 0;
   1b480:	e1 2c       	mov	r14, r1
   1b482:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1b484:	c8 01       	movw	r24, r16
   1b486:	01 2e       	mov	r0, r17
   1b488:	00 0c       	add	r0, r0
   1b48a:	aa 0b       	sbc	r26, r26
   1b48c:	bb 0b       	sbc	r27, r27
   1b48e:	48 0e       	add	r4, r24
   1b490:	59 1e       	adc	r5, r25
   1b492:	6a 1e       	adc	r6, r26
   1b494:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1b496:	cc 5d       	subi	r28, 0xDC	; 220
   1b498:	dd 4f       	sbci	r29, 0xFD	; 253
   1b49a:	88 81       	ld	r24, Y
   1b49c:	99 81       	ldd	r25, Y+1	; 0x01
   1b49e:	c4 52       	subi	r28, 0x24	; 36
   1b4a0:	d2 40       	sbci	r29, 0x02	; 2
   1b4a2:	0e 94 dc 7d 	call	0xfbb8	; 0xfbb8 <fclose>
    if(t)
   1b4a6:	c8 5d       	subi	r28, 0xD8	; 216
   1b4a8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4aa:	28 81       	ld	r18, Y
   1b4ac:	39 81       	ldd	r19, Y+1	; 0x01
   1b4ae:	4a 81       	ldd	r20, Y+2	; 0x02
   1b4b0:	5b 81       	ldd	r21, Y+3	; 0x03
   1b4b2:	c8 52       	subi	r28, 0x28	; 40
   1b4b4:	d2 40       	sbci	r29, 0x02	; 2
   1b4b6:	21 15       	cp	r18, r1
   1b4b8:	31 05       	cpc	r19, r1
   1b4ba:	41 05       	cpc	r20, r1
   1b4bc:	51 05       	cpc	r21, r1
   1b4be:	d9 f0       	breq	.+54     	; 0x1b4f6 <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1b4c0:	c8 5e       	subi	r28, 0xE8	; 232
   1b4c2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4c4:	28 83       	st	Y, r18
   1b4c6:	39 83       	std	Y+1, r19	; 0x01
   1b4c8:	4a 83       	std	Y+2, r20	; 0x02
   1b4ca:	5b 83       	std	Y+3, r21	; 0x03
   1b4cc:	c8 51       	subi	r28, 0x18	; 24
   1b4ce:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1b4d0:	cc 5e       	subi	r28, 0xEC	; 236
   1b4d2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4d4:	28 83       	st	Y, r18
   1b4d6:	39 83       	std	Y+1, r19	; 0x01
   1b4d8:	4a 83       	std	Y+2, r20	; 0x02
   1b4da:	5b 83       	std	Y+3, r21	; 0x03
   1b4dc:	c4 51       	subi	r28, 0x14	; 20
   1b4de:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1b4e0:	be 01       	movw	r22, r28
   1b4e2:	6c 5e       	subi	r22, 0xEC	; 236
   1b4e4:	7d 4f       	sbci	r23, 0xFD	; 253
   1b4e6:	ca 5d       	subi	r28, 0xDA	; 218
   1b4e8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4ea:	88 81       	ld	r24, Y
   1b4ec:	99 81       	ldd	r25, Y+1	; 0x01
   1b4ee:	c6 52       	subi	r28, 0x26	; 38
   1b4f0:	d2 40       	sbci	r29, 0x02	; 2
   1b4f2:	0e 94 19 7b 	call	0xf632	; 0xf632 <utime>
    }
    sync();
   1b4f6:	0e 94 d7 7c 	call	0xf9ae	; 0xf9ae <sync>
    printf("\tWrote: %8ld\n", bytes);
   1b4fa:	ed b7       	in	r30, 0x3d	; 61
   1b4fc:	fe b7       	in	r31, 0x3e	; 62
   1b4fe:	44 82       	std	Z+4, r4	; 0x04
   1b500:	55 82       	std	Z+5, r5	; 0x05
   1b502:	66 82       	std	Z+6, r6	; 0x06
   1b504:	77 82       	std	Z+7, r7	; 0x07
   1b506:	8f eb       	ldi	r24, 0xBF	; 191
   1b508:	93 e3       	ldi	r25, 0x33	; 51
   1b50a:	a0 e0       	ldi	r26, 0x00	; 0
   1b50c:	81 83       	std	Z+1, r24	; 0x01
   1b50e:	92 83       	std	Z+2, r25	; 0x02
   1b510:	a3 83       	std	Z+3, r26	; 0x03
   1b512:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    return(status);
   1b516:	c7 01       	movw	r24, r14
}
   1b518:	c9 5c       	subi	r28, 0xC9	; 201
   1b51a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b51c:	e2 e1       	ldi	r30, 0x12	; 18
   1b51e:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

0001b522 <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1b522:	a4 e1       	ldi	r26, 0x14	; 20
   1b524:	b1 e0       	ldi	r27, 0x01	; 1
   1b526:	e7 e9       	ldi	r30, 0x97	; 151
   1b528:	fa ed       	ldi	r31, 0xDA	; 218
   1b52a:	0c 94 86 e4 	jmp	0x1c90c	; 0x1c90c <__prologue_saves__>
   1b52e:	7c 01       	movw	r14, r24
   1b530:	8b 01       	movw	r16, r22
   1b532:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1b534:	62 e6       	ldi	r22, 0x62	; 98
   1b536:	72 e0       	ldi	r23, 0x02	; 2
   1b538:	0e 94 5e d1 	call	0x1a2bc	; 0x1a2bc <lif_open_volume>
   1b53c:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1b53e:	00 97       	sbiw	r24, 0x00	; 0
   1b540:	69 f4       	brne	.+26     	; 0x1b55c <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b542:	ed b7       	in	r30, 0x3d	; 61
   1b544:	fe b7       	in	r31, 0x3e	; 62
   1b546:	f5 82       	std	Z+5, r15	; 0x05
   1b548:	e4 82       	std	Z+4, r14	; 0x04
   1b54a:	87 ea       	ldi	r24, 0xA7	; 167
   1b54c:	93 e3       	ldi	r25, 0x33	; 51
   1b54e:	a0 e0       	ldi	r26, 0x00	; 0
   1b550:	81 83       	std	Z+1, r24	; 0x01
   1b552:	92 83       	std	Z+2, r25	; 0x02
   1b554:	a3 83       	std	Z+3, r26	; 0x03
   1b556:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1b55a:	13 c0       	rjmp	.+38     	; 0x1b582 <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b55c:	b8 01       	movw	r22, r16
   1b55e:	7d d9       	rcall	.-3334   	; 0x1a85a <lif_find_file>
    if(index == -1)
   1b560:	01 96       	adiw	r24, 0x01	; 1
   1b562:	91 f4       	brne	.+36     	; 0x1b588 <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1b564:	ed b7       	in	r30, 0x3d	; 61
   1b566:	fe b7       	in	r31, 0x3e	; 62
   1b568:	15 83       	std	Z+5, r17	; 0x05
   1b56a:	04 83       	std	Z+4, r16	; 0x04
   1b56c:	84 e9       	ldi	r24, 0x94	; 148
   1b56e:	93 e3       	ldi	r25, 0x33	; 51
   1b570:	a0 e0       	ldi	r26, 0x00	; 0
   1b572:	81 83       	std	Z+1, r24	; 0x01
   1b574:	92 83       	std	Z+2, r25	; 0x02
   1b576:	a3 83       	std	Z+3, r26	; 0x03
   1b578:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b57c:	c4 01       	movw	r24, r8
   1b57e:	0e 94 a3 ca 	call	0x19546	; 0x19546 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b582:	00 e0       	ldi	r16, 0x00	; 0
   1b584:	10 e0       	ldi	r17, 0x00	; 0
   1b586:	ff c0       	rjmp	.+510    	; 0x1b786 <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1b588:	94 01       	movw	r18, r8
   1b58a:	20 5a       	subi	r18, 0xA0	; 160
   1b58c:	3f 4f       	sbci	r19, 0xFF	; 255
   1b58e:	c0 5f       	subi	r28, 0xF0	; 240
   1b590:	de 4f       	sbci	r29, 0xFE	; 254
   1b592:	39 83       	std	Y+1, r19	; 0x01
   1b594:	28 83       	st	Y, r18
   1b596:	c0 51       	subi	r28, 0x10	; 16
   1b598:	d1 40       	sbci	r29, 0x01	; 1

    //Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1b59a:	f9 01       	movw	r30, r18
   1b59c:	a0 80       	ld	r10, Z
   1b59e:	b1 80       	ldd	r11, Z+1	; 0x01
   1b5a0:	0b 2c       	mov	r0, r11
   1b5a2:	00 0c       	add	r0, r0
   1b5a4:	cc 08       	sbc	r12, r12
   1b5a6:	dd 08       	sbc	r13, r13
   1b5a8:	e1 2c       	mov	r14, r1
   1b5aa:	f1 2c       	mov	r15, r1
   1b5ac:	87 01       	movw	r16, r14
   1b5ae:	e3 94       	inc	r14
   1b5b0:	21 e0       	ldi	r18, 0x01	; 1
   1b5b2:	30 e0       	ldi	r19, 0x00	; 0
   1b5b4:	40 e0       	ldi	r20, 0x00	; 0
   1b5b6:	50 e0       	ldi	r21, 0x00	; 0
   1b5b8:	66 eb       	ldi	r22, 0xB6	; 182
   1b5ba:	75 e1       	ldi	r23, 0x15	; 21
   1b5bc:	c3 01       	movw	r24, r6
   1b5be:	0e 94 14 cd 	call	0x19a28	; 0x19a28 <lif_create_volume>
   1b5c2:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1b5c4:	89 2b       	or	r24, r25
   1b5c6:	d1 f2       	breq	.-76     	; 0x1b57c <lif_extract_lif_as_lif+0x5a>
    }

    // Only the start sector changes

    // Copy directory record
    ULIF->DIR = LIF->DIR;
   1b5c8:	81 e2       	ldi	r24, 0x21	; 33
   1b5ca:	f4 01       	movw	r30, r8
   1b5cc:	e1 5b       	subi	r30, 0xB1	; 177
   1b5ce:	ff 4f       	sbci	r31, 0xFF	; 255
   1b5d0:	d7 01       	movw	r26, r14
   1b5d2:	a1 5b       	subi	r26, 0xB1	; 177
   1b5d4:	bf 4f       	sbci	r27, 0xFF	; 255
   1b5d6:	01 90       	ld	r0, Z+
   1b5d8:	0d 92       	st	X+, r0
   1b5da:	8a 95       	dec	r24
   1b5dc:	e1 f7       	brne	.-8      	; 0x1b5d6 <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1b5de:	82 e0       	ldi	r24, 0x02	; 2
   1b5e0:	90 e0       	ldi	r25, 0x00	; 0
   1b5e2:	a0 e0       	ldi	r26, 0x00	; 0
   1b5e4:	b0 e0       	ldi	r27, 0x00	; 0
   1b5e6:	f7 01       	movw	r30, r14
   1b5e8:	e4 5a       	subi	r30, 0xA4	; 164
   1b5ea:	ff 4f       	sbci	r31, 0xFF	; 255
   1b5ec:	80 83       	st	Z, r24
   1b5ee:	91 83       	std	Z+1, r25	; 0x01
   1b5f0:	a2 83       	std	Z+2, r26	; 0x02
   1b5f2:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1b5f4:	c0 5f       	subi	r28, 0xF0	; 240
   1b5f6:	de 4f       	sbci	r29, 0xFE	; 254
   1b5f8:	e8 81       	ld	r30, Y
   1b5fa:	f9 81       	ldd	r31, Y+1	; 0x01
   1b5fc:	c0 51       	subi	r28, 0x10	; 16
   1b5fe:	d1 40       	sbci	r29, 0x01	; 1
   1b600:	80 81       	ld	r24, Z
   1b602:	91 81       	ldd	r25, Z+1	; 0x01
   1b604:	a2 81       	ldd	r26, Z+2	; 0x02
   1b606:	b3 81       	ldd	r27, Z+3	; 0x03
   1b608:	f7 01       	movw	r30, r14
   1b60a:	80 8b       	std	Z+16, r24	; 0x10
   1b60c:	91 8b       	std	Z+17, r25	; 0x11
   1b60e:	a2 8b       	std	Z+18, r26	; 0x12
   1b610:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1b612:	60 e0       	ldi	r22, 0x00	; 0
   1b614:	70 e0       	ldi	r23, 0x00	; 0
   1b616:	c7 01       	movw	r24, r14
   1b618:	0e 94 98 cb 	call	0x19730	; 0x19730 <lif_writedirindex>
   1b61c:	8c 01       	movw	r16, r24
   1b61e:	89 2b       	or	r24, r25
   1b620:	41 f0       	breq	.+16     	; 0x1b632 <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1b622:	61 e0       	ldi	r22, 0x01	; 1
   1b624:	70 e0       	ldi	r23, 0x00	; 0
   1b626:	c7 01       	movw	r24, r14
   1b628:	0e 94 f4 cb 	call	0x197e8	; 0x197e8 <lif_writedirEOF>
   1b62c:	8c 01       	movw	r16, r24
   1b62e:	89 2b       	or	r24, r25
   1b630:	39 f4       	brne	.+14     	; 0x1b640 <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b632:	c4 01       	movw	r24, r8
   1b634:	0e 94 a3 ca 	call	0x19546	; 0x19546 <lif_close_volume>
   1b638:	c7 01       	movw	r24, r14
   1b63a:	0e 94 a3 ca 	call	0x19546	; 0x19546 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1b63e:	a3 c0       	rjmp	.+326    	; 0x1b786 <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1b640:	f7 01       	movw	r30, r14
   1b642:	44 84       	ldd	r4, Z+12	; 0x0c
   1b644:	55 84       	ldd	r5, Z+13	; 0x0d
   1b646:	66 84       	ldd	r6, Z+14	; 0x0e
   1b648:	77 84       	ldd	r7, Z+15	; 0x0f
   1b64a:	76 2c       	mov	r7, r6
   1b64c:	65 2c       	mov	r6, r5
   1b64e:	54 2c       	mov	r5, r4
   1b650:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b652:	f4 01       	movw	r30, r8
   1b654:	e4 5a       	subi	r30, 0xA4	; 164
   1b656:	ff 4f       	sbci	r31, 0xFF	; 255
   1b658:	80 81       	ld	r24, Z
   1b65a:	91 81       	ldd	r25, Z+1	; 0x01
   1b65c:	a2 81       	ldd	r26, Z+2	; 0x02
   1b65e:	b3 81       	ldd	r27, Z+3	; 0x03
   1b660:	22 27       	eor	r18, r18
   1b662:	38 2f       	mov	r19, r24
   1b664:	49 2f       	mov	r20, r25
   1b666:	5a 2f       	mov	r21, r26
   1b668:	c4 5f       	subi	r28, 0xF4	; 244
   1b66a:	de 4f       	sbci	r29, 0xFE	; 254
   1b66c:	28 83       	st	Y, r18
   1b66e:	39 83       	std	Y+1, r19	; 0x01
   1b670:	4a 83       	std	Y+2, r20	; 0x02
   1b672:	5b 83       	std	Y+3, r21	; 0x03
   1b674:	cc 50       	subi	r28, 0x0C	; 12
   1b676:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b678:	21 2c       	mov	r2, r1
   1b67a:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b67c:	86 e8       	ldi	r24, 0x86	; 134
   1b67e:	93 e3       	ldi	r25, 0x33	; 51
   1b680:	9c 01       	movw	r18, r24
   1b682:	40 e0       	ldi	r20, 0x00	; 0
   1b684:	ce 5e       	subi	r28, 0xEE	; 238
   1b686:	de 4f       	sbci	r29, 0xFE	; 254
   1b688:	28 83       	st	Y, r18
   1b68a:	39 83       	std	Y+1, r19	; 0x01
   1b68c:	4a 83       	std	Y+2, r20	; 0x02
   1b68e:	c2 51       	subi	r28, 0x12	; 18
   1b690:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b692:	c0 5f       	subi	r28, 0xF0	; 240
   1b694:	de 4f       	sbci	r29, 0xFE	; 254
   1b696:	e8 81       	ld	r30, Y
   1b698:	f9 81       	ldd	r31, Y+1	; 0x01
   1b69a:	c0 51       	subi	r28, 0x10	; 16
   1b69c:	d1 40       	sbci	r29, 0x01	; 1
   1b69e:	80 81       	ld	r24, Z
   1b6a0:	91 81       	ldd	r25, Z+1	; 0x01
   1b6a2:	28 16       	cp	r2, r24
   1b6a4:	39 06       	cpc	r3, r25
   1b6a6:	0c f0       	brlt	.+2      	; 0x1b6aa <lif_extract_lif_as_lif+0x188>
   1b6a8:	58 c0       	rjmp	.+176    	; 0x1b75a <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1b6aa:	00 e0       	ldi	r16, 0x00	; 0
   1b6ac:	11 e0       	ldi	r17, 0x01	; 1
   1b6ae:	c4 5f       	subi	r28, 0xF4	; 244
   1b6b0:	de 4f       	sbci	r29, 0xFE	; 254
   1b6b2:	28 81       	ld	r18, Y
   1b6b4:	39 81       	ldd	r19, Y+1	; 0x01
   1b6b6:	4a 81       	ldd	r20, Y+2	; 0x02
   1b6b8:	5b 81       	ldd	r21, Y+3	; 0x03
   1b6ba:	cc 50       	subi	r28, 0x0C	; 12
   1b6bc:	d1 40       	sbci	r29, 0x01	; 1
   1b6be:	be 01       	movw	r22, r28
   1b6c0:	68 5f       	subi	r22, 0xF8	; 248
   1b6c2:	7f 4f       	sbci	r23, 0xFF	; 255
   1b6c4:	c4 01       	movw	r24, r8
   1b6c6:	0e 94 d7 c1 	call	0x183ae	; 0x183ae <lif_read>
   1b6ca:	5b 01       	movw	r10, r22
   1b6cc:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1b6ce:	6f 3f       	cpi	r22, 0xFF	; 255
   1b6d0:	71 05       	cpc	r23, r1
   1b6d2:	09 f0       	breq	.+2      	; 0x1b6d6 <lif_extract_lif_as_lif+0x1b4>
   1b6d4:	2c f4       	brge	.+10     	; 0x1b6e0 <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b6d6:	c4 01       	movw	r24, r8
   1b6d8:	0e 94 a3 ca 	call	0x19546	; 0x19546 <lif_close_volume>
   1b6dc:	c7 01       	movw	r24, r14
   1b6de:	4f cf       	rjmp	.-354    	; 0x1b57e <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1b6e0:	00 e0       	ldi	r16, 0x00	; 0
   1b6e2:	11 e0       	ldi	r17, 0x01	; 1
   1b6e4:	a3 01       	movw	r20, r6
   1b6e6:	92 01       	movw	r18, r4
   1b6e8:	be 01       	movw	r22, r28
   1b6ea:	68 5f       	subi	r22, 0xF8	; 248
   1b6ec:	7f 4f       	sbci	r23, 0xFF	; 255
   1b6ee:	c7 01       	movw	r24, r14
   1b6f0:	0e 94 28 c2 	call	0x18450	; 0x18450 <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1b6f4:	c5 01       	movw	r24, r10
   1b6f6:	0b 2c       	mov	r0, r11
   1b6f8:	00 0c       	add	r0, r0
   1b6fa:	aa 0b       	sbc	r26, r26
   1b6fc:	bb 0b       	sbc	r27, r27
   1b6fe:	48 0e       	add	r4, r24
   1b700:	59 1e       	adc	r5, r25
   1b702:	6a 1e       	adc	r6, r26
   1b704:	7b 1e       	adc	r7, r27
        offset += size;
   1b706:	c4 5f       	subi	r28, 0xF4	; 244
   1b708:	de 4f       	sbci	r29, 0xFE	; 254
   1b70a:	28 81       	ld	r18, Y
   1b70c:	39 81       	ldd	r19, Y+1	; 0x01
   1b70e:	4a 81       	ldd	r20, Y+2	; 0x02
   1b710:	5b 81       	ldd	r21, Y+3	; 0x03
   1b712:	cc 50       	subi	r28, 0x0C	; 12
   1b714:	d1 40       	sbci	r29, 0x01	; 1
   1b716:	28 0f       	add	r18, r24
   1b718:	39 1f       	adc	r19, r25
   1b71a:	4a 1f       	adc	r20, r26
   1b71c:	5b 1f       	adc	r21, r27
   1b71e:	c4 5f       	subi	r28, 0xF4	; 244
   1b720:	de 4f       	sbci	r29, 0xFE	; 254
   1b722:	28 83       	st	Y, r18
   1b724:	39 83       	std	Y+1, r19	; 0x01
   1b726:	4a 83       	std	Y+2, r20	; 0x02
   1b728:	5b 83       	std	Y+3, r21	; 0x03
   1b72a:	cc 50       	subi	r28, 0x0C	; 12
   1b72c:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b72e:	ed b7       	in	r30, 0x3d	; 61
   1b730:	fe b7       	in	r31, 0x3e	; 62
   1b732:	44 82       	std	Z+4, r4	; 0x04
   1b734:	55 82       	std	Z+5, r5	; 0x05
   1b736:	66 82       	std	Z+6, r6	; 0x06
   1b738:	77 82       	std	Z+7, r7	; 0x07
   1b73a:	ce 5e       	subi	r28, 0xEE	; 238
   1b73c:	de 4f       	sbci	r29, 0xFE	; 254
   1b73e:	28 81       	ld	r18, Y
   1b740:	39 81       	ldd	r19, Y+1	; 0x01
   1b742:	4a 81       	ldd	r20, Y+2	; 0x02
   1b744:	c2 51       	subi	r28, 0x12	; 18
   1b746:	d1 40       	sbci	r29, 0x01	; 1
   1b748:	21 83       	std	Z+1, r18	; 0x01
   1b74a:	32 83       	std	Z+2, r19	; 0x02
   1b74c:	43 83       	std	Z+3, r20	; 0x03
   1b74e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b752:	ff ef       	ldi	r31, 0xFF	; 255
   1b754:	2f 1a       	sub	r2, r31
   1b756:	3f 0a       	sbc	r3, r31
   1b758:	9c cf       	rjmp	.-200    	; 0x1b692 <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b75a:	c4 01       	movw	r24, r8
   1b75c:	0e 94 a3 ca 	call	0x19546	; 0x19546 <lif_close_volume>
   1b760:	c7 01       	movw	r24, r14
   1b762:	0e 94 a3 ca 	call	0x19546	; 0x19546 <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1b766:	ed b7       	in	r30, 0x3d	; 61
   1b768:	fe b7       	in	r31, 0x3e	; 62
   1b76a:	44 82       	std	Z+4, r4	; 0x04
   1b76c:	55 82       	std	Z+5, r5	; 0x05
   1b76e:	66 82       	std	Z+6, r6	; 0x06
   1b770:	77 82       	std	Z+7, r7	; 0x07
   1b772:	88 e7       	ldi	r24, 0x78	; 120
   1b774:	93 e3       	ldi	r25, 0x33	; 51
   1b776:	a0 e0       	ldi	r26, 0x00	; 0
   1b778:	81 83       	std	Z+1, r24	; 0x01
   1b77a:	92 83       	std	Z+2, r25	; 0x02
   1b77c:	a3 83       	std	Z+3, r26	; 0x03
   1b77e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    return(1);
   1b782:	01 e0       	ldi	r16, 0x01	; 1
   1b784:	10 e0       	ldi	r17, 0x00	; 0
}
   1b786:	c8 01       	movw	r24, r16
   1b788:	cc 5e       	subi	r28, 0xEC	; 236
   1b78a:	de 4f       	sbci	r29, 0xFE	; 254
   1b78c:	e2 e1       	ldi	r30, 0x12	; 18
   1b78e:	0c 94 a2 e4 	jmp	0x1c944	; 0x1c944 <__epilogue_restores__>

0001b792 <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from 
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1b792:	2f 92       	push	r2
   1b794:	3f 92       	push	r3
   1b796:	4f 92       	push	r4
   1b798:	5f 92       	push	r5
   1b79a:	6f 92       	push	r6
   1b79c:	8f 92       	push	r8
   1b79e:	9f 92       	push	r9
   1b7a0:	af 92       	push	r10
   1b7a2:	bf 92       	push	r11
   1b7a4:	cf 92       	push	r12
   1b7a6:	df 92       	push	r13
   1b7a8:	ef 92       	push	r14
   1b7aa:	ff 92       	push	r15
   1b7ac:	0f 93       	push	r16
   1b7ae:	1f 93       	push	r17
   1b7b0:	cf 93       	push	r28
   1b7b2:	df 93       	push	r29
   1b7b4:	cd b7       	in	r28, 0x3d	; 61
   1b7b6:	de b7       	in	r29, 0x3e	; 62
   1b7b8:	cd 51       	subi	r28, 0x1D	; 29
   1b7ba:	d1 40       	sbci	r29, 0x01	; 1
   1b7bc:	0f b6       	in	r0, 0x3f	; 63
   1b7be:	f8 94       	cli
   1b7c0:	de bf       	out	0x3e, r29	; 62
   1b7c2:	0f be       	out	0x3f, r0	; 63
   1b7c4:	cd bf       	out	0x3d, r28	; 61
   1b7c6:	5c 01       	movw	r10, r24
   1b7c8:	7b 01       	movw	r14, r22
   1b7ca:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1b7cc:	dc 01       	movw	r26, r24
   1b7ce:	8c 91       	ld	r24, X
   1b7d0:	81 11       	cpse	r24, r1
   1b7d2:	03 c0       	rjmp	.+6      	; 0x1b7da <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1b7d4:	88 e5       	ldi	r24, 0x58	; 88
   1b7d6:	93 e3       	ldi	r25, 0x33	; 51
   1b7d8:	06 c0       	rjmp	.+12     	; 0x1b7e6 <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1b7da:	db 01       	movw	r26, r22
   1b7dc:	8c 91       	ld	r24, X
   1b7de:	81 11       	cpse	r24, r1
   1b7e0:	0b c0       	rjmp	.+22     	; 0x1b7f8 <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1b7e2:	8d e3       	ldi	r24, 0x3D	; 61
   1b7e4:	93 e3       	ldi	r25, 0x33	; 51
   1b7e6:	a0 e0       	ldi	r26, 0x00	; 0
   1b7e8:	ed b7       	in	r30, 0x3d	; 61
   1b7ea:	fe b7       	in	r31, 0x3e	; 62
   1b7ec:	81 83       	std	Z+1, r24	; 0x01
   1b7ee:	92 83       	std	Z+2, r25	; 0x02
   1b7f0:	a3 83       	std	Z+3, r26	; 0x03
   1b7f2:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1b7f6:	25 c1       	rjmp	.+586    	; 0x1ba42 <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1b7f8:	da 01       	movw	r26, r20
   1b7fa:	8c 91       	ld	r24, X
   1b7fc:	81 11       	cpse	r24, r1
   1b7fe:	03 c0       	rjmp	.+6      	; 0x1b806 <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1b800:	81 e2       	ldi	r24, 0x21	; 33
   1b802:	93 e3       	ldi	r25, 0x33	; 51
   1b804:	f0 cf       	rjmp	.-32     	; 0x1b7e6 <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & 0x400)
   1b806:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1b80a:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1b80e:	92 ff       	sbrs	r25, 2
   1b810:	10 c0       	rjmp	.+32     	; 0x1b832 <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1b812:	ed b7       	in	r30, 0x3d	; 61
   1b814:	fe b7       	in	r31, 0x3e	; 62
   1b816:	51 87       	std	Z+9, r21	; 0x09
   1b818:	40 87       	std	Z+8, r20	; 0x08
   1b81a:	77 83       	std	Z+7, r23	; 0x07
   1b81c:	66 83       	std	Z+6, r22	; 0x06
   1b81e:	b5 82       	std	Z+5, r11	; 0x05
   1b820:	a4 82       	std	Z+4, r10	; 0x04
   1b822:	82 ef       	ldi	r24, 0xF2	; 242
   1b824:	92 e3       	ldi	r25, 0x32	; 50
   1b826:	a0 e0       	ldi	r26, 0x00	; 0
   1b828:	81 83       	std	Z+1, r24	; 0x01
   1b82a:	92 83       	std	Z+2, r25	; 0x02
   1b82c:	a3 83       	std	Z+3, r26	; 0x03
   1b82e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            lifimagename, lifname, userfile);

    // open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1b832:	68 e2       	ldi	r22, 0x28	; 40
   1b834:	78 e0       	ldi	r23, 0x08	; 8
   1b836:	c4 01       	movw	r24, r8
   1b838:	0e 94 5e d1 	call	0x1a2bc	; 0x1a2bc <lif_open_volume>
   1b83c:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1b83e:	00 97       	sbiw	r24, 0x00	; 0
   1b840:	09 f4       	brne	.+2      	; 0x1b844 <lif_add_lif_file+0xb2>
   1b842:	ff c0       	rjmp	.+510    	; 0x1ba42 <lif_add_lif_file+0x2b0>
        return(-1); 

    // find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1b844:	b7 01       	movw	r22, r14
   1b846:	09 d8       	rcall	.-4078   	; 0x1a85a <lif_find_file>
    if(index == -1)
   1b848:	01 96       	adiw	r24, 0x01	; 1
   1b84a:	a1 f4       	brne	.+40     	; 0x1b874 <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1b84c:	ed b7       	in	r30, 0x3d	; 61
   1b84e:	fe b7       	in	r31, 0x3e	; 62
   1b850:	f5 82       	std	Z+5, r15	; 0x05
   1b852:	e4 82       	std	Z+4, r14	; 0x04
   1b854:	8f ed       	ldi	r24, 0xDF	; 223
   1b856:	92 e3       	ldi	r25, 0x32	; 50
   1b858:	a0 e0       	ldi	r26, 0x00	; 0
   1b85a:	81 83       	std	Z+1, r24	; 0x01
   1b85c:	92 83       	std	Z+2, r25	; 0x02
   1b85e:	a3 83       	std	Z+3, r26	; 0x03
   1b860:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b864:	c6 01       	movw	r24, r12
   1b866:	0e 94 a3 ca 	call	0x19546	; 0x19546 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1b86a:	60 e0       	ldi	r22, 0x00	; 0
   1b86c:	70 e0       	ldi	r23, 0x00	; 0
   1b86e:	80 e0       	ldi	r24, 0x00	; 0
   1b870:	90 e0       	ldi	r25, 0x00	; 0
   1b872:	ff c0       	rjmp	.+510    	; 0x1ba72 <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b874:	68 e2       	ldi	r22, 0x28	; 40
   1b876:	78 e0       	ldi	r23, 0x08	; 8
   1b878:	c5 01       	movw	r24, r10
   1b87a:	0e 94 5e d1 	call	0x1a2bc	; 0x1a2bc <lif_open_volume>
   1b87e:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1b880:	00 97       	sbiw	r24, 0x00	; 0
   1b882:	09 f4       	brne	.+2      	; 0x1b886 <lif_add_lif_file+0xf4>
   1b884:	de c0       	rjmp	.+444    	; 0x1ba42 <lif_add_lif_file+0x2b0>
        return(-1); 

    // Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1b886:	f6 01       	movw	r30, r12
   1b888:	e0 5a       	subi	r30, 0xA0	; 160
   1b88a:	ff 4f       	sbci	r31, 0xFF	; 255
   1b88c:	40 81       	ld	r20, Z
   1b88e:	51 81       	ldd	r21, Z+1	; 0x01
   1b890:	62 81       	ldd	r22, Z+2	; 0x02
   1b892:	73 81       	ldd	r23, Z+3	; 0x03
   1b894:	0e 94 fe cf 	call	0x19ffc	; 0x19ffc <lif_newdir>
   1b898:	ca 5e       	subi	r28, 0xEA	; 234
   1b89a:	de 4f       	sbci	r29, 0xFE	; 254
   1b89c:	99 83       	std	Y+1, r25	; 0x01
   1b89e:	88 83       	st	Y, r24
   1b8a0:	c6 51       	subi	r28, 0x16	; 22
   1b8a2:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1b8a4:	01 96       	adiw	r24, 0x01	; 1
   1b8a6:	79 f4       	brne	.+30     	; 0x1b8c6 <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1b8a8:	ed b7       	in	r30, 0x3d	; 61
   1b8aa:	fe b7       	in	r31, 0x3e	; 62
   1b8ac:	97 82       	std	Z+7, r9	; 0x07
   1b8ae:	86 82       	std	Z+6, r8	; 0x06
   1b8b0:	b5 82       	std	Z+5, r11	; 0x05
   1b8b2:	a4 82       	std	Z+4, r10	; 0x04
   1b8b4:	8f ea       	ldi	r24, 0xAF	; 175
   1b8b6:	92 e3       	ldi	r25, 0x32	; 50
   1b8b8:	a0 e0       	ldi	r26, 0x00	; 0
   1b8ba:	81 83       	std	Z+1, r24	; 0x01
   1b8bc:	92 83       	std	Z+2, r25	; 0x02
   1b8be:	a3 83       	std	Z+3, r26	; 0x03
   1b8c0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1b8c4:	a8 c0       	rjmp	.+336    	; 0x1ba16 <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
        return(-1);
    }

    // Save start sector
    start = LIF->DIR.FileStartSector;
   1b8c6:	c7 01       	movw	r24, r14
   1b8c8:	84 5a       	subi	r24, 0xA4	; 164
   1b8ca:	9f 4f       	sbci	r25, 0xFF	; 255
   1b8cc:	dc 01       	movw	r26, r24
   1b8ce:	4d 91       	ld	r20, X+
   1b8d0:	5d 91       	ld	r21, X+
   1b8d2:	6d 91       	ld	r22, X+
   1b8d4:	7c 91       	ld	r23, X
   1b8d6:	13 97       	sbiw	r26, 0x03	; 3

    // Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1b8d8:	21 e2       	ldi	r18, 0x21	; 33
   1b8da:	f6 01       	movw	r30, r12
   1b8dc:	e1 5b       	subi	r30, 0xB1	; 177
   1b8de:	ff 4f       	sbci	r31, 0xFF	; 255
   1b8e0:	1d 97       	sbiw	r26, 0x0d	; 13
   1b8e2:	01 90       	ld	r0, Z+
   1b8e4:	0d 92       	st	X+, r0
   1b8e6:	2a 95       	dec	r18
   1b8e8:	e1 f7       	brne	.-8      	; 0x1b8e2 <lif_add_lif_file+0x150>

    // Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1b8ea:	fc 01       	movw	r30, r24
   1b8ec:	40 83       	st	Z, r20
   1b8ee:	51 83       	std	Z+1, r21	; 0x01
   1b8f0:	62 83       	std	Z+2, r22	; 0x02
   1b8f2:	73 83       	std	Z+3, r23	; 0x03

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b8f4:	b6 2f       	mov	r27, r22
   1b8f6:	a5 2f       	mov	r26, r21
   1b8f8:	94 2f       	mov	r25, r20
   1b8fa:	88 27       	eor	r24, r24
   1b8fc:	c2 5f       	subi	r28, 0xF2	; 242
   1b8fe:	de 4f       	sbci	r29, 0xFE	; 254
   1b900:	88 83       	st	Y, r24
   1b902:	99 83       	std	Y+1, r25	; 0x01
   1b904:	aa 83       	std	Y+2, r26	; 0x02
   1b906:	bb 83       	std	Y+3, r27	; 0x03
   1b908:	ce 50       	subi	r28, 0x0E	; 14
   1b90a:	d1 40       	sbci	r29, 0x01	; 1
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b90c:	f6 01       	movw	r30, r12
   1b90e:	e4 5a       	subi	r30, 0xA4	; 164
   1b910:	ff 4f       	sbci	r31, 0xFF	; 255
   1b912:	80 81       	ld	r24, Z
   1b914:	91 81       	ldd	r25, Z+1	; 0x01
   1b916:	a2 81       	ldd	r26, Z+2	; 0x02
   1b918:	b3 81       	ldd	r27, Z+3	; 0x03
   1b91a:	22 27       	eor	r18, r18
   1b91c:	38 2f       	mov	r19, r24
   1b91e:	49 2f       	mov	r20, r25
   1b920:	5a 2f       	mov	r21, r26
   1b922:	ce 5e       	subi	r28, 0xEE	; 238
   1b924:	de 4f       	sbci	r29, 0xFE	; 254
   1b926:	28 83       	st	Y, r18
   1b928:	39 83       	std	Y+1, r19	; 0x01
   1b92a:	4a 83       	std	Y+2, r20	; 0x02
   1b92c:	5b 83       	std	Y+3, r21	; 0x03
   1b92e:	c2 51       	subi	r28, 0x12	; 18
   1b930:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b932:	21 2c       	mov	r2, r1
   1b934:	31 2c       	mov	r3, r1

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1b936:	81 2c       	mov	r8, r1
   1b938:	91 2c       	mov	r9, r1
   1b93a:	54 01       	movw	r10, r8
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b93c:	a7 01       	movw	r20, r14
   1b93e:	40 5a       	subi	r20, 0xA0	; 160
   1b940:	5f 4f       	sbci	r21, 0xFF	; 255
   1b942:	c4 5e       	subi	r28, 0xE4	; 228
   1b944:	de 4f       	sbci	r29, 0xFE	; 254
   1b946:	59 83       	std	Y+1, r21	; 0x01
   1b948:	48 83       	st	Y, r20
   1b94a:	cc 51       	subi	r28, 0x1C	; 28
   1b94c:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1b94e:	81 ea       	ldi	r24, 0xA1	; 161
   1b950:	92 e3       	ldi	r25, 0x32	; 50
   1b952:	2c 01       	movw	r4, r24
   1b954:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b956:	27 c0       	rjmp	.+78     	; 0x1b9a6 <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

        // Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b958:	00 e0       	ldi	r16, 0x00	; 0
   1b95a:	11 e0       	ldi	r17, 0x01	; 1
   1b95c:	c8 5e       	subi	r28, 0xE8	; 232
   1b95e:	de 4f       	sbci	r29, 0xFE	; 254
   1b960:	28 81       	ld	r18, Y
   1b962:	39 81       	ldd	r19, Y+1	; 0x01
   1b964:	4a 81       	ldd	r20, Y+2	; 0x02
   1b966:	5b 81       	ldd	r21, Y+3	; 0x03
   1b968:	c8 51       	subi	r28, 0x18	; 24
   1b96a:	d1 40       	sbci	r29, 0x01	; 1
   1b96c:	be 01       	movw	r22, r28
   1b96e:	66 5f       	subi	r22, 0xF6	; 246
   1b970:	7f 4f       	sbci	r23, 0xFF	; 255
   1b972:	c7 01       	movw	r24, r14
   1b974:	0e 94 28 c2 	call	0x18450	; 0x18450 <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1b978:	8f 3f       	cpi	r24, 0xFF	; 255
   1b97a:	91 05       	cpc	r25, r1
   1b97c:	09 f0       	breq	.+2      	; 0x1b980 <lif_add_lif_file+0x1ee>
   1b97e:	0c f4       	brge	.+2      	; 0x1b982 <lif_add_lif_file+0x1f0>
   1b980:	4a c0       	rjmp	.+148    	; 0x1ba16 <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1b982:	5f ef       	ldi	r21, 0xFF	; 255
   1b984:	95 1a       	sub	r9, r21
   1b986:	a5 0a       	sbc	r10, r21
   1b988:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1b98a:	ed b7       	in	r30, 0x3d	; 61
   1b98c:	fe b7       	in	r31, 0x3e	; 62
   1b98e:	84 82       	std	Z+4, r8	; 0x04
   1b990:	95 82       	std	Z+5, r9	; 0x05
   1b992:	a6 82       	std	Z+6, r10	; 0x06
   1b994:	b7 82       	std	Z+7, r11	; 0x07
   1b996:	41 82       	std	Z+1, r4	; 0x01
   1b998:	52 82       	std	Z+2, r5	; 0x02
   1b99a:	63 82       	std	Z+3, r6	; 0x03
   1b99c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b9a0:	ff ef       	ldi	r31, 0xFF	; 255
   1b9a2:	2f 1a       	sub	r2, r31
   1b9a4:	3f 0a       	sbc	r3, r31
   1b9a6:	ce 5e       	subi	r28, 0xEE	; 238
   1b9a8:	de 4f       	sbci	r29, 0xFE	; 254
   1b9aa:	28 81       	ld	r18, Y
   1b9ac:	39 81       	ldd	r19, Y+1	; 0x01
   1b9ae:	4a 81       	ldd	r20, Y+2	; 0x02
   1b9b0:	5b 81       	ldd	r21, Y+3	; 0x03
   1b9b2:	c2 51       	subi	r28, 0x12	; 18
   1b9b4:	d1 40       	sbci	r29, 0x01	; 1
   1b9b6:	28 0d       	add	r18, r8
   1b9b8:	39 1d       	adc	r19, r9
   1b9ba:	4a 1d       	adc	r20, r10
   1b9bc:	5b 1d       	adc	r21, r11
   1b9be:	c2 5f       	subi	r28, 0xF2	; 242
   1b9c0:	de 4f       	sbci	r29, 0xFE	; 254
   1b9c2:	88 81       	ld	r24, Y
   1b9c4:	99 81       	ldd	r25, Y+1	; 0x01
   1b9c6:	aa 81       	ldd	r26, Y+2	; 0x02
   1b9c8:	bb 81       	ldd	r27, Y+3	; 0x03
   1b9ca:	ce 50       	subi	r28, 0x0E	; 14
   1b9cc:	d1 40       	sbci	r29, 0x01	; 1
   1b9ce:	88 0d       	add	r24, r8
   1b9d0:	99 1d       	adc	r25, r9
   1b9d2:	aa 1d       	adc	r26, r10
   1b9d4:	bb 1d       	adc	r27, r11
   1b9d6:	c8 5e       	subi	r28, 0xE8	; 232
   1b9d8:	de 4f       	sbci	r29, 0xFE	; 254
   1b9da:	88 83       	st	Y, r24
   1b9dc:	99 83       	std	Y+1, r25	; 0x01
   1b9de:	aa 83       	std	Y+2, r26	; 0x02
   1b9e0:	bb 83       	std	Y+3, r27	; 0x03
   1b9e2:	c8 51       	subi	r28, 0x18	; 24
   1b9e4:	d1 40       	sbci	r29, 0x01	; 1
   1b9e6:	c4 5e       	subi	r28, 0xE4	; 228
   1b9e8:	de 4f       	sbci	r29, 0xFE	; 254
   1b9ea:	a8 81       	ld	r26, Y
   1b9ec:	b9 81       	ldd	r27, Y+1	; 0x01
   1b9ee:	cc 51       	subi	r28, 0x1C	; 28
   1b9f0:	d1 40       	sbci	r29, 0x01	; 1
   1b9f2:	8d 91       	ld	r24, X+
   1b9f4:	9c 91       	ld	r25, X
   1b9f6:	28 16       	cp	r2, r24
   1b9f8:	39 06       	cpc	r3, r25
   1b9fa:	94 f4       	brge	.+36     	; 0x1ba20 <lif_add_lif_file+0x28e>
    {
        // Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1b9fc:	00 e0       	ldi	r16, 0x00	; 0
   1b9fe:	11 e0       	ldi	r17, 0x01	; 1
   1ba00:	be 01       	movw	r22, r28
   1ba02:	66 5f       	subi	r22, 0xF6	; 246
   1ba04:	7f 4f       	sbci	r23, 0xFF	; 255
   1ba06:	c6 01       	movw	r24, r12
   1ba08:	0e 94 d7 c1 	call	0x183ae	; 0x183ae <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1ba0c:	6f 3f       	cpi	r22, 0xFF	; 255
   1ba0e:	71 05       	cpc	r23, r1
   1ba10:	11 f0       	breq	.+4      	; 0x1ba16 <lif_add_lif_file+0x284>
   1ba12:	0c f0       	brlt	.+2      	; 0x1ba16 <lif_add_lif_file+0x284>
   1ba14:	a1 cf       	rjmp	.-190    	; 0x1b958 <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba16:	c7 01       	movw	r24, r14
   1ba18:	0e 94 a3 ca 	call	0x19546	; 0x19546 <lif_close_volume>
   1ba1c:	c6 01       	movw	r24, r12
   1ba1e:	0f c0       	rjmp	.+30     	; 0x1ba3e <lif_add_lif_file+0x2ac>
   1ba20:	c6 01       	movw	r24, r12
   1ba22:	0e 94 a3 ca 	call	0x19546	; 0x19546 <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

    // Write directory record
    if( !lif_writedirindex(LIF,index))
   1ba26:	ca 5e       	subi	r28, 0xEA	; 234
   1ba28:	de 4f       	sbci	r29, 0xFE	; 254
   1ba2a:	68 81       	ld	r22, Y
   1ba2c:	79 81       	ldd	r23, Y+1	; 0x01
   1ba2e:	c6 51       	subi	r28, 0x16	; 22
   1ba30:	d1 40       	sbci	r29, 0x01	; 1
   1ba32:	c7 01       	movw	r24, r14
   1ba34:	0e 94 98 cb 	call	0x19730	; 0x19730 <lif_writedirindex>
   1ba38:	89 2b       	or	r24, r25
   1ba3a:	41 f4       	brne	.+16     	; 0x1ba4c <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba3c:	c7 01       	movw	r24, r14
   1ba3e:	0e 94 a3 ca 	call	0x19546	; 0x19546 <lif_close_volume>

    // Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1ba42:	6f ef       	ldi	r22, 0xFF	; 255
   1ba44:	7f ef       	ldi	r23, 0xFF	; 255
   1ba46:	8f ef       	ldi	r24, 0xFF	; 255
   1ba48:	9f ef       	ldi	r25, 0xFF	; 255
   1ba4a:	13 c0       	rjmp	.+38     	; 0x1ba72 <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba4c:	c7 01       	movw	r24, r14
   1ba4e:	0e 94 a3 ca 	call	0x19546	; 0x19546 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1ba52:	ed b7       	in	r30, 0x3d	; 61
   1ba54:	fe b7       	in	r31, 0x3e	; 62
   1ba56:	84 82       	std	Z+4, r8	; 0x04
   1ba58:	95 82       	std	Z+5, r9	; 0x05
   1ba5a:	a6 82       	std	Z+6, r10	; 0x06
   1ba5c:	b7 82       	std	Z+7, r11	; 0x07
   1ba5e:	83 e9       	ldi	r24, 0x93	; 147
   1ba60:	92 e3       	ldi	r25, 0x32	; 50
   1ba62:	a0 e0       	ldi	r26, 0x00	; 0
   1ba64:	81 83       	std	Z+1, r24	; 0x01
   1ba66:	92 83       	std	Z+2, r25	; 0x02
   1ba68:	a3 83       	std	Z+3, r26	; 0x03
   1ba6a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    return(bytes);
   1ba6e:	b4 01       	movw	r22, r8
   1ba70:	c5 01       	movw	r24, r10
}
   1ba72:	c3 5e       	subi	r28, 0xE3	; 227
   1ba74:	de 4f       	sbci	r29, 0xFE	; 254
   1ba76:	0f b6       	in	r0, 0x3f	; 63
   1ba78:	f8 94       	cli
   1ba7a:	de bf       	out	0x3e, r29	; 62
   1ba7c:	0f be       	out	0x3f, r0	; 63
   1ba7e:	cd bf       	out	0x3d, r28	; 61
   1ba80:	df 91       	pop	r29
   1ba82:	cf 91       	pop	r28
   1ba84:	1f 91       	pop	r17
   1ba86:	0f 91       	pop	r16
   1ba88:	ff 90       	pop	r15
   1ba8a:	ef 90       	pop	r14
   1ba8c:	df 90       	pop	r13
   1ba8e:	cf 90       	pop	r12
   1ba90:	bf 90       	pop	r11
   1ba92:	af 90       	pop	r10
   1ba94:	9f 90       	pop	r9
   1ba96:	8f 90       	pop	r8
   1ba98:	6f 90       	pop	r6
   1ba9a:	5f 90       	pop	r5
   1ba9c:	4f 90       	pop	r4
   1ba9e:	3f 90       	pop	r3
   1baa0:	2f 90       	pop	r2
   1baa2:	08 95       	ret

0001baa4 <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1baa4:	ef 92       	push	r14
   1baa6:	ff 92       	push	r15
   1baa8:	0f 93       	push	r16
   1baaa:	1f 93       	push	r17
   1baac:	cf 93       	push	r28
   1baae:	df 93       	push	r29
   1bab0:	ad b7       	in	r26, 0x3d	; 61
   1bab2:	be b7       	in	r27, 0x3e	; 62
   1bab4:	17 97       	sbiw	r26, 0x07	; 7
   1bab6:	0f b6       	in	r0, 0x3f	; 63
   1bab8:	f8 94       	cli
   1baba:	be bf       	out	0x3e, r27	; 62
   1babc:	0f be       	out	0x3f, r0	; 63
   1babe:	ad bf       	out	0x3d, r26	; 61
   1bac0:	7c 01       	movw	r14, r24
   1bac2:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1bac4:	fc 01       	movw	r30, r24
   1bac6:	80 81       	ld	r24, Z
   1bac8:	81 11       	cpse	r24, r1
   1baca:	03 c0       	rjmp	.+6      	; 0x1bad2 <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1bacc:	8e e6       	ldi	r24, 0x6E	; 110
   1bace:	92 e3       	ldi	r25, 0x32	; 50
   1bad0:	06 c0       	rjmp	.+12     	; 0x1bade <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1bad2:	fb 01       	movw	r30, r22
   1bad4:	80 81       	ld	r24, Z
   1bad6:	81 11       	cpse	r24, r1
   1bad8:	0b c0       	rjmp	.+22     	; 0x1baf0 <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1bada:	8e e4       	ldi	r24, 0x4E	; 78
   1badc:	92 e3       	ldi	r25, 0x32	; 50
   1bade:	a0 e0       	ldi	r26, 0x00	; 0
   1bae0:	ed b7       	in	r30, 0x3d	; 61
   1bae2:	fe b7       	in	r31, 0x3e	; 62
   1bae4:	81 83       	std	Z+1, r24	; 0x01
   1bae6:	92 83       	std	Z+2, r25	; 0x02
   1bae8:	a3 83       	std	Z+3, r26	; 0x03
   1baea:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1baee:	68 c0       	rjmp	.+208    	; 0x1bbc0 <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & 0x400)
   1baf0:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1baf4:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1baf8:	92 ff       	sbrs	r25, 2
   1bafa:	0e c0       	rjmp	.+28     	; 0x1bb18 <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n", 
   1bafc:	ed b7       	in	r30, 0x3d	; 61
   1bafe:	fe b7       	in	r31, 0x3e	; 62
   1bb00:	77 83       	std	Z+7, r23	; 0x07
   1bb02:	66 83       	std	Z+6, r22	; 0x06
   1bb04:	f5 82       	std	Z+5, r15	; 0x05
   1bb06:	e4 82       	std	Z+4, r14	; 0x04
   1bb08:	8f e2       	ldi	r24, 0x2F	; 47
   1bb0a:	92 e3       	ldi	r25, 0x32	; 50
   1bb0c:	a0 e0       	ldi	r26, 0x00	; 0
   1bb0e:	81 83       	std	Z+1, r24	; 0x01
   1bb10:	92 83       	std	Z+2, r25	; 0x02
   1bb12:	a3 83       	std	Z+3, r26	; 0x03
   1bb14:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
   1bb18:	68 e2       	ldi	r22, 0x28	; 40
   1bb1a:	78 e0       	ldi	r23, 0x08	; 8
   1bb1c:	c7 01       	movw	r24, r14
   1bb1e:	0e 94 5e d1 	call	0x1a2bc	; 0x1a2bc <lif_open_volume>
   1bb22:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bb24:	00 97       	sbiw	r24, 0x00	; 0
   1bb26:	09 f4       	brne	.+2      	; 0x1bb2a <lif_del_file+0x86>
   1bb28:	4b c0       	rjmp	.+150    	; 0x1bbc0 <lif_del_file+0x11c>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, lifname);
   1bb2a:	b8 01       	movw	r22, r16
   1bb2c:	0e 94 2d d4 	call	0x1a85a	; 0x1a85a <lif_find_file>
    if(index == -1)
   1bb30:	8f 3f       	cpi	r24, 0xFF	; 255
   1bb32:	ff ef       	ldi	r31, 0xFF	; 255
   1bb34:	9f 07       	cpc	r25, r31
   1bb36:	a1 f4       	brne	.+40     	; 0x1bb60 <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb38:	ce 01       	movw	r24, r28
   1bb3a:	0e 94 a3 ca 	call	0x19546	; 0x19546 <lif_close_volume>
    // Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1bb3e:	ed b7       	in	r30, 0x3d	; 61
   1bb40:	fe b7       	in	r31, 0x3e	; 62
   1bb42:	17 83       	std	Z+7, r17	; 0x07
   1bb44:	06 83       	std	Z+6, r16	; 0x06
   1bb46:	f5 82       	std	Z+5, r15	; 0x05
   1bb48:	e4 82       	std	Z+4, r14	; 0x04
   1bb4a:	87 e0       	ldi	r24, 0x07	; 7
   1bb4c:	92 e3       	ldi	r25, 0x32	; 50
   1bb4e:	a0 e0       	ldi	r26, 0x00	; 0
   1bb50:	81 83       	std	Z+1, r24	; 0x01
   1bb52:	92 83       	std	Z+2, r25	; 0x02
   1bb54:	a3 83       	std	Z+3, r26	; 0x03
   1bb56:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        return(0);
   1bb5a:	80 e0       	ldi	r24, 0x00	; 0
   1bb5c:	90 e0       	ldi	r25, 0x00	; 0
   1bb5e:	32 c0       	rjmp	.+100    	; 0x1bbc4 <lif_del_file+0x120>
    }


// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1bb60:	2a a1       	ldd	r18, Y+34	; 0x22
   1bb62:	3b a1       	ldd	r19, Y+35	; 0x23
   1bb64:	21 50       	subi	r18, 0x01	; 1
   1bb66:	31 09       	sbc	r19, r1
   1bb68:	fe 01       	movw	r30, r28
   1bb6a:	e6 5a       	subi	r30, 0xA6	; 166
   1bb6c:	ff 4f       	sbci	r31, 0xFF	; 255
   1bb6e:	82 17       	cp	r24, r18
   1bb70:	93 07       	cpc	r25, r19
   1bb72:	2c f0       	brlt	.+10     	; 0x1bb7e <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1bb74:	2f ef       	ldi	r18, 0xFF	; 255
   1bb76:	3f ef       	ldi	r19, 0xFF	; 255
   1bb78:	31 83       	std	Z+1, r19	; 0x01
   1bb7a:	20 83       	st	Z, r18
   1bb7c:	02 c0       	rjmp	.+4      	; 0x1bb82 <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1bb7e:	11 82       	std	Z+1, r1	; 0x01
   1bb80:	10 82       	st	Z, r1

    // re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1bb82:	bc 01       	movw	r22, r24
   1bb84:	ce 01       	movw	r24, r28
   1bb86:	0e 94 98 cb 	call	0x19730	; 0x19730 <lif_writedirindex>
   1bb8a:	89 2b       	or	r24, r25
   1bb8c:	21 f4       	brne	.+8      	; 0x1bb96 <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb8e:	ce 01       	movw	r24, r28
   1bb90:	0e 94 a3 ca 	call	0x19546	; 0x19546 <lif_close_volume>
   1bb94:	15 c0       	rjmp	.+42     	; 0x1bbc0 <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1bb96:	ce 01       	movw	r24, r28
   1bb98:	0e 94 0c cc 	call	0x19818	; 0x19818 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb9c:	ce 01       	movw	r24, r28
   1bb9e:	0e 94 a3 ca 	call	0x19546	; 0x19546 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1bba2:	ed b7       	in	r30, 0x3d	; 61
   1bba4:	fe b7       	in	r31, 0x3e	; 62
   1bba6:	15 83       	std	Z+5, r17	; 0x05
   1bba8:	04 83       	std	Z+4, r16	; 0x04
   1bbaa:	88 ef       	ldi	r24, 0xF8	; 248
   1bbac:	91 e3       	ldi	r25, 0x31	; 49
   1bbae:	a0 e0       	ldi	r26, 0x00	; 0
   1bbb0:	81 83       	std	Z+1, r24	; 0x01
   1bbb2:	92 83       	std	Z+2, r25	; 0x02
   1bbb4:	a3 83       	std	Z+3, r26	; 0x03
   1bbb6:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

    return(1);
   1bbba:	81 e0       	ldi	r24, 0x01	; 1
   1bbbc:	90 e0       	ldi	r25, 0x00	; 0
   1bbbe:	02 c0       	rjmp	.+4      	; 0x1bbc4 <lif_del_file+0x120>
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1bbc0:	8f ef       	ldi	r24, 0xFF	; 255
   1bbc2:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1bbc4:	cd b7       	in	r28, 0x3d	; 61
   1bbc6:	de b7       	in	r29, 0x3e	; 62
   1bbc8:	27 96       	adiw	r28, 0x07	; 7
   1bbca:	e6 e0       	ldi	r30, 0x06	; 6
   1bbcc:	c7 c6       	rjmp	.+3470   	; 0x1c95c <__epilogue_restores__+0x18>

0001bbce <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1bbce:	a7 e0       	ldi	r26, 0x07	; 7
   1bbd0:	b0 e0       	ldi	r27, 0x00	; 0
   1bbd2:	ec ee       	ldi	r30, 0xEC	; 236
   1bbd4:	fd ed       	ldi	r31, 0xDD	; 221
   1bbd6:	a2 c6       	rjmp	.+3396   	; 0x1c91c <__prologue_saves__+0x10>
   1bbd8:	6c 01       	movw	r12, r24
   1bbda:	8b 01       	movw	r16, r22
   1bbdc:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1bbde:	fc 01       	movw	r30, r24
   1bbe0:	80 81       	ld	r24, Z
   1bbe2:	81 11       	cpse	r24, r1
   1bbe4:	03 c0       	rjmp	.+6      	; 0x1bbec <lif_rename_file+0x1e>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1bbe6:	80 ed       	ldi	r24, 0xD0	; 208
   1bbe8:	91 e3       	ldi	r25, 0x31	; 49
   1bbea:	06 c0       	rjmp	.+12     	; 0x1bbf8 <lif_rename_file+0x2a>
        return(-1);
    }
    if(!*oldlifname)
   1bbec:	fb 01       	movw	r30, r22
   1bbee:	80 81       	ld	r24, Z
   1bbf0:	81 11       	cpse	r24, r1
   1bbf2:	0b c0       	rjmp	.+22     	; 0x1bc0a <lif_rename_file+0x3c>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1bbf4:	89 ea       	ldi	r24, 0xA9	; 169
   1bbf6:	91 e3       	ldi	r25, 0x31	; 49
   1bbf8:	a0 e0       	ldi	r26, 0x00	; 0
   1bbfa:	ed b7       	in	r30, 0x3d	; 61
   1bbfc:	fe b7       	in	r31, 0x3e	; 62
   1bbfe:	81 83       	std	Z+1, r24	; 0x01
   1bc00:	92 83       	std	Z+2, r25	; 0x02
   1bc02:	a3 83       	std	Z+3, r26	; 0x03
   1bc04:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1bc08:	58 c0       	rjmp	.+176    	; 0x1bcba <lif_rename_file+0xec>
        return(-1);
    }
    if(!*newlifname)
   1bc0a:	fa 01       	movw	r30, r20
   1bc0c:	80 81       	ld	r24, Z
   1bc0e:	81 11       	cpse	r24, r1
   1bc10:	03 c0       	rjmp	.+6      	; 0x1bc18 <lif_rename_file+0x4a>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1bc12:	82 e8       	ldi	r24, 0x82	; 130
   1bc14:	91 e3       	ldi	r25, 0x31	; 49
   1bc16:	f0 cf       	rjmp	.-32     	; 0x1bbf8 <lif_rename_file+0x2a>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1bc18:	ca 01       	movw	r24, r20
   1bc1a:	0e 94 ee c2 	call	0x185dc	; 0x185dc <lif_checkname>
   1bc1e:	89 2b       	or	r24, r25
   1bc20:	19 f4       	brne	.+6      	; 0x1bc28 <lif_rename_file+0x5a>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1bc22:	8c e4       	ldi	r24, 0x4C	; 76
   1bc24:	91 e3       	ldi	r25, 0x31	; 49
   1bc26:	e8 cf       	rjmp	.-48     	; 0x1bbf8 <lif_rename_file+0x2a>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1bc28:	68 e2       	ldi	r22, 0x28	; 40
   1bc2a:	78 e0       	ldi	r23, 0x08	; 8
   1bc2c:	c6 01       	movw	r24, r12
   1bc2e:	0e 94 5e d1 	call	0x1a2bc	; 0x1a2bc <lif_open_volume>
   1bc32:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bc34:	00 97       	sbiw	r24, 0x00	; 0
   1bc36:	09 f4       	brne	.+2      	; 0x1bc3a <lif_rename_file+0x6c>
   1bc38:	40 c0       	rjmp	.+128    	; 0x1bcba <lif_rename_file+0xec>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, oldlifname);
   1bc3a:	b8 01       	movw	r22, r16
   1bc3c:	0e 94 2d d4 	call	0x1a85a	; 0x1a85a <lif_find_file>
   1bc40:	5c 01       	movw	r10, r24
    if(index == -1)
   1bc42:	01 96       	adiw	r24, 0x01	; 1
   1bc44:	a1 f4       	brne	.+40     	; 0x1bc6e <lif_rename_file+0xa0>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1bc46:	ed b7       	in	r30, 0x3d	; 61
   1bc48:	fe b7       	in	r31, 0x3e	; 62
   1bc4a:	17 83       	std	Z+7, r17	; 0x07
   1bc4c:	06 83       	std	Z+6, r16	; 0x06
   1bc4e:	d5 82       	std	Z+5, r13	; 0x05
   1bc50:	c4 82       	std	Z+4, r12	; 0x04
   1bc52:	83 e2       	ldi	r24, 0x23	; 35
   1bc54:	91 e3       	ldi	r25, 0x31	; 49
   1bc56:	a0 e0       	ldi	r26, 0x00	; 0
   1bc58:	81 83       	std	Z+1, r24	; 0x01
   1bc5a:	92 83       	std	Z+2, r25	; 0x02
   1bc5c:	a3 83       	std	Z+3, r26	; 0x03
   1bc5e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc62:	ce 01       	movw	r24, r28
   1bc64:	0e 94 a3 ca 	call	0x19546	; 0x19546 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1bc68:	80 e0       	ldi	r24, 0x00	; 0
   1bc6a:	90 e0       	ldi	r25, 0x00	; 0
   1bc6c:	28 c0       	rjmp	.+80     	; 0x1bcbe <lif_rename_file+0xf0>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1bc6e:	4a e0       	ldi	r20, 0x0A	; 10
   1bc70:	50 e0       	ldi	r21, 0x00	; 0
   1bc72:	b7 01       	movw	r22, r14
   1bc74:	ce 01       	movw	r24, r28
   1bc76:	81 5b       	subi	r24, 0xB1	; 177
   1bc78:	9f 4f       	sbci	r25, 0xFF	; 255
   1bc7a:	0e 94 28 c3 	call	0x18650	; 0x18650 <lif_fixname>

    // re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1bc7e:	b5 01       	movw	r22, r10
   1bc80:	ce 01       	movw	r24, r28
   1bc82:	0e 94 98 cb 	call	0x19730	; 0x19730 <lif_writedirindex>
   1bc86:	89 2b       	or	r24, r25
   1bc88:	21 f4       	brne	.+8      	; 0x1bc92 <lif_rename_file+0xc4>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc8a:	ce 01       	movw	r24, r28
   1bc8c:	0e 94 a3 ca 	call	0x19546	; 0x19546 <lif_close_volume>
   1bc90:	14 c0       	rjmp	.+40     	; 0x1bcba <lif_rename_file+0xec>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1bc92:	ed b7       	in	r30, 0x3d	; 61
   1bc94:	fe b7       	in	r31, 0x3e	; 62
   1bc96:	f7 82       	std	Z+7, r15	; 0x07
   1bc98:	e6 82       	std	Z+6, r14	; 0x06
   1bc9a:	15 83       	std	Z+5, r17	; 0x05
   1bc9c:	04 83       	std	Z+4, r16	; 0x04
   1bc9e:	8c e0       	ldi	r24, 0x0C	; 12
   1bca0:	91 e3       	ldi	r25, 0x31	; 49
   1bca2:	a0 e0       	ldi	r26, 0x00	; 0
   1bca4:	81 83       	std	Z+1, r24	; 0x01
   1bca6:	92 83       	std	Z+2, r25	; 0x02
   1bca8:	a3 83       	std	Z+3, r26	; 0x03
   1bcaa:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bcae:	ce 01       	movw	r24, r28
   1bcb0:	0e 94 a3 ca 	call	0x19546	; 0x19546 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1bcb4:	81 e0       	ldi	r24, 0x01	; 1
   1bcb6:	90 e0       	ldi	r25, 0x00	; 0
   1bcb8:	02 c0       	rjmp	.+4      	; 0x1bcbe <lif_rename_file+0xf0>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1bcba:	8f ef       	ldi	r24, 0xFF	; 255
   1bcbc:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1bcbe:	cd b7       	in	r28, 0x3d	; 61
   1bcc0:	de b7       	in	r29, 0x3e	; 62
   1bcc2:	27 96       	adiw	r28, 0x07	; 7
   1bcc4:	ea e0       	ldi	r30, 0x0A	; 10
   1bcc6:	46 c6       	rjmp	.+3212   	; 0x1c954 <__epilogue_restores__+0x10>

0001bcc8 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1bcc8:	4f 92       	push	r4
   1bcca:	5f 92       	push	r5
   1bccc:	6f 92       	push	r6
   1bcce:	7f 92       	push	r7
   1bcd0:	af 92       	push	r10
   1bcd2:	bf 92       	push	r11
   1bcd4:	cf 92       	push	r12
   1bcd6:	df 92       	push	r13
   1bcd8:	ef 92       	push	r14
   1bcda:	ff 92       	push	r15
   1bcdc:	0f 93       	push	r16
   1bcde:	1f 93       	push	r17
   1bce0:	cf 93       	push	r28
   1bce2:	df 93       	push	r29
   1bce4:	ad b7       	in	r26, 0x3d	; 61
   1bce6:	be b7       	in	r27, 0x3e	; 62
   1bce8:	17 97       	sbiw	r26, 0x07	; 7
   1bcea:	0f b6       	in	r0, 0x3f	; 63
   1bcec:	f8 94       	cli
   1bcee:	be bf       	out	0x3e, r27	; 62
   1bcf0:	0f be       	out	0x3f, r0	; 63
   1bcf2:	ad bf       	out	0x3d, r26	; 61
   1bcf4:	27 01       	movw	r4, r14
   1bcf6:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1bcf8:	dc 01       	movw	r26, r24
   1bcfa:	ec 91       	ld	r30, X
   1bcfc:	e1 11       	cpse	r30, r1
   1bcfe:	03 c0       	rjmp	.+6      	; 0x1bd06 <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1bd00:	83 ee       	ldi	r24, 0xE3	; 227
   1bd02:	90 e3       	ldi	r25, 0x30	; 48
   1bd04:	16 c0       	rjmp	.+44     	; 0x1bd32 <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1bd06:	db 01       	movw	r26, r22
   1bd08:	ec 91       	ld	r30, X
   1bd0a:	e1 11       	cpse	r30, r1
   1bd0c:	03 c0       	rjmp	.+6      	; 0x1bd14 <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1bd0e:	8e eb       	ldi	r24, 0xBE	; 190
   1bd10:	90 e3       	ldi	r25, 0x30	; 48
   1bd12:	0f c0       	rjmp	.+30     	; 0x1bd32 <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1bd14:	21 15       	cp	r18, r1
   1bd16:	31 05       	cpc	r19, r1
   1bd18:	41 05       	cpc	r20, r1
   1bd1a:	51 05       	cpc	r21, r1
   1bd1c:	19 f4       	brne	.+6      	; 0x1bd24 <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1bd1e:	8b e9       	ldi	r24, 0x9B	; 155
   1bd20:	90 e3       	ldi	r25, 0x30	; 48
   1bd22:	07 c0       	rjmp	.+14     	; 0x1bd32 <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1bd24:	e1 14       	cp	r14, r1
   1bd26:	f1 04       	cpc	r15, r1
   1bd28:	01 05       	cpc	r16, r1
   1bd2a:	11 05       	cpc	r17, r1
   1bd2c:	59 f4       	brne	.+22     	; 0x1bd44 <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1bd2e:	8b e7       	ldi	r24, 0x7B	; 123
   1bd30:	90 e3       	ldi	r25, 0x30	; 48
   1bd32:	a0 e0       	ldi	r26, 0x00	; 0
   1bd34:	ed b7       	in	r30, 0x3d	; 61
   1bd36:	fe b7       	in	r31, 0x3e	; 62
   1bd38:	81 83       	std	Z+1, r24	; 0x01
   1bd3a:	92 83       	std	Z+2, r25	; 0x02
   1bd3c:	a3 83       	std	Z+3, r26	; 0x03
   1bd3e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1bd42:	2b c0       	rjmp	.+86     	; 0x1bd9a <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1bd44:	67 01       	movw	r12, r14
   1bd46:	78 01       	movw	r14, r16
   1bd48:	f2 e0       	ldi	r31, 0x02	; 2
   1bd4a:	cf 1a       	sub	r12, r31
   1bd4c:	d1 08       	sbc	r13, r1
   1bd4e:	e1 08       	sbc	r14, r1
   1bd50:	f1 08       	sbc	r15, r1
   1bd52:	56 01       	movw	r10, r12
   1bd54:	67 01       	movw	r12, r14
   1bd56:	a2 1a       	sub	r10, r18
   1bd58:	b3 0a       	sbc	r11, r19
   1bd5a:	c4 0a       	sbc	r12, r20
   1bd5c:	d5 0a       	sbc	r13, r21
   1bd5e:	79 01       	movw	r14, r18
   1bd60:	8a 01       	movw	r16, r20
   1bd62:	22 e0       	ldi	r18, 0x02	; 2
   1bd64:	30 e0       	ldi	r19, 0x00	; 0
   1bd66:	40 e0       	ldi	r20, 0x00	; 0
   1bd68:	50 e0       	ldi	r21, 0x00	; 0
   1bd6a:	0e 94 14 cd 	call	0x19a28	; 0x19a28 <lif_create_volume>
    if(LIF == NULL)
   1bd6e:	00 97       	sbiw	r24, 0x00	; 0
   1bd70:	a1 f0       	breq	.+40     	; 0x1bd9a <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1bd72:	0e 94 a3 ca 	call	0x19546	; 0x19546 <lif_close_volume>

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
   1bd76:	82 01       	movw	r16, r4
   1bd78:	d6 2d       	mov	r29, r6
   1bd7a:	c7 2d       	mov	r28, r7
   1bd7c:	ed b7       	in	r30, 0x3d	; 61
   1bd7e:	fe b7       	in	r31, 0x3e	; 62
   1bd80:	44 82       	std	Z+4, r4	; 0x04
   1bd82:	15 83       	std	Z+5, r17	; 0x05
   1bd84:	66 82       	std	Z+6, r6	; 0x06
   1bd86:	77 82       	std	Z+7, r7	; 0x07
   1bd88:	8b e5       	ldi	r24, 0x5B	; 91
   1bd8a:	90 e3       	ldi	r25, 0x30	; 48
   1bd8c:	a0 e0       	ldi	r26, 0x00	; 0
   1bd8e:	81 83       	std	Z+1, r24	; 0x01
   1bd90:	92 83       	std	Z+2, r25	; 0x02
   1bd92:	a3 83       	std	Z+3, r26	; 0x03
   1bd94:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    return(end);
   1bd98:	04 c0       	rjmp	.+8      	; 0x1bda2 <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1bd9a:	0f ef       	ldi	r16, 0xFF	; 255
   1bd9c:	1f ef       	ldi	r17, 0xFF	; 255
   1bd9e:	df ef       	ldi	r29, 0xFF	; 255
   1bda0:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
    return(end);
}
   1bda2:	b8 01       	movw	r22, r16
   1bda4:	8d 2f       	mov	r24, r29
   1bda6:	9c 2f       	mov	r25, r28
   1bda8:	ad b7       	in	r26, 0x3d	; 61
   1bdaa:	be b7       	in	r27, 0x3e	; 62
   1bdac:	17 96       	adiw	r26, 0x07	; 7
   1bdae:	0f b6       	in	r0, 0x3f	; 63
   1bdb0:	f8 94       	cli
   1bdb2:	be bf       	out	0x3e, r27	; 62
   1bdb4:	0f be       	out	0x3f, r0	; 63
   1bdb6:	ad bf       	out	0x3d, r26	; 61
   1bdb8:	df 91       	pop	r29
   1bdba:	cf 91       	pop	r28
   1bdbc:	1f 91       	pop	r17
   1bdbe:	0f 91       	pop	r16
   1bdc0:	ff 90       	pop	r15
   1bdc2:	ef 90       	pop	r14
   1bdc4:	df 90       	pop	r13
   1bdc6:	cf 90       	pop	r12
   1bdc8:	bf 90       	pop	r11
   1bdca:	af 90       	pop	r10
   1bdcc:	7f 90       	pop	r7
   1bdce:	6f 90       	pop	r6
   1bdd0:	5f 90       	pop	r5
   1bdd2:	4f 90       	pop	r4
   1bdd4:	08 95       	ret

0001bdd6 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1bdd6:	8f 92       	push	r8
   1bdd8:	9f 92       	push	r9
   1bdda:	af 92       	push	r10
   1bddc:	bf 92       	push	r11
   1bdde:	ef 92       	push	r14
   1bde0:	ff 92       	push	r15
   1bde2:	0f 93       	push	r16
   1bde4:	1f 93       	push	r17
   1bde6:	cf 93       	push	r28
   1bde8:	df 93       	push	r29
   1bdea:	00 d0       	rcall	.+0      	; 0x1bdec <lif_tests+0x16>
   1bdec:	00 d0       	rcall	.+0      	; 0x1bdee <lif_tests+0x18>
   1bdee:	1f 92       	push	r1
        printf("%d:%s\n", i, argv[i]);
    printf("\n");
#endif

	// Nothing to do ?
	if(argc < 2)
   1bdf0:	82 30       	cpi	r24, 0x02	; 2
   1bdf2:	91 05       	cpc	r25, r1
   1bdf4:	0c f4       	brge	.+2      	; 0x1bdf8 <lif_tests+0x22>
   1bdf6:	17 c1       	rjmp	.+558    	; 0x1c026 <lif_tests+0x250>
		return (1);

    // Argument 1
    ind = 1;
	ptr = argv[ind++];
   1bdf8:	fb 01       	movw	r30, r22
   1bdfa:	02 81       	ldd	r16, Z+2	; 0x02
   1bdfc:	13 81       	ldd	r17, Z+3	; 0x03

	// Argument 1 missing ?
    //        Nothing to do
	// argc should really get this 
    if(!ptr || !*ptr)
   1bdfe:	01 15       	cp	r16, r1
   1be00:	11 05       	cpc	r17, r1
   1be02:	09 f4       	brne	.+2      	; 0x1be06 <lif_tests+0x30>
   1be04:	10 c1       	rjmp	.+544    	; 0x1c026 <lif_tests+0x250>
   1be06:	f8 01       	movw	r30, r16
   1be08:	20 81       	ld	r18, Z
   1be0a:	22 23       	and	r18, r18
   1be0c:	09 f4       	brne	.+2      	; 0x1be10 <lif_tests+0x3a>
   1be0e:	0b c1       	rjmp	.+534    	; 0x1c026 <lif_tests+0x250>
   1be10:	eb 01       	movw	r28, r22
   1be12:	7c 01       	movw	r14, r24
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1be14:	6e eb       	ldi	r22, 0xBE	; 190
   1be16:	75 e1       	ldi	r23, 0x15	; 21
   1be18:	c8 01       	movw	r24, r16
   1be1a:	0e 94 59 33 	call	0x66b2	; 0x66b2 <MATCH>
   1be1e:	89 2b       	or	r24, r25
   1be20:	29 f0       	breq	.+10     	; 0x1be2c <lif_tests+0x56>
    {
        lif_help(1);
   1be22:	81 e0       	ldi	r24, 0x01	; 1
   1be24:	90 e0       	ldi	r25, 0x00	; 0
   1be26:	0e 94 c8 c0 	call	0x18190	; 0x18190 <lif_help>
   1be2a:	fd c0       	rjmp	.+506    	; 0x1c026 <lif_tests+0x250>
    //        Nothing to do
	// argc should really get this 
    if(!ptr || !*ptr)
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1be2c:	6d eb       	ldi	r22, 0xBD	; 189
   1be2e:	75 e1       	ldi	r23, 0x15	; 21
   1be30:	c8 01       	movw	r24, r16
   1be32:	0e 94 59 33 	call	0x66b2	; 0x66b2 <MATCH>
   1be36:	89 2b       	or	r24, r25
   1be38:	a1 f7       	brne	.-24     	; 0x1be22 <lif_tests+0x4c>
   1be3a:	63 ec       	ldi	r22, 0xC3	; 195
   1be3c:	75 e1       	ldi	r23, 0x15	; 21
   1be3e:	c8 01       	movw	r24, r16
   1be40:	0e 94 59 33 	call	0x66b2	; 0x66b2 <MATCH>
   1be44:	89 2b       	or	r24, r25
   1be46:	69 f7       	brne	.-38     	; 0x1be22 <lif_tests+0x4c>
        return(1);
    }

	// Turn one debugging
	// in the future we can add tests for specific messages
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1be48:	97 01       	movw	r18, r14
   1be4a:	42 e0       	ldi	r20, 0x02	; 2
   1be4c:	50 e0       	ldi	r21, 0x00	; 0
   1be4e:	66 ec       	ldi	r22, 0xC6	; 198
   1be50:	75 e1       	ldi	r23, 0x15	; 21
   1be52:	c8 01       	movw	r24, r16
   1be54:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   1be58:	89 2b       	or	r24, r25
   1be5a:	39 f0       	breq	.+14     	; 0x1be6a <lif_tests+0x94>
    {
		debuglevel = 0xffff;
   1be5c:	8f ef       	ldi	r24, 0xFF	; 255
   1be5e:	9f ef       	ldi	r25, 0xFF	; 255
   1be60:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <debuglevel+0x1>
   1be64:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <debuglevel>
   1be68:	de c0       	rjmp	.+444    	; 0x1c026 <lif_tests+0x250>
        return(1);
		ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1be6a:	97 01       	movw	r18, r14
   1be6c:	45 e0       	ldi	r20, 0x05	; 5
   1be6e:	50 e0       	ldi	r21, 0x00	; 0
   1be70:	69 ec       	ldi	r22, 0xC9	; 201
   1be72:	75 e1       	ldi	r23, 0x15	; 21
   1be74:	c8 01       	movw	r24, r16
   1be76:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   1be7a:	89 2b       	or	r24, r25
   1be7c:	41 f0       	breq	.+16     	; 0x1be8e <lif_tests+0xb8>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1be7e:	48 85       	ldd	r20, Y+8	; 0x08
   1be80:	59 85       	ldd	r21, Y+9	; 0x09
   1be82:	6e 81       	ldd	r22, Y+6	; 0x06
   1be84:	7f 81       	ldd	r23, Y+7	; 0x07
   1be86:	8c 81       	ldd	r24, Y+4	; 0x04
   1be88:	9d 81       	ldd	r25, Y+5	; 0x05
   1be8a:	83 dc       	rcall	.-1786   	; 0x1b792 <lif_add_lif_file>
   1be8c:	cc c0       	rjmp	.+408    	; 0x1c026 <lif_tests+0x250>

        return(1);
    }
    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1be8e:	97 01       	movw	r18, r14
   1be90:	45 e0       	ldi	r20, 0x05	; 5
   1be92:	50 e0       	ldi	r21, 0x00	; 0
   1be94:	60 ed       	ldi	r22, 0xD0	; 208
   1be96:	75 e1       	ldi	r23, 0x15	; 21
   1be98:	c8 01       	movw	r24, r16
   1be9a:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   1be9e:	89 2b       	or	r24, r25
   1bea0:	49 f0       	breq	.+18     	; 0x1beb4 <lif_tests+0xde>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1bea2:	48 85       	ldd	r20, Y+8	; 0x08
   1bea4:	59 85       	ldd	r21, Y+9	; 0x09
   1bea6:	6e 81       	ldd	r22, Y+6	; 0x06
   1bea8:	7f 81       	ldd	r23, Y+7	; 0x07
   1beaa:	8c 81       	ldd	r24, Y+4	; 0x04
   1beac:	9d 81       	ldd	r25, Y+5	; 0x05
   1beae:	0e 94 a6 d6 	call	0x1ad4c	; 0x1ad4c <lif_add_ascii_file_as_e010>
   1beb2:	b9 c0       	rjmp	.+370    	; 0x1c026 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1beb4:	97 01       	movw	r18, r14
   1beb6:	45 e0       	ldi	r20, 0x05	; 5
   1beb8:	50 e0       	ldi	r21, 0x00	; 0
   1beba:	64 ed       	ldi	r22, 0xD4	; 212
   1bebc:	75 e1       	ldi	r23, 0x15	; 21
   1bebe:	c8 01       	movw	r24, r16
   1bec0:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   1bec4:	89 2b       	or	r24, r25
   1bec6:	e1 f1       	breq	.+120    	; 0x1bf40 <lif_tests+0x16a>
    {
		///@brief format LIF image
		long dir,sectors;
		char *name = argv[ind];
   1bec8:	ac 80       	ldd	r10, Y+4	; 0x04
   1beca:	bd 80       	ldd	r11, Y+5	; 0x05
		char *label = argv[ind+1];
   1becc:	8e 80       	ldd	r8, Y+6	; 0x06
   1bece:	9f 80       	ldd	r9, Y+7	; 0x07
		char *model = argv[ind+2];
   1bed0:	08 84       	ldd	r0, Y+8	; 0x08
   1bed2:	d9 85       	ldd	r29, Y+9	; 0x09
   1bed4:	c0 2d       	mov	r28, r0
		if( MATCHI_LEN(model,"hp"))
   1bed6:	6f ed       	ldi	r22, 0xDF	; 223
   1bed8:	75 e1       	ldi	r23, 0x15	; 21
   1beda:	ce 01       	movw	r24, r28
   1bedc:	0e 94 ab 33 	call	0x6756	; 0x6756 <MATCHI_LEN>
   1bee0:	89 2b       	or	r24, r25
   1bee2:	09 f0       	breq	.+2      	; 0x1bee6 <lif_tests+0x110>
			model +=2;
   1bee4:	22 96       	adiw	r28, 0x02	; 2
		if(hpdir_find_drive(model,0, 0))
   1bee6:	40 e0       	ldi	r20, 0x00	; 0
   1bee8:	50 e0       	ldi	r21, 0x00	; 0
   1beea:	60 e0       	ldi	r22, 0x00	; 0
   1beec:	70 e0       	ldi	r23, 0x00	; 0
   1beee:	ce 01       	movw	r24, r28
   1bef0:	0e 94 c7 a4 	call	0x1498e	; 0x1498e <hpdir_find_drive>
   1bef4:	89 2b       	or	r24, r25
   1bef6:	b9 f0       	breq	.+46     	; 0x1bf26 <lif_tests+0x150>
		{
			dir = lif_dir_count(hpdir.BLOCKS);
   1bef8:	60 91 3c 21 	lds	r22, 0x213C	; 0x80213c <hpdir+0xac>
   1befc:	70 91 3d 21 	lds	r23, 0x213D	; 0x80213d <hpdir+0xad>
   1bf00:	80 91 3e 21 	lds	r24, 0x213E	; 0x80213e <hpdir+0xae>
   1bf04:	90 91 3f 21 	lds	r25, 0x213F	; 0x80213f <hpdir+0xaf>
   1bf08:	0e 94 aa a4 	call	0x14954	; 0x14954 <lif_dir_count>
   1bf0c:	9b 01       	movw	r18, r22
   1bf0e:	ac 01       	movw	r20, r24
			sectors = hpdir.BLOCKS;
			lif_create_image(name, label, dir, sectors);
   1bf10:	e0 90 3c 21 	lds	r14, 0x213C	; 0x80213c <hpdir+0xac>
   1bf14:	f0 90 3d 21 	lds	r15, 0x213D	; 0x80213d <hpdir+0xad>
   1bf18:	00 91 3e 21 	lds	r16, 0x213E	; 0x80213e <hpdir+0xae>
   1bf1c:	10 91 3f 21 	lds	r17, 0x213F	; 0x80213f <hpdir+0xaf>
   1bf20:	b4 01       	movw	r22, r8
   1bf22:	c5 01       	movw	r24, r10
   1bf24:	29 c0       	rjmp	.+82     	; 0x1bf78 <lif_tests+0x1a2>
			return(1);
		}
		printf("Disk: %s not found in hpdir.ini\n", model);
   1bf26:	ed b7       	in	r30, 0x3d	; 61
   1bf28:	fe b7       	in	r31, 0x3e	; 62
   1bf2a:	d5 83       	std	Z+5, r29	; 0x05
   1bf2c:	c4 83       	std	Z+4, r28	; 0x04
   1bf2e:	8f e8       	ldi	r24, 0x8F	; 143
   1bf30:	92 e4       	ldi	r25, 0x42	; 66
   1bf32:	a0 e0       	ldi	r26, 0x00	; 0
   1bf34:	81 83       	std	Z+1, r24	; 0x01
   1bf36:	92 83       	std	Z+2, r25	; 0x02
   1bf38:	a3 83       	std	Z+3, r26	; 0x03
   1bf3a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1bf3e:	73 c0       	rjmp	.+230    	; 0x1c026 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1bf40:	97 01       	movw	r18, r14
   1bf42:	46 e0       	ldi	r20, 0x06	; 6
   1bf44:	50 e0       	ldi	r21, 0x00	; 0
   1bf46:	62 ee       	ldi	r22, 0xE2	; 226
   1bf48:	75 e1       	ldi	r23, 0x15	; 21
   1bf4a:	c8 01       	movw	r24, r16
   1bf4c:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   1bf50:	89 2b       	or	r24, r25
   1bf52:	a1 f0       	breq	.+40     	; 0x1bf7c <lif_tests+0x1a6>
    {
        ///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1bf54:	88 85       	ldd	r24, Y+8	; 0x08
   1bf56:	99 85       	ldd	r25, Y+9	; 0x09
   1bf58:	0e 94 04 48 	call	0x9008	; 0x9008 <atol>
   1bf5c:	4b 01       	movw	r8, r22
   1bf5e:	5c 01       	movw	r10, r24
   1bf60:	8a 85       	ldd	r24, Y+10	; 0x0a
   1bf62:	9b 85       	ldd	r25, Y+11	; 0x0b
   1bf64:	0e 94 04 48 	call	0x9008	; 0x9008 <atol>
   1bf68:	7b 01       	movw	r14, r22
   1bf6a:	8c 01       	movw	r16, r24
   1bf6c:	6e 81       	ldd	r22, Y+6	; 0x06
   1bf6e:	7f 81       	ldd	r23, Y+7	; 0x07
   1bf70:	a5 01       	movw	r20, r10
   1bf72:	94 01       	movw	r18, r8
   1bf74:	8c 81       	ldd	r24, Y+4	; 0x04
   1bf76:	9d 81       	ldd	r25, Y+5	; 0x05
   1bf78:	a7 de       	rcall	.-690    	; 0x1bcc8 <lif_create_image>
   1bf7a:	55 c0       	rjmp	.+170    	; 0x1c026 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1bf7c:	97 01       	movw	r18, r14
   1bf7e:	44 e0       	ldi	r20, 0x04	; 4
   1bf80:	50 e0       	ldi	r21, 0x00	; 0
   1bf82:	69 ee       	ldi	r22, 0xE9	; 233
   1bf84:	75 e1       	ldi	r23, 0x15	; 21
   1bf86:	c8 01       	movw	r24, r16
   1bf88:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   1bf8c:	89 2b       	or	r24, r25
   1bf8e:	31 f0       	breq	.+12     	; 0x1bf9c <lif_tests+0x1c6>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1bf90:	6e 81       	ldd	r22, Y+6	; 0x06
   1bf92:	7f 81       	ldd	r23, Y+7	; 0x07
   1bf94:	8c 81       	ldd	r24, Y+4	; 0x04
   1bf96:	9d 81       	ldd	r25, Y+5	; 0x05
   1bf98:	85 dd       	rcall	.-1270   	; 0x1baa4 <lif_del_file>
   1bf9a:	45 c0       	rjmp	.+138    	; 0x1c026 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1bf9c:	97 01       	movw	r18, r14
   1bf9e:	43 e0       	ldi	r20, 0x03	; 3
   1bfa0:	50 e0       	ldi	r21, 0x00	; 0
   1bfa2:	68 ef       	ldi	r22, 0xF8	; 248
   1bfa4:	7a e0       	ldi	r23, 0x0A	; 10
   1bfa6:	c8 01       	movw	r24, r16
   1bfa8:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   1bfac:	89 2b       	or	r24, r25
   1bfae:	29 f0       	breq	.+10     	; 0x1bfba <lif_tests+0x1e4>
    {
        lif_dir(argv[ind]);
   1bfb0:	8c 81       	ldd	r24, Y+4	; 0x04
   1bfb2:	9d 81       	ldd	r25, Y+5	; 0x05
   1bfb4:	0e 94 58 d2 	call	0x1a4b0	; 0x1a4b0 <lif_dir>
   1bfb8:	36 c0       	rjmp	.+108    	; 0x1c026 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1bfba:	97 01       	movw	r18, r14
   1bfbc:	45 e0       	ldi	r20, 0x05	; 5
   1bfbe:	50 e0       	ldi	r21, 0x00	; 0
   1bfc0:	6d ee       	ldi	r22, 0xED	; 237
   1bfc2:	75 e1       	ldi	r23, 0x15	; 21
   1bfc4:	c8 01       	movw	r24, r16
   1bfc6:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   1bfca:	89 2b       	or	r24, r25
   1bfcc:	41 f0       	breq	.+16     	; 0x1bfde <lif_tests+0x208>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1bfce:	48 85       	ldd	r20, Y+8	; 0x08
   1bfd0:	59 85       	ldd	r21, Y+9	; 0x09
   1bfd2:	6e 81       	ldd	r22, Y+6	; 0x06
   1bfd4:	7f 81       	ldd	r23, Y+7	; 0x07
   1bfd6:	8c 81       	ldd	r24, Y+4	; 0x04
   1bfd8:	9d 81       	ldd	r25, Y+5	; 0x05
   1bfda:	a3 da       	rcall	.-2746   	; 0x1b522 <lif_extract_lif_as_lif>
   1bfdc:	24 c0       	rjmp	.+72     	; 0x1c026 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1bfde:	97 01       	movw	r18, r14
   1bfe0:	45 e0       	ldi	r20, 0x05	; 5
   1bfe2:	50 e0       	ldi	r21, 0x00	; 0
   1bfe4:	68 ef       	ldi	r22, 0xF8	; 248
   1bfe6:	75 e1       	ldi	r23, 0x15	; 21
   1bfe8:	c8 01       	movw	r24, r16
   1bfea:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   1bfee:	89 2b       	or	r24, r25
   1bff0:	49 f0       	breq	.+18     	; 0x1c004 <lif_tests+0x22e>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1bff2:	48 85       	ldd	r20, Y+8	; 0x08
   1bff4:	59 85       	ldd	r21, Y+9	; 0x09
   1bff6:	6e 81       	ldd	r22, Y+6	; 0x06
   1bff8:	7f 81       	ldd	r23, Y+7	; 0x07
   1bffa:	8c 81       	ldd	r24, Y+4	; 0x04
   1bffc:	9d 81       	ldd	r25, Y+5	; 0x05
   1bffe:	0e 94 e2 d7 	call	0x1afc4	; 0x1afc4 <lif_extract_e010_as_ascii>
   1c002:	11 c0       	rjmp	.+34     	; 0x1c026 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1c004:	97 01       	movw	r18, r14
   1c006:	45 e0       	ldi	r20, 0x05	; 5
   1c008:	50 e0       	ldi	r21, 0x00	; 0
   1c00a:	65 e0       	ldi	r22, 0x05	; 5
   1c00c:	7b e0       	ldi	r23, 0x0B	; 11
   1c00e:	c8 01       	movw	r24, r16
   1c010:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   1c014:	00 97       	sbiw	r24, 0x00	; 0
   1c016:	49 f0       	breq	.+18     	; 0x1c02a <lif_tests+0x254>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1c018:	48 85       	ldd	r20, Y+8	; 0x08
   1c01a:	59 85       	ldd	r21, Y+9	; 0x09
   1c01c:	6e 81       	ldd	r22, Y+6	; 0x06
   1c01e:	7f 81       	ldd	r23, Y+7	; 0x07
   1c020:	8c 81       	ldd	r24, Y+4	; 0x04
   1c022:	9d 81       	ldd	r25, Y+5	; 0x05
   1c024:	d4 dd       	rcall	.-1112   	; 0x1bbce <lif_rename_file>
    printf("\n");
#endif

	// Nothing to do ?
	if(argc < 2)
		return (1);
   1c026:	81 e0       	ldi	r24, 0x01	; 1
   1c028:	90 e0       	ldi	r25, 0x00	; 0
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1c02a:	0f 90       	pop	r0
   1c02c:	0f 90       	pop	r0
   1c02e:	0f 90       	pop	r0
   1c030:	0f 90       	pop	r0
   1c032:	0f 90       	pop	r0
   1c034:	df 91       	pop	r29
   1c036:	cf 91       	pop	r28
   1c038:	1f 91       	pop	r17
   1c03a:	0f 91       	pop	r16
   1c03c:	ff 90       	pop	r15
   1c03e:	ef 90       	pop	r14
   1c040:	bf 90       	pop	r11
   1c042:	af 90       	pop	r10
   1c044:	9f 90       	pop	r9
   1c046:	8f 90       	pop	r8
   1c048:	08 95       	ret

0001c04a <copyright>:
#include <math.h>

///@brief Display Copyright
///@return void
void copyright()
{
   1c04a:	00 d0       	rcall	.+0      	; 0x1c04c <copyright+0x2>
   1c04c:	00 d0       	rcall	.+0      	; 0x1c04e <copyright+0x4>
   1c04e:	1f 92       	push	r1
    printf("Stand alone version of LIF utilities for linux\n");
   1c050:	8b ef       	ldi	r24, 0xFB	; 251
   1c052:	97 e4       	ldi	r25, 0x47	; 71
   1c054:	a0 e0       	ldi	r26, 0x00	; 0
   1c056:	ed b7       	in	r30, 0x3d	; 61
   1c058:	fe b7       	in	r31, 0x3e	; 62
   1c05a:	81 83       	std	Z+1, r24	; 0x01
   1c05c:	92 83       	std	Z+2, r25	; 0x02
   1c05e:	a3 83       	std	Z+3, r26	; 0x03
   1c060:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1c064:	8c ed       	ldi	r24, 0xDC	; 220
   1c066:	97 e4       	ldi	r25, 0x47	; 71
   1c068:	a0 e0       	ldi	r26, 0x00	; 0
   1c06a:	ed b7       	in	r30, 0x3d	; 61
   1c06c:	fe b7       	in	r31, 0x3e	; 62
   1c06e:	81 83       	std	Z+1, r24	; 0x01
   1c070:	92 83       	std	Z+2, r25	; 0x02
   1c072:	a3 83       	std	Z+3, r26	; 0x03
   1c074:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1c078:	8f eb       	ldi	r24, 0xBF	; 191
   1c07a:	97 e4       	ldi	r25, 0x47	; 71
   1c07c:	a0 e0       	ldi	r26, 0x00	; 0
   1c07e:	ed b7       	in	r30, 0x3d	; 61
   1c080:	fe b7       	in	r31, 0x3e	; 62
   1c082:	81 83       	std	Z+1, r24	; 0x01
   1c084:	92 83       	std	Z+2, r25	; 0x02
   1c086:	a3 83       	std	Z+3, r26	; 0x03
   1c088:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf(" GNU version 3\n");
   1c08c:	8f ea       	ldi	r24, 0xAF	; 175
   1c08e:	97 e4       	ldi	r25, 0x47	; 71
   1c090:	a0 e0       	ldi	r26, 0x00	; 0
   1c092:	ed b7       	in	r30, 0x3d	; 61
   1c094:	fe b7       	in	r31, 0x3e	; 62
   1c096:	81 83       	std	Z+1, r24	; 0x01
   1c098:	92 83       	std	Z+2, r25	; 0x02
   1c09a:	a3 83       	std	Z+3, r26	; 0x03
   1c09c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c0a0:	88 e8       	ldi	r24, 0x88	; 136
   1c0a2:	97 e4       	ldi	r25, 0x47	; 71
   1c0a4:	a0 e0       	ldi	r26, 0x00	; 0
   1c0a6:	ed b7       	in	r30, 0x3d	; 61
   1c0a8:	fe b7       	in	r31, 0x3e	; 62
   1c0aa:	81 83       	std	Z+1, r24	; 0x01
   1c0ac:	92 83       	std	Z+2, r25	; 0x02
   1c0ae:	a3 83       	std	Z+3, r26	; 0x03
   1c0b0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c0b4:	80 e0       	ldi	r24, 0x00	; 0
   1c0b6:	96 e1       	ldi	r25, 0x16	; 22
   1c0b8:	ed b7       	in	r30, 0x3d	; 61
   1c0ba:	fe b7       	in	r31, 0x3e	; 62
   1c0bc:	95 83       	std	Z+5, r25	; 0x05
   1c0be:	84 83       	std	Z+4, r24	; 0x04
   1c0c0:	8e e6       	ldi	r24, 0x6E	; 110
   1c0c2:	97 e4       	ldi	r25, 0x47	; 71
   1c0c4:	a0 e0       	ldi	r26, 0x00	; 0
   1c0c6:	81 83       	std	Z+1, r24	; 0x01
   1c0c8:	92 83       	std	Z+2, r25	; 0x02
   1c0ca:	a3 83       	std	Z+3, r26	; 0x03
   1c0cc:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c0d0:	84 e2       	ldi	r24, 0x24	; 36
   1c0d2:	96 e1       	ldi	r25, 0x16	; 22
   1c0d4:	ed b7       	in	r30, 0x3d	; 61
   1c0d6:	fe b7       	in	r31, 0x3e	; 62
   1c0d8:	95 83       	std	Z+5, r25	; 0x05
   1c0da:	84 83       	std	Z+4, r24	; 0x04
   1c0dc:	84 e5       	ldi	r24, 0x54	; 84
   1c0de:	97 e4       	ldi	r25, 0x47	; 71
   1c0e0:	a0 e0       	ldi	r26, 0x00	; 0
   1c0e2:	81 83       	std	Z+1, r24	; 0x01
   1c0e4:	92 83       	std	Z+2, r25	; 0x02
   1c0e6:	a3 83       	std	Z+3, r26	; 0x03
   1c0e8:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("\n");
   1c0ec:	82 e5       	ldi	r24, 0x52	; 82
   1c0ee:	97 e4       	ldi	r25, 0x47	; 71
   1c0f0:	a0 e0       	ldi	r26, 0x00	; 0
   1c0f2:	ed b7       	in	r30, 0x3d	; 61
   1c0f4:	fe b7       	in	r31, 0x3e	; 62
   1c0f6:	81 83       	std	Z+1, r24	; 0x01
   1c0f8:	92 83       	std	Z+2, r25	; 0x02
   1c0fa:	a3 83       	std	Z+3, r26	; 0x03
   1c0fc:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
}
   1c100:	0f 90       	pop	r0
   1c102:	0f 90       	pop	r0
   1c104:	0f 90       	pop	r0
   1c106:	0f 90       	pop	r0
   1c108:	0f 90       	pop	r0
   1c10a:	08 95       	ret

0001c10c <delay_tests>:
/// @brief  perform tests on delay functions
///
/// This included measurement of avr-libc delays
/// @return  void
void delay_tests()
{
   1c10c:	00 d0       	rcall	.+0      	; 0x1c10e <delay_tests+0x2>
   1c10e:	1f 92       	push	r1
    printf("System delays\n");
   1c110:	83 e4       	ldi	r24, 0x43	; 67
   1c112:	97 e4       	ldi	r25, 0x47	; 71
   1c114:	a0 e0       	ldi	r26, 0x00	; 0
   1c116:	ed b7       	in	r30, 0x3d	; 61
   1c118:	fe b7       	in	r31, 0x3e	; 62
   1c11a:	81 83       	std	Z+1, r24	; 0x01
   1c11c:	92 83       	std	Z+2, r25	; 0x02
   1c11e:	a3 83       	std	Z+3, r26	; 0x03
   1c120:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

    clock_elapsed_begin();
   1c124:	0e 94 8e 36 	call	0x6d1c	; 0x6d1c <clock_elapsed_begin>
    clock_elapsed_end("elapsed timer overhead");
   1c128:	88 e4       	ldi	r24, 0x48	; 72
   1c12a:	96 e1       	ldi	r25, 0x16	; 22
   1c12c:	0e 94 94 36 	call	0x6d28	; 0x6d28 <clock_elapsed_end>

    clock_elapsed_begin();
   1c130:	0e 94 8e 36 	call	0x6d1c	; 0x6d1c <clock_elapsed_begin>
   1c134:	83 ef       	ldi	r24, 0xF3	; 243
   1c136:	91 e0       	ldi	r25, 0x01	; 1
   1c138:	01 97       	sbiw	r24, 0x01	; 1
   1c13a:	f1 f7       	brne	.-4      	; 0x1c138 <delay_tests+0x2c>
   1c13c:	00 c0       	rjmp	.+0      	; 0x1c13e <delay_tests+0x32>
   1c13e:	00 00       	nop
    _delay_us(100);
    clock_elapsed_end("_delay_us(100)");
   1c140:	8f e5       	ldi	r24, 0x5F	; 95
   1c142:	96 e1       	ldi	r25, 0x16	; 22
   1c144:	0e 94 94 36 	call	0x6d28	; 0x6d28 <clock_elapsed_end>

    clock_elapsed_begin();
   1c148:	0e 94 8e 36 	call	0x6d1c	; 0x6d1c <clock_elapsed_begin>
   1c14c:	e3 ec       	ldi	r30, 0xC3	; 195
   1c14e:	f9 e0       	ldi	r31, 0x09	; 9
   1c150:	31 97       	sbiw	r30, 0x01	; 1
   1c152:	f1 f7       	brne	.-4      	; 0x1c150 <delay_tests+0x44>
   1c154:	00 c0       	rjmp	.+0      	; 0x1c156 <delay_tests+0x4a>
   1c156:	00 00       	nop
    _delay_us(500);
    clock_elapsed_end("_delay_us(500)");
   1c158:	8e e6       	ldi	r24, 0x6E	; 110
   1c15a:	96 e1       	ldi	r25, 0x16	; 22
   1c15c:	0e 94 94 36 	call	0x6d28	; 0x6d28 <clock_elapsed_end>

    printf("My delays\n");
   1c160:	88 e3       	ldi	r24, 0x38	; 56
   1c162:	97 e4       	ldi	r25, 0x47	; 71
   1c164:	a0 e0       	ldi	r26, 0x00	; 0
   1c166:	ed b7       	in	r30, 0x3d	; 61
   1c168:	fe b7       	in	r31, 0x3e	; 62
   1c16a:	81 83       	std	Z+1, r24	; 0x01
   1c16c:	92 83       	std	Z+2, r25	; 0x02
   1c16e:	a3 83       	std	Z+3, r26	; 0x03
   1c170:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

    clock_elapsed_begin();
   1c174:	0e 94 8e 36 	call	0x6d1c	; 0x6d1c <clock_elapsed_begin>
    delayus(100U);
   1c178:	64 e6       	ldi	r22, 0x64	; 100
   1c17a:	70 e0       	ldi	r23, 0x00	; 0
   1c17c:	80 e0       	ldi	r24, 0x00	; 0
   1c17e:	90 e0       	ldi	r25, 0x00	; 0
   1c180:	0e 94 f6 29 	call	0x53ec	; 0x53ec <delayus>
    clock_elapsed_end("delayus(100)");
   1c184:	8d e7       	ldi	r24, 0x7D	; 125
   1c186:	96 e1       	ldi	r25, 0x16	; 22
   1c188:	0e 94 94 36 	call	0x6d28	; 0x6d28 <clock_elapsed_end>

    clock_elapsed_begin();
   1c18c:	0e 94 8e 36 	call	0x6d1c	; 0x6d1c <clock_elapsed_begin>
    delayus(500U);
   1c190:	64 ef       	ldi	r22, 0xF4	; 244
   1c192:	71 e0       	ldi	r23, 0x01	; 1
   1c194:	80 e0       	ldi	r24, 0x00	; 0
   1c196:	90 e0       	ldi	r25, 0x00	; 0
   1c198:	0e 94 f6 29 	call	0x53ec	; 0x53ec <delayus>
    clock_elapsed_end("delayus(500)");
   1c19c:	8a e8       	ldi	r24, 0x8A	; 138
   1c19e:	96 e1       	ldi	r25, 0x16	; 22
   1c1a0:	0e 94 94 36 	call	0x6d28	; 0x6d28 <clock_elapsed_end>

    clock_elapsed_begin();
   1c1a4:	0e 94 8e 36 	call	0x6d1c	; 0x6d1c <clock_elapsed_begin>
    delayus(1100);
   1c1a8:	6c e4       	ldi	r22, 0x4C	; 76
   1c1aa:	74 e0       	ldi	r23, 0x04	; 4
   1c1ac:	80 e0       	ldi	r24, 0x00	; 0
   1c1ae:	90 e0       	ldi	r25, 0x00	; 0
   1c1b0:	0e 94 f6 29 	call	0x53ec	; 0x53ec <delayus>
    clock_elapsed_end("delayus(1100)");
   1c1b4:	87 e9       	ldi	r24, 0x97	; 151
   1c1b6:	96 e1       	ldi	r25, 0x16	; 22
   1c1b8:	0e 94 94 36 	call	0x6d28	; 0x6d28 <clock_elapsed_end>

    clock_elapsed_begin();
   1c1bc:	0e 94 8e 36 	call	0x6d1c	; 0x6d1c <clock_elapsed_begin>
    delayms(1000);
   1c1c0:	68 ee       	ldi	r22, 0xE8	; 232
   1c1c2:	73 e0       	ldi	r23, 0x03	; 3
   1c1c4:	80 e0       	ldi	r24, 0x00	; 0
   1c1c6:	90 e0       	ldi	r25, 0x00	; 0
   1c1c8:	0e 94 23 2a 	call	0x5446	; 0x5446 <delayms>
    clock_elapsed_end("delayms(1100)");
   1c1cc:	85 ea       	ldi	r24, 0xA5	; 165
   1c1ce:	96 e1       	ldi	r25, 0x16	; 22
   1c1d0:	0e 94 94 36 	call	0x6d28	; 0x6d28 <clock_elapsed_end>
}
   1c1d4:	0f 90       	pop	r0
   1c1d6:	0f 90       	pop	r0
   1c1d8:	0f 90       	pop	r0
   1c1da:	08 95       	ret

0001c1dc <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1c1dc:	00 d0       	rcall	.+0      	; 0x1c1de <help+0x2>

    copyright();
   1c1de:	1f 92       	push	r1

#ifdef FATFS_TESTS
    fatfs_help(0);
   1c1e0:	34 df       	rcall	.-408    	; 0x1c04a <copyright>
   1c1e2:	80 e0       	ldi	r24, 0x00	; 0
   1c1e4:	90 e0       	ldi	r25, 0x00	; 0
   1c1e6:	0e 94 11 74 	call	0xe822	; 0xe822 <fatfs_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1c1ea:	80 e0       	ldi	r24, 0x00	; 0
   1c1ec:	90 e0       	ldi	r25, 0x00	; 0
   1c1ee:	0e 94 5e 7f 	call	0xfebc	; 0xfebc <posix_help>
#endif

#ifdef LIF_SUPPORT
    lif_help(0);
   1c1f2:	80 e0       	ldi	r24, 0x00	; 0
   1c1f4:	90 e0       	ldi	r25, 0x00	; 0
   1c1f6:	0e 94 c8 c0 	call	0x18190	; 0x18190 <lif_help>
#endif

    gpib_help(0);
   1c1fa:	80 e0       	ldi	r24, 0x00	; 0
   1c1fc:	90 e0       	ldi	r25, 0x00	; 0
   1c1fe:	0e 94 69 92 	call	0x124d2	; 0x124d2 <gpib_help>

    printf(
   1c202:	8e e0       	ldi	r24, 0x0E	; 14
   1c204:	97 e4       	ldi	r25, 0x47	; 71
   1c206:	a0 e0       	ldi	r26, 0x00	; 0
   1c208:	ed b7       	in	r30, 0x3d	; 61
   1c20a:	fe b7       	in	r31, 0x3e	; 62
   1c20c:	81 83       	std	Z+1, r24	; 0x01
   1c20e:	92 83       	std	Z+2, r25	; 0x02
   1c210:	a3 83       	std	Z+3, r26	; 0x03
   1c212:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
        "setdate\n"
        "time\n"
        "reset\n"
        "\n"
        );
}
   1c216:	0f 90       	pop	r0
   1c218:	0f 90       	pop	r0
   1c21a:	0f 90       	pop	r0
   1c21c:	08 95       	ret

0001c21e <task.part.0>:
/// If a keypress is detected read a line from the uart
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void task(uint8_t gpib)
   1c21e:	a9 e6       	ldi	r26, 0x69	; 105
   1c220:	b1 e0       	ldi	r27, 0x01	; 1
   1c222:	e4 e1       	ldi	r30, 0x14	; 20
   1c224:	f1 ee       	ldi	r31, 0xE1	; 225
   1c226:	7c c3       	rjmp	.+1784   	; 0x1c920 <__prologue_saves__+0x14>
        gpib_task();

    if(!kbhit(0))
        return;

    printf("\n>");
   1c228:	8b e0       	ldi	r24, 0x0B	; 11
   1c22a:	97 e4       	ldi	r25, 0x47	; 71
   1c22c:	a0 e0       	ldi	r26, 0x00	; 0
   1c22e:	ed b7       	in	r30, 0x3d	; 61
   1c230:	fe b7       	in	r31, 0x3e	; 62
   1c232:	81 83       	std	Z+1, r24	; 0x01
   1c234:	92 83       	std	Z+2, r25	; 0x02
   1c236:	a3 83       	std	Z+3, r26	; 0x03
   1c238:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

    fgets(line,sizeof(line)-2,stdin);
   1c23c:	40 91 57 1c 	lds	r20, 0x1C57	; 0x801c57 <__iob>
   1c240:	50 91 58 1c 	lds	r21, 0x1C58	; 0x801c58 <__iob+0x1>
   1c244:	6e ef       	ldi	r22, 0xFE	; 254
   1c246:	70 e0       	ldi	r23, 0x00	; 0
   1c248:	ce 01       	movw	r24, r28
   1c24a:	06 96       	adiw	r24, 0x06	; 6
   1c24c:	6c 01       	movw	r12, r24
   1c24e:	0e 94 4a 77 	call	0xee94	; 0xee94 <fgets>
	trim_tail(line);
   1c252:	c6 01       	movw	r24, r12
   1c254:	0e 94 3f 33 	call	0x667e	; 0x667e <trim_tail>
    argc = split_args(line,argv,50);
   1c258:	42 e3       	ldi	r20, 0x32	; 50
   1c25a:	50 e0       	ldi	r21, 0x00	; 0
   1c25c:	be 01       	movw	r22, r28
   1c25e:	6a 5f       	subi	r22, 0xFA	; 250
   1c260:	7e 4f       	sbci	r23, 0xFE	; 254
   1c262:	c6 01       	movw	r24, r12
   1c264:	0e 94 c5 33 	call	0x678a	; 0x678a <split_args>
   1c268:	8c 01       	movw	r16, r24
    for(i=0;i<argc;++i)
        printf("   [%s]\n", argv[i]);
#endif

    ind = 0;
    ptr = argv[ind++];
   1c26a:	ca 5f       	subi	r28, 0xFA	; 250
   1c26c:	de 4f       	sbci	r29, 0xFE	; 254
   1c26e:	e8 80       	ld	r14, Y
   1c270:	f9 80       	ldd	r15, Y+1	; 0x01
   1c272:	c6 50       	subi	r28, 0x06	; 6
   1c274:	d1 40       	sbci	r29, 0x01	; 1

	if(!ptr || argc < 1)
   1c276:	e1 14       	cp	r14, r1
   1c278:	f1 04       	cpc	r15, r1
   1c27a:	09 f4       	brne	.+2      	; 0x1c27e <task.part.0+0x60>
   1c27c:	85 c0       	rjmp	.+266    	; 0x1c388 <task.part.0+0x16a>
   1c27e:	18 16       	cp	r1, r24
   1c280:	19 06       	cpc	r1, r25
   1c282:	0c f0       	brlt	.+2      	; 0x1c286 <task.part.0+0x68>
   1c284:	81 c0       	rjmp	.+258    	; 0x1c388 <task.part.0+0x16a>
	{
        result = 1;
	}
    else if (MATCHARGS(ptr,"delay_tests",(ind+0),argc))
   1c286:	9c 01       	movw	r18, r24
   1c288:	41 e0       	ldi	r20, 0x01	; 1
   1c28a:	50 e0       	ldi	r21, 0x00	; 0
   1c28c:	63 eb       	ldi	r22, 0xB3	; 179
   1c28e:	76 e1       	ldi	r23, 0x16	; 22
   1c290:	c7 01       	movw	r24, r14
   1c292:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   1c296:	89 2b       	or	r24, r25
    {
        delay_tests();
   1c298:	11 f0       	breq	.+4      	; 0x1c29e <task.part.0+0x80>
   1c29a:	38 df       	rcall	.-400    	; 0x1c10c <delay_tests>
   1c29c:	75 c0       	rjmp	.+234    	; 0x1c388 <task.part.0+0x16a>
        result = 1;

    }
    else if ( MATCHARGS(ptr,"time",(ind+0),argc))
   1c29e:	98 01       	movw	r18, r16
   1c2a0:	41 e0       	ldi	r20, 0x01	; 1
   1c2a2:	50 e0       	ldi	r21, 0x00	; 0
   1c2a4:	6f eb       	ldi	r22, 0xBF	; 191
   1c2a6:	76 e1       	ldi	r23, 0x16	; 22
   1c2a8:	c7 01       	movw	r24, r14
   1c2aa:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   1c2ae:	89 2b       	or	r24, r25
   1c2b0:	19 f5       	brne	.+70     	; 0x1c2f8 <task.part.0+0xda>
    {
		display_clock();
        result = 1;
    }
    else if ( MATCHARGS(ptr,"reset",(ind+0),argc))
   1c2b2:	98 01       	movw	r18, r16
   1c2b4:	41 e0       	ldi	r20, 0x01	; 1
   1c2b6:	50 e0       	ldi	r21, 0x00	; 0
   1c2b8:	67 ef       	ldi	r22, 0xF7	; 247
   1c2ba:	7c e0       	ldi	r23, 0x0C	; 12
   1c2bc:	c7 01       	movw	r24, r14
   1c2be:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   1c2c2:	89 2b       	or	r24, r25
   1c2c4:	69 f0       	breq	.+26     	; 0x1c2e0 <task.part.0+0xc2>
    {
		cli();	
   1c2c6:	f8 94       	cli
		uart_rx_flush(0);
   1c2c8:	80 e0       	ldi	r24, 0x00	; 0
   1c2ca:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <uart_rx_flush>
		cli();	
   1c2ce:	f8 94       	cli
		MCUSR = (1 << EXTRF);
   1c2d0:	82 e0       	ldi	r24, 0x02	; 2
   1c2d2:	84 bf       	out	0x34, r24	; 52
        RESET();
   1c2d4:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <RESET>
   1c2d8:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <RESET+0x1>
   1c2dc:	09 95       	icall
   1c2de:	54 c0       	rjmp	.+168    	; 0x1c388 <task.part.0+0x16a>
		// should not return!
        result = 1;
    }
    else if ( MATCHARGS(ptr,"setdate",(ind+0),argc))
   1c2e0:	98 01       	movw	r18, r16
   1c2e2:	41 e0       	ldi	r20, 0x01	; 1
   1c2e4:	50 e0       	ldi	r21, 0x00	; 0
   1c2e6:	64 ec       	ldi	r22, 0xC4	; 196
   1c2e8:	76 e1       	ldi	r23, 0x16	; 22
   1c2ea:	c7 01       	movw	r24, r14
   1c2ec:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   1c2f0:	89 2b       	or	r24, r25
   1c2f2:	29 f0       	breq	.+10     	; 0x1c2fe <task.part.0+0xe0>
    {
        setdate();
   1c2f4:	0e 94 a3 3c 	call	0x7946	; 0x7946 <setdate>
        display_clock();
   1c2f8:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <display_clock>
   1c2fc:	45 c0       	rjmp	.+138    	; 0x1c388 <task.part.0+0x16a>
        result = 1;
    }
    else if ( MATCHARGS(ptr,"mem",(ind+0),argc))
   1c2fe:	98 01       	movw	r18, r16
   1c300:	41 e0       	ldi	r20, 0x01	; 1
   1c302:	50 e0       	ldi	r21, 0x00	; 0
   1c304:	6c ec       	ldi	r22, 0xCC	; 204
   1c306:	76 e1       	ldi	r23, 0x16	; 22
   1c308:	c7 01       	movw	r24, r14
   1c30a:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   1c30e:	89 2b       	or	r24, r25
   1c310:	19 f0       	breq	.+6      	; 0x1c318 <task.part.0+0xfa>
    {
        PrintFree();
   1c312:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <PrintFree>
   1c316:	38 c0       	rjmp	.+112    	; 0x1c388 <task.part.0+0x16a>
        result = 1;

    }
    else if ( MATCHARGS(ptr,"help",(ind+0),argc) || MATCHARGS(ptr,"?",(ind+0),argc))
   1c318:	98 01       	movw	r18, r16
   1c31a:	41 e0       	ldi	r20, 0x01	; 1
   1c31c:	50 e0       	ldi	r21, 0x00	; 0
   1c31e:	6e eb       	ldi	r22, 0xBE	; 190
   1c320:	75 e1       	ldi	r23, 0x15	; 21
   1c322:	c7 01       	movw	r24, r14
   1c324:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   1c328:	89 2b       	or	r24, r25
    {
        help();
   1c32a:	11 f0       	breq	.+4      	; 0x1c330 <task.part.0+0x112>
   1c32c:	57 df       	rcall	.-338    	; 0x1c1dc <help>
   1c32e:	2c c0       	rjmp	.+88     	; 0x1c388 <task.part.0+0x16a>
    {
        PrintFree();
        result = 1;

    }
    else if ( MATCHARGS(ptr,"help",(ind+0),argc) || MATCHARGS(ptr,"?",(ind+0),argc))
   1c330:	98 01       	movw	r18, r16
   1c332:	41 e0       	ldi	r20, 0x01	; 1
   1c334:	50 e0       	ldi	r21, 0x00	; 0
   1c336:	64 ec       	ldi	r22, 0xC4	; 196
   1c338:	75 e1       	ldi	r23, 0x15	; 21
   1c33a:	c7 01       	movw	r24, r14
   1c33c:	0e 94 81 33 	call	0x6702	; 0x6702 <MATCHARGS>
   1c340:	89 2b       	or	r24, r25
   1c342:	a1 f7       	brne	.-24     	; 0x1c32c <task.part.0+0x10e>
    {
        help();
        result = 1;
    }

    else if(gpib_tests(argc,argv))
   1c344:	be 01       	movw	r22, r28
   1c346:	6a 5f       	subi	r22, 0xFA	; 250
   1c348:	7e 4f       	sbci	r23, 0xFE	; 254
   1c34a:	c8 01       	movw	r24, r16
   1c34c:	0e 94 8a 92 	call	0x12514	; 0x12514 <gpib_tests>
   1c350:	89 2b       	or	r24, r25
   1c352:	19 f0       	breq	.+6      	; 0x1c35a <task.part.0+0x13c>
    {
        // Restore GPIB BUS states
        gpib_init_devices();
   1c354:	0e 94 a2 8d 	call	0x11b44	; 0x11b44 <gpib_init_devices>
   1c358:	17 c0       	rjmp	.+46     	; 0x1c388 <task.part.0+0x16a>
        result = 1;
    }

#ifdef POSIX_TESTS
    else if(posix_tests(argc,argv))
   1c35a:	be 01       	movw	r22, r28
   1c35c:	6a 5f       	subi	r22, 0xFA	; 250
   1c35e:	7e 4f       	sbci	r23, 0xFE	; 254
   1c360:	c8 01       	movw	r24, r16
   1c362:	0e 94 d0 82 	call	0x105a0	; 0x105a0 <posix_tests>
   1c366:	89 2b       	or	r24, r25
   1c368:	79 f4       	brne	.+30     	; 0x1c388 <task.part.0+0x16a>
        result = 1;
#endif

#ifdef FATFS_TESTS
    else if(fatfs_tests(argc,argv))
   1c36a:	be 01       	movw	r22, r28
   1c36c:	6a 5f       	subi	r22, 0xFA	; 250
   1c36e:	7e 4f       	sbci	r23, 0xFE	; 254
   1c370:	c8 01       	movw	r24, r16
   1c372:	0e 94 2b 75 	call	0xea56	; 0xea56 <fatfs_tests>
   1c376:	89 2b       	or	r24, r25
   1c378:	39 f4       	brne	.+14     	; 0x1c388 <task.part.0+0x16a>
        result = 1;
#endif

#ifdef LIF_SUPPORT
    else if(lif_tests(argc,argv))
   1c37a:	be 01       	movw	r22, r28
   1c37c:	6a 5f       	subi	r22, 0xFA	; 250
   1c37e:	7e 4f       	sbci	r23, 0xFE	; 254
   1c380:	c8 01       	movw	r24, r16
   1c382:	29 dd       	rcall	.-1454   	; 0x1bdd6 <lif_tests>
   1c384:	89 2b       	or	r24, r25
   1c386:	59 f0       	breq	.+22     	; 0x1c39e <task.part.0+0x180>
        result = 1;
#endif
	if(result)
		printf("OK\n");
   1c388:	87 e0       	ldi	r24, 0x07	; 7
   1c38a:	97 e4       	ldi	r25, 0x47	; 71
   1c38c:	a0 e0       	ldi	r26, 0x00	; 0
   1c38e:	ed b7       	in	r30, 0x3d	; 61
   1c390:	fe b7       	in	r31, 0x3e	; 62
   1c392:	81 83       	std	Z+1, r24	; 0x01
   1c394:	92 83       	std	Z+2, r25	; 0x02
   1c396:	a3 83       	std	Z+3, r26	; 0x03
   1c398:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
   1c39c:	0c c0       	rjmp	.+24     	; 0x1c3b6 <task.part.0+0x198>
	else
		printf("Error:[%s]\n",line);
   1c39e:	ed b7       	in	r30, 0x3d	; 61
   1c3a0:	fe b7       	in	r31, 0x3e	; 62
   1c3a2:	d5 82       	std	Z+5, r13	; 0x05
   1c3a4:	c4 82       	std	Z+4, r12	; 0x04
   1c3a6:	8b ef       	ldi	r24, 0xFB	; 251
   1c3a8:	96 e4       	ldi	r25, 0x46	; 70
   1c3aa:	a0 e0       	ldi	r26, 0x00	; 0
   1c3ac:	81 83       	std	Z+1, r24	; 0x01
   1c3ae:	92 83       	std	Z+2, r25	; 0x02
   1c3b0:	a3 83       	std	Z+3, r26	; 0x03
   1c3b2:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
}
   1c3b6:	c7 59       	subi	r28, 0x97	; 151
   1c3b8:	de 4f       	sbci	r29, 0xFE	; 254
   1c3ba:	e8 e0       	ldi	r30, 0x08	; 8
   1c3bc:	cd c2       	rjmp	.+1434   	; 0x1c958 <__epilogue_restores__+0x14>

0001c3be <task>:
    int argc;
	int result = 0;
    char *argv[50];
    char line[256];

    if(gpib)
   1c3be:	81 11       	cpse	r24, r1
        gpib_task();
   1c3c0:	0e 94 07 92 	call	0x1240e	; 0x1240e <gpib_task>

    if(!kbhit(0))
   1c3c4:	80 e0       	ldi	r24, 0x00	; 0
   1c3c6:	0e 94 aa 2b 	call	0x5754	; 0x5754 <uart_rx_count>
   1c3ca:	89 2b       	or	r24, r25
   1c3cc:	09 f0       	breq	.+2      	; 0x1c3d0 <task+0x12>
   1c3ce:	27 cf       	rjmp	.-434    	; 0x1c21e <task.part.0>
   1c3d0:	08 95       	ret

0001c3d2 <main>:


/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1c3d2:	cf 93       	push	r28
   1c3d4:	df 93       	push	r29
   1c3d6:	cd b7       	in	r28, 0x3d	; 61
   1c3d8:	de b7       	in	r29, 0x3e	; 62
   1c3da:	63 97       	sbiw	r28, 0x13	; 19
   1c3dc:	0f b6       	in	r0, 0x3f	; 63
   1c3de:	f8 94       	cli
   1c3e0:	de bf       	out	0x3e, r29	; 62
   1c3e2:	0f be       	out	0x3f, r0	; 63
   1c3e4:	cd bf       	out	0x3d, r28	; 61
    ts_t ts;
    uint32_t actual,baud;

    ///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c3e6:	0e 94 b4 86 	call	0x10d68	; 0x10d68 <gpib_bus_init>
    // BAUD setting moved to Makefile
    baud = BAUD;

    ///@ Initialize UART early
	/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud); // Serial Port Initialize
   1c3ea:	40 e0       	ldi	r20, 0x00	; 0
   1c3ec:	52 ec       	ldi	r21, 0xC2	; 194
   1c3ee:	61 e0       	ldi	r22, 0x01	; 1
   1c3f0:	70 e0       	ldi	r23, 0x00	; 0
   1c3f2:	80 e0       	ldi	r24, 0x00	; 0
   1c3f4:	0e 94 16 2b 	call	0x562c	; 0x562c <uart_init>
   1c3f8:	6b 01       	movw	r12, r22
   1c3fa:	7c 01       	movw	r14, r24

    ///@brief Power up delay
    delayms(200); 
   1c3fc:	68 ec       	ldi	r22, 0xC8	; 200
   1c3fe:	70 e0       	ldi	r23, 0x00	; 0
   1c400:	80 e0       	ldi	r24, 0x00	; 0
   1c402:	90 e0       	ldi	r25, 0x00	; 0
   1c404:	0e 94 23 2a 	call	0x5446	; 0x5446 <delayms>

    sep();
   1c408:	0e 94 2f 33 	call	0x665e	; 0x665e <sep>
    printf("Start\n");
   1c40c:	84 ef       	ldi	r24, 0xF4	; 244
   1c40e:	96 e4       	ldi	r25, 0x46	; 70
   1c410:	a0 e0       	ldi	r26, 0x00	; 0
   1c412:	ed b7       	in	r30, 0x3d	; 61
   1c414:	fe b7       	in	r31, 0x3e	; 62
   1c416:	81 83       	std	Z+1, r24	; 0x01
   1c418:	92 83       	std	Z+2, r25	; 0x02
   1c41a:	a3 83       	std	Z+3, r26	; 0x03
   1c41c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1c420:	80 e0       	ldi	r24, 0x00	; 0
   1c422:	9d e2       	ldi	r25, 0x2D	; 45
   1c424:	a1 e3       	ldi	r26, 0x31	; 49
   1c426:	b1 e0       	ldi	r27, 0x01	; 1
   1c428:	ed b7       	in	r30, 0x3d	; 61
   1c42a:	fe b7       	in	r31, 0x3e	; 62
   1c42c:	84 83       	std	Z+4, r24	; 0x04
   1c42e:	95 83       	std	Z+5, r25	; 0x05
   1c430:	a6 83       	std	Z+6, r26	; 0x06
   1c432:	b7 83       	std	Z+7, r27	; 0x07
   1c434:	83 ee       	ldi	r24, 0xE3	; 227
   1c436:	96 e4       	ldi	r25, 0x46	; 70
   1c438:	a0 e0       	ldi	r26, 0x00	; 0
   1c43a:	81 83       	std	Z+1, r24	; 0x01
   1c43c:	92 83       	std	Z+2, r25	; 0x02
   1c43e:	a3 83       	std	Z+3, r26	; 0x03
   1c440:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1c444:	ed b7       	in	r30, 0x3d	; 61
   1c446:	fe b7       	in	r31, 0x3e	; 62
   1c448:	c0 86       	std	Z+8, r12	; 0x08
   1c44a:	d1 86       	std	Z+9, r13	; 0x09
   1c44c:	e2 86       	std	Z+10, r14	; 0x0a
   1c44e:	f3 86       	std	Z+11, r15	; 0x0b
   1c450:	80 e0       	ldi	r24, 0x00	; 0
   1c452:	92 ec       	ldi	r25, 0xC2	; 194
   1c454:	a1 e0       	ldi	r26, 0x01	; 1
   1c456:	b0 e0       	ldi	r27, 0x00	; 0
   1c458:	84 83       	std	Z+4, r24	; 0x04
   1c45a:	95 83       	std	Z+5, r25	; 0x05
   1c45c:	a6 83       	std	Z+6, r26	; 0x06
   1c45e:	b7 83       	std	Z+7, r27	; 0x07
   1c460:	8c eb       	ldi	r24, 0xBC	; 188
   1c462:	96 e4       	ldi	r25, 0x46	; 70
   1c464:	a0 e0       	ldi	r26, 0x00	; 0
   1c466:	81 83       	std	Z+1, r24	; 0x01
   1c468:	92 83       	std	Z+2, r25	; 0x02
   1c46a:	a3 83       	std	Z+3, r26	; 0x03
   1c46c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

    init_timers();
   1c470:	0e 94 15 37 	call	0x6e2a	; 0x6e2a <init_timers>

    sep();
   1c474:	0e 94 2f 33 	call	0x665e	; 0x665e <sep>
    printf("HP85 Disk and Device Emulator\n");
   1c478:	8d e9       	ldi	r24, 0x9D	; 157
   1c47a:	96 e4       	ldi	r25, 0x46	; 70
   1c47c:	a0 e0       	ldi	r26, 0x00	; 0
   1c47e:	ed b7       	in	r30, 0x3d	; 61
   1c480:	fe b7       	in	r31, 0x3e	; 62
   1c482:	81 83       	std	Z+1, r24	; 0x01
   1c484:	92 83       	std	Z+2, r25	; 0x02
   1c486:	a3 83       	std	Z+3, r26	; 0x03
   1c488:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1c48c:	80 e8       	ldi	r24, 0x80	; 128
   1c48e:	96 e4       	ldi	r25, 0x46	; 70
   1c490:	a0 e0       	ldi	r26, 0x00	; 0
   1c492:	ed b7       	in	r30, 0x3d	; 61
   1c494:	fe b7       	in	r31, 0x3e	; 62
   1c496:	81 83       	std	Z+1, r24	; 0x01
   1c498:	92 83       	std	Z+2, r25	; 0x02
   1c49a:	a3 83       	std	Z+3, r26	; 0x03
   1c49c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
	printf(" GNU version 3\n");
   1c4a0:	80 e7       	ldi	r24, 0x70	; 112
   1c4a2:	96 e4       	ldi	r25, 0x46	; 70
   1c4a4:	a0 e0       	ldi	r26, 0x00	; 0
   1c4a6:	ed b7       	in	r30, 0x3d	; 61
   1c4a8:	fe b7       	in	r31, 0x3e	; 62
   1c4aa:	81 83       	std	Z+1, r24	; 0x01
   1c4ac:	92 83       	std	Z+2, r25	; 0x02
   1c4ae:	a3 83       	std	Z+3, r26	; 0x03
   1c4b0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c4b4:	89 e4       	ldi	r24, 0x49	; 73
   1c4b6:	96 e4       	ldi	r25, 0x46	; 70
   1c4b8:	a0 e0       	ldi	r26, 0x00	; 0
   1c4ba:	ed b7       	in	r30, 0x3d	; 61
   1c4bc:	fe b7       	in	r31, 0x3e	; 62
   1c4be:	81 83       	std	Z+1, r24	; 0x01
   1c4c0:	92 83       	std	Z+2, r25	; 0x02
   1c4c2:	a3 83       	std	Z+3, r26	; 0x03
   1c4c4:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c4c8:	80 e0       	ldi	r24, 0x00	; 0
   1c4ca:	96 e1       	ldi	r25, 0x16	; 22
   1c4cc:	ed b7       	in	r30, 0x3d	; 61
   1c4ce:	fe b7       	in	r31, 0x3e	; 62
   1c4d0:	95 83       	std	Z+5, r25	; 0x05
   1c4d2:	84 83       	std	Z+4, r24	; 0x04
   1c4d4:	8f e2       	ldi	r24, 0x2F	; 47
   1c4d6:	96 e4       	ldi	r25, 0x46	; 70
   1c4d8:	a0 e0       	ldi	r26, 0x00	; 0
   1c4da:	81 83       	std	Z+1, r24	; 0x01
   1c4dc:	92 83       	std	Z+2, r25	; 0x02
   1c4de:	a3 83       	std	Z+3, r26	; 0x03
   1c4e0:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c4e4:	84 e2       	ldi	r24, 0x24	; 36
   1c4e6:	96 e1       	ldi	r25, 0x16	; 22
   1c4e8:	ed b7       	in	r30, 0x3d	; 61
   1c4ea:	fe b7       	in	r31, 0x3e	; 62
   1c4ec:	95 83       	std	Z+5, r25	; 0x05
   1c4ee:	84 83       	std	Z+4, r24	; 0x04
   1c4f0:	85 e1       	ldi	r24, 0x15	; 21
   1c4f2:	96 e4       	ldi	r25, 0x46	; 70
   1c4f4:	a0 e0       	ldi	r26, 0x00	; 0
   1c4f6:	81 83       	std	Z+1, r24	; 0x01
   1c4f8:	92 83       	std	Z+2, r25	; 0x02
   1c4fa:	a3 83       	std	Z+3, r26	; 0x03
   1c4fc:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

    sep();
   1c500:	0e 94 2f 33 	call	0x665e	; 0x665e <sep>
    PrintFree();
   1c504:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <PrintFree>

    sep();
   1c508:	0e 94 2f 33 	call	0x665e	; 0x665e <sep>
    delayms(200); ///@brief Power up delay
   1c50c:	68 ec       	ldi	r22, 0xC8	; 200
   1c50e:	70 e0       	ldi	r23, 0x00	; 0
   1c510:	80 e0       	ldi	r24, 0x00	; 0
   1c512:	90 e0       	ldi	r25, 0x00	; 0
   1c514:	0e 94 23 2a 	call	0x5446	; 0x5446 <delayms>


    ///@ initialize SPI bus 
    printf("initializing SPI bus\n");
   1c518:	8f ef       	ldi	r24, 0xFF	; 255
   1c51a:	95 e4       	ldi	r25, 0x45	; 69
   1c51c:	a0 e0       	ldi	r26, 0x00	; 0
   1c51e:	ed b7       	in	r30, 0x3d	; 61
   1c520:	fe b7       	in	r31, 0x3e	; 62
   1c522:	81 83       	std	Z+1, r24	; 0x01
   1c524:	92 83       	std	Z+2, r25	; 0x02
   1c526:	a3 83       	std	Z+3, r26	; 0x03
   1c528:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1c52c:	4b e0       	ldi	r20, 0x0B	; 11
   1c52e:	50 e0       	ldi	r21, 0x00	; 0
   1c530:	60 e2       	ldi	r22, 0x20	; 32
   1c532:	71 ea       	ldi	r23, 0xA1	; 161
   1c534:	87 e0       	ldi	r24, 0x07	; 7
   1c536:	90 e0       	ldi	r25, 0x00	; 0
   1c538:	0e 94 54 28 	call	0x50a8	; 0x50a8 <spi_init>

    ///@ initialize I2C bus 
    printf("initializing I2C bus\n");
   1c53c:	89 ee       	ldi	r24, 0xE9	; 233
   1c53e:	95 e4       	ldi	r25, 0x45	; 69
   1c540:	a0 e0       	ldi	r26, 0x00	; 0
   1c542:	ed b7       	in	r30, 0x3d	; 61
   1c544:	fe b7       	in	r31, 0x3e	; 62
   1c546:	81 83       	std	Z+1, r24	; 0x01
   1c548:	92 83       	std	Z+2, r25	; 0x02
   1c54a:	a3 83       	std	Z+3, r26	; 0x03
   1c54c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 100000));
   1c550:	61 e1       	ldi	r22, 0x11	; 17
   1c552:	81 e0       	ldi	r24, 0x01	; 1
   1c554:	0e 94 42 2d 	call	0x5a84	; 0x5a84 <TWI_Init>
    sep();
   1c558:	0e 94 2f 33 	call	0x665e	; 0x665e <sep>

    printf("initializing RTC\n");
   1c55c:	87 ed       	ldi	r24, 0xD7	; 215
   1c55e:	95 e4       	ldi	r25, 0x45	; 69
   1c560:	a0 e0       	ldi	r26, 0x00	; 0
   1c562:	ed b7       	in	r30, 0x3d	; 61
   1c564:	fe b7       	in	r31, 0x3e	; 62
   1c566:	81 83       	std	Z+1, r24	; 0x01
   1c568:	92 83       	std	Z+2, r25	; 0x02
   1c56a:	a3 83       	std	Z+3, r26	; 0x03
   1c56c:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    ///@ initialize clock by RTC if we have it
    clock_clear();
   1c570:	0e 94 d2 36 	call	0x6da4	; 0x6da4 <clock_clear>
    printf("Clock cleared\n");
   1c574:	88 ec       	ldi	r24, 0xC8	; 200
   1c576:	95 e4       	ldi	r25, 0x45	; 69
   1c578:	a0 e0       	ldi	r26, 0x00	; 0
   1c57a:	ed b7       	in	r30, 0x3d	; 61
   1c57c:	fe b7       	in	r31, 0x3e	; 62
   1c57e:	81 83       	std	Z+1, r24	; 0x01
   1c580:	92 83       	std	Z+2, r25	; 0x02
   1c582:	a3 83       	std	Z+3, r26	; 0x03
   1c584:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1c588:	be 01       	movw	r22, r28
   1c58a:	64 5f       	subi	r22, 0xF4	; 244
   1c58c:	7f 4f       	sbci	r23, 0xFF	; 255
   1c58e:	80 e0       	ldi	r24, 0x00	; 0
   1c590:	90 e0       	ldi	r25, 0x00	; 0
   1c592:	0e 94 72 37 	call	0x6ee4	; 0x6ee4 <clock_getres>
    printf("SYSTEM_TASK_COUNTER_RES:%ld\n", (uint32_t) ts.tv_nsec);
   1c596:	88 89       	ldd	r24, Y+16	; 0x10
   1c598:	99 89       	ldd	r25, Y+17	; 0x11
   1c59a:	aa 89       	ldd	r26, Y+18	; 0x12
   1c59c:	bb 89       	ldd	r27, Y+19	; 0x13
   1c59e:	ed b7       	in	r30, 0x3d	; 61
   1c5a0:	fe b7       	in	r31, 0x3e	; 62
   1c5a2:	84 83       	std	Z+4, r24	; 0x04
   1c5a4:	95 83       	std	Z+5, r25	; 0x05
   1c5a6:	a6 83       	std	Z+6, r26	; 0x06
   1c5a8:	b7 83       	std	Z+7, r27	; 0x07
   1c5aa:	8b ea       	ldi	r24, 0xAB	; 171
   1c5ac:	95 e4       	ldi	r25, 0x45	; 69
   1c5ae:	a0 e0       	ldi	r26, 0x00	; 0
   1c5b0:	81 83       	std	Z+1, r24	; 0x01
   1c5b2:	92 83       	std	Z+2, r25	; 0x02
   1c5b4:	a3 83       	std	Z+3, r26	; 0x03
   1c5b6:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

	// Timezone offset
    initialize_clock(300);
   1c5ba:	8c e2       	ldi	r24, 0x2C	; 44
   1c5bc:	91 e0       	ldi	r25, 0x01	; 1
   1c5be:	0e 94 48 3e 	call	0x7c90	; 0x7c90 <initialize_clock>
    display_clock();
   1c5c2:	0e 94 bf 3e 	call	0x7d7e	; 0x7d7e <display_clock>
    sep();
   1c5c6:	0e 94 2f 33 	call	0x665e	; 0x665e <sep>

	///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
	printf("I2C LCD initialization start\n");
   1c5ca:	8d e8       	ldi	r24, 0x8D	; 141
   1c5cc:	95 e4       	ldi	r25, 0x45	; 69
   1c5ce:	a0 e0       	ldi	r26, 0x00	; 0
   1c5d0:	ed b7       	in	r30, 0x3d	; 61
   1c5d2:	fe b7       	in	r31, 0x3e	; 62
   1c5d4:	81 83       	std	Z+1, r24	; 0x01
   1c5d6:	92 83       	std	Z+2, r25	; 0x02
   1c5d8:	a3 83       	std	Z+3, r26	; 0x03
   1c5da:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
	if ( LCD_init(LCD_ADDR) )
   1c5de:	84 ee       	ldi	r24, 0xE4	; 228
   1c5e0:	0e 94 72 31 	call	0x62e4	; 0x62e4 <LCD_init>
   1c5e4:	89 2b       	or	r24, r25
   1c5e6:	b9 f0       	breq	.+46     	; 0x1c616 <main+0x244>
	{
		// Display LCD firmware version
		// LCD_command(',');
		// delayms(1000);

		LCD_pos(0,0);
   1c5e8:	60 e0       	ldi	r22, 0x00	; 0
   1c5ea:	80 e0       	ldi	r24, 0x00	; 0
   1c5ec:	0e 94 3c 31 	call	0x6278	; 0x6278 <LCD_pos>
		lcd_printf("hp85disk V2.0\n");
   1c5f0:	80 ed       	ldi	r24, 0xD0	; 208
   1c5f2:	96 e1       	ldi	r25, 0x16	; 22
   1c5f4:	ed b7       	in	r30, 0x3d	; 61
   1c5f6:	fe b7       	in	r31, 0x3e	; 62
   1c5f8:	92 83       	std	Z+2, r25	; 0x02
   1c5fa:	81 83       	std	Z+1, r24	; 0x01
   1c5fc:	0e 94 2b 32 	call	0x6456	; 0x6456 <lcd_printf>
		lcd_printf("(C)Mike Gore ");
   1c600:	8f ed       	ldi	r24, 0xDF	; 223
   1c602:	96 e1       	ldi	r25, 0x16	; 22
   1c604:	ed b7       	in	r30, 0x3d	; 61
   1c606:	fe b7       	in	r31, 0x3e	; 62
   1c608:	92 83       	std	Z+2, r25	; 0x02
   1c60a:	81 83       	std	Z+1, r24	; 0x01
   1c60c:	0e 94 2b 32 	call	0x6456	; 0x6456 <lcd_printf>
		// SparkFun V1.1 firmware loses the last character when the LCD goes to sleep 

		printf("I2C LCD initialization Done\n");
   1c610:	80 e7       	ldi	r24, 0x70	; 112
   1c612:	95 e4       	ldi	r25, 0x45	; 69
   1c614:	02 c0       	rjmp	.+4      	; 0x1c61a <main+0x248>
	}
	else
	{
		printf("I2C LCD is NOT attached!\n");
   1c616:	86 e5       	ldi	r24, 0x56	; 86
   1c618:	95 e4       	ldi	r25, 0x45	; 69
   1c61a:	a0 e0       	ldi	r26, 0x00	; 0
   1c61c:	ed b7       	in	r30, 0x3d	; 61
   1c61e:	fe b7       	in	r31, 0x3e	; 62
   1c620:	81 83       	std	Z+1, r24	; 0x01
   1c622:	92 83       	std	Z+2, r25	; 0x02
   1c624:	a3 83       	std	Z+3, r26	; 0x03
   1c626:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
	}
    sep();
   1c62a:	0e 94 2f 33 	call	0x665e	; 0x665e <sep>
#endif

    ///@ initialize MMC bus
    printf("MMC initializing start\n");
   1c62e:	8e e3       	ldi	r24, 0x3E	; 62
   1c630:	95 e4       	ldi	r25, 0x45	; 69
   1c632:	a0 e0       	ldi	r26, 0x00	; 0
   1c634:	ed b7       	in	r30, 0x3d	; 61
   1c636:	fe b7       	in	r31, 0x3e	; 62
   1c638:	81 83       	std	Z+1, r24	; 0x01
   1c63a:	92 83       	std	Z+2, r25	; 0x02
   1c63c:	a3 83       	std	Z+3, r26	; 0x03
   1c63e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    mmc_init(1);
   1c642:	81 e0       	ldi	r24, 0x01	; 1
   1c644:	90 e0       	ldi	r25, 0x00	; 0
   1c646:	0e 94 5e 70 	call	0xe0bc	; 0xe0bc <mmc_init>
    printf("MMC initialized\n");
   1c64a:	8d e2       	ldi	r24, 0x2D	; 45
   1c64c:	95 e4       	ldi	r25, 0x45	; 69
   1c64e:	a0 e0       	ldi	r26, 0x00	; 0
   1c650:	ed b7       	in	r30, 0x3d	; 61
   1c652:	fe b7       	in	r31, 0x3e	; 62
   1c654:	81 83       	std	Z+1, r24	; 0x01
   1c656:	92 83       	std	Z+2, r25	; 0x02
   1c658:	a3 83       	std	Z+3, r26	; 0x03
   1c65a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    sep();
   1c65e:	0e 94 2f 33 	call	0x665e	; 0x665e <sep>

    ///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c662:	0e 94 b4 86 	call	0x10d68	; 0x10d68 <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1c666:	87 e1       	ldi	r24, 0x17	; 23
   1c668:	95 e4       	ldi	r25, 0x45	; 69
   1c66a:	a0 e0       	ldi	r26, 0x00	; 0
   1c66c:	ed b7       	in	r30, 0x3d	; 61
   1c66e:	fe b7       	in	r31, 0x3e	; 62
   1c670:	81 83       	std	Z+1, r24	; 0x01
   1c672:	92 83       	std	Z+2, r25	; 0x02
   1c674:	a3 83       	std	Z+3, r26	; 0x03
   1c676:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

    ///@ initialize Printer Capture
    printer_init();
   1c67a:	0e 94 ac be 	call	0x17d58	; 0x17d58 <printer_init>
    printf("Printer initialized\n");
   1c67e:	82 e0       	ldi	r24, 0x02	; 2
   1c680:	95 e4       	ldi	r25, 0x45	; 69
   1c682:	a0 e0       	ldi	r26, 0x00	; 0
   1c684:	ed b7       	in	r30, 0x3d	; 61
   1c686:	fe b7       	in	r31, 0x3e	; 62
   1c688:	81 83       	std	Z+1, r24	; 0x01
   1c68a:	92 83       	std	Z+2, r25	; 0x02
   1c68c:	a3 83       	std	Z+3, r26	; 0x03
   1c68e:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

    ///@ initialize GPIB timer tasks
    sep();
   1c692:	0e 94 2f 33 	call	0x665e	; 0x665e <sep>
    printf("GPIB Timer Setup\n");
   1c696:	80 ef       	ldi	r24, 0xF0	; 240
   1c698:	94 e4       	ldi	r25, 0x44	; 68
   1c69a:	a0 e0       	ldi	r26, 0x00	; 0
   1c69c:	ed b7       	in	r30, 0x3d	; 61
   1c69e:	fe b7       	in	r31, 0x3e	; 62
   1c6a0:	81 83       	std	Z+1, r24	; 0x01
   1c6a2:	92 83       	std	Z+2, r25	; 0x02
   1c6a4:	a3 83       	std	Z+3, r26	; 0x03
   1c6a6:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    gpib_timer_init();
   1c6aa:	0e 94 a5 84 	call	0x1094a	; 0x1094a <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1c6ae:	88 ed       	ldi	r24, 0xD8	; 216
   1c6b0:	94 e4       	ldi	r25, 0x44	; 68
   1c6b2:	a0 e0       	ldi	r26, 0x00	; 0
   1c6b4:	ed b7       	in	r30, 0x3d	; 61
   1c6b6:	fe b7       	in	r31, 0x3e	; 62
   1c6b8:	81 83       	std	Z+1, r24	; 0x01
   1c6ba:	92 83       	std	Z+2, r25	; 0x02
   1c6bc:	a3 83       	std	Z+3, r26	; 0x03
   1c6be:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

    ///@brief Process hp85disk emulator config file
    gpib_file_init();
   1c6c2:	0e 94 dd 8c 	call	0x119ba	; 0x119ba <gpib_file_init>
    printf("GPIB File init done\n");
   1c6c6:	83 ec       	ldi	r24, 0xC3	; 195
   1c6c8:	94 e4       	ldi	r25, 0x44	; 68
   1c6ca:	a0 e0       	ldi	r26, 0x00	; 0
   1c6cc:	ed b7       	in	r30, 0x3d	; 61
   1c6ce:	fe b7       	in	r31, 0x3e	; 62
   1c6d0:	81 83       	std	Z+1, r24	; 0x01
   1c6d2:	92 83       	std	Z+2, r25	; 0x02
   1c6d4:	a3 83       	std	Z+3, r26	; 0x03
   1c6d6:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

    ///@brief GPIB talking/listening state variables 
    ///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1c6da:	0e 94 e1 86 	call	0x10dc2	; 0x10dc2 <gpib_state_init>
    printf("GPIB State init done\n");
   1c6de:	8d ea       	ldi	r24, 0xAD	; 173
   1c6e0:	94 e4       	ldi	r25, 0x44	; 68
   1c6e2:	a0 e0       	ldi	r26, 0x00	; 0
   1c6e4:	ed b7       	in	r30, 0x3d	; 61
   1c6e6:	fe b7       	in	r31, 0x3e	; 62
   1c6e8:	81 83       	std	Z+1, r24	; 0x01
   1c6ea:	92 83       	std	Z+2, r25	; 0x02
   1c6ec:	a3 83       	std	Z+3, r26	; 0x03
   1c6ee:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>
    sep();
   1c6f2:	0e 94 2f 33 	call	0x665e	; 0x665e <sep>

    ///@brief Display Configuration
    display_Config();
   1c6f6:	0e 94 cb 9f 	call	0x13f96	; 0x13f96 <display_Config>

    ///@brief Format any drives that do not yet exist
    format_drives();
   1c6fa:	0e 94 d9 a2 	call	0x145b2	; 0x145b2 <format_drives>

    ///@brief Display Address Summary
    sep();
   1c6fe:	0e 94 2f 33 	call	0x665e	; 0x665e <sep>
    display_Addresses();
   1c702:	0e 94 c6 9e 	call	0x13d8c	; 0x13d8c <display_Addresses>

    ///@brief Display debug level
    sep();
   1c706:	0e 94 2f 33 	call	0x665e	; 0x665e <sep>
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1c70a:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <debuglevel>
   1c70e:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <debuglevel+0x1>
   1c712:	ed b7       	in	r30, 0x3d	; 61
   1c714:	fe b7       	in	r31, 0x3e	; 62
   1c716:	95 83       	std	Z+5, r25	; 0x05
   1c718:	84 83       	std	Z+4, r24	; 0x04
   1c71a:	87 e9       	ldi	r24, 0x97	; 151
   1c71c:	94 e4       	ldi	r25, 0x44	; 68
   1c71e:	a0 e0       	ldi	r26, 0x00	; 0
   1c720:	81 83       	std	Z+1, r24	; 0x01
   1c722:	92 83       	std	Z+2, r25	; 0x02
   1c724:	a3 83       	std	Z+3, r26	; 0x03
   1c726:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

#ifdef LCD_SUPPORT
	LCD_pos(0,0);
   1c72a:	60 e0       	ldi	r22, 0x00	; 0
   1c72c:	80 e0       	ldi	r24, 0x00	; 0
   1c72e:	0e 94 3c 31 	call	0x6278	; 0x6278 <LCD_pos>
	lcd_printf("SS80  Drives:%d\n",(int) count_drive_types(SS80_TYPE));
   1c732:	83 e0       	ldi	r24, 0x03	; 3
   1c734:	0e 94 d2 93 	call	0x127a4	; 0x127a4 <count_drive_types>
   1c738:	ed b7       	in	r30, 0x3d	; 61
   1c73a:	fe b7       	in	r31, 0x3e	; 62
   1c73c:	94 83       	std	Z+4, r25	; 0x04
   1c73e:	83 83       	std	Z+3, r24	; 0x03
   1c740:	8d ee       	ldi	r24, 0xED	; 237
   1c742:	96 e1       	ldi	r25, 0x16	; 22
   1c744:	92 83       	std	Z+2, r25	; 0x02
   1c746:	81 83       	std	Z+1, r24	; 0x01
   1c748:	0e 94 2b 32 	call	0x6456	; 0x6456 <lcd_printf>
	lcd_printf("AMIGO Drives:%d ",(int) count_drive_types(AMIGO_TYPE));
   1c74c:	81 e0       	ldi	r24, 0x01	; 1
   1c74e:	0e 94 d2 93 	call	0x127a4	; 0x127a4 <count_drive_types>
   1c752:	ed b7       	in	r30, 0x3d	; 61
   1c754:	fe b7       	in	r31, 0x3e	; 62
   1c756:	94 83       	std	Z+4, r25	; 0x04
   1c758:	83 83       	std	Z+3, r24	; 0x03
   1c75a:	8e ef       	ldi	r24, 0xFE	; 254
   1c75c:	96 e1       	ldi	r25, 0x16	; 22
   1c75e:	92 83       	std	Z+2, r25	; 0x02
   1c760:	81 83       	std	Z+1, r24	; 0x01
   1c762:	0e 94 2b 32 	call	0x6456	; 0x6456 <lcd_printf>
	//lcd_printf("Debug: %04xH\n", (int)debuglevel);
#endif


    ///@brief Start main GPIB state machine
    sep();
   1c766:	0e 94 2f 33 	call	0x665e	; 0x665e <sep>
    printf("Starting GPIB TASK\n");
   1c76a:	83 e8       	ldi	r24, 0x83	; 131
   1c76c:	94 e4       	ldi	r25, 0x44	; 68
   1c76e:	a0 e0       	ldi	r26, 0x00	; 0
   1c770:	ed b7       	in	r30, 0x3d	; 61
   1c772:	fe b7       	in	r31, 0x3e	; 62
   1c774:	81 83       	std	Z+1, r24	; 0x01
   1c776:	92 83       	std	Z+2, r25	; 0x02
   1c778:	a3 83       	std	Z+3, r26	; 0x03
   1c77a:	0e 94 64 47 	call	0x8ec8	; 0x8ec8 <printf_P>

    ///@brief Keep the task running - it exits after every user interaction, ie key press
    while (1)
    {
        task(1);
   1c77e:	81 e0       	ldi	r24, 0x01	; 1
   1c780:	1e de       	rcall	.-964    	; 0x1c3be <task>
   1c782:	fd cf       	rjmp	.-6      	; 0x1c77e <main+0x3ac>

0001c784 <__mulsi3>:
   1c784:	db 01       	movw	r26, r22
   1c786:	8f 93       	push	r24
   1c788:	9f 93       	push	r25
   1c78a:	a0 d0       	rcall	.+320    	; 0x1c8cc <__muluhisi3>
   1c78c:	bf 91       	pop	r27
   1c78e:	af 91       	pop	r26
   1c790:	a2 9f       	mul	r26, r18
   1c792:	80 0d       	add	r24, r0
   1c794:	91 1d       	adc	r25, r1
   1c796:	a3 9f       	mul	r26, r19
   1c798:	90 0d       	add	r25, r0
   1c79a:	b2 9f       	mul	r27, r18
   1c79c:	90 0d       	add	r25, r0
   1c79e:	11 24       	eor	r1, r1
   1c7a0:	08 95       	ret

0001c7a2 <__udivmodqi4>:
   1c7a2:	99 1b       	sub	r25, r25
   1c7a4:	79 e0       	ldi	r23, 0x09	; 9
   1c7a6:	04 c0       	rjmp	.+8      	; 0x1c7b0 <__udivmodqi4_ep>

0001c7a8 <__udivmodqi4_loop>:
   1c7a8:	99 1f       	adc	r25, r25
   1c7aa:	96 17       	cp	r25, r22
   1c7ac:	08 f0       	brcs	.+2      	; 0x1c7b0 <__udivmodqi4_ep>
   1c7ae:	96 1b       	sub	r25, r22

0001c7b0 <__udivmodqi4_ep>:
   1c7b0:	88 1f       	adc	r24, r24
   1c7b2:	7a 95       	dec	r23
   1c7b4:	c9 f7       	brne	.-14     	; 0x1c7a8 <__udivmodqi4_loop>
   1c7b6:	80 95       	com	r24
   1c7b8:	08 95       	ret

0001c7ba <__udivmodhi4>:
   1c7ba:	aa 1b       	sub	r26, r26
   1c7bc:	bb 1b       	sub	r27, r27
   1c7be:	51 e1       	ldi	r21, 0x11	; 17
   1c7c0:	07 c0       	rjmp	.+14     	; 0x1c7d0 <__udivmodhi4_ep>

0001c7c2 <__udivmodhi4_loop>:
   1c7c2:	aa 1f       	adc	r26, r26
   1c7c4:	bb 1f       	adc	r27, r27
   1c7c6:	a6 17       	cp	r26, r22
   1c7c8:	b7 07       	cpc	r27, r23
   1c7ca:	10 f0       	brcs	.+4      	; 0x1c7d0 <__udivmodhi4_ep>
   1c7cc:	a6 1b       	sub	r26, r22
   1c7ce:	b7 0b       	sbc	r27, r23

0001c7d0 <__udivmodhi4_ep>:
   1c7d0:	88 1f       	adc	r24, r24
   1c7d2:	99 1f       	adc	r25, r25
   1c7d4:	5a 95       	dec	r21
   1c7d6:	a9 f7       	brne	.-22     	; 0x1c7c2 <__udivmodhi4_loop>
   1c7d8:	80 95       	com	r24
   1c7da:	90 95       	com	r25
   1c7dc:	bc 01       	movw	r22, r24
   1c7de:	cd 01       	movw	r24, r26
   1c7e0:	08 95       	ret

0001c7e2 <__divmodhi4>:
   1c7e2:	97 fb       	bst	r25, 7
   1c7e4:	07 2e       	mov	r0, r23
   1c7e6:	16 f4       	brtc	.+4      	; 0x1c7ec <__divmodhi4+0xa>
   1c7e8:	00 94       	com	r0
   1c7ea:	06 d0       	rcall	.+12     	; 0x1c7f8 <__divmodhi4_neg1>
   1c7ec:	77 fd       	sbrc	r23, 7
   1c7ee:	08 d0       	rcall	.+16     	; 0x1c800 <__divmodhi4_neg2>
   1c7f0:	e4 df       	rcall	.-56     	; 0x1c7ba <__udivmodhi4>
   1c7f2:	07 fc       	sbrc	r0, 7
   1c7f4:	05 d0       	rcall	.+10     	; 0x1c800 <__divmodhi4_neg2>
   1c7f6:	3e f4       	brtc	.+14     	; 0x1c806 <__divmodhi4_exit>

0001c7f8 <__divmodhi4_neg1>:
   1c7f8:	90 95       	com	r25
   1c7fa:	81 95       	neg	r24
   1c7fc:	9f 4f       	sbci	r25, 0xFF	; 255
   1c7fe:	08 95       	ret

0001c800 <__divmodhi4_neg2>:
   1c800:	70 95       	com	r23
   1c802:	61 95       	neg	r22
   1c804:	7f 4f       	sbci	r23, 0xFF	; 255

0001c806 <__divmodhi4_exit>:
   1c806:	08 95       	ret

0001c808 <__udivmodsi4>:
   1c808:	a1 e2       	ldi	r26, 0x21	; 33
   1c80a:	1a 2e       	mov	r1, r26
   1c80c:	aa 1b       	sub	r26, r26
   1c80e:	bb 1b       	sub	r27, r27
   1c810:	fd 01       	movw	r30, r26
   1c812:	0d c0       	rjmp	.+26     	; 0x1c82e <__udivmodsi4_ep>

0001c814 <__udivmodsi4_loop>:
   1c814:	aa 1f       	adc	r26, r26
   1c816:	bb 1f       	adc	r27, r27
   1c818:	ee 1f       	adc	r30, r30
   1c81a:	ff 1f       	adc	r31, r31
   1c81c:	a2 17       	cp	r26, r18
   1c81e:	b3 07       	cpc	r27, r19
   1c820:	e4 07       	cpc	r30, r20
   1c822:	f5 07       	cpc	r31, r21
   1c824:	20 f0       	brcs	.+8      	; 0x1c82e <__udivmodsi4_ep>
   1c826:	a2 1b       	sub	r26, r18
   1c828:	b3 0b       	sbc	r27, r19
   1c82a:	e4 0b       	sbc	r30, r20
   1c82c:	f5 0b       	sbc	r31, r21

0001c82e <__udivmodsi4_ep>:
   1c82e:	66 1f       	adc	r22, r22
   1c830:	77 1f       	adc	r23, r23
   1c832:	88 1f       	adc	r24, r24
   1c834:	99 1f       	adc	r25, r25
   1c836:	1a 94       	dec	r1
   1c838:	69 f7       	brne	.-38     	; 0x1c814 <__udivmodsi4_loop>
   1c83a:	60 95       	com	r22
   1c83c:	70 95       	com	r23
   1c83e:	80 95       	com	r24
   1c840:	90 95       	com	r25
   1c842:	9b 01       	movw	r18, r22
   1c844:	ac 01       	movw	r20, r24
   1c846:	bd 01       	movw	r22, r26
   1c848:	cf 01       	movw	r24, r30
   1c84a:	08 95       	ret

0001c84c <__divmodsi4>:
   1c84c:	05 2e       	mov	r0, r21
   1c84e:	97 fb       	bst	r25, 7
   1c850:	16 f4       	brtc	.+4      	; 0x1c856 <__divmodsi4+0xa>
   1c852:	00 94       	com	r0
   1c854:	0f d0       	rcall	.+30     	; 0x1c874 <__negsi2>
   1c856:	57 fd       	sbrc	r21, 7
   1c858:	05 d0       	rcall	.+10     	; 0x1c864 <__divmodsi4_neg2>
   1c85a:	d6 df       	rcall	.-84     	; 0x1c808 <__udivmodsi4>
   1c85c:	07 fc       	sbrc	r0, 7
   1c85e:	02 d0       	rcall	.+4      	; 0x1c864 <__divmodsi4_neg2>
   1c860:	46 f4       	brtc	.+16     	; 0x1c872 <__divmodsi4_exit>
   1c862:	08 c0       	rjmp	.+16     	; 0x1c874 <__negsi2>

0001c864 <__divmodsi4_neg2>:
   1c864:	50 95       	com	r21
   1c866:	40 95       	com	r20
   1c868:	30 95       	com	r19
   1c86a:	21 95       	neg	r18
   1c86c:	3f 4f       	sbci	r19, 0xFF	; 255
   1c86e:	4f 4f       	sbci	r20, 0xFF	; 255
   1c870:	5f 4f       	sbci	r21, 0xFF	; 255

0001c872 <__divmodsi4_exit>:
   1c872:	08 95       	ret

0001c874 <__negsi2>:
   1c874:	90 95       	com	r25
   1c876:	80 95       	com	r24
   1c878:	70 95       	com	r23
   1c87a:	61 95       	neg	r22
   1c87c:	7f 4f       	sbci	r23, 0xFF	; 255
   1c87e:	8f 4f       	sbci	r24, 0xFF	; 255
   1c880:	9f 4f       	sbci	r25, 0xFF	; 255
   1c882:	08 95       	ret

0001c884 <__tablejump2__>:
   1c884:	ee 0f       	add	r30, r30
   1c886:	ff 1f       	adc	r31, r31
   1c888:	00 24       	eor	r0, r0
   1c88a:	00 1c       	adc	r0, r0
   1c88c:	0b be       	out	0x3b, r0	; 59
   1c88e:	07 90       	elpm	r0, Z+
   1c890:	f6 91       	elpm	r31, Z
   1c892:	e0 2d       	mov	r30, r0
   1c894:	09 94       	ijmp

0001c896 <__mulhisi3>:
   1c896:	05 d0       	rcall	.+10     	; 0x1c8a2 <__umulhisi3>
   1c898:	33 23       	and	r19, r19
   1c89a:	12 f4       	brpl	.+4      	; 0x1c8a0 <__mulhisi3+0xa>
   1c89c:	8a 1b       	sub	r24, r26
   1c89e:	9b 0b       	sbc	r25, r27
   1c8a0:	10 c0       	rjmp	.+32     	; 0x1c8c2 <__usmulhisi3_tail>

0001c8a2 <__umulhisi3>:
   1c8a2:	a2 9f       	mul	r26, r18
   1c8a4:	b0 01       	movw	r22, r0
   1c8a6:	b3 9f       	mul	r27, r19
   1c8a8:	c0 01       	movw	r24, r0
   1c8aa:	a3 9f       	mul	r26, r19
   1c8ac:	70 0d       	add	r23, r0
   1c8ae:	81 1d       	adc	r24, r1
   1c8b0:	11 24       	eor	r1, r1
   1c8b2:	91 1d       	adc	r25, r1
   1c8b4:	b2 9f       	mul	r27, r18
   1c8b6:	70 0d       	add	r23, r0
   1c8b8:	81 1d       	adc	r24, r1
   1c8ba:	11 24       	eor	r1, r1
   1c8bc:	91 1d       	adc	r25, r1
   1c8be:	08 95       	ret

0001c8c0 <__usmulhisi3>:
   1c8c0:	f0 df       	rcall	.-32     	; 0x1c8a2 <__umulhisi3>

0001c8c2 <__usmulhisi3_tail>:
   1c8c2:	b7 ff       	sbrs	r27, 7
   1c8c4:	08 95       	ret
   1c8c6:	82 1b       	sub	r24, r18
   1c8c8:	93 0b       	sbc	r25, r19
   1c8ca:	08 95       	ret

0001c8cc <__muluhisi3>:
   1c8cc:	ea df       	rcall	.-44     	; 0x1c8a2 <__umulhisi3>
   1c8ce:	a5 9f       	mul	r26, r21
   1c8d0:	90 0d       	add	r25, r0
   1c8d2:	b4 9f       	mul	r27, r20
   1c8d4:	90 0d       	add	r25, r0
   1c8d6:	a4 9f       	mul	r26, r20
   1c8d8:	80 0d       	add	r24, r0
   1c8da:	91 1d       	adc	r25, r1
   1c8dc:	11 24       	eor	r1, r1
   1c8de:	08 95       	ret

0001c8e0 <__mulshisi3>:
   1c8e0:	b7 ff       	sbrs	r27, 7
   1c8e2:	f4 cf       	rjmp	.-24     	; 0x1c8cc <__muluhisi3>

0001c8e4 <__mulohisi3>:
   1c8e4:	f3 df       	rcall	.-26     	; 0x1c8cc <__muluhisi3>
   1c8e6:	82 1b       	sub	r24, r18
   1c8e8:	93 0b       	sbc	r25, r19
   1c8ea:	08 95       	ret

0001c8ec <__negdi2>:
   1c8ec:	60 95       	com	r22
   1c8ee:	70 95       	com	r23
   1c8f0:	80 95       	com	r24
   1c8f2:	90 95       	com	r25
   1c8f4:	30 95       	com	r19
   1c8f6:	40 95       	com	r20
   1c8f8:	50 95       	com	r21
   1c8fa:	21 95       	neg	r18
   1c8fc:	3f 4f       	sbci	r19, 0xFF	; 255
   1c8fe:	4f 4f       	sbci	r20, 0xFF	; 255
   1c900:	5f 4f       	sbci	r21, 0xFF	; 255
   1c902:	6f 4f       	sbci	r22, 0xFF	; 255
   1c904:	7f 4f       	sbci	r23, 0xFF	; 255
   1c906:	8f 4f       	sbci	r24, 0xFF	; 255
   1c908:	9f 4f       	sbci	r25, 0xFF	; 255
   1c90a:	08 95       	ret

0001c90c <__prologue_saves__>:
   1c90c:	2f 92       	push	r2
   1c90e:	3f 92       	push	r3
   1c910:	4f 92       	push	r4
   1c912:	5f 92       	push	r5
   1c914:	6f 92       	push	r6
   1c916:	7f 92       	push	r7
   1c918:	8f 92       	push	r8
   1c91a:	9f 92       	push	r9
   1c91c:	af 92       	push	r10
   1c91e:	bf 92       	push	r11
   1c920:	cf 92       	push	r12
   1c922:	df 92       	push	r13
   1c924:	ef 92       	push	r14
   1c926:	ff 92       	push	r15
   1c928:	0f 93       	push	r16
   1c92a:	1f 93       	push	r17
   1c92c:	cf 93       	push	r28
   1c92e:	df 93       	push	r29
   1c930:	cd b7       	in	r28, 0x3d	; 61
   1c932:	de b7       	in	r29, 0x3e	; 62
   1c934:	ca 1b       	sub	r28, r26
   1c936:	db 0b       	sbc	r29, r27
   1c938:	0f b6       	in	r0, 0x3f	; 63
   1c93a:	f8 94       	cli
   1c93c:	de bf       	out	0x3e, r29	; 62
   1c93e:	0f be       	out	0x3f, r0	; 63
   1c940:	cd bf       	out	0x3d, r28	; 61
   1c942:	09 94       	ijmp

0001c944 <__epilogue_restores__>:
   1c944:	2a 88       	ldd	r2, Y+18	; 0x12
   1c946:	39 88       	ldd	r3, Y+17	; 0x11
   1c948:	48 88       	ldd	r4, Y+16	; 0x10
   1c94a:	5f 84       	ldd	r5, Y+15	; 0x0f
   1c94c:	6e 84       	ldd	r6, Y+14	; 0x0e
   1c94e:	7d 84       	ldd	r7, Y+13	; 0x0d
   1c950:	8c 84       	ldd	r8, Y+12	; 0x0c
   1c952:	9b 84       	ldd	r9, Y+11	; 0x0b
   1c954:	aa 84       	ldd	r10, Y+10	; 0x0a
   1c956:	b9 84       	ldd	r11, Y+9	; 0x09
   1c958:	c8 84       	ldd	r12, Y+8	; 0x08
   1c95a:	df 80       	ldd	r13, Y+7	; 0x07
   1c95c:	ee 80       	ldd	r14, Y+6	; 0x06
   1c95e:	fd 80       	ldd	r15, Y+5	; 0x05
   1c960:	0c 81       	ldd	r16, Y+4	; 0x04
   1c962:	1b 81       	ldd	r17, Y+3	; 0x03
   1c964:	aa 81       	ldd	r26, Y+2	; 0x02
   1c966:	b9 81       	ldd	r27, Y+1	; 0x01
   1c968:	ce 0f       	add	r28, r30
   1c96a:	d1 1d       	adc	r29, r1
   1c96c:	0f b6       	in	r0, 0x3f	; 63
   1c96e:	f8 94       	cli
   1c970:	de bf       	out	0x3e, r29	; 62
   1c972:	0f be       	out	0x3f, r0	; 63
   1c974:	cd bf       	out	0x3d, r28	; 61
   1c976:	ed 01       	movw	r28, r26
   1c978:	08 95       	ret

0001c97a <__xload_1>:
   1c97a:	57 fd       	sbrc	r21, 7
   1c97c:	03 c0       	rjmp	.+6      	; 0x1c984 <__xload_1+0xa>
   1c97e:	5b bf       	out	0x3b, r21	; 59
   1c980:	67 91       	elpm	r22, Z+
   1c982:	08 95       	ret
   1c984:	60 81       	ld	r22, Z
   1c986:	08 95       	ret

0001c988 <__cmpdi2_s8>:
   1c988:	00 24       	eor	r0, r0
   1c98a:	a7 fd       	sbrc	r26, 7
   1c98c:	00 94       	com	r0
   1c98e:	2a 17       	cp	r18, r26
   1c990:	30 05       	cpc	r19, r0
   1c992:	40 05       	cpc	r20, r0
   1c994:	50 05       	cpc	r21, r0
   1c996:	60 05       	cpc	r22, r0
   1c998:	70 05       	cpc	r23, r0
   1c99a:	80 05       	cpc	r24, r0
   1c99c:	90 05       	cpc	r25, r0
   1c99e:	08 95       	ret

0001c9a0 <__subsf3>:
   1c9a0:	50 58       	subi	r21, 0x80	; 128

0001c9a2 <__addsf3>:
   1c9a2:	bb 27       	eor	r27, r27
   1c9a4:	aa 27       	eor	r26, r26
   1c9a6:	0e d0       	rcall	.+28     	; 0x1c9c4 <__addsf3x>
   1c9a8:	75 c1       	rjmp	.+746    	; 0x1cc94 <__fp_round>
   1c9aa:	66 d1       	rcall	.+716    	; 0x1cc78 <__fp_pscA>
   1c9ac:	30 f0       	brcs	.+12     	; 0x1c9ba <__addsf3+0x18>
   1c9ae:	6b d1       	rcall	.+726    	; 0x1cc86 <__fp_pscB>
   1c9b0:	20 f0       	brcs	.+8      	; 0x1c9ba <__addsf3+0x18>
   1c9b2:	31 f4       	brne	.+12     	; 0x1c9c0 <__addsf3+0x1e>
   1c9b4:	9f 3f       	cpi	r25, 0xFF	; 255
   1c9b6:	11 f4       	brne	.+4      	; 0x1c9bc <__addsf3+0x1a>
   1c9b8:	1e f4       	brtc	.+6      	; 0x1c9c0 <__addsf3+0x1e>
   1c9ba:	5b c1       	rjmp	.+694    	; 0x1cc72 <__fp_nan>
   1c9bc:	0e f4       	brtc	.+2      	; 0x1c9c0 <__addsf3+0x1e>
   1c9be:	e0 95       	com	r30
   1c9c0:	e7 fb       	bst	r30, 7
   1c9c2:	51 c1       	rjmp	.+674    	; 0x1cc66 <__fp_inf>

0001c9c4 <__addsf3x>:
   1c9c4:	e9 2f       	mov	r30, r25
   1c9c6:	77 d1       	rcall	.+750    	; 0x1ccb6 <__fp_split3>
   1c9c8:	80 f3       	brcs	.-32     	; 0x1c9aa <__addsf3+0x8>
   1c9ca:	ba 17       	cp	r27, r26
   1c9cc:	62 07       	cpc	r22, r18
   1c9ce:	73 07       	cpc	r23, r19
   1c9d0:	84 07       	cpc	r24, r20
   1c9d2:	95 07       	cpc	r25, r21
   1c9d4:	18 f0       	brcs	.+6      	; 0x1c9dc <__addsf3x+0x18>
   1c9d6:	71 f4       	brne	.+28     	; 0x1c9f4 <__addsf3x+0x30>
   1c9d8:	9e f5       	brtc	.+102    	; 0x1ca40 <__addsf3x+0x7c>
   1c9da:	8f c1       	rjmp	.+798    	; 0x1ccfa <__fp_zero>
   1c9dc:	0e f4       	brtc	.+2      	; 0x1c9e0 <__addsf3x+0x1c>
   1c9de:	e0 95       	com	r30
   1c9e0:	0b 2e       	mov	r0, r27
   1c9e2:	ba 2f       	mov	r27, r26
   1c9e4:	a0 2d       	mov	r26, r0
   1c9e6:	0b 01       	movw	r0, r22
   1c9e8:	b9 01       	movw	r22, r18
   1c9ea:	90 01       	movw	r18, r0
   1c9ec:	0c 01       	movw	r0, r24
   1c9ee:	ca 01       	movw	r24, r20
   1c9f0:	a0 01       	movw	r20, r0
   1c9f2:	11 24       	eor	r1, r1
   1c9f4:	ff 27       	eor	r31, r31
   1c9f6:	59 1b       	sub	r21, r25
   1c9f8:	99 f0       	breq	.+38     	; 0x1ca20 <__addsf3x+0x5c>
   1c9fa:	59 3f       	cpi	r21, 0xF9	; 249
   1c9fc:	50 f4       	brcc	.+20     	; 0x1ca12 <__addsf3x+0x4e>
   1c9fe:	50 3e       	cpi	r21, 0xE0	; 224
   1ca00:	68 f1       	brcs	.+90     	; 0x1ca5c <__addsf3x+0x98>
   1ca02:	1a 16       	cp	r1, r26
   1ca04:	f0 40       	sbci	r31, 0x00	; 0
   1ca06:	a2 2f       	mov	r26, r18
   1ca08:	23 2f       	mov	r18, r19
   1ca0a:	34 2f       	mov	r19, r20
   1ca0c:	44 27       	eor	r20, r20
   1ca0e:	58 5f       	subi	r21, 0xF8	; 248
   1ca10:	f3 cf       	rjmp	.-26     	; 0x1c9f8 <__addsf3x+0x34>
   1ca12:	46 95       	lsr	r20
   1ca14:	37 95       	ror	r19
   1ca16:	27 95       	ror	r18
   1ca18:	a7 95       	ror	r26
   1ca1a:	f0 40       	sbci	r31, 0x00	; 0
   1ca1c:	53 95       	inc	r21
   1ca1e:	c9 f7       	brne	.-14     	; 0x1ca12 <__addsf3x+0x4e>
   1ca20:	7e f4       	brtc	.+30     	; 0x1ca40 <__addsf3x+0x7c>
   1ca22:	1f 16       	cp	r1, r31
   1ca24:	ba 0b       	sbc	r27, r26
   1ca26:	62 0b       	sbc	r22, r18
   1ca28:	73 0b       	sbc	r23, r19
   1ca2a:	84 0b       	sbc	r24, r20
   1ca2c:	ba f0       	brmi	.+46     	; 0x1ca5c <__addsf3x+0x98>
   1ca2e:	91 50       	subi	r25, 0x01	; 1
   1ca30:	a1 f0       	breq	.+40     	; 0x1ca5a <__addsf3x+0x96>
   1ca32:	ff 0f       	add	r31, r31
   1ca34:	bb 1f       	adc	r27, r27
   1ca36:	66 1f       	adc	r22, r22
   1ca38:	77 1f       	adc	r23, r23
   1ca3a:	88 1f       	adc	r24, r24
   1ca3c:	c2 f7       	brpl	.-16     	; 0x1ca2e <__addsf3x+0x6a>
   1ca3e:	0e c0       	rjmp	.+28     	; 0x1ca5c <__addsf3x+0x98>
   1ca40:	ba 0f       	add	r27, r26
   1ca42:	62 1f       	adc	r22, r18
   1ca44:	73 1f       	adc	r23, r19
   1ca46:	84 1f       	adc	r24, r20
   1ca48:	48 f4       	brcc	.+18     	; 0x1ca5c <__addsf3x+0x98>
   1ca4a:	87 95       	ror	r24
   1ca4c:	77 95       	ror	r23
   1ca4e:	67 95       	ror	r22
   1ca50:	b7 95       	ror	r27
   1ca52:	f7 95       	ror	r31
   1ca54:	9e 3f       	cpi	r25, 0xFE	; 254
   1ca56:	08 f0       	brcs	.+2      	; 0x1ca5a <__addsf3x+0x96>
   1ca58:	b3 cf       	rjmp	.-154    	; 0x1c9c0 <__addsf3+0x1e>
   1ca5a:	93 95       	inc	r25
   1ca5c:	88 0f       	add	r24, r24
   1ca5e:	08 f0       	brcs	.+2      	; 0x1ca62 <__addsf3x+0x9e>
   1ca60:	99 27       	eor	r25, r25
   1ca62:	ee 0f       	add	r30, r30
   1ca64:	97 95       	ror	r25
   1ca66:	87 95       	ror	r24
   1ca68:	08 95       	ret

0001ca6a <__cmpsf2>:
   1ca6a:	d9 d0       	rcall	.+434    	; 0x1cc1e <__fp_cmp>
   1ca6c:	08 f4       	brcc	.+2      	; 0x1ca70 <__cmpsf2+0x6>
   1ca6e:	81 e0       	ldi	r24, 0x01	; 1
   1ca70:	08 95       	ret

0001ca72 <__divsf3>:
   1ca72:	0c d0       	rcall	.+24     	; 0x1ca8c <__divsf3x>
   1ca74:	0f c1       	rjmp	.+542    	; 0x1cc94 <__fp_round>
   1ca76:	07 d1       	rcall	.+526    	; 0x1cc86 <__fp_pscB>
   1ca78:	40 f0       	brcs	.+16     	; 0x1ca8a <__divsf3+0x18>
   1ca7a:	fe d0       	rcall	.+508    	; 0x1cc78 <__fp_pscA>
   1ca7c:	30 f0       	brcs	.+12     	; 0x1ca8a <__divsf3+0x18>
   1ca7e:	21 f4       	brne	.+8      	; 0x1ca88 <__divsf3+0x16>
   1ca80:	5f 3f       	cpi	r21, 0xFF	; 255
   1ca82:	19 f0       	breq	.+6      	; 0x1ca8a <__divsf3+0x18>
   1ca84:	f0 c0       	rjmp	.+480    	; 0x1cc66 <__fp_inf>
   1ca86:	51 11       	cpse	r21, r1
   1ca88:	39 c1       	rjmp	.+626    	; 0x1ccfc <__fp_szero>
   1ca8a:	f3 c0       	rjmp	.+486    	; 0x1cc72 <__fp_nan>

0001ca8c <__divsf3x>:
   1ca8c:	14 d1       	rcall	.+552    	; 0x1ccb6 <__fp_split3>
   1ca8e:	98 f3       	brcs	.-26     	; 0x1ca76 <__divsf3+0x4>

0001ca90 <__divsf3_pse>:
   1ca90:	99 23       	and	r25, r25
   1ca92:	c9 f3       	breq	.-14     	; 0x1ca86 <__divsf3+0x14>
   1ca94:	55 23       	and	r21, r21
   1ca96:	b1 f3       	breq	.-20     	; 0x1ca84 <__divsf3+0x12>
   1ca98:	95 1b       	sub	r25, r21
   1ca9a:	55 0b       	sbc	r21, r21
   1ca9c:	bb 27       	eor	r27, r27
   1ca9e:	aa 27       	eor	r26, r26
   1caa0:	62 17       	cp	r22, r18
   1caa2:	73 07       	cpc	r23, r19
   1caa4:	84 07       	cpc	r24, r20
   1caa6:	38 f0       	brcs	.+14     	; 0x1cab6 <__divsf3_pse+0x26>
   1caa8:	9f 5f       	subi	r25, 0xFF	; 255
   1caaa:	5f 4f       	sbci	r21, 0xFF	; 255
   1caac:	22 0f       	add	r18, r18
   1caae:	33 1f       	adc	r19, r19
   1cab0:	44 1f       	adc	r20, r20
   1cab2:	aa 1f       	adc	r26, r26
   1cab4:	a9 f3       	breq	.-22     	; 0x1caa0 <__divsf3_pse+0x10>
   1cab6:	33 d0       	rcall	.+102    	; 0x1cb1e <__divsf3_pse+0x8e>
   1cab8:	0e 2e       	mov	r0, r30
   1caba:	3a f0       	brmi	.+14     	; 0x1caca <__divsf3_pse+0x3a>
   1cabc:	e0 e8       	ldi	r30, 0x80	; 128
   1cabe:	30 d0       	rcall	.+96     	; 0x1cb20 <__divsf3_pse+0x90>
   1cac0:	91 50       	subi	r25, 0x01	; 1
   1cac2:	50 40       	sbci	r21, 0x00	; 0
   1cac4:	e6 95       	lsr	r30
   1cac6:	00 1c       	adc	r0, r0
   1cac8:	ca f7       	brpl	.-14     	; 0x1cabc <__divsf3_pse+0x2c>
   1caca:	29 d0       	rcall	.+82     	; 0x1cb1e <__divsf3_pse+0x8e>
   1cacc:	fe 2f       	mov	r31, r30
   1cace:	27 d0       	rcall	.+78     	; 0x1cb1e <__divsf3_pse+0x8e>
   1cad0:	66 0f       	add	r22, r22
   1cad2:	77 1f       	adc	r23, r23
   1cad4:	88 1f       	adc	r24, r24
   1cad6:	bb 1f       	adc	r27, r27
   1cad8:	26 17       	cp	r18, r22
   1cada:	37 07       	cpc	r19, r23
   1cadc:	48 07       	cpc	r20, r24
   1cade:	ab 07       	cpc	r26, r27
   1cae0:	b0 e8       	ldi	r27, 0x80	; 128
   1cae2:	09 f0       	breq	.+2      	; 0x1cae6 <__divsf3_pse+0x56>
   1cae4:	bb 0b       	sbc	r27, r27
   1cae6:	80 2d       	mov	r24, r0
   1cae8:	bf 01       	movw	r22, r30
   1caea:	ff 27       	eor	r31, r31
   1caec:	93 58       	subi	r25, 0x83	; 131
   1caee:	5f 4f       	sbci	r21, 0xFF	; 255
   1caf0:	2a f0       	brmi	.+10     	; 0x1cafc <__divsf3_pse+0x6c>
   1caf2:	9e 3f       	cpi	r25, 0xFE	; 254
   1caf4:	51 05       	cpc	r21, r1
   1caf6:	68 f0       	brcs	.+26     	; 0x1cb12 <__divsf3_pse+0x82>
   1caf8:	b6 c0       	rjmp	.+364    	; 0x1cc66 <__fp_inf>
   1cafa:	00 c1       	rjmp	.+512    	; 0x1ccfc <__fp_szero>
   1cafc:	5f 3f       	cpi	r21, 0xFF	; 255
   1cafe:	ec f3       	brlt	.-6      	; 0x1cafa <__divsf3_pse+0x6a>
   1cb00:	98 3e       	cpi	r25, 0xE8	; 232
   1cb02:	dc f3       	brlt	.-10     	; 0x1cafa <__divsf3_pse+0x6a>
   1cb04:	86 95       	lsr	r24
   1cb06:	77 95       	ror	r23
   1cb08:	67 95       	ror	r22
   1cb0a:	b7 95       	ror	r27
   1cb0c:	f7 95       	ror	r31
   1cb0e:	9f 5f       	subi	r25, 0xFF	; 255
   1cb10:	c9 f7       	brne	.-14     	; 0x1cb04 <__divsf3_pse+0x74>
   1cb12:	88 0f       	add	r24, r24
   1cb14:	91 1d       	adc	r25, r1
   1cb16:	96 95       	lsr	r25
   1cb18:	87 95       	ror	r24
   1cb1a:	97 f9       	bld	r25, 7
   1cb1c:	08 95       	ret
   1cb1e:	e1 e0       	ldi	r30, 0x01	; 1
   1cb20:	66 0f       	add	r22, r22
   1cb22:	77 1f       	adc	r23, r23
   1cb24:	88 1f       	adc	r24, r24
   1cb26:	bb 1f       	adc	r27, r27
   1cb28:	62 17       	cp	r22, r18
   1cb2a:	73 07       	cpc	r23, r19
   1cb2c:	84 07       	cpc	r24, r20
   1cb2e:	ba 07       	cpc	r27, r26
   1cb30:	20 f0       	brcs	.+8      	; 0x1cb3a <__divsf3_pse+0xaa>
   1cb32:	62 1b       	sub	r22, r18
   1cb34:	73 0b       	sbc	r23, r19
   1cb36:	84 0b       	sbc	r24, r20
   1cb38:	ba 0b       	sbc	r27, r26
   1cb3a:	ee 1f       	adc	r30, r30
   1cb3c:	88 f7       	brcc	.-30     	; 0x1cb20 <__divsf3_pse+0x90>
   1cb3e:	e0 95       	com	r30
   1cb40:	08 95       	ret

0001cb42 <__fixsfsi>:
   1cb42:	04 d0       	rcall	.+8      	; 0x1cb4c <__fixunssfsi>
   1cb44:	68 94       	set
   1cb46:	b1 11       	cpse	r27, r1
   1cb48:	d9 c0       	rjmp	.+434    	; 0x1ccfc <__fp_szero>
   1cb4a:	08 95       	ret

0001cb4c <__fixunssfsi>:
   1cb4c:	bc d0       	rcall	.+376    	; 0x1ccc6 <__fp_splitA>
   1cb4e:	88 f0       	brcs	.+34     	; 0x1cb72 <__fixunssfsi+0x26>
   1cb50:	9f 57       	subi	r25, 0x7F	; 127
   1cb52:	90 f0       	brcs	.+36     	; 0x1cb78 <__fixunssfsi+0x2c>
   1cb54:	b9 2f       	mov	r27, r25
   1cb56:	99 27       	eor	r25, r25
   1cb58:	b7 51       	subi	r27, 0x17	; 23
   1cb5a:	a0 f0       	brcs	.+40     	; 0x1cb84 <__fixunssfsi+0x38>
   1cb5c:	d1 f0       	breq	.+52     	; 0x1cb92 <__fixunssfsi+0x46>
   1cb5e:	66 0f       	add	r22, r22
   1cb60:	77 1f       	adc	r23, r23
   1cb62:	88 1f       	adc	r24, r24
   1cb64:	99 1f       	adc	r25, r25
   1cb66:	1a f0       	brmi	.+6      	; 0x1cb6e <__fixunssfsi+0x22>
   1cb68:	ba 95       	dec	r27
   1cb6a:	c9 f7       	brne	.-14     	; 0x1cb5e <__fixunssfsi+0x12>
   1cb6c:	12 c0       	rjmp	.+36     	; 0x1cb92 <__fixunssfsi+0x46>
   1cb6e:	b1 30       	cpi	r27, 0x01	; 1
   1cb70:	81 f0       	breq	.+32     	; 0x1cb92 <__fixunssfsi+0x46>
   1cb72:	c3 d0       	rcall	.+390    	; 0x1ccfa <__fp_zero>
   1cb74:	b1 e0       	ldi	r27, 0x01	; 1
   1cb76:	08 95       	ret
   1cb78:	c0 c0       	rjmp	.+384    	; 0x1ccfa <__fp_zero>
   1cb7a:	67 2f       	mov	r22, r23
   1cb7c:	78 2f       	mov	r23, r24
   1cb7e:	88 27       	eor	r24, r24
   1cb80:	b8 5f       	subi	r27, 0xF8	; 248
   1cb82:	39 f0       	breq	.+14     	; 0x1cb92 <__fixunssfsi+0x46>
   1cb84:	b9 3f       	cpi	r27, 0xF9	; 249
   1cb86:	cc f3       	brlt	.-14     	; 0x1cb7a <__fixunssfsi+0x2e>
   1cb88:	86 95       	lsr	r24
   1cb8a:	77 95       	ror	r23
   1cb8c:	67 95       	ror	r22
   1cb8e:	b3 95       	inc	r27
   1cb90:	d9 f7       	brne	.-10     	; 0x1cb88 <__fixunssfsi+0x3c>
   1cb92:	3e f4       	brtc	.+14     	; 0x1cba2 <__fixunssfsi+0x56>
   1cb94:	90 95       	com	r25
   1cb96:	80 95       	com	r24
   1cb98:	70 95       	com	r23
   1cb9a:	61 95       	neg	r22
   1cb9c:	7f 4f       	sbci	r23, 0xFF	; 255
   1cb9e:	8f 4f       	sbci	r24, 0xFF	; 255
   1cba0:	9f 4f       	sbci	r25, 0xFF	; 255
   1cba2:	08 95       	ret

0001cba4 <__floatunsisf>:
   1cba4:	e8 94       	clt
   1cba6:	09 c0       	rjmp	.+18     	; 0x1cbba <__floatsisf+0x12>

0001cba8 <__floatsisf>:
   1cba8:	97 fb       	bst	r25, 7
   1cbaa:	3e f4       	brtc	.+14     	; 0x1cbba <__floatsisf+0x12>
   1cbac:	90 95       	com	r25
   1cbae:	80 95       	com	r24
   1cbb0:	70 95       	com	r23
   1cbb2:	61 95       	neg	r22
   1cbb4:	7f 4f       	sbci	r23, 0xFF	; 255
   1cbb6:	8f 4f       	sbci	r24, 0xFF	; 255
   1cbb8:	9f 4f       	sbci	r25, 0xFF	; 255
   1cbba:	99 23       	and	r25, r25
   1cbbc:	a9 f0       	breq	.+42     	; 0x1cbe8 <__floatsisf+0x40>
   1cbbe:	f9 2f       	mov	r31, r25
   1cbc0:	96 e9       	ldi	r25, 0x96	; 150
   1cbc2:	bb 27       	eor	r27, r27
   1cbc4:	93 95       	inc	r25
   1cbc6:	f6 95       	lsr	r31
   1cbc8:	87 95       	ror	r24
   1cbca:	77 95       	ror	r23
   1cbcc:	67 95       	ror	r22
   1cbce:	b7 95       	ror	r27
   1cbd0:	f1 11       	cpse	r31, r1
   1cbd2:	f8 cf       	rjmp	.-16     	; 0x1cbc4 <__floatsisf+0x1c>
   1cbd4:	fa f4       	brpl	.+62     	; 0x1cc14 <__floatsisf+0x6c>
   1cbd6:	bb 0f       	add	r27, r27
   1cbd8:	11 f4       	brne	.+4      	; 0x1cbde <__floatsisf+0x36>
   1cbda:	60 ff       	sbrs	r22, 0
   1cbdc:	1b c0       	rjmp	.+54     	; 0x1cc14 <__floatsisf+0x6c>
   1cbde:	6f 5f       	subi	r22, 0xFF	; 255
   1cbe0:	7f 4f       	sbci	r23, 0xFF	; 255
   1cbe2:	8f 4f       	sbci	r24, 0xFF	; 255
   1cbe4:	9f 4f       	sbci	r25, 0xFF	; 255
   1cbe6:	16 c0       	rjmp	.+44     	; 0x1cc14 <__floatsisf+0x6c>
   1cbe8:	88 23       	and	r24, r24
   1cbea:	11 f0       	breq	.+4      	; 0x1cbf0 <__floatsisf+0x48>
   1cbec:	96 e9       	ldi	r25, 0x96	; 150
   1cbee:	11 c0       	rjmp	.+34     	; 0x1cc12 <__floatsisf+0x6a>
   1cbf0:	77 23       	and	r23, r23
   1cbf2:	21 f0       	breq	.+8      	; 0x1cbfc <__floatsisf+0x54>
   1cbf4:	9e e8       	ldi	r25, 0x8E	; 142
   1cbf6:	87 2f       	mov	r24, r23
   1cbf8:	76 2f       	mov	r23, r22
   1cbfa:	05 c0       	rjmp	.+10     	; 0x1cc06 <__floatsisf+0x5e>
   1cbfc:	66 23       	and	r22, r22
   1cbfe:	71 f0       	breq	.+28     	; 0x1cc1c <__floatsisf+0x74>
   1cc00:	96 e8       	ldi	r25, 0x86	; 134
   1cc02:	86 2f       	mov	r24, r22
   1cc04:	70 e0       	ldi	r23, 0x00	; 0
   1cc06:	60 e0       	ldi	r22, 0x00	; 0
   1cc08:	2a f0       	brmi	.+10     	; 0x1cc14 <__floatsisf+0x6c>
   1cc0a:	9a 95       	dec	r25
   1cc0c:	66 0f       	add	r22, r22
   1cc0e:	77 1f       	adc	r23, r23
   1cc10:	88 1f       	adc	r24, r24
   1cc12:	da f7       	brpl	.-10     	; 0x1cc0a <__floatsisf+0x62>
   1cc14:	88 0f       	add	r24, r24
   1cc16:	96 95       	lsr	r25
   1cc18:	87 95       	ror	r24
   1cc1a:	97 f9       	bld	r25, 7
   1cc1c:	08 95       	ret

0001cc1e <__fp_cmp>:
   1cc1e:	99 0f       	add	r25, r25
   1cc20:	00 08       	sbc	r0, r0
   1cc22:	55 0f       	add	r21, r21
   1cc24:	aa 0b       	sbc	r26, r26
   1cc26:	e0 e8       	ldi	r30, 0x80	; 128
   1cc28:	fe ef       	ldi	r31, 0xFE	; 254
   1cc2a:	16 16       	cp	r1, r22
   1cc2c:	17 06       	cpc	r1, r23
   1cc2e:	e8 07       	cpc	r30, r24
   1cc30:	f9 07       	cpc	r31, r25
   1cc32:	c0 f0       	brcs	.+48     	; 0x1cc64 <__fp_cmp+0x46>
   1cc34:	12 16       	cp	r1, r18
   1cc36:	13 06       	cpc	r1, r19
   1cc38:	e4 07       	cpc	r30, r20
   1cc3a:	f5 07       	cpc	r31, r21
   1cc3c:	98 f0       	brcs	.+38     	; 0x1cc64 <__fp_cmp+0x46>
   1cc3e:	62 1b       	sub	r22, r18
   1cc40:	73 0b       	sbc	r23, r19
   1cc42:	84 0b       	sbc	r24, r20
   1cc44:	95 0b       	sbc	r25, r21
   1cc46:	39 f4       	brne	.+14     	; 0x1cc56 <__fp_cmp+0x38>
   1cc48:	0a 26       	eor	r0, r26
   1cc4a:	61 f0       	breq	.+24     	; 0x1cc64 <__fp_cmp+0x46>
   1cc4c:	23 2b       	or	r18, r19
   1cc4e:	24 2b       	or	r18, r20
   1cc50:	25 2b       	or	r18, r21
   1cc52:	21 f4       	brne	.+8      	; 0x1cc5c <__fp_cmp+0x3e>
   1cc54:	08 95       	ret
   1cc56:	0a 26       	eor	r0, r26
   1cc58:	09 f4       	brne	.+2      	; 0x1cc5c <__fp_cmp+0x3e>
   1cc5a:	a1 40       	sbci	r26, 0x01	; 1
   1cc5c:	a6 95       	lsr	r26
   1cc5e:	8f ef       	ldi	r24, 0xFF	; 255
   1cc60:	81 1d       	adc	r24, r1
   1cc62:	81 1d       	adc	r24, r1
   1cc64:	08 95       	ret

0001cc66 <__fp_inf>:
   1cc66:	97 f9       	bld	r25, 7
   1cc68:	9f 67       	ori	r25, 0x7F	; 127
   1cc6a:	80 e8       	ldi	r24, 0x80	; 128
   1cc6c:	70 e0       	ldi	r23, 0x00	; 0
   1cc6e:	60 e0       	ldi	r22, 0x00	; 0
   1cc70:	08 95       	ret

0001cc72 <__fp_nan>:
   1cc72:	9f ef       	ldi	r25, 0xFF	; 255
   1cc74:	80 ec       	ldi	r24, 0xC0	; 192
   1cc76:	08 95       	ret

0001cc78 <__fp_pscA>:
   1cc78:	00 24       	eor	r0, r0
   1cc7a:	0a 94       	dec	r0
   1cc7c:	16 16       	cp	r1, r22
   1cc7e:	17 06       	cpc	r1, r23
   1cc80:	18 06       	cpc	r1, r24
   1cc82:	09 06       	cpc	r0, r25
   1cc84:	08 95       	ret

0001cc86 <__fp_pscB>:
   1cc86:	00 24       	eor	r0, r0
   1cc88:	0a 94       	dec	r0
   1cc8a:	12 16       	cp	r1, r18
   1cc8c:	13 06       	cpc	r1, r19
   1cc8e:	14 06       	cpc	r1, r20
   1cc90:	05 06       	cpc	r0, r21
   1cc92:	08 95       	ret

0001cc94 <__fp_round>:
   1cc94:	09 2e       	mov	r0, r25
   1cc96:	03 94       	inc	r0
   1cc98:	00 0c       	add	r0, r0
   1cc9a:	11 f4       	brne	.+4      	; 0x1cca0 <__fp_round+0xc>
   1cc9c:	88 23       	and	r24, r24
   1cc9e:	52 f0       	brmi	.+20     	; 0x1ccb4 <__fp_round+0x20>
   1cca0:	bb 0f       	add	r27, r27
   1cca2:	40 f4       	brcc	.+16     	; 0x1ccb4 <__fp_round+0x20>
   1cca4:	bf 2b       	or	r27, r31
   1cca6:	11 f4       	brne	.+4      	; 0x1ccac <__fp_round+0x18>
   1cca8:	60 ff       	sbrs	r22, 0
   1ccaa:	04 c0       	rjmp	.+8      	; 0x1ccb4 <__fp_round+0x20>
   1ccac:	6f 5f       	subi	r22, 0xFF	; 255
   1ccae:	7f 4f       	sbci	r23, 0xFF	; 255
   1ccb0:	8f 4f       	sbci	r24, 0xFF	; 255
   1ccb2:	9f 4f       	sbci	r25, 0xFF	; 255
   1ccb4:	08 95       	ret

0001ccb6 <__fp_split3>:
   1ccb6:	57 fd       	sbrc	r21, 7
   1ccb8:	90 58       	subi	r25, 0x80	; 128
   1ccba:	44 0f       	add	r20, r20
   1ccbc:	55 1f       	adc	r21, r21
   1ccbe:	59 f0       	breq	.+22     	; 0x1ccd6 <__fp_splitA+0x10>
   1ccc0:	5f 3f       	cpi	r21, 0xFF	; 255
   1ccc2:	71 f0       	breq	.+28     	; 0x1cce0 <__fp_splitA+0x1a>
   1ccc4:	47 95       	ror	r20

0001ccc6 <__fp_splitA>:
   1ccc6:	88 0f       	add	r24, r24
   1ccc8:	97 fb       	bst	r25, 7
   1ccca:	99 1f       	adc	r25, r25
   1cccc:	61 f0       	breq	.+24     	; 0x1cce6 <__fp_splitA+0x20>
   1ccce:	9f 3f       	cpi	r25, 0xFF	; 255
   1ccd0:	79 f0       	breq	.+30     	; 0x1ccf0 <__fp_splitA+0x2a>
   1ccd2:	87 95       	ror	r24
   1ccd4:	08 95       	ret
   1ccd6:	12 16       	cp	r1, r18
   1ccd8:	13 06       	cpc	r1, r19
   1ccda:	14 06       	cpc	r1, r20
   1ccdc:	55 1f       	adc	r21, r21
   1ccde:	f2 cf       	rjmp	.-28     	; 0x1ccc4 <__fp_split3+0xe>
   1cce0:	46 95       	lsr	r20
   1cce2:	f1 df       	rcall	.-30     	; 0x1ccc6 <__fp_splitA>
   1cce4:	08 c0       	rjmp	.+16     	; 0x1ccf6 <__fp_splitA+0x30>
   1cce6:	16 16       	cp	r1, r22
   1cce8:	17 06       	cpc	r1, r23
   1ccea:	18 06       	cpc	r1, r24
   1ccec:	99 1f       	adc	r25, r25
   1ccee:	f1 cf       	rjmp	.-30     	; 0x1ccd2 <__fp_splitA+0xc>
   1ccf0:	86 95       	lsr	r24
   1ccf2:	71 05       	cpc	r23, r1
   1ccf4:	61 05       	cpc	r22, r1
   1ccf6:	08 94       	sec
   1ccf8:	08 95       	ret

0001ccfa <__fp_zero>:
   1ccfa:	e8 94       	clt

0001ccfc <__fp_szero>:
   1ccfc:	bb 27       	eor	r27, r27
   1ccfe:	66 27       	eor	r22, r22
   1cd00:	77 27       	eor	r23, r23
   1cd02:	cb 01       	movw	r24, r22
   1cd04:	97 f9       	bld	r25, 7
   1cd06:	08 95       	ret

0001cd08 <__gesf2>:
   1cd08:	8a df       	rcall	.-236    	; 0x1cc1e <__fp_cmp>
   1cd0a:	08 f4       	brcc	.+2      	; 0x1cd0e <__gesf2+0x6>
   1cd0c:	8f ef       	ldi	r24, 0xFF	; 255
   1cd0e:	08 95       	ret

0001cd10 <__mulsf3>:
   1cd10:	0b d0       	rcall	.+22     	; 0x1cd28 <__mulsf3x>
   1cd12:	c0 cf       	rjmp	.-128    	; 0x1cc94 <__fp_round>
   1cd14:	b1 df       	rcall	.-158    	; 0x1cc78 <__fp_pscA>
   1cd16:	28 f0       	brcs	.+10     	; 0x1cd22 <__mulsf3+0x12>
   1cd18:	b6 df       	rcall	.-148    	; 0x1cc86 <__fp_pscB>
   1cd1a:	18 f0       	brcs	.+6      	; 0x1cd22 <__mulsf3+0x12>
   1cd1c:	95 23       	and	r25, r21
   1cd1e:	09 f0       	breq	.+2      	; 0x1cd22 <__mulsf3+0x12>
   1cd20:	a2 cf       	rjmp	.-188    	; 0x1cc66 <__fp_inf>
   1cd22:	a7 cf       	rjmp	.-178    	; 0x1cc72 <__fp_nan>
   1cd24:	11 24       	eor	r1, r1
   1cd26:	ea cf       	rjmp	.-44     	; 0x1ccfc <__fp_szero>

0001cd28 <__mulsf3x>:
   1cd28:	c6 df       	rcall	.-116    	; 0x1ccb6 <__fp_split3>
   1cd2a:	a0 f3       	brcs	.-24     	; 0x1cd14 <__mulsf3+0x4>

0001cd2c <__mulsf3_pse>:
   1cd2c:	95 9f       	mul	r25, r21
   1cd2e:	d1 f3       	breq	.-12     	; 0x1cd24 <__mulsf3+0x14>
   1cd30:	95 0f       	add	r25, r21
   1cd32:	50 e0       	ldi	r21, 0x00	; 0
   1cd34:	55 1f       	adc	r21, r21
   1cd36:	62 9f       	mul	r22, r18
   1cd38:	f0 01       	movw	r30, r0
   1cd3a:	72 9f       	mul	r23, r18
   1cd3c:	bb 27       	eor	r27, r27
   1cd3e:	f0 0d       	add	r31, r0
   1cd40:	b1 1d       	adc	r27, r1
   1cd42:	63 9f       	mul	r22, r19
   1cd44:	aa 27       	eor	r26, r26
   1cd46:	f0 0d       	add	r31, r0
   1cd48:	b1 1d       	adc	r27, r1
   1cd4a:	aa 1f       	adc	r26, r26
   1cd4c:	64 9f       	mul	r22, r20
   1cd4e:	66 27       	eor	r22, r22
   1cd50:	b0 0d       	add	r27, r0
   1cd52:	a1 1d       	adc	r26, r1
   1cd54:	66 1f       	adc	r22, r22
   1cd56:	82 9f       	mul	r24, r18
   1cd58:	22 27       	eor	r18, r18
   1cd5a:	b0 0d       	add	r27, r0
   1cd5c:	a1 1d       	adc	r26, r1
   1cd5e:	62 1f       	adc	r22, r18
   1cd60:	73 9f       	mul	r23, r19
   1cd62:	b0 0d       	add	r27, r0
   1cd64:	a1 1d       	adc	r26, r1
   1cd66:	62 1f       	adc	r22, r18
   1cd68:	83 9f       	mul	r24, r19
   1cd6a:	a0 0d       	add	r26, r0
   1cd6c:	61 1d       	adc	r22, r1
   1cd6e:	22 1f       	adc	r18, r18
   1cd70:	74 9f       	mul	r23, r20
   1cd72:	33 27       	eor	r19, r19
   1cd74:	a0 0d       	add	r26, r0
   1cd76:	61 1d       	adc	r22, r1
   1cd78:	23 1f       	adc	r18, r19
   1cd7a:	84 9f       	mul	r24, r20
   1cd7c:	60 0d       	add	r22, r0
   1cd7e:	21 1d       	adc	r18, r1
   1cd80:	82 2f       	mov	r24, r18
   1cd82:	76 2f       	mov	r23, r22
   1cd84:	6a 2f       	mov	r22, r26
   1cd86:	11 24       	eor	r1, r1
   1cd88:	9f 57       	subi	r25, 0x7F	; 127
   1cd8a:	50 40       	sbci	r21, 0x00	; 0
   1cd8c:	8a f0       	brmi	.+34     	; 0x1cdb0 <__mulsf3_pse+0x84>
   1cd8e:	e1 f0       	breq	.+56     	; 0x1cdc8 <__mulsf3_pse+0x9c>
   1cd90:	88 23       	and	r24, r24
   1cd92:	4a f0       	brmi	.+18     	; 0x1cda6 <__mulsf3_pse+0x7a>
   1cd94:	ee 0f       	add	r30, r30
   1cd96:	ff 1f       	adc	r31, r31
   1cd98:	bb 1f       	adc	r27, r27
   1cd9a:	66 1f       	adc	r22, r22
   1cd9c:	77 1f       	adc	r23, r23
   1cd9e:	88 1f       	adc	r24, r24
   1cda0:	91 50       	subi	r25, 0x01	; 1
   1cda2:	50 40       	sbci	r21, 0x00	; 0
   1cda4:	a9 f7       	brne	.-22     	; 0x1cd90 <__mulsf3_pse+0x64>
   1cda6:	9e 3f       	cpi	r25, 0xFE	; 254
   1cda8:	51 05       	cpc	r21, r1
   1cdaa:	70 f0       	brcs	.+28     	; 0x1cdc8 <__mulsf3_pse+0x9c>
   1cdac:	5c cf       	rjmp	.-328    	; 0x1cc66 <__fp_inf>
   1cdae:	a6 cf       	rjmp	.-180    	; 0x1ccfc <__fp_szero>
   1cdb0:	5f 3f       	cpi	r21, 0xFF	; 255
   1cdb2:	ec f3       	brlt	.-6      	; 0x1cdae <__mulsf3_pse+0x82>
   1cdb4:	98 3e       	cpi	r25, 0xE8	; 232
   1cdb6:	dc f3       	brlt	.-10     	; 0x1cdae <__mulsf3_pse+0x82>
   1cdb8:	86 95       	lsr	r24
   1cdba:	77 95       	ror	r23
   1cdbc:	67 95       	ror	r22
   1cdbe:	b7 95       	ror	r27
   1cdc0:	f7 95       	ror	r31
   1cdc2:	e7 95       	ror	r30
   1cdc4:	9f 5f       	subi	r25, 0xFF	; 255
   1cdc6:	c1 f7       	brne	.-16     	; 0x1cdb8 <__mulsf3_pse+0x8c>
   1cdc8:	fe 2b       	or	r31, r30
   1cdca:	88 0f       	add	r24, r24
   1cdcc:	91 1d       	adc	r25, r1
   1cdce:	96 95       	lsr	r25
   1cdd0:	87 95       	ror	r24
   1cdd2:	97 f9       	bld	r25, 7
   1cdd4:	08 95       	ret

0001cdd6 <round>:
   1cdd6:	77 df       	rcall	.-274    	; 0x1ccc6 <__fp_splitA>
   1cdd8:	e0 f0       	brcs	.+56     	; 0x1ce12 <round+0x3c>
   1cdda:	9e 37       	cpi	r25, 0x7E	; 126
   1cddc:	d8 f0       	brcs	.+54     	; 0x1ce14 <round+0x3e>
   1cdde:	96 39       	cpi	r25, 0x96	; 150
   1cde0:	b8 f4       	brcc	.+46     	; 0x1ce10 <round+0x3a>
   1cde2:	9e 38       	cpi	r25, 0x8E	; 142
   1cde4:	48 f4       	brcc	.+18     	; 0x1cdf8 <round+0x22>
   1cde6:	67 2f       	mov	r22, r23
   1cde8:	78 2f       	mov	r23, r24
   1cdea:	88 27       	eor	r24, r24
   1cdec:	98 5f       	subi	r25, 0xF8	; 248
   1cdee:	f9 cf       	rjmp	.-14     	; 0x1cde2 <round+0xc>
   1cdf0:	86 95       	lsr	r24
   1cdf2:	77 95       	ror	r23
   1cdf4:	67 95       	ror	r22
   1cdf6:	93 95       	inc	r25
   1cdf8:	95 39       	cpi	r25, 0x95	; 149
   1cdfa:	d0 f3       	brcs	.-12     	; 0x1cdf0 <round+0x1a>
   1cdfc:	b6 2f       	mov	r27, r22
   1cdfe:	b1 70       	andi	r27, 0x01	; 1
   1ce00:	6b 0f       	add	r22, r27
   1ce02:	71 1d       	adc	r23, r1
   1ce04:	81 1d       	adc	r24, r1
   1ce06:	20 f4       	brcc	.+8      	; 0x1ce10 <round+0x3a>
   1ce08:	87 95       	ror	r24
   1ce0a:	77 95       	ror	r23
   1ce0c:	67 95       	ror	r22
   1ce0e:	93 95       	inc	r25
   1ce10:	02 c0       	rjmp	.+4      	; 0x1ce16 <__fp_mintl>
   1ce12:	1c c0       	rjmp	.+56     	; 0x1ce4c <__fp_mpack>
   1ce14:	73 cf       	rjmp	.-282    	; 0x1ccfc <__fp_szero>

0001ce16 <__fp_mintl>:
   1ce16:	88 23       	and	r24, r24
   1ce18:	71 f4       	brne	.+28     	; 0x1ce36 <__fp_mintl+0x20>
   1ce1a:	77 23       	and	r23, r23
   1ce1c:	21 f0       	breq	.+8      	; 0x1ce26 <__fp_mintl+0x10>
   1ce1e:	98 50       	subi	r25, 0x08	; 8
   1ce20:	87 2b       	or	r24, r23
   1ce22:	76 2f       	mov	r23, r22
   1ce24:	07 c0       	rjmp	.+14     	; 0x1ce34 <__fp_mintl+0x1e>
   1ce26:	66 23       	and	r22, r22
   1ce28:	11 f4       	brne	.+4      	; 0x1ce2e <__fp_mintl+0x18>
   1ce2a:	99 27       	eor	r25, r25
   1ce2c:	0d c0       	rjmp	.+26     	; 0x1ce48 <__fp_mintl+0x32>
   1ce2e:	90 51       	subi	r25, 0x10	; 16
   1ce30:	86 2b       	or	r24, r22
   1ce32:	70 e0       	ldi	r23, 0x00	; 0
   1ce34:	60 e0       	ldi	r22, 0x00	; 0
   1ce36:	2a f0       	brmi	.+10     	; 0x1ce42 <__fp_mintl+0x2c>
   1ce38:	9a 95       	dec	r25
   1ce3a:	66 0f       	add	r22, r22
   1ce3c:	77 1f       	adc	r23, r23
   1ce3e:	88 1f       	adc	r24, r24
   1ce40:	da f7       	brpl	.-10     	; 0x1ce38 <__fp_mintl+0x22>
   1ce42:	88 0f       	add	r24, r24
   1ce44:	96 95       	lsr	r25
   1ce46:	87 95       	ror	r24
   1ce48:	97 f9       	bld	r25, 7
   1ce4a:	08 95       	ret

0001ce4c <__fp_mpack>:
   1ce4c:	9f 3f       	cpi	r25, 0xFF	; 255
   1ce4e:	31 f0       	breq	.+12     	; 0x1ce5c <__fp_mpack_finite+0xc>

0001ce50 <__fp_mpack_finite>:
   1ce50:	91 50       	subi	r25, 0x01	; 1
   1ce52:	20 f4       	brcc	.+8      	; 0x1ce5c <__fp_mpack_finite+0xc>
   1ce54:	87 95       	ror	r24
   1ce56:	77 95       	ror	r23
   1ce58:	67 95       	ror	r22
   1ce5a:	b7 95       	ror	r27
   1ce5c:	88 0f       	add	r24, r24
   1ce5e:	91 1d       	adc	r25, r1
   1ce60:	96 95       	lsr	r25
   1ce62:	87 95       	ror	r24
   1ce64:	97 f9       	bld	r25, 7
   1ce66:	08 95       	ret

0001ce68 <calloc>:
   1ce68:	0f 93       	push	r16
   1ce6a:	1f 93       	push	r17
   1ce6c:	cf 93       	push	r28
   1ce6e:	df 93       	push	r29
   1ce70:	86 9f       	mul	r24, r22
   1ce72:	80 01       	movw	r16, r0
   1ce74:	87 9f       	mul	r24, r23
   1ce76:	10 0d       	add	r17, r0
   1ce78:	96 9f       	mul	r25, r22
   1ce7a:	10 0d       	add	r17, r0
   1ce7c:	11 24       	eor	r1, r1
   1ce7e:	c8 01       	movw	r24, r16
   1ce80:	0d d0       	rcall	.+26     	; 0x1ce9c <malloc>
   1ce82:	ec 01       	movw	r28, r24
   1ce84:	00 97       	sbiw	r24, 0x00	; 0
   1ce86:	21 f0       	breq	.+8      	; 0x1ce90 <calloc+0x28>
   1ce88:	a8 01       	movw	r20, r16
   1ce8a:	60 e0       	ldi	r22, 0x00	; 0
   1ce8c:	70 e0       	ldi	r23, 0x00	; 0
   1ce8e:	0e d2       	rcall	.+1052   	; 0x1d2ac <memset>
   1ce90:	ce 01       	movw	r24, r28
   1ce92:	df 91       	pop	r29
   1ce94:	cf 91       	pop	r28
   1ce96:	1f 91       	pop	r17
   1ce98:	0f 91       	pop	r16
   1ce9a:	08 95       	ret

0001ce9c <malloc>:
   1ce9c:	0f 93       	push	r16
   1ce9e:	1f 93       	push	r17
   1cea0:	cf 93       	push	r28
   1cea2:	df 93       	push	r29
   1cea4:	82 30       	cpi	r24, 0x02	; 2
   1cea6:	91 05       	cpc	r25, r1
   1cea8:	10 f4       	brcc	.+4      	; 0x1ceae <malloc+0x12>
   1ceaa:	82 e0       	ldi	r24, 0x02	; 2
   1ceac:	90 e0       	ldi	r25, 0x00	; 0
   1ceae:	e0 91 46 21 	lds	r30, 0x2146	; 0x802146 <__flp>
   1ceb2:	f0 91 47 21 	lds	r31, 0x2147	; 0x802147 <__flp+0x1>
   1ceb6:	20 e0       	ldi	r18, 0x00	; 0
   1ceb8:	30 e0       	ldi	r19, 0x00	; 0
   1ceba:	a0 e0       	ldi	r26, 0x00	; 0
   1cebc:	b0 e0       	ldi	r27, 0x00	; 0
   1cebe:	30 97       	sbiw	r30, 0x00	; 0
   1cec0:	19 f1       	breq	.+70     	; 0x1cf08 <malloc+0x6c>
   1cec2:	40 81       	ld	r20, Z
   1cec4:	51 81       	ldd	r21, Z+1	; 0x01
   1cec6:	02 81       	ldd	r16, Z+2	; 0x02
   1cec8:	13 81       	ldd	r17, Z+3	; 0x03
   1ceca:	48 17       	cp	r20, r24
   1cecc:	59 07       	cpc	r21, r25
   1cece:	c8 f0       	brcs	.+50     	; 0x1cf02 <malloc+0x66>
   1ced0:	84 17       	cp	r24, r20
   1ced2:	95 07       	cpc	r25, r21
   1ced4:	69 f4       	brne	.+26     	; 0x1cef0 <malloc+0x54>
   1ced6:	10 97       	sbiw	r26, 0x00	; 0
   1ced8:	31 f0       	breq	.+12     	; 0x1cee6 <malloc+0x4a>
   1ceda:	12 96       	adiw	r26, 0x02	; 2
   1cedc:	0c 93       	st	X, r16
   1cede:	12 97       	sbiw	r26, 0x02	; 2
   1cee0:	13 96       	adiw	r26, 0x03	; 3
   1cee2:	1c 93       	st	X, r17
   1cee4:	27 c0       	rjmp	.+78     	; 0x1cf34 <malloc+0x98>
   1cee6:	00 93 46 21 	sts	0x2146, r16	; 0x802146 <__flp>
   1ceea:	10 93 47 21 	sts	0x2147, r17	; 0x802147 <__flp+0x1>
   1ceee:	22 c0       	rjmp	.+68     	; 0x1cf34 <malloc+0x98>
   1cef0:	21 15       	cp	r18, r1
   1cef2:	31 05       	cpc	r19, r1
   1cef4:	19 f0       	breq	.+6      	; 0x1cefc <malloc+0x60>
   1cef6:	42 17       	cp	r20, r18
   1cef8:	53 07       	cpc	r21, r19
   1cefa:	18 f4       	brcc	.+6      	; 0x1cf02 <malloc+0x66>
   1cefc:	9a 01       	movw	r18, r20
   1cefe:	bd 01       	movw	r22, r26
   1cf00:	ef 01       	movw	r28, r30
   1cf02:	df 01       	movw	r26, r30
   1cf04:	f8 01       	movw	r30, r16
   1cf06:	db cf       	rjmp	.-74     	; 0x1cebe <malloc+0x22>
   1cf08:	21 15       	cp	r18, r1
   1cf0a:	31 05       	cpc	r19, r1
   1cf0c:	f9 f0       	breq	.+62     	; 0x1cf4c <malloc+0xb0>
   1cf0e:	28 1b       	sub	r18, r24
   1cf10:	39 0b       	sbc	r19, r25
   1cf12:	24 30       	cpi	r18, 0x04	; 4
   1cf14:	31 05       	cpc	r19, r1
   1cf16:	80 f4       	brcc	.+32     	; 0x1cf38 <malloc+0x9c>
   1cf18:	8a 81       	ldd	r24, Y+2	; 0x02
   1cf1a:	9b 81       	ldd	r25, Y+3	; 0x03
   1cf1c:	61 15       	cp	r22, r1
   1cf1e:	71 05       	cpc	r23, r1
   1cf20:	21 f0       	breq	.+8      	; 0x1cf2a <malloc+0x8e>
   1cf22:	fb 01       	movw	r30, r22
   1cf24:	93 83       	std	Z+3, r25	; 0x03
   1cf26:	82 83       	std	Z+2, r24	; 0x02
   1cf28:	04 c0       	rjmp	.+8      	; 0x1cf32 <malloc+0x96>
   1cf2a:	90 93 47 21 	sts	0x2147, r25	; 0x802147 <__flp+0x1>
   1cf2e:	80 93 46 21 	sts	0x2146, r24	; 0x802146 <__flp>
   1cf32:	fe 01       	movw	r30, r28
   1cf34:	32 96       	adiw	r30, 0x02	; 2
   1cf36:	44 c0       	rjmp	.+136    	; 0x1cfc0 <malloc+0x124>
   1cf38:	fe 01       	movw	r30, r28
   1cf3a:	e2 0f       	add	r30, r18
   1cf3c:	f3 1f       	adc	r31, r19
   1cf3e:	81 93       	st	Z+, r24
   1cf40:	91 93       	st	Z+, r25
   1cf42:	22 50       	subi	r18, 0x02	; 2
   1cf44:	31 09       	sbc	r19, r1
   1cf46:	39 83       	std	Y+1, r19	; 0x01
   1cf48:	28 83       	st	Y, r18
   1cf4a:	3a c0       	rjmp	.+116    	; 0x1cfc0 <malloc+0x124>
   1cf4c:	20 91 44 21 	lds	r18, 0x2144	; 0x802144 <__brkval>
   1cf50:	30 91 45 21 	lds	r19, 0x2145	; 0x802145 <__brkval+0x1>
   1cf54:	23 2b       	or	r18, r19
   1cf56:	41 f4       	brne	.+16     	; 0x1cf68 <malloc+0xcc>
   1cf58:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1cf5c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1cf60:	30 93 45 21 	sts	0x2145, r19	; 0x802145 <__brkval+0x1>
   1cf64:	20 93 44 21 	sts	0x2144, r18	; 0x802144 <__brkval>
   1cf68:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
   1cf6c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
   1cf70:	21 15       	cp	r18, r1
   1cf72:	31 05       	cpc	r19, r1
   1cf74:	41 f4       	brne	.+16     	; 0x1cf86 <malloc+0xea>
   1cf76:	2d b7       	in	r18, 0x3d	; 61
   1cf78:	3e b7       	in	r19, 0x3e	; 62
   1cf7a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1cf7e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1cf82:	24 1b       	sub	r18, r20
   1cf84:	35 0b       	sbc	r19, r21
   1cf86:	e0 91 44 21 	lds	r30, 0x2144	; 0x802144 <__brkval>
   1cf8a:	f0 91 45 21 	lds	r31, 0x2145	; 0x802145 <__brkval+0x1>
   1cf8e:	e2 17       	cp	r30, r18
   1cf90:	f3 07       	cpc	r31, r19
   1cf92:	a0 f4       	brcc	.+40     	; 0x1cfbc <malloc+0x120>
   1cf94:	2e 1b       	sub	r18, r30
   1cf96:	3f 0b       	sbc	r19, r31
   1cf98:	28 17       	cp	r18, r24
   1cf9a:	39 07       	cpc	r19, r25
   1cf9c:	78 f0       	brcs	.+30     	; 0x1cfbc <malloc+0x120>
   1cf9e:	ac 01       	movw	r20, r24
   1cfa0:	4e 5f       	subi	r20, 0xFE	; 254
   1cfa2:	5f 4f       	sbci	r21, 0xFF	; 255
   1cfa4:	24 17       	cp	r18, r20
   1cfa6:	35 07       	cpc	r19, r21
   1cfa8:	48 f0       	brcs	.+18     	; 0x1cfbc <malloc+0x120>
   1cfaa:	4e 0f       	add	r20, r30
   1cfac:	5f 1f       	adc	r21, r31
   1cfae:	50 93 45 21 	sts	0x2145, r21	; 0x802145 <__brkval+0x1>
   1cfb2:	40 93 44 21 	sts	0x2144, r20	; 0x802144 <__brkval>
   1cfb6:	81 93       	st	Z+, r24
   1cfb8:	91 93       	st	Z+, r25
   1cfba:	02 c0       	rjmp	.+4      	; 0x1cfc0 <malloc+0x124>
   1cfbc:	e0 e0       	ldi	r30, 0x00	; 0
   1cfbe:	f0 e0       	ldi	r31, 0x00	; 0
   1cfc0:	cf 01       	movw	r24, r30
   1cfc2:	df 91       	pop	r29
   1cfc4:	cf 91       	pop	r28
   1cfc6:	1f 91       	pop	r17
   1cfc8:	0f 91       	pop	r16
   1cfca:	08 95       	ret

0001cfcc <free>:
   1cfcc:	cf 93       	push	r28
   1cfce:	df 93       	push	r29
   1cfd0:	00 97       	sbiw	r24, 0x00	; 0
   1cfd2:	09 f4       	brne	.+2      	; 0x1cfd6 <free+0xa>
   1cfd4:	81 c0       	rjmp	.+258    	; 0x1d0d8 <free+0x10c>
   1cfd6:	fc 01       	movw	r30, r24
   1cfd8:	32 97       	sbiw	r30, 0x02	; 2
   1cfda:	13 82       	std	Z+3, r1	; 0x03
   1cfdc:	12 82       	std	Z+2, r1	; 0x02
   1cfde:	a0 91 46 21 	lds	r26, 0x2146	; 0x802146 <__flp>
   1cfe2:	b0 91 47 21 	lds	r27, 0x2147	; 0x802147 <__flp+0x1>
   1cfe6:	10 97       	sbiw	r26, 0x00	; 0
   1cfe8:	81 f4       	brne	.+32     	; 0x1d00a <free+0x3e>
   1cfea:	20 81       	ld	r18, Z
   1cfec:	31 81       	ldd	r19, Z+1	; 0x01
   1cfee:	82 0f       	add	r24, r18
   1cff0:	93 1f       	adc	r25, r19
   1cff2:	20 91 44 21 	lds	r18, 0x2144	; 0x802144 <__brkval>
   1cff6:	30 91 45 21 	lds	r19, 0x2145	; 0x802145 <__brkval+0x1>
   1cffa:	28 17       	cp	r18, r24
   1cffc:	39 07       	cpc	r19, r25
   1cffe:	51 f5       	brne	.+84     	; 0x1d054 <free+0x88>
   1d000:	f0 93 45 21 	sts	0x2145, r31	; 0x802145 <__brkval+0x1>
   1d004:	e0 93 44 21 	sts	0x2144, r30	; 0x802144 <__brkval>
   1d008:	67 c0       	rjmp	.+206    	; 0x1d0d8 <free+0x10c>
   1d00a:	ed 01       	movw	r28, r26
   1d00c:	20 e0       	ldi	r18, 0x00	; 0
   1d00e:	30 e0       	ldi	r19, 0x00	; 0
   1d010:	ce 17       	cp	r28, r30
   1d012:	df 07       	cpc	r29, r31
   1d014:	40 f4       	brcc	.+16     	; 0x1d026 <free+0x5a>
   1d016:	4a 81       	ldd	r20, Y+2	; 0x02
   1d018:	5b 81       	ldd	r21, Y+3	; 0x03
   1d01a:	9e 01       	movw	r18, r28
   1d01c:	41 15       	cp	r20, r1
   1d01e:	51 05       	cpc	r21, r1
   1d020:	f1 f0       	breq	.+60     	; 0x1d05e <free+0x92>
   1d022:	ea 01       	movw	r28, r20
   1d024:	f5 cf       	rjmp	.-22     	; 0x1d010 <free+0x44>
   1d026:	d3 83       	std	Z+3, r29	; 0x03
   1d028:	c2 83       	std	Z+2, r28	; 0x02
   1d02a:	40 81       	ld	r20, Z
   1d02c:	51 81       	ldd	r21, Z+1	; 0x01
   1d02e:	84 0f       	add	r24, r20
   1d030:	95 1f       	adc	r25, r21
   1d032:	c8 17       	cp	r28, r24
   1d034:	d9 07       	cpc	r29, r25
   1d036:	59 f4       	brne	.+22     	; 0x1d04e <free+0x82>
   1d038:	88 81       	ld	r24, Y
   1d03a:	99 81       	ldd	r25, Y+1	; 0x01
   1d03c:	84 0f       	add	r24, r20
   1d03e:	95 1f       	adc	r25, r21
   1d040:	02 96       	adiw	r24, 0x02	; 2
   1d042:	91 83       	std	Z+1, r25	; 0x01
   1d044:	80 83       	st	Z, r24
   1d046:	8a 81       	ldd	r24, Y+2	; 0x02
   1d048:	9b 81       	ldd	r25, Y+3	; 0x03
   1d04a:	93 83       	std	Z+3, r25	; 0x03
   1d04c:	82 83       	std	Z+2, r24	; 0x02
   1d04e:	21 15       	cp	r18, r1
   1d050:	31 05       	cpc	r19, r1
   1d052:	29 f4       	brne	.+10     	; 0x1d05e <free+0x92>
   1d054:	f0 93 47 21 	sts	0x2147, r31	; 0x802147 <__flp+0x1>
   1d058:	e0 93 46 21 	sts	0x2146, r30	; 0x802146 <__flp>
   1d05c:	3d c0       	rjmp	.+122    	; 0x1d0d8 <free+0x10c>
   1d05e:	e9 01       	movw	r28, r18
   1d060:	fb 83       	std	Y+3, r31	; 0x03
   1d062:	ea 83       	std	Y+2, r30	; 0x02
   1d064:	49 91       	ld	r20, Y+
   1d066:	59 91       	ld	r21, Y+
   1d068:	c4 0f       	add	r28, r20
   1d06a:	d5 1f       	adc	r29, r21
   1d06c:	ec 17       	cp	r30, r28
   1d06e:	fd 07       	cpc	r31, r29
   1d070:	61 f4       	brne	.+24     	; 0x1d08a <free+0xbe>
   1d072:	80 81       	ld	r24, Z
   1d074:	91 81       	ldd	r25, Z+1	; 0x01
   1d076:	84 0f       	add	r24, r20
   1d078:	95 1f       	adc	r25, r21
   1d07a:	02 96       	adiw	r24, 0x02	; 2
   1d07c:	e9 01       	movw	r28, r18
   1d07e:	99 83       	std	Y+1, r25	; 0x01
   1d080:	88 83       	st	Y, r24
   1d082:	82 81       	ldd	r24, Z+2	; 0x02
   1d084:	93 81       	ldd	r25, Z+3	; 0x03
   1d086:	9b 83       	std	Y+3, r25	; 0x03
   1d088:	8a 83       	std	Y+2, r24	; 0x02
   1d08a:	e0 e0       	ldi	r30, 0x00	; 0
   1d08c:	f0 e0       	ldi	r31, 0x00	; 0
   1d08e:	12 96       	adiw	r26, 0x02	; 2
   1d090:	8d 91       	ld	r24, X+
   1d092:	9c 91       	ld	r25, X
   1d094:	13 97       	sbiw	r26, 0x03	; 3
   1d096:	00 97       	sbiw	r24, 0x00	; 0
   1d098:	19 f0       	breq	.+6      	; 0x1d0a0 <free+0xd4>
   1d09a:	fd 01       	movw	r30, r26
   1d09c:	dc 01       	movw	r26, r24
   1d09e:	f7 cf       	rjmp	.-18     	; 0x1d08e <free+0xc2>
   1d0a0:	8d 91       	ld	r24, X+
   1d0a2:	9c 91       	ld	r25, X
   1d0a4:	11 97       	sbiw	r26, 0x01	; 1
   1d0a6:	9d 01       	movw	r18, r26
   1d0a8:	2e 5f       	subi	r18, 0xFE	; 254
   1d0aa:	3f 4f       	sbci	r19, 0xFF	; 255
   1d0ac:	82 0f       	add	r24, r18
   1d0ae:	93 1f       	adc	r25, r19
   1d0b0:	20 91 44 21 	lds	r18, 0x2144	; 0x802144 <__brkval>
   1d0b4:	30 91 45 21 	lds	r19, 0x2145	; 0x802145 <__brkval+0x1>
   1d0b8:	28 17       	cp	r18, r24
   1d0ba:	39 07       	cpc	r19, r25
   1d0bc:	69 f4       	brne	.+26     	; 0x1d0d8 <free+0x10c>
   1d0be:	30 97       	sbiw	r30, 0x00	; 0
   1d0c0:	29 f4       	brne	.+10     	; 0x1d0cc <free+0x100>
   1d0c2:	10 92 47 21 	sts	0x2147, r1	; 0x802147 <__flp+0x1>
   1d0c6:	10 92 46 21 	sts	0x2146, r1	; 0x802146 <__flp>
   1d0ca:	02 c0       	rjmp	.+4      	; 0x1d0d0 <free+0x104>
   1d0cc:	13 82       	std	Z+3, r1	; 0x03
   1d0ce:	12 82       	std	Z+2, r1	; 0x02
   1d0d0:	b0 93 45 21 	sts	0x2145, r27	; 0x802145 <__brkval+0x1>
   1d0d4:	a0 93 44 21 	sts	0x2144, r26	; 0x802144 <__brkval>
   1d0d8:	df 91       	pop	r29
   1d0da:	cf 91       	pop	r28
   1d0dc:	08 95       	ret

0001d0de <abort>:
   1d0de:	81 e0       	ldi	r24, 0x01	; 1
   1d0e0:	90 e0       	ldi	r25, 0x00	; 0
   1d0e2:	f8 94       	cli
   1d0e4:	53 c1       	rjmp	.+678    	; 0x1d38c <_exit>

0001d0e6 <__ftoa_engine>:
   1d0e6:	28 30       	cpi	r18, 0x08	; 8
   1d0e8:	08 f0       	brcs	.+2      	; 0x1d0ec <__ftoa_engine+0x6>
   1d0ea:	27 e0       	ldi	r18, 0x07	; 7
   1d0ec:	33 27       	eor	r19, r19
   1d0ee:	da 01       	movw	r26, r20
   1d0f0:	99 0f       	add	r25, r25
   1d0f2:	31 1d       	adc	r19, r1
   1d0f4:	87 fd       	sbrc	r24, 7
   1d0f6:	91 60       	ori	r25, 0x01	; 1
   1d0f8:	00 96       	adiw	r24, 0x00	; 0
   1d0fa:	61 05       	cpc	r22, r1
   1d0fc:	71 05       	cpc	r23, r1
   1d0fe:	39 f4       	brne	.+14     	; 0x1d10e <__ftoa_engine+0x28>
   1d100:	32 60       	ori	r19, 0x02	; 2
   1d102:	2e 5f       	subi	r18, 0xFE	; 254
   1d104:	3d 93       	st	X+, r19
   1d106:	30 e3       	ldi	r19, 0x30	; 48
   1d108:	2a 95       	dec	r18
   1d10a:	e1 f7       	brne	.-8      	; 0x1d104 <__ftoa_engine+0x1e>
   1d10c:	08 95       	ret
   1d10e:	9f 3f       	cpi	r25, 0xFF	; 255
   1d110:	30 f0       	brcs	.+12     	; 0x1d11e <__ftoa_engine+0x38>
   1d112:	80 38       	cpi	r24, 0x80	; 128
   1d114:	71 05       	cpc	r23, r1
   1d116:	61 05       	cpc	r22, r1
   1d118:	09 f0       	breq	.+2      	; 0x1d11c <__ftoa_engine+0x36>
   1d11a:	3c 5f       	subi	r19, 0xFC	; 252
   1d11c:	3c 5f       	subi	r19, 0xFC	; 252
   1d11e:	3d 93       	st	X+, r19
   1d120:	91 30       	cpi	r25, 0x01	; 1
   1d122:	08 f0       	brcs	.+2      	; 0x1d126 <__ftoa_engine+0x40>
   1d124:	80 68       	ori	r24, 0x80	; 128
   1d126:	91 1d       	adc	r25, r1
   1d128:	df 93       	push	r29
   1d12a:	cf 93       	push	r28
   1d12c:	1f 93       	push	r17
   1d12e:	0f 93       	push	r16
   1d130:	ff 92       	push	r15
   1d132:	ef 92       	push	r14
   1d134:	19 2f       	mov	r17, r25
   1d136:	98 7f       	andi	r25, 0xF8	; 248
   1d138:	96 95       	lsr	r25
   1d13a:	e9 2f       	mov	r30, r25
   1d13c:	96 95       	lsr	r25
   1d13e:	96 95       	lsr	r25
   1d140:	e9 0f       	add	r30, r25
   1d142:	ff 27       	eor	r31, r31
   1d144:	e8 5c       	subi	r30, 0xC8	; 200
   1d146:	fd 4f       	sbci	r31, 0xFD	; 253
   1d148:	99 27       	eor	r25, r25
   1d14a:	33 27       	eor	r19, r19
   1d14c:	ee 24       	eor	r14, r14
   1d14e:	ff 24       	eor	r15, r15
   1d150:	a7 01       	movw	r20, r14
   1d152:	e7 01       	movw	r28, r14
   1d154:	05 90       	lpm	r0, Z+
   1d156:	08 94       	sec
   1d158:	07 94       	ror	r0
   1d15a:	28 f4       	brcc	.+10     	; 0x1d166 <__ftoa_engine+0x80>
   1d15c:	36 0f       	add	r19, r22
   1d15e:	e7 1e       	adc	r14, r23
   1d160:	f8 1e       	adc	r15, r24
   1d162:	49 1f       	adc	r20, r25
   1d164:	51 1d       	adc	r21, r1
   1d166:	66 0f       	add	r22, r22
   1d168:	77 1f       	adc	r23, r23
   1d16a:	88 1f       	adc	r24, r24
   1d16c:	99 1f       	adc	r25, r25
   1d16e:	06 94       	lsr	r0
   1d170:	a1 f7       	brne	.-24     	; 0x1d15a <__ftoa_engine+0x74>
   1d172:	05 90       	lpm	r0, Z+
   1d174:	07 94       	ror	r0
   1d176:	28 f4       	brcc	.+10     	; 0x1d182 <__ftoa_engine+0x9c>
   1d178:	e7 0e       	add	r14, r23
   1d17a:	f8 1e       	adc	r15, r24
   1d17c:	49 1f       	adc	r20, r25
   1d17e:	56 1f       	adc	r21, r22
   1d180:	c1 1d       	adc	r28, r1
   1d182:	77 0f       	add	r23, r23
   1d184:	88 1f       	adc	r24, r24
   1d186:	99 1f       	adc	r25, r25
   1d188:	66 1f       	adc	r22, r22
   1d18a:	06 94       	lsr	r0
   1d18c:	a1 f7       	brne	.-24     	; 0x1d176 <__ftoa_engine+0x90>
   1d18e:	05 90       	lpm	r0, Z+
   1d190:	07 94       	ror	r0
   1d192:	28 f4       	brcc	.+10     	; 0x1d19e <__ftoa_engine+0xb8>
   1d194:	f8 0e       	add	r15, r24
   1d196:	49 1f       	adc	r20, r25
   1d198:	56 1f       	adc	r21, r22
   1d19a:	c7 1f       	adc	r28, r23
   1d19c:	d1 1d       	adc	r29, r1
   1d19e:	88 0f       	add	r24, r24
   1d1a0:	99 1f       	adc	r25, r25
   1d1a2:	66 1f       	adc	r22, r22
   1d1a4:	77 1f       	adc	r23, r23
   1d1a6:	06 94       	lsr	r0
   1d1a8:	a1 f7       	brne	.-24     	; 0x1d192 <__ftoa_engine+0xac>
   1d1aa:	05 90       	lpm	r0, Z+
   1d1ac:	07 94       	ror	r0
   1d1ae:	20 f4       	brcc	.+8      	; 0x1d1b8 <__ftoa_engine+0xd2>
   1d1b0:	49 0f       	add	r20, r25
   1d1b2:	56 1f       	adc	r21, r22
   1d1b4:	c7 1f       	adc	r28, r23
   1d1b6:	d8 1f       	adc	r29, r24
   1d1b8:	99 0f       	add	r25, r25
   1d1ba:	66 1f       	adc	r22, r22
   1d1bc:	77 1f       	adc	r23, r23
   1d1be:	88 1f       	adc	r24, r24
   1d1c0:	06 94       	lsr	r0
   1d1c2:	a9 f7       	brne	.-22     	; 0x1d1ae <__ftoa_engine+0xc8>
   1d1c4:	84 91       	lpm	r24, Z
   1d1c6:	10 95       	com	r17
   1d1c8:	17 70       	andi	r17, 0x07	; 7
   1d1ca:	41 f0       	breq	.+16     	; 0x1d1dc <__ftoa_engine+0xf6>
   1d1cc:	d6 95       	lsr	r29
   1d1ce:	c7 95       	ror	r28
   1d1d0:	57 95       	ror	r21
   1d1d2:	47 95       	ror	r20
   1d1d4:	f7 94       	ror	r15
   1d1d6:	e7 94       	ror	r14
   1d1d8:	1a 95       	dec	r17
   1d1da:	c1 f7       	brne	.-16     	; 0x1d1cc <__ftoa_engine+0xe6>
   1d1dc:	ee ed       	ldi	r30, 0xDE	; 222
   1d1de:	f1 e0       	ldi	r31, 0x01	; 1
   1d1e0:	68 94       	set
   1d1e2:	15 90       	lpm	r1, Z+
   1d1e4:	15 91       	lpm	r17, Z+
   1d1e6:	35 91       	lpm	r19, Z+
   1d1e8:	65 91       	lpm	r22, Z+
   1d1ea:	95 91       	lpm	r25, Z+
   1d1ec:	05 90       	lpm	r0, Z+
   1d1ee:	7f e2       	ldi	r23, 0x2F	; 47
   1d1f0:	73 95       	inc	r23
   1d1f2:	e1 18       	sub	r14, r1
   1d1f4:	f1 0a       	sbc	r15, r17
   1d1f6:	43 0b       	sbc	r20, r19
   1d1f8:	56 0b       	sbc	r21, r22
   1d1fa:	c9 0b       	sbc	r28, r25
   1d1fc:	d0 09       	sbc	r29, r0
   1d1fe:	c0 f7       	brcc	.-16     	; 0x1d1f0 <__ftoa_engine+0x10a>
   1d200:	e1 0c       	add	r14, r1
   1d202:	f1 1e       	adc	r15, r17
   1d204:	43 1f       	adc	r20, r19
   1d206:	56 1f       	adc	r21, r22
   1d208:	c9 1f       	adc	r28, r25
   1d20a:	d0 1d       	adc	r29, r0
   1d20c:	7e f4       	brtc	.+30     	; 0x1d22c <__ftoa_engine+0x146>
   1d20e:	70 33       	cpi	r23, 0x30	; 48
   1d210:	11 f4       	brne	.+4      	; 0x1d216 <__ftoa_engine+0x130>
   1d212:	8a 95       	dec	r24
   1d214:	e6 cf       	rjmp	.-52     	; 0x1d1e2 <__ftoa_engine+0xfc>
   1d216:	e8 94       	clt
   1d218:	01 50       	subi	r16, 0x01	; 1
   1d21a:	30 f0       	brcs	.+12     	; 0x1d228 <__ftoa_engine+0x142>
   1d21c:	08 0f       	add	r16, r24
   1d21e:	0a f4       	brpl	.+2      	; 0x1d222 <__ftoa_engine+0x13c>
   1d220:	00 27       	eor	r16, r16
   1d222:	02 17       	cp	r16, r18
   1d224:	08 f4       	brcc	.+2      	; 0x1d228 <__ftoa_engine+0x142>
   1d226:	20 2f       	mov	r18, r16
   1d228:	23 95       	inc	r18
   1d22a:	02 2f       	mov	r16, r18
   1d22c:	7a 33       	cpi	r23, 0x3A	; 58
   1d22e:	28 f0       	brcs	.+10     	; 0x1d23a <__ftoa_engine+0x154>
   1d230:	79 e3       	ldi	r23, 0x39	; 57
   1d232:	7d 93       	st	X+, r23
   1d234:	2a 95       	dec	r18
   1d236:	e9 f7       	brne	.-6      	; 0x1d232 <__ftoa_engine+0x14c>
   1d238:	10 c0       	rjmp	.+32     	; 0x1d25a <__ftoa_engine+0x174>
   1d23a:	7d 93       	st	X+, r23
   1d23c:	2a 95       	dec	r18
   1d23e:	89 f6       	brne	.-94     	; 0x1d1e2 <__ftoa_engine+0xfc>
   1d240:	06 94       	lsr	r0
   1d242:	97 95       	ror	r25
   1d244:	67 95       	ror	r22
   1d246:	37 95       	ror	r19
   1d248:	17 95       	ror	r17
   1d24a:	17 94       	ror	r1
   1d24c:	e1 18       	sub	r14, r1
   1d24e:	f1 0a       	sbc	r15, r17
   1d250:	43 0b       	sbc	r20, r19
   1d252:	56 0b       	sbc	r21, r22
   1d254:	c9 0b       	sbc	r28, r25
   1d256:	d0 09       	sbc	r29, r0
   1d258:	98 f0       	brcs	.+38     	; 0x1d280 <__ftoa_engine+0x19a>
   1d25a:	23 95       	inc	r18
   1d25c:	7e 91       	ld	r23, -X
   1d25e:	73 95       	inc	r23
   1d260:	7a 33       	cpi	r23, 0x3A	; 58
   1d262:	08 f0       	brcs	.+2      	; 0x1d266 <__ftoa_engine+0x180>
   1d264:	70 e3       	ldi	r23, 0x30	; 48
   1d266:	7c 93       	st	X, r23
   1d268:	20 13       	cpse	r18, r16
   1d26a:	b8 f7       	brcc	.-18     	; 0x1d25a <__ftoa_engine+0x174>
   1d26c:	7e 91       	ld	r23, -X
   1d26e:	70 61       	ori	r23, 0x10	; 16
   1d270:	7d 93       	st	X+, r23
   1d272:	30 f0       	brcs	.+12     	; 0x1d280 <__ftoa_engine+0x19a>
   1d274:	83 95       	inc	r24
   1d276:	71 e3       	ldi	r23, 0x31	; 49
   1d278:	7d 93       	st	X+, r23
   1d27a:	70 e3       	ldi	r23, 0x30	; 48
   1d27c:	2a 95       	dec	r18
   1d27e:	e1 f7       	brne	.-8      	; 0x1d278 <__ftoa_engine+0x192>
   1d280:	11 24       	eor	r1, r1
   1d282:	ef 90       	pop	r14
   1d284:	ff 90       	pop	r15
   1d286:	0f 91       	pop	r16
   1d288:	1f 91       	pop	r17
   1d28a:	cf 91       	pop	r28
   1d28c:	df 91       	pop	r29
   1d28e:	99 27       	eor	r25, r25
   1d290:	87 fd       	sbrc	r24, 7
   1d292:	90 95       	com	r25
   1d294:	08 95       	ret

0001d296 <strnlen_P>:
   1d296:	fc 01       	movw	r30, r24
   1d298:	05 90       	lpm	r0, Z+
   1d29a:	61 50       	subi	r22, 0x01	; 1
   1d29c:	70 40       	sbci	r23, 0x00	; 0
   1d29e:	01 10       	cpse	r0, r1
   1d2a0:	d8 f7       	brcc	.-10     	; 0x1d298 <strnlen_P+0x2>
   1d2a2:	80 95       	com	r24
   1d2a4:	90 95       	com	r25
   1d2a6:	8e 0f       	add	r24, r30
   1d2a8:	9f 1f       	adc	r25, r31
   1d2aa:	08 95       	ret

0001d2ac <memset>:
   1d2ac:	dc 01       	movw	r26, r24
   1d2ae:	01 c0       	rjmp	.+2      	; 0x1d2b2 <memset+0x6>
   1d2b0:	6d 93       	st	X+, r22
   1d2b2:	41 50       	subi	r20, 0x01	; 1
   1d2b4:	50 40       	sbci	r21, 0x00	; 0
   1d2b6:	e0 f7       	brcc	.-8      	; 0x1d2b0 <memset+0x4>
   1d2b8:	08 95       	ret

0001d2ba <strnlen>:
   1d2ba:	fc 01       	movw	r30, r24
   1d2bc:	61 50       	subi	r22, 0x01	; 1
   1d2be:	70 40       	sbci	r23, 0x00	; 0
   1d2c0:	01 90       	ld	r0, Z+
   1d2c2:	01 10       	cpse	r0, r1
   1d2c4:	d8 f7       	brcc	.-10     	; 0x1d2bc <strnlen+0x2>
   1d2c6:	80 95       	com	r24
   1d2c8:	90 95       	com	r25
   1d2ca:	8e 0f       	add	r24, r30
   1d2cc:	9f 1f       	adc	r25, r31
   1d2ce:	08 95       	ret

0001d2d0 <__ultoa_invert>:
   1d2d0:	fa 01       	movw	r30, r20
   1d2d2:	aa 27       	eor	r26, r26
   1d2d4:	28 30       	cpi	r18, 0x08	; 8
   1d2d6:	51 f1       	breq	.+84     	; 0x1d32c <__ultoa_invert+0x5c>
   1d2d8:	20 31       	cpi	r18, 0x10	; 16
   1d2da:	81 f1       	breq	.+96     	; 0x1d33c <__ultoa_invert+0x6c>
   1d2dc:	e8 94       	clt
   1d2de:	6f 93       	push	r22
   1d2e0:	6e 7f       	andi	r22, 0xFE	; 254
   1d2e2:	6e 5f       	subi	r22, 0xFE	; 254
   1d2e4:	7f 4f       	sbci	r23, 0xFF	; 255
   1d2e6:	8f 4f       	sbci	r24, 0xFF	; 255
   1d2e8:	9f 4f       	sbci	r25, 0xFF	; 255
   1d2ea:	af 4f       	sbci	r26, 0xFF	; 255
   1d2ec:	b1 e0       	ldi	r27, 0x01	; 1
   1d2ee:	3e d0       	rcall	.+124    	; 0x1d36c <__ultoa_invert+0x9c>
   1d2f0:	b4 e0       	ldi	r27, 0x04	; 4
   1d2f2:	3c d0       	rcall	.+120    	; 0x1d36c <__ultoa_invert+0x9c>
   1d2f4:	67 0f       	add	r22, r23
   1d2f6:	78 1f       	adc	r23, r24
   1d2f8:	89 1f       	adc	r24, r25
   1d2fa:	9a 1f       	adc	r25, r26
   1d2fc:	a1 1d       	adc	r26, r1
   1d2fe:	68 0f       	add	r22, r24
   1d300:	79 1f       	adc	r23, r25
   1d302:	8a 1f       	adc	r24, r26
   1d304:	91 1d       	adc	r25, r1
   1d306:	a1 1d       	adc	r26, r1
   1d308:	6a 0f       	add	r22, r26
   1d30a:	71 1d       	adc	r23, r1
   1d30c:	81 1d       	adc	r24, r1
   1d30e:	91 1d       	adc	r25, r1
   1d310:	a1 1d       	adc	r26, r1
   1d312:	20 d0       	rcall	.+64     	; 0x1d354 <__ultoa_invert+0x84>
   1d314:	09 f4       	brne	.+2      	; 0x1d318 <__ultoa_invert+0x48>
   1d316:	68 94       	set
   1d318:	3f 91       	pop	r19
   1d31a:	2a e0       	ldi	r18, 0x0A	; 10
   1d31c:	26 9f       	mul	r18, r22
   1d31e:	11 24       	eor	r1, r1
   1d320:	30 19       	sub	r19, r0
   1d322:	30 5d       	subi	r19, 0xD0	; 208
   1d324:	31 93       	st	Z+, r19
   1d326:	de f6       	brtc	.-74     	; 0x1d2de <__ultoa_invert+0xe>
   1d328:	cf 01       	movw	r24, r30
   1d32a:	08 95       	ret
   1d32c:	46 2f       	mov	r20, r22
   1d32e:	47 70       	andi	r20, 0x07	; 7
   1d330:	40 5d       	subi	r20, 0xD0	; 208
   1d332:	41 93       	st	Z+, r20
   1d334:	b3 e0       	ldi	r27, 0x03	; 3
   1d336:	0f d0       	rcall	.+30     	; 0x1d356 <__ultoa_invert+0x86>
   1d338:	c9 f7       	brne	.-14     	; 0x1d32c <__ultoa_invert+0x5c>
   1d33a:	f6 cf       	rjmp	.-20     	; 0x1d328 <__ultoa_invert+0x58>
   1d33c:	46 2f       	mov	r20, r22
   1d33e:	4f 70       	andi	r20, 0x0F	; 15
   1d340:	40 5d       	subi	r20, 0xD0	; 208
   1d342:	4a 33       	cpi	r20, 0x3A	; 58
   1d344:	18 f0       	brcs	.+6      	; 0x1d34c <__ultoa_invert+0x7c>
   1d346:	49 5d       	subi	r20, 0xD9	; 217
   1d348:	31 fd       	sbrc	r19, 1
   1d34a:	40 52       	subi	r20, 0x20	; 32
   1d34c:	41 93       	st	Z+, r20
   1d34e:	02 d0       	rcall	.+4      	; 0x1d354 <__ultoa_invert+0x84>
   1d350:	a9 f7       	brne	.-22     	; 0x1d33c <__ultoa_invert+0x6c>
   1d352:	ea cf       	rjmp	.-44     	; 0x1d328 <__ultoa_invert+0x58>
   1d354:	b4 e0       	ldi	r27, 0x04	; 4
   1d356:	a6 95       	lsr	r26
   1d358:	97 95       	ror	r25
   1d35a:	87 95       	ror	r24
   1d35c:	77 95       	ror	r23
   1d35e:	67 95       	ror	r22
   1d360:	ba 95       	dec	r27
   1d362:	c9 f7       	brne	.-14     	; 0x1d356 <__ultoa_invert+0x86>
   1d364:	00 97       	sbiw	r24, 0x00	; 0
   1d366:	61 05       	cpc	r22, r1
   1d368:	71 05       	cpc	r23, r1
   1d36a:	08 95       	ret
   1d36c:	9b 01       	movw	r18, r22
   1d36e:	ac 01       	movw	r20, r24
   1d370:	0a 2e       	mov	r0, r26
   1d372:	06 94       	lsr	r0
   1d374:	57 95       	ror	r21
   1d376:	47 95       	ror	r20
   1d378:	37 95       	ror	r19
   1d37a:	27 95       	ror	r18
   1d37c:	ba 95       	dec	r27
   1d37e:	c9 f7       	brne	.-14     	; 0x1d372 <__ultoa_invert+0xa2>
   1d380:	62 0f       	add	r22, r18
   1d382:	73 1f       	adc	r23, r19
   1d384:	84 1f       	adc	r24, r20
   1d386:	95 1f       	adc	r25, r21
   1d388:	a0 1d       	adc	r26, r0
   1d38a:	08 95       	ret

0001d38c <_exit>:
   1d38c:	f8 94       	cli

0001d38e <__stop_program>:
   1d38e:	ff cf       	rjmp	.-2      	; 0x1d38e <__stop_program>
