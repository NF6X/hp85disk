
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001644  00800100  0001d728  0001d7bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001d728  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000008e2  00801744  00801744  0001ee00  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001ee00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001ee14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001738  00000000  00000000  0001ee54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002944d  00000000  00000000  0002058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000062ae  00000000  00000000  000499d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000125d5  00000000  00000000  0004fc87  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000051ec  00000000  00000000  0006225c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004ae9  00000000  00000000  00067448  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00024aed  00000000  00000000  0006bf31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001780  00000000  00000000  00090a1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d8 25 	jmp	0x4bb0	; 0x4bb0 <__ctors_end>
       4:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
       8:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
       c:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      10:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      14:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      18:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      1c:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      20:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      24:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      28:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      2c:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      30:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      34:	0c 94 08 34 	jmp	0x6810	; 0x6810 <__vector_13>
      38:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      3c:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      40:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      44:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      48:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      4c:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      50:	0c 94 a5 29 	jmp	0x534a	; 0x534a <__vector_20>
      54:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      58:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      5c:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      60:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      64:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      68:	0c 94 df 2d 	jmp	0x5bbe	; 0x5bbe <__vector_26>
      6c:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      70:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      74:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      78:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      7c:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      80:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      84:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      88:	0c 94 f7 25 	jmp	0x4bee	; 0x4bee <__bad_interrupt>
      8c:	38 44       	sbci	r19, 0x48	; 72
      8e:	88 45       	sbci	r24, 0x58	; 88
      90:	70 44       	sbci	r23, 0x40	; 64
      92:	5b 45       	sbci	r21, 0x5B	; 91
      94:	5b 45       	sbci	r21, 0x5B	; 91
      96:	88 45       	sbci	r24, 0x58	; 88
      98:	88 45       	sbci	r24, 0x58	; 88
      9a:	88 45       	sbci	r24, 0x58	; 88
      9c:	88 45       	sbci	r24, 0x58	; 88
      9e:	88 45       	sbci	r24, 0x58	; 88
      a0:	88 45       	sbci	r24, 0x58	; 88
      a2:	88 45       	sbci	r24, 0x58	; 88
      a4:	88 45       	sbci	r24, 0x58	; 88
      a6:	38 44       	sbci	r19, 0x48	; 72
      a8:	35 44       	sbci	r19, 0x45	; 69
      aa:	88 45       	sbci	r24, 0x58	; 88
      ac:	88 45       	sbci	r24, 0x58	; 88
      ae:	7e 45       	sbci	r23, 0x5E	; 94
      b0:	88 45       	sbci	r24, 0x58	; 88
      b2:	6a 44       	sbci	r22, 0x4A	; 74
      b4:	88 45       	sbci	r24, 0x58	; 88
      b6:	88 45       	sbci	r24, 0x58	; 88
      b8:	38 44       	sbci	r19, 0x48	; 72
      ba:	88 45       	sbci	r24, 0x58	; 88
      bc:	88 45       	sbci	r24, 0x58	; 88
      be:	88 45       	sbci	r24, 0x58	; 88
      c0:	88 45       	sbci	r24, 0x58	; 88
      c2:	88 45       	sbci	r24, 0x58	; 88
      c4:	88 45       	sbci	r24, 0x58	; 88
      c6:	88 45       	sbci	r24, 0x58	; 88
      c8:	88 45       	sbci	r24, 0x58	; 88
      ca:	88 45       	sbci	r24, 0x58	; 88
      cc:	38 44       	sbci	r19, 0x48	; 72
      ce:	83 45       	sbci	r24, 0x53	; 83
      d0:	70 44       	sbci	r23, 0x40	; 64
      d2:	5b 45       	sbci	r21, 0x5B	; 91
      d4:	5b 45       	sbci	r21, 0x5B	; 91
      d6:	88 45       	sbci	r24, 0x58	; 88
      d8:	88 45       	sbci	r24, 0x58	; 88
      da:	88 45       	sbci	r24, 0x58	; 88
      dc:	88 45       	sbci	r24, 0x58	; 88
      de:	88 45       	sbci	r24, 0x58	; 88
      e0:	88 45       	sbci	r24, 0x58	; 88
      e2:	88 45       	sbci	r24, 0x58	; 88
      e4:	88 45       	sbci	r24, 0x58	; 88
      e6:	38 44       	sbci	r19, 0x48	; 72
      e8:	35 44       	sbci	r19, 0x45	; 69
      ea:	88 45       	sbci	r24, 0x58	; 88
      ec:	88 45       	sbci	r24, 0x58	; 88
      ee:	79 45       	sbci	r23, 0x59	; 89
      f0:	88 45       	sbci	r24, 0x58	; 88
      f2:	6a 44       	sbci	r22, 0x4A	; 74
      f4:	88 45       	sbci	r24, 0x58	; 88
      f6:	88 45       	sbci	r24, 0x58	; 88
      f8:	38 44       	sbci	r19, 0x48	; 72
      fa:	ad 45       	sbci	r26, 0x5D	; 93
      fc:	ee 46       	sbci	r30, 0x6E	; 110
      fe:	a0 45       	sbci	r26, 0x50	; 80
     100:	08 46       	sbci	r16, 0x68	; 104
     102:	ec 45       	sbci	r30, 0x5C	; 92
     104:	ee 46       	sbci	r30, 0x6E	; 110
     106:	ee 46       	sbci	r30, 0x6E	; 110
     108:	ee 46       	sbci	r30, 0x6E	; 110
     10a:	ee 46       	sbci	r30, 0x6E	; 110
     10c:	ee 46       	sbci	r30, 0x6E	; 110
     10e:	ee 46       	sbci	r30, 0x6E	; 110
     110:	ee 46       	sbci	r30, 0x6E	; 110
     112:	ee 46       	sbci	r30, 0x6E	; 110
     114:	ba 45       	sbci	r27, 0x5A	; 90
     116:	ce 45       	sbci	r28, 0x5E	; 94
     118:	ee 46       	sbci	r30, 0x6E	; 110
     11a:	ee 46       	sbci	r30, 0x6E	; 110
     11c:	94 46       	sbci	r25, 0x64	; 100
     11e:	ee 46       	sbci	r30, 0x6E	; 110
     120:	9c 45       	sbci	r25, 0x5C	; 92
     122:	ee 46       	sbci	r30, 0x6E	; 110
     124:	ee 46       	sbci	r30, 0x6E	; 110
     126:	ce 45       	sbci	r28, 0x5E	; 94
     128:	ee 46       	sbci	r30, 0x6E	; 110
     12a:	ee 46       	sbci	r30, 0x6E	; 110
     12c:	ee 46       	sbci	r30, 0x6E	; 110
     12e:	ee 46       	sbci	r30, 0x6E	; 110
     130:	ee 46       	sbci	r30, 0x6E	; 110
     132:	ee 46       	sbci	r30, 0x6E	; 110
     134:	ee 46       	sbci	r30, 0x6E	; 110
     136:	ee 46       	sbci	r30, 0x6E	; 110
     138:	ee 46       	sbci	r30, 0x6E	; 110
     13a:	ad 45       	sbci	r26, 0x5D	; 93
     13c:	3c 46       	sbci	r19, 0x6C	; 108
     13e:	a0 45       	sbci	r26, 0x50	; 80
     140:	08 46       	sbci	r16, 0x68	; 104
     142:	ec 45       	sbci	r30, 0x5C	; 92
     144:	ee 46       	sbci	r30, 0x6E	; 110
     146:	ee 46       	sbci	r30, 0x6E	; 110
     148:	ee 46       	sbci	r30, 0x6E	; 110
     14a:	ee 46       	sbci	r30, 0x6E	; 110
     14c:	ee 46       	sbci	r30, 0x6E	; 110
     14e:	ee 46       	sbci	r30, 0x6E	; 110
     150:	ee 46       	sbci	r30, 0x6E	; 110
     152:	ee 46       	sbci	r30, 0x6E	; 110
     154:	ba 45       	sbci	r27, 0x5A	; 90
     156:	ce 45       	sbci	r28, 0x5E	; 94
     158:	ee 46       	sbci	r30, 0x6E	; 110
     15a:	ee 46       	sbci	r30, 0x6E	; 110
     15c:	3c 46       	sbci	r19, 0x6C	; 108
     15e:	ee 46       	sbci	r30, 0x6E	; 110
     160:	9c 45       	sbci	r25, 0x5C	; 92
     162:	ee 46       	sbci	r30, 0x6E	; 110
     164:	ee 46       	sbci	r30, 0x6E	; 110
     166:	ce 45       	sbci	r28, 0x5E	; 94
     168:	cd 69       	ori	r28, 0x9D	; 157
     16a:	d7 69       	ori	r29, 0x97	; 151
     16c:	df 69       	ori	r29, 0x9F	; 159
     16e:	e2 69       	ori	r30, 0x92	; 146
     170:	e5 69       	ori	r30, 0x95	; 149
     172:	e8 69       	ori	r30, 0x98	; 152
     174:	eb 69       	ori	r30, 0x9B	; 155
     176:	ee 69       	ori	r30, 0x9E	; 158
     178:	f1 69       	ori	r31, 0x91	; 145
     17a:	e3 87       	std	Z+11, r30	; 0x0b
     17c:	eb 87       	std	Y+11, r30	; 0x0b
     17e:	1c 88       	ldd	r1, Y+20	; 0x14
     180:	35 88       	ldd	r3, Z+21	; 0x15
     182:	51 88       	ldd	r5, Z+17	; 0x11
     184:	5e 88       	ldd	r5, Y+22	; 0x16
     186:	7a 88       	ldd	r7, Y+18	; 0x12
     188:	a4 88       	ldd	r10, Z+20	; 0x14
     18a:	87 88       	ldd	r8, Z+23	; 0x17
     18c:	40 9f       	mul	r20, r16
     18e:	10 a0       	ldd	r1, Z+32	; 0x20
     190:	4c a0       	ldd	r4, Y+36	; 0x24
     192:	7f a0       	ldd	r7, Y+39	; 0x27
     194:	8f a0       	ldd	r8, Y+39	; 0x27
     196:	ac a0       	ldd	r10, Y+36	; 0x24
     198:	0c a1       	ldd	r16, Y+36	; 0x24
     19a:	f7 a1       	ldd	r31, Z+39	; 0x27
     19c:	f7 a1       	ldd	r31, Z+39	; 0x27
     19e:	f7 a1       	ldd	r31, Z+39	; 0x27
     1a0:	40 a1       	ldd	r20, Z+32	; 0x20
     1a2:	6c a1       	ldd	r22, Y+36	; 0x24
     1a4:	af a1       	ldd	r26, Y+39	; 0x27
     1a6:	c6 a1       	ldd	r28, Z+38	; 0x26
     1a8:	d9 9f       	mul	r29, r25
     1aa:	ec 9f       	mul	r30, r28
     1ac:	fe bd       	out	0x2e, r31	; 46
     1ae:	bd bd       	out	0x2d, r27	; 45
     1b0:	bd bd       	out	0x2d, r27	; 45
     1b2:	bd bd       	out	0x2d, r27	; 45
     1b4:	bd bd       	out	0x2d, r27	; 45
     1b6:	81 bd       	out	0x21, r24	; 33
     1b8:	88 bd       	out	0x28, r24	; 40
     1ba:	8f bd       	out	0x2f, r24	; 47
     1bc:	9f bd       	out	0x2f, r25	; 47
     1be:	ad bd       	out	0x2d, r26	; 45
     1c0:	a6 bd       	out	0x26, r26	; 38

000001c2 <__trampolines_end>:
     1c2:	63 73       	andi	r22, 0x33	; 51
     1c4:	5f 64       	ori	r21, 0x4F	; 79
     1c6:	69 73       	andi	r22, 0x39	; 57
     1c8:	61 62       	ori	r22, 0x21	; 33
     1ca:	6c 65       	ori	r22, 0x5C	; 92
     1cc:	20 77       	andi	r18, 0x70	; 112
     1ce:	61 73       	andi	r22, 0x31	; 49
     1d0:	3a 20       	and	r3, r10
     1d2:	25 64       	ori	r18, 0x45	; 69
     1d4:	2c 20       	and	r2, r12
     1d6:	77 61       	ori	r23, 0x17	; 23
     1d8:	6e 74       	andi	r22, 0x4E	; 78
     1da:	3a 20       	and	r3, r10
     1dc:	25 64       	ori	r18, 0x45	; 69
     1de:	0a 00       	.word	0x000a	; ????

000001e0 <__c.3621>:
     1e0:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     1f0:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

000001fd <__c.3628>:
     1fd:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     20d:	52 52 4f 52 20 73 74 61 72 74 28 25 6c 75 29 2c     RROR start(%lu),
     21d:	20 65 6e 64 28 25 6c 75 29 0a 00                     end(%lu)..

00000228 <__c.3622>:
     228:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     238:	61 69 6c 65 64 21 0a 00                             ailed!..

00000240 <__c.3616>:
     240:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     250:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

0000025b <__c.3609>:
     25b:	20 20 44 61 74 61 20 20 53 74 61 72 74 3a 20 20       Data  Start:  
     26b:	20 25 35 75 2c 20 45 6e 64 3a 20 25 35 75 0a 00      %5u, End: %5u..

0000027b <__c.3607>:
     27b:	20 20 42 53 53 20 20 20 53 74 61 72 74 3a 20 20       BSS   Start:  
     28b:	20 25 35 75 2c 20 45 6e 64 3a 20 25 35 75 0a 00      %5u, End: %5u..

0000029b <__c.3605>:
     29b:	20 20 48 65 61 70 20 20 53 74 61 72 74 3a 20 20       Heap  Start:  
     2ab:	20 25 35 75 2c 20 45 6e 64 3a 20 25 35 75 0a 00      %5u, End: %5u..

000002bb <__c.3603>:
     2bb:	20 20 53 74 61 63 6b 20 55 73 65 64 3a 20 20 20       Stack Used:   
     2cb:	20 25 35 75 0a 00                                    %5u..

000002d1 <__c.3601>:
     2d1:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 20       Stack Top:    
     2e1:	20 25 35 75 2c 20 45 6e 64 3a 20 25 35 75 0a 00      %5u, End: %5u..

000002f1 <__c.3599>:
     2f1:	46 72 65 65 20 52 61 6d 3a 20 20 20 20 20 20 20     Free Ram:       
     301:	20 25 35 75 0a 00                                    %5u..

00000307 <__c.3608>:
     307:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     317:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000324 <__c.3593>:
     324:	73 70 69 20 72 61 74 65 3a 20 25 6c 64 0a 00        spi rate: %ld..

00000333 <__c.3725>:
     333:	0a 00                                               ..

00000335 <__c.3723>:
     335:	74 61 73 6b 3a 20 25 64 0a 00                       task: %d..

0000033f <__c.3721>:
     33f:	69 32 63 5f 74 61 73 6b 2e 65 72 72 6f 72 3a 20     i2c_task.error: 
     34f:	25 64 0a 00                                         %d..

00000353 <__c.3719>:
     353:	69 32 63 5f 74 61 73 6b 2e 64 6f 6e 65 3a 20 25     i2c_task.done: %
     363:	64 0a 00                                            d..

00000366 <__c.3714>:
     366:	0a 00                                               ..

00000368 <__c.3712>:
     368:	20 20 54 57 5f 4d 54 5f 44 41 54 41 5f 4e 41 43       TW_MT_DATA_NAC
     378:	4b 0a 00                                            K..

0000037b <__c.3710>:
     37b:	20 20 54 57 5f 4d 54 5f 53 4c 41 5f 4e 41 43 4b       TW_MT_SLA_NACK
     38b:	0a 00                                               ..

0000038d <__c.3708>:
     38d:	20 20 54 57 5f 4d 52 5f 53 4c 41 5f 4e 41 43 4b       TW_MR_SLA_NACK
     39d:	0a 00                                               ..

0000039f <__c.3706>:
     39f:	20 20 4f 50 5f 45 52 52 4f 52 0a 00                   OP_ERROR..

000003ab <__c.3704>:
     3ab:	20 20 4f 50 5f 4c 45 4e 0a 00                         OP_LEN..

000003b5 <__c.3702>:
     3b5:	20 20 4f 50 5f 54 49 4d 45 4f 55 54 0a 00             OP_TIMEOUT..

000003c3 <__c.3700>:
     3c3:	20 20 25 73 0a 00                                     %s..

000003c9 <__c.3650>:
     3c9:	69 32 63 5f 74 69 6d 65 72 20 69 6e 69 74 20 66     i2c_timer init f
     3d9:	61 69 6c 65 64 0a 00                                ailed..

000003e0 <__c.3644>:
     3e0:	69 32 63 5f 69 6e 69 74 20 70 72 65 73 63 61 6c     i2c_init prescal
     3f0:	65 20 6f 76 65 72 66 6c 6f 77 0a 00                 e overflow..

000003fc <__c.3601>:
     3fc:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 6c 65 6e 20     I2C op[%d]->len 
     40c:	3d 3d 20 30 0a 00                                   == 0..

00000412 <__c.3599>:
     412:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 62 75 66 20     I2C op[%d]->buf 
     422:	3d 3d 20 4e 55 4c 4c 0a 00                          == NULL..

0000042b <__c.3597>:
     42b:	49 32 43 20 6f 70 5b 49 4e 44 45 58 20 25 64 20     I2C op[INDEX %d 
     43b:	3e 3d 20 25 64 5d 0a 00                             >= %d]..

00000443 <__c.3657>:
     443:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     453:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

00000461 <__c.3647>:
     461:	72 74 63 5f 72 75 6e 20 77 72 69 74 65 20 65 72     rtc_run write er
     471:	72 6f 72 0a 00                                      ror..

00000476 <__c.3645>:
     476:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     486:	6f 72 0a 00                                         or..

0000048a <__c.3639>:
     48a:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

0000049a <__c.3633>:
     49a:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

000004ab <__c.3625>:
     4ab:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 64 61 74     i2c_rtc_read dat
     4bb:	61 20 65 72 72 6f 72 0a 00                          a error..

000004c4 <__c.3621>:
     4c4:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 61 64 64     i2c_rtc_read add
     4d4:	72 65 73 73 20 65 72 72 6f 72 0a 00                 ress error..

000004e0 <__c.3608>:
     4e0:	69 32 63 5f 72 74 63 5f 77 72 69 74 65 20 64 61     i2c_rtc_write da
     4f0:	74 61 20 65 72 72 6f 72 0a 00                       ta error..

000004fa <__c.3633>:
     4fa:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     50a:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     51a:	74 20 25 64 0a 00                                   t %d..

00000520 <__c.3590>:
     520:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     530:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000540 <__c.3669>:
     540:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

00000550 <__c.3667>:
     550:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

00000561 <__c.3665>:
     561:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     571:	66 61 69 6c 65 64 0a 00                             failed..

00000579 <__c.3663>:
     579:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000585 <__c.3661>:
     585:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     595:	64 0a 00                                            d..

00000598 <__c.3659>:
     598:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     5a8:	65 64 0a 00                                         ed..

000005ac <__c.3639>:
     5ac:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

000005b7 <__c.3637>:
     5b7:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005c5 <__c.3623>:
     5c5:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005cf <__c.3603>:
     5cf:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5df:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005ec <__c.3878>:
     5ec:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005fd <__c.3876>:
     5fd:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     60d:	0a 00                                               ..

0000060f <__c.3874>:
     60f:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

00000620 <__c.3872>:
     620:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

00000631 <__c.3870>:
     631:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     641:	0a 00                                               ..

00000643 <__c.3863>:
     643:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     653:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     663:	6d 65 0a 00                                         me..

00000667 <__c.3861>:
     667:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     677:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

00000681 <__c.3859>:
     681:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     691:	61 69 6c 65 64 0a 00                                ailed..

00000698 <__c.3857>:
     698:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     6a8:	6e 69 74 0a 00                                      nit..

000006ad <__c.3855>:
     6ad:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6bd:	0a 00                                               ..

000006bf <__c.3809>:
     6bf:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     6cf:	61 69 6c 65 64 0a 00                                ailed..

000006d6 <__c.3807>:
     6d6:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

000006e7 <__c.3805>:
     6e7:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     6f7:	0a 00                                               ..

000006f9 <__c.3803>:
     6f9:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

0000070a <__c.3801>:
     70a:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

0000071b <__c.3799>:
     71b:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     72b:	0a 00                                               ..

0000072d <__c.3778>:
     72d:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     73d:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000074e <__c.3653>:
     74e:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     75e:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

0000076b <__c.3621>:
     76b:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

0000077b <__c.3655>:
     77b:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

00000789 <__c.3653>:
     789:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     799:	25 6c 64 0a 00                                      %ld..

0000079e <__c.3651>:
     79e:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ae:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

000007bc <__c.3648>:
     7bc:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

000007cd <__c.3646>:
     7cd:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

000007d9 <__c.3644>:
     7d9:	4d 4d 43 20 43 61 72 64 20 49 6e 73 65 72 74 65     MMC Card Inserte
     7e9:	64 0a 00                                            d..

000007ec <__c.3642>:
     7ec:	2a 2a 2a 20 4d 4d 43 20 43 61 72 64 20 4e 4f 54     *** MMC Card NOT
     7fc:	20 49 6e 73 65 72 74 65 64 21 20 2a 2a 2a 0a 00      Inserted! ***..

0000080c <__c.3640>:
     80c:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000081c <__c.3626>:
     81c:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000829 <__c.3598>:
     829:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     839:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000845 <__c.3681>:
     845:	0a 00                                               ..

00000847 <__c.3679>:
     847:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     857:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     867:	73 00                                               s.

00000869 <__c.3677>:
     869:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     879:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

00000884 <__c.3671>:
     884:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     894:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8a4:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8b4:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8c4:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008d1 <__c.3669>:
     8d1:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 61 74     fatfs_status fat
     8e1:	66 73 5f 73 63 61 6e 5f 66 69 6c 65 73 20 66 61     fs_scan_files fa
     8f1:	69 6c 65 64 0a 00                                   iled..

000008f7 <__c.3667>:
     8f7:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     907:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     917:	30 34 58 0a 00                                      04X..

0000091c <__c.3665>:
     91c:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     92c:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

0000093a <__c.3663>:
     93a:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 5f 67     fatfs_status f_g
     94a:	65 74 6c 61 62 65 6c 20 66 61 69 6c 65 64 0a 00     etlabel failed..

0000095a <__c.3661>:
     95a:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     96a:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000979 <__c.3659>:
     979:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     989:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000998 <__c.3657>:
     998:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     9a8:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009b7 <__c.3655>:
     9b7:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     9c7:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009d6 <__c.3653>:
     9d6:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9e6:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009f5 <__c.3651>:
     9f5:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     a05:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a13 <__c.3649>:
     a13:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     a23:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a31 <__c.3647>:
     a31:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a41:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a50 <__c.3645>:
     a50:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a60:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a6e <__c.3643>:
     a6e:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 5f 67     fatfs_status f_g
     a7e:	65 74 66 72 65 65 20 66 61 69 6c 65 64 0a 00        etfree failed..

00000a8d <__c.3641>:
     a8d:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a9e <__c.3639>:
     a9e:	4d 4d 43 20 46 41 53 54 20 63 6c 6f 63 6b 3d 25     MMC FAST clock=%
     aae:	38 6c 64 0a 00                                      8ld..

00000ab3 <__c.3637>:
     ab3:	4d 4d 43 20 53 4c 4f 57 20 63 6c 6f 63 6b 3d 25     MMC SLOW clock=%
     ac3:	38 6c 64 0a 00                                      8ld..

00000ac8 <__c.3600>:
     ac8:	72 63 3d 25 75 0a 00                                rc=%u..

00000acf <__c.3623>:
     acf:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     adf:	72 65 65 0a 00                                      ree..

00000ae4 <__c.3621>:
     ae4:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     af4:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     b04:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000b0d <__c.3617>:
     b0d:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000b1b <__c.3593>:
     b1b:	66 61 74 66 73 20 20 20 20 20 68 65 6c 70 0a 00     fatfs     help..

00000b2b <__c.3591>:
     b2b:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b3b:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b4b:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b5b:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b6b:	66 73 20 6c 73 20 64 69 72 65 63 74 6f 72 79 0a     fs ls directory.
     b7b:	66 61 74 66 73 20 73 74 61 74 75 73 0a 0a 00        fatfs status...

00000b8a <__c.3923>:
     b8a:	25 73 0a 00                                         %s..

00000b8e <__c.3921>:
     b8e:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000b96 <__c.3676>:
     b96:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000ba2 <__c.3605>:
     ba2:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     bb2:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000bba <__c.3598>:
     bba:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     bca:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000bd2 <__c.3768>:
     bd2:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000bdd <__c.3764>:
     bdd:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     bed:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     bfd:	68 0a 00                                            h..

00000c00 <__c.3761>:
     c00:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000c10 <__c.3756>:
     c10:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000c1e <__c.3754>:
     c1e:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     c2e:	5b 25 73 5d 0a 00                                   [%s]..

00000c34 <__c.3752>:
     c34:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     c44:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000c55 <__c.3739>:
     c55:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     c65:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000c6f <__c.3734>:
     c6f:	25 73 0a 00                                         %s..

00000c73 <__c.3732>:
     c73:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     c83:	0a 00                                               ..

00000c85 <__c.3720>:
     c85:	0d 00                                               ..

00000c87 <__c.3718>:
     c87:	4d 6f 72 65 2e 2e 00                                More...

00000c8e <__c.3708>:
     c8e:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     c9e:	2e 0a 00                                            ...

00000ca1 <__c.3704>:
     ca1:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000cb0 <__c.3701>:
     cb0:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000cbd <__c.3699>:
     cbd:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000cca <__c.3697>:
     cca:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cda <__c.3695>:
     cda:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000ce7 <__c.3693>:
     ce7:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cf7 <__c.3691>:
     cf7:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000d03 <__c.3680>:
     d03:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000d0e <__c.3678>:
     d0e:	0a 00                                               ..

00000d10 <__c.3673>:
     d10:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d20 <__c.3663>:
     d20:	72 6d 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     rmdir %s failed.
	...

00000d31 <__c.3661>:
     d31:	72 6d 20 25 73 20 66 61 69 6c 65 64 0a 00           rm %s failed..

00000d3f <__c.3659>:
     d3f:	72 65 6e 61 6d 65 20 25 73 20 74 6f 20 25 73 0a     rename %s to %s.
	...

00000d50 <__c.3657>:
     d50:	25 73 0a 00                                         %s..

00000d54 <__c.3655>:
     d54:	70 77 64 20 46 41 49 4c 45 44 0a 00                 pwd FAILED..

00000d60 <__c.3651>:
     d60:	6d 6b 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     mkdir %s failed.
	...

00000d71 <__c.3644>:
     d71:	6c 73 3a 20 6e 75 6c 6c 20 61 72 67 75 6d 65 6e     ls: null argumen
     d81:	74 20 23 20 25 64 0a 00                             t # %d..

00000d89 <__c.3640>:
     d89:	63 68 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     chdir %s failed.
	...

00000d9a <__c.3624>:
     d9a:	4e 6f 74 65 3a 20 70 6f 73 69 78 20 70 72 65 66     Note: posix pref
     daa:	69 78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 70     ix is optional.p
     dba:	6f 73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d     osix cat file [-
     dca:	70 5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a     p].posix cd dir.
     dda:	70 6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31     posix copy file1
     dea:	20 66 69 6c 65 32 0a 70 6f 73 69 78 20 6c 73 20      file2.posix ls 
     dfa:	64 69 72 20 5b 2d 6c 5d 0a 70 6f 73 69 78 20 6d     dir [-l].posix m
     e0a:	6b 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 70     kdir dir.posix p
     e1a:	61 67 65 20 4e 4e 20 2d 20 75 73 65 64 20 66 6f     age NN - used fo
     e2a:	72 20 63 61 74 20 2d 70 0a 70 6f 73 69 78 20 70     r cat -p.posix p
     e3a:	77 64 0a 70 6f 73 69 78 20 72 6d 20 66 69 6c 65     wd.posix rm file
     e4a:	0a 70 6f 73 69 78 20 72 6d 64 69 72 20 64 69 72     .posix rmdir dir
     e5a:	0a 70 6f 73 69 78 20 72 65 6e 61 6d 65 20 6f 6c     .posix rename ol
     e6a:	64 20 6e 65 77 0a 0a 00                             d new...

00000e72 <__c.3622>:
     e72:	70 6f 73 69 78 20 20 20 20 20 68 65 6c 70 0a 00     posix     help..

00000e82 <__c.3811>:
     e82:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000e90 <__c.3805>:
     e90:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000e9d <__c.3798>:
     e9d:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000eab <__c.3789>:
     eab:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000eb8 <__c.3780>:
     eb8:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000ec9 <__c.3766>:
     ec9:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     ed9:	5d 0a 00                                            ]..

00000edc <__c.3748>:
     edc:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     eec:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000ef9 <__c.4427>:
     ef9:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     f09:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     f19:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000f21 <__c.4419>:
     f21:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     f31:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000f3b <__c.4414>:
     f3b:	3c 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     <gpib_write_str 
     f4b:	74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67 20     timeout waiting 
     f5b:	66 6f 72 20 41 54 4e 20 3d 20 31 3e 0a 00           for ATN = 1>..

00000f69 <__c.4412>:
     f69:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     f79:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000f83 <__c.4402>:
     f83:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     f93:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     fa3:	28 25 64 29 5d 0a 00                                (%d)]..

00000faa <__c.4398>:
     faa:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     fba:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     fca:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000fd7 <__c.4395>:
     fd7:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     fe7:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000ff0 <__c.4379>:
     ff0:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000ffb <__c.4377>:
     ffb:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00001006 <__c.4375>:
    1006:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

00001011 <__c.4371>:
    1011:	20 20 20 20 20 00                                        .

00001017 <__c.4369>:
    1017:	25 30 32 58 20 25 63 20 00                          %02X %c .

00001020 <__c.4343>:
    1020:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
    1030:	49 46 43 20 73 74 61 74 65 3d 25 64 0a 00           IFC state=%d..

0000103e <__c.4327>:
    103e:	3c 47 50 49 42 20 54 58 20 54 49 4d 45 4f 55 54     <GPIB TX TIMEOUT
    104e:	3e 0a 00                                            >..

00001051 <__c.4322>:
    1051:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    1061:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    1071:	20 66 6f 72 20 4e 44 41 43 3d 3d 31 3e 0a 00         for NDAC==1>..

00001080 <__c.4318>:
    1080:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    1090:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    10a0:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10b0:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010bc <__c.4314>:
    10bc:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    10cc:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    10dc:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10ec:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010f8 <__c.4312>:
    10f8:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1108:	20 41 54 4e 20 3d 20 30 20 77 68 69 6c 65 20 77      ATN = 0 while w
    1118:	61 69 74 69 6e 67 20 66 6f 72 20 4e 52 46 44 20     aiting for NRFD 
    1128:	4c 4f 57 20 73 74 61 74 65 20 3d 25 64 0a 00        LOW state =%d..

00001137 <__c.4307>:
    1137:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1147:	20 49 46 43 20 73 74 61 74 65 3d 25 64 0a 00         IFC state=%d..

00001156 <__c.4291>:
    1156:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    1166:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    1176:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

00001184 <__c.4275>:
    1184:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    1194:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

0000119f <__c.4273>:
    119f:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    11af:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    11bf:	72 61 6e 67 65 0a 00                                range..

000011c6 <__c.4268>:
    11c6:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    11d6:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000011e1 <__c.4266>:
    11e1:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    11f1:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    1201:	61 6e 67 65 0a 00                                   ange..

00001207 <__c.4261>:
    1207:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    1217:	5d 0a 00                                            ]..

0000121a <__c.4249>:
    121a:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

0000122b <__c.4426>:
    122b:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

0000123c <__c.4421>:
    123c:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    124c:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    125c:	32 58 48 5d 0a 00                                   2XH]..

00001262 <__c.4419>:
    1262:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    1272:	0a 00                                               ..

00001274 <__c.4417>:
    1274:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

00001285 <__c.4412>:
    1285:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

00001291 <__c.4410>:
    1291:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

000012a1 <__c.4408>:
    12a1:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    12b1:	52 5d 0a 00                                         R]..

000012b5 <__c.4406>:
    12b5:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    12c5:	0a 00                                               ..

000012c7 <__c.4404>:
    12c7:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

000012d8 <__c.4402>:
    12d8:	5b 55 4e 54 5d 0a 00                                [UNT]..

000012df <__c.4397>:
    12df:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

000012eb <__c.4395>:
    12eb:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    12fb:	52 5d 0a 00                                         R]..

000012ff <__c.4393>:
    12ff:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

00001310 <__c.4391>:
    1310:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    1320:	0a 00                                               ..

00001322 <__c.4389>:
    1322:	0a 00                                               ..

00001324 <__c.4387>:
    1324:	5b 55 4e 4c 5d 0a 00                                [UNL]..

0000132b <__c.4382>:
    132b:	5b 47 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [GPIB (%02XH) no
    133b:	74 20 64 65 66 69 6e 65 64 20 54 4f 44 4f 5d 0a     t defined TODO].
	...

0000134c <__c.4380>:
    134c:	5b 44 43 4c 5d 0a 00                                [DCL]..

00001353 <__c.4378>:
    1353:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

00001360 <__c.4376>:
    1360:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

0000136c <__c.4374>:
    136c:	5b 53 44 43 5d 0a 00                                [SDC]..

00001373 <__c.4372>:
    1373:	5b 53 50 44 5d 0a 00                                [SPD]..

0000137a <__c.4370>:
    137a:	5b 53 50 45 5d 0a 00                                [SPE]..

00001381 <__c.4368>:
    1381:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    1391:	20 54 4f 44 4f 5d 0a 00                              TODO]..

00001399 <__c.4366>:
    1399:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    13a9:	20 54 4f 44 4f 5d 0a 00                              TODO]..

000013b1 <__c.4361>:
    13b1:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13c1:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

000013cb <__c.4359>:
    13cb:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    13db:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

000013ec <__c.4332>:
    13ec:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

000013fd <__c.4330>:
    13fd:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

0000140a <__c.4328>:
    140a:	3c 42 55 53 3e 0a 00                                <BUS>..

00001411 <__c.4326>:
    1411:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

0000141c <__c.4324>:
    141c:	3c 49 46 43 3e 0a 00                                <IFC>..

00001423 <__c.4319>:
    1423:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    1433:	0a 00                                               ..

00001435 <__c.4317>:
    1435:	44 6f 6e 65 0a 00                                   Done..

0000143b <__c.4313>:
    143b:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00001447 <__c.4311>:
    1447:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    1457:	20 65 78 69 74 0a 00                                 exit..

0000145e <__c.4309>:
    145e:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    146e:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    147e:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

00001489 <__c.4307>:
    1489:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    1499:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

000014a3 <__c.4261>:
    14a3:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    14b3:	6f 74 65 63 74 65 64 0a 00                          otected..

000014bc <__c.4259>:
    14bc:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

000014cd <__c.4257>:
    14cd:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    14dd:	0a 00                                               ..

000014df <__c.4452>:
    14df:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

000014ec <__c.4444>:
    14ec:	4e 6f 74 65 3a 20 67 70 69 62 20 70 72 65 66 69     Note: gpib prefi
    14fc:	78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 67 70     x is optional.gp
    150c:	69 62 20 64 65 62 75 67 20 4e 0a 20 20 20 64 65     ib debug N.   de
    151c:	62 75 67 20 6d 65 73 73 61 67 65 20 72 65 70 6f     bug message repo
    152c:	72 74 69 6e 67 20 73 65 65 20 68 70 64 69 73 6b     rting see hpdisk
    153c:	2e 63 66 67 20 66 6f 72 20 64 65 74 61 69 6c 73     .cfg for details
    154c:	0a 67 70 69 62 20 65 6c 61 70 73 65 64 0a 67 70     .gpib elapsed.gp
    155c:	69 62 20 65 6c 61 70 73 65 64 5f 72 65 73 65 74     ib elapsed_reset
    156c:	0a 67 70 69 62 20 69 66 63 0a 67 70 69 62 20 74     .gpib ifc.gpib t
    157c:	61 73 6b 0a 67 70 69 62 20 74 72 61 63 65 20 66     ask.gpib trace f
    158c:	69 6c 65 6e 61 6d 65 2e 74 78 74 20 5b 42 55 53     ilename.txt [BUS
    159c:	5d 0a 20 20 20 44 69 73 70 6c 61 79 20 61 63 74     ].   Display act
    15ac:	69 76 69 74 79 20 6f 66 20 47 50 49 42 20 62 75     ivity of GPIB bu
    15bc:	73 20 61 6e 64 20 6c 6f 67 20 69 74 0a 20 20 20     s and log it.   
    15cc:	42 55 53 20 2d 20 69 6e 63 6c 75 64 65 20 68 61     BUS - include ha
    15dc:	6e 64 73 68 61 6b 65 20 73 74 61 74 65 73 0a 0a     ndshake states..
	...

000015ed <__c.4442>:
    15ed:	67 70 69 62 20 20 20 20 20 20 68 65 6c 70 0a 00     gpib      help..

000015fd <__c.4973>:
    15fd:	0a 00                                               ..

000015ff <__c.4968>:
    15ff:	4d 6f 75 6e 74 65 64 20 64 72 69 76 65 73 0a 00     Mounted drives..

0000160f <__c.4963>:
    160f:	50 52 49 4e 54 45 52 20 25 2d 38 73 20 25 32 64     PRINTER %-8s %2d
    161f:	0a 00                                               ..

00001621 <__c.4961>:
    1621:	41 4d 49 47 4f 20 20 20 25 2d 38 73 20 25 32 64     AMIGO   %-8s %2d
    1631:	20 25 73 0a 00                                       %s..

00001636 <__c.4959>:
    1636:	53 53 38 30 20 20 20 20 25 2d 38 73 20 25 32 64     SS80    %-8s %2d
    1646:	20 25 73 0a 00                                       %s..

0000164b <__c.4951>:
    164b:	45 78 70 65 63 74 65 64 20 41 4d 49 47 4f 20 6f     Expected AMIGO o
    165b:	72 20 53 53 38 30 20 6f 72 20 43 53 38 30 20 66     r SS80 or CS80 f
    166b:	6f 72 20 5b 25 73 5d 0a 00                          or [%s]..

00001674 <__c.4949>:
    1674:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    1684:	74 65 20 41 4d 49 47 4f 20 73 74 72 75 63 74 75     te AMIGO structu
    1694:	72 65 20 66 6f 72 20 25 73 0a 00                    re for %s..

0000169f <__c.4945>:
    169f:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    16af:	74 65 20 53 53 38 30 20 73 74 72 75 63 74 75 72     te SS80 structur
    16bf:	65 20 66 6f 72 20 25 73 0a 00                       e for %s..

000016c9 <__c.4941>:
    16c9:	57 41 52 4e 49 4e 47 3a 20 6d 6f 64 65 6c 20 4e     WARNING: model N
    16d9:	4f 54 20 66 6f 75 6e 64 20 69 6e 20 68 70 64 69     OT found in hpdi
    16e9:	72 2e 69 6e 69 21 0a 00                             r.ini!..

000016f1 <__c.4939>:
    16f1:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    1701:	74 65 20 50 52 49 4e 54 45 52 20 73 74 72 75 63     te PRINTER struc
    1711:	74 75 72 65 0a 00                                   ture..

00001717 <__c.4928>:
    1717:	75 6d 6f 75 6e 74 20 61 64 64 72 65 73 73 3a 5b     umount address:[
    1727:	25 64 5d 20 4e 4f 54 20 66 6f 75 6e 64 0a 00        %d] NOT found..

00001736 <__c.4926>:
    1736:	20 20 2d 20 61 64 64 72 65 73 73 20 69 73 20 74       - address is t
    1746:	68 65 20 64 65 76 69 63 65 20 61 64 64 72 65 73     he device addres
    1756:	73 0a 00                                            s..

00001759 <__c.4924>:
    1759:	20 20 75 6d 6f 75 6e 74 20 61 64 64 72 65 73 73       umount address
    1769:	0a 00                                               ..

0000176b <__c.4922>:
    176b:	55 73 61 67 65 3a 0a 00                             Usage:..

00001773 <__c.4876>:
    1773:	55 73 61 67 65 3a 20 0a 00                          Usage: ..

0000177c <__c.4872>:
    177c:	6d 6f 75 6e 74 0a 20 20 20 20 20 64 69 73 70 6c     mount.     displ
    178c:	61 79 73 20 61 20 6c 69 73 74 20 6f 66 20 6d 6f     ays a list of mo
    179c:	75 6e 74 65 64 20 64 72 69 76 65 73 20 6f 6e 65     unted drives one
    17ac:	20 70 65 72 20 6c 69 6e 65 0a 6d 6f 75 6e 74 20      per line.mount 
    17bc:	41 4d 49 47 4f 7c 53 53 38 30 20 6d 6f 64 65 6c     AMIGO|SS80 model
    17cc:	20 61 64 64 72 65 73 73 20 66 69 6c 65 0a 20 20      address file.  
    17dc:	20 20 20 45 78 61 6d 70 6c 65 3a 20 6d 6f 75 6e        Example: moun
    17ec:	74 20 39 31 32 31 20 20 36 20 2f 61 6d 69 67 6f     t 9121  6 /amigo
    17fc:	36 2e 6c 69 66 0a 20 20 20 20 20 45 78 61 6d 70     6.lif.     Examp
    180c:	6c 65 3a 20 6d 6f 75 6e 74 20 39 31 33 34 44 20     le: mount 9134D 
    181c:	32 20 2f 61 6d 69 67 6f 32 2e 6c 69 66 0a 20 20     2 /amigo2.lif.  
    182c:	20 20 20 4e 6f 74 65 3a 20 64 72 69 76 65 20 6d        Note: drive m
    183c:	6f 64 65 6c 20 6d 75 73 74 20 65 78 69 73 74 20     odel must exist 
    184c:	69 6e 20 68 70 64 69 72 2e 69 6e 69 20 5b 64 72     in hpdir.ini [dr
    185c:	69 76 65 69 6e 66 6f 5d 20 73 65 63 74 69 6f 6e     iveinfo] section
    186c:	0a 6d 6f 75 6e 74 20 50 52 49 4e 54 45 52 20 61     .mount PRINTER a
    187c:	64 64 72 65 73 73 0a 20 20 20 20 20 45 78 61 6d     ddress.     Exam
    188c:	70 6c 65 3a 20 6d 6f 75 6e 74 20 50 52 49 4e 54     ple: mount PRINT
    189c:	45 52 20 35 0a 75 6d 6f 75 6e 74 20 61 64 64 72     ER 5.umount addr
    18ac:	65 73 73 0a 20 20 20 20 20 45 78 61 6d 70 6c 65     ess.     Example
    18bc:	3a 20 75 6d 6f 75 6e 74 20 36 0a 0a 61 64 64 72     : umount 6..addr
    18cc:	65 73 73 65 73 0a 20 20 20 44 69 73 70 6c 61 79     esses.   Display
    18dc:	20 61 6c 6c 20 64 65 76 69 63 65 20 47 50 49 42      all device GPIB
    18ec:	20 62 75 73 20 61 64 64 72 65 73 73 65 73 20 61      bus addresses a
    18fc:	6e 64 20 50 50 52 20 76 61 6c 75 65 73 0a 63 6f     nd PPR values.co
    190c:	6e 66 69 67 20 5b 2d 76 5d 0a 20 20 20 44 69 73     nfig [-v].   Dis
    191c:	70 6c 61 79 20 63 75 72 72 65 6e 74 20 64 72 69     play current dri
    192c:	76 65 73 20 63 6f 6e 66 69 67 75 72 61 74 69 6f     ves configuratio
    193c:	6e 0a 20 20 20 2d 76 20 56 65 72 62 6f 73 65 20     n.   -v Verbose 
    194c:	2d 20 73 68 6f 77 20 66 75 6c 6c 20 64 65 74 61     - show full deta
    195c:	69 6c 0a 0a 00                                      il...

00001961 <__c.4870>:
    1961:	64 72 69 76 65 73 20 20 20 20 68 65 6c 70 0a 00     drives    help..

00001971 <__c.4862>:
    1971:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

00001979 <__c.4860>:
    1979:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    1989:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

00001993 <__c.4858>:
    1993:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    19a3:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    19b3:	0a 00                                               ..

000019b5 <__c.4856>:
    19b5:	53 53 38 30 2d 25 64 00                             SS80-%d.

000019bd <__c.4854>:
    19bd:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    19cd:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

000019d7 <__c.4852>:
    19d7:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    19e7:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    19f7:	0a 00                                               ..

000019f9 <__c.4832>:
    19f9:	44 65 76 69 63 65 20 65 72 72 6f 72 73 20 2d 20     Device errors - 
    1a09:	72 65 6d 6f 76 69 6e 67 3a 20 00                    removing: .

00001a14 <__c.4830>:
    1a14:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1a24:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    1a34:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    1a44:	6f 20 32 35 36 0a 00                                o 256..

00001a4b <__c.4828>:
    1a4b:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1a5b:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    1a6b:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    1a7b:	20 32 35 36 0a 00                                    256..

00001a81 <__c.4822>:
    1a81:	41 64 64 72 65 73 73 20 28 25 64 29 20 6f 75 74     Address (%d) out
    1a91:	20 6f 66 20 72 61 6e 67 65 0a 00                     of range..

00001a9c <__c.4806>:
    1a9c:	57 41 52 4e 49 4e 47 3a 20 6d 6f 64 65 6c 20 4e     WARNING: model N
    1aac:	4f 54 20 66 6f 75 6e 64 20 69 6e 20 68 70 64 69     OT found in hpdi
    1abc:	72 2e 69 6e 69 21 0a 00                             r.ini!..

00001ac4 <__c.4800>:
    1ac4:	68 70 64 69 72 20 69 6e 76 61 6c 69 64 20 74 79     hpdir invalid ty
    1ad4:	70 65 20 2d 20 4e 4f 54 20 41 4d 49 47 4f 20 6f     pe - NOT AMIGO o
    1ae4:	66 20 53 53 38 30 0a 00                             f SS80..

00001aec <__c.4764>:
    1aec:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    1afc:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    1b0c:	0a 00                                               ..

00001b0e <__c.4756>:
    1b0e:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    1b1e:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    1b2e:	6c 6c 0a 00                                         ll..

00001b32 <__c.4735>:
    1b32:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1b42:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    1b52:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

00001b5d <__c.4733>:
    1b5d:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1b6d:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    1b7d:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    1b8d:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00001b95 <__c.4731>:
    1b95:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1ba5:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    1bb5:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    1bc5:	3a 25 73 0a 00                                      :%s..

00001bca <__c.4729>:
    1bca:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1bda:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    1bea:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    1bfa:	55 4c 4c 0a 00                                      ULL..

00001bff <__c.4727>:
    1bff:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1c0f:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    1c1f:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    1c2f:	66 20 72 61 6e 67 65 0a 00                          f range..

00001c38 <__c.4725>:
    1c38:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1c48:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    1c58:	6e 67 65 0a 00                                      nge..

00001c5d <__c.4686>:
    1c5d:	0a 00                                               ..

00001c5f <__c.4681>:
    1c5f:	0a 00                                               ..

00001c61 <__c.4679>:
    1c61:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1c71:	6c 64 0a 00                                         ld..

00001c75 <__c.4677>:
    1c75:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1c85:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001c94 <__c.4675>:
    1c94:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001c9e <__c.4673>:
    1c9e:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1cae:	6c 64 0a 00                                         ld..

00001cb2 <__c.4671>:
    1cb2:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1cc2:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001cd1 <__c.4669>:
    1cd1:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001cda <__c.4666>:
    1cda:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    1cea:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00001cfa <__c.4657>:
    1cfa:	0a 00                                               ..

00001cfc <__c.4652>:
    1cfc:	0a 00                                               ..

00001cfe <__c.4650>:
    1cfe:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

00001d07 <__c.4648>:
    1d07:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001d11 <__c.4646>:
    1d11:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001d1a <__c.4643>:
    1d1a:	44 65 76 69 63 65 20 41 64 64 72 65 73 73 65 73     Device Addresses
    1d2a:	0a 00                                               ..

00001d2c <__c.4637>:
    1d2c:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    1d3c:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    1d4c:	2a 2a 2a 2a 2a 0a 00                                *****..

00001d53 <__c.4635>:
    1d53:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    1d63:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00001d70 <__c.4633>:
    1d70:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    1d80:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    1d90:	0a 00                                               ..

00001d92 <__c.4629>:
    1d92:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    1da2:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1db2:	0a 00                                               ..

00001db4 <__c.4626>:
    1db4:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1dc4:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1dd4:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001de4 <__c.4617>:
    1de4:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1df4:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1e04:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001e13 <__c.4614>:
    1e13:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1e23:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1e33:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001e43 <__c.4605>:
    1e43:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1e53:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1e63:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001e71 <__c.4597>:
    1e71:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1e81:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1e91:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001e9f <__c.4587>:
    1e9f:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1eaf:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1ebf:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001ecb <__c.4570>:
    1ecb:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1edb:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1eeb:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1efb:	0a 00                                               ..

00001efd <__c.4562>:
    1efd:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1f0d:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1f1d:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001f2b <__c.4559>:
    1f2b:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1f3b:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1f4b:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001f59 <__c.4551>:
    1f59:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1f69:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1f79:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001f86 <__c.4541>:
    1f86:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1f96:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1fa6:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001fb7 <__c.4538>:
    1fb7:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1fc7:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1fd7:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001fe1 <__c.4534>:
    1fe1:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1ff1:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    2001:	0a 00                                               ..

00002003 <__c.4523>:
    2003:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    2013:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    2023:	0a 00                                               ..

00002025 <__c.4520>:
    2025:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    2035:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00002043 <__c.4518>:
    2043:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00002050 <__c.4497>:
    2050:	25 73 0a 00                                         %s..

00002054 <__c.4487>:
    2054:	25 2d 32 35 73 20 3d 20 25 73 0a 00                 %-25s = %s..

00002060 <__c.4476>:
    2060:	25 2d 32 35 73 20 3d 20 25 38 6c 78 48 20 28 25     %-25s = %8lxH (%
    2070:	6c 64 29 0a 00                                      ld)..

00002075 <__c.3652>:
    2075:	4d 6f 64 65 6c 3a 20 25 73 20 4e 4f 54 20 66 6f     Model: %s NOT fo
    2085:	75 6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69     und in hpdir.ini
    2095:	0a 00                                               ..

00002097 <__c.3647>:
    2097:	4d 6f 64 65 6c 3a 20 25 73 20 66 6f 75 6e 64 20     Model: %s found 
    20a7:	69 6e 20 68 70 64 69 72 2e 69 6e 69 0a 00           in hpdir.ini..

000020b5 <__c.3645>:
    20b5:	25 73 20 25 73 0a 00                                %s %s..

000020bc <__c.3641>:
    20bc:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    20cc:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

000020d9 <__c.4569>:
    20d9:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    20e9:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    20f9:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    2109:	48 5d 0a 00                                         H]..

0000210d <__c.4567>:
    210d:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    211d:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    212d:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    213d:	48 5d 0a 00                                         H]..

00002141 <__c.4565>:
    2141:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    2151:	74 5d 0a 00                                         t]..

00002155 <__c.4563>:
    2155:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00002164 <__c.4561>:
    2164:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    2174:	74 65 5d 0a 00                                      te]..

00002179 <__c.4559>:
    2179:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    2189:	61 74 65 5d 0a 00                                   ate]..

0000218f <__c.4557>:
    218f:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    219f:	61 74 65 5d 0a 00                                   ate]..

000021a5 <__c.4552>:
    21a5:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    21b5:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    21c5:	5d 0a 00                                            ]..

000021c8 <__c.4538>:
    21c8:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

000021d7 <__c.4536>:
    21d7:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    21e7:	5d 0a 00                                            ]..

000021ea <__c.4529>:
    21ea:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

000021f6 <__c.4515>:
    21f6:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    2206:	5d 0a 00                                            ]..

00002209 <__c.4513>:
    2209:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    2219:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

00002223 <__c.4506>:
    2223:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    2233:	48 5d 0a 00                                         H]..

00002237 <__c.4504>:
    2237:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    2247:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

00002257 <__c.4499>:
    2257:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    2267:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    2277:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    2287:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

00002293 <__c.4496>:
    2293:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    22a3:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

000022b3 <__c.4494>:
    22b3:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    22c3:	29 5d 0a 00                                         )]..

000022c7 <__c.4492>:
    22c7:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    22d7:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    22e7:	28 25 64 29 5d 0a 00                                (%d)]..

000022ee <__c.4490>:
    22ee:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    22fe:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

0000230c <__c.4488>:
    230c:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    231c:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00002329 <__c.4485>:
    2329:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    2339:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    2349:	44 4f 5d 0a 00                                      DO]..

0000234e <__c.4482>:
    234e:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    235e:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002367 <__c.4480>:
    2367:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    2377:	5d 0a 00                                            ]..

0000237a <__c.4471>:
    237a:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    238a:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    239a:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    23aa:	43 6f 64 65 73 5d 0a 00                             Codes]..

000023b2 <__c.4468>:
    23b2:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    23c2:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

000023d2 <__c.4466>:
    23d2:	5b 53 53 38 30 20 49 6e 69 74 69 61 74 65 20 44     [SS80 Initiate D
    23e2:	69 61 67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f     iagnostic - TODO
    23f2:	5d 0a 00                                            ]..

000023f5 <__c.4464>:
    23f5:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    2405:	61 74 75 73 5d 0a 00                                atus]..

0000240c <__c.4462>:
    240c:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    241c:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

00002425 <__c.4460>:
    2425:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    2435:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

00002440 <__c.4458>:
    2440:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    2450:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

0000245f <__c.4456>:
    245f:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    246f:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

0000247d <__c.4454>:
    247d:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

0000248e <__c.4452>:
    248e:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    249e:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

000024aa <__c.4450>:
    24aa:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    24ba:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

000024c7 <__c.4448>:
    24c7:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    24d7:	2d 4f 50 5d 0a 00                                   -OP]..

000024dd <__c.4446>:
    24dd:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    24ed:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

000024fe <__c.4444>:
    24fe:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    250e:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    251e:	44 4f 5d 0a 00                                      DO]..

00002523 <__c.4442>:
    2523:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    2533:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

0000253d <__c.4440>:
    253d:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    254d:	2d 4f 50 5d 0a 00                                   -OP]..

00002553 <__c.4438>:
    2553:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

00002561 <__c.4436>:
    2561:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    2571:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

0000257d <__c.4434>:
    257d:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    258d:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

0000259a <__c.4432>:
    259a:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25aa:	20 57 72 69 74 65 5d 0a 00                           Write]..

000025b3 <__c.4429>:
    25b3:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    25c3:	20 52 65 61 64 5d 0a 00                              Read]..

000025cb <__c.4427>:
    25cb:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    25db:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

000025e4 <__c.4424>:
    25e4:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    25f4:	25 64 29 5d 0a 00                                   %d)]..

000025fa <__c.4422>:
    25fa:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    260a:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002613 <__c.4420>:
    2613:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    2623:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    2633:	52 4f 52 5d 0a 00                                   ROR]..

00002639 <__c.4411>:
    2639:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    2649:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

00002653 <__c.4406>:
    2653:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    2663:	76 61 6c 69 64 5d 0a 00                             valid]..

0000266b <__c.4401>:
    266b:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    267b:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

0000268a <__c.4399>:
    268a:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    269a:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

000026a7 <__c.4397>:
    26a7:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    26b7:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    26c7:	5d 0a 00                                            ]..

000026ca <__c.4395>:
    26ca:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

000026db <__c.4387>:
    26db:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    26eb:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

000026f6 <__c.4385>:
    26f6:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2706:	73 5d 0a 00                                         s]..

0000270a <__c.4375>:
    270a:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

00002715 <__c.4373>:
    2715:	25 73 3a 0a 00                                      %s:..

0000271a <__c.4348>:
    271a:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    272a:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    273a:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

00002745 <__c.4346>:
    2745:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2755:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    2765:	49 4e 49 53 48 5d 0a 00                             INISH]..

0000276d <__c.4342>:
    276d:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    277d:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    278d:	58 48 29 5d 0a 00                                   XH)]..

00002793 <__c.4340>:
    2793:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    27a3:	72 5d 0a 00                                         r]..

000027a7 <__c.4336>:
    27a7:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    27b7:	5d 0a 00                                            ]..

000027ba <__c.4334>:
    27ba:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    27ca:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    27da:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

000027e3 <__c.4322>:
    27e3:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    27f3:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    2803:	62 79 74 65 73 5d 0a 00                             bytes]..

0000280b <__c.4320>:
    280b:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    281b:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    282b:	53 48 5d 0a 00                                      SH]..

00002830 <__c.4315>:
    2830:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    2840:	20 45 72 72 6f 72 5d 0a 00                           Error]..

00002849 <__c.4313>:
    2849:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    2859:	45 72 72 6f 72 5d 0a 00                             Error]..

00002861 <__c.4311>:
    2861:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    2871:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

0000287f <__c.4309>:
    287f:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    288f:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    289f:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

000028a7 <__c.4292>:
    28a7:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    28b7:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

000028c3 <__c.4276>:
    28c3:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    28d3:	5d 0a 00                                            ]..

000028d6 <__c.4392>:
    28d6:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    28e6:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    28f6:	64 64 72 65 73 73 5d 0a 00                          ddress]..

000028ff <__c.4389>:
    28ff:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    290f:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    291f:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

0000292a <__c.4386>:
    292a:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    293a:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    294a:	66 66 65 72 65 64 5d 0a 00                          ffered]..

00002953 <__c.4381>:
    2953:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2963:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

00002973 <__c.4378>:
    2973:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    2983:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

0000298f <__c.4375>:
    298f:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    299f:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    29af:	0a 00                                               ..

000029b1 <__c.4372>:
    29b1:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    29c1:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

000029d0 <__c.4369>:
    29d0:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    29e0:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

000029f1 <__c.4366>:
    29f1:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    2a01:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

00002a11 <__c.4362>:
    2a11:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    2a21:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2a31:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2a41:	0a 00                                               ..

00002a43 <__c.4357>:
    2a43:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

00002a53 <__c.4354>:
    2a53:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    2a63:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

00002a72 <__c.4352>:
    2a72:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2a82:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    2a92:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

00002a9d <__c.4350>:
    2a9d:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    2aad:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

00002abd <__c.4348>:
    2abd:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    2acd:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    2add:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002ae6 <__c.4346>:
    2ae6:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2af6:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

00002b02 <__c.4344>:
    2b02:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    2b12:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    2b22:	0a 00                                               ..

00002b24 <__c.4342>:
    2b24:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

00002b34 <__c.4339>:
    2b34:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    2b44:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

00002b55 <__c.4337>:
    2b55:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2b65:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    2b75:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002b7e <__c.4335>:
    2b7e:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2b8e:	36 5d 0a 00                                         6]..

00002b92 <__c.4332>:
    2b92:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2ba2:	35 5d 0a 00                                         5]..

00002ba6 <__c.4329>:
    2ba6:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2bb6:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002bc6 <__c.4326>:
    2bc6:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2bd6:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2be6:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002bf5 <__c.4324>:
    2bf5:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2c05:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002c16 <__c.4322>:
    2c16:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2c26:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002c37 <__c.4320>:
    2c37:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2c47:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    2c57:	0a 00                                               ..

00002c59 <__c.4318>:
    2c59:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2c69:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2c79:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2c89:	0a 00                                               ..

00002c8b <__c.4306>:
    2c8b:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    2c9b:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    2cab:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2cbb:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2ccb:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002cdc <__c.4304>:
    2cdc:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2cec:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2cfc:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2d0c:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2d1c:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002d2c <__c.4302>:
    2d2c:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2d3c:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d4c:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2d5c:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2d6c:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002d7c <__c.4300>:
    2d7c:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2d8c:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d9c:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2dac:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2dbc:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002dcc <__c.4295>:
    2dcc:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2ddc:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2dec:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2dfc:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2e0c:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2e1c:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2e2c:	58 48 5d 0a 00                                      XH]..

00002e31 <__c.4293>:
    2e31:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2e41:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2e51:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2e61:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2e71:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2e81:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2e91:	30 32 58 48 5d 0a 00                                02XH]..

00002e98 <__c.4291>:
    2e98:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2ea8:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2eb8:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2ec8:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2ed8:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2ee8:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2ef8:	30 32 58 48 5d 0a 00                                02XH]..

00002eff <__c.4289>:
    2eff:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2f0f:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2f1f:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2f2f:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2f3f:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2f4f:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2f5f:	30 32 58 48 5d 0a 00                                02XH]..

00002f66 <__c.4282>:
    2f66:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002f75 <__c.4269>:
    2f75:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002f82 <__c.4267>:
    2f82:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2f92:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002f9c <__c.4260>:
    2f9c:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 64 69 73     [AMIGO Write dis
    2fac:	6b 20 77 72 69 74 65 20 65 72 72 6f 72 5d 0a 00     k write error]..

00002fbc <__c.4258>:
    2fbc:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2fcc:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002fdb <__c.4256>:
    2fdb:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2feb:	0a 00                                               ..

00002fed <__c.4249>:
    2fed:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2ffd:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00003007 <__c.4243>:
    3007:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    3017:	0a 00                                               ..

00003019 <__c.4237>:
    3019:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    3029:	6e 65 5d 0a 00                                      ne]..

0000302e <__c.4233>:
    302e:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

0000303e <__c.4192>:
    303e:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    304e:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    305e:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00003069 <__c.4222>:
    3069:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    3079:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    3089:	25 30 34 58 48 5d 0a 00                             %04XH]..

00003091 <__c.4199>:
    3091:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    30a1:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

000030aa <__c.4185>:
    30aa:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    30ba:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

000030c4 <__c.4183>:
    30c4:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    30d4:	75 73 5d 0a 00                                      us]..

000030d9 <__c.4177>:
    30d9:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    30e9:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

000030f3 <__c.4175>:
    30f3:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    3103:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00003111 <__c.4169>:
    3111:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    3121:	74 61 74 75 73 5d 0a 00                             tatus]..

00003129 <__c.4154>:
    3129:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    3139:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

00003143 <__c.4152>:
    3143:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    3153:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

0000315f <__c.4147>:
    315f:	25 30 38 6c 64 0d 00                                %08ld..

00003166 <__c.4141>:
    3166:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    3176:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00003187 <__c.4135>:
    3187:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00003195 <__c.4133>:
    3195:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    31a5:	69 74 65 0a 00                                      ite..

000031aa <__c.4127>:
    31aa:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000031b6 <__c.4125>:
    31b6:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    31c6:	6f 3a 25 73 0a 00                                   o:%s..

000031cc <__c.4123>:
    31cc:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    31dc:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    31ec:	74 00                                               t.

000031ee <__c.4559>:
    31ee:	09 46 6f 72 6d 61 74 74 69 6e 67 3a 20 77 72 6f     .Formatting: wro
    31fe:	74 65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00     te %ld sectors..

0000320e <__c.4557>:
    320e:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    321e:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

0000322e <__c.4555>:
    322e:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    323e:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    324e:	30 0a 00                                            0..

00003251 <__c.4553>:
    3251:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3261:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    3271:	70 74 79 0a 00                                      pty..

00003276 <__c.4551>:
    3276:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3286:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    3296:	73 20 65 6d 70 74 79 0a 00                          s empty..

0000329f <__c.4538>:
    329f:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    32af:	20 25 31 30 73 0a 00                                 %10s..

000032b6 <__c.4536>:
    32b6:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    32c6:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    32d6:	74 20 66 6f 75 6e 64 0a 00                          t found..

000032df <__c.4534>:
    32df:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    32ef:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    32ff:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    330f:	74 65 72 73 0a 00                                   ters..

00003315 <__c.4532>:
    3315:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3325:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    3335:	65 6d 70 74 79 0a 00                                empty..

0000333c <__c.4530>:
    333c:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    334c:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    335c:	65 6d 70 74 79 0a 00                                empty..

00003363 <__c.4528>:
    3363:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3373:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    3383:	20 65 6d 70 74 79 0a 00                              empty..

0000338b <__c.4519>:
    338b:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

0000339a <__c.4517>:
    339a:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    33aa:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    33ba:	20 66 6f 75 6e 64 0a 00                              found..

000033c2 <__c.4515>:
    33c2:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    33d2:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

000033e1 <__c.4513>:
    33e1:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    33f1:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

00003401 <__c.4511>:
    3401:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3411:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    3421:	70 74 79 0a 00                                      pty..

00003426 <__c.4503>:
    3426:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003434 <__c.4498>:
    3434:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003442 <__c.4496>:
    3442:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3452:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3462:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003472 <__c.4494>:
    3472:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3482:	73 0a 00                                            s..

00003485 <__c.4492>:
    3485:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3495:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    34a5:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000034b4 <__c.4490>:
    34b4:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    34c4:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

000034d0 <__c.4488>:
    34d0:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    34e0:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

000034eb <__c.4486>:
    34eb:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    34fb:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

0000350b <__c.4469>:
    350b:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003519 <__c.4464>:
    3519:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003527 <__c.4462>:
    3527:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3537:	73 0a 00                                            s..

0000353a <__c.4460>:
    353a:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    354a:	75 6e 64 3a 25 73 0a 00                             und:%s..

00003552 <__c.4443>:
    3552:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003560 <__c.4440>:
    3560:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3570:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    3580:	20 65 72 72 6f 72 0a 00                              error..

00003588 <__c.4432>:
    3588:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003596 <__c.4430>:
    3596:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    35a6:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    35b6:	20 65 72 72 6f 72 0a 00                              error..

000035be <__c.4427>:
    35be:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    35ce:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    35de:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    35ee:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    35fe:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    360e:	30 32 58 48 0a 00                                   02XH..

00003614 <__c.4425>:
    3614:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3624:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    3634:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    3644:	20 25 64 0a 00                                       %d..

00003649 <__c.4421>:
    3649:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

00003659 <__c.4419>:
    3659:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    3669:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    3679:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    3689:	30 78 45 30 31 33 0a 00                             0xE013..

00003691 <__c.4417>:
    3691:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    36a1:	6e 64 3a 25 73 0a 00                                nd:%s..

000036a8 <__c.4415>:
    36a8:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    36b8:	75 6e 64 3a 25 73 0a 00                             und:%s..

000036c0 <__c.4391>:
    36c0:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000036ce <__c.4389>:
    36ce:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    36de:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000036e7 <__c.4387>:
    36e7:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    36f7:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

00003700 <__c.4385>:
    3700:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    3710:	20 20 25 34 64 0a 00                                  %4d..

00003717 <__c.4383>:
    3717:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    3727:	20 20 20 25 73 0a 00                                   %s..

0000372e <__c.4381>:
    372e:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    373e:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    374e:	77 72 69 74 65 0a 00                                write..

00003755 <__c.4379>:
    3755:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3765:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3775:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003785 <__c.4377>:
    3785:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3795:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    37a5:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000037b4 <__c.4375>:
    37b4:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    37c4:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    37d4:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

000037e4 <__c.4373>:
    37e4:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    37f4:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    3804:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

00003813 <__c.4371>:
    3813:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3823:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    3833:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

00003841 <__c.4369>:
    3841:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3851:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    3861:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    3871:	79 0a 00                                            y..

00003874 <__c.4355>:
    3874:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003882 <__c.4353>:
    3882:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003890 <__c.4348>:
    3890:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000389e <__c.4331>:
    389e:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    38ae:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    38be:	25 64 0a 00                                         %d..

000038c2 <__c.4314>:
    38c2:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    38d2:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    38e2:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    38f2:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

000038fb <__c.4300>:
    38fb:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    390b:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    391b:	62 69 67 0a 00                                      big..

00003920 <__c.4298>:
    3920:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3930:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    3940:	63 74 65 72 73 0a 00                                cters..

00003947 <__c.4291>:
    3947:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    3957:	73 0a 00                                            s..

0000395a <__c.4289>:
    395a:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    396a:	73 0a 00                                            s..

0000396d <__c.4287>:
    396d:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    397d:	73 0a 00                                            s..

00003980 <__c.4285>:
    3980:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

00003991 <__c.4283>:
    3991:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

0000399e <__c.4281>:
    399e:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

000039aa <__c.4279>:
    39aa:	0a 00                                               ..

000039ac <__c.4276>:
    39ac:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    39bc:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    39cc:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

000039dc <__c.4274>:
    39dc:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    39ec:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    39fc:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3a0c:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3a1c:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003a28 <__c.4271>:
    3a28:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3a38:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3a48:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3a58:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003a68 <__c.4269>:
    3a68:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3a78:	3a 5b 25 73 5d 0a 00                                :[%s]..

00003a7f <__c.4259>:
    3a7f:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3a8f:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    3a9f:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    3aaf:	64 0a 00                                            d..

00003ab2 <__c.4257>:
    3ab2:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3ac2:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3ad2:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    3ae2:	64 0a 00                                            d..

00003ae5 <__c.4255>:
    3ae5:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3af5:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3b05:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3b15:	69 6c 65 64 0a 00                                   iled..

00003b1b <__c.4253>:
    3b1b:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b2b:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3b3b:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3b4b:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003b5a <__c.4240>:
    3b5a:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3b6a:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3b7a:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3b8a:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    3b9a:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

00003bab <__c.4237>:
    3bab:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3bbb:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3bcb:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003bd4 <__c.4235>:
    3bd4:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3be4:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3bf4:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3c04:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003c0c <__c.4223>:
    3c0c:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3c1c:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3c2c:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3c3c:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3c4c:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003c59 <__c.4198>:
    3c59:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3c69:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003c79 <__c.4189>:
    3c79:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3c89:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    3c99:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    3ca9:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003cb3 <__c.4170>:
    3cb3:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

00003cc0 <__c.4165>:
    3cc0:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003ccd <__c.4160>:
    3ccd:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003cda <__c.4152>:
    3cda:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003ce7 <__c.4150>:
    3ce7:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3cf7:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3d07:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3d17:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3d27:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3d37:	25 6c 64 0a 00                                      %ld..

00003d3c <__c.4134>:
    3d3c:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d4c:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3d5c:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003d68 <__c.4132>:
    3d68:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d78:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3d88:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003d93 <__c.4130>:
    3d93:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3da3:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3db3:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3dc3:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3dd3:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003dde <__c.4128>:
    3dde:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3dee:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3dfe:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3e0e:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3e1e:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003e29 <__c.4126>:
    3e29:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e39:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3e49:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003e57 <__c.4124>:
    3e57:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e67:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3e77:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3e87:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003e98 <__c.4122>:
    3e98:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ea8:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3eb8:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3ec8:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3ed8:	58 68 0a 00                                         Xh..

00003edc <__c.4120>:
    3edc:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3eec:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003efd <__c.4114>:
    3efd:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f0d:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3f1d:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003f29 <__c.4112>:
    3f29:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f39:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3f49:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003f58 <__c.4110>:
    3f58:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f68:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3f78:	25 6c 64 0a 00                                      %ld..

00003f7d <__c.4108>:
    3f7d:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f8d:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3f9d:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3fad:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003fb6 <__c.4106>:
    3fb6:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3fc6:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3fd6:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3fe6:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003fef <__c.4104>:
    3fef:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3fff:	58 48 20 3e 20 31 0a 00                             XH > 1..

00004007 <__c.4102>:
    4007:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4017:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    4027:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    4037:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00004040 <__c.4100>:
    4040:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4050:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

0000405f <__c.4093>:
    405f:	0a 00                                               ..

00004061 <__c.4091>:
    4061:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    4071:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000407b <__c.4089>:
    407b:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    408b:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00004097 <__c.4087>:
    4097:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    40a7:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000040b4 <__c.4085>:
    40b4:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    40c4:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

000040d1 <__c.4083>:
    40d1:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    40e1:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000040ee <__c.4081>:
    40ee:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    40fe:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

0000410a <__c.4079>:
    410a:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    411a:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004126 <__c.4077>:
    4126:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    4136:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004140 <__c.4075>:
    4140:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    4150:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000415a <__c.4073>:
    415a:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    416a:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004176 <__c.4071>:
    4176:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    4186:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004192 <__c.4069>:
    4192:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    41a2:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041af <__c.4067>:
    41af:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    41bf:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041cc <__c.4065>:
    41cc:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    41dc:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000041e8 <__c.4063>:
    41e8:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    41f8:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004202 <__c.4061>:
    4202:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    4212:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000421f <__c.4059>:
    421f:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    422f:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000423c <__c.4057>:
    423c:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    424c:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004259 <__c.4055>:
    4259:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    4269:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004276 <__c.4053>:
    4276:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    4286:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00004293 <__c.4051>:
    4293:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    42a3:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042b0 <__c.4049>:
    42b0:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    42c0:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042cd <__c.4047>:
    42cd:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    42dd:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042ea <__c.4045>:
    42ea:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    42fa:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004304 <__c.4043>:
    4304:	0a 25 73 0a 00                                      .%s..

00004309 <__c.3920>:
    4309:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    4319:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    4329:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    4339:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

00004346 <__c.3911>:
    4346:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    4356:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    4366:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    4376:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

00004382 <__c.3902>:
    4382:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    4392:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

000043a3 <__c.3895>:
    43a3:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    43b3:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

000043bc <__c.3889>:
    43bc:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    43cc:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    43dc:	25 73 5d 0a 00                                      %s]..

000043e1 <__c.3877>:
    43e1:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    43f1:	6f 69 6e 74 65 72 0a 00                             ointer..

000043f9 <__c.3872>:
    43f9:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    4409:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    4419:	20 6d 65 6d 6f 72 79 0a 00                           memory..

00004422 <__c.3866>:
    4422:	74 64 30 32 6c 69 66 20 73 75 70 70 6f 72 74 20     td02lif support 
    4432:	6e 6f 74 20 65 6e 61 62 6c 65 64 0a 00              not enabled..

0000443f <__c.3864>:
    443f:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    444f:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

00004460 <__c.3851>:
    4460:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    4470:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    4480:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    4490:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    44a0:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    44b0:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    44c0:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    44d0:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    44e0:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    44f0:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    4500:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    4510:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    4520:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    4530:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    4540:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    4550:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    4560:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    4570:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    4580:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    4590:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    45a0:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    45b0:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    45c0:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    45d0:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    45e0:	6d 65 0a 55 73 65 20 2d 64 20 20 61 66 74 65 72     me.Use -d  after
    45f0:	20 27 6c 69 66 27 20 6b 65 79 77 6f 72 64 20 74      'lif' keyword t
    4600:	6f 20 65 6e 61 62 6c 65 20 4c 49 46 20 66 69 6c     o enable LIF fil
    4610:	65 73 79 73 74 65 6d 20 64 65 62 75 67 67 69 6e     esystem debuggin
    4620:	67 0a 0a 00                                         g...

00004624 <__c.3849>:
    4624:	6c 69 66 20 20 20 20 20 20 20 68 65 6c 70 0a 00     lif       help..

00004634 <__c.4655>:
    4634:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    4644:	53 4b 0a 00                                         SK..

00004648 <__c.4653>:
    4648:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4658:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004662 <__c.4651>:
    4662:	25 2d 31 36 73 00                                   %-16s.

00004668 <__c.4649>:
    4668:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    4678:	30 34 78 48 0a 00                                   04xH..

0000467e <__c.4647>:
    467e:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    468e:	64 6f 6e 65 0a 00                                   done..

00004694 <__c.4645>:
    4694:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    46a4:	6f 6e 65 0a 00                                      one..

000046a9 <__c.4643>:
    46a9:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    46b9:	61 6c 69 7a 65 64 0a 00                             alized..

000046c1 <__c.4641>:
    46c1:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    46d1:	0a 00                                               ..

000046d3 <__c.4639>:
    46d3:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    46e3:	7a 65 64 0a 00                                      zed..

000046e8 <__c.4637>:
    46e8:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    46f8:	69 7a 65 64 0a 00                                   ized..

000046fe <__c.4635>:
    46fe:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

0000470f <__c.4633>:
    470f:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    471f:	20 73 74 61 72 74 0a 00                              start..

00004727 <__c.4631>:
    4727:	53 79 73 74 65 6d 20 54 61 73 6b 20 49 6e 74 65     System Task Inte
    4737:	72 72 75 70 74 20 52 61 74 65 3a 20 25 6c 64 20     rrupt Rate: %ld 
    4747:	4e 61 6e 6f 20 53 65 63 6f 6e 64 73 0a 00           Nano Seconds..

00004755 <__c.4629>:
    4755:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

00004764 <__c.4627>:
    4764:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     Initializing RTC
    4774:	0a 00                                               ..

00004776 <__c.4625>:
    4776:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
    4786:	20 62 75 73 0a 00                                    bus..

0000478c <__c.4623>:
    478c:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     Initializing SPI
    479c:	20 62 75 73 0a 00                                    bus..

000047a2 <__c.4621>:
    47a2:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    47b2:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000047bc <__c.4619>:
    47bc:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    47cc:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000047d6 <__c.4617>:
    47d6:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    47e6:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    47f6:	35 64 69 73 6b 0a 00                                5disk..

000047fd <__c.4615>:
    47fd:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

0000480d <__c.4613>:
    480d:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    481d:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

0000482a <__c.4611>:
    482a:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    483a:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004849 <__c.4609>:
    4849:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    4859:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    4869:	3a 20 25 6c 64 0a 00                                : %ld..

00004870 <__c.4607>:
    4870:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

00004881 <__c.4605>:
    4881:	53 74 61 72 74 0a 00                                Start..

00004888 <__c.4597>:
    4888:	25 2d 31 36 73 00                                   %-16s.

0000488e <__c.4595>:
    488e:	53 53 38 30 3d 25 64 20 41 4d 49 47 4f 3d 25 64     SS80=%d AMIGO=%d
	...

0000489f <__c.4587>:
    489f:	20 20 20 20 20 20 20 5b 25 73 5d 0a 00                     [%s]..

000048ac <__c.4585>:
    48ac:	20 20 20 20 41 72 67 75 6d 65 6e 74 20 63 6f 75         Argument cou
    48bc:	6e 74 20 3d 20 25 64 0a 00                          nt = %d..

000048c5 <__c.4583>:
    48c5:	49 6e 76 61 6c 69 64 20 43 6f 6d 6d 61 6e 64 0a     Invalid Command.
	...

000048d6 <__c.4581>:
    48d6:	43 6f 6d 6d 61 6e 64 20 46 41 49 4c 45 44 0a 00     Command FAILED..

000048e6 <__c.4579>:
    48e6:	4f 4b 0a 00                                         OK..

000048ea <__c.4577>:
    48ea:	49 6e 70 75 74 20 64 65 62 75 67 67 69 6e 67 3a     Input debugging:
    48fa:	20 25 73 0a 00                                       %s..

000048ff <__c.4566>:
    48ff:	20 20 20 5b 25 73 5d 0a 00                             [%s]..

00004908 <__c.4564>:
    4908:	41 72 67 75 6d 65 6e 74 20 63 6f 75 6e 74 20 3d     Argument count =
    4918:	20 25 64 0a 00                                       %d..

0000491d <__c.4562>:
    491d:	0a 3e 00                                            .>.

00004920 <__c.4549>:
    4920:	0a 00                                               ..

00004922 <__c.4547>:
    4922:	69 6e 70 75 74 20 20 20 2d 20 54 6f 67 67 6c 65     input   - Toggle
    4932:	20 69 6e 70 75 74 20 70 61 72 73 69 6e 67 20 64      input parsing d
    4942:	65 62 75 67 67 69 6e 67 0a 6d 65 6d 20 20 20 20     ebugging.mem    
    4952:	20 2d 20 44 69 73 70 6c 61 79 20 66 72 65 65 20      - Display free 
    4962:	6d 65 6d 6f 72 79 0a 00                             memory..

0000496a <__c.4545>:
    496a:	74 69 6d 65 20 20 20 20 2d 20 64 69 73 70 6c 61     time    - displa
    497a:	79 20 63 75 72 72 65 6e 74 20 64 61 74 65 20 61     y current date a
    498a:	6e 64 20 74 69 6d 65 0a 0a 00                       nd time...

00004994 <__c.4543>:
    4994:	72 65 73 65 74 20 20 20 2d 20 72 65 73 65 74 20     reset   - reset 
    49a4:	65 6d 75 6c 61 74 6f 72 0a 73 65 74 64 61 74 65     emulator.setdate
    49b4:	20 2d 20 73 65 74 20 64 61 74 65 20 2d 20 70 72      - set date - pr
    49c4:	6f 6d 70 74 73 20 66 6f 72 20 64 61 74 65 0a 00     ompts for date..

000049d4 <__c.4541>:
    49d4:	64 69 72 20 20 20 20 20 20 20 44 69 72 65 63 74     dir       Direct
    49e4:	6f 72 79 20 6c 69 73 74 20 4d 53 44 4f 53 20 66     ory list MSDOS f
    49f4:	6f 72 6d 61 74 0a 00                                ormat..

000049fb <__c.4539>:
    49fb:	62 61 63 6b 6c 69 67 68 74 20 30 78 52 52 47 47     backlight 0xRRGG
    4a0b:	42 42 20 2d 20 66 6f 72 6d 61 74 20 30 78 5b 30     BB - format 0x[0
    4a1b:	30 2d 46 46 5d 5b 30 30 2d 46 46 5d 5b 30 30 2d     0-FF][00-FF][00-
    4a2b:	46 46 5d 0a 00                                      FF]..

00004a30 <__c.4537>:
    4a30:	68 65 6c 70 20 20 20 20 20 2d 20 64 69 73 70 6c     help     - displ
    4a40:	61 79 73 20 74 68 69 73 20 68 65 6c 70 20 6d 65     ays this help me
    4a50:	6e 75 0a 00                                         nu..

00004a54 <__c.4530>:
    4a54:	25 2d 31 36 73 00                                   %-16s.

00004a5a <__c.4528>:
    4a5a:	25 2d 31 36 73 00                                   %-16s.

00004a60 <__c.4521>:
    4a60:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4a70:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004a7a <__c.4519>:
    4a7a:	25 2d 31 36 73 00                                   %-16s.

00004a80 <__c.4517>:
    4a80:	25 2d 31 36 73 00                                   %-16s.

00004a86 <__c.4515>:
    4a86:	6c 63 64 5f 74 61 73 6b 20 69 6e 69 74 20 66 61     lcd_task init fa
    4a96:	69 6c 65 64 0a 00                                   iled..

00004a9c <__c.4513>:
    4a9c:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4aac:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

00004aba <__c.4507>:
    4aba:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4aca:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004ad4 <__c.4501>:
    4ad4:	25 73 20 25 32 64 20 25 30 32 64 3a 25 30 32 64     %s %2d %02d:%02d
    4ae4:	3a 25 30 32 64 00                                   :%02d.

00004aea <__c.4487>:
    4aea:	0a 00                                               ..

00004aec <__c.4485>:
    4aec:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4afc:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004b06 <__c.4483>:
    4b06:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4b16:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004b20 <__c.4481>:
    4b20:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4b30:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4b40:	35 64 69 73 6b 0a 00                                5disk..

00004b47 <__c.4479>:
    4b47:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004b57 <__c.4477>:
    4b57:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    4b67:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004b74 <__c.4475>:
    4b74:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4b84:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 20 77 69     vice Emulator wi
    4b94:	74 68 20 62 75 69 6c 74 20 69 6e 20 4c 49 46 20     th built in LIF 
    4ba4:	75 74 69 6c 69 74 69 65 73 0a 00 00                 utilities...

00004bb0 <__ctors_end>:
    4bb0:	11 24       	eor	r1, r1
    4bb2:	1f be       	out	0x3f, r1	; 63
    4bb4:	cf ef       	ldi	r28, 0xFF	; 255
    4bb6:	d0 e4       	ldi	r29, 0x40	; 64
    4bb8:	de bf       	out	0x3e, r29	; 62
    4bba:	cd bf       	out	0x3d, r28	; 61

00004bbc <__do_copy_data>:
    4bbc:	17 e1       	ldi	r17, 0x17	; 23
    4bbe:	a0 e0       	ldi	r26, 0x00	; 0
    4bc0:	b1 e0       	ldi	r27, 0x01	; 1
    4bc2:	e8 e2       	ldi	r30, 0x28	; 40
    4bc4:	f7 ed       	ldi	r31, 0xD7	; 215
    4bc6:	01 e0       	ldi	r16, 0x01	; 1
    4bc8:	0b bf       	out	0x3b, r16	; 59
    4bca:	02 c0       	rjmp	.+4      	; 0x4bd0 <__do_copy_data+0x14>
    4bcc:	07 90       	elpm	r0, Z+
    4bce:	0d 92       	st	X+, r0
    4bd0:	a4 34       	cpi	r26, 0x44	; 68
    4bd2:	b1 07       	cpc	r27, r17
    4bd4:	d9 f7       	brne	.-10     	; 0x4bcc <__do_copy_data+0x10>

00004bd6 <__do_clear_bss>:
    4bd6:	20 e2       	ldi	r18, 0x20	; 32
    4bd8:	a4 e4       	ldi	r26, 0x44	; 68
    4bda:	b7 e1       	ldi	r27, 0x17	; 23
    4bdc:	01 c0       	rjmp	.+2      	; 0x4be0 <.do_clear_bss_start>

00004bde <.do_clear_bss_loop>:
    4bde:	1d 92       	st	X+, r1

00004be0 <.do_clear_bss_start>:
    4be0:	a6 32       	cpi	r26, 0x26	; 38
    4be2:	b2 07       	cpc	r27, r18
    4be4:	e1 f7       	brne	.-8      	; 0x4bde <.do_clear_bss_loop>
    4be6:	0e 94 2d e5 	call	0x1ca5a	; 0x1ca5a <main>
    4bea:	0c 94 92 eb 	jmp	0x1d724	; 0x1d724 <_exit>

00004bee <__bad_interrupt>:
    4bee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004bf2 <chip_select>:
#endif
#ifdef AVR
    SPI0_RX(&data,1);
#endif
    return(data);
}
    4bf2:	e8 2f       	mov	r30, r24
    4bf4:	e6 95       	lsr	r30
    4bf6:	e6 95       	lsr	r30
    4bf8:	e6 95       	lsr	r30
    4bfa:	93 e0       	ldi	r25, 0x03	; 3
    4bfc:	e9 9f       	mul	r30, r25
    4bfe:	f0 01       	movw	r30, r0
    4c00:	11 24       	eor	r1, r1
    4c02:	32 a1       	ldd	r19, Z+34	; 0x22
    4c04:	28 2f       	mov	r18, r24
    4c06:	27 70       	andi	r18, 0x07	; 7
    4c08:	81 e0       	ldi	r24, 0x01	; 1
    4c0a:	90 e0       	ldi	r25, 0x00	; 0
    4c0c:	01 c0       	rjmp	.+2      	; 0x4c10 <chip_select+0x1e>
    4c0e:	88 0f       	add	r24, r24
    4c10:	2a 95       	dec	r18
    4c12:	ea f7       	brpl	.-6      	; 0x4c0e <chip_select+0x1c>
    4c14:	98 2f       	mov	r25, r24
    4c16:	90 95       	com	r25
    4c18:	93 23       	and	r25, r19
    4c1a:	92 a3       	std	Z+34, r25	; 0x22
    4c1c:	91 a1       	ldd	r25, Z+33	; 0x21
    4c1e:	89 2b       	or	r24, r25
    4c20:	81 a3       	std	Z+33, r24	; 0x21
    4c22:	08 95       	ret

00004c24 <chip_deselect>:
    4c24:	e8 2f       	mov	r30, r24
    4c26:	e6 95       	lsr	r30
    4c28:	e6 95       	lsr	r30
    4c2a:	e6 95       	lsr	r30
    4c2c:	93 e0       	ldi	r25, 0x03	; 3
    4c2e:	e9 9f       	mul	r30, r25
    4c30:	f0 01       	movw	r30, r0
    4c32:	11 24       	eor	r1, r1
    4c34:	32 a1       	ldd	r19, Z+34	; 0x22
    4c36:	28 2f       	mov	r18, r24
    4c38:	27 70       	andi	r18, 0x07	; 7
    4c3a:	81 e0       	ldi	r24, 0x01	; 1
    4c3c:	90 e0       	ldi	r25, 0x00	; 0
    4c3e:	01 c0       	rjmp	.+2      	; 0x4c42 <chip_deselect+0x1e>
    4c40:	88 0f       	add	r24, r24
    4c42:	2a 95       	dec	r18
    4c44:	ea f7       	brpl	.-6      	; 0x4c40 <chip_deselect+0x1c>
    4c46:	93 2f       	mov	r25, r19
    4c48:	98 2b       	or	r25, r24
    4c4a:	92 a3       	std	Z+34, r25	; 0x22
    4c4c:	91 a1       	ldd	r25, Z+33	; 0x21
    4c4e:	89 2b       	or	r24, r25
    4c50:	81 a3       	std	Z+33, r24	; 0x21
    4c52:	08 95       	ret

00004c54 <chip_select_init>:
    4c54:	e7 cf       	rjmp	.-50     	; 0x4c24 <chip_deselect>
    4c56:	08 95       	ret

00004c58 <spi_end>:
    4c58:	cf 93       	push	r28
    4c5a:	ad b7       	in	r26, 0x3d	; 61
    4c5c:	be b7       	in	r27, 0x3e	; 62
    4c5e:	17 97       	sbiw	r26, 0x07	; 7
    4c60:	0f b6       	in	r0, 0x3f	; 63
    4c62:	f8 94       	cli
    4c64:	be bf       	out	0x3e, r27	; 62
    4c66:	0f be       	out	0x3f, r0	; 63
    4c68:	ad bf       	out	0x3d, r26	; 61
    4c6a:	c8 2f       	mov	r28, r24
    4c6c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4c70:	8c 17       	cp	r24, r28
    4c72:	99 f0       	breq	.+38     	; 0x4c9a <spi_end+0x42>
    4c74:	8f 3f       	cpi	r24, 0xFF	; 255
    4c76:	89 f0       	breq	.+34     	; 0x4c9a <spi_end+0x42>
    4c78:	2c 2f       	mov	r18, r28
    4c7a:	30 e0       	ldi	r19, 0x00	; 0
    4c7c:	ed b7       	in	r30, 0x3d	; 61
    4c7e:	fe b7       	in	r31, 0x3e	; 62
    4c80:	37 83       	std	Z+7, r19	; 0x07
    4c82:	26 83       	std	Z+6, r18	; 0x06
    4c84:	90 e0       	ldi	r25, 0x00	; 0
    4c86:	95 83       	std	Z+5, r25	; 0x05
    4c88:	84 83       	std	Z+4, r24	; 0x04
    4c8a:	82 ec       	ldi	r24, 0xC2	; 194
    4c8c:	91 e0       	ldi	r25, 0x01	; 1
    4c8e:	a0 e0       	ldi	r26, 0x00	; 0
    4c90:	81 83       	std	Z+1, r24	; 0x01
    4c92:	92 83       	std	Z+2, r25	; 0x02
    4c94:	a3 83       	std	Z+3, r26	; 0x03
    4c96:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    4c9a:	8c 2f       	mov	r24, r28
    4c9c:	c3 df       	rcall	.-122    	; 0x4c24 <chip_deselect>
    4c9e:	8f ef       	ldi	r24, 0xFF	; 255
    4ca0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    4ca4:	ad b7       	in	r26, 0x3d	; 61
    4ca6:	be b7       	in	r27, 0x3e	; 62
    4ca8:	17 96       	adiw	r26, 0x07	; 7
    4caa:	0f b6       	in	r0, 0x3f	; 63
    4cac:	f8 94       	cli
    4cae:	be bf       	out	0x3e, r27	; 62
    4cb0:	0f be       	out	0x3f, r0	; 63
    4cb2:	ad bf       	out	0x3d, r26	; 61
    4cb4:	cf 91       	pop	r28
    4cb6:	08 95       	ret

00004cb8 <spi_TX_buffer>:
    4cb8:	03 c5       	rjmp	.+2566   	; 0x56c0 <SPI0_TX>
    4cba:	08 95       	ret

00004cbc <spi_RX_buffer>:
    4cbc:	2b c5       	rjmp	.+2646   	; 0x5714 <SPI0_RX>
    4cbe:	08 95       	ret

00004cc0 <spi_TX>:

/// @brief SPI write 1 byte
/// @param[in] data: value to transmit
/// @return  void
void spi_TX(uint8_t data)
{
    4cc0:	a1 e0       	ldi	r26, 0x01	; 1
    4cc2:	b0 e0       	ldi	r27, 0x00	; 0
    4cc4:	e6 e6       	ldi	r30, 0x66	; 102
    4cc6:	f6 e2       	ldi	r31, 0x26	; 38
    4cc8:	0c 94 a3 e7 	jmp	0x1cf46	; 0x1cf46 <__prologue_saves__+0x20>
    4ccc:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TX(&data,1);
#endif
#ifdef AVR
    SPI0_TX(&data,1);
    4cce:	61 e0       	ldi	r22, 0x01	; 1
    4cd0:	70 e0       	ldi	r23, 0x00	; 0
    4cd2:	ce 01       	movw	r24, r28
    4cd4:	01 96       	adiw	r24, 0x01	; 1
    4cd6:	f4 d4       	rcall	.+2536   	; 0x56c0 <SPI0_TX>
#endif
}
    4cd8:	21 96       	adiw	r28, 0x01	; 1
    4cda:	e2 e0       	ldi	r30, 0x02	; 2
    4cdc:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00004ce0 <spi_init>:
 @return void
*/
uint8_t _cs_pin = 0xff;
uint32_t _spi_clock = -1L;
void spi_init(uint32_t clock, int pin)
{
    4ce0:	cf 92       	push	r12
    4ce2:	df 92       	push	r13
    4ce4:	ef 92       	push	r14
    4ce6:	ff 92       	push	r15
    4ce8:	6b 01       	movw	r12, r22
    4cea:	7c 01       	movw	r14, r24
    4cec:	84 2f       	mov	r24, r20
    spi_waitReady();
    chip_deselect(pin);
    4cee:	9a df       	rcall	.-204    	; 0x4c24 <chip_deselect>
    _cs_pin = 0xff;
    4cf0:	8f ef       	ldi	r24, 0xFF	; 255
    4cf2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>

#ifdef AVR
    SPI0_Init(clock);                             // Initialize the SPI bus - does nothing if clock unchanged
    4cf6:	c7 01       	movw	r24, r14
    4cf8:	b6 01       	movw	r22, r12
    4cfa:	b5 d4       	rcall	.+2410   	; 0x5666 <SPI0_Init>
    SPI0_Mode(0);                                 // Set the clocking mode, etc
    4cfc:	80 e0       	ldi	r24, 0x00	; 0
    4cfe:	90 e0       	ldi	r25, 0x00	; 0
#endif
#ifdef ESP8266
    hspi_init(clock,0);                           // Initialize the SPI bus - does nothing if clock unchanged
#endif
    spi_TX(0xff);
    4d00:	72 d4       	rcall	.+2276   	; 0x55e6 <SPI0_Mode>
    4d02:	8f ef       	ldi	r24, 0xFF	; 255
    4d04:	dd df       	rcall	.-70     	; 0x4cc0 <spi_TX>
    _spi_clock = clock;
    4d06:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    4d0a:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    4d0e:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    4d12:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
// waits for any prior transactions to complete before updating
    spi_waitReady();
}
    4d16:	ff 90       	pop	r15
    4d18:	ef 90       	pop	r14
    4d1a:	df 90       	pop	r13
    4d1c:	cf 90       	pop	r12
    4d1e:	08 95       	ret

00004d20 <spi_begin>:
 @param[in] clock: SPI clock rate
 @param[in] pin: GPIO CS pin
 @return void
*/
void spi_begin(uint32_t clock, int pin)
{
    4d20:	cf 92       	push	r12
    4d22:	df 92       	push	r13
    4d24:	ef 92       	push	r14
    4d26:	ff 92       	push	r15
    4d28:	cf 93       	push	r28
    4d2a:	df 93       	push	r29
    4d2c:	ad b7       	in	r26, 0x3d	; 61
    4d2e:	be b7       	in	r27, 0x3e	; 62
    4d30:	17 97       	sbiw	r26, 0x07	; 7
    4d32:	0f b6       	in	r0, 0x3f	; 63
    4d34:	f8 94       	cli
    4d36:	be bf       	out	0x3e, r27	; 62
    4d38:	0f be       	out	0x3f, r0	; 63
    4d3a:	ad bf       	out	0x3d, r26	; 61
    4d3c:	6b 01       	movw	r12, r22
    4d3e:	7c 01       	movw	r14, r24
    4d40:	ea 01       	movw	r28, r20
// FIXME allow nesting by using an array of clock values for each pin

//@brief if there is a prior chip select in progress flag an error
    if(_cs_pin != 0xff)
    4d42:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4d46:	8f 3f       	cpi	r24, 0xFF	; 255
    4d48:	79 f0       	breq	.+30     	; 0x4d68 <spi_begin+0x48>
    {
// This implies a bug!
        printf("cs_enable was: %d, want: %d\n", 0xff & _cs_pin, pin);
    4d4a:	ed b7       	in	r30, 0x3d	; 61
    4d4c:	fe b7       	in	r31, 0x3e	; 62
    4d4e:	46 83       	std	Z+6, r20	; 0x06
    4d50:	d7 83       	std	Z+7, r29	; 0x07
    4d52:	90 e0       	ldi	r25, 0x00	; 0
    4d54:	95 83       	std	Z+5, r25	; 0x05
    4d56:	84 83       	std	Z+4, r24	; 0x04
    4d58:	80 ee       	ldi	r24, 0xE0	; 224
    4d5a:	91 e0       	ldi	r25, 0x01	; 1
    4d5c:	a0 e0       	ldi	r26, 0x00	; 0
    4d5e:	81 83       	std	Z+1, r24	; 0x01
    4d60:	92 83       	std	Z+2, r25	; 0x02
    4d62:	a3 83       	std	Z+3, r26	; 0x03
    4d64:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
// waits for any prior transactions to complete before updating
    spi_waitReady();

///@brief initialize pin in case it has not been done yet
///@ we cache the clock frequency seeting for multiple device support
    if(_spi_clock != clock)
    4d68:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    4d6c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    4d70:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    4d74:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    4d78:	8c 15       	cp	r24, r12
    4d7a:	9d 05       	cpc	r25, r13
    4d7c:	ae 05       	cpc	r26, r14
    4d7e:	bf 05       	cpc	r27, r15
    4d80:	21 f0       	breq	.+8      	; 0x4d8a <spi_begin+0x6a>
    {
        spi_init(clock,pin);
    4d82:	ae 01       	movw	r20, r28
    4d84:	c7 01       	movw	r24, r14
    4d86:	b6 01       	movw	r22, r12
    4d88:	ab df       	rcall	.-170    	; 0x4ce0 <spi_init>
    }

    chip_select(pin);
    4d8a:	8c 2f       	mov	r24, r28
    4d8c:	32 df       	rcall	.-412    	; 0x4bf2 <chip_select>
    _cs_pin = pin;
    4d8e:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
}
    4d92:	ad b7       	in	r26, 0x3d	; 61
    4d94:	be b7       	in	r27, 0x3e	; 62
    4d96:	17 96       	adiw	r26, 0x07	; 7
    4d98:	0f b6       	in	r0, 0x3f	; 63
    4d9a:	f8 94       	cli
    4d9c:	be bf       	out	0x3e, r27	; 62
    4d9e:	0f be       	out	0x3f, r0	; 63
    4da0:	ad bf       	out	0x3d, r26	; 61
    4da2:	df 91       	pop	r29
    4da4:	cf 91       	pop	r28
    4da6:	ff 90       	pop	r15
    4da8:	ef 90       	pop	r14
    4daa:	df 90       	pop	r13
    4dac:	cf 90       	pop	r12
    4dae:	08 95       	ret

00004db0 <spi_TXRX>:

/// @brief SPI read and write 1 byte
/// @param[in] data: value to transmit
/// @return  uint8_t value read
uint8_t spi_TXRX(uint8_t data)
{
    4db0:	a1 e0       	ldi	r26, 0x01	; 1
    4db2:	b0 e0       	ldi	r27, 0x00	; 0
    4db4:	ee ed       	ldi	r30, 0xDE	; 222
    4db6:	f6 e2       	ldi	r31, 0x26	; 38
    4db8:	0c 94 a3 e7 	jmp	0x1cf46	; 0x1cf46 <__prologue_saves__+0x20>
    4dbc:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TXRX(&data,1);
#endif
#ifdef AVR
    SPI0_TXRX(&data,1);
    4dbe:	61 e0       	ldi	r22, 0x01	; 1
    4dc0:	70 e0       	ldi	r23, 0x00	; 0
    4dc2:	ce 01       	movw	r24, r28
    4dc4:	01 96       	adiw	r24, 0x01	; 1
    4dc6:	90 d4       	rcall	.+2336   	; 0x56e8 <SPI0_TXRX>
#endif
    return(data);
}
    4dc8:	89 81       	ldd	r24, Y+1	; 0x01
    4dca:	21 96       	adiw	r28, 0x01	; 1
    4dcc:	e2 e0       	ldi	r30, 0x02	; 2
    4dce:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00004dd2 <set_error>:
static uint8_t error_flag = 0;
/// @brief Set error condition
/// @return  void
void set_error(uint8_t error)
{
	error_flag = error;
    4dd2:	80 93 44 17 	sts	0x1744, r24	; 0x801744 <__data_end>
    GPIO_PIN_HI(LED2);
    4dd6:	2c 9a       	sbi	0x05, 4	; 5
    4dd8:	24 9a       	sbi	0x04, 4	; 4
    4dda:	08 95       	ret

00004ddc <clear_error>:

/// @brief Set error condition
/// @return  void
void clear_error()
{
	error_flag = 0;
    4ddc:	10 92 44 17 	sts	0x1744, r1	; 0x801744 <__data_end>
    GPIO_PIN_LOW(LED2);
    4de0:	2c 98       	cbi	0x05, 4	; 5
    4de2:	24 9a       	sbi	0x04, 4	; 4
    4de4:	08 95       	ret

00004de6 <heaptop>:
/// - avr-libc dependent code.
///
/// @return top of heap
/// @see malloc().
size_t heaptop()
{
    4de6:	a4 e0       	ldi	r26, 0x04	; 4
    4de8:	b0 e0       	ldi	r27, 0x00	; 0
    4dea:	e9 ef       	ldi	r30, 0xF9	; 249
    4dec:	f6 e2       	ldi	r31, 0x26	; 38
    4dee:	0c 94 a3 e7 	jmp	0x1cf46	; 0x1cf46 <__prologue_saves__+0x20>
	volatile size_t heap_end;

	// I looked at the malloc source code to figure these all out
	// if malloc_heap_end and breakval are 0 then we use the stack bootom plus a margin

	if( (size_t) __malloc_heap_end )
    4df2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    4df6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    4dfa:	00 97       	sbiw	r24, 0x00	; 0
    4dfc:	91 f4       	brne	.+36     	; 0x4e22 <heaptop+0x3c>
		heap_end = (size_t) __malloc_heap_end;
	else if(__brkval)
    4dfe:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <__brkval>
    4e02:	90 91 23 20 	lds	r25, 0x2023	; 0x802023 <__brkval+0x1>
    4e06:	00 97       	sbiw	r24, 0x00	; 0
    4e08:	61 f4       	brne	.+24     	; 0x4e22 <heaptop+0x3c>
        heap_end = (size_t) __brkval;
    else
        heap_end = (size_t) SP - (size_t) __malloc_margin;
    4e0a:	8d b7       	in	r24, 0x3d	; 61
    4e0c:	9e b7       	in	r25, 0x3e	; 62
    4e0e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_margin>
    4e12:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_margin+0x1>
    4e16:	82 1b       	sub	r24, r18
    4e18:	93 0b       	sbc	r25, r19
    4e1a:	9a 83       	std	Y+2, r25	; 0x02
    4e1c:	89 83       	std	Y+1, r24	; 0x01

	return(heap_end);
    4e1e:	89 81       	ldd	r24, Y+1	; 0x01
    4e20:	9a 81       	ldd	r25, Y+2	; 0x02
    4e22:	9c 83       	std	Y+4, r25	; 0x04
    4e24:	8b 83       	std	Y+3, r24	; 0x03
    4e26:	8b 81       	ldd	r24, Y+3	; 0x03
    4e28:	9c 81       	ldd	r25, Y+4	; 0x04

}
    4e2a:	24 96       	adiw	r28, 0x04	; 4
    4e2c:	e2 e0       	ldi	r30, 0x02	; 2
    4e2e:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00004e32 <freeRam>:
size_t freeRam ()
{
    size_t total;
	size_t heap_end;

	heap_end = heaptop();
    4e32:	d9 df       	rcall	.-78     	; 0x4de6 <heaptop>

	total = (unsigned long) SP - (unsigned long) heap_end;
    4e34:	2d b7       	in	r18, 0x3d	; 61
    4e36:	3e b7       	in	r19, 0x3e	; 62

    return ( total );
}
    4e38:	a9 01       	movw	r20, r18
    4e3a:	48 1b       	sub	r20, r24
    4e3c:	59 0b       	sbc	r21, r25
    4e3e:	ca 01       	movw	r24, r20
    4e40:	08 95       	ret

00004e42 <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    4e42:	0f 93       	push	r16
    4e44:	1f 93       	push	r17
    4e46:	cf 93       	push	r28
    4e48:	df 93       	push	r29
    4e4a:	ad b7       	in	r26, 0x3d	; 61
    4e4c:	be b7       	in	r27, 0x3e	; 62
    4e4e:	17 97       	sbiw	r26, 0x07	; 7
    4e50:	0f b6       	in	r0, 0x3f	; 63
    4e52:	f8 94       	cli
    4e54:	be bf       	out	0x3e, r27	; 62
    4e56:	0f be       	out	0x3f, r0	; 63
    4e58:	ad bf       	out	0x3d, r26	; 61
	size_t ram;
    size_t heap_end;

	// I looked at the malloc source code to figure these all out

    ram = freeRam();
    4e5a:	eb df       	rcall	.-42     	; 0x4e32 <freeRam>
    4e5c:	ec 01       	movw	r28, r24
	heap_end = heaptop();
    4e5e:	c3 df       	rcall	.-122    	; 0x4de6 <heaptop>
    4e60:	8c 01       	movw	r16, r24
    4e62:	ed b7       	in	r30, 0x3d	; 61

#ifdef AVR
    printf("Free Ram:        %5u\n", (unsigned int) ram);
    4e64:	fe b7       	in	r31, 0x3e	; 62
    4e66:	d5 83       	std	Z+5, r29	; 0x05
    4e68:	c4 83       	std	Z+4, r28	; 0x04
    4e6a:	81 ef       	ldi	r24, 0xF1	; 241
    4e6c:	92 e0       	ldi	r25, 0x02	; 2
    4e6e:	a0 e0       	ldi	r26, 0x00	; 0
    4e70:	81 83       	std	Z+1, r24	; 0x01
    4e72:	92 83       	std	Z+2, r25	; 0x02
    4e74:	a3 83       	std	Z+3, r26	; 0x03
    4e76:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    4e7a:	8d b7       	in	r24, 0x3d	; 61

    printf("  Stack Top:     %5u, End: %5u\n", (unsigned int*) &__stack, (unsigned int) SP);
    4e7c:	9e b7       	in	r25, 0x3e	; 62
    4e7e:	ed b7       	in	r30, 0x3d	; 61
    4e80:	fe b7       	in	r31, 0x3e	; 62
    4e82:	97 83       	std	Z+7, r25	; 0x07
    4e84:	86 83       	std	Z+6, r24	; 0x06
    4e86:	cf ef       	ldi	r28, 0xFF	; 255
    4e88:	d0 e4       	ldi	r29, 0x40	; 64
    4e8a:	d5 83       	std	Z+5, r29	; 0x05
    4e8c:	c4 83       	std	Z+4, r28	; 0x04
    4e8e:	81 ed       	ldi	r24, 0xD1	; 209
    4e90:	92 e0       	ldi	r25, 0x02	; 2
    4e92:	a0 e0       	ldi	r26, 0x00	; 0
    4e94:	81 83       	std	Z+1, r24	; 0x01
    4e96:	92 83       	std	Z+2, r25	; 0x02
    4e98:	a3 83       	std	Z+3, r26	; 0x03
    4e9a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    4e9e:	8d b7       	in	r24, 0x3d	; 61
    printf("  Stack Used:    %5u\n", (unsigned int*) &__stack - (unsigned int*) SP);
    4ea0:	9e b7       	in	r25, 0x3e	; 62
    4ea2:	c8 1b       	sub	r28, r24
    4ea4:	d9 0b       	sbc	r29, r25
    4ea6:	d5 95       	asr	r29
    4ea8:	c7 95       	ror	r28
    4eaa:	ed b7       	in	r30, 0x3d	; 61
    4eac:	fe b7       	in	r31, 0x3e	; 62
    4eae:	d5 83       	std	Z+5, r29	; 0x05
    4eb0:	c4 83       	std	Z+4, r28	; 0x04
    4eb2:	8b eb       	ldi	r24, 0xBB	; 187
    4eb4:	92 e0       	ldi	r25, 0x02	; 2
    4eb6:	a0 e0       	ldi	r26, 0x00	; 0
    4eb8:	81 83       	std	Z+1, r24	; 0x01
    4eba:	92 83       	std	Z+2, r25	; 0x02
    4ebc:	a3 83       	std	Z+3, r26	; 0x03
    4ebe:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    4ec2:	ed b7       	in	r30, 0x3d	; 61

	printf("  Heap  Start:   %5u, End: %5u\n",
    4ec4:	fe b7       	in	r31, 0x3e	; 62
    4ec6:	17 83       	std	Z+7, r17	; 0x07
    4ec8:	06 83       	std	Z+6, r16	; 0x06
    4eca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    4ece:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4ed2:	95 83       	std	Z+5, r25	; 0x05
    4ed4:	84 83       	std	Z+4, r24	; 0x04
    4ed6:	8b e9       	ldi	r24, 0x9B	; 155
    4ed8:	92 e0       	ldi	r25, 0x02	; 2
    4eda:	a0 e0       	ldi	r26, 0x00	; 0
    4edc:	81 83       	std	Z+1, r24	; 0x01
    4ede:	92 83       	std	Z+2, r25	; 0x02
    4ee0:	a3 83       	std	Z+3, r26	; 0x03
    4ee2:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    4ee6:	86 e2       	ldi	r24, 0x26	; 38
		(unsigned int) __malloc_heap_start, (unsigned int)heap_end);

    printf("  BSS   Start:   %5u, End: %5u\n",
    4ee8:	90 e2       	ldi	r25, 0x20	; 32
    4eea:	ed b7       	in	r30, 0x3d	; 61
    4eec:	fe b7       	in	r31, 0x3e	; 62
    4eee:	97 83       	std	Z+7, r25	; 0x07
    4ef0:	86 83       	std	Z+6, r24	; 0x06
    4ef2:	84 e4       	ldi	r24, 0x44	; 68
    4ef4:	97 e1       	ldi	r25, 0x17	; 23
    4ef6:	95 83       	std	Z+5, r25	; 0x05
    4ef8:	84 83       	std	Z+4, r24	; 0x04
    4efa:	8b e7       	ldi	r24, 0x7B	; 123
    4efc:	92 e0       	ldi	r25, 0x02	; 2
    4efe:	a0 e0       	ldi	r26, 0x00	; 0
    4f00:	81 83       	std	Z+1, r24	; 0x01
    4f02:	92 83       	std	Z+2, r25	; 0x02
    4f04:	a3 83       	std	Z+3, r26	; 0x03
    4f06:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    4f0a:	84 e4       	ldi	r24, 0x44	; 68
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  Start:   %5u, End: %5u\n",
    4f0c:	97 e1       	ldi	r25, 0x17	; 23
    4f0e:	ed b7       	in	r30, 0x3d	; 61
    4f10:	fe b7       	in	r31, 0x3e	; 62
    4f12:	97 83       	std	Z+7, r25	; 0x07
    4f14:	86 83       	std	Z+6, r24	; 0x06
    4f16:	80 e0       	ldi	r24, 0x00	; 0
    4f18:	91 e0       	ldi	r25, 0x01	; 1
    4f1a:	95 83       	std	Z+5, r25	; 0x05
    4f1c:	84 83       	std	Z+4, r24	; 0x04
    4f1e:	8b e5       	ldi	r24, 0x5B	; 91
    4f20:	92 e0       	ldi	r25, 0x02	; 2
    4f22:	a0 e0       	ldi	r26, 0x00	; 0
    4f24:	81 83       	std	Z+1, r24	; 0x01
    4f26:	92 83       	std	Z+2, r25	; 0x02
    4f28:	a3 83       	std	Z+3, r26	; 0x03
    4f2a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    4f2e:	cd b7       	in	r28, 0x3d	; 61

    printf("  Data  Start:   %8lu, End: %8lu\n",
        (unsigned int)&__data_start, (unsigned int)&__data_end);
#endif

}
    4f30:	de b7       	in	r29, 0x3e	; 62
    4f32:	27 96       	adiw	r28, 0x07	; 7
    4f34:	e4 e0       	ldi	r30, 0x04	; 4
    4f36:	0c 94 bd e7 	jmp	0x1cf7a	; 0x1cf7a <__epilogue_restores__+0x1c>

00004f3a <safecalloc>:
    4f3a:	ef 92       	push	r14
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    4f3c:	ff 92       	push	r15
    4f3e:	0f 93       	push	r16
    4f40:	1f 93       	push	r17
    4f42:	cf 93       	push	r28
    4f44:	df 93       	push	r29
    4f46:	ad b7       	in	r26, 0x3d	; 61
    4f48:	be b7       	in	r27, 0x3e	; 62
    4f4a:	17 97       	sbiw	r26, 0x07	; 7
    4f4c:	0f b6       	in	r0, 0x3f	; 63
    4f4e:	f8 94       	cli
    4f50:	be bf       	out	0x3e, r27	; 62
    4f52:	0f be       	out	0x3f, r0	; 63
    4f54:	ad bf       	out	0x3d, r26	; 61
    4f56:	8c 01       	movw	r16, r24
    4f58:	7b 01       	movw	r14, r22
    void *p = calloc(size, elements);
    4f5a:	0e 94 50 ea 	call	0x1d4a0	; 0x1d4a0 <calloc>
    4f5e:	ec 01       	movw	r28, r24
    if(!p)
    4f60:	89 2b       	or	r24, r25
    4f62:	71 f4       	brne	.+28     	; 0x4f80 <safecalloc+0x46>
    {
        printf("safecalloc(%d,%d) failed!\n", size, elements);
    4f64:	ed b7       	in	r30, 0x3d	; 61
    4f66:	fe b7       	in	r31, 0x3e	; 62
    4f68:	f7 82       	std	Z+7, r15	; 0x07
    4f6a:	e6 82       	std	Z+6, r14	; 0x06
    4f6c:	15 83       	std	Z+5, r17	; 0x05
    4f6e:	04 83       	std	Z+4, r16	; 0x04
    4f70:	80 e4       	ldi	r24, 0x40	; 64
    4f72:	92 e0       	ldi	r25, 0x02	; 2
    4f74:	a0 e0       	ldi	r26, 0x00	; 0
    4f76:	81 83       	std	Z+1, r24	; 0x01
    4f78:	92 83       	std	Z+2, r25	; 0x02
    4f7a:	a3 83       	std	Z+3, r26	; 0x03
    4f7c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    }
    return(p);
}
    4f80:	ce 01       	movw	r24, r28
    4f82:	cd b7       	in	r28, 0x3d	; 61
    4f84:	de b7       	in	r29, 0x3e	; 62
    4f86:	27 96       	adiw	r28, 0x07	; 7
    4f88:	e6 e0       	ldi	r30, 0x06	; 6
    4f8a:	0c 94 bb e7 	jmp	0x1cf76	; 0x1cf76 <__epilogue_restores__+0x18>

00004f8e <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    4f8e:	0f 93       	push	r16
    4f90:	1f 93       	push	r17
    4f92:	cf 93       	push	r28
    4f94:	df 93       	push	r29
    4f96:	00 d0       	rcall	.+0      	; 0x4f98 <safemalloc+0xa>
    4f98:	00 d0       	rcall	.+0      	; 0x4f9a <safemalloc+0xc>
    4f9a:	1f 92       	push	r1
    4f9c:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    4f9e:	61 e0       	ldi	r22, 0x01	; 1
    4fa0:	70 e0       	ldi	r23, 0x00	; 0
    4fa2:	0e 94 50 ea 	call	0x1d4a0	; 0x1d4a0 <calloc>
    4fa6:	ec 01       	movw	r28, r24
    if(!p)
    4fa8:	89 2b       	or	r24, r25
    4faa:	61 f4       	brne	.+24     	; 0x4fc4 <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", (int) size);
    4fac:	ed b7       	in	r30, 0x3d	; 61
    4fae:	fe b7       	in	r31, 0x3e	; 62
    4fb0:	15 83       	std	Z+5, r17	; 0x05
    4fb2:	04 83       	std	Z+4, r16	; 0x04
    4fb4:	88 e2       	ldi	r24, 0x28	; 40
    4fb6:	92 e0       	ldi	r25, 0x02	; 2
    4fb8:	a0 e0       	ldi	r26, 0x00	; 0
    4fba:	81 83       	std	Z+1, r24	; 0x01
    4fbc:	92 83       	std	Z+2, r25	; 0x02
    4fbe:	a3 83       	std	Z+3, r26	; 0x03
    4fc0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    }
    return(p);
}
    4fc4:	ce 01       	movw	r24, r28
    4fc6:	cd b7       	in	r28, 0x3d	; 61
    4fc8:	de b7       	in	r29, 0x3e	; 62
    4fca:	25 96       	adiw	r28, 0x05	; 5
    4fcc:	e4 e0       	ldi	r30, 0x04	; 4
    4fce:	0c 94 bd e7 	jmp	0x1cf7a	; 0x1cf7a <__epilogue_restores__+0x1c>

00004fd2 <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    4fd2:	cf 93       	push	r28
    4fd4:	df 93       	push	r29
    4fd6:	ad b7       	in	r26, 0x3d	; 61
    4fd8:	be b7       	in	r27, 0x3e	; 62
    4fda:	17 97       	sbiw	r26, 0x07	; 7
    4fdc:	0f b6       	in	r0, 0x3f	; 63
    4fde:	f8 94       	cli
    4fe0:	be bf       	out	0x3e, r27	; 62
    4fe2:	0f be       	out	0x3f, r0	; 63
    4fe4:	ad bf       	out	0x3d, r26	; 61
    size_t heap_end;

    if(p == NULL)
    4fe6:	00 97       	sbiw	r24, 0x00	; 0
    4fe8:	f9 f0       	breq	.+62     	; 0x5028 <safefree+0x56>
    4fea:	ec 01       	movw	r28, r24
        return;

	heap_end = heaptop();
    4fec:	fc de       	rcall	.-520    	; 0x4de6 <heaptop>

    if( ((size_t) p >= (size_t) __malloc_heap_start) && ((size_t) p <= heap_end) )
    4fee:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4ff2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4ff6:	c2 17       	cp	r28, r18
    4ff8:	d3 07       	cpc	r29, r19
    4ffa:	38 f0       	brcs	.+14     	; 0x500a <safefree+0x38>
    4ffc:	8c 17       	cp	r24, r28
    4ffe:	9d 07       	cpc	r25, r29
    5000:	20 f0       	brcs	.+8      	; 0x500a <safefree+0x38>
    {
        free(p);
    5002:	ce 01       	movw	r24, r28
    5004:	0e 94 02 eb 	call	0x1d604	; 0x1d604 <free>
        return;
    5008:	0f c0       	rjmp	.+30     	; 0x5028 <safefree+0x56>
    }
    printf("safefree: FREE ERROR start(%lu), end(%lu)\n", (size_t) p, (size_t) heap_end);
    500a:	ed b7       	in	r30, 0x3d	; 61
    500c:	fe b7       	in	r31, 0x3e	; 62
    500e:	97 83       	std	Z+7, r25	; 0x07
    5010:	86 83       	std	Z+6, r24	; 0x06
    5012:	d5 83       	std	Z+5, r29	; 0x05
    5014:	c4 83       	std	Z+4, r28	; 0x04
    5016:	8d ef       	ldi	r24, 0xFD	; 253
    5018:	91 e0       	ldi	r25, 0x01	; 1
    501a:	a0 e0       	ldi	r26, 0x00	; 0
    501c:	81 83       	std	Z+1, r24	; 0x01
    501e:	92 83       	std	Z+2, r25	; 0x02
    5020:	a3 83       	std	Z+3, r26	; 0x03
    5022:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    PrintFree();
    5026:	0d df       	rcall	.-486    	; 0x4e42 <PrintFree>
}
    5028:	cd b7       	in	r28, 0x3d	; 61
    502a:	de b7       	in	r29, 0x3e	; 62
    502c:	27 96       	adiw	r28, 0x07	; 7
    502e:	e2 e0       	ldi	r30, 0x02	; 2
    5030:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00005034 <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    5034:	64 36       	cpi	r22, 0x64	; 100
    5036:	71 05       	cpc	r23, r1
    5038:	81 05       	cpc	r24, r1
    503a:	91 05       	cpc	r25, r1
    503c:	58 f0       	brcs	.+22     	; 0x5054 <delayus+0x20>
    {
        us -= 100U;
    503e:	64 56       	subi	r22, 0x64	; 100
    5040:	71 09       	sbc	r23, r1
    5042:	81 09       	sbc	r24, r1
    5044:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    5046:	e3 ef       	ldi	r30, 0xF3	; 243
    5048:	f1 e0       	ldi	r31, 0x01	; 1
    504a:	31 97       	sbiw	r30, 0x01	; 1
    504c:	f1 f7       	brne	.-4      	; 0x504a <delayus+0x16>
    504e:	00 c0       	rjmp	.+0      	; 0x5050 <delayus+0x1c>
    5050:	00 00       	nop
    5052:	f0 cf       	rjmp	.-32     	; 0x5034 <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    5054:	6a 30       	cpi	r22, 0x0A	; 10
    5056:	71 05       	cpc	r23, r1
    5058:	81 05       	cpc	r24, r1
    505a:	91 05       	cpc	r25, r1
    505c:	48 f0       	brcs	.+18     	; 0x5070 <delayus+0x3c>
    {
        us -= 10U;
    505e:	6a 50       	subi	r22, 0x0A	; 10
    5060:	71 09       	sbc	r23, r1
    5062:	81 09       	sbc	r24, r1
    5064:	91 09       	sbc	r25, r1
    5066:	f2 e4       	ldi	r31, 0x42	; 66
    5068:	fa 95       	dec	r31
    506a:	f1 f7       	brne	.-4      	; 0x5068 <delayus+0x34>
    506c:	00 c0       	rjmp	.+0      	; 0x506e <delayus+0x3a>
    506e:	f2 cf       	rjmp	.-28     	; 0x5054 <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    5070:	61 15       	cp	r22, r1
    5072:	71 05       	cpc	r23, r1
    5074:	81 05       	cpc	r24, r1
    5076:	91 05       	cpc	r25, r1
    5078:	49 f0       	breq	.+18     	; 0x508c <delayus+0x58>
    {
        --us;
    507a:	61 50       	subi	r22, 0x01	; 1
    507c:	71 09       	sbc	r23, r1
    507e:	81 09       	sbc	r24, r1
    5080:	91 09       	sbc	r25, r1
    5082:	26 e0       	ldi	r18, 0x06	; 6
    5084:	2a 95       	dec	r18
    5086:	f1 f7       	brne	.-4      	; 0x5084 <delayus+0x50>
    5088:	00 c0       	rjmp	.+0      	; 0x508a <delayus+0x56>
    508a:	f2 cf       	rjmp	.-28     	; 0x5070 <delayus+0x3c>
        _delay_us(1);
    }
}
    508c:	08 95       	ret

0000508e <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    508e:	61 15       	cp	r22, r1
    5090:	71 05       	cpc	r23, r1
    5092:	81 05       	cpc	r24, r1
    5094:	91 05       	cpc	r25, r1
    5096:	09 f4       	brne	.+2      	; 0x509a <delayms+0xc>
    5098:	41 c0       	rjmp	.+130    	; 0x511c <delayms+0x8e>
    509a:	e3 ef       	ldi	r30, 0xF3	; 243
    509c:	f1 e0       	ldi	r31, 0x01	; 1
    509e:	31 97       	sbiw	r30, 0x01	; 1
    50a0:	f1 f7       	brne	.-4      	; 0x509e <delayms+0x10>
    50a2:	00 c0       	rjmp	.+0      	; 0x50a4 <delayms+0x16>
    50a4:	00 00       	nop
    50a6:	e3 ef       	ldi	r30, 0xF3	; 243
    50a8:	f1 e0       	ldi	r31, 0x01	; 1
    50aa:	31 97       	sbiw	r30, 0x01	; 1
    50ac:	f1 f7       	brne	.-4      	; 0x50aa <delayms+0x1c>
    50ae:	00 c0       	rjmp	.+0      	; 0x50b0 <delayms+0x22>
    50b0:	00 00       	nop
    50b2:	e3 ef       	ldi	r30, 0xF3	; 243
    50b4:	f1 e0       	ldi	r31, 0x01	; 1
    50b6:	31 97       	sbiw	r30, 0x01	; 1
    50b8:	f1 f7       	brne	.-4      	; 0x50b6 <delayms+0x28>
    50ba:	00 c0       	rjmp	.+0      	; 0x50bc <delayms+0x2e>
    50bc:	00 00       	nop
    50be:	e3 ef       	ldi	r30, 0xF3	; 243
    50c0:	f1 e0       	ldi	r31, 0x01	; 1
    50c2:	31 97       	sbiw	r30, 0x01	; 1
    50c4:	f1 f7       	brne	.-4      	; 0x50c2 <delayms+0x34>
    50c6:	00 c0       	rjmp	.+0      	; 0x50c8 <delayms+0x3a>
    50c8:	00 00       	nop
    50ca:	e3 ef       	ldi	r30, 0xF3	; 243
    50cc:	f1 e0       	ldi	r31, 0x01	; 1
    50ce:	31 97       	sbiw	r30, 0x01	; 1
    50d0:	f1 f7       	brne	.-4      	; 0x50ce <delayms+0x40>
    50d2:	00 c0       	rjmp	.+0      	; 0x50d4 <delayms+0x46>
    50d4:	00 00       	nop
    50d6:	e3 ef       	ldi	r30, 0xF3	; 243
    50d8:	f1 e0       	ldi	r31, 0x01	; 1
    50da:	31 97       	sbiw	r30, 0x01	; 1
    50dc:	f1 f7       	brne	.-4      	; 0x50da <delayms+0x4c>
    50de:	00 c0       	rjmp	.+0      	; 0x50e0 <delayms+0x52>
    50e0:	00 00       	nop
    50e2:	e3 ef       	ldi	r30, 0xF3	; 243
    50e4:	f1 e0       	ldi	r31, 0x01	; 1
    50e6:	31 97       	sbiw	r30, 0x01	; 1
    50e8:	f1 f7       	brne	.-4      	; 0x50e6 <delayms+0x58>
    50ea:	00 c0       	rjmp	.+0      	; 0x50ec <delayms+0x5e>
    50ec:	00 00       	nop
    50ee:	e3 ef       	ldi	r30, 0xF3	; 243
    50f0:	f1 e0       	ldi	r31, 0x01	; 1
    50f2:	31 97       	sbiw	r30, 0x01	; 1
    50f4:	f1 f7       	brne	.-4      	; 0x50f2 <delayms+0x64>
    50f6:	00 c0       	rjmp	.+0      	; 0x50f8 <delayms+0x6a>
    50f8:	00 00       	nop
    50fa:	e3 ef       	ldi	r30, 0xF3	; 243
    50fc:	f1 e0       	ldi	r31, 0x01	; 1
    50fe:	31 97       	sbiw	r30, 0x01	; 1
    5100:	f1 f7       	brne	.-4      	; 0x50fe <delayms+0x70>
    5102:	00 c0       	rjmp	.+0      	; 0x5104 <delayms+0x76>
    5104:	00 00       	nop
    5106:	e3 ef       	ldi	r30, 0xF3	; 243
    5108:	f1 e0       	ldi	r31, 0x01	; 1
    510a:	31 97       	sbiw	r30, 0x01	; 1
    510c:	f1 f7       	brne	.-4      	; 0x510a <delayms+0x7c>
    510e:	00 c0       	rjmp	.+0      	; 0x5110 <delayms+0x82>
    5110:	00 00       	nop
    5112:	61 50       	subi	r22, 0x01	; 1
    5114:	71 09       	sbc	r23, r1
    5116:	81 09       	sbc	r24, r1
    5118:	91 09       	sbc	r25, r1
    511a:	b9 cf       	rjmp	.-142    	; 0x508e <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    511c:	08 95       	ret

0000511e <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    511e:	81 11       	cpse	r24, r1
    5120:	0e c0       	rjmp	.+28     	; 0x513e <uart_rx_flush+0x20>
    5122:	f8 94       	cli
    5124:	10 92 e9 19 	sts	0x19E9, r1	; 0x8019e9 <uarts+0x4>
    5128:	10 92 e8 19 	sts	0x19E8, r1	; 0x8019e8 <uarts+0x3>
    512c:	10 92 e5 19 	sts	0x19E5, r1	; 0x8019e5 <uarts>
    5130:	10 92 e6 19 	sts	0x19E6, r1	; 0x8019e6 <uarts+0x1>
    5134:	10 92 e7 19 	sts	0x19E7, r1	; 0x8019e7 <uarts+0x2>
    5138:	10 92 ea 19 	sts	0x19EA, r1	; 0x8019ea <uarts+0x5>
    513c:	78 94       	sei
    513e:	08 95       	ret

00005140 <uart_ubr>:
    5140:	4f 92       	push	r4
    5142:	5f 92       	push	r5
    5144:	6f 92       	push	r6
    5146:	7f 92       	push	r7
    5148:	8f 92       	push	r8
    514a:	9f 92       	push	r9
    514c:	af 92       	push	r10
    514e:	bf 92       	push	r11
    5150:	cf 92       	push	r12
    5152:	df 92       	push	r13
    5154:	ef 92       	push	r14
    5156:	ff 92       	push	r15
    5158:	cf 93       	push	r28
    515a:	df 93       	push	r29
    515c:	5a 01       	movw	r10, r20
    515e:	e9 01       	movw	r28, r18
    5160:	0e 94 ee e8 	call	0x1d1dc	; 0x1d1dc <__floatunsisf>
    5164:	2b 01       	movw	r4, r22
    5166:	3c 01       	movw	r6, r24
    5168:	20 e0       	ldi	r18, 0x00	; 0
    516a:	30 e0       	ldi	r19, 0x00	; 0
    516c:	40 e0       	ldi	r20, 0x00	; 0
    516e:	51 e4       	ldi	r21, 0x41	; 65
    5170:	0e 94 a4 e9 	call	0x1d348	; 0x1d348 <__mulsf3>
    5174:	9b 01       	movw	r18, r22
    5176:	ac 01       	movw	r20, r24
    5178:	60 e8       	ldi	r22, 0x80	; 128
    517a:	76 e9       	ldi	r23, 0x96	; 150
    517c:	88 e9       	ldi	r24, 0x98	; 152
    517e:	9b e4       	ldi	r25, 0x4B	; 75
    5180:	0e 94 55 e8 	call	0x1d0aa	; 0x1d0aa <__divsf3>
    5184:	20 e0       	ldi	r18, 0x00	; 0
    5186:	30 e0       	ldi	r19, 0x00	; 0
    5188:	40 e8       	ldi	r20, 0x80	; 128
    518a:	5f e3       	ldi	r21, 0x3F	; 63
    518c:	0e 94 ec e7 	call	0x1cfd8	; 0x1cfd8 <__subsf3>
    5190:	0e 94 07 ea 	call	0x1d40e	; 0x1d40e <round>
    5194:	0e 94 c2 e8 	call	0x1d184	; 0x1d184 <__fixunssfsi>
    5198:	6b 01       	movw	r12, r22
    519a:	7c 01       	movw	r14, r24
    519c:	c1 14       	cp	r12, r1
    519e:	80 e1       	ldi	r24, 0x10	; 16
    51a0:	d8 06       	cpc	r13, r24
    51a2:	e1 04       	cpc	r14, r1
    51a4:	f1 04       	cpc	r15, r1
    51a6:	58 f4       	brcc	.+22     	; 0x51be <uart_ubr+0x7e>
    51a8:	81 e0       	ldi	r24, 0x01	; 1
    51aa:	90 e0       	ldi	r25, 0x00	; 0
    51ac:	f5 01       	movw	r30, r10
    51ae:	91 83       	std	Z+1, r25	; 0x01
    51b0:	80 83       	st	Z, r24
    51b2:	81 2c       	mov	r8, r1
    51b4:	91 2c       	mov	r9, r1
    51b6:	a1 2c       	mov	r10, r1
    51b8:	21 e4       	ldi	r18, 0x41	; 65
    51ba:	b2 2e       	mov	r11, r18
    51bc:	31 c0       	rjmp	.+98     	; 0x5220 <uart_ubr+0xe0>
    51be:	f5 01       	movw	r30, r10
    51c0:	11 82       	std	Z+1, r1	; 0x01
    51c2:	10 82       	st	Z, r1
    51c4:	20 e0       	ldi	r18, 0x00	; 0
    51c6:	30 e0       	ldi	r19, 0x00	; 0
    51c8:	40 e8       	ldi	r20, 0x80	; 128
    51ca:	51 e4       	ldi	r21, 0x41	; 65
    51cc:	c3 01       	movw	r24, r6
    51ce:	b2 01       	movw	r22, r4
    51d0:	0e 94 a4 e9 	call	0x1d348	; 0x1d348 <__mulsf3>
    51d4:	9b 01       	movw	r18, r22
    51d6:	ac 01       	movw	r20, r24
    51d8:	60 e8       	ldi	r22, 0x80	; 128
    51da:	76 e9       	ldi	r23, 0x96	; 150
    51dc:	88 e9       	ldi	r24, 0x98	; 152
    51de:	9b e4       	ldi	r25, 0x4B	; 75
    51e0:	0e 94 55 e8 	call	0x1d0aa	; 0x1d0aa <__divsf3>
    51e4:	20 e0       	ldi	r18, 0x00	; 0
    51e6:	30 e0       	ldi	r19, 0x00	; 0
    51e8:	40 e8       	ldi	r20, 0x80	; 128
    51ea:	5f e3       	ldi	r21, 0x3F	; 63
    51ec:	0e 94 ec e7 	call	0x1cfd8	; 0x1cfd8 <__subsf3>
    51f0:	0e 94 07 ea 	call	0x1d40e	; 0x1d40e <round>
    51f4:	0e 94 c2 e8 	call	0x1d184	; 0x1d184 <__fixunssfsi>
    51f8:	6b 01       	movw	r12, r22
    51fa:	7c 01       	movw	r14, r24
    51fc:	81 2c       	mov	r8, r1
    51fe:	91 2c       	mov	r9, r1
    5200:	90 e8       	ldi	r25, 0x80	; 128
    5202:	a9 2e       	mov	r10, r25
    5204:	91 e4       	ldi	r25, 0x41	; 65
    5206:	b9 2e       	mov	r11, r25
    5208:	c1 14       	cp	r12, r1
    520a:	f0 e1       	ldi	r31, 0x10	; 16
    520c:	df 06       	cpc	r13, r31
    520e:	e1 04       	cpc	r14, r1
    5210:	f1 04       	cpc	r15, r1
    5212:	30 f0       	brcs	.+12     	; 0x5220 <uart_ubr+0xe0>
    5214:	cc 24       	eor	r12, r12
    5216:	ca 94       	dec	r12
    5218:	8f e0       	ldi	r24, 0x0F	; 15
    521a:	d8 2e       	mov	r13, r24
    521c:	e1 2c       	mov	r14, r1
    521e:	f1 2c       	mov	r15, r1
    5220:	c7 01       	movw	r24, r14
    5222:	b6 01       	movw	r22, r12
    5224:	6f 5f       	subi	r22, 0xFF	; 255
    5226:	7f 4f       	sbci	r23, 0xFF	; 255
    5228:	8f 4f       	sbci	r24, 0xFF	; 255
    522a:	9f 4f       	sbci	r25, 0xFF	; 255
    522c:	0e 94 ee e8 	call	0x1d1dc	; 0x1d1dc <__floatunsisf>
    5230:	a5 01       	movw	r20, r10
    5232:	94 01       	movw	r18, r8
    5234:	0e 94 a4 e9 	call	0x1d348	; 0x1d348 <__mulsf3>
    5238:	9b 01       	movw	r18, r22
    523a:	ac 01       	movw	r20, r24
    523c:	60 e8       	ldi	r22, 0x80	; 128
    523e:	76 e9       	ldi	r23, 0x96	; 150
    5240:	88 e9       	ldi	r24, 0x98	; 152
    5242:	9b e4       	ldi	r25, 0x4B	; 75
    5244:	0e 94 55 e8 	call	0x1d0aa	; 0x1d0aa <__divsf3>
    5248:	0e 94 c2 e8 	call	0x1d184	; 0x1d184 <__fixunssfsi>
    524c:	68 83       	st	Y, r22
    524e:	79 83       	std	Y+1, r23	; 0x01
    5250:	8a 83       	std	Y+2, r24	; 0x02
    5252:	9b 83       	std	Y+3, r25	; 0x03
    5254:	c6 01       	movw	r24, r12
    5256:	df 91       	pop	r29
    5258:	cf 91       	pop	r28
    525a:	ff 90       	pop	r15
    525c:	ef 90       	pop	r14
    525e:	df 90       	pop	r13
    5260:	cf 90       	pop	r12
    5262:	bf 90       	pop	r11
    5264:	af 90       	pop	r10
    5266:	9f 90       	pop	r9
    5268:	8f 90       	pop	r8
    526a:	7f 90       	pop	r7
    526c:	6f 90       	pop	r6
    526e:	5f 90       	pop	r5
    5270:	4f 90       	pop	r4
    5272:	08 95       	ret

00005274 <uart_init>:
    5274:	a6 e0       	ldi	r26, 0x06	; 6
    5276:	b0 e0       	ldi	r27, 0x00	; 0
    5278:	e0 e4       	ldi	r30, 0x40	; 64
    527a:	f9 e2       	ldi	r31, 0x29	; 41
    527c:	0c 94 a3 e7 	jmp	0x1cf46	; 0x1cf46 <__prologue_saves__+0x20>
    5280:	1e 82       	std	Y+6, r1	; 0x06
    5282:	1d 82       	std	Y+5, r1	; 0x05
    5284:	81 11       	cpse	r24, r1
    5286:	36 c0       	rjmp	.+108    	; 0x52f4 <uart_init+0x80>
    5288:	cb 01       	movw	r24, r22
    528a:	ba 01       	movw	r22, r20
    528c:	9e 01       	movw	r18, r28
    528e:	2f 5f       	subi	r18, 0xFF	; 255
    5290:	3f 4f       	sbci	r19, 0xFF	; 255
    5292:	ae 01       	movw	r20, r28
    5294:	4b 5f       	subi	r20, 0xFB	; 251
    5296:	5f 4f       	sbci	r21, 0xFF	; 255
    5298:	53 df       	rcall	.-346    	; 0x5140 <uart_ubr>
    529a:	f8 94       	cli
    529c:	10 92 e9 19 	sts	0x19E9, r1	; 0x8019e9 <uarts+0x4>
    52a0:	10 92 e8 19 	sts	0x19E8, r1	; 0x8019e8 <uarts+0x3>
    52a4:	10 92 e5 19 	sts	0x19E5, r1	; 0x8019e5 <uarts>
    52a8:	10 92 e6 19 	sts	0x19E6, r1	; 0x8019e6 <uarts+0x1>
    52ac:	10 92 e7 19 	sts	0x19E7, r1	; 0x8019e7 <uarts+0x2>
    52b0:	10 92 ea 19 	sts	0x19EA, r1	; 0x8019ea <uarts+0x5>
    52b4:	78 94       	sei
    52b6:	f8 94       	cli
    52b8:	58 9a       	sbi	0x0b, 0	; 11
    52ba:	59 9a       	sbi	0x0b, 1	; 11
    52bc:	50 98       	cbi	0x0a, 0	; 10
    52be:	51 9a       	sbi	0x0a, 1	; 10
    52c0:	28 e9       	ldi	r18, 0x98	; 152
    52c2:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    52c6:	2d 81       	ldd	r18, Y+5	; 0x05
    52c8:	3e 81       	ldd	r19, Y+6	; 0x06
    52ca:	23 2b       	or	r18, r19
    52cc:	19 f0       	breq	.+6      	; 0x52d4 <uart_init+0x60>
    52ce:	22 e0       	ldi	r18, 0x02	; 2
    52d0:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    52d4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    52d8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    52dc:	78 94       	sei
    52de:	63 e3       	ldi	r22, 0x33	; 51
    52e0:	7a e2       	ldi	r23, 0x2A	; 42
    52e2:	88 e4       	ldi	r24, 0x48	; 72
    52e4:	9a e2       	ldi	r25, 0x2A	; 42
    52e6:	0e 94 3f 79 	call	0xf27e	; 0xf27e <fdevopen>
    52ea:	69 81       	ldd	r22, Y+1	; 0x01
    52ec:	7a 81       	ldd	r23, Y+2	; 0x02
    52ee:	8b 81       	ldd	r24, Y+3	; 0x03
    52f0:	9c 81       	ldd	r25, Y+4	; 0x04
    52f2:	03 c0       	rjmp	.+6      	; 0x52fa <uart_init+0x86>
    52f4:	60 e0       	ldi	r22, 0x00	; 0
    52f6:	70 e0       	ldi	r23, 0x00	; 0
    52f8:	cb 01       	movw	r24, r22
    52fa:	26 96       	adiw	r28, 0x06	; 6
    52fc:	e2 e0       	ldi	r30, 0x02	; 2
    52fe:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00005302 <uart_rx_interrupt>:
    5302:	cf 93       	push	r28
    5304:	df 93       	push	r29
    5306:	27 e5       	ldi	r18, 0x57	; 87
    5308:	82 9f       	mul	r24, r18
    530a:	c0 01       	movw	r24, r0
    530c:	11 24       	eor	r1, r1
    530e:	fc 01       	movw	r30, r24
    5310:	eb 51       	subi	r30, 0x1B	; 27
    5312:	f6 4e       	sbci	r31, 0xE6	; 230
    5314:	83 81       	ldd	r24, Z+3	; 0x03
    5316:	94 81       	ldd	r25, Z+4	; 0x04
    5318:	80 35       	cpi	r24, 0x50	; 80
    531a:	91 05       	cpc	r25, r1
    531c:	84 f4       	brge	.+32     	; 0x533e <uart_rx_interrupt+0x3c>
    531e:	30 81       	ld	r19, Z
    5320:	21 e0       	ldi	r18, 0x01	; 1
    5322:	23 0f       	add	r18, r19
    5324:	20 83       	st	Z, r18
    5326:	ef 01       	movw	r28, r30
    5328:	c3 0f       	add	r28, r19
    532a:	d1 1d       	adc	r29, r1
    532c:	6f 77       	andi	r22, 0x7F	; 127
    532e:	6e 83       	std	Y+6, r22	; 0x06
    5330:	01 96       	adiw	r24, 0x01	; 1
    5332:	94 83       	std	Z+4, r25	; 0x04
    5334:	83 83       	std	Z+3, r24	; 0x03
    5336:	20 35       	cpi	r18, 0x50	; 80
    5338:	28 f0       	brcs	.+10     	; 0x5344 <uart_rx_interrupt+0x42>
    533a:	10 82       	st	Z, r1
    533c:	03 c0       	rjmp	.+6      	; 0x5344 <uart_rx_interrupt+0x42>
    533e:	85 81       	ldd	r24, Z+5	; 0x05
    5340:	81 60       	ori	r24, 0x01	; 1
    5342:	85 83       	std	Z+5, r24	; 0x05
    5344:	df 91       	pop	r29
    5346:	cf 91       	pop	r28
    5348:	08 95       	ret

0000534a <__vector_20>:
    534a:	1f 92       	push	r1
    534c:	0f 92       	push	r0
    534e:	0f b6       	in	r0, 0x3f	; 63
    5350:	0f 92       	push	r0
    5352:	11 24       	eor	r1, r1
    5354:	0b b6       	in	r0, 0x3b	; 59
    5356:	0f 92       	push	r0
    5358:	2f 93       	push	r18
    535a:	3f 93       	push	r19
    535c:	4f 93       	push	r20
    535e:	5f 93       	push	r21
    5360:	6f 93       	push	r22
    5362:	7f 93       	push	r23
    5364:	8f 93       	push	r24
    5366:	9f 93       	push	r25
    5368:	af 93       	push	r26
    536a:	bf 93       	push	r27
    536c:	ef 93       	push	r30
    536e:	ff 93       	push	r31
    5370:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    5374:	80 e0       	ldi	r24, 0x00	; 0
    5376:	c5 df       	rcall	.-118    	; 0x5302 <uart_rx_interrupt>
    5378:	ff 91       	pop	r31
    537a:	ef 91       	pop	r30
    537c:	bf 91       	pop	r27
    537e:	af 91       	pop	r26
    5380:	9f 91       	pop	r25
    5382:	8f 91       	pop	r24
    5384:	7f 91       	pop	r23
    5386:	6f 91       	pop	r22
    5388:	5f 91       	pop	r21
    538a:	4f 91       	pop	r20
    538c:	3f 91       	pop	r19
    538e:	2f 91       	pop	r18
    5390:	0f 90       	pop	r0
    5392:	0b be       	out	0x3b, r0	; 59
    5394:	0f 90       	pop	r0
    5396:	0f be       	out	0x3f, r0	; 63
    5398:	0f 90       	pop	r0
    539a:	1f 90       	pop	r1
    539c:	18 95       	reti

0000539e <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    539e:	81 11       	cpse	r24, r1
    53a0:	07 c0       	rjmp	.+14     	; 0x53b0 <uart_rx_count+0x12>
        return(EOF);

    cli();
    53a2:	f8 94       	cli

    count = uarts[uart].rx_count;
    53a4:	80 91 e8 19 	lds	r24, 0x19E8	; 0x8019e8 <uarts+0x3>
    53a8:	90 91 e9 19 	lds	r25, 0x19E9	; 0x8019e9 <uarts+0x4>

    sei();
    53ac:	78 94       	sei

    return (count );
    53ae:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    53b0:	8f ef       	ldi	r24, 0xFF	; 255
    53b2:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    53b4:	08 95       	ret

000053b6 <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    53b6:	81 11       	cpse	r24, r1
    53b8:	21 c0       	rjmp	.+66     	; 0x53fc <uart_get_tail+0x46>
    {
        return(EOF);
    }

    while(uart_rx_count(uart) < 1)
    53ba:	80 e0       	ldi	r24, 0x00	; 0
    53bc:	f0 df       	rcall	.-32     	; 0x539e <uart_rx_count>
    53be:	18 16       	cp	r1, r24
    53c0:	19 06       	cpc	r1, r25
    53c2:	dc f7       	brge	.-10     	; 0x53ba <uart_get_tail+0x4>
        ;

    cli();
    53c4:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    53c6:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <uarts+0x1>
    53ca:	91 e0       	ldi	r25, 0x01	; 1
    53cc:	9e 0f       	add	r25, r30
    53ce:	90 93 e6 19 	sts	0x19E6, r25	; 0x8019e6 <uarts+0x1>
    53d2:	f0 e0       	ldi	r31, 0x00	; 0
    53d4:	eb 51       	subi	r30, 0x1B	; 27
    53d6:	f6 4e       	sbci	r31, 0xE6	; 230
    53d8:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    53da:	90 35       	cpi	r25, 0x50	; 80
    53dc:	10 f0       	brcs	.+4      	; 0x53e2 <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    53de:	10 92 e6 19 	sts	0x19E6, r1	; 0x8019e6 <uarts+0x1>
    uarts[uart].rx_count--;
    53e2:	20 91 e8 19 	lds	r18, 0x19E8	; 0x8019e8 <uarts+0x3>
    53e6:	30 91 e9 19 	lds	r19, 0x19E9	; 0x8019e9 <uarts+0x4>
    53ea:	21 50       	subi	r18, 0x01	; 1
    53ec:	31 09       	sbc	r19, r1
    53ee:	30 93 e9 19 	sts	0x19E9, r19	; 0x8019e9 <uarts+0x4>
    53f2:	20 93 e8 19 	sts	0x19E8, r18	; 0x8019e8 <uarts+0x3>
    sei();
    53f6:	78 94       	sei

    return (c & 0xff);
    53f8:	90 e0       	ldi	r25, 0x00	; 0
    53fa:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
    {
        return(EOF);
    53fc:	8f ef       	ldi	r24, 0xFF	; 255
    53fe:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    5400:	08 95       	ret

00005402 <uart_rx_byte>:
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    return( uart_get_tail(uart) & 0xff);
    5402:	d9 df       	rcall	.-78     	; 0x53b6 <uart_get_tail>
}
    5404:	99 27       	eor	r25, r25
    5406:	08 95       	ret

00005408 <uart_tx_byte>:
/// @param[in] uart: uart number.
///
/// @return void.
int uart_tx_byte(int c, uint8_t uart)
{
    if(uart == 0)
    5408:	61 11       	cpse	r22, r1
    540a:	09 c0       	rjmp	.+18     	; 0x541e <uart_tx_byte+0x16>
    {
        while (!BIT_TST(UCSR0A, UDRE0))
    540c:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5410:	25 ff       	sbrs	r18, 5
    5412:	fc cf       	rjmp	.-8      	; 0x540c <uart_tx_byte+0x4>
            ;
        UDR0 = c & 0x7f;
    5414:	28 2f       	mov	r18, r24
    5416:	2f 77       	andi	r18, 0x7F	; 127
    5418:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
        return(c);
    541c:	08 95       	ret
    }
#ifdef UARTS > 1
    if(uart == 1)
    541e:	61 30       	cpi	r22, 0x01	; 1
    5420:	49 f4       	brne	.+18     	; 0x5434 <uart_tx_byte+0x2c>
    {
        while (!BIT_TST(UCSR1A, UDRE1))
    5422:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    5426:	25 ff       	sbrs	r18, 5
    5428:	fc cf       	rjmp	.-8      	; 0x5422 <uart_tx_byte+0x1a>
            ;
        UDR1 = c & 0x7f;
    542a:	28 2f       	mov	r18, r24
    542c:	2f 77       	andi	r18, 0x7F	; 127
    542e:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    5432:	08 95       	ret
        return(c);
    }
#endif
    return(EOF);
    5434:	8f ef       	ldi	r24, 0xFF	; 255
    5436:	9f ef       	ldi	r25, 0xFF	; 255
}
    5438:	08 95       	ret

0000543a <uart_getchar>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_getchar(uint8_t uart)
{
    543a:	cf 93       	push	r28
    uint8_t c;

    if(uart >= UARTS)
    543c:	81 11       	cpse	r24, r1
    543e:	0f c0       	rjmp	.+30     	; 0x545e <uart_getchar+0x24>
        break;
    }
    if(c == '\r')
        c = '\n';
#endif
    c = uart_rx_byte(uart);
    5440:	e0 df       	rcall	.-64     	; 0x5402 <uart_rx_byte>
    5442:	c8 2f       	mov	r28, r24
    uart_tx_byte(c, uart);
    5444:	60 e0       	ldi	r22, 0x00	; 0
    5446:	90 e0       	ldi	r25, 0x00	; 0
    5448:	df df       	rcall	.-66     	; 0x5408 <uart_tx_byte>
    if(c == '\r')
    544a:	cd 30       	cpi	r28, 0x0D	; 13
    544c:	29 f4       	brne	.+10     	; 0x5458 <uart_getchar+0x1e>
    {
        c = '\n';
        uart_tx_byte(c, uart);
    544e:	60 e0       	ldi	r22, 0x00	; 0
    5450:	8a e0       	ldi	r24, 0x0A	; 10
    5452:	90 e0       	ldi	r25, 0x00	; 0
    5454:	d9 df       	rcall	.-78     	; 0x5408 <uart_tx_byte>
#endif
    c = uart_rx_byte(uart);
    uart_tx_byte(c, uart);
    if(c == '\r')
    {
        c = '\n';
    5456:	ca e0       	ldi	r28, 0x0A	; 10
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
    5458:	8c 2f       	mov	r24, r28
    545a:	90 e0       	ldi	r25, 0x00	; 0
    545c:	02 c0       	rjmp	.+4      	; 0x5462 <uart_getchar+0x28>
int uart_getchar(uint8_t uart)
{
    uint8_t c;

    if(uart >= UARTS)
        return(EOF);
    545e:	8f ef       	ldi	r24, 0xFF	; 255
    5460:	9f ef       	ldi	r25, 0xFF	; 255
        c = '\n';
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
}
    5462:	cf 91       	pop	r28
    5464:	08 95       	ret

00005466 <uart0_getchar>:
///
/// @return  uart_getchar(0);.
/// @see fdevopen() from avr-libc.
int uart0_getchar( void *f  __attribute__((unused)))
{
    return( uart_getchar(0) );
    5466:	80 e0       	ldi	r24, 0x00	; 0
    5468:	e8 cf       	rjmp	.-48     	; 0x543a <uart_getchar>
}
    546a:	08 95       	ret

0000546c <uart_putchar>:
/// @param[in] c: transmit character.
/// @param[in] uart: uart number.
///
/// @return void.
int uart_putchar(int c, int uart)
{
    546c:	1f 93       	push	r17
    546e:	cf 93       	push	r28
    5470:	df 93       	push	r29
    5472:	ec 01       	movw	r28, r24
    5474:	16 2f       	mov	r17, r22
    uart_tx_byte(c, uart);
    5476:	c8 df       	rcall	.-112    	; 0x5408 <uart_tx_byte>

    if( c == '\n' )
    5478:	ca 30       	cpi	r28, 0x0A	; 10
    547a:	d1 05       	cpc	r29, r1
    547c:	21 f4       	brne	.+8      	; 0x5486 <uart_putchar+0x1a>
        uart_tx_byte('\r', uart);
    547e:	61 2f       	mov	r22, r17
    5480:	8d e0       	ldi	r24, 0x0D	; 13
    5482:	90 e0       	ldi	r25, 0x00	; 0
    5484:	c1 df       	rcall	.-126    	; 0x5408 <uart_tx_byte>

    return(c);
}
    5486:	ce 01       	movw	r24, r28
    5488:	df 91       	pop	r29
    548a:	cf 91       	pop	r28
    548c:	1f 91       	pop	r17
    548e:	08 95       	ret

00005490 <uart0_putchar>:
/// @param[in] f: unused FILE *stream pointer.
///
/// @return  uart_putchar(c, 0);.
/// @see fdevopen() from avr-libc.
int uart0_putchar(int c, void *f  __attribute__((unused)))
{
    5490:	cf 93       	push	r28
    5492:	df 93       	push	r29
    5494:	ec 01       	movw	r28, r24
    uart_putchar(c, 0);
    5496:	60 e0       	ldi	r22, 0x00	; 0
    5498:	70 e0       	ldi	r23, 0x00	; 0
    549a:	e8 df       	rcall	.-48     	; 0x546c <uart_putchar>
    return(c);
}
    549c:	ce 01       	movw	r24, r28
    549e:	df 91       	pop	r29
    54a0:	cf 91       	pop	r28
    54a2:	08 95       	ret

000054a4 <uart_keyhit>:
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
    return ( uart_rx_count( uart ) );
    54a4:	7c cf       	rjmp	.-264    	; 0x539e <uart_rx_count>
}
    54a6:	08 95       	ret

000054a8 <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    54a8:	8f 92       	push	r8
    54aa:	9f 92       	push	r9
    54ac:	af 92       	push	r10
    54ae:	bf 92       	push	r11
    54b0:	cf 92       	push	r12
    54b2:	df 92       	push	r13
    54b4:	ef 92       	push	r14
    54b6:	ff 92       	push	r15
    54b8:	ad b7       	in	r26, 0x3d	; 61
    54ba:	be b7       	in	r27, 0x3e	; 62
    54bc:	17 97       	sbiw	r26, 0x07	; 7
    54be:	0f b6       	in	r0, 0x3f	; 63
    54c0:	f8 94       	cli
    54c2:	be bf       	out	0x3e, r27	; 62
    54c4:	0f be       	out	0x3f, r0	; 63
    54c6:	ad bf       	out	0x3d, r26	; 61
    54c8:	c0 90 47 17 	lds	r12, 0x1747	; 0x801747 <SPI0_Speed_value>
    54cc:	d0 90 48 17 	lds	r13, 0x1748	; 0x801748 <SPI0_Speed_value+0x1>
    54d0:	e0 90 49 17 	lds	r14, 0x1749	; 0x801749 <SPI0_Speed_value+0x2>
    54d4:	f0 90 4a 17 	lds	r15, 0x174A	; 0x80174a <SPI0_Speed_value+0x3>
    54d8:	c6 16       	cp	r12, r22
    54da:	d7 06       	cpc	r13, r23
    54dc:	e8 06       	cpc	r14, r24
    54de:	f9 06       	cpc	r15, r25
    54e0:	09 f4       	brne	.+2      	; 0x54e4 <SPI0_Speed+0x3c>
    54e2:	70 c0       	rjmp	.+224    	; 0x55c4 <SPI0_Speed+0x11c>
    54e4:	4b 01       	movw	r8, r22
    54e6:	5c 01       	movw	r10, r24
    54e8:	dc 01       	movw	r26, r24
    54ea:	cb 01       	movw	r24, r22
    54ec:	b6 95       	lsr	r27
    54ee:	a7 95       	ror	r26
    54f0:	97 95       	ror	r25
    54f2:	87 95       	ror	r24
    54f4:	bc 01       	movw	r22, r24
    54f6:	cd 01       	movw	r24, r26
    54f8:	73 5d       	subi	r23, 0xD3	; 211
    54fa:	8e 4c       	sbci	r24, 0xCE	; 206
    54fc:	9e 4f       	sbci	r25, 0xFE	; 254
    54fe:	a5 01       	movw	r20, r10
    5500:	94 01       	movw	r18, r8
    5502:	0e 94 26 e7 	call	0x1ce4c	; 0x1ce4c <__udivmodsi4>
    5506:	69 01       	movw	r12, r18
    5508:	7a 01       	movw	r14, r20
    550a:	ed b7       	in	r30, 0x3d	; 61
    550c:	fe b7       	in	r31, 0x3e	; 62
    550e:	24 83       	std	Z+4, r18	; 0x04
    5510:	35 83       	std	Z+5, r19	; 0x05
    5512:	46 83       	std	Z+6, r20	; 0x06
    5514:	57 83       	std	Z+7, r21	; 0x07
    5516:	84 e2       	ldi	r24, 0x24	; 36
    5518:	93 e0       	ldi	r25, 0x03	; 3
    551a:	a0 e0       	ldi	r26, 0x00	; 0
    551c:	81 83       	std	Z+1, r24	; 0x01
    551e:	92 83       	std	Z+2, r25	; 0x02
    5520:	a3 83       	std	Z+3, r26	; 0x03
    5522:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    5526:	f0 e8       	ldi	r31, 0x80	; 128
    5528:	cf 16       	cp	r12, r31
    552a:	d1 04       	cpc	r13, r1
    552c:	e1 04       	cpc	r14, r1
    552e:	f1 04       	cpc	r15, r1
    5530:	30 f4       	brcc	.+12     	; 0x553e <SPI0_Speed+0x96>
    5532:	80 e4       	ldi	r24, 0x40	; 64
    5534:	c8 16       	cp	r12, r24
    5536:	d1 04       	cpc	r13, r1
    5538:	e1 04       	cpc	r14, r1
    553a:	f1 04       	cpc	r15, r1
    553c:	30 f0       	brcs	.+12     	; 0x554a <SPI0_Speed+0xa2>
    553e:	8d b5       	in	r24, 0x2d	; 45
    5540:	8e 7f       	andi	r24, 0xFE	; 254
    5542:	8d bd       	out	0x2d, r24	; 45
    5544:	8c b5       	in	r24, 0x2c	; 44
    5546:	82 60       	ori	r24, 0x02	; 2
    5548:	20 c0       	rjmp	.+64     	; 0x558a <SPI0_Speed+0xe2>
    554a:	e0 e2       	ldi	r30, 0x20	; 32
    554c:	ce 16       	cp	r12, r30
    554e:	d1 04       	cpc	r13, r1
    5550:	e1 04       	cpc	r14, r1
    5552:	f1 04       	cpc	r15, r1
    5554:	30 f0       	brcs	.+12     	; 0x5562 <SPI0_Speed+0xba>
    5556:	8d b5       	in	r24, 0x2d	; 45
    5558:	81 60       	ori	r24, 0x01	; 1
    555a:	8d bd       	out	0x2d, r24	; 45
    555c:	8c b5       	in	r24, 0x2c	; 44
    555e:	82 60       	ori	r24, 0x02	; 2
    5560:	25 c0       	rjmp	.+74     	; 0x55ac <SPI0_Speed+0x104>
    5562:	f0 e1       	ldi	r31, 0x10	; 16
    5564:	cf 16       	cp	r12, r31
    5566:	d1 04       	cpc	r13, r1
    5568:	e1 04       	cpc	r14, r1
    556a:	f1 04       	cpc	r15, r1
    556c:	18 f0       	brcs	.+6      	; 0x5574 <SPI0_Speed+0xcc>
    556e:	8d b5       	in	r24, 0x2d	; 45
    5570:	8e 7f       	andi	r24, 0xFE	; 254
    5572:	08 c0       	rjmp	.+16     	; 0x5584 <SPI0_Speed+0xdc>
    5574:	88 e0       	ldi	r24, 0x08	; 8
    5576:	c8 16       	cp	r12, r24
    5578:	d1 04       	cpc	r13, r1
    557a:	e1 04       	cpc	r14, r1
    557c:	f1 04       	cpc	r15, r1
    557e:	48 f0       	brcs	.+18     	; 0x5592 <SPI0_Speed+0xea>
    5580:	8d b5       	in	r24, 0x2d	; 45
    5582:	81 60       	ori	r24, 0x01	; 1
    5584:	8d bd       	out	0x2d, r24	; 45
    5586:	8c b5       	in	r24, 0x2c	; 44
    5588:	8d 7f       	andi	r24, 0xFD	; 253
    558a:	8c bd       	out	0x2c, r24	; 44
    558c:	8c b5       	in	r24, 0x2c	; 44
    558e:	81 60       	ori	r24, 0x01	; 1
    5590:	10 c0       	rjmp	.+32     	; 0x55b2 <SPI0_Speed+0x10a>
    5592:	8d b5       	in	r24, 0x2d	; 45
    5594:	e4 e0       	ldi	r30, 0x04	; 4
    5596:	ce 16       	cp	r12, r30
    5598:	d1 04       	cpc	r13, r1
    559a:	e1 04       	cpc	r14, r1
    559c:	f1 04       	cpc	r15, r1
    559e:	10 f0       	brcs	.+4      	; 0x55a4 <SPI0_Speed+0xfc>
    55a0:	8e 7f       	andi	r24, 0xFE	; 254
    55a2:	01 c0       	rjmp	.+2      	; 0x55a6 <SPI0_Speed+0xfe>
    55a4:	81 60       	ori	r24, 0x01	; 1
    55a6:	8d bd       	out	0x2d, r24	; 45
    55a8:	8c b5       	in	r24, 0x2c	; 44
    55aa:	8d 7f       	andi	r24, 0xFD	; 253
    55ac:	8c bd       	out	0x2c, r24	; 44
    55ae:	8c b5       	in	r24, 0x2c	; 44
    55b0:	8e 7f       	andi	r24, 0xFE	; 254
    55b2:	8c bd       	out	0x2c, r24	; 44
    55b4:	80 92 47 17 	sts	0x1747, r8	; 0x801747 <SPI0_Speed_value>
    55b8:	90 92 48 17 	sts	0x1748, r9	; 0x801748 <SPI0_Speed_value+0x1>
    55bc:	a0 92 49 17 	sts	0x1749, r10	; 0x801749 <SPI0_Speed_value+0x2>
    55c0:	b0 92 4a 17 	sts	0x174A, r11	; 0x80174a <SPI0_Speed_value+0x3>
    55c4:	ad b7       	in	r26, 0x3d	; 61
    55c6:	be b7       	in	r27, 0x3e	; 62
    55c8:	17 96       	adiw	r26, 0x07	; 7
    55ca:	0f b6       	in	r0, 0x3f	; 63
    55cc:	f8 94       	cli
    55ce:	be bf       	out	0x3e, r27	; 62
    55d0:	0f be       	out	0x3f, r0	; 63
    55d2:	ad bf       	out	0x3d, r26	; 61
    55d4:	ff 90       	pop	r15
    55d6:	ef 90       	pop	r14
    55d8:	df 90       	pop	r13
    55da:	cf 90       	pop	r12
    55dc:	bf 90       	pop	r11
    55de:	af 90       	pop	r10
    55e0:	9f 90       	pop	r9
    55e2:	8f 90       	pop	r8
    55e4:	08 95       	ret

000055e6 <SPI0_Mode>:
    55e6:	cf 93       	push	r28
    55e8:	df 93       	push	r29
    55ea:	00 d0       	rcall	.+0      	; 0x55ec <SPI0_Mode+0x6>
    55ec:	00 d0       	rcall	.+0      	; 0x55ee <SPI0_Mode+0x8>
    55ee:	1f 92       	push	r1
    55f0:	ec 01       	movw	r28, r24
    55f2:	81 30       	cpi	r24, 0x01	; 1
    55f4:	91 05       	cpc	r25, r1
    55f6:	71 f0       	breq	.+28     	; 0x5614 <SPI0_Mode+0x2e>
    55f8:	2c f4       	brge	.+10     	; 0x5604 <SPI0_Mode+0x1e>
    55fa:	89 2b       	or	r24, r25
    55fc:	c1 f4       	brne	.+48     	; 0x562e <SPI0_Mode+0x48>
    55fe:	8c b5       	in	r24, 0x2c	; 44
    5600:	87 7f       	andi	r24, 0xF7	; 247
    5602:	11 c0       	rjmp	.+34     	; 0x5626 <SPI0_Mode+0x40>
    5604:	82 30       	cpi	r24, 0x02	; 2
    5606:	91 05       	cpc	r25, r1
    5608:	61 f0       	breq	.+24     	; 0x5622 <SPI0_Mode+0x3c>
    560a:	03 97       	sbiw	r24, 0x03	; 3
    560c:	81 f4       	brne	.+32     	; 0x562e <SPI0_Mode+0x48>
    560e:	8c b5       	in	r24, 0x2c	; 44
    5610:	88 60       	ori	r24, 0x08	; 8
    5612:	02 c0       	rjmp	.+4      	; 0x5618 <SPI0_Mode+0x32>
    5614:	8c b5       	in	r24, 0x2c	; 44
    5616:	87 7f       	andi	r24, 0xF7	; 247
    5618:	8c bd       	out	0x2c, r24	; 44
    561a:	8c b5       	in	r24, 0x2c	; 44
    561c:	84 60       	ori	r24, 0x04	; 4
    561e:	8c bd       	out	0x2c, r24	; 44
    5620:	12 c0       	rjmp	.+36     	; 0x5646 <SPI0_Mode+0x60>
    5622:	8c b5       	in	r24, 0x2c	; 44
    5624:	88 60       	ori	r24, 0x08	; 8
    5626:	8c bd       	out	0x2c, r24	; 44
    5628:	8c b5       	in	r24, 0x2c	; 44
    562a:	8b 7f       	andi	r24, 0xFB	; 251
    562c:	f8 cf       	rjmp	.-16     	; 0x561e <SPI0_Mode+0x38>
    562e:	ed b7       	in	r30, 0x3d	; 61
    5630:	fe b7       	in	r31, 0x3e	; 62
    5632:	d5 83       	std	Z+5, r29	; 0x05
    5634:	c4 83       	std	Z+4, r28	; 0x04
    5636:	87 e0       	ldi	r24, 0x07	; 7
    5638:	93 e0       	ldi	r25, 0x03	; 3
    563a:	a0 e0       	ldi	r26, 0x00	; 0
    563c:	81 83       	std	Z+1, r24	; 0x01
    563e:	92 83       	std	Z+2, r25	; 0x02
    5640:	a3 83       	std	Z+3, r26	; 0x03
    5642:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    5646:	d0 93 46 17 	sts	0x1746, r29	; 0x801746 <SPI0_Mode_value+0x1>
    564a:	c0 93 45 17 	sts	0x1745, r28	; 0x801745 <SPI0_Mode_value>
    564e:	cd b7       	in	r28, 0x3d	; 61
    5650:	de b7       	in	r29, 0x3e	; 62
    5652:	25 96       	adiw	r28, 0x05	; 5
    5654:	e2 e0       	ldi	r30, 0x02	; 2
    5656:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

0000565a <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    565a:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    565c:	0d b4       	in	r0, 0x2d	; 45
    565e:	07 fe       	sbrs	r0, 7
    5660:	fd cf       	rjmp	.-6      	; 0x565c <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    5662:	8e b5       	in	r24, 0x2e	; 46
}
    5664:	08 95       	ret

00005666 <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    5666:	cf 92       	push	r12
    5668:	df 92       	push	r13
    566a:	ef 92       	push	r14
    566c:	ff 92       	push	r15
    566e:	cf 93       	push	r28
    5670:	df 93       	push	r29
    5672:	1f 92       	push	r1
    5674:	cd b7       	in	r28, 0x3d	; 61
    5676:	de b7       	in	r29, 0x3e	; 62
    5678:	6b 01       	movw	r12, r22
    567a:	7c 01       	movw	r14, r24
    printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
    printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
    printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

    SPCR = 0;                                     // Clear SPCR in case we are not called after RESET
    567c:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);                             // SCK Output
    567e:	2f 9a       	sbi	0x05, 7	; 5
    5680:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                            // MOSI Output
    5682:	2d 9a       	sbi	0x05, 5	; 5
    5684:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                         // MISO Input, no pull-up
    5686:	26 98       	cbi	0x04, 6	; 4

// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
    GPIO_PIN_LOW(SS);                             // SS Output must be HI prevent slave mode from getting set while initializing
    5688:	2c 98       	cbi	0x05, 4	; 5
    568a:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);                          // Master Mode
    568c:	8c b5       	in	r24, 0x2c	; 44
    568e:	80 61       	ori	r24, 0x10	; 16
    5690:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);                           // Enable SPI
    5692:	8c b5       	in	r24, 0x2c	; 44
    5694:	80 64       	ori	r24, 0x40	; 64
    5696:	8c bd       	out	0x2c, r24	; 44

// SPI Clear any pending interrupt flags
    D = SPSR;
    5698:	8d b5       	in	r24, 0x2d	; 45
    569a:	89 83       	std	Y+1, r24	; 0x01
    D = SPDR;
    569c:	8e b5       	in	r24, 0x2e	; 46
    569e:	89 83       	std	Y+1, r24	; 0x01

/// Set SPI clock mode 0
///  SPI Mode     CPOL    CPHA            Sample
///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    56a0:	80 e0       	ldi	r24, 0x00	; 0
    56a2:	90 e0       	ldi	r25, 0x00	; 0
    56a4:	a0 df       	rcall	.-192    	; 0x55e6 <SPI0_Mode>

// Set SPI clock speed
    SPI0_Speed(speed);
    56a6:	c7 01       	movw	r24, r14
    56a8:	b6 01       	movw	r22, r12
    56aa:	fe de       	rcall	.-516    	; 0x54a8 <SPI0_Speed>

    SPI0_TXRX_Byte(0xff);                         // Send dummy 0xFF
    56ac:	8f ef       	ldi	r24, 0xFF	; 255
    56ae:	d5 df       	rcall	.-86     	; 0x565a <SPI0_TXRX_Byte>
    56b0:	0f 90       	pop	r0
    SPI0_Init_state = 1;

}
    56b2:	df 91       	pop	r29
    56b4:	cf 91       	pop	r28
    56b6:	ff 90       	pop	r15
    56b8:	ef 90       	pop	r14
    56ba:	df 90       	pop	r13
    56bc:	cf 90       	pop	r12
    56be:	08 95       	ret

000056c0 <SPI0_TX>:
    56c0:	0f 93       	push	r16
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    56c2:	1f 93       	push	r17
    56c4:	cf 93       	push	r28
    56c6:	df 93       	push	r29
    56c8:	8c 01       	movw	r16, r24
    56ca:	eb 01       	movw	r28, r22

    while(count > 0)
    56cc:	1c 16       	cp	r1, r28
    56ce:	1d 06       	cpc	r1, r29
    56d0:	34 f4       	brge	.+12     	; 0x56de <SPI0_TX+0x1e>
    {
        SPI0_TXRX_Byte(*data);
    56d2:	f8 01       	movw	r30, r16
    56d4:	81 91       	ld	r24, Z+
    56d6:	8f 01       	movw	r16, r30
    56d8:	c0 df       	rcall	.-128    	; 0x565a <SPI0_TXRX_Byte>
        ++data;
        --count;
    56da:	21 97       	sbiw	r28, 0x01	; 1
    56dc:	f7 cf       	rjmp	.-18     	; 0x56cc <SPI0_TX+0xc>
    }
}
    56de:	df 91       	pop	r29
    56e0:	cf 91       	pop	r28
    56e2:	1f 91       	pop	r17
    56e4:	0f 91       	pop	r16
    56e6:	08 95       	ret

000056e8 <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    56e8:	0f 93       	push	r16
    56ea:	1f 93       	push	r17
    56ec:	cf 93       	push	r28
    56ee:	df 93       	push	r29
    56f0:	8c 01       	movw	r16, r24
    56f2:	eb 01       	movw	r28, r22

    while(count > 0)
    56f4:	1c 16       	cp	r1, r28
    56f6:	1d 06       	cpc	r1, r29
    56f8:	44 f4       	brge	.+16     	; 0x570a <SPI0_TXRX+0x22>
    {
        *data = SPI0_TXRX_Byte(*data);
    56fa:	f8 01       	movw	r30, r16
    56fc:	80 81       	ld	r24, Z
    56fe:	ad df       	rcall	.-166    	; 0x565a <SPI0_TXRX_Byte>
    5700:	f8 01       	movw	r30, r16
    5702:	81 93       	st	Z+, r24
    5704:	8f 01       	movw	r16, r30
        ++data;
        --count;
    5706:	21 97       	sbiw	r28, 0x01	; 1
    5708:	f5 cf       	rjmp	.-22     	; 0x56f4 <SPI0_TXRX+0xc>
    }
}
    570a:	df 91       	pop	r29
    570c:	cf 91       	pop	r28
    570e:	1f 91       	pop	r17
    5710:	0f 91       	pop	r16
    5712:	08 95       	ret

00005714 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    5714:	0f 93       	push	r16
    5716:	1f 93       	push	r17
    5718:	cf 93       	push	r28
    571a:	df 93       	push	r29
    571c:	8c 01       	movw	r16, r24
    571e:	eb 01       	movw	r28, r22

    while(count > 0)
    5720:	1c 16       	cp	r1, r28
    5722:	1d 06       	cpc	r1, r29
    5724:	3c f4       	brge	.+14     	; 0x5734 <SPI0_RX+0x20>
    {
        *data = SPI0_TXRX_Byte(0xff);
    5726:	8f ef       	ldi	r24, 0xFF	; 255
    5728:	98 df       	rcall	.-208    	; 0x565a <SPI0_TXRX_Byte>
    572a:	f8 01       	movw	r30, r16
    572c:	81 93       	st	Z+, r24
    572e:	8f 01       	movw	r16, r30
        ++data;
        --count;
    5730:	21 97       	sbiw	r28, 0x01	; 1
    5732:	f6 cf       	rjmp	.-20     	; 0x5720 <SPI0_RX+0xc>
    }
}
    5734:	df 91       	pop	r29
    5736:	cf 91       	pop	r28
    5738:	1f 91       	pop	r17
    573a:	0f 91       	pop	r16
    573c:	08 95       	ret

0000573e <i2c_timer>:
int8_t i2c_ok()
{
	if (i2c.flags) 
		return(0);
	return(1);
}
    573e:	2f b7       	in	r18, 0x3f	; 63
    5740:	80 91 3d 1a 	lds	r24, 0x1A3D	; 0x801a3d <i2c+0x1>
    5744:	81 11       	cpse	r24, r1
    5746:	04 c0       	rjmp	.+8      	; 0x5750 <i2c_timer+0x12>
    5748:	80 91 3e 1a 	lds	r24, 0x1A3E	; 0x801a3e <i2c+0x2>
    574c:	81 11       	cpse	r24, r1
    574e:	0b c0       	rjmp	.+22     	; 0x5766 <i2c_timer+0x28>
    5750:	80 91 40 1a 	lds	r24, 0x1A40	; 0x801a40 <i2c+0x4>
    5754:	90 91 41 1a 	lds	r25, 0x1A41	; 0x801a41 <i2c+0x5>
    5758:	00 97       	sbiw	r24, 0x00	; 0
    575a:	29 f0       	breq	.+10     	; 0x5766 <i2c_timer+0x28>
    575c:	01 97       	sbiw	r24, 0x01	; 1
    575e:	90 93 41 1a 	sts	0x1A41, r25	; 0x801a41 <i2c+0x5>
    5762:	80 93 40 1a 	sts	0x1A40, r24	; 0x801a40 <i2c+0x4>
    5766:	2f bf       	out	0x3f, r18	; 63
    5768:	08 95       	ret

0000576a <i2c_check_op>:
    576a:	ad b7       	in	r26, 0x3d	; 61
    576c:	be b7       	in	r27, 0x3e	; 62
    576e:	17 97       	sbiw	r26, 0x07	; 7
    5770:	0f b6       	in	r0, 0x3f	; 63
    5772:	f8 94       	cli
    5774:	be bf       	out	0x3e, r27	; 62
    5776:	0f be       	out	0x3f, r0	; 63
    5778:	ad bf       	out	0x3d, r26	; 61
    577a:	28 2f       	mov	r18, r24
    577c:	08 2e       	mov	r0, r24
    577e:	00 0c       	add	r0, r0
    5780:	33 0b       	sbc	r19, r19
    5782:	80 31       	cpi	r24, 0x10	; 16
    5784:	88 f0       	brcs	.+34     	; 0x57a8 <i2c_check_op+0x3e>
    5786:	80 e1       	ldi	r24, 0x10	; 16
    5788:	90 e0       	ldi	r25, 0x00	; 0
    578a:	ed b7       	in	r30, 0x3d	; 61
    578c:	fe b7       	in	r31, 0x3e	; 62
    578e:	97 83       	std	Z+7, r25	; 0x07
    5790:	86 83       	std	Z+6, r24	; 0x06
    5792:	35 83       	std	Z+5, r19	; 0x05
    5794:	24 83       	std	Z+4, r18	; 0x04
    5796:	8b e2       	ldi	r24, 0x2B	; 43
    5798:	94 e0       	ldi	r25, 0x04	; 4
    579a:	a0 e0       	ldi	r26, 0x00	; 0
    579c:	81 83       	std	Z+1, r24	; 0x01
    579e:	92 83       	std	Z+2, r25	; 0x02
    57a0:	a3 83       	std	Z+3, r26	; 0x03
    57a2:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    57a6:	24 c0       	rjmp	.+72     	; 0x57f0 <i2c_check_op+0x86>
    57a8:	f9 01       	movw	r30, r18
    57aa:	ee 0f       	add	r30, r30
    57ac:	ff 1f       	adc	r31, r31
    57ae:	e4 5b       	subi	r30, 0xB4	; 180
    57b0:	f8 4e       	sbci	r31, 0xE8	; 232
    57b2:	01 90       	ld	r0, Z+
    57b4:	f0 81       	ld	r31, Z
    57b6:	e0 2d       	mov	r30, r0
    57b8:	30 97       	sbiw	r30, 0x00	; 0
    57ba:	d1 f0       	breq	.+52     	; 0x57f0 <i2c_check_op+0x86>
    57bc:	80 85       	ldd	r24, Z+8	; 0x08
    57be:	91 85       	ldd	r25, Z+9	; 0x09
    57c0:	89 2b       	or	r24, r25
    57c2:	39 f4       	brne	.+14     	; 0x57d2 <i2c_check_op+0x68>
    57c4:	ed b7       	in	r30, 0x3d	; 61
    57c6:	fe b7       	in	r31, 0x3e	; 62
    57c8:	35 83       	std	Z+5, r19	; 0x05
    57ca:	24 83       	std	Z+4, r18	; 0x04
    57cc:	82 e1       	ldi	r24, 0x12	; 18
    57ce:	94 e0       	ldi	r25, 0x04	; 4
    57d0:	09 c0       	rjmp	.+18     	; 0x57e4 <i2c_check_op+0x7a>
    57d2:	86 81       	ldd	r24, Z+6	; 0x06
    57d4:	81 11       	cpse	r24, r1
    57d6:	0e c0       	rjmp	.+28     	; 0x57f4 <i2c_check_op+0x8a>
    57d8:	ed b7       	in	r30, 0x3d	; 61
    57da:	fe b7       	in	r31, 0x3e	; 62
    57dc:	35 83       	std	Z+5, r19	; 0x05
    57de:	24 83       	std	Z+4, r18	; 0x04
    57e0:	8c ef       	ldi	r24, 0xFC	; 252
    57e2:	93 e0       	ldi	r25, 0x03	; 3
    57e4:	a0 e0       	ldi	r26, 0x00	; 0
    57e6:	81 83       	std	Z+1, r24	; 0x01
    57e8:	92 83       	std	Z+2, r25	; 0x02
    57ea:	a3 83       	std	Z+3, r26	; 0x03
    57ec:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    57f0:	80 e0       	ldi	r24, 0x00	; 0
    57f2:	01 c0       	rjmp	.+2      	; 0x57f6 <i2c_check_op+0x8c>
    57f4:	81 e0       	ldi	r24, 0x01	; 1
    57f6:	ad b7       	in	r26, 0x3d	; 61
    57f8:	be b7       	in	r27, 0x3e	; 62
    57fa:	17 96       	adiw	r26, 0x07	; 7
    57fc:	0f b6       	in	r0, 0x3f	; 63
    57fe:	f8 94       	cli
    5800:	be bf       	out	0x3e, r27	; 62
    5802:	0f be       	out	0x3f, r0	; 63
    5804:	ad bf       	out	0x3d, r26	; 61
    5806:	08 95       	ret

00005808 <i2c_task_init>:
    5808:	8f b7       	in	r24, 0x3f	; 63
    580a:	f8 94       	cli
    580c:	ec e4       	ldi	r30, 0x4C	; 76
    580e:	f7 e1       	ldi	r31, 0x17	; 23
    5810:	11 92       	st	Z+, r1
    5812:	11 92       	st	Z+, r1
    5814:	97 e1       	ldi	r25, 0x17	; 23
    5816:	ec 36       	cpi	r30, 0x6C	; 108
    5818:	f9 07       	cpc	r31, r25
    581a:	d1 f7       	brne	.-12     	; 0x5810 <i2c_task_init+0x8>
    581c:	10 92 6c 17 	sts	0x176C, r1	; 0x80176c <i2c_task>
    5820:	91 e0       	ldi	r25, 0x01	; 1
    5822:	90 93 6e 17 	sts	0x176E, r25	; 0x80176e <i2c_task+0x2>
    5826:	10 92 6d 17 	sts	0x176D, r1	; 0x80176d <i2c_task+0x1>
    582a:	10 92 6f 17 	sts	0x176F, r1	; 0x80176f <i2c_task+0x3>
    582e:	8f bf       	out	0x3f, r24	; 63
    5830:	08 95       	ret

00005832 <i2c_task_op_add>:
    5832:	ef 92       	push	r14
    5834:	ff 92       	push	r15
    5836:	0f 93       	push	r16
    5838:	1f 93       	push	r17
    583a:	cf 93       	push	r28
    583c:	df 93       	push	r29
    583e:	d8 2f       	mov	r29, r24
    5840:	c6 2f       	mov	r28, r22
    5842:	7a 01       	movw	r14, r20
    5844:	02 2f       	mov	r16, r18
    5846:	1f b7       	in	r17, 0x3f	; 63
    5848:	6a e0       	ldi	r22, 0x0A	; 10
    584a:	70 e0       	ldi	r23, 0x00	; 0
    584c:	81 e0       	ldi	r24, 0x01	; 1
    584e:	90 e0       	ldi	r25, 0x00	; 0
    5850:	74 db       	rcall	.-2328   	; 0x4f3a <safecalloc>
    5852:	fc 01       	movw	r30, r24
    5854:	89 2b       	or	r24, r25
    5856:	89 f0       	breq	.+34     	; 0x587a <i2c_task_op_add+0x48>
    5858:	f8 94       	cli
    585a:	11 82       	std	Z+1, r1	; 0x01
    585c:	12 82       	std	Z+2, r1	; 0x02
    585e:	dd 0f       	add	r29, r29
    5860:	c1 70       	andi	r28, 0x01	; 1
    5862:	cd 2b       	or	r28, r29
    5864:	c0 83       	st	Z, r28
    5866:	8a e0       	ldi	r24, 0x0A	; 10
    5868:	90 e0       	ldi	r25, 0x00	; 0
    586a:	95 83       	std	Z+5, r25	; 0x05
    586c:	84 83       	std	Z+4, r24	; 0x04
    586e:	13 82       	std	Z+3, r1	; 0x03
    5870:	06 83       	std	Z+6, r16	; 0x06
    5872:	17 82       	std	Z+7, r1	; 0x07
    5874:	f1 86       	std	Z+9, r15	; 0x09
    5876:	e0 86       	std	Z+8, r14	; 0x08
    5878:	1f bf       	out	0x3f, r17	; 63
    587a:	cf 01       	movw	r24, r30
    587c:	cd b7       	in	r28, 0x3d	; 61
    587e:	de b7       	in	r29, 0x3e	; 62
    5880:	e6 e0       	ldi	r30, 0x06	; 6
    5882:	0c 94 bb e7 	jmp	0x1cf76	; 0x1cf76 <__epilogue_restores__+0x18>

00005886 <i2c_init>:
    5886:	cf 93       	push	r28
    5888:	00 d0       	rcall	.+0      	; 0x588a <i2c_init+0x4>
    588a:	1f 92       	push	r1
    588c:	9b 01       	movw	r18, r22
    588e:	ac 01       	movw	r20, r24
    5890:	cf b7       	in	r28, 0x3f	; 63
    5892:	60 e0       	ldi	r22, 0x00	; 0
    5894:	7d e2       	ldi	r23, 0x2D	; 45
    5896:	81 e3       	ldi	r24, 0x31	; 49
    5898:	91 e0       	ldi	r25, 0x01	; 1
    589a:	0e 94 26 e7 	call	0x1ce4c	; 0x1ce4c <__udivmodsi4>
    589e:	da 01       	movw	r26, r20
    58a0:	c9 01       	movw	r24, r18
    58a2:	40 97       	sbiw	r24, 0x10	; 16
    58a4:	a1 09       	sbc	r26, r1
    58a6:	b1 09       	sbc	r27, r1
    58a8:	ac 01       	movw	r20, r24
    58aa:	bd 01       	movw	r22, r26
    58ac:	76 95       	lsr	r23
    58ae:	67 95       	ror	r22
    58b0:	57 95       	ror	r21
    58b2:	47 95       	ror	r20
    58b4:	ca 01       	movw	r24, r20
    58b6:	88 27       	eor	r24, r24
    58b8:	89 2b       	or	r24, r25
    58ba:	59 f0       	breq	.+22     	; 0x58d2 <i2c_init+0x4c>
    58bc:	80 ee       	ldi	r24, 0xE0	; 224
    58be:	93 e0       	ldi	r25, 0x03	; 3
    58c0:	a0 e0       	ldi	r26, 0x00	; 0
    58c2:	ed b7       	in	r30, 0x3d	; 61
    58c4:	fe b7       	in	r31, 0x3e	; 62
    58c6:	81 83       	std	Z+1, r24	; 0x01
    58c8:	92 83       	std	Z+2, r25	; 0x02
    58ca:	a3 83       	std	Z+3, r26	; 0x03
    58cc:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    58d0:	3a c0       	rjmp	.+116    	; 0x5946 <i2c_init+0xc0>
    58d2:	f8 94       	cli
    58d4:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    58d8:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x1>
    58dc:	81 e0       	ldi	r24, 0x01	; 1
    58de:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <i2c+0x2>
    58e2:	10 92 6c 17 	sts	0x176C, r1	; 0x80176c <i2c_task>
    58e6:	80 93 6e 17 	sts	0x176E, r24	; 0x80176e <i2c_task+0x2>
    58ea:	40 9a       	sbi	0x08, 0	; 8
    58ec:	41 9a       	sbi	0x08, 1	; 8
    58ee:	84 e8       	ldi	r24, 0x84	; 132
    58f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    58f4:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    58f8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    58fc:	8c 7f       	andi	r24, 0xFC	; 252
    58fe:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5902:	80 91 4b 17 	lds	r24, 0x174B	; 0x80174b <i2c_init_status>
    5906:	81 11       	cpse	r24, r1
    5908:	1d c0       	rjmp	.+58     	; 0x5944 <i2c_init+0xbe>
    590a:	ec e4       	ldi	r30, 0x4C	; 76
    590c:	f7 e1       	ldi	r31, 0x17	; 23
    590e:	11 92       	st	Z+, r1
    5910:	11 92       	st	Z+, r1
    5912:	27 e1       	ldi	r18, 0x17	; 23
    5914:	ec 36       	cpi	r30, 0x6C	; 108
    5916:	f2 07       	cpc	r31, r18
    5918:	d1 f7       	brne	.-12     	; 0x590e <i2c_init+0x88>
    591a:	61 e0       	ldi	r22, 0x01	; 1
    591c:	70 e0       	ldi	r23, 0x00	; 0
    591e:	8f e9       	ldi	r24, 0x9F	; 159
    5920:	9b e2       	ldi	r25, 0x2B	; 43
    5922:	0e 94 1f 35 	call	0x6a3e	; 0x6a3e <set_timers>
    5926:	01 96       	adiw	r24, 0x01	; 1
    5928:	51 f4       	brne	.+20     	; 0x593e <i2c_init+0xb8>
    592a:	89 ec       	ldi	r24, 0xC9	; 201
    592c:	93 e0       	ldi	r25, 0x03	; 3
    592e:	a0 e0       	ldi	r26, 0x00	; 0
    5930:	ed b7       	in	r30, 0x3d	; 61
    5932:	fe b7       	in	r31, 0x3e	; 62
    5934:	81 83       	std	Z+1, r24	; 0x01
    5936:	92 83       	std	Z+2, r25	; 0x02
    5938:	a3 83       	std	Z+3, r26	; 0x03
    593a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    593e:	81 e0       	ldi	r24, 0x01	; 1
    5940:	80 93 4b 17 	sts	0x174B, r24	; 0x80174b <i2c_init_status>
    5944:	cf bf       	out	0x3f, r28	; 63
    5946:	0f 90       	pop	r0
    5948:	0f 90       	pop	r0
    594a:	0f 90       	pop	r0
    594c:	cf 91       	pop	r28
    594e:	08 95       	ret

00005950 <i2c_done>:
///@brief Is i2c structure done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_done()
{
	delayus(1);
    5950:	61 e0       	ldi	r22, 0x01	; 1
    5952:	70 e0       	ldi	r23, 0x00	; 0
    5954:	80 e0       	ldi	r24, 0x00	; 0
    5956:	90 e0       	ldi	r25, 0x00	; 0
    5958:	6d db       	rcall	.-2342   	; 0x5034 <delayus>
	if(!i2c.enable || i2c.done )
    595a:	80 91 3d 1a 	lds	r24, 0x1A3D	; 0x801a3d <i2c+0x1>
    595e:	88 23       	and	r24, r24
    5960:	39 f0       	breq	.+14     	; 0x5970 <i2c_done+0x20>
		return(1);
    5962:	81 e0       	ldi	r24, 0x01	; 1
    5964:	90 91 3e 1a 	lds	r25, 0x1A3E	; 0x801a3e <i2c+0x2>
    5968:	91 11       	cpse	r25, r1
    596a:	03 c0       	rjmp	.+6      	; 0x5972 <i2c_done+0x22>
    596c:	80 e0       	ldi	r24, 0x00	; 0
    596e:	08 95       	ret
    5970:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    5972:	08 95       	ret

00005974 <i2c_task_done>:
///@brief Are all i2c_task_op[] pointers done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_task_done()
{
	delayus(1);
    5974:	61 e0       	ldi	r22, 0x01	; 1
    5976:	70 e0       	ldi	r23, 0x00	; 0
    5978:	80 e0       	ldi	r24, 0x00	; 0
    597a:	90 e0       	ldi	r25, 0x00	; 0
    597c:	5b db       	rcall	.-2378   	; 0x5034 <delayus>
	if(!i2c_task.enable || i2c_task.done )
    597e:	80 91 6c 17 	lds	r24, 0x176C	; 0x80176c <i2c_task>
    5982:	88 23       	and	r24, r24
    5984:	39 f0       	breq	.+14     	; 0x5994 <i2c_task_done+0x20>
		return(1);
    5986:	81 e0       	ldi	r24, 0x01	; 1
    5988:	90 91 6e 17 	lds	r25, 0x176E	; 0x80176e <i2c_task+0x2>
    598c:	91 11       	cpse	r25, r1
    598e:	03 c0       	rjmp	.+6      	; 0x5996 <i2c_task_done+0x22>
    5990:	80 e0       	ldi	r24, 0x00	; 0
    5992:	08 95       	ret
    5994:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    5996:	08 95       	ret

00005998 <i2c_send_start>:
///@brief Send I2C START and enable interrupts
///
/// @return  void
void i2c_send_start()
{
	i2c.done = 0;
    5998:	ec e3       	ldi	r30, 0x3C	; 60
    599a:	fa e1       	ldi	r31, 0x1A	; 26
    599c:	12 82       	std	Z+2, r1	; 0x02
	i2c.enable = 1;
    599e:	81 e0       	ldi	r24, 0x01	; 1
    59a0:	81 83       	std	Z+1, r24	; 0x01
	i2c.timeout = I2C_TIMEOUT;		// Start timeout timer
    59a2:	8a e0       	ldi	r24, 0x0A	; 10
    59a4:	90 e0       	ldi	r25, 0x00	; 0
    59a6:	95 83       	std	Z+5, r25	; 0x05
    59a8:	84 83       	std	Z+4, r24	; 0x04
	// Start a transactions
	// TWI Enable
	// TWI Interrupt Enable
	// TWI Interrupt Clear
	// TWI SEND RESTART
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    59aa:	85 ea       	ldi	r24, 0xA5	; 165
    59ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    59b0:	08 95       	ret

000059b2 <i2c_task_run>:

/// @brief Run all valid i2c_task_op[] tasks
///
/// @return  void
void i2c_task_run()
{
    59b2:	ef 92       	push	r14
    59b4:	ff 92       	push	r15
    59b6:	0f 93       	push	r16
    59b8:	1f 93       	push	r17
    59ba:	cf 93       	push	r28
    59bc:	df 93       	push	r29
	uint8_t sreg = SREG;
    59be:	ff b6       	in	r15, 0x3f	; 63
	i2c_op_t *o;
    uint8_t run = 0;
	int8_t i;


	cli();
    59c0:	f8 94       	cli
	i2c_task.done = 0;
    59c2:	10 92 6e 17 	sts	0x176E, r1	; 0x80176e <i2c_task+0x2>
	i2c_task.error = 0;
    59c6:	10 92 6f 17 	sts	0x176F, r1	; 0x80176f <i2c_task+0x3>
	i2c_task.ind = 0;
    59ca:	10 92 6d 17 	sts	0x176D, r1	; 0x80176d <i2c_task+0x1>

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    59ce:	c0 e0       	ldi	r28, 0x00	; 0
/// @return  void
void i2c_task_run()
{
	uint8_t sreg = SREG;
	i2c_op_t *o;
    uint8_t run = 0;
    59d0:	d0 e0       	ldi	r29, 0x00	; 0

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
	{
		o = i2c_task_op[i];
		o->enable = 1;
    59d2:	ee 24       	eor	r14, r14
    59d4:	e3 94       	inc	r14
		o->done = 0;
		o->flags = 0;
		o->ind = 0;
		o->timeout = I2C_TIMEOUT;
    59d6:	0a e0       	ldi	r16, 0x0A	; 10
    59d8:	10 e0       	ldi	r17, 0x00	; 0
	i2c_task.done = 0;
	i2c_task.error = 0;
	i2c_task.ind = 0;

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    59da:	8c 2f       	mov	r24, r28
    59dc:	c6 de       	rcall	.-628    	; 0x576a <i2c_check_op>
    59de:	88 23       	and	r24, r24
    59e0:	d1 f0       	breq	.+52     	; 0x5a16 <i2c_task_run+0x64>
	{
		o = i2c_task_op[i];
    59e2:	ec 2f       	mov	r30, r28
    59e4:	ee 0f       	add	r30, r30
    59e6:	ff 0b       	sbc	r31, r31
    59e8:	e4 5b       	subi	r30, 0xB4	; 180
    59ea:	f8 4e       	sbci	r31, 0xE8	; 232
    59ec:	01 90       	ld	r0, Z+
    59ee:	f0 81       	ld	r31, Z
    59f0:	e0 2d       	mov	r30, r0
		o->enable = 1;
    59f2:	e1 82       	std	Z+1, r14	; 0x01
		o->done = 0;
    59f4:	12 82       	std	Z+2, r1	; 0x02
		o->flags = 0;
    59f6:	13 82       	std	Z+3, r1	; 0x03
		o->ind = 0;
    59f8:	17 82       	std	Z+7, r1	; 0x07
		o->timeout = I2C_TIMEOUT;
    59fa:	15 83       	std	Z+5, r17	; 0x05
    59fc:	04 83       	std	Z+4, r16	; 0x04
		if(!run)
    59fe:	d1 11       	cpse	r29, r1
    5a00:	07 c0       	rjmp	.+14     	; 0x5a10 <i2c_task_run+0x5e>
		{
			run = 1;
			i2c = *o;
    5a02:	8a e0       	ldi	r24, 0x0A	; 10
    5a04:	ac e3       	ldi	r26, 0x3C	; 60
    5a06:	ba e1       	ldi	r27, 0x1A	; 26
    5a08:	01 90       	ld	r0, Z+
    5a0a:	0d 92       	st	X+, r0
    5a0c:	8a 95       	dec	r24
    5a0e:	e1 f7       	brne	.-8      	; 0x5a08 <i2c_task_run+0x56>
    5a10:	cf 5f       	subi	r28, 0xFF	; 255
    5a12:	d1 e0       	ldi	r29, 0x01	; 1
    5a14:	e2 cf       	rjmp	.-60     	; 0x59da <i2c_task_run+0x28>
		}
	}

	if(run)
    5a16:	dd 23       	and	r29, r29
    5a18:	91 f0       	breq	.+36     	; 0x5a3e <i2c_task_run+0x8c>
	{
		// TASK callback
		i2c_callback = i2c_task_next_op;
    5a1a:	86 e7       	ldi	r24, 0x76	; 118
    5a1c:	9d e2       	ldi	r25, 0x2D	; 45
    5a1e:	90 93 71 17 	sts	0x1771, r25	; 0x801771 <i2c_callback+0x1>
    5a22:	80 93 70 17 	sts	0x1770, r24	; 0x801770 <i2c_callback>

		i2c_task.enable = 1;
    5a26:	81 e0       	ldi	r24, 0x01	; 1
    5a28:	80 93 6c 17 	sts	0x176C, r24	; 0x80176c <i2c_task>
		i2c_task.done = 0;
    5a2c:	10 92 6e 17 	sts	0x176E, r1	; 0x80176e <i2c_task+0x2>

        // Reset Status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5a30:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5a34:	8c 7f       	andi	r24, 0xFC	; 252
    5a36:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // TWI Interrupt Clear
        // TWI SEND RESTART
        // TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
        // Disable Slave Mode

		i2c_send_start();
    5a3a:	ae df       	rcall	.-164    	; 0x5998 <i2c_send_start>
    5a3c:	15 c0       	rjmp	.+42     	; 0x5a68 <i2c_task_run+0xb6>
        // FIXME we should notify the user ?
		// Nothing to DO
		// User Error

		// TASK callback
		i2c_callback = NULL;
    5a3e:	10 92 71 17 	sts	0x1771, r1	; 0x801771 <i2c_callback+0x1>
    5a42:	10 92 70 17 	sts	0x1770, r1	; 0x801770 <i2c_callback>

		// TASK Nothing to DO
		i2c_task.enable = 0;
    5a46:	10 92 6c 17 	sts	0x176C, r1	; 0x80176c <i2c_task>
		i2c_task.done = 1;
    5a4a:	81 e0       	ldi	r24, 0x01	; 1
    5a4c:	80 93 6e 17 	sts	0x176E, r24	; 0x80176e <i2c_task+0x2>

		// I2C Nothing to do
        i2c.done = 1;
    5a50:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <i2c+0x2>
        i2c.enable = 0;
    5a54:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x1>

        // TWI Enable
        // TWI Disable Enable
        // TWI Interrupt Clear
        TWCR = _BV(TWEN) | _BV(TWINT);
    5a58:	84 e8       	ldi	r24, 0x84	; 132
    5a5a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        // Reset status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5a5e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5a62:	8c 7f       	andi	r24, 0xFC	; 252
    5a64:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // Disable Slave Mode
        TWAR = 0;
    5a68:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	}
	// Disable Slave Mode

	SREG = sreg;
    5a6c:	ff be       	out	0x3f, r15	; 63

}
    5a6e:	cd b7       	in	r28, 0x3d	; 61
    5a70:	de b7       	in	r29, 0x3e	; 62
    5a72:	e6 e0       	ldi	r30, 0x06	; 6
    5a74:	0c 94 bb e7 	jmp	0x1cf76	; 0x1cf76 <__epilogue_restores__+0x18>

00005a78 <i2c_fn>:
/// @param[in] *buf: pointer to buffer for send or receive
/// @param[in] len: size of buffer to read or write
/// @return  1 = OK, 0 = ERROR
uint8_t i2c_fn(uint8_t address, uint8_t mode, uint8_t *buf, uint8_t len)
{
	uint8_t sreg = SREG;
    5a78:	9f b7       	in	r25, 0x3f	; 63
	
    cli();
    5a7a:	f8 94       	cli

	// sign task only
	i2c_callback = NULL;
    5a7c:	10 92 71 17 	sts	0x1771, r1	; 0x801771 <i2c_callback+0x1>
    5a80:	10 92 70 17 	sts	0x1770, r1	; 0x801770 <i2c_callback>

	i2c.enable = 1; // Enabled
    5a84:	31 e0       	ldi	r19, 0x01	; 1
    5a86:	30 93 3d 1a 	sts	0x1A3D, r19	; 0x801a3d <i2c+0x1>
	i2c.done = 0;
    5a8a:	10 92 3e 1a 	sts	0x1A3E, r1	; 0x801a3e <i2c+0x2>
    i2c.address = (address << 1) | (mode & 1);
    5a8e:	88 0f       	add	r24, r24
    5a90:	61 70       	andi	r22, 0x01	; 1
    5a92:	68 2b       	or	r22, r24
    5a94:	60 93 3c 1a 	sts	0x1A3C, r22	; 0x801a3c <i2c>
	i2c.flags = 0;
    5a98:	10 92 3f 1a 	sts	0x1A3F, r1	; 0x801a3f <i2c+0x3>
    i2c.len = len;
    5a9c:	20 93 42 1a 	sts	0x1A42, r18	; 0x801a42 <i2c+0x6>
    i2c.ind = 0;
    5aa0:	10 92 43 1a 	sts	0x1A43, r1	; 0x801a43 <i2c+0x7>
    i2c.buf = buf;
    5aa4:	50 93 45 1a 	sts	0x1A45, r21	; 0x801a45 <i2c+0x9>
    5aa8:	40 93 44 1a 	sts	0x1A44, r20	; 0x801a44 <i2c+0x8>

	// Reset Status
	TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5aac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5ab0:	8c 7f       	andi	r24, 0xFC	; 252
    5ab2:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Disable Slave Mode
	TWAR = 0;
    5ab6:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>

	SREG = sreg;
    5aba:	9f bf       	out	0x3f, r25	; 63

	i2c_send_start();
    5abc:	6d df       	rcall	.-294    	; 0x5998 <i2c_send_start>
	{
		printf("timeout: %d\r",(int)i2c.timeout);
	}
	printf("\n");
#else
	while(! i2c_done() )
    5abe:	48 df       	rcall	.-368    	; 0x5950 <i2c_done>
    5ac0:	88 23       	and	r24, r24
    5ac2:	e9 f3       	breq	.-6      	; 0x5abe <i2c_fn+0x46>
    5ac4:	81 e0       	ldi	r24, 0x01	; 1
		;
#endif
	return( i2c.flags ? 0 : 1);
    5ac6:	90 91 3f 1a 	lds	r25, 0x1A3F	; 0x801a3f <i2c+0x3>
    5aca:	91 11       	cpse	r25, r1
    5acc:	80 e0       	ldi	r24, 0x00	; 0
    5ace:	08 95       	ret

00005ad0 <i2c_send_stop>:
}
    5ad0:	ec e3       	ldi	r30, 0x3C	; 60
///
/// @return  void
void i2c_send_stop()
{
    // All transactions are done
    i2c.done = 1;
    5ad2:	fa e1       	ldi	r31, 0x1A	; 26
    5ad4:	81 e0       	ldi	r24, 0x01	; 1
    5ad6:	82 83       	std	Z+2, r24	; 0x02
    i2c.enable = 0;
    5ad8:	11 82       	std	Z+1, r1	; 0x01
    // We are DONE
    // TWI Enable
    // TWI Interrupt Disable
    // TWI Interrupt Clear
    // TWI SEND STOP
    TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWSTO);
    5ada:	84 e9       	ldi	r24, 0x94	; 148
    5adc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	delayus(10);
    5ae0:	6a e0       	ldi	r22, 0x0A	; 10
    5ae2:	70 e0       	ldi	r23, 0x00	; 0
    5ae4:	80 e0       	ldi	r24, 0x00	; 0
    5ae6:	90 e0       	ldi	r25, 0x00	; 0
    5ae8:	a5 ca       	rjmp	.-2742   	; 0x5034 <delayus>
    5aea:	08 95       	ret

00005aec <i2c_task_next_op>:

///@brief I2C task ISR callback function
///
/// @return  void
int8_t i2c_task_next_op()
{
    5aec:	cf 93       	push	r28
    5aee:	df 93       	push	r29
	i2c_op_t *o;

	// NOTE: we are in an ISR do not disable other interrupts

	if(i2c_task.enable)
    5af0:	80 91 6c 17 	lds	r24, 0x176C	; 0x80176c <i2c_task>
    5af4:	88 23       	and	r24, r24
    5af6:	09 f4       	brne	.+2      	; 0x5afa <i2c_task_next_op+0xe>
    5af8:	46 c0       	rjmp	.+140    	; 0x5b86 <i2c_task_next_op+0x9a>
	{
		// Save state of LAST operation
		if(i2c_check_op(i2c_task.ind) )
    5afa:	80 91 6d 17 	lds	r24, 0x176D	; 0x80176d <i2c_task+0x1>
    5afe:	35 de       	rcall	.-918    	; 0x576a <i2c_check_op>
    5b00:	88 23       	and	r24, r24
    5b02:	b1 f0       	breq	.+44     	; 0x5b30 <i2c_task_next_op+0x44>
		{
			o = i2c_task_op[i2c_task.ind];
    5b04:	e0 91 6d 17 	lds	r30, 0x176D	; 0x80176d <i2c_task+0x1>
    5b08:	ee 0f       	add	r30, r30
    5b0a:	ff 0b       	sbc	r31, r31
    5b0c:	e4 5b       	subi	r30, 0xB4	; 180
    5b0e:	f8 4e       	sbci	r31, 0xE8	; 232
    5b10:	c0 81       	ld	r28, Z
    5b12:	d1 81       	ldd	r29, Z+1	; 0x01
			// Save state in last opperation
			*o = i2c;
    5b14:	8a e0       	ldi	r24, 0x0A	; 10
    5b16:	ec e3       	ldi	r30, 0x3C	; 60
    5b18:	fa e1       	ldi	r31, 0x1A	; 26
    5b1a:	de 01       	movw	r26, r28
    5b1c:	01 90       	ld	r0, Z+
    5b1e:	0d 92       	st	X+, r0
    5b20:	8a 95       	dec	r24
    5b22:	e1 f7       	brne	.-8      	; 0x5b1c <i2c_task_next_op+0x30>
			if(o->flags)
    5b24:	8b 81       	ldd	r24, Y+3	; 0x03
    5b26:	88 23       	and	r24, r24
    5b28:	19 f0       	breq	.+6      	; 0x5b30 <i2c_task_next_op+0x44>
				i2c_task.error = 1;
    5b2a:	81 e0       	ldi	r24, 0x01	; 1
    5b2c:	80 93 6f 17 	sts	0x176F, r24	; 0x80176f <i2c_task+0x3>
		}

		if(i2c_check_op(i2c_task.ind+1) )
    5b30:	80 91 6d 17 	lds	r24, 0x176D	; 0x80176d <i2c_task+0x1>
    5b34:	8f 5f       	subi	r24, 0xFF	; 255
    5b36:	19 de       	rcall	.-974    	; 0x576a <i2c_check_op>
    5b38:	88 23       	and	r24, r24
    5b3a:	29 f1       	breq	.+74     	; 0x5b86 <i2c_task_next_op+0x9a>
		{
			i2c_task.ind++;
    5b3c:	e0 91 6d 17 	lds	r30, 0x176D	; 0x80176d <i2c_task+0x1>
    5b40:	ef 5f       	subi	r30, 0xFF	; 255
    5b42:	e0 93 6d 17 	sts	0x176D, r30	; 0x80176d <i2c_task+0x1>

			o = i2c_task_op[i2c_task.ind];
    5b46:	ee 0f       	add	r30, r30
    5b48:	ff 0b       	sbc	r31, r31
    5b4a:	e4 5b       	subi	r30, 0xB4	; 180
    5b4c:	f8 4e       	sbci	r31, 0xE8	; 232
    5b4e:	01 90       	ld	r0, Z+
    5b50:	f0 81       	ld	r31, Z
    5b52:	e0 2d       	mov	r30, r0

			if( o->enable == 1 || o->done == 0)
    5b54:	81 81       	ldd	r24, Z+1	; 0x01
    5b56:	81 30       	cpi	r24, 0x01	; 1
    5b58:	19 f0       	breq	.+6      	; 0x5b60 <i2c_task_next_op+0x74>
    5b5a:	82 81       	ldd	r24, Z+2	; 0x02
    5b5c:	81 11       	cpse	r24, r1
    5b5e:	13 c0       	rjmp	.+38     	; 0x5b86 <i2c_task_next_op+0x9a>
			{
				o->timeout = I2C_TIMEOUT;
    5b60:	8a e0       	ldi	r24, 0x0A	; 10
    5b62:	90 e0       	ldi	r25, 0x00	; 0
    5b64:	95 83       	std	Z+5, r25	; 0x05
    5b66:	84 83       	std	Z+4, r24	; 0x04
				o->flags = 0;
    5b68:	13 82       	std	Z+3, r1	; 0x03
				o->ind = 0;
    5b6a:	17 82       	std	Z+7, r1	; 0x07
				o->enable = 1;
    5b6c:	81 e0       	ldi	r24, 0x01	; 1
    5b6e:	81 83       	std	Z+1, r24	; 0x01
				o->done = 0;
    5b70:	12 82       	std	Z+2, r1	; 0x02

				i2c = *o;
    5b72:	8a e0       	ldi	r24, 0x0A	; 10
    5b74:	ac e3       	ldi	r26, 0x3C	; 60
    5b76:	ba e1       	ldi	r27, 0x1A	; 26
    5b78:	01 90       	ld	r0, Z+
    5b7a:	0d 92       	st	X+, r0
    5b7c:	8a 95       	dec	r24

				i2c_send_start();
    5b7e:	e1 f7       	brne	.-8      	; 0x5b78 <i2c_task_next_op+0x8c>
    5b80:	0b df       	rcall	.-490    	; 0x5998 <i2c_send_start>

				return(1);
    5b82:	81 e0       	ldi	r24, 0x01	; 1
    5b84:	0f c0       	rjmp	.+30     	; 0x5ba4 <i2c_task_next_op+0xb8>
			}
		}
	}
	// program error
	// Disable TASK
	i2c_task.enable = 0;
    5b86:	10 92 6c 17 	sts	0x176C, r1	; 0x80176c <i2c_task>
	i2c_task.done = 1;
    5b8a:	81 e0       	ldi	r24, 0x01	; 1
    5b8c:	80 93 6e 17 	sts	0x176E, r24	; 0x80176e <i2c_task+0x2>

	// I2C disable
	i2c.done = 1;
    5b90:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <i2c+0x2>
	i2c.enable = 0;
    5b94:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x1>
	i2c.flags = 0;
    5b98:	10 92 3f 1a 	sts	0x1A3F, r1	; 0x801a3f <i2c+0x3>
	i2c.ind = 0;
    5b9c:	10 92 43 1a 	sts	0x1A43, r1	; 0x801a43 <i2c+0x7>

	i2c_send_stop();
    5ba0:	97 df       	rcall	.-210    	; 0x5ad0 <i2c_send_stop>

	return(0);
    5ba2:	80 e0       	ldi	r24, 0x00	; 0
}
    5ba4:	df 91       	pop	r29
    5ba6:	cf 91       	pop	r28
    5ba8:	08 95       	ret

00005baa <i2c_next>:
{

	// IF we have an i2c_callback() function then
	// it must save status and reset i2c structure for next operation

	if(i2c_callback)
    5baa:	e0 91 70 17 	lds	r30, 0x1770	; 0x801770 <i2c_callback>
    5bae:	f0 91 71 17 	lds	r31, 0x1771	; 0x801771 <i2c_callback+0x1>
    5bb2:	30 97       	sbiw	r30, 0x00	; 0
    5bb4:	11 f0       	breq	.+4      	; 0x5bba <i2c_next+0x10>
	    i2c_callback();
    5bb6:	09 95       	icall
    5bb8:	08 95       	ret
	else
		i2c_send_stop();
    5bba:	8a cf       	rjmp	.-236    	; 0x5ad0 <i2c_send_stop>
    5bbc:	08 95       	ret

00005bbe <__vector_26>:

///@brief I2C ISR for send/receive
///
/// @return  void
ISR(TWI_vect)
{
    5bbe:	1f 92       	push	r1
    5bc0:	0f 92       	push	r0
    5bc2:	0f b6       	in	r0, 0x3f	; 63
    5bc4:	0f 92       	push	r0
    5bc6:	11 24       	eor	r1, r1
    5bc8:	0b b6       	in	r0, 0x3b	; 59
    5bca:	0f 92       	push	r0
    5bcc:	2f 93       	push	r18
    5bce:	3f 93       	push	r19
    5bd0:	4f 93       	push	r20
    5bd2:	5f 93       	push	r21
    5bd4:	6f 93       	push	r22
    5bd6:	7f 93       	push	r23
    5bd8:	8f 93       	push	r24
    5bda:	9f 93       	push	r25
    5bdc:	af 93       	push	r26
    5bde:	bf 93       	push	r27
    5be0:	ef 93       	push	r30
    5be2:	ff 93       	push	r31
	// FYI: reading TWSR clears the status
	// twi.h defines TW_STATUS
    // #define TW_STATUS (TWSR & TW_STATUS_MASK)
    uint8_t status = TW_STATUS;	
    5be4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Are we Enabled to Receive/Send ?
	// Are we Done ?
	// Program errors - these should not happen
	if(!i2c.enable || i2c.done || !i2c.buf || !i2c.len )
    5be8:	90 91 3d 1a 	lds	r25, 0x1A3D	; 0x801a3d <i2c+0x1>
    5bec:	99 23       	and	r25, r25
    5bee:	09 f1       	breq	.+66     	; 0x5c32 <__vector_26+0x74>
    5bf0:	90 91 3e 1a 	lds	r25, 0x1A3E	; 0x801a3e <i2c+0x2>
    5bf4:	91 11       	cpse	r25, r1
    5bf6:	1d c0       	rjmp	.+58     	; 0x5c32 <__vector_26+0x74>
    5bf8:	20 91 44 1a 	lds	r18, 0x1A44	; 0x801a44 <i2c+0x8>
    5bfc:	30 91 45 1a 	lds	r19, 0x1A45	; 0x801a45 <i2c+0x9>
    5c00:	21 15       	cp	r18, r1
    5c02:	31 05       	cpc	r19, r1
    5c04:	b1 f0       	breq	.+44     	; 0x5c32 <__vector_26+0x74>
    5c06:	90 91 42 1a 	lds	r25, 0x1A42	; 0x801a42 <i2c+0x6>
    5c0a:	99 23       	and	r25, r25
    5c0c:	91 f0       	breq	.+36     	; 0x5c32 <__vector_26+0x74>
		i2c_send_stop();
		return;
	}

	// TUMEOUT ? STOP everything
	if(i2c.timeout == 0)
    5c0e:	40 91 40 1a 	lds	r20, 0x1A40	; 0x801a40 <i2c+0x4>
    5c12:	50 91 41 1a 	lds	r21, 0x1A41	; 0x801a41 <i2c+0x5>
    5c16:	45 2b       	or	r20, r21
    5c18:	71 f4       	brne	.+28     	; 0x5c36 <__vector_26+0x78>
	{
		i2c.flags |= (I2C_OP_TIMEOUT);
    5c1a:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <i2c+0x3>
    5c1e:	81 60       	ori	r24, 0x01	; 1
    5c20:	80 93 3f 1a 	sts	0x1A3F, r24	; 0x801a3f <i2c+0x3>
		i2c_task.enable = 0;
    5c24:	10 92 6c 17 	sts	0x176C, r1	; 0x80176c <i2c_task>
		i2c_task.done = 1;
    5c28:	81 e0       	ldi	r24, 0x01	; 1
    5c2a:	80 93 6e 17 	sts	0x176E, r24	; 0x80176e <i2c_task+0x2>
		i2c_task.error = 1;
    5c2e:	80 93 6f 17 	sts	0x176F, r24	; 0x80176f <i2c_task+0x3>
		i2c_send_stop();
    5c32:	4e df       	rcall	.-356    	; 0x5ad0 <i2c_send_stop>
		return;
    5c34:	9b c0       	rjmp	.+310    	; 0x5d6c <__vector_26+0x1ae>
	}

	// Master Receiver mode
	switch (status)
    5c36:	88 7f       	andi	r24, 0xF8	; 248
    5c38:	80 33       	cpi	r24, 0x30	; 48
    5c3a:	09 f4       	brne	.+2      	; 0x5c3e <__vector_26+0x80>
    5c3c:	83 c0       	rjmp	.+262    	; 0x5d44 <__vector_26+0x186>
    5c3e:	70 f4       	brcc	.+28     	; 0x5c5c <__vector_26+0x9e>
    5c40:	88 31       	cpi	r24, 0x18	; 24
    5c42:	09 f1       	breq	.+66     	; 0x5c86 <__vector_26+0xc8>
    5c44:	28 f4       	brcc	.+10     	; 0x5c50 <__vector_26+0x92>
    5c46:	88 30       	cpi	r24, 0x08	; 8
    5c48:	c9 f0       	breq	.+50     	; 0x5c7c <__vector_26+0xbe>
    5c4a:	80 31       	cpi	r24, 0x10	; 16
    5c4c:	b9 f0       	breq	.+46     	; 0x5c7c <__vector_26+0xbe>
    5c4e:	83 c0       	rjmp	.+262    	; 0x5d56 <__vector_26+0x198>
    5c50:	80 32       	cpi	r24, 0x20	; 32
    5c52:	09 f4       	brne	.+2      	; 0x5c56 <__vector_26+0x98>
    5c54:	65 c0       	rjmp	.+202    	; 0x5d20 <__vector_26+0x162>
    5c56:	88 32       	cpi	r24, 0x28	; 40
    5c58:	b1 f0       	breq	.+44     	; 0x5c86 <__vector_26+0xc8>
    5c5a:	7d c0       	rjmp	.+250    	; 0x5d56 <__vector_26+0x198>
    5c5c:	88 34       	cpi	r24, 0x48	; 72
    5c5e:	09 f4       	brne	.+2      	; 0x5c62 <__vector_26+0xa4>
    5c60:	68 c0       	rjmp	.+208    	; 0x5d32 <__vector_26+0x174>
    5c62:	38 f4       	brcc	.+14     	; 0x5c72 <__vector_26+0xb4>
    5c64:	88 33       	cpi	r24, 0x38	; 56
    5c66:	09 f4       	brne	.+2      	; 0x5c6a <__vector_26+0xac>
    5c68:	57 c0       	rjmp	.+174    	; 0x5d18 <__vector_26+0x15a>
    5c6a:	80 34       	cpi	r24, 0x40	; 64
    5c6c:	09 f4       	brne	.+2      	; 0x5c70 <__vector_26+0xb2>
    5c6e:	42 c0       	rjmp	.+132    	; 0x5cf4 <__vector_26+0x136>
    5c70:	72 c0       	rjmp	.+228    	; 0x5d56 <__vector_26+0x198>
    5c72:	80 35       	cpi	r24, 0x50	; 80
    5c74:	79 f1       	breq	.+94     	; 0x5cd4 <__vector_26+0x116>
    5c76:	88 35       	cpi	r24, 0x58	; 88
    5c78:	b9 f0       	breq	.+46     	; 0x5ca8 <__vector_26+0xea>
    5c7a:	6d c0       	rjmp	.+218    	; 0x5d56 <__vector_26+0x198>
	{
		case TW_START:		// START has been transmitted
		case TW_REP_START:  // RE-START has been transmitted
			i2c.ind = 0;
    5c7c:	10 92 43 1a 	sts	0x1A43, r1	; 0x801a43 <i2c+0x7>
			TWDR = i2c.address;
    5c80:	80 91 3c 1a 	lds	r24, 0x1A3C	; 0x801a3c <i2c>
    5c84:	0e c0       	rjmp	.+28     	; 0x5ca2 <__vector_26+0xe4>
			break;


		case TW_MT_SLA_ACK:	// SLA+W trasnmitted and ACK received
		case TW_MT_DATA_ACK:// Data trasnmitted and ACK received
			if (i2c.ind < i2c.len)
    5c86:	80 91 43 1a 	lds	r24, 0x1A43	; 0x801a43 <i2c+0x7>
    5c8a:	89 17       	cp	r24, r25
    5c8c:	ec f4       	brge	.+58     	; 0x5cc8 <__vector_26+0x10a>
			{
				TWDR = i2c.buf[i2c.ind++];
    5c8e:	91 e0       	ldi	r25, 0x01	; 1
    5c90:	98 0f       	add	r25, r24
    5c92:	90 93 43 1a 	sts	0x1A43, r25	; 0x801a43 <i2c+0x7>
    5c96:	f9 01       	movw	r30, r18
    5c98:	e8 0f       	add	r30, r24
    5c9a:	f1 1d       	adc	r31, r1
    5c9c:	87 fd       	sbrc	r24, 7
    5c9e:	fa 95       	dec	r31
    5ca0:	80 81       	ld	r24, Z
    5ca2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5ca6:	36 c0       	rjmp	.+108    	; 0x5d14 <__vector_26+0x156>
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			break;

		case TW_MR_DATA_NACK:	// Data received NACK transmitted
			if(i2c.ind < i2c.len)
    5ca8:	80 91 43 1a 	lds	r24, 0x1A43	; 0x801a43 <i2c+0x7>
    5cac:	89 17       	cp	r24, r25
    5cae:	64 f4       	brge	.+24     	; 0x5cc8 <__vector_26+0x10a>
				i2c.buf[i2c.ind++] = TWDR;
    5cb0:	91 e0       	ldi	r25, 0x01	; 1
    5cb2:	98 0f       	add	r25, r24
    5cb4:	90 93 43 1a 	sts	0x1A43, r25	; 0x801a43 <i2c+0x7>
    5cb8:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5cbc:	f9 01       	movw	r30, r18
    5cbe:	e8 0f       	add	r30, r24
    5cc0:	f1 1d       	adc	r31, r1
    5cc2:	87 fd       	sbrc	r24, 7
    5cc4:	fa 95       	dec	r31
    5cc6:	90 83       	st	Z, r25
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			else
			{
				// Done
				i2c.done = 1;
    5cc8:	81 e0       	ldi	r24, 0x01	; 1
    5cca:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <i2c+0x2>
				i2c.enable = 0;
    5cce:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x1>
    5cd2:	4b c0       	rjmp	.+150    	; 0x5d6a <__vector_26+0x1ac>
				i2c_next();
			}
			break;

		case TW_MR_DATA_ACK:	// Data received ACK transmitted
			if(i2c.ind < i2c.len)
    5cd4:	80 91 43 1a 	lds	r24, 0x1A43	; 0x801a43 <i2c+0x7>
    5cd8:	89 17       	cp	r24, r25
    5cda:	64 f4       	brge	.+24     	; 0x5cf4 <__vector_26+0x136>
				i2c.buf[i2c.ind++] = TWDR;
    5cdc:	91 e0       	ldi	r25, 0x01	; 1
    5cde:	98 0f       	add	r25, r24
    5ce0:	90 93 43 1a 	sts	0x1A43, r25	; 0x801a43 <i2c+0x7>
    5ce4:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5ce8:	f9 01       	movw	r30, r18
    5cea:	e8 0f       	add	r30, r24
    5cec:	f1 1d       	adc	r31, r1
    5cee:	87 fd       	sbrc	r24, 7
    5cf0:	fa 95       	dec	r31
    5cf2:	90 83       	st	Z, r25
		case TW_MR_SLA_ACK:		// SLA+R transmitted ACK received
			if ((i2c.ind+1) < i2c.len)
    5cf4:	80 91 43 1a 	lds	r24, 0x1A43	; 0x801a43 <i2c+0x7>
    5cf8:	08 2e       	mov	r0, r24
    5cfa:	00 0c       	add	r0, r0
    5cfc:	99 0b       	sbc	r25, r25
    5cfe:	01 96       	adiw	r24, 0x01	; 1
    5d00:	20 91 42 1a 	lds	r18, 0x1A42	; 0x801a42 <i2c+0x6>
    5d04:	02 2e       	mov	r0, r18
    5d06:	00 0c       	add	r0, r0
    5d08:	33 0b       	sbc	r19, r19
    5d0a:	82 17       	cp	r24, r18
    5d0c:	93 07       	cpc	r25, r19
    5d0e:	14 f4       	brge	.+4      	; 0x5d14 <__vector_26+0x156>
			{
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND ACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5d10:	85 ec       	ldi	r24, 0xC5	; 197
    5d12:	03 c0       	rjmp	.+6      	; 0x5d1a <__vector_26+0x15c>
				// LAST BYTE
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND NACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5d14:	85 e8       	ldi	r24, 0x85	; 133
    5d16:	01 c0       	rjmp	.+2      	; 0x5d1a <__vector_26+0x15c>
		case TW_ARB_LOST:
			// TWI Enable
			// TWI Interrupt Enable
			// TWI Interrupt Clear
			// TWI SEND RESTART
			TWCR = _BV(TWEN) |  _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    5d18:	85 ea       	ldi	r24, 0xA5	; 165
    5d1a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
    5d1e:	26 c0       	rjmp	.+76     	; 0x5d6c <__vector_26+0x1ae>

// Error cases
		case TW_MT_SLA_NACK:	// SLA+W transmitted NACK received
			i2c.done = 1;
    5d20:	81 e0       	ldi	r24, 0x01	; 1
    5d22:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <i2c+0x2>
			i2c.enable = 0;
    5d26:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x1>
			i2c.flags |= I2C_TW_MT_SLA_NACK;
    5d2a:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <i2c+0x3>
    5d2e:	88 60       	ori	r24, 0x08	; 8
    5d30:	1a c0       	rjmp	.+52     	; 0x5d66 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MR_SLA_NACK:	// SLA+R transmitted NACK received
			i2c.done = 1;
    5d32:	81 e0       	ldi	r24, 0x01	; 1
    5d34:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <i2c+0x2>
			i2c.enable = 0;
    5d38:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x1>
			i2c.flags |= I2C_TW_MR_SLA_NACK;
    5d3c:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <i2c+0x3>
    5d40:	80 61       	ori	r24, 0x10	; 16
    5d42:	11 c0       	rjmp	.+34     	; 0x5d66 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MT_DATA_NACK:	// Data Transmitted NACK received
			i2c.done = 1;
    5d44:	81 e0       	ldi	r24, 0x01	; 1
    5d46:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <i2c+0x2>
			i2c.enable = 0;
    5d4a:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x1>
			i2c.flags |= I2C_TW_MT_DATA_NACK;
    5d4e:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <i2c+0x3>
    5d52:	80 62       	ori	r24, 0x20	; 32
    5d54:	08 c0       	rjmp	.+16     	; 0x5d66 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		default:				// Error
			i2c.done = 1;
    5d56:	81 e0       	ldi	r24, 0x01	; 1
    5d58:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <i2c+0x2>
			i2c.enable = 0;
    5d5c:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x1>
			// ERROR
			i2c.flags |= I2C_BUS_ERROR;
    5d60:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <i2c+0x3>
    5d64:	80 64       	ori	r24, 0x40	; 64
    5d66:	80 93 3f 1a 	sts	0x1A3F, r24	; 0x801a3f <i2c+0x3>
			i2c_next();
    5d6a:	1f df       	rcall	.-450    	; 0x5baa <i2c_next>
			break;
	}
}
    5d6c:	ff 91       	pop	r31
    5d6e:	ef 91       	pop	r30
    5d70:	bf 91       	pop	r27
    5d72:	af 91       	pop	r26
    5d74:	9f 91       	pop	r25
    5d76:	8f 91       	pop	r24
    5d78:	7f 91       	pop	r23
    5d7a:	6f 91       	pop	r22
    5d7c:	5f 91       	pop	r21
    5d7e:	4f 91       	pop	r20
    5d80:	3f 91       	pop	r19
    5d82:	2f 91       	pop	r18
    5d84:	0f 90       	pop	r0
    5d86:	0b be       	out	0x3b, r0	; 59
    5d88:	0f 90       	pop	r0
    5d8a:	0f be       	out	0x3f, r0	; 63
    5d8c:	0f 90       	pop	r0
    5d8e:	1f 90       	pop	r1
    5d90:	18 95       	reti

00005d92 <i2c_print_error>:
/// @brief Display Errors for i2c_task_op[index]
///
/// @param[in] index: index of i2c_task_op[] array
/// @return  void
void i2c_print_error(i2c_op_t *o)
{
    5d92:	cf 93       	push	r28
    5d94:	00 d0       	rcall	.+0      	; 0x5d96 <i2c_print_error+0x4>
    5d96:	00 d0       	rcall	.+0      	; 0x5d98 <i2c_print_error+0x6>
    5d98:	1f 92       	push	r1
    int flags = o->flags;
    5d9a:	fc 01       	movw	r30, r24
    5d9c:	c3 81       	ldd	r28, Z+3	; 0x03

	if(flags)
    5d9e:	cc 23       	and	r28, r28
    5da0:	09 f4       	brne	.+2      	; 0x5da4 <i2c_print_error+0x12>
    5da2:	67 c0       	rjmp	.+206    	; 0x5e72 <i2c_print_error+0xe0>
	{
		printf("  %s\n", (i2c.done ? "DONE" : "ACTIVE") );
    5da4:	80 91 3e 1a 	lds	r24, 0x1A3E	; 0x801a3e <i2c+0x2>
    5da8:	81 11       	cpse	r24, r1
    5daa:	03 c0       	rjmp	.+6      	; 0x5db2 <i2c_print_error+0x20>
    5dac:	88 e2       	ldi	r24, 0x28	; 40
    5dae:	93 e0       	ldi	r25, 0x03	; 3
    5db0:	02 c0       	rjmp	.+4      	; 0x5db6 <i2c_print_error+0x24>
    5db2:	83 e2       	ldi	r24, 0x23	; 35
    5db4:	93 e0       	ldi	r25, 0x03	; 3
    5db6:	ed b7       	in	r30, 0x3d	; 61
    5db8:	fe b7       	in	r31, 0x3e	; 62
    5dba:	95 83       	std	Z+5, r25	; 0x05
    5dbc:	84 83       	std	Z+4, r24	; 0x04
    5dbe:	83 ec       	ldi	r24, 0xC3	; 195
    5dc0:	93 e0       	ldi	r25, 0x03	; 3
    5dc2:	a0 e0       	ldi	r26, 0x00	; 0
    5dc4:	81 83       	std	Z+1, r24	; 0x01
    5dc6:	92 83       	std	Z+2, r25	; 0x02
    5dc8:	a3 83       	std	Z+3, r26	; 0x03
    5dca:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
		if(flags & I2C_OP_TIMEOUT)
    5dce:	c0 ff       	sbrs	r28, 0
    5dd0:	0a c0       	rjmp	.+20     	; 0x5de6 <i2c_print_error+0x54>
			printf("  OP_TIMEOUT\n");
    5dd2:	85 eb       	ldi	r24, 0xB5	; 181
    5dd4:	93 e0       	ldi	r25, 0x03	; 3
    5dd6:	a0 e0       	ldi	r26, 0x00	; 0
    5dd8:	ed b7       	in	r30, 0x3d	; 61
    5dda:	fe b7       	in	r31, 0x3e	; 62
    5ddc:	81 83       	std	Z+1, r24	; 0x01
    5dde:	92 83       	std	Z+2, r25	; 0x02
    5de0:	a3 83       	std	Z+3, r26	; 0x03
    5de2:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
		if(flags & I2C_OP_LEN)
    5de6:	c1 ff       	sbrs	r28, 1
    5de8:	0a c0       	rjmp	.+20     	; 0x5dfe <i2c_print_error+0x6c>
			printf("  OP_LEN\n");
    5dea:	8b ea       	ldi	r24, 0xAB	; 171
    5dec:	93 e0       	ldi	r25, 0x03	; 3
    5dee:	a0 e0       	ldi	r26, 0x00	; 0
    5df0:	ed b7       	in	r30, 0x3d	; 61
    5df2:	fe b7       	in	r31, 0x3e	; 62
    5df4:	81 83       	std	Z+1, r24	; 0x01
    5df6:	92 83       	std	Z+2, r25	; 0x02
    5df8:	a3 83       	std	Z+3, r26	; 0x03
    5dfa:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
		if(flags & I2C_OP_ERROR)
    5dfe:	c2 ff       	sbrs	r28, 2
    5e00:	0a c0       	rjmp	.+20     	; 0x5e16 <i2c_print_error+0x84>
			printf("  OP_ERROR\n");
    5e02:	8f e9       	ldi	r24, 0x9F	; 159
    5e04:	93 e0       	ldi	r25, 0x03	; 3
    5e06:	a0 e0       	ldi	r26, 0x00	; 0
    5e08:	ed b7       	in	r30, 0x3d	; 61
    5e0a:	fe b7       	in	r31, 0x3e	; 62
    5e0c:	81 83       	std	Z+1, r24	; 0x01
    5e0e:	92 83       	std	Z+2, r25	; 0x02
    5e10:	a3 83       	std	Z+3, r26	; 0x03
    5e12:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
		if(flags & I2C_TW_MR_SLA_NACK)
    5e16:	c4 ff       	sbrs	r28, 4
    5e18:	0a c0       	rjmp	.+20     	; 0x5e2e <i2c_print_error+0x9c>
			printf("  TW_MR_SLA_NACK\n");
    5e1a:	8d e8       	ldi	r24, 0x8D	; 141
    5e1c:	93 e0       	ldi	r25, 0x03	; 3
    5e1e:	a0 e0       	ldi	r26, 0x00	; 0
    5e20:	ed b7       	in	r30, 0x3d	; 61
    5e22:	fe b7       	in	r31, 0x3e	; 62
    5e24:	81 83       	std	Z+1, r24	; 0x01
    5e26:	92 83       	std	Z+2, r25	; 0x02
    5e28:	a3 83       	std	Z+3, r26	; 0x03
    5e2a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
		if(flags & I2C_TW_MT_SLA_NACK)
    5e2e:	c3 ff       	sbrs	r28, 3
    5e30:	0a c0       	rjmp	.+20     	; 0x5e46 <i2c_print_error+0xb4>
			printf("  TW_MT_SLA_NACK\n");
    5e32:	8b e7       	ldi	r24, 0x7B	; 123
    5e34:	93 e0       	ldi	r25, 0x03	; 3
    5e36:	a0 e0       	ldi	r26, 0x00	; 0
    5e38:	ed b7       	in	r30, 0x3d	; 61
    5e3a:	fe b7       	in	r31, 0x3e	; 62
    5e3c:	81 83       	std	Z+1, r24	; 0x01
    5e3e:	92 83       	std	Z+2, r25	; 0x02
    5e40:	a3 83       	std	Z+3, r26	; 0x03
    5e42:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
		if(flags & I2C_TW_MT_DATA_NACK)
    5e46:	c5 ff       	sbrs	r28, 5
    5e48:	0a c0       	rjmp	.+20     	; 0x5e5e <i2c_print_error+0xcc>
			printf("  TW_MT_DATA_NACK\n");
    5e4a:	88 e6       	ldi	r24, 0x68	; 104
    5e4c:	93 e0       	ldi	r25, 0x03	; 3
    5e4e:	a0 e0       	ldi	r26, 0x00	; 0
    5e50:	ed b7       	in	r30, 0x3d	; 61
    5e52:	fe b7       	in	r31, 0x3e	; 62
    5e54:	81 83       	std	Z+1, r24	; 0x01
    5e56:	92 83       	std	Z+2, r25	; 0x02
    5e58:	a3 83       	std	Z+3, r26	; 0x03
    5e5a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
		printf("\n");
    5e5e:	86 e6       	ldi	r24, 0x66	; 102
    5e60:	93 e0       	ldi	r25, 0x03	; 3
    5e62:	a0 e0       	ldi	r26, 0x00	; 0
    5e64:	ed b7       	in	r30, 0x3d	; 61
    5e66:	fe b7       	in	r31, 0x3e	; 62
    5e68:	81 83       	std	Z+1, r24	; 0x01
    5e6a:	92 83       	std	Z+2, r25	; 0x02
    5e6c:	a3 83       	std	Z+3, r26	; 0x03
    5e6e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
	}
}
    5e72:	0f 90       	pop	r0
    5e74:	0f 90       	pop	r0
    5e76:	0f 90       	pop	r0
    5e78:	0f 90       	pop	r0
    5e7a:	0f 90       	pop	r0
    5e7c:	cf 91       	pop	r28
    5e7e:	08 95       	ret

00005e80 <i2c_display_task_errors>:

///@brief Display any task errors
void i2c_display_task_errors()
{
    5e80:	6f 92       	push	r6
    5e82:	7f 92       	push	r7
    5e84:	8f 92       	push	r8
    5e86:	af 92       	push	r10
    5e88:	bf 92       	push	r11
    5e8a:	cf 92       	push	r12
    5e8c:	df 92       	push	r13
    5e8e:	ef 92       	push	r14
    5e90:	0f 93       	push	r16
    5e92:	1f 93       	push	r17
    5e94:	cf 93       	push	r28
    5e96:	df 93       	push	r29
    5e98:	00 d0       	rcall	.+0      	; 0x5e9a <i2c_display_task_errors+0x1a>
    5e9a:	00 d0       	rcall	.+0      	; 0x5e9c <i2c_display_task_errors+0x1c>
    5e9c:	1f 92       	push	r1
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
    5e9e:	80 91 6e 17 	lds	r24, 0x176E	; 0x80176e <i2c_task+0x2>
    5ea2:	90 e0       	ldi	r25, 0x00	; 0
    5ea4:	ed b7       	in	r30, 0x3d	; 61
    5ea6:	fe b7       	in	r31, 0x3e	; 62
    5ea8:	95 83       	std	Z+5, r25	; 0x05
    5eaa:	84 83       	std	Z+4, r24	; 0x04
    5eac:	83 e5       	ldi	r24, 0x53	; 83
    5eae:	93 e0       	ldi	r25, 0x03	; 3
    5eb0:	a0 e0       	ldi	r26, 0x00	; 0
    5eb2:	81 83       	std	Z+1, r24	; 0x01
    5eb4:	92 83       	std	Z+2, r25	; 0x02
    5eb6:	a3 83       	std	Z+3, r26	; 0x03
    5eb8:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
    5ebc:	80 91 6f 17 	lds	r24, 0x176F	; 0x80176f <i2c_task+0x3>
    5ec0:	90 e0       	ldi	r25, 0x00	; 0
    5ec2:	ed b7       	in	r30, 0x3d	; 61
    5ec4:	fe b7       	in	r31, 0x3e	; 62
    5ec6:	95 83       	std	Z+5, r25	; 0x05
    5ec8:	84 83       	std	Z+4, r24	; 0x04
    5eca:	8f e3       	ldi	r24, 0x3F	; 63
    5ecc:	93 e0       	ldi	r25, 0x03	; 3
    5ece:	a0 e0       	ldi	r26, 0x00	; 0
    5ed0:	81 83       	std	Z+1, r24	; 0x01
    5ed2:	92 83       	std	Z+2, r25	; 0x02
    5ed4:	a3 83       	std	Z+3, r26	; 0x03
    5ed6:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    5eda:	cc e4       	ldi	r28, 0x4C	; 76
    5edc:	d7 e1       	ldi	r29, 0x17	; 23
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5ede:	00 e0       	ldi	r16, 0x00	; 0
    5ee0:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("task: %d\n", (int) i);
    5ee2:	85 e3       	ldi	r24, 0x35	; 53
    5ee4:	93 e0       	ldi	r25, 0x03	; 3
    5ee6:	6c 01       	movw	r12, r24
    5ee8:	e1 2c       	mov	r14, r1
		i2c_print_error(i2c_task_op[i]);
		printf("\n");
    5eea:	83 e3       	ldi	r24, 0x33	; 51
    5eec:	93 e0       	ldi	r25, 0x03	; 3
    5eee:	3c 01       	movw	r6, r24
    5ef0:	81 2c       	mov	r8, r1
void i2c_display_task_errors()
{
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5ef2:	30 2f       	mov	r19, r16
    5ef4:	21 2f       	mov	r18, r17
    5ef6:	5e 01       	movw	r10, r28
    5ef8:	0f 5f       	subi	r16, 0xFF	; 255
    5efa:	1f 4f       	sbci	r17, 0xFF	; 255
    5efc:	88 81       	ld	r24, Y
    5efe:	99 81       	ldd	r25, Y+1	; 0x01
    5f00:	89 2b       	or	r24, r25
    5f02:	b1 f0       	breq	.+44     	; 0x5f30 <i2c_display_task_errors+0xb0>
	{
		printf("task: %d\n", (int) i);
    5f04:	ed b7       	in	r30, 0x3d	; 61
    5f06:	fe b7       	in	r31, 0x3e	; 62
    5f08:	34 83       	std	Z+4, r19	; 0x04
    5f0a:	25 83       	std	Z+5, r18	; 0x05
    5f0c:	c1 82       	std	Z+1, r12	; 0x01
    5f0e:	d2 82       	std	Z+2, r13	; 0x02
    5f10:	e3 82       	std	Z+3, r14	; 0x03
    5f12:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    5f16:	22 96       	adiw	r28, 0x02	; 2
		i2c_print_error(i2c_task_op[i]);
    5f18:	f5 01       	movw	r30, r10
    5f1a:	80 81       	ld	r24, Z
    5f1c:	91 81       	ldd	r25, Z+1	; 0x01
    5f1e:	39 df       	rcall	.-398    	; 0x5d92 <i2c_print_error>
		printf("\n");
    5f20:	ed b7       	in	r30, 0x3d	; 61
    5f22:	fe b7       	in	r31, 0x3e	; 62
    5f24:	61 82       	std	Z+1, r6	; 0x01
    5f26:	72 82       	std	Z+2, r7	; 0x02
    5f28:	83 82       	std	Z+3, r8	; 0x03
    5f2a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    5f2e:	e1 cf       	rjmp	.-62     	; 0x5ef2 <i2c_display_task_errors+0x72>
	}
}
    5f30:	0f 90       	pop	r0
    5f32:	0f 90       	pop	r0
    5f34:	0f 90       	pop	r0
    5f36:	0f 90       	pop	r0
    5f38:	0f 90       	pop	r0
    5f3a:	df 91       	pop	r29
    5f3c:	cf 91       	pop	r28
    5f3e:	1f 91       	pop	r17
    5f40:	0f 91       	pop	r16
    5f42:	ef 90       	pop	r14
    5f44:	df 90       	pop	r13
    5f46:	cf 90       	pop	r12
    5f48:	bf 90       	pop	r11
    5f4a:	af 90       	pop	r10
    5f4c:	8f 90       	pop	r8
    5f4e:	7f 90       	pop	r7
    5f50:	6f 90       	pop	r6
    5f52:	08 95       	ret

00005f54 <i2c_rtc_write.part.0>:
/// @return 0 if not running.
/// @return -1 ERROR
int8_t rtc_run_test()
{
	return ( rtc_run(-1) );
}
    5f54:	cf 92       	push	r12
    5f56:	df 92       	push	r13
    5f58:	ef 92       	push	r14
    5f5a:	0f 93       	push	r16
    5f5c:	1f 93       	push	r17
    5f5e:	cf 93       	push	r28
    5f60:	df 93       	push	r29
    5f62:	cd b7       	in	r28, 0x3d	; 61
    5f64:	de b7       	in	r29, 0x3e	; 62
    5f66:	2c 97       	sbiw	r28, 0x0c	; 12
    5f68:	0f b6       	in	r0, 0x3f	; 63
    5f6a:	f8 94       	cli
    5f6c:	de bf       	out	0x3e, r29	; 62
    5f6e:	0f be       	out	0x3f, r0	; 63
    5f70:	cd bf       	out	0x3d, r28	; 61
    5f72:	08 2f       	mov	r16, r24
    5f74:	6c 83       	std	Y+4, r22	; 0x04
    5f76:	30 e0       	ldi	r19, 0x00	; 0
    5f78:	62 2f       	mov	r22, r18
    5f7a:	70 e0       	ldi	r23, 0x00	; 0
    5f7c:	83 2f       	mov	r24, r19
    5f7e:	03 2e       	mov	r0, r19
    5f80:	00 0c       	add	r0, r0
    5f82:	99 0b       	sbc	r25, r25
    5f84:	86 17       	cp	r24, r22
    5f86:	97 07       	cpc	r25, r23
    5f88:	6c f4       	brge	.+26     	; 0x5fa4 <i2c_rtc_write.part.0+0x50>
    5f8a:	e5 e0       	ldi	r30, 0x05	; 5
    5f8c:	f0 e0       	ldi	r31, 0x00	; 0
    5f8e:	ec 0f       	add	r30, r28
    5f90:	fd 1f       	adc	r31, r29
    5f92:	e8 0f       	add	r30, r24
    5f94:	f9 1f       	adc	r31, r25
    5f96:	da 01       	movw	r26, r20
    5f98:	a8 0f       	add	r26, r24
    5f9a:	b9 1f       	adc	r27, r25
    5f9c:	8c 91       	ld	r24, X
    5f9e:	80 83       	st	Z, r24
    5fa0:	3f 5f       	subi	r19, 0xFF	; 255
    5fa2:	ec cf       	rjmp	.-40     	; 0x5f7c <i2c_rtc_write.part.0+0x28>
    5fa4:	11 e0       	ldi	r17, 0x01	; 1
    5fa6:	12 0f       	add	r17, r18
    5fa8:	21 2f       	mov	r18, r17
    5faa:	ae 01       	movw	r20, r28
    5fac:	4c 5f       	subi	r20, 0xFC	; 252
    5fae:	5f 4f       	sbci	r21, 0xFF	; 255
    5fb0:	60 e0       	ldi	r22, 0x00	; 0
    5fb2:	80 2f       	mov	r24, r16
    5fb4:	61 dd       	rcall	.-1342   	; 0x5a78 <i2c_fn>
    5fb6:	88 23       	and	r24, r24
    5fb8:	11 f0       	breq	.+4      	; 0x5fbe <i2c_rtc_write.part.0+0x6a>
    5fba:	81 e0       	ldi	r24, 0x01	; 1
    5fbc:	1c c0       	rjmp	.+56     	; 0x5ff6 <i2c_rtc_write.part.0+0xa2>
    5fbe:	80 ee       	ldi	r24, 0xE0	; 224
    5fc0:	94 e0       	ldi	r25, 0x04	; 4
    5fc2:	6c 01       	movw	r12, r24
    5fc4:	e1 2c       	mov	r14, r1
    5fc6:	ed b7       	in	r30, 0x3d	; 61
    5fc8:	fe b7       	in	r31, 0x3e	; 62
    5fca:	c1 82       	std	Z+1, r12	; 0x01
    5fcc:	d2 82       	std	Z+2, r13	; 0x02
    5fce:	e3 82       	std	Z+3, r14	; 0x03
    5fd0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    5fd4:	21 2f       	mov	r18, r17
    5fd6:	ae 01       	movw	r20, r28
    5fd8:	4c 5f       	subi	r20, 0xFC	; 252
    5fda:	5f 4f       	sbci	r21, 0xFF	; 255
    5fdc:	60 e0       	ldi	r22, 0x00	; 0
    5fde:	80 2f       	mov	r24, r16
    5fe0:	4b dd       	rcall	.-1386   	; 0x5a78 <i2c_fn>
    5fe2:	81 11       	cpse	r24, r1
    5fe4:	ea cf       	rjmp	.-44     	; 0x5fba <i2c_rtc_write.part.0+0x66>
    5fe6:	ed b7       	in	r30, 0x3d	; 61
    5fe8:	fe b7       	in	r31, 0x3e	; 62
    5fea:	c1 82       	std	Z+1, r12	; 0x01
    5fec:	d2 82       	std	Z+2, r13	; 0x02
    5fee:	e3 82       	std	Z+3, r14	; 0x03
    5ff0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    5ff4:	80 e0       	ldi	r24, 0x00	; 0
    5ff6:	2c 96       	adiw	r28, 0x0c	; 12
    5ff8:	0f b6       	in	r0, 0x3f	; 63
    5ffa:	f8 94       	cli
    5ffc:	de bf       	out	0x3e, r29	; 62
    5ffe:	0f be       	out	0x3f, r0	; 63
    6000:	cd bf       	out	0x3d, r28	; 61
    6002:	df 91       	pop	r29
    6004:	cf 91       	pop	r28
    6006:	1f 91       	pop	r17
    6008:	0f 91       	pop	r16
    600a:	ef 90       	pop	r14
    600c:	df 90       	pop	r13
    600e:	cf 90       	pop	r12
    6010:	08 95       	ret

00006012 <BINtoBCD>:
    6012:	6a e0       	ldi	r22, 0x0A	; 10
    6014:	0e 94 f3 e6 	call	0x1cde6	; 0x1cde6 <__udivmodqi4>
    6018:	82 95       	swap	r24
    601a:	80 7f       	andi	r24, 0xF0	; 240
    601c:	89 2b       	or	r24, r25
    601e:	08 95       	ret

00006020 <BCDtoBIN>:
    6020:	98 2f       	mov	r25, r24
    6022:	92 95       	swap	r25
    6024:	9f 70       	andi	r25, 0x0F	; 15
    6026:	8f 70       	andi	r24, 0x0F	; 15
    6028:	2a e0       	ldi	r18, 0x0A	; 10
    602a:	92 9f       	mul	r25, r18
    602c:	80 0d       	add	r24, r0
    602e:	11 24       	eor	r1, r1
    6030:	08 95       	ret

00006032 <i2c_rtc_read>:
    6032:	af 92       	push	r10
    6034:	bf 92       	push	r11
    6036:	cf 92       	push	r12
    6038:	df 92       	push	r13
    603a:	ef 92       	push	r14
    603c:	0f 93       	push	r16
    603e:	1f 93       	push	r17
    6040:	cf 93       	push	r28
    6042:	df 93       	push	r29
    6044:	00 d0       	rcall	.+0      	; 0x6046 <i2c_rtc_read+0x14>
    6046:	00 d0       	rcall	.+0      	; 0x6048 <i2c_rtc_read+0x16>
    6048:	cd b7       	in	r28, 0x3d	; 61
    604a:	de b7       	in	r29, 0x3e	; 62
    604c:	6c 83       	std	Y+4, r22	; 0x04
    604e:	9f ef       	ldi	r25, 0xFF	; 255
    6050:	92 0f       	add	r25, r18
    6052:	98 30       	cpi	r25, 0x08	; 8
    6054:	b0 f5       	brcc	.+108    	; 0x60c2 <i2c_rtc_read+0x90>
    6056:	02 2f       	mov	r16, r18
    6058:	5a 01       	movw	r10, r20
    605a:	18 2f       	mov	r17, r24
    605c:	21 e0       	ldi	r18, 0x01	; 1
    605e:	ae 01       	movw	r20, r28
    6060:	4c 5f       	subi	r20, 0xFC	; 252
    6062:	5f 4f       	sbci	r21, 0xFF	; 255
    6064:	60 e0       	ldi	r22, 0x00	; 0
    6066:	08 dd       	rcall	.-1520   	; 0x5a78 <i2c_fn>
    6068:	81 11       	cpse	r24, r1
    606a:	1a c0       	rjmp	.+52     	; 0x60a0 <i2c_rtc_read+0x6e>
    606c:	84 ec       	ldi	r24, 0xC4	; 196
    606e:	94 e0       	ldi	r25, 0x04	; 4
    6070:	6c 01       	movw	r12, r24
    6072:	e1 2c       	mov	r14, r1
    6074:	ed b7       	in	r30, 0x3d	; 61
    6076:	fe b7       	in	r31, 0x3e	; 62
    6078:	c1 82       	std	Z+1, r12	; 0x01
    607a:	d2 82       	std	Z+2, r13	; 0x02
    607c:	e3 82       	std	Z+3, r14	; 0x03
    607e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    6082:	21 e0       	ldi	r18, 0x01	; 1
    6084:	ae 01       	movw	r20, r28
    6086:	4c 5f       	subi	r20, 0xFC	; 252
    6088:	5f 4f       	sbci	r21, 0xFF	; 255
    608a:	60 e0       	ldi	r22, 0x00	; 0
    608c:	81 2f       	mov	r24, r17
    608e:	f4 dc       	rcall	.-1560   	; 0x5a78 <i2c_fn>
    6090:	81 11       	cpse	r24, r1
    6092:	06 c0       	rjmp	.+12     	; 0x60a0 <i2c_rtc_read+0x6e>
    6094:	ed b7       	in	r30, 0x3d	; 61
    6096:	fe b7       	in	r31, 0x3e	; 62
    6098:	c1 82       	std	Z+1, r12	; 0x01
    609a:	d2 82       	std	Z+2, r13	; 0x02
    609c:	e3 82       	std	Z+3, r14	; 0x03
    609e:	0f c0       	rjmp	.+30     	; 0x60be <i2c_rtc_read+0x8c>
    60a0:	20 2f       	mov	r18, r16
    60a2:	a5 01       	movw	r20, r10
    60a4:	61 e0       	ldi	r22, 0x01	; 1
    60a6:	81 2f       	mov	r24, r17
    60a8:	e7 dc       	rcall	.-1586   	; 0x5a78 <i2c_fn>
    60aa:	81 11       	cpse	r24, r1
    60ac:	0c c0       	rjmp	.+24     	; 0x60c6 <i2c_rtc_read+0x94>
    60ae:	8b ea       	ldi	r24, 0xAB	; 171
    60b0:	94 e0       	ldi	r25, 0x04	; 4
    60b2:	a0 e0       	ldi	r26, 0x00	; 0
    60b4:	ed b7       	in	r30, 0x3d	; 61
    60b6:	fe b7       	in	r31, 0x3e	; 62
    60b8:	81 83       	std	Z+1, r24	; 0x01
    60ba:	92 83       	std	Z+2, r25	; 0x02
    60bc:	a3 83       	std	Z+3, r26	; 0x03
    60be:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    60c2:	80 e0       	ldi	r24, 0x00	; 0
    60c4:	01 c0       	rjmp	.+2      	; 0x60c8 <i2c_rtc_read+0x96>
    60c6:	81 e0       	ldi	r24, 0x01	; 1
    60c8:	0f 90       	pop	r0
    60ca:	0f 90       	pop	r0
    60cc:	0f 90       	pop	r0
    60ce:	0f 90       	pop	r0
    60d0:	df 91       	pop	r29
    60d2:	cf 91       	pop	r28
    60d4:	1f 91       	pop	r17
    60d6:	0f 91       	pop	r16
    60d8:	ef 90       	pop	r14
    60da:	df 90       	pop	r13
    60dc:	cf 90       	pop	r12
    60de:	bf 90       	pop	r11
    60e0:	af 90       	pop	r10
    60e2:	08 95       	ret

000060e4 <i2c_rtc_init>:
    60e4:	60 ea       	ldi	r22, 0xA0	; 160
    60e6:	76 e8       	ldi	r23, 0x86	; 134
    60e8:	81 e0       	ldi	r24, 0x01	; 1
    60ea:	90 e0       	ldi	r25, 0x00	; 0
    60ec:	cc cb       	rjmp	.-2152   	; 0x5886 <i2c_init>
    60ee:	08 95       	ret

000060f0 <rtc_write>:
    60f0:	ab e0       	ldi	r26, 0x0B	; 11
    60f2:	b0 e0       	ldi	r27, 0x00	; 0
    60f4:	ee e7       	ldi	r30, 0x7E	; 126
    60f6:	f0 e3       	ldi	r31, 0x30	; 48
    60f8:	0c 94 a1 e7 	jmp	0x1cf42	; 0x1cf42 <__prologue_saves__+0x1c>
    60fc:	8c 01       	movw	r16, r24
    60fe:	fc 01       	movw	r30, r24
    6100:	80 81       	ld	r24, Z
    6102:	87 df       	rcall	.-242    	; 0x6012 <BINtoBCD>
    6104:	8f 77       	andi	r24, 0x7F	; 127
    6106:	8c 83       	std	Y+4, r24	; 0x04
    6108:	f8 01       	movw	r30, r16
    610a:	82 81       	ldd	r24, Z+2	; 0x02
    610c:	82 df       	rcall	.-252    	; 0x6012 <BINtoBCD>
    610e:	8f 77       	andi	r24, 0x7F	; 127
    6110:	8d 83       	std	Y+5, r24	; 0x05
    6112:	f8 01       	movw	r30, r16
    6114:	84 81       	ldd	r24, Z+4	; 0x04
    6116:	7d df       	rcall	.-262    	; 0x6012 <BINtoBCD>
    6118:	8f 73       	andi	r24, 0x3F	; 63
    611a:	8e 83       	std	Y+6, r24	; 0x06
    611c:	f8 01       	movw	r30, r16
    611e:	84 85       	ldd	r24, Z+12	; 0x0c
    6120:	87 70       	andi	r24, 0x07	; 7
    6122:	8f 5f       	subi	r24, 0xFF	; 255
    6124:	8f 83       	std	Y+7, r24	; 0x07
    6126:	86 81       	ldd	r24, Z+6	; 0x06
    6128:	74 df       	rcall	.-280    	; 0x6012 <BINtoBCD>
    612a:	8f 73       	andi	r24, 0x3F	; 63
    612c:	88 87       	std	Y+8, r24	; 0x08
    612e:	f8 01       	movw	r30, r16
    6130:	80 85       	ldd	r24, Z+8	; 0x08
    6132:	8f 5f       	subi	r24, 0xFF	; 255
    6134:	6e df       	rcall	.-292    	; 0x6012 <BINtoBCD>
    6136:	8f 71       	andi	r24, 0x1F	; 31
    6138:	89 87       	std	Y+9, r24	; 0x09
    613a:	f8 01       	movw	r30, r16
    613c:	82 85       	ldd	r24, Z+10	; 0x0a
    613e:	84 56       	subi	r24, 0x64	; 100
    6140:	68 df       	rcall	.-304    	; 0x6012 <BINtoBCD>
    6142:	8a 87       	std	Y+10, r24	; 0x0a
    6144:	83 e9       	ldi	r24, 0x93	; 147
    6146:	8b 87       	std	Y+11, r24	; 0x0b
    6148:	28 e0       	ldi	r18, 0x08	; 8
    614a:	ae 01       	movw	r20, r28
    614c:	4c 5f       	subi	r20, 0xFC	; 252
    614e:	5f 4f       	sbci	r21, 0xFF	; 255
    6150:	60 e0       	ldi	r22, 0x00	; 0
    6152:	88 e6       	ldi	r24, 0x68	; 104
    6154:	ff de       	rcall	.-514    	; 0x5f54 <i2c_rtc_write.part.0>
    6156:	81 11       	cpse	r24, r1
    6158:	0c c0       	rjmp	.+24     	; 0x6172 <rtc_write+0x82>
    615a:	8a e9       	ldi	r24, 0x9A	; 154
    615c:	94 e0       	ldi	r25, 0x04	; 4
    615e:	a0 e0       	ldi	r26, 0x00	; 0
    6160:	ed b7       	in	r30, 0x3d	; 61
    6162:	fe b7       	in	r31, 0x3e	; 62
    6164:	81 83       	std	Z+1, r24	; 0x01
    6166:	92 83       	std	Z+2, r25	; 0x02
    6168:	a3 83       	std	Z+3, r26	; 0x03
    616a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    616e:	80 e0       	ldi	r24, 0x00	; 0
    6170:	01 c0       	rjmp	.+2      	; 0x6174 <rtc_write+0x84>
    6172:	81 e0       	ldi	r24, 0x01	; 1
    6174:	2b 96       	adiw	r28, 0x0b	; 11
    6176:	e4 e0       	ldi	r30, 0x04	; 4
    6178:	0c 94 bd e7 	jmp	0x1cf7a	; 0x1cf7a <__epilogue_restores__+0x1c>

0000617c <rtc_read>:
    617c:	ab e0       	ldi	r26, 0x0B	; 11
    617e:	b0 e0       	ldi	r27, 0x00	; 0
    6180:	e4 ec       	ldi	r30, 0xC4	; 196
    6182:	f0 e3       	ldi	r31, 0x30	; 48
    6184:	0c 94 a1 e7 	jmp	0x1cf42	; 0x1cf42 <__prologue_saves__+0x1c>
    6188:	8c 01       	movw	r16, r24
    618a:	28 e0       	ldi	r18, 0x08	; 8
    618c:	ae 01       	movw	r20, r28
    618e:	4c 5f       	subi	r20, 0xFC	; 252
    6190:	5f 4f       	sbci	r21, 0xFF	; 255
    6192:	60 e0       	ldi	r22, 0x00	; 0
    6194:	88 e6       	ldi	r24, 0x68	; 104
    6196:	4d df       	rcall	.-358    	; 0x6032 <i2c_rtc_read>
    6198:	81 11       	cpse	r24, r1
    619a:	0c c0       	rjmp	.+24     	; 0x61b4 <rtc_read+0x38>
    619c:	8a e8       	ldi	r24, 0x8A	; 138
    619e:	94 e0       	ldi	r25, 0x04	; 4
    61a0:	a0 e0       	ldi	r26, 0x00	; 0
    61a2:	ed b7       	in	r30, 0x3d	; 61
    61a4:	fe b7       	in	r31, 0x3e	; 62
    61a6:	81 83       	std	Z+1, r24	; 0x01
    61a8:	92 83       	std	Z+2, r25	; 0x02
    61aa:	a3 83       	std	Z+3, r26	; 0x03
    61ac:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    61b0:	80 e0       	ldi	r24, 0x00	; 0
    61b2:	33 c0       	rjmp	.+102    	; 0x621a <rtc_read+0x9e>
    61b4:	8c 81       	ldd	r24, Y+4	; 0x04
    61b6:	8f 77       	andi	r24, 0x7F	; 127
    61b8:	33 df       	rcall	.-410    	; 0x6020 <BCDtoBIN>
    61ba:	90 e0       	ldi	r25, 0x00	; 0
    61bc:	f8 01       	movw	r30, r16
    61be:	91 83       	std	Z+1, r25	; 0x01
    61c0:	80 83       	st	Z, r24
    61c2:	8d 81       	ldd	r24, Y+5	; 0x05
    61c4:	8f 77       	andi	r24, 0x7F	; 127
    61c6:	2c df       	rcall	.-424    	; 0x6020 <BCDtoBIN>
    61c8:	90 e0       	ldi	r25, 0x00	; 0
    61ca:	f8 01       	movw	r30, r16
    61cc:	93 83       	std	Z+3, r25	; 0x03
    61ce:	82 83       	std	Z+2, r24	; 0x02
    61d0:	8e 81       	ldd	r24, Y+6	; 0x06
    61d2:	8f 73       	andi	r24, 0x3F	; 63
    61d4:	25 df       	rcall	.-438    	; 0x6020 <BCDtoBIN>
    61d6:	90 e0       	ldi	r25, 0x00	; 0
    61d8:	f8 01       	movw	r30, r16
    61da:	95 83       	std	Z+5, r25	; 0x05
    61dc:	84 83       	std	Z+4, r24	; 0x04
    61de:	8f 81       	ldd	r24, Y+7	; 0x07
    61e0:	87 70       	andi	r24, 0x07	; 7
    61e2:	90 e0       	ldi	r25, 0x00	; 0
    61e4:	01 97       	sbiw	r24, 0x01	; 1
    61e6:	95 87       	std	Z+13, r25	; 0x0d
    61e8:	84 87       	std	Z+12, r24	; 0x0c
    61ea:	88 85       	ldd	r24, Y+8	; 0x08
    61ec:	8f 73       	andi	r24, 0x3F	; 63
    61ee:	18 df       	rcall	.-464    	; 0x6020 <BCDtoBIN>
    61f0:	90 e0       	ldi	r25, 0x00	; 0
    61f2:	f8 01       	movw	r30, r16
    61f4:	97 83       	std	Z+7, r25	; 0x07
    61f6:	86 83       	std	Z+6, r24	; 0x06
    61f8:	89 85       	ldd	r24, Y+9	; 0x09
    61fa:	8f 71       	andi	r24, 0x1F	; 31
    61fc:	11 df       	rcall	.-478    	; 0x6020 <BCDtoBIN>
    61fe:	90 e0       	ldi	r25, 0x00	; 0
    6200:	01 97       	sbiw	r24, 0x01	; 1
    6202:	f8 01       	movw	r30, r16
    6204:	91 87       	std	Z+9, r25	; 0x09
    6206:	80 87       	std	Z+8, r24	; 0x08
    6208:	8a 85       	ldd	r24, Y+10	; 0x0a
    620a:	0a df       	rcall	.-492    	; 0x6020 <BCDtoBIN>
    620c:	90 e0       	ldi	r25, 0x00	; 0
    620e:	8c 59       	subi	r24, 0x9C	; 156
    6210:	9f 4f       	sbci	r25, 0xFF	; 255
    6212:	f8 01       	movw	r30, r16
    6214:	93 87       	std	Z+11, r25	; 0x0b
    6216:	82 87       	std	Z+10, r24	; 0x0a
    6218:	81 e0       	ldi	r24, 0x01	; 1
    621a:	2b 96       	adiw	r28, 0x0b	; 11
    621c:	e4 e0       	ldi	r30, 0x04	; 4
    621e:	0c 94 bd e7 	jmp	0x1cf7a	; 0x1cf7a <__epilogue_restores__+0x1c>

00006222 <rtc_run>:
    6222:	a4 e0       	ldi	r26, 0x04	; 4
    6224:	b0 e0       	ldi	r27, 0x00	; 0
    6226:	e7 e1       	ldi	r30, 0x17	; 23
    6228:	f1 e3       	ldi	r31, 0x31	; 49
    622a:	0c 94 a1 e7 	jmp	0x1cf42	; 0x1cf42 <__prologue_saves__+0x1c>
    622e:	8c 01       	movw	r16, r24
    6230:	21 e0       	ldi	r18, 0x01	; 1
    6232:	ae 01       	movw	r20, r28
    6234:	4c 5f       	subi	r20, 0xFC	; 252
    6236:	5f 4f       	sbci	r21, 0xFF	; 255
    6238:	60 e0       	ldi	r22, 0x00	; 0
    623a:	88 e6       	ldi	r24, 0x68	; 104
    623c:	fa de       	rcall	.-524    	; 0x6032 <i2c_rtc_read>
    623e:	81 11       	cpse	r24, r1
    6240:	03 c0       	rjmp	.+6      	; 0x6248 <rtc_run+0x26>
    6242:	86 e7       	ldi	r24, 0x76	; 118
    6244:	94 e0       	ldi	r25, 0x04	; 4
    6246:	24 c0       	rjmp	.+72     	; 0x6290 <rtc_run+0x6e>
    6248:	8c 81       	ldd	r24, Y+4	; 0x04
    624a:	0f 3f       	cpi	r16, 0xFF	; 255
    624c:	ff ef       	ldi	r31, 0xFF	; 255
    624e:	1f 07       	cpc	r17, r31
    6250:	59 f4       	brne	.+22     	; 0x6268 <rtc_run+0x46>
    6252:	08 2e       	mov	r0, r24
    6254:	00 0c       	add	r0, r0
    6256:	99 0b       	sbc	r25, r25
    6258:	80 95       	com	r24
    625a:	90 95       	com	r25
    625c:	89 2f       	mov	r24, r25
    625e:	88 1f       	adc	r24, r24
    6260:	88 27       	eor	r24, r24
    6262:	88 1f       	adc	r24, r24
    6264:	90 e0       	ldi	r25, 0x00	; 0
    6266:	20 c0       	rjmp	.+64     	; 0x62a8 <rtc_run+0x86>
    6268:	8f 77       	andi	r24, 0x7F	; 127
    626a:	01 15       	cp	r16, r1
    626c:	11 05       	cpc	r17, r1
    626e:	11 f4       	brne	.+4      	; 0x6274 <rtc_run+0x52>
    6270:	90 e8       	ldi	r25, 0x80	; 128
    6272:	01 c0       	rjmp	.+2      	; 0x6276 <rtc_run+0x54>
    6274:	90 e0       	ldi	r25, 0x00	; 0
    6276:	89 2b       	or	r24, r25
    6278:	8c 83       	std	Y+4, r24	; 0x04
    627a:	21 e0       	ldi	r18, 0x01	; 1
    627c:	ae 01       	movw	r20, r28
    627e:	4c 5f       	subi	r20, 0xFC	; 252
    6280:	5f 4f       	sbci	r21, 0xFF	; 255
    6282:	60 e0       	ldi	r22, 0x00	; 0
    6284:	88 e6       	ldi	r24, 0x68	; 104
    6286:	66 de       	rcall	.-820    	; 0x5f54 <i2c_rtc_write.part.0>
    6288:	81 11       	cpse	r24, r1
    628a:	0d c0       	rjmp	.+26     	; 0x62a6 <rtc_run+0x84>
    628c:	81 e6       	ldi	r24, 0x61	; 97
    628e:	94 e0       	ldi	r25, 0x04	; 4
    6290:	a0 e0       	ldi	r26, 0x00	; 0
    6292:	ed b7       	in	r30, 0x3d	; 61
    6294:	fe b7       	in	r31, 0x3e	; 62
    6296:	81 83       	std	Z+1, r24	; 0x01
    6298:	92 83       	std	Z+2, r25	; 0x02
    629a:	a3 83       	std	Z+3, r26	; 0x03
    629c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    62a0:	8f ef       	ldi	r24, 0xFF	; 255
    62a2:	9f ef       	ldi	r25, 0xFF	; 255
    62a4:	01 c0       	rjmp	.+2      	; 0x62a8 <rtc_run+0x86>
    62a6:	c8 01       	movw	r24, r16
    62a8:	24 96       	adiw	r28, 0x04	; 4
    62aa:	e4 e0       	ldi	r30, 0x04	; 4
    62ac:	0c 94 bd e7 	jmp	0x1cf7a	; 0x1cf7a <__epilogue_restores__+0x1c>

000062b0 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  run state 0 = STOP, 1 = RUN
/// @return -1 = ERROR
uint8_t rtc_init (int force, time_t seconds)
{
    62b0:	a7 e0       	ldi	r26, 0x07	; 7
    62b2:	b0 e0       	ldi	r27, 0x00	; 0
    62b4:	ee e5       	ldi	r30, 0x5E	; 94
    62b6:	f1 e3       	ldi	r31, 0x31	; 49
    62b8:	0c 94 a1 e7 	jmp	0x1cf42	; 0x1cf42 <__prologue_saves__+0x1c>
    62bc:	8c 01       	movw	r16, r24
    62be:	4c 83       	std	Y+4, r20	; 0x04
    62c0:	5d 83       	std	Y+5, r21	; 0x05
    62c2:	6e 83       	std	Y+6, r22	; 0x06
    62c4:	7f 83       	std	Y+7, r23	; 0x07
    int8_t    state;

    tm_t *tmp;

    i2c_rtc_init();
    62c6:	0e df       	rcall	.-484    	; 0x60e4 <i2c_rtc_init>

    if(!force)
    62c8:	01 15       	cp	r16, r1
    62ca:	11 05       	cpc	r17, r1
    62cc:	39 f4       	brne	.+14     	; 0x62dc <rtc_init+0x2c>
    {
        state = rtc_run(-1);
    62ce:	8f ef       	ldi	r24, 0xFF	; 255
    62d0:	9f ef       	ldi	r25, 0xFF	; 255
    62d2:	a7 df       	rcall	.-178    	; 0x6222 <rtc_run>
        if(state < 0)
    62d4:	87 fd       	sbrc	r24, 7
    62d6:	16 c0       	rjmp	.+44     	; 0x6304 <rtc_init+0x54>
        {
            rtc_ok = 0;
            return 0;
        }
        if(state == 0)                            // stopped
    62d8:	81 11       	cpse	r24, r1
    62da:	22 c0       	rjmp	.+68     	; 0x6320 <rtc_init+0x70>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    62dc:	80 e0       	ldi	r24, 0x00	; 0
    62de:	90 e0       	ldi	r25, 0x00	; 0
    62e0:	a0 df       	rcall	.-192    	; 0x6222 <rtc_run>
    62e2:	97 fd       	sbrc	r25, 7
    62e4:	0f c0       	rjmp	.+30     	; 0x6304 <rtc_init+0x54>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }

        tmp = gmtime(&seconds);
    62e6:	ce 01       	movw	r24, r28
    62e8:	04 96       	adiw	r24, 0x04	; 4
    62ea:	a3 d6       	rcall	.+3398   	; 0x7032 <gmtime>
    62ec:	00 97       	sbiw	r24, 0x00	; 0

        if(tmp == NULL || !rtc_write(tmp))
    62ee:	81 f4       	brne	.+32     	; 0x6310 <rtc_init+0x60>
    62f0:	83 e4       	ldi	r24, 0x43	; 67
        {
            printf("rtc_init  write epoch failed\n");
    62f2:	94 e0       	ldi	r25, 0x04	; 4
    62f4:	a0 e0       	ldi	r26, 0x00	; 0
    62f6:	ed b7       	in	r30, 0x3d	; 61
    62f8:	fe b7       	in	r31, 0x3e	; 62
    62fa:	81 83       	std	Z+1, r24	; 0x01
    62fc:	92 83       	std	Z+2, r25	; 0x02
    62fe:	a3 83       	std	Z+3, r26	; 0x03
    6300:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    6304:	10 92 e4 19 	sts	0x19E4, r1	; 0x8019e4 <rtc_ok+0x1>
            rtc_ok = 0;
    6308:	10 92 e3 19 	sts	0x19E3, r1	; 0x8019e3 <rtc_ok>
            return 0;
    630c:	80 e0       	ldi	r24, 0x00	; 0
    630e:	0e c0       	rjmp	.+28     	; 0x632c <rtc_init+0x7c>
            return 0;
        }

        tmp = gmtime(&seconds);

        if(tmp == NULL || !rtc_write(tmp))
    6310:	ef de       	rcall	.-546    	; 0x60f0 <rtc_write>
    6312:	88 23       	and	r24, r24
    6314:	69 f3       	breq	.-38     	; 0x62f0 <rtc_init+0x40>
            printf("rtc_init  write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        if(rtc_run(1) < 0)                        // START RTC
    6316:	81 e0       	ldi	r24, 0x01	; 1
    6318:	90 e0       	ldi	r25, 0x00	; 0
    631a:	83 df       	rcall	.-250    	; 0x6222 <rtc_run>
    631c:	97 fd       	sbrc	r25, 7
    631e:	f2 cf       	rjmp	.-28     	; 0x6304 <rtc_init+0x54>
    6320:	81 e0       	ldi	r24, 0x01	; 1
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    6322:	90 e0       	ldi	r25, 0x00	; 0
    6324:	90 93 e4 19 	sts	0x19E4, r25	; 0x8019e4 <rtc_ok+0x1>
    6328:	80 93 e3 19 	sts	0x19E3, r24	; 0x8019e3 <rtc_ok>
    632c:	27 96       	adiw	r28, 0x07	; 7
    return 1;
}
    632e:	e4 e0       	ldi	r30, 0x04	; 4
    6330:	0c 94 bd e7 	jmp	0x1cf7a	; 0x1cf7a <__epilogue_restores__+0x1c>

00006334 <islower>:
    6334:	9c 01       	movw	r18, r24
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    6336:	21 56       	subi	r18, 0x61	; 97
    6338:	31 09       	sbc	r19, r1
    633a:	81 e0       	ldi	r24, 0x01	; 1
    633c:	90 e0       	ldi	r25, 0x00	; 0
    633e:	2a 31       	cpi	r18, 0x1A	; 26
    6340:	31 05       	cpc	r19, r1
    6342:	10 f0       	brcs	.+4      	; 0x6348 <islower+0x14>
    6344:	80 e0       	ldi	r24, 0x00	; 0
    6346:	90 e0       	ldi	r25, 0x00	; 0
    6348:	08 95       	ret

0000634a <toupper>:
    634a:	cf 93       	push	r28
    634c:	df 93       	push	r29
    634e:	ec 01       	movw	r28, r24
    6350:	f1 df       	rcall	.-30     	; 0x6334 <islower>
    6352:	89 2b       	or	r24, r25
    6354:	19 f0       	breq	.+6      	; 0x635c <toupper+0x12>
    6356:	ce 01       	movw	r24, r28
    6358:	80 97       	sbiw	r24, 0x20	; 32
    635a:	01 c0       	rjmp	.+2      	; 0x635e <toupper+0x14>
    635c:	ce 01       	movw	r24, r28
    635e:	df 91       	pop	r29
    6360:	cf 91       	pop	r28
    6362:	08 95       	ret

00006364 <strcpy>:
    6364:	fc 01       	movw	r30, r24
    6366:	db 01       	movw	r26, r22
    6368:	2d 91       	ld	r18, X+
    636a:	bd 01       	movw	r22, r26
    636c:	01 96       	adiw	r24, 0x01	; 1
    636e:	22 23       	and	r18, r18
    6370:	11 f0       	breq	.+4      	; 0x6376 <strcpy+0x12>
    6372:	20 83       	st	Z, r18
    6374:	f7 cf       	rjmp	.-18     	; 0x6364 <strcpy>
    6376:	10 82       	st	Z, r1
    6378:	08 95       	ret

0000637a <strncpy>:
    637a:	db 01       	movw	r26, r22
    637c:	fc 01       	movw	r30, r24
    637e:	2d 91       	ld	r18, X+
    6380:	21 11       	cpse	r18, r1
    6382:	03 c0       	rjmp	.+6      	; 0x638a <strncpy+0x10>
    6384:	4e 0f       	add	r20, r30
    6386:	5f 1f       	adc	r21, r31
    6388:	08 c0       	rjmp	.+16     	; 0x639a <strncpy+0x20>
    638a:	41 15       	cp	r20, r1
    638c:	51 05       	cpc	r21, r1
    638e:	21 f0       	breq	.+8      	; 0x6398 <strncpy+0x1e>
    6390:	21 93       	st	Z+, r18
    6392:	41 50       	subi	r20, 0x01	; 1
    6394:	51 09       	sbc	r21, r1
    6396:	f3 cf       	rjmp	.-26     	; 0x637e <strncpy+0x4>
    6398:	08 95       	ret
    639a:	4e 17       	cp	r20, r30
    639c:	5f 07       	cpc	r21, r31
    639e:	11 f0       	breq	.+4      	; 0x63a4 <strncpy+0x2a>
    63a0:	11 92       	st	Z+, r1
    63a2:	fb cf       	rjmp	.-10     	; 0x639a <strncpy+0x20>
    63a4:	08 95       	ret

000063a6 <strcat>:
    63a6:	cf 93       	push	r28
    63a8:	df 93       	push	r29
    63aa:	d8 2f       	mov	r29, r24
    63ac:	c9 2f       	mov	r28, r25
    63ae:	28 2f       	mov	r18, r24
    63b0:	39 2f       	mov	r19, r25
    63b2:	c9 01       	movw	r24, r18
    63b4:	2f 5f       	subi	r18, 0xFF	; 255
    63b6:	3f 4f       	sbci	r19, 0xFF	; 255
    63b8:	fc 01       	movw	r30, r24
    63ba:	40 81       	ld	r20, Z
    63bc:	41 11       	cpse	r20, r1
    63be:	f9 cf       	rjmp	.-14     	; 0x63b2 <strcat+0xc>
    63c0:	d1 df       	rcall	.-94     	; 0x6364 <strcpy>
    63c2:	8d 2f       	mov	r24, r29
    63c4:	9c 2f       	mov	r25, r28
    63c6:	df 91       	pop	r29
    63c8:	cf 91       	pop	r28
    63ca:	08 95       	ret

000063cc <reverse>:
    63cc:	fc 01       	movw	r30, r24
    63ce:	01 90       	ld	r0, Z+
    63d0:	00 20       	and	r0, r0
    63d2:	e9 f7       	brne	.-6      	; 0x63ce <reverse+0x2>
    63d4:	31 97       	sbiw	r30, 0x01	; 1
    63d6:	e8 1b       	sub	r30, r24
    63d8:	f9 0b       	sbc	r31, r25
    63da:	af 01       	movw	r20, r30
    63dc:	55 95       	asr	r21
    63de:	47 95       	ror	r20
    63e0:	e8 0f       	add	r30, r24
    63e2:	f9 1f       	adc	r31, r25
    63e4:	dc 01       	movw	r26, r24
    63e6:	9d 01       	movw	r18, r26
    63e8:	28 1b       	sub	r18, r24
    63ea:	39 0b       	sbc	r19, r25
    63ec:	24 17       	cp	r18, r20
    63ee:	35 07       	cpc	r19, r21
    63f0:	2c f4       	brge	.+10     	; 0x63fc <reverse+0x30>
    63f2:	22 91       	ld	r18, -Z
    63f4:	3c 91       	ld	r19, X
    63f6:	30 83       	st	Z, r19
    63f8:	2d 93       	st	X+, r18
    63fa:	f5 cf       	rjmp	.-22     	; 0x63e6 <reverse+0x1a>
    63fc:	08 95       	ret

000063fe <strupper>:
    63fe:	cf 93       	push	r28
    6400:	df 93       	push	r29
    6402:	ec 01       	movw	r28, r24
    6404:	88 81       	ld	r24, Y
    6406:	88 23       	and	r24, r24
    6408:	21 f0       	breq	.+8      	; 0x6412 <strupper+0x14>
    640a:	90 e0       	ldi	r25, 0x00	; 0
    640c:	9e df       	rcall	.-196    	; 0x634a <toupper>
    640e:	89 93       	st	Y+, r24
    6410:	f9 cf       	rjmp	.-14     	; 0x6404 <strupper+0x6>
    6412:	df 91       	pop	r29
    6414:	cf 91       	pop	r28
    6416:	08 95       	ret

00006418 <strcmp>:
    6418:	dc 01       	movw	r26, r24
    641a:	fb 01       	movw	r30, r22
    641c:	2d 91       	ld	r18, X+
    641e:	41 91       	ld	r20, Z+
    6420:	50 e0       	ldi	r21, 0x00	; 0
    6422:	30 e0       	ldi	r19, 0x00	; 0
    6424:	c9 01       	movw	r24, r18
    6426:	84 1b       	sub	r24, r20
    6428:	95 0b       	sbc	r25, r21
    642a:	11 f4       	brne	.+4      	; 0x6430 <strcmp+0x18>
    642c:	45 2b       	or	r20, r21
    642e:	b1 f7       	brne	.-20     	; 0x641c <strcmp+0x4>
    6430:	08 95       	ret

00006432 <strcasecmp>:
    6432:	ef 92       	push	r14
    6434:	ff 92       	push	r15
    6436:	0f 93       	push	r16
    6438:	1f 93       	push	r17
    643a:	cf 93       	push	r28
    643c:	df 93       	push	r29
    643e:	7c 01       	movw	r14, r24
    6440:	8b 01       	movw	r16, r22
    6442:	f7 01       	movw	r30, r14
    6444:	81 91       	ld	r24, Z+
    6446:	7f 01       	movw	r14, r30
    6448:	90 e0       	ldi	r25, 0x00	; 0
    644a:	7f df       	rcall	.-258    	; 0x634a <toupper>
    644c:	ec 01       	movw	r28, r24
    644e:	f8 01       	movw	r30, r16
    6450:	81 91       	ld	r24, Z+
    6452:	8f 01       	movw	r16, r30
    6454:	90 e0       	ldi	r25, 0x00	; 0
    6456:	79 df       	rcall	.-270    	; 0x634a <toupper>
    6458:	9c 01       	movw	r18, r24
    645a:	ce 01       	movw	r24, r28
    645c:	82 1b       	sub	r24, r18
    645e:	93 0b       	sbc	r25, r19
    6460:	11 f4       	brne	.+4      	; 0x6466 <strcasecmp+0x34>
    6462:	23 2b       	or	r18, r19
    6464:	71 f7       	brne	.-36     	; 0x6442 <strcasecmp+0x10>
    6466:	cd b7       	in	r28, 0x3d	; 61
    6468:	de b7       	in	r29, 0x3e	; 62
    646a:	e6 e0       	ldi	r30, 0x06	; 6
    646c:	0c 94 bb e7 	jmp	0x1cf76	; 0x1cf76 <__epilogue_restores__+0x18>

00006470 <strncasecmp>:
    6470:	a0 e0       	ldi	r26, 0x00	; 0
    6472:	b0 e0       	ldi	r27, 0x00	; 0
    6474:	ee e3       	ldi	r30, 0x3E	; 62
    6476:	f2 e3       	ldi	r31, 0x32	; 50
    6478:	0c 94 9d e7 	jmp	0x1cf3a	; 0x1cf3a <__prologue_saves__+0x14>
    647c:	8c 01       	movw	r16, r24
    647e:	7b 01       	movw	r14, r22
    6480:	6c 01       	movw	r12, r24
    6482:	c4 0e       	add	r12, r20
    6484:	d5 1e       	adc	r13, r21
    6486:	0c 15       	cp	r16, r12
    6488:	1d 05       	cpc	r17, r13
    648a:	99 f0       	breq	.+38     	; 0x64b2 <strncasecmp+0x42>
    648c:	f8 01       	movw	r30, r16
    648e:	81 91       	ld	r24, Z+
    6490:	8f 01       	movw	r16, r30
    6492:	90 e0       	ldi	r25, 0x00	; 0
    6494:	5a df       	rcall	.-332    	; 0x634a <toupper>
    6496:	ec 01       	movw	r28, r24
    6498:	f7 01       	movw	r30, r14
    649a:	81 91       	ld	r24, Z+
    649c:	7f 01       	movw	r14, r30
    649e:	90 e0       	ldi	r25, 0x00	; 0
    64a0:	54 df       	rcall	.-344    	; 0x634a <toupper>
    64a2:	9c 01       	movw	r18, r24
    64a4:	ce 01       	movw	r24, r28
    64a6:	82 1b       	sub	r24, r18
    64a8:	93 0b       	sbc	r25, r19
    64aa:	29 f4       	brne	.+10     	; 0x64b6 <strncasecmp+0x46>
    64ac:	23 2b       	or	r18, r19
    64ae:	59 f7       	brne	.-42     	; 0x6486 <strncasecmp+0x16>
    64b0:	02 c0       	rjmp	.+4      	; 0x64b6 <strncasecmp+0x46>
    64b2:	80 e0       	ldi	r24, 0x00	; 0
    64b4:	90 e0       	ldi	r25, 0x00	; 0
    64b6:	cd b7       	in	r28, 0x3d	; 61
    64b8:	de b7       	in	r29, 0x3e	; 62
    64ba:	e8 e0       	ldi	r30, 0x08	; 8
    64bc:	0c 94 b9 e7 	jmp	0x1cf72	; 0x1cf72 <__epilogue_restores__+0x14>

000064c0 <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    64c0:	0f 93       	push	r16
    64c2:	1f 93       	push	r17
    64c4:	cf 93       	push	r28
    64c6:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    64c8:	00 97       	sbiw	r24, 0x00	; 0
    64ca:	99 f0       	breq	.+38     	; 0x64f2 <stralloc+0x32>
    64cc:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    64ce:	fc 01       	movw	r30, r24
    64d0:	01 90       	ld	r0, Z+
    64d2:	00 20       	and	r0, r0
    64d4:	e9 f7       	brne	.-6      	; 0x64d0 <stralloc+0x10>
    64d6:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    64d8:	61 e0       	ldi	r22, 0x01	; 1
    64da:	70 e0       	ldi	r23, 0x00	; 0
    64dc:	8c 1b       	sub	r24, r28
    64de:	9d 0b       	sbc	r25, r29
    64e0:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safecalloc>
    64e4:	8c 01       	movw	r16, r24
    if(!ptr)
    64e6:	00 97       	sbiw	r24, 0x00	; 0
    64e8:	21 f0       	breq	.+8      	; 0x64f2 <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    64ea:	be 01       	movw	r22, r28
    64ec:	3b df       	rcall	.-394    	; 0x6364 <strcpy>
    return(ptr);
    64ee:	c8 01       	movw	r24, r16
    64f0:	02 c0       	rjmp	.+4      	; 0x64f6 <stralloc+0x36>
    64f2:	80 e0       	ldi	r24, 0x00	; 0
    64f4:	90 e0       	ldi	r25, 0x00	; 0
}
    64f6:	df 91       	pop	r29
    64f8:	cf 91       	pop	r28
    64fa:	1f 91       	pop	r17
    64fc:	0f 91       	pop	r16
    64fe:	08 95       	ret

00006500 <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    6500:	00 d0       	rcall	.+0      	; 0x6502 <sep+0x2>
    6502:	1f 92       	push	r1
    6504:	80 e2       	ldi	r24, 0x20	; 32
    6506:	95 e0       	ldi	r25, 0x05	; 5
    6508:	a0 e0       	ldi	r26, 0x00	; 0
    650a:	ed b7       	in	r30, 0x3d	; 61
    650c:	fe b7       	in	r31, 0x3e	; 62
    650e:	81 83       	std	Z+1, r24	; 0x01
    6510:	92 83       	std	Z+2, r25	; 0x02
    6512:	a3 83       	std	Z+3, r26	; 0x03
    6514:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    6518:	0f 90       	pop	r0
    651a:	0f 90       	pop	r0
    651c:	0f 90       	pop	r0
    651e:	08 95       	ret

00006520 <trim_tail>:
    6520:	00 97       	sbiw	r24, 0x00	; 0
    6522:	69 f0       	breq	.+26     	; 0x653e <trim_tail+0x1e>
    6524:	fc 01       	movw	r30, r24
    6526:	01 90       	ld	r0, Z+
    6528:	00 20       	and	r0, r0
    652a:	e9 f7       	brne	.-6      	; 0x6526 <trim_tail+0x6>
    652c:	31 97       	sbiw	r30, 0x01	; 1
    652e:	e8 17       	cp	r30, r24
    6530:	f9 07       	cpc	r31, r25
    6532:	29 f0       	breq	.+10     	; 0x653e <trim_tail+0x1e>
    6534:	22 91       	ld	r18, -Z
    6536:	21 32       	cpi	r18, 0x21	; 33
    6538:	10 f4       	brcc	.+4      	; 0x653e <trim_tail+0x1e>
    653a:	10 82       	st	Z, r1
    653c:	f8 cf       	rjmp	.-16     	; 0x652e <trim_tail+0xe>
    653e:	08 95       	ret

00006540 <skipspaces>:
    6540:	00 97       	sbiw	r24, 0x00	; 0
    6542:	39 f0       	breq	.+14     	; 0x6552 <skipspaces+0x12>
    6544:	fc 01       	movw	r30, r24
    6546:	cf 01       	movw	r24, r30
    6548:	21 91       	ld	r18, Z+
    654a:	20 32       	cpi	r18, 0x20	; 32
    654c:	e1 f3       	breq	.-8      	; 0x6546 <skipspaces+0x6>
    654e:	29 30       	cpi	r18, 0x09	; 9
    6550:	d1 f3       	breq	.-12     	; 0x6546 <skipspaces+0x6>
    6552:	08 95       	ret

00006554 <MATCH>:
    6554:	cf 93       	push	r28
    6556:	df 93       	push	r29
    6558:	fb 01       	movw	r30, r22
    655a:	01 90       	ld	r0, Z+
    655c:	00 20       	and	r0, r0
    655e:	e9 f7       	brne	.-6      	; 0x655a <MATCH+0x6>
    6560:	31 97       	sbiw	r30, 0x01	; 1
    6562:	ef 01       	movw	r28, r30
    6564:	c6 1b       	sub	r28, r22
    6566:	d7 0b       	sbc	r29, r23
    6568:	57 df       	rcall	.-338    	; 0x6418 <strcmp>
    656a:	89 2b       	or	r24, r25
    656c:	11 f4       	brne	.+4      	; 0x6572 <MATCH+0x1e>
    656e:	ce 01       	movw	r24, r28
    6570:	02 c0       	rjmp	.+4      	; 0x6576 <MATCH+0x22>
    6572:	80 e0       	ldi	r24, 0x00	; 0
    6574:	90 e0       	ldi	r25, 0x00	; 0
    6576:	df 91       	pop	r29
    6578:	cf 91       	pop	r28
    657a:	08 95       	ret

0000657c <MATCHI>:
    657c:	cf 93       	push	r28
    657e:	df 93       	push	r29
    6580:	fb 01       	movw	r30, r22
    6582:	01 90       	ld	r0, Z+
    6584:	00 20       	and	r0, r0
    6586:	e9 f7       	brne	.-6      	; 0x6582 <MATCHI+0x6>
    6588:	31 97       	sbiw	r30, 0x01	; 1
    658a:	ef 01       	movw	r28, r30
    658c:	c6 1b       	sub	r28, r22
    658e:	d7 0b       	sbc	r29, r23
    6590:	50 df       	rcall	.-352    	; 0x6432 <strcasecmp>
    6592:	89 2b       	or	r24, r25
    6594:	11 f4       	brne	.+4      	; 0x659a <MATCHI+0x1e>
    6596:	ce 01       	movw	r24, r28
    6598:	02 c0       	rjmp	.+4      	; 0x659e <MATCHI+0x22>
    659a:	80 e0       	ldi	r24, 0x00	; 0
    659c:	90 e0       	ldi	r25, 0x00	; 0
    659e:	df 91       	pop	r29
    65a0:	cf 91       	pop	r28
    65a2:	08 95       	ret

000065a4 <MATCHARGS>:
    65a4:	a9 e0       	ldi	r26, 0x09	; 9
    65a6:	b0 e0       	ldi	r27, 0x00	; 0
    65a8:	e8 ed       	ldi	r30, 0xD8	; 216
    65aa:	f2 e3       	ldi	r31, 0x32	; 50
    65ac:	0c 94 9f e7 	jmp	0x1cf3e	; 0x1cf3e <__prologue_saves__+0x18>
    65b0:	eb 01       	movw	r28, r22
    65b2:	8a 01       	movw	r16, r20
    65b4:	79 01       	movw	r14, r18
    65b6:	e2 df       	rcall	.-60     	; 0x657c <MATCHI>
    65b8:	00 97       	sbiw	r24, 0x00	; 0
    65ba:	c1 f0       	breq	.+48     	; 0x65ec <MATCHARGS+0x48>
    65bc:	e0 16       	cp	r14, r16
    65be:	f1 06       	cpc	r15, r17
    65c0:	9c f4       	brge	.+38     	; 0x65e8 <MATCHARGS+0x44>
    65c2:	ed b7       	in	r30, 0x3d	; 61
    65c4:	fe b7       	in	r31, 0x3e	; 62
    65c6:	f1 86       	std	Z+9, r15	; 0x09
    65c8:	e0 86       	std	Z+8, r14	; 0x08
    65ca:	17 83       	std	Z+7, r17	; 0x07
    65cc:	06 83       	std	Z+6, r16	; 0x06
    65ce:	d5 83       	std	Z+5, r29	; 0x05
    65d0:	c4 83       	std	Z+4, r28	; 0x04
    65d2:	8a ef       	ldi	r24, 0xFA	; 250
    65d4:	94 e0       	ldi	r25, 0x04	; 4
    65d6:	a0 e0       	ldi	r26, 0x00	; 0
    65d8:	81 83       	std	Z+1, r24	; 0x01
    65da:	92 83       	std	Z+2, r25	; 0x02
    65dc:	a3 83       	std	Z+3, r26	; 0x03
    65de:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    65e2:	80 e0       	ldi	r24, 0x00	; 0
    65e4:	90 e0       	ldi	r25, 0x00	; 0
    65e6:	02 c0       	rjmp	.+4      	; 0x65ec <MATCHARGS+0x48>
    65e8:	81 e0       	ldi	r24, 0x01	; 1
    65ea:	90 e0       	ldi	r25, 0x00	; 0
    65ec:	cd b7       	in	r28, 0x3d	; 61
    65ee:	de b7       	in	r29, 0x3e	; 62
    65f0:	29 96       	adiw	r28, 0x09	; 9
    65f2:	e6 e0       	ldi	r30, 0x06	; 6
    65f4:	0c 94 bb e7 	jmp	0x1cf76	; 0x1cf76 <__epilogue_restores__+0x18>

000065f8 <MATCHI_LEN>:
    65f8:	cf 93       	push	r28
    65fa:	df 93       	push	r29
    65fc:	00 97       	sbiw	r24, 0x00	; 0
    65fe:	89 f0       	breq	.+34     	; 0x6622 <MATCHI_LEN+0x2a>
    6600:	61 15       	cp	r22, r1
    6602:	71 05       	cpc	r23, r1
    6604:	71 f0       	breq	.+28     	; 0x6622 <MATCHI_LEN+0x2a>
    6606:	eb 01       	movw	r28, r22
    6608:	09 90       	ld	r0, Y+
    660a:	00 20       	and	r0, r0
    660c:	e9 f7       	brne	.-6      	; 0x6608 <MATCHI_LEN+0x10>
    660e:	21 97       	sbiw	r28, 0x01	; 1
    6610:	c6 1b       	sub	r28, r22
    6612:	d7 0b       	sbc	r29, r23
    6614:	31 f0       	breq	.+12     	; 0x6622 <MATCHI_LEN+0x2a>
    6616:	ae 01       	movw	r20, r28
    6618:	2b df       	rcall	.-426    	; 0x6470 <strncasecmp>
    661a:	89 2b       	or	r24, r25
    661c:	11 f4       	brne	.+4      	; 0x6622 <MATCHI_LEN+0x2a>
    661e:	ce 01       	movw	r24, r28
    6620:	02 c0       	rjmp	.+4      	; 0x6626 <MATCHI_LEN+0x2e>
    6622:	80 e0       	ldi	r24, 0x00	; 0
    6624:	90 e0       	ldi	r25, 0x00	; 0
    6626:	df 91       	pop	r29
    6628:	cf 91       	pop	r28
    662a:	08 95       	ret

0000662c <split_args>:
    662c:	a0 e0       	ldi	r26, 0x00	; 0
    662e:	b0 e0       	ldi	r27, 0x00	; 0
    6630:	ec e1       	ldi	r30, 0x1C	; 28
    6632:	f3 e3       	ldi	r31, 0x33	; 51
    6634:	0c 94 9d e7 	jmp	0x1cf3a	; 0x1cf3a <__prologue_saves__+0x14>
    6638:	dc 01       	movw	r26, r24
    663a:	6a 01       	movw	r12, r20
    663c:	8b 01       	movw	r16, r22
    663e:	fb 01       	movw	r30, r22
    6640:	80 e0       	ldi	r24, 0x00	; 0
    6642:	90 e0       	ldi	r25, 0x00	; 0
    6644:	8c 15       	cp	r24, r12
    6646:	9d 05       	cpc	r25, r13
    6648:	24 f4       	brge	.+8      	; 0x6652 <split_args+0x26>
    664a:	11 92       	st	Z+, r1
    664c:	11 92       	st	Z+, r1
    664e:	01 96       	adiw	r24, 0x01	; 1
    6650:	f9 cf       	rjmp	.-14     	; 0x6644 <split_args+0x18>
    6652:	c1 14       	cp	r12, r1
    6654:	d1 04       	cpc	r13, r1
    6656:	d9 f1       	breq	.+118    	; 0x66ce <split_args+0xa2>
    6658:	10 97       	sbiw	r26, 0x00	; 0
    665a:	c9 f1       	breq	.+114    	; 0x66ce <split_args+0xa2>
    665c:	ee 24       	eor	r14, r14
    665e:	e3 94       	inc	r14
    6660:	f1 2c       	mov	r15, r1
    6662:	c0 e0       	ldi	r28, 0x00	; 0
    6664:	d0 e0       	ldi	r29, 0x00	; 0
    6666:	8c 91       	ld	r24, X
    6668:	88 23       	and	r24, r24
    666a:	b1 f1       	breq	.+108    	; 0x66d8 <split_args+0xac>
    666c:	cc 15       	cp	r28, r12
    666e:	dd 05       	cpc	r29, r13
    6670:	9c f5       	brge	.+102    	; 0x66d8 <split_args+0xac>
    6672:	cd 01       	movw	r24, r26
    6674:	65 df       	rcall	.-310    	; 0x6540 <skipspaces>
    6676:	dc 01       	movw	r26, r24
    6678:	2c 91       	ld	r18, X
    667a:	22 23       	and	r18, r18
    667c:	69 f1       	breq	.+90     	; 0x66d8 <split_args+0xac>
    667e:	22 32       	cpi	r18, 0x22	; 34
    6680:	79 f4       	brne	.+30     	; 0x66a0 <split_args+0x74>
    6682:	fc 01       	movw	r30, r24
    6684:	31 96       	adiw	r30, 0x01	; 1
    6686:	d8 01       	movw	r26, r16
    6688:	ed 93       	st	X+, r30
    668a:	fc 93       	st	X, r31
    668c:	df 01       	movw	r26, r30
    668e:	80 81       	ld	r24, Z
    6690:	31 96       	adiw	r30, 0x01	; 1
    6692:	88 23       	and	r24, r24
    6694:	a9 f0       	breq	.+42     	; 0x66c0 <split_args+0x94>
    6696:	82 32       	cpi	r24, 0x22	; 34
    6698:	c9 f7       	brne	.-14     	; 0x668c <split_args+0x60>
    669a:	1c 92       	st	X, r1
    669c:	df 01       	movw	r26, r30
    669e:	10 c0       	rjmp	.+32     	; 0x66c0 <split_args+0x94>
    66a0:	f8 01       	movw	r30, r16
    66a2:	91 83       	std	Z+1, r25	; 0x01
    66a4:	80 83       	st	Z, r24
    66a6:	fc 01       	movw	r30, r24
    66a8:	2e 2f       	mov	r18, r30
    66aa:	9f 2f       	mov	r25, r31
    66ac:	81 91       	ld	r24, Z+
    66ae:	3f ed       	ldi	r19, 0xDF	; 223
    66b0:	38 0f       	add	r19, r24
    66b2:	3e 35       	cpi	r19, 0x5E	; 94
    66b4:	c8 f3       	brcs	.-14     	; 0x66a8 <split_args+0x7c>
    66b6:	88 23       	and	r24, r24
    66b8:	69 f0       	breq	.+26     	; 0x66d4 <split_args+0xa8>
    66ba:	a2 2f       	mov	r26, r18
    66bc:	b9 2f       	mov	r27, r25
    66be:	1d 92       	st	X+, r1
    66c0:	21 96       	adiw	r28, 0x01	; 1
    66c2:	ff ef       	ldi	r31, 0xFF	; 255
    66c4:	ef 1a       	sub	r14, r31
    66c6:	ff 0a       	sbc	r15, r31
    66c8:	0e 5f       	subi	r16, 0xFE	; 254
    66ca:	1f 4f       	sbci	r17, 0xFF	; 255
    66cc:	cc cf       	rjmp	.-104    	; 0x6666 <split_args+0x3a>
    66ce:	80 e0       	ldi	r24, 0x00	; 0
    66d0:	90 e0       	ldi	r25, 0x00	; 0
    66d2:	03 c0       	rjmp	.+6      	; 0x66da <split_args+0xae>
    66d4:	c7 01       	movw	r24, r14
    66d6:	01 c0       	rjmp	.+2      	; 0x66da <split_args+0xae>
    66d8:	ce 01       	movw	r24, r28
    66da:	cd b7       	in	r28, 0x3d	; 61
    66dc:	de b7       	in	r29, 0x3e	; 62
    66de:	e8 e0       	ldi	r30, 0x08	; 8
    66e0:	0c 94 b9 e7 	jmp	0x1cf72	; 0x1cf72 <__epilogue_restores__+0x14>

000066e4 <get_token>:
    66e4:	ef 92       	push	r14
    66e6:	ff 92       	push	r15
    66e8:	0f 93       	push	r16
    66ea:	1f 93       	push	r17
    66ec:	cf 93       	push	r28
    66ee:	df 93       	push	r29
    66f0:	eb 01       	movw	r28, r22
    66f2:	8a 01       	movw	r16, r20
    66f4:	18 82       	st	Y, r1
    66f6:	00 97       	sbiw	r24, 0x00	; 0
    66f8:	89 f1       	breq	.+98     	; 0x675c <get_token+0x78>
    66fa:	fc 01       	movw	r30, r24
    66fc:	20 81       	ld	r18, Z
    66fe:	22 23       	and	r18, r18
    6700:	79 f1       	breq	.+94     	; 0x6760 <get_token+0x7c>
    6702:	1e df       	rcall	.-452    	; 0x6540 <skipspaces>
    6704:	7c 01       	movw	r14, r24
    6706:	0c df       	rcall	.-488    	; 0x6520 <trim_tail>
    6708:	f7 01       	movw	r30, r14
    670a:	cf 01       	movw	r24, r30
    670c:	21 91       	ld	r18, Z+
    670e:	21 32       	cpi	r18, 0x21	; 33
    6710:	e0 f0       	brcs	.+56     	; 0x674a <get_token+0x66>
    6712:	10 16       	cp	r1, r16
    6714:	11 06       	cpc	r1, r17
    6716:	cc f4       	brge	.+50     	; 0x674a <get_token+0x66>
    6718:	22 32       	cpi	r18, 0x22	; 34
    671a:	79 f4       	brne	.+30     	; 0x673a <get_token+0x56>
    671c:	fc 01       	movw	r30, r24
    671e:	31 96       	adiw	r30, 0x01	; 1
    6720:	0c 0f       	add	r16, r28
    6722:	1d 1f       	adc	r17, r29
    6724:	cf 01       	movw	r24, r30
    6726:	21 91       	ld	r18, Z+
    6728:	22 23       	and	r18, r18
    672a:	79 f0       	breq	.+30     	; 0x674a <get_token+0x66>
    672c:	22 32       	cpi	r18, 0x22	; 34
    672e:	59 f0       	breq	.+22     	; 0x6746 <get_token+0x62>
    6730:	c0 17       	cp	r28, r16
    6732:	d1 07       	cpc	r29, r17
    6734:	51 f0       	breq	.+20     	; 0x674a <get_token+0x66>
    6736:	29 93       	st	Y+, r18
    6738:	f5 cf       	rjmp	.-22     	; 0x6724 <get_token+0x40>
    673a:	2c 32       	cpi	r18, 0x2C	; 44
    673c:	31 f0       	breq	.+12     	; 0x674a <get_token+0x66>
    673e:	29 93       	st	Y+, r18
    6740:	01 50       	subi	r16, 0x01	; 1
    6742:	11 09       	sbc	r17, r1
    6744:	e2 cf       	rjmp	.-60     	; 0x670a <get_token+0x26>
    6746:	cf 01       	movw	r24, r30
    6748:	18 82       	st	Y, r1
    674a:	fa de       	rcall	.-524    	; 0x6540 <skipspaces>
    674c:	fc 01       	movw	r30, r24
    674e:	80 81       	ld	r24, Z
    6750:	8c 32       	cpi	r24, 0x2C	; 44
    6752:	09 f4       	brne	.+2      	; 0x6756 <get_token+0x72>
    6754:	31 96       	adiw	r30, 0x01	; 1
    6756:	18 82       	st	Y, r1
    6758:	cf 01       	movw	r24, r30
    675a:	02 c0       	rjmp	.+4      	; 0x6760 <get_token+0x7c>
    675c:	80 e0       	ldi	r24, 0x00	; 0
    675e:	90 e0       	ldi	r25, 0x00	; 0
    6760:	cd b7       	in	r28, 0x3d	; 61
    6762:	de b7       	in	r29, 0x3e	; 62
    6764:	e6 e0       	ldi	r30, 0x06	; 6
    6766:	0c 94 bb e7 	jmp	0x1cf76	; 0x1cf76 <__epilogue_restores__+0x18>

0000676a <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{
    676a:	a2 e0       	ldi	r26, 0x02	; 2
    676c:	b0 e0       	ldi	r27, 0x00	; 0
    676e:	eb eb       	ldi	r30, 0xBB	; 187
    6770:	f3 e3       	ldi	r31, 0x33	; 51
    6772:	0c 94 a1 e7 	jmp	0x1cf42	; 0x1cf42 <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    6776:	00 97       	sbiw	r24, 0x00	; 0
    6778:	79 f1       	breq	.+94     	; 0x67d8 <get_value+0x6e>
    677a:	fc 01       	movw	r30, r24
    677c:	20 81       	ld	r18, Z
    677e:	22 23       	and	r18, r18
    6780:	59 f1       	breq	.+86     	; 0x67d8 <get_value+0x6e>
        return(0);

    ptr = skipspaces(str);
    6782:	de de       	rcall	.-580    	; 0x6540 <skipspaces>
    6784:	8c 01       	movw	r16, r24
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    6786:	6f e2       	ldi	r22, 0x2F	; 47
    6788:	73 e0       	ldi	r23, 0x03	; 3
    678a:	36 df       	rcall	.-404    	; 0x65f8 <MATCHI_LEN>
    678c:	00 97       	sbiw	r24, 0x00	; 0
    678e:	29 f0       	breq	.+10     	; 0x679a <get_value+0x30>
    {
        base = 16;
        ptr += ret;
    6790:	08 0f       	add	r16, r24
    6792:	19 1f       	adc	r17, r25
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    6794:	40 e1       	ldi	r20, 0x10	; 16
    6796:	50 e0       	ldi	r21, 0x00	; 0
    6798:	18 c0       	rjmp	.+48     	; 0x67ca <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    679a:	62 e3       	ldi	r22, 0x32	; 50
    679c:	73 e0       	ldi	r23, 0x03	; 3
    679e:	c8 01       	movw	r24, r16
    67a0:	2b df       	rcall	.-426    	; 0x65f8 <MATCHI_LEN>
    67a2:	00 97       	sbiw	r24, 0x00	; 0
    67a4:	29 f0       	breq	.+10     	; 0x67b0 <get_value+0x46>
    {
        base = 8;
        ptr += ret;
    67a6:	08 0f       	add	r16, r24
    67a8:	19 1f       	adc	r17, r25
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    67aa:	48 e0       	ldi	r20, 0x08	; 8
    67ac:	50 e0       	ldi	r21, 0x00	; 0
    67ae:	0d c0       	rjmp	.+26     	; 0x67ca <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    67b0:	65 e3       	ldi	r22, 0x35	; 53
    67b2:	73 e0       	ldi	r23, 0x03	; 3
    67b4:	c8 01       	movw	r24, r16
    67b6:	20 df       	rcall	.-448    	; 0x65f8 <MATCHI_LEN>
    67b8:	00 97       	sbiw	r24, 0x00	; 0
    67ba:	29 f0       	breq	.+10     	; 0x67c6 <get_value+0x5c>
    {
        base = 2;
        ptr += ret;
    67bc:	08 0f       	add	r16, r24
    67be:	19 1f       	adc	r17, r25
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    67c0:	42 e0       	ldi	r20, 0x02	; 2
    67c2:	50 e0       	ldi	r21, 0x00	; 0
    67c4:	02 c0       	rjmp	.+4      	; 0x67ca <get_value+0x60>

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    67c6:	4a e0       	ldi	r20, 0x0A	; 10
    67c8:	50 e0       	ldi	r21, 0x00	; 0
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    67ca:	be 01       	movw	r22, r28
    67cc:	6f 5f       	subi	r22, 0xFF	; 255
    67ce:	7f 4f       	sbci	r23, 0xFF	; 255
    67d0:	c8 01       	movw	r24, r16
    67d2:	0e 94 ac 47 	call	0x8f58	; 0x8f58 <strtol>
    67d6:	03 c0       	rjmp	.+6      	; 0x67de <get_value+0x74>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    67d8:	60 e0       	ldi	r22, 0x00	; 0
    67da:	70 e0       	ldi	r23, 0x00	; 0
    67dc:	cb 01       	movw	r24, r22
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    67de:	22 96       	adiw	r28, 0x02	; 2
    67e0:	e4 e0       	ldi	r30, 0x04	; 4
    67e2:	0c 94 bd e7 	jmp	0x1cf7a	; 0x1cf7a <__epilogue_restores__+0x1c>

000067e6 <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    67e6:	78 94       	sei
    67e8:	08 95       	ret

000067ea <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    67ea:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;             // No Prescale
    67ec:	89 e0       	ldi	r24, 0x09	; 9
    67ee:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    67f2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);              // 0 .. count
    67f6:	8f e1       	ldi	r24, 0x1F	; 31
    67f8:	9e e4       	ldi	r25, 0x4E	; 78
    67fa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    67fe:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);                        //Enable the Output Compare A interrupt
    6802:	ef e6       	ldi	r30, 0x6F	; 111
    6804:	f0 e0       	ldi	r31, 0x00	; 0
    6806:	80 81       	ld	r24, Z
    6808:	82 60       	ori	r24, 0x02	; 2
    680a:	80 83       	st	Z, r24
    sei();
    680c:	78 94       	sei
    680e:	08 95       	ret

00006810 <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    6810:	1f 92       	push	r1
    6812:	0f 92       	push	r0
    6814:	0f b6       	in	r0, 0x3f	; 63
    6816:	0f 92       	push	r0
    6818:	11 24       	eor	r1, r1
    681a:	0b b6       	in	r0, 0x3b	; 59
    681c:	0f 92       	push	r0
    681e:	2f 93       	push	r18
    6820:	3f 93       	push	r19
    6822:	4f 93       	push	r20
    6824:	5f 93       	push	r21
    6826:	6f 93       	push	r22
    6828:	7f 93       	push	r23
    682a:	8f 93       	push	r24
    682c:	9f 93       	push	r25
    682e:	af 93       	push	r26
    6830:	bf 93       	push	r27
    6832:	ef 93       	push	r30
    6834:	ff 93       	push	r31
    execute_timers();
    6836:	36 d2       	rcall	.+1132   	; 0x6ca4 <execute_timers>
}
    6838:	ff 91       	pop	r31
    683a:	ef 91       	pop	r30
    683c:	bf 91       	pop	r27
    683e:	af 91       	pop	r26
    6840:	9f 91       	pop	r25
    6842:	8f 91       	pop	r24
    6844:	7f 91       	pop	r23
    6846:	6f 91       	pop	r22
    6848:	5f 91       	pop	r21
    684a:	4f 91       	pop	r20
    684c:	3f 91       	pop	r19
    684e:	2f 91       	pop	r18
    6850:	0f 90       	pop	r0
    6852:	0b be       	out	0x3b, r0	; 59
    6854:	0f 90       	pop	r0
    6856:	0f be       	out	0x3f, r0	; 63
    6858:	0f 90       	pop	r0
    685a:	1f 90       	pop	r1
    685c:	18 95       	reti

0000685e <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    685e:	0f 93       	push	r16
    6860:	1f 93       	push	r17
    6862:	cf 93       	push	r28
    6864:	df 93       	push	r29
    6866:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

// disable interrupts
    cli();
    6868:	f8 94       	cli

    count1 = TCNT1;
    686a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    686e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    6872:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <__clock>
    6876:	90 91 47 1a 	lds	r25, 0x1A47	; 0x801a47 <__clock+0x1>
    687a:	a0 91 48 1a 	lds	r26, 0x1A48	; 0x801a48 <__clock+0x2>
    687e:	b0 91 49 1a 	lds	r27, 0x1A49	; 0x801a49 <__clock+0x3>
    6882:	80 83       	st	Z, r24
    6884:	91 83       	std	Z+1, r25	; 0x01
    6886:	a2 83       	std	Z+2, r26	; 0x02
    6888:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    688a:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <__clock+0x4>
    688e:	90 91 4b 1a 	lds	r25, 0x1A4B	; 0x801a4b <__clock+0x5>
    6892:	a0 91 4c 1a 	lds	r26, 0x1A4C	; 0x801a4c <__clock+0x6>
    6896:	b0 91 4d 1a 	lds	r27, 0x1A4D	; 0x801a4d <__clock+0x7>
    689a:	84 83       	std	Z+4, r24	; 0x04
    689c:	95 83       	std	Z+5, r25	; 0x05
    689e:	a6 83       	std	Z+6, r26	; 0x06
    68a0:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    68a2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    68a6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    68aa:	b1 9b       	sbis	0x16, 1	; 22
    68ac:	03 c0       	rjmp	.+6      	; 0x68b4 <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    68ae:	c0 e0       	ldi	r28, 0x00	; 0
    68b0:	d0 e0       	ldi	r29, 0x00	; 0
    68b2:	3f c0       	rjmp	.+126    	; 0x6932 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    68b4:	82 17       	cp	r24, r18
    68b6:	93 07       	cpc	r25, r19
    68b8:	d0 f1       	brcs	.+116    	; 0x692e <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    68ba:	c0 e0       	ldi	r28, 0x00	; 0
    68bc:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    68be:	40 e0       	ldi	r20, 0x00	; 0
    68c0:	50 e0       	ldi	r21, 0x00	; 0
    68c2:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    68c4:	9a 01       	movw	r18, r20
    68c6:	ab 01       	movw	r20, r22
    68c8:	28 0f       	add	r18, r24
    68ca:	39 1f       	adc	r19, r25
    68cc:	41 1d       	adc	r20, r1
    68ce:	51 1d       	adc	r21, r1

// enable interrupts
    sei();
    68d0:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    68d2:	a2 e3       	ldi	r26, 0x32	; 50
    68d4:	b0 e0       	ldi	r27, 0x00	; 0
    68d6:	0e 94 73 e7 	call	0x1cee6	; 0x1cee6 <__muluhisi3>
    68da:	04 81       	ldd	r16, Z+4	; 0x04
    68dc:	15 81       	ldd	r17, Z+5	; 0x05
    68de:	26 81       	ldd	r18, Z+6	; 0x06
    68e0:	37 81       	ldd	r19, Z+7	; 0x07
    68e2:	dc 01       	movw	r26, r24
    68e4:	cb 01       	movw	r24, r22
    68e6:	80 0f       	add	r24, r16
    68e8:	91 1f       	adc	r25, r17
    68ea:	a2 1f       	adc	r26, r18
    68ec:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    68ee:	81 15       	cp	r24, r1
    68f0:	2a ec       	ldi	r18, 0xCA	; 202
    68f2:	92 07       	cpc	r25, r18
    68f4:	2a e9       	ldi	r18, 0x9A	; 154
    68f6:	a2 07       	cpc	r26, r18
    68f8:	2b e3       	ldi	r18, 0x3B	; 59
    68fa:	b2 07       	cpc	r27, r18
    68fc:	2c f4       	brge	.+10     	; 0x6908 <clock_gettime+0xaa>
// enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    68fe:	84 83       	std	Z+4, r24	; 0x04
    6900:	95 83       	std	Z+5, r25	; 0x05
    6902:	a6 83       	std	Z+6, r26	; 0x06
    6904:	b7 83       	std	Z+7, r27	; 0x07
    6906:	1a c0       	rjmp	.+52     	; 0x693c <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    6908:	9a 5c       	subi	r25, 0xCA	; 202
    690a:	aa 49       	sbci	r26, 0x9A	; 154
    690c:	bb 43       	sbci	r27, 0x3B	; 59
    690e:	84 83       	std	Z+4, r24	; 0x04
    6910:	95 83       	std	Z+5, r25	; 0x05
    6912:	a6 83       	std	Z+6, r26	; 0x06
    6914:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    6916:	80 81       	ld	r24, Z
    6918:	91 81       	ldd	r25, Z+1	; 0x01
    691a:	a2 81       	ldd	r26, Z+2	; 0x02
    691c:	b3 81       	ldd	r27, Z+3	; 0x03
    691e:	01 96       	adiw	r24, 0x01	; 1
    6920:	a1 1d       	adc	r26, r1
    6922:	b1 1d       	adc	r27, r1
    6924:	80 83       	st	Z, r24
    6926:	91 83       	std	Z+1, r25	; 0x01
    6928:	a2 83       	std	Z+2, r26	; 0x02
    692a:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    692c:	07 c0       	rjmp	.+14     	; 0x693c <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;                          // counter overflow and NO pending is an error!
    692e:	cf ef       	ldi	r28, 0xFF	; 255
    6930:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    6932:	40 e2       	ldi	r20, 0x20	; 32
    6934:	5e e4       	ldi	r21, 0x4E	; 78
    6936:	60 e0       	ldi	r22, 0x00	; 0
    6938:	70 e0       	ldi	r23, 0x00	; 0
    693a:	c4 cf       	rjmp	.-120    	; 0x68c4 <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    693c:	ce 01       	movw	r24, r28
    693e:	df 91       	pop	r29
    6940:	cf 91       	pop	r28
    6942:	1f 91       	pop	r17
    6944:	0f 91       	pop	r16
    6946:	08 95       	ret

00006948 <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    6948:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <__clock+0x4>
    694c:	90 91 4b 1a 	lds	r25, 0x1A4B	; 0x801a4b <__clock+0x5>
    6950:	a0 91 4c 1a 	lds	r26, 0x1A4C	; 0x801a4c <__clock+0x6>
    6954:	b0 91 4d 1a 	lds	r27, 0x1A4D	; 0x801a4d <__clock+0x7>
    6958:	80 5c       	subi	r24, 0xC0	; 192
    695a:	9d 4b       	sbci	r25, 0xBD	; 189
    695c:	a0 4f       	sbci	r26, 0xF0	; 240
    695e:	bf 4f       	sbci	r27, 0xFF	; 255
    6960:	80 93 4a 1a 	sts	0x1A4A, r24	; 0x801a4a <__clock+0x4>
    6964:	90 93 4b 1a 	sts	0x1A4B, r25	; 0x801a4b <__clock+0x5>
    6968:	a0 93 4c 1a 	sts	0x1A4C, r26	; 0x801a4c <__clock+0x6>
    696c:	b0 93 4d 1a 	sts	0x1A4D, r27	; 0x801a4d <__clock+0x7>
    6970:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <__clock+0x4>
    6974:	90 91 4b 1a 	lds	r25, 0x1A4B	; 0x801a4b <__clock+0x5>
    6978:	a0 91 4c 1a 	lds	r26, 0x1A4C	; 0x801a4c <__clock+0x6>
    697c:	b0 91 4d 1a 	lds	r27, 0x1A4D	; 0x801a4d <__clock+0x7>
    6980:	81 15       	cp	r24, r1
    6982:	9a 4c       	sbci	r25, 0xCA	; 202
    6984:	aa 49       	sbci	r26, 0x9A	; 154
    6986:	bb 43       	sbci	r27, 0x3B	; 59
    6988:	dc f0       	brlt	.+54     	; 0x69c0 <clock_task+0x78>
    698a:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <__clock>
    698e:	90 91 47 1a 	lds	r25, 0x1A47	; 0x801a47 <__clock+0x1>
    6992:	a0 91 48 1a 	lds	r26, 0x1A48	; 0x801a48 <__clock+0x2>
    6996:	b0 91 49 1a 	lds	r27, 0x1A49	; 0x801a49 <__clock+0x3>
    699a:	01 96       	adiw	r24, 0x01	; 1
    699c:	a1 1d       	adc	r26, r1
    699e:	b1 1d       	adc	r27, r1
    69a0:	80 93 46 1a 	sts	0x1A46, r24	; 0x801a46 <__clock>
    69a4:	90 93 47 1a 	sts	0x1A47, r25	; 0x801a47 <__clock+0x1>
    69a8:	a0 93 48 1a 	sts	0x1A48, r26	; 0x801a48 <__clock+0x2>
    69ac:	b0 93 49 1a 	sts	0x1A49, r27	; 0x801a49 <__clock+0x3>
    69b0:	10 92 4a 1a 	sts	0x1A4A, r1	; 0x801a4a <__clock+0x4>
    69b4:	10 92 4b 1a 	sts	0x1A4B, r1	; 0x801a4b <__clock+0x5>
    69b8:	10 92 4c 1a 	sts	0x1A4C, r1	; 0x801a4c <__clock+0x6>
    69bc:	10 92 4d 1a 	sts	0x1A4D, r1	; 0x801a4d <__clock+0x7>
    69c0:	08 95       	ret

000069c2 <clock_settime.part.2>:
    69c2:	fc 01       	movw	r30, r24
    69c4:	84 81       	ldd	r24, Z+4	; 0x04
    69c6:	95 81       	ldd	r25, Z+5	; 0x05
    69c8:	a6 81       	ldd	r26, Z+6	; 0x06
    69ca:	b7 81       	ldd	r27, Z+7	; 0x07
    69cc:	80 93 4a 1a 	sts	0x1A4A, r24	; 0x801a4a <__clock+0x4>
    69d0:	90 93 4b 1a 	sts	0x1A4B, r25	; 0x801a4b <__clock+0x5>
    69d4:	a0 93 4c 1a 	sts	0x1A4C, r26	; 0x801a4c <__clock+0x6>
    69d8:	b0 93 4d 1a 	sts	0x1A4D, r27	; 0x801a4d <__clock+0x7>
    69dc:	80 81       	ld	r24, Z
    69de:	91 81       	ldd	r25, Z+1	; 0x01
    69e0:	a2 81       	ldd	r26, Z+2	; 0x02
    69e2:	b3 81       	ldd	r27, Z+3	; 0x03
    69e4:	80 93 46 1a 	sts	0x1A46, r24	; 0x801a46 <__clock>
    69e8:	90 93 47 1a 	sts	0x1A47, r25	; 0x801a47 <__clock+0x1>
    69ec:	a0 93 48 1a 	sts	0x1A48, r26	; 0x801a48 <__clock+0x2>
    69f0:	b0 93 49 1a 	sts	0x1A49, r27	; 0x801a49 <__clock+0x3>
    69f4:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <__clock+0x4>
    69f8:	90 91 4b 1a 	lds	r25, 0x1A4B	; 0x801a4b <__clock+0x5>
    69fc:	a0 91 4c 1a 	lds	r26, 0x1A4C	; 0x801a4c <__clock+0x6>
    6a00:	b0 91 4d 1a 	lds	r27, 0x1A4D	; 0x801a4d <__clock+0x7>
    6a04:	44 81       	ldd	r20, Z+4	; 0x04
    6a06:	55 81       	ldd	r21, Z+5	; 0x05
    6a08:	66 81       	ldd	r22, Z+6	; 0x06
    6a0a:	77 81       	ldd	r23, Z+7	; 0x07
    6a0c:	48 17       	cp	r20, r24
    6a0e:	59 07       	cpc	r21, r25
    6a10:	6a 07       	cpc	r22, r26
    6a12:	7b 07       	cpc	r23, r27
    6a14:	b9 f6       	brne	.-82     	; 0x69c4 <clock_settime.part.2+0x2>
    6a16:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <__clock>
    6a1a:	90 91 47 1a 	lds	r25, 0x1A47	; 0x801a47 <__clock+0x1>
    6a1e:	a0 91 48 1a 	lds	r26, 0x1A48	; 0x801a48 <__clock+0x2>
    6a22:	b0 91 49 1a 	lds	r27, 0x1A49	; 0x801a49 <__clock+0x3>
    6a26:	40 81       	ld	r20, Z
    6a28:	51 81       	ldd	r21, Z+1	; 0x01
    6a2a:	62 81       	ldd	r22, Z+2	; 0x02
    6a2c:	73 81       	ldd	r23, Z+3	; 0x03
    6a2e:	48 17       	cp	r20, r24
    6a30:	59 07       	cpc	r21, r25
    6a32:	6a 07       	cpc	r22, r26
    6a34:	7b 07       	cpc	r23, r27
    6a36:	31 f6       	brne	.-116    	; 0x69c4 <clock_settime.part.2+0x2>
    6a38:	80 e0       	ldi	r24, 0x00	; 0
    6a3a:	90 e0       	ldi	r25, 0x00	; 0
    6a3c:	08 95       	ret

00006a3e <set_timers>:
    6a3e:	00 d0       	rcall	.+0      	; 0x6a40 <set_timers+0x2>
    6a40:	1f 92       	push	r1
    6a42:	00 97       	sbiw	r24, 0x00	; 0
    6a44:	79 f1       	breq	.+94     	; 0x6aa4 <set_timers+0x66>
    6a46:	ee e4       	ldi	r30, 0x4E	; 78
    6a48:	fa e1       	ldi	r31, 0x1A	; 26
    6a4a:	4f ef       	ldi	r20, 0xFF	; 255
    6a4c:	5f ef       	ldi	r21, 0xFF	; 255
    6a4e:	20 e0       	ldi	r18, 0x00	; 0
    6a50:	30 e0       	ldi	r19, 0x00	; 0
    6a52:	60 81       	ld	r22, Z
    6a54:	71 81       	ldd	r23, Z+1	; 0x01
    6a56:	86 17       	cp	r24, r22
    6a58:	97 07       	cpc	r25, r23
    6a5a:	79 f0       	breq	.+30     	; 0x6a7a <set_timers+0x3c>
    6a5c:	67 2b       	or	r22, r23
    6a5e:	71 f4       	brne	.+28     	; 0x6a7c <set_timers+0x3e>
    6a60:	f9 01       	movw	r30, r18
    6a62:	ee 0f       	add	r30, r30
    6a64:	ff 1f       	adc	r31, r31
    6a66:	e2 0f       	add	r30, r18
    6a68:	f3 1f       	adc	r31, r19
    6a6a:	e2 5b       	subi	r30, 0xB2	; 178
    6a6c:	f5 4e       	sbci	r31, 0xE5	; 229
    6a6e:	91 83       	std	Z+1, r25	; 0x01
    6a70:	80 83       	st	Z, r24
    6a72:	81 e0       	ldi	r24, 0x01	; 1
    6a74:	82 83       	std	Z+2, r24	; 0x02
    6a76:	c9 01       	movw	r24, r18
    6a78:	19 c0       	rjmp	.+50     	; 0x6aac <set_timers+0x6e>
    6a7a:	a9 01       	movw	r20, r18
    6a7c:	2f 5f       	subi	r18, 0xFF	; 255
    6a7e:	3f 4f       	sbci	r19, 0xFF	; 255
    6a80:	33 96       	adiw	r30, 0x03	; 3
    6a82:	28 30       	cpi	r18, 0x08	; 8
    6a84:	31 05       	cpc	r19, r1
    6a86:	29 f7       	brne	.-54     	; 0x6a52 <set_timers+0x14>
    6a88:	4f 3f       	cpi	r20, 0xFF	; 255
    6a8a:	8f ef       	ldi	r24, 0xFF	; 255
    6a8c:	58 07       	cpc	r21, r24
    6a8e:	69 f4       	brne	.+26     	; 0x6aaa <set_timers+0x6c>
    6a90:	8f ec       	ldi	r24, 0xCF	; 207
    6a92:	95 e0       	ldi	r25, 0x05	; 5
    6a94:	a0 e0       	ldi	r26, 0x00	; 0
    6a96:	ed b7       	in	r30, 0x3d	; 61
    6a98:	fe b7       	in	r31, 0x3e	; 62
    6a9a:	81 83       	std	Z+1, r24	; 0x01
    6a9c:	92 83       	std	Z+2, r25	; 0x02
    6a9e:	a3 83       	std	Z+3, r26	; 0x03
    6aa0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    6aa4:	8f ef       	ldi	r24, 0xFF	; 255
    6aa6:	9f ef       	ldi	r25, 0xFF	; 255
    6aa8:	01 c0       	rjmp	.+2      	; 0x6aac <set_timers+0x6e>
    6aaa:	ca 01       	movw	r24, r20
    6aac:	0f 90       	pop	r0
    6aae:	0f 90       	pop	r0
    6ab0:	0f 90       	pop	r0
    6ab2:	08 95       	ret

00006ab4 <delete_all_timers>:
    6ab4:	ee e4       	ldi	r30, 0x4E	; 78
    6ab6:	fa e1       	ldi	r31, 0x1A	; 26
    6ab8:	12 82       	std	Z+2, r1	; 0x02
    6aba:	11 82       	std	Z+1, r1	; 0x01
    6abc:	10 82       	st	Z, r1
    6abe:	33 96       	adiw	r30, 0x03	; 3
    6ac0:	8a e1       	ldi	r24, 0x1A	; 26
    6ac2:	e6 36       	cpi	r30, 0x66	; 102
    6ac4:	f8 07       	cpc	r31, r24
    6ac6:	c1 f7       	brne	.-16     	; 0x6ab8 <delete_all_timers+0x4>
    6ac8:	08 95       	ret

00006aca <subtract_timespec>:
    6aca:	0f 93       	push	r16
    6acc:	1f 93       	push	r17
    6ace:	cf 93       	push	r28
    6ad0:	df 93       	push	r29
    6ad2:	fc 01       	movw	r30, r24
    6ad4:	84 81       	ldd	r24, Z+4	; 0x04
    6ad6:	95 81       	ldd	r25, Z+5	; 0x05
    6ad8:	a6 81       	ldd	r26, Z+6	; 0x06
    6ada:	b7 81       	ldd	r27, Z+7	; 0x07
    6adc:	eb 01       	movw	r28, r22
    6ade:	0c 81       	ldd	r16, Y+4	; 0x04
    6ae0:	1d 81       	ldd	r17, Y+5	; 0x05
    6ae2:	2e 81       	ldd	r18, Y+6	; 0x06
    6ae4:	3f 81       	ldd	r19, Y+7	; 0x07
    6ae6:	80 1b       	sub	r24, r16
    6ae8:	91 0b       	sbc	r25, r17
    6aea:	a2 0b       	sbc	r26, r18
    6aec:	b3 0b       	sbc	r27, r19
    6aee:	b7 fd       	sbrc	r27, 7
    6af0:	05 c0       	rjmp	.+10     	; 0x6afc <subtract_timespec+0x32>
    6af2:	84 83       	std	Z+4, r24	; 0x04
    6af4:	95 83       	std	Z+5, r25	; 0x05
    6af6:	a6 83       	std	Z+6, r26	; 0x06
    6af8:	b7 83       	std	Z+7, r27	; 0x07
    6afa:	12 c0       	rjmp	.+36     	; 0x6b20 <subtract_timespec+0x56>
    6afc:	96 53       	subi	r25, 0x36	; 54
    6afe:	a5 46       	sbci	r26, 0x65	; 101
    6b00:	b4 4c       	sbci	r27, 0xC4	; 196
    6b02:	84 83       	std	Z+4, r24	; 0x04
    6b04:	95 83       	std	Z+5, r25	; 0x05
    6b06:	a6 83       	std	Z+6, r26	; 0x06
    6b08:	b7 83       	std	Z+7, r27	; 0x07
    6b0a:	80 81       	ld	r24, Z
    6b0c:	91 81       	ldd	r25, Z+1	; 0x01
    6b0e:	a2 81       	ldd	r26, Z+2	; 0x02
    6b10:	b3 81       	ldd	r27, Z+3	; 0x03
    6b12:	01 97       	sbiw	r24, 0x01	; 1
    6b14:	a1 09       	sbc	r26, r1
    6b16:	b1 09       	sbc	r27, r1
    6b18:	80 83       	st	Z, r24
    6b1a:	91 83       	std	Z+1, r25	; 0x01
    6b1c:	a2 83       	std	Z+2, r26	; 0x02
    6b1e:	b3 83       	std	Z+3, r27	; 0x03
    6b20:	80 81       	ld	r24, Z
    6b22:	91 81       	ldd	r25, Z+1	; 0x01
    6b24:	a2 81       	ldd	r26, Z+2	; 0x02
    6b26:	b3 81       	ldd	r27, Z+3	; 0x03
    6b28:	eb 01       	movw	r28, r22
    6b2a:	48 81       	ld	r20, Y
    6b2c:	59 81       	ldd	r21, Y+1	; 0x01
    6b2e:	6a 81       	ldd	r22, Y+2	; 0x02
    6b30:	7b 81       	ldd	r23, Y+3	; 0x03
    6b32:	84 1b       	sub	r24, r20
    6b34:	95 0b       	sbc	r25, r21
    6b36:	a6 0b       	sbc	r26, r22
    6b38:	b7 0b       	sbc	r27, r23
    6b3a:	80 83       	st	Z, r24
    6b3c:	91 83       	std	Z+1, r25	; 0x01
    6b3e:	a2 83       	std	Z+2, r26	; 0x02
    6b40:	b3 83       	std	Z+3, r27	; 0x03
    6b42:	df 91       	pop	r29
    6b44:	cf 91       	pop	r28
    6b46:	1f 91       	pop	r17
    6b48:	0f 91       	pop	r16
    6b4a:	08 95       	ret

00006b4c <ts_to_str>:
    6b4c:	ad b7       	in	r26, 0x3d	; 61
    6b4e:	be b7       	in	r27, 0x3e	; 62
    6b50:	1f 97       	sbiw	r26, 0x0f	; 15
    6b52:	0f b6       	in	r0, 0x3f	; 63
    6b54:	f8 94       	cli
    6b56:	be bf       	out	0x3e, r27	; 62
    6b58:	0f be       	out	0x3f, r0	; 63
    6b5a:	ad bf       	out	0x3d, r26	; 61
    6b5c:	fc 01       	movw	r30, r24
    6b5e:	44 81       	ldd	r20, Z+4	; 0x04
    6b60:	55 81       	ldd	r21, Z+5	; 0x05
    6b62:	66 81       	ldd	r22, Z+6	; 0x06
    6b64:	77 81       	ldd	r23, Z+7	; 0x07
    6b66:	ed b7       	in	r30, 0x3d	; 61
    6b68:	fe b7       	in	r31, 0x3e	; 62
    6b6a:	44 87       	std	Z+12, r20	; 0x0c
    6b6c:	55 87       	std	Z+13, r21	; 0x0d
    6b6e:	66 87       	std	Z+14, r22	; 0x0e
    6b70:	77 87       	std	Z+15, r23	; 0x0f
    6b72:	fc 01       	movw	r30, r24
    6b74:	80 81       	ld	r24, Z
    6b76:	91 81       	ldd	r25, Z+1	; 0x01
    6b78:	a2 81       	ldd	r26, Z+2	; 0x02
    6b7a:	b3 81       	ldd	r27, Z+3	; 0x03
    6b7c:	ed b7       	in	r30, 0x3d	; 61
    6b7e:	fe b7       	in	r31, 0x3e	; 62
    6b80:	80 87       	std	Z+8, r24	; 0x08
    6b82:	91 87       	std	Z+9, r25	; 0x09
    6b84:	a2 87       	std	Z+10, r26	; 0x0a
    6b86:	b3 87       	std	Z+11, r27	; 0x0b
    6b88:	85 ec       	ldi	r24, 0xC5	; 197
    6b8a:	95 e0       	ldi	r25, 0x05	; 5
    6b8c:	a0 e0       	ldi	r26, 0x00	; 0
    6b8e:	85 83       	std	Z+5, r24	; 0x05
    6b90:	96 83       	std	Z+6, r25	; 0x06
    6b92:	a7 83       	std	Z+7, r26	; 0x07
    6b94:	8f e1       	ldi	r24, 0x1F	; 31
    6b96:	90 e0       	ldi	r25, 0x00	; 0
    6b98:	94 83       	std	Z+4, r25	; 0x04
    6b9a:	83 83       	std	Z+3, r24	; 0x03
    6b9c:	8a e7       	ldi	r24, 0x7A	; 122
    6b9e:	97 e1       	ldi	r25, 0x17	; 23
    6ba0:	92 83       	std	Z+2, r25	; 0x02
    6ba2:	81 83       	std	Z+1, r24	; 0x01
    6ba4:	0e 94 49 47 	call	0x8e92	; 0x8e92 <snprintf_P>
    6ba8:	8a e7       	ldi	r24, 0x7A	; 122
    6baa:	97 e1       	ldi	r25, 0x17	; 23
    6bac:	ad b7       	in	r26, 0x3d	; 61
    6bae:	be b7       	in	r27, 0x3e	; 62
    6bb0:	1f 96       	adiw	r26, 0x0f	; 15
    6bb2:	0f b6       	in	r0, 0x3f	; 63
    6bb4:	f8 94       	cli
    6bb6:	be bf       	out	0x3e, r27	; 62
    6bb8:	0f be       	out	0x3f, r0	; 63
    6bba:	ad bf       	out	0x3d, r26	; 61
    6bbc:	08 95       	ret

00006bbe <clock_elapsed_begin>:
    6bbe:	62 e7       	ldi	r22, 0x72	; 114
    6bc0:	77 e1       	ldi	r23, 0x17	; 23
    6bc2:	80 e0       	ldi	r24, 0x00	; 0
    6bc4:	90 e0       	ldi	r25, 0x00	; 0
    6bc6:	4b ce       	rjmp	.-874    	; 0x685e <clock_gettime>
    6bc8:	08 95       	ret

00006bca <clock_elapsed_end>:
    6bca:	af e0       	ldi	r26, 0x0F	; 15
    6bcc:	b0 e0       	ldi	r27, 0x00	; 0
    6bce:	eb ee       	ldi	r30, 0xEB	; 235
    6bd0:	f5 e3       	ldi	r31, 0x35	; 53
    6bd2:	0c 94 a1 e7 	jmp	0x1cf42	; 0x1cf42 <__prologue_saves__+0x1c>
    6bd6:	8c 01       	movw	r16, r24
    6bd8:	be 01       	movw	r22, r28
    6bda:	68 5f       	subi	r22, 0xF8	; 248
    6bdc:	7f 4f       	sbci	r23, 0xFF	; 255
    6bde:	80 e0       	ldi	r24, 0x00	; 0
    6be0:	90 e0       	ldi	r25, 0x00	; 0
    6be2:	3d de       	rcall	.-902    	; 0x685e <clock_gettime>
    6be4:	62 e7       	ldi	r22, 0x72	; 114
    6be6:	77 e1       	ldi	r23, 0x17	; 23
    6be8:	ce 01       	movw	r24, r28
    6bea:	08 96       	adiw	r24, 0x08	; 8
    6bec:	6e df       	rcall	.-292    	; 0x6aca <subtract_timespec>
    6bee:	01 15       	cp	r16, r1
    6bf0:	11 05       	cpc	r17, r1
    6bf2:	b1 f0       	breq	.+44     	; 0x6c20 <clock_elapsed_end+0x56>
    6bf4:	f8 01       	movw	r30, r16
    6bf6:	80 81       	ld	r24, Z
    6bf8:	88 23       	and	r24, r24
    6bfa:	91 f0       	breq	.+36     	; 0x6c20 <clock_elapsed_end+0x56>
    6bfc:	ce 01       	movw	r24, r28
    6bfe:	08 96       	adiw	r24, 0x08	; 8
    6c00:	a5 df       	rcall	.-182    	; 0x6b4c <ts_to_str>
    6c02:	ed b7       	in	r30, 0x3d	; 61
    6c04:	fe b7       	in	r31, 0x3e	; 62
    6c06:	97 83       	std	Z+7, r25	; 0x07
    6c08:	86 83       	std	Z+6, r24	; 0x06
    6c0a:	15 83       	std	Z+5, r17	; 0x05
    6c0c:	04 83       	std	Z+4, r16	; 0x04
    6c0e:	87 eb       	ldi	r24, 0xB7	; 183
    6c10:	95 e0       	ldi	r25, 0x05	; 5
    6c12:	a0 e0       	ldi	r26, 0x00	; 0
    6c14:	81 83       	std	Z+1, r24	; 0x01
    6c16:	92 83       	std	Z+2, r25	; 0x02
    6c18:	a3 83       	std	Z+3, r26	; 0x03
    6c1a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    6c1e:	0f c0       	rjmp	.+30     	; 0x6c3e <clock_elapsed_end+0x74>
    6c20:	ce 01       	movw	r24, r28
    6c22:	08 96       	adiw	r24, 0x08	; 8
    6c24:	93 df       	rcall	.-218    	; 0x6b4c <ts_to_str>
    6c26:	ed b7       	in	r30, 0x3d	; 61
    6c28:	fe b7       	in	r31, 0x3e	; 62
    6c2a:	95 83       	std	Z+5, r25	; 0x05
    6c2c:	84 83       	std	Z+4, r24	; 0x04
    6c2e:	8c ea       	ldi	r24, 0xAC	; 172
    6c30:	95 e0       	ldi	r25, 0x05	; 5
    6c32:	a0 e0       	ldi	r26, 0x00	; 0
    6c34:	81 83       	std	Z+1, r24	; 0x01
    6c36:	92 83       	std	Z+2, r25	; 0x02
    6c38:	a3 83       	std	Z+3, r26	; 0x03
    6c3a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    6c3e:	2f 96       	adiw	r28, 0x0f	; 15
    6c40:	e4 e0       	ldi	r30, 0x04	; 4
    6c42:	0c 94 bd e7 	jmp	0x1cf7a	; 0x1cf7a <__epilogue_restores__+0x1c>

00006c46 <clock_clear>:
    6c46:	a8 e0       	ldi	r26, 0x08	; 8
    6c48:	b0 e0       	ldi	r27, 0x00	; 0
    6c4a:	e9 e2       	ldi	r30, 0x29	; 41
    6c4c:	f6 e3       	ldi	r31, 0x36	; 54
    6c4e:	0c 94 a3 e7 	jmp	0x1cf46	; 0x1cf46 <__prologue_saves__+0x20>
    6c52:	1d 82       	std	Y+5, r1	; 0x05
    6c54:	1e 82       	std	Y+6, r1	; 0x06
    6c56:	1f 82       	std	Y+7, r1	; 0x07
    6c58:	18 86       	std	Y+8, r1	; 0x08
    6c5a:	19 82       	std	Y+1, r1	; 0x01
    6c5c:	1a 82       	std	Y+2, r1	; 0x02
    6c5e:	1b 82       	std	Y+3, r1	; 0x03
    6c60:	1c 82       	std	Y+4, r1	; 0x04
    6c62:	ce 01       	movw	r24, r28
    6c64:	01 96       	adiw	r24, 0x01	; 1
    6c66:	ad de       	rcall	.-678    	; 0x69c2 <clock_settime.part.2>
    6c68:	e6 e6       	ldi	r30, 0x66	; 102
    6c6a:	fa e1       	ldi	r31, 0x1A	; 26
    6c6c:	11 82       	std	Z+1, r1	; 0x01
    6c6e:	10 82       	st	Z, r1
    6c70:	13 82       	std	Z+3, r1	; 0x03
    6c72:	12 82       	std	Z+2, r1	; 0x02
    6c74:	28 96       	adiw	r28, 0x08	; 8
    6c76:	e2 e0       	ldi	r30, 0x02	; 2
    6c78:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00006c7c <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6c7c:	80 91 9a 17 	lds	r24, 0x179A	; 0x80179a <timers_configured>
    6c80:	90 91 9b 17 	lds	r25, 0x179B	; 0x80179b <timers_configured+0x1>
    6c84:	89 2b       	or	r24, r25
    6c86:	69 f0       	breq	.+26     	; 0x6ca2 <enable_timers+0x26>
    6c88:	80 91 9c 17 	lds	r24, 0x179C	; 0x80179c <timers_enabled>
    6c8c:	90 91 9d 17 	lds	r25, 0x179D	; 0x80179d <timers_enabled+0x1>
    6c90:	89 2b       	or	r24, r25
    6c92:	39 f4       	brne	.+14     	; 0x6ca2 <enable_timers+0x26>
    {
        enable_system_task();
    6c94:	a8 dd       	rcall	.-1200   	; 0x67e6 <enable_system_task>
        timers_enabled = 1;
    6c96:	81 e0       	ldi	r24, 0x01	; 1
    6c98:	90 e0       	ldi	r25, 0x00	; 0
    6c9a:	90 93 9d 17 	sts	0x179D, r25	; 0x80179d <timers_enabled+0x1>
    6c9e:	80 93 9c 17 	sts	0x179C, r24	; 0x80179c <timers_enabled>
    6ca2:	08 95       	ret

00006ca4 <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6ca4:	cf 93       	push	r28
    6ca6:	df 93       	push	r29
    6ca8:	ce e4       	ldi	r28, 0x4E	; 78
    6caa:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6cac:	8a 81       	ldd	r24, Y+2	; 0x02
    6cae:	88 23       	and	r24, r24
    6cb0:	29 f0       	breq	.+10     	; 0x6cbc <execute_timers+0x18>
    6cb2:	e8 81       	ld	r30, Y
    6cb4:	f9 81       	ldd	r31, Y+1	; 0x01
    6cb6:	30 97       	sbiw	r30, 0x00	; 0
    6cb8:	09 f0       	breq	.+2      	; 0x6cbc <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6cba:	09 95       	icall
    6cbc:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6cbe:	8a e1       	ldi	r24, 0x1A	; 26
    6cc0:	c6 36       	cpi	r28, 0x66	; 102
    6cc2:	d8 07       	cpc	r29, r24
    6cc4:	99 f7       	brne	.-26     	; 0x6cac <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6cc6:	df 91       	pop	r29
    6cc8:	cf 91       	pop	r28
    6cca:	08 95       	ret

00006ccc <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    6ccc:	00 d0       	rcall	.+0      	; 0x6cce <init_timers+0x2>
    6cce:	1f 92       	push	r1
    printf("Timers init called\n");
    6cd0:	88 e9       	ldi	r24, 0x98	; 152
    6cd2:	95 e0       	ldi	r25, 0x05	; 5
    6cd4:	a0 e0       	ldi	r26, 0x00	; 0
    6cd6:	ed b7       	in	r30, 0x3d	; 61
    6cd8:	fe b7       	in	r31, 0x3e	; 62
    6cda:	81 83       	std	Z+1, r24	; 0x01
    6cdc:	92 83       	std	Z+2, r25	; 0x02
    6cde:	a3 83       	std	Z+3, r26	; 0x03
    6ce0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

    if(!timers_configured)
    6ce4:	80 91 9a 17 	lds	r24, 0x179A	; 0x80179a <timers_configured>
    6ce8:	90 91 9b 17 	lds	r25, 0x179B	; 0x80179b <timers_configured+0x1>
    6cec:	89 2b       	or	r24, r25
    6cee:	a9 f4       	brne	.+42     	; 0x6d1a <init_timers+0x4e>
    {
        install_timers_isr();
    6cf0:	7c dd       	rcall	.-1288   	; 0x67ea <install_timers_isr>
        timers_configured = 1;
    6cf2:	81 e0       	ldi	r24, 0x01	; 1
    6cf4:	90 e0       	ldi	r25, 0x00	; 0
    6cf6:	90 93 9b 17 	sts	0x179B, r25	; 0x80179b <timers_configured+0x1>
    6cfa:	80 93 9a 17 	sts	0x179A, r24	; 0x80179a <timers_configured>
        timers_enabled = 0;
    6cfe:	10 92 9d 17 	sts	0x179D, r1	; 0x80179d <timers_enabled+0x1>
    6d02:	10 92 9c 17 	sts	0x179C, r1	; 0x80179c <timers_enabled>
        printf("Timers configured\n");
    6d06:	85 e8       	ldi	r24, 0x85	; 133
    6d08:	95 e0       	ldi	r25, 0x05	; 5
    6d0a:	a0 e0       	ldi	r26, 0x00	; 0
    6d0c:	ed b7       	in	r30, 0x3d	; 61
    6d0e:	fe b7       	in	r31, 0x3e	; 62
    6d10:	81 83       	std	Z+1, r24	; 0x01
    6d12:	92 83       	std	Z+2, r25	; 0x02
    6d14:	a3 83       	std	Z+3, r26	; 0x03
    6d16:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    }

    delete_all_timers();

    clock_clear();
    6d1a:	cc de       	rcall	.-616    	; 0x6ab4 <delete_all_timers>
    6d1c:	94 df       	rcall	.-216    	; 0x6c46 <clock_clear>
    printf("Clock Init\n");
    6d1e:	89 e7       	ldi	r24, 0x79	; 121
    6d20:	95 e0       	ldi	r25, 0x05	; 5
    6d22:	a0 e0       	ldi	r26, 0x00	; 0
    6d24:	ed b7       	in	r30, 0x3d	; 61
    6d26:	fe b7       	in	r31, 0x3e	; 62
    6d28:	81 83       	std	Z+1, r24	; 0x01
    6d2a:	92 83       	std	Z+2, r25	; 0x02
    6d2c:	a3 83       	std	Z+3, r26	; 0x03
    6d2e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6d32:	61 e0       	ldi	r22, 0x01	; 1
    6d34:	70 e0       	ldi	r23, 0x00	; 0
    6d36:	84 ea       	ldi	r24, 0xA4	; 164
    6d38:	94 e3       	ldi	r25, 0x34	; 52
    6d3a:	81 de       	rcall	.-766    	; 0x6a3e <set_timers>
    6d3c:	01 96       	adiw	r24, 0x01	; 1
    6d3e:	51 f4       	brne	.+20     	; 0x6d54 <init_timers+0x88>
        printf("Clock task init failed\n");
    6d40:	81 e6       	ldi	r24, 0x61	; 97
    6d42:	95 e0       	ldi	r25, 0x05	; 5
    6d44:	a0 e0       	ldi	r26, 0x00	; 0
    6d46:	ed b7       	in	r30, 0x3d	; 61
    6d48:	fe b7       	in	r31, 0x3e	; 62
    6d4a:	81 83       	std	Z+1, r24	; 0x01
    6d4c:	92 83       	std	Z+2, r25	; 0x02
    6d4e:	a3 83       	std	Z+3, r26	; 0x03
    6d50:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("Clock Installed\n");
    6d54:	80 e5       	ldi	r24, 0x50	; 80
    6d56:	95 e0       	ldi	r25, 0x05	; 5
    6d58:	a0 e0       	ldi	r26, 0x00	; 0
    6d5a:	ed b7       	in	r30, 0x3d	; 61
    6d5c:	fe b7       	in	r31, 0x3e	; 62
    6d5e:	81 83       	std	Z+1, r24	; 0x01
    6d60:	92 83       	std	Z+2, r25	; 0x02
    6d62:	a3 83       	std	Z+3, r26	; 0x03
    6d64:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

    enable_timers();
    6d68:	89 df       	rcall	.-238    	; 0x6c7c <enable_timers>

    printf("Timers enabled\n");
    6d6a:	80 e4       	ldi	r24, 0x40	; 64
    6d6c:	95 e0       	ldi	r25, 0x05	; 5
    6d6e:	a0 e0       	ldi	r26, 0x00	; 0
    6d70:	ed b7       	in	r30, 0x3d	; 61
    6d72:	fe b7       	in	r31, 0x3e	; 62
    6d74:	81 83       	std	Z+1, r24	; 0x01
    6d76:	92 83       	std	Z+2, r25	; 0x02
    6d78:	a3 83       	std	Z+3, r26	; 0x03
    6d7a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
}
    6d7e:	0f 90       	pop	r0
    6d80:	0f 90       	pop	r0
    6d82:	0f 90       	pop	r0
    6d84:	08 95       	ret

00006d86 <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
    6d86:	89 2b       	or	r24, r25
    6d88:	81 f4       	brne	.+32     	; 0x6daa <clock_getres+0x24>
        return(-1);
    res->tv_sec = 0;
    6d8a:	fb 01       	movw	r30, r22
    6d8c:	10 82       	st	Z, r1
    6d8e:	11 82       	std	Z+1, r1	; 0x01
    6d90:	12 82       	std	Z+2, r1	; 0x02
    6d92:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6d94:	80 e4       	ldi	r24, 0x40	; 64
    6d96:	92 e4       	ldi	r25, 0x42	; 66
    6d98:	af e0       	ldi	r26, 0x0F	; 15
    6d9a:	b0 e0       	ldi	r27, 0x00	; 0
    6d9c:	84 83       	std	Z+4, r24	; 0x04
    6d9e:	95 83       	std	Z+5, r25	; 0x05
    6da0:	a6 83       	std	Z+6, r26	; 0x06
    6da2:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
    6da4:	80 e0       	ldi	r24, 0x00	; 0
    6da6:	90 e0       	ldi	r25, 0x00	; 0
    6da8:	08 95       	ret
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
        return(-1);
    6daa:	8f ef       	ldi	r24, 0xFF	; 255
    6dac:	9f ef       	ldi	r25, 0xFF	; 255
    res->tv_sec = 0;
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    return(0);
}
    6dae:	08 95       	ret

00006db0 <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id  __attribute__((unused)), const struct timespec *ts)
{
    if(clk_id)
    6db0:	89 2b       	or	r24, r25
    6db2:	19 f4       	brne	.+6      	; 0x6dba <clock_settime+0xa>
    6db4:	cb 01       	movw	r24, r22
    6db6:	05 ce       	rjmp	.-1014   	; 0x69c2 <clock_settime.part.2>
    6db8:	08 95       	ret
        return(-1);
    6dba:	8f ef       	ldi	r24, 0xFF	; 255
    6dbc:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6dbe:	08 95       	ret

00006dc0 <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6dc0:	9c 01       	movw	r18, r24
    6dc2:	83 70       	andi	r24, 0x03	; 3
    6dc4:	99 27       	eor	r25, r25
    6dc6:	00 97       	sbiw	r24, 0x00	; 0
    6dc8:	69 f4       	brne	.+26     	; 0x6de4 <IS_Leap+0x24>
    6dca:	2c 36       	cpi	r18, 0x6C	; 108
    6dcc:	47 e0       	ldi	r20, 0x07	; 7
    6dce:	34 07       	cpc	r19, r20
    6dd0:	59 f0       	breq	.+22     	; 0x6de8 <IS_Leap+0x28>
    6dd2:	51 e0       	ldi	r21, 0x01	; 1
    6dd4:	40 e0       	ldi	r20, 0x00	; 0
    6dd6:	24 33       	cpi	r18, 0x34	; 52
    6dd8:	38 40       	sbci	r19, 0x08	; 8
    6dda:	09 f4       	brne	.+2      	; 0x6dde <IS_Leap+0x1e>
    6ddc:	50 e0       	ldi	r21, 0x00	; 0
    6dde:	85 2f       	mov	r24, r21
    6de0:	94 2f       	mov	r25, r20
    6de2:	08 95       	ret
    6de4:	80 e0       	ldi	r24, 0x00	; 0
    6de6:	90 e0       	ldi	r25, 0x00	; 0
    6de8:	08 95       	ret

00006dea <tm_mon_to_ascii>:
    6dea:	8c 30       	cpi	r24, 0x0C	; 12
    6dec:	91 05       	cpc	r25, r1
    6dee:	40 f4       	brcc	.+16     	; 0x6e00 <tm_mon_to_ascii+0x16>
    6df0:	88 0f       	add	r24, r24
    6df2:	99 1f       	adc	r25, r25
    6df4:	fc 01       	movw	r30, r24
    6df6:	e5 5f       	subi	r30, 0xF5	; 245
    6df8:	fe 4f       	sbci	r31, 0xFE	; 254
    6dfa:	80 81       	ld	r24, Z
    6dfc:	91 81       	ldd	r25, Z+1	; 0x01
    6dfe:	08 95       	ret
    6e00:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__Month+0x18>
    6e04:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__Month+0x19>
    6e08:	08 95       	ret

00006e0a <Days_Per_Month>:
    6e0a:	cf 93       	push	r28
    6e0c:	df 93       	push	r29
    6e0e:	8c 30       	cpi	r24, 0x0C	; 12
    6e10:	91 05       	cpc	r25, r1
    6e12:	24 f0       	brlt	.+8      	; 0x6e1c <Days_Per_Month+0x12>
    6e14:	6f 5f       	subi	r22, 0xFF	; 255
    6e16:	7f 4f       	sbci	r23, 0xFF	; 255
    6e18:	0c 97       	sbiw	r24, 0x0c	; 12
    6e1a:	f9 cf       	rjmp	.-14     	; 0x6e0e <Days_Per_Month+0x4>
    6e1c:	97 ff       	sbrs	r25, 7
    6e1e:	04 c0       	rjmp	.+8      	; 0x6e28 <Days_Per_Month+0x1e>
    6e20:	61 50       	subi	r22, 0x01	; 1
    6e22:	71 09       	sbc	r23, r1
    6e24:	0c 96       	adiw	r24, 0x0c	; 12
    6e26:	fa cf       	rjmp	.-12     	; 0x6e1c <Days_Per_Month+0x12>
    6e28:	fc 01       	movw	r30, r24
    6e2a:	ee 0f       	add	r30, r30
    6e2c:	ff 1f       	adc	r31, r31
    6e2e:	e8 57       	subi	r30, 0x78	; 120
    6e30:	fc 4f       	sbci	r31, 0xFC	; 252
    6e32:	c0 81       	ld	r28, Z
    6e34:	d1 81       	ldd	r29, Z+1	; 0x01
    6e36:	01 97       	sbiw	r24, 0x01	; 1
    6e38:	29 f4       	brne	.+10     	; 0x6e44 <Days_Per_Month+0x3a>
    6e3a:	cb 01       	movw	r24, r22
    6e3c:	c1 df       	rcall	.-126    	; 0x6dc0 <IS_Leap>
    6e3e:	89 2b       	or	r24, r25
    6e40:	09 f0       	breq	.+2      	; 0x6e44 <Days_Per_Month+0x3a>
    6e42:	21 96       	adiw	r28, 0x01	; 1
    6e44:	ce 01       	movw	r24, r28
    6e46:	df 91       	pop	r29
    6e48:	cf 91       	pop	r28
    6e4a:	08 95       	ret

00006e4c <time_to_tm>:
    6e4c:	a0 e0       	ldi	r26, 0x00	; 0
    6e4e:	b0 e0       	ldi	r27, 0x00	; 0
    6e50:	ec e2       	ldi	r30, 0x2C	; 44
    6e52:	f7 e3       	ldi	r31, 0x37	; 55
    6e54:	0c 94 95 e7 	jmp	0x1cf2a	; 0x1cf2a <__prologue_saves__+0x4>
    6e58:	e8 01       	movw	r28, r16
    6e5a:	e6 e1       	ldi	r30, 0x16	; 22
    6e5c:	d8 01       	movw	r26, r16
    6e5e:	1d 92       	st	X+, r1
    6e60:	ea 95       	dec	r30
    6e62:	e9 f7       	brne	.-6      	; 0x6e5e <time_to_tm+0x12>
    6e64:	61 15       	cp	r22, r1
    6e66:	bd e5       	ldi	r27, 0x5D	; 93
    6e68:	7b 07       	cpc	r23, r27
    6e6a:	bd ef       	ldi	r27, 0xFD	; 253
    6e6c:	8b 07       	cpc	r24, r27
    6e6e:	bf ef       	ldi	r27, 0xFF	; 255
    6e70:	9b 07       	cpc	r25, r27
    6e72:	08 f0       	brcs	.+2      	; 0x6e76 <time_to_tm+0x2a>
    6e74:	c0 c0       	rjmp	.+384    	; 0x6ff6 <time_to_tm+0x1aa>
    6e76:	6b 01       	movw	r12, r22
    6e78:	7c 01       	movw	r14, r24
    6e7a:	c2 1a       	sub	r12, r18
    6e7c:	d3 0a       	sbc	r13, r19
    6e7e:	e4 0a       	sbc	r14, r20
    6e80:	f5 0a       	sbc	r15, r21
    6e82:	46 01       	movw	r8, r12
    6e84:	57 01       	movw	r10, r14
    6e86:	e0 e8       	ldi	r30, 0x80	; 128
    6e88:	ce 16       	cp	r12, r30
    6e8a:	ee ea       	ldi	r30, 0xAE	; 174
    6e8c:	de 06       	cpc	r13, r30
    6e8e:	ee ef       	ldi	r30, 0xFE	; 254
    6e90:	ee 06       	cpc	r14, r30
    6e92:	ef ef       	ldi	r30, 0xFF	; 255
    6e94:	fe 06       	cpc	r15, r30
    6e96:	50 f0       	brcs	.+20     	; 0x6eac <time_to_tm+0x60>
    6e98:	80 e8       	ldi	r24, 0x80	; 128
    6e9a:	88 0e       	add	r8, r24
    6e9c:	81 e5       	ldi	r24, 0x51	; 81
    6e9e:	98 1e       	adc	r9, r24
    6ea0:	81 e0       	ldi	r24, 0x01	; 1
    6ea2:	a8 1e       	adc	r10, r24
    6ea4:	b1 1c       	adc	r11, r1
    6ea6:	01 e0       	ldi	r16, 0x01	; 1
    6ea8:	10 e0       	ldi	r17, 0x00	; 0
    6eaa:	02 c0       	rjmp	.+4      	; 0x6eb0 <time_to_tm+0x64>
    6eac:	00 e0       	ldi	r16, 0x00	; 0
    6eae:	10 e0       	ldi	r17, 0x00	; 0
    6eb0:	8c e3       	ldi	r24, 0x3C	; 60
    6eb2:	48 2e       	mov	r4, r24
    6eb4:	51 2c       	mov	r5, r1
    6eb6:	61 2c       	mov	r6, r1
    6eb8:	71 2c       	mov	r7, r1
    6eba:	c5 01       	movw	r24, r10
    6ebc:	b4 01       	movw	r22, r8
    6ebe:	a3 01       	movw	r20, r6
    6ec0:	92 01       	movw	r18, r4
    6ec2:	0e 94 26 e7 	call	0x1ce4c	; 0x1ce4c <__udivmodsi4>
    6ec6:	79 83       	std	Y+1, r23	; 0x01
    6ec8:	68 83       	st	Y, r22
    6eca:	ca 01       	movw	r24, r20
    6ecc:	b9 01       	movw	r22, r18
    6ece:	a3 01       	movw	r20, r6
    6ed0:	92 01       	movw	r18, r4
    6ed2:	0e 94 26 e7 	call	0x1ce4c	; 0x1ce4c <__udivmodsi4>
    6ed6:	7b 83       	std	Y+3, r23	; 0x03
    6ed8:	6a 83       	std	Y+2, r22	; 0x02
    6eda:	c5 01       	movw	r24, r10
    6edc:	b4 01       	movw	r22, r8
    6ede:	20 e1       	ldi	r18, 0x10	; 16
    6ee0:	3e e0       	ldi	r19, 0x0E	; 14
    6ee2:	40 e0       	ldi	r20, 0x00	; 0
    6ee4:	50 e0       	ldi	r21, 0x00	; 0
    6ee6:	0e 94 26 e7 	call	0x1ce4c	; 0x1ce4c <__udivmodsi4>
    6eea:	ca 01       	movw	r24, r20
    6eec:	b9 01       	movw	r22, r18
    6eee:	28 e1       	ldi	r18, 0x18	; 24
    6ef0:	30 e0       	ldi	r19, 0x00	; 0
    6ef2:	40 e0       	ldi	r20, 0x00	; 0
    6ef4:	50 e0       	ldi	r21, 0x00	; 0
    6ef6:	0e 94 26 e7 	call	0x1ce4c	; 0x1ce4c <__udivmodsi4>
    6efa:	7d 83       	std	Y+5, r23	; 0x05
    6efc:	6c 83       	std	Y+4, r22	; 0x04
    6efe:	01 15       	cp	r16, r1
    6f00:	11 05       	cpc	r17, r1
    6f02:	89 f0       	breq	.+34     	; 0x6f26 <time_to_tm+0xda>
    6f04:	85 e4       	ldi	r24, 0x45	; 69
    6f06:	90 e0       	ldi	r25, 0x00	; 0
    6f08:	9b 87       	std	Y+11, r25	; 0x0b
    6f0a:	8a 87       	std	Y+10, r24	; 0x0a
    6f0c:	8b e0       	ldi	r24, 0x0B	; 11
    6f0e:	90 e0       	ldi	r25, 0x00	; 0
    6f10:	99 87       	std	Y+9, r25	; 0x09
    6f12:	88 87       	std	Y+8, r24	; 0x08
    6f14:	8f e1       	ldi	r24, 0x1F	; 31
    6f16:	90 e0       	ldi	r25, 0x00	; 0
    6f18:	9f 83       	std	Y+7, r25	; 0x07
    6f1a:	8e 83       	std	Y+6, r24	; 0x06
    6f1c:	83 e0       	ldi	r24, 0x03	; 3
    6f1e:	90 e0       	ldi	r25, 0x00	; 0
    6f20:	9d 87       	std	Y+13, r25	; 0x0d
    6f22:	8c 87       	std	Y+12, r24	; 0x0c
    6f24:	65 c0       	rjmp	.+202    	; 0x6ff0 <time_to_tm+0x1a4>
    6f26:	c5 01       	movw	r24, r10
    6f28:	b4 01       	movw	r22, r8
    6f2a:	20 e8       	ldi	r18, 0x80	; 128
    6f2c:	31 e5       	ldi	r19, 0x51	; 81
    6f2e:	41 e0       	ldi	r20, 0x01	; 1
    6f30:	50 e0       	ldi	r21, 0x00	; 0
    6f32:	0e 94 26 e7 	call	0x1ce4c	; 0x1ce4c <__udivmodsi4>
    6f36:	49 01       	movw	r8, r18
    6f38:	5a 01       	movw	r10, r20
    6f3a:	ca 01       	movw	r24, r20
    6f3c:	b9 01       	movw	r22, r18
    6f3e:	6c 5f       	subi	r22, 0xFC	; 252
    6f40:	7f 4f       	sbci	r23, 0xFF	; 255
    6f42:	8f 4f       	sbci	r24, 0xFF	; 255
    6f44:	9f 4f       	sbci	r25, 0xFF	; 255
    6f46:	27 e0       	ldi	r18, 0x07	; 7
    6f48:	30 e0       	ldi	r19, 0x00	; 0
    6f4a:	40 e0       	ldi	r20, 0x00	; 0
    6f4c:	50 e0       	ldi	r21, 0x00	; 0
    6f4e:	0e 94 48 e7 	call	0x1ce90	; 0x1ce90 <__divmodsi4>
    6f52:	7d 87       	std	Y+13, r23	; 0x0d
    6f54:	6c 87       	std	Y+12, r22	; 0x0c
    6f56:	02 eb       	ldi	r16, 0xB2	; 178
    6f58:	17 e0       	ldi	r17, 0x07	; 7
    6f5a:	c8 01       	movw	r24, r16
    6f5c:	31 df       	rcall	.-414    	; 0x6dc0 <IS_Leap>
    6f5e:	00 97       	sbiw	r24, 0x00	; 0
    6f60:	19 f4       	brne	.+6      	; 0x6f68 <time_to_tm+0x11c>
    6f62:	4d e6       	ldi	r20, 0x6D	; 109
    6f64:	51 e0       	ldi	r21, 0x01	; 1
    6f66:	02 c0       	rjmp	.+4      	; 0x6f6c <time_to_tm+0x120>
    6f68:	4e e6       	ldi	r20, 0x6E	; 110
    6f6a:	51 e0       	ldi	r21, 0x01	; 1
    6f6c:	05 2e       	mov	r0, r21
    6f6e:	00 0c       	add	r0, r0
    6f70:	66 0b       	sbc	r22, r22
    6f72:	77 0b       	sbc	r23, r23
    6f74:	84 16       	cp	r8, r20
    6f76:	95 06       	cpc	r9, r21
    6f78:	a6 06       	cpc	r10, r22
    6f7a:	b7 06       	cpc	r11, r23
    6f7c:	3c f0       	brlt	.+14     	; 0x6f8c <time_to_tm+0x140>
    6f7e:	0f 5f       	subi	r16, 0xFF	; 255
    6f80:	1f 4f       	sbci	r17, 0xFF	; 255
    6f82:	84 1a       	sub	r8, r20
    6f84:	95 0a       	sbc	r9, r21
    6f86:	a6 0a       	sbc	r10, r22
    6f88:	b7 0a       	sbc	r11, r23
    6f8a:	e7 cf       	rjmp	.-50     	; 0x6f5a <time_to_tm+0x10e>
    6f8c:	0c 56       	subi	r16, 0x6C	; 108
    6f8e:	17 40       	sbci	r17, 0x07	; 7
    6f90:	1b 87       	std	Y+11, r17	; 0x0b
    6f92:	0a 87       	std	Y+10, r16	; 0x0a
    6f94:	9f 86       	std	Y+15, r9	; 0x0f
    6f96:	8e 86       	std	Y+14, r8	; 0x0e
    6f98:	e8 e8       	ldi	r30, 0x88	; 136
    6f9a:	f3 e0       	ldi	r31, 0x03	; 3
    6f9c:	20 e0       	ldi	r18, 0x00	; 0
    6f9e:	30 e0       	ldi	r19, 0x00	; 0
    6fa0:	18 14       	cp	r1, r8
    6fa2:	19 04       	cpc	r1, r9
    6fa4:	1a 04       	cpc	r1, r10
    6fa6:	1b 04       	cpc	r1, r11
    6fa8:	e4 f4       	brge	.+56     	; 0x6fe2 <time_to_tm+0x196>
    6faa:	2c 30       	cpi	r18, 0x0C	; 12
    6fac:	31 05       	cpc	r19, r1
    6fae:	c9 f0       	breq	.+50     	; 0x6fe2 <time_to_tm+0x196>
    6fb0:	41 91       	ld	r20, Z+
    6fb2:	51 91       	ld	r21, Z+
    6fb4:	21 30       	cpi	r18, 0x01	; 1
    6fb6:	31 05       	cpc	r19, r1
    6fb8:	21 f4       	brne	.+8      	; 0x6fc2 <time_to_tm+0x176>
    6fba:	00 97       	sbiw	r24, 0x00	; 0
    6fbc:	11 f0       	breq	.+4      	; 0x6fc2 <time_to_tm+0x176>
    6fbe:	4f 5f       	subi	r20, 0xFF	; 255
    6fc0:	5f 4f       	sbci	r21, 0xFF	; 255
    6fc2:	05 2e       	mov	r0, r21
    6fc4:	00 0c       	add	r0, r0
    6fc6:	66 0b       	sbc	r22, r22
    6fc8:	77 0b       	sbc	r23, r23
    6fca:	84 16       	cp	r8, r20
    6fcc:	95 06       	cpc	r9, r21
    6fce:	a6 06       	cpc	r10, r22
    6fd0:	b7 06       	cpc	r11, r23
    6fd2:	3c f0       	brlt	.+14     	; 0x6fe2 <time_to_tm+0x196>
    6fd4:	84 1a       	sub	r8, r20
    6fd6:	95 0a       	sbc	r9, r21
    6fd8:	a6 0a       	sbc	r10, r22
    6fda:	b7 0a       	sbc	r11, r23
    6fdc:	2f 5f       	subi	r18, 0xFF	; 255
    6fde:	3f 4f       	sbci	r19, 0xFF	; 255
    6fe0:	df cf       	rjmp	.-66     	; 0x6fa0 <time_to_tm+0x154>
    6fe2:	39 87       	std	Y+9, r19	; 0x09
    6fe4:	28 87       	std	Y+8, r18	; 0x08
    6fe6:	af ef       	ldi	r26, 0xFF	; 255
    6fe8:	8a 1a       	sub	r8, r26
    6fea:	9a 0a       	sbc	r9, r26
    6fec:	9f 82       	std	Y+7, r9	; 0x07
    6fee:	8e 82       	std	Y+6, r8	; 0x06
    6ff0:	b6 01       	movw	r22, r12
    6ff2:	c7 01       	movw	r24, r14
    6ff4:	04 c0       	rjmp	.+8      	; 0x6ffe <time_to_tm+0x1b2>
    6ff6:	6f ef       	ldi	r22, 0xFF	; 255
    6ff8:	7f ef       	ldi	r23, 0xFF	; 255
    6ffa:	8f ef       	ldi	r24, 0xFF	; 255
    6ffc:	9f ef       	ldi	r25, 0xFF	; 255
    6ffe:	cd b7       	in	r28, 0x3d	; 61
    7000:	de b7       	in	r29, 0x3e	; 62
    7002:	e0 e1       	ldi	r30, 0x10	; 16
    7004:	0c 94 b1 e7 	jmp	0x1cf62	; 0x1cf62 <__epilogue_restores__+0x4>

00007008 <gmtime_r>:
    7008:	0f 93       	push	r16
    700a:	1f 93       	push	r17
    700c:	cf 93       	push	r28
    700e:	df 93       	push	r29
    7010:	eb 01       	movw	r28, r22
    7012:	fc 01       	movw	r30, r24
    7014:	60 81       	ld	r22, Z
    7016:	71 81       	ldd	r23, Z+1	; 0x01
    7018:	82 81       	ldd	r24, Z+2	; 0x02
    701a:	93 81       	ldd	r25, Z+3	; 0x03
    701c:	8e 01       	movw	r16, r28
    701e:	20 e0       	ldi	r18, 0x00	; 0
    7020:	30 e0       	ldi	r19, 0x00	; 0
    7022:	a9 01       	movw	r20, r18
    7024:	13 df       	rcall	.-474    	; 0x6e4c <time_to_tm>
    7026:	ce 01       	movw	r24, r28
    7028:	df 91       	pop	r29
    702a:	cf 91       	pop	r28
    702c:	1f 91       	pop	r17
    702e:	0f 91       	pop	r16
    7030:	08 95       	ret

00007032 <gmtime>:
    7032:	2c eb       	ldi	r18, 0xBC	; 188
    7034:	37 e1       	ldi	r19, 0x17	; 23
    7036:	30 93 d3 17 	sts	0x17D3, r19	; 0x8017d3 <p.3681+0x1>
    703a:	20 93 d2 17 	sts	0x17D2, r18	; 0x8017d2 <p.3681>
    703e:	b9 01       	movw	r22, r18
    7040:	e3 df       	rcall	.-58     	; 0x7008 <gmtime_r>
    7042:	8c eb       	ldi	r24, 0xBC	; 188
    7044:	97 e1       	ldi	r25, 0x17	; 23
    7046:	08 95       	ret

00007048 <gettimezone>:
    7048:	e6 e6       	ldi	r30, 0x66	; 102
    704a:	fa e1       	ldi	r31, 0x1A	; 26
    704c:	20 81       	ld	r18, Z
    704e:	31 81       	ldd	r19, Z+1	; 0x01
    7050:	dc 01       	movw	r26, r24
    7052:	2d 93       	st	X+, r18
    7054:	3c 93       	st	X, r19
    7056:	22 81       	ldd	r18, Z+2	; 0x02
    7058:	33 81       	ldd	r19, Z+3	; 0x03
    705a:	fc 01       	movw	r30, r24
    705c:	33 83       	std	Z+3, r19	; 0x03
    705e:	22 83       	std	Z+2, r18	; 0x02
    7060:	80 e0       	ldi	r24, 0x00	; 0
    7062:	90 e0       	ldi	r25, 0x00	; 0
    7064:	08 95       	ret

00007066 <settimezone>:
    7066:	cf 93       	push	r28
    7068:	df 93       	push	r29
    706a:	ec 01       	movw	r28, r24
    706c:	28 81       	ld	r18, Y
    706e:	39 81       	ldd	r19, Y+1	; 0x01
    7070:	e6 e6       	ldi	r30, 0x66	; 102
    7072:	fa e1       	ldi	r31, 0x1A	; 26
    7074:	31 83       	std	Z+1, r19	; 0x01
    7076:	20 83       	st	Z, r18
    7078:	8a 81       	ldd	r24, Y+2	; 0x02
    707a:	9b 81       	ldd	r25, Y+3	; 0x03
    707c:	93 83       	std	Z+3, r25	; 0x03
    707e:	82 83       	std	Z+2, r24	; 0x02
    7080:	80 e0       	ldi	r24, 0x00	; 0
    7082:	90 e0       	ldi	r25, 0x00	; 0
    7084:	df 91       	pop	r29
    7086:	cf 91       	pop	r28
    7088:	08 95       	ret

0000708a <gettimeofday>:
    708a:	a8 e0       	ldi	r26, 0x08	; 8
    708c:	b0 e0       	ldi	r27, 0x00	; 0
    708e:	eb e4       	ldi	r30, 0x4B	; 75
    7090:	f8 e3       	ldi	r31, 0x38	; 56
    7092:	0c 94 9f e7 	jmp	0x1cf3e	; 0x1cf3e <__prologue_saves__+0x18>
    7096:	8c 01       	movw	r16, r24
    7098:	7b 01       	movw	r14, r22
    709a:	be 01       	movw	r22, r28
    709c:	6f 5f       	subi	r22, 0xFF	; 255
    709e:	7f 4f       	sbci	r23, 0xFF	; 255
    70a0:	80 e0       	ldi	r24, 0x00	; 0
    70a2:	90 e0       	ldi	r25, 0x00	; 0
    70a4:	dc db       	rcall	.-2120   	; 0x685e <clock_gettime>
    70a6:	89 81       	ldd	r24, Y+1	; 0x01
    70a8:	9a 81       	ldd	r25, Y+2	; 0x02
    70aa:	ab 81       	ldd	r26, Y+3	; 0x03
    70ac:	bc 81       	ldd	r27, Y+4	; 0x04
    70ae:	f8 01       	movw	r30, r16
    70b0:	80 83       	st	Z, r24
    70b2:	91 83       	std	Z+1, r25	; 0x01
    70b4:	a2 83       	std	Z+2, r26	; 0x02
    70b6:	b3 83       	std	Z+3, r27	; 0x03
    70b8:	6d 81       	ldd	r22, Y+5	; 0x05
    70ba:	7e 81       	ldd	r23, Y+6	; 0x06
    70bc:	8f 81       	ldd	r24, Y+7	; 0x07
    70be:	98 85       	ldd	r25, Y+8	; 0x08
    70c0:	28 ee       	ldi	r18, 0xE8	; 232
    70c2:	33 e0       	ldi	r19, 0x03	; 3
    70c4:	40 e0       	ldi	r20, 0x00	; 0
    70c6:	50 e0       	ldi	r21, 0x00	; 0
    70c8:	0e 94 48 e7 	call	0x1ce90	; 0x1ce90 <__divmodsi4>
    70cc:	f8 01       	movw	r30, r16
    70ce:	24 83       	std	Z+4, r18	; 0x04
    70d0:	35 83       	std	Z+5, r19	; 0x05
    70d2:	46 83       	std	Z+6, r20	; 0x06
    70d4:	57 83       	std	Z+7, r21	; 0x07
    70d6:	c7 01       	movw	r24, r14
    70d8:	b7 df       	rcall	.-146    	; 0x7048 <gettimezone>
    70da:	80 e0       	ldi	r24, 0x00	; 0
    70dc:	90 e0       	ldi	r25, 0x00	; 0
    70de:	28 96       	adiw	r28, 0x08	; 8
    70e0:	e6 e0       	ldi	r30, 0x06	; 6
    70e2:	0c 94 bb e7 	jmp	0x1cf76	; 0x1cf76 <__epilogue_restores__+0x18>

000070e6 <time>:
    70e6:	cf 93       	push	r28
    70e8:	df 93       	push	r29
    70ea:	ec 01       	movw	r28, r24
    70ec:	6e e9       	ldi	r22, 0x9E	; 158
    70ee:	77 e1       	ldi	r23, 0x17	; 23
    70f0:	80 e0       	ldi	r24, 0x00	; 0
    70f2:	90 e0       	ldi	r25, 0x00	; 0
    70f4:	b4 db       	rcall	.-2200   	; 0x685e <clock_gettime>
    70f6:	20 97       	sbiw	r28, 0x00	; 0
    70f8:	61 f0       	breq	.+24     	; 0x7112 <time+0x2c>
    70fa:	80 91 9e 17 	lds	r24, 0x179E	; 0x80179e <ts.3759>
    70fe:	90 91 9f 17 	lds	r25, 0x179F	; 0x80179f <ts.3759+0x1>
    7102:	a0 91 a0 17 	lds	r26, 0x17A0	; 0x8017a0 <ts.3759+0x2>
    7106:	b0 91 a1 17 	lds	r27, 0x17A1	; 0x8017a1 <ts.3759+0x3>
    710a:	88 83       	st	Y, r24
    710c:	99 83       	std	Y+1, r25	; 0x01
    710e:	aa 83       	std	Y+2, r26	; 0x02
    7110:	bb 83       	std	Y+3, r27	; 0x03
    7112:	60 91 9e 17 	lds	r22, 0x179E	; 0x80179e <ts.3759>
    7116:	70 91 9f 17 	lds	r23, 0x179F	; 0x80179f <ts.3759+0x1>
    711a:	80 91 a0 17 	lds	r24, 0x17A0	; 0x8017a0 <ts.3759+0x2>
    711e:	90 91 a1 17 	lds	r25, 0x17A1	; 0x8017a1 <ts.3759+0x3>
    7122:	df 91       	pop	r29
    7124:	cf 91       	pop	r28
    7126:	08 95       	ret

00007128 <is_dst>:
    7128:	cf 92       	push	r12
    712a:	df 92       	push	r13
    712c:	ef 92       	push	r14
    712e:	ff 92       	push	r15
    7130:	6b 01       	movw	r12, r22
    7132:	7c 01       	movw	r14, r24
    7134:	05 d4       	rcall	.+2058   	; 0x7940 <set_dst>
    7136:	80 91 6a 1a 	lds	r24, 0x1A6A	; 0x801a6a <dst>
    713a:	90 91 6b 1a 	lds	r25, 0x1A6B	; 0x801a6b <dst+0x1>
    713e:	a0 91 6c 1a 	lds	r26, 0x1A6C	; 0x801a6c <dst+0x2>
    7142:	b0 91 6d 1a 	lds	r27, 0x1A6D	; 0x801a6d <dst+0x3>
    7146:	c8 16       	cp	r12, r24
    7148:	d9 06       	cpc	r13, r25
    714a:	ea 06       	cpc	r14, r26
    714c:	fb 06       	cpc	r15, r27
    714e:	88 f0       	brcs	.+34     	; 0x7172 <is_dst+0x4a>
    7150:	81 e0       	ldi	r24, 0x01	; 1
    7152:	90 e0       	ldi	r25, 0x00	; 0
    7154:	40 91 6e 1a 	lds	r20, 0x1A6E	; 0x801a6e <dst+0x4>
    7158:	50 91 6f 1a 	lds	r21, 0x1A6F	; 0x801a6f <dst+0x5>
    715c:	60 91 70 1a 	lds	r22, 0x1A70	; 0x801a70 <dst+0x6>
    7160:	70 91 71 1a 	lds	r23, 0x1A71	; 0x801a71 <dst+0x7>
    7164:	4c 15       	cp	r20, r12
    7166:	5d 05       	cpc	r21, r13
    7168:	6e 05       	cpc	r22, r14
    716a:	7f 05       	cpc	r23, r15
    716c:	20 f4       	brcc	.+8      	; 0x7176 <is_dst+0x4e>
    716e:	80 e0       	ldi	r24, 0x00	; 0
    7170:	02 c0       	rjmp	.+4      	; 0x7176 <is_dst+0x4e>
    7172:	80 e0       	ldi	r24, 0x00	; 0
    7174:	90 e0       	ldi	r25, 0x00	; 0
    7176:	ff 90       	pop	r15
    7178:	ef 90       	pop	r14
    717a:	df 90       	pop	r13
    717c:	cf 90       	pop	r12
    717e:	08 95       	ret

00007180 <localtime_r>:
    7180:	4f 92       	push	r4
    7182:	5f 92       	push	r5
    7184:	6f 92       	push	r6
    7186:	7f 92       	push	r7
    7188:	af 92       	push	r10
    718a:	bf 92       	push	r11
    718c:	cf 92       	push	r12
    718e:	df 92       	push	r13
    7190:	ef 92       	push	r14
    7192:	ff 92       	push	r15
    7194:	0f 93       	push	r16
    7196:	1f 93       	push	r17
    7198:	cf 93       	push	r28
    719a:	df 93       	push	r29
    719c:	00 d0       	rcall	.+0      	; 0x719e <localtime_r+0x1e>
    719e:	00 d0       	rcall	.+0      	; 0x71a0 <localtime_r+0x20>
    71a0:	cd b7       	in	r28, 0x3d	; 61
    71a2:	de b7       	in	r29, 0x3e	; 62
    71a4:	5b 01       	movw	r10, r22
    71a6:	fc 01       	movw	r30, r24
    71a8:	40 80       	ld	r4, Z
    71aa:	51 80       	ldd	r5, Z+1	; 0x01
    71ac:	62 80       	ldd	r6, Z+2	; 0x02
    71ae:	73 80       	ldd	r7, Z+3	; 0x03
    71b0:	ce 01       	movw	r24, r28
    71b2:	01 96       	adiw	r24, 0x01	; 1
    71b4:	49 df       	rcall	.-366    	; 0x7048 <gettimezone>
    71b6:	a9 81       	ldd	r26, Y+1	; 0x01
    71b8:	ba 81       	ldd	r27, Y+2	; 0x02
    71ba:	2c e3       	ldi	r18, 0x3C	; 60
    71bc:	30 e0       	ldi	r19, 0x00	; 0
    71be:	0e 94 6d e7 	call	0x1ceda	; 0x1ceda <__usmulhisi3>
    71c2:	6b 01       	movw	r12, r22
    71c4:	7c 01       	movw	r14, r24
    71c6:	c3 01       	movw	r24, r6
    71c8:	b2 01       	movw	r22, r4
    71ca:	6c 19       	sub	r22, r12
    71cc:	7d 09       	sbc	r23, r13
    71ce:	8e 09       	sbc	r24, r14
    71d0:	9f 09       	sbc	r25, r15
    71d2:	aa df       	rcall	.-172    	; 0x7128 <is_dst>
    71d4:	89 2b       	or	r24, r25
    71d6:	31 f0       	breq	.+12     	; 0x71e4 <localtime_r+0x64>
    71d8:	f0 e1       	ldi	r31, 0x10	; 16
    71da:	cf 1a       	sub	r12, r31
    71dc:	fe e0       	ldi	r31, 0x0E	; 14
    71de:	df 0a       	sbc	r13, r31
    71e0:	e1 08       	sbc	r14, r1
    71e2:	f1 08       	sbc	r15, r1
    71e4:	85 01       	movw	r16, r10
    71e6:	a7 01       	movw	r20, r14
    71e8:	96 01       	movw	r18, r12
    71ea:	c3 01       	movw	r24, r6
    71ec:	b2 01       	movw	r22, r4
    71ee:	2e de       	rcall	.-932    	; 0x6e4c <time_to_tm>
    71f0:	c5 01       	movw	r24, r10
    71f2:	0f 90       	pop	r0
    71f4:	0f 90       	pop	r0
    71f6:	0f 90       	pop	r0
    71f8:	0f 90       	pop	r0
    71fa:	df 91       	pop	r29
    71fc:	cf 91       	pop	r28
    71fe:	1f 91       	pop	r17
    7200:	0f 91       	pop	r16
    7202:	ff 90       	pop	r15
    7204:	ef 90       	pop	r14
    7206:	df 90       	pop	r13
    7208:	cf 90       	pop	r12
    720a:	bf 90       	pop	r11
    720c:	af 90       	pop	r10
    720e:	7f 90       	pop	r7
    7210:	6f 90       	pop	r6
    7212:	5f 90       	pop	r5
    7214:	4f 90       	pop	r4
    7216:	08 95       	ret

00007218 <localtime>:
    7218:	66 ea       	ldi	r22, 0xA6	; 166
    721a:	77 e1       	ldi	r23, 0x17	; 23
    721c:	b1 cf       	rjmp	.-158    	; 0x7180 <localtime_r>
    721e:	08 95       	ret

00007220 <normalize>:
    7220:	aa e0       	ldi	r26, 0x0A	; 10
    7222:	b0 e0       	ldi	r27, 0x00	; 0
    7224:	e6 e1       	ldi	r30, 0x16	; 22
    7226:	f9 e3       	ldi	r31, 0x39	; 57
    7228:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
    722c:	7c 01       	movw	r14, r24
    722e:	7a 87       	std	Y+10, r23	; 0x0a
    7230:	69 87       	std	Y+9, r22	; 0x09
    7232:	f7 01       	movw	r30, r14
    7234:	80 81       	ld	r24, Z
    7236:	91 81       	ldd	r25, Z+1	; 0x01
    7238:	8c 33       	cpi	r24, 0x3C	; 60
    723a:	91 05       	cpc	r25, r1
    723c:	5c f0       	brlt	.+22     	; 0x7254 <normalize+0x34>
    723e:	f7 01       	movw	r30, r14
    7240:	22 81       	ldd	r18, Z+2	; 0x02
    7242:	33 81       	ldd	r19, Z+3	; 0x03
    7244:	2f 5f       	subi	r18, 0xFF	; 255
    7246:	3f 4f       	sbci	r19, 0xFF	; 255
    7248:	33 83       	std	Z+3, r19	; 0x03
    724a:	22 83       	std	Z+2, r18	; 0x02
    724c:	cc 97       	sbiw	r24, 0x3c	; 60
    724e:	91 83       	std	Z+1, r25	; 0x01
    7250:	80 83       	st	Z, r24
    7252:	ef cf       	rjmp	.-34     	; 0x7232 <normalize+0x12>
    7254:	f7 01       	movw	r30, r14
    7256:	01 90       	ld	r0, Z+
    7258:	f0 81       	ld	r31, Z
    725a:	e0 2d       	mov	r30, r0
    725c:	fe 83       	std	Y+6, r31	; 0x06
    725e:	ed 83       	std	Y+5, r30	; 0x05
    7260:	f7 ff       	sbrs	r31, 7
    7262:	0d c0       	rjmp	.+26     	; 0x727e <normalize+0x5e>
    7264:	f7 01       	movw	r30, r14
    7266:	82 81       	ldd	r24, Z+2	; 0x02
    7268:	93 81       	ldd	r25, Z+3	; 0x03
    726a:	01 97       	sbiw	r24, 0x01	; 1
    726c:	93 83       	std	Z+3, r25	; 0x03
    726e:	82 83       	std	Z+2, r24	; 0x02
    7270:	6d 81       	ldd	r22, Y+5	; 0x05
    7272:	7e 81       	ldd	r23, Y+6	; 0x06
    7274:	64 5c       	subi	r22, 0xC4	; 196
    7276:	7f 4f       	sbci	r23, 0xFF	; 255
    7278:	71 83       	std	Z+1, r23	; 0x01
    727a:	60 83       	st	Z, r22
    727c:	eb cf       	rjmp	.-42     	; 0x7254 <normalize+0x34>
    727e:	f7 01       	movw	r30, r14
    7280:	82 81       	ldd	r24, Z+2	; 0x02
    7282:	93 81       	ldd	r25, Z+3	; 0x03
    7284:	8c 33       	cpi	r24, 0x3C	; 60
    7286:	91 05       	cpc	r25, r1
    7288:	5c f0       	brlt	.+22     	; 0x72a0 <normalize+0x80>
    728a:	f7 01       	movw	r30, r14
    728c:	24 81       	ldd	r18, Z+4	; 0x04
    728e:	35 81       	ldd	r19, Z+5	; 0x05
    7290:	2f 5f       	subi	r18, 0xFF	; 255
    7292:	3f 4f       	sbci	r19, 0xFF	; 255
    7294:	35 83       	std	Z+5, r19	; 0x05
    7296:	24 83       	std	Z+4, r18	; 0x04
    7298:	cc 97       	sbiw	r24, 0x3c	; 60
    729a:	93 83       	std	Z+3, r25	; 0x03
    729c:	82 83       	std	Z+2, r24	; 0x02
    729e:	ef cf       	rjmp	.-34     	; 0x727e <normalize+0x5e>
    72a0:	f7 01       	movw	r30, r14
    72a2:	22 80       	ldd	r2, Z+2	; 0x02
    72a4:	33 80       	ldd	r3, Z+3	; 0x03
    72a6:	37 fe       	sbrs	r3, 7
    72a8:	0d c0       	rjmp	.+26     	; 0x72c4 <normalize+0xa4>
    72aa:	f7 01       	movw	r30, r14
    72ac:	84 81       	ldd	r24, Z+4	; 0x04
    72ae:	95 81       	ldd	r25, Z+5	; 0x05
    72b0:	01 97       	sbiw	r24, 0x01	; 1
    72b2:	95 83       	std	Z+5, r25	; 0x05
    72b4:	84 83       	std	Z+4, r24	; 0x04
    72b6:	fc e3       	ldi	r31, 0x3C	; 60
    72b8:	2f 0e       	add	r2, r31
    72ba:	31 1c       	adc	r3, r1
    72bc:	f7 01       	movw	r30, r14
    72be:	33 82       	std	Z+3, r3	; 0x03
    72c0:	22 82       	std	Z+2, r2	; 0x02
    72c2:	ee cf       	rjmp	.-36     	; 0x72a0 <normalize+0x80>
    72c4:	f7 01       	movw	r30, r14
    72c6:	84 81       	ldd	r24, Z+4	; 0x04
    72c8:	95 81       	ldd	r25, Z+5	; 0x05
    72ca:	88 31       	cpi	r24, 0x18	; 24
    72cc:	91 05       	cpc	r25, r1
    72ce:	5c f0       	brlt	.+22     	; 0x72e6 <normalize+0xc6>
    72d0:	f7 01       	movw	r30, r14
    72d2:	26 81       	ldd	r18, Z+6	; 0x06
    72d4:	37 81       	ldd	r19, Z+7	; 0x07
    72d6:	2f 5f       	subi	r18, 0xFF	; 255
    72d8:	3f 4f       	sbci	r19, 0xFF	; 255
    72da:	37 83       	std	Z+7, r19	; 0x07
    72dc:	26 83       	std	Z+6, r18	; 0x06
    72de:	48 97       	sbiw	r24, 0x18	; 24
    72e0:	95 83       	std	Z+5, r25	; 0x05
    72e2:	84 83       	std	Z+4, r24	; 0x04
    72e4:	ef cf       	rjmp	.-34     	; 0x72c4 <normalize+0xa4>
    72e6:	f7 01       	movw	r30, r14
    72e8:	04 81       	ldd	r16, Z+4	; 0x04
    72ea:	15 81       	ldd	r17, Z+5	; 0x05
    72ec:	17 ff       	sbrs	r17, 7
    72ee:	0b c0       	rjmp	.+22     	; 0x7306 <normalize+0xe6>
    72f0:	f7 01       	movw	r30, r14
    72f2:	86 81       	ldd	r24, Z+6	; 0x06
    72f4:	97 81       	ldd	r25, Z+7	; 0x07
    72f6:	01 97       	sbiw	r24, 0x01	; 1
    72f8:	97 83       	std	Z+7, r25	; 0x07
    72fa:	86 83       	std	Z+6, r24	; 0x06
    72fc:	08 5e       	subi	r16, 0xE8	; 232
    72fe:	1f 4f       	sbci	r17, 0xFF	; 255
    7300:	15 83       	std	Z+5, r17	; 0x05
    7302:	04 83       	std	Z+4, r16	; 0x04
    7304:	f0 cf       	rjmp	.-32     	; 0x72e6 <normalize+0xc6>
    7306:	f7 01       	movw	r30, r14
    7308:	80 85       	ldd	r24, Z+8	; 0x08
    730a:	91 85       	ldd	r25, Z+9	; 0x09
    730c:	8c 30       	cpi	r24, 0x0C	; 12
    730e:	91 05       	cpc	r25, r1
    7310:	5c f0       	brlt	.+22     	; 0x7328 <normalize+0x108>
    7312:	f7 01       	movw	r30, r14
    7314:	22 85       	ldd	r18, Z+10	; 0x0a
    7316:	33 85       	ldd	r19, Z+11	; 0x0b
    7318:	2f 5f       	subi	r18, 0xFF	; 255
    731a:	3f 4f       	sbci	r19, 0xFF	; 255
    731c:	33 87       	std	Z+11, r19	; 0x0b
    731e:	22 87       	std	Z+10, r18	; 0x0a
    7320:	0c 97       	sbiw	r24, 0x0c	; 12
    7322:	91 87       	std	Z+9, r25	; 0x09
    7324:	80 87       	std	Z+8, r24	; 0x08
    7326:	ef cf       	rjmp	.-34     	; 0x7306 <normalize+0xe6>
    7328:	f7 01       	movw	r30, r14
    732a:	80 85       	ldd	r24, Z+8	; 0x08
    732c:	91 85       	ldd	r25, Z+9	; 0x09
    732e:	97 ff       	sbrs	r25, 7
    7330:	2d c0       	rjmp	.+90     	; 0x738c <normalize+0x16c>
    7332:	f7 01       	movw	r30, r14
    7334:	22 85       	ldd	r18, Z+10	; 0x0a
    7336:	33 85       	ldd	r19, Z+11	; 0x0b
    7338:	21 50       	subi	r18, 0x01	; 1
    733a:	31 09       	sbc	r19, r1
    733c:	33 87       	std	Z+11, r19	; 0x0b
    733e:	22 87       	std	Z+10, r18	; 0x0a
    7340:	0c 96       	adiw	r24, 0x0c	; 12
    7342:	91 87       	std	Z+9, r25	; 0x09
    7344:	80 87       	std	Z+8, r24	; 0x08
    7346:	f0 cf       	rjmp	.-32     	; 0x7328 <normalize+0x108>
    7348:	f7 01       	movw	r30, r14
    734a:	c6 80       	ldd	r12, Z+6	; 0x06
    734c:	d7 80       	ldd	r13, Z+7	; 0x07
    734e:	a0 84       	ldd	r10, Z+8	; 0x08
    7350:	b1 84       	ldd	r11, Z+9	; 0x09
    7352:	b4 01       	movw	r22, r8
    7354:	c5 01       	movw	r24, r10
    7356:	59 dd       	rcall	.-1358   	; 0x6e0a <Days_Per_Month>
    7358:	8c 15       	cp	r24, r12
    735a:	9d 05       	cpc	r25, r13
    735c:	84 f5       	brge	.+96     	; 0x73be <normalize+0x19e>
    735e:	c8 1a       	sub	r12, r24
    7360:	d9 0a       	sbc	r13, r25
    7362:	f7 01       	movw	r30, r14
    7364:	d7 82       	std	Z+7, r13	; 0x07
    7366:	c6 82       	std	Z+6, r12	; 0x06
    7368:	c5 01       	movw	r24, r10
    736a:	01 96       	adiw	r24, 0x01	; 1
    736c:	91 87       	std	Z+9, r25	; 0x09
    736e:	80 87       	std	Z+8, r24	; 0x08
    7370:	0c 97       	sbiw	r24, 0x0c	; 12
    7372:	54 f3       	brlt	.-44     	; 0x7348 <normalize+0x128>
    7374:	fb e0       	ldi	r31, 0x0B	; 11
    7376:	af 1a       	sub	r10, r31
    7378:	b1 08       	sbc	r11, r1
    737a:	f7 01       	movw	r30, r14
    737c:	b1 86       	std	Z+9, r11	; 0x09
    737e:	a0 86       	std	Z+8, r10	; 0x08
    7380:	ff ef       	ldi	r31, 0xFF	; 255
    7382:	8f 1a       	sub	r8, r31
    7384:	9f 0a       	sbc	r9, r31
    7386:	f7 01       	movw	r30, r14
    7388:	93 86       	std	Z+11, r9	; 0x0b
    738a:	82 86       	std	Z+10, r8	; 0x0a
    738c:	f7 01       	movw	r30, r14
    738e:	82 84       	ldd	r8, Z+10	; 0x0a
    7390:	93 84       	ldd	r9, Z+11	; 0x0b
    7392:	da cf       	rjmp	.-76     	; 0x7348 <normalize+0x128>
    7394:	f7 01       	movw	r30, r14
    7396:	80 85       	ldd	r24, Z+8	; 0x08
    7398:	91 85       	ldd	r25, Z+9	; 0x09
    739a:	9c 01       	movw	r18, r24
    739c:	21 50       	subi	r18, 0x01	; 1
    739e:	31 09       	sbc	r19, r1
    73a0:	37 fd       	sbrc	r19, 7
    73a2:	16 c0       	rjmp	.+44     	; 0x73d0 <normalize+0x1b0>
    73a4:	31 87       	std	Z+9, r19	; 0x09
    73a6:	20 87       	std	Z+8, r18	; 0x08
    73a8:	f7 01       	movw	r30, r14
    73aa:	62 85       	ldd	r22, Z+10	; 0x0a
    73ac:	73 85       	ldd	r23, Z+11	; 0x0b
    73ae:	80 85       	ldd	r24, Z+8	; 0x08
    73b0:	91 85       	ldd	r25, Z+9	; 0x09
    73b2:	2b dd       	rcall	.-1450   	; 0x6e0a <Days_Per_Month>
    73b4:	88 0d       	add	r24, r8
    73b6:	99 1d       	adc	r25, r9
    73b8:	f7 01       	movw	r30, r14
    73ba:	97 83       	std	Z+7, r25	; 0x07
    73bc:	86 83       	std	Z+6, r24	; 0x06
    73be:	f7 01       	movw	r30, r14
    73c0:	86 80       	ldd	r8, Z+6	; 0x06
    73c2:	97 80       	ldd	r9, Z+7	; 0x07
    73c4:	a2 84       	ldd	r10, Z+10	; 0x0a
    73c6:	b3 84       	ldd	r11, Z+11	; 0x0b
    73c8:	18 14       	cp	r1, r8
    73ca:	19 04       	cpc	r1, r9
    73cc:	1c f7       	brge	.-58     	; 0x7394 <normalize+0x174>
    73ce:	0b c0       	rjmp	.+22     	; 0x73e6 <normalize+0x1c6>
    73d0:	0b 96       	adiw	r24, 0x0b	; 11
    73d2:	f7 01       	movw	r30, r14
    73d4:	91 87       	std	Z+9, r25	; 0x09
    73d6:	80 87       	std	Z+8, r24	; 0x08
    73d8:	f1 e0       	ldi	r31, 0x01	; 1
    73da:	af 1a       	sub	r10, r31
    73dc:	b1 08       	sbc	r11, r1
    73de:	f7 01       	movw	r30, r14
    73e0:	b3 86       	std	Z+11, r11	; 0x0b
    73e2:	a2 86       	std	Z+10, r10	; 0x0a
    73e4:	e1 cf       	rjmp	.-62     	; 0x73a8 <normalize+0x188>
    73e6:	a5 01       	movw	r20, r10
    73e8:	44 59       	subi	r20, 0x94	; 148
    73ea:	58 4f       	sbci	r21, 0xF8	; 248
    73ec:	58 87       	std	Y+8, r21	; 0x08
    73ee:	4f 83       	std	Y+7, r20	; 0x07
    73f0:	35 01       	movw	r6, r10
    73f2:	56 e4       	ldi	r21, 0x46	; 70
    73f4:	65 1a       	sub	r6, r21
    73f6:	71 08       	sbc	r7, r1
    73f8:	89 e8       	ldi	r24, 0x89	; 137
    73fa:	68 16       	cp	r6, r24
    73fc:	71 04       	cpc	r7, r1
    73fe:	08 f0       	brcs	.+2      	; 0x7402 <normalize+0x1e2>
    7400:	9b c0       	rjmp	.+310    	; 0x7538 <normalize+0x318>
    7402:	c0 84       	ldd	r12, Z+8	; 0x08
    7404:	d1 84       	ldd	r13, Z+9	; 0x09
    7406:	9c e0       	ldi	r25, 0x0C	; 12
    7408:	c9 16       	cp	r12, r25
    740a:	d1 04       	cpc	r13, r1
    740c:	08 f0       	brcs	.+2      	; 0x7410 <normalize+0x1f0>
    740e:	94 c0       	rjmp	.+296    	; 0x7538 <normalize+0x318>
    7410:	24 01       	movw	r4, r8
    7412:	e1 e0       	ldi	r30, 0x01	; 1
    7414:	4e 1a       	sub	r4, r30
    7416:	51 08       	sbc	r5, r1
    7418:	6f 81       	ldd	r22, Y+7	; 0x07
    741a:	78 85       	ldd	r23, Y+8	; 0x08
    741c:	c6 01       	movw	r24, r12
    741e:	f5 dc       	rcall	.-1558   	; 0x6e0a <Days_Per_Month>
    7420:	48 16       	cp	r4, r24
    7422:	59 06       	cpc	r5, r25
    7424:	0c f0       	brlt	.+2      	; 0x7428 <normalize+0x208>
    7426:	88 c0       	rjmp	.+272    	; 0x7538 <normalize+0x318>
    7428:	08 31       	cpi	r16, 0x18	; 24
    742a:	11 05       	cpc	r17, r1
    742c:	0c f0       	brlt	.+2      	; 0x7430 <normalize+0x210>
    742e:	84 c0       	rjmp	.+264    	; 0x7538 <normalize+0x318>
    7430:	fc e3       	ldi	r31, 0x3C	; 60
    7432:	2f 16       	cp	r2, r31
    7434:	31 04       	cpc	r3, r1
    7436:	0c f0       	brlt	.+2      	; 0x743a <normalize+0x21a>
    7438:	7f c0       	rjmp	.+254    	; 0x7538 <normalize+0x318>
    743a:	4d 81       	ldd	r20, Y+5	; 0x05
    743c:	5e 81       	ldd	r21, Y+6	; 0x06
    743e:	4c 33       	cpi	r20, 0x3C	; 60
    7440:	51 05       	cpc	r21, r1
    7442:	0c f0       	brlt	.+2      	; 0x7446 <normalize+0x226>
    7444:	79 c0       	rjmp	.+242    	; 0x7538 <normalize+0x318>
    7446:	2d e6       	ldi	r18, 0x6D	; 109
    7448:	31 e0       	ldi	r19, 0x01	; 1
    744a:	d3 01       	movw	r26, r6
    744c:	0e 94 6d e7 	call	0x1ceda	; 0x1ceda <__usmulhisi3>
    7450:	f6 01       	movw	r30, r12
    7452:	ee 0f       	add	r30, r30
    7454:	ff 1f       	adc	r31, r31
    7456:	e0 56       	subi	r30, 0x60	; 96
    7458:	fc 4f       	sbci	r31, 0xFC	; 252
    745a:	20 81       	ld	r18, Z
    745c:	31 81       	ldd	r19, Z+1	; 0x01
    745e:	dc 01       	movw	r26, r24
    7460:	cb 01       	movw	r24, r22
    7462:	82 0f       	add	r24, r18
    7464:	93 1f       	adc	r25, r19
    7466:	a1 1d       	adc	r26, r1
    7468:	b1 1d       	adc	r27, r1
    746a:	05 2c       	mov	r0, r5
    746c:	00 0c       	add	r0, r0
    746e:	66 08       	sbc	r6, r6
    7470:	77 08       	sbc	r7, r7
    7472:	48 0e       	add	r4, r24
    7474:	59 1e       	adc	r5, r25
    7476:	6a 1e       	adc	r6, r26
    7478:	7b 1e       	adc	r7, r27
    747a:	1a 14       	cp	r1, r10
    747c:	1b 04       	cpc	r1, r11
    747e:	1c f4       	brge	.+6      	; 0x7486 <normalize+0x266>
    7480:	51 e0       	ldi	r21, 0x01	; 1
    7482:	a5 1a       	sub	r10, r21
    7484:	b1 08       	sbc	r11, r1
    7486:	45 01       	movw	r8, r10
    7488:	95 94       	asr	r9
    748a:	87 94       	ror	r8
    748c:	95 94       	asr	r9
    748e:	87 94       	ror	r8
    7490:	88 ec       	ldi	r24, 0xC8	; 200
    7492:	a8 16       	cp	r10, r24
    7494:	b1 04       	cpc	r11, r1
    7496:	1c f0       	brlt	.+6      	; 0x749e <normalize+0x27e>
    7498:	91 e0       	ldi	r25, 0x01	; 1
    749a:	89 1a       	sub	r8, r25
    749c:	91 08       	sbc	r9, r1
    749e:	09 2c       	mov	r0, r9
    74a0:	00 0c       	add	r0, r0
    74a2:	aa 08       	sbc	r10, r10
    74a4:	bb 08       	sbc	r11, r11
    74a6:	84 0c       	add	r8, r4
    74a8:	95 1c       	adc	r9, r5
    74aa:	a6 1c       	adc	r10, r6
    74ac:	b7 1c       	adc	r11, r7
    74ae:	24 01       	movw	r4, r8
    74b0:	35 01       	movw	r6, r10
    74b2:	e1 e1       	ldi	r30, 0x11	; 17
    74b4:	4e 1a       	sub	r4, r30
    74b6:	51 08       	sbc	r5, r1
    74b8:	61 08       	sbc	r6, r1
    74ba:	71 08       	sbc	r7, r1
    74bc:	f2 e0       	ldi	r31, 0x02	; 2
    74be:	cf 16       	cp	r12, r31
    74c0:	d1 04       	cpc	r13, r1
    74c2:	64 f0       	brlt	.+24     	; 0x74dc <normalize+0x2bc>
    74c4:	8f 81       	ldd	r24, Y+7	; 0x07
    74c6:	98 85       	ldd	r25, Y+8	; 0x08
    74c8:	7b dc       	rcall	.-1802   	; 0x6dc0 <IS_Leap>
    74ca:	89 2b       	or	r24, r25
    74cc:	39 f0       	breq	.+14     	; 0x74dc <normalize+0x2bc>
    74ce:	24 01       	movw	r4, r8
    74d0:	35 01       	movw	r6, r10
    74d2:	40 e1       	ldi	r20, 0x10	; 16
    74d4:	44 1a       	sub	r4, r20
    74d6:	51 08       	sbc	r5, r1
    74d8:	61 08       	sbc	r6, r1
    74da:	71 08       	sbc	r7, r1
    74dc:	a8 e1       	ldi	r26, 0x18	; 24
    74de:	b0 e0       	ldi	r27, 0x00	; 0
    74e0:	a3 01       	movw	r20, r6
    74e2:	92 01       	movw	r18, r4
    74e4:	0e 94 73 e7 	call	0x1cee6	; 0x1cee6 <__muluhisi3>
    74e8:	01 2e       	mov	r0, r17
    74ea:	00 0c       	add	r0, r0
    74ec:	22 0b       	sbc	r18, r18
    74ee:	33 0b       	sbc	r19, r19
    74f0:	a9 01       	movw	r20, r18
    74f2:	98 01       	movw	r18, r16
    74f4:	26 0f       	add	r18, r22
    74f6:	37 1f       	adc	r19, r23
    74f8:	48 1f       	adc	r20, r24
    74fa:	59 1f       	adc	r21, r25
    74fc:	ac e3       	ldi	r26, 0x3C	; 60
    74fe:	b0 e0       	ldi	r27, 0x00	; 0
    7500:	0e 94 73 e7 	call	0x1cee6	; 0x1cee6 <__muluhisi3>
    7504:	81 01       	movw	r16, r2
    7506:	03 2c       	mov	r0, r3
    7508:	00 0c       	add	r0, r0
    750a:	22 0b       	sbc	r18, r18
    750c:	33 0b       	sbc	r19, r19
    750e:	a9 01       	movw	r20, r18
    7510:	98 01       	movw	r18, r16
    7512:	26 0f       	add	r18, r22
    7514:	37 1f       	adc	r19, r23
    7516:	48 1f       	adc	r20, r24
    7518:	59 1f       	adc	r21, r25
    751a:	0e 94 73 e7 	call	0x1cee6	; 0x1cee6 <__muluhisi3>
    751e:	ed 81       	ldd	r30, Y+5	; 0x05
    7520:	fe 81       	ldd	r31, Y+6	; 0x06
    7522:	8f 01       	movw	r16, r30
    7524:	ff 0f       	add	r31, r31
    7526:	22 0b       	sbc	r18, r18
    7528:	33 0b       	sbc	r19, r19
    752a:	48 01       	movw	r8, r16
    752c:	59 01       	movw	r10, r18
    752e:	86 0e       	add	r8, r22
    7530:	97 1e       	adc	r9, r23
    7532:	a8 1e       	adc	r10, r24
    7534:	b9 1e       	adc	r11, r25
    7536:	04 c0       	rjmp	.+8      	; 0x7540 <normalize+0x320>
    7538:	88 24       	eor	r8, r8
    753a:	8a 94       	dec	r8
    753c:	98 2c       	mov	r9, r8
    753e:	54 01       	movw	r10, r8
    7540:	49 85       	ldd	r20, Y+9	; 0x09
    7542:	5a 85       	ldd	r21, Y+10	; 0x0a
    7544:	45 2b       	or	r20, r21
    7546:	e9 f0       	breq	.+58     	; 0x7582 <normalize+0x362>
    7548:	ce 01       	movw	r24, r28
    754a:	01 96       	adiw	r24, 0x01	; 1
    754c:	7d dd       	rcall	.-1286   	; 0x7048 <gettimezone>
    754e:	a9 81       	ldd	r26, Y+1	; 0x01
    7550:	ba 81       	ldd	r27, Y+2	; 0x02
    7552:	2c e3       	ldi	r18, 0x3C	; 60
    7554:	30 e0       	ldi	r19, 0x00	; 0
    7556:	0e 94 6d e7 	call	0x1ceda	; 0x1ceda <__usmulhisi3>
    755a:	2b 01       	movw	r4, r22
    755c:	3c 01       	movw	r6, r24
    755e:	c5 01       	movw	r24, r10
    7560:	b4 01       	movw	r22, r8
    7562:	e2 dd       	rcall	.-1084   	; 0x7128 <is_dst>
    7564:	89 2b       	or	r24, r25
    7566:	51 f0       	breq	.+20     	; 0x757c <normalize+0x35c>
    7568:	50 e1       	ldi	r21, 0x10	; 16
    756a:	45 1a       	sub	r4, r21
    756c:	5e e0       	ldi	r21, 0x0E	; 14
    756e:	55 0a       	sbc	r5, r21
    7570:	61 08       	sbc	r6, r1
    7572:	71 08       	sbc	r7, r1
    7574:	cc 24       	eor	r12, r12
    7576:	c3 94       	inc	r12
    7578:	d1 2c       	mov	r13, r1
    757a:	08 c0       	rjmp	.+16     	; 0x758c <normalize+0x36c>
    757c:	c1 2c       	mov	r12, r1
    757e:	d1 2c       	mov	r13, r1
    7580:	05 c0       	rjmp	.+10     	; 0x758c <normalize+0x36c>
    7582:	c1 2c       	mov	r12, r1
    7584:	d1 2c       	mov	r13, r1
    7586:	41 2c       	mov	r4, r1
    7588:	51 2c       	mov	r5, r1
    758a:	32 01       	movw	r6, r4
    758c:	87 01       	movw	r16, r14
    758e:	a3 01       	movw	r20, r6
    7590:	92 01       	movw	r18, r4
    7592:	c5 01       	movw	r24, r10
    7594:	b4 01       	movw	r22, r8
    7596:	5a dc       	rcall	.-1868   	; 0x6e4c <time_to_tm>
    7598:	c1 14       	cp	r12, r1
    759a:	d1 04       	cpc	r13, r1
    759c:	29 f0       	breq	.+10     	; 0x75a8 <normalize+0x388>
    759e:	21 e0       	ldi	r18, 0x01	; 1
    75a0:	30 e0       	ldi	r19, 0x00	; 0
    75a2:	f7 01       	movw	r30, r14
    75a4:	31 8b       	std	Z+17, r19	; 0x11
    75a6:	20 8b       	std	Z+16, r18	; 0x10
    75a8:	2a 96       	adiw	r28, 0x0a	; 10
    75aa:	e2 e1       	ldi	r30, 0x12	; 18
    75ac:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

000075b0 <timegm>:
    75b0:	60 e0       	ldi	r22, 0x00	; 0
    75b2:	70 e0       	ldi	r23, 0x00	; 0
    75b4:	35 ce       	rjmp	.-918    	; 0x7220 <normalize>
    75b6:	08 95       	ret

000075b8 <setdate_r>:
    75b8:	cf 92       	push	r12
    75ba:	df 92       	push	r13
    75bc:	ef 92       	push	r14
    75be:	ff 92       	push	r15
    75c0:	cf 93       	push	r28
    75c2:	df 93       	push	r29
    75c4:	cd b7       	in	r28, 0x3d	; 61
    75c6:	de b7       	in	r29, 0x3e	; 62
    75c8:	a5 97       	sbiw	r28, 0x25	; 37
    75ca:	0f b6       	in	r0, 0x3f	; 63
    75cc:	f8 94       	cli
    75ce:	de bf       	out	0x3e, r29	; 62
    75d0:	0f be       	out	0x3f, r0	; 63
    75d2:	cd bf       	out	0x3d, r28	; 61
    75d4:	9d a3       	std	Y+37, r25	; 0x25
    75d6:	8c a3       	std	Y+36, r24	; 0x24
    75d8:	1f 82       	std	Y+7, r1	; 0x07
    75da:	1e 82       	std	Y+6, r1	; 0x06
    75dc:	19 86       	std	Y+9, r1	; 0x09
    75de:	18 86       	std	Y+8, r1	; 0x08
    75e0:	1b 86       	std	Y+11, r1	; 0x0b
    75e2:	1a 86       	std	Y+10, r1	; 0x0a
    75e4:	1d 86       	std	Y+13, r1	; 0x0d
    75e6:	1c 86       	std	Y+12, r1	; 0x0c
    75e8:	1f 86       	std	Y+15, r1	; 0x0f
    75ea:	1e 86       	std	Y+14, r1	; 0x0e
    75ec:	19 8a       	std	Y+17, r1	; 0x11
    75ee:	18 8a       	std	Y+16, r1	; 0x10
    75f0:	8c a1       	ldd	r24, Y+36	; 0x24
    75f2:	9d a1       	ldd	r25, Y+37	; 0x25
    75f4:	fc 01       	movw	r30, r24
    75f6:	20 81       	ld	r18, Z
    75f8:	20 32       	cpi	r18, 0x20	; 32
    75fa:	21 f4       	brne	.+8      	; 0x7604 <setdate_r+0x4c>
    75fc:	01 96       	adiw	r24, 0x01	; 1
    75fe:	9d a3       	std	Y+37, r25	; 0x25
    7600:	8c a3       	std	Y+36, r24	; 0x24
    7602:	f6 cf       	rjmp	.-20     	; 0x75f0 <setdate_r+0x38>
    7604:	4a e0       	ldi	r20, 0x0A	; 10
    7606:	50 e0       	ldi	r21, 0x00	; 0
    7608:	be 01       	movw	r22, r28
    760a:	6c 5d       	subi	r22, 0xDC	; 220
    760c:	7f 4f       	sbci	r23, 0xFF	; 255
    760e:	0e 94 ac 47 	call	0x8f58	; 0x8f58 <strtol>
    7612:	79 8b       	std	Y+17, r23	; 0x11
    7614:	68 8b       	std	Y+16, r22	; 0x10
    7616:	8c a1       	ldd	r24, Y+36	; 0x24
    7618:	9d a1       	ldd	r25, Y+37	; 0x25
    761a:	fc 01       	movw	r30, r24
    761c:	20 81       	ld	r18, Z
    761e:	20 32       	cpi	r18, 0x20	; 32
    7620:	21 f4       	brne	.+8      	; 0x762a <setdate_r+0x72>
    7622:	01 96       	adiw	r24, 0x01	; 1
    7624:	9d a3       	std	Y+37, r25	; 0x25
    7626:	8c a3       	std	Y+36, r24	; 0x24
    7628:	f6 cf       	rjmp	.-20     	; 0x7616 <setdate_r+0x5e>
    762a:	4a e0       	ldi	r20, 0x0A	; 10
    762c:	50 e0       	ldi	r21, 0x00	; 0
    762e:	be 01       	movw	r22, r28
    7630:	6c 5d       	subi	r22, 0xDC	; 220
    7632:	7f 4f       	sbci	r23, 0xFF	; 255
    7634:	0e 94 ac 47 	call	0x8f58	; 0x8f58 <strtol>
    7638:	7f 87       	std	Y+15, r23	; 0x0f
    763a:	6e 87       	std	Y+14, r22	; 0x0e
    763c:	8c a1       	ldd	r24, Y+36	; 0x24
    763e:	9d a1       	ldd	r25, Y+37	; 0x25
    7640:	fc 01       	movw	r30, r24
    7642:	20 81       	ld	r18, Z
    7644:	20 32       	cpi	r18, 0x20	; 32
    7646:	21 f4       	brne	.+8      	; 0x7650 <setdate_r+0x98>
    7648:	01 96       	adiw	r24, 0x01	; 1
    764a:	9d a3       	std	Y+37, r25	; 0x25
    764c:	8c a3       	std	Y+36, r24	; 0x24
    764e:	f6 cf       	rjmp	.-20     	; 0x763c <setdate_r+0x84>
    7650:	4a e0       	ldi	r20, 0x0A	; 10
    7652:	50 e0       	ldi	r21, 0x00	; 0
    7654:	be 01       	movw	r22, r28
    7656:	6c 5d       	subi	r22, 0xDC	; 220
    7658:	7f 4f       	sbci	r23, 0xFF	; 255
    765a:	0e 94 ac 47 	call	0x8f58	; 0x8f58 <strtol>
    765e:	7d 87       	std	Y+13, r23	; 0x0d
    7660:	6c 87       	std	Y+12, r22	; 0x0c
    7662:	8c a1       	ldd	r24, Y+36	; 0x24
    7664:	9d a1       	ldd	r25, Y+37	; 0x25
    7666:	fc 01       	movw	r30, r24
    7668:	20 81       	ld	r18, Z
    766a:	20 32       	cpi	r18, 0x20	; 32
    766c:	21 f4       	brne	.+8      	; 0x7676 <setdate_r+0xbe>
    766e:	01 96       	adiw	r24, 0x01	; 1
    7670:	9d a3       	std	Y+37, r25	; 0x25
    7672:	8c a3       	std	Y+36, r24	; 0x24
    7674:	f6 cf       	rjmp	.-20     	; 0x7662 <setdate_r+0xaa>
    7676:	4a e0       	ldi	r20, 0x0A	; 10
    7678:	50 e0       	ldi	r21, 0x00	; 0
    767a:	be 01       	movw	r22, r28
    767c:	6c 5d       	subi	r22, 0xDC	; 220
    767e:	7f 4f       	sbci	r23, 0xFF	; 255
    7680:	0e 94 ac 47 	call	0x8f58	; 0x8f58 <strtol>
    7684:	7b 87       	std	Y+11, r23	; 0x0b
    7686:	6a 87       	std	Y+10, r22	; 0x0a
    7688:	ec a1       	ldd	r30, Y+36	; 0x24
    768a:	fd a1       	ldd	r31, Y+37	; 0x25
    768c:	80 81       	ld	r24, Z
    768e:	88 23       	and	r24, r24
    7690:	39 f0       	breq	.+14     	; 0x76a0 <setdate_r+0xe8>
    7692:	80 32       	cpi	r24, 0x20	; 32
    7694:	11 f0       	breq	.+4      	; 0x769a <setdate_r+0xe2>
    7696:	8a 33       	cpi	r24, 0x3A	; 58
    7698:	19 f4       	brne	.+6      	; 0x76a0 <setdate_r+0xe8>
    769a:	31 96       	adiw	r30, 0x01	; 1
    769c:	fd a3       	std	Y+37, r31	; 0x25
    769e:	ec a3       	std	Y+36, r30	; 0x24
    76a0:	4a e0       	ldi	r20, 0x0A	; 10
    76a2:	50 e0       	ldi	r21, 0x00	; 0
    76a4:	be 01       	movw	r22, r28
    76a6:	6c 5d       	subi	r22, 0xDC	; 220
    76a8:	7f 4f       	sbci	r23, 0xFF	; 255
    76aa:	8c a1       	ldd	r24, Y+36	; 0x24
    76ac:	9d a1       	ldd	r25, Y+37	; 0x25
    76ae:	0e 94 ac 47 	call	0x8f58	; 0x8f58 <strtol>
    76b2:	79 87       	std	Y+9, r23	; 0x09
    76b4:	68 87       	std	Y+8, r22	; 0x08
    76b6:	ec a1       	ldd	r30, Y+36	; 0x24
    76b8:	fd a1       	ldd	r31, Y+37	; 0x25
    76ba:	80 81       	ld	r24, Z
    76bc:	88 23       	and	r24, r24
    76be:	39 f0       	breq	.+14     	; 0x76ce <setdate_r+0x116>
    76c0:	80 32       	cpi	r24, 0x20	; 32
    76c2:	11 f0       	breq	.+4      	; 0x76c8 <setdate_r+0x110>
    76c4:	8a 33       	cpi	r24, 0x3A	; 58
    76c6:	19 f4       	brne	.+6      	; 0x76ce <setdate_r+0x116>
    76c8:	31 96       	adiw	r30, 0x01	; 1
    76ca:	fd a3       	std	Y+37, r31	; 0x25
    76cc:	ec a3       	std	Y+36, r30	; 0x24
    76ce:	4a e0       	ldi	r20, 0x0A	; 10
    76d0:	50 e0       	ldi	r21, 0x00	; 0
    76d2:	be 01       	movw	r22, r28
    76d4:	6c 5d       	subi	r22, 0xDC	; 220
    76d6:	7f 4f       	sbci	r23, 0xFF	; 255
    76d8:	8c a1       	ldd	r24, Y+36	; 0x24
    76da:	9d a1       	ldd	r25, Y+37	; 0x25
    76dc:	0e 94 ac 47 	call	0x8f58	; 0x8f58 <strtol>
    76e0:	7f 83       	std	Y+7, r23	; 0x07
    76e2:	6e 83       	std	Y+6, r22	; 0x06
    76e4:	2e 85       	ldd	r18, Y+14	; 0x0e
    76e6:	3f 85       	ldd	r19, Y+15	; 0x0f
    76e8:	21 50       	subi	r18, 0x01	; 1
    76ea:	31 09       	sbc	r19, r1
    76ec:	3f 87       	std	Y+15, r19	; 0x0f
    76ee:	2e 87       	std	Y+14, r18	; 0x0e
    76f0:	88 89       	ldd	r24, Y+16	; 0x10
    76f2:	99 89       	ldd	r25, Y+17	; 0x11
    76f4:	ac 01       	movw	r20, r24
    76f6:	42 5b       	subi	r20, 0xB2	; 178
    76f8:	57 40       	sbci	r21, 0x07	; 7
    76fa:	45 34       	cpi	r20, 0x45	; 69
    76fc:	51 05       	cpc	r21, r1
    76fe:	38 f0       	brcs	.+14     	; 0x770e <setdate_r+0x156>
    7700:	ed b7       	in	r30, 0x3d	; 61
    7702:	fe b7       	in	r31, 0x3e	; 62
    7704:	95 83       	std	Z+5, r25	; 0x05
    7706:	84 83       	std	Z+4, r24	; 0x04
    7708:	8b e1       	ldi	r24, 0x1B	; 27
    770a:	97 e0       	ldi	r25, 0x07	; 7
    770c:	34 c0       	rjmp	.+104    	; 0x7776 <setdate_r+0x1be>
    770e:	8c 56       	subi	r24, 0x6C	; 108
    7710:	97 40       	sbci	r25, 0x07	; 7
    7712:	99 8b       	std	Y+17, r25	; 0x11
    7714:	88 8b       	std	Y+16, r24	; 0x10
    7716:	2c 30       	cpi	r18, 0x0C	; 12
    7718:	31 05       	cpc	r19, r1
    771a:	38 f0       	brcs	.+14     	; 0x772a <setdate_r+0x172>
    771c:	ed b7       	in	r30, 0x3d	; 61
    771e:	fe b7       	in	r31, 0x3e	; 62
    7720:	95 83       	std	Z+5, r25	; 0x05
    7722:	84 83       	std	Z+4, r24	; 0x04
    7724:	8a e0       	ldi	r24, 0x0A	; 10
    7726:	97 e0       	ldi	r25, 0x07	; 7
    7728:	26 c0       	rjmp	.+76     	; 0x7776 <setdate_r+0x1be>
    772a:	8c 85       	ldd	r24, Y+12	; 0x0c
    772c:	9d 85       	ldd	r25, Y+13	; 0x0d
    772e:	9c 01       	movw	r18, r24
    7730:	21 50       	subi	r18, 0x01	; 1
    7732:	31 09       	sbc	r19, r1
    7734:	2f 31       	cpi	r18, 0x1F	; 31
    7736:	31 05       	cpc	r19, r1
    7738:	38 f0       	brcs	.+14     	; 0x7748 <setdate_r+0x190>
    773a:	ed b7       	in	r30, 0x3d	; 61
    773c:	fe b7       	in	r31, 0x3e	; 62
    773e:	95 83       	std	Z+5, r25	; 0x05
    7740:	84 83       	std	Z+4, r24	; 0x04
    7742:	89 ef       	ldi	r24, 0xF9	; 249
    7744:	96 e0       	ldi	r25, 0x06	; 6
    7746:	17 c0       	rjmp	.+46     	; 0x7776 <setdate_r+0x1be>
    7748:	8a 85       	ldd	r24, Y+10	; 0x0a
    774a:	9b 85       	ldd	r25, Y+11	; 0x0b
    774c:	88 31       	cpi	r24, 0x18	; 24
    774e:	91 05       	cpc	r25, r1
    7750:	38 f0       	brcs	.+14     	; 0x7760 <setdate_r+0x1a8>
    7752:	ed b7       	in	r30, 0x3d	; 61
    7754:	fe b7       	in	r31, 0x3e	; 62
    7756:	95 83       	std	Z+5, r25	; 0x05
    7758:	84 83       	std	Z+4, r24	; 0x04
    775a:	87 ee       	ldi	r24, 0xE7	; 231
    775c:	96 e0       	ldi	r25, 0x06	; 6
    775e:	0b c0       	rjmp	.+22     	; 0x7776 <setdate_r+0x1be>
    7760:	88 85       	ldd	r24, Y+8	; 0x08
    7762:	99 85       	ldd	r25, Y+9	; 0x09
    7764:	8c 33       	cpi	r24, 0x3C	; 60
    7766:	91 05       	cpc	r25, r1
    7768:	68 f0       	brcs	.+26     	; 0x7784 <setdate_r+0x1cc>
    776a:	ed b7       	in	r30, 0x3d	; 61
    776c:	fe b7       	in	r31, 0x3e	; 62
    776e:	95 83       	std	Z+5, r25	; 0x05
    7770:	84 83       	std	Z+4, r24	; 0x04
    7772:	86 ed       	ldi	r24, 0xD6	; 214
    7774:	96 e0       	ldi	r25, 0x06	; 6
    7776:	a0 e0       	ldi	r26, 0x00	; 0
    7778:	81 83       	std	Z+1, r24	; 0x01
    777a:	92 83       	std	Z+2, r25	; 0x02
    777c:	a3 83       	std	Z+3, r26	; 0x03
    777e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    7782:	25 c0       	rjmp	.+74     	; 0x77ce <setdate_r+0x216>
    7784:	ce 01       	movw	r24, r28
    7786:	06 96       	adiw	r24, 0x06	; 6
    7788:	13 df       	rcall	.-474    	; 0x75b0 <timegm>
    778a:	6b 01       	movw	r12, r22
    778c:	7c 01       	movw	r14, r24
    778e:	6c 8f       	std	Y+28, r22	; 0x1c
    7790:	7d 8f       	std	Y+29, r23	; 0x1d
    7792:	8e 8f       	std	Y+30, r24	; 0x1e
    7794:	9f 8f       	std	Y+31, r25	; 0x1f
    7796:	18 a2       	std	Y+32, r1	; 0x20
    7798:	19 a2       	std	Y+33, r1	; 0x21
    779a:	1a a2       	std	Y+34, r1	; 0x22
    779c:	1b a2       	std	Y+35, r1	; 0x23
    779e:	be 01       	movw	r22, r28
    77a0:	64 5e       	subi	r22, 0xE4	; 228
    77a2:	7f 4f       	sbci	r23, 0xFF	; 255
    77a4:	80 e0       	ldi	r24, 0x00	; 0
    77a6:	90 e0       	ldi	r25, 0x00	; 0
    77a8:	03 db       	rcall	.-2554   	; 0x6db0 <clock_settime>
    77aa:	b7 01       	movw	r22, r14
    77ac:	a6 01       	movw	r20, r12
    77ae:	81 e0       	ldi	r24, 0x01	; 1
    77b0:	90 e0       	ldi	r25, 0x00	; 0
    77b2:	0e 94 58 31 	call	0x62b0	; 0x62b0 <rtc_init>
    77b6:	81 11       	cpse	r24, r1
    77b8:	0d c0       	rjmp	.+26     	; 0x77d4 <setdate_r+0x21c>
    77ba:	8f eb       	ldi	r24, 0xBF	; 191
    77bc:	96 e0       	ldi	r25, 0x06	; 6
    77be:	a0 e0       	ldi	r26, 0x00	; 0
    77c0:	ed b7       	in	r30, 0x3d	; 61
    77c2:	fe b7       	in	r31, 0x3e	; 62
    77c4:	81 83       	std	Z+1, r24	; 0x01
    77c6:	92 83       	std	Z+2, r25	; 0x02
    77c8:	a3 83       	std	Z+3, r26	; 0x03
    77ca:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    77ce:	8f ef       	ldi	r24, 0xFF	; 255
    77d0:	9f ef       	ldi	r25, 0xFF	; 255
    77d2:	02 c0       	rjmp	.+4      	; 0x77d8 <setdate_r+0x220>
    77d4:	80 e0       	ldi	r24, 0x00	; 0
    77d6:	90 e0       	ldi	r25, 0x00	; 0
    77d8:	a5 96       	adiw	r28, 0x25	; 37
    77da:	0f b6       	in	r0, 0x3f	; 63
    77dc:	f8 94       	cli
    77de:	de bf       	out	0x3e, r29	; 62
    77e0:	0f be       	out	0x3f, r0	; 63
    77e2:	cd bf       	out	0x3d, r28	; 61
    77e4:	df 91       	pop	r29
    77e6:	cf 91       	pop	r28
    77e8:	ff 90       	pop	r15
    77ea:	ef 90       	pop	r14
    77ec:	df 90       	pop	r13
    77ee:	cf 90       	pop	r12
    77f0:	08 95       	ret

000077f2 <setdate>:
    77f2:	ab e2       	ldi	r26, 0x2B	; 43
    77f4:	b0 e0       	ldi	r27, 0x00	; 0
    77f6:	ef ef       	ldi	r30, 0xFF	; 255
    77f8:	fb e3       	ldi	r31, 0x3B	; 59
    77fa:	0c 94 a3 e7 	jmp	0x1cf46	; 0x1cf46 <__prologue_saves__+0x20>
    77fe:	8d e2       	ldi	r24, 0x2D	; 45
    7800:	97 e0       	ldi	r25, 0x07	; 7
    7802:	a0 e0       	ldi	r26, 0x00	; 0
    7804:	ed b7       	in	r30, 0x3d	; 61
    7806:	fe b7       	in	r31, 0x3e	; 62
    7808:	81 83       	std	Z+1, r24	; 0x01
    780a:	92 83       	std	Z+2, r25	; 0x02
    780c:	a3 83       	std	Z+3, r26	; 0x03
    780e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    7812:	40 91 b5 1c 	lds	r20, 0x1CB5	; 0x801cb5 <__iob>
    7816:	50 91 b6 1c 	lds	r21, 0x1CB6	; 0x801cb6 <__iob+0x1>
    781a:	66 e2       	ldi	r22, 0x26	; 38
    781c:	70 e0       	ldi	r23, 0x00	; 0
    781e:	ce 01       	movw	r24, r28
    7820:	04 96       	adiw	r24, 0x04	; 4
    7822:	0e 94 e1 76 	call	0xedc2	; 0xedc2 <fgets>
    7826:	ce 01       	movw	r24, r28
    7828:	04 96       	adiw	r24, 0x04	; 4
    782a:	c6 de       	rcall	.-628    	; 0x75b8 <setdate_r>
    782c:	ab 96       	adiw	r28, 0x2b	; 43
    782e:	e2 e0       	ldi	r30, 0x02	; 2
    7830:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00007834 <find_dst>:
    7834:	a8 e2       	ldi	r26, 0x28	; 40
    7836:	b0 e0       	ldi	r27, 0x00	; 0
    7838:	e0 e2       	ldi	r30, 0x20	; 32
    783a:	fc e3       	ldi	r31, 0x3C	; 60
    783c:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
    7840:	3c 01       	movw	r6, r24
    7842:	1a 01       	movw	r2, r20
    7844:	2b 01       	movw	r4, r22
    7846:	49 01       	movw	r8, r18
    7848:	1c a3       	std	Y+36, r17	; 0x24
    784a:	0b a3       	std	Y+35, r16	; 0x23
    784c:	de a2       	std	Y+38, r13	; 0x26
    784e:	cd a2       	std	Y+37, r12	; 0x25
    7850:	b8 a6       	std	Y+40, r11	; 0x28
    7852:	af a2       	std	Y+39, r10	; 0x27
    7854:	be 01       	movw	r22, r28
    7856:	61 5e       	subi	r22, 0xE1	; 225
    7858:	7f 4f       	sbci	r23, 0xFF	; 255
    785a:	ce 01       	movw	r24, r28
    785c:	47 96       	adiw	r24, 0x17	; 23
    785e:	15 dc       	rcall	.-2006   	; 0x708a <gettimeofday>
    7860:	af 8d       	ldd	r26, Y+31	; 0x1f
    7862:	b8 a1       	ldd	r27, Y+32	; 0x20
    7864:	2c e3       	ldi	r18, 0x3C	; 60
    7866:	30 e0       	ldi	r19, 0x00	; 0
    7868:	0e 94 6d e7 	call	0x1ceda	; 0x1ceda <__usmulhisi3>
    786c:	5b 01       	movw	r10, r22
    786e:	6c 01       	movw	r12, r24
    7870:	61 14       	cp	r6, r1
    7872:	71 04       	cpc	r7, r1
    7874:	31 f0       	breq	.+12     	; 0x7882 <find_dst+0x4e>
    7876:	20 e1       	ldi	r18, 0x10	; 16
    7878:	a2 1a       	sub	r10, r18
    787a:	2e e0       	ldi	r18, 0x0E	; 14
    787c:	b2 0a       	sbc	r11, r18
    787e:	c1 08       	sbc	r12, r1
    7880:	d1 08       	sbc	r13, r1
    7882:	81 14       	cp	r8, r1
    7884:	91 04       	cpc	r9, r1
    7886:	39 f0       	breq	.+14     	; 0x7896 <find_dst+0x62>
    7888:	4c e6       	ldi	r20, 0x6C	; 108
    788a:	84 1a       	sub	r8, r20
    788c:	47 e0       	ldi	r20, 0x07	; 7
    788e:	94 0a       	sbc	r9, r20
    7890:	9c 86       	std	Y+12, r9	; 0x0c
    7892:	8b 86       	std	Y+11, r8	; 0x0b
    7894:	11 c0       	rjmp	.+34     	; 0x78b8 <find_dst+0x84>
    7896:	21 14       	cp	r2, r1
    7898:	31 04       	cpc	r3, r1
    789a:	41 04       	cpc	r4, r1
    789c:	51 04       	cpc	r5, r1
    789e:	21 f4       	brne	.+8      	; 0x78a8 <find_dst+0x74>
    78a0:	2f 88       	ldd	r2, Y+23	; 0x17
    78a2:	38 8c       	ldd	r3, Y+24	; 0x18
    78a4:	49 8c       	ldd	r4, Y+25	; 0x19
    78a6:	5a 8c       	ldd	r5, Y+26	; 0x1a
    78a8:	8e 01       	movw	r16, r28
    78aa:	0f 5f       	subi	r16, 0xFF	; 255
    78ac:	1f 4f       	sbci	r17, 0xFF	; 255
    78ae:	a6 01       	movw	r20, r12
    78b0:	95 01       	movw	r18, r10
    78b2:	c2 01       	movw	r24, r4
    78b4:	b1 01       	movw	r22, r2
    78b6:	ca da       	rcall	.-2668   	; 0x6e4c <time_to_tm>
    78b8:	8b a1       	ldd	r24, Y+35	; 0x23
    78ba:	9c a1       	ldd	r25, Y+36	; 0x24
    78bc:	01 97       	sbiw	r24, 0x01	; 1
    78be:	9a 87       	std	Y+10, r25	; 0x0a
    78c0:	89 87       	std	Y+9, r24	; 0x09
    78c2:	81 e0       	ldi	r24, 0x01	; 1
    78c4:	90 e0       	ldi	r25, 0x00	; 0
    78c6:	98 87       	std	Y+8, r25	; 0x08
    78c8:	8f 83       	std	Y+7, r24	; 0x07
    78ca:	8f a1       	ldd	r24, Y+39	; 0x27
    78cc:	98 a5       	ldd	r25, Y+40	; 0x28
    78ce:	9e 83       	std	Y+6, r25	; 0x06
    78d0:	8d 83       	std	Y+5, r24	; 0x05
    78d2:	1c 82       	std	Y+4, r1	; 0x04
    78d4:	1b 82       	std	Y+3, r1	; 0x03
    78d6:	1a 82       	std	Y+2, r1	; 0x02
    78d8:	19 82       	std	Y+1, r1	; 0x01
    78da:	ce 01       	movw	r24, r28
    78dc:	01 96       	adiw	r24, 0x01	; 1
    78de:	68 de       	rcall	.-816    	; 0x75b0 <timegm>
    78e0:	45 01       	movw	r8, r10
    78e2:	56 01       	movw	r10, r12
    78e4:	86 0e       	add	r8, r22
    78e6:	97 1e       	adc	r9, r23
    78e8:	a8 1e       	adc	r10, r24
    78ea:	b9 1e       	adc	r11, r25
    78ec:	8e 01       	movw	r16, r28
    78ee:	0f 5f       	subi	r16, 0xFF	; 255
    78f0:	1f 4f       	sbci	r17, 0xFF	; 255
    78f2:	20 e0       	ldi	r18, 0x00	; 0
    78f4:	30 e0       	ldi	r19, 0x00	; 0
    78f6:	a9 01       	movw	r20, r18
    78f8:	c5 01       	movw	r24, r10
    78fa:	b4 01       	movw	r22, r8
    78fc:	a7 da       	rcall	.-2738   	; 0x6e4c <time_to_tm>
    78fe:	2d 85       	ldd	r18, Y+13	; 0x0d
    7900:	3e 85       	ldd	r19, Y+14	; 0x0e
    7902:	e7 e0       	ldi	r30, 0x07	; 7
    7904:	f0 e0       	ldi	r31, 0x00	; 0
    7906:	c9 01       	movw	r24, r18
    7908:	bf 01       	movw	r22, r30
    790a:	0e 94 13 e7 	call	0x1ce26	; 0x1ce26 <__divmodhi4>
    790e:	4d a1       	ldd	r20, Y+37	; 0x25
    7910:	5e a1       	ldd	r21, Y+38	; 0x26
    7912:	48 17       	cp	r20, r24
    7914:	59 07       	cpc	r21, r25
    7916:	21 f4       	brne	.+8      	; 0x7920 <find_dst+0xec>
    7918:	51 e0       	ldi	r21, 0x01	; 1
    791a:	e5 1a       	sub	r14, r21
    791c:	f1 08       	sbc	r15, r1
    791e:	51 f0       	breq	.+20     	; 0x7934 <find_dst+0x100>
    7920:	80 e8       	ldi	r24, 0x80	; 128
    7922:	88 0e       	add	r8, r24
    7924:	81 e5       	ldi	r24, 0x51	; 81
    7926:	98 1e       	adc	r9, r24
    7928:	81 e0       	ldi	r24, 0x01	; 1
    792a:	a8 1e       	adc	r10, r24
    792c:	b1 1c       	adc	r11, r1
    792e:	2f 5f       	subi	r18, 0xFF	; 255
    7930:	3f 4f       	sbci	r19, 0xFF	; 255
    7932:	e9 cf       	rjmp	.-46     	; 0x7906 <find_dst+0xd2>
    7934:	c5 01       	movw	r24, r10
    7936:	b4 01       	movw	r22, r8
    7938:	a8 96       	adiw	r28, 0x28	; 40
    793a:	e2 e1       	ldi	r30, 0x12	; 18
    793c:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

00007940 <set_dst>:
    7940:	4f 92       	push	r4
    7942:	5f 92       	push	r5
    7944:	6f 92       	push	r6
    7946:	7f 92       	push	r7
    7948:	af 92       	push	r10
    794a:	bf 92       	push	r11
    794c:	cf 92       	push	r12
    794e:	df 92       	push	r13
    7950:	ef 92       	push	r14
    7952:	ff 92       	push	r15
    7954:	0f 93       	push	r16
    7956:	1f 93       	push	r17
    7958:	cf 93       	push	r28
    795a:	df 93       	push	r29
    795c:	cd b7       	in	r28, 0x3d	; 61
    795e:	de b7       	in	r29, 0x3e	; 62
    7960:	2c 97       	sbiw	r28, 0x0c	; 12
    7962:	0f b6       	in	r0, 0x3f	; 63
    7964:	f8 94       	cli
    7966:	de bf       	out	0x3e, r29	; 62
    7968:	0f be       	out	0x3f, r0	; 63
    796a:	cd bf       	out	0x3d, r28	; 61
    796c:	2b 01       	movw	r4, r22
    796e:	3c 01       	movw	r6, r24
    7970:	67 2b       	or	r22, r23
    7972:	68 2b       	or	r22, r24
    7974:	69 2b       	or	r22, r25
    7976:	51 f4       	brne	.+20     	; 0x798c <set_dst+0x4c>
    7978:	be 01       	movw	r22, r28
    797a:	67 5f       	subi	r22, 0xF7	; 247
    797c:	7f 4f       	sbci	r23, 0xFF	; 255
    797e:	ce 01       	movw	r24, r28
    7980:	01 96       	adiw	r24, 0x01	; 1
    7982:	83 db       	rcall	.-2298   	; 0x708a <gettimeofday>
    7984:	49 80       	ldd	r4, Y+1	; 0x01
    7986:	5a 80       	ldd	r5, Y+2	; 0x02
    7988:	6b 80       	ldd	r6, Y+3	; 0x03
    798a:	7c 80       	ldd	r7, Y+4	; 0x04
    798c:	80 91 72 1a 	lds	r24, 0x1A72	; 0x801a72 <dst+0x8>
    7990:	90 91 73 1a 	lds	r25, 0x1A73	; 0x801a73 <dst+0x9>
    7994:	a0 91 74 1a 	lds	r26, 0x1A74	; 0x801a74 <dst+0xa>
    7998:	b0 91 75 1a 	lds	r27, 0x1A75	; 0x801a75 <dst+0xb>
    799c:	84 15       	cp	r24, r4
    799e:	95 05       	cpc	r25, r5
    79a0:	a6 05       	cpc	r26, r6
    79a2:	b7 05       	cpc	r27, r7
    79a4:	50 f0       	brcs	.+20     	; 0x79ba <set_dst+0x7a>
    79a6:	84 19       	sub	r24, r4
    79a8:	95 09       	sbc	r25, r5
    79aa:	a6 09       	sbc	r26, r6
    79ac:	b7 09       	sbc	r27, r7
    79ae:	80 38       	cpi	r24, 0x80	; 128
    79b0:	91 45       	sbci	r25, 0x51	; 81
    79b2:	a1 40       	sbci	r26, 0x01	; 1
    79b4:	b1 05       	cpc	r27, r1
    79b6:	70 f4       	brcc	.+28     	; 0x79d4 <set_dst+0x94>
    79b8:	42 c0       	rjmp	.+132    	; 0x7a3e <set_dst+0xfe>
    79ba:	a3 01       	movw	r20, r6
    79bc:	92 01       	movw	r18, r4
    79be:	28 1b       	sub	r18, r24
    79c0:	39 0b       	sbc	r19, r25
    79c2:	4a 0b       	sbc	r20, r26
    79c4:	5b 0b       	sbc	r21, r27
    79c6:	da 01       	movw	r26, r20
    79c8:	c9 01       	movw	r24, r18
    79ca:	80 38       	cpi	r24, 0x80	; 128
    79cc:	91 45       	sbci	r25, 0x51	; 81
    79ce:	a1 40       	sbci	r26, 0x01	; 1
    79d0:	b1 05       	cpc	r27, r1
    79d2:	a8 f1       	brcs	.+106    	; 0x7a3e <set_dst+0xfe>
    79d4:	40 92 72 1a 	sts	0x1A72, r4	; 0x801a72 <dst+0x8>
    79d8:	50 92 73 1a 	sts	0x1A73, r5	; 0x801a73 <dst+0x9>
    79dc:	60 92 74 1a 	sts	0x1A74, r6	; 0x801a74 <dst+0xa>
    79e0:	70 92 75 1a 	sts	0x1A75, r7	; 0x801a75 <dst+0xb>
    79e4:	82 e0       	ldi	r24, 0x02	; 2
    79e6:	a8 2e       	mov	r10, r24
    79e8:	b1 2c       	mov	r11, r1
    79ea:	c1 2c       	mov	r12, r1
    79ec:	d1 2c       	mov	r13, r1
    79ee:	92 e0       	ldi	r25, 0x02	; 2
    79f0:	e9 2e       	mov	r14, r25
    79f2:	f1 2c       	mov	r15, r1
    79f4:	03 e0       	ldi	r16, 0x03	; 3
    79f6:	10 e0       	ldi	r17, 0x00	; 0
    79f8:	20 e0       	ldi	r18, 0x00	; 0
    79fa:	30 e0       	ldi	r19, 0x00	; 0
    79fc:	b3 01       	movw	r22, r6
    79fe:	a2 01       	movw	r20, r4
    7a00:	80 e0       	ldi	r24, 0x00	; 0
    7a02:	90 e0       	ldi	r25, 0x00	; 0
    7a04:	17 df       	rcall	.-466    	; 0x7834 <find_dst>
    7a06:	60 93 6a 1a 	sts	0x1A6A, r22	; 0x801a6a <dst>
    7a0a:	70 93 6b 1a 	sts	0x1A6B, r23	; 0x801a6b <dst+0x1>
    7a0e:	80 93 6c 1a 	sts	0x1A6C, r24	; 0x801a6c <dst+0x2>
    7a12:	90 93 6d 1a 	sts	0x1A6D, r25	; 0x801a6d <dst+0x3>
    7a16:	ee 24       	eor	r14, r14
    7a18:	e3 94       	inc	r14
    7a1a:	f1 2c       	mov	r15, r1
    7a1c:	0b e0       	ldi	r16, 0x0B	; 11
    7a1e:	10 e0       	ldi	r17, 0x00	; 0
    7a20:	20 e0       	ldi	r18, 0x00	; 0
    7a22:	30 e0       	ldi	r19, 0x00	; 0
    7a24:	b3 01       	movw	r22, r6
    7a26:	a2 01       	movw	r20, r4
    7a28:	81 e0       	ldi	r24, 0x01	; 1
    7a2a:	90 e0       	ldi	r25, 0x00	; 0
    7a2c:	03 df       	rcall	.-506    	; 0x7834 <find_dst>
    7a2e:	60 93 6e 1a 	sts	0x1A6E, r22	; 0x801a6e <dst+0x4>
    7a32:	70 93 6f 1a 	sts	0x1A6F, r23	; 0x801a6f <dst+0x5>
    7a36:	80 93 70 1a 	sts	0x1A70, r24	; 0x801a70 <dst+0x6>
    7a3a:	90 93 71 1a 	sts	0x1A71, r25	; 0x801a71 <dst+0x7>
    7a3e:	2c 96       	adiw	r28, 0x0c	; 12
    7a40:	0f b6       	in	r0, 0x3f	; 63
    7a42:	f8 94       	cli
    7a44:	de bf       	out	0x3e, r29	; 62
    7a46:	0f be       	out	0x3f, r0	; 63
    7a48:	cd bf       	out	0x3d, r28	; 61
    7a4a:	df 91       	pop	r29
    7a4c:	cf 91       	pop	r28
    7a4e:	1f 91       	pop	r17
    7a50:	0f 91       	pop	r16
    7a52:	ff 90       	pop	r15
    7a54:	ef 90       	pop	r14
    7a56:	df 90       	pop	r13
    7a58:	cf 90       	pop	r12
    7a5a:	bf 90       	pop	r11
    7a5c:	af 90       	pop	r10
    7a5e:	7f 90       	pop	r7
    7a60:	6f 90       	pop	r6
    7a62:	5f 90       	pop	r5
    7a64:	4f 90       	pop	r4
    7a66:	08 95       	ret

00007a68 <asctime_r>:
    7a68:	a5 e1       	ldi	r26, 0x15	; 21
    7a6a:	b0 e0       	ldi	r27, 0x00	; 0
    7a6c:	ea e3       	ldi	r30, 0x3A	; 58
    7a6e:	fd e3       	ldi	r31, 0x3D	; 61
    7a70:	0c 94 a1 e7 	jmp	0x1cf42	; 0x1cf42 <__prologue_saves__+0x1c>
    7a74:	ec 01       	movw	r28, r24
    7a76:	8b 01       	movw	r16, r22
    7a78:	60 e0       	ldi	r22, 0x00	; 0
    7a7a:	70 e0       	ldi	r23, 0x00	; 0
    7a7c:	d1 db       	rcall	.-2142   	; 0x7220 <normalize>
    7a7e:	80 e2       	ldi	r24, 0x20	; 32
    7a80:	f8 01       	movw	r30, r16
    7a82:	11 92       	st	Z+, r1
    7a84:	8a 95       	dec	r24
    7a86:	e9 f7       	brne	.-6      	; 0x7a82 <asctime_r+0x1a>
    7a88:	8a 85       	ldd	r24, Y+10	; 0x0a
    7a8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    7a8c:	84 59       	subi	r24, 0x94	; 148
    7a8e:	98 4f       	sbci	r25, 0xF8	; 248
    7a90:	ed b7       	in	r30, 0x3d	; 61
    7a92:	fe b7       	in	r31, 0x3e	; 62
    7a94:	95 8b       	std	Z+21, r25	; 0x15
    7a96:	84 8b       	std	Z+20, r24	; 0x14
    7a98:	88 81       	ld	r24, Y
    7a9a:	99 81       	ldd	r25, Y+1	; 0x01
    7a9c:	93 8b       	std	Z+19, r25	; 0x13
    7a9e:	82 8b       	std	Z+18, r24	; 0x12
    7aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    7aa2:	9b 81       	ldd	r25, Y+3	; 0x03
    7aa4:	91 8b       	std	Z+17, r25	; 0x11
    7aa6:	80 8b       	std	Z+16, r24	; 0x10
    7aa8:	8c 81       	ldd	r24, Y+4	; 0x04
    7aaa:	9d 81       	ldd	r25, Y+5	; 0x05
    7aac:	97 87       	std	Z+15, r25	; 0x0f
    7aae:	86 87       	std	Z+14, r24	; 0x0e
    7ab0:	8e 81       	ldd	r24, Y+6	; 0x06
    7ab2:	9f 81       	ldd	r25, Y+7	; 0x07
    7ab4:	95 87       	std	Z+13, r25	; 0x0d
    7ab6:	84 87       	std	Z+12, r24	; 0x0c
    7ab8:	e8 85       	ldd	r30, Y+8	; 0x08
    7aba:	f9 85       	ldd	r31, Y+9	; 0x09
    7abc:	ee 0f       	add	r30, r30
    7abe:	ff 1f       	adc	r31, r31
    7ac0:	e5 5f       	subi	r30, 0xF5	; 245
    7ac2:	fe 4f       	sbci	r31, 0xFE	; 254
    7ac4:	80 81       	ld	r24, Z
    7ac6:	91 81       	ldd	r25, Z+1	; 0x01
    7ac8:	ed b7       	in	r30, 0x3d	; 61
    7aca:	fe b7       	in	r31, 0x3e	; 62
    7acc:	93 87       	std	Z+11, r25	; 0x0b
    7ace:	82 87       	std	Z+10, r24	; 0x0a
    7ad0:	ec 85       	ldd	r30, Y+12	; 0x0c
    7ad2:	fd 85       	ldd	r31, Y+13	; 0x0d
    7ad4:	ee 0f       	add	r30, r30
    7ad6:	ff 1f       	adc	r31, r31
    7ad8:	eb 5d       	subi	r30, 0xDB	; 219
    7ada:	fe 4f       	sbci	r31, 0xFE	; 254
    7adc:	80 81       	ld	r24, Z
    7ade:	91 81       	ldd	r25, Z+1	; 0x01
    7ae0:	ed b7       	in	r30, 0x3d	; 61
    7ae2:	fe b7       	in	r31, 0x3e	; 62
    7ae4:	91 87       	std	Z+9, r25	; 0x09
    7ae6:	80 87       	std	Z+8, r24	; 0x08
    7ae8:	8e e4       	ldi	r24, 0x4E	; 78
    7aea:	97 e0       	ldi	r25, 0x07	; 7
    7aec:	a0 e0       	ldi	r26, 0x00	; 0
    7aee:	85 83       	std	Z+5, r24	; 0x05
    7af0:	96 83       	std	Z+6, r25	; 0x06
    7af2:	a7 83       	std	Z+7, r26	; 0x07
    7af4:	80 e2       	ldi	r24, 0x20	; 32
    7af6:	90 e0       	ldi	r25, 0x00	; 0
    7af8:	94 83       	std	Z+4, r25	; 0x04
    7afa:	83 83       	std	Z+3, r24	; 0x03
    7afc:	12 83       	std	Z+2, r17	; 0x02
    7afe:	01 83       	std	Z+1, r16	; 0x01
    7b00:	0e 94 49 47 	call	0x8e92	; 0x8e92 <snprintf_P>
    7b04:	c8 01       	movw	r24, r16
    7b06:	cd b7       	in	r28, 0x3d	; 61
    7b08:	de b7       	in	r29, 0x3e	; 62
    7b0a:	65 96       	adiw	r28, 0x15	; 21
    7b0c:	e4 e0       	ldi	r30, 0x04	; 4
    7b0e:	0c 94 bd e7 	jmp	0x1cf7a	; 0x1cf7a <__epilogue_restores__+0x1c>

00007b12 <asctime>:
    7b12:	64 ef       	ldi	r22, 0xF4	; 244
    7b14:	77 e1       	ldi	r23, 0x17	; 23
    7b16:	a8 cf       	rjmp	.-176    	; 0x7a68 <asctime_r>
    7b18:	08 95       	ret

00007b1a <ctime_gm>:
    7b1a:	a6 e1       	ldi	r26, 0x16	; 22
    7b1c:	b0 e0       	ldi	r27, 0x00	; 0
    7b1e:	e3 e9       	ldi	r30, 0x93	; 147
    7b20:	fd e3       	ldi	r31, 0x3D	; 61
    7b22:	0c 94 a3 e7 	jmp	0x1cf46	; 0x1cf46 <__prologue_saves__+0x20>
    7b26:	be 01       	movw	r22, r28
    7b28:	6f 5f       	subi	r22, 0xFF	; 255
    7b2a:	7f 4f       	sbci	r23, 0xFF	; 255
    7b2c:	6d da       	rcall	.-2854   	; 0x7008 <gmtime_r>
    7b2e:	64 ed       	ldi	r22, 0xD4	; 212
    7b30:	77 e1       	ldi	r23, 0x17	; 23
    7b32:	9a df       	rcall	.-204    	; 0x7a68 <asctime_r>
    7b34:	66 96       	adiw	r28, 0x16	; 22
    7b36:	e2 e0       	ldi	r30, 0x02	; 2
    7b38:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00007b3c <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7b3c:	a5 e2       	ldi	r26, 0x25	; 37
    7b3e:	b0 e0       	ldi	r27, 0x00	; 0
    7b40:	e4 ea       	ldi	r30, 0xA4	; 164
    7b42:	fd e3       	ldi	r31, 0x3D	; 61
    7b44:	0c 94 9d e7 	jmp	0x1cf3a	; 0x1cf3a <__prologue_saves__+0x14>
    7b48:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7b4a:	40 e0       	ldi	r20, 0x00	; 0
    7b4c:	50 e0       	ldi	r21, 0x00	; 0
    7b4e:	ba 01       	movw	r22, r20
    7b50:	80 e0       	ldi	r24, 0x00	; 0
    7b52:	90 e0       	ldi	r25, 0x00	; 0
    7b54:	0e 94 58 31 	call	0x62b0	; 0x62b0 <rtc_init>
    7b58:	81 11       	cpse	r24, r1
    7b5a:	27 c0       	rjmp	.+78     	; 0x7baa <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7b5c:	8d ea       	ldi	r24, 0xAD	; 173
    7b5e:	96 e0       	ldi	r25, 0x06	; 6
    7b60:	a0 e0       	ldi	r26, 0x00	; 0
    7b62:	ed b7       	in	r30, 0x3d	; 61
    7b64:	fe b7       	in	r31, 0x3e	; 62
    7b66:	81 83       	std	Z+1, r24	; 0x01
    7b68:	92 83       	std	Z+2, r25	; 0x02
    7b6a:	a3 83       	std	Z+3, r26	; 0x03
    7b6c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        printf("attempting rtc init\n");
    7b70:	88 e9       	ldi	r24, 0x98	; 152
    7b72:	96 e0       	ldi	r25, 0x06	; 6
    7b74:	a0 e0       	ldi	r26, 0x00	; 0
    7b76:	ed b7       	in	r30, 0x3d	; 61
    7b78:	fe b7       	in	r31, 0x3e	; 62
    7b7a:	81 83       	std	Z+1, r24	; 0x01
    7b7c:	92 83       	std	Z+2, r25	; 0x02
    7b7e:	a3 83       	std	Z+3, r26	; 0x03
    7b80:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7b84:	40 e0       	ldi	r20, 0x00	; 0
    7b86:	50 e0       	ldi	r21, 0x00	; 0
    7b88:	ba 01       	movw	r22, r20
    7b8a:	81 e0       	ldi	r24, 0x01	; 1
    7b8c:	90 e0       	ldi	r25, 0x00	; 0
    7b8e:	0e 94 58 31 	call	0x62b0	; 0x62b0 <rtc_init>
    7b92:	81 11       	cpse	r24, r1
    7b94:	0a c0       	rjmp	.+20     	; 0x7baa <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7b96:	81 e8       	ldi	r24, 0x81	; 129
    7b98:	96 e0       	ldi	r25, 0x06	; 6
    7b9a:	a0 e0       	ldi	r26, 0x00	; 0
    7b9c:	ed b7       	in	r30, 0x3d	; 61
    7b9e:	fe b7       	in	r31, 0x3e	; 62
    7ba0:	81 83       	std	Z+1, r24	; 0x01
    7ba2:	92 83       	std	Z+2, r25	; 0x02
    7ba4:	a3 83       	std	Z+3, r26	; 0x03
    7ba6:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        }
    }

    if(rtc_read(&tc))
    7baa:	ce 01       	movw	r24, r28
    7bac:	04 96       	adiw	r24, 0x04	; 4
    7bae:	0e 94 be 30 	call	0x617c	; 0x617c <rtc_read>
    7bb2:	88 23       	and	r24, r24
    7bb4:	51 f0       	breq	.+20     	; 0x7bca <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7bb6:	ce 01       	movw	r24, r28
    7bb8:	04 96       	adiw	r24, 0x04	; 4
    7bba:	fa dc       	rcall	.-1548   	; 0x75b0 <timegm>
    7bbc:	6b 01       	movw	r12, r22
    7bbe:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
    7bc0:	67 2b       	or	r22, r23
    7bc2:	68 2b       	or	r22, r24
    7bc4:	69 2b       	or	r22, r25
    7bc6:	c1 f4       	brne	.+48     	; 0x7bf8 <initialize_clock+0xbc>
    7bc8:	0a c0       	rjmp	.+20     	; 0x7bde <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7bca:	87 e6       	ldi	r24, 0x67	; 103
    7bcc:	96 e0       	ldi	r25, 0x06	; 6
    7bce:	a0 e0       	ldi	r26, 0x00	; 0
    7bd0:	ed b7       	in	r30, 0x3d	; 61
    7bd2:	fe b7       	in	r31, 0x3e	; 62
    7bd4:	81 83       	std	Z+1, r24	; 0x01
    7bd6:	92 83       	std	Z+2, r25	; 0x02
    7bd8:	a3 83       	std	Z+3, r26	; 0x03
    7bda:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7bde:	83 e4       	ldi	r24, 0x43	; 67
    7be0:	96 e0       	ldi	r25, 0x06	; 6
    7be2:	a0 e0       	ldi	r26, 0x00	; 0
    7be4:	ed b7       	in	r30, 0x3d	; 61
    7be6:	fe b7       	in	r31, 0x3e	; 62
    7be8:	81 83       	std	Z+1, r24	; 0x01
    7bea:	92 83       	std	Z+2, r25	; 0x02
    7bec:	a3 83       	std	Z+3, r26	; 0x03
    7bee:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    7bf2:	c1 2c       	mov	r12, r1
    7bf4:	d1 2c       	mov	r13, r1
    7bf6:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7bf8:	1b a3       	std	Y+35, r17	; 0x23
    7bfa:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    7bfc:	1d a2       	std	Y+37, r1	; 0x25
    7bfe:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    7c00:	ce 01       	movw	r24, r28
    7c02:	82 96       	adiw	r24, 0x22	; 34
    7c04:	30 da       	rcall	.-2976   	; 0x7066 <settimezone>

    ts.tv_sec = seconds;
    7c06:	ca 8e       	std	Y+26, r12	; 0x1a
    7c08:	db 8e       	std	Y+27, r13	; 0x1b
    7c0a:	ec 8e       	std	Y+28, r14	; 0x1c
    7c0c:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    7c0e:	1e 8e       	std	Y+30, r1	; 0x1e
    7c10:	1f 8e       	std	Y+31, r1	; 0x1f
    7c12:	18 a2       	std	Y+32, r1	; 0x20
    7c14:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    7c16:	be 01       	movw	r22, r28
    7c18:	66 5e       	subi	r22, 0xE6	; 230
    7c1a:	7f 4f       	sbci	r23, 0xFF	; 255
    7c1c:	80 e0       	ldi	r24, 0x00	; 0
    7c1e:	90 e0       	ldi	r25, 0x00	; 0
    7c20:	c7 d8       	rcall	.-3698   	; 0x6db0 <clock_settime>
}
    7c22:	a5 96       	adiw	r28, 0x25	; 37
    7c24:	e8 e0       	ldi	r30, 0x08	; 8
    7c26:	0c 94 b9 e7 	jmp	0x1cf72	; 0x1cf72 <__epilogue_restores__+0x14>

00007c2a <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7c2a:	a9 e2       	ldi	r26, 0x29	; 41
    7c2c:	b0 e0       	ldi	r27, 0x00	; 0
    7c2e:	eb e1       	ldi	r30, 0x1B	; 27
    7c30:	fe e3       	ldi	r31, 0x3E	; 62
    7c32:	0c 94 a3 e7 	jmp	0x1cf46	; 0x1cf46 <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7c36:	ce 01       	movw	r24, r28
    7c38:	08 96       	adiw	r24, 0x08	; 8
    7c3a:	0e 94 be 30 	call	0x617c	; 0x617c <rtc_read>
    7c3e:	88 23       	and	r24, r24
    7c40:	29 f1       	breq	.+74     	; 0x7c8c <display_clock+0x62>
    {
        seconds = timegm(&tc);
    7c42:	ce 01       	movw	r24, r28
    7c44:	08 96       	adiw	r24, 0x08	; 8
    7c46:	b4 dc       	rcall	.-1688   	; 0x75b0 <timegm>
    7c48:	6e a3       	std	Y+38, r22	; 0x26
    7c4a:	7f a3       	std	Y+39, r23	; 0x27
    7c4c:	88 a7       	std	Y+40, r24	; 0x28
    7c4e:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    7c50:	ed b7       	in	r30, 0x3d	; 61
    7c52:	fe b7       	in	r31, 0x3e	; 62
    7c54:	64 83       	std	Z+4, r22	; 0x04
    7c56:	75 83       	std	Z+5, r23	; 0x05
    7c58:	86 83       	std	Z+6, r24	; 0x06
    7c5a:	97 83       	std	Z+7, r25	; 0x07
    7c5c:	81 e3       	ldi	r24, 0x31	; 49
    7c5e:	96 e0       	ldi	r25, 0x06	; 6
    7c60:	a0 e0       	ldi	r26, 0x00	; 0
    7c62:	81 83       	std	Z+1, r24	; 0x01
    7c64:	92 83       	std	Z+2, r25	; 0x02
    7c66:	a3 83       	std	Z+3, r26	; 0x03
    7c68:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7c6c:	ce 01       	movw	r24, r28
    7c6e:	08 96       	adiw	r24, 0x08	; 8
    7c70:	50 df       	rcall	.-352    	; 0x7b12 <asctime>
    7c72:	ed b7       	in	r30, 0x3d	; 61
    7c74:	fe b7       	in	r31, 0x3e	; 62
    7c76:	95 83       	std	Z+5, r25	; 0x05
    7c78:	84 83       	std	Z+4, r24	; 0x04
    7c7a:	80 e2       	ldi	r24, 0x20	; 32
    7c7c:	96 e0       	ldi	r25, 0x06	; 6
    7c7e:	a0 e0       	ldi	r26, 0x00	; 0
    7c80:	81 83       	std	Z+1, r24	; 0x01
    7c82:	92 83       	std	Z+2, r25	; 0x02
    7c84:	a3 83       	std	Z+3, r26	; 0x03
    7c86:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    7c8a:	0a c0       	rjmp	.+20     	; 0x7ca0 <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7c8c:	8f e0       	ldi	r24, 0x0F	; 15
    7c8e:	96 e0       	ldi	r25, 0x06	; 6
    7c90:	a0 e0       	ldi	r26, 0x00	; 0
    7c92:	ed b7       	in	r30, 0x3d	; 61
    7c94:	fe b7       	in	r31, 0x3e	; 62
    7c96:	81 83       	std	Z+1, r24	; 0x01
    7c98:	92 83       	std	Z+2, r25	; 0x02
    7c9a:	a3 83       	std	Z+3, r26	; 0x03
    7c9c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    }
#endif                                        // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7ca0:	be 01       	movw	r22, r28
    7ca2:	62 5e       	subi	r22, 0xE2	; 226
    7ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    7ca6:	80 e0       	ldi	r24, 0x00	; 0
    7ca8:	90 e0       	ldi	r25, 0x00	; 0
    7caa:	0e 94 2f 34 	call	0x685e	; 0x685e <clock_gettime>
    seconds = ts.tv_sec;
    7cae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7cb0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7cb2:	a8 a1       	ldd	r26, Y+32	; 0x20
    7cb4:	b9 a1       	ldd	r27, Y+33	; 0x21
    7cb6:	8e a3       	std	Y+38, r24	; 0x26
    7cb8:	9f a3       	std	Y+39, r25	; 0x27
    7cba:	a8 a7       	std	Y+40, r26	; 0x28
    7cbc:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    7cbe:	ed b7       	in	r30, 0x3d	; 61
    7cc0:	fe b7       	in	r31, 0x3e	; 62
    7cc2:	84 83       	std	Z+4, r24	; 0x04
    7cc4:	95 83       	std	Z+5, r25	; 0x05
    7cc6:	a6 83       	std	Z+6, r26	; 0x06
    7cc8:	b7 83       	std	Z+7, r27	; 0x07
    7cca:	8d ef       	ldi	r24, 0xFD	; 253
    7ccc:	95 e0       	ldi	r25, 0x05	; 5
    7cce:	a0 e0       	ldi	r26, 0x00	; 0
    7cd0:	81 83       	std	Z+1, r24	; 0x01
    7cd2:	92 83       	std	Z+2, r25	; 0x02
    7cd4:	a3 83       	std	Z+3, r26	; 0x03
    7cd6:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7cda:	ce 01       	movw	r24, r28
    7cdc:	86 96       	adiw	r24, 0x26	; 38
    7cde:	a9 d9       	rcall	.-3246   	; 0x7032 <gmtime>
    7ce0:	18 df       	rcall	.-464    	; 0x7b12 <asctime>
    7ce2:	ed b7       	in	r30, 0x3d	; 61
    7ce4:	fe b7       	in	r31, 0x3e	; 62
    7ce6:	95 83       	std	Z+5, r25	; 0x05
    7ce8:	84 83       	std	Z+4, r24	; 0x04
    7cea:	8c ee       	ldi	r24, 0xEC	; 236
    7cec:	95 e0       	ldi	r25, 0x05	; 5
    7cee:	a0 e0       	ldi	r26, 0x00	; 0
    7cf0:	81 83       	std	Z+1, r24	; 0x01
    7cf2:	92 83       	std	Z+2, r25	; 0x02
    7cf4:	a3 83       	std	Z+3, r26	; 0x03
    7cf6:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
}
    7cfa:	a9 96       	adiw	r28, 0x29	; 41
    7cfc:	e2 e0       	ldi	r30, 0x02	; 2
    7cfe:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00007d02 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7d02:	fc 01       	movw	r30, r24
    7d04:	84 81       	ldd	r24, Z+4	; 0x04
    7d06:	95 81       	ldd	r25, Z+5	; 0x05
    7d08:	00 97       	sbiw	r24, 0x00	; 0
    7d0a:	79 f0       	breq	.+30     	; 0x7d2a <_putc_buffer_fn+0x28>
    7d0c:	66 23       	and	r22, r22
    7d0e:	69 f0       	breq	.+26     	; 0x7d2a <_putc_buffer_fn+0x28>
    7d10:	01 97       	sbiw	r24, 0x01	; 1
    7d12:	95 83       	std	Z+5, r25	; 0x05
    7d14:	84 83       	std	Z+4, r24	; 0x04
    7d16:	86 81       	ldd	r24, Z+6	; 0x06
    7d18:	97 81       	ldd	r25, Z+7	; 0x07
    7d1a:	01 96       	adiw	r24, 0x01	; 1
    7d1c:	97 83       	std	Z+7, r25	; 0x07
    7d1e:	86 83       	std	Z+6, r24	; 0x06
    7d20:	a2 81       	ldd	r26, Z+2	; 0x02
    7d22:	b3 81       	ldd	r27, Z+3	; 0x03
    7d24:	6d 93       	st	X+, r22
    7d26:	b3 83       	std	Z+3, r27	; 0x03
    7d28:	a2 83       	std	Z+2, r26	; 0x02
    7d2a:	02 80       	ldd	r0, Z+2	; 0x02
    7d2c:	f3 81       	ldd	r31, Z+3	; 0x03
    7d2e:	e0 2d       	mov	r30, r0
    7d30:	10 82       	st	Z, r1
    7d32:	08 95       	ret

00007d34 <_putc_fn>:
    7d34:	fc 01       	movw	r30, r24
    7d36:	26 81       	ldd	r18, Z+6	; 0x06
    7d38:	37 81       	ldd	r19, Z+7	; 0x07
    7d3a:	2f 5f       	subi	r18, 0xFF	; 255
    7d3c:	3f 4f       	sbci	r19, 0xFF	; 255
    7d3e:	37 83       	std	Z+7, r19	; 0x07
    7d40:	26 83       	std	Z+6, r18	; 0x06
    7d42:	86 2f       	mov	r24, r22
    7d44:	90 e0       	ldi	r25, 0x00	; 0
    7d46:	0c 94 db 76 	jmp	0xedb6	; 0xedb6 <putchar>
    7d4a:	08 95       	ret

00007d4c <bin2num>:
    7d4c:	a0 e0       	ldi	r26, 0x00	; 0
    7d4e:	b0 e0       	ldi	r27, 0x00	; 0
    7d50:	ec ea       	ldi	r30, 0xAC	; 172
    7d52:	fe e3       	ldi	r31, 0x3E	; 62
    7d54:	0c 94 9a e7 	jmp	0x1cf34	; 0x1cf34 <__prologue_saves__+0xe>
    7d58:	ea 01       	movw	r28, r20
    7d5a:	53 e0       	ldi	r21, 0x03	; 3
    7d5c:	ee 0c       	add	r14, r14
    7d5e:	ff 1c       	adc	r15, r15
    7d60:	5a 95       	dec	r21
    7d62:	e1 f7       	brne	.-8      	; 0x7d5c <bin2num+0x10>
    7d64:	fc 01       	movw	r30, r24
    7d66:	af 01       	movw	r20, r30
    7d68:	48 1b       	sub	r20, r24
    7d6a:	59 0b       	sbc	r21, r25
    7d6c:	c4 17       	cp	r28, r20
    7d6e:	d5 07       	cpc	r29, r21
    7d70:	14 f0       	brlt	.+4      	; 0x7d76 <bin2num+0x2a>
    7d72:	11 92       	st	Z+, r1
    7d74:	f8 cf       	rjmp	.-16     	; 0x7d66 <bin2num+0x1a>
    7d76:	41 e0       	ldi	r20, 0x01	; 1
    7d78:	e4 1a       	sub	r14, r20
    7d7a:	f1 08       	sbc	r15, r1
    7d7c:	5b 01       	movw	r10, r22
    7d7e:	42 e0       	ldi	r20, 0x02	; 2
    7d80:	a4 1a       	sub	r10, r20
    7d82:	b1 08       	sbc	r11, r1
    7d84:	f7 fc       	sbrc	r15, 7
    7d86:	3b c0       	rjmp	.+118    	; 0x7dfe <bin2num+0xb2>
    7d88:	f7 01       	movw	r30, r14
    7d8a:	43 e0       	ldi	r20, 0x03	; 3
    7d8c:	f5 95       	asr	r31
    7d8e:	e7 95       	ror	r30
    7d90:	4a 95       	dec	r20
    7d92:	e1 f7       	brne	.-8      	; 0x7d8c <bin2num+0x40>
    7d94:	e0 0f       	add	r30, r16
    7d96:	f1 1f       	adc	r31, r17
    7d98:	40 81       	ld	r20, Z
    7d9a:	50 e0       	ldi	r21, 0x00	; 0
    7d9c:	f7 01       	movw	r30, r14
    7d9e:	e7 70       	andi	r30, 0x07	; 7
    7da0:	ff 27       	eor	r31, r31
    7da2:	02 c0       	rjmp	.+4      	; 0x7da8 <bin2num+0x5c>
    7da4:	55 95       	asr	r21
    7da6:	47 95       	ror	r20
    7da8:	ea 95       	dec	r30
    7daa:	e2 f7       	brpl	.-8      	; 0x7da4 <bin2num+0x58>
    7dac:	41 70       	andi	r20, 0x01	; 1
    7dae:	55 27       	eor	r21, r21
    7db0:	dc 01       	movw	r26, r24
    7db2:	e0 e0       	ldi	r30, 0x00	; 0
    7db4:	f0 e0       	ldi	r31, 0x00	; 0
    7db6:	ec 17       	cp	r30, r28
    7db8:	fd 07       	cpc	r31, r29
    7dba:	ec f4       	brge	.+58     	; 0x7df6 <bin2num+0xaa>
    7dbc:	ea 15       	cp	r30, r10
    7dbe:	fb 05       	cpc	r31, r11
    7dc0:	4c f0       	brlt	.+18     	; 0x7dd4 <bin2num+0x88>
    7dc2:	dc 01       	movw	r26, r24
    7dc4:	ae 0f       	add	r26, r30
    7dc6:	bf 1f       	adc	r27, r31
    7dc8:	1c 92       	st	X, r1
    7dca:	41 e0       	ldi	r20, 0x01	; 1
    7dcc:	e4 1a       	sub	r14, r20
    7dce:	f1 08       	sbc	r15, r1
    7dd0:	ef 01       	movw	r28, r30
    7dd2:	d8 cf       	rjmp	.-80     	; 0x7d84 <bin2num+0x38>
    7dd4:	9c 90       	ld	r9, X
    7dd6:	99 0c       	add	r9, r9
    7dd8:	94 2a       	or	r9, r20
    7dda:	49 2d       	mov	r20, r9
    7ddc:	50 e0       	ldi	r21, 0x00	; 0
    7dde:	42 17       	cp	r20, r18
    7de0:	53 07       	cpc	r21, r19
    7de2:	24 f0       	brlt	.+8      	; 0x7dec <bin2num+0xa0>
    7de4:	92 1a       	sub	r9, r18
    7de6:	41 e0       	ldi	r20, 0x01	; 1
    7de8:	50 e0       	ldi	r21, 0x00	; 0
    7dea:	02 c0       	rjmp	.+4      	; 0x7df0 <bin2num+0xa4>
    7dec:	40 e0       	ldi	r20, 0x00	; 0
    7dee:	50 e0       	ldi	r21, 0x00	; 0
    7df0:	9d 92       	st	X+, r9
    7df2:	31 96       	adiw	r30, 0x01	; 1
    7df4:	e0 cf       	rjmp	.-64     	; 0x7db6 <bin2num+0x6a>
    7df6:	41 15       	cp	r20, r1
    7df8:	51 05       	cpc	r21, r1
    7dfa:	01 f7       	brne	.-64     	; 0x7dbc <bin2num+0x70>
    7dfc:	e2 cf       	rjmp	.-60     	; 0x7dc2 <bin2num+0x76>
    7dfe:	fc 01       	movw	r30, r24
    7e00:	9f 01       	movw	r18, r30
    7e02:	28 1b       	sub	r18, r24
    7e04:	39 0b       	sbc	r19, r25
    7e06:	2c 17       	cp	r18, r28
    7e08:	3d 07       	cpc	r19, r29
    7e0a:	4c f4       	brge	.+18     	; 0x7e1e <bin2num+0xd2>
    7e0c:	20 81       	ld	r18, Z
    7e0e:	2a 30       	cpi	r18, 0x0A	; 10
    7e10:	10 f4       	brcc	.+4      	; 0x7e16 <bin2num+0xca>
    7e12:	20 5d       	subi	r18, 0xD0	; 208
    7e14:	01 c0       	rjmp	.+2      	; 0x7e18 <bin2num+0xcc>
    7e16:	29 5a       	subi	r18, 0xA9	; 169
    7e18:	20 83       	st	Z, r18
    7e1a:	31 96       	adiw	r30, 0x01	; 1
    7e1c:	f1 cf       	rjmp	.-30     	; 0x7e00 <bin2num+0xb4>
    7e1e:	9e 01       	movw	r18, r28
    7e20:	d7 ff       	sbrs	r29, 7
    7e22:	02 c0       	rjmp	.+4      	; 0x7e28 <bin2num+0xdc>
    7e24:	20 e0       	ldi	r18, 0x00	; 0
    7e26:	30 e0       	ldi	r19, 0x00	; 0
    7e28:	c1 14       	cp	r12, r1
    7e2a:	d1 04       	cpc	r13, r1
    7e2c:	61 f0       	breq	.+24     	; 0x7e46 <bin2num+0xfa>
    7e2e:	61 50       	subi	r22, 0x01	; 1
    7e30:	71 09       	sbc	r23, r1
    7e32:	26 17       	cp	r18, r22
    7e34:	37 07       	cpc	r19, r23
    7e36:	3c f4       	brge	.+14     	; 0x7e46 <bin2num+0xfa>
    7e38:	fc 01       	movw	r30, r24
    7e3a:	e2 0f       	add	r30, r18
    7e3c:	f3 1f       	adc	r31, r19
    7e3e:	c0 82       	st	Z, r12
    7e40:	21 96       	adiw	r28, 0x01	; 1
    7e42:	2f 5f       	subi	r18, 0xFF	; 255
    7e44:	3f 4f       	sbci	r19, 0xFF	; 255
    7e46:	fc 01       	movw	r30, r24
    7e48:	e2 0f       	add	r30, r18
    7e4a:	f3 1f       	adc	r31, r19
    7e4c:	10 82       	st	Z, r1
    7e4e:	0e 94 e6 31 	call	0x63cc	; 0x63cc <reverse>
    7e52:	ce 01       	movw	r24, r28
    7e54:	cd b7       	in	r28, 0x3d	; 61
    7e56:	de b7       	in	r29, 0x3e	; 62
    7e58:	eb e0       	ldi	r30, 0x0B	; 11
    7e5a:	0c 94 b6 e7 	jmp	0x1cf6c	; 0x1cf6c <__epilogue_restores__+0xe>

00007e5e <pch>:
    7e5e:	fc 01       	movw	r30, r24
    7e60:	22 81       	ldd	r18, Z+2	; 0x02
    7e62:	33 81       	ldd	r19, Z+3	; 0x03
    7e64:	44 81       	ldd	r20, Z+4	; 0x04
    7e66:	55 81       	ldd	r21, Z+5	; 0x05
    7e68:	80 81       	ld	r24, Z
    7e6a:	91 81       	ldd	r25, Z+1	; 0x01
    7e6c:	24 17       	cp	r18, r20
    7e6e:	35 07       	cpc	r19, r21
    7e70:	54 f4       	brge	.+20     	; 0x7e86 <pch+0x28>
    7e72:	a9 01       	movw	r20, r18
    7e74:	4f 5f       	subi	r20, 0xFF	; 255
    7e76:	5f 4f       	sbci	r21, 0xFF	; 255
    7e78:	53 83       	std	Z+3, r21	; 0x03
    7e7a:	42 83       	std	Z+2, r20	; 0x02
    7e7c:	dc 01       	movw	r26, r24
    7e7e:	a2 0f       	add	r26, r18
    7e80:	b3 1f       	adc	r27, r19
    7e82:	6c 93       	st	X, r22
    7e84:	04 c0       	rjmp	.+8      	; 0x7e8e <pch+0x30>
    7e86:	dc 01       	movw	r26, r24
    7e88:	a2 0f       	add	r26, r18
    7e8a:	b3 1f       	adc	r27, r19
    7e8c:	1c 92       	st	X, r1
    7e8e:	82 81       	ldd	r24, Z+2	; 0x02
    7e90:	93 81       	ldd	r25, Z+3	; 0x03
    7e92:	08 95       	ret

00007e94 <p_ntoa>:
    7e94:	af 92       	push	r10
    7e96:	cf 92       	push	r12
    7e98:	df 92       	push	r13
    7e9a:	ef 92       	push	r14
    7e9c:	ff 92       	push	r15
    7e9e:	0f 93       	push	r16
    7ea0:	1f 93       	push	r17
    7ea2:	cf 93       	push	r28
    7ea4:	df 93       	push	r29
    7ea6:	dc 01       	movw	r26, r24
    7ea8:	eb 01       	movw	r28, r22
    7eaa:	fa 01       	movw	r30, r20
    7eac:	b9 01       	movw	r22, r18
    7eae:	98 01       	movw	r18, r16
    7eb0:	a6 01       	movw	r20, r12
    7eb2:	9a 2d       	mov	r25, r10
    7eb4:	a5 fa       	bst	r10, 5
    7eb6:	cc 24       	eor	r12, r12
    7eb8:	c0 f8       	bld	r12, 0
    7eba:	a6 fc       	sbrc	r10, 6
    7ebc:	07 c0       	rjmp	.+14     	; 0x7ecc <p_ntoa+0x38>
    7ebe:	a2 fc       	sbrc	r10, 2
    7ec0:	08 c0       	rjmp	.+16     	; 0x7ed2 <p_ntoa+0x3e>
    7ec2:	a4 fe       	sbrs	r10, 4
    7ec4:	09 c0       	rjmp	.+18     	; 0x7ed8 <p_ntoa+0x44>
    7ec6:	00 e2       	ldi	r16, 0x20	; 32
    7ec8:	10 e0       	ldi	r17, 0x00	; 0
    7eca:	08 c0       	rjmp	.+16     	; 0x7edc <p_ntoa+0x48>
    7ecc:	0d e2       	ldi	r16, 0x2D	; 45
    7ece:	10 e0       	ldi	r17, 0x00	; 0
    7ed0:	05 c0       	rjmp	.+10     	; 0x7edc <p_ntoa+0x48>
    7ed2:	0b e2       	ldi	r16, 0x2B	; 43
    7ed4:	10 e0       	ldi	r17, 0x00	; 0
    7ed6:	02 c0       	rjmp	.+4      	; 0x7edc <p_ntoa+0x48>
    7ed8:	00 e0       	ldi	r16, 0x00	; 0
    7eda:	10 e0       	ldi	r17, 0x00	; 0
    7edc:	95 ff       	sbrs	r25, 5
    7ede:	04 c0       	rjmp	.+8      	; 0x7ee8 <p_ntoa+0x54>
    7ee0:	89 2f       	mov	r24, r25
    7ee2:	8a 70       	andi	r24, 0x0A	; 10
    7ee4:	09 f0       	breq	.+2      	; 0x7ee8 <p_ntoa+0x54>
    7ee6:	c1 2c       	mov	r12, r1
    7ee8:	c0 fa       	bst	r12, 0
    7eea:	95 f9       	bld	r25, 5
    7eec:	89 2f       	mov	r24, r25
    7eee:	82 70       	andi	r24, 0x02	; 2
    7ef0:	c8 2e       	mov	r12, r24
    7ef2:	91 fd       	sbrc	r25, 1
    7ef4:	02 c0       	rjmp	.+4      	; 0x7efa <p_ntoa+0x66>
    7ef6:	40 e0       	ldi	r20, 0x00	; 0
    7ef8:	50 e0       	ldi	r21, 0x00	; 0
    7efa:	89 2f       	mov	r24, r25
    7efc:	83 70       	andi	r24, 0x03	; 3
    7efe:	11 f4       	brne	.+4      	; 0x7f04 <p_ntoa+0x70>
    7f00:	41 e0       	ldi	r20, 0x01	; 1
    7f02:	50 e0       	ldi	r21, 0x00	; 0
    7f04:	90 ff       	sbrs	r25, 0
    7f06:	0c c0       	rjmp	.+24     	; 0x7f20 <p_ntoa+0x8c>
    7f08:	95 fd       	sbrc	r25, 5
    7f0a:	05 c0       	rjmp	.+10     	; 0x7f16 <p_ntoa+0x82>
    7f0c:	c1 10       	cpse	r12, r1
    7f0e:	08 c0       	rjmp	.+16     	; 0x7f20 <p_ntoa+0x8c>
    7f10:	41 e0       	ldi	r20, 0x01	; 1
    7f12:	50 e0       	ldi	r21, 0x00	; 0
    7f14:	05 c0       	rjmp	.+10     	; 0x7f20 <p_ntoa+0x8c>
    7f16:	94 75       	andi	r25, 0x54	; 84
    7f18:	a7 01       	movw	r20, r14
    7f1a:	11 f0       	breq	.+4      	; 0x7f20 <p_ntoa+0x8c>
    7f1c:	41 50       	subi	r20, 0x01	; 1
    7f1e:	51 09       	sbc	r21, r1
    7f20:	68 01       	movw	r12, r16
    7f22:	7e 01       	movw	r14, r28
    7f24:	8d 01       	movw	r16, r26
    7f26:	cf 01       	movw	r24, r30
    7f28:	11 df       	rcall	.-478    	; 0x7d4c <bin2num>
    7f2a:	df 91       	pop	r29
    7f2c:	cf 91       	pop	r28
    7f2e:	1f 91       	pop	r17
    7f30:	0f 91       	pop	r16
    7f32:	ff 90       	pop	r15
    7f34:	ef 90       	pop	r14
    7f36:	df 90       	pop	r13
    7f38:	cf 90       	pop	r12
    7f3a:	af 90       	pop	r10
    7f3c:	08 95       	ret

00007f3e <p_ftoa>:
    7f3e:	aa e0       	ldi	r26, 0x0A	; 10
    7f40:	b0 e0       	ldi	r27, 0x00	; 0
    7f42:	e5 ea       	ldi	r30, 0xA5	; 165
    7f44:	ff e3       	ldi	r31, 0x3F	; 63
    7f46:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
    7f4a:	4b 01       	movw	r8, r22
    7f4c:	5c 01       	movw	r10, r24
    7f4e:	1a 01       	movw	r2, r20
    7f50:	28 01       	movw	r4, r16
    7f52:	c6 fa       	bst	r12, 6
    7f54:	11 27       	eor	r17, r17
    7f56:	10 f9       	bld	r17, 0
    7f58:	5a 83       	std	Y+2, r21	; 0x02
    7f5a:	49 83       	std	Y+1, r20	; 0x01
    7f5c:	1c 82       	std	Y+4, r1	; 0x04
    7f5e:	1b 82       	std	Y+3, r1	; 0x03
    7f60:	21 50       	subi	r18, 0x01	; 1
    7f62:	31 09       	sbc	r19, r1
    7f64:	3e 83       	std	Y+6, r19	; 0x06
    7f66:	2d 83       	std	Y+5, r18	; 0x05
    7f68:	fa 01       	movw	r30, r20
    7f6a:	10 82       	st	Z, r1
    7f6c:	20 e0       	ldi	r18, 0x00	; 0
    7f6e:	30 e0       	ldi	r19, 0x00	; 0
    7f70:	a9 01       	movw	r20, r18
    7f72:	0e 94 51 e8 	call	0x1d0a2	; 0x1d0a2 <__cmpsf2>
    7f76:	87 ff       	sbrs	r24, 7
    7f78:	05 c0       	rjmp	.+10     	; 0x7f84 <p_ftoa+0x46>
    7f7a:	b7 fa       	bst	r11, 7
    7f7c:	b0 94       	com	r11
    7f7e:	b7 f8       	bld	r11, 7
    7f80:	b0 94       	com	r11
    7f82:	11 e0       	ldi	r17, 0x01	; 1
    7f84:	10 fb       	bst	r17, 0
    7f86:	c6 f8       	bld	r12, 6
    7f88:	c6 fe       	sbrs	r12, 6
    7f8a:	02 c0       	rjmp	.+4      	; 0x7f90 <p_ftoa+0x52>
    7f8c:	6d e2       	ldi	r22, 0x2D	; 45
    7f8e:	07 c0       	rjmp	.+14     	; 0x7f9e <p_ftoa+0x60>
    7f90:	c2 fe       	sbrs	r12, 2
    7f92:	02 c0       	rjmp	.+4      	; 0x7f98 <p_ftoa+0x5a>
    7f94:	6b e2       	ldi	r22, 0x2B	; 43
    7f96:	03 c0       	rjmp	.+6      	; 0x7f9e <p_ftoa+0x60>
    7f98:	c4 fe       	sbrs	r12, 4
    7f9a:	04 c0       	rjmp	.+8      	; 0x7fa4 <p_ftoa+0x66>
    7f9c:	60 e2       	ldi	r22, 0x20	; 32
    7f9e:	ce 01       	movw	r24, r28
    7fa0:	01 96       	adiw	r24, 0x01	; 1
    7fa2:	5d df       	rcall	.-326    	; 0x7e5e <pch>
    7fa4:	37 01       	movw	r6, r14
    7fa6:	f7 fe       	sbrs	r15, 7
    7fa8:	02 c0       	rjmp	.+4      	; 0x7fae <p_ftoa+0x70>
    7faa:	61 2c       	mov	r6, r1
    7fac:	71 2c       	mov	r7, r1
    7fae:	20 e0       	ldi	r18, 0x00	; 0
    7fb0:	30 e0       	ldi	r19, 0x00	; 0
    7fb2:	a9 01       	movw	r20, r18
    7fb4:	c5 01       	movw	r24, r10
    7fb6:	b4 01       	movw	r22, r8
    7fb8:	0e 94 51 e8 	call	0x1d0a2	; 0x1d0a2 <__cmpsf2>
    7fbc:	88 23       	and	r24, r24
    7fbe:	d1 f1       	breq	.+116    	; 0x8034 <p_ftoa+0xf6>
    7fc0:	c1 fe       	sbrs	r12, 1
    7fc2:	11 c0       	rjmp	.+34     	; 0x7fe6 <p_ftoa+0xa8>
    7fc4:	83 01       	movw	r16, r6
    7fc6:	60 e0       	ldi	r22, 0x00	; 0
    7fc8:	70 e0       	ldi	r23, 0x00	; 0
    7fca:	80 e0       	ldi	r24, 0x00	; 0
    7fcc:	9f e3       	ldi	r25, 0x3F	; 63
    7fce:	01 15       	cp	r16, r1
    7fd0:	11 05       	cpc	r17, r1
    7fd2:	69 f0       	breq	.+26     	; 0x7fee <p_ftoa+0xb0>
    7fd4:	20 e0       	ldi	r18, 0x00	; 0
    7fd6:	30 e0       	ldi	r19, 0x00	; 0
    7fd8:	40 e2       	ldi	r20, 0x20	; 32
    7fda:	51 e4       	ldi	r21, 0x41	; 65
    7fdc:	0e 94 55 e8 	call	0x1d0aa	; 0x1d0aa <__divsf3>
    7fe0:	01 50       	subi	r16, 0x01	; 1
    7fe2:	11 09       	sbc	r17, r1
    7fe4:	f4 cf       	rjmp	.-24     	; 0x7fce <p_ftoa+0x90>
    7fe6:	60 e0       	ldi	r22, 0x00	; 0
    7fe8:	70 e0       	ldi	r23, 0x00	; 0
    7fea:	80 e0       	ldi	r24, 0x00	; 0
    7fec:	9f e3       	ldi	r25, 0x3F	; 63
    7fee:	9b 01       	movw	r18, r22
    7ff0:	ac 01       	movw	r20, r24
    7ff2:	c5 01       	movw	r24, r10
    7ff4:	b4 01       	movw	r22, r8
    7ff6:	0e 94 ed e7 	call	0x1cfda	; 0x1cfda <__addsf3>
    7ffa:	4b 01       	movw	r8, r22
    7ffc:	5c 01       	movw	r10, r24
    7ffe:	ee 24       	eor	r14, r14
    8000:	e3 94       	inc	r14
    8002:	f1 2c       	mov	r15, r1
    8004:	20 e0       	ldi	r18, 0x00	; 0
    8006:	30 e0       	ldi	r19, 0x00	; 0
    8008:	40 e2       	ldi	r20, 0x20	; 32
    800a:	51 e4       	ldi	r21, 0x41	; 65
    800c:	c5 01       	movw	r24, r10
    800e:	b4 01       	movw	r22, r8
    8010:	0e 94 a0 e9 	call	0x1d340	; 0x1d340 <__gesf2>
    8014:	87 fd       	sbrc	r24, 7
    8016:	11 c0       	rjmp	.+34     	; 0x803a <p_ftoa+0xfc>
    8018:	ff ef       	ldi	r31, 0xFF	; 255
    801a:	ef 1a       	sub	r14, r31
    801c:	ff 0a       	sbc	r15, r31
    801e:	20 e0       	ldi	r18, 0x00	; 0
    8020:	30 e0       	ldi	r19, 0x00	; 0
    8022:	40 e2       	ldi	r20, 0x20	; 32
    8024:	51 e4       	ldi	r21, 0x41	; 65
    8026:	c5 01       	movw	r24, r10
    8028:	b4 01       	movw	r22, r8
    802a:	0e 94 55 e8 	call	0x1d0aa	; 0x1d0aa <__divsf3>
    802e:	4b 01       	movw	r8, r22
    8030:	5c 01       	movw	r10, r24
    8032:	e8 cf       	rjmp	.-48     	; 0x8004 <p_ftoa+0xc6>
    8034:	ee 24       	eor	r14, r14
    8036:	e3 94       	inc	r14
    8038:	f1 2c       	mov	r15, r1
    803a:	8c 2d       	mov	r24, r12
    803c:	88 72       	andi	r24, 0x28	; 40
    803e:	80 32       	cpi	r24, 0x20	; 32
    8040:	c1 f4       	brne	.+48     	; 0x8072 <p_ftoa+0x134>
    8042:	82 01       	movw	r16, r4
    8044:	0e 19       	sub	r16, r14
    8046:	1f 09       	sbc	r17, r15
    8048:	8b 81       	ldd	r24, Y+3	; 0x03
    804a:	9c 81       	ldd	r25, Y+4	; 0x04
    804c:	08 1b       	sub	r16, r24
    804e:	19 0b       	sbc	r17, r25
    8050:	c1 fe       	sbrs	r12, 1
    8052:	07 c0       	rjmp	.+14     	; 0x8062 <p_ftoa+0x124>
    8054:	61 14       	cp	r6, r1
    8056:	71 04       	cpc	r7, r1
    8058:	21 f0       	breq	.+8      	; 0x8062 <p_ftoa+0x124>
    805a:	06 19       	sub	r16, r6
    805c:	17 09       	sbc	r17, r7
    805e:	01 50       	subi	r16, 0x01	; 1
    8060:	11 09       	sbc	r17, r1
    8062:	10 16       	cp	r1, r16
    8064:	11 06       	cpc	r1, r17
    8066:	2c f4       	brge	.+10     	; 0x8072 <p_ftoa+0x134>
    8068:	60 e3       	ldi	r22, 0x30	; 48
    806a:	ce 01       	movw	r24, r28
    806c:	01 96       	adiw	r24, 0x01	; 1
    806e:	f7 de       	rcall	.-530    	; 0x7e5e <pch>
    8070:	f6 cf       	rjmp	.-20     	; 0x805e <p_ftoa+0x120>
    8072:	c5 01       	movw	r24, r10
    8074:	b4 01       	movw	r22, r8
    8076:	0e 94 bd e8 	call	0x1d17a	; 0x1d17a <__fixsfsi>
    807a:	6f 83       	std	Y+7, r22	; 0x07
    807c:	78 87       	std	Y+8, r23	; 0x08
    807e:	89 87       	std	Y+9, r24	; 0x09
    8080:	9a 87       	std	Y+10, r25	; 0x0a
    8082:	6f 81       	ldd	r22, Y+7	; 0x07
    8084:	60 5d       	subi	r22, 0xD0	; 208
    8086:	ce 01       	movw	r24, r28
    8088:	01 96       	adiw	r24, 0x01	; 1
    808a:	e9 de       	rcall	.-558    	; 0x7e5e <pch>
    808c:	2f 81       	ldd	r18, Y+7	; 0x07
    808e:	38 85       	ldd	r19, Y+8	; 0x08
    8090:	b9 01       	movw	r22, r18
    8092:	33 0f       	add	r19, r19
    8094:	88 0b       	sbc	r24, r24
    8096:	99 0b       	sbc	r25, r25
    8098:	0e 94 f0 e8 	call	0x1d1e0	; 0x1d1e0 <__floatsisf>
    809c:	9b 01       	movw	r18, r22
    809e:	ac 01       	movw	r20, r24
    80a0:	c5 01       	movw	r24, r10
    80a2:	b4 01       	movw	r22, r8
    80a4:	0e 94 ec e7 	call	0x1cfd8	; 0x1cfd8 <__subsf3>
    80a8:	31 e0       	ldi	r19, 0x01	; 1
    80aa:	e3 1a       	sub	r14, r19
    80ac:	f1 08       	sbc	r15, r1
    80ae:	20 e0       	ldi	r18, 0x00	; 0
    80b0:	30 e0       	ldi	r19, 0x00	; 0
    80b2:	40 e2       	ldi	r20, 0x20	; 32
    80b4:	51 e4       	ldi	r21, 0x41	; 65
    80b6:	0e 94 a4 e9 	call	0x1d348	; 0x1d348 <__mulsf3>
    80ba:	4b 01       	movw	r8, r22
    80bc:	5c 01       	movw	r10, r24
    80be:	e1 14       	cp	r14, r1
    80c0:	f1 04       	cpc	r15, r1
    80c2:	b9 f6       	brne	.-82     	; 0x8072 <p_ftoa+0x134>
    80c4:	c1 fc       	sbrc	r12, 1
    80c6:	10 c0       	rjmp	.+32     	; 0x80e8 <p_ftoa+0x1aa>
    80c8:	60 e0       	ldi	r22, 0x00	; 0
    80ca:	ce 01       	movw	r24, r28
    80cc:	01 96       	adiw	r24, 0x01	; 1
    80ce:	c7 de       	rcall	.-626    	; 0x7e5e <pch>
    80d0:	f1 01       	movw	r30, r2
    80d2:	01 90       	ld	r0, Z+
    80d4:	00 20       	and	r0, r0
    80d6:	e9 f7       	brne	.-6      	; 0x80d2 <p_ftoa+0x194>
    80d8:	31 97       	sbiw	r30, 0x01	; 1
    80da:	cf 01       	movw	r24, r30
    80dc:	82 19       	sub	r24, r2
    80de:	93 09       	sbc	r25, r3
    80e0:	2a 96       	adiw	r28, 0x0a	; 10
    80e2:	e2 e1       	ldi	r30, 0x12	; 18
    80e4:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>
    80e8:	61 14       	cp	r6, r1
    80ea:	71 04       	cpc	r7, r1
    80ec:	69 f3       	breq	.-38     	; 0x80c8 <p_ftoa+0x18a>
    80ee:	6e e2       	ldi	r22, 0x2E	; 46
    80f0:	ce 01       	movw	r24, r28
    80f2:	01 96       	adiw	r24, 0x01	; 1
    80f4:	b4 de       	rcall	.-664    	; 0x7e5e <pch>
    80f6:	c5 01       	movw	r24, r10
    80f8:	b4 01       	movw	r22, r8
    80fa:	0e 94 bd e8 	call	0x1d17a	; 0x1d17a <__fixsfsi>
    80fe:	6b 01       	movw	r12, r22
    8100:	7c 01       	movw	r14, r24
    8102:	07 2e       	mov	r0, r23
    8104:	00 0c       	add	r0, r0
    8106:	88 0b       	sbc	r24, r24
    8108:	99 0b       	sbc	r25, r25
    810a:	0e 94 f0 e8 	call	0x1d1e0	; 0x1d1e0 <__floatsisf>
    810e:	9b 01       	movw	r18, r22
    8110:	ac 01       	movw	r20, r24
    8112:	c5 01       	movw	r24, r10
    8114:	b4 01       	movw	r22, r8
    8116:	0e 94 ec e7 	call	0x1cfd8	; 0x1cfd8 <__subsf3>
    811a:	4b 01       	movw	r8, r22
    811c:	5c 01       	movw	r10, r24
    811e:	b6 01       	movw	r22, r12
    8120:	60 5d       	subi	r22, 0xD0	; 208
    8122:	7f 4f       	sbci	r23, 0xFF	; 255
    8124:	ce 01       	movw	r24, r28
    8126:	01 96       	adiw	r24, 0x01	; 1
    8128:	9a de       	rcall	.-716    	; 0x7e5e <pch>
    812a:	81 e0       	ldi	r24, 0x01	; 1
    812c:	68 1a       	sub	r6, r24
    812e:	71 08       	sbc	r7, r1
    8130:	20 e0       	ldi	r18, 0x00	; 0
    8132:	30 e0       	ldi	r19, 0x00	; 0
    8134:	40 e2       	ldi	r20, 0x20	; 32
    8136:	51 e4       	ldi	r21, 0x41	; 65
    8138:	c5 01       	movw	r24, r10
    813a:	b4 01       	movw	r22, r8
    813c:	0e 94 a4 e9 	call	0x1d348	; 0x1d348 <__mulsf3>
    8140:	4b 01       	movw	r8, r22
    8142:	5c 01       	movw	r10, r24
    8144:	61 14       	cp	r6, r1
    8146:	71 04       	cpc	r7, r1
    8148:	b1 f6       	brne	.-84     	; 0x80f6 <p_ftoa+0x1b8>
    814a:	be cf       	rjmp	.-132    	; 0x80c8 <p_ftoa+0x18a>

0000814c <p_etoa>:
    814c:	a3 e1       	ldi	r26, 0x13	; 19
    814e:	b0 e0       	ldi	r27, 0x00	; 0
    8150:	ec ea       	ldi	r30, 0xAC	; 172
    8152:	f0 e4       	ldi	r31, 0x40	; 64
    8154:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
    8158:	4b 01       	movw	r8, r22
    815a:	5c 01       	movw	r10, r24
    815c:	59 8b       	std	Y+17, r21	; 0x11
    815e:	48 8b       	std	Y+16, r20	; 0x10
    8160:	1b 8b       	std	Y+19, r17	; 0x13
    8162:	0a 8b       	std	Y+18, r16	; 0x12
    8164:	3c 2c       	mov	r3, r12
    8166:	c6 fa       	bst	r12, 6
    8168:	11 27       	eor	r17, r17
    816a:	10 f9       	bld	r17, 0
    816c:	59 87       	std	Y+9, r21	; 0x09
    816e:	48 87       	std	Y+8, r20	; 0x08
    8170:	1b 86       	std	Y+11, r1	; 0x0b
    8172:	1a 86       	std	Y+10, r1	; 0x0a
    8174:	21 50       	subi	r18, 0x01	; 1
    8176:	31 09       	sbc	r19, r1
    8178:	3d 87       	std	Y+13, r19	; 0x0d
    817a:	2c 87       	std	Y+12, r18	; 0x0c
    817c:	fa 01       	movw	r30, r20
    817e:	10 82       	st	Z, r1
    8180:	20 e0       	ldi	r18, 0x00	; 0
    8182:	30 e0       	ldi	r19, 0x00	; 0
    8184:	a9 01       	movw	r20, r18
    8186:	0e 94 51 e8 	call	0x1d0a2	; 0x1d0a2 <__cmpsf2>
    818a:	87 ff       	sbrs	r24, 7
    818c:	05 c0       	rjmp	.+10     	; 0x8198 <p_etoa+0x4c>
    818e:	b7 fa       	bst	r11, 7
    8190:	b0 94       	com	r11
    8192:	b7 f8       	bld	r11, 7
    8194:	b0 94       	com	r11
    8196:	11 e0       	ldi	r17, 0x01	; 1
    8198:	10 fb       	bst	r17, 0
    819a:	36 f8       	bld	r3, 6
    819c:	36 fe       	sbrs	r3, 6
    819e:	02 c0       	rjmp	.+4      	; 0x81a4 <p_etoa+0x58>
    81a0:	6d e2       	ldi	r22, 0x2D	; 45
    81a2:	07 c0       	rjmp	.+14     	; 0x81b2 <p_etoa+0x66>
    81a4:	32 fe       	sbrs	r3, 2
    81a6:	02 c0       	rjmp	.+4      	; 0x81ac <p_etoa+0x60>
    81a8:	6b e2       	ldi	r22, 0x2B	; 43
    81aa:	03 c0       	rjmp	.+6      	; 0x81b2 <p_etoa+0x66>
    81ac:	34 fe       	sbrs	r3, 4
    81ae:	04 c0       	rjmp	.+8      	; 0x81b8 <p_etoa+0x6c>
    81b0:	60 e2       	ldi	r22, 0x20	; 32
    81b2:	ce 01       	movw	r24, r28
    81b4:	08 96       	adiw	r24, 0x08	; 8
    81b6:	53 de       	rcall	.-858    	; 0x7e5e <pch>
    81b8:	37 01       	movw	r6, r14
    81ba:	f7 fe       	sbrs	r15, 7
    81bc:	02 c0       	rjmp	.+4      	; 0x81c2 <p_etoa+0x76>
    81be:	61 2c       	mov	r6, r1
    81c0:	71 2c       	mov	r7, r1
    81c2:	1f 86       	std	Y+15, r1	; 0x0f
    81c4:	1e 86       	std	Y+14, r1	; 0x0e
    81c6:	20 e0       	ldi	r18, 0x00	; 0
    81c8:	30 e0       	ldi	r19, 0x00	; 0
    81ca:	a9 01       	movw	r20, r18
    81cc:	c5 01       	movw	r24, r10
    81ce:	b4 01       	movw	r22, r8
    81d0:	0e 94 51 e8 	call	0x1d0a2	; 0x1d0a2 <__cmpsf2>
    81d4:	f3 2d       	mov	r31, r3
    81d6:	f2 70       	andi	r31, 0x02	; 2
    81d8:	2f 2e       	mov	r2, r31
    81da:	88 23       	and	r24, r24
    81dc:	09 f4       	brne	.+2      	; 0x81e0 <p_etoa+0x94>
    81de:	70 c0       	rjmp	.+224    	; 0x82c0 <p_etoa+0x174>
    81e0:	ff 23       	and	r31, r31
    81e2:	b1 f0       	breq	.+44     	; 0x8210 <p_etoa+0xc4>
    81e4:	83 01       	movw	r16, r6
    81e6:	c1 2c       	mov	r12, r1
    81e8:	d1 2c       	mov	r13, r1
    81ea:	e1 2c       	mov	r14, r1
    81ec:	2f e3       	ldi	r18, 0x3F	; 63
    81ee:	f2 2e       	mov	r15, r18
    81f0:	01 15       	cp	r16, r1
    81f2:	11 05       	cpc	r17, r1
    81f4:	91 f0       	breq	.+36     	; 0x821a <p_etoa+0xce>
    81f6:	20 e0       	ldi	r18, 0x00	; 0
    81f8:	30 e0       	ldi	r19, 0x00	; 0
    81fa:	40 e2       	ldi	r20, 0x20	; 32
    81fc:	51 e4       	ldi	r21, 0x41	; 65
    81fe:	c7 01       	movw	r24, r14
    8200:	b6 01       	movw	r22, r12
    8202:	0e 94 55 e8 	call	0x1d0aa	; 0x1d0aa <__divsf3>
    8206:	6b 01       	movw	r12, r22
    8208:	7c 01       	movw	r14, r24
    820a:	01 50       	subi	r16, 0x01	; 1
    820c:	11 09       	sbc	r17, r1
    820e:	f0 cf       	rjmp	.-32     	; 0x81f0 <p_etoa+0xa4>
    8210:	c1 2c       	mov	r12, r1
    8212:	d1 2c       	mov	r13, r1
    8214:	e1 2c       	mov	r14, r1
    8216:	9f e3       	ldi	r25, 0x3F	; 63
    8218:	f9 2e       	mov	r15, r25
    821a:	41 2c       	mov	r4, r1
    821c:	51 2c       	mov	r5, r1
    821e:	82 01       	movw	r16, r4
    8220:	01 50       	subi	r16, 0x01	; 1
    8222:	11 09       	sbc	r17, r1
    8224:	20 e0       	ldi	r18, 0x00	; 0
    8226:	30 e0       	ldi	r19, 0x00	; 0
    8228:	40 e8       	ldi	r20, 0x80	; 128
    822a:	5f e3       	ldi	r21, 0x3F	; 63
    822c:	c5 01       	movw	r24, r10
    822e:	b4 01       	movw	r22, r8
    8230:	0e 94 51 e8 	call	0x1d0a2	; 0x1d0a2 <__cmpsf2>
    8234:	87 ff       	sbrs	r24, 7
    8236:	0c c0       	rjmp	.+24     	; 0x8250 <p_etoa+0x104>
    8238:	20 e0       	ldi	r18, 0x00	; 0
    823a:	30 e0       	ldi	r19, 0x00	; 0
    823c:	40 e2       	ldi	r20, 0x20	; 32
    823e:	51 e4       	ldi	r21, 0x41	; 65
    8240:	c5 01       	movw	r24, r10
    8242:	b4 01       	movw	r22, r8
    8244:	0e 94 a4 e9 	call	0x1d348	; 0x1d348 <__mulsf3>
    8248:	4b 01       	movw	r8, r22
    824a:	5c 01       	movw	r10, r24
    824c:	28 01       	movw	r4, r16
    824e:	e7 cf       	rjmp	.-50     	; 0x821e <p_etoa+0xd2>
    8250:	82 01       	movw	r16, r4
    8252:	0f 5f       	subi	r16, 0xFF	; 255
    8254:	1f 4f       	sbci	r17, 0xFF	; 255
    8256:	20 e0       	ldi	r18, 0x00	; 0
    8258:	30 e0       	ldi	r19, 0x00	; 0
    825a:	40 e2       	ldi	r20, 0x20	; 32
    825c:	51 e4       	ldi	r21, 0x41	; 65
    825e:	c5 01       	movw	r24, r10
    8260:	b4 01       	movw	r22, r8
    8262:	0e 94 a0 e9 	call	0x1d340	; 0x1d340 <__gesf2>
    8266:	87 fd       	sbrc	r24, 7
    8268:	0c c0       	rjmp	.+24     	; 0x8282 <p_etoa+0x136>
    826a:	20 e0       	ldi	r18, 0x00	; 0
    826c:	30 e0       	ldi	r19, 0x00	; 0
    826e:	40 e2       	ldi	r20, 0x20	; 32
    8270:	51 e4       	ldi	r21, 0x41	; 65
    8272:	c5 01       	movw	r24, r10
    8274:	b4 01       	movw	r22, r8
    8276:	0e 94 55 e8 	call	0x1d0aa	; 0x1d0aa <__divsf3>
    827a:	4b 01       	movw	r8, r22
    827c:	5c 01       	movw	r10, r24
    827e:	28 01       	movw	r4, r16
    8280:	e7 cf       	rjmp	.-50     	; 0x8250 <p_etoa+0x104>
    8282:	a7 01       	movw	r20, r14
    8284:	96 01       	movw	r18, r12
    8286:	c5 01       	movw	r24, r10
    8288:	b4 01       	movw	r22, r8
    828a:	0e 94 ed e7 	call	0x1cfda	; 0x1cfda <__addsf3>
    828e:	4b 01       	movw	r8, r22
    8290:	5c 01       	movw	r10, r24
    8292:	82 01       	movw	r16, r4
    8294:	2f ef       	ldi	r18, 0xFF	; 255
    8296:	42 1a       	sub	r4, r18
    8298:	52 0a       	sbc	r5, r18
    829a:	20 e0       	ldi	r18, 0x00	; 0
    829c:	30 e0       	ldi	r19, 0x00	; 0
    829e:	40 e2       	ldi	r20, 0x20	; 32
    82a0:	51 e4       	ldi	r21, 0x41	; 65
    82a2:	0e 94 a0 e9 	call	0x1d340	; 0x1d340 <__gesf2>
    82a6:	87 fd       	sbrc	r24, 7
    82a8:	09 c0       	rjmp	.+18     	; 0x82bc <p_etoa+0x170>
    82aa:	20 e0       	ldi	r18, 0x00	; 0
    82ac:	30 e0       	ldi	r19, 0x00	; 0
    82ae:	40 e2       	ldi	r20, 0x20	; 32
    82b0:	51 e4       	ldi	r21, 0x41	; 65
    82b2:	c5 01       	movw	r24, r10
    82b4:	b4 01       	movw	r22, r8
    82b6:	0e 94 55 e8 	call	0x1d0aa	; 0x1d0aa <__divsf3>
    82ba:	e9 cf       	rjmp	.-46     	; 0x828e <p_etoa+0x142>
    82bc:	0e 87       	std	Y+14, r16	; 0x0e
    82be:	1f 87       	std	Y+15, r17	; 0x0f
    82c0:	85 e6       	ldi	r24, 0x65	; 101
    82c2:	89 83       	std	Y+1, r24	; 0x01
    82c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    82c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    82c8:	97 ff       	sbrs	r25, 7
    82ca:	08 c0       	rjmp	.+16     	; 0x82dc <p_etoa+0x190>
    82cc:	91 95       	neg	r25
    82ce:	81 95       	neg	r24
    82d0:	91 09       	sbc	r25, r1
    82d2:	9f 87       	std	Y+15, r25	; 0x0f
    82d4:	8e 87       	std	Y+14, r24	; 0x0e
    82d6:	8d e2       	ldi	r24, 0x2D	; 45
    82d8:	90 e0       	ldi	r25, 0x00	; 0
    82da:	02 c0       	rjmp	.+4      	; 0x82e0 <p_etoa+0x194>
    82dc:	8b e2       	ldi	r24, 0x2B	; 43
    82de:	90 e0       	ldi	r25, 0x00	; 0
    82e0:	6c 01       	movw	r12, r24
    82e2:	82 e0       	ldi	r24, 0x02	; 2
    82e4:	e8 2e       	mov	r14, r24
    82e6:	f1 2c       	mov	r15, r1
    82e8:	8e 01       	movw	r16, r28
    82ea:	02 5f       	subi	r16, 0xF2	; 242
    82ec:	1f 4f       	sbci	r17, 0xFF	; 255
    82ee:	2a e0       	ldi	r18, 0x0A	; 10
    82f0:	30 e0       	ldi	r19, 0x00	; 0
    82f2:	42 e0       	ldi	r20, 0x02	; 2
    82f4:	50 e0       	ldi	r21, 0x00	; 0
    82f6:	65 e0       	ldi	r22, 0x05	; 5
    82f8:	70 e0       	ldi	r23, 0x00	; 0
    82fa:	ce 01       	movw	r24, r28
    82fc:	02 96       	adiw	r24, 0x02	; 2
    82fe:	26 dd       	rcall	.-1460   	; 0x7d4c <bin2num>
    8300:	9c 01       	movw	r18, r24
    8302:	93 2d       	mov	r25, r3
    8304:	98 72       	andi	r25, 0x28	; 40
    8306:	90 32       	cpi	r25, 0x20	; 32
    8308:	71 f0       	breq	.+28     	; 0x8326 <p_etoa+0x1da>
    830a:	c5 01       	movw	r24, r10
    830c:	b4 01       	movw	r22, r8
    830e:	0e 94 bd e8 	call	0x1d17a	; 0x1d17a <__fixsfsi>
    8312:	6b 01       	movw	r12, r22
    8314:	7c 01       	movw	r14, r24
    8316:	60 e3       	ldi	r22, 0x30	; 48
    8318:	6c 0d       	add	r22, r12
    831a:	ce 01       	movw	r24, r28
    831c:	08 96       	adiw	r24, 0x08	; 8
    831e:	9f dd       	rcall	.-1218   	; 0x7e5e <pch>
    8320:	21 10       	cpse	r2, r1
    8322:	20 c0       	rjmp	.+64     	; 0x8364 <p_etoa+0x218>
    8324:	63 c0       	rjmp	.+198    	; 0x83ec <p_etoa+0x2a0>
    8326:	8a 85       	ldd	r24, Y+10	; 0x0a
    8328:	9b 85       	ldd	r25, Y+11	; 0x0b
    832a:	0a 89       	ldd	r16, Y+18	; 0x12
    832c:	1b 89       	ldd	r17, Y+19	; 0x13
    832e:	08 1b       	sub	r16, r24
    8330:	19 0b       	sbc	r17, r25
    8332:	22 20       	and	r2, r2
    8334:	41 f0       	breq	.+16     	; 0x8346 <p_etoa+0x1fa>
    8336:	61 14       	cp	r6, r1
    8338:	71 04       	cpc	r7, r1
    833a:	29 f0       	breq	.+10     	; 0x8346 <p_etoa+0x1fa>
    833c:	06 19       	sub	r16, r6
    833e:	17 09       	sbc	r17, r7
    8340:	06 50       	subi	r16, 0x06	; 6
    8342:	11 09       	sbc	r17, r1
    8344:	02 c0       	rjmp	.+4      	; 0x834a <p_etoa+0x1fe>
    8346:	05 50       	subi	r16, 0x05	; 5
    8348:	11 09       	sbc	r17, r1
    834a:	24 30       	cpi	r18, 0x04	; 4
    834c:	31 05       	cpc	r19, r1
    834e:	14 f0       	brlt	.+4      	; 0x8354 <p_etoa+0x208>
    8350:	01 50       	subi	r16, 0x01	; 1
    8352:	11 09       	sbc	r17, r1
    8354:	10 16       	cp	r1, r16
    8356:	11 06       	cpc	r1, r17
    8358:	c4 f6       	brge	.-80     	; 0x830a <p_etoa+0x1be>
    835a:	60 e3       	ldi	r22, 0x30	; 48
    835c:	ce 01       	movw	r24, r28
    835e:	08 96       	adiw	r24, 0x08	; 8
    8360:	7e dd       	rcall	.-1284   	; 0x7e5e <pch>
    8362:	f6 cf       	rjmp	.-20     	; 0x8350 <p_etoa+0x204>
    8364:	61 14       	cp	r6, r1
    8366:	71 04       	cpc	r7, r1
    8368:	09 f4       	brne	.+2      	; 0x836c <p_etoa+0x220>
    836a:	40 c0       	rjmp	.+128    	; 0x83ec <p_etoa+0x2a0>
    836c:	b6 01       	movw	r22, r12
    836e:	dd 0c       	add	r13, r13
    8370:	88 0b       	sbc	r24, r24
    8372:	99 0b       	sbc	r25, r25
    8374:	0e 94 f0 e8 	call	0x1d1e0	; 0x1d1e0 <__floatsisf>
    8378:	9b 01       	movw	r18, r22
    837a:	ac 01       	movw	r20, r24
    837c:	c5 01       	movw	r24, r10
    837e:	b4 01       	movw	r22, r8
    8380:	0e 94 ec e7 	call	0x1cfd8	; 0x1cfd8 <__subsf3>
    8384:	20 e0       	ldi	r18, 0x00	; 0
    8386:	30 e0       	ldi	r19, 0x00	; 0
    8388:	40 e2       	ldi	r20, 0x20	; 32
    838a:	51 e4       	ldi	r21, 0x41	; 65
    838c:	0e 94 a4 e9 	call	0x1d348	; 0x1d348 <__mulsf3>
    8390:	4b 01       	movw	r8, r22
    8392:	5c 01       	movw	r10, r24
    8394:	6e e2       	ldi	r22, 0x2E	; 46
    8396:	ce 01       	movw	r24, r28
    8398:	08 96       	adiw	r24, 0x08	; 8
    839a:	61 dd       	rcall	.-1342   	; 0x7e5e <pch>
    839c:	c5 01       	movw	r24, r10
    839e:	b4 01       	movw	r22, r8
    83a0:	0e 94 bd e8 	call	0x1d17a	; 0x1d17a <__fixsfsi>
    83a4:	6b 01       	movw	r12, r22
    83a6:	7c 01       	movw	r14, r24
    83a8:	07 2e       	mov	r0, r23
    83aa:	00 0c       	add	r0, r0
    83ac:	88 0b       	sbc	r24, r24
    83ae:	99 0b       	sbc	r25, r25
    83b0:	0e 94 f0 e8 	call	0x1d1e0	; 0x1d1e0 <__floatsisf>
    83b4:	9b 01       	movw	r18, r22
    83b6:	ac 01       	movw	r20, r24
    83b8:	c5 01       	movw	r24, r10
    83ba:	b4 01       	movw	r22, r8
    83bc:	0e 94 ec e7 	call	0x1cfd8	; 0x1cfd8 <__subsf3>
    83c0:	4b 01       	movw	r8, r22
    83c2:	5c 01       	movw	r10, r24
    83c4:	b6 01       	movw	r22, r12
    83c6:	60 5d       	subi	r22, 0xD0	; 208
    83c8:	7f 4f       	sbci	r23, 0xFF	; 255
    83ca:	ce 01       	movw	r24, r28
    83cc:	08 96       	adiw	r24, 0x08	; 8
    83ce:	47 dd       	rcall	.-1394   	; 0x7e5e <pch>
    83d0:	20 e0       	ldi	r18, 0x00	; 0
    83d2:	30 e0       	ldi	r19, 0x00	; 0
    83d4:	40 e2       	ldi	r20, 0x20	; 32
    83d6:	51 e4       	ldi	r21, 0x41	; 65
    83d8:	c5 01       	movw	r24, r10
    83da:	b4 01       	movw	r22, r8
    83dc:	0e 94 a4 e9 	call	0x1d348	; 0x1d348 <__mulsf3>
    83e0:	4b 01       	movw	r8, r22
    83e2:	5c 01       	movw	r10, r24
    83e4:	31 e0       	ldi	r19, 0x01	; 1
    83e6:	63 1a       	sub	r6, r19
    83e8:	71 08       	sbc	r7, r1
    83ea:	c1 f6       	brne	.-80     	; 0x839c <p_etoa+0x250>
    83ec:	8e 01       	movw	r16, r28
    83ee:	0f 5f       	subi	r16, 0xFF	; 255
    83f0:	1f 4f       	sbci	r17, 0xFF	; 255
    83f2:	f8 01       	movw	r30, r16
    83f4:	61 91       	ld	r22, Z+
    83f6:	8f 01       	movw	r16, r30
    83f8:	ce 01       	movw	r24, r28
    83fa:	08 96       	adiw	r24, 0x08	; 8
    83fc:	66 23       	and	r22, r22
    83fe:	11 f0       	breq	.+4      	; 0x8404 <p_etoa+0x2b8>
    8400:	2e dd       	rcall	.-1444   	; 0x7e5e <pch>
    8402:	f7 cf       	rjmp	.-18     	; 0x83f2 <p_etoa+0x2a6>
    8404:	2c dd       	rcall	.-1448   	; 0x7e5e <pch>
    8406:	e8 89       	ldd	r30, Y+16	; 0x10
    8408:	f9 89       	ldd	r31, Y+17	; 0x11
    840a:	01 90       	ld	r0, Z+
    840c:	00 20       	and	r0, r0
    840e:	e9 f7       	brne	.-6      	; 0x840a <p_etoa+0x2be>
    8410:	cf 01       	movw	r24, r30
    8412:	01 97       	sbiw	r24, 0x01	; 1
    8414:	28 89       	ldd	r18, Y+16	; 0x10
    8416:	39 89       	ldd	r19, Y+17	; 0x11
    8418:	82 1b       	sub	r24, r18
    841a:	93 0b       	sbc	r25, r19
    841c:	63 96       	adiw	r28, 0x13	; 19
    841e:	e2 e1       	ldi	r30, 0x12	; 18
    8420:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

00008424 <_puts_pad>:
    8424:	a0 e0       	ldi	r26, 0x00	; 0
    8426:	b0 e0       	ldi	r27, 0x00	; 0
    8428:	e8 e1       	ldi	r30, 0x18	; 24
    842a:	f2 e4       	ldi	r31, 0x42	; 66
    842c:	0c 94 99 e7 	jmp	0x1cf32	; 0x1cf32 <__prologue_saves__+0xc>
    8430:	6c 01       	movw	r12, r24
    8432:	4b 01       	movw	r8, r22
    8434:	79 01       	movw	r14, r18
    8436:	24 17       	cp	r18, r20
    8438:	35 07       	cpc	r19, r21
    843a:	24 f4       	brge	.+8      	; 0x8444 <_puts_pad+0x20>
    843c:	ea 01       	movw	r28, r20
    843e:	c2 1b       	sub	r28, r18
    8440:	d3 0b       	sbc	r29, r19
    8442:	02 c0       	rjmp	.+4      	; 0x8448 <_puts_pad+0x24>
    8444:	c0 e0       	ldi	r28, 0x00	; 0
    8446:	d0 e0       	ldi	r29, 0x00	; 0
    8448:	01 15       	cp	r16, r1
    844a:	11 05       	cpc	r17, r1
    844c:	49 f4       	brne	.+18     	; 0x8460 <_puts_pad+0x3c>
    844e:	21 97       	sbiw	r28, 0x01	; 1
    8450:	38 f0       	brcs	.+14     	; 0x8460 <_puts_pad+0x3c>
    8452:	d6 01       	movw	r26, r12
    8454:	ed 91       	ld	r30, X+
    8456:	fc 91       	ld	r31, X
    8458:	60 e2       	ldi	r22, 0x20	; 32
    845a:	c6 01       	movw	r24, r12
    845c:	09 95       	icall
    845e:	f7 cf       	rjmp	.-18     	; 0x844e <_puts_pad+0x2a>
    8460:	54 01       	movw	r10, r8
    8462:	f5 01       	movw	r30, r10
    8464:	61 91       	ld	r22, Z+
    8466:	5f 01       	movw	r10, r30
    8468:	66 23       	and	r22, r22
    846a:	61 f0       	breq	.+24     	; 0x8484 <_puts_pad+0x60>
    846c:	e1 14       	cp	r14, r1
    846e:	f1 04       	cpc	r15, r1
    8470:	49 f0       	breq	.+18     	; 0x8484 <_puts_pad+0x60>
    8472:	d6 01       	movw	r26, r12
    8474:	ed 91       	ld	r30, X+
    8476:	fc 91       	ld	r31, X
    8478:	c6 01       	movw	r24, r12
    847a:	09 95       	icall
    847c:	b1 e0       	ldi	r27, 0x01	; 1
    847e:	eb 1a       	sub	r14, r27
    8480:	f1 08       	sbc	r15, r1
    8482:	ef cf       	rjmp	.-34     	; 0x8462 <_puts_pad+0x3e>
    8484:	01 15       	cp	r16, r1
    8486:	11 05       	cpc	r17, r1
    8488:	51 f0       	breq	.+20     	; 0x849e <_puts_pad+0x7a>
    848a:	20 97       	sbiw	r28, 0x00	; 0
    848c:	41 f0       	breq	.+16     	; 0x849e <_puts_pad+0x7a>
    848e:	d6 01       	movw	r26, r12
    8490:	ed 91       	ld	r30, X+
    8492:	fc 91       	ld	r31, X
    8494:	60 e2       	ldi	r22, 0x20	; 32
    8496:	c6 01       	movw	r24, r12
    8498:	09 95       	icall
    849a:	21 97       	sbiw	r28, 0x01	; 1
    849c:	f6 cf       	rjmp	.-20     	; 0x848a <_puts_pad+0x66>
    849e:	cd b7       	in	r28, 0x3d	; 61
    84a0:	de b7       	in	r29, 0x3e	; 62
    84a2:	ec e0       	ldi	r30, 0x0C	; 12
    84a4:	0c 94 b5 e7 	jmp	0x1cf6a	; 0x1cf6a <__epilogue_restores__+0xc>

000084a8 <_puts_pad_X>:
    84a8:	2f 92       	push	r2
    84aa:	3f 92       	push	r3
    84ac:	4f 92       	push	r4
    84ae:	6f 92       	push	r6
    84b0:	7f 92       	push	r7
    84b2:	8f 92       	push	r8
    84b4:	cf 92       	push	r12
    84b6:	df 92       	push	r13
    84b8:	ef 92       	push	r14
    84ba:	ff 92       	push	r15
    84bc:	0f 93       	push	r16
    84be:	1f 93       	push	r17
    84c0:	cf 93       	push	r28
    84c2:	df 93       	push	r29
    84c4:	6c 01       	movw	r12, r24
    84c6:	3a 01       	movw	r6, r20
    84c8:	86 2e       	mov	r8, r22
    84ca:	02 17       	cp	r16, r18
    84cc:	13 07       	cpc	r17, r19
    84ce:	24 f4       	brge	.+8      	; 0x84d8 <_puts_pad_X+0x30>
    84d0:	e9 01       	movw	r28, r18
    84d2:	c0 1b       	sub	r28, r16
    84d4:	d1 0b       	sbc	r29, r17
    84d6:	02 c0       	rjmp	.+4      	; 0x84dc <_puts_pad_X+0x34>
    84d8:	c0 e0       	ldi	r28, 0x00	; 0
    84da:	d0 e0       	ldi	r29, 0x00	; 0
    84dc:	e1 14       	cp	r14, r1
    84de:	f1 04       	cpc	r15, r1
    84e0:	49 f4       	brne	.+18     	; 0x84f4 <_puts_pad_X+0x4c>
    84e2:	21 97       	sbiw	r28, 0x01	; 1
    84e4:	38 f0       	brcs	.+14     	; 0x84f4 <_puts_pad_X+0x4c>
    84e6:	d6 01       	movw	r26, r12
    84e8:	ed 91       	ld	r30, X+
    84ea:	fc 91       	ld	r31, X
    84ec:	60 e2       	ldi	r22, 0x20	; 32
    84ee:	c6 01       	movw	r24, r12
    84f0:	09 95       	icall
    84f2:	f7 cf       	rjmp	.-18     	; 0x84e2 <_puts_pad_X+0x3a>
    84f4:	13 01       	movw	r2, r6
    84f6:	48 2c       	mov	r4, r8
    84f8:	20 0e       	add	r2, r16
    84fa:	31 1e       	adc	r3, r17
    84fc:	41 1c       	adc	r4, r1
    84fe:	17 fd       	sbrc	r17, 7
    8500:	4a 94       	dec	r4
    8502:	f3 01       	movw	r30, r6
    8504:	58 2d       	mov	r21, r8
    8506:	0e 94 ca e7 	call	0x1cf94	; 0x1cf94 <__xload_1>
    850a:	66 23       	and	r22, r22
    850c:	71 f0       	breq	.+28     	; 0x852a <_puts_pad_X+0x82>
    850e:	62 14       	cp	r6, r2
    8510:	73 04       	cpc	r7, r3
    8512:	84 04       	cpc	r8, r4
    8514:	51 f0       	breq	.+20     	; 0x852a <_puts_pad_X+0x82>
    8516:	d6 01       	movw	r26, r12
    8518:	ed 91       	ld	r30, X+
    851a:	fc 91       	ld	r31, X
    851c:	c6 01       	movw	r24, r12
    851e:	09 95       	icall
    8520:	bf ef       	ldi	r27, 0xFF	; 255
    8522:	6b 1a       	sub	r6, r27
    8524:	7b 0a       	sbc	r7, r27
    8526:	8b 0a       	sbc	r8, r27
    8528:	ec cf       	rjmp	.-40     	; 0x8502 <_puts_pad_X+0x5a>
    852a:	ef 28       	or	r14, r15
    852c:	51 f0       	breq	.+20     	; 0x8542 <_puts_pad_X+0x9a>
    852e:	20 97       	sbiw	r28, 0x00	; 0
    8530:	41 f0       	breq	.+16     	; 0x8542 <_puts_pad_X+0x9a>
    8532:	d6 01       	movw	r26, r12
    8534:	ed 91       	ld	r30, X+
    8536:	fc 91       	ld	r31, X
    8538:	60 e2       	ldi	r22, 0x20	; 32
    853a:	c6 01       	movw	r24, r12
    853c:	09 95       	icall
    853e:	21 97       	sbiw	r28, 0x01	; 1
    8540:	f6 cf       	rjmp	.-20     	; 0x852e <_puts_pad_X+0x86>
    8542:	df 91       	pop	r29
    8544:	cf 91       	pop	r28
    8546:	1f 91       	pop	r17
    8548:	0f 91       	pop	r16
    854a:	ff 90       	pop	r15
    854c:	ef 90       	pop	r14
    854e:	df 90       	pop	r13
    8550:	cf 90       	pop	r12
    8552:	8f 90       	pop	r8
    8554:	7f 90       	pop	r7
    8556:	6f 90       	pop	r6
    8558:	4f 90       	pop	r4
    855a:	3f 90       	pop	r3
    855c:	2f 90       	pop	r2
    855e:	08 95       	ret

00008560 <strlen_X>:
    8560:	cf 92       	push	r12
    8562:	df 92       	push	r13
    8564:	ef 92       	push	r14
    8566:	9b 01       	movw	r18, r22
    8568:	48 2f       	mov	r20, r24
    856a:	80 e0       	ldi	r24, 0x00	; 0
    856c:	90 e0       	ldi	r25, 0x00	; 0
    856e:	2f 5f       	subi	r18, 0xFF	; 255
    8570:	3f 4f       	sbci	r19, 0xFF	; 255
    8572:	4f 4f       	sbci	r20, 0xFF	; 255
    8574:	69 01       	movw	r12, r18
    8576:	e4 2e       	mov	r14, r20
    8578:	51 e0       	ldi	r21, 0x01	; 1
    857a:	c5 1a       	sub	r12, r21
    857c:	d1 08       	sbc	r13, r1
    857e:	e1 08       	sbc	r14, r1
    8580:	f6 01       	movw	r30, r12
    8582:	5e 2d       	mov	r21, r14
    8584:	0e 94 ca e7 	call	0x1cf94	; 0x1cf94 <__xload_1>
    8588:	66 23       	and	r22, r22
    858a:	11 f0       	breq	.+4      	; 0x8590 <strlen_X+0x30>
    858c:	01 96       	adiw	r24, 0x01	; 1
    858e:	ef cf       	rjmp	.-34     	; 0x856e <strlen_X+0xe>
    8590:	ef 90       	pop	r14
    8592:	df 90       	pop	r13
    8594:	cf 90       	pop	r12
    8596:	08 95       	ret

00008598 <_printf_fn>:
    8598:	ae e6       	ldi	r26, 0x6E	; 110
    859a:	b0 e0       	ldi	r27, 0x00	; 0
    859c:	e2 ed       	ldi	r30, 0xD2	; 210
    859e:	f2 e4       	ldi	r31, 0x42	; 66
    85a0:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
    85a4:	a5 96       	adiw	r28, 0x25	; 37
    85a6:	9f af       	std	Y+63, r25	; 0x3f
    85a8:	8e af       	std	Y+62, r24	; 0x3e
    85aa:	a5 97       	sbiw	r28, 0x25	; 37
    85ac:	6a 01       	movw	r12, r20
    85ae:	e6 2e       	mov	r14, r22
    85b0:	19 01       	movw	r2, r18
    85b2:	a9 96       	adiw	r28, 0x29	; 41
    85b4:	1c ae       	std	Y+60, r1	; 0x3c
    85b6:	1d ae       	std	Y+61, r1	; 0x3d
    85b8:	1e ae       	std	Y+62, r1	; 0x3e
    85ba:	1f ae       	std	Y+63, r1	; 0x3f
    85bc:	a9 97       	sbiw	r28, 0x29	; 41
    85be:	8a e1       	ldi	r24, 0x1A	; 26
    85c0:	94 e0       	ldi	r25, 0x04	; 4
    85c2:	9c 01       	movw	r18, r24
    85c4:	40 e8       	ldi	r20, 0x80	; 128
    85c6:	ae 96       	adiw	r28, 0x2e	; 46
    85c8:	2d af       	std	Y+61, r18	; 0x3d
    85ca:	3e af       	std	Y+62, r19	; 0x3e
    85cc:	4f af       	std	Y+63, r20	; 0x3f
    85ce:	ae 97       	sbiw	r28, 0x2e	; 46
    85d0:	ae 01       	movw	r20, r28
    85d2:	4f 5a       	subi	r20, 0xAF	; 175
    85d4:	5f 4f       	sbci	r21, 0xFF	; 255
    85d6:	67 96       	adiw	r28, 0x17	; 23
    85d8:	5f af       	std	Y+63, r21	; 0x3f
    85da:	4e af       	std	Y+62, r20	; 0x3e
    85dc:	67 97       	sbiw	r28, 0x17	; 23
    85de:	ce 01       	movw	r24, r28
    85e0:	8d 5b       	subi	r24, 0xBD	; 189
    85e2:	9f 4f       	sbci	r25, 0xFF	; 255
    85e4:	69 96       	adiw	r28, 0x19	; 25
    85e6:	9f af       	std	Y+63, r25	; 0x3f
    85e8:	8e af       	std	Y+62, r24	; 0x3e
    85ea:	69 97       	sbiw	r28, 0x19	; 25
    85ec:	de 01       	movw	r26, r28
    85ee:	a5 5b       	subi	r26, 0xB5	; 181
    85f0:	bf 4f       	sbci	r27, 0xFF	; 255
    85f2:	6b 96       	adiw	r28, 0x1b	; 27
    85f4:	bf af       	std	Y+63, r27	; 0x3f
    85f6:	ae af       	std	Y+62, r26	; 0x3e
    85f8:	6b 97       	sbiw	r28, 0x1b	; 27
    85fa:	fe 01       	movw	r30, r28
    85fc:	ed 5a       	subi	r30, 0xAD	; 173
    85fe:	ff 4f       	sbci	r31, 0xFF	; 255
    8600:	6d 96       	adiw	r28, 0x1d	; 29
    8602:	ff af       	std	Y+63, r31	; 0x3f
    8604:	ee af       	std	Y+62, r30	; 0x3e
    8606:	6d 97       	sbiw	r28, 0x1d	; 29
    8608:	f6 01       	movw	r30, r12
    860a:	5e 2d       	mov	r21, r14
    860c:	0e 94 ca e7 	call	0x1cf94	; 0x1cf94 <__xload_1>
    8610:	66 23       	and	r22, r22
    8612:	09 f4       	brne	.+2      	; 0x8616 <_printf_fn+0x7e>
    8614:	13 c4       	rjmp	.+2086   	; 0x8e3c <_printf_fn+0x8a4>
    8616:	ae 2d       	mov	r26, r14
    8618:	c6 01       	movw	r24, r12
    861a:	01 96       	adiw	r24, 0x01	; 1
    861c:	a1 1d       	adc	r26, r1
    861e:	3c 01       	movw	r6, r24
    8620:	8a 2e       	mov	r8, r26
    8622:	65 32       	cpi	r22, 0x25	; 37
    8624:	51 f0       	breq	.+20     	; 0x863a <_printf_fn+0xa2>
    8626:	a5 96       	adiw	r28, 0x25	; 37
    8628:	ae ad       	ldd	r26, Y+62	; 0x3e
    862a:	bf ad       	ldd	r27, Y+63	; 0x3f
    862c:	a5 97       	sbiw	r28, 0x25	; 37
    862e:	ed 91       	ld	r30, X+
    8630:	fc 91       	ld	r31, X
    8632:	11 97       	sbiw	r26, 0x01	; 1
    8634:	cd 01       	movw	r24, r26
    8636:	09 95       	icall
    8638:	d5 c3       	rjmp	.+1962   	; 0x8de4 <_printf_fn+0x84c>
    863a:	91 2c       	mov	r9, r1
    863c:	f3 01       	movw	r30, r6
    863e:	58 2d       	mov	r21, r8
    8640:	0e 94 ca e7 	call	0x1cf94	; 0x1cf94 <__xload_1>
    8644:	63 32       	cpi	r22, 0x23	; 35
    8646:	19 f4       	brne	.+6      	; 0x864e <_printf_fn+0xb6>
    8648:	68 94       	set
    864a:	97 f8       	bld	r9, 7
    864c:	04 c0       	rjmp	.+8      	; 0x8656 <_printf_fn+0xbe>
    864e:	6b 32       	cpi	r22, 0x2B	; 43
    8650:	39 f4       	brne	.+14     	; 0x8660 <_printf_fn+0xc8>
    8652:	68 94       	set
    8654:	92 f8       	bld	r9, 2
    8656:	bf ef       	ldi	r27, 0xFF	; 255
    8658:	6b 1a       	sub	r6, r27
    865a:	7b 0a       	sbc	r7, r27
    865c:	8b 0a       	sbc	r8, r27
    865e:	ee cf       	rjmp	.-36     	; 0x863c <_printf_fn+0xa4>
    8660:	6d 32       	cpi	r22, 0x2D	; 45
    8662:	a9 f4       	brne	.+42     	; 0x868e <_printf_fn+0xf6>
    8664:	93 fc       	sbrc	r9, 3
    8666:	05 c0       	rjmp	.+10     	; 0x8672 <_printf_fn+0xda>
    8668:	6d 32       	cpi	r22, 0x2D	; 45
    866a:	19 f4       	brne	.+6      	; 0x8672 <_printf_fn+0xda>
    866c:	68 94       	set
    866e:	93 f8       	bld	r9, 3
    8670:	f2 cf       	rjmp	.-28     	; 0x8656 <_printf_fn+0xbe>
    8672:	94 fc       	sbrc	r9, 4
    8674:	05 c0       	rjmp	.+10     	; 0x8680 <_printf_fn+0xe8>
    8676:	60 32       	cpi	r22, 0x20	; 32
    8678:	19 f4       	brne	.+6      	; 0x8680 <_printf_fn+0xe8>
    867a:	68 94       	set
    867c:	94 f8       	bld	r9, 4
    867e:	eb cf       	rjmp	.-42     	; 0x8656 <_printf_fn+0xbe>
    8680:	95 fc       	sbrc	r9, 5
    8682:	e9 cf       	rjmp	.-46     	; 0x8656 <_printf_fn+0xbe>
    8684:	60 33       	cpi	r22, 0x30	; 48
    8686:	39 f7       	brne	.-50     	; 0x8656 <_printf_fn+0xbe>
    8688:	68 94       	set
    868a:	95 f8       	bld	r9, 5
    868c:	e4 cf       	rjmp	.-56     	; 0x8656 <_printf_fn+0xbe>
    868e:	86 2f       	mov	r24, r22
    8690:	8f 7e       	andi	r24, 0xEF	; 239
    8692:	80 32       	cpi	r24, 0x20	; 32
    8694:	39 f3       	breq	.-50     	; 0x8664 <_printf_fn+0xcc>
    8696:	70 e0       	ldi	r23, 0x00	; 0
    8698:	60 53       	subi	r22, 0x30	; 48
    869a:	71 09       	sbc	r23, r1
    869c:	6f 96       	adiw	r28, 0x1f	; 31
    869e:	1f ae       	std	Y+63, r1	; 0x3f
    86a0:	1e ae       	std	Y+62, r1	; 0x3e
    86a2:	6f 97       	sbiw	r28, 0x1f	; 31
    86a4:	6a 30       	cpi	r22, 0x0A	; 10
    86a6:	71 05       	cpc	r23, r1
    86a8:	10 f5       	brcc	.+68     	; 0x86ee <_printf_fn+0x156>
    86aa:	2a e0       	ldi	r18, 0x0A	; 10
    86ac:	f3 01       	movw	r30, r6
    86ae:	58 2d       	mov	r21, r8
    86b0:	0e 94 ca e7 	call	0x1cf94	; 0x1cf94 <__xload_1>
    86b4:	70 e0       	ldi	r23, 0x00	; 0
    86b6:	cb 01       	movw	r24, r22
    86b8:	c0 97       	sbiw	r24, 0x30	; 48
    86ba:	0a 97       	sbiw	r24, 0x0a	; 10
    86bc:	b0 f4       	brcc	.+44     	; 0x86ea <_printf_fn+0x152>
    86be:	ef ef       	ldi	r30, 0xFF	; 255
    86c0:	6e 1a       	sub	r6, r30
    86c2:	7e 0a       	sbc	r7, r30
    86c4:	8e 0a       	sbc	r8, r30
    86c6:	6f 96       	adiw	r28, 0x1f	; 31
    86c8:	4e ad       	ldd	r20, Y+62	; 0x3e
    86ca:	5f ad       	ldd	r21, Y+63	; 0x3f
    86cc:	6f 97       	sbiw	r28, 0x1f	; 31
    86ce:	24 9f       	mul	r18, r20
    86d0:	c0 01       	movw	r24, r0
    86d2:	25 9f       	mul	r18, r21
    86d4:	90 0d       	add	r25, r0
    86d6:	11 24       	eor	r1, r1
    86d8:	68 0f       	add	r22, r24
    86da:	79 1f       	adc	r23, r25
    86dc:	cb 01       	movw	r24, r22
    86de:	c0 97       	sbiw	r24, 0x30	; 48
    86e0:	6f 96       	adiw	r28, 0x1f	; 31
    86e2:	9f af       	std	Y+63, r25	; 0x3f
    86e4:	8e af       	std	Y+62, r24	; 0x3e
    86e6:	6f 97       	sbiw	r28, 0x1f	; 31
    86e8:	e1 cf       	rjmp	.-62     	; 0x86ac <_printf_fn+0x114>
    86ea:	68 94       	set
    86ec:	90 f8       	bld	r9, 0
    86ee:	f3 01       	movw	r30, r6
    86f0:	58 2d       	mov	r21, r8
    86f2:	0e 94 ca e7 	call	0x1cf94	; 0x1cf94 <__xload_1>
    86f6:	6e 32       	cpi	r22, 0x2E	; 46
    86f8:	61 f5       	brne	.+88     	; 0x8752 <_printf_fn+0x1ba>
    86fa:	9f ef       	ldi	r25, 0xFF	; 255
    86fc:	69 1a       	sub	r6, r25
    86fe:	79 0a       	sbc	r7, r25
    8700:	89 0a       	sbc	r8, r25
    8702:	a1 96       	adiw	r28, 0x21	; 33
    8704:	1f ae       	std	Y+63, r1	; 0x3f
    8706:	1e ae       	std	Y+62, r1	; 0x3e
    8708:	a1 97       	sbiw	r28, 0x21	; 33
    870a:	2a e0       	ldi	r18, 0x0A	; 10
    870c:	f3 01       	movw	r30, r6
    870e:	58 2d       	mov	r21, r8
    8710:	0e 94 ca e7 	call	0x1cf94	; 0x1cf94 <__xload_1>
    8714:	70 e0       	ldi	r23, 0x00	; 0
    8716:	cb 01       	movw	r24, r22
    8718:	c0 97       	sbiw	r24, 0x30	; 48
    871a:	0a 97       	sbiw	r24, 0x0a	; 10
    871c:	b8 f4       	brcc	.+46     	; 0x874c <_printf_fn+0x1b4>
    871e:	af ef       	ldi	r26, 0xFF	; 255
    8720:	6a 1a       	sub	r6, r26
    8722:	7a 0a       	sbc	r7, r26
    8724:	8a 0a       	sbc	r8, r26
    8726:	a1 96       	adiw	r28, 0x21	; 33
    8728:	ee ad       	ldd	r30, Y+62	; 0x3e
    872a:	ff ad       	ldd	r31, Y+63	; 0x3f
    872c:	a1 97       	sbiw	r28, 0x21	; 33
    872e:	2e 9f       	mul	r18, r30
    8730:	c0 01       	movw	r24, r0
    8732:	2f 9f       	mul	r18, r31
    8734:	90 0d       	add	r25, r0
    8736:	11 24       	eor	r1, r1
    8738:	68 0f       	add	r22, r24
    873a:	79 1f       	adc	r23, r25
    873c:	ab 01       	movw	r20, r22
    873e:	40 53       	subi	r20, 0x30	; 48
    8740:	51 09       	sbc	r21, r1
    8742:	a1 96       	adiw	r28, 0x21	; 33
    8744:	5f af       	std	Y+63, r21	; 0x3f
    8746:	4e af       	std	Y+62, r20	; 0x3e
    8748:	a1 97       	sbiw	r28, 0x21	; 33
    874a:	e0 cf       	rjmp	.-64     	; 0x870c <_printf_fn+0x174>
    874c:	68 94       	set
    874e:	91 f8       	bld	r9, 1
    8750:	04 c0       	rjmp	.+8      	; 0x875a <_printf_fn+0x1c2>
    8752:	a1 96       	adiw	r28, 0x21	; 33
    8754:	1f ae       	std	Y+63, r1	; 0x3f
    8756:	1e ae       	std	Y+62, r1	; 0x3e
    8758:	a1 97       	sbiw	r28, 0x21	; 33
    875a:	f3 01       	movw	r30, r6
    875c:	58 2d       	mov	r21, r8
    875e:	0e 94 ca e7 	call	0x1cf94	; 0x1cf94 <__xload_1>
    8762:	69 34       	cpi	r22, 0x49	; 73
    8764:	91 f5       	brne	.+100    	; 0x87ca <_printf_fn+0x232>
    8766:	5f ef       	ldi	r21, 0xFF	; 255
    8768:	65 1a       	sub	r6, r21
    876a:	75 0a       	sbc	r7, r21
    876c:	85 0a       	sbc	r8, r21
    876e:	41 2c       	mov	r4, r1
    8770:	51 2c       	mov	r5, r1
    8772:	2a e0       	ldi	r18, 0x0A	; 10
    8774:	f3 01       	movw	r30, r6
    8776:	58 2d       	mov	r21, r8
    8778:	0e 94 ca e7 	call	0x1cf94	; 0x1cf94 <__xload_1>
    877c:	70 e0       	ldi	r23, 0x00	; 0
    877e:	cb 01       	movw	r24, r22
    8780:	c0 97       	sbiw	r24, 0x30	; 48
    8782:	0a 97       	sbiw	r24, 0x0a	; 10
    8784:	80 f4       	brcc	.+32     	; 0x87a6 <_printf_fn+0x20e>
    8786:	8f ef       	ldi	r24, 0xFF	; 255
    8788:	68 1a       	sub	r6, r24
    878a:	78 0a       	sbc	r7, r24
    878c:	88 0a       	sbc	r8, r24
    878e:	24 9d       	mul	r18, r4
    8790:	c0 01       	movw	r24, r0
    8792:	25 9d       	mul	r18, r5
    8794:	90 0d       	add	r25, r0
    8796:	11 24       	eor	r1, r1
    8798:	68 0f       	add	r22, r24
    879a:	79 1f       	adc	r23, r25
    879c:	2b 01       	movw	r4, r22
    879e:	90 e3       	ldi	r25, 0x30	; 48
    87a0:	49 1a       	sub	r4, r25
    87a2:	51 08       	sbc	r5, r1
    87a4:	e7 cf       	rjmp	.-50     	; 0x8774 <_printf_fn+0x1dc>
    87a6:	41 14       	cp	r4, r1
    87a8:	51 04       	cpc	r5, r1
    87aa:	09 f4       	brne	.+2      	; 0x87ae <_printf_fn+0x216>
    87ac:	40 c0       	rjmp	.+128    	; 0x882e <_printf_fn+0x296>
    87ae:	c2 01       	movw	r24, r4
    87b0:	87 70       	andi	r24, 0x07	; 7
    87b2:	99 27       	eor	r25, r25
    87b4:	89 2b       	or	r24, r25
    87b6:	c9 f5       	brne	.+114    	; 0x882a <_printf_fn+0x292>
    87b8:	63 e0       	ldi	r22, 0x03	; 3
    87ba:	55 94       	asr	r5
    87bc:	47 94       	ror	r4
    87be:	6a 95       	dec	r22
    87c0:	e1 f7       	brne	.-8      	; 0x87ba <_printf_fn+0x222>
    87c2:	41 14       	cp	r4, r1
    87c4:	51 04       	cpc	r5, r1
    87c6:	99 f1       	breq	.+102    	; 0x882e <_printf_fn+0x296>
    87c8:	21 c0       	rjmp	.+66     	; 0x880c <_printf_fn+0x274>
    87ca:	68 36       	cpi	r22, 0x68	; 104
    87cc:	29 f4       	brne	.+10     	; 0x87d8 <_printf_fn+0x240>
    87ce:	af ef       	ldi	r26, 0xFF	; 255
    87d0:	6a 1a       	sub	r6, r26
    87d2:	7a 0a       	sbc	r7, r26
    87d4:	8a 0a       	sbc	r8, r26
    87d6:	09 c3       	rjmp	.+1554   	; 0x8dea <_printf_fn+0x852>
    87d8:	6c 36       	cpi	r22, 0x6C	; 108
    87da:	09 f0       	breq	.+2      	; 0x87de <_printf_fn+0x246>
    87dc:	06 c3       	rjmp	.+1548   	; 0x8dea <_printf_fn+0x852>
    87de:	a8 2d       	mov	r26, r8
    87e0:	c3 01       	movw	r24, r6
    87e2:	01 96       	adiw	r24, 0x01	; 1
    87e4:	a1 1d       	adc	r26, r1
    87e6:	fc 01       	movw	r30, r24
    87e8:	5a 2f       	mov	r21, r26
    87ea:	0e 94 ca e7 	call	0x1cf94	; 0x1cf94 <__xload_1>
    87ee:	6c 36       	cpi	r22, 0x6C	; 108
    87f0:	31 f0       	breq	.+12     	; 0x87fe <_printf_fn+0x266>
    87f2:	3c 01       	movw	r6, r24
    87f4:	8a 2e       	mov	r8, r26
    87f6:	54 e0       	ldi	r21, 0x04	; 4
    87f8:	45 2e       	mov	r4, r21
    87fa:	51 2c       	mov	r5, r1
    87fc:	07 c0       	rjmp	.+14     	; 0x880c <_printf_fn+0x274>
    87fe:	b2 e0       	ldi	r27, 0x02	; 2
    8800:	6b 0e       	add	r6, r27
    8802:	71 1c       	adc	r7, r1
    8804:	81 1c       	adc	r8, r1
    8806:	48 e0       	ldi	r20, 0x08	; 8
    8808:	44 2e       	mov	r4, r20
    880a:	51 2c       	mov	r5, r1
    880c:	f3 01       	movw	r30, r6
    880e:	58 2d       	mov	r21, r8
    8810:	0e 94 ca e7 	call	0x1cf94	; 0x1cf94 <__xload_1>
    8814:	e6 2f       	mov	r30, r22
    8816:	f0 e0       	ldi	r31, 0x00	; 0
    8818:	a3 96       	adiw	r28, 0x23	; 35
    881a:	ff af       	std	Y+63, r31	; 0x3f
    881c:	ee af       	std	Y+62, r30	; 0x3e
    881e:	a3 97       	sbiw	r28, 0x23	; 35
    8820:	e4 36       	cpi	r30, 0x64	; 100
    8822:	f1 05       	cpc	r31, r1
    8824:	09 f4       	brne	.+2      	; 0x8828 <_printf_fn+0x290>
    8826:	e5 c2       	rjmp	.+1482   	; 0x8df2 <_printf_fn+0x85a>
    8828:	06 c0       	rjmp	.+12     	; 0x8836 <_printf_fn+0x29e>
    882a:	41 2c       	mov	r4, r1
    882c:	51 2c       	mov	r5, r1
    882e:	a3 96       	adiw	r28, 0x23	; 35
    8830:	1f ae       	std	Y+63, r1	; 0x3f
    8832:	1e ae       	std	Y+62, r1	; 0x3e
    8834:	a3 97       	sbiw	r28, 0x23	; 35
    8836:	31 e0       	ldi	r19, 0x01	; 1
    8838:	20 e0       	ldi	r18, 0x00	; 0
    883a:	a3 96       	adiw	r28, 0x23	; 35
    883c:	4e ad       	ldd	r20, Y+62	; 0x3e
    883e:	5f ad       	ldd	r21, Y+63	; 0x3f
    8840:	a3 97       	sbiw	r28, 0x23	; 35
    8842:	44 34       	cpi	r20, 0x44	; 68
    8844:	51 05       	cpc	r21, r1
    8846:	09 f0       	breq	.+2      	; 0x884a <_printf_fn+0x2b2>
    8848:	30 e0       	ldi	r19, 0x00	; 0
    884a:	83 2f       	mov	r24, r19
    884c:	92 2f       	mov	r25, r18
    884e:	a3 96       	adiw	r28, 0x23	; 35
    8850:	ee ad       	ldd	r30, Y+62	; 0x3e
    8852:	ff ad       	ldd	r31, Y+63	; 0x3f
    8854:	a3 97       	sbiw	r28, 0x23	; 35
    8856:	e2 54       	subi	r30, 0x42	; 66
    8858:	f1 09       	sbc	r31, r1
    885a:	e7 33       	cpi	r30, 0x37	; 55
    885c:	f1 05       	cpc	r31, r1
    885e:	08 f0       	brcs	.+2      	; 0x8862 <_printf_fn+0x2ca>
    8860:	57 c1       	rjmp	.+686    	; 0x8b10 <_printf_fn+0x578>
    8862:	ea 5b       	subi	r30, 0xBA	; 186
    8864:	ff 4f       	sbci	r31, 0xFF	; 255
    8866:	0c 94 64 e7 	jmp	0x1cec8	; 0x1cec8 <__tablejump2__>
    886a:	32 e0       	ldi	r19, 0x02	; 2
    886c:	43 2e       	mov	r4, r19
    886e:	51 2c       	mov	r5, r1
    8870:	29 2d       	mov	r18, r9
    8872:	28 72       	andi	r18, 0x28	; 40
    8874:	28 32       	cpi	r18, 0x28	; 40
    8876:	11 f4       	brne	.+4      	; 0x887c <_printf_fn+0x2e4>
    8878:	e8 94       	clt
    887a:	95 f8       	bld	r9, 5
    887c:	29 2d       	mov	r18, r9
    887e:	22 72       	andi	r18, 0x22	; 34
    8880:	22 32       	cpi	r18, 0x22	; 34
    8882:	11 f4       	brne	.+4      	; 0x8888 <_printf_fn+0x2f0>
    8884:	e8 94       	clt
    8886:	95 f8       	bld	r9, 5
    8888:	29 2d       	mov	r18, r9
    888a:	21 72       	andi	r18, 0x21	; 33
    888c:	21 32       	cpi	r18, 0x21	; 33
    888e:	79 f4       	brne	.+30     	; 0x88ae <_printf_fn+0x316>
    8890:	a1 96       	adiw	r28, 0x21	; 33
    8892:	ae ad       	ldd	r26, Y+62	; 0x3e
    8894:	bf ad       	ldd	r27, Y+63	; 0x3f
    8896:	a1 97       	sbiw	r28, 0x21	; 33
    8898:	6f 96       	adiw	r28, 0x1f	; 31
    889a:	ee ad       	ldd	r30, Y+62	; 0x3e
    889c:	ff ad       	ldd	r31, Y+63	; 0x3f
    889e:	6f 97       	sbiw	r28, 0x1f	; 31
    88a0:	ae 17       	cp	r26, r30
    88a2:	bf 07       	cpc	r27, r31
    88a4:	24 f4       	brge	.+8      	; 0x88ae <_printf_fn+0x316>
    88a6:	a1 96       	adiw	r28, 0x21	; 33
    88a8:	ff af       	std	Y+63, r31	; 0x3f
    88aa:	ee af       	std	Y+62, r30	; 0x3e
    88ac:	a1 97       	sbiw	r28, 0x21	; 33
    88ae:	29 2d       	mov	r18, r9
    88b0:	23 72       	andi	r18, 0x23	; 35
    88b2:	23 32       	cpi	r18, 0x23	; 35
    88b4:	79 f4       	brne	.+30     	; 0x88d4 <_printf_fn+0x33c>
    88b6:	a1 96       	adiw	r28, 0x21	; 33
    88b8:	2e ad       	ldd	r18, Y+62	; 0x3e
    88ba:	3f ad       	ldd	r19, Y+63	; 0x3f
    88bc:	a1 97       	sbiw	r28, 0x21	; 33
    88be:	6f 96       	adiw	r28, 0x1f	; 31
    88c0:	4e ad       	ldd	r20, Y+62	; 0x3e
    88c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    88c4:	6f 97       	sbiw	r28, 0x1f	; 31
    88c6:	24 17       	cp	r18, r20
    88c8:	35 07       	cpc	r19, r21
    88ca:	24 f4       	brge	.+8      	; 0x88d4 <_printf_fn+0x33c>
    88cc:	a1 96       	adiw	r28, 0x21	; 33
    88ce:	5f af       	std	Y+63, r21	; 0x3f
    88d0:	4e af       	std	Y+62, r20	; 0x3e
    88d2:	a1 97       	sbiw	r28, 0x21	; 33
    88d4:	e8 94       	clt
    88d6:	94 f8       	bld	r9, 4
    88d8:	e8 94       	clt
    88da:	92 f8       	bld	r9, 2
    88dc:	e8 94       	clt
    88de:	96 f8       	bld	r9, 6
    88e0:	52 e0       	ldi	r21, 0x02	; 2
    88e2:	45 16       	cp	r4, r21
    88e4:	51 04       	cpc	r5, r1
    88e6:	f9 f4       	brne	.+62     	; 0x8926 <_printf_fn+0x38e>
    88e8:	51 01       	movw	r10, r2
    88ea:	82 e0       	ldi	r24, 0x02	; 2
    88ec:	a8 0e       	add	r10, r24
    88ee:	b1 1c       	adc	r11, r1
    88f0:	d1 01       	movw	r26, r2
    88f2:	8d 91       	ld	r24, X+
    88f4:	9c 91       	ld	r25, X
    88f6:	65 96       	adiw	r28, 0x15	; 21
    88f8:	9f af       	std	Y+63, r25	; 0x3f
    88fa:	8e af       	std	Y+62, r24	; 0x3e
    88fc:	65 97       	sbiw	r28, 0x15	; 21
    88fe:	a3 96       	adiw	r28, 0x23	; 35
    8900:	ee ad       	ldd	r30, Y+62	; 0x3e
    8902:	ff ad       	ldd	r31, Y+63	; 0x3f
    8904:	a3 97       	sbiw	r28, 0x23	; 35
    8906:	e4 34       	cpi	r30, 0x44	; 68
    8908:	f1 05       	cpc	r31, r1
    890a:	09 f0       	breq	.+2      	; 0x890e <_printf_fn+0x376>
    890c:	ac c0       	rjmp	.+344    	; 0x8a66 <_printf_fn+0x4ce>
    890e:	97 ff       	sbrs	r25, 7
    8910:	a7 c0       	rjmp	.+334    	; 0x8a60 <_printf_fn+0x4c8>
    8912:	68 94       	set
    8914:	96 f8       	bld	r9, 6
    8916:	91 95       	neg	r25
    8918:	81 95       	neg	r24
    891a:	91 09       	sbc	r25, r1
    891c:	65 96       	adiw	r28, 0x15	; 21
    891e:	9f af       	std	Y+63, r25	; 0x3f
    8920:	8e af       	std	Y+62, r24	; 0x3e
    8922:	65 97       	sbiw	r28, 0x15	; 21
    8924:	9d c0       	rjmp	.+314    	; 0x8a60 <_printf_fn+0x4c8>
    8926:	f4 e0       	ldi	r31, 0x04	; 4
    8928:	4f 16       	cp	r4, r31
    892a:	51 04       	cpc	r5, r1
    892c:	59 f5       	brne	.+86     	; 0x8984 <_printf_fn+0x3ec>
    892e:	51 01       	movw	r10, r2
    8930:	24 e0       	ldi	r18, 0x04	; 4
    8932:	a2 0e       	add	r10, r18
    8934:	b1 1c       	adc	r11, r1
    8936:	f1 01       	movw	r30, r2
    8938:	80 81       	ld	r24, Z
    893a:	91 81       	ldd	r25, Z+1	; 0x01
    893c:	a2 81       	ldd	r26, Z+2	; 0x02
    893e:	b3 81       	ldd	r27, Z+3	; 0x03
    8940:	2f 96       	adiw	r28, 0x0f	; 15
    8942:	8c af       	std	Y+60, r24	; 0x3c
    8944:	9d af       	std	Y+61, r25	; 0x3d
    8946:	ae af       	std	Y+62, r26	; 0x3e
    8948:	bf af       	std	Y+63, r27	; 0x3f
    894a:	2f 97       	sbiw	r28, 0x0f	; 15
    894c:	a3 96       	adiw	r28, 0x23	; 35
    894e:	2e ad       	ldd	r18, Y+62	; 0x3e
    8950:	3f ad       	ldd	r19, Y+63	; 0x3f
    8952:	a3 97       	sbiw	r28, 0x23	; 35
    8954:	24 34       	cpi	r18, 0x44	; 68
    8956:	31 05       	cpc	r19, r1
    8958:	09 f0       	breq	.+2      	; 0x895c <_printf_fn+0x3c4>
    895a:	8f c0       	rjmp	.+286    	; 0x8a7a <_printf_fn+0x4e2>
    895c:	b7 ff       	sbrs	r27, 7
    895e:	8a c0       	rjmp	.+276    	; 0x8a74 <_printf_fn+0x4dc>
    8960:	68 94       	set
    8962:	96 f8       	bld	r9, 6
    8964:	b0 95       	com	r27
    8966:	a0 95       	com	r26
    8968:	90 95       	com	r25
    896a:	81 95       	neg	r24
    896c:	9f 4f       	sbci	r25, 0xFF	; 255
    896e:	af 4f       	sbci	r26, 0xFF	; 255
    8970:	bf 4f       	sbci	r27, 0xFF	; 255
    8972:	2f 96       	adiw	r28, 0x0f	; 15
    8974:	8c af       	std	Y+60, r24	; 0x3c
    8976:	9d af       	std	Y+61, r25	; 0x3d
    8978:	ae af       	std	Y+62, r26	; 0x3e
    897a:	bf af       	std	Y+63, r27	; 0x3f
    897c:	2f 97       	sbiw	r28, 0x0f	; 15
    897e:	7a c0       	rjmp	.+244    	; 0x8a74 <_printf_fn+0x4dc>
    8980:	81 e0       	ldi	r24, 0x01	; 1
    8982:	90 e0       	ldi	r25, 0x00	; 0
    8984:	51 01       	movw	r10, r2
    8986:	38 e0       	ldi	r19, 0x08	; 8
    8988:	43 16       	cp	r4, r19
    898a:	51 04       	cpc	r5, r1
    898c:	09 f0       	breq	.+2      	; 0x8990 <_printf_fn+0x3f8>
    898e:	7c c0       	rjmp	.+248    	; 0x8a88 <_printf_fn+0x4f0>
    8990:	48 e0       	ldi	r20, 0x08	; 8
    8992:	a4 0e       	add	r10, r20
    8994:	b1 1c       	adc	r11, r1
    8996:	d1 01       	movw	r26, r2
    8998:	fc 90       	ld	r15, X
    899a:	f1 01       	movw	r30, r2
    899c:	01 81       	ldd	r16, Z+1	; 0x01
    899e:	12 81       	ldd	r17, Z+2	; 0x02
    89a0:	f3 81       	ldd	r31, Z+3	; 0x03
    89a2:	aa 96       	adiw	r28, 0x2a	; 42
    89a4:	ff af       	std	Y+63, r31	; 0x3f
    89a6:	aa 97       	sbiw	r28, 0x2a	; 42
    89a8:	f1 01       	movw	r30, r2
    89aa:	f4 81       	ldd	r31, Z+4	; 0x04
    89ac:	ab 96       	adiw	r28, 0x2b	; 43
    89ae:	ff af       	std	Y+63, r31	; 0x3f
    89b0:	ab 97       	sbiw	r28, 0x2b	; 43
    89b2:	f1 01       	movw	r30, r2
    89b4:	b5 81       	ldd	r27, Z+5	; 0x05
    89b6:	f6 81       	ldd	r31, Z+6	; 0x06
    89b8:	af 96       	adiw	r28, 0x2f	; 47
    89ba:	ff af       	std	Y+63, r31	; 0x3f
    89bc:	af 97       	sbiw	r28, 0x2f	; 47
    89be:	f1 01       	movw	r30, r2
    89c0:	37 80       	ldd	r3, Z+7	; 0x07
    89c2:	24 96       	adiw	r28, 0x04	; 4
    89c4:	ff ae       	std	Y+63, r15	; 0x3f
    89c6:	24 97       	sbiw	r28, 0x04	; 4
    89c8:	25 96       	adiw	r28, 0x05	; 5
    89ca:	0f af       	std	Y+63, r16	; 0x3f
    89cc:	25 97       	sbiw	r28, 0x05	; 5
    89ce:	26 96       	adiw	r28, 0x06	; 6
    89d0:	1f af       	std	Y+63, r17	; 0x3f
    89d2:	26 97       	sbiw	r28, 0x06	; 6
    89d4:	aa 96       	adiw	r28, 0x2a	; 42
    89d6:	ff ad       	ldd	r31, Y+63	; 0x3f
    89d8:	aa 97       	sbiw	r28, 0x2a	; 42
    89da:	27 96       	adiw	r28, 0x07	; 7
    89dc:	ff af       	std	Y+63, r31	; 0x3f
    89de:	27 97       	sbiw	r28, 0x07	; 7
    89e0:	ab 96       	adiw	r28, 0x2b	; 43
    89e2:	ef ad       	ldd	r30, Y+63	; 0x3f
    89e4:	ab 97       	sbiw	r28, 0x2b	; 43
    89e6:	28 96       	adiw	r28, 0x08	; 8
    89e8:	ef af       	std	Y+63, r30	; 0x3f
    89ea:	28 97       	sbiw	r28, 0x08	; 8
    89ec:	29 96       	adiw	r28, 0x09	; 9
    89ee:	bf af       	std	Y+63, r27	; 0x3f
    89f0:	29 97       	sbiw	r28, 0x09	; 9
    89f2:	af 96       	adiw	r28, 0x2f	; 47
    89f4:	ff ad       	ldd	r31, Y+63	; 0x3f
    89f6:	af 97       	sbiw	r28, 0x2f	; 47
    89f8:	2a 96       	adiw	r28, 0x0a	; 10
    89fa:	ff af       	std	Y+63, r31	; 0x3f
    89fc:	2a 97       	sbiw	r28, 0x0a	; 10
    89fe:	2b 96       	adiw	r28, 0x0b	; 11
    8a00:	3f ae       	std	Y+63, r3	; 0x3f
    8a02:	2b 97       	sbiw	r28, 0x0b	; 11
    8a04:	89 2b       	or	r24, r25
    8a06:	09 f4       	brne	.+2      	; 0x8a0a <_printf_fn+0x472>
    8a08:	4a c0       	rjmp	.+148    	; 0x8a9e <_printf_fn+0x506>
    8a0a:	2f 2d       	mov	r18, r15
    8a0c:	30 2f       	mov	r19, r16
    8a0e:	41 2f       	mov	r20, r17
    8a10:	aa 96       	adiw	r28, 0x2a	; 42
    8a12:	5f ad       	ldd	r21, Y+63	; 0x3f
    8a14:	aa 97       	sbiw	r28, 0x2a	; 42
    8a16:	6e 2f       	mov	r22, r30
    8a18:	7b 2f       	mov	r23, r27
    8a1a:	8f 2f       	mov	r24, r31
    8a1c:	93 2d       	mov	r25, r3
    8a1e:	a0 e0       	ldi	r26, 0x00	; 0
    8a20:	0e 94 d1 e7 	call	0x1cfa2	; 0x1cfa2 <__cmpdi2_s8>
    8a24:	e4 f5       	brge	.+120    	; 0x8a9e <_printf_fn+0x506>
    8a26:	68 94       	set
    8a28:	96 f8       	bld	r9, 6
    8a2a:	0e 94 83 e7 	call	0x1cf06	; 0x1cf06 <__negdi2>
    8a2e:	24 96       	adiw	r28, 0x04	; 4
    8a30:	2f af       	std	Y+63, r18	; 0x3f
    8a32:	24 97       	sbiw	r28, 0x04	; 4
    8a34:	25 96       	adiw	r28, 0x05	; 5
    8a36:	3f af       	std	Y+63, r19	; 0x3f
    8a38:	25 97       	sbiw	r28, 0x05	; 5
    8a3a:	26 96       	adiw	r28, 0x06	; 6
    8a3c:	4f af       	std	Y+63, r20	; 0x3f
    8a3e:	26 97       	sbiw	r28, 0x06	; 6
    8a40:	27 96       	adiw	r28, 0x07	; 7
    8a42:	5f af       	std	Y+63, r21	; 0x3f
    8a44:	27 97       	sbiw	r28, 0x07	; 7
    8a46:	28 96       	adiw	r28, 0x08	; 8
    8a48:	6f af       	std	Y+63, r22	; 0x3f
    8a4a:	28 97       	sbiw	r28, 0x08	; 8
    8a4c:	29 96       	adiw	r28, 0x09	; 9
    8a4e:	7f af       	std	Y+63, r23	; 0x3f
    8a50:	29 97       	sbiw	r28, 0x09	; 9
    8a52:	2a 96       	adiw	r28, 0x0a	; 10
    8a54:	8f af       	std	Y+63, r24	; 0x3f
    8a56:	2a 97       	sbiw	r28, 0x0a	; 10
    8a58:	2b 96       	adiw	r28, 0x0b	; 11
    8a5a:	9f af       	std	Y+63, r25	; 0x3f
    8a5c:	2b 97       	sbiw	r28, 0x0b	; 11
    8a5e:	1f c0       	rjmp	.+62     	; 0x8a9e <_printf_fn+0x506>
    8a60:	22 e0       	ldi	r18, 0x02	; 2
    8a62:	42 2e       	mov	r4, r18
    8a64:	51 2c       	mov	r5, r1
    8a66:	6c 96       	adiw	r28, 0x1c	; 28
    8a68:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a6a:	6c 97       	sbiw	r28, 0x1c	; 28
    8a6c:	6d 96       	adiw	r28, 0x1d	; 29
    8a6e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a70:	6d 97       	sbiw	r28, 0x1d	; 29
    8a72:	1b c0       	rjmp	.+54     	; 0x8aaa <_printf_fn+0x512>
    8a74:	94 e0       	ldi	r25, 0x04	; 4
    8a76:	49 2e       	mov	r4, r25
    8a78:	51 2c       	mov	r5, r1
    8a7a:	6a 96       	adiw	r28, 0x1a	; 26
    8a7c:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a7e:	6a 97       	sbiw	r28, 0x1a	; 26
    8a80:	6b 96       	adiw	r28, 0x1b	; 27
    8a82:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a84:	6b 97       	sbiw	r28, 0x1b	; 27
    8a86:	11 c0       	rjmp	.+34     	; 0x8aaa <_printf_fn+0x512>
    8a88:	66 96       	adiw	r28, 0x16	; 22
    8a8a:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a8c:	66 97       	sbiw	r28, 0x16	; 22
    8a8e:	67 96       	adiw	r28, 0x17	; 23
    8a90:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a92:	67 97       	sbiw	r28, 0x17	; 23
    8a94:	a3 96       	adiw	r28, 0x23	; 35
    8a96:	1f ae       	std	Y+63, r1	; 0x3f
    8a98:	1e ae       	std	Y+62, r1	; 0x3e
    8a9a:	a3 97       	sbiw	r28, 0x23	; 35
    8a9c:	06 c0       	rjmp	.+12     	; 0x8aaa <_printf_fn+0x512>
    8a9e:	68 96       	adiw	r28, 0x18	; 24
    8aa0:	8f ad       	ldd	r24, Y+63	; 0x3f
    8aa2:	68 97       	sbiw	r28, 0x18	; 24
    8aa4:	69 96       	adiw	r28, 0x19	; 25
    8aa6:	9f ad       	ldd	r25, Y+63	; 0x3f
    8aa8:	69 97       	sbiw	r28, 0x19	; 25
    8aaa:	2f ef       	ldi	r18, 0xFF	; 255
    8aac:	62 1a       	sub	r6, r18
    8aae:	72 0a       	sbc	r7, r18
    8ab0:	82 0a       	sbc	r8, r18
    8ab2:	15 01       	movw	r2, r10
    8ab4:	33 c0       	rjmp	.+102    	; 0x8b1c <_printf_fn+0x584>
    8ab6:	91 fc       	sbrc	r9, 1
    8ab8:	08 c0       	rjmp	.+16     	; 0x8aca <_printf_fn+0x532>
    8aba:	68 94       	set
    8abc:	91 f8       	bld	r9, 1
    8abe:	46 e0       	ldi	r20, 0x06	; 6
    8ac0:	50 e0       	ldi	r21, 0x00	; 0
    8ac2:	a1 96       	adiw	r28, 0x21	; 33
    8ac4:	5f af       	std	Y+63, r21	; 0x3f
    8ac6:	4e af       	std	Y+62, r20	; 0x3e
    8ac8:	a1 97       	sbiw	r28, 0x21	; 33
    8aca:	d1 01       	movw	r26, r2
    8acc:	8d 91       	ld	r24, X+
    8ace:	9d 91       	ld	r25, X+
    8ad0:	0d 90       	ld	r0, X+
    8ad2:	bc 91       	ld	r27, X
    8ad4:	a0 2d       	mov	r26, r0
    8ad6:	a9 96       	adiw	r28, 0x29	; 41
    8ad8:	8c af       	std	Y+60, r24	; 0x3c
    8ada:	9d af       	std	Y+61, r25	; 0x3d
    8adc:	ae af       	std	Y+62, r26	; 0x3e
    8ade:	bf af       	std	Y+63, r27	; 0x3f
    8ae0:	a9 97       	sbiw	r28, 0x29	; 41
    8ae2:	bf ef       	ldi	r27, 0xFF	; 255
    8ae4:	6b 1a       	sub	r6, r27
    8ae6:	7b 0a       	sbc	r7, r27
    8ae8:	8b 0a       	sbc	r8, r27
    8aea:	f1 01       	movw	r30, r2
    8aec:	34 96       	adiw	r30, 0x04	; 4
    8aee:	1f 01       	movw	r2, r30
    8af0:	0f c0       	rjmp	.+30     	; 0x8b10 <_printf_fn+0x578>
    8af2:	ff ef       	ldi	r31, 0xFF	; 255
    8af4:	6f 1a       	sub	r6, r31
    8af6:	7f 0a       	sbc	r7, r31
    8af8:	8f 0a       	sbc	r8, r31
    8afa:	c5 c0       	rjmp	.+394    	; 0x8c86 <_printf_fn+0x6ee>
    8afc:	2f ef       	ldi	r18, 0xFF	; 255
    8afe:	62 1a       	sub	r6, r18
    8b00:	72 0a       	sbc	r7, r18
    8b02:	82 0a       	sbc	r8, r18
    8b04:	11 c1       	rjmp	.+546    	; 0x8d28 <_printf_fn+0x790>
    8b06:	3f ef       	ldi	r19, 0xFF	; 255
    8b08:	63 1a       	sub	r6, r19
    8b0a:	73 0a       	sbc	r7, r19
    8b0c:	83 0a       	sbc	r8, r19
    8b0e:	c8 c0       	rjmp	.+400    	; 0x8ca0 <_printf_fn+0x708>
    8b10:	66 96       	adiw	r28, 0x16	; 22
    8b12:	8f ad       	ldd	r24, Y+63	; 0x3f
    8b14:	66 97       	sbiw	r28, 0x16	; 22
    8b16:	67 96       	adiw	r28, 0x17	; 23
    8b18:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b1a:	67 97       	sbiw	r28, 0x17	; 23
    8b1c:	a3 96       	adiw	r28, 0x23	; 35
    8b1e:	ee ad       	ldd	r30, Y+62	; 0x3e
    8b20:	ff ad       	ldd	r31, Y+63	; 0x3f
    8b22:	a3 97       	sbiw	r28, 0x23	; 35
    8b24:	e2 54       	subi	r30, 0x42	; 66
    8b26:	f1 09       	sbc	r31, r1
    8b28:	e7 33       	cpi	r30, 0x37	; 55
    8b2a:	f1 05       	cpc	r31, r1
    8b2c:	08 f0       	brcs	.+2      	; 0x8b30 <_printf_fn+0x598>
    8b2e:	56 c1       	rjmp	.+684    	; 0x8ddc <_printf_fn+0x844>
    8b30:	e3 58       	subi	r30, 0x83	; 131
    8b32:	ff 4f       	sbci	r31, 0xFF	; 255
    8b34:	0c 94 64 e7 	jmp	0x1cec8	; 0x1cec8 <__tablejump2__>
    8b38:	e8 94       	clt
    8b3a:	94 f8       	bld	r9, 4
    8b3c:	e8 94       	clt
    8b3e:	92 f8       	bld	r9, 2
    8b40:	a9 2c       	mov	r10, r9
    8b42:	b1 2c       	mov	r11, r1
    8b44:	a1 96       	adiw	r28, 0x21	; 33
    8b46:	ce ac       	ldd	r12, Y+62	; 0x3e
    8b48:	df ac       	ldd	r13, Y+63	; 0x3f
    8b4a:	a1 97       	sbiw	r28, 0x21	; 33
    8b4c:	6f 96       	adiw	r28, 0x1f	; 31
    8b4e:	ee ac       	ldd	r14, Y+62	; 0x3e
    8b50:	ff ac       	ldd	r15, Y+63	; 0x3f
    8b52:	6f 97       	sbiw	r28, 0x1f	; 31
    8b54:	0a e0       	ldi	r16, 0x0A	; 10
    8b56:	10 e0       	ldi	r17, 0x00	; 0
    8b58:	19 c0       	rjmp	.+50     	; 0x8b8c <_printf_fn+0x5f4>
    8b5a:	a9 2c       	mov	r10, r9
    8b5c:	b1 2c       	mov	r11, r1
    8b5e:	a1 96       	adiw	r28, 0x21	; 33
    8b60:	ce ac       	ldd	r12, Y+62	; 0x3e
    8b62:	df ac       	ldd	r13, Y+63	; 0x3f
    8b64:	a1 97       	sbiw	r28, 0x21	; 33
    8b66:	6f 96       	adiw	r28, 0x1f	; 31
    8b68:	ee ac       	ldd	r14, Y+62	; 0x3e
    8b6a:	ff ac       	ldd	r15, Y+63	; 0x3f
    8b6c:	6f 97       	sbiw	r28, 0x1f	; 31
    8b6e:	02 e0       	ldi	r16, 0x02	; 2
    8b70:	10 e0       	ldi	r17, 0x00	; 0
    8b72:	0c c0       	rjmp	.+24     	; 0x8b8c <_printf_fn+0x5f4>
    8b74:	a9 2c       	mov	r10, r9
    8b76:	b1 2c       	mov	r11, r1
    8b78:	a1 96       	adiw	r28, 0x21	; 33
    8b7a:	ce ac       	ldd	r12, Y+62	; 0x3e
    8b7c:	df ac       	ldd	r13, Y+63	; 0x3f
    8b7e:	a1 97       	sbiw	r28, 0x21	; 33
    8b80:	6f 96       	adiw	r28, 0x1f	; 31
    8b82:	ee ac       	ldd	r14, Y+62	; 0x3e
    8b84:	ff ac       	ldd	r15, Y+63	; 0x3f
    8b86:	6f 97       	sbiw	r28, 0x1f	; 31
    8b88:	08 e0       	ldi	r16, 0x08	; 8
    8b8a:	10 e0       	ldi	r17, 0x00	; 0
    8b8c:	22 e4       	ldi	r18, 0x42	; 66
    8b8e:	30 e0       	ldi	r19, 0x00	; 0
    8b90:	ae 01       	movw	r20, r28
    8b92:	4f 5f       	subi	r20, 0xFF	; 255
    8b94:	5f 4f       	sbci	r21, 0xFF	; 255
    8b96:	b2 01       	movw	r22, r4
    8b98:	7d d9       	rcall	.-3334   	; 0x7e94 <p_ntoa>
    8b9a:	34 c0       	rjmp	.+104    	; 0x8c04 <_printf_fn+0x66c>
    8b9c:	a9 2c       	mov	r10, r9
    8b9e:	b1 2c       	mov	r11, r1
    8ba0:	a1 96       	adiw	r28, 0x21	; 33
    8ba2:	ce ac       	ldd	r12, Y+62	; 0x3e
    8ba4:	df ac       	ldd	r13, Y+63	; 0x3f
    8ba6:	a1 97       	sbiw	r28, 0x21	; 33
    8ba8:	6f 96       	adiw	r28, 0x1f	; 31
    8baa:	ee ac       	ldd	r14, Y+62	; 0x3e
    8bac:	ff ac       	ldd	r15, Y+63	; 0x3f
    8bae:	6f 97       	sbiw	r28, 0x1f	; 31
    8bb0:	00 e1       	ldi	r16, 0x10	; 16
    8bb2:	10 e0       	ldi	r17, 0x00	; 0
    8bb4:	22 e4       	ldi	r18, 0x42	; 66
    8bb6:	30 e0       	ldi	r19, 0x00	; 0
    8bb8:	ae 01       	movw	r20, r28
    8bba:	4f 5f       	subi	r20, 0xFF	; 255
    8bbc:	5f 4f       	sbci	r21, 0xFF	; 255
    8bbe:	b2 01       	movw	r22, r4
    8bc0:	69 d9       	rcall	.-3374   	; 0x7e94 <p_ntoa>
    8bc2:	6c 01       	movw	r12, r24
    8bc4:	a3 96       	adiw	r28, 0x23	; 35
    8bc6:	6e ad       	ldd	r22, Y+62	; 0x3e
    8bc8:	7f ad       	ldd	r23, Y+63	; 0x3f
    8bca:	a3 97       	sbiw	r28, 0x23	; 35
    8bcc:	67 7f       	andi	r22, 0xF7	; 247
    8bce:	60 35       	cpi	r22, 0x50	; 80
    8bd0:	71 05       	cpc	r23, r1
    8bd2:	09 f0       	breq	.+2      	; 0x8bd6 <_printf_fn+0x63e>
    8bd4:	3f c0       	rjmp	.+126    	; 0x8c54 <_printf_fn+0x6bc>
    8bd6:	3a c0       	rjmp	.+116    	; 0x8c4c <_printf_fn+0x6b4>
    8bd8:	c9 2c       	mov	r12, r9
    8bda:	d1 2c       	mov	r13, r1
    8bdc:	a1 96       	adiw	r28, 0x21	; 33
    8bde:	ee ac       	ldd	r14, Y+62	; 0x3e
    8be0:	ff ac       	ldd	r15, Y+63	; 0x3f
    8be2:	a1 97       	sbiw	r28, 0x21	; 33
    8be4:	6f 96       	adiw	r28, 0x1f	; 31
    8be6:	0e ad       	ldd	r16, Y+62	; 0x3e
    8be8:	1f ad       	ldd	r17, Y+63	; 0x3f
    8bea:	6f 97       	sbiw	r28, 0x1f	; 31
    8bec:	22 e4       	ldi	r18, 0x42	; 66
    8bee:	30 e0       	ldi	r19, 0x00	; 0
    8bf0:	ae 01       	movw	r20, r28
    8bf2:	4f 5f       	subi	r20, 0xFF	; 255
    8bf4:	5f 4f       	sbci	r21, 0xFF	; 255
    8bf6:	a9 96       	adiw	r28, 0x29	; 41
    8bf8:	6c ad       	ldd	r22, Y+60	; 0x3c
    8bfa:	7d ad       	ldd	r23, Y+61	; 0x3d
    8bfc:	8e ad       	ldd	r24, Y+62	; 0x3e
    8bfe:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c00:	a9 97       	sbiw	r28, 0x29	; 41
    8c02:	9d d9       	rcall	.-3270   	; 0x7f3e <p_ftoa>
    8c04:	93 fa       	bst	r9, 3
    8c06:	00 27       	eor	r16, r16
    8c08:	00 f9       	bld	r16, 0
    8c0a:	10 e0       	ldi	r17, 0x00	; 0
    8c0c:	9c 01       	movw	r18, r24
    8c0e:	27 c0       	rjmp	.+78     	; 0x8c5e <_printf_fn+0x6c6>
    8c10:	c9 2c       	mov	r12, r9
    8c12:	d1 2c       	mov	r13, r1
    8c14:	a1 96       	adiw	r28, 0x21	; 33
    8c16:	ee ac       	ldd	r14, Y+62	; 0x3e
    8c18:	ff ac       	ldd	r15, Y+63	; 0x3f
    8c1a:	a1 97       	sbiw	r28, 0x21	; 33
    8c1c:	6f 96       	adiw	r28, 0x1f	; 31
    8c1e:	0e ad       	ldd	r16, Y+62	; 0x3e
    8c20:	1f ad       	ldd	r17, Y+63	; 0x3f
    8c22:	6f 97       	sbiw	r28, 0x1f	; 31
    8c24:	22 e4       	ldi	r18, 0x42	; 66
    8c26:	30 e0       	ldi	r19, 0x00	; 0
    8c28:	ae 01       	movw	r20, r28
    8c2a:	4f 5f       	subi	r20, 0xFF	; 255
    8c2c:	5f 4f       	sbci	r21, 0xFF	; 255
    8c2e:	a9 96       	adiw	r28, 0x29	; 41
    8c30:	6c ad       	ldd	r22, Y+60	; 0x3c
    8c32:	7d ad       	ldd	r23, Y+61	; 0x3d
    8c34:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c36:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c38:	a9 97       	sbiw	r28, 0x29	; 41
    8c3a:	88 da       	rcall	.-2800   	; 0x814c <p_etoa>
    8c3c:	6c 01       	movw	r12, r24
    8c3e:	a3 96       	adiw	r28, 0x23	; 35
    8c40:	4e ad       	ldd	r20, Y+62	; 0x3e
    8c42:	5f ad       	ldd	r21, Y+63	; 0x3f
    8c44:	a3 97       	sbiw	r28, 0x23	; 35
    8c46:	45 34       	cpi	r20, 0x45	; 69
    8c48:	51 05       	cpc	r21, r1
    8c4a:	21 f4       	brne	.+8      	; 0x8c54 <_printf_fn+0x6bc>
    8c4c:	ce 01       	movw	r24, r28
    8c4e:	01 96       	adiw	r24, 0x01	; 1
    8c50:	0e 94 ff 31 	call	0x63fe	; 0x63fe <strupper>
    8c54:	93 fa       	bst	r9, 3
    8c56:	00 27       	eor	r16, r16
    8c58:	00 f9       	bld	r16, 0
    8c5a:	10 e0       	ldi	r17, 0x00	; 0
    8c5c:	96 01       	movw	r18, r12
    8c5e:	6f 96       	adiw	r28, 0x1f	; 31
    8c60:	4e ad       	ldd	r20, Y+62	; 0x3e
    8c62:	5f ad       	ldd	r21, Y+63	; 0x3f
    8c64:	6f 97       	sbiw	r28, 0x1f	; 31
    8c66:	be 01       	movw	r22, r28
    8c68:	6f 5f       	subi	r22, 0xFF	; 255
    8c6a:	7f 4f       	sbci	r23, 0xFF	; 255
    8c6c:	a5 96       	adiw	r28, 0x25	; 37
    8c6e:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c70:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c72:	a5 97       	sbiw	r28, 0x25	; 37
    8c74:	d7 db       	rcall	.-2130   	; 0x8424 <_puts_pad>
    8c76:	b6 c0       	rjmp	.+364    	; 0x8de4 <_printf_fn+0x84c>
    8c78:	a3 96       	adiw	r28, 0x23	; 35
    8c7a:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c7c:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c7e:	a3 97       	sbiw	r28, 0x23	; 35
    8c80:	83 37       	cpi	r24, 0x73	; 115
    8c82:	91 05       	cpc	r25, r1
    8c84:	69 f4       	brne	.+26     	; 0x8ca0 <_printf_fn+0x708>
    8c86:	61 01       	movw	r12, r2
    8c88:	92 e0       	ldi	r25, 0x02	; 2
    8c8a:	c9 0e       	add	r12, r25
    8c8c:	d1 1c       	adc	r13, r1
    8c8e:	d1 01       	movw	r26, r2
    8c90:	6d 91       	ld	r22, X+
    8c92:	7c 91       	ld	r23, X
    8c94:	61 15       	cp	r22, r1
    8c96:	71 05       	cpc	r23, r1
    8c98:	91 f4       	brne	.+36     	; 0x8cbe <_printf_fn+0x726>
    8c9a:	6a e1       	ldi	r22, 0x1A	; 26
    8c9c:	74 e0       	ldi	r23, 0x04	; 4
    8c9e:	0f c0       	rjmp	.+30     	; 0x8cbe <_printf_fn+0x726>
    8ca0:	61 01       	movw	r12, r2
    8ca2:	b2 e0       	ldi	r27, 0x02	; 2
    8ca4:	cb 0e       	add	r12, r27
    8ca6:	d1 1c       	adc	r13, r1
    8ca8:	f1 01       	movw	r30, r2
    8caa:	80 81       	ld	r24, Z
    8cac:	60 96       	adiw	r28, 0x10	; 16
    8cae:	8f af       	std	Y+63, r24	; 0x3f
    8cb0:	60 97       	sbiw	r28, 0x10	; 16
    8cb2:	61 96       	adiw	r28, 0x11	; 17
    8cb4:	1f ae       	std	Y+63, r1	; 0x3f
    8cb6:	61 97       	sbiw	r28, 0x11	; 17
    8cb8:	be 01       	movw	r22, r28
    8cba:	61 5b       	subi	r22, 0xB1	; 177
    8cbc:	7f 4f       	sbci	r23, 0xFF	; 255
    8cbe:	fb 01       	movw	r30, r22
    8cc0:	01 90       	ld	r0, Z+
    8cc2:	00 20       	and	r0, r0
    8cc4:	e9 f7       	brne	.-6      	; 0x8cc0 <_printf_fn+0x728>
    8cc6:	31 97       	sbiw	r30, 0x01	; 1
    8cc8:	e6 1b       	sub	r30, r22
    8cca:	f7 0b       	sbc	r31, r23
    8ccc:	a1 96       	adiw	r28, 0x21	; 33
    8cce:	2e ad       	ldd	r18, Y+62	; 0x3e
    8cd0:	3f ad       	ldd	r19, Y+63	; 0x3f
    8cd2:	a1 97       	sbiw	r28, 0x21	; 33
    8cd4:	23 2b       	or	r18, r19
    8cd6:	21 f4       	brne	.+8      	; 0x8ce0 <_printf_fn+0x748>
    8cd8:	a1 96       	adiw	r28, 0x21	; 33
    8cda:	ff af       	std	Y+63, r31	; 0x3f
    8cdc:	ee af       	std	Y+62, r30	; 0x3e
    8cde:	a1 97       	sbiw	r28, 0x21	; 33
    8ce0:	6f 96       	adiw	r28, 0x1f	; 31
    8ce2:	4e ad       	ldd	r20, Y+62	; 0x3e
    8ce4:	5f ad       	ldd	r21, Y+63	; 0x3f
    8ce6:	6f 97       	sbiw	r28, 0x1f	; 31
    8ce8:	a1 96       	adiw	r28, 0x21	; 33
    8cea:	8e ad       	ldd	r24, Y+62	; 0x3e
    8cec:	9f ad       	ldd	r25, Y+63	; 0x3f
    8cee:	a1 97       	sbiw	r28, 0x21	; 33
    8cf0:	48 17       	cp	r20, r24
    8cf2:	59 07       	cpc	r21, r25
    8cf4:	3c f4       	brge	.+14     	; 0x8d04 <_printf_fn+0x76c>
    8cf6:	41 15       	cp	r20, r1
    8cf8:	51 05       	cpc	r21, r1
    8cfa:	21 f0       	breq	.+8      	; 0x8d04 <_printf_fn+0x76c>
    8cfc:	a1 96       	adiw	r28, 0x21	; 33
    8cfe:	5f af       	std	Y+63, r21	; 0x3f
    8d00:	4e af       	std	Y+62, r20	; 0x3e
    8d02:	a1 97       	sbiw	r28, 0x21	; 33
    8d04:	93 fa       	bst	r9, 3
    8d06:	00 27       	eor	r16, r16
    8d08:	00 f9       	bld	r16, 0
    8d0a:	10 e0       	ldi	r17, 0x00	; 0
    8d0c:	a1 96       	adiw	r28, 0x21	; 33
    8d0e:	2e ad       	ldd	r18, Y+62	; 0x3e
    8d10:	3f ad       	ldd	r19, Y+63	; 0x3f
    8d12:	a1 97       	sbiw	r28, 0x21	; 33
    8d14:	6f 96       	adiw	r28, 0x1f	; 31
    8d16:	4e ad       	ldd	r20, Y+62	; 0x3e
    8d18:	5f ad       	ldd	r21, Y+63	; 0x3f
    8d1a:	6f 97       	sbiw	r28, 0x1f	; 31
    8d1c:	a5 96       	adiw	r28, 0x25	; 37
    8d1e:	8e ad       	ldd	r24, Y+62	; 0x3e
    8d20:	9f ad       	ldd	r25, Y+63	; 0x3f
    8d22:	a5 97       	sbiw	r28, 0x25	; 37
    8d24:	7f db       	rcall	.-2306   	; 0x8424 <_puts_pad>
    8d26:	45 c0       	rjmp	.+138    	; 0x8db2 <_printf_fn+0x81a>
    8d28:	61 01       	movw	r12, r2
    8d2a:	92 e0       	ldi	r25, 0x02	; 2
    8d2c:	c9 0e       	add	r12, r25
    8d2e:	d1 1c       	adc	r13, r1
    8d30:	d1 01       	movw	r26, r2
    8d32:	2d 90       	ld	r2, X+
    8d34:	3c 90       	ld	r3, X
    8d36:	41 2c       	mov	r4, r1
    8d38:	21 14       	cp	r2, r1
    8d3a:	31 04       	cpc	r3, r1
    8d3c:	41 04       	cpc	r4, r1
    8d3e:	29 f4       	brne	.+10     	; 0x8d4a <_printf_fn+0x7b2>
    8d40:	ae 96       	adiw	r28, 0x2e	; 46
    8d42:	2d ac       	ldd	r2, Y+61	; 0x3d
    8d44:	3e ac       	ldd	r3, Y+62	; 0x3e
    8d46:	4f ac       	ldd	r4, Y+63	; 0x3f
    8d48:	ae 97       	sbiw	r28, 0x2e	; 46
    8d4a:	84 2d       	mov	r24, r4
    8d4c:	b1 01       	movw	r22, r2
    8d4e:	08 dc       	rcall	.-2032   	; 0x8560 <strlen_X>
    8d50:	a1 96       	adiw	r28, 0x21	; 33
    8d52:	ee ad       	ldd	r30, Y+62	; 0x3e
    8d54:	ff ad       	ldd	r31, Y+63	; 0x3f
    8d56:	a1 97       	sbiw	r28, 0x21	; 33
    8d58:	ef 2b       	or	r30, r31
    8d5a:	31 f4       	brne	.+12     	; 0x8d68 <_printf_fn+0x7d0>
    8d5c:	a0 96       	adiw	r28, 0x20	; 32
    8d5e:	8f af       	std	Y+63, r24	; 0x3f
    8d60:	a0 97       	sbiw	r28, 0x20	; 32
    8d62:	a1 96       	adiw	r28, 0x21	; 33
    8d64:	9f af       	std	Y+63, r25	; 0x3f
    8d66:	a1 97       	sbiw	r28, 0x21	; 33
    8d68:	6f 96       	adiw	r28, 0x1f	; 31
    8d6a:	2e ad       	ldd	r18, Y+62	; 0x3e
    8d6c:	3f ad       	ldd	r19, Y+63	; 0x3f
    8d6e:	6f 97       	sbiw	r28, 0x1f	; 31
    8d70:	a1 96       	adiw	r28, 0x21	; 33
    8d72:	4e ad       	ldd	r20, Y+62	; 0x3e
    8d74:	5f ad       	ldd	r21, Y+63	; 0x3f
    8d76:	a1 97       	sbiw	r28, 0x21	; 33
    8d78:	24 17       	cp	r18, r20
    8d7a:	35 07       	cpc	r19, r21
    8d7c:	3c f4       	brge	.+14     	; 0x8d8c <_printf_fn+0x7f4>
    8d7e:	21 15       	cp	r18, r1
    8d80:	31 05       	cpc	r19, r1
    8d82:	21 f0       	breq	.+8      	; 0x8d8c <_printf_fn+0x7f4>
    8d84:	a1 96       	adiw	r28, 0x21	; 33
    8d86:	3f af       	std	Y+63, r19	; 0x3f
    8d88:	2e af       	std	Y+62, r18	; 0x3e
    8d8a:	a1 97       	sbiw	r28, 0x21	; 33
    8d8c:	93 fa       	bst	r9, 3
    8d8e:	ee 24       	eor	r14, r14
    8d90:	e0 f8       	bld	r14, 0
    8d92:	f1 2c       	mov	r15, r1
    8d94:	a1 96       	adiw	r28, 0x21	; 33
    8d96:	0e ad       	ldd	r16, Y+62	; 0x3e
    8d98:	1f ad       	ldd	r17, Y+63	; 0x3f
    8d9a:	a1 97       	sbiw	r28, 0x21	; 33
    8d9c:	6f 96       	adiw	r28, 0x1f	; 31
    8d9e:	2e ad       	ldd	r18, Y+62	; 0x3e
    8da0:	3f ad       	ldd	r19, Y+63	; 0x3f
    8da2:	6f 97       	sbiw	r28, 0x1f	; 31
    8da4:	64 2d       	mov	r22, r4
    8da6:	a1 01       	movw	r20, r2
    8da8:	a5 96       	adiw	r28, 0x25	; 37
    8daa:	8e ad       	ldd	r24, Y+62	; 0x3e
    8dac:	9f ad       	ldd	r25, Y+63	; 0x3f
    8dae:	a5 97       	sbiw	r28, 0x25	; 37
    8db0:	7b db       	rcall	.-2314   	; 0x84a8 <_puts_pad_X>
    8db2:	16 01       	movw	r2, r12
    8db4:	17 c0       	rjmp	.+46     	; 0x8de4 <_printf_fn+0x84c>
    8db6:	f6 01       	movw	r30, r12
    8db8:	5e 2d       	mov	r21, r14
    8dba:	0e 94 ca e7 	call	0x1cf94	; 0x1cf94 <__xload_1>
    8dbe:	66 23       	and	r22, r22
    8dc0:	89 f0       	breq	.+34     	; 0x8de4 <_printf_fn+0x84c>
    8dc2:	5f ef       	ldi	r21, 0xFF	; 255
    8dc4:	c5 1a       	sub	r12, r21
    8dc6:	d5 0a       	sbc	r13, r21
    8dc8:	e5 0a       	sbc	r14, r21
    8dca:	a5 96       	adiw	r28, 0x25	; 37
    8dcc:	ae ad       	ldd	r26, Y+62	; 0x3e
    8dce:	bf ad       	ldd	r27, Y+63	; 0x3f
    8dd0:	a5 97       	sbiw	r28, 0x25	; 37
    8dd2:	ed 91       	ld	r30, X+
    8dd4:	fc 91       	ld	r31, X
    8dd6:	11 97       	sbiw	r26, 0x01	; 1
    8dd8:	cd 01       	movw	r24, r26
    8dda:	09 95       	icall
    8ddc:	6c 14       	cp	r6, r12
    8dde:	7d 04       	cpc	r7, r13
    8de0:	8e 04       	cpc	r8, r14
    8de2:	48 f7       	brcc	.-46     	; 0x8db6 <_printf_fn+0x81e>
    8de4:	e8 2c       	mov	r14, r8
    8de6:	63 01       	movw	r12, r6
    8de8:	0f cc       	rjmp	.-2018   	; 0x8608 <_printf_fn+0x70>
    8dea:	82 e0       	ldi	r24, 0x02	; 2
    8dec:	48 2e       	mov	r4, r24
    8dee:	51 2c       	mov	r5, r1
    8df0:	0d cd       	rjmp	.-1510   	; 0x880c <_printf_fn+0x274>
    8df2:	f2 e0       	ldi	r31, 0x02	; 2
    8df4:	4f 16       	cp	r4, r31
    8df6:	51 04       	cpc	r5, r1
    8df8:	61 f4       	brne	.+24     	; 0x8e12 <_printf_fn+0x87a>
    8dfa:	51 01       	movw	r10, r2
    8dfc:	b2 e0       	ldi	r27, 0x02	; 2
    8dfe:	ab 0e       	add	r10, r27
    8e00:	b1 1c       	adc	r11, r1
    8e02:	f1 01       	movw	r30, r2
    8e04:	80 81       	ld	r24, Z
    8e06:	91 81       	ldd	r25, Z+1	; 0x01
    8e08:	65 96       	adiw	r28, 0x15	; 21
    8e0a:	9f af       	std	Y+63, r25	; 0x3f
    8e0c:	8e af       	std	Y+62, r24	; 0x3e
    8e0e:	65 97       	sbiw	r28, 0x15	; 21
    8e10:	7e cd       	rjmp	.-1284   	; 0x890e <_printf_fn+0x376>
    8e12:	f4 e0       	ldi	r31, 0x04	; 4
    8e14:	4f 16       	cp	r4, r31
    8e16:	51 04       	cpc	r5, r1
    8e18:	09 f0       	breq	.+2      	; 0x8e1c <_printf_fn+0x884>
    8e1a:	b2 cd       	rjmp	.-1180   	; 0x8980 <_printf_fn+0x3e8>
    8e1c:	51 01       	movw	r10, r2
    8e1e:	24 e0       	ldi	r18, 0x04	; 4
    8e20:	a2 0e       	add	r10, r18
    8e22:	b1 1c       	adc	r11, r1
    8e24:	f1 01       	movw	r30, r2
    8e26:	80 81       	ld	r24, Z
    8e28:	91 81       	ldd	r25, Z+1	; 0x01
    8e2a:	a2 81       	ldd	r26, Z+2	; 0x02
    8e2c:	b3 81       	ldd	r27, Z+3	; 0x03
    8e2e:	2f 96       	adiw	r28, 0x0f	; 15
    8e30:	8c af       	std	Y+60, r24	; 0x3c
    8e32:	9d af       	std	Y+61, r25	; 0x3d
    8e34:	ae af       	std	Y+62, r26	; 0x3e
    8e36:	bf af       	std	Y+63, r27	; 0x3f
    8e38:	2f 97       	sbiw	r28, 0x0f	; 15
    8e3a:	90 cd       	rjmp	.-1248   	; 0x895c <_printf_fn+0x3c4>
    8e3c:	c2 59       	subi	r28, 0x92	; 146
    8e3e:	df 4f       	sbci	r29, 0xFF	; 255
    8e40:	e2 e1       	ldi	r30, 0x12	; 18
    8e42:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

00008e46 <vsnprintf_P>:
    8e46:	a8 e0       	ldi	r26, 0x08	; 8
    8e48:	b0 e0       	ldi	r27, 0x00	; 0
    8e4a:	e9 e2       	ldi	r30, 0x29	; 41
    8e4c:	f7 e4       	ldi	r31, 0x47	; 71
    8e4e:	0c 94 9f e7 	jmp	0x1cf3e	; 0x1cf3e <__prologue_saves__+0x18>
    8e52:	7c 01       	movw	r14, r24
    8e54:	cb 01       	movw	r24, r22
    8e56:	64 2f       	mov	r22, r20
    8e58:	a9 01       	movw	r20, r18
    8e5a:	98 01       	movw	r18, r16
    8e5c:	f7 01       	movw	r30, r14
    8e5e:	10 82       	st	Z, r1
    8e60:	e1 e8       	ldi	r30, 0x81	; 129
    8e62:	fe e3       	ldi	r31, 0x3E	; 62
    8e64:	fa 83       	std	Y+2, r31	; 0x02
    8e66:	e9 83       	std	Y+1, r30	; 0x01
    8e68:	9e 83       	std	Y+6, r25	; 0x06
    8e6a:	8d 83       	std	Y+5, r24	; 0x05
    8e6c:	18 86       	std	Y+8, r1	; 0x08
    8e6e:	1f 82       	std	Y+7, r1	; 0x07
    8e70:	fc 82       	std	Y+4, r15	; 0x04
    8e72:	eb 82       	std	Y+3, r14	; 0x03
    8e74:	ce 01       	movw	r24, r28
    8e76:	01 96       	adiw	r24, 0x01	; 1
    8e78:	8f db       	rcall	.-2274   	; 0x8598 <_printf_fn>
    8e7a:	f7 01       	movw	r30, r14
    8e7c:	01 90       	ld	r0, Z+
    8e7e:	00 20       	and	r0, r0
    8e80:	e9 f7       	brne	.-6      	; 0x8e7c <vsnprintf_P+0x36>
    8e82:	cf 01       	movw	r24, r30
    8e84:	01 97       	sbiw	r24, 0x01	; 1
    8e86:	8e 19       	sub	r24, r14
    8e88:	9f 09       	sbc	r25, r15
    8e8a:	28 96       	adiw	r28, 0x08	; 8
    8e8c:	e6 e0       	ldi	r30, 0x06	; 6
    8e8e:	0c 94 bb e7 	jmp	0x1cf76	; 0x1cf76 <__epilogue_restores__+0x18>

00008e92 <snprintf_P>:
    8e92:	a0 e0       	ldi	r26, 0x00	; 0
    8e94:	b0 e0       	ldi	r27, 0x00	; 0
    8e96:	ef e4       	ldi	r30, 0x4F	; 79
    8e98:	f7 e4       	ldi	r31, 0x47	; 71
    8e9a:	0c 94 a1 e7 	jmp	0x1cf42	; 0x1cf42 <__prologue_saves__+0x1c>
    8e9e:	8e 01       	movw	r16, r28
    8ea0:	02 5f       	subi	r16, 0xF2	; 242
    8ea2:	1f 4f       	sbci	r17, 0xFF	; 255
    8ea4:	2b 85       	ldd	r18, Y+11	; 0x0b
    8ea6:	3c 85       	ldd	r19, Y+12	; 0x0c
    8ea8:	4d 85       	ldd	r20, Y+13	; 0x0d
    8eaa:	69 85       	ldd	r22, Y+9	; 0x09
    8eac:	7a 85       	ldd	r23, Y+10	; 0x0a
    8eae:	8f 81       	ldd	r24, Y+7	; 0x07
    8eb0:	98 85       	ldd	r25, Y+8	; 0x08
    8eb2:	c9 df       	rcall	.-110    	; 0x8e46 <vsnprintf_P>
    8eb4:	e4 e0       	ldi	r30, 0x04	; 4
    8eb6:	0c 94 bd e7 	jmp	0x1cf7a	; 0x1cf7a <__epilogue_restores__+0x1c>

00008eba <sprintf_P>:
    8eba:	a0 e0       	ldi	r26, 0x00	; 0
    8ebc:	b0 e0       	ldi	r27, 0x00	; 0
    8ebe:	e3 e6       	ldi	r30, 0x63	; 99
    8ec0:	f7 e4       	ldi	r31, 0x47	; 71
    8ec2:	0c 94 a1 e7 	jmp	0x1cf42	; 0x1cf42 <__prologue_saves__+0x1c>
    8ec6:	8e 01       	movw	r16, r28
    8ec8:	04 5f       	subi	r16, 0xF4	; 244
    8eca:	1f 4f       	sbci	r17, 0xFF	; 255
    8ecc:	29 85       	ldd	r18, Y+9	; 0x09
    8ece:	3a 85       	ldd	r19, Y+10	; 0x0a
    8ed0:	4b 85       	ldd	r20, Y+11	; 0x0b
    8ed2:	60 e0       	ldi	r22, 0x00	; 0
    8ed4:	74 e0       	ldi	r23, 0x04	; 4
    8ed6:	8f 81       	ldd	r24, Y+7	; 0x07
    8ed8:	98 85       	ldd	r25, Y+8	; 0x08
    8eda:	b5 df       	rcall	.-150    	; 0x8e46 <vsnprintf_P>
    8edc:	e4 e0       	ldi	r30, 0x04	; 4
    8ede:	0c 94 bd e7 	jmp	0x1cf7a	; 0x1cf7a <__epilogue_restores__+0x1c>

00008ee2 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE
int
printf_P(__memx const char *format, ...)
{
    8ee2:	a8 e0       	ldi	r26, 0x08	; 8
    8ee4:	b0 e0       	ldi	r27, 0x00	; 0
    8ee6:	e7 e7       	ldi	r30, 0x77	; 119
    8ee8:	f7 e4       	ldi	r31, 0x47	; 71
    8eea:	0c 94 a3 e7 	jmp	0x1cf46	; 0x1cf46 <__prologue_saves__+0x20>
    8eee:	9e 01       	movw	r18, r28
    8ef0:	23 5f       	subi	r18, 0xF3	; 243
    8ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    8ef4:	f9 01       	movw	r30, r18
    8ef6:	41 91       	ld	r20, Z+
    8ef8:	51 91       	ld	r21, Z+
    8efa:	61 91       	ld	r22, Z+
    8efc:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8efe:	8a e9       	ldi	r24, 0x9A	; 154
    8f00:	9e e3       	ldi	r25, 0x3E	; 62
    8f02:	9a 83       	std	Y+2, r25	; 0x02
    8f04:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8f06:	18 86       	std	Y+8, r1	; 0x08
    8f08:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8f0a:	ce 01       	movw	r24, r28
    8f0c:	01 96       	adiw	r24, 0x01	; 1
    8f0e:	44 db       	rcall	.-2424   	; 0x8598 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8f10:	8f 81       	ldd	r24, Y+7	; 0x07
    8f12:	98 85       	ldd	r25, Y+8	; 0x08
    8f14:	28 96       	adiw	r28, 0x08	; 8
    8f16:	e2 e0       	ldi	r30, 0x02	; 2
    8f18:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00008f1c <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8f1c:	9c 01       	movw	r18, r24
    8f1e:	20 53       	subi	r18, 0x30	; 48
    8f20:	31 09       	sbc	r19, r1
    8f22:	2a 30       	cpi	r18, 0x0A	; 10
    8f24:	31 05       	cpc	r19, r1
    8f26:	10 f4       	brcc	.+4      	; 0x8f2c <atodigit+0x10>
    8f28:	c9 01       	movw	r24, r18
    8f2a:	10 c0       	rjmp	.+32     	; 0x8f4c <atodigit+0x30>
    8f2c:	9c 01       	movw	r18, r24
    8f2e:	21 54       	subi	r18, 0x41	; 65
    8f30:	31 09       	sbc	r19, r1
    8f32:	26 30       	cpi	r18, 0x06	; 6
    8f34:	31 05       	cpc	r19, r1
    8f36:	10 f4       	brcc	.+4      	; 0x8f3c <atodigit+0x20>
    8f38:	c7 97       	sbiw	r24, 0x37	; 55
    8f3a:	08 c0       	rjmp	.+16     	; 0x8f4c <atodigit+0x30>
    8f3c:	9c 01       	movw	r18, r24
    8f3e:	21 56       	subi	r18, 0x61	; 97
    8f40:	31 09       	sbc	r19, r1
    8f42:	26 30       	cpi	r18, 0x06	; 6
    8f44:	31 05       	cpc	r19, r1
    8f46:	28 f4       	brcc	.+10     	; 0x8f52 <atodigit+0x36>
    8f48:	87 55       	subi	r24, 0x57	; 87
    8f4a:	91 09       	sbc	r25, r1
    8f4c:	86 17       	cp	r24, r22
    8f4e:	97 07       	cpc	r25, r23
    8f50:	14 f0       	brlt	.+4      	; 0x8f56 <atodigit+0x3a>
    8f52:	8f ef       	ldi	r24, 0xFF	; 255
    8f54:	9f ef       	ldi	r25, 0xFF	; 255
    8f56:	08 95       	ret

00008f58 <strtol>:
    8f58:	a0 e0       	ldi	r26, 0x00	; 0
    8f5a:	b0 e0       	ldi	r27, 0x00	; 0
    8f5c:	e2 eb       	ldi	r30, 0xB2	; 178
    8f5e:	f7 e4       	ldi	r31, 0x47	; 71
    8f60:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
    8f64:	2b 01       	movw	r4, r22
    8f66:	8a 01       	movw	r16, r20
    8f68:	ec 01       	movw	r28, r24
    8f6a:	28 81       	ld	r18, Y
    8f6c:	01 96       	adiw	r24, 0x01	; 1
    8f6e:	20 32       	cpi	r18, 0x20	; 32
    8f70:	d9 f3       	breq	.-10     	; 0x8f68 <strtol+0x10>
    8f72:	29 30       	cpi	r18, 0x09	; 9
    8f74:	c9 f3       	breq	.-14     	; 0x8f68 <strtol+0x10>
    8f76:	2d 32       	cpi	r18, 0x2D	; 45
    8f78:	29 f4       	brne	.+10     	; 0x8f84 <strtol+0x2c>
    8f7a:	ec 01       	movw	r28, r24
    8f7c:	66 24       	eor	r6, r6
    8f7e:	63 94       	inc	r6
    8f80:	71 2c       	mov	r7, r1
    8f82:	05 c0       	rjmp	.+10     	; 0x8f8e <strtol+0x36>
    8f84:	2b 32       	cpi	r18, 0x2B	; 43
    8f86:	09 f4       	brne	.+2      	; 0x8f8a <strtol+0x32>
    8f88:	ec 01       	movw	r28, r24
    8f8a:	61 2c       	mov	r6, r1
    8f8c:	71 2c       	mov	r7, r1
    8f8e:	9e 01       	movw	r18, r28
    8f90:	2f 5f       	subi	r18, 0xFF	; 255
    8f92:	3f 4f       	sbci	r19, 0xFF	; 255
    8f94:	88 81       	ld	r24, Y
    8f96:	80 33       	cpi	r24, 0x30	; 48
    8f98:	11 f4       	brne	.+4      	; 0x8f9e <strtol+0x46>
    8f9a:	e9 01       	movw	r28, r18
    8f9c:	f8 cf       	rjmp	.-16     	; 0x8f8e <strtol+0x36>
    8f9e:	c1 2c       	mov	r12, r1
    8fa0:	d1 2c       	mov	r13, r1
    8fa2:	76 01       	movw	r14, r12
    8fa4:	48 01       	movw	r8, r16
    8fa6:	01 2e       	mov	r0, r17
    8fa8:	00 0c       	add	r0, r0
    8faa:	aa 08       	sbc	r10, r10
    8fac:	bb 08       	sbc	r11, r11
    8fae:	3c 2e       	mov	r3, r28
    8fb0:	2d 2e       	mov	r2, r29
    8fb2:	89 91       	ld	r24, Y+
    8fb4:	88 23       	and	r24, r24
    8fb6:	31 f0       	breq	.+12     	; 0x8fc4 <strtol+0x6c>
    8fb8:	b8 01       	movw	r22, r16
    8fba:	90 e0       	ldi	r25, 0x00	; 0
    8fbc:	af df       	rcall	.-162    	; 0x8f1c <atodigit>
    8fbe:	fc 01       	movw	r30, r24
    8fc0:	97 ff       	sbrs	r25, 7
    8fc2:	0c c0       	rjmp	.+24     	; 0x8fdc <strtol+0x84>
    8fc4:	61 14       	cp	r6, r1
    8fc6:	71 04       	cpc	r7, r1
    8fc8:	c1 f0       	breq	.+48     	; 0x8ffa <strtol+0xa2>
    8fca:	f0 94       	com	r15
    8fcc:	e0 94       	com	r14
    8fce:	d0 94       	com	r13
    8fd0:	c0 94       	com	r12
    8fd2:	c1 1c       	adc	r12, r1
    8fd4:	d1 1c       	adc	r13, r1
    8fd6:	e1 1c       	adc	r14, r1
    8fd8:	f1 1c       	adc	r15, r1
    8fda:	0f c0       	rjmp	.+30     	; 0x8ffa <strtol+0xa2>
    8fdc:	a5 01       	movw	r20, r10
    8fde:	94 01       	movw	r18, r8
    8fe0:	c7 01       	movw	r24, r14
    8fe2:	b6 01       	movw	r22, r12
    8fe4:	0e 94 e4 e6 	call	0x1cdc8	; 0x1cdc8 <__mulsi3>
    8fe8:	6f 01       	movw	r12, r30
    8fea:	ff 0f       	add	r31, r31
    8fec:	ee 08       	sbc	r14, r14
    8fee:	ff 08       	sbc	r15, r15
    8ff0:	c6 0e       	add	r12, r22
    8ff2:	d7 1e       	adc	r13, r23
    8ff4:	e8 1e       	adc	r14, r24
    8ff6:	f9 1e       	adc	r15, r25
    8ff8:	da cf       	rjmp	.-76     	; 0x8fae <strtol+0x56>
    8ffa:	41 14       	cp	r4, r1
    8ffc:	51 04       	cpc	r5, r1
    8ffe:	19 f0       	breq	.+6      	; 0x9006 <strtol+0xae>
    9000:	f2 01       	movw	r30, r4
    9002:	30 82       	st	Z, r3
    9004:	21 82       	std	Z+1, r2	; 0x01
    9006:	c7 01       	movw	r24, r14
    9008:	b6 01       	movw	r22, r12
    900a:	cd b7       	in	r28, 0x3d	; 61
    900c:	de b7       	in	r29, 0x3e	; 62
    900e:	e2 e1       	ldi	r30, 0x12	; 18
    9010:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

00009014 <atoi>:
MEMSPACE
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    9014:	4a e0       	ldi	r20, 0x0A	; 10
    9016:	50 e0       	ldi	r21, 0x00	; 0
    9018:	60 e0       	ldi	r22, 0x00	; 0
    901a:	70 e0       	ldi	r23, 0x00	; 0
    901c:	9d df       	rcall	.-198    	; 0x8f58 <strtol>
    return((int)num);
}
    901e:	cb 01       	movw	r24, r22
    9020:	08 95       	ret

00009022 <atol>:
MEMSPACE
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    9022:	4a e0       	ldi	r20, 0x0A	; 10
    9024:	50 e0       	ldi	r21, 0x00	; 0
    9026:	60 e0       	ldi	r22, 0x00	; 0
    9028:	70 e0       	ldi	r23, 0x00	; 0
    902a:	96 cf       	rjmp	.-212    	; 0x8f58 <strtol>
    return(num);
}
    902c:	08 95       	ret

0000902e <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    902e:	fc 01       	movw	r30, r24
    9030:	62 81       	ldd	r22, Z+2	; 0x02
    9032:	73 81       	ldd	r23, Z+3	; 0x03
    9034:	cb 01       	movw	r24, r22
    9036:	a0 e0       	ldi	r26, 0x00	; 0
    9038:	b0 e0       	ldi	r27, 0x00	; 0
    903a:	ba 2f       	mov	r27, r26
    903c:	a9 2f       	mov	r26, r25
    903e:	98 2f       	mov	r25, r24
    9040:	88 27       	eor	r24, r24
    9042:	21 81       	ldd	r18, Z+1	; 0x01
    9044:	82 2b       	or	r24, r18
    9046:	ba 2f       	mov	r27, r26
    9048:	a9 2f       	mov	r26, r25
    904a:	98 2f       	mov	r25, r24
    904c:	88 27       	eor	r24, r24
    904e:	20 81       	ld	r18, Z
    9050:	bc 01       	movw	r22, r24
    9052:	cd 01       	movw	r24, r26
    9054:	62 2b       	or	r22, r18
    9056:	08 95       	ret

00009058 <st_dword>:
    9058:	fc 01       	movw	r30, r24
    905a:	40 83       	st	Z, r20
    905c:	51 83       	std	Z+1, r21	; 0x01
    905e:	62 83       	std	Z+2, r22	; 0x02
    9060:	73 83       	std	Z+3, r23	; 0x03
    9062:	08 95       	ret

00009064 <mem_set>:
    9064:	48 0f       	add	r20, r24
    9066:	59 1f       	adc	r21, r25
    9068:	fc 01       	movw	r30, r24
    906a:	61 93       	st	Z+, r22
    906c:	cf 01       	movw	r24, r30
    906e:	e4 17       	cp	r30, r20
    9070:	f5 07       	cpc	r31, r21
    9072:	d1 f7       	brne	.-12     	; 0x9068 <mem_set+0x4>
    9074:	08 95       	ret

00009076 <mem_cmp>:
    9076:	dc 01       	movw	r26, r24
    9078:	fb 01       	movw	r30, r22
    907a:	2d 91       	ld	r18, X+
    907c:	81 91       	ld	r24, Z+
    907e:	30 e0       	ldi	r19, 0x00	; 0
    9080:	b9 01       	movw	r22, r18
    9082:	68 1b       	sub	r22, r24
    9084:	71 09       	sbc	r23, r1
    9086:	cb 01       	movw	r24, r22
    9088:	41 50       	subi	r20, 0x01	; 1
    908a:	51 09       	sbc	r21, r1
    908c:	11 f0       	breq	.+4      	; 0x9092 <mem_cmp+0x1c>
    908e:	00 97       	sbiw	r24, 0x00	; 0
    9090:	a1 f3       	breq	.-24     	; 0x907a <mem_cmp+0x4>
    9092:	08 95       	ret

00009094 <clst2sect>:
    9094:	0f 93       	push	r16
    9096:	1f 93       	push	r17
    9098:	fc 01       	movw	r30, r24
    909a:	9a 01       	movw	r18, r20
    909c:	ab 01       	movw	r20, r22
    909e:	22 50       	subi	r18, 0x02	; 2
    90a0:	31 09       	sbc	r19, r1
    90a2:	41 09       	sbc	r20, r1
    90a4:	51 09       	sbc	r21, r1
    90a6:	81 8d       	ldd	r24, Z+25	; 0x19
    90a8:	92 8d       	ldd	r25, Z+26	; 0x1a
    90aa:	a3 8d       	ldd	r26, Z+27	; 0x1b
    90ac:	b4 8d       	ldd	r27, Z+28	; 0x1c
    90ae:	02 97       	sbiw	r24, 0x02	; 2
    90b0:	a1 09       	sbc	r26, r1
    90b2:	b1 09       	sbc	r27, r1
    90b4:	28 17       	cp	r18, r24
    90b6:	39 07       	cpc	r19, r25
    90b8:	4a 07       	cpc	r20, r26
    90ba:	5b 07       	cpc	r21, r27
    90bc:	68 f4       	brcc	.+26     	; 0x90d8 <clst2sect+0x44>
    90be:	a1 85       	ldd	r26, Z+9	; 0x09
    90c0:	b2 85       	ldd	r27, Z+10	; 0x0a
    90c2:	0e 94 73 e7 	call	0x1cee6	; 0x1cee6 <__muluhisi3>
    90c6:	05 a5       	ldd	r16, Z+45	; 0x2d
    90c8:	16 a5       	ldd	r17, Z+46	; 0x2e
    90ca:	27 a5       	ldd	r18, Z+47	; 0x2f
    90cc:	30 a9       	ldd	r19, Z+48	; 0x30
    90ce:	60 0f       	add	r22, r16
    90d0:	71 1f       	adc	r23, r17
    90d2:	82 1f       	adc	r24, r18
    90d4:	93 1f       	adc	r25, r19
    90d6:	03 c0       	rjmp	.+6      	; 0x90de <clst2sect+0x4a>
    90d8:	60 e0       	ldi	r22, 0x00	; 0
    90da:	70 e0       	ldi	r23, 0x00	; 0
    90dc:	cb 01       	movw	r24, r22
    90de:	1f 91       	pop	r17
    90e0:	0f 91       	pop	r16
    90e2:	08 95       	ret

000090e4 <clmt_clust>:
    90e4:	cf 93       	push	r28
    90e6:	df 93       	push	r29
    90e8:	fc 01       	movw	r30, r24
    90ea:	c2 a1       	ldd	r28, Z+34	; 0x22
    90ec:	d3 a1       	ldd	r29, Z+35	; 0x23
    90ee:	24 96       	adiw	r28, 0x04	; 4
    90f0:	cb 01       	movw	r24, r22
    90f2:	ba 01       	movw	r22, r20
    90f4:	29 e0       	ldi	r18, 0x09	; 9
    90f6:	96 95       	lsr	r25
    90f8:	87 95       	ror	r24
    90fa:	77 95       	ror	r23
    90fc:	67 95       	ror	r22
    90fe:	2a 95       	dec	r18
    9100:	d1 f7       	brne	.-12     	; 0x90f6 <clmt_clust+0x12>
    9102:	01 90       	ld	r0, Z+
    9104:	f0 81       	ld	r31, Z
    9106:	e0 2d       	mov	r30, r0
    9108:	21 85       	ldd	r18, Z+9	; 0x09
    910a:	32 85       	ldd	r19, Z+10	; 0x0a
    910c:	40 e0       	ldi	r20, 0x00	; 0
    910e:	50 e0       	ldi	r21, 0x00	; 0
    9110:	0e 94 26 e7 	call	0x1ce4c	; 0x1ce4c <__udivmodsi4>
    9114:	88 81       	ld	r24, Y
    9116:	99 81       	ldd	r25, Y+1	; 0x01
    9118:	aa 81       	ldd	r26, Y+2	; 0x02
    911a:	bb 81       	ldd	r27, Y+3	; 0x03
    911c:	00 97       	sbiw	r24, 0x00	; 0
    911e:	a1 05       	cpc	r26, r1
    9120:	b1 05       	cpc	r27, r1
    9122:	b1 f0       	breq	.+44     	; 0x9150 <clmt_clust+0x6c>
    9124:	28 17       	cp	r18, r24
    9126:	39 07       	cpc	r19, r25
    9128:	4a 07       	cpc	r20, r26
    912a:	5b 07       	cpc	r21, r27
    912c:	30 f0       	brcs	.+12     	; 0x913a <clmt_clust+0x56>
    912e:	28 1b       	sub	r18, r24
    9130:	39 0b       	sbc	r19, r25
    9132:	4a 0b       	sbc	r20, r26
    9134:	5b 0b       	sbc	r21, r27
    9136:	28 96       	adiw	r28, 0x08	; 8
    9138:	ed cf       	rjmp	.-38     	; 0x9114 <clmt_clust+0x30>
    913a:	8c 81       	ldd	r24, Y+4	; 0x04
    913c:	9d 81       	ldd	r25, Y+5	; 0x05
    913e:	ae 81       	ldd	r26, Y+6	; 0x06
    9140:	bf 81       	ldd	r27, Y+7	; 0x07
    9142:	bc 01       	movw	r22, r24
    9144:	cd 01       	movw	r24, r26
    9146:	62 0f       	add	r22, r18
    9148:	73 1f       	adc	r23, r19
    914a:	84 1f       	adc	r24, r20
    914c:	95 1f       	adc	r25, r21
    914e:	03 c0       	rjmp	.+6      	; 0x9156 <clmt_clust+0x72>
    9150:	60 e0       	ldi	r22, 0x00	; 0
    9152:	70 e0       	ldi	r23, 0x00	; 0
    9154:	cb 01       	movw	r24, r22
    9156:	df 91       	pop	r29
    9158:	cf 91       	pop	r28
    915a:	08 95       	ret

0000915c <sum_sfn>:
    915c:	fc 01       	movw	r30, r24
    915e:	9c 01       	movw	r18, r24
    9160:	25 5f       	subi	r18, 0xF5	; 245
    9162:	3f 4f       	sbci	r19, 0xFF	; 255
    9164:	80 e0       	ldi	r24, 0x00	; 0
    9166:	98 2f       	mov	r25, r24
    9168:	90 fb       	bst	r25, 0
    916a:	97 95       	ror	r25
    916c:	97 f9       	bld	r25, 7
    916e:	81 91       	ld	r24, Z+
    9170:	89 0f       	add	r24, r25
    9172:	e2 17       	cp	r30, r18
    9174:	f3 07       	cpc	r31, r19
    9176:	b9 f7       	brne	.-18     	; 0x9166 <sum_sfn+0xa>
    9178:	08 95       	ret

0000917a <get_ldnumber>:
    917a:	cf 93       	push	r28
    917c:	df 93       	push	r29
    917e:	dc 01       	movw	r26, r24
    9180:	ed 91       	ld	r30, X+
    9182:	fc 91       	ld	r31, X
    9184:	11 97       	sbiw	r26, 0x01	; 1
    9186:	30 97       	sbiw	r30, 0x00	; 0
    9188:	f9 f0       	breq	.+62     	; 0x91c8 <get_ldnumber+0x4e>
    918a:	9f 01       	movw	r18, r30
    918c:	2f 5f       	subi	r18, 0xFF	; 255
    918e:	3f 4f       	sbci	r19, 0xFF	; 255
    9190:	e9 01       	movw	r28, r18
    9192:	21 97       	sbiw	r28, 0x01	; 1
    9194:	88 81       	ld	r24, Y
    9196:	80 32       	cpi	r24, 0x20	; 32
    9198:	18 f0       	brcs	.+6      	; 0x91a0 <get_ldnumber+0x26>
    919a:	8a 33       	cpi	r24, 0x3A	; 58
    919c:	b9 f7       	brne	.-18     	; 0x918c <get_ldnumber+0x12>
    919e:	04 c0       	rjmp	.+8      	; 0x91a8 <get_ldnumber+0x2e>
    91a0:	80 91 14 18 	lds	r24, 0x1814	; 0x801814 <CurrVol>
    91a4:	90 e0       	ldi	r25, 0x00	; 0
    91a6:	12 c0       	rjmp	.+36     	; 0x91cc <get_ldnumber+0x52>
    91a8:	90 81       	ld	r25, Z
    91aa:	80 ed       	ldi	r24, 0xD0	; 208
    91ac:	89 0f       	add	r24, r25
    91ae:	8a 30       	cpi	r24, 0x0A	; 10
    91b0:	58 f4       	brcc	.+22     	; 0x91c8 <get_ldnumber+0x4e>
    91b2:	32 96       	adiw	r30, 0x02	; 2
    91b4:	2e 17       	cp	r18, r30
    91b6:	3f 07       	cpc	r19, r31
    91b8:	39 f4       	brne	.+14     	; 0x91c8 <get_ldnumber+0x4e>
    91ba:	90 33       	cpi	r25, 0x30	; 48
    91bc:	29 f4       	brne	.+10     	; 0x91c8 <get_ldnumber+0x4e>
    91be:	2d 93       	st	X+, r18
    91c0:	3c 93       	st	X, r19
    91c2:	80 e0       	ldi	r24, 0x00	; 0
    91c4:	90 e0       	ldi	r25, 0x00	; 0
    91c6:	02 c0       	rjmp	.+4      	; 0x91cc <get_ldnumber+0x52>
    91c8:	8f ef       	ldi	r24, 0xFF	; 255
    91ca:	9f ef       	ldi	r25, 0xFF	; 255
    91cc:	df 91       	pop	r29
    91ce:	cf 91       	pop	r28
    91d0:	08 95       	ret

000091d2 <validate>:
    91d2:	0f 93       	push	r16
    91d4:	1f 93       	push	r17
    91d6:	cf 93       	push	r28
    91d8:	df 93       	push	r29
    91da:	ec 01       	movw	r28, r24
    91dc:	8b 01       	movw	r16, r22
    91de:	89 2b       	or	r24, r25
    91e0:	f9 f0       	breq	.+62     	; 0x9220 <validate+0x4e>
    91e2:	e8 81       	ld	r30, Y
    91e4:	f9 81       	ldd	r31, Y+1	; 0x01
    91e6:	30 97       	sbiw	r30, 0x00	; 0
    91e8:	d9 f0       	breq	.+54     	; 0x9220 <validate+0x4e>
    91ea:	80 81       	ld	r24, Z
    91ec:	88 23       	and	r24, r24
    91ee:	c1 f0       	breq	.+48     	; 0x9220 <validate+0x4e>
    91f0:	2a 81       	ldd	r18, Y+2	; 0x02
    91f2:	3b 81       	ldd	r19, Y+3	; 0x03
    91f4:	85 81       	ldd	r24, Z+5	; 0x05
    91f6:	96 81       	ldd	r25, Z+6	; 0x06
    91f8:	28 17       	cp	r18, r24
    91fa:	39 07       	cpc	r19, r25
    91fc:	89 f4       	brne	.+34     	; 0x9220 <validate+0x4e>
    91fe:	81 81       	ldd	r24, Z+1	; 0x01
    9200:	0e 94 ff 69 	call	0xd3fe	; 0xd3fe <disk_status>
    9204:	80 fd       	sbrc	r24, 0
    9206:	0c c0       	rjmp	.+24     	; 0x9220 <validate+0x4e>
    9208:	28 81       	ld	r18, Y
    920a:	39 81       	ldd	r19, Y+1	; 0x01
    920c:	80 e0       	ldi	r24, 0x00	; 0
    920e:	90 e0       	ldi	r25, 0x00	; 0
    9210:	f8 01       	movw	r30, r16
    9212:	31 83       	std	Z+1, r19	; 0x01
    9214:	20 83       	st	Z, r18
    9216:	df 91       	pop	r29
    9218:	cf 91       	pop	r28
    921a:	1f 91       	pop	r17
    921c:	0f 91       	pop	r16
    921e:	08 95       	ret
    9220:	89 e0       	ldi	r24, 0x09	; 9
    9222:	90 e0       	ldi	r25, 0x00	; 0
    9224:	20 e0       	ldi	r18, 0x00	; 0
    9226:	30 e0       	ldi	r19, 0x00	; 0
    9228:	f3 cf       	rjmp	.-26     	; 0x9210 <validate+0x3e>

0000922a <get_fileinfo>:
    922a:	a8 e0       	ldi	r26, 0x08	; 8
    922c:	b0 e0       	ldi	r27, 0x00	; 0
    922e:	eb e1       	ldi	r30, 0x1B	; 27
    9230:	f9 e4       	ldi	r31, 0x49	; 73
    9232:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
    9236:	fc 01       	movw	r30, r24
    9238:	01 90       	ld	r0, Z+
    923a:	f0 81       	ld	r31, Z
    923c:	e0 2d       	mov	r30, r0
    923e:	f8 87       	std	Y+8, r31	; 0x08
    9240:	ef 83       	std	Y+7, r30	; 0x07
    9242:	fb 01       	movw	r30, r22
    9244:	16 8a       	std	Z+22, r1	; 0x16
    9246:	fc 01       	movw	r30, r24
    9248:	06 89       	ldd	r16, Z+22	; 0x16
    924a:	17 89       	ldd	r17, Z+23	; 0x17
    924c:	20 8d       	ldd	r18, Z+24	; 0x18
    924e:	31 8d       	ldd	r19, Z+25	; 0x19
    9250:	01 15       	cp	r16, r1
    9252:	11 05       	cpc	r17, r1
    9254:	21 05       	cpc	r18, r1
    9256:	31 05       	cpc	r19, r1
    9258:	09 f4       	brne	.+2      	; 0x925c <get_fileinfo+0x32>
    925a:	0d c1       	rjmp	.+538    	; 0x9476 <get_fileinfo+0x24c>
    925c:	7e 83       	std	Y+6, r23	; 0x06
    925e:	6d 83       	std	Y+5, r22	; 0x05
    9260:	7c 01       	movw	r14, r24
    9262:	80 a5       	ldd	r24, Z+40	; 0x28
    9264:	91 a5       	ldd	r25, Z+41	; 0x29
    9266:	a2 a5       	ldd	r26, Z+42	; 0x2a
    9268:	b3 a5       	ldd	r27, Z+43	; 0x2b
    926a:	8f 3f       	cpi	r24, 0xFF	; 255
    926c:	9f 4f       	sbci	r25, 0xFF	; 255
    926e:	af 4f       	sbci	r26, 0xFF	; 255
    9270:	bf 4f       	sbci	r27, 0xFF	; 255
    9272:	09 f4       	brne	.+2      	; 0x9276 <get_fileinfo+0x4c>
    9274:	6c c0       	rjmp	.+216    	; 0x934e <get_fileinfo+0x124>
    9276:	a1 2c       	mov	r10, r1
    9278:	b1 2c       	mov	r11, r1
    927a:	c1 2c       	mov	r12, r1
    927c:	d1 2c       	mov	r13, r1
    927e:	00 e0       	ldi	r16, 0x00	; 0
    9280:	10 e0       	ldi	r17, 0x00	; 0
    9282:	66 24       	eor	r6, r6
    9284:	6a 94       	dec	r6
    9286:	71 2c       	mov	r7, r1
    9288:	ef 81       	ldd	r30, Y+7	; 0x07
    928a:	f8 85       	ldd	r31, Y+8	; 0x08
    928c:	83 85       	ldd	r24, Z+11	; 0x0b
    928e:	94 85       	ldd	r25, Z+12	; 0x0c
    9290:	fc 01       	movw	r30, r24
    9292:	ea 0d       	add	r30, r10
    9294:	fb 1d       	adc	r31, r11
    9296:	80 81       	ld	r24, Z
    9298:	91 81       	ldd	r25, Z+1	; 0x01
    929a:	00 97       	sbiw	r24, 0x00	; 0
    929c:	09 f4       	brne	.+2      	; 0x92a0 <get_fileinfo+0x76>
    929e:	4d c0       	rjmp	.+154    	; 0x933a <get_fileinfo+0x110>
    92a0:	c1 14       	cp	r12, r1
    92a2:	d1 04       	cpc	r13, r1
    92a4:	29 f4       	brne	.+10     	; 0x92b0 <get_fileinfo+0x86>
    92a6:	9c 01       	movw	r18, r24
    92a8:	38 5d       	subi	r19, 0xD8	; 216
    92aa:	21 15       	cp	r18, r1
    92ac:	38 40       	sbci	r19, 0x08	; 8
    92ae:	f0 f1       	brcs	.+124    	; 0x932c <get_fileinfo+0x102>
    92b0:	43 01       	movw	r8, r6
    92b2:	80 1a       	sub	r8, r16
    92b4:	91 0a       	sbc	r9, r17
    92b6:	a6 01       	movw	r20, r12
    92b8:	60 e0       	ldi	r22, 0x00	; 0
    92ba:	70 e0       	ldi	r23, 0x00	; 0
    92bc:	2a 01       	movw	r4, r20
    92be:	33 24       	eor	r3, r3
    92c0:	22 24       	eor	r2, r2
    92c2:	a0 e0       	ldi	r26, 0x00	; 0
    92c4:	b0 e0       	ldi	r27, 0x00	; 0
    92c6:	28 2a       	or	r2, r24
    92c8:	39 2a       	or	r3, r25
    92ca:	4a 2a       	or	r4, r26
    92cc:	5b 2a       	or	r5, r27
    92ce:	c2 01       	movw	r24, r4
    92d0:	b1 01       	movw	r22, r2
    92d2:	45 eb       	ldi	r20, 0xB5	; 181
    92d4:	51 e0       	ldi	r21, 0x01	; 1
    92d6:	0e 94 55 69 	call	0xd2aa	; 0xd2aa <ff_uni2oem>
    92da:	8f 3f       	cpi	r24, 0xFF	; 255
    92dc:	91 05       	cpc	r25, r1
    92de:	89 f0       	breq	.+34     	; 0x9302 <get_fileinfo+0xd8>
    92e0:	80 f0       	brcs	.+32     	; 0x9302 <get_fileinfo+0xd8>
    92e2:	22 e0       	ldi	r18, 0x02	; 2
    92e4:	82 16       	cp	r8, r18
    92e6:	91 04       	cpc	r9, r1
    92e8:	c0 f0       	brcs	.+48     	; 0x931a <get_fileinfo+0xf0>
    92ea:	ed 81       	ldd	r30, Y+5	; 0x05
    92ec:	fe 81       	ldd	r31, Y+6	; 0x06
    92ee:	e0 0f       	add	r30, r16
    92f0:	f1 1f       	adc	r31, r17
    92f2:	96 8b       	std	Z+22, r25	; 0x16
    92f4:	ed 81       	ldd	r30, Y+5	; 0x05
    92f6:	fe 81       	ldd	r31, Y+6	; 0x06
    92f8:	e0 0f       	add	r30, r16
    92fa:	f1 1f       	adc	r31, r17
    92fc:	87 8b       	std	Z+23, r24	; 0x17
    92fe:	82 e0       	ldi	r24, 0x02	; 2
    9300:	0d c0       	rjmp	.+26     	; 0x931c <get_fileinfo+0xf2>
    9302:	00 97       	sbiw	r24, 0x00	; 0
    9304:	51 f0       	breq	.+20     	; 0x931a <get_fileinfo+0xf0>
    9306:	81 14       	cp	r8, r1
    9308:	91 04       	cpc	r9, r1
    930a:	39 f0       	breq	.+14     	; 0x931a <get_fileinfo+0xf0>
    930c:	ed 81       	ldd	r30, Y+5	; 0x05
    930e:	fe 81       	ldd	r31, Y+6	; 0x06
    9310:	e0 0f       	add	r30, r16
    9312:	f1 1f       	adc	r31, r17
    9314:	86 8b       	std	Z+22, r24	; 0x16
    9316:	81 e0       	ldi	r24, 0x01	; 1
    9318:	01 c0       	rjmp	.+2      	; 0x931c <get_fileinfo+0xf2>
    931a:	80 e0       	ldi	r24, 0x00	; 0
    931c:	28 2f       	mov	r18, r24
    931e:	30 e0       	ldi	r19, 0x00	; 0
    9320:	88 23       	and	r24, r24
    9322:	49 f0       	breq	.+18     	; 0x9336 <get_fileinfo+0x10c>
    9324:	02 0f       	add	r16, r18
    9326:	13 1f       	adc	r17, r19
    9328:	80 e0       	ldi	r24, 0x00	; 0
    932a:	90 e0       	ldi	r25, 0x00	; 0
    932c:	32 e0       	ldi	r19, 0x02	; 2
    932e:	a3 0e       	add	r10, r19
    9330:	b1 1c       	adc	r11, r1
    9332:	6c 01       	movw	r12, r24
    9334:	a9 cf       	rjmp	.-174    	; 0x9288 <get_fileinfo+0x5e>
    9336:	00 e0       	ldi	r16, 0x00	; 0
    9338:	10 e0       	ldi	r17, 0x00	; 0
    933a:	c1 14       	cp	r12, r1
    933c:	d1 04       	cpc	r13, r1
    933e:	11 f0       	breq	.+4      	; 0x9344 <get_fileinfo+0x11a>
    9340:	00 e0       	ldi	r16, 0x00	; 0
    9342:	10 e0       	ldi	r17, 0x00	; 0
    9344:	ed 81       	ldd	r30, Y+5	; 0x05
    9346:	fe 81       	ldd	r31, Y+6	; 0x06
    9348:	e0 0f       	add	r30, r16
    934a:	f1 1f       	adc	r31, r17
    934c:	16 8a       	std	Z+22, r1	; 0x16
    934e:	80 e0       	ldi	r24, 0x00	; 0
    9350:	90 e0       	ldi	r25, 0x00	; 0
    9352:	20 e0       	ldi	r18, 0x00	; 0
    9354:	30 e0       	ldi	r19, 0x00	; 0
    9356:	6e e2       	ldi	r22, 0x2E	; 46
    9358:	a9 01       	movw	r20, r18
    935a:	4f 5f       	subi	r20, 0xFF	; 255
    935c:	5f 4f       	sbci	r21, 0xFF	; 255
    935e:	f7 01       	movw	r30, r14
    9360:	a2 8d       	ldd	r26, Z+26	; 0x1a
    9362:	b3 8d       	ldd	r27, Z+27	; 0x1b
    9364:	fd 01       	movw	r30, r26
    9366:	e2 0f       	add	r30, r18
    9368:	f3 1f       	adc	r31, r19
    936a:	20 81       	ld	r18, Z
    936c:	30 e0       	ldi	r19, 0x00	; 0
    936e:	20 32       	cpi	r18, 0x20	; 32
    9370:	31 05       	cpc	r19, r1
    9372:	b9 f0       	breq	.+46     	; 0x93a2 <get_fileinfo+0x178>
    9374:	25 30       	cpi	r18, 0x05	; 5
    9376:	31 05       	cpc	r19, r1
    9378:	11 f4       	brne	.+4      	; 0x937e <get_fileinfo+0x154>
    937a:	25 ee       	ldi	r18, 0xE5	; 229
    937c:	30 e0       	ldi	r19, 0x00	; 0
    937e:	49 30       	cpi	r20, 0x09	; 9
    9380:	51 05       	cpc	r21, r1
    9382:	49 f4       	brne	.+18     	; 0x9396 <get_fileinfo+0x16c>
    9384:	8c 30       	cpi	r24, 0x0C	; 12
    9386:	91 05       	cpc	r25, r1
    9388:	30 f4       	brcc	.+12     	; 0x9396 <get_fileinfo+0x16c>
    938a:	ed 81       	ldd	r30, Y+5	; 0x05
    938c:	fe 81       	ldd	r31, Y+6	; 0x06
    938e:	e8 0f       	add	r30, r24
    9390:	f9 1f       	adc	r31, r25
    9392:	61 87       	std	Z+9, r22	; 0x09
    9394:	01 96       	adiw	r24, 0x01	; 1
    9396:	ed 81       	ldd	r30, Y+5	; 0x05
    9398:	fe 81       	ldd	r31, Y+6	; 0x06
    939a:	e8 0f       	add	r30, r24
    939c:	f9 1f       	adc	r31, r25
    939e:	21 87       	std	Z+9, r18	; 0x09
    93a0:	01 96       	adiw	r24, 0x01	; 1
    93a2:	9a 01       	movw	r18, r20
    93a4:	4b 30       	cpi	r20, 0x0B	; 11
    93a6:	51 05       	cpc	r21, r1
    93a8:	b9 f6       	brne	.-82     	; 0x9358 <get_fileinfo+0x12e>
    93aa:	ed 81       	ldd	r30, Y+5	; 0x05
    93ac:	fe 81       	ldd	r31, Y+6	; 0x06
    93ae:	e8 0f       	add	r30, r24
    93b0:	f9 1f       	adc	r31, r25
    93b2:	11 86       	std	Z+9, r1	; 0x09
    93b4:	ed 81       	ldd	r30, Y+5	; 0x05
    93b6:	fe 81       	ldd	r31, Y+6	; 0x06
    93b8:	26 89       	ldd	r18, Z+22	; 0x16
    93ba:	21 11       	cpse	r18, r1
    93bc:	3a c0       	rjmp	.+116    	; 0x9432 <get_fileinfo+0x208>
    93be:	89 2b       	or	r24, r25
    93c0:	31 f0       	breq	.+12     	; 0x93ce <get_fileinfo+0x1a4>
    93c2:	df 01       	movw	r26, r30
    93c4:	19 96       	adiw	r26, 0x09	; 9
    93c6:	58 e0       	ldi	r21, 0x08	; 8
    93c8:	20 e0       	ldi	r18, 0x00	; 0
    93ca:	30 e0       	ldi	r19, 0x00	; 0
    93cc:	16 c0       	rjmp	.+44     	; 0x93fa <get_fileinfo+0x1d0>
    93ce:	8f e3       	ldi	r24, 0x3F	; 63
    93d0:	ed 81       	ldd	r30, Y+5	; 0x05
    93d2:	fe 81       	ldd	r31, Y+6	; 0x06
    93d4:	86 8b       	std	Z+22, r24	; 0x16
    93d6:	21 e0       	ldi	r18, 0x01	; 1
    93d8:	30 e0       	ldi	r19, 0x00	; 0
    93da:	1c c0       	rjmp	.+56     	; 0x9414 <get_fileinfo+0x1ea>
    93dc:	90 e0       	ldi	r25, 0x00	; 0
    93de:	8e 32       	cpi	r24, 0x2E	; 46
    93e0:	91 05       	cpc	r25, r1
    93e2:	09 f4       	brne	.+2      	; 0x93e6 <get_fileinfo+0x1bc>
    93e4:	50 e1       	ldi	r21, 0x10	; 16
    93e6:	bc 01       	movw	r22, r24
    93e8:	61 54       	subi	r22, 0x41	; 65
    93ea:	71 09       	sbc	r23, r1
    93ec:	6a 31       	cpi	r22, 0x1A	; 26
    93ee:	71 05       	cpc	r23, r1
    93f0:	40 f0       	brcs	.+16     	; 0x9402 <get_fileinfo+0x1d8>
    93f2:	fd 01       	movw	r30, r26
    93f4:	84 87       	std	Z+12, r24	; 0x0c
    93f6:	2f 5f       	subi	r18, 0xFF	; 255
    93f8:	3f 4f       	sbci	r19, 0xFF	; 255
    93fa:	8d 91       	ld	r24, X+
    93fc:	81 11       	cpse	r24, r1
    93fe:	ee cf       	rjmp	.-36     	; 0x93dc <get_fileinfo+0x1b2>
    9400:	09 c0       	rjmp	.+18     	; 0x9414 <get_fileinfo+0x1ea>
    9402:	f7 01       	movw	r30, r14
    9404:	62 8d       	ldd	r22, Z+26	; 0x1a
    9406:	73 8d       	ldd	r23, Z+27	; 0x1b
    9408:	fb 01       	movw	r30, r22
    940a:	44 85       	ldd	r20, Z+12	; 0x0c
    940c:	45 23       	and	r20, r21
    940e:	89 f3       	breq	.-30     	; 0x93f2 <get_fileinfo+0x1c8>
    9410:	80 96       	adiw	r24, 0x20	; 32
    9412:	ef cf       	rjmp	.-34     	; 0x93f2 <get_fileinfo+0x1c8>
    9414:	ed 81       	ldd	r30, Y+5	; 0x05
    9416:	fe 81       	ldd	r31, Y+6	; 0x06
    9418:	e2 0f       	add	r30, r18
    941a:	f3 1f       	adc	r31, r19
    941c:	16 8a       	std	Z+22, r1	; 0x16
    941e:	f7 01       	movw	r30, r14
    9420:	82 8d       	ldd	r24, Z+26	; 0x1a
    9422:	93 8d       	ldd	r25, Z+27	; 0x1b
    9424:	fc 01       	movw	r30, r24
    9426:	84 85       	ldd	r24, Z+12	; 0x0c
    9428:	81 11       	cpse	r24, r1
    942a:	03 c0       	rjmp	.+6      	; 0x9432 <get_fileinfo+0x208>
    942c:	ed 81       	ldd	r30, Y+5	; 0x05
    942e:	fe 81       	ldd	r31, Y+6	; 0x06
    9430:	11 86       	std	Z+9, r1	; 0x09
    9432:	f7 01       	movw	r30, r14
    9434:	82 8d       	ldd	r24, Z+26	; 0x1a
    9436:	93 8d       	ldd	r25, Z+27	; 0x1b
    9438:	fc 01       	movw	r30, r24
    943a:	83 85       	ldd	r24, Z+11	; 0x0b
    943c:	ed 81       	ldd	r30, Y+5	; 0x05
    943e:	fe 81       	ldd	r31, Y+6	; 0x06
    9440:	80 87       	std	Z+8, r24	; 0x08
    9442:	f7 01       	movw	r30, r14
    9444:	02 8d       	ldd	r16, Z+26	; 0x1a
    9446:	13 8d       	ldd	r17, Z+27	; 0x1b
    9448:	c8 01       	movw	r24, r16
    944a:	4c 96       	adiw	r24, 0x1c	; 28
    944c:	f0 dd       	rcall	.-1056   	; 0x902e <ld_dword>
    944e:	ed 81       	ldd	r30, Y+5	; 0x05
    9450:	fe 81       	ldd	r31, Y+6	; 0x06
    9452:	60 83       	st	Z, r22
    9454:	71 83       	std	Z+1, r23	; 0x01
    9456:	82 83       	std	Z+2, r24	; 0x02
    9458:	93 83       	std	Z+3, r25	; 0x03
    945a:	f8 01       	movw	r30, r16
    945c:	86 89       	ldd	r24, Z+22	; 0x16
    945e:	97 89       	ldd	r25, Z+23	; 0x17
    9460:	ed 81       	ldd	r30, Y+5	; 0x05
    9462:	fe 81       	ldd	r31, Y+6	; 0x06
    9464:	97 83       	std	Z+7, r25	; 0x07
    9466:	86 83       	std	Z+6, r24	; 0x06
    9468:	f8 01       	movw	r30, r16
    946a:	80 8d       	ldd	r24, Z+24	; 0x18
    946c:	91 8d       	ldd	r25, Z+25	; 0x19
    946e:	ed 81       	ldd	r30, Y+5	; 0x05
    9470:	fe 81       	ldd	r31, Y+6	; 0x06
    9472:	95 83       	std	Z+5, r25	; 0x05
    9474:	84 83       	std	Z+4, r24	; 0x04
    9476:	28 96       	adiw	r28, 0x08	; 8
    9478:	e2 e1       	ldi	r30, 0x12	; 18
    947a:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

0000947e <mem_cpy.part.0>:
    947e:	fb 01       	movw	r30, r22
    9480:	48 0f       	add	r20, r24
    9482:	59 1f       	adc	r21, r25
    9484:	21 91       	ld	r18, Z+
    9486:	dc 01       	movw	r26, r24
    9488:	2d 93       	st	X+, r18
    948a:	cd 01       	movw	r24, r26
    948c:	a4 17       	cp	r26, r20
    948e:	b5 07       	cpc	r27, r21
    9490:	c9 f7       	brne	.-14     	; 0x9484 <mem_cpy.part.0+0x6>
    9492:	08 95       	ret

00009494 <ld_clust.isra.3>:
    9494:	fb 01       	movw	r30, r22
    9496:	42 8d       	ldd	r20, Z+26	; 0x1a
    9498:	53 8d       	ldd	r21, Z+27	; 0x1b
    949a:	60 e0       	ldi	r22, 0x00	; 0
    949c:	70 e0       	ldi	r23, 0x00	; 0
    949e:	83 30       	cpi	r24, 0x03	; 3
    94a0:	59 f4       	brne	.+22     	; 0x94b8 <ld_clust.isra.3+0x24>
    94a2:	84 89       	ldd	r24, Z+20	; 0x14
    94a4:	95 89       	ldd	r25, Z+21	; 0x15
    94a6:	a0 e0       	ldi	r26, 0x00	; 0
    94a8:	b0 e0       	ldi	r27, 0x00	; 0
    94aa:	dc 01       	movw	r26, r24
    94ac:	99 27       	eor	r25, r25
    94ae:	88 27       	eor	r24, r24
    94b0:	48 2b       	or	r20, r24
    94b2:	59 2b       	or	r21, r25
    94b4:	6a 2b       	or	r22, r26
    94b6:	7b 2b       	or	r23, r27
    94b8:	cb 01       	movw	r24, r22
    94ba:	ba 01       	movw	r22, r20
    94bc:	08 95       	ret

000094be <st_clust.isra.4>:
    94be:	fb 01       	movw	r30, r22
    94c0:	22 8f       	std	Z+26, r18	; 0x1a
    94c2:	33 8f       	std	Z+27, r19	; 0x1b
    94c4:	dc 01       	movw	r26, r24
    94c6:	8c 91       	ld	r24, X
    94c8:	83 30       	cpi	r24, 0x03	; 3
    94ca:	29 f4       	brne	.+10     	; 0x94d6 <st_clust.isra.4+0x18>
    94cc:	ca 01       	movw	r24, r20
    94ce:	aa 27       	eor	r26, r26
    94d0:	bb 27       	eor	r27, r27
    94d2:	84 8b       	std	Z+20, r24	; 0x14
    94d4:	95 8b       	std	Z+21, r25	; 0x15
    94d6:	08 95       	ret

000094d8 <sync_window.part.5>:
    94d8:	8f 92       	push	r8
    94da:	9f 92       	push	r9
    94dc:	af 92       	push	r10
    94de:	bf 92       	push	r11
    94e0:	ef 92       	push	r14
    94e2:	ff 92       	push	r15
    94e4:	0f 93       	push	r16
    94e6:	1f 93       	push	r17
    94e8:	cf 93       	push	r28
    94ea:	df 93       	push	r29
    94ec:	ec 01       	movw	r28, r24
    94ee:	7c 01       	movw	r14, r24
    94f0:	45 e3       	ldi	r20, 0x35	; 53
    94f2:	e4 0e       	add	r14, r20
    94f4:	f1 1c       	adc	r15, r1
    94f6:	29 a9       	ldd	r18, Y+49	; 0x31
    94f8:	3a a9       	ldd	r19, Y+50	; 0x32
    94fa:	4b a9       	ldd	r20, Y+51	; 0x33
    94fc:	5c a9       	ldd	r21, Y+52	; 0x34
    94fe:	01 e0       	ldi	r16, 0x01	; 1
    9500:	10 e0       	ldi	r17, 0x00	; 0
    9502:	b7 01       	movw	r22, r14
    9504:	89 81       	ldd	r24, Y+1	; 0x01
    9506:	0e 94 1b 6a 	call	0xd436	; 0xd436 <disk_write>
    950a:	89 2b       	or	r24, r25
    950c:	41 f5       	brne	.+80     	; 0x955e <sync_window.part.5+0x86>
    950e:	1b 82       	std	Y+3, r1	; 0x03
    9510:	09 a9       	ldd	r16, Y+49	; 0x31
    9512:	1a a9       	ldd	r17, Y+50	; 0x32
    9514:	2b a9       	ldd	r18, Y+51	; 0x33
    9516:	3c a9       	ldd	r19, Y+52	; 0x34
    9518:	8d 8d       	ldd	r24, Y+29	; 0x1d
    951a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    951c:	af 8d       	ldd	r26, Y+31	; 0x1f
    951e:	b8 a1       	ldd	r27, Y+32	; 0x20
    9520:	8d a0       	ldd	r8, Y+37	; 0x25
    9522:	9e a0       	ldd	r9, Y+38	; 0x26
    9524:	af a0       	ldd	r10, Y+39	; 0x27
    9526:	b8 a4       	ldd	r11, Y+40	; 0x28
    9528:	b9 01       	movw	r22, r18
    952a:	a8 01       	movw	r20, r16
    952c:	48 19       	sub	r20, r8
    952e:	59 09       	sbc	r21, r9
    9530:	6a 09       	sbc	r22, r10
    9532:	7b 09       	sbc	r23, r11
    9534:	48 17       	cp	r20, r24
    9536:	59 07       	cpc	r21, r25
    9538:	6a 07       	cpc	r22, r26
    953a:	7b 07       	cpc	r23, r27
    953c:	98 f4       	brcc	.+38     	; 0x9564 <sync_window.part.5+0x8c>
    953e:	6a 81       	ldd	r22, Y+2	; 0x02
    9540:	62 30       	cpi	r22, 0x02	; 2
    9542:	81 f4       	brne	.+32     	; 0x9564 <sync_window.part.5+0x8c>
    9544:	a9 01       	movw	r20, r18
    9546:	98 01       	movw	r18, r16
    9548:	28 0f       	add	r18, r24
    954a:	39 1f       	adc	r19, r25
    954c:	4a 1f       	adc	r20, r26
    954e:	5b 1f       	adc	r21, r27
    9550:	01 e0       	ldi	r16, 0x01	; 1
    9552:	10 e0       	ldi	r17, 0x00	; 0
    9554:	b7 01       	movw	r22, r14
    9556:	89 81       	ldd	r24, Y+1	; 0x01
    9558:	0e 94 1b 6a 	call	0xd436	; 0xd436 <disk_write>
    955c:	03 c0       	rjmp	.+6      	; 0x9564 <sync_window.part.5+0x8c>
    955e:	81 e0       	ldi	r24, 0x01	; 1
    9560:	90 e0       	ldi	r25, 0x00	; 0
    9562:	02 c0       	rjmp	.+4      	; 0x9568 <sync_window.part.5+0x90>
    9564:	80 e0       	ldi	r24, 0x00	; 0
    9566:	90 e0       	ldi	r25, 0x00	; 0
    9568:	df 91       	pop	r29
    956a:	cf 91       	pop	r28
    956c:	1f 91       	pop	r17
    956e:	0f 91       	pop	r16
    9570:	ff 90       	pop	r15
    9572:	ef 90       	pop	r14
    9574:	bf 90       	pop	r11
    9576:	af 90       	pop	r10
    9578:	9f 90       	pop	r9
    957a:	8f 90       	pop	r8
    957c:	08 95       	ret

0000957e <sync_fs>:
    957e:	ef 92       	push	r14
    9580:	ff 92       	push	r15
    9582:	0f 93       	push	r16
    9584:	1f 93       	push	r17
    9586:	cf 93       	push	r28
    9588:	df 93       	push	r29
    958a:	ec 01       	movw	r28, r24
    958c:	8b 81       	ldd	r24, Y+3	; 0x03
    958e:	81 11       	cpse	r24, r1
    9590:	05 c0       	rjmp	.+10     	; 0x959c <sync_fs+0x1e>
    9592:	88 81       	ld	r24, Y
    9594:	83 30       	cpi	r24, 0x03	; 3
    9596:	09 f0       	breq	.+2      	; 0x959a <sync_fs+0x1c>
    9598:	52 c0       	rjmp	.+164    	; 0x963e <sync_fs+0xc0>
    959a:	06 c0       	rjmp	.+12     	; 0x95a8 <sync_fs+0x2a>
    959c:	ce 01       	movw	r24, r28
    959e:	9c df       	rcall	.-200    	; 0x94d8 <sync_window.part.5>
    95a0:	00 97       	sbiw	r24, 0x00	; 0
    95a2:	09 f0       	breq	.+2      	; 0x95a6 <sync_fs+0x28>
    95a4:	59 c0       	rjmp	.+178    	; 0x9658 <sync_fs+0xda>
    95a6:	f5 cf       	rjmp	.-22     	; 0x9592 <sync_fs+0x14>
    95a8:	8c 81       	ldd	r24, Y+4	; 0x04
    95aa:	81 30       	cpi	r24, 0x01	; 1
    95ac:	09 f0       	breq	.+2      	; 0x95b0 <sync_fs+0x32>
    95ae:	47 c0       	rjmp	.+142    	; 0x963e <sync_fs+0xc0>
    95b0:	40 e0       	ldi	r20, 0x00	; 0
    95b2:	52 e0       	ldi	r21, 0x02	; 2
    95b4:	60 e0       	ldi	r22, 0x00	; 0
    95b6:	70 e0       	ldi	r23, 0x00	; 0
    95b8:	7e 01       	movw	r14, r28
    95ba:	85 e3       	ldi	r24, 0x35	; 53
    95bc:	e8 0e       	add	r14, r24
    95be:	f1 1c       	adc	r15, r1
    95c0:	c7 01       	movw	r24, r14
    95c2:	50 dd       	rcall	.-1376   	; 0x9064 <mem_set>
    95c4:	85 e5       	ldi	r24, 0x55	; 85
    95c6:	fe 01       	movw	r30, r28
    95c8:	ed 5c       	subi	r30, 0xCD	; 205
    95ca:	fd 4f       	sbci	r31, 0xFD	; 253
    95cc:	80 83       	st	Z, r24
    95ce:	8a ea       	ldi	r24, 0xAA	; 170
    95d0:	31 96       	adiw	r30, 0x01	; 1
    95d2:	80 83       	st	Z, r24
    95d4:	82 e5       	ldi	r24, 0x52	; 82
    95d6:	8d ab       	std	Y+53, r24	; 0x35
    95d8:	8e ab       	std	Y+54, r24	; 0x36
    95da:	81 e6       	ldi	r24, 0x61	; 97
    95dc:	8f ab       	std	Y+55, r24	; 0x37
    95de:	91 e4       	ldi	r25, 0x41	; 65
    95e0:	98 af       	std	Y+56, r25	; 0x38
    95e2:	22 e7       	ldi	r18, 0x72	; 114
    95e4:	7b 97       	sbiw	r30, 0x1b	; 27
    95e6:	20 83       	st	Z, r18
    95e8:	31 96       	adiw	r30, 0x01	; 1
    95ea:	20 83       	st	Z, r18
    95ec:	31 96       	adiw	r30, 0x01	; 1
    95ee:	90 83       	st	Z, r25
    95f0:	31 96       	adiw	r30, 0x01	; 1
    95f2:	80 83       	st	Z, r24
    95f4:	49 89       	ldd	r20, Y+17	; 0x11
    95f6:	5a 89       	ldd	r21, Y+18	; 0x12
    95f8:	6b 89       	ldd	r22, Y+19	; 0x13
    95fa:	7c 89       	ldd	r23, Y+20	; 0x14
    95fc:	ce 01       	movw	r24, r28
    95fe:	83 5e       	subi	r24, 0xE3	; 227
    9600:	9d 4f       	sbci	r25, 0xFD	; 253
    9602:	2a dd       	rcall	.-1452   	; 0x9058 <st_dword>
    9604:	4d 85       	ldd	r20, Y+13	; 0x0d
    9606:	5e 85       	ldd	r21, Y+14	; 0x0e
    9608:	6f 85       	ldd	r22, Y+15	; 0x0f
    960a:	78 89       	ldd	r23, Y+16	; 0x10
    960c:	ce 01       	movw	r24, r28
    960e:	8f 5d       	subi	r24, 0xDF	; 223
    9610:	9d 4f       	sbci	r25, 0xFD	; 253
    9612:	22 dd       	rcall	.-1468   	; 0x9058 <st_dword>
    9614:	89 a1       	ldd	r24, Y+33	; 0x21
    9616:	9a a1       	ldd	r25, Y+34	; 0x22
    9618:	ab a1       	ldd	r26, Y+35	; 0x23
    961a:	bc a1       	ldd	r27, Y+36	; 0x24
    961c:	9c 01       	movw	r18, r24
    961e:	ad 01       	movw	r20, r26
    9620:	2f 5f       	subi	r18, 0xFF	; 255
    9622:	3f 4f       	sbci	r19, 0xFF	; 255
    9624:	4f 4f       	sbci	r20, 0xFF	; 255
    9626:	5f 4f       	sbci	r21, 0xFF	; 255
    9628:	29 ab       	std	Y+49, r18	; 0x31
    962a:	3a ab       	std	Y+50, r19	; 0x32
    962c:	4b ab       	std	Y+51, r20	; 0x33
    962e:	5c ab       	std	Y+52, r21	; 0x34
    9630:	01 e0       	ldi	r16, 0x01	; 1
    9632:	10 e0       	ldi	r17, 0x00	; 0
    9634:	b7 01       	movw	r22, r14
    9636:	89 81       	ldd	r24, Y+1	; 0x01
    9638:	0e 94 1b 6a 	call	0xd436	; 0xd436 <disk_write>
    963c:	1c 82       	std	Y+4, r1	; 0x04
    963e:	40 e0       	ldi	r20, 0x00	; 0
    9640:	50 e0       	ldi	r21, 0x00	; 0
    9642:	60 e0       	ldi	r22, 0x00	; 0
    9644:	89 81       	ldd	r24, Y+1	; 0x01
    9646:	0e 94 2b 6a 	call	0xd456	; 0xd456 <disk_ioctl>
    964a:	31 e0       	ldi	r19, 0x01	; 1
    964c:	20 e0       	ldi	r18, 0x00	; 0
    964e:	89 2b       	or	r24, r25
    9650:	09 f4       	brne	.+2      	; 0x9654 <sync_fs+0xd6>
    9652:	30 e0       	ldi	r19, 0x00	; 0
    9654:	83 2f       	mov	r24, r19
    9656:	92 2f       	mov	r25, r18
    9658:	cd b7       	in	r28, 0x3d	; 61
    965a:	de b7       	in	r29, 0x3e	; 62
    965c:	e6 e0       	ldi	r30, 0x06	; 6
    965e:	0c 94 bb e7 	jmp	0x1cf76	; 0x1cf76 <__epilogue_restores__+0x18>

00009662 <dir_clear>:
    9662:	4f 92       	push	r4
    9664:	5f 92       	push	r5
    9666:	6f 92       	push	r6
    9668:	7f 92       	push	r7
    966a:	af 92       	push	r10
    966c:	bf 92       	push	r11
    966e:	cf 92       	push	r12
    9670:	df 92       	push	r13
    9672:	ef 92       	push	r14
    9674:	ff 92       	push	r15
    9676:	0f 93       	push	r16
    9678:	1f 93       	push	r17
    967a:	cf 93       	push	r28
    967c:	df 93       	push	r29
    967e:	ec 01       	movw	r28, r24
    9680:	6a 01       	movw	r12, r20
    9682:	7b 01       	movw	r14, r22
    9684:	8b 81       	ldd	r24, Y+3	; 0x03
    9686:	81 11       	cpse	r24, r1
    9688:	28 c0       	rjmp	.+80     	; 0x96da <dir_clear+0x78>
    968a:	b7 01       	movw	r22, r14
    968c:	a6 01       	movw	r20, r12
    968e:	ce 01       	movw	r24, r28
    9690:	01 dd       	rcall	.-1534   	; 0x9094 <clst2sect>
    9692:	2b 01       	movw	r4, r22
    9694:	3c 01       	movw	r6, r24
    9696:	69 ab       	std	Y+49, r22	; 0x31
    9698:	7a ab       	std	Y+50, r23	; 0x32
    969a:	8b ab       	std	Y+51, r24	; 0x33
    969c:	9c ab       	std	Y+52, r25	; 0x34
    969e:	5e 01       	movw	r10, r28
    96a0:	25 e3       	ldi	r18, 0x35	; 53
    96a2:	a2 0e       	add	r10, r18
    96a4:	b1 1c       	adc	r11, r1
    96a6:	40 e0       	ldi	r20, 0x00	; 0
    96a8:	52 e0       	ldi	r21, 0x02	; 2
    96aa:	60 e0       	ldi	r22, 0x00	; 0
    96ac:	70 e0       	ldi	r23, 0x00	; 0
    96ae:	c5 01       	movw	r24, r10
    96b0:	d9 dc       	rcall	.-1614   	; 0x9064 <mem_set>
    96b2:	09 85       	ldd	r16, Y+9	; 0x09
    96b4:	1a 85       	ldd	r17, Y+10	; 0x0a
    96b6:	c8 01       	movw	r24, r16
    96b8:	a0 e0       	ldi	r26, 0x00	; 0
    96ba:	b0 e0       	ldi	r27, 0x00	; 0
    96bc:	39 e0       	ldi	r19, 0x09	; 9
    96be:	88 0f       	add	r24, r24
    96c0:	99 1f       	adc	r25, r25
    96c2:	aa 1f       	adc	r26, r26
    96c4:	bb 1f       	adc	r27, r27
    96c6:	3a 95       	dec	r19
    96c8:	d1 f7       	brne	.-12     	; 0x96be <dir_clear+0x5c>
    96ca:	81 15       	cp	r24, r1
    96cc:	98 40       	sbci	r25, 0x08	; 8
    96ce:	a1 05       	cpc	r26, r1
    96d0:	b1 05       	cpc	r27, r1
    96d2:	50 f0       	brcs	.+20     	; 0x96e8 <dir_clear+0x86>
    96d4:	00 e0       	ldi	r16, 0x00	; 0
    96d6:	18 e0       	ldi	r17, 0x08	; 8
    96d8:	14 c0       	rjmp	.+40     	; 0x9702 <dir_clear+0xa0>
    96da:	ce 01       	movw	r24, r28
    96dc:	fd de       	rcall	.-518    	; 0x94d8 <sync_window.part.5>
    96de:	89 2b       	or	r24, r25
    96e0:	a1 f2       	breq	.-88     	; 0x968a <dir_clear+0x28>
    96e2:	81 e0       	ldi	r24, 0x01	; 1
    96e4:	90 e0       	ldi	r25, 0x00	; 0
    96e6:	56 c0       	rjmp	.+172    	; 0x9794 <dir_clear+0x132>
    96e8:	10 2f       	mov	r17, r16
    96ea:	00 27       	eor	r16, r16
    96ec:	11 0f       	add	r17, r17
    96ee:	09 c0       	rjmp	.+18     	; 0x9702 <dir_clear+0xa0>
    96f0:	c8 01       	movw	r24, r16
    96f2:	0e 94 4f 69 	call	0xd29e	; 0xd29e <ff_memalloc>
    96f6:	6c 01       	movw	r12, r24
    96f8:	00 97       	sbiw	r24, 0x00	; 0
    96fa:	09 f0       	breq	.+2      	; 0x96fe <dir_clear+0x9c>
    96fc:	40 c0       	rjmp	.+128    	; 0x977e <dir_clear+0x11c>
    96fe:	16 95       	lsr	r17
    9700:	07 95       	ror	r16
    9702:	01 30       	cpi	r16, 0x01	; 1
    9704:	82 e0       	ldi	r24, 0x02	; 2
    9706:	18 07       	cpc	r17, r24
    9708:	98 f7       	brcc	.-26     	; 0x96f0 <dir_clear+0x8e>
    970a:	e1 2c       	mov	r14, r1
    970c:	f1 2c       	mov	r15, r1
    970e:	11 c0       	rjmp	.+34     	; 0x9732 <dir_clear+0xd0>
    9710:	01 e0       	ldi	r16, 0x01	; 1
    9712:	10 e0       	ldi	r17, 0x00	; 0
    9714:	a3 01       	movw	r20, r6
    9716:	92 01       	movw	r18, r4
    9718:	2e 0d       	add	r18, r14
    971a:	3f 1d       	adc	r19, r15
    971c:	41 1d       	adc	r20, r1
    971e:	51 1d       	adc	r21, r1
    9720:	b5 01       	movw	r22, r10
    9722:	89 81       	ldd	r24, Y+1	; 0x01
    9724:	0e 94 1b 6a 	call	0xd436	; 0xd436 <disk_write>
    9728:	89 2b       	or	r24, r25
    972a:	01 f5       	brne	.+64     	; 0x976c <dir_clear+0x10a>
    972c:	2f ef       	ldi	r18, 0xFF	; 255
    972e:	e2 1a       	sub	r14, r18
    9730:	f2 0a       	sbc	r15, r18
    9732:	89 85       	ldd	r24, Y+9	; 0x09
    9734:	9a 85       	ldd	r25, Y+10	; 0x0a
    9736:	e8 16       	cp	r14, r24
    9738:	f9 06       	cpc	r15, r25
    973a:	50 f3       	brcs	.-44     	; 0x9710 <dir_clear+0xae>
    973c:	17 c0       	rjmp	.+46     	; 0x976c <dir_clear+0x10a>
    973e:	85 01       	movw	r16, r10
    9740:	a3 01       	movw	r20, r6
    9742:	92 01       	movw	r18, r4
    9744:	2e 0d       	add	r18, r14
    9746:	3f 1d       	adc	r19, r15
    9748:	41 1d       	adc	r20, r1
    974a:	51 1d       	adc	r21, r1
    974c:	b6 01       	movw	r22, r12
    974e:	89 81       	ldd	r24, Y+1	; 0x01
    9750:	0e 94 1b 6a 	call	0xd436	; 0xd436 <disk_write>
    9754:	89 2b       	or	r24, r25
    9756:	39 f4       	brne	.+14     	; 0x9766 <dir_clear+0x104>
    9758:	ea 0c       	add	r14, r10
    975a:	fb 1c       	adc	r15, r11
    975c:	89 85       	ldd	r24, Y+9	; 0x09
    975e:	9a 85       	ldd	r25, Y+10	; 0x0a
    9760:	e8 16       	cp	r14, r24
    9762:	f9 06       	cpc	r15, r25
    9764:	60 f3       	brcs	.-40     	; 0x973e <dir_clear+0xdc>
    9766:	c6 01       	movw	r24, r12
    9768:	0e 94 52 69 	call	0xd2a4	; 0xd2a4 <ff_memfree>
    976c:	81 e0       	ldi	r24, 0x01	; 1
    976e:	90 e0       	ldi	r25, 0x00	; 0
    9770:	29 85       	ldd	r18, Y+9	; 0x09
    9772:	3a 85       	ldd	r19, Y+10	; 0x0a
    9774:	2e 15       	cp	r18, r14
    9776:	3f 05       	cpc	r19, r15
    9778:	69 f4       	brne	.+26     	; 0x9794 <dir_clear+0x132>
    977a:	80 e0       	ldi	r24, 0x00	; 0
    977c:	0b c0       	rjmp	.+22     	; 0x9794 <dir_clear+0x132>
    977e:	a8 01       	movw	r20, r16
    9780:	60 e0       	ldi	r22, 0x00	; 0
    9782:	70 e0       	ldi	r23, 0x00	; 0
    9784:	6f dc       	rcall	.-1826   	; 0x9064 <mem_set>
    9786:	58 01       	movw	r10, r16
    9788:	ab 2c       	mov	r10, r11
    978a:	bb 24       	eor	r11, r11
    978c:	a6 94       	lsr	r10
    978e:	e1 2c       	mov	r14, r1
    9790:	f1 2c       	mov	r15, r1
    9792:	e4 cf       	rjmp	.-56     	; 0x975c <dir_clear+0xfa>
    9794:	df 91       	pop	r29
    9796:	cf 91       	pop	r28
    9798:	1f 91       	pop	r17
    979a:	0f 91       	pop	r16
    979c:	ff 90       	pop	r15
    979e:	ef 90       	pop	r14
    97a0:	df 90       	pop	r13
    97a2:	cf 90       	pop	r12
    97a4:	bf 90       	pop	r11
    97a6:	af 90       	pop	r10
    97a8:	7f 90       	pop	r7
    97aa:	6f 90       	pop	r6
    97ac:	5f 90       	pop	r5
    97ae:	4f 90       	pop	r4
    97b0:	08 95       	ret

000097b2 <move_window>:
    97b2:	a0 e0       	ldi	r26, 0x00	; 0
    97b4:	b0 e0       	ldi	r27, 0x00	; 0
    97b6:	ef ed       	ldi	r30, 0xDF	; 223
    97b8:	fb e4       	ldi	r31, 0x4B	; 75
    97ba:	0c 94 9d e7 	jmp	0x1cf3a	; 0x1cf3a <__prologue_saves__+0x14>
    97be:	ec 01       	movw	r28, r24
    97c0:	6a 01       	movw	r12, r20
    97c2:	7b 01       	movw	r14, r22
    97c4:	89 a9       	ldd	r24, Y+49	; 0x31
    97c6:	9a a9       	ldd	r25, Y+50	; 0x32
    97c8:	ab a9       	ldd	r26, Y+51	; 0x33
    97ca:	bc a9       	ldd	r27, Y+52	; 0x34
    97cc:	84 17       	cp	r24, r20
    97ce:	95 07       	cpc	r25, r21
    97d0:	a6 07       	cpc	r26, r22
    97d2:	b7 07       	cpc	r27, r23
    97d4:	11 f1       	breq	.+68     	; 0x981a <move_window+0x68>
    97d6:	8b 81       	ldd	r24, Y+3	; 0x03
    97d8:	81 11       	cpse	r24, r1
    97da:	13 c0       	rjmp	.+38     	; 0x9802 <move_window+0x50>
    97dc:	01 e0       	ldi	r16, 0x01	; 1
    97de:	10 e0       	ldi	r17, 0x00	; 0
    97e0:	a7 01       	movw	r20, r14
    97e2:	96 01       	movw	r18, r12
    97e4:	be 01       	movw	r22, r28
    97e6:	6b 5c       	subi	r22, 0xCB	; 203
    97e8:	7f 4f       	sbci	r23, 0xFF	; 255
    97ea:	89 81       	ldd	r24, Y+1	; 0x01
    97ec:	0e 94 0b 6a 	call	0xd416	; 0xd416 <disk_read>
    97f0:	89 2b       	or	r24, r25
    97f2:	61 f0       	breq	.+24     	; 0x980c <move_window+0x5a>
    97f4:	81 e0       	ldi	r24, 0x01	; 1
    97f6:	90 e0       	ldi	r25, 0x00	; 0
    97f8:	cc 24       	eor	r12, r12
    97fa:	ca 94       	dec	r12
    97fc:	dc 2c       	mov	r13, r12
    97fe:	76 01       	movw	r14, r12
    9800:	07 c0       	rjmp	.+14     	; 0x9810 <move_window+0x5e>
    9802:	ce 01       	movw	r24, r28
    9804:	69 de       	rcall	.-814    	; 0x94d8 <sync_window.part.5>
    9806:	00 97       	sbiw	r24, 0x00	; 0
    9808:	51 f4       	brne	.+20     	; 0x981e <move_window+0x6c>
    980a:	e8 cf       	rjmp	.-48     	; 0x97dc <move_window+0x2a>
    980c:	80 e0       	ldi	r24, 0x00	; 0
    980e:	90 e0       	ldi	r25, 0x00	; 0
    9810:	c9 aa       	std	Y+49, r12	; 0x31
    9812:	da aa       	std	Y+50, r13	; 0x32
    9814:	eb aa       	std	Y+51, r14	; 0x33
    9816:	fc aa       	std	Y+52, r15	; 0x34
    9818:	02 c0       	rjmp	.+4      	; 0x981e <move_window+0x6c>
    981a:	80 e0       	ldi	r24, 0x00	; 0
    981c:	90 e0       	ldi	r25, 0x00	; 0
    981e:	cd b7       	in	r28, 0x3d	; 61
    9820:	de b7       	in	r29, 0x3e	; 62
    9822:	e8 e0       	ldi	r30, 0x08	; 8
    9824:	0c 94 b9 e7 	jmp	0x1cf72	; 0x1cf72 <__epilogue_restores__+0x14>

00009828 <check_fs>:
    9828:	cf 93       	push	r28
    982a:	df 93       	push	r29
    982c:	ec 01       	movw	r28, r24
    982e:	1b 82       	std	Y+3, r1	; 0x03
    9830:	8f ef       	ldi	r24, 0xFF	; 255
    9832:	9f ef       	ldi	r25, 0xFF	; 255
    9834:	dc 01       	movw	r26, r24
    9836:	89 ab       	std	Y+49, r24	; 0x31
    9838:	9a ab       	std	Y+50, r25	; 0x32
    983a:	ab ab       	std	Y+51, r26	; 0x33
    983c:	bc ab       	std	Y+52, r27	; 0x34
    983e:	ce 01       	movw	r24, r28
    9840:	b8 df       	rcall	.-144    	; 0x97b2 <move_window>
    9842:	89 2b       	or	r24, r25
    9844:	19 f5       	brne	.+70     	; 0x988c <check_fs+0x64>
    9846:	fe 01       	movw	r30, r28
    9848:	ed 5c       	subi	r30, 0xCD	; 205
    984a:	fd 4f       	sbci	r31, 0xFD	; 253
    984c:	80 81       	ld	r24, Z
    984e:	91 81       	ldd	r25, Z+1	; 0x01
    9850:	85 35       	cpi	r24, 0x55	; 85
    9852:	9a 4a       	sbci	r25, 0xAA	; 170
    9854:	f1 f4       	brne	.+60     	; 0x9892 <check_fs+0x6a>
    9856:	8d a9       	ldd	r24, Y+53	; 0x35
    9858:	8b 3e       	cpi	r24, 0xEB	; 235
    985a:	19 f0       	breq	.+6      	; 0x9862 <check_fs+0x3a>
    985c:	88 5e       	subi	r24, 0xE8	; 232
    985e:	82 30       	cpi	r24, 0x02	; 2
    9860:	f0 f4       	brcc	.+60     	; 0x989e <check_fs+0x76>
    9862:	43 e0       	ldi	r20, 0x03	; 3
    9864:	50 e0       	ldi	r21, 0x00	; 0
    9866:	66 ec       	ldi	r22, 0xC6	; 198
    9868:	78 e0       	ldi	r23, 0x08	; 8
    986a:	ce 01       	movw	r24, r28
    986c:	85 59       	subi	r24, 0x95	; 149
    986e:	9f 4f       	sbci	r25, 0xFF	; 255
    9870:	02 dc       	rcall	.-2044   	; 0x9076 <mem_cmp>
    9872:	89 2b       	or	r24, r25
    9874:	89 f0       	breq	.+34     	; 0x9898 <check_fs+0x70>
    9876:	45 e0       	ldi	r20, 0x05	; 5
    9878:	50 e0       	ldi	r21, 0x00	; 0
    987a:	61 e2       	ldi	r22, 0x21	; 33
    987c:	74 e0       	ldi	r23, 0x04	; 4
    987e:	ce 01       	movw	r24, r28
    9880:	89 57       	subi	r24, 0x79	; 121
    9882:	9f 4f       	sbci	r25, 0xFF	; 255
    9884:	f8 db       	rcall	.-2064   	; 0x9076 <mem_cmp>
    9886:	89 2b       	or	r24, r25
    9888:	51 f4       	brne	.+20     	; 0x989e <check_fs+0x76>
    988a:	06 c0       	rjmp	.+12     	; 0x9898 <check_fs+0x70>
    988c:	84 e0       	ldi	r24, 0x04	; 4
    988e:	90 e0       	ldi	r25, 0x00	; 0
    9890:	08 c0       	rjmp	.+16     	; 0x98a2 <check_fs+0x7a>
    9892:	83 e0       	ldi	r24, 0x03	; 3
    9894:	90 e0       	ldi	r25, 0x00	; 0
    9896:	05 c0       	rjmp	.+10     	; 0x98a2 <check_fs+0x7a>
    9898:	80 e0       	ldi	r24, 0x00	; 0
    989a:	90 e0       	ldi	r25, 0x00	; 0
    989c:	02 c0       	rjmp	.+4      	; 0x98a2 <check_fs+0x7a>
    989e:	82 e0       	ldi	r24, 0x02	; 2
    98a0:	90 e0       	ldi	r25, 0x00	; 0
    98a2:	df 91       	pop	r29
    98a4:	cf 91       	pop	r28
    98a6:	08 95       	ret

000098a8 <mount_volume>:
    98a8:	a0 e2       	ldi	r26, 0x20	; 32
    98aa:	b0 e0       	ldi	r27, 0x00	; 0
    98ac:	ea e5       	ldi	r30, 0x5A	; 90
    98ae:	fc e4       	ldi	r31, 0x4C	; 76
    98b0:	0c 94 95 e7 	jmp	0x1cf2a	; 0x1cf2a <__prologue_saves__+0x4>
    98b4:	5b 01       	movw	r10, r22
    98b6:	f4 2e       	mov	r15, r20
    98b8:	db 01       	movw	r26, r22
    98ba:	1d 92       	st	X+, r1
    98bc:	1c 92       	st	X, r1
    98be:	5d dc       	rcall	.-1862   	; 0x917a <get_ldnumber>
    98c0:	6c 01       	movw	r12, r24
    98c2:	97 fd       	sbrc	r25, 7
    98c4:	39 c2       	rjmp	.+1138   	; 0x9d38 <mount_volume+0x490>
    98c6:	fc 01       	movw	r30, r24
    98c8:	ee 0f       	add	r30, r30
    98ca:	ff 1f       	adc	r31, r31
    98cc:	e9 5e       	subi	r30, 0xE9	; 233
    98ce:	f7 4e       	sbci	r31, 0xE7	; 231
    98d0:	00 81       	ld	r16, Z
    98d2:	11 81       	ldd	r17, Z+1	; 0x01
    98d4:	01 15       	cp	r16, r1
    98d6:	11 05       	cpc	r17, r1
    98d8:	09 f4       	brne	.+2      	; 0x98dc <mount_volume+0x34>
    98da:	31 c2       	rjmp	.+1122   	; 0x9d3e <mount_volume+0x496>
    98dc:	f5 01       	movw	r30, r10
    98de:	11 83       	std	Z+1, r17	; 0x01
    98e0:	00 83       	st	Z, r16
    98e2:	ff 2d       	mov	r31, r15
    98e4:	fe 7f       	andi	r31, 0xFE	; 254
    98e6:	ff 2e       	mov	r15, r31
    98e8:	d8 01       	movw	r26, r16
    98ea:	8c 91       	ld	r24, X
    98ec:	88 23       	and	r24, r24
    98ee:	71 f0       	breq	.+28     	; 0x990c <mount_volume+0x64>
    98f0:	f8 01       	movw	r30, r16
    98f2:	81 81       	ldd	r24, Z+1	; 0x01
    98f4:	0e 94 ff 69 	call	0xd3fe	; 0xd3fe <disk_status>
    98f8:	80 fd       	sbrc	r24, 0
    98fa:	08 c0       	rjmp	.+16     	; 0x990c <mount_volume+0x64>
    98fc:	ff 20       	and	r15, r15
    98fe:	09 f4       	brne	.+2      	; 0x9902 <mount_volume+0x5a>
    9900:	21 c2       	rjmp	.+1090   	; 0x9d44 <mount_volume+0x49c>
    9902:	82 ff       	sbrs	r24, 2
    9904:	1f c2       	rjmp	.+1086   	; 0x9d44 <mount_volume+0x49c>
    9906:	8a e0       	ldi	r24, 0x0A	; 10
    9908:	90 e0       	ldi	r25, 0x00	; 0
    990a:	24 c2       	rjmp	.+1096   	; 0x9d54 <mount_volume+0x4ac>
    990c:	d8 01       	movw	r26, r16
    990e:	1c 92       	st	X, r1
    9910:	f8 01       	movw	r30, r16
    9912:	c1 82       	std	Z+1, r12	; 0x01
    9914:	8c 2d       	mov	r24, r12
    9916:	0e 94 05 6a 	call	0xd40a	; 0xd40a <disk_initialize>
    991a:	80 fd       	sbrc	r24, 0
    991c:	16 c2       	rjmp	.+1068   	; 0x9d4a <mount_volume+0x4a2>
    991e:	ff 20       	and	r15, r15
    9920:	11 f0       	breq	.+4      	; 0x9926 <mount_volume+0x7e>
    9922:	82 fd       	sbrc	r24, 2
    9924:	f0 cf       	rjmp	.-32     	; 0x9906 <mount_volume+0x5e>
    9926:	40 e0       	ldi	r20, 0x00	; 0
    9928:	50 e0       	ldi	r21, 0x00	; 0
    992a:	ba 01       	movw	r22, r20
    992c:	c8 01       	movw	r24, r16
    992e:	7c df       	rcall	.-264    	; 0x9828 <check_fs>
    9930:	82 30       	cpi	r24, 0x02	; 2
    9932:	91 05       	cpc	r25, r1
    9934:	b9 f5       	brne	.+110    	; 0x99a4 <mount_volume+0xfc>
    9936:	68 01       	movw	r12, r16
    9938:	f5 e0       	ldi	r31, 0x05	; 5
    993a:	cf 1a       	sub	r12, r31
    993c:	fe ef       	ldi	r31, 0xFE	; 254
    993e:	df 0a       	sbc	r13, r31
    9940:	9e 01       	movw	r18, r28
    9942:	2f 5f       	subi	r18, 0xFF	; 255
    9944:	3f 4f       	sbci	r19, 0xFF	; 255
    9946:	79 01       	movw	r14, r18
    9948:	48 01       	movw	r8, r16
    994a:	35 ec       	ldi	r19, 0xC5	; 197
    994c:	83 1a       	sub	r8, r19
    994e:	3d ef       	ldi	r19, 0xFD	; 253
    9950:	93 0a       	sbc	r9, r19
    9952:	57 01       	movw	r10, r14
    9954:	c6 01       	movw	r24, r12
    9956:	6b db       	rcall	.-2346   	; 0x902e <ld_dword>
    9958:	d5 01       	movw	r26, r10
    995a:	6d 93       	st	X+, r22
    995c:	7d 93       	st	X+, r23
    995e:	8d 93       	st	X+, r24
    9960:	9d 93       	st	X+, r25
    9962:	5d 01       	movw	r10, r26
    9964:	b0 e1       	ldi	r27, 0x10	; 16
    9966:	cb 0e       	add	r12, r27
    9968:	d1 1c       	adc	r13, r1
    996a:	c8 14       	cp	r12, r8
    996c:	d9 04       	cpc	r13, r9
    996e:	91 f7       	brne	.-28     	; 0x9954 <mount_volume+0xac>
    9970:	6e 01       	movw	r12, r28
    9972:	e1 e1       	ldi	r30, 0x11	; 17
    9974:	ce 0e       	add	r12, r30
    9976:	d1 1c       	adc	r13, r1
    9978:	d7 01       	movw	r26, r14
    997a:	4d 91       	ld	r20, X+
    997c:	5d 91       	ld	r21, X+
    997e:	6d 91       	ld	r22, X+
    9980:	7d 91       	ld	r23, X+
    9982:	7d 01       	movw	r14, r26
    9984:	41 15       	cp	r20, r1
    9986:	51 05       	cpc	r21, r1
    9988:	61 05       	cpc	r22, r1
    998a:	71 05       	cpc	r23, r1
    998c:	31 f0       	breq	.+12     	; 0x999a <mount_volume+0xf2>
    998e:	c8 01       	movw	r24, r16
    9990:	4b df       	rcall	.-362    	; 0x9828 <check_fs>
    9992:	82 30       	cpi	r24, 0x02	; 2
    9994:	91 05       	cpc	r25, r1
    9996:	18 f4       	brcc	.+6      	; 0x999e <mount_volume+0xf6>
    9998:	05 c0       	rjmp	.+10     	; 0x99a4 <mount_volume+0xfc>
    999a:	83 e0       	ldi	r24, 0x03	; 3
    999c:	90 e0       	ldi	r25, 0x00	; 0
    999e:	ce 14       	cp	r12, r14
    99a0:	df 04       	cpc	r13, r15
    99a2:	51 f7       	brne	.-44     	; 0x9978 <mount_volume+0xd0>
    99a4:	84 30       	cpi	r24, 0x04	; 4
    99a6:	91 05       	cpc	r25, r1
    99a8:	09 f4       	brne	.+2      	; 0x99ac <mount_volume+0x104>
    99aa:	d2 c1       	rjmp	.+932    	; 0x9d50 <mount_volume+0x4a8>
    99ac:	02 97       	sbiw	r24, 0x02	; 2
    99ae:	18 f0       	brcs	.+6      	; 0x99b6 <mount_volume+0x10e>
    99b0:	8d e0       	ldi	r24, 0x0D	; 13
    99b2:	90 e0       	ldi	r25, 0x00	; 0
    99b4:	cf c1       	rjmp	.+926    	; 0x9d54 <mount_volume+0x4ac>
    99b6:	f8 01       	movw	r30, r16
    99b8:	e0 5c       	subi	r30, 0xC0	; 192
    99ba:	ff 4f       	sbci	r31, 0xFF	; 255
    99bc:	80 81       	ld	r24, Z
    99be:	91 81       	ldd	r25, Z+1	; 0x01
    99c0:	81 15       	cp	r24, r1
    99c2:	92 40       	sbci	r25, 0x02	; 2
    99c4:	a9 f7       	brne	.-22     	; 0x99b0 <mount_volume+0x108>
    99c6:	3b 96       	adiw	r30, 0x0b	; 11
    99c8:	40 80       	ld	r4, Z
    99ca:	51 80       	ldd	r5, Z+1	; 0x01
    99cc:	41 14       	cp	r4, r1
    99ce:	51 04       	cpc	r5, r1
    99d0:	19 f0       	breq	.+6      	; 0x99d8 <mount_volume+0x130>
    99d2:	61 2c       	mov	r6, r1
    99d4:	71 2c       	mov	r7, r1
    99d6:	06 c0       	rjmp	.+12     	; 0x99e4 <mount_volume+0x13c>
    99d8:	c8 01       	movw	r24, r16
    99da:	87 5a       	subi	r24, 0xA7	; 167
    99dc:	9f 4f       	sbci	r25, 0xFF	; 255
    99de:	27 db       	rcall	.-2482   	; 0x902e <ld_dword>
    99e0:	2b 01       	movw	r4, r22
    99e2:	3c 01       	movw	r6, r24
    99e4:	f8 01       	movw	r30, r16
    99e6:	21 a9       	ldd	r18, Z+49	; 0x31
    99e8:	32 a9       	ldd	r19, Z+50	; 0x32
    99ea:	43 a9       	ldd	r20, Z+51	; 0x33
    99ec:	54 a9       	ldd	r21, Z+52	; 0x34
    99ee:	29 8b       	std	Y+17, r18	; 0x11
    99f0:	3a 8b       	std	Y+18, r19	; 0x12
    99f2:	4b 8b       	std	Y+19, r20	; 0x13
    99f4:	5c 8b       	std	Y+20, r21	; 0x14
    99f6:	45 8e       	std	Z+29, r4	; 0x1d
    99f8:	56 8e       	std	Z+30, r5	; 0x1e
    99fa:	67 8e       	std	Z+31, r6	; 0x1f
    99fc:	70 a2       	std	Z+32, r7	; 0x20
    99fe:	eb 5b       	subi	r30, 0xBB	; 187
    9a00:	ff 4f       	sbci	r31, 0xFF	; 255
    9a02:	a0 80       	ld	r10, Z
    9a04:	f8 01       	movw	r30, r16
    9a06:	a2 82       	std	Z+2, r10	; 0x02
    9a08:	8f ef       	ldi	r24, 0xFF	; 255
    9a0a:	8a 0d       	add	r24, r10
    9a0c:	82 30       	cpi	r24, 0x02	; 2
    9a0e:	80 f6       	brcc	.-96     	; 0x99b0 <mount_volume+0x108>
    9a10:	ee 5b       	subi	r30, 0xBE	; 190
    9a12:	ff 4f       	sbci	r31, 0xFF	; 255
    9a14:	b0 80       	ld	r11, Z
    9a16:	8b 2d       	mov	r24, r11
    9a18:	90 e0       	ldi	r25, 0x00	; 0
    9a1a:	f8 01       	movw	r30, r16
    9a1c:	92 87       	std	Z+10, r25	; 0x0a
    9a1e:	81 87       	std	Z+9, r24	; 0x09
    9a20:	00 97       	sbiw	r24, 0x00	; 0
    9a22:	31 f2       	breq	.-116    	; 0x99b0 <mount_volume+0x108>
    9a24:	9c 01       	movw	r18, r24
    9a26:	21 50       	subi	r18, 0x01	; 1
    9a28:	31 09       	sbc	r19, r1
    9a2a:	82 23       	and	r24, r18
    9a2c:	93 23       	and	r25, r19
    9a2e:	89 2b       	or	r24, r25
    9a30:	09 f0       	breq	.+2      	; 0x9a34 <mount_volume+0x18c>
    9a32:	be cf       	rjmp	.-132    	; 0x99b0 <mount_volume+0x108>
    9a34:	ea 5b       	subi	r30, 0xBA	; 186
    9a36:	ff 4f       	sbci	r31, 0xFF	; 255
    9a38:	80 80       	ld	r8, Z
    9a3a:	91 80       	ldd	r9, Z+1	; 0x01
    9a3c:	f8 01       	movw	r30, r16
    9a3e:	90 86       	std	Z+8, r9	; 0x08
    9a40:	87 82       	std	Z+7, r8	; 0x07
    9a42:	c4 01       	movw	r24, r8
    9a44:	8f 70       	andi	r24, 0x0F	; 15
    9a46:	99 27       	eor	r25, r25
    9a48:	89 2b       	or	r24, r25
    9a4a:	09 f0       	breq	.+2      	; 0x9a4e <mount_volume+0x1a6>
    9a4c:	b1 cf       	rjmp	.-158    	; 0x99b0 <mount_volume+0x108>
    9a4e:	e8 5b       	subi	r30, 0xB8	; 184
    9a50:	ff 4f       	sbci	r31, 0xFF	; 255
    9a52:	80 81       	ld	r24, Z
    9a54:	91 81       	ldd	r25, Z+1	; 0x01
    9a56:	6c 01       	movw	r12, r24
    9a58:	e1 2c       	mov	r14, r1
    9a5a:	f1 2c       	mov	r15, r1
    9a5c:	89 2b       	or	r24, r25
    9a5e:	31 f4       	brne	.+12     	; 0x9a6c <mount_volume+0x1c4>
    9a60:	c8 01       	movw	r24, r16
    9a62:	8b 5a       	subi	r24, 0xAB	; 171
    9a64:	9f 4f       	sbci	r25, 0xFF	; 255
    9a66:	e3 da       	rcall	.-2618   	; 0x902e <ld_dword>
    9a68:	6b 01       	movw	r12, r22
    9a6a:	7c 01       	movw	r14, r24
    9a6c:	f8 01       	movw	r30, r16
    9a6e:	ed 5b       	subi	r30, 0xBD	; 189
    9a70:	ff 4f       	sbci	r31, 0xFF	; 255
    9a72:	01 90       	ld	r0, Z+
    9a74:	f0 81       	ld	r31, Z
    9a76:	e0 2d       	mov	r30, r0
    9a78:	30 97       	sbiw	r30, 0x00	; 0
    9a7a:	09 f4       	brne	.+2      	; 0x9a7e <mount_volume+0x1d6>
    9a7c:	99 cf       	rjmp	.-206    	; 0x99b0 <mount_volume+0x108>
    9a7e:	aa 2d       	mov	r26, r10
    9a80:	b0 e0       	ldi	r27, 0x00	; 0
    9a82:	a3 01       	movw	r20, r6
    9a84:	92 01       	movw	r18, r4
    9a86:	0e 94 73 e7 	call	0x1cee6	; 0x1cee6 <__muluhisi3>
    9a8a:	69 8f       	std	Y+25, r22	; 0x19
    9a8c:	7a 8f       	std	Y+26, r23	; 0x1a
    9a8e:	8b 8f       	std	Y+27, r24	; 0x1b
    9a90:	9c 8f       	std	Y+28, r25	; 0x1c
    9a92:	9f 01       	movw	r18, r30
    9a94:	40 e0       	ldi	r20, 0x00	; 0
    9a96:	50 e0       	ldi	r21, 0x00	; 0
    9a98:	2d 8f       	std	Y+29, r18	; 0x1d
    9a9a:	3e 8f       	std	Y+30, r19	; 0x1e
    9a9c:	4f 8f       	std	Y+31, r20	; 0x1f
    9a9e:	58 a3       	std	Y+32, r21	; 0x20
    9aa0:	c4 01       	movw	r24, r8
    9aa2:	f4 e0       	ldi	r31, 0x04	; 4
    9aa4:	96 95       	lsr	r25
    9aa6:	87 95       	ror	r24
    9aa8:	fa 95       	dec	r31
    9aaa:	e1 f7       	brne	.-8      	; 0x9aa4 <mount_volume+0x1fc>
    9aac:	28 0f       	add	r18, r24
    9aae:	39 1f       	adc	r19, r25
    9ab0:	41 1d       	adc	r20, r1
    9ab2:	51 1d       	adc	r21, r1
    9ab4:	da 01       	movw	r26, r20
    9ab6:	c9 01       	movw	r24, r18
    9ab8:	29 8d       	ldd	r18, Y+25	; 0x19
    9aba:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9abc:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9abe:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9ac0:	28 0f       	add	r18, r24
    9ac2:	39 1f       	adc	r19, r25
    9ac4:	4a 1f       	adc	r20, r26
    9ac6:	5b 1f       	adc	r21, r27
    9ac8:	2d 8b       	std	Y+21, r18	; 0x15
    9aca:	3e 8b       	std	Y+22, r19	; 0x16
    9acc:	4f 8b       	std	Y+23, r20	; 0x17
    9ace:	58 8f       	std	Y+24, r21	; 0x18
    9ad0:	c2 16       	cp	r12, r18
    9ad2:	d3 06       	cpc	r13, r19
    9ad4:	e4 06       	cpc	r14, r20
    9ad6:	f5 06       	cpc	r15, r21
    9ad8:	08 f4       	brcc	.+2      	; 0x9adc <mount_volume+0x234>
    9ada:	6a cf       	rjmp	.-300    	; 0x99b0 <mount_volume+0x108>
    9adc:	c7 01       	movw	r24, r14
    9ade:	b6 01       	movw	r22, r12
    9ae0:	62 1b       	sub	r22, r18
    9ae2:	73 0b       	sbc	r23, r19
    9ae4:	84 0b       	sbc	r24, r20
    9ae6:	95 0b       	sbc	r25, r21
    9ae8:	2b 2d       	mov	r18, r11
    9aea:	30 e0       	ldi	r19, 0x00	; 0
    9aec:	40 e0       	ldi	r20, 0x00	; 0
    9aee:	50 e0       	ldi	r21, 0x00	; 0
    9af0:	0e 94 26 e7 	call	0x1ce4c	; 0x1ce4c <__udivmodsi4>
    9af4:	da 01       	movw	r26, r20
    9af6:	c9 01       	movw	r24, r18
    9af8:	01 97       	sbiw	r24, 0x01	; 1
    9afa:	a1 09       	sbc	r26, r1
    9afc:	b1 09       	sbc	r27, r1
    9afe:	85 3f       	cpi	r24, 0xF5	; 245
    9b00:	9f 4f       	sbci	r25, 0xFF	; 255
    9b02:	af 4f       	sbci	r26, 0xFF	; 255
    9b04:	bf 40       	sbci	r27, 0x0F	; 15
    9b06:	08 f0       	brcs	.+2      	; 0x9b0a <mount_volume+0x262>
    9b08:	53 cf       	rjmp	.-346    	; 0x99b0 <mount_volume+0x108>
    9b0a:	26 3f       	cpi	r18, 0xF6	; 246
    9b0c:	8f ef       	ldi	r24, 0xFF	; 255
    9b0e:	38 07       	cpc	r19, r24
    9b10:	41 05       	cpc	r20, r1
    9b12:	51 05       	cpc	r21, r1
    9b14:	50 f4       	brcc	.+20     	; 0x9b2a <mount_volume+0x282>
    9b16:	26 3f       	cpi	r18, 0xF6	; 246
    9b18:	9f e0       	ldi	r25, 0x0F	; 15
    9b1a:	39 07       	cpc	r19, r25
    9b1c:	41 05       	cpc	r20, r1
    9b1e:	51 05       	cpc	r21, r1
    9b20:	40 f4       	brcc	.+16     	; 0x9b32 <mount_volume+0x28a>
    9b22:	aa 24       	eor	r10, r10
    9b24:	a3 94       	inc	r10
    9b26:	b1 2c       	mov	r11, r1
    9b28:	07 c0       	rjmp	.+14     	; 0x9b38 <mount_volume+0x290>
    9b2a:	73 e0       	ldi	r23, 0x03	; 3
    9b2c:	a7 2e       	mov	r10, r23
    9b2e:	b1 2c       	mov	r11, r1
    9b30:	03 c0       	rjmp	.+6      	; 0x9b38 <mount_volume+0x290>
    9b32:	62 e0       	ldi	r22, 0x02	; 2
    9b34:	a6 2e       	mov	r10, r22
    9b36:	b1 2c       	mov	r11, r1
    9b38:	69 01       	movw	r12, r18
    9b3a:	7a 01       	movw	r14, r20
    9b3c:	a2 e0       	ldi	r26, 0x02	; 2
    9b3e:	ca 0e       	add	r12, r26
    9b40:	d1 1c       	adc	r13, r1
    9b42:	e1 1c       	adc	r14, r1
    9b44:	f1 1c       	adc	r15, r1
    9b46:	f8 01       	movw	r30, r16
    9b48:	c1 8e       	std	Z+25, r12	; 0x19
    9b4a:	d2 8e       	std	Z+26, r13	; 0x1a
    9b4c:	e3 8e       	std	Z+27, r14	; 0x1b
    9b4e:	f4 8e       	std	Z+28, r15	; 0x1c
    9b50:	29 89       	ldd	r18, Y+17	; 0x11
    9b52:	3a 89       	ldd	r19, Y+18	; 0x12
    9b54:	4b 89       	ldd	r20, Y+19	; 0x13
    9b56:	5c 89       	ldd	r21, Y+20	; 0x14
    9b58:	21 a3       	std	Z+33, r18	; 0x21
    9b5a:	32 a3       	std	Z+34, r19	; 0x22
    9b5c:	43 a3       	std	Z+35, r20	; 0x23
    9b5e:	54 a3       	std	Z+36, r21	; 0x24
    9b60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9b62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9b64:	af 8d       	ldd	r26, Y+31	; 0x1f
    9b66:	b8 a1       	ldd	r27, Y+32	; 0x20
    9b68:	28 0f       	add	r18, r24
    9b6a:	39 1f       	adc	r19, r25
    9b6c:	4a 1f       	adc	r20, r26
    9b6e:	5b 1f       	adc	r21, r27
    9b70:	2d 8f       	std	Y+29, r18	; 0x1d
    9b72:	3e 8f       	std	Y+30, r19	; 0x1e
    9b74:	4f 8f       	std	Y+31, r20	; 0x1f
    9b76:	58 a3       	std	Y+32, r21	; 0x20
    9b78:	25 a3       	std	Z+37, r18	; 0x25
    9b7a:	36 a3       	std	Z+38, r19	; 0x26
    9b7c:	47 a3       	std	Z+39, r20	; 0x27
    9b7e:	50 a7       	std	Z+40, r21	; 0x28
    9b80:	49 89       	ldd	r20, Y+17	; 0x11
    9b82:	5a 89       	ldd	r21, Y+18	; 0x12
    9b84:	6b 89       	ldd	r22, Y+19	; 0x13
    9b86:	7c 89       	ldd	r23, Y+20	; 0x14
    9b88:	8d 89       	ldd	r24, Y+21	; 0x15
    9b8a:	9e 89       	ldd	r25, Y+22	; 0x16
    9b8c:	af 89       	ldd	r26, Y+23	; 0x17
    9b8e:	b8 8d       	ldd	r27, Y+24	; 0x18
    9b90:	48 0f       	add	r20, r24
    9b92:	59 1f       	adc	r21, r25
    9b94:	6a 1f       	adc	r22, r26
    9b96:	7b 1f       	adc	r23, r27
    9b98:	45 a7       	std	Z+45, r20	; 0x2d
    9b9a:	56 a7       	std	Z+46, r21	; 0x2e
    9b9c:	67 a7       	std	Z+47, r22	; 0x2f
    9b9e:	70 ab       	std	Z+48, r23	; 0x30
    9ba0:	f3 e0       	ldi	r31, 0x03	; 3
    9ba2:	af 16       	cp	r10, r31
    9ba4:	b1 04       	cpc	r11, r1
    9ba6:	e9 f4       	brne	.+58     	; 0x9be2 <mount_volume+0x33a>
    9ba8:	f8 01       	movw	r30, r16
    9baa:	e1 5a       	subi	r30, 0xA1	; 161
    9bac:	ff 4f       	sbci	r31, 0xFF	; 255
    9bae:	80 81       	ld	r24, Z
    9bb0:	91 81       	ldd	r25, Z+1	; 0x01
    9bb2:	89 2b       	or	r24, r25
    9bb4:	09 f0       	breq	.+2      	; 0x9bb8 <mount_volume+0x310>
    9bb6:	fc ce       	rjmp	.-520    	; 0x99b0 <mount_volume+0x108>
    9bb8:	81 14       	cp	r8, r1
    9bba:	91 04       	cpc	r9, r1
    9bbc:	09 f0       	breq	.+2      	; 0x9bc0 <mount_volume+0x318>
    9bbe:	f8 ce       	rjmp	.-528    	; 0x99b0 <mount_volume+0x108>
    9bc0:	c8 01       	movw	r24, r16
    9bc2:	8f 59       	subi	r24, 0x9F	; 159
    9bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    9bc6:	33 da       	rcall	.-2970   	; 0x902e <ld_dword>
    9bc8:	f8 01       	movw	r30, r16
    9bca:	61 a7       	std	Z+41, r22	; 0x29
    9bcc:	72 a7       	std	Z+42, r23	; 0x2a
    9bce:	83 a7       	std	Z+43, r24	; 0x2b
    9bd0:	94 a7       	std	Z+44, r25	; 0x2c
    9bd2:	42 e0       	ldi	r20, 0x02	; 2
    9bd4:	cc 0c       	add	r12, r12
    9bd6:	dd 1c       	adc	r13, r13
    9bd8:	ee 1c       	adc	r14, r14
    9bda:	ff 1c       	adc	r15, r15
    9bdc:	4a 95       	dec	r20
    9bde:	d1 f7       	brne	.-12     	; 0x9bd4 <mount_volume+0x32c>
    9be0:	33 c0       	rjmp	.+102    	; 0x9c48 <mount_volume+0x3a0>
    9be2:	81 14       	cp	r8, r1
    9be4:	91 04       	cpc	r9, r1
    9be6:	09 f4       	brne	.+2      	; 0x9bea <mount_volume+0x342>
    9be8:	e3 ce       	rjmp	.-570    	; 0x99b0 <mount_volume+0x108>
    9bea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9bec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9bee:	af 8d       	ldd	r26, Y+31	; 0x1f
    9bf0:	b8 a1       	ldd	r27, Y+32	; 0x20
    9bf2:	29 8d       	ldd	r18, Y+25	; 0x19
    9bf4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9bf6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9bf8:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9bfa:	82 0f       	add	r24, r18
    9bfc:	93 1f       	adc	r25, r19
    9bfe:	a4 1f       	adc	r26, r20
    9c00:	b5 1f       	adc	r27, r21
    9c02:	f8 01       	movw	r30, r16
    9c04:	81 a7       	std	Z+41, r24	; 0x29
    9c06:	92 a7       	std	Z+42, r25	; 0x2a
    9c08:	a3 a7       	std	Z+43, r26	; 0x2b
    9c0a:	b4 a7       	std	Z+44, r27	; 0x2c
    9c0c:	f2 e0       	ldi	r31, 0x02	; 2
    9c0e:	af 16       	cp	r10, r31
    9c10:	b1 04       	cpc	r11, r1
    9c12:	29 f4       	brne	.+10     	; 0x9c1e <mount_volume+0x376>
    9c14:	cc 0c       	add	r12, r12
    9c16:	dd 1c       	adc	r13, r13
    9c18:	ee 1c       	adc	r14, r14
    9c1a:	ff 1c       	adc	r15, r15
    9c1c:	15 c0       	rjmp	.+42     	; 0x9c48 <mount_volume+0x3a0>
    9c1e:	a3 e0       	ldi	r26, 0x03	; 3
    9c20:	b0 e0       	ldi	r27, 0x00	; 0
    9c22:	a7 01       	movw	r20, r14
    9c24:	96 01       	movw	r18, r12
    9c26:	0e 94 73 e7 	call	0x1cee6	; 0x1cee6 <__muluhisi3>
    9c2a:	dc 01       	movw	r26, r24
    9c2c:	cb 01       	movw	r24, r22
    9c2e:	b6 95       	lsr	r27
    9c30:	a7 95       	ror	r26
    9c32:	97 95       	ror	r25
    9c34:	87 95       	ror	r24
    9c36:	21 e0       	ldi	r18, 0x01	; 1
    9c38:	c2 22       	and	r12, r18
    9c3a:	dd 24       	eor	r13, r13
    9c3c:	ee 24       	eor	r14, r14
    9c3e:	ff 24       	eor	r15, r15
    9c40:	c8 0e       	add	r12, r24
    9c42:	d9 1e       	adc	r13, r25
    9c44:	ea 1e       	adc	r14, r26
    9c46:	fb 1e       	adc	r15, r27
    9c48:	3f ef       	ldi	r19, 0xFF	; 255
    9c4a:	c3 0e       	add	r12, r19
    9c4c:	31 e0       	ldi	r19, 0x01	; 1
    9c4e:	d3 1e       	adc	r13, r19
    9c50:	e1 1c       	adc	r14, r1
    9c52:	f1 1c       	adc	r15, r1
    9c54:	89 e0       	ldi	r24, 0x09	; 9
    9c56:	f6 94       	lsr	r15
    9c58:	e7 94       	ror	r14
    9c5a:	d7 94       	ror	r13
    9c5c:	c7 94       	ror	r12
    9c5e:	8a 95       	dec	r24
    9c60:	d1 f7       	brne	.-12     	; 0x9c56 <mount_volume+0x3ae>
    9c62:	4c 14       	cp	r4, r12
    9c64:	5d 04       	cpc	r5, r13
    9c66:	6e 04       	cpc	r6, r14
    9c68:	7f 04       	cpc	r7, r15
    9c6a:	08 f4       	brcc	.+2      	; 0x9c6e <mount_volume+0x3c6>
    9c6c:	a1 ce       	rjmp	.-702    	; 0x99b0 <mount_volume+0x108>
    9c6e:	8f ef       	ldi	r24, 0xFF	; 255
    9c70:	9f ef       	ldi	r25, 0xFF	; 255
    9c72:	dc 01       	movw	r26, r24
    9c74:	f8 01       	movw	r30, r16
    9c76:	81 8b       	std	Z+17, r24	; 0x11
    9c78:	92 8b       	std	Z+18, r25	; 0x12
    9c7a:	a3 8b       	std	Z+19, r26	; 0x13
    9c7c:	b4 8b       	std	Z+20, r27	; 0x14
    9c7e:	85 87       	std	Z+13, r24	; 0x0d
    9c80:	96 87       	std	Z+14, r25	; 0x0e
    9c82:	a7 87       	std	Z+15, r26	; 0x0f
    9c84:	b0 8b       	std	Z+16, r27	; 0x10
    9c86:	80 e8       	ldi	r24, 0x80	; 128
    9c88:	84 83       	std	Z+4, r24	; 0x04
    9c8a:	f3 e0       	ldi	r31, 0x03	; 3
    9c8c:	af 16       	cp	r10, r31
    9c8e:	b1 04       	cpc	r11, r1
    9c90:	09 f0       	breq	.+2      	; 0x9c94 <mount_volume+0x3ec>
    9c92:	3f c0       	rjmp	.+126    	; 0x9d12 <mount_volume+0x46a>
    9c94:	f8 01       	movw	r30, r16
    9c96:	eb 59       	subi	r30, 0x9B	; 155
    9c98:	ff 4f       	sbci	r31, 0xFF	; 255
    9c9a:	80 81       	ld	r24, Z
    9c9c:	91 81       	ldd	r25, Z+1	; 0x01
    9c9e:	01 97       	sbiw	r24, 0x01	; 1
    9ca0:	c1 f5       	brne	.+112    	; 0x9d12 <mount_volume+0x46a>
    9ca2:	49 89       	ldd	r20, Y+17	; 0x11
    9ca4:	5a 89       	ldd	r21, Y+18	; 0x12
    9ca6:	6b 89       	ldd	r22, Y+19	; 0x13
    9ca8:	7c 89       	ldd	r23, Y+20	; 0x14
    9caa:	4f 5f       	subi	r20, 0xFF	; 255
    9cac:	5f 4f       	sbci	r21, 0xFF	; 255
    9cae:	6f 4f       	sbci	r22, 0xFF	; 255
    9cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    9cb2:	c8 01       	movw	r24, r16
    9cb4:	7e dd       	rcall	.-1284   	; 0x97b2 <move_window>
    9cb6:	89 2b       	or	r24, r25
    9cb8:	61 f5       	brne	.+88     	; 0x9d12 <mount_volume+0x46a>
    9cba:	f8 01       	movw	r30, r16
    9cbc:	14 82       	std	Z+4, r1	; 0x04
    9cbe:	ed 5c       	subi	r30, 0xCD	; 205
    9cc0:	fd 4f       	sbci	r31, 0xFD	; 253
    9cc2:	80 81       	ld	r24, Z
    9cc4:	91 81       	ldd	r25, Z+1	; 0x01
    9cc6:	85 35       	cpi	r24, 0x55	; 85
    9cc8:	9a 4a       	sbci	r25, 0xAA	; 170
    9cca:	19 f5       	brne	.+70     	; 0x9d12 <mount_volume+0x46a>
    9ccc:	c8 01       	movw	r24, r16
    9cce:	c5 96       	adiw	r24, 0x35	; 53
    9cd0:	ae d9       	rcall	.-3236   	; 0x902e <ld_dword>
    9cd2:	62 35       	cpi	r22, 0x52	; 82
    9cd4:	72 45       	sbci	r23, 0x52	; 82
    9cd6:	81 46       	sbci	r24, 0x61	; 97
    9cd8:	91 44       	sbci	r25, 0x41	; 65
    9cda:	d9 f4       	brne	.+54     	; 0x9d12 <mount_volume+0x46a>
    9cdc:	c8 01       	movw	r24, r16
    9cde:	87 5e       	subi	r24, 0xE7	; 231
    9ce0:	9d 4f       	sbci	r25, 0xFD	; 253
    9ce2:	a5 d9       	rcall	.-3254   	; 0x902e <ld_dword>
    9ce4:	62 37       	cpi	r22, 0x72	; 114
    9ce6:	72 47       	sbci	r23, 0x72	; 114
    9ce8:	81 44       	sbci	r24, 0x41	; 65
    9cea:	91 46       	sbci	r25, 0x61	; 97
    9cec:	91 f4       	brne	.+36     	; 0x9d12 <mount_volume+0x46a>
    9cee:	c8 01       	movw	r24, r16
    9cf0:	83 5e       	subi	r24, 0xE3	; 227
    9cf2:	9d 4f       	sbci	r25, 0xFD	; 253
    9cf4:	9c d9       	rcall	.-3272   	; 0x902e <ld_dword>
    9cf6:	f8 01       	movw	r30, r16
    9cf8:	61 8b       	std	Z+17, r22	; 0x11
    9cfa:	72 8b       	std	Z+18, r23	; 0x12
    9cfc:	83 8b       	std	Z+19, r24	; 0x13
    9cfe:	94 8b       	std	Z+20, r25	; 0x14
    9d00:	c8 01       	movw	r24, r16
    9d02:	8f 5d       	subi	r24, 0xDF	; 223
    9d04:	9d 4f       	sbci	r25, 0xFD	; 253
    9d06:	93 d9       	rcall	.-3290   	; 0x902e <ld_dword>
    9d08:	f8 01       	movw	r30, r16
    9d0a:	65 87       	std	Z+13, r22	; 0x0d
    9d0c:	76 87       	std	Z+14, r23	; 0x0e
    9d0e:	87 87       	std	Z+15, r24	; 0x0f
    9d10:	90 8b       	std	Z+16, r25	; 0x10
    9d12:	d8 01       	movw	r26, r16
    9d14:	ac 92       	st	X, r10
    9d16:	80 91 15 18 	lds	r24, 0x1815	; 0x801815 <Fsid>
    9d1a:	90 91 16 18 	lds	r25, 0x1816	; 0x801816 <Fsid+0x1>
    9d1e:	01 96       	adiw	r24, 0x01	; 1
    9d20:	90 93 16 18 	sts	0x1816, r25	; 0x801816 <Fsid+0x1>
    9d24:	80 93 15 18 	sts	0x1815, r24	; 0x801815 <Fsid>
    9d28:	f8 01       	movw	r30, r16
    9d2a:	96 83       	std	Z+6, r25	; 0x06
    9d2c:	85 83       	std	Z+5, r24	; 0x05
    9d2e:	15 8a       	std	Z+21, r1	; 0x15
    9d30:	16 8a       	std	Z+22, r1	; 0x16
    9d32:	17 8a       	std	Z+23, r1	; 0x17
    9d34:	10 8e       	std	Z+24, r1	; 0x18
    9d36:	06 c0       	rjmp	.+12     	; 0x9d44 <mount_volume+0x49c>
    9d38:	8b e0       	ldi	r24, 0x0B	; 11
    9d3a:	90 e0       	ldi	r25, 0x00	; 0
    9d3c:	0b c0       	rjmp	.+22     	; 0x9d54 <mount_volume+0x4ac>
    9d3e:	8c e0       	ldi	r24, 0x0C	; 12
    9d40:	90 e0       	ldi	r25, 0x00	; 0
    9d42:	08 c0       	rjmp	.+16     	; 0x9d54 <mount_volume+0x4ac>
    9d44:	80 e0       	ldi	r24, 0x00	; 0
    9d46:	90 e0       	ldi	r25, 0x00	; 0
    9d48:	05 c0       	rjmp	.+10     	; 0x9d54 <mount_volume+0x4ac>
    9d4a:	83 e0       	ldi	r24, 0x03	; 3
    9d4c:	90 e0       	ldi	r25, 0x00	; 0
    9d4e:	02 c0       	rjmp	.+4      	; 0x9d54 <mount_volume+0x4ac>
    9d50:	81 e0       	ldi	r24, 0x01	; 1
    9d52:	90 e0       	ldi	r25, 0x00	; 0
    9d54:	a0 96       	adiw	r28, 0x20	; 32
    9d56:	e0 e1       	ldi	r30, 0x10	; 16
    9d58:	0c 94 b1 e7 	jmp	0x1cf62	; 0x1cf62 <__epilogue_restores__+0x4>

00009d5c <put_fat>:
    9d5c:	a6 e0       	ldi	r26, 0x06	; 6
    9d5e:	b0 e0       	ldi	r27, 0x00	; 0
    9d60:	e4 eb       	ldi	r30, 0xB4	; 180
    9d62:	fe e4       	ldi	r31, 0x4E	; 78
    9d64:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
    9d68:	42 30       	cpi	r20, 0x02	; 2
    9d6a:	51 05       	cpc	r21, r1
    9d6c:	61 05       	cpc	r22, r1
    9d6e:	71 05       	cpc	r23, r1
    9d70:	08 f4       	brcc	.+2      	; 0x9d74 <put_fat+0x18>
    9d72:	e5 c0       	rjmp	.+458    	; 0x9f3e <put_fat+0x1e2>
    9d74:	fc 01       	movw	r30, r24
    9d76:	c1 8c       	ldd	r12, Z+25	; 0x19
    9d78:	d2 8c       	ldd	r13, Z+26	; 0x1a
    9d7a:	e3 8c       	ldd	r14, Z+27	; 0x1b
    9d7c:	f4 8c       	ldd	r15, Z+28	; 0x1c
    9d7e:	4c 15       	cp	r20, r12
    9d80:	5d 05       	cpc	r21, r13
    9d82:	6e 05       	cpc	r22, r14
    9d84:	7f 05       	cpc	r23, r15
    9d86:	08 f0       	brcs	.+2      	; 0x9d8a <put_fat+0x2e>
    9d88:	da c0       	rjmp	.+436    	; 0x9f3e <put_fat+0x1e2>
    9d8a:	28 01       	movw	r4, r16
    9d8c:	39 01       	movw	r6, r18
    9d8e:	6a 01       	movw	r12, r20
    9d90:	7b 01       	movw	r14, r22
    9d92:	9e 83       	std	Y+6, r25	; 0x06
    9d94:	8d 83       	std	Y+5, r24	; 0x05
    9d96:	80 81       	ld	r24, Z
    9d98:	82 30       	cpi	r24, 0x02	; 2
    9d9a:	09 f4       	brne	.+2      	; 0x9d9e <put_fat+0x42>
    9d9c:	73 c0       	rjmp	.+230    	; 0x9e84 <put_fat+0x128>
    9d9e:	83 30       	cpi	r24, 0x03	; 3
    9da0:	09 f4       	brne	.+2      	; 0x9da4 <put_fat+0x48>
    9da2:	92 c0       	rjmp	.+292    	; 0x9ec8 <put_fat+0x16c>
    9da4:	81 30       	cpi	r24, 0x01	; 1
    9da6:	09 f0       	breq	.+2      	; 0x9daa <put_fat+0x4e>
    9da8:	ca c0       	rjmp	.+404    	; 0x9f3e <put_fat+0x1e2>
    9daa:	4a 01       	movw	r8, r20
    9dac:	96 94       	lsr	r9
    9dae:	87 94       	ror	r8
    9db0:	84 0e       	add	r8, r20
    9db2:	95 1e       	adc	r9, r21
    9db4:	c4 01       	movw	r24, r8
    9db6:	89 2f       	mov	r24, r25
    9db8:	99 27       	eor	r25, r25
    9dba:	86 95       	lsr	r24
    9dbc:	45 a1       	ldd	r20, Z+37	; 0x25
    9dbe:	56 a1       	ldd	r21, Z+38	; 0x26
    9dc0:	67 a1       	ldd	r22, Z+39	; 0x27
    9dc2:	70 a5       	ldd	r23, Z+40	; 0x28
    9dc4:	48 0f       	add	r20, r24
    9dc6:	59 1f       	adc	r21, r25
    9dc8:	61 1d       	adc	r22, r1
    9dca:	71 1d       	adc	r23, r1
    9dcc:	cf 01       	movw	r24, r30
    9dce:	f1 dc       	rcall	.-1566   	; 0x97b2 <move_window>
    9dd0:	5c 01       	movw	r10, r24
    9dd2:	89 2b       	or	r24, r25
    9dd4:	09 f0       	breq	.+2      	; 0x9dd8 <put_fat+0x7c>
    9dd6:	b6 c0       	rjmp	.+364    	; 0x9f44 <put_fat+0x1e8>
    9dd8:	2d 80       	ldd	r2, Y+5	; 0x05
    9dda:	3e 80       	ldd	r3, Y+6	; 0x06
    9ddc:	f5 e3       	ldi	r31, 0x35	; 53
    9dde:	2f 0e       	add	r2, r31
    9de0:	31 1c       	adc	r3, r1
    9de2:	84 01       	movw	r16, r8
    9de4:	0f 5f       	subi	r16, 0xFF	; 255
    9de6:	1f 4f       	sbci	r17, 0xFF	; 255
    9de8:	21 e0       	ldi	r18, 0x01	; 1
    9dea:	92 22       	and	r9, r18
    9dec:	f1 01       	movw	r30, r2
    9dee:	e8 0d       	add	r30, r8
    9df0:	f9 1d       	adc	r31, r9
    9df2:	d7 01       	movw	r26, r14
    9df4:	c6 01       	movw	r24, r12
    9df6:	81 70       	andi	r24, 0x01	; 1
    9df8:	99 27       	eor	r25, r25
    9dfa:	aa 27       	eor	r26, r26
    9dfc:	bb 27       	eor	r27, r27
    9dfe:	89 83       	std	Y+1, r24	; 0x01
    9e00:	9a 83       	std	Y+2, r25	; 0x02
    9e02:	ab 83       	std	Y+3, r26	; 0x03
    9e04:	bc 83       	std	Y+4, r27	; 0x04
    9e06:	c0 fe       	sbrs	r12, 0
    9e08:	09 c0       	rjmp	.+18     	; 0x9e1c <put_fat+0xc0>
    9e0a:	80 81       	ld	r24, Z
    9e0c:	28 2f       	mov	r18, r24
    9e0e:	2f 70       	andi	r18, 0x0F	; 15
    9e10:	a0 e1       	ldi	r26, 0x10	; 16
    9e12:	4a 9e       	mul	r4, r26
    9e14:	c0 01       	movw	r24, r0
    9e16:	11 24       	eor	r1, r1
    9e18:	82 2b       	or	r24, r18
    9e1a:	01 c0       	rjmp	.+2      	; 0x9e1e <put_fat+0xc2>
    9e1c:	84 2d       	mov	r24, r4
    9e1e:	80 83       	st	Z, r24
    9e20:	81 e0       	ldi	r24, 0x01	; 1
    9e22:	ed 81       	ldd	r30, Y+5	; 0x05
    9e24:	fe 81       	ldd	r31, Y+6	; 0x06
    9e26:	83 83       	std	Z+3, r24	; 0x03
    9e28:	45 a1       	ldd	r20, Z+37	; 0x25
    9e2a:	56 a1       	ldd	r21, Z+38	; 0x26
    9e2c:	67 a1       	ldd	r22, Z+39	; 0x27
    9e2e:	70 a5       	ldd	r23, Z+40	; 0x28
    9e30:	c8 01       	movw	r24, r16
    9e32:	89 2f       	mov	r24, r25
    9e34:	99 27       	eor	r25, r25
    9e36:	86 95       	lsr	r24
    9e38:	48 0f       	add	r20, r24
    9e3a:	59 1f       	adc	r21, r25
    9e3c:	61 1d       	adc	r22, r1
    9e3e:	71 1d       	adc	r23, r1
    9e40:	cf 01       	movw	r24, r30
    9e42:	b7 dc       	rcall	.-1682   	; 0x97b2 <move_window>
    9e44:	5c 01       	movw	r10, r24
    9e46:	89 2b       	or	r24, r25
    9e48:	09 f0       	breq	.+2      	; 0x9e4c <put_fat+0xf0>
    9e4a:	7c c0       	rjmp	.+248    	; 0x9f44 <put_fat+0x1e8>
    9e4c:	11 70       	andi	r17, 0x01	; 1
    9e4e:	f1 01       	movw	r30, r2
    9e50:	e0 0f       	add	r30, r16
    9e52:	f1 1f       	adc	r31, r17
    9e54:	89 81       	ldd	r24, Y+1	; 0x01
    9e56:	9a 81       	ldd	r25, Y+2	; 0x02
    9e58:	ab 81       	ldd	r26, Y+3	; 0x03
    9e5a:	bc 81       	ldd	r27, Y+4	; 0x04
    9e5c:	89 2b       	or	r24, r25
    9e5e:	8a 2b       	or	r24, r26
    9e60:	8b 2b       	or	r24, r27
    9e62:	41 f0       	breq	.+16     	; 0x9e74 <put_fat+0x118>
    9e64:	54 e0       	ldi	r21, 0x04	; 4
    9e66:	76 94       	lsr	r7
    9e68:	67 94       	ror	r6
    9e6a:	57 94       	ror	r5
    9e6c:	47 94       	ror	r4
    9e6e:	5a 95       	dec	r21
    9e70:	d1 f7       	brne	.-12     	; 0x9e66 <put_fat+0x10a>
    9e72:	06 c0       	rjmp	.+12     	; 0x9e80 <put_fat+0x124>
    9e74:	00 81       	ld	r16, Z
    9e76:	00 7f       	andi	r16, 0xF0	; 240
    9e78:	85 2d       	mov	r24, r5
    9e7a:	8f 70       	andi	r24, 0x0F	; 15
    9e7c:	40 2e       	mov	r4, r16
    9e7e:	48 2a       	or	r4, r24
    9e80:	40 82       	st	Z, r4
    9e82:	58 c0       	rjmp	.+176    	; 0x9f34 <put_fat+0x1d8>
    9e84:	77 27       	eor	r23, r23
    9e86:	6f 2d       	mov	r22, r15
    9e88:	5e 2d       	mov	r21, r14
    9e8a:	4d 2d       	mov	r20, r13
    9e8c:	ed 81       	ldd	r30, Y+5	; 0x05
    9e8e:	fe 81       	ldd	r31, Y+6	; 0x06
    9e90:	85 a1       	ldd	r24, Z+37	; 0x25
    9e92:	96 a1       	ldd	r25, Z+38	; 0x26
    9e94:	a7 a1       	ldd	r26, Z+39	; 0x27
    9e96:	b0 a5       	ldd	r27, Z+40	; 0x28
    9e98:	48 0f       	add	r20, r24
    9e9a:	59 1f       	adc	r21, r25
    9e9c:	6a 1f       	adc	r22, r26
    9e9e:	7b 1f       	adc	r23, r27
    9ea0:	cf 01       	movw	r24, r30
    9ea2:	87 dc       	rcall	.-1778   	; 0x97b2 <move_window>
    9ea4:	5c 01       	movw	r10, r24
    9ea6:	89 2b       	or	r24, r25
    9ea8:	09 f0       	breq	.+2      	; 0x9eac <put_fat+0x150>
    9eaa:	4c c0       	rjmp	.+152    	; 0x9f44 <put_fat+0x1e8>
    9eac:	ed 81       	ldd	r30, Y+5	; 0x05
    9eae:	fe 81       	ldd	r31, Y+6	; 0x06
    9eb0:	f5 96       	adiw	r30, 0x35	; 53
    9eb2:	cc 0c       	add	r12, r12
    9eb4:	dd 1c       	adc	r13, r13
    9eb6:	e8 94       	clt
    9eb8:	c0 f8       	bld	r12, 0
    9eba:	21 e0       	ldi	r18, 0x01	; 1
    9ebc:	d2 22       	and	r13, r18
    9ebe:	ec 0d       	add	r30, r12
    9ec0:	fd 1d       	adc	r31, r13
    9ec2:	40 82       	st	Z, r4
    9ec4:	51 82       	std	Z+1, r5	; 0x01
    9ec6:	36 c0       	rjmp	.+108    	; 0x9f34 <put_fat+0x1d8>
    9ec8:	ed 81       	ldd	r30, Y+5	; 0x05
    9eca:	fe 81       	ldd	r31, Y+6	; 0x06
    9ecc:	85 a1       	ldd	r24, Z+37	; 0x25
    9ece:	96 a1       	ldd	r25, Z+38	; 0x26
    9ed0:	a7 a1       	ldd	r26, Z+39	; 0x27
    9ed2:	b0 a5       	ldd	r27, Z+40	; 0x28
    9ed4:	27 e0       	ldi	r18, 0x07	; 7
    9ed6:	76 95       	lsr	r23
    9ed8:	67 95       	ror	r22
    9eda:	57 95       	ror	r21
    9edc:	47 95       	ror	r20
    9ede:	2a 95       	dec	r18
    9ee0:	d1 f7       	brne	.-12     	; 0x9ed6 <put_fat+0x17a>
    9ee2:	48 0f       	add	r20, r24
    9ee4:	59 1f       	adc	r21, r25
    9ee6:	6a 1f       	adc	r22, r26
    9ee8:	7b 1f       	adc	r23, r27
    9eea:	cf 01       	movw	r24, r30
    9eec:	62 dc       	rcall	.-1852   	; 0x97b2 <move_window>
    9eee:	5c 01       	movw	r10, r24
    9ef0:	89 2b       	or	r24, r25
    9ef2:	41 f5       	brne	.+80     	; 0x9f44 <put_fat+0x1e8>
    9ef4:	4d 81       	ldd	r20, Y+5	; 0x05
    9ef6:	5e 81       	ldd	r21, Y+6	; 0x06
    9ef8:	4b 5c       	subi	r20, 0xCB	; 203
    9efa:	5f 4f       	sbci	r21, 0xFF	; 255
    9efc:	cc 0c       	add	r12, r12
    9efe:	dd 1c       	adc	r13, r13
    9f00:	cc 0c       	add	r12, r12
    9f02:	dd 1c       	adc	r13, r13
    9f04:	fc ef       	ldi	r31, 0xFC	; 252
    9f06:	cf 22       	and	r12, r31
    9f08:	f1 e0       	ldi	r31, 0x01	; 1
    9f0a:	df 22       	and	r13, r31
    9f0c:	c4 0e       	add	r12, r20
    9f0e:	d5 1e       	adc	r13, r21
    9f10:	c6 01       	movw	r24, r12
    9f12:	8d d8       	rcall	.-3814   	; 0x902e <ld_dword>
    9f14:	2f e0       	ldi	r18, 0x0F	; 15
    9f16:	72 22       	and	r7, r18
    9f18:	dc 01       	movw	r26, r24
    9f1a:	cb 01       	movw	r24, r22
    9f1c:	88 27       	eor	r24, r24
    9f1e:	99 27       	eor	r25, r25
    9f20:	aa 27       	eor	r26, r26
    9f22:	b0 7f       	andi	r27, 0xF0	; 240
    9f24:	b3 01       	movw	r22, r6
    9f26:	a2 01       	movw	r20, r4
    9f28:	48 2b       	or	r20, r24
    9f2a:	59 2b       	or	r21, r25
    9f2c:	6a 2b       	or	r22, r26
    9f2e:	7b 2b       	or	r23, r27
    9f30:	c6 01       	movw	r24, r12
    9f32:	92 d8       	rcall	.-3804   	; 0x9058 <st_dword>
    9f34:	81 e0       	ldi	r24, 0x01	; 1
    9f36:	ed 81       	ldd	r30, Y+5	; 0x05
    9f38:	fe 81       	ldd	r31, Y+6	; 0x06
    9f3a:	83 83       	std	Z+3, r24	; 0x03
    9f3c:	03 c0       	rjmp	.+6      	; 0x9f44 <put_fat+0x1e8>
    9f3e:	82 e0       	ldi	r24, 0x02	; 2
    9f40:	a8 2e       	mov	r10, r24
    9f42:	b1 2c       	mov	r11, r1
    9f44:	c5 01       	movw	r24, r10
    9f46:	26 96       	adiw	r28, 0x06	; 6
    9f48:	e2 e1       	ldi	r30, 0x12	; 18
    9f4a:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

00009f4e <get_fat.isra.9>:
    9f4e:	a0 e0       	ldi	r26, 0x00	; 0
    9f50:	b0 e0       	ldi	r27, 0x00	; 0
    9f52:	ed ea       	ldi	r30, 0xAD	; 173
    9f54:	ff e4       	ldi	r31, 0x4F	; 79
    9f56:	0c 94 9b e7 	jmp	0x1cf36	; 0x1cf36 <__prologue_saves__+0x10>
    9f5a:	42 30       	cpi	r20, 0x02	; 2
    9f5c:	51 05       	cpc	r21, r1
    9f5e:	61 05       	cpc	r22, r1
    9f60:	71 05       	cpc	r23, r1
    9f62:	08 f4       	brcc	.+2      	; 0x9f66 <get_fat.isra.9+0x18>
    9f64:	9f c0       	rjmp	.+318    	; 0xa0a4 <get_fat.isra.9+0x156>
    9f66:	fc 01       	movw	r30, r24
    9f68:	01 8d       	ldd	r16, Z+25	; 0x19
    9f6a:	12 8d       	ldd	r17, Z+26	; 0x1a
    9f6c:	23 8d       	ldd	r18, Z+27	; 0x1b
    9f6e:	34 8d       	ldd	r19, Z+28	; 0x1c
    9f70:	40 17       	cp	r20, r16
    9f72:	51 07       	cpc	r21, r17
    9f74:	62 07       	cpc	r22, r18
    9f76:	73 07       	cpc	r23, r19
    9f78:	08 f0       	brcs	.+2      	; 0x9f7c <get_fat.isra.9+0x2e>
    9f7a:	94 c0       	rjmp	.+296    	; 0xa0a4 <get_fat.isra.9+0x156>
    9f7c:	6a 01       	movw	r12, r20
    9f7e:	7b 01       	movw	r14, r22
    9f80:	8c 01       	movw	r16, r24
    9f82:	80 81       	ld	r24, Z
    9f84:	82 30       	cpi	r24, 0x02	; 2
    9f86:	09 f4       	brne	.+2      	; 0x9f8a <get_fat.isra.9+0x3c>
    9f88:	4b c0       	rjmp	.+150    	; 0xa020 <get_fat.isra.9+0xd2>
    9f8a:	83 30       	cpi	r24, 0x03	; 3
    9f8c:	09 f4       	brne	.+2      	; 0x9f90 <get_fat.isra.9+0x42>
    9f8e:	67 c0       	rjmp	.+206    	; 0xa05e <get_fat.isra.9+0x110>
    9f90:	81 30       	cpi	r24, 0x01	; 1
    9f92:	09 f0       	breq	.+2      	; 0x9f96 <get_fat.isra.9+0x48>
    9f94:	87 c0       	rjmp	.+270    	; 0xa0a4 <get_fat.isra.9+0x156>
    9f96:	ea 01       	movw	r28, r20
    9f98:	d6 95       	lsr	r29
    9f9a:	c7 95       	ror	r28
    9f9c:	cc 0d       	add	r28, r12
    9f9e:	dd 1d       	adc	r29, r13
    9fa0:	ce 01       	movw	r24, r28
    9fa2:	89 2f       	mov	r24, r25
    9fa4:	99 27       	eor	r25, r25
    9fa6:	86 95       	lsr	r24
    9fa8:	45 a1       	ldd	r20, Z+37	; 0x25
    9faa:	56 a1       	ldd	r21, Z+38	; 0x26
    9fac:	67 a1       	ldd	r22, Z+39	; 0x27
    9fae:	70 a5       	ldd	r23, Z+40	; 0x28
    9fb0:	48 0f       	add	r20, r24
    9fb2:	59 1f       	adc	r21, r25
    9fb4:	61 1d       	adc	r22, r1
    9fb6:	71 1d       	adc	r23, r1
    9fb8:	cf 01       	movw	r24, r30
    9fba:	fb db       	rcall	.-2058   	; 0x97b2 <move_window>
    9fbc:	89 2b       	or	r24, r25
    9fbe:	21 f0       	breq	.+8      	; 0x9fc8 <get_fat.isra.9+0x7a>
    9fc0:	6f ef       	ldi	r22, 0xFF	; 255
    9fc2:	7f ef       	ldi	r23, 0xFF	; 255
    9fc4:	cb 01       	movw	r24, r22
    9fc6:	72 c0       	rjmp	.+228    	; 0xa0ac <get_fat.isra.9+0x15e>
    9fc8:	5e 01       	movw	r10, r28
    9fca:	ff ef       	ldi	r31, 0xFF	; 255
    9fcc:	af 1a       	sub	r10, r31
    9fce:	bf 0a       	sbc	r11, r31
    9fd0:	d1 70       	andi	r29, 0x01	; 1
    9fd2:	c0 0f       	add	r28, r16
    9fd4:	d1 1f       	adc	r29, r17
    9fd6:	cd a9       	ldd	r28, Y+53	; 0x35
    9fd8:	c5 01       	movw	r24, r10
    9fda:	89 2f       	mov	r24, r25
    9fdc:	99 27       	eor	r25, r25
    9fde:	86 95       	lsr	r24
    9fe0:	f8 01       	movw	r30, r16
    9fe2:	45 a1       	ldd	r20, Z+37	; 0x25
    9fe4:	56 a1       	ldd	r21, Z+38	; 0x26
    9fe6:	67 a1       	ldd	r22, Z+39	; 0x27
    9fe8:	70 a5       	ldd	r23, Z+40	; 0x28
    9fea:	48 0f       	add	r20, r24
    9fec:	59 1f       	adc	r21, r25
    9fee:	61 1d       	adc	r22, r1
    9ff0:	71 1d       	adc	r23, r1
    9ff2:	c8 01       	movw	r24, r16
    9ff4:	de db       	rcall	.-2116   	; 0x97b2 <move_window>
    9ff6:	89 2b       	or	r24, r25
    9ff8:	19 f7       	brne	.-58     	; 0x9fc0 <get_fat.isra.9+0x72>
    9ffa:	f1 e0       	ldi	r31, 0x01	; 1
    9ffc:	bf 22       	and	r11, r31
    9ffe:	f8 01       	movw	r30, r16
    a000:	ea 0d       	add	r30, r10
    a002:	fb 1d       	adc	r31, r11
    a004:	85 a9       	ldd	r24, Z+53	; 0x35
    a006:	6c 2f       	mov	r22, r28
    a008:	70 e0       	ldi	r23, 0x00	; 0
    a00a:	78 2b       	or	r23, r24
    a00c:	c0 fe       	sbrs	r12, 0
    a00e:	06 c0       	rjmp	.+12     	; 0xa01c <get_fat.isra.9+0xce>
    a010:	54 e0       	ldi	r21, 0x04	; 4
    a012:	76 95       	lsr	r23
    a014:	67 95       	ror	r22
    a016:	5a 95       	dec	r21
    a018:	e1 f7       	brne	.-8      	; 0xa012 <get_fat.isra.9+0xc4>
    a01a:	1e c0       	rjmp	.+60     	; 0xa058 <get_fat.isra.9+0x10a>
    a01c:	7f 70       	andi	r23, 0x0F	; 15
    a01e:	1c c0       	rjmp	.+56     	; 0xa058 <get_fat.isra.9+0x10a>
    a020:	77 27       	eor	r23, r23
    a022:	6f 2d       	mov	r22, r15
    a024:	5e 2d       	mov	r21, r14
    a026:	4d 2d       	mov	r20, r13
    a028:	85 a1       	ldd	r24, Z+37	; 0x25
    a02a:	96 a1       	ldd	r25, Z+38	; 0x26
    a02c:	a7 a1       	ldd	r26, Z+39	; 0x27
    a02e:	b0 a5       	ldd	r27, Z+40	; 0x28
    a030:	48 0f       	add	r20, r24
    a032:	59 1f       	adc	r21, r25
    a034:	6a 1f       	adc	r22, r26
    a036:	7b 1f       	adc	r23, r27
    a038:	cf 01       	movw	r24, r30
    a03a:	bb db       	rcall	.-2186   	; 0x97b2 <move_window>
    a03c:	89 2b       	or	r24, r25
    a03e:	09 f0       	breq	.+2      	; 0xa042 <get_fat.isra.9+0xf4>
    a040:	bf cf       	rjmp	.-130    	; 0x9fc0 <get_fat.isra.9+0x72>
    a042:	cc 0c       	add	r12, r12
    a044:	dd 1c       	adc	r13, r13
    a046:	e8 94       	clt
    a048:	c0 f8       	bld	r12, 0
    a04a:	f1 e0       	ldi	r31, 0x01	; 1
    a04c:	df 22       	and	r13, r31
    a04e:	f8 01       	movw	r30, r16
    a050:	ec 0d       	add	r30, r12
    a052:	fd 1d       	adc	r31, r13
    a054:	65 a9       	ldd	r22, Z+53	; 0x35
    a056:	76 a9       	ldd	r23, Z+54	; 0x36
    a058:	80 e0       	ldi	r24, 0x00	; 0
    a05a:	90 e0       	ldi	r25, 0x00	; 0
    a05c:	27 c0       	rjmp	.+78     	; 0xa0ac <get_fat.isra.9+0x15e>
    a05e:	85 a1       	ldd	r24, Z+37	; 0x25
    a060:	96 a1       	ldd	r25, Z+38	; 0x26
    a062:	a7 a1       	ldd	r26, Z+39	; 0x27
    a064:	b0 a5       	ldd	r27, Z+40	; 0x28
    a066:	27 e0       	ldi	r18, 0x07	; 7
    a068:	76 95       	lsr	r23
    a06a:	67 95       	ror	r22
    a06c:	57 95       	ror	r21
    a06e:	47 95       	ror	r20
    a070:	2a 95       	dec	r18
    a072:	d1 f7       	brne	.-12     	; 0xa068 <get_fat.isra.9+0x11a>
    a074:	48 0f       	add	r20, r24
    a076:	59 1f       	adc	r21, r25
    a078:	6a 1f       	adc	r22, r26
    a07a:	7b 1f       	adc	r23, r27
    a07c:	cf 01       	movw	r24, r30
    a07e:	99 db       	rcall	.-2254   	; 0x97b2 <move_window>
    a080:	89 2b       	or	r24, r25
    a082:	09 f0       	breq	.+2      	; 0xa086 <get_fat.isra.9+0x138>
    a084:	9d cf       	rjmp	.-198    	; 0x9fc0 <get_fat.isra.9+0x72>
    a086:	0b 5c       	subi	r16, 0xCB	; 203
    a088:	1f 4f       	sbci	r17, 0xFF	; 255
    a08a:	cc 0c       	add	r12, r12
    a08c:	dd 1c       	adc	r13, r13
    a08e:	cc 0c       	add	r12, r12
    a090:	dd 1c       	adc	r13, r13
    a092:	c6 01       	movw	r24, r12
    a094:	8c 7f       	andi	r24, 0xFC	; 252
    a096:	91 70       	andi	r25, 0x01	; 1
    a098:	80 0f       	add	r24, r16
    a09a:	91 1f       	adc	r25, r17
    a09c:	0e 94 17 48 	call	0x902e	; 0x902e <ld_dword>
    a0a0:	9f 70       	andi	r25, 0x0F	; 15
    a0a2:	04 c0       	rjmp	.+8      	; 0xa0ac <get_fat.isra.9+0x15e>
    a0a4:	61 e0       	ldi	r22, 0x01	; 1
    a0a6:	70 e0       	ldi	r23, 0x00	; 0
    a0a8:	80 e0       	ldi	r24, 0x00	; 0
    a0aa:	90 e0       	ldi	r25, 0x00	; 0
    a0ac:	cd b7       	in	r28, 0x3d	; 61
    a0ae:	de b7       	in	r29, 0x3e	; 62
    a0b0:	ea e0       	ldi	r30, 0x0A	; 10
    a0b2:	0c 94 b7 e7 	jmp	0x1cf6e	; 0x1cf6e <__epilogue_restores__+0x10>

0000a0b6 <dir_sdi>:
    a0b6:	a0 e0       	ldi	r26, 0x00	; 0
    a0b8:	b0 e0       	ldi	r27, 0x00	; 0
    a0ba:	e1 e6       	ldi	r30, 0x61	; 97
    a0bc:	f0 e5       	ldi	r31, 0x50	; 80
    a0be:	0c 94 95 e7 	jmp	0x1cf2a	; 0x1cf2a <__prologue_saves__+0x4>
    a0c2:	ec 01       	movw	r28, r24
    a0c4:	6a 01       	movw	r12, r20
    a0c6:	7b 01       	movw	r14, r22
    a0c8:	41 15       	cp	r20, r1
    a0ca:	51 05       	cpc	r21, r1
    a0cc:	80 e2       	ldi	r24, 0x20	; 32
    a0ce:	68 07       	cpc	r22, r24
    a0d0:	71 05       	cpc	r23, r1
    a0d2:	18 f0       	brcs	.+6      	; 0xa0da <dir_sdi+0x24>
    a0d4:	82 e0       	ldi	r24, 0x02	; 2
    a0d6:	90 e0       	ldi	r25, 0x00	; 0
    a0d8:	aa c0       	rjmp	.+340    	; 0xa22e <dir_sdi+0x178>
    a0da:	db 01       	movw	r26, r22
    a0dc:	ca 01       	movw	r24, r20
    a0de:	8f 71       	andi	r24, 0x1F	; 31
    a0e0:	99 27       	eor	r25, r25
    a0e2:	aa 27       	eor	r26, r26
    a0e4:	bb 27       	eor	r27, r27
    a0e6:	89 2b       	or	r24, r25
    a0e8:	8a 2b       	or	r24, r26
    a0ea:	8b 2b       	or	r24, r27
    a0ec:	99 f7       	brne	.-26     	; 0xa0d4 <dir_sdi+0x1e>
    a0ee:	08 81       	ld	r16, Y
    a0f0:	19 81       	ldd	r17, Y+1	; 0x01
    a0f2:	4e 87       	std	Y+14, r20	; 0x0e
    a0f4:	5f 87       	std	Y+15, r21	; 0x0f
    a0f6:	68 8b       	std	Y+16, r22	; 0x10
    a0f8:	79 8b       	std	Y+17, r23	; 0x11
    a0fa:	8e 80       	ldd	r8, Y+6	; 0x06
    a0fc:	9f 80       	ldd	r9, Y+7	; 0x07
    a0fe:	a8 84       	ldd	r10, Y+8	; 0x08
    a100:	b9 84       	ldd	r11, Y+9	; 0x09
    a102:	81 14       	cp	r8, r1
    a104:	91 04       	cpc	r9, r1
    a106:	a1 04       	cpc	r10, r1
    a108:	b1 04       	cpc	r11, r1
    a10a:	51 f5       	brne	.+84     	; 0xa160 <dir_sdi+0xaa>
    a10c:	f8 01       	movw	r30, r16
    a10e:	80 81       	ld	r24, Z
    a110:	83 30       	cpi	r24, 0x03	; 3
    a112:	40 f0       	brcs	.+16     	; 0xa124 <dir_sdi+0x6e>
    a114:	81 a5       	ldd	r24, Z+41	; 0x29
    a116:	92 a5       	ldd	r25, Z+42	; 0x2a
    a118:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a11a:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a11c:	00 97       	sbiw	r24, 0x00	; 0
    a11e:	a1 05       	cpc	r26, r1
    a120:	b1 05       	cpc	r27, r1
    a122:	e1 f4       	brne	.+56     	; 0xa15c <dir_sdi+0xa6>
    a124:	f8 01       	movw	r30, r16
    a126:	87 81       	ldd	r24, Z+7	; 0x07
    a128:	90 85       	ldd	r25, Z+8	; 0x08
    a12a:	a0 e0       	ldi	r26, 0x00	; 0
    a12c:	b0 e0       	ldi	r27, 0x00	; 0
    a12e:	b7 01       	movw	r22, r14
    a130:	a6 01       	movw	r20, r12
    a132:	25 e0       	ldi	r18, 0x05	; 5
    a134:	76 95       	lsr	r23
    a136:	67 95       	ror	r22
    a138:	57 95       	ror	r21
    a13a:	47 95       	ror	r20
    a13c:	2a 95       	dec	r18
    a13e:	d1 f7       	brne	.-12     	; 0xa134 <dir_sdi+0x7e>
    a140:	48 17       	cp	r20, r24
    a142:	59 07       	cpc	r21, r25
    a144:	6a 07       	cpc	r22, r26
    a146:	7b 07       	cpc	r23, r27
    a148:	28 f6       	brcc	.-118    	; 0xa0d4 <dir_sdi+0x1e>
    a14a:	81 a5       	ldd	r24, Z+41	; 0x29
    a14c:	92 a5       	ldd	r25, Z+42	; 0x2a
    a14e:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a150:	b4 a5       	ldd	r27, Z+44	; 0x2c
    a152:	8e 8b       	std	Y+22, r24	; 0x16
    a154:	9f 8b       	std	Y+23, r25	; 0x17
    a156:	a8 8f       	std	Y+24, r26	; 0x18
    a158:	b9 8f       	std	Y+25, r27	; 0x19
    a15a:	3e c0       	rjmp	.+124    	; 0xa1d8 <dir_sdi+0x122>
    a15c:	4c 01       	movw	r8, r24
    a15e:	5d 01       	movw	r10, r26
    a160:	f8 01       	movw	r30, r16
    a162:	41 84       	ldd	r4, Z+9	; 0x09
    a164:	52 84       	ldd	r5, Z+10	; 0x0a
    a166:	61 2c       	mov	r6, r1
    a168:	71 2c       	mov	r7, r1
    a16a:	39 e0       	ldi	r19, 0x09	; 9
    a16c:	44 0c       	add	r4, r4
    a16e:	55 1c       	adc	r5, r5
    a170:	66 1c       	adc	r6, r6
    a172:	77 1c       	adc	r7, r7
    a174:	3a 95       	dec	r19
    a176:	d1 f7       	brne	.-12     	; 0xa16c <dir_sdi+0xb6>
    a178:	b5 01       	movw	r22, r10
    a17a:	a4 01       	movw	r20, r8
    a17c:	c4 14       	cp	r12, r4
    a17e:	d5 04       	cpc	r13, r5
    a180:	e6 04       	cpc	r14, r6
    a182:	f7 04       	cpc	r15, r7
    a184:	10 f1       	brcs	.+68     	; 0xa1ca <dir_sdi+0x114>
    a186:	88 81       	ld	r24, Y
    a188:	99 81       	ldd	r25, Y+1	; 0x01
    a18a:	e1 de       	rcall	.-574    	; 0x9f4e <get_fat.isra.9>
    a18c:	4b 01       	movw	r8, r22
    a18e:	5c 01       	movw	r10, r24
    a190:	6f 3f       	cpi	r22, 0xFF	; 255
    a192:	7f 4f       	sbci	r23, 0xFF	; 255
    a194:	8f 4f       	sbci	r24, 0xFF	; 255
    a196:	9f 4f       	sbci	r25, 0xFF	; 255
    a198:	09 f4       	brne	.+2      	; 0xa19c <dir_sdi+0xe6>
    a19a:	47 c0       	rjmp	.+142    	; 0xa22a <dir_sdi+0x174>
    a19c:	82 e0       	ldi	r24, 0x02	; 2
    a19e:	88 16       	cp	r8, r24
    a1a0:	91 04       	cpc	r9, r1
    a1a2:	a1 04       	cpc	r10, r1
    a1a4:	b1 04       	cpc	r11, r1
    a1a6:	08 f4       	brcc	.+2      	; 0xa1aa <dir_sdi+0xf4>
    a1a8:	95 cf       	rjmp	.-214    	; 0xa0d4 <dir_sdi+0x1e>
    a1aa:	f8 01       	movw	r30, r16
    a1ac:	81 8d       	ldd	r24, Z+25	; 0x19
    a1ae:	92 8d       	ldd	r25, Z+26	; 0x1a
    a1b0:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a1b2:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a1b4:	88 16       	cp	r8, r24
    a1b6:	99 06       	cpc	r9, r25
    a1b8:	aa 06       	cpc	r10, r26
    a1ba:	bb 06       	cpc	r11, r27
    a1bc:	08 f0       	brcs	.+2      	; 0xa1c0 <dir_sdi+0x10a>
    a1be:	8a cf       	rjmp	.-236    	; 0xa0d4 <dir_sdi+0x1e>
    a1c0:	c4 18       	sub	r12, r4
    a1c2:	d5 08       	sbc	r13, r5
    a1c4:	e6 08       	sbc	r14, r6
    a1c6:	f7 08       	sbc	r15, r7
    a1c8:	d7 cf       	rjmp	.-82     	; 0xa178 <dir_sdi+0xc2>
    a1ca:	c8 01       	movw	r24, r16
    a1cc:	0e 94 4a 48 	call	0x9094	; 0x9094 <clst2sect>
    a1d0:	6e 8b       	std	Y+22, r22	; 0x16
    a1d2:	7f 8b       	std	Y+23, r23	; 0x17
    a1d4:	88 8f       	std	Y+24, r24	; 0x18
    a1d6:	99 8f       	std	Y+25, r25	; 0x19
    a1d8:	8a 8a       	std	Y+18, r8	; 0x12
    a1da:	9b 8a       	std	Y+19, r9	; 0x13
    a1dc:	ac 8a       	std	Y+20, r10	; 0x14
    a1de:	bd 8a       	std	Y+21, r11	; 0x15
    a1e0:	8e 89       	ldd	r24, Y+22	; 0x16
    a1e2:	9f 89       	ldd	r25, Y+23	; 0x17
    a1e4:	a8 8d       	ldd	r26, Y+24	; 0x18
    a1e6:	b9 8d       	ldd	r27, Y+25	; 0x19
    a1e8:	00 97       	sbiw	r24, 0x00	; 0
    a1ea:	a1 05       	cpc	r26, r1
    a1ec:	b1 05       	cpc	r27, r1
    a1ee:	09 f4       	brne	.+2      	; 0xa1f2 <dir_sdi+0x13c>
    a1f0:	71 cf       	rjmp	.-286    	; 0xa0d4 <dir_sdi+0x1e>
    a1f2:	b7 01       	movw	r22, r14
    a1f4:	a6 01       	movw	r20, r12
    a1f6:	29 e0       	ldi	r18, 0x09	; 9
    a1f8:	76 95       	lsr	r23
    a1fa:	67 95       	ror	r22
    a1fc:	57 95       	ror	r21
    a1fe:	47 95       	ror	r20
    a200:	2a 95       	dec	r18
    a202:	d1 f7       	brne	.-12     	; 0xa1f8 <dir_sdi+0x142>
    a204:	84 0f       	add	r24, r20
    a206:	95 1f       	adc	r25, r21
    a208:	a6 1f       	adc	r26, r22
    a20a:	b7 1f       	adc	r27, r23
    a20c:	8e 8b       	std	Y+22, r24	; 0x16
    a20e:	9f 8b       	std	Y+23, r25	; 0x17
    a210:	a8 8f       	std	Y+24, r26	; 0x18
    a212:	b9 8f       	std	Y+25, r27	; 0x19
    a214:	0b 5c       	subi	r16, 0xCB	; 203
    a216:	1f 4f       	sbci	r17, 0xFF	; 255
    a218:	f1 e0       	ldi	r31, 0x01	; 1
    a21a:	df 22       	and	r13, r31
    a21c:	c0 0e       	add	r12, r16
    a21e:	d1 1e       	adc	r13, r17
    a220:	db 8e       	std	Y+27, r13	; 0x1b
    a222:	ca 8e       	std	Y+26, r12	; 0x1a
    a224:	80 e0       	ldi	r24, 0x00	; 0
    a226:	90 e0       	ldi	r25, 0x00	; 0
    a228:	02 c0       	rjmp	.+4      	; 0xa22e <dir_sdi+0x178>
    a22a:	81 e0       	ldi	r24, 0x01	; 1
    a22c:	90 e0       	ldi	r25, 0x00	; 0
    a22e:	cd b7       	in	r28, 0x3d	; 61
    a230:	de b7       	in	r29, 0x3e	; 62
    a232:	e0 e1       	ldi	r30, 0x10	; 16
    a234:	0c 94 b1 e7 	jmp	0x1cf62	; 0x1cf62 <__epilogue_restores__+0x4>

0000a238 <create_chain>:
    a238:	a0 e0       	ldi	r26, 0x00	; 0
    a23a:	b0 e0       	ldi	r27, 0x00	; 0
    a23c:	e2 e2       	ldi	r30, 0x22	; 34
    a23e:	f1 e5       	ldi	r31, 0x51	; 81
    a240:	0c 94 95 e7 	jmp	0x1cf2a	; 0x1cf2a <__prologue_saves__+0x4>
    a244:	8c 01       	movw	r16, r24
    a246:	2a 01       	movw	r4, r20
    a248:	3b 01       	movw	r6, r22
    a24a:	fc 01       	movw	r30, r24
    a24c:	c0 81       	ld	r28, Z
    a24e:	d1 81       	ldd	r29, Z+1	; 0x01
    a250:	41 15       	cp	r20, r1
    a252:	51 05       	cpc	r21, r1
    a254:	61 05       	cpc	r22, r1
    a256:	71 05       	cpc	r23, r1
    a258:	99 f4       	brne	.+38     	; 0xa280 <create_chain+0x48>
    a25a:	8d 84       	ldd	r8, Y+13	; 0x0d
    a25c:	9e 84       	ldd	r9, Y+14	; 0x0e
    a25e:	af 84       	ldd	r10, Y+15	; 0x0f
    a260:	b8 88       	ldd	r11, Y+16	; 0x10
    a262:	81 14       	cp	r8, r1
    a264:	91 04       	cpc	r9, r1
    a266:	a1 04       	cpc	r10, r1
    a268:	b1 04       	cpc	r11, r1
    a26a:	51 f1       	breq	.+84     	; 0xa2c0 <create_chain+0x88>
    a26c:	89 8d       	ldd	r24, Y+25	; 0x19
    a26e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a270:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a272:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a274:	88 16       	cp	r8, r24
    a276:	99 06       	cpc	r9, r25
    a278:	aa 06       	cpc	r10, r26
    a27a:	bb 06       	cpc	r11, r27
    a27c:	28 f1       	brcs	.+74     	; 0xa2c8 <create_chain+0x90>
    a27e:	20 c0       	rjmp	.+64     	; 0xa2c0 <create_chain+0x88>
    a280:	ce 01       	movw	r24, r28
    a282:	65 de       	rcall	.-822    	; 0x9f4e <get_fat.isra.9>
    a284:	62 30       	cpi	r22, 0x02	; 2
    a286:	71 05       	cpc	r23, r1
    a288:	81 05       	cpc	r24, r1
    a28a:	91 05       	cpc	r25, r1
    a28c:	08 f4       	brcc	.+2      	; 0xa290 <create_chain+0x58>
    a28e:	ea c0       	rjmp	.+468    	; 0xa464 <create_chain+0x22c>
    a290:	6f 3f       	cpi	r22, 0xFF	; 255
    a292:	ff ef       	ldi	r31, 0xFF	; 255
    a294:	7f 07       	cpc	r23, r31
    a296:	8f 07       	cpc	r24, r31
    a298:	9f 07       	cpc	r25, r31
    a29a:	29 f4       	brne	.+10     	; 0xa2a6 <create_chain+0x6e>
    a29c:	4f ef       	ldi	r20, 0xFF	; 255
    a29e:	3f ef       	ldi	r19, 0xFF	; 255
    a2a0:	2f ef       	ldi	r18, 0xFF	; 255
    a2a2:	9f ef       	ldi	r25, 0xFF	; 255
    a2a4:	e7 c0       	rjmp	.+462    	; 0xa474 <create_chain+0x23c>
    a2a6:	c9 8c       	ldd	r12, Y+25	; 0x19
    a2a8:	da 8c       	ldd	r13, Y+26	; 0x1a
    a2aa:	eb 8c       	ldd	r14, Y+27	; 0x1b
    a2ac:	fc 8c       	ldd	r15, Y+28	; 0x1c
    a2ae:	6c 15       	cp	r22, r12
    a2b0:	7d 05       	cpc	r23, r13
    a2b2:	8e 05       	cpc	r24, r14
    a2b4:	9f 05       	cpc	r25, r15
    a2b6:	08 f4       	brcc	.+2      	; 0xa2ba <create_chain+0x82>
    a2b8:	da c0       	rjmp	.+436    	; 0xa46e <create_chain+0x236>
    a2ba:	53 01       	movw	r10, r6
    a2bc:	42 01       	movw	r8, r4
    a2be:	04 c0       	rjmp	.+8      	; 0xa2c8 <create_chain+0x90>
    a2c0:	81 2c       	mov	r8, r1
    a2c2:	91 2c       	mov	r9, r1
    a2c4:	54 01       	movw	r10, r8
    a2c6:	83 94       	inc	r8
    a2c8:	89 89       	ldd	r24, Y+17	; 0x11
    a2ca:	9a 89       	ldd	r25, Y+18	; 0x12
    a2cc:	ab 89       	ldd	r26, Y+19	; 0x13
    a2ce:	bc 89       	ldd	r27, Y+20	; 0x14
    a2d0:	89 2b       	or	r24, r25
    a2d2:	8a 2b       	or	r24, r26
    a2d4:	8b 2b       	or	r24, r27
    a2d6:	11 f4       	brne	.+4      	; 0xa2dc <create_chain+0xa4>
    a2d8:	40 e0       	ldi	r20, 0x00	; 0
    a2da:	c5 c0       	rjmp	.+394    	; 0xa466 <create_chain+0x22e>
    a2dc:	84 14       	cp	r8, r4
    a2de:	95 04       	cpc	r9, r5
    a2e0:	a6 04       	cpc	r10, r6
    a2e2:	b7 04       	cpc	r11, r7
    a2e4:	09 f0       	breq	.+2      	; 0xa2e8 <create_chain+0xb0>
    a2e6:	46 c0       	rjmp	.+140    	; 0xa374 <create_chain+0x13c>
    a2e8:	75 01       	movw	r14, r10
    a2ea:	64 01       	movw	r12, r8
    a2ec:	2f ef       	ldi	r18, 0xFF	; 255
    a2ee:	c2 1a       	sub	r12, r18
    a2f0:	d2 0a       	sbc	r13, r18
    a2f2:	e2 0a       	sbc	r14, r18
    a2f4:	f2 0a       	sbc	r15, r18
    a2f6:	89 8d       	ldd	r24, Y+25	; 0x19
    a2f8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a2fa:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a2fc:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a2fe:	c8 16       	cp	r12, r24
    a300:	d9 06       	cpc	r13, r25
    a302:	ea 06       	cpc	r14, r26
    a304:	fb 06       	cpc	r15, r27
    a306:	28 f0       	brcs	.+10     	; 0xa312 <create_chain+0xda>
    a308:	92 e0       	ldi	r25, 0x02	; 2
    a30a:	c9 2e       	mov	r12, r25
    a30c:	d1 2c       	mov	r13, r1
    a30e:	e1 2c       	mov	r14, r1
    a310:	f1 2c       	mov	r15, r1
    a312:	b7 01       	movw	r22, r14
    a314:	a6 01       	movw	r20, r12
    a316:	f8 01       	movw	r30, r16
    a318:	80 81       	ld	r24, Z
    a31a:	91 81       	ldd	r25, Z+1	; 0x01
    a31c:	18 de       	rcall	.-976    	; 0x9f4e <get_fat.isra.9>
    a31e:	61 30       	cpi	r22, 0x01	; 1
    a320:	71 05       	cpc	r23, r1
    a322:	81 05       	cpc	r24, r1
    a324:	91 05       	cpc	r25, r1
    a326:	09 f4       	brne	.+2      	; 0xa32a <create_chain+0xf2>
    a328:	9d c0       	rjmp	.+314    	; 0xa464 <create_chain+0x22c>
    a32a:	6f 3f       	cpi	r22, 0xFF	; 255
    a32c:	ff ef       	ldi	r31, 0xFF	; 255
    a32e:	7f 07       	cpc	r23, r31
    a330:	8f 07       	cpc	r24, r31
    a332:	9f 07       	cpc	r25, r31
    a334:	09 f4       	brne	.+2      	; 0xa338 <create_chain+0x100>
    a336:	b2 cf       	rjmp	.-156    	; 0xa29c <create_chain+0x64>
    a338:	67 2b       	or	r22, r23
    a33a:	68 2b       	or	r22, r24
    a33c:	69 2b       	or	r22, r25
    a33e:	a9 f0       	breq	.+42     	; 0xa36a <create_chain+0x132>
    a340:	8d 85       	ldd	r24, Y+13	; 0x0d
    a342:	9e 85       	ldd	r25, Y+14	; 0x0e
    a344:	af 85       	ldd	r26, Y+15	; 0x0f
    a346:	b8 89       	ldd	r27, Y+16	; 0x10
    a348:	82 30       	cpi	r24, 0x02	; 2
    a34a:	91 05       	cpc	r25, r1
    a34c:	a1 05       	cpc	r26, r1
    a34e:	b1 05       	cpc	r27, r1
    a350:	88 f0       	brcs	.+34     	; 0xa374 <create_chain+0x13c>
    a352:	49 8d       	ldd	r20, Y+25	; 0x19
    a354:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a356:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a358:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a35a:	84 17       	cp	r24, r20
    a35c:	95 07       	cpc	r25, r21
    a35e:	a6 07       	cpc	r26, r22
    a360:	b7 07       	cpc	r27, r23
    a362:	40 f4       	brcc	.+16     	; 0xa374 <create_chain+0x13c>
    a364:	4c 01       	movw	r8, r24
    a366:	5d 01       	movw	r10, r26
    a368:	05 c0       	rjmp	.+10     	; 0xa374 <create_chain+0x13c>
    a36a:	c1 14       	cp	r12, r1
    a36c:	d1 04       	cpc	r13, r1
    a36e:	e1 04       	cpc	r14, r1
    a370:	f1 04       	cpc	r15, r1
    a372:	c9 f5       	brne	.+114    	; 0xa3e6 <create_chain+0x1ae>
    a374:	75 01       	movw	r14, r10
    a376:	64 01       	movw	r12, r8
    a378:	2f ef       	ldi	r18, 0xFF	; 255
    a37a:	c2 1a       	sub	r12, r18
    a37c:	d2 0a       	sbc	r13, r18
    a37e:	e2 0a       	sbc	r14, r18
    a380:	f2 0a       	sbc	r15, r18
    a382:	89 8d       	ldd	r24, Y+25	; 0x19
    a384:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a386:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a388:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a38a:	c8 16       	cp	r12, r24
    a38c:	d9 06       	cpc	r13, r25
    a38e:	ea 06       	cpc	r14, r26
    a390:	fb 06       	cpc	r15, r27
    a392:	60 f0       	brcs	.+24     	; 0xa3ac <create_chain+0x174>
    a394:	82 e0       	ldi	r24, 0x02	; 2
    a396:	88 16       	cp	r8, r24
    a398:	91 04       	cpc	r9, r1
    a39a:	a1 04       	cpc	r10, r1
    a39c:	b1 04       	cpc	r11, r1
    a39e:	08 f4       	brcc	.+2      	; 0xa3a2 <create_chain+0x16a>
    a3a0:	9b cf       	rjmp	.-202    	; 0xa2d8 <create_chain+0xa0>
    a3a2:	82 e0       	ldi	r24, 0x02	; 2
    a3a4:	c8 2e       	mov	r12, r24
    a3a6:	d1 2c       	mov	r13, r1
    a3a8:	e1 2c       	mov	r14, r1
    a3aa:	f1 2c       	mov	r15, r1
    a3ac:	b7 01       	movw	r22, r14
    a3ae:	a6 01       	movw	r20, r12
    a3b0:	f8 01       	movw	r30, r16
    a3b2:	80 81       	ld	r24, Z
    a3b4:	91 81       	ldd	r25, Z+1	; 0x01
    a3b6:	cb dd       	rcall	.-1130   	; 0x9f4e <get_fat.isra.9>
    a3b8:	61 15       	cp	r22, r1
    a3ba:	71 05       	cpc	r23, r1
    a3bc:	81 05       	cpc	r24, r1
    a3be:	91 05       	cpc	r25, r1
    a3c0:	91 f0       	breq	.+36     	; 0xa3e6 <create_chain+0x1ae>
    a3c2:	61 30       	cpi	r22, 0x01	; 1
    a3c4:	71 05       	cpc	r23, r1
    a3c6:	81 05       	cpc	r24, r1
    a3c8:	91 05       	cpc	r25, r1
    a3ca:	09 f4       	brne	.+2      	; 0xa3ce <create_chain+0x196>
    a3cc:	4b c0       	rjmp	.+150    	; 0xa464 <create_chain+0x22c>
    a3ce:	6f 3f       	cpi	r22, 0xFF	; 255
    a3d0:	7f 4f       	sbci	r23, 0xFF	; 255
    a3d2:	8f 4f       	sbci	r24, 0xFF	; 255
    a3d4:	9f 4f       	sbci	r25, 0xFF	; 255
    a3d6:	09 f4       	brne	.+2      	; 0xa3da <create_chain+0x1a2>
    a3d8:	61 cf       	rjmp	.-318    	; 0xa29c <create_chain+0x64>
    a3da:	c8 14       	cp	r12, r8
    a3dc:	d9 04       	cpc	r13, r9
    a3de:	ea 04       	cpc	r14, r10
    a3e0:	fb 04       	cpc	r15, r11
    a3e2:	51 f6       	brne	.-108    	; 0xa378 <create_chain+0x140>
    a3e4:	79 cf       	rjmp	.-270    	; 0xa2d8 <create_chain+0xa0>
    a3e6:	0f ef       	ldi	r16, 0xFF	; 255
    a3e8:	1f ef       	ldi	r17, 0xFF	; 255
    a3ea:	98 01       	movw	r18, r16
    a3ec:	b7 01       	movw	r22, r14
    a3ee:	a6 01       	movw	r20, r12
    a3f0:	ce 01       	movw	r24, r28
    a3f2:	b4 dc       	rcall	.-1688   	; 0x9d5c <put_fat>
    a3f4:	00 97       	sbiw	r24, 0x00	; 0
    a3f6:	99 f5       	brne	.+102    	; 0xa45e <create_chain+0x226>
    a3f8:	41 14       	cp	r4, r1
    a3fa:	51 04       	cpc	r5, r1
    a3fc:	61 04       	cpc	r6, r1
    a3fe:	71 04       	cpc	r7, r1
    a400:	e9 f4       	brne	.+58     	; 0xa43c <create_chain+0x204>
    a402:	cd 86       	std	Y+13, r12	; 0x0d
    a404:	de 86       	std	Y+14, r13	; 0x0e
    a406:	ef 86       	std	Y+15, r14	; 0x0f
    a408:	f8 8a       	std	Y+16, r15	; 0x10
    a40a:	89 89       	ldd	r24, Y+17	; 0x11
    a40c:	9a 89       	ldd	r25, Y+18	; 0x12
    a40e:	ab 89       	ldd	r26, Y+19	; 0x13
    a410:	bc 89       	ldd	r27, Y+20	; 0x14
    a412:	49 8d       	ldd	r20, Y+25	; 0x19
    a414:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a416:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a418:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a41a:	42 50       	subi	r20, 0x02	; 2
    a41c:	51 09       	sbc	r21, r1
    a41e:	61 09       	sbc	r22, r1
    a420:	71 09       	sbc	r23, r1
    a422:	48 17       	cp	r20, r24
    a424:	59 07       	cpc	r21, r25
    a426:	6a 07       	cpc	r22, r26
    a428:	7b 07       	cpc	r23, r27
    a42a:	88 f0       	brcs	.+34     	; 0xa44e <create_chain+0x216>
    a42c:	01 97       	sbiw	r24, 0x01	; 1
    a42e:	a1 09       	sbc	r26, r1
    a430:	b1 09       	sbc	r27, r1
    a432:	89 8b       	std	Y+17, r24	; 0x11
    a434:	9a 8b       	std	Y+18, r25	; 0x12
    a436:	ab 8b       	std	Y+19, r26	; 0x13
    a438:	bc 8b       	std	Y+20, r27	; 0x14
    a43a:	09 c0       	rjmp	.+18     	; 0xa44e <create_chain+0x216>
    a43c:	97 01       	movw	r18, r14
    a43e:	86 01       	movw	r16, r12
    a440:	b3 01       	movw	r22, r6
    a442:	a2 01       	movw	r20, r4
    a444:	ce 01       	movw	r24, r28
    a446:	8a dc       	rcall	.-1772   	; 0x9d5c <put_fat>
    a448:	00 97       	sbiw	r24, 0x00	; 0
    a44a:	d9 f2       	breq	.-74     	; 0xa402 <create_chain+0x1ca>
    a44c:	08 c0       	rjmp	.+16     	; 0xa45e <create_chain+0x226>
    a44e:	8c 81       	ldd	r24, Y+4	; 0x04
    a450:	81 60       	ori	r24, 0x01	; 1
    a452:	8c 83       	std	Y+4, r24	; 0x04
    a454:	4c 2d       	mov	r20, r12
    a456:	3d 2d       	mov	r19, r13
    a458:	2e 2d       	mov	r18, r14
    a45a:	9f 2d       	mov	r25, r15
    a45c:	0b c0       	rjmp	.+22     	; 0xa474 <create_chain+0x23c>
    a45e:	01 97       	sbiw	r24, 0x01	; 1
    a460:	09 f4       	brne	.+2      	; 0xa464 <create_chain+0x22c>
    a462:	1c cf       	rjmp	.-456    	; 0xa29c <create_chain+0x64>
    a464:	41 e0       	ldi	r20, 0x01	; 1
    a466:	30 e0       	ldi	r19, 0x00	; 0
    a468:	20 e0       	ldi	r18, 0x00	; 0
    a46a:	90 e0       	ldi	r25, 0x00	; 0
    a46c:	03 c0       	rjmp	.+6      	; 0xa474 <create_chain+0x23c>
    a46e:	46 2f       	mov	r20, r22
    a470:	37 2f       	mov	r19, r23
    a472:	28 2f       	mov	r18, r24
    a474:	64 2f       	mov	r22, r20
    a476:	73 2f       	mov	r23, r19
    a478:	82 2f       	mov	r24, r18
    a47a:	cd b7       	in	r28, 0x3d	; 61
    a47c:	de b7       	in	r29, 0x3e	; 62
    a47e:	e0 e1       	ldi	r30, 0x10	; 16
    a480:	0c 94 b1 e7 	jmp	0x1cf62	; 0x1cf62 <__epilogue_restores__+0x4>

0000a484 <remove_chain>:
    a484:	4f 92       	push	r4
    a486:	5f 92       	push	r5
    a488:	6f 92       	push	r6
    a48a:	7f 92       	push	r7
    a48c:	af 92       	push	r10
    a48e:	bf 92       	push	r11
    a490:	cf 92       	push	r12
    a492:	df 92       	push	r13
    a494:	ef 92       	push	r14
    a496:	ff 92       	push	r15
    a498:	0f 93       	push	r16
    a49a:	1f 93       	push	r17
    a49c:	cf 93       	push	r28
    a49e:	df 93       	push	r29
    a4a0:	5c 01       	movw	r10, r24
    a4a2:	6a 01       	movw	r12, r20
    a4a4:	7b 01       	movw	r14, r22
    a4a6:	b9 01       	movw	r22, r18
    a4a8:	a8 01       	movw	r20, r16
    a4aa:	22 e0       	ldi	r18, 0x02	; 2
    a4ac:	c2 16       	cp	r12, r18
    a4ae:	d1 04       	cpc	r13, r1
    a4b0:	e1 04       	cpc	r14, r1
    a4b2:	f1 04       	cpc	r15, r1
    a4b4:	10 f4       	brcc	.+4      	; 0xa4ba <remove_chain+0x36>
    a4b6:	22 e0       	ldi	r18, 0x02	; 2
    a4b8:	27 c0       	rjmp	.+78     	; 0xa508 <remove_chain+0x84>
    a4ba:	fc 01       	movw	r30, r24
    a4bc:	c0 81       	ld	r28, Z
    a4be:	d1 81       	ldd	r29, Z+1	; 0x01
    a4c0:	89 8d       	ldd	r24, Y+25	; 0x19
    a4c2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a4c4:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a4c6:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a4c8:	c8 16       	cp	r12, r24
    a4ca:	d9 06       	cpc	r13, r25
    a4cc:	ea 06       	cpc	r14, r26
    a4ce:	fb 06       	cpc	r15, r27
    a4d0:	90 f7       	brcc	.-28     	; 0xa4b6 <remove_chain+0x32>
    a4d2:	41 15       	cp	r20, r1
    a4d4:	51 05       	cpc	r21, r1
    a4d6:	61 05       	cpc	r22, r1
    a4d8:	71 05       	cpc	r23, r1
    a4da:	41 f0       	breq	.+16     	; 0xa4ec <remove_chain+0x68>
    a4dc:	0f ef       	ldi	r16, 0xFF	; 255
    a4de:	1f ef       	ldi	r17, 0xFF	; 255
    a4e0:	98 01       	movw	r18, r16
    a4e2:	ce 01       	movw	r24, r28
    a4e4:	3b dc       	rcall	.-1930   	; 0x9d5c <put_fat>
    a4e6:	00 97       	sbiw	r24, 0x00	; 0
    a4e8:	09 f0       	breq	.+2      	; 0xa4ec <remove_chain+0x68>
    a4ea:	4c c0       	rjmp	.+152    	; 0xa584 <remove_chain+0x100>
    a4ec:	b7 01       	movw	r22, r14
    a4ee:	a6 01       	movw	r20, r12
    a4f0:	f5 01       	movw	r30, r10
    a4f2:	80 81       	ld	r24, Z
    a4f4:	91 81       	ldd	r25, Z+1	; 0x01
    a4f6:	2b dd       	rcall	.-1450   	; 0x9f4e <get_fat.isra.9>
    a4f8:	2b 01       	movw	r4, r22
    a4fa:	3c 01       	movw	r6, r24
    a4fc:	61 15       	cp	r22, r1
    a4fe:	71 05       	cpc	r23, r1
    a500:	81 05       	cpc	r24, r1
    a502:	91 05       	cpc	r25, r1
    a504:	19 f4       	brne	.+6      	; 0xa50c <remove_chain+0x88>
    a506:	20 e0       	ldi	r18, 0x00	; 0
    a508:	90 e0       	ldi	r25, 0x00	; 0
    a50a:	3d c0       	rjmp	.+122    	; 0xa586 <remove_chain+0x102>
    a50c:	61 30       	cpi	r22, 0x01	; 1
    a50e:	71 05       	cpc	r23, r1
    a510:	81 05       	cpc	r24, r1
    a512:	91 05       	cpc	r25, r1
    a514:	81 f2       	breq	.-96     	; 0xa4b6 <remove_chain+0x32>
    a516:	6f 3f       	cpi	r22, 0xFF	; 255
    a518:	7f 4f       	sbci	r23, 0xFF	; 255
    a51a:	8f 4f       	sbci	r24, 0xFF	; 255
    a51c:	9f 4f       	sbci	r25, 0xFF	; 255
    a51e:	81 f1       	breq	.+96     	; 0xa580 <remove_chain+0xfc>
    a520:	00 e0       	ldi	r16, 0x00	; 0
    a522:	10 e0       	ldi	r17, 0x00	; 0
    a524:	98 01       	movw	r18, r16
    a526:	b7 01       	movw	r22, r14
    a528:	a6 01       	movw	r20, r12
    a52a:	ce 01       	movw	r24, r28
    a52c:	17 dc       	rcall	.-2002   	; 0x9d5c <put_fat>
    a52e:	00 97       	sbiw	r24, 0x00	; 0
    a530:	49 f5       	brne	.+82     	; 0xa584 <remove_chain+0x100>
    a532:	89 89       	ldd	r24, Y+17	; 0x11
    a534:	9a 89       	ldd	r25, Y+18	; 0x12
    a536:	ab 89       	ldd	r26, Y+19	; 0x13
    a538:	bc 89       	ldd	r27, Y+20	; 0x14
    a53a:	49 8d       	ldd	r20, Y+25	; 0x19
    a53c:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a53e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a540:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a542:	6a 01       	movw	r12, r20
    a544:	7b 01       	movw	r14, r22
    a546:	e2 e0       	ldi	r30, 0x02	; 2
    a548:	ce 1a       	sub	r12, r30
    a54a:	d1 08       	sbc	r13, r1
    a54c:	e1 08       	sbc	r14, r1
    a54e:	f1 08       	sbc	r15, r1
    a550:	8c 15       	cp	r24, r12
    a552:	9d 05       	cpc	r25, r13
    a554:	ae 05       	cpc	r26, r14
    a556:	bf 05       	cpc	r27, r15
    a558:	50 f4       	brcc	.+20     	; 0xa56e <remove_chain+0xea>
    a55a:	01 96       	adiw	r24, 0x01	; 1
    a55c:	a1 1d       	adc	r26, r1
    a55e:	b1 1d       	adc	r27, r1
    a560:	89 8b       	std	Y+17, r24	; 0x11
    a562:	9a 8b       	std	Y+18, r25	; 0x12
    a564:	ab 8b       	std	Y+19, r26	; 0x13
    a566:	bc 8b       	std	Y+20, r27	; 0x14
    a568:	8c 81       	ldd	r24, Y+4	; 0x04
    a56a:	81 60       	ori	r24, 0x01	; 1
    a56c:	8c 83       	std	Y+4, r24	; 0x04
    a56e:	73 01       	movw	r14, r6
    a570:	62 01       	movw	r12, r4
    a572:	44 16       	cp	r4, r20
    a574:	55 06       	cpc	r5, r21
    a576:	66 06       	cpc	r6, r22
    a578:	77 06       	cpc	r7, r23
    a57a:	08 f4       	brcc	.+2      	; 0xa57e <remove_chain+0xfa>
    a57c:	b7 cf       	rjmp	.-146    	; 0xa4ec <remove_chain+0x68>
    a57e:	c3 cf       	rjmp	.-122    	; 0xa506 <remove_chain+0x82>
    a580:	21 e0       	ldi	r18, 0x01	; 1
    a582:	c2 cf       	rjmp	.-124    	; 0xa508 <remove_chain+0x84>
    a584:	28 2f       	mov	r18, r24
    a586:	82 2f       	mov	r24, r18
    a588:	df 91       	pop	r29
    a58a:	cf 91       	pop	r28
    a58c:	1f 91       	pop	r17
    a58e:	0f 91       	pop	r16
    a590:	ff 90       	pop	r15
    a592:	ef 90       	pop	r14
    a594:	df 90       	pop	r13
    a596:	cf 90       	pop	r12
    a598:	bf 90       	pop	r11
    a59a:	af 90       	pop	r10
    a59c:	7f 90       	pop	r7
    a59e:	6f 90       	pop	r6
    a5a0:	5f 90       	pop	r5
    a5a2:	4f 90       	pop	r4
    a5a4:	08 95       	ret

0000a5a6 <dir_next>:
    a5a6:	4f 92       	push	r4
    a5a8:	5f 92       	push	r5
    a5aa:	6f 92       	push	r6
    a5ac:	7f 92       	push	r7
    a5ae:	af 92       	push	r10
    a5b0:	bf 92       	push	r11
    a5b2:	cf 92       	push	r12
    a5b4:	df 92       	push	r13
    a5b6:	ef 92       	push	r14
    a5b8:	ff 92       	push	r15
    a5ba:	0f 93       	push	r16
    a5bc:	1f 93       	push	r17
    a5be:	cf 93       	push	r28
    a5c0:	df 93       	push	r29
    a5c2:	ec 01       	movw	r28, r24
    a5c4:	08 81       	ld	r16, Y
    a5c6:	19 81       	ldd	r17, Y+1	; 0x01
    a5c8:	ce 84       	ldd	r12, Y+14	; 0x0e
    a5ca:	df 84       	ldd	r13, Y+15	; 0x0f
    a5cc:	e8 88       	ldd	r14, Y+16	; 0x10
    a5ce:	f9 88       	ldd	r15, Y+17	; 0x11
    a5d0:	80 e2       	ldi	r24, 0x20	; 32
    a5d2:	c8 0e       	add	r12, r24
    a5d4:	d1 1c       	adc	r13, r1
    a5d6:	e1 1c       	adc	r14, r1
    a5d8:	f1 1c       	adc	r15, r1
    a5da:	c1 14       	cp	r12, r1
    a5dc:	d1 04       	cpc	r13, r1
    a5de:	e0 e2       	ldi	r30, 0x20	; 32
    a5e0:	ee 06       	cpc	r14, r30
    a5e2:	f1 04       	cpc	r15, r1
    a5e4:	20 f0       	brcs	.+8      	; 0xa5ee <dir_next+0x48>
    a5e6:	1e 8a       	std	Y+22, r1	; 0x16
    a5e8:	1f 8a       	std	Y+23, r1	; 0x17
    a5ea:	18 8e       	std	Y+24, r1	; 0x18
    a5ec:	19 8e       	std	Y+25, r1	; 0x19
    a5ee:	8e 89       	ldd	r24, Y+22	; 0x16
    a5f0:	9f 89       	ldd	r25, Y+23	; 0x17
    a5f2:	a8 8d       	ldd	r26, Y+24	; 0x18
    a5f4:	b9 8d       	ldd	r27, Y+25	; 0x19
    a5f6:	00 97       	sbiw	r24, 0x00	; 0
    a5f8:	a1 05       	cpc	r26, r1
    a5fa:	b1 05       	cpc	r27, r1
    a5fc:	09 f4       	brne	.+2      	; 0xa600 <dir_next+0x5a>
    a5fe:	a7 c0       	rjmp	.+334    	; 0xa74e <dir_next+0x1a8>
    a600:	5b 01       	movw	r10, r22
    a602:	b7 01       	movw	r22, r14
    a604:	a6 01       	movw	r20, r12
    a606:	51 70       	andi	r21, 0x01	; 1
    a608:	66 27       	eor	r22, r22
    a60a:	77 27       	eor	r23, r23
    a60c:	45 2b       	or	r20, r21
    a60e:	46 2b       	or	r20, r22
    a610:	47 2b       	or	r20, r23
    a612:	09 f0       	breq	.+2      	; 0xa616 <dir_next+0x70>
    a614:	8d c0       	rjmp	.+282    	; 0xa730 <dir_next+0x18a>
    a616:	01 96       	adiw	r24, 0x01	; 1
    a618:	a1 1d       	adc	r26, r1
    a61a:	b1 1d       	adc	r27, r1
    a61c:	8e 8b       	std	Y+22, r24	; 0x16
    a61e:	9f 8b       	std	Y+23, r25	; 0x17
    a620:	a8 8f       	std	Y+24, r26	; 0x18
    a622:	b9 8f       	std	Y+25, r27	; 0x19
    a624:	4a 89       	ldd	r20, Y+18	; 0x12
    a626:	5b 89       	ldd	r21, Y+19	; 0x13
    a628:	6c 89       	ldd	r22, Y+20	; 0x14
    a62a:	7d 89       	ldd	r23, Y+21	; 0x15
    a62c:	f8 01       	movw	r30, r16
    a62e:	41 15       	cp	r20, r1
    a630:	51 05       	cpc	r21, r1
    a632:	61 05       	cpc	r22, r1
    a634:	71 05       	cpc	r23, r1
    a636:	c1 f4       	brne	.+48     	; 0xa668 <dir_next+0xc2>
    a638:	87 81       	ldd	r24, Z+7	; 0x07
    a63a:	90 85       	ldd	r25, Z+8	; 0x08
    a63c:	a0 e0       	ldi	r26, 0x00	; 0
    a63e:	b0 e0       	ldi	r27, 0x00	; 0
    a640:	b7 01       	movw	r22, r14
    a642:	a6 01       	movw	r20, r12
    a644:	35 e0       	ldi	r19, 0x05	; 5
    a646:	76 95       	lsr	r23
    a648:	67 95       	ror	r22
    a64a:	57 95       	ror	r21
    a64c:	47 95       	ror	r20
    a64e:	3a 95       	dec	r19
    a650:	d1 f7       	brne	.-12     	; 0xa646 <dir_next+0xa0>
    a652:	48 17       	cp	r20, r24
    a654:	59 07       	cpc	r21, r25
    a656:	6a 07       	cpc	r22, r26
    a658:	7b 07       	cpc	r23, r27
    a65a:	08 f4       	brcc	.+2      	; 0xa65e <dir_next+0xb8>
    a65c:	69 c0       	rjmp	.+210    	; 0xa730 <dir_next+0x18a>
    a65e:	1e 8a       	std	Y+22, r1	; 0x16
    a660:	1f 8a       	std	Y+23, r1	; 0x17
    a662:	18 8e       	std	Y+24, r1	; 0x18
    a664:	19 8e       	std	Y+25, r1	; 0x19
    a666:	73 c0       	rjmp	.+230    	; 0xa74e <dir_next+0x1a8>
    a668:	81 85       	ldd	r24, Z+9	; 0x09
    a66a:	92 85       	ldd	r25, Z+10	; 0x0a
    a66c:	01 97       	sbiw	r24, 0x01	; 1
    a66e:	a0 e0       	ldi	r26, 0x00	; 0
    a670:	b0 e0       	ldi	r27, 0x00	; 0
    a672:	26 01       	movw	r4, r12
    a674:	37 01       	movw	r6, r14
    a676:	29 e0       	ldi	r18, 0x09	; 9
    a678:	76 94       	lsr	r7
    a67a:	67 94       	ror	r6
    a67c:	57 94       	ror	r5
    a67e:	47 94       	ror	r4
    a680:	2a 95       	dec	r18
    a682:	d1 f7       	brne	.-12     	; 0xa678 <dir_next+0xd2>
    a684:	84 21       	and	r24, r4
    a686:	95 21       	and	r25, r5
    a688:	a6 21       	and	r26, r6
    a68a:	b7 21       	and	r27, r7
    a68c:	89 2b       	or	r24, r25
    a68e:	8a 2b       	or	r24, r26
    a690:	8b 2b       	or	r24, r27
    a692:	09 f0       	breq	.+2      	; 0xa696 <dir_next+0xf0>
    a694:	4d c0       	rjmp	.+154    	; 0xa730 <dir_next+0x18a>
    a696:	c8 01       	movw	r24, r16
    a698:	5a dc       	rcall	.-1868   	; 0x9f4e <get_fat.isra.9>
    a69a:	2b 01       	movw	r4, r22
    a69c:	3c 01       	movw	r6, r24
    a69e:	62 30       	cpi	r22, 0x02	; 2
    a6a0:	71 05       	cpc	r23, r1
    a6a2:	81 05       	cpc	r24, r1
    a6a4:	91 05       	cpc	r25, r1
    a6a6:	18 f4       	brcc	.+6      	; 0xa6ae <dir_next+0x108>
    a6a8:	82 e0       	ldi	r24, 0x02	; 2
    a6aa:	90 e0       	ldi	r25, 0x00	; 0
    a6ac:	55 c0       	rjmp	.+170    	; 0xa758 <dir_next+0x1b2>
    a6ae:	8f ef       	ldi	r24, 0xFF	; 255
    a6b0:	48 16       	cp	r4, r24
    a6b2:	58 06       	cpc	r5, r24
    a6b4:	68 06       	cpc	r6, r24
    a6b6:	78 06       	cpc	r7, r24
    a6b8:	19 f4       	brne	.+6      	; 0xa6c0 <dir_next+0x11a>
    a6ba:	81 e0       	ldi	r24, 0x01	; 1
    a6bc:	90 e0       	ldi	r25, 0x00	; 0
    a6be:	4c c0       	rjmp	.+152    	; 0xa758 <dir_next+0x1b2>
    a6c0:	f8 01       	movw	r30, r16
    a6c2:	81 8d       	ldd	r24, Z+25	; 0x19
    a6c4:	92 8d       	ldd	r25, Z+26	; 0x1a
    a6c6:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a6c8:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a6ca:	48 16       	cp	r4, r24
    a6cc:	59 06       	cpc	r5, r25
    a6ce:	6a 06       	cpc	r6, r26
    a6d0:	7b 06       	cpc	r7, r27
    a6d2:	08 f1       	brcs	.+66     	; 0xa716 <dir_next+0x170>
    a6d4:	ab 28       	or	r10, r11
    a6d6:	19 f2       	breq	.-122    	; 0xa65e <dir_next+0xb8>
    a6d8:	4a 89       	ldd	r20, Y+18	; 0x12
    a6da:	5b 89       	ldd	r21, Y+19	; 0x13
    a6dc:	6c 89       	ldd	r22, Y+20	; 0x14
    a6de:	7d 89       	ldd	r23, Y+21	; 0x15
    a6e0:	ce 01       	movw	r24, r28
    a6e2:	aa dd       	rcall	.-1196   	; 0xa238 <create_chain>
    a6e4:	2b 01       	movw	r4, r22
    a6e6:	3c 01       	movw	r6, r24
    a6e8:	61 15       	cp	r22, r1
    a6ea:	71 05       	cpc	r23, r1
    a6ec:	81 05       	cpc	r24, r1
    a6ee:	91 05       	cpc	r25, r1
    a6f0:	89 f1       	breq	.+98     	; 0xa754 <dir_next+0x1ae>
    a6f2:	61 30       	cpi	r22, 0x01	; 1
    a6f4:	71 05       	cpc	r23, r1
    a6f6:	81 05       	cpc	r24, r1
    a6f8:	91 05       	cpc	r25, r1
    a6fa:	b1 f2       	breq	.-84     	; 0xa6a8 <dir_next+0x102>
    a6fc:	8f ef       	ldi	r24, 0xFF	; 255
    a6fe:	48 16       	cp	r4, r24
    a700:	58 06       	cpc	r5, r24
    a702:	68 06       	cpc	r6, r24
    a704:	78 06       	cpc	r7, r24
    a706:	c9 f2       	breq	.-78     	; 0xa6ba <dir_next+0x114>
    a708:	b3 01       	movw	r22, r6
    a70a:	a2 01       	movw	r20, r4
    a70c:	c8 01       	movw	r24, r16
    a70e:	0e 94 31 4b 	call	0x9662	; 0x9662 <dir_clear>
    a712:	89 2b       	or	r24, r25
    a714:	91 f6       	brne	.-92     	; 0xa6ba <dir_next+0x114>
    a716:	4a 8a       	std	Y+18, r4	; 0x12
    a718:	5b 8a       	std	Y+19, r5	; 0x13
    a71a:	6c 8a       	std	Y+20, r6	; 0x14
    a71c:	7d 8a       	std	Y+21, r7	; 0x15
    a71e:	b3 01       	movw	r22, r6
    a720:	a2 01       	movw	r20, r4
    a722:	c8 01       	movw	r24, r16
    a724:	0e 94 4a 48 	call	0x9094	; 0x9094 <clst2sect>
    a728:	6e 8b       	std	Y+22, r22	; 0x16
    a72a:	7f 8b       	std	Y+23, r23	; 0x17
    a72c:	88 8f       	std	Y+24, r24	; 0x18
    a72e:	99 8f       	std	Y+25, r25	; 0x19
    a730:	ce 86       	std	Y+14, r12	; 0x0e
    a732:	df 86       	std	Y+15, r13	; 0x0f
    a734:	e8 8a       	std	Y+16, r14	; 0x10
    a736:	f9 8a       	std	Y+17, r15	; 0x11
    a738:	0b 5c       	subi	r16, 0xCB	; 203
    a73a:	1f 4f       	sbci	r17, 0xFF	; 255
    a73c:	e1 e0       	ldi	r30, 0x01	; 1
    a73e:	de 22       	and	r13, r30
    a740:	c0 0e       	add	r12, r16
    a742:	d1 1e       	adc	r13, r17
    a744:	db 8e       	std	Y+27, r13	; 0x1b
    a746:	ca 8e       	std	Y+26, r12	; 0x1a
    a748:	80 e0       	ldi	r24, 0x00	; 0
    a74a:	90 e0       	ldi	r25, 0x00	; 0
    a74c:	05 c0       	rjmp	.+10     	; 0xa758 <dir_next+0x1b2>
    a74e:	84 e0       	ldi	r24, 0x04	; 4
    a750:	90 e0       	ldi	r25, 0x00	; 0
    a752:	02 c0       	rjmp	.+4      	; 0xa758 <dir_next+0x1b2>
    a754:	87 e0       	ldi	r24, 0x07	; 7
    a756:	90 e0       	ldi	r25, 0x00	; 0
    a758:	df 91       	pop	r29
    a75a:	cf 91       	pop	r28
    a75c:	1f 91       	pop	r17
    a75e:	0f 91       	pop	r16
    a760:	ff 90       	pop	r15
    a762:	ef 90       	pop	r14
    a764:	df 90       	pop	r13
    a766:	cf 90       	pop	r12
    a768:	bf 90       	pop	r11
    a76a:	af 90       	pop	r10
    a76c:	7f 90       	pop	r7
    a76e:	6f 90       	pop	r6
    a770:	5f 90       	pop	r5
    a772:	4f 90       	pop	r4
    a774:	08 95       	ret

0000a776 <dir_alloc>:
    a776:	a0 e0       	ldi	r26, 0x00	; 0
    a778:	b0 e0       	ldi	r27, 0x00	; 0
    a77a:	e1 ec       	ldi	r30, 0xC1	; 193
    a77c:	f3 e5       	ldi	r31, 0x53	; 83
    a77e:	0c 94 9d e7 	jmp	0x1cf3a	; 0x1cf3a <__prologue_saves__+0x14>
    a782:	ec 01       	movw	r28, r24
    a784:	6b 01       	movw	r12, r22
    a786:	e8 80       	ld	r14, Y
    a788:	f9 80       	ldd	r15, Y+1	; 0x01
    a78a:	40 e0       	ldi	r20, 0x00	; 0
    a78c:	50 e0       	ldi	r21, 0x00	; 0
    a78e:	ba 01       	movw	r22, r20
    a790:	92 dc       	rcall	.-1756   	; 0xa0b6 <dir_sdi>
    a792:	00 97       	sbiw	r24, 0x00	; 0
    a794:	f9 f4       	brne	.+62     	; 0xa7d4 <dir_alloc+0x5e>
    a796:	00 e0       	ldi	r16, 0x00	; 0
    a798:	10 e0       	ldi	r17, 0x00	; 0
    a79a:	4e 89       	ldd	r20, Y+22	; 0x16
    a79c:	5f 89       	ldd	r21, Y+23	; 0x17
    a79e:	68 8d       	ldd	r22, Y+24	; 0x18
    a7a0:	79 8d       	ldd	r23, Y+25	; 0x19
    a7a2:	c7 01       	movw	r24, r14
    a7a4:	06 d8       	rcall	.-4084   	; 0x97b2 <move_window>
    a7a6:	00 97       	sbiw	r24, 0x00	; 0
    a7a8:	a9 f4       	brne	.+42     	; 0xa7d4 <dir_alloc+0x5e>
    a7aa:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a7ac:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a7ae:	20 81       	ld	r18, Z
    a7b0:	25 3e       	cpi	r18, 0xE5	; 229
    a7b2:	11 f0       	breq	.+4      	; 0xa7b8 <dir_alloc+0x42>
    a7b4:	21 11       	cpse	r18, r1
    a7b6:	06 c0       	rjmp	.+12     	; 0xa7c4 <dir_alloc+0x4e>
    a7b8:	0f 5f       	subi	r16, 0xFF	; 255
    a7ba:	1f 4f       	sbci	r17, 0xFF	; 255
    a7bc:	0c 15       	cp	r16, r12
    a7be:	1d 05       	cpc	r17, r13
    a7c0:	19 f4       	brne	.+6      	; 0xa7c8 <dir_alloc+0x52>
    a7c2:	0d c0       	rjmp	.+26     	; 0xa7de <dir_alloc+0x68>
    a7c4:	00 e0       	ldi	r16, 0x00	; 0
    a7c6:	10 e0       	ldi	r17, 0x00	; 0
    a7c8:	61 e0       	ldi	r22, 0x01	; 1
    a7ca:	70 e0       	ldi	r23, 0x00	; 0
    a7cc:	ce 01       	movw	r24, r28
    a7ce:	eb de       	rcall	.-554    	; 0xa5a6 <dir_next>
    a7d0:	00 97       	sbiw	r24, 0x00	; 0
    a7d2:	19 f3       	breq	.-58     	; 0xa79a <dir_alloc+0x24>
    a7d4:	84 30       	cpi	r24, 0x04	; 4
    a7d6:	91 05       	cpc	r25, r1
    a7d8:	11 f4       	brne	.+4      	; 0xa7de <dir_alloc+0x68>
    a7da:	87 e0       	ldi	r24, 0x07	; 7
    a7dc:	90 e0       	ldi	r25, 0x00	; 0
    a7de:	cd b7       	in	r28, 0x3d	; 61
    a7e0:	de b7       	in	r29, 0x3e	; 62
    a7e2:	e8 e0       	ldi	r30, 0x08	; 8
    a7e4:	0c 94 b9 e7 	jmp	0x1cf72	; 0x1cf72 <__epilogue_restores__+0x14>

0000a7e8 <dir_read>:
    a7e8:	a0 e0       	ldi	r26, 0x00	; 0
    a7ea:	b0 e0       	ldi	r27, 0x00	; 0
    a7ec:	ea ef       	ldi	r30, 0xFA	; 250
    a7ee:	f3 e5       	ldi	r31, 0x53	; 83
    a7f0:	0c 94 99 e7 	jmp	0x1cf32	; 0x1cf32 <__prologue_saves__+0xc>
    a7f4:	ec 01       	movw	r28, r24
    a7f6:	7b 01       	movw	r14, r22
    a7f8:	a8 80       	ld	r10, Y
    a7fa:	b9 80       	ldd	r11, Y+1	; 0x01
    a7fc:	dd 24       	eor	r13, r13
    a7fe:	da 94       	dec	r13
    a800:	1f ef       	ldi	r17, 0xFF	; 255
    a802:	84 e0       	ldi	r24, 0x04	; 4
    a804:	90 e0       	ldi	r25, 0x00	; 0
    a806:	fd e0       	ldi	r31, 0x0D	; 13
    a808:	cf 2e       	mov	r12, r31
    a80a:	4e 89       	ldd	r20, Y+22	; 0x16
    a80c:	5f 89       	ldd	r21, Y+23	; 0x17
    a80e:	68 8d       	ldd	r22, Y+24	; 0x18
    a810:	79 8d       	ldd	r23, Y+25	; 0x19
    a812:	41 15       	cp	r20, r1
    a814:	51 05       	cpc	r21, r1
    a816:	61 05       	cpc	r22, r1
    a818:	71 05       	cpc	r23, r1
    a81a:	09 f4       	brne	.+2      	; 0xa81e <dir_read+0x36>
    a81c:	9a c0       	rjmp	.+308    	; 0xa952 <dir_read+0x16a>
    a81e:	c5 01       	movw	r24, r10
    a820:	0e 94 d9 4b 	call	0x97b2	; 0x97b2 <move_window>
    a824:	00 97       	sbiw	r24, 0x00	; 0
    a826:	09 f0       	breq	.+2      	; 0xa82a <dir_read+0x42>
    a828:	96 c0       	rjmp	.+300    	; 0xa956 <dir_read+0x16e>
    a82a:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a82c:	9b 8c       	ldd	r9, Y+27	; 0x1b
    a82e:	f4 01       	movw	r30, r8
    a830:	00 81       	ld	r16, Z
    a832:	00 23       	and	r16, r16
    a834:	09 f4       	brne	.+2      	; 0xa838 <dir_read+0x50>
    a836:	97 c0       	rjmp	.+302    	; 0xa966 <dir_read+0x17e>
    a838:	83 85       	ldd	r24, Z+11	; 0x0b
    a83a:	8f 73       	andi	r24, 0x3F	; 63
    a83c:	8c 83       	std	Y+4, r24	; 0x04
    a83e:	05 3e       	cpi	r16, 0xE5	; 229
    a840:	09 f4       	brne	.+2      	; 0xa844 <dir_read+0x5c>
    a842:	7e c0       	rjmp	.+252    	; 0xa940 <dir_read+0x158>
    a844:	0e 32       	cpi	r16, 0x2E	; 46
    a846:	09 f4       	brne	.+2      	; 0xa84a <dir_read+0x62>
    a848:	7b c0       	rjmp	.+246    	; 0xa940 <dir_read+0x158>
    a84a:	21 e0       	ldi	r18, 0x01	; 1
    a84c:	30 e0       	ldi	r19, 0x00	; 0
    a84e:	98 2f       	mov	r25, r24
    a850:	9f 71       	andi	r25, 0x1F	; 31
    a852:	98 30       	cpi	r25, 0x08	; 8
    a854:	11 f0       	breq	.+4      	; 0xa85a <dir_read+0x72>
    a856:	20 e0       	ldi	r18, 0x00	; 0
    a858:	30 e0       	ldi	r19, 0x00	; 0
    a85a:	2e 15       	cp	r18, r14
    a85c:	3f 05       	cpc	r19, r15
    a85e:	09 f0       	breq	.+2      	; 0xa862 <dir_read+0x7a>
    a860:	6f c0       	rjmp	.+222    	; 0xa940 <dir_read+0x158>
    a862:	8f 30       	cpi	r24, 0x0F	; 15
    a864:	09 f0       	breq	.+2      	; 0xa868 <dir_read+0x80>
    a866:	5c c0       	rjmp	.+184    	; 0xa920 <dir_read+0x138>
    a868:	06 ff       	sbrs	r16, 6
    a86a:	0c c0       	rjmp	.+24     	; 0xa884 <dir_read+0x9c>
    a86c:	f4 01       	movw	r30, r8
    a86e:	85 85       	ldd	r24, Z+13	; 0x0d
    a870:	0f 7b       	andi	r16, 0xBF	; 191
    a872:	4e 85       	ldd	r20, Y+14	; 0x0e
    a874:	5f 85       	ldd	r21, Y+15	; 0x0f
    a876:	68 89       	ldd	r22, Y+16	; 0x10
    a878:	79 89       	ldd	r23, Y+17	; 0x11
    a87a:	48 a7       	std	Y+40, r20	; 0x28
    a87c:	59 a7       	std	Y+41, r21	; 0x29
    a87e:	6a a7       	std	Y+42, r22	; 0x2a
    a880:	7b a7       	std	Y+43, r23	; 0x2b
    a882:	03 c0       	rjmp	.+6      	; 0xa88a <dir_read+0xa2>
    a884:	10 13       	cpse	r17, r16
    a886:	5c c0       	rjmp	.+184    	; 0xa940 <dir_read+0x158>
    a888:	8d 2d       	mov	r24, r13
    a88a:	f4 01       	movw	r30, r8
    a88c:	d5 84       	ldd	r13, Z+13	; 0x0d
    a88e:	d8 12       	cpse	r13, r24
    a890:	56 c0       	rjmp	.+172    	; 0xa93e <dir_read+0x156>
    a892:	82 8d       	ldd	r24, Z+26	; 0x1a
    a894:	93 8d       	ldd	r25, Z+27	; 0x1b
    a896:	89 2b       	or	r24, r25
    a898:	09 f0       	breq	.+2      	; 0xa89c <dir_read+0xb4>
    a89a:	52 c0       	rjmp	.+164    	; 0xa940 <dir_read+0x158>
    a89c:	f5 01       	movw	r30, r10
    a89e:	63 85       	ldd	r22, Z+11	; 0x0b
    a8a0:	74 85       	ldd	r23, Z+12	; 0x0c
    a8a2:	f4 01       	movw	r30, r8
    a8a4:	80 81       	ld	r24, Z
    a8a6:	90 e0       	ldi	r25, 0x00	; 0
    a8a8:	8f 7b       	andi	r24, 0xBF	; 191
    a8aa:	01 97       	sbiw	r24, 0x01	; 1
    a8ac:	c8 9e       	mul	r12, r24
    a8ae:	90 01       	movw	r18, r0
    a8b0:	c9 9e       	mul	r12, r25
    a8b2:	30 0d       	add	r19, r0
    a8b4:	11 24       	eor	r1, r1
    a8b6:	ab ee       	ldi	r26, 0xEB	; 235
    a8b8:	b4 e0       	ldi	r27, 0x04	; 4
    a8ba:	81 e0       	ldi	r24, 0x01	; 1
    a8bc:	90 e0       	ldi	r25, 0x00	; 0
    a8be:	4d 91       	ld	r20, X+
    a8c0:	f4 01       	movw	r30, r8
    a8c2:	e4 0f       	add	r30, r20
    a8c4:	f1 1d       	adc	r31, r1
    a8c6:	40 81       	ld	r20, Z
    a8c8:	51 81       	ldd	r21, Z+1	; 0x01
    a8ca:	00 97       	sbiw	r24, 0x00	; 0
    a8cc:	81 f0       	breq	.+32     	; 0xa8ee <dir_read+0x106>
    a8ce:	2f 3f       	cpi	r18, 0xFF	; 255
    a8d0:	31 05       	cpc	r19, r1
    a8d2:	09 f0       	breq	.+2      	; 0xa8d6 <dir_read+0xee>
    a8d4:	a8 f5       	brcc	.+106    	; 0xa940 <dir_read+0x158>
    a8d6:	c9 01       	movw	r24, r18
    a8d8:	88 0f       	add	r24, r24
    a8da:	99 1f       	adc	r25, r25
    a8dc:	86 0f       	add	r24, r22
    a8de:	97 1f       	adc	r25, r23
    a8e0:	fc 01       	movw	r30, r24
    a8e2:	51 83       	std	Z+1, r21	; 0x01
    a8e4:	40 83       	st	Z, r20
    a8e6:	ca 01       	movw	r24, r20
    a8e8:	2f 5f       	subi	r18, 0xFF	; 255
    a8ea:	3f 4f       	sbci	r19, 0xFF	; 255
    a8ec:	03 c0       	rjmp	.+6      	; 0xa8f4 <dir_read+0x10c>
    a8ee:	4f 3f       	cpi	r20, 0xFF	; 255
    a8f0:	5f 4f       	sbci	r21, 0xFF	; 255
    a8f2:	31 f5       	brne	.+76     	; 0xa940 <dir_read+0x158>
    a8f4:	44 e0       	ldi	r20, 0x04	; 4
    a8f6:	a8 3f       	cpi	r26, 0xF8	; 248
    a8f8:	b4 07       	cpc	r27, r20
    a8fa:	09 f7       	brne	.-62     	; 0xa8be <dir_read+0xd6>
    a8fc:	f4 01       	movw	r30, r8
    a8fe:	40 81       	ld	r20, Z
    a900:	46 ff       	sbrs	r20, 6
    a902:	2e c0       	rjmp	.+92     	; 0xa960 <dir_read+0x178>
    a904:	89 2b       	or	r24, r25
    a906:	61 f1       	breq	.+88     	; 0xa960 <dir_read+0x178>
    a908:	2f 3f       	cpi	r18, 0xFF	; 255
    a90a:	31 05       	cpc	r19, r1
    a90c:	09 f0       	breq	.+2      	; 0xa910 <dir_read+0x128>
    a90e:	c0 f4       	brcc	.+48     	; 0xa940 <dir_read+0x158>
    a910:	22 0f       	add	r18, r18
    a912:	33 1f       	adc	r19, r19
    a914:	fb 01       	movw	r30, r22
    a916:	e2 0f       	add	r30, r18
    a918:	f3 1f       	adc	r31, r19
    a91a:	11 82       	std	Z+1, r1	; 0x01
    a91c:	10 82       	st	Z, r1
    a91e:	20 c0       	rjmp	.+64     	; 0xa960 <dir_read+0x178>
    a920:	11 11       	cpse	r17, r1
    a922:	05 c0       	rjmp	.+10     	; 0xa92e <dir_read+0x146>
    a924:	c4 01       	movw	r24, r8
    a926:	0e 94 ae 48 	call	0x915c	; 0x915c <sum_sfn>
    a92a:	d8 16       	cp	r13, r24
    a92c:	f9 f0       	breq	.+62     	; 0xa96c <dir_read+0x184>
    a92e:	8f ef       	ldi	r24, 0xFF	; 255
    a930:	9f ef       	ldi	r25, 0xFF	; 255
    a932:	dc 01       	movw	r26, r24
    a934:	88 a7       	std	Y+40, r24	; 0x28
    a936:	99 a7       	std	Y+41, r25	; 0x29
    a938:	aa a7       	std	Y+42, r26	; 0x2a
    a93a:	bb a7       	std	Y+43, r27	; 0x2b
    a93c:	17 c0       	rjmp	.+46     	; 0xa96c <dir_read+0x184>
    a93e:	d8 2e       	mov	r13, r24
    a940:	1f ef       	ldi	r17, 0xFF	; 255
    a942:	60 e0       	ldi	r22, 0x00	; 0
    a944:	70 e0       	ldi	r23, 0x00	; 0
    a946:	ce 01       	movw	r24, r28
    a948:	2e de       	rcall	.-932    	; 0xa5a6 <dir_next>
    a94a:	00 97       	sbiw	r24, 0x00	; 0
    a94c:	09 f4       	brne	.+2      	; 0xa950 <dir_read+0x168>
    a94e:	5d cf       	rjmp	.-326    	; 0xa80a <dir_read+0x22>
    a950:	02 c0       	rjmp	.+4      	; 0xa956 <dir_read+0x16e>
    a952:	00 97       	sbiw	r24, 0x00	; 0
    a954:	59 f0       	breq	.+22     	; 0xa96c <dir_read+0x184>
    a956:	1e 8a       	std	Y+22, r1	; 0x16
    a958:	1f 8a       	std	Y+23, r1	; 0x17
    a95a:	18 8e       	std	Y+24, r1	; 0x18
    a95c:	19 8e       	std	Y+25, r1	; 0x19
    a95e:	08 c0       	rjmp	.+16     	; 0xa970 <dir_read+0x188>
    a960:	1f ef       	ldi	r17, 0xFF	; 255
    a962:	10 0f       	add	r17, r16
    a964:	ee cf       	rjmp	.-36     	; 0xa942 <dir_read+0x15a>
    a966:	84 e0       	ldi	r24, 0x04	; 4
    a968:	90 e0       	ldi	r25, 0x00	; 0
    a96a:	f5 cf       	rjmp	.-22     	; 0xa956 <dir_read+0x16e>
    a96c:	80 e0       	ldi	r24, 0x00	; 0
    a96e:	90 e0       	ldi	r25, 0x00	; 0
    a970:	cd b7       	in	r28, 0x3d	; 61
    a972:	de b7       	in	r29, 0x3e	; 62
    a974:	ec e0       	ldi	r30, 0x0C	; 12
    a976:	0c 94 b5 e7 	jmp	0x1cf6a	; 0x1cf6a <__epilogue_restores__+0xc>

0000a97a <dir_remove>:
    a97a:	a0 e0       	ldi	r26, 0x00	; 0
    a97c:	b0 e0       	ldi	r27, 0x00	; 0
    a97e:	e3 ec       	ldi	r30, 0xC3	; 195
    a980:	f4 e5       	ldi	r31, 0x54	; 84
    a982:	0c 94 9b e7 	jmp	0x1cf36	; 0x1cf36 <__prologue_saves__+0x10>
    a986:	ec 01       	movw	r28, r24
    a988:	08 81       	ld	r16, Y
    a98a:	19 81       	ldd	r17, Y+1	; 0x01
    a98c:	ce 84       	ldd	r12, Y+14	; 0x0e
    a98e:	df 84       	ldd	r13, Y+15	; 0x0f
    a990:	e8 88       	ldd	r14, Y+16	; 0x10
    a992:	f9 88       	ldd	r15, Y+17	; 0x11
    a994:	48 a5       	ldd	r20, Y+40	; 0x28
    a996:	59 a5       	ldd	r21, Y+41	; 0x29
    a998:	6a a5       	ldd	r22, Y+42	; 0x2a
    a99a:	7b a5       	ldd	r23, Y+43	; 0x2b
    a99c:	4f 3f       	cpi	r20, 0xFF	; 255
    a99e:	8f ef       	ldi	r24, 0xFF	; 255
    a9a0:	58 07       	cpc	r21, r24
    a9a2:	68 07       	cpc	r22, r24
    a9a4:	78 07       	cpc	r23, r24
    a9a6:	29 f4       	brne	.+10     	; 0xa9b2 <dir_remove+0x38>
    a9a8:	85 ee       	ldi	r24, 0xE5	; 229
    a9aa:	b8 2e       	mov	r11, r24
    a9ac:	aa 24       	eor	r10, r10
    a9ae:	a3 94       	inc	r10
    a9b0:	19 c0       	rjmp	.+50     	; 0xa9e4 <dir_remove+0x6a>
    a9b2:	ce 01       	movw	r24, r28
    a9b4:	80 db       	rcall	.-2304   	; 0xa0b6 <dir_sdi>
    a9b6:	00 97       	sbiw	r24, 0x00	; 0
    a9b8:	19 f5       	brne	.+70     	; 0xaa00 <dir_remove+0x86>
    a9ba:	f6 cf       	rjmp	.-20     	; 0xa9a8 <dir_remove+0x2e>
    a9bc:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a9be:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a9c0:	b0 82       	st	Z, r11
    a9c2:	f8 01       	movw	r30, r16
    a9c4:	a3 82       	std	Z+3, r10	; 0x03
    a9c6:	4e 85       	ldd	r20, Y+14	; 0x0e
    a9c8:	5f 85       	ldd	r21, Y+15	; 0x0f
    a9ca:	68 89       	ldd	r22, Y+16	; 0x10
    a9cc:	79 89       	ldd	r23, Y+17	; 0x11
    a9ce:	4c 15       	cp	r20, r12
    a9d0:	5d 05       	cpc	r21, r13
    a9d2:	6e 05       	cpc	r22, r14
    a9d4:	7f 05       	cpc	r23, r15
    a9d6:	a0 f4       	brcc	.+40     	; 0xaa00 <dir_remove+0x86>
    a9d8:	60 e0       	ldi	r22, 0x00	; 0
    a9da:	70 e0       	ldi	r23, 0x00	; 0
    a9dc:	ce 01       	movw	r24, r28
    a9de:	e3 dd       	rcall	.-1082   	; 0xa5a6 <dir_next>
    a9e0:	00 97       	sbiw	r24, 0x00	; 0
    a9e2:	49 f4       	brne	.+18     	; 0xa9f6 <dir_remove+0x7c>
    a9e4:	4e 89       	ldd	r20, Y+22	; 0x16
    a9e6:	5f 89       	ldd	r21, Y+23	; 0x17
    a9e8:	68 8d       	ldd	r22, Y+24	; 0x18
    a9ea:	79 8d       	ldd	r23, Y+25	; 0x19
    a9ec:	c8 01       	movw	r24, r16
    a9ee:	0e 94 d9 4b 	call	0x97b2	; 0x97b2 <move_window>
    a9f2:	00 97       	sbiw	r24, 0x00	; 0
    a9f4:	19 f3       	breq	.-58     	; 0xa9bc <dir_remove+0x42>
    a9f6:	84 30       	cpi	r24, 0x04	; 4
    a9f8:	91 05       	cpc	r25, r1
    a9fa:	11 f4       	brne	.+4      	; 0xaa00 <dir_remove+0x86>
    a9fc:	82 e0       	ldi	r24, 0x02	; 2
    a9fe:	90 e0       	ldi	r25, 0x00	; 0
    aa00:	cd b7       	in	r28, 0x3d	; 61
    aa02:	de b7       	in	r29, 0x3e	; 62
    aa04:	ea e0       	ldi	r30, 0x0A	; 10
    aa06:	0c 94 b7 e7 	jmp	0x1cf6e	; 0x1cf6e <__epilogue_restores__+0x10>

0000aa0a <dir_find>:
    aa0a:	ac e0       	ldi	r26, 0x0C	; 12
    aa0c:	b0 e0       	ldi	r27, 0x00	; 0
    aa0e:	eb e0       	ldi	r30, 0x0B	; 11
    aa10:	f5 e5       	ldi	r31, 0x55	; 85
    aa12:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
    aa16:	9c 87       	std	Y+12, r25	; 0x0c
    aa18:	8b 87       	std	Y+11, r24	; 0x0b
    aa1a:	fc 01       	movw	r30, r24
    aa1c:	01 90       	ld	r0, Z+
    aa1e:	f0 81       	ld	r31, Z
    aa20:	e0 2d       	mov	r30, r0
    aa22:	fc 83       	std	Y+4, r31	; 0x04
    aa24:	eb 83       	std	Y+3, r30	; 0x03
    aa26:	40 e0       	ldi	r20, 0x00	; 0
    aa28:	50 e0       	ldi	r21, 0x00	; 0
    aa2a:	ba 01       	movw	r22, r20
    aa2c:	44 db       	rcall	.-2424   	; 0xa0b6 <dir_sdi>
    aa2e:	00 97       	sbiw	r24, 0x00	; 0
    aa30:	09 f0       	breq	.+2      	; 0xaa34 <dir_find+0x2a>
    aa32:	e7 c0       	rjmp	.+462    	; 0xac02 <dir_find+0x1f8>
    aa34:	8f ef       	ldi	r24, 0xFF	; 255
    aa36:	9f ef       	ldi	r25, 0xFF	; 255
    aa38:	dc 01       	movw	r26, r24
    aa3a:	eb 85       	ldd	r30, Y+11	; 0x0b
    aa3c:	fc 85       	ldd	r31, Y+12	; 0x0c
    aa3e:	80 a7       	std	Z+40, r24	; 0x28
    aa40:	91 a7       	std	Z+41, r25	; 0x29
    aa42:	a2 a7       	std	Z+42, r26	; 0x2a
    aa44:	b3 a7       	std	Z+43, r27	; 0x2b
    aa46:	0f ef       	ldi	r16, 0xFF	; 255
    aa48:	1f ef       	ldi	r17, 0xFF	; 255
    aa4a:	44 24       	eor	r4, r4
    aa4c:	4a 94       	dec	r4
    aa4e:	54 2c       	mov	r5, r4
    aa50:	32 01       	movw	r6, r4
    aa52:	7c 96       	adiw	r30, 0x1c	; 28
    aa54:	fa 87       	std	Y+10, r31	; 0x0a
    aa56:	e9 87       	std	Y+9, r30	; 0x09
    aa58:	eb 85       	ldd	r30, Y+11	; 0x0b
    aa5a:	fc 85       	ldd	r31, Y+12	; 0x0c
    aa5c:	46 89       	ldd	r20, Z+22	; 0x16
    aa5e:	57 89       	ldd	r21, Z+23	; 0x17
    aa60:	60 8d       	ldd	r22, Z+24	; 0x18
    aa62:	71 8d       	ldd	r23, Z+25	; 0x19
    aa64:	8b 81       	ldd	r24, Y+3	; 0x03
    aa66:	9c 81       	ldd	r25, Y+4	; 0x04
    aa68:	0e 94 d9 4b 	call	0x97b2	; 0x97b2 <move_window>
    aa6c:	00 97       	sbiw	r24, 0x00	; 0
    aa6e:	09 f0       	breq	.+2      	; 0xaa72 <dir_find+0x68>
    aa70:	c8 c0       	rjmp	.+400    	; 0xac02 <dir_find+0x1f8>
    aa72:	eb 85       	ldd	r30, Y+11	; 0x0b
    aa74:	fc 85       	ldd	r31, Y+12	; 0x0c
    aa76:	e2 8c       	ldd	r14, Z+26	; 0x1a
    aa78:	f3 8c       	ldd	r15, Z+27	; 0x1b
    aa7a:	f7 01       	movw	r30, r14
    aa7c:	d0 80       	ld	r13, Z
    aa7e:	dd 20       	and	r13, r13
    aa80:	09 f4       	brne	.+2      	; 0xaa84 <dir_find+0x7a>
    aa82:	c1 c0       	rjmp	.+386    	; 0xac06 <dir_find+0x1fc>
    aa84:	93 85       	ldd	r25, Z+11	; 0x0b
    aa86:	89 2f       	mov	r24, r25
    aa88:	8f 73       	andi	r24, 0x3F	; 63
    aa8a:	eb 85       	ldd	r30, Y+11	; 0x0b
    aa8c:	fc 85       	ldd	r31, Y+12	; 0x0c
    aa8e:	84 83       	std	Z+4, r24	; 0x04
    aa90:	f5 ee       	ldi	r31, 0xE5	; 229
    aa92:	df 16       	cp	r13, r31
    aa94:	09 f4       	brne	.+2      	; 0xaa98 <dir_find+0x8e>
    aa96:	a6 c0       	rjmp	.+332    	; 0xabe4 <dir_find+0x1da>
    aa98:	93 ff       	sbrs	r25, 3
    aa9a:	04 c0       	rjmp	.+8      	; 0xaaa4 <dir_find+0x9a>
    aa9c:	8f 30       	cpi	r24, 0x0F	; 15
    aa9e:	09 f0       	breq	.+2      	; 0xaaa2 <dir_find+0x98>
    aaa0:	a1 c0       	rjmp	.+322    	; 0xabe4 <dir_find+0x1da>
    aaa2:	03 c0       	rjmp	.+6      	; 0xaaaa <dir_find+0xa0>
    aaa4:	8f 30       	cpi	r24, 0x0F	; 15
    aaa6:	09 f0       	breq	.+2      	; 0xaaaa <dir_find+0xa0>
    aaa8:	88 c0       	rjmp	.+272    	; 0xabba <dir_find+0x1b0>
    aaaa:	eb 85       	ldd	r30, Y+11	; 0x0b
    aaac:	fc 85       	ldd	r31, Y+12	; 0x0c
    aaae:	87 a1       	ldd	r24, Z+39	; 0x27
    aab0:	86 fd       	sbrc	r24, 6
    aab2:	9f c0       	rjmp	.+318    	; 0xabf2 <dir_find+0x1e8>
    aab4:	d6 fe       	sbrs	r13, 6
    aab6:	10 c0       	rjmp	.+32     	; 0xaad8 <dir_find+0xce>
    aab8:	f7 01       	movw	r30, r14
    aaba:	05 85       	ldd	r16, Z+13	; 0x0d
    aabc:	fd 2d       	mov	r31, r13
    aabe:	ff 7b       	andi	r31, 0xBF	; 191
    aac0:	df 2e       	mov	r13, r31
    aac2:	eb 85       	ldd	r30, Y+11	; 0x0b
    aac4:	fc 85       	ldd	r31, Y+12	; 0x0c
    aac6:	86 85       	ldd	r24, Z+14	; 0x0e
    aac8:	97 85       	ldd	r25, Z+15	; 0x0f
    aaca:	a0 89       	ldd	r26, Z+16	; 0x10
    aacc:	b1 89       	ldd	r27, Z+17	; 0x11
    aace:	80 a7       	std	Z+40, r24	; 0x28
    aad0:	91 a7       	std	Z+41, r25	; 0x29
    aad2:	a2 a7       	std	Z+42, r26	; 0x2a
    aad4:	b3 a7       	std	Z+43, r27	; 0x2b
    aad6:	02 c0       	rjmp	.+4      	; 0xaadc <dir_find+0xd2>
    aad8:	1d 11       	cpse	r17, r13
    aada:	8a c0       	rjmp	.+276    	; 0xabf0 <dir_find+0x1e6>
    aadc:	f7 01       	movw	r30, r14
    aade:	c5 84       	ldd	r12, Z+13	; 0x0d
    aae0:	c0 12       	cpse	r12, r16
    aae2:	86 c0       	rjmp	.+268    	; 0xabf0 <dir_find+0x1e6>
    aae4:	82 8d       	ldd	r24, Z+26	; 0x1a
    aae6:	93 8d       	ldd	r25, Z+27	; 0x1b
    aae8:	89 2b       	or	r24, r25
    aaea:	09 f0       	breq	.+2      	; 0xaaee <dir_find+0xe4>
    aaec:	91 c0       	rjmp	.+290    	; 0xac10 <dir_find+0x206>
    aaee:	eb 81       	ldd	r30, Y+3	; 0x03
    aaf0:	fc 81       	ldd	r31, Y+4	; 0x04
    aaf2:	03 84       	ldd	r0, Z+11	; 0x0b
    aaf4:	f4 85       	ldd	r31, Z+12	; 0x0c
    aaf6:	e0 2d       	mov	r30, r0
    aaf8:	fe 83       	std	Y+6, r31	; 0x06
    aafa:	ed 83       	std	Y+5, r30	; 0x05
    aafc:	f7 01       	movw	r30, r14
    aafe:	80 81       	ld	r24, Z
    ab00:	8f 73       	andi	r24, 0x3F	; 63
    ab02:	90 e0       	ldi	r25, 0x00	; 0
    ab04:	01 97       	sbiw	r24, 0x01	; 1
    ab06:	fd e0       	ldi	r31, 0x0D	; 13
    ab08:	f8 9f       	mul	r31, r24
    ab0a:	80 01       	movw	r16, r0
    ab0c:	f9 9f       	mul	r31, r25
    ab0e:	10 0d       	add	r17, r0
    ab10:	11 24       	eor	r1, r1
    ab12:	2b ee       	ldi	r18, 0xEB	; 235
    ab14:	34 e0       	ldi	r19, 0x04	; 4
    ab16:	3a 83       	std	Y+2, r19	; 0x02
    ab18:	29 83       	std	Y+1, r18	; 0x01
    ab1a:	81 e0       	ldi	r24, 0x01	; 1
    ab1c:	90 e0       	ldi	r25, 0x00	; 0
    ab1e:	e9 81       	ldd	r30, Y+1	; 0x01
    ab20:	fa 81       	ldd	r31, Y+2	; 0x02
    ab22:	21 91       	ld	r18, Z+
    ab24:	fa 83       	std	Y+2, r31	; 0x02
    ab26:	e9 83       	std	Y+1, r30	; 0x01
    ab28:	f7 01       	movw	r30, r14
    ab2a:	e2 0f       	add	r30, r18
    ab2c:	f1 1d       	adc	r31, r1
    ab2e:	20 80       	ld	r2, Z
    ab30:	31 80       	ldd	r3, Z+1	; 0x01
    ab32:	00 97       	sbiw	r24, 0x00	; 0
    ab34:	39 f1       	breq	.+78     	; 0xab84 <dir_find+0x17a>
    ab36:	0f 3f       	cpi	r16, 0xFF	; 255
    ab38:	11 05       	cpc	r17, r1
    ab3a:	11 f0       	breq	.+4      	; 0xab40 <dir_find+0x136>
    ab3c:	08 f0       	brcs	.+2      	; 0xab40 <dir_find+0x136>
    ab3e:	68 c0       	rjmp	.+208    	; 0xac10 <dir_find+0x206>
    ab40:	b1 01       	movw	r22, r2
    ab42:	80 e0       	ldi	r24, 0x00	; 0
    ab44:	90 e0       	ldi	r25, 0x00	; 0
    ab46:	0e 94 9d 69 	call	0xd33a	; 0xd33a <ff_wtoupper>
    ab4a:	4b 01       	movw	r8, r22
    ab4c:	5c 01       	movw	r10, r24
    ab4e:	98 01       	movw	r18, r16
    ab50:	2f 5f       	subi	r18, 0xFF	; 255
    ab52:	3f 4f       	sbci	r19, 0xFF	; 255
    ab54:	38 87       	std	Y+8, r19	; 0x08
    ab56:	2f 83       	std	Y+7, r18	; 0x07
    ab58:	00 0f       	add	r16, r16
    ab5a:	11 1f       	adc	r17, r17
    ab5c:	ed 81       	ldd	r30, Y+5	; 0x05
    ab5e:	fe 81       	ldd	r31, Y+6	; 0x06
    ab60:	e0 0f       	add	r30, r16
    ab62:	f1 1f       	adc	r31, r17
    ab64:	60 81       	ld	r22, Z
    ab66:	71 81       	ldd	r23, Z+1	; 0x01
    ab68:	80 e0       	ldi	r24, 0x00	; 0
    ab6a:	90 e0       	ldi	r25, 0x00	; 0
    ab6c:	0e 94 9d 69 	call	0xd33a	; 0xd33a <ff_wtoupper>
    ab70:	86 16       	cp	r8, r22
    ab72:	97 06       	cpc	r9, r23
    ab74:	a8 06       	cpc	r10, r24
    ab76:	b9 06       	cpc	r11, r25
    ab78:	09 f0       	breq	.+2      	; 0xab7c <dir_find+0x172>
    ab7a:	4a c0       	rjmp	.+148    	; 0xac10 <dir_find+0x206>
    ab7c:	c1 01       	movw	r24, r2
    ab7e:	0f 81       	ldd	r16, Y+7	; 0x07
    ab80:	18 85       	ldd	r17, Y+8	; 0x08
    ab82:	05 c0       	rjmp	.+10     	; 0xab8e <dir_find+0x184>
    ab84:	3f ef       	ldi	r19, 0xFF	; 255
    ab86:	23 16       	cp	r2, r19
    ab88:	33 06       	cpc	r3, r19
    ab8a:	09 f0       	breq	.+2      	; 0xab8e <dir_find+0x184>
    ab8c:	41 c0       	rjmp	.+130    	; 0xac10 <dir_find+0x206>
    ab8e:	e9 81       	ldd	r30, Y+1	; 0x01
    ab90:	fa 81       	ldd	r31, Y+2	; 0x02
    ab92:	e8 5f       	subi	r30, 0xF8	; 248
    ab94:	f4 40       	sbci	r31, 0x04	; 4
    ab96:	19 f6       	brne	.-122    	; 0xab1e <dir_find+0x114>
    ab98:	f7 01       	movw	r30, r14
    ab9a:	20 81       	ld	r18, Z
    ab9c:	26 ff       	sbrs	r18, 6
    ab9e:	3a c0       	rjmp	.+116    	; 0xac14 <dir_find+0x20a>
    aba0:	89 2b       	or	r24, r25
    aba2:	c1 f1       	breq	.+112    	; 0xac14 <dir_find+0x20a>
    aba4:	00 0f       	add	r16, r16
    aba6:	11 1f       	adc	r17, r17
    aba8:	ed 81       	ldd	r30, Y+5	; 0x05
    abaa:	fe 81       	ldd	r31, Y+6	; 0x06
    abac:	e0 0f       	add	r30, r16
    abae:	f1 1f       	adc	r31, r17
    abb0:	80 81       	ld	r24, Z
    abb2:	91 81       	ldd	r25, Z+1	; 0x01
    abb4:	89 2b       	or	r24, r25
    abb6:	71 f1       	breq	.+92     	; 0xac14 <dir_find+0x20a>
    abb8:	2b c0       	rjmp	.+86     	; 0xac10 <dir_find+0x206>
    abba:	11 11       	cpse	r17, r1
    abbc:	05 c0       	rjmp	.+10     	; 0xabc8 <dir_find+0x1be>
    abbe:	c7 01       	movw	r24, r14
    abc0:	0e 94 ae 48 	call	0x915c	; 0x915c <sum_sfn>
    abc4:	08 17       	cp	r16, r24
    abc6:	09 f1       	breq	.+66     	; 0xac0a <dir_find+0x200>
    abc8:	eb 85       	ldd	r30, Y+11	; 0x0b
    abca:	fc 85       	ldd	r31, Y+12	; 0x0c
    abcc:	87 a1       	ldd	r24, Z+39	; 0x27
    abce:	80 fd       	sbrc	r24, 0
    abd0:	09 c0       	rjmp	.+18     	; 0xabe4 <dir_find+0x1da>
    abd2:	4b e0       	ldi	r20, 0x0B	; 11
    abd4:	50 e0       	ldi	r21, 0x00	; 0
    abd6:	69 85       	ldd	r22, Y+9	; 0x09
    abd8:	7a 85       	ldd	r23, Y+10	; 0x0a
    abda:	c7 01       	movw	r24, r14
    abdc:	0e 94 3b 48 	call	0x9076	; 0x9076 <mem_cmp>
    abe0:	89 2b       	or	r24, r25
    abe2:	99 f0       	breq	.+38     	; 0xac0a <dir_find+0x200>
    abe4:	eb 85       	ldd	r30, Y+11	; 0x0b
    abe6:	fc 85       	ldd	r31, Y+12	; 0x0c
    abe8:	40 a6       	std	Z+40, r4	; 0x28
    abea:	51 a6       	std	Z+41, r5	; 0x29
    abec:	62 a6       	std	Z+42, r6	; 0x2a
    abee:	73 a6       	std	Z+43, r7	; 0x2b
    abf0:	1f ef       	ldi	r17, 0xFF	; 255
    abf2:	60 e0       	ldi	r22, 0x00	; 0
    abf4:	70 e0       	ldi	r23, 0x00	; 0
    abf6:	8b 85       	ldd	r24, Y+11	; 0x0b
    abf8:	9c 85       	ldd	r25, Y+12	; 0x0c
    abfa:	d5 dc       	rcall	.-1622   	; 0xa5a6 <dir_next>
    abfc:	00 97       	sbiw	r24, 0x00	; 0
    abfe:	09 f4       	brne	.+2      	; 0xac02 <dir_find+0x1f8>
    ac00:	2b cf       	rjmp	.-426    	; 0xaa58 <dir_find+0x4e>
    ac02:	28 2f       	mov	r18, r24
    ac04:	0b c0       	rjmp	.+22     	; 0xac1c <dir_find+0x212>
    ac06:	24 e0       	ldi	r18, 0x04	; 4
    ac08:	01 c0       	rjmp	.+2      	; 0xac0c <dir_find+0x202>
    ac0a:	20 e0       	ldi	r18, 0x00	; 0
    ac0c:	90 e0       	ldi	r25, 0x00	; 0
    ac0e:	06 c0       	rjmp	.+12     	; 0xac1c <dir_find+0x212>
    ac10:	0c 2d       	mov	r16, r12
    ac12:	ee cf       	rjmp	.-36     	; 0xabf0 <dir_find+0x1e6>
    ac14:	1f ef       	ldi	r17, 0xFF	; 255
    ac16:	1d 0d       	add	r17, r13
    ac18:	0c 2d       	mov	r16, r12
    ac1a:	eb cf       	rjmp	.-42     	; 0xabf2 <dir_find+0x1e8>
    ac1c:	82 2f       	mov	r24, r18
    ac1e:	2c 96       	adiw	r28, 0x0c	; 12
    ac20:	e2 e1       	ldi	r30, 0x12	; 18
    ac22:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

0000ac26 <dir_register>:
    ac26:	a6 e1       	ldi	r26, 0x16	; 22
    ac28:	b0 e0       	ldi	r27, 0x00	; 0
    ac2a:	e9 e1       	ldi	r30, 0x19	; 25
    ac2c:	f6 e5       	ldi	r31, 0x56	; 86
    ac2e:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
    ac32:	fc 01       	movw	r30, r24
    ac34:	27 a1       	ldd	r18, Z+39	; 0x27
    ac36:	20 7a       	andi	r18, 0xA0	; 160
    ac38:	09 f0       	breq	.+2      	; 0xac3c <dir_register+0x16>
    ac3a:	53 c1       	rjmp	.+678    	; 0xaee2 <dir_register+0x2bc>
    ac3c:	c0 80       	ld	r12, Z
    ac3e:	d1 80       	ldd	r13, Z+1	; 0x01
    ac40:	f6 01       	movw	r30, r12
    ac42:	a3 85       	ldd	r26, Z+11	; 0x0b
    ac44:	b4 85       	ldd	r27, Z+12	; 0x0c
    ac46:	81 2c       	mov	r8, r1
    ac48:	91 2c       	mov	r9, r1
    ac4a:	2d 91       	ld	r18, X+
    ac4c:	3d 91       	ld	r19, X+
    ac4e:	23 2b       	or	r18, r19
    ac50:	21 f0       	breq	.+8      	; 0xac5a <dir_register+0x34>
    ac52:	ff ef       	ldi	r31, 0xFF	; 255
    ac54:	8f 1a       	sub	r8, r31
    ac56:	9f 0a       	sbc	r9, r31
    ac58:	f8 cf       	rjmp	.-16     	; 0xac4a <dir_register+0x24>
    ac5a:	8c 01       	movw	r16, r24
    ac5c:	5c 01       	movw	r10, r24
    ac5e:	2c e1       	ldi	r18, 0x1C	; 28
    ac60:	a2 0e       	add	r10, r18
    ac62:	b1 1c       	adc	r11, r1
    ac64:	4c e0       	ldi	r20, 0x0C	; 12
    ac66:	50 e0       	ldi	r21, 0x00	; 0
    ac68:	b5 01       	movw	r22, r10
    ac6a:	ce 01       	movw	r24, r28
    ac6c:	01 96       	adiw	r24, 0x01	; 1
    ac6e:	0e 94 3f 4a 	call	0x947e	; 0x947e <mem_cpy.part.0>
    ac72:	8c 85       	ldd	r24, Y+12	; 0x0c
    ac74:	80 ff       	sbrs	r24, 0
    ac76:	94 c0       	rjmp	.+296    	; 0xada0 <dir_register+0x17a>
    ac78:	80 e4       	ldi	r24, 0x40	; 64
    ac7a:	f8 01       	movw	r30, r16
    ac7c:	87 a3       	std	Z+39, r24	; 0x27
    ac7e:	41 2c       	mov	r4, r1
    ac80:	51 2c       	mov	r5, r1
    ac82:	32 01       	movw	r6, r4
    ac84:	43 94       	inc	r4
    ac86:	72 01       	movw	r14, r4
    ac88:	f6 01       	movw	r30, r12
    ac8a:	23 84       	ldd	r2, Z+11	; 0x0b
    ac8c:	34 84       	ldd	r3, Z+12	; 0x0c
    ac8e:	4b e0       	ldi	r20, 0x0B	; 11
    ac90:	50 e0       	ldi	r21, 0x00	; 0
    ac92:	be 01       	movw	r22, r28
    ac94:	6f 5f       	subi	r22, 0xFF	; 255
    ac96:	7f 4f       	sbci	r23, 0xFF	; 255
    ac98:	c5 01       	movw	r24, r10
    ac9a:	0e 94 3f 4a 	call	0x947e	; 0x947e <mem_cpy.part.0>
    ac9e:	f6 e0       	ldi	r31, 0x06	; 6
    aca0:	4f 16       	cp	r4, r31
    aca2:	51 04       	cpc	r5, r1
    aca4:	18 f1       	brcs	.+70     	; 0xacec <dir_register+0xc6>
    aca6:	f1 01       	movw	r30, r2
    aca8:	b3 01       	movw	r22, r6
    acaa:	a2 01       	movw	r20, r4
    acac:	81 91       	ld	r24, Z+
    acae:	91 91       	ld	r25, Z+
    acb0:	00 97       	sbiw	r24, 0x00	; 0
    acb2:	d9 f0       	breq	.+54     	; 0xacea <dir_register+0xc4>
    acb4:	20 e1       	ldi	r18, 0x10	; 16
    acb6:	30 e0       	ldi	r19, 0x00	; 0
    acb8:	44 0f       	add	r20, r20
    acba:	55 1f       	adc	r21, r21
    acbc:	66 1f       	adc	r22, r22
    acbe:	77 1f       	adc	r23, r23
    acc0:	dc 01       	movw	r26, r24
    acc2:	a1 70       	andi	r26, 0x01	; 1
    acc4:	bb 27       	eor	r27, r27
    acc6:	4a 0f       	add	r20, r26
    acc8:	5b 1f       	adc	r21, r27
    acca:	61 1d       	adc	r22, r1
    accc:	71 1d       	adc	r23, r1
    acce:	96 95       	lsr	r25
    acd0:	87 95       	ror	r24
    acd2:	60 ff       	sbrs	r22, 0
    acd4:	06 c0       	rjmp	.+12     	; 0xace2 <dir_register+0xbc>
    acd6:	a1 e2       	ldi	r26, 0x21	; 33
    acd8:	4a 27       	eor	r20, r26
    acda:	a0 e1       	ldi	r26, 0x10	; 16
    acdc:	5a 27       	eor	r21, r26
    acde:	a1 e0       	ldi	r26, 0x01	; 1
    ace0:	6a 27       	eor	r22, r26
    ace2:	21 50       	subi	r18, 0x01	; 1
    ace4:	31 09       	sbc	r19, r1
    ace6:	41 f7       	brne	.-48     	; 0xacb8 <dir_register+0x92>
    ace8:	e1 cf       	rjmp	.-62     	; 0xacac <dir_register+0x86>
    acea:	7a 01       	movw	r14, r20
    acec:	fe 01       	movw	r30, r28
    acee:	75 96       	adiw	r30, 0x15	; 21
    acf0:	27 e0       	ldi	r18, 0x07	; 7
    acf2:	30 e0       	ldi	r19, 0x00	; 0
    acf4:	9e 2d       	mov	r25, r14
    acf6:	9f 70       	andi	r25, 0x0F	; 15
    acf8:	80 e3       	ldi	r24, 0x30	; 48
    acfa:	89 0f       	add	r24, r25
    acfc:	8a 33       	cpi	r24, 0x3A	; 58
    acfe:	10 f0       	brcs	.+4      	; 0xad04 <dir_register+0xde>
    ad00:	87 e3       	ldi	r24, 0x37	; 55
    ad02:	89 0f       	add	r24, r25
    ad04:	21 50       	subi	r18, 0x01	; 1
    ad06:	31 09       	sbc	r19, r1
    ad08:	82 93       	st	-Z, r24
    ad0a:	a4 e0       	ldi	r26, 0x04	; 4
    ad0c:	f6 94       	lsr	r15
    ad0e:	e7 94       	ror	r14
    ad10:	aa 95       	dec	r26
    ad12:	e1 f7       	brne	.-8      	; 0xad0c <dir_register+0xe6>
    ad14:	e1 14       	cp	r14, r1
    ad16:	f1 04       	cpc	r15, r1
    ad18:	69 f7       	brne	.-38     	; 0xacf4 <dir_register+0xce>
    ad1a:	ed e0       	ldi	r30, 0x0D	; 13
    ad1c:	f0 e0       	ldi	r31, 0x00	; 0
    ad1e:	ec 0f       	add	r30, r28
    ad20:	fd 1f       	adc	r31, r29
    ad22:	e2 0f       	add	r30, r18
    ad24:	f3 1f       	adc	r31, r19
    ad26:	4e e7       	ldi	r20, 0x7E	; 126
    ad28:	40 83       	st	Z, r20
    ad2a:	f5 01       	movw	r30, r10
    ad2c:	80 e0       	ldi	r24, 0x00	; 0
    ad2e:	90 e0       	ldi	r25, 0x00	; 0
    ad30:	28 17       	cp	r18, r24
    ad32:	39 07       	cpc	r19, r25
    ad34:	29 f0       	breq	.+10     	; 0xad40 <dir_register+0x11a>
    ad36:	41 91       	ld	r20, Z+
    ad38:	40 32       	cpi	r20, 0x20	; 32
    ad3a:	11 f0       	breq	.+4      	; 0xad40 <dir_register+0x11a>
    ad3c:	01 96       	adiw	r24, 0x01	; 1
    ad3e:	f8 cf       	rjmp	.-16     	; 0xad30 <dir_register+0x10a>
    ad40:	f5 01       	movw	r30, r10
    ad42:	e8 0f       	add	r30, r24
    ad44:	f9 1f       	adc	r31, r25
    ad46:	28 30       	cpi	r18, 0x08	; 8
    ad48:	31 05       	cpc	r19, r1
    ad4a:	50 f4       	brcc	.+20     	; 0xad60 <dir_register+0x13a>
    ad4c:	ad e0       	ldi	r26, 0x0D	; 13
    ad4e:	b0 e0       	ldi	r27, 0x00	; 0
    ad50:	ac 0f       	add	r26, r28
    ad52:	bd 1f       	adc	r27, r29
    ad54:	a2 0f       	add	r26, r18
    ad56:	b3 1f       	adc	r27, r19
    ad58:	8c 91       	ld	r24, X
    ad5a:	2f 5f       	subi	r18, 0xFF	; 255
    ad5c:	3f 4f       	sbci	r19, 0xFF	; 255
    ad5e:	01 c0       	rjmp	.+2      	; 0xad62 <dir_register+0x13c>
    ad60:	80 e2       	ldi	r24, 0x20	; 32
    ad62:	81 93       	st	Z+, r24
    ad64:	cf 01       	movw	r24, r30
    ad66:	8a 19       	sub	r24, r10
    ad68:	9b 09       	sbc	r25, r11
    ad6a:	08 97       	sbiw	r24, 0x08	; 8
    ad6c:	60 f3       	brcs	.-40     	; 0xad46 <dir_register+0x120>
    ad6e:	c8 01       	movw	r24, r16
    ad70:	4c de       	rcall	.-872    	; 0xaa0a <dir_find>
    ad72:	00 97       	sbiw	r24, 0x00	; 0
    ad74:	71 f4       	brne	.+28     	; 0xad92 <dir_register+0x16c>
    ad76:	8f ef       	ldi	r24, 0xFF	; 255
    ad78:	48 1a       	sub	r4, r24
    ad7a:	58 0a       	sbc	r5, r24
    ad7c:	68 0a       	sbc	r6, r24
    ad7e:	78 0a       	sbc	r7, r24
    ad80:	94 e6       	ldi	r25, 0x64	; 100
    ad82:	49 16       	cp	r4, r25
    ad84:	51 04       	cpc	r5, r1
    ad86:	61 04       	cpc	r6, r1
    ad88:	71 04       	cpc	r7, r1
    ad8a:	09 f0       	breq	.+2      	; 0xad8e <dir_register+0x168>
    ad8c:	7c cf       	rjmp	.-264    	; 0xac86 <dir_register+0x60>
    ad8e:	27 e0       	ldi	r18, 0x07	; 7
    ad90:	a9 c0       	rjmp	.+338    	; 0xaee4 <dir_register+0x2be>
    ad92:	84 30       	cpi	r24, 0x04	; 4
    ad94:	91 05       	cpc	r25, r1
    ad96:	09 f0       	breq	.+2      	; 0xad9a <dir_register+0x174>
    ad98:	ce c0       	rjmp	.+412    	; 0xaf36 <dir_register+0x310>
    ad9a:	8c 85       	ldd	r24, Y+12	; 0x0c
    ad9c:	f8 01       	movw	r30, r16
    ad9e:	87 a3       	std	Z+39, r24	; 0x27
    ada0:	8c 85       	ldd	r24, Y+12	; 0x0c
    ada2:	81 ff       	sbrs	r24, 1
    ada4:	0b c0       	rjmp	.+22     	; 0xadbc <dir_register+0x196>
    ada6:	c4 01       	movw	r24, r8
    ada8:	0c 96       	adiw	r24, 0x0c	; 12
    adaa:	6d e0       	ldi	r22, 0x0D	; 13
    adac:	70 e0       	ldi	r23, 0x00	; 0
    adae:	0e 94 ff e6 	call	0x1cdfe	; 0x1cdfe <__udivmodhi4>
    adb2:	7b 01       	movw	r14, r22
    adb4:	ff ef       	ldi	r31, 0xFF	; 255
    adb6:	ef 1a       	sub	r14, r31
    adb8:	ff 0a       	sbc	r15, r31
    adba:	03 c0       	rjmp	.+6      	; 0xadc2 <dir_register+0x19c>
    adbc:	ee 24       	eor	r14, r14
    adbe:	e3 94       	inc	r14
    adc0:	f1 2c       	mov	r15, r1
    adc2:	b7 01       	movw	r22, r14
    adc4:	c8 01       	movw	r24, r16
    adc6:	d7 dc       	rcall	.-1618   	; 0xa776 <dir_alloc>
    adc8:	00 97       	sbiw	r24, 0x00	; 0
    adca:	09 f0       	breq	.+2      	; 0xadce <dir_register+0x1a8>
    adcc:	b4 c0       	rjmp	.+360    	; 0xaf36 <dir_register+0x310>
    adce:	21 e0       	ldi	r18, 0x01	; 1
    add0:	e2 1a       	sub	r14, r18
    add2:	f1 08       	sbc	r15, r1
    add4:	09 f4       	brne	.+2      	; 0xadd8 <dir_register+0x1b2>
    add6:	88 c0       	rjmp	.+272    	; 0xaee8 <dir_register+0x2c2>
    add8:	f8 01       	movw	r30, r16
    adda:	46 85       	ldd	r20, Z+14	; 0x0e
    addc:	57 85       	ldd	r21, Z+15	; 0x0f
    adde:	60 89       	ldd	r22, Z+16	; 0x10
    ade0:	71 89       	ldd	r23, Z+17	; 0x11
    ade2:	c7 01       	movw	r24, r14
    ade4:	e5 e0       	ldi	r30, 0x05	; 5
    ade6:	88 0f       	add	r24, r24
    ade8:	99 1f       	adc	r25, r25
    adea:	ea 95       	dec	r30
    adec:	e1 f7       	brne	.-8      	; 0xade6 <dir_register+0x1c0>
    adee:	48 1b       	sub	r20, r24
    adf0:	59 0b       	sbc	r21, r25
    adf2:	61 09       	sbc	r22, r1
    adf4:	71 09       	sbc	r23, r1
    adf6:	c8 01       	movw	r24, r16
    adf8:	5e d9       	rcall	.-3396   	; 0xa0b6 <dir_sdi>
    adfa:	00 97       	sbiw	r24, 0x00	; 0
    adfc:	09 f0       	breq	.+2      	; 0xae00 <dir_register+0x1da>
    adfe:	9b c0       	rjmp	.+310    	; 0xaf36 <dir_register+0x310>
    ae00:	c5 01       	movw	r24, r10
    ae02:	0e 94 ae 48 	call	0x915c	; 0x915c <sum_sfn>
    ae06:	68 2e       	mov	r6, r24
    ae08:	5f e0       	ldi	r21, 0x0F	; 15
    ae0a:	35 2e       	mov	r3, r21
    ae0c:	6d e0       	ldi	r22, 0x0D	; 13
    ae0e:	46 2e       	mov	r4, r22
    ae10:	78 ef       	ldi	r23, 0xF8	; 248
    ae12:	87 2e       	mov	r8, r23
    ae14:	74 e0       	ldi	r23, 0x04	; 4
    ae16:	97 2e       	mov	r9, r23
    ae18:	55 24       	eor	r5, r5
    ae1a:	53 94       	inc	r5
    ae1c:	f8 01       	movw	r30, r16
    ae1e:	46 89       	ldd	r20, Z+22	; 0x16
    ae20:	57 89       	ldd	r21, Z+23	; 0x17
    ae22:	60 8d       	ldd	r22, Z+24	; 0x18
    ae24:	71 8d       	ldd	r23, Z+25	; 0x19
    ae26:	c6 01       	movw	r24, r12
    ae28:	0e 94 d9 4b 	call	0x97b2	; 0x97b2 <move_window>
    ae2c:	00 97       	sbiw	r24, 0x00	; 0
    ae2e:	09 f0       	breq	.+2      	; 0xae32 <dir_register+0x20c>
    ae30:	82 c0       	rjmp	.+260    	; 0xaf36 <dir_register+0x310>
    ae32:	f6 01       	movw	r30, r12
    ae34:	63 85       	ldd	r22, Z+11	; 0x0b
    ae36:	74 85       	ldd	r23, Z+12	; 0x0c
    ae38:	f8 01       	movw	r30, r16
    ae3a:	02 8c       	ldd	r0, Z+26	; 0x1a
    ae3c:	f3 8d       	ldd	r31, Z+27	; 0x1b
    ae3e:	e0 2d       	mov	r30, r0
    ae40:	fe 8b       	std	Y+22, r31	; 0x16
    ae42:	ed 8b       	std	Y+21, r30	; 0x15
    ae44:	7e 2c       	mov	r7, r14
    ae46:	65 86       	std	Z+13, r6	; 0x0d
    ae48:	33 86       	std	Z+11, r3	; 0x0b
    ae4a:	14 86       	std	Z+12, r1	; 0x0c
    ae4c:	12 8e       	std	Z+26, r1	; 0x1a
    ae4e:	13 8e       	std	Z+27, r1	; 0x1b
    ae50:	97 01       	movw	r18, r14
    ae52:	33 27       	eor	r19, r19
    ae54:	21 50       	subi	r18, 0x01	; 1
    ae56:	31 09       	sbc	r19, r1
    ae58:	42 9e       	mul	r4, r18
    ae5a:	c0 01       	movw	r24, r0
    ae5c:	43 9e       	mul	r4, r19
    ae5e:	90 0d       	add	r25, r0
    ae60:	11 24       	eor	r1, r1
    ae62:	ab ee       	ldi	r26, 0xEB	; 235
    ae64:	b4 e0       	ldi	r27, 0x04	; 4
    ae66:	20 e0       	ldi	r18, 0x00	; 0
    ae68:	30 e0       	ldi	r19, 0x00	; 0
    ae6a:	2f 3f       	cpi	r18, 0xFF	; 255
    ae6c:	ff ef       	ldi	r31, 0xFF	; 255
    ae6e:	3f 07       	cpc	r19, r31
    ae70:	49 f0       	breq	.+18     	; 0xae84 <dir_register+0x25e>
    ae72:	9c 01       	movw	r18, r24
    ae74:	22 0f       	add	r18, r18
    ae76:	33 1f       	adc	r19, r19
    ae78:	26 0f       	add	r18, r22
    ae7a:	37 1f       	adc	r19, r23
    ae7c:	f9 01       	movw	r30, r18
    ae7e:	20 81       	ld	r18, Z
    ae80:	31 81       	ldd	r19, Z+1	; 0x01
    ae82:	01 96       	adiw	r24, 0x01	; 1
    ae84:	4d 91       	ld	r20, X+
    ae86:	ed 89       	ldd	r30, Y+21	; 0x15
    ae88:	fe 89       	ldd	r31, Y+22	; 0x16
    ae8a:	e4 0f       	add	r30, r20
    ae8c:	f1 1d       	adc	r31, r1
    ae8e:	20 83       	st	Z, r18
    ae90:	31 83       	std	Z+1, r19	; 0x01
    ae92:	21 15       	cp	r18, r1
    ae94:	31 05       	cpc	r19, r1
    ae96:	11 f4       	brne	.+4      	; 0xae9c <dir_register+0x276>
    ae98:	2f ef       	ldi	r18, 0xFF	; 255
    ae9a:	3f ef       	ldi	r19, 0xFF	; 255
    ae9c:	8a 16       	cp	r8, r26
    ae9e:	9b 06       	cpc	r9, r27
    aea0:	21 f7       	brne	.-56     	; 0xae6a <dir_register+0x244>
    aea2:	2f 3f       	cpi	r18, 0xFF	; 255
    aea4:	3f 4f       	sbci	r19, 0xFF	; 255
    aea6:	49 f0       	breq	.+18     	; 0xaeba <dir_register+0x294>
    aea8:	88 0f       	add	r24, r24
    aeaa:	99 1f       	adc	r25, r25
    aeac:	db 01       	movw	r26, r22
    aeae:	a8 0f       	add	r26, r24
    aeb0:	b9 1f       	adc	r27, r25
    aeb2:	8d 91       	ld	r24, X+
    aeb4:	9c 91       	ld	r25, X
    aeb6:	89 2b       	or	r24, r25
    aeb8:	19 f4       	brne	.+6      	; 0xaec0 <dir_register+0x29a>
    aeba:	27 2d       	mov	r18, r7
    aebc:	20 64       	ori	r18, 0x40	; 64
    aebe:	72 2e       	mov	r7, r18
    aec0:	ed 89       	ldd	r30, Y+21	; 0x15
    aec2:	fe 89       	ldd	r31, Y+22	; 0x16
    aec4:	70 82       	st	Z, r7
    aec6:	f6 01       	movw	r30, r12
    aec8:	53 82       	std	Z+3, r5	; 0x03
    aeca:	60 e0       	ldi	r22, 0x00	; 0
    aecc:	70 e0       	ldi	r23, 0x00	; 0
    aece:	c8 01       	movw	r24, r16
    aed0:	6a db       	rcall	.-2348   	; 0xa5a6 <dir_next>
    aed2:	00 97       	sbiw	r24, 0x00	; 0
    aed4:	81 f5       	brne	.+96     	; 0xaf36 <dir_register+0x310>
    aed6:	f1 e0       	ldi	r31, 0x01	; 1
    aed8:	ef 1a       	sub	r14, r31
    aeda:	f1 08       	sbc	r15, r1
    aedc:	09 f0       	breq	.+2      	; 0xaee0 <dir_register+0x2ba>
    aede:	9e cf       	rjmp	.-196    	; 0xae1c <dir_register+0x1f6>
    aee0:	03 c0       	rjmp	.+6      	; 0xaee8 <dir_register+0x2c2>
    aee2:	26 e0       	ldi	r18, 0x06	; 6
    aee4:	90 e0       	ldi	r25, 0x00	; 0
    aee6:	28 c0       	rjmp	.+80     	; 0xaf38 <dir_register+0x312>
    aee8:	f8 01       	movw	r30, r16
    aeea:	46 89       	ldd	r20, Z+22	; 0x16
    aeec:	57 89       	ldd	r21, Z+23	; 0x17
    aeee:	60 8d       	ldd	r22, Z+24	; 0x18
    aef0:	71 8d       	ldd	r23, Z+25	; 0x19
    aef2:	c6 01       	movw	r24, r12
    aef4:	0e 94 d9 4b 	call	0x97b2	; 0x97b2 <move_window>
    aef8:	00 97       	sbiw	r24, 0x00	; 0
    aefa:	e9 f4       	brne	.+58     	; 0xaf36 <dir_register+0x310>
    aefc:	40 e2       	ldi	r20, 0x20	; 32
    aefe:	50 e0       	ldi	r21, 0x00	; 0
    af00:	60 e0       	ldi	r22, 0x00	; 0
    af02:	70 e0       	ldi	r23, 0x00	; 0
    af04:	f8 01       	movw	r30, r16
    af06:	82 8d       	ldd	r24, Z+26	; 0x1a
    af08:	93 8d       	ldd	r25, Z+27	; 0x1b
    af0a:	0e 94 32 48 	call	0x9064	; 0x9064 <mem_set>
    af0e:	4b e0       	ldi	r20, 0x0B	; 11
    af10:	50 e0       	ldi	r21, 0x00	; 0
    af12:	b5 01       	movw	r22, r10
    af14:	f8 01       	movw	r30, r16
    af16:	82 8d       	ldd	r24, Z+26	; 0x1a
    af18:	93 8d       	ldd	r25, Z+27	; 0x1b
    af1a:	0e 94 3f 4a 	call	0x947e	; 0x947e <mem_cpy.part.0>
    af1e:	f8 01       	movw	r30, r16
    af20:	22 8d       	ldd	r18, Z+26	; 0x1a
    af22:	33 8d       	ldd	r19, Z+27	; 0x1b
    af24:	87 a1       	ldd	r24, Z+39	; 0x27
    af26:	88 71       	andi	r24, 0x18	; 24
    af28:	f9 01       	movw	r30, r18
    af2a:	84 87       	std	Z+12, r24	; 0x0c
    af2c:	81 e0       	ldi	r24, 0x01	; 1
    af2e:	f6 01       	movw	r30, r12
    af30:	83 83       	std	Z+3, r24	; 0x03
    af32:	20 e0       	ldi	r18, 0x00	; 0
    af34:	d7 cf       	rjmp	.-82     	; 0xaee4 <dir_register+0x2be>
    af36:	28 2f       	mov	r18, r24
    af38:	82 2f       	mov	r24, r18
    af3a:	66 96       	adiw	r28, 0x16	; 22
    af3c:	e2 e1       	ldi	r30, 0x12	; 18
    af3e:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

0000af42 <follow_path>:
    af42:	a8 e0       	ldi	r26, 0x08	; 8
    af44:	b0 e0       	ldi	r27, 0x00	; 0
    af46:	e7 ea       	ldi	r30, 0xA7	; 167
    af48:	f7 e5       	ldi	r31, 0x57	; 87
    af4a:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
    af4e:	8c 01       	movw	r16, r24
    af50:	78 87       	std	Y+8, r23	; 0x08
    af52:	6f 83       	std	Y+7, r22	; 0x07
    af54:	dc 01       	movw	r26, r24
    af56:	0d 90       	ld	r0, X+
    af58:	bc 91       	ld	r27, X
    af5a:	a0 2d       	mov	r26, r0
    af5c:	ba 83       	std	Y+2, r27	; 0x02
    af5e:	a9 83       	std	Y+1, r26	; 0x01
    af60:	fb 01       	movw	r30, r22
    af62:	80 81       	ld	r24, Z
    af64:	8f 32       	cpi	r24, 0x2F	; 47
    af66:	11 f0       	breq	.+4      	; 0xaf6c <follow_path+0x2a>
    af68:	8c 35       	cpi	r24, 0x5C	; 92
    af6a:	19 f4       	brne	.+6      	; 0xaf72 <follow_path+0x30>
    af6c:	2f 81       	ldd	r18, Y+7	; 0x07
    af6e:	38 85       	ldd	r19, Y+8	; 0x08
    af70:	0c c0       	rjmp	.+24     	; 0xaf8a <follow_path+0x48>
    af72:	e9 81       	ldd	r30, Y+1	; 0x01
    af74:	fa 81       	ldd	r31, Y+2	; 0x02
    af76:	85 89       	ldd	r24, Z+21	; 0x15
    af78:	96 89       	ldd	r25, Z+22	; 0x16
    af7a:	a7 89       	ldd	r26, Z+23	; 0x17
    af7c:	b0 8d       	ldd	r27, Z+24	; 0x18
    af7e:	f8 01       	movw	r30, r16
    af80:	86 83       	std	Z+6, r24	; 0x06
    af82:	97 83       	std	Z+7, r25	; 0x07
    af84:	a0 87       	std	Z+8, r26	; 0x08
    af86:	b1 87       	std	Z+9, r27	; 0x09
    af88:	0f c0       	rjmp	.+30     	; 0xafa8 <follow_path+0x66>
    af8a:	38 87       	std	Y+8, r19	; 0x08
    af8c:	2f 83       	std	Y+7, r18	; 0x07
    af8e:	d9 01       	movw	r26, r18
    af90:	8c 91       	ld	r24, X
    af92:	2f 5f       	subi	r18, 0xFF	; 255
    af94:	3f 4f       	sbci	r19, 0xFF	; 255
    af96:	8f 32       	cpi	r24, 0x2F	; 47
    af98:	c1 f3       	breq	.-16     	; 0xaf8a <follow_path+0x48>
    af9a:	8c 35       	cpi	r24, 0x5C	; 92
    af9c:	b1 f3       	breq	.-20     	; 0xaf8a <follow_path+0x48>
    af9e:	f8 01       	movw	r30, r16
    afa0:	16 82       	std	Z+6, r1	; 0x06
    afa2:	17 82       	std	Z+7, r1	; 0x07
    afa4:	10 86       	std	Z+8, r1	; 0x08
    afa6:	11 86       	std	Z+9, r1	; 0x09
    afa8:	af 81       	ldd	r26, Y+7	; 0x07
    afaa:	b8 85       	ldd	r27, Y+8	; 0x08
    afac:	8c 91       	ld	r24, X
    afae:	80 32       	cpi	r24, 0x20	; 32
    afb0:	58 f0       	brcs	.+22     	; 0xafc8 <follow_path+0x86>
    afb2:	f8 01       	movw	r30, r16
    afb4:	7c 96       	adiw	r30, 0x1c	; 28
    afb6:	fc 83       	std	Y+4, r31	; 0x04
    afb8:	eb 83       	std	Y+3, r30	; 0x03
    afba:	29 81       	ldd	r18, Y+1	; 0x01
    afbc:	3a 81       	ldd	r19, Y+2	; 0x02
    afbe:	2b 5c       	subi	r18, 0xCB	; 203
    afc0:	3f 4f       	sbci	r19, 0xFF	; 255
    afc2:	3e 83       	std	Y+6, r19	; 0x06
    afc4:	2d 83       	std	Y+5, r18	; 0x05
    afc6:	76 c0       	rjmp	.+236    	; 0xb0b4 <follow_path+0x172>
    afc8:	80 e8       	ldi	r24, 0x80	; 128
    afca:	f8 01       	movw	r30, r16
    afcc:	87 a3       	std	Z+39, r24	; 0x27
    afce:	40 e0       	ldi	r20, 0x00	; 0
    afd0:	50 e0       	ldi	r21, 0x00	; 0
    afd2:	ba 01       	movw	r22, r20
    afd4:	c8 01       	movw	r24, r16
    afd6:	6f d8       	rcall	.-3874   	; 0xa0b6 <dir_sdi>
    afd8:	ec c1       	rjmp	.+984    	; 0xb3b2 <follow_path+0x470>
    afda:	65 eb       	ldi	r22, 0xB5	; 181
    afdc:	71 e0       	ldi	r23, 0x01	; 1
    afde:	0e 94 88 69 	call	0xd310	; 0xd310 <ff_oem2uni>
    afe2:	00 97       	sbiw	r24, 0x00	; 0
    afe4:	09 f4       	brne	.+2      	; 0xafe8 <follow_path+0xa6>
    afe6:	b8 c1       	rjmp	.+880    	; 0xb358 <follow_path+0x416>
    afe8:	80 32       	cpi	r24, 0x20	; 32
    afea:	91 05       	cpc	r25, r1
    afec:	30 f1       	brcs	.+76     	; 0xb03a <follow_path+0xf8>
    afee:	8f 32       	cpi	r24, 0x2F	; 47
    aff0:	91 05       	cpc	r25, r1
    aff2:	09 f4       	brne	.+2      	; 0xaff6 <follow_path+0xb4>
    aff4:	6b c0       	rjmp	.+214    	; 0xb0cc <follow_path+0x18a>
    aff6:	8c 35       	cpi	r24, 0x5C	; 92
    aff8:	91 05       	cpc	r25, r1
    affa:	09 f4       	brne	.+2      	; 0xaffe <follow_path+0xbc>
    affc:	67 c0       	rjmp	.+206    	; 0xb0cc <follow_path+0x18a>
    affe:	80 38       	cpi	r24, 0x80	; 128
    b000:	91 05       	cpc	r25, r1
    b002:	28 f4       	brcc	.+10     	; 0xb00e <follow_path+0xcc>
    b004:	e7 e2       	ldi	r30, 0x27	; 39
    b006:	f4 e0       	ldi	r31, 0x04	; 4
    b008:	21 91       	ld	r18, Z+
    b00a:	21 11       	cpse	r18, r1
    b00c:	61 c0       	rjmp	.+194    	; 0xb0d0 <follow_path+0x18e>
    b00e:	ef 81       	ldd	r30, Y+7	; 0x07
    b010:	f8 85       	ldd	r31, Y+8	; 0x08
    b012:	ef 3f       	cpi	r30, 0xFF	; 255
    b014:	f1 05       	cpc	r31, r1
    b016:	09 f4       	brne	.+2      	; 0xb01a <follow_path+0xd8>
    b018:	9f c1       	rjmp	.+830    	; 0xb358 <follow_path+0x416>
    b01a:	31 96       	adiw	r30, 0x01	; 1
    b01c:	f8 87       	std	Y+8, r31	; 0x08
    b01e:	ef 83       	std	Y+7, r30	; 0x07
    b020:	d6 01       	movw	r26, r12
    b022:	8d 93       	st	X+, r24
    b024:	9d 93       	st	X+, r25
    b026:	6d 01       	movw	r12, r26
    b028:	bf ef       	ldi	r27, 0xFF	; 255
    b02a:	eb 1a       	sub	r14, r27
    b02c:	fb 0a       	sbc	r15, r27
    b02e:	f7 01       	movw	r30, r14
    b030:	31 97       	sbiw	r30, 0x01	; 1
    b032:	80 81       	ld	r24, Z
    b034:	90 e0       	ldi	r25, 0x00	; 0
    b036:	00 97       	sbiw	r24, 0x00	; 0
    b038:	81 f6       	brne	.-96     	; 0xafda <follow_path+0x98>
    b03a:	74 e0       	ldi	r23, 0x04	; 4
    b03c:	37 2e       	mov	r3, r23
    b03e:	2f 81       	ldd	r18, Y+7	; 0x07
    b040:	38 85       	ldd	r19, Y+8	; 0x08
    b042:	22 0f       	add	r18, r18
    b044:	33 1f       	adc	r19, r19
    b046:	8f 81       	ldd	r24, Y+7	; 0x07
    b048:	98 85       	ldd	r25, Y+8	; 0x08
    b04a:	01 97       	sbiw	r24, 0x01	; 1
    b04c:	09 f0       	breq	.+2      	; 0xb050 <follow_path+0x10e>
    b04e:	51 c0       	rjmp	.+162    	; 0xb0f2 <follow_path+0x1b0>
    b050:	d5 01       	movw	r26, r10
    b052:	8d 91       	ld	r24, X+
    b054:	9c 91       	ld	r25, X
    b056:	8e 97       	sbiw	r24, 0x2e	; 46
    b058:	09 f0       	breq	.+2      	; 0xb05c <follow_path+0x11a>
    b05a:	57 c0       	rjmp	.+174    	; 0xb10a <follow_path+0x1c8>
    b05c:	f9 01       	movw	r30, r18
    b05e:	ea 0d       	add	r30, r10
    b060:	fb 1d       	adc	r31, r11
    b062:	11 82       	std	Z+1, r1	; 0x01
    b064:	10 82       	st	Z, r1
    b066:	f8 01       	movw	r30, r16
    b068:	7c 96       	adiw	r30, 0x1c	; 28
    b06a:	80 e0       	ldi	r24, 0x00	; 0
    b06c:	90 e0       	ldi	r25, 0x00	; 0
    b06e:	2f 81       	ldd	r18, Y+7	; 0x07
    b070:	38 85       	ldd	r19, Y+8	; 0x08
    b072:	82 17       	cp	r24, r18
    b074:	93 07       	cpc	r25, r19
    b076:	08 f0       	brcs	.+2      	; 0xb07a <follow_path+0x138>
    b078:	4c c0       	rjmp	.+152    	; 0xb112 <follow_path+0x1d0>
    b07a:	2e e2       	ldi	r18, 0x2E	; 46
    b07c:	21 93       	st	Z+, r18
    b07e:	01 96       	adiw	r24, 0x01	; 1
    b080:	8b 30       	cpi	r24, 0x0B	; 11
    b082:	91 05       	cpc	r25, r1
    b084:	a1 f7       	brne	.-24     	; 0xb06e <follow_path+0x12c>
    b086:	83 2d       	mov	r24, r3
    b088:	80 62       	ori	r24, 0x20	; 32
    b08a:	f8 01       	movw	r30, r16
    b08c:	87 a3       	std	Z+39, r24	; 0x27
    b08e:	c8 01       	movw	r24, r16
    b090:	bc dc       	rcall	.-1672   	; 0xaa0a <dir_find>
    b092:	f8 01       	movw	r30, r16
    b094:	27 a1       	ldd	r18, Z+39	; 0x27
    b096:	00 97       	sbiw	r24, 0x00	; 0
    b098:	09 f4       	brne	.+2      	; 0xb09c <follow_path+0x15a>
    b09a:	6a c1       	rjmp	.+724    	; 0xb370 <follow_path+0x42e>
    b09c:	84 30       	cpi	r24, 0x04	; 4
    b09e:	91 05       	cpc	r25, r1
    b0a0:	09 f0       	breq	.+2      	; 0xb0a4 <follow_path+0x162>
    b0a2:	87 c1       	rjmp	.+782    	; 0xb3b2 <follow_path+0x470>
    b0a4:	32 2f       	mov	r19, r18
    b0a6:	34 70       	andi	r19, 0x04	; 4
    b0a8:	25 ff       	sbrs	r18, 5
    b0aa:	5f c1       	rjmp	.+702    	; 0xb36a <follow_path+0x428>
    b0ac:	31 11       	cpse	r19, r1
    b0ae:	57 c1       	rjmp	.+686    	; 0xb35e <follow_path+0x41c>
    b0b0:	f8 86       	std	Y+8, r15	; 0x08
    b0b2:	ef 82       	std	Y+7, r14	; 0x07
    b0b4:	d8 01       	movw	r26, r16
    b0b6:	ed 91       	ld	r30, X+
    b0b8:	fc 91       	ld	r31, X
    b0ba:	a3 84       	ldd	r10, Z+11	; 0x0b
    b0bc:	b4 84       	ldd	r11, Z+12	; 0x0c
    b0be:	45 01       	movw	r8, r10
    b0c0:	65 01       	movw	r12, r10
    b0c2:	ef 80       	ldd	r14, Y+7	; 0x07
    b0c4:	f8 84       	ldd	r15, Y+8	; 0x08
    b0c6:	18 86       	std	Y+8, r1	; 0x08
    b0c8:	1f 82       	std	Y+7, r1	; 0x07
    b0ca:	ae cf       	rjmp	.-164    	; 0xb028 <follow_path+0xe6>
    b0cc:	97 01       	movw	r18, r14
    b0ce:	06 c0       	rjmp	.+12     	; 0xb0dc <follow_path+0x19a>
    b0d0:	30 e0       	ldi	r19, 0x00	; 0
    b0d2:	82 17       	cp	r24, r18
    b0d4:	93 07       	cpc	r25, r19
    b0d6:	09 f0       	breq	.+2      	; 0xb0da <follow_path+0x198>
    b0d8:	97 cf       	rjmp	.-210    	; 0xb008 <follow_path+0xc6>
    b0da:	3e c1       	rjmp	.+636    	; 0xb358 <follow_path+0x416>
    b0dc:	79 01       	movw	r14, r18
    b0de:	f9 01       	movw	r30, r18
    b0e0:	80 81       	ld	r24, Z
    b0e2:	2f 5f       	subi	r18, 0xFF	; 255
    b0e4:	3f 4f       	sbci	r19, 0xFF	; 255
    b0e6:	8f 32       	cpi	r24, 0x2F	; 47
    b0e8:	c9 f3       	breq	.-14     	; 0xb0dc <follow_path+0x19a>
    b0ea:	8c 35       	cpi	r24, 0x5C	; 92
    b0ec:	b9 f3       	breq	.-18     	; 0xb0dc <follow_path+0x19a>
    b0ee:	31 2c       	mov	r3, r1
    b0f0:	a6 cf       	rjmp	.-180    	; 0xb03e <follow_path+0xfc>
    b0f2:	ef 81       	ldd	r30, Y+7	; 0x07
    b0f4:	f8 85       	ldd	r31, Y+8	; 0x08
    b0f6:	32 97       	sbiw	r30, 0x02	; 2
    b0f8:	41 f4       	brne	.+16     	; 0xb10a <follow_path+0x1c8>
    b0fa:	f5 01       	movw	r30, r10
    b0fc:	82 81       	ldd	r24, Z+2	; 0x02
    b0fe:	93 81       	ldd	r25, Z+3	; 0x03
    b100:	8e 97       	sbiw	r24, 0x2e	; 46
    b102:	19 f4       	brne	.+6      	; 0xb10a <follow_path+0x1c8>
    b104:	80 81       	ld	r24, Z
    b106:	91 81       	ldd	r25, Z+1	; 0x01
    b108:	a6 cf       	rjmp	.-180    	; 0xb056 <follow_path+0x114>
    b10a:	f9 01       	movw	r30, r18
    b10c:	ea 0d       	add	r30, r10
    b10e:	fb 1d       	adc	r31, r11
    b110:	0d c0       	rjmp	.+26     	; 0xb12c <follow_path+0x1ea>
    b112:	20 e2       	ldi	r18, 0x20	; 32
    b114:	b3 cf       	rjmp	.-154    	; 0xb07c <follow_path+0x13a>
    b116:	92 91       	ld	r25, -Z
    b118:	82 91       	ld	r24, -Z
    b11a:	80 32       	cpi	r24, 0x20	; 32
    b11c:	91 05       	cpc	r25, r1
    b11e:	59 f4       	brne	.+22     	; 0xb136 <follow_path+0x1f4>
    b120:	2f 81       	ldd	r18, Y+7	; 0x07
    b122:	38 85       	ldd	r19, Y+8	; 0x08
    b124:	21 50       	subi	r18, 0x01	; 1
    b126:	31 09       	sbc	r19, r1
    b128:	38 87       	std	Y+8, r19	; 0x08
    b12a:	2f 83       	std	Y+7, r18	; 0x07
    b12c:	8f 81       	ldd	r24, Y+7	; 0x07
    b12e:	98 85       	ldd	r25, Y+8	; 0x08
    b130:	89 2b       	or	r24, r25
    b132:	89 f7       	brne	.-30     	; 0xb116 <follow_path+0x1d4>
    b134:	02 c0       	rjmp	.+4      	; 0xb13a <follow_path+0x1f8>
    b136:	8e 97       	sbiw	r24, 0x2e	; 46
    b138:	99 f3       	breq	.-26     	; 0xb120 <follow_path+0x1de>
    b13a:	ef 81       	ldd	r30, Y+7	; 0x07
    b13c:	f8 85       	ldd	r31, Y+8	; 0x08
    b13e:	ee 0f       	add	r30, r30
    b140:	ff 1f       	adc	r31, r31
    b142:	ea 0d       	add	r30, r10
    b144:	fb 1d       	adc	r31, r11
    b146:	11 82       	std	Z+1, r1	; 0x01
    b148:	10 82       	st	Z, r1
    b14a:	af 81       	ldd	r26, Y+7	; 0x07
    b14c:	b8 85       	ldd	r27, Y+8	; 0x08
    b14e:	ab 2b       	or	r26, r27
    b150:	09 f4       	brne	.+2      	; 0xb154 <follow_path+0x212>
    b152:	02 c1       	rjmp	.+516    	; 0xb358 <follow_path+0x416>
    b154:	61 2c       	mov	r6, r1
    b156:	71 2c       	mov	r7, r1
    b158:	d4 01       	movw	r26, r8
    b15a:	8d 91       	ld	r24, X+
    b15c:	9d 91       	ld	r25, X+
    b15e:	4d 01       	movw	r8, r26
    b160:	80 32       	cpi	r24, 0x20	; 32
    b162:	91 05       	cpc	r25, r1
    b164:	21 f4       	brne	.+8      	; 0xb16e <follow_path+0x22c>
    b166:	bf ef       	ldi	r27, 0xFF	; 255
    b168:	6b 1a       	sub	r6, r27
    b16a:	7b 0a       	sbc	r7, r27
    b16c:	f5 cf       	rjmp	.-22     	; 0xb158 <follow_path+0x216>
    b16e:	61 14       	cp	r6, r1
    b170:	71 04       	cpc	r7, r1
    b172:	11 f4       	brne	.+4      	; 0xb178 <follow_path+0x236>
    b174:	8e 97       	sbiw	r24, 0x2e	; 46
    b176:	61 f4       	brne	.+24     	; 0xb190 <follow_path+0x24e>
    b178:	b3 2d       	mov	r27, r3
    b17a:	b3 60       	ori	r27, 0x03	; 3
    b17c:	3b 2e       	mov	r3, r27
    b17e:	08 c0       	rjmp	.+16     	; 0xb190 <follow_path+0x24e>
    b180:	2f 81       	ldd	r18, Y+7	; 0x07
    b182:	38 85       	ldd	r19, Y+8	; 0x08
    b184:	21 50       	subi	r18, 0x01	; 1
    b186:	31 09       	sbc	r19, r1
    b188:	38 87       	std	Y+8, r19	; 0x08
    b18a:	2f 83       	std	Y+7, r18	; 0x07
    b18c:	23 2b       	or	r18, r19
    b18e:	21 f0       	breq	.+8      	; 0xb198 <follow_path+0x256>
    b190:	92 91       	ld	r25, -Z
    b192:	82 91       	ld	r24, -Z
    b194:	8e 97       	sbiw	r24, 0x2e	; 46
    b196:	a1 f7       	brne	.-24     	; 0xb180 <follow_path+0x23e>
    b198:	4b e0       	ldi	r20, 0x0B	; 11
    b19a:	50 e0       	ldi	r21, 0x00	; 0
    b19c:	60 e2       	ldi	r22, 0x20	; 32
    b19e:	70 e0       	ldi	r23, 0x00	; 0
    b1a0:	8b 81       	ldd	r24, Y+3	; 0x03
    b1a2:	9c 81       	ldd	r25, Y+4	; 0x04
    b1a4:	0e 94 32 48 	call	0x9064	; 0x9064 <mem_set>
    b1a8:	48 e0       	ldi	r20, 0x08	; 8
    b1aa:	84 2e       	mov	r8, r20
    b1ac:	91 2c       	mov	r9, r1
    b1ae:	c1 2c       	mov	r12, r1
    b1b0:	d1 2c       	mov	r13, r1
    b1b2:	21 2c       	mov	r2, r1
    b1b4:	23 01       	movw	r4, r6
    b1b6:	3f ef       	ldi	r19, 0xFF	; 255
    b1b8:	43 1a       	sub	r4, r19
    b1ba:	53 0a       	sbc	r5, r19
    b1bc:	66 0c       	add	r6, r6
    b1be:	77 1c       	adc	r7, r7
    b1c0:	f5 01       	movw	r30, r10
    b1c2:	e6 0d       	add	r30, r6
    b1c4:	f7 1d       	adc	r31, r7
    b1c6:	80 81       	ld	r24, Z
    b1c8:	91 81       	ldd	r25, Z+1	; 0x01
    b1ca:	00 97       	sbiw	r24, 0x00	; 0
    b1cc:	09 f4       	brne	.+2      	; 0xb1d0 <follow_path+0x28e>
    b1ce:	9e c0       	rjmp	.+316    	; 0xb30c <follow_path+0x3ca>
    b1d0:	80 32       	cpi	r24, 0x20	; 32
    b1d2:	91 05       	cpc	r25, r1
    b1d4:	41 f0       	breq	.+16     	; 0xb1e6 <follow_path+0x2a4>
    b1d6:	8e 32       	cpi	r24, 0x2E	; 46
    b1d8:	91 05       	cpc	r25, r1
    b1da:	51 f4       	brne	.+20     	; 0xb1f0 <follow_path+0x2ae>
    b1dc:	8f 81       	ldd	r24, Y+7	; 0x07
    b1de:	98 85       	ldd	r25, Y+8	; 0x08
    b1e0:	84 15       	cp	r24, r4
    b1e2:	95 05       	cpc	r25, r5
    b1e4:	71 f0       	breq	.+28     	; 0xb202 <follow_path+0x2c0>
    b1e6:	93 2d       	mov	r25, r3
    b1e8:	93 60       	ori	r25, 0x03	; 3
    b1ea:	39 2e       	mov	r3, r25
    b1ec:	32 01       	movw	r6, r4
    b1ee:	e2 cf       	rjmp	.-60     	; 0xb1b4 <follow_path+0x272>
    b1f0:	c8 14       	cp	r12, r8
    b1f2:	d9 04       	cpc	r13, r9
    b1f4:	50 f4       	brcc	.+20     	; 0xb20a <follow_path+0x2c8>
    b1f6:	af 81       	ldd	r26, Y+7	; 0x07
    b1f8:	b8 85       	ldd	r27, Y+8	; 0x08
    b1fa:	a4 15       	cp	r26, r4
    b1fc:	b5 05       	cpc	r27, r5
    b1fe:	49 f5       	brne	.+82     	; 0xb252 <follow_path+0x310>
    b200:	d2 c0       	rjmp	.+420    	; 0xb3a6 <follow_path+0x464>
    b202:	c8 14       	cp	r12, r8
    b204:	d9 04       	cpc	r13, r9
    b206:	08 f4       	brcc	.+2      	; 0xb20a <follow_path+0x2c8>
    b208:	ce c0       	rjmp	.+412    	; 0xb3a6 <follow_path+0x464>
    b20a:	bb e0       	ldi	r27, 0x0B	; 11
    b20c:	8b 16       	cp	r8, r27
    b20e:	91 04       	cpc	r9, r1
    b210:	39 f4       	brne	.+14     	; 0xb220 <follow_path+0x2de>
    b212:	e3 2d       	mov	r30, r3
    b214:	e3 60       	ori	r30, 0x03	; 3
    b216:	3e 2e       	mov	r3, r30
    b218:	2b e0       	ldi	r18, 0x0B	; 11
    b21a:	82 2e       	mov	r8, r18
    b21c:	91 2c       	mov	r9, r1
    b21e:	76 c0       	rjmp	.+236    	; 0xb30c <follow_path+0x3ca>
    b220:	2f 81       	ldd	r18, Y+7	; 0x07
    b222:	38 85       	ldd	r19, Y+8	; 0x08
    b224:	24 15       	cp	r18, r4
    b226:	35 05       	cpc	r19, r5
    b228:	49 f0       	breq	.+18     	; 0xb23c <follow_path+0x2fa>
    b22a:	33 2d       	mov	r19, r3
    b22c:	33 60       	ori	r19, 0x03	; 3
    b22e:	33 2e       	mov	r3, r19
    b230:	8f 81       	ldd	r24, Y+7	; 0x07
    b232:	98 85       	ldd	r25, Y+8	; 0x08
    b234:	84 15       	cp	r24, r4
    b236:	95 05       	cpc	r25, r5
    b238:	08 f4       	brcc	.+2      	; 0xb23c <follow_path+0x2fa>
    b23a:	68 c0       	rjmp	.+208    	; 0xb30c <follow_path+0x3ca>
    b23c:	22 0c       	add	r2, r2
    b23e:	22 0c       	add	r2, r2
    b240:	4f 80       	ldd	r4, Y+7	; 0x07
    b242:	58 84       	ldd	r5, Y+8	; 0x08
    b244:	8b e0       	ldi	r24, 0x0B	; 11
    b246:	88 2e       	mov	r8, r24
    b248:	91 2c       	mov	r9, r1
    b24a:	98 e0       	ldi	r25, 0x08	; 8
    b24c:	c9 2e       	mov	r12, r25
    b24e:	d1 2c       	mov	r13, r1
    b250:	cd cf       	rjmp	.-102    	; 0xb1ec <follow_path+0x2aa>
    b252:	80 38       	cpi	r24, 0x80	; 128
    b254:	91 05       	cpc	r25, r1
    b256:	70 f1       	brcs	.+92     	; 0xb2b4 <follow_path+0x372>
    b258:	a3 2d       	mov	r26, r3
    b25a:	a2 60       	ori	r26, 0x02	; 2
    b25c:	7a 2e       	mov	r7, r26
    b25e:	bc 01       	movw	r22, r24
    b260:	80 e0       	ldi	r24, 0x00	; 0
    b262:	90 e0       	ldi	r25, 0x00	; 0
    b264:	45 eb       	ldi	r20, 0xB5	; 181
    b266:	51 e0       	ldi	r21, 0x01	; 1
    b268:	0e 94 55 69 	call	0xd2aa	; 0xd2aa <ff_uni2oem>
    b26c:	87 ff       	sbrs	r24, 7
    b26e:	08 c0       	rjmp	.+16     	; 0xb280 <follow_path+0x33e>
    b270:	8f 77       	andi	r24, 0x7F	; 127
    b272:	99 27       	eor	r25, r25
    b274:	fc 01       	movw	r30, r24
    b276:	e5 59       	subi	r30, 0x95	; 149
    b278:	fb 4f       	sbci	r31, 0xFB	; 251
    b27a:	80 81       	ld	r24, Z
    b27c:	90 e0       	ldi	r25, 0x00	; 0
    b27e:	17 c0       	rjmp	.+46     	; 0xb2ae <follow_path+0x36c>
    b280:	8f 3f       	cpi	r24, 0xFF	; 255
    b282:	91 05       	cpc	r25, r1
    b284:	a1 f0       	breq	.+40     	; 0xb2ae <follow_path+0x36c>
    b286:	98 f0       	brcs	.+38     	; 0xb2ae <follow_path+0x36c>
    b288:	94 01       	movw	r18, r8
    b28a:	21 50       	subi	r18, 0x01	; 1
    b28c:	31 09       	sbc	r19, r1
    b28e:	c2 16       	cp	r12, r18
    b290:	d3 06       	cpc	r13, r19
    b292:	28 f0       	brcs	.+10     	; 0xb29e <follow_path+0x35c>
    b294:	b3 2d       	mov	r27, r3
    b296:	b3 60       	ori	r27, 0x03	; 3
    b298:	3b 2e       	mov	r3, r27
    b29a:	64 01       	movw	r12, r8
    b29c:	a7 cf       	rjmp	.-178    	; 0xb1ec <follow_path+0x2aa>
    b29e:	f8 01       	movw	r30, r16
    b2a0:	ec 0d       	add	r30, r12
    b2a2:	fd 1d       	adc	r31, r13
    b2a4:	94 8f       	std	Z+28, r25	; 0x1c
    b2a6:	f6 01       	movw	r30, r12
    b2a8:	31 96       	adiw	r30, 0x01	; 1
    b2aa:	6f 01       	movw	r12, r30
    b2ac:	26 c0       	rjmp	.+76     	; 0xb2fa <follow_path+0x3b8>
    b2ae:	00 97       	sbiw	r24, 0x00	; 0
    b2b0:	59 f0       	breq	.+22     	; 0xb2c8 <follow_path+0x386>
    b2b2:	01 c0       	rjmp	.+2      	; 0xb2b6 <follow_path+0x374>
    b2b4:	73 2c       	mov	r7, r3
    b2b6:	e0 e3       	ldi	r30, 0x30	; 48
    b2b8:	f4 e0       	ldi	r31, 0x04	; 4
    b2ba:	21 91       	ld	r18, Z+
    b2bc:	22 23       	and	r18, r18
    b2be:	51 f0       	breq	.+20     	; 0xb2d4 <follow_path+0x392>
    b2c0:	30 e0       	ldi	r19, 0x00	; 0
    b2c2:	82 17       	cp	r24, r18
    b2c4:	93 07       	cpc	r25, r19
    b2c6:	c9 f7       	brne	.-14     	; 0xb2ba <follow_path+0x378>
    b2c8:	f7 2d       	mov	r31, r7
    b2ca:	f3 60       	ori	r31, 0x03	; 3
    b2cc:	7f 2e       	mov	r7, r31
    b2ce:	8f e5       	ldi	r24, 0x5F	; 95
    b2d0:	90 e0       	ldi	r25, 0x00	; 0
    b2d2:	13 c0       	rjmp	.+38     	; 0xb2fa <follow_path+0x3b8>
    b2d4:	9c 01       	movw	r18, r24
    b2d6:	21 54       	subi	r18, 0x41	; 65
    b2d8:	31 09       	sbc	r19, r1
    b2da:	2a 31       	cpi	r18, 0x1A	; 26
    b2dc:	31 05       	cpc	r19, r1
    b2de:	18 f4       	brcc	.+6      	; 0xb2e6 <follow_path+0x3a4>
    b2e0:	22 2d       	mov	r18, r2
    b2e2:	22 60       	ori	r18, 0x02	; 2
    b2e4:	22 2e       	mov	r2, r18
    b2e6:	9c 01       	movw	r18, r24
    b2e8:	21 56       	subi	r18, 0x61	; 97
    b2ea:	31 09       	sbc	r19, r1
    b2ec:	2a 31       	cpi	r18, 0x1A	; 26
    b2ee:	31 05       	cpc	r19, r1
    b2f0:	20 f4       	brcc	.+8      	; 0xb2fa <follow_path+0x3b8>
    b2f2:	32 2d       	mov	r19, r2
    b2f4:	31 60       	ori	r19, 0x01	; 1
    b2f6:	23 2e       	mov	r2, r19
    b2f8:	80 97       	sbiw	r24, 0x20	; 32
    b2fa:	f8 01       	movw	r30, r16
    b2fc:	ec 0d       	add	r30, r12
    b2fe:	fd 1d       	adc	r31, r13
    b300:	84 8f       	std	Z+28, r24	; 0x1c
    b302:	c6 01       	movw	r24, r12
    b304:	01 96       	adiw	r24, 0x01	; 1
    b306:	6c 01       	movw	r12, r24
    b308:	37 2c       	mov	r3, r7
    b30a:	70 cf       	rjmp	.-288    	; 0xb1ec <follow_path+0x2aa>
    b30c:	f8 01       	movw	r30, r16
    b30e:	84 8d       	ldd	r24, Z+28	; 0x1c
    b310:	85 3e       	cpi	r24, 0xE5	; 229
    b312:	11 f4       	brne	.+4      	; 0xb318 <follow_path+0x3d6>
    b314:	25 e0       	ldi	r18, 0x05	; 5
    b316:	24 8f       	std	Z+28, r18	; 0x1c
    b318:	38 e0       	ldi	r19, 0x08	; 8
    b31a:	83 16       	cp	r8, r19
    b31c:	91 04       	cpc	r9, r1
    b31e:	11 f4       	brne	.+4      	; 0xb324 <follow_path+0x3e2>
    b320:	22 0c       	add	r2, r2
    b322:	22 0c       	add	r2, r2
    b324:	82 2d       	mov	r24, r2
    b326:	8c 70       	andi	r24, 0x0C	; 12
    b328:	8c 30       	cpi	r24, 0x0C	; 12
    b32a:	21 f0       	breq	.+8      	; 0xb334 <follow_path+0x3f2>
    b32c:	82 2d       	mov	r24, r2
    b32e:	83 70       	andi	r24, 0x03	; 3
    b330:	83 30       	cpi	r24, 0x03	; 3
    b332:	19 f4       	brne	.+6      	; 0xb33a <follow_path+0x3f8>
    b334:	83 2d       	mov	r24, r3
    b336:	82 60       	ori	r24, 0x02	; 2
    b338:	38 2e       	mov	r3, r24
    b33a:	31 fc       	sbrc	r3, 1
    b33c:	0a c0       	rjmp	.+20     	; 0xb352 <follow_path+0x410>
    b33e:	20 fe       	sbrs	r2, 0
    b340:	03 c0       	rjmp	.+6      	; 0xb348 <follow_path+0x406>
    b342:	93 2d       	mov	r25, r3
    b344:	90 61       	ori	r25, 0x10	; 16
    b346:	39 2e       	mov	r3, r25
    b348:	22 fe       	sbrs	r2, 2
    b34a:	03 c0       	rjmp	.+6      	; 0xb352 <follow_path+0x410>
    b34c:	a3 2d       	mov	r26, r3
    b34e:	a8 60       	ori	r26, 0x08	; 8
    b350:	3a 2e       	mov	r3, r26
    b352:	f8 01       	movw	r30, r16
    b354:	37 a2       	std	Z+39, r3	; 0x27
    b356:	9b ce       	rjmp	.-714    	; 0xb08e <follow_path+0x14c>
    b358:	86 e0       	ldi	r24, 0x06	; 6
    b35a:	90 e0       	ldi	r25, 0x00	; 0
    b35c:	2a c0       	rjmp	.+84     	; 0xb3b2 <follow_path+0x470>
    b35e:	80 e8       	ldi	r24, 0x80	; 128
    b360:	f8 01       	movw	r30, r16
    b362:	87 a3       	std	Z+39, r24	; 0x27
    b364:	80 e0       	ldi	r24, 0x00	; 0
    b366:	90 e0       	ldi	r25, 0x00	; 0
    b368:	24 c0       	rjmp	.+72     	; 0xb3b2 <follow_path+0x470>
    b36a:	33 23       	and	r19, r19
    b36c:	c9 f0       	breq	.+50     	; 0xb3a0 <follow_path+0x45e>
    b36e:	21 c0       	rjmp	.+66     	; 0xb3b2 <follow_path+0x470>
    b370:	22 fd       	sbrc	r18, 2
    b372:	1f c0       	rjmp	.+62     	; 0xb3b2 <follow_path+0x470>
    b374:	f8 01       	movw	r30, r16
    b376:	84 81       	ldd	r24, Z+4	; 0x04
    b378:	84 ff       	sbrs	r24, 4
    b37a:	12 c0       	rjmp	.+36     	; 0xb3a0 <follow_path+0x45e>
    b37c:	66 85       	ldd	r22, Z+14	; 0x0e
    b37e:	77 85       	ldd	r23, Z+15	; 0x0f
    b380:	71 70       	andi	r23, 0x01	; 1
    b382:	2d 81       	ldd	r18, Y+5	; 0x05
    b384:	3e 81       	ldd	r19, Y+6	; 0x06
    b386:	62 0f       	add	r22, r18
    b388:	73 1f       	adc	r23, r19
    b38a:	a9 81       	ldd	r26, Y+1	; 0x01
    b38c:	ba 81       	ldd	r27, Y+2	; 0x02
    b38e:	8c 91       	ld	r24, X
    b390:	0e 94 4a 4a 	call	0x9494	; 0x9494 <ld_clust.isra.3>
    b394:	f8 01       	movw	r30, r16
    b396:	66 83       	std	Z+6, r22	; 0x06
    b398:	77 83       	std	Z+7, r23	; 0x07
    b39a:	80 87       	std	Z+8, r24	; 0x08
    b39c:	91 87       	std	Z+9, r25	; 0x09
    b39e:	88 ce       	rjmp	.-752    	; 0xb0b0 <follow_path+0x16e>
    b3a0:	85 e0       	ldi	r24, 0x05	; 5
    b3a2:	90 e0       	ldi	r25, 0x00	; 0
    b3a4:	06 c0       	rjmp	.+12     	; 0xb3b2 <follow_path+0x470>
    b3a6:	fb e0       	ldi	r31, 0x0B	; 11
    b3a8:	8f 16       	cp	r8, r31
    b3aa:	91 04       	cpc	r9, r1
    b3ac:	09 f0       	breq	.+2      	; 0xb3b0 <follow_path+0x46e>
    b3ae:	46 cf       	rjmp	.-372    	; 0xb23c <follow_path+0x2fa>
    b3b0:	30 cf       	rjmp	.-416    	; 0xb212 <follow_path+0x2d0>
    b3b2:	28 96       	adiw	r28, 0x08	; 8
    b3b4:	e2 e1       	ldi	r30, 0x12	; 18
    b3b6:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

0000b3ba <f_mount>:
    b3ba:	a6 e0       	ldi	r26, 0x06	; 6
    b3bc:	b0 e0       	ldi	r27, 0x00	; 0
    b3be:	e3 ee       	ldi	r30, 0xE3	; 227
    b3c0:	f9 e5       	ldi	r31, 0x59	; 89
    b3c2:	0c 94 a2 e7 	jmp	0x1cf44	; 0x1cf44 <__prologue_saves__+0x1e>
    b3c6:	9c 83       	std	Y+4, r25	; 0x04
    b3c8:	8b 83       	std	Y+3, r24	; 0x03
    b3ca:	7e 83       	std	Y+6, r23	; 0x06
    b3cc:	6d 83       	std	Y+5, r22	; 0x05
    b3ce:	14 2f       	mov	r17, r20
    b3d0:	7a 83       	std	Y+2, r23	; 0x02
    b3d2:	69 83       	std	Y+1, r22	; 0x01
    b3d4:	ce 01       	movw	r24, r28
    b3d6:	01 96       	adiw	r24, 0x01	; 1
    b3d8:	0e 94 bd 48 	call	0x917a	; 0x917a <get_ldnumber>
    b3dc:	97 fd       	sbrc	r25, 7
    b3de:	20 c0       	rjmp	.+64     	; 0xb420 <f_mount+0x66>
    b3e0:	88 0f       	add	r24, r24
    b3e2:	99 1f       	adc	r25, r25
    b3e4:	fc 01       	movw	r30, r24
    b3e6:	e9 5e       	subi	r30, 0xE9	; 233
    b3e8:	f7 4e       	sbci	r31, 0xE7	; 231
    b3ea:	01 90       	ld	r0, Z+
    b3ec:	f0 81       	ld	r31, Z
    b3ee:	e0 2d       	mov	r30, r0
    b3f0:	30 97       	sbiw	r30, 0x00	; 0
    b3f2:	09 f0       	breq	.+2      	; 0xb3f6 <f_mount+0x3c>
    b3f4:	10 82       	st	Z, r1
    b3f6:	eb 81       	ldd	r30, Y+3	; 0x03
    b3f8:	fc 81       	ldd	r31, Y+4	; 0x04
    b3fa:	30 97       	sbiw	r30, 0x00	; 0
    b3fc:	09 f0       	breq	.+2      	; 0xb400 <f_mount+0x46>
    b3fe:	10 82       	st	Z, r1
    b400:	dc 01       	movw	r26, r24
    b402:	a9 5e       	subi	r26, 0xE9	; 233
    b404:	b7 4e       	sbci	r27, 0xE7	; 231
    b406:	ed 93       	st	X+, r30
    b408:	fc 93       	st	X, r31
    b40a:	11 23       	and	r17, r17
    b40c:	61 f0       	breq	.+24     	; 0xb426 <f_mount+0x6c>
    b40e:	40 e0       	ldi	r20, 0x00	; 0
    b410:	be 01       	movw	r22, r28
    b412:	6d 5f       	subi	r22, 0xFD	; 253
    b414:	7f 4f       	sbci	r23, 0xFF	; 255
    b416:	ce 01       	movw	r24, r28
    b418:	05 96       	adiw	r24, 0x05	; 5
    b41a:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <mount_volume>
    b41e:	05 c0       	rjmp	.+10     	; 0xb42a <f_mount+0x70>
    b420:	8b e0       	ldi	r24, 0x0B	; 11
    b422:	90 e0       	ldi	r25, 0x00	; 0
    b424:	02 c0       	rjmp	.+4      	; 0xb42a <f_mount+0x70>
    b426:	80 e0       	ldi	r24, 0x00	; 0
    b428:	90 e0       	ldi	r25, 0x00	; 0
    b42a:	26 96       	adiw	r28, 0x06	; 6
    b42c:	e3 e0       	ldi	r30, 0x03	; 3
    b42e:	0c 94 be e7 	jmp	0x1cf7c	; 0x1cf7c <__epilogue_restores__+0x1e>

0000b432 <f_open>:
    b432:	a6 e3       	ldi	r26, 0x36	; 54
    b434:	b0 e0       	ldi	r27, 0x00	; 0
    b436:	ef e1       	ldi	r30, 0x1F	; 31
    b438:	fa e5       	ldi	r31, 0x5A	; 90
    b43a:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
    b43e:	7a ab       	std	Y+50, r23	; 0x32
    b440:	69 ab       	std	Y+49, r22	; 0x31
    b442:	00 97       	sbiw	r24, 0x00	; 0
    b444:	09 f4       	brne	.+2      	; 0xb448 <f_open+0x16>
    b446:	93 c1       	rjmp	.+806    	; 0xb76e <f_open+0x33c>
    b448:	74 2e       	mov	r7, r20
    b44a:	7c 01       	movw	r14, r24
    b44c:	24 2f       	mov	r18, r20
    b44e:	2f 73       	andi	r18, 0x3F	; 63
    b450:	32 2e       	mov	r3, r18
    b452:	42 2f       	mov	r20, r18
    b454:	be 01       	movw	r22, r28
    b456:	61 5d       	subi	r22, 0xD1	; 209
    b458:	7f 4f       	sbci	r23, 0xFF	; 255
    b45a:	ce 01       	movw	r24, r28
    b45c:	c1 96       	adiw	r24, 0x31	; 49
    b45e:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <mount_volume>
    b462:	00 97       	sbiw	r24, 0x00	; 0
    b464:	09 f0       	breq	.+2      	; 0xb468 <f_open+0x36>
    b466:	7d c1       	rjmp	.+762    	; 0xb762 <f_open+0x330>
    b468:	8f a5       	ldd	r24, Y+47	; 0x2f
    b46a:	98 a9       	ldd	r25, Y+48	; 0x30
    b46c:	9a 83       	std	Y+2, r25	; 0x02
    b46e:	89 83       	std	Y+1, r24	; 0x01
    b470:	80 e0       	ldi	r24, 0x00	; 0
    b472:	92 e0       	ldi	r25, 0x02	; 2
    b474:	0e 94 4f 69 	call	0xd29e	; 0xd29e <ff_memalloc>
    b478:	5c 01       	movw	r10, r24
    b47a:	00 97       	sbiw	r24, 0x00	; 0
    b47c:	09 f4       	brne	.+2      	; 0xb480 <f_open+0x4e>
    b47e:	79 c1       	rjmp	.+754    	; 0xb772 <f_open+0x340>
    b480:	ef a5       	ldd	r30, Y+47	; 0x2f
    b482:	f8 a9       	ldd	r31, Y+48	; 0x30
    b484:	94 87       	std	Z+12, r25	; 0x0c
    b486:	83 87       	std	Z+11, r24	; 0x0b
    b488:	69 a9       	ldd	r22, Y+49	; 0x31
    b48a:	7a a9       	ldd	r23, Y+50	; 0x32
    b48c:	ce 01       	movw	r24, r28
    b48e:	01 96       	adiw	r24, 0x01	; 1
    b490:	58 dd       	rcall	.-1360   	; 0xaf42 <follow_path>
    b492:	8c 01       	movw	r16, r24
    b494:	89 2b       	or	r24, r25
    b496:	29 f4       	brne	.+10     	; 0xb4a2 <f_open+0x70>
    b498:	88 a5       	ldd	r24, Y+40	; 0x28
    b49a:	87 ff       	sbrs	r24, 7
    b49c:	02 c0       	rjmp	.+4      	; 0xb4a2 <f_open+0x70>
    b49e:	06 e0       	ldi	r16, 0x06	; 6
    b4a0:	10 e0       	ldi	r17, 0x00	; 0
    b4a2:	87 2d       	mov	r24, r7
    b4a4:	8c 71       	andi	r24, 0x1C	; 28
    b4a6:	09 f4       	brne	.+2      	; 0xb4aa <f_open+0x78>
    b4a8:	75 c0       	rjmp	.+234    	; 0xb594 <f_open+0x162>
    b4aa:	01 15       	cp	r16, r1
    b4ac:	11 05       	cpc	r17, r1
    b4ae:	79 f0       	breq	.+30     	; 0xb4ce <f_open+0x9c>
    b4b0:	04 30       	cpi	r16, 0x04	; 4
    b4b2:	11 05       	cpc	r17, r1
    b4b4:	09 f0       	breq	.+2      	; 0xb4b8 <f_open+0x86>
    b4b6:	6d c1       	rjmp	.+730    	; 0xb792 <f_open+0x360>
    b4b8:	ce 01       	movw	r24, r28
    b4ba:	01 96       	adiw	r24, 0x01	; 1
    b4bc:	b4 db       	rcall	.-2200   	; 0xac26 <dir_register>
    b4be:	8c 01       	movw	r16, r24
    b4c0:	89 2b       	or	r24, r25
    b4c2:	09 f0       	breq	.+2      	; 0xb4c6 <f_open+0x94>
    b4c4:	66 c1       	rjmp	.+716    	; 0xb792 <f_open+0x360>
    b4c6:	33 2d       	mov	r19, r3
    b4c8:	38 60       	ori	r19, 0x08	; 8
    b4ca:	33 2e       	mov	r3, r19
    b4cc:	06 c0       	rjmp	.+12     	; 0xb4da <f_open+0xa8>
    b4ce:	8d 81       	ldd	r24, Y+5	; 0x05
    b4d0:	81 71       	andi	r24, 0x11	; 17
    b4d2:	09 f0       	breq	.+2      	; 0xb4d6 <f_open+0xa4>
    b4d4:	5c c1       	rjmp	.+696    	; 0xb78e <f_open+0x35c>
    b4d6:	72 fc       	sbrc	r7, 2
    b4d8:	51 c1       	rjmp	.+674    	; 0xb77c <f_open+0x34a>
    b4da:	33 fe       	sbrs	r3, 3
    b4dc:	6b c0       	rjmp	.+214    	; 0xb5b4 <f_open+0x182>
    b4de:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b4e0:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b4e2:	ef a5       	ldd	r30, Y+47	; 0x2f
    b4e4:	f8 a9       	ldd	r31, Y+48	; 0x30
    b4e6:	b8 01       	movw	r22, r16
    b4e8:	80 81       	ld	r24, Z
    b4ea:	0e 94 4a 4a 	call	0x9494	; 0x9494 <ld_clust.isra.3>
    b4ee:	2b 01       	movw	r4, r22
    b4f0:	3c 01       	movw	r6, r24
    b4f2:	0e 94 40 71 	call	0xe280	; 0xe280 <get_fattime>
    b4f6:	ab 01       	movw	r20, r22
    b4f8:	bc 01       	movw	r22, r24
    b4fa:	c8 01       	movw	r24, r16
    b4fc:	0e 96       	adiw	r24, 0x0e	; 14
    b4fe:	0e 94 2c 48 	call	0x9058	; 0x9058 <st_dword>
    b502:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b504:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b506:	80 e2       	ldi	r24, 0x20	; 32
    b508:	83 87       	std	Z+11, r24	; 0x0b
    b50a:	af a5       	ldd	r26, Y+47	; 0x2f
    b50c:	b8 a9       	ldd	r27, Y+48	; 0x30
    b50e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b510:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b512:	12 8e       	std	Z+26, r1	; 0x1a
    b514:	13 8e       	std	Z+27, r1	; 0x1b
    b516:	8c 91       	ld	r24, X
    b518:	83 30       	cpi	r24, 0x03	; 3
    b51a:	11 f4       	brne	.+4      	; 0xb520 <f_open+0xee>
    b51c:	14 8a       	std	Z+20, r1	; 0x14
    b51e:	15 8a       	std	Z+21, r1	; 0x15
    b520:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b522:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b524:	14 8e       	std	Z+28, r1	; 0x1c
    b526:	15 8e       	std	Z+29, r1	; 0x1d
    b528:	16 8e       	std	Z+30, r1	; 0x1e
    b52a:	17 8e       	std	Z+31, r1	; 0x1f
    b52c:	81 e0       	ldi	r24, 0x01	; 1
    b52e:	fd 01       	movw	r30, r26
    b530:	83 83       	std	Z+3, r24	; 0x03
    b532:	41 14       	cp	r4, r1
    b534:	51 04       	cpc	r5, r1
    b536:	61 04       	cpc	r6, r1
    b538:	71 04       	cpc	r7, r1
    b53a:	c9 f1       	breq	.+114    	; 0xb5ae <f_open+0x17c>
    b53c:	21 a9       	ldd	r18, Z+49	; 0x31
    b53e:	32 a9       	ldd	r19, Z+50	; 0x32
    b540:	43 a9       	ldd	r20, Z+51	; 0x33
    b542:	54 a9       	ldd	r21, Z+52	; 0x34
    b544:	2b ab       	std	Y+51, r18	; 0x33
    b546:	3c ab       	std	Y+52, r19	; 0x34
    b548:	4d ab       	std	Y+53, r20	; 0x35
    b54a:	5e ab       	std	Y+54, r21	; 0x36
    b54c:	00 e0       	ldi	r16, 0x00	; 0
    b54e:	10 e0       	ldi	r17, 0x00	; 0
    b550:	98 01       	movw	r18, r16
    b552:	b3 01       	movw	r22, r6
    b554:	a2 01       	movw	r20, r4
    b556:	ce 01       	movw	r24, r28
    b558:	01 96       	adiw	r24, 0x01	; 1
    b55a:	0e 94 42 52 	call	0xa484	; 0xa484 <remove_chain>
    b55e:	8c 01       	movw	r16, r24
    b560:	89 2b       	or	r24, r25
    b562:	09 f0       	breq	.+2      	; 0xb566 <f_open+0x134>
    b564:	16 c1       	rjmp	.+556    	; 0xb792 <f_open+0x360>
    b566:	4b a9       	ldd	r20, Y+51	; 0x33
    b568:	5c a9       	ldd	r21, Y+52	; 0x34
    b56a:	6d a9       	ldd	r22, Y+53	; 0x35
    b56c:	7e a9       	ldd	r23, Y+54	; 0x36
    b56e:	8f a5       	ldd	r24, Y+47	; 0x2f
    b570:	98 a9       	ldd	r25, Y+48	; 0x30
    b572:	0e 94 d9 4b 	call	0x97b2	; 0x97b2 <move_window>
    b576:	8c 01       	movw	r16, r24
    b578:	ef a5       	ldd	r30, Y+47	; 0x2f
    b57a:	f8 a9       	ldd	r31, Y+48	; 0x30
    b57c:	21 e0       	ldi	r18, 0x01	; 1
    b57e:	42 1a       	sub	r4, r18
    b580:	51 08       	sbc	r5, r1
    b582:	61 08       	sbc	r6, r1
    b584:	71 08       	sbc	r7, r1
    b586:	45 86       	std	Z+13, r4	; 0x0d
    b588:	56 86       	std	Z+14, r5	; 0x0e
    b58a:	67 86       	std	Z+15, r6	; 0x0f
    b58c:	70 8a       	std	Z+16, r7	; 0x10
    b58e:	89 2b       	or	r24, r25
    b590:	61 f0       	breq	.+24     	; 0xb5aa <f_open+0x178>
    b592:	ff c0       	rjmp	.+510    	; 0xb792 <f_open+0x360>
    b594:	01 15       	cp	r16, r1
    b596:	11 05       	cpc	r17, r1
    b598:	09 f0       	breq	.+2      	; 0xb59c <f_open+0x16a>
    b59a:	fb c0       	rjmp	.+502    	; 0xb792 <f_open+0x360>
    b59c:	8d 81       	ldd	r24, Y+5	; 0x05
    b59e:	84 fd       	sbrc	r24, 4
    b5a0:	f3 c0       	rjmp	.+486    	; 0xb788 <f_open+0x356>
    b5a2:	71 fe       	sbrs	r7, 1
    b5a4:	02 c0       	rjmp	.+4      	; 0xb5aa <f_open+0x178>
    b5a6:	80 fd       	sbrc	r24, 0
    b5a8:	f2 c0       	rjmp	.+484    	; 0xb78e <f_open+0x35c>
    b5aa:	33 fe       	sbrs	r3, 3
    b5ac:	03 c0       	rjmp	.+6      	; 0xb5b4 <f_open+0x182>
    b5ae:	33 2d       	mov	r19, r3
    b5b0:	30 64       	ori	r19, 0x40	; 64
    b5b2:	33 2e       	mov	r3, r19
    b5b4:	0f a5       	ldd	r16, Y+47	; 0x2f
    b5b6:	18 a9       	ldd	r17, Y+48	; 0x30
    b5b8:	f8 01       	movw	r30, r16
    b5ba:	81 a9       	ldd	r24, Z+49	; 0x31
    b5bc:	92 a9       	ldd	r25, Z+50	; 0x32
    b5be:	a3 a9       	ldd	r26, Z+51	; 0x33
    b5c0:	b4 a9       	ldd	r27, Z+52	; 0x34
    b5c2:	f7 01       	movw	r30, r14
    b5c4:	84 8f       	std	Z+28, r24	; 0x1c
    b5c6:	95 8f       	std	Z+29, r25	; 0x1d
    b5c8:	a6 8f       	std	Z+30, r26	; 0x1e
    b5ca:	b7 8f       	std	Z+31, r27	; 0x1f
    b5cc:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b5ce:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b5d0:	71 a2       	std	Z+33, r7	; 0x21
    b5d2:	60 a2       	std	Z+32, r6	; 0x20
    b5d4:	b3 01       	movw	r22, r6
    b5d6:	f8 01       	movw	r30, r16
    b5d8:	80 81       	ld	r24, Z
    b5da:	0e 94 4a 4a 	call	0x9494	; 0x9494 <ld_clust.isra.3>
    b5de:	f7 01       	movw	r30, r14
    b5e0:	66 83       	std	Z+6, r22	; 0x06
    b5e2:	77 83       	std	Z+7, r23	; 0x07
    b5e4:	80 87       	std	Z+8, r24	; 0x08
    b5e6:	91 87       	std	Z+9, r25	; 0x09
    b5e8:	c3 01       	movw	r24, r6
    b5ea:	4c 96       	adiw	r24, 0x1c	; 28
    b5ec:	0e 94 17 48 	call	0x902e	; 0x902e <ld_dword>
    b5f0:	f7 01       	movw	r30, r14
    b5f2:	62 87       	std	Z+10, r22	; 0x0a
    b5f4:	73 87       	std	Z+11, r23	; 0x0b
    b5f6:	84 87       	std	Z+12, r24	; 0x0c
    b5f8:	95 87       	std	Z+13, r25	; 0x0d
    b5fa:	13 a2       	std	Z+35, r1	; 0x23
    b5fc:	12 a2       	std	Z+34, r1	; 0x22
    b5fe:	11 83       	std	Z+1, r17	; 0x01
    b600:	00 83       	st	Z, r16
    b602:	f8 01       	movw	r30, r16
    b604:	85 81       	ldd	r24, Z+5	; 0x05
    b606:	96 81       	ldd	r25, Z+6	; 0x06
    b608:	f7 01       	movw	r30, r14
    b60a:	93 83       	std	Z+3, r25	; 0x03
    b60c:	82 83       	std	Z+2, r24	; 0x02
    b60e:	36 86       	std	Z+14, r3	; 0x0e
    b610:	17 86       	std	Z+15, r1	; 0x0f
    b612:	10 8e       	std	Z+24, r1	; 0x18
    b614:	11 8e       	std	Z+25, r1	; 0x19
    b616:	12 8e       	std	Z+26, r1	; 0x1a
    b618:	13 8e       	std	Z+27, r1	; 0x1b
    b61a:	10 8a       	std	Z+16, r1	; 0x10
    b61c:	11 8a       	std	Z+17, r1	; 0x11
    b61e:	12 8a       	std	Z+18, r1	; 0x12
    b620:	13 8a       	std	Z+19, r1	; 0x13
    b622:	67 01       	movw	r12, r14
    b624:	f4 e2       	ldi	r31, 0x24	; 36
    b626:	cf 0e       	add	r12, r31
    b628:	d1 1c       	adc	r13, r1
    b62a:	40 e0       	ldi	r20, 0x00	; 0
    b62c:	52 e0       	ldi	r21, 0x02	; 2
    b62e:	60 e0       	ldi	r22, 0x00	; 0
    b630:	70 e0       	ldi	r23, 0x00	; 0
    b632:	c6 01       	movw	r24, r12
    b634:	0e 94 32 48 	call	0x9064	; 0x9064 <mem_set>
    b638:	35 fc       	sbrc	r3, 5
    b63a:	03 c0       	rjmp	.+6      	; 0xb642 <f_open+0x210>
    b63c:	00 e0       	ldi	r16, 0x00	; 0
    b63e:	10 e0       	ldi	r17, 0x00	; 0
    b640:	89 c0       	rjmp	.+274    	; 0xb754 <f_open+0x322>
    b642:	f7 01       	movw	r30, r14
    b644:	62 84       	ldd	r6, Z+10	; 0x0a
    b646:	73 84       	ldd	r7, Z+11	; 0x0b
    b648:	84 84       	ldd	r8, Z+12	; 0x0c
    b64a:	95 84       	ldd	r9, Z+13	; 0x0d
    b64c:	61 14       	cp	r6, r1
    b64e:	71 04       	cpc	r7, r1
    b650:	81 04       	cpc	r8, r1
    b652:	91 04       	cpc	r9, r1
    b654:	99 f3       	breq	.-26     	; 0xb63c <f_open+0x20a>
    b656:	60 8a       	std	Z+16, r6	; 0x10
    b658:	71 8a       	std	Z+17, r7	; 0x11
    b65a:	82 8a       	std	Z+18, r8	; 0x12
    b65c:	93 8a       	std	Z+19, r9	; 0x13
    b65e:	ef a5       	ldd	r30, Y+47	; 0x2f
    b660:	f8 a9       	ldd	r31, Y+48	; 0x30
    b662:	21 84       	ldd	r2, Z+9	; 0x09
    b664:	32 84       	ldd	r3, Z+10	; 0x0a
    b666:	c1 01       	movw	r24, r2
    b668:	a0 e0       	ldi	r26, 0x00	; 0
    b66a:	b0 e0       	ldi	r27, 0x00	; 0
    b66c:	1c 01       	movw	r2, r24
    b66e:	2d 01       	movw	r4, r26
    b670:	59 e0       	ldi	r21, 0x09	; 9
    b672:	22 0c       	add	r2, r2
    b674:	33 1c       	adc	r3, r3
    b676:	44 1c       	adc	r4, r4
    b678:	55 1c       	adc	r5, r5
    b67a:	5a 95       	dec	r21
    b67c:	d1 f7       	brne	.-12     	; 0xb672 <f_open+0x240>
    b67e:	f7 01       	movw	r30, r14
    b680:	46 81       	ldd	r20, Z+6	; 0x06
    b682:	57 81       	ldd	r21, Z+7	; 0x07
    b684:	60 85       	ldd	r22, Z+8	; 0x08
    b686:	71 85       	ldd	r23, Z+9	; 0x09
    b688:	26 14       	cp	r2, r6
    b68a:	37 04       	cpc	r3, r7
    b68c:	48 04       	cpc	r4, r8
    b68e:	59 04       	cpc	r5, r9
    b690:	f0 f4       	brcc	.+60     	; 0xb6ce <f_open+0x29c>
    b692:	f7 01       	movw	r30, r14
    b694:	80 81       	ld	r24, Z
    b696:	91 81       	ldd	r25, Z+1	; 0x01
    b698:	0e 94 a7 4f 	call	0x9f4e	; 0x9f4e <get_fat.isra.9>
    b69c:	ab 01       	movw	r20, r22
    b69e:	bc 01       	movw	r22, r24
    b6a0:	d4 01       	movw	r26, r8
    b6a2:	c3 01       	movw	r24, r6
    b6a4:	82 19       	sub	r24, r2
    b6a6:	93 09       	sbc	r25, r3
    b6a8:	a4 09       	sbc	r26, r4
    b6aa:	b5 09       	sbc	r27, r5
    b6ac:	3c 01       	movw	r6, r24
    b6ae:	4d 01       	movw	r8, r26
    b6b0:	42 30       	cpi	r20, 0x02	; 2
    b6b2:	51 05       	cpc	r21, r1
    b6b4:	61 05       	cpc	r22, r1
    b6b6:	71 05       	cpc	r23, r1
    b6b8:	08 f4       	brcc	.+2      	; 0xb6bc <f_open+0x28a>
    b6ba:	63 c0       	rjmp	.+198    	; 0xb782 <f_open+0x350>
    b6bc:	4f 3f       	cpi	r20, 0xFF	; 255
    b6be:	ff ef       	ldi	r31, 0xFF	; 255
    b6c0:	5f 07       	cpc	r21, r31
    b6c2:	6f 07       	cpc	r22, r31
    b6c4:	7f 07       	cpc	r23, r31
    b6c6:	01 f7       	brne	.-64     	; 0xb688 <f_open+0x256>
    b6c8:	01 e0       	ldi	r16, 0x01	; 1
    b6ca:	10 e0       	ldi	r17, 0x00	; 0
    b6cc:	02 c0       	rjmp	.+4      	; 0xb6d2 <f_open+0x2a0>
    b6ce:	00 e0       	ldi	r16, 0x00	; 0
    b6d0:	10 e0       	ldi	r17, 0x00	; 0
    b6d2:	f7 01       	movw	r30, r14
    b6d4:	44 8b       	std	Z+20, r20	; 0x14
    b6d6:	55 8b       	std	Z+21, r21	; 0x15
    b6d8:	66 8b       	std	Z+22, r22	; 0x16
    b6da:	77 8b       	std	Z+23, r23	; 0x17
    b6dc:	01 15       	cp	r16, r1
    b6de:	11 05       	cpc	r17, r1
    b6e0:	c9 f5       	brne	.+114    	; 0xb754 <f_open+0x322>
    b6e2:	d4 01       	movw	r26, r8
    b6e4:	c3 01       	movw	r24, r6
    b6e6:	91 70       	andi	r25, 0x01	; 1
    b6e8:	aa 27       	eor	r26, r26
    b6ea:	bb 27       	eor	r27, r27
    b6ec:	89 2b       	or	r24, r25
    b6ee:	8a 2b       	or	r24, r26
    b6f0:	8b 2b       	or	r24, r27
    b6f2:	09 f4       	brne	.+2      	; 0xb6f6 <f_open+0x2c4>
    b6f4:	a3 cf       	rjmp	.-186    	; 0xb63c <f_open+0x20a>
    b6f6:	4f a4       	ldd	r4, Y+47	; 0x2f
    b6f8:	58 a8       	ldd	r5, Y+48	; 0x30
    b6fa:	c2 01       	movw	r24, r4
    b6fc:	0e 94 4a 48 	call	0x9094	; 0x9094 <clst2sect>
    b700:	61 15       	cp	r22, r1
    b702:	71 05       	cpc	r23, r1
    b704:	81 05       	cpc	r24, r1
    b706:	91 05       	cpc	r25, r1
    b708:	19 f1       	breq	.+70     	; 0xb750 <f_open+0x31e>
    b70a:	94 01       	movw	r18, r8
    b70c:	83 01       	movw	r16, r6
    b70e:	49 e0       	ldi	r20, 0x09	; 9
    b710:	36 95       	lsr	r19
    b712:	27 95       	ror	r18
    b714:	17 95       	ror	r17
    b716:	07 95       	ror	r16
    b718:	4a 95       	dec	r20
    b71a:	d1 f7       	brne	.-12     	; 0xb710 <f_open+0x2de>
    b71c:	a9 01       	movw	r20, r18
    b71e:	98 01       	movw	r18, r16
    b720:	26 0f       	add	r18, r22
    b722:	37 1f       	adc	r19, r23
    b724:	48 1f       	adc	r20, r24
    b726:	59 1f       	adc	r21, r25
    b728:	f7 01       	movw	r30, r14
    b72a:	20 8f       	std	Z+24, r18	; 0x18
    b72c:	31 8f       	std	Z+25, r19	; 0x19
    b72e:	42 8f       	std	Z+26, r20	; 0x1a
    b730:	53 8f       	std	Z+27, r21	; 0x1b
    b732:	01 e0       	ldi	r16, 0x01	; 1
    b734:	10 e0       	ldi	r17, 0x00	; 0
    b736:	b6 01       	movw	r22, r12
    b738:	f2 01       	movw	r30, r4
    b73a:	81 81       	ldd	r24, Z+1	; 0x01
    b73c:	0e 94 0b 6a 	call	0xd416	; 0xd416 <disk_read>
    b740:	31 e0       	ldi	r19, 0x01	; 1
    b742:	20 e0       	ldi	r18, 0x00	; 0
    b744:	89 2b       	or	r24, r25
    b746:	09 f4       	brne	.+2      	; 0xb74a <f_open+0x318>
    b748:	30 e0       	ldi	r19, 0x00	; 0
    b74a:	03 2f       	mov	r16, r19
    b74c:	12 2f       	mov	r17, r18
    b74e:	02 c0       	rjmp	.+4      	; 0xb754 <f_open+0x322>
    b750:	02 e0       	ldi	r16, 0x02	; 2
    b752:	10 e0       	ldi	r17, 0x00	; 0
    b754:	c5 01       	movw	r24, r10
    b756:	0e 94 52 69 	call	0xd2a4	; 0xd2a4 <ff_memfree>
    b75a:	01 15       	cp	r16, r1
    b75c:	11 05       	cpc	r17, r1
    b75e:	59 f0       	breq	.+22     	; 0xb776 <f_open+0x344>
    b760:	01 c0       	rjmp	.+2      	; 0xb764 <f_open+0x332>
    b762:	8c 01       	movw	r16, r24
    b764:	f7 01       	movw	r30, r14
    b766:	11 82       	std	Z+1, r1	; 0x01
    b768:	10 82       	st	Z, r1
    b76a:	c8 01       	movw	r24, r16
    b76c:	16 c0       	rjmp	.+44     	; 0xb79a <f_open+0x368>
    b76e:	89 e0       	ldi	r24, 0x09	; 9
    b770:	03 c0       	rjmp	.+6      	; 0xb778 <f_open+0x346>
    b772:	81 e1       	ldi	r24, 0x11	; 17
    b774:	01 c0       	rjmp	.+2      	; 0xb778 <f_open+0x346>
    b776:	80 e0       	ldi	r24, 0x00	; 0
    b778:	90 e0       	ldi	r25, 0x00	; 0
    b77a:	0f c0       	rjmp	.+30     	; 0xb79a <f_open+0x368>
    b77c:	08 e0       	ldi	r16, 0x08	; 8
    b77e:	10 e0       	ldi	r17, 0x00	; 0
    b780:	08 c0       	rjmp	.+16     	; 0xb792 <f_open+0x360>
    b782:	02 e0       	ldi	r16, 0x02	; 2
    b784:	10 e0       	ldi	r17, 0x00	; 0
    b786:	a5 cf       	rjmp	.-182    	; 0xb6d2 <f_open+0x2a0>
    b788:	04 e0       	ldi	r16, 0x04	; 4
    b78a:	10 e0       	ldi	r17, 0x00	; 0
    b78c:	02 c0       	rjmp	.+4      	; 0xb792 <f_open+0x360>
    b78e:	07 e0       	ldi	r16, 0x07	; 7
    b790:	10 e0       	ldi	r17, 0x00	; 0
    b792:	c5 01       	movw	r24, r10
    b794:	0e 94 52 69 	call	0xd2a4	; 0xd2a4 <ff_memfree>
    b798:	e5 cf       	rjmp	.-54     	; 0xb764 <f_open+0x332>
    b79a:	e6 96       	adiw	r28, 0x36	; 54
    b79c:	e2 e1       	ldi	r30, 0x12	; 18
    b79e:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

0000b7a2 <f_read>:
    b7a2:	a6 e0       	ldi	r26, 0x06	; 6
    b7a4:	b0 e0       	ldi	r27, 0x00	; 0
    b7a6:	e7 ed       	ldi	r30, 0xD7	; 215
    b7a8:	fb e5       	ldi	r31, 0x5B	; 91
    b7aa:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
    b7ae:	7c 01       	movw	r14, r24
    b7b0:	4b 01       	movw	r8, r22
    b7b2:	5a 01       	movw	r10, r20
    b7b4:	3e 83       	std	Y+6, r19	; 0x06
    b7b6:	2d 83       	std	Y+5, r18	; 0x05
    b7b8:	f9 01       	movw	r30, r18
    b7ba:	11 82       	std	Z+1, r1	; 0x01
    b7bc:	10 82       	st	Z, r1
    b7be:	be 01       	movw	r22, r28
    b7c0:	6f 5f       	subi	r22, 0xFF	; 255
    b7c2:	7f 4f       	sbci	r23, 0xFF	; 255
    b7c4:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <validate>
    b7c8:	00 97       	sbiw	r24, 0x00	; 0
    b7ca:	09 f0       	breq	.+2      	; 0xb7ce <f_read+0x2c>
    b7cc:	31 c1       	rjmp	.+610    	; 0xba30 <f_read+0x28e>
    b7ce:	f7 01       	movw	r30, r14
    b7d0:	87 85       	ldd	r24, Z+15	; 0x0f
    b7d2:	90 e0       	ldi	r25, 0x00	; 0
    b7d4:	00 97       	sbiw	r24, 0x00	; 0
    b7d6:	09 f0       	breq	.+2      	; 0xb7da <f_read+0x38>
    b7d8:	2b c1       	rjmp	.+598    	; 0xba30 <f_read+0x28e>
    b7da:	86 85       	ldd	r24, Z+14	; 0x0e
    b7dc:	80 ff       	sbrs	r24, 0
    b7de:	26 c1       	rjmp	.+588    	; 0xba2c <f_read+0x28a>
    b7e0:	82 85       	ldd	r24, Z+10	; 0x0a
    b7e2:	93 85       	ldd	r25, Z+11	; 0x0b
    b7e4:	a4 85       	ldd	r26, Z+12	; 0x0c
    b7e6:	b5 85       	ldd	r27, Z+13	; 0x0d
    b7e8:	40 89       	ldd	r20, Z+16	; 0x10
    b7ea:	51 89       	ldd	r21, Z+17	; 0x11
    b7ec:	62 89       	ldd	r22, Z+18	; 0x12
    b7ee:	73 89       	ldd	r23, Z+19	; 0x13
    b7f0:	84 1b       	sub	r24, r20
    b7f2:	95 0b       	sbc	r25, r21
    b7f4:	a6 0b       	sbc	r26, r22
    b7f6:	b7 0b       	sbc	r27, r23
    b7f8:	a5 01       	movw	r20, r10
    b7fa:	60 e0       	ldi	r22, 0x00	; 0
    b7fc:	70 e0       	ldi	r23, 0x00	; 0
    b7fe:	84 17       	cp	r24, r20
    b800:	95 07       	cpc	r25, r21
    b802:	a6 07       	cpc	r26, r22
    b804:	b7 07       	cpc	r27, r23
    b806:	08 f4       	brcc	.+2      	; 0xb80a <f_read+0x68>
    b808:	5c 01       	movw	r10, r24
    b80a:	17 01       	movw	r2, r14
    b80c:	f4 e2       	ldi	r31, 0x24	; 36
    b80e:	2f 0e       	add	r2, r31
    b810:	31 1c       	adc	r3, r1
    b812:	a1 14       	cp	r10, r1
    b814:	b1 04       	cpc	r11, r1
    b816:	09 f4       	brne	.+2      	; 0xb81a <f_read+0x78>
    b818:	07 c1       	rjmp	.+526    	; 0xba28 <f_read+0x286>
    b81a:	f7 01       	movw	r30, r14
    b81c:	40 89       	ldd	r20, Z+16	; 0x10
    b81e:	51 89       	ldd	r21, Z+17	; 0x11
    b820:	62 89       	ldd	r22, Z+18	; 0x12
    b822:	73 89       	ldd	r23, Z+19	; 0x13
    b824:	db 01       	movw	r26, r22
    b826:	ca 01       	movw	r24, r20
    b828:	91 70       	andi	r25, 0x01	; 1
    b82a:	aa 27       	eor	r26, r26
    b82c:	bb 27       	eor	r27, r27
    b82e:	89 2b       	or	r24, r25
    b830:	8a 2b       	or	r24, r26
    b832:	8b 2b       	or	r24, r27
    b834:	09 f0       	breq	.+2      	; 0xb838 <f_read+0x96>
    b836:	cb c0       	rjmp	.+406    	; 0xb9ce <f_read+0x22c>
    b838:	e9 81       	ldd	r30, Y+1	; 0x01
    b83a:	fa 81       	ldd	r31, Y+2	; 0x02
    b83c:	01 85       	ldd	r16, Z+9	; 0x09
    b83e:	12 85       	ldd	r17, Z+10	; 0x0a
    b840:	01 50       	subi	r16, 0x01	; 1
    b842:	11 09       	sbc	r17, r1
    b844:	db 01       	movw	r26, r22
    b846:	ca 01       	movw	r24, r20
    b848:	e9 e0       	ldi	r30, 0x09	; 9
    b84a:	b6 95       	lsr	r27
    b84c:	a7 95       	ror	r26
    b84e:	97 95       	ror	r25
    b850:	87 95       	ror	r24
    b852:	ea 95       	dec	r30
    b854:	d1 f7       	brne	.-12     	; 0xb84a <f_read+0xa8>
    b856:	08 23       	and	r16, r24
    b858:	19 23       	and	r17, r25
    b85a:	01 15       	cp	r16, r1
    b85c:	11 05       	cpc	r17, r1
    b85e:	91 f5       	brne	.+100    	; 0xb8c4 <f_read+0x122>
    b860:	f7 01       	movw	r30, r14
    b862:	41 15       	cp	r20, r1
    b864:	51 05       	cpc	r21, r1
    b866:	61 05       	cpc	r22, r1
    b868:	71 05       	cpc	r23, r1
    b86a:	29 f4       	brne	.+10     	; 0xb876 <f_read+0xd4>
    b86c:	66 81       	ldd	r22, Z+6	; 0x06
    b86e:	77 81       	ldd	r23, Z+7	; 0x07
    b870:	80 85       	ldd	r24, Z+8	; 0x08
    b872:	91 85       	ldd	r25, Z+9	; 0x09
    b874:	11 c0       	rjmp	.+34     	; 0xb898 <f_read+0xf6>
    b876:	82 a1       	ldd	r24, Z+34	; 0x22
    b878:	93 a1       	ldd	r25, Z+35	; 0x23
    b87a:	89 2b       	or	r24, r25
    b87c:	21 f0       	breq	.+8      	; 0xb886 <f_read+0xe4>
    b87e:	c7 01       	movw	r24, r14
    b880:	0e 94 72 48 	call	0x90e4	; 0x90e4 <clmt_clust>
    b884:	09 c0       	rjmp	.+18     	; 0xb898 <f_read+0xf6>
    b886:	f7 01       	movw	r30, r14
    b888:	44 89       	ldd	r20, Z+20	; 0x14
    b88a:	55 89       	ldd	r21, Z+21	; 0x15
    b88c:	66 89       	ldd	r22, Z+22	; 0x16
    b88e:	77 89       	ldd	r23, Z+23	; 0x17
    b890:	80 81       	ld	r24, Z
    b892:	91 81       	ldd	r25, Z+1	; 0x01
    b894:	0e 94 a7 4f 	call	0x9f4e	; 0x9f4e <get_fat.isra.9>
    b898:	62 30       	cpi	r22, 0x02	; 2
    b89a:	71 05       	cpc	r23, r1
    b89c:	81 05       	cpc	r24, r1
    b89e:	91 05       	cpc	r25, r1
    b8a0:	10 f4       	brcc	.+4      	; 0xb8a6 <f_read+0x104>
    b8a2:	82 e0       	ldi	r24, 0x02	; 2
    b8a4:	07 c0       	rjmp	.+14     	; 0xb8b4 <f_read+0x112>
    b8a6:	6f 3f       	cpi	r22, 0xFF	; 255
    b8a8:	ff ef       	ldi	r31, 0xFF	; 255
    b8aa:	7f 07       	cpc	r23, r31
    b8ac:	8f 07       	cpc	r24, r31
    b8ae:	9f 07       	cpc	r25, r31
    b8b0:	21 f4       	brne	.+8      	; 0xb8ba <f_read+0x118>
    b8b2:	81 e0       	ldi	r24, 0x01	; 1
    b8b4:	f7 01       	movw	r30, r14
    b8b6:	87 87       	std	Z+15, r24	; 0x0f
    b8b8:	ba c0       	rjmp	.+372    	; 0xba2e <f_read+0x28c>
    b8ba:	f7 01       	movw	r30, r14
    b8bc:	64 8b       	std	Z+20, r22	; 0x14
    b8be:	75 8b       	std	Z+21, r23	; 0x15
    b8c0:	86 8b       	std	Z+22, r24	; 0x16
    b8c2:	97 8b       	std	Z+23, r25	; 0x17
    b8c4:	89 81       	ldd	r24, Y+1	; 0x01
    b8c6:	9a 81       	ldd	r25, Y+2	; 0x02
    b8c8:	9c 83       	std	Y+4, r25	; 0x04
    b8ca:	8b 83       	std	Y+3, r24	; 0x03
    b8cc:	f7 01       	movw	r30, r14
    b8ce:	44 89       	ldd	r20, Z+20	; 0x14
    b8d0:	55 89       	ldd	r21, Z+21	; 0x15
    b8d2:	66 89       	ldd	r22, Z+22	; 0x16
    b8d4:	77 89       	ldd	r23, Z+23	; 0x17
    b8d6:	0e 94 4a 48 	call	0x9094	; 0x9094 <clst2sect>
    b8da:	61 15       	cp	r22, r1
    b8dc:	71 05       	cpc	r23, r1
    b8de:	81 05       	cpc	r24, r1
    b8e0:	91 05       	cpc	r25, r1
    b8e2:	f9 f2       	breq	.-66     	; 0xb8a2 <f_read+0x100>
    b8e4:	2b 01       	movw	r4, r22
    b8e6:	3c 01       	movw	r6, r24
    b8e8:	40 0e       	add	r4, r16
    b8ea:	51 1e       	adc	r5, r17
    b8ec:	61 1c       	adc	r6, r1
    b8ee:	71 1c       	adc	r7, r1
    b8f0:	65 01       	movw	r12, r10
    b8f2:	cd 2c       	mov	r12, r13
    b8f4:	dd 24       	eor	r13, r13
    b8f6:	c6 94       	lsr	r12
    b8f8:	c1 14       	cp	r12, r1
    b8fa:	d1 04       	cpc	r13, r1
    b8fc:	d1 f1       	breq	.+116    	; 0xb972 <f_read+0x1d0>
    b8fe:	eb 81       	ldd	r30, Y+3	; 0x03
    b900:	fc 81       	ldd	r31, Y+4	; 0x04
    b902:	81 85       	ldd	r24, Z+9	; 0x09
    b904:	92 85       	ldd	r25, Z+10	; 0x0a
    b906:	98 01       	movw	r18, r16
    b908:	2c 0d       	add	r18, r12
    b90a:	3d 1d       	adc	r19, r13
    b90c:	82 17       	cp	r24, r18
    b90e:	93 07       	cpc	r25, r19
    b910:	18 f4       	brcc	.+6      	; 0xb918 <f_read+0x176>
    b912:	6c 01       	movw	r12, r24
    b914:	c0 1a       	sub	r12, r16
    b916:	d1 0a       	sbc	r13, r17
    b918:	86 01       	movw	r16, r12
    b91a:	a3 01       	movw	r20, r6
    b91c:	92 01       	movw	r18, r4
    b91e:	b4 01       	movw	r22, r8
    b920:	eb 81       	ldd	r30, Y+3	; 0x03
    b922:	fc 81       	ldd	r31, Y+4	; 0x04
    b924:	81 81       	ldd	r24, Z+1	; 0x01
    b926:	0e 94 0b 6a 	call	0xd416	; 0xd416 <disk_read>
    b92a:	89 2b       	or	r24, r25
    b92c:	11 f6       	brne	.-124    	; 0xb8b2 <f_read+0x110>
    b92e:	f7 01       	movw	r30, r14
    b930:	86 85       	ldd	r24, Z+14	; 0x0e
    b932:	87 ff       	sbrs	r24, 7
    b934:	1a c0       	rjmp	.+52     	; 0xb96a <f_read+0x1c8>
    b936:	80 8d       	ldd	r24, Z+24	; 0x18
    b938:	91 8d       	ldd	r25, Z+25	; 0x19
    b93a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b93c:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b93e:	84 19       	sub	r24, r4
    b940:	95 09       	sbc	r25, r5
    b942:	a6 09       	sbc	r26, r6
    b944:	b7 09       	sbc	r27, r7
    b946:	a6 01       	movw	r20, r12
    b948:	60 e0       	ldi	r22, 0x00	; 0
    b94a:	70 e0       	ldi	r23, 0x00	; 0
    b94c:	84 17       	cp	r24, r20
    b94e:	95 07       	cpc	r25, r21
    b950:	a6 07       	cpc	r26, r22
    b952:	b7 07       	cpc	r27, r23
    b954:	50 f4       	brcc	.+20     	; 0xb96a <f_read+0x1c8>
    b956:	98 2f       	mov	r25, r24
    b958:	88 27       	eor	r24, r24
    b95a:	99 0f       	add	r25, r25
    b95c:	40 e0       	ldi	r20, 0x00	; 0
    b95e:	52 e0       	ldi	r21, 0x02	; 2
    b960:	b1 01       	movw	r22, r2
    b962:	88 0d       	add	r24, r8
    b964:	99 1d       	adc	r25, r9
    b966:	0e 94 3f 4a 	call	0x947e	; 0x947e <mem_cpy.part.0>
    b96a:	dc 2c       	mov	r13, r12
    b96c:	cc 24       	eor	r12, r12
    b96e:	dd 0c       	add	r13, r13
    b970:	41 c0       	rjmp	.+130    	; 0xb9f4 <f_read+0x252>
    b972:	f7 01       	movw	r30, r14
    b974:	20 8d       	ldd	r18, Z+24	; 0x18
    b976:	31 8d       	ldd	r19, Z+25	; 0x19
    b978:	42 8d       	ldd	r20, Z+26	; 0x1a
    b97a:	53 8d       	ldd	r21, Z+27	; 0x1b
    b97c:	42 16       	cp	r4, r18
    b97e:	53 06       	cpc	r5, r19
    b980:	64 06       	cpc	r6, r20
    b982:	75 06       	cpc	r7, r21
    b984:	f9 f0       	breq	.+62     	; 0xb9c4 <f_read+0x222>
    b986:	86 85       	ldd	r24, Z+14	; 0x0e
    b988:	87 ff       	sbrs	r24, 7
    b98a:	0f c0       	rjmp	.+30     	; 0xb9aa <f_read+0x208>
    b98c:	01 e0       	ldi	r16, 0x01	; 1
    b98e:	10 e0       	ldi	r17, 0x00	; 0
    b990:	b1 01       	movw	r22, r2
    b992:	eb 81       	ldd	r30, Y+3	; 0x03
    b994:	fc 81       	ldd	r31, Y+4	; 0x04
    b996:	81 81       	ldd	r24, Z+1	; 0x01
    b998:	0e 94 1b 6a 	call	0xd436	; 0xd436 <disk_write>
    b99c:	89 2b       	or	r24, r25
    b99e:	09 f0       	breq	.+2      	; 0xb9a2 <f_read+0x200>
    b9a0:	88 cf       	rjmp	.-240    	; 0xb8b2 <f_read+0x110>
    b9a2:	f7 01       	movw	r30, r14
    b9a4:	86 85       	ldd	r24, Z+14	; 0x0e
    b9a6:	8f 77       	andi	r24, 0x7F	; 127
    b9a8:	86 87       	std	Z+14, r24	; 0x0e
    b9aa:	e9 81       	ldd	r30, Y+1	; 0x01
    b9ac:	fa 81       	ldd	r31, Y+2	; 0x02
    b9ae:	01 e0       	ldi	r16, 0x01	; 1
    b9b0:	10 e0       	ldi	r17, 0x00	; 0
    b9b2:	a3 01       	movw	r20, r6
    b9b4:	92 01       	movw	r18, r4
    b9b6:	b1 01       	movw	r22, r2
    b9b8:	81 81       	ldd	r24, Z+1	; 0x01
    b9ba:	0e 94 0b 6a 	call	0xd416	; 0xd416 <disk_read>
    b9be:	89 2b       	or	r24, r25
    b9c0:	09 f0       	breq	.+2      	; 0xb9c4 <f_read+0x222>
    b9c2:	77 cf       	rjmp	.-274    	; 0xb8b2 <f_read+0x110>
    b9c4:	f7 01       	movw	r30, r14
    b9c6:	40 8e       	std	Z+24, r4	; 0x18
    b9c8:	51 8e       	std	Z+25, r5	; 0x19
    b9ca:	62 8e       	std	Z+26, r6	; 0x1a
    b9cc:	73 8e       	std	Z+27, r7	; 0x1b
    b9ce:	f7 01       	movw	r30, r14
    b9d0:	60 89       	ldd	r22, Z+16	; 0x10
    b9d2:	71 89       	ldd	r23, Z+17	; 0x11
    b9d4:	71 70       	andi	r23, 0x01	; 1
    b9d6:	80 e0       	ldi	r24, 0x00	; 0
    b9d8:	92 e0       	ldi	r25, 0x02	; 2
    b9da:	86 1b       	sub	r24, r22
    b9dc:	97 0b       	sbc	r25, r23
    b9de:	65 01       	movw	r12, r10
    b9e0:	8a 15       	cp	r24, r10
    b9e2:	9b 05       	cpc	r25, r11
    b9e4:	08 f4       	brcc	.+2      	; 0xb9e8 <f_read+0x246>
    b9e6:	6c 01       	movw	r12, r24
    b9e8:	62 0d       	add	r22, r2
    b9ea:	73 1d       	adc	r23, r3
    b9ec:	a6 01       	movw	r20, r12
    b9ee:	c4 01       	movw	r24, r8
    b9f0:	0e 94 3f 4a 	call	0x947e	; 0x947e <mem_cpy.part.0>
    b9f4:	ac 18       	sub	r10, r12
    b9f6:	bd 08       	sbc	r11, r13
    b9f8:	ed 81       	ldd	r30, Y+5	; 0x05
    b9fa:	fe 81       	ldd	r31, Y+6	; 0x06
    b9fc:	80 81       	ld	r24, Z
    b9fe:	91 81       	ldd	r25, Z+1	; 0x01
    ba00:	8c 0d       	add	r24, r12
    ba02:	9d 1d       	adc	r25, r13
    ba04:	91 83       	std	Z+1, r25	; 0x01
    ba06:	80 83       	st	Z, r24
    ba08:	8c 0c       	add	r8, r12
    ba0a:	9d 1c       	adc	r9, r13
    ba0c:	f7 01       	movw	r30, r14
    ba0e:	80 89       	ldd	r24, Z+16	; 0x10
    ba10:	91 89       	ldd	r25, Z+17	; 0x11
    ba12:	a2 89       	ldd	r26, Z+18	; 0x12
    ba14:	b3 89       	ldd	r27, Z+19	; 0x13
    ba16:	8c 0d       	add	r24, r12
    ba18:	9d 1d       	adc	r25, r13
    ba1a:	a1 1d       	adc	r26, r1
    ba1c:	b1 1d       	adc	r27, r1
    ba1e:	80 8b       	std	Z+16, r24	; 0x10
    ba20:	91 8b       	std	Z+17, r25	; 0x11
    ba22:	a2 8b       	std	Z+18, r26	; 0x12
    ba24:	b3 8b       	std	Z+19, r27	; 0x13
    ba26:	f5 ce       	rjmp	.-534    	; 0xb812 <f_read+0x70>
    ba28:	80 e0       	ldi	r24, 0x00	; 0
    ba2a:	01 c0       	rjmp	.+2      	; 0xba2e <f_read+0x28c>
    ba2c:	87 e0       	ldi	r24, 0x07	; 7
    ba2e:	90 e0       	ldi	r25, 0x00	; 0
    ba30:	26 96       	adiw	r28, 0x06	; 6
    ba32:	e2 e1       	ldi	r30, 0x12	; 18
    ba34:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

0000ba38 <f_write>:
    ba38:	a8 e0       	ldi	r26, 0x08	; 8
    ba3a:	b0 e0       	ldi	r27, 0x00	; 0
    ba3c:	e2 e2       	ldi	r30, 0x22	; 34
    ba3e:	fd e5       	ldi	r31, 0x5D	; 93
    ba40:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
    ba44:	7c 01       	movw	r14, r24
    ba46:	3b 01       	movw	r6, r22
    ba48:	5a 01       	movw	r10, r20
    ba4a:	38 87       	std	Y+8, r19	; 0x08
    ba4c:	2f 83       	std	Y+7, r18	; 0x07
    ba4e:	f9 01       	movw	r30, r18
    ba50:	11 82       	std	Z+1, r1	; 0x01
    ba52:	10 82       	st	Z, r1
    ba54:	be 01       	movw	r22, r28
    ba56:	6f 5f       	subi	r22, 0xFF	; 255
    ba58:	7f 4f       	sbci	r23, 0xFF	; 255
    ba5a:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <validate>
    ba5e:	00 97       	sbiw	r24, 0x00	; 0
    ba60:	09 f0       	breq	.+2      	; 0xba64 <f_write+0x2c>
    ba62:	7d c1       	rjmp	.+762    	; 0xbd5e <f_write+0x326>
    ba64:	f7 01       	movw	r30, r14
    ba66:	87 85       	ldd	r24, Z+15	; 0x0f
    ba68:	90 e0       	ldi	r25, 0x00	; 0
    ba6a:	00 97       	sbiw	r24, 0x00	; 0
    ba6c:	09 f0       	breq	.+2      	; 0xba70 <f_write+0x38>
    ba6e:	77 c1       	rjmp	.+750    	; 0xbd5e <f_write+0x326>
    ba70:	86 85       	ldd	r24, Z+14	; 0x0e
    ba72:	81 ff       	sbrs	r24, 1
    ba74:	72 c1       	rjmp	.+740    	; 0xbd5a <f_write+0x322>
    ba76:	80 89       	ldd	r24, Z+16	; 0x10
    ba78:	91 89       	ldd	r25, Z+17	; 0x11
    ba7a:	a2 89       	ldd	r26, Z+18	; 0x12
    ba7c:	b3 89       	ldd	r27, Z+19	; 0x13
    ba7e:	ac 01       	movw	r20, r24
    ba80:	bd 01       	movw	r22, r26
    ba82:	4a 0d       	add	r20, r10
    ba84:	5b 1d       	adc	r21, r11
    ba86:	61 1d       	adc	r22, r1
    ba88:	71 1d       	adc	r23, r1
    ba8a:	48 17       	cp	r20, r24
    ba8c:	59 07       	cpc	r21, r25
    ba8e:	6a 07       	cpc	r22, r26
    ba90:	7b 07       	cpc	r23, r27
    ba92:	18 f4       	brcc	.+6      	; 0xba9a <f_write+0x62>
    ba94:	5c 01       	movw	r10, r24
    ba96:	a0 94       	com	r10
    ba98:	b0 94       	com	r11
    ba9a:	97 01       	movw	r18, r14
    ba9c:	2c 5d       	subi	r18, 0xDC	; 220
    ba9e:	3f 4f       	sbci	r19, 0xFF	; 255
    baa0:	3e 83       	std	Y+6, r19	; 0x06
    baa2:	2d 83       	std	Y+5, r18	; 0x05
    baa4:	a1 14       	cp	r10, r1
    baa6:	b1 04       	cpc	r11, r1
    baa8:	09 f4       	brne	.+2      	; 0xbaac <f_write+0x74>
    baaa:	4d c0       	rjmp	.+154    	; 0xbb46 <f_write+0x10e>
    baac:	f7 01       	movw	r30, r14
    baae:	40 89       	ldd	r20, Z+16	; 0x10
    bab0:	51 89       	ldd	r21, Z+17	; 0x11
    bab2:	62 89       	ldd	r22, Z+18	; 0x12
    bab4:	73 89       	ldd	r23, Z+19	; 0x13
    bab6:	db 01       	movw	r26, r22
    bab8:	ca 01       	movw	r24, r20
    baba:	91 70       	andi	r25, 0x01	; 1
    babc:	aa 27       	eor	r26, r26
    babe:	bb 27       	eor	r27, r27
    bac0:	89 2b       	or	r24, r25
    bac2:	8a 2b       	or	r24, r26
    bac4:	8b 2b       	or	r24, r27
    bac6:	09 f0       	breq	.+2      	; 0xbaca <f_write+0x92>
    bac8:	05 c1       	rjmp	.+522    	; 0xbcd4 <f_write+0x29c>
    baca:	e9 81       	ldd	r30, Y+1	; 0x01
    bacc:	fa 81       	ldd	r31, Y+2	; 0x02
    bace:	81 84       	ldd	r8, Z+9	; 0x09
    bad0:	92 84       	ldd	r9, Z+10	; 0x0a
    bad2:	f1 e0       	ldi	r31, 0x01	; 1
    bad4:	8f 1a       	sub	r8, r31
    bad6:	91 08       	sbc	r9, r1
    bad8:	db 01       	movw	r26, r22
    bada:	ca 01       	movw	r24, r20
    badc:	e9 e0       	ldi	r30, 0x09	; 9
    bade:	b6 95       	lsr	r27
    bae0:	a7 95       	ror	r26
    bae2:	97 95       	ror	r25
    bae4:	87 95       	ror	r24
    bae6:	ea 95       	dec	r30
    bae8:	d1 f7       	brne	.-12     	; 0xbade <f_write+0xa6>
    baea:	88 22       	and	r8, r24
    baec:	99 22       	and	r9, r25
    baee:	81 14       	cp	r8, r1
    baf0:	91 04       	cpc	r9, r1
    baf2:	09 f0       	breq	.+2      	; 0xbaf6 <f_write+0xbe>
    baf4:	51 c0       	rjmp	.+162    	; 0xbb98 <f_write+0x160>
    baf6:	f7 01       	movw	r30, r14
    baf8:	41 15       	cp	r20, r1
    bafa:	51 05       	cpc	r21, r1
    bafc:	61 05       	cpc	r22, r1
    bafe:	71 05       	cpc	r23, r1
    bb00:	69 f4       	brne	.+26     	; 0xbb1c <f_write+0xe4>
    bb02:	66 81       	ldd	r22, Z+6	; 0x06
    bb04:	77 81       	ldd	r23, Z+7	; 0x07
    bb06:	80 85       	ldd	r24, Z+8	; 0x08
    bb08:	91 85       	ldd	r25, Z+9	; 0x09
    bb0a:	61 15       	cp	r22, r1
    bb0c:	71 05       	cpc	r23, r1
    bb0e:	81 05       	cpc	r24, r1
    bb10:	91 05       	cpc	r25, r1
    bb12:	f9 f4       	brne	.+62     	; 0xbb52 <f_write+0x11a>
    bb14:	40 e0       	ldi	r20, 0x00	; 0
    bb16:	50 e0       	ldi	r21, 0x00	; 0
    bb18:	ba 01       	movw	r22, r20
    bb1a:	0d c0       	rjmp	.+26     	; 0xbb36 <f_write+0xfe>
    bb1c:	82 a1       	ldd	r24, Z+34	; 0x22
    bb1e:	93 a1       	ldd	r25, Z+35	; 0x23
    bb20:	89 2b       	or	r24, r25
    bb22:	21 f0       	breq	.+8      	; 0xbb2c <f_write+0xf4>
    bb24:	c7 01       	movw	r24, r14
    bb26:	0e 94 72 48 	call	0x90e4	; 0x90e4 <clmt_clust>
    bb2a:	08 c0       	rjmp	.+16     	; 0xbb3c <f_write+0x104>
    bb2c:	f7 01       	movw	r30, r14
    bb2e:	44 89       	ldd	r20, Z+20	; 0x14
    bb30:	55 89       	ldd	r21, Z+21	; 0x15
    bb32:	66 89       	ldd	r22, Z+22	; 0x16
    bb34:	77 89       	ldd	r23, Z+23	; 0x17
    bb36:	c7 01       	movw	r24, r14
    bb38:	0e 94 1c 51 	call	0xa238	; 0xa238 <create_chain>
    bb3c:	61 15       	cp	r22, r1
    bb3e:	71 05       	cpc	r23, r1
    bb40:	81 05       	cpc	r24, r1
    bb42:	91 05       	cpc	r25, r1
    bb44:	31 f4       	brne	.+12     	; 0xbb52 <f_write+0x11a>
    bb46:	f7 01       	movw	r30, r14
    bb48:	86 85       	ldd	r24, Z+14	; 0x0e
    bb4a:	80 64       	ori	r24, 0x40	; 64
    bb4c:	86 87       	std	Z+14, r24	; 0x0e
    bb4e:	80 e0       	ldi	r24, 0x00	; 0
    bb50:	05 c1       	rjmp	.+522    	; 0xbd5c <f_write+0x324>
    bb52:	61 30       	cpi	r22, 0x01	; 1
    bb54:	71 05       	cpc	r23, r1
    bb56:	81 05       	cpc	r24, r1
    bb58:	91 05       	cpc	r25, r1
    bb5a:	11 f4       	brne	.+4      	; 0xbb60 <f_write+0x128>
    bb5c:	82 e0       	ldi	r24, 0x02	; 2
    bb5e:	07 c0       	rjmp	.+14     	; 0xbb6e <f_write+0x136>
    bb60:	6f 3f       	cpi	r22, 0xFF	; 255
    bb62:	ff ef       	ldi	r31, 0xFF	; 255
    bb64:	7f 07       	cpc	r23, r31
    bb66:	8f 07       	cpc	r24, r31
    bb68:	9f 07       	cpc	r25, r31
    bb6a:	21 f4       	brne	.+8      	; 0xbb74 <f_write+0x13c>
    bb6c:	81 e0       	ldi	r24, 0x01	; 1
    bb6e:	f7 01       	movw	r30, r14
    bb70:	87 87       	std	Z+15, r24	; 0x0f
    bb72:	f4 c0       	rjmp	.+488    	; 0xbd5c <f_write+0x324>
    bb74:	f7 01       	movw	r30, r14
    bb76:	64 8b       	std	Z+20, r22	; 0x14
    bb78:	75 8b       	std	Z+21, r23	; 0x15
    bb7a:	86 8b       	std	Z+22, r24	; 0x16
    bb7c:	97 8b       	std	Z+23, r25	; 0x17
    bb7e:	06 81       	ldd	r16, Z+6	; 0x06
    bb80:	17 81       	ldd	r17, Z+7	; 0x07
    bb82:	20 85       	ldd	r18, Z+8	; 0x08
    bb84:	31 85       	ldd	r19, Z+9	; 0x09
    bb86:	01 15       	cp	r16, r1
    bb88:	11 05       	cpc	r17, r1
    bb8a:	21 05       	cpc	r18, r1
    bb8c:	31 05       	cpc	r19, r1
    bb8e:	21 f4       	brne	.+8      	; 0xbb98 <f_write+0x160>
    bb90:	66 83       	std	Z+6, r22	; 0x06
    bb92:	77 83       	std	Z+7, r23	; 0x07
    bb94:	80 87       	std	Z+8, r24	; 0x08
    bb96:	91 87       	std	Z+9, r25	; 0x09
    bb98:	f7 01       	movw	r30, r14
    bb9a:	86 85       	ldd	r24, Z+14	; 0x0e
    bb9c:	87 ff       	sbrs	r24, 7
    bb9e:	13 c0       	rjmp	.+38     	; 0xbbc6 <f_write+0x18e>
    bba0:	20 8d       	ldd	r18, Z+24	; 0x18
    bba2:	31 8d       	ldd	r19, Z+25	; 0x19
    bba4:	42 8d       	ldd	r20, Z+26	; 0x1a
    bba6:	53 8d       	ldd	r21, Z+27	; 0x1b
    bba8:	e9 81       	ldd	r30, Y+1	; 0x01
    bbaa:	fa 81       	ldd	r31, Y+2	; 0x02
    bbac:	01 e0       	ldi	r16, 0x01	; 1
    bbae:	10 e0       	ldi	r17, 0x00	; 0
    bbb0:	6d 81       	ldd	r22, Y+5	; 0x05
    bbb2:	7e 81       	ldd	r23, Y+6	; 0x06
    bbb4:	81 81       	ldd	r24, Z+1	; 0x01
    bbb6:	0e 94 1b 6a 	call	0xd436	; 0xd436 <disk_write>
    bbba:	89 2b       	or	r24, r25
    bbbc:	b9 f6       	brne	.-82     	; 0xbb6c <f_write+0x134>
    bbbe:	f7 01       	movw	r30, r14
    bbc0:	86 85       	ldd	r24, Z+14	; 0x0e
    bbc2:	8f 77       	andi	r24, 0x7F	; 127
    bbc4:	86 87       	std	Z+14, r24	; 0x0e
    bbc6:	29 81       	ldd	r18, Y+1	; 0x01
    bbc8:	3a 81       	ldd	r19, Y+2	; 0x02
    bbca:	3c 83       	std	Y+4, r19	; 0x04
    bbcc:	2b 83       	std	Y+3, r18	; 0x03
    bbce:	f7 01       	movw	r30, r14
    bbd0:	44 89       	ldd	r20, Z+20	; 0x14
    bbd2:	55 89       	ldd	r21, Z+21	; 0x15
    bbd4:	66 89       	ldd	r22, Z+22	; 0x16
    bbd6:	77 89       	ldd	r23, Z+23	; 0x17
    bbd8:	c9 01       	movw	r24, r18
    bbda:	0e 94 4a 48 	call	0x9094	; 0x9094 <clst2sect>
    bbde:	61 15       	cp	r22, r1
    bbe0:	71 05       	cpc	r23, r1
    bbe2:	81 05       	cpc	r24, r1
    bbe4:	91 05       	cpc	r25, r1
    bbe6:	09 f4       	brne	.+2      	; 0xbbea <f_write+0x1b2>
    bbe8:	b9 cf       	rjmp	.-142    	; 0xbb5c <f_write+0x124>
    bbea:	1b 01       	movw	r2, r22
    bbec:	2c 01       	movw	r4, r24
    bbee:	28 0c       	add	r2, r8
    bbf0:	39 1c       	adc	r3, r9
    bbf2:	41 1c       	adc	r4, r1
    bbf4:	51 1c       	adc	r5, r1
    bbf6:	65 01       	movw	r12, r10
    bbf8:	cd 2c       	mov	r12, r13
    bbfa:	dd 24       	eor	r13, r13
    bbfc:	c6 94       	lsr	r12
    bbfe:	c1 14       	cp	r12, r1
    bc00:	d1 04       	cpc	r13, r1
    bc02:	f1 f1       	breq	.+124    	; 0xbc80 <f_write+0x248>
    bc04:	eb 81       	ldd	r30, Y+3	; 0x03
    bc06:	fc 81       	ldd	r31, Y+4	; 0x04
    bc08:	81 85       	ldd	r24, Z+9	; 0x09
    bc0a:	92 85       	ldd	r25, Z+10	; 0x0a
    bc0c:	94 01       	movw	r18, r8
    bc0e:	2c 0d       	add	r18, r12
    bc10:	3d 1d       	adc	r19, r13
    bc12:	82 17       	cp	r24, r18
    bc14:	93 07       	cpc	r25, r19
    bc16:	18 f4       	brcc	.+6      	; 0xbc1e <f_write+0x1e6>
    bc18:	6c 01       	movw	r12, r24
    bc1a:	c8 18       	sub	r12, r8
    bc1c:	d9 08       	sbc	r13, r9
    bc1e:	86 01       	movw	r16, r12
    bc20:	a2 01       	movw	r20, r4
    bc22:	91 01       	movw	r18, r2
    bc24:	b3 01       	movw	r22, r6
    bc26:	eb 81       	ldd	r30, Y+3	; 0x03
    bc28:	fc 81       	ldd	r31, Y+4	; 0x04
    bc2a:	81 81       	ldd	r24, Z+1	; 0x01
    bc2c:	0e 94 1b 6a 	call	0xd436	; 0xd436 <disk_write>
    bc30:	89 2b       	or	r24, r25
    bc32:	09 f0       	breq	.+2      	; 0xbc36 <f_write+0x1fe>
    bc34:	9b cf       	rjmp	.-202    	; 0xbb6c <f_write+0x134>
    bc36:	f7 01       	movw	r30, r14
    bc38:	80 8d       	ldd	r24, Z+24	; 0x18
    bc3a:	91 8d       	ldd	r25, Z+25	; 0x19
    bc3c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bc3e:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bc40:	82 19       	sub	r24, r2
    bc42:	93 09       	sbc	r25, r3
    bc44:	a4 09       	sbc	r26, r4
    bc46:	b5 09       	sbc	r27, r5
    bc48:	a6 01       	movw	r20, r12
    bc4a:	60 e0       	ldi	r22, 0x00	; 0
    bc4c:	70 e0       	ldi	r23, 0x00	; 0
    bc4e:	84 17       	cp	r24, r20
    bc50:	95 07       	cpc	r25, r21
    bc52:	a6 07       	cpc	r26, r22
    bc54:	b7 07       	cpc	r27, r23
    bc56:	80 f4       	brcc	.+32     	; 0xbc78 <f_write+0x240>
    bc58:	98 2f       	mov	r25, r24
    bc5a:	88 27       	eor	r24, r24
    bc5c:	99 0f       	add	r25, r25
    bc5e:	b3 01       	movw	r22, r6
    bc60:	68 0f       	add	r22, r24
    bc62:	79 1f       	adc	r23, r25
    bc64:	40 e0       	ldi	r20, 0x00	; 0
    bc66:	52 e0       	ldi	r21, 0x02	; 2
    bc68:	8d 81       	ldd	r24, Y+5	; 0x05
    bc6a:	9e 81       	ldd	r25, Y+6	; 0x06
    bc6c:	0e 94 3f 4a 	call	0x947e	; 0x947e <mem_cpy.part.0>
    bc70:	f7 01       	movw	r30, r14
    bc72:	86 85       	ldd	r24, Z+14	; 0x0e
    bc74:	8f 77       	andi	r24, 0x7F	; 127
    bc76:	86 87       	std	Z+14, r24	; 0x0e
    bc78:	dc 2c       	mov	r13, r12
    bc7a:	cc 24       	eor	r12, r12
    bc7c:	dd 0c       	add	r13, r13
    bc7e:	43 c0       	rjmp	.+134    	; 0xbd06 <f_write+0x2ce>
    bc80:	f7 01       	movw	r30, r14
    bc82:	80 8d       	ldd	r24, Z+24	; 0x18
    bc84:	91 8d       	ldd	r25, Z+25	; 0x19
    bc86:	a2 8d       	ldd	r26, Z+26	; 0x1a
    bc88:	b3 8d       	ldd	r27, Z+27	; 0x1b
    bc8a:	28 16       	cp	r2, r24
    bc8c:	39 06       	cpc	r3, r25
    bc8e:	4a 06       	cpc	r4, r26
    bc90:	5b 06       	cpc	r5, r27
    bc92:	d9 f0       	breq	.+54     	; 0xbcca <f_write+0x292>
    bc94:	40 89       	ldd	r20, Z+16	; 0x10
    bc96:	51 89       	ldd	r21, Z+17	; 0x11
    bc98:	62 89       	ldd	r22, Z+18	; 0x12
    bc9a:	73 89       	ldd	r23, Z+19	; 0x13
    bc9c:	82 85       	ldd	r24, Z+10	; 0x0a
    bc9e:	93 85       	ldd	r25, Z+11	; 0x0b
    bca0:	a4 85       	ldd	r26, Z+12	; 0x0c
    bca2:	b5 85       	ldd	r27, Z+13	; 0x0d
    bca4:	48 17       	cp	r20, r24
    bca6:	59 07       	cpc	r21, r25
    bca8:	6a 07       	cpc	r22, r26
    bcaa:	7b 07       	cpc	r23, r27
    bcac:	70 f4       	brcc	.+28     	; 0xbcca <f_write+0x292>
    bcae:	01 e0       	ldi	r16, 0x01	; 1
    bcb0:	10 e0       	ldi	r17, 0x00	; 0
    bcb2:	a2 01       	movw	r20, r4
    bcb4:	91 01       	movw	r18, r2
    bcb6:	6d 81       	ldd	r22, Y+5	; 0x05
    bcb8:	7e 81       	ldd	r23, Y+6	; 0x06
    bcba:	eb 81       	ldd	r30, Y+3	; 0x03
    bcbc:	fc 81       	ldd	r31, Y+4	; 0x04
    bcbe:	81 81       	ldd	r24, Z+1	; 0x01
    bcc0:	0e 94 0b 6a 	call	0xd416	; 0xd416 <disk_read>
    bcc4:	89 2b       	or	r24, r25
    bcc6:	09 f0       	breq	.+2      	; 0xbcca <f_write+0x292>
    bcc8:	51 cf       	rjmp	.-350    	; 0xbb6c <f_write+0x134>
    bcca:	f7 01       	movw	r30, r14
    bccc:	20 8e       	std	Z+24, r2	; 0x18
    bcce:	31 8e       	std	Z+25, r3	; 0x19
    bcd0:	42 8e       	std	Z+26, r4	; 0x1a
    bcd2:	53 8e       	std	Z+27, r5	; 0x1b
    bcd4:	f7 01       	movw	r30, r14
    bcd6:	80 89       	ldd	r24, Z+16	; 0x10
    bcd8:	91 89       	ldd	r25, Z+17	; 0x11
    bcda:	91 70       	andi	r25, 0x01	; 1
    bcdc:	20 e0       	ldi	r18, 0x00	; 0
    bcde:	32 e0       	ldi	r19, 0x02	; 2
    bce0:	28 1b       	sub	r18, r24
    bce2:	39 0b       	sbc	r19, r25
    bce4:	65 01       	movw	r12, r10
    bce6:	2a 15       	cp	r18, r10
    bce8:	3b 05       	cpc	r19, r11
    bcea:	08 f4       	brcc	.+2      	; 0xbcee <f_write+0x2b6>
    bcec:	69 01       	movw	r12, r18
    bcee:	a6 01       	movw	r20, r12
    bcf0:	b3 01       	movw	r22, r6
    bcf2:	2d 81       	ldd	r18, Y+5	; 0x05
    bcf4:	3e 81       	ldd	r19, Y+6	; 0x06
    bcf6:	82 0f       	add	r24, r18
    bcf8:	93 1f       	adc	r25, r19
    bcfa:	0e 94 3f 4a 	call	0x947e	; 0x947e <mem_cpy.part.0>
    bcfe:	f7 01       	movw	r30, r14
    bd00:	86 85       	ldd	r24, Z+14	; 0x0e
    bd02:	80 68       	ori	r24, 0x80	; 128
    bd04:	86 87       	std	Z+14, r24	; 0x0e
    bd06:	ac 18       	sub	r10, r12
    bd08:	bd 08       	sbc	r11, r13
    bd0a:	ef 81       	ldd	r30, Y+7	; 0x07
    bd0c:	f8 85       	ldd	r31, Y+8	; 0x08
    bd0e:	80 81       	ld	r24, Z
    bd10:	91 81       	ldd	r25, Z+1	; 0x01
    bd12:	8c 0d       	add	r24, r12
    bd14:	9d 1d       	adc	r25, r13
    bd16:	91 83       	std	Z+1, r25	; 0x01
    bd18:	80 83       	st	Z, r24
    bd1a:	6c 0c       	add	r6, r12
    bd1c:	7d 1c       	adc	r7, r13
    bd1e:	f7 01       	movw	r30, r14
    bd20:	80 89       	ldd	r24, Z+16	; 0x10
    bd22:	91 89       	ldd	r25, Z+17	; 0x11
    bd24:	a2 89       	ldd	r26, Z+18	; 0x12
    bd26:	b3 89       	ldd	r27, Z+19	; 0x13
    bd28:	8c 0d       	add	r24, r12
    bd2a:	9d 1d       	adc	r25, r13
    bd2c:	a1 1d       	adc	r26, r1
    bd2e:	b1 1d       	adc	r27, r1
    bd30:	80 8b       	std	Z+16, r24	; 0x10
    bd32:	91 8b       	std	Z+17, r25	; 0x11
    bd34:	a2 8b       	std	Z+18, r26	; 0x12
    bd36:	b3 8b       	std	Z+19, r27	; 0x13
    bd38:	42 85       	ldd	r20, Z+10	; 0x0a
    bd3a:	53 85       	ldd	r21, Z+11	; 0x0b
    bd3c:	64 85       	ldd	r22, Z+12	; 0x0c
    bd3e:	75 85       	ldd	r23, Z+13	; 0x0d
    bd40:	48 17       	cp	r20, r24
    bd42:	59 07       	cpc	r21, r25
    bd44:	6a 07       	cpc	r22, r26
    bd46:	7b 07       	cpc	r23, r27
    bd48:	10 f4       	brcc	.+4      	; 0xbd4e <f_write+0x316>
    bd4a:	ac 01       	movw	r20, r24
    bd4c:	bd 01       	movw	r22, r26
    bd4e:	f7 01       	movw	r30, r14
    bd50:	42 87       	std	Z+10, r20	; 0x0a
    bd52:	53 87       	std	Z+11, r21	; 0x0b
    bd54:	64 87       	std	Z+12, r22	; 0x0c
    bd56:	75 87       	std	Z+13, r23	; 0x0d
    bd58:	a5 ce       	rjmp	.-694    	; 0xbaa4 <f_write+0x6c>
    bd5a:	87 e0       	ldi	r24, 0x07	; 7
    bd5c:	90 e0       	ldi	r25, 0x00	; 0
    bd5e:	28 96       	adiw	r28, 0x08	; 8
    bd60:	e2 e1       	ldi	r30, 0x12	; 18
    bd62:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

0000bd66 <f_sync>:
    bd66:	8f 92       	push	r8
    bd68:	9f 92       	push	r9
    bd6a:	af 92       	push	r10
    bd6c:	bf 92       	push	r11
    bd6e:	ef 92       	push	r14
    bd70:	ff 92       	push	r15
    bd72:	0f 93       	push	r16
    bd74:	1f 93       	push	r17
    bd76:	cf 93       	push	r28
    bd78:	df 93       	push	r29
    bd7a:	00 d0       	rcall	.+0      	; 0xbd7c <f_sync+0x16>
    bd7c:	cd b7       	in	r28, 0x3d	; 61
    bd7e:	de b7       	in	r29, 0x3e	; 62
    bd80:	7c 01       	movw	r14, r24
    bd82:	be 01       	movw	r22, r28
    bd84:	6f 5f       	subi	r22, 0xFF	; 255
    bd86:	7f 4f       	sbci	r23, 0xFF	; 255
    bd88:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <validate>
    bd8c:	00 97       	sbiw	r24, 0x00	; 0
    bd8e:	09 f0       	breq	.+2      	; 0xbd92 <f_sync+0x2c>
    bd90:	5d c0       	rjmp	.+186    	; 0xbe4c <f_sync+0xe6>
    bd92:	f7 01       	movw	r30, r14
    bd94:	86 85       	ldd	r24, Z+14	; 0x0e
    bd96:	86 ff       	sbrs	r24, 6
    bd98:	55 c0       	rjmp	.+170    	; 0xbe44 <f_sync+0xde>
    bd9a:	87 ff       	sbrs	r24, 7
    bd9c:	15 c0       	rjmp	.+42     	; 0xbdc8 <f_sync+0x62>
    bd9e:	20 8d       	ldd	r18, Z+24	; 0x18
    bda0:	31 8d       	ldd	r19, Z+25	; 0x19
    bda2:	42 8d       	ldd	r20, Z+26	; 0x1a
    bda4:	53 8d       	ldd	r21, Z+27	; 0x1b
    bda6:	e9 81       	ldd	r30, Y+1	; 0x01
    bda8:	fa 81       	ldd	r31, Y+2	; 0x02
    bdaa:	01 e0       	ldi	r16, 0x01	; 1
    bdac:	10 e0       	ldi	r17, 0x00	; 0
    bdae:	b7 01       	movw	r22, r14
    bdb0:	6c 5d       	subi	r22, 0xDC	; 220
    bdb2:	7f 4f       	sbci	r23, 0xFF	; 255
    bdb4:	81 81       	ldd	r24, Z+1	; 0x01
    bdb6:	0e 94 1b 6a 	call	0xd436	; 0xd436 <disk_write>
    bdba:	89 2b       	or	r24, r25
    bdbc:	09 f0       	breq	.+2      	; 0xbdc0 <f_sync+0x5a>
    bdbe:	44 c0       	rjmp	.+136    	; 0xbe48 <f_sync+0xe2>
    bdc0:	f7 01       	movw	r30, r14
    bdc2:	86 85       	ldd	r24, Z+14	; 0x0e
    bdc4:	8f 77       	andi	r24, 0x7F	; 127
    bdc6:	86 87       	std	Z+14, r24	; 0x0e
    bdc8:	0e 94 40 71 	call	0xe280	; 0xe280 <get_fattime>
    bdcc:	4b 01       	movw	r8, r22
    bdce:	5c 01       	movw	r10, r24
    bdd0:	f7 01       	movw	r30, r14
    bdd2:	44 8d       	ldd	r20, Z+28	; 0x1c
    bdd4:	55 8d       	ldd	r21, Z+29	; 0x1d
    bdd6:	66 8d       	ldd	r22, Z+30	; 0x1e
    bdd8:	77 8d       	ldd	r23, Z+31	; 0x1f
    bdda:	89 81       	ldd	r24, Y+1	; 0x01
    bddc:	9a 81       	ldd	r25, Y+2	; 0x02
    bdde:	0e 94 d9 4b 	call	0x97b2	; 0x97b2 <move_window>
    bde2:	00 97       	sbiw	r24, 0x00	; 0
    bde4:	99 f5       	brne	.+102    	; 0xbe4c <f_sync+0xe6>
    bde6:	f7 01       	movw	r30, r14
    bde8:	00 a1       	ldd	r16, Z+32	; 0x20
    bdea:	11 a1       	ldd	r17, Z+33	; 0x21
    bdec:	f8 01       	movw	r30, r16
    bdee:	83 85       	ldd	r24, Z+11	; 0x0b
    bdf0:	80 62       	ori	r24, 0x20	; 32
    bdf2:	83 87       	std	Z+11, r24	; 0x0b
    bdf4:	f7 01       	movw	r30, r14
    bdf6:	26 81       	ldd	r18, Z+6	; 0x06
    bdf8:	37 81       	ldd	r19, Z+7	; 0x07
    bdfa:	40 85       	ldd	r20, Z+8	; 0x08
    bdfc:	51 85       	ldd	r21, Z+9	; 0x09
    bdfe:	b8 01       	movw	r22, r16
    be00:	80 81       	ld	r24, Z
    be02:	91 81       	ldd	r25, Z+1	; 0x01
    be04:	0e 94 5f 4a 	call	0x94be	; 0x94be <st_clust.isra.4>
    be08:	f7 01       	movw	r30, r14
    be0a:	42 85       	ldd	r20, Z+10	; 0x0a
    be0c:	53 85       	ldd	r21, Z+11	; 0x0b
    be0e:	64 85       	ldd	r22, Z+12	; 0x0c
    be10:	75 85       	ldd	r23, Z+13	; 0x0d
    be12:	c8 01       	movw	r24, r16
    be14:	4c 96       	adiw	r24, 0x1c	; 28
    be16:	0e 94 2c 48 	call	0x9058	; 0x9058 <st_dword>
    be1a:	b5 01       	movw	r22, r10
    be1c:	a4 01       	movw	r20, r8
    be1e:	c8 01       	movw	r24, r16
    be20:	46 96       	adiw	r24, 0x16	; 22
    be22:	0e 94 2c 48 	call	0x9058	; 0x9058 <st_dword>
    be26:	f8 01       	movw	r30, r16
    be28:	12 8a       	std	Z+18, r1	; 0x12
    be2a:	13 8a       	std	Z+19, r1	; 0x13
    be2c:	89 81       	ldd	r24, Y+1	; 0x01
    be2e:	9a 81       	ldd	r25, Y+2	; 0x02
    be30:	21 e0       	ldi	r18, 0x01	; 1
    be32:	fc 01       	movw	r30, r24
    be34:	23 83       	std	Z+3, r18	; 0x03
    be36:	0e 94 bf 4a 	call	0x957e	; 0x957e <sync_fs>
    be3a:	f7 01       	movw	r30, r14
    be3c:	26 85       	ldd	r18, Z+14	; 0x0e
    be3e:	2f 7b       	andi	r18, 0xBF	; 191
    be40:	26 87       	std	Z+14, r18	; 0x0e
    be42:	04 c0       	rjmp	.+8      	; 0xbe4c <f_sync+0xe6>
    be44:	80 e0       	ldi	r24, 0x00	; 0
    be46:	01 c0       	rjmp	.+2      	; 0xbe4a <f_sync+0xe4>
    be48:	81 e0       	ldi	r24, 0x01	; 1
    be4a:	90 e0       	ldi	r25, 0x00	; 0
    be4c:	0f 90       	pop	r0
    be4e:	0f 90       	pop	r0
    be50:	df 91       	pop	r29
    be52:	cf 91       	pop	r28
    be54:	1f 91       	pop	r17
    be56:	0f 91       	pop	r16
    be58:	ff 90       	pop	r15
    be5a:	ef 90       	pop	r14
    be5c:	bf 90       	pop	r11
    be5e:	af 90       	pop	r10
    be60:	9f 90       	pop	r9
    be62:	8f 90       	pop	r8
    be64:	08 95       	ret

0000be66 <f_close>:
    be66:	a2 e0       	ldi	r26, 0x02	; 2
    be68:	b0 e0       	ldi	r27, 0x00	; 0
    be6a:	e9 e3       	ldi	r30, 0x39	; 57
    be6c:	ff e5       	ldi	r31, 0x5F	; 95
    be6e:	0c 94 a1 e7 	jmp	0x1cf42	; 0x1cf42 <__prologue_saves__+0x1c>
    be72:	8c 01       	movw	r16, r24
    be74:	78 df       	rcall	.-272    	; 0xbd66 <f_sync>
    be76:	00 97       	sbiw	r24, 0x00	; 0
    be78:	59 f4       	brne	.+22     	; 0xbe90 <f_close+0x2a>
    be7a:	be 01       	movw	r22, r28
    be7c:	6f 5f       	subi	r22, 0xFF	; 255
    be7e:	7f 4f       	sbci	r23, 0xFF	; 255
    be80:	c8 01       	movw	r24, r16
    be82:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <validate>
    be86:	00 97       	sbiw	r24, 0x00	; 0
    be88:	19 f4       	brne	.+6      	; 0xbe90 <f_close+0x2a>
    be8a:	f8 01       	movw	r30, r16
    be8c:	11 82       	std	Z+1, r1	; 0x01
    be8e:	10 82       	st	Z, r1
    be90:	22 96       	adiw	r28, 0x02	; 2
    be92:	e4 e0       	ldi	r30, 0x04	; 4
    be94:	0c 94 bd e7 	jmp	0x1cf7a	; 0x1cf7a <__epilogue_restores__+0x1c>

0000be98 <f_chdir>:
    be98:	a2 e3       	ldi	r26, 0x32	; 50
    be9a:	b0 e0       	ldi	r27, 0x00	; 0
    be9c:	e2 e5       	ldi	r30, 0x52	; 82
    be9e:	ff e5       	ldi	r31, 0x5F	; 95
    bea0:	0c 94 9d e7 	jmp	0x1cf3a	; 0x1cf3a <__prologue_saves__+0x14>
    bea4:	9a ab       	std	Y+50, r25	; 0x32
    bea6:	89 ab       	std	Y+49, r24	; 0x31
    bea8:	40 e0       	ldi	r20, 0x00	; 0
    beaa:	be 01       	movw	r22, r28
    beac:	61 5d       	subi	r22, 0xD1	; 209
    beae:	7f 4f       	sbci	r23, 0xFF	; 255
    beb0:	ce 01       	movw	r24, r28
    beb2:	c1 96       	adiw	r24, 0x31	; 49
    beb4:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <mount_volume>
    beb8:	00 97       	sbiw	r24, 0x00	; 0
    beba:	09 f0       	breq	.+2      	; 0xbebe <f_chdir+0x26>
    bebc:	44 c0       	rjmp	.+136    	; 0xbf46 <f_chdir+0xae>
    bebe:	8f a5       	ldd	r24, Y+47	; 0x2f
    bec0:	98 a9       	ldd	r25, Y+48	; 0x30
    bec2:	9a 83       	std	Y+2, r25	; 0x02
    bec4:	89 83       	std	Y+1, r24	; 0x01
    bec6:	80 e0       	ldi	r24, 0x00	; 0
    bec8:	92 e0       	ldi	r25, 0x02	; 2
    beca:	0e 94 4f 69 	call	0xd29e	; 0xd29e <ff_memalloc>
    bece:	7c 01       	movw	r14, r24
    bed0:	00 97       	sbiw	r24, 0x00	; 0
    bed2:	a9 f1       	breq	.+106    	; 0xbf3e <f_chdir+0xa6>
    bed4:	ef a5       	ldd	r30, Y+47	; 0x2f
    bed6:	f8 a9       	ldd	r31, Y+48	; 0x30
    bed8:	94 87       	std	Z+12, r25	; 0x0c
    beda:	83 87       	std	Z+11, r24	; 0x0b
    bedc:	69 a9       	ldd	r22, Y+49	; 0x31
    bede:	7a a9       	ldd	r23, Y+50	; 0x32
    bee0:	ce 01       	movw	r24, r28
    bee2:	01 96       	adiw	r24, 0x01	; 1
    bee4:	2e d8       	rcall	.-4004   	; 0xaf42 <follow_path>
    bee6:	8c 01       	movw	r16, r24
    bee8:	89 2b       	or	r24, r25
    beea:	09 f5       	brne	.+66     	; 0xbf2e <f_chdir+0x96>
    beec:	88 a5       	ldd	r24, Y+40	; 0x28
    beee:	87 ff       	sbrs	r24, 7
    bef0:	0b c0       	rjmp	.+22     	; 0xbf08 <f_chdir+0x70>
    bef2:	ef a5       	ldd	r30, Y+47	; 0x2f
    bef4:	f8 a9       	ldd	r31, Y+48	; 0x30
    bef6:	8f 81       	ldd	r24, Y+7	; 0x07
    bef8:	98 85       	ldd	r25, Y+8	; 0x08
    befa:	a9 85       	ldd	r26, Y+9	; 0x09
    befc:	ba 85       	ldd	r27, Y+10	; 0x0a
    befe:	85 8b       	std	Z+21, r24	; 0x15
    bf00:	96 8b       	std	Z+22, r25	; 0x16
    bf02:	a7 8b       	std	Z+23, r26	; 0x17
    bf04:	b0 8f       	std	Z+24, r27	; 0x18
    bf06:	13 c0       	rjmp	.+38     	; 0xbf2e <f_chdir+0x96>
    bf08:	8d 81       	ldd	r24, Y+5	; 0x05
    bf0a:	84 ff       	sbrs	r24, 4
    bf0c:	0e c0       	rjmp	.+28     	; 0xbf2a <f_chdir+0x92>
    bf0e:	cf a4       	ldd	r12, Y+47	; 0x2f
    bf10:	d8 a8       	ldd	r13, Y+48	; 0x30
    bf12:	6b 8d       	ldd	r22, Y+27	; 0x1b
    bf14:	7c 8d       	ldd	r23, Y+28	; 0x1c
    bf16:	f6 01       	movw	r30, r12
    bf18:	80 81       	ld	r24, Z
    bf1a:	0e 94 4a 4a 	call	0x9494	; 0x9494 <ld_clust.isra.3>
    bf1e:	f6 01       	movw	r30, r12
    bf20:	65 8b       	std	Z+21, r22	; 0x15
    bf22:	76 8b       	std	Z+22, r23	; 0x16
    bf24:	87 8b       	std	Z+23, r24	; 0x17
    bf26:	90 8f       	std	Z+24, r25	; 0x18
    bf28:	02 c0       	rjmp	.+4      	; 0xbf2e <f_chdir+0x96>
    bf2a:	05 e0       	ldi	r16, 0x05	; 5
    bf2c:	10 e0       	ldi	r17, 0x00	; 0
    bf2e:	c7 01       	movw	r24, r14
    bf30:	0e 94 52 69 	call	0xd2a4	; 0xd2a4 <ff_memfree>
    bf34:	04 30       	cpi	r16, 0x04	; 4
    bf36:	11 05       	cpc	r17, r1
    bf38:	29 f4       	brne	.+10     	; 0xbf44 <f_chdir+0xac>
    bf3a:	85 e0       	ldi	r24, 0x05	; 5
    bf3c:	01 c0       	rjmp	.+2      	; 0xbf40 <f_chdir+0xa8>
    bf3e:	81 e1       	ldi	r24, 0x11	; 17
    bf40:	90 e0       	ldi	r25, 0x00	; 0
    bf42:	01 c0       	rjmp	.+2      	; 0xbf46 <f_chdir+0xae>
    bf44:	c8 01       	movw	r24, r16
    bf46:	e2 96       	adiw	r28, 0x32	; 50
    bf48:	e8 e0       	ldi	r30, 0x08	; 8
    bf4a:	0c 94 b9 e7 	jmp	0x1cf72	; 0x1cf72 <__epilogue_restores__+0x14>

0000bf4e <f_getcwd>:
    bf4e:	a8 e4       	ldi	r26, 0x48	; 72
    bf50:	b1 e0       	ldi	r27, 0x01	; 1
    bf52:	ed ea       	ldi	r30, 0xAD	; 173
    bf54:	ff e5       	ldi	r31, 0x5F	; 95
    bf56:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
    bf5a:	c9 5b       	subi	r28, 0xB9	; 185
    bf5c:	de 4f       	sbci	r29, 0xFE	; 254
    bf5e:	99 83       	std	Y+1, r25	; 0x01
    bf60:	88 83       	st	Y, r24
    bf62:	c7 54       	subi	r28, 0x47	; 71
    bf64:	d1 40       	sbci	r29, 0x01	; 1
    bf66:	4b 01       	movw	r8, r22
    bf68:	7c 01       	movw	r14, r24
    bf6a:	fc 01       	movw	r30, r24
    bf6c:	10 82       	st	Z, r1
    bf6e:	40 e0       	ldi	r20, 0x00	; 0
    bf70:	be 01       	movw	r22, r28
    bf72:	6b 5b       	subi	r22, 0xBB	; 187
    bf74:	7e 4f       	sbci	r23, 0xFE	; 254
    bf76:	ce 01       	movw	r24, r28
    bf78:	89 5b       	subi	r24, 0xB9	; 185
    bf7a:	9e 4f       	sbci	r25, 0xFE	; 254
    bf7c:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <mount_volume>
    bf80:	1c 01       	movw	r2, r24
    bf82:	89 2b       	or	r24, r25
    bf84:	09 f0       	breq	.+2      	; 0xbf88 <f_getcwd+0x3a>
    bf86:	03 c1       	rjmp	.+518    	; 0xc18e <f_getcwd+0x240>
    bf88:	cb 5b       	subi	r28, 0xBB	; 187
    bf8a:	de 4f       	sbci	r29, 0xFE	; 254
    bf8c:	88 81       	ld	r24, Y
    bf8e:	99 81       	ldd	r25, Y+1	; 0x01
    bf90:	c5 54       	subi	r28, 0x45	; 69
    bf92:	d1 40       	sbci	r29, 0x01	; 1
    bf94:	c9 5e       	subi	r28, 0xE9	; 233
    bf96:	de 4f       	sbci	r29, 0xFE	; 254
    bf98:	99 83       	std	Y+1, r25	; 0x01
    bf9a:	88 83       	st	Y, r24
    bf9c:	c7 51       	subi	r28, 0x17	; 23
    bf9e:	d1 40       	sbci	r29, 0x01	; 1
    bfa0:	80 e0       	ldi	r24, 0x00	; 0
    bfa2:	92 e0       	ldi	r25, 0x02	; 2
    bfa4:	0e 94 4f 69 	call	0xd29e	; 0xd29e <ff_memalloc>
    bfa8:	5c 01       	movw	r10, r24
    bfaa:	00 97       	sbiw	r24, 0x00	; 0
    bfac:	09 f4       	brne	.+2      	; 0xbfb0 <f_getcwd+0x62>
    bfae:	f3 c0       	rjmp	.+486    	; 0xc196 <f_getcwd+0x248>
    bfb0:	cb 5b       	subi	r28, 0xBB	; 187
    bfb2:	de 4f       	sbci	r29, 0xFE	; 254
    bfb4:	e8 81       	ld	r30, Y
    bfb6:	f9 81       	ldd	r31, Y+1	; 0x01
    bfb8:	c5 54       	subi	r28, 0x45	; 69
    bfba:	d1 40       	sbci	r29, 0x01	; 1
    bfbc:	94 87       	std	Z+12, r25	; 0x0c
    bfbe:	83 87       	std	Z+11, r24	; 0x0b
    bfc0:	85 89       	ldd	r24, Z+21	; 0x15
    bfc2:	96 89       	ldd	r25, Z+22	; 0x16
    bfc4:	a7 89       	ldd	r26, Z+23	; 0x17
    bfc6:	b0 8d       	ldd	r27, Z+24	; 0x18
    bfc8:	c3 5e       	subi	r28, 0xE3	; 227
    bfca:	de 4f       	sbci	r29, 0xFE	; 254
    bfcc:	88 83       	st	Y, r24
    bfce:	99 83       	std	Y+1, r25	; 0x01
    bfd0:	aa 83       	std	Y+2, r26	; 0x02
    bfd2:	bb 83       	std	Y+3, r27	; 0x03
    bfd4:	cd 51       	subi	r28, 0x1D	; 29
    bfd6:	d1 40       	sbci	r29, 0x01	; 1
    bfd8:	84 01       	movw	r16, r8
    bfda:	ce 01       	movw	r24, r28
    bfdc:	01 96       	adiw	r24, 0x01	; 1
    bfde:	6c 01       	movw	r12, r24
    bfe0:	c3 5e       	subi	r28, 0xE3	; 227
    bfe2:	de 4f       	sbci	r29, 0xFE	; 254
    bfe4:	48 80       	ld	r4, Y
    bfe6:	59 80       	ldd	r5, Y+1	; 0x01
    bfe8:	6a 80       	ldd	r6, Y+2	; 0x02
    bfea:	7b 80       	ldd	r7, Y+3	; 0x03
    bfec:	cd 51       	subi	r28, 0x1D	; 29
    bfee:	d1 40       	sbci	r29, 0x01	; 1
    bff0:	41 14       	cp	r4, r1
    bff2:	51 04       	cpc	r5, r1
    bff4:	61 04       	cpc	r6, r1
    bff6:	71 04       	cpc	r7, r1
    bff8:	09 f4       	brne	.+2      	; 0xbffc <f_getcwd+0xae>
    bffa:	a3 c0       	rjmp	.+326    	; 0xc142 <f_getcwd+0x1f4>
    bffc:	40 e2       	ldi	r20, 0x20	; 32
    bffe:	50 e0       	ldi	r21, 0x00	; 0
    c000:	60 e0       	ldi	r22, 0x00	; 0
    c002:	70 e0       	ldi	r23, 0x00	; 0
    c004:	ce 01       	movw	r24, r28
    c006:	89 5e       	subi	r24, 0xE9	; 233
    c008:	9e 4f       	sbci	r25, 0xFE	; 254
    c00a:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <dir_sdi>
    c00e:	00 97       	sbiw	r24, 0x00	; 0
    c010:	09 f0       	breq	.+2      	; 0xc014 <f_getcwd+0xc6>
    c012:	c6 c0       	rjmp	.+396    	; 0xc1a0 <f_getcwd+0x252>
    c014:	c3 5d       	subi	r28, 0xD3	; 211
    c016:	de 4f       	sbci	r29, 0xFE	; 254
    c018:	48 81       	ld	r20, Y
    c01a:	59 81       	ldd	r21, Y+1	; 0x01
    c01c:	6a 81       	ldd	r22, Y+2	; 0x02
    c01e:	7b 81       	ldd	r23, Y+3	; 0x03
    c020:	cd 52       	subi	r28, 0x2D	; 45
    c022:	d1 40       	sbci	r29, 0x01	; 1
    c024:	cb 5b       	subi	r28, 0xBB	; 187
    c026:	de 4f       	sbci	r29, 0xFE	; 254
    c028:	88 81       	ld	r24, Y
    c02a:	99 81       	ldd	r25, Y+1	; 0x01
    c02c:	c5 54       	subi	r28, 0x45	; 69
    c02e:	d1 40       	sbci	r29, 0x01	; 1
    c030:	0e 94 d9 4b 	call	0x97b2	; 0x97b2 <move_window>
    c034:	00 97       	sbiw	r24, 0x00	; 0
    c036:	09 f0       	breq	.+2      	; 0xc03a <f_getcwd+0xec>
    c038:	b3 c0       	rjmp	.+358    	; 0xc1a0 <f_getcwd+0x252>
    c03a:	cf 5c       	subi	r28, 0xCF	; 207
    c03c:	de 4f       	sbci	r29, 0xFE	; 254
    c03e:	68 81       	ld	r22, Y
    c040:	79 81       	ldd	r23, Y+1	; 0x01
    c042:	c1 53       	subi	r28, 0x31	; 49
    c044:	d1 40       	sbci	r29, 0x01	; 1
    c046:	cb 5b       	subi	r28, 0xBB	; 187
    c048:	de 4f       	sbci	r29, 0xFE	; 254
    c04a:	e8 81       	ld	r30, Y
    c04c:	f9 81       	ldd	r31, Y+1	; 0x01
    c04e:	c5 54       	subi	r28, 0x45	; 69
    c050:	d1 40       	sbci	r29, 0x01	; 1
    c052:	80 81       	ld	r24, Z
    c054:	0e 94 4a 4a 	call	0x9494	; 0x9494 <ld_clust.isra.3>
    c058:	c3 5e       	subi	r28, 0xE3	; 227
    c05a:	de 4f       	sbci	r29, 0xFE	; 254
    c05c:	68 83       	st	Y, r22
    c05e:	79 83       	std	Y+1, r23	; 0x01
    c060:	8a 83       	std	Y+2, r24	; 0x02
    c062:	9b 83       	std	Y+3, r25	; 0x03
    c064:	cd 51       	subi	r28, 0x1D	; 29
    c066:	d1 40       	sbci	r29, 0x01	; 1
    c068:	40 e0       	ldi	r20, 0x00	; 0
    c06a:	50 e0       	ldi	r21, 0x00	; 0
    c06c:	ba 01       	movw	r22, r20
    c06e:	ce 01       	movw	r24, r28
    c070:	89 5e       	subi	r24, 0xE9	; 233
    c072:	9e 4f       	sbci	r25, 0xFE	; 254
    c074:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <dir_sdi>
    c078:	00 97       	sbiw	r24, 0x00	; 0
    c07a:	09 f0       	breq	.+2      	; 0xc07e <f_getcwd+0x130>
    c07c:	91 c0       	rjmp	.+290    	; 0xc1a0 <f_getcwd+0x252>
    c07e:	60 e0       	ldi	r22, 0x00	; 0
    c080:	70 e0       	ldi	r23, 0x00	; 0
    c082:	ce 01       	movw	r24, r28
    c084:	89 5e       	subi	r24, 0xE9	; 233
    c086:	9e 4f       	sbci	r25, 0xFE	; 254
    c088:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <dir_read>
    c08c:	00 97       	sbiw	r24, 0x00	; 0
    c08e:	09 f0       	breq	.+2      	; 0xc092 <f_getcwd+0x144>
    c090:	89 c0       	rjmp	.+274    	; 0xc1a4 <f_getcwd+0x256>
    c092:	cf 5c       	subi	r28, 0xCF	; 207
    c094:	de 4f       	sbci	r29, 0xFE	; 254
    c096:	68 81       	ld	r22, Y
    c098:	79 81       	ldd	r23, Y+1	; 0x01
    c09a:	c1 53       	subi	r28, 0x31	; 49
    c09c:	d1 40       	sbci	r29, 0x01	; 1
    c09e:	cb 5b       	subi	r28, 0xBB	; 187
    c0a0:	de 4f       	sbci	r29, 0xFE	; 254
    c0a2:	e8 81       	ld	r30, Y
    c0a4:	f9 81       	ldd	r31, Y+1	; 0x01
    c0a6:	c5 54       	subi	r28, 0x45	; 69
    c0a8:	d1 40       	sbci	r29, 0x01	; 1
    c0aa:	80 81       	ld	r24, Z
    c0ac:	0e 94 4a 4a 	call	0x9494	; 0x9494 <ld_clust.isra.3>
    c0b0:	46 16       	cp	r4, r22
    c0b2:	57 06       	cpc	r5, r23
    c0b4:	68 06       	cpc	r6, r24
    c0b6:	79 06       	cpc	r7, r25
    c0b8:	41 f4       	brne	.+16     	; 0xc0ca <f_getcwd+0x17c>
    c0ba:	b6 01       	movw	r22, r12
    c0bc:	ce 01       	movw	r24, r28
    c0be:	89 5e       	subi	r24, 0xE9	; 233
    c0c0:	9e 4f       	sbci	r25, 0xFE	; 254
    c0c2:	0e 94 15 49 	call	0x922a	; 0x922a <get_fileinfo>
    c0c6:	f6 01       	movw	r30, r12
    c0c8:	0a c0       	rjmp	.+20     	; 0xc0de <f_getcwd+0x190>
    c0ca:	60 e0       	ldi	r22, 0x00	; 0
    c0cc:	70 e0       	ldi	r23, 0x00	; 0
    c0ce:	ce 01       	movw	r24, r28
    c0d0:	89 5e       	subi	r24, 0xE9	; 233
    c0d2:	9e 4f       	sbci	r25, 0xFE	; 254
    c0d4:	0e 94 d3 52 	call	0xa5a6	; 0xa5a6 <dir_next>
    c0d8:	00 97       	sbiw	r24, 0x00	; 0
    c0da:	89 f2       	breq	.-94     	; 0xc07e <f_getcwd+0x130>
    c0dc:	63 c0       	rjmp	.+198    	; 0xc1a4 <f_getcwd+0x256>
    c0de:	cf 01       	movw	r24, r30
    c0e0:	8c 19       	sub	r24, r12
    c0e2:	9d 09       	sbc	r25, r13
    c0e4:	31 96       	adiw	r30, 0x01	; 1
    c0e6:	25 89       	ldd	r18, Z+21	; 0x15
    c0e8:	21 11       	cpse	r18, r1
    c0ea:	f9 cf       	rjmp	.-14     	; 0xc0de <f_getcwd+0x190>
    c0ec:	9c 01       	movw	r18, r24
    c0ee:	2f 5f       	subi	r18, 0xFF	; 255
    c0f0:	3f 4f       	sbci	r19, 0xFF	; 255
    c0f2:	02 17       	cp	r16, r18
    c0f4:	13 07       	cpc	r17, r19
    c0f6:	08 f4       	brcc	.+2      	; 0xc0fa <f_getcwd+0x1ac>
    c0f8:	51 c0       	rjmp	.+162    	; 0xc19c <f_getcwd+0x24e>
    c0fa:	f6 01       	movw	r30, r12
    c0fc:	e8 0f       	add	r30, r24
    c0fe:	f9 1f       	adc	r31, r25
    c100:	98 01       	movw	r18, r16
    c102:	ce 16       	cp	r12, r30
    c104:	df 06       	cpc	r13, r31
    c106:	71 f0       	breq	.+28     	; 0xc124 <f_getcwd+0x1d6>
    c108:	21 50       	subi	r18, 0x01	; 1
    c10a:	31 09       	sbc	r19, r1
    c10c:	45 89       	ldd	r20, Z+21	; 0x15
    c10e:	c9 5b       	subi	r28, 0xB9	; 185
    c110:	de 4f       	sbci	r29, 0xFE	; 254
    c112:	a8 81       	ld	r26, Y
    c114:	b9 81       	ldd	r27, Y+1	; 0x01
    c116:	c7 54       	subi	r28, 0x47	; 71
    c118:	d1 40       	sbci	r29, 0x01	; 1
    c11a:	a2 0f       	add	r26, r18
    c11c:	b3 1f       	adc	r27, r19
    c11e:	4c 93       	st	X, r20
    c120:	31 97       	sbiw	r30, 0x01	; 1
    c122:	ef cf       	rjmp	.-34     	; 0xc102 <f_getcwd+0x1b4>
    c124:	80 95       	com	r24
    c126:	90 95       	com	r25
    c128:	08 0f       	add	r16, r24
    c12a:	19 1f       	adc	r17, r25
    c12c:	c9 5b       	subi	r28, 0xB9	; 185
    c12e:	de 4f       	sbci	r29, 0xFE	; 254
    c130:	e8 81       	ld	r30, Y
    c132:	f9 81       	ldd	r31, Y+1	; 0x01
    c134:	c7 54       	subi	r28, 0x47	; 71
    c136:	d1 40       	sbci	r29, 0x01	; 1
    c138:	e0 0f       	add	r30, r16
    c13a:	f1 1f       	adc	r31, r17
    c13c:	9f e2       	ldi	r25, 0x2F	; 47
    c13e:	90 83       	st	Z, r25
    c140:	4f cf       	rjmp	.-354    	; 0xbfe0 <f_getcwd+0x92>
    c142:	08 15       	cp	r16, r8
    c144:	19 05       	cpc	r17, r9
    c146:	61 f4       	brne	.+24     	; 0xc160 <f_getcwd+0x212>
    c148:	01 50       	subi	r16, 0x01	; 1
    c14a:	11 09       	sbc	r17, r1
    c14c:	c9 5b       	subi	r28, 0xB9	; 185
    c14e:	de 4f       	sbci	r29, 0xFE	; 254
    c150:	e8 81       	ld	r30, Y
    c152:	f9 81       	ldd	r31, Y+1	; 0x01
    c154:	c7 54       	subi	r28, 0x47	; 71
    c156:	d1 40       	sbci	r29, 0x01	; 1
    c158:	e0 0f       	add	r30, r16
    c15a:	f1 1f       	adc	r31, r17
    c15c:	8f e2       	ldi	r24, 0x2F	; 47
    c15e:	80 83       	st	Z, r24
    c160:	ef ef       	ldi	r30, 0xFF	; 255
    c162:	ee 1a       	sub	r14, r30
    c164:	fe 0a       	sbc	r15, r30
    c166:	c9 5b       	subi	r28, 0xB9	; 185
    c168:	de 4f       	sbci	r29, 0xFE	; 254
    c16a:	e8 81       	ld	r30, Y
    c16c:	f9 81       	ldd	r31, Y+1	; 0x01
    c16e:	c7 54       	subi	r28, 0x47	; 71
    c170:	d1 40       	sbci	r29, 0x01	; 1
    c172:	e0 0f       	add	r30, r16
    c174:	f1 1f       	adc	r31, r17
    c176:	80 81       	ld	r24, Z
    c178:	f7 01       	movw	r30, r14
    c17a:	31 97       	sbiw	r30, 0x01	; 1
    c17c:	80 83       	st	Z, r24
    c17e:	0f 5f       	subi	r16, 0xFF	; 255
    c180:	1f 4f       	sbci	r17, 0xFF	; 255
    c182:	08 15       	cp	r16, r8
    c184:	19 05       	cpc	r17, r9
    c186:	60 f3       	brcs	.-40     	; 0xc160 <f_getcwd+0x212>
    c188:	c5 01       	movw	r24, r10
    c18a:	0e 94 52 69 	call	0xd2a4	; 0xd2a4 <ff_memfree>
    c18e:	f7 01       	movw	r30, r14
    c190:	10 82       	st	Z, r1
    c192:	c1 01       	movw	r24, r2
    c194:	0d c0       	rjmp	.+26     	; 0xc1b0 <f_getcwd+0x262>
    c196:	81 e1       	ldi	r24, 0x11	; 17
    c198:	90 e0       	ldi	r25, 0x00	; 0
    c19a:	0a c0       	rjmp	.+20     	; 0xc1b0 <f_getcwd+0x262>
    c19c:	81 e1       	ldi	r24, 0x11	; 17
    c19e:	90 e0       	ldi	r25, 0x00	; 0
    c1a0:	1c 01       	movw	r2, r24
    c1a2:	f2 cf       	rjmp	.-28     	; 0xc188 <f_getcwd+0x23a>
    c1a4:	84 30       	cpi	r24, 0x04	; 4
    c1a6:	91 05       	cpc	r25, r1
    c1a8:	d9 f7       	brne	.-10     	; 0xc1a0 <f_getcwd+0x252>
    c1aa:	82 e0       	ldi	r24, 0x02	; 2
    c1ac:	90 e0       	ldi	r25, 0x00	; 0
    c1ae:	f8 cf       	rjmp	.-16     	; 0xc1a0 <f_getcwd+0x252>
    c1b0:	c8 5b       	subi	r28, 0xB8	; 184
    c1b2:	de 4f       	sbci	r29, 0xFE	; 254
    c1b4:	e2 e1       	ldi	r30, 0x12	; 18
    c1b6:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

0000c1ba <f_lseek>:
    c1ba:	aa e0       	ldi	r26, 0x0A	; 10
    c1bc:	b0 e0       	ldi	r27, 0x00	; 0
    c1be:	e3 ee       	ldi	r30, 0xE3	; 227
    c1c0:	f0 e6       	ldi	r31, 0x60	; 96
    c1c2:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
    c1c6:	1c 01       	movw	r2, r24
    c1c8:	6a 01       	movw	r12, r20
    c1ca:	7b 01       	movw	r14, r22
    c1cc:	be 01       	movw	r22, r28
    c1ce:	6f 5f       	subi	r22, 0xFF	; 255
    c1d0:	7f 4f       	sbci	r23, 0xFF	; 255
    c1d2:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <validate>
    c1d6:	00 97       	sbiw	r24, 0x00	; 0
    c1d8:	09 f0       	breq	.+2      	; 0xc1dc <f_lseek+0x22>
    c1da:	a6 c2       	rjmp	.+1356   	; 0xc728 <f_lseek+0x56e>
    c1dc:	f1 01       	movw	r30, r2
    c1de:	87 85       	ldd	r24, Z+15	; 0x0f
    c1e0:	90 e0       	ldi	r25, 0x00	; 0
    c1e2:	00 97       	sbiw	r24, 0x00	; 0
    c1e4:	09 f0       	breq	.+2      	; 0xc1e8 <f_lseek+0x2e>
    c1e6:	a0 c2       	rjmp	.+1344   	; 0xc728 <f_lseek+0x56e>
    c1e8:	22 a1       	ldd	r18, Z+34	; 0x22
    c1ea:	33 a1       	ldd	r19, Z+35	; 0x23
    c1ec:	21 15       	cp	r18, r1
    c1ee:	31 05       	cpc	r19, r1
    c1f0:	09 f4       	brne	.+2      	; 0xc1f4 <f_lseek+0x3a>
    c1f2:	2d c1       	rjmp	.+602    	; 0xc44e <f_lseek+0x294>
    c1f4:	ff ef       	ldi	r31, 0xFF	; 255
    c1f6:	cf 16       	cp	r12, r31
    c1f8:	df 06       	cpc	r13, r31
    c1fa:	ef 06       	cpc	r14, r31
    c1fc:	ff 06       	cpc	r15, r31
    c1fe:	09 f0       	breq	.+2      	; 0xc202 <f_lseek+0x48>
    c200:	9a c0       	rjmp	.+308    	; 0xc336 <f_lseek+0x17c>
    c202:	89 01       	movw	r16, r18
    c204:	0c 5f       	subi	r16, 0xFC	; 252
    c206:	1f 4f       	sbci	r17, 0xFF	; 255
    c208:	d9 01       	movw	r26, r18
    c20a:	4d 91       	ld	r20, X+
    c20c:	5d 91       	ld	r21, X+
    c20e:	6d 91       	ld	r22, X+
    c210:	7c 91       	ld	r23, X
    c212:	4f 83       	std	Y+7, r20	; 0x07
    c214:	58 87       	std	Y+8, r21	; 0x08
    c216:	69 87       	std	Y+9, r22	; 0x09
    c218:	7a 87       	std	Y+10, r23	; 0x0a
    c21a:	f1 01       	movw	r30, r2
    c21c:	86 80       	ldd	r8, Z+6	; 0x06
    c21e:	97 80       	ldd	r9, Z+7	; 0x07
    c220:	a0 84       	ldd	r10, Z+8	; 0x08
    c222:	b1 84       	ldd	r11, Z+9	; 0x09
    c224:	52 e0       	ldi	r21, 0x02	; 2
    c226:	c5 2e       	mov	r12, r21
    c228:	d1 2c       	mov	r13, r1
    c22a:	e1 2c       	mov	r14, r1
    c22c:	f1 2c       	mov	r15, r1
    c22e:	81 14       	cp	r8, r1
    c230:	91 04       	cpc	r9, r1
    c232:	a1 04       	cpc	r10, r1
    c234:	b1 04       	cpc	r11, r1
    c236:	09 f4       	brne	.+2      	; 0xc23a <f_lseek+0x80>
    c238:	65 c0       	rjmp	.+202    	; 0xc304 <f_lseek+0x14a>
    c23a:	24 01       	movw	r4, r8
    c23c:	35 01       	movw	r6, r10
    c23e:	1b 82       	std	Y+3, r1	; 0x03
    c240:	1c 82       	std	Y+4, r1	; 0x04
    c242:	1d 82       	std	Y+5, r1	; 0x05
    c244:	1e 82       	std	Y+6, r1	; 0x06
    c246:	2b 81       	ldd	r18, Y+3	; 0x03
    c248:	3c 81       	ldd	r19, Y+4	; 0x04
    c24a:	4d 81       	ldd	r20, Y+5	; 0x05
    c24c:	5e 81       	ldd	r21, Y+6	; 0x06
    c24e:	2f 5f       	subi	r18, 0xFF	; 255
    c250:	3f 4f       	sbci	r19, 0xFF	; 255
    c252:	4f 4f       	sbci	r20, 0xFF	; 255
    c254:	5f 4f       	sbci	r21, 0xFF	; 255
    c256:	2b 83       	std	Y+3, r18	; 0x03
    c258:	3c 83       	std	Y+4, r19	; 0x04
    c25a:	4d 83       	std	Y+5, r20	; 0x05
    c25c:	5e 83       	std	Y+6, r21	; 0x06
    c25e:	b3 01       	movw	r22, r6
    c260:	a2 01       	movw	r20, r4
    c262:	d1 01       	movw	r26, r2
    c264:	8d 91       	ld	r24, X+
    c266:	9c 91       	ld	r25, X
    c268:	0e 94 a7 4f 	call	0x9f4e	; 0x9f4e <get_fat.isra.9>
    c26c:	62 30       	cpi	r22, 0x02	; 2
    c26e:	71 05       	cpc	r23, r1
    c270:	81 05       	cpc	r24, r1
    c272:	91 05       	cpc	r25, r1
    c274:	10 f4       	brcc	.+4      	; 0xc27a <f_lseek+0xc0>
    c276:	82 e0       	ldi	r24, 0x02	; 2
    c278:	07 c0       	rjmp	.+14     	; 0xc288 <f_lseek+0xce>
    c27a:	6f 3f       	cpi	r22, 0xFF	; 255
    c27c:	ff ef       	ldi	r31, 0xFF	; 255
    c27e:	7f 07       	cpc	r23, r31
    c280:	8f 07       	cpc	r24, r31
    c282:	9f 07       	cpc	r25, r31
    c284:	29 f4       	brne	.+10     	; 0xc290 <f_lseek+0xd6>
    c286:	81 e0       	ldi	r24, 0x01	; 1
    c288:	f1 01       	movw	r30, r2
    c28a:	87 87       	std	Z+15, r24	; 0x0f
    c28c:	90 e0       	ldi	r25, 0x00	; 0
    c28e:	4c c2       	rjmp	.+1176   	; 0xc728 <f_lseek+0x56e>
    c290:	a3 01       	movw	r20, r6
    c292:	92 01       	movw	r18, r4
    c294:	2f 5f       	subi	r18, 0xFF	; 255
    c296:	3f 4f       	sbci	r19, 0xFF	; 255
    c298:	4f 4f       	sbci	r20, 0xFF	; 255
    c29a:	5f 4f       	sbci	r21, 0xFF	; 255
    c29c:	2b 01       	movw	r4, r22
    c29e:	3c 01       	movw	r6, r24
    c2a0:	62 17       	cp	r22, r18
    c2a2:	73 07       	cpc	r23, r19
    c2a4:	84 07       	cpc	r24, r20
    c2a6:	95 07       	cpc	r25, r21
    c2a8:	71 f2       	breq	.-100    	; 0xc246 <f_lseek+0x8c>
    c2aa:	f2 e0       	ldi	r31, 0x02	; 2
    c2ac:	cf 0e       	add	r12, r31
    c2ae:	d1 1c       	adc	r13, r1
    c2b0:	e1 1c       	adc	r14, r1
    c2b2:	f1 1c       	adc	r15, r1
    c2b4:	2f 81       	ldd	r18, Y+7	; 0x07
    c2b6:	38 85       	ldd	r19, Y+8	; 0x08
    c2b8:	49 85       	ldd	r20, Y+9	; 0x09
    c2ba:	5a 85       	ldd	r21, Y+10	; 0x0a
    c2bc:	2c 15       	cp	r18, r12
    c2be:	3d 05       	cpc	r19, r13
    c2c0:	4e 05       	cpc	r20, r14
    c2c2:	5f 05       	cpc	r21, r15
    c2c4:	88 f0       	brcs	.+34     	; 0xc2e8 <f_lseek+0x12e>
    c2c6:	2b 81       	ldd	r18, Y+3	; 0x03
    c2c8:	3c 81       	ldd	r19, Y+4	; 0x04
    c2ca:	4d 81       	ldd	r20, Y+5	; 0x05
    c2cc:	5e 81       	ldd	r21, Y+6	; 0x06
    c2ce:	d8 01       	movw	r26, r16
    c2d0:	2d 93       	st	X+, r18
    c2d2:	3d 93       	st	X+, r19
    c2d4:	4d 93       	st	X+, r20
    c2d6:	5c 93       	st	X, r21
    c2d8:	13 97       	sbiw	r26, 0x03	; 3
    c2da:	f8 01       	movw	r30, r16
    c2dc:	84 82       	std	Z+4, r8	; 0x04
    c2de:	95 82       	std	Z+5, r9	; 0x05
    c2e0:	a6 82       	std	Z+6, r10	; 0x06
    c2e2:	b7 82       	std	Z+7, r11	; 0x07
    c2e4:	08 5f       	subi	r16, 0xF8	; 248
    c2e6:	1f 4f       	sbci	r17, 0xFF	; 255
    c2e8:	e9 81       	ldd	r30, Y+1	; 0x01
    c2ea:	fa 81       	ldd	r31, Y+2	; 0x02
    c2ec:	81 8c       	ldd	r8, Z+25	; 0x19
    c2ee:	92 8c       	ldd	r9, Z+26	; 0x1a
    c2f0:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c2f2:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c2f4:	68 15       	cp	r22, r8
    c2f6:	79 05       	cpc	r23, r9
    c2f8:	8a 05       	cpc	r24, r10
    c2fa:	9b 05       	cpc	r25, r11
    c2fc:	18 f4       	brcc	.+6      	; 0xc304 <f_lseek+0x14a>
    c2fe:	4b 01       	movw	r8, r22
    c300:	5c 01       	movw	r10, r24
    c302:	9b cf       	rjmp	.-202    	; 0xc23a <f_lseek+0x80>
    c304:	f1 01       	movw	r30, r2
    c306:	a2 a1       	ldd	r26, Z+34	; 0x22
    c308:	b3 a1       	ldd	r27, Z+35	; 0x23
    c30a:	cd 92       	st	X+, r12
    c30c:	dd 92       	st	X+, r13
    c30e:	ed 92       	st	X+, r14
    c310:	fc 92       	st	X, r15
    c312:	13 97       	sbiw	r26, 0x03	; 3
    c314:	2f 81       	ldd	r18, Y+7	; 0x07
    c316:	38 85       	ldd	r19, Y+8	; 0x08
    c318:	49 85       	ldd	r20, Y+9	; 0x09
    c31a:	5a 85       	ldd	r21, Y+10	; 0x0a
    c31c:	2c 15       	cp	r18, r12
    c31e:	3d 05       	cpc	r19, r13
    c320:	4e 05       	cpc	r20, r14
    c322:	5f 05       	cpc	r21, r15
    c324:	08 f4       	brcc	.+2      	; 0xc328 <f_lseek+0x16e>
    c326:	f7 c1       	rjmp	.+1006   	; 0xc716 <f_lseek+0x55c>
    c328:	d8 01       	movw	r26, r16
    c32a:	1d 92       	st	X+, r1
    c32c:	1d 92       	st	X+, r1
    c32e:	1d 92       	st	X+, r1
    c330:	1c 92       	st	X, r1
    c332:	13 97       	sbiw	r26, 0x03	; 3
    c334:	ee c1       	rjmp	.+988    	; 0xc712 <f_lseek+0x558>
    c336:	f1 01       	movw	r30, r2
    c338:	82 85       	ldd	r24, Z+10	; 0x0a
    c33a:	93 85       	ldd	r25, Z+11	; 0x0b
    c33c:	a4 85       	ldd	r26, Z+12	; 0x0c
    c33e:	b5 85       	ldd	r27, Z+13	; 0x0d
    c340:	46 01       	movw	r8, r12
    c342:	57 01       	movw	r10, r14
    c344:	8c 15       	cp	r24, r12
    c346:	9d 05       	cpc	r25, r13
    c348:	ae 05       	cpc	r26, r14
    c34a:	bf 05       	cpc	r27, r15
    c34c:	10 f4       	brcc	.+4      	; 0xc352 <f_lseek+0x198>
    c34e:	4c 01       	movw	r8, r24
    c350:	5d 01       	movw	r10, r26
    c352:	f1 01       	movw	r30, r2
    c354:	80 8a       	std	Z+16, r8	; 0x10
    c356:	91 8a       	std	Z+17, r9	; 0x11
    c358:	a2 8a       	std	Z+18, r10	; 0x12
    c35a:	b3 8a       	std	Z+19, r11	; 0x13
    c35c:	81 14       	cp	r8, r1
    c35e:	91 04       	cpc	r9, r1
    c360:	a1 04       	cpc	r10, r1
    c362:	b1 04       	cpc	r11, r1
    c364:	09 f4       	brne	.+2      	; 0xc368 <f_lseek+0x1ae>
    c366:	d5 c1       	rjmp	.+938    	; 0xc712 <f_lseek+0x558>
    c368:	24 01       	movw	r4, r8
    c36a:	35 01       	movw	r6, r10
    c36c:	f1 e0       	ldi	r31, 0x01	; 1
    c36e:	4f 1a       	sub	r4, r31
    c370:	51 08       	sbc	r5, r1
    c372:	61 08       	sbc	r6, r1
    c374:	71 08       	sbc	r7, r1
    c376:	b3 01       	movw	r22, r6
    c378:	a2 01       	movw	r20, r4
    c37a:	c1 01       	movw	r24, r2
    c37c:	0e 94 72 48 	call	0x90e4	; 0x90e4 <clmt_clust>
    c380:	ab 01       	movw	r20, r22
    c382:	bc 01       	movw	r22, r24
    c384:	f1 01       	movw	r30, r2
    c386:	44 8b       	std	Z+20, r20	; 0x14
    c388:	55 8b       	std	Z+21, r21	; 0x15
    c38a:	66 8b       	std	Z+22, r22	; 0x16
    c38c:	77 8b       	std	Z+23, r23	; 0x17
    c38e:	e9 80       	ldd	r14, Y+1	; 0x01
    c390:	fa 80       	ldd	r15, Y+2	; 0x02
    c392:	c7 01       	movw	r24, r14
    c394:	0e 94 4a 48 	call	0x9094	; 0x9094 <clst2sect>
    c398:	61 15       	cp	r22, r1
    c39a:	71 05       	cpc	r23, r1
    c39c:	81 05       	cpc	r24, r1
    c39e:	91 05       	cpc	r25, r1
    c3a0:	09 f4       	brne	.+2      	; 0xc3a4 <f_lseek+0x1ea>
    c3a2:	69 cf       	rjmp	.-302    	; 0xc276 <f_lseek+0xbc>
    c3a4:	95 01       	movw	r18, r10
    c3a6:	84 01       	movw	r16, r8
    c3a8:	11 70       	andi	r17, 0x01	; 1
    c3aa:	22 27       	eor	r18, r18
    c3ac:	33 27       	eor	r19, r19
    c3ae:	01 15       	cp	r16, r1
    c3b0:	11 05       	cpc	r17, r1
    c3b2:	21 05       	cpc	r18, r1
    c3b4:	31 05       	cpc	r19, r1
    c3b6:	09 f4       	brne	.+2      	; 0xc3ba <f_lseek+0x200>
    c3b8:	ac c1       	rjmp	.+856    	; 0xc712 <f_lseek+0x558>
    c3ba:	f7 01       	movw	r30, r14
    c3bc:	81 84       	ldd	r8, Z+9	; 0x09
    c3be:	92 84       	ldd	r9, Z+10	; 0x0a
    c3c0:	f1 e0       	ldi	r31, 0x01	; 1
    c3c2:	8f 1a       	sub	r8, r31
    c3c4:	91 08       	sbc	r9, r1
    c3c6:	a1 2c       	mov	r10, r1
    c3c8:	b1 2c       	mov	r11, r1
    c3ca:	49 e0       	ldi	r20, 0x09	; 9
    c3cc:	76 94       	lsr	r7
    c3ce:	67 94       	ror	r6
    c3d0:	57 94       	ror	r5
    c3d2:	47 94       	ror	r4
    c3d4:	4a 95       	dec	r20
    c3d6:	d1 f7       	brne	.-12     	; 0xc3cc <f_lseek+0x212>
    c3d8:	48 20       	and	r4, r8
    c3da:	59 20       	and	r5, r9
    c3dc:	6a 20       	and	r6, r10
    c3de:	7b 20       	and	r7, r11
    c3e0:	53 01       	movw	r10, r6
    c3e2:	42 01       	movw	r8, r4
    c3e4:	86 0e       	add	r8, r22
    c3e6:	97 1e       	adc	r9, r23
    c3e8:	a8 1e       	adc	r10, r24
    c3ea:	b9 1e       	adc	r11, r25
    c3ec:	f1 01       	movw	r30, r2
    c3ee:	20 8d       	ldd	r18, Z+24	; 0x18
    c3f0:	31 8d       	ldd	r19, Z+25	; 0x19
    c3f2:	42 8d       	ldd	r20, Z+26	; 0x1a
    c3f4:	53 8d       	ldd	r21, Z+27	; 0x1b
    c3f6:	82 16       	cp	r8, r18
    c3f8:	93 06       	cpc	r9, r19
    c3fa:	a4 06       	cpc	r10, r20
    c3fc:	b5 06       	cpc	r11, r21
    c3fe:	09 f4       	brne	.+2      	; 0xc402 <f_lseek+0x248>
    c400:	88 c1       	rjmp	.+784    	; 0xc712 <f_lseek+0x558>
    c402:	86 85       	ldd	r24, Z+14	; 0x0e
    c404:	b1 01       	movw	r22, r2
    c406:	6c 5d       	subi	r22, 0xDC	; 220
    c408:	7f 4f       	sbci	r23, 0xFF	; 255
    c40a:	6b 01       	movw	r12, r22
    c40c:	87 ff       	sbrs	r24, 7
    c40e:	0d c0       	rjmp	.+26     	; 0xc42a <f_lseek+0x270>
    c410:	01 e0       	ldi	r16, 0x01	; 1
    c412:	10 e0       	ldi	r17, 0x00	; 0
    c414:	f7 01       	movw	r30, r14
    c416:	81 81       	ldd	r24, Z+1	; 0x01
    c418:	0e 94 1b 6a 	call	0xd436	; 0xd436 <disk_write>
    c41c:	89 2b       	or	r24, r25
    c41e:	09 f0       	breq	.+2      	; 0xc422 <f_lseek+0x268>
    c420:	32 cf       	rjmp	.-412    	; 0xc286 <f_lseek+0xcc>
    c422:	f1 01       	movw	r30, r2
    c424:	86 85       	ldd	r24, Z+14	; 0x0e
    c426:	8f 77       	andi	r24, 0x7F	; 127
    c428:	86 87       	std	Z+14, r24	; 0x0e
    c42a:	e9 81       	ldd	r30, Y+1	; 0x01
    c42c:	fa 81       	ldd	r31, Y+2	; 0x02
    c42e:	01 e0       	ldi	r16, 0x01	; 1
    c430:	10 e0       	ldi	r17, 0x00	; 0
    c432:	a5 01       	movw	r20, r10
    c434:	94 01       	movw	r18, r8
    c436:	b6 01       	movw	r22, r12
    c438:	81 81       	ldd	r24, Z+1	; 0x01
    c43a:	ed d7       	rcall	.+4058   	; 0xd416 <disk_read>
    c43c:	89 2b       	or	r24, r25
    c43e:	09 f0       	breq	.+2      	; 0xc442 <f_lseek+0x288>
    c440:	22 cf       	rjmp	.-444    	; 0xc286 <f_lseek+0xcc>
    c442:	f1 01       	movw	r30, r2
    c444:	80 8e       	std	Z+24, r8	; 0x18
    c446:	91 8e       	std	Z+25, r9	; 0x19
    c448:	a2 8e       	std	Z+26, r10	; 0x1a
    c44a:	b3 8e       	std	Z+27, r11	; 0x1b
    c44c:	62 c1       	rjmp	.+708    	; 0xc712 <f_lseek+0x558>
    c44e:	f1 01       	movw	r30, r2
    c450:	82 85       	ldd	r24, Z+10	; 0x0a
    c452:	93 85       	ldd	r25, Z+11	; 0x0b
    c454:	a4 85       	ldd	r26, Z+12	; 0x0c
    c456:	b5 85       	ldd	r27, Z+13	; 0x0d
    c458:	8c 15       	cp	r24, r12
    c45a:	9d 05       	cpc	r25, r13
    c45c:	ae 05       	cpc	r26, r14
    c45e:	bf 05       	cpc	r27, r15
    c460:	28 f4       	brcc	.+10     	; 0xc46c <f_lseek+0x2b2>
    c462:	26 85       	ldd	r18, Z+14	; 0x0e
    c464:	21 fd       	sbrc	r18, 1
    c466:	02 c0       	rjmp	.+4      	; 0xc46c <f_lseek+0x2b2>
    c468:	6c 01       	movw	r12, r24
    c46a:	7d 01       	movw	r14, r26
    c46c:	f1 01       	movw	r30, r2
    c46e:	40 88       	ldd	r4, Z+16	; 0x10
    c470:	51 88       	ldd	r5, Z+17	; 0x11
    c472:	62 88       	ldd	r6, Z+18	; 0x12
    c474:	73 88       	ldd	r7, Z+19	; 0x13
    c476:	10 8a       	std	Z+16, r1	; 0x10
    c478:	11 8a       	std	Z+17, r1	; 0x11
    c47a:	12 8a       	std	Z+18, r1	; 0x12
    c47c:	13 8a       	std	Z+19, r1	; 0x13
    c47e:	c1 14       	cp	r12, r1
    c480:	d1 04       	cpc	r13, r1
    c482:	e1 04       	cpc	r14, r1
    c484:	f1 04       	cpc	r15, r1
    c486:	09 f4       	brne	.+2      	; 0xc48a <f_lseek+0x2d0>
    c488:	48 c1       	rjmp	.+656    	; 0xc71a <f_lseek+0x560>
    c48a:	e9 81       	ldd	r30, Y+1	; 0x01
    c48c:	fa 81       	ldd	r31, Y+2	; 0x02
    c48e:	81 84       	ldd	r8, Z+9	; 0x09
    c490:	92 84       	ldd	r9, Z+10	; 0x0a
    c492:	a1 2c       	mov	r10, r1
    c494:	b1 2c       	mov	r11, r1
    c496:	39 e0       	ldi	r19, 0x09	; 9
    c498:	88 0c       	add	r8, r8
    c49a:	99 1c       	adc	r9, r9
    c49c:	aa 1c       	adc	r10, r10
    c49e:	bb 1c       	adc	r11, r11
    c4a0:	3a 95       	dec	r19
    c4a2:	d1 f7       	brne	.-12     	; 0xc498 <f_lseek+0x2de>
    c4a4:	41 14       	cp	r4, r1
    c4a6:	51 04       	cpc	r5, r1
    c4a8:	61 04       	cpc	r6, r1
    c4aa:	71 04       	cpc	r7, r1
    c4ac:	d9 f1       	breq	.+118    	; 0xc524 <f_lseek+0x36a>
    c4ae:	f1 e0       	ldi	r31, 0x01	; 1
    c4b0:	4f 1a       	sub	r4, r31
    c4b2:	51 08       	sbc	r5, r1
    c4b4:	61 08       	sbc	r6, r1
    c4b6:	71 08       	sbc	r7, r1
    c4b8:	c7 01       	movw	r24, r14
    c4ba:	b6 01       	movw	r22, r12
    c4bc:	61 50       	subi	r22, 0x01	; 1
    c4be:	71 09       	sbc	r23, r1
    c4c0:	81 09       	sbc	r24, r1
    c4c2:	91 09       	sbc	r25, r1
    c4c4:	a5 01       	movw	r20, r10
    c4c6:	94 01       	movw	r18, r8
    c4c8:	0e 94 26 e7 	call	0x1ce4c	; 0x1ce4c <__udivmodsi4>
    c4cc:	2b 83       	std	Y+3, r18	; 0x03
    c4ce:	3c 83       	std	Y+4, r19	; 0x04
    c4d0:	4d 83       	std	Y+5, r20	; 0x05
    c4d2:	5e 83       	std	Y+6, r21	; 0x06
    c4d4:	c3 01       	movw	r24, r6
    c4d6:	b2 01       	movw	r22, r4
    c4d8:	a5 01       	movw	r20, r10
    c4da:	94 01       	movw	r18, r8
    c4dc:	0e 94 26 e7 	call	0x1ce4c	; 0x1ce4c <__udivmodsi4>
    c4e0:	6b 81       	ldd	r22, Y+3	; 0x03
    c4e2:	7c 81       	ldd	r23, Y+4	; 0x04
    c4e4:	8d 81       	ldd	r24, Y+5	; 0x05
    c4e6:	9e 81       	ldd	r25, Y+6	; 0x06
    c4e8:	62 17       	cp	r22, r18
    c4ea:	73 07       	cpc	r23, r19
    c4ec:	84 07       	cpc	r24, r20
    c4ee:	95 07       	cpc	r25, r21
    c4f0:	c8 f0       	brcs	.+50     	; 0xc524 <f_lseek+0x36a>
    c4f2:	88 27       	eor	r24, r24
    c4f4:	99 27       	eor	r25, r25
    c4f6:	dc 01       	movw	r26, r24
    c4f8:	88 19       	sub	r24, r8
    c4fa:	99 09       	sbc	r25, r9
    c4fc:	aa 09       	sbc	r26, r10
    c4fe:	bb 09       	sbc	r27, r11
    c500:	48 22       	and	r4, r24
    c502:	59 22       	and	r5, r25
    c504:	6a 22       	and	r6, r26
    c506:	7b 22       	and	r7, r27
    c508:	f1 01       	movw	r30, r2
    c50a:	40 8a       	std	Z+16, r4	; 0x10
    c50c:	51 8a       	std	Z+17, r5	; 0x11
    c50e:	62 8a       	std	Z+18, r6	; 0x12
    c510:	73 8a       	std	Z+19, r7	; 0x13
    c512:	c4 18       	sub	r12, r4
    c514:	d5 08       	sbc	r13, r5
    c516:	e6 08       	sbc	r14, r6
    c518:	f7 08       	sbc	r15, r7
    c51a:	44 89       	ldd	r20, Z+20	; 0x14
    c51c:	55 89       	ldd	r21, Z+21	; 0x15
    c51e:	66 89       	ldd	r22, Z+22	; 0x16
    c520:	77 89       	ldd	r23, Z+23	; 0x17
    c522:	29 c0       	rjmp	.+82     	; 0xc576 <f_lseek+0x3bc>
    c524:	f1 01       	movw	r30, r2
    c526:	46 81       	ldd	r20, Z+6	; 0x06
    c528:	57 81       	ldd	r21, Z+7	; 0x07
    c52a:	60 85       	ldd	r22, Z+8	; 0x08
    c52c:	71 85       	ldd	r23, Z+9	; 0x09
    c52e:	41 15       	cp	r20, r1
    c530:	51 05       	cpc	r21, r1
    c532:	61 05       	cpc	r22, r1
    c534:	71 05       	cpc	r23, r1
    c536:	d1 f4       	brne	.+52     	; 0xc56c <f_lseek+0x3b2>
    c538:	40 e0       	ldi	r20, 0x00	; 0
    c53a:	50 e0       	ldi	r21, 0x00	; 0
    c53c:	ba 01       	movw	r22, r20
    c53e:	c1 01       	movw	r24, r2
    c540:	0e 94 1c 51 	call	0xa238	; 0xa238 <create_chain>
    c544:	ab 01       	movw	r20, r22
    c546:	bc 01       	movw	r22, r24
    c548:	41 30       	cpi	r20, 0x01	; 1
    c54a:	51 05       	cpc	r21, r1
    c54c:	61 05       	cpc	r22, r1
    c54e:	71 05       	cpc	r23, r1
    c550:	09 f4       	brne	.+2      	; 0xc554 <f_lseek+0x39a>
    c552:	91 ce       	rjmp	.-734    	; 0xc276 <f_lseek+0xbc>
    c554:	4f 3f       	cpi	r20, 0xFF	; 255
    c556:	ff ef       	ldi	r31, 0xFF	; 255
    c558:	5f 07       	cpc	r21, r31
    c55a:	6f 07       	cpc	r22, r31
    c55c:	7f 07       	cpc	r23, r31
    c55e:	09 f4       	brne	.+2      	; 0xc562 <f_lseek+0x3a8>
    c560:	92 ce       	rjmp	.-732    	; 0xc286 <f_lseek+0xcc>
    c562:	f1 01       	movw	r30, r2
    c564:	46 83       	std	Z+6, r20	; 0x06
    c566:	57 83       	std	Z+7, r21	; 0x07
    c568:	60 87       	std	Z+8, r22	; 0x08
    c56a:	71 87       	std	Z+9, r23	; 0x09
    c56c:	f1 01       	movw	r30, r2
    c56e:	44 8b       	std	Z+20, r20	; 0x14
    c570:	55 8b       	std	Z+21, r21	; 0x15
    c572:	66 8b       	std	Z+22, r22	; 0x16
    c574:	77 8b       	std	Z+23, r23	; 0x17
    c576:	41 15       	cp	r20, r1
    c578:	51 05       	cpc	r21, r1
    c57a:	61 05       	cpc	r22, r1
    c57c:	71 05       	cpc	r23, r1
    c57e:	09 f0       	breq	.+2      	; 0xc582 <f_lseek+0x3c8>
    c580:	40 c0       	rjmp	.+128    	; 0xc602 <f_lseek+0x448>
    c582:	c1 2c       	mov	r12, r1
    c584:	d1 2c       	mov	r13, r1
    c586:	76 01       	movw	r14, r12
    c588:	79 c0       	rjmp	.+242    	; 0xc67c <f_lseek+0x4c2>
    c58a:	c8 18       	sub	r12, r8
    c58c:	d9 08       	sbc	r13, r9
    c58e:	ea 08       	sbc	r14, r10
    c590:	fb 08       	sbc	r15, r11
    c592:	f1 01       	movw	r30, r2
    c594:	80 89       	ldd	r24, Z+16	; 0x10
    c596:	91 89       	ldd	r25, Z+17	; 0x11
    c598:	a2 89       	ldd	r26, Z+18	; 0x12
    c59a:	b3 89       	ldd	r27, Z+19	; 0x13
    c59c:	88 0d       	add	r24, r8
    c59e:	99 1d       	adc	r25, r9
    c5a0:	aa 1d       	adc	r26, r10
    c5a2:	bb 1d       	adc	r27, r11
    c5a4:	80 8b       	std	Z+16, r24	; 0x10
    c5a6:	91 8b       	std	Z+17, r25	; 0x11
    c5a8:	a2 8b       	std	Z+18, r26	; 0x12
    c5aa:	b3 8b       	std	Z+19, r27	; 0x13
    c5ac:	86 85       	ldd	r24, Z+14	; 0x0e
    c5ae:	81 ff       	sbrs	r24, 1
    c5b0:	2f c0       	rjmp	.+94     	; 0xc610 <f_lseek+0x456>
    c5b2:	c1 01       	movw	r24, r2
    c5b4:	0e 94 1c 51 	call	0xa238	; 0xa238 <create_chain>
    c5b8:	ab 01       	movw	r20, r22
    c5ba:	bc 01       	movw	r22, r24
    c5bc:	41 15       	cp	r20, r1
    c5be:	51 05       	cpc	r21, r1
    c5c0:	61 05       	cpc	r22, r1
    c5c2:	71 05       	cpc	r23, r1
    c5c4:	61 f1       	breq	.+88     	; 0xc61e <f_lseek+0x464>
    c5c6:	4f 3f       	cpi	r20, 0xFF	; 255
    c5c8:	bf ef       	ldi	r27, 0xFF	; 255
    c5ca:	5b 07       	cpc	r21, r27
    c5cc:	6b 07       	cpc	r22, r27
    c5ce:	7b 07       	cpc	r23, r27
    c5d0:	09 f4       	brne	.+2      	; 0xc5d4 <f_lseek+0x41a>
    c5d2:	59 ce       	rjmp	.-846    	; 0xc286 <f_lseek+0xcc>
    c5d4:	42 30       	cpi	r20, 0x02	; 2
    c5d6:	51 05       	cpc	r21, r1
    c5d8:	61 05       	cpc	r22, r1
    c5da:	71 05       	cpc	r23, r1
    c5dc:	08 f4       	brcc	.+2      	; 0xc5e0 <f_lseek+0x426>
    c5de:	4b ce       	rjmp	.-874    	; 0xc276 <f_lseek+0xbc>
    c5e0:	e9 81       	ldd	r30, Y+1	; 0x01
    c5e2:	fa 81       	ldd	r31, Y+2	; 0x02
    c5e4:	81 8d       	ldd	r24, Z+25	; 0x19
    c5e6:	92 8d       	ldd	r25, Z+26	; 0x1a
    c5e8:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c5ea:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c5ec:	48 17       	cp	r20, r24
    c5ee:	59 07       	cpc	r21, r25
    c5f0:	6a 07       	cpc	r22, r26
    c5f2:	7b 07       	cpc	r23, r27
    c5f4:	08 f0       	brcs	.+2      	; 0xc5f8 <f_lseek+0x43e>
    c5f6:	3f ce       	rjmp	.-898    	; 0xc276 <f_lseek+0xbc>
    c5f8:	f1 01       	movw	r30, r2
    c5fa:	44 8b       	std	Z+20, r20	; 0x14
    c5fc:	55 8b       	std	Z+21, r21	; 0x15
    c5fe:	66 8b       	std	Z+22, r22	; 0x16
    c600:	77 8b       	std	Z+23, r23	; 0x17
    c602:	8c 14       	cp	r8, r12
    c604:	9d 04       	cpc	r9, r13
    c606:	ae 04       	cpc	r10, r14
    c608:	bf 04       	cpc	r11, r15
    c60a:	08 f4       	brcc	.+2      	; 0xc60e <f_lseek+0x454>
    c60c:	be cf       	rjmp	.-132    	; 0xc58a <f_lseek+0x3d0>
    c60e:	0a c0       	rjmp	.+20     	; 0xc624 <f_lseek+0x46a>
    c610:	80 81       	ld	r24, Z
    c612:	91 81       	ldd	r25, Z+1	; 0x01
    c614:	0e 94 a7 4f 	call	0x9f4e	; 0x9f4e <get_fat.isra.9>
    c618:	ab 01       	movw	r20, r22
    c61a:	bc 01       	movw	r22, r24
    c61c:	d4 cf       	rjmp	.-88     	; 0xc5c6 <f_lseek+0x40c>
    c61e:	c1 2c       	mov	r12, r1
    c620:	d1 2c       	mov	r13, r1
    c622:	76 01       	movw	r14, r12
    c624:	f1 01       	movw	r30, r2
    c626:	80 89       	ldd	r24, Z+16	; 0x10
    c628:	91 89       	ldd	r25, Z+17	; 0x11
    c62a:	a2 89       	ldd	r26, Z+18	; 0x12
    c62c:	b3 89       	ldd	r27, Z+19	; 0x13
    c62e:	8c 0d       	add	r24, r12
    c630:	9d 1d       	adc	r25, r13
    c632:	ae 1d       	adc	r26, r14
    c634:	bf 1d       	adc	r27, r15
    c636:	80 8b       	std	Z+16, r24	; 0x10
    c638:	91 8b       	std	Z+17, r25	; 0x11
    c63a:	a2 8b       	std	Z+18, r26	; 0x12
    c63c:	b3 8b       	std	Z+19, r27	; 0x13
    c63e:	d7 01       	movw	r26, r14
    c640:	c6 01       	movw	r24, r12
    c642:	91 70       	andi	r25, 0x01	; 1
    c644:	aa 27       	eor	r26, r26
    c646:	bb 27       	eor	r27, r27
    c648:	89 2b       	or	r24, r25
    c64a:	8a 2b       	or	r24, r26
    c64c:	8b 2b       	or	r24, r27
    c64e:	09 f4       	brne	.+2      	; 0xc652 <f_lseek+0x498>
    c650:	98 cf       	rjmp	.-208    	; 0xc582 <f_lseek+0x3c8>
    c652:	89 81       	ldd	r24, Y+1	; 0x01
    c654:	9a 81       	ldd	r25, Y+2	; 0x02
    c656:	0e 94 4a 48 	call	0x9094	; 0x9094 <clst2sect>
    c65a:	61 15       	cp	r22, r1
    c65c:	71 05       	cpc	r23, r1
    c65e:	81 05       	cpc	r24, r1
    c660:	91 05       	cpc	r25, r1
    c662:	09 f4       	brne	.+2      	; 0xc666 <f_lseek+0x4ac>
    c664:	08 ce       	rjmp	.-1008   	; 0xc276 <f_lseek+0xbc>
    c666:	29 e0       	ldi	r18, 0x09	; 9
    c668:	f6 94       	lsr	r15
    c66a:	e7 94       	ror	r14
    c66c:	d7 94       	ror	r13
    c66e:	c7 94       	ror	r12
    c670:	2a 95       	dec	r18
    c672:	d1 f7       	brne	.-12     	; 0xc668 <f_lseek+0x4ae>
    c674:	c6 0e       	add	r12, r22
    c676:	d7 1e       	adc	r13, r23
    c678:	e8 1e       	adc	r14, r24
    c67a:	f9 1e       	adc	r15, r25
    c67c:	f1 01       	movw	r30, r2
    c67e:	80 89       	ldd	r24, Z+16	; 0x10
    c680:	91 89       	ldd	r25, Z+17	; 0x11
    c682:	a2 89       	ldd	r26, Z+18	; 0x12
    c684:	b3 89       	ldd	r27, Z+19	; 0x13
    c686:	42 85       	ldd	r20, Z+10	; 0x0a
    c688:	53 85       	ldd	r21, Z+11	; 0x0b
    c68a:	64 85       	ldd	r22, Z+12	; 0x0c
    c68c:	75 85       	ldd	r23, Z+13	; 0x0d
    c68e:	48 17       	cp	r20, r24
    c690:	59 07       	cpc	r21, r25
    c692:	6a 07       	cpc	r22, r26
    c694:	7b 07       	cpc	r23, r27
    c696:	38 f4       	brcc	.+14     	; 0xc6a6 <f_lseek+0x4ec>
    c698:	82 87       	std	Z+10, r24	; 0x0a
    c69a:	93 87       	std	Z+11, r25	; 0x0b
    c69c:	a4 87       	std	Z+12, r26	; 0x0c
    c69e:	b5 87       	std	Z+13, r27	; 0x0d
    c6a0:	26 85       	ldd	r18, Z+14	; 0x0e
    c6a2:	20 64       	ori	r18, 0x40	; 64
    c6a4:	26 87       	std	Z+14, r18	; 0x0e
    c6a6:	91 70       	andi	r25, 0x01	; 1
    c6a8:	aa 27       	eor	r26, r26
    c6aa:	bb 27       	eor	r27, r27
    c6ac:	89 2b       	or	r24, r25
    c6ae:	8a 2b       	or	r24, r26
    c6b0:	8b 2b       	or	r24, r27
    c6b2:	79 f1       	breq	.+94     	; 0xc712 <f_lseek+0x558>
    c6b4:	f1 01       	movw	r30, r2
    c6b6:	20 8d       	ldd	r18, Z+24	; 0x18
    c6b8:	31 8d       	ldd	r19, Z+25	; 0x19
    c6ba:	42 8d       	ldd	r20, Z+26	; 0x1a
    c6bc:	53 8d       	ldd	r21, Z+27	; 0x1b
    c6be:	2c 15       	cp	r18, r12
    c6c0:	3d 05       	cpc	r19, r13
    c6c2:	4e 05       	cpc	r20, r14
    c6c4:	5f 05       	cpc	r21, r15
    c6c6:	29 f1       	breq	.+74     	; 0xc712 <f_lseek+0x558>
    c6c8:	86 85       	ldd	r24, Z+14	; 0x0e
    c6ca:	b1 01       	movw	r22, r2
    c6cc:	6c 5d       	subi	r22, 0xDC	; 220
    c6ce:	7f 4f       	sbci	r23, 0xFF	; 255
    c6d0:	5b 01       	movw	r10, r22
    c6d2:	87 ff       	sbrs	r24, 7
    c6d4:	0d c0       	rjmp	.+26     	; 0xc6f0 <f_lseek+0x536>
    c6d6:	e9 81       	ldd	r30, Y+1	; 0x01
    c6d8:	fa 81       	ldd	r31, Y+2	; 0x02
    c6da:	01 e0       	ldi	r16, 0x01	; 1
    c6dc:	10 e0       	ldi	r17, 0x00	; 0
    c6de:	81 81       	ldd	r24, Z+1	; 0x01
    c6e0:	aa d6       	rcall	.+3412   	; 0xd436 <disk_write>
    c6e2:	89 2b       	or	r24, r25
    c6e4:	09 f0       	breq	.+2      	; 0xc6e8 <f_lseek+0x52e>
    c6e6:	cf cd       	rjmp	.-1122   	; 0xc286 <f_lseek+0xcc>
    c6e8:	f1 01       	movw	r30, r2
    c6ea:	86 85       	ldd	r24, Z+14	; 0x0e
    c6ec:	8f 77       	andi	r24, 0x7F	; 127
    c6ee:	86 87       	std	Z+14, r24	; 0x0e
    c6f0:	e9 81       	ldd	r30, Y+1	; 0x01
    c6f2:	fa 81       	ldd	r31, Y+2	; 0x02
    c6f4:	01 e0       	ldi	r16, 0x01	; 1
    c6f6:	10 e0       	ldi	r17, 0x00	; 0
    c6f8:	a7 01       	movw	r20, r14
    c6fa:	96 01       	movw	r18, r12
    c6fc:	b5 01       	movw	r22, r10
    c6fe:	81 81       	ldd	r24, Z+1	; 0x01
    c700:	8a d6       	rcall	.+3348   	; 0xd416 <disk_read>
    c702:	89 2b       	or	r24, r25
    c704:	09 f0       	breq	.+2      	; 0xc708 <f_lseek+0x54e>
    c706:	bf cd       	rjmp	.-1154   	; 0xc286 <f_lseek+0xcc>
    c708:	f1 01       	movw	r30, r2
    c70a:	c0 8e       	std	Z+24, r12	; 0x18
    c70c:	d1 8e       	std	Z+25, r13	; 0x19
    c70e:	e2 8e       	std	Z+26, r14	; 0x1a
    c710:	f3 8e       	std	Z+27, r15	; 0x1b
    c712:	80 e0       	ldi	r24, 0x00	; 0
    c714:	bb cd       	rjmp	.-1162   	; 0xc28c <f_lseek+0xd2>
    c716:	81 e1       	ldi	r24, 0x11	; 17
    c718:	b9 cd       	rjmp	.-1166   	; 0xc28c <f_lseek+0xd2>
    c71a:	80 e0       	ldi	r24, 0x00	; 0
    c71c:	90 e0       	ldi	r25, 0x00	; 0
    c71e:	dc 01       	movw	r26, r24
    c720:	c1 2c       	mov	r12, r1
    c722:	d1 2c       	mov	r13, r1
    c724:	76 01       	movw	r14, r12
    c726:	bf cf       	rjmp	.-130    	; 0xc6a6 <f_lseek+0x4ec>
    c728:	2a 96       	adiw	r28, 0x0a	; 10
    c72a:	e2 e1       	ldi	r30, 0x12	; 18
    c72c:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

0000c730 <f_opendir>:
    c730:	a4 e0       	ldi	r26, 0x04	; 4
    c732:	b0 e0       	ldi	r27, 0x00	; 0
    c734:	ee e9       	ldi	r30, 0x9E	; 158
    c736:	f3 e6       	ldi	r31, 0x63	; 99
    c738:	0c 94 9d e7 	jmp	0x1cf3a	; 0x1cf3a <__prologue_saves__+0x14>
    c73c:	7c 83       	std	Y+4, r23	; 0x04
    c73e:	6b 83       	std	Y+3, r22	; 0x03
    c740:	00 97       	sbiw	r24, 0x00	; 0
    c742:	09 f4       	brne	.+2      	; 0xc746 <f_opendir+0x16>
    c744:	48 c0       	rjmp	.+144    	; 0xc7d6 <f_opendir+0xa6>
    c746:	8c 01       	movw	r16, r24
    c748:	40 e0       	ldi	r20, 0x00	; 0
    c74a:	be 01       	movw	r22, r28
    c74c:	6f 5f       	subi	r22, 0xFF	; 255
    c74e:	7f 4f       	sbci	r23, 0xFF	; 255
    c750:	ce 01       	movw	r24, r28
    c752:	03 96       	adiw	r24, 0x03	; 3
    c754:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <mount_volume>
    c758:	7c 01       	movw	r14, r24
    c75a:	89 2b       	or	r24, r25
    c75c:	b9 f5       	brne	.+110    	; 0xc7cc <f_opendir+0x9c>
    c75e:	89 81       	ldd	r24, Y+1	; 0x01
    c760:	9a 81       	ldd	r25, Y+2	; 0x02
    c762:	f8 01       	movw	r30, r16
    c764:	91 83       	std	Z+1, r25	; 0x01
    c766:	80 83       	st	Z, r24
    c768:	80 e0       	ldi	r24, 0x00	; 0
    c76a:	92 e0       	ldi	r25, 0x02	; 2
    c76c:	98 d5       	rcall	.+2864   	; 0xd29e <ff_memalloc>
    c76e:	6c 01       	movw	r12, r24
    c770:	00 97       	sbiw	r24, 0x00	; 0
    c772:	99 f1       	breq	.+102    	; 0xc7da <f_opendir+0xaa>
    c774:	e9 81       	ldd	r30, Y+1	; 0x01
    c776:	fa 81       	ldd	r31, Y+2	; 0x02
    c778:	94 87       	std	Z+12, r25	; 0x0c
    c77a:	83 87       	std	Z+11, r24	; 0x0b
    c77c:	6b 81       	ldd	r22, Y+3	; 0x03
    c77e:	7c 81       	ldd	r23, Y+4	; 0x04
    c780:	c8 01       	movw	r24, r16
    c782:	0e 94 a1 57 	call	0xaf42	; 0xaf42 <follow_path>
    c786:	7c 01       	movw	r14, r24
    c788:	89 2b       	or	r24, r25
    c78a:	b9 f4       	brne	.+46     	; 0xc7ba <f_opendir+0x8a>
    c78c:	f8 01       	movw	r30, r16
    c78e:	87 a1       	ldd	r24, Z+39	; 0x27
    c790:	87 fd       	sbrc	r24, 7
    c792:	28 c0       	rjmp	.+80     	; 0xc7e4 <f_opendir+0xb4>
    c794:	84 81       	ldd	r24, Z+4	; 0x04
    c796:	84 ff       	sbrs	r24, 4
    c798:	0d c0       	rjmp	.+26     	; 0xc7b4 <f_opendir+0x84>
    c79a:	62 8d       	ldd	r22, Z+26	; 0x1a
    c79c:	73 8d       	ldd	r23, Z+27	; 0x1b
    c79e:	e9 81       	ldd	r30, Y+1	; 0x01
    c7a0:	fa 81       	ldd	r31, Y+2	; 0x02
    c7a2:	80 81       	ld	r24, Z
    c7a4:	0e 94 4a 4a 	call	0x9494	; 0x9494 <ld_clust.isra.3>
    c7a8:	f8 01       	movw	r30, r16
    c7aa:	66 83       	std	Z+6, r22	; 0x06
    c7ac:	77 83       	std	Z+7, r23	; 0x07
    c7ae:	80 87       	std	Z+8, r24	; 0x08
    c7b0:	91 87       	std	Z+9, r25	; 0x09
    c7b2:	18 c0       	rjmp	.+48     	; 0xc7e4 <f_opendir+0xb4>
    c7b4:	95 e0       	ldi	r25, 0x05	; 5
    c7b6:	e9 2e       	mov	r14, r25
    c7b8:	f1 2c       	mov	r15, r1
    c7ba:	c6 01       	movw	r24, r12
    c7bc:	73 d5       	rcall	.+2790   	; 0xd2a4 <ff_memfree>
    c7be:	f4 e0       	ldi	r31, 0x04	; 4
    c7c0:	ef 16       	cp	r14, r31
    c7c2:	f1 04       	cpc	r15, r1
    c7c4:	f1 f0       	breq	.+60     	; 0xc802 <f_opendir+0xd2>
    c7c6:	e1 14       	cp	r14, r1
    c7c8:	f1 04       	cpc	r15, r1
    c7ca:	49 f0       	breq	.+18     	; 0xc7de <f_opendir+0xae>
    c7cc:	f8 01       	movw	r30, r16
    c7ce:	11 82       	std	Z+1, r1	; 0x01
    c7d0:	10 82       	st	Z, r1
    c7d2:	c7 01       	movw	r24, r14
    c7d4:	1a c0       	rjmp	.+52     	; 0xc80a <f_opendir+0xda>
    c7d6:	89 e0       	ldi	r24, 0x09	; 9
    c7d8:	03 c0       	rjmp	.+6      	; 0xc7e0 <f_opendir+0xb0>
    c7da:	81 e1       	ldi	r24, 0x11	; 17
    c7dc:	01 c0       	rjmp	.+2      	; 0xc7e0 <f_opendir+0xb0>
    c7de:	80 e0       	ldi	r24, 0x00	; 0
    c7e0:	90 e0       	ldi	r25, 0x00	; 0
    c7e2:	13 c0       	rjmp	.+38     	; 0xc80a <f_opendir+0xda>
    c7e4:	e9 81       	ldd	r30, Y+1	; 0x01
    c7e6:	fa 81       	ldd	r31, Y+2	; 0x02
    c7e8:	85 81       	ldd	r24, Z+5	; 0x05
    c7ea:	96 81       	ldd	r25, Z+6	; 0x06
    c7ec:	f8 01       	movw	r30, r16
    c7ee:	93 83       	std	Z+3, r25	; 0x03
    c7f0:	82 83       	std	Z+2, r24	; 0x02
    c7f2:	40 e0       	ldi	r20, 0x00	; 0
    c7f4:	50 e0       	ldi	r21, 0x00	; 0
    c7f6:	ba 01       	movw	r22, r20
    c7f8:	c8 01       	movw	r24, r16
    c7fa:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <dir_sdi>
    c7fe:	7c 01       	movw	r14, r24
    c800:	dc cf       	rjmp	.-72     	; 0xc7ba <f_opendir+0x8a>
    c802:	85 e0       	ldi	r24, 0x05	; 5
    c804:	e8 2e       	mov	r14, r24
    c806:	f1 2c       	mov	r15, r1
    c808:	e1 cf       	rjmp	.-62     	; 0xc7cc <f_opendir+0x9c>
    c80a:	24 96       	adiw	r28, 0x04	; 4
    c80c:	e8 e0       	ldi	r30, 0x08	; 8
    c80e:	0c 94 b9 e7 	jmp	0x1cf72	; 0x1cf72 <__epilogue_restores__+0x14>

0000c812 <f_closedir>:
    c812:	a2 e0       	ldi	r26, 0x02	; 2
    c814:	b0 e0       	ldi	r27, 0x00	; 0
    c816:	ef e0       	ldi	r30, 0x0F	; 15
    c818:	f4 e6       	ldi	r31, 0x64	; 100
    c81a:	0c 94 a1 e7 	jmp	0x1cf42	; 0x1cf42 <__prologue_saves__+0x1c>
    c81e:	8c 01       	movw	r16, r24
    c820:	be 01       	movw	r22, r28
    c822:	6f 5f       	subi	r22, 0xFF	; 255
    c824:	7f 4f       	sbci	r23, 0xFF	; 255
    c826:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <validate>
    c82a:	00 97       	sbiw	r24, 0x00	; 0
    c82c:	19 f4       	brne	.+6      	; 0xc834 <f_closedir+0x22>
    c82e:	f8 01       	movw	r30, r16
    c830:	11 82       	std	Z+1, r1	; 0x01
    c832:	10 82       	st	Z, r1
    c834:	22 96       	adiw	r28, 0x02	; 2
    c836:	e4 e0       	ldi	r30, 0x04	; 4
    c838:	0c 94 bd e7 	jmp	0x1cf7a	; 0x1cf7a <__epilogue_restores__+0x1c>

0000c83c <f_readdir>:
    c83c:	a2 e0       	ldi	r26, 0x02	; 2
    c83e:	b0 e0       	ldi	r27, 0x00	; 0
    c840:	e4 e2       	ldi	r30, 0x24	; 36
    c842:	f4 e6       	ldi	r31, 0x64	; 100
    c844:	0c 94 9b e7 	jmp	0x1cf36	; 0x1cf36 <__prologue_saves__+0x10>
    c848:	7c 01       	movw	r14, r24
    c84a:	5b 01       	movw	r10, r22
    c84c:	be 01       	movw	r22, r28
    c84e:	6f 5f       	subi	r22, 0xFF	; 255
    c850:	7f 4f       	sbci	r23, 0xFF	; 255
    c852:	0e 94 e9 48 	call	0x91d2	; 0x91d2 <validate>
    c856:	00 97       	sbiw	r24, 0x00	; 0
    c858:	89 f5       	brne	.+98     	; 0xc8bc <f_readdir+0x80>
    c85a:	a1 14       	cp	r10, r1
    c85c:	b1 04       	cpc	r11, r1
    c85e:	39 f4       	brne	.+14     	; 0xc86e <f_readdir+0x32>
    c860:	40 e0       	ldi	r20, 0x00	; 0
    c862:	50 e0       	ldi	r21, 0x00	; 0
    c864:	ba 01       	movw	r22, r20
    c866:	c7 01       	movw	r24, r14
    c868:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <dir_sdi>
    c86c:	27 c0       	rjmp	.+78     	; 0xc8bc <f_readdir+0x80>
    c86e:	80 e0       	ldi	r24, 0x00	; 0
    c870:	92 e0       	ldi	r25, 0x02	; 2
    c872:	15 d5       	rcall	.+2602   	; 0xd29e <ff_memalloc>
    c874:	6c 01       	movw	r12, r24
    c876:	00 97       	sbiw	r24, 0x00	; 0
    c878:	f9 f0       	breq	.+62     	; 0xc8b8 <f_readdir+0x7c>
    c87a:	e9 81       	ldd	r30, Y+1	; 0x01
    c87c:	fa 81       	ldd	r31, Y+2	; 0x02
    c87e:	94 87       	std	Z+12, r25	; 0x0c
    c880:	83 87       	std	Z+11, r24	; 0x0b
    c882:	60 e0       	ldi	r22, 0x00	; 0
    c884:	70 e0       	ldi	r23, 0x00	; 0
    c886:	c7 01       	movw	r24, r14
    c888:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <dir_read>
    c88c:	8c 01       	movw	r16, r24
    c88e:	8b 7f       	andi	r24, 0xFB	; 251
    c890:	89 2b       	or	r24, r25
    c892:	71 f4       	brne	.+28     	; 0xc8b0 <f_readdir+0x74>
    c894:	b5 01       	movw	r22, r10
    c896:	c7 01       	movw	r24, r14
    c898:	0e 94 15 49 	call	0x922a	; 0x922a <get_fileinfo>
    c89c:	60 e0       	ldi	r22, 0x00	; 0
    c89e:	70 e0       	ldi	r23, 0x00	; 0
    c8a0:	c7 01       	movw	r24, r14
    c8a2:	0e 94 d3 52 	call	0xa5a6	; 0xa5a6 <dir_next>
    c8a6:	8c 01       	movw	r16, r24
    c8a8:	04 97       	sbiw	r24, 0x04	; 4
    c8aa:	11 f4       	brne	.+4      	; 0xc8b0 <f_readdir+0x74>
    c8ac:	00 e0       	ldi	r16, 0x00	; 0
    c8ae:	10 e0       	ldi	r17, 0x00	; 0
    c8b0:	c6 01       	movw	r24, r12
    c8b2:	f8 d4       	rcall	.+2544   	; 0xd2a4 <ff_memfree>
    c8b4:	c8 01       	movw	r24, r16
    c8b6:	02 c0       	rjmp	.+4      	; 0xc8bc <f_readdir+0x80>
    c8b8:	81 e1       	ldi	r24, 0x11	; 17
    c8ba:	90 e0       	ldi	r25, 0x00	; 0
    c8bc:	22 96       	adiw	r28, 0x02	; 2
    c8be:	ea e0       	ldi	r30, 0x0A	; 10
    c8c0:	0c 94 b7 e7 	jmp	0x1cf6e	; 0x1cf6e <__epilogue_restores__+0x10>

0000c8c4 <f_stat>:
    c8c4:	a0 e3       	ldi	r26, 0x30	; 48
    c8c6:	b0 e0       	ldi	r27, 0x00	; 0
    c8c8:	e8 e6       	ldi	r30, 0x68	; 104
    c8ca:	f4 e6       	ldi	r31, 0x64	; 100
    c8cc:	0c 94 9d e7 	jmp	0x1cf3a	; 0x1cf3a <__prologue_saves__+0x14>
    c8d0:	98 ab       	std	Y+48, r25	; 0x30
    c8d2:	8f a7       	std	Y+47, r24	; 0x2f
    c8d4:	6b 01       	movw	r12, r22
    c8d6:	40 e0       	ldi	r20, 0x00	; 0
    c8d8:	be 01       	movw	r22, r28
    c8da:	6f 5f       	subi	r22, 0xFF	; 255
    c8dc:	7f 4f       	sbci	r23, 0xFF	; 255
    c8de:	ce 01       	movw	r24, r28
    c8e0:	8f 96       	adiw	r24, 0x2f	; 47
    c8e2:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <mount_volume>
    c8e6:	00 97       	sbiw	r24, 0x00	; 0
    c8e8:	39 f5       	brne	.+78     	; 0xc938 <f_stat+0x74>
    c8ea:	80 e0       	ldi	r24, 0x00	; 0
    c8ec:	92 e0       	ldi	r25, 0x02	; 2
    c8ee:	d7 d4       	rcall	.+2478   	; 0xd29e <ff_memalloc>
    c8f0:	7c 01       	movw	r14, r24
    c8f2:	00 97       	sbiw	r24, 0x00	; 0
    c8f4:	f9 f0       	breq	.+62     	; 0xc934 <f_stat+0x70>
    c8f6:	e9 81       	ldd	r30, Y+1	; 0x01
    c8f8:	fa 81       	ldd	r31, Y+2	; 0x02
    c8fa:	94 87       	std	Z+12, r25	; 0x0c
    c8fc:	83 87       	std	Z+11, r24	; 0x0b
    c8fe:	6f a5       	ldd	r22, Y+47	; 0x2f
    c900:	78 a9       	ldd	r23, Y+48	; 0x30
    c902:	ce 01       	movw	r24, r28
    c904:	01 96       	adiw	r24, 0x01	; 1
    c906:	0e 94 a1 57 	call	0xaf42	; 0xaf42 <follow_path>
    c90a:	8c 01       	movw	r16, r24
    c90c:	89 2b       	or	r24, r25
    c90e:	71 f4       	brne	.+28     	; 0xc92c <f_stat+0x68>
    c910:	88 a5       	ldd	r24, Y+40	; 0x28
    c912:	87 fd       	sbrc	r24, 7
    c914:	09 c0       	rjmp	.+18     	; 0xc928 <f_stat+0x64>
    c916:	c1 14       	cp	r12, r1
    c918:	d1 04       	cpc	r13, r1
    c91a:	41 f0       	breq	.+16     	; 0xc92c <f_stat+0x68>
    c91c:	b6 01       	movw	r22, r12
    c91e:	ce 01       	movw	r24, r28
    c920:	01 96       	adiw	r24, 0x01	; 1
    c922:	0e 94 15 49 	call	0x922a	; 0x922a <get_fileinfo>
    c926:	02 c0       	rjmp	.+4      	; 0xc92c <f_stat+0x68>
    c928:	06 e0       	ldi	r16, 0x06	; 6
    c92a:	10 e0       	ldi	r17, 0x00	; 0
    c92c:	c7 01       	movw	r24, r14
    c92e:	ba d4       	rcall	.+2420   	; 0xd2a4 <ff_memfree>
    c930:	c8 01       	movw	r24, r16
    c932:	02 c0       	rjmp	.+4      	; 0xc938 <f_stat+0x74>
    c934:	81 e1       	ldi	r24, 0x11	; 17
    c936:	90 e0       	ldi	r25, 0x00	; 0
    c938:	e0 96       	adiw	r28, 0x30	; 48
    c93a:	e8 e0       	ldi	r30, 0x08	; 8
    c93c:	0c 94 b9 e7 	jmp	0x1cf72	; 0x1cf72 <__epilogue_restores__+0x14>

0000c940 <f_getfree>:
    c940:	aa e0       	ldi	r26, 0x0A	; 10
    c942:	b0 e0       	ldi	r27, 0x00	; 0
    c944:	e6 ea       	ldi	r30, 0xA6	; 166
    c946:	f4 e6       	ldi	r31, 0x64	; 100
    c948:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
    c94c:	9c 83       	std	Y+4, r25	; 0x04
    c94e:	8b 83       	std	Y+3, r24	; 0x03
    c950:	7e 83       	std	Y+6, r23	; 0x06
    c952:	6d 83       	std	Y+5, r22	; 0x05
    c954:	7a 01       	movw	r14, r20
    c956:	40 e0       	ldi	r20, 0x00	; 0
    c958:	be 01       	movw	r22, r28
    c95a:	6f 5f       	subi	r22, 0xFF	; 255
    c95c:	7f 4f       	sbci	r23, 0xFF	; 255
    c95e:	ce 01       	movw	r24, r28
    c960:	03 96       	adiw	r24, 0x03	; 3
    c962:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <mount_volume>
    c966:	8c 01       	movw	r16, r24
    c968:	89 2b       	or	r24, r25
    c96a:	09 f0       	breq	.+2      	; 0xc96e <f_getfree+0x2e>
    c96c:	c4 c0       	rjmp	.+392    	; 0xcaf6 <f_getfree+0x1b6>
    c96e:	69 80       	ldd	r6, Y+1	; 0x01
    c970:	7a 80       	ldd	r7, Y+2	; 0x02
    c972:	d7 01       	movw	r26, r14
    c974:	6d 92       	st	X+, r6
    c976:	7c 92       	st	X, r7
    c978:	f3 01       	movw	r30, r6
    c97a:	81 89       	ldd	r24, Z+17	; 0x11
    c97c:	92 89       	ldd	r25, Z+18	; 0x12
    c97e:	a3 89       	ldd	r26, Z+19	; 0x13
    c980:	b4 89       	ldd	r27, Z+20	; 0x14
    c982:	81 8c       	ldd	r8, Z+25	; 0x19
    c984:	92 8c       	ldd	r9, Z+26	; 0x1a
    c986:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c988:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c98a:	b5 01       	movw	r22, r10
    c98c:	a4 01       	movw	r20, r8
    c98e:	42 50       	subi	r20, 0x02	; 2
    c990:	51 09       	sbc	r21, r1
    c992:	61 09       	sbc	r22, r1
    c994:	71 09       	sbc	r23, r1
    c996:	48 17       	cp	r20, r24
    c998:	59 07       	cpc	r21, r25
    c99a:	6a 07       	cpc	r22, r26
    c99c:	7b 07       	cpc	r23, r27
    c99e:	38 f0       	brcs	.+14     	; 0xc9ae <f_getfree+0x6e>
    c9a0:	ed 81       	ldd	r30, Y+5	; 0x05
    c9a2:	fe 81       	ldd	r31, Y+6	; 0x06
    c9a4:	80 83       	st	Z, r24
    c9a6:	91 83       	std	Z+1, r25	; 0x01
    c9a8:	a2 83       	std	Z+2, r26	; 0x02
    c9aa:	b3 83       	std	Z+3, r27	; 0x03
    c9ac:	a4 c0       	rjmp	.+328    	; 0xcaf6 <f_getfree+0x1b6>
    c9ae:	80 81       	ld	r24, Z
    c9b0:	81 30       	cpi	r24, 0x01	; 1
    c9b2:	a1 f5       	brne	.+104    	; 0xca1c <f_getfree+0xdc>
    c9b4:	82 e0       	ldi	r24, 0x02	; 2
    c9b6:	88 2e       	mov	r8, r24
    c9b8:	91 2c       	mov	r9, r1
    c9ba:	a1 2c       	mov	r10, r1
    c9bc:	b1 2c       	mov	r11, r1
    c9be:	c1 2c       	mov	r12, r1
    c9c0:	d1 2c       	mov	r13, r1
    c9c2:	76 01       	movw	r14, r12
    c9c4:	b5 01       	movw	r22, r10
    c9c6:	a4 01       	movw	r20, r8
    c9c8:	c3 01       	movw	r24, r6
    c9ca:	0e 94 a7 4f 	call	0x9f4e	; 0x9f4e <get_fat.isra.9>
    c9ce:	6f 3f       	cpi	r22, 0xFF	; 255
    c9d0:	bf ef       	ldi	r27, 0xFF	; 255
    c9d2:	7b 07       	cpc	r23, r27
    c9d4:	8b 07       	cpc	r24, r27
    c9d6:	9b 07       	cpc	r25, r27
    c9d8:	09 f4       	brne	.+2      	; 0xc9dc <f_getfree+0x9c>
    c9da:	76 c0       	rjmp	.+236    	; 0xcac8 <f_getfree+0x188>
    c9dc:	61 30       	cpi	r22, 0x01	; 1
    c9de:	71 05       	cpc	r23, r1
    c9e0:	81 05       	cpc	r24, r1
    c9e2:	91 05       	cpc	r25, r1
    c9e4:	09 f4       	brne	.+2      	; 0xc9e8 <f_getfree+0xa8>
    c9e6:	73 c0       	rjmp	.+230    	; 0xcace <f_getfree+0x18e>
    c9e8:	67 2b       	or	r22, r23
    c9ea:	68 2b       	or	r22, r24
    c9ec:	69 2b       	or	r22, r25
    c9ee:	29 f4       	brne	.+10     	; 0xc9fa <f_getfree+0xba>
    c9f0:	ef ef       	ldi	r30, 0xFF	; 255
    c9f2:	ce 1a       	sub	r12, r30
    c9f4:	de 0a       	sbc	r13, r30
    c9f6:	ee 0a       	sbc	r14, r30
    c9f8:	fe 0a       	sbc	r15, r30
    c9fa:	ff ef       	ldi	r31, 0xFF	; 255
    c9fc:	8f 1a       	sub	r8, r31
    c9fe:	9f 0a       	sbc	r9, r31
    ca00:	af 0a       	sbc	r10, r31
    ca02:	bf 0a       	sbc	r11, r31
    ca04:	e9 81       	ldd	r30, Y+1	; 0x01
    ca06:	fa 81       	ldd	r31, Y+2	; 0x02
    ca08:	81 8d       	ldd	r24, Z+25	; 0x19
    ca0a:	92 8d       	ldd	r25, Z+26	; 0x1a
    ca0c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    ca0e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    ca10:	88 16       	cp	r8, r24
    ca12:	99 06       	cpc	r9, r25
    ca14:	aa 06       	cpc	r10, r26
    ca16:	bb 06       	cpc	r11, r27
    ca18:	a8 f2       	brcs	.-86     	; 0xc9c4 <f_getfree+0x84>
    ca1a:	5d c0       	rjmp	.+186    	; 0xcad6 <f_getfree+0x196>
    ca1c:	f3 01       	movw	r30, r6
    ca1e:	45 a0       	ldd	r4, Z+37	; 0x25
    ca20:	56 a0       	ldd	r5, Z+38	; 0x26
    ca22:	67 a0       	ldd	r6, Z+39	; 0x27
    ca24:	70 a4       	ldd	r7, Z+40	; 0x28
    ca26:	21 2c       	mov	r2, r1
    ca28:	31 2c       	mov	r3, r1
    ca2a:	c1 2c       	mov	r12, r1
    ca2c:	d1 2c       	mov	r13, r1
    ca2e:	76 01       	movw	r14, r12
    ca30:	21 14       	cp	r2, r1
    ca32:	31 04       	cpc	r3, r1
    ca34:	b1 f4       	brne	.+44     	; 0xca62 <f_getfree+0x122>
    ca36:	d3 01       	movw	r26, r6
    ca38:	c2 01       	movw	r24, r4
    ca3a:	01 96       	adiw	r24, 0x01	; 1
    ca3c:	a1 1d       	adc	r26, r1
    ca3e:	b1 1d       	adc	r27, r1
    ca40:	8f 83       	std	Y+7, r24	; 0x07
    ca42:	98 87       	std	Y+8, r25	; 0x08
    ca44:	a9 87       	std	Y+9, r26	; 0x09
    ca46:	ba 87       	std	Y+10, r27	; 0x0a
    ca48:	b3 01       	movw	r22, r6
    ca4a:	a2 01       	movw	r20, r4
    ca4c:	89 81       	ldd	r24, Y+1	; 0x01
    ca4e:	9a 81       	ldd	r25, Y+2	; 0x02
    ca50:	0e 94 d9 4b 	call	0x97b2	; 0x97b2 <move_window>
    ca54:	00 97       	sbiw	r24, 0x00	; 0
    ca56:	09 f0       	breq	.+2      	; 0xca5a <f_getfree+0x11a>
    ca58:	3d c0       	rjmp	.+122    	; 0xcad4 <f_getfree+0x194>
    ca5a:	4f 80       	ldd	r4, Y+7	; 0x07
    ca5c:	58 84       	ldd	r5, Y+8	; 0x08
    ca5e:	69 84       	ldd	r6, Y+9	; 0x09
    ca60:	7a 84       	ldd	r7, Y+10	; 0x0a
    ca62:	e9 81       	ldd	r30, Y+1	; 0x01
    ca64:	fa 81       	ldd	r31, Y+2	; 0x02
    ca66:	80 81       	ld	r24, Z
    ca68:	82 30       	cpi	r24, 0x02	; 2
    ca6a:	79 f4       	brne	.+30     	; 0xca8a <f_getfree+0x14a>
    ca6c:	e2 0d       	add	r30, r2
    ca6e:	f3 1d       	adc	r31, r3
    ca70:	85 a9       	ldd	r24, Z+53	; 0x35
    ca72:	96 a9       	ldd	r25, Z+54	; 0x36
    ca74:	89 2b       	or	r24, r25
    ca76:	29 f4       	brne	.+10     	; 0xca82 <f_getfree+0x142>
    ca78:	9f ef       	ldi	r25, 0xFF	; 255
    ca7a:	c9 1a       	sub	r12, r25
    ca7c:	d9 0a       	sbc	r13, r25
    ca7e:	e9 0a       	sbc	r14, r25
    ca80:	f9 0a       	sbc	r15, r25
    ca82:	a2 e0       	ldi	r26, 0x02	; 2
    ca84:	2a 0e       	add	r2, r26
    ca86:	31 1c       	adc	r3, r1
    ca88:	15 c0       	rjmp	.+42     	; 0xcab4 <f_getfree+0x174>
    ca8a:	cf 01       	movw	r24, r30
    ca8c:	c5 96       	adiw	r24, 0x35	; 53
    ca8e:	82 0d       	add	r24, r2
    ca90:	93 1d       	adc	r25, r3
    ca92:	0e 94 17 48 	call	0x902e	; 0x902e <ld_dword>
    ca96:	dc 01       	movw	r26, r24
    ca98:	cb 01       	movw	r24, r22
    ca9a:	bf 70       	andi	r27, 0x0F	; 15
    ca9c:	89 2b       	or	r24, r25
    ca9e:	8a 2b       	or	r24, r26
    caa0:	8b 2b       	or	r24, r27
    caa2:	29 f4       	brne	.+10     	; 0xcaae <f_getfree+0x16e>
    caa4:	bf ef       	ldi	r27, 0xFF	; 255
    caa6:	cb 1a       	sub	r12, r27
    caa8:	db 0a       	sbc	r13, r27
    caaa:	eb 0a       	sbc	r14, r27
    caac:	fb 0a       	sbc	r15, r27
    caae:	e4 e0       	ldi	r30, 0x04	; 4
    cab0:	2e 0e       	add	r2, r30
    cab2:	31 1c       	adc	r3, r1
    cab4:	f1 e0       	ldi	r31, 0x01	; 1
    cab6:	3f 22       	and	r3, r31
    cab8:	21 e0       	ldi	r18, 0x01	; 1
    caba:	82 1a       	sub	r8, r18
    cabc:	91 08       	sbc	r9, r1
    cabe:	a1 08       	sbc	r10, r1
    cac0:	b1 08       	sbc	r11, r1
    cac2:	09 f0       	breq	.+2      	; 0xcac6 <f_getfree+0x186>
    cac4:	b5 cf       	rjmp	.-150    	; 0xca30 <f_getfree+0xf0>
    cac6:	07 c0       	rjmp	.+14     	; 0xcad6 <f_getfree+0x196>
    cac8:	01 e0       	ldi	r16, 0x01	; 1
    caca:	10 e0       	ldi	r17, 0x00	; 0
    cacc:	04 c0       	rjmp	.+8      	; 0xcad6 <f_getfree+0x196>
    cace:	02 e0       	ldi	r16, 0x02	; 2
    cad0:	10 e0       	ldi	r17, 0x00	; 0
    cad2:	01 c0       	rjmp	.+2      	; 0xcad6 <f_getfree+0x196>
    cad4:	8c 01       	movw	r16, r24
    cad6:	ad 81       	ldd	r26, Y+5	; 0x05
    cad8:	be 81       	ldd	r27, Y+6	; 0x06
    cada:	cd 92       	st	X+, r12
    cadc:	dd 92       	st	X+, r13
    cade:	ed 92       	st	X+, r14
    cae0:	fc 92       	st	X, r15
    cae2:	13 97       	sbiw	r26, 0x03	; 3
    cae4:	e9 81       	ldd	r30, Y+1	; 0x01
    cae6:	fa 81       	ldd	r31, Y+2	; 0x02
    cae8:	c1 8a       	std	Z+17, r12	; 0x11
    caea:	d2 8a       	std	Z+18, r13	; 0x12
    caec:	e3 8a       	std	Z+19, r14	; 0x13
    caee:	f4 8a       	std	Z+20, r15	; 0x14
    caf0:	84 81       	ldd	r24, Z+4	; 0x04
    caf2:	81 60       	ori	r24, 0x01	; 1
    caf4:	84 83       	std	Z+4, r24	; 0x04
    caf6:	c8 01       	movw	r24, r16
    caf8:	2a 96       	adiw	r28, 0x0a	; 10
    cafa:	e2 e1       	ldi	r30, 0x12	; 18
    cafc:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

0000cb00 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    cb00:	a0 e6       	ldi	r26, 0x60	; 96
    cb02:	b0 e0       	ldi	r27, 0x00	; 0
    cb04:	e6 e8       	ldi	r30, 0x86	; 134
    cb06:	f5 e6       	ldi	r31, 0x65	; 101
    cb08:	0c 94 9a e7 	jmp	0x1cf34	; 0x1cf34 <__prologue_saves__+0xe>
    cb0c:	a1 96       	adiw	r28, 0x21	; 33
    cb0e:	9f af       	std	Y+63, r25	; 0x3f
    cb10:	8e af       	std	Y+62, r24	; 0x3e
    cb12:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    cb14:	42 e0       	ldi	r20, 0x02	; 2
    cb16:	be 01       	movw	r22, r28
    cb18:	63 5a       	subi	r22, 0xA3	; 163
    cb1a:	7f 4f       	sbci	r23, 0xFF	; 255
    cb1c:	ce 01       	movw	r24, r28
    cb1e:	81 5a       	subi	r24, 0xA1	; 161
    cb20:	9f 4f       	sbci	r25, 0xFF	; 255
    cb22:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <mount_volume>
	if (res == FR_OK) {
    cb26:	00 97       	sbiw	r24, 0x00	; 0
    cb28:	09 f0       	breq	.+2      	; 0xcb2c <f_unlink+0x2c>
    cb2a:	8c c0       	rjmp	.+280    	; 0xcc44 <f_unlink+0x144>
		dj.obj.fs = fs;
    cb2c:	6f 96       	adiw	r28, 0x1f	; 31
    cb2e:	8e ad       	ldd	r24, Y+62	; 0x3e
    cb30:	9f ad       	ldd	r25, Y+63	; 0x3f
    cb32:	6f 97       	sbiw	r28, 0x1f	; 31
    cb34:	98 ab       	std	Y+48, r25	; 0x30
    cb36:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cb38:	80 e0       	ldi	r24, 0x00	; 0
    cb3a:	92 e0       	ldi	r25, 0x02	; 2
    cb3c:	b0 d3       	rcall	.+1888   	; 0xd29e <ff_memalloc>
    cb3e:	5c 01       	movw	r10, r24
    cb40:	00 97       	sbiw	r24, 0x00	; 0
    cb42:	09 f4       	brne	.+2      	; 0xcb46 <f_unlink+0x46>
    cb44:	49 c0       	rjmp	.+146    	; 0xcbd8 <f_unlink+0xd8>
    cb46:	6f 96       	adiw	r28, 0x1f	; 31
    cb48:	ee ad       	ldd	r30, Y+62	; 0x3e
    cb4a:	ff ad       	ldd	r31, Y+63	; 0x3f
    cb4c:	6f 97       	sbiw	r28, 0x1f	; 31
    cb4e:	94 87       	std	Z+12, r25	; 0x0c
    cb50:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    cb52:	a1 96       	adiw	r28, 0x21	; 33
    cb54:	6e ad       	ldd	r22, Y+62	; 0x3e
    cb56:	7f ad       	ldd	r23, Y+63	; 0x3f
    cb58:	a1 97       	sbiw	r28, 0x21	; 33
    cb5a:	ce 01       	movw	r24, r28
    cb5c:	8f 96       	adiw	r24, 0x2f	; 47
    cb5e:	0e 94 a1 57 	call	0xaf42	; 0xaf42 <follow_path>
    cb62:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    cb64:	89 2b       	or	r24, r25
    cb66:	a1 f5       	brne	.+104    	; 0xcbd0 <f_unlink+0xd0>
    cb68:	67 96       	adiw	r28, 0x17	; 23
    cb6a:	8f ad       	ldd	r24, Y+63	; 0x3f
    cb6c:	67 97       	sbiw	r28, 0x17	; 23
    cb6e:	85 fd       	sbrc	r24, 5
    cb70:	36 c0       	rjmp	.+108    	; 0xcbde <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    cb72:	87 fd       	sbrc	r24, 7
    cb74:	34 c0       	rjmp	.+104    	; 0xcbde <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    cb76:	9b a8       	ldd	r9, Y+51	; 0x33
    cb78:	90 fc       	sbrc	r9, 0
    cb7a:	40 c0       	rjmp	.+128    	; 0xcbfc <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    cb7c:	6f 96       	adiw	r28, 0x1f	; 31
    cb7e:	0e ad       	ldd	r16, Y+62	; 0x3e
    cb80:	1f ad       	ldd	r17, Y+63	; 0x3f
    cb82:	6f 97       	sbiw	r28, 0x1f	; 31
    cb84:	2b 96       	adiw	r28, 0x0b	; 11
    cb86:	6e ad       	ldd	r22, Y+62	; 0x3e
    cb88:	7f ad       	ldd	r23, Y+63	; 0x3f
    cb8a:	2b 97       	sbiw	r28, 0x0b	; 11
    cb8c:	f8 01       	movw	r30, r16
    cb8e:	80 81       	ld	r24, Z
    cb90:	0e 94 4a 4a 	call	0x9494	; 0x9494 <ld_clust.isra.3>
    cb94:	6b 01       	movw	r12, r22
    cb96:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    cb98:	94 fe       	sbrs	r9, 4
    cb9a:	33 c0       	rjmp	.+102    	; 0xcc02 <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    cb9c:	f8 01       	movw	r30, r16
    cb9e:	85 89       	ldd	r24, Z+21	; 0x15
    cba0:	96 89       	ldd	r25, Z+22	; 0x16
    cba2:	a7 89       	ldd	r26, Z+23	; 0x17
    cba4:	b0 8d       	ldd	r27, Z+24	; 0x18
    cba6:	c8 16       	cp	r12, r24
    cba8:	d9 06       	cpc	r13, r25
    cbaa:	ea 06       	cpc	r14, r26
    cbac:	fb 06       	cpc	r15, r27
    cbae:	31 f1       	breq	.+76     	; 0xcbfc <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    cbb0:	1a 83       	std	Y+2, r17	; 0x02
    cbb2:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    cbb4:	cf 82       	std	Y+7, r12	; 0x07
    cbb6:	d8 86       	std	Y+8, r13	; 0x08
    cbb8:	e9 86       	std	Y+9, r14	; 0x09
    cbba:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    cbbc:	40 e0       	ldi	r20, 0x00	; 0
    cbbe:	50 e0       	ldi	r21, 0x00	; 0
    cbc0:	ba 01       	movw	r22, r20
    cbc2:	ce 01       	movw	r24, r28
    cbc4:	01 96       	adiw	r24, 0x01	; 1
    cbc6:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <dir_sdi>
    cbca:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    cbcc:	89 2b       	or	r24, r25
    cbce:	51 f0       	breq	.+20     	; 0xcbe4 <f_unlink+0xe4>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cbd0:	c5 01       	movw	r24, r10
    cbd2:	68 d3       	rcall	.+1744   	; 0xd2a4 <ff_memfree>
    cbd4:	c8 01       	movw	r24, r16
    cbd6:	36 c0       	rjmp	.+108    	; 0xcc44 <f_unlink+0x144>

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cbd8:	81 e1       	ldi	r24, 0x11	; 17
    cbda:	90 e0       	ldi	r25, 0x00	; 0
    cbdc:	33 c0       	rjmp	.+102    	; 0xcc44 <f_unlink+0x144>
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    cbde:	06 e0       	ldi	r16, 0x06	; 6
    cbe0:	10 e0       	ldi	r17, 0x00	; 0
    cbe2:	f6 cf       	rjmp	.-20     	; 0xcbd0 <f_unlink+0xd0>
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    cbe4:	60 e0       	ldi	r22, 0x00	; 0
    cbe6:	70 e0       	ldi	r23, 0x00	; 0
    cbe8:	ce 01       	movw	r24, r28
    cbea:	01 96       	adiw	r24, 0x01	; 1
    cbec:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <dir_read>
    cbf0:	8c 01       	movw	r16, r24
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    cbf2:	00 97       	sbiw	r24, 0x00	; 0
    cbf4:	19 f0       	breq	.+6      	; 0xcbfc <f_unlink+0xfc>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    cbf6:	04 97       	sbiw	r24, 0x04	; 4
    cbf8:	21 f0       	breq	.+8      	; 0xcc02 <f_unlink+0x102>
    cbfa:	ea cf       	rjmp	.-44     	; 0xcbd0 <f_unlink+0xd0>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    cbfc:	07 e0       	ldi	r16, 0x07	; 7
    cbfe:	10 e0       	ldi	r17, 0x00	; 0
    cc00:	e7 cf       	rjmp	.-50     	; 0xcbd0 <f_unlink+0xd0>
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    cc02:	ce 01       	movw	r24, r28
    cc04:	8f 96       	adiw	r24, 0x2f	; 47
    cc06:	0e 94 bd 54 	call	0xa97a	; 0xa97a <dir_remove>
    cc0a:	8c 01       	movw	r16, r24
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    cc0c:	89 2b       	or	r24, r25
    cc0e:	01 f7       	brne	.-64     	; 0xcbd0 <f_unlink+0xd0>
    cc10:	c1 14       	cp	r12, r1
    cc12:	d1 04       	cpc	r13, r1
    cc14:	e1 04       	cpc	r14, r1
    cc16:	f1 04       	cpc	r15, r1
    cc18:	41 f4       	brne	.+16     	; 0xcc2a <f_unlink+0x12a>
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cc1a:	6f 96       	adiw	r28, 0x1f	; 31
    cc1c:	8e ad       	ldd	r24, Y+62	; 0x3e
    cc1e:	9f ad       	ldd	r25, Y+63	; 0x3f
    cc20:	6f 97       	sbiw	r28, 0x1f	; 31
    cc22:	0e 94 bf 4a 	call	0x957e	; 0x957e <sync_fs>
    cc26:	8c 01       	movw	r16, r24
    cc28:	d3 cf       	rjmp	.-90     	; 0xcbd0 <f_unlink+0xd0>
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    cc2a:	00 e0       	ldi	r16, 0x00	; 0
    cc2c:	10 e0       	ldi	r17, 0x00	; 0
    cc2e:	98 01       	movw	r18, r16
    cc30:	b7 01       	movw	r22, r14
    cc32:	a6 01       	movw	r20, r12
    cc34:	ce 01       	movw	r24, r28
    cc36:	8f 96       	adiw	r24, 0x2f	; 47
    cc38:	0e 94 42 52 	call	0xa484	; 0xa484 <remove_chain>
    cc3c:	8c 01       	movw	r16, r24
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    cc3e:	89 2b       	or	r24, r25
    cc40:	39 f6       	brne	.-114    	; 0xcbd0 <f_unlink+0xd0>
    cc42:	eb cf       	rjmp	.-42     	; 0xcc1a <f_unlink+0x11a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cc44:	c0 5a       	subi	r28, 0xA0	; 160
    cc46:	df 4f       	sbci	r29, 0xFF	; 255
    cc48:	eb e0       	ldi	r30, 0x0B	; 11
    cc4a:	0c 94 b6 e7 	jmp	0x1cf6c	; 0x1cf6c <__epilogue_restores__+0xe>

0000cc4e <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    cc4e:	a0 e4       	ldi	r26, 0x40	; 64
    cc50:	b0 e0       	ldi	r27, 0x00	; 0
    cc52:	ed e2       	ldi	r30, 0x2D	; 45
    cc54:	f6 e6       	ldi	r31, 0x66	; 102
    cc56:	0c 94 95 e7 	jmp	0x1cf2a	; 0x1cf2a <__prologue_saves__+0x4>
    cc5a:	21 96       	adiw	r28, 0x01	; 1
    cc5c:	9f af       	std	Y+63, r25	; 0x3f
    cc5e:	8e af       	std	Y+62, r24	; 0x3e
    cc60:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cc62:	42 e0       	ldi	r20, 0x02	; 2
    cc64:	be 01       	movw	r22, r28
    cc66:	63 5c       	subi	r22, 0xC3	; 195
    cc68:	7f 4f       	sbci	r23, 0xFF	; 255
    cc6a:	ce 01       	movw	r24, r28
    cc6c:	cf 96       	adiw	r24, 0x3f	; 63
    cc6e:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <mount_volume>
	if (res == FR_OK) {
    cc72:	00 97       	sbiw	r24, 0x00	; 0
    cc74:	09 f0       	breq	.+2      	; 0xcc78 <f_mkdir+0x2a>
    cc76:	d6 c0       	rjmp	.+428    	; 0xce24 <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    cc78:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc7a:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc7c:	9a 83       	std	Y+2, r25	; 0x02
    cc7e:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cc80:	80 e0       	ldi	r24, 0x00	; 0
    cc82:	92 e0       	ldi	r25, 0x02	; 2
    cc84:	0c d3       	rcall	.+1560   	; 0xd29e <ff_memalloc>
    cc86:	6c 01       	movw	r12, r24
    cc88:	00 97       	sbiw	r24, 0x00	; 0
    cc8a:	e9 f0       	breq	.+58     	; 0xccc6 <f_mkdir+0x78>
    cc8c:	ed ad       	ldd	r30, Y+61	; 0x3d
    cc8e:	fe ad       	ldd	r31, Y+62	; 0x3e
    cc90:	94 87       	std	Z+12, r25	; 0x0c
    cc92:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    cc94:	21 96       	adiw	r28, 0x01	; 1
    cc96:	6e ad       	ldd	r22, Y+62	; 0x3e
    cc98:	7f ad       	ldd	r23, Y+63	; 0x3f
    cc9a:	21 97       	sbiw	r28, 0x01	; 1
    cc9c:	ce 01       	movw	r24, r28
    cc9e:	01 96       	adiw	r24, 0x01	; 1
    cca0:	0e 94 a1 57 	call	0xaf42	; 0xaf42 <follow_path>
    cca4:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cca6:	89 2b       	or	r24, r25
    cca8:	89 f0       	breq	.+34     	; 0xcccc <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    ccaa:	84 e0       	ldi	r24, 0x04	; 4
    ccac:	e8 16       	cp	r14, r24
    ccae:	f1 04       	cpc	r15, r1
    ccb0:	31 f4       	brne	.+12     	; 0xccbe <f_mkdir+0x70>
    ccb2:	88 a5       	ldd	r24, Y+40	; 0x28
    ccb4:	85 ff       	sbrs	r24, 5
    ccb6:	0e c0       	rjmp	.+28     	; 0xccd4 <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    ccb8:	26 e0       	ldi	r18, 0x06	; 6
    ccba:	e2 2e       	mov	r14, r18
    ccbc:	f1 2c       	mov	r15, r1
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    ccbe:	c6 01       	movw	r24, r12
    ccc0:	f1 d2       	rcall	.+1506   	; 0xd2a4 <ff_memfree>
    ccc2:	c7 01       	movw	r24, r14
    ccc4:	af c0       	rjmp	.+350    	; 0xce24 <f_mkdir+0x1d6>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    ccc6:	81 e1       	ldi	r24, 0x11	; 17
    ccc8:	90 e0       	ldi	r25, 0x00	; 0
    ccca:	ac c0       	rjmp	.+344    	; 0xce24 <f_mkdir+0x1d6>
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cccc:	38 e0       	ldi	r19, 0x08	; 8
    ccce:	e3 2e       	mov	r14, r19
    ccd0:	f1 2c       	mov	r15, r1
    ccd2:	f5 cf       	rjmp	.-22     	; 0xccbe <f_mkdir+0x70>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    ccd4:	8d ad       	ldd	r24, Y+61	; 0x3d
    ccd6:	9e ad       	ldd	r25, Y+62	; 0x3e
    ccd8:	98 ab       	std	Y+48, r25	; 0x30
    ccda:	8f a7       	std	Y+47, r24	; 0x2f
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    ccdc:	40 e0       	ldi	r20, 0x00	; 0
    ccde:	50 e0       	ldi	r21, 0x00	; 0
    cce0:	ba 01       	movw	r22, r20
    cce2:	ce 01       	movw	r24, r28
    cce4:	8f 96       	adiw	r24, 0x2f	; 47
    cce6:	0e 94 1c 51 	call	0xa238	; 0xa238 <create_chain>
    ccea:	4b 01       	movw	r8, r22
    ccec:	5c 01       	movw	r10, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    ccee:	67 2b       	or	r22, r23
    ccf0:	68 2b       	or	r22, r24
    ccf2:	69 2b       	or	r22, r25
    ccf4:	09 f1       	breq	.+66     	; 0xcd38 <f_mkdir+0xea>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    ccf6:	e1 e0       	ldi	r30, 0x01	; 1
    ccf8:	8e 16       	cp	r8, r30
    ccfa:	91 04       	cpc	r9, r1
    ccfc:	a1 04       	cpc	r10, r1
    ccfe:	b1 04       	cpc	r11, r1
    cd00:	61 f0       	breq	.+24     	; 0xcd1a <f_mkdir+0xcc>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    cd02:	ff ef       	ldi	r31, 0xFF	; 255
    cd04:	8f 16       	cp	r8, r31
    cd06:	9f 06       	cpc	r9, r31
    cd08:	af 06       	cpc	r10, r31
    cd0a:	bf 06       	cpc	r11, r31
    cd0c:	d9 f4       	brne	.+54     	; 0xcd44 <f_mkdir+0xf6>
			tm = GET_FATTIME();
    cd0e:	0e 94 40 71 	call	0xe280	; 0xe280 <get_fattime>
    cd12:	ee 24       	eor	r14, r14
    cd14:	e3 94       	inc	r14
    cd16:	f1 2c       	mov	r15, r1
    cd18:	05 c0       	rjmp	.+10     	; 0xcd24 <f_mkdir+0xd6>
    cd1a:	0e 94 40 71 	call	0xe280	; 0xe280 <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cd1e:	92 e0       	ldi	r25, 0x02	; 2
    cd20:	e9 2e       	mov	r14, r25
    cd22:	f1 2c       	mov	r15, r1
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    cd24:	00 e0       	ldi	r16, 0x00	; 0
    cd26:	10 e0       	ldi	r17, 0x00	; 0
    cd28:	98 01       	movw	r18, r16
    cd2a:	b5 01       	movw	r22, r10
    cd2c:	a4 01       	movw	r20, r8
    cd2e:	ce 01       	movw	r24, r28
    cd30:	8f 96       	adiw	r24, 0x2f	; 47
    cd32:	0e 94 42 52 	call	0xa484	; 0xa484 <remove_chain>
    cd36:	c3 cf       	rjmp	.-122    	; 0xccbe <f_mkdir+0x70>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cd38:	0e 94 40 71 	call	0xe280	; 0xe280 <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cd3c:	87 e0       	ldi	r24, 0x07	; 7
    cd3e:	e8 2e       	mov	r14, r24
    cd40:	f1 2c       	mov	r15, r1
    cd42:	f0 cf       	rjmp	.-32     	; 0xcd24 <f_mkdir+0xd6>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cd44:	0e 94 40 71 	call	0xe280	; 0xe280 <get_fattime>
    cd48:	2b 01       	movw	r4, r22
    cd4a:	3c 01       	movw	r6, r24
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    cd4c:	b5 01       	movw	r22, r10
    cd4e:	a4 01       	movw	r20, r8
    cd50:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd52:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd54:	0e 94 31 4b 	call	0x9662	; 0x9662 <dir_clear>
    cd58:	7c 01       	movw	r14, r24
				if (res == FR_OK) {
    cd5a:	89 2b       	or	r24, r25
    cd5c:	19 f7       	brne	.-58     	; 0xcd24 <f_mkdir+0xd6>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    cd5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd60:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd62:	4b e0       	ldi	r20, 0x0B	; 11
    cd64:	50 e0       	ldi	r21, 0x00	; 0
    cd66:	60 e2       	ldi	r22, 0x20	; 32
    cd68:	70 e0       	ldi	r23, 0x00	; 0
    cd6a:	c5 96       	adiw	r24, 0x35	; 53
    cd6c:	0e 94 32 48 	call	0x9064	; 0x9064 <mem_set>
						fs->win[DIR_Name] = '.';
    cd70:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd72:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd74:	1e e2       	ldi	r17, 0x2E	; 46
    cd76:	fc 01       	movw	r30, r24
    cd78:	15 ab       	std	Z+53, r17	; 0x35
						fs->win[DIR_Attr] = AM_DIR;
    cd7a:	e0 5c       	subi	r30, 0xC0	; 192
    cd7c:	ff 4f       	sbci	r31, 0xFF	; 255
    cd7e:	20 e1       	ldi	r18, 0x10	; 16
    cd80:	20 83       	st	Z, r18
						st_dword(fs->win + DIR_ModTime, tm);
    cd82:	b3 01       	movw	r22, r6
    cd84:	a2 01       	movw	r20, r4
    cd86:	85 5b       	subi	r24, 0xB5	; 181
    cd88:	9f 4f       	sbci	r25, 0xFF	; 255
    cd8a:	0e 94 2c 48 	call	0x9058	; 0x9058 <st_dword>
						st_clust(fs, fs->win, dcl);
    cd8e:	8d ad       	ldd	r24, Y+61	; 0x3d
    cd90:	9e ad       	ldd	r25, Y+62	; 0x3e
    cd92:	bc 01       	movw	r22, r24
    cd94:	6b 5c       	subi	r22, 0xCB	; 203
    cd96:	7f 4f       	sbci	r23, 0xFF	; 255
    cd98:	a5 01       	movw	r20, r10
    cd9a:	94 01       	movw	r18, r8
    cd9c:	0e 94 5f 4a 	call	0x94be	; 0x94be <st_clust.isra.4>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    cda0:	8d ad       	ldd	r24, Y+61	; 0x3d
    cda2:	9e ad       	ldd	r25, Y+62	; 0x3e
    cda4:	bc 01       	movw	r22, r24
    cda6:	6b 5c       	subi	r22, 0xCB	; 203
    cda8:	7f 4f       	sbci	r23, 0xFF	; 255
    cdaa:	40 e2       	ldi	r20, 0x20	; 32
    cdac:	50 e0       	ldi	r21, 0x00	; 0
    cdae:	8b 5a       	subi	r24, 0xAB	; 171
    cdb0:	9f 4f       	sbci	r25, 0xFF	; 255
    cdb2:	0e 94 3f 4a 	call	0x947e	; 0x947e <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    cdb6:	8d ad       	ldd	r24, Y+61	; 0x3d
    cdb8:	9e ad       	ldd	r25, Y+62	; 0x3e
    cdba:	fc 01       	movw	r30, r24
    cdbc:	ea 5a       	subi	r30, 0xAA	; 170
    cdbe:	ff 4f       	sbci	r31, 0xFF	; 255
    cdc0:	10 83       	st	Z, r17
						st_clust(fs, fs->win + SZDIRE, pcl);
    cdc2:	2f 81       	ldd	r18, Y+7	; 0x07
    cdc4:	38 85       	ldd	r19, Y+8	; 0x08
    cdc6:	49 85       	ldd	r20, Y+9	; 0x09
    cdc8:	5a 85       	ldd	r21, Y+10	; 0x0a
    cdca:	bc 01       	movw	r22, r24
    cdcc:	6b 5a       	subi	r22, 0xAB	; 171
    cdce:	7f 4f       	sbci	r23, 0xFF	; 255
    cdd0:	0e 94 5f 4a 	call	0x94be	; 0x94be <st_clust.isra.4>
						fs->wflag = 1;
    cdd4:	ed ad       	ldd	r30, Y+61	; 0x3d
    cdd6:	fe ad       	ldd	r31, Y+62	; 0x3e
    cdd8:	81 e0       	ldi	r24, 0x01	; 1
    cdda:	83 83       	std	Z+3, r24	; 0x03
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    cddc:	ce 01       	movw	r24, r28
    cdde:	01 96       	adiw	r24, 0x01	; 1
    cde0:	0e 94 13 56 	call	0xac26	; 0xac26 <dir_register>
    cde4:	7c 01       	movw	r14, r24
				}
			}
			if (res == FR_OK) {
    cde6:	89 2b       	or	r24, r25
    cde8:	09 f0       	breq	.+2      	; 0xcdec <f_mkdir+0x19e>
    cdea:	9c cf       	rjmp	.-200    	; 0xcd24 <f_mkdir+0xd6>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    cdec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cdee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cdf0:	b3 01       	movw	r22, r6
    cdf2:	a2 01       	movw	r20, r4
    cdf4:	46 96       	adiw	r24, 0x16	; 22
    cdf6:	0e 94 2c 48 	call	0x9058	; 0x9058 <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    cdfa:	6b 8d       	ldd	r22, Y+27	; 0x1b
    cdfc:	7c 8d       	ldd	r23, Y+28	; 0x1c
    cdfe:	a5 01       	movw	r20, r10
    ce00:	94 01       	movw	r18, r8
    ce02:	8d ad       	ldd	r24, Y+61	; 0x3d
    ce04:	9e ad       	ldd	r25, Y+62	; 0x3e
    ce06:	0e 94 5f 4a 	call	0x94be	; 0x94be <st_clust.isra.4>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    ce0a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    ce0c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    ce0e:	80 e1       	ldi	r24, 0x10	; 16
    ce10:	83 87       	std	Z+11, r24	; 0x0b
					fs->wflag = 1;
    ce12:	8d ad       	ldd	r24, Y+61	; 0x3d
    ce14:	9e ad       	ldd	r25, Y+62	; 0x3e
    ce16:	21 e0       	ldi	r18, 0x01	; 1
    ce18:	fc 01       	movw	r30, r24
    ce1a:	23 83       	std	Z+3, r18	; 0x03
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    ce1c:	0e 94 bf 4a 	call	0x957e	; 0x957e <sync_fs>
    ce20:	7c 01       	movw	r14, r24
    ce22:	4d cf       	rjmp	.-358    	; 0xccbe <f_mkdir+0x70>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    ce24:	c0 5c       	subi	r28, 0xC0	; 192
    ce26:	df 4f       	sbci	r29, 0xFF	; 255
    ce28:	e0 e1       	ldi	r30, 0x10	; 16
    ce2a:	0c 94 b1 e7 	jmp	0x1cf62	; 0x1cf62 <__epilogue_restores__+0x4>

0000ce2e <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    ce2e:	a2 e8       	ldi	r26, 0x82	; 130
    ce30:	b0 e0       	ldi	r27, 0x00	; 0
    ce32:	ed e1       	ldi	r30, 0x1D	; 29
    ce34:	f7 e6       	ldi	r31, 0x67	; 103
    ce36:	0c 94 9c e7 	jmp	0x1cf38	; 0x1cf38 <__prologue_saves__+0x12>
    ce3a:	c1 58       	subi	r28, 0x81	; 129
    ce3c:	df 4f       	sbci	r29, 0xFF	; 255
    ce3e:	99 83       	std	Y+1, r25	; 0x01
    ce40:	88 83       	st	Y, r24
    ce42:	cf 57       	subi	r28, 0x7F	; 127
    ce44:	d0 40       	sbci	r29, 0x00	; 0
    ce46:	cf 57       	subi	r28, 0x7F	; 127
    ce48:	df 4f       	sbci	r29, 0xFF	; 255
    ce4a:	79 83       	std	Y+1, r23	; 0x01
    ce4c:	68 83       	st	Y, r22
    ce4e:	c1 58       	subi	r28, 0x81	; 129
    ce50:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    ce52:	ce 01       	movw	r24, r28
    ce54:	8f 57       	subi	r24, 0x7F	; 127
    ce56:	9f 4f       	sbci	r25, 0xFF	; 255
    ce58:	0e 94 bd 48 	call	0x917a	; 0x917a <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    ce5c:	42 e0       	ldi	r20, 0x02	; 2
    ce5e:	be 01       	movw	r22, r28
    ce60:	63 58       	subi	r22, 0x83	; 131
    ce62:	7f 4f       	sbci	r23, 0xFF	; 255
    ce64:	ce 01       	movw	r24, r28
    ce66:	81 58       	subi	r24, 0x81	; 129
    ce68:	9f 4f       	sbci	r25, 0xFF	; 255
    ce6a:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <mount_volume>
	if (res == FR_OK) {
    ce6e:	00 97       	sbiw	r24, 0x00	; 0
    ce70:	09 f0       	breq	.+2      	; 0xce74 <f_rename+0x46>
    ce72:	ed c0       	rjmp	.+474    	; 0xd04e <f_rename+0x220>
		djo.obj.fs = fs;
    ce74:	ef 96       	adiw	r28, 0x3f	; 63
    ce76:	8e ad       	ldd	r24, Y+62	; 0x3e
    ce78:	9f ad       	ldd	r25, Y+63	; 0x3f
    ce7a:	ef 97       	sbiw	r28, 0x3f	; 63
    ce7c:	98 ab       	std	Y+48, r25	; 0x30
    ce7e:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    ce80:	80 e0       	ldi	r24, 0x00	; 0
    ce82:	92 e0       	ldi	r25, 0x02	; 2
    ce84:	0c d2       	rcall	.+1048   	; 0xd29e <ff_memalloc>
    ce86:	6c 01       	movw	r12, r24
    ce88:	00 97       	sbiw	r24, 0x00	; 0
    ce8a:	f1 f0       	breq	.+60     	; 0xcec8 <f_rename+0x9a>
    ce8c:	ef 96       	adiw	r28, 0x3f	; 63
    ce8e:	ee ad       	ldd	r30, Y+62	; 0x3e
    ce90:	ff ad       	ldd	r31, Y+63	; 0x3f
    ce92:	ef 97       	sbiw	r28, 0x3f	; 63
    ce94:	94 87       	std	Z+12, r25	; 0x0c
    ce96:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    ce98:	c1 58       	subi	r28, 0x81	; 129
    ce9a:	df 4f       	sbci	r29, 0xFF	; 255
    ce9c:	68 81       	ld	r22, Y
    ce9e:	79 81       	ldd	r23, Y+1	; 0x01
    cea0:	cf 57       	subi	r28, 0x7F	; 127
    cea2:	d0 40       	sbci	r29, 0x00	; 0
    cea4:	ce 01       	movw	r24, r28
    cea6:	8f 96       	adiw	r24, 0x2f	; 47
    cea8:	0e 94 a1 57 	call	0xaf42	; 0xaf42 <follow_path>
    ceac:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    ceae:	89 2b       	or	r24, r25
    ceb0:	39 f4       	brne	.+14     	; 0xcec0 <f_rename+0x92>
    ceb2:	67 96       	adiw	r28, 0x17	; 23
    ceb4:	8f ad       	ldd	r24, Y+63	; 0x3f
    ceb6:	67 97       	sbiw	r28, 0x17	; 23
    ceb8:	80 7a       	andi	r24, 0xA0	; 160
    ceba:	49 f0       	breq	.+18     	; 0xcece <f_rename+0xa0>
    cebc:	06 e0       	ldi	r16, 0x06	; 6
    cebe:	10 e0       	ldi	r17, 0x00	; 0
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    cec0:	c6 01       	movw	r24, r12
    cec2:	f0 d1       	rcall	.+992    	; 0xd2a4 <ff_memfree>
    cec4:	c8 01       	movw	r24, r16
    cec6:	c3 c0       	rjmp	.+390    	; 0xd04e <f_rename+0x220>

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    cec8:	81 e1       	ldi	r24, 0x11	; 17
    ceca:	90 e0       	ldi	r25, 0x00	; 0
    cecc:	c0 c0       	rjmp	.+384    	; 0xd04e <f_rename+0x220>
    cece:	2b 96       	adiw	r28, 0x0b	; 11
    ced0:	6e ad       	ldd	r22, Y+62	; 0x3e
    ced2:	7f ad       	ldd	r23, Y+63	; 0x3f
    ced4:	2b 97       	sbiw	r28, 0x0b	; 11
    ced6:	40 e2       	ldi	r20, 0x20	; 32
    ced8:	50 e0       	ldi	r21, 0x00	; 0
    ceda:	ce 01       	movw	r24, r28
    cedc:	83 5a       	subi	r24, 0xA3	; 163
    cede:	9f 4f       	sbci	r25, 0xFF	; 255
    cee0:	0e 94 3f 4a 	call	0x947e	; 0x947e <mem_cpy.part.0>
    cee4:	4e e2       	ldi	r20, 0x2E	; 46
    cee6:	50 e0       	ldi	r21, 0x00	; 0
    cee8:	be 01       	movw	r22, r28
    ceea:	61 5d       	subi	r22, 0xD1	; 209
    ceec:	7f 4f       	sbci	r23, 0xFF	; 255
    ceee:	ce 01       	movw	r24, r28
    cef0:	01 96       	adiw	r24, 0x01	; 1
    cef2:	0e 94 3f 4a 	call	0x947e	; 0x947e <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    cef6:	cf 57       	subi	r28, 0x7F	; 127
    cef8:	df 4f       	sbci	r29, 0xFF	; 255
    cefa:	68 81       	ld	r22, Y
    cefc:	79 81       	ldd	r23, Y+1	; 0x01
    cefe:	c1 58       	subi	r28, 0x81	; 129
    cf00:	d0 40       	sbci	r29, 0x00	; 0
    cf02:	ce 01       	movw	r24, r28
    cf04:	01 96       	adiw	r24, 0x01	; 1
    cf06:	0e 94 a1 57 	call	0xaf42	; 0xaf42 <follow_path>
    cf0a:	8c 01       	movw	r16, r24
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    cf0c:	89 2b       	or	r24, r25
    cf0e:	f9 f4       	brne	.+62     	; 0xcf4e <f_rename+0x120>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    cf10:	4f 81       	ldd	r20, Y+7	; 0x07
    cf12:	58 85       	ldd	r21, Y+8	; 0x08
    cf14:	69 85       	ldd	r22, Y+9	; 0x09
    cf16:	7a 85       	ldd	r23, Y+10	; 0x0a
    cf18:	8d a9       	ldd	r24, Y+53	; 0x35
    cf1a:	9e a9       	ldd	r25, Y+54	; 0x36
    cf1c:	af a9       	ldd	r26, Y+55	; 0x37
    cf1e:	b8 ad       	ldd	r27, Y+56	; 0x38
    cf20:	48 17       	cp	r20, r24
    cf22:	59 07       	cpc	r21, r25
    cf24:	6a 07       	cpc	r22, r26
    cf26:	7b 07       	cpc	r23, r27
    cf28:	09 f0       	breq	.+2      	; 0xcf2c <f_rename+0xfe>
    cf2a:	8b c0       	rjmp	.+278    	; 0xd042 <f_rename+0x214>
    cf2c:	4f 85       	ldd	r20, Y+15	; 0x0f
    cf2e:	58 89       	ldd	r21, Y+16	; 0x10
    cf30:	69 89       	ldd	r22, Y+17	; 0x11
    cf32:	7a 89       	ldd	r23, Y+18	; 0x12
    cf34:	21 96       	adiw	r28, 0x01	; 1
    cf36:	8c ad       	ldd	r24, Y+60	; 0x3c
    cf38:	9d ad       	ldd	r25, Y+61	; 0x3d
    cf3a:	ae ad       	ldd	r26, Y+62	; 0x3e
    cf3c:	bf ad       	ldd	r27, Y+63	; 0x3f
    cf3e:	21 97       	sbiw	r28, 0x01	; 1
    cf40:	48 17       	cp	r20, r24
    cf42:	59 07       	cpc	r21, r25
    cf44:	6a 07       	cpc	r22, r26
    cf46:	7b 07       	cpc	r23, r27
    cf48:	09 f0       	breq	.+2      	; 0xcf4c <f_rename+0x11e>
    cf4a:	7b c0       	rjmp	.+246    	; 0xd042 <f_rename+0x214>
    cf4c:	04 c0       	rjmp	.+8      	; 0xcf56 <f_rename+0x128>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    cf4e:	04 30       	cpi	r16, 0x04	; 4
    cf50:	11 05       	cpc	r17, r1
    cf52:	09 f0       	breq	.+2      	; 0xcf56 <f_rename+0x128>
    cf54:	b5 cf       	rjmp	.-150    	; 0xcec0 <f_rename+0x92>
					res = dir_register(&djn);			/* Register the new entry */
    cf56:	ce 01       	movw	r24, r28
    cf58:	01 96       	adiw	r24, 0x01	; 1
    cf5a:	0e 94 13 56 	call	0xac26	; 0xac26 <dir_register>
    cf5e:	8c 01       	movw	r16, r24
					if (res == FR_OK) {
    cf60:	89 2b       	or	r24, r25
    cf62:	09 f0       	breq	.+2      	; 0xcf66 <f_rename+0x138>
    cf64:	ad cf       	rjmp	.-166    	; 0xcec0 <f_rename+0x92>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    cf66:	0b 8d       	ldd	r16, Y+27	; 0x1b
    cf68:	1c 8d       	ldd	r17, Y+28	; 0x1c
    cf6a:	6d e5       	ldi	r22, 0x5D	; 93
    cf6c:	70 e0       	ldi	r23, 0x00	; 0
    cf6e:	6c 0f       	add	r22, r28
    cf70:	7d 1f       	adc	r23, r29
    cf72:	63 5f       	subi	r22, 0xF3	; 243
    cf74:	7f 4f       	sbci	r23, 0xFF	; 255
    cf76:	43 e1       	ldi	r20, 0x13	; 19
    cf78:	50 e0       	ldi	r21, 0x00	; 0
    cf7a:	c8 01       	movw	r24, r16
    cf7c:	0d 96       	adiw	r24, 0x0d	; 13
    cf7e:	0e 94 3f 4a 	call	0x947e	; 0x947e <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    cf82:	a9 96       	adiw	r28, 0x29	; 41
    cf84:	8f ad       	ldd	r24, Y+63	; 0x3f
    cf86:	a9 97       	sbiw	r28, 0x29	; 41
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    cf88:	84 ff       	sbrs	r24, 4
    cf8a:	80 62       	ori	r24, 0x20	; 32
    cf8c:	f8 01       	movw	r30, r16
    cf8e:	83 87       	std	Z+11, r24	; 0x0b
						fs->wflag = 1;
    cf90:	ef 96       	adiw	r28, 0x3f	; 63
    cf92:	ee ac       	ldd	r14, Y+62	; 0x3e
    cf94:	ff ac       	ldd	r15, Y+63	; 0x3f
    cf96:	ef 97       	sbiw	r28, 0x3f	; 63
    cf98:	bb 24       	eor	r11, r11
    cf9a:	b3 94       	inc	r11
    cf9c:	f7 01       	movw	r30, r14
    cf9e:	b3 82       	std	Z+3, r11	; 0x03
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    cfa0:	f8 01       	movw	r30, r16
    cfa2:	83 85       	ldd	r24, Z+11	; 0x0b
    cfa4:	84 ff       	sbrs	r24, 4
    cfa6:	3d c0       	rjmp	.+122    	; 0xd022 <f_rename+0x1f4>
    cfa8:	4d a9       	ldd	r20, Y+53	; 0x35
    cfaa:	5e a9       	ldd	r21, Y+54	; 0x36
    cfac:	6f a9       	ldd	r22, Y+55	; 0x37
    cfae:	78 ad       	ldd	r23, Y+56	; 0x38
    cfb0:	8f 81       	ldd	r24, Y+7	; 0x07
    cfb2:	98 85       	ldd	r25, Y+8	; 0x08
    cfb4:	a9 85       	ldd	r26, Y+9	; 0x09
    cfb6:	ba 85       	ldd	r27, Y+10	; 0x0a
    cfb8:	48 17       	cp	r20, r24
    cfba:	59 07       	cpc	r21, r25
    cfbc:	6a 07       	cpc	r22, r26
    cfbe:	7b 07       	cpc	r23, r27
    cfc0:	81 f1       	breq	.+96     	; 0xd022 <f_rename+0x1f4>
							sect = clst2sect(fs, ld_clust(fs, dir));
    cfc2:	b8 01       	movw	r22, r16
    cfc4:	f7 01       	movw	r30, r14
    cfc6:	80 81       	ld	r24, Z
    cfc8:	0e 94 4a 4a 	call	0x9494	; 0x9494 <ld_clust.isra.3>
    cfcc:	ab 01       	movw	r20, r22
    cfce:	bc 01       	movw	r22, r24
    cfd0:	c7 01       	movw	r24, r14
    cfd2:	0e 94 4a 48 	call	0x9094	; 0x9094 <clst2sect>
    cfd6:	ab 01       	movw	r20, r22
    cfd8:	bc 01       	movw	r22, r24
							if (sect == 0) {
    cfda:	41 15       	cp	r20, r1
    cfdc:	51 05       	cpc	r21, r1
    cfde:	61 05       	cpc	r22, r1
    cfe0:	71 05       	cpc	r23, r1
    cfe2:	91 f1       	breq	.+100    	; 0xd048 <f_rename+0x21a>
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    cfe4:	c7 01       	movw	r24, r14
    cfe6:	0e 94 d9 4b 	call	0x97b2	; 0x97b2 <move_window>
    cfea:	8c 01       	movw	r16, r24
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    cfec:	89 2b       	or	r24, r25
    cfee:	09 f0       	breq	.+2      	; 0xcff2 <f_rename+0x1c4>
    cff0:	67 cf       	rjmp	.-306    	; 0xcec0 <f_rename+0x92>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cff2:	ef 96       	adiw	r28, 0x3f	; 63
    cff4:	8e ad       	ldd	r24, Y+62	; 0x3e
    cff6:	9f ad       	ldd	r25, Y+63	; 0x3f
    cff8:	ef 97       	sbiw	r28, 0x3f	; 63
								if (res == FR_OK && dir[1] == '.') {
    cffa:	fc 01       	movw	r30, r24
    cffc:	ea 5a       	subi	r30, 0xAA	; 170
    cffe:	ff 4f       	sbci	r31, 0xFF	; 255
    d000:	20 81       	ld	r18, Z
    d002:	2e 32       	cpi	r18, 0x2E	; 46
    d004:	71 f4       	brne	.+28     	; 0xd022 <f_rename+0x1f4>
									st_clust(fs, dir, djn.obj.sclust);
    d006:	2f 81       	ldd	r18, Y+7	; 0x07
    d008:	38 85       	ldd	r19, Y+8	; 0x08
    d00a:	49 85       	ldd	r20, Y+9	; 0x09
    d00c:	5a 85       	ldd	r21, Y+10	; 0x0a
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    d00e:	bc 01       	movw	r22, r24
    d010:	6b 5a       	subi	r22, 0xAB	; 171
    d012:	7f 4f       	sbci	r23, 0xFF	; 255
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    d014:	0e 94 5f 4a 	call	0x94be	; 0x94be <st_clust.isra.4>
									fs->wflag = 1;
    d018:	ef 96       	adiw	r28, 0x3f	; 63
    d01a:	ee ad       	ldd	r30, Y+62	; 0x3e
    d01c:	ff ad       	ldd	r31, Y+63	; 0x3f
    d01e:	ef 97       	sbiw	r28, 0x3f	; 63
    d020:	b3 82       	std	Z+3, r11	; 0x03
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    d022:	ce 01       	movw	r24, r28
    d024:	8f 96       	adiw	r24, 0x2f	; 47
    d026:	0e 94 bd 54 	call	0xa97a	; 0xa97a <dir_remove>
    d02a:	8c 01       	movw	r16, r24
				if (res == FR_OK) {
    d02c:	89 2b       	or	r24, r25
    d02e:	09 f0       	breq	.+2      	; 0xd032 <f_rename+0x204>
    d030:	47 cf       	rjmp	.-370    	; 0xcec0 <f_rename+0x92>
					res = sync_fs(fs);
    d032:	ef 96       	adiw	r28, 0x3f	; 63
    d034:	8e ad       	ldd	r24, Y+62	; 0x3e
    d036:	9f ad       	ldd	r25, Y+63	; 0x3f
    d038:	ef 97       	sbiw	r28, 0x3f	; 63
    d03a:	0e 94 bf 4a 	call	0x957e	; 0x957e <sync_fs>
    d03e:	8c 01       	movw	r16, r24
    d040:	3f cf       	rjmp	.-386    	; 0xcec0 <f_rename+0x92>
    d042:	08 e0       	ldi	r16, 0x08	; 8
    d044:	10 e0       	ldi	r17, 0x00	; 0
    d046:	3c cf       	rjmp	.-392    	; 0xcec0 <f_rename+0x92>
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    d048:	02 e0       	ldi	r16, 0x02	; 2
    d04a:	10 e0       	ldi	r17, 0x00	; 0
    d04c:	39 cf       	rjmp	.-398    	; 0xcec0 <f_rename+0x92>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d04e:	ce 57       	subi	r28, 0x7E	; 126
    d050:	df 4f       	sbci	r29, 0xFF	; 255
    d052:	e9 e0       	ldi	r30, 0x09	; 9
    d054:	0c 94 b8 e7 	jmp	0x1cf70	; 0x1cf70 <__epilogue_restores__+0x12>

0000d058 <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    d058:	a2 e3       	ldi	r26, 0x32	; 50
    d05a:	b0 e0       	ldi	r27, 0x00	; 0
    d05c:	e2 e3       	ldi	r30, 0x32	; 50
    d05e:	f8 e6       	ldi	r31, 0x68	; 104
    d060:	0c 94 9d e7 	jmp	0x1cf3a	; 0x1cf3a <__prologue_saves__+0x14>
    d064:	9a ab       	std	Y+50, r25	; 0x32
    d066:	89 ab       	std	Y+49, r24	; 0x31
    d068:	e6 2e       	mov	r14, r22
    d06a:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d06c:	42 e0       	ldi	r20, 0x02	; 2
    d06e:	be 01       	movw	r22, r28
    d070:	61 5d       	subi	r22, 0xD1	; 209
    d072:	7f 4f       	sbci	r23, 0xFF	; 255
    d074:	ce 01       	movw	r24, r28
    d076:	c1 96       	adiw	r24, 0x31	; 49
    d078:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <mount_volume>
	if (res == FR_OK) {
    d07c:	00 97       	sbiw	r24, 0x00	; 0
    d07e:	a9 f5       	brne	.+106    	; 0xd0ea <f_chmod+0x92>
		dj.obj.fs = fs;
    d080:	8f a5       	ldd	r24, Y+47	; 0x2f
    d082:	98 a9       	ldd	r25, Y+48	; 0x30
    d084:	9a 83       	std	Y+2, r25	; 0x02
    d086:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d088:	80 e0       	ldi	r24, 0x00	; 0
    d08a:	92 e0       	ldi	r25, 0x02	; 2
    d08c:	08 d1       	rcall	.+528    	; 0xd29e <ff_memalloc>
    d08e:	6c 01       	movw	r12, r24
    d090:	00 97       	sbiw	r24, 0x00	; 0
    d092:	b1 f0       	breq	.+44     	; 0xd0c0 <f_chmod+0x68>
    d094:	ef a5       	ldd	r30, Y+47	; 0x2f
    d096:	f8 a9       	ldd	r31, Y+48	; 0x30
    d098:	94 87       	std	Z+12, r25	; 0x0c
    d09a:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d09c:	69 a9       	ldd	r22, Y+49	; 0x31
    d09e:	7a a9       	ldd	r23, Y+50	; 0x32
    d0a0:	ce 01       	movw	r24, r28
    d0a2:	01 96       	adiw	r24, 0x01	; 1
    d0a4:	0e 94 a1 57 	call	0xaf42	; 0xaf42 <follow_path>
    d0a8:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d0aa:	89 2b       	or	r24, r25
    d0ac:	29 f4       	brne	.+10     	; 0xd0b8 <f_chmod+0x60>
    d0ae:	88 a5       	ldd	r24, Y+40	; 0x28
    d0b0:	80 7a       	andi	r24, 0xA0	; 160
    d0b2:	49 f0       	breq	.+18     	; 0xd0c6 <f_chmod+0x6e>
    d0b4:	06 e0       	ldi	r16, 0x06	; 6
    d0b6:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d0b8:	c6 01       	movw	r24, r12
    d0ba:	f4 d0       	rcall	.+488    	; 0xd2a4 <ff_memfree>
    d0bc:	c8 01       	movw	r24, r16
    d0be:	15 c0       	rjmp	.+42     	; 0xd0ea <f_chmod+0x92>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d0c0:	81 e1       	ldi	r24, 0x11	; 17
    d0c2:	90 e0       	ldi	r25, 0x00	; 0
    d0c4:	12 c0       	rjmp	.+36     	; 0xd0ea <f_chmod+0x92>
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    d0c6:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d0c8:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d0ca:	83 85       	ldd	r24, Z+11	; 0x0b
    d0cc:	6e 2d       	mov	r22, r14
    d0ce:	68 27       	eor	r22, r24
    d0d0:	6f 21       	and	r22, r15
    d0d2:	67 72       	andi	r22, 0x27	; 39
    d0d4:	68 27       	eor	r22, r24
    d0d6:	63 87       	std	Z+11, r22	; 0x0b
				fs->wflag = 1;
    d0d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    d0da:	98 a9       	ldd	r25, Y+48	; 0x30
    d0dc:	21 e0       	ldi	r18, 0x01	; 1
    d0de:	fc 01       	movw	r30, r24
    d0e0:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d0e2:	0e 94 bf 4a 	call	0x957e	; 0x957e <sync_fs>
    d0e6:	8c 01       	movw	r16, r24
    d0e8:	e7 cf       	rjmp	.-50     	; 0xd0b8 <f_chmod+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d0ea:	e2 96       	adiw	r28, 0x32	; 50
    d0ec:	e8 e0       	ldi	r30, 0x08	; 8
    d0ee:	0c 94 b9 e7 	jmp	0x1cf72	; 0x1cf72 <__epilogue_restores__+0x14>

0000d0f2 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    d0f2:	a2 e3       	ldi	r26, 0x32	; 50
    d0f4:	b0 e0       	ldi	r27, 0x00	; 0
    d0f6:	ef e7       	ldi	r30, 0x7F	; 127
    d0f8:	f8 e6       	ldi	r31, 0x68	; 104
    d0fa:	0c 94 9d e7 	jmp	0x1cf3a	; 0x1cf3a <__prologue_saves__+0x14>
    d0fe:	9a ab       	std	Y+50, r25	; 0x32
    d100:	89 ab       	std	Y+49, r24	; 0x31
    d102:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    d104:	42 e0       	ldi	r20, 0x02	; 2
    d106:	be 01       	movw	r22, r28
    d108:	61 5d       	subi	r22, 0xD1	; 209
    d10a:	7f 4f       	sbci	r23, 0xFF	; 255
    d10c:	ce 01       	movw	r24, r28
    d10e:	c1 96       	adiw	r24, 0x31	; 49
    d110:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <mount_volume>
	if (res == FR_OK) {
    d114:	00 97       	sbiw	r24, 0x00	; 0
    d116:	09 f0       	breq	.+2      	; 0xd11a <f_utime+0x28>
    d118:	41 c0       	rjmp	.+130    	; 0xd19c <f_utime+0xaa>
		dj.obj.fs = fs;
    d11a:	8f a5       	ldd	r24, Y+47	; 0x2f
    d11c:	98 a9       	ldd	r25, Y+48	; 0x30
    d11e:	9a 83       	std	Y+2, r25	; 0x02
    d120:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    d122:	80 e0       	ldi	r24, 0x00	; 0
    d124:	92 e0       	ldi	r25, 0x02	; 2
    d126:	bb d0       	rcall	.+374    	; 0xd29e <ff_memalloc>
    d128:	7c 01       	movw	r14, r24
    d12a:	00 97       	sbiw	r24, 0x00	; 0
    d12c:	b1 f0       	breq	.+44     	; 0xd15a <f_utime+0x68>
    d12e:	ef a5       	ldd	r30, Y+47	; 0x2f
    d130:	f8 a9       	ldd	r31, Y+48	; 0x30
    d132:	94 87       	std	Z+12, r25	; 0x0c
    d134:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    d136:	69 a9       	ldd	r22, Y+49	; 0x31
    d138:	7a a9       	ldd	r23, Y+50	; 0x32
    d13a:	ce 01       	movw	r24, r28
    d13c:	01 96       	adiw	r24, 0x01	; 1
    d13e:	0e 94 a1 57 	call	0xaf42	; 0xaf42 <follow_path>
    d142:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    d144:	89 2b       	or	r24, r25
    d146:	29 f4       	brne	.+10     	; 0xd152 <f_utime+0x60>
    d148:	88 a5       	ldd	r24, Y+40	; 0x28
    d14a:	80 7a       	andi	r24, 0xA0	; 160
    d14c:	49 f0       	breq	.+18     	; 0xd160 <f_utime+0x6e>
    d14e:	06 e0       	ldi	r16, 0x06	; 6
    d150:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    d152:	c7 01       	movw	r24, r14
    d154:	a7 d0       	rcall	.+334    	; 0xd2a4 <ff_memfree>
    d156:	c8 01       	movw	r24, r16
    d158:	21 c0       	rjmp	.+66     	; 0xd19c <f_utime+0xaa>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    d15a:	81 e1       	ldi	r24, 0x11	; 17
    d15c:	90 e0       	ldi	r25, 0x00	; 0
    d15e:	1e c0       	rjmp	.+60     	; 0xd19c <f_utime+0xaa>
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    d160:	f6 01       	movw	r30, r12
    d162:	44 81       	ldd	r20, Z+4	; 0x04
    d164:	55 81       	ldd	r21, Z+5	; 0x05
    d166:	60 e0       	ldi	r22, 0x00	; 0
    d168:	70 e0       	ldi	r23, 0x00	; 0
    d16a:	ba 01       	movw	r22, r20
    d16c:	55 27       	eor	r21, r21
    d16e:	44 27       	eor	r20, r20
    d170:	86 81       	ldd	r24, Z+6	; 0x06
    d172:	97 81       	ldd	r25, Z+7	; 0x07
    d174:	a0 e0       	ldi	r26, 0x00	; 0
    d176:	b0 e0       	ldi	r27, 0x00	; 0
    d178:	48 2b       	or	r20, r24
    d17a:	59 2b       	or	r21, r25
    d17c:	6a 2b       	or	r22, r26
    d17e:	7b 2b       	or	r23, r27
    d180:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d182:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d184:	46 96       	adiw	r24, 0x16	; 22
    d186:	0e 94 2c 48 	call	0x9058	; 0x9058 <st_dword>
				fs->wflag = 1;
    d18a:	8f a5       	ldd	r24, Y+47	; 0x2f
    d18c:	98 a9       	ldd	r25, Y+48	; 0x30
    d18e:	21 e0       	ldi	r18, 0x01	; 1
    d190:	fc 01       	movw	r30, r24
    d192:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    d194:	0e 94 bf 4a 	call	0x957e	; 0x957e <sync_fs>
    d198:	8c 01       	movw	r16, r24
    d19a:	db cf       	rjmp	.-74     	; 0xd152 <f_utime+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d19c:	e2 96       	adiw	r28, 0x32	; 50
    d19e:	e8 e0       	ldi	r30, 0x08	; 8
    d1a0:	0c 94 b9 e7 	jmp	0x1cf72	; 0x1cf72 <__epilogue_restores__+0x14>

0000d1a4 <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    d1a4:	a2 e3       	ldi	r26, 0x32	; 50
    d1a6:	b0 e0       	ldi	r27, 0x00	; 0
    d1a8:	e8 ed       	ldi	r30, 0xD8	; 216
    d1aa:	f8 e6       	ldi	r31, 0x68	; 104
    d1ac:	0c 94 9d e7 	jmp	0x1cf3a	; 0x1cf3a <__prologue_saves__+0x14>
    d1b0:	9a ab       	std	Y+50, r25	; 0x32
    d1b2:	89 ab       	std	Y+49, r24	; 0x31
    d1b4:	7b 01       	movw	r14, r22
    d1b6:	6a 01       	movw	r12, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    d1b8:	40 e0       	ldi	r20, 0x00	; 0
    d1ba:	be 01       	movw	r22, r28
    d1bc:	61 5d       	subi	r22, 0xD1	; 209
    d1be:	7f 4f       	sbci	r23, 0xFF	; 255
    d1c0:	ce 01       	movw	r24, r28
    d1c2:	c1 96       	adiw	r24, 0x31	; 49
    d1c4:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <mount_volume>
    d1c8:	8c 01       	movw	r16, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    d1ca:	89 2b       	or	r24, r25
    d1cc:	09 f0       	breq	.+2      	; 0xd1d0 <f_getlabel+0x2c>
    d1ce:	62 c0       	rjmp	.+196    	; 0xd294 <f_getlabel+0xf0>
    d1d0:	e1 14       	cp	r14, r1
    d1d2:	f1 04       	cpc	r15, r1
    d1d4:	a1 f1       	breq	.+104    	; 0xd23e <f_getlabel+0x9a>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    d1d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    d1d8:	98 a9       	ldd	r25, Y+48	; 0x30
    d1da:	9a 83       	std	Y+2, r25	; 0x02
    d1dc:	89 83       	std	Y+1, r24	; 0x01
    d1de:	1f 82       	std	Y+7, r1	; 0x07
    d1e0:	18 86       	std	Y+8, r1	; 0x08
    d1e2:	19 86       	std	Y+9, r1	; 0x09
    d1e4:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    d1e6:	40 e0       	ldi	r20, 0x00	; 0
    d1e8:	50 e0       	ldi	r21, 0x00	; 0
    d1ea:	ba 01       	movw	r22, r20
    d1ec:	ce 01       	movw	r24, r28
    d1ee:	01 96       	adiw	r24, 0x01	; 1
    d1f0:	0e 94 5b 50 	call	0xa0b6	; 0xa0b6 <dir_sdi>
		if (res == FR_OK) {
    d1f4:	00 97       	sbiw	r24, 0x00	; 0
    d1f6:	f1 f4       	brne	.+60     	; 0xd234 <f_getlabel+0x90>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    d1f8:	61 e0       	ldi	r22, 0x01	; 1
    d1fa:	70 e0       	ldi	r23, 0x00	; 0
    d1fc:	ce 01       	movw	r24, r28
    d1fe:	01 96       	adiw	r24, 0x01	; 1
    d200:	0e 94 f4 53 	call	0xa7e8	; 0xa7e8 <dir_read>
		 	if (res == FR_OK) {
    d204:	00 97       	sbiw	r24, 0x00	; 0
    d206:	b1 f4       	brne	.+44     	; 0xd234 <f_getlabel+0x90>
    d208:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d20a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d20c:	f7 01       	movw	r30, r14
    d20e:	3b 96       	adiw	r30, 0x0b	; 11
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    d210:	a7 01       	movw	r20, r14
    d212:	dc 01       	movw	r26, r24
    d214:	2d 91       	ld	r18, X+
    d216:	cd 01       	movw	r24, r26
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
						if (wc == 0) { di = 0; break; }
						di += wc;
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
    d218:	da 01       	movw	r26, r20
    d21a:	2d 93       	st	X+, r18
    d21c:	ad 01       	movw	r20, r26
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    d21e:	ae 17       	cp	r26, r30
    d220:	bf 07       	cpc	r27, r31
    d222:	b9 f7       	brne	.-18     	; 0xd212 <f_getlabel+0x6e>
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    d224:	10 82       	st	Z, r1
						if (di == 0) break;
    d226:	ee 16       	cp	r14, r30
    d228:	ff 06       	cpc	r15, r31
    d22a:	49 f0       	breq	.+18     	; 0xd23e <f_getlabel+0x9a>
					} while (label[--di] == ' ');
    d22c:	82 91       	ld	r24, -Z
    d22e:	80 32       	cpi	r24, 0x20	; 32
    d230:	c9 f3       	breq	.-14     	; 0xd224 <f_getlabel+0x80>
    d232:	05 c0       	rjmp	.+10     	; 0xd23e <f_getlabel+0x9a>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d234:	84 30       	cpi	r24, 0x04	; 4
    d236:	91 05       	cpc	r25, r1
    d238:	61 f5       	brne	.+88     	; 0xd292 <f_getlabel+0xee>
			label[0] = 0;
    d23a:	f7 01       	movw	r30, r14
    d23c:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    d23e:	c1 14       	cp	r12, r1
    d240:	d1 04       	cpc	r13, r1
    d242:	41 f1       	breq	.+80     	; 0xd294 <f_getlabel+0xf0>
		res = move_window(fs, fs->volbase);
    d244:	8f a5       	ldd	r24, Y+47	; 0x2f
    d246:	98 a9       	ldd	r25, Y+48	; 0x30
    d248:	fc 01       	movw	r30, r24
    d24a:	41 a1       	ldd	r20, Z+33	; 0x21
    d24c:	52 a1       	ldd	r21, Z+34	; 0x22
    d24e:	63 a1       	ldd	r22, Z+35	; 0x23
    d250:	74 a1       	ldd	r23, Z+36	; 0x24
    d252:	0e 94 d9 4b 	call	0x97b2	; 0x97b2 <move_window>
    d256:	8c 01       	movw	r16, r24
		if (res == FR_OK) {
    d258:	89 2b       	or	r24, r25
    d25a:	e1 f4       	brne	.+56     	; 0xd294 <f_getlabel+0xf0>
			switch (fs->fs_type) {
    d25c:	ef a5       	ldd	r30, Y+47	; 0x2f
    d25e:	f8 a9       	ldd	r31, Y+48	; 0x30
    d260:	80 81       	ld	r24, Z
    d262:	83 30       	cpi	r24, 0x03	; 3
    d264:	29 f0       	breq	.+10     	; 0xd270 <f_getlabel+0xcc>
    d266:	84 30       	cpi	r24, 0x04	; 4
    d268:	31 f0       	breq	.+12     	; 0xd276 <f_getlabel+0xd2>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    d26a:	87 e2       	ldi	r24, 0x27	; 39
    d26c:	90 e0       	ldi	r25, 0x00	; 0
    d26e:	05 c0       	rjmp	.+10     	; 0xd27a <f_getlabel+0xd6>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    d270:	83 e4       	ldi	r24, 0x43	; 67
    d272:	90 e0       	ldi	r25, 0x00	; 0
    d274:	02 c0       	rjmp	.+4      	; 0xd27a <f_getlabel+0xd6>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    d276:	84 e6       	ldi	r24, 0x64	; 100
    d278:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    d27a:	f5 96       	adiw	r30, 0x35	; 53
    d27c:	8e 0f       	add	r24, r30
    d27e:	9f 1f       	adc	r25, r31
    d280:	0e 94 17 48 	call	0x902e	; 0x902e <ld_dword>
    d284:	d6 01       	movw	r26, r12
    d286:	6d 93       	st	X+, r22
    d288:	7d 93       	st	X+, r23
    d28a:	8d 93       	st	X+, r24
    d28c:	9c 93       	st	X, r25
    d28e:	13 97       	sbiw	r26, 0x03	; 3
    d290:	01 c0       	rjmp	.+2      	; 0xd294 <f_getlabel+0xf0>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d292:	8c 01       	movw	r16, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    d294:	c8 01       	movw	r24, r16
    d296:	e2 96       	adiw	r28, 0x32	; 50
    d298:	e8 e0       	ldi	r30, 0x08	; 8
    d29a:	0c 94 b9 e7 	jmp	0x1cf72	; 0x1cf72 <__epilogue_restores__+0x14>

0000d29e <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d29e:	0c 94 c7 27 	jmp	0x4f8e	; 0x4f8e <safemalloc>
}
    d2a2:	08 95       	ret

0000d2a4 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    d2a4:	0c 94 e9 27 	jmp	0x4fd2	; 0x4fd2 <safefree>
    d2a8:	08 95       	ret

0000d2aa <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    d2aa:	cf 92       	push	r12
    d2ac:	df 92       	push	r13
    d2ae:	ef 92       	push	r14
    d2b0:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    d2b2:	60 38       	cpi	r22, 0x80	; 128
    d2b4:	71 05       	cpc	r23, r1
    d2b6:	81 05       	cpc	r24, r1
    d2b8:	91 05       	cpc	r25, r1
    d2ba:	10 f4       	brcc	.+4      	; 0xd2c0 <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    d2bc:	cb 01       	movw	r24, r22
    d2be:	23 c0       	rjmp	.+70     	; 0xd306 <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    d2c0:	61 15       	cp	r22, r1
    d2c2:	71 05       	cpc	r23, r1
    d2c4:	21 e0       	ldi	r18, 0x01	; 1
    d2c6:	82 07       	cpc	r24, r18
    d2c8:	91 05       	cpc	r25, r1
    d2ca:	d8 f4       	brcc	.+54     	; 0xd302 <ff_uni2oem+0x58>
    d2cc:	45 3b       	cpi	r20, 0xB5	; 181
    d2ce:	51 40       	sbci	r21, 0x01	; 1
    d2d0:	c1 f4       	brne	.+48     	; 0xd302 <ff_uni2oem+0x58>
    d2d2:	e6 ea       	ldi	r30, 0xA6	; 166
    d2d4:	f7 e0       	ldi	r31, 0x07	; 7
    d2d6:	20 e0       	ldi	r18, 0x00	; 0
    d2d8:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    d2da:	c1 90       	ld	r12, Z+
    d2dc:	d1 90       	ld	r13, Z+
    d2de:	e1 2c       	mov	r14, r1
    d2e0:	f1 2c       	mov	r15, r1
    d2e2:	6c 15       	cp	r22, r12
    d2e4:	7d 05       	cpc	r23, r13
    d2e6:	8e 05       	cpc	r24, r14
    d2e8:	9f 05       	cpc	r25, r15
    d2ea:	29 f0       	breq	.+10     	; 0xd2f6 <ff_uni2oem+0x4c>
    d2ec:	2f 5f       	subi	r18, 0xFF	; 255
    d2ee:	3f 4f       	sbci	r19, 0xFF	; 255
    d2f0:	20 38       	cpi	r18, 0x80	; 128
    d2f2:	31 05       	cpc	r19, r1
    d2f4:	91 f7       	brne	.-28     	; 0xd2da <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    d2f6:	b9 01       	movw	r22, r18
    d2f8:	60 58       	subi	r22, 0x80	; 128
    d2fa:	7f 4f       	sbci	r23, 0xFF	; 255
    d2fc:	cb 01       	movw	r24, r22
    d2fe:	99 27       	eor	r25, r25
    d300:	02 c0       	rjmp	.+4      	; 0xd306 <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d302:	80 e0       	ldi	r24, 0x00	; 0
    d304:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d306:	ff 90       	pop	r15
    d308:	ef 90       	pop	r14
    d30a:	df 90       	pop	r13
    d30c:	cf 90       	pop	r12
    d30e:	08 95       	ret

0000d310 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    d310:	80 38       	cpi	r24, 0x80	; 128
    d312:	91 05       	cpc	r25, r1
    d314:	88 f0       	brcs	.+34     	; 0xd338 <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    d316:	65 3b       	cpi	r22, 0xB5	; 181
    d318:	71 40       	sbci	r23, 0x01	; 1
    d31a:	61 f4       	brne	.+24     	; 0xd334 <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    d31c:	8f 3f       	cpi	r24, 0xFF	; 255
    d31e:	91 05       	cpc	r25, r1
    d320:	09 f0       	breq	.+2      	; 0xd324 <ff_oem2uni+0x14>
    d322:	40 f4       	brcc	.+16     	; 0xd334 <ff_oem2uni+0x24>
    d324:	88 0f       	add	r24, r24
    d326:	99 1f       	adc	r25, r25
    d328:	fc 01       	movw	r30, r24
    d32a:	ea 55       	subi	r30, 0x5A	; 90
    d32c:	f9 4f       	sbci	r31, 0xF9	; 249
    d32e:	80 81       	ld	r24, Z
    d330:	91 81       	ldd	r25, Z+1	; 0x01
    d332:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d334:	80 e0       	ldi	r24, 0x00	; 0
    d336:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    d338:	08 95       	ret

0000d33a <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    d33a:	61 15       	cp	r22, r1
    d33c:	71 05       	cpc	r23, r1
    d33e:	21 e0       	ldi	r18, 0x01	; 1
    d340:	82 07       	cpc	r24, r18
    d342:	91 05       	cpc	r25, r1
    d344:	08 f0       	brcs	.+2      	; 0xd348 <ff_wtoupper+0xe>
    d346:	5a c0       	rjmp	.+180    	; 0xd3fc <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    d348:	61 15       	cp	r22, r1
    d34a:	80 e1       	ldi	r24, 0x10	; 16
    d34c:	78 07       	cpc	r23, r24
    d34e:	18 f0       	brcs	.+6      	; 0xd356 <ff_wtoupper+0x1c>
    d350:	a8 ef       	ldi	r26, 0xF8	; 248
    d352:	b4 e0       	ldi	r27, 0x04	; 4
    d354:	02 c0       	rjmp	.+4      	; 0xd35a <ff_wtoupper+0x20>
    d356:	a4 eb       	ldi	r26, 0xB4	; 180
    d358:	b5 e0       	ldi	r27, 0x05	; 5
		for (;;) {
			bc = *p++;								/* Get the block base */
    d35a:	2d 91       	ld	r18, X+
    d35c:	3c 91       	ld	r19, X
    d35e:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    d360:	21 15       	cp	r18, r1
    d362:	31 05       	cpc	r19, r1
    d364:	09 f4       	brne	.+2      	; 0xd368 <ff_wtoupper+0x2e>
    d366:	48 c0       	rjmp	.+144    	; 0xd3f8 <ff_wtoupper+0xbe>
    d368:	62 17       	cp	r22, r18
    d36a:	73 07       	cpc	r23, r19
    d36c:	08 f4       	brcc	.+2      	; 0xd370 <ff_wtoupper+0x36>
    d36e:	44 c0       	rjmp	.+136    	; 0xd3f8 <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d370:	14 96       	adiw	r26, 0x04	; 4
    d372:	fd 01       	movw	r30, r26
    d374:	32 97       	sbiw	r30, 0x02	; 2
    d376:	80 81       	ld	r24, Z
    d378:	91 81       	ldd	r25, Z+1	; 0x01
    d37a:	e9 2f       	mov	r30, r25
    d37c:	ff 27       	eor	r31, r31
    d37e:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d380:	a9 01       	movw	r20, r18
    d382:	48 0f       	add	r20, r24
    d384:	59 1f       	adc	r21, r25
    d386:	64 17       	cp	r22, r20
    d388:	75 07       	cpc	r23, r21
    d38a:	70 f5       	brcc	.+92     	; 0xd3e8 <ff_wtoupper+0xae>
				switch (cmd) {
    d38c:	e9 30       	cpi	r30, 0x09	; 9
    d38e:	f1 05       	cpc	r31, r1
    d390:	98 f5       	brcc	.+102    	; 0xd3f8 <ff_wtoupper+0xbe>
    d392:	ec 54       	subi	r30, 0x4C	; 76
    d394:	ff 4f       	sbci	r31, 0xFF	; 255
    d396:	0c 94 64 e7 	jmp	0x1cec8	; 0x1cec8 <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d39a:	62 1b       	sub	r22, r18
    d39c:	73 0b       	sbc	r23, r19
    d39e:	fb 01       	movw	r30, r22
    d3a0:	ee 0f       	add	r30, r30
    d3a2:	ff 1f       	adc	r31, r31
    d3a4:	ea 0f       	add	r30, r26
    d3a6:	fb 1f       	adc	r31, r27
    d3a8:	60 81       	ld	r22, Z
    d3aa:	71 81       	ldd	r23, Z+1	; 0x01
    d3ac:	25 c0       	rjmp	.+74     	; 0xd3f8 <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d3ae:	cb 01       	movw	r24, r22
    d3b0:	82 1b       	sub	r24, r18
    d3b2:	93 0b       	sbc	r25, r19
    d3b4:	81 70       	andi	r24, 0x01	; 1
    d3b6:	99 27       	eor	r25, r25
    d3b8:	68 1b       	sub	r22, r24
    d3ba:	79 0b       	sbc	r23, r25
    d3bc:	1d c0       	rjmp	.+58     	; 0xd3f8 <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d3be:	60 51       	subi	r22, 0x10	; 16
    d3c0:	71 09       	sbc	r23, r1
    d3c2:	1a c0       	rjmp	.+52     	; 0xd3f8 <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d3c4:	60 52       	subi	r22, 0x20	; 32
    d3c6:	71 09       	sbc	r23, r1
    d3c8:	17 c0       	rjmp	.+46     	; 0xd3f8 <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d3ca:	60 53       	subi	r22, 0x30	; 48
    d3cc:	71 09       	sbc	r23, r1
    d3ce:	14 c0       	rjmp	.+40     	; 0xd3f8 <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d3d0:	6a 51       	subi	r22, 0x1A	; 26
    d3d2:	71 09       	sbc	r23, r1
    d3d4:	11 c0       	rjmp	.+34     	; 0xd3f8 <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d3d6:	68 5f       	subi	r22, 0xF8	; 248
    d3d8:	7f 4f       	sbci	r23, 0xFF	; 255
    d3da:	0e c0       	rjmp	.+28     	; 0xd3f8 <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d3dc:	60 55       	subi	r22, 0x50	; 80
    d3de:	71 09       	sbc	r23, r1
    d3e0:	0b c0       	rjmp	.+22     	; 0xd3f8 <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d3e2:	60 56       	subi	r22, 0x60	; 96
    d3e4:	7c 41       	sbci	r23, 0x1C	; 28
    d3e6:	08 c0       	rjmp	.+16     	; 0xd3f8 <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d3e8:	ef 2b       	or	r30, r31
    d3ea:	09 f0       	breq	.+2      	; 0xd3ee <ff_wtoupper+0xb4>
    d3ec:	b6 cf       	rjmp	.-148    	; 0xd35a <ff_wtoupper+0x20>
    d3ee:	88 0f       	add	r24, r24
    d3f0:	99 1f       	adc	r25, r25
    d3f2:	a8 0f       	add	r26, r24
    d3f4:	b9 1f       	adc	r27, r25
    d3f6:	b1 cf       	rjmp	.-158    	; 0xd35a <ff_wtoupper+0x20>
		}
		uni = uc;
    d3f8:	80 e0       	ldi	r24, 0x00	; 0
    d3fa:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d3fc:	08 95       	ret

0000d3fe <disk_status>:

DSTATUS disk_status (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
    d3fe:	81 11       	cpse	r24, r1
    d400:	02 c0       	rjmp	.+4      	; 0xd406 <disk_status+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_status() );
    d402:	a1 c1       	rjmp	.+834    	; 0xd746 <mmc_disk_status>
    d404:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_status() );
#endif
    }
    return STA_NOINIT;
    d406:	81 e0       	ldi	r24, 0x01	; 1
}
    d408:	08 95       	ret

0000d40a <disk_initialize>:
DSTATUS disk_initialize (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{

    switch (pdrv)
    d40a:	81 11       	cpse	r24, r1
    d40c:	02 c0       	rjmp	.+4      	; 0xd412 <disk_initialize+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_initialize() );
    d40e:	f6 c0       	rjmp	.+492    	; 0xd5fc <mmc_disk_initialize>
    d410:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_initialize() );
#endif
    }
    return STA_NOINIT;
    d412:	81 e0       	ldi	r24, 0x01	; 1
}
    d414:	08 95       	ret

0000d416 <disk_read>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
BYTE *buff,                                       /* Data buffer to store read data */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to read */
)
{
    d416:	0f 93       	push	r16
    d418:	1f 93       	push	r17
    d41a:	fb 01       	movw	r30, r22
    switch (pdrv)
    d41c:	81 11       	cpse	r24, r1
    d41e:	06 c0       	rjmp	.+12     	; 0xd42c <disk_read+0x16>
    d420:	ba 01       	movw	r22, r20
    d422:	a9 01       	movw	r20, r18
    d424:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_read(buff, sector, count) );
    d426:	98 01       	movw	r18, r16
    d428:	91 d1       	rcall	.+802    	; 0xd74c <mmc_disk_read>
    d42a:	02 c0       	rjmp	.+4      	; 0xd430 <disk_read+0x1a>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_read(buff, sector, count) );
#endif
    }
    return RES_PARERR;
    d42c:	84 e0       	ldi	r24, 0x04	; 4
    d42e:	90 e0       	ldi	r25, 0x00	; 0
}
    d430:	1f 91       	pop	r17
    d432:	0f 91       	pop	r16
    d434:	08 95       	ret

0000d436 <disk_write>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
const BYTE *buff,                                 /* Data to be written */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to write */
)
{
    d436:	0f 93       	push	r16
    d438:	1f 93       	push	r17
    d43a:	fb 01       	movw	r30, r22
    switch (pdrv)
    d43c:	81 11       	cpse	r24, r1
    d43e:	06 c0       	rjmp	.+12     	; 0xd44c <disk_write+0x16>
    d440:	ba 01       	movw	r22, r20
    d442:	a9 01       	movw	r20, r18
    d444:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_write(buff, sector, count) );
    d446:	98 01       	movw	r18, r16
    d448:	e2 d1       	rcall	.+964    	; 0xd80e <mmc_disk_write>
    d44a:	02 c0       	rjmp	.+4      	; 0xd450 <disk_write+0x1a>
        case DEV_USB :
            return ( usb_disk_write(buff, sector, count) );
#endif
    }

    return RES_PARERR;
    d44c:	84 e0       	ldi	r24, 0x04	; 4
    d44e:	90 e0       	ldi	r25, 0x00	; 0
}
    d450:	1f 91       	pop	r17
    d452:	0f 91       	pop	r16
    d454:	08 95       	ret

0000d456 <disk_ioctl>:
DRESULT disk_ioctl (
BYTE pdrv,                                        /* Physical drive nmuber (0..) */
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d456:	96 2f       	mov	r25, r22
    switch (pdrv)
    d458:	81 11       	cpse	r24, r1
    d45a:	04 c0       	rjmp	.+8      	; 0xd464 <disk_ioctl+0xe>
    d45c:	ba 01       	movw	r22, r20
    d45e:	89 2f       	mov	r24, r25
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_ioctl(cmd, buff) );
    d460:	4a c2       	rjmp	.+1172   	; 0xd8f6 <mmc_disk_ioctl>
    d462:	08 95       	ret
#ifdef DRV_USB
        case DEV_MMC :
            return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d464:	84 e0       	ldi	r24, 0x04	; 4
    d466:	90 e0       	ldi	r25, 0x00	; 0
}
    d468:	08 95       	ret

0000d46a <xchg_spi>:
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d46a:	f9 c4       	rjmp	.+2546   	; 0xde5e <mmc_spi_TXRX>
    return dat;
}
    d46c:	08 95       	ret

0000d46e <deselect>:
///@return void
MEMSPACE
static
void deselect (void)
{
    CS_HIGH();
    d46e:	ce d4       	rcall	.+2460   	; 0xde0c <mmc_spi_end>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d470:	8f ef       	ldi	r24, 0xFF	; 255
    d472:	fb df       	rcall	.-10     	; 0xd46a <xchg_spi>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d474:	8f ef       	ldi	r24, 0xFF	; 255
    d476:	f9 cf       	rjmp	.-14     	; 0xd46a <xchg_spi>
    d478:	08 95       	ret

0000d47a <rcvr_datablock>:
    d47a:	0f 93       	push	r16
static
int rcvr_datablock (
BYTE *buff,                                       /*< Data buffer to store received data */
UINT btr                                          /*< Byte count (must be multiple of 4) */
)
{
    d47c:	1f 93       	push	r17
    d47e:	cf 93       	push	r28
    d480:	df 93       	push	r29
    d482:	ec 01       	movw	r28, r24
    d484:	8b 01       	movw	r16, r22
    BYTE token;

    mmc_set_ms_timeout(1000);
    d486:	88 ee       	ldi	r24, 0xE8	; 232
    d488:	93 e0       	ldi	r25, 0x03	; 3
    d48a:	ec d4       	rcall	.+2520   	; 0xde64 <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d48c:	8f ef       	ldi	r24, 0xFF	; 255
    d48e:	e7 d4       	rcall	.+2510   	; 0xde5e <mmc_spi_TXRX>

    mmc_set_ms_timeout(1000);
    do                                            /* Wait for data packet in timeout of 400ms */
    {
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    d490:	8f 3f       	cpi	r24, 0xFF	; 255
    d492:	31 f4       	brne	.+12     	; 0xd4a0 <rcvr_datablock+0x26>
    d494:	ee d4       	rcall	.+2524   	; 0xde72 <mmc_test_timeout>
    d496:	89 2b       	or	r24, r25
    d498:	c9 f3       	breq	.-14     	; 0xd48c <rcvr_datablock+0x12>
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */
    d49a:	80 e0       	ldi	r24, 0x00	; 0
    d49c:	90 e0       	ldi	r25, 0x00	; 0
    d49e:	0b c0       	rjmp	.+22     	; 0xd4b6 <rcvr_datablock+0x3c>
    d4a0:	8e 3f       	cpi	r24, 0xFE	; 254
void rcvr_spi_multi (
BYTE *p,                                          /* Data read buffer */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_RX_buffer((uint8_t *)p, cnt);
    d4a2:	d9 f7       	brne	.-10     	; 0xd49a <rcvr_datablock+0x20>
    d4a4:	b8 01       	movw	r22, r16
    d4a6:	ce 01       	movw	r24, r28
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */

    rcvr_spi_multi(buff, btr);                    /* Receive the data block into buffer */
    xchg_spi(0xFF);                               /* Discard CRC */
    d4a8:	d7 d4       	rcall	.+2478   	; 0xde58 <mmc_spi_RX_buffer>
    d4aa:	8f ef       	ldi	r24, 0xFF	; 255
    d4ac:	de df       	rcall	.-68     	; 0xd46a <xchg_spi>
    xchg_spi(0xFF);
    d4ae:	8f ef       	ldi	r24, 0xFF	; 255
    d4b0:	dc df       	rcall	.-72     	; 0xd46a <xchg_spi>
    d4b2:	81 e0       	ldi	r24, 0x01	; 1
    d4b4:	90 e0       	ldi	r25, 0x00	; 0
    d4b6:	df 91       	pop	r29

    return 1;                                     /* Return with success */
}
    d4b8:	cf 91       	pop	r28
    d4ba:	1f 91       	pop	r17
    d4bc:	0f 91       	pop	r16
    d4be:	08 95       	ret

0000d4c0 <wait_ready>:
    d4c0:	cf 93       	push	r28
int wait_ready (
UINT wt                                           /*< Timeout [ms] */
)
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    d4c2:	d0 d4       	rcall	.+2464   	; 0xde64 <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d4c4:	8f ef       	ldi	r24, 0xFF	; 255
    d4c6:	cb d4       	rcall	.+2454   	; 0xde5e <mmc_spi_TXRX>
    d4c8:	c8 2f       	mov	r28, r24
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    do
    d = xchg_spi(0xFF);
    while (d != 0xFF && !mmc_test_timeout());
    d4ca:	8f 3f       	cpi	r24, 0xFF	; 255
    d4cc:	19 f0       	breq	.+6      	; 0xd4d4 <wait_ready+0x14>
    d4ce:	d1 d4       	rcall	.+2466   	; 0xde72 <mmc_test_timeout>
    d4d0:	89 2b       	or	r24, r25
    d4d2:	c1 f3       	breq	.-16     	; 0xd4c4 <wait_ready+0x4>

    return (d == 0xFF) ? 1 : 0;
    d4d4:	81 e0       	ldi	r24, 0x01	; 1
    d4d6:	90 e0       	ldi	r25, 0x00	; 0
    d4d8:	cf 3f       	cpi	r28, 0xFF	; 255
    d4da:	11 f0       	breq	.+4      	; 0xd4e0 <wait_ready+0x20>
    d4dc:	80 e0       	ldi	r24, 0x00	; 0
    d4de:	90 e0       	ldi	r25, 0x00	; 0
}
    d4e0:	cf 91       	pop	r28
    d4e2:	08 95       	ret

0000d4e4 <select>:
///@return 1 Successful
///@return 0 Timeout
MEMSPACE
static
int select (void)
{
    d4e4:	cf 93       	push	r28
    d4e6:	df 93       	push	r29
    d4e8:	00 d0       	rcall	.+0      	; 0xd4ea <select+0x6>
    d4ea:	1f 92       	push	r1
    CS_LOW();
    d4ec:	82 d4       	rcall	.+2308   	; 0xddf2 <mmc_spi_begin>
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */
    d4ee:	8f ef       	ldi	r24, 0xFF	; 255
    d4f0:	bc df       	rcall	.-136    	; 0xd46a <xchg_spi>

    if (wait_ready(1000))
    d4f2:	88 ee       	ldi	r24, 0xE8	; 232
    d4f4:	93 e0       	ldi	r25, 0x03	; 3
    d4f6:	e4 df       	rcall	.-56     	; 0xd4c0 <wait_ready>
    d4f8:	ec 01       	movw	r28, r24
    d4fa:	89 2b       	or	r24, r25
    d4fc:	61 f4       	brne	.+24     	; 0xd516 <select+0x32>
        return 1;                                 /* OK */

    printf("select failed!\n");
    d4fe:	8b e6       	ldi	r24, 0x6B	; 107
    d500:	97 e0       	ldi	r25, 0x07	; 7
    d502:	a0 e0       	ldi	r26, 0x00	; 0
    d504:	ed b7       	in	r30, 0x3d	; 61
    d506:	fe b7       	in	r31, 0x3e	; 62
    d508:	81 83       	std	Z+1, r24	; 0x01
    d50a:	92 83       	std	Z+2, r25	; 0x02
    d50c:	a3 83       	std	Z+3, r26	; 0x03
    d50e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

    deselect();
    d512:	ad df       	rcall	.-166    	; 0xd46e <deselect>
    d514:	02 c0       	rjmp	.+4      	; 0xd51a <select+0x36>
{
    CS_LOW();
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */

    if (wait_ready(1000))
        return 1;                                 /* OK */
    d516:	c1 e0       	ldi	r28, 0x01	; 1
    d518:	d0 e0       	ldi	r29, 0x00	; 0

    printf("select failed!\n");

    deselect();
    return 0;                                     /* Timeout */
}
    d51a:	ce 01       	movw	r24, r28
    d51c:	cd b7       	in	r28, 0x3d	; 61
    d51e:	de b7       	in	r29, 0x3e	; 62
    d520:	23 96       	adiw	r28, 0x03	; 3
    d522:	e2 e0       	ldi	r30, 0x02	; 2
    d524:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

0000d528 <send_cmd>:
static
BYTE send_cmd (
BYTE cmd,                                         /*< Command index */
DWORD arg                                         /*< Argument */
)
{
    d528:	ff 92       	push	r15
    d52a:	0f 93       	push	r16
    d52c:	1f 93       	push	r17
    d52e:	cf 93       	push	r28
    d530:	df 93       	push	r29
    d532:	c8 2f       	mov	r28, r24
    d534:	d4 2f       	mov	r29, r20
    d536:	15 2f       	mov	r17, r21
    d538:	06 2f       	mov	r16, r22
    d53a:	f7 2e       	mov	r15, r23
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    d53c:	87 ff       	sbrs	r24, 7
    d53e:	08 c0       	rjmp	.+16     	; 0xd550 <send_cmd+0x28>
    {
        cmd &= 0x7F;
        res = send_cmd(CMD55, 0);
    d540:	40 e0       	ldi	r20, 0x00	; 0
    d542:	50 e0       	ldi	r21, 0x00	; 0
    d544:	ba 01       	movw	r22, r20
    d546:	87 e3       	ldi	r24, 0x37	; 55
    d548:	ef df       	rcall	.-34     	; 0xd528 <send_cmd>
        if (res > 1) return res;
    d54a:	82 30       	cpi	r24, 0x02	; 2
    d54c:	58 f5       	brcc	.+86     	; 0xd5a4 <send_cmd+0x7c>
{
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    {
        cmd &= 0x7F;
    d54e:	cf 77       	andi	r28, 0x7F	; 127
        res = send_cmd(CMD55, 0);
        if (res > 1) return res;
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    d550:	cc 30       	cpi	r28, 0x0C	; 12
    d552:	71 f4       	brne	.+28     	; 0xd570 <send_cmd+0x48>
        deselect();
        if (!select()) return 0xFF;
    }

/* Send command packet */
    xchg_spi(0x40 | cmd);                         /* Start + Command index */
    d554:	8c 2f       	mov	r24, r28
    d556:	80 64       	ori	r24, 0x40	; 64
    d558:	88 df       	rcall	.-240    	; 0xd46a <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));                  /* Argument[31..24] */
    d55a:	8f 2d       	mov	r24, r15
    d55c:	86 df       	rcall	.-244    	; 0xd46a <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    d55e:	80 2f       	mov	r24, r16
    d560:	84 df       	rcall	.-248    	; 0xd46a <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    d562:	81 2f       	mov	r24, r17
    d564:	82 df       	rcall	.-252    	; 0xd46a <xchg_spi>
    d566:	8d 2f       	mov	r24, r29
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    d568:	80 df       	rcall	.-256    	; 0xd46a <xchg_spi>
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    d56a:	cc 23       	and	r28, r28
    d56c:	c9 f0       	breq	.+50     	; 0xd5a0 <send_cmd+0x78>
    d56e:	06 c0       	rjmp	.+12     	; 0xd57c <send_cmd+0x54>
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    {
        deselect();
    d570:	7e df       	rcall	.-260    	; 0xd46e <deselect>
    d572:	b8 df       	rcall	.-144    	; 0xd4e4 <select>
        if (!select()) return 0xFF;
    d574:	89 2b       	or	r24, r25
    d576:	71 f7       	brne	.-36     	; 0xd554 <send_cmd+0x2c>
    d578:	8f ef       	ldi	r24, 0xFF	; 255
    d57a:	14 c0       	rjmp	.+40     	; 0xd5a4 <send_cmd+0x7c>
    d57c:	c8 30       	cpi	r28, 0x08	; 8
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d57e:	11 f4       	brne	.+4      	; 0xd584 <send_cmd+0x5c>
    d580:	87 e8       	ldi	r24, 0x87	; 135
    d582:	01 c0       	rjmp	.+2      	; 0xd586 <send_cmd+0x5e>

    xchg_spi(n);
    d584:	81 e0       	ldi	r24, 0x01	; 1
    d586:	71 df       	rcall	.-286    	; 0xd46a <xchg_spi>

/* Receive command response */
    if (cmd == CMD12) xchg_spi(0xFF);             /* Skip a stuff byte when stop reading */
    d588:	cc 30       	cpi	r28, 0x0C	; 12
    d58a:	11 f4       	brne	.+4      	; 0xd590 <send_cmd+0x68>
    d58c:	8f ef       	ldi	r24, 0xFF	; 255
    d58e:	6d df       	rcall	.-294    	; 0xd46a <xchg_spi>
    d590:	ca e0       	ldi	r28, 0x0A	; 10
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d592:	8f ef       	ldi	r24, 0xFF	; 255
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d594:	64 d4       	rcall	.+2248   	; 0xde5e <mmc_spi_TXRX>
    d596:	87 ff       	sbrs	r24, 7
    d598:	05 c0       	rjmp	.+10     	; 0xd5a4 <send_cmd+0x7c>
    n = 10;                                       /* Wait for a valid response in timeout of 10 attempts */
    do
    {
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);
    d59a:	c1 50       	subi	r28, 0x01	; 1
    d59c:	d1 f7       	brne	.-12     	; 0xd592 <send_cmd+0x6a>
    d59e:	02 c0       	rjmp	.+4      	; 0xd5a4 <send_cmd+0x7c>
    d5a0:	85 e9       	ldi	r24, 0x95	; 149
    d5a2:	f5 cf       	rjmp	.-22     	; 0xd58e <send_cmd+0x66>
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */

    xchg_spi(n);
    d5a4:	cd b7       	in	r28, 0x3d	; 61
    d5a6:	de b7       	in	r29, 0x3e	; 62
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);

    return res;                                   /* Return with the response value */
}
    d5a8:	e5 e0       	ldi	r30, 0x05	; 5
    d5aa:	0c 94 bc e7 	jmp	0x1cf78	; 0x1cf78 <__epilogue_restores__+0x1a>

0000d5ae <xmit_datablock>:
    d5ae:	0f 93       	push	r16
    d5b0:	1f 93       	push	r17
static
int xmit_datablock (
const BYTE *buff,                                 /*< 512 byte data block to be transmitted */
BYTE token                                        /*< Data/Stop token */
)
{
    d5b2:	cf 93       	push	r28
    d5b4:	8c 01       	movw	r16, r24
    d5b6:	c6 2f       	mov	r28, r22
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d5b8:	88 ee       	ldi	r24, 0xE8	; 232
    d5ba:	93 e0       	ldi	r25, 0x03	; 3
    d5bc:	81 df       	rcall	.-254    	; 0xd4c0 <wait_ready>
    d5be:	00 97       	sbiw	r24, 0x00	; 0
    d5c0:	c9 f0       	breq	.+50     	; 0xd5f4 <xmit_datablock+0x46>

    xchg_spi(token);                              /* Xmit data token */
    d5c2:	8c 2f       	mov	r24, r28
    d5c4:	52 df       	rcall	.-348    	; 0xd46a <xchg_spi>
    if (token != 0xFD)                            /* Is data token */
    d5c6:	cd 3f       	cpi	r28, 0xFD	; 253
    d5c8:	99 f0       	breq	.+38     	; 0xd5f0 <xmit_datablock+0x42>
void xmit_spi_multi (
const BYTE *p,                                    /* Data block to be sent */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_TX_buffer((uint8_t *)p, cnt);
    d5ca:	60 e0       	ldi	r22, 0x00	; 0
    d5cc:	72 e0       	ldi	r23, 0x02	; 2
    d5ce:	c8 01       	movw	r24, r16
    xchg_spi(token);                              /* Xmit data token */
    if (token != 0xFD)                            /* Is data token */
    {
        xmit_spi_multi(buff, 512);                /* Xmit the data block to the MMC */

        xchg_spi(0xFF);                           /* CRC (Dummy) */
    d5d0:	40 d4       	rcall	.+2176   	; 0xde52 <mmc_spi_TX_buffer>
    d5d2:	8f ef       	ldi	r24, 0xFF	; 255
        xchg_spi(0xFF);
    d5d4:	4a df       	rcall	.-364    	; 0xd46a <xchg_spi>
    d5d6:	8f ef       	ldi	r24, 0xFF	; 255
    d5d8:	48 df       	rcall	.-368    	; 0xd46a <xchg_spi>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d5da:	8f ef       	ldi	r24, 0xFF	; 255
    d5dc:	40 d4       	rcall	.+2176   	; 0xde5e <mmc_spi_TXRX>
    d5de:	8f 71       	andi	r24, 0x1F	; 31
BYTE token                                        /*< Data/Stop token */
)
{
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d5e0:	31 e0       	ldi	r19, 0x01	; 1
    d5e2:	20 e0       	ldi	r18, 0x00	; 0
    d5e4:	85 30       	cpi	r24, 0x05	; 5
    d5e6:	09 f0       	breq	.+2      	; 0xd5ea <xmit_datablock+0x3c>
    d5e8:	30 e0       	ldi	r19, 0x00	; 0
    d5ea:	83 2f       	mov	r24, r19
    d5ec:	92 2f       	mov	r25, r18
    d5ee:	02 c0       	rjmp	.+4      	; 0xd5f4 <xmit_datablock+0x46>
    d5f0:	81 e0       	ldi	r24, 0x01	; 1
        resp = xchg_spi(0xFF);                    /* Reveive data response */
        if ((resp & 0x1F) != 0x05)                /* If not accepted, return with error */
            return 0;
    }

    return 1;
    d5f2:	90 e0       	ldi	r25, 0x00	; 0
    d5f4:	cf 91       	pop	r28
}
    d5f6:	1f 91       	pop	r17
    d5f8:	0f 91       	pop	r16
    d5fa:	08 95       	ret

0000d5fc <mmc_disk_initialize>:
    d5fc:	a4 e0       	ldi	r26, 0x04	; 4

///@brief Initialize Disk Drive
///@return Stat
MEMSPACE
DSTATUS mmc_disk_initialize (void)
{
    d5fe:	b0 e0       	ldi	r27, 0x00	; 0
    d600:	e4 e0       	ldi	r30, 0x04	; 4
    d602:	fb e6       	ldi	r31, 0x6B	; 107
    d604:	0c 94 9d e7 	jmp	0x1cf3a	; 0x1cf3a <__prologue_saves__+0x14>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d608:	59 d4       	rcall	.+2226   	; 0xdebc <mmc_power_off>
DSTATUS mmc_disk_initialize (void)
{
    BYTE n, cmd, ty, ocr[4];

    power_off();                                  /* Turn off the socket power to reset the card */
    delayms(100);                                 /* Wait for 100ms */
    d60a:	64 e6       	ldi	r22, 0x64	; 100
    d60c:	70 e0       	ldi	r23, 0x00	; 0
    d60e:	80 e0       	ldi	r24, 0x00	; 0
    d610:	90 e0       	ldi	r25, 0x00	; 0
    d612:	0e 94 47 28 	call	0x508e	; 0x508e <delayms>

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    d616:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d61a:	81 fd       	sbrc	r24, 1
void power_on (void)
{
/* Turn socket power on and wait for 10ms+ (nothing to do if no power controls) */
/* Configure MOSI/MISO/SCLK/CS pins */
/* Enable SPI module in SPI mode 0 */
    mmc_power_on();
    d61c:	8e c0       	rjmp	.+284    	; 0xd73a <mmc_disk_initialize+0x13e>
    delayms(100);                                 /* Wait for 100ms */

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    power_on();                                   /* Turn on the socket power */

    FCLK_SLOW();
    d61e:	4d d4       	rcall	.+2202   	; 0xdeba <mmc_power_on>
    d620:	f9 d3       	rcall	.+2034   	; 0xde14 <mmc_slow>

    for (n = 10; n; n--) xchg_spi(0xFF);          /* 80 dummy clocks */
    d622:	1a e0       	ldi	r17, 0x0A	; 10
    d624:	8f ef       	ldi	r24, 0xFF	; 255
    d626:	21 df       	rcall	.-446    	; 0xd46a <xchg_spi>
    d628:	11 50       	subi	r17, 0x01	; 1
    d62a:	e1 f7       	brne	.-8      	; 0xd624 <mmc_disk_initialize+0x28>

    ty = 0;
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    d62c:	40 e0       	ldi	r20, 0x00	; 0
    d62e:	50 e0       	ldi	r21, 0x00	; 0
    d630:	ba 01       	movw	r22, r20
    d632:	80 e0       	ldi	r24, 0x00	; 0
    d634:	79 df       	rcall	.-270    	; 0xd528 <send_cmd>
    d636:	81 30       	cpi	r24, 0x01	; 1
    d638:	09 f0       	breq	.+2      	; 0xd63c <mmc_disk_initialize+0x40>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
    d63a:	6f c0       	rjmp	.+222    	; 0xd71a <mmc_disk_initialize+0x11e>
    d63c:	80 ed       	ldi	r24, 0xD0	; 208
    d63e:	97 e0       	ldi	r25, 0x07	; 7
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
    d640:	11 d4       	rcall	.+2082   	; 0xde64 <mmc_set_ms_timeout>
    d642:	4a ea       	ldi	r20, 0xAA	; 170
    d644:	51 e0       	ldi	r21, 0x01	; 1
    d646:	60 e0       	ldi	r22, 0x00	; 0
    d648:	70 e0       	ldi	r23, 0x00	; 0
    d64a:	88 e0       	ldi	r24, 0x08	; 8
    d64c:	6d df       	rcall	.-294    	; 0xd528 <send_cmd>
    d64e:	81 30       	cpi	r24, 0x01	; 1
    d650:	09 f0       	breq	.+2      	; 0xd654 <mmc_disk_initialize+0x58>
    d652:	3d c0       	rjmp	.+122    	; 0xd6ce <mmc_disk_initialize+0xd2>
    d654:	8e 01       	movw	r16, r28
    d656:	0f 5f       	subi	r16, 0xFF	; 255
    d658:	1f 4f       	sbci	r17, 0xFF	; 255
    d65a:	6e 01       	movw	r12, r28
    d65c:	85 e0       	ldi	r24, 0x05	; 5
    d65e:	c8 0e       	add	r12, r24
    d660:	d1 1c       	adc	r13, r1
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d662:	78 01       	movw	r14, r16
    d664:	8f ef       	ldi	r24, 0xFF	; 255
    d666:	fb d3       	rcall	.+2038   	; 0xde5e <mmc_spi_TXRX>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
    d668:	f7 01       	movw	r30, r14
    d66a:	81 93       	st	Z+, r24
    d66c:	7f 01       	movw	r14, r30
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
    d66e:	ce 16       	cp	r12, r30
    d670:	df 06       	cpc	r13, r31
    d672:	c1 f7       	brne	.-16     	; 0xd664 <mmc_disk_initialize+0x68>
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
    d674:	8b 81       	ldd	r24, Y+3	; 0x03
    d676:	81 30       	cpi	r24, 0x01	; 1
    d678:	09 f0       	breq	.+2      	; 0xd67c <mmc_disk_initialize+0x80>
    d67a:	4f c0       	rjmp	.+158    	; 0xd71a <mmc_disk_initialize+0x11e>
    d67c:	8c 81       	ldd	r24, Y+4	; 0x04
    d67e:	8a 3a       	cpi	r24, 0xAA	; 170
    d680:	09 f0       	breq	.+2      	; 0xd684 <mmc_disk_initialize+0x88>
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d682:	4b c0       	rjmp	.+150    	; 0xd71a <mmc_disk_initialize+0x11e>
    d684:	f6 d3       	rcall	.+2028   	; 0xde72 <mmc_test_timeout>
    d686:	89 2b       	or	r24, r25
    d688:	29 f0       	breq	.+10     	; 0xd694 <mmc_disk_initialize+0x98>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d68a:	f3 d3       	rcall	.+2022   	; 0xde72 <mmc_test_timeout>
    d68c:	89 2b       	or	r24, r25
    d68e:	09 f0       	breq	.+2      	; 0xd692 <mmc_disk_initialize+0x96>
    d690:	44 c0       	rjmp	.+136    	; 0xd71a <mmc_disk_initialize+0x11e>
    d692:	09 c0       	rjmp	.+18     	; 0xd6a6 <mmc_disk_initialize+0xaa>
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d694:	40 e0       	ldi	r20, 0x00	; 0
    d696:	50 e0       	ldi	r21, 0x00	; 0
    d698:	60 e0       	ldi	r22, 0x00	; 0
    d69a:	70 e4       	ldi	r23, 0x40	; 64
    d69c:	89 ea       	ldi	r24, 0xA9	; 169
    d69e:	44 df       	rcall	.-376    	; 0xd528 <send_cmd>
    d6a0:	81 11       	cpse	r24, r1
    d6a2:	f0 cf       	rjmp	.-32     	; 0xd684 <mmc_disk_initialize+0x88>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d6a4:	f2 cf       	rjmp	.-28     	; 0xd68a <mmc_disk_initialize+0x8e>
    d6a6:	40 e0       	ldi	r20, 0x00	; 0
    d6a8:	50 e0       	ldi	r21, 0x00	; 0
    d6aa:	ba 01       	movw	r22, r20
    d6ac:	8a e3       	ldi	r24, 0x3A	; 58
    d6ae:	3c df       	rcall	.-392    	; 0xd528 <send_cmd>
    d6b0:	81 11       	cpse	r24, r1
    d6b2:	33 c0       	rjmp	.+102    	; 0xd71a <mmc_disk_initialize+0x11e>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d6b4:	8f ef       	ldi	r24, 0xFF	; 255
    d6b6:	d3 d3       	rcall	.+1958   	; 0xde5e <mmc_spi_TXRX>
    d6b8:	f8 01       	movw	r30, r16
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    d6ba:	81 93       	st	Z+, r24
    d6bc:	8f 01       	movw	r16, r30
    d6be:	ce 16       	cp	r12, r30
    d6c0:	df 06       	cpc	r13, r31
    d6c2:	c1 f7       	brne	.-16     	; 0xd6b4 <mmc_disk_initialize+0xb8>
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d6c4:	89 81       	ldd	r24, Y+1	; 0x01
    d6c6:	86 fd       	sbrc	r24, 6
    d6c8:	2a c0       	rjmp	.+84     	; 0xd71e <mmc_disk_initialize+0x122>
    d6ca:	14 e0       	ldi	r17, 0x04	; 4
    d6cc:	29 c0       	rjmp	.+82     	; 0xd720 <mmc_disk_initialize+0x124>
                }
            }
        }
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
    d6ce:	80 ed       	ldi	r24, 0xD0	; 208
    d6d0:	97 e0       	ldi	r25, 0x07	; 7
    d6d2:	c8 d3       	rcall	.+1936   	; 0xde64 <mmc_set_ms_timeout>
            if (send_cmd(ACMD41, 0) <= 1)
    d6d4:	40 e0       	ldi	r20, 0x00	; 0
    d6d6:	50 e0       	ldi	r21, 0x00	; 0
    d6d8:	ba 01       	movw	r22, r20
    d6da:	89 ea       	ldi	r24, 0xA9	; 169
    d6dc:	25 df       	rcall	.-438    	; 0xd528 <send_cmd>
    d6de:	82 30       	cpi	r24, 0x02	; 2
    d6e0:	18 f0       	brcs	.+6      	; 0xd6e8 <mmc_disk_initialize+0xec>
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
            }
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
    d6e2:	11 e0       	ldi	r17, 0x01	; 1
    d6e4:	01 e0       	ldi	r16, 0x01	; 1
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
            if (send_cmd(ACMD41, 0) <= 1)
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
    d6e6:	02 c0       	rjmp	.+4      	; 0xd6ec <mmc_disk_initialize+0xf0>
    d6e8:	12 e0       	ldi	r17, 0x02	; 2
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d6ea:	09 ea       	ldi	r16, 0xA9	; 169
    d6ec:	c2 d3       	rcall	.+1924   	; 0xde72 <mmc_test_timeout>
    d6ee:	89 2b       	or	r24, r25
    d6f0:	21 f0       	breq	.+8      	; 0xd6fa <mmc_disk_initialize+0xfe>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d6f2:	bf d3       	rcall	.+1918   	; 0xde72 <mmc_test_timeout>
    d6f4:	89 2b       	or	r24, r25
    d6f6:	89 f4       	brne	.+34     	; 0xd71a <mmc_disk_initialize+0x11e>
    d6f8:	08 c0       	rjmp	.+16     	; 0xd70a <mmc_disk_initialize+0x10e>
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d6fa:	40 e0       	ldi	r20, 0x00	; 0
    d6fc:	50 e0       	ldi	r21, 0x00	; 0
    d6fe:	ba 01       	movw	r22, r20
    d700:	80 2f       	mov	r24, r16
    d702:	12 df       	rcall	.-476    	; 0xd528 <send_cmd>
    d704:	81 11       	cpse	r24, r1
    d706:	f2 cf       	rjmp	.-28     	; 0xd6ec <mmc_disk_initialize+0xf0>
    d708:	f4 cf       	rjmp	.-24     	; 0xd6f2 <mmc_disk_initialize+0xf6>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d70a:	40 e0       	ldi	r20, 0x00	; 0
    d70c:	52 e0       	ldi	r21, 0x02	; 2
    d70e:	60 e0       	ldi	r22, 0x00	; 0
    d710:	70 e0       	ldi	r23, 0x00	; 0
    d712:	80 e1       	ldi	r24, 0x10	; 16
    d714:	09 df       	rcall	.-494    	; 0xd528 <send_cmd>
    d716:	88 23       	and	r24, r24
                ty = 0;
    d718:	19 f0       	breq	.+6      	; 0xd720 <mmc_disk_initialize+0x124>
    d71a:	10 e0       	ldi	r17, 0x00	; 0
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d71c:	01 c0       	rjmp	.+2      	; 0xd720 <mmc_disk_initialize+0x124>
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
                ty = 0;
        }
    }

    CardType = ty;
    d71e:	1c e0       	ldi	r17, 0x0C	; 12
    d720:	10 93 19 18 	sts	0x1819, r17	; 0x801819 <CardType>
    deselect();
    d724:	a4 de       	rcall	.-696    	; 0xd46e <deselect>

    if (ty)                                       /* Initialization succeded */
    d726:	11 23       	and	r17, r17
    d728:	39 f0       	breq	.+14     	; 0xd738 <mmc_disk_initialize+0x13c>
    {
        Stat &= ~STA_NOINIT;                      /* Clear STA_NOINIT */
    d72a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d72e:	8e 7f       	andi	r24, 0xFE	; 254
    d730:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
        FCLK_FAST();
    d734:	81 d3       	rcall	.+1794   	; 0xde38 <mmc_fast>
    d736:	01 c0       	rjmp	.+2      	; 0xd73a <mmc_disk_initialize+0x13e>
    d738:	c1 d3       	rcall	.+1922   	; 0xdebc <mmc_power_off>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d73a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    else
    {
        power_off();
    }

    return Stat;
    d73e:	24 96       	adiw	r28, 0x04	; 4
    d740:	e8 e0       	ldi	r30, 0x08	; 8
}
    d742:	0c 94 b9 e7 	jmp	0x1cf72	; 0x1cf72 <__epilogue_restores__+0x14>

0000d746 <mmc_disk_status>:
    d746:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
/// @return STA_NOINIT if no drive
MEMSPACE
DSTATUS mmc_disk_status ( void )
{
    return Stat;
}
    d74a:	08 95       	ret

0000d74c <mmc_disk_read>:
DRESULT mmc_disk_read (
BYTE *buff,                                       /*< Pointer to the data buffer to store read data */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /*< Sector count (1..128) */
)
{
    d74c:	8f 92       	push	r8
    d74e:	9f 92       	push	r9
    d750:	af 92       	push	r10
    d752:	bf 92       	push	r11
    d754:	ef 92       	push	r14
    d756:	ff 92       	push	r15
    d758:	1f 93       	push	r17
    d75a:	cf 93       	push	r28
    d75c:	df 93       	push	r29
    d75e:	7c 01       	movw	r14, r24
    d760:	4a 01       	movw	r8, r20
    d762:	5b 01       	movw	r10, r22
    d764:	e9 01       	movw	r28, r18
    BYTE cmd;

    if (!count)
    d766:	20 97       	sbiw	r28, 0x00	; 0
    d768:	19 f4       	brne	.+6      	; 0xd770 <mmc_disk_read+0x24>
    {
        deselect();
    d76a:	81 de       	rcall	.-766    	; 0xd46e <deselect>
        return RES_PARERR;
    d76c:	84 e0       	ldi	r24, 0x04	; 4
    d76e:	0d c0       	rjmp	.+26     	; 0xd78a <mmc_disk_read+0x3e>
    }

	if( Stat )
    d770:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d774:	88 23       	and	r24, r24
    d776:	19 f0       	breq	.+6      	; 0xd77e <mmc_disk_read+0x32>
		set_error(1);
    d778:	81 e0       	ldi	r24, 0x01	; 1
    d77a:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <set_error>

    if (Stat & STA_NOINIT)
    d77e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d782:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d784:	04 c0       	rjmp	.+8      	; 0xd78e <mmc_disk_read+0x42>
    d786:	73 de       	rcall	.-794    	; 0xd46e <deselect>
        return RES_NOTRDY;
    d788:	83 e0       	ldi	r24, 0x03	; 3
    d78a:	90 e0       	ldi	r25, 0x00	; 0
    d78c:	36 c0       	rjmp	.+108    	; 0xd7fa <mmc_disk_read+0xae>
    }
    if (Stat & STA_NODISK)
    d78e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d792:	81 fd       	sbrc	r24, 1
    d794:	f8 cf       	rjmp	.-16     	; 0xd786 <mmc_disk_read+0x3a>
    {
        deselect();
        return RES_NOTRDY;
	}
    GPIO_PIN_HI(LED1);
    d796:	46 9a       	sbi	0x08, 6	; 8
    d798:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d79a:	80 91 19 18 	lds	r24, 0x1819	; 0x801819 <CardType>
    d79e:	83 fd       	sbrc	r24, 3
    d7a0:	07 c0       	rjmp	.+14     	; 0xd7b0 <mmc_disk_read+0x64>
    d7a2:	89 e0       	ldi	r24, 0x09	; 9
    d7a4:	88 0c       	add	r8, r8
    d7a6:	99 1c       	adc	r9, r9
    d7a8:	aa 1c       	adc	r10, r10
    d7aa:	bb 1c       	adc	r11, r11
    d7ac:	8a 95       	dec	r24
    d7ae:	d1 f7       	brne	.-12     	; 0xd7a4 <mmc_disk_read+0x58>

    cmd = count > 1 ? CMD18 : CMD17;              /*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    d7b0:	c2 30       	cpi	r28, 0x02	; 2
    d7b2:	d1 05       	cpc	r29, r1
    d7b4:	10 f4       	brcc	.+4      	; 0xd7ba <mmc_disk_read+0x6e>
    d7b6:	11 e1       	ldi	r17, 0x11	; 17
    d7b8:	01 c0       	rjmp	.+2      	; 0xd7bc <mmc_disk_read+0x70>
    d7ba:	12 e1       	ldi	r17, 0x12	; 18
    if (send_cmd(cmd, sector) == 0)
    d7bc:	b5 01       	movw	r22, r10
    d7be:	a4 01       	movw	r20, r8
    d7c0:	81 2f       	mov	r24, r17
    d7c2:	b2 de       	rcall	.-668    	; 0xd528 <send_cmd>
    d7c4:	81 11       	cpse	r24, r1
    d7c6:	11 c0       	rjmp	.+34     	; 0xd7ea <mmc_disk_read+0x9e>
    {
        do
        {
            if (!rcvr_datablock(buff, 512))
    d7c8:	60 e0       	ldi	r22, 0x00	; 0
    d7ca:	72 e0       	ldi	r23, 0x02	; 2
    d7cc:	c7 01       	movw	r24, r14
    d7ce:	55 de       	rcall	.-854    	; 0xd47a <rcvr_datablock>
    d7d0:	89 2b       	or	r24, r25
    d7d2:	21 f0       	breq	.+8      	; 0xd7dc <mmc_disk_read+0x90>
                break;
            buff += 512;
    d7d4:	8e ef       	ldi	r24, 0xFE	; 254
    d7d6:	f8 1a       	sub	r15, r24
        } while (--count);
    d7d8:	21 97       	sbiw	r28, 0x01	; 1
    d7da:	b1 f7       	brne	.-20     	; 0xd7c8 <mmc_disk_read+0x7c>
        if (cmd == CMD18) send_cmd(CMD12, 0);     /* STOP_TRANSMISSION */
    d7dc:	12 31       	cpi	r17, 0x12	; 18
    d7de:	29 f4       	brne	.+10     	; 0xd7ea <mmc_disk_read+0x9e>
    d7e0:	40 e0       	ldi	r20, 0x00	; 0
    d7e2:	50 e0       	ldi	r21, 0x00	; 0
    d7e4:	ba 01       	movw	r22, r20
    d7e6:	8c e0       	ldi	r24, 0x0C	; 12
    }
    deselect();
    d7e8:	9f de       	rcall	.-706    	; 0xd528 <send_cmd>
    d7ea:	41 de       	rcall	.-894    	; 0xd46e <deselect>
    GPIO_PIN_LOW(LED1);
    d7ec:	46 98       	cbi	0x08, 6	; 8
    d7ee:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d7f0:	81 e0       	ldi	r24, 0x01	; 1
    d7f2:	90 e0       	ldi	r25, 0x00	; 0
    d7f4:	cd 2b       	or	r28, r29
    d7f6:	09 f4       	brne	.+2      	; 0xd7fa <mmc_disk_read+0xae>
    d7f8:	80 e0       	ldi	r24, 0x00	; 0
}
    d7fa:	df 91       	pop	r29
    d7fc:	cf 91       	pop	r28
    d7fe:	1f 91       	pop	r17
    d800:	ff 90       	pop	r15
    d802:	ef 90       	pop	r14
    d804:	bf 90       	pop	r11
    d806:	af 90       	pop	r10
    d808:	9f 90       	pop	r9
    d80a:	8f 90       	pop	r8
    d80c:	08 95       	ret

0000d80e <mmc_disk_write>:
DRESULT mmc_disk_write (
const BYTE *buff,                                 /*< Pointer to the data to be written */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /* Sector count (1..128) */
)
{
    d80e:	a0 e0       	ldi	r26, 0x00	; 0
    d810:	b0 e0       	ldi	r27, 0x00	; 0
    d812:	ed e0       	ldi	r30, 0x0D	; 13
    d814:	fc e6       	ldi	r31, 0x6C	; 108
    d816:	0c 94 9d e7 	jmp	0x1cf3a	; 0x1cf3a <__prologue_saves__+0x14>
    d81a:	8c 01       	movw	r16, r24
    d81c:	6a 01       	movw	r12, r20
    d81e:	7b 01       	movw	r14, r22
    d820:	e9 01       	movw	r28, r18
    if (!count)
    d822:	20 97       	sbiw	r28, 0x00	; 0
    d824:	19 f4       	brne	.+6      	; 0xd82c <mmc_disk_write+0x1e>
    {
        deselect();
    d826:	23 de       	rcall	.-954    	; 0xd46e <deselect>
        return RES_PARERR;
    d828:	84 e0       	ldi	r24, 0x04	; 4
    d82a:	18 c0       	rjmp	.+48     	; 0xd85c <mmc_disk_write+0x4e>
    }

	if( Stat )
    d82c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d830:	88 23       	and	r24, r24
    d832:	19 f0       	breq	.+6      	; 0xd83a <mmc_disk_write+0x2c>
		set_error(1);
    d834:	81 e0       	ldi	r24, 0x01	; 1
    d836:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <set_error>

    if (Stat & STA_NOINIT)
    d83a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d83e:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d840:	03 c0       	rjmp	.+6      	; 0xd848 <mmc_disk_write+0x3a>
    d842:	15 de       	rcall	.-982    	; 0xd46e <deselect>
        return RES_NOTRDY;
    d844:	83 e0       	ldi	r24, 0x03	; 3
    d846:	0a c0       	rjmp	.+20     	; 0xd85c <mmc_disk_write+0x4e>
    }
    if (Stat & STA_NODISK)
    d848:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d84c:	81 fd       	sbrc	r24, 1
    d84e:	f9 cf       	rjmp	.-14     	; 0xd842 <mmc_disk_write+0x34>
    {
        deselect();
        return RES_NOTRDY;
	}
    if (Stat & STA_PROTECT)
    d850:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d854:	82 ff       	sbrs	r24, 2
    {
        deselect();
    d856:	04 c0       	rjmp	.+8      	; 0xd860 <mmc_disk_write+0x52>
    d858:	0a de       	rcall	.-1004   	; 0xd46e <deselect>
        return RES_WRPRT;
    d85a:	82 e0       	ldi	r24, 0x02	; 2
    d85c:	90 e0       	ldi	r25, 0x00	; 0
    d85e:	46 c0       	rjmp	.+140    	; 0xd8ec <mmc_disk_write+0xde>
    }

    GPIO_PIN_HI(LED1);
    d860:	46 9a       	sbi	0x08, 6	; 8
    d862:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d864:	80 91 19 18 	lds	r24, 0x1819	; 0x801819 <CardType>
    d868:	83 fd       	sbrc	r24, 3
    d86a:	07 c0       	rjmp	.+14     	; 0xd87a <mmc_disk_write+0x6c>
    d86c:	99 e0       	ldi	r25, 0x09	; 9
    d86e:	cc 0c       	add	r12, r12
    d870:	dd 1c       	adc	r13, r13
    d872:	ee 1c       	adc	r14, r14
    d874:	ff 1c       	adc	r15, r15
    d876:	9a 95       	dec	r25
    d878:	d1 f7       	brne	.-12     	; 0xd86e <mmc_disk_write+0x60>

    if (count == 1)                               /* Single block write */
    d87a:	c1 30       	cpi	r28, 0x01	; 1
    d87c:	d1 05       	cpc	r29, r1
    d87e:	89 f4       	brne	.+34     	; 0xd8a2 <mmc_disk_write+0x94>
    {
        if ((send_cmd(CMD24, sector) == 0)        /* WRITE_BLOCK */
    d880:	b7 01       	movw	r22, r14
    d882:	a6 01       	movw	r20, r12
    d884:	88 e1       	ldi	r24, 0x18	; 24
    d886:	50 de       	rcall	.-864    	; 0xd528 <send_cmd>
    d888:	81 11       	cpse	r24, r1
            && xmit_datablock(buff, 0xFE))
    d88a:	26 c0       	rjmp	.+76     	; 0xd8d8 <mmc_disk_write+0xca>
    d88c:	6e ef       	ldi	r22, 0xFE	; 254
    d88e:	c8 01       	movw	r24, r16
    d890:	8e de       	rcall	.-740    	; 0xd5ae <xmit_datablock>
    d892:	31 e0       	ldi	r19, 0x01	; 1
    d894:	20 e0       	ldi	r18, 0x00	; 0
    d896:	89 2b       	or	r24, r25
    d898:	09 f0       	breq	.+2      	; 0xd89c <mmc_disk_write+0x8e>
    d89a:	30 e0       	ldi	r19, 0x00	; 0
    d89c:	c3 2f       	mov	r28, r19
    d89e:	d2 2f       	mov	r29, r18
    d8a0:	1d c0       	rjmp	.+58     	; 0xd8dc <mmc_disk_write+0xce>
            count = 0;
    }
    else                                          /* Multiple block write */
    {
        if (CardType & CT_SDC) send_cmd(ACMD23, count);
    d8a2:	86 70       	andi	r24, 0x06	; 6
    d8a4:	29 f0       	breq	.+10     	; 0xd8b0 <mmc_disk_write+0xa2>
    d8a6:	ae 01       	movw	r20, r28
    d8a8:	60 e0       	ldi	r22, 0x00	; 0
    d8aa:	70 e0       	ldi	r23, 0x00	; 0
    d8ac:	87 e9       	ldi	r24, 0x97	; 151
        if (send_cmd(CMD25, sector) == 0)         /* WRITE_MULTIPLE_BLOCK */
    d8ae:	3c de       	rcall	.-904    	; 0xd528 <send_cmd>
    d8b0:	b7 01       	movw	r22, r14
    d8b2:	a6 01       	movw	r20, r12
    d8b4:	89 e1       	ldi	r24, 0x19	; 25
    d8b6:	38 de       	rcall	.-912    	; 0xd528 <send_cmd>
    d8b8:	81 11       	cpse	r24, r1
        {
            do
            {
                if (!xmit_datablock(buff, 0xFC)) break;
    d8ba:	10 c0       	rjmp	.+32     	; 0xd8dc <mmc_disk_write+0xce>
    d8bc:	6c ef       	ldi	r22, 0xFC	; 252
    d8be:	c8 01       	movw	r24, r16
    d8c0:	76 de       	rcall	.-788    	; 0xd5ae <xmit_datablock>
    d8c2:	89 2b       	or	r24, r25
                buff += 512;
    d8c4:	19 f0       	breq	.+6      	; 0xd8cc <mmc_disk_write+0xbe>
            } while (--count);
    d8c6:	1e 5f       	subi	r17, 0xFE	; 254
    d8c8:	21 97       	sbiw	r28, 0x01	; 1
            if (!xmit_datablock(0, 0xFD))         /* STOP_TRAN token */
    d8ca:	c1 f7       	brne	.-16     	; 0xd8bc <mmc_disk_write+0xae>
    d8cc:	6d ef       	ldi	r22, 0xFD	; 253
    d8ce:	80 e0       	ldi	r24, 0x00	; 0
    d8d0:	90 e0       	ldi	r25, 0x00	; 0
    d8d2:	6d de       	rcall	.-806    	; 0xd5ae <xmit_datablock>
    d8d4:	89 2b       	or	r24, r25
                count = 1;
    d8d6:	11 f4       	brne	.+4      	; 0xd8dc <mmc_disk_write+0xce>
    d8d8:	c1 e0       	ldi	r28, 0x01	; 1
        }
    }
    deselect();
    d8da:	d0 e0       	ldi	r29, 0x00	; 0
    d8dc:	c8 dd       	rcall	.-1136   	; 0xd46e <deselect>
    GPIO_PIN_LOW(LED1);
    d8de:	46 98       	cbi	0x08, 6	; 8
    d8e0:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d8e2:	81 e0       	ldi	r24, 0x01	; 1
    d8e4:	90 e0       	ldi	r25, 0x00	; 0
    d8e6:	cd 2b       	or	r28, r29
    d8e8:	09 f4       	brne	.+2      	; 0xd8ec <mmc_disk_write+0xde>
    d8ea:	80 e0       	ldi	r24, 0x00	; 0
}
    d8ec:	cd b7       	in	r28, 0x3d	; 61
    d8ee:	de b7       	in	r29, 0x3e	; 62
    d8f0:	e8 e0       	ldi	r30, 0x08	; 8
    d8f2:	0c 94 b9 e7 	jmp	0x1cf72	; 0x1cf72 <__epilogue_restores__+0x14>

0000d8f6 <mmc_disk_ioctl>:
MEMSPACE
DRESULT mmc_disk_ioctl (
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d8f6:	a0 e1       	ldi	r26, 0x10	; 16
    d8f8:	b0 e0       	ldi	r27, 0x00	; 0
    d8fa:	e1 e8       	ldi	r30, 0x81	; 129
    d8fc:	fc e6       	ldi	r31, 0x6C	; 108
    d8fe:	0c 94 9d e7 	jmp	0x1cf3a	; 0x1cf3a <__prologue_saves__+0x14>
    SDIO_CTRL *sdi;
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
    d902:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d906:	90 fd       	sbrc	r25, 0
    d908:	31 c2       	rjmp	.+1122   	; 0xdd6c <mmc_disk_ioctl+0x476>
    d90a:	8b 01       	movw	r16, r22
        return RES_NOTRDY;

    if (Stat & STA_NODISK)
    d90c:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d910:	91 ff       	sbrs	r25, 1
    d912:	02 c0       	rjmp	.+4      	; 0xd918 <mmc_disk_ioctl+0x22>
    {
        deselect();
    d914:	ac dd       	rcall	.-1192   	; 0xd46e <deselect>
    d916:	2a c2       	rjmp	.+1108   	; 0xdd6c <mmc_disk_ioctl+0x476>
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d918:	83 33       	cpi	r24, 0x33	; 51
    d91a:	09 f4       	brne	.+2      	; 0xd91e <mmc_disk_ioctl+0x28>
    d91c:	01 c1       	rjmp	.+514    	; 0xdb20 <mmc_disk_ioctl+0x22a>
    d91e:	a0 f4       	brcc	.+40     	; 0xd948 <mmc_disk_ioctl+0x52>
    d920:	83 30       	cpi	r24, 0x03	; 3
    d922:	09 f4       	brne	.+2      	; 0xd926 <mmc_disk_ioctl+0x30>
    d924:	85 c0       	rjmp	.+266    	; 0xda30 <mmc_disk_ioctl+0x13a>
    d926:	28 f4       	brcc	.+10     	; 0xd932 <mmc_disk_ioctl+0x3c>
    d928:	88 23       	and	r24, r24
    d92a:	11 f1       	breq	.+68     	; 0xd970 <mmc_disk_ioctl+0x7a>
    d92c:	81 30       	cpi	r24, 0x01	; 1
    d92e:	11 f1       	breq	.+68     	; 0xd974 <mmc_disk_ioctl+0x7e>
    d930:	1f c2       	rjmp	.+1086   	; 0xdd70 <mmc_disk_ioctl+0x47a>
    d932:	87 30       	cpi	r24, 0x07	; 7
    d934:	09 f4       	brne	.+2      	; 0xd938 <mmc_disk_ioctl+0x42>
    d936:	2a c1       	rjmp	.+596    	; 0xdb8c <mmc_disk_ioctl+0x296>
    d938:	82 33       	cpi	r24, 0x32	; 50
    d93a:	09 f0       	breq	.+2      	; 0xd93e <mmc_disk_ioctl+0x48>
    d93c:	19 c2       	rjmp	.+1074   	; 0xdd70 <mmc_disk_ioctl+0x47a>
#endif

/* Following commands are never used by FatFs module */

        case MMC_GET_TYPE :                       /* Get card type flags (1 byte) */
            *ptr = CardType;
    d93e:	80 91 19 18 	lds	r24, 0x1819	; 0x801819 <CardType>
    d942:	fb 01       	movw	r30, r22
    d944:	80 83       	st	Z, r24
    d946:	28 c1       	rjmp	.+592    	; 0xdb98 <mmc_disk_ioctl+0x2a2>
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d948:	86 33       	cpi	r24, 0x36	; 54
    d94a:	09 f4       	brne	.+2      	; 0xd94e <mmc_disk_ioctl+0x58>
    d94c:	0c c1       	rjmp	.+536    	; 0xdb66 <mmc_disk_ioctl+0x270>
    d94e:	38 f4       	brcc	.+14     	; 0xd95e <mmc_disk_ioctl+0x68>
    d950:	84 33       	cpi	r24, 0x34	; 52
    d952:	09 f4       	brne	.+2      	; 0xd956 <mmc_disk_ioctl+0x60>
    d954:	ea c0       	rjmp	.+468    	; 0xdb2a <mmc_disk_ioctl+0x234>
    d956:	85 33       	cpi	r24, 0x35	; 53
    d958:	09 f4       	brne	.+2      	; 0xd95c <mmc_disk_ioctl+0x66>
    d95a:	f1 c0       	rjmp	.+482    	; 0xdb3e <mmc_disk_ioctl+0x248>
    d95c:	09 c2       	rjmp	.+1042   	; 0xdd70 <mmc_disk_ioctl+0x47a>
    d95e:	88 33       	cpi	r24, 0x38	; 56
    d960:	09 f4       	brne	.+2      	; 0xd964 <mmc_disk_ioctl+0x6e>
    d962:	74 c1       	rjmp	.+744    	; 0xdc4c <mmc_disk_ioctl+0x356>
    d964:	08 f4       	brcc	.+2      	; 0xd968 <mmc_disk_ioctl+0x72>
    d966:	1a c1       	rjmp	.+564    	; 0xdb9c <mmc_disk_ioctl+0x2a6>
    d968:	89 33       	cpi	r24, 0x39	; 57
    d96a:	09 f4       	brne	.+2      	; 0xd96e <mmc_disk_ioctl+0x78>
    d96c:	bc c1       	rjmp	.+888    	; 0xdce6 <mmc_disk_ioctl+0x3f0>
    {
        case CTRL_SYNC :                          /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
            if (select()) res = RES_OK;
    d96e:	00 c2       	rjmp	.+1024   	; 0xdd70 <mmc_disk_ioctl+0x47a>
    d970:	b9 dd       	rcall	.-1166   	; 0xd4e4 <select>
    d972:	06 c1       	rjmp	.+524    	; 0xdb80 <mmc_disk_ioctl+0x28a>
            deselect();
            break;

        case GET_SECTOR_COUNT :                   /* Get number of sectors on the disk (DWORD) */
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d974:	40 e0       	ldi	r20, 0x00	; 0
    d976:	50 e0       	ldi	r21, 0x00	; 0
    d978:	ba 01       	movw	r22, r20
    d97a:	89 e0       	ldi	r24, 0x09	; 9
    d97c:	d5 dd       	rcall	.-1110   	; 0xd528 <send_cmd>
    d97e:	81 11       	cpse	r24, r1
    d980:	f1 c1       	rjmp	.+994    	; 0xdd64 <mmc_disk_ioctl+0x46e>
    d982:	60 e1       	ldi	r22, 0x10	; 16
    d984:	70 e0       	ldi	r23, 0x00	; 0
    d986:	ce 01       	movw	r24, r28
    d988:	01 96       	adiw	r24, 0x01	; 1
    d98a:	77 dd       	rcall	.-1298   	; 0xd47a <rcvr_datablock>
    d98c:	89 2b       	or	r24, r25
    d98e:	09 f4       	brne	.+2      	; 0xd992 <mmc_disk_ioctl+0x9c>
    d990:	e9 c1       	rjmp	.+978    	; 0xdd64 <mmc_disk_ioctl+0x46e>
            {
                if ((csd[0] >> 6) == 1)           /* SDC ver 2.00 */
    d992:	99 81       	ldd	r25, Y+1	; 0x01
    d994:	92 95       	swap	r25
    d996:	96 95       	lsr	r25
    d998:	96 95       	lsr	r25
    d99a:	93 70       	andi	r25, 0x03	; 3
    d99c:	29 85       	ldd	r18, Y+9	; 0x09
    d99e:	4a 85       	ldd	r20, Y+10	; 0x0a
    d9a0:	88 85       	ldd	r24, Y+8	; 0x08
    d9a2:	91 30       	cpi	r25, 0x01	; 1
    d9a4:	d9 f4       	brne	.+54     	; 0xd9dc <mmc_disk_ioctl+0xe6>
                {
                    csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
                    *(DWORD*)buff = csize << 10;
    d9a6:	30 e0       	ldi	r19, 0x00	; 0
    d9a8:	32 2f       	mov	r19, r18
    d9aa:	22 27       	eor	r18, r18
    d9ac:	24 0f       	add	r18, r20
    d9ae:	31 1d       	adc	r19, r1
    d9b0:	8f 73       	andi	r24, 0x3F	; 63
    d9b2:	90 e0       	ldi	r25, 0x00	; 0
    d9b4:	a0 e0       	ldi	r26, 0x00	; 0
    d9b6:	b0 e0       	ldi	r27, 0x00	; 0
    d9b8:	dc 01       	movw	r26, r24
    d9ba:	99 27       	eor	r25, r25
    d9bc:	88 27       	eor	r24, r24
    d9be:	01 96       	adiw	r24, 0x01	; 1
    d9c0:	a1 1d       	adc	r26, r1
    d9c2:	b1 1d       	adc	r27, r1
    d9c4:	82 0f       	add	r24, r18
    d9c6:	93 1f       	adc	r25, r19
    d9c8:	a1 1d       	adc	r26, r1
    d9ca:	b1 1d       	adc	r27, r1
    d9cc:	fa e0       	ldi	r31, 0x0A	; 10
    d9ce:	88 0f       	add	r24, r24
    d9d0:	99 1f       	adc	r25, r25
    d9d2:	aa 1f       	adc	r26, r26
    d9d4:	bb 1f       	adc	r27, r27
    d9d6:	fa 95       	dec	r31
    d9d8:	d1 f7       	brne	.-12     	; 0xd9ce <mmc_disk_ioctl+0xd8>
    d9da:	9b c0       	rjmp	.+310    	; 0xdb12 <mmc_disk_ioctl+0x21c>
                }                                 /* SDC ver 1.XX or MMC*/
                else
                {
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
                    *(DWORD*)buff = csize << (n - 9);
    d9dc:	22 95       	swap	r18
    d9de:	26 95       	lsr	r18
    d9e0:	26 95       	lsr	r18
    d9e2:	23 70       	andi	r18, 0x03	; 3
    d9e4:	f4 e0       	ldi	r31, 0x04	; 4
    d9e6:	8f 9f       	mul	r24, r31
    d9e8:	c0 01       	movw	r24, r0
    d9ea:	11 24       	eor	r1, r1
    d9ec:	82 0f       	add	r24, r18
    d9ee:	91 1d       	adc	r25, r1
    d9f0:	01 96       	adiw	r24, 0x01	; 1
    d9f2:	2f 81       	ldd	r18, Y+7	; 0x07
    d9f4:	23 70       	andi	r18, 0x03	; 3
    d9f6:	30 e0       	ldi	r19, 0x00	; 0
    d9f8:	32 2f       	mov	r19, r18
    d9fa:	22 27       	eor	r18, r18
    d9fc:	33 0f       	add	r19, r19
    d9fe:	33 0f       	add	r19, r19
    da00:	82 0f       	add	r24, r18
    da02:	93 1f       	adc	r25, r19
    da04:	a0 e0       	ldi	r26, 0x00	; 0
    da06:	b0 e0       	ldi	r27, 0x00	; 0
    da08:	2e 81       	ldd	r18, Y+6	; 0x06
    da0a:	32 2f       	mov	r19, r18
    da0c:	3f 70       	andi	r19, 0x0F	; 15
    da0e:	2b 85       	ldd	r18, Y+11	; 0x0b
    da10:	22 1f       	adc	r18, r18
    da12:	22 27       	eor	r18, r18
    da14:	22 1f       	adc	r18, r18
    da16:	23 0f       	add	r18, r19
    da18:	43 70       	andi	r20, 0x03	; 3
    da1a:	44 0f       	add	r20, r20
    da1c:	42 0f       	add	r20, r18
    da1e:	47 50       	subi	r20, 0x07	; 7
    da20:	04 c0       	rjmp	.+8      	; 0xda2a <mmc_disk_ioctl+0x134>
    da22:	88 0f       	add	r24, r24
    da24:	99 1f       	adc	r25, r25
    da26:	aa 1f       	adc	r26, r26
    da28:	bb 1f       	adc	r27, r27
    da2a:	4a 95       	dec	r20
    da2c:	d2 f7       	brpl	.-12     	; 0xda22 <mmc_disk_ioctl+0x12c>
    da2e:	71 c0       	rjmp	.+226    	; 0xdb12 <mmc_disk_ioctl+0x21c>
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    da30:	80 91 19 18 	lds	r24, 0x1819	; 0x801819 <CardType>
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    da34:	40 e0       	ldi	r20, 0x00	; 0
    da36:	50 e0       	ldi	r21, 0x00	; 0
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    da38:	ba 01       	movw	r22, r20
    da3a:	82 ff       	sbrs	r24, 2
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    da3c:	24 c0       	rjmp	.+72     	; 0xda86 <mmc_disk_ioctl+0x190>
    da3e:	8d e8       	ldi	r24, 0x8D	; 141
    da40:	73 dd       	rcall	.-1306   	; 0xd528 <send_cmd>
    da42:	81 11       	cpse	r24, r1
                {
                    xchg_spi(0xFF);
    da44:	8f c1       	rjmp	.+798    	; 0xdd64 <mmc_disk_ioctl+0x46e>
    da46:	8f ef       	ldi	r24, 0xFF	; 255
                    if (rcvr_datablock(csd, 16))  /* Read partial block */
    da48:	10 dd       	rcall	.-1504   	; 0xd46a <xchg_spi>
    da4a:	60 e1       	ldi	r22, 0x10	; 16
    da4c:	70 e0       	ldi	r23, 0x00	; 0
    da4e:	ce 01       	movw	r24, r28
    da50:	01 96       	adiw	r24, 0x01	; 1
    da52:	13 dd       	rcall	.-1498   	; 0xd47a <rcvr_datablock>
    da54:	89 2b       	or	r24, r25
    da56:	09 f4       	brne	.+2      	; 0xda5a <mmc_disk_ioctl+0x164>
    da58:	85 c1       	rjmp	.+778    	; 0xdd64 <mmc_disk_ioctl+0x46e>
    da5a:	50 e3       	ldi	r21, 0x30	; 48
                    {
/* Purge trailing data */
                        for (n = 64 - 16; n; n--) xchg_spi(0xFF);
    da5c:	f5 2e       	mov	r15, r21
    da5e:	8f ef       	ldi	r24, 0xFF	; 255
    da60:	04 dd       	rcall	.-1528   	; 0xd46a <xchg_spi>
    da62:	fa 94       	dec	r15
    da64:	f1 10       	cpse	r15, r1
    da66:	fb cf       	rjmp	.-10     	; 0xda5e <mmc_disk_ioctl+0x168>
                        *(DWORD*)buff = 16UL << (csd[10] >> 4);
    da68:	2b 85       	ldd	r18, Y+11	; 0x0b
    da6a:	22 95       	swap	r18
    da6c:	2f 70       	andi	r18, 0x0F	; 15
    da6e:	80 e1       	ldi	r24, 0x10	; 16
    da70:	90 e0       	ldi	r25, 0x00	; 0
    da72:	a0 e0       	ldi	r26, 0x00	; 0
    da74:	b0 e0       	ldi	r27, 0x00	; 0
    da76:	04 c0       	rjmp	.+8      	; 0xda80 <mmc_disk_ioctl+0x18a>
    da78:	88 0f       	add	r24, r24
    da7a:	99 1f       	adc	r25, r25
    da7c:	aa 1f       	adc	r26, r26
    da7e:	bb 1f       	adc	r27, r27
    da80:	2a 95       	dec	r18
    da82:	d2 f7       	brpl	.-12     	; 0xda78 <mmc_disk_ioctl+0x182>
                }
            }                                     /* SDv1 or MMCv3 */
            else
            {
/* Read CSD */
                if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    da84:	46 c0       	rjmp	.+140    	; 0xdb12 <mmc_disk_ioctl+0x21c>
    da86:	89 e0       	ldi	r24, 0x09	; 9
    da88:	4f dd       	rcall	.-1378   	; 0xd528 <send_cmd>
    da8a:	81 11       	cpse	r24, r1
    da8c:	6b c1       	rjmp	.+726    	; 0xdd64 <mmc_disk_ioctl+0x46e>
    da8e:	60 e1       	ldi	r22, 0x10	; 16
    da90:	70 e0       	ldi	r23, 0x00	; 0
    da92:	ce 01       	movw	r24, r28
    da94:	01 96       	adiw	r24, 0x01	; 1
    da96:	f1 dc       	rcall	.-1566   	; 0xd47a <rcvr_datablock>
    da98:	89 2b       	or	r24, r25
    da9a:	09 f4       	brne	.+2      	; 0xda9e <mmc_disk_ioctl+0x1a8>
    da9c:	63 c1       	rjmp	.+710    	; 0xdd64 <mmc_disk_ioctl+0x46e>
                {
                    if (CardType & CT_SD1)        /* SDv1 */
    da9e:	90 91 19 18 	lds	r25, 0x1819	; 0x801819 <CardType>
    daa2:	2b 85       	ldd	r18, Y+11	; 0x0b
    daa4:	8c 85       	ldd	r24, Y+12	; 0x0c
    daa6:	91 ff       	sbrs	r25, 1
    daa8:	16 c0       	rjmp	.+44     	; 0xdad6 <mmc_disk_ioctl+0x1e0>
                    {
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    daaa:	2f 73       	andi	r18, 0x3F	; 63
    daac:	88 1f       	adc	r24, r24
    daae:	88 27       	eor	r24, r24
    dab0:	88 1f       	adc	r24, r24
    dab2:	90 e0       	ldi	r25, 0x00	; 0
    dab4:	01 96       	adiw	r24, 0x01	; 1
    dab6:	82 0f       	add	r24, r18
    dab8:	91 1d       	adc	r25, r1
    daba:	82 0f       	add	r24, r18
    dabc:	91 1d       	adc	r25, r1
    dabe:	2e 85       	ldd	r18, Y+14	; 0x0e
    dac0:	22 95       	swap	r18
    dac2:	26 95       	lsr	r18
    dac4:	26 95       	lsr	r18
    dac6:	23 70       	andi	r18, 0x03	; 3
    dac8:	21 50       	subi	r18, 0x01	; 1
    daca:	02 c0       	rjmp	.+4      	; 0xdad0 <mmc_disk_ioctl+0x1da>
    dacc:	88 0f       	add	r24, r24
    dace:	99 1f       	adc	r25, r25
    dad0:	2a 95       	dec	r18
    dad2:	e2 f7       	brpl	.-8      	; 0xdacc <mmc_disk_ioctl+0x1d6>
    dad4:	1c c0       	rjmp	.+56     	; 0xdb0e <mmc_disk_ioctl+0x218>
                    }                             /* MMCv3 */
                    else
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    dad6:	38 2f       	mov	r19, r24
    dad8:	33 70       	andi	r19, 0x03	; 3
    dada:	82 95       	swap	r24
    dadc:	86 95       	lsr	r24
    dade:	87 70       	andi	r24, 0x07	; 7
    dae0:	90 e0       	ldi	r25, 0x00	; 0
    dae2:	f8 e0       	ldi	r31, 0x08	; 8
    dae4:	3f 9f       	mul	r19, r31
    dae6:	80 0d       	add	r24, r0
    dae8:	91 1d       	adc	r25, r1
    daea:	11 24       	eor	r1, r1
    daec:	01 96       	adiw	r24, 0x01	; 1
    daee:	2c 77       	andi	r18, 0x7C	; 124
    daf0:	30 e0       	ldi	r19, 0x00	; 0
    daf2:	35 95       	asr	r19
    daf4:	27 95       	ror	r18
    daf6:	35 95       	asr	r19
    daf8:	27 95       	ror	r18
    dafa:	2f 5f       	subi	r18, 0xFF	; 255
    dafc:	3f 4f       	sbci	r19, 0xFF	; 255
    dafe:	82 9f       	mul	r24, r18
    db00:	a0 01       	movw	r20, r0
    db02:	83 9f       	mul	r24, r19
    db04:	50 0d       	add	r21, r0
    db06:	92 9f       	mul	r25, r18
    db08:	50 0d       	add	r21, r0
    db0a:	11 24       	eor	r1, r1
    db0c:	ca 01       	movw	r24, r20
    db0e:	a0 e0       	ldi	r26, 0x00	; 0
    db10:	b0 e0       	ldi	r27, 0x00	; 0
    db12:	f8 01       	movw	r30, r16
    db14:	80 83       	st	Z, r24
    db16:	91 83       	std	Z+1, r25	; 0x01
    db18:	a2 83       	std	Z+2, r26	; 0x02
    db1a:	b3 83       	std	Z+3, r27	; 0x03
                    }
                    res = RES_OK;
    db1c:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
            break;

        case MMC_GET_CSD :                        /* Receive CSD as a data block (16 bytes) */
/* READ_CSD */
            if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))
    db1e:	23 c1       	rjmp	.+582    	; 0xdd66 <mmc_disk_ioctl+0x470>
    db20:	40 e0       	ldi	r20, 0x00	; 0
    db22:	50 e0       	ldi	r21, 0x00	; 0
    db24:	ba 01       	movw	r22, r20
    db26:	89 e0       	ldi	r24, 0x09	; 9
            deselect();
            break;

        case MMC_GET_CID :                        /* Receive CID as a data block (16 bytes) */
/* READ_CID */
            if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))
    db28:	04 c0       	rjmp	.+8      	; 0xdb32 <mmc_disk_ioctl+0x23c>
    db2a:	40 e0       	ldi	r20, 0x00	; 0
    db2c:	50 e0       	ldi	r21, 0x00	; 0
    db2e:	ba 01       	movw	r22, r20
    db30:	8a e0       	ldi	r24, 0x0A	; 10
    db32:	fa dc       	rcall	.-1548   	; 0xd528 <send_cmd>
    db34:	81 11       	cpse	r24, r1
    db36:	16 c1       	rjmp	.+556    	; 0xdd64 <mmc_disk_ioctl+0x46e>
    db38:	60 e1       	ldi	r22, 0x10	; 16
    db3a:	70 e0       	ldi	r23, 0x00	; 0
                res = RES_OK;
            deselect();
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
    db3c:	1f c0       	rjmp	.+62     	; 0xdb7c <mmc_disk_ioctl+0x286>
    db3e:	40 e0       	ldi	r20, 0x00	; 0
    db40:	50 e0       	ldi	r21, 0x00	; 0
    db42:	ba 01       	movw	r22, r20
    db44:	8a e3       	ldi	r24, 0x3A	; 58
    db46:	f0 dc       	rcall	.-1568   	; 0xd528 <send_cmd>
    db48:	81 11       	cpse	r24, r1
    db4a:	0c c1       	rjmp	.+536    	; 0xdd64 <mmc_disk_ioctl+0x46e>
    db4c:	78 01       	movw	r14, r16
    db4e:	f4 e0       	ldi	r31, 0x04	; 4
    db50:	ef 0e       	add	r14, r31
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    db52:	f1 1c       	adc	r15, r1
    db54:	8f ef       	ldi	r24, 0xFF	; 255
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
            {
                for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    db56:	83 d1       	rcall	.+774    	; 0xde5e <mmc_spi_TXRX>
    db58:	f8 01       	movw	r30, r16
    db5a:	81 93       	st	Z+, r24
    db5c:	8f 01       	movw	r16, r30
    db5e:	ee 15       	cp	r30, r14
    db60:	ff 05       	cpc	r31, r15
            }
            deselect();
            break;

        case MMC_GET_SDSTAT :                     /* Receive SD statsu as a data block (64 bytes) */
            if (send_cmd(ACMD13, 0) == 0)         /* SD_STATUS */
    db62:	c1 f7       	brne	.-16     	; 0xdb54 <mmc_disk_ioctl+0x25e>
    db64:	db cf       	rjmp	.-74     	; 0xdb1c <mmc_disk_ioctl+0x226>
    db66:	40 e0       	ldi	r20, 0x00	; 0
    db68:	50 e0       	ldi	r21, 0x00	; 0
    db6a:	ba 01       	movw	r22, r20
    db6c:	8d e8       	ldi	r24, 0x8D	; 141
    db6e:	dc dc       	rcall	.-1608   	; 0xd528 <send_cmd>
            {
                xchg_spi(0xFF);
    db70:	81 11       	cpse	r24, r1
    db72:	f8 c0       	rjmp	.+496    	; 0xdd64 <mmc_disk_ioctl+0x46e>
    db74:	8f ef       	ldi	r24, 0xFF	; 255
                if (rcvr_datablock(ptr, 64)) res = RES_OK;
    db76:	79 dc       	rcall	.-1806   	; 0xd46a <xchg_spi>
    db78:	60 e4       	ldi	r22, 0x40	; 64
    db7a:	70 e0       	ldi	r23, 0x00	; 0
    db7c:	c8 01       	movw	r24, r16
    db7e:	7d dc       	rcall	.-1798   	; 0xd47a <rcvr_datablock>
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    db80:	01 e0       	ldi	r16, 0x01	; 1
    db82:	10 e0       	ldi	r17, 0x00	; 0
    db84:	89 2b       	or	r24, r25
    db86:	09 f4       	brne	.+2      	; 0xdb8a <mmc_disk_ioctl+0x294>
    db88:	ef c0       	rjmp	.+478    	; 0xdd68 <mmc_disk_ioctl+0x472>
    db8a:	ea c0       	rjmp	.+468    	; 0xdd60 <mmc_disk_ioctl+0x46a>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    db8c:	97 d1       	rcall	.+814    	; 0xdebc <mmc_power_off>
    db8e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
            deselect();
            break;

        case CTRL_POWER_OFF :                     /* Power off */
            power_off();
            Stat |= STA_NOINIT;
    db92:	81 60       	ori	r24, 0x01	; 1
    db94:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    db98:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
    db9a:	eb c0       	rjmp	.+470    	; 0xdd72 <mmc_disk_ioctl+0x47c>
    db9c:	fb 01       	movw	r30, r22
            break;
#if _USE_ISDIO
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    db9e:	43 81       	ldd	r20, Z+3	; 0x03
    dba0:	54 81       	ldd	r21, Z+4	; 0x04
    dba2:	65 81       	ldd	r22, Z+5	; 0x05
    dba4:	76 81       	ldd	r23, Z+6	; 0x06
    dba6:	39 e0       	ldi	r19, 0x09	; 9
    dba8:	44 0f       	add	r20, r20
    dbaa:	55 1f       	adc	r21, r21
    dbac:	66 1f       	adc	r22, r22
    dbae:	77 1f       	adc	r23, r23
    dbb0:	3a 95       	dec	r19
    dbb2:	d1 f7       	brne	.-12     	; 0xdba8 <mmc_disk_ioctl+0x2b2>
    dbb4:	70 68       	ori	r23, 0x80	; 128
    dbb6:	80 81       	ld	r24, Z
    dbb8:	90 e0       	ldi	r25, 0x00	; 0
    dbba:	a0 e0       	ldi	r26, 0x00	; 0
    dbbc:	b0 e0       	ldi	r27, 0x00	; 0
    dbbe:	2c e1       	ldi	r18, 0x1C	; 28
    dbc0:	88 0f       	add	r24, r24
    dbc2:	99 1f       	adc	r25, r25
    dbc4:	aa 1f       	adc	r26, r26
    dbc6:	bb 1f       	adc	r27, r27
    dbc8:	2a 95       	dec	r18
    dbca:	d1 f7       	brne	.-12     	; 0xdbc0 <mmc_disk_ioctl+0x2ca>
    dbcc:	48 2b       	or	r20, r24
    dbce:	59 2b       	or	r21, r25
    dbd0:	6a 2b       	or	r22, r26
    dbd2:	7b 2b       	or	r23, r27
    dbd4:	81 81       	ldd	r24, Z+1	; 0x01
    dbd6:	92 81       	ldd	r25, Z+2	; 0x02
    dbd8:	01 97       	sbiw	r24, 0x01	; 1
    dbda:	91 70       	andi	r25, 0x01	; 1
    dbdc:	a0 e0       	ldi	r26, 0x00	; 0
    dbde:	b0 e0       	ldi	r27, 0x00	; 0
    dbe0:	48 2b       	or	r20, r24
    dbe2:	59 2b       	or	r21, r25
    dbe4:	6a 2b       	or	r22, r26
    dbe6:	7b 2b       	or	r23, r27
    dbe8:	80 e3       	ldi	r24, 0x30	; 48
    dbea:	9e dc       	rcall	.-1732   	; 0xd528 <send_cmd>
            {
                mmc_set_ms_timeout(1000);
    dbec:	81 11       	cpse	r24, r1
    dbee:	ba c0       	rjmp	.+372    	; 0xdd64 <mmc_disk_ioctl+0x46e>
    dbf0:	88 ee       	ldi	r24, 0xE8	; 232
    dbf2:	93 e0       	ldi	r25, 0x03	; 3
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    dbf4:	37 d1       	rcall	.+622    	; 0xde64 <mmc_set_ms_timeout>
    dbf6:	8f ef       	ldi	r24, 0xFF	; 255
    dbf8:	32 d1       	rcall	.+612    	; 0xde5e <mmc_spi_TXRX>
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
    dbfa:	8f 3f       	cpi	r24, 0xFF	; 255
    dbfc:	21 f4       	brne	.+8      	; 0xdc06 <mmc_disk_ioctl+0x310>
    dbfe:	39 d1       	rcall	.+626    	; 0xde72 <mmc_test_timeout>
    dc00:	89 2b       	or	r24, r25
    dc02:	c9 f3       	breq	.-14     	; 0xdbf6 <mmc_disk_ioctl+0x300>
    dc04:	af c0       	rjmp	.+350    	; 0xdd64 <mmc_disk_ioctl+0x46e>
                    ;
                if (rc == 0xFE)
    dc06:	8e 3f       	cpi	r24, 0xFE	; 254
    dc08:	09 f0       	breq	.+2      	; 0xdc0c <mmc_disk_ioctl+0x316>
    dc0a:	ac c0       	rjmp	.+344    	; 0xdd64 <mmc_disk_ioctl+0x46e>
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    dc0c:	f8 01       	movw	r30, r16
    dc0e:	e7 80       	ldd	r14, Z+7	; 0x07
    dc10:	f0 84       	ldd	r15, Z+8	; 0x08
    dc12:	c1 80       	ldd	r12, Z+1	; 0x01
    dc14:	d2 80       	ldd	r13, Z+2	; 0x02
    dc16:	ce 0c       	add	r12, r14
    dc18:	df 1c       	adc	r13, r15
    dc1a:	ce 14       	cp	r12, r14
    dc1c:	df 04       	cpc	r13, r15
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    dc1e:	31 f0       	breq	.+12     	; 0xdc2c <mmc_disk_ioctl+0x336>
    dc20:	8f ef       	ldi	r24, 0xFF	; 255
    dc22:	1d d1       	rcall	.+570    	; 0xde5e <mmc_spi_TXRX>
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
                    ;
                if (rc == 0xFE)
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    dc24:	f7 01       	movw	r30, r14
    dc26:	81 93       	st	Z+, r24
    dc28:	7f 01       	movw	r14, r30
    dc2a:	f7 cf       	rjmp	.-18     	; 0xdc1a <mmc_disk_ioctl+0x324>
                    for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    dc2c:	f8 01       	movw	r30, r16
    dc2e:	81 81       	ldd	r24, Z+1	; 0x01
    dc30:	92 81       	ldd	r25, Z+2	; 0x02
    dc32:	02 e0       	ldi	r16, 0x02	; 2
    dc34:	12 e0       	ldi	r17, 0x02	; 2
    dc36:	08 1b       	sub	r16, r24
    dc38:	19 0b       	sbc	r17, r25
    dc3a:	01 15       	cp	r16, r1
    dc3c:	11 05       	cpc	r17, r1
    dc3e:	09 f4       	brne	.+2      	; 0xdc42 <mmc_disk_ioctl+0x34c>
    dc40:	6d cf       	rjmp	.-294    	; 0xdb1c <mmc_disk_ioctl+0x226>
    dc42:	8f ef       	ldi	r24, 0xFF	; 255
    dc44:	12 dc       	rcall	.-2012   	; 0xd46a <xchg_spi>
    dc46:	01 50       	subi	r16, 0x01	; 1
    dc48:	11 09       	sbc	r17, r1
    dc4a:	f7 cf       	rjmp	.-18     	; 0xdc3a <mmc_disk_ioctl+0x344>
    dc4c:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_WRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    dc4e:	43 81       	ldd	r20, Z+3	; 0x03
    dc50:	54 81       	ldd	r21, Z+4	; 0x04
    dc52:	65 81       	ldd	r22, Z+5	; 0x05
    dc54:	76 81       	ldd	r23, Z+6	; 0x06
    dc56:	39 e0       	ldi	r19, 0x09	; 9
    dc58:	44 0f       	add	r20, r20
    dc5a:	55 1f       	adc	r21, r21
    dc5c:	66 1f       	adc	r22, r22
    dc5e:	77 1f       	adc	r23, r23
    dc60:	3a 95       	dec	r19
    dc62:	d1 f7       	brne	.-12     	; 0xdc58 <mmc_disk_ioctl+0x362>
    dc64:	70 68       	ori	r23, 0x80	; 128
    dc66:	80 81       	ld	r24, Z
    dc68:	90 e0       	ldi	r25, 0x00	; 0
    dc6a:	a0 e0       	ldi	r26, 0x00	; 0
    dc6c:	b0 e0       	ldi	r27, 0x00	; 0
    dc6e:	2c e1       	ldi	r18, 0x1C	; 28
    dc70:	88 0f       	add	r24, r24
    dc72:	99 1f       	adc	r25, r25
    dc74:	aa 1f       	adc	r26, r26
    dc76:	bb 1f       	adc	r27, r27
    dc78:	2a 95       	dec	r18
    dc7a:	d1 f7       	brne	.-12     	; 0xdc70 <mmc_disk_ioctl+0x37a>
    dc7c:	48 2b       	or	r20, r24
    dc7e:	59 2b       	or	r21, r25
    dc80:	6a 2b       	or	r22, r26
    dc82:	7b 2b       	or	r23, r27
    dc84:	81 81       	ldd	r24, Z+1	; 0x01
    dc86:	92 81       	ldd	r25, Z+2	; 0x02
    dc88:	01 97       	sbiw	r24, 0x01	; 1
    dc8a:	91 70       	andi	r25, 0x01	; 1
    dc8c:	a0 e0       	ldi	r26, 0x00	; 0
    dc8e:	b0 e0       	ldi	r27, 0x00	; 0
    dc90:	48 2b       	or	r20, r24
    dc92:	59 2b       	or	r21, r25
    dc94:	6a 2b       	or	r22, r26
    dc96:	7b 2b       	or	r23, r27
    dc98:	81 e3       	ldi	r24, 0x31	; 49
    dc9a:	46 dc       	rcall	.-1908   	; 0xd528 <send_cmd>
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    dc9c:	81 11       	cpse	r24, r1
    dc9e:	62 c0       	rjmp	.+196    	; 0xdd64 <mmc_disk_ioctl+0x46e>
    dca0:	8f ef       	ldi	r24, 0xFF	; 255
    dca2:	e3 db       	rcall	.-2106   	; 0xd46a <xchg_spi>
    dca4:	8e ef       	ldi	r24, 0xFE	; 254
    dca6:	e1 db       	rcall	.-2110   	; 0xd46a <xchg_spi>
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    dca8:	f8 01       	movw	r30, r16
    dcaa:	e7 80       	ldd	r14, Z+7	; 0x07
    dcac:	f0 84       	ldd	r15, Z+8	; 0x08
    dcae:	c1 80       	ldd	r12, Z+1	; 0x01
    dcb0:	d2 80       	ldd	r13, Z+2	; 0x02
    dcb2:	ce 0c       	add	r12, r14
    dcb4:	df 1c       	adc	r13, r15
    dcb6:	ec 14       	cp	r14, r12
    dcb8:	fd 04       	cpc	r15, r13
    dcba:	29 f0       	breq	.+10     	; 0xdcc6 <mmc_disk_ioctl+0x3d0>
    dcbc:	f7 01       	movw	r30, r14
    dcbe:	81 91       	ld	r24, Z+
    dcc0:	7f 01       	movw	r14, r30
    dcc2:	d3 db       	rcall	.-2138   	; 0xd46a <xchg_spi>
    dcc4:	f8 cf       	rjmp	.-16     	; 0xdcb6 <mmc_disk_ioctl+0x3c0>
                for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    dcc6:	f8 01       	movw	r30, r16
    dcc8:	81 81       	ldd	r24, Z+1	; 0x01
    dcca:	92 81       	ldd	r25, Z+2	; 0x02
    dccc:	02 e0       	ldi	r16, 0x02	; 2
    dcce:	12 e0       	ldi	r17, 0x02	; 2
    dcd0:	08 1b       	sub	r16, r24
    dcd2:	19 0b       	sbc	r17, r25
    dcd4:	8f ef       	ldi	r24, 0xFF	; 255
    dcd6:	01 15       	cp	r16, r1
    dcd8:	11 05       	cpc	r17, r1
    dcda:	09 f4       	brne	.+2      	; 0xdcde <mmc_disk_ioctl+0x3e8>
    dcdc:	3b c0       	rjmp	.+118    	; 0xdd54 <mmc_disk_ioctl+0x45e>
    dcde:	c5 db       	rcall	.-2166   	; 0xd46a <xchg_spi>
    dce0:	01 50       	subi	r16, 0x01	; 1
    dce2:	11 09       	sbc	r17, r1
    dce4:	f7 cf       	rjmp	.-18     	; 0xdcd4 <mmc_disk_ioctl+0x3de>
    dce6:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_MRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
    dce8:	43 81       	ldd	r20, Z+3	; 0x03
    dcea:	54 81       	ldd	r21, Z+4	; 0x04
    dcec:	65 81       	ldd	r22, Z+5	; 0x05
    dcee:	76 81       	ldd	r23, Z+6	; 0x06
    dcf0:	89 e0       	ldi	r24, 0x09	; 9
    dcf2:	44 0f       	add	r20, r20
    dcf4:	55 1f       	adc	r21, r21
    dcf6:	66 1f       	adc	r22, r22
    dcf8:	77 1f       	adc	r23, r23
    dcfa:	8a 95       	dec	r24
    dcfc:	d1 f7       	brne	.-12     	; 0xdcf2 <mmc_disk_ioctl+0x3fc>
    dcfe:	74 68       	ori	r23, 0x84	; 132
    dd00:	80 81       	ld	r24, Z
    dd02:	90 e0       	ldi	r25, 0x00	; 0
    dd04:	a0 e0       	ldi	r26, 0x00	; 0
    dd06:	b0 e0       	ldi	r27, 0x00	; 0
    dd08:	2c e1       	ldi	r18, 0x1C	; 28
    dd0a:	88 0f       	add	r24, r24
    dd0c:	99 1f       	adc	r25, r25
    dd0e:	aa 1f       	adc	r26, r26
    dd10:	bb 1f       	adc	r27, r27
    dd12:	2a 95       	dec	r18
    dd14:	d1 f7       	brne	.-12     	; 0xdd0a <mmc_disk_ioctl+0x414>
    dd16:	48 2b       	or	r20, r24
    dd18:	59 2b       	or	r21, r25
    dd1a:	6a 2b       	or	r22, r26
    dd1c:	7b 2b       	or	r23, r27
    dd1e:	82 81       	ldd	r24, Z+2	; 0x02
    dd20:	90 e0       	ldi	r25, 0x00	; 0
    dd22:	a0 e0       	ldi	r26, 0x00	; 0
    dd24:	b0 e0       	ldi	r27, 0x00	; 0
    dd26:	48 2b       	or	r20, r24
    dd28:	59 2b       	or	r21, r25
    dd2a:	6a 2b       	or	r22, r26
    dd2c:	7b 2b       	or	r23, r27
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    dd2e:	81 e3       	ldi	r24, 0x31	; 49
    dd30:	fb db       	rcall	.-2058   	; 0xd528 <send_cmd>
    dd32:	81 11       	cpse	r24, r1
    dd34:	17 c0       	rjmp	.+46     	; 0xdd64 <mmc_disk_ioctl+0x46e>
    dd36:	8f ef       	ldi	r24, 0xFF	; 255
    dd38:	98 db       	rcall	.-2256   	; 0xd46a <xchg_spi>
                xchg_spi(sdi->ndata);
    dd3a:	8e ef       	ldi	r24, 0xFE	; 254
    dd3c:	96 db       	rcall	.-2260   	; 0xd46a <xchg_spi>
    dd3e:	f8 01       	movw	r30, r16
    dd40:	81 81       	ldd	r24, Z+1	; 0x01
    dd42:	93 db       	rcall	.-2266   	; 0xd46a <xchg_spi>
    dd44:	01 e0       	ldi	r16, 0x01	; 1
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
    dd46:	12 e0       	ldi	r17, 0x02	; 2
    dd48:	8f ef       	ldi	r24, 0xFF	; 255
    dd4a:	8f db       	rcall	.-2274   	; 0xd46a <xchg_spi>
    dd4c:	01 50       	subi	r16, 0x01	; 1
    dd4e:	11 09       	sbc	r17, r1
    dd50:	d9 f7       	brne	.-10     	; 0xdd48 <mmc_disk_ioctl+0x452>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    dd52:	8f ef       	ldi	r24, 0xFF	; 255
    dd54:	84 d0       	rcall	.+264    	; 0xde5e <mmc_spi_TXRX>
    dd56:	8f 71       	andi	r24, 0x1F	; 31
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    dd58:	01 e0       	ldi	r16, 0x01	; 1
    dd5a:	10 e0       	ldi	r17, 0x00	; 0
    dd5c:	85 30       	cpi	r24, 0x05	; 5
    dd5e:	21 f4       	brne	.+8      	; 0xdd68 <mmc_disk_ioctl+0x472>
    dd60:	00 e0       	ldi	r16, 0x00	; 0
    dd62:	02 c0       	rjmp	.+4      	; 0xdd68 <mmc_disk_ioctl+0x472>
    dd64:	01 e0       	ldi	r16, 0x01	; 1
    dd66:	10 e0       	ldi	r17, 0x00	; 0
    dd68:	82 db       	rcall	.-2300   	; 0xd46e <deselect>
                xchg_spi(0xFF); xchg_spi(0xFE);
                xchg_spi(sdi->ndata);
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
                if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
            }
            deselect();
    dd6a:	04 c0       	rjmp	.+8      	; 0xdd74 <mmc_disk_ioctl+0x47e>
    dd6c:	03 e0       	ldi	r16, 0x03	; 3
            break;
    dd6e:	01 c0       	rjmp	.+2      	; 0xdd72 <mmc_disk_ioctl+0x47c>
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
        return RES_NOTRDY;
    dd70:	04 e0       	ldi	r16, 0x04	; 4
    dd72:	10 e0       	ldi	r17, 0x00	; 0
            }
            deselect();
            break;
#endif
        default:
            res = RES_PARERR;
    dd74:	c8 01       	movw	r24, r16
    dd76:	60 96       	adiw	r28, 0x10	; 16
    }

    return res;
}
    dd78:	e8 e0       	ldi	r30, 0x08	; 8
    dd7a:	0c 94 b9 e7 	jmp	0x1cf72	; 0x1cf72 <__epilogue_restores__+0x14>

0000dd7e <mmc_disk_timerproc>:
    dd7e:	cf 93       	push	r28
    dd80:	80 91 1b 18 	lds	r24, 0x181B	; 0x80181b <Timer1>
{
    BYTE n;
    BYTE s;

    n = Timer1;                                   /* 100Hz decrement timer */
    if (n) Timer1 = --n;
    dd84:	88 23       	and	r24, r24
    dd86:	19 f0       	breq	.+6      	; 0xdd8e <mmc_disk_timerproc+0x10>
    dd88:	81 50       	subi	r24, 0x01	; 1
    dd8a:	80 93 1b 18 	sts	0x181B, r24	; 0x80181b <Timer1>
    n = Timer2;
    dd8e:	80 91 1a 18 	lds	r24, 0x181A	; 0x80181a <Timer2>
    if (n) Timer2 = --n;
    dd92:	88 23       	and	r24, r24
    dd94:	19 f0       	breq	.+6      	; 0xdd9c <mmc_disk_timerproc+0x1e>
    dd96:	81 50       	subi	r24, 0x01	; 1
    dd98:	80 93 1a 18 	sts	0x181A, r24	; 0x80181a <Timer2>

    s = Stat;
    dd9c:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <Stat>
        s |= STA_PROTECT;
    else                                          /* Write enabled */
        s &= ~STA_PROTECT;
#endif

    if (MMC_CD)                                   /* Card inserted */
    dda0:	8e d0       	rcall	.+284    	; 0xdebe <mmc_ins_status>
    dda2:	89 2b       	or	r24, r25
    dda4:	11 f0       	breq	.+4      	; 0xddaa <mmc_disk_timerproc+0x2c>
	{
        s &= ~STA_NODISK;
    dda6:	cd 7f       	andi	r28, 0xFD	; 253
    dda8:	04 c0       	rjmp	.+8      	; 0xddb2 <mmc_disk_timerproc+0x34>
	}
    else                                          /* Socket empty */
	{	
        s |= (STA_NODISK | STA_NOINIT);
    ddaa:	c3 60       	ori	r28, 0x03	; 3
		set_error(1);
    ddac:	81 e0       	ldi	r24, 0x01	; 1
    ddae:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <set_error>
	}

    Stat = s;                                     /* Update MMC status */
    ddb2:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <Stat>
}
    ddb6:	cf 91       	pop	r28
    ddb8:	08 95       	ret

0000ddba <mmc_install_timer>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    ddba:	00 d0       	rcall	.+0      	; 0xddbc <mmc_install_timer+0x2>
    ddbc:	1f 92       	push	r1
    ddbe:	10 92 25 18 	sts	0x1825, r1	; 0x801825 <_mmc_timeout+0x1>
    ddc2:	10 92 24 18 	sts	0x1824, r1	; 0x801824 <_mmc_timeout>
    ddc6:	61 e0       	ldi	r22, 0x01	; 1
    ddc8:	70 e0       	ldi	r23, 0x00	; 0
    ddca:	8c e6       	ldi	r24, 0x6C	; 108
    ddcc:	9f e6       	ldi	r25, 0x6F	; 111
    ddce:	0e 94 1f 35 	call	0x6a3e	; 0x6a3e <set_timers>
    ddd2:	01 96       	adiw	r24, 0x01	; 1
    ddd4:	51 f4       	brne	.+20     	; 0xddea <mmc_install_timer+0x30>
    ddd6:	89 e2       	ldi	r24, 0x29	; 41
    ddd8:	98 e0       	ldi	r25, 0x08	; 8
    ddda:	a0 e0       	ldi	r26, 0x00	; 0
    dddc:	ed b7       	in	r30, 0x3d	; 61
    ddde:	fe b7       	in	r31, 0x3e	; 62
    dde0:	81 83       	std	Z+1, r24	; 0x01
    dde2:	92 83       	std	Z+2, r25	; 0x02
    dde4:	a3 83       	std	Z+3, r26	; 0x03
    dde6:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    ddea:	0f 90       	pop	r0
    ddec:	0f 90       	pop	r0
    ddee:	0f 90       	pop	r0
    ddf0:	08 95       	ret

0000ddf2 <mmc_spi_begin>:
    ddf2:	60 91 20 18 	lds	r22, 0x1820	; 0x801820 <_mmc_clock>
    ddf6:	70 91 21 18 	lds	r23, 0x1821	; 0x801821 <_mmc_clock+0x1>
    ddfa:	80 91 22 18 	lds	r24, 0x1822	; 0x801822 <_mmc_clock+0x2>
    ddfe:	90 91 23 18 	lds	r25, 0x1823	; 0x801823 <_mmc_clock+0x3>
    de02:	4b e0       	ldi	r20, 0x0B	; 11
    de04:	50 e0       	ldi	r21, 0x00	; 0
    de06:	0c 94 90 26 	jmp	0x4d20	; 0x4d20 <spi_begin>
    de0a:	08 95       	ret

0000de0c <mmc_spi_end>:
    de0c:	8b e0       	ldi	r24, 0x0B	; 11
    de0e:	0c 94 2c 26 	jmp	0x4c58	; 0x4c58 <spi_end>
    de12:	08 95       	ret

0000de14 <mmc_slow>:
    de14:	80 e2       	ldi	r24, 0x20	; 32
    de16:	91 ea       	ldi	r25, 0xA1	; 161
    de18:	a7 e0       	ldi	r26, 0x07	; 7
    de1a:	b0 e0       	ldi	r27, 0x00	; 0
    de1c:	80 93 20 18 	sts	0x1820, r24	; 0x801820 <_mmc_clock>
    de20:	90 93 21 18 	sts	0x1821, r25	; 0x801821 <_mmc_clock+0x1>
    de24:	a0 93 22 18 	sts	0x1822, r26	; 0x801822 <_mmc_clock+0x2>
    de28:	b0 93 23 18 	sts	0x1823, r27	; 0x801823 <_mmc_clock+0x3>
    de2c:	08 95       	ret

0000de2e <mmc_spi_init>:
    de2e:	8b e0       	ldi	r24, 0x0B	; 11
    de30:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <chip_select_init>
    de34:	ef cf       	rjmp	.-34     	; 0xde14 <mmc_slow>
    de36:	08 95       	ret

0000de38 <mmc_fast>:
    de38:	80 e4       	ldi	r24, 0x40	; 64
    de3a:	9b e4       	ldi	r25, 0x4B	; 75
    de3c:	ac e4       	ldi	r26, 0x4C	; 76
    de3e:	b0 e0       	ldi	r27, 0x00	; 0
    de40:	80 93 20 18 	sts	0x1820, r24	; 0x801820 <_mmc_clock>
    de44:	90 93 21 18 	sts	0x1821, r25	; 0x801821 <_mmc_clock+0x1>
    de48:	a0 93 22 18 	sts	0x1822, r26	; 0x801822 <_mmc_clock+0x2>
    de4c:	b0 93 23 18 	sts	0x1823, r27	; 0x801823 <_mmc_clock+0x3>
    de50:	08 95       	ret

0000de52 <mmc_spi_TX_buffer>:
    de52:	0c 94 5c 26 	jmp	0x4cb8	; 0x4cb8 <spi_TX_buffer>
    de56:	08 95       	ret

0000de58 <mmc_spi_RX_buffer>:
    de58:	0c 94 5e 26 	jmp	0x4cbc	; 0x4cbc <spi_RX_buffer>
    de5c:	08 95       	ret

0000de5e <mmc_spi_TXRX>:
    de5e:	0c 94 d8 26 	jmp	0x4db0	; 0x4db0 <spi_TXRX>
    de62:	08 95       	ret

0000de64 <mmc_set_ms_timeout>:
    de64:	f8 94       	cli
    de66:	90 93 25 18 	sts	0x1825, r25	; 0x801825 <_mmc_timeout+0x1>
    de6a:	80 93 24 18 	sts	0x1824, r24	; 0x801824 <_mmc_timeout>
    de6e:	78 94       	sei
    de70:	08 95       	ret

0000de72 <mmc_test_timeout>:
    de72:	00 d0       	rcall	.+0      	; 0xde74 <mmc_test_timeout+0x2>
    de74:	1f 92       	push	r1
    de76:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    de7a:	81 fd       	sbrc	r24, 1
    de7c:	15 c0       	rjmp	.+42     	; 0xdea8 <mmc_test_timeout+0x36>
    de7e:	80 91 24 18 	lds	r24, 0x1824	; 0x801824 <_mmc_timeout>
    de82:	90 91 25 18 	lds	r25, 0x1825	; 0x801825 <_mmc_timeout+0x1>
    de86:	89 2b       	or	r24, r25
    de88:	91 f4       	brne	.+36     	; 0xdeae <mmc_test_timeout+0x3c>
    de8a:	8c e1       	ldi	r24, 0x1C	; 28
    de8c:	98 e0       	ldi	r25, 0x08	; 8
    de8e:	a0 e0       	ldi	r26, 0x00	; 0
    de90:	ed b7       	in	r30, 0x3d	; 61
    de92:	fe b7       	in	r31, 0x3e	; 62
    de94:	81 83       	std	Z+1, r24	; 0x01
    de96:	92 83       	std	Z+2, r25	; 0x02
    de98:	a3 83       	std	Z+3, r26	; 0x03
    de9a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    de9e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    dea2:	83 60       	ori	r24, 0x03	; 3
    dea4:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    dea8:	81 e0       	ldi	r24, 0x01	; 1
    deaa:	90 e0       	ldi	r25, 0x00	; 0
    deac:	02 c0       	rjmp	.+4      	; 0xdeb2 <mmc_test_timeout+0x40>
    deae:	80 e0       	ldi	r24, 0x00	; 0
    deb0:	90 e0       	ldi	r25, 0x00	; 0
    deb2:	0f 90       	pop	r0
    deb4:	0f 90       	pop	r0
    deb6:	0f 90       	pop	r0
    deb8:	08 95       	ret

0000deba <mmc_power_on>:
    deba:	08 95       	ret

0000debc <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    debc:	08 95       	ret

0000debe <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
	// HI when card is NOT inserted
	if( GPIO_PIN_RD(GPIO_C7) )
    debe:	3f 98       	cbi	0x07, 7	; 7
    dec0:	86 b1       	in	r24, 0x06	; 6
    dec2:	08 2e       	mov	r0, r24
    dec4:	00 0c       	add	r0, r0
    dec6:	99 0b       	sbc	r25, r25
    dec8:	80 95       	com	r24
    deca:	90 95       	com	r25
		return (0);
	else
		return(1);;	
}
    decc:	89 2f       	mov	r24, r25
    dece:	88 1f       	adc	r24, r24
    ded0:	88 27       	eor	r24, r24
    ded2:	88 1f       	adc	r24, r24
    ded4:	90 e0       	ldi	r25, 0x00	; 0
    ded6:	08 95       	ret

0000ded8 <mmc_task>:
 @brief 1000HZ timer task
 @return void
*/
static void mmc_task(void)
{
    if(_mmc_timeout)
    ded8:	80 91 24 18 	lds	r24, 0x1824	; 0x801824 <_mmc_timeout>
    dedc:	90 91 25 18 	lds	r25, 0x1825	; 0x801825 <_mmc_timeout+0x1>
    dee0:	00 97       	sbiw	r24, 0x00	; 0
    dee2:	29 f0       	breq	.+10     	; 0xdeee <mmc_task+0x16>
        _mmc_timeout--;
    dee4:	01 97       	sbiw	r24, 0x01	; 1
    dee6:	90 93 25 18 	sts	0x1825, r25	; 0x801825 <_mmc_timeout+0x1>
    deea:	80 93 24 18 	sts	0x1824, r24	; 0x801824 <_mmc_timeout>

// 100HZ
    if(_mmc_pre++  < 10)
    deee:	80 91 1e 18 	lds	r24, 0x181E	; 0x80181e <_mmc_pre>
    def2:	90 91 1f 18 	lds	r25, 0x181F	; 0x80181f <_mmc_pre+0x1>
    def6:	8a 30       	cpi	r24, 0x0A	; 10
    def8:	91 05       	cpc	r25, r1
    defa:	30 f4       	brcc	.+12     	; 0xdf08 <mmc_task+0x30>
    defc:	01 96       	adiw	r24, 0x01	; 1
    defe:	90 93 1f 18 	sts	0x181F, r25	; 0x80181f <_mmc_pre+0x1>
    df02:	80 93 1e 18 	sts	0x181E, r24	; 0x80181e <_mmc_pre>
    df06:	08 95       	ret
        return;

    _mmc_pre = 0;
    df08:	10 92 1f 18 	sts	0x181F, r1	; 0x80181f <_mmc_pre+0x1>
    df0c:	10 92 1e 18 	sts	0x181E, r1	; 0x80181e <_mmc_pre>

	if(!mmc_ins_status())
    df10:	d6 df       	rcall	.-84     	; 0xdebe <mmc_ins_status>
    df12:	89 2b       	or	r24, r25
    df14:	19 f4       	brne	.+6      	; 0xdf1c <mmc_task+0x44>
		set_error(1);
    df16:	81 e0       	ldi	r24, 0x01	; 1
    df18:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <set_error>

    mmc_disk_timerproc();
    df1c:	30 cf       	rjmp	.-416    	; 0xdd7e <mmc_disk_timerproc>
    df1e:	08 95       	ret

0000df20 <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    df20:	ac e0       	ldi	r26, 0x0C	; 12
    df22:	b1 e0       	ldi	r27, 0x01	; 1
    df24:	e6 e9       	ldi	r30, 0x96	; 150
    df26:	ff e6       	ldi	r31, 0x6F	; 111
    df28:	0c 94 9f e7 	jmp	0x1cf3e	; 0x1cf3e <__prologue_saves__+0x18>
    df2c:	7c 01       	movw	r14, r24
    int rc;

    char buff[MAX_NAME_LEN+1];

    Stat = 0;
    df2e:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Stat>
	clear_error();
    df32:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <clear_error>

	// Card Detect
	GPIO_PIN_LATCH_LOW(GPIO_C7);
    df36:	47 98       	cbi	0x08, 7	; 8
	GPIO_PIN_DIR_IN(GPIO_C7);
    df38:	3f 98       	cbi	0x07, 7	; 7

    mmc_spi_init();
    df3a:	79 df       	rcall	.-270    	; 0xde2e <mmc_spi_init>

    if( verbose)
    df3c:	e1 14       	cp	r14, r1
    df3e:	f1 04       	cpc	r15, r1
    df40:	51 f0       	breq	.+20     	; 0xdf56 <mmc_init+0x36>
    {
        printf("START MMC INIT\n");
    df42:	8c e0       	ldi	r24, 0x0C	; 12
    df44:	98 e0       	ldi	r25, 0x08	; 8
    df46:	a0 e0       	ldi	r26, 0x00	; 0
    df48:	ed b7       	in	r30, 0x3d	; 61
    df4a:	fe b7       	in	r31, 0x3e	; 62
    df4c:	81 83       	std	Z+1, r24	; 0x01
    df4e:	92 83       	std	Z+2, r25	; 0x02
    df50:	a3 83       	std	Z+3, r26	; 0x03
    df52:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    }
// we only install timers once!
    if(!mmc_init_flag)
    df56:	80 91 1c 18 	lds	r24, 0x181C	; 0x80181c <mmc_init_flag>
    df5a:	90 91 1d 18 	lds	r25, 0x181D	; 0x80181d <mmc_init_flag+0x1>
    df5e:	89 2b       	or	r24, r25
        mmc_install_timer();
    df60:	09 f4       	brne	.+2      	; 0xdf64 <mmc_init+0x44>

	if(!mmc_ins_status())
    df62:	2b df       	rcall	.-426    	; 0xddba <mmc_install_timer>
    df64:	ac df       	rcall	.-168    	; 0xdebe <mmc_ins_status>
    df66:	89 2b       	or	r24, r25
    df68:	61 f4       	brne	.+24     	; 0xdf82 <mmc_init+0x62>
	{
		printf("*** MMC Card NOT Inserted! ***\n");
    df6a:	8c ee       	ldi	r24, 0xEC	; 236
    df6c:	97 e0       	ldi	r25, 0x07	; 7
    df6e:	a0 e0       	ldi	r26, 0x00	; 0
    df70:	ed b7       	in	r30, 0x3d	; 61
    df72:	fe b7       	in	r31, 0x3e	; 62
    df74:	81 83       	std	Z+1, r24	; 0x01
    df76:	92 83       	std	Z+2, r25	; 0x02
    df78:	a3 83       	std	Z+3, r26	; 0x03
    df7a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
		return(RES_NOTRDY);	
    df7e:	83 e0       	ldi	r24, 0x03	; 3
    df80:	9a c0       	rjmp	.+308    	; 0xe0b6 <mmc_init+0x196>
	}


    if( verbose)
    df82:	e1 14       	cp	r14, r1
    df84:	f1 04       	cpc	r15, r1
    df86:	11 f1       	breq	.+68     	; 0xdfcc <mmc_init+0xac>
    {
		printf("MMC Card Inserted\n");
    df88:	89 ed       	ldi	r24, 0xD9	; 217
    df8a:	97 e0       	ldi	r25, 0x07	; 7
    df8c:	a0 e0       	ldi	r26, 0x00	; 0
    df8e:	ed b7       	in	r30, 0x3d	; 61
    df90:	fe b7       	in	r31, 0x3e	; 62
    df92:	81 83       	std	Z+1, r24	; 0x01
    df94:	92 83       	std	Z+2, r25	; 0x02
    df96:	a3 83       	std	Z+3, r26	; 0x03
    df98:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    df9c:	8d ec       	ldi	r24, 0xCD	; 205
    df9e:	97 e0       	ldi	r25, 0x07	; 7
    dfa0:	a0 e0       	ldi	r26, 0x00	; 0
    dfa2:	ed b7       	in	r30, 0x3d	; 61
    dfa4:	fe b7       	in	r31, 0x3e	; 62
    dfa6:	81 83       	std	Z+1, r24	; 0x01
    dfa8:	92 83       	std	Z+2, r25	; 0x02
    dfaa:	a3 83       	std	Z+3, r26	; 0x03
    dfac:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    dfb0:	85 eb       	ldi	r24, 0xB5	; 181
    dfb2:	91 e0       	ldi	r25, 0x01	; 1
    dfb4:	ed b7       	in	r30, 0x3d	; 61
    dfb6:	fe b7       	in	r31, 0x3e	; 62
    dfb8:	95 83       	std	Z+5, r25	; 0x05
    dfba:	84 83       	std	Z+4, r24	; 0x04
    dfbc:	8c eb       	ldi	r24, 0xBC	; 188
    dfbe:	97 e0       	ldi	r25, 0x07	; 7
    dfc0:	a0 e0       	ldi	r26, 0x00	; 0
    dfc2:	81 83       	std	Z+1, r24	; 0x01
    dfc4:	92 83       	std	Z+2, r25	; 0x02
    dfc6:	a3 83       	std	Z+3, r26	; 0x03
    dfc8:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    }

    rc = disk_initialize(DEV_MMC);                // aliased to mmc_disk_initialize()
    dfcc:	80 e0       	ldi	r24, 0x00	; 0
    dfce:	1d da       	rcall	.-3014   	; 0xd40a <disk_initialize>
    dfd0:	08 2f       	mov	r16, r24
    dfd2:	10 e0       	ldi	r17, 0x00	; 0

    if( rc != RES_OK  )
    dfd4:	01 15       	cp	r16, r1
    dfd6:	11 05       	cpc	r17, r1
        put_rc(rc);
    dfd8:	19 f0       	breq	.+6      	; 0xdfe0 <mmc_init+0xc0>
    dfda:	c8 01       	movw	r24, r16
    dfdc:	64 d1       	rcall	.+712    	; 0xe2a6 <put_rc>
    dfde:	0e c0       	rjmp	.+28     	; 0xdffc <mmc_init+0xdc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    dfe0:	40 e0       	ldi	r20, 0x00	; 0
    dfe2:	66 ea       	ldi	r22, 0xA6	; 166
    dfe4:	78 e0       	ldi	r23, 0x08	; 8
    dfe6:	86 e7       	ldi	r24, 0x76	; 118
    dfe8:	9a e1       	ldi	r25, 0x1A	; 26
    dfea:	0e 94 dd 59 	call	0xb3ba	; 0xb3ba <f_mount>
    dfee:	8c 01       	movw	r16, r24

    if( rc != RES_OK || verbose)
    dff0:	89 2b       	or	r24, r25
    dff2:	21 f4       	brne	.+8      	; 0xdffc <mmc_init+0xdc>
    dff4:	e1 14       	cp	r14, r1
    dff6:	f1 04       	cpc	r15, r1
    dff8:	09 f4       	brne	.+2      	; 0xdffc <mmc_init+0xdc>
        put_rc( rc );
    dffa:	4f c0       	rjmp	.+158    	; 0xe09a <mmc_init+0x17a>
    dffc:	c8 01       	movw	r24, r16
    dffe:	53 d1       	rcall	.+678    	; 0xe2a6 <put_rc>

    if (verbose )
    e000:	e1 14       	cp	r14, r1
    e002:	f1 04       	cpc	r15, r1
    e004:	09 f4       	brne	.+2      	; 0xe008 <mmc_init+0xe8>
    e006:	49 c0       	rjmp	.+146    	; 0xe09a <mmc_init+0x17a>
    {
        DWORD blksize = 0;
    e008:	c7 5f       	subi	r28, 0xF7	; 247
    e00a:	de 4f       	sbci	r29, 0xFE	; 254
    e00c:	18 82       	st	Y, r1
    e00e:	19 82       	std	Y+1, r1	; 0x01
    e010:	1a 82       	std	Y+2, r1	; 0x02
    e012:	1b 82       	std	Y+3, r1	; 0x03
    e014:	c9 50       	subi	r28, 0x09	; 9
    e016:	d1 40       	sbci	r29, 0x01	; 1
        if(rc == RES_OK)
    e018:	01 15       	cp	r16, r1
    e01a:	11 05       	cpc	r17, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    e01c:	a1 f5       	brne	.+104    	; 0xe086 <mmc_init+0x166>
    e01e:	ae 01       	movw	r20, r28
    e020:	47 5f       	subi	r20, 0xF7	; 247
    e022:	5e 4f       	sbci	r21, 0xFE	; 254
    e024:	63 e0       	ldi	r22, 0x03	; 3
    e026:	80 e0       	ldi	r24, 0x00	; 0
    e028:	16 da       	rcall	.-3028   	; 0xd456 <disk_ioctl>
            if( rc != RES_OK)
    e02a:	8c 01       	movw	r16, r24
    e02c:	00 97       	sbiw	r24, 0x00	; 0
            {
                put_rc( rc );
    e02e:	61 f0       	breq	.+24     	; 0xe048 <mmc_init+0x128>
    e030:	3a d1       	rcall	.+628    	; 0xe2a6 <put_rc>
                printf("MMC Block Size - read failed\n");
    e032:	8e e9       	ldi	r24, 0x9E	; 158
    e034:	97 e0       	ldi	r25, 0x07	; 7
    e036:	a0 e0       	ldi	r26, 0x00	; 0
    e038:	ed b7       	in	r30, 0x3d	; 61
    e03a:	fe b7       	in	r31, 0x3e	; 62
    e03c:	81 83       	std	Z+1, r24	; 0x01
    e03e:	92 83       	std	Z+2, r25	; 0x02
    e040:	a3 83       	std	Z+3, r26	; 0x03
    e042:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    e046:	1f c0       	rjmp	.+62     	; 0xe086 <mmc_init+0x166>
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    e048:	c7 5f       	subi	r28, 0xF7	; 247
    e04a:	de 4f       	sbci	r29, 0xFE	; 254
    e04c:	88 81       	ld	r24, Y
    e04e:	99 81       	ldd	r25, Y+1	; 0x01
    e050:	aa 81       	ldd	r26, Y+2	; 0x02
    e052:	bb 81       	ldd	r27, Y+3	; 0x03
    e054:	c9 50       	subi	r28, 0x09	; 9
    e056:	d1 40       	sbci	r29, 0x01	; 1
    e058:	ed b7       	in	r30, 0x3d	; 61
    e05a:	fe b7       	in	r31, 0x3e	; 62
    e05c:	84 83       	std	Z+4, r24	; 0x04
    e05e:	95 83       	std	Z+5, r25	; 0x05
    e060:	a6 83       	std	Z+6, r26	; 0x06
    e062:	b7 83       	std	Z+7, r27	; 0x07
    e064:	89 e8       	ldi	r24, 0x89	; 137
    e066:	97 e0       	ldi	r25, 0x07	; 7
    e068:	a0 e0       	ldi	r26, 0x00	; 0
    e06a:	81 83       	std	Z+1, r24	; 0x01
    e06c:	92 83       	std	Z+2, r25	; 0x02
    e06e:	a3 83       	std	Z+3, r26	; 0x03
    e070:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            }
            if( rc == RES_OK)
            {
                strcpy(buff,"/");
    e074:	66 ea       	ldi	r22, 0xA6	; 166
    e076:	78 e0       	ldi	r23, 0x08	; 8
    e078:	ce 01       	movw	r24, r28
    e07a:	08 96       	adiw	r24, 0x08	; 8
    e07c:	0e 94 b2 31 	call	0x6364	; 0x6364 <strcpy>
                fatfs_status(buff);
    e080:	ce 01       	movw	r24, r28
    e082:	08 96       	adiw	r24, 0x08	; 8
    e084:	34 d1       	rcall	.+616    	; 0xe2ee <fatfs_status>
            }
        }
        printf("END MMC INIT\n");
    e086:	8b e7       	ldi	r24, 0x7B	; 123
    e088:	97 e0       	ldi	r25, 0x07	; 7
    e08a:	a0 e0       	ldi	r26, 0x00	; 0
    e08c:	ed b7       	in	r30, 0x3d	; 61
    e08e:	fe b7       	in	r31, 0x3e	; 62
    e090:	81 83       	std	Z+1, r24	; 0x01
    e092:	92 83       	std	Z+2, r25	; 0x02
    e094:	a3 83       	std	Z+3, r26	; 0x03
    e096:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    }
    mmc_init_flag = 1;
    e09a:	81 e0       	ldi	r24, 0x01	; 1
    e09c:	90 e0       	ldi	r25, 0x00	; 0
    e09e:	90 93 1d 18 	sts	0x181D, r25	; 0x80181d <mmc_init_flag+0x1>
    e0a2:	80 93 1c 18 	sts	0x181C, r24	; 0x80181c <mmc_init_flag>

	if(rc != RES_OK)
    e0a6:	01 15       	cp	r16, r1
    e0a8:	11 05       	cpc	r17, r1
    e0aa:	21 f0       	breq	.+8      	; 0xe0b4 <mmc_init+0x194>
		set_error(1);
    e0ac:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <set_error>
    e0b0:	c8 01       	movw	r24, r16
    e0b2:	02 c0       	rjmp	.+4      	; 0xe0b8 <mmc_init+0x198>
    e0b4:	80 e0       	ldi	r24, 0x00	; 0
    e0b6:	90 e0       	ldi	r25, 0x00	; 0

    return( rc ) ;
}
    e0b8:	c4 5f       	subi	r28, 0xF4	; 244
    e0ba:	de 4f       	sbci	r29, 0xFE	; 254
    e0bc:	e6 e0       	ldi	r30, 0x06	; 6
    e0be:	0c 94 bb e7 	jmp	0x1cf76	; 0x1cf76 <__epilogue_restores__+0x18>

0000e0c2 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    e0c2:	80 e0       	ldi	r24, 0x00	; 0
    e0c4:	90 e0       	ldi	r25, 0x00	; 0
    e0c6:	08 95       	ret

0000e0c8 <fatfs_scan_files>:
/// WARNING path MUST be big enought for the lonest path length
/// @return 0 if no error
static
MEMSPACE
int fatfs_scan_files (char *path) /* Pointer to the working buffer with start path */
{
    e0c8:	a4 e4       	ldi	r26, 0x44	; 68
    e0ca:	b1 e0       	ldi	r27, 0x01	; 1
    e0cc:	ea e6       	ldi	r30, 0x6A	; 106
    e0ce:	f0 e7       	ldi	r31, 0x70	; 112
    e0d0:	0c 94 9e e7 	jmp	0x1cf3c	; 0x1cf3c <__prologue_saves__+0x16>
    e0d4:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;
    fr = f_opendir(&dirs, path);
    e0d6:	bc 01       	movw	r22, r24
    e0d8:	ce 01       	movw	r24, r28
    e0da:	89 5e       	subi	r24, 0xE9	; 233
    e0dc:	9e 4f       	sbci	r25, 0xFE	; 254
    e0de:	0e 94 98 63 	call	0xc730	; 0xc730 <f_opendir>
    if (fr == FR_OK)
    e0e2:	00 97       	sbiw	r24, 0x00	; 0
    e0e4:	09 f0       	breq	.+2      	; 0xe0e8 <fatfs_scan_files+0x20>
    e0e6:	5b c0       	rjmp	.+182    	; 0xe19e <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
            {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e0e8:	8f e2       	ldi	r24, 0x2F	; 47
    e0ea:	d8 2e       	mov	r13, r24
    int i;
    FILINFO info;
    fr = f_opendir(&dirs, path);
    if (fr == FR_OK)
    {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0])
    e0ec:	be 01       	movw	r22, r28
    e0ee:	6f 5f       	subi	r22, 0xFF	; 255
    e0f0:	7f 4f       	sbci	r23, 0xFF	; 255
    e0f2:	ce 01       	movw	r24, r28
    e0f4:	89 5e       	subi	r24, 0xE9	; 233
    e0f6:	9e 4f       	sbci	r25, 0xFE	; 254
    e0f8:	0e 94 1e 64 	call	0xc83c	; 0xc83c <f_readdir>
    e0fc:	00 97       	sbiw	r24, 0x00	; 0
    e0fe:	09 f0       	breq	.+2      	; 0xe102 <fatfs_scan_files+0x3a>
    e100:	4e c0       	rjmp	.+156    	; 0xe19e <fatfs_scan_files+0xd6>
    e102:	2f 89       	ldd	r18, Y+23	; 0x17
    e104:	22 23       	and	r18, r18
    e106:	09 f4       	brne	.+2      	; 0xe10a <fatfs_scan_files+0x42>
    e108:	4a c0       	rjmp	.+148    	; 0xe19e <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
    e10a:	89 85       	ldd	r24, Y+9	; 0x09
    e10c:	84 ff       	sbrs	r24, 4
    e10e:	25 c0       	rjmp	.+74     	; 0xe15a <fatfs_scan_files+0x92>
            {
                AccDirs++;
    e110:	80 91 af 1c 	lds	r24, 0x1CAF	; 0x801caf <AccDirs>
    e114:	90 91 b0 1c 	lds	r25, 0x1CB0	; 0x801cb0 <AccDirs+0x1>
    e118:	01 96       	adiw	r24, 0x01	; 1
    e11a:	90 93 b0 1c 	sts	0x1CB0, r25	; 0x801cb0 <AccDirs+0x1>
    e11e:	80 93 af 1c 	sts	0x1CAF, r24	; 0x801caf <AccDirs>
                i = strlen(path);
    e122:	f8 01       	movw	r30, r16
    e124:	01 90       	ld	r0, Z+
    e126:	00 20       	and	r0, r0
    e128:	e9 f7       	brne	.-6      	; 0xe124 <fatfs_scan_files+0x5c>
    e12a:	31 97       	sbiw	r30, 0x01	; 1
    e12c:	e0 1b       	sub	r30, r16
    e12e:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e130:	78 01       	movw	r14, r16
    e132:	ee 0e       	add	r14, r30
    e134:	ff 1e       	adc	r15, r31
    e136:	d7 01       	movw	r26, r14
    e138:	dc 92       	st	X, r13
    e13a:	cf 01       	movw	r24, r30
    e13c:	01 96       	adiw	r24, 0x01	; 1
    e13e:	be 01       	movw	r22, r28
    e140:	69 5e       	subi	r22, 0xE9	; 233
    e142:	7f 4f       	sbci	r23, 0xFF	; 255
    e144:	80 0f       	add	r24, r16
    e146:	91 1f       	adc	r25, r17
    e148:	0e 94 b2 31 	call	0x6364	; 0x6364 <strcpy>
                fr = fatfs_scan_files(path);
    e14c:	c8 01       	movw	r24, r16
    e14e:	bc df       	rcall	.-136    	; 0xe0c8 <fatfs_scan_files>
                path[i] = 0;
    e150:	f7 01       	movw	r30, r14
    e152:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    e154:	00 97       	sbiw	r24, 0x00	; 0
    e156:	51 f2       	breq	.-108    	; 0xe0ec <fatfs_scan_files+0x24>
    e158:	22 c0       	rjmp	.+68     	; 0xe19e <fatfs_scan_files+0xd6>
            }
            else
            {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    e15a:	80 91 b1 1c 	lds	r24, 0x1CB1	; 0x801cb1 <AccFiles>
    e15e:	90 91 b2 1c 	lds	r25, 0x1CB2	; 0x801cb2 <AccFiles+0x1>
    e162:	01 96       	adiw	r24, 0x01	; 1
    e164:	90 93 b2 1c 	sts	0x1CB2, r25	; 0x801cb2 <AccFiles+0x1>
    e168:	80 93 b1 1c 	sts	0x1CB1, r24	; 0x801cb1 <AccFiles>
                AccSize += info.fsize;
    e16c:	40 91 ab 1c 	lds	r20, 0x1CAB	; 0x801cab <AccSize>
    e170:	50 91 ac 1c 	lds	r21, 0x1CAC	; 0x801cac <AccSize+0x1>
    e174:	60 91 ad 1c 	lds	r22, 0x1CAD	; 0x801cad <AccSize+0x2>
    e178:	70 91 ae 1c 	lds	r23, 0x1CAE	; 0x801cae <AccSize+0x3>
    e17c:	89 81       	ldd	r24, Y+1	; 0x01
    e17e:	9a 81       	ldd	r25, Y+2	; 0x02
    e180:	ab 81       	ldd	r26, Y+3	; 0x03
    e182:	bc 81       	ldd	r27, Y+4	; 0x04
    e184:	84 0f       	add	r24, r20
    e186:	95 1f       	adc	r25, r21
    e188:	a6 1f       	adc	r26, r22
    e18a:	b7 1f       	adc	r27, r23
    e18c:	80 93 ab 1c 	sts	0x1CAB, r24	; 0x801cab <AccSize>
    e190:	90 93 ac 1c 	sts	0x1CAC, r25	; 0x801cac <AccSize+0x1>
    e194:	a0 93 ad 1c 	sts	0x1CAD, r26	; 0x801cad <AccSize+0x2>
    e198:	b0 93 ae 1c 	sts	0x1CAE, r27	; 0x801cae <AccSize+0x3>
    e19c:	a7 cf       	rjmp	.-178    	; 0xe0ec <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e19e:	cc 5b       	subi	r28, 0xBC	; 188
    e1a0:	de 4f       	sbci	r29, 0xFE	; 254
    e1a2:	e7 e0       	ldi	r30, 0x07	; 7
    e1a4:	0c 94 ba e7 	jmp	0x1cf74	; 0x1cf74 <__epilogue_restores__+0x16>

0000e1a8 <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    e1a8:	0f 93       	push	r16
    e1aa:	1f 93       	push	r17
    e1ac:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    e1ae:	46 81       	ldd	r20, Z+6	; 0x06
    e1b0:	57 81       	ldd	r21, Z+7	; 0x07
    e1b2:	05 2e       	mov	r0, r21
    e1b4:	00 0c       	add	r0, r0
    e1b6:	66 0b       	sbc	r22, r22
    e1b8:	77 0b       	sbc	r23, r23
    e1ba:	ba 01       	movw	r22, r20
    e1bc:	55 27       	eor	r21, r21
    e1be:	44 27       	eor	r20, r20
    e1c0:	84 81       	ldd	r24, Z+4	; 0x04
    e1c2:	95 81       	ldd	r25, Z+5	; 0x05
    e1c4:	09 2e       	mov	r0, r25
    e1c6:	00 0c       	add	r0, r0
    e1c8:	aa 0b       	sbc	r26, r26
    e1ca:	bb 0b       	sbc	r27, r27
    e1cc:	2b e0       	ldi	r18, 0x0B	; 11
    e1ce:	88 0f       	add	r24, r24
    e1d0:	99 1f       	adc	r25, r25
    e1d2:	aa 1f       	adc	r26, r26
    e1d4:	bb 1f       	adc	r27, r27
    e1d6:	2a 95       	dec	r18
    e1d8:	d1 f7       	brne	.-12     	; 0xe1ce <tm_to_fat+0x26>
    e1da:	48 2b       	or	r20, r24
    e1dc:	59 2b       	or	r21, r25
    e1de:	6a 2b       	or	r22, r26
    e1e0:	7b 2b       	or	r23, r27
    e1e2:	82 81       	ldd	r24, Z+2	; 0x02
    e1e4:	93 81       	ldd	r25, Z+3	; 0x03
    e1e6:	09 2e       	mov	r0, r25
    e1e8:	00 0c       	add	r0, r0
    e1ea:	aa 0b       	sbc	r26, r26
    e1ec:	bb 0b       	sbc	r27, r27
    e1ee:	35 e0       	ldi	r19, 0x05	; 5
    e1f0:	88 0f       	add	r24, r24
    e1f2:	99 1f       	adc	r25, r25
    e1f4:	aa 1f       	adc	r26, r26
    e1f6:	bb 1f       	adc	r27, r27
    e1f8:	3a 95       	dec	r19
    e1fa:	d1 f7       	brne	.-12     	; 0xe1f0 <tm_to_fat+0x48>
    e1fc:	48 2b       	or	r20, r24
    e1fe:	59 2b       	or	r21, r25
    e200:	6a 2b       	or	r22, r26
    e202:	7b 2b       	or	r23, r27
    e204:	80 81       	ld	r24, Z
    e206:	91 81       	ldd	r25, Z+1	; 0x01
    e208:	09 2e       	mov	r0, r25
    e20a:	00 0c       	add	r0, r0
    e20c:	aa 0b       	sbc	r26, r26
    e20e:	bb 0b       	sbc	r27, r27
    e210:	b6 95       	lsr	r27
    e212:	a7 95       	ror	r26
    e214:	97 95       	ror	r25
    e216:	87 95       	ror	r24
    e218:	84 2b       	or	r24, r20
    e21a:	95 2b       	or	r25, r21
    e21c:	a6 2b       	or	r26, r22
    e21e:	b7 2b       	or	r27, r23
    e220:	02 85       	ldd	r16, Z+10	; 0x0a
    e222:	13 85       	ldd	r17, Z+11	; 0x0b
    e224:	00 55       	subi	r16, 0x50	; 80
    e226:	11 09       	sbc	r17, r1
    e228:	01 2e       	mov	r0, r17
    e22a:	00 0c       	add	r0, r0
    e22c:	22 0b       	sbc	r18, r18
    e22e:	33 0b       	sbc	r19, r19
    e230:	49 e1       	ldi	r20, 0x19	; 25
    e232:	00 0f       	add	r16, r16
    e234:	11 1f       	adc	r17, r17
    e236:	22 1f       	adc	r18, r18
    e238:	33 1f       	adc	r19, r19
    e23a:	4a 95       	dec	r20
    e23c:	d1 f7       	brne	.-12     	; 0xe232 <tm_to_fat+0x8a>
    e23e:	ac 01       	movw	r20, r24
    e240:	bd 01       	movw	r22, r26
    e242:	40 2b       	or	r20, r16
    e244:	51 2b       	or	r21, r17
    e246:	62 2b       	or	r22, r18
    e248:	73 2b       	or	r23, r19
    e24a:	80 85       	ldd	r24, Z+8	; 0x08
    e24c:	91 85       	ldd	r25, Z+9	; 0x09
    e24e:	09 2e       	mov	r0, r25
    e250:	00 0c       	add	r0, r0
    e252:	aa 0b       	sbc	r26, r26
    e254:	bb 0b       	sbc	r27, r27
    e256:	01 96       	adiw	r24, 0x01	; 1
    e258:	a1 1d       	adc	r26, r1
    e25a:	b1 1d       	adc	r27, r1
    e25c:	e5 e1       	ldi	r30, 0x15	; 21
    e25e:	88 0f       	add	r24, r24
    e260:	99 1f       	adc	r25, r25
    e262:	aa 1f       	adc	r26, r26
    e264:	bb 1f       	adc	r27, r27
    e266:	ea 95       	dec	r30
    e268:	d1 f7       	brne	.-12     	; 0xe25e <tm_to_fat+0xb6>
    e26a:	8a 01       	movw	r16, r20
    e26c:	9b 01       	movw	r18, r22
    e26e:	08 2b       	or	r16, r24
    e270:	19 2b       	or	r17, r25
    e272:	2a 2b       	or	r18, r26
    e274:	3b 2b       	or	r19, r27
    e276:	c9 01       	movw	r24, r18
    e278:	b8 01       	movw	r22, r16
}
    e27a:	1f 91       	pop	r17
    e27c:	0f 91       	pop	r16
    e27e:	08 95       	ret

0000e280 <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    e280:	a4 e0       	ldi	r26, 0x04	; 4
    e282:	b0 e0       	ldi	r27, 0x00	; 0
    e284:	e6 e4       	ldi	r30, 0x46	; 70
    e286:	f1 e7       	ldi	r31, 0x71	; 113
    e288:	0c 94 a3 e7 	jmp	0x1cf46	; 0x1cf46 <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    e28c:	ce 01       	movw	r24, r28
    e28e:	01 96       	adiw	r24, 0x01	; 1
    e290:	0e 94 73 38 	call	0x70e6	; 0x70e6 <time>
    return( tm_to_fat(localtime(&t)));
    e294:	ce 01       	movw	r24, r28
    e296:	01 96       	adiw	r24, 0x01	; 1
    e298:	0e 94 0c 39 	call	0x7218	; 0x7218 <localtime>
    e29c:	85 df       	rcall	.-246    	; 0xe1a8 <tm_to_fat>
}
    e29e:	24 96       	adiw	r28, 0x04	; 4
    e2a0:	e2 e0       	ldi	r30, 0x02	; 2
    e2a2:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

0000e2a6 <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    e2a6:	00 d0       	rcall	.+0      	; 0xe2a8 <put_rc+0x2>
    e2a8:	00 d0       	rcall	.+0      	; 0xe2aa <put_rc+0x4>
    e2aa:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    e2ac:	ed b7       	in	r30, 0x3d	; 61
    e2ae:	fe b7       	in	r31, 0x3e	; 62
    e2b0:	95 83       	std	Z+5, r25	; 0x05
    e2b2:	84 83       	std	Z+4, r24	; 0x04
    e2b4:	88 ec       	ldi	r24, 0xC8	; 200
    e2b6:	9a e0       	ldi	r25, 0x0A	; 10
    e2b8:	a0 e0       	ldi	r26, 0x00	; 0
    e2ba:	81 83       	std	Z+1, r24	; 0x01
    e2bc:	92 83       	std	Z+2, r25	; 0x02
    e2be:	a3 83       	std	Z+3, r26	; 0x03
    e2c0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
}
    e2c4:	0f 90       	pop	r0
    e2c6:	0f 90       	pop	r0
    e2c8:	0f 90       	pop	r0
    e2ca:	0f 90       	pop	r0
    e2cc:	0f 90       	pop	r0
    e2ce:	08 95       	ret

0000e2d0 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e2d0:	01 97       	sbiw	r24, 0x01	; 1
    e2d2:	84 30       	cpi	r24, 0x04	; 4
    e2d4:	91 05       	cpc	r25, r1
    e2d6:	40 f4       	brcc	.+16     	; 0xe2e8 <fatfs_fstype+0x18>
    e2d8:	88 0f       	add	r24, r24
    e2da:	99 1f       	adc	r25, r25
    e2dc:	fc 01       	movw	r30, r24
    e2de:	e6 53       	subi	r30, 0x36	; 54
    e2e0:	f7 4f       	sbci	r31, 0xF7	; 247
    e2e2:	80 81       	ld	r24, Z
    e2e4:	91 81       	ldd	r25, Z+1	; 0x01
    e2e6:	08 95       	ret
    char *ptr;
    switch(type)
    e2e8:	88 ea       	ldi	r24, 0xA8	; 168
    e2ea:	98 e0       	ldi	r25, 0x08	; 8
        default:
            ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e2ec:	08 95       	ret

0000e2ee <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  1 on success 0 on error
MEMSPACE
int fatfs_status(char *name)
{
    e2ee:	a8 e3       	ldi	r26, 0x38	; 56
    e2f0:	b1 e0       	ldi	r27, 0x01	; 1
    e2f2:	ed e7       	ldi	r30, 0x7D	; 125
    e2f4:	f1 e7       	ldi	r31, 0x71	; 113
    e2f6:	0c 94 9d e7 	jmp	0x1cf3a	; 0x1cf3a <__prologue_saves__+0x14>
    FATFS *fs;
    char label[24+2];
    DWORD vsn;                                    // volume serial number
    char buff[MAX_NAME_LEN+1];

	memset(buff,0,sizeof(buff)-1);
    e2fa:	8e 01       	movw	r16, r28
    e2fc:	0c 5e       	subi	r16, 0xEC	; 236
    e2fe:	1f 4f       	sbci	r17, 0xFF	; 255
    e300:	20 e0       	ldi	r18, 0x00	; 0
    e302:	31 e0       	ldi	r19, 0x01	; 1
    e304:	f8 01       	movw	r30, r16
    e306:	a9 01       	movw	r20, r18
    e308:	11 92       	st	Z+, r1
    e30a:	41 50       	subi	r20, 0x01	; 1
    e30c:	50 40       	sbci	r21, 0x00	; 0
    e30e:	e1 f7       	brne	.-8      	; 0xe308 <fatfs_status+0x1a>
    e310:	7c 01       	movw	r14, r24
    while(*name == ' ' || *name == '\t')
    e312:	fc 01       	movw	r30, r24
    e314:	21 91       	ld	r18, Z+
    e316:	cf 01       	movw	r24, r30
    e318:	20 32       	cpi	r18, 0x20	; 32
    e31a:	d1 f3       	breq	.-12     	; 0xe310 <fatfs_status+0x22>
    e31c:	29 30       	cpi	r18, 0x09	; 9
    e31e:	c1 f3       	breq	.-16     	; 0xe310 <fatfs_status+0x22>
        ++name;

	printf("MMC SLOW clock=%8ld\n", (long)MMC_SLOW);
    e320:	80 e2       	ldi	r24, 0x20	; 32
    e322:	91 ea       	ldi	r25, 0xA1	; 161
    e324:	a7 e0       	ldi	r26, 0x07	; 7
    e326:	b0 e0       	ldi	r27, 0x00	; 0
    e328:	ed b7       	in	r30, 0x3d	; 61
    e32a:	fe b7       	in	r31, 0x3e	; 62
    e32c:	84 83       	std	Z+4, r24	; 0x04
    e32e:	95 83       	std	Z+5, r25	; 0x05
    e330:	a6 83       	std	Z+6, r26	; 0x06
    e332:	b7 83       	std	Z+7, r27	; 0x07
    e334:	83 eb       	ldi	r24, 0xB3	; 179
    e336:	9a e0       	ldi	r25, 0x0A	; 10
    e338:	a0 e0       	ldi	r26, 0x00	; 0
    e33a:	81 83       	std	Z+1, r24	; 0x01
    e33c:	92 83       	std	Z+2, r25	; 0x02
    e33e:	a3 83       	std	Z+3, r26	; 0x03
    e340:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
	printf("MMC FAST clock=%8ld\n", (long)MMC_FAST);
    e344:	80 e4       	ldi	r24, 0x40	; 64
    e346:	9b e4       	ldi	r25, 0x4B	; 75
    e348:	ac e4       	ldi	r26, 0x4C	; 76
    e34a:	b0 e0       	ldi	r27, 0x00	; 0
    e34c:	ed b7       	in	r30, 0x3d	; 61
    e34e:	fe b7       	in	r31, 0x3e	; 62
    e350:	84 83       	std	Z+4, r24	; 0x04
    e352:	95 83       	std	Z+5, r25	; 0x05
    e354:	a6 83       	std	Z+6, r26	; 0x06
    e356:	b7 83       	std	Z+7, r27	; 0x07
    e358:	8e e9       	ldi	r24, 0x9E	; 158
    e35a:	9a e0       	ldi	r25, 0x0A	; 10
    e35c:	a0 e0       	ldi	r26, 0x00	; 0
    e35e:	81 83       	std	Z+1, r24	; 0x01
    e360:	92 83       	std	Z+2, r25	; 0x02
    e362:	a3 83       	std	Z+3, r26	; 0x03
    e364:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

    if(!name || !*name)
    e368:	e1 14       	cp	r14, r1
    e36a:	f1 04       	cpc	r15, r1
    e36c:	21 f0       	breq	.+8      	; 0xe376 <fatfs_status+0x88>
    e36e:	f7 01       	movw	r30, r14
    e370:	80 81       	ld	r24, Z
    e372:	81 11       	cpse	r24, r1
    e374:	03 c0       	rjmp	.+6      	; 0xe37c <fatfs_status+0x8e>
    {
        strcpy(buff,".");
    e376:	66 ee       	ldi	r22, 0xE6	; 230
    e378:	72 e1       	ldi	r23, 0x12	; 18
    e37a:	01 c0       	rjmp	.+2      	; 0xe37e <fatfs_status+0x90>
    }
    else
    {
        strcpy(buff,name);
    e37c:	b7 01       	movw	r22, r14
    e37e:	c8 01       	movw	r24, r16
    e380:	0e 94 b2 31 	call	0x6364	; 0x6364 <strcpy>
	}
    printf("fatfs status:%s\n",buff);
    e384:	ed b7       	in	r30, 0x3d	; 61
    e386:	fe b7       	in	r31, 0x3e	; 62
    e388:	15 83       	std	Z+5, r17	; 0x05
    e38a:	04 83       	std	Z+4, r16	; 0x04
    e38c:	8d e8       	ldi	r24, 0x8D	; 141
    e38e:	9a e0       	ldi	r25, 0x0A	; 10
    e390:	a0 e0       	ldi	r26, 0x00	; 0
    e392:	81 83       	std	Z+1, r24	; 0x01
    e394:	92 83       	std	Z+2, r25	; 0x02
    e396:	a3 83       	std	Z+3, r26	; 0x03
    e398:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    res = f_getfree(buff, (DWORD*)&p2, &fs);
    e39c:	ae 01       	movw	r20, r28
    e39e:	49 5c       	subi	r20, 0xC9	; 201
    e3a0:	5e 4f       	sbci	r21, 0xFE	; 254
    e3a2:	be 01       	movw	r22, r28
    e3a4:	6d 5c       	subi	r22, 0xCD	; 205
    e3a6:	7e 4f       	sbci	r23, 0xFE	; 254
    e3a8:	c8 01       	movw	r24, r16
    e3aa:	0e 94 a0 64 	call	0xc940	; 0xc940 <f_getfree>
    if (res)
    e3ae:	89 2b       	or	r24, r25
    e3b0:	19 f0       	breq	.+6      	; 0xe3b8 <fatfs_status+0xca>
    {
        printf("fatfs_status f_getfree failed\n");
    e3b2:	8e e6       	ldi	r24, 0x6E	; 110
    e3b4:	9a e0       	ldi	r25, 0x0A	; 10
    e3b6:	e4 c0       	rjmp	.+456    	; 0xe580 <fatfs_status+0x292>
        return(0);
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e3b8:	c9 5c       	subi	r28, 0xC9	; 201
    e3ba:	de 4f       	sbci	r29, 0xFE	; 254
    e3bc:	e8 81       	ld	r30, Y
    e3be:	f9 81       	ldd	r31, Y+1	; 0x01
    e3c0:	c7 53       	subi	r28, 0x37	; 55
    e3c2:	d1 40       	sbci	r29, 0x01	; 1
    e3c4:	80 81       	ld	r24, Z
    e3c6:	90 e0       	ldi	r25, 0x00	; 0
    e3c8:	83 df       	rcall	.-250    	; 0xe2d0 <fatfs_fstype>
    e3ca:	ed b7       	in	r30, 0x3d	; 61
    e3cc:	fe b7       	in	r31, 0x3e	; 62
    e3ce:	95 83       	std	Z+5, r25	; 0x05
    e3d0:	84 83       	std	Z+4, r24	; 0x04
    e3d2:	80 e5       	ldi	r24, 0x50	; 80
    e3d4:	9a e0       	ldi	r25, 0x0A	; 10
    e3d6:	a0 e0       	ldi	r26, 0x00	; 0
    e3d8:	81 83       	std	Z+1, r24	; 0x01
    e3da:	92 83       	std	Z+2, r25	; 0x02
    e3dc:	a3 83       	std	Z+3, r26	; 0x03
    e3de:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e3e2:	c9 5c       	subi	r28, 0xC9	; 201
    e3e4:	de 4f       	sbci	r29, 0xFE	; 254
    e3e6:	e8 81       	ld	r30, Y
    e3e8:	f9 81       	ldd	r31, Y+1	; 0x01
    e3ea:	c7 53       	subi	r28, 0x37	; 55
    e3ec:	d1 40       	sbci	r29, 0x01	; 1
    e3ee:	81 85       	ldd	r24, Z+9	; 0x09
    e3f0:	92 85       	ldd	r25, Z+10	; 0x0a
    e3f2:	a0 e0       	ldi	r26, 0x00	; 0
    e3f4:	b0 e0       	ldi	r27, 0x00	; 0
    e3f6:	39 e0       	ldi	r19, 0x09	; 9
    e3f8:	88 0f       	add	r24, r24
    e3fa:	99 1f       	adc	r25, r25
    e3fc:	aa 1f       	adc	r26, r26
    e3fe:	bb 1f       	adc	r27, r27
    e400:	3a 95       	dec	r19
    e402:	d1 f7       	brne	.-12     	; 0xe3f8 <fatfs_status+0x10a>
    e404:	ed b7       	in	r30, 0x3d	; 61
    e406:	fe b7       	in	r31, 0x3e	; 62
    e408:	84 83       	std	Z+4, r24	; 0x04
    e40a:	95 83       	std	Z+5, r25	; 0x05
    e40c:	a6 83       	std	Z+6, r26	; 0x06
    e40e:	b7 83       	std	Z+7, r27	; 0x07
    e410:	81 e3       	ldi	r24, 0x31	; 49
    e412:	9a e0       	ldi	r25, 0x0A	; 10
    e414:	a0 e0       	ldi	r26, 0x00	; 0
    e416:	81 83       	std	Z+1, r24	; 0x01
    e418:	92 83       	std	Z+2, r25	; 0x02
    e41a:	a3 83       	std	Z+3, r26	; 0x03
    e41c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e420:	c9 5c       	subi	r28, 0xC9	; 201
    e422:	de 4f       	sbci	r29, 0xFE	; 254
    e424:	e8 81       	ld	r30, Y
    e426:	f9 81       	ldd	r31, Y+1	; 0x01
    e428:	c7 53       	subi	r28, 0x37	; 55
    e42a:	d1 40       	sbci	r29, 0x01	; 1
    e42c:	82 81       	ldd	r24, Z+2	; 0x02
    e42e:	90 e0       	ldi	r25, 0x00	; 0
    e430:	ed b7       	in	r30, 0x3d	; 61
    e432:	fe b7       	in	r31, 0x3e	; 62
    e434:	95 83       	std	Z+5, r25	; 0x05
    e436:	84 83       	std	Z+4, r24	; 0x04
    e438:	83 e1       	ldi	r24, 0x13	; 19
    e43a:	9a e0       	ldi	r25, 0x0A	; 10
    e43c:	a0 e0       	ldi	r26, 0x00	; 0
    e43e:	81 83       	std	Z+1, r24	; 0x01
    e440:	92 83       	std	Z+2, r25	; 0x02
    e442:	a3 83       	std	Z+3, r26	; 0x03
    e444:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e448:	c9 5c       	subi	r28, 0xC9	; 201
    e44a:	de 4f       	sbci	r29, 0xFE	; 254
    e44c:	e8 81       	ld	r30, Y
    e44e:	f9 81       	ldd	r31, Y+1	; 0x01
    e450:	c7 53       	subi	r28, 0x37	; 55
    e452:	d1 40       	sbci	r29, 0x01	; 1
    e454:	87 81       	ldd	r24, Z+7	; 0x07
    e456:	90 85       	ldd	r25, Z+8	; 0x08
    e458:	ed b7       	in	r30, 0x3d	; 61
    e45a:	fe b7       	in	r31, 0x3e	; 62
    e45c:	95 83       	std	Z+5, r25	; 0x05
    e45e:	84 83       	std	Z+4, r24	; 0x04
    e460:	85 ef       	ldi	r24, 0xF5	; 245
    e462:	99 e0       	ldi	r25, 0x09	; 9
    e464:	a0 e0       	ldi	r26, 0x00	; 0
    e466:	81 83       	std	Z+1, r24	; 0x01
    e468:	92 83       	std	Z+2, r25	; 0x02
    e46a:	a3 83       	std	Z+3, r26	; 0x03
    e46c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e470:	c9 5c       	subi	r28, 0xC9	; 201
    e472:	de 4f       	sbci	r29, 0xFE	; 254
    e474:	e8 81       	ld	r30, Y
    e476:	f9 81       	ldd	r31, Y+1	; 0x01
    e478:	c7 53       	subi	r28, 0x37	; 55
    e47a:	d1 40       	sbci	r29, 0x01	; 1
    e47c:	85 8d       	ldd	r24, Z+29	; 0x1d
    e47e:	96 8d       	ldd	r25, Z+30	; 0x1e
    e480:	a7 8d       	ldd	r26, Z+31	; 0x1f
    e482:	b0 a1       	ldd	r27, Z+32	; 0x20
    e484:	ed b7       	in	r30, 0x3d	; 61
    e486:	fe b7       	in	r31, 0x3e	; 62
    e488:	84 83       	std	Z+4, r24	; 0x04
    e48a:	95 83       	std	Z+5, r25	; 0x05
    e48c:	a6 83       	std	Z+6, r26	; 0x06
    e48e:	b7 83       	std	Z+7, r27	; 0x07
    e490:	86 ed       	ldi	r24, 0xD6	; 214
    e492:	99 e0       	ldi	r25, 0x09	; 9
    e494:	a0 e0       	ldi	r26, 0x00	; 0
    e496:	81 83       	std	Z+1, r24	; 0x01
    e498:	92 83       	std	Z+2, r25	; 0x02
    e49a:	a3 83       	std	Z+3, r26	; 0x03
    e49c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e4a0:	c9 5c       	subi	r28, 0xC9	; 201
    e4a2:	de 4f       	sbci	r29, 0xFE	; 254
    e4a4:	e8 81       	ld	r30, Y
    e4a6:	f9 81       	ldd	r31, Y+1	; 0x01
    e4a8:	c7 53       	subi	r28, 0x37	; 55
    e4aa:	d1 40       	sbci	r29, 0x01	; 1
    e4ac:	81 8d       	ldd	r24, Z+25	; 0x19
    e4ae:	92 8d       	ldd	r25, Z+26	; 0x1a
    e4b0:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e4b2:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e4b4:	02 97       	sbiw	r24, 0x02	; 2
    e4b6:	a1 09       	sbc	r26, r1
    e4b8:	b1 09       	sbc	r27, r1
    e4ba:	ed b7       	in	r30, 0x3d	; 61
    e4bc:	fe b7       	in	r31, 0x3e	; 62
    e4be:	84 83       	std	Z+4, r24	; 0x04
    e4c0:	95 83       	std	Z+5, r25	; 0x05
    e4c2:	a6 83       	std	Z+6, r26	; 0x06
    e4c4:	b7 83       	std	Z+7, r27	; 0x07
    e4c6:	87 eb       	ldi	r24, 0xB7	; 183
    e4c8:	99 e0       	ldi	r25, 0x09	; 9
    e4ca:	a0 e0       	ldi	r26, 0x00	; 0
    e4cc:	81 83       	std	Z+1, r24	; 0x01
    e4ce:	92 83       	std	Z+2, r25	; 0x02
    e4d0:	a3 83       	std	Z+3, r26	; 0x03
    e4d2:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e4d6:	c9 5c       	subi	r28, 0xC9	; 201
    e4d8:	de 4f       	sbci	r29, 0xFE	; 254
    e4da:	e8 81       	ld	r30, Y
    e4dc:	f9 81       	ldd	r31, Y+1	; 0x01
    e4de:	c7 53       	subi	r28, 0x37	; 55
    e4e0:	d1 40       	sbci	r29, 0x01	; 1
    e4e2:	85 a1       	ldd	r24, Z+37	; 0x25
    e4e4:	96 a1       	ldd	r25, Z+38	; 0x26
    e4e6:	a7 a1       	ldd	r26, Z+39	; 0x27
    e4e8:	b0 a5       	ldd	r27, Z+40	; 0x28
    e4ea:	ed b7       	in	r30, 0x3d	; 61
    e4ec:	fe b7       	in	r31, 0x3e	; 62
    e4ee:	84 83       	std	Z+4, r24	; 0x04
    e4f0:	95 83       	std	Z+5, r25	; 0x05
    e4f2:	a6 83       	std	Z+6, r26	; 0x06
    e4f4:	b7 83       	std	Z+7, r27	; 0x07
    e4f6:	88 e9       	ldi	r24, 0x98	; 152
    e4f8:	99 e0       	ldi	r25, 0x09	; 9
    e4fa:	a0 e0       	ldi	r26, 0x00	; 0
    e4fc:	81 83       	std	Z+1, r24	; 0x01
    e4fe:	92 83       	std	Z+2, r25	; 0x02
    e500:	a3 83       	std	Z+3, r26	; 0x03
    e502:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e506:	c9 5c       	subi	r28, 0xC9	; 201
    e508:	de 4f       	sbci	r29, 0xFE	; 254
    e50a:	e8 81       	ld	r30, Y
    e50c:	f9 81       	ldd	r31, Y+1	; 0x01
    e50e:	c7 53       	subi	r28, 0x37	; 55
    e510:	d1 40       	sbci	r29, 0x01	; 1
    e512:	81 a5       	ldd	r24, Z+41	; 0x29
    e514:	92 a5       	ldd	r25, Z+42	; 0x2a
    e516:	a3 a5       	ldd	r26, Z+43	; 0x2b
    e518:	b4 a5       	ldd	r27, Z+44	; 0x2c
    e51a:	ed b7       	in	r30, 0x3d	; 61
    e51c:	fe b7       	in	r31, 0x3e	; 62
    e51e:	84 83       	std	Z+4, r24	; 0x04
    e520:	95 83       	std	Z+5, r25	; 0x05
    e522:	a6 83       	std	Z+6, r26	; 0x06
    e524:	b7 83       	std	Z+7, r27	; 0x07
    e526:	89 e7       	ldi	r24, 0x79	; 121
    e528:	99 e0       	ldi	r25, 0x09	; 9
    e52a:	a0 e0       	ldi	r26, 0x00	; 0
    e52c:	81 83       	std	Z+1, r24	; 0x01
    e52e:	92 83       	std	Z+2, r25	; 0x02
    e530:	a3 83       	std	Z+3, r26	; 0x03
    e532:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e536:	c9 5c       	subi	r28, 0xC9	; 201
    e538:	de 4f       	sbci	r29, 0xFE	; 254
    e53a:	e8 81       	ld	r30, Y
    e53c:	f9 81       	ldd	r31, Y+1	; 0x01
    e53e:	c7 53       	subi	r28, 0x37	; 55
    e540:	d1 40       	sbci	r29, 0x01	; 1
    e542:	85 a5       	ldd	r24, Z+45	; 0x2d
    e544:	96 a5       	ldd	r25, Z+46	; 0x2e
    e546:	a7 a5       	ldd	r26, Z+47	; 0x2f
    e548:	b0 a9       	ldd	r27, Z+48	; 0x30
    e54a:	ed b7       	in	r30, 0x3d	; 61
    e54c:	fe b7       	in	r31, 0x3e	; 62
    e54e:	84 83       	std	Z+4, r24	; 0x04
    e550:	95 83       	std	Z+5, r25	; 0x05
    e552:	a6 83       	std	Z+6, r26	; 0x06
    e554:	b7 83       	std	Z+7, r27	; 0x07
    e556:	8a e5       	ldi	r24, 0x5A	; 90
    e558:	99 e0       	ldi	r25, 0x09	; 9
    e55a:	a0 e0       	ldi	r26, 0x00	; 0
    e55c:	81 83       	std	Z+1, r24	; 0x01
    e55e:	92 83       	std	Z+2, r25	; 0x02
    e560:	a3 83       	std	Z+3, r26	; 0x03
    e562:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(buff, label, (DWORD*)&vsn);
    e566:	ae 01       	movw	r20, r28
    e568:	41 5d       	subi	r20, 0xD1	; 209
    e56a:	5e 4f       	sbci	r21, 0xFE	; 254
    e56c:	be 01       	movw	r22, r28
    e56e:	6b 5e       	subi	r22, 0xEB	; 235
    e570:	7e 4f       	sbci	r23, 0xFE	; 254
    e572:	c8 01       	movw	r24, r16
    e574:	0e 94 d2 68 	call	0xd1a4	; 0xd1a4 <f_getlabel>
    if (res)
    e578:	89 2b       	or	r24, r25
    e57a:	69 f0       	breq	.+26     	; 0xe596 <fatfs_status+0x2a8>
    {
        printf("fatfs_status f_getlabel failed\n");
    e57c:	8a e3       	ldi	r24, 0x3A	; 58
    e57e:	99 e0       	ldi	r25, 0x09	; 9
    e580:	a0 e0       	ldi	r26, 0x00	; 0
    e582:	ed b7       	in	r30, 0x3d	; 61
    e584:	fe b7       	in	r31, 0x3e	; 62
    e586:	81 83       	std	Z+1, r24	; 0x01
    e588:	92 83       	std	Z+2, r25	; 0x02
    e58a:	a3 83       	std	Z+3, r26	; 0x03
    e58c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        return(0);
    e590:	80 e0       	ldi	r24, 0x00	; 0
    e592:	90 e0       	ldi	r25, 0x00	; 0
    e594:	a6 c0       	rjmp	.+332    	; 0xe6e2 <fatfs_status+0x3f4>
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e596:	cb 5e       	subi	r28, 0xEB	; 235
    e598:	de 4f       	sbci	r29, 0xFE	; 254
    e59a:	88 81       	ld	r24, Y
    e59c:	c5 51       	subi	r28, 0x15	; 21
    e59e:	d1 40       	sbci	r29, 0x01	; 1
    e5a0:	81 11       	cpse	r24, r1
    e5a2:	03 c0       	rjmp	.+6      	; 0xe5aa <fatfs_status+0x2bc>
    e5a4:	80 eb       	ldi	r24, 0xB0	; 176
    e5a6:	98 e0       	ldi	r25, 0x08	; 8
    e5a8:	03 c0       	rjmp	.+6      	; 0xe5b0 <fatfs_status+0x2c2>
    e5aa:	ce 01       	movw	r24, r28
    e5ac:	8b 5e       	subi	r24, 0xEB	; 235
    e5ae:	9e 4f       	sbci	r25, 0xFE	; 254
    e5b0:	ed b7       	in	r30, 0x3d	; 61
    e5b2:	fe b7       	in	r31, 0x3e	; 62
    e5b4:	95 83       	std	Z+5, r25	; 0x05
    e5b6:	84 83       	std	Z+4, r24	; 0x04
    e5b8:	8c e1       	ldi	r24, 0x1C	; 28
    e5ba:	99 e0       	ldi	r25, 0x09	; 9
    e5bc:	a0 e0       	ldi	r26, 0x00	; 0
    e5be:	81 83       	std	Z+1, r24	; 0x01
    e5c0:	92 83       	std	Z+2, r25	; 0x02
    e5c2:	a3 83       	std	Z+3, r26	; 0x03
    e5c4:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e5c8:	c1 5d       	subi	r28, 0xD1	; 209
    e5ca:	de 4f       	sbci	r29, 0xFE	; 254
    e5cc:	88 81       	ld	r24, Y
    e5ce:	99 81       	ldd	r25, Y+1	; 0x01
    e5d0:	aa 81       	ldd	r26, Y+2	; 0x02
    e5d2:	bb 81       	ldd	r27, Y+3	; 0x03
    e5d4:	cf 52       	subi	r28, 0x2F	; 47
    e5d6:	d1 40       	sbci	r29, 0x01	; 1
    e5d8:	ed b7       	in	r30, 0x3d	; 61
    e5da:	fe b7       	in	r31, 0x3e	; 62
    e5dc:	97 83       	std	Z+7, r25	; 0x07
    e5de:	86 83       	std	Z+6, r24	; 0x06
    e5e0:	b5 83       	std	Z+5, r27	; 0x05
    e5e2:	a4 83       	std	Z+4, r26	; 0x04
    e5e4:	87 ef       	ldi	r24, 0xF7	; 247
    e5e6:	98 e0       	ldi	r25, 0x08	; 8
    e5e8:	a0 e0       	ldi	r26, 0x00	; 0
    e5ea:	81 83       	std	Z+1, r24	; 0x01
    e5ec:	92 83       	std	Z+2, r25	; 0x02
    e5ee:	a3 83       	std	Z+3, r26	; 0x03
    e5f0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e5f4:	10 92 b0 1c 	sts	0x1CB0, r1	; 0x801cb0 <AccDirs+0x1>
    e5f8:	10 92 af 1c 	sts	0x1CAF, r1	; 0x801caf <AccDirs>
    e5fc:	10 92 b2 1c 	sts	0x1CB2, r1	; 0x801cb2 <AccFiles+0x1>
    e600:	10 92 b1 1c 	sts	0x1CB1, r1	; 0x801cb1 <AccFiles>
    e604:	10 92 ab 1c 	sts	0x1CAB, r1	; 0x801cab <AccSize>
    e608:	10 92 ac 1c 	sts	0x1CAC, r1	; 0x801cac <AccSize+0x1>
    e60c:	10 92 ad 1c 	sts	0x1CAD, r1	; 0x801cad <AccSize+0x2>
    e610:	10 92 ae 1c 	sts	0x1CAE, r1	; 0x801cae <AccSize+0x3>
    res = fatfs_scan_files(buff);
    e614:	c8 01       	movw	r24, r16
    e616:	58 dd       	rcall	.-1360   	; 0xe0c8 <fatfs_scan_files>
    if (res)
    e618:	89 2b       	or	r24, r25
    e61a:	19 f0       	breq	.+6      	; 0xe622 <fatfs_status+0x334>
    {
        printf("fatfs_status fatfs_scan_files failed\n");
    e61c:	81 ed       	ldi	r24, 0xD1	; 209
    e61e:	98 e0       	ldi	r25, 0x08	; 8
    e620:	af cf       	rjmp	.-162    	; 0xe580 <fatfs_status+0x292>
        return(0);
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e622:	c9 5c       	subi	r28, 0xC9	; 201
    e624:	de 4f       	sbci	r29, 0xFE	; 254
    e626:	08 81       	ld	r16, Y
    e628:	19 81       	ldd	r17, Y+1	; 0x01
    e62a:	c7 53       	subi	r28, 0x37	; 55
    e62c:	d1 40       	sbci	r29, 0x01	; 1
    e62e:	f8 01       	movw	r30, r16
    e630:	c1 84       	ldd	r12, Z+9	; 0x09
    e632:	d2 84       	ldd	r13, Z+10	; 0x0a
    e634:	e1 2c       	mov	r14, r1
    e636:	f1 2c       	mov	r15, r1
    e638:	cd 5c       	subi	r28, 0xCD	; 205
    e63a:	de 4f       	sbci	r29, 0xFE	; 254
    e63c:	68 81       	ld	r22, Y
    e63e:	79 81       	ldd	r23, Y+1	; 0x01
    e640:	8a 81       	ldd	r24, Y+2	; 0x02
    e642:	9b 81       	ldd	r25, Y+3	; 0x03
    e644:	c3 53       	subi	r28, 0x33	; 51
    e646:	d1 40       	sbci	r29, 0x01	; 1
    e648:	a7 01       	movw	r20, r14
    e64a:	96 01       	movw	r18, r12
    e64c:	0e 94 e4 e6 	call	0x1cdc8	; 0x1cdc8 <__mulsi3>
    e650:	22 e0       	ldi	r18, 0x02	; 2
    e652:	30 e0       	ldi	r19, 0x00	; 0
    e654:	40 e0       	ldi	r20, 0x00	; 0
    e656:	50 e0       	ldi	r21, 0x00	; 0
    e658:	0e 94 48 e7 	call	0x1ce90	; 0x1ce90 <__divmodsi4>
    e65c:	ed b7       	in	r30, 0x3d	; 61
    e65e:	fe b7       	in	r31, 0x3e	; 62
    e660:	20 8b       	std	Z+16, r18	; 0x10
    e662:	31 8b       	std	Z+17, r19	; 0x11
    e664:	42 8b       	std	Z+18, r20	; 0x12
    e666:	53 8b       	std	Z+19, r21	; 0x13
    e668:	f8 01       	movw	r30, r16
    e66a:	81 8d       	ldd	r24, Z+25	; 0x19
    e66c:	92 8d       	ldd	r25, Z+26	; 0x1a
    e66e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e670:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e672:	9c 01       	movw	r18, r24
    e674:	ad 01       	movw	r20, r26
    e676:	22 50       	subi	r18, 0x02	; 2
    e678:	31 09       	sbc	r19, r1
    e67a:	41 09       	sbc	r20, r1
    e67c:	51 09       	sbc	r21, r1
    e67e:	c7 01       	movw	r24, r14
    e680:	b6 01       	movw	r22, r12
    e682:	0e 94 e4 e6 	call	0x1cdc8	; 0x1cdc8 <__mulsi3>
    e686:	dc 01       	movw	r26, r24
    e688:	cb 01       	movw	r24, r22
    e68a:	b6 95       	lsr	r27
    e68c:	a7 95       	ror	r26
    e68e:	97 95       	ror	r25
    e690:	87 95       	ror	r24
    e692:	ed b7       	in	r30, 0x3d	; 61
    e694:	fe b7       	in	r31, 0x3e	; 62
    e696:	84 87       	std	Z+12, r24	; 0x0c
    e698:	95 87       	std	Z+13, r25	; 0x0d
    e69a:	a6 87       	std	Z+14, r26	; 0x0e
    e69c:	b7 87       	std	Z+15, r27	; 0x0f
    e69e:	80 91 af 1c 	lds	r24, 0x1CAF	; 0x801caf <AccDirs>
    e6a2:	90 91 b0 1c 	lds	r25, 0x1CB0	; 0x801cb0 <AccDirs+0x1>
    e6a6:	93 87       	std	Z+11, r25	; 0x0b
    e6a8:	82 87       	std	Z+10, r24	; 0x0a
    e6aa:	80 91 ab 1c 	lds	r24, 0x1CAB	; 0x801cab <AccSize>
    e6ae:	90 91 ac 1c 	lds	r25, 0x1CAC	; 0x801cac <AccSize+0x1>
    e6b2:	a0 91 ad 1c 	lds	r26, 0x1CAD	; 0x801cad <AccSize+0x2>
    e6b6:	b0 91 ae 1c 	lds	r27, 0x1CAE	; 0x801cae <AccSize+0x3>
    e6ba:	86 83       	std	Z+6, r24	; 0x06
    e6bc:	97 83       	std	Z+7, r25	; 0x07
    e6be:	a0 87       	std	Z+8, r26	; 0x08
    e6c0:	b1 87       	std	Z+9, r27	; 0x09
    e6c2:	80 91 b1 1c 	lds	r24, 0x1CB1	; 0x801cb1 <AccFiles>
    e6c6:	90 91 b2 1c 	lds	r25, 0x1CB2	; 0x801cb2 <AccFiles+0x1>
    e6ca:	95 83       	std	Z+5, r25	; 0x05
    e6cc:	84 83       	std	Z+4, r24	; 0x04
    e6ce:	84 e8       	ldi	r24, 0x84	; 132
    e6d0:	98 e0       	ldi	r25, 0x08	; 8
    e6d2:	a0 e0       	ldi	r26, 0x00	; 0
    e6d4:	81 83       	std	Z+1, r24	; 0x01
    e6d6:	92 83       	std	Z+2, r25	; 0x02
    e6d8:	a3 83       	std	Z+3, r26	; 0x03
    e6da:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        "%lu KB total disk space.\n%lu KB available.\n",
        AccFiles, AccSize, AccDirs,
        (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
        );
	return(1);
    e6de:	81 e0       	ldi	r24, 0x01	; 1
    e6e0:	90 e0       	ldi	r25, 0x00	; 0
}
    e6e2:	c8 5c       	subi	r28, 0xC8	; 200
    e6e4:	de 4f       	sbci	r29, 0xFE	; 254
    e6e6:	e8 e0       	ldi	r30, 0x08	; 8
    e6e8:	0c 94 b9 e7 	jmp	0x1cf72	; 0x1cf72 <__epilogue_restores__+0x14>

0000e6ec <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e6ec:	ab e1       	ldi	r26, 0x1B	; 27
    e6ee:	b0 e0       	ldi	r27, 0x00	; 0
    e6f0:	ec e7       	ldi	r30, 0x7C	; 124
    e6f2:	f3 e7       	ldi	r31, 0x73	; 115
    e6f4:	0c 94 a3 e7 	jmp	0x1cf46	; 0x1cf46 <__prologue_saves__+0x20>
    e6f8:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e6fa:	fc 01       	movw	r30, r24
    e6fc:	86 89       	ldd	r24, Z+22	; 0x16
    e6fe:	81 11       	cpse	r24, r1
    e700:	03 c0       	rjmp	.+6      	; 0xe708 <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e702:	89 e6       	ldi	r24, 0x69	; 105
    e704:	98 e0       	ldi	r25, 0x08	; 8
    e706:	69 c0       	rjmp	.+210    	; 0xe7da <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e708:	fd 01       	movw	r30, r26
    e70a:	80 85       	ldd	r24, Z+8	; 0x08
    e70c:	84 fd       	sbrc	r24, 4
    e70e:	02 c0       	rjmp	.+4      	; 0xe714 <fatfs_filinfo_list+0x28>
    e710:	9d e2       	ldi	r25, 0x2D	; 45
    e712:	01 c0       	rjmp	.+2      	; 0xe716 <fatfs_filinfo_list+0x2a>
    e714:	94 e4       	ldi	r25, 0x44	; 68
    e716:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e718:	80 fd       	sbrc	r24, 0
    e71a:	02 c0       	rjmp	.+4      	; 0xe720 <fatfs_filinfo_list+0x34>
    e71c:	9d e2       	ldi	r25, 0x2D	; 45
    e71e:	01 c0       	rjmp	.+2      	; 0xe722 <fatfs_filinfo_list+0x36>
    e720:	92 e5       	ldi	r25, 0x52	; 82
    e722:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e724:	81 fd       	sbrc	r24, 1
    e726:	02 c0       	rjmp	.+4      	; 0xe72c <fatfs_filinfo_list+0x40>
    e728:	9d e2       	ldi	r25, 0x2D	; 45
    e72a:	01 c0       	rjmp	.+2      	; 0xe72e <fatfs_filinfo_list+0x42>
    e72c:	98 e4       	ldi	r25, 0x48	; 72
    e72e:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e730:	82 fd       	sbrc	r24, 2
    e732:	02 c0       	rjmp	.+4      	; 0xe738 <fatfs_filinfo_list+0x4c>
    e734:	9d e2       	ldi	r25, 0x2D	; 45
    e736:	01 c0       	rjmp	.+2      	; 0xe73a <fatfs_filinfo_list+0x4e>
    e738:	93 e5       	ldi	r25, 0x53	; 83
    e73a:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e73c:	85 fd       	sbrc	r24, 5
    e73e:	02 c0       	rjmp	.+4      	; 0xe744 <fatfs_filinfo_list+0x58>
    e740:	8d e2       	ldi	r24, 0x2D	; 45
    e742:	01 c0       	rjmp	.+2      	; 0xe746 <fatfs_filinfo_list+0x5a>
    e744:	81 e4       	ldi	r24, 0x41	; 65
    e746:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e748:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e74a:	fd 01       	movw	r30, r26
    e74c:	24 81       	ldd	r18, Z+4	; 0x04
    e74e:	35 81       	ldd	r19, Z+5	; 0x05
    e750:	46 81       	ldd	r20, Z+6	; 0x06
    e752:	57 81       	ldd	r21, Z+7	; 0x07
    e754:	cd 01       	movw	r24, r26
    e756:	46 96       	adiw	r24, 0x16	; 22
    e758:	ed b7       	in	r30, 0x3d	; 61
    e75a:	fe b7       	in	r31, 0x3e	; 62
    e75c:	95 8b       	std	Z+21, r25	; 0x15
    e75e:	84 8b       	std	Z+20, r24	; 0x14
    e760:	8d 91       	ld	r24, X+
    e762:	9d 91       	ld	r25, X+
    e764:	0d 90       	ld	r0, X+
    e766:	bc 91       	ld	r27, X
    e768:	a0 2d       	mov	r26, r0
    e76a:	80 8b       	std	Z+16, r24	; 0x10
    e76c:	91 8b       	std	Z+17, r25	; 0x11
    e76e:	a2 8b       	std	Z+18, r26	; 0x12
    e770:	b3 8b       	std	Z+19, r27	; 0x13
    e772:	ca 01       	movw	r24, r20
    e774:	45 e0       	ldi	r20, 0x05	; 5
    e776:	96 95       	lsr	r25
    e778:	87 95       	ror	r24
    e77a:	4a 95       	dec	r20
    e77c:	e1 f7       	brne	.-8      	; 0xe776 <fatfs_filinfo_list+0x8a>
    e77e:	8f 73       	andi	r24, 0x3F	; 63
    e780:	99 27       	eor	r25, r25
    e782:	97 87       	std	Z+15, r25	; 0x0f
    e784:	86 87       	std	Z+14, r24	; 0x0e
    e786:	85 2f       	mov	r24, r21
    e788:	86 95       	lsr	r24
    e78a:	86 95       	lsr	r24
    e78c:	86 95       	lsr	r24
    e78e:	84 87       	std	Z+12, r24	; 0x0c
    e790:	15 86       	std	Z+13, r1	; 0x0d
    e792:	c9 01       	movw	r24, r18
    e794:	8f 71       	andi	r24, 0x1F	; 31
    e796:	99 27       	eor	r25, r25
    e798:	93 87       	std	Z+11, r25	; 0x0b
    e79a:	82 87       	std	Z+10, r24	; 0x0a
    e79c:	c9 01       	movw	r24, r18
    e79e:	55 e0       	ldi	r21, 0x05	; 5
    e7a0:	96 95       	lsr	r25
    e7a2:	87 95       	ror	r24
    e7a4:	5a 95       	dec	r21
    e7a6:	e1 f7       	brne	.-8      	; 0xe7a0 <fatfs_filinfo_list+0xb4>
    e7a8:	8f 70       	andi	r24, 0x0F	; 15
    e7aa:	99 27       	eor	r25, r25
    e7ac:	91 87       	std	Z+9, r25	; 0x09
    e7ae:	80 87       	std	Z+8, r24	; 0x08
    e7b0:	23 2f       	mov	r18, r19
    e7b2:	33 27       	eor	r19, r19
    e7b4:	26 95       	lsr	r18
    e7b6:	24 54       	subi	r18, 0x44	; 68
    e7b8:	38 4f       	sbci	r19, 0xF8	; 248
    e7ba:	37 83       	std	Z+7, r19	; 0x07
    e7bc:	26 83       	std	Z+6, r18	; 0x06
    e7be:	ce 01       	movw	r24, r28
    e7c0:	46 96       	adiw	r24, 0x16	; 22
    e7c2:	95 83       	std	Z+5, r25	; 0x05
    e7c4:	84 83       	std	Z+4, r24	; 0x04
    e7c6:	87 e4       	ldi	r24, 0x47	; 71
    e7c8:	98 e0       	ldi	r25, 0x08	; 8
    e7ca:	a0 e0       	ldi	r26, 0x00	; 0
    e7cc:	81 83       	std	Z+1, r24	; 0x01
    e7ce:	92 83       	std	Z+2, r25	; 0x02
    e7d0:	a3 83       	std	Z+3, r26	; 0x03
    e7d2:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e7d6:	85 e4       	ldi	r24, 0x45	; 69
    e7d8:	98 e0       	ldi	r25, 0x08	; 8
    e7da:	a0 e0       	ldi	r26, 0x00	; 0
    e7dc:	ed b7       	in	r30, 0x3d	; 61
    e7de:	fe b7       	in	r31, 0x3e	; 62
    e7e0:	81 83       	std	Z+1, r24	; 0x01
    e7e2:	92 83       	std	Z+2, r25	; 0x02
    e7e4:	a3 83       	std	Z+3, r26	; 0x03
    e7e6:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
}
    e7ea:	6b 96       	adiw	r28, 0x1b	; 27
    e7ec:	e2 e0       	ldi	r30, 0x02	; 2
    e7ee:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

0000e7f2 <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e7f2:	00 d0       	rcall	.+0      	; 0xe7f4 <fatfs_help+0x2>
    e7f4:	1f 92       	push	r1
    if(full)
    e7f6:	89 2b       	or	r24, r25
    e7f8:	19 f0       	breq	.+6      	; 0xe800 <fatfs_help+0xe>
    {
        printf(
    e7fa:	8b e2       	ldi	r24, 0x2B	; 43
    e7fc:	9b e0       	ldi	r25, 0x0B	; 11
    e7fe:	02 c0       	rjmp	.+4      	; 0xe804 <fatfs_help+0x12>
            "\n"
            );
    }
	else
	{
		printf("fatfs     help\n");
    e800:	8b e1       	ldi	r24, 0x1B	; 27
    e802:	9b e0       	ldi	r25, 0x0B	; 11
    e804:	a0 e0       	ldi	r26, 0x00	; 0
    e806:	ed b7       	in	r30, 0x3d	; 61
    e808:	fe b7       	in	r31, 0x3e	; 62
    e80a:	81 83       	std	Z+1, r24	; 0x01
    e80c:	92 83       	std	Z+2, r25	; 0x02
    e80e:	a3 83       	std	Z+3, r26	; 0x03
    e810:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
	}

}
    e814:	0f 90       	pop	r0
    e816:	0f 90       	pop	r0
    e818:	0f 90       	pop	r0
    e81a:	08 95       	ret

0000e81c <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  1 on success or 0 on error
MEMSPACE
int fatfs_ls(char *name)
{
    e81c:	a6 e5       	ldi	r26, 0x56	; 86
    e81e:	b2 e0       	ldi	r27, 0x02	; 2
    e820:	e4 e1       	ldi	r30, 0x14	; 20
    e822:	f4 e7       	ldi	r31, 0x74	; 116
    e824:	0c 94 9b e7 	jmp	0x1cf36	; 0x1cf36 <__prologue_saves__+0x10>
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[MAX_NAME_LEN+1];

	memset(buff,0,sizeof(buff)-1);
    e828:	8e 01       	movw	r16, r28
    e82a:	0e 5d       	subi	r16, 0xDE	; 222
    e82c:	1e 4f       	sbci	r17, 0xFE	; 254
    e82e:	20 e0       	ldi	r18, 0x00	; 0
    e830:	31 e0       	ldi	r19, 0x01	; 1
    e832:	f8 01       	movw	r30, r16
    e834:	a9 01       	movw	r20, r18
    e836:	11 92       	st	Z+, r1
    e838:	41 50       	subi	r20, 0x01	; 1
    e83a:	50 40       	sbci	r21, 0x00	; 0
    e83c:	e1 f7       	brne	.-8      	; 0xe836 <fatfs_ls+0x1a>

    if(!name || !*name)
    e83e:	00 97       	sbiw	r24, 0x00	; 0
    e840:	21 f0       	breq	.+8      	; 0xe84a <fatfs_ls+0x2e>
    e842:	fc 01       	movw	r30, r24
    e844:	20 81       	ld	r18, Z
    e846:	21 11       	cpse	r18, r1
    e848:	03 c0       	rjmp	.+6      	; 0xe850 <fatfs_ls+0x34>
    {
        strcpy(buff,".");
    e84a:	66 ee       	ldi	r22, 0xE6	; 230
    e84c:	72 e1       	ldi	r23, 0x12	; 18
    e84e:	01 c0       	rjmp	.+2      	; 0xe852 <fatfs_ls+0x36>
    }
    else
    {
        strcpy(buff,name);
    e850:	bc 01       	movw	r22, r24
    e852:	c8 01       	movw	r24, r16
    e854:	0e 94 b2 31 	call	0x6364	; 0x6364 <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e858:	ed b7       	in	r30, 0x3d	; 61
    e85a:	fe b7       	in	r31, 0x3e	; 62
    e85c:	15 83       	std	Z+5, r17	; 0x05
    e85e:	04 83       	std	Z+4, r16	; 0x04
    e860:	8d e0       	ldi	r24, 0x0D	; 13
    e862:	9b e0       	ldi	r25, 0x0B	; 11
    e864:	a0 e0       	ldi	r26, 0x00	; 0
    e866:	81 83       	std	Z+1, r24	; 0x01
    e868:	92 83       	std	Z+2, r25	; 0x02
    e86a:	a3 83       	std	Z+3, r26	; 0x03
    e86c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

    res = f_opendir(&dirs, buff);
    e870:	b8 01       	movw	r22, r16
    e872:	ce 01       	movw	r24, r28
    e874:	8d 5d       	subi	r24, 0xDD	; 221
    e876:	9d 4f       	sbci	r25, 0xFD	; 253
    e878:	0e 94 98 63 	call	0xc730	; 0xc730 <f_opendir>
    if (res != FR_OK) 
    e87c:	89 2b       	or	r24, r25
    e87e:	09 f0       	breq	.+2      	; 0xe882 <fatfs_ls+0x66>
    e880:	96 c0       	rjmp	.+300    	; 0xe9ae <fatfs_ls+0x192>
	{ 
		return(0); 
	}
    p1 = s1 = s2 = 0;
    e882:	cf 5a       	subi	r28, 0xAF	; 175
    e884:	dd 4f       	sbci	r29, 0xFD	; 253
    e886:	18 82       	st	Y, r1
    e888:	19 82       	std	Y+1, r1	; 0x01
    e88a:	1a 82       	std	Y+2, r1	; 0x02
    e88c:	1b 82       	std	Y+3, r1	; 0x03
    e88e:	c1 55       	subi	r28, 0x51	; 81
    e890:	d2 40       	sbci	r29, 0x02	; 2
    e892:	a1 2c       	mov	r10, r1
    e894:	b1 2c       	mov	r11, r1
    e896:	c1 2c       	mov	r12, r1
    e898:	d1 2c       	mov	r13, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e89a:	be 01       	movw	r22, r28
    e89c:	64 5f       	subi	r22, 0xF4	; 244
    e89e:	7f 4f       	sbci	r23, 0xFF	; 255
    e8a0:	ce 01       	movw	r24, r28
    e8a2:	8d 5d       	subi	r24, 0xDD	; 221
    e8a4:	9d 4f       	sbci	r25, 0xFD	; 253
    e8a6:	0e 94 1e 64 	call	0xc83c	; 0xc83c <f_readdir>
    e8aa:	7c 01       	movw	r14, r24
        if (res != FR_OK) 
    e8ac:	89 2b       	or	r24, r25
    e8ae:	49 f5       	brne	.+82     	; 0xe902 <fatfs_ls+0xe6>
			break;
		if(!fno.fname[0]) 
    e8b0:	8a a1       	ldd	r24, Y+34	; 0x22
    e8b2:	88 23       	and	r24, r24
    e8b4:	31 f1       	breq	.+76     	; 0xe902 <fatfs_ls+0xe6>
			break;
        if (fno.fattrib & AM_DIR)
    e8b6:	8c 89       	ldd	r24, Y+20	; 0x14
    e8b8:	84 ff       	sbrs	r24, 4
    e8ba:	04 c0       	rjmp	.+8      	; 0xe8c4 <fatfs_ls+0xa8>
        {
            s2++;
    e8bc:	ff ef       	ldi	r31, 0xFF	; 255
    e8be:	af 1a       	sub	r10, r31
    e8c0:	bf 0a       	sbc	r11, r31
    e8c2:	1b c0       	rjmp	.+54     	; 0xe8fa <fatfs_ls+0xde>
        }
        else
        {
            s1++; p1 += fno.fsize;
    e8c4:	4f ef       	ldi	r20, 0xFF	; 255
    e8c6:	c4 1a       	sub	r12, r20
    e8c8:	d4 0a       	sbc	r13, r20
    e8ca:	4c 85       	ldd	r20, Y+12	; 0x0c
    e8cc:	5d 85       	ldd	r21, Y+13	; 0x0d
    e8ce:	6e 85       	ldd	r22, Y+14	; 0x0e
    e8d0:	7f 85       	ldd	r23, Y+15	; 0x0f
    e8d2:	cf 5a       	subi	r28, 0xAF	; 175
    e8d4:	dd 4f       	sbci	r29, 0xFD	; 253
    e8d6:	88 81       	ld	r24, Y
    e8d8:	99 81       	ldd	r25, Y+1	; 0x01
    e8da:	aa 81       	ldd	r26, Y+2	; 0x02
    e8dc:	bb 81       	ldd	r27, Y+3	; 0x03
    e8de:	c1 55       	subi	r28, 0x51	; 81
    e8e0:	d2 40       	sbci	r29, 0x02	; 2
    e8e2:	84 0f       	add	r24, r20
    e8e4:	95 1f       	adc	r25, r21
    e8e6:	a6 1f       	adc	r26, r22
    e8e8:	b7 1f       	adc	r27, r23
    e8ea:	cf 5a       	subi	r28, 0xAF	; 175
    e8ec:	dd 4f       	sbci	r29, 0xFD	; 253
    e8ee:	88 83       	st	Y, r24
    e8f0:	99 83       	std	Y+1, r25	; 0x01
    e8f2:	aa 83       	std	Y+2, r26	; 0x02
    e8f4:	bb 83       	std	Y+3, r27	; 0x03
    e8f6:	c1 55       	subi	r28, 0x51	; 81
    e8f8:	d2 40       	sbci	r29, 0x02	; 2
        }
        fatfs_filinfo_list(&fno);
    e8fa:	ce 01       	movw	r24, r28
    e8fc:	0c 96       	adiw	r24, 0x0c	; 12
    e8fe:	f6 de       	rcall	.-532    	; 0xe6ec <fatfs_filinfo_list>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e900:	cc cf       	rjmp	.-104    	; 0xe89a <fatfs_ls+0x7e>
	f_closedir(&dirs);
    e902:	ce 01       	movw	r24, r28
    e904:	8d 5d       	subi	r24, 0xDD	; 221
    e906:	9d 4f       	sbci	r25, 0xFD	; 253
    e908:	0e 94 09 64 	call	0xc812	; 0xc812 <f_closedir>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e90c:	ed b7       	in	r30, 0x3d	; 61
    e90e:	fe b7       	in	r31, 0x3e	; 62
    e910:	b3 86       	std	Z+11, r11	; 0x0b
    e912:	a2 86       	std	Z+10, r10	; 0x0a
    e914:	cf 5a       	subi	r28, 0xAF	; 175
    e916:	dd 4f       	sbci	r29, 0xFD	; 253
    e918:	88 81       	ld	r24, Y
    e91a:	99 81       	ldd	r25, Y+1	; 0x01
    e91c:	aa 81       	ldd	r26, Y+2	; 0x02
    e91e:	bb 81       	ldd	r27, Y+3	; 0x03
    e920:	c1 55       	subi	r28, 0x51	; 81
    e922:	d2 40       	sbci	r29, 0x02	; 2
    e924:	86 83       	std	Z+6, r24	; 0x06
    e926:	97 83       	std	Z+7, r25	; 0x07
    e928:	a0 87       	std	Z+8, r26	; 0x08
    e92a:	b1 87       	std	Z+9, r27	; 0x09
    e92c:	d5 82       	std	Z+5, r13	; 0x05
    e92e:	c4 82       	std	Z+4, r12	; 0x04
    e930:	84 ee       	ldi	r24, 0xE4	; 228
    e932:	9a e0       	ldi	r25, 0x0A	; 10
    e934:	a0 e0       	ldi	r26, 0x00	; 0
    e936:	81 83       	std	Z+1, r24	; 0x01
    e938:	92 83       	std	Z+2, r25	; 0x02
    e93a:	a3 83       	std	Z+3, r26	; 0x03
    e93c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e940:	ae 01       	movw	r20, r28
    e942:	4b 5a       	subi	r20, 0xAB	; 171
    e944:	5d 4f       	sbci	r21, 0xFD	; 253
    e946:	be 01       	movw	r22, r28
    e948:	6f 5a       	subi	r22, 0xAF	; 175
    e94a:	7d 4f       	sbci	r23, 0xFD	; 253
    e94c:	c8 01       	movw	r24, r16
    e94e:	0e 94 a0 64 	call	0xc940	; 0xc940 <f_getfree>
    e952:	89 2b       	or	r24, r25
    e954:	31 f5       	brne	.+76     	; 0xe9a2 <fatfs_ls+0x186>
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e956:	cb 5a       	subi	r28, 0xAB	; 171
    e958:	dd 4f       	sbci	r29, 0xFD	; 253
    e95a:	e8 81       	ld	r30, Y
    e95c:	f9 81       	ldd	r31, Y+1	; 0x01
    e95e:	c5 55       	subi	r28, 0x55	; 85
    e960:	d2 40       	sbci	r29, 0x02	; 2
    e962:	a1 85       	ldd	r26, Z+9	; 0x09
    e964:	b2 85       	ldd	r27, Z+10	; 0x0a
    e966:	cf 5a       	subi	r28, 0xAF	; 175
    e968:	dd 4f       	sbci	r29, 0xFD	; 253
    e96a:	28 81       	ld	r18, Y
    e96c:	39 81       	ldd	r19, Y+1	; 0x01
    e96e:	4a 81       	ldd	r20, Y+2	; 0x02
    e970:	5b 81       	ldd	r21, Y+3	; 0x03
    e972:	c1 55       	subi	r28, 0x51	; 81
    e974:	d2 40       	sbci	r29, 0x02	; 2
    e976:	0e 94 73 e7 	call	0x1cee6	; 0x1cee6 <__muluhisi3>
    e97a:	22 e0       	ldi	r18, 0x02	; 2
    e97c:	30 e0       	ldi	r19, 0x00	; 0
    e97e:	40 e0       	ldi	r20, 0x00	; 0
    e980:	50 e0       	ldi	r21, 0x00	; 0
    e982:	0e 94 48 e7 	call	0x1ce90	; 0x1ce90 <__divmodsi4>
    e986:	ed b7       	in	r30, 0x3d	; 61
    e988:	fe b7       	in	r31, 0x3e	; 62
    e98a:	24 83       	std	Z+4, r18	; 0x04
    e98c:	35 83       	std	Z+5, r19	; 0x05
    e98e:	46 83       	std	Z+6, r20	; 0x06
    e990:	57 83       	std	Z+7, r21	; 0x07
    e992:	8f ec       	ldi	r24, 0xCF	; 207
    e994:	9a e0       	ldi	r25, 0x0A	; 10
    e996:	a0 e0       	ldi	r26, 0x00	; 0
    e998:	81 83       	std	Z+1, r24	; 0x01
    e99a:	92 83       	std	Z+2, r25	; 0x02
    e99c:	a3 83       	std	Z+3, r26	; 0x03
    e99e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
	if(res)
    e9a2:	e1 14       	cp	r14, r1
    e9a4:	f1 04       	cpc	r15, r1
    e9a6:	31 f4       	brne	.+12     	; 0xe9b4 <fatfs_ls+0x198>
		return(-1);
	return(1);
    e9a8:	81 e0       	ldi	r24, 0x01	; 1
    e9aa:	90 e0       	ldi	r25, 0x00	; 0
    e9ac:	05 c0       	rjmp	.+10     	; 0xe9b8 <fatfs_ls+0x19c>
    printf("Listing:[%s]\n",buff);

    res = f_opendir(&dirs, buff);
    if (res != FR_OK) 
	{ 
		return(0); 
    e9ae:	80 e0       	ldi	r24, 0x00	; 0
    e9b0:	90 e0       	ldi	r25, 0x00	; 0
    e9b2:	02 c0       	rjmp	.+4      	; 0xe9b8 <fatfs_ls+0x19c>
	f_closedir(&dirs);
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
	if(res)
		return(-1);
    e9b4:	8f ef       	ldi	r24, 0xFF	; 255
    e9b6:	9f ef       	ldi	r25, 0xFF	; 255
	return(1);
}
    e9b8:	ca 5a       	subi	r28, 0xAA	; 170
    e9ba:	dd 4f       	sbci	r29, 0xFD	; 253
    e9bc:	ea e0       	ldi	r30, 0x0A	; 10
    e9be:	0c 94 b7 e7 	jmp	0x1cf6e	; 0x1cf6e <__epilogue_restores__+0x10>

0000e9c2 <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e9c2:	ef 92       	push	r14
    e9c4:	ff 92       	push	r15
    e9c6:	0f 93       	push	r16
    e9c8:	1f 93       	push	r17
    e9ca:	cf 93       	push	r28
    e9cc:	df 93       	push	r29
    e9ce:	00 d0       	rcall	.+0      	; 0xe9d0 <fatfs_tests+0xe>
    e9d0:	1f 92       	push	r1
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind];
    e9d2:	fb 01       	movw	r30, r22
    e9d4:	20 81       	ld	r18, Z
    e9d6:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    e9d8:	21 15       	cp	r18, r1
    e9da:	31 05       	cpc	r19, r1
    e9dc:	19 f4       	brne	.+6      	; 0xe9e4 <fatfs_tests+0x22>
        return(0);
    e9de:	80 e0       	ldi	r24, 0x00	; 0
    e9e0:	90 e0       	ldi	r25, 0x00	; 0
    e9e2:	5a c0       	rjmp	.+180    	; 0xea98 <fatfs_tests+0xd6>
    e9e4:	eb 01       	movw	r28, r22
    e9e6:	7c 01       	movw	r14, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCHI(ptr,"fatfs") )
    e9e8:	62 ed       	ldi	r22, 0xD2	; 210
    e9ea:	78 e0       	ldi	r23, 0x08	; 8
    e9ec:	c9 01       	movw	r24, r18
    e9ee:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
    e9f2:	89 2b       	or	r24, r25
    e9f4:	a1 f3       	breq	.-24     	; 0xe9de <fatfs_tests+0x1c>
    {
        ptr = argv[++ind];
    e9f6:	0a 81       	ldd	r16, Y+2	; 0x02
    e9f8:	1b 81       	ldd	r17, Y+3	; 0x03
        if ( !ptr || MATCHI(ptr,"help") )
    e9fa:	01 15       	cp	r16, r1
    e9fc:	11 05       	cpc	r17, r1
    e9fe:	59 f4       	brne	.+22     	; 0xea16 <fatfs_tests+0x54>
MEMSPACE
void fatfs_help( int full)
{
    if(full)
    {
        printf(
    ea00:	8b e2       	ldi	r24, 0x2B	; 43
    ea02:	9b e0       	ldi	r25, 0x0B	; 11
    ea04:	a0 e0       	ldi	r26, 0x00	; 0
    ea06:	ed b7       	in	r30, 0x3d	; 61
    ea08:	fe b7       	in	r31, 0x3e	; 62
    ea0a:	81 83       	std	Z+1, r24	; 0x01
    ea0c:	92 83       	std	Z+2, r25	; 0x02
    ea0e:	a3 83       	std	Z+3, r26	; 0x03
    ea10:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    ea14:	2f c0       	rjmp	.+94     	; 0xea74 <fatfs_tests+0xb2>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCHI(ptr,"fatfs") )
    {
        ptr = argv[++ind];
        if ( !ptr || MATCHI(ptr,"help") )
    ea16:	62 e6       	ldi	r22, 0x62	; 98
    ea18:	76 e1       	ldi	r23, 0x16	; 22
    ea1a:	c8 01       	movw	r24, r16
    ea1c:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
    ea20:	89 2b       	or	r24, r25
    ea22:	71 f7       	brne	.-36     	; 0xea00 <fatfs_tests+0x3e>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    ea24:	68 ed       	ldi	r22, 0xD8	; 216
    ea26:	78 e0       	ldi	r23, 0x08	; 8
    ea28:	c8 01       	movw	r24, r16
    ea2a:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
    ea2e:	89 2b       	or	r24, r25
    ea30:	21 f0       	breq	.+8      	; 0xea3a <fatfs_tests+0x78>
    ea32:	24 96       	adiw	r28, 0x04	; 4
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    ea34:	02 e0       	ldi	r16, 0x02	; 2
    ea36:	10 e0       	ldi	r17, 0x00	; 0
    ea38:	0f c0       	rjmp	.+30     	; 0xea58 <fatfs_tests+0x96>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    ea3a:	66 ec       	ldi	r22, 0xC6	; 198
    ea3c:	7b e0       	ldi	r23, 0x0B	; 11
    ea3e:	c8 01       	movw	r24, r16
    ea40:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
    ea44:	89 2b       	or	r24, r25
    ea46:	a9 f7       	brne	.-22     	; 0xea32 <fatfs_tests+0x70>
    ea48:	18 c0       	rjmp	.+48     	; 0xea7a <fatfs_tests+0xb8>
    {
        int i;
        int args = 0;
        for(i=ind+1;i<argc;++i)
        {
            if(fatfs_ls(argv[i]) == 0)
    ea4a:	89 91       	ld	r24, Y+
    ea4c:	99 91       	ld	r25, Y+
    ea4e:	e6 de       	rcall	.-564    	; 0xe81c <fatfs_ls>
    ea50:	89 2b       	or	r24, r25
    ea52:	69 f0       	breq	.+26     	; 0xea6e <fatfs_tests+0xac>

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    {
        int i;
        int args = 0;
        for(i=ind+1;i<argc;++i)
    ea54:	0f 5f       	subi	r16, 0xFF	; 255
    ea56:	1f 4f       	sbci	r17, 0xFF	; 255
    ea58:	0e 15       	cp	r16, r14
    ea5a:	1f 05       	cpc	r17, r15
    ea5c:	b4 f3       	brlt	.-20     	; 0xea4a <fatfs_tests+0x88>
			{
				return(-1);
			}
            ++args;
        }
        if(!args)
    ea5e:	02 30       	cpi	r16, 0x02	; 2
    ea60:	11 05       	cpc	r17, r1
    ea62:	41 f4       	brne	.+16     	; 0xea74 <fatfs_tests+0xb2>
        {
            if(fatfs_ls("") == 0)
    ea64:	8e e0       	ldi	r24, 0x0E	; 14
    ea66:	9c e0       	ldi	r25, 0x0C	; 12
    ea68:	d9 de       	rcall	.-590    	; 0xe81c <fatfs_ls>
        }
        return(1);
    }
    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    {
        if(fatfs_status("/")== 0)
    ea6a:	89 2b       	or	r24, r25
    ea6c:	19 f4       	brne	.+6      	; 0xea74 <fatfs_tests+0xb2>
        int args = 0;
        for(i=ind+1;i<argc;++i)
        {
            if(fatfs_ls(argv[i]) == 0)
			{
				return(-1);
    ea6e:	8f ef       	ldi	r24, 0xFF	; 255
    ea70:	9f ef       	ldi	r25, 0xFF	; 255
    ea72:	12 c0       	rjmp	.+36     	; 0xea98 <fatfs_tests+0xd6>
            if(fatfs_ls("") == 0)
			{
				return(-1);
			}
        }
        return(1);
    ea74:	81 e0       	ldi	r24, 0x01	; 1
    ea76:	90 e0       	ldi	r25, 0x00	; 0
    ea78:	0f c0       	rjmp	.+30     	; 0xea98 <fatfs_tests+0xd6>
    }
    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    ea7a:	97 01       	movw	r18, r14
    ea7c:	42 e0       	ldi	r20, 0x02	; 2
    ea7e:	50 e0       	ldi	r21, 0x00	; 0
    ea80:	6b ed       	ldi	r22, 0xDB	; 219
    ea82:	78 e0       	ldi	r23, 0x08	; 8
    ea84:	c8 01       	movw	r24, r16
    ea86:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <MATCHARGS>
    ea8a:	89 2b       	or	r24, r25
    ea8c:	09 f4       	brne	.+2      	; 0xea90 <fatfs_tests+0xce>
    ea8e:	a7 cf       	rjmp	.-178    	; 0xe9de <fatfs_tests+0x1c>
    {
        if(fatfs_status("/")== 0)
    ea90:	86 ea       	ldi	r24, 0xA6	; 166
    ea92:	98 e0       	ldi	r25, 0x08	; 8
    ea94:	2c dc       	rcall	.-1960   	; 0xe2ee <fatfs_status>
    ea96:	e9 cf       	rjmp	.-46     	; 0xea6a <fatfs_tests+0xa8>
        return(1);
    }
#endif // FATFS_UTILS_FULL

    return(0);
}
    ea98:	cd b7       	in	r28, 0x3d	; 61
    ea9a:	de b7       	in	r29, 0x3e	; 62
    ea9c:	23 96       	adiw	r28, 0x03	; 3
    ea9e:	e6 e0       	ldi	r30, 0x06	; 6
    eaa0:	0c 94 bb e7 	jmp	0x1cf76	; 0x1cf76 <__epilogue_restores__+0x18>

0000eaa4 <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    eaa4:	8f 92       	push	r8
    eaa6:	9f 92       	push	r9
    eaa8:	af 92       	push	r10
    eaaa:	bf 92       	push	r11
    eaac:	ef 92       	push	r14
    eaae:	ff 92       	push	r15
    eab0:	0f 93       	push	r16
    eab2:	1f 93       	push	r17
    eab4:	cf 93       	push	r28
    eab6:	df 93       	push	r29
    eab8:	00 d0       	rcall	.+0      	; 0xeaba <fatfs_getc+0x16>
    eaba:	1f 92       	push	r1
    eabc:	cd b7       	in	r28, 0x3d	; 61
    eabe:	de b7       	in	r29, 0x3e	; 62
    eac0:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    eac4:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    eac8:	00 97       	sbiw	r24, 0x00	; 0
    eaca:	39 f4       	brne	.+14     	; 0xeada <fatfs_getc+0x36>
    eacc:	89 e0       	ldi	r24, 0x09	; 9
    eace:	90 e0       	ldi	r25, 0x00	; 0
    ead0:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    ead4:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    ead8:	2f c0       	rjmp	.+94     	; 0xeb38 <fatfs_getc+0x94>
    eada:	fc 01       	movw	r30, r24
    eadc:	e4 84       	ldd	r14, Z+12	; 0x0c
    eade:	f5 84       	ldd	r15, Z+13	; 0x0d
    eae0:	e1 14       	cp	r14, r1
    eae2:	f1 04       	cpc	r15, r1
    eae4:	99 f3       	breq	.-26     	; 0xeacc <fatfs_getc+0x28>
    eae6:	8c 01       	movw	r16, r24
    eae8:	9e 01       	movw	r18, r28
    eaea:	2f 5f       	subi	r18, 0xFF	; 255
    eaec:	3f 4f       	sbci	r19, 0xFF	; 255
    eaee:	41 e0       	ldi	r20, 0x01	; 1
    eaf0:	50 e0       	ldi	r21, 0x00	; 0
    eaf2:	be 01       	movw	r22, r28
    eaf4:	6d 5f       	subi	r22, 0xFD	; 253
    eaf6:	7f 4f       	sbci	r23, 0xFF	; 255
    eaf8:	c7 01       	movw	r24, r14
    eafa:	0e 94 d1 5b 	call	0xb7a2	; 0xb7a2 <f_read>
    eafe:	00 97       	sbiw	r24, 0x00	; 0
    eb00:	31 f4       	brne	.+12     	; 0xeb0e <fatfs_getc+0x6a>
    eb02:	29 81       	ldd	r18, Y+1	; 0x01
    eb04:	3a 81       	ldd	r19, Y+2	; 0x02
    eb06:	21 30       	cpi	r18, 0x01	; 1
    eb08:	31 05       	cpc	r19, r1
    eb0a:	c9 f0       	breq	.+50     	; 0xeb3e <fatfs_getc+0x9a>
    eb0c:	03 c0       	rjmp	.+6      	; 0xeb14 <fatfs_getc+0x70>
    eb0e:	84 31       	cpi	r24, 0x14	; 20
    eb10:	91 05       	cpc	r25, r1
    eb12:	40 f4       	brcc	.+16     	; 0xeb24 <fatfs_getc+0x80>
    eb14:	fc 01       	movw	r30, r24
    eb16:	ec 56       	subi	r30, 0x6C	; 108
    eb18:	f4 4f       	sbci	r31, 0xF4	; 244
    eb1a:	80 81       	ld	r24, Z
    eb1c:	08 2e       	mov	r0, r24
    eb1e:	00 0c       	add	r0, r0
    eb20:	99 0b       	sbc	r25, r25
    eb22:	02 c0       	rjmp	.+4      	; 0xeb28 <fatfs_getc+0x84>
    eb24:	83 e2       	ldi	r24, 0x23	; 35
    eb26:	90 e0       	ldi	r25, 0x00	; 0
    eb28:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    eb2c:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    eb30:	f8 01       	movw	r30, r16
    eb32:	83 81       	ldd	r24, Z+3	; 0x03
    eb34:	80 62       	ori	r24, 0x20	; 32
    eb36:	83 83       	std	Z+3, r24	; 0x03
    eb38:	8f ef       	ldi	r24, 0xFF	; 255
    eb3a:	9f ef       	ldi	r25, 0xFF	; 255
    eb3c:	28 c0       	rjmp	.+80     	; 0xeb8e <fatfs_getc+0xea>
    eb3e:	8b 81       	ldd	r24, Y+3	; 0x03
    eb40:	8d 30       	cpi	r24, 0x0D	; 13
    eb42:	01 f5       	brne	.+64     	; 0xeb84 <fatfs_getc+0xe0>
    eb44:	f7 01       	movw	r30, r14
    eb46:	80 88       	ldd	r8, Z+16	; 0x10
    eb48:	91 88       	ldd	r9, Z+17	; 0x11
    eb4a:	a2 88       	ldd	r10, Z+18	; 0x12
    eb4c:	b3 88       	ldd	r11, Z+19	; 0x13
    eb4e:	9e 01       	movw	r18, r28
    eb50:	2f 5f       	subi	r18, 0xFF	; 255
    eb52:	3f 4f       	sbci	r19, 0xFF	; 255
    eb54:	41 e0       	ldi	r20, 0x01	; 1
    eb56:	50 e0       	ldi	r21, 0x00	; 0
    eb58:	be 01       	movw	r22, r28
    eb5a:	6d 5f       	subi	r22, 0xFD	; 253
    eb5c:	7f 4f       	sbci	r23, 0xFF	; 255
    eb5e:	c7 01       	movw	r24, r14
    eb60:	0e 94 d1 5b 	call	0xb7a2	; 0xb7a2 <f_read>
    eb64:	89 2b       	or	r24, r25
    eb66:	89 f4       	brne	.+34     	; 0xeb8a <fatfs_getc+0xe6>
    eb68:	89 81       	ldd	r24, Y+1	; 0x01
    eb6a:	9a 81       	ldd	r25, Y+2	; 0x02
    eb6c:	01 97       	sbiw	r24, 0x01	; 1
    eb6e:	69 f4       	brne	.+26     	; 0xeb8a <fatfs_getc+0xe6>
    eb70:	8b 81       	ldd	r24, Y+3	; 0x03
    eb72:	8a 30       	cpi	r24, 0x0A	; 10
    eb74:	31 f0       	breq	.+12     	; 0xeb82 <fatfs_getc+0xde>
    eb76:	b5 01       	movw	r22, r10
    eb78:	a4 01       	movw	r20, r8
    eb7a:	c7 01       	movw	r24, r14
    eb7c:	0e 94 dd 60 	call	0xc1ba	; 0xc1ba <f_lseek>
    eb80:	04 c0       	rjmp	.+8      	; 0xeb8a <fatfs_getc+0xe6>
    eb82:	8b 83       	std	Y+3, r24	; 0x03
    eb84:	8b 81       	ldd	r24, Y+3	; 0x03
    eb86:	90 e0       	ldi	r25, 0x00	; 0
    eb88:	02 c0       	rjmp	.+4      	; 0xeb8e <fatfs_getc+0xea>
    eb8a:	8a e0       	ldi	r24, 0x0A	; 10
    eb8c:	90 e0       	ldi	r25, 0x00	; 0
    eb8e:	0f 90       	pop	r0
    eb90:	0f 90       	pop	r0
    eb92:	0f 90       	pop	r0
    eb94:	df 91       	pop	r29
    eb96:	cf 91       	pop	r28
    eb98:	1f 91       	pop	r17
    eb9a:	0f 91       	pop	r16
    eb9c:	ff 90       	pop	r15
    eb9e:	ef 90       	pop	r14
    eba0:	bf 90       	pop	r11
    eba2:	af 90       	pop	r10
    eba4:	9f 90       	pop	r9
    eba6:	8f 90       	pop	r8
    eba8:	08 95       	ret

0000ebaa <fatfs_putc>:
    ebaa:	a3 e0       	ldi	r26, 0x03	; 3
    ebac:	b0 e0       	ldi	r27, 0x00	; 0
    ebae:	eb ed       	ldi	r30, 0xDB	; 219
    ebb0:	f5 e7       	ldi	r31, 0x75	; 117
    ebb2:	0c 94 a1 e7 	jmp	0x1cf42	; 0x1cf42 <__prologue_saves__+0x1c>
    ebb6:	8b 83       	std	Y+3, r24	; 0x03
    ebb8:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    ebbc:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    ebc0:	61 15       	cp	r22, r1
    ebc2:	71 05       	cpc	r23, r1
    ebc4:	39 f4       	brne	.+14     	; 0xebd4 <fatfs_putc+0x2a>
    ebc6:	89 e0       	ldi	r24, 0x09	; 9
    ebc8:	90 e0       	ldi	r25, 0x00	; 0
    ebca:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    ebce:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    ebd2:	2d c0       	rjmp	.+90     	; 0xec2e <fatfs_putc+0x84>
    ebd4:	fb 01       	movw	r30, r22
    ebd6:	84 85       	ldd	r24, Z+12	; 0x0c
    ebd8:	95 85       	ldd	r25, Z+13	; 0x0d
    ebda:	00 97       	sbiw	r24, 0x00	; 0
    ebdc:	a1 f3       	breq	.-24     	; 0xebc6 <fatfs_putc+0x1c>
    ebde:	8b 01       	movw	r16, r22
    ebe0:	9e 01       	movw	r18, r28
    ebe2:	2f 5f       	subi	r18, 0xFF	; 255
    ebe4:	3f 4f       	sbci	r19, 0xFF	; 255
    ebe6:	41 e0       	ldi	r20, 0x01	; 1
    ebe8:	50 e0       	ldi	r21, 0x00	; 0
    ebea:	be 01       	movw	r22, r28
    ebec:	6d 5f       	subi	r22, 0xFD	; 253
    ebee:	7f 4f       	sbci	r23, 0xFF	; 255
    ebf0:	0e 94 1c 5d 	call	0xba38	; 0xba38 <f_write>
    ebf4:	00 97       	sbiw	r24, 0x00	; 0
    ebf6:	31 f4       	brne	.+12     	; 0xec04 <fatfs_putc+0x5a>
    ebf8:	29 81       	ldd	r18, Y+1	; 0x01
    ebfa:	3a 81       	ldd	r19, Y+2	; 0x02
    ebfc:	21 30       	cpi	r18, 0x01	; 1
    ebfe:	31 05       	cpc	r19, r1
    ec00:	c9 f0       	breq	.+50     	; 0xec34 <fatfs_putc+0x8a>
    ec02:	03 c0       	rjmp	.+6      	; 0xec0a <fatfs_putc+0x60>
    ec04:	84 31       	cpi	r24, 0x14	; 20
    ec06:	91 05       	cpc	r25, r1
    ec08:	40 f4       	brcc	.+16     	; 0xec1a <fatfs_putc+0x70>
    ec0a:	fc 01       	movw	r30, r24
    ec0c:	ec 56       	subi	r30, 0x6C	; 108
    ec0e:	f4 4f       	sbci	r31, 0xF4	; 244
    ec10:	80 81       	ld	r24, Z
    ec12:	08 2e       	mov	r0, r24
    ec14:	00 0c       	add	r0, r0
    ec16:	99 0b       	sbc	r25, r25
    ec18:	02 c0       	rjmp	.+4      	; 0xec1e <fatfs_putc+0x74>
    ec1a:	83 e2       	ldi	r24, 0x23	; 35
    ec1c:	90 e0       	ldi	r25, 0x00	; 0
    ec1e:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    ec22:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    ec26:	f8 01       	movw	r30, r16
    ec28:	83 81       	ldd	r24, Z+3	; 0x03
    ec2a:	80 62       	ori	r24, 0x20	; 32
    ec2c:	83 83       	std	Z+3, r24	; 0x03
    ec2e:	8f ef       	ldi	r24, 0xFF	; 255
    ec30:	9f ef       	ldi	r25, 0xFF	; 255
    ec32:	02 c0       	rjmp	.+4      	; 0xec38 <fatfs_putc+0x8e>
    ec34:	8b 81       	ldd	r24, Y+3	; 0x03
    ec36:	90 e0       	ldi	r25, 0x00	; 0
    ec38:	23 96       	adiw	r28, 0x03	; 3
    ec3a:	e4 e0       	ldi	r30, 0x04	; 4
    ec3c:	0c 94 bd e7 	jmp	0x1cf7a	; 0x1cf7a <__epilogue_restores__+0x1c>

0000ec40 <fgetc>:
    ec40:	cf 93       	push	r28
    ec42:	df 93       	push	r29
    ec44:	00 d0       	rcall	.+0      	; 0xec46 <fgetc+0x6>
    ec46:	1f 92       	push	r1
    ec48:	ec 01       	movw	r28, r24
    ec4a:	00 97       	sbiw	r24, 0x00	; 0
    ec4c:	39 f4       	brne	.+14     	; 0xec5c <fgetc+0x1c>
    ec4e:	89 e0       	ldi	r24, 0x09	; 9
    ec50:	90 e0       	ldi	r25, 0x00	; 0
    ec52:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    ec56:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    ec5a:	40 c0       	rjmp	.+128    	; 0xecdc <fgetc+0x9c>
    ec5c:	2b 81       	ldd	r18, Y+3	; 0x03
    ec5e:	20 ff       	sbrs	r18, 0
    ec60:	3d c0       	rjmp	.+122    	; 0xecdc <fgetc+0x9c>
    ec62:	26 ff       	sbrs	r18, 6
    ec64:	0a c0       	rjmp	.+20     	; 0xec7a <fgetc+0x3a>
    ec66:	2f 7b       	andi	r18, 0xBF	; 191
    ec68:	2b 83       	std	Y+3, r18	; 0x03
    ec6a:	8e 81       	ldd	r24, Y+6	; 0x06
    ec6c:	9f 81       	ldd	r25, Y+7	; 0x07
    ec6e:	01 96       	adiw	r24, 0x01	; 1
    ec70:	9f 83       	std	Y+7, r25	; 0x07
    ec72:	8e 83       	std	Y+6, r24	; 0x06
    ec74:	8a 81       	ldd	r24, Y+2	; 0x02
    ec76:	90 e0       	ldi	r25, 0x00	; 0
    ec78:	33 c0       	rjmp	.+102    	; 0xece0 <fgetc+0xa0>
    ec7a:	22 ff       	sbrs	r18, 2
    ec7c:	0d c0       	rjmp	.+26     	; 0xec98 <fgetc+0x58>
    ec7e:	e8 81       	ld	r30, Y
    ec80:	f9 81       	ldd	r31, Y+1	; 0x01
    ec82:	80 81       	ld	r24, Z
    ec84:	90 e0       	ldi	r25, 0x00	; 0
    ec86:	00 97       	sbiw	r24, 0x00	; 0
    ec88:	19 f4       	brne	.+6      	; 0xec90 <fgetc+0x50>
    ec8a:	20 62       	ori	r18, 0x20	; 32
    ec8c:	2b 83       	std	Y+3, r18	; 0x03
    ec8e:	26 c0       	rjmp	.+76     	; 0xecdc <fgetc+0x9c>
    ec90:	31 96       	adiw	r30, 0x01	; 1
    ec92:	f9 83       	std	Y+1, r31	; 0x01
    ec94:	e8 83       	st	Y, r30
    ec96:	1b c0       	rjmp	.+54     	; 0xecce <fgetc+0x8e>
    ec98:	ea 85       	ldd	r30, Y+10	; 0x0a
    ec9a:	fb 85       	ldd	r31, Y+11	; 0x0b
    ec9c:	30 97       	sbiw	r30, 0x00	; 0
    ec9e:	59 f4       	brne	.+22     	; 0xecb6 <fgetc+0x76>
    eca0:	8a eb       	ldi	r24, 0xBA	; 186
    eca2:	9b e0       	ldi	r25, 0x0B	; 11
    eca4:	a0 e0       	ldi	r26, 0x00	; 0
    eca6:	ed b7       	in	r30, 0x3d	; 61
    eca8:	fe b7       	in	r31, 0x3e	; 62
    ecaa:	81 83       	std	Z+1, r24	; 0x01
    ecac:	92 83       	std	Z+2, r25	; 0x02
    ecae:	a3 83       	std	Z+3, r26	; 0x03
    ecb0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    ecb4:	13 c0       	rjmp	.+38     	; 0xecdc <fgetc+0x9c>
    ecb6:	09 95       	icall
    ecb8:	97 ff       	sbrs	r25, 7
    ecba:	09 c0       	rjmp	.+18     	; 0xecce <fgetc+0x8e>
    ecbc:	2b 81       	ldd	r18, Y+3	; 0x03
    ecbe:	02 96       	adiw	r24, 0x02	; 2
    ecc0:	11 f0       	breq	.+4      	; 0xecc6 <fgetc+0x86>
    ecc2:	80 e2       	ldi	r24, 0x20	; 32
    ecc4:	01 c0       	rjmp	.+2      	; 0xecc8 <fgetc+0x88>
    ecc6:	80 e1       	ldi	r24, 0x10	; 16
    ecc8:	82 2b       	or	r24, r18
    ecca:	8b 83       	std	Y+3, r24	; 0x03
    eccc:	07 c0       	rjmp	.+14     	; 0xecdc <fgetc+0x9c>
    ecce:	2e 81       	ldd	r18, Y+6	; 0x06
    ecd0:	3f 81       	ldd	r19, Y+7	; 0x07
    ecd2:	2f 5f       	subi	r18, 0xFF	; 255
    ecd4:	3f 4f       	sbci	r19, 0xFF	; 255
    ecd6:	3f 83       	std	Y+7, r19	; 0x07
    ecd8:	2e 83       	std	Y+6, r18	; 0x06
    ecda:	02 c0       	rjmp	.+4      	; 0xece0 <fgetc+0xa0>
    ecdc:	8f ef       	ldi	r24, 0xFF	; 255
    ecde:	9f ef       	ldi	r25, 0xFF	; 255
    ece0:	cd b7       	in	r28, 0x3d	; 61
    ece2:	de b7       	in	r29, 0x3e	; 62
    ece4:	23 96       	adiw	r28, 0x03	; 3
    ece6:	e2 e0       	ldi	r30, 0x02	; 2
    ece8:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

0000ecec <fputc>:
    ecec:	cf 93       	push	r28
    ecee:	df 93       	push	r29
    ecf0:	00 d0       	rcall	.+0      	; 0xecf2 <fputc+0x6>
    ecf2:	1f 92       	push	r1
    ecf4:	eb 01       	movw	r28, r22
    ecf6:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    ecfa:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    ecfe:	20 91 b7 1c 	lds	r18, 0x1CB7	; 0x801cb7 <__iob+0x2>
    ed02:	30 91 b8 1c 	lds	r19, 0x1CB8	; 0x801cb8 <__iob+0x3>
    ed06:	62 17       	cp	r22, r18
    ed08:	73 07       	cpc	r23, r19
    ed0a:	49 f0       	breq	.+18     	; 0xed1e <fputc+0x32>
    ed0c:	20 91 b9 1c 	lds	r18, 0x1CB9	; 0x801cb9 <__iob+0x4>
    ed10:	30 91 ba 1c 	lds	r19, 0x1CBA	; 0x801cba <__iob+0x5>
    ed14:	62 17       	cp	r22, r18
    ed16:	73 07       	cpc	r23, r19
    ed18:	11 f0       	breq	.+4      	; 0xed1e <fputc+0x32>
    ed1a:	47 df       	rcall	.-370    	; 0xebaa <fatfs_putc>
    ed1c:	33 c0       	rjmp	.+102    	; 0xed84 <fputc+0x98>
    ed1e:	2b 81       	ldd	r18, Y+3	; 0x03
    ed20:	21 ff       	sbrs	r18, 1
    ed22:	2e c0       	rjmp	.+92     	; 0xed80 <fputc+0x94>
    ed24:	22 ff       	sbrs	r18, 2
    ed26:	10 c0       	rjmp	.+32     	; 0xed48 <fputc+0x5c>
    ed28:	4e 81       	ldd	r20, Y+6	; 0x06
    ed2a:	5f 81       	ldd	r21, Y+7	; 0x07
    ed2c:	2c 81       	ldd	r18, Y+4	; 0x04
    ed2e:	3d 81       	ldd	r19, Y+5	; 0x05
    ed30:	42 17       	cp	r20, r18
    ed32:	53 07       	cpc	r21, r19
    ed34:	f4 f4       	brge	.+60     	; 0xed72 <fputc+0x86>
    ed36:	e8 81       	ld	r30, Y
    ed38:	f9 81       	ldd	r31, Y+1	; 0x01
    ed3a:	9f 01       	movw	r18, r30
    ed3c:	2f 5f       	subi	r18, 0xFF	; 255
    ed3e:	3f 4f       	sbci	r19, 0xFF	; 255
    ed40:	39 83       	std	Y+1, r19	; 0x01
    ed42:	28 83       	st	Y, r18
    ed44:	80 83       	st	Z, r24
    ed46:	15 c0       	rjmp	.+42     	; 0xed72 <fputc+0x86>
    ed48:	e8 85       	ldd	r30, Y+8	; 0x08
    ed4a:	f9 85       	ldd	r31, Y+9	; 0x09
    ed4c:	30 97       	sbiw	r30, 0x00	; 0
    ed4e:	59 f4       	brne	.+22     	; 0xed66 <fputc+0x7a>
    ed50:	82 ea       	ldi	r24, 0xA2	; 162
    ed52:	9b e0       	ldi	r25, 0x0B	; 11
    ed54:	a0 e0       	ldi	r26, 0x00	; 0
    ed56:	ed b7       	in	r30, 0x3d	; 61
    ed58:	fe b7       	in	r31, 0x3e	; 62
    ed5a:	81 83       	std	Z+1, r24	; 0x01
    ed5c:	92 83       	std	Z+2, r25	; 0x02
    ed5e:	a3 83       	std	Z+3, r26	; 0x03
    ed60:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    ed64:	0d c0       	rjmp	.+26     	; 0xed80 <fputc+0x94>
    ed66:	be 01       	movw	r22, r28
    ed68:	09 95       	icall
    ed6a:	8f 3f       	cpi	r24, 0xFF	; 255
    ed6c:	ff ef       	ldi	r31, 0xFF	; 255
    ed6e:	9f 07       	cpc	r25, r31
    ed70:	39 f0       	breq	.+14     	; 0xed80 <fputc+0x94>
    ed72:	2e 81       	ldd	r18, Y+6	; 0x06
    ed74:	3f 81       	ldd	r19, Y+7	; 0x07
    ed76:	2f 5f       	subi	r18, 0xFF	; 255
    ed78:	3f 4f       	sbci	r19, 0xFF	; 255
    ed7a:	3f 83       	std	Y+7, r19	; 0x07
    ed7c:	2e 83       	std	Y+6, r18	; 0x06
    ed7e:	02 c0       	rjmp	.+4      	; 0xed84 <fputc+0x98>
    ed80:	8f ef       	ldi	r24, 0xFF	; 255
    ed82:	9f ef       	ldi	r25, 0xFF	; 255
    ed84:	cd b7       	in	r28, 0x3d	; 61
    ed86:	de b7       	in	r29, 0x3e	; 62
    ed88:	23 96       	adiw	r28, 0x03	; 3
    ed8a:	e2 e0       	ldi	r30, 0x02	; 2
    ed8c:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

0000ed90 <_fprintf_putc>:
    ed90:	fc 01       	movw	r30, r24
    ed92:	86 2f       	mov	r24, r22
    ed94:	26 81       	ldd	r18, Z+6	; 0x06
    ed96:	37 81       	ldd	r19, Z+7	; 0x07
    ed98:	2f 5f       	subi	r18, 0xFF	; 255
    ed9a:	3f 4f       	sbci	r19, 0xFF	; 255
    ed9c:	37 83       	std	Z+7, r19	; 0x07
    ed9e:	26 83       	std	Z+6, r18	; 0x06
    eda0:	62 81       	ldd	r22, Z+2	; 0x02
    eda2:	73 81       	ldd	r23, Z+3	; 0x03
    eda4:	90 e0       	ldi	r25, 0x00	; 0
    eda6:	a2 cf       	rjmp	.-188    	; 0xecec <fputc>
    eda8:	08 95       	ret

0000edaa <getchar>:
    edaa:	80 91 b5 1c 	lds	r24, 0x1CB5	; 0x801cb5 <__iob>
    edae:	90 91 b6 1c 	lds	r25, 0x1CB6	; 0x801cb6 <__iob+0x1>
    edb2:	46 cf       	rjmp	.-372    	; 0xec40 <fgetc>
    edb4:	08 95       	ret

0000edb6 <putchar>:
    edb6:	60 91 b7 1c 	lds	r22, 0x1CB7	; 0x801cb7 <__iob+0x2>
    edba:	70 91 b8 1c 	lds	r23, 0x1CB8	; 0x801cb8 <__iob+0x3>
    edbe:	96 cf       	rjmp	.-212    	; 0xecec <fputc>
    edc0:	08 95       	ret

0000edc2 <fgets>:
    edc2:	a0 e0       	ldi	r26, 0x00	; 0
    edc4:	b0 e0       	ldi	r27, 0x00	; 0
    edc6:	e7 ee       	ldi	r30, 0xE7	; 231
    edc8:	f6 e7       	ldi	r31, 0x76	; 118
    edca:	0c 94 9d e7 	jmp	0x1cf3a	; 0x1cf3a <__prologue_saves__+0x14>
    edce:	7c 01       	movw	r14, r24
    edd0:	6a 01       	movw	r12, r20
    edd2:	8b 01       	movw	r16, r22
    edd4:	c0 e0       	ldi	r28, 0x00	; 0
    edd6:	d0 e0       	ldi	r29, 0x00	; 0
    edd8:	01 15       	cp	r16, r1
    edda:	11 05       	cpc	r17, r1
    eddc:	41 f0       	breq	.+16     	; 0xedee <fgets+0x2c>
    edde:	c6 01       	movw	r24, r12
    ede0:	2f df       	rcall	.-418    	; 0xec40 <fgetc>
    ede2:	8f 3f       	cpi	r24, 0xFF	; 255
    ede4:	2f ef       	ldi	r18, 0xFF	; 255
    ede6:	92 07       	cpc	r25, r18
    ede8:	39 f4       	brne	.+14     	; 0xedf8 <fgets+0x36>
    edea:	20 97       	sbiw	r28, 0x00	; 0
    edec:	b9 f0       	breq	.+46     	; 0xee1c <fgets+0x5a>
    edee:	ce 0d       	add	r28, r14
    edf0:	df 1d       	adc	r29, r15
    edf2:	18 82       	st	Y, r1
    edf4:	c7 01       	movw	r24, r14
    edf6:	14 c0       	rjmp	.+40     	; 0xee20 <fgets+0x5e>
    edf8:	8a 30       	cpi	r24, 0x0A	; 10
    edfa:	91 05       	cpc	r25, r1
    edfc:	c1 f3       	breq	.-16     	; 0xedee <fgets+0x2c>
    edfe:	88 30       	cpi	r24, 0x08	; 8
    ee00:	91 05       	cpc	r25, r1
    ee02:	21 f4       	brne	.+8      	; 0xee0c <fgets+0x4a>
    ee04:	20 97       	sbiw	r28, 0x00	; 0
    ee06:	39 f0       	breq	.+14     	; 0xee16 <fgets+0x54>
    ee08:	21 97       	sbiw	r28, 0x01	; 1
    ee0a:	05 c0       	rjmp	.+10     	; 0xee16 <fgets+0x54>
    ee0c:	f7 01       	movw	r30, r14
    ee0e:	ec 0f       	add	r30, r28
    ee10:	fd 1f       	adc	r31, r29
    ee12:	80 83       	st	Z, r24
    ee14:	21 96       	adiw	r28, 0x01	; 1
    ee16:	01 50       	subi	r16, 0x01	; 1
    ee18:	11 09       	sbc	r17, r1
    ee1a:	de cf       	rjmp	.-68     	; 0xedd8 <fgets+0x16>
    ee1c:	80 e0       	ldi	r24, 0x00	; 0
    ee1e:	90 e0       	ldi	r25, 0x00	; 0
    ee20:	cd b7       	in	r28, 0x3d	; 61
    ee22:	de b7       	in	r29, 0x3e	; 62
    ee24:	e8 e0       	ldi	r30, 0x08	; 8
    ee26:	0c 94 b9 e7 	jmp	0x1cf72	; 0x1cf72 <__epilogue_restores__+0x14>

0000ee2a <fputs>:
    ee2a:	0f 93       	push	r16
    ee2c:	1f 93       	push	r17
    ee2e:	cf 93       	push	r28
    ee30:	df 93       	push	r29
    ee32:	8b 01       	movw	r16, r22
    ee34:	ec 01       	movw	r28, r24
    ee36:	89 91       	ld	r24, Y+
    ee38:	88 23       	and	r24, r24
    ee3a:	41 f0       	breq	.+16     	; 0xee4c <fputs+0x22>
    ee3c:	b8 01       	movw	r22, r16
    ee3e:	90 e0       	ldi	r25, 0x00	; 0
    ee40:	55 df       	rcall	.-342    	; 0xecec <fputc>
    ee42:	8f 3f       	cpi	r24, 0xFF	; 255
    ee44:	2f ef       	ldi	r18, 0xFF	; 255
    ee46:	92 07       	cpc	r25, r18
    ee48:	b1 f7       	brne	.-20     	; 0xee36 <fputs+0xc>
    ee4a:	02 c0       	rjmp	.+4      	; 0xee50 <fputs+0x26>
    ee4c:	80 e0       	ldi	r24, 0x00	; 0
    ee4e:	90 e0       	ldi	r25, 0x00	; 0
    ee50:	df 91       	pop	r29
    ee52:	cf 91       	pop	r28
    ee54:	1f 91       	pop	r17
    ee56:	0f 91       	pop	r16
    ee58:	08 95       	ret

0000ee5a <puts>:
    ee5a:	cf 93       	push	r28
    ee5c:	df 93       	push	r29
    ee5e:	ec 01       	movw	r28, r24
    ee60:	89 91       	ld	r24, Y+
    ee62:	60 91 b7 1c 	lds	r22, 0x1CB7	; 0x801cb7 <__iob+0x2>
    ee66:	70 91 b8 1c 	lds	r23, 0x1CB8	; 0x801cb8 <__iob+0x3>
    ee6a:	88 23       	and	r24, r24
    ee6c:	39 f0       	breq	.+14     	; 0xee7c <puts+0x22>
    ee6e:	90 e0       	ldi	r25, 0x00	; 0
    ee70:	3d df       	rcall	.-390    	; 0xecec <fputc>
    ee72:	8f 3f       	cpi	r24, 0xFF	; 255
    ee74:	2f ef       	ldi	r18, 0xFF	; 255
    ee76:	92 07       	cpc	r25, r18
    ee78:	99 f7       	brne	.-26     	; 0xee60 <puts+0x6>
    ee7a:	03 c0       	rjmp	.+6      	; 0xee82 <puts+0x28>
    ee7c:	8a e0       	ldi	r24, 0x0A	; 10
    ee7e:	90 e0       	ldi	r25, 0x00	; 0
    ee80:	35 df       	rcall	.-406    	; 0xecec <fputc>
    ee82:	df 91       	pop	r29
    ee84:	cf 91       	pop	r28
    ee86:	08 95       	ret

0000ee88 <fileno>:
    ee88:	00 97       	sbiw	r24, 0x00	; 0
    ee8a:	39 f4       	brne	.+14     	; 0xee9a <fileno+0x12>
    ee8c:	89 e0       	ldi	r24, 0x09	; 9
    ee8e:	90 e0       	ldi	r25, 0x00	; 0
    ee90:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    ee94:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    ee98:	0e c0       	rjmp	.+28     	; 0xeeb6 <fileno+0x2e>
    ee9a:	e5 eb       	ldi	r30, 0xB5	; 181
    ee9c:	fc e1       	ldi	r31, 0x1C	; 28
    ee9e:	20 e0       	ldi	r18, 0x00	; 0
    eea0:	30 e0       	ldi	r19, 0x00	; 0
    eea2:	41 91       	ld	r20, Z+
    eea4:	51 91       	ld	r21, Z+
    eea6:	84 17       	cp	r24, r20
    eea8:	95 07       	cpc	r25, r21
    eeaa:	41 f0       	breq	.+16     	; 0xeebc <fileno+0x34>
    eeac:	2f 5f       	subi	r18, 0xFF	; 255
    eeae:	3f 4f       	sbci	r19, 0xFF	; 255
    eeb0:	20 31       	cpi	r18, 0x10	; 16
    eeb2:	31 05       	cpc	r19, r1
    eeb4:	b1 f7       	brne	.-20     	; 0xeea2 <fileno+0x1a>
    eeb6:	8f ef       	ldi	r24, 0xFF	; 255
    eeb8:	9f ef       	ldi	r25, 0xFF	; 255
    eeba:	08 95       	ret
    eebc:	c9 01       	movw	r24, r18
    eebe:	08 95       	ret

0000eec0 <fileno_to_stream>:
    eec0:	80 31       	cpi	r24, 0x10	; 16
    eec2:	91 05       	cpc	r25, r1
    eec4:	48 f4       	brcc	.+18     	; 0xeed8 <fileno_to_stream+0x18>
    eec6:	88 0f       	add	r24, r24
    eec8:	99 1f       	adc	r25, r25
    eeca:	fc 01       	movw	r30, r24
    eecc:	eb 54       	subi	r30, 0x4B	; 75
    eece:	f3 4e       	sbci	r31, 0xE3	; 227
    eed0:	80 81       	ld	r24, Z
    eed2:	91 81       	ldd	r25, Z+1	; 0x01
    eed4:	00 97       	sbiw	r24, 0x00	; 0
    eed6:	41 f4       	brne	.+16     	; 0xeee8 <fileno_to_stream+0x28>
    eed8:	89 e0       	ldi	r24, 0x09	; 9
    eeda:	90 e0       	ldi	r25, 0x00	; 0
    eedc:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    eee0:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    eee4:	80 e0       	ldi	r24, 0x00	; 0
    eee6:	90 e0       	ldi	r25, 0x00	; 0
    eee8:	08 95       	ret

0000eeea <mctime>:
    eeea:	a4 e0       	ldi	r26, 0x04	; 4
    eeec:	b0 e0       	ldi	r27, 0x00	; 0
    eeee:	eb e7       	ldi	r30, 0x7B	; 123
    eef0:	f7 e7       	ldi	r31, 0x77	; 119
    eef2:	0c 94 a3 e7 	jmp	0x1cf46	; 0x1cf46 <__prologue_saves__+0x20>
    eef6:	69 83       	std	Y+1, r22	; 0x01
    eef8:	7a 83       	std	Y+2, r23	; 0x02
    eefa:	8b 83       	std	Y+3, r24	; 0x03
    eefc:	9c 83       	std	Y+4, r25	; 0x04
    eefe:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    ef02:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    ef06:	ce 01       	movw	r24, r28
    ef08:	01 96       	adiw	r24, 0x01	; 1
    ef0a:	0e 94 8d 3d 	call	0x7b1a	; 0x7b1a <ctime_gm>
    ef0e:	fc 01       	movw	r30, r24
    ef10:	01 90       	ld	r0, Z+
    ef12:	00 20       	and	r0, r0
    ef14:	e9 f7       	brne	.-6      	; 0xef10 <mctime+0x26>
    ef16:	31 97       	sbiw	r30, 0x01	; 1
    ef18:	e8 1b       	sub	r30, r24
    ef1a:	f9 0b       	sbc	r31, r25
    ef1c:	39 f0       	breq	.+14     	; 0xef2c <mctime+0x42>
    ef1e:	31 97       	sbiw	r30, 0x01	; 1
    ef20:	e8 0f       	add	r30, r24
    ef22:	f9 1f       	adc	r31, r25
    ef24:	20 81       	ld	r18, Z
    ef26:	2a 30       	cpi	r18, 0x0A	; 10
    ef28:	09 f4       	brne	.+2      	; 0xef2c <mctime+0x42>
    ef2a:	10 82       	st	Z, r1
    ef2c:	24 96       	adiw	r28, 0x04	; 4
    ef2e:	e2 e0       	ldi	r30, 0x02	; 2
    ef30:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

0000ef34 <basename>:
    ef34:	00 97       	sbiw	r24, 0x00	; 0
    ef36:	49 f0       	breq	.+18     	; 0xef4a <basename+0x16>
    ef38:	fc 01       	movw	r30, r24
    ef3a:	21 91       	ld	r18, Z+
    ef3c:	22 23       	and	r18, r18
    ef3e:	21 f0       	breq	.+8      	; 0xef48 <basename+0x14>
    ef40:	2f 32       	cpi	r18, 0x2F	; 47
    ef42:	d9 f7       	brne	.-10     	; 0xef3a <basename+0x6>
    ef44:	cf 01       	movw	r24, r30
    ef46:	f9 cf       	rjmp	.-14     	; 0xef3a <basename+0x6>
    ef48:	08 95       	ret
    ef4a:	8e e0       	ldi	r24, 0x0E	; 14
    ef4c:	9c e0       	ldi	r25, 0x0C	; 12
    ef4e:	08 95       	ret

0000ef50 <chdir>:
    ef50:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    ef54:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    ef58:	0e 94 4c 5f 	call	0xbe98	; 0xbe98 <f_chdir>
    ef5c:	00 97       	sbiw	r24, 0x00	; 0
    ef5e:	a1 f0       	breq	.+40     	; 0xef88 <chdir+0x38>
    ef60:	84 31       	cpi	r24, 0x14	; 20
    ef62:	91 05       	cpc	r25, r1
    ef64:	40 f4       	brcc	.+16     	; 0xef76 <chdir+0x26>
    ef66:	fc 01       	movw	r30, r24
    ef68:	ec 56       	subi	r30, 0x6C	; 108
    ef6a:	f4 4f       	sbci	r31, 0xF4	; 244
    ef6c:	80 81       	ld	r24, Z
    ef6e:	08 2e       	mov	r0, r24
    ef70:	00 0c       	add	r0, r0
    ef72:	99 0b       	sbc	r25, r25
    ef74:	02 c0       	rjmp	.+4      	; 0xef7a <chdir+0x2a>
    ef76:	83 e2       	ldi	r24, 0x23	; 35
    ef78:	90 e0       	ldi	r25, 0x00	; 0
    ef7a:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    ef7e:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    ef82:	8f ef       	ldi	r24, 0xFF	; 255
    ef84:	9f ef       	ldi	r25, 0xFF	; 255
    ef86:	08 95       	ret
    ef88:	80 e0       	ldi	r24, 0x00	; 0
    ef8a:	90 e0       	ldi	r25, 0x00	; 0
    ef8c:	08 95       	ret

0000ef8e <chmod>:
    ef8e:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    ef92:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    ef96:	42 79       	andi	r20, 0x92	; 146
    ef98:	55 27       	eor	r21, r21
    ef9a:	66 27       	eor	r22, r22
    ef9c:	77 27       	eor	r23, r23
    ef9e:	45 2b       	or	r20, r21
    efa0:	46 2b       	or	r20, r22
    efa2:	47 2b       	or	r20, r23
    efa4:	19 f0       	breq	.+6      	; 0xefac <chmod+0x1e>
    efa6:	80 e0       	ldi	r24, 0x00	; 0
    efa8:	90 e0       	ldi	r25, 0x00	; 0
    efaa:	08 95       	ret
    efac:	41 e0       	ldi	r20, 0x01	; 1
    efae:	61 e0       	ldi	r22, 0x01	; 1
    efb0:	0e 94 2c 68 	call	0xd058	; 0xd058 <f_chmod>
    efb4:	00 97       	sbiw	r24, 0x00	; 0
    efb6:	b9 f3       	breq	.-18     	; 0xefa6 <chmod+0x18>
    efb8:	84 31       	cpi	r24, 0x14	; 20
    efba:	91 05       	cpc	r25, r1
    efbc:	40 f4       	brcc	.+16     	; 0xefce <chmod+0x40>
    efbe:	fc 01       	movw	r30, r24
    efc0:	ec 56       	subi	r30, 0x6C	; 108
    efc2:	f4 4f       	sbci	r31, 0xF4	; 244
    efc4:	80 81       	ld	r24, Z
    efc6:	08 2e       	mov	r0, r24
    efc8:	00 0c       	add	r0, r0
    efca:	99 0b       	sbc	r25, r25
    efcc:	02 c0       	rjmp	.+4      	; 0xefd2 <chmod+0x44>
    efce:	83 e2       	ldi	r24, 0x23	; 35
    efd0:	90 e0       	ldi	r25, 0x00	; 0
    efd2:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    efd6:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    efda:	8f ef       	ldi	r24, 0xFF	; 255
    efdc:	9f ef       	ldi	r25, 0xFF	; 255
    efde:	08 95       	ret

0000efe0 <getcwd>:
    efe0:	cf 93       	push	r28
    efe2:	df 93       	push	r29
    efe4:	d8 2f       	mov	r29, r24
    efe6:	c9 2f       	mov	r28, r25
    efe8:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    efec:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    eff0:	0e 94 a7 5f 	call	0xbf4e	; 0xbf4e <f_getcwd>
    eff4:	00 97       	sbiw	r24, 0x00	; 0
    eff6:	a1 f0       	breq	.+40     	; 0xf020 <getcwd+0x40>
    eff8:	84 31       	cpi	r24, 0x14	; 20
    effa:	91 05       	cpc	r25, r1
    effc:	40 f4       	brcc	.+16     	; 0xf00e <getcwd+0x2e>
    effe:	fc 01       	movw	r30, r24
    f000:	ec 56       	subi	r30, 0x6C	; 108
    f002:	f4 4f       	sbci	r31, 0xF4	; 244
    f004:	80 81       	ld	r24, Z
    f006:	08 2e       	mov	r0, r24
    f008:	00 0c       	add	r0, r0
    f00a:	99 0b       	sbc	r25, r25
    f00c:	02 c0       	rjmp	.+4      	; 0xf012 <getcwd+0x32>
    f00e:	83 e2       	ldi	r24, 0x23	; 35
    f010:	90 e0       	ldi	r25, 0x00	; 0
    f012:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f016:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f01a:	80 e0       	ldi	r24, 0x00	; 0
    f01c:	90 e0       	ldi	r25, 0x00	; 0
    f01e:	02 c0       	rjmp	.+4      	; 0xf024 <getcwd+0x44>
    f020:	8d 2f       	mov	r24, r29
    f022:	9c 2f       	mov	r25, r28
    f024:	df 91       	pop	r29
    f026:	cf 91       	pop	r28
    f028:	08 95       	ret

0000f02a <mkdir>:
    f02a:	cf 93       	push	r28
    f02c:	df 93       	push	r29
    f02e:	ec 01       	movw	r28, r24
    f030:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    f034:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    f038:	41 15       	cp	r20, r1
    f03a:	51 05       	cpc	r21, r1
    f03c:	61 05       	cpc	r22, r1
    f03e:	71 05       	cpc	r23, r1
    f040:	41 f4       	brne	.+16     	; 0xf052 <mkdir+0x28>
    f042:	ce 01       	movw	r24, r28
    f044:	0e 94 27 66 	call	0xcc4e	; 0xcc4e <f_mkdir>
    f048:	00 97       	sbiw	r24, 0x00	; 0
    f04a:	39 f4       	brne	.+14     	; 0xf05a <mkdir+0x30>
    f04c:	80 e0       	ldi	r24, 0x00	; 0
    f04e:	90 e0       	ldi	r25, 0x00	; 0
    f050:	17 c0       	rjmp	.+46     	; 0xf080 <mkdir+0x56>
    f052:	9d df       	rcall	.-198    	; 0xef8e <chmod>
    f054:	89 2b       	or	r24, r25
    f056:	a9 f3       	breq	.-22     	; 0xf042 <mkdir+0x18>
    f058:	11 c0       	rjmp	.+34     	; 0xf07c <mkdir+0x52>
    f05a:	84 31       	cpi	r24, 0x14	; 20
    f05c:	91 05       	cpc	r25, r1
    f05e:	40 f4       	brcc	.+16     	; 0xf070 <mkdir+0x46>
    f060:	fc 01       	movw	r30, r24
    f062:	ec 56       	subi	r30, 0x6C	; 108
    f064:	f4 4f       	sbci	r31, 0xF4	; 244
    f066:	80 81       	ld	r24, Z
    f068:	08 2e       	mov	r0, r24
    f06a:	00 0c       	add	r0, r0
    f06c:	99 0b       	sbc	r25, r25
    f06e:	02 c0       	rjmp	.+4      	; 0xf074 <mkdir+0x4a>
    f070:	83 e2       	ldi	r24, 0x23	; 35
    f072:	90 e0       	ldi	r25, 0x00	; 0
    f074:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f078:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f07c:	8f ef       	ldi	r24, 0xFF	; 255
    f07e:	9f ef       	ldi	r25, 0xFF	; 255
    f080:	df 91       	pop	r29
    f082:	cf 91       	pop	r28
    f084:	08 95       	ret

0000f086 <rename>:
    f086:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    f08a:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    f08e:	0e 94 17 67 	call	0xce2e	; 0xce2e <f_rename>
    f092:	00 97       	sbiw	r24, 0x00	; 0
    f094:	a1 f0       	breq	.+40     	; 0xf0be <rename+0x38>
    f096:	84 31       	cpi	r24, 0x14	; 20
    f098:	91 05       	cpc	r25, r1
    f09a:	40 f4       	brcc	.+16     	; 0xf0ac <rename+0x26>
    f09c:	fc 01       	movw	r30, r24
    f09e:	ec 56       	subi	r30, 0x6C	; 108
    f0a0:	f4 4f       	sbci	r31, 0xF4	; 244
    f0a2:	80 81       	ld	r24, Z
    f0a4:	08 2e       	mov	r0, r24
    f0a6:	00 0c       	add	r0, r0
    f0a8:	99 0b       	sbc	r25, r25
    f0aa:	02 c0       	rjmp	.+4      	; 0xf0b0 <rename+0x2a>
    f0ac:	83 e2       	ldi	r24, 0x23	; 35
    f0ae:	90 e0       	ldi	r25, 0x00	; 0
    f0b0:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f0b4:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f0b8:	8f ef       	ldi	r24, 0xFF	; 255
    f0ba:	9f ef       	ldi	r25, 0xFF	; 255
    f0bc:	08 95       	ret
    f0be:	80 e0       	ldi	r24, 0x00	; 0
    f0c0:	90 e0       	ldi	r25, 0x00	; 0
    f0c2:	08 95       	ret

0000f0c4 <unlink>:
    f0c4:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    f0c8:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    f0cc:	0e 94 80 65 	call	0xcb00	; 0xcb00 <f_unlink>
    f0d0:	00 97       	sbiw	r24, 0x00	; 0
    f0d2:	a1 f0       	breq	.+40     	; 0xf0fc <unlink+0x38>
    f0d4:	84 31       	cpi	r24, 0x14	; 20
    f0d6:	91 05       	cpc	r25, r1
    f0d8:	40 f4       	brcc	.+16     	; 0xf0ea <unlink+0x26>
    f0da:	fc 01       	movw	r30, r24
    f0dc:	ec 56       	subi	r30, 0x6C	; 108
    f0de:	f4 4f       	sbci	r31, 0xF4	; 244
    f0e0:	80 81       	ld	r24, Z
    f0e2:	08 2e       	mov	r0, r24
    f0e4:	00 0c       	add	r0, r0
    f0e6:	99 0b       	sbc	r25, r25
    f0e8:	02 c0       	rjmp	.+4      	; 0xf0ee <unlink+0x2a>
    f0ea:	83 e2       	ldi	r24, 0x23	; 35
    f0ec:	90 e0       	ldi	r25, 0x00	; 0
    f0ee:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f0f2:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f0f6:	8f ef       	ldi	r24, 0xFF	; 255
    f0f8:	9f ef       	ldi	r25, 0xFF	; 255
    f0fa:	08 95       	ret
    f0fc:	80 e0       	ldi	r24, 0x00	; 0
    f0fe:	90 e0       	ldi	r25, 0x00	; 0
    f100:	08 95       	ret

0000f102 <rmdir>:
    f102:	e0 cf       	rjmp	.-64     	; 0xf0c4 <unlink>
    f104:	08 95       	ret

0000f106 <closedir>:
    f106:	0e 94 09 64 	call	0xc812	; 0xc812 <f_closedir>
    f10a:	00 97       	sbiw	r24, 0x00	; 0
    f10c:	a1 f0       	breq	.+40     	; 0xf136 <closedir+0x30>
    f10e:	84 31       	cpi	r24, 0x14	; 20
    f110:	91 05       	cpc	r25, r1
    f112:	40 f4       	brcc	.+16     	; 0xf124 <closedir+0x1e>
    f114:	fc 01       	movw	r30, r24
    f116:	ec 56       	subi	r30, 0x6C	; 108
    f118:	f4 4f       	sbci	r31, 0xF4	; 244
    f11a:	80 81       	ld	r24, Z
    f11c:	08 2e       	mov	r0, r24
    f11e:	00 0c       	add	r0, r0
    f120:	99 0b       	sbc	r25, r25
    f122:	02 c0       	rjmp	.+4      	; 0xf128 <closedir+0x22>
    f124:	83 e2       	ldi	r24, 0x23	; 35
    f126:	90 e0       	ldi	r25, 0x00	; 0
    f128:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f12c:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f130:	8f ef       	ldi	r24, 0xFF	; 255
    f132:	9f ef       	ldi	r25, 0xFF	; 255
    f134:	08 95       	ret
    f136:	80 e0       	ldi	r24, 0x00	; 0
    f138:	90 e0       	ldi	r25, 0x00	; 0
    f13a:	08 95       	ret

0000f13c <opendir>:
    f13c:	bc 01       	movw	r22, r24
    f13e:	86 e2       	ldi	r24, 0x26	; 38
    f140:	99 e1       	ldi	r25, 0x19	; 25
    f142:	0e 94 98 63 	call	0xc730	; 0xc730 <f_opendir>
    f146:	00 97       	sbiw	r24, 0x00	; 0
    f148:	a1 f0       	breq	.+40     	; 0xf172 <opendir+0x36>
    f14a:	84 31       	cpi	r24, 0x14	; 20
    f14c:	91 05       	cpc	r25, r1
    f14e:	40 f4       	brcc	.+16     	; 0xf160 <opendir+0x24>
    f150:	fc 01       	movw	r30, r24
    f152:	ec 56       	subi	r30, 0x6C	; 108
    f154:	f4 4f       	sbci	r31, 0xF4	; 244
    f156:	80 81       	ld	r24, Z
    f158:	08 2e       	mov	r0, r24
    f15a:	00 0c       	add	r0, r0
    f15c:	99 0b       	sbc	r25, r25
    f15e:	02 c0       	rjmp	.+4      	; 0xf164 <opendir+0x28>
    f160:	83 e2       	ldi	r24, 0x23	; 35
    f162:	90 e0       	ldi	r25, 0x00	; 0
    f164:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f168:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f16c:	80 e0       	ldi	r24, 0x00	; 0
    f16e:	90 e0       	ldi	r25, 0x00	; 0
    f170:	08 95       	ret
    f172:	86 e2       	ldi	r24, 0x26	; 38
    f174:	99 e1       	ldi	r25, 0x19	; 25
    f176:	08 95       	ret

0000f178 <readdir>:
    f178:	a6 e1       	ldi	r26, 0x16	; 22
    f17a:	b1 e0       	ldi	r27, 0x01	; 1
    f17c:	e2 ec       	ldi	r30, 0xC2	; 194
    f17e:	f8 e7       	ldi	r31, 0x78	; 120
    f180:	0c 94 a1 e7 	jmp	0x1cf42	; 0x1cf42 <__prologue_saves__+0x1c>
    f184:	10 92 26 18 	sts	0x1826, r1	; 0x801826 <_de>
    f188:	be 01       	movw	r22, r28
    f18a:	6f 5f       	subi	r22, 0xFF	; 255
    f18c:	7f 4f       	sbci	r23, 0xFF	; 255
    f18e:	0e 94 1e 64 	call	0xc83c	; 0xc83c <f_readdir>
    f192:	00 97       	sbiw	r24, 0x00	; 0
    f194:	a1 f0       	breq	.+40     	; 0xf1be <readdir+0x46>
    f196:	84 31       	cpi	r24, 0x14	; 20
    f198:	91 05       	cpc	r25, r1
    f19a:	40 f4       	brcc	.+16     	; 0xf1ac <readdir+0x34>
    f19c:	fc 01       	movw	r30, r24
    f19e:	ec 56       	subi	r30, 0x6C	; 108
    f1a0:	f4 4f       	sbci	r31, 0xF4	; 244
    f1a2:	80 81       	ld	r24, Z
    f1a4:	08 2e       	mov	r0, r24
    f1a6:	00 0c       	add	r0, r0
    f1a8:	99 0b       	sbc	r25, r25
    f1aa:	02 c0       	rjmp	.+4      	; 0xf1b0 <readdir+0x38>
    f1ac:	83 e2       	ldi	r24, 0x23	; 35
    f1ae:	90 e0       	ldi	r25, 0x00	; 0
    f1b0:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f1b4:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f1b8:	80 e0       	ldi	r24, 0x00	; 0
    f1ba:	90 e0       	ldi	r25, 0x00	; 0
    f1bc:	16 c0       	rjmp	.+44     	; 0xf1ea <readdir+0x72>
    f1be:	be 01       	movw	r22, r28
    f1c0:	69 5e       	subi	r22, 0xE9	; 233
    f1c2:	7f 4f       	sbci	r23, 0xFF	; 255
    f1c4:	fb 01       	movw	r30, r22
    f1c6:	01 90       	ld	r0, Z+
    f1c8:	00 20       	and	r0, r0
    f1ca:	e9 f7       	brne	.-6      	; 0xf1c6 <readdir+0x4e>
    f1cc:	31 97       	sbiw	r30, 0x01	; 1
    f1ce:	8f 01       	movw	r16, r30
    f1d0:	06 1b       	sub	r16, r22
    f1d2:	17 0b       	sbc	r17, r23
    f1d4:	a8 01       	movw	r20, r16
    f1d6:	86 e2       	ldi	r24, 0x26	; 38
    f1d8:	98 e1       	ldi	r25, 0x18	; 24
    f1da:	0e 94 bd 31 	call	0x637a	; 0x637a <strncpy>
    f1de:	f8 01       	movw	r30, r16
    f1e0:	ea 5d       	subi	r30, 0xDA	; 218
    f1e2:	f7 4e       	sbci	r31, 0xE7	; 231
    f1e4:	10 82       	st	Z, r1
    f1e6:	86 e2       	ldi	r24, 0x26	; 38
    f1e8:	98 e1       	ldi	r25, 0x18	; 24
    f1ea:	ca 5e       	subi	r28, 0xEA	; 234
    f1ec:	de 4f       	sbci	r29, 0xFE	; 254
    f1ee:	e4 e0       	ldi	r30, 0x04	; 4
    f1f0:	0c 94 bd e7 	jmp	0x1cf7a	; 0x1cf7a <__epilogue_restores__+0x1c>

0000f1f4 <perror>:
    f1f4:	ad b7       	in	r26, 0x3d	; 61
    f1f6:	be b7       	in	r27, 0x3e	; 62
    f1f8:	17 97       	sbiw	r26, 0x07	; 7
    f1fa:	0f b6       	in	r0, 0x3f	; 63
    f1fc:	f8 94       	cli
    f1fe:	be bf       	out	0x3e, r27	; 62
    f200:	0f be       	out	0x3f, r0	; 63
    f202:	ad bf       	out	0x3d, r26	; 61
    f204:	20 91 b3 1c 	lds	r18, 0x1CB3	; 0x801cb3 <errno>
    f208:	30 91 b4 1c 	lds	r19, 0x1CB4	; 0x801cb4 <errno+0x1>
    f20c:	23 32       	cpi	r18, 0x23	; 35
    f20e:	31 05       	cpc	r19, r1
    f210:	40 f4       	brcc	.+16     	; 0xf222 <perror+0x2e>
    f212:	22 0f       	add	r18, r18
    f214:	33 1f       	adc	r19, r19
    f216:	f9 01       	movw	r30, r18
    f218:	ea 5c       	subi	r30, 0xCA	; 202
    f21a:	fe 4f       	sbci	r31, 0xFE	; 254
    f21c:	20 81       	ld	r18, Z
    f21e:	31 81       	ldd	r19, Z+1	; 0x01
    f220:	04 c0       	rjmp	.+8      	; 0xf22a <perror+0x36>
    f222:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <sys_errlist+0x46>
    f226:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <sys_errlist+0x47>
    f22a:	00 97       	sbiw	r24, 0x00	; 0
    f22c:	99 f0       	breq	.+38     	; 0xf254 <perror+0x60>
    f22e:	fc 01       	movw	r30, r24
    f230:	40 81       	ld	r20, Z
    f232:	44 23       	and	r20, r20
    f234:	79 f0       	breq	.+30     	; 0xf254 <perror+0x60>
    f236:	ed b7       	in	r30, 0x3d	; 61
    f238:	fe b7       	in	r31, 0x3e	; 62
    f23a:	37 83       	std	Z+7, r19	; 0x07
    f23c:	26 83       	std	Z+6, r18	; 0x06
    f23e:	95 83       	std	Z+5, r25	; 0x05
    f240:	84 83       	std	Z+4, r24	; 0x04
    f242:	8e e8       	ldi	r24, 0x8E	; 142
    f244:	9b e0       	ldi	r25, 0x0B	; 11
    f246:	a0 e0       	ldi	r26, 0x00	; 0
    f248:	81 83       	std	Z+1, r24	; 0x01
    f24a:	92 83       	std	Z+2, r25	; 0x02
    f24c:	a3 83       	std	Z+3, r26	; 0x03
    f24e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    f252:	0c c0       	rjmp	.+24     	; 0xf26c <perror+0x78>
    f254:	ed b7       	in	r30, 0x3d	; 61
    f256:	fe b7       	in	r31, 0x3e	; 62
    f258:	35 83       	std	Z+5, r19	; 0x05
    f25a:	24 83       	std	Z+4, r18	; 0x04
    f25c:	8a e8       	ldi	r24, 0x8A	; 138
    f25e:	9b e0       	ldi	r25, 0x0B	; 11
    f260:	a0 e0       	ldi	r26, 0x00	; 0
    f262:	81 83       	std	Z+1, r24	; 0x01
    f264:	92 83       	std	Z+2, r25	; 0x02
    f266:	a3 83       	std	Z+3, r26	; 0x03
    f268:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    f26c:	ad b7       	in	r26, 0x3d	; 61
    f26e:	be b7       	in	r27, 0x3e	; 62
    f270:	17 96       	adiw	r26, 0x07	; 7
    f272:	0f b6       	in	r0, 0x3f	; 63
    f274:	f8 94       	cli
    f276:	be bf       	out	0x3e, r27	; 62
    f278:	0f be       	out	0x3f, r0	; 63
    f27a:	ad bf       	out	0x3d, r26	; 61
    f27c:	08 95       	ret

0000f27e <fdevopen>:
    f27e:	0f 93       	push	r16
    f280:	1f 93       	push	r17
    f282:	cf 93       	push	r28
    f284:	df 93       	push	r29
    f286:	00 97       	sbiw	r24, 0x00	; 0
    f288:	31 f4       	brne	.+12     	; 0xf296 <fdevopen+0x18>
    f28a:	61 15       	cp	r22, r1
    f28c:	71 05       	cpc	r23, r1
    f28e:	19 f4       	brne	.+6      	; 0xf296 <fdevopen+0x18>
    f290:	80 e0       	ldi	r24, 0x00	; 0
    f292:	90 e0       	ldi	r25, 0x00	; 0
    f294:	3a c0       	rjmp	.+116    	; 0xf30a <fdevopen+0x8c>
    f296:	8b 01       	movw	r16, r22
    f298:	ec 01       	movw	r28, r24
    f29a:	6e e0       	ldi	r22, 0x0E	; 14
    f29c:	70 e0       	ldi	r23, 0x00	; 0
    f29e:	81 e0       	ldi	r24, 0x01	; 1
    f2a0:	90 e0       	ldi	r25, 0x00	; 0
    f2a2:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safecalloc>
    f2a6:	fc 01       	movw	r30, r24
    f2a8:	89 2b       	or	r24, r25
    f2aa:	91 f3       	breq	.-28     	; 0xf290 <fdevopen+0x12>
    f2ac:	80 e8       	ldi	r24, 0x80	; 128
    f2ae:	83 83       	std	Z+3, r24	; 0x03
    f2b0:	01 15       	cp	r16, r1
    f2b2:	11 05       	cpc	r17, r1
    f2b4:	71 f0       	breq	.+28     	; 0xf2d2 <fdevopen+0x54>
    f2b6:	13 87       	std	Z+11, r17	; 0x0b
    f2b8:	02 87       	std	Z+10, r16	; 0x0a
    f2ba:	81 e8       	ldi	r24, 0x81	; 129
    f2bc:	83 83       	std	Z+3, r24	; 0x03
    f2be:	80 91 b5 1c 	lds	r24, 0x1CB5	; 0x801cb5 <__iob>
    f2c2:	90 91 b6 1c 	lds	r25, 0x1CB6	; 0x801cb6 <__iob+0x1>
    f2c6:	89 2b       	or	r24, r25
    f2c8:	21 f4       	brne	.+8      	; 0xf2d2 <fdevopen+0x54>
    f2ca:	f0 93 b6 1c 	sts	0x1CB6, r31	; 0x801cb6 <__iob+0x1>
    f2ce:	e0 93 b5 1c 	sts	0x1CB5, r30	; 0x801cb5 <__iob>
    f2d2:	20 97       	sbiw	r28, 0x00	; 0
    f2d4:	c9 f0       	breq	.+50     	; 0xf308 <fdevopen+0x8a>
    f2d6:	d1 87       	std	Z+9, r29	; 0x09
    f2d8:	c0 87       	std	Z+8, r28	; 0x08
    f2da:	83 81       	ldd	r24, Z+3	; 0x03
    f2dc:	82 60       	ori	r24, 0x02	; 2
    f2de:	83 83       	std	Z+3, r24	; 0x03
    f2e0:	80 91 b7 1c 	lds	r24, 0x1CB7	; 0x801cb7 <__iob+0x2>
    f2e4:	90 91 b8 1c 	lds	r25, 0x1CB8	; 0x801cb8 <__iob+0x3>
    f2e8:	89 2b       	or	r24, r25
    f2ea:	21 f4       	brne	.+8      	; 0xf2f4 <fdevopen+0x76>
    f2ec:	f0 93 b8 1c 	sts	0x1CB8, r31	; 0x801cb8 <__iob+0x3>
    f2f0:	e0 93 b7 1c 	sts	0x1CB7, r30	; 0x801cb7 <__iob+0x2>
    f2f4:	80 91 b9 1c 	lds	r24, 0x1CB9	; 0x801cb9 <__iob+0x4>
    f2f8:	90 91 ba 1c 	lds	r25, 0x1CBA	; 0x801cba <__iob+0x5>
    f2fc:	89 2b       	or	r24, r25
    f2fe:	21 f4       	brne	.+8      	; 0xf308 <fdevopen+0x8a>
    f300:	f0 93 ba 1c 	sts	0x1CBA, r31	; 0x801cba <__iob+0x5>
    f304:	e0 93 b9 1c 	sts	0x1CB9, r30	; 0x801cb9 <__iob+0x4>
    f308:	cf 01       	movw	r24, r30
    f30a:	df 91       	pop	r29
    f30c:	cf 91       	pop	r28
    f30e:	1f 91       	pop	r17
    f310:	0f 91       	pop	r16
    f312:	08 95       	ret

0000f314 <fat_time_to_unix>:
    f314:	a6 e1       	ldi	r26, 0x16	; 22
    f316:	b0 e0       	ldi	r27, 0x00	; 0
    f318:	e0 e9       	ldi	r30, 0x90	; 144
    f31a:	f9 e7       	ldi	r31, 0x79	; 121
    f31c:	0c 94 a3 e7 	jmp	0x1cf46	; 0x1cf46 <__prologue_saves__+0x20>
    f320:	fe 01       	movw	r30, r28
    f322:	31 96       	adiw	r30, 0x01	; 1
    f324:	26 e1       	ldi	r18, 0x16	; 22
    f326:	df 01       	movw	r26, r30
    f328:	1d 92       	st	X+, r1
    f32a:	2a 95       	dec	r18
    f32c:	e9 f7       	brne	.-6      	; 0xf328 <fat_time_to_unix+0x14>
    f32e:	9b 01       	movw	r18, r22
    f330:	22 0f       	add	r18, r18
    f332:	33 1f       	adc	r19, r19
    f334:	2e 73       	andi	r18, 0x3E	; 62
    f336:	33 27       	eor	r19, r19
    f338:	3a 83       	std	Y+2, r19	; 0x02
    f33a:	29 83       	std	Y+1, r18	; 0x01
    f33c:	9b 01       	movw	r18, r22
    f33e:	55 e0       	ldi	r21, 0x05	; 5
    f340:	36 95       	lsr	r19
    f342:	27 95       	ror	r18
    f344:	5a 95       	dec	r21
    f346:	e1 f7       	brne	.-8      	; 0xf340 <fat_time_to_unix+0x2c>
    f348:	2f 73       	andi	r18, 0x3F	; 63
    f34a:	33 27       	eor	r19, r19
    f34c:	3c 83       	std	Y+4, r19	; 0x04
    f34e:	2b 83       	std	Y+3, r18	; 0x03
    f350:	27 2f       	mov	r18, r23
    f352:	26 95       	lsr	r18
    f354:	26 95       	lsr	r18
    f356:	26 95       	lsr	r18
    f358:	2d 83       	std	Y+5, r18	; 0x05
    f35a:	1e 82       	std	Y+6, r1	; 0x06
    f35c:	9c 01       	movw	r18, r24
    f35e:	2f 71       	andi	r18, 0x1F	; 31
    f360:	33 27       	eor	r19, r19
    f362:	38 87       	std	Y+8, r19	; 0x08
    f364:	2f 83       	std	Y+7, r18	; 0x07
    f366:	9c 01       	movw	r18, r24
    f368:	65 e0       	ldi	r22, 0x05	; 5
    f36a:	36 95       	lsr	r19
    f36c:	27 95       	ror	r18
    f36e:	6a 95       	dec	r22
    f370:	e1 f7       	brne	.-8      	; 0xf36a <fat_time_to_unix+0x56>
    f372:	2f 70       	andi	r18, 0x0F	; 15
    f374:	33 27       	eor	r19, r19
    f376:	21 50       	subi	r18, 0x01	; 1
    f378:	31 09       	sbc	r19, r1
    f37a:	3a 87       	std	Y+10, r19	; 0x0a
    f37c:	29 87       	std	Y+9, r18	; 0x09
    f37e:	9c 01       	movw	r18, r24
    f380:	23 2f       	mov	r18, r19
    f382:	33 27       	eor	r19, r19
    f384:	26 95       	lsr	r18
    f386:	20 5b       	subi	r18, 0xB0	; 176
    f388:	3f 4f       	sbci	r19, 0xFF	; 255
    f38a:	3c 87       	std	Y+12, r19	; 0x0c
    f38c:	2b 87       	std	Y+11, r18	; 0x0b
    f38e:	cf 01       	movw	r24, r30
    f390:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <timegm>
    f394:	66 96       	adiw	r28, 0x16	; 22
    f396:	e2 e0       	ldi	r30, 0x02	; 2
    f398:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

0000f39c <stat>:
    f39c:	a6 e1       	ldi	r26, 0x16	; 22
    f39e:	b1 e0       	ldi	r27, 0x01	; 1
    f3a0:	e4 ed       	ldi	r30, 0xD4	; 212
    f3a2:	f9 e7       	ldi	r31, 0x79	; 121
    f3a4:	0c 94 9d e7 	jmp	0x1cf3a	; 0x1cf3a <__prologue_saves__+0x14>
    f3a8:	6c 01       	movw	r12, r24
    f3aa:	8b 01       	movw	r16, r22
    f3ac:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    f3b0:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    f3b4:	6a ee       	ldi	r22, 0xEA	; 234
    f3b6:	78 e0       	ldi	r23, 0x08	; 8
    f3b8:	0e 94 aa 32 	call	0x6554	; 0x6554 <MATCH>
    f3bc:	89 2b       	or	r24, r25
    f3be:	01 f1       	breq	.+64     	; 0xf400 <stat+0x64>
    f3c0:	f8 01       	movw	r30, r16
    f3c2:	14 a2       	std	Z+36, r1	; 0x24
    f3c4:	15 a2       	std	Z+37, r1	; 0x25
    f3c6:	16 a2       	std	Z+38, r1	; 0x26
    f3c8:	17 a2       	std	Z+39, r1	; 0x27
    f3ca:	10 a6       	std	Z+40, r1	; 0x28
    f3cc:	11 a6       	std	Z+41, r1	; 0x29
    f3ce:	12 a6       	std	Z+42, r1	; 0x2a
    f3d0:	13 a6       	std	Z+43, r1	; 0x2b
    f3d2:	14 a6       	std	Z+44, r1	; 0x2c
    f3d4:	15 a6       	std	Z+45, r1	; 0x2d
    f3d6:	16 a6       	std	Z+46, r1	; 0x2e
    f3d8:	17 a6       	std	Z+47, r1	; 0x2f
    f3da:	11 8a       	std	Z+17, r1	; 0x11
    f3dc:	10 8a       	std	Z+16, r1	; 0x10
    f3de:	13 8a       	std	Z+19, r1	; 0x13
    f3e0:	12 8a       	std	Z+18, r1	; 0x12
    f3e2:	10 8e       	std	Z+24, r1	; 0x18
    f3e4:	11 8e       	std	Z+25, r1	; 0x19
    f3e6:	12 8e       	std	Z+26, r1	; 0x1a
    f3e8:	13 8e       	std	Z+27, r1	; 0x1b
    f3ea:	80 e0       	ldi	r24, 0x00	; 0
    f3ec:	90 e4       	ldi	r25, 0x40	; 64
    f3ee:	a0 e0       	ldi	r26, 0x00	; 0
    f3f0:	b0 e0       	ldi	r27, 0x00	; 0
    f3f2:	80 87       	std	Z+8, r24	; 0x08
    f3f4:	91 87       	std	Z+9, r25	; 0x09
    f3f6:	a2 87       	std	Z+10, r26	; 0x0a
    f3f8:	b3 87       	std	Z+11, r27	; 0x0b
    f3fa:	e1 2c       	mov	r14, r1
    f3fc:	f1 2c       	mov	r15, r1
    f3fe:	62 c0       	rjmp	.+196    	; 0xf4c4 <stat+0x128>
    f400:	66 ea       	ldi	r22, 0xA6	; 166
    f402:	78 e0       	ldi	r23, 0x08	; 8
    f404:	c6 01       	movw	r24, r12
    f406:	0e 94 aa 32 	call	0x6554	; 0x6554 <MATCH>
    f40a:	89 2b       	or	r24, r25
    f40c:	c9 f6       	brne	.-78     	; 0xf3c0 <stat+0x24>
    f40e:	66 ee       	ldi	r22, 0xE6	; 230
    f410:	72 e1       	ldi	r23, 0x12	; 18
    f412:	c6 01       	movw	r24, r12
    f414:	0e 94 aa 32 	call	0x6554	; 0x6554 <MATCH>
    f418:	7c 01       	movw	r14, r24
    f41a:	89 2b       	or	r24, r25
    f41c:	89 f6       	brne	.-94     	; 0xf3c0 <stat+0x24>
    f41e:	be 01       	movw	r22, r28
    f420:	6f 5f       	subi	r22, 0xFF	; 255
    f422:	7f 4f       	sbci	r23, 0xFF	; 255
    f424:	c6 01       	movw	r24, r12
    f426:	0e 94 62 64 	call	0xc8c4	; 0xc8c4 <f_stat>
    f42a:	00 97       	sbiw	r24, 0x00	; 0
    f42c:	a9 f0       	breq	.+42     	; 0xf458 <stat+0xbc>
    f42e:	84 31       	cpi	r24, 0x14	; 20
    f430:	91 05       	cpc	r25, r1
    f432:	40 f4       	brcc	.+16     	; 0xf444 <stat+0xa8>
    f434:	fc 01       	movw	r30, r24
    f436:	ec 56       	subi	r30, 0x6C	; 108
    f438:	f4 4f       	sbci	r31, 0xF4	; 244
    f43a:	80 81       	ld	r24, Z
    f43c:	08 2e       	mov	r0, r24
    f43e:	00 0c       	add	r0, r0
    f440:	99 0b       	sbc	r25, r25
    f442:	02 c0       	rjmp	.+4      	; 0xf448 <stat+0xac>
    f444:	83 e2       	ldi	r24, 0x23	; 35
    f446:	90 e0       	ldi	r25, 0x00	; 0
    f448:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f44c:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f450:	ee 24       	eor	r14, r14
    f452:	ea 94       	dec	r14
    f454:	fe 2c       	mov	r15, r14
    f456:	36 c0       	rjmp	.+108    	; 0xf4c4 <stat+0x128>
    f458:	89 81       	ldd	r24, Y+1	; 0x01
    f45a:	9a 81       	ldd	r25, Y+2	; 0x02
    f45c:	ab 81       	ldd	r26, Y+3	; 0x03
    f45e:	bc 81       	ldd	r27, Y+4	; 0x04
    f460:	f8 01       	movw	r30, r16
    f462:	80 8f       	std	Z+24, r24	; 0x18
    f464:	91 8f       	std	Z+25, r25	; 0x19
    f466:	a2 8f       	std	Z+26, r26	; 0x1a
    f468:	b3 8f       	std	Z+27, r27	; 0x1b
    f46a:	6f 81       	ldd	r22, Y+7	; 0x07
    f46c:	78 85       	ldd	r23, Y+8	; 0x08
    f46e:	8d 81       	ldd	r24, Y+5	; 0x05
    f470:	9e 81       	ldd	r25, Y+6	; 0x06
    f472:	50 df       	rcall	.-352    	; 0xf314 <fat_time_to_unix>
    f474:	f8 01       	movw	r30, r16
    f476:	64 a3       	std	Z+36, r22	; 0x24
    f478:	75 a3       	std	Z+37, r23	; 0x25
    f47a:	86 a3       	std	Z+38, r24	; 0x26
    f47c:	97 a3       	std	Z+39, r25	; 0x27
    f47e:	60 a7       	std	Z+40, r22	; 0x28
    f480:	71 a7       	std	Z+41, r23	; 0x29
    f482:	82 a7       	std	Z+42, r24	; 0x2a
    f484:	93 a7       	std	Z+43, r25	; 0x2b
    f486:	64 a7       	std	Z+44, r22	; 0x2c
    f488:	75 a7       	std	Z+45, r23	; 0x2d
    f48a:	86 a7       	std	Z+46, r24	; 0x2e
    f48c:	97 a7       	std	Z+47, r25	; 0x2f
    f48e:	29 85       	ldd	r18, Y+9	; 0x09
    f490:	20 fd       	sbrc	r18, 0
    f492:	03 c0       	rjmp	.+6      	; 0xf49a <stat+0xfe>
    f494:	8f ef       	ldi	r24, 0xFF	; 255
    f496:	91 e0       	ldi	r25, 0x01	; 1
    f498:	02 c0       	rjmp	.+4      	; 0xf49e <stat+0x102>
    f49a:	8d e6       	ldi	r24, 0x6D	; 109
    f49c:	91 e0       	ldi	r25, 0x01	; 1
    f49e:	48 ee       	ldi	r20, 0xE8	; 232
    f4a0:	53 e0       	ldi	r21, 0x03	; 3
    f4a2:	f8 01       	movw	r30, r16
    f4a4:	51 8b       	std	Z+17, r21	; 0x11
    f4a6:	40 8b       	std	Z+16, r20	; 0x10
    f4a8:	53 8b       	std	Z+19, r21	; 0x13
    f4aa:	42 8b       	std	Z+18, r20	; 0x12
    f4ac:	24 ff       	sbrs	r18, 4
    f4ae:	02 c0       	rjmp	.+4      	; 0xf4b4 <stat+0x118>
    f4b0:	90 64       	ori	r25, 0x40	; 64
    f4b2:	01 c0       	rjmp	.+2      	; 0xf4b6 <stat+0x11a>
    f4b4:	90 68       	ori	r25, 0x80	; 128
    f4b6:	a0 e0       	ldi	r26, 0x00	; 0
    f4b8:	b0 e0       	ldi	r27, 0x00	; 0
    f4ba:	f8 01       	movw	r30, r16
    f4bc:	80 87       	std	Z+8, r24	; 0x08
    f4be:	91 87       	std	Z+9, r25	; 0x09
    f4c0:	a2 87       	std	Z+10, r26	; 0x0a
    f4c2:	b3 87       	std	Z+11, r27	; 0x0b
    f4c4:	c7 01       	movw	r24, r14
    f4c6:	ca 5e       	subi	r28, 0xEA	; 234
    f4c8:	de 4f       	sbci	r29, 0xFE	; 254
    f4ca:	e8 e0       	ldi	r30, 0x08	; 8
    f4cc:	0c 94 b9 e7 	jmp	0x1cf72	; 0x1cf72 <__epilogue_restores__+0x14>

0000f4d0 <unix_time_to_fat>:
    f4d0:	a4 e0       	ldi	r26, 0x04	; 4
    f4d2:	b0 e0       	ldi	r27, 0x00	; 0
    f4d4:	ee e6       	ldi	r30, 0x6E	; 110
    f4d6:	fa e7       	ldi	r31, 0x7A	; 122
    f4d8:	0c 94 9f e7 	jmp	0x1cf3e	; 0x1cf3e <__prologue_saves__+0x18>
    f4dc:	69 83       	std	Y+1, r22	; 0x01
    f4de:	7a 83       	std	Y+2, r23	; 0x02
    f4e0:	8b 83       	std	Y+3, r24	; 0x03
    f4e2:	9c 83       	std	Y+4, r25	; 0x04
    f4e4:	7a 01       	movw	r14, r20
    f4e6:	89 01       	movw	r16, r18
    f4e8:	ce 01       	movw	r24, r28
    f4ea:	01 96       	adiw	r24, 0x01	; 1
    f4ec:	0e 94 19 38 	call	0x7032	; 0x7032 <gmtime>
    f4f0:	fc 01       	movw	r30, r24
    f4f2:	22 85       	ldd	r18, Z+10	; 0x0a
    f4f4:	33 85       	ldd	r19, Z+11	; 0x0b
    f4f6:	20 55       	subi	r18, 0x50	; 80
    f4f8:	31 09       	sbc	r19, r1
    f4fa:	c9 01       	movw	r24, r18
    f4fc:	98 2f       	mov	r25, r24
    f4fe:	88 27       	eor	r24, r24
    f500:	99 0f       	add	r25, r25
    f502:	20 85       	ldd	r18, Z+8	; 0x08
    f504:	31 85       	ldd	r19, Z+9	; 0x09
    f506:	2f 5f       	subi	r18, 0xFF	; 255
    f508:	3f 4f       	sbci	r19, 0xFF	; 255
    f50a:	45 e0       	ldi	r20, 0x05	; 5
    f50c:	22 0f       	add	r18, r18
    f50e:	33 1f       	adc	r19, r19
    f510:	4a 95       	dec	r20
    f512:	e1 f7       	brne	.-8      	; 0xf50c <unix_time_to_fat+0x3c>
    f514:	28 2b       	or	r18, r24
    f516:	39 2b       	or	r19, r25
    f518:	86 81       	ldd	r24, Z+6	; 0x06
    f51a:	97 81       	ldd	r25, Z+7	; 0x07
    f51c:	28 2b       	or	r18, r24
    f51e:	39 2b       	or	r19, r25
    f520:	d7 01       	movw	r26, r14
    f522:	2d 93       	st	X+, r18
    f524:	3c 93       	st	X, r19
    f526:	84 81       	ldd	r24, Z+4	; 0x04
    f528:	20 e0       	ldi	r18, 0x00	; 0
    f52a:	30 e0       	ldi	r19, 0x00	; 0
    f52c:	38 2f       	mov	r19, r24
    f52e:	33 0f       	add	r19, r19
    f530:	33 0f       	add	r19, r19
    f532:	33 0f       	add	r19, r19
    f534:	82 81       	ldd	r24, Z+2	; 0x02
    f536:	93 81       	ldd	r25, Z+3	; 0x03
    f538:	55 e0       	ldi	r21, 0x05	; 5
    f53a:	88 0f       	add	r24, r24
    f53c:	99 1f       	adc	r25, r25
    f53e:	5a 95       	dec	r21
    f540:	e1 f7       	brne	.-8      	; 0xf53a <unix_time_to_fat+0x6a>
    f542:	82 2b       	or	r24, r18
    f544:	93 2b       	or	r25, r19
    f546:	20 81       	ld	r18, Z
    f548:	31 81       	ldd	r19, Z+1	; 0x01
    f54a:	36 95       	lsr	r19
    f54c:	27 95       	ror	r18
    f54e:	82 2b       	or	r24, r18
    f550:	93 2b       	or	r25, r19
    f552:	f8 01       	movw	r30, r16
    f554:	91 83       	std	Z+1, r25	; 0x01
    f556:	80 83       	st	Z, r24
    f558:	24 96       	adiw	r28, 0x04	; 4
    f55a:	e6 e0       	ldi	r30, 0x06	; 6
    f55c:	0c 94 bb e7 	jmp	0x1cf76	; 0x1cf76 <__epilogue_restores__+0x18>

0000f560 <utime>:
    f560:	aa e1       	ldi	r26, 0x1A	; 26
    f562:	b1 e0       	ldi	r27, 0x01	; 1
    f564:	e6 eb       	ldi	r30, 0xB6	; 182
    f566:	fa e7       	ldi	r31, 0x7A	; 122
    f568:	0c 94 a1 e7 	jmp	0x1cf42	; 0x1cf42 <__prologue_saves__+0x1c>
    f56c:	8c 01       	movw	r16, r24
    f56e:	61 15       	cp	r22, r1
    f570:	71 05       	cpc	r23, r1
    f572:	31 f0       	breq	.+12     	; 0xf580 <utime+0x20>
    f574:	fb 01       	movw	r30, r22
    f576:	64 81       	ldd	r22, Z+4	; 0x04
    f578:	75 81       	ldd	r23, Z+5	; 0x05
    f57a:	86 81       	ldd	r24, Z+6	; 0x06
    f57c:	97 81       	ldd	r25, Z+7	; 0x07
    f57e:	04 c0       	rjmp	.+8      	; 0xf588 <utime+0x28>
    f580:	80 e0       	ldi	r24, 0x00	; 0
    f582:	90 e0       	ldi	r25, 0x00	; 0
    f584:	0e 94 73 38 	call	0x70e6	; 0x70e6 <time>
    f588:	9e 01       	movw	r18, r28
    f58a:	29 5e       	subi	r18, 0xE9	; 233
    f58c:	3e 4f       	sbci	r19, 0xFE	; 254
    f58e:	ae 01       	movw	r20, r28
    f590:	47 5e       	subi	r20, 0xE7	; 231
    f592:	5e 4f       	sbci	r21, 0xFE	; 254
    f594:	9d df       	rcall	.-198    	; 0xf4d0 <unix_time_to_fat>
    f596:	c7 5e       	subi	r28, 0xE7	; 231
    f598:	de 4f       	sbci	r29, 0xFE	; 254
    f59a:	88 81       	ld	r24, Y
    f59c:	99 81       	ldd	r25, Y+1	; 0x01
    f59e:	c9 51       	subi	r28, 0x19	; 25
    f5a0:	d1 40       	sbci	r29, 0x01	; 1
    f5a2:	9e 83       	std	Y+6, r25	; 0x06
    f5a4:	8d 83       	std	Y+5, r24	; 0x05
    f5a6:	c9 5e       	subi	r28, 0xE9	; 233
    f5a8:	de 4f       	sbci	r29, 0xFE	; 254
    f5aa:	88 81       	ld	r24, Y
    f5ac:	99 81       	ldd	r25, Y+1	; 0x01
    f5ae:	c7 51       	subi	r28, 0x17	; 23
    f5b0:	d1 40       	sbci	r29, 0x01	; 1
    f5b2:	98 87       	std	Y+8, r25	; 0x08
    f5b4:	8f 83       	std	Y+7, r24	; 0x07
    f5b6:	be 01       	movw	r22, r28
    f5b8:	6f 5f       	subi	r22, 0xFF	; 255
    f5ba:	7f 4f       	sbci	r23, 0xFF	; 255
    f5bc:	c8 01       	movw	r24, r16
    f5be:	0e 94 79 68 	call	0xd0f2	; 0xd0f2 <f_utime>
    f5c2:	84 31       	cpi	r24, 0x14	; 20
    f5c4:	91 05       	cpc	r25, r1
    f5c6:	40 f4       	brcc	.+16     	; 0xf5d8 <utime+0x78>
    f5c8:	fc 01       	movw	r30, r24
    f5ca:	ec 56       	subi	r30, 0x6C	; 108
    f5cc:	f4 4f       	sbci	r31, 0xF4	; 244
    f5ce:	80 81       	ld	r24, Z
    f5d0:	08 2e       	mov	r0, r24
    f5d2:	00 0c       	add	r0, r0
    f5d4:	99 0b       	sbc	r25, r25
    f5d6:	02 c0       	rjmp	.+4      	; 0xf5dc <utime+0x7c>
    f5d8:	83 e2       	ldi	r24, 0x23	; 35
    f5da:	90 e0       	ldi	r25, 0x00	; 0
    f5dc:	c6 5e       	subi	r28, 0xE6	; 230
    f5de:	de 4f       	sbci	r29, 0xFE	; 254
    f5e0:	e4 e0       	ldi	r30, 0x04	; 4
    f5e2:	0c 94 bd e7 	jmp	0x1cf7a	; 0x1cf7a <__epilogue_restores__+0x1c>

0000f5e6 <fileno_to_fatfs>:
    f5e6:	83 30       	cpi	r24, 0x03	; 3
    f5e8:	91 05       	cpc	r25, r1
    f5ea:	48 f4       	brcc	.+18     	; 0xf5fe <fileno_to_fatfs+0x18>
    f5ec:	89 e0       	ldi	r24, 0x09	; 9
    f5ee:	90 e0       	ldi	r25, 0x00	; 0
    f5f0:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f5f4:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f5f8:	80 e0       	ldi	r24, 0x00	; 0
    f5fa:	90 e0       	ldi	r25, 0x00	; 0
    f5fc:	08 95       	ret
    f5fe:	60 dc       	rcall	.-1856   	; 0xeec0 <fileno_to_stream>
    f600:	00 97       	sbiw	r24, 0x00	; 0
    f602:	d1 f3       	breq	.-12     	; 0xf5f8 <fileno_to_fatfs+0x12>
    f604:	fc 01       	movw	r30, r24
    f606:	84 85       	ldd	r24, Z+12	; 0x0c
    f608:	95 85       	ldd	r25, Z+13	; 0x0d
    f60a:	00 97       	sbiw	r24, 0x00	; 0
    f60c:	79 f3       	breq	.-34     	; 0xf5ec <fileno_to_fatfs+0x6>
    f60e:	08 95       	ret

0000f610 <ftell>:
    f610:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    f614:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    f618:	37 dc       	rcall	.-1938   	; 0xee88 <fileno>
    f61a:	83 30       	cpi	r24, 0x03	; 3
    f61c:	91 05       	cpc	r25, r1
    f61e:	48 f0       	brcs	.+18     	; 0xf632 <ftell+0x22>
    f620:	e2 df       	rcall	.-60     	; 0xf5e6 <fileno_to_fatfs>
    f622:	00 97       	sbiw	r24, 0x00	; 0
    f624:	51 f4       	brne	.+20     	; 0xf63a <ftell+0x2a>
    f626:	89 e0       	ldi	r24, 0x09	; 9
    f628:	90 e0       	ldi	r25, 0x00	; 0
    f62a:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f62e:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f632:	6f ef       	ldi	r22, 0xFF	; 255
    f634:	7f ef       	ldi	r23, 0xFF	; 255
    f636:	cb 01       	movw	r24, r22
    f638:	08 95       	ret
    f63a:	fc 01       	movw	r30, r24
    f63c:	60 89       	ldd	r22, Z+16	; 0x10
    f63e:	71 89       	ldd	r23, Z+17	; 0x11
    f640:	82 89       	ldd	r24, Z+18	; 0x12
    f642:	93 89       	ldd	r25, Z+19	; 0x13
    f644:	08 95       	ret

0000f646 <lseek>:
    f646:	a3 e0       	ldi	r26, 0x03	; 3
    f648:	b0 e0       	ldi	r27, 0x00	; 0
    f64a:	e9 e2       	ldi	r30, 0x29	; 41
    f64c:	fb e7       	ldi	r31, 0x7B	; 123
    f64e:	0c 94 9b e7 	jmp	0x1cf36	; 0x1cf36 <__prologue_saves__+0x10>
    f652:	5c 01       	movw	r10, r24
    f654:	6a 01       	movw	r12, r20
    f656:	7b 01       	movw	r14, r22
    f658:	89 01       	movw	r16, r18
    f65a:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    f65e:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    f662:	c1 df       	rcall	.-126    	; 0xf5e6 <fileno_to_fatfs>
    f664:	ec 01       	movw	r28, r24
    f666:	89 2b       	or	r24, r25
    f668:	19 f4       	brne	.+6      	; 0xf670 <lseek+0x2a>
    f66a:	88 e1       	ldi	r24, 0x18	; 24
    f66c:	90 e0       	ldi	r25, 0x00	; 0
    f66e:	26 c0       	rjmp	.+76     	; 0xf6bc <lseek+0x76>
    f670:	83 e0       	ldi	r24, 0x03	; 3
    f672:	a8 16       	cp	r10, r24
    f674:	b1 04       	cpc	r11, r1
    f676:	d0 f1       	brcs	.+116    	; 0xf6ec <lseek+0xa6>
    f678:	c5 01       	movw	r24, r10
    f67a:	22 dc       	rcall	.-1980   	; 0xeec0 <fileno_to_stream>
    f67c:	fc 01       	movw	r30, r24
    f67e:	93 81       	ldd	r25, Z+3	; 0x03
    f680:	90 64       	ori	r25, 0x40	; 64
    f682:	93 83       	std	Z+3, r25	; 0x03
    f684:	02 30       	cpi	r16, 0x02	; 2
    f686:	11 05       	cpc	r17, r1
    f688:	a9 f5       	brne	.+106    	; 0xf6f4 <lseek+0xae>
    f68a:	8a 85       	ldd	r24, Y+10	; 0x0a
    f68c:	9b 85       	ldd	r25, Y+11	; 0x0b
    f68e:	ac 85       	ldd	r26, Y+12	; 0x0c
    f690:	bd 85       	ldd	r27, Y+13	; 0x0d
    f692:	c8 0e       	add	r12, r24
    f694:	d9 1e       	adc	r13, r25
    f696:	ea 1e       	adc	r14, r26
    f698:	fb 1e       	adc	r15, r27
    f69a:	b7 01       	movw	r22, r14
    f69c:	a6 01       	movw	r20, r12
    f69e:	ce 01       	movw	r24, r28
    f6a0:	0e 94 dd 60 	call	0xc1ba	; 0xc1ba <f_lseek>
    f6a4:	00 97       	sbiw	r24, 0x00	; 0
    f6a6:	79 f0       	breq	.+30     	; 0xf6c6 <lseek+0x80>
    f6a8:	84 31       	cpi	r24, 0x14	; 20
    f6aa:	91 05       	cpc	r25, r1
    f6ac:	58 f5       	brcc	.+86     	; 0xf704 <lseek+0xbe>
    f6ae:	fc 01       	movw	r30, r24
    f6b0:	ec 56       	subi	r30, 0x6C	; 108
    f6b2:	f4 4f       	sbci	r31, 0xF4	; 244
    f6b4:	80 81       	ld	r24, Z
    f6b6:	08 2e       	mov	r0, r24
    f6b8:	00 0c       	add	r0, r0
    f6ba:	99 0b       	sbc	r25, r25
    f6bc:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f6c0:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f6c4:	13 c0       	rjmp	.+38     	; 0xf6ec <lseek+0xa6>
    f6c6:	68 89       	ldd	r22, Y+16	; 0x10
    f6c8:	79 89       	ldd	r23, Y+17	; 0x11
    f6ca:	8a 89       	ldd	r24, Y+18	; 0x12
    f6cc:	9b 89       	ldd	r25, Y+19	; 0x13
    f6ce:	c6 16       	cp	r12, r22
    f6d0:	d7 06       	cpc	r13, r23
    f6d2:	e8 06       	cpc	r14, r24
    f6d4:	f9 06       	cpc	r15, r25
    f6d6:	c9 f0       	breq	.+50     	; 0xf70a <lseek+0xc4>
    f6d8:	86 e9       	ldi	r24, 0x96	; 150
    f6da:	9b e0       	ldi	r25, 0x0B	; 11
    f6dc:	a0 e0       	ldi	r26, 0x00	; 0
    f6de:	ed b7       	in	r30, 0x3d	; 61
    f6e0:	fe b7       	in	r31, 0x3e	; 62
    f6e2:	81 83       	std	Z+1, r24	; 0x01
    f6e4:	92 83       	std	Z+2, r25	; 0x02
    f6e6:	a3 83       	std	Z+3, r26	; 0x03
    f6e8:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    f6ec:	6f ef       	ldi	r22, 0xFF	; 255
    f6ee:	7f ef       	ldi	r23, 0xFF	; 255
    f6f0:	cb 01       	movw	r24, r22
    f6f2:	0b c0       	rjmp	.+22     	; 0xf70a <lseek+0xc4>
    f6f4:	01 30       	cpi	r16, 0x01	; 1
    f6f6:	11 05       	cpc	r17, r1
    f6f8:	81 f6       	brne	.-96     	; 0xf69a <lseek+0x54>
    f6fa:	88 89       	ldd	r24, Y+16	; 0x10
    f6fc:	99 89       	ldd	r25, Y+17	; 0x11
    f6fe:	aa 89       	ldd	r26, Y+18	; 0x12
    f700:	bb 89       	ldd	r27, Y+19	; 0x13
    f702:	c7 cf       	rjmp	.-114    	; 0xf692 <lseek+0x4c>
    f704:	83 e2       	ldi	r24, 0x23	; 35
    f706:	90 e0       	ldi	r25, 0x00	; 0
    f708:	d9 cf       	rjmp	.-78     	; 0xf6bc <lseek+0x76>
    f70a:	cd b7       	in	r28, 0x3d	; 61
    f70c:	de b7       	in	r29, 0x3e	; 62
    f70e:	23 96       	adiw	r28, 0x03	; 3
    f710:	ea e0       	ldi	r30, 0x0A	; 10
    f712:	0c 94 b7 e7 	jmp	0x1cf6e	; 0x1cf6e <__epilogue_restores__+0x10>

0000f716 <fseek>:
    f716:	cf 92       	push	r12
    f718:	df 92       	push	r13
    f71a:	ef 92       	push	r14
    f71c:	ff 92       	push	r15
    f71e:	cf 93       	push	r28
    f720:	df 93       	push	r29
    f722:	6a 01       	movw	r12, r20
    f724:	7b 01       	movw	r14, r22
    f726:	e9 01       	movw	r28, r18
    f728:	af db       	rcall	.-2210   	; 0xee88 <fileno>
    f72a:	97 fd       	sbrc	r25, 7
    f72c:	12 c0       	rjmp	.+36     	; 0xf752 <fseek+0x3c>
    f72e:	9e 01       	movw	r18, r28
    f730:	b7 01       	movw	r22, r14
    f732:	a6 01       	movw	r20, r12
    f734:	88 df       	rcall	.-240    	; 0xf646 <lseek>
    f736:	21 e0       	ldi	r18, 0x01	; 1
    f738:	30 e0       	ldi	r19, 0x00	; 0
    f73a:	6f 3f       	cpi	r22, 0xFF	; 255
    f73c:	7f 4f       	sbci	r23, 0xFF	; 255
    f73e:	8f 4f       	sbci	r24, 0xFF	; 255
    f740:	9f 4f       	sbci	r25, 0xFF	; 255
    f742:	11 f0       	breq	.+4      	; 0xf748 <fseek+0x32>
    f744:	20 e0       	ldi	r18, 0x00	; 0
    f746:	30 e0       	ldi	r19, 0x00	; 0
    f748:	88 27       	eor	r24, r24
    f74a:	99 27       	eor	r25, r25
    f74c:	82 1b       	sub	r24, r18
    f74e:	93 0b       	sbc	r25, r19
    f750:	02 c0       	rjmp	.+4      	; 0xf756 <fseek+0x40>
    f752:	8f ef       	ldi	r24, 0xFF	; 255
    f754:	9f ef       	ldi	r25, 0xFF	; 255
    f756:	df 91       	pop	r29
    f758:	cf 91       	pop	r28
    f75a:	ff 90       	pop	r15
    f75c:	ef 90       	pop	r14
    f75e:	df 90       	pop	r13
    f760:	cf 90       	pop	r12
    f762:	08 95       	ret

0000f764 <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f764:	a2 e0       	ldi	r26, 0x02	; 2
    f766:	b0 e0       	ldi	r27, 0x00	; 0
    f768:	e8 eb       	ldi	r30, 0xB8	; 184
    f76a:	fb e7       	ldi	r31, 0x7B	; 123
    f76c:	0c 94 9b e7 	jmp	0x1cf36	; 0x1cf36 <__prologue_saves__+0x10>
    f770:	5c 01       	movw	r10, r24
    f772:	8b 01       	movw	r16, r22
    f774:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

//FIXME
    *(char *) buf = 0;
    f776:	fb 01       	movw	r30, r22
    f778:	10 82       	st	Z, r1

    errno = 0;
    f77a:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    f77e:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>

// TTY read function
// FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f782:	9e db       	rcall	.-2244   	; 0xeec0 <fileno_to_stream>
    f784:	7c 01       	movw	r14, r24
    if(stream == stdin)
    f786:	80 91 b5 1c 	lds	r24, 0x1CB5	; 0x801cb5 <__iob>
    f78a:	90 91 b6 1c 	lds	r25, 0x1CB6	; 0x801cb6 <__iob+0x1>
    f78e:	e8 16       	cp	r14, r24
    f790:	f9 06       	cpc	r15, r25
    f792:	c9 f4       	brne	.+50     	; 0xf7c6 <read+0x62>
    {
        char *ptr = (char *) buf;
// ungetc is undefined for read
        stream->flags |= __SUNGET;
    f794:	f7 01       	movw	r30, r14
    f796:	83 81       	ldd	r24, Z+3	; 0x03
    f798:	80 64       	ori	r24, 0x40	; 64
    f79a:	83 83       	std	Z+3, r24	; 0x03
        size = 0;
    f79c:	1a 82       	std	Y+2, r1	; 0x02
    f79e:	19 82       	std	Y+1, r1	; 0x01
    f7a0:	c0 0e       	add	r12, r16
    f7a2:	d1 1e       	adc	r13, r17
        while(count--)
    f7a4:	0c 15       	cp	r16, r12
    f7a6:	1d 05       	cpc	r17, r13
    f7a8:	09 f4       	brne	.+2      	; 0xf7ac <read+0x48>
    f7aa:	3d c0       	rjmp	.+122    	; 0xf826 <read+0xc2>
        {
            ret = fgetc(stream);
    f7ac:	c7 01       	movw	r24, r14
    f7ae:	48 da       	rcall	.-2928   	; 0xec40 <fgetc>
            if(ret < 0)
    f7b0:	97 fd       	sbrc	r25, 7
    f7b2:	39 c0       	rjmp	.+114    	; 0xf826 <read+0xc2>
                break;

            *ptr++ = ret;
    f7b4:	f8 01       	movw	r30, r16
    f7b6:	81 93       	st	Z+, r24
    f7b8:	8f 01       	movw	r16, r30
            ++size;
    f7ba:	89 81       	ldd	r24, Y+1	; 0x01
    f7bc:	9a 81       	ldd	r25, Y+2	; 0x02
    f7be:	01 96       	adiw	r24, 0x01	; 1
    f7c0:	9a 83       	std	Y+2, r25	; 0x02
    f7c2:	89 83       	std	Y+1, r24	; 0x01
    f7c4:	ef cf       	rjmp	.-34     	; 0xf7a4 <read+0x40>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f7c6:	80 91 b7 1c 	lds	r24, 0x1CB7	; 0x801cb7 <__iob+0x2>
    f7ca:	90 91 b8 1c 	lds	r25, 0x1CB8	; 0x801cb8 <__iob+0x3>
    f7ce:	e8 16       	cp	r14, r24
    f7d0:	f9 06       	cpc	r15, r25
    f7d2:	71 f1       	breq	.+92     	; 0xf830 <read+0xcc>
    f7d4:	80 91 b9 1c 	lds	r24, 0x1CB9	; 0x801cb9 <__iob+0x4>
    f7d8:	90 91 ba 1c 	lds	r25, 0x1CBA	; 0x801cba <__iob+0x5>
    f7dc:	e8 16       	cp	r14, r24
    f7de:	f9 06       	cpc	r15, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f7e0:	39 f1       	breq	.+78     	; 0xf830 <read+0xcc>
    f7e2:	c5 01       	movw	r24, r10
    f7e4:	00 df       	rcall	.-512    	; 0xf5e6 <fileno_to_fatfs>
    if ( fh == NULL )
    f7e6:	00 97       	sbiw	r24, 0x00	; 0
    f7e8:	19 f4       	brne	.+6      	; 0xf7f0 <read+0x8c>
    {
        errno = EBADF;
    f7ea:	89 e0       	ldi	r24, 0x09	; 9
    f7ec:	90 e0       	ldi	r25, 0x00	; 0
    f7ee:	16 c0       	rjmp	.+44     	; 0xf81c <read+0xb8>
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f7f0:	9e 01       	movw	r18, r28
    f7f2:	2f 5f       	subi	r18, 0xFF	; 255
    f7f4:	3f 4f       	sbci	r19, 0xFF	; 255
    f7f6:	a6 01       	movw	r20, r12
    f7f8:	b8 01       	movw	r22, r16
    f7fa:	0e 94 d1 5b 	call	0xb7a2	; 0xb7a2 <f_read>
    if(res != FR_OK)
    f7fe:	00 97       	sbiw	r24, 0x00	; 0
    f800:	91 f0       	breq	.+36     	; 0xf826 <read+0xc2>
    f802:	84 31       	cpi	r24, 0x14	; 20
    f804:	91 05       	cpc	r25, r1
    f806:	40 f4       	brcc	.+16     	; 0xf818 <read+0xb4>
    f808:	fc 01       	movw	r30, r24
    f80a:	ec 56       	subi	r30, 0x6C	; 108
    f80c:	f4 4f       	sbci	r31, 0xF4	; 244
    f80e:	80 81       	ld	r24, Z
    f810:	08 2e       	mov	r0, r24
    f812:	00 0c       	add	r0, r0
    f814:	99 0b       	sbc	r25, r25
    f816:	02 c0       	rjmp	.+4      	; 0xf81c <read+0xb8>
    f818:	83 e2       	ldi	r24, 0x23	; 35
    f81a:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f81c:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f820:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f824:	05 c0       	rjmp	.+10     	; 0xf830 <read+0xcc>
        return(-1);
    }
    return ((ssize_t) size);
    f826:	69 81       	ldd	r22, Y+1	; 0x01
    f828:	7a 81       	ldd	r23, Y+2	; 0x02
    f82a:	80 e0       	ldi	r24, 0x00	; 0
    f82c:	90 e0       	ldi	r25, 0x00	; 0
    f82e:	03 c0       	rjmp	.+6      	; 0xf836 <read+0xd2>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f830:	6f ef       	ldi	r22, 0xFF	; 255
    f832:	7f ef       	ldi	r23, 0xFF	; 255
    f834:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f836:	22 96       	adiw	r28, 0x02	; 2
    f838:	ea e0       	ldi	r30, 0x0A	; 10
    f83a:	0c 94 b7 e7 	jmp	0x1cf6e	; 0x1cf6e <__epilogue_restores__+0x10>

0000f83e <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f83e:	0f 93       	push	r16
    f840:	1f 93       	push	r17
    f842:	cf 93       	push	r28
    f844:	df 93       	push	r29
    f846:	ec 01       	movw	r28, r24
    f848:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f84a:	64 9f       	mul	r22, r20
    f84c:	80 01       	movw	r16, r0
    f84e:	65 9f       	mul	r22, r21
    f850:	10 0d       	add	r17, r0
    f852:	74 9f       	mul	r23, r20
    f854:	10 0d       	add	r17, r0
    f856:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f858:	17 db       	rcall	.-2514   	; 0xee88 <fileno>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f85a:	a8 01       	movw	r20, r16
    f85c:	be 01       	movw	r22, r28
    f85e:	82 df       	rcall	.-252    	; 0xf764 <read>
    if(ret < 0)
    f860:	97 fd       	sbrc	r25, 7
    f862:	02 c0       	rjmp	.+4      	; 0xf868 <fread+0x2a>
        return(0);

    return((size_t) ret);
    f864:	cb 01       	movw	r24, r22
    f866:	02 c0       	rjmp	.+4      	; 0xf86c <fread+0x2e>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f868:	80 e0       	ldi	r24, 0x00	; 0
    f86a:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f86c:	df 91       	pop	r29
    f86e:	cf 91       	pop	r28
    f870:	1f 91       	pop	r17
    f872:	0f 91       	pop	r16
    f874:	08 95       	ret

0000f876 <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f876:	cf 93       	push	r28
    f878:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f87a:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    f87e:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f882:	83 30       	cpi	r24, 0x03	; 3
    f884:	91 05       	cpc	r25, r1
    f886:	18 f4       	brcc	.+6      	; 0xf88e <syncfs+0x18>

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f888:	89 e0       	ldi	r24, 0x09	; 9
    f88a:	90 e0       	ldi	r25, 0x00	; 0
    f88c:	18 c0       	rjmp	.+48     	; 0xf8be <syncfs+0x48>
    f88e:	ec 01       	movw	r28, r24
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f890:	17 db       	rcall	.-2514   	; 0xeec0 <fileno_to_stream>
    f892:	fc 01       	movw	r30, r24
// reset unget on sync
    stream->flags |= __SUNGET;
    f894:	93 81       	ldd	r25, Z+3	; 0x03
    f896:	90 64       	ori	r25, 0x40	; 64
    f898:	93 83       	std	Z+3, r25	; 0x03

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f89a:	ce 01       	movw	r24, r28
    f89c:	a4 de       	rcall	.-696    	; 0xf5e6 <fileno_to_fatfs>
    if(fh == NULL)
    f89e:	00 97       	sbiw	r24, 0x00	; 0
    f8a0:	99 f3       	breq	.-26     	; 0xf888 <syncfs+0x12>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f8a2:	0e 94 b3 5e 	call	0xbd66	; 0xbd66 <f_sync>
    if (res != FR_OK)
    f8a6:	00 97       	sbiw	r24, 0x00	; 0
    f8a8:	a1 f0       	breq	.+40     	; 0xf8d2 <syncfs+0x5c>
    f8aa:	84 31       	cpi	r24, 0x14	; 20
    f8ac:	91 05       	cpc	r25, r1
    f8ae:	70 f4       	brcc	.+28     	; 0xf8cc <syncfs+0x56>
    f8b0:	fc 01       	movw	r30, r24
    f8b2:	ec 56       	subi	r30, 0x6C	; 108
    f8b4:	f4 4f       	sbci	r31, 0xF4	; 244
    f8b6:	80 81       	ld	r24, Z
    f8b8:	08 2e       	mov	r0, r24
    f8ba:	00 0c       	add	r0, r0
    f8bc:	99 0b       	sbc	r25, r25
    {
        errno = fatfs_to_errno(res);
    f8be:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f8c2:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
        return(-1);
    f8c6:	8f ef       	ldi	r24, 0xFF	; 255
    f8c8:	9f ef       	ldi	r25, 0xFF	; 255
    f8ca:	05 c0       	rjmp	.+10     	; 0xf8d6 <syncfs+0x60>
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f8cc:	83 e2       	ldi	r24, 0x23	; 35
    f8ce:	90 e0       	ldi	r25, 0x00	; 0
    f8d0:	f6 cf       	rjmp	.-20     	; 0xf8be <syncfs+0x48>
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f8d2:	80 e0       	ldi	r24, 0x00	; 0
    f8d4:	90 e0       	ldi	r25, 0x00	; 0
}
    f8d6:	df 91       	pop	r29
    f8d8:	cf 91       	pop	r28
    f8da:	08 95       	ret

0000f8dc <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f8dc:	cf 93       	push	r28
    f8de:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f8e0:	c0 e0       	ldi	r28, 0x00	; 0
    f8e2:	d0 e0       	ldi	r29, 0x00	; 0
    f8e4:	21 96       	adiw	r28, 0x01	; 1
    f8e6:	c0 31       	cpi	r28, 0x10	; 16
    f8e8:	d1 05       	cpc	r29, r1
    f8ea:	51 f0       	breq	.+20     	; 0xf900 <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f8ec:	c3 30       	cpi	r28, 0x03	; 3
    f8ee:	d1 05       	cpc	r29, r1
    f8f0:	cc f3       	brlt	.-14     	; 0xf8e4 <sync+0x8>
    {
        if(isatty(i))
            continue;

// fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f8f2:	ce 01       	movw	r24, r28
    f8f4:	78 de       	rcall	.-784    	; 0xf5e6 <fileno_to_fatfs>
        if(fh == NULL)
    f8f6:	89 2b       	or	r24, r25
    f8f8:	a9 f3       	breq	.-22     	; 0xf8e4 <sync+0x8>
            continue;

        (void ) syncfs(i);
    f8fa:	ce 01       	movw	r24, r28
    f8fc:	bc df       	rcall	.-136    	; 0xf876 <syncfs>
    f8fe:	f2 cf       	rjmp	.-28     	; 0xf8e4 <sync+0x8>
    }
}
    f900:	df 91       	pop	r29
    f902:	cf 91       	pop	r28
    f904:	08 95       	ret

0000f906 <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f906:	a2 e0       	ldi	r26, 0x02	; 2
    f908:	b0 e0       	ldi	r27, 0x00	; 0
    f90a:	e9 e8       	ldi	r30, 0x89	; 137
    f90c:	fc e7       	ldi	r31, 0x7C	; 124
    f90e:	0c 94 99 e7 	jmp	0x1cf32	; 0x1cf32 <__prologue_saves__+0xc>
    f912:	8c 01       	movw	r16, r24
    f914:	b6 2e       	mov	r11, r22
    f916:	f7 2e       	mov	r15, r23
    f918:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f91a:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    f91e:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>

// TTY read function
    stream = fileno_to_stream(fd);
    f922:	ce da       	rcall	.-2660   	; 0xeec0 <fileno_to_stream>
    f924:	6c 01       	movw	r12, r24
    if(stream == stdout || stream == stderr)
    f926:	80 91 b7 1c 	lds	r24, 0x1CB7	; 0x801cb7 <__iob+0x2>
    f92a:	90 91 b8 1c 	lds	r25, 0x1CB8	; 0x801cb8 <__iob+0x3>
    f92e:	c8 16       	cp	r12, r24
    f930:	d9 06       	cpc	r13, r25
    f932:	39 f0       	breq	.+14     	; 0xf942 <write+0x3c>
    f934:	80 91 b9 1c 	lds	r24, 0x1CB9	; 0x801cb9 <__iob+0x4>
    f938:	90 91 ba 1c 	lds	r25, 0x1CBA	; 0x801cba <__iob+0x5>
    f93c:	c8 16       	cp	r12, r24
    f93e:	d9 06       	cpc	r13, r25
    f940:	d1 f4       	brne	.+52     	; 0xf976 <write+0x70>
    {
        char *ptr = (char *) buf;
        size = 0;
    f942:	1a 82       	std	Y+2, r1	; 0x02
    f944:	19 82       	std	Y+1, r1	; 0x01
    f946:	0b 2d       	mov	r16, r11
    f948:	1f 2d       	mov	r17, r15
    f94a:	78 01       	movw	r14, r16
    f94c:	e8 0c       	add	r14, r8
    f94e:	f9 1c       	adc	r15, r9
        while(count--)
    f950:	0e 15       	cp	r16, r14
    f952:	1f 05       	cpc	r17, r15
    f954:	d1 f1       	breq	.+116    	; 0xf9ca <write+0xc4>
        {
            int c,ret;
            c = *ptr++;
    f956:	f8 01       	movw	r30, r16
    f958:	a1 90       	ld	r10, Z+
    f95a:	8f 01       	movw	r16, r30
    f95c:	b1 2c       	mov	r11, r1
            ret = fputc(c, stream);
    f95e:	b6 01       	movw	r22, r12
    f960:	c5 01       	movw	r24, r10
    f962:	c4 d9       	rcall	.-3192   	; 0xecec <fputc>
            if(c != ret)
    f964:	a8 16       	cp	r10, r24
    f966:	b9 06       	cpc	r11, r25
    f968:	81 f5       	brne	.+96     	; 0xf9ca <write+0xc4>
                break;

            ++size;
    f96a:	89 81       	ldd	r24, Y+1	; 0x01
    f96c:	9a 81       	ldd	r25, Y+2	; 0x02
    f96e:	01 96       	adiw	r24, 0x01	; 1
    f970:	9a 83       	std	Y+2, r25	; 0x02
    f972:	89 83       	std	Y+1, r24	; 0x01
    f974:	ed cf       	rjmp	.-38     	; 0xf950 <write+0x4a>
        }
        return(size);
    }
    if(stream == stdin)
    f976:	80 91 b5 1c 	lds	r24, 0x1CB5	; 0x801cb5 <__iob>
    f97a:	90 91 b6 1c 	lds	r25, 0x1CB6	; 0x801cb6 <__iob+0x1>
    f97e:	c8 16       	cp	r12, r24
    f980:	d9 06       	cpc	r13, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f982:	41 f1       	breq	.+80     	; 0xf9d4 <write+0xce>
    f984:	c8 01       	movw	r24, r16
    f986:	2f de       	rcall	.-930    	; 0xf5e6 <fileno_to_fatfs>
    if ( fh == NULL )
    f988:	00 97       	sbiw	r24, 0x00	; 0
    f98a:	19 f4       	brne	.+6      	; 0xf992 <write+0x8c>
    {
        errno = EBADF;
    f98c:	89 e0       	ldi	r24, 0x09	; 9
    f98e:	90 e0       	ldi	r25, 0x00	; 0
    f990:	17 c0       	rjmp	.+46     	; 0xf9c0 <write+0xba>
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    f992:	9e 01       	movw	r18, r28
    f994:	2f 5f       	subi	r18, 0xFF	; 255
    f996:	3f 4f       	sbci	r19, 0xFF	; 255
    f998:	a4 01       	movw	r20, r8
    f99a:	6b 2d       	mov	r22, r11
    f99c:	7f 2d       	mov	r23, r15
    f99e:	0e 94 1c 5d 	call	0xba38	; 0xba38 <f_write>
    if(res != FR_OK)
    f9a2:	00 97       	sbiw	r24, 0x00	; 0
    f9a4:	91 f0       	breq	.+36     	; 0xf9ca <write+0xc4>
    f9a6:	84 31       	cpi	r24, 0x14	; 20
    f9a8:	91 05       	cpc	r25, r1
    f9aa:	40 f4       	brcc	.+16     	; 0xf9bc <write+0xb6>
    f9ac:	fc 01       	movw	r30, r24
    f9ae:	ec 56       	subi	r30, 0x6C	; 108
    f9b0:	f4 4f       	sbci	r31, 0xF4	; 244
    f9b2:	80 81       	ld	r24, Z
    f9b4:	08 2e       	mov	r0, r24
    f9b6:	00 0c       	add	r0, r0
    f9b8:	99 0b       	sbc	r25, r25
    f9ba:	02 c0       	rjmp	.+4      	; 0xf9c0 <write+0xba>
    f9bc:	83 e2       	ldi	r24, 0x23	; 35
    f9be:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f9c0:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f9c4:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f9c8:	05 c0       	rjmp	.+10     	; 0xf9d4 <write+0xce>
        return(-1);
    }
    return ((ssize_t) size);
    f9ca:	69 81       	ldd	r22, Y+1	; 0x01
    f9cc:	7a 81       	ldd	r23, Y+2	; 0x02
    f9ce:	80 e0       	ldi	r24, 0x00	; 0
    f9d0:	90 e0       	ldi	r25, 0x00	; 0
    f9d2:	03 c0       	rjmp	.+6      	; 0xf9da <write+0xd4>
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    f9d4:	6f ef       	ldi	r22, 0xFF	; 255
    f9d6:	7f ef       	ldi	r23, 0xFF	; 255
    f9d8:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f9da:	22 96       	adiw	r28, 0x02	; 2
    f9dc:	ec e0       	ldi	r30, 0x0C	; 12
    f9de:	0c 94 b5 e7 	jmp	0x1cf6a	; 0x1cf6a <__epilogue_restores__+0xc>

0000f9e2 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f9e2:	0f 93       	push	r16
    f9e4:	1f 93       	push	r17
    f9e6:	cf 93       	push	r28
    f9e8:	df 93       	push	r29
    f9ea:	ec 01       	movw	r28, r24
    f9ec:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f9ee:	64 9f       	mul	r22, r20
    f9f0:	80 01       	movw	r16, r0
    f9f2:	65 9f       	mul	r22, r21
    f9f4:	10 0d       	add	r17, r0
    f9f6:	74 9f       	mul	r23, r20
    f9f8:	10 0d       	add	r17, r0
    f9fa:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f9fc:	45 da       	rcall	.-2934   	; 0xee88 <fileno>
    ssize_t ret;

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    f9fe:	a8 01       	movw	r20, r16
    fa00:	be 01       	movw	r22, r28
    fa02:	81 df       	rcall	.-254    	; 0xf906 <write>

    if(ret < 0)
    fa04:	97 fd       	sbrc	r25, 7
    fa06:	02 c0       	rjmp	.+4      	; 0xfa0c <fwrite+0x2a>
        return(0);

    return((size_t) ret);
    fa08:	cb 01       	movw	r24, r22
    fa0a:	02 c0       	rjmp	.+4      	; 0xfa10 <fwrite+0x2e>

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    fa0c:	80 e0       	ldi	r24, 0x00	; 0
    fa0e:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    fa10:	df 91       	pop	r29
    fa12:	cf 91       	pop	r28
    fa14:	1f 91       	pop	r17
    fa16:	0f 91       	pop	r16
    fa18:	08 95       	ret

0000fa1a <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    fa1a:	0f 93       	push	r16
    fa1c:	1f 93       	push	r17
    fa1e:	cf 93       	push	r28
    fa20:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    fa22:	83 30       	cpi	r24, 0x03	; 3
    fa24:	91 05       	cpc	r25, r1
    fa26:	48 f4       	brcc	.+18     	; 0xfa3a <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    fa28:	89 e0       	ldi	r24, 0x09	; 9
    fa2a:	90 e0       	ldi	r25, 0x00	; 0
    fa2c:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    fa30:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
        return(-1);
    fa34:	8f ef       	ldi	r24, 0xFF	; 255
    fa36:	9f ef       	ldi	r25, 0xFF	; 255
    fa38:	20 c0       	rjmp	.+64     	; 0xfa7a <free_file_descriptor+0x60>
    fa3a:	ec 01       	movw	r28, r24
    }

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    fa3c:	41 da       	rcall	.-2942   	; 0xeec0 <fileno_to_stream>
    fa3e:	8c 01       	movw	r16, r24
    if(stream == NULL)
    fa40:	89 2b       	or	r24, r25
    fa42:	c1 f3       	breq	.-16     	; 0xfa34 <free_file_descriptor+0x1a>
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    fa44:	f8 01       	movw	r30, r16
    fa46:	84 85       	ldd	r24, Z+12	; 0x0c
    fa48:	95 85       	ldd	r25, Z+13	; 0x0d

    if(fh != NULL)
    fa4a:	00 97       	sbiw	r24, 0x00	; 0
    fa4c:	11 f0       	breq	.+4      	; 0xfa52 <free_file_descriptor+0x38>
    {
        safefree(fh);
    fa4e:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    fa52:	f8 01       	movw	r30, r16
    fa54:	80 81       	ld	r24, Z
    fa56:	91 81       	ldd	r25, Z+1	; 0x01
    fa58:	00 97       	sbiw	r24, 0x00	; 0
    fa5a:	21 f0       	breq	.+8      	; 0xfa64 <free_file_descriptor+0x4a>
    fa5c:	23 81       	ldd	r18, Z+3	; 0x03
    fa5e:	27 fd       	sbrc	r18, 7
    {
        safefree(stream->buf);
    fa60:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <safefree>
    }

    __iob[fileno]  = NULL;
    fa64:	fe 01       	movw	r30, r28
    fa66:	ee 0f       	add	r30, r30
    fa68:	ff 1f       	adc	r31, r31
    fa6a:	eb 54       	subi	r30, 0x4B	; 75
    fa6c:	f3 4e       	sbci	r31, 0xE3	; 227
    fa6e:	11 82       	std	Z+1, r1	; 0x01
    fa70:	10 82       	st	Z, r1
    safefree(stream);
    fa72:	c8 01       	movw	r24, r16
    fa74:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <safefree>
    return(fileno);
    fa78:	ce 01       	movw	r24, r28
}
    fa7a:	df 91       	pop	r29
    fa7c:	cf 91       	pop	r28
    fa7e:	1f 91       	pop	r17
    fa80:	0f 91       	pop	r16
    fa82:	08 95       	ret

0000fa84 <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    fa84:	0f 93       	push	r16
    fa86:	1f 93       	push	r17
    fa88:	cf 93       	push	r28
    fa8a:	df 93       	push	r29
    fa8c:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    fa8e:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    fa92:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    fa96:	14 da       	rcall	.-3032   	; 0xeec0 <fileno_to_stream>
    if(stream == NULL)
    fa98:	89 2b       	or	r24, r25
    fa9a:	d9 f0       	breq	.+54     	; 0xfad2 <close+0x4e>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    fa9c:	c8 01       	movw	r24, r16
    fa9e:	a3 dd       	rcall	.-1210   	; 0xf5e6 <fileno_to_fatfs>
    if(fh == NULL)
    faa0:	00 97       	sbiw	r24, 0x00	; 0
    faa2:	b9 f0       	breq	.+46     	; 0xfad2 <close+0x4e>
    {
        return(-1);
    }
    res = f_close(fh);
    faa4:	0e 94 33 5f 	call	0xbe66	; 0xbe66 <f_close>
    free_file_descriptor(fileno);
    faa8:	ec 01       	movw	r28, r24
    faaa:	c8 01       	movw	r24, r16
    faac:	b6 df       	rcall	.-148    	; 0xfa1a <free_file_descriptor>
    if (res != FR_OK)
    faae:	20 97       	sbiw	r28, 0x00	; 0
    fab0:	99 f0       	breq	.+38     	; 0xfad8 <close+0x54>
    fab2:	c4 31       	cpi	r28, 0x14	; 20
    fab4:	d1 05       	cpc	r29, r1
    fab6:	38 f4       	brcc	.+14     	; 0xfac6 <close+0x42>
    fab8:	cc 56       	subi	r28, 0x6C	; 108
    faba:	d4 4f       	sbci	r29, 0xF4	; 244
    fabc:	88 81       	ld	r24, Y
    fabe:	08 2e       	mov	r0, r24
    fac0:	00 0c       	add	r0, r0
    fac2:	99 0b       	sbc	r25, r25
    fac4:	02 c0       	rjmp	.+4      	; 0xfaca <close+0x46>
    fac6:	83 e2       	ldi	r24, 0x23	; 35
    fac8:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    faca:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    face:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
        return(-1);
    fad2:	8f ef       	ldi	r24, 0xFF	; 255
    fad4:	9f ef       	ldi	r25, 0xFF	; 255
    fad6:	02 c0       	rjmp	.+4      	; 0xfadc <close+0x58>
    }
    return(0);
    fad8:	80 e0       	ldi	r24, 0x00	; 0
    fada:	90 e0       	ldi	r25, 0x00	; 0
}
    fadc:	df 91       	pop	r29
    fade:	cf 91       	pop	r28
    fae0:	1f 91       	pop	r17
    fae2:	0f 91       	pop	r16
    fae4:	08 95       	ret

0000fae6 <fclose>:
/// @return  0 on sucess.
/// @return  -1 on error witrh errno set.
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    fae6:	d0 d9       	rcall	.-3168   	; 0xee88 <fileno>
    if(fn < 0)
    fae8:	97 fd       	sbrc	r25, 7
        return(EOF);

    return( close(fn) );
    faea:	02 c0       	rjmp	.+4      	; 0xfaf0 <fclose+0xa>
    faec:	cb cf       	rjmp	.-106    	; 0xfa84 <close>
    faee:	08 95       	ret
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    if(fn < 0)
        return(EOF);
    faf0:	8f ef       	ldi	r24, 0xFF	; 255
    faf2:	9f ef       	ldi	r25, 0xFF	; 255

    return( close(fn) );
}
    faf4:	08 95       	ret

0000faf6 <new_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure with errno set.
MEMSPACE
int new_file_descriptor( void )
{
    faf6:	0f 93       	push	r16
    faf8:	1f 93       	push	r17
    fafa:	cf 93       	push	r28
    fafc:	df 93       	push	r29
    fafe:	e5 eb       	ldi	r30, 0xB5	; 181
    fb00:	fc e1       	ldi	r31, 0x1C	; 28
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    fb02:	c0 e0       	ldi	r28, 0x00	; 0
    fb04:	d0 e0       	ldi	r29, 0x00	; 0
    fb06:	21 96       	adiw	r28, 0x01	; 1
    fb08:	c0 31       	cpi	r28, 0x10	; 16
    fb0a:	d1 05       	cpc	r29, r1
    fb0c:	49 f0       	breq	.+18     	; 0xfb20 <new_file_descriptor+0x2a>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    fb0e:	c3 30       	cpi	r28, 0x03	; 3
    fb10:	d1 05       	cpc	r29, r1
    fb12:	24 f0       	brlt	.+8      	; 0xfb1c <new_file_descriptor+0x26>

    for(i=0;i<MAX_FILES;++i)
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
    fb14:	82 81       	ldd	r24, Z+2	; 0x02
    fb16:	93 81       	ldd	r25, Z+3	; 0x03
    fb18:	89 2b       	or	r24, r25
    fb1a:	59 f0       	breq	.+22     	; 0xfb32 <new_file_descriptor+0x3c>
    fb1c:	32 96       	adiw	r30, 0x02	; 2
    fb1e:	f3 cf       	rjmp	.-26     	; 0xfb06 <new_file_descriptor+0x10>
            __iob[i]  = stream;
            fdev_set_udata(stream, (void *) fh);
            return(i);
        }
    }
    errno = ENFILE;
    fb20:	87 e1       	ldi	r24, 0x17	; 23
    fb22:	90 e0       	ldi	r25, 0x00	; 0
    fb24:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    fb28:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    return(-1);
    fb2c:	8f ef       	ldi	r24, 0xFF	; 255
    fb2e:	9f ef       	ldi	r25, 0xFF	; 255
    fb30:	22 c0       	rjmp	.+68     	; 0xfb76 <new_file_descriptor+0x80>
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
        {
            stream = (FILE *) safecalloc(sizeof(FILE),1);
    fb32:	61 e0       	ldi	r22, 0x01	; 1
    fb34:	70 e0       	ldi	r23, 0x00	; 0
    fb36:	8e e0       	ldi	r24, 0x0E	; 14
    fb38:	90 e0       	ldi	r25, 0x00	; 0
    fb3a:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safecalloc>
    fb3e:	8c 01       	movw	r16, r24
            if(stream == NULL)
    fb40:	89 2b       	or	r24, r25
    fb42:	59 f0       	breq	.+22     	; 0xfb5a <new_file_descriptor+0x64>
            {
                errno = ENOMEM;
                return(-1);
            }
            fh = (FIL *) safecalloc(sizeof(FIL),1);
    fb44:	61 e0       	ldi	r22, 0x01	; 1
    fb46:	70 e0       	ldi	r23, 0x00	; 0
    fb48:	84 e2       	ldi	r24, 0x24	; 36
    fb4a:	92 e0       	ldi	r25, 0x02	; 2
    fb4c:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safecalloc>
            if(fh == NULL)
    fb50:	00 97       	sbiw	r24, 0x00	; 0
    fb52:	31 f4       	brne	.+12     	; 0xfb60 <new_file_descriptor+0x6a>
            {
                safefree(stream);
    fb54:	c8 01       	movw	r24, r16
    fb56:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <safefree>
                errno = ENOMEM;
    fb5a:	8c e0       	ldi	r24, 0x0C	; 12
    fb5c:	90 e0       	ldi	r25, 0x00	; 0
    fb5e:	e2 cf       	rjmp	.-60     	; 0xfb24 <new_file_descriptor+0x2e>
                return(-1);
            }

            __iob[i]  = stream;
    fb60:	fe 01       	movw	r30, r28
    fb62:	ee 0f       	add	r30, r30
    fb64:	ff 1f       	adc	r31, r31
    fb66:	eb 54       	subi	r30, 0x4B	; 75
    fb68:	f3 4e       	sbci	r31, 0xE3	; 227
    fb6a:	11 83       	std	Z+1, r17	; 0x01
    fb6c:	00 83       	st	Z, r16
            fdev_set_udata(stream, (void *) fh);
    fb6e:	f8 01       	movw	r30, r16
    fb70:	95 87       	std	Z+13, r25	; 0x0d
    fb72:	84 87       	std	Z+12, r24	; 0x0c
{
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    fb74:	ce 01       	movw	r24, r28
            return(i);
        }
    }
    errno = ENFILE;
    return(-1);
}
    fb76:	df 91       	pop	r29
    fb78:	cf 91       	pop	r28
    fb7a:	1f 91       	pop	r17
    fb7c:	0f 91       	pop	r16
    fb7e:	08 95       	ret

0000fb80 <open>:
///
/// @return fileno on success.
/// @return -1 on error with errno set.
MEMSPACE
int open(const char *pathname, int flags)
{
    fb80:	a0 e0       	ldi	r26, 0x00	; 0
    fb82:	b0 e0       	ldi	r27, 0x00	; 0
    fb84:	e6 ec       	ldi	r30, 0xC6	; 198
    fb86:	fd e7       	ldi	r31, 0x7D	; 125
    fb88:	0c 94 97 e7 	jmp	0x1cf2e	; 0x1cf2e <__prologue_saves__+0x8>
    fb8c:	5c 01       	movw	r10, r24
    fb8e:	6b 01       	movw	r12, r22
    int fatfs_modes;
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    fb90:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    fb94:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
        errno = fatfs_to_errno(res);
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
    fb98:	7b 01       	movw	r14, r22
    fb9a:	83 e0       	ldi	r24, 0x03	; 3
    fb9c:	e8 22       	and	r14, r24
    fb9e:	ff 24       	eor	r15, r15
    fba0:	e2 e0       	ldi	r30, 0x02	; 2
    fba2:	ee 16       	cp	r14, r30
    fba4:	f1 04       	cpc	r15, r1
    fba6:	31 f0       	breq	.+12     	; 0xfbb4 <open+0x34>
        fatfs_modes = FA_READ | FA_WRITE;
    else if((flags & O_ACCMODE) == O_RDONLY)
    fba8:	e1 14       	cp	r14, r1
    fbaa:	f1 04       	cpc	r15, r1
    fbac:	31 f0       	breq	.+12     	; 0xfbba <open+0x3a>
        fatfs_modes = FA_READ;
    else
        fatfs_modes = FA_WRITE;
    fbae:	02 e0       	ldi	r16, 0x02	; 2
    fbb0:	10 e0       	ldi	r17, 0x00	; 0
    fbb2:	05 c0       	rjmp	.+10     	; 0xfbbe <open+0x3e>
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
        fatfs_modes = FA_READ | FA_WRITE;
    fbb4:	03 e0       	ldi	r16, 0x03	; 3
    fbb6:	10 e0       	ldi	r17, 0x00	; 0
    fbb8:	02 c0       	rjmp	.+4      	; 0xfbbe <open+0x3e>
    else if((flags & O_ACCMODE) == O_RDONLY)
        fatfs_modes = FA_READ;
    fbba:	01 e0       	ldi	r16, 0x01	; 1
    fbbc:	10 e0       	ldi	r17, 0x00	; 0
    else
        fatfs_modes = FA_WRITE;

    if(flags & O_CREAT)
    fbbe:	c6 fe       	sbrs	r12, 6
    fbc0:	05 c0       	rjmp	.+10     	; 0xfbcc <open+0x4c>
    {
        if(flags & O_TRUNC)
    fbc2:	d1 fe       	sbrs	r13, 1
    fbc4:	02 c0       	rjmp	.+4      	; 0xfbca <open+0x4a>
            fatfs_modes |= FA_CREATE_ALWAYS;
    fbc6:	08 60       	ori	r16, 0x08	; 8
    fbc8:	01 c0       	rjmp	.+2      	; 0xfbcc <open+0x4c>
        else
            fatfs_modes |= FA_OPEN_ALWAYS;
    fbca:	00 61       	ori	r16, 0x10	; 16
    }

    fileno = new_file_descriptor();
    fbcc:	94 df       	rcall	.-216    	; 0xfaf6 <new_file_descriptor>
    fbce:	3c 01       	movw	r6, r24

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    fbd0:	77 d9       	rcall	.-3346   	; 0xeec0 <fileno_to_stream>
    fbd2:	ec 01       	movw	r28, r24
    fbd4:	c3 01       	movw	r24, r6
    if(stream == NULL)
    {
        free_file_descriptor(fileno);
    fbd6:	20 97       	sbiw	r28, 0x00	; 0

    fileno = new_file_descriptor();

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    fbd8:	09 f4       	brne	.+2      	; 0xfbdc <open+0x5c>
    fbda:	48 c0       	rjmp	.+144    	; 0xfc6c <open+0xec>
        free_file_descriptor(fileno);
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    fbdc:	04 dd       	rcall	.-1528   	; 0xf5e6 <fileno_to_fatfs>
    fbde:	4c 01       	movw	r8, r24
    fbe0:	00 97       	sbiw	r24, 0x00	; 0
    if(fh == NULL)
    fbe2:	59 f4       	brne	.+22     	; 0xfbfa <open+0x7a>
    {
        free_file_descriptor(fileno);
    fbe4:	c3 01       	movw	r24, r6
    fbe6:	19 df       	rcall	.-462    	; 0xfa1a <free_file_descriptor>
    fbe8:	89 e0       	ldi	r24, 0x09	; 9
        errno = EBADF;
    fbea:	90 e0       	ldi	r25, 0x00	; 0
    fbec:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    fbf0:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    fbf4:	8f ef       	ldi	r24, 0xFF	; 255
        return(-1);
    fbf6:	9f ef       	ldi	r25, 0xFF	; 255
    fbf8:	5d c0       	rjmp	.+186    	; 0xfcb4 <open+0x134>
    fbfa:	40 2f       	mov	r20, r16
    }
    res = f_open(fh, pathname, (BYTE) (fatfs_modes & 0xff));
    fbfc:	b5 01       	movw	r22, r10
    fbfe:	0e 94 19 5a 	call	0xb432	; 0xb432 <f_open>
    fc02:	00 97       	sbiw	r24, 0x00	; 0
    if(res != FR_OK)
    fc04:	91 f0       	breq	.+36     	; 0xfc2a <open+0xaa>
    fc06:	84 31       	cpi	r24, 0x14	; 20
    fc08:	91 05       	cpc	r25, r1
    fc0a:	40 f4       	brcc	.+16     	; 0xfc1c <open+0x9c>
    fc0c:	fc 01       	movw	r30, r24
    fc0e:	ec 56       	subi	r30, 0x6C	; 108
    fc10:	f4 4f       	sbci	r31, 0xF4	; 244
    fc12:	80 81       	ld	r24, Z
    fc14:	08 2e       	mov	r0, r24
    fc16:	00 0c       	add	r0, r0
    fc18:	99 0b       	sbc	r25, r25
    fc1a:	02 c0       	rjmp	.+4      	; 0xfc20 <open+0xa0>
    fc1c:	83 e2       	ldi	r24, 0x23	; 35
    fc1e:	90 e0       	ldi	r25, 0x00	; 0
    fc20:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    {
        errno = fatfs_to_errno(res);
    fc24:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    fc28:	20 c0       	rjmp	.+64     	; 0xfc6a <open+0xea>
    fc2a:	d2 fe       	sbrs	r13, 2
        free_file_descriptor(fileno);
        return(-1);
    }
    if(flags & O_APPEND)
    fc2c:	21 c0       	rjmp	.+66     	; 0xfc70 <open+0xf0>
    fc2e:	f4 01       	movw	r30, r8
    {
///  Seek to end of the file
        res = f_lseek(fh, f_size(fh));
    fc30:	42 85       	ldd	r20, Z+10	; 0x0a
    fc32:	53 85       	ldd	r21, Z+11	; 0x0b
    fc34:	64 85       	ldd	r22, Z+12	; 0x0c
    fc36:	75 85       	ldd	r23, Z+13	; 0x0d
    fc38:	c4 01       	movw	r24, r8
    fc3a:	0e 94 dd 60 	call	0xc1ba	; 0xc1ba <f_lseek>
    fc3e:	00 97       	sbiw	r24, 0x00	; 0
        if (res != FR_OK)
    fc40:	b9 f0       	breq	.+46     	; 0xfc70 <open+0xf0>
    fc42:	84 31       	cpi	r24, 0x14	; 20
    fc44:	91 05       	cpc	r25, r1
    fc46:	40 f4       	brcc	.+16     	; 0xfc58 <open+0xd8>
    fc48:	fc 01       	movw	r30, r24
    fc4a:	ec 56       	subi	r30, 0x6C	; 108
    fc4c:	f4 4f       	sbci	r31, 0xF4	; 244
    fc4e:	80 81       	ld	r24, Z
    fc50:	08 2e       	mov	r0, r24
    fc52:	00 0c       	add	r0, r0
    fc54:	99 0b       	sbc	r25, r25
    fc56:	02 c0       	rjmp	.+4      	; 0xfc5c <open+0xdc>
    fc58:	83 e2       	ldi	r24, 0x23	; 35
    fc5a:	90 e0       	ldi	r25, 0x00	; 0
    fc5c:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
        {
            errno = fatfs_to_errno(res);
    fc60:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    fc64:	c4 01       	movw	r24, r8
            f_close(fh);
    fc66:	0e 94 33 5f 	call	0xbe66	; 0xbe66 <f_close>
            free_file_descriptor(fileno);
    fc6a:	c3 01       	movw	r24, r6
    fc6c:	d6 de       	rcall	.-596    	; 0xfa1a <free_file_descriptor>
    fc6e:	c2 cf       	rjmp	.-124    	; 0xfbf4 <open+0x74>
    fc70:	f2 e0       	ldi	r31, 0x02	; 2
            return(-1);
        }
    }

    if((flags & O_ACCMODE) == O_RDWR)
    fc72:	ef 16       	cp	r14, r31
    fc74:	f1 04       	cpc	r15, r1
    fc76:	51 f4       	brne	.+20     	; 0xfc8c <open+0x10c>
    fc78:	85 ed       	ldi	r24, 0xD5	; 213
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    fc7a:	95 e7       	ldi	r25, 0x75	; 117
    fc7c:	99 87       	std	Y+9, r25	; 0x09
    fc7e:	88 87       	std	Y+8, r24	; 0x08
    fc80:	82 e5       	ldi	r24, 0x52	; 82
        stream->get = fatfs_getc;
    fc82:	95 e7       	ldi	r25, 0x75	; 117
    fc84:	9b 87       	std	Y+11, r25	; 0x0b
    fc86:	8a 87       	std	Y+10, r24	; 0x0a
    fc88:	83 e0       	ldi	r24, 0x03	; 3
        stream->flags = _FDEV_SETUP_RW;
    fc8a:	12 c0       	rjmp	.+36     	; 0xfcb0 <open+0x130>
    fc8c:	e1 14       	cp	r14, r1
    }
    else if((flags & O_ACCMODE) == O_RDONLY)
    fc8e:	f1 04       	cpc	r15, r1
    fc90:	41 f4       	brne	.+16     	; 0xfca2 <open+0x122>
    fc92:	19 86       	std	Y+9, r1	; 0x09
    {
// FIXME fdevopen should do this
        stream->put = NULL;
    fc94:	18 86       	std	Y+8, r1	; 0x08
    fc96:	82 e5       	ldi	r24, 0x52	; 82
        stream->get = fatfs_getc;
    fc98:	95 e7       	ldi	r25, 0x75	; 117
    fc9a:	9b 87       	std	Y+11, r25	; 0x0b
    fc9c:	8a 87       	std	Y+10, r24	; 0x0a
    fc9e:	81 e0       	ldi	r24, 0x01	; 1
        stream->flags = _FDEV_SETUP_READ;
    fca0:	07 c0       	rjmp	.+14     	; 0xfcb0 <open+0x130>
    fca2:	85 ed       	ldi	r24, 0xD5	; 213
    }
    else
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    fca4:	95 e7       	ldi	r25, 0x75	; 117
    fca6:	99 87       	std	Y+9, r25	; 0x09
    fca8:	88 87       	std	Y+8, r24	; 0x08
    fcaa:	1b 86       	std	Y+11, r1	; 0x0b
        stream->get = NULL;
    fcac:	1a 86       	std	Y+10, r1	; 0x0a
    fcae:	82 e0       	ldi	r24, 0x02	; 2
        stream->flags = _FDEV_SETUP_WRITE;
    fcb0:	8b 83       	std	Y+3, r24	; 0x03
    fcb2:	c3 01       	movw	r24, r6
    }

    return(fileno);
    fcb4:	cd b7       	in	r28, 0x3d	; 61
}
    fcb6:	de b7       	in	r29, 0x3e	; 62
    fcb8:	ee e0       	ldi	r30, 0x0E	; 14
    fcba:	0c 94 b3 e7 	jmp	0x1cf66	; 0x1cf66 <__epilogue_restores__+0x8>

0000fcbe <posix_fopen_modes_to_open>:
    fcbe:	cf 93       	push	r28
/// @return open mode flags.
/// @return -1 on error.
/// @warning read and write BOTH share the same stream buffer and buffer index pointers.
MEMSPACE
int posix_fopen_modes_to_open(const char *mode)
{
    fcc0:	df 93       	push	r29
    fcc2:	ec 01       	movw	r28, r24
    int flag = 0;

    if(modecmp(mode,"r") || modecmp(mode,"rb"))
    fcc4:	62 e4       	ldi	r22, 0x42	; 66
    fcc6:	73 e0       	ldi	r23, 0x03	; 3
    fcc8:	0e 94 0c 32 	call	0x6418	; 0x6418 <strcmp>
    fccc:	00 97       	sbiw	r24, 0x00	; 0
    fcce:	09 f4       	brne	.+2      	; 0xfcd2 <posix_fopen_modes_to_open+0x14>
    fcd0:	5d c0       	rjmp	.+186    	; 0xfd8c <posix_fopen_modes_to_open+0xce>
    fcd2:	6c ee       	ldi	r22, 0xEC	; 236
    fcd4:	78 e0       	ldi	r23, 0x08	; 8
    fcd6:	ce 01       	movw	r24, r28
    fcd8:	0e 94 0c 32 	call	0x6418	; 0x6418 <strcmp>
    fcdc:	00 97       	sbiw	r24, 0x00	; 0
    fcde:	09 f4       	brne	.+2      	; 0xfce2 <posix_fopen_modes_to_open+0x24>
    fce0:	55 c0       	rjmp	.+170    	; 0xfd8c <posix_fopen_modes_to_open+0xce>
    {
        flag = O_RDONLY;
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    fce2:	6f ee       	ldi	r22, 0xEF	; 239
    fce4:	78 e0       	ldi	r23, 0x08	; 8
    fce6:	ce 01       	movw	r24, r28
    fce8:	0e 94 0c 32 	call	0x6418	; 0x6418 <strcmp>
    fcec:	89 2b       	or	r24, r25
    fcee:	09 f4       	brne	.+2      	; 0xfcf2 <posix_fopen_modes_to_open+0x34>
    fcf0:	42 c0       	rjmp	.+132    	; 0xfd76 <posix_fopen_modes_to_open+0xb8>
    fcf2:	62 ef       	ldi	r22, 0xF2	; 242
    fcf4:	78 e0       	ldi	r23, 0x08	; 8
    fcf6:	ce 01       	movw	r24, r28
    fcf8:	0e 94 0c 32 	call	0x6418	; 0x6418 <strcmp>
    fcfc:	89 2b       	or	r24, r25
    fcfe:	d9 f1       	breq	.+118    	; 0xfd76 <posix_fopen_modes_to_open+0xb8>
    fd00:	66 ef       	ldi	r22, 0xF6	; 246
    fd02:	78 e0       	ldi	r23, 0x08	; 8
    fd04:	ce 01       	movw	r24, r28
    fd06:	0e 94 0c 32 	call	0x6418	; 0x6418 <strcmp>
    fd0a:	89 2b       	or	r24, r25
    fd0c:	a1 f1       	breq	.+104    	; 0xfd76 <posix_fopen_modes_to_open+0xb8>
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    fd0e:	6b ea       	ldi	r22, 0xAB	; 171
    fd10:	7a e0       	ldi	r23, 0x0A	; 10
    fd12:	ce 01       	movw	r24, r28
    fd14:	0e 94 0c 32 	call	0x6418	; 0x6418 <strcmp>
    fd18:	89 2b       	or	r24, r25
    fd1a:	81 f1       	breq	.+96     	; 0xfd7c <posix_fopen_modes_to_open+0xbe>
    fd1c:	6a ef       	ldi	r22, 0xFA	; 250
    fd1e:	78 e0       	ldi	r23, 0x08	; 8
    fd20:	ce 01       	movw	r24, r28
    fd22:	0e 94 0c 32 	call	0x6418	; 0x6418 <strcmp>
    fd26:	89 2b       	or	r24, r25
    fd28:	49 f1       	breq	.+82     	; 0xfd7c <posix_fopen_modes_to_open+0xbe>
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    fd2a:	6d ef       	ldi	r22, 0xFD	; 253
    fd2c:	78 e0       	ldi	r23, 0x08	; 8
    fd2e:	ce 01       	movw	r24, r28
    fd30:	0e 94 0c 32 	call	0x6418	; 0x6418 <strcmp>
    fd34:	89 2b       	or	r24, r25
    fd36:	29 f1       	breq	.+74     	; 0xfd82 <posix_fopen_modes_to_open+0xc4>
    fd38:	60 e0       	ldi	r22, 0x00	; 0
    fd3a:	79 e0       	ldi	r23, 0x09	; 9
    fd3c:	ce 01       	movw	r24, r28
    fd3e:	0e 94 0c 32 	call	0x6418	; 0x6418 <strcmp>
    fd42:	89 2b       	or	r24, r25
    fd44:	f1 f0       	breq	.+60     	; 0xfd82 <posix_fopen_modes_to_open+0xc4>
    fd46:	64 e0       	ldi	r22, 0x04	; 4
    fd48:	79 e0       	ldi	r23, 0x09	; 9
    fd4a:	ce 01       	movw	r24, r28
    fd4c:	0e 94 0c 32 	call	0x6418	; 0x6418 <strcmp>
    fd50:	89 2b       	or	r24, r25
    fd52:	b9 f0       	breq	.+46     	; 0xfd82 <posix_fopen_modes_to_open+0xc4>
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    fd54:	67 e1       	ldi	r22, 0x17	; 23
    fd56:	73 e1       	ldi	r23, 0x13	; 19
    fd58:	ce 01       	movw	r24, r28
    fd5a:	0e 94 0c 32 	call	0x6418	; 0x6418 <strcmp>
    fd5e:	89 2b       	or	r24, r25
    fd60:	99 f0       	breq	.+38     	; 0xfd88 <posix_fopen_modes_to_open+0xca>
    fd62:	68 e0       	ldi	r22, 0x08	; 8
    fd64:	79 e0       	ldi	r23, 0x09	; 9
    fd66:	ce 01       	movw	r24, r28
    fd68:	0e 94 0c 32 	call	0x6418	; 0x6418 <strcmp>
    fd6c:	89 2b       	or	r24, r25
    fd6e:	61 f0       	breq	.+24     	; 0xfd88 <posix_fopen_modes_to_open+0xca>
        return(flag);
    }
    if(modecmp(mode,"a+") || modecmp(mode, "a+b" ) || modecmp(mode, "ab+" ))
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    fd70:	8f ef       	ldi	r24, 0xFF	; 255
    fd72:	9f ef       	ldi	r25, 0xFF	; 255
    fd74:	0b c0       	rjmp	.+22     	; 0xfd8c <posix_fopen_modes_to_open+0xce>
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    fd76:	82 e0       	ldi	r24, 0x02	; 2
    fd78:	92 e0       	ldi	r25, 0x02	; 2
    fd7a:	08 c0       	rjmp	.+16     	; 0xfd8c <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    fd7c:	81 e4       	ldi	r24, 0x41	; 65
    fd7e:	92 e0       	ldi	r25, 0x02	; 2
    fd80:	05 c0       	rjmp	.+10     	; 0xfd8c <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    fd82:	82 e4       	ldi	r24, 0x42	; 66
    fd84:	92 e0       	ldi	r25, 0x02	; 2
    fd86:	02 c0       	rjmp	.+4      	; 0xfd8c <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    {
        flag = O_WRONLY | O_CREAT | O_APPEND;
        return(flag);
    fd88:	81 e4       	ldi	r24, 0x41	; 65
    fd8a:	94 e0       	ldi	r25, 0x04	; 4
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    }
    return(-1);                                   // nvalid mode
}
    fd8c:	df 91       	pop	r29
    fd8e:	cf 91       	pop	r28
    fd90:	08 95       	ret

0000fd92 <fopen>:
///
/// @return stream * on success.
/// @return NULL on error with errno set.
MEMSPACE
FILE *fopen(const char *path, const char *mode)
{
    fd92:	cf 93       	push	r28
    fd94:	df 93       	push	r29
    fd96:	ec 01       	movw	r28, r24
    fd98:	cb 01       	movw	r24, r22
    int flags = posix_fopen_modes_to_open(mode);
    fd9a:	91 df       	rcall	.-222    	; 0xfcbe <posix_fopen_modes_to_open>
    int fileno = open(path, flags);
    fd9c:	bc 01       	movw	r22, r24
    fd9e:	ce 01       	movw	r24, r28

// checks if fileno out of bounds
    return( fileno_to_stream(fileno) );
    fda0:	ef de       	rcall	.-546    	; 0xfb80 <open>
    fda2:	8e d8       	rcall	.-3812   	; 0xeec0 <fileno_to_stream>
}
    fda4:	df 91       	pop	r29
    fda6:	cf 91       	pop	r28
    fda8:	08 95       	ret

0000fdaa <fprintf>:
/// @param[in] ...: vararg list or arguments
/// @return size of printed result
MEMSPACE
int
fprintf(FILE *fp, const char *format, ...)
{
    fdaa:	a8 e0       	ldi	r26, 0x08	; 8
    fdac:	b0 e0       	ldi	r27, 0x00	; 0
    fdae:	eb ed       	ldi	r30, 0xDB	; 219
    fdb0:	fe e7       	ldi	r31, 0x7E	; 126
    fdb2:	0c 94 a3 e7 	jmp	0x1cf46	; 0x1cf46 <__prologue_saves__+0x20>
    printf_t fn;
    va_list va;

    fn.put = _fprintf_putc;
    fdb6:	88 ec       	ldi	r24, 0xC8	; 200
    fdb8:	96 e7       	ldi	r25, 0x76	; 118
    fdba:	9a 83       	std	Y+2, r25	; 0x02
    fdbc:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    fdbe:	18 86       	std	Y+8, r1	; 0x08
    fdc0:	1f 82       	std	Y+7, r1	; 0x07
    fn.buffer = (void *) fp;
    fdc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    fdc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    fdc6:	9c 83       	std	Y+4, r25	; 0x04
    fdc8:	8b 83       	std	Y+3, r24	; 0x03

    va_start(va, format);
    _printf_fn(&fn, format, va);
    fdca:	4f 85       	ldd	r20, Y+15	; 0x0f
    fdcc:	58 89       	ldd	r21, Y+16	; 0x10
    fdce:	60 e8       	ldi	r22, 0x80	; 128
    fdd0:	9e 01       	movw	r18, r28
    fdd2:	2f 5e       	subi	r18, 0xEF	; 239
    fdd4:	3f 4f       	sbci	r19, 0xFF	; 255
    fdd6:	ce 01       	movw	r24, r28
    fdd8:	01 96       	adiw	r24, 0x01	; 1
    fdda:	0e 94 cc 42 	call	0x8598	; 0x8598 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    fdde:	8f 81       	ldd	r24, Y+7	; 0x07
    fde0:	98 85       	ldd	r25, Y+8	; 0x08
    fde2:	28 96       	adiw	r28, 0x08	; 8
    fde4:	e2 e0       	ldi	r30, 0x02	; 2
    fde6:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

0000fdea <posix_help>:
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
    return(_pagesize);
}
    fdea:	cf 93       	push	r28
    fdec:	df 93       	push	r29
    fdee:	00 d0       	rcall	.+0      	; 0xfdf0 <posix_help+0x6>
    fdf0:	1f 92       	push	r1
    fdf2:	ec 01       	movw	r28, r24
    fdf4:	82 e7       	ldi	r24, 0x72	; 114
    fdf6:	9e e0       	ldi	r25, 0x0E	; 14
    fdf8:	a0 e0       	ldi	r26, 0x00	; 0
    fdfa:	ed b7       	in	r30, 0x3d	; 61
    fdfc:	fe b7       	in	r31, 0x3e	; 62
    fdfe:	81 83       	std	Z+1, r24	; 0x01
    fe00:	92 83       	std	Z+2, r25	; 0x02
    fe02:	a3 83       	std	Z+3, r26	; 0x03
    fe04:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    fe08:	cd 2b       	or	r28, r29
    fe0a:	51 f0       	breq	.+20     	; 0xfe20 <posix_help+0x36>
    fe0c:	8a e9       	ldi	r24, 0x9A	; 154
    fe0e:	9d e0       	ldi	r25, 0x0D	; 13
    fe10:	a0 e0       	ldi	r26, 0x00	; 0
    fe12:	ed b7       	in	r30, 0x3d	; 61
    fe14:	fe b7       	in	r31, 0x3e	; 62
    fe16:	81 83       	std	Z+1, r24	; 0x01
    fe18:	92 83       	std	Z+2, r25	; 0x02
    fe1a:	a3 83       	std	Z+3, r26	; 0x03
    fe1c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    fe20:	cd b7       	in	r28, 0x3d	; 61
    fe22:	de b7       	in	r29, 0x3e	; 62
    fe24:	23 96       	adiw	r28, 0x03	; 3
    fe26:	e2 e0       	ldi	r30, 0x02	; 2
    fe28:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

0000fe2c <copy>:
    fe2c:	4f 92       	push	r4
    fe2e:	5f 92       	push	r5
    fe30:	6f 92       	push	r6
    fe32:	8f 92       	push	r8
    fe34:	9f 92       	push	r9
    fe36:	af 92       	push	r10
    fe38:	bf 92       	push	r11
    fe3a:	cf 92       	push	r12
    fe3c:	df 92       	push	r13
    fe3e:	ef 92       	push	r14
    fe40:	ff 92       	push	r15
    fe42:	0f 93       	push	r16
    fe44:	1f 93       	push	r17
    fe46:	cf 93       	push	r28
    fe48:	df 93       	push	r29
    fe4a:	ad b7       	in	r26, 0x3d	; 61
    fe4c:	be b7       	in	r27, 0x3e	; 62
    fe4e:	17 97       	sbiw	r26, 0x07	; 7
    fe50:	0f b6       	in	r0, 0x3f	; 63
    fe52:	f8 94       	cli
    fe54:	be bf       	out	0x3e, r27	; 62
    fe56:	0f be       	out	0x3f, r0	; 63
    fe58:	ad bf       	out	0x3d, r26	; 61
    fe5a:	8c 01       	movw	r16, r24
    fe5c:	eb 01       	movw	r28, r22
    fe5e:	ed b7       	in	r30, 0x3d	; 61
    fe60:	fe b7       	in	r31, 0x3e	; 62
    fe62:	95 83       	std	Z+5, r25	; 0x05
    fe64:	84 83       	std	Z+4, r24	; 0x04
    fe66:	87 ef       	ldi	r24, 0xF7	; 247
    fe68:	9c e0       	ldi	r25, 0x0C	; 12
    fe6a:	a0 e0       	ldi	r26, 0x00	; 0
    fe6c:	81 83       	std	Z+1, r24	; 0x01
    fe6e:	92 83       	std	Z+2, r25	; 0x02
    fe70:	a3 83       	std	Z+3, r26	; 0x03
    fe72:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    fe76:	6c ee       	ldi	r22, 0xEC	; 236
    fe78:	78 e0       	ldi	r23, 0x08	; 8
    fe7a:	c8 01       	movw	r24, r16
    fe7c:	8a df       	rcall	.-236    	; 0xfd92 <fopen>
    fe7e:	7c 01       	movw	r14, r24
    fe80:	ed b7       	in	r30, 0x3d	; 61
    fe82:	fe b7       	in	r31, 0x3e	; 62
    fe84:	89 2b       	or	r24, r25
    fe86:	59 f4       	brne	.+22     	; 0xfe9e <copy+0x72>
    fe88:	15 83       	std	Z+5, r17	; 0x05
    fe8a:	04 83       	std	Z+4, r16	; 0x04
    fe8c:	87 ee       	ldi	r24, 0xE7	; 231
    fe8e:	9c e0       	ldi	r25, 0x0C	; 12
    fe90:	a0 e0       	ldi	r26, 0x00	; 0
    fe92:	81 83       	std	Z+1, r24	; 0x01
    fe94:	92 83       	std	Z+2, r25	; 0x02
    fe96:	a3 83       	std	Z+3, r26	; 0x03
    fe98:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    fe9c:	20 c0       	rjmp	.+64     	; 0xfede <copy+0xb2>
    fe9e:	d5 83       	std	Z+5, r29	; 0x05
    fea0:	c4 83       	std	Z+4, r28	; 0x04
    fea2:	8a ed       	ldi	r24, 0xDA	; 218
    fea4:	9c e0       	ldi	r25, 0x0C	; 12
    fea6:	a0 e0       	ldi	r26, 0x00	; 0
    fea8:	81 83       	std	Z+1, r24	; 0x01
    feaa:	92 83       	std	Z+2, r25	; 0x02
    feac:	a3 83       	std	Z+3, r26	; 0x03
    feae:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    feb2:	6a ef       	ldi	r22, 0xFA	; 250
    feb4:	78 e0       	ldi	r23, 0x08	; 8
    feb6:	ce 01       	movw	r24, r28
    feb8:	6c df       	rcall	.-296    	; 0xfd92 <fopen>
    feba:	8c 01       	movw	r16, r24
    febc:	89 2b       	or	r24, r25
    febe:	a1 f4       	brne	.+40     	; 0xfee8 <copy+0xbc>
    fec0:	ed b7       	in	r30, 0x3d	; 61
    fec2:	fe b7       	in	r31, 0x3e	; 62
    fec4:	d5 83       	std	Z+5, r29	; 0x05
    fec6:	c4 83       	std	Z+4, r28	; 0x04
    fec8:	8a ec       	ldi	r24, 0xCA	; 202
    feca:	9c e0       	ldi	r25, 0x0C	; 12
    fecc:	a0 e0       	ldi	r26, 0x00	; 0
    fece:	81 83       	std	Z+1, r24	; 0x01
    fed0:	92 83       	std	Z+2, r25	; 0x02
    fed2:	a3 83       	std	Z+3, r26	; 0x03
    fed4:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    fed8:	80 e0       	ldi	r24, 0x00	; 0
    feda:	90 e0       	ldi	r25, 0x00	; 0
    fedc:	04 de       	rcall	.-1016   	; 0xfae6 <fclose>
    fede:	6f ef       	ldi	r22, 0xFF	; 255
    fee0:	7f ef       	ldi	r23, 0xFF	; 255
    fee2:	8f ef       	ldi	r24, 0xFF	; 255
    fee4:	9f ef       	ldi	r25, 0xFF	; 255
    fee6:	68 c0       	rjmp	.+208    	; 0xffb8 <__DATA_REGION_LENGTH__+0xb8>
    fee8:	61 e0       	ldi	r22, 0x01	; 1
    feea:	70 e0       	ldi	r23, 0x00	; 0
    feec:	80 e0       	ldi	r24, 0x00	; 0
    feee:	92 e0       	ldi	r25, 0x02	; 2
    fef0:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safecalloc>
    fef4:	6c 01       	movw	r12, r24
    fef6:	89 2b       	or	r24, r25
    fef8:	21 f4       	brne	.+8      	; 0xff02 <__DATA_REGION_LENGTH__+0x2>
    fefa:	c7 01       	movw	r24, r14
    fefc:	f4 dd       	rcall	.-1048   	; 0xfae6 <fclose>
    fefe:	c8 01       	movw	r24, r16
    ff00:	ed cf       	rjmp	.-38     	; 0xfedc <copy+0xb0>
    ff02:	8d eb       	ldi	r24, 0xBD	; 189
    ff04:	9c e0       	ldi	r25, 0x0C	; 12
    ff06:	a0 e0       	ldi	r26, 0x00	; 0
    ff08:	ed b7       	in	r30, 0x3d	; 61
    ff0a:	fe b7       	in	r31, 0x3e	; 62
    ff0c:	81 83       	std	Z+1, r24	; 0x01
    ff0e:	92 83       	std	Z+2, r25	; 0x02
    ff10:	a3 83       	std	Z+3, r26	; 0x03
    ff12:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    ff16:	81 2c       	mov	r8, r1
    ff18:	91 2c       	mov	r9, r1
    ff1a:	54 01       	movw	r10, r8
    ff1c:	81 ea       	ldi	r24, 0xA1	; 161
    ff1e:	9c e0       	ldi	r25, 0x0C	; 12
    ff20:	2c 01       	movw	r4, r24
    ff22:	61 2c       	mov	r6, r1
    ff24:	97 01       	movw	r18, r14
    ff26:	40 e0       	ldi	r20, 0x00	; 0
    ff28:	52 e0       	ldi	r21, 0x02	; 2
    ff2a:	61 e0       	ldi	r22, 0x01	; 1
    ff2c:	70 e0       	ldi	r23, 0x00	; 0
    ff2e:	c6 01       	movw	r24, r12
    ff30:	86 dc       	rcall	.-1780   	; 0xf83e <fread>
    ff32:	ec 01       	movw	r28, r24
    ff34:	18 16       	cp	r1, r24
    ff36:	19 06       	cpc	r1, r25
    ff38:	44 f5       	brge	.+80     	; 0xff8a <__DATA_REGION_LENGTH__+0x8a>
    ff3a:	98 01       	movw	r18, r16
    ff3c:	ae 01       	movw	r20, r28
    ff3e:	61 e0       	ldi	r22, 0x01	; 1
    ff40:	70 e0       	ldi	r23, 0x00	; 0
    ff42:	c6 01       	movw	r24, r12
    ff44:	4e dd       	rcall	.-1380   	; 0xf9e2 <fwrite>
    ff46:	8c 17       	cp	r24, r28
    ff48:	9d 07       	cpc	r25, r29
    ff4a:	5c f4       	brge	.+22     	; 0xff62 <__DATA_REGION_LENGTH__+0x62>
    ff4c:	80 eb       	ldi	r24, 0xB0	; 176
    ff4e:	9c e0       	ldi	r25, 0x0C	; 12
    ff50:	a0 e0       	ldi	r26, 0x00	; 0
    ff52:	ed b7       	in	r30, 0x3d	; 61
    ff54:	fe b7       	in	r31, 0x3e	; 62
    ff56:	81 83       	std	Z+1, r24	; 0x01
    ff58:	92 83       	std	Z+2, r25	; 0x02
    ff5a:	a3 83       	std	Z+3, r26	; 0x03
    ff5c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    ff60:	14 c0       	rjmp	.+40     	; 0xff8a <__DATA_REGION_LENGTH__+0x8a>
    ff62:	ce 01       	movw	r24, r28
    ff64:	dd 0f       	add	r29, r29
    ff66:	aa 0b       	sbc	r26, r26
    ff68:	bb 0b       	sbc	r27, r27
    ff6a:	88 0e       	add	r8, r24
    ff6c:	99 1e       	adc	r9, r25
    ff6e:	aa 1e       	adc	r10, r26
    ff70:	bb 1e       	adc	r11, r27
    ff72:	ed b7       	in	r30, 0x3d	; 61
    ff74:	fe b7       	in	r31, 0x3e	; 62
    ff76:	84 82       	std	Z+4, r8	; 0x04
    ff78:	95 82       	std	Z+5, r9	; 0x05
    ff7a:	a6 82       	std	Z+6, r10	; 0x06
    ff7c:	b7 82       	std	Z+7, r11	; 0x07
    ff7e:	41 82       	std	Z+1, r4	; 0x01
    ff80:	52 82       	std	Z+2, r5	; 0x02
    ff82:	63 82       	std	Z+3, r6	; 0x03
    ff84:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    ff88:	cd cf       	rjmp	.-102    	; 0xff24 <__DATA_REGION_LENGTH__+0x24>
    ff8a:	ed b7       	in	r30, 0x3d	; 61
    ff8c:	fe b7       	in	r31, 0x3e	; 62
    ff8e:	84 82       	std	Z+4, r8	; 0x04
    ff90:	95 82       	std	Z+5, r9	; 0x05
    ff92:	a6 82       	std	Z+6, r10	; 0x06
    ff94:	b7 82       	std	Z+7, r11	; 0x07
    ff96:	8e e8       	ldi	r24, 0x8E	; 142
    ff98:	9c e0       	ldi	r25, 0x0C	; 12
    ff9a:	a0 e0       	ldi	r26, 0x00	; 0
    ff9c:	81 83       	std	Z+1, r24	; 0x01
    ff9e:	92 83       	std	Z+2, r25	; 0x02
    ffa0:	a3 83       	std	Z+3, r26	; 0x03
    ffa2:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    ffa6:	c6 01       	movw	r24, r12
    ffa8:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <safefree>
    ffac:	c7 01       	movw	r24, r14
    ffae:	9b dd       	rcall	.-1226   	; 0xfae6 <fclose>
    ffb0:	c8 01       	movw	r24, r16
    ffb2:	99 dd       	rcall	.-1230   	; 0xfae6 <fclose>
    ffb4:	b4 01       	movw	r22, r8
    ffb6:	c5 01       	movw	r24, r10
    ffb8:	ad b7       	in	r26, 0x3d	; 61
    ffba:	be b7       	in	r27, 0x3e	; 62
    ffbc:	17 96       	adiw	r26, 0x07	; 7
    ffbe:	0f b6       	in	r0, 0x3f	; 63
    ffc0:	f8 94       	cli
    ffc2:	be bf       	out	0x3e, r27	; 62
    ffc4:	0f be       	out	0x3f, r0	; 63
    ffc6:	ad bf       	out	0x3d, r26	; 61
    ffc8:	df 91       	pop	r29
    ffca:	cf 91       	pop	r28
    ffcc:	1f 91       	pop	r17
    ffce:	0f 91       	pop	r16
    ffd0:	ff 90       	pop	r15
    ffd2:	ef 90       	pop	r14
    ffd4:	df 90       	pop	r13
    ffd6:	cf 90       	pop	r12
    ffd8:	bf 90       	pop	r11
    ffda:	af 90       	pop	r10
    ffdc:	9f 90       	pop	r9
    ffde:	8f 90       	pop	r8
    ffe0:	6f 90       	pop	r6
    ffe2:	5f 90       	pop	r5
    ffe4:	4f 90       	pop	r4
    ffe6:	08 95       	ret

0000ffe8 <testpage>:
/// @brief Used to page output of functions like cat, hexdump, etc
/// @param[in] *name: file to hexdump
/// @retrun -1 = quit, return count or 0 at new page
MEMSPACE
int testpage(int count)
{
    ffe8:	cf 93       	push	r28
    ffea:	df 93       	push	r29
    ffec:	00 d0       	rcall	.+0      	; 0xffee <testpage+0x6>
    ffee:	1f 92       	push	r1
    int c;
    if(count >= _pagesize)
    fff0:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <_pagesize>
    fff4:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <_pagesize+0x1>
    fff8:	82 17       	cp	r24, r18
    fffa:	93 07       	cpc	r25, r19
    fffc:	3c f1       	brlt	.+78     	; 0x1004c <__EEPROM_REGION_LENGTH__+0x4c>
    {
        printf("More..");
    fffe:	87 e8       	ldi	r24, 0x87	; 135
   10000:	9c e0       	ldi	r25, 0x0C	; 12
   10002:	a0 e0       	ldi	r26, 0x00	; 0
   10004:	ed b7       	in	r30, 0x3d	; 61
   10006:	fe b7       	in	r31, 0x3e	; 62
   10008:	81 83       	std	Z+1, r24	; 0x01
   1000a:	92 83       	std	Z+2, r25	; 0x02
   1000c:	a3 83       	std	Z+3, r26	; 0x03
   1000e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        {
            optimistic_yield(1000);
            wdt_reset();
        }
#endif
        c = getchar();
   10012:	0e 94 d5 76 	call	0xedaa	; 0xedaa <getchar>
   10016:	ec 01       	movw	r28, r24
        printf("\r");
   10018:	85 e8       	ldi	r24, 0x85	; 133
   1001a:	9c e0       	ldi	r25, 0x0C	; 12
   1001c:	a0 e0       	ldi	r26, 0x00	; 0
   1001e:	ed b7       	in	r30, 0x3d	; 61
   10020:	fe b7       	in	r31, 0x3e	; 62
   10022:	81 83       	std	Z+1, r24	; 0x01
   10024:	92 83       	std	Z+2, r25	; 0x02
   10026:	a3 83       	std	Z+3, r26	; 0x03
   10028:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        if(c == 'q')
   1002c:	c1 37       	cpi	r28, 0x71	; 113
   1002e:	d1 05       	cpc	r29, r1
   10030:	41 f0       	breq	.+16     	; 0x10042 <__EEPROM_REGION_LENGTH__+0x42>
            return(-1);                           // quit
        if(c == '\n')
   10032:	2a 97       	sbiw	r28, 0x0a	; 10
   10034:	49 f4       	brne	.+18     	; 0x10048 <__EEPROM_REGION_LENGTH__+0x48>
            return(_pagesize-1);                  // single line
   10036:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_pagesize>
   1003a:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_pagesize+0x1>
   1003e:	01 97       	sbiw	r24, 0x01	; 1
   10040:	05 c0       	rjmp	.+10     	; 0x1004c <__EEPROM_REGION_LENGTH__+0x4c>
        }
#endif
        c = getchar();
        printf("\r");
        if(c == 'q')
            return(-1);                           // quit
   10042:	8f ef       	ldi	r24, 0xFF	; 255
   10044:	9f ef       	ldi	r25, 0xFF	; 255
   10046:	02 c0       	rjmp	.+4      	; 0x1004c <__EEPROM_REGION_LENGTH__+0x4c>
        if(c == '\n')
            return(_pagesize-1);                  // single line
        return(0);                                // new page
   10048:	80 e0       	ldi	r24, 0x00	; 0
   1004a:	90 e0       	ldi	r25, 0x00	; 0
    }
    return (count);
}
   1004c:	cd b7       	in	r28, 0x3d	; 61
   1004e:	de b7       	in	r29, 0x3e	; 62
   10050:	23 96       	adiw	r28, 0x03	; 3
   10052:	e2 e0       	ldi	r30, 0x02	; 2
   10054:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00010058 <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  number of characters in file or -1 on error
MEMSPACE
long cat(char *name, int dopage)
{
   10058:	a7 e0       	ldi	r26, 0x07	; 7
   1005a:	b1 e0       	ldi	r27, 0x01	; 1
   1005c:	e2 e3       	ldi	r30, 0x32	; 50
   1005e:	f0 e8       	ldi	r31, 0x80	; 128
   10060:	0c 94 99 e7 	jmp	0x1cf32	; 0x1cf32 <__prologue_saves__+0xc>
   10064:	8c 01       	movw	r16, r24
   10066:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
   10068:	6c ee       	ldi	r22, 0xEC	; 236
   1006a:	78 e0       	ldi	r23, 0x08	; 8
   1006c:	92 de       	rcall	.-732    	; 0xfd92 <fopen>
   1006e:	7c 01       	movw	r14, r24
    if (!fp)
   10070:	89 2b       	or	r24, r25
   10072:	41 f0       	breq	.+16     	; 0x10084 <cat+0x2c>
   10074:	c1 2c       	mov	r12, r1
   10076:	d1 2c       	mov	r13, r1
   10078:	a1 2c       	mov	r10, r1
   1007a:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(-1);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   1007c:	8e 01       	movw	r16, r28
   1007e:	08 5f       	subi	r16, 0xF8	; 248
   10080:	1f 4f       	sbci	r17, 0xFF	; 255
   10082:	23 c0       	rjmp	.+70     	; 0x100ca <cat+0x72>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
   10084:	ed b7       	in	r30, 0x3d	; 61
   10086:	fe b7       	in	r31, 0x3e	; 62
   10088:	15 83       	std	Z+5, r17	; 0x05
   1008a:	04 83       	std	Z+4, r16	; 0x04
   1008c:	80 e1       	ldi	r24, 0x10	; 16
   1008e:	9d e0       	ldi	r25, 0x0D	; 13
   10090:	a0 e0       	ldi	r26, 0x00	; 0
   10092:	81 83       	std	Z+1, r24	; 0x01
   10094:	92 83       	std	Z+2, r25	; 0x02
   10096:	a3 83       	std	Z+3, r26	; 0x03
   10098:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        return(-1);
   1009c:	cc 24       	eor	r12, r12
   1009e:	ca 94       	dec	r12
   100a0:	dc 2c       	mov	r13, r12
   100a2:	76 01       	movw	r14, r12
   100a4:	3f c0       	rjmp	.+126    	; 0x10124 <cat+0xcc>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
   100a6:	c8 01       	movw	r24, r16
   100a8:	0e 94 90 32 	call	0x6520	; 0x6520 <trim_tail>
        size += strlen(line);
   100ac:	f8 01       	movw	r30, r16
   100ae:	01 90       	ld	r0, Z+
   100b0:	00 20       	and	r0, r0
   100b2:	e9 f7       	brne	.-6      	; 0x100ae <cat+0x56>
   100b4:	31 97       	sbiw	r30, 0x01	; 1
   100b6:	e0 1b       	sub	r30, r16
   100b8:	f1 0b       	sbc	r31, r17
   100ba:	ce 0e       	add	r12, r30
   100bc:	df 1e       	adc	r13, r31
        puts(line);
   100be:	c8 01       	movw	r24, r16
   100c0:	0e 94 2d 77 	call	0xee5a	; 0xee5a <puts>
        if(dopage)
   100c4:	81 14       	cp	r8, r1
   100c6:	91 04       	cpc	r9, r1
   100c8:	49 f4       	brne	.+18     	; 0x100dc <cat+0x84>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(-1);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   100ca:	a7 01       	movw	r20, r14
   100cc:	6e ef       	ldi	r22, 0xFE	; 254
   100ce:	70 e0       	ldi	r23, 0x00	; 0
   100d0:	c8 01       	movw	r24, r16
   100d2:	0e 94 e1 76 	call	0xedc2	; 0xedc2 <fgets>
   100d6:	89 2b       	or	r24, r25
   100d8:	31 f7       	brne	.-52     	; 0x100a6 <cat+0x4e>
   100da:	06 c0       	rjmp	.+12     	; 0x100e8 <cat+0x90>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
   100dc:	c5 01       	movw	r24, r10
   100de:	01 96       	adiw	r24, 0x01	; 1
   100e0:	83 df       	rcall	.-250    	; 0xffe8 <testpage>
   100e2:	5c 01       	movw	r10, r24
            if(count < 0)
   100e4:	97 ff       	sbrs	r25, 7
   100e6:	f1 cf       	rjmp	.-30     	; 0x100ca <cat+0x72>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   100e8:	8e e0       	ldi	r24, 0x0E	; 14
   100ea:	9d e0       	ldi	r25, 0x0D	; 13
   100ec:	a0 e0       	ldi	r26, 0x00	; 0
   100ee:	ed b7       	in	r30, 0x3d	; 61
   100f0:	fe b7       	in	r31, 0x3e	; 62
   100f2:	81 83       	std	Z+1, r24	; 0x01
   100f4:	92 83       	std	Z+2, r25	; 0x02
   100f6:	a3 83       	std	Z+3, r26	; 0x03
   100f8:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    fclose(fp);
   100fc:	c7 01       	movw	r24, r14
   100fe:	f3 dc       	rcall	.-1562   	; 0xfae6 <fclose>
    printf("%ld bytes\n", (long)size);
   10100:	0d 2c       	mov	r0, r13
   10102:	00 0c       	add	r0, r0
   10104:	ee 08       	sbc	r14, r14
   10106:	ff 08       	sbc	r15, r15
   10108:	ed b7       	in	r30, 0x3d	; 61
   1010a:	fe b7       	in	r31, 0x3e	; 62
   1010c:	c4 82       	std	Z+4, r12	; 0x04
   1010e:	d5 82       	std	Z+5, r13	; 0x05
   10110:	e6 82       	std	Z+6, r14	; 0x06
   10112:	f7 82       	std	Z+7, r15	; 0x07
   10114:	83 e0       	ldi	r24, 0x03	; 3
   10116:	9d e0       	ldi	r25, 0x0D	; 13
   10118:	a0 e0       	ldi	r26, 0x00	; 0
   1011a:	81 83       	std	Z+1, r24	; 0x01
   1011c:	92 83       	std	Z+2, r25	; 0x02
   1011e:	a3 83       	std	Z+3, r26	; 0x03
   10120:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    return(size);
}
   10124:	c7 01       	movw	r24, r14
   10126:	b6 01       	movw	r22, r12
   10128:	c9 5f       	subi	r28, 0xF9	; 249
   1012a:	de 4f       	sbci	r29, 0xFE	; 254
   1012c:	ec e0       	ldi	r30, 0x0C	; 12
   1012e:	0c 94 b5 e7 	jmp	0x1cf6a	; 0x1cf6a <__epilogue_restores__+0xc>

00010132 <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10132:	4f 92       	push	r4
   10134:	5f 92       	push	r5
   10136:	6f 92       	push	r6
   10138:	7f 92       	push	r7
   1013a:	af 92       	push	r10
   1013c:	bf 92       	push	r11
   1013e:	cf 92       	push	r12
   10140:	df 92       	push	r13
   10142:	ef 92       	push	r14
   10144:	ff 92       	push	r15
   10146:	0f 93       	push	r16
   10148:	1f 93       	push	r17
   1014a:	cf 93       	push	r28
   1014c:	df 93       	push	r29
   1014e:	cd b7       	in	r28, 0x3d	; 61
   10150:	de b7       	in	r29, 0x3e	; 62
   10152:	c9 54       	subi	r28, 0x49	; 73
   10154:	d1 09       	sbc	r29, r1
   10156:	0f b6       	in	r0, 0x3f	; 63
   10158:	f8 94       	cli
   1015a:	de bf       	out	0x3e, r29	; 62
   1015c:	0f be       	out	0x3f, r0	; 63
   1015e:	cd bf       	out	0x3d, r28	; 61
   10160:	8c 01       	movw	r16, r24
   10162:	7b 01       	movw	r14, r22
    struct stat sp;
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;

    if(stat(name, &sp) == -1)
   10164:	be 01       	movw	r22, r28
   10166:	62 5f       	subi	r22, 0xF2	; 242
   10168:	7f 4f       	sbci	r23, 0xFF	; 255
   1016a:	18 d9       	rcall	.-3536   	; 0xf39c <stat>
   1016c:	01 96       	adiw	r24, 0x01	; 1
   1016e:	79 f4       	brne	.+30     	; 0x1018e <ls_info+0x5c>
    {
        printf("can not stat: %s\n", name);
   10170:	ed b7       	in	r30, 0x3d	; 61
   10172:	fe b7       	in	r31, 0x3e	; 62
   10174:	15 83       	std	Z+5, r17	; 0x05
   10176:	04 83       	std	Z+4, r16	; 0x04
   10178:	83 e7       	ldi	r24, 0x73	; 115
   1017a:	9c e0       	ldi	r25, 0x0C	; 12
   1017c:	a0 e0       	ldi	r26, 0x00	; 0
   1017e:	81 83       	std	Z+1, r24	; 0x01
   10180:	92 83       	std	Z+2, r25	; 0x02
   10182:	a3 83       	std	Z+3, r26	; 0x03
   10184:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        return(0);
   10188:	80 e0       	ldi	r24, 0x00	; 0
   1018a:	90 e0       	ldi	r25, 0x00	; 0
   1018c:	77 c0       	rjmp	.+238    	; 0x1027c <ls_info+0x14a>
    }

    if(!verbose)
   1018e:	ef 28       	or	r14, r15
   10190:	81 f4       	brne	.+32     	; 0x101b2 <ls_info+0x80>
    {
        printf("%s\n",basename(name));
   10192:	c8 01       	movw	r24, r16
   10194:	0e 94 9a 77 	call	0xef34	; 0xef34 <basename>
   10198:	ed b7       	in	r30, 0x3d	; 61
   1019a:	fe b7       	in	r31, 0x3e	; 62
   1019c:	95 83       	std	Z+5, r25	; 0x05
   1019e:	84 83       	std	Z+4, r24	; 0x04
   101a0:	8f e6       	ldi	r24, 0x6F	; 111
   101a2:	9c e0       	ldi	r25, 0x0C	; 12
   101a4:	a0 e0       	ldi	r26, 0x00	; 0
   101a6:	81 83       	std	Z+1, r24	; 0x01
   101a8:	92 83       	std	Z+2, r25	; 0x02
   101aa:	a3 83       	std	Z+3, r26	; 0x03
   101ac:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   101b0:	63 c0       	rjmp	.+198    	; 0x10278 <ls_info+0x146>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
   101b2:	4e 88       	ldd	r4, Y+22	; 0x16
   101b4:	5f 88       	ldd	r5, Y+23	; 0x17
   101b6:	68 8c       	ldd	r6, Y+24	; 0x18
   101b8:	79 8c       	ldd	r7, Y+25	; 0x19
   101ba:	d3 01       	movw	r26, r6
   101bc:	c2 01       	movw	r24, r4
   101be:	88 27       	eor	r24, r24
   101c0:	90 7f       	andi	r25, 0xF0	; 240
   101c2:	aa 27       	eor	r26, r26
   101c4:	bb 27       	eor	r27, r27
   101c6:	81 15       	cp	r24, r1
   101c8:	90 44       	sbci	r25, 0x40	; 64
   101ca:	a1 05       	cpc	r26, r1
   101cc:	b1 05       	cpc	r27, r1
   101ce:	11 f4       	brne	.+4      	; 0x101d4 <ls_info+0xa2>
        *p++ = 'd';
   101d0:	84 e6       	ldi	r24, 0x64	; 100
   101d2:	01 c0       	rjmp	.+2      	; 0x101d6 <ls_info+0xa4>
    else
        *p++ = '-';
   101d4:	8d e2       	ldi	r24, 0x2D	; 45
   101d6:	8e af       	std	Y+62, r24	; 0x3e
   101d8:	fe 01       	movw	r30, r28
   101da:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   101dc:	e1 2c       	mov	r14, r1
   101de:	ff 24       	eor	r15, r15
   101e0:	f3 94       	inc	r15
   101e2:	20 e0       	ldi	r18, 0x00	; 0
   101e4:	30 e0       	ldi	r19, 0x00	; 0
   101e6:	be 2e       	mov	r11, r30
   101e8:	af 2e       	mov	r10, r31
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   101ea:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   101ec:	53 e0       	ldi	r21, 0x03	; 3
   101ee:	c5 2e       	mov	r12, r21
   101f0:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
   101f2:	c7 01       	movw	r24, r14
   101f4:	a0 e0       	ldi	r26, 0x00	; 0
   101f6:	b0 e0       	ldi	r27, 0x00	; 0
   101f8:	84 21       	and	r24, r4
   101fa:	95 21       	and	r25, r5
   101fc:	a6 21       	and	r26, r6
   101fe:	b7 21       	and	r27, r7
   10200:	89 2b       	or	r24, r25
   10202:	8a 2b       	or	r24, r26
   10204:	8b 2b       	or	r24, r27
   10206:	51 f0       	breq	.+20     	; 0x1021c <ls_info+0xea>
            *p++ = cm[ i % 3];
   10208:	c9 01       	movw	r24, r18
   1020a:	b6 01       	movw	r22, r12
   1020c:	0e 94 13 e7 	call	0x1ce26	; 0x1ce26 <__divmodhi4>
   10210:	dc 01       	movw	r26, r24
   10212:	a8 55       	subi	r26, 0x58	; 88
   10214:	b4 4f       	sbci	r27, 0xF4	; 244
   10216:	8c 91       	ld	r24, X
   10218:	81 83       	std	Z+1, r24	; 0x01
   1021a:	01 c0       	rjmp	.+2      	; 0x1021e <ls_info+0xec>
        else
            *p++ = '-';
   1021c:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   1021e:	f6 94       	lsr	r15
   10220:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   10222:	2f 5f       	subi	r18, 0xFF	; 255
   10224:	3f 4f       	sbci	r19, 0xFF	; 255
   10226:	31 96       	adiw	r30, 0x01	; 1
   10228:	29 30       	cpi	r18, 0x09	; 9
   1022a:	31 05       	cpc	r19, r1
   1022c:	11 f7       	brne	.-60     	; 0x101f2 <ls_info+0xc0>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   1022e:	29 96       	adiw	r28, 0x09	; 9
   10230:	1f ae       	std	Y+63, r1	; 0x3f
   10232:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
   10234:	4e a0       	ldd	r4, Y+38	; 0x26
   10236:	5f a0       	ldd	r5, Y+39	; 0x27
   10238:	68 a4       	ldd	r6, Y+40	; 0x28
   1023a:	79 a4       	ldd	r7, Y+41	; 0x29
   1023c:	6e a9       	ldd	r22, Y+54	; 0x36
   1023e:	7f a9       	ldd	r23, Y+55	; 0x37
   10240:	88 ad       	ldd	r24, Y+56	; 0x38
   10242:	99 ad       	ldd	r25, Y+57	; 0x39
   10244:	0e 94 75 77 	call	0xeeea	; 0xeeea <mctime>
   10248:	7c 01       	movw	r14, r24
   1024a:	c8 01       	movw	r24, r16
   1024c:	0e 94 9a 77 	call	0xef34	; 0xef34 <basename>
   10250:	ed b7       	in	r30, 0x3d	; 61
   10252:	fe b7       	in	r31, 0x3e	; 62
   10254:	95 87       	std	Z+13, r25	; 0x0d
   10256:	84 87       	std	Z+12, r24	; 0x0c
   10258:	f3 86       	std	Z+11, r15	; 0x0b
   1025a:	e2 86       	std	Z+10, r14	; 0x0a
   1025c:	46 82       	std	Z+6, r4	; 0x06
   1025e:	57 82       	std	Z+7, r5	; 0x07
   10260:	60 86       	std	Z+8, r6	; 0x08
   10262:	71 86       	std	Z+9, r7	; 0x09
   10264:	b4 82       	std	Z+4, r11	; 0x04
   10266:	a5 82       	std	Z+5, r10	; 0x05
   10268:	85 e5       	ldi	r24, 0x55	; 85
   1026a:	9c e0       	ldi	r25, 0x0C	; 12
   1026c:	a0 e0       	ldi	r26, 0x00	; 0
   1026e:	81 83       	std	Z+1, r24	; 0x01
   10270:	92 83       	std	Z+2, r25	; 0x02
   10272:	a3 83       	std	Z+3, r26	; 0x03
   10274:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        attr,
        (long) sp.st_size,
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   10278:	81 e0       	ldi	r24, 0x01	; 1
   1027a:	90 e0       	ldi	r25, 0x00	; 0
}
   1027c:	c7 5b       	subi	r28, 0xB7	; 183
   1027e:	df 4f       	sbci	r29, 0xFF	; 255
   10280:	0f b6       	in	r0, 0x3f	; 63
   10282:	f8 94       	cli
   10284:	de bf       	out	0x3e, r29	; 62
   10286:	0f be       	out	0x3f, r0	; 63
   10288:	cd bf       	out	0x3d, r28	; 61
   1028a:	df 91       	pop	r29
   1028c:	cf 91       	pop	r28
   1028e:	1f 91       	pop	r17
   10290:	0f 91       	pop	r16
   10292:	ff 90       	pop	r15
   10294:	ef 90       	pop	r14
   10296:	df 90       	pop	r13
   10298:	cf 90       	pop	r12
   1029a:	bf 90       	pop	r11
   1029c:	af 90       	pop	r10
   1029e:	7f 90       	pop	r7
   102a0:	6f 90       	pop	r6
   102a2:	5f 90       	pop	r5
   102a4:	4f 90       	pop	r4
   102a6:	08 95       	ret

000102a8 <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files or -1 on error
MEMSPACE
int ls(char *name, int verbose)
{
   102a8:	2f 92       	push	r2
   102aa:	3f 92       	push	r3
   102ac:	4f 92       	push	r4
   102ae:	5f 92       	push	r5
   102b0:	6f 92       	push	r6
   102b2:	8f 92       	push	r8
   102b4:	9f 92       	push	r9
   102b6:	af 92       	push	r10
   102b8:	bf 92       	push	r11
   102ba:	cf 92       	push	r12
   102bc:	df 92       	push	r13
   102be:	ef 92       	push	r14
   102c0:	ff 92       	push	r15
   102c2:	0f 93       	push	r16
   102c4:	1f 93       	push	r17
   102c6:	cf 93       	push	r28
   102c8:	df 93       	push	r29
   102ca:	cd b7       	in	r28, 0x3d	; 61
   102cc:	de b7       	in	r29, 0x3e	; 62
   102ce:	c8 53       	subi	r28, 0x38	; 56
   102d0:	d1 40       	sbci	r29, 0x01	; 1
   102d2:	0f b6       	in	r0, 0x3f	; 63
   102d4:	f8 94       	cli
   102d6:	de bf       	out	0x3e, r29	; 62
   102d8:	0f be       	out	0x3f, r0	; 63
   102da:	cd bf       	out	0x3d, r28	; 61
   102dc:	7c 01       	movw	r14, r24
   102de:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   102e0:	1e 82       	std	Y+6, r1	; 0x06
   102e2:	8e 01       	movw	r16, r28
   102e4:	0a 5f       	subi	r16, 0xFA	; 250
   102e6:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   102e8:	00 97       	sbiw	r24, 0x00	; 0
   102ea:	51 f4       	brne	.+20     	; 0x10300 <ls+0x58>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   102ec:	6f ef       	ldi	r22, 0xFF	; 255
   102ee:	70 e0       	ldi	r23, 0x00	; 0
   102f0:	c8 01       	movw	r24, r16
   102f2:	0e 94 f0 77 	call	0xefe0	; 0xefe0 <getcwd>
   102f6:	89 2b       	or	r24, r25
   102f8:	91 f4       	brne	.+36     	; 0x1031e <ls+0x76>
        {
            printf("ls: Can't get current directory\n");
   102fa:	84 e3       	ldi	r24, 0x34	; 52
   102fc:	9c e0       	ldi	r25, 0x0C	; 12
   102fe:	6a c0       	rjmp	.+212    	; 0x103d4 <ls+0x12c>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   10300:	fc 01       	movw	r30, r24
   10302:	80 81       	ld	r24, Z
   10304:	88 23       	and	r24, r24
   10306:	91 f3       	breq	.-28     	; 0x102ec <ls+0x44>
   10308:	66 ee       	ldi	r22, 0xE6	; 230
   1030a:	72 e1       	ldi	r23, 0x12	; 18
   1030c:	c7 01       	movw	r24, r14
   1030e:	0e 94 aa 32 	call	0x6554	; 0x6554 <MATCH>
   10312:	89 2b       	or	r24, r25
   10314:	59 f7       	brne	.-42     	; 0x102ec <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   10316:	b7 01       	movw	r22, r14
   10318:	c8 01       	movw	r24, r16
   1031a:	0e 94 b2 31 	call	0x6364	; 0x6364 <strcpy>
    }
    len = strlen(fullpath);
   1031e:	f8 01       	movw	r30, r16
   10320:	01 90       	ld	r0, Z+
   10322:	00 20       	and	r0, r0
   10324:	e9 f7       	brne	.-6      	; 0x10320 <ls+0x78>
   10326:	31 97       	sbiw	r30, 0x01	; 1
   10328:	1f 01       	movw	r2, r30
   1032a:	20 1a       	sub	r2, r16
   1032c:	31 0a       	sbc	r3, r17


    if (stat(fullpath, &st))
   1032e:	be 01       	movw	r22, r28
   10330:	69 5f       	subi	r22, 0xF9	; 249
   10332:	7e 4f       	sbci	r23, 0xFE	; 254
   10334:	c8 01       	movw	r24, r16
   10336:	32 d8       	rcall	.-3996   	; 0xf39c <stat>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
   10338:	ed b7       	in	r30, 0x3d	; 61
   1033a:	fe b7       	in	r31, 0x3e	; 62
   1033c:	15 83       	std	Z+5, r17	; 0x05
   1033e:	04 83       	std	Z+4, r16	; 0x04
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);


    if (stat(fullpath, &st))
   10340:	89 2b       	or	r24, r25
   10342:	59 f0       	breq	.+22     	; 0x1035a <ls+0xb2>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
   10344:	8e e1       	ldi	r24, 0x1E	; 30
   10346:	9c e0       	ldi	r25, 0x0C	; 12
   10348:	a0 e0       	ldi	r26, 0x00	; 0
   1034a:	81 83       	std	Z+1, r24	; 0x01
   1034c:	92 83       	std	Z+2, r25	; 0x02
   1034e:	a3 83       	std	Z+3, r26	; 0x03
   10350:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        return(-1);
   10354:	8f ef       	ldi	r24, 0xFF	; 255
   10356:	9f ef       	ldi	r25, 0xFF	; 255
   10358:	96 c0       	rjmp	.+300    	; 0x10486 <ls+0x1de>
    }
    printf("Listing:[%s]\n",fullpath);
   1035a:	80 e1       	ldi	r24, 0x10	; 16
   1035c:	9c e0       	ldi	r25, 0x0C	; 12
   1035e:	a0 e0       	ldi	r26, 0x00	; 0
   10360:	81 83       	std	Z+1, r24	; 0x01
   10362:	92 83       	std	Z+2, r25	; 0x02
   10364:	a3 83       	std	Z+3, r26	; 0x03
   10366:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

    switch (st.st_mode & S_IFMT)
   1036a:	c1 5f       	subi	r28, 0xF1	; 241
   1036c:	de 4f       	sbci	r29, 0xFE	; 254
   1036e:	88 81       	ld	r24, Y
   10370:	99 81       	ldd	r25, Y+1	; 0x01
   10372:	aa 81       	ldd	r26, Y+2	; 0x02
   10374:	bb 81       	ldd	r27, Y+3	; 0x03
   10376:	cf 50       	subi	r28, 0x0F	; 15
   10378:	d1 40       	sbci	r29, 0x01	; 1
   1037a:	88 27       	eor	r24, r24
   1037c:	90 7f       	andi	r25, 0xF0	; 240
   1037e:	aa 27       	eor	r26, r26
   10380:	bb 27       	eor	r27, r27
   10382:	81 15       	cp	r24, r1
   10384:	f0 e4       	ldi	r31, 0x40	; 64
   10386:	9f 07       	cpc	r25, r31
   10388:	a1 05       	cpc	r26, r1
   1038a:	b1 05       	cpc	r27, r1
   1038c:	59 f0       	breq	.+22     	; 0x103a4 <ls+0xfc>
   1038e:	81 15       	cp	r24, r1
   10390:	90 48       	sbci	r25, 0x80	; 128
   10392:	a1 05       	cpc	r26, r1
   10394:	b1 05       	cpc	r27, r1
   10396:	09 f0       	breq	.+2      	; 0x1039a <ls+0xf2>
   10398:	67 c0       	rjmp	.+206    	; 0x10468 <ls+0x1c0>
    {
        case S_IFREG:
            files = ls_info(fullpath,verbose);
   1039a:	b4 01       	movw	r22, r8
   1039c:	c8 01       	movw	r24, r16
   1039e:	c9 de       	rcall	.-622    	; 0x10132 <ls_info>
   103a0:	7c 01       	movw	r14, r24
            break;
   103a2:	64 c0       	rjmp	.+200    	; 0x1046c <ls+0x1c4>
        case S_IFDIR:
            dirp = opendir(fullpath);
   103a4:	c8 01       	movw	r24, r16
   103a6:	0e 94 9e 78 	call	0xf13c	; 0xf13c <opendir>
   103aa:	5c 01       	movw	r10, r24
            if(!dirp)
   103ac:	89 2b       	or	r24, r25
   103ae:	81 f0       	breq	.+32     	; 0x103d0 <ls+0x128>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   103b0:	e1 2c       	mov	r14, r1
   103b2:	f1 2c       	mov	r15, r1
                    strcat(fullpath,"/");
                }
                strcat(fullpath,de->d_name);
                files +=ls_info(fullpath,verbose);
// restore path
                fullpath[len] = 0;
   103b4:	c8 01       	movw	r24, r16
   103b6:	82 0d       	add	r24, r2
   103b8:	93 1d       	adc	r25, r3
   103ba:	c9 5c       	subi	r28, 0xC9	; 201
   103bc:	de 4f       	sbci	r29, 0xFE	; 254
   103be:	99 83       	std	Y+1, r25	; 0x01
   103c0:	88 83       	st	Y, r24
   103c2:	c7 53       	subi	r28, 0x37	; 55
   103c4:	d1 40       	sbci	r29, 0x01	; 1
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   103c6:	8d ed       	ldi	r24, 0xDD	; 221
   103c8:	9b e0       	ldi	r25, 0x0B	; 11
   103ca:	2c 01       	movw	r4, r24
   103cc:	61 2c       	mov	r6, r1
   103ce:	25 c0       	rjmp	.+74     	; 0x1041a <ls+0x172>
            break;
        case S_IFDIR:
            dirp = opendir(fullpath);
            if(!dirp)
            {
                printf("opendir failed\n");
   103d0:	80 e0       	ldi	r24, 0x00	; 0
   103d2:	9c e0       	ldi	r25, 0x0C	; 12
   103d4:	a0 e0       	ldi	r26, 0x00	; 0
   103d6:	ed b7       	in	r30, 0x3d	; 61
   103d8:	fe b7       	in	r31, 0x3e	; 62
   103da:	81 83       	std	Z+1, r24	; 0x01
   103dc:	92 83       	std	Z+2, r25	; 0x02
   103de:	a3 83       	std	Z+3, r26	; 0x03
   103e0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   103e4:	b7 cf       	rjmp	.-146    	; 0x10354 <ls+0xac>
                return(-1);
            }
            while ( (de = readdir(dirp)) )
            {
                if(de->d_name[0] == 0)
   103e6:	f6 01       	movw	r30, r12
   103e8:	80 81       	ld	r24, Z
   103ea:	88 23       	and	r24, r24
   103ec:	e1 f0       	breq	.+56     	; 0x10426 <ls+0x17e>
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
   103ee:	f6 01       	movw	r30, r12
   103f0:	01 90       	ld	r0, Z+
   103f2:	00 20       	and	r0, r0
   103f4:	e9 f7       	brne	.-6      	; 0x103f0 <ls+0x148>
   103f6:	31 97       	sbiw	r30, 0x01	; 1
   103f8:	ec 19       	sub	r30, r12
   103fa:	fd 09       	sbc	r31, r13
                if(len + len2 >= MAX_NAME_LEN)
   103fc:	e2 0d       	add	r30, r2
   103fe:	f3 1d       	adc	r31, r3
   10400:	ef 3f       	cpi	r30, 0xFF	; 255
   10402:	f1 05       	cpc	r31, r1
   10404:	a1 f0       	breq	.+40     	; 0x1042e <ls+0x186>
   10406:	9c f0       	brlt	.+38     	; 0x1042e <ls+0x186>
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   10408:	ed b7       	in	r30, 0x3d	; 61
   1040a:	fe b7       	in	r31, 0x3e	; 62
   1040c:	d5 82       	std	Z+5, r13	; 0x05
   1040e:	c4 82       	std	Z+4, r12	; 0x04
   10410:	41 82       	std	Z+1, r4	; 0x01
   10412:	52 82       	std	Z+2, r5	; 0x02
   10414:	63 82       	std	Z+3, r6	; 0x03
   10416:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            if(!dirp)
            {
                printf("opendir failed\n");
                return(-1);
            }
            while ( (de = readdir(dirp)) )
   1041a:	c5 01       	movw	r24, r10
   1041c:	0e 94 bc 78 	call	0xf178	; 0xf178 <readdir>
   10420:	6c 01       	movw	r12, r24
   10422:	89 2b       	or	r24, r25
   10424:	01 f7       	brne	.-64     	; 0x103e6 <ls+0x13e>
#ifdef ESP8266
                optimistic_yield(1000);
                wdt_reset();
#endif
            }
            closedir(dirp);
   10426:	c5 01       	movw	r24, r10
   10428:	0e 94 83 78 	call	0xf106	; 0xf106 <closedir>
            break;
   1042c:	1f c0       	rjmp	.+62     	; 0x1046c <ls+0x1c4>
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
                    continue;
                }
                if(!MATCH(fullpath,"/") )
   1042e:	66 ea       	ldi	r22, 0xA6	; 166
   10430:	78 e0       	ldi	r23, 0x08	; 8
   10432:	c8 01       	movw	r24, r16
   10434:	0e 94 aa 32 	call	0x6554	; 0x6554 <MATCH>
   10438:	89 2b       	or	r24, r25
   1043a:	29 f4       	brne	.+10     	; 0x10446 <ls+0x19e>
                {
                    strcat(fullpath,"/");
   1043c:	66 ea       	ldi	r22, 0xA6	; 166
   1043e:	78 e0       	ldi	r23, 0x08	; 8
   10440:	c8 01       	movw	r24, r16
   10442:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <strcat>
                }
                strcat(fullpath,de->d_name);
   10446:	b6 01       	movw	r22, r12
   10448:	c8 01       	movw	r24, r16
   1044a:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <strcat>
                files +=ls_info(fullpath,verbose);
   1044e:	b4 01       	movw	r22, r8
   10450:	c8 01       	movw	r24, r16
   10452:	6f de       	rcall	.-802    	; 0x10132 <ls_info>
   10454:	e8 0e       	add	r14, r24
   10456:	f9 1e       	adc	r15, r25
// restore path
                fullpath[len] = 0;
   10458:	c9 5c       	subi	r28, 0xC9	; 201
   1045a:	de 4f       	sbci	r29, 0xFE	; 254
   1045c:	e8 81       	ld	r30, Y
   1045e:	f9 81       	ldd	r31, Y+1	; 0x01
   10460:	c7 53       	subi	r28, 0x37	; 55
   10462:	d1 40       	sbci	r29, 0x01	; 1
   10464:	10 82       	st	Z, r1
   10466:	d9 cf       	rjmp	.-78     	; 0x1041a <ls+0x172>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   10468:	e1 2c       	mov	r14, r1
   1046a:	f1 2c       	mov	r15, r1
#endif
            }
            closedir(dirp);
            break;
    }
    printf("Files: %d\n", (int)files);
   1046c:	ed b7       	in	r30, 0x3d	; 61
   1046e:	fe b7       	in	r31, 0x3e	; 62
   10470:	f5 82       	std	Z+5, r15	; 0x05
   10472:	e4 82       	std	Z+4, r14	; 0x04
   10474:	82 ed       	ldi	r24, 0xD2	; 210
   10476:	9b e0       	ldi	r25, 0x0B	; 11
   10478:	a0 e0       	ldi	r26, 0x00	; 0
   1047a:	81 83       	std	Z+1, r24	; 0x01
   1047c:	92 83       	std	Z+2, r25	; 0x02
   1047e:	a3 83       	std	Z+3, r26	; 0x03
   10480:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    return(files);
   10484:	c7 01       	movw	r24, r14
}
   10486:	c8 5c       	subi	r28, 0xC8	; 200
   10488:	de 4f       	sbci	r29, 0xFE	; 254
   1048a:	0f b6       	in	r0, 0x3f	; 63
   1048c:	f8 94       	cli
   1048e:	de bf       	out	0x3e, r29	; 62
   10490:	0f be       	out	0x3f, r0	; 63
   10492:	cd bf       	out	0x3d, r28	; 61
   10494:	df 91       	pop	r29
   10496:	cf 91       	pop	r28
   10498:	1f 91       	pop	r17
   1049a:	0f 91       	pop	r16
   1049c:	ff 90       	pop	r15
   1049e:	ef 90       	pop	r14
   104a0:	df 90       	pop	r13
   104a2:	cf 90       	pop	r12
   104a4:	bf 90       	pop	r11
   104a6:	af 90       	pop	r10
   104a8:	9f 90       	pop	r9
   104aa:	8f 90       	pop	r8
   104ac:	6f 90       	pop	r6
   104ae:	5f 90       	pop	r5
   104b0:	4f 90       	pop	r4
   104b2:	3f 90       	pop	r3
   104b4:	2f 90       	pop	r2
   104b6:	08 95       	ret

000104b8 <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   104b8:	a8 e0       	ldi	r26, 0x08	; 8
   104ba:	b1 e0       	ldi	r27, 0x01	; 1
   104bc:	e2 e6       	ldi	r30, 0x62	; 98
   104be:	f2 e8       	ldi	r31, 0x82	; 130
   104c0:	0c 94 95 e7 	jmp	0x1cf2a	; 0x1cf2a <__prologue_saves__+0x4>
    char *ptr;
    int ind = 0;

	if(argc < 1)
   104c4:	18 16       	cp	r1, r24
   104c6:	19 06       	cpc	r1, r25
   104c8:	1c f0       	brlt	.+6      	; 0x104d0 <posix_tests+0x18>
		return(0);
   104ca:	80 e0       	ldi	r24, 0x00	; 0
   104cc:	90 e0       	ldi	r25, 0x00	; 0
   104ce:	dd c1       	rjmp	.+954    	; 0x1088a <posix_tests+0x3d2>

    ptr = argv[ind++];
   104d0:	fb 01       	movw	r30, r22
   104d2:	c0 80       	ld	r12, Z
   104d4:	d1 80       	ldd	r13, Z+1	; 0x01
	printf("argv[%d]=%s\n",(int)i, argv[i]);
}
#endif


    if(!ptr)
   104d6:	c1 14       	cp	r12, r1
   104d8:	d1 04       	cpc	r13, r1
   104da:	b9 f3       	breq	.-18     	; 0x104ca <posix_tests+0x12>
   104dc:	4b 01       	movw	r8, r22
   104de:	3c 01       	movw	r6, r24
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
   104e0:	6c ea       	ldi	r22, 0xAC	; 172
   104e2:	7b e0       	ldi	r23, 0x0B	; 11
   104e4:	c6 01       	movw	r24, r12
   104e6:	0e 94 aa 32 	call	0x6554	; 0x6554 <MATCH>
   104ea:	89 2b       	or	r24, r25
   104ec:	a1 f0       	breq	.+40     	; 0x10516 <posix_tests+0x5e>
    {
        ptr = argv[ind++];
   104ee:	f4 01       	movw	r30, r8
   104f0:	c2 80       	ldd	r12, Z+2	; 0x02
   104f2:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   104f4:	c1 14       	cp	r12, r1
   104f6:	d1 04       	cpc	r13, r1
   104f8:	21 f4       	brne	.+8      	; 0x10502 <posix_tests+0x4a>
        {
            posix_help(1);
   104fa:	81 e0       	ldi	r24, 0x01	; 1
   104fc:	90 e0       	ldi	r25, 0x00	; 0
   104fe:	75 dc       	rcall	.-1814   	; 0xfdea <posix_help>
   10500:	45 c1       	rjmp	.+650    	; 0x1078c <posix_tests+0x2d4>
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   10502:	62 e6       	ldi	r22, 0x62	; 98
   10504:	76 e1       	ldi	r23, 0x16	; 22
   10506:	c6 01       	movw	r24, r12
   10508:	0e 94 aa 32 	call	0x6554	; 0x6554 <MATCH>
   1050c:	89 2b       	or	r24, r25
   1050e:	a9 f7       	brne	.-22     	; 0x104fa <posix_tests+0x42>
    if(!ptr)
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   10510:	02 e0       	ldi	r16, 0x02	; 2
   10512:	10 e0       	ldi	r17, 0x00	; 0
   10514:	02 c0       	rjmp	.+4      	; 0x1051a <posix_tests+0x62>
    int ind = 0;

	if(argc < 1)
		return(0);

    ptr = argv[ind++];
   10516:	01 e0       	ldi	r16, 0x01	; 1
   10518:	10 e0       	ldi	r17, 0x00	; 0
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   1051a:	78 01       	movw	r14, r16
   1051c:	ff ef       	ldi	r31, 0xFF	; 255
   1051e:	ef 1a       	sub	r14, r31
   10520:	ff 0a       	sbc	r15, r31
   10522:	93 01       	movw	r18, r6
   10524:	a7 01       	movw	r20, r14
   10526:	62 eb       	ldi	r22, 0xB2	; 178
   10528:	7b e0       	ldi	r23, 0x0B	; 11
   1052a:	c6 01       	movw	r24, r12
   1052c:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <MATCHARGS>
   10530:	89 2b       	or	r24, r25
   10532:	99 f1       	breq	.+102    	; 0x1059a <posix_tests+0xe2>
   10534:	78 01       	movw	r14, r16
   10536:	ee 0c       	add	r14, r14
   10538:	ff 1c       	adc	r15, r15
   1053a:	e8 0c       	add	r14, r8
   1053c:	f9 1c       	adc	r15, r9
   1053e:	57 01       	movw	r10, r14
   10540:	47 01       	movw	r8, r14
   10542:	68 01       	movw	r12, r16
   10544:	41 2c       	mov	r4, r1
   10546:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   10548:	c6 14       	cp	r12, r6
   1054a:	d7 04       	cpc	r13, r7
   1054c:	14 f5       	brge	.+68     	; 0x10592 <posix_tests+0xda>
        {
            if(MATCH(argv[i],"-p"))
   1054e:	66 eb       	ldi	r22, 0xB6	; 182
   10550:	7b e0       	ldi	r23, 0x0B	; 11
   10552:	f4 01       	movw	r30, r8
   10554:	81 91       	ld	r24, Z+
   10556:	91 91       	ld	r25, Z+
   10558:	4f 01       	movw	r8, r30
   1055a:	0e 94 aa 32 	call	0x6554	; 0x6554 <MATCH>
   1055e:	89 2b       	or	r24, r25
   10560:	19 f0       	breq	.+6      	; 0x10568 <posix_tests+0xb0>
                page = 1;
   10562:	44 24       	eor	r4, r4
   10564:	43 94       	inc	r4
   10566:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   10568:	ff ef       	ldi	r31, 0xFF	; 255
   1056a:	cf 1a       	sub	r12, r31
   1056c:	df 0a       	sbc	r13, r31
   1056e:	ec cf       	rjmp	.-40     	; 0x10548 <posix_tests+0x90>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   10570:	66 eb       	ldi	r22, 0xB6	; 182
   10572:	7b e0       	ldi	r23, 0x0B	; 11
   10574:	f5 01       	movw	r30, r10
   10576:	81 91       	ld	r24, Z+
   10578:	91 91       	ld	r25, Z+
   1057a:	5f 01       	movw	r10, r30
   1057c:	0e 94 aa 32 	call	0x6554	; 0x6554 <MATCH>
   10580:	89 2b       	or	r24, r25
   10582:	29 f4       	brne	.+10     	; 0x1058e <posix_tests+0xd6>
			{
				// displays its own errors
                cat(argv[ind], page);
   10584:	b2 01       	movw	r22, r4
   10586:	f7 01       	movw	r30, r14
   10588:	80 81       	ld	r24, Z
   1058a:	91 81       	ldd	r25, Z+1	; 0x01
   1058c:	65 dd       	rcall	.-1334   	; 0x10058 <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   1058e:	0f 5f       	subi	r16, 0xFF	; 255
   10590:	1f 4f       	sbci	r17, 0xFF	; 255
   10592:	06 15       	cp	r16, r6
   10594:	17 05       	cpc	r17, r7
   10596:	64 f3       	brlt	.-40     	; 0x10570 <posix_tests+0xb8>
   10598:	f9 c0       	rjmp	.+498    	; 0x1078c <posix_tests+0x2d4>
		}
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   1059a:	58 01       	movw	r10, r16
   1059c:	f2 e0       	ldi	r31, 0x02	; 2
   1059e:	af 0e       	add	r10, r31
   105a0:	b1 1c       	adc	r11, r1
   105a2:	93 01       	movw	r18, r6
   105a4:	a5 01       	movw	r20, r10
   105a6:	69 eb       	ldi	r22, 0xB9	; 185
   105a8:	7b e0       	ldi	r23, 0x0B	; 11
   105aa:	c6 01       	movw	r24, r12
   105ac:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <MATCHARGS>
   105b0:	89 2b       	or	r24, r25
   105b2:	69 f0       	breq	.+26     	; 0x105ce <posix_tests+0x116>
    {
		if( copy(argv[ind],argv[ind+1]) < 0)
   105b4:	f8 01       	movw	r30, r16
   105b6:	ee 0f       	add	r30, r30
   105b8:	ff 1f       	adc	r31, r31
   105ba:	e8 0d       	add	r30, r8
   105bc:	f9 1d       	adc	r31, r9
   105be:	62 81       	ldd	r22, Z+2	; 0x02
   105c0:	73 81       	ldd	r23, Z+3	; 0x03
   105c2:	80 81       	ld	r24, Z
   105c4:	91 81       	ldd	r25, Z+1	; 0x01
   105c6:	32 dc       	rcall	.-1948   	; 0xfe2c <copy>
   105c8:	97 ff       	sbrs	r25, 7
   105ca:	e0 c0       	rjmp	.+448    	; 0x1078c <posix_tests+0x2d4>
   105cc:	5c c1       	rjmp	.+696    	; 0x10886 <posix_tests+0x3ce>
			return(-1);
        return(1);
    }

    else if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   105ce:	93 01       	movw	r18, r6
   105d0:	a7 01       	movw	r20, r14
   105d2:	6e eb       	ldi	r22, 0xBE	; 190
   105d4:	7b e0       	ldi	r23, 0x0B	; 11
   105d6:	c6 01       	movw	r24, r12
   105d8:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <MATCHARGS>
   105dc:	89 2b       	or	r24, r25
   105de:	b9 f0       	breq	.+46     	; 0x1060e <posix_tests+0x156>
    {
        if ( chdir(argv[ind]) != 0)
   105e0:	78 01       	movw	r14, r16
   105e2:	ee 0c       	add	r14, r14
   105e4:	ff 1c       	adc	r15, r15
   105e6:	e8 0c       	add	r14, r8
   105e8:	f9 1c       	adc	r15, r9
   105ea:	f7 01       	movw	r30, r14
   105ec:	80 81       	ld	r24, Z
   105ee:	91 81       	ldd	r25, Z+1	; 0x01
   105f0:	0e 94 a8 77 	call	0xef50	; 0xef50 <chdir>
   105f4:	89 2b       	or	r24, r25
   105f6:	09 f4       	brne	.+2      	; 0x105fa <posix_tests+0x142>
   105f8:	c9 c0       	rjmp	.+402    	; 0x1078c <posix_tests+0x2d4>
		{
            printf("chdir %s failed\n", argv[ind]);
   105fa:	f7 01       	movw	r30, r14
   105fc:	80 81       	ld	r24, Z
   105fe:	91 81       	ldd	r25, Z+1	; 0x01
   10600:	ed b7       	in	r30, 0x3d	; 61
   10602:	fe b7       	in	r31, 0x3e	; 62
   10604:	95 83       	std	Z+5, r25	; 0x05
   10606:	84 83       	std	Z+4, r24	; 0x04
   10608:	89 e8       	ldi	r24, 0x89	; 137
   1060a:	9d e0       	ldi	r25, 0x0D	; 13
   1060c:	36 c1       	rjmp	.+620    	; 0x1087a <posix_tests+0x3c2>
			return(-1);
        return(1);
    }
#endif

    else if (MATCHI(ptr,"ls") )
   1060e:	68 ed       	ldi	r22, 0xD8	; 216
   10610:	78 e0       	ldi	r23, 0x08	; 8
   10612:	c6 01       	movw	r24, r12
   10614:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   10618:	89 2b       	or	r24, r25
   1061a:	09 f4       	brne	.+2      	; 0x1061e <posix_tests+0x166>
   1061c:	40 c0       	rjmp	.+128    	; 0x1069e <posix_tests+0x1e6>
   1061e:	78 01       	movw	r14, r16
   10620:	ee 0c       	add	r14, r14
   10622:	ff 1c       	adc	r15, r15
   10624:	e8 0c       	add	r14, r8
   10626:	f9 1c       	adc	r15, r9
   10628:	c1 2c       	mov	r12, r1
   1062a:	d1 2c       	mov	r13, r1
        int args = 0;
        for(i=ind;i<argc;++i)
        {
			if(!argv[i])
			{
				printf("ls: null argument # %d\n", i);
   1062c:	81 e7       	ldi	r24, 0x71	; 113
   1062e:	9d e0       	ldi	r25, 0x0D	; 13
   10630:	4c 01       	movw	r8, r24
   10632:	a1 2c       	mov	r10, r1

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   10634:	06 15       	cp	r16, r6
   10636:	17 05       	cpc	r17, r7
   10638:	34 f5       	brge	.+76     	; 0x10686 <posix_tests+0x1ce>
        {
			if(!argv[i])
   1063a:	f7 01       	movw	r30, r14
   1063c:	80 81       	ld	r24, Z
   1063e:	91 81       	ldd	r25, Z+1	; 0x01
   10640:	00 97       	sbiw	r24, 0x00	; 0
   10642:	51 f4       	brne	.+20     	; 0x10658 <posix_tests+0x1a0>
			{
				printf("ls: null argument # %d\n", i);
   10644:	ed b7       	in	r30, 0x3d	; 61
   10646:	fe b7       	in	r31, 0x3e	; 62
   10648:	15 83       	std	Z+5, r17	; 0x05
   1064a:	04 83       	std	Z+4, r16	; 0x04
   1064c:	81 82       	std	Z+1, r8	; 0x01
   1064e:	92 82       	std	Z+2, r9	; 0x02
   10650:	a3 82       	std	Z+3, r10	; 0x03
   10652:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
				continue;
   10656:	11 c0       	rjmp	.+34     	; 0x1067a <posix_tests+0x1c2>
			}
            if(MATCH(argv[i],"-l"))	// skip long format test - we always use long format
   10658:	61 ec       	ldi	r22, 0xC1	; 193
   1065a:	7b e0       	ldi	r23, 0x0B	; 11
   1065c:	0e 94 aa 32 	call	0x6554	; 0x6554 <MATCH>
   10660:	89 2b       	or	r24, r25
   10662:	59 f4       	brne	.+22     	; 0x1067a <posix_tests+0x1c2>
				continue;
			if( ls(argv[i],1) < 0)
   10664:	61 e0       	ldi	r22, 0x01	; 1
   10666:	70 e0       	ldi	r23, 0x00	; 0
   10668:	f7 01       	movw	r30, r14
   1066a:	80 81       	ld	r24, Z
   1066c:	91 81       	ldd	r25, Z+1	; 0x01
   1066e:	1c de       	rcall	.-968    	; 0x102a8 <ls>
   10670:	97 fd       	sbrc	r25, 7
   10672:	09 c1       	rjmp	.+530    	; 0x10886 <posix_tests+0x3ce>
			{
				return(-1);
			};
            ++args;
   10674:	ff ef       	ldi	r31, 0xFF	; 255
   10676:	cf 1a       	sub	r12, r31
   10678:	df 0a       	sbc	r13, r31

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   1067a:	0f 5f       	subi	r16, 0xFF	; 255
   1067c:	1f 4f       	sbci	r17, 0xFF	; 255
   1067e:	82 e0       	ldi	r24, 0x02	; 2
   10680:	e8 0e       	add	r14, r24
   10682:	f1 1c       	adc	r15, r1
   10684:	d7 cf       	rjmp	.-82     	; 0x10634 <posix_tests+0x17c>
			{
				return(-1);
			};
            ++args;
        }
        if(!args)
   10686:	c1 14       	cp	r12, r1
   10688:	d1 04       	cpc	r13, r1
   1068a:	09 f0       	breq	.+2      	; 0x1068e <posix_tests+0x1d6>
   1068c:	7f c0       	rjmp	.+254    	; 0x1078c <posix_tests+0x2d4>
        {
            if( ls("",1) < 0)
   1068e:	61 e0       	ldi	r22, 0x01	; 1
   10690:	70 e0       	ldi	r23, 0x00	; 0
   10692:	8e e0       	ldi	r24, 0x0E	; 14
   10694:	9c e0       	ldi	r25, 0x0C	; 12
   10696:	08 de       	rcall	.-1008   	; 0x102a8 <ls>
   10698:	97 ff       	sbrs	r25, 7
   1069a:	78 c0       	rjmp	.+240    	; 0x1078c <posix_tests+0x2d4>
   1069c:	f4 c0       	rjmp	.+488    	; 0x10886 <posix_tests+0x3ce>
		}
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   1069e:	93 01       	movw	r18, r6
   106a0:	a7 01       	movw	r20, r14
   106a2:	64 ec       	ldi	r22, 0xC4	; 196
   106a4:	7b e0       	ldi	r23, 0x0B	; 11
   106a6:	c6 01       	movw	r24, r12
   106a8:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <MATCHARGS>
   106ac:	89 2b       	or	r24, r25
   106ae:	79 f1       	breq	.+94     	; 0x1070e <posix_tests+0x256>
    {
        int mode = 0777;
        if((ind+2) <= argc)
   106b0:	e6 14       	cp	r14, r6
   106b2:	f7 04       	cpc	r15, r7
   106b4:	7c f4       	brge	.+30     	; 0x106d4 <posix_tests+0x21c>
        {
            mode = strtol(argv[ind+1],NULL,8);
   106b6:	ee 0c       	add	r14, r14
   106b8:	ff 1c       	adc	r15, r15
   106ba:	f4 01       	movw	r30, r8
   106bc:	ee 0d       	add	r30, r14
   106be:	ff 1d       	adc	r31, r15
   106c0:	48 e0       	ldi	r20, 0x08	; 8
   106c2:	50 e0       	ldi	r21, 0x00	; 0
   106c4:	60 e0       	ldi	r22, 0x00	; 0
   106c6:	70 e0       	ldi	r23, 0x00	; 0
   106c8:	80 81       	ld	r24, Z
   106ca:	91 81       	ldd	r25, Z+1	; 0x01
   106cc:	0e 94 ac 47 	call	0x8f58	; 0x8f58 <strtol>
   106d0:	ab 01       	movw	r20, r22
   106d2:	02 c0       	rjmp	.+4      	; 0x106d8 <posix_tests+0x220>
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   106d4:	4f ef       	ldi	r20, 0xFF	; 255
   106d6:	51 e0       	ldi	r21, 0x01	; 1
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        if ( mkdir(argv[ind],mode) != 0 )
   106d8:	78 01       	movw	r14, r16
   106da:	ee 0c       	add	r14, r14
   106dc:	ff 1c       	adc	r15, r15
   106de:	e8 0c       	add	r14, r8
   106e0:	f9 1c       	adc	r15, r9
   106e2:	05 2e       	mov	r0, r21
   106e4:	00 0c       	add	r0, r0
   106e6:	66 0b       	sbc	r22, r22
   106e8:	77 0b       	sbc	r23, r23
   106ea:	f7 01       	movw	r30, r14
   106ec:	80 81       	ld	r24, Z
   106ee:	91 81       	ldd	r25, Z+1	; 0x01
   106f0:	0e 94 15 78 	call	0xf02a	; 0xf02a <mkdir>
   106f4:	89 2b       	or	r24, r25
   106f6:	09 f4       	brne	.+2      	; 0x106fa <posix_tests+0x242>
   106f8:	49 c0       	rjmp	.+146    	; 0x1078c <posix_tests+0x2d4>
        {
            printf("mkdir %s failed\n", argv[ind]);
   106fa:	f7 01       	movw	r30, r14
   106fc:	80 81       	ld	r24, Z
   106fe:	91 81       	ldd	r25, Z+1	; 0x01
   10700:	ed b7       	in	r30, 0x3d	; 61
   10702:	fe b7       	in	r31, 0x3e	; 62
   10704:	95 83       	std	Z+5, r25	; 0x05
   10706:	84 83       	std	Z+4, r24	; 0x04
   10708:	80 e6       	ldi	r24, 0x60	; 96
   1070a:	9d e0       	ldi	r25, 0x0D	; 13
   1070c:	b6 c0       	rjmp	.+364    	; 0x1087a <posix_tests+0x3c2>
            return(-1);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"page", (ind + 1), argc))
   1070e:	93 01       	movw	r18, r6
   10710:	a7 01       	movw	r20, r14
   10712:	6a ec       	ldi	r22, 0xCA	; 202
   10714:	7b e0       	ldi	r23, 0x0B	; 11
   10716:	c6 01       	movw	r24, r12
   10718:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <MATCHARGS>
   1071c:	89 2b       	or	r24, r25
   1071e:	71 f0       	breq	.+28     	; 0x1073c <posix_tests+0x284>
    {
        setpage(atoi(argv[ind]));
   10720:	00 0f       	add	r16, r16
   10722:	11 1f       	adc	r17, r17
   10724:	f4 01       	movw	r30, r8
   10726:	e0 0f       	add	r30, r16
   10728:	f1 1f       	adc	r31, r17
   1072a:	80 81       	ld	r24, Z
   1072c:	91 81       	ldd	r25, Z+1	; 0x01
   1072e:	0e 94 0a 48 	call	0x9014	; 0x9014 <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   10732:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <_pagesize+0x1>
   10736:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <_pagesize>
   1073a:	28 c0       	rjmp	.+80     	; 0x1078c <posix_tests+0x2d4>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    else if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   1073c:	93 01       	movw	r18, r6
   1073e:	a8 01       	movw	r20, r16
   10740:	6f ec       	ldi	r22, 0xCF	; 207
   10742:	7b e0       	ldi	r23, 0x0B	; 11
   10744:	c6 01       	movw	r24, r12
   10746:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <MATCHARGS>
   1074a:	89 2b       	or	r24, r25
   1074c:	11 f1       	breq	.+68     	; 0x10792 <posix_tests+0x2da>
    {
        char path[MAX_NAME_LEN+1];
		char *ptr = getcwd(path, sizeof(path)-2);
   1074e:	6f ef       	ldi	r22, 0xFF	; 255
   10750:	70 e0       	ldi	r23, 0x00	; 0
   10752:	ce 01       	movw	r24, r28
   10754:	08 96       	adiw	r24, 0x08	; 8
   10756:	0e 94 f0 77 	call	0xefe0	; 0xefe0 <getcwd>
		if(ptr == NULL)
   1075a:	00 97       	sbiw	r24, 0x00	; 0
   1075c:	59 f4       	brne	.+22     	; 0x10774 <posix_tests+0x2bc>
		{
			printf("pwd FAILED\n");
   1075e:	84 e5       	ldi	r24, 0x54	; 84
   10760:	9d e0       	ldi	r25, 0x0D	; 13
   10762:	a0 e0       	ldi	r26, 0x00	; 0
   10764:	ed b7       	in	r30, 0x3d	; 61
   10766:	fe b7       	in	r31, 0x3e	; 62
   10768:	81 83       	std	Z+1, r24	; 0x01
   1076a:	92 83       	std	Z+2, r25	; 0x02
   1076c:	a3 83       	std	Z+3, r26	; 0x03
   1076e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   10772:	89 c0       	rjmp	.+274    	; 0x10886 <posix_tests+0x3ce>
			return(-1);
		}
        printf("%s\n", ptr);
   10774:	ed b7       	in	r30, 0x3d	; 61
   10776:	fe b7       	in	r31, 0x3e	; 62
   10778:	95 83       	std	Z+5, r25	; 0x05
   1077a:	84 83       	std	Z+4, r24	; 0x04
   1077c:	80 e5       	ldi	r24, 0x50	; 80
   1077e:	9d e0       	ldi	r25, 0x0D	; 13
   10780:	a0 e0       	ldi	r26, 0x00	; 0
   10782:	81 83       	std	Z+1, r24	; 0x01
   10784:	92 83       	std	Z+2, r25	; 0x02
   10786:	a3 83       	std	Z+3, r26	; 0x03
   10788:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        return(1);
   1078c:	81 e0       	ldi	r24, 0x01	; 1
   1078e:	90 e0       	ldi	r25, 0x00	; 0
   10790:	7c c0       	rjmp	.+248    	; 0x1088a <posix_tests+0x3d2>
    }

    else if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   10792:	93 01       	movw	r18, r6
   10794:	a5 01       	movw	r20, r10
   10796:	63 ed       	ldi	r22, 0xD3	; 211
   10798:	7b e0       	ldi	r23, 0x0B	; 11
   1079a:	c6 01       	movw	r24, r12
   1079c:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <MATCHARGS>
   107a0:	89 2b       	or	r24, r25
   107a2:	59 f1       	breq	.+86     	; 0x107fa <posix_tests+0x342>
    {
        if( rename(argv[ind],argv[ind+1]) != 0)
   107a4:	00 0f       	add	r16, r16
   107a6:	11 1f       	adc	r17, r17
   107a8:	64 01       	movw	r12, r8
   107aa:	c0 0e       	add	r12, r16
   107ac:	d1 1e       	adc	r13, r17
   107ae:	0e 5f       	subi	r16, 0xFE	; 254
   107b0:	1f 4f       	sbci	r17, 0xFF	; 255
   107b2:	74 01       	movw	r14, r8
   107b4:	e0 0e       	add	r14, r16
   107b6:	f1 1e       	adc	r15, r17
   107b8:	f7 01       	movw	r30, r14
   107ba:	60 81       	ld	r22, Z
   107bc:	71 81       	ldd	r23, Z+1	; 0x01
   107be:	f6 01       	movw	r30, r12
   107c0:	80 81       	ld	r24, Z
   107c2:	91 81       	ldd	r25, Z+1	; 0x01
   107c4:	0e 94 43 78 	call	0xf086	; 0xf086 <rename>
   107c8:	89 2b       	or	r24, r25
   107ca:	01 f3       	breq	.-64     	; 0x1078c <posix_tests+0x2d4>
        {
            printf("rename %s to %s\n", argv[ind], argv[ind+1]);
   107cc:	f7 01       	movw	r30, r14
   107ce:	80 81       	ld	r24, Z
   107d0:	91 81       	ldd	r25, Z+1	; 0x01
   107d2:	ed b7       	in	r30, 0x3d	; 61
   107d4:	fe b7       	in	r31, 0x3e	; 62
   107d6:	97 83       	std	Z+7, r25	; 0x07
   107d8:	86 83       	std	Z+6, r24	; 0x06
   107da:	f6 01       	movw	r30, r12
   107dc:	80 81       	ld	r24, Z
   107de:	91 81       	ldd	r25, Z+1	; 0x01
   107e0:	ed b7       	in	r30, 0x3d	; 61
   107e2:	fe b7       	in	r31, 0x3e	; 62
   107e4:	95 83       	std	Z+5, r25	; 0x05
   107e6:	84 83       	std	Z+4, r24	; 0x04
   107e8:	8f e3       	ldi	r24, 0x3F	; 63
   107ea:	9d e0       	ldi	r25, 0x0D	; 13
   107ec:	a0 e0       	ldi	r26, 0x00	; 0
   107ee:	81 83       	std	Z+1, r24	; 0x01
   107f0:	92 83       	std	Z+2, r25	; 0x02
   107f2:	a3 83       	std	Z+3, r26	; 0x03
   107f4:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   107f8:	46 c0       	rjmp	.+140    	; 0x10886 <posix_tests+0x3ce>
            return(-1);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   107fa:	93 01       	movw	r18, r6
   107fc:	a7 01       	movw	r20, r14
   107fe:	6a ed       	ldi	r22, 0xDA	; 218
   10800:	7b e0       	ldi	r23, 0x0B	; 11
   10802:	c6 01       	movw	r24, r12
   10804:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <MATCHARGS>
   10808:	89 2b       	or	r24, r25
   1080a:	b9 f0       	breq	.+46     	; 0x1083a <posix_tests+0x382>
    {
        if ( unlink(argv[ind]) != 0)
   1080c:	78 01       	movw	r14, r16
   1080e:	ee 0c       	add	r14, r14
   10810:	ff 1c       	adc	r15, r15
   10812:	e8 0c       	add	r14, r8
   10814:	f9 1c       	adc	r15, r9
   10816:	f7 01       	movw	r30, r14
   10818:	80 81       	ld	r24, Z
   1081a:	91 81       	ldd	r25, Z+1	; 0x01
   1081c:	0e 94 62 78 	call	0xf0c4	; 0xf0c4 <unlink>
   10820:	89 2b       	or	r24, r25
   10822:	09 f4       	brne	.+2      	; 0x10826 <posix_tests+0x36e>
   10824:	b3 cf       	rjmp	.-154    	; 0x1078c <posix_tests+0x2d4>
        {
            printf("rm %s failed\n", argv[ind]);
   10826:	f7 01       	movw	r30, r14
   10828:	80 81       	ld	r24, Z
   1082a:	91 81       	ldd	r25, Z+1	; 0x01
   1082c:	ed b7       	in	r30, 0x3d	; 61
   1082e:	fe b7       	in	r31, 0x3e	; 62
   10830:	95 83       	std	Z+5, r25	; 0x05
   10832:	84 83       	std	Z+4, r24	; 0x04
   10834:	81 e3       	ldi	r24, 0x31	; 49
   10836:	9d e0       	ldi	r25, 0x0D	; 13
   10838:	20 c0       	rjmp	.+64     	; 0x1087a <posix_tests+0x3c2>
        dump_stat(&p);
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   1083a:	93 01       	movw	r18, r6
   1083c:	a7 01       	movw	r20, r14
   1083e:	6d ed       	ldi	r22, 0xDD	; 221
   10840:	7b e0       	ldi	r23, 0x0B	; 11
   10842:	c6 01       	movw	r24, r12
   10844:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <MATCHARGS>
   10848:	89 2b       	or	r24, r25
   1084a:	09 f4       	brne	.+2      	; 0x1084e <posix_tests+0x396>
   1084c:	3e ce       	rjmp	.-900    	; 0x104ca <posix_tests+0x12>
    {
        if ( rmdir(argv[ind]) != 0)
   1084e:	78 01       	movw	r14, r16
   10850:	ee 0c       	add	r14, r14
   10852:	ff 1c       	adc	r15, r15
   10854:	e8 0c       	add	r14, r8
   10856:	f9 1c       	adc	r15, r9
   10858:	f7 01       	movw	r30, r14
   1085a:	80 81       	ld	r24, Z
   1085c:	91 81       	ldd	r25, Z+1	; 0x01
   1085e:	0e 94 81 78 	call	0xf102	; 0xf102 <rmdir>
   10862:	89 2b       	or	r24, r25
   10864:	09 f4       	brne	.+2      	; 0x10868 <posix_tests+0x3b0>
   10866:	92 cf       	rjmp	.-220    	; 0x1078c <posix_tests+0x2d4>
        {
            printf("rmdir %s failed\n", argv[ind]);
   10868:	f7 01       	movw	r30, r14
   1086a:	80 81       	ld	r24, Z
   1086c:	91 81       	ldd	r25, Z+1	; 0x01
   1086e:	ed b7       	in	r30, 0x3d	; 61
   10870:	fe b7       	in	r31, 0x3e	; 62
   10872:	95 83       	std	Z+5, r25	; 0x05
   10874:	84 83       	std	Z+4, r24	; 0x04
   10876:	80 e2       	ldi	r24, 0x20	; 32
   10878:	9d e0       	ldi	r25, 0x0D	; 13
   1087a:	a0 e0       	ldi	r26, 0x00	; 0
   1087c:	81 83       	std	Z+1, r24	; 0x01
   1087e:	92 83       	std	Z+2, r25	; 0x02
   10880:	a3 83       	std	Z+3, r26	; 0x03
   10882:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            return(-1);
   10886:	8f ef       	ldi	r24, 0xFF	; 255
   10888:	9f ef       	ldi	r25, 0xFF	; 255
        return(1);
    }
#endif

    return(0);
}
   1088a:	c8 5f       	subi	r28, 0xF8	; 248
   1088c:	de 4f       	sbci	r29, 0xFE	; 254
   1088e:	e0 e1       	ldi	r30, 0x10	; 16
   10890:	0c 94 b1 e7 	jmp	0x1cf62	; 0x1cf62 <__epilogue_restores__+0x4>

00010894 <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   10894:	00 d0       	rcall	.+0      	; 0x10896 <gpib_timer_init+0x2>
   10896:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   10898:	61 e0       	ldi	r22, 0x01	; 1
   1089a:	70 e0       	ldi	r23, 0x00	; 0
   1089c:	86 e0       	ldi	r24, 0x06	; 6
   1089e:	96 e8       	ldi	r25, 0x86	; 134
   108a0:	0e 94 1f 35 	call	0x6a3e	; 0x6a3e <set_timers>
   108a4:	01 96       	adiw	r24, 0x01	; 1
   108a6:	51 f4       	brne	.+20     	; 0x108bc <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   108a8:	8c ed       	ldi	r24, 0xDC	; 220
   108aa:	9e e0       	ldi	r25, 0x0E	; 14
   108ac:	a0 e0       	ldi	r26, 0x00	; 0
   108ae:	ed b7       	in	r30, 0x3d	; 61
   108b0:	fe b7       	in	r31, 0x3e	; 62
   108b2:	81 83       	std	Z+1, r24	; 0x01
   108b4:	92 83       	std	Z+2, r25	; 0x02
   108b6:	a3 83       	std	Z+3, r26	; 0x03
   108b8:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

    gpib_timer_reset();
   108bc:	95 d1       	rcall	.+810    	; 0x10be8 <gpib_timer_reset>
}
   108be:	0f 90       	pop	r0
   108c0:	0f 90       	pop	r0
   108c2:	0f 90       	pop	r0
   108c4:	08 95       	ret

000108c6 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   108c6:	28 2f       	mov	r18, r24
   108c8:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   108ca:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   108cc:	88 0f       	add	r24, r24
        if(mask & 1)
   108ce:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   108d0:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   108d2:	26 95       	lsr	r18
   108d4:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   108d6:	d1 f7       	brne	.-12     	; 0x108cc <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   108d8:	08 95       	ret

000108da <ppr_set>:
void ppr_set(uint8_t mask)
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    _ppr_reg = reverse_8bits(mask);
   108da:	f5 df       	rcall	.-22     	; 0x108c6 <reverse_8bits>
   108dc:	80 93 54 19 	sts	0x1954, r24	; 0x801954 <_ppr_reg>
#else
    _ppr_reg = mask;
#endif
    SPI0_TXRX_Byte(_ppr_reg);
   108e0:	0e 94 2d 2b 	call	0x565a	; 0x565a <SPI0_TXRX_Byte>

    GPIB_IO_HI(PPE);
   108e4:	2a 9a       	sbi	0x05, 2	; 5
   108e6:	22 9a       	sbi	0x04, 2	; 4
    GPIB_IO_LOW(PPE);
   108e8:	2a 98       	cbi	0x05, 2	; 5
   108ea:	22 9a       	sbi	0x04, 2	; 4
   108ec:	08 95       	ret

000108ee <ppr_reg>:
uint8_t ppr_reg()
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    return(reverse_8bits(_ppr_reg));
   108ee:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <_ppr_reg>
   108f2:	e9 cf       	rjmp	.-46     	; 0x108c6 <reverse_8bits>
#else
    return(_ppr_reg);
#endif
}
   108f4:	08 95       	ret

000108f6 <ppr_init>:
///
/// - Hides the register access implimentation from the upper level.
/// @return  void

void ppr_init()
{
   108f6:	00 d0       	rcall	.+0      	; 0x108f8 <ppr_init+0x2>
   108f8:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_PPR)
   108fa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   108fe:	81 ff       	sbrs	r24, 1
   10900:	0a c0       	rjmp	.+20     	; 0x10916 <ppr_init+0x20>
        printf("[PPR DISABLE ALL]\n");
   10902:	89 ec       	ldi	r24, 0xC9	; 201
   10904:	9e e0       	ldi	r25, 0x0E	; 14
   10906:	a0 e0       	ldi	r26, 0x00	; 0
   10908:	ed b7       	in	r30, 0x3d	; 61
   1090a:	fe b7       	in	r31, 0x3e	; 62
   1090c:	81 83       	std	Z+1, r24	; 0x01
   1090e:	92 83       	std	Z+2, r25	; 0x02
   10910:	a3 83       	std	Z+3, r26	; 0x03
   10912:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
    ppr_set(0);
   10916:	80 e0       	ldi	r24, 0x00	; 0
   10918:	e0 df       	rcall	.-64     	; 0x108da <ppr_set>
}
   1091a:	0f 90       	pop	r0
   1091c:	0f 90       	pop	r0
   1091e:	0f 90       	pop	r0
   10920:	08 95       	ret

00010922 <ppr_bit_set>:
/// @return  void

void ppr_bit_set(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_SET(_ppr_reg,bit);
   10922:	21 e0       	ldi	r18, 0x01	; 1
   10924:	30 e0       	ldi	r19, 0x00	; 0
   10926:	01 c0       	rjmp	.+2      	; 0x1092a <ppr_bit_set+0x8>
   10928:	22 0f       	add	r18, r18
   1092a:	8a 95       	dec	r24
   1092c:	ea f7       	brpl	.-6      	; 0x10928 <ppr_bit_set+0x6>
   1092e:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <_ppr_reg>
   10932:	82 2b       	or	r24, r18
   10934:	80 93 54 19 	sts	0x1954, r24	; 0x801954 <_ppr_reg>
    ppr_set(_ppr_reg);
   10938:	d0 cf       	rjmp	.-96     	; 0x108da <ppr_set>
   1093a:	08 95       	ret

0001093c <ppr_bit_clr>:
/// @return  void

void ppr_bit_clr(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_CLR(_ppr_reg,bit);
   1093c:	21 e0       	ldi	r18, 0x01	; 1
   1093e:	30 e0       	ldi	r19, 0x00	; 0
   10940:	01 c0       	rjmp	.+2      	; 0x10944 <ppr_bit_clr+0x8>
   10942:	22 0f       	add	r18, r18
   10944:	8a 95       	dec	r24
   10946:	ea f7       	brpl	.-6      	; 0x10942 <ppr_bit_clr+0x6>
   10948:	20 95       	com	r18
   1094a:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <_ppr_reg>
   1094e:	82 23       	and	r24, r18
   10950:	80 93 54 19 	sts	0x1954, r24	; 0x801954 <_ppr_reg>
    ppr_set(_ppr_reg);
   10954:	c2 cf       	rjmp	.-124    	; 0x108da <ppr_set>
   10956:	08 95       	ret

00010958 <dbf_open>:
/// @see ff.h
///
/// @return  FRESULT f_open(fp,path, mode);

FRESULT dbf_open (FIL* fp, const TCHAR* path, BYTE mode)
{
   10958:	0f 93       	push	r16
   1095a:	1f 93       	push	r17
   1095c:	cf 93       	push	r28
   1095e:	df 93       	push	r29
   10960:	00 d0       	rcall	.+0      	; 0x10962 <dbf_open+0xa>
   10962:	00 d0       	rcall	.+0      	; 0x10964 <dbf_open+0xc>
   10964:	1f 92       	push	r1
   10966:	8b 01       	movw	r16, r22
    int rc;
    rc = f_open(fp,path, mode);
   10968:	0e 94 19 5a 	call	0xb432	; 0xb432 <f_open>
   1096c:	ec 01       	movw	r28, r24
    if(rc)
   1096e:	89 2b       	or	r24, r25
   10970:	79 f0       	breq	.+30     	; 0x10990 <dbf_open+0x38>
    {
        printf("Open error:[%s] ", path);
   10972:	ed b7       	in	r30, 0x3d	; 61
   10974:	fe b7       	in	r31, 0x3e	; 62
   10976:	15 83       	std	Z+5, r17	; 0x05
   10978:	04 83       	std	Z+4, r16	; 0x04
   1097a:	88 eb       	ldi	r24, 0xB8	; 184
   1097c:	9e e0       	ldi	r25, 0x0E	; 14
   1097e:	a0 e0       	ldi	r26, 0x00	; 0
   10980:	81 83       	std	Z+1, r24	; 0x01
   10982:	92 83       	std	Z+2, r25	; 0x02
   10984:	a3 83       	std	Z+3, r26	; 0x03
   10986:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        put_rc(rc);
   1098a:	ce 01       	movw	r24, r28
   1098c:	0e 94 53 71 	call	0xe2a6	; 0xe2a6 <put_rc>
        return (rc);
    }
    return(0);
}
   10990:	ce 01       	movw	r24, r28
   10992:	cd b7       	in	r28, 0x3d	; 61
   10994:	de b7       	in	r29, 0x3e	; 62
   10996:	25 96       	adiw	r28, 0x05	; 5
   10998:	e4 e0       	ldi	r30, 0x04	; 4
   1099a:	0c 94 bd e7 	jmp	0x1cf7a	; 0x1cf7a <__epilogue_restores__+0x1c>

0001099e <dbf_read>:
/// @see ff.h
///
/// @return  FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br)

FRESULT dbf_read (FIL* fp, void* buff, UINT btr, UINT* br)
{
   1099e:	cf 93       	push	r28
   109a0:	df 93       	push	r29
   109a2:	00 d0       	rcall	.+0      	; 0x109a4 <dbf_read+0x6>
   109a4:	1f 92       	push	r1
    int rc;
    rc = f_read(fp, buff, btr, br);
   109a6:	0e 94 d1 5b 	call	0xb7a2	; 0xb7a2 <f_read>
   109aa:	ec 01       	movw	r28, r24
    if(rc)
   109ac:	89 2b       	or	r24, r25
   109ae:	69 f0       	breq	.+26     	; 0x109ca <dbf_read+0x2c>
    {
        printf("Read error: ");
   109b0:	8b ea       	ldi	r24, 0xAB	; 171
   109b2:	9e e0       	ldi	r25, 0x0E	; 14
   109b4:	a0 e0       	ldi	r26, 0x00	; 0
   109b6:	ed b7       	in	r30, 0x3d	; 61
   109b8:	fe b7       	in	r31, 0x3e	; 62
   109ba:	81 83       	std	Z+1, r24	; 0x01
   109bc:	92 83       	std	Z+2, r25	; 0x02
   109be:	a3 83       	std	Z+3, r26	; 0x03
   109c0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        put_rc(rc);
   109c4:	ce 01       	movw	r24, r28
   109c6:	0e 94 53 71 	call	0xe2a6	; 0xe2a6 <put_rc>
        return (rc);
    }
    return(0);
}
   109ca:	ce 01       	movw	r24, r28
   109cc:	cd b7       	in	r28, 0x3d	; 61
   109ce:	de b7       	in	r29, 0x3e	; 62
   109d0:	23 96       	adiw	r28, 0x03	; 3
   109d2:	e2 e0       	ldi	r30, 0x02	; 2
   109d4:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

000109d8 <dbf_write>:
///
/// @see ff.h
/// @return  FRESULT f_write (FIL* fp, void* buff, UINT btw, UINT* bw)

FRESULT dbf_write (FIL* fp, const void* buff, UINT btw, UINT* bw)
{
   109d8:	cf 93       	push	r28
   109da:	df 93       	push	r29
   109dc:	00 d0       	rcall	.+0      	; 0x109de <dbf_write+0x6>
   109de:	1f 92       	push	r1
    int rc;
    rc = f_write(fp, buff, btw, bw);
   109e0:	0e 94 1c 5d 	call	0xba38	; 0xba38 <f_write>
   109e4:	ec 01       	movw	r28, r24
    if(rc)
   109e6:	89 2b       	or	r24, r25
   109e8:	69 f0       	breq	.+26     	; 0x10a04 <dbf_write+0x2c>
    {
        printf("Write error: ");
   109ea:	8d e9       	ldi	r24, 0x9D	; 157
   109ec:	9e e0       	ldi	r25, 0x0E	; 14
   109ee:	a0 e0       	ldi	r26, 0x00	; 0
   109f0:	ed b7       	in	r30, 0x3d	; 61
   109f2:	fe b7       	in	r31, 0x3e	; 62
   109f4:	81 83       	std	Z+1, r24	; 0x01
   109f6:	92 83       	std	Z+2, r25	; 0x02
   109f8:	a3 83       	std	Z+3, r26	; 0x03
   109fa:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        put_rc(rc);
   109fe:	ce 01       	movw	r24, r28
   10a00:	0e 94 53 71 	call	0xe2a6	; 0xe2a6 <put_rc>
        return (rc);
    }
    return(0);
}
   10a04:	ce 01       	movw	r24, r28
   10a06:	cd b7       	in	r28, 0x3d	; 61
   10a08:	de b7       	in	r29, 0x3e	; 62
   10a0a:	23 96       	adiw	r28, 0x03	; 3
   10a0c:	e2 e0       	ldi	r30, 0x02	; 2
   10a0e:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00010a12 <dbf_lseek>:
///
/// @see ff.h.
/// @return  FRESULT

FRESULT dbf_lseek (FIL* fp, DWORD ofs)
{
   10a12:	cf 93       	push	r28
   10a14:	df 93       	push	r29
   10a16:	00 d0       	rcall	.+0      	; 0x10a18 <dbf_lseek+0x6>
   10a18:	1f 92       	push	r1
    int rc;
    rc = f_lseek(fp, ofs);
   10a1a:	0e 94 dd 60 	call	0xc1ba	; 0xc1ba <f_lseek>
   10a1e:	ec 01       	movw	r28, r24
    if(rc)
   10a20:	89 2b       	or	r24, r25
   10a22:	69 f0       	breq	.+26     	; 0x10a3e <dbf_lseek+0x2c>
    {
        printf("Seek error: ");
   10a24:	80 e9       	ldi	r24, 0x90	; 144
   10a26:	9e e0       	ldi	r25, 0x0E	; 14
   10a28:	a0 e0       	ldi	r26, 0x00	; 0
   10a2a:	ed b7       	in	r30, 0x3d	; 61
   10a2c:	fe b7       	in	r31, 0x3e	; 62
   10a2e:	81 83       	std	Z+1, r24	; 0x01
   10a30:	92 83       	std	Z+2, r25	; 0x02
   10a32:	a3 83       	std	Z+3, r26	; 0x03
   10a34:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        put_rc(rc);
   10a38:	ce 01       	movw	r24, r28
   10a3a:	0e 94 53 71 	call	0xe2a6	; 0xe2a6 <put_rc>
        return (rc);
    }
    return(0);
}
   10a3e:	ce 01       	movw	r24, r28
   10a40:	cd b7       	in	r28, 0x3d	; 61
   10a42:	de b7       	in	r29, 0x3e	; 62
   10a44:	23 96       	adiw	r28, 0x03	; 3
   10a46:	e2 e0       	ldi	r30, 0x02	; 2
   10a48:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00010a4c <dbf_close>:
///
/// @see ff.h.
/// @return  FRESULT dbf_close (FIL* fp)

FRESULT dbf_close (FIL* fp)
{
   10a4c:	cf 93       	push	r28
   10a4e:	df 93       	push	r29
   10a50:	00 d0       	rcall	.+0      	; 0x10a52 <dbf_close+0x6>
   10a52:	1f 92       	push	r1
    int rc;
    rc = f_close(fp);
   10a54:	0e 94 33 5f 	call	0xbe66	; 0xbe66 <f_close>
   10a58:	ec 01       	movw	r28, r24
    if(rc != FR_OK)
   10a5a:	89 2b       	or	r24, r25
   10a5c:	69 f0       	breq	.+26     	; 0x10a78 <dbf_close+0x2c>
    {
        printf("Close error: ");
   10a5e:	82 e8       	ldi	r24, 0x82	; 130
   10a60:	9e e0       	ldi	r25, 0x0E	; 14
   10a62:	a0 e0       	ldi	r26, 0x00	; 0
   10a64:	ed b7       	in	r30, 0x3d	; 61
   10a66:	fe b7       	in	r31, 0x3e	; 62
   10a68:	81 83       	std	Z+1, r24	; 0x01
   10a6a:	92 83       	std	Z+2, r25	; 0x02
   10a6c:	a3 83       	std	Z+3, r26	; 0x03
   10a6e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        put_rc(rc);
   10a72:	ce 01       	movw	r24, r28
   10a74:	0e 94 53 71 	call	0xe2a6	; 0xe2a6 <put_rc>
        return (rc);
    }
    return(0);
}
   10a78:	ce 01       	movw	r24, r28
   10a7a:	cd b7       	in	r28, 0x3d	; 61
   10a7c:	de b7       	in	r29, 0x3e	; 62
   10a7e:	23 96       	adiw	r28, 0x03	; 3
   10a80:	e2 e0       	ldi	r30, 0x02	; 2
   10a82:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00010a86 <dbf_open_read>:
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT

int dbf_open_read(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   10a86:	a6 e2       	ldi	r26, 0x26	; 38
   10a88:	b2 e0       	ldi	r27, 0x02	; 2
   10a8a:	e9 e4       	ldi	r30, 0x49	; 73
   10a8c:	f5 e8       	ldi	r31, 0x85	; 133
   10a8e:	0c 94 99 e7 	jmp	0x1cf32	; 0x1cf32 <__prologue_saves__+0xc>
   10a92:	4a 01       	movw	r8, r20
   10a94:	5b 01       	movw	r10, r22
   10a96:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   10a98:	cb 5d       	subi	r28, 0xDB	; 219
   10a9a:	dd 4f       	sbci	r29, 0xFD	; 253
   10a9c:	19 82       	std	Y+1, r1	; 0x01
   10a9e:	18 82       	st	Y, r1
   10aa0:	c5 52       	subi	r28, 0x25	; 37
   10aa2:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   10aa4:	43 e0       	ldi	r20, 0x03	; 3
   10aa6:	bc 01       	movw	r22, r24
   10aa8:	ce 01       	movw	r24, r28
   10aaa:	01 96       	adiw	r24, 0x01	; 1
   10aac:	55 df       	rcall	.-342    	; 0x10958 <dbf_open>
    if( rc != FR_OK)
   10aae:	89 2b       	or	r24, r25
   10ab0:	19 f0       	breq	.+6      	; 0x10ab8 <dbf_open_read+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_READ;
        *errors = flags;
   10ab2:	81 e1       	ldi	r24, 0x11	; 17
   10ab4:	90 e0       	ldi	r25, 0x00	; 0
   10ab6:	2f c0       	rjmp	.+94     	; 0x10b16 <dbf_open_read+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   10ab8:	b5 01       	movw	r22, r10
   10aba:	a4 01       	movw	r20, r8
   10abc:	ce 01       	movw	r24, r28
   10abe:	01 96       	adiw	r24, 0x01	; 1
   10ac0:	a8 df       	rcall	.-176    	; 0x10a12 <dbf_lseek>
    if( rc != FR_OK)
   10ac2:	89 2b       	or	r24, r25
   10ac4:	59 f0       	breq	.+22     	; 0x10adc <dbf_open_read+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_READ;
        *errors = flags;
   10ac6:	85 e0       	ldi	r24, 0x05	; 5
   10ac8:	90 e0       	ldi	r25, 0x00	; 0
   10aca:	f7 01       	movw	r30, r14
   10acc:	91 83       	std	Z+1, r25	; 0x01
   10ace:	80 83       	st	Z, r24
        dbf_close(&fp);
   10ad0:	ce 01       	movw	r24, r28
   10ad2:	01 96       	adiw	r24, 0x01	; 1
   10ad4:	bb df       	rcall	.-138    	; 0x10a4c <dbf_close>
        return( -1 );
   10ad6:	8f ef       	ldi	r24, 0xFF	; 255
   10ad8:	9f ef       	ldi	r25, 0xFF	; 255
   10ada:	27 c0       	rjmp	.+78     	; 0x10b2a <dbf_open_read+0xa4>
    }

    rc = dbf_read(&fp, buff,size,&bytes);
   10adc:	9e 01       	movw	r18, r28
   10ade:	2b 5d       	subi	r18, 0xDB	; 219
   10ae0:	3d 4f       	sbci	r19, 0xFD	; 253
   10ae2:	a8 01       	movw	r20, r16
   10ae4:	b6 01       	movw	r22, r12
   10ae6:	ce 01       	movw	r24, r28
   10ae8:	01 96       	adiw	r24, 0x01	; 1
   10aea:	59 df       	rcall	.-334    	; 0x1099e <dbf_read>
    if( rc != FR_OK || (UINT) size != bytes)
   10aec:	89 2b       	or	r24, r25
   10aee:	49 f4       	brne	.+18     	; 0x10b02 <dbf_open_read+0x7c>
   10af0:	cb 5d       	subi	r28, 0xDB	; 219
   10af2:	dd 4f       	sbci	r29, 0xFD	; 253
   10af4:	88 81       	ld	r24, Y
   10af6:	99 81       	ldd	r25, Y+1	; 0x01
   10af8:	c5 52       	subi	r28, 0x25	; 37
   10afa:	d2 40       	sbci	r29, 0x02	; 2
   10afc:	08 17       	cp	r16, r24
   10afe:	19 07       	cpc	r17, r25
   10b00:	19 f0       	breq	.+6      	; 0x10b08 <dbf_open_read+0x82>
    {
        flags |= ERR_READ;
        *errors = flags;
   10b02:	81 e0       	ldi	r24, 0x01	; 1
   10b04:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   10b06:	e1 cf       	rjmp	.-62     	; 0x10aca <dbf_open_read+0x44>
   10b08:	ce 01       	movw	r24, r28
   10b0a:	01 96       	adiw	r24, 0x01	; 1
   10b0c:	9f df       	rcall	.-194    	; 0x10a4c <dbf_close>
    if( rc != FR_OK)
   10b0e:	89 2b       	or	r24, r25
   10b10:	31 f0       	breq	.+12     	; 0x10b1e <dbf_open_read+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   10b12:	80 e1       	ldi	r24, 0x10	; 16
   10b14:	90 e0       	ldi	r25, 0x00	; 0
   10b16:	f7 01       	movw	r30, r14
   10b18:	91 83       	std	Z+1, r25	; 0x01
   10b1a:	80 83       	st	Z, r24
   10b1c:	dc cf       	rjmp	.-72     	; 0x10ad6 <dbf_open_read+0x50>
#if 0
// test timeout - this works ok
	delayms(500); 
#endif

    return(bytes);
   10b1e:	cb 5d       	subi	r28, 0xDB	; 219
   10b20:	dd 4f       	sbci	r29, 0xFD	; 253
   10b22:	88 81       	ld	r24, Y
   10b24:	99 81       	ldd	r25, Y+1	; 0x01
   10b26:	c5 52       	subi	r28, 0x25	; 37
   10b28:	d2 40       	sbci	r29, 0x02	; 2
}
   10b2a:	ca 5d       	subi	r28, 0xDA	; 218
   10b2c:	dd 4f       	sbci	r29, 0xFD	; 253
   10b2e:	ec e0       	ldi	r30, 0x0C	; 12
   10b30:	0c 94 b5 e7 	jmp	0x1cf6a	; 0x1cf6a <__epilogue_restores__+0xc>

00010b34 <dbf_open_write>:
/// @return  bytes actually written.
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT
int dbf_open_write(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   10b34:	a6 e2       	ldi	r26, 0x26	; 38
   10b36:	b2 e0       	ldi	r27, 0x02	; 2
   10b38:	e0 ea       	ldi	r30, 0xA0	; 160
   10b3a:	f5 e8       	ldi	r31, 0x85	; 133
   10b3c:	0c 94 99 e7 	jmp	0x1cf32	; 0x1cf32 <__prologue_saves__+0xc>
   10b40:	4a 01       	movw	r8, r20
   10b42:	5b 01       	movw	r10, r22
   10b44:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   10b46:	cb 5d       	subi	r28, 0xDB	; 219
   10b48:	dd 4f       	sbci	r29, 0xFD	; 253
   10b4a:	19 82       	std	Y+1, r1	; 0x01
   10b4c:	18 82       	st	Y, r1
   10b4e:	c5 52       	subi	r28, 0x25	; 37
   10b50:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   10b52:	43 e0       	ldi	r20, 0x03	; 3
   10b54:	bc 01       	movw	r22, r24
   10b56:	ce 01       	movw	r24, r28
   10b58:	01 96       	adiw	r24, 0x01	; 1
   10b5a:	fe de       	rcall	.-516    	; 0x10958 <dbf_open>
    if( rc != FR_OK)
   10b5c:	89 2b       	or	r24, r25
   10b5e:	19 f0       	breq	.+6      	; 0x10b66 <dbf_open_write+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_WRITE;
        *errors = flags;
   10b60:	82 e1       	ldi	r24, 0x12	; 18
   10b62:	90 e0       	ldi	r25, 0x00	; 0
   10b64:	2f c0       	rjmp	.+94     	; 0x10bc4 <dbf_open_write+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   10b66:	b5 01       	movw	r22, r10
   10b68:	a4 01       	movw	r20, r8
   10b6a:	ce 01       	movw	r24, r28
   10b6c:	01 96       	adiw	r24, 0x01	; 1
   10b6e:	51 df       	rcall	.-350    	; 0x10a12 <dbf_lseek>
    if( rc != FR_OK)
   10b70:	89 2b       	or	r24, r25
   10b72:	59 f0       	breq	.+22     	; 0x10b8a <dbf_open_write+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_WRITE;
        *errors = flags;
   10b74:	86 e0       	ldi	r24, 0x06	; 6
   10b76:	90 e0       	ldi	r25, 0x00	; 0
   10b78:	f7 01       	movw	r30, r14
   10b7a:	91 83       	std	Z+1, r25	; 0x01
   10b7c:	80 83       	st	Z, r24
        dbf_close(&fp);
   10b7e:	ce 01       	movw	r24, r28
   10b80:	01 96       	adiw	r24, 0x01	; 1
   10b82:	64 df       	rcall	.-312    	; 0x10a4c <dbf_close>
        return( -1 );
   10b84:	8f ef       	ldi	r24, 0xFF	; 255
   10b86:	9f ef       	ldi	r25, 0xFF	; 255
   10b88:	27 c0       	rjmp	.+78     	; 0x10bd8 <dbf_open_write+0xa4>
    }

    rc = dbf_write(&fp, buff,size,&bytes);
   10b8a:	9e 01       	movw	r18, r28
   10b8c:	2b 5d       	subi	r18, 0xDB	; 219
   10b8e:	3d 4f       	sbci	r19, 0xFD	; 253
   10b90:	a8 01       	movw	r20, r16
   10b92:	b6 01       	movw	r22, r12
   10b94:	ce 01       	movw	r24, r28
   10b96:	01 96       	adiw	r24, 0x01	; 1
   10b98:	1f df       	rcall	.-450    	; 0x109d8 <dbf_write>
    if( rc != FR_OK || (UINT) size != bytes)
   10b9a:	89 2b       	or	r24, r25
   10b9c:	49 f4       	brne	.+18     	; 0x10bb0 <dbf_open_write+0x7c>
   10b9e:	cb 5d       	subi	r28, 0xDB	; 219
   10ba0:	dd 4f       	sbci	r29, 0xFD	; 253
   10ba2:	88 81       	ld	r24, Y
   10ba4:	99 81       	ldd	r25, Y+1	; 0x01
   10ba6:	c5 52       	subi	r28, 0x25	; 37
   10ba8:	d2 40       	sbci	r29, 0x02	; 2
   10baa:	08 17       	cp	r16, r24
   10bac:	19 07       	cpc	r17, r25
   10bae:	19 f0       	breq	.+6      	; 0x10bb6 <dbf_open_write+0x82>
    {
        flags |= ERR_WRITE;
        *errors = flags;
   10bb0:	82 e0       	ldi	r24, 0x02	; 2
   10bb2:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   10bb4:	e1 cf       	rjmp	.-62     	; 0x10b78 <dbf_open_write+0x44>
   10bb6:	ce 01       	movw	r24, r28
   10bb8:	01 96       	adiw	r24, 0x01	; 1
   10bba:	48 df       	rcall	.-368    	; 0x10a4c <dbf_close>
    if( rc != FR_OK)
   10bbc:	89 2b       	or	r24, r25
   10bbe:	31 f0       	breq	.+12     	; 0x10bcc <dbf_open_write+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   10bc0:	80 e1       	ldi	r24, 0x10	; 16
   10bc2:	90 e0       	ldi	r25, 0x00	; 0
   10bc4:	f7 01       	movw	r30, r14
   10bc6:	91 83       	std	Z+1, r25	; 0x01
   10bc8:	80 83       	st	Z, r24
   10bca:	dc cf       	rjmp	.-72     	; 0x10b84 <dbf_open_write+0x50>
#if 0
// test timeout - this causes timeout
	delayms(200); 
#endif

    return(bytes);
   10bcc:	cb 5d       	subi	r28, 0xDB	; 219
   10bce:	dd 4f       	sbci	r29, 0xFD	; 253
   10bd0:	88 81       	ld	r24, Y
   10bd2:	99 81       	ldd	r25, Y+1	; 0x01
   10bd4:	c5 52       	subi	r28, 0x25	; 37
   10bd6:	d2 40       	sbci	r29, 0x02	; 2
}
   10bd8:	ca 5d       	subi	r28, 0xDA	; 218
   10bda:	dd 4f       	sbci	r29, 0xFD	; 253
   10bdc:	ec e0       	ldi	r30, 0x0C	; 12
   10bde:	0c 94 b5 e7 	jmp	0x1cf6a	; 0x1cf6a <__epilogue_restores__+0xc>

00010be2 <gpib_timer_elapsed_begin>:
            gpib_timer_elapsed_end("PP released");
#endif
        return(1);
    }
    return(0);
}
   10be2:	0c 94 df 35 	jmp	0x6bbe	; 0x6bbe <clock_elapsed_begin>
   10be6:	08 95       	ret

00010be8 <gpib_timer_reset>:
   10be8:	f8 94       	cli
   10bea:	e5 ed       	ldi	r30, 0xD5	; 213
   10bec:	fc e1       	ldi	r31, 0x1C	; 28
   10bee:	10 82       	st	Z, r1
   10bf0:	11 82       	std	Z+1, r1	; 0x01
   10bf2:	12 82       	std	Z+2, r1	; 0x02
   10bf4:	13 82       	std	Z+3, r1	; 0x03
   10bf6:	14 82       	std	Z+4, r1	; 0x04
   10bf8:	15 82       	std	Z+5, r1	; 0x05
   10bfa:	16 82       	std	Z+6, r1	; 0x06
   10bfc:	17 82       	std	Z+7, r1	; 0x07
   10bfe:	81 e0       	ldi	r24, 0x01	; 1
   10c00:	80 87       	std	Z+8, r24	; 0x08
   10c02:	78 94       	sei
   10c04:	08 95       	ret

00010c06 <gpib_timer_elapsed_end>:
   10c06:	0c 94 e5 35 	jmp	0x6bca	; 0x6bca <clock_elapsed_end>
   10c0a:	08 95       	ret

00010c0c <gpib_timer_task>:
   10c0c:	f8 94       	cli
   10c0e:	80 91 d9 1c 	lds	r24, 0x1CD9	; 0x801cd9 <gpib_timer+0x4>
   10c12:	90 91 da 1c 	lds	r25, 0x1CDA	; 0x801cda <gpib_timer+0x5>
   10c16:	a0 91 db 1c 	lds	r26, 0x1CDB	; 0x801cdb <gpib_timer+0x6>
   10c1a:	b0 91 dc 1c 	lds	r27, 0x1CDC	; 0x801cdc <gpib_timer+0x7>
   10c1e:	89 2b       	or	r24, r25
   10c20:	8a 2b       	or	r24, r26
   10c22:	8b 2b       	or	r24, r27
   10c24:	a1 f0       	breq	.+40     	; 0x10c4e <gpib_timer_task+0x42>
   10c26:	80 91 d9 1c 	lds	r24, 0x1CD9	; 0x801cd9 <gpib_timer+0x4>
   10c2a:	90 91 da 1c 	lds	r25, 0x1CDA	; 0x801cda <gpib_timer+0x5>
   10c2e:	a0 91 db 1c 	lds	r26, 0x1CDB	; 0x801cdb <gpib_timer+0x6>
   10c32:	b0 91 dc 1c 	lds	r27, 0x1CDC	; 0x801cdc <gpib_timer+0x7>
   10c36:	01 97       	sbiw	r24, 0x01	; 1
   10c38:	a1 09       	sbc	r26, r1
   10c3a:	b1 09       	sbc	r27, r1
   10c3c:	80 93 d9 1c 	sts	0x1CD9, r24	; 0x801cd9 <gpib_timer+0x4>
   10c40:	90 93 da 1c 	sts	0x1CDA, r25	; 0x801cda <gpib_timer+0x5>
   10c44:	a0 93 db 1c 	sts	0x1CDB, r26	; 0x801cdb <gpib_timer+0x6>
   10c48:	b0 93 dc 1c 	sts	0x1CDC, r27	; 0x801cdc <gpib_timer+0x7>
   10c4c:	03 c0       	rjmp	.+6      	; 0x10c54 <gpib_timer_task+0x48>
   10c4e:	81 e0       	ldi	r24, 0x01	; 1
   10c50:	80 93 dd 1c 	sts	0x1CDD, r24	; 0x801cdd <gpib_timer+0x8>
   10c54:	78 94       	sei
   10c56:	08 95       	ret

00010c58 <gpib_timeout_set>:
   10c58:	f8 94       	cli
   10c5a:	e5 ed       	ldi	r30, 0xD5	; 213
   10c5c:	fc e1       	ldi	r31, 0x1C	; 28
   10c5e:	64 83       	std	Z+4, r22	; 0x04
   10c60:	75 83       	std	Z+5, r23	; 0x05
   10c62:	86 83       	std	Z+6, r24	; 0x06
   10c64:	97 83       	std	Z+7, r25	; 0x07
   10c66:	10 86       	std	Z+8, r1	; 0x08
   10c68:	78 94       	sei
   10c6a:	08 95       	ret

00010c6c <gpib_bus_init>:
   10c6c:	00 d0       	rcall	.+0      	; 0x10c6e <gpib_bus_init+0x2>
   10c6e:	1f 92       	push	r1
   10c70:	8f b7       	in	r24, 0x3f	; 63
   10c72:	f8 94       	cli
   10c74:	10 92 55 19 	sts	0x1955, r1	; 0x801955 <gpib_unread_f>
   10c78:	11 b8       	out	0x01, r1	; 1
   10c7a:	9f ef       	ldi	r25, 0xFF	; 255
   10c7c:	92 b9       	out	0x02, r25	; 2
   10c7e:	21 98       	cbi	0x04, 1	; 4
   10c80:	29 9a       	sbi	0x05, 1	; 5
   10c82:	52 98       	cbi	0x0a, 2	; 10
   10c84:	5a 9a       	sbi	0x0b, 2	; 11
   10c86:	53 98       	cbi	0x0a, 3	; 10
   10c88:	5b 9a       	sbi	0x0b, 3	; 11
   10c8a:	56 98       	cbi	0x0a, 6	; 10
   10c8c:	5e 9a       	sbi	0x0b, 6	; 11
   10c8e:	54 98       	cbi	0x0a, 4	; 10
   10c90:	5c 9a       	sbi	0x0b, 4	; 11
   10c92:	57 98       	cbi	0x0a, 7	; 10
   10c94:	5f 9a       	sbi	0x0b, 7	; 11
   10c96:	55 98       	cbi	0x0a, 5	; 10
   10c98:	5d 9a       	sbi	0x0b, 5	; 11
   10c9a:	20 98       	cbi	0x04, 0	; 4
   10c9c:	28 9a       	sbi	0x05, 0	; 5
   10c9e:	45 98       	cbi	0x08, 5	; 8
   10ca0:	3d 9a       	sbi	0x07, 5	; 7
   10ca2:	44 9a       	sbi	0x08, 4	; 8
   10ca4:	3c 9a       	sbi	0x07, 4	; 7
   10ca6:	43 98       	cbi	0x08, 3	; 8
   10ca8:	3b 9a       	sbi	0x07, 3	; 7
   10caa:	42 98       	cbi	0x08, 2	; 8
   10cac:	3a 9a       	sbi	0x07, 2	; 7
   10cae:	9d e0       	ldi	r25, 0x0D	; 13
   10cb0:	9a 95       	dec	r25
   10cb2:	f1 f7       	brne	.-4      	; 0x10cb0 <gpib_bus_init+0x44>
   10cb4:	00 00       	nop
   10cb6:	8f bf       	out	0x3f, r24	; 63
   10cb8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10cbc:	82 ff       	sbrs	r24, 2
   10cbe:	0a c0       	rjmp	.+20     	; 0x10cd4 <gpib_bus_init+0x68>
   10cc0:	8a e1       	ldi	r24, 0x1A	; 26
   10cc2:	92 e1       	ldi	r25, 0x12	; 18
   10cc4:	a0 e0       	ldi	r26, 0x00	; 0
   10cc6:	ed b7       	in	r30, 0x3d	; 61
   10cc8:	fe b7       	in	r31, 0x3e	; 62
   10cca:	81 83       	std	Z+1, r24	; 0x01
   10ccc:	92 83       	std	Z+2, r25	; 0x02
   10cce:	a3 83       	std	Z+3, r26	; 0x03
   10cd0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   10cd4:	0f 90       	pop	r0
   10cd6:	0f 90       	pop	r0
   10cd8:	0f 90       	pop	r0
   10cda:	08 95       	ret

00010cdc <gpib_rx_init>:
   10cdc:	9f b7       	in	r25, 0x3f	; 63
   10cde:	f8 94       	cli
   10ce0:	11 b8       	out	0x01, r1	; 1
   10ce2:	2f ef       	ldi	r18, 0xFF	; 255
   10ce4:	22 b9       	out	0x02, r18	; 2
   10ce6:	21 98       	cbi	0x04, 1	; 4
   10ce8:	29 9a       	sbi	0x05, 1	; 5
   10cea:	20 98       	cbi	0x04, 0	; 4
   10cec:	28 9a       	sbi	0x05, 0	; 5
   10cee:	4e 9b       	sbis	0x09, 6	; 9
   10cf0:	09 c0       	rjmp	.+18     	; 0x10d04 <gpib_rx_init+0x28>
   10cf2:	81 11       	cpse	r24, r1
   10cf4:	07 c0       	rjmp	.+14     	; 0x10d04 <gpib_rx_init+0x28>
   10cf6:	52 98       	cbi	0x0a, 2	; 10
   10cf8:	5a 9a       	sbi	0x0b, 2	; 11
   10cfa:	53 98       	cbi	0x0a, 3	; 10
   10cfc:	5b 9a       	sbi	0x0b, 3	; 11
   10cfe:	42 98       	cbi	0x08, 2	; 8
   10d00:	3a 9a       	sbi	0x07, 2	; 7
   10d02:	08 c0       	rjmp	.+16     	; 0x10d14 <gpib_rx_init+0x38>
   10d04:	42 98       	cbi	0x08, 2	; 8
   10d06:	3a 9a       	sbi	0x07, 2	; 7
   10d08:	5b 98       	cbi	0x0b, 3	; 11
   10d0a:	53 9a       	sbi	0x0a, 3	; 10
   10d0c:	5a 98       	cbi	0x0b, 2	; 11
   10d0e:	52 9a       	sbi	0x0a, 2	; 10
   10d10:	88 23       	and	r24, r24
   10d12:	89 f3       	breq	.-30     	; 0x10cf6 <gpib_rx_init+0x1a>
   10d14:	9f bf       	out	0x3f, r25	; 63
   10d16:	08 95       	ret

00010d18 <gpib_tx_init>:
   10d18:	9f b7       	in	r25, 0x3f	; 63
   10d1a:	f8 94       	cli
   10d1c:	11 b8       	out	0x01, r1	; 1
   10d1e:	8f ef       	ldi	r24, 0xFF	; 255
   10d20:	82 b9       	out	0x02, r24	; 2
   10d22:	21 98       	cbi	0x04, 1	; 4
   10d24:	29 9a       	sbi	0x05, 1	; 5
   10d26:	52 98       	cbi	0x0a, 2	; 10
   10d28:	5a 9a       	sbi	0x0b, 2	; 11
   10d2a:	53 98       	cbi	0x0a, 3	; 10
   10d2c:	5b 9a       	sbi	0x0b, 3	; 11
   10d2e:	20 98       	cbi	0x04, 0	; 4
   10d30:	28 9a       	sbi	0x05, 0	; 5
   10d32:	42 9a       	sbi	0x08, 2	; 8
   10d34:	3a 9a       	sbi	0x07, 2	; 7
   10d36:	81 b9       	out	0x01, r24	; 1
   10d38:	9f bf       	out	0x3f, r25	; 63
   10d3a:	08 95       	ret

00010d3c <gpib_state_init>:
   10d3c:	00 d0       	rcall	.+0      	; 0x10d3e <gpib_state_init+0x2>
   10d3e:	1f 92       	push	r1
   10d40:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10d44:	82 ff       	sbrs	r24, 2
   10d46:	0a c0       	rjmp	.+20     	; 0x10d5c <gpib_state_init+0x20>
   10d48:	87 e0       	ldi	r24, 0x07	; 7
   10d4a:	92 e1       	ldi	r25, 0x12	; 18
   10d4c:	a0 e0       	ldi	r26, 0x00	; 0
   10d4e:	ed b7       	in	r30, 0x3d	; 61
   10d50:	fe b7       	in	r31, 0x3e	; 62
   10d52:	81 83       	std	Z+1, r24	; 0x01
   10d54:	92 83       	std	Z+2, r25	; 0x02
   10d56:	a3 83       	std	Z+3, r26	; 0x03
   10d58:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   10d5c:	cc dd       	rcall	.-1128   	; 0x108f6 <ppr_init>
   10d5e:	0e 94 3f 91 	call	0x1227e	; 0x1227e <listen_cleanup>
   10d62:	0e 94 55 92 	call	0x124aa	; 0x124aa <talk_cleanup>
   10d66:	10 92 e1 1e 	sts	0x1EE1, r1	; 0x801ee1 <spoll>
   10d6a:	10 92 e4 1e 	sts	0x1EE4, r1	; 0x801ee4 <talking>
   10d6e:	10 92 e7 1e 	sts	0x1EE7, r1	; 0x801ee7 <talking_last>
   10d72:	10 92 e6 1e 	sts	0x1EE6, r1	; 0x801ee6 <listening>
   10d76:	10 92 e0 1e 	sts	0x1EE0, r1	; 0x801ee0 <listening_last>
   10d7a:	10 92 df 1c 	sts	0x1CDF, r1	; 0x801cdf <lastcmd+0x1>
   10d7e:	10 92 de 1c 	sts	0x1CDE, r1	; 0x801cde <lastcmd>
   10d82:	10 92 e3 1e 	sts	0x1EE3, r1	; 0x801ee3 <current+0x1>
   10d86:	10 92 e2 1e 	sts	0x1EE2, r1	; 0x801ee2 <current>
   10d8a:	10 92 e5 1e 	sts	0x1EE5, r1	; 0x801ee5 <secondary>
   10d8e:	0f 90       	pop	r0
   10d90:	0f 90       	pop	r0
   10d92:	0f 90       	pop	r0
   10d94:	08 95       	ret

00010d96 <gpib_enable_PPR>:
   10d96:	cf 93       	push	r28
   10d98:	df 93       	push	r29
   10d9a:	ad b7       	in	r26, 0x3d	; 61
   10d9c:	be b7       	in	r27, 0x3e	; 62
   10d9e:	17 97       	sbiw	r26, 0x07	; 7
   10da0:	0f b6       	in	r0, 0x3f	; 63
   10da2:	f8 94       	cli
   10da4:	be bf       	out	0x3e, r27	; 62
   10da6:	0f be       	out	0x3f, r0	; 63
   10da8:	ad bf       	out	0x3d, r26	; 61
   10daa:	ec 01       	movw	r28, r24
   10dac:	88 30       	cpi	r24, 0x08	; 8
   10dae:	91 05       	cpc	r25, r1
   10db0:	68 f0       	brcs	.+26     	; 0x10dcc <gpib_enable_PPR+0x36>
   10db2:	ed b7       	in	r30, 0x3d	; 61
   10db4:	fe b7       	in	r31, 0x3e	; 62
   10db6:	95 83       	std	Z+5, r25	; 0x05
   10db8:	84 83       	std	Z+4, r24	; 0x04
   10dba:	81 ee       	ldi	r24, 0xE1	; 225
   10dbc:	91 e1       	ldi	r25, 0x11	; 17
   10dbe:	a0 e0       	ldi	r26, 0x00	; 0
   10dc0:	81 83       	std	Z+1, r24	; 0x01
   10dc2:	92 83       	std	Z+2, r25	; 0x02
   10dc4:	a3 83       	std	Z+3, r26	; 0x03
   10dc6:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   10dca:	15 c0       	rjmp	.+42     	; 0x10df6 <gpib_enable_PPR+0x60>
   10dcc:	aa dd       	rcall	.-1196   	; 0x10922 <ppr_bit_set>
   10dce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10dd2:	81 ff       	sbrs	r24, 1
   10dd4:	10 c0       	rjmp	.+32     	; 0x10df6 <gpib_enable_PPR+0x60>
   10dd6:	8b dd       	rcall	.-1258   	; 0x108ee <ppr_reg>
   10dd8:	90 e0       	ldi	r25, 0x00	; 0
   10dda:	ed b7       	in	r30, 0x3d	; 61
   10ddc:	fe b7       	in	r31, 0x3e	; 62
   10dde:	97 83       	std	Z+7, r25	; 0x07
   10de0:	86 83       	std	Z+6, r24	; 0x06
   10de2:	d5 83       	std	Z+5, r29	; 0x05
   10de4:	c4 83       	std	Z+4, r28	; 0x04
   10de6:	86 ec       	ldi	r24, 0xC6	; 198
   10de8:	91 e1       	ldi	r25, 0x11	; 17
   10dea:	a0 e0       	ldi	r26, 0x00	; 0
   10dec:	81 83       	std	Z+1, r24	; 0x01
   10dee:	92 83       	std	Z+2, r25	; 0x02
   10df0:	a3 83       	std	Z+3, r26	; 0x03
   10df2:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   10df6:	cd b7       	in	r28, 0x3d	; 61
   10df8:	de b7       	in	r29, 0x3e	; 62
   10dfa:	27 96       	adiw	r28, 0x07	; 7
   10dfc:	e2 e0       	ldi	r30, 0x02	; 2
   10dfe:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00010e02 <gpib_disable_PPR>:
   10e02:	cf 93       	push	r28
   10e04:	df 93       	push	r29
   10e06:	ad b7       	in	r26, 0x3d	; 61
   10e08:	be b7       	in	r27, 0x3e	; 62
   10e0a:	17 97       	sbiw	r26, 0x07	; 7
   10e0c:	0f b6       	in	r0, 0x3f	; 63
   10e0e:	f8 94       	cli
   10e10:	be bf       	out	0x3e, r27	; 62
   10e12:	0f be       	out	0x3f, r0	; 63
   10e14:	ad bf       	out	0x3d, r26	; 61
   10e16:	ec 01       	movw	r28, r24
   10e18:	88 30       	cpi	r24, 0x08	; 8
   10e1a:	91 05       	cpc	r25, r1
   10e1c:	68 f0       	brcs	.+26     	; 0x10e38 <gpib_disable_PPR+0x36>
   10e1e:	ed b7       	in	r30, 0x3d	; 61
   10e20:	fe b7       	in	r31, 0x3e	; 62
   10e22:	95 83       	std	Z+5, r25	; 0x05
   10e24:	84 83       	std	Z+4, r24	; 0x04
   10e26:	8f e9       	ldi	r24, 0x9F	; 159
   10e28:	91 e1       	ldi	r25, 0x11	; 17
   10e2a:	a0 e0       	ldi	r26, 0x00	; 0
   10e2c:	81 83       	std	Z+1, r24	; 0x01
   10e2e:	92 83       	std	Z+2, r25	; 0x02
   10e30:	a3 83       	std	Z+3, r26	; 0x03
   10e32:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   10e36:	15 c0       	rjmp	.+42     	; 0x10e62 <gpib_disable_PPR+0x60>
   10e38:	81 dd       	rcall	.-1278   	; 0x1093c <ppr_bit_clr>
   10e3a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10e3e:	81 ff       	sbrs	r24, 1
   10e40:	10 c0       	rjmp	.+32     	; 0x10e62 <gpib_disable_PPR+0x60>
   10e42:	55 dd       	rcall	.-1366   	; 0x108ee <ppr_reg>
   10e44:	90 e0       	ldi	r25, 0x00	; 0
   10e46:	ed b7       	in	r30, 0x3d	; 61
   10e48:	fe b7       	in	r31, 0x3e	; 62
   10e4a:	97 83       	std	Z+7, r25	; 0x07
   10e4c:	86 83       	std	Z+6, r24	; 0x06
   10e4e:	d5 83       	std	Z+5, r29	; 0x05
   10e50:	c4 83       	std	Z+4, r28	; 0x04
   10e52:	84 e8       	ldi	r24, 0x84	; 132
   10e54:	91 e1       	ldi	r25, 0x11	; 17
   10e56:	a0 e0       	ldi	r26, 0x00	; 0
   10e58:	81 83       	std	Z+1, r24	; 0x01
   10e5a:	92 83       	std	Z+2, r25	; 0x02
   10e5c:	a3 83       	std	Z+3, r26	; 0x03
   10e5e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   10e62:	cd b7       	in	r28, 0x3d	; 61
   10e64:	de b7       	in	r29, 0x3e	; 62
   10e66:	27 96       	adiw	r28, 0x07	; 7
   10e68:	e2 e0       	ldi	r30, 0x02	; 2
   10e6a:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00010e6e <gpib_unread>:
///     - If ATN is LOW then we strip parity from the byte.
///   - Upper 8 bits: Status and Errors present.
///     - @see gpib.h _FLAGS defines for a full list.
/// @return ch
uint16_t gpib_unread(uint16_t ch)
{
   10e6e:	cf 93       	push	r28
   10e70:	df 93       	push	r29
   10e72:	00 d0       	rcall	.+0      	; 0x10e74 <gpib_unread+0x6>
   10e74:	1f 92       	push	r1
   10e76:	ec 01       	movw	r28, r24
    if(!gpib_unread_f)
   10e78:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <gpib_unread_f>
   10e7c:	81 11       	cpse	r24, r1
   10e7e:	08 c0       	rjmp	.+16     	; 0x10e90 <gpib_unread+0x22>
    {
        gpib_unread_data = ch;
   10e80:	d0 93 e9 1e 	sts	0x1EE9, r29	; 0x801ee9 <gpib_unread_data+0x1>
   10e84:	c0 93 e8 1e 	sts	0x1EE8, r28	; 0x801ee8 <gpib_unread_data>
        gpib_unread_f = 1;
   10e88:	81 e0       	ldi	r24, 0x01	; 1
   10e8a:	80 93 55 19 	sts	0x1955, r24	; 0x801955 <gpib_unread_f>
   10e8e:	12 c0       	rjmp	.+36     	; 0x10eb4 <gpib_unread+0x46>
    }
    else
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10e90:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10e94:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10e98:	85 70       	andi	r24, 0x05	; 5
   10e9a:	99 27       	eor	r25, r25
   10e9c:	89 2b       	or	r24, r25
   10e9e:	51 f0       	breq	.+20     	; 0x10eb4 <gpib_unread+0x46>
            printf("gpib_unread: error, can only be called once!\n");
   10ea0:	86 e5       	ldi	r24, 0x56	; 86
   10ea2:	91 e1       	ldi	r25, 0x11	; 17
   10ea4:	a0 e0       	ldi	r26, 0x00	; 0
   10ea6:	ed b7       	in	r30, 0x3d	; 61
   10ea8:	fe b7       	in	r31, 0x3e	; 62
   10eaa:	81 83       	std	Z+1, r24	; 0x01
   10eac:	92 83       	std	Z+2, r25	; 0x02
   10eae:	a3 83       	std	Z+3, r26	; 0x03
   10eb0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    }
    return(ch);
}
   10eb4:	ce 01       	movw	r24, r28
   10eb6:	cd b7       	in	r28, 0x3d	; 61
   10eb8:	de b7       	in	r29, 0x3e	; 62
   10eba:	23 96       	adiw	r28, 0x03	; 3
   10ebc:	e2 e0       	ldi	r30, 0x02	; 2
   10ebe:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00010ec2 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10ec2:	11 b8       	out	0x01, r1	; 1
   10ec4:	80 b1       	in	r24, 0x00	; 0
   10ec6:	80 95       	com	r24

///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10ec8:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10eca:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10ecc:	08 95       	ret

00010ece <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10ece:	4e 99       	sbic	0x09, 6	; 9
   10ed0:	03 c0       	rjmp	.+6      	; 0x10ed8 <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10ed2:	80 e0       	ldi	r24, 0x00	; 0
   10ed4:	94 e0       	ldi	r25, 0x04	; 4
   10ed6:	02 c0       	rjmp	.+4      	; 0x10edc <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10ed8:	80 e0       	ldi	r24, 0x00	; 0
   10eda:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10edc:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10ede:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10ee0:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10ee2:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10ee4:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10ee6:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10ee8:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10eea:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10eec:	08 95       	ret

00010eee <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10eee:	19 99       	sbic	0x03, 1	; 3
   10ef0:	03 c0       	rjmp	.+6      	; 0x10ef8 <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10ef2:	80 e0       	ldi	r24, 0x00	; 0
   10ef4:	90 e2       	ldi	r25, 0x20	; 32
   10ef6:	02 c0       	rjmp	.+4      	; 0x10efc <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10ef8:	80 e0       	ldi	r24, 0x00	; 0
   10efa:	90 e0       	ldi	r25, 0x00	; 0
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10efc:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10efe:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10f00:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10f02:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10f04:	08 95       	ret

00010f06 <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10f06:	2f 92       	push	r2
   10f08:	3f 92       	push	r3
   10f0a:	4f 92       	push	r4
   10f0c:	6f 92       	push	r6
   10f0e:	7f 92       	push	r7
   10f10:	8f 92       	push	r8
   10f12:	af 92       	push	r10
   10f14:	bf 92       	push	r11
   10f16:	cf 92       	push	r12
   10f18:	df 92       	push	r13
   10f1a:	ef 92       	push	r14
   10f1c:	1f 93       	push	r17
   10f1e:	cf 93       	push	r28
   10f20:	df 93       	push	r29
   10f22:	cd b7       	in	r28, 0x3d	; 61
   10f24:	de b7       	in	r29, 0x3e	; 62
   10f26:	2a 97       	sbiw	r28, 0x0a	; 10
   10f28:	0f b6       	in	r0, 0x3f	; 63
   10f2a:	f8 94       	cli
   10f2c:	de bf       	out	0x3e, r29	; 62
   10f2e:	0f be       	out	0x3f, r0	; 63
   10f30:	cd bf       	out	0x3d, r28	; 61
   10f32:	9a 87       	std	Y+10, r25	; 0x0a
   10f34:	89 87       	std	Y+9, r24	; 0x09
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10f36:	64 ef       	ldi	r22, 0xF4	; 244
   10f38:	71 e0       	ldi	r23, 0x01	; 1
   10f3a:	80 e0       	ldi	r24, 0x00	; 0
   10f3c:	90 e0       	ldi	r25, 0x00	; 0
   10f3e:	8c de       	rcall	.-744    	; 0x10c58 <gpib_timeout_set>
// Now Done in write_str
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
   10f40:	10 e0       	ldi	r17, 0x00	; 0
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10f42:	81 e5       	ldi	r24, 0x51	; 81
   10f44:	90 e1       	ldi	r25, 0x10	; 16
   10f46:	6c 01       	movw	r12, r24
   10f48:	e1 2c       	mov	r14, r1
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10f4a:	80 e8       	ldi	r24, 0x80	; 128
   10f4c:	90 e1       	ldi	r25, 0x10	; 16
   10f4e:	3c 01       	movw	r6, r24
   10f50:	81 2c       	mov	r8, r1
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10f52:	aa 24       	eor	r10, r10
   10f54:	a3 94       	inc	r10
   10f56:	b1 2c       	mov	r11, r1
   10f58:	88 ef       	ldi	r24, 0xF8	; 248
   10f5a:	90 e1       	ldi	r25, 0x10	; 16
   10f5c:	1c 01       	movw	r2, r24
   10f5e:	41 2c       	mov	r4, r1
					break;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10f60:	8c eb       	ldi	r24, 0xBC	; 188
   10f62:	90 e1       	ldi	r25, 0x10	; 16
   10f64:	9c 01       	movw	r18, r24
   10f66:	40 e0       	ldi	r20, 0x00	; 0
   10f68:	2e 83       	std	Y+6, r18	; 0x06
   10f6a:	3f 83       	std	Y+7, r19	; 0x07
   10f6c:	48 87       	std	Y+8, r20	; 0x08
	// Not called for writting
#if 0
        gpib_user_task();
#endif

		if(uart_keyhit(0))
   10f6e:	80 e0       	ldi	r24, 0x00	; 0
   10f70:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <uart_keyhit>
   10f74:	89 2b       	or	r24, r25
   10f76:	09 f0       	breq	.+2      	; 0x10f7a <gpib_write_byte+0x74>
   10f78:	e7 c0       	rjmp	.+462    	; 0x11148 <gpib_write_byte+0x242>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10f7a:	4c 99       	sbic	0x09, 4	; 9
   10f7c:	19 c0       	rjmp	.+50     	; 0x10fb0 <gpib_write_byte+0xaa>
        {
            ch |= IFC_FLAG;
   10f7e:	89 85       	ldd	r24, Y+9	; 0x09
   10f80:	9a 85       	ldd	r25, Y+10	; 0x0a
   10f82:	90 61       	ori	r25, 0x10	; 16
   10f84:	9a 87       	std	Y+10, r25	; 0x0a
            gpib_bus_init();
   10f86:	89 87       	std	Y+9, r24	; 0x09
   10f88:	71 de       	rcall	.-798    	; 0x10c6c <gpib_bus_init>
			if(debuglevel & GPIB_ERR)
   10f8a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10f8e:	80 ff       	sbrs	r24, 0
   10f90:	db c0       	rjmp	.+438    	; 0x11148 <gpib_write_byte+0x242>
				printf("gpib_write_byte: IFC state=%d\n", tx_state);
   10f92:	81 2f       	mov	r24, r17
   10f94:	90 e0       	ldi	r25, 0x00	; 0
   10f96:	ed b7       	in	r30, 0x3d	; 61
   10f98:	fe b7       	in	r31, 0x3e	; 62
   10f9a:	95 83       	std	Z+5, r25	; 0x05
   10f9c:	84 83       	std	Z+4, r24	; 0x04
   10f9e:	87 e3       	ldi	r24, 0x37	; 55
   10fa0:	91 e1       	ldi	r25, 0x11	; 17
   10fa2:	a0 e0       	ldi	r26, 0x00	; 0
   10fa4:	81 83       	std	Z+1, r24	; 0x01
   10fa6:	92 83       	std	Z+2, r25	; 0x02
   10fa8:	a3 83       	std	Z+3, r26	; 0x03
   10faa:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   10fae:	cc c0       	rjmp	.+408    	; 0x11148 <gpib_write_byte+0x242>
            break;
        }

        switch(tx_state)
   10fb0:	81 2f       	mov	r24, r17
   10fb2:	90 e0       	ldi	r25, 0x00	; 0
   10fb4:	89 30       	cpi	r24, 0x09	; 9
   10fb6:	91 05       	cpc	r25, r1
   10fb8:	08 f0       	brcs	.+2      	; 0x10fbc <gpib_write_byte+0xb6>
   10fba:	be c0       	rjmp	.+380    	; 0x11138 <gpib_write_byte+0x232>
   10fbc:	fc 01       	movw	r30, r24
   10fbe:	e3 54       	subi	r30, 0x43	; 67
   10fc0:	ff 4f       	sbci	r31, 0xFF	; 255
   10fc2:	0c 94 64 e7 	jmp	0x1cec8	; 0x1cec8 <__tablejump2__>
        {
			// DAV == 1 the bus is ready
            case GPIB_TX_START:
				gpib_tx_init();
   10fc6:	a8 de       	rcall	.-688    	; 0x10d18 <gpib_tx_init>
				GPIB_PIN_FLOAT_UP(DAV);
   10fc8:	21 98       	cbi	0x04, 1	; 4
   10fca:	29 9a       	sbi	0x05, 1	; 5
   10fcc:	fd e0       	ldi	r31, 0x0D	; 13
   10fce:	fa 95       	dec	r31
   10fd0:	f1 f7       	brne	.-4      	; 0x10fce <gpib_write_byte+0xc8>
   10fd2:	00 00       	nop
   10fd4:	06 c0       	rjmp	.+12     	; 0x10fe2 <gpib_write_byte+0xdc>
                tx_state = GPIB_TX_PUT_DATA;
                break;

// Wait for NRFD or NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_OR_NDAC_LOW:
                if(GPIB_PIN_TST(NRFD) == 0 || GPIB_PIN_TST(NDAC) == 0)
   10fd6:	4a 9b       	sbis	0x09, 2	; 9
   10fd8:	02 c0       	rjmp	.+4      	; 0x10fde <gpib_write_byte+0xd8>
   10fda:	4b 99       	sbic	0x09, 3	; 9
   10fdc:	17 c0       	rjmp	.+46     	; 0x1100c <gpib_write_byte+0x106>
                {
					if(GPIB_PIN_TST(ATN) == 1)
   10fde:	4e 9b       	sbis	0x09, 6	; 9
   10fe0:	07 c0       	rjmp	.+14     	; 0x10ff0 <gpib_write_byte+0xea>
					{
						gpib_timeout_set(HTIMEOUT);
   10fe2:	64 ef       	ldi	r22, 0xF4	; 244
   10fe4:	71 e0       	ldi	r23, 0x01	; 1
   10fe6:	80 e0       	ldi	r24, 0x00	; 0
   10fe8:	90 e0       	ldi	r25, 0x00	; 0
   10fea:	36 de       	rcall	.-916    	; 0x10c58 <gpib_timeout_set>
						tx_state = GPIB_TX_PUT_DATA;
   10fec:	12 e0       	ldi	r17, 0x02	; 2
   10fee:	bf cf       	rjmp	.-130    	; 0x10f6e <gpib_write_byte+0x68>
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
   10ff0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10ff4:	80 ff       	sbrs	r24, 0
   10ff6:	bb cf       	rjmp	.-138    	; 0x10f6e <gpib_write_byte+0x68>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10ff8:	ed b7       	in	r30, 0x3d	; 61
   10ffa:	fe b7       	in	r31, 0x3e	; 62
   10ffc:	b5 82       	std	Z+5, r11	; 0x05
   10ffe:	a4 82       	std	Z+4, r10	; 0x04
   11000:	21 82       	std	Z+1, r2	; 0x01
   11002:	32 82       	std	Z+2, r3	; 0x02
   11004:	43 82       	std	Z+3, r4	; 0x03
   11006:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1100a:	b1 cf       	rjmp	.-158    	; 0x10f6e <gpib_write_byte+0x68>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   1100c:	80 91 dd 1c 	lds	r24, 0x1CDD	; 0x801cdd <gpib_timer+0x8>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
#endif
					}
					break;
                }
                if (gpib_timeout_test())
   11010:	88 23       	and	r24, r24
   11012:	09 f4       	brne	.+2      	; 0x11016 <gpib_write_byte+0x110>
   11014:	ac cf       	rjmp	.-168    	; 0x10f6e <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11016:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1101a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1101e:	85 70       	andi	r24, 0x05	; 5
   11020:	99 27       	eor	r25, r25
   11022:	89 2b       	or	r24, r25
   11024:	c1 f1       	breq	.+112    	; 0x11096 <gpib_write_byte+0x190>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   11026:	2e 81       	ldd	r18, Y+6	; 0x06
   11028:	3f 81       	ldd	r19, Y+7	; 0x07
   1102a:	48 85       	ldd	r20, Y+8	; 0x08
   1102c:	ed b7       	in	r30, 0x3d	; 61
   1102e:	fe b7       	in	r31, 0x3e	; 62
   11030:	21 83       	std	Z+1, r18	; 0x01
   11032:	32 83       	std	Z+2, r19	; 0x02
   11034:	43 83       	std	Z+3, r20	; 0x03
   11036:	2d c0       	rjmp	.+90     	; 0x11092 <gpib_write_byte+0x18c>
                }
                break;

// Write Data
            case GPIB_TX_PUT_DATA:
                if(ch & EOI_FLAG)
   11038:	89 85       	ldd	r24, Y+9	; 0x09
   1103a:	9a 85       	ldd	r25, Y+10	; 0x0a
   1103c:	90 ff       	sbrs	r25, 0
   1103e:	03 c0       	rjmp	.+6      	; 0x11046 <gpib_write_byte+0x140>
                    GPIB_IO_LOW(EOI);
   11040:	28 98       	cbi	0x05, 0	; 5
   11042:	20 9a       	sbi	0x04, 0	; 4
   11044:	02 c0       	rjmp	.+4      	; 0x1104a <gpib_write_byte+0x144>
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   11046:	20 98       	cbi	0x04, 0	; 4
   11048:	28 9a       	sbi	0x05, 0	; 5
                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   1104a:	8f ef       	ldi	r24, 0xFF	; 255
   1104c:	81 b9       	out	0x01, r24	; 1
   1104e:	89 85       	ldd	r24, Y+9	; 0x09
   11050:	80 95       	com	r24
   11052:	82 b9       	out	0x02, r24	; 2
   11054:	9d e0       	ldi	r25, 0x0D	; 13
   11056:	9a 95       	dec	r25
   11058:	f1 f7       	brne	.-4      	; 0x11056 <gpib_write_byte+0x150>
   1105a:	00 00       	nop
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   1105c:	64 ef       	ldi	r22, 0xF4	; 244
   1105e:	71 e0       	ldi	r23, 0x01	; 1
   11060:	80 e0       	ldi	r24, 0x00	; 0
   11062:	90 e0       	ldi	r25, 0x00	; 0
   11064:	f9 dd       	rcall	.-1038   	; 0x10c58 <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NRFD_HI;
   11066:	13 e0       	ldi	r17, 0x03	; 3
                break;
   11068:	82 cf       	rjmp	.-252    	; 0x10f6e <gpib_write_byte+0x68>
// Wait for BOTH NRFD HI and NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_HI:
#if 0
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
#else
                if(GPIB_PIN_TST(NRFD))
   1106a:	4a 99       	sbic	0x09, 2	; 9
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
   1106c:	14 e0       	ldi	r17, 0x04	; 4
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   1106e:	80 91 dd 1c 	lds	r24, 0x1CDD	; 0x801cdd <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD))
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
   11072:	88 23       	and	r24, r24
   11074:	09 f4       	brne	.+2      	; 0x11078 <gpib_write_byte+0x172>
   11076:	7b cf       	rjmp	.-266    	; 0x10f6e <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11078:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1107c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11080:	85 70       	andi	r24, 0x05	; 5
   11082:	99 27       	eor	r25, r25
   11084:	89 2b       	or	r24, r25
   11086:	39 f0       	breq	.+14     	; 0x11096 <gpib_write_byte+0x190>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   11088:	ed b7       	in	r30, 0x3d	; 61
   1108a:	fe b7       	in	r31, 0x3e	; 62
   1108c:	61 82       	std	Z+1, r6	; 0x01
   1108e:	72 82       	std	Z+2, r7	; 0x02
   11090:	83 82       	std	Z+3, r8	; 0x03
   11092:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
                    ch |= TIMEOUT_FLAG;
   11096:	29 85       	ldd	r18, Y+9	; 0x09
   11098:	3a 85       	ldd	r19, Y+10	; 0x0a
   1109a:	30 64       	ori	r19, 0x40	; 64
   1109c:	3a 87       	std	Y+10, r19	; 0x0a
   1109e:	29 87       	std	Y+9, r18	; 0x09
   110a0:	51 c0       	rjmp	.+162    	; 0x11144 <gpib_write_byte+0x23e>
                    break;
                }
                break;

            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   110a2:	29 98       	cbi	0x05, 1	; 5
   110a4:	21 9a       	sbi	0x04, 1	; 4
   110a6:	3d e0       	ldi	r19, 0x0D	; 13
   110a8:	3a 95       	dec	r19
   110aa:	f1 f7       	brne	.-4      	; 0x110a8 <gpib_write_byte+0x1a2>
                GPIB_BUS_SETTLE();                
                gpib_timeout_set(HTIMEOUT);
   110ac:	00 00       	nop
   110ae:	64 ef       	ldi	r22, 0xF4	; 244
   110b0:	71 e0       	ldi	r23, 0x01	; 1
   110b2:	80 e0       	ldi	r24, 0x00	; 0
   110b4:	90 e0       	ldi	r25, 0x00	; 0
   110b6:	d0 dd       	rcall	.-1120   	; 0x10c58 <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   110b8:	15 e0       	ldi	r17, 0x05	; 5
                break;
   110ba:	59 cf       	rjmp	.-334    	; 0x10f6e <gpib_write_byte+0x68>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
   110bc:	4b 99       	sbic	0x09, 3	; 9
   110be:	40 c0       	rjmp	.+128    	; 0x11140 <gpib_write_byte+0x23a>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   110c0:	80 91 dd 1c 	lds	r24, 0x1CDD	; 0x801cdd <gpib_timer+0x8>
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   110c4:	88 23       	and	r24, r24
   110c6:	09 f4       	brne	.+2      	; 0x110ca <gpib_write_byte+0x1c4>
   110c8:	52 cf       	rjmp	.-348    	; 0x10f6e <gpib_write_byte+0x68>
                {
                    ch |= TIMEOUT_FLAG;
   110ca:	89 85       	ldd	r24, Y+9	; 0x09
   110cc:	9a 85       	ldd	r25, Y+10	; 0x0a
   110ce:	90 64       	ori	r25, 0x40	; 64
   110d0:	9a 87       	std	Y+10, r25	; 0x0a
   110d2:	89 87       	std	Y+9, r24	; 0x09
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   110d4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   110d8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   110dc:	85 70       	andi	r24, 0x05	; 5
   110de:	99 27       	eor	r25, r25
   110e0:	89 2b       	or	r24, r25
   110e2:	81 f1       	breq	.+96     	; 0x11144 <gpib_write_byte+0x23e>
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   110e4:	ed b7       	in	r30, 0x3d	; 61
   110e6:	fe b7       	in	r31, 0x3e	; 62
   110e8:	c1 82       	std	Z+1, r12	; 0x01
   110ea:	d2 82       	std	Z+2, r13	; 0x02
   110ec:	e3 82       	std	Z+3, r14	; 0x03
   110ee:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   110f2:	28 c0       	rjmp	.+80     	; 0x11144 <gpib_write_byte+0x23e>
                }
                break;

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   110f4:	21 98       	cbi	0x04, 1	; 4
   110f6:	29 9a       	sbi	0x05, 1	; 5
   110f8:	fd e0       	ldi	r31, 0x0D	; 13
   110fa:	fa 95       	dec	r31
   110fc:	f1 f7       	brne	.-4      	; 0x110fa <gpib_write_byte+0x1f4>
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
                gpib_timeout_set(HTIMEOUT);
   110fe:	00 00       	nop
   11100:	64 ef       	ldi	r22, 0xF4	; 244
   11102:	71 e0       	ldi	r23, 0x01	; 1
   11104:	80 e0       	ldi	r24, 0x00	; 0
   11106:	90 e0       	ldi	r25, 0x00	; 0

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
   11108:	a7 dd       	rcall	.-1202   	; 0x10c58 <gpib_timeout_set>
                gpib_timeout_set(HTIMEOUT);
                break;
   1110a:	17 e0       	ldi	r17, 0x07	; 7
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
				// Free BUS, BUSY on error
                gpib_rx_init(1);
   1110c:	30 cf       	rjmp	.-416    	; 0x10f6e <gpib_write_byte+0x68>
   1110e:	81 e0       	ldi	r24, 0x01	; 1
   11110:	e5 dd       	rcall	.-1078   	; 0x10cdc <gpib_rx_init>
                if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11112:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11116:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1111a:	85 70       	andi	r24, 0x05	; 5
   1111c:	99 27       	eor	r25, r25
   1111e:	89 2b       	or	r24, r25
   11120:	99 f0       	breq	.+38     	; 0x11148 <gpib_write_byte+0x242>
                    printf("<GPIB TX TIMEOUT>\n");
   11122:	8e e3       	ldi	r24, 0x3E	; 62
   11124:	90 e1       	ldi	r25, 0x10	; 16
   11126:	a0 e0       	ldi	r26, 0x00	; 0
   11128:	ed b7       	in	r30, 0x3d	; 61
   1112a:	fe b7       	in	r31, 0x3e	; 62
   1112c:	81 83       	std	Z+1, r24	; 0x01
   1112e:	92 83       	std	Z+2, r25	; 0x02
   11130:	a3 83       	std	Z+3, r26	; 0x03
   11132:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   11136:	08 c0       	rjmp	.+16     	; 0x11148 <gpib_write_byte+0x242>
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
    while(tx_state != GPIB_TX_DONE )
   11138:	19 30       	cpi	r17, 0x09	; 9
   1113a:	09 f0       	breq	.+2      	; 0x1113e <gpib_write_byte+0x238>
   1113c:	18 cf       	rjmp	.-464    	; 0x10f6e <gpib_write_byte+0x68>
   1113e:	04 c0       	rjmp	.+8      	; 0x11148 <gpib_write_byte+0x242>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   11140:	16 e0       	ldi	r17, 0x06	; 6
   11142:	15 cf       	rjmp	.-470    	; 0x10f6e <gpib_write_byte+0x68>
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   11144:	18 e0       	ldi	r17, 0x08	; 8
   11146:	13 cf       	rjmp	.-474    	; 0x10f6e <gpib_write_byte+0x68>
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   11148:	89 85       	ldd	r24, Y+9	; 0x09
   1114a:	9a 85       	ldd	r25, Y+10	; 0x0a
   1114c:	2a 96       	adiw	r28, 0x0a	; 10
   1114e:	0f b6       	in	r0, 0x3f	; 63
   11150:	f8 94       	cli
   11152:	de bf       	out	0x3e, r29	; 62
   11154:	0f be       	out	0x3f, r0	; 63
   11156:	cd bf       	out	0x3d, r28	; 61
   11158:	df 91       	pop	r29
   1115a:	cf 91       	pop	r28
   1115c:	1f 91       	pop	r17
   1115e:	ef 90       	pop	r14
   11160:	df 90       	pop	r13
   11162:	cf 90       	pop	r12
   11164:	bf 90       	pop	r11
   11166:	af 90       	pop	r10
   11168:	8f 90       	pop	r8
   1116a:	7f 90       	pop	r7
   1116c:	6f 90       	pop	r6
   1116e:	4f 90       	pop	r4
   11170:	3f 90       	pop	r3
   11172:	2f 90       	pop	r2
   11174:	08 95       	ret

00011176 <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   11176:	cf 93       	push	r28
   11178:	df 93       	push	r29
   1117a:	ec 01       	movw	r28, r24
    if(fo == NULL)
   1117c:	89 2b       	or	r24, r25
   1117e:	21 f4       	brne	.+8      	; 0x11188 <gpib_decode_header+0x12>
        fo = stdout;
   11180:	c0 91 b7 1c 	lds	r28, 0x1CB7	; 0x801cb7 <__iob+0x2>
   11184:	d0 91 b8 1c 	lds	r29, 0x1CB8	; 0x801cb8 <__iob+0x3>

    fprintf(fo,"==============================\n");
   11188:	be 01       	movw	r22, r28
   1118a:	8f ee       	ldi	r24, 0xEF	; 239
   1118c:	9b e0       	ldi	r25, 0x0B	; 11
   1118e:	0e 94 15 77 	call	0xee2a	; 0xee2a <fputs>
    fprintf(fo,"GPIB bus state\n");
   11192:	be 01       	movw	r22, r28
   11194:	8f e0       	ldi	r24, 0x0F	; 15
   11196:	9c e0       	ldi	r25, 0x0C	; 12
   11198:	0e 94 15 77 	call	0xee2a	; 0xee2a <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   1119c:	be 01       	movw	r22, r28
   1119e:	8f e1       	ldi	r24, 0x1F	; 31
   111a0:	9c e0       	ldi	r25, 0x0C	; 12
   111a2:	0e 94 15 77 	call	0xee2a	; 0xee2a <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   111a6:	be 01       	movw	r22, r28
   111a8:	83 e3       	ldi	r24, 0x33	; 51
   111aa:	9c e0       	ldi	r25, 0x0C	; 12
   111ac:	0e 94 15 77 	call	0xee2a	; 0xee2a <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   111b0:	be 01       	movw	r22, r28
   111b2:	86 e5       	ldi	r24, 0x56	; 86
   111b4:	9c e0       	ldi	r25, 0x0C	; 12
   111b6:	0e 94 15 77 	call	0xee2a	; 0xee2a <fputs>
    fprintf(fo,"     A = ATN\n");
   111ba:	be 01       	movw	r22, r28
   111bc:	80 e8       	ldi	r24, 0x80	; 128
   111be:	9c e0       	ldi	r25, 0x0C	; 12
   111c0:	0e 94 15 77 	call	0xee2a	; 0xee2a <fputs>
    fprintf(fo,"      E = EOI\n");
   111c4:	be 01       	movw	r22, r28
   111c6:	8e e8       	ldi	r24, 0x8E	; 142
   111c8:	9c e0       	ldi	r25, 0x0C	; 12
   111ca:	0e 94 15 77 	call	0xee2a	; 0xee2a <fputs>
    fprintf(fo,"       S = SRQ\n");
   111ce:	be 01       	movw	r22, r28
   111d0:	8d e9       	ldi	r24, 0x9D	; 157
   111d2:	9c e0       	ldi	r25, 0x0C	; 12
   111d4:	0e 94 15 77 	call	0xee2a	; 0xee2a <fputs>
    fprintf(fo,"        R = REN\n");
   111d8:	be 01       	movw	r22, r28
   111da:	8d ea       	ldi	r24, 0xAD	; 173
   111dc:	9c e0       	ldi	r25, 0x0C	; 12
   111de:	0e 94 15 77 	call	0xee2a	; 0xee2a <fputs>
    fprintf(fo,"         I = IFC\n");
   111e2:	be 01       	movw	r22, r28
   111e4:	8e eb       	ldi	r24, 0xBE	; 190
   111e6:	9c e0       	ldi	r25, 0x0C	; 12
   111e8:	0e 94 15 77 	call	0xee2a	; 0xee2a <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   111ec:	be 01       	movw	r22, r28
   111ee:	80 ed       	ldi	r24, 0xD0	; 208
   111f0:	9c e0       	ldi	r25, 0x0C	; 12
   111f2:	0e 94 15 77 	call	0xee2a	; 0xee2a <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   111f6:	be 01       	movw	r22, r28
   111f8:	82 ef       	ldi	r24, 0xF2	; 242
   111fa:	9c e0       	ldi	r25, 0x0C	; 12
   111fc:	0e 94 15 77 	call	0xee2a	; 0xee2a <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   11200:	be 01       	movw	r22, r28
   11202:	8a e0       	ldi	r24, 0x0A	; 10
   11204:	9d e0       	ldi	r25, 0x0D	; 13
   11206:	0e 94 15 77 	call	0xee2a	; 0xee2a <fputs>
    fprintf(fo,"              GPIB commands\n");
   1120a:	be 01       	movw	r22, r28
   1120c:	85 e2       	ldi	r24, 0x25	; 37
   1120e:	9d e0       	ldi	r25, 0x0D	; 13
   11210:	0e 94 15 77 	call	0xee2a	; 0xee2a <fputs>
}
   11214:	df 91       	pop	r29
   11216:	cf 91       	pop	r28
   11218:	08 95       	ret

0001121a <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   1121a:	a9 e8       	ldi	r26, 0x89	; 137
   1121c:	b0 e0       	ldi	r27, 0x00	; 0
   1121e:	e3 e1       	ldi	r30, 0x13	; 19
   11220:	f9 e8       	ldi	r31, 0x89	; 137
   11222:	0c 94 99 e7 	jmp	0x1cf32	; 0x1cf32 <__prologue_saves__+0xc>
   11226:	8c 01       	movw	r16, r24
   11228:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   1122a:	1a 86       	std	Y+10, r1	; 0x0a
   1122c:	4c 01       	movw	r8, r24
   1122e:	88 24       	eor	r8, r8
   11230:	44 e0       	ldi	r20, 0x04	; 4
   11232:	94 22       	and	r9, r20
   11234:	ce 01       	movw	r24, r28
   11236:	0a 96       	adiw	r24, 0x0a	; 10
   11238:	7c 01       	movw	r14, r24

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   1123a:	62 30       	cpi	r22, 0x02	; 2
   1123c:	71 05       	cpc	r23, r1
   1123e:	e8 f4       	brcc	.+58     	; 0x1127a <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   11240:	81 14       	cp	r8, r1
   11242:	91 04       	cpc	r9, r1
   11244:	29 f4       	brne	.+10     	; 0x11250 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   11246:	80 2f       	mov	r24, r16

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   11248:	90 ee       	ldi	r25, 0xE0	; 224
   1124a:	90 0f       	add	r25, r16
   1124c:	9f 35       	cpi	r25, 0x5F	; 95
   1124e:	08 f0       	brcs	.+2      	; 0x11252 <gpib_trace_display+0x38>
    str[0] = 0;

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
   11250:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   11252:	90 e0       	ldi	r25, 0x00	; 0
   11254:	ed b7       	in	r30, 0x3d	; 61
   11256:	fe b7       	in	r31, 0x3e	; 62
   11258:	91 87       	std	Z+9, r25	; 0x09
   1125a:	80 87       	std	Z+8, r24	; 0x08
   1125c:	c8 01       	movw	r24, r16
   1125e:	99 27       	eor	r25, r25
   11260:	97 83       	std	Z+7, r25	; 0x07
   11262:	86 83       	std	Z+6, r24	; 0x06
   11264:	87 e1       	ldi	r24, 0x17	; 23
   11266:	90 e1       	ldi	r25, 0x10	; 16
   11268:	a0 e0       	ldi	r26, 0x00	; 0
   1126a:	83 83       	std	Z+3, r24	; 0x03
   1126c:	94 83       	std	Z+4, r25	; 0x04
   1126e:	a5 83       	std	Z+5, r26	; 0x05
   11270:	f2 82       	std	Z+2, r15	; 0x02
   11272:	e1 82       	std	Z+1, r14	; 0x01
   11274:	0e 94 5d 47 	call	0x8eba	; 0x8eba <sprintf_P>
   11278:	0c c0       	rjmp	.+24     	; 0x11292 <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   1127a:	81 e1       	ldi	r24, 0x11	; 17
   1127c:	90 e1       	ldi	r25, 0x10	; 16
   1127e:	a0 e0       	ldi	r26, 0x00	; 0
   11280:	ed b7       	in	r30, 0x3d	; 61
   11282:	fe b7       	in	r31, 0x3e	; 62
   11284:	83 83       	std	Z+3, r24	; 0x03
   11286:	94 83       	std	Z+4, r25	; 0x04
   11288:	a5 83       	std	Z+5, r26	; 0x05
   1128a:	f2 82       	std	Z+2, r15	; 0x02
   1128c:	e1 82       	std	Z+1, r14	; 0x01
   1128e:	0e 94 5d 47 	call	0x8eba	; 0x8eba <sprintf_P>
    }

    tmp = str + strlen(str);
   11292:	f7 01       	movw	r30, r14
   11294:	01 90       	ld	r0, Z+
   11296:	00 20       	and	r0, r0
   11298:	e9 f7       	brne	.-6      	; 0x11294 <gpib_trace_display+0x7a>
   1129a:	31 97       	sbiw	r30, 0x01	; 1
   1129c:	cf 01       	movw	r24, r30
   1129e:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   112a0:	81 14       	cp	r8, r1
   112a2:	91 04       	cpc	r9, r1
   112a4:	11 f0       	breq	.+4      	; 0x112aa <gpib_trace_display+0x90>
        *tmp++ = 'A';
   112a6:	21 e4       	ldi	r18, 0x41	; 65
   112a8:	01 c0       	rjmp	.+2      	; 0x112ac <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   112aa:	2d e2       	ldi	r18, 0x2D	; 45
   112ac:	20 83       	st	Z, r18
   112ae:	dc 01       	movw	r26, r24
   112b0:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   112b2:	10 ff       	sbrs	r17, 0
   112b4:	02 c0       	rjmp	.+4      	; 0x112ba <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   112b6:	25 e4       	ldi	r18, 0x45	; 69
   112b8:	01 c0       	rjmp	.+2      	; 0x112bc <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   112ba:	2d e2       	ldi	r18, 0x2D	; 45
   112bc:	fc 01       	movw	r30, r24
   112be:	20 83       	st	Z, r18
   112c0:	fd 01       	movw	r30, r26
   112c2:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   112c4:	11 ff       	sbrs	r17, 1
   112c6:	02 c0       	rjmp	.+4      	; 0x112cc <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   112c8:	83 e5       	ldi	r24, 0x53	; 83
   112ca:	01 c0       	rjmp	.+2      	; 0x112ce <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   112cc:	8d e2       	ldi	r24, 0x2D	; 45
   112ce:	8c 93       	st	X, r24
   112d0:	df 01       	movw	r26, r30
   112d2:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   112d4:	13 ff       	sbrs	r17, 3
   112d6:	02 c0       	rjmp	.+4      	; 0x112dc <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   112d8:	82 e5       	ldi	r24, 0x52	; 82
   112da:	01 c0       	rjmp	.+2      	; 0x112de <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   112dc:	8d e2       	ldi	r24, 0x2D	; 45
   112de:	80 83       	st	Z, r24
   112e0:	fd 01       	movw	r30, r26
   112e2:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   112e4:	14 ff       	sbrs	r17, 4
   112e6:	02 c0       	rjmp	.+4      	; 0x112ec <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   112e8:	89 e4       	ldi	r24, 0x49	; 73
   112ea:	01 c0       	rjmp	.+2      	; 0x112ee <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   112ec:	8d e2       	ldi	r24, 0x2D	; 45
   112ee:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   112f0:	a1 14       	cp	r10, r1
   112f2:	b1 04       	cpc	r11, r1
   112f4:	d1 f4       	brne	.+52     	; 0x1132a <gpib_trace_display+0x110>
   112f6:	df 01       	movw	r26, r30
   112f8:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   112fa:	15 ff       	sbrs	r17, 5
   112fc:	02 c0       	rjmp	.+4      	; 0x11302 <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   112fe:	80 e5       	ldi	r24, 0x50	; 80
   11300:	01 c0       	rjmp	.+2      	; 0x11304 <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   11302:	8d e2       	ldi	r24, 0x2D	; 45
   11304:	80 83       	st	Z, r24
   11306:	fd 01       	movw	r30, r26
   11308:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   1130a:	16 ff       	sbrs	r17, 6
   1130c:	02 c0       	rjmp	.+4      	; 0x11312 <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   1130e:	84 e5       	ldi	r24, 0x54	; 84
   11310:	01 c0       	rjmp	.+2      	; 0x11314 <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   11312:	8d e2       	ldi	r24, 0x2D	; 45
   11314:	8c 93       	st	X, r24
   11316:	cf 01       	movw	r24, r30
   11318:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   1131a:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   1131c:	17 ff       	sbrs	r17, 7
   1131e:	02 c0       	rjmp	.+4      	; 0x11324 <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   11320:	82 e4       	ldi	r24, 0x42	; 66
   11322:	01 c0       	rjmp	.+2      	; 0x11326 <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   11324:	8d e2       	ldi	r24, 0x2D	; 45
   11326:	80 83       	st	Z, r24
   11328:	08 c0       	rjmp	.+16     	; 0x1133a <gpib_trace_display+0x120>
    }
    else
    {
// not used when tracing
        *tmp++ = '-';
   1132a:	8d e2       	ldi	r24, 0x2D	; 45
   1132c:	80 83       	st	Z, r24
        *tmp++ = '-';
   1132e:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   11330:	6f 01       	movw	r12, r30
   11332:	43 e0       	ldi	r20, 0x03	; 3
   11334:	c4 0e       	add	r12, r20
   11336:	d1 1c       	adc	r13, r1
   11338:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   1133a:	f6 01       	movw	r30, r12
   1133c:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   1133e:	f1 e0       	ldi	r31, 0x01	; 1
   11340:	af 1a       	sub	r10, r31
   11342:	b1 08       	sbc	r11, r1
   11344:	42 e0       	ldi	r20, 0x02	; 2
   11346:	a4 16       	cp	r10, r20
   11348:	b1 04       	cpc	r11, r1
   1134a:	f0 f4       	brcc	.+60     	; 0x11388 <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   1134c:	15 ff       	sbrs	r17, 5
   1134e:	03 c0       	rjmp	.+6      	; 0x11356 <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   11350:	62 e4       	ldi	r22, 0x42	; 66
   11352:	7d e0       	ldi	r23, 0x0D	; 13
   11354:	02 c0       	rjmp	.+4      	; 0x1135a <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   11356:	65 e6       	ldi	r22, 0x65	; 101
   11358:	74 e0       	ldi	r23, 0x04	; 4
   1135a:	c7 01       	movw	r24, r14
   1135c:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <strcat>
        if(status & NRFD_FLAG)
   11360:	16 ff       	sbrs	r17, 6
   11362:	03 c0       	rjmp	.+6      	; 0x1136a <gpib_trace_display+0x150>
            strcat(str," NRFD");
   11364:	68 e4       	ldi	r22, 0x48	; 72
   11366:	7d e0       	ldi	r23, 0x0D	; 13
   11368:	02 c0       	rjmp	.+4      	; 0x1136e <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   1136a:	65 e6       	ldi	r22, 0x65	; 101
   1136c:	74 e0       	ldi	r23, 0x04	; 4
   1136e:	c7 01       	movw	r24, r14
   11370:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <strcat>
        if(status & NDAC_FLAG)
   11374:	17 ff       	sbrs	r17, 7
   11376:	03 c0       	rjmp	.+6      	; 0x1137e <gpib_trace_display+0x164>
            strcat(str," NDAC");
   11378:	6e e4       	ldi	r22, 0x4E	; 78
   1137a:	7d e0       	ldi	r23, 0x0D	; 13
   1137c:	02 c0       	rjmp	.+4      	; 0x11382 <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   1137e:	65 e6       	ldi	r22, 0x65	; 101
   11380:	74 e0       	ldi	r23, 0x04	; 4
   11382:	c7 01       	movw	r24, r14
   11384:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <strcat>
    }

    if( (status & ATN_FLAG) )
   11388:	81 14       	cp	r8, r1
   1138a:	91 04       	cpc	r9, r1
   1138c:	09 f4       	brne	.+2      	; 0x11390 <gpib_trace_display+0x176>
   1138e:	5a c0       	rjmp	.+180    	; 0x11444 <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   11390:	c8 01       	movw	r24, r16
   11392:	8f 77       	andi	r24, 0x7F	; 127
   11394:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   11396:	9c 01       	movw	r18, r24
   11398:	20 52       	subi	r18, 0x20	; 32
   1139a:	31 09       	sbc	r19, r1
   1139c:	2f 31       	cpi	r18, 0x1F	; 31
   1139e:	31 05       	cpc	r19, r1
   113a0:	48 f4       	brcc	.+18     	; 0x113b4 <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   113a2:	0f 71       	andi	r16, 0x1F	; 31
   113a4:	11 27       	eor	r17, r17
   113a6:	ed b7       	in	r30, 0x3d	; 61
   113a8:	fe b7       	in	r31, 0x3e	; 62
   113aa:	17 83       	std	Z+7, r17	; 0x07
   113ac:	06 83       	std	Z+6, r16	; 0x06
   113ae:	86 e0       	ldi	r24, 0x06	; 6
   113b0:	90 e1       	ldi	r25, 0x10	; 16
   113b2:	0e c0       	rjmp	.+28     	; 0x113d0 <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   113b4:	9c 01       	movw	r18, r24
   113b6:	20 54       	subi	r18, 0x40	; 64
   113b8:	31 09       	sbc	r19, r1
   113ba:	2f 30       	cpi	r18, 0x0F	; 15
   113bc:	31 05       	cpc	r19, r1
   113be:	88 f4       	brcc	.+34     	; 0x113e2 <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   113c0:	0f 71       	andi	r16, 0x1F	; 31
   113c2:	11 27       	eor	r17, r17
   113c4:	ed b7       	in	r30, 0x3d	; 61
   113c6:	fe b7       	in	r31, 0x3e	; 62
   113c8:	17 83       	std	Z+7, r17	; 0x07
   113ca:	06 83       	std	Z+6, r16	; 0x06
   113cc:	8b ef       	ldi	r24, 0xFB	; 251
   113ce:	9f e0       	ldi	r25, 0x0F	; 15
   113d0:	a0 e0       	ldi	r26, 0x00	; 0
   113d2:	83 83       	std	Z+3, r24	; 0x03
   113d4:	94 83       	std	Z+4, r25	; 0x04
   113d6:	a5 83       	std	Z+5, r26	; 0x05
   113d8:	d2 82       	std	Z+2, r13	; 0x02
   113da:	c1 82       	std	Z+1, r12	; 0x01
   113dc:	0e 94 5d 47 	call	0x8eba	; 0x8eba <sprintf_P>
   113e0:	31 c0       	rjmp	.+98     	; 0x11444 <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   113e2:	9c 01       	movw	r18, r24
   113e4:	20 56       	subi	r18, 0x60	; 96
   113e6:	31 09       	sbc	r19, r1
   113e8:	20 31       	cpi	r18, 0x10	; 16
   113ea:	31 05       	cpc	r19, r1
   113ec:	28 f0       	brcs	.+10     	; 0x113f8 <gpib_trace_display+0x1de>
   113ee:	e2 e8       	ldi	r30, 0x82	; 130
   113f0:	f1 e0       	ldi	r31, 0x01	; 1
   113f2:	00 e0       	ldi	r16, 0x00	; 0
   113f4:	10 e0       	ldi	r17, 0x00	; 0
   113f6:	0b c0       	rjmp	.+22     	; 0x1140e <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   113f8:	0f 71       	andi	r16, 0x1F	; 31
   113fa:	11 27       	eor	r17, r17
   113fc:	ed b7       	in	r30, 0x3d	; 61
   113fe:	fe b7       	in	r31, 0x3e	; 62
   11400:	17 83       	std	Z+7, r17	; 0x07
   11402:	06 83       	std	Z+6, r16	; 0x06
   11404:	80 ef       	ldi	r24, 0xF0	; 240
   11406:	9f e0       	ldi	r25, 0x0F	; 15
   11408:	e3 cf       	rjmp	.-58     	; 0x113d0 <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   1140a:	0f 5f       	subi	r16, 0xFF	; 255
   1140c:	1f 4f       	sbci	r17, 0xFF	; 255
   1140e:	20 81       	ld	r18, Z
   11410:	31 81       	ldd	r19, Z+1	; 0x01
   11412:	2f 3f       	cpi	r18, 0xFF	; 255
   11414:	4f ef       	ldi	r20, 0xFF	; 255
   11416:	34 07       	cpc	r19, r20
   11418:	a9 f0       	breq	.+42     	; 0x11444 <gpib_trace_display+0x22a>
   1141a:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   1141c:	82 17       	cp	r24, r18
   1141e:	93 07       	cpc	r25, r19
   11420:	a1 f7       	brne	.-24     	; 0x1140a <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   11422:	69 e6       	ldi	r22, 0x69	; 105
   11424:	74 e0       	ldi	r23, 0x04	; 4
   11426:	c6 01       	movw	r24, r12
   11428:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   1142c:	f8 01       	movw	r30, r16
   1142e:	ee 0f       	add	r30, r30
   11430:	ff 1f       	adc	r31, r31
   11432:	ee 0f       	add	r30, r30
   11434:	ff 1f       	adc	r31, r31
   11436:	ee 57       	subi	r30, 0x7E	; 126
   11438:	fe 4f       	sbci	r31, 0xFE	; 254
   1143a:	62 81       	ldd	r22, Z+2	; 0x02
   1143c:	73 81       	ldd	r23, Z+3	; 0x03
   1143e:	c6 01       	movw	r24, r12
   11440:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   11444:	20 91 56 19 	lds	r18, 0x1956	; 0x801956 <gpib_log_fp>
   11448:	30 91 57 19 	lds	r19, 0x1957	; 0x801957 <gpib_log_fp+0x1>
   1144c:	80 91 b7 1c 	lds	r24, 0x1CB7	; 0x801cb7 <__iob+0x2>
   11450:	90 91 b8 1c 	lds	r25, 0x1CB8	; 0x801cb8 <__iob+0x3>
   11454:	23 2b       	or	r18, r19
   11456:	21 f4       	brne	.+8      	; 0x11460 <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   11458:	90 93 57 19 	sts	0x1957, r25	; 0x801957 <gpib_log_fp+0x1>
   1145c:	80 93 56 19 	sts	0x1956, r24	; 0x801956 <gpib_log_fp>

// Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   11460:	20 91 56 19 	lds	r18, 0x1956	; 0x801956 <gpib_log_fp>
   11464:	30 91 57 19 	lds	r19, 0x1957	; 0x801957 <gpib_log_fp+0x1>
   11468:	82 17       	cp	r24, r18
   1146a:	93 07       	cpc	r25, r19
   1146c:	19 f0       	breq	.+6      	; 0x11474 <gpib_trace_display+0x25a>
        puts(str);
   1146e:	c7 01       	movw	r24, r14
   11470:	0e 94 2d 77 	call	0xee5a	; 0xee5a <puts>

// Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   11474:	ed b7       	in	r30, 0x3d	; 61
   11476:	fe b7       	in	r31, 0x3e	; 62
   11478:	f6 82       	std	Z+6, r15	; 0x06
   1147a:	e5 82       	std	Z+5, r14	; 0x05
   1147c:	84 e5       	ldi	r24, 0x54	; 84
   1147e:	9d e0       	ldi	r25, 0x0D	; 13
   11480:	94 83       	std	Z+4, r25	; 0x04
   11482:	83 83       	std	Z+3, r24	; 0x03
   11484:	80 91 56 19 	lds	r24, 0x1956	; 0x801956 <gpib_log_fp>
   11488:	90 91 57 19 	lds	r25, 0x1957	; 0x801957 <gpib_log_fp+0x1>
   1148c:	92 83       	std	Z+2, r25	; 0x02
   1148e:	81 83       	std	Z+1, r24	; 0x01
   11490:	0e 94 d5 7e 	call	0xfdaa	; 0xfdaa <fprintf>
}
   11494:	c7 57       	subi	r28, 0x77	; 119
   11496:	df 4f       	sbci	r29, 0xFF	; 255
   11498:	ec e0       	ldi	r30, 0x0C	; 12
   1149a:	0c 94 b5 e7 	jmp	0x1cf6a	; 0x1cf6a <__epilogue_restores__+0xc>

0001149e <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   1149e:	af 92       	push	r10
   114a0:	bf 92       	push	r11
   114a2:	cf 92       	push	r12
   114a4:	df 92       	push	r13
   114a6:	ef 92       	push	r14
   114a8:	ff 92       	push	r15
   114aa:	0f 93       	push	r16
   114ac:	1f 93       	push	r17
   114ae:	cf 93       	push	r28
   114b0:	00 d0       	rcall	.+0      	; 0x114b2 <gpib_read_byte+0x14>
   114b2:	00 d0       	rcall	.+0      	; 0x114b4 <gpib_read_byte+0x16>
   114b4:	1f 92       	push	r1

    ch = 0;
    control_last = 0;

	// Return unread - last read - data and control lines
    if(gpib_unread_f)
   114b6:	20 91 55 19 	lds	r18, 0x1955	; 0x801955 <gpib_unread_f>
   114ba:	22 23       	and	r18, r18
   114bc:	39 f0       	breq	.+14     	; 0x114cc <gpib_read_byte+0x2e>
    {
		// FYI any unread data has been traced
        gpib_unread_f = 0;
   114be:	10 92 55 19 	sts	0x1955, r1	; 0x801955 <gpib_unread_f>
        return(gpib_unread_data);
   114c2:	80 91 e8 1e 	lds	r24, 0x1EE8	; 0x801ee8 <gpib_unread_data>
   114c6:	90 91 e9 1e 	lds	r25, 0x1EE9	; 0x801ee9 <gpib_unread_data+0x1>
   114ca:	e0 c0       	rjmp	.+448    	; 0x1168c <gpib_read_byte+0x1ee>
   114cc:	6c 01       	movw	r12, r24
	// We start and end gpib_read_byte() with NRFD and NDAC LOW 
	// When ATN goes LOW all devices must pull NRFD and NDAC lines LOW
	// within 200 nanoseconds to permit three-wire handshake 
	// ATN requirements are met because we are always reading in command mode
	// ATN = 0 = COmmand Mode
    gpib_rx_init(1);
   114ce:	81 e0       	ldi	r24, 0x01	; 1
   114d0:	05 dc       	rcall	.-2038   	; 0x10cdc <gpib_rx_init>
	// GPIB_IO_LOW(TE);			// BUS IN
	// BUS IN, DAV IN, NDAC OUT , NRFD OUT 
	// ATN IN, EOI IN, SRQ OUT OC

	///@brief V2 boards can NOT read ALL bits on the control bus at once
    if(trace)
   114d2:	c1 14       	cp	r12, r1
   114d4:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   114d6:	51 f0       	breq	.+20     	; 0x114ec <gpib_read_byte+0x4e>
   114d8:	fa dc       	rcall	.-1548   	; 0x10ece <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   114da:	7c 01       	movw	r14, r24
   114dc:	08 dd       	rcall	.-1520   	; 0x10eee <gpib_handshake_pin_read>
   114de:	e8 2a       	or	r14, r24
   114e0:	f9 2a       	or	r15, r25
        gpib_trace_display(control_last, TRACE_BUS);
   114e2:	62 e0       	ldi	r22, 0x02	; 2
   114e4:	70 e0       	ldi	r23, 0x00	; 0
   114e6:	c7 01       	movw	r24, r14
   114e8:	98 de       	rcall	.-720    	; 0x1121a <gpib_trace_display>
   114ea:	02 c0       	rjmp	.+4      	; 0x114f0 <gpib_read_byte+0x52>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   114ec:	e1 2c       	mov	r14, r1
   114ee:	f1 2c       	mov	r15, r1
        control_last = gpib_control_pin_read();
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
   114f0:	64 ef       	ldi	r22, 0xF4	; 244
   114f2:	71 e0       	ldi	r23, 0x01	; 1
   114f4:	80 e0       	ldi	r24, 0x00	; 0
   114f6:	90 e0       	ldi	r25, 0x00	; 0
   114f8:	af db       	rcall	.-2210   	; 0x10c58 <gpib_timeout_set>
    rx_state = GPIB_RX_START;
   114fa:	c0 e0       	ldi	r28, 0x00	; 0
    uint16_t ch;
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
   114fc:	00 e0       	ldi	r16, 0x00	; 0
   114fe:	10 e0       	ldi	r17, 0x00	; 0
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
    {

        // User task that is called while waiting for commands
        gpib_user_task();
   11500:	0e 94 9d e2 	call	0x1c53a	; 0x1c53a <gpib_user_task>

        if(uart_keyhit(0))
   11504:	80 e0       	ldi	r24, 0x00	; 0
   11506:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <uart_keyhit>
   1150a:	89 2b       	or	r24, r25
   1150c:	09 f0       	breq	.+2      	; 0x11510 <gpib_read_byte+0x72>
   1150e:	9c c0       	rjmp	.+312    	; 0x11648 <gpib_read_byte+0x1aa>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is alwayon IN always in device mode
        if(GPIB_PIN_TST(IFC) == 0)
   11510:	4c 99       	sbic	0x09, 4	; 9
   11512:	15 c0       	rjmp	.+42     	; 0x1153e <gpib_read_byte+0xa0>
        {
            ch |= IFC_FLAG;
   11514:	10 61       	ori	r17, 0x10	; 16
			if(debuglevel & GPIB_ERR)
   11516:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1151a:	80 ff       	sbrs	r24, 0
   1151c:	0e c0       	rjmp	.+28     	; 0x1153a <gpib_read_byte+0x9c>
				printf("gpib_read_byte: IFC state=%d\n", rx_state);
   1151e:	8c 2f       	mov	r24, r28
   11520:	90 e0       	ldi	r25, 0x00	; 0
   11522:	ed b7       	in	r30, 0x3d	; 61
   11524:	fe b7       	in	r31, 0x3e	; 62
   11526:	95 83       	std	Z+5, r25	; 0x05
   11528:	84 83       	std	Z+4, r24	; 0x04
   1152a:	80 e2       	ldi	r24, 0x20	; 32
   1152c:	90 e1       	ldi	r25, 0x10	; 16
   1152e:	a0 e0       	ldi	r26, 0x00	; 0
   11530:	81 83       	std	Z+1, r24	; 0x01
   11532:	92 83       	std	Z+2, r25	; 0x02
   11534:	a3 83       	std	Z+3, r26	; 0x03
   11536:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            gpib_bus_init();
   1153a:	98 db       	rcall	.-2256   	; 0x10c6c <gpib_bus_init>
   1153c:	85 c0       	rjmp	.+266    	; 0x11648 <gpib_read_byte+0x1aa>
            break;
        }

        switch(rx_state)
   1153e:	c2 30       	cpi	r28, 0x02	; 2
   11540:	31 f1       	breq	.+76     	; 0x1158e <gpib_read_byte+0xf0>
   11542:	28 f4       	brcc	.+10     	; 0x1154e <gpib_read_byte+0xb0>
   11544:	cc 23       	and	r28, r28
   11546:	69 f0       	breq	.+26     	; 0x11562 <gpib_read_byte+0xc4>
   11548:	c1 30       	cpi	r28, 0x01	; 1
   1154a:	c9 f0       	breq	.+50     	; 0x1157e <gpib_read_byte+0xe0>
   1154c:	63 c0       	rjmp	.+198    	; 0x11614 <gpib_read_byte+0x176>
   1154e:	c5 30       	cpi	r28, 0x05	; 5
   11550:	09 f4       	brne	.+2      	; 0x11554 <gpib_read_byte+0xb6>
   11552:	54 c0       	rjmp	.+168    	; 0x115fc <gpib_read_byte+0x15e>
   11554:	c7 30       	cpi	r28, 0x07	; 7
   11556:	09 f4       	brne	.+2      	; 0x1155a <gpib_read_byte+0xbc>
   11558:	58 c0       	rjmp	.+176    	; 0x1160a <gpib_read_byte+0x16c>
   1155a:	c4 30       	cpi	r28, 0x04	; 4
   1155c:	09 f0       	breq	.+2      	; 0x11560 <gpib_read_byte+0xc2>
   1155e:	5a c0       	rjmp	.+180    	; 0x11614 <gpib_read_byte+0x176>
   11560:	3e c0       	rjmp	.+124    	; 0x115de <gpib_read_byte+0x140>
        {

			///@brief DAV must be high
            case GPIB_RX_START:
				//DEBUG
				if (GPIB_PIN_TST(DAV) == 1)
   11562:	19 9b       	sbis	0x03, 1	; 3
   11564:	43 c0       	rjmp	.+134    	; 0x115ec <gpib_read_byte+0x14e>
   11566:	fd e0       	ldi	r31, 0x0D	; 13
   11568:	fa 95       	dec	r31
   1156a:	f1 f7       	brne	.-4      	; 0x11568 <gpib_read_byte+0xca>
   1156c:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					GPIB_PIN_FLOAT_UP(NRFD);
   1156e:	52 98       	cbi	0x0a, 2	; 10
   11570:	5a 9a       	sbi	0x0b, 2	; 11
   11572:	8d e0       	ldi	r24, 0x0D	; 13
   11574:	8a 95       	dec	r24
   11576:	f1 f7       	brne	.-4      	; 0x11574 <gpib_read_byte+0xd6>
   11578:	00 00       	nop
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   1157a:	c1 e0       	ldi	r28, 0x01	; 1
   1157c:	37 c0       	rjmp	.+110    	; 0x115ec <gpib_read_byte+0x14e>
                }
                break;

			// Wait for Data Avalable without timeout
            case GPIB_RX_WAIT_FOR_DAV_LOW:
                if ( GPIB_PIN_TST(DAV) == 0 )
   1157e:	19 99       	sbic	0x03, 1	; 3
   11580:	80 c0       	rjmp	.+256    	; 0x11682 <gpib_read_byte+0x1e4>
   11582:	ed e0       	ldi	r30, 0x0D	; 13
   11584:	ea 95       	dec	r30
   11586:	f1 f7       	brne	.-4      	; 0x11584 <gpib_read_byte+0xe6>
   11588:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                
                    rx_state = GPIB_RX_DAV_IS_LOW;
   1158a:	c2 e0       	ldi	r28, 0x02	; 2
   1158c:	7a c0       	rjmp	.+244    	; 0x11682 <gpib_read_byte+0x1e4>
				}
                break;

			// Data is Avaliable
            case GPIB_RX_DAV_IS_LOW:
				GPIB_IO_LOW(NRFD); // BUSY
   1158e:	5a 98       	cbi	0x0b, 2	; 11
   11590:	52 9a       	sbi	0x0a, 2	; 10
   11592:	fd e0       	ldi	r31, 0x0D	; 13
   11594:	fa 95       	dec	r31
				GPIB_BUS_SETTLE();                

				// Read DATA and Control lines
				// gpib_bus_read() strips parity if ATN is low command state

                bus = gpib_bus_read();
   11596:	f1 f7       	brne	.-4      	; 0x11594 <gpib_read_byte+0xf6>
   11598:	00 00       	nop
   1159a:	93 dc       	rcall	.-1754   	; 0x10ec2 <gpib_bus_read>
   1159c:	a8 2e       	mov	r10, r24
                ch |= bus;

				///@brief V2 boards can NOT read all control bits at once
				///@brief NRFD,NDAC and SRQ are cirrently outputs

                control_last = gpib_control_pin_read();
   1159e:	b1 2c       	mov	r11, r1
   115a0:	96 dc       	rcall	.-1748   	; 0x10ece <gpib_control_pin_read>
   115a2:	7c 01       	movw	r14, r24
   115a4:	08 2b       	or	r16, r24
                ch |= control_last;
   115a6:	19 2b       	or	r17, r25
   115a8:	0a 29       	or	r16, r10

				// In theory the control_last should not have changed
				// from the initial values. ONly the Data BUS
                if(trace)
   115aa:	1b 29       	or	r17, r11
   115ac:	c1 14       	cp	r12, r1
   115ae:	d1 04       	cpc	r13, r1
                {
                    control_last |= gpib_handshake_pin_read();
   115b0:	49 f0       	breq	.+18     	; 0x115c4 <gpib_read_byte+0x126>
   115b2:	9d dc       	rcall	.-1734   	; 0x10eee <gpib_handshake_pin_read>
   115b4:	e8 2a       	or	r14, r24
                    gpib_trace_display(bus | control_last, TRACE_READ);
   115b6:	f9 2a       	or	r15, r25
   115b8:	61 e0       	ldi	r22, 0x01	; 1
   115ba:	70 e0       	ldi	r23, 0x00	; 0
   115bc:	c5 01       	movw	r24, r10
   115be:	8e 29       	or	r24, r14
   115c0:	9f 29       	or	r25, r15
   115c2:	2b de       	rcall	.-938    	; 0x1121a <gpib_trace_display>
                }

				// Release NDAC to say we read the byte
                GPIB_PIN_FLOAT_UP(NDAC);
   115c4:	53 98       	cbi	0x0a, 3	; 10
   115c6:	5b 9a       	sbi	0x0b, 3	; 11
   115c8:	8d e0       	ldi	r24, 0x0D	; 13
   115ca:	8a 95       	dec	r24
   115cc:	f1 f7       	brne	.-4      	; 0x115ca <gpib_read_byte+0x12c>
                GPIB_BUS_SETTLE();                // NDAC bus settle time
                gpib_timeout_set(HTIMEOUT);
   115ce:	00 00       	nop
   115d0:	64 ef       	ldi	r22, 0xF4	; 244
   115d2:	71 e0       	ldi	r23, 0x01	; 1
   115d4:	80 e0       	ldi	r24, 0x00	; 0
   115d6:	90 e0       	ldi	r25, 0x00	; 0
   115d8:	3f db       	rcall	.-2434   	; 0x10c58 <gpib_timeout_set>
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   115da:	c4 e0       	ldi	r28, 0x04	; 4
   115dc:	52 c0       	rjmp	.+164    	; 0x11682 <gpib_read_byte+0x1e4>
                break;

			///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   115de:	19 9b       	sbis	0x03, 1	; 3
   115e0:	05 c0       	rjmp	.+10     	; 0x115ec <gpib_read_byte+0x14e>
   115e2:	ed e0       	ldi	r30, 0x0D	; 13
   115e4:	ea 95       	dec	r30
   115e6:	f1 f7       	brne	.-4      	; 0x115e4 <gpib_read_byte+0x146>
   115e8:	00 00       	nop
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
   115ea:	c5 e0       	ldi	r28, 0x05	; 5
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   115ec:	80 91 dd 1c 	lds	r24, 0x1CDD	; 0x801cdd <gpib_timer+0x8>
                if (GPIB_PIN_TST(DAV) == 1)
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
                }
                if (gpib_timeout_test())
   115f0:	88 23       	and	r24, r24
   115f2:	09 f4       	brne	.+2      	; 0x115f6 <gpib_read_byte+0x158>
   115f4:	46 c0       	rjmp	.+140    	; 0x11682 <gpib_read_byte+0x1e4>
                {
                    ch |= TIMEOUT_FLAG;
   115f6:	10 64       	ori	r17, 0x40	; 64
                    rx_state = GPIB_RX_ERROR;
   115f8:	c7 e0       	ldi	r28, 0x07	; 7
   115fa:	43 c0       	rjmp	.+134    	; 0x11682 <gpib_read_byte+0x1e4>
                }
                break;

			///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
				GPIB_IO_LOW(NDAC);
   115fc:	5b 98       	cbi	0x0b, 3	; 11
   115fe:	53 9a       	sbi	0x0a, 3	; 10
   11600:	fd e0       	ldi	r31, 0x0D	; 13
   11602:	fa 95       	dec	r31
   11604:	f1 f7       	brne	.-4      	; 0x11602 <gpib_read_byte+0x164>
   11606:	00 00       	nop
   11608:	09 c0       	rjmp	.+18     	; 0x1161c <gpib_read_byte+0x17e>
				// Now BOTH NDAC and NRFD are LOW
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_ERROR:
				GPIB_IO_LOW(NRFD);
   1160a:	5a 98       	cbi	0x0b, 2	; 11
   1160c:	52 9a       	sbi	0x0a, 2	; 10
				GPIB_IO_LOW(NDAC);
   1160e:	5b 98       	cbi	0x0b, 3	; 11
   11610:	53 9a       	sbi	0x0a, 3	; 10

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11612:	04 c0       	rjmp	.+8      	; 0x1161c <gpib_read_byte+0x17e>
   11614:	c1 14       	cp	r12, r1
   11616:	d1 04       	cpc	r13, r1
   11618:	91 f0       	breq	.+36     	; 0x1163e <gpib_read_byte+0x1a0>
   1161a:	04 c0       	rjmp	.+8      	; 0x11624 <gpib_read_byte+0x186>
   1161c:	c1 14       	cp	r12, r1
   1161e:	d1 04       	cpc	r13, r1
   11620:	99 f0       	breq	.+38     	; 0x11648 <gpib_read_byte+0x1aa>
        {
/// V2 boards can not read all control and handshake bits at once
/// FIXME We could add a test for read/write state ??
/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   11622:	c8 e0       	ldi	r28, 0x08	; 8
   11624:	54 dc       	rcall	.-1880   	; 0x10ece <gpib_control_pin_read>
            control |= gpib_handshake_pin_read();
   11626:	5c 01       	movw	r10, r24
   11628:	62 dc       	rcall	.-1852   	; 0x10eee <gpib_handshake_pin_read>
   1162a:	a8 2a       	or	r10, r24
   1162c:	b9 2a       	or	r11, r25
            if(control_last != control)
   1162e:	ae 14       	cp	r10, r14
   11630:	bf 04       	cpc	r11, r15
   11632:	31 f0       	breq	.+12     	; 0x11640 <gpib_read_byte+0x1a2>
            {
                gpib_trace_display(control, TRACE_BUS);
   11634:	62 e0       	ldi	r22, 0x02	; 2
   11636:	70 e0       	ldi	r23, 0x00	; 0
   11638:	c5 01       	movw	r24, r10
   1163a:	ef dd       	rcall	.-1058   	; 0x1121a <gpib_trace_display>
   1163c:	01 c0       	rjmp	.+2      	; 0x11640 <gpib_read_byte+0x1a2>
   1163e:	57 01       	movw	r10, r14

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11640:	c8 30       	cpi	r28, 0x08	; 8
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   11642:	11 f0       	breq	.+4      	; 0x11648 <gpib_read_byte+0x1aa>
   11644:	75 01       	movw	r14, r10
   11646:	5c cf       	rjmp	.-328    	; 0x11500 <gpib_read_byte+0x62>
   11648:	80 91 e2 1e 	lds	r24, 0x1EE2	; 0x801ee2 <current>
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   1164c:	90 91 e3 1e 	lds	r25, 0x1EE3	; 0x801ee3 <current+0x1>
   11650:	90 93 df 1c 	sts	0x1CDF, r25	; 0x801cdf <lastcmd+0x1>
   11654:	80 93 de 1c 	sts	0x1CDE, r24	; 0x801cde <lastcmd>
   11658:	c8 01       	movw	r24, r16

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   1165a:	88 27       	eor	r24, r24
   1165c:	90 7d       	andi	r25, 0xD0	; 208
   1165e:	89 2b       	or	r24, r25
   11660:	11 f4       	brne	.+4      	; 0x11666 <gpib_read_byte+0x1c8>
   11662:	12 fd       	sbrc	r17, 2
   11664:	05 c0       	rjmp	.+10     	; 0x11670 <gpib_read_byte+0x1d2>
   11666:	10 92 e3 1e 	sts	0x1EE3, r1	; 0x801ee3 <current+0x1>
        current = 0;
   1166a:	10 92 e2 1e 	sts	0x1EE2, r1	; 0x801ee2 <current>
   1166e:	07 c0       	rjmp	.+14     	; 0x1167e <gpib_read_byte+0x1e0>
   11670:	c8 01       	movw	r24, r16
    else
        current = ch & CMD_MASK;
   11672:	8f 77       	andi	r24, 0x7F	; 127
   11674:	99 27       	eor	r25, r25
   11676:	90 93 e3 1e 	sts	0x1EE3, r25	; 0x801ee3 <current+0x1>
   1167a:	80 93 e2 1e 	sts	0x1EE2, r24	; 0x801ee2 <current>
   1167e:	c8 01       	movw	r24, r16
   11680:	05 c0       	rjmp	.+10     	; 0x1168c <gpib_read_byte+0x1ee>
   11682:	c1 14       	cp	r12, r1

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11684:	d1 04       	cpc	r13, r1
   11686:	09 f4       	brne	.+2      	; 0x1168a <gpib_read_byte+0x1ec>
   11688:	3b cf       	rjmp	.-394    	; 0x11500 <gpib_read_byte+0x62>
   1168a:	cc cf       	rjmp	.-104    	; 0x11624 <gpib_read_byte+0x186>
   1168c:	0f 90       	pop	r0
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   1168e:	0f 90       	pop	r0
   11690:	0f 90       	pop	r0
   11692:	0f 90       	pop	r0
   11694:	0f 90       	pop	r0
   11696:	cf 91       	pop	r28
   11698:	1f 91       	pop	r17
   1169a:	0f 91       	pop	r16
   1169c:	ff 90       	pop	r15
   1169e:	ef 90       	pop	r14
   116a0:	df 90       	pop	r13
   116a2:	cf 90       	pop	r12
   116a4:	bf 90       	pop	r11
   116a6:	af 90       	pop	r10
   116a8:	08 95       	ret

000116aa <gpib_decode>:
   116aa:	60 e0       	ldi	r22, 0x00	; 0
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   116ac:	70 e0       	ldi	r23, 0x00	; 0
   116ae:	b5 cd       	rjmp	.-1174   	; 0x1121a <gpib_trace_display>
   116b0:	08 95       	ret

000116b2 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   116b2:	a7 e0       	ldi	r26, 0x07	; 7
   116b4:	b0 e0       	ldi	r27, 0x00	; 0
   116b6:	ef e5       	ldi	r30, 0x5F	; 95
   116b8:	fb e8       	ldi	r31, 0x8B	; 139
   116ba:	0c 94 9b e7 	jmp	0x1cf36	; 0x1cf36 <__prologue_saves__+0x10>
   116be:	5b 01       	movw	r10, r22
   116c0:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   116c2:	fa 01       	movw	r30, r20
   116c4:	20 81       	ld	r18, Z
   116c6:	31 81       	ldd	r19, Z+1	; 0x01
   116c8:	22 27       	eor	r18, r18
   116ca:	31 83       	std	Z+1, r19	; 0x01
   116cc:	20 83       	st	Z, r18

    if(!size)
   116ce:	67 2b       	or	r22, r23
   116d0:	21 f0       	breq	.+8      	; 0x116da <gpib_read_str+0x28>
   116d2:	7c 01       	movw	r14, r24
   116d4:	00 e0       	ldi	r16, 0x00	; 0
   116d6:	10 e0       	ldi	r17, 0x00	; 0
   116d8:	28 c0       	rjmp	.+80     	; 0x1172a <gpib_read_str+0x78>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   116da:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   116de:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   116e2:	81 72       	andi	r24, 0x21	; 33
   116e4:	91 70       	andi	r25, 0x01	; 1
   116e6:	89 2b       	or	r24, r25
   116e8:	09 f4       	brne	.+2      	; 0x116ec <gpib_read_str+0x3a>
   116ea:	7c c0       	rjmp	.+248    	; 0x117e4 <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   116ec:	87 ed       	ldi	r24, 0xD7	; 215
   116ee:	9f e0       	ldi	r25, 0x0F	; 15
   116f0:	a0 e0       	ldi	r26, 0x00	; 0
   116f2:	ed b7       	in	r30, 0x3d	; 61
   116f4:	fe b7       	in	r31, 0x3e	; 62
   116f6:	81 83       	std	Z+1, r24	; 0x01
   116f8:	92 83       	std	Z+2, r25	; 0x02
   116fa:	a3 83       	std	Z+3, r26	; 0x03
   116fc:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   11700:	71 c0       	rjmp	.+226    	; 0x117e4 <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   11702:	8c 27       	eor	r24, r28
   11704:	9d 27       	eor	r25, r29
   11706:	92 fd       	sbrc	r25, 2
   11708:	2e c0       	rjmp	.+92     	; 0x11766 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   1170a:	ce 01       	movw	r24, r28
   1170c:	88 27       	eor	r24, r24
   1170e:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   11710:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11712:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   11714:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   11716:	f7 01       	movw	r30, r14
   11718:	20 83       	st	Z, r18
        ++ind;
   1171a:	0f 5f       	subi	r16, 0xFF	; 255
   1171c:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   1171e:	89 2b       	or	r24, r25
   11720:	09 f4       	brne	.+2      	; 0x11724 <gpib_read_str+0x72>
   11722:	3c c0       	rjmp	.+120    	; 0x1179c <gpib_read_str+0xea>
   11724:	ff ef       	ldi	r31, 0xFF	; 255
   11726:	ef 1a       	sub	r14, r31
   11728:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   1172a:	0a 15       	cp	r16, r10
   1172c:	1b 05       	cpc	r17, r11
   1172e:	0c f0       	brlt	.+2      	; 0x11732 <gpib_read_str+0x80>
   11730:	3f c0       	rjmp	.+126    	; 0x117b0 <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   11732:	80 e0       	ldi	r24, 0x00	; 0
   11734:	90 e0       	ldi	r25, 0x00	; 0
   11736:	b3 de       	rcall	.-666    	; 0x1149e <gpib_read_byte>
   11738:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   1173a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1173e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11742:	90 ff       	sbrs	r25, 0
   11744:	02 c0       	rjmp	.+4      	; 0x1174a <gpib_read_str+0x98>
            gpib_decode(val);
   11746:	ce 01       	movw	r24, r28
   11748:	b0 df       	rcall	.-160    	; 0x116aa <gpib_decode>
#endif
        if(val & ERROR_MASK)
   1174a:	9e 01       	movw	r18, r28
   1174c:	22 27       	eor	r18, r18
   1174e:	30 7d       	andi	r19, 0xD0	; 208
   11750:	f6 01       	movw	r30, r12
   11752:	80 81       	ld	r24, Z
   11754:	91 81       	ldd	r25, Z+1	; 0x01
   11756:	21 15       	cp	r18, r1
   11758:	31 05       	cpc	r19, r1
   1175a:	99 f2       	breq	.-90     	; 0x11702 <gpib_read_str+0x50>
        {
            *status |= (val & ERROR_MASK);
   1175c:	82 2b       	or	r24, r18
   1175e:	93 2b       	or	r25, r19
   11760:	91 83       	std	Z+1, r25	; 0x01
   11762:	80 83       	st	Z, r24
            break;
   11764:	28 c0       	rjmp	.+80     	; 0x117b6 <gpib_read_str+0x104>
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11766:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1176a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1176e:	81 72       	andi	r24, 0x21	; 33
   11770:	91 70       	andi	r25, 0x01	; 1
   11772:	89 2b       	or	r24, r25
   11774:	81 f0       	breq	.+32     	; 0x11796 <gpib_read_str+0xe4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   11776:	ce 01       	movw	r24, r28
   11778:	99 27       	eor	r25, r25
   1177a:	ed b7       	in	r30, 0x3d	; 61
   1177c:	fe b7       	in	r31, 0x3e	; 62
   1177e:	97 83       	std	Z+7, r25	; 0x07
   11780:	86 83       	std	Z+6, r24	; 0x06
   11782:	15 83       	std	Z+5, r17	; 0x05
   11784:	04 83       	std	Z+4, r16	; 0x04
   11786:	8a ea       	ldi	r24, 0xAA	; 170
   11788:	9f e0       	ldi	r25, 0x0F	; 15
   1178a:	a0 e0       	ldi	r26, 0x00	; 0
   1178c:	81 83       	std	Z+1, r24	; 0x01
   1178e:	92 83       	std	Z+2, r25	; 0x02
   11790:	a3 83       	std	Z+3, r26	; 0x03
   11792:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            gpib_unread(val);
   11796:	ce 01       	movw	r24, r28
   11798:	6a db       	rcall	.-2348   	; 0x10e6e <gpib_unread>
            break;
   1179a:	0d c0       	rjmp	.+26     	; 0x117b6 <gpib_read_str+0x104>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   1179c:	d0 ff       	sbrs	r29, 0
   1179e:	c2 cf       	rjmp	.-124    	; 0x11724 <gpib_read_str+0x72>
        {

            if(*status & EOI_FLAG)
   117a0:	f6 01       	movw	r30, r12
   117a2:	80 81       	ld	r24, Z
   117a4:	91 81       	ldd	r25, Z+1	; 0x01
   117a6:	90 fd       	sbrc	r25, 0
   117a8:	1f c0       	rjmp	.+62     	; 0x117e8 <gpib_read_str+0x136>
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   117aa:	91 60       	ori	r25, 0x01	; 1
   117ac:	91 83       	std	Z+1, r25	; 0x01
   117ae:	80 83       	st	Z, r24
            break;
        }
    }
    if ( ind != size ) 
   117b0:	0a 15       	cp	r16, r10
   117b2:	1b 05       	cpc	r17, r11
   117b4:	c9 f0       	breq	.+50     	; 0x117e8 <gpib_read_str+0x136>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   117b6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   117ba:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   117be:	81 72       	andi	r24, 0x21	; 33
   117c0:	99 27       	eor	r25, r25
   117c2:	89 2b       	or	r24, r25
   117c4:	89 f0       	breq	.+34     	; 0x117e8 <gpib_read_str+0x136>
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   117c6:	ed b7       	in	r30, 0x3d	; 61
   117c8:	fe b7       	in	r31, 0x3e	; 62
   117ca:	b7 82       	std	Z+7, r11	; 0x07
   117cc:	a6 82       	std	Z+6, r10	; 0x06
   117ce:	15 83       	std	Z+5, r17	; 0x05
   117d0:	04 83       	std	Z+4, r16	; 0x04
   117d2:	83 e8       	ldi	r24, 0x83	; 131
   117d4:	9f e0       	ldi	r25, 0x0F	; 15
   117d6:	a0 e0       	ldi	r26, 0x00	; 0
   117d8:	81 83       	std	Z+1, r24	; 0x01
   117da:	92 83       	std	Z+2, r25	; 0x02
   117dc:	a3 83       	std	Z+3, r26	; 0x03
   117de:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   117e2:	02 c0       	rjmp	.+4      	; 0x117e8 <gpib_read_str+0x136>
   117e4:	00 e0       	ldi	r16, 0x00	; 0
   117e6:	10 e0       	ldi	r17, 0x00	; 0
    }
    return(ind);
}
   117e8:	c8 01       	movw	r24, r16
   117ea:	cd b7       	in	r28, 0x3d	; 61
   117ec:	de b7       	in	r29, 0x3e	; 62
   117ee:	27 96       	adiw	r28, 0x07	; 7
   117f0:	ea e0       	ldi	r30, 0x0A	; 10
   117f2:	0c 94 b7 e7 	jmp	0x1cf6e	; 0x1cf6e <__epilogue_restores__+0x10>

000117f6 <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   117f6:	a7 e0       	ldi	r26, 0x07	; 7
   117f8:	b0 e0       	ldi	r27, 0x00	; 0
   117fa:	e1 e0       	ldi	r30, 0x01	; 1
   117fc:	fc e8       	ldi	r31, 0x8C	; 140
   117fe:	0c 94 9b e7 	jmp	0x1cf36	; 0x1cf36 <__prologue_saves__+0x10>
   11802:	d8 2f       	mov	r29, r24
   11804:	c9 2f       	mov	r28, r25
   11806:	7b 01       	movw	r14, r22
   11808:	8a 01       	movw	r16, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   1180a:	fa 01       	movw	r30, r20
   1180c:	80 81       	ld	r24, Z
   1180e:	91 81       	ldd	r25, Z+1	; 0x01
   11810:	88 27       	eor	r24, r24
   11812:	91 83       	std	Z+1, r25	; 0x01
   11814:	80 83       	st	Z, r24

    if(!size)
   11816:	67 2b       	or	r22, r23
   11818:	91 f4       	brne	.+36     	; 0x1183e <gpib_write_str+0x48>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1181a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1181e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11822:	81 72       	andi	r24, 0x21	; 33
   11824:	91 70       	andi	r25, 0x01	; 1
   11826:	89 2b       	or	r24, r25
   11828:	51 f0       	breq	.+20     	; 0x1183e <gpib_write_str+0x48>
            printf("gpib_write_str: size = 0\n");
   1182a:	89 e6       	ldi	r24, 0x69	; 105
   1182c:	9f e0       	ldi	r25, 0x0F	; 15
   1182e:	a0 e0       	ldi	r26, 0x00	; 0
   11830:	ed b7       	in	r30, 0x3d	; 61
   11832:	fe b7       	in	r31, 0x3e	; 62
   11834:	81 83       	std	Z+1, r24	; 0x01
   11836:	92 83       	std	Z+2, r25	; 0x02
   11838:	a3 83       	std	Z+3, r26	; 0x03
   1183a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    }

	// Start with NRFD and NDAC = 1 - ie off the OC BUS
	gpib_rx_init(0);
   1183e:	80 e0       	ldi	r24, 0x00	; 0
   11840:	4d da       	rcall	.-2918   	; 0x10cdc <gpib_rx_init>

// Wait until ATN is released!
#if 1
    if (GPIB_PIN_TST(ATN) == 0)
   11842:	4e 9b       	sbis	0x09, 6	; 9
   11844:	06 c0       	rjmp	.+12     	; 0x11852 <gpib_write_str+0x5c>
#endif

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
   11846:	64 ef       	ldi	r22, 0xF4	; 244
   11848:	71 e0       	ldi	r23, 0x01	; 1
   1184a:	80 e0       	ldi	r24, 0x00	; 0
   1184c:	90 e0       	ldi	r25, 0x00	; 0
   1184e:	04 da       	rcall	.-3064   	; 0x10c58 <gpib_timeout_set>
	while ( GPIB_PIN_TST(DAV) == 0)
   11850:	18 c0       	rjmp	.+48     	; 0x11882 <gpib_write_str+0x8c>
#endif
		// Wait for ATN free
		// Keep in mind that we have been addressed to talk already
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
   11852:	64 ef       	ldi	r22, 0xF4	; 244
   11854:	71 e0       	ldi	r23, 0x01	; 1
   11856:	80 e0       	ldi	r24, 0x00	; 0
   11858:	90 e0       	ldi	r25, 0x00	; 0
   1185a:	fe d9       	rcall	.-3076   	; 0x10c58 <gpib_timeout_set>
		while(GPIB_PIN_TST(ATN) == 0)
   1185c:	4e 99       	sbic	0x09, 6	; 9
   1185e:	f3 cf       	rjmp	.-26     	; 0x11846 <gpib_write_str+0x50>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11860:	80 91 dd 1c 	lds	r24, 0x1CDD	; 0x801cdd <gpib_timer+0x8>
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
		while(GPIB_PIN_TST(ATN) == 0)
		{
			if(gpib_timeout_test())
   11864:	88 23       	and	r24, r24
			{
				gpib_rx_init(1);
   11866:	d1 f3       	breq	.-12     	; 0x1185c <gpib_write_str+0x66>
   11868:	81 e0       	ldi	r24, 0x01	; 1
   1186a:	38 da       	rcall	.-2960   	; 0x10cdc <gpib_rx_init>
				if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   1186c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11870:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11874:	85 70       	andi	r24, 0x05	; 5
   11876:	99 27       	eor	r25, r25
   11878:	89 2b       	or	r24, r25
   1187a:	d9 f0       	breq	.+54     	; 0x118b2 <gpib_write_str+0xbc>
					printf("<gpib_write_str timeout waiting for ATN = 1>\n");
   1187c:	8b e3       	ldi	r24, 0x3B	; 59
   1187e:	9f e0       	ldi	r25, 0x0F	; 15
   11880:	10 c0       	rjmp	.+32     	; 0x118a2 <gpib_write_str+0xac>

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   11882:	19 99       	sbic	0x03, 1	; 3
   11884:	1f c0       	rjmp	.+62     	; 0x118c4 <gpib_write_str+0xce>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11886:	80 91 dd 1c 	lds	r24, 0x1CDD	; 0x801cdd <gpib_timer+0x8>
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
	{
		if(gpib_timeout_test())
   1188a:	88 23       	and	r24, r24
   1188c:	d1 f3       	breq	.-12     	; 0x11882 <gpib_write_str+0x8c>
		{
			if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   1188e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11892:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11896:	85 70       	andi	r24, 0x05	; 5
   11898:	99 27       	eor	r25, r25
   1189a:	89 2b       	or	r24, r25
   1189c:	51 f0       	breq	.+20     	; 0x118b2 <gpib_write_str+0xbc>
				printf("<BUS waiting for DAV==1>\n");
   1189e:	81 e2       	ldi	r24, 0x21	; 33
   118a0:	9f e0       	ldi	r25, 0x0F	; 15
   118a2:	a0 e0       	ldi	r26, 0x00	; 0
   118a4:	ed b7       	in	r30, 0x3d	; 61
   118a6:	fe b7       	in	r31, 0x3e	; 62
   118a8:	81 83       	std	Z+1, r24	; 0x01
   118aa:	92 83       	std	Z+2, r25	; 0x02
   118ac:	a3 83       	std	Z+3, r26	; 0x03
   118ae:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
			*status |= (TIMEOUT_FLAG | BUS_ERROR_FLAG);
   118b2:	f8 01       	movw	r30, r16
   118b4:	80 81       	ld	r24, Z
   118b6:	91 81       	ldd	r25, Z+1	; 0x01
   118b8:	90 6c       	ori	r25, 0xC0	; 192
   118ba:	91 83       	std	Z+1, r25	; 0x01
   118bc:	80 83       	st	Z, r24
			return(ind);
   118be:	c0 e0       	ldi	r28, 0x00	; 0
   118c0:	d0 e0       	ldi	r29, 0x00	; 0
   118c2:	45 c0       	rjmp	.+138    	; 0x1194e <gpib_write_str+0x158>
   118c4:	cd 2e       	mov	r12, r29
   118c6:	dc 2e       	mov	r13, r28

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   118c8:	c0 e0       	ldi	r28, 0x00	; 0
   118ca:	d0 e0       	ldi	r29, 0x00	; 0
			return(ind);
		}
	}
#endif

    while(ind < size)
   118cc:	ce 15       	cp	r28, r14
   118ce:	df 05       	cpc	r29, r15
   118d0:	1c f5       	brge	.+70     	; 0x11918 <gpib_write_str+0x122>
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   118d2:	21 96       	adiw	r28, 0x01	; 1
   118d4:	f6 01       	movw	r30, r12
   118d6:	81 91       	ld	r24, Z+
   118d8:	6f 01       	movw	r12, r30
   118da:	90 e0       	ldi	r25, 0x00	; 0

        if( (*status & EOI_FLAG) && (ind == size ) )
   118dc:	f8 01       	movw	r30, r16
   118de:	20 81       	ld	r18, Z
   118e0:	31 81       	ldd	r19, Z+1	; 0x01
   118e2:	30 ff       	sbrs	r19, 0
   118e4:	04 c0       	rjmp	.+8      	; 0x118ee <gpib_write_str+0xf8>
   118e6:	ec 16       	cp	r14, r28
   118e8:	fd 06       	cpc	r15, r29
            ch |= EOI_FLAG;
   118ea:	09 f4       	brne	.+2      	; 0x118ee <gpib_write_str+0xf8>

/// @return Returns

        val = gpib_write_byte(ch);
   118ec:	91 60       	ori	r25, 0x01	; 1
   118ee:	0b db       	rcall	.-2538   	; 0x10f06 <gpib_write_byte>
        *status |= (val & ERROR_MASK);
   118f0:	5c 01       	movw	r10, r24
   118f2:	aa 24       	eor	r10, r10
   118f4:	f0 ed       	ldi	r31, 0xD0	; 208
   118f6:	bf 22       	and	r11, r31
   118f8:	f8 01       	movw	r30, r16
   118fa:	20 81       	ld	r18, Z
   118fc:	31 81       	ldd	r19, Z+1	; 0x01
   118fe:	2a 29       	or	r18, r10
   11900:	3b 29       	or	r19, r11
   11902:	31 83       	std	Z+1, r19	; 0x01
   11904:	20 83       	st	Z, r18

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   11906:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1190a:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
            gpib_decode(val);
   1190e:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   11910:	cc de       	rcall	.-616    	; 0x116aa <gpib_decode>
   11912:	a1 14       	cp	r10, r1
   11914:	b1 04       	cpc	r11, r1

    }                                             // while(ind < size)

// End by setting receive mode and set NRFD and NDAC busy until
// we get back to the main loop (this happens very quickly
	gpib_rx_init(1);	// BUSY
   11916:	d1 f2       	breq	.-76     	; 0x118cc <gpib_write_str+0xd6>
   11918:	81 e0       	ldi	r24, 0x01	; 1
   1191a:	e0 d9       	rcall	.-3136   	; 0x10cdc <gpib_rx_init>

    if ( ind != size )
   1191c:	ce 15       	cp	r28, r14
   1191e:	df 05       	cpc	r29, r15
   11920:	b1 f0       	breq	.+44     	; 0x1194e <gpib_write_str+0x158>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11922:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11926:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1192a:	81 72       	andi	r24, 0x21	; 33
   1192c:	91 70       	andi	r25, 0x01	; 1
   1192e:	89 2b       	or	r24, r25
   11930:	71 f0       	breq	.+28     	; 0x1194e <gpib_write_str+0x158>
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   11932:	ed b7       	in	r30, 0x3d	; 61
   11934:	fe b7       	in	r31, 0x3e	; 62
   11936:	f7 82       	std	Z+7, r15	; 0x07
   11938:	e6 82       	std	Z+6, r14	; 0x06
   1193a:	d5 83       	std	Z+5, r29	; 0x05
   1193c:	c4 83       	std	Z+4, r28	; 0x04
   1193e:	89 ef       	ldi	r24, 0xF9	; 249
   11940:	9e e0       	ldi	r25, 0x0E	; 14
   11942:	a0 e0       	ldi	r26, 0x00	; 0
   11944:	81 83       	std	Z+1, r24	; 0x01
   11946:	92 83       	std	Z+2, r25	; 0x02
   11948:	a3 83       	std	Z+3, r26	; 0x03
   1194a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    }
    return(ind);
}
   1194e:	ce 01       	movw	r24, r28
   11950:	cd b7       	in	r28, 0x3d	; 61
   11952:	de b7       	in	r29, 0x3e	; 62
   11954:	27 96       	adiw	r28, 0x07	; 7
   11956:	ea e0       	ldi	r30, 0x0A	; 10
   11958:	0c 94 b7 e7 	jmp	0x1cf6e	; 0x1cf6e <__epilogue_restores__+0x10>

0001195c <gpib_file_init>:
{
    int index = find_device(PRINTER_TYPE, address, BASE_MSA);
    if(index == -1)
        return(0);
    return(set_active_device(index));
}
   1195c:	ad b7       	in	r26, 0x3d	; 61
   1195e:	be b7       	in	r27, 0x3e	; 62
   11960:	17 97       	sbiw	r26, 0x07	; 7
   11962:	0f b6       	in	r0, 0x3f	; 63
   11964:	f8 94       	cli
   11966:	be bf       	out	0x3e, r27	; 62
   11968:	0f be       	out	0x3f, r0	; 63
   1196a:	ad bf       	out	0x3d, r26	; 61
   1196c:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <debuglevel+0x1>
   11970:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <debuglevel>
   11974:	88 eb       	ldi	r24, 0xB8	; 184
   11976:	91 e0       	ldi	r25, 0x01	; 1
   11978:	0e 94 50 9e 	call	0x13ca0	; 0x13ca0 <Read_Config>
   1197c:	18 16       	cp	r1, r24
   1197e:	19 06       	cpc	r1, r25
   11980:	8c f4       	brge	.+34     	; 0x119a4 <gpib_file_init+0x48>
   11982:	ed b7       	in	r30, 0x3d	; 61
   11984:	fe b7       	in	r31, 0x3e	; 62
   11986:	97 83       	std	Z+7, r25	; 0x07
   11988:	86 83       	std	Z+6, r24	; 0x06
   1198a:	88 eb       	ldi	r24, 0xB8	; 184
   1198c:	91 e0       	ldi	r25, 0x01	; 1
   1198e:	95 83       	std	Z+5, r25	; 0x05
   11990:	84 83       	std	Z+4, r24	; 0x04
   11992:	8d ec       	ldi	r24, 0xCD	; 205
   11994:	94 e1       	ldi	r25, 0x14	; 20
   11996:	a0 e0       	ldi	r26, 0x00	; 0
   11998:	81 83       	std	Z+1, r24	; 0x01
   1199a:	92 83       	std	Z+2, r25	; 0x02
   1199c:	a3 83       	std	Z+3, r26	; 0x03
   1199e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   119a2:	10 c0       	rjmp	.+32     	; 0x119c4 <gpib_file_init+0x68>
   119a4:	89 2b       	or	r24, r25
   119a6:	71 f0       	breq	.+28     	; 0x119c4 <gpib_file_init+0x68>
   119a8:	88 eb       	ldi	r24, 0xB8	; 184
   119aa:	91 e0       	ldi	r25, 0x01	; 1
   119ac:	ed b7       	in	r30, 0x3d	; 61
   119ae:	fe b7       	in	r31, 0x3e	; 62
   119b0:	95 83       	std	Z+5, r25	; 0x05
   119b2:	84 83       	std	Z+4, r24	; 0x04
   119b4:	8c eb       	ldi	r24, 0xBC	; 188
   119b6:	94 e1       	ldi	r25, 0x14	; 20
   119b8:	a0 e0       	ldi	r26, 0x00	; 0
   119ba:	81 83       	std	Z+1, r24	; 0x01
   119bc:	92 83       	std	Z+2, r25	; 0x02
   119be:	a3 83       	std	Z+3, r26	; 0x03
   119c0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   119c4:	0e 94 58 9a 	call	0x134b0	; 0x134b0 <set_Config_Defaults>
   119c8:	0e 94 61 70 	call	0xe0c2	; 0xe0c2 <mmc_wp_status>
   119cc:	89 2b       	or	r24, r25
   119ce:	51 f0       	breq	.+20     	; 0x119e4 <gpib_file_init+0x88>
   119d0:	83 ea       	ldi	r24, 0xA3	; 163
   119d2:	94 e1       	ldi	r25, 0x14	; 20
   119d4:	a0 e0       	ldi	r26, 0x00	; 0
   119d6:	ed b7       	in	r30, 0x3d	; 61
   119d8:	fe b7       	in	r31, 0x3e	; 62
   119da:	81 83       	std	Z+1, r24	; 0x01
   119dc:	92 83       	std	Z+2, r25	; 0x02
   119de:	a3 83       	std	Z+3, r26	; 0x03
   119e0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   119e4:	ad b7       	in	r26, 0x3d	; 61
   119e6:	be b7       	in	r27, 0x3e	; 62
   119e8:	17 96       	adiw	r26, 0x07	; 7
   119ea:	0f b6       	in	r0, 0x3f	; 63
   119ec:	f8 94       	cli
   119ee:	be bf       	out	0x3e, r27	; 62
   119f0:	0f be       	out	0x3f, r0	; 63
   119f2:	ad bf       	out	0x3d, r26	; 61
   119f4:	08 95       	ret

000119f6 <SS80_is_MLA>:
   119f6:	40 e2       	ldi	r20, 0x20	; 32
   119f8:	50 e0       	ldi	r21, 0x00	; 0
   119fa:	bc 01       	movw	r22, r24
   119fc:	83 e0       	ldi	r24, 0x03	; 3
   119fe:	90 e0       	ldi	r25, 0x00	; 0
   11a00:	0e 94 90 97 	call	0x12f20	; 0x12f20 <find_device>
   11a04:	8f 3f       	cpi	r24, 0xFF	; 255
   11a06:	31 f0       	breq	.+12     	; 0x11a14 <SS80_is_MLA+0x1e>
   11a08:	0e 94 b9 97 	call	0x12f72	; 0x12f72 <set_active_device>
   11a0c:	08 2e       	mov	r0, r24
   11a0e:	00 0c       	add	r0, r0
   11a10:	99 0b       	sbc	r25, r25
   11a12:	08 95       	ret
   11a14:	80 e0       	ldi	r24, 0x00	; 0
   11a16:	90 e0       	ldi	r25, 0x00	; 0
   11a18:	08 95       	ret

00011a1a <SS80_is_MTA>:
   11a1a:	40 e4       	ldi	r20, 0x40	; 64
   11a1c:	50 e0       	ldi	r21, 0x00	; 0
   11a1e:	bc 01       	movw	r22, r24
   11a20:	83 e0       	ldi	r24, 0x03	; 3
   11a22:	90 e0       	ldi	r25, 0x00	; 0
   11a24:	0e 94 90 97 	call	0x12f20	; 0x12f20 <find_device>
   11a28:	8f 3f       	cpi	r24, 0xFF	; 255
   11a2a:	31 f0       	breq	.+12     	; 0x11a38 <SS80_is_MTA+0x1e>
   11a2c:	0e 94 b9 97 	call	0x12f72	; 0x12f72 <set_active_device>
   11a30:	08 2e       	mov	r0, r24
   11a32:	00 0c       	add	r0, r0
   11a34:	99 0b       	sbc	r25, r25
   11a36:	08 95       	ret
   11a38:	80 e0       	ldi	r24, 0x00	; 0
   11a3a:	90 e0       	ldi	r25, 0x00	; 0
   11a3c:	08 95       	ret

00011a3e <SS80_is_MSA>:
   11a3e:	40 e6       	ldi	r20, 0x60	; 96
   11a40:	50 e0       	ldi	r21, 0x00	; 0
   11a42:	bc 01       	movw	r22, r24
   11a44:	83 e0       	ldi	r24, 0x03	; 3
   11a46:	90 e0       	ldi	r25, 0x00	; 0
   11a48:	0e 94 90 97 	call	0x12f20	; 0x12f20 <find_device>
   11a4c:	8f 3f       	cpi	r24, 0xFF	; 255
   11a4e:	31 f0       	breq	.+12     	; 0x11a5c <SS80_is_MSA+0x1e>
   11a50:	0e 94 b9 97 	call	0x12f72	; 0x12f72 <set_active_device>
   11a54:	08 2e       	mov	r0, r24
   11a56:	00 0c       	add	r0, r0
   11a58:	99 0b       	sbc	r25, r25
   11a5a:	08 95       	ret
   11a5c:	80 e0       	ldi	r24, 0x00	; 0
   11a5e:	90 e0       	ldi	r25, 0x00	; 0
   11a60:	08 95       	ret

00011a62 <AMIGO_is_MLA>:
   11a62:	40 e2       	ldi	r20, 0x20	; 32
   11a64:	50 e0       	ldi	r21, 0x00	; 0
   11a66:	bc 01       	movw	r22, r24
   11a68:	81 e0       	ldi	r24, 0x01	; 1
   11a6a:	90 e0       	ldi	r25, 0x00	; 0
   11a6c:	0e 94 90 97 	call	0x12f20	; 0x12f20 <find_device>
   11a70:	8f 3f       	cpi	r24, 0xFF	; 255
   11a72:	31 f0       	breq	.+12     	; 0x11a80 <AMIGO_is_MLA+0x1e>
   11a74:	0e 94 b9 97 	call	0x12f72	; 0x12f72 <set_active_device>
   11a78:	08 2e       	mov	r0, r24
   11a7a:	00 0c       	add	r0, r0
   11a7c:	99 0b       	sbc	r25, r25
   11a7e:	08 95       	ret
   11a80:	80 e0       	ldi	r24, 0x00	; 0
   11a82:	90 e0       	ldi	r25, 0x00	; 0
   11a84:	08 95       	ret

00011a86 <AMIGO_is_MTA>:
   11a86:	40 e4       	ldi	r20, 0x40	; 64
   11a88:	50 e0       	ldi	r21, 0x00	; 0
   11a8a:	bc 01       	movw	r22, r24
   11a8c:	81 e0       	ldi	r24, 0x01	; 1
   11a8e:	90 e0       	ldi	r25, 0x00	; 0
   11a90:	0e 94 90 97 	call	0x12f20	; 0x12f20 <find_device>
   11a94:	8f 3f       	cpi	r24, 0xFF	; 255
   11a96:	31 f0       	breq	.+12     	; 0x11aa4 <AMIGO_is_MTA+0x1e>
   11a98:	0e 94 b9 97 	call	0x12f72	; 0x12f72 <set_active_device>
   11a9c:	08 2e       	mov	r0, r24
   11a9e:	00 0c       	add	r0, r0
   11aa0:	99 0b       	sbc	r25, r25
   11aa2:	08 95       	ret
   11aa4:	80 e0       	ldi	r24, 0x00	; 0
   11aa6:	90 e0       	ldi	r25, 0x00	; 0
   11aa8:	08 95       	ret

00011aaa <AMIGO_is_MSA>:
   11aaa:	40 e6       	ldi	r20, 0x60	; 96
   11aac:	50 e0       	ldi	r21, 0x00	; 0
   11aae:	bc 01       	movw	r22, r24
   11ab0:	81 e0       	ldi	r24, 0x01	; 1
   11ab2:	90 e0       	ldi	r25, 0x00	; 0
   11ab4:	0e 94 90 97 	call	0x12f20	; 0x12f20 <find_device>
   11ab8:	8f 3f       	cpi	r24, 0xFF	; 255
   11aba:	31 f0       	breq	.+12     	; 0x11ac8 <AMIGO_is_MSA+0x1e>
   11abc:	0e 94 b9 97 	call	0x12f72	; 0x12f72 <set_active_device>
   11ac0:	08 2e       	mov	r0, r24
   11ac2:	00 0c       	add	r0, r0
   11ac4:	99 0b       	sbc	r25, r25
   11ac6:	08 95       	ret
   11ac8:	80 e0       	ldi	r24, 0x00	; 0
   11aca:	90 e0       	ldi	r25, 0x00	; 0
   11acc:	08 95       	ret

00011ace <PRINTER_is_MLA>:
   11ace:	40 e2       	ldi	r20, 0x20	; 32
   11ad0:	50 e0       	ldi	r21, 0x00	; 0
   11ad2:	bc 01       	movw	r22, r24
   11ad4:	84 e0       	ldi	r24, 0x04	; 4
   11ad6:	90 e0       	ldi	r25, 0x00	; 0
   11ad8:	0e 94 90 97 	call	0x12f20	; 0x12f20 <find_device>
   11adc:	8f 3f       	cpi	r24, 0xFF	; 255
   11ade:	31 f0       	breq	.+12     	; 0x11aec <PRINTER_is_MLA+0x1e>
   11ae0:	0e 94 b9 97 	call	0x12f72	; 0x12f72 <set_active_device>
   11ae4:	08 2e       	mov	r0, r24
   11ae6:	00 0c       	add	r0, r0
   11ae8:	99 0b       	sbc	r25, r25
   11aea:	08 95       	ret
   11aec:	80 e0       	ldi	r24, 0x00	; 0
   11aee:	90 e0       	ldi	r25, 0x00	; 0
   11af0:	08 95       	ret

00011af2 <PRINTER_is_MTA>:
   11af2:	40 e4       	ldi	r20, 0x40	; 64
   11af4:	50 e0       	ldi	r21, 0x00	; 0
   11af6:	bc 01       	movw	r22, r24
   11af8:	84 e0       	ldi	r24, 0x04	; 4
   11afa:	90 e0       	ldi	r25, 0x00	; 0
   11afc:	0e 94 90 97 	call	0x12f20	; 0x12f20 <find_device>
   11b00:	8f 3f       	cpi	r24, 0xFF	; 255
   11b02:	31 f0       	breq	.+12     	; 0x11b10 <PRINTER_is_MTA+0x1e>
   11b04:	0e 94 b9 97 	call	0x12f72	; 0x12f72 <set_active_device>
   11b08:	08 2e       	mov	r0, r24
   11b0a:	00 0c       	add	r0, r0
   11b0c:	99 0b       	sbc	r25, r25
   11b0e:	08 95       	ret
   11b10:	80 e0       	ldi	r24, 0x00	; 0
   11b12:	90 e0       	ldi	r25, 0x00	; 0
   11b14:	08 95       	ret

00011b16 <gpib_init_devices>:
///
/// - Used at power up, Bus IFC or user aborts
/// @return  void
void gpib_init_devices(void)
{
    gpib_bus_init();                              // Not busy - we have to free all pins on the BUS
   11b16:	aa d8       	rcall	.-3756   	; 0x10c6c <gpib_bus_init>

// Init PPR talking and listening states
// Enable this 14 April 2020 - testing MIke Gore
    gpib_state_init();
   11b18:	11 d9       	rcall	.-3550   	; 0x10d3c <gpib_state_init>
   11b1a:	0e 94 4b ae 	call	0x15c96	; 0x15c96 <SS80_init>

    SS80_init();                                  // SS80 state init
   11b1e:	0e 94 e0 b3 	call	0x167c0	; 0x167c0 <amigo_init>

#ifdef AMIGO
    amigo_init();                                 // AMIGO state init
   11b22:	0c 94 0b bf 	jmp	0x17e16	; 0x17e16 <printer_close>
#endif

    printer_close();                              // Close any open fprinter files
   11b26:	08 95       	ret

00011b28 <gpib_trace_task>:
   11b28:	0f 93       	push	r16
/// @param name: File name to save log file to.
/// @return  void
///   Exit on Key Press

void gpib_trace_task( char *name , int detail)
{
   11b2a:	1f 93       	push	r17
   11b2c:	cf 93       	push	r28
   11b2e:	df 93       	push	r29
   11b30:	00 d0       	rcall	.+0      	; 0x11b32 <gpib_trace_task+0xa>
   11b32:	00 d0       	rcall	.+0      	; 0x11b34 <gpib_trace_task+0xc>
   11b34:	1f 92       	push	r1
   11b36:	eb 01       	movw	r28, r22
    int ch;

    if(name && *name)
   11b38:	00 97       	sbiw	r24, 0x00	; 0
   11b3a:	09 f4       	brne	.+2      	; 0x11b3e <gpib_trace_task+0x16>
   11b3c:	44 c0       	rjmp	.+136    	; 0x11bc6 <gpib_trace_task+0x9e>
   11b3e:	fc 01       	movw	r30, r24
   11b40:	20 81       	ld	r18, Z
   11b42:	22 23       	and	r18, r18
   11b44:	09 f4       	brne	.+2      	; 0x11b48 <gpib_trace_task+0x20>
   11b46:	3f c0       	rjmp	.+126    	; 0x11bc6 <gpib_trace_task+0x9e>
    {
        name = skipspaces(name);
   11b48:	0e 94 a0 32 	call	0x6540	; 0x6540 <skipspaces>
   11b4c:	8c 01       	movw	r16, r24
        printf("Capturing GPIB BUS to:%s\n", name);
   11b4e:	ed b7       	in	r30, 0x3d	; 61
   11b50:	fe b7       	in	r31, 0x3e	; 62
   11b52:	95 83       	std	Z+5, r25	; 0x05
   11b54:	84 83       	std	Z+4, r24	; 0x04
   11b56:	89 e8       	ldi	r24, 0x89	; 137
   11b58:	94 e1       	ldi	r25, 0x14	; 20
   11b5a:	a0 e0       	ldi	r26, 0x00	; 0
   11b5c:	81 83       	std	Z+1, r24	; 0x01
   11b5e:	92 83       	std	Z+2, r25	; 0x02
   11b60:	a3 83       	std	Z+3, r26	; 0x03
   11b62:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        if(detail)
   11b66:	20 97       	sbiw	r28, 0x00	; 0
   11b68:	51 f0       	breq	.+20     	; 0x11b7e <gpib_trace_task+0x56>
            printf("FULL GPIB BUS handshake logging requested\n");
   11b6a:	8e e5       	ldi	r24, 0x5E	; 94
   11b6c:	94 e1       	ldi	r25, 0x14	; 20
   11b6e:	a0 e0       	ldi	r26, 0x00	; 0
   11b70:	ed b7       	in	r30, 0x3d	; 61
   11b72:	fe b7       	in	r31, 0x3e	; 62
   11b74:	81 83       	std	Z+1, r24	; 0x01
   11b76:	92 83       	std	Z+2, r25	; 0x02
   11b78:	a3 83       	std	Z+3, r26	; 0x03
   11b7a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        printf("Press ANY key to exit\n");
   11b7e:	87 e4       	ldi	r24, 0x47	; 71
   11b80:	94 e1       	ldi	r25, 0x14	; 20
   11b82:	a0 e0       	ldi	r26, 0x00	; 0
   11b84:	ed b7       	in	r30, 0x3d	; 61
   11b86:	fe b7       	in	r31, 0x3e	; 62
   11b88:	81 83       	std	Z+1, r24	; 0x01
   11b8a:	92 83       	std	Z+2, r25	; 0x02
   11b8c:	a3 83       	std	Z+3, r26	; 0x03
   11b8e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

        gpib_log_fp = fopen(name,"wb");
   11b92:	6a ef       	ldi	r22, 0xFA	; 250
   11b94:	78 e0       	ldi	r23, 0x08	; 8
   11b96:	c8 01       	movw	r24, r16
   11b98:	0e 94 c9 7e 	call	0xfd92	; 0xfd92 <fopen>
   11b9c:	90 93 57 19 	sts	0x1957, r25	; 0x801957 <gpib_log_fp+0x1>
   11ba0:	80 93 56 19 	sts	0x1956, r24	; 0x801956 <gpib_log_fp>
        if(gpib_log_fp == NULL)
   11ba4:	89 2b       	or	r24, r25
   11ba6:	b9 f4       	brne	.+46     	; 0x11bd6 <gpib_trace_task+0xae>
        {
            perror("open failed");
   11ba8:	88 e8       	ldi	r24, 0x88	; 136
   11baa:	9d e0       	ldi	r25, 0x0D	; 13
   11bac:	0e 94 fa 78 	call	0xf1f4	; 0xf1f4 <perror>
            printf("exiting...\n");
   11bb0:	8b e3       	ldi	r24, 0x3B	; 59
   11bb2:	94 e1       	ldi	r25, 0x14	; 20
   11bb4:	a0 e0       	ldi	r26, 0x00	; 0
   11bb6:	ed b7       	in	r30, 0x3d	; 61
   11bb8:	fe b7       	in	r31, 0x3e	; 62
   11bba:	81 83       	std	Z+1, r24	; 0x01
   11bbc:	92 83       	std	Z+2, r25	; 0x02
   11bbe:	a3 83       	std	Z+3, r26	; 0x03
   11bc0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            return;
   11bc4:	3d c0       	rjmp	.+122    	; 0x11c40 <gpib_trace_task+0x118>
        }
    }
    else
    {
        gpib_log_fp = stdout;
   11bc6:	80 91 b7 1c 	lds	r24, 0x1CB7	; 0x801cb7 <__iob+0x2>
   11bca:	90 91 b8 1c 	lds	r25, 0x1CB8	; 0x801cb8 <__iob+0x3>
   11bce:	90 93 57 19 	sts	0x1957, r25	; 0x801957 <gpib_log_fp+0x1>
   11bd2:	80 93 56 19 	sts	0x1956, r24	; 0x801956 <gpib_log_fp>
    }

    // gpib_state_init();                            // Init PPR talking and listening states
	// gpib_state_init is in gpib_init_devices()
    gpib_init_devices();
   11bd6:	9f df       	rcall	.-194    	; 0x11b16 <gpib_init_devices>

    gpib_decode_header(gpib_log_fp);
   11bd8:	80 91 56 19 	lds	r24, 0x1956	; 0x801956 <gpib_log_fp>
   11bdc:	90 91 57 19 	lds	r25, 0x1957	; 0x801957 <gpib_log_fp+0x1>
   11be0:	ca da       	rcall	.-2668   	; 0x11176 <gpib_decode_header>
    while(1)                                      // Main loop, forever
    {
        if(uart_keyhit(0))
   11be2:	80 e0       	ldi	r24, 0x00	; 0
   11be4:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <uart_keyhit>
   11be8:	89 2b       	or	r24, r25
            break;

        ch = gpib_read_byte(detail);
   11bea:	31 f4       	brne	.+12     	; 0x11bf8 <gpib_trace_task+0xd0>
   11bec:	ce 01       	movw	r24, r28
        if(!detail)
   11bee:	57 dc       	rcall	.-1874   	; 0x1149e <gpib_read_byte>
   11bf0:	20 97       	sbiw	r28, 0x00	; 0
            gpib_decode(ch);
   11bf2:	b9 f7       	brne	.-18     	; 0x11be2 <gpib_trace_task+0xba>
   11bf4:	5a dd       	rcall	.-1356   	; 0x116aa <gpib_decode>
   11bf6:	f5 cf       	rjmp	.-22     	; 0x11be2 <gpib_trace_task+0xba>
    }

    printf("Done\n");
   11bf8:	85 e3       	ldi	r24, 0x35	; 53
   11bfa:	94 e1       	ldi	r25, 0x14	; 20
   11bfc:	a0 e0       	ldi	r26, 0x00	; 0
   11bfe:	ed b7       	in	r30, 0x3d	; 61
   11c00:	fe b7       	in	r31, 0x3e	; 62
   11c02:	81 83       	std	Z+1, r24	; 0x01
   11c04:	92 83       	std	Z+2, r25	; 0x02
   11c06:	a3 83       	std	Z+3, r26	; 0x03
   11c08:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    if(gpib_log_fp)
   11c0c:	80 91 56 19 	lds	r24, 0x1956	; 0x801956 <gpib_log_fp>
   11c10:	90 91 57 19 	lds	r25, 0x1957	; 0x801957 <gpib_log_fp+0x1>
   11c14:	00 97       	sbiw	r24, 0x00	; 0
   11c16:	a1 f0       	breq	.+40     	; 0x11c40 <gpib_trace_task+0x118>
    {
        fclose(gpib_log_fp);
   11c18:	0e 94 73 7d 	call	0xfae6	; 0xfae6 <fclose>
        printf("Capturing Closed\n");
   11c1c:	83 e2       	ldi	r24, 0x23	; 35
   11c1e:	94 e1       	ldi	r25, 0x14	; 20
   11c20:	a0 e0       	ldi	r26, 0x00	; 0
   11c22:	ed b7       	in	r30, 0x3d	; 61
   11c24:	fe b7       	in	r31, 0x3e	; 62
   11c26:	81 83       	std	Z+1, r24	; 0x01
   11c28:	92 83       	std	Z+2, r25	; 0x02
   11c2a:	a3 83       	std	Z+3, r26	; 0x03
   11c2c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        gpib_log_fp = stdout;
   11c30:	80 91 b7 1c 	lds	r24, 0x1CB7	; 0x801cb7 <__iob+0x2>
   11c34:	90 91 b8 1c 	lds	r25, 0x1CB8	; 0x801cb8 <__iob+0x3>
   11c38:	90 93 57 19 	sts	0x1957, r25	; 0x801957 <gpib_log_fp+0x1>
   11c3c:	80 93 56 19 	sts	0x1956, r24	; 0x801956 <gpib_log_fp>
    }
}
   11c40:	cd b7       	in	r28, 0x3d	; 61
   11c42:	de b7       	in	r29, 0x3e	; 62
   11c44:	25 96       	adiw	r28, 0x05	; 5
   11c46:	e4 e0       	ldi	r30, 0x04	; 4
   11c48:	0c 94 bd e7 	jmp	0x1cf7a	; 0x1cf7a <__epilogue_restores__+0x1c>

00011c4c <gpib_error_test>:
///
/// @return  val
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{
   11c4c:	ef 92       	push	r14
   11c4e:	ff 92       	push	r15
   11c50:	0f 93       	push	r16
   11c52:	1f 93       	push	r17
   11c54:	cf 93       	push	r28
   11c56:	df 93       	push	r29
   11c58:	00 d0       	rcall	.+0      	; 0x11c5a <gpib_error_test+0xe>
   11c5a:	1f 92       	push	r1
   11c5c:	7c 01       	movw	r14, r24

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11c5e:	ec 01       	movw	r28, r24
   11c60:	cc 27       	eor	r28, r28
   11c62:	d0 7d       	andi	r29, 0xD0	; 208
   11c64:	20 97       	sbiw	r28, 0x00	; 0
   11c66:	61 f0       	breq	.+24     	; 0x11c80 <gpib_error_test+0x34>
    {
        val &= ERROR_MASK;

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11c68:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11c6c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11c70:	8d 72       	andi	r24, 0x2D	; 45
   11c72:	99 27       	eor	r25, r25
   11c74:	87 01       	movw	r16, r14
   11c76:	00 27       	eor	r16, r16
   11c78:	10 71       	andi	r17, 0x10	; 16
   11c7a:	89 2b       	or	r24, r25
   11c7c:	59 f4       	brne	.+22     	; 0x11c94 <gpib_error_test+0x48>
   11c7e:	17 c0       	rjmp	.+46     	; 0x11cae <gpib_error_test+0x62>
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11c80:	80 e0       	ldi	r24, 0x00	; 0
   11c82:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <uart_keyhit>
   11c86:	89 2b       	or	r24, r25
   11c88:	79 f7       	brne	.-34     	; 0x11c68 <gpib_error_test+0x1c>
   11c8a:	0e 94 5f 6f 	call	0xdebe	; 0xdebe <mmc_ins_status>
   11c8e:	01 97       	sbiw	r24, 0x01	; 1
   11c90:	59 f7       	brne	.-42     	; 0x11c68 <gpib_error_test+0x1c>
   11c92:	62 c0       	rjmp	.+196    	; 0x11d58 <gpib_error_test+0x10c>

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
        {
/// Bus Clear, reseat all states, etc
            if(val & IFC_FLAG)
   11c94:	01 15       	cp	r16, r1
   11c96:	11 05       	cpc	r17, r1
   11c98:	51 f0       	breq	.+20     	; 0x11cae <gpib_error_test+0x62>
                printf("<IFC>\n");
   11c9a:	8c e1       	ldi	r24, 0x1C	; 28
   11c9c:	94 e1       	ldi	r25, 0x14	; 20
   11c9e:	a0 e0       	ldi	r26, 0x00	; 0
   11ca0:	ed b7       	in	r30, 0x3d	; 61
   11ca2:	fe b7       	in	r31, 0x3e	; 62
   11ca4:	81 83       	std	Z+1, r24	; 0x01
   11ca6:	92 83       	std	Z+2, r25	; 0x02
   11ca8:	a3 83       	std	Z+3, r26	; 0x03
   11caa:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        }

        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11cae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11cb2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11cb6:	8d 72       	andi	r24, 0x2D	; 45
   11cb8:	99 27       	eor	r25, r25
   11cba:	89 2b       	or	r24, r25
   11cbc:	c1 f0       	breq	.+48     	; 0x11cee <gpib_error_test+0xa2>
        {
            if(val & TIMEOUT_FLAG)
   11cbe:	f6 fe       	sbrs	r15, 6
   11cc0:	0a c0       	rjmp	.+20     	; 0x11cd6 <gpib_error_test+0x8a>
                printf("<TIMEOUT>\n");
   11cc2:	81 e1       	ldi	r24, 0x11	; 17
   11cc4:	94 e1       	ldi	r25, 0x14	; 20
   11cc6:	a0 e0       	ldi	r26, 0x00	; 0
   11cc8:	ed b7       	in	r30, 0x3d	; 61
   11cca:	fe b7       	in	r31, 0x3e	; 62
   11ccc:	81 83       	std	Z+1, r24	; 0x01
   11cce:	92 83       	std	Z+2, r25	; 0x02
   11cd0:	a3 83       	std	Z+3, r26	; 0x03
   11cd2:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            if(val & BUS_ERROR_FLAG)
   11cd6:	d7 ff       	sbrs	r29, 7
   11cd8:	0a c0       	rjmp	.+20     	; 0x11cee <gpib_error_test+0xa2>
                printf("<BUS>\n");
   11cda:	8a e0       	ldi	r24, 0x0A	; 10
   11cdc:	94 e1       	ldi	r25, 0x14	; 20
   11cde:	a0 e0       	ldi	r26, 0x00	; 0
   11ce0:	ed b7       	in	r30, 0x3d	; 61
   11ce2:	fe b7       	in	r31, 0x3e	; 62
   11ce4:	81 83       	std	Z+1, r24	; 0x01
   11ce6:	92 83       	std	Z+2, r25	; 0x02
   11ce8:	a3 83       	std	Z+3, r26	; 0x03
   11cea:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        }

        if(uart_keyhit(0))
   11cee:	80 e0       	ldi	r24, 0x00	; 0
   11cf0:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <uart_keyhit>
   11cf4:	89 2b       	or	r24, r25
   11cf6:	51 f0       	breq	.+20     	; 0x11d0c <gpib_error_test+0xc0>
            printf("<INTERRUPT>\n");
   11cf8:	8d ef       	ldi	r24, 0xFD	; 253
   11cfa:	93 e1       	ldi	r25, 0x13	; 19
   11cfc:	a0 e0       	ldi	r26, 0x00	; 0
   11cfe:	ed b7       	in	r30, 0x3d	; 61
   11d00:	fe b7       	in	r31, 0x3e	; 62
   11d02:	81 83       	std	Z+1, r24	; 0x01
   11d04:	92 83       	std	Z+2, r25	; 0x02
   11d06:	a3 83       	std	Z+3, r26	; 0x03
   11d08:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

        if( mmc_ins_status() != 1 )
   11d0c:	0e 94 5f 6f 	call	0xdebe	; 0xdebe <mmc_ins_status>
   11d10:	01 97       	sbiw	r24, 0x01	; 1
   11d12:	51 f0       	breq	.+20     	; 0x11d28 <gpib_error_test+0xdc>
            printf("<MEDIA MISSING>\n");
   11d14:	8c ee       	ldi	r24, 0xEC	; 236
   11d16:	93 e1       	ldi	r25, 0x13	; 19
   11d18:	a0 e0       	ldi	r26, 0x00	; 0
   11d1a:	ed b7       	in	r30, 0x3d	; 61
   11d1c:	fe b7       	in	r31, 0x3e	; 62
   11d1e:	81 83       	std	Z+1, r24	; 0x01
   11d20:	92 83       	std	Z+2, r25	; 0x02
   11d22:	a3 83       	std	Z+3, r26	; 0x03
   11d24:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

        if(val & IFC_FLAG)
   11d28:	01 15       	cp	r16, r1
   11d2a:	11 05       	cpc	r17, r1
   11d2c:	09 f0       	breq	.+2      	; 0x11d30 <gpib_error_test+0xe4>
        {
            gpib_init_devices();
   11d2e:	f3 de       	rcall	.-538    	; 0x11b16 <gpib_init_devices>
        }

        if(uart_keyhit(0))
   11d30:	80 e0       	ldi	r24, 0x00	; 0
   11d32:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <uart_keyhit>
   11d36:	89 2b       	or	r24, r25
        {
            gpib_init_devices();
   11d38:	11 f0       	breq	.+4      	; 0x11d3e <gpib_error_test+0xf2>
   11d3a:	ed de       	rcall	.-550    	; 0x11b16 <gpib_init_devices>
   11d3c:	0b c0       	rjmp	.+22     	; 0x11d54 <gpib_error_test+0x108>
            return(ABORT_FLAG);
        }

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
   11d3e:	0e 94 5f 6f 	call	0xdebe	; 0xdebe <mmc_ins_status>
   11d42:	01 97       	sbiw	r24, 0x01	; 1
   11d44:	39 f4       	brne	.+14     	; 0x11d54 <gpib_error_test+0x108>
        {
            return(ABORT_FLAG);
        }

// Wait for IFC free
        if(val & IFC_FLAG )
   11d46:	01 15       	cp	r16, r1
   11d48:	11 05       	cpc	r17, r1
   11d4a:	31 f0       	breq	.+12     	; 0x11d58 <gpib_error_test+0x10c>
        {
            while(GPIB_IO_RD(IFC) == 0)
   11d4c:	54 98       	cbi	0x0a, 4	; 10
   11d4e:	4c 9b       	sbis	0x09, 4	; 9
   11d50:	fd cf       	rjmp	.-6      	; 0x11d4c <gpib_error_test+0x100>
   11d52:	02 c0       	rjmp	.+4      	; 0x11d58 <gpib_error_test+0x10c>

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
        {
            return(ABORT_FLAG);
   11d54:	c1 e0       	ldi	r28, 0x01	; 1
   11d56:	d0 e0       	ldi	r29, 0x00	; 0
                ;
        }
        return(val);
    }
    return(0);
}
   11d58:	ce 01       	movw	r24, r28
   11d5a:	cd b7       	in	r28, 0x3d	; 61
   11d5c:	de b7       	in	r29, 0x3e	; 62
   11d5e:	23 96       	adiw	r28, 0x03	; 3
   11d60:	e6 e0       	ldi	r30, 0x06	; 6
   11d62:	0c 94 bb e7 	jmp	0x1cf76	; 0x1cf76 <__epilogue_restores__+0x18>

00011d66 <GPIB_COMMANDS>:
///
/// @return GPIB status from emulator command.
/// @return 0 if no emulator command processed.

uint16_t GPIB_COMMANDS(uint16_t val, uint8_t unread)
{
   11d66:	1f 93       	push	r17
   11d68:	cf 93       	push	r28
   11d6a:	df 93       	push	r29
   11d6c:	ec 01       	movw	r28, r24
   11d6e:	16 2f       	mov	r17, r22
    uint16_t status;

///@brief talking ?
    if(talking != UNT)
   11d70:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   11d74:	8f 35       	cpi	r24, 0x5F	; 95
   11d76:	91 f0       	breq	.+36     	; 0x11d9c <GPIB_COMMANDS+0x36>
    {

#ifdef AMIGO
        if ( AMIGO_is_MLA(listening) )
   11d78:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   11d7c:	90 e0       	ldi	r25, 0x00	; 0
   11d7e:	71 de       	rcall	.-798    	; 0x11a62 <AMIGO_is_MLA>
   11d80:	89 2b       	or	r24, r25
   11d82:	c9 f4       	brne	.+50     	; 0x11db6 <GPIB_COMMANDS+0x50>
            secondary = 0;
            return(status);
        }
#endif                                    // ifdef AMIGO

        if ( SS80_is_MLA(listening) )
   11d84:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   11d88:	90 e0       	ldi	r25, 0x00	; 0
   11d8a:	35 de       	rcall	.-918    	; 0x119f6 <SS80_is_MLA>
   11d8c:	89 2b       	or	r24, r25
   11d8e:	11 f5       	brne	.+68     	; 0x11dd4 <GPIB_COMMANDS+0x6e>
            status = SS80_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MLA(listening) )
   11d90:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   11d94:	90 e0       	ldi	r25, 0x00	; 0
   11d96:	9b de       	rcall	.-714    	; 0x11ace <PRINTER_is_MLA>
   11d98:	89 2b       	or	r24, r25
   11d9a:	59 f5       	brne	.+86     	; 0x11df2 <GPIB_COMMANDS+0x8c>
            return(status);
        }
    }

///@brief listening ?
    if(listening != UNL)
   11d9c:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   11da0:	8f 33       	cpi	r24, 0x3F	; 63
   11da2:	19 f4       	brne	.+6      	; 0x11daa <GPIB_COMMANDS+0x44>
            status = PRINTER_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }
    }
    return(0);
   11da4:	80 e0       	ldi	r24, 0x00	; 0
   11da6:	90 e0       	ldi	r25, 0x00	; 0
   11da8:	2e c0       	rjmp	.+92     	; 0x11e06 <GPIB_COMMANDS+0xa0>

///@brief listening ?
    if(listening != UNL)
    {
#ifdef AMIGO
        if ( AMIGO_is_MTA(talking) )
   11daa:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   11dae:	90 e0       	ldi	r25, 0x00	; 0
   11db0:	6a de       	rcall	.-812    	; 0x11a86 <AMIGO_is_MTA>
   11db2:	89 2b       	or	r24, r25
   11db4:	49 f0       	breq	.+18     	; 0x11dc8 <GPIB_COMMANDS+0x62>
        {
            if(unread)
   11db6:	11 23       	and	r17, r17
   11db8:	11 f0       	breq	.+4      	; 0x11dbe <GPIB_COMMANDS+0x58>
                gpib_unread(val);
   11dba:	ce 01       	movw	r24, r28
   11dbc:	58 d8       	rcall	.-3920   	; 0x10e6e <gpib_unread>
   11dbe:	80 91 e5 1e 	lds	r24, 0x1EE5	; 0x801ee5 <secondary>
            status = AMIGO_COMMANDS(secondary);
   11dc2:	0e 94 06 be 	call	0x17c0c	; 0x17c0c <AMIGO_COMMANDS>
   11dc6:	1d c0       	rjmp	.+58     	; 0x11e02 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }
#endif

        if ( SS80_is_MTA(talking) )
   11dc8:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   11dcc:	90 e0       	ldi	r25, 0x00	; 0
   11dce:	25 de       	rcall	.-950    	; 0x11a1a <SS80_is_MTA>
   11dd0:	89 2b       	or	r24, r25
   11dd2:	49 f0       	breq	.+18     	; 0x11de6 <GPIB_COMMANDS+0x80>
        {
            if(unread)
   11dd4:	11 23       	and	r17, r17
   11dd6:	11 f0       	breq	.+4      	; 0x11ddc <GPIB_COMMANDS+0x76>
                gpib_unread(val);
   11dd8:	ce 01       	movw	r24, r28
   11dda:	49 d8       	rcall	.-3950   	; 0x10e6e <gpib_unread>
   11ddc:	80 91 e5 1e 	lds	r24, 0x1EE5	; 0x801ee5 <secondary>
            status = SS80_COMMANDS(secondary);
   11de0:	0e 94 2c b2 	call	0x16458	; 0x16458 <SS80_COMMANDS>
   11de4:	0e c0       	rjmp	.+28     	; 0x11e02 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MTA(talking) )
   11de6:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   11dea:	90 e0       	ldi	r25, 0x00	; 0
   11dec:	82 de       	rcall	.-764    	; 0x11af2 <PRINTER_is_MTA>
   11dee:	89 2b       	or	r24, r25
   11df0:	c9 f2       	breq	.-78     	; 0x11da4 <GPIB_COMMANDS+0x3e>
        {
            if(unread)
   11df2:	11 23       	and	r17, r17
   11df4:	11 f0       	breq	.+4      	; 0x11dfa <GPIB_COMMANDS+0x94>
                gpib_unread(val);
   11df6:	ce 01       	movw	r24, r28
   11df8:	3a d8       	rcall	.-3980   	; 0x10e6e <gpib_unread>
   11dfa:	80 91 e5 1e 	lds	r24, 0x1EE5	; 0x801ee5 <secondary>
            status = PRINTER_COMMANDS(secondary);
   11dfe:	0e 94 7f c0 	call	0x180fe	; 0x180fe <PRINTER_COMMANDS>
   11e02:	10 92 e5 1e 	sts	0x1EE5, r1	; 0x801ee5 <secondary>
            secondary = 0;
   11e06:	df 91       	pop	r29
            return(status);
        }
    }
    return(0);
}
   11e08:	cf 91       	pop	r28
   11e0a:	1f 91       	pop	r17
   11e0c:	08 95       	ret

00011e0e <Send_Identify>:
   11e0e:	cf 92       	push	r12
///
/// @return  0 on GPIB error returns error flags
/// @see gpib.h ERROR_MASK for a full list.

int Send_Identify(uint8_t ch, uint16_t ID)
{
   11e10:	df 92       	push	r13
   11e12:	ff 92       	push	r15
   11e14:	0f 93       	push	r16
   11e16:	1f 93       	push	r17
   11e18:	cf 93       	push	r28
   11e1a:	df 93       	push	r29
   11e1c:	cd b7       	in	r28, 0x3d	; 61
   11e1e:	de b7       	in	r29, 0x3e	; 62
   11e20:	2b 97       	sbiw	r28, 0x0b	; 11
   11e22:	0f b6       	in	r0, 0x3f	; 63
   11e24:	f8 94       	cli
   11e26:	de bf       	out	0x3e, r29	; 62
   11e28:	0f be       	out	0x3f, r0	; 63
   11e2a:	cd bf       	out	0x3d, r28	; 61
   11e2c:	f8 2e       	mov	r15, r24
   11e2e:	6b 01       	movw	r12, r22
    uint16_t status = EOI_FLAG;
   11e30:	80 e0       	ldi	r24, 0x00	; 0
   11e32:	91 e0       	ldi	r25, 0x01	; 1
   11e34:	9b 87       	std	Y+11, r25	; 0x0b
   11e36:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t tmp[2];

    V2B_MSB(tmp,0,2,ID);
   11e38:	8b 01       	movw	r16, r22
   11e3a:	20 e0       	ldi	r18, 0x00	; 0
   11e3c:	30 e0       	ldi	r19, 0x00	; 0
   11e3e:	42 e0       	ldi	r20, 0x02	; 2
   11e40:	50 e0       	ldi	r21, 0x00	; 0
   11e42:	60 e0       	ldi	r22, 0x00	; 0
   11e44:	70 e0       	ldi	r23, 0x00	; 0
   11e46:	ce 01       	movw	r24, r28
   11e48:	08 96       	adiw	r24, 0x08	; 8
   11e4a:	0e 94 ba c0 	call	0x18174	; 0x18174 <V2B_MSB>
    if(gpib_write_str(tmp,2, &status) != 2)
   11e4e:	ae 01       	movw	r20, r28
   11e50:	46 5f       	subi	r20, 0xF6	; 246
   11e52:	5f 4f       	sbci	r21, 0xFF	; 255
   11e54:	62 e0       	ldi	r22, 0x02	; 2
   11e56:	70 e0       	ldi	r23, 0x00	; 0
   11e58:	ce 01       	movw	r24, r28
   11e5a:	08 96       	adiw	r24, 0x08	; 8
   11e5c:	cc dc       	rcall	.-1640   	; 0x117f6 <gpib_write_str>
   11e5e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11e62:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11e66:	02 97       	sbiw	r24, 0x02	; 2
   11e68:	79 f0       	breq	.+30     	; 0x11e88 <Send_Identify+0x7a>
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e6a:	25 72       	andi	r18, 0x25	; 37
   11e6c:	33 27       	eor	r19, r19
   11e6e:	23 2b       	or	r18, r19
   11e70:	f9 f0       	breq	.+62     	; 0x11eb0 <Send_Identify+0xa2>
            printf("[IDENT Unit:%02XH=%04XH FAILED]\n",
   11e72:	ed b7       	in	r30, 0x3d	; 61
   11e74:	fe b7       	in	r31, 0x3e	; 62
   11e76:	d7 82       	std	Z+7, r13	; 0x07
   11e78:	c6 82       	std	Z+6, r12	; 0x06
   11e7a:	8f 2d       	mov	r24, r15
   11e7c:	90 e0       	ldi	r25, 0x00	; 0
   11e7e:	95 83       	std	Z+5, r25	; 0x05
   11e80:	84 83       	std	Z+4, r24	; 0x04
   11e82:	8b ec       	ldi	r24, 0xCB	; 203
   11e84:	93 e1       	ldi	r25, 0x13	; 19
   11e86:	0e c0       	rjmp	.+28     	; 0x11ea4 <Send_Identify+0x96>
                (int)ch,(int)ID);
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e88:	24 72       	andi	r18, 0x24	; 36
   11e8a:	33 27       	eor	r19, r19
   11e8c:	23 2b       	or	r18, r19
   11e8e:	81 f0       	breq	.+32     	; 0x11eb0 <Send_Identify+0xa2>
        printf("[IDENT Unit:%02XH=%04XH]\n", (int)ch,(int)ID);
   11e90:	ed b7       	in	r30, 0x3d	; 61
   11e92:	fe b7       	in	r31, 0x3e	; 62
   11e94:	d7 82       	std	Z+7, r13	; 0x07
   11e96:	c6 82       	std	Z+6, r12	; 0x06
   11e98:	8f 2d       	mov	r24, r15
   11e9a:	90 e0       	ldi	r25, 0x00	; 0
   11e9c:	95 83       	std	Z+5, r25	; 0x05
   11e9e:	84 83       	std	Z+4, r24	; 0x04
   11ea0:	81 eb       	ldi	r24, 0xB1	; 177
   11ea2:	93 e1       	ldi	r25, 0x13	; 19
   11ea4:	a0 e0       	ldi	r26, 0x00	; 0
   11ea6:	81 83       	std	Z+1, r24	; 0x01
   11ea8:	92 83       	std	Z+2, r25	; 0x02
   11eaa:	a3 83       	std	Z+3, r26	; 0x03
   11eac:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
    return (status & ERROR_MASK);
   11eb0:	8a 85       	ldd	r24, Y+10	; 0x0a
   11eb2:	9b 85       	ldd	r25, Y+11	; 0x0b
   11eb4:	88 27       	eor	r24, r24
   11eb6:	90 7d       	andi	r25, 0xD0	; 208
}
   11eb8:	2b 96       	adiw	r28, 0x0b	; 11
   11eba:	0f b6       	in	r0, 0x3f	; 63
   11ebc:	f8 94       	cli
   11ebe:	de bf       	out	0x3e, r29	; 62
   11ec0:	0f be       	out	0x3f, r0	; 63
   11ec2:	cd bf       	out	0x3d, r28	; 61
   11ec4:	df 91       	pop	r29
   11ec6:	cf 91       	pop	r28
   11ec8:	1f 91       	pop	r17
   11eca:	0f 91       	pop	r16
   11ecc:	ff 90       	pop	r15
   11ece:	df 90       	pop	r13
   11ed0:	cf 90       	pop	r12
   11ed2:	08 95       	ret

00011ed4 <GPIB>:
/// @return  0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list.

int GPIB(uint8_t ch)
{
   11ed4:	00 d0       	rcall	.+0      	; 0x11ed6 <GPIB+0x2>
   11ed6:	00 d0       	rcall	.+0      	; 0x11ed8 <GPIB+0x4>
   11ed8:	1f 92       	push	r1
   11eda:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11ede:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
///@brief Parallel Poll Configure
///TODO
    if(ch == PPC)
   11ee2:	85 30       	cpi	r24, 0x05	; 5
   11ee4:	89 f4       	brne	.+34     	; 0x11f08 <GPIB+0x34>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11ee6:	27 71       	andi	r18, 0x17	; 23
   11ee8:	33 27       	eor	r19, r19
   11eea:	23 2b       	or	r18, r19
   11eec:	51 f0       	breq	.+20     	; 0x11f02 <GPIB+0x2e>
            printf("[PPC unsupported TODO]\n");
   11eee:	89 e9       	ldi	r24, 0x99	; 153
   11ef0:	93 e1       	ldi	r25, 0x13	; 19
   11ef2:	a0 e0       	ldi	r26, 0x00	; 0
   11ef4:	ed b7       	in	r30, 0x3d	; 61
   11ef6:	fe b7       	in	r31, 0x3e	; 62
   11ef8:	81 83       	std	Z+1, r24	; 0x01
   11efa:	92 83       	std	Z+2, r25	; 0x02
   11efc:	a3 83       	std	Z+3, r26	; 0x03
   11efe:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        spoll = 0;
   11f02:	10 92 e1 1e 	sts	0x1EE1, r1	; 0x801ee1 <spoll>
   11f06:	a0 c0       	rjmp	.+320    	; 0x12048 <GPIB+0x174>
        return 0;
    }
///@brief Parallel Poll Unconfigure
///TODO
    if(ch == PPU)
   11f08:	85 31       	cpi	r24, 0x15	; 21
   11f0a:	39 f4       	brne	.+14     	; 0x11f1a <GPIB+0x46>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11f0c:	27 71       	andi	r18, 0x17	; 23
   11f0e:	33 27       	eor	r19, r19
   11f10:	23 2b       	or	r18, r19
   11f12:	b9 f3       	breq	.-18     	; 0x11f02 <GPIB+0x2e>
            printf("[PPU unsupported TODO]\n");
   11f14:	81 e8       	ldi	r24, 0x81	; 129
   11f16:	93 e1       	ldi	r25, 0x13	; 19
   11f18:	ec cf       	rjmp	.-40     	; 0x11ef2 <GPIB+0x1e>
    }

/// @todo FIXME
#if defined(SPOLL)
///@brief Serial Poll Enable
    if(ch == SPE)
   11f1a:	88 31       	cpi	r24, 0x18	; 24
   11f1c:	d9 f4       	brne	.+54     	; 0x11f54 <GPIB+0x80>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11f1e:	26 70       	andi	r18, 0x06	; 6
   11f20:	33 27       	eor	r19, r19
   11f22:	23 2b       	or	r18, r19
   11f24:	51 f0       	breq	.+20     	; 0x11f3a <GPIB+0x66>
            printf("[SPE]\n");
   11f26:	8a e7       	ldi	r24, 0x7A	; 122
   11f28:	93 e1       	ldi	r25, 0x13	; 19
   11f2a:	a0 e0       	ldi	r26, 0x00	; 0
   11f2c:	ed b7       	in	r30, 0x3d	; 61
   11f2e:	fe b7       	in	r31, 0x3e	; 62
   11f30:	81 83       	std	Z+1, r24	; 0x01
   11f32:	92 83       	std	Z+2, r25	; 0x02
   11f34:	a3 83       	std	Z+3, r26	; 0x03
   11f36:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
        spoll = 1;
   11f3a:	81 e0       	ldi	r24, 0x01	; 1
   11f3c:	80 93 e1 1e 	sts	0x1EE1, r24	; 0x801ee1 <spoll>
        if(SS80_is_MTA(talking))
   11f40:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   11f44:	90 e0       	ldi	r25, 0x00	; 0
   11f46:	69 dd       	rcall	.-1326   	; 0x11a1a <SS80_is_MTA>
   11f48:	89 2b       	or	r24, r25
   11f4a:	09 f4       	brne	.+2      	; 0x11f4e <GPIB+0x7a>
   11f4c:	7d c0       	rjmp	.+250    	; 0x12048 <GPIB+0x174>
        {
            return( SS80_Report() );
   11f4e:	0e 94 df ad 	call	0x15bbe	; 0x15bbe <SS80_Report>
   11f52:	7c c0       	rjmp	.+248    	; 0x1204c <GPIB+0x178>
        }
        return 0;
    }

///@brief Serial Poll Disable
    if(ch == SPD)
   11f54:	89 31       	cpi	r24, 0x19	; 25
   11f56:	39 f4       	brne	.+14     	; 0x11f66 <GPIB+0x92>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11f58:	26 70       	andi	r18, 0x06	; 6
   11f5a:	33 27       	eor	r19, r19
   11f5c:	23 2b       	or	r18, r19
   11f5e:	89 f2       	breq	.-94     	; 0x11f02 <GPIB+0x2e>
            printf("[SPD]\n");
   11f60:	83 e7       	ldi	r24, 0x73	; 115
   11f62:	93 e1       	ldi	r25, 0x13	; 19
   11f64:	c6 cf       	rjmp	.-116    	; 0x11ef2 <GPIB+0x1e>
        return 0;
    }
#endif                                        // #if defined(SPOLL)

///@brief Selected Device Clear
    if(ch == SDC )
   11f66:	84 30       	cpi	r24, 0x04	; 4
   11f68:	09 f0       	breq	.+2      	; 0x11f6c <GPIB+0x98>
   11f6a:	48 c0       	rjmp	.+144    	; 0x11ffc <GPIB+0x128>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11f6c:	22 ff       	sbrs	r18, 2
   11f6e:	0a c0       	rjmp	.+20     	; 0x11f84 <GPIB+0xb0>
            printf("[SDC]\n");
   11f70:	8c e6       	ldi	r24, 0x6C	; 108
   11f72:	93 e1       	ldi	r25, 0x13	; 19
   11f74:	a0 e0       	ldi	r26, 0x00	; 0
   11f76:	ed b7       	in	r30, 0x3d	; 61
   11f78:	fe b7       	in	r31, 0x3e	; 62
   11f7a:	81 83       	std	Z+1, r24	; 0x01
   11f7c:	92 83       	std	Z+2, r25	; 0x02
   11f7e:	a3 83       	std	Z+3, r26	; 0x03
   11f80:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
        if(SS80_is_MLA(listening))
   11f84:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   11f88:	90 e0       	ldi	r25, 0x00	; 0
   11f8a:	35 dd       	rcall	.-1430   	; 0x119f6 <SS80_is_MLA>
   11f8c:	89 2b       	or	r24, r25
   11f8e:	d9 f0       	breq	.+54     	; 0x11fc6 <GPIB+0xf2>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
///  CS80 3-4
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f90:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11f94:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11f98:	84 72       	andi	r24, 0x24	; 36
   11f9a:	99 27       	eor	r25, r25
   11f9c:	89 2b       	or	r24, r25
   11f9e:	51 f0       	breq	.+20     	; 0x11fb4 <GPIB+0xe0>
                printf("[SDC SS80]\n");
   11fa0:	80 e6       	ldi	r24, 0x60	; 96
   11fa2:	93 e1       	ldi	r25, 0x13	; 19
   11fa4:	a0 e0       	ldi	r26, 0x00	; 0
   11fa6:	ed b7       	in	r30, 0x3d	; 61
   11fa8:	fe b7       	in	r31, 0x3e	; 62
   11faa:	81 83       	std	Z+1, r24	; 0x01
   11fac:	92 83       	std	Z+2, r25	; 0x02
   11fae:	a3 83       	std	Z+3, r26	; 0x03
   11fb0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
            return(SS80_Selected_Device_Clear(SS80s->unitNO) );
   11fb4:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   11fb8:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   11fbc:	85 81       	ldd	r24, Z+5	; 0x05
   11fbe:	90 e0       	ldi	r25, 0x00	; 0
   11fc0:	0e 94 b1 ae 	call	0x15d62	; 0x15d62 <SS80_Selected_Device_Clear>
   11fc4:	43 c0       	rjmp	.+134    	; 0x1204c <GPIB+0x178>
        }

#ifdef AMIGO
        if(AMIGO_is_MLA(listening))
   11fc6:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   11fca:	90 e0       	ldi	r25, 0x00	; 0
   11fcc:	4a dd       	rcall	.-1388   	; 0x11a62 <AMIGO_is_MLA>
   11fce:	89 2b       	or	r24, r25
   11fd0:	d9 f1       	breq	.+118    	; 0x12048 <GPIB+0x174>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11fd2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11fd6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11fda:	84 72       	andi	r24, 0x24	; 36
   11fdc:	99 27       	eor	r25, r25
   11fde:	89 2b       	or	r24, r25
   11fe0:	51 f0       	breq	.+20     	; 0x11ff6 <GPIB+0x122>
                printf("[SDC AMIGO]\n");
   11fe2:	83 e5       	ldi	r24, 0x53	; 83
   11fe4:	93 e1       	ldi	r25, 0x13	; 19
   11fe6:	a0 e0       	ldi	r26, 0x00	; 0
   11fe8:	ed b7       	in	r30, 0x3d	; 61
   11fea:	fe b7       	in	r31, 0x3e	; 62
   11fec:	81 83       	std	Z+1, r24	; 0x01
   11fee:	92 83       	std	Z+2, r25	; 0x02
   11ff0:	a3 83       	std	Z+3, r26	; 0x03
   11ff2:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
            return( amigo_cmd_clear() );
   11ff6:	0e 94 ec b8 	call	0x171d8	; 0x171d8 <amigo_cmd_clear>
   11ffa:	28 c0       	rjmp	.+80     	; 0x1204c <GPIB+0x178>
/// @todo FIXME
        return( 0 );
    }

///@brief   (Universal) Device Clear
    if(ch == DCL )
   11ffc:	84 31       	cpi	r24, 0x14	; 20
   11ffe:	99 f4       	brne	.+38     	; 0x12026 <GPIB+0x152>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   12000:	22 ff       	sbrs	r18, 2
   12002:	0a c0       	rjmp	.+20     	; 0x12018 <GPIB+0x144>
            printf("[DCL]\n");
   12004:	8c e4       	ldi	r24, 0x4C	; 76
   12006:	93 e1       	ldi	r25, 0x13	; 19
   12008:	a0 e0       	ldi	r26, 0x00	; 0
   1200a:	ed b7       	in	r30, 0x3d	; 61
   1200c:	fe b7       	in	r31, 0x3e	; 62
   1200e:	81 83       	std	Z+1, r24	; 0x01
   12010:	92 83       	std	Z+2, r25	; 0x02
   12012:	a3 83       	std	Z+3, r26	; 0x03
   12014:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
        SS80_Universal_Device_Clear();
   12018:	0e 94 a3 ae 	call	0x15d46	; 0x15d46 <SS80_Universal_Device_Clear>

#ifdef AMIGO
        amigo_cmd_clear();
   1201c:	0e 94 ec b8 	call	0x171d8	; 0x171d8 <amigo_cmd_clear>
#endif

/// @todo Fixme
        printer_close();
   12020:	0e 94 0b bf 	call	0x17e16	; 0x17e16 <printer_close>
   12024:	11 c0       	rjmp	.+34     	; 0x12048 <GPIB+0x174>
        return( 0 );
    }

    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   12026:	25 71       	andi	r18, 0x15	; 21
   12028:	33 27       	eor	r19, r19
   1202a:	23 2b       	or	r18, r19
   1202c:	69 f0       	breq	.+26     	; 0x12048 <GPIB+0x174>
        printf("[GPIB (%02XH) not defined TODO]\n", 0xff & ch);
   1202e:	90 e0       	ldi	r25, 0x00	; 0
   12030:	ed b7       	in	r30, 0x3d	; 61
   12032:	fe b7       	in	r31, 0x3e	; 62
   12034:	95 83       	std	Z+5, r25	; 0x05
   12036:	84 83       	std	Z+4, r24	; 0x04
   12038:	8b e2       	ldi	r24, 0x2B	; 43
   1203a:	93 e1       	ldi	r25, 0x13	; 19
   1203c:	a0 e0       	ldi	r26, 0x00	; 0
   1203e:	81 83       	std	Z+1, r24	; 0x01
   12040:	92 83       	std	Z+2, r25	; 0x02
   12042:	a3 83       	std	Z+3, r26	; 0x03
   12044:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    return(0);
   12048:	80 e0       	ldi	r24, 0x00	; 0
   1204a:	90 e0       	ldi	r25, 0x00	; 0
}
   1204c:	0f 90       	pop	r0
   1204e:	0f 90       	pop	r0
   12050:	0f 90       	pop	r0
   12052:	0f 90       	pop	r0
   12054:	0f 90       	pop	r0
   12056:	08 95       	ret

00012058 <GPIB_TALK>:
/// @param[in] ch 8 bit talk command
///
/// @return  0

int GPIB_TALK(uint8_t ch)
{
   12058:	cf 93       	push	r28
   1205a:	df 93       	push	r29
   1205c:	00 d0       	rcall	.+0      	; 0x1205e <GPIB_TALK+0x6>
   1205e:	00 d0       	rcall	.+0      	; 0x12060 <GPIB_TALK+0x8>
   12060:	1f 92       	push	r1

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///  save talking state
    talking_last = talking;
   12062:	90 91 e4 1e 	lds	r25, 0x1EE4	; 0x801ee4 <talking>
   12066:	90 93 e7 1e 	sts	0x1EE7, r25	; 0x801ee7 <talking_last>
    talking = ch;
   1206a:	80 93 e4 1e 	sts	0x1EE4, r24	; 0x801ee4 <talking>

    talk_cleanup();

///@brief  Universal Untalk
    if(ch == UNT)
   1206e:	8f 35       	cpi	r24, 0x5F	; 95
   12070:	79 f4       	brne	.+30     	; 0x12090 <GPIB_TALK+0x38>
    {
//FIXME talking = 0 ????
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   12072:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12076:	82 ff       	sbrs	r24, 2
   12078:	7f c0       	rjmp	.+254    	; 0x12178 <GPIB_TALK+0x120>
            printf("[UNT]\n");
   1207a:	88 ed       	ldi	r24, 0xD8	; 216
   1207c:	92 e1       	ldi	r25, 0x12	; 18
   1207e:	a0 e0       	ldi	r26, 0x00	; 0
   12080:	ed b7       	in	r30, 0x3d	; 61
   12082:	fe b7       	in	r31, 0x3e	; 62
   12084:	81 83       	std	Z+1, r24	; 0x01
   12086:	92 83       	std	Z+2, r25	; 0x02
   12088:	a3 83       	std	Z+3, r26	; 0x03
   1208a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1208e:	74 c0       	rjmp	.+232    	; 0x12178 <GPIB_TALK+0x120>
#endif
        return(0);
    }

    if(SS80_is_MTA(ch))
   12090:	c8 2f       	mov	r28, r24
   12092:	d0 e0       	ldi	r29, 0x00	; 0
   12094:	ce 01       	movw	r24, r28
   12096:	c1 dc       	rcall	.-1662   	; 0x11a1a <SS80_is_MTA>
   12098:	89 2b       	or	r24, r25
   1209a:	e1 f0       	breq	.+56     	; 0x120d4 <GPIB_TALK+0x7c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1209c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   120a0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   120a4:	84 72       	andi	r24, 0x24	; 36
   120a6:	99 27       	eor	r25, r25
   120a8:	89 2b       	or	r24, r25
   120aa:	61 f0       	breq	.+24     	; 0x120c4 <GPIB_TALK+0x6c>
            printf("[TA %02XH SS80]\n", 0xff & ch);
   120ac:	ed b7       	in	r30, 0x3d	; 61
   120ae:	fe b7       	in	r31, 0x3e	; 62
   120b0:	d5 83       	std	Z+5, r29	; 0x05
   120b2:	c4 83       	std	Z+4, r28	; 0x04
   120b4:	87 ec       	ldi	r24, 0xC7	; 199
   120b6:	92 e1       	ldi	r25, 0x12	; 18
   120b8:	a0 e0       	ldi	r26, 0x00	; 0
   120ba:	81 83       	std	Z+1, r24	; 0x01
   120bc:	92 83       	std	Z+2, r25	; 0x02
   120be:	a3 83       	std	Z+3, r26	; 0x03
   120c0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif

        if (spoll)
   120c4:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <spoll>
   120c8:	88 23       	and	r24, r24
   120ca:	09 f4       	brne	.+2      	; 0x120ce <GPIB_TALK+0x76>
   120cc:	55 c0       	rjmp	.+170    	; 0x12178 <GPIB_TALK+0x120>
        {
            SS80_Report();
   120ce:	0e 94 df ad 	call	0x15bbe	; 0x15bbe <SS80_Report>
   120d2:	52 c0       	rjmp	.+164    	; 0x12178 <GPIB_TALK+0x120>
        }
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MTA(ch))
   120d4:	ce 01       	movw	r24, r28
   120d6:	d7 dc       	rcall	.-1618   	; 0x11a86 <AMIGO_is_MTA>
   120d8:	89 2b       	or	r24, r25
   120da:	81 f0       	breq	.+32     	; 0x120fc <GPIB_TALK+0xa4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   120dc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   120e0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   120e4:	84 72       	andi	r24, 0x24	; 36
   120e6:	99 27       	eor	r25, r25
   120e8:	89 2b       	or	r24, r25
   120ea:	09 f4       	brne	.+2      	; 0x120ee <GPIB_TALK+0x96>
   120ec:	45 c0       	rjmp	.+138    	; 0x12178 <GPIB_TALK+0x120>
            printf("[TA %02XH AMIGO]\n", 0xff & ch);
   120ee:	ed b7       	in	r30, 0x3d	; 61
   120f0:	fe b7       	in	r31, 0x3e	; 62
   120f2:	d5 83       	std	Z+5, r29	; 0x05
   120f4:	c4 83       	std	Z+4, r28	; 0x04
   120f6:	85 eb       	ldi	r24, 0xB5	; 181
   120f8:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(PRINTER_is_MTA(ch))
   120fa:	38 c0       	rjmp	.+112    	; 0x1216c <GPIB_TALK+0x114>
   120fc:	ce 01       	movw	r24, r28
   120fe:	f9 dc       	rcall	.-1550   	; 0x11af2 <PRINTER_is_MTA>
   12100:	89 2b       	or	r24, r25
   12102:	79 f0       	breq	.+30     	; 0x12122 <GPIB_TALK+0xca>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12104:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12108:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1210c:	84 72       	andi	r24, 0x24	; 36
   1210e:	99 27       	eor	r25, r25
   12110:	89 2b       	or	r24, r25
   12112:	91 f1       	breq	.+100    	; 0x12178 <GPIB_TALK+0x120>
            printf("[TA %02XH PRINTER]\n", 0xff & ch);
   12114:	ed b7       	in	r30, 0x3d	; 61
   12116:	fe b7       	in	r31, 0x3e	; 62
   12118:	d5 83       	std	Z+5, r29	; 0x05
   1211a:	c4 83       	std	Z+4, r28	; 0x04
   1211c:	81 ea       	ldi	r24, 0xA1	; 161
   1211e:	92 e1       	ldi	r25, 0x12	; 18
   12120:	25 c0       	rjmp	.+74     	; 0x1216c <GPIB_TALK+0x114>
#endif
        return(0);
    }

    if(PRINTER_is_MLA(listening))
   12122:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   12126:	90 e0       	ldi	r25, 0x00	; 0
   12128:	d2 dc       	rcall	.-1628   	; 0x11ace <PRINTER_is_MLA>
   1212a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1212e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12132:	89 2b       	or	r24, r25
   12134:	99 f0       	breq	.+38     	; 0x1215c <GPIB_TALK+0x104>
    {
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12136:	24 72       	andi	r18, 0x24	; 36
   12138:	33 27       	eor	r19, r19
   1213a:	23 2b       	or	r18, r19
   1213c:	51 f0       	breq	.+20     	; 0x12152 <GPIB_TALK+0xfa>
            printf("[PRINTER OPEN]\n");
   1213e:	81 e9       	ldi	r24, 0x91	; 145
   12140:	92 e1       	ldi	r25, 0x12	; 18
   12142:	a0 e0       	ldi	r26, 0x00	; 0
   12144:	ed b7       	in	r30, 0x3d	; 61
   12146:	fe b7       	in	r31, 0x3e	; 62
   12148:	81 83       	std	Z+1, r24	; 0x01
   1214a:	92 83       	std	Z+2, r25	; 0x02
   1214c:	a3 83       	std	Z+3, r26	; 0x03
   1214e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        printer_open(NULL);
   12152:	80 e0       	ldi	r24, 0x00	; 0
   12154:	90 e0       	ldi	r25, 0x00	; 0
   12156:	0e 94 63 bf 	call	0x17ec6	; 0x17ec6 <printer_open>
   1215a:	0e c0       	rjmp	.+28     	; 0x12178 <GPIB_TALK+0x120>
        return(0);
    }

#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   1215c:	22 ff       	sbrs	r18, 2
   1215e:	0c c0       	rjmp	.+24     	; 0x12178 <GPIB_TALK+0x120>
        printf("[TA %02XH]\n", 0xff & ch);
   12160:	ed b7       	in	r30, 0x3d	; 61
   12162:	fe b7       	in	r31, 0x3e	; 62
   12164:	d5 83       	std	Z+5, r29	; 0x05
   12166:	c4 83       	std	Z+4, r28	; 0x04
   12168:	85 e8       	ldi	r24, 0x85	; 133
   1216a:	92 e1       	ldi	r25, 0x12	; 18
   1216c:	a0 e0       	ldi	r26, 0x00	; 0
   1216e:	81 83       	std	Z+1, r24	; 0x01
   12170:	92 83       	std	Z+2, r25	; 0x02
   12172:	a3 83       	std	Z+3, r26	; 0x03
   12174:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
    return(0);
}                                                 // Talk Address primary address group
   12178:	80 e0       	ldi	r24, 0x00	; 0
   1217a:	90 e0       	ldi	r25, 0x00	; 0
   1217c:	cd b7       	in	r28, 0x3d	; 61
   1217e:	de b7       	in	r29, 0x3e	; 62
   12180:	25 96       	adiw	r28, 0x05	; 5
   12182:	e2 e0       	ldi	r30, 0x02	; 2
   12184:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00012188 <GPIB_SECONDARY_ADDRESS>:
///
/// @param[in] ch 8 bit secondary address.
///
/// @return  0
int GPIB_SECONDARY_ADDRESS(uint8_t ch)
{
   12188:	a9 e0       	ldi	r26, 0x09	; 9
   1218a:	b0 e0       	ldi	r27, 0x00	; 0
   1218c:	ea ec       	ldi	r30, 0xCA	; 202
   1218e:	f0 e9       	ldi	r31, 0x90	; 144
   12190:	0c 94 a2 e7 	jmp	0x1cf44	; 0x1cf44 <__prologue_saves__+0x1e>
   12194:	18 2f       	mov	r17, r24
///  note: any errors will reset lastcmd
///  Universal Talk mode
///  Treat this as a Secondary Address ?
///  SS80 Ident 4-31
///  If we have our secondary address then send IDENT
    if(SS80_is_MSA(ch) )
   12196:	c8 2f       	mov	r28, r24
   12198:	d0 e0       	ldi	r29, 0x00	; 0
   1219a:	ce 01       	movw	r24, r28
   1219c:	50 dc       	rcall	.-1888   	; 0x11a3e <SS80_is_MSA>
   1219e:	89 2b       	or	r24, r25
   121a0:	09 f1       	breq	.+66     	; 0x121e4 <GPIB_SECONDARY_ADDRESS+0x5c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   121a2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   121a6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   121aa:	84 72       	andi	r24, 0x24	; 36
   121ac:	99 27       	eor	r25, r25
   121ae:	89 2b       	or	r24, r25
   121b0:	61 f0       	breq	.+24     	; 0x121ca <GPIB_SECONDARY_ADDRESS+0x42>
            printf("[SA %02XH SS80]\n", 0xff & ch);
   121b2:	ed b7       	in	r30, 0x3d	; 61
   121b4:	fe b7       	in	r31, 0x3e	; 62
   121b6:	d5 83       	std	Z+5, r29	; 0x05
   121b8:	c4 83       	std	Z+4, r28	; 0x04
   121ba:	84 e7       	ldi	r24, 0x74	; 116
   121bc:	92 e1       	ldi	r25, 0x12	; 18
   121be:	a0 e0       	ldi	r26, 0x00	; 0
   121c0:	81 83       	std	Z+1, r24	; 0x01
   121c2:	92 83       	std	Z+2, r25	; 0x02
   121c4:	a3 83       	std	Z+3, r26	; 0x03
   121c6:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(SS80p->HEADER.PPR);
   121ca:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   121ce:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   121d2:	81 81       	ldd	r24, Z+1	; 0x01
   121d4:	90 e0       	ldi	r25, 0x00	; 0
   121d6:	0e 94 01 87 	call	0x10e02	; 0x10e02 <gpib_disable_PPR>
        return(Send_Identify( ch, SS80p->CONFIG.ID) );
   121da:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   121de:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   121e2:	25 c0       	rjmp	.+74     	; 0x1222e <GPIB_SECONDARY_ADDRESS+0xa6>

    }

#ifdef AMIGO
    if(AMIGO_is_MSA(ch) )
   121e4:	ce 01       	movw	r24, r28
   121e6:	61 dc       	rcall	.-1854   	; 0x11aaa <AMIGO_is_MSA>
   121e8:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   121ec:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   121f0:	89 2b       	or	r24, r25
   121f2:	11 f1       	breq	.+68     	; 0x12238 <GPIB_SECONDARY_ADDRESS+0xb0>
    {
/// @todo
///     Two identify bytes should be repeated until untalked
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   121f4:	c9 01       	movw	r24, r18
   121f6:	84 72       	andi	r24, 0x24	; 36
   121f8:	99 27       	eor	r25, r25
   121fa:	89 2b       	or	r24, r25
   121fc:	61 f0       	breq	.+24     	; 0x12216 <GPIB_SECONDARY_ADDRESS+0x8e>
            printf("[SA %02XH AMIGO]\n", 0xff & ch);
   121fe:	ed b7       	in	r30, 0x3d	; 61
   12200:	fe b7       	in	r31, 0x3e	; 62
   12202:	d5 83       	std	Z+5, r29	; 0x05
   12204:	c4 83       	std	Z+4, r28	; 0x04
   12206:	82 e6       	ldi	r24, 0x62	; 98
   12208:	92 e1       	ldi	r25, 0x12	; 18
   1220a:	a0 e0       	ldi	r26, 0x00	; 0
   1220c:	81 83       	std	Z+1, r24	; 0x01
   1220e:	92 83       	std	Z+2, r25	; 0x02
   12210:	a3 83       	std	Z+3, r26	; 0x03
   12212:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   12216:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   1221a:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   1221e:	81 81       	ldd	r24, Z+1	; 0x01
   12220:	90 e0       	ldi	r25, 0x00	; 0
   12222:	0e 94 01 87 	call	0x10e02	; 0x10e02 <gpib_disable_PPR>
        return( Send_Identify( ch, AMIGOp->CONFIG.ID) );
   12226:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   1222a:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   1222e:	66 81       	ldd	r22, Z+6	; 0x06
   12230:	77 81       	ldd	r23, Z+7	; 0x07
   12232:	81 2f       	mov	r24, r17
   12234:	ec dd       	rcall	.-1064   	; 0x11e0e <Send_Identify>
   12236:	1d c0       	rjmp	.+58     	; 0x12272 <GPIB_SECONDARY_ADDRESS+0xea>
    }
#endif                                        // #ifdef AMIGO

#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12238:	c9 01       	movw	r24, r18
   1223a:	84 72       	andi	r24, 0x24	; 36
   1223c:	99 27       	eor	r25, r25
   1223e:	00 97       	sbiw	r24, 0x00	; 0
   12240:	c1 f0       	breq	.+48     	; 0x12272 <GPIB_SECONDARY_ADDRESS+0xea>
        printf("[SA %02XH, listen:%02XH, talk:%02XH]\n",
   12242:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   12246:	90 e0       	ldi	r25, 0x00	; 0
   12248:	ed b7       	in	r30, 0x3d	; 61
   1224a:	fe b7       	in	r31, 0x3e	; 62
   1224c:	91 87       	std	Z+9, r25	; 0x09
   1224e:	80 87       	std	Z+8, r24	; 0x08
   12250:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   12254:	90 e0       	ldi	r25, 0x00	; 0
   12256:	97 83       	std	Z+7, r25	; 0x07
   12258:	86 83       	std	Z+6, r24	; 0x06
   1225a:	d5 83       	std	Z+5, r29	; 0x05
   1225c:	c4 83       	std	Z+4, r28	; 0x04
   1225e:	8c e3       	ldi	r24, 0x3C	; 60
   12260:	92 e1       	ldi	r25, 0x12	; 18
   12262:	a0 e0       	ldi	r26, 0x00	; 0
   12264:	81 83       	std	Z+1, r24	; 0x01
   12266:	92 83       	std	Z+2, r25	; 0x02
   12268:	a3 83       	std	Z+3, r26	; 0x03
   1226a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
#endif
    return(0);
   1226e:	80 e0       	ldi	r24, 0x00	; 0
   12270:	90 e0       	ldi	r25, 0x00	; 0
}
   12272:	cd b7       	in	r28, 0x3d	; 61
   12274:	de b7       	in	r29, 0x3e	; 62
   12276:	29 96       	adiw	r28, 0x09	; 9
   12278:	e3 e0       	ldi	r30, 0x03	; 3
   1227a:	0c 94 be e7 	jmp	0x1cf7c	; 0x1cf7c <__epilogue_restores__+0x1e>

0001227e <listen_cleanup>:
/// - Used to cleanup or close at the end of any listen address transition.
/// - Also called when GPIB bus reset or unlisten.
/// For now we just use this to close printer capture
/// @return  void
void listen_cleanup()
{
   1227e:	00 d0       	rcall	.+0      	; 0x12280 <listen_cleanup+0x2>
   12280:	1f 92       	push	r1
    if(listening_last)
   12282:	60 91 e0 1e 	lds	r22, 0x1EE0	; 0x801ee0 <listening_last>
   12286:	66 23       	and	r22, r22
   12288:	e1 f0       	breq	.+56     	; 0x122c2 <listen_cleanup+0x44>
    {
        int index = find_device(PRINTER_TYPE, listening_last, BASE_MLA);
   1228a:	70 e0       	ldi	r23, 0x00	; 0
   1228c:	40 e2       	ldi	r20, 0x20	; 32
   1228e:	50 e0       	ldi	r21, 0x00	; 0
   12290:	84 e0       	ldi	r24, 0x04	; 4
   12292:	90 e0       	ldi	r25, 0x00	; 0
   12294:	45 d6       	rcall	.+3210   	; 0x12f20 <find_device>
        if(index == -1)
   12296:	8f 3f       	cpi	r24, 0xFF	; 255
   12298:	a1 f0       	breq	.+40     	; 0x122c2 <listen_cleanup+0x44>
            return;

//We should not set the active device globally
//FIXME if we have to then printer close should temprarily do so
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1229a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1229e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   122a2:	84 72       	andi	r24, 0x24	; 36
   122a4:	99 27       	eor	r25, r25
   122a6:	89 2b       	or	r24, r25
   122a8:	51 f0       	breq	.+20     	; 0x122be <listen_cleanup+0x40>
            printf("[PRINTER close]\n");
   122aa:	8b e2       	ldi	r24, 0x2B	; 43
   122ac:	92 e1       	ldi	r25, 0x12	; 18
   122ae:	a0 e0       	ldi	r26, 0x00	; 0
   122b0:	ed b7       	in	r30, 0x3d	; 61
   122b2:	fe b7       	in	r31, 0x3e	; 62
   122b4:	81 83       	std	Z+1, r24	; 0x01
   122b6:	92 83       	std	Z+2, r25	; 0x02
   122b8:	a3 83       	std	Z+3, r26	; 0x03
   122ba:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        printer_close();
   122be:	0e 94 0b bf 	call	0x17e16	; 0x17e16 <printer_close>
    }
}
   122c2:	0f 90       	pop	r0
   122c4:	0f 90       	pop	r0
   122c6:	0f 90       	pop	r0
   122c8:	08 95       	ret

000122ca <GPIB_LISTEN>:
/// @param[in] ch 8 bit listen command
///
/// @return  0

int GPIB_LISTEN(uint8_t ch)
{
   122ca:	cf 93       	push	r28
   122cc:	df 93       	push	r29
   122ce:	00 d0       	rcall	.+0      	; 0x122d0 <GPIB_LISTEN+0x6>
   122d0:	00 d0       	rcall	.+0      	; 0x122d2 <GPIB_LISTEN+0x8>
   122d2:	1f 92       	push	r1
   122d4:	c8 2f       	mov	r28, r24
    listening_last = listening;
   122d6:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   122da:	80 93 e0 1e 	sts	0x1EE0, r24	; 0x801ee0 <listening_last>
    listening = ch;
   122de:	c0 93 e6 1e 	sts	0x1EE6, r28	; 0x801ee6 <listening>

    listen_cleanup();
   122e2:	cd df       	rcall	.-102    	; 0x1227e <listen_cleanup>

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///@brief  Universal Unlisten
    if(ch == UNL)
   122e4:	cf 33       	cpi	r28, 0x3F	; 63
   122e6:	19 f5       	brne	.+70     	; 0x1232e <GPIB_LISTEN+0x64>
    {
        listening = 0;
   122e8:	10 92 e6 1e 	sts	0x1EE6, r1	; 0x801ee6 <listening>

#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   122ec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   122f0:	82 ff       	sbrs	r24, 2
   122f2:	74 c0       	rjmp	.+232    	; 0x123dc <GPIB_LISTEN+0x112>
        {
            printf("[UNL]\n");
   122f4:	84 e2       	ldi	r24, 0x24	; 36
   122f6:	93 e1       	ldi	r25, 0x13	; 19
   122f8:	a0 e0       	ldi	r26, 0x00	; 0
   122fa:	ed b7       	in	r30, 0x3d	; 61
   122fc:	fe b7       	in	r31, 0x3e	; 62
   122fe:	81 83       	std	Z+1, r24	; 0x01
   12300:	92 83       	std	Z+2, r25	; 0x02
   12302:	a3 83       	std	Z+3, r26	; 0x03
   12304:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
///@brief add a line break if we both Untalk and Unlisten
            if(lastcmd == UNT)
   12308:	80 91 de 1c 	lds	r24, 0x1CDE	; 0x801cde <lastcmd>
   1230c:	90 91 df 1c 	lds	r25, 0x1CDF	; 0x801cdf <lastcmd+0x1>
   12310:	8f 35       	cpi	r24, 0x5F	; 95
   12312:	91 05       	cpc	r25, r1
   12314:	09 f0       	breq	.+2      	; 0x12318 <GPIB_LISTEN+0x4e>
   12316:	62 c0       	rjmp	.+196    	; 0x123dc <GPIB_LISTEN+0x112>
                printf("\n");
   12318:	82 e2       	ldi	r24, 0x22	; 34
   1231a:	93 e1       	ldi	r25, 0x13	; 19
   1231c:	a0 e0       	ldi	r26, 0x00	; 0
   1231e:	ed b7       	in	r30, 0x3d	; 61
   12320:	fe b7       	in	r31, 0x3e	; 62
   12322:	81 83       	std	Z+1, r24	; 0x01
   12324:	92 83       	std	Z+2, r25	; 0x02
   12326:	a3 83       	std	Z+3, r26	; 0x03
   12328:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1232c:	57 c0       	rjmp	.+174    	; 0x123dc <GPIB_LISTEN+0x112>
#endif
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MLA(ch))
   1232e:	d0 e0       	ldi	r29, 0x00	; 0
   12330:	ce 01       	movw	r24, r28
   12332:	97 db       	rcall	.-2258   	; 0x11a62 <AMIGO_is_MLA>
   12334:	89 2b       	or	r24, r25
   12336:	81 f0       	breq	.+32     	; 0x12358 <GPIB_LISTEN+0x8e>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12338:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1233c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12340:	84 72       	andi	r24, 0x24	; 36
   12342:	99 27       	eor	r25, r25
   12344:	89 2b       	or	r24, r25
   12346:	09 f4       	brne	.+2      	; 0x1234a <GPIB_LISTEN+0x80>
   12348:	49 c0       	rjmp	.+146    	; 0x123dc <GPIB_LISTEN+0x112>
            printf("[LA %02XH AMIGO]\n", 0xff & ch);
   1234a:	ed b7       	in	r30, 0x3d	; 61
   1234c:	fe b7       	in	r31, 0x3e	; 62
   1234e:	d5 83       	std	Z+5, r29	; 0x05
   12350:	c4 83       	std	Z+4, r28	; 0x04
   12352:	80 e1       	ldi	r24, 0x10	; 16
   12354:	93 e1       	ldi	r25, 0x13	; 19
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(SS80_is_MLA(ch))
   12356:	3c c0       	rjmp	.+120    	; 0x123d0 <GPIB_LISTEN+0x106>
   12358:	ce 01       	movw	r24, r28
   1235a:	4d db       	rcall	.-2406   	; 0x119f6 <SS80_is_MLA>
   1235c:	89 2b       	or	r24, r25
   1235e:	79 f0       	breq	.+30     	; 0x1237e <GPIB_LISTEN+0xb4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12360:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12364:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12368:	84 72       	andi	r24, 0x24	; 36
   1236a:	99 27       	eor	r25, r25
   1236c:	89 2b       	or	r24, r25
   1236e:	b1 f1       	breq	.+108    	; 0x123dc <GPIB_LISTEN+0x112>
            printf("[LA %02XH SS80]\n", 0xff & ch);
   12370:	ed b7       	in	r30, 0x3d	; 61
   12372:	fe b7       	in	r31, 0x3e	; 62
   12374:	d5 83       	std	Z+5, r29	; 0x05
   12376:	c4 83       	std	Z+4, r28	; 0x04
   12378:	8f ef       	ldi	r24, 0xFF	; 255
   1237a:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }

    if(PRINTER_is_MLA(ch))
   1237c:	29 c0       	rjmp	.+82     	; 0x123d0 <GPIB_LISTEN+0x106>
   1237e:	ce 01       	movw	r24, r28
   12380:	a6 db       	rcall	.-2228   	; 0x11ace <PRINTER_is_MLA>
   12382:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12386:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1238a:	89 2b       	or	r24, r25
   1238c:	c9 f0       	breq	.+50     	; 0x123c0 <GPIB_LISTEN+0xf6>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1238e:	24 72       	andi	r18, 0x24	; 36
   12390:	33 27       	eor	r19, r19
   12392:	23 2b       	or	r18, r19
   12394:	61 f0       	breq	.+24     	; 0x123ae <GPIB_LISTEN+0xe4>
            printf("[LA %02XH PRINTER]\n", 0xff & ch);
   12396:	ed b7       	in	r30, 0x3d	; 61
   12398:	fe b7       	in	r31, 0x3e	; 62
   1239a:	d5 83       	std	Z+5, r29	; 0x05
   1239c:	c4 83       	std	Z+4, r28	; 0x04
   1239e:	8b ee       	ldi	r24, 0xEB	; 235
   123a0:	92 e1       	ldi	r25, 0x12	; 18
   123a2:	a0 e0       	ldi	r26, 0x00	; 0
   123a4:	81 83       	std	Z+1, r24	; 0x01
   123a6:	92 83       	std	Z+2, r25	; 0x02
   123a8:	a3 83       	std	Z+3, r26	; 0x03
   123aa:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
        if(talking != UNT)
   123ae:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   123b2:	8f 35       	cpi	r24, 0x5F	; 95
   123b4:	99 f0       	breq	.+38     	; 0x123dc <GPIB_LISTEN+0x112>
        {
///@brief NULL creates a file named based on date and time
// FIXME use printer structure to permit multiple printers
            printer_open(NULL);
   123b6:	80 e0       	ldi	r24, 0x00	; 0
   123b8:	90 e0       	ldi	r25, 0x00	; 0
   123ba:	0e 94 63 bf 	call	0x17ec6	; 0x17ec6 <printer_open>
   123be:	0e c0       	rjmp	.+28     	; 0x123dc <GPIB_LISTEN+0x112>
        }
        return(0);
    }
#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   123c0:	22 ff       	sbrs	r18, 2
   123c2:	0c c0       	rjmp	.+24     	; 0x123dc <GPIB_LISTEN+0x112>
        printf("[LA %02XH]\n", 0xff & ch);
   123c4:	ed b7       	in	r30, 0x3d	; 61
   123c6:	fe b7       	in	r31, 0x3e	; 62
   123c8:	d5 83       	std	Z+5, r29	; 0x05
   123ca:	c4 83       	std	Z+4, r28	; 0x04
   123cc:	8f ed       	ldi	r24, 0xDF	; 223
   123ce:	92 e1       	ldi	r25, 0x12	; 18
   123d0:	a0 e0       	ldi	r26, 0x00	; 0
   123d2:	81 83       	std	Z+1, r24	; 0x01
   123d4:	92 83       	std	Z+2, r25	; 0x02
   123d6:	a3 83       	std	Z+3, r26	; 0x03
   123d8:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
    return(0);
}                                                 // Listen Primary Address group
   123dc:	80 e0       	ldi	r24, 0x00	; 0
   123de:	90 e0       	ldi	r25, 0x00	; 0
   123e0:	cd b7       	in	r28, 0x3d	; 61
   123e2:	de b7       	in	r29, 0x3e	; 62
   123e4:	25 96       	adiw	r28, 0x05	; 5
   123e6:	e2 e0       	ldi	r30, 0x02	; 2
   123e8:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

000123ec <gpib_task>:
/// - Reads and processes GPIB control or data bytes
/// and calls emulator task.
/// @return  void

void gpib_task(void)
{
   123ec:	cf 93       	push	r28
   123ee:	df 93       	push	r29
    uint16_t val;
    uint8_t ch;
    uint16_t status;

    gpib_init_devices();                          // Init devices
   123f0:	92 db       	rcall	.-2268   	; 0x11b16 <gpib_init_devices>
	// gpib_state_init() is now done in gpib_init_devices
    // gpib_state_init();                            // Init PPR talking and listening states

    gpib_log_fp = NULL;
   123f2:	10 92 57 19 	sts	0x1957, r1	; 0x801957 <gpib_log_fp+0x1>
   123f6:	10 92 56 19 	sts	0x1956, r1	; 0x801956 <gpib_log_fp>

    while(1)
    {


        val = gpib_read_byte(NO_TRACE);
   123fa:	80 e0       	ldi	r24, 0x00	; 0
   123fc:	90 e0       	ldi	r25, 0x00	; 0
   123fe:	4f d8       	rcall	.-3938   	; 0x1149e <gpib_read_byte>
   12400:	ec 01       	movw	r28, r24

#if SDEBUG
        if(debuglevel & GPIB_TOP_LEVEL_BUS_DECODE)
   12402:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12406:	83 ff       	sbrs	r24, 3
            gpib_decode(val);
   12408:	02 c0       	rjmp	.+4      	; 0x1240e <gpib_task+0x22>
   1240a:	ce 01       	movw	r24, r28
   1240c:	4e d9       	rcall	.-3428   	; 0x116aa <gpib_decode>
#endif
        status = gpib_error_test(val);
   1240e:	ce 01       	movw	r24, r28
   12410:	1d dc       	rcall	.-1990   	; 0x11c4c <gpib_error_test>
        if(status & ABORT_FLAG)
        {
            return;
        }
        else if(status & MEDIA_FLAG)
   12412:	9c 01       	movw	r18, r24
   12414:	23 70       	andi	r18, 0x03	; 3
   12416:	33 27       	eor	r19, r19
   12418:	23 2b       	or	r18, r19
   1241a:	09 f0       	breq	.+2      	; 0x1241e <gpib_task+0x32>
   1241c:	43 c0       	rjmp	.+134    	; 0x124a4 <gpib_task+0xb8>
        {
            return;
        }
        else if(status)
   1241e:	89 2b       	or	r24, r25
   12420:	61 f7       	brne	.-40     	; 0x123fa <gpib_task+0xe>
        {
            continue;
        }
///@brief GPIB commands with ATN set (COMMANDS)
        if(val & ATN_FLAG)
   12422:	d2 ff       	sbrs	r29, 2
   12424:	26 c0       	rjmp	.+76     	; 0x12472 <gpib_task+0x86>
        {
            ch = val & CMD_MASK;
   12426:	8c 2f       	mov	r24, r28
   12428:	8f 77       	andi	r24, 0x7F	; 127
            if(ch <= 0x1f)
   1242a:	80 32       	cpi	r24, 0x20	; 32
            {
                GPIB(ch);
   1242c:	10 f4       	brcc	.+4      	; 0x12432 <gpib_task+0x46>
   1242e:	52 dd       	rcall	.-1372   	; 0x11ed4 <GPIB>
                continue;
   12430:	e4 cf       	rjmp	.-56     	; 0x123fa <gpib_task+0xe>
            }
///@brief GPIB listen
            if(ch >= 0x20 && ch <= 0x3f)
   12432:	90 ee       	ldi	r25, 0xE0	; 224
   12434:	98 0f       	add	r25, r24
   12436:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_LISTEN(ch);
   12438:	10 f4       	brcc	.+4      	; 0x1243e <gpib_task+0x52>
   1243a:	47 df       	rcall	.-370    	; 0x122ca <GPIB_LISTEN>
                continue;
   1243c:	de cf       	rjmp	.-68     	; 0x123fa <gpib_task+0xe>
            }
///@brief GPIB talk
            if(ch >= 0x40 && ch <= 0x5f)
   1243e:	90 ec       	ldi	r25, 0xC0	; 192
   12440:	98 0f       	add	r25, r24
   12442:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_TALK(ch);
   12444:	10 f4       	brcc	.+4      	; 0x1244a <gpib_task+0x5e>
   12446:	08 de       	rcall	.-1008   	; 0x12058 <GPIB_TALK>
                continue;
   12448:	d8 cf       	rjmp	.-80     	; 0x123fa <gpib_task+0xe>
            }

///@brief GPIB secondary
/// Note: We know ch >= 0x60 && ch <= 0x7f because of previous tests

            if( listening && lastcmd == UNT)
   1244a:	90 91 e6 1e 	lds	r25, 0x1EE6	; 0x801ee6 <listening>
   1244e:	99 23       	and	r25, r25
   12450:	59 f0       	breq	.+22     	; 0x12468 <gpib_task+0x7c>
   12452:	20 91 de 1c 	lds	r18, 0x1CDE	; 0x801cde <lastcmd>
   12456:	30 91 df 1c 	lds	r19, 0x1CDF	; 0x801cdf <lastcmd+0x1>
   1245a:	2f 35       	cpi	r18, 0x5F	; 95
   1245c:	31 05       	cpc	r19, r1
            {
                secondary = 0;
   1245e:	21 f4       	brne	.+8      	; 0x12468 <gpib_task+0x7c>
   12460:	10 92 e5 1e 	sts	0x1EE5, r1	; 0x801ee5 <secondary>
                GPIB_SECONDARY_ADDRESS(ch);
   12464:	91 de       	rcall	.-734    	; 0x12188 <GPIB_SECONDARY_ADDRESS>
                continue;
   12466:	c9 cf       	rjmp	.-110    	; 0x123fa <gpib_task+0xe>
            }

///@brief We have to keep track of secondary address that may happen out of order with older AMIGO protocol
/// this method works for SS80 as well
            secondary = ch;
   12468:	80 93 e5 1e 	sts	0x1EE5, r24	; 0x801ee5 <secondary>
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(secondary,0);
   1246c:	60 e0       	ldi	r22, 0x00	; 0
   1246e:	90 e0       	ldi	r25, 0x00	; 0
        }                                         // GPIB ATN

///@brief GPIB commands without ATN set (DATA)
        else                                      // GPIB Data
        {
            if ( PRINTER_is_MLA(listening) )
   12470:	12 c0       	rjmp	.+36     	; 0x12496 <gpib_task+0xaa>
   12472:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   12476:	90 e0       	ldi	r25, 0x00	; 0
   12478:	2a db       	rcall	.-2476   	; 0x11ace <PRINTER_is_MLA>
   1247a:	89 2b       	or	r24, r25
   1247c:	29 f0       	breq	.+10     	; 0x12488 <gpib_task+0x9c>
            {
                printer_buffer( 0xff & val );
   1247e:	ce 01       	movw	r24, r28
   12480:	99 27       	eor	r25, r25
   12482:	0e 94 06 c0 	call	0x1800c	; 0x1800c <printer_buffer>
                continue;
   12486:	b9 cf       	rjmp	.-142    	; 0x123fa <gpib_task+0xe>
            }

            if(!secondary)
   12488:	80 91 e5 1e 	lds	r24, 0x1EE5	; 0x801ee5 <secondary>
   1248c:	88 23       	and	r24, r24
                continue;

// ONLY secondar commands at this point
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(val,1);
   1248e:	09 f4       	brne	.+2      	; 0x12492 <gpib_task+0xa6>
   12490:	b4 cf       	rjmp	.-152    	; 0x123fa <gpib_task+0xe>
   12492:	61 e0       	ldi	r22, 0x01	; 1
   12494:	ce 01       	movw	r24, r28
            status = gpib_error_test(status);
   12496:	67 dc       	rcall	.-1842   	; 0x11d66 <GPIB_COMMANDS>
   12498:	d9 db       	rcall	.-2126   	; 0x11c4c <gpib_error_test>

            if(status & ( ABORT_FLAG | MEDIA_FLAG ))
   1249a:	83 70       	andi	r24, 0x03	; 3
   1249c:	99 27       	eor	r25, r25
   1249e:	89 2b       	or	r24, r25
   124a0:	09 f4       	brne	.+2      	; 0x124a4 <gpib_task+0xb8>
   124a2:	ab cf       	rjmp	.-170    	; 0x123fa <gpib_task+0xe>
            }
            continue;
        }
    }                                             // while(1)
    return;
}
   124a4:	df 91       	pop	r29
   124a6:	cf 91       	pop	r28
   124a8:	08 95       	ret

000124aa <talk_cleanup>:
/// - Not used in this emulator.
///
/// @return  void

void talk_cleanup()
{
   124aa:	08 95       	ret

000124ac <gpib_help>:
/// @brief
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void
void gpib_help(int full)
{
   124ac:	cf 93       	push	r28
   124ae:	df 93       	push	r29
   124b0:	00 d0       	rcall	.+0      	; 0x124b2 <gpib_help+0x6>
   124b2:	1f 92       	push	r1
   124b4:	ec 01       	movw	r28, r24
    printf("gpib      help\n");
   124b6:	8d ee       	ldi	r24, 0xED	; 237
   124b8:	95 e1       	ldi	r25, 0x15	; 21
   124ba:	a0 e0       	ldi	r26, 0x00	; 0
   124bc:	ed b7       	in	r30, 0x3d	; 61
   124be:	fe b7       	in	r31, 0x3e	; 62
   124c0:	81 83       	std	Z+1, r24	; 0x01
   124c2:	92 83       	std	Z+2, r25	; 0x02
   124c4:	a3 83       	std	Z+3, r26	; 0x03
   124c6:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    if(full)
   124ca:	cd 2b       	or	r28, r29
   124cc:	51 f0       	breq	.+20     	; 0x124e2 <gpib_help+0x36>
    {
        printf("Note: gpib prefix is optional\n"
   124ce:	8c ee       	ldi	r24, 0xEC	; 236
   124d0:	94 e1       	ldi	r25, 0x14	; 20
   124d2:	a0 e0       	ldi	r26, 0x00	; 0
   124d4:	ed b7       	in	r30, 0x3d	; 61
   124d6:	fe b7       	in	r31, 0x3e	; 62
   124d8:	81 83       	std	Z+1, r24	; 0x01
   124da:	92 83       	std	Z+2, r25	; 0x02
   124dc:	a3 83       	std	Z+3, r26	; 0x03
   124de:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            "gpib ppr_set XX\n"
            "\n"
#endif
            );
	}
}
   124e2:	cd b7       	in	r28, 0x3d	; 61
   124e4:	de b7       	in	r29, 0x3e	; 62
   124e6:	23 96       	adiw	r28, 0x03	; 3
   124e8:	e2 e0       	ldi	r30, 0x02	; 2
   124ea:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

000124ee <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   124ee:	a5 e0       	ldi	r26, 0x05	; 5
   124f0:	b0 e0       	ldi	r27, 0x00	; 0
   124f2:	ed e7       	ldi	r30, 0x7D	; 125
   124f4:	f2 e9       	ldi	r31, 0x92	; 146
   124f6:	0c 94 9d e7 	jmp	0x1cf3a	; 0x1cf3a <__prologue_saves__+0x14>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   124fa:	fb 01       	movw	r30, r22
   124fc:	00 81       	ld	r16, Z
   124fe:	11 81       	ldd	r17, Z+1	; 0x01

    if(!ptr)
   12500:	01 15       	cp	r16, r1
   12502:	11 05       	cpc	r17, r1
   12504:	19 f4       	brne	.+6      	; 0x1250c <gpib_tests+0x1e>
        return(0);
   12506:	80 e0       	ldi	r24, 0x00	; 0
   12508:	90 e0       	ldi	r25, 0x00	; 0
   1250a:	8f c0       	rjmp	.+286    	; 0x1262a <gpib_tests+0x13c>
   1250c:	7b 01       	movw	r14, r22
   1250e:	6c 01       	movw	r12, r24

    if( MATCH(ptr,"gpib") )
   12510:	64 e9       	ldi	r22, 0x94	; 148
   12512:	7d e0       	ldi	r23, 0x0D	; 13
   12514:	c8 01       	movw	r24, r16
   12516:	0e 94 aa 32 	call	0x6554	; 0x6554 <MATCH>
   1251a:	89 2b       	or	r24, r25
   1251c:	a1 f0       	breq	.+40     	; 0x12546 <gpib_tests+0x58>
    {
        ptr = argv[ind++];
   1251e:	f7 01       	movw	r30, r14
   12520:	02 81       	ldd	r16, Z+2	; 0x02
   12522:	13 81       	ldd	r17, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   12524:	01 15       	cp	r16, r1
   12526:	11 05       	cpc	r17, r1
   12528:	21 f4       	brne	.+8      	; 0x12532 <gpib_tests+0x44>
        {
            gpib_help(1);
   1252a:	81 e0       	ldi	r24, 0x01	; 1
   1252c:	90 e0       	ldi	r25, 0x00	; 0
   1252e:	be df       	rcall	.-132    	; 0x124ac <gpib_help>
   12530:	7a c0       	rjmp	.+244    	; 0x12626 <gpib_tests+0x138>
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   12532:	62 e6       	ldi	r22, 0x62	; 98
   12534:	76 e1       	ldi	r23, 0x16	; 22
   12536:	c8 01       	movw	r24, r16
   12538:	0e 94 aa 32 	call	0x6554	; 0x6554 <MATCH>
   1253c:	89 2b       	or	r24, r25
   1253e:	a9 f7       	brne	.-22     	; 0x1252a <gpib_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
   12540:	c2 e0       	ldi	r28, 0x02	; 2
   12542:	d0 e0       	ldi	r29, 0x00	; 0
   12544:	02 c0       	rjmp	.+4      	; 0x1254a <gpib_tests+0x5c>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   12546:	c1 e0       	ldi	r28, 0x01	; 1
   12548:	d0 e0       	ldi	r29, 0x00	; 0
            gpib_help(1);
            return(1);
        }
    }

    if (MATCHI(ptr,"debug") )
   1254a:	69 e9       	ldi	r22, 0x99	; 153
   1254c:	7d e0       	ldi	r23, 0x0D	; 13
   1254e:	c8 01       	movw	r24, r16
   12550:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   12554:	89 2b       	or	r24, r25
   12556:	29 f1       	breq	.+74     	; 0x125a2 <gpib_tests+0xb4>
    {
        ptr = argv[ind];
   12558:	fe 01       	movw	r30, r28
   1255a:	ee 0f       	add	r30, r30
   1255c:	ff 1f       	adc	r31, r31
   1255e:	ee 0d       	add	r30, r14
   12560:	ff 1d       	adc	r31, r15
        if(*ptr == '=')
   12562:	01 90       	ld	r0, Z+
   12564:	f0 81       	ld	r31, Z
   12566:	e0 2d       	mov	r30, r0
   12568:	80 81       	ld	r24, Z
   1256a:	8d 33       	cpi	r24, 0x3D	; 61
   1256c:	09 f4       	brne	.+2      	; 0x12570 <gpib_tests+0x82>
            ++ind;
   1256e:	21 96       	adiw	r28, 0x01	; 1
        debuglevel = get_value(argv[ind]);
   12570:	cc 0f       	add	r28, r28
   12572:	dd 1f       	adc	r29, r29
   12574:	ce 0d       	add	r28, r14
   12576:	df 1d       	adc	r29, r15
   12578:	88 81       	ld	r24, Y
   1257a:	99 81       	ldd	r25, Y+1	; 0x01
   1257c:	0e 94 b5 33 	call	0x676a	; 0x676a <get_value>
   12580:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   12584:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   12588:	ed b7       	in	r30, 0x3d	; 61
   1258a:	fe b7       	in	r31, 0x3e	; 62
   1258c:	75 83       	std	Z+5, r23	; 0x05
   1258e:	64 83       	std	Z+4, r22	; 0x04
   12590:	8f ed       	ldi	r24, 0xDF	; 223
   12592:	94 e1       	ldi	r25, 0x14	; 20
   12594:	a0 e0       	ldi	r26, 0x00	; 0
   12596:	81 83       	std	Z+1, r24	; 0x01
   12598:	92 83       	std	Z+2, r25	; 0x02
   1259a:	a3 83       	std	Z+3, r26	; 0x03
   1259c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   125a0:	42 c0       	rjmp	.+132    	; 0x12626 <gpib_tests+0x138>
        return(1);
    }

    if (MATCHI(ptr,"elapsed_reset") )
   125a2:	6f e9       	ldi	r22, 0x9F	; 159
   125a4:	7d e0       	ldi	r23, 0x0D	; 13
   125a6:	c8 01       	movw	r24, r16
   125a8:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   125ac:	89 2b       	or	r24, r25
   125ae:	19 f0       	breq	.+6      	; 0x125b6 <gpib_tests+0xc8>
    {
        gpib_timer_elapsed_begin();
   125b0:	0e 94 f1 85 	call	0x10be2	; 0x10be2 <gpib_timer_elapsed_begin>
   125b4:	38 c0       	rjmp	.+112    	; 0x12626 <gpib_tests+0x138>
        return(1);
    }

    if (MATCHI(ptr,"elapsed") )
   125b6:	6d ea       	ldi	r22, 0xAD	; 173
   125b8:	7d e0       	ldi	r23, 0x0D	; 13
   125ba:	c8 01       	movw	r24, r16
   125bc:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   125c0:	89 2b       	or	r24, r25
   125c2:	29 f0       	breq	.+10     	; 0x125ce <gpib_tests+0xe0>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   125c4:	85 eb       	ldi	r24, 0xB5	; 181
   125c6:	9d e0       	ldi	r25, 0x0D	; 13
   125c8:	0e 94 03 86 	call	0x10c06	; 0x10c06 <gpib_timer_elapsed_end>
   125cc:	2c c0       	rjmp	.+88     	; 0x12626 <gpib_tests+0x138>
        return(1);
    }

    if (MATCHI(ptr,"task") )
   125ce:	63 ec       	ldi	r22, 0xC3	; 195
   125d0:	7d e0       	ldi	r23, 0x0D	; 13
   125d2:	c8 01       	movw	r24, r16
   125d4:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   125d8:	89 2b       	or	r24, r25
    {
        gpib_task();
   125da:	11 f0       	breq	.+4      	; 0x125e0 <gpib_tests+0xf2>
   125dc:	07 df       	rcall	.-498    	; 0x123ec <gpib_task>
   125de:	23 c0       	rjmp	.+70     	; 0x12626 <gpib_tests+0x138>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   125e0:	21 96       	adiw	r28, 0x01	; 1
   125e2:	96 01       	movw	r18, r12
   125e4:	ae 01       	movw	r20, r28
   125e6:	68 ec       	ldi	r22, 0xC8	; 200
   125e8:	7d e0       	ldi	r23, 0x0D	; 13
   125ea:	c8 01       	movw	r24, r16
   125ec:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <MATCHARGS>
   125f0:	89 2b       	or	r24, r25
   125f2:	09 f4       	brne	.+2      	; 0x125f6 <gpib_tests+0x108>
   125f4:	88 cf       	rjmp	.-240    	; 0x12506 <gpib_tests+0x18>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   125f6:	cc 0f       	add	r28, r28
   125f8:	dd 1f       	adc	r29, r29
   125fa:	ce 0d       	add	r28, r14
   125fc:	df 1d       	adc	r29, r15
   125fe:	88 81       	ld	r24, Y
   12600:	99 81       	ldd	r25, Y+1	; 0x01
   12602:	00 97       	sbiw	r24, 0x00	; 0
   12604:	51 f0       	breq	.+20     	; 0x1261a <gpib_tests+0x12c>
   12606:	6e ec       	ldi	r22, 0xCE	; 206
   12608:	7d e0       	ldi	r23, 0x0D	; 13
   1260a:	0e 94 aa 32 	call	0x6554	; 0x6554 <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   1260e:	61 e0       	ldi	r22, 0x01	; 1
   12610:	70 e0       	ldi	r23, 0x00	; 0
   12612:	89 2b       	or	r24, r25
   12614:	21 f4       	brne	.+8      	; 0x1261e <gpib_tests+0x130>
   12616:	60 e0       	ldi	r22, 0x00	; 0
   12618:	02 c0       	rjmp	.+4      	; 0x1261e <gpib_tests+0x130>
   1261a:	60 e0       	ldi	r22, 0x00	; 0
   1261c:	70 e0       	ldi	r23, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   1261e:	22 97       	sbiw	r28, 0x02	; 2
   12620:	88 81       	ld	r24, Y
   12622:	99 81       	ldd	r25, Y+1	; 0x01
   12624:	81 da       	rcall	.-2814   	; 0x11b28 <gpib_trace_task>
        return(1);
   12626:	81 e0       	ldi	r24, 0x01	; 1
   12628:	90 e0       	ldi	r25, 0x00	; 0
        return(1);
    }
#endif                                        // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   1262a:	cd b7       	in	r28, 0x3d	; 61
   1262c:	de b7       	in	r29, 0x3e	; 62
   1262e:	25 96       	adiw	r28, 0x05	; 5
   12630:	e8 e0       	ldi	r30, 0x08	; 8
   12632:	0c 94 b9 e7 	jmp	0x1cf72	; 0x1cf72 <__epilogue_restores__+0x14>

00012636 <tok_index>:

	if(index_ppr(ppr) == -1)
		return(1);
	printf("WARNING PPR (%d) already in use\n", (int)ppr);
	return(0);
}
   12636:	0f 93       	push	r16
   12638:	1f 93       	push	r17
   1263a:	cf 93       	push	r28
   1263c:	8c 01       	movw	r16, r24
   1263e:	c0 e0       	ldi	r28, 0x00	; 0
   12640:	24 e0       	ldi	r18, 0x04	; 4
   12642:	c2 02       	muls	r28, r18
   12644:	f0 01       	movw	r30, r0
   12646:	11 24       	eor	r1, r1
   12648:	ec 53       	subi	r30, 0x3C	; 60
   1264a:	fe 4f       	sbci	r31, 0xFE	; 254
   1264c:	82 81       	ldd	r24, Z+2	; 0x02
   1264e:	93 81       	ldd	r25, Z+3	; 0x03
   12650:	01 96       	adiw	r24, 0x01	; 1
   12652:	49 f0       	breq	.+18     	; 0x12666 <tok_index+0x30>
   12654:	60 81       	ld	r22, Z
   12656:	71 81       	ldd	r23, Z+1	; 0x01
   12658:	c8 01       	movw	r24, r16
   1265a:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   1265e:	89 2b       	or	r24, r25
   12660:	21 f4       	brne	.+8      	; 0x1266a <tok_index+0x34>
   12662:	cf 5f       	subi	r28, 0xFF	; 255
   12664:	ed cf       	rjmp	.-38     	; 0x12640 <tok_index+0xa>
   12666:	8f ef       	ldi	r24, 0xFF	; 255
   12668:	01 c0       	rjmp	.+2      	; 0x1266c <tok_index+0x36>
   1266a:	8c 2f       	mov	r24, r28
   1266c:	cf 91       	pop	r28
   1266e:	1f 91       	pop	r17
   12670:	0f 91       	pop	r16
   12672:	08 95       	ret

00012674 <tok_name>:
   12674:	e4 ec       	ldi	r30, 0xC4	; 196
   12676:	f1 e0       	ldi	r31, 0x01	; 1
   12678:	20 e0       	ldi	r18, 0x00	; 0
   1267a:	30 e0       	ldi	r19, 0x00	; 0
   1267c:	90 e0       	ldi	r25, 0x00	; 0
   1267e:	42 81       	ldd	r20, Z+2	; 0x02
   12680:	53 81       	ldd	r21, Z+3	; 0x03
   12682:	4f 3f       	cpi	r20, 0xFF	; 255
   12684:	6f ef       	ldi	r22, 0xFF	; 255
   12686:	56 07       	cpc	r21, r22
   12688:	89 f0       	breq	.+34     	; 0x126ac <tok_name+0x38>
   1268a:	34 96       	adiw	r30, 0x04	; 4
   1268c:	48 17       	cp	r20, r24
   1268e:	59 07       	cpc	r21, r25
   12690:	51 f4       	brne	.+20     	; 0x126a6 <tok_name+0x32>
   12692:	22 0f       	add	r18, r18
   12694:	33 1f       	adc	r19, r19
   12696:	22 0f       	add	r18, r18
   12698:	33 1f       	adc	r19, r19
   1269a:	f9 01       	movw	r30, r18
   1269c:	ec 53       	subi	r30, 0x3C	; 60
   1269e:	fe 4f       	sbci	r31, 0xFE	; 254
   126a0:	80 81       	ld	r24, Z
   126a2:	91 81       	ldd	r25, Z+1	; 0x01
   126a4:	08 95       	ret
   126a6:	2f 5f       	subi	r18, 0xFF	; 255
   126a8:	3f 4f       	sbci	r19, 0xFF	; 255
   126aa:	e9 cf       	rjmp	.-46     	; 0x1267e <tok_name+0xa>
   126ac:	8e e0       	ldi	r24, 0x0E	; 14
   126ae:	9c e0       	ldi	r25, 0x0C	; 12
   126b0:	08 95       	ret

000126b2 <print_tok_val>:
   126b2:	cf 92       	push	r12
   126b4:	df 92       	push	r13
   126b6:	ef 92       	push	r14
   126b8:	ff 92       	push	r15
   126ba:	0f 93       	push	r16
   126bc:	1f 93       	push	r17
   126be:	cf 93       	push	r28
   126c0:	ad b7       	in	r26, 0x3d	; 61
   126c2:	be b7       	in	r27, 0x3e	; 62
   126c4:	1d 97       	sbiw	r26, 0x0d	; 13
   126c6:	0f b6       	in	r0, 0x3f	; 63
   126c8:	f8 94       	cli
   126ca:	be bf       	out	0x3e, r27	; 62
   126cc:	0f be       	out	0x3f, r0	; 63
   126ce:	ad bf       	out	0x3d, r26	; 61
   126d0:	c6 2f       	mov	r28, r22
   126d2:	69 01       	movw	r12, r18
   126d4:	7a 01       	movw	r14, r20
   126d6:	ce df       	rcall	.-100    	; 0x12674 <tok_name>
   126d8:	8c 01       	movw	r16, r24
   126da:	cc 23       	and	r28, r28
   126dc:	31 f0       	breq	.+12     	; 0x126ea <print_tok_val+0x38>
   126de:	80 e2       	ldi	r24, 0x20	; 32
   126e0:	90 e0       	ldi	r25, 0x00	; 0
   126e2:	0e 94 db 76 	call	0xedb6	; 0xedb6 <putchar>
   126e6:	c1 50       	subi	r28, 0x01	; 1
   126e8:	f8 cf       	rjmp	.-16     	; 0x126da <print_tok_val+0x28>
   126ea:	ed b7       	in	r30, 0x3d	; 61
   126ec:	fe b7       	in	r31, 0x3e	; 62
   126ee:	c2 86       	std	Z+10, r12	; 0x0a
   126f0:	d3 86       	std	Z+11, r13	; 0x0b
   126f2:	e4 86       	std	Z+12, r14	; 0x0c
   126f4:	f5 86       	std	Z+13, r15	; 0x0d
   126f6:	c6 82       	std	Z+6, r12	; 0x06
   126f8:	d7 82       	std	Z+7, r13	; 0x07
   126fa:	e0 86       	std	Z+8, r14	; 0x08
   126fc:	f1 86       	std	Z+9, r15	; 0x09
   126fe:	15 83       	std	Z+5, r17	; 0x05
   12700:	04 83       	std	Z+4, r16	; 0x04
   12702:	80 e6       	ldi	r24, 0x60	; 96
   12704:	90 e2       	ldi	r25, 0x20	; 32
   12706:	a0 e0       	ldi	r26, 0x00	; 0
   12708:	81 83       	std	Z+1, r24	; 0x01
   1270a:	92 83       	std	Z+2, r25	; 0x02
   1270c:	a3 83       	std	Z+3, r26	; 0x03
   1270e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   12712:	ad b7       	in	r26, 0x3d	; 61
   12714:	be b7       	in	r27, 0x3e	; 62
   12716:	1d 96       	adiw	r26, 0x0d	; 13
   12718:	0f b6       	in	r0, 0x3f	; 63
   1271a:	f8 94       	cli
   1271c:	be bf       	out	0x3e, r27	; 62
   1271e:	0f be       	out	0x3f, r0	; 63
   12720:	ad bf       	out	0x3d, r26	; 61
   12722:	cf 91       	pop	r28
   12724:	1f 91       	pop	r17
   12726:	0f 91       	pop	r16
   12728:	ff 90       	pop	r15
   1272a:	ef 90       	pop	r14
   1272c:	df 90       	pop	r13
   1272e:	cf 90       	pop	r12
   12730:	08 95       	ret

00012732 <print_tok_str>:
   12732:	ef 92       	push	r14
   12734:	ff 92       	push	r15
   12736:	0f 93       	push	r16
   12738:	1f 93       	push	r17
   1273a:	cf 93       	push	r28
   1273c:	ad b7       	in	r26, 0x3d	; 61
   1273e:	be b7       	in	r27, 0x3e	; 62
   12740:	17 97       	sbiw	r26, 0x07	; 7
   12742:	0f b6       	in	r0, 0x3f	; 63
   12744:	f8 94       	cli
   12746:	be bf       	out	0x3e, r27	; 62
   12748:	0f be       	out	0x3f, r0	; 63
   1274a:	ad bf       	out	0x3d, r26	; 61
   1274c:	c6 2f       	mov	r28, r22
   1274e:	7a 01       	movw	r14, r20
   12750:	91 df       	rcall	.-222    	; 0x12674 <tok_name>
   12752:	8c 01       	movw	r16, r24
   12754:	cc 23       	and	r28, r28
   12756:	31 f0       	breq	.+12     	; 0x12764 <print_tok_str+0x32>
   12758:	80 e2       	ldi	r24, 0x20	; 32
   1275a:	90 e0       	ldi	r25, 0x00	; 0
   1275c:	0e 94 db 76 	call	0xedb6	; 0xedb6 <putchar>
   12760:	c1 50       	subi	r28, 0x01	; 1
   12762:	f8 cf       	rjmp	.-16     	; 0x12754 <print_tok_str+0x22>
   12764:	ed b7       	in	r30, 0x3d	; 61
   12766:	fe b7       	in	r31, 0x3e	; 62
   12768:	f7 82       	std	Z+7, r15	; 0x07
   1276a:	e6 82       	std	Z+6, r14	; 0x06
   1276c:	15 83       	std	Z+5, r17	; 0x05
   1276e:	04 83       	std	Z+4, r16	; 0x04
   12770:	84 e5       	ldi	r24, 0x54	; 84
   12772:	90 e2       	ldi	r25, 0x20	; 32
   12774:	a0 e0       	ldi	r26, 0x00	; 0
   12776:	81 83       	std	Z+1, r24	; 0x01
   12778:	92 83       	std	Z+2, r25	; 0x02
   1277a:	a3 83       	std	Z+3, r26	; 0x03
   1277c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   12780:	ad b7       	in	r26, 0x3d	; 61
   12782:	be b7       	in	r27, 0x3e	; 62
   12784:	17 96       	adiw	r26, 0x07	; 7
   12786:	0f b6       	in	r0, 0x3f	; 63
   12788:	f8 94       	cli
   1278a:	be bf       	out	0x3e, r27	; 62
   1278c:	0f be       	out	0x3f, r0	; 63
   1278e:	ad bf       	out	0x3d, r26	; 61
   12790:	cf 91       	pop	r28
   12792:	1f 91       	pop	r17
   12794:	0f 91       	pop	r16
   12796:	ff 90       	pop	r15
   12798:	ef 90       	pop	r14
   1279a:	08 95       	ret

0001279c <print_tok>:
   1279c:	0f 93       	push	r16
   1279e:	1f 93       	push	r17
   127a0:	cf 93       	push	r28
   127a2:	00 d0       	rcall	.+0      	; 0x127a4 <print_tok+0x8>
   127a4:	00 d0       	rcall	.+0      	; 0x127a6 <print_tok+0xa>
   127a6:	1f 92       	push	r1
   127a8:	c6 2f       	mov	r28, r22
   127aa:	64 df       	rcall	.-312    	; 0x12674 <tok_name>
   127ac:	8c 01       	movw	r16, r24
   127ae:	cc 23       	and	r28, r28
   127b0:	31 f0       	breq	.+12     	; 0x127be <print_tok+0x22>
   127b2:	80 e2       	ldi	r24, 0x20	; 32
   127b4:	90 e0       	ldi	r25, 0x00	; 0
   127b6:	0e 94 db 76 	call	0xedb6	; 0xedb6 <putchar>
   127ba:	c1 50       	subi	r28, 0x01	; 1
   127bc:	f8 cf       	rjmp	.-16     	; 0x127ae <print_tok+0x12>
   127be:	ed b7       	in	r30, 0x3d	; 61
   127c0:	fe b7       	in	r31, 0x3e	; 62
   127c2:	15 83       	std	Z+5, r17	; 0x05
   127c4:	04 83       	std	Z+4, r16	; 0x04
   127c6:	80 e5       	ldi	r24, 0x50	; 80
   127c8:	90 e2       	ldi	r25, 0x20	; 32
   127ca:	a0 e0       	ldi	r26, 0x00	; 0
   127cc:	81 83       	std	Z+1, r24	; 0x01
   127ce:	92 83       	std	Z+2, r25	; 0x02
   127d0:	a3 83       	std	Z+3, r26	; 0x03
   127d2:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   127d6:	0f 90       	pop	r0
   127d8:	0f 90       	pop	r0
   127da:	0f 90       	pop	r0
   127dc:	0f 90       	pop	r0
   127de:	0f 90       	pop	r0
   127e0:	cf 91       	pop	r28
   127e2:	1f 91       	pop	r17
   127e4:	0f 91       	pop	r16
   127e6:	08 95       	ret

000127e8 <display_Addresses>:
   127e8:	2f 92       	push	r2
   127ea:	3f 92       	push	r3
   127ec:	4f 92       	push	r4
   127ee:	6f 92       	push	r6
   127f0:	7f 92       	push	r7
   127f2:	8f 92       	push	r8
   127f4:	cf 92       	push	r12
   127f6:	df 92       	push	r13
   127f8:	ef 92       	push	r14
   127fa:	0f 93       	push	r16
   127fc:	1f 93       	push	r17
   127fe:	cf 93       	push	r28
   12800:	df 93       	push	r29
   12802:	cd b7       	in	r28, 0x3d	; 61
   12804:	de b7       	in	r29, 0x3e	; 62
   12806:	2a 97       	sbiw	r28, 0x0a	; 10
   12808:	0f b6       	in	r0, 0x3f	; 63
   1280a:	f8 94       	cli
   1280c:	de bf       	out	0x3e, r29	; 62
   1280e:	0f be       	out	0x3f, r0	; 63
   12810:	cd bf       	out	0x3d, r28	; 61
   12812:	8a e1       	ldi	r24, 0x1A	; 26
   12814:	9d e1       	ldi	r25, 0x1D	; 29
   12816:	a0 e0       	ldi	r26, 0x00	; 0
   12818:	ed b7       	in	r30, 0x3d	; 61
   1281a:	fe b7       	in	r31, 0x3e	; 62
   1281c:	81 83       	std	Z+1, r24	; 0x01
   1281e:	92 83       	std	Z+2, r25	; 0x02
   12820:	a3 83       	std	Z+3, r26	; 0x03
   12822:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   12826:	0a ee       	ldi	r16, 0xEA	; 234
   12828:	1e e1       	ldi	r17, 0x1E	; 30
   1282a:	8c ef       	ldi	r24, 0xFC	; 252
   1282c:	9c e1       	ldi	r25, 0x1C	; 28
   1282e:	6c 01       	movw	r12, r24
   12830:	e1 2c       	mov	r14, r1
   12832:	8e ef       	ldi	r24, 0xFE	; 254
   12834:	9c e1       	ldi	r25, 0x1C	; 28
   12836:	3c 01       	movw	r6, r24
   12838:	81 2c       	mov	r8, r1
   1283a:	87 e0       	ldi	r24, 0x07	; 7
   1283c:	9d e1       	ldi	r25, 0x1D	; 29
   1283e:	1c 01       	movw	r2, r24
   12840:	41 2c       	mov	r4, r1
   12842:	81 e1       	ldi	r24, 0x11	; 17
   12844:	9d e1       	ldi	r25, 0x1D	; 29
   12846:	9c 01       	movw	r18, r24
   12848:	40 e0       	ldi	r20, 0x00	; 0
   1284a:	2e 83       	std	Y+6, r18	; 0x06
   1284c:	3f 83       	std	Y+7, r19	; 0x07
   1284e:	48 87       	std	Y+8, r20	; 0x08
   12850:	f8 01       	movw	r30, r16
   12852:	80 81       	ld	r24, Z
   12854:	88 23       	and	r24, r24
   12856:	09 f4       	brne	.+2      	; 0x1285a <display_Addresses+0x72>
   12858:	76 c0       	rjmp	.+236    	; 0x12946 <display_Addresses+0x15e>
   1285a:	83 30       	cpi	r24, 0x03	; 3
   1285c:	21 f0       	breq	.+8      	; 0x12866 <display_Addresses+0x7e>
   1285e:	81 30       	cpi	r24, 0x01	; 1
   12860:	09 f0       	breq	.+2      	; 0x12864 <display_Addresses+0x7c>
   12862:	57 c0       	rjmp	.+174    	; 0x12912 <display_Addresses+0x12a>
   12864:	1f c0       	rjmp	.+62     	; 0x128a4 <display_Addresses+0xbc>
   12866:	f8 01       	movw	r30, r16
   12868:	87 81       	ldd	r24, Z+7	; 0x07
   1286a:	90 85       	ldd	r25, Z+8	; 0x08
   1286c:	90 93 5f 19 	sts	0x195F, r25	; 0x80195f <SS80p+0x1>
   12870:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <SS80p>
   12874:	fc 01       	movw	r30, r24
   12876:	84 81       	ldd	r24, Z+4	; 0x04
   12878:	95 81       	ldd	r25, Z+5	; 0x05
   1287a:	ed b7       	in	r30, 0x3d	; 61
   1287c:	fe b7       	in	r31, 0x3e	; 62
   1287e:	95 83       	std	Z+5, r25	; 0x05
   12880:	84 83       	std	Z+4, r24	; 0x04
   12882:	2e 81       	ldd	r18, Y+6	; 0x06
   12884:	3f 81       	ldd	r19, Y+7	; 0x07
   12886:	48 85       	ldd	r20, Y+8	; 0x08
   12888:	21 83       	std	Z+1, r18	; 0x01
   1288a:	32 83       	std	Z+2, r19	; 0x02
   1288c:	43 83       	std	Z+3, r20	; 0x03
   1288e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   12892:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   12896:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   1289a:	42 81       	ldd	r20, Z+2	; 0x02
   1289c:	53 81       	ldd	r21, Z+3	; 0x03
   1289e:	64 e0       	ldi	r22, 0x04	; 4
   128a0:	82 e1       	ldi	r24, 0x12	; 18
   128a2:	47 df       	rcall	.-370    	; 0x12732 <print_tok_str>
   128a4:	f8 01       	movw	r30, r16
   128a6:	80 81       	ld	r24, Z
   128a8:	81 30       	cpi	r24, 0x01	; 1
   128aa:	d9 f4       	brne	.+54     	; 0x128e2 <display_Addresses+0xfa>
   128ac:	87 81       	ldd	r24, Z+7	; 0x07
   128ae:	90 85       	ldd	r25, Z+8	; 0x08
   128b0:	90 93 5b 19 	sts	0x195B, r25	; 0x80195b <AMIGOp+0x1>
   128b4:	80 93 5a 19 	sts	0x195A, r24	; 0x80195a <AMIGOp>
   128b8:	fc 01       	movw	r30, r24
   128ba:	84 81       	ldd	r24, Z+4	; 0x04
   128bc:	95 81       	ldd	r25, Z+5	; 0x05
   128be:	ed b7       	in	r30, 0x3d	; 61
   128c0:	fe b7       	in	r31, 0x3e	; 62
   128c2:	95 83       	std	Z+5, r25	; 0x05
   128c4:	84 83       	std	Z+4, r24	; 0x04
   128c6:	21 82       	std	Z+1, r2	; 0x01
   128c8:	32 82       	std	Z+2, r3	; 0x02
   128ca:	43 82       	std	Z+3, r4	; 0x03
   128cc:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   128d0:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   128d4:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   128d8:	42 81       	ldd	r20, Z+2	; 0x02
   128da:	53 81       	ldd	r21, Z+3	; 0x03
   128dc:	64 e0       	ldi	r22, 0x04	; 4
   128de:	82 e1       	ldi	r24, 0x12	; 18
   128e0:	28 df       	rcall	.-432    	; 0x12732 <print_tok_str>
   128e2:	f8 01       	movw	r30, r16
   128e4:	21 81       	ldd	r18, Z+1	; 0x01
   128e6:	30 e0       	ldi	r19, 0x00	; 0
   128e8:	40 e0       	ldi	r20, 0x00	; 0
   128ea:	50 e0       	ldi	r21, 0x00	; 0
   128ec:	64 e0       	ldi	r22, 0x04	; 4
   128ee:	81 e0       	ldi	r24, 0x01	; 1
   128f0:	e0 de       	rcall	.-576    	; 0x126b2 <print_tok_val>
   128f2:	f8 01       	movw	r30, r16
   128f4:	22 81       	ldd	r18, Z+2	; 0x02
   128f6:	30 e0       	ldi	r19, 0x00	; 0
   128f8:	40 e0       	ldi	r20, 0x00	; 0
   128fa:	50 e0       	ldi	r21, 0x00	; 0
   128fc:	64 e0       	ldi	r22, 0x04	; 4
   128fe:	8f e1       	ldi	r24, 0x1F	; 31
   12900:	d8 de       	rcall	.-592    	; 0x126b2 <print_tok_val>
   12902:	f8 01       	movw	r30, r16
   12904:	23 81       	ldd	r18, Z+3	; 0x03
   12906:	34 81       	ldd	r19, Z+4	; 0x04
   12908:	45 81       	ldd	r20, Z+5	; 0x05
   1290a:	56 81       	ldd	r21, Z+6	; 0x06
   1290c:	64 e0       	ldi	r22, 0x04	; 4
   1290e:	83 e0       	ldi	r24, 0x03	; 3
   12910:	d0 de       	rcall	.-608    	; 0x126b2 <print_tok_val>
   12912:	f8 01       	movw	r30, r16
   12914:	80 81       	ld	r24, Z
   12916:	84 30       	cpi	r24, 0x04	; 4
   12918:	79 f4       	brne	.+30     	; 0x12938 <display_Addresses+0x150>
   1291a:	ed b7       	in	r30, 0x3d	; 61
   1291c:	fe b7       	in	r31, 0x3e	; 62
   1291e:	61 82       	std	Z+1, r6	; 0x01
   12920:	72 82       	std	Z+2, r7	; 0x02
   12922:	83 82       	std	Z+3, r8	; 0x03
   12924:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   12928:	f8 01       	movw	r30, r16
   1292a:	21 81       	ldd	r18, Z+1	; 0x01
   1292c:	30 e0       	ldi	r19, 0x00	; 0
   1292e:	40 e0       	ldi	r20, 0x00	; 0
   12930:	50 e0       	ldi	r21, 0x00	; 0
   12932:	64 e0       	ldi	r22, 0x04	; 4
   12934:	81 e0       	ldi	r24, 0x01	; 1
   12936:	bd de       	rcall	.-646    	; 0x126b2 <print_tok_val>
   12938:	ed b7       	in	r30, 0x3d	; 61
   1293a:	fe b7       	in	r31, 0x3e	; 62
   1293c:	c1 82       	std	Z+1, r12	; 0x01
   1293e:	d2 82       	std	Z+2, r13	; 0x02
   12940:	e3 82       	std	Z+3, r14	; 0x03
   12942:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   12946:	05 5f       	subi	r16, 0xF5	; 245
   12948:	1f 4f       	sbci	r17, 0xFF	; 255
   1294a:	ff e1       	ldi	r31, 0x1F	; 31
   1294c:	0e 36       	cpi	r16, 0x6E	; 110
   1294e:	1f 07       	cpc	r17, r31
   12950:	09 f0       	breq	.+2      	; 0x12954 <display_Addresses+0x16c>
   12952:	7e cf       	rjmp	.-260    	; 0x12850 <display_Addresses+0x68>
   12954:	8a ef       	ldi	r24, 0xFA	; 250
   12956:	9c e1       	ldi	r25, 0x1C	; 28
   12958:	a0 e0       	ldi	r26, 0x00	; 0
   1295a:	ed b7       	in	r30, 0x3d	; 61
   1295c:	fe b7       	in	r31, 0x3e	; 62
   1295e:	81 83       	std	Z+1, r24	; 0x01
   12960:	92 83       	std	Z+2, r25	; 0x02
   12962:	a3 83       	std	Z+3, r26	; 0x03
   12964:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   12968:	2a 96       	adiw	r28, 0x0a	; 10
   1296a:	0f b6       	in	r0, 0x3f	; 63
   1296c:	f8 94       	cli
   1296e:	de bf       	out	0x3e, r29	; 62
   12970:	0f be       	out	0x3f, r0	; 63
   12972:	cd bf       	out	0x3d, r28	; 61
   12974:	df 91       	pop	r29
   12976:	cf 91       	pop	r28
   12978:	1f 91       	pop	r17
   1297a:	0f 91       	pop	r16
   1297c:	ef 90       	pop	r14
   1297e:	df 90       	pop	r13
   12980:	cf 90       	pop	r12
   12982:	8f 90       	pop	r8
   12984:	7f 90       	pop	r7
   12986:	6f 90       	pop	r6
   12988:	4f 90       	pop	r4
   1298a:	3f 90       	pop	r3
   1298c:	2f 90       	pop	r2
   1298e:	08 95       	ret

00012990 <display_Config>:
   12990:	2f 92       	push	r2
   12992:	3f 92       	push	r3
   12994:	4f 92       	push	r4
   12996:	6f 92       	push	r6
   12998:	7f 92       	push	r7
   1299a:	8f 92       	push	r8
   1299c:	af 92       	push	r10
   1299e:	bf 92       	push	r11
   129a0:	cf 92       	push	r12
   129a2:	df 92       	push	r13
   129a4:	ef 92       	push	r14
   129a6:	0f 93       	push	r16
   129a8:	1f 93       	push	r17
   129aa:	cf 93       	push	r28
   129ac:	df 93       	push	r29
   129ae:	cd b7       	in	r28, 0x3d	; 61
   129b0:	de b7       	in	r29, 0x3e	; 62
   129b2:	62 97       	sbiw	r28, 0x12	; 18
   129b4:	0f b6       	in	r0, 0x3f	; 63
   129b6:	f8 94       	cli
   129b8:	de bf       	out	0x3e, r29	; 62
   129ba:	0f be       	out	0x3f, r0	; 63
   129bc:	cd bf       	out	0x3d, r28	; 61
   129be:	5c 01       	movw	r10, r24
   129c0:	8a ed       	ldi	r24, 0xDA	; 218
   129c2:	9c e1       	ldi	r25, 0x1C	; 28
   129c4:	a0 e0       	ldi	r26, 0x00	; 0
   129c6:	ed b7       	in	r30, 0x3d	; 61
   129c8:	fe b7       	in	r31, 0x3e	; 62
   129ca:	81 83       	std	Z+1, r24	; 0x01
   129cc:	92 83       	std	Z+2, r25	; 0x02
   129ce:	a3 83       	std	Z+3, r26	; 0x03
   129d0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   129d4:	0a ee       	ldi	r16, 0xEA	; 234
   129d6:	1e e1       	ldi	r17, 0x1E	; 30
   129d8:	8f e5       	ldi	r24, 0x5F	; 95
   129da:	9c e1       	ldi	r25, 0x1C	; 28
   129dc:	9c 01       	movw	r18, r24
   129de:	40 e0       	ldi	r20, 0x00	; 0
   129e0:	28 87       	std	Y+8, r18	; 0x08
   129e2:	39 87       	std	Y+9, r19	; 0x09
   129e4:	4a 87       	std	Y+10, r20	; 0x0a
   129e6:	84 e9       	ldi	r24, 0x94	; 148
   129e8:	9c e1       	ldi	r25, 0x1C	; 28
   129ea:	6c 01       	movw	r12, r24
   129ec:	e1 2c       	mov	r14, r1
   129ee:	85 e7       	ldi	r24, 0x75	; 117
   129f0:	9c e1       	ldi	r25, 0x1C	; 28
   129f2:	3c 01       	movw	r6, r24
   129f4:	81 2c       	mov	r8, r1
   129f6:	81 e6       	ldi	r24, 0x61	; 97
   129f8:	9c e1       	ldi	r25, 0x1C	; 28
   129fa:	1c 01       	movw	r2, r24
   129fc:	41 2c       	mov	r4, r1
   129fe:	81 ed       	ldi	r24, 0xD1	; 209
   12a00:	9c e1       	ldi	r25, 0x1C	; 28
   12a02:	9c 01       	movw	r18, r24
   12a04:	40 e0       	ldi	r20, 0x00	; 0
   12a06:	2b 87       	std	Y+11, r18	; 0x0b
   12a08:	3c 87       	std	Y+12, r19	; 0x0c
   12a0a:	4d 87       	std	Y+13, r20	; 0x0d
   12a0c:	82 eb       	ldi	r24, 0xB2	; 178
   12a0e:	9c e1       	ldi	r25, 0x1C	; 28
   12a10:	9c 01       	movw	r18, r24
   12a12:	40 e0       	ldi	r20, 0x00	; 0
   12a14:	2e 87       	std	Y+14, r18	; 0x0e
   12a16:	3f 87       	std	Y+15, r19	; 0x0f
   12a18:	48 8b       	std	Y+16, r20	; 0x10
   12a1a:	f8 01       	movw	r30, r16
   12a1c:	80 81       	ld	r24, Z
   12a1e:	88 23       	and	r24, r24
   12a20:	09 f4       	brne	.+2      	; 0x12a24 <display_Config+0x94>
   12a22:	16 c2       	rjmp	.+1068   	; 0x12e50 <display_Config+0x4c0>
   12a24:	83 30       	cpi	r24, 0x03	; 3
   12a26:	09 f0       	breq	.+2      	; 0x12a2a <display_Config+0x9a>
   12a28:	3f c1       	rjmp	.+638    	; 0x12ca8 <display_Config+0x318>
   12a2a:	27 81       	ldd	r18, Z+7	; 0x07
   12a2c:	30 85       	ldd	r19, Z+8	; 0x08
   12a2e:	3a 8b       	std	Y+18, r19	; 0x12
   12a30:	29 8b       	std	Y+17, r18	; 0x11
   12a32:	f9 01       	movw	r30, r18
   12a34:	84 81       	ldd	r24, Z+4	; 0x04
   12a36:	95 81       	ldd	r25, Z+5	; 0x05
   12a38:	ed b7       	in	r30, 0x3d	; 61
   12a3a:	fe b7       	in	r31, 0x3e	; 62
   12a3c:	95 83       	std	Z+5, r25	; 0x05
   12a3e:	84 83       	std	Z+4, r24	; 0x04
   12a40:	2b 85       	ldd	r18, Y+11	; 0x0b
   12a42:	3c 85       	ldd	r19, Y+12	; 0x0c
   12a44:	4d 85       	ldd	r20, Y+13	; 0x0d
   12a46:	21 83       	std	Z+1, r18	; 0x01
   12a48:	32 83       	std	Z+2, r19	; 0x02
   12a4a:	43 83       	std	Z+3, r20	; 0x03
   12a4c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   12a50:	e9 89       	ldd	r30, Y+17	; 0x11
   12a52:	fa 89       	ldd	r31, Y+18	; 0x12
   12a54:	80 81       	ld	r24, Z
   12a56:	90 e0       	ldi	r25, 0x00	; 0
   12a58:	ed b7       	in	r30, 0x3d	; 61
   12a5a:	fe b7       	in	r31, 0x3e	; 62
   12a5c:	95 83       	std	Z+5, r25	; 0x05
   12a5e:	84 83       	std	Z+4, r24	; 0x04
   12a60:	2e 85       	ldd	r18, Y+14	; 0x0e
   12a62:	3f 85       	ldd	r19, Y+15	; 0x0f
   12a64:	48 89       	ldd	r20, Y+16	; 0x10
   12a66:	21 83       	std	Z+1, r18	; 0x01
   12a68:	32 83       	std	Z+2, r19	; 0x02
   12a6a:	43 83       	std	Z+3, r20	; 0x03
   12a6c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   12a70:	64 e0       	ldi	r22, 0x04	; 4
   12a72:	89 e0       	ldi	r24, 0x09	; 9
   12a74:	93 de       	rcall	.-730    	; 0x1279c <print_tok>
   12a76:	e9 89       	ldd	r30, Y+17	; 0x11
   12a78:	fa 89       	ldd	r31, Y+18	; 0x12
   12a7a:	20 81       	ld	r18, Z
   12a7c:	30 e0       	ldi	r19, 0x00	; 0
   12a7e:	40 e0       	ldi	r20, 0x00	; 0
   12a80:	50 e0       	ldi	r21, 0x00	; 0
   12a82:	68 e0       	ldi	r22, 0x08	; 8
   12a84:	81 e0       	ldi	r24, 0x01	; 1
   12a86:	15 de       	rcall	.-982    	; 0x126b2 <print_tok_val>
   12a88:	e9 89       	ldd	r30, Y+17	; 0x11
   12a8a:	fa 89       	ldd	r31, Y+18	; 0x12
   12a8c:	21 81       	ldd	r18, Z+1	; 0x01
   12a8e:	30 e0       	ldi	r19, 0x00	; 0
   12a90:	40 e0       	ldi	r20, 0x00	; 0
   12a92:	50 e0       	ldi	r21, 0x00	; 0
   12a94:	68 e0       	ldi	r22, 0x08	; 8
   12a96:	8f e1       	ldi	r24, 0x1F	; 31
   12a98:	0c de       	rcall	.-1000   	; 0x126b2 <print_tok_val>
   12a9a:	e9 89       	ldd	r30, Y+17	; 0x11
   12a9c:	fa 89       	ldd	r31, Y+18	; 0x12
   12a9e:	42 81       	ldd	r20, Z+2	; 0x02
   12aa0:	53 81       	ldd	r21, Z+3	; 0x03
   12aa2:	68 e0       	ldi	r22, 0x08	; 8
   12aa4:	82 e1       	ldi	r24, 0x12	; 18
   12aa6:	45 de       	rcall	.-886    	; 0x12732 <print_tok_str>
   12aa8:	64 e0       	ldi	r22, 0x04	; 4
   12aaa:	81 e1       	ldi	r24, 0x11	; 17
   12aac:	77 de       	rcall	.-786    	; 0x1279c <print_tok>
   12aae:	64 e0       	ldi	r22, 0x04	; 4
   12ab0:	85 e1       	ldi	r24, 0x15	; 21
   12ab2:	74 de       	rcall	.-792    	; 0x1279c <print_tok>
   12ab4:	e9 89       	ldd	r30, Y+17	; 0x11
   12ab6:	fa 89       	ldd	r31, Y+18	; 0x12
   12ab8:	26 81       	ldd	r18, Z+6	; 0x06
   12aba:	37 81       	ldd	r19, Z+7	; 0x07
   12abc:	40 e0       	ldi	r20, 0x00	; 0
   12abe:	50 e0       	ldi	r21, 0x00	; 0
   12ac0:	68 e0       	ldi	r22, 0x08	; 8
   12ac2:	87 e1       	ldi	r24, 0x17	; 23
   12ac4:	f6 dd       	rcall	.-1044   	; 0x126b2 <print_tok_val>
   12ac6:	64 e0       	ldi	r22, 0x04	; 4
   12ac8:	81 e1       	ldi	r24, 0x11	; 17
   12aca:	68 de       	rcall	.-816    	; 0x1279c <print_tok>
   12acc:	a1 14       	cp	r10, r1
   12ace:	b1 04       	cpc	r11, r1
   12ad0:	09 f1       	breq	.+66     	; 0x12b14 <display_Config+0x184>
   12ad2:	64 e0       	ldi	r22, 0x04	; 4
   12ad4:	8b e0       	ldi	r24, 0x0B	; 11
   12ad6:	62 de       	rcall	.-828    	; 0x1279c <print_tok>
   12ad8:	e9 89       	ldd	r30, Y+17	; 0x11
   12ada:	fa 89       	ldd	r31, Y+18	; 0x12
   12adc:	20 85       	ldd	r18, Z+8	; 0x08
   12ade:	31 85       	ldd	r19, Z+9	; 0x09
   12ae0:	40 e0       	ldi	r20, 0x00	; 0
   12ae2:	50 e0       	ldi	r21, 0x00	; 0
   12ae4:	68 e0       	ldi	r22, 0x08	; 8
   12ae6:	88 e2       	ldi	r24, 0x28	; 40
   12ae8:	e4 dd       	rcall	.-1080   	; 0x126b2 <print_tok_val>
   12aea:	e9 89       	ldd	r30, Y+17	; 0x11
   12aec:	fa 89       	ldd	r31, Y+18	; 0x12
   12aee:	22 85       	ldd	r18, Z+10	; 0x0a
   12af0:	33 85       	ldd	r19, Z+11	; 0x0b
   12af2:	40 e0       	ldi	r20, 0x00	; 0
   12af4:	50 e0       	ldi	r21, 0x00	; 0
   12af6:	68 e0       	ldi	r22, 0x08	; 8
   12af8:	85 e2       	ldi	r24, 0x25	; 37
   12afa:	db dd       	rcall	.-1098   	; 0x126b2 <print_tok_val>
   12afc:	e9 89       	ldd	r30, Y+17	; 0x11
   12afe:	fa 89       	ldd	r31, Y+18	; 0x12
   12b00:	24 85       	ldd	r18, Z+12	; 0x0c
   12b02:	30 e0       	ldi	r19, 0x00	; 0
   12b04:	40 e0       	ldi	r20, 0x00	; 0
   12b06:	50 e0       	ldi	r21, 0x00	; 0
   12b08:	68 e0       	ldi	r22, 0x08	; 8
   12b0a:	86 e2       	ldi	r24, 0x26	; 38
   12b0c:	d2 dd       	rcall	.-1116   	; 0x126b2 <print_tok_val>
   12b0e:	64 e0       	ldi	r22, 0x04	; 4
   12b10:	81 e1       	ldi	r24, 0x11	; 17
   12b12:	44 de       	rcall	.-888    	; 0x1279c <print_tok>
   12b14:	64 e0       	ldi	r22, 0x04	; 4
   12b16:	87 e2       	ldi	r24, 0x27	; 39
   12b18:	41 de       	rcall	.-894    	; 0x1279c <print_tok>
   12b1a:	a1 14       	cp	r10, r1
   12b1c:	b1 04       	cpc	r11, r1
   12b1e:	49 f0       	breq	.+18     	; 0x12b32 <display_Config+0x1a2>
   12b20:	e9 89       	ldd	r30, Y+17	; 0x11
   12b22:	fa 89       	ldd	r31, Y+18	; 0x12
   12b24:	25 85       	ldd	r18, Z+13	; 0x0d
   12b26:	30 e0       	ldi	r19, 0x00	; 0
   12b28:	40 e0       	ldi	r20, 0x00	; 0
   12b2a:	50 e0       	ldi	r21, 0x00	; 0
   12b2c:	68 e0       	ldi	r22, 0x08	; 8
   12b2e:	89 e2       	ldi	r24, 0x29	; 41
   12b30:	c0 dd       	rcall	.-1152   	; 0x126b2 <print_tok_val>
   12b32:	e9 89       	ldd	r30, Y+17	; 0x11
   12b34:	fa 89       	ldd	r31, Y+18	; 0x12
   12b36:	26 85       	ldd	r18, Z+14	; 0x0e
   12b38:	37 85       	ldd	r19, Z+15	; 0x0f
   12b3a:	40 89       	ldd	r20, Z+16	; 0x10
   12b3c:	51 89       	ldd	r21, Z+17	; 0x11
   12b3e:	68 e0       	ldi	r22, 0x08	; 8
   12b40:	8f e0       	ldi	r24, 0x0F	; 15
   12b42:	b7 dd       	rcall	.-1170   	; 0x126b2 <print_tok_val>
   12b44:	a1 14       	cp	r10, r1
   12b46:	b1 04       	cpc	r11, r1
   12b48:	09 f4       	brne	.+2      	; 0x12b4c <display_Config+0x1bc>
   12b4a:	5a c0       	rjmp	.+180    	; 0x12c00 <display_Config+0x270>
   12b4c:	e9 89       	ldd	r30, Y+17	; 0x11
   12b4e:	fa 89       	ldd	r31, Y+18	; 0x12
   12b50:	22 89       	ldd	r18, Z+18	; 0x12
   12b52:	33 89       	ldd	r19, Z+19	; 0x13
   12b54:	40 e0       	ldi	r20, 0x00	; 0
   12b56:	50 e0       	ldi	r21, 0x00	; 0
   12b58:	68 e0       	ldi	r22, 0x08	; 8
   12b5a:	87 e0       	ldi	r24, 0x07	; 7
   12b5c:	aa dd       	rcall	.-1196   	; 0x126b2 <print_tok_val>
   12b5e:	e9 89       	ldd	r30, Y+17	; 0x11
   12b60:	fa 89       	ldd	r31, Y+18	; 0x12
   12b62:	24 89       	ldd	r18, Z+20	; 0x14
   12b64:	30 e0       	ldi	r19, 0x00	; 0
   12b66:	40 e0       	ldi	r20, 0x00	; 0
   12b68:	50 e0       	ldi	r21, 0x00	; 0
   12b6a:	68 e0       	ldi	r22, 0x08	; 8
   12b6c:	85 e0       	ldi	r24, 0x05	; 5
   12b6e:	a1 dd       	rcall	.-1214   	; 0x126b2 <print_tok_val>
   12b70:	e9 89       	ldd	r30, Y+17	; 0x11
   12b72:	fa 89       	ldd	r31, Y+18	; 0x12
   12b74:	25 89       	ldd	r18, Z+21	; 0x15
   12b76:	30 e0       	ldi	r19, 0x00	; 0
   12b78:	40 e0       	ldi	r20, 0x00	; 0
   12b7a:	50 e0       	ldi	r21, 0x00	; 0
   12b7c:	68 e0       	ldi	r22, 0x08	; 8
   12b7e:	86 e0       	ldi	r24, 0x06	; 6
   12b80:	98 dd       	rcall	.-1232   	; 0x126b2 <print_tok_val>
   12b82:	e9 89       	ldd	r30, Y+17	; 0x11
   12b84:	fa 89       	ldd	r31, Y+18	; 0x12
   12b86:	26 89       	ldd	r18, Z+22	; 0x16
   12b88:	37 89       	ldd	r19, Z+23	; 0x17
   12b8a:	40 e0       	ldi	r20, 0x00	; 0
   12b8c:	50 e0       	ldi	r21, 0x00	; 0
   12b8e:	68 e0       	ldi	r22, 0x08	; 8
   12b90:	84 e0       	ldi	r24, 0x04	; 4
   12b92:	8f dd       	rcall	.-1250   	; 0x126b2 <print_tok_val>
   12b94:	e9 89       	ldd	r30, Y+17	; 0x11
   12b96:	fa 89       	ldd	r31, Y+18	; 0x12
   12b98:	20 8d       	ldd	r18, Z+24	; 0x18
   12b9a:	31 8d       	ldd	r19, Z+25	; 0x19
   12b9c:	40 e0       	ldi	r20, 0x00	; 0
   12b9e:	50 e0       	ldi	r21, 0x00	; 0
   12ba0:	68 e0       	ldi	r22, 0x08	; 8
   12ba2:	8a e0       	ldi	r24, 0x0A	; 10
   12ba4:	86 dd       	rcall	.-1268   	; 0x126b2 <print_tok_val>
   12ba6:	e9 89       	ldd	r30, Y+17	; 0x11
   12ba8:	fa 89       	ldd	r31, Y+18	; 0x12
   12baa:	22 8d       	ldd	r18, Z+26	; 0x1a
   12bac:	33 8d       	ldd	r19, Z+27	; 0x1b
   12bae:	40 e0       	ldi	r20, 0x00	; 0
   12bb0:	50 e0       	ldi	r21, 0x00	; 0
   12bb2:	68 e0       	ldi	r22, 0x08	; 8
   12bb4:	8e e1       	ldi	r24, 0x1E	; 30
   12bb6:	7d dd       	rcall	.-1286   	; 0x126b2 <print_tok_val>
   12bb8:	e9 89       	ldd	r30, Y+17	; 0x11
   12bba:	fa 89       	ldd	r31, Y+18	; 0x12
   12bbc:	24 8d       	ldd	r18, Z+28	; 0x1c
   12bbe:	35 8d       	ldd	r19, Z+29	; 0x1d
   12bc0:	40 e0       	ldi	r20, 0x00	; 0
   12bc2:	50 e0       	ldi	r21, 0x00	; 0
   12bc4:	68 e0       	ldi	r22, 0x08	; 8
   12bc6:	80 e0       	ldi	r24, 0x00	; 0
   12bc8:	74 dd       	rcall	.-1304   	; 0x126b2 <print_tok_val>
   12bca:	e9 89       	ldd	r30, Y+17	; 0x11
   12bcc:	fa 89       	ldd	r31, Y+18	; 0x12
   12bce:	26 8d       	ldd	r18, Z+30	; 0x1e
   12bd0:	30 e0       	ldi	r19, 0x00	; 0
   12bd2:	40 e0       	ldi	r20, 0x00	; 0
   12bd4:	50 e0       	ldi	r21, 0x00	; 0
   12bd6:	68 e0       	ldi	r22, 0x08	; 8
   12bd8:	8c e1       	ldi	r24, 0x1C	; 28
   12bda:	6b dd       	rcall	.-1322   	; 0x126b2 <print_tok_val>
   12bdc:	e9 89       	ldd	r30, Y+17	; 0x11
   12bde:	fa 89       	ldd	r31, Y+18	; 0x12
   12be0:	27 8d       	ldd	r18, Z+31	; 0x1f
   12be2:	30 e0       	ldi	r19, 0x00	; 0
   12be4:	40 e0       	ldi	r20, 0x00	; 0
   12be6:	50 e0       	ldi	r21, 0x00	; 0
   12be8:	68 e0       	ldi	r22, 0x08	; 8
   12bea:	83 e1       	ldi	r24, 0x13	; 19
   12bec:	62 dd       	rcall	.-1340   	; 0x126b2 <print_tok_val>
   12bee:	e9 89       	ldd	r30, Y+17	; 0x11
   12bf0:	fa 89       	ldd	r31, Y+18	; 0x12
   12bf2:	20 a1       	ldd	r18, Z+32	; 0x20
   12bf4:	30 e0       	ldi	r19, 0x00	; 0
   12bf6:	40 e0       	ldi	r20, 0x00	; 0
   12bf8:	50 e0       	ldi	r21, 0x00	; 0
   12bfa:	68 e0       	ldi	r22, 0x08	; 8
   12bfc:	81 e2       	ldi	r24, 0x21	; 33
   12bfe:	59 dd       	rcall	.-1358   	; 0x126b2 <print_tok_val>
   12c00:	64 e0       	ldi	r22, 0x04	; 4
   12c02:	81 e1       	ldi	r24, 0x11	; 17
   12c04:	cb dd       	rcall	.-1130   	; 0x1279c <print_tok>
   12c06:	a1 14       	cp	r10, r1
   12c08:	b1 04       	cpc	r11, r1
   12c0a:	99 f1       	breq	.+102    	; 0x12c72 <display_Config+0x2e2>
   12c0c:	64 e0       	ldi	r22, 0x04	; 4
   12c0e:	8a e2       	ldi	r24, 0x2A	; 42
   12c10:	c5 dd       	rcall	.-1142   	; 0x1279c <print_tok>
   12c12:	e9 89       	ldd	r30, Y+17	; 0x11
   12c14:	fa 89       	ldd	r31, Y+18	; 0x12
   12c16:	21 a1       	ldd	r18, Z+33	; 0x21
   12c18:	32 a1       	ldd	r19, Z+34	; 0x22
   12c1a:	43 a1       	ldd	r20, Z+35	; 0x23
   12c1c:	54 a1       	ldd	r21, Z+36	; 0x24
   12c1e:	68 e0       	ldi	r22, 0x08	; 8
   12c20:	8a e1       	ldi	r24, 0x1A	; 26
   12c22:	47 dd       	rcall	.-1394   	; 0x126b2 <print_tok_val>
   12c24:	e9 89       	ldd	r30, Y+17	; 0x11
   12c26:	fa 89       	ldd	r31, Y+18	; 0x12
   12c28:	25 a1       	ldd	r18, Z+37	; 0x25
   12c2a:	30 e0       	ldi	r19, 0x00	; 0
   12c2c:	40 e0       	ldi	r20, 0x00	; 0
   12c2e:	50 e0       	ldi	r21, 0x00	; 0
   12c30:	68 e0       	ldi	r22, 0x08	; 8
   12c32:	8b e1       	ldi	r24, 0x1B	; 27
   12c34:	3e dd       	rcall	.-1412   	; 0x126b2 <print_tok_val>
   12c36:	e9 89       	ldd	r30, Y+17	; 0x11
   12c38:	fa 89       	ldd	r31, Y+18	; 0x12
   12c3a:	26 a1       	ldd	r18, Z+38	; 0x26
   12c3c:	37 a1       	ldd	r19, Z+39	; 0x27
   12c3e:	40 e0       	ldi	r20, 0x00	; 0
   12c40:	50 e0       	ldi	r21, 0x00	; 0
   12c42:	68 e0       	ldi	r22, 0x08	; 8
   12c44:	8d e1       	ldi	r24, 0x1D	; 29
   12c46:	35 dd       	rcall	.-1430   	; 0x126b2 <print_tok_val>
   12c48:	e9 89       	ldd	r30, Y+17	; 0x11
   12c4a:	fa 89       	ldd	r31, Y+18	; 0x12
   12c4c:	20 a5       	ldd	r18, Z+40	; 0x28
   12c4e:	31 a5       	ldd	r19, Z+41	; 0x29
   12c50:	42 a5       	ldd	r20, Z+42	; 0x2a
   12c52:	53 a5       	ldd	r21, Z+43	; 0x2b
   12c54:	68 e0       	ldi	r22, 0x08	; 8
   12c56:	89 e1       	ldi	r24, 0x19	; 25
   12c58:	2c dd       	rcall	.-1448   	; 0x126b2 <print_tok_val>
   12c5a:	e9 89       	ldd	r30, Y+17	; 0x11
   12c5c:	fa 89       	ldd	r31, Y+18	; 0x12
   12c5e:	24 a5       	ldd	r18, Z+44	; 0x2c
   12c60:	30 e0       	ldi	r19, 0x00	; 0
   12c62:	40 e0       	ldi	r20, 0x00	; 0
   12c64:	50 e0       	ldi	r21, 0x00	; 0
   12c66:	68 e0       	ldi	r22, 0x08	; 8
   12c68:	88 e1       	ldi	r24, 0x18	; 24
   12c6a:	23 dd       	rcall	.-1466   	; 0x126b2 <print_tok_val>
   12c6c:	64 e0       	ldi	r22, 0x04	; 4
   12c6e:	81 e1       	ldi	r24, 0x11	; 17
   12c70:	95 dd       	rcall	.-1238   	; 0x1279c <print_tok>
   12c72:	e9 89       	ldd	r30, Y+17	; 0x11
   12c74:	fa 89       	ldd	r31, Y+18	; 0x12
   12c76:	80 a5       	ldd	r24, Z+40	; 0x28
   12c78:	91 a5       	ldd	r25, Z+41	; 0x29
   12c7a:	a2 a5       	ldd	r26, Z+42	; 0x2a
   12c7c:	b3 a5       	ldd	r27, Z+43	; 0x2b
   12c7e:	01 96       	adiw	r24, 0x01	; 1
   12c80:	a1 1d       	adc	r26, r1
   12c82:	b1 1d       	adc	r27, r1
   12c84:	ed b7       	in	r30, 0x3d	; 61
   12c86:	fe b7       	in	r31, 0x3e	; 62
   12c88:	84 83       	std	Z+4, r24	; 0x04
   12c8a:	95 83       	std	Z+5, r25	; 0x05
   12c8c:	a6 83       	std	Z+6, r26	; 0x06
   12c8e:	b7 83       	std	Z+7, r27	; 0x07
   12c90:	2e e9       	ldi	r18, 0x9E	; 158
   12c92:	3c e1       	ldi	r19, 0x1C	; 28
   12c94:	c9 01       	movw	r24, r18
   12c96:	a0 e0       	ldi	r26, 0x00	; 0
   12c98:	81 83       	std	Z+1, r24	; 0x01
   12c9a:	92 83       	std	Z+2, r25	; 0x02
   12c9c:	a3 83       	std	Z+3, r26	; 0x03
   12c9e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   12ca2:	60 e0       	ldi	r22, 0x00	; 0
   12ca4:	81 e1       	ldi	r24, 0x11	; 17
   12ca6:	7a dd       	rcall	.-1292   	; 0x1279c <print_tok>
   12ca8:	f8 01       	movw	r30, r16
   12caa:	80 81       	ld	r24, Z
   12cac:	81 30       	cpi	r24, 0x01	; 1
   12cae:	09 f0       	breq	.+2      	; 0x12cb2 <display_Config+0x322>
   12cb0:	a8 c0       	rjmp	.+336    	; 0x12e02 <display_Config+0x472>
   12cb2:	27 81       	ldd	r18, Z+7	; 0x07
   12cb4:	30 85       	ldd	r19, Z+8	; 0x08
   12cb6:	3a 8b       	std	Y+18, r19	; 0x12
   12cb8:	29 8b       	std	Y+17, r18	; 0x11
   12cba:	f9 01       	movw	r30, r18
   12cbc:	84 81       	ldd	r24, Z+4	; 0x04
   12cbe:	95 81       	ldd	r25, Z+5	; 0x05
   12cc0:	ed b7       	in	r30, 0x3d	; 61
   12cc2:	fe b7       	in	r31, 0x3e	; 62
   12cc4:	95 83       	std	Z+5, r25	; 0x05
   12cc6:	84 83       	std	Z+4, r24	; 0x04
   12cc8:	c1 82       	std	Z+1, r12	; 0x01
   12cca:	d2 82       	std	Z+2, r13	; 0x02
   12ccc:	e3 82       	std	Z+3, r14	; 0x03
   12cce:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   12cd2:	e9 89       	ldd	r30, Y+17	; 0x11
   12cd4:	fa 89       	ldd	r31, Y+18	; 0x12
   12cd6:	80 81       	ld	r24, Z
   12cd8:	90 e0       	ldi	r25, 0x00	; 0
   12cda:	ed b7       	in	r30, 0x3d	; 61
   12cdc:	fe b7       	in	r31, 0x3e	; 62
   12cde:	95 83       	std	Z+5, r25	; 0x05
   12ce0:	84 83       	std	Z+4, r24	; 0x04
   12ce2:	61 82       	std	Z+1, r6	; 0x01
   12ce4:	72 82       	std	Z+2, r7	; 0x02
   12ce6:	83 82       	std	Z+3, r8	; 0x03
   12ce8:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   12cec:	64 e0       	ldi	r22, 0x04	; 4
   12cee:	85 e1       	ldi	r24, 0x15	; 21
   12cf0:	55 dd       	rcall	.-1366   	; 0x1279c <print_tok>
   12cf2:	e9 89       	ldd	r30, Y+17	; 0x11
   12cf4:	fa 89       	ldd	r31, Y+18	; 0x12
   12cf6:	20 81       	ld	r18, Z
   12cf8:	30 e0       	ldi	r19, 0x00	; 0
   12cfa:	40 e0       	ldi	r20, 0x00	; 0
   12cfc:	50 e0       	ldi	r21, 0x00	; 0
   12cfe:	68 e0       	ldi	r22, 0x08	; 8
   12d00:	81 e0       	ldi	r24, 0x01	; 1
   12d02:	d7 dc       	rcall	.-1618   	; 0x126b2 <print_tok_val>
   12d04:	e9 89       	ldd	r30, Y+17	; 0x11
   12d06:	fa 89       	ldd	r31, Y+18	; 0x12
   12d08:	21 81       	ldd	r18, Z+1	; 0x01
   12d0a:	30 e0       	ldi	r19, 0x00	; 0
   12d0c:	40 e0       	ldi	r20, 0x00	; 0
   12d0e:	50 e0       	ldi	r21, 0x00	; 0
   12d10:	68 e0       	ldi	r22, 0x08	; 8
   12d12:	8f e1       	ldi	r24, 0x1F	; 31
   12d14:	ce dc       	rcall	.-1636   	; 0x126b2 <print_tok_val>
   12d16:	e9 89       	ldd	r30, Y+17	; 0x11
   12d18:	fa 89       	ldd	r31, Y+18	; 0x12
   12d1a:	42 81       	ldd	r20, Z+2	; 0x02
   12d1c:	53 81       	ldd	r21, Z+3	; 0x03
   12d1e:	68 e0       	ldi	r22, 0x08	; 8
   12d20:	82 e1       	ldi	r24, 0x12	; 18
   12d22:	07 dd       	rcall	.-1522   	; 0x12732 <print_tok_str>
   12d24:	64 e0       	ldi	r22, 0x04	; 4
   12d26:	81 e1       	ldi	r24, 0x11	; 17
   12d28:	39 dd       	rcall	.-1422   	; 0x1279c <print_tok>
   12d2a:	64 e0       	ldi	r22, 0x04	; 4
   12d2c:	89 e0       	ldi	r24, 0x09	; 9
   12d2e:	36 dd       	rcall	.-1428   	; 0x1279c <print_tok>
   12d30:	e9 89       	ldd	r30, Y+17	; 0x11
   12d32:	fa 89       	ldd	r31, Y+18	; 0x12
   12d34:	26 81       	ldd	r18, Z+6	; 0x06
   12d36:	37 81       	ldd	r19, Z+7	; 0x07
   12d38:	40 e0       	ldi	r20, 0x00	; 0
   12d3a:	50 e0       	ldi	r21, 0x00	; 0
   12d3c:	68 e0       	ldi	r22, 0x08	; 8
   12d3e:	87 e1       	ldi	r24, 0x17	; 23
   12d40:	b8 dc       	rcall	.-1680   	; 0x126b2 <print_tok_val>
   12d42:	64 e0       	ldi	r22, 0x04	; 4
   12d44:	81 e1       	ldi	r24, 0x11	; 17
   12d46:	2a dd       	rcall	.-1452   	; 0x1279c <print_tok>
   12d48:	a1 14       	cp	r10, r1
   12d4a:	b1 04       	cpc	r11, r1
   12d4c:	91 f1       	breq	.+100    	; 0x12db2 <display_Config+0x422>
   12d4e:	64 e0       	ldi	r22, 0x04	; 4
   12d50:	84 e1       	ldi	r24, 0x14	; 20
   12d52:	24 dd       	rcall	.-1464   	; 0x1279c <print_tok>
   12d54:	e9 89       	ldd	r30, Y+17	; 0x11
   12d56:	fa 89       	ldd	r31, Y+18	; 0x12
   12d58:	20 85       	ldd	r18, Z+8	; 0x08
   12d5a:	31 85       	ldd	r19, Z+9	; 0x09
   12d5c:	03 2e       	mov	r0, r19
   12d5e:	00 0c       	add	r0, r0
   12d60:	44 0b       	sbc	r20, r20
   12d62:	55 0b       	sbc	r21, r21
   12d64:	68 e0       	ldi	r22, 0x08	; 8
   12d66:	88 e0       	ldi	r24, 0x08	; 8
   12d68:	a4 dc       	rcall	.-1720   	; 0x126b2 <print_tok_val>
   12d6a:	e9 89       	ldd	r30, Y+17	; 0x11
   12d6c:	fa 89       	ldd	r31, Y+18	; 0x12
   12d6e:	22 85       	ldd	r18, Z+10	; 0x0a
   12d70:	33 85       	ldd	r19, Z+11	; 0x0b
   12d72:	03 2e       	mov	r0, r19
   12d74:	00 0c       	add	r0, r0
   12d76:	44 0b       	sbc	r20, r20
   12d78:	55 0b       	sbc	r21, r21
   12d7a:	68 e0       	ldi	r22, 0x08	; 8
   12d7c:	82 e2       	ldi	r24, 0x22	; 34
   12d7e:	99 dc       	rcall	.-1742   	; 0x126b2 <print_tok_val>
   12d80:	e9 89       	ldd	r30, Y+17	; 0x11
   12d82:	fa 89       	ldd	r31, Y+18	; 0x12
   12d84:	24 85       	ldd	r18, Z+12	; 0x0c
   12d86:	35 85       	ldd	r19, Z+13	; 0x0d
   12d88:	03 2e       	mov	r0, r19
   12d8a:	00 0c       	add	r0, r0
   12d8c:	44 0b       	sbc	r20, r20
   12d8e:	55 0b       	sbc	r21, r21
   12d90:	68 e0       	ldi	r22, 0x08	; 8
   12d92:	86 e1       	ldi	r24, 0x16	; 22
   12d94:	8e dc       	rcall	.-1764   	; 0x126b2 <print_tok_val>
   12d96:	e9 89       	ldd	r30, Y+17	; 0x11
   12d98:	fa 89       	ldd	r31, Y+18	; 0x12
   12d9a:	26 85       	ldd	r18, Z+14	; 0x0e
   12d9c:	37 85       	ldd	r19, Z+15	; 0x0f
   12d9e:	03 2e       	mov	r0, r19
   12da0:	00 0c       	add	r0, r0
   12da2:	44 0b       	sbc	r20, r20
   12da4:	55 0b       	sbc	r21, r21
   12da6:	68 e0       	ldi	r22, 0x08	; 8
   12da8:	8d e0       	ldi	r24, 0x0D	; 13
   12daa:	83 dc       	rcall	.-1786   	; 0x126b2 <print_tok_val>
   12dac:	64 e0       	ldi	r22, 0x04	; 4
   12dae:	81 e1       	ldi	r24, 0x11	; 17
   12db0:	f5 dc       	rcall	.-1558   	; 0x1279c <print_tok>
   12db2:	e9 89       	ldd	r30, Y+17	; 0x11
   12db4:	fa 89       	ldd	r31, Y+18	; 0x12
   12db6:	46 85       	ldd	r20, Z+14	; 0x0e
   12db8:	57 85       	ldd	r21, Z+15	; 0x0f
   12dba:	22 85       	ldd	r18, Z+10	; 0x0a
   12dbc:	33 85       	ldd	r19, Z+11	; 0x0b
   12dbe:	42 9f       	mul	r20, r18
   12dc0:	c0 01       	movw	r24, r0
   12dc2:	43 9f       	mul	r20, r19
   12dc4:	90 0d       	add	r25, r0
   12dc6:	52 9f       	mul	r21, r18
   12dc8:	90 0d       	add	r25, r0
   12dca:	11 24       	eor	r1, r1
   12dcc:	44 85       	ldd	r20, Z+12	; 0x0c
   12dce:	55 85       	ldd	r21, Z+13	; 0x0d
   12dd0:	84 9f       	mul	r24, r20
   12dd2:	90 01       	movw	r18, r0
   12dd4:	85 9f       	mul	r24, r21
   12dd6:	30 0d       	add	r19, r0
   12dd8:	94 9f       	mul	r25, r20
   12dda:	30 0d       	add	r19, r0
   12ddc:	11 24       	eor	r1, r1
   12dde:	c9 01       	movw	r24, r18
   12de0:	33 0f       	add	r19, r19
   12de2:	aa 0b       	sbc	r26, r26
   12de4:	bb 0b       	sbc	r27, r27
   12de6:	ed b7       	in	r30, 0x3d	; 61
   12de8:	fe b7       	in	r31, 0x3e	; 62
   12dea:	84 83       	std	Z+4, r24	; 0x04
   12dec:	95 83       	std	Z+5, r25	; 0x05
   12dee:	a6 83       	std	Z+6, r26	; 0x06
   12df0:	b7 83       	std	Z+7, r27	; 0x07
   12df2:	21 82       	std	Z+1, r2	; 0x01
   12df4:	32 82       	std	Z+2, r3	; 0x02
   12df6:	43 82       	std	Z+3, r4	; 0x03
   12df8:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   12dfc:	60 e0       	ldi	r22, 0x00	; 0
   12dfe:	81 e1       	ldi	r24, 0x11	; 17
   12e00:	cd dc       	rcall	.-1638   	; 0x1279c <print_tok>
   12e02:	f8 01       	movw	r30, r16
   12e04:	80 81       	ld	r24, Z
   12e06:	84 30       	cpi	r24, 0x04	; 4
   12e08:	c9 f4       	brne	.+50     	; 0x12e3c <display_Config+0x4ac>
   12e0a:	27 81       	ldd	r18, Z+7	; 0x07
   12e0c:	30 85       	ldd	r19, Z+8	; 0x08
   12e0e:	3a 8b       	std	Y+18, r19	; 0x12
   12e10:	29 8b       	std	Y+17, r18	; 0x11
   12e12:	60 e0       	ldi	r22, 0x00	; 0
   12e14:	80 e2       	ldi	r24, 0x20	; 32
   12e16:	c2 dc       	rcall	.-1660   	; 0x1279c <print_tok>
   12e18:	64 e0       	ldi	r22, 0x04	; 4
   12e1a:	89 e0       	ldi	r24, 0x09	; 9
   12e1c:	bf dc       	rcall	.-1666   	; 0x1279c <print_tok>
   12e1e:	e9 89       	ldd	r30, Y+17	; 0x11
   12e20:	fa 89       	ldd	r31, Y+18	; 0x12
   12e22:	20 81       	ld	r18, Z
   12e24:	30 e0       	ldi	r19, 0x00	; 0
   12e26:	40 e0       	ldi	r20, 0x00	; 0
   12e28:	50 e0       	ldi	r21, 0x00	; 0
   12e2a:	68 e0       	ldi	r22, 0x08	; 8
   12e2c:	81 e0       	ldi	r24, 0x01	; 1
   12e2e:	41 dc       	rcall	.-1918   	; 0x126b2 <print_tok_val>
   12e30:	64 e0       	ldi	r22, 0x04	; 4
   12e32:	81 e1       	ldi	r24, 0x11	; 17
   12e34:	b3 dc       	rcall	.-1690   	; 0x1279c <print_tok>
   12e36:	60 e0       	ldi	r22, 0x00	; 0
   12e38:	81 e1       	ldi	r24, 0x11	; 17
   12e3a:	b0 dc       	rcall	.-1696   	; 0x1279c <print_tok>
   12e3c:	28 85       	ldd	r18, Y+8	; 0x08
   12e3e:	39 85       	ldd	r19, Y+9	; 0x09
   12e40:	4a 85       	ldd	r20, Y+10	; 0x0a
   12e42:	ed b7       	in	r30, 0x3d	; 61
   12e44:	fe b7       	in	r31, 0x3e	; 62
   12e46:	21 83       	std	Z+1, r18	; 0x01
   12e48:	32 83       	std	Z+2, r19	; 0x02
   12e4a:	43 83       	std	Z+3, r20	; 0x03
   12e4c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   12e50:	05 5f       	subi	r16, 0xF5	; 245
   12e52:	1f 4f       	sbci	r17, 0xFF	; 255
   12e54:	2e e6       	ldi	r18, 0x6E	; 110
   12e56:	3f e1       	ldi	r19, 0x1F	; 31
   12e58:	20 17       	cp	r18, r16
   12e5a:	31 07       	cpc	r19, r17
   12e5c:	09 f0       	breq	.+2      	; 0x12e60 <display_Config+0x4d0>
   12e5e:	dd cd       	rjmp	.-1094   	; 0x12a1a <display_Config+0x8a>
   12e60:	8d e5       	ldi	r24, 0x5D	; 93
   12e62:	9c e1       	ldi	r25, 0x1C	; 28
   12e64:	a0 e0       	ldi	r26, 0x00	; 0
   12e66:	ed b7       	in	r30, 0x3d	; 61
   12e68:	fe b7       	in	r31, 0x3e	; 62
   12e6a:	81 83       	std	Z+1, r24	; 0x01
   12e6c:	92 83       	std	Z+2, r25	; 0x02
   12e6e:	a3 83       	std	Z+3, r26	; 0x03
   12e70:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   12e74:	62 96       	adiw	r28, 0x12	; 18
   12e76:	0f b6       	in	r0, 0x3f	; 63
   12e78:	f8 94       	cli
   12e7a:	de bf       	out	0x3e, r29	; 62
   12e7c:	0f be       	out	0x3f, r0	; 63
   12e7e:	cd bf       	out	0x3d, r28	; 61
   12e80:	df 91       	pop	r29
   12e82:	cf 91       	pop	r28
   12e84:	1f 91       	pop	r17
   12e86:	0f 91       	pop	r16
   12e88:	ef 90       	pop	r14
   12e8a:	df 90       	pop	r13
   12e8c:	cf 90       	pop	r12
   12e8e:	bf 90       	pop	r11
   12e90:	af 90       	pop	r10
   12e92:	8f 90       	pop	r8
   12e94:	7f 90       	pop	r7
   12e96:	6f 90       	pop	r6
   12e98:	4f 90       	pop	r4
   12e9a:	3f 90       	pop	r3
   12e9c:	2f 90       	pop	r2
   12e9e:	08 95       	ret

00012ea0 <find_type>:
   12ea0:	ea ee       	ldi	r30, 0xEA	; 234
   12ea2:	fe e1       	ldi	r31, 0x1E	; 30
   12ea4:	20 e0       	ldi	r18, 0x00	; 0
   12ea6:	30 e0       	ldi	r19, 0x00	; 0
   12ea8:	40 81       	ld	r20, Z
   12eaa:	50 e0       	ldi	r21, 0x00	; 0
   12eac:	48 17       	cp	r20, r24
   12eae:	59 07       	cpc	r21, r25
   12eb0:	11 f4       	brne	.+4      	; 0x12eb6 <find_type+0x16>
   12eb2:	82 2f       	mov	r24, r18
   12eb4:	08 95       	ret
   12eb6:	2f 5f       	subi	r18, 0xFF	; 255
   12eb8:	3f 4f       	sbci	r19, 0xFF	; 255
   12eba:	3b 96       	adiw	r30, 0x0b	; 11
   12ebc:	2c 30       	cpi	r18, 0x0C	; 12
   12ebe:	31 05       	cpc	r19, r1
   12ec0:	99 f7       	brne	.-26     	; 0x12ea8 <find_type+0x8>
   12ec2:	8f ef       	ldi	r24, 0xFF	; 255
   12ec4:	08 95       	ret

00012ec6 <count_drive_types>:
   12ec6:	ea ee       	ldi	r30, 0xEA	; 234
   12ec8:	fe e1       	ldi	r31, 0x1E	; 30
   12eca:	20 e0       	ldi	r18, 0x00	; 0
   12ecc:	30 e0       	ldi	r19, 0x00	; 0
   12ece:	90 81       	ld	r25, Z
   12ed0:	98 13       	cpse	r25, r24
   12ed2:	02 c0       	rjmp	.+4      	; 0x12ed8 <count_drive_types+0x12>
   12ed4:	2f 5f       	subi	r18, 0xFF	; 255
   12ed6:	3f 4f       	sbci	r19, 0xFF	; 255
   12ed8:	3b 96       	adiw	r30, 0x0b	; 11
   12eda:	9f e1       	ldi	r25, 0x1F	; 31
   12edc:	ee 36       	cpi	r30, 0x6E	; 110
   12ede:	f9 07       	cpc	r31, r25
   12ee0:	b1 f7       	brne	.-20     	; 0x12ece <count_drive_types+0x8>
   12ee2:	82 2f       	mov	r24, r18
   12ee4:	08 95       	ret

00012ee6 <type_to_str>:
   12ee6:	00 97       	sbiw	r24, 0x00	; 0
   12ee8:	59 f0       	breq	.+22     	; 0x12f00 <type_to_str+0x1a>
   12eea:	81 30       	cpi	r24, 0x01	; 1
   12eec:	91 05       	cpc	r25, r1
   12eee:	59 f0       	breq	.+22     	; 0x12f06 <type_to_str+0x20>
   12ef0:	83 30       	cpi	r24, 0x03	; 3
   12ef2:	91 05       	cpc	r25, r1
   12ef4:	59 f0       	breq	.+22     	; 0x12f0c <type_to_str+0x26>
   12ef6:	04 97       	sbiw	r24, 0x04	; 4
   12ef8:	61 f0       	breq	.+24     	; 0x12f12 <type_to_str+0x2c>
   12efa:	8c ef       	ldi	r24, 0xFC	; 252
   12efc:	9d e0       	ldi	r25, 0x0D	; 13
   12efe:	08 95       	ret
   12f00:	82 ed       	ldi	r24, 0xD2	; 210
   12f02:	9d e0       	ldi	r25, 0x0D	; 13
   12f04:	08 95       	ret
   12f06:	8a ed       	ldi	r24, 0xDA	; 218
   12f08:	9d e0       	ldi	r25, 0x0D	; 13
   12f0a:	08 95       	ret
   12f0c:	82 ef       	ldi	r24, 0xF2	; 242
   12f0e:	9d e0       	ldi	r25, 0x0D	; 13
   12f10:	08 95       	ret
   12f12:	85 ee       	ldi	r24, 0xE5	; 229
   12f14:	9d e0       	ldi	r25, 0x0D	; 13
   12f16:	08 95       	ret

00012f18 <find_free>:
   12f18:	80 e0       	ldi	r24, 0x00	; 0
   12f1a:	90 e0       	ldi	r25, 0x00	; 0
   12f1c:	c1 cf       	rjmp	.-126    	; 0x12ea0 <find_type>
   12f1e:	08 95       	ret

00012f20 <find_device>:
   12f20:	9b 01       	movw	r18, r22
   12f22:	20 52       	subi	r18, 0x20	; 32
   12f24:	31 09       	sbc	r19, r1
   12f26:	2f 35       	cpi	r18, 0x5F	; 95
   12f28:	31 05       	cpc	r19, r1
   12f2a:	08 f5       	brcc	.+66     	; 0x12f6e <find_device+0x4e>
   12f2c:	64 17       	cp	r22, r20
   12f2e:	75 07       	cpc	r23, r21
   12f30:	f4 f0       	brlt	.+60     	; 0x12f6e <find_device+0x4e>
   12f32:	9a 01       	movw	r18, r20
   12f34:	22 5e       	subi	r18, 0xE2	; 226
   12f36:	3f 4f       	sbci	r19, 0xFF	; 255
   12f38:	26 17       	cp	r18, r22
   12f3a:	37 07       	cpc	r19, r23
   12f3c:	c4 f0       	brlt	.+48     	; 0x12f6e <find_device+0x4e>
   12f3e:	64 1b       	sub	r22, r20
   12f40:	75 0b       	sbc	r23, r21
   12f42:	ea ee       	ldi	r30, 0xEA	; 234
   12f44:	fe e1       	ldi	r31, 0x1E	; 30
   12f46:	20 e0       	ldi	r18, 0x00	; 0
   12f48:	30 e0       	ldi	r19, 0x00	; 0
   12f4a:	40 81       	ld	r20, Z
   12f4c:	50 e0       	ldi	r21, 0x00	; 0
   12f4e:	48 17       	cp	r20, r24
   12f50:	59 07       	cpc	r21, r25
   12f52:	39 f4       	brne	.+14     	; 0x12f62 <find_device+0x42>
   12f54:	41 81       	ldd	r20, Z+1	; 0x01
   12f56:	50 e0       	ldi	r21, 0x00	; 0
   12f58:	64 17       	cp	r22, r20
   12f5a:	75 07       	cpc	r23, r21
   12f5c:	11 f4       	brne	.+4      	; 0x12f62 <find_device+0x42>
   12f5e:	82 2f       	mov	r24, r18
   12f60:	08 95       	ret
   12f62:	2f 5f       	subi	r18, 0xFF	; 255
   12f64:	3f 4f       	sbci	r19, 0xFF	; 255
   12f66:	3b 96       	adiw	r30, 0x0b	; 11
   12f68:	2c 30       	cpi	r18, 0x0C	; 12
   12f6a:	31 05       	cpc	r19, r1
   12f6c:	71 f7       	brne	.-36     	; 0x12f4a <find_device+0x2a>
   12f6e:	8f ef       	ldi	r24, 0xFF	; 255
   12f70:	08 95       	ret

00012f72 <set_active_device>:
   12f72:	a9 e0       	ldi	r26, 0x09	; 9
   12f74:	b0 e0       	ldi	r27, 0x00	; 0
   12f76:	ef eb       	ldi	r30, 0xBF	; 191
   12f78:	f7 e9       	ldi	r31, 0x97	; 151
   12f7a:	0c 94 a1 e7 	jmp	0x1cf42	; 0x1cf42 <__prologue_saves__+0x1c>
   12f7e:	8f 3f       	cpi	r24, 0xFF	; 255
   12f80:	09 f4       	brne	.+2      	; 0x12f84 <set_active_device+0x12>
   12f82:	b5 c0       	rjmp	.+362    	; 0x130ee <set_active_device+0x17c>
   12f84:	e8 2f       	mov	r30, r24
   12f86:	8c 30       	cpi	r24, 0x0C	; 12
   12f88:	a0 f0       	brcs	.+40     	; 0x12fb2 <set_active_device+0x40>
   12f8a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12f8e:	80 ff       	sbrs	r24, 0
   12f90:	ae c0       	rjmp	.+348    	; 0x130ee <set_active_device+0x17c>
   12f92:	0e 2e       	mov	r0, r30
   12f94:	00 0c       	add	r0, r0
   12f96:	ff 0b       	sbc	r31, r31
   12f98:	cd b7       	in	r28, 0x3d	; 61
   12f9a:	de b7       	in	r29, 0x3e	; 62
   12f9c:	fd 83       	std	Y+5, r31	; 0x05
   12f9e:	ec 83       	std	Y+4, r30	; 0x04
   12fa0:	88 e3       	ldi	r24, 0x38	; 56
   12fa2:	9c e1       	ldi	r25, 0x1C	; 28
   12fa4:	a0 e0       	ldi	r26, 0x00	; 0
   12fa6:	89 83       	std	Y+1, r24	; 0x01
   12fa8:	9a 83       	std	Y+2, r25	; 0x02
   12faa:	ab 83       	std	Y+3, r26	; 0x03
   12fac:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   12fb0:	9e c0       	rjmp	.+316    	; 0x130ee <set_active_device+0x17c>
   12fb2:	08 2f       	mov	r16, r24
   12fb4:	88 0f       	add	r24, r24
   12fb6:	11 0b       	sbc	r17, r17
   12fb8:	8b e0       	ldi	r24, 0x0B	; 11
   12fba:	e8 02       	muls	r30, r24
   12fbc:	f0 01       	movw	r30, r0
   12fbe:	11 24       	eor	r1, r1
   12fc0:	e6 51       	subi	r30, 0x16	; 22
   12fc2:	f1 4e       	sbci	r31, 0xE1	; 225
   12fc4:	81 81       	ldd	r24, Z+1	; 0x01
   12fc6:	8f 31       	cpi	r24, 0x1F	; 31
   12fc8:	a0 f0       	brcs	.+40     	; 0x12ff2 <set_active_device+0x80>
   12fca:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   12fce:	90 ff       	sbrs	r25, 0
   12fd0:	8e c0       	rjmp	.+284    	; 0x130ee <set_active_device+0x17c>
   12fd2:	90 e0       	ldi	r25, 0x00	; 0
   12fd4:	cd b7       	in	r28, 0x3d	; 61
   12fd6:	de b7       	in	r29, 0x3e	; 62
   12fd8:	9f 83       	std	Y+7, r25	; 0x07
   12fda:	8e 83       	std	Y+6, r24	; 0x06
   12fdc:	1d 83       	std	Y+5, r17	; 0x05
   12fde:	0c 83       	std	Y+4, r16	; 0x04
   12fe0:	8f ef       	ldi	r24, 0xFF	; 255
   12fe2:	9b e1       	ldi	r25, 0x1B	; 27
   12fe4:	a0 e0       	ldi	r26, 0x00	; 0
   12fe6:	89 83       	std	Y+1, r24	; 0x01
   12fe8:	9a 83       	std	Y+2, r25	; 0x02
   12fea:	ab 83       	std	Y+3, r26	; 0x03
   12fec:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   12ff0:	7e c0       	rjmp	.+252    	; 0x130ee <set_active_device+0x17c>
   12ff2:	20 81       	ld	r18, Z
   12ff4:	c2 2f       	mov	r28, r18
   12ff6:	d0 e0       	ldi	r29, 0x00	; 0
   12ff8:	87 81       	ldd	r24, Z+7	; 0x07
   12ffa:	90 85       	ldd	r25, Z+8	; 0x08
   12ffc:	00 97       	sbiw	r24, 0x00	; 0
   12ffe:	89 f4       	brne	.+34     	; 0x13022 <set_active_device+0xb0>
   13000:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   13004:	80 ff       	sbrs	r24, 0
   13006:	73 c0       	rjmp	.+230    	; 0x130ee <set_active_device+0x17c>
   13008:	ce 01       	movw	r24, r28
   1300a:	6d df       	rcall	.-294    	; 0x12ee6 <type_to_str>
   1300c:	ed b7       	in	r30, 0x3d	; 61
   1300e:	fe b7       	in	r31, 0x3e	; 62
   13010:	91 87       	std	Z+9, r25	; 0x09
   13012:	80 87       	std	Z+8, r24	; 0x08
   13014:	d7 83       	std	Z+7, r29	; 0x07
   13016:	c6 83       	std	Z+6, r28	; 0x06
   13018:	15 83       	std	Z+5, r17	; 0x05
   1301a:	04 83       	std	Z+4, r16	; 0x04
   1301c:	8a ec       	ldi	r24, 0xCA	; 202
   1301e:	9b e1       	ldi	r25, 0x1B	; 27
   13020:	5e c0       	rjmp	.+188    	; 0x130de <set_active_device+0x16c>
   13022:	20 97       	sbiw	r28, 0x00	; 0
   13024:	91 f4       	brne	.+36     	; 0x1304a <set_active_device+0xd8>
   13026:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1302a:	80 ff       	sbrs	r24, 0
   1302c:	60 c0       	rjmp	.+192    	; 0x130ee <set_active_device+0x17c>
   1302e:	80 e0       	ldi	r24, 0x00	; 0
   13030:	90 e0       	ldi	r25, 0x00	; 0
   13032:	59 df       	rcall	.-334    	; 0x12ee6 <type_to_str>
   13034:	ed b7       	in	r30, 0x3d	; 61
   13036:	fe b7       	in	r31, 0x3e	; 62
   13038:	91 87       	std	Z+9, r25	; 0x09
   1303a:	80 87       	std	Z+8, r24	; 0x08
   1303c:	17 82       	std	Z+7, r1	; 0x07
   1303e:	16 82       	std	Z+6, r1	; 0x06
   13040:	15 83       	std	Z+5, r17	; 0x05
   13042:	04 83       	std	Z+4, r16	; 0x04
   13044:	85 e9       	ldi	r24, 0x95	; 149
   13046:	9b e1       	ldi	r25, 0x1B	; 27
   13048:	4a c0       	rjmp	.+148    	; 0x130de <set_active_device+0x16c>
   1304a:	c4 30       	cpi	r28, 0x04	; 4
   1304c:	d1 05       	cpc	r29, r1
   1304e:	29 f4       	brne	.+10     	; 0x1305a <set_active_device+0xe8>
   13050:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <PRINTERp+0x1>
   13054:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <PRINTERp>
   13058:	30 c0       	rjmp	.+96     	; 0x130ba <set_active_device+0x148>
   1305a:	2d 7f       	andi	r18, 0xFD	; 253
   1305c:	21 30       	cpi	r18, 0x01	; 1
   1305e:	79 f5       	brne	.+94     	; 0x130be <set_active_device+0x14c>
   13060:	21 85       	ldd	r18, Z+9	; 0x09
   13062:	32 85       	ldd	r19, Z+10	; 0x0a
   13064:	21 15       	cp	r18, r1
   13066:	31 05       	cpc	r19, r1
   13068:	89 f4       	brne	.+34     	; 0x1308c <set_active_device+0x11a>
   1306a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1306e:	80 ff       	sbrs	r24, 0
   13070:	3e c0       	rjmp	.+124    	; 0x130ee <set_active_device+0x17c>
   13072:	ce 01       	movw	r24, r28
   13074:	38 df       	rcall	.-400    	; 0x12ee6 <type_to_str>
   13076:	ed b7       	in	r30, 0x3d	; 61
   13078:	fe b7       	in	r31, 0x3e	; 62
   1307a:	91 87       	std	Z+9, r25	; 0x09
   1307c:	80 87       	std	Z+8, r24	; 0x08
   1307e:	d7 83       	std	Z+7, r29	; 0x07
   13080:	c6 83       	std	Z+6, r28	; 0x06
   13082:	15 83       	std	Z+5, r17	; 0x05
   13084:	04 83       	std	Z+4, r16	; 0x04
   13086:	8d e5       	ldi	r24, 0x5D	; 93
   13088:	9b e1       	ldi	r25, 0x1B	; 27
   1308a:	29 c0       	rjmp	.+82     	; 0x130de <set_active_device+0x16c>
   1308c:	c1 30       	cpi	r28, 0x01	; 1
   1308e:	d1 05       	cpc	r29, r1
   13090:	49 f4       	brne	.+18     	; 0x130a4 <set_active_device+0x132>
   13092:	90 93 5b 19 	sts	0x195B, r25	; 0x80195b <AMIGOp+0x1>
   13096:	80 93 5a 19 	sts	0x195A, r24	; 0x80195a <AMIGOp>
   1309a:	30 93 59 19 	sts	0x1959, r19	; 0x801959 <AMIGOs+0x1>
   1309e:	20 93 58 19 	sts	0x1958, r18	; 0x801958 <AMIGOs>
   130a2:	0b c0       	rjmp	.+22     	; 0x130ba <set_active_device+0x148>
   130a4:	c3 30       	cpi	r28, 0x03	; 3
   130a6:	d1 05       	cpc	r29, r1
   130a8:	51 f4       	brne	.+20     	; 0x130be <set_active_device+0x14c>
   130aa:	90 93 5f 19 	sts	0x195F, r25	; 0x80195f <SS80p+0x1>
   130ae:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <SS80p>
   130b2:	30 93 5d 19 	sts	0x195D, r19	; 0x80195d <SS80s+0x1>
   130b6:	20 93 5c 19 	sts	0x195C, r18	; 0x80195c <SS80s>
   130ba:	81 e0       	ldi	r24, 0x01	; 1
   130bc:	19 c0       	rjmp	.+50     	; 0x130f0 <set_active_device+0x17e>
   130be:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   130c2:	80 ff       	sbrs	r24, 0
   130c4:	14 c0       	rjmp	.+40     	; 0x130ee <set_active_device+0x17c>
   130c6:	ce 01       	movw	r24, r28
   130c8:	0e df       	rcall	.-484    	; 0x12ee6 <type_to_str>
   130ca:	ed b7       	in	r30, 0x3d	; 61
   130cc:	fe b7       	in	r31, 0x3e	; 62
   130ce:	91 87       	std	Z+9, r25	; 0x09
   130d0:	80 87       	std	Z+8, r24	; 0x08
   130d2:	d7 83       	std	Z+7, r29	; 0x07
   130d4:	c6 83       	std	Z+6, r28	; 0x06
   130d6:	15 83       	std	Z+5, r17	; 0x05
   130d8:	04 83       	std	Z+4, r16	; 0x04
   130da:	82 e3       	ldi	r24, 0x32	; 50
   130dc:	9b e1       	ldi	r25, 0x1B	; 27
   130de:	a0 e0       	ldi	r26, 0x00	; 0
   130e0:	cd b7       	in	r28, 0x3d	; 61
   130e2:	de b7       	in	r29, 0x3e	; 62
   130e4:	89 83       	std	Y+1, r24	; 0x01
   130e6:	9a 83       	std	Y+2, r25	; 0x02
   130e8:	ab 83       	std	Y+3, r26	; 0x03
   130ea:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   130ee:	80 e0       	ldi	r24, 0x00	; 0
   130f0:	cd b7       	in	r28, 0x3d	; 61
   130f2:	de b7       	in	r29, 0x3e	; 62
   130f4:	29 96       	adiw	r28, 0x09	; 9
   130f6:	e4 e0       	ldi	r30, 0x04	; 4
   130f8:	0c 94 bd e7 	jmp	0x1cf7a	; 0x1cf7a <__epilogue_restores__+0x1c>

000130fc <SS80_Set_Defaults>:
   130fc:	0f 93       	push	r16
   130fe:	1f 93       	push	r17
   13100:	cf 93       	push	r28
   13102:	df 93       	push	r29
   13104:	18 2f       	mov	r17, r24
   13106:	82 e0       	ldi	r24, 0x02	; 2
   13108:	90 e0       	ldi	r25, 0x00	; 0
   1310a:	ca de       	rcall	.-620    	; 0x12ea0 <find_type>
   1310c:	87 fd       	sbrc	r24, 7
   1310e:	69 c0       	rjmp	.+210    	; 0x131e2 <SS80_Set_Defaults+0xe6>
   13110:	2b e0       	ldi	r18, 0x0B	; 11
   13112:	12 03       	mulsu	r17, r18
   13114:	e0 01       	movw	r28, r0
   13116:	11 24       	eor	r1, r1
   13118:	c6 51       	subi	r28, 0x16	; 22
   1311a:	d1 4e       	sbci	r29, 0xE1	; 225
   1311c:	0f 80       	ldd	r0, Y+7	; 0x07
   1311e:	d8 85       	ldd	r29, Y+8	; 0x08
   13120:	c0 2d       	mov	r28, r0
   13122:	38 2f       	mov	r19, r24
   13124:	32 03       	mulsu	r19, r18
   13126:	f0 01       	movw	r30, r0
   13128:	11 24       	eor	r1, r1
   1312a:	e6 51       	subi	r30, 0x16	; 22
   1312c:	f1 4e       	sbci	r31, 0xE1	; 225
   1312e:	07 81       	ldd	r16, Z+7	; 0x07
   13130:	10 85       	ldd	r17, Z+8	; 0x08
   13132:	f8 01       	movw	r30, r16
   13134:	80 81       	ld	r24, Z
   13136:	88 83       	st	Y, r24
   13138:	81 81       	ldd	r24, Z+1	; 0x01
   1313a:	89 83       	std	Y+1, r24	; 0x01
   1313c:	82 81       	ldd	r24, Z+2	; 0x02
   1313e:	93 81       	ldd	r25, Z+3	; 0x03
   13140:	0e 94 60 32 	call	0x64c0	; 0x64c0 <stralloc>
   13144:	9b 83       	std	Y+3, r25	; 0x03
   13146:	8a 83       	std	Y+2, r24	; 0x02
   13148:	f8 01       	movw	r30, r16
   1314a:	86 81       	ldd	r24, Z+6	; 0x06
   1314c:	97 81       	ldd	r25, Z+7	; 0x07
   1314e:	9f 83       	std	Y+7, r25	; 0x07
   13150:	8e 83       	std	Y+6, r24	; 0x06
   13152:	80 85       	ldd	r24, Z+8	; 0x08
   13154:	91 85       	ldd	r25, Z+9	; 0x09
   13156:	99 87       	std	Y+9, r25	; 0x09
   13158:	88 87       	std	Y+8, r24	; 0x08
   1315a:	82 85       	ldd	r24, Z+10	; 0x0a
   1315c:	93 85       	ldd	r25, Z+11	; 0x0b
   1315e:	9b 87       	std	Y+11, r25	; 0x0b
   13160:	8a 87       	std	Y+10, r24	; 0x0a
   13162:	84 85       	ldd	r24, Z+12	; 0x0c
   13164:	8c 87       	std	Y+12, r24	; 0x0c
   13166:	85 85       	ldd	r24, Z+13	; 0x0d
   13168:	8d 87       	std	Y+13, r24	; 0x0d
   1316a:	86 85       	ldd	r24, Z+14	; 0x0e
   1316c:	97 85       	ldd	r25, Z+15	; 0x0f
   1316e:	a0 89       	ldd	r26, Z+16	; 0x10
   13170:	b1 89       	ldd	r27, Z+17	; 0x11
   13172:	8e 87       	std	Y+14, r24	; 0x0e
   13174:	9f 87       	std	Y+15, r25	; 0x0f
   13176:	a8 8b       	std	Y+16, r26	; 0x10
   13178:	b9 8b       	std	Y+17, r27	; 0x11
   1317a:	82 89       	ldd	r24, Z+18	; 0x12
   1317c:	93 89       	ldd	r25, Z+19	; 0x13
   1317e:	9b 8b       	std	Y+19, r25	; 0x13
   13180:	8a 8b       	std	Y+18, r24	; 0x12
   13182:	84 89       	ldd	r24, Z+20	; 0x14
   13184:	8c 8b       	std	Y+20, r24	; 0x14
   13186:	85 89       	ldd	r24, Z+21	; 0x15
   13188:	8d 8b       	std	Y+21, r24	; 0x15
   1318a:	86 89       	ldd	r24, Z+22	; 0x16
   1318c:	97 89       	ldd	r25, Z+23	; 0x17
   1318e:	9f 8b       	std	Y+23, r25	; 0x17
   13190:	8e 8b       	std	Y+22, r24	; 0x16
   13192:	80 8d       	ldd	r24, Z+24	; 0x18
   13194:	91 8d       	ldd	r25, Z+25	; 0x19
   13196:	99 8f       	std	Y+25, r25	; 0x19
   13198:	88 8f       	std	Y+24, r24	; 0x18
   1319a:	82 8d       	ldd	r24, Z+26	; 0x1a
   1319c:	93 8d       	ldd	r25, Z+27	; 0x1b
   1319e:	9b 8f       	std	Y+27, r25	; 0x1b
   131a0:	8a 8f       	std	Y+26, r24	; 0x1a
   131a2:	84 8d       	ldd	r24, Z+28	; 0x1c
   131a4:	95 8d       	ldd	r25, Z+29	; 0x1d
   131a6:	9d 8f       	std	Y+29, r25	; 0x1d
   131a8:	8c 8f       	std	Y+28, r24	; 0x1c
   131aa:	86 8d       	ldd	r24, Z+30	; 0x1e
   131ac:	8e 8f       	std	Y+30, r24	; 0x1e
   131ae:	87 8d       	ldd	r24, Z+31	; 0x1f
   131b0:	8f 8f       	std	Y+31, r24	; 0x1f
   131b2:	81 a1       	ldd	r24, Z+33	; 0x21
   131b4:	92 a1       	ldd	r25, Z+34	; 0x22
   131b6:	a3 a1       	ldd	r26, Z+35	; 0x23
   131b8:	b4 a1       	ldd	r27, Z+36	; 0x24
   131ba:	89 a3       	std	Y+33, r24	; 0x21
   131bc:	9a a3       	std	Y+34, r25	; 0x22
   131be:	ab a3       	std	Y+35, r26	; 0x23
   131c0:	bc a3       	std	Y+36, r27	; 0x24
   131c2:	85 a1       	ldd	r24, Z+37	; 0x25
   131c4:	8d a3       	std	Y+37, r24	; 0x25
   131c6:	86 a1       	ldd	r24, Z+38	; 0x26
   131c8:	97 a1       	ldd	r25, Z+39	; 0x27
   131ca:	9f a3       	std	Y+39, r25	; 0x27
   131cc:	8e a3       	std	Y+38, r24	; 0x26
   131ce:	80 a5       	ldd	r24, Z+40	; 0x28
   131d0:	91 a5       	ldd	r25, Z+41	; 0x29
   131d2:	a2 a5       	ldd	r26, Z+42	; 0x2a
   131d4:	b3 a5       	ldd	r27, Z+43	; 0x2b
   131d6:	88 a7       	std	Y+40, r24	; 0x28
   131d8:	99 a7       	std	Y+41, r25	; 0x29
   131da:	aa a7       	std	Y+42, r26	; 0x2a
   131dc:	bb a7       	std	Y+43, r27	; 0x2b
   131de:	84 a5       	ldd	r24, Z+44	; 0x2c
   131e0:	8c a7       	std	Y+44, r24	; 0x2c
   131e2:	df 91       	pop	r29
   131e4:	cf 91       	pop	r28
   131e6:	1f 91       	pop	r17
   131e8:	0f 91       	pop	r16
   131ea:	08 95       	ret

000131ec <free_device>:
   131ec:	0f 93       	push	r16
   131ee:	1f 93       	push	r17
   131f0:	cf 93       	push	r28
   131f2:	df 93       	push	r29
   131f4:	8c 30       	cpi	r24, 0x0C	; 12
   131f6:	08 f0       	brcs	.+2      	; 0x131fa <free_device+0xe>
   131f8:	55 c0       	rjmp	.+170    	; 0x132a4 <free_device+0xb8>
   131fa:	08 2f       	mov	r16, r24
   131fc:	08 2e       	mov	r0, r24
   131fe:	00 0c       	add	r0, r0
   13200:	11 0b       	sbc	r17, r17
   13202:	9b e0       	ldi	r25, 0x0B	; 11
   13204:	89 02       	muls	r24, r25
   13206:	f0 01       	movw	r30, r0
   13208:	11 24       	eor	r1, r1
   1320a:	e6 51       	subi	r30, 0x16	; 22
   1320c:	f1 4e       	sbci	r31, 0xE1	; 225
   1320e:	80 81       	ld	r24, Z
   13210:	83 30       	cpi	r24, 0x03	; 3
   13212:	51 f4       	brne	.+20     	; 0x13228 <free_device+0x3c>
   13214:	c7 81       	ldd	r28, Z+7	; 0x07
   13216:	d0 85       	ldd	r29, Z+8	; 0x08
   13218:	8a 81       	ldd	r24, Y+2	; 0x02
   1321a:	9b 81       	ldd	r25, Y+3	; 0x03
   1321c:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <safefree>
   13220:	8c 81       	ldd	r24, Y+4	; 0x04
   13222:	9d 81       	ldd	r25, Y+5	; 0x05
   13224:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <safefree>
   13228:	8b e0       	ldi	r24, 0x0B	; 11
   1322a:	80 9f       	mul	r24, r16
   1322c:	f0 01       	movw	r30, r0
   1322e:	81 9f       	mul	r24, r17
   13230:	f0 0d       	add	r31, r0
   13232:	11 24       	eor	r1, r1
   13234:	e6 51       	subi	r30, 0x16	; 22
   13236:	f1 4e       	sbci	r31, 0xE1	; 225
   13238:	80 81       	ld	r24, Z
   1323a:	81 30       	cpi	r24, 0x01	; 1
   1323c:	51 f4       	brne	.+20     	; 0x13252 <free_device+0x66>
   1323e:	c7 81       	ldd	r28, Z+7	; 0x07
   13240:	d0 85       	ldd	r29, Z+8	; 0x08
   13242:	8a 81       	ldd	r24, Y+2	; 0x02
   13244:	9b 81       	ldd	r25, Y+3	; 0x03
   13246:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <safefree>
   1324a:	8c 81       	ldd	r24, Y+4	; 0x04
   1324c:	9d 81       	ldd	r25, Y+5	; 0x05
   1324e:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <safefree>
   13252:	8b e0       	ldi	r24, 0x0B	; 11
   13254:	80 9f       	mul	r24, r16
   13256:	f0 01       	movw	r30, r0
   13258:	81 9f       	mul	r24, r17
   1325a:	f0 0d       	add	r31, r0
   1325c:	11 24       	eor	r1, r1
   1325e:	e6 51       	subi	r30, 0x16	; 22
   13260:	f1 4e       	sbci	r31, 0xE1	; 225
   13262:	80 81       	ld	r24, Z
   13264:	84 30       	cpi	r24, 0x04	; 4
   13266:	11 f4       	brne	.+4      	; 0x1326c <free_device+0x80>
   13268:	0e 94 0b bf 	call	0x17e16	; 0x17e16 <printer_close>
   1326c:	8b e0       	ldi	r24, 0x0B	; 11
   1326e:	80 9f       	mul	r24, r16
   13270:	e0 01       	movw	r28, r0
   13272:	81 9f       	mul	r24, r17
   13274:	d0 0d       	add	r29, r0
   13276:	11 24       	eor	r1, r1
   13278:	c6 51       	subi	r28, 0x16	; 22
   1327a:	d1 4e       	sbci	r29, 0xE1	; 225
   1327c:	8f 81       	ldd	r24, Y+7	; 0x07
   1327e:	98 85       	ldd	r25, Y+8	; 0x08
   13280:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <safefree>
   13284:	89 85       	ldd	r24, Y+9	; 0x09
   13286:	9a 85       	ldd	r25, Y+10	; 0x0a
   13288:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <safefree>
   1328c:	18 82       	st	Y, r1
   1328e:	19 82       	std	Y+1, r1	; 0x01
   13290:	8f ef       	ldi	r24, 0xFF	; 255
   13292:	8a 83       	std	Y+2, r24	; 0x02
   13294:	1b 82       	std	Y+3, r1	; 0x03
   13296:	1c 82       	std	Y+4, r1	; 0x04
   13298:	1d 82       	std	Y+5, r1	; 0x05
   1329a:	1e 82       	std	Y+6, r1	; 0x06
   1329c:	18 86       	std	Y+8, r1	; 0x08
   1329e:	1f 82       	std	Y+7, r1	; 0x07
   132a0:	1a 86       	std	Y+10, r1	; 0x0a
   132a2:	19 86       	std	Y+9, r1	; 0x09
   132a4:	df 91       	pop	r29
   132a6:	cf 91       	pop	r28
   132a8:	1f 91       	pop	r17
   132aa:	0f 91       	pop	r16
   132ac:	08 95       	ret

000132ae <alloc_device>:
   132ae:	0f 93       	push	r16
   132b0:	1f 93       	push	r17
   132b2:	cf 93       	push	r28
   132b4:	ad b7       	in	r26, 0x3d	; 61
   132b6:	be b7       	in	r27, 0x3e	; 62
   132b8:	17 97       	sbiw	r26, 0x07	; 7
   132ba:	0f b6       	in	r0, 0x3f	; 63
   132bc:	f8 94       	cli
   132be:	be bf       	out	0x3e, r27	; 62
   132c0:	0f be       	out	0x3f, r0	; 63
   132c2:	ad bf       	out	0x3d, r26	; 61
   132c4:	8c 01       	movw	r16, r24
   132c6:	28 de       	rcall	.-944    	; 0x12f18 <find_free>
   132c8:	c8 2f       	mov	r28, r24
   132ca:	8f 3f       	cpi	r24, 0xFF	; 255
   132cc:	89 f4       	brne	.+34     	; 0x132f0 <alloc_device+0x42>
   132ce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   132d2:	80 ff       	sbrs	r24, 0
   132d4:	98 c0       	rjmp	.+304    	; 0x13406 <alloc_device+0x158>
   132d6:	ed b7       	in	r30, 0x3d	; 61
   132d8:	fe b7       	in	r31, 0x3e	; 62
   132da:	15 83       	std	Z+5, r17	; 0x05
   132dc:	04 83       	std	Z+4, r16	; 0x04
   132de:	8e e0       	ldi	r24, 0x0E	; 14
   132e0:	9b e1       	ldi	r25, 0x1B	; 27
   132e2:	a0 e0       	ldi	r26, 0x00	; 0
   132e4:	81 83       	std	Z+1, r24	; 0x01
   132e6:	92 83       	std	Z+2, r25	; 0x02
   132e8:	a3 83       	std	Z+3, r26	; 0x03
   132ea:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   132ee:	8b c0       	rjmp	.+278    	; 0x13406 <alloc_device+0x158>
   132f0:	02 30       	cpi	r16, 0x02	; 2
   132f2:	11 05       	cpc	r17, r1
   132f4:	c1 f1       	breq	.+112    	; 0x13366 <alloc_device+0xb8>
   132f6:	dc f4       	brge	.+54     	; 0x1332e <alloc_device+0x80>
   132f8:	01 30       	cpi	r16, 0x01	; 1
   132fa:	11 05       	cpc	r17, r1
   132fc:	09 f0       	breq	.+2      	; 0x13300 <alloc_device+0x52>
   132fe:	6e c0       	rjmp	.+220    	; 0x133dc <alloc_device+0x12e>
   13300:	fb e0       	ldi	r31, 0x0B	; 11
   13302:	8f 02       	muls	r24, r31
   13304:	80 01       	movw	r16, r0
   13306:	11 24       	eor	r1, r1
   13308:	06 51       	subi	r16, 0x16	; 22
   1330a:	11 4e       	sbci	r17, 0xE1	; 225
   1330c:	81 e0       	ldi	r24, 0x01	; 1
   1330e:	f8 01       	movw	r30, r16
   13310:	80 83       	st	Z, r24
   13312:	61 e0       	ldi	r22, 0x01	; 1
   13314:	70 e0       	ldi	r23, 0x00	; 0
   13316:	87 e1       	ldi	r24, 0x17	; 23
   13318:	90 e0       	ldi	r25, 0x00	; 0
   1331a:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safecalloc>
   1331e:	f8 01       	movw	r30, r16
   13320:	90 87       	std	Z+8, r25	; 0x08
   13322:	87 83       	std	Z+7, r24	; 0x07
   13324:	61 e0       	ldi	r22, 0x01	; 1
   13326:	70 e0       	ldi	r23, 0x00	; 0
   13328:	88 e1       	ldi	r24, 0x18	; 24
   1332a:	90 e0       	ldi	r25, 0x00	; 0
   1332c:	51 c0       	rjmp	.+162    	; 0x133d0 <alloc_device+0x122>
   1332e:	03 30       	cpi	r16, 0x03	; 3
   13330:	11 05       	cpc	r17, r1
   13332:	81 f1       	breq	.+96     	; 0x13394 <alloc_device+0xe6>
   13334:	04 30       	cpi	r16, 0x04	; 4
   13336:	11 05       	cpc	r17, r1
   13338:	09 f0       	breq	.+2      	; 0x1333c <alloc_device+0x8e>
   1333a:	50 c0       	rjmp	.+160    	; 0x133dc <alloc_device+0x12e>
   1333c:	fb e0       	ldi	r31, 0x0B	; 11
   1333e:	8f 02       	muls	r24, r31
   13340:	80 01       	movw	r16, r0
   13342:	11 24       	eor	r1, r1
   13344:	06 51       	subi	r16, 0x16	; 22
   13346:	11 4e       	sbci	r17, 0xE1	; 225
   13348:	84 e0       	ldi	r24, 0x04	; 4
   1334a:	f8 01       	movw	r30, r16
   1334c:	80 83       	st	Z, r24
   1334e:	61 e0       	ldi	r22, 0x01	; 1
   13350:	70 e0       	ldi	r23, 0x00	; 0
   13352:	8d e0       	ldi	r24, 0x0D	; 13
   13354:	90 e0       	ldi	r25, 0x00	; 0
   13356:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safecalloc>
   1335a:	f8 01       	movw	r30, r16
   1335c:	90 87       	std	Z+8, r25	; 0x08
   1335e:	87 83       	std	Z+7, r24	; 0x07
   13360:	12 86       	std	Z+10, r1	; 0x0a
   13362:	11 86       	std	Z+9, r1	; 0x09
   13364:	50 c0       	rjmp	.+160    	; 0x13406 <alloc_device+0x158>
   13366:	fb e0       	ldi	r31, 0x0B	; 11
   13368:	8f 02       	muls	r24, r31
   1336a:	80 01       	movw	r16, r0
   1336c:	11 24       	eor	r1, r1
   1336e:	06 51       	subi	r16, 0x16	; 22
   13370:	11 4e       	sbci	r17, 0xE1	; 225
   13372:	82 e0       	ldi	r24, 0x02	; 2
   13374:	f8 01       	movw	r30, r16
   13376:	80 83       	st	Z, r24
   13378:	61 e0       	ldi	r22, 0x01	; 1
   1337a:	70 e0       	ldi	r23, 0x00	; 0
   1337c:	84 e3       	ldi	r24, 0x34	; 52
   1337e:	90 e0       	ldi	r25, 0x00	; 0
   13380:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safecalloc>
   13384:	f8 01       	movw	r30, r16
   13386:	90 87       	std	Z+8, r25	; 0x08
   13388:	87 83       	std	Z+7, r24	; 0x07
   1338a:	61 e0       	ldi	r22, 0x01	; 1
   1338c:	70 e0       	ldi	r23, 0x00	; 0
   1338e:	86 e1       	ldi	r24, 0x16	; 22
   13390:	90 e0       	ldi	r25, 0x00	; 0
   13392:	1e c0       	rjmp	.+60     	; 0x133d0 <alloc_device+0x122>
   13394:	fb e0       	ldi	r31, 0x0B	; 11
   13396:	8f 02       	muls	r24, r31
   13398:	80 01       	movw	r16, r0
   1339a:	11 24       	eor	r1, r1
   1339c:	06 51       	subi	r16, 0x16	; 22
   1339e:	11 4e       	sbci	r17, 0xE1	; 225
   133a0:	83 e0       	ldi	r24, 0x03	; 3
   133a2:	f8 01       	movw	r30, r16
   133a4:	80 83       	st	Z, r24
   133a6:	61 e0       	ldi	r22, 0x01	; 1
   133a8:	70 e0       	ldi	r23, 0x00	; 0
   133aa:	84 e3       	ldi	r24, 0x34	; 52
   133ac:	90 e0       	ldi	r25, 0x00	; 0
   133ae:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safecalloc>
   133b2:	f8 01       	movw	r30, r16
   133b4:	90 87       	std	Z+8, r25	; 0x08
   133b6:	87 83       	std	Z+7, r24	; 0x07
   133b8:	61 e0       	ldi	r22, 0x01	; 1
   133ba:	70 e0       	ldi	r23, 0x00	; 0
   133bc:	86 e1       	ldi	r24, 0x16	; 22
   133be:	90 e0       	ldi	r25, 0x00	; 0
   133c0:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safecalloc>
   133c4:	f8 01       	movw	r30, r16
   133c6:	92 87       	std	Z+10, r25	; 0x0a
   133c8:	81 87       	std	Z+9, r24	; 0x09
   133ca:	8c 2f       	mov	r24, r28
   133cc:	97 de       	rcall	.-722    	; 0x130fc <SS80_Set_Defaults>
   133ce:	1b c0       	rjmp	.+54     	; 0x13406 <alloc_device+0x158>
   133d0:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safecalloc>
   133d4:	f8 01       	movw	r30, r16
   133d6:	92 87       	std	Z+10, r25	; 0x0a
   133d8:	81 87       	std	Z+9, r24	; 0x09
   133da:	15 c0       	rjmp	.+42     	; 0x13406 <alloc_device+0x158>
   133dc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   133e0:	80 ff       	sbrs	r24, 0
   133e2:	10 c0       	rjmp	.+32     	; 0x13404 <alloc_device+0x156>
   133e4:	c8 01       	movw	r24, r16
   133e6:	7f dd       	rcall	.-1282   	; 0x12ee6 <type_to_str>
   133e8:	ed b7       	in	r30, 0x3d	; 61
   133ea:	fe b7       	in	r31, 0x3e	; 62
   133ec:	97 83       	std	Z+7, r25	; 0x07
   133ee:	86 83       	std	Z+6, r24	; 0x06
   133f0:	15 83       	std	Z+5, r17	; 0x05
   133f2:	04 83       	std	Z+4, r16	; 0x04
   133f4:	8c ee       	ldi	r24, 0xEC	; 236
   133f6:	9a e1       	ldi	r25, 0x1A	; 26
   133f8:	a0 e0       	ldi	r26, 0x00	; 0
   133fa:	81 83       	std	Z+1, r24	; 0x01
   133fc:	92 83       	std	Z+2, r25	; 0x02
   133fe:	a3 83       	std	Z+3, r26	; 0x03
   13400:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   13404:	cf ef       	ldi	r28, 0xFF	; 255
   13406:	8c 2f       	mov	r24, r28
   13408:	ad b7       	in	r26, 0x3d	; 61
   1340a:	be b7       	in	r27, 0x3e	; 62
   1340c:	17 96       	adiw	r26, 0x07	; 7
   1340e:	0f b6       	in	r0, 0x3f	; 63
   13410:	f8 94       	cli
   13412:	be bf       	out	0x3e, r27	; 62
   13414:	0f be       	out	0x3f, r0	; 63
   13416:	ad bf       	out	0x3d, r26	; 61
   13418:	cf 91       	pop	r28
   1341a:	1f 91       	pop	r17
   1341c:	0f 91       	pop	r16
   1341e:	08 95       	ret

00013420 <init_Devices>:
   13420:	10 92 6d 19 	sts	0x196D, r1	; 0x80196d <stack_ind+0x1>
   13424:	10 92 6c 19 	sts	0x196C, r1	; 0x80196c <stack_ind>
   13428:	ea ee       	ldi	r30, 0xEA	; 234
   1342a:	fe e1       	ldi	r31, 0x1E	; 30
   1342c:	8f ef       	ldi	r24, 0xFF	; 255
   1342e:	10 82       	st	Z, r1
   13430:	11 82       	std	Z+1, r1	; 0x01
   13432:	82 83       	std	Z+2, r24	; 0x02
   13434:	13 82       	std	Z+3, r1	; 0x03
   13436:	14 82       	std	Z+4, r1	; 0x04
   13438:	15 82       	std	Z+5, r1	; 0x05
   1343a:	16 82       	std	Z+6, r1	; 0x06
   1343c:	10 86       	std	Z+8, r1	; 0x08
   1343e:	17 82       	std	Z+7, r1	; 0x07
   13440:	12 86       	std	Z+10, r1	; 0x0a
   13442:	11 86       	std	Z+9, r1	; 0x09
   13444:	3b 96       	adiw	r30, 0x0b	; 11
   13446:	9f e1       	ldi	r25, 0x1F	; 31
   13448:	ee 36       	cpi	r30, 0x6E	; 110
   1344a:	f9 07       	cpc	r31, r25
   1344c:	81 f7       	brne	.-32     	; 0x1342e <init_Devices+0xe>
   1344e:	08 95       	ret

00013450 <push_state>:
   13450:	20 91 6c 19 	lds	r18, 0x196C	; 0x80196c <stack_ind>
   13454:	30 91 6d 19 	lds	r19, 0x196D	; 0x80196d <stack_ind+0x1>
   13458:	25 30       	cpi	r18, 0x05	; 5
   1345a:	31 05       	cpc	r19, r1
   1345c:	7c f4       	brge	.+30     	; 0x1347c <push_state+0x2c>
   1345e:	a9 01       	movw	r20, r18
   13460:	4f 5f       	subi	r20, 0xFF	; 255
   13462:	5f 4f       	sbci	r21, 0xFF	; 255
   13464:	50 93 6d 19 	sts	0x196D, r21	; 0x80196d <stack_ind+0x1>
   13468:	40 93 6c 19 	sts	0x196C, r20	; 0x80196c <stack_ind>
   1346c:	22 0f       	add	r18, r18
   1346e:	33 1f       	adc	r19, r19
   13470:	f9 01       	movw	r30, r18
   13472:	ee 59       	subi	r30, 0x9E	; 158
   13474:	f6 4e       	sbci	r31, 0xE6	; 230
   13476:	80 83       	st	Z, r24
   13478:	91 83       	std	Z+1, r25	; 0x01
   1347a:	08 95       	ret
   1347c:	80 e0       	ldi	r24, 0x00	; 0
   1347e:	90 e0       	ldi	r25, 0x00	; 0
   13480:	08 95       	ret

00013482 <pop_state>:
   13482:	80 91 6c 19 	lds	r24, 0x196C	; 0x80196c <stack_ind>
   13486:	90 91 6d 19 	lds	r25, 0x196D	; 0x80196d <stack_ind+0x1>
   1348a:	18 16       	cp	r1, r24
   1348c:	19 06       	cpc	r1, r25
   1348e:	6c f4       	brge	.+26     	; 0x134aa <pop_state+0x28>
   13490:	01 97       	sbiw	r24, 0x01	; 1
   13492:	90 93 6d 19 	sts	0x196D, r25	; 0x80196d <stack_ind+0x1>
   13496:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <stack_ind>
   1349a:	88 0f       	add	r24, r24
   1349c:	99 1f       	adc	r25, r25
   1349e:	fc 01       	movw	r30, r24
   134a0:	ee 59       	subi	r30, 0x9E	; 158
   134a2:	f6 4e       	sbci	r31, 0xE6	; 230
   134a4:	80 81       	ld	r24, Z
   134a6:	91 81       	ldd	r25, Z+1	; 0x01
   134a8:	08 95       	ret
   134aa:	80 e0       	ldi	r24, 0x00	; 0
   134ac:	90 e0       	ldi	r25, 0x00	; 0
   134ae:	08 95       	ret

000134b0 <set_Config_Defaults>:
   134b0:	08 95       	ret

000134b2 <hpdir_set_device>:
   134b2:	cf 93       	push	r28
   134b4:	df 93       	push	r29
   134b6:	00 d0       	rcall	.+0      	; 0x134b8 <hpdir_set_device+0x6>
   134b8:	1f 92       	push	r1
   134ba:	2b e0       	ldi	r18, 0x0B	; 11
   134bc:	82 02       	muls	r24, r18
   134be:	c0 01       	movw	r24, r0
   134c0:	11 24       	eor	r1, r1
   134c2:	fc 01       	movw	r30, r24
   134c4:	e6 51       	subi	r30, 0x16	; 22
   134c6:	f1 4e       	sbci	r31, 0xE1	; 225
   134c8:	80 81       	ld	r24, Z
   134ca:	83 30       	cpi	r24, 0x03	; 3
   134cc:	a1 f5       	brne	.+104    	; 0x13536 <hpdir_set_device+0x84>
   134ce:	c7 81       	ldd	r28, Z+7	; 0x07
   134d0:	d0 85       	ldd	r29, Z+8	; 0x08
   134d2:	80 91 ee 1f 	lds	r24, 0x1FEE	; 0x801fee <hpdir+0x80>
   134d6:	90 91 ef 1f 	lds	r25, 0x1FEF	; 0x801fef <hpdir+0x81>
   134da:	9f 83       	std	Y+7, r25	; 0x07
   134dc:	8e 83       	std	Y+6, r24	; 0x06
   134de:	80 91 fa 1f 	lds	r24, 0x1FFA	; 0x801ffa <hpdir+0x8c>
   134e2:	90 91 fb 1f 	lds	r25, 0x1FFB	; 0x801ffb <hpdir+0x8d>
   134e6:	a0 91 fc 1f 	lds	r26, 0x1FFC	; 0x801ffc <hpdir+0x8e>
   134ea:	b0 91 fd 1f 	lds	r27, 0x1FFD	; 0x801ffd <hpdir+0x8f>
   134ee:	8e 87       	std	Y+14, r24	; 0x0e
   134f0:	9f 87       	std	Y+15, r25	; 0x0f
   134f2:	a8 8b       	std	Y+16, r26	; 0x10
   134f4:	b9 8b       	std	Y+17, r27	; 0x11
   134f6:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <hpdir+0xa0>
   134fa:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <hpdir+0xa1>
   134fe:	9b 8b       	std	Y+19, r25	; 0x13
   13500:	8a 8b       	std	Y+18, r24	; 0x12
   13502:	19 a2       	std	Y+33, r1	; 0x21
   13504:	1a a2       	std	Y+34, r1	; 0x22
   13506:	1b a2       	std	Y+35, r1	; 0x23
   13508:	1c a2       	std	Y+36, r1	; 0x24
   1350a:	1d a2       	std	Y+37, r1	; 0x25
   1350c:	1f a2       	std	Y+39, r1	; 0x27
   1350e:	1e a2       	std	Y+38, r1	; 0x26
   13510:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <hpdir+0xac>
   13514:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <hpdir+0xad>
   13518:	a0 91 1c 20 	lds	r26, 0x201C	; 0x80201c <hpdir+0xae>
   1351c:	b0 91 1d 20 	lds	r27, 0x201D	; 0x80201d <hpdir+0xaf>
   13520:	ac 01       	movw	r20, r24
   13522:	bd 01       	movw	r22, r26
   13524:	41 50       	subi	r20, 0x01	; 1
   13526:	51 09       	sbc	r21, r1
   13528:	61 09       	sbc	r22, r1
   1352a:	71 09       	sbc	r23, r1
   1352c:	48 a7       	std	Y+40, r20	; 0x28
   1352e:	59 a7       	std	Y+41, r21	; 0x29
   13530:	6a a7       	std	Y+42, r22	; 0x2a
   13532:	7b a7       	std	Y+43, r23	; 0x2b
   13534:	2a c0       	rjmp	.+84     	; 0x1358a <hpdir_set_device+0xd8>
   13536:	81 30       	cpi	r24, 0x01	; 1
   13538:	a1 f5       	brne	.+104    	; 0x135a2 <hpdir_set_device+0xf0>
   1353a:	c7 81       	ldd	r28, Z+7	; 0x07
   1353c:	d0 85       	ldd	r29, Z+8	; 0x08
   1353e:	80 91 ee 1f 	lds	r24, 0x1FEE	; 0x801fee <hpdir+0x80>
   13542:	90 91 ef 1f 	lds	r25, 0x1FEF	; 0x801fef <hpdir+0x81>
   13546:	9f 83       	std	Y+7, r25	; 0x07
   13548:	8e 83       	std	Y+6, r24	; 0x06
   1354a:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <hpdir+0xa0>
   1354e:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <hpdir+0xa1>
   13552:	99 87       	std	Y+9, r25	; 0x09
   13554:	88 87       	std	Y+8, r24	; 0x08
   13556:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <hpdir+0x9c>
   1355a:	90 91 0b 20 	lds	r25, 0x200B	; 0x80200b <hpdir+0x9d>
   1355e:	9b 87       	std	Y+11, r25	; 0x0b
   13560:	8a 87       	std	Y+10, r24	; 0x0a
   13562:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <hpdir+0x98>
   13566:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <hpdir+0x99>
   1356a:	9d 87       	std	Y+13, r25	; 0x0d
   1356c:	8c 87       	std	Y+12, r24	; 0x0c
   1356e:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <hpdir+0x94>
   13572:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <hpdir+0x95>
   13576:	9f 87       	std	Y+15, r25	; 0x0f
   13578:	8e 87       	std	Y+14, r24	; 0x0e
   1357a:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <hpdir+0xac>
   1357e:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <hpdir+0xad>
   13582:	a0 91 1c 20 	lds	r26, 0x201C	; 0x80201c <hpdir+0xae>
   13586:	b0 91 1d 20 	lds	r27, 0x201D	; 0x80201d <hpdir+0xaf>
   1358a:	83 83       	std	Z+3, r24	; 0x03
   1358c:	94 83       	std	Z+4, r25	; 0x04
   1358e:	a5 83       	std	Z+5, r26	; 0x05
   13590:	b6 83       	std	Z+6, r27	; 0x06
   13592:	8e e6       	ldi	r24, 0x6E	; 110
   13594:	9f e1       	ldi	r25, 0x1F	; 31
   13596:	0e 94 60 32 	call	0x64c0	; 0x64c0 <stralloc>
   1359a:	9d 83       	std	Y+5, r25	; 0x05
   1359c:	8c 83       	std	Y+4, r24	; 0x04
   1359e:	81 e0       	ldi	r24, 0x01	; 1
   135a0:	0b c0       	rjmp	.+22     	; 0x135b8 <hpdir_set_device+0x106>
   135a2:	84 ec       	ldi	r24, 0xC4	; 196
   135a4:	9a e1       	ldi	r25, 0x1A	; 26
   135a6:	a0 e0       	ldi	r26, 0x00	; 0
   135a8:	ed b7       	in	r30, 0x3d	; 61
   135aa:	fe b7       	in	r31, 0x3e	; 62
   135ac:	81 83       	std	Z+1, r24	; 0x01
   135ae:	92 83       	std	Z+2, r25	; 0x02
   135b0:	a3 83       	std	Z+3, r26	; 0x03
   135b2:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   135b6:	80 e0       	ldi	r24, 0x00	; 0
   135b8:	cd b7       	in	r28, 0x3d	; 61
   135ba:	de b7       	in	r29, 0x3e	; 62
   135bc:	23 96       	adiw	r28, 0x03	; 3
   135be:	e2 e0       	ldi	r30, 0x02	; 2
   135c0:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

000135c4 <hpdir_set_parameters>:
   135c4:	cf 93       	push	r28
   135c6:	00 d0       	rcall	.+0      	; 0x135c8 <hpdir_set_parameters+0x4>
   135c8:	1f 92       	push	r1
   135ca:	c8 2f       	mov	r28, r24
   135cc:	cb 01       	movw	r24, r22
   135ce:	41 e0       	ldi	r20, 0x01	; 1
   135d0:	50 e0       	ldi	r21, 0x00	; 0
   135d2:	60 e0       	ldi	r22, 0x00	; 0
   135d4:	70 e0       	ldi	r23, 0x00	; 0
   135d6:	0e 94 65 a4 	call	0x148ca	; 0x148ca <hpdir_find_drive>
   135da:	89 2b       	or	r24, r25
   135dc:	19 f0       	breq	.+6      	; 0x135e4 <hpdir_set_parameters+0x20>
   135de:	8c 2f       	mov	r24, r28
   135e0:	68 df       	rcall	.-304    	; 0x134b2 <hpdir_set_device>
   135e2:	0b c0       	rjmp	.+22     	; 0x135fa <hpdir_set_parameters+0x36>
   135e4:	8c e9       	ldi	r24, 0x9C	; 156
   135e6:	9a e1       	ldi	r25, 0x1A	; 26
   135e8:	a0 e0       	ldi	r26, 0x00	; 0
   135ea:	ed b7       	in	r30, 0x3d	; 61
   135ec:	fe b7       	in	r31, 0x3e	; 62
   135ee:	81 83       	std	Z+1, r24	; 0x01
   135f0:	92 83       	std	Z+2, r25	; 0x02
   135f2:	a3 83       	std	Z+3, r26	; 0x03
   135f4:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   135f8:	80 e0       	ldi	r24, 0x00	; 0
   135fa:	0f 90       	pop	r0
   135fc:	0f 90       	pop	r0
   135fe:	0f 90       	pop	r0
   13600:	cf 91       	pop	r28
   13602:	08 95       	ret

00013604 <format_drives>:
   13604:	2f 92       	push	r2
   13606:	3f 92       	push	r3
   13608:	4f 92       	push	r4
   1360a:	5f 92       	push	r5
   1360c:	6f 92       	push	r6
   1360e:	7f 92       	push	r7
   13610:	8f 92       	push	r8
   13612:	af 92       	push	r10
   13614:	bf 92       	push	r11
   13616:	cf 92       	push	r12
   13618:	df 92       	push	r13
   1361a:	ef 92       	push	r14
   1361c:	ff 92       	push	r15
   1361e:	0f 93       	push	r16
   13620:	1f 93       	push	r17
   13622:	cf 93       	push	r28
   13624:	df 93       	push	r29
   13626:	cd b7       	in	r28, 0x3d	; 61
   13628:	de b7       	in	r29, 0x3e	; 62
   1362a:	ce 56       	subi	r28, 0x6E	; 110
   1362c:	d1 09       	sbc	r29, r1
   1362e:	0f b6       	in	r0, 0x3f	; 63
   13630:	f8 94       	cli
   13632:	de bf       	out	0x3e, r29	; 62
   13634:	0f be       	out	0x3f, r0	; 63
   13636:	cd bf       	out	0x3d, r28	; 61
   13638:	8a ee       	ldi	r24, 0xEA	; 234
   1363a:	c8 2e       	mov	r12, r24
   1363c:	8e e1       	ldi	r24, 0x1E	; 30
   1363e:	d8 2e       	mov	r13, r24
   13640:	a0 96       	adiw	r28, 0x20	; 32
   13642:	1f ae       	std	Y+63, r1	; 0x3f
   13644:	1e ae       	std	Y+62, r1	; 0x3e
   13646:	a0 97       	sbiw	r28, 0x20	; 32
   13648:	6e 96       	adiw	r28, 0x1e	; 30
   1364a:	1f ae       	std	Y+63, r1	; 0x3f
   1364c:	1e ae       	std	Y+62, r1	; 0x3e
   1364e:	6e 97       	sbiw	r28, 0x1e	; 30
   13650:	6c 96       	adiw	r28, 0x1c	; 28
   13652:	1f ae       	std	Y+63, r1	; 0x3f
   13654:	1e ae       	std	Y+62, r1	; 0x3e
   13656:	6c 97       	sbiw	r28, 0x1c	; 28
   13658:	89 e7       	ldi	r24, 0x79	; 121
   1365a:	99 e1       	ldi	r25, 0x19	; 25
   1365c:	9c 01       	movw	r18, r24
   1365e:	40 e0       	ldi	r20, 0x00	; 0
   13660:	a3 96       	adiw	r28, 0x23	; 35
   13662:	2d af       	std	Y+61, r18	; 0x3d
   13664:	3e af       	std	Y+62, r19	; 0x3e
   13666:	4f af       	std	Y+63, r20	; 0x3f
   13668:	a3 97       	sbiw	r28, 0x23	; 35
   1366a:	81 e7       	ldi	r24, 0x71	; 113
   1366c:	99 e1       	ldi	r25, 0x19	; 25
   1366e:	9c 01       	movw	r18, r24
   13670:	40 e0       	ldi	r20, 0x00	; 0
   13672:	a6 96       	adiw	r28, 0x26	; 38
   13674:	2d af       	std	Y+61, r18	; 0x3d
   13676:	3e af       	std	Y+62, r19	; 0x3e
   13678:	4f af       	std	Y+63, r20	; 0x3f
   1367a:	a6 97       	sbiw	r28, 0x26	; 38
   1367c:	83 e9       	ldi	r24, 0x93	; 147
   1367e:	99 e1       	ldi	r25, 0x19	; 25
   13680:	9c 01       	movw	r18, r24
   13682:	40 e0       	ldi	r20, 0x00	; 0
   13684:	a9 96       	adiw	r28, 0x29	; 41
   13686:	2d af       	std	Y+61, r18	; 0x3d
   13688:	3e af       	std	Y+62, r19	; 0x3e
   1368a:	4f af       	std	Y+63, r20	; 0x3f
   1368c:	a9 97       	sbiw	r28, 0x29	; 41
   1368e:	8d eb       	ldi	r24, 0xBD	; 189
   13690:	99 e1       	ldi	r25, 0x19	; 25
   13692:	9c 01       	movw	r18, r24
   13694:	40 e0       	ldi	r20, 0x00	; 0
   13696:	ac 96       	adiw	r28, 0x2c	; 44
   13698:	2d af       	std	Y+61, r18	; 0x3d
   1369a:	3e af       	std	Y+62, r19	; 0x3e
   1369c:	4f af       	std	Y+63, r20	; 0x3f
   1369e:	ac 97       	sbiw	r28, 0x2c	; 44
   136a0:	85 eb       	ldi	r24, 0xB5	; 181
   136a2:	99 e1       	ldi	r25, 0x19	; 25
   136a4:	9c 01       	movw	r18, r24
   136a6:	40 e0       	ldi	r20, 0x00	; 0
   136a8:	af 96       	adiw	r28, 0x2f	; 47
   136aa:	2d af       	std	Y+61, r18	; 0x3d
   136ac:	3e af       	std	Y+62, r19	; 0x3e
   136ae:	4f af       	std	Y+63, r20	; 0x3f
   136b0:	af 97       	sbiw	r28, 0x2f	; 47
   136b2:	87 ed       	ldi	r24, 0xD7	; 215
   136b4:	99 e1       	ldi	r25, 0x19	; 25
   136b6:	3c 01       	movw	r6, r24
   136b8:	81 2c       	mov	r8, r1
   136ba:	f6 01       	movw	r30, r12
   136bc:	80 81       	ld	r24, Z
   136be:	88 23       	and	r24, r24
   136c0:	09 f4       	brne	.+2      	; 0x136c4 <format_drives+0xc0>
   136c2:	f1 c0       	rjmp	.+482    	; 0x138a6 <format_drives+0x2a2>
   136c4:	83 30       	cpi	r24, 0x03	; 3
   136c6:	09 f0       	breq	.+2      	; 0x136ca <format_drives+0xc6>
   136c8:	71 c0       	rjmp	.+226    	; 0x137ac <format_drives+0x1a8>
   136ca:	a7 80       	ldd	r10, Z+7	; 0x07
   136cc:	b0 84       	ldd	r11, Z+8	; 0x08
   136ce:	be 01       	movw	r22, r28
   136d0:	66 5f       	subi	r22, 0xF6	; 246
   136d2:	7f 4f       	sbci	r23, 0xFF	; 255
   136d4:	f5 01       	movw	r30, r10
   136d6:	82 81       	ldd	r24, Z+2	; 0x02
   136d8:	93 81       	ldd	r25, Z+3	; 0x03
   136da:	0e 94 ce 79 	call	0xf39c	; 0xf39c <stat>
   136de:	01 96       	adiw	r24, 0x01	; 1
   136e0:	09 f0       	breq	.+2      	; 0x136e4 <format_drives+0xe0>
   136e2:	64 c0       	rjmp	.+200    	; 0x137ac <format_drives+0x1a8>
   136e4:	f5 01       	movw	r30, r10
   136e6:	82 89       	ldd	r24, Z+18	; 0x12
   136e8:	93 89       	ldd	r25, Z+19	; 0x13
   136ea:	81 15       	cp	r24, r1
   136ec:	91 40       	sbci	r25, 0x01	; 1
   136ee:	31 f0       	breq	.+12     	; 0x136fc <format_drives+0xf8>
   136f0:	ed b7       	in	r30, 0x3d	; 61
   136f2:	fe b7       	in	r31, 0x3e	; 62
   136f4:	61 82       	std	Z+1, r6	; 0x01
   136f6:	72 82       	std	Z+2, r7	; 0x02
   136f8:	83 82       	std	Z+3, r8	; 0x03
   136fa:	7a c0       	rjmp	.+244    	; 0x137f0 <format_drives+0x1ec>
   136fc:	f6 01       	movw	r30, r12
   136fe:	23 80       	ldd	r2, Z+3	; 0x03
   13700:	34 80       	ldd	r3, Z+4	; 0x04
   13702:	45 80       	ldd	r4, Z+5	; 0x05
   13704:	56 80       	ldd	r5, Z+6	; 0x06
   13706:	ed b7       	in	r30, 0x3d	; 61
   13708:	fe b7       	in	r31, 0x3e	; 62
   1370a:	26 82       	std	Z+6, r2	; 0x06
   1370c:	37 82       	std	Z+7, r3	; 0x07
   1370e:	40 86       	std	Z+8, r4	; 0x08
   13710:	51 86       	std	Z+9, r5	; 0x09
   13712:	f5 01       	movw	r30, r10
   13714:	82 81       	ldd	r24, Z+2	; 0x02
   13716:	93 81       	ldd	r25, Z+3	; 0x03
   13718:	ed b7       	in	r30, 0x3d	; 61
   1371a:	fe b7       	in	r31, 0x3e	; 62
   1371c:	95 83       	std	Z+5, r25	; 0x05
   1371e:	84 83       	std	Z+4, r24	; 0x04
   13720:	ac 96       	adiw	r28, 0x2c	; 44
   13722:	2d ad       	ldd	r18, Y+61	; 0x3d
   13724:	3e ad       	ldd	r19, Y+62	; 0x3e
   13726:	4f ad       	ldd	r20, Y+63	; 0x3f
   13728:	ac 97       	sbiw	r28, 0x2c	; 44
   1372a:	21 83       	std	Z+1, r18	; 0x01
   1372c:	32 83       	std	Z+2, r19	; 0x02
   1372e:	43 83       	std	Z+3, r20	; 0x03
   13730:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   13734:	6e 96       	adiw	r28, 0x1e	; 30
   13736:	2e ad       	ldd	r18, Y+62	; 0x3e
   13738:	3f ad       	ldd	r19, Y+63	; 0x3f
   1373a:	6e 97       	sbiw	r28, 0x1e	; 30
   1373c:	ed b7       	in	r30, 0x3d	; 61
   1373e:	fe b7       	in	r31, 0x3e	; 62
   13740:	37 83       	std	Z+7, r19	; 0x07
   13742:	26 83       	std	Z+6, r18	; 0x06
   13744:	af 96       	adiw	r28, 0x2f	; 47
   13746:	8d ad       	ldd	r24, Y+61	; 0x3d
   13748:	9e ad       	ldd	r25, Y+62	; 0x3e
   1374a:	af ad       	ldd	r26, Y+63	; 0x3f
   1374c:	af 97       	sbiw	r28, 0x2f	; 47
   1374e:	83 83       	std	Z+3, r24	; 0x03
   13750:	94 83       	std	Z+4, r25	; 0x04
   13752:	a5 83       	std	Z+5, r26	; 0x05
   13754:	2a e3       	ldi	r18, 0x3A	; 58
   13756:	30 e0       	ldi	r19, 0x00	; 0
   13758:	2c 0f       	add	r18, r28
   1375a:	3d 1f       	adc	r19, r29
   1375c:	32 83       	std	Z+2, r19	; 0x02
   1375e:	21 83       	std	Z+1, r18	; 0x01
   13760:	0e 94 5d 47 	call	0x8eba	; 0x8eba <sprintf_P>
   13764:	f5 01       	movw	r30, r10
   13766:	a2 80       	ldd	r10, Z+2	; 0x02
   13768:	b3 80       	ldd	r11, Z+3	; 0x03
   1376a:	c2 01       	movw	r24, r4
   1376c:	b1 01       	movw	r22, r2
   1376e:	0e 94 48 a4 	call	0x14890	; 0x14890 <lif_dir_count>
   13772:	9b 01       	movw	r18, r22
   13774:	ac 01       	movw	r20, r24
   13776:	82 01       	movw	r16, r4
   13778:	71 01       	movw	r14, r2
   1377a:	be 01       	movw	r22, r28
   1377c:	66 5c       	subi	r22, 0xC6	; 198
   1377e:	7f 4f       	sbci	r23, 0xFF	; 255
   13780:	c5 01       	movw	r24, r10
   13782:	0e 94 d1 de 	call	0x1bda2	; 0x1bda2 <lif_create_image>
   13786:	6c 96       	adiw	r28, 0x1c	; 28
   13788:	2e ad       	ldd	r18, Y+62	; 0x3e
   1378a:	3f ad       	ldd	r19, Y+63	; 0x3f
   1378c:	6c 97       	sbiw	r28, 0x1c	; 28
   1378e:	2f 5f       	subi	r18, 0xFF	; 255
   13790:	3f 4f       	sbci	r19, 0xFF	; 255
   13792:	6c 96       	adiw	r28, 0x1c	; 28
   13794:	3f af       	std	Y+63, r19	; 0x3f
   13796:	2e af       	std	Y+62, r18	; 0x3e
   13798:	6c 97       	sbiw	r28, 0x1c	; 28
   1379a:	6e 96       	adiw	r28, 0x1e	; 30
   1379c:	8e ad       	ldd	r24, Y+62	; 0x3e
   1379e:	9f ad       	ldd	r25, Y+63	; 0x3f
   137a0:	6e 97       	sbiw	r28, 0x1e	; 30
   137a2:	01 96       	adiw	r24, 0x01	; 1
   137a4:	6e 96       	adiw	r28, 0x1e	; 30
   137a6:	9f af       	std	Y+63, r25	; 0x3f
   137a8:	8e af       	std	Y+62, r24	; 0x3e
   137aa:	6e 97       	sbiw	r28, 0x1e	; 30
   137ac:	f6 01       	movw	r30, r12
   137ae:	80 81       	ld	r24, Z
   137b0:	81 30       	cpi	r24, 0x01	; 1
   137b2:	09 f0       	breq	.+2      	; 0x137b6 <format_drives+0x1b2>
   137b4:	78 c0       	rjmp	.+240    	; 0x138a6 <format_drives+0x2a2>
   137b6:	a7 80       	ldd	r10, Z+7	; 0x07
   137b8:	b0 84       	ldd	r11, Z+8	; 0x08
   137ba:	be 01       	movw	r22, r28
   137bc:	66 5f       	subi	r22, 0xF6	; 246
   137be:	7f 4f       	sbci	r23, 0xFF	; 255
   137c0:	f5 01       	movw	r30, r10
   137c2:	82 81       	ldd	r24, Z+2	; 0x02
   137c4:	93 81       	ldd	r25, Z+3	; 0x03
   137c6:	0e 94 ce 79 	call	0xf39c	; 0xf39c <stat>
   137ca:	01 96       	adiw	r24, 0x01	; 1
   137cc:	09 f0       	breq	.+2      	; 0x137d0 <format_drives+0x1cc>
   137ce:	6b c0       	rjmp	.+214    	; 0x138a6 <format_drives+0x2a2>
   137d0:	f5 01       	movw	r30, r10
   137d2:	80 85       	ldd	r24, Z+8	; 0x08
   137d4:	91 85       	ldd	r25, Z+9	; 0x09
   137d6:	81 15       	cp	r24, r1
   137d8:	91 40       	sbci	r25, 0x01	; 1
   137da:	69 f0       	breq	.+26     	; 0x137f6 <format_drives+0x1f2>
   137dc:	a9 96       	adiw	r28, 0x29	; 41
   137de:	2d ad       	ldd	r18, Y+61	; 0x3d
   137e0:	3e ad       	ldd	r19, Y+62	; 0x3e
   137e2:	4f ad       	ldd	r20, Y+63	; 0x3f
   137e4:	a9 97       	sbiw	r28, 0x29	; 41
   137e6:	ed b7       	in	r30, 0x3d	; 61
   137e8:	fe b7       	in	r31, 0x3e	; 62
   137ea:	21 83       	std	Z+1, r18	; 0x01
   137ec:	32 83       	std	Z+2, r19	; 0x02
   137ee:	43 83       	std	Z+3, r20	; 0x03
   137f0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   137f4:	58 c0       	rjmp	.+176    	; 0x138a6 <format_drives+0x2a2>
   137f6:	f6 01       	movw	r30, r12
   137f8:	23 80       	ldd	r2, Z+3	; 0x03
   137fa:	34 80       	ldd	r3, Z+4	; 0x04
   137fc:	45 80       	ldd	r4, Z+5	; 0x05
   137fe:	56 80       	ldd	r5, Z+6	; 0x06
   13800:	ed b7       	in	r30, 0x3d	; 61
   13802:	fe b7       	in	r31, 0x3e	; 62
   13804:	26 82       	std	Z+6, r2	; 0x06
   13806:	37 82       	std	Z+7, r3	; 0x07
   13808:	40 86       	std	Z+8, r4	; 0x08
   1380a:	51 86       	std	Z+9, r5	; 0x09
   1380c:	f5 01       	movw	r30, r10
   1380e:	82 81       	ldd	r24, Z+2	; 0x02
   13810:	93 81       	ldd	r25, Z+3	; 0x03
   13812:	ed b7       	in	r30, 0x3d	; 61
   13814:	fe b7       	in	r31, 0x3e	; 62
   13816:	95 83       	std	Z+5, r25	; 0x05
   13818:	84 83       	std	Z+4, r24	; 0x04
   1381a:	a3 96       	adiw	r28, 0x23	; 35
   1381c:	2d ad       	ldd	r18, Y+61	; 0x3d
   1381e:	3e ad       	ldd	r19, Y+62	; 0x3e
   13820:	4f ad       	ldd	r20, Y+63	; 0x3f
   13822:	a3 97       	sbiw	r28, 0x23	; 35
   13824:	21 83       	std	Z+1, r18	; 0x01
   13826:	32 83       	std	Z+2, r19	; 0x02
   13828:	43 83       	std	Z+3, r20	; 0x03
   1382a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1382e:	a0 96       	adiw	r28, 0x20	; 32
   13830:	2e ad       	ldd	r18, Y+62	; 0x3e
   13832:	3f ad       	ldd	r19, Y+63	; 0x3f
   13834:	a0 97       	sbiw	r28, 0x20	; 32
   13836:	ed b7       	in	r30, 0x3d	; 61
   13838:	fe b7       	in	r31, 0x3e	; 62
   1383a:	37 83       	std	Z+7, r19	; 0x07
   1383c:	26 83       	std	Z+6, r18	; 0x06
   1383e:	a6 96       	adiw	r28, 0x26	; 38
   13840:	8d ad       	ldd	r24, Y+61	; 0x3d
   13842:	9e ad       	ldd	r25, Y+62	; 0x3e
   13844:	af ad       	ldd	r26, Y+63	; 0x3f
   13846:	a6 97       	sbiw	r28, 0x26	; 38
   13848:	83 83       	std	Z+3, r24	; 0x03
   1384a:	94 83       	std	Z+4, r25	; 0x04
   1384c:	a5 83       	std	Z+5, r26	; 0x05
   1384e:	2a e3       	ldi	r18, 0x3A	; 58
   13850:	30 e0       	ldi	r19, 0x00	; 0
   13852:	2c 0f       	add	r18, r28
   13854:	3d 1f       	adc	r19, r29
   13856:	32 83       	std	Z+2, r19	; 0x02
   13858:	21 83       	std	Z+1, r18	; 0x01
   1385a:	0e 94 5d 47 	call	0x8eba	; 0x8eba <sprintf_P>
   1385e:	f5 01       	movw	r30, r10
   13860:	a2 80       	ldd	r10, Z+2	; 0x02
   13862:	b3 80       	ldd	r11, Z+3	; 0x03
   13864:	c2 01       	movw	r24, r4
   13866:	b1 01       	movw	r22, r2
   13868:	0e 94 48 a4 	call	0x14890	; 0x14890 <lif_dir_count>
   1386c:	9b 01       	movw	r18, r22
   1386e:	ac 01       	movw	r20, r24
   13870:	82 01       	movw	r16, r4
   13872:	71 01       	movw	r14, r2
   13874:	be 01       	movw	r22, r28
   13876:	66 5c       	subi	r22, 0xC6	; 198
   13878:	7f 4f       	sbci	r23, 0xFF	; 255
   1387a:	c5 01       	movw	r24, r10
   1387c:	0e 94 d1 de 	call	0x1bda2	; 0x1bda2 <lif_create_image>
   13880:	6c 96       	adiw	r28, 0x1c	; 28
   13882:	2e ad       	ldd	r18, Y+62	; 0x3e
   13884:	3f ad       	ldd	r19, Y+63	; 0x3f
   13886:	6c 97       	sbiw	r28, 0x1c	; 28
   13888:	2f 5f       	subi	r18, 0xFF	; 255
   1388a:	3f 4f       	sbci	r19, 0xFF	; 255
   1388c:	6c 96       	adiw	r28, 0x1c	; 28
   1388e:	3f af       	std	Y+63, r19	; 0x3f
   13890:	2e af       	std	Y+62, r18	; 0x3e
   13892:	6c 97       	sbiw	r28, 0x1c	; 28
   13894:	a0 96       	adiw	r28, 0x20	; 32
   13896:	8e ad       	ldd	r24, Y+62	; 0x3e
   13898:	9f ad       	ldd	r25, Y+63	; 0x3f
   1389a:	a0 97       	sbiw	r28, 0x20	; 32
   1389c:	01 96       	adiw	r24, 0x01	; 1
   1389e:	a0 96       	adiw	r28, 0x20	; 32
   138a0:	9f af       	std	Y+63, r25	; 0x3f
   138a2:	8e af       	std	Y+62, r24	; 0x3e
   138a4:	a0 97       	sbiw	r28, 0x20	; 32
   138a6:	9b e0       	ldi	r25, 0x0B	; 11
   138a8:	c9 0e       	add	r12, r25
   138aa:	d1 1c       	adc	r13, r1
   138ac:	ae e6       	ldi	r26, 0x6E	; 110
   138ae:	ca 16       	cp	r12, r26
   138b0:	af e1       	ldi	r26, 0x1F	; 31
   138b2:	da 06       	cpc	r13, r26
   138b4:	09 f0       	breq	.+2      	; 0x138b8 <format_drives+0x2b4>
   138b6:	01 cf       	rjmp	.-510    	; 0x136ba <format_drives+0xb6>
   138b8:	6c 96       	adiw	r28, 0x1c	; 28
   138ba:	ee ad       	ldd	r30, Y+62	; 0x3e
   138bc:	ff ad       	ldd	r31, Y+63	; 0x3f
   138be:	6c 97       	sbiw	r28, 0x1c	; 28
   138c0:	ef 2b       	or	r30, r31
   138c2:	11 f0       	breq	.+4      	; 0x138c8 <format_drives+0x2c4>
   138c4:	0e 94 80 32 	call	0x6500	; 0x6500 <sep>
   138c8:	c2 59       	subi	r28, 0x92	; 146
   138ca:	df 4f       	sbci	r29, 0xFF	; 255
   138cc:	0f b6       	in	r0, 0x3f	; 63
   138ce:	f8 94       	cli
   138d0:	de bf       	out	0x3e, r29	; 62
   138d2:	0f be       	out	0x3f, r0	; 63
   138d4:	cd bf       	out	0x3d, r28	; 61
   138d6:	df 91       	pop	r29
   138d8:	cf 91       	pop	r28
   138da:	1f 91       	pop	r17
   138dc:	0f 91       	pop	r16
   138de:	ff 90       	pop	r15
   138e0:	ef 90       	pop	r14
   138e2:	df 90       	pop	r13
   138e4:	cf 90       	pop	r12
   138e6:	bf 90       	pop	r11
   138e8:	af 90       	pop	r10
   138ea:	8f 90       	pop	r8
   138ec:	7f 90       	pop	r7
   138ee:	6f 90       	pop	r6
   138f0:	5f 90       	pop	r5
   138f2:	4f 90       	pop	r4
   138f4:	3f 90       	pop	r3
   138f6:	2f 90       	pop	r2
   138f8:	08 95       	ret

000138fa <drives_help>:
   138fa:	00 d0       	rcall	.+0      	; 0x138fc <drives_help+0x2>
   138fc:	1f 92       	push	r1
   138fe:	81 11       	cpse	r24, r1
   13900:	03 c0       	rjmp	.+6      	; 0x13908 <drives_help+0xe>
   13902:	81 e6       	ldi	r24, 0x61	; 97
   13904:	99 e1       	ldi	r25, 0x19	; 25
   13906:	02 c0       	rjmp	.+4      	; 0x1390c <drives_help+0x12>
   13908:	8c e7       	ldi	r24, 0x7C	; 124
   1390a:	97 e1       	ldi	r25, 0x17	; 23
   1390c:	a0 e0       	ldi	r26, 0x00	; 0
   1390e:	ed b7       	in	r30, 0x3d	; 61
   13910:	fe b7       	in	r31, 0x3e	; 62
   13912:	81 83       	std	Z+1, r24	; 0x01
   13914:	92 83       	std	Z+2, r25	; 0x02
   13916:	a3 83       	std	Z+3, r26	; 0x03
   13918:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1391c:	0f 90       	pop	r0
   1391e:	0f 90       	pop	r0
   13920:	0f 90       	pop	r0
   13922:	08 95       	ret

00013924 <mount_usage>:
   13924:	00 d0       	rcall	.+0      	; 0x13926 <mount_usage+0x2>
   13926:	1f 92       	push	r1
   13928:	83 e7       	ldi	r24, 0x73	; 115
   1392a:	97 e1       	ldi	r25, 0x17	; 23
   1392c:	a0 e0       	ldi	r26, 0x00	; 0
   1392e:	ed b7       	in	r30, 0x3d	; 61
   13930:	fe b7       	in	r31, 0x3e	; 62
   13932:	81 83       	std	Z+1, r24	; 0x01
   13934:	92 83       	std	Z+2, r25	; 0x02
   13936:	a3 83       	std	Z+3, r26	; 0x03
   13938:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1393c:	81 e0       	ldi	r24, 0x01	; 1
   1393e:	dd df       	rcall	.-70     	; 0x138fa <drives_help>
   13940:	0f 90       	pop	r0
   13942:	0f 90       	pop	r0
   13944:	0f 90       	pop	r0
   13946:	08 95       	ret

00013948 <index_address>:
   13948:	ea ee       	ldi	r30, 0xEA	; 234
   1394a:	fe e1       	ldi	r31, 0x1E	; 30
   1394c:	90 e0       	ldi	r25, 0x00	; 0
   1394e:	28 2f       	mov	r18, r24
   13950:	88 0f       	add	r24, r24
   13952:	33 0b       	sbc	r19, r19
   13954:	80 81       	ld	r24, Z
   13956:	88 23       	and	r24, r24
   13958:	29 f0       	breq	.+10     	; 0x13964 <index_address+0x1c>
   1395a:	41 81       	ldd	r20, Z+1	; 0x01
   1395c:	50 e0       	ldi	r21, 0x00	; 0
   1395e:	42 17       	cp	r20, r18
   13960:	53 07       	cpc	r21, r19
   13962:	31 f0       	breq	.+12     	; 0x13970 <index_address+0x28>
   13964:	9f 5f       	subi	r25, 0xFF	; 255
   13966:	3b 96       	adiw	r30, 0x0b	; 11
   13968:	9c 30       	cpi	r25, 0x0C	; 12
   1396a:	a1 f7       	brne	.-24     	; 0x13954 <index_address+0xc>
   1396c:	8f ef       	ldi	r24, 0xFF	; 255
   1396e:	08 95       	ret
   13970:	89 2f       	mov	r24, r25
   13972:	08 95       	ret

00013974 <umount>:

/// ===============================================
/// @brief umount disks - testing
/// @return Devices[] index on success, -1 on error
int8_t umount(int argc, char *argv[])
{
   13974:	cf 93       	push	r28
   13976:	df 93       	push	r29
   13978:	00 d0       	rcall	.+0      	; 0x1397a <umount+0x6>
   1397a:	00 d0       	rcall	.+0      	; 0x1397c <umount+0x8>
   1397c:	1f 92       	push	r1
   1397e:	eb 01       	movw	r28, r22

	int8_t address;
	int8_t index;

	if(argc != 2)
   13980:	02 97       	sbiw	r24, 0x02	; 2
   13982:	f1 f0       	breq	.+60     	; 0x139c0 <umount+0x4c>
	{
		printf("Usage:\n");
   13984:	8b e6       	ldi	r24, 0x6B	; 107
   13986:	97 e1       	ldi	r25, 0x17	; 23
   13988:	a0 e0       	ldi	r26, 0x00	; 0
   1398a:	ed b7       	in	r30, 0x3d	; 61
   1398c:	fe b7       	in	r31, 0x3e	; 62
   1398e:	81 83       	std	Z+1, r24	; 0x01
   13990:	92 83       	std	Z+2, r25	; 0x02
   13992:	a3 83       	std	Z+3, r26	; 0x03
   13994:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
		printf("  umount address\n");
   13998:	89 e5       	ldi	r24, 0x59	; 89
   1399a:	97 e1       	ldi	r25, 0x17	; 23
   1399c:	a0 e0       	ldi	r26, 0x00	; 0
   1399e:	ed b7       	in	r30, 0x3d	; 61
   139a0:	fe b7       	in	r31, 0x3e	; 62
   139a2:	81 83       	std	Z+1, r24	; 0x01
   139a4:	92 83       	std	Z+2, r25	; 0x02
   139a6:	a3 83       	std	Z+3, r26	; 0x03
   139a8:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
		printf("  - address is the device address\n");
   139ac:	86 e3       	ldi	r24, 0x36	; 54
   139ae:	97 e1       	ldi	r25, 0x17	; 23
   139b0:	a0 e0       	ldi	r26, 0x00	; 0
   139b2:	ed b7       	in	r30, 0x3d	; 61
   139b4:	fe b7       	in	r31, 0x3e	; 62
   139b6:	81 83       	std	Z+1, r24	; 0x01
   139b8:	92 83       	std	Z+2, r25	; 0x02
   139ba:	a3 83       	std	Z+3, r26	; 0x03
   139bc:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
	}
	address = atoi(argv[1]);
   139c0:	8a 81       	ldd	r24, Y+2	; 0x02
   139c2:	9b 81       	ldd	r25, Y+3	; 0x03
   139c4:	0e 94 0a 48 	call	0x9014	; 0x9014 <atoi>
   139c8:	d8 2f       	mov	r29, r24
	index = index_address(address);
   139ca:	be df       	rcall	.-132    	; 0x13948 <index_address>
   139cc:	c8 2f       	mov	r28, r24
	if(index == -1)
   139ce:	8f 3f       	cpi	r24, 0xFF	; 255
   139d0:	89 f4       	brne	.+34     	; 0x139f4 <umount+0x80>
	{
		printf("umount address:[%d] NOT found\n", address);
   139d2:	8d 2f       	mov	r24, r29
   139d4:	dd 0f       	add	r29, r29
   139d6:	99 0b       	sbc	r25, r25
   139d8:	ed b7       	in	r30, 0x3d	; 61
   139da:	fe b7       	in	r31, 0x3e	; 62
   139dc:	95 83       	std	Z+5, r25	; 0x05
   139de:	84 83       	std	Z+4, r24	; 0x04
   139e0:	87 e1       	ldi	r24, 0x17	; 23
   139e2:	97 e1       	ldi	r25, 0x17	; 23
   139e4:	a0 e0       	ldi	r26, 0x00	; 0
   139e6:	81 83       	std	Z+1, r24	; 0x01
   139e8:	92 83       	std	Z+2, r25	; 0x02
   139ea:	a3 83       	std	Z+3, r26	; 0x03
   139ec:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
		return(-1);
   139f0:	8f ef       	ldi	r24, 0xFF	; 255
	}
	free_device(index);
   139f2:	02 c0       	rjmp	.+4      	; 0x139f8 <umount+0x84>
   139f4:	fb db       	rcall	.-2058   	; 0x131ec <free_device>
	return(index);
   139f6:	8c 2f       	mov	r24, r28
}
   139f8:	cd b7       	in	r28, 0x3d	; 61
   139fa:	de b7       	in	r29, 0x3e	; 62
   139fc:	25 96       	adiw	r28, 0x05	; 5
   139fe:	e2 e0       	ldi	r30, 0x02	; 2
   13a00:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00013a04 <display_mount>:
	return(1);
}


void display_mount(int8_t index )
{
   13a04:	a9 e0       	ldi	r26, 0x09	; 9
   13a06:	b0 e0       	ldi	r27, 0x00	; 0
   13a08:	e8 e0       	ldi	r30, 0x08	; 8
   13a0a:	fd e9       	ldi	r31, 0x9D	; 157
   13a0c:	0c 94 a1 e7 	jmp	0x1cf42	; 0x1cf42 <__prologue_saves__+0x1c>
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

	if(Devices[index].TYPE == NO_TYPE)
   13a10:	08 2f       	mov	r16, r24
   13a12:	08 2e       	mov	r0, r24
   13a14:	00 0c       	add	r0, r0
   13a16:	11 0b       	sbc	r17, r17
   13a18:	9b e0       	ldi	r25, 0x0B	; 11
   13a1a:	89 02       	muls	r24, r25
   13a1c:	f0 01       	movw	r30, r0
   13a1e:	11 24       	eor	r1, r1
   13a20:	e6 51       	subi	r30, 0x16	; 22
   13a22:	f1 4e       	sbci	r31, 0xE1	; 225
   13a24:	80 81       	ld	r24, Z
   13a26:	88 23       	and	r24, r24
   13a28:	09 f4       	brne	.+2      	; 0x13a2c <display_mount+0x28>
   13a2a:	5f c0       	rjmp	.+190    	; 0x13aea <display_mount+0xe6>
		return;

	if(Devices[index].TYPE == SS80_TYPE)
   13a2c:	83 30       	cpi	r24, 0x03	; 3
   13a2e:	c9 f4       	brne	.+50     	; 0x13a62 <display_mount+0x5e>
	{
		SS80p= (SS80DiskType *)Devices[index].dev;
   13a30:	07 80       	ldd	r0, Z+7	; 0x07
   13a32:	f0 85       	ldd	r31, Z+8	; 0x08
   13a34:	e0 2d       	mov	r30, r0

		printf("SS80    %-8s %2d %s\n", SS80p->HEADER.model, (int) SS80p->HEADER.ADDRESS, SS80p->HEADER.NAME);
   13a36:	82 81       	ldd	r24, Z+2	; 0x02
   13a38:	93 81       	ldd	r25, Z+3	; 0x03
   13a3a:	cd b7       	in	r28, 0x3d	; 61
   13a3c:	de b7       	in	r29, 0x3e	; 62
   13a3e:	99 87       	std	Y+9, r25	; 0x09
   13a40:	88 87       	std	Y+8, r24	; 0x08
   13a42:	80 81       	ld	r24, Z
   13a44:	90 e0       	ldi	r25, 0x00	; 0
   13a46:	9f 83       	std	Y+7, r25	; 0x07
   13a48:	8e 83       	std	Y+6, r24	; 0x06
   13a4a:	84 81       	ldd	r24, Z+4	; 0x04
   13a4c:	95 81       	ldd	r25, Z+5	; 0x05
   13a4e:	9d 83       	std	Y+5, r25	; 0x05
   13a50:	8c 83       	std	Y+4, r24	; 0x04
   13a52:	86 e3       	ldi	r24, 0x36	; 54
   13a54:	96 e1       	ldi	r25, 0x16	; 22
   13a56:	a0 e0       	ldi	r26, 0x00	; 0
   13a58:	89 83       	std	Y+1, r24	; 0x01
   13a5a:	9a 83       	std	Y+2, r25	; 0x02
   13a5c:	ab 83       	std	Y+3, r26	; 0x03
   13a5e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
	}

#ifdef AMIGO
	if(Devices[index].TYPE == AMIGO_TYPE )
   13a62:	8b e0       	ldi	r24, 0x0B	; 11
   13a64:	80 9f       	mul	r24, r16
   13a66:	f0 01       	movw	r30, r0
   13a68:	81 9f       	mul	r24, r17
   13a6a:	f0 0d       	add	r31, r0
   13a6c:	11 24       	eor	r1, r1
   13a6e:	e6 51       	subi	r30, 0x16	; 22
   13a70:	f1 4e       	sbci	r31, 0xE1	; 225
   13a72:	80 81       	ld	r24, Z
   13a74:	81 30       	cpi	r24, 0x01	; 1
   13a76:	c9 f4       	brne	.+50     	; 0x13aaa <display_mount+0xa6>
	{
		AMIGOp = (AMIGODiskType *)Devices[index].dev;
   13a78:	07 80       	ldd	r0, Z+7	; 0x07
   13a7a:	f0 85       	ldd	r31, Z+8	; 0x08
   13a7c:	e0 2d       	mov	r30, r0
		printf("AMIGO   %-8s %2d %s\n", AMIGOp->HEADER.model, (int) AMIGOp->HEADER.ADDRESS, AMIGOp->HEADER.NAME);
   13a7e:	82 81       	ldd	r24, Z+2	; 0x02
   13a80:	93 81       	ldd	r25, Z+3	; 0x03
   13a82:	cd b7       	in	r28, 0x3d	; 61
   13a84:	de b7       	in	r29, 0x3e	; 62
   13a86:	99 87       	std	Y+9, r25	; 0x09
   13a88:	88 87       	std	Y+8, r24	; 0x08
   13a8a:	80 81       	ld	r24, Z
   13a8c:	90 e0       	ldi	r25, 0x00	; 0
   13a8e:	9f 83       	std	Y+7, r25	; 0x07
   13a90:	8e 83       	std	Y+6, r24	; 0x06
   13a92:	84 81       	ldd	r24, Z+4	; 0x04
   13a94:	95 81       	ldd	r25, Z+5	; 0x05
   13a96:	9d 83       	std	Y+5, r25	; 0x05
   13a98:	8c 83       	std	Y+4, r24	; 0x04
   13a9a:	81 e2       	ldi	r24, 0x21	; 33
   13a9c:	96 e1       	ldi	r25, 0x16	; 22
   13a9e:	a0 e0       	ldi	r26, 0x00	; 0
   13aa0:	89 83       	std	Y+1, r24	; 0x01
   13aa2:	9a 83       	std	Y+2, r25	; 0x02
   13aa4:	ab 83       	std	Y+3, r26	; 0x03
   13aa6:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
	}
#endif                                    // #ifdef AMIGO

	if(Devices[index].TYPE == PRINTER_TYPE )
   13aaa:	8b e0       	ldi	r24, 0x0B	; 11
   13aac:	80 9f       	mul	r24, r16
   13aae:	f0 01       	movw	r30, r0
   13ab0:	81 9f       	mul	r24, r17
   13ab2:	f0 0d       	add	r31, r0
   13ab4:	11 24       	eor	r1, r1
   13ab6:	e6 51       	subi	r30, 0x16	; 22
   13ab8:	f1 4e       	sbci	r31, 0xE1	; 225
   13aba:	80 81       	ld	r24, Z
   13abc:	84 30       	cpi	r24, 0x04	; 4
   13abe:	a9 f4       	brne	.+42     	; 0x13aea <display_mount+0xe6>
	{
            PRINTERp= (PRINTERDeviceType *)Devices[index].dev;
            printf("PRINTER %-8s %2d\n", " ", (int) PRINTERp->HEADER.ADDRESS);
   13ac0:	07 80       	ldd	r0, Z+7	; 0x07
   13ac2:	f0 85       	ldd	r31, Z+8	; 0x08
   13ac4:	e0 2d       	mov	r30, r0
   13ac6:	80 81       	ld	r24, Z
   13ac8:	90 e0       	ldi	r25, 0x00	; 0
   13aca:	cd b7       	in	r28, 0x3d	; 61
   13acc:	de b7       	in	r29, 0x3e	; 62
   13ace:	9f 83       	std	Y+7, r25	; 0x07
   13ad0:	8e 83       	std	Y+6, r24	; 0x06
   13ad2:	89 e6       	ldi	r24, 0x69	; 105
   13ad4:	94 e0       	ldi	r25, 0x04	; 4
   13ad6:	9d 83       	std	Y+5, r25	; 0x05
   13ad8:	8c 83       	std	Y+4, r24	; 0x04
   13ada:	8f e0       	ldi	r24, 0x0F	; 15
   13adc:	96 e1       	ldi	r25, 0x16	; 22
   13ade:	a0 e0       	ldi	r26, 0x00	; 0
   13ae0:	89 83       	std	Y+1, r24	; 0x01
   13ae2:	9a 83       	std	Y+2, r25	; 0x02
   13ae4:	ab 83       	std	Y+3, r26	; 0x03
   13ae6:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
	}
}
   13aea:	cd b7       	in	r28, 0x3d	; 61
   13aec:	de b7       	in	r29, 0x3e	; 62
   13aee:	29 96       	adiw	r28, 0x09	; 9
   13af0:	e4 e0       	ldi	r30, 0x04	; 4
   13af2:	0c 94 bd e7 	jmp	0x1cf7a	; 0x1cf7a <__epilogue_restores__+0x1c>

00013af6 <verify_device>:

/// ===============================================
/// @brief Verify a device and delete it is there are any errors
/// @return  1 = OK 0 = ERROR
int8_t verify_device(int8_t index)
{
   13af6:	a5 e0       	ldi	r26, 0x05	; 5
   13af8:	b0 e0       	ldi	r27, 0x00	; 0
   13afa:	e1 e8       	ldi	r30, 0x81	; 129
   13afc:	fd e9       	ldi	r31, 0x9D	; 157
   13afe:	0c 94 9e e7 	jmp	0x1cf3c	; 0x1cf3c <__prologue_saves__+0x16>
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    if(Devices[index].TYPE == NO_TYPE)
   13b02:	e8 2e       	mov	r14, r24
   13b04:	08 2e       	mov	r0, r24
   13b06:	00 0c       	add	r0, r0
   13b08:	ff 08       	sbc	r15, r15
   13b0a:	9b e0       	ldi	r25, 0x0B	; 11
   13b0c:	89 02       	muls	r24, r25
   13b0e:	f0 01       	movw	r30, r0
   13b10:	11 24       	eor	r1, r1
   13b12:	e6 51       	subi	r30, 0x16	; 22
   13b14:	f1 4e       	sbci	r31, 0xE1	; 225
   13b16:	10 81       	ld	r17, Z
   13b18:	11 23       	and	r17, r17
   13b1a:	09 f1       	breq	.+66     	; 0x13b5e <verify_device+0x68>
   13b1c:	d8 2e       	mov	r13, r24
        return(ret);

	address = Devices[index].ADDRESS;
   13b1e:	81 81       	ldd	r24, Z+1	; 0x01
    type = Devices[index].TYPE;
	ppr = Devices[index].PPR;
   13b20:	02 81       	ldd	r16, Z+2	; 0x02

	if(address < 0 || address > 31)
   13b22:	80 32       	cpi	r24, 0x20	; 32
   13b24:	78 f0       	brcs	.+30     	; 0x13b44 <verify_device+0x4e>
	{
		printf("Address (%d) out of range\n", (int) address);
   13b26:	90 e0       	ldi	r25, 0x00	; 0
   13b28:	ed b7       	in	r30, 0x3d	; 61
   13b2a:	fe b7       	in	r31, 0x3e	; 62
   13b2c:	95 83       	std	Z+5, r25	; 0x05
   13b2e:	84 83       	std	Z+4, r24	; 0x04
   13b30:	81 e8       	ldi	r24, 0x81	; 129
   13b32:	9a e1       	ldi	r25, 0x1A	; 26
   13b34:	a0 e0       	ldi	r26, 0x00	; 0
   13b36:	81 83       	std	Z+1, r24	; 0x01
   13b38:	92 83       	std	Z+2, r25	; 0x02
   13b3a:	a3 83       	std	Z+3, r26	; 0x03
   13b3c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
		ret = 0;
   13b40:	80 e0       	ldi	r24, 0x00	; 0
   13b42:	01 c0       	rjmp	.+2      	; 0x13b46 <verify_device+0x50>
int8_t verify_device(int8_t index)
{
    long sectors;
	int8_t type;
	int address,ppr;
	int8_t ret = 1;	
   13b44:	81 e0       	ldi	r24, 0x01	; 1
	}
	addr_bits |= addr_mask;

	
	// Printers do not use PPR
	if(type == PRINTER_TYPE)
   13b46:	14 30       	cpi	r17, 0x04	; 4
   13b48:	61 f4       	brne	.+24     	; 0x13b62 <verify_device+0x6c>
	{
		Devices[index].PPR = 0xff;
   13b4a:	8b e0       	ldi	r24, 0x0B	; 11
   13b4c:	8e 9d       	mul	r24, r14
   13b4e:	f0 01       	movw	r30, r0
   13b50:	8f 9d       	mul	r24, r15
   13b52:	f0 0d       	add	r31, r0
   13b54:	11 24       	eor	r1, r1
   13b56:	e6 51       	subi	r30, 0x16	; 22
   13b58:	f1 4e       	sbci	r31, 0xE1	; 225
   13b5a:	8f ef       	ldi	r24, 0xFF	; 255
   13b5c:	82 83       	std	Z+2, r24	; 0x02
		return(1);
   13b5e:	81 e0       	ldi	r24, 0x01	; 1
   13b60:	90 c0       	rjmp	.+288    	; 0x13c82 <verify_device+0x18c>
	}
	if(type == SS80_TYPE || AMIGO_TYPE)
	{
		if(ppr < 0 || ppr > 7)
   13b62:	08 30       	cpi	r16, 0x08	; 8
   13b64:	08 f0       	brcs	.+2      	; 0x13b68 <verify_device+0x72>
		{
			ret = 0;
   13b66:	80 e0       	ldi	r24, 0x00	; 0
			printf("PPR (%d) duplicated\n", (int) ppr);
			ret = 0;
		}
		ppr_bits |= ppr_mask;
	}
    if(type == SS80_TYPE)
   13b68:	13 30       	cpi	r17, 0x03	; 3
   13b6a:	79 f5       	brne	.+94     	; 0x13bca <verify_device+0xd4>
    {
        SS80p= (SS80DiskType *)Devices[index].dev;
   13b6c:	9b e0       	ldi	r25, 0x0B	; 11
   13b6e:	9e 9d       	mul	r25, r14
   13b70:	f0 01       	movw	r30, r0
   13b72:	9f 9d       	mul	r25, r15
   13b74:	f0 0d       	add	r31, r0
   13b76:	11 24       	eor	r1, r1
   13b78:	e6 51       	subi	r30, 0x16	; 22
   13b7a:	f1 4e       	sbci	r31, 0xE1	; 225
   13b7c:	c7 81       	ldd	r28, Z+7	; 0x07
   13b7e:	d0 85       	ldd	r29, Z+8	; 0x08
        if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13b80:	2a 89       	ldd	r18, Y+18	; 0x12
   13b82:	3b 89       	ldd	r19, Y+19	; 0x13
   13b84:	21 15       	cp	r18, r1
   13b86:	31 40       	sbci	r19, 0x01	; 1
   13b88:	79 f0       	breq	.+30     	; 0x13ba8 <verify_device+0xb2>
        {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
            printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", SS80p->HEADER.model);
   13b8a:	8c 81       	ldd	r24, Y+4	; 0x04
   13b8c:	9d 81       	ldd	r25, Y+5	; 0x05
   13b8e:	ed b7       	in	r30, 0x3d	; 61
   13b90:	fe b7       	in	r31, 0x3e	; 62
   13b92:	95 83       	std	Z+5, r25	; 0x05
   13b94:	84 83       	std	Z+4, r24	; 0x04
   13b96:	8b e4       	ldi	r24, 0x4B	; 75
   13b98:	9a e1       	ldi	r25, 0x1A	; 26
   13b9a:	a0 e0       	ldi	r26, 0x00	; 0
   13b9c:	81 83       	std	Z+1, r24	; 0x01
   13b9e:	92 83       	std	Z+2, r25	; 0x02
   13ba0:	a3 83       	std	Z+3, r26	; 0x03
   13ba2:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
			ret = 0;
   13ba6:	80 e0       	ldi	r24, 0x00	; 0
        }
        sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
        Devices[index].BLOCKS = sectors;
   13ba8:	9b e0       	ldi	r25, 0x0B	; 11
   13baa:	9e 9d       	mul	r25, r14
   13bac:	f0 01       	movw	r30, r0
   13bae:	9f 9d       	mul	r25, r15
   13bb0:	f0 0d       	add	r31, r0
   13bb2:	11 24       	eor	r1, r1
   13bb4:	e6 51       	subi	r30, 0x16	; 22
   13bb6:	f1 4e       	sbci	r31, 0xE1	; 225
   13bb8:	48 a5       	ldd	r20, Y+40	; 0x28
   13bba:	59 a5       	ldd	r21, Y+41	; 0x29
   13bbc:	6a a5       	ldd	r22, Y+42	; 0x2a
   13bbe:	7b a5       	ldd	r23, Y+43	; 0x2b
   13bc0:	4f 5f       	subi	r20, 0xFF	; 255
   13bc2:	5f 4f       	sbci	r21, 0xFF	; 255
   13bc4:	6f 4f       	sbci	r22, 0xFF	; 255
   13bc6:	7f 4f       	sbci	r23, 0xFF	; 255
   13bc8:	47 c0       	rjmp	.+142    	; 0x13c58 <verify_device+0x162>
    }                                         // SS80_TYPE

#ifdef AMIGO
    if(type == AMIGO_TYPE )
   13bca:	11 30       	cpi	r17, 0x01	; 1
   13bcc:	09 f0       	breq	.+2      	; 0x13bd0 <verify_device+0xda>
   13bce:	48 c0       	rjmp	.+144    	; 0x13c60 <verify_device+0x16a>
    {
        AMIGOp = (AMIGODiskType *)Devices[index].dev;
   13bd0:	9b e0       	ldi	r25, 0x0B	; 11
   13bd2:	9e 9d       	mul	r25, r14
   13bd4:	f0 01       	movw	r30, r0
   13bd6:	9f 9d       	mul	r25, r15
   13bd8:	f0 0d       	add	r31, r0
   13bda:	11 24       	eor	r1, r1
   13bdc:	e6 51       	subi	r30, 0x16	; 22
   13bde:	f1 4e       	sbci	r31, 0xE1	; 225
   13be0:	c7 81       	ldd	r28, Z+7	; 0x07
   13be2:	d0 85       	ldd	r29, Z+8	; 0x08
        if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   13be4:	28 85       	ldd	r18, Y+8	; 0x08
   13be6:	39 85       	ldd	r19, Y+9	; 0x09
   13be8:	21 15       	cp	r18, r1
   13bea:	31 40       	sbci	r19, 0x01	; 1
   13bec:	a9 f0       	breq	.+42     	; 0x13c18 <verify_device+0x122>
        {
            AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   13bee:	80 e0       	ldi	r24, 0x00	; 0
   13bf0:	91 e0       	ldi	r25, 0x01	; 1
   13bf2:	99 87       	std	Y+9, r25	; 0x09
   13bf4:	88 87       	std	Y+8, r24	; 0x08
            printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", SS80p->HEADER.model);
   13bf6:	80 91 04 00 	lds	r24, 0x0004	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
   13bfa:	90 91 05 00 	lds	r25, 0x0005	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
   13bfe:	ed b7       	in	r30, 0x3d	; 61
   13c00:	fe b7       	in	r31, 0x3e	; 62
   13c02:	95 83       	std	Z+5, r25	; 0x05
   13c04:	84 83       	std	Z+4, r24	; 0x04
   13c06:	84 e1       	ldi	r24, 0x14	; 20
   13c08:	9a e1       	ldi	r25, 0x1A	; 26
   13c0a:	a0 e0       	ldi	r26, 0x00	; 0
   13c0c:	81 83       	std	Z+1, r24	; 0x01
   13c0e:	92 83       	std	Z+2, r25	; 0x02
   13c10:	a3 83       	std	Z+3, r26	; 0x03
   13c12:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
			ret = 0;
   13c16:	80 e0       	ldi	r24, 0x00	; 0
        }
        sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
            * AMIGOp->GEOMETRY.HEADS
            * AMIGOp->GEOMETRY.CYLINDERS;
        Devices[index].BLOCKS = sectors;
   13c18:	9b e0       	ldi	r25, 0x0B	; 11
   13c1a:	9e 9d       	mul	r25, r14
   13c1c:	f0 01       	movw	r30, r0
   13c1e:	9f 9d       	mul	r25, r15
   13c20:	f0 0d       	add	r31, r0
   13c22:	11 24       	eor	r1, r1
   13c24:	e6 51       	subi	r30, 0x16	; 22
   13c26:	f1 4e       	sbci	r31, 0xE1	; 225
   13c28:	4a 85       	ldd	r20, Y+10	; 0x0a
   13c2a:	5b 85       	ldd	r21, Y+11	; 0x0b
   13c2c:	2c 85       	ldd	r18, Y+12	; 0x0c
   13c2e:	3d 85       	ldd	r19, Y+13	; 0x0d
   13c30:	42 9f       	mul	r20, r18
   13c32:	b0 01       	movw	r22, r0
   13c34:	43 9f       	mul	r20, r19
   13c36:	70 0d       	add	r23, r0
   13c38:	52 9f       	mul	r21, r18
   13c3a:	70 0d       	add	r23, r0
   13c3c:	11 24       	eor	r1, r1
   13c3e:	2e 85       	ldd	r18, Y+14	; 0x0e
   13c40:	3f 85       	ldd	r19, Y+15	; 0x0f
   13c42:	62 9f       	mul	r22, r18
   13c44:	a0 01       	movw	r20, r0
   13c46:	63 9f       	mul	r22, r19
   13c48:	50 0d       	add	r21, r0
   13c4a:	72 9f       	mul	r23, r18
   13c4c:	50 0d       	add	r21, r0
   13c4e:	11 24       	eor	r1, r1
   13c50:	05 2e       	mov	r0, r21
   13c52:	00 0c       	add	r0, r0
   13c54:	66 0b       	sbc	r22, r22
   13c56:	77 0b       	sbc	r23, r23
   13c58:	43 83       	std	Z+3, r20	; 0x03
   13c5a:	54 83       	std	Z+4, r21	; 0x04
   13c5c:	65 83       	std	Z+5, r22	; 0x05
   13c5e:	76 83       	std	Z+6, r23	; 0x06
    }
#endif                                    // #ifdef AMIGO
	if(!ret)
   13c60:	81 11       	cpse	r24, r1
   13c62:	7d cf       	rjmp	.-262    	; 0x13b5e <verify_device+0x68>
	{
		printf("Device errors - removing: ");
   13c64:	89 ef       	ldi	r24, 0xF9	; 249
   13c66:	99 e1       	ldi	r25, 0x19	; 25
   13c68:	a0 e0       	ldi	r26, 0x00	; 0
   13c6a:	ed b7       	in	r30, 0x3d	; 61
   13c6c:	fe b7       	in	r31, 0x3e	; 62
   13c6e:	81 83       	std	Z+1, r24	; 0x01
   13c70:	92 83       	std	Z+2, r25	; 0x02
   13c72:	a3 83       	std	Z+3, r26	; 0x03
   13c74:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
		display_mount(index);	
   13c78:	8d 2d       	mov	r24, r13
   13c7a:	c4 de       	rcall	.-632    	; 0x13a04 <display_mount>
		free_device(index);
   13c7c:	8d 2d       	mov	r24, r13
   13c7e:	b6 da       	rcall	.-2708   	; 0x131ec <free_device>
   13c80:	80 e0       	ldi	r24, 0x00	; 0
	}
	return(ret);
}
   13c82:	cd b7       	in	r28, 0x3d	; 61
   13c84:	de b7       	in	r29, 0x3e	; 62
   13c86:	25 96       	adiw	r28, 0x05	; 5
   13c88:	e7 e0       	ldi	r30, 0x07	; 7
   13c8a:	0c 94 ba e7 	jmp	0x1cf74	; 0x1cf74 <__epilogue_restores__+0x16>

00013c8e <verify_devices>:

/// ===============================================
/// @brief Post process and Verify all devices
/// @return  1 = OK 0 = ERROR
void verify_devices()
{
   13c8e:	cf 93       	push	r28
	int8_t i;

	for(i=0;i<MAX_DEVICES;++i)
   13c90:	c0 e0       	ldi	r28, 0x00	; 0
		verify_device(i);
   13c92:	8c 2f       	mov	r24, r28
   13c94:	30 df       	rcall	.-416    	; 0x13af6 <verify_device>
   13c96:	cf 5f       	subi	r28, 0xFF	; 255
/// @return  1 = OK 0 = ERROR
void verify_devices()
{
	int8_t i;

	for(i=0;i<MAX_DEVICES;++i)
   13c98:	cc 30       	cpi	r28, 0x0C	; 12
   13c9a:	d9 f7       	brne	.-10     	; 0x13c92 <verify_devices+0x4>
		verify_device(i);

}
   13c9c:	cf 91       	pop	r28
   13c9e:	08 95       	ret

00013ca0 <Read_Config>:
/// Set all drive parameters and debuglevel
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   13ca0:	ae e1       	ldi	r26, 0x1E	; 30
   13ca2:	b1 e0       	ldi	r27, 0x01	; 1
   13ca4:	e6 e5       	ldi	r30, 0x56	; 86
   13ca6:	fe e9       	ldi	r31, 0x9E	; 158
   13ca8:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
   13cac:	8c 01       	movw	r16, r24
	int8_t address;

    char str[128];
    char token[128];

    init_Devices();
   13cae:	b8 db       	rcall	.-2192   	; 0x13420 <init_Devices>

    printf("Reading: %s\n", name);
   13cb0:	ed b7       	in	r30, 0x3d	; 61
   13cb2:	fe b7       	in	r31, 0x3e	; 62
   13cb4:	15 83       	std	Z+5, r17	; 0x05
   13cb6:	04 83       	std	Z+4, r16	; 0x04
   13cb8:	83 e4       	ldi	r24, 0x43	; 67
   13cba:	90 e2       	ldi	r25, 0x20	; 32
   13cbc:	a0 e0       	ldi	r26, 0x00	; 0
   13cbe:	81 83       	std	Z+1, r24	; 0x01
   13cc0:	92 83       	std	Z+2, r25	; 0x02
   13cc2:	a3 83       	std	Z+3, r26	; 0x03
   13cc4:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    cfg = fopen(name, "rb");
   13cc8:	6c ee       	ldi	r22, 0xEC	; 236
   13cca:	78 e0       	ldi	r23, 0x08	; 8
   13ccc:	c8 01       	movw	r24, r16
   13cce:	0e 94 c9 7e 	call	0xfd92	; 0xfd92 <fopen>
   13cd2:	c5 5f       	subi	r28, 0xF5	; 245
   13cd4:	de 4f       	sbci	r29, 0xFE	; 254
   13cd6:	99 83       	std	Y+1, r25	; 0x01
   13cd8:	88 83       	st	Y, r24
   13cda:	cb 50       	subi	r28, 0x0B	; 11
   13cdc:	d1 40       	sbci	r29, 0x01	; 1
    if(cfg == NULL)
   13cde:	89 2b       	or	r24, r25
   13ce0:	09 f4       	brne	.+2      	; 0x13ce4 <Read_Config+0x44>
   13ce2:	58 c0       	rjmp	.+176    	; 0x13d94 <Read_Config+0xf4>
   13ce4:	21 2c       	mov	r2, r1
   13ce6:	31 2c       	mov	r3, r1
   13ce8:	c8 5f       	subi	r28, 0xF8	; 248
   13cea:	de 4f       	sbci	r29, 0xFE	; 254
   13cec:	18 82       	st	Y, r1
   13cee:	c8 50       	subi	r28, 0x08	; 8
   13cf0:	d1 40       	sbci	r29, 0x01	; 1
   13cf2:	41 2c       	mov	r4, r1
   13cf4:	51 2c       	mov	r5, r1
   13cf6:	e1 2c       	mov	r14, r1
   13cf8:	f1 2c       	mov	r15, r1
   13cfa:	c7 5f       	subi	r28, 0xF7	; 247
   13cfc:	de 4f       	sbci	r29, 0xFE	; 254
   13cfe:	19 82       	std	Y+1, r1	; 0x01
   13d00:	18 82       	st	Y, r1
   13d02:	c9 50       	subi	r28, 0x09	; 9
   13d04:	d1 40       	sbci	r29, 0x01	; 1
   13d06:	c1 2c       	mov	r12, r1
   13d08:	d1 2c       	mov	r13, r1
   13d0a:	61 2c       	mov	r6, r1
   13d0c:	71 2c       	mov	r7, r1
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13d0e:	82 e9       	ldi	r24, 0x92	; 146
   13d10:	9d e1       	ldi	r25, 0x1D	; 29
   13d12:	9c 01       	movw	r18, r24
   13d14:	40 e0       	ldi	r20, 0x00	; 0
   13d16:	c3 5f       	subi	r28, 0xF3	; 243
   13d18:	de 4f       	sbci	r29, 0xFE	; 254
   13d1a:	28 83       	st	Y, r18
   13d1c:	39 83       	std	Y+1, r19	; 0x01
   13d1e:	4a 83       	std	Y+2, r20	; 0x02
   13d20:	cd 50       	subi	r28, 0x0D	; 13
   13d22:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
                        break;
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13d24:	84 eb       	ldi	r24, 0xB4	; 180
   13d26:	9d e1       	ldi	r25, 0x1D	; 29
   13d28:	9c 01       	movw	r18, r24
   13d2a:	40 e0       	ldi	r20, 0x00	; 0
   13d2c:	c0 5f       	subi	r28, 0xF0	; 240
   13d2e:	de 4f       	sbci	r29, 0xFE	; 254
   13d30:	28 83       	st	Y, r18
   13d32:	39 83       	std	Y+1, r19	; 0x01
   13d34:	4a 83       	std	Y+2, r20	; 0x02
   13d36:	c0 51       	subi	r28, 0x10	; 16
   13d38:	d1 40       	sbci	r29, 0x01	; 1
                {
                    AMIGOp->CONFIG.ID = val.w;
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13d3a:	84 ee       	ldi	r24, 0xE4	; 228
   13d3c:	9d e1       	ldi	r25, 0x1D	; 29
   13d3e:	9c 01       	movw	r18, r24
   13d40:	40 e0       	ldi	r20, 0x00	; 0
   13d42:	cd 5e       	subi	r28, 0xED	; 237
   13d44:	de 4f       	sbci	r29, 0xFE	; 254
   13d46:	28 83       	st	Y, r18
   13d48:	39 83       	std	Y+1, r19	; 0x01
   13d4a:	4a 83       	std	Y+2, r20	; 0x02
   13d4c:	c3 51       	subi	r28, 0x13	; 19
   13d4e:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
                        break;
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13d50:	83 e1       	ldi	r24, 0x13	; 19
   13d52:	9e e1       	ldi	r25, 0x1E	; 30
   13d54:	9c 01       	movw	r18, r24
   13d56:	40 e0       	ldi	r20, 0x00	; 0
   13d58:	ca 5e       	subi	r28, 0xEA	; 234
   13d5a:	de 4f       	sbci	r29, 0xFE	; 254
   13d5c:	28 83       	st	Y, r18
   13d5e:	39 83       	std	Y+1, r19	; 0x01
   13d60:	4a 83       	std	Y+2, r20	; 0x02
   13d62:	c6 51       	subi	r28, 0x16	; 22
   13d64:	d1 40       	sbci	r29, 0x01	; 1
                    case TOK_GEOMETRY:
                        push_state(state);
                        state = AMIGO_GEOMETRY;
                        break;
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13d66:	83 e4       	ldi	r24, 0x43	; 67
   13d68:	9e e1       	ldi	r25, 0x1E	; 30
   13d6a:	9c 01       	movw	r18, r24
   13d6c:	40 e0       	ldi	r20, 0x00	; 0
   13d6e:	c7 5e       	subi	r28, 0xE7	; 231
   13d70:	de 4f       	sbci	r29, 0xFE	; 254
   13d72:	28 83       	st	Y, r18
   13d74:	39 83       	std	Y+1, r19	; 0x01
   13d76:	4a 83       	std	Y+2, r20	; 0x02
   13d78:	c9 51       	subi	r28, 0x19	; 25
   13d7a:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
                        break;
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13d7c:	81 e7       	ldi	r24, 0x71	; 113
   13d7e:	9e e1       	ldi	r25, 0x1E	; 30
   13d80:	9c 01       	movw	r18, r24
   13d82:	40 e0       	ldi	r20, 0x00	; 0
   13d84:	c4 5e       	subi	r28, 0xE4	; 228
   13d86:	de 4f       	sbci	r29, 0xFE	; 254
   13d88:	28 83       	st	Y, r18
   13d8a:	39 83       	std	Y+1, r19	; 0x01
   13d8c:	4a 83       	std	Y+2, r20	; 0x02
   13d8e:	cc 51       	subi	r28, 0x1C	; 28
   13d90:	d1 40       	sbci	r29, 0x01	; 1
   13d92:	26 c0       	rjmp	.+76     	; 0x13de0 <Read_Config+0x140>
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
//FIXME
        perror("Read_Config - open");
   13d94:	84 e2       	ldi	r24, 0x24	; 36
   13d96:	9e e0       	ldi	r25, 0x0E	; 14
   13d98:	0e 94 fa 78 	call	0xf1f4	; 0xf1f4 <perror>
        printf("Read_Config: open(%s) failed\n", name);
   13d9c:	ed b7       	in	r30, 0x3d	; 61
   13d9e:	fe b7       	in	r31, 0x3e	; 62
   13da0:	15 83       	std	Z+5, r17	; 0x05
   13da2:	04 83       	std	Z+4, r16	; 0x04
   13da4:	85 e2       	ldi	r24, 0x25	; 37
   13da6:	90 e2       	ldi	r25, 0x20	; 32
   13da8:	a0 e0       	ldi	r26, 0x00	; 0
   13daa:	81 83       	std	Z+1, r24	; 0x01
   13dac:	92 83       	std	Z+2, r25	; 0x02
   13dae:	a3 83       	std	Z+3, r26	; 0x03
   13db0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        set_Config_Defaults();
        return(errors);
   13db4:	81 e0       	ldi	r24, 0x01	; 1
   13db6:	90 e0       	ldi	r25, 0x00	; 0
   13db8:	70 c3       	rjmp	.+1760   	; 0x1449a <Read_Config+0x7fa>
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   13dba:	ff ef       	ldi	r31, 0xFF	; 255
   13dbc:	2f 1a       	sub	r2, r31
   13dbe:	3f 0a       	sbc	r3, r31

        ptr = get_token(str, token, sizeof(token)-2);
   13dc0:	4e e7       	ldi	r20, 0x7E	; 126
   13dc2:	50 e0       	ldi	r21, 0x00	; 0
   13dc4:	9e 01       	movw	r18, r28
   13dc6:	28 5f       	subi	r18, 0xF8	; 248
   13dc8:	3f 4f       	sbci	r19, 0xFF	; 255
   13dca:	49 01       	movw	r8, r18
   13dcc:	b9 01       	movw	r22, r18
   13dce:	ce 01       	movw	r24, r28
   13dd0:	88 57       	subi	r24, 0x78	; 120
   13dd2:	9f 4f       	sbci	r25, 0xFF	; 255
   13dd4:	0e 94 72 33 	call	0x66e4	; 0x66e4 <get_token>
   13dd8:	5c 01       	movw	r10, r24

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13dda:	88 85       	ldd	r24, Y+8	; 0x08
   13ddc:	81 11       	cpse	r24, r1
   13dde:	10 c0       	rjmp	.+32     	; 0x13e00 <Read_Config+0x160>
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   13de0:	c5 5f       	subi	r28, 0xF5	; 245
   13de2:	de 4f       	sbci	r29, 0xFE	; 254
   13de4:	48 81       	ld	r20, Y
   13de6:	59 81       	ldd	r21, Y+1	; 0x01
   13de8:	cb 50       	subi	r28, 0x0B	; 11
   13dea:	d1 40       	sbci	r29, 0x01	; 1
   13dec:	6e e7       	ldi	r22, 0x7E	; 126
   13dee:	70 e0       	ldi	r23, 0x00	; 0
   13df0:	ce 01       	movw	r24, r28
   13df2:	88 57       	subi	r24, 0x78	; 120
   13df4:	9f 4f       	sbci	r25, 0xFF	; 255
   13df6:	0e 94 e1 76 	call	0xedc2	; 0xedc2 <fgets>
   13dfa:	89 2b       	or	r24, r25
   13dfc:	f1 f6       	brne	.-68     	; 0x13dba <Read_Config+0x11a>
   13dfe:	0d c3       	rjmp	.+1562   	; 0x1441a <Read_Config+0x77a>
        ++lines;

        ptr = get_token(str, token, sizeof(token)-2);

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13e00:	83 32       	cpi	r24, 0x23	; 35
   13e02:	71 f3       	breq	.-36     	; 0x13de0 <Read_Config+0x140>
            continue;

        val.l = 0;
        tok = TOK_INVALID;

        if( ( ind = tok_index(token) )  == -1)
   13e04:	c4 01       	movw	r24, r8
   13e06:	0e 94 1b 93 	call	0x12636	; 0x12636 <tok_index>
   13e0a:	8f 3f       	cpi	r24, 0xFF	; 255
   13e0c:	49 f4       	brne	.+18     	; 0x13e20 <Read_Config+0x180>
        {
            printf("Unexpected token: %s, at line:%d\n", token,lines);
   13e0e:	ed b7       	in	r30, 0x3d	; 61
   13e10:	fe b7       	in	r31, 0x3e	; 62
   13e12:	37 82       	std	Z+7, r3	; 0x07
   13e14:	26 82       	std	Z+6, r2	; 0x06
   13e16:	95 82       	std	Z+5, r9	; 0x05
   13e18:	84 82       	std	Z+4, r8	; 0x04
   13e1a:	83 e0       	ldi	r24, 0x03	; 3
   13e1c:	90 e2       	ldi	r25, 0x20	; 32
   13e1e:	c4 c0       	rjmp	.+392    	; 0x13fa8 <Read_Config+0x308>
            ++errors;
            continue;
        }
        tok = tokens[ind].tok;
   13e20:	24 e0       	ldi	r18, 0x04	; 4
   13e22:	82 02       	muls	r24, r18
   13e24:	f0 01       	movw	r30, r0
   13e26:	11 24       	eor	r1, r1
   13e28:	ec 53       	subi	r30, 0x3C	; 60
   13e2a:	fe 4f       	sbci	r31, 0xFE	; 254
   13e2c:	02 81       	ldd	r16, Z+2	; 0x02
   13e2e:	13 81       	ldd	r17, Z+3	; 0x03

// get optional argument
        ptr = get_token(ptr, token, sizeof(token)-2);
   13e30:	4e e7       	ldi	r20, 0x7E	; 126
   13e32:	50 e0       	ldi	r21, 0x00	; 0
   13e34:	b4 01       	movw	r22, r8
   13e36:	c5 01       	movw	r24, r10
   13e38:	0e 94 72 33 	call	0x66e4	; 0x66e4 <get_token>
   13e3c:	5c 01       	movw	r10, r24
        if(MATCH(token,"="))
   13e3e:	67 e3       	ldi	r22, 0x37	; 55
   13e40:	7e e0       	ldi	r23, 0x0E	; 14
   13e42:	c4 01       	movw	r24, r8
   13e44:	0e 94 aa 32 	call	0x6554	; 0x6554 <MATCH>
   13e48:	89 2b       	or	r24, r25
   13e4a:	39 f0       	breq	.+14     	; 0x13e5a <Read_Config+0x1ba>
            ptr = get_token(ptr, token, sizeof(token)-2);
   13e4c:	4e e7       	ldi	r20, 0x7E	; 126
   13e4e:	50 e0       	ldi	r21, 0x00	; 0
   13e50:	b4 01       	movw	r22, r8
   13e52:	c5 01       	movw	r24, r10
   13e54:	0e 94 72 33 	call	0x66e4	; 0x66e4 <get_token>
   13e58:	5c 01       	movw	r10, r24
        val.l = get_value(token);
   13e5a:	c4 01       	movw	r24, r8
   13e5c:	0e 94 b5 33 	call	0x676a	; 0x676a <get_value>
        val.w = (uint16_t) 0xFFFF & val.l;
        val.b = (uint8_t) 0xFF & val.l;

//FIXME check for state and last state
        if(tok == TOK_END )
   13e60:	01 31       	cpi	r16, 0x11	; 17
   13e62:	11 05       	cpc	r17, r1
        {
            state = pop_state();
   13e64:	19 f4       	brne	.+6      	; 0x13e6c <Read_Config+0x1cc>
   13e66:	0d db       	rcall	.-2534   	; 0x13482 <pop_state>
   13e68:	3c 01       	movw	r6, r24
            continue;
   13e6a:	ba cf       	rjmp	.-140    	; 0x13de0 <Read_Config+0x140>
        }

        switch(state)
   13e6c:	30 e1       	ldi	r19, 0x10	; 16
   13e6e:	63 16       	cp	r6, r19
   13e70:	71 04       	cpc	r7, r1
   13e72:	08 f0       	brcs	.+2      	; 0x13e76 <Read_Config+0x1d6>
   13e74:	bc c2       	rjmp	.+1400   	; 0x143ee <Read_Config+0x74e>
   13e76:	f3 01       	movw	r30, r6
   13e78:	ea 53       	subi	r30, 0x3A	; 58
   13e7a:	ff 4f       	sbci	r31, 0xFF	; 255
   13e7c:	0c 94 64 e7 	jmp	0x1cec8	; 0x1cec8 <__tablejump2__>
        {
            case START_STATE:
                switch(tok)
   13e80:	0e 30       	cpi	r16, 0x0E	; 14
   13e82:	11 05       	cpc	r17, r1
   13e84:	09 f4       	brne	.+2      	; 0x13e88 <Read_Config+0x1e8>
   13e86:	83 c0       	rjmp	.+262    	; 0x13f8e <Read_Config+0x2ee>
   13e88:	44 f4       	brge	.+16     	; 0x13e9a <Read_Config+0x1fa>
   13e8a:	02 30       	cpi	r16, 0x02	; 2
   13e8c:	11 05       	cpc	r17, r1
   13e8e:	09 f4       	brne	.+2      	; 0x13e92 <Read_Config+0x1f2>
   13e90:	42 c0       	rjmp	.+132    	; 0x13f16 <Read_Config+0x276>
   13e92:	0c 30       	cpi	r16, 0x0C	; 12
   13e94:	11 05       	cpc	r17, r1
   13e96:	19 f1       	breq	.+70     	; 0x13ede <Read_Config+0x23e>
   13e98:	7f c0       	rjmp	.+254    	; 0x13f98 <Read_Config+0x2f8>
   13e9a:	03 32       	cpi	r16, 0x23	; 35
   13e9c:	11 05       	cpc	r17, r1
   13e9e:	f9 f0       	breq	.+62     	; 0x13ede <Read_Config+0x23e>
   13ea0:	04 32       	cpi	r16, 0x24	; 36
   13ea2:	11 05       	cpc	r17, r1
   13ea4:	29 f0       	breq	.+10     	; 0x13eb0 <Read_Config+0x210>
   13ea6:	00 32       	cpi	r16, 0x20	; 32
   13ea8:	11 05       	cpc	r17, r1
   13eaa:	09 f0       	breq	.+2      	; 0x13eae <Read_Config+0x20e>
   13eac:	75 c0       	rjmp	.+234    	; 0x13f98 <Read_Config+0x2f8>
   13eae:	4f c0       	rjmp	.+158    	; 0x13f4e <Read_Config+0x2ae>
                {
                    case TOK_SS80_DEFAULT:
                        push_state(state);
   13eb0:	80 e0       	ldi	r24, 0x00	; 0
   13eb2:	90 e0       	ldi	r25, 0x00	; 0
   13eb4:	cd da       	rcall	.-2662   	; 0x13450 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_DEFAULT_TYPE);
   13eb6:	82 e0       	ldi	r24, 0x02	; 2
   13eb8:	90 e0       	ldi	r25, 0x00	; 0
   13eba:	f9 d9       	rcall	.-3086   	; 0x132ae <alloc_device>
   13ebc:	c8 5f       	subi	r28, 0xF8	; 248
   13ebe:	de 4f       	sbci	r29, 0xFE	; 254
   13ec0:	88 83       	st	Y, r24
   13ec2:	c8 50       	subi	r28, 0x08	; 8
   13ec4:	d1 40       	sbci	r29, 0x01	; 1
   13ec6:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   13ec8:	09 f4       	brne	.+2      	; 0x13ecc <Read_Config+0x22c>
   13eca:	8a cf       	rjmp	.-236    	; 0x13de0 <Read_Config+0x140>
   13ecc:	4b e0       	ldi	r20, 0x0B	; 11
                            state = START_STATE;
                        else
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13ece:	84 02       	muls	r24, r20
   13ed0:	f0 01       	movw	r30, r0
   13ed2:	11 24       	eor	r1, r1
   13ed4:	e6 51       	subi	r30, 0x16	; 22
   13ed6:	f1 4e       	sbci	r31, 0xE1	; 225
   13ed8:	e7 80       	ldd	r14, Z+7	; 0x07
   13eda:	f0 84       	ldd	r15, Z+8	; 0x08
   13edc:	18 c0       	rjmp	.+48     	; 0x13f0e <Read_Config+0x26e>
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
   13ede:	80 e0       	ldi	r24, 0x00	; 0
   13ee0:	90 e0       	ldi	r25, 0x00	; 0
   13ee2:	b6 da       	rcall	.-2708   	; 0x13450 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_TYPE);
   13ee4:	83 e0       	ldi	r24, 0x03	; 3
   13ee6:	90 e0       	ldi	r25, 0x00	; 0
   13ee8:	e2 d9       	rcall	.-3132   	; 0x132ae <alloc_device>
   13eea:	c8 5f       	subi	r28, 0xF8	; 248
   13eec:	de 4f       	sbci	r29, 0xFE	; 254
   13eee:	88 83       	st	Y, r24
   13ef0:	c8 50       	subi	r28, 0x08	; 8
   13ef2:	d1 40       	sbci	r29, 0x01	; 1
   13ef4:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   13ef6:	09 f4       	brne	.+2      	; 0x13efa <Read_Config+0x25a>
   13ef8:	73 cf       	rjmp	.-282    	; 0x13de0 <Read_Config+0x140>
   13efa:	9b e0       	ldi	r25, 0x0B	; 11
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13efc:	89 02       	muls	r24, r25
   13efe:	f0 01       	movw	r30, r0
   13f00:	11 24       	eor	r1, r1
   13f02:	e6 51       	subi	r30, 0x16	; 22
   13f04:	f1 4e       	sbci	r31, 0xE1	; 225
   13f06:	e7 80       	ldd	r14, Z+7	; 0x07
   13f08:	f0 84       	ldd	r15, Z+8	; 0x08
                            hpdir_set_parameters(index,token); // also SS80p->HEADER.model
   13f0a:	b4 01       	movw	r22, r8
   13f0c:	5b db       	rcall	.-2378   	; 0x135c4 <hpdir_set_parameters>
   13f0e:	66 24       	eor	r6, r6
                            SS80p = (SS80DiskType *) Devices[index].dev;
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
                        state = SS80_STATE;
   13f10:	63 94       	inc	r6
   13f12:	71 2c       	mov	r7, r1
                            hpdir_set_parameters(index,token); // also SS80p->HEADER.model
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
   13f14:	65 cf       	rjmp	.-310    	; 0x13de0 <Read_Config+0x140>
   13f16:	80 e0       	ldi	r24, 0x00	; 0
   13f18:	90 e0       	ldi	r25, 0x00	; 0
   13f1a:	9a da       	rcall	.-2764   	; 0x13450 <push_state>
                        state = AMIGO_STATE;
                        index = alloc_device(AMIGO_TYPE);
   13f1c:	81 e0       	ldi	r24, 0x01	; 1
   13f1e:	90 e0       	ldi	r25, 0x00	; 0
   13f20:	c6 d9       	rcall	.-3188   	; 0x132ae <alloc_device>
   13f22:	c8 5f       	subi	r28, 0xF8	; 248
   13f24:	de 4f       	sbci	r29, 0xFE	; 254
   13f26:	88 83       	st	Y, r24
   13f28:	c8 50       	subi	r28, 0x08	; 8
   13f2a:	d1 40       	sbci	r29, 0x01	; 1
   13f2c:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   13f2e:	09 f4       	brne	.+2      	; 0x13f32 <Read_Config+0x292>
   13f30:	57 cf       	rjmp	.-338    	; 0x13de0 <Read_Config+0x140>
   13f32:	ab e0       	ldi	r26, 0x0B	; 11
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   13f34:	8a 02       	muls	r24, r26
   13f36:	f0 01       	movw	r30, r0
   13f38:	11 24       	eor	r1, r1
   13f3a:	e6 51       	subi	r30, 0x16	; 22
   13f3c:	f1 4e       	sbci	r31, 0xE1	; 225
   13f3e:	47 80       	ldd	r4, Z+7	; 0x07
   13f40:	50 84       	ldd	r5, Z+8	; 0x08
                            hpdir_set_parameters(index,token); // also sets AMIGOp->HEADER.model
   13f42:	b4 01       	movw	r22, r8
   13f44:	3f db       	rcall	.-2434   	; 0x135c4 <hpdir_set_parameters>
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
                        state = AMIGO_STATE;
   13f46:	aa e0       	ldi	r26, 0x0A	; 10
   13f48:	6a 2e       	mov	r6, r26
   13f4a:	71 2c       	mov	r7, r1
   13f4c:	49 cf       	rjmp	.-366    	; 0x13de0 <Read_Config+0x140>
                            hpdir_set_parameters(index,token); // also sets AMIGOp->HEADER.model
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
   13f4e:	80 e0       	ldi	r24, 0x00	; 0
   13f50:	90 e0       	ldi	r25, 0x00	; 0
   13f52:	7e da       	rcall	.-2820   	; 0x13450 <push_state>
   13f54:	84 e0       	ldi	r24, 0x04	; 4
                        state = PRINTER_STATE;
                        index = alloc_device(PRINTER_TYPE);
   13f56:	90 e0       	ldi	r25, 0x00	; 0
   13f58:	aa d9       	rcall	.-3244   	; 0x132ae <alloc_device>
   13f5a:	c8 5f       	subi	r28, 0xF8	; 248
   13f5c:	de 4f       	sbci	r29, 0xFE	; 254
   13f5e:	88 83       	st	Y, r24
   13f60:	c8 50       	subi	r28, 0x08	; 8
   13f62:	d1 40       	sbci	r29, 0x01	; 1
   13f64:	8f 3f       	cpi	r24, 0xFF	; 255
   13f66:	09 f4       	brne	.+2      	; 0x13f6a <Read_Config+0x2ca>
                        if(index == -1)
   13f68:	3b cf       	rjmp	.-394    	; 0x13de0 <Read_Config+0x140>
   13f6a:	bb e0       	ldi	r27, 0x0B	; 11
   13f6c:	8b 02       	muls	r24, r27
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   13f6e:	f0 01       	movw	r30, r0
   13f70:	11 24       	eor	r1, r1
   13f72:	e6 51       	subi	r30, 0x16	; 22
   13f74:	f1 4e       	sbci	r31, 0xE1	; 225
   13f76:	27 81       	ldd	r18, Z+7	; 0x07
   13f78:	30 85       	ldd	r19, Z+8	; 0x08
   13f7a:	c7 5f       	subi	r28, 0xF7	; 247
   13f7c:	de 4f       	sbci	r29, 0xFE	; 254
   13f7e:	39 83       	std	Y+1, r19	; 0x01
   13f80:	28 83       	st	Y, r18
   13f82:	c9 50       	subi	r28, 0x09	; 9
   13f84:	d1 40       	sbci	r29, 0x01	; 1
   13f86:	fe e0       	ldi	r31, 0x0E	; 14
   13f88:	6f 2e       	mov	r6, r31
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
                        state = PRINTER_STATE;
   13f8a:	71 2c       	mov	r7, r1
   13f8c:	29 cf       	rjmp	.-430    	; 0x13de0 <Read_Config+0x140>
   13f8e:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
                        break;
                    case TOK_DEBUG:
                        debuglevel = val.w;
   13f92:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   13f96:	24 cf       	rjmp	.-440    	; 0x13de0 <Read_Config+0x140>
   13f98:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13f9a:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected token: %s, at line:%d\n", ptr,lines);
   13f9c:	37 82       	std	Z+7, r3	; 0x07
   13f9e:	26 82       	std	Z+6, r2	; 0x06
   13fa0:	b5 82       	std	Z+5, r11	; 0x05
   13fa2:	a4 82       	std	Z+4, r10	; 0x04
   13fa4:	81 ee       	ldi	r24, 0xE1	; 225
   13fa6:	9f e1       	ldi	r25, 0x1F	; 31
   13fa8:	a0 e0       	ldi	r26, 0x00	; 0
   13faa:	81 83       	std	Z+1, r24	; 0x01
   13fac:	92 83       	std	Z+2, r25	; 0x02
   13fae:	a3 83       	std	Z+3, r26	; 0x03
   13fb0:	2e c2       	rjmp	.+1116   	; 0x1440e <Read_Config+0x76e>
   13fb2:	09 30       	cpi	r16, 0x09	; 9
                        break;
                }
                break;

            case PRINTER_STATE:
                if(tok == TOK_CONFIG)
   13fb4:	11 05       	cpc	r17, r1
   13fb6:	39 f4       	brne	.+14     	; 0x13fc6 <Read_Config+0x326>
   13fb8:	8e e0       	ldi	r24, 0x0E	; 14
                {
                    push_state(state);
   13fba:	90 e0       	ldi	r25, 0x00	; 0
   13fbc:	49 da       	rcall	.-2926   	; 0x13450 <push_state>
   13fbe:	ef e0       	ldi	r30, 0x0F	; 15
   13fc0:	6e 2e       	mov	r6, r30
                    state = PRINTER_CONFIG;
   13fc2:	71 2c       	mov	r7, r1
   13fc4:	0d cf       	rjmp	.-486    	; 0x13de0 <Read_Config+0x140>
   13fc6:	ed b7       	in	r30, 0x3d	; 61
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
                    ++errors;
                    break;
                }
                break;
   13fc8:	fe b7       	in	r31, 0x3e	; 62
                    push_state(state);
                    state = PRINTER_CONFIG;
                }
                else
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   13fca:	37 82       	std	Z+7, r3	; 0x07
   13fcc:	26 82       	std	Z+6, r2	; 0x06
   13fce:	b5 82       	std	Z+5, r11	; 0x05
   13fd0:	a4 82       	std	Z+4, r10	; 0x04
   13fd2:	87 eb       	ldi	r24, 0xB7	; 183
   13fd4:	9f e1       	ldi	r25, 0x1F	; 31
   13fd6:	e8 cf       	rjmp	.-48     	; 0x13fa8 <Read_Config+0x308>
   13fd8:	01 30       	cpi	r16, 0x01	; 1
   13fda:	11 05       	cpc	r17, r1
                    break;
                }
                break;

            case PRINTER_CONFIG:
                if(tok == TOK_ADDRESS)
   13fdc:	c1 f4       	brne	.+48     	; 0x1400e <Read_Config+0x36e>
   13fde:	c8 5f       	subi	r28, 0xF8	; 248
   13fe0:	de 4f       	sbci	r29, 0xFE	; 254
                {
					address = val.b;
                    Devices[index].ADDRESS = address;
   13fe2:	28 81       	ld	r18, Y
   13fe4:	c8 50       	subi	r28, 0x08	; 8
   13fe6:	d1 40       	sbci	r29, 0x01	; 1
   13fe8:	3b e0       	ldi	r19, 0x0B	; 11
   13fea:	23 02       	muls	r18, r19
   13fec:	f0 01       	movw	r30, r0
   13fee:	11 24       	eor	r1, r1
   13ff0:	e6 51       	subi	r30, 0x16	; 22
   13ff2:	f1 4e       	sbci	r31, 0xE1	; 225
   13ff4:	61 83       	std	Z+1, r22	; 0x01
   13ff6:	c7 5f       	subi	r28, 0xF7	; 247
   13ff8:	de 4f       	sbci	r29, 0xFE	; 254
                    PRINTERp->HEADER.ADDRESS  = address;
   13ffa:	a8 81       	ld	r26, Y
   13ffc:	b9 81       	ldd	r27, Y+1	; 0x01
   13ffe:	c9 50       	subi	r28, 0x09	; 9
   14000:	d1 40       	sbci	r29, 0x01	; 1
   14002:	6c 93       	st	X, r22
   14004:	8f ef       	ldi	r24, 0xFF	; 255
   14006:	82 83       	std	Z+2, r24	; 0x02
// NO PPR
                    Devices[index].PPR = 0xff;
   14008:	fd 01       	movw	r30, r26
   1400a:	81 83       	std	Z+1, r24	; 0x01
                    PRINTERp->HEADER.PPR = 0xff;
   1400c:	e9 ce       	rjmp	.-558    	; 0x13de0 <Read_Config+0x140>
   1400e:	ed b7       	in	r30, 0x3d	; 61
   14010:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   14012:	37 82       	std	Z+7, r3	; 0x07
   14014:	26 82       	std	Z+6, r2	; 0x06
   14016:	b5 82       	std	Z+5, r11	; 0x05
   14018:	a4 82       	std	Z+4, r10	; 0x04
   1401a:	86 e8       	ldi	r24, 0x86	; 134
   1401c:	9f e1       	ldi	r25, 0x1F	; 31
   1401e:	c4 cf       	rjmp	.-120    	; 0x13fa8 <Read_Config+0x308>
   14020:	05 31       	cpi	r16, 0x15	; 21
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   14022:	11 05       	cpc	r17, r1
   14024:	d9 f0       	breq	.+54     	; 0x1405c <Read_Config+0x3bc>
   14026:	6c f4       	brge	.+26     	; 0x14042 <Read_Config+0x3a2>
   14028:	09 30       	cpi	r16, 0x09	; 9
   1402a:	11 05       	cpc	r17, r1
   1402c:	f1 f0       	breq	.+60     	; 0x1406a <Read_Config+0x3ca>
   1402e:	0b 30       	cpi	r16, 0x0B	; 11
   14030:	11 05       	cpc	r17, r1
   14032:	49 f5       	brne	.+82     	; 0x14086 <Read_Config+0x3e6>
   14034:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONFIG:
                        push_state(state);
                        state = SS80_CONFIG;
                        break;
                    case TOK_CONTROLLER:
                        push_state(state);
   14036:	90 e0       	ldi	r25, 0x00	; 0
   14038:	0b da       	rcall	.-3050   	; 0x13450 <push_state>
   1403a:	54 e0       	ldi	r21, 0x04	; 4
                        state = SS80_CONTROLLER;
   1403c:	65 2e       	mov	r6, r21
   1403e:	71 2c       	mov	r7, r1
   14040:	cf ce       	rjmp	.-610    	; 0x13de0 <Read_Config+0x140>
                        break;
   14042:	07 32       	cpi	r16, 0x27	; 39
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   14044:	11 05       	cpc	r17, r1
   14046:	c1 f0       	breq	.+48     	; 0x14078 <Read_Config+0x3d8>
   14048:	0a 32       	cpi	r16, 0x2A	; 42
   1404a:	11 05       	cpc	r17, r1
   1404c:	e1 f4       	brne	.+56     	; 0x14086 <Read_Config+0x3e6>
                    case TOK_UNIT:
                        push_state(state);
                        state = SS80_UNIT;
                        break;
                    case TOK_VOLUME:
                        push_state(state);
   1404e:	81 e0       	ldi	r24, 0x01	; 1
   14050:	90 e0       	ldi	r25, 0x00	; 0
   14052:	fe d9       	rcall	.-3076   	; 0x13450 <push_state>
                        state = SS80_VOLUME;
   14054:	36 e0       	ldi	r19, 0x06	; 6
   14056:	63 2e       	mov	r6, r19
   14058:	71 2c       	mov	r7, r1
                        break;
   1405a:	c2 ce       	rjmp	.-636    	; 0x13de0 <Read_Config+0x140>

            case SS80_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   1405c:	81 e0       	ldi	r24, 0x01	; 1
   1405e:	90 e0       	ldi	r25, 0x00	; 0
   14060:	f7 d9       	rcall	.-3090   	; 0x13450 <push_state>
                        state = SS80_HEADER;
   14062:	72 e0       	ldi	r23, 0x02	; 2
   14064:	67 2e       	mov	r6, r23
   14066:	71 2c       	mov	r7, r1
                        break;
   14068:	bb ce       	rjmp	.-650    	; 0x13de0 <Read_Config+0x140>
                    case TOK_CONFIG:
                        push_state(state);
   1406a:	81 e0       	ldi	r24, 0x01	; 1
   1406c:	90 e0       	ldi	r25, 0x00	; 0
   1406e:	f0 d9       	rcall	.-3104   	; 0x13450 <push_state>
   14070:	63 e0       	ldi	r22, 0x03	; 3
                        state = SS80_CONFIG;
   14072:	66 2e       	mov	r6, r22
   14074:	71 2c       	mov	r7, r1
   14076:	b4 ce       	rjmp	.-664    	; 0x13de0 <Read_Config+0x140>
                        break;
   14078:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONTROLLER:
                        push_state(state);
                        state = SS80_CONTROLLER;
                        break;
                    case TOK_UNIT:
                        push_state(state);
   1407a:	90 e0       	ldi	r25, 0x00	; 0
   1407c:	e9 d9       	rcall	.-3118   	; 0x13450 <push_state>
   1407e:	45 e0       	ldi	r20, 0x05	; 5
   14080:	64 2e       	mov	r6, r20
                        state = SS80_UNIT;
   14082:	71 2c       	mov	r7, r1
   14084:	ad ce       	rjmp	.-678    	; 0x13de0 <Read_Config+0x140>
   14086:	ed b7       	in	r30, 0x3d	; 61
                        break;
   14088:	fe b7       	in	r31, 0x3e	; 62
                    case TOK_VOLUME:
                        push_state(state);
                        state = SS80_VOLUME;
                        break;
                    default:
                        printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   1408a:	37 82       	std	Z+7, r3	; 0x07
   1408c:	26 82       	std	Z+6, r2	; 0x06
   1408e:	b5 82       	std	Z+5, r11	; 0x05
   14090:	a4 82       	std	Z+4, r10	; 0x04
   14092:	89 e5       	ldi	r24, 0x59	; 89
   14094:	9f e1       	ldi	r25, 0x1F	; 31
   14096:	88 cf       	rjmp	.-240    	; 0x13fa8 <Read_Config+0x308>
   14098:	02 31       	cpi	r16, 0x12	; 18
   1409a:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_HEADER:
                switch(tok)
   1409c:	11 f1       	breq	.+68     	; 0x140e2 <Read_Config+0x442>
   1409e:	0f 31       	cpi	r16, 0x1F	; 31
   140a0:	11 05       	cpc	r17, r1
   140a2:	89 f0       	breq	.+34     	; 0x140c6 <Read_Config+0x426>
   140a4:	01 30       	cpi	r16, 0x01	; 1
   140a6:	11 05       	cpc	r17, r1
   140a8:	09 f5       	brne	.+66     	; 0x140ec <Read_Config+0x44c>
   140aa:	c8 5f       	subi	r28, 0xF8	; 248
   140ac:	de 4f       	sbci	r29, 0xFE	; 254
                {
                    case TOK_ADDRESS:
						address = val.b;
                        Devices[index].ADDRESS = address;
   140ae:	28 81       	ld	r18, Y
   140b0:	c8 50       	subi	r28, 0x08	; 8
   140b2:	d1 40       	sbci	r29, 0x01	; 1
   140b4:	3b e0       	ldi	r19, 0x0B	; 11
   140b6:	23 02       	muls	r18, r19
   140b8:	f0 01       	movw	r30, r0
   140ba:	11 24       	eor	r1, r1
   140bc:	e6 51       	subi	r30, 0x16	; 22
   140be:	f1 4e       	sbci	r31, 0xE1	; 225
   140c0:	61 83       	std	Z+1, r22	; 0x01
   140c2:	d7 01       	movw	r26, r14
   140c4:	33 c1       	rjmp	.+614    	; 0x1432c <Read_Config+0x68c>
                        SS80p->HEADER.ADDRESS  = address;
   140c6:	c8 5f       	subi	r28, 0xF8	; 248
   140c8:	de 4f       	sbci	r29, 0xFE	; 254
                        break;
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
   140ca:	b8 81       	ld	r27, Y
   140cc:	c8 50       	subi	r28, 0x08	; 8
   140ce:	d1 40       	sbci	r29, 0x01	; 1
   140d0:	2b e0       	ldi	r18, 0x0B	; 11
   140d2:	b2 02       	muls	r27, r18
   140d4:	f0 01       	movw	r30, r0
   140d6:	11 24       	eor	r1, r1
   140d8:	e6 51       	subi	r30, 0x16	; 22
   140da:	f1 4e       	sbci	r31, 0xE1	; 225
   140dc:	62 83       	std	Z+2, r22	; 0x02
   140de:	f7 01       	movw	r30, r14
   140e0:	27 c1       	rjmp	.+590    	; 0x14330 <Read_Config+0x690>
                        SS80p->HEADER.PPR = ppr;
   140e2:	c4 01       	movw	r24, r8
   140e4:	0e 94 60 32 	call	0x64c0	; 0x64c0 <stralloc>
                        break;
                    case TOK_FILE:
                        SS80p->HEADER.NAME = stralloc(token);
   140e8:	f7 01       	movw	r30, r14
   140ea:	28 c1       	rjmp	.+592    	; 0x1433c <Read_Config+0x69c>
   140ec:	ed b7       	in	r30, 0x3d	; 61
   140ee:	fe b7       	in	r31, 0x3e	; 62
                        break;
                    default:
                        printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   140f0:	37 82       	std	Z+7, r3	; 0x07
   140f2:	26 82       	std	Z+6, r2	; 0x06
   140f4:	b5 82       	std	Z+5, r11	; 0x05
   140f6:	a4 82       	std	Z+4, r10	; 0x04
   140f8:	8b e2       	ldi	r24, 0x2B	; 43
   140fa:	9f e1       	ldi	r25, 0x1F	; 31
   140fc:	55 cf       	rjmp	.-342    	; 0x13fa8 <Read_Config+0x308>
   140fe:	07 31       	cpi	r16, 0x17	; 23
   14100:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_CONFIG:
                if(tok == TOK_ID )
   14102:	21 f4       	brne	.+8      	; 0x1410c <Read_Config+0x46c>
   14104:	96 2f       	mov	r25, r22
   14106:	87 2f       	mov	r24, r23
                {
                    SS80p->CONFIG.ID = val.w;
   14108:	f7 01       	movw	r30, r14
   1410a:	2f c1       	rjmp	.+606    	; 0x1436a <Read_Config+0x6ca>
   1410c:	ed b7       	in	r30, 0x3d	; 61
   1410e:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   14110:	37 82       	std	Z+7, r3	; 0x07
   14112:	26 82       	std	Z+6, r2	; 0x06
   14114:	b5 82       	std	Z+5, r11	; 0x05
   14116:	a4 82       	std	Z+4, r10	; 0x04
   14118:	8d ef       	ldi	r24, 0xFD	; 253
   1411a:	9e e1       	ldi	r25, 0x1E	; 30
   1411c:	45 cf       	rjmp	.-374    	; 0x13fa8 <Read_Config+0x308>
   1411e:	06 32       	cpi	r16, 0x26	; 38
   14120:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case SS80_CONTROLLER:
                switch(tok)
   14122:	71 f0       	breq	.+28     	; 0x14140 <Read_Config+0x4a0>
   14124:	08 32       	cpi	r16, 0x28	; 40
   14126:	11 05       	cpc	r17, r1
   14128:	39 f0       	breq	.+14     	; 0x14138 <Read_Config+0x498>
   1412a:	05 32       	cpi	r16, 0x25	; 37
   1412c:	11 05       	cpc	r17, r1
   1412e:	59 f4       	brne	.+22     	; 0x14146 <Read_Config+0x4a6>
   14130:	96 2f       	mov	r25, r22
   14132:	87 2f       	mov	r24, r23
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   14134:	f7 01       	movw	r30, r14
   14136:	42 c1       	rjmp	.+644    	; 0x143bc <Read_Config+0x71c>
   14138:	96 2f       	mov	r25, r22
   1413a:	87 2f       	mov	r24, r23

            case SS80_CONTROLLER:
                switch(tok)
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   1413c:	f7 01       	movw	r30, r14
   1413e:	3b c1       	rjmp	.+630    	; 0x143b6 <Read_Config+0x716>
   14140:	f7 01       	movw	r30, r14
   14142:	64 87       	std	Z+12, r22	; 0x0c
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
                        break;
                    case TOK_TYPE:
                        SS80p->CONTROLLER.TYPE = val.b;
   14144:	4d ce       	rjmp	.-870    	; 0x13de0 <Read_Config+0x140>
   14146:	ed b7       	in	r30, 0x3d	; 61
                        break;
   14148:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   1414a:	37 82       	std	Z+7, r3	; 0x07
   1414c:	26 82       	std	Z+6, r2	; 0x06
   1414e:	b5 82       	std	Z+5, r11	; 0x05
   14150:	a4 82       	std	Z+4, r10	; 0x04
   14152:	8b ec       	ldi	r24, 0xCB	; 203
   14154:	9e e1       	ldi	r25, 0x1E	; 30
   14156:	28 cf       	rjmp	.-432    	; 0x13fa8 <Read_Config+0x308>
   14158:	0a 30       	cpi	r16, 0x0A	; 10
   1415a:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   1415c:	09 f4       	brne	.+2      	; 0x14160 <Read_Config+0x4c0>
   1415e:	45 c0       	rjmp	.+138    	; 0x141ea <Read_Config+0x54a>
   14160:	d4 f4       	brge	.+52     	; 0x14196 <Read_Config+0x4f6>
   14162:	05 30       	cpi	r16, 0x05	; 5
   14164:	11 05       	cpc	r17, r1
   14166:	d1 f1       	breq	.+116    	; 0x141dc <Read_Config+0x53c>
   14168:	64 f4       	brge	.+24     	; 0x14182 <Read_Config+0x4e2>
   1416a:	01 15       	cp	r16, r1
   1416c:	11 05       	cpc	r17, r1
   1416e:	09 f4       	brne	.+2      	; 0x14172 <Read_Config+0x4d2>
   14170:	40 c0       	rjmp	.+128    	; 0x141f2 <Read_Config+0x552>
   14172:	04 30       	cpi	r16, 0x04	; 4
   14174:	11 05       	cpc	r17, r1
   14176:	09 f0       	breq	.+2      	; 0x1417a <Read_Config+0x4da>
   14178:	46 c0       	rjmp	.+140    	; 0x14206 <Read_Config+0x566>
   1417a:	f7 01       	movw	r30, r14
   1417c:	66 8b       	std	Z+22, r22	; 0x16
                        break;
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
                        break;
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
   1417e:	77 8b       	std	Z+23, r23	; 0x17
   14180:	2f ce       	rjmp	.-930    	; 0x13de0 <Read_Config+0x140>
   14182:	06 30       	cpi	r16, 0x06	; 6
                        break;
   14184:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   14186:	71 f1       	breq	.+92     	; 0x141e4 <Read_Config+0x544>
   14188:	07 30       	cpi	r16, 0x07	; 7
   1418a:	11 05       	cpc	r17, r1
   1418c:	e1 f5       	brne	.+120    	; 0x14206 <Read_Config+0x566>
   1418e:	f7 01       	movw	r30, r14
   14190:	62 8b       	std	Z+18, r22	; 0x12
                        break;
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
                        break;
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   14192:	73 8b       	std	Z+19, r23	; 0x13
   14194:	25 ce       	rjmp	.-950    	; 0x13de0 <Read_Config+0x140>
   14196:	0c 31       	cpi	r16, 0x1C	; 28
                        break;
   14198:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   1419a:	79 f1       	breq	.+94     	; 0x141fa <Read_Config+0x55a>
   1419c:	4c f4       	brge	.+18     	; 0x141b0 <Read_Config+0x510>
   1419e:	0f 30       	cpi	r16, 0x0F	; 15
   141a0:	11 05       	cpc	r17, r1
   141a2:	b1 f0       	breq	.+44     	; 0x141d0 <Read_Config+0x530>
   141a4:	03 31       	cpi	r16, 0x13	; 19
   141a6:	11 05       	cpc	r17, r1
   141a8:	71 f5       	brne	.+92     	; 0x14206 <Read_Config+0x566>
   141aa:	f7 01       	movw	r30, r14
   141ac:	67 8f       	std	Z+31, r22	; 0x1f
                        break;
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
                        break;
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
   141ae:	18 ce       	rjmp	.-976    	; 0x13de0 <Read_Config+0x140>
   141b0:	01 32       	cpi	r16, 0x21	; 33
                        break;
   141b2:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   141b4:	29 f1       	breq	.+74     	; 0x14200 <Read_Config+0x560>
   141b6:	09 32       	cpi	r16, 0x29	; 41
   141b8:	11 05       	cpc	r17, r1
   141ba:	39 f0       	breq	.+14     	; 0x141ca <Read_Config+0x52a>
   141bc:	0e 31       	cpi	r16, 0x1E	; 30
   141be:	11 05       	cpc	r17, r1
   141c0:	11 f5       	brne	.+68     	; 0x14206 <Read_Config+0x566>
   141c2:	f7 01       	movw	r30, r14
   141c4:	62 8f       	std	Z+26, r22	; 0x1a
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
                        break;
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   141c6:	73 8f       	std	Z+27, r23	; 0x1b
   141c8:	0b ce       	rjmp	.-1002   	; 0x13de0 <Read_Config+0x140>
   141ca:	f7 01       	movw	r30, r14
                        break;
   141cc:	65 87       	std	Z+13, r22	; 0x0d

            case SS80_UNIT:
                switch(tok)
                {
                    case TOK_UNIT_TYPE:
                        SS80p->UNIT.UNIT_TYPE = val.b;
   141ce:	08 ce       	rjmp	.-1008   	; 0x13de0 <Read_Config+0x140>
   141d0:	f7 01       	movw	r30, r14
                        break;
   141d2:	66 87       	std	Z+14, r22	; 0x0e
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
   141d4:	77 87       	std	Z+15, r23	; 0x0f
   141d6:	80 8b       	std	Z+16, r24	; 0x10
   141d8:	91 8b       	std	Z+17, r25	; 0x11
   141da:	02 ce       	rjmp	.-1020   	; 0x13de0 <Read_Config+0x140>
   141dc:	61 70       	andi	r22, 0x01	; 1
                        break;
   141de:	f7 01       	movw	r30, r14
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
                        break;
                    case TOK_BUFFERED_BLOCKS:
                        SS80p->UNIT.BUFFERED_BLOCKS = 1 & val.b;
   141e0:	64 8b       	std	Z+20, r22	; 0x14
   141e2:	fe cd       	rjmp	.-1028   	; 0x13de0 <Read_Config+0x140>
   141e4:	f7 01       	movw	r30, r14
                        break;
   141e6:	65 8b       	std	Z+21, r22	; 0x15
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
   141e8:	fb cd       	rjmp	.-1034   	; 0x13de0 <Read_Config+0x140>
   141ea:	f7 01       	movw	r30, r14
                        break;
   141ec:	60 8f       	std	Z+24, r22	; 0x18
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   141ee:	71 8f       	std	Z+25, r23	; 0x19
   141f0:	f7 cd       	rjmp	.-1042   	; 0x13de0 <Read_Config+0x140>
   141f2:	f7 01       	movw	r30, r14
                        break;
   141f4:	64 8f       	std	Z+28, r22	; 0x1c
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
                        break;
                    case TOK_ACCESS_TIME:
                        SS80p->UNIT.ACCESS_TIME = val.w;
   141f6:	75 8f       	std	Z+29, r23	; 0x1d
   141f8:	f3 cd       	rjmp	.-1050   	; 0x13de0 <Read_Config+0x140>
   141fa:	f7 01       	movw	r30, r14
                        break;
   141fc:	66 8f       	std	Z+30, r22	; 0x1e
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   141fe:	f0 cd       	rjmp	.-1056   	; 0x13de0 <Read_Config+0x140>
   14200:	f7 01       	movw	r30, r14
                        break;
   14202:	60 a3       	std	Z+32, r22	; 0x20
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
                        break;
                    case TOK_REMOVABLE_VOLUMES:
                        SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   14204:	ed cd       	rjmp	.-1062   	; 0x13de0 <Read_Config+0x140>
   14206:	ed b7       	in	r30, 0x3d	; 61
                        break;
   14208:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   1420a:	37 82       	std	Z+7, r3	; 0x07
   1420c:	26 82       	std	Z+6, r2	; 0x06
   1420e:	b5 82       	std	Z+5, r11	; 0x05
   14210:	a4 82       	std	Z+4, r10	; 0x04
   14212:	8f e9       	ldi	r24, 0x9F	; 159
   14214:	9e e1       	ldi	r25, 0x1E	; 30
   14216:	c8 ce       	rjmp	.-624    	; 0x13fa8 <Read_Config+0x308>
   14218:	0a 31       	cpi	r16, 0x1A	; 26
   1421a:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   1421c:	b9 f0       	breq	.+46     	; 0x1424c <Read_Config+0x5ac>
   1421e:	64 f4       	brge	.+24     	; 0x14238 <Read_Config+0x598>
   14220:	08 31       	cpi	r16, 0x18	; 24
   14222:	11 05       	cpc	r17, r1
   14224:	e1 f0       	breq	.+56     	; 0x1425e <Read_Config+0x5be>
   14226:	09 31       	cpi	r16, 0x19	; 25
   14228:	11 05       	cpc	r17, r1
   1422a:	e1 f4       	brne	.+56     	; 0x14264 <Read_Config+0x5c4>
   1422c:	f7 01       	movw	r30, r14
   1422e:	60 a7       	std	Z+40, r22	; 0x28
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
   14230:	71 a7       	std	Z+41, r23	; 0x29
   14232:	82 a7       	std	Z+42, r24	; 0x2a
   14234:	93 a7       	std	Z+43, r25	; 0x2b
   14236:	d4 cd       	rjmp	.-1112   	; 0x13de0 <Read_Config+0x140>
   14238:	0b 31       	cpi	r16, 0x1B	; 27
                        break;
   1423a:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   1423c:	69 f0       	breq	.+26     	; 0x14258 <Read_Config+0x5b8>
   1423e:	0d 31       	cpi	r16, 0x1D	; 29
   14240:	11 05       	cpc	r17, r1
   14242:	81 f4       	brne	.+32     	; 0x14264 <Read_Config+0x5c4>
   14244:	f7 01       	movw	r30, r14
   14246:	66 a3       	std	Z+38, r22	; 0x26
                        break;
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
   14248:	77 a3       	std	Z+39, r23	; 0x27
   1424a:	ca cd       	rjmp	.-1132   	; 0x13de0 <Read_Config+0x140>
   1424c:	f7 01       	movw	r30, r14
                        break;
   1424e:	61 a3       	std	Z+33, r22	; 0x21

            case SS80_VOLUME:
                switch(tok)
                {
                    case TOK_MAX_CYLINDER:
                        SS80p->VOLUME.MAX_CYLINDER = val.l;
   14250:	72 a3       	std	Z+34, r23	; 0x22
   14252:	83 a3       	std	Z+35, r24	; 0x23
   14254:	94 a3       	std	Z+36, r25	; 0x24
   14256:	c4 cd       	rjmp	.-1144   	; 0x13de0 <Read_Config+0x140>
   14258:	f7 01       	movw	r30, r14
                        break;
   1425a:	65 a3       	std	Z+37, r22	; 0x25
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
   1425c:	c1 cd       	rjmp	.-1150   	; 0x13de0 <Read_Config+0x140>
   1425e:	f7 01       	movw	r30, r14
                        break;
   14260:	64 a7       	std	Z+44, r22	; 0x2c
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
   14262:	be cd       	rjmp	.-1156   	; 0x13de0 <Read_Config+0x140>
   14264:	ed b7       	in	r30, 0x3d	; 61
                        break;
   14266:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   14268:	37 82       	std	Z+7, r3	; 0x07
   1426a:	26 82       	std	Z+6, r2	; 0x06
   1426c:	b5 82       	std	Z+5, r11	; 0x05
   1426e:	a4 82       	std	Z+4, r10	; 0x04
   14270:	c4 5e       	subi	r28, 0xE4	; 228
   14272:	de 4f       	sbci	r29, 0xFE	; 254
   14274:	28 81       	ld	r18, Y
   14276:	39 81       	ldd	r19, Y+1	; 0x01
   14278:	4a 81       	ldd	r20, Y+2	; 0x02
   1427a:	cc 51       	subi	r28, 0x1C	; 28
   1427c:	d1 40       	sbci	r29, 0x01	; 1
   1427e:	c4 c0       	rjmp	.+392    	; 0x14408 <Read_Config+0x768>
   14280:	04 31       	cpi	r16, 0x14	; 20
                }
                break;

#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
   14282:	11 05       	cpc	r17, r1
   14284:	a1 f0       	breq	.+40     	; 0x142ae <Read_Config+0x60e>
   14286:	05 31       	cpi	r16, 0x15	; 21
   14288:	11 05       	cpc	r17, r1
   1428a:	51 f0       	breq	.+20     	; 0x142a0 <Read_Config+0x600>
   1428c:	09 30       	cpi	r16, 0x09	; 9
   1428e:	11 05       	cpc	r17, r1
                    case TOK_HEADER:
                        push_state(state);
                        state = AMIGO_HEADER;
                        break;
                    case TOK_CONFIG:
                        push_state(state);
   14290:	a9 f4       	brne	.+42     	; 0x142bc <Read_Config+0x61c>
   14292:	8a e0       	ldi	r24, 0x0A	; 10
   14294:	90 e0       	ldi	r25, 0x00	; 0
   14296:	dc d8       	rcall	.-3656   	; 0x13450 <push_state>
                        state = AMIGO_CONFIG;
   14298:	9c e0       	ldi	r25, 0x0C	; 12
   1429a:	69 2e       	mov	r6, r25
   1429c:	71 2c       	mov	r7, r1
                        break;
   1429e:	a0 cd       	rjmp	.-1216   	; 0x13de0 <Read_Config+0x140>
#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   142a0:	8a e0       	ldi	r24, 0x0A	; 10
   142a2:	90 e0       	ldi	r25, 0x00	; 0
   142a4:	d5 d8       	rcall	.-3670   	; 0x13450 <push_state>
   142a6:	2b e0       	ldi	r18, 0x0B	; 11
                        state = AMIGO_HEADER;
   142a8:	62 2e       	mov	r6, r18
   142aa:	71 2c       	mov	r7, r1
   142ac:	99 cd       	rjmp	.-1230   	; 0x13de0 <Read_Config+0x140>
                        break;
   142ae:	8a e0       	ldi	r24, 0x0A	; 10
                    case TOK_CONFIG:
                        push_state(state);
                        state = AMIGO_CONFIG;
                        break;
                    case TOK_GEOMETRY:
                        push_state(state);
   142b0:	90 e0       	ldi	r25, 0x00	; 0
   142b2:	ce d8       	rcall	.-3684   	; 0x13450 <push_state>
   142b4:	8d e0       	ldi	r24, 0x0D	; 13
   142b6:	68 2e       	mov	r6, r24
                        state = AMIGO_GEOMETRY;
   142b8:	71 2c       	mov	r7, r1
   142ba:	92 cd       	rjmp	.-1244   	; 0x13de0 <Read_Config+0x140>
   142bc:	ed b7       	in	r30, 0x3d	; 61
                        break;
   142be:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   142c0:	37 82       	std	Z+7, r3	; 0x07
   142c2:	26 82       	std	Z+6, r2	; 0x06
   142c4:	b5 82       	std	Z+5, r11	; 0x05
   142c6:	a4 82       	std	Z+4, r10	; 0x04
   142c8:	c7 5e       	subi	r28, 0xE7	; 231
   142ca:	de 4f       	sbci	r29, 0xFE	; 254
   142cc:	28 81       	ld	r18, Y
   142ce:	39 81       	ldd	r19, Y+1	; 0x01
   142d0:	4a 81       	ldd	r20, Y+2	; 0x02
   142d2:	c9 51       	subi	r28, 0x19	; 25
   142d4:	d1 40       	sbci	r29, 0x01	; 1
   142d6:	98 c0       	rjmp	.+304    	; 0x14408 <Read_Config+0x768>
   142d8:	00 31       	cpi	r16, 0x10	; 16
   142da:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   142dc:	09 f4       	brne	.+2      	; 0x142e0 <Read_Config+0x640>
   142de:	80 cd       	rjmp	.-1280   	; 0x13de0 <Read_Config+0x140>
   142e0:	8c f4       	brge	.+34     	; 0x14304 <Read_Config+0x664>
   142e2:	01 30       	cpi	r16, 0x01	; 1
   142e4:	11 05       	cpc	r17, r1
   142e6:	69 f5       	brne	.+90     	; 0x14342 <Read_Config+0x6a2>
   142e8:	c8 5f       	subi	r28, 0xF8	; 248
   142ea:	de 4f       	sbci	r29, 0xFE	; 254
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
						address =  val.b;
                        Devices[index].ADDRESS = address;
   142ec:	28 81       	ld	r18, Y
   142ee:	c8 50       	subi	r28, 0x08	; 8
   142f0:	d1 40       	sbci	r29, 0x01	; 1
   142f2:	3b e0       	ldi	r19, 0x0B	; 11
   142f4:	23 02       	muls	r18, r19
   142f6:	f0 01       	movw	r30, r0
   142f8:	11 24       	eor	r1, r1
   142fa:	e6 51       	subi	r30, 0x16	; 22
   142fc:	f1 4e       	sbci	r31, 0xE1	; 225
   142fe:	61 83       	std	Z+1, r22	; 0x01
   14300:	d2 01       	movw	r26, r4
   14302:	14 c0       	rjmp	.+40     	; 0x1432c <Read_Config+0x68c>
                        AMIGOp->HEADER.ADDRESS = address;
   14304:	02 31       	cpi	r16, 0x12	; 18
   14306:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   14308:	a9 f0       	breq	.+42     	; 0x14334 <Read_Config+0x694>
   1430a:	0f 31       	cpi	r16, 0x1F	; 31
   1430c:	11 05       	cpc	r17, r1
   1430e:	c9 f4       	brne	.+50     	; 0x14342 <Read_Config+0x6a2>
   14310:	c8 5f       	subi	r28, 0xF8	; 248
   14312:	de 4f       	sbci	r29, 0xFE	; 254
                        Devices[index].ADDRESS = address;
                        AMIGOp->HEADER.ADDRESS = address;
                        break;
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
   14314:	b8 81       	ld	r27, Y
   14316:	c8 50       	subi	r28, 0x08	; 8
   14318:	d1 40       	sbci	r29, 0x01	; 1
   1431a:	2b e0       	ldi	r18, 0x0B	; 11
   1431c:	b2 02       	muls	r27, r18
   1431e:	f0 01       	movw	r30, r0
   14320:	11 24       	eor	r1, r1
   14322:	e6 51       	subi	r30, 0x16	; 22
   14324:	f1 4e       	sbci	r31, 0xE1	; 225
   14326:	62 83       	std	Z+2, r22	; 0x02
   14328:	f2 01       	movw	r30, r4
   1432a:	02 c0       	rjmp	.+4      	; 0x14330 <Read_Config+0x690>
                        AMIGOp->HEADER.PPR = ppr;
   1432c:	6c 93       	st	X, r22
   1432e:	58 cd       	rjmp	.-1360   	; 0x13de0 <Read_Config+0x140>
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
						address =  val.b;
                        Devices[index].ADDRESS = address;
                        AMIGOp->HEADER.ADDRESS = address;
   14330:	61 83       	std	Z+1, r22	; 0x01
                        break;
   14332:	56 cd       	rjmp	.-1364   	; 0x13de0 <Read_Config+0x140>
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
                        AMIGOp->HEADER.PPR = ppr;
   14334:	c4 01       	movw	r24, r8
                        break;
   14336:	0e 94 60 32 	call	0x64c0	; 0x64c0 <stralloc>
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
   1433a:	f2 01       	movw	r30, r4
   1433c:	93 83       	std	Z+3, r25	; 0x03
   1433e:	82 83       	std	Z+2, r24	; 0x02
   14340:	4f cd       	rjmp	.-1378   	; 0x13de0 <Read_Config+0x140>
   14342:	ed b7       	in	r30, 0x3d	; 61
                        break;
   14344:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   14346:	37 82       	std	Z+7, r3	; 0x07
   14348:	26 82       	std	Z+6, r2	; 0x06
   1434a:	b5 82       	std	Z+5, r11	; 0x05
   1434c:	a4 82       	std	Z+4, r10	; 0x04
   1434e:	ca 5e       	subi	r28, 0xEA	; 234
   14350:	de 4f       	sbci	r29, 0xFE	; 254
   14352:	28 81       	ld	r18, Y
   14354:	39 81       	ldd	r19, Y+1	; 0x01
   14356:	4a 81       	ldd	r20, Y+2	; 0x02
   14358:	c6 51       	subi	r28, 0x16	; 22
   1435a:	d1 40       	sbci	r29, 0x01	; 1
   1435c:	55 c0       	rjmp	.+170    	; 0x14408 <Read_Config+0x768>
   1435e:	07 31       	cpi	r16, 0x17	; 23
   14360:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_CONFIG:
                if(tok == TOK_ID )
   14362:	31 f4       	brne	.+12     	; 0x14370 <Read_Config+0x6d0>
   14364:	96 2f       	mov	r25, r22
   14366:	87 2f       	mov	r24, r23
                {
                    AMIGOp->CONFIG.ID = val.w;
   14368:	f2 01       	movw	r30, r4
   1436a:	96 83       	std	Z+6, r25	; 0x06
   1436c:	87 83       	std	Z+7, r24	; 0x07
   1436e:	38 cd       	rjmp	.-1424   	; 0x13de0 <Read_Config+0x140>
   14370:	ed b7       	in	r30, 0x3d	; 61
   14372:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   14374:	37 82       	std	Z+7, r3	; 0x07
   14376:	26 82       	std	Z+6, r2	; 0x06
   14378:	b5 82       	std	Z+5, r11	; 0x05
   1437a:	a4 82       	std	Z+4, r10	; 0x04
   1437c:	cd 5e       	subi	r28, 0xED	; 237
   1437e:	de 4f       	sbci	r29, 0xFE	; 254
   14380:	28 81       	ld	r18, Y
   14382:	39 81       	ldd	r19, Y+1	; 0x01
   14384:	4a 81       	ldd	r20, Y+2	; 0x02
   14386:	c3 51       	subi	r28, 0x13	; 19
   14388:	d1 40       	sbci	r29, 0x01	; 1
   1438a:	3e c0       	rjmp	.+124    	; 0x14408 <Read_Config+0x768>
   1438c:	0d 30       	cpi	r16, 0x0D	; 13
   1438e:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   14390:	e1 f0       	breq	.+56     	; 0x143ca <Read_Config+0x72a>
   14392:	3c f4       	brge	.+14     	; 0x143a2 <Read_Config+0x702>
   14394:	08 30       	cpi	r16, 0x08	; 8
   14396:	11 05       	cpc	r17, r1
   14398:	e1 f4       	brne	.+56     	; 0x143d2 <Read_Config+0x732>
   1439a:	96 2f       	mov	r25, r22
   1439c:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   1439e:	f2 01       	movw	r30, r4
   143a0:	0a c0       	rjmp	.+20     	; 0x143b6 <Read_Config+0x716>
   143a2:	06 31       	cpi	r16, 0x16	; 22
   143a4:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   143a6:	69 f0       	breq	.+26     	; 0x143c2 <Read_Config+0x722>
   143a8:	02 32       	cpi	r16, 0x22	; 34
   143aa:	11 05       	cpc	r17, r1
   143ac:	91 f4       	brne	.+36     	; 0x143d2 <Read_Config+0x732>
   143ae:	96 2f       	mov	r25, r22
   143b0:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
                        break;
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   143b2:	f2 01       	movw	r30, r4
   143b4:	03 c0       	rjmp	.+6      	; 0x143bc <Read_Config+0x71c>
   143b6:	90 87       	std	Z+8, r25	; 0x08
   143b8:	81 87       	std	Z+9, r24	; 0x09

            case AMIGO_GEOMETRY:
                switch(tok)
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   143ba:	12 cd       	rjmp	.-1500   	; 0x13de0 <Read_Config+0x140>
   143bc:	92 87       	std	Z+10, r25	; 0x0a
                        break;
   143be:	83 87       	std	Z+11, r24	; 0x0b
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   143c0:	0f cd       	rjmp	.-1506   	; 0x13de0 <Read_Config+0x140>
   143c2:	f2 01       	movw	r30, r4
                        break;
   143c4:	64 87       	std	Z+12, r22	; 0x0c
                    case TOK_HEADS:
                        AMIGOp->GEOMETRY.HEADS = val.w;
   143c6:	75 87       	std	Z+13, r23	; 0x0d
   143c8:	0b cd       	rjmp	.-1514   	; 0x13de0 <Read_Config+0x140>
   143ca:	f2 01       	movw	r30, r4
                        break;
   143cc:	66 87       	std	Z+14, r22	; 0x0e
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
   143ce:	77 87       	std	Z+15, r23	; 0x0f
   143d0:	07 cd       	rjmp	.-1522   	; 0x13de0 <Read_Config+0x140>
   143d2:	ed b7       	in	r30, 0x3d	; 61
                        break;
   143d4:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   143d6:	37 82       	std	Z+7, r3	; 0x07
   143d8:	26 82       	std	Z+6, r2	; 0x06
   143da:	b5 82       	std	Z+5, r11	; 0x05
   143dc:	a4 82       	std	Z+4, r10	; 0x04
   143de:	c0 5f       	subi	r28, 0xF0	; 240
   143e0:	de 4f       	sbci	r29, 0xFE	; 254
   143e2:	28 81       	ld	r18, Y
   143e4:	39 81       	ldd	r19, Y+1	; 0x01
   143e6:	4a 81       	ldd	r20, Y+2	; 0x02
   143e8:	c0 51       	subi	r28, 0x10	; 16
   143ea:	d1 40       	sbci	r29, 0x01	; 1
   143ec:	0d c0       	rjmp	.+26     	; 0x14408 <Read_Config+0x768>
   143ee:	ed b7       	in	r30, 0x3d	; 61
   143f0:	fe b7       	in	r31, 0x3e	; 62
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   143f2:	37 82       	std	Z+7, r3	; 0x07
   143f4:	26 82       	std	Z+6, r2	; 0x06
   143f6:	b5 82       	std	Z+5, r11	; 0x05
   143f8:	a4 82       	std	Z+4, r10	; 0x04
   143fa:	c3 5f       	subi	r28, 0xF3	; 243
   143fc:	de 4f       	sbci	r29, 0xFE	; 254
   143fe:	28 81       	ld	r18, Y
   14400:	39 81       	ldd	r19, Y+1	; 0x01
   14402:	4a 81       	ldd	r20, Y+2	; 0x02
   14404:	cd 50       	subi	r28, 0x0D	; 13
   14406:	d1 40       	sbci	r29, 0x01	; 1
   14408:	21 83       	std	Z+1, r18	; 0x01
   1440a:	32 83       	std	Z+2, r19	; 0x02
   1440c:	43 83       	std	Z+3, r20	; 0x03
   1440e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   14412:	ff ef       	ldi	r31, 0xFF	; 255
   14414:	cf 1a       	sub	r12, r31
                ++errors;
   14416:	df 0a       	sbc	r13, r31
   14418:	e3 cc       	rjmp	.-1594   	; 0x13de0 <Read_Config+0x140>
   1441a:	61 14       	cp	r6, r1
                break;
   1441c:	71 04       	cpc	r7, r1

        }                                         // switch
    }                                             //while
    if(state != START_STATE)
   1441e:	79 f0       	breq	.+30     	; 0x1443e <Read_Config+0x79e>
   14420:	ed b7       	in	r30, 0x3d	; 61
   14422:	fe b7       	in	r31, 0x3e	; 62
    {
        printf("Missing END statement at line:%d\n", lines);
   14424:	35 82       	std	Z+5, r3	; 0x05
   14426:	24 82       	std	Z+4, r2	; 0x04
   14428:	80 e7       	ldi	r24, 0x70	; 112
   1442a:	9d e1       	ldi	r25, 0x1D	; 29
   1442c:	a0 e0       	ldi	r26, 0x00	; 0
   1442e:	81 83       	std	Z+1, r24	; 0x01
   14430:	92 83       	std	Z+2, r25	; 0x02
   14432:	a3 83       	std	Z+3, r26	; 0x03
   14434:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   14438:	ff ef       	ldi	r31, 0xFF	; 255
   1443a:	cf 1a       	sub	r12, r31
        ++errors;
   1443c:	df 0a       	sbc	r13, r31
   1443e:	ed b7       	in	r30, 0x3d	; 61
   14440:	fe b7       	in	r31, 0x3e	; 62
    }
    printf("Read_Config: read(%d) lines\n", lines);
   14442:	35 82       	std	Z+5, r3	; 0x05
   14444:	24 82       	std	Z+4, r2	; 0x04
   14446:	83 e5       	ldi	r24, 0x53	; 83
   14448:	9d e1       	ldi	r25, 0x1D	; 29
   1444a:	a0 e0       	ldi	r26, 0x00	; 0
   1444c:	81 83       	std	Z+1, r24	; 0x01
   1444e:	92 83       	std	Z+2, r25	; 0x02
   14450:	a3 83       	std	Z+3, r26	; 0x03
   14452:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   14456:	c1 14       	cp	r12, r1
   14458:	d1 04       	cpc	r13, r1
    if(errors)
   1445a:	61 f0       	breq	.+24     	; 0x14474 <Read_Config+0x7d4>
   1445c:	ed b7       	in	r30, 0x3d	; 61
   1445e:	fe b7       	in	r31, 0x3e	; 62
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   14460:	d5 82       	std	Z+5, r13	; 0x05
   14462:	c4 82       	std	Z+4, r12	; 0x04
   14464:	8c e2       	ldi	r24, 0x2C	; 44
   14466:	9d e1       	ldi	r25, 0x1D	; 29
   14468:	a0 e0       	ldi	r26, 0x00	; 0
   1446a:	81 83       	std	Z+1, r24	; 0x01
   1446c:	92 83       	std	Z+2, r25	; 0x02
   1446e:	a3 83       	std	Z+3, r26	; 0x03
   14470:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   14474:	c5 5f       	subi	r28, 0xF5	; 245
   14476:	de 4f       	sbci	r29, 0xFE	; 254

    if(fclose(cfg) == EOF)
   14478:	88 81       	ld	r24, Y
   1447a:	99 81       	ldd	r25, Y+1	; 0x01
   1447c:	cb 50       	subi	r28, 0x0B	; 11
   1447e:	d1 40       	sbci	r29, 0x01	; 1
   14480:	0e 94 73 7d 	call	0xfae6	; 0xfae6 <fclose>
   14484:	01 96       	adiw	r24, 0x01	; 1
   14486:	39 f4       	brne	.+14     	; 0x14496 <Read_Config+0x7f6>
   14488:	89 e3       	ldi	r24, 0x39	; 57
    {
        perror("Read_Config - close error");
   1448a:	9e e0       	ldi	r25, 0x0E	; 14
   1448c:	0e 94 fa 78 	call	0xf1f4	; 0xf1f4 <perror>
   14490:	2f ef       	ldi	r18, 0xFF	; 255
        ++errors;
   14492:	c2 1a       	sub	r12, r18
   14494:	d2 0a       	sbc	r13, r18
   14496:	fb db       	rcall	.-2058   	; 0x13c8e <verify_devices>
    }

// Post process and fixup any devices
    verify_devices();
   14498:	c6 01       	movw	r24, r12
   1449a:	c2 5e       	subi	r28, 0xE2	; 226

    return(errors);
   1449c:	de 4f       	sbci	r29, 0xFE	; 254
}
   1449e:	e2 e1       	ldi	r30, 0x12	; 18
   144a0:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

000144a4 <display_mounts>:
   144a4:	cf 93       	push	r28
   144a6:	00 d0       	rcall	.+0      	; 0x144a8 <display_mounts+0x4>
            printf("PRINTER %-8s %2d\n", " ", (int) PRINTERp->HEADER.ADDRESS);
	}
}

void display_mounts()
{
   144a8:	1f 92       	push	r1
	int8_t i;
	printf("Mounted drives\n");
   144aa:	8f ef       	ldi	r24, 0xFF	; 255
   144ac:	95 e1       	ldi	r25, 0x15	; 21
   144ae:	a0 e0       	ldi	r26, 0x00	; 0
   144b0:	ed b7       	in	r30, 0x3d	; 61
   144b2:	fe b7       	in	r31, 0x3e	; 62
   144b4:	81 83       	std	Z+1, r24	; 0x01
   144b6:	92 83       	std	Z+2, r25	; 0x02
   144b8:	a3 83       	std	Z+3, r26	; 0x03
   144ba:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
	for(i=0;i<MAX_DEVICES;++i)
   144be:	c0 e0       	ldi	r28, 0x00	; 0
		display_mount(i);
   144c0:	8c 2f       	mov	r24, r28
   144c2:	a0 da       	rcall	.-2752   	; 0x13a04 <display_mount>
   144c4:	cf 5f       	subi	r28, 0xFF	; 255

void display_mounts()
{
	int8_t i;
	printf("Mounted drives\n");
	for(i=0;i<MAX_DEVICES;++i)
   144c6:	cc 30       	cpi	r28, 0x0C	; 12
   144c8:	d9 f7       	brne	.-10     	; 0x144c0 <display_mounts+0x1c>
		display_mount(i);
    printf("\n");
   144ca:	8d ef       	ldi	r24, 0xFD	; 253
   144cc:	95 e1       	ldi	r25, 0x15	; 21
   144ce:	a0 e0       	ldi	r26, 0x00	; 0
   144d0:	ed b7       	in	r30, 0x3d	; 61
   144d2:	fe b7       	in	r31, 0x3e	; 62
   144d4:	81 83       	std	Z+1, r24	; 0x01
   144d6:	92 83       	std	Z+2, r25	; 0x02
   144d8:	a3 83       	std	Z+3, r26	; 0x03
   144da:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
}
   144de:	0f 90       	pop	r0
   144e0:	0f 90       	pop	r0
   144e2:	0f 90       	pop	r0
   144e4:	cf 91       	pop	r28
   144e6:	08 95       	ret

000144e8 <mount>:

/// ===============================================
/// @brief mount disks - testing
/// @return Devices[] index on success, -1 on error
int8_t mount(int argc, char *argv[])
{
   144e8:	a5 e0       	ldi	r26, 0x05	; 5
   144ea:	b0 e0       	ldi	r27, 0x00	; 0
   144ec:	ea e7       	ldi	r30, 0x7A	; 122
   144ee:	f2 ea       	ldi	r31, 0xA2	; 162
   144f0:	0c 94 9d e7 	jmp	0x1cf3a	; 0x1cf3a <__prologue_saves__+0x14>
   144f4:	eb 01       	movw	r28, r22
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);

	}
#endif
	if(argc == 1)
   144f6:	81 30       	cpi	r24, 0x01	; 1
   144f8:	91 05       	cpc	r25, r1
   144fa:	11 f4       	brne	.+4      	; 0x14500 <mount+0x18>
	{
		display_mounts();
   144fc:	d3 df       	rcall	.-90     	; 0x144a4 <display_mounts>
   144fe:	c2 c0       	rjmp	.+388    	; 0x14684 <mount+0x19c>
		return(1);
	}
	else if(argc == 3)
   14500:	83 30       	cpi	r24, 0x03	; 3
   14502:	91 05       	cpc	r25, r1
   14504:	61 f5       	brne	.+88     	; 0x1455e <mount+0x76>
	{
			if(MATCHI(argv[1], "PRINTER"))
   14506:	63 e5       	ldi	r22, 0x53	; 83
   14508:	7e e0       	ldi	r23, 0x0E	; 14
   1450a:	8a 81       	ldd	r24, Y+2	; 0x02
   1450c:	9b 81       	ldd	r25, Y+3	; 0x03
   1450e:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   14512:	89 2b       	or	r24, r25
   14514:	09 f4       	brne	.+2      	; 0x14518 <mount+0x30>
   14516:	b6 c0       	rjmp	.+364    	; 0x14684 <mount+0x19c>
			{
				// FIXME - do we want to have separtate address and ppr ?
				int8_t address = atoi(argv[2]) & 0xff;
   14518:	8c 81       	ldd	r24, Y+4	; 0x04
   1451a:	9d 81       	ldd	r25, Y+5	; 0x05
   1451c:	0e 94 0a 48 	call	0x9014	; 0x9014 <atoi>
   14520:	c8 2f       	mov	r28, r24
				index = alloc_device(PRINTER_TYPE);
   14522:	84 e0       	ldi	r24, 0x04	; 4
   14524:	90 e0       	ldi	r25, 0x00	; 0
   14526:	0e 94 57 99 	call	0x132ae	; 0x132ae <alloc_device>
				if(index < 0)
   1452a:	87 ff       	sbrs	r24, 7
   1452c:	0b c0       	rjmp	.+22     	; 0x14544 <mount+0x5c>
				{
					printf("Could not allocate PRINTER structure\n");
   1452e:	81 ef       	ldi	r24, 0xF1	; 241
   14530:	96 e1       	ldi	r25, 0x16	; 22
   14532:	a0 e0       	ldi	r26, 0x00	; 0
   14534:	ed b7       	in	r30, 0x3d	; 61
   14536:	fe b7       	in	r31, 0x3e	; 62
   14538:	81 83       	std	Z+1, r24	; 0x01
   1453a:	92 83       	std	Z+2, r25	; 0x02
   1453c:	a3 83       	std	Z+3, r26	; 0x03
   1453e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   14542:	9e c0       	rjmp	.+316    	; 0x14680 <mount+0x198>
					return(0);
				}
				PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   14544:	9b e0       	ldi	r25, 0x0B	; 11
   14546:	89 02       	muls	r24, r25
   14548:	f0 01       	movw	r30, r0
   1454a:	11 24       	eor	r1, r1
   1454c:	e6 51       	subi	r30, 0x16	; 22
   1454e:	f1 4e       	sbci	r31, 0xE1	; 225
				PRINTERp->HEADER.ADDRESS  = address;
   14550:	a7 81       	ldd	r26, Z+7	; 0x07
   14552:	b0 85       	ldd	r27, Z+8	; 0x08
   14554:	cc 93       	st	X, r28
				Devices[index].ADDRESS = address;
   14556:	c1 83       	std	Z+1, r28	; 0x01
				Devices[index].PPR = 0xff;
   14558:	9f ef       	ldi	r25, 0xFF	; 255
   1455a:	92 83       	std	Z+2, r25	; 0x02
   1455c:	80 c0       	rjmp	.+256    	; 0x1465e <mount+0x176>
				return( verify_device(index) );
			}
	}
	else if(argc == 4)
   1455e:	04 97       	sbiw	r24, 0x04	; 4
   14560:	09 f0       	breq	.+2      	; 0x14564 <mount+0x7c>
   14562:	8d c0       	rjmp	.+282    	; 0x1467e <mount+0x196>
		/*
		argv[1] = 9121
		argv[2] = 2
		argv[3] = amigo2.lif
		*/
		if(!hpdir_find_drive(argv[1],0,0) )
   14564:	40 e0       	ldi	r20, 0x00	; 0
   14566:	50 e0       	ldi	r21, 0x00	; 0
   14568:	60 e0       	ldi	r22, 0x00	; 0
   1456a:	70 e0       	ldi	r23, 0x00	; 0
   1456c:	8a 81       	ldd	r24, Y+2	; 0x02
   1456e:	9b 81       	ldd	r25, Y+3	; 0x03
   14570:	ac d1       	rcall	.+856    	; 0x148ca <hpdir_find_drive>
   14572:	89 2b       	or	r24, r25
   14574:	59 f4       	brne	.+22     	; 0x1458c <mount+0xa4>
		{
			printf("WARNING: model NOT found in hpdir.ini!\n");
   14576:	89 ec       	ldi	r24, 0xC9	; 201
   14578:	96 e1       	ldi	r25, 0x16	; 22
   1457a:	a0 e0       	ldi	r26, 0x00	; 0
   1457c:	ed b7       	in	r30, 0x3d	; 61
   1457e:	fe b7       	in	r31, 0x3e	; 62
   14580:	81 83       	std	Z+1, r24	; 0x01
   14582:	92 83       	std	Z+2, r25	; 0x02
   14584:	a3 83       	std	Z+3, r26	; 0x03
   14586:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1458a:	37 c0       	rjmp	.+110    	; 0x145fa <mount+0x112>
			return(-1);
		}
		if(MATCHI(hpdir.TYPE, "SS80") || MATCHI(hpdir.TYPE,"CS80") )
   1458c:	6b e5       	ldi	r22, 0x5B	; 91
   1458e:	7e e0       	ldi	r23, 0x0E	; 14
   14590:	8e ec       	ldi	r24, 0xCE	; 206
   14592:	9f e1       	ldi	r25, 0x1F	; 31
   14594:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   14598:	89 2b       	or	r24, r25
   1459a:	a9 f0       	breq	.+42     	; 0x145c6 <mount+0xde>
		{
			// FIXME - do we want to have separtate address and ppr ?
			int8_t address = atoi(argv[2]) & 0xff;
   1459c:	8c 81       	ldd	r24, Y+4	; 0x04
   1459e:	9d 81       	ldd	r25, Y+5	; 0x05
   145a0:	0e 94 0a 48 	call	0x9014	; 0x9014 <atoi>
   145a4:	e8 2e       	mov	r14, r24
			int8_t ppr = address;
			index = alloc_device(SS80_TYPE);
   145a6:	83 e0       	ldi	r24, 0x03	; 3
   145a8:	90 e0       	ldi	r25, 0x00	; 0
   145aa:	0e 94 57 99 	call	0x132ae	; 0x132ae <alloc_device>
   145ae:	f8 2e       	mov	r15, r24
			if(index < 0)
   145b0:	87 ff       	sbrs	r24, 7
   145b2:	12 c0       	rjmp	.+36     	; 0x145d8 <mount+0xf0>
			{
				printf("Could not allocate SS80 structure for %s\n",argv[2]);
   145b4:	8c 81       	ldd	r24, Y+4	; 0x04
   145b6:	9d 81       	ldd	r25, Y+5	; 0x05
   145b8:	ed b7       	in	r30, 0x3d	; 61
   145ba:	fe b7       	in	r31, 0x3e	; 62
   145bc:	95 83       	std	Z+5, r25	; 0x05
   145be:	84 83       	std	Z+4, r24	; 0x04
   145c0:	8f e9       	ldi	r24, 0x9F	; 159
   145c2:	96 e1       	ldi	r25, 0x16	; 22
   145c4:	38 c0       	rjmp	.+112    	; 0x14636 <mount+0x14e>
		if(!hpdir_find_drive(argv[1],0,0) )
		{
			printf("WARNING: model NOT found in hpdir.ini!\n");
			return(-1);
		}
		if(MATCHI(hpdir.TYPE, "SS80") || MATCHI(hpdir.TYPE,"CS80") )
   145c6:	60 e6       	ldi	r22, 0x60	; 96
   145c8:	7e e0       	ldi	r23, 0x0E	; 14
   145ca:	8e ec       	ldi	r24, 0xCE	; 206
   145cc:	9f e1       	ldi	r25, 0x1F	; 31
   145ce:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   145d2:	89 2b       	or	r24, r25
   145d4:	19 f7       	brne	.-58     	; 0x1459c <mount+0xb4>
   145d6:	13 c0       	rjmp	.+38     	; 0x145fe <mount+0x116>
			if(index < 0)
			{
				printf("Could not allocate SS80 structure for %s\n",argv[2]);
				return(0);
			}
			SS80p = (SS80DiskType *) Devices[index].dev;
   145d8:	ff 2d       	mov	r31, r15
   145da:	8b e0       	ldi	r24, 0x0B	; 11
   145dc:	f8 02       	muls	r31, r24
   145de:	80 01       	movw	r16, r0
   145e0:	11 24       	eor	r1, r1
   145e2:	06 51       	subi	r16, 0x16	; 22
   145e4:	11 4e       	sbci	r17, 0xE1	; 225
   145e6:	f8 01       	movw	r30, r16
   145e8:	c7 80       	ldd	r12, Z+7	; 0x07
   145ea:	d0 84       	ldd	r13, Z+8	; 0x08
			if( !hpdir_set_parameters(index, argv[1] ) )
   145ec:	6a 81       	ldd	r22, Y+2	; 0x02
   145ee:	7b 81       	ldd	r23, Y+3	; 0x03
   145f0:	8f 2d       	mov	r24, r15
   145f2:	0e 94 e2 9a 	call	0x135c4	; 0x135c4 <hpdir_set_parameters>
   145f6:	81 11       	cpse	r24, r1
   145f8:	25 c0       	rjmp	.+74     	; 0x14644 <mount+0x15c>
				return(-1);
   145fa:	8f ef       	ldi	r24, 0xFF	; 255
   145fc:	44 c0       	rjmp	.+136    	; 0x14686 <mount+0x19e>
			Devices[index].ADDRESS = address;
			Devices[index].PPR = ppr;
			return( verify_device(index) );
		}
#ifdef AMIGO
		else if(MATCH(hpdir.TYPE, "AMIGO"))
   145fe:	65 e6       	ldi	r22, 0x65	; 101
   14600:	7e e0       	ldi	r23, 0x0E	; 14
   14602:	8e ec       	ldi	r24, 0xCE	; 206
   14604:	9f e1       	ldi	r25, 0x1F	; 31
   14606:	0e 94 aa 32 	call	0x6554	; 0x6554 <MATCH>
   1460a:	89 2b       	or	r24, r25
   1460c:	51 f1       	breq	.+84     	; 0x14662 <mount+0x17a>
		{
			// FIXME - do we want to have separtate address and ppr ?
			int8_t address = atoi(argv[2]) & 0xff;
   1460e:	8c 81       	ldd	r24, Y+4	; 0x04
   14610:	9d 81       	ldd	r25, Y+5	; 0x05
   14612:	0e 94 0a 48 	call	0x9014	; 0x9014 <atoi>
   14616:	e8 2e       	mov	r14, r24
			int8_t ppr = address;
			index = alloc_device(AMIGO_TYPE);
   14618:	81 e0       	ldi	r24, 0x01	; 1
   1461a:	90 e0       	ldi	r25, 0x00	; 0
   1461c:	0e 94 57 99 	call	0x132ae	; 0x132ae <alloc_device>
   14620:	f8 2e       	mov	r15, r24
			if(index < 0)
   14622:	87 ff       	sbrs	r24, 7
   14624:	d9 cf       	rjmp	.-78     	; 0x145d8 <mount+0xf0>
			{
				printf("Could not allocate AMIGO structure for %s\n",argv[2]);
   14626:	8c 81       	ldd	r24, Y+4	; 0x04
   14628:	9d 81       	ldd	r25, Y+5	; 0x05
   1462a:	ed b7       	in	r30, 0x3d	; 61
   1462c:	fe b7       	in	r31, 0x3e	; 62
   1462e:	95 83       	std	Z+5, r25	; 0x05
   14630:	84 83       	std	Z+4, r24	; 0x04
   14632:	84 e7       	ldi	r24, 0x74	; 116
   14634:	96 e1       	ldi	r25, 0x16	; 22
   14636:	a0 e0       	ldi	r26, 0x00	; 0
   14638:	81 83       	std	Z+1, r24	; 0x01
   1463a:	92 83       	std	Z+2, r25	; 0x02
   1463c:	a3 83       	std	Z+3, r26	; 0x03
   1463e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   14642:	1e c0       	rjmp	.+60     	; 0x14680 <mount+0x198>
				return(0);
			}
			AMIGOp = (AMIGODiskType *) Devices[index].dev;
			if( !hpdir_set_parameters(index, argv[1] ) )
				return(-1);
			AMIGOp->HEADER.NAME = stralloc(argv[3]);
   14644:	8e 81       	ldd	r24, Y+6	; 0x06
   14646:	9f 81       	ldd	r25, Y+7	; 0x07
   14648:	0e 94 60 32 	call	0x64c0	; 0x64c0 <stralloc>
   1464c:	f6 01       	movw	r30, r12
   1464e:	93 83       	std	Z+3, r25	; 0x03
   14650:	82 83       	std	Z+2, r24	; 0x02
			AMIGOp->HEADER.ADDRESS  = address;
   14652:	e0 82       	st	Z, r14
			AMIGOp->HEADER.PPR = ppr;
   14654:	e1 82       	std	Z+1, r14	; 0x01
			Devices[index].ADDRESS = address;
   14656:	f8 01       	movw	r30, r16
   14658:	e1 82       	std	Z+1, r14	; 0x01
			Devices[index].PPR = ppr;
			return( verify_device(index) );
   1465a:	e2 82       	std	Z+2, r14	; 0x02
   1465c:	8f 2d       	mov	r24, r15
   1465e:	4b da       	rcall	.-2922   	; 0x13af6 <verify_device>
   14660:	12 c0       	rjmp	.+36     	; 0x14686 <mount+0x19e>
		}
#endif
		else
		{
			printf("Expected AMIGO or SS80 or CS80 for [%s]\n",argv[1]);
   14662:	8a 81       	ldd	r24, Y+2	; 0x02
   14664:	9b 81       	ldd	r25, Y+3	; 0x03
   14666:	ed b7       	in	r30, 0x3d	; 61
   14668:	fe b7       	in	r31, 0x3e	; 62
   1466a:	95 83       	std	Z+5, r25	; 0x05
   1466c:	84 83       	std	Z+4, r24	; 0x04
   1466e:	8b e4       	ldi	r24, 0x4B	; 75
   14670:	96 e1       	ldi	r25, 0x16	; 22
   14672:	a0 e0       	ldi	r26, 0x00	; 0
   14674:	81 83       	std	Z+1, r24	; 0x01
   14676:	92 83       	std	Z+2, r25	; 0x02
   14678:	a3 83       	std	Z+3, r26	; 0x03
   1467a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
			return(0);
		}
	}
	else 
	{
		mount_usage();
   1467e:	52 d9       	rcall	.-3420   	; 0x13924 <mount_usage>
		return(0);
   14680:	80 e0       	ldi	r24, 0x00	; 0
   14682:	01 c0       	rjmp	.+2      	; 0x14686 <mount+0x19e>
	}
	return(1);
   14684:	81 e0       	ldi	r24, 0x01	; 1
}
   14686:	cd b7       	in	r28, 0x3d	; 61
   14688:	de b7       	in	r29, 0x3e	; 62
   1468a:	25 96       	adiw	r28, 0x05	; 5
   1468c:	e8 e0       	ldi	r30, 0x08	; 8
   1468e:	0c 94 b9 e7 	jmp	0x1cf72	; 0x1cf72 <__epilogue_restores__+0x14>

00014692 <drives_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int drives_tests(int argc, char * argv[])
{
   14692:	ef 92       	push	r14
   14694:	ff 92       	push	r15
   14696:	0f 93       	push	r16
   14698:	1f 93       	push	r17
   1469a:	cf 93       	push	r28
   1469c:	df 93       	push	r29
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1469e:	fb 01       	movw	r30, r22
   146a0:	00 81       	ld	r16, Z
   146a2:	11 81       	ldd	r17, Z+1	; 0x01

    if(!ptr)
   146a4:	01 15       	cp	r16, r1
   146a6:	11 05       	cpc	r17, r1
   146a8:	19 f4       	brne	.+6      	; 0x146b0 <drives_tests+0x1e>
        return(0);
   146aa:	80 e0       	ldi	r24, 0x00	; 0
   146ac:	90 e0       	ldi	r25, 0x00	; 0
   146ae:	6d c0       	rjmp	.+218    	; 0x1478a <drives_tests+0xf8>
   146b0:	eb 01       	movw	r28, r22
   146b2:	7c 01       	movw	r14, r24

    if (MATCHI(ptr,"drives") && MATCHI(argv[ind], "help"))
   146b4:	6b e6       	ldi	r22, 0x6B	; 107
   146b6:	7e e0       	ldi	r23, 0x0E	; 14
   146b8:	c8 01       	movw	r24, r16
   146ba:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   146be:	89 2b       	or	r24, r25
   146c0:	59 f0       	breq	.+22     	; 0x146d8 <drives_tests+0x46>
   146c2:	62 e6       	ldi	r22, 0x62	; 98
   146c4:	76 e1       	ldi	r23, 0x16	; 22
   146c6:	8a 81       	ldd	r24, Y+2	; 0x02
   146c8:	9b 81       	ldd	r25, Y+3	; 0x03
   146ca:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   146ce:	89 2b       	or	r24, r25
   146d0:	19 f0       	breq	.+6      	; 0x146d8 <drives_tests+0x46>
	{
		drives_help(1);
   146d2:	81 e0       	ldi	r24, 0x01	; 1
   146d4:	12 d9       	rcall	.-3548   	; 0x138fa <drives_help>
   146d6:	57 c0       	rjmp	.+174    	; 0x14786 <drives_tests+0xf4>
		return(1);
	}

    if (MATCHI(ptr,"mount") )
   146d8:	63 e7       	ldi	r22, 0x73	; 115
   146da:	7e e0       	ldi	r23, 0x0E	; 14
   146dc:	c8 01       	movw	r24, r16
   146de:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   146e2:	89 2b       	or	r24, r25
   146e4:	59 f0       	breq	.+22     	; 0x146fc <drives_tests+0x6a>
    {
		if(!mount(argc, argv))
   146e6:	be 01       	movw	r22, r28
   146e8:	c7 01       	movw	r24, r14
   146ea:	fe de       	rcall	.-516    	; 0x144e8 <mount>
   146ec:	81 11       	cpse	r24, r1
   146ee:	03 c0       	rjmp	.+6      	; 0x146f6 <drives_tests+0x64>
			return(-1);
   146f0:	8f ef       	ldi	r24, 0xFF	; 255
   146f2:	9f ef       	ldi	r25, 0xFF	; 255
   146f4:	4a c0       	rjmp	.+148    	; 0x1478a <drives_tests+0xf8>
#ifdef LCD_SUPPORT
    extern void update_drive_counts();
    update_drive_counts();
   146f6:	0e 94 f5 e4 	call	0x1c9ea	; 0x1c9ea <update_drive_counts>
   146fa:	45 c0       	rjmp	.+138    	; 0x14786 <drives_tests+0xf4>
#endif

		return(1);
    }
    if (MATCHI(ptr,"umount") )
   146fc:	62 e7       	ldi	r22, 0x72	; 114
   146fe:	7e e0       	ldi	r23, 0x0E	; 14
   14700:	c8 01       	movw	r24, r16
   14702:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   14706:	89 2b       	or	r24, r25
   14708:	21 f0       	breq	.+8      	; 0x14712 <drives_tests+0x80>
    {
		if(!umount(argc, argv))
   1470a:	be 01       	movw	r22, r28
   1470c:	c7 01       	movw	r24, r14
   1470e:	32 d9       	rcall	.-3484   	; 0x13974 <umount>
   14710:	ed cf       	rjmp	.-38     	; 0x146ec <drives_tests+0x5a>
    update_drive_counts();
#endif
		return(1);
	}

    if (MATCHI(ptr,"addresses") )
   14712:	69 e7       	ldi	r22, 0x79	; 121
   14714:	7e e0       	ldi	r23, 0x0E	; 14
   14716:	c8 01       	movw	r24, r16
   14718:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   1471c:	89 2b       	or	r24, r25
   1471e:	b1 f0       	breq	.+44     	; 0x1474c <drives_tests+0xba>
    {
        ptr = argv[ind];
   14720:	8a 81       	ldd	r24, Y+2	; 0x02
   14722:	9b 81       	ldd	r25, Y+3	; 0x03
        if(ptr && *ptr && MATCH(ptr,"-v"))
   14724:	00 97       	sbiw	r24, 0x00	; 0
   14726:	69 f0       	breq	.+26     	; 0x14742 <drives_tests+0xb0>
   14728:	fc 01       	movw	r30, r24
   1472a:	20 81       	ld	r18, Z
   1472c:	22 23       	and	r18, r18
   1472e:	49 f0       	breq	.+18     	; 0x14742 <drives_tests+0xb0>
   14730:	63 e8       	ldi	r22, 0x83	; 131
   14732:	7e e0       	ldi	r23, 0x0E	; 14
   14734:	0e 94 aa 32 	call	0x6554	; 0x6554 <MATCH>
   14738:	89 2b       	or	r24, r25
   1473a:	19 f0       	breq	.+6      	; 0x14742 <drives_tests+0xb0>
            display_Addresses(1);
   1473c:	81 e0       	ldi	r24, 0x01	; 1
   1473e:	90 e0       	ldi	r25, 0x00	; 0
   14740:	02 c0       	rjmp	.+4      	; 0x14746 <drives_tests+0xb4>
        else
            display_Addresses(0);
   14742:	80 e0       	ldi	r24, 0x00	; 0
   14744:	90 e0       	ldi	r25, 0x00	; 0
   14746:	0e 94 f4 93 	call	0x127e8	; 0x127e8 <display_Addresses>
   1474a:	1d c0       	rjmp	.+58     	; 0x14786 <drives_tests+0xf4>
        return(1);
    }

    if (MATCHI(ptr,"config") )
   1474c:	66 e8       	ldi	r22, 0x86	; 134
   1474e:	7e e0       	ldi	r23, 0x0E	; 14
   14750:	c8 01       	movw	r24, r16
   14752:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   14756:	89 2b       	or	r24, r25
   14758:	09 f4       	brne	.+2      	; 0x1475c <drives_tests+0xca>
   1475a:	a7 cf       	rjmp	.-178    	; 0x146aa <drives_tests+0x18>
    {
        ptr = argv[ind];
   1475c:	8a 81       	ldd	r24, Y+2	; 0x02
   1475e:	9b 81       	ldd	r25, Y+3	; 0x03
        if(ptr && *ptr && MATCH(ptr,"-v"))
   14760:	00 97       	sbiw	r24, 0x00	; 0
   14762:	69 f0       	breq	.+26     	; 0x1477e <drives_tests+0xec>
   14764:	fc 01       	movw	r30, r24
   14766:	20 81       	ld	r18, Z
   14768:	22 23       	and	r18, r18
   1476a:	49 f0       	breq	.+18     	; 0x1477e <drives_tests+0xec>
   1476c:	63 e8       	ldi	r22, 0x83	; 131
   1476e:	7e e0       	ldi	r23, 0x0E	; 14
   14770:	0e 94 aa 32 	call	0x6554	; 0x6554 <MATCH>
   14774:	89 2b       	or	r24, r25
   14776:	19 f0       	breq	.+6      	; 0x1477e <drives_tests+0xec>
            display_Config(1);
   14778:	81 e0       	ldi	r24, 0x01	; 1
   1477a:	90 e0       	ldi	r25, 0x00	; 0
   1477c:	02 c0       	rjmp	.+4      	; 0x14782 <drives_tests+0xf0>
        else
            display_Config(0);
   1477e:	80 e0       	ldi	r24, 0x00	; 0
   14780:	90 e0       	ldi	r25, 0x00	; 0
   14782:	0e 94 c8 94 	call	0x12990	; 0x12990 <display_Config>
        return(1);
   14786:	81 e0       	ldi	r24, 0x01	; 1
   14788:	90 e0       	ldi	r25, 0x00	; 0
    }
	return(0);
}
   1478a:	cd b7       	in	r28, 0x3d	; 61
   1478c:	de b7       	in	r29, 0x3e	; 62
   1478e:	e6 e0       	ldi	r30, 0x06	; 6
   14790:	0c 94 bb e7 	jmp	0x1cf76	; 0x1cf76 <__epilogue_restores__+0x18>

00014794 <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1); // 1
   14794:	8f e1       	ldi	r24, 0x1F	; 31
   14796:	ee e6       	ldi	r30, 0x6E	; 110
   14798:	ff e1       	ldi	r31, 0x1F	; 31
   1479a:	df 01       	movw	r26, r30
   1479c:	98 2f       	mov	r25, r24
   1479e:	1d 92       	st	X+, r1
   147a0:	9a 95       	dec	r25
   147a2:	e9 f7       	brne	.-6      	; 0x1479e <hpdir_init+0xa>
// 2
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);
   147a4:	9f e3       	ldi	r25, 0x3F	; 63
   147a6:	ee e8       	ldi	r30, 0x8E	; 142
   147a8:	ff e1       	ldi	r31, 0x1F	; 31
   147aa:	df 01       	movw	r26, r30
   147ac:	1d 92       	st	X+, r1
   147ae:	9a 95       	dec	r25
   147b0:	e9 f7       	brne	.-6      	; 0x147ac <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);   // 3
   147b2:	ee ec       	ldi	r30, 0xCE	; 206
   147b4:	ff e1       	ldi	r31, 0x1F	; 31
   147b6:	df 01       	movw	r26, r30
   147b8:	1d 92       	st	X+, r1
   147ba:	8a 95       	dec	r24
   147bc:	e9 f7       	brne	.-6      	; 0x147b8 <hpdir_init+0x24>
    hpdir.ID = 0;                                 // 4
   147be:	10 92 ee 1f 	sts	0x1FEE, r1	; 0x801fee <hpdir+0x80>
   147c2:	10 92 ef 1f 	sts	0x1FEF, r1	; 0x801fef <hpdir+0x81>
   147c6:	10 92 f0 1f 	sts	0x1FF0, r1	; 0x801ff0 <hpdir+0x82>
   147ca:	10 92 f1 1f 	sts	0x1FF1, r1	; 0x801ff1 <hpdir+0x83>
    hpdir.mask_stat2 = 0;                         // 5
   147ce:	10 92 f2 1f 	sts	0x1FF2, r1	; 0x801ff2 <hpdir+0x84>
   147d2:	10 92 f3 1f 	sts	0x1FF3, r1	; 0x801ff3 <hpdir+0x85>
   147d6:	10 92 f4 1f 	sts	0x1FF4, r1	; 0x801ff4 <hpdir+0x86>
   147da:	10 92 f5 1f 	sts	0x1FF5, r1	; 0x801ff5 <hpdir+0x87>
    hpdir.id_stat2 = 0;                           // 6
   147de:	10 92 f6 1f 	sts	0x1FF6, r1	; 0x801ff6 <hpdir+0x88>
   147e2:	10 92 f7 1f 	sts	0x1FF7, r1	; 0x801ff7 <hpdir+0x89>
   147e6:	10 92 f8 1f 	sts	0x1FF8, r1	; 0x801ff8 <hpdir+0x8a>
   147ea:	10 92 f9 1f 	sts	0x1FF9, r1	; 0x801ff9 <hpdir+0x8b>
    hpdir.DEVICE_NUMBER = 0;                      // 7
   147ee:	10 92 fa 1f 	sts	0x1FFA, r1	; 0x801ffa <hpdir+0x8c>
   147f2:	10 92 fb 1f 	sts	0x1FFB, r1	; 0x801ffb <hpdir+0x8d>
   147f6:	10 92 fc 1f 	sts	0x1FFC, r1	; 0x801ffc <hpdir+0x8e>
   147fa:	10 92 fd 1f 	sts	0x1FFD, r1	; 0x801ffd <hpdir+0x8f>
    hpdir.UNITS_INSTALLED = 0x8001;               // 8
   147fe:	81 e0       	ldi	r24, 0x01	; 1
   14800:	90 e8       	ldi	r25, 0x80	; 128
   14802:	a0 e0       	ldi	r26, 0x00	; 0
   14804:	b0 e0       	ldi	r27, 0x00	; 0
   14806:	80 93 fe 1f 	sts	0x1FFE, r24	; 0x801ffe <hpdir+0x90>
   1480a:	90 93 ff 1f 	sts	0x1FFF, r25	; 0x801fff <hpdir+0x91>
   1480e:	a0 93 00 20 	sts	0x2000, r26	; 0x802000 <hpdir+0x92>
   14812:	b0 93 01 20 	sts	0x2001, r27	; 0x802001 <hpdir+0x93>
    hpdir.CYLINDERS = 0;                          // 9
   14816:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <hpdir+0x94>
   1481a:	10 92 03 20 	sts	0x2003, r1	; 0x802003 <hpdir+0x95>
   1481e:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <hpdir+0x96>
   14822:	10 92 05 20 	sts	0x2005, r1	; 0x802005 <hpdir+0x97>
    hpdir.HEADS= 0;                               // 10
   14826:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <hpdir+0x98>
   1482a:	10 92 07 20 	sts	0x2007, r1	; 0x802007 <hpdir+0x99>
   1482e:	10 92 08 20 	sts	0x2008, r1	; 0x802008 <hpdir+0x9a>
   14832:	10 92 09 20 	sts	0x2009, r1	; 0x802009 <hpdir+0x9b>
    hpdir.SECTORS= 0;                             // 11
   14836:	10 92 0a 20 	sts	0x200A, r1	; 0x80200a <hpdir+0x9c>
   1483a:	10 92 0b 20 	sts	0x200B, r1	; 0x80200b <hpdir+0x9d>
   1483e:	10 92 0c 20 	sts	0x200C, r1	; 0x80200c <hpdir+0x9e>
   14842:	10 92 0d 20 	sts	0x200D, r1	; 0x80200d <hpdir+0x9f>
    hpdir.BYTES_PER_SECTOR = 0;                   // 12
   14846:	10 92 0e 20 	sts	0x200E, r1	; 0x80200e <hpdir+0xa0>
   1484a:	10 92 0f 20 	sts	0x200F, r1	; 0x80200f <hpdir+0xa1>
   1484e:	10 92 10 20 	sts	0x2010, r1	; 0x802010 <hpdir+0xa2>
   14852:	10 92 11 20 	sts	0x2011, r1	; 0x802011 <hpdir+0xa3>
    hpdir.INTERLEAVE = 0;                         // 13
   14856:	10 92 12 20 	sts	0x2012, r1	; 0x802012 <hpdir+0xa4>
   1485a:	10 92 13 20 	sts	0x2013, r1	; 0x802013 <hpdir+0xa5>
   1485e:	10 92 14 20 	sts	0x2014, r1	; 0x802014 <hpdir+0xa6>
   14862:	10 92 15 20 	sts	0x2015, r1	; 0x802015 <hpdir+0xa7>
    hpdir.FIXED = 1;                              // 14 ALWAYS 1
   14866:	81 e0       	ldi	r24, 0x01	; 1
   14868:	90 e0       	ldi	r25, 0x00	; 0
   1486a:	a0 e0       	ldi	r26, 0x00	; 0
   1486c:	b0 e0       	ldi	r27, 0x00	; 0
   1486e:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <hpdir+0xa8>
   14872:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <hpdir+0xa9>
   14876:	a0 93 18 20 	sts	0x2018, r26	; 0x802018 <hpdir+0xaa>
   1487a:	b0 93 19 20 	sts	0x2019, r27	; 0x802019 <hpdir+0xab>

// Computed values
    hpdir.BLOCKS = 0;
   1487e:	10 92 1a 20 	sts	0x201A, r1	; 0x80201a <hpdir+0xac>
   14882:	10 92 1b 20 	sts	0x201B, r1	; 0x80201b <hpdir+0xad>
   14886:	10 92 1c 20 	sts	0x201C, r1	; 0x80201c <hpdir+0xae>
   1488a:	10 92 1d 20 	sts	0x201D, r1	; 0x80201d <hpdir+0xaf>
   1488e:	08 95       	ret

00014890 <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
   14890:	20 e0       	ldi	r18, 0x00	; 0
   14892:	30 e0       	ldi	r19, 0x00	; 0
    long num = 1;
    while(blocks)
   14894:	61 15       	cp	r22, r1
   14896:	71 05       	cpc	r23, r1
   14898:	81 05       	cpc	r24, r1
   1489a:	91 05       	cpc	r25, r1
   1489c:	39 f0       	breq	.+14     	; 0x148ac <lif_dir_count+0x1c>
    {
        scale++;
   1489e:	2f 5f       	subi	r18, 0xFF	; 255
   148a0:	3f 4f       	sbci	r19, 0xFF	; 255
        blocks >>= 1;
   148a2:	95 95       	asr	r25
   148a4:	87 95       	ror	r24
   148a6:	77 95       	ror	r23
   148a8:	67 95       	ror	r22
   148aa:	f4 cf       	rjmp	.-24     	; 0x14894 <lif_dir_count+0x4>
    }
    scale>>=1;
   148ac:	35 95       	asr	r19
   148ae:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
    long num = 1;
   148b0:	61 e0       	ldi	r22, 0x01	; 1
   148b2:	70 e0       	ldi	r23, 0x00	; 0
   148b4:	80 e0       	ldi	r24, 0x00	; 0
   148b6:	90 e0       	ldi	r25, 0x00	; 0
    {
        scale++;
        blocks >>= 1;
    }
    scale>>=1;
    while(scale--)
   148b8:	21 50       	subi	r18, 0x01	; 1
   148ba:	31 09       	sbc	r19, r1
   148bc:	28 f0       	brcs	.+10     	; 0x148c8 <lif_dir_count+0x38>
        num <<=1;
   148be:	66 0f       	add	r22, r22
   148c0:	77 1f       	adc	r23, r23
   148c2:	88 1f       	adc	r24, r24
   148c4:	99 1f       	adc	r25, r25
   148c6:	f8 cf       	rjmp	.-16     	; 0x148b8 <lif_dir_count+0x28>
    return(num);
}
   148c8:	08 95       	ret

000148ca <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   148ca:	2f 92       	push	r2
   148cc:	3f 92       	push	r3
   148ce:	4f 92       	push	r4
   148d0:	5f 92       	push	r5
   148d2:	6f 92       	push	r6
   148d4:	8f 92       	push	r8
   148d6:	9f 92       	push	r9
   148d8:	af 92       	push	r10
   148da:	bf 92       	push	r11
   148dc:	cf 92       	push	r12
   148de:	df 92       	push	r13
   148e0:	ef 92       	push	r14
   148e2:	ff 92       	push	r15
   148e4:	0f 93       	push	r16
   148e6:	1f 93       	push	r17
   148e8:	cf 93       	push	r28
   148ea:	df 93       	push	r29
   148ec:	cd b7       	in	r28, 0x3d	; 61
   148ee:	de b7       	in	r29, 0x3e	; 62
   148f0:	c9 58       	subi	r28, 0x89	; 137
   148f2:	d1 40       	sbci	r29, 0x01	; 1
   148f4:	0f b6       	in	r0, 0x3f	; 63
   148f6:	f8 94       	cli
   148f8:	de bf       	out	0x3e, r29	; 62
   148fa:	0f be       	out	0x3f, r0	; 63
   148fc:	cd bf       	out	0x3d, r28	; 61
   148fe:	6c 01       	movw	r12, r24
   14900:	c8 57       	subi	r28, 0x78	; 120
   14902:	de 4f       	sbci	r29, 0xFE	; 254
   14904:	79 83       	std	Y+1, r23	; 0x01
   14906:	68 83       	st	Y, r22
   14908:	c8 58       	subi	r28, 0x88	; 136
   1490a:	d1 40       	sbci	r29, 0x01	; 1
   1490c:	5a 01       	movw	r10, r20
    FILE *cfg;
    char *ptr;
    char str[256];
    char token[128];

    hpdir_init();
   1490e:	42 df       	rcall	.-380    	; 0x14794 <hpdir_init>

    cfg = fopen("hpdir.ini","rb");
   14910:	6c ee       	ldi	r22, 0xEC	; 236
   14912:	78 e0       	ldi	r23, 0x08	; 8
   14914:	8c e4       	ldi	r24, 0x4C	; 76
   14916:	90 e1       	ldi	r25, 0x10	; 16
   14918:	0e 94 c9 7e 	call	0xfd92	; 0xfd92 <fopen>
   1491c:	7c 01       	movw	r14, r24

#ifndef LIF_STAND_ALONE
    if(cfg == NULL)
   1491e:	89 2b       	or	r24, r25
   14920:	49 f4       	brne	.+18     	; 0x14934 <hpdir_find_drive+0x6a>
        cfg = fopen("/hpdir.ini","rb");
   14922:	6c ee       	ldi	r22, 0xEC	; 236
   14924:	78 e0       	ldi	r23, 0x08	; 8
   14926:	8b e4       	ldi	r24, 0x4B	; 75
   14928:	90 e1       	ldi	r25, 0x10	; 16
   1492a:	0e 94 c9 7e 	call	0xfd92	; 0xfd92 <fopen>
   1492e:	7c 01       	movw	r14, r24
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

    if(cfg == NULL)
   14930:	89 2b       	or	r24, r25
   14932:	51 f0       	breq	.+20     	; 0x14948 <hpdir_find_drive+0x7e>
// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
            driveinfo = 1;
   14934:	21 2c       	mov	r2, r1
   14936:	31 2c       	mov	r3, r1

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14938:	8e 01       	movw	r16, r28
   1493a:	08 5f       	subi	r16, 0xF8	; 248
   1493c:	1e 4f       	sbci	r17, 0xFE	; 254
        if( driveinfo != 1)
            continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   1493e:	85 eb       	ldi	r24, 0xB5	; 181
   14940:	90 e2       	ldi	r25, 0x20	; 32
   14942:	2c 01       	movw	r4, r24
   14944:	61 2c       	mov	r6, r1
   14946:	1e c0       	rjmp	.+60     	; 0x14984 <hpdir_find_drive+0xba>
    }
#endif

    if(cfg == NULL)
    {
        if(verbose)
   14948:	ab 28       	or	r10, r11
   1494a:	09 f4       	brne	.+2      	; 0x1494e <hpdir_find_drive+0x84>
   1494c:	79 c1       	rjmp	.+754    	; 0x14c40 <hpdir_find_drive+0x376>
            printf("Error: hpdir.ini not found!\n");
   1494e:	8c eb       	ldi	r24, 0xBC	; 188
   14950:	90 e2       	ldi	r25, 0x20	; 32
   14952:	a0 e0       	ldi	r26, 0x00	; 0
   14954:	ed b7       	in	r30, 0x3d	; 61
   14956:	fe b7       	in	r31, 0x3e	; 62
   14958:	81 83       	std	Z+1, r24	; 0x01
   1495a:	92 83       	std	Z+2, r25	; 0x02
   1495c:	a3 83       	std	Z+3, r26	; 0x03
   1495e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   14962:	6e c1       	rjmp	.+732    	; 0x14c40 <hpdir_find_drive+0x376>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        errors = 0;
        ptr = str;

        trim_tail(ptr);
   14964:	ce 01       	movw	r24, r28
   14966:	08 96       	adiw	r24, 0x08	; 8
   14968:	0e 94 90 32 	call	0x6520	; 0x6520 <trim_tail>
        ptr = skipspaces(ptr);
   1496c:	ce 01       	movw	r24, r28
   1496e:	08 96       	adiw	r24, 0x08	; 8
   14970:	0e 94 a0 32 	call	0x6540	; 0x6540 <skipspaces>

        len = strlen(ptr);
   14974:	fc 01       	movw	r30, r24
   14976:	01 90       	ld	r0, Z+
   14978:	00 20       	and	r0, r0
   1497a:	e9 f7       	brne	.-6      	; 0x14976 <hpdir_find_drive+0xac>
   1497c:	31 97       	sbiw	r30, 0x01	; 1
        if(!len)
   1497e:	8e 17       	cp	r24, r30
   14980:	9f 07       	cpc	r25, r31
   14982:	51 f4       	brne	.+20     	; 0x14998 <hpdir_find_drive+0xce>
        return(0);
    }

// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   14984:	a7 01       	movw	r20, r14
   14986:	6e ef       	ldi	r22, 0xFE	; 254
   14988:	70 e0       	ldi	r23, 0x00	; 0
   1498a:	ce 01       	movw	r24, r28
   1498c:	08 96       	adiw	r24, 0x08	; 8
   1498e:	0e 94 e1 76 	call	0xedc2	; 0xedc2 <fgets>
   14992:	89 2b       	or	r24, r25
   14994:	39 f7       	brne	.-50     	; 0x14964 <hpdir_find_drive+0x9a>
   14996:	0c c0       	rjmp	.+24     	; 0x149b0 <hpdir_find_drive+0xe6>
        len = strlen(ptr);
        if(!len)
            continue;

// Skip comments
        if(*ptr == ';' || *ptr == '#' )
   14998:	fc 01       	movw	r30, r24
   1499a:	20 81       	ld	r18, Z
   1499c:	2b 33       	cpi	r18, 0x3B	; 59
   1499e:	91 f3       	breq	.-28     	; 0x14984 <hpdir_find_drive+0xba>
   149a0:	23 32       	cpi	r18, 0x23	; 35
   149a2:	81 f3       	breq	.-32     	; 0x14984 <hpdir_find_drive+0xba>
            continue;

        if(*ptr == '[' && driveinfo == 1 )
   149a4:	2b 35       	cpi	r18, 0x5B	; 91
   149a6:	39 f4       	brne	.+14     	; 0x149b6 <hpdir_find_drive+0xec>
   149a8:	f1 e0       	ldi	r31, 0x01	; 1
   149aa:	2f 16       	cp	r2, r31
   149ac:	31 04       	cpc	r3, r1
   149ae:	19 f4       	brne	.+6      	; 0x149b6 <hpdir_find_drive+0xec>
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   149b0:	00 e0       	ldi	r16, 0x00	; 0
   149b2:	10 e0       	ldi	r17, 0x00	; 0
   149b4:	32 c1       	rjmp	.+612    	; 0x14c1a <hpdir_find_drive+0x350>

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   149b6:	4e e7       	ldi	r20, 0x7E	; 126
   149b8:	50 e0       	ldi	r21, 0x00	; 0
   149ba:	b8 01       	movw	r22, r16
   149bc:	0e 94 72 33 	call	0x66e4	; 0x66e4 <get_token>
   149c0:	4c 01       	movw	r8, r24

        if(MATCHI(token,"[driveinfo]"))
   149c2:	66 e5       	ldi	r22, 0x56	; 86
   149c4:	70 e1       	ldi	r23, 0x10	; 16
   149c6:	c8 01       	movw	r24, r16
   149c8:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   149cc:	89 2b       	or	r24, r25
   149ce:	21 f0       	breq	.+8      	; 0x149d8 <hpdir_find_drive+0x10e>
        {
            driveinfo = 1;
   149d0:	22 24       	eor	r2, r2
   149d2:	23 94       	inc	r2
   149d4:	31 2c       	mov	r3, r1
   149d6:	d6 cf       	rjmp	.-84     	; 0x14984 <hpdir_find_drive+0xba>
            continue;
        }

        if( driveinfo != 1)
   149d8:	21 e0       	ldi	r18, 0x01	; 1
   149da:	22 16       	cp	r2, r18
   149dc:	31 04       	cpc	r3, r1
   149de:	91 f6       	brne	.-92     	; 0x14984 <hpdir_find_drive+0xba>
            continue;

        if(list)
   149e0:	c8 57       	subi	r28, 0x78	; 120
   149e2:	de 4f       	sbci	r29, 0xFE	; 254
   149e4:	88 81       	ld	r24, Y
   149e6:	99 81       	ldd	r25, Y+1	; 0x01
   149e8:	c8 58       	subi	r28, 0x88	; 136
   149ea:	d1 40       	sbci	r29, 0x01	; 1
   149ec:	89 2b       	or	r24, r25
   149ee:	61 f0       	breq	.+24     	; 0x14a08 <hpdir_find_drive+0x13e>
        {
            printf("%s %s\n", token, ptr);
   149f0:	ed b7       	in	r30, 0x3d	; 61
   149f2:	fe b7       	in	r31, 0x3e	; 62
   149f4:	97 82       	std	Z+7, r9	; 0x07
   149f6:	86 82       	std	Z+6, r8	; 0x06
   149f8:	15 83       	std	Z+5, r17	; 0x05
   149fa:	04 83       	std	Z+4, r16	; 0x04
   149fc:	41 82       	std	Z+1, r4	; 0x01
   149fe:	52 82       	std	Z+2, r5	; 0x02
   14a00:	63 82       	std	Z+3, r6	; 0x03
   14a02:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            continue;
   14a06:	be cf       	rjmp	.-132    	; 0x14984 <hpdir_find_drive+0xba>
        }

        if ( ! MATCHI(model,token) )
   14a08:	b8 01       	movw	r22, r16
   14a0a:	c6 01       	movw	r24, r12
   14a0c:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   14a10:	89 2b       	or	r24, r25
            continue;

        hpdir_init();
   14a12:	f1 f2       	breq	.-68     	; 0x149d0 <hpdir_find_drive+0x106>
   14a14:	bf de       	rcall	.-642    	; 0x14794 <hpdir_init>

        if(verbose)
   14a16:	a1 14       	cp	r10, r1
   14a18:	b1 04       	cpc	r11, r1
   14a1a:	61 f0       	breq	.+24     	; 0x14a34 <hpdir_find_drive+0x16a>
            printf("Model: %s found in hpdir.ini\n", model);
   14a1c:	ed b7       	in	r30, 0x3d	; 61
   14a1e:	fe b7       	in	r31, 0x3e	; 62
   14a20:	d5 82       	std	Z+5, r13	; 0x05
   14a22:	c4 82       	std	Z+4, r12	; 0x04
   14a24:	87 e9       	ldi	r24, 0x97	; 151
   14a26:	90 e2       	ldi	r25, 0x20	; 32
   14a28:	a0 e0       	ldi	r26, 0x00	; 0
   14a2a:	81 83       	std	Z+1, r24	; 0x01
   14a2c:	92 83       	std	Z+2, r25	; 0x02
   14a2e:	a3 83       	std	Z+3, r26	; 0x03
   14a30:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

// 1 Model
        strncpy(hpdir.model,token,sizeof(hpdir.model)-2);
   14a34:	4e e1       	ldi	r20, 0x1E	; 30
   14a36:	50 e0       	ldi	r21, 0x00	; 0
   14a38:	b8 01       	movw	r22, r16
   14a3a:	8e e6       	ldi	r24, 0x6E	; 110
   14a3c:	9f e1       	ldi	r25, 0x1F	; 31
   14a3e:	0e 94 bd 31 	call	0x637a	; 0x637a <strncpy>

// =
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14a42:	4e e7       	ldi	r20, 0x7E	; 126
   14a44:	50 e0       	ldi	r21, 0x00	; 0
   14a46:	b8 01       	movw	r22, r16
   14a48:	c4 01       	movw	r24, r8
   14a4a:	0e 94 72 33 	call	0x66e4	; 0x66e4 <get_token>

// 2 Comment
        ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);
   14a4e:	4e e3       	ldi	r20, 0x3E	; 62
   14a50:	50 e0       	ldi	r21, 0x00	; 0
   14a52:	6e e8       	ldi	r22, 0x8E	; 142
   14a54:	7f e1       	ldi	r23, 0x1F	; 31
   14a56:	0e 94 72 33 	call	0x66e4	; 0x66e4 <get_token>

// 3 AMIGO/SS80/CS80
        ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);
   14a5a:	4e e1       	ldi	r20, 0x1E	; 30
   14a5c:	50 e0       	ldi	r21, 0x00	; 0
   14a5e:	6e ec       	ldi	r22, 0xCE	; 206
   14a60:	7f e1       	ldi	r23, 0x1F	; 31
   14a62:	0e 94 72 33 	call	0x66e4	; 0x66e4 <get_token>

// 4 Identify ID
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a66:	4e e7       	ldi	r20, 0x7E	; 126
   14a68:	50 e0       	ldi	r21, 0x00	; 0
   14a6a:	b8 01       	movw	r22, r16
   14a6c:	0e 94 72 33 	call	0x66e4	; 0x66e4 <get_token>
   14a70:	4c 01       	movw	r8, r24
        hpdir.ID = get_value(token);
   14a72:	c8 01       	movw	r24, r16
   14a74:	0e 94 b5 33 	call	0x676a	; 0x676a <get_value>
   14a78:	60 93 ee 1f 	sts	0x1FEE, r22	; 0x801fee <hpdir+0x80>
   14a7c:	70 93 ef 1f 	sts	0x1FEF, r23	; 0x801fef <hpdir+0x81>
   14a80:	80 93 f0 1f 	sts	0x1FF0, r24	; 0x801ff0 <hpdir+0x82>
   14a84:	90 93 f1 1f 	sts	0x1FF1, r25	; 0x801ff1 <hpdir+0x83>

// 5 MASK STAT 2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14a88:	4e e7       	ldi	r20, 0x7E	; 126
   14a8a:	50 e0       	ldi	r21, 0x00	; 0
   14a8c:	b8 01       	movw	r22, r16
   14a8e:	c4 01       	movw	r24, r8
   14a90:	0e 94 72 33 	call	0x66e4	; 0x66e4 <get_token>
   14a94:	4c 01       	movw	r8, r24
        hpdir.mask_stat2 = get_value(token);
   14a96:	c8 01       	movw	r24, r16
   14a98:	0e 94 b5 33 	call	0x676a	; 0x676a <get_value>
   14a9c:	60 93 f2 1f 	sts	0x1FF2, r22	; 0x801ff2 <hpdir+0x84>
   14aa0:	70 93 f3 1f 	sts	0x1FF3, r23	; 0x801ff3 <hpdir+0x85>
   14aa4:	80 93 f4 1f 	sts	0x1FF4, r24	; 0x801ff4 <hpdir+0x86>
   14aa8:	90 93 f5 1f 	sts	0x1FF5, r25	; 0x801ff5 <hpdir+0x87>

// 6 STAT2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14aac:	4e e7       	ldi	r20, 0x7E	; 126
   14aae:	50 e0       	ldi	r21, 0x00	; 0
   14ab0:	b8 01       	movw	r22, r16
   14ab2:	c4 01       	movw	r24, r8
   14ab4:	0e 94 72 33 	call	0x66e4	; 0x66e4 <get_token>
   14ab8:	4c 01       	movw	r8, r24
        hpdir.id_stat2 = get_value(token);
   14aba:	c8 01       	movw	r24, r16
   14abc:	0e 94 b5 33 	call	0x676a	; 0x676a <get_value>
   14ac0:	60 93 f6 1f 	sts	0x1FF6, r22	; 0x801ff6 <hpdir+0x88>
   14ac4:	70 93 f7 1f 	sts	0x1FF7, r23	; 0x801ff7 <hpdir+0x89>
   14ac8:	80 93 f8 1f 	sts	0x1FF8, r24	; 0x801ff8 <hpdir+0x8a>
   14acc:	90 93 f9 1f 	sts	0x1FF9, r25	; 0x801ff9 <hpdir+0x8b>

// 7 BCD include model number
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14ad0:	4e e7       	ldi	r20, 0x7E	; 126
   14ad2:	50 e0       	ldi	r21, 0x00	; 0
   14ad4:	b8 01       	movw	r22, r16
   14ad6:	c4 01       	movw	r24, r8
   14ad8:	0e 94 72 33 	call	0x66e4	; 0x66e4 <get_token>
   14adc:	4c 01       	movw	r8, r24
        hpdir.DEVICE_NUMBER = get_value(token);
   14ade:	c8 01       	movw	r24, r16
   14ae0:	0e 94 b5 33 	call	0x676a	; 0x676a <get_value>
   14ae4:	60 93 fa 1f 	sts	0x1FFA, r22	; 0x801ffa <hpdir+0x8c>
   14ae8:	70 93 fb 1f 	sts	0x1FFB, r23	; 0x801ffb <hpdir+0x8d>
   14aec:	80 93 fc 1f 	sts	0x1FFC, r24	; 0x801ffc <hpdir+0x8e>
   14af0:	90 93 fd 1f 	sts	0x1FFD, r25	; 0x801ffd <hpdir+0x8f>

// 8 Units installed
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14af4:	4e e7       	ldi	r20, 0x7E	; 126
   14af6:	50 e0       	ldi	r21, 0x00	; 0
   14af8:	b8 01       	movw	r22, r16
   14afa:	c4 01       	movw	r24, r8
   14afc:	0e 94 72 33 	call	0x66e4	; 0x66e4 <get_token>
   14b00:	4c 01       	movw	r8, r24
        hpdir.UNITS_INSTALLED = get_value(token);
   14b02:	c8 01       	movw	r24, r16
   14b04:	0e 94 b5 33 	call	0x676a	; 0x676a <get_value>
   14b08:	60 93 fe 1f 	sts	0x1FFE, r22	; 0x801ffe <hpdir+0x90>
   14b0c:	70 93 ff 1f 	sts	0x1FFF, r23	; 0x801fff <hpdir+0x91>
   14b10:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <hpdir+0x92>
   14b14:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <hpdir+0x93>

// 9 Cylinders
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14b18:	4e e7       	ldi	r20, 0x7E	; 126
   14b1a:	50 e0       	ldi	r21, 0x00	; 0
   14b1c:	b8 01       	movw	r22, r16
   14b1e:	c4 01       	movw	r24, r8
   14b20:	0e 94 72 33 	call	0x66e4	; 0x66e4 <get_token>
   14b24:	4c 01       	movw	r8, r24
        hpdir.CYLINDERS = get_value(token);
   14b26:	c8 01       	movw	r24, r16
   14b28:	0e 94 b5 33 	call	0x676a	; 0x676a <get_value>
   14b2c:	60 93 02 20 	sts	0x2002, r22	; 0x802002 <hpdir+0x94>
   14b30:	70 93 03 20 	sts	0x2003, r23	; 0x802003 <hpdir+0x95>
   14b34:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <hpdir+0x96>
   14b38:	90 93 05 20 	sts	0x2005, r25	; 0x802005 <hpdir+0x97>

// 10 Heads
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14b3c:	4e e7       	ldi	r20, 0x7E	; 126
   14b3e:	50 e0       	ldi	r21, 0x00	; 0
   14b40:	b8 01       	movw	r22, r16
   14b42:	c4 01       	movw	r24, r8
   14b44:	0e 94 72 33 	call	0x66e4	; 0x66e4 <get_token>
   14b48:	4c 01       	movw	r8, r24
        hpdir.HEADS = get_value(token);
   14b4a:	c8 01       	movw	r24, r16
   14b4c:	0e 94 b5 33 	call	0x676a	; 0x676a <get_value>
   14b50:	60 93 06 20 	sts	0x2006, r22	; 0x802006 <hpdir+0x98>
   14b54:	70 93 07 20 	sts	0x2007, r23	; 0x802007 <hpdir+0x99>
   14b58:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <hpdir+0x9a>
   14b5c:	90 93 09 20 	sts	0x2009, r25	; 0x802009 <hpdir+0x9b>

// 11 Sectors
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14b60:	4e e7       	ldi	r20, 0x7E	; 126
   14b62:	50 e0       	ldi	r21, 0x00	; 0
   14b64:	b8 01       	movw	r22, r16
   14b66:	c4 01       	movw	r24, r8
   14b68:	0e 94 72 33 	call	0x66e4	; 0x66e4 <get_token>
   14b6c:	4c 01       	movw	r8, r24
        hpdir.SECTORS = get_value(token);
   14b6e:	c8 01       	movw	r24, r16
   14b70:	0e 94 b5 33 	call	0x676a	; 0x676a <get_value>
   14b74:	60 93 0a 20 	sts	0x200A, r22	; 0x80200a <hpdir+0x9c>
   14b78:	70 93 0b 20 	sts	0x200B, r23	; 0x80200b <hpdir+0x9d>
   14b7c:	80 93 0c 20 	sts	0x200C, r24	; 0x80200c <hpdir+0x9e>
   14b80:	90 93 0d 20 	sts	0x200D, r25	; 0x80200d <hpdir+0x9f>

// 12 Bytes Per Block/Sector
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14b84:	4e e7       	ldi	r20, 0x7E	; 126
   14b86:	50 e0       	ldi	r21, 0x00	; 0
   14b88:	b8 01       	movw	r22, r16
   14b8a:	c4 01       	movw	r24, r8
   14b8c:	0e 94 72 33 	call	0x66e4	; 0x66e4 <get_token>
   14b90:	4c 01       	movw	r8, r24
        hpdir.BYTES_PER_SECTOR = get_value(token);
   14b92:	c8 01       	movw	r24, r16
   14b94:	0e 94 b5 33 	call	0x676a	; 0x676a <get_value>
   14b98:	60 93 0e 20 	sts	0x200E, r22	; 0x80200e <hpdir+0xa0>
   14b9c:	70 93 0f 20 	sts	0x200F, r23	; 0x80200f <hpdir+0xa1>
   14ba0:	80 93 10 20 	sts	0x2010, r24	; 0x802010 <hpdir+0xa2>
   14ba4:	90 93 11 20 	sts	0x2011, r25	; 0x802011 <hpdir+0xa3>

// 13 Interleave
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14ba8:	4e e7       	ldi	r20, 0x7E	; 126
   14baa:	50 e0       	ldi	r21, 0x00	; 0
   14bac:	b8 01       	movw	r22, r16
   14bae:	c4 01       	movw	r24, r8
   14bb0:	0e 94 72 33 	call	0x66e4	; 0x66e4 <get_token>
        hpdir.INTERLEAVE = get_value(token);
   14bb4:	c8 01       	movw	r24, r16
   14bb6:	0e 94 b5 33 	call	0x676a	; 0x676a <get_value>
   14bba:	60 93 12 20 	sts	0x2012, r22	; 0x802012 <hpdir+0xa4>
   14bbe:	70 93 13 20 	sts	0x2013, r23	; 0x802013 <hpdir+0xa5>
   14bc2:	80 93 14 20 	sts	0x2014, r24	; 0x802014 <hpdir+0xa6>
   14bc6:	90 93 15 20 	sts	0x2015, r25	; 0x802015 <hpdir+0xa7>

// Computed values
        hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   14bca:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <hpdir+0x94>
   14bce:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <hpdir+0x95>
   14bd2:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <hpdir+0x96>
   14bd6:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <hpdir+0x97>
   14bda:	60 91 06 20 	lds	r22, 0x2006	; 0x802006 <hpdir+0x98>
   14bde:	70 91 07 20 	lds	r23, 0x2007	; 0x802007 <hpdir+0x99>
   14be2:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <hpdir+0x9a>
   14be6:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <hpdir+0x9b>
   14bea:	0e 94 e4 e6 	call	0x1cdc8	; 0x1cdc8 <__mulsi3>
   14bee:	9b 01       	movw	r18, r22
   14bf0:	ac 01       	movw	r20, r24
   14bf2:	60 91 0a 20 	lds	r22, 0x200A	; 0x80200a <hpdir+0x9c>
   14bf6:	70 91 0b 20 	lds	r23, 0x200B	; 0x80200b <hpdir+0x9d>
   14bfa:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <hpdir+0x9e>
   14bfe:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <hpdir+0x9f>
   14c02:	0e 94 e4 e6 	call	0x1cdc8	; 0x1cdc8 <__mulsi3>
   14c06:	60 93 1a 20 	sts	0x201A, r22	; 0x80201a <hpdir+0xac>
   14c0a:	70 93 1b 20 	sts	0x201B, r23	; 0x80201b <hpdir+0xad>
   14c0e:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <hpdir+0xae>
   14c12:	90 93 1d 20 	sts	0x201D, r25	; 0x80201d <hpdir+0xaf>
        {
            if(verbose)
                printf("Error /hpdir.ini parsing\n");
            break;
        }
        found = 1;
   14c16:	01 e0       	ldi	r16, 0x01	; 1
   14c18:	10 e0       	ldi	r17, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
   14c1a:	c7 01       	movw	r24, r14
   14c1c:	0e 94 73 7d 	call	0xfae6	; 0xfae6 <fclose>
	if(verbose && !found)
   14c20:	ab 28       	or	r10, r11
   14c22:	81 f0       	breq	.+32     	; 0x14c44 <hpdir_find_drive+0x37a>
   14c24:	01 2b       	or	r16, r17
   14c26:	81 f4       	brne	.+32     	; 0x14c48 <hpdir_find_drive+0x37e>
		printf("Model: %s NOT found in hpdir.ini\n", model);
   14c28:	ed b7       	in	r30, 0x3d	; 61
   14c2a:	fe b7       	in	r31, 0x3e	; 62
   14c2c:	d5 82       	std	Z+5, r13	; 0x05
   14c2e:	c4 82       	std	Z+4, r12	; 0x04
   14c30:	85 e7       	ldi	r24, 0x75	; 117
   14c32:	90 e2       	ldi	r25, 0x20	; 32
   14c34:	a0 e0       	ldi	r26, 0x00	; 0
   14c36:	81 83       	std	Z+1, r24	; 0x01
   14c38:	92 83       	std	Z+2, r25	; 0x02
   14c3a:	a3 83       	std	Z+3, r26	; 0x03
   14c3c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

    if(cfg == NULL)
    {
        if(verbose)
            printf("Error: hpdir.ini not found!\n");
        return(0);
   14c40:	80 e0       	ldi	r24, 0x00	; 0
   14c42:	03 c0       	rjmp	.+6      	; 0x14c4a <hpdir_find_drive+0x380>
   14c44:	c8 01       	movw	r24, r16
   14c46:	02 c0       	rjmp	.+4      	; 0x14c4c <hpdir_find_drive+0x382>
   14c48:	81 e0       	ldi	r24, 0x01	; 1
   14c4a:	90 e0       	ldi	r25, 0x00	; 0
    }                                             // while
    fclose(cfg);
	if(verbose && !found)
		printf("Model: %s NOT found in hpdir.ini\n", model);
    return(found);
}
   14c4c:	c7 57       	subi	r28, 0x77	; 119
   14c4e:	de 4f       	sbci	r29, 0xFE	; 254
   14c50:	0f b6       	in	r0, 0x3f	; 63
   14c52:	f8 94       	cli
   14c54:	de bf       	out	0x3e, r29	; 62
   14c56:	0f be       	out	0x3f, r0	; 63
   14c58:	cd bf       	out	0x3d, r28	; 61
   14c5a:	df 91       	pop	r29
   14c5c:	cf 91       	pop	r28
   14c5e:	1f 91       	pop	r17
   14c60:	0f 91       	pop	r16
   14c62:	ff 90       	pop	r15
   14c64:	ef 90       	pop	r14
   14c66:	df 90       	pop	r13
   14c68:	cf 90       	pop	r12
   14c6a:	bf 90       	pop	r11
   14c6c:	af 90       	pop	r10
   14c6e:	9f 90       	pop	r9
   14c70:	8f 90       	pop	r8
   14c72:	6f 90       	pop	r6
   14c74:	5f 90       	pop	r5
   14c76:	4f 90       	pop	r4
   14c78:	3f 90       	pop	r3
   14c7a:	2f 90       	pop	r2
   14c7c:	08 95       	ret

00014c7e <SS80ControllerPack>:
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
        printf("[SS80 Increment to (%lXH)]\n",
            (long) SS80_Blocks_to_Bytes(SS80s->AddressBlocks));
#endif
    return(0);
}
   14c7e:	0f 93       	push	r16
   14c80:	1f 93       	push	r17
   14c82:	25 e0       	ldi	r18, 0x05	; 5
   14c84:	30 e0       	ldi	r19, 0x00	; 0
   14c86:	fc 01       	movw	r30, r24
   14c88:	31 83       	std	Z+1, r19	; 0x01
   14c8a:	20 83       	st	Z, r18
   14c8c:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14c90:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14c94:	00 85       	ldd	r16, Z+8	; 0x08
   14c96:	11 85       	ldd	r17, Z+9	; 0x09
   14c98:	20 e0       	ldi	r18, 0x00	; 0
   14c9a:	30 e0       	ldi	r19, 0x00	; 0
   14c9c:	42 e0       	ldi	r20, 0x02	; 2
   14c9e:	50 e0       	ldi	r21, 0x00	; 0
   14ca0:	60 e0       	ldi	r22, 0x00	; 0
   14ca2:	70 e0       	ldi	r23, 0x00	; 0
   14ca4:	8e e8       	ldi	r24, 0x8E	; 142
   14ca6:	99 e1       	ldi	r25, 0x19	; 25
   14ca8:	0e 94 ba c0 	call	0x18174	; 0x18174 <V2B_MSB>
   14cac:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14cb0:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14cb4:	02 85       	ldd	r16, Z+10	; 0x0a
   14cb6:	13 85       	ldd	r17, Z+11	; 0x0b
   14cb8:	20 e0       	ldi	r18, 0x00	; 0
   14cba:	30 e0       	ldi	r19, 0x00	; 0
   14cbc:	42 e0       	ldi	r20, 0x02	; 2
   14cbe:	50 e0       	ldi	r21, 0x00	; 0
   14cc0:	61 e0       	ldi	r22, 0x01	; 1
   14cc2:	70 e0       	ldi	r23, 0x00	; 0
   14cc4:	8e e8       	ldi	r24, 0x8E	; 142
   14cc6:	99 e1       	ldi	r25, 0x19	; 25
   14cc8:	0e 94 ba c0 	call	0x18174	; 0x18174 <V2B_MSB>
   14ccc:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14cd0:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14cd4:	04 85       	ldd	r16, Z+12	; 0x0c
   14cd6:	10 e0       	ldi	r17, 0x00	; 0
   14cd8:	20 e0       	ldi	r18, 0x00	; 0
   14cda:	30 e0       	ldi	r19, 0x00	; 0
   14cdc:	41 e0       	ldi	r20, 0x01	; 1
   14cde:	50 e0       	ldi	r21, 0x00	; 0
   14ce0:	64 e0       	ldi	r22, 0x04	; 4
   14ce2:	70 e0       	ldi	r23, 0x00	; 0
   14ce4:	8e e8       	ldi	r24, 0x8E	; 142
   14ce6:	99 e1       	ldi	r25, 0x19	; 25
   14ce8:	0e 94 ba c0 	call	0x18174	; 0x18174 <V2B_MSB>
   14cec:	8e e8       	ldi	r24, 0x8E	; 142
   14cee:	99 e1       	ldi	r25, 0x19	; 25
   14cf0:	1f 91       	pop	r17
   14cf2:	0f 91       	pop	r16
   14cf4:	08 95       	ret

00014cf6 <SS80UnitPack>:
   14cf6:	0f 93       	push	r16
   14cf8:	1f 93       	push	r17
   14cfa:	23 e1       	ldi	r18, 0x13	; 19
   14cfc:	30 e0       	ldi	r19, 0x00	; 0
   14cfe:	fc 01       	movw	r30, r24
   14d00:	31 83       	std	Z+1, r19	; 0x01
   14d02:	20 83       	st	Z, r18
   14d04:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14d08:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14d0c:	05 85       	ldd	r16, Z+13	; 0x0d
   14d0e:	10 e0       	ldi	r17, 0x00	; 0
   14d10:	20 e0       	ldi	r18, 0x00	; 0
   14d12:	30 e0       	ldi	r19, 0x00	; 0
   14d14:	41 e0       	ldi	r20, 0x01	; 1
   14d16:	50 e0       	ldi	r21, 0x00	; 0
   14d18:	60 e0       	ldi	r22, 0x00	; 0
   14d1a:	70 e0       	ldi	r23, 0x00	; 0
   14d1c:	8b e7       	ldi	r24, 0x7B	; 123
   14d1e:	99 e1       	ldi	r25, 0x19	; 25
   14d20:	0e 94 ba c0 	call	0x18174	; 0x18174 <V2B_MSB>
   14d24:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14d28:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14d2c:	06 85       	ldd	r16, Z+14	; 0x0e
   14d2e:	17 85       	ldd	r17, Z+15	; 0x0f
   14d30:	20 89       	ldd	r18, Z+16	; 0x10
   14d32:	31 89       	ldd	r19, Z+17	; 0x11
   14d34:	43 e0       	ldi	r20, 0x03	; 3
   14d36:	50 e0       	ldi	r21, 0x00	; 0
   14d38:	61 e0       	ldi	r22, 0x01	; 1
   14d3a:	70 e0       	ldi	r23, 0x00	; 0
   14d3c:	8b e7       	ldi	r24, 0x7B	; 123
   14d3e:	99 e1       	ldi	r25, 0x19	; 25
   14d40:	0e 94 ba c0 	call	0x18174	; 0x18174 <V2B_MSB>
   14d44:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14d48:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14d4c:	02 89       	ldd	r16, Z+18	; 0x12
   14d4e:	13 89       	ldd	r17, Z+19	; 0x13
   14d50:	20 e0       	ldi	r18, 0x00	; 0
   14d52:	30 e0       	ldi	r19, 0x00	; 0
   14d54:	42 e0       	ldi	r20, 0x02	; 2
   14d56:	50 e0       	ldi	r21, 0x00	; 0
   14d58:	64 e0       	ldi	r22, 0x04	; 4
   14d5a:	70 e0       	ldi	r23, 0x00	; 0
   14d5c:	8b e7       	ldi	r24, 0x7B	; 123
   14d5e:	99 e1       	ldi	r25, 0x19	; 25
   14d60:	0e 94 ba c0 	call	0x18174	; 0x18174 <V2B_MSB>
   14d64:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14d68:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14d6c:	04 89       	ldd	r16, Z+20	; 0x14
   14d6e:	10 e0       	ldi	r17, 0x00	; 0
   14d70:	20 e0       	ldi	r18, 0x00	; 0
   14d72:	30 e0       	ldi	r19, 0x00	; 0
   14d74:	41 e0       	ldi	r20, 0x01	; 1
   14d76:	50 e0       	ldi	r21, 0x00	; 0
   14d78:	66 e0       	ldi	r22, 0x06	; 6
   14d7a:	70 e0       	ldi	r23, 0x00	; 0
   14d7c:	8b e7       	ldi	r24, 0x7B	; 123
   14d7e:	99 e1       	ldi	r25, 0x19	; 25
   14d80:	0e 94 ba c0 	call	0x18174	; 0x18174 <V2B_MSB>
   14d84:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14d88:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14d8c:	05 89       	ldd	r16, Z+21	; 0x15
   14d8e:	10 e0       	ldi	r17, 0x00	; 0
   14d90:	20 e0       	ldi	r18, 0x00	; 0
   14d92:	30 e0       	ldi	r19, 0x00	; 0
   14d94:	41 e0       	ldi	r20, 0x01	; 1
   14d96:	50 e0       	ldi	r21, 0x00	; 0
   14d98:	67 e0       	ldi	r22, 0x07	; 7
   14d9a:	70 e0       	ldi	r23, 0x00	; 0
   14d9c:	8b e7       	ldi	r24, 0x7B	; 123
   14d9e:	99 e1       	ldi	r25, 0x19	; 25
   14da0:	0e 94 ba c0 	call	0x18174	; 0x18174 <V2B_MSB>
   14da4:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14da8:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14dac:	06 89       	ldd	r16, Z+22	; 0x16
   14dae:	17 89       	ldd	r17, Z+23	; 0x17
   14db0:	20 e0       	ldi	r18, 0x00	; 0
   14db2:	30 e0       	ldi	r19, 0x00	; 0
   14db4:	42 e0       	ldi	r20, 0x02	; 2
   14db6:	50 e0       	ldi	r21, 0x00	; 0
   14db8:	68 e0       	ldi	r22, 0x08	; 8
   14dba:	70 e0       	ldi	r23, 0x00	; 0
   14dbc:	8b e7       	ldi	r24, 0x7B	; 123
   14dbe:	99 e1       	ldi	r25, 0x19	; 25
   14dc0:	0e 94 ba c0 	call	0x18174	; 0x18174 <V2B_MSB>
   14dc4:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14dc8:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14dcc:	00 8d       	ldd	r16, Z+24	; 0x18
   14dce:	11 8d       	ldd	r17, Z+25	; 0x19
   14dd0:	20 e0       	ldi	r18, 0x00	; 0
   14dd2:	30 e0       	ldi	r19, 0x00	; 0
   14dd4:	42 e0       	ldi	r20, 0x02	; 2
   14dd6:	50 e0       	ldi	r21, 0x00	; 0
   14dd8:	6a e0       	ldi	r22, 0x0A	; 10
   14dda:	70 e0       	ldi	r23, 0x00	; 0
   14ddc:	8b e7       	ldi	r24, 0x7B	; 123
   14dde:	99 e1       	ldi	r25, 0x19	; 25
   14de0:	0e 94 ba c0 	call	0x18174	; 0x18174 <V2B_MSB>
   14de4:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14de8:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14dec:	02 8d       	ldd	r16, Z+26	; 0x1a
   14dee:	13 8d       	ldd	r17, Z+27	; 0x1b
   14df0:	20 e0       	ldi	r18, 0x00	; 0
   14df2:	30 e0       	ldi	r19, 0x00	; 0
   14df4:	42 e0       	ldi	r20, 0x02	; 2
   14df6:	50 e0       	ldi	r21, 0x00	; 0
   14df8:	6c e0       	ldi	r22, 0x0C	; 12
   14dfa:	70 e0       	ldi	r23, 0x00	; 0
   14dfc:	8b e7       	ldi	r24, 0x7B	; 123
   14dfe:	99 e1       	ldi	r25, 0x19	; 25
   14e00:	0e 94 ba c0 	call	0x18174	; 0x18174 <V2B_MSB>
   14e04:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14e08:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14e0c:	04 8d       	ldd	r16, Z+28	; 0x1c
   14e0e:	15 8d       	ldd	r17, Z+29	; 0x1d
   14e10:	20 e0       	ldi	r18, 0x00	; 0
   14e12:	30 e0       	ldi	r19, 0x00	; 0
   14e14:	42 e0       	ldi	r20, 0x02	; 2
   14e16:	50 e0       	ldi	r21, 0x00	; 0
   14e18:	6e e0       	ldi	r22, 0x0E	; 14
   14e1a:	70 e0       	ldi	r23, 0x00	; 0
   14e1c:	8b e7       	ldi	r24, 0x7B	; 123
   14e1e:	99 e1       	ldi	r25, 0x19	; 25
   14e20:	0e 94 ba c0 	call	0x18174	; 0x18174 <V2B_MSB>
   14e24:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14e28:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14e2c:	06 8d       	ldd	r16, Z+30	; 0x1e
   14e2e:	10 e0       	ldi	r17, 0x00	; 0
   14e30:	20 e0       	ldi	r18, 0x00	; 0
   14e32:	30 e0       	ldi	r19, 0x00	; 0
   14e34:	41 e0       	ldi	r20, 0x01	; 1
   14e36:	50 e0       	ldi	r21, 0x00	; 0
   14e38:	60 e1       	ldi	r22, 0x10	; 16
   14e3a:	70 e0       	ldi	r23, 0x00	; 0
   14e3c:	8b e7       	ldi	r24, 0x7B	; 123
   14e3e:	99 e1       	ldi	r25, 0x19	; 25
   14e40:	0e 94 ba c0 	call	0x18174	; 0x18174 <V2B_MSB>
   14e44:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14e48:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14e4c:	07 8d       	ldd	r16, Z+31	; 0x1f
   14e4e:	10 e0       	ldi	r17, 0x00	; 0
   14e50:	20 e0       	ldi	r18, 0x00	; 0
   14e52:	30 e0       	ldi	r19, 0x00	; 0
   14e54:	41 e0       	ldi	r20, 0x01	; 1
   14e56:	50 e0       	ldi	r21, 0x00	; 0
   14e58:	61 e1       	ldi	r22, 0x11	; 17
   14e5a:	70 e0       	ldi	r23, 0x00	; 0
   14e5c:	8b e7       	ldi	r24, 0x7B	; 123
   14e5e:	99 e1       	ldi	r25, 0x19	; 25
   14e60:	0e 94 ba c0 	call	0x18174	; 0x18174 <V2B_MSB>
   14e64:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14e68:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14e6c:	00 a1       	ldd	r16, Z+32	; 0x20
   14e6e:	10 e0       	ldi	r17, 0x00	; 0
   14e70:	20 e0       	ldi	r18, 0x00	; 0
   14e72:	30 e0       	ldi	r19, 0x00	; 0
   14e74:	41 e0       	ldi	r20, 0x01	; 1
   14e76:	50 e0       	ldi	r21, 0x00	; 0
   14e78:	62 e1       	ldi	r22, 0x12	; 18
   14e7a:	70 e0       	ldi	r23, 0x00	; 0
   14e7c:	8b e7       	ldi	r24, 0x7B	; 123
   14e7e:	99 e1       	ldi	r25, 0x19	; 25
   14e80:	0e 94 ba c0 	call	0x18174	; 0x18174 <V2B_MSB>
   14e84:	8b e7       	ldi	r24, 0x7B	; 123
   14e86:	99 e1       	ldi	r25, 0x19	; 25
   14e88:	1f 91       	pop	r17
   14e8a:	0f 91       	pop	r16
   14e8c:	08 95       	ret

00014e8e <SS80VolumePack>:
   14e8e:	0f 93       	push	r16
   14e90:	1f 93       	push	r17
   14e92:	2d e0       	ldi	r18, 0x0D	; 13
   14e94:	30 e0       	ldi	r19, 0x00	; 0
   14e96:	fc 01       	movw	r30, r24
   14e98:	31 83       	std	Z+1, r19	; 0x01
   14e9a:	20 83       	st	Z, r18
   14e9c:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14ea0:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14ea4:	01 a1       	ldd	r16, Z+33	; 0x21
   14ea6:	12 a1       	ldd	r17, Z+34	; 0x22
   14ea8:	23 a1       	ldd	r18, Z+35	; 0x23
   14eaa:	34 a1       	ldd	r19, Z+36	; 0x24
   14eac:	43 e0       	ldi	r20, 0x03	; 3
   14eae:	50 e0       	ldi	r21, 0x00	; 0
   14eb0:	60 e0       	ldi	r22, 0x00	; 0
   14eb2:	70 e0       	ldi	r23, 0x00	; 0
   14eb4:	8e e6       	ldi	r24, 0x6E	; 110
   14eb6:	99 e1       	ldi	r25, 0x19	; 25
   14eb8:	0e 94 ba c0 	call	0x18174	; 0x18174 <V2B_MSB>
   14ebc:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14ec0:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14ec4:	05 a1       	ldd	r16, Z+37	; 0x25
   14ec6:	10 e0       	ldi	r17, 0x00	; 0
   14ec8:	20 e0       	ldi	r18, 0x00	; 0
   14eca:	30 e0       	ldi	r19, 0x00	; 0
   14ecc:	41 e0       	ldi	r20, 0x01	; 1
   14ece:	50 e0       	ldi	r21, 0x00	; 0
   14ed0:	63 e0       	ldi	r22, 0x03	; 3
   14ed2:	70 e0       	ldi	r23, 0x00	; 0
   14ed4:	8e e6       	ldi	r24, 0x6E	; 110
   14ed6:	99 e1       	ldi	r25, 0x19	; 25
   14ed8:	0e 94 ba c0 	call	0x18174	; 0x18174 <V2B_MSB>
   14edc:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14ee0:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14ee4:	06 a1       	ldd	r16, Z+38	; 0x26
   14ee6:	17 a1       	ldd	r17, Z+39	; 0x27
   14ee8:	20 e0       	ldi	r18, 0x00	; 0
   14eea:	30 e0       	ldi	r19, 0x00	; 0
   14eec:	42 e0       	ldi	r20, 0x02	; 2
   14eee:	50 e0       	ldi	r21, 0x00	; 0
   14ef0:	64 e0       	ldi	r22, 0x04	; 4
   14ef2:	70 e0       	ldi	r23, 0x00	; 0
   14ef4:	8e e6       	ldi	r24, 0x6E	; 110
   14ef6:	99 e1       	ldi	r25, 0x19	; 25
   14ef8:	0e 94 ba c0 	call	0x18174	; 0x18174 <V2B_MSB>
   14efc:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14f00:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14f04:	00 a5       	ldd	r16, Z+40	; 0x28
   14f06:	11 a5       	ldd	r17, Z+41	; 0x29
   14f08:	22 a5       	ldd	r18, Z+42	; 0x2a
   14f0a:	33 a5       	ldd	r19, Z+43	; 0x2b
   14f0c:	46 e0       	ldi	r20, 0x06	; 6
   14f0e:	50 e0       	ldi	r21, 0x00	; 0
   14f10:	66 e0       	ldi	r22, 0x06	; 6
   14f12:	70 e0       	ldi	r23, 0x00	; 0
   14f14:	8e e6       	ldi	r24, 0x6E	; 110
   14f16:	99 e1       	ldi	r25, 0x19	; 25
   14f18:	0e 94 ba c0 	call	0x18174	; 0x18174 <V2B_MSB>
   14f1c:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14f20:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14f24:	04 a5       	ldd	r16, Z+44	; 0x2c
   14f26:	10 e0       	ldi	r17, 0x00	; 0
   14f28:	20 e0       	ldi	r18, 0x00	; 0
   14f2a:	30 e0       	ldi	r19, 0x00	; 0
   14f2c:	41 e0       	ldi	r20, 0x01	; 1
   14f2e:	50 e0       	ldi	r21, 0x00	; 0
   14f30:	6c e0       	ldi	r22, 0x0C	; 12
   14f32:	70 e0       	ldi	r23, 0x00	; 0
   14f34:	8e e6       	ldi	r24, 0x6E	; 110
   14f36:	99 e1       	ldi	r25, 0x19	; 25
   14f38:	0e 94 ba c0 	call	0x18174	; 0x18174 <V2B_MSB>
   14f3c:	8e e6       	ldi	r24, 0x6E	; 110
   14f3e:	99 e1       	ldi	r25, 0x19	; 25
   14f40:	1f 91       	pop	r17
   14f42:	0f 91       	pop	r16
   14f44:	08 95       	ret

00014f46 <SS80_test_extended_status>:
   14f46:	9b 01       	movw	r18, r22
   14f48:	43 e0       	ldi	r20, 0x03	; 3
   14f4a:	35 95       	asr	r19
   14f4c:	27 95       	ror	r18
   14f4e:	4a 95       	dec	r20
   14f50:	e1 f7       	brne	.-8      	; 0x14f4a <SS80_test_extended_status+0x4>
   14f52:	82 0f       	add	r24, r18
   14f54:	93 1f       	adc	r25, r19
   14f56:	67 70       	andi	r22, 0x07	; 7
   14f58:	77 27       	eor	r23, r23
   14f5a:	20 e8       	ldi	r18, 0x80	; 128
   14f5c:	30 e0       	ldi	r19, 0x00	; 0
   14f5e:	02 c0       	rjmp	.+4      	; 0x14f64 <SS80_test_extended_status+0x1e>
   14f60:	35 95       	asr	r19
   14f62:	27 95       	ror	r18
   14f64:	6a 95       	dec	r22
   14f66:	e2 f7       	brpl	.-8      	; 0x14f60 <SS80_test_extended_status+0x1a>
   14f68:	fc 01       	movw	r30, r24
   14f6a:	80 81       	ld	r24, Z
   14f6c:	28 23       	and	r18, r24
   14f6e:	81 e0       	ldi	r24, 0x01	; 1
   14f70:	90 e0       	ldi	r25, 0x00	; 0
   14f72:	11 f4       	brne	.+4      	; 0x14f78 <SS80_test_extended_status+0x32>
   14f74:	80 e0       	ldi	r24, 0x00	; 0
   14f76:	90 e0       	ldi	r25, 0x00	; 0
   14f78:	08 95       	ret

00014f7a <SS80_display_extended_status>:
   14f7a:	6f 92       	push	r6
   14f7c:	7f 92       	push	r7
   14f7e:	8f 92       	push	r8
   14f80:	ef 92       	push	r14
   14f82:	ff 92       	push	r15
   14f84:	0f 93       	push	r16
   14f86:	1f 93       	push	r17
   14f88:	cf 93       	push	r28
   14f8a:	df 93       	push	r29
   14f8c:	ad b7       	in	r26, 0x3d	; 61
   14f8e:	be b7       	in	r27, 0x3e	; 62
   14f90:	17 97       	sbiw	r26, 0x07	; 7
   14f92:	0f b6       	in	r0, 0x3f	; 63
   14f94:	f8 94       	cli
   14f96:	be bf       	out	0x3e, r27	; 62
   14f98:	0f be       	out	0x3f, r0	; 63
   14f9a:	ad bf       	out	0x3d, r26	; 61
   14f9c:	fc 01       	movw	r30, r24
   14f9e:	ac 01       	movw	r20, r24
   14fa0:	48 5f       	subi	r20, 0xF8	; 248
   14fa2:	5f 4f       	sbci	r21, 0xFF	; 255
   14fa4:	20 e0       	ldi	r18, 0x00	; 0
   14fa6:	30 e0       	ldi	r19, 0x00	; 0
   14fa8:	a1 91       	ld	r26, Z+
   14faa:	aa 23       	and	r26, r26
   14fac:	11 f0       	breq	.+4      	; 0x14fb2 <SS80_display_extended_status+0x38>
   14fae:	21 e0       	ldi	r18, 0x01	; 1
   14fb0:	30 e0       	ldi	r19, 0x00	; 0
   14fb2:	e4 17       	cp	r30, r20
   14fb4:	f5 07       	cpc	r31, r21
   14fb6:	c1 f7       	brne	.-16     	; 0x14fa8 <SS80_display_extended_status+0x2e>
   14fb8:	23 2b       	or	r18, r19
   14fba:	81 f1       	breq	.+96     	; 0x1501c <SS80_display_extended_status+0xa2>
   14fbc:	ec 01       	movw	r28, r24
   14fbe:	ed b7       	in	r30, 0x3d	; 61
   14fc0:	fe b7       	in	r31, 0x3e	; 62
   14fc2:	75 83       	std	Z+5, r23	; 0x05
   14fc4:	64 83       	std	Z+4, r22	; 0x04
   14fc6:	85 e1       	ldi	r24, 0x15	; 21
   14fc8:	97 e2       	ldi	r25, 0x27	; 39
   14fca:	a0 e0       	ldi	r26, 0x00	; 0
   14fcc:	81 83       	std	Z+1, r24	; 0x01
   14fce:	92 83       	std	Z+2, r25	; 0x02
   14fd0:	a3 83       	std	Z+3, r26	; 0x03
   14fd2:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   14fd6:	0c e7       	ldi	r16, 0x7C	; 124
   14fd8:	12 e0       	ldi	r17, 0x02	; 2
   14fda:	8a e0       	ldi	r24, 0x0A	; 10
   14fdc:	97 e2       	ldi	r25, 0x27	; 39
   14fde:	3c 01       	movw	r6, r24
   14fe0:	81 2c       	mov	r8, r1
   14fe2:	f8 01       	movw	r30, r16
   14fe4:	e0 80       	ld	r14, Z
   14fe6:	f1 80       	ldd	r15, Z+1	; 0x01
   14fe8:	ff ef       	ldi	r31, 0xFF	; 255
   14fea:	ef 16       	cp	r14, r31
   14fec:	ff 06       	cpc	r15, r31
   14fee:	b1 f0       	breq	.+44     	; 0x1501c <SS80_display_extended_status+0xa2>
   14ff0:	b7 01       	movw	r22, r14
   14ff2:	ce 01       	movw	r24, r28
   14ff4:	a8 df       	rcall	.-176    	; 0x14f46 <SS80_test_extended_status>
   14ff6:	89 2b       	or	r24, r25
   14ff8:	71 f0       	breq	.+28     	; 0x15016 <SS80_display_extended_status+0x9c>
   14ffa:	f8 01       	movw	r30, r16
   14ffc:	82 81       	ldd	r24, Z+2	; 0x02
   14ffe:	93 81       	ldd	r25, Z+3	; 0x03
   15000:	ed b7       	in	r30, 0x3d	; 61
   15002:	fe b7       	in	r31, 0x3e	; 62
   15004:	97 83       	std	Z+7, r25	; 0x07
   15006:	86 83       	std	Z+6, r24	; 0x06
   15008:	f5 82       	std	Z+5, r15	; 0x05
   1500a:	e4 82       	std	Z+4, r14	; 0x04
   1500c:	61 82       	std	Z+1, r6	; 0x01
   1500e:	72 82       	std	Z+2, r7	; 0x02
   15010:	83 82       	std	Z+3, r8	; 0x03
   15012:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15016:	0c 5f       	subi	r16, 0xFC	; 252
   15018:	1f 4f       	sbci	r17, 0xFF	; 255
   1501a:	e3 cf       	rjmp	.-58     	; 0x14fe2 <SS80_display_extended_status+0x68>
   1501c:	ad b7       	in	r26, 0x3d	; 61
   1501e:	be b7       	in	r27, 0x3e	; 62
   15020:	17 96       	adiw	r26, 0x07	; 7
   15022:	0f b6       	in	r0, 0x3f	; 63
   15024:	f8 94       	cli
   15026:	be bf       	out	0x3e, r27	; 62
   15028:	0f be       	out	0x3f, r0	; 63
   1502a:	ad bf       	out	0x3d, r26	; 61
   1502c:	df 91       	pop	r29
   1502e:	cf 91       	pop	r28
   15030:	1f 91       	pop	r17
   15032:	0f 91       	pop	r16
   15034:	ff 90       	pop	r15
   15036:	ef 90       	pop	r14
   15038:	8f 90       	pop	r8
   1503a:	7f 90       	pop	r7
   1503c:	6f 90       	pop	r6
   1503e:	08 95       	ret

00015040 <SS80_send_status>:
   15040:	a9 e1       	ldi	r26, 0x19	; 25
   15042:	b0 e0       	ldi	r27, 0x00	; 0
   15044:	e6 e2       	ldi	r30, 0x26	; 38
   15046:	f8 ea       	ldi	r31, 0xA8	; 168
   15048:	0c 94 9f e7 	jmp	0x1cf3e	; 0x1cf3e <__prologue_saves__+0x18>
   1504c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15050:	85 ff       	sbrs	r24, 5
   15052:	0a c0       	rjmp	.+20     	; 0x15068 <SS80_send_status+0x28>
   15054:	86 ef       	ldi	r24, 0xF6	; 246
   15056:	96 e2       	ldi	r25, 0x26	; 38
   15058:	a0 e0       	ldi	r26, 0x00	; 0
   1505a:	ed b7       	in	r30, 0x3d	; 61
   1505c:	fe b7       	in	r31, 0x3e	; 62
   1505e:	81 83       	std	Z+1, r24	; 0x01
   15060:	92 83       	std	Z+2, r25	; 0x02
   15062:	a3 83       	std	Z+3, r26	; 0x03
   15064:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15068:	ce 01       	movw	r24, r28
   1506a:	04 96       	adiw	r24, 0x04	; 4
   1506c:	7c 01       	movw	r14, r24
   1506e:	84 e1       	ldi	r24, 0x14	; 20
   15070:	f7 01       	movw	r30, r14
   15072:	11 92       	st	Z+, r1
   15074:	8a 95       	dec	r24
   15076:	e9 f7       	brne	.-6      	; 0x15072 <SS80_send_status+0x32>
   15078:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   1507c:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15080:	86 81       	ldd	r24, Z+6	; 0x06
   15082:	20 e1       	ldi	r18, 0x10	; 16
   15084:	82 9f       	mul	r24, r18
   15086:	c0 01       	movw	r24, r0
   15088:	11 24       	eor	r1, r1
   1508a:	95 81       	ldd	r25, Z+5	; 0x05
   1508c:	9f 70       	andi	r25, 0x0F	; 15
   1508e:	89 2b       	or	r24, r25
   15090:	8c 83       	std	Y+4, r24	; 0x04
   15092:	8f ef       	ldi	r24, 0xFF	; 255
   15094:	8d 83       	std	Y+5, r24	; 0x05
   15096:	83 81       	ldd	r24, Z+3	; 0x03
   15098:	86 ff       	sbrs	r24, 6
   1509a:	02 c0       	rjmp	.+4      	; 0x150a0 <SS80_send_status+0x60>
   1509c:	92 e0       	ldi	r25, 0x02	; 2
   1509e:	9e 83       	std	Y+6, r25	; 0x06
   150a0:	82 ff       	sbrs	r24, 2
   150a2:	03 c0       	rjmp	.+6      	; 0x150aa <SS80_send_status+0x6a>
   150a4:	9e 81       	ldd	r25, Y+6	; 0x06
   150a6:	91 60       	ori	r25, 0x01	; 1
   150a8:	9e 83       	std	Y+6, r25	; 0x06
   150aa:	80 ff       	sbrs	r24, 0
   150ac:	02 c0       	rjmp	.+4      	; 0x150b2 <SS80_send_status+0x72>
   150ae:	82 e0       	ldi	r24, 0x02	; 2
   150b0:	88 87       	std	Y+8, r24	; 0x08
   150b2:	83 81       	ldd	r24, Z+3	; 0x03
   150b4:	81 ff       	sbrs	r24, 1
   150b6:	03 c0       	rjmp	.+6      	; 0x150be <SS80_send_status+0x7e>
   150b8:	88 85       	ldd	r24, Y+8	; 0x08
   150ba:	82 60       	ori	r24, 0x02	; 2
   150bc:	88 87       	std	Y+8, r24	; 0x08
   150be:	83 81       	ldd	r24, Z+3	; 0x03
   150c0:	83 ff       	sbrs	r24, 3
   150c2:	02 c0       	rjmp	.+4      	; 0x150c8 <SS80_send_status+0x88>
   150c4:	88 e0       	ldi	r24, 0x08	; 8
   150c6:	8a 87       	std	Y+10, r24	; 0x0a
   150c8:	83 81       	ldd	r24, Z+3	; 0x03
   150ca:	94 81       	ldd	r25, Z+4	; 0x04
   150cc:	89 2b       	or	r24, r25
   150ce:	59 f4       	brne	.+22     	; 0x150e6 <SS80_send_status+0xa6>
   150d0:	07 81       	ldd	r16, Z+7	; 0x07
   150d2:	10 85       	ldd	r17, Z+8	; 0x08
   150d4:	21 85       	ldd	r18, Z+9	; 0x09
   150d6:	32 85       	ldd	r19, Z+10	; 0x0a
   150d8:	46 e0       	ldi	r20, 0x06	; 6
   150da:	50 e0       	ldi	r21, 0x00	; 0
   150dc:	6a e0       	ldi	r22, 0x0A	; 10
   150de:	70 e0       	ldi	r23, 0x00	; 0
   150e0:	c7 01       	movw	r24, r14
   150e2:	0e 94 ba c0 	call	0x18174	; 0x18174 <V2B_MSB>
   150e6:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   150ea:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   150ee:	83 81       	ldd	r24, Z+3	; 0x03
   150f0:	94 81       	ldd	r25, Z+4	; 0x04
   150f2:	89 2b       	or	r24, r25
   150f4:	11 f0       	breq	.+4      	; 0x150fa <SS80_send_status+0xba>
   150f6:	81 e0       	ldi	r24, 0x01	; 1
   150f8:	82 83       	std	Z+2, r24	; 0x02
   150fa:	80 e0       	ldi	r24, 0x00	; 0
   150fc:	91 e0       	ldi	r25, 0x01	; 1
   150fe:	99 8f       	std	Y+25, r25	; 0x19
   15100:	88 8f       	std	Y+24, r24	; 0x18
   15102:	ae 01       	movw	r20, r28
   15104:	48 5e       	subi	r20, 0xE8	; 232
   15106:	5f 4f       	sbci	r21, 0xFF	; 255
   15108:	64 e1       	ldi	r22, 0x14	; 20
   1510a:	70 e0       	ldi	r23, 0x00	; 0
   1510c:	c7 01       	movw	r24, r14
   1510e:	0e 94 fb 8b 	call	0x117f6	; 0x117f6 <gpib_write_str>
   15112:	44 97       	sbiw	r24, 0x14	; 20
   15114:	71 f0       	breq	.+28     	; 0x15132 <SS80_send_status+0xf2>
   15116:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1511a:	80 ff       	sbrs	r24, 0
   1511c:	0a c0       	rjmp	.+20     	; 0x15132 <SS80_send_status+0xf2>
   1511e:	8b ed       	ldi	r24, 0xDB	; 219
   15120:	96 e2       	ldi	r25, 0x26	; 38
   15122:	a0 e0       	ldi	r26, 0x00	; 0
   15124:	ed b7       	in	r30, 0x3d	; 61
   15126:	fe b7       	in	r31, 0x3e	; 62
   15128:	81 83       	std	Z+1, r24	; 0x01
   1512a:	92 83       	std	Z+2, r25	; 0x02
   1512c:	a3 83       	std	Z+3, r26	; 0x03
   1512e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15132:	88 8d       	ldd	r24, Y+24	; 0x18
   15134:	99 8d       	ldd	r25, Y+25	; 0x19
   15136:	88 27       	eor	r24, r24
   15138:	90 7d       	andi	r25, 0xD0	; 208
   1513a:	69 96       	adiw	r28, 0x19	; 25
   1513c:	e6 e0       	ldi	r30, 0x06	; 6
   1513e:	0c 94 bb e7 	jmp	0x1cf76	; 0x1cf76 <__epilogue_restores__+0x18>

00015142 <SS80_describe>:
   15142:	a7 e0       	ldi	r26, 0x07	; 7
   15144:	b0 e0       	ldi	r27, 0x00	; 0
   15146:	e7 ea       	ldi	r30, 0xA7	; 167
   15148:	f8 ea       	ldi	r31, 0xA8	; 168
   1514a:	0c 94 a3 e7 	jmp	0x1cf46	; 0x1cf46 <__prologue_saves__+0x20>
   1514e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15152:	85 ff       	sbrs	r24, 5
   15154:	0a c0       	rjmp	.+20     	; 0x1516a <SS80_describe+0x28>
   15156:	8a ec       	ldi	r24, 0xCA	; 202
   15158:	96 e2       	ldi	r25, 0x26	; 38
   1515a:	a0 e0       	ldi	r26, 0x00	; 0
   1515c:	ed b7       	in	r30, 0x3d	; 61
   1515e:	fe b7       	in	r31, 0x3e	; 62
   15160:	81 83       	std	Z+1, r24	; 0x01
   15162:	92 83       	std	Z+2, r25	; 0x02
   15164:	a3 83       	std	Z+3, r26	; 0x03
   15166:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1516a:	1f 82       	std	Y+7, r1	; 0x07
   1516c:	1e 82       	std	Y+6, r1	; 0x06
   1516e:	ce 01       	movw	r24, r28
   15170:	04 96       	adiw	r24, 0x04	; 4
   15172:	85 dd       	rcall	.-1270   	; 0x14c7e <SS80ControllerPack>
   15174:	6c 81       	ldd	r22, Y+4	; 0x04
   15176:	7d 81       	ldd	r23, Y+5	; 0x05
   15178:	ae 01       	movw	r20, r28
   1517a:	4a 5f       	subi	r20, 0xFA	; 250
   1517c:	5f 4f       	sbci	r21, 0xFF	; 255
   1517e:	0e 94 fb 8b 	call	0x117f6	; 0x117f6 <gpib_write_str>
   15182:	2c 81       	ldd	r18, Y+4	; 0x04
   15184:	3d 81       	ldd	r19, Y+5	; 0x05
   15186:	82 17       	cp	r24, r18
   15188:	93 07       	cpc	r25, r19
   1518a:	39 f0       	breq	.+14     	; 0x1519a <SS80_describe+0x58>
   1518c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15190:	80 ff       	sbrs	r24, 0
   15192:	3c c0       	rjmp	.+120    	; 0x1520c <SS80_describe+0xca>
   15194:	87 ea       	ldi	r24, 0xA7	; 167
   15196:	96 e2       	ldi	r25, 0x26	; 38
   15198:	31 c0       	rjmp	.+98     	; 0x151fc <SS80_describe+0xba>
   1519a:	1f 82       	std	Y+7, r1	; 0x07
   1519c:	1e 82       	std	Y+6, r1	; 0x06
   1519e:	ce 01       	movw	r24, r28
   151a0:	04 96       	adiw	r24, 0x04	; 4
   151a2:	a9 dd       	rcall	.-1198   	; 0x14cf6 <SS80UnitPack>
   151a4:	6c 81       	ldd	r22, Y+4	; 0x04
   151a6:	7d 81       	ldd	r23, Y+5	; 0x05
   151a8:	ae 01       	movw	r20, r28
   151aa:	4a 5f       	subi	r20, 0xFA	; 250
   151ac:	5f 4f       	sbci	r21, 0xFF	; 255
   151ae:	0e 94 fb 8b 	call	0x117f6	; 0x117f6 <gpib_write_str>
   151b2:	2c 81       	ldd	r18, Y+4	; 0x04
   151b4:	3d 81       	ldd	r19, Y+5	; 0x05
   151b6:	82 17       	cp	r24, r18
   151b8:	93 07       	cpc	r25, r19
   151ba:	39 f0       	breq	.+14     	; 0x151ca <SS80_describe+0x88>
   151bc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   151c0:	80 ff       	sbrs	r24, 0
   151c2:	24 c0       	rjmp	.+72     	; 0x1520c <SS80_describe+0xca>
   151c4:	8a e8       	ldi	r24, 0x8A	; 138
   151c6:	96 e2       	ldi	r25, 0x26	; 38
   151c8:	19 c0       	rjmp	.+50     	; 0x151fc <SS80_describe+0xba>
   151ca:	80 e0       	ldi	r24, 0x00	; 0
   151cc:	91 e0       	ldi	r25, 0x01	; 1
   151ce:	9f 83       	std	Y+7, r25	; 0x07
   151d0:	8e 83       	std	Y+6, r24	; 0x06
   151d2:	ce 01       	movw	r24, r28
   151d4:	04 96       	adiw	r24, 0x04	; 4
   151d6:	5b de       	rcall	.-842    	; 0x14e8e <SS80VolumePack>
   151d8:	6c 81       	ldd	r22, Y+4	; 0x04
   151da:	7d 81       	ldd	r23, Y+5	; 0x05
   151dc:	ae 01       	movw	r20, r28
   151de:	4a 5f       	subi	r20, 0xFA	; 250
   151e0:	5f 4f       	sbci	r21, 0xFF	; 255
   151e2:	0e 94 fb 8b 	call	0x117f6	; 0x117f6 <gpib_write_str>
   151e6:	2c 81       	ldd	r18, Y+4	; 0x04
   151e8:	3d 81       	ldd	r19, Y+5	; 0x05
   151ea:	82 17       	cp	r24, r18
   151ec:	93 07       	cpc	r25, r19
   151ee:	99 f0       	breq	.+38     	; 0x15216 <SS80_describe+0xd4>
   151f0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   151f4:	80 ff       	sbrs	r24, 0
   151f6:	0a c0       	rjmp	.+20     	; 0x1520c <SS80_describe+0xca>
   151f8:	8b e6       	ldi	r24, 0x6B	; 107
   151fa:	96 e2       	ldi	r25, 0x26	; 38
   151fc:	a0 e0       	ldi	r26, 0x00	; 0
   151fe:	ed b7       	in	r30, 0x3d	; 61
   15200:	fe b7       	in	r31, 0x3e	; 62
   15202:	81 83       	std	Z+1, r24	; 0x01
   15204:	92 83       	std	Z+2, r25	; 0x02
   15206:	a3 83       	std	Z+3, r26	; 0x03
   15208:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1520c:	8e 81       	ldd	r24, Y+6	; 0x06
   1520e:	9f 81       	ldd	r25, Y+7	; 0x07
   15210:	88 27       	eor	r24, r24
   15212:	90 7d       	andi	r25, 0xD0	; 208
   15214:	02 c0       	rjmp	.+4      	; 0x1521a <SS80_describe+0xd8>
   15216:	80 e0       	ldi	r24, 0x00	; 0
   15218:	90 e0       	ldi	r25, 0x00	; 0
   1521a:	27 96       	adiw	r28, 0x07	; 7
   1521c:	e2 e0       	ldi	r30, 0x02	; 2
   1521e:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00015222 <SS80_Check_Unit>:
   15222:	00 d0       	rcall	.+0      	; 0x15224 <SS80_Check_Unit+0x2>
   15224:	00 d0       	rcall	.+0      	; 0x15226 <SS80_Check_Unit+0x4>
   15226:	1f 92       	push	r1
   15228:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   1522c:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15230:	88 23       	and	r24, r24
   15232:	c9 f0       	breq	.+50     	; 0x15266 <SS80_Check_Unit+0x44>
   15234:	8f 30       	cpi	r24, 0x0F	; 15
   15236:	b9 f0       	breq	.+46     	; 0x15266 <SS80_Check_Unit+0x44>
   15238:	23 81       	ldd	r18, Z+3	; 0x03
   1523a:	34 81       	ldd	r19, Z+4	; 0x04
   1523c:	20 64       	ori	r18, 0x40	; 64
   1523e:	34 83       	std	Z+4, r19	; 0x04
   15240:	23 83       	std	Z+3, r18	; 0x03
   15242:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   15246:	90 ff       	sbrs	r25, 0
   15248:	0f c0       	rjmp	.+30     	; 0x15268 <SS80_Check_Unit+0x46>
   1524a:	90 e0       	ldi	r25, 0x00	; 0
   1524c:	ed b7       	in	r30, 0x3d	; 61
   1524e:	fe b7       	in	r31, 0x3e	; 62
   15250:	95 83       	std	Z+5, r25	; 0x05
   15252:	84 83       	std	Z+4, r24	; 0x04
   15254:	83 e5       	ldi	r24, 0x53	; 83
   15256:	96 e2       	ldi	r25, 0x26	; 38
   15258:	a0 e0       	ldi	r26, 0x00	; 0
   1525a:	81 83       	std	Z+1, r24	; 0x01
   1525c:	92 83       	std	Z+2, r25	; 0x02
   1525e:	a3 83       	std	Z+3, r26	; 0x03
   15260:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15264:	01 c0       	rjmp	.+2      	; 0x15268 <SS80_Check_Unit+0x46>
   15266:	85 83       	std	Z+5, r24	; 0x05
   15268:	0f 90       	pop	r0
   1526a:	0f 90       	pop	r0
   1526c:	0f 90       	pop	r0
   1526e:	0f 90       	pop	r0
   15270:	0f 90       	pop	r0
   15272:	08 95       	ret

00015274 <SS80_Check_Volume>:
   15274:	00 d0       	rcall	.+0      	; 0x15276 <SS80_Check_Volume+0x2>
   15276:	00 d0       	rcall	.+0      	; 0x15278 <SS80_Check_Volume+0x4>
   15278:	1f 92       	push	r1
   1527a:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   1527e:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15282:	88 23       	and	r24, r24
   15284:	b9 f0       	breq	.+46     	; 0x152b4 <SS80_Check_Volume+0x40>
   15286:	23 81       	ldd	r18, Z+3	; 0x03
   15288:	34 81       	ldd	r19, Z+4	; 0x04
   1528a:	20 64       	ori	r18, 0x40	; 64
   1528c:	34 83       	std	Z+4, r19	; 0x04
   1528e:	23 83       	std	Z+3, r18	; 0x03
   15290:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   15294:	90 ff       	sbrs	r25, 0
   15296:	0f c0       	rjmp	.+30     	; 0x152b6 <SS80_Check_Volume+0x42>
   15298:	90 e0       	ldi	r25, 0x00	; 0
   1529a:	ed b7       	in	r30, 0x3d	; 61
   1529c:	fe b7       	in	r31, 0x3e	; 62
   1529e:	95 83       	std	Z+5, r25	; 0x05
   152a0:	84 83       	std	Z+4, r24	; 0x04
   152a2:	89 e3       	ldi	r24, 0x39	; 57
   152a4:	96 e2       	ldi	r25, 0x26	; 38
   152a6:	a0 e0       	ldi	r26, 0x00	; 0
   152a8:	81 83       	std	Z+1, r24	; 0x01
   152aa:	92 83       	std	Z+2, r25	; 0x02
   152ac:	a3 83       	std	Z+3, r26	; 0x03
   152ae:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   152b2:	01 c0       	rjmp	.+2      	; 0x152b6 <SS80_Check_Volume+0x42>
   152b4:	16 82       	std	Z+6, r1	; 0x06
   152b6:	0f 90       	pop	r0
   152b8:	0f 90       	pop	r0
   152ba:	0f 90       	pop	r0
   152bc:	0f 90       	pop	r0
   152be:	0f 90       	pop	r0
   152c0:	08 95       	ret

000152c2 <SS80_Command_State>:
   152c2:	2f 92       	push	r2
   152c4:	3f 92       	push	r3
   152c6:	4f 92       	push	r4
   152c8:	6f 92       	push	r6
   152ca:	7f 92       	push	r7
   152cc:	8f 92       	push	r8
   152ce:	af 92       	push	r10
   152d0:	bf 92       	push	r11
   152d2:	cf 92       	push	r12
   152d4:	ef 92       	push	r14
   152d6:	ff 92       	push	r15
   152d8:	0f 93       	push	r16
   152da:	1f 93       	push	r17
   152dc:	cf 93       	push	r28
   152de:	df 93       	push	r29
   152e0:	cd b7       	in	r28, 0x3d	; 61
   152e2:	de b7       	in	r29, 0x3e	; 62
   152e4:	66 97       	sbiw	r28, 0x16	; 22
   152e6:	0f b6       	in	r0, 0x3f	; 63
   152e8:	f8 94       	cli
   152ea:	de bf       	out	0x3e, r29	; 62
   152ec:	0f be       	out	0x3f, r0	; 63
   152ee:	cd bf       	out	0x3d, r28	; 61
   152f0:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   152f4:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   152f8:	81 81       	ldd	r24, Z+1	; 0x01
   152fa:	90 e0       	ldi	r25, 0x00	; 0
   152fc:	0e 94 01 87 	call	0x10e02	; 0x10e02 <gpib_disable_PPR>
   15300:	80 e0       	ldi	r24, 0x00	; 0
   15302:	91 e0       	ldi	r25, 0x01	; 1
   15304:	99 87       	std	Y+9, r25	; 0x09
   15306:	88 87       	std	Y+8, r24	; 0x08
   15308:	ae 01       	movw	r20, r28
   1530a:	48 5f       	subi	r20, 0xF8	; 248
   1530c:	5f 4f       	sbci	r21, 0xFF	; 255
   1530e:	60 e0       	ldi	r22, 0x00	; 0
   15310:	72 e0       	ldi	r23, 0x02	; 2
   15312:	80 ee       	ldi	r24, 0xE0	; 224
   15314:	9c e1       	ldi	r25, 0x1C	; 28
   15316:	0e 94 59 8b 	call	0x116b2	; 0x116b2 <gpib_read_str>
   1531a:	9b 87       	std	Y+11, r25	; 0x0b
   1531c:	8a 87       	std	Y+10, r24	; 0x0a
   1531e:	88 85       	ldd	r24, Y+8	; 0x08
   15320:	99 85       	ldd	r25, Y+9	; 0x09
   15322:	9c 01       	movw	r18, r24
   15324:	22 27       	eor	r18, r18
   15326:	30 7d       	andi	r19, 0xD0	; 208
   15328:	23 2b       	or	r18, r19
   1532a:	79 f0       	breq	.+30     	; 0x1534a <SS80_Command_State+0x88>
   1532c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15330:	80 ff       	sbrs	r24, 0
   15332:	21 c2       	rjmp	.+1090   	; 0x15776 <SS80_Command_State+0x4b4>
   15334:	83 e1       	ldi	r24, 0x13	; 19
   15336:	96 e2       	ldi	r25, 0x26	; 38
   15338:	a0 e0       	ldi	r26, 0x00	; 0
   1533a:	ed b7       	in	r30, 0x3d	; 61
   1533c:	fe b7       	in	r31, 0x3e	; 62
   1533e:	81 83       	std	Z+1, r24	; 0x01
   15340:	92 83       	std	Z+2, r25	; 0x02
   15342:	a3 83       	std	Z+3, r26	; 0x03
   15344:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15348:	16 c2       	rjmp	.+1068   	; 0x15776 <SS80_Command_State+0x4b4>
   1534a:	2a 85       	ldd	r18, Y+10	; 0x0a
   1534c:	3b 85       	ldd	r19, Y+11	; 0x0b
   1534e:	23 2b       	or	r18, r19
   15350:	09 f4       	brne	.+2      	; 0x15354 <SS80_Command_State+0x92>
   15352:	16 c2       	rjmp	.+1068   	; 0x15780 <SS80_Command_State+0x4be>
   15354:	90 fd       	sbrc	r25, 0
   15356:	0e c0       	rjmp	.+28     	; 0x15374 <SS80_Command_State+0xb2>
   15358:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1535c:	80 ff       	sbrs	r24, 0
   1535e:	0a c0       	rjmp	.+20     	; 0x15374 <SS80_Command_State+0xb2>
   15360:	8a ef       	ldi	r24, 0xFA	; 250
   15362:	95 e2       	ldi	r25, 0x25	; 37
   15364:	a0 e0       	ldi	r26, 0x00	; 0
   15366:	ed b7       	in	r30, 0x3d	; 61
   15368:	fe b7       	in	r31, 0x3e	; 62
   1536a:	81 83       	std	Z+1, r24	; 0x01
   1536c:	92 83       	std	Z+2, r25	; 0x02
   1536e:	a3 83       	std	Z+3, r26	; 0x03
   15370:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15374:	e1 2c       	mov	r14, r1
   15376:	f1 2c       	mov	r15, r1
   15378:	8e ef       	ldi	r24, 0xFE	; 254
   1537a:	94 e2       	ldi	r25, 0x24	; 36
   1537c:	9c 01       	movw	r18, r24
   1537e:	40 e0       	ldi	r20, 0x00	; 0
   15380:	2e 87       	std	Y+14, r18	; 0x0e
   15382:	3f 87       	std	Y+15, r19	; 0x0f
   15384:	48 8b       	std	Y+16, r20	; 0x10
   15386:	83 e2       	ldi	r24, 0x23	; 35
   15388:	95 e2       	ldi	r25, 0x25	; 37
   1538a:	9c 01       	movw	r18, r24
   1538c:	40 e0       	ldi	r20, 0x00	; 0
   1538e:	29 8b       	std	Y+17, r18	; 0x11
   15390:	3a 8b       	std	Y+18, r19	; 0x12
   15392:	4b 8b       	std	Y+19, r20	; 0x13
   15394:	8d e3       	ldi	r24, 0x3D	; 61
   15396:	95 e2       	ldi	r25, 0x25	; 37
   15398:	9c 01       	movw	r18, r24
   1539a:	40 e0       	ldi	r20, 0x00	; 0
   1539c:	2c 8b       	std	Y+20, r18	; 0x14
   1539e:	3d 8b       	std	Y+21, r19	; 0x15
   153a0:	4e 8b       	std	Y+22, r20	; 0x16
   153a2:	83 e5       	ldi	r24, 0x53	; 83
   153a4:	95 e2       	ldi	r25, 0x25	; 37
   153a6:	3c 01       	movw	r6, r24
   153a8:	81 2c       	mov	r8, r1
   153aa:	81 e6       	ldi	r24, 0x61	; 97
   153ac:	95 e2       	ldi	r25, 0x25	; 37
   153ae:	5c 01       	movw	r10, r24
   153b0:	c1 2c       	mov	r12, r1
   153b2:	8d e7       	ldi	r24, 0x7D	; 125
   153b4:	95 e2       	ldi	r25, 0x25	; 37
   153b6:	1c 01       	movw	r2, r24
   153b8:	41 2c       	mov	r4, r1
   153ba:	2a 85       	ldd	r18, Y+10	; 0x0a
   153bc:	3b 85       	ldd	r19, Y+11	; 0x0b
   153be:	87 01       	movw	r16, r14
   153c0:	e2 16       	cp	r14, r18
   153c2:	f3 06       	cpc	r15, r19
   153c4:	0c f0       	brlt	.+2      	; 0x153c8 <SS80_Command_State+0x106>
   153c6:	b6 c1       	rjmp	.+876    	; 0x15734 <SS80_Command_State+0x472>
   153c8:	0f 5f       	subi	r16, 0xFF	; 255
   153ca:	1f 4f       	sbci	r17, 0xFF	; 255
   153cc:	f7 01       	movw	r30, r14
   153ce:	e0 52       	subi	r30, 0x20	; 32
   153d0:	f3 4e       	sbci	r31, 0xE3	; 227
   153d2:	80 81       	ld	r24, Z
   153d4:	28 2f       	mov	r18, r24
   153d6:	30 e0       	ldi	r19, 0x00	; 0
   153d8:	a9 01       	movw	r20, r18
   153da:	40 52       	subi	r20, 0x20	; 32
   153dc:	51 09       	sbc	r21, r1
   153de:	40 31       	cpi	r20, 0x10	; 16
   153e0:	51 05       	cpc	r21, r1
   153e2:	98 f4       	brcc	.+38     	; 0x1540a <SS80_Command_State+0x148>
   153e4:	80 52       	subi	r24, 0x20	; 32
   153e6:	1d df       	rcall	.-454    	; 0x15222 <SS80_Check_Unit>
   153e8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   153ec:	85 ff       	sbrs	r24, 5
   153ee:	a0 c1       	rjmp	.+832    	; 0x15730 <SS80_Command_State+0x46e>
   153f0:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   153f4:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   153f8:	85 81       	ldd	r24, Z+5	; 0x05
   153fa:	90 e0       	ldi	r25, 0x00	; 0
   153fc:	ed b7       	in	r30, 0x3d	; 61
   153fe:	fe b7       	in	r31, 0x3e	; 62
   15400:	95 83       	std	Z+5, r25	; 0x05
   15402:	84 83       	std	Z+4, r24	; 0x04
   15404:	84 ee       	ldi	r24, 0xE4	; 228
   15406:	95 e2       	ldi	r25, 0x25	; 37
   15408:	19 c0       	rjmp	.+50     	; 0x1543c <SS80_Command_State+0x17a>
   1540a:	a9 01       	movw	r20, r18
   1540c:	40 54       	subi	r20, 0x40	; 64
   1540e:	51 09       	sbc	r21, r1
   15410:	40 31       	cpi	r20, 0x10	; 16
   15412:	51 05       	cpc	r21, r1
   15414:	d0 f4       	brcc	.+52     	; 0x1544a <SS80_Command_State+0x188>
   15416:	80 54       	subi	r24, 0x40	; 64
   15418:	2d df       	rcall	.-422    	; 0x15274 <SS80_Check_Volume>
   1541a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1541e:	85 ff       	sbrs	r24, 5
   15420:	87 c1       	rjmp	.+782    	; 0x15730 <SS80_Command_State+0x46e>
   15422:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15426:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   1542a:	86 81       	ldd	r24, Z+6	; 0x06
   1542c:	90 e0       	ldi	r25, 0x00	; 0
   1542e:	ed b7       	in	r30, 0x3d	; 61
   15430:	fe b7       	in	r31, 0x3e	; 62
   15432:	95 83       	std	Z+5, r25	; 0x05
   15434:	84 83       	std	Z+4, r24	; 0x04
   15436:	2b ec       	ldi	r18, 0xCB	; 203
   15438:	35 e2       	ldi	r19, 0x25	; 37
   1543a:	c9 01       	movw	r24, r18
   1543c:	a0 e0       	ldi	r26, 0x00	; 0
   1543e:	81 83       	std	Z+1, r24	; 0x01
   15440:	92 83       	std	Z+2, r25	; 0x02
   15442:	a3 83       	std	Z+3, r26	; 0x03
   15444:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15448:	73 c1       	rjmp	.+742    	; 0x15730 <SS80_Command_State+0x46e>
   1544a:	21 15       	cp	r18, r1
   1544c:	31 05       	cpc	r19, r1
   1544e:	79 f4       	brne	.+30     	; 0x1546e <SS80_Command_State+0x1ac>
   15450:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15454:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15458:	81 e0       	ldi	r24, 0x01	; 1
   1545a:	90 e0       	ldi	r25, 0x00	; 0
   1545c:	91 83       	std	Z+1, r25	; 0x01
   1545e:	80 83       	st	Z, r24
   15460:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15464:	85 ff       	sbrs	r24, 5
   15466:	66 c1       	rjmp	.+716    	; 0x15734 <SS80_Command_State+0x472>
   15468:	83 eb       	ldi	r24, 0xB3	; 179
   1546a:	95 e2       	ldi	r25, 0x25	; 37
   1546c:	0f c0       	rjmp	.+30     	; 0x1548c <SS80_Command_State+0x1ca>
   1546e:	22 30       	cpi	r18, 0x02	; 2
   15470:	31 05       	cpc	r19, r1
   15472:	a9 f4       	brne	.+42     	; 0x1549e <SS80_Command_State+0x1dc>
   15474:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15478:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   1547c:	31 83       	std	Z+1, r19	; 0x01
   1547e:	20 83       	st	Z, r18
   15480:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15484:	85 ff       	sbrs	r24, 5
   15486:	56 c1       	rjmp	.+684    	; 0x15734 <SS80_Command_State+0x472>
   15488:	8a e9       	ldi	r24, 0x9A	; 154
   1548a:	95 e2       	ldi	r25, 0x25	; 37
   1548c:	a0 e0       	ldi	r26, 0x00	; 0
   1548e:	ed b7       	in	r30, 0x3d	; 61
   15490:	fe b7       	in	r31, 0x3e	; 62
   15492:	81 83       	std	Z+1, r24	; 0x01
   15494:	92 83       	std	Z+2, r25	; 0x02
   15496:	a3 83       	std	Z+3, r26	; 0x03
   15498:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1549c:	4b c1       	rjmp	.+662    	; 0x15734 <SS80_Command_State+0x472>
   1549e:	20 31       	cpi	r18, 0x10	; 16
   154a0:	31 05       	cpc	r19, r1
   154a2:	b1 f5       	brne	.+108    	; 0x15510 <SS80_Command_State+0x24e>
   154a4:	20 91 5c 19 	lds	r18, 0x195C	; 0x80195c <SS80s>
   154a8:	30 91 5d 19 	lds	r19, 0x195D	; 0x80195d <SS80s+0x1>
   154ac:	3d 87       	std	Y+13, r19	; 0x0d
   154ae:	2c 87       	std	Y+12, r18	; 0x0c
   154b0:	46 e0       	ldi	r20, 0x06	; 6
   154b2:	50 e0       	ldi	r21, 0x00	; 0
   154b4:	b8 01       	movw	r22, r16
   154b6:	80 ee       	ldi	r24, 0xE0	; 224
   154b8:	9c e1       	ldi	r25, 0x1C	; 28
   154ba:	0e 94 e3 c0 	call	0x181c6	; 0x181c6 <B2V_MSB>
   154be:	ec 85       	ldd	r30, Y+12	; 0x0c
   154c0:	fd 85       	ldd	r31, Y+13	; 0x0d
   154c2:	67 83       	std	Z+7, r22	; 0x07
   154c4:	70 87       	std	Z+8, r23	; 0x08
   154c6:	81 87       	std	Z+9, r24	; 0x09
   154c8:	92 87       	std	Z+10, r25	; 0x0a
   154ca:	87 01       	movw	r16, r14
   154cc:	09 5f       	subi	r16, 0xF9	; 249
   154ce:	1f 4f       	sbci	r17, 0xFF	; 255
   154d0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   154d4:	85 ff       	sbrs	r24, 5
   154d6:	2c c1       	rjmp	.+600    	; 0x15730 <SS80_Command_State+0x46e>
   154d8:	20 91 5c 19 	lds	r18, 0x195C	; 0x80195c <SS80s>
   154dc:	30 91 5d 19 	lds	r19, 0x195D	; 0x80195d <SS80s+0x1>
   154e0:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <SS80p>
   154e4:	90 91 5f 19 	lds	r25, 0x195F	; 0x80195f <SS80p+0x1>
   154e8:	fc 01       	movw	r30, r24
   154ea:	a2 89       	ldd	r26, Z+18	; 0x12
   154ec:	b3 89       	ldd	r27, Z+19	; 0x13
   154ee:	f9 01       	movw	r30, r18
   154f0:	27 81       	ldd	r18, Z+7	; 0x07
   154f2:	30 85       	ldd	r19, Z+8	; 0x08
   154f4:	41 85       	ldd	r20, Z+9	; 0x09
   154f6:	52 85       	ldd	r21, Z+10	; 0x0a
   154f8:	0e 94 73 e7 	call	0x1cee6	; 0x1cee6 <__muluhisi3>
   154fc:	ed b7       	in	r30, 0x3d	; 61
   154fe:	fe b7       	in	r31, 0x3e	; 62
   15500:	64 83       	std	Z+4, r22	; 0x04
   15502:	75 83       	std	Z+5, r23	; 0x05
   15504:	86 83       	std	Z+6, r24	; 0x06
   15506:	97 83       	std	Z+7, r25	; 0x07
   15508:	21 82       	std	Z+1, r2	; 0x01
   1550a:	32 82       	std	Z+2, r3	; 0x02
   1550c:	43 82       	std	Z+3, r4	; 0x03
   1550e:	2e c0       	rjmp	.+92     	; 0x1556c <SS80_Command_State+0x2aa>
   15510:	28 31       	cpi	r18, 0x18	; 24
   15512:	31 05       	cpc	r19, r1
   15514:	71 f5       	brne	.+92     	; 0x15572 <SS80_Command_State+0x2b0>
   15516:	20 91 5c 19 	lds	r18, 0x195C	; 0x80195c <SS80s>
   1551a:	30 91 5d 19 	lds	r19, 0x195D	; 0x80195d <SS80s+0x1>
   1551e:	3d 87       	std	Y+13, r19	; 0x0d
   15520:	2c 87       	std	Y+12, r18	; 0x0c
   15522:	44 e0       	ldi	r20, 0x04	; 4
   15524:	50 e0       	ldi	r21, 0x00	; 0
   15526:	b8 01       	movw	r22, r16
   15528:	80 ee       	ldi	r24, 0xE0	; 224
   1552a:	9c e1       	ldi	r25, 0x1C	; 28
   1552c:	0e 94 e3 c0 	call	0x181c6	; 0x181c6 <B2V_MSB>
   15530:	ec 85       	ldd	r30, Y+12	; 0x0c
   15532:	fd 85       	ldd	r31, Y+13	; 0x0d
   15534:	63 87       	std	Z+11, r22	; 0x0b
   15536:	74 87       	std	Z+12, r23	; 0x0c
   15538:	85 87       	std	Z+13, r24	; 0x0d
   1553a:	96 87       	std	Z+14, r25	; 0x0e
   1553c:	87 01       	movw	r16, r14
   1553e:	0b 5f       	subi	r16, 0xFB	; 251
   15540:	1f 4f       	sbci	r17, 0xFF	; 255
   15542:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15546:	85 ff       	sbrs	r24, 5
   15548:	f3 c0       	rjmp	.+486    	; 0x15730 <SS80_Command_State+0x46e>
   1554a:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   1554e:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15552:	83 85       	ldd	r24, Z+11	; 0x0b
   15554:	94 85       	ldd	r25, Z+12	; 0x0c
   15556:	a5 85       	ldd	r26, Z+13	; 0x0d
   15558:	b6 85       	ldd	r27, Z+14	; 0x0e
   1555a:	ed b7       	in	r30, 0x3d	; 61
   1555c:	fe b7       	in	r31, 0x3e	; 62
   1555e:	84 83       	std	Z+4, r24	; 0x04
   15560:	95 83       	std	Z+5, r25	; 0x05
   15562:	a6 83       	std	Z+6, r26	; 0x06
   15564:	b7 83       	std	Z+7, r27	; 0x07
   15566:	a1 82       	std	Z+1, r10	; 0x01
   15568:	b2 82       	std	Z+2, r11	; 0x02
   1556a:	c3 82       	std	Z+3, r12	; 0x03
   1556c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15570:	df c0       	rjmp	.+446    	; 0x15730 <SS80_Command_State+0x46e>
   15572:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15576:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1557a:	24 33       	cpi	r18, 0x34	; 52
   1557c:	31 05       	cpc	r19, r1
   1557e:	41 f4       	brne	.+16     	; 0x15590 <SS80_Command_State+0x2ce>
   15580:	85 ff       	sbrs	r24, 5
   15582:	d6 c0       	rjmp	.+428    	; 0x15730 <SS80_Command_State+0x46e>
   15584:	ed b7       	in	r30, 0x3d	; 61
   15586:	fe b7       	in	r31, 0x3e	; 62
   15588:	61 82       	std	Z+1, r6	; 0x01
   1558a:	72 82       	std	Z+2, r7	; 0x02
   1558c:	83 82       	std	Z+3, r8	; 0x03
   1558e:	2b c0       	rjmp	.+86     	; 0x155e6 <SS80_Command_State+0x324>
   15590:	29 33       	cpi	r18, 0x39	; 57
   15592:	31 05       	cpc	r19, r1
   15594:	49 f4       	brne	.+18     	; 0x155a8 <SS80_Command_State+0x2e6>
   15596:	87 01       	movw	r16, r14
   15598:	0d 5f       	subi	r16, 0xFD	; 253
   1559a:	1f 4f       	sbci	r17, 0xFF	; 255
   1559c:	85 ff       	sbrs	r24, 5
   1559e:	c8 c0       	rjmp	.+400    	; 0x15730 <SS80_Command_State+0x46e>
   155a0:	2c 89       	ldd	r18, Y+20	; 0x14
   155a2:	3d 89       	ldd	r19, Y+21	; 0x15
   155a4:	4e 89       	ldd	r20, Y+22	; 0x16
   155a6:	1a c0       	rjmp	.+52     	; 0x155dc <SS80_Command_State+0x31a>
   155a8:	2b 33       	cpi	r18, 0x3B	; 59
   155aa:	31 05       	cpc	r19, r1
   155ac:	49 f4       	brne	.+18     	; 0x155c0 <SS80_Command_State+0x2fe>
   155ae:	87 01       	movw	r16, r14
   155b0:	0e 5f       	subi	r16, 0xFE	; 254
   155b2:	1f 4f       	sbci	r17, 0xFF	; 255
   155b4:	85 ff       	sbrs	r24, 5
   155b6:	bc c0       	rjmp	.+376    	; 0x15730 <SS80_Command_State+0x46e>
   155b8:	29 89       	ldd	r18, Y+17	; 0x11
   155ba:	3a 89       	ldd	r19, Y+18	; 0x12
   155bc:	4b 89       	ldd	r20, Y+19	; 0x13
   155be:	0e c0       	rjmp	.+28     	; 0x155dc <SS80_Command_State+0x31a>
   155c0:	28 34       	cpi	r18, 0x48	; 72
   155c2:	31 05       	cpc	r19, r1
   155c4:	99 f4       	brne	.+38     	; 0x155ec <SS80_Command_State+0x32a>
   155c6:	87 01       	movw	r16, r14
   155c8:	0e 5f       	subi	r16, 0xFE	; 254
   155ca:	1f 4f       	sbci	r17, 0xFF	; 255
   155cc:	80 73       	andi	r24, 0x30	; 48
   155ce:	99 27       	eor	r25, r25
   155d0:	89 2b       	or	r24, r25
   155d2:	09 f4       	brne	.+2      	; 0x155d6 <SS80_Command_State+0x314>
   155d4:	ad c0       	rjmp	.+346    	; 0x15730 <SS80_Command_State+0x46e>
   155d6:	2e 85       	ldd	r18, Y+14	; 0x0e
   155d8:	3f 85       	ldd	r19, Y+15	; 0x0f
   155da:	48 89       	ldd	r20, Y+16	; 0x10
   155dc:	ed b7       	in	r30, 0x3d	; 61
   155de:	fe b7       	in	r31, 0x3e	; 62
   155e0:	21 83       	std	Z+1, r18	; 0x01
   155e2:	32 83       	std	Z+2, r19	; 0x02
   155e4:	43 83       	std	Z+3, r20	; 0x03
   155e6:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   155ea:	a2 c0       	rjmp	.+324    	; 0x15730 <SS80_Command_State+0x46e>
   155ec:	24 30       	cpi	r18, 0x04	; 4
   155ee:	31 05       	cpc	r19, r1
   155f0:	41 f4       	brne	.+16     	; 0x15602 <SS80_Command_State+0x340>
   155f2:	80 73       	andi	r24, 0x30	; 48
   155f4:	99 27       	eor	r25, r25
   155f6:	89 2b       	or	r24, r25
   155f8:	09 f4       	brne	.+2      	; 0x155fc <SS80_Command_State+0x33a>
   155fa:	9c c0       	rjmp	.+312    	; 0x15734 <SS80_Command_State+0x472>
   155fc:	8d ed       	ldi	r24, 0xDD	; 221
   155fe:	94 e2       	ldi	r25, 0x24	; 36
   15600:	45 cf       	rjmp	.-374    	; 0x1548c <SS80_Command_State+0x1ca>
   15602:	2e 30       	cpi	r18, 0x0E	; 14
   15604:	31 05       	cpc	r19, r1
   15606:	29 f4       	brne	.+10     	; 0x15612 <SS80_Command_State+0x350>
   15608:	85 ff       	sbrs	r24, 5
   1560a:	94 c0       	rjmp	.+296    	; 0x15734 <SS80_Command_State+0x472>
   1560c:	87 ec       	ldi	r24, 0xC7	; 199
   1560e:	94 e2       	ldi	r25, 0x24	; 36
   15610:	3d cf       	rjmp	.-390    	; 0x1548c <SS80_Command_State+0x1ca>
   15612:	2f 30       	cpi	r18, 0x0F	; 15
   15614:	31 05       	cpc	r19, r1
   15616:	29 f4       	brne	.+10     	; 0x15622 <SS80_Command_State+0x360>
   15618:	85 ff       	sbrs	r24, 5
   1561a:	8c c0       	rjmp	.+280    	; 0x15734 <SS80_Command_State+0x472>
   1561c:	8a ea       	ldi	r24, 0xAA	; 170
   1561e:	94 e2       	ldi	r25, 0x24	; 36
   15620:	35 cf       	rjmp	.-406    	; 0x1548c <SS80_Command_State+0x1ca>
   15622:	21 33       	cpi	r18, 0x31	; 49
   15624:	31 05       	cpc	r19, r1
   15626:	59 f4       	brne	.+22     	; 0x1563e <SS80_Command_State+0x37c>
   15628:	87 01       	movw	r16, r14
   1562a:	0d 5f       	subi	r16, 0xFD	; 253
   1562c:	1f 4f       	sbci	r17, 0xFF	; 255
   1562e:	80 73       	andi	r24, 0x30	; 48
   15630:	99 27       	eor	r25, r25
   15632:	89 2b       	or	r24, r25
   15634:	09 f4       	brne	.+2      	; 0x15638 <SS80_Command_State+0x376>
   15636:	7e c0       	rjmp	.+252    	; 0x15734 <SS80_Command_State+0x472>
   15638:	8e e8       	ldi	r24, 0x8E	; 142
   1563a:	94 e2       	ldi	r25, 0x24	; 36
   1563c:	27 cf       	rjmp	.-434    	; 0x1548c <SS80_Command_State+0x1ca>
   1563e:	25 33       	cpi	r18, 0x35	; 53
   15640:	31 05       	cpc	r19, r1
   15642:	69 f4       	brne	.+26     	; 0x1565e <SS80_Command_State+0x39c>
   15644:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15648:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   1564c:	24 e0       	ldi	r18, 0x04	; 4
   1564e:	30 e0       	ldi	r19, 0x00	; 0
   15650:	31 83       	std	Z+1, r19	; 0x01
   15652:	20 83       	st	Z, r18
   15654:	85 ff       	sbrs	r24, 5
   15656:	6e c0       	rjmp	.+220    	; 0x15734 <SS80_Command_State+0x472>
   15658:	8d e7       	ldi	r24, 0x7D	; 125
   1565a:	94 e2       	ldi	r25, 0x24	; 36
   1565c:	17 cf       	rjmp	.-466    	; 0x1548c <SS80_Command_State+0x1ca>
   1565e:	27 33       	cpi	r18, 0x37	; 55
   15660:	31 05       	cpc	r19, r1
   15662:	59 f4       	brne	.+22     	; 0x1567a <SS80_Command_State+0x3b8>
   15664:	87 01       	movw	r16, r14
   15666:	0d 5f       	subi	r16, 0xFD	; 253
   15668:	1f 4f       	sbci	r17, 0xFF	; 255
   1566a:	80 73       	andi	r24, 0x30	; 48
   1566c:	99 27       	eor	r25, r25
   1566e:	89 2b       	or	r24, r25
   15670:	09 f4       	brne	.+2      	; 0x15674 <SS80_Command_State+0x3b2>
   15672:	60 c0       	rjmp	.+192    	; 0x15734 <SS80_Command_State+0x472>
   15674:	8f e5       	ldi	r24, 0x5F	; 95
   15676:	94 e2       	ldi	r25, 0x24	; 36
   15678:	09 cf       	rjmp	.-494    	; 0x1548c <SS80_Command_State+0x1ca>
   1567a:	2e 33       	cpi	r18, 0x3E	; 62
   1567c:	31 05       	cpc	r19, r1
   1567e:	c1 f4       	brne	.+48     	; 0x156b0 <SS80_Command_State+0x3ee>
   15680:	80 73       	andi	r24, 0x30	; 48
   15682:	99 27       	eor	r25, r25
   15684:	89 2b       	or	r24, r25
   15686:	81 f0       	breq	.+32     	; 0x156a8 <SS80_Command_State+0x3e6>
   15688:	80 e4       	ldi	r24, 0x40	; 64
   1568a:	94 e2       	ldi	r25, 0x24	; 36
   1568c:	a0 e0       	ldi	r26, 0x00	; 0
   1568e:	ed b7       	in	r30, 0x3d	; 61
   15690:	fe b7       	in	r31, 0x3e	; 62
   15692:	81 83       	std	Z+1, r24	; 0x01
   15694:	92 83       	std	Z+2, r25	; 0x02
   15696:	a3 83       	std	Z+3, r26	; 0x03
   15698:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1569c:	62 e6       	ldi	r22, 0x62	; 98
   1569e:	70 e1       	ldi	r23, 0x10	; 16
   156a0:	c8 01       	movw	r24, r16
   156a2:	80 52       	subi	r24, 0x20	; 32
   156a4:	93 4e       	sbci	r25, 0xE3	; 227
   156a6:	69 dc       	rcall	.-1838   	; 0x14f7a <SS80_display_extended_status>
   156a8:	87 01       	movw	r16, r14
   156aa:	07 5f       	subi	r16, 0xF7	; 247
   156ac:	1f 4f       	sbci	r17, 0xFF	; 255
   156ae:	42 c0       	rjmp	.+132    	; 0x15734 <SS80_Command_State+0x472>
   156b0:	2c 34       	cpi	r18, 0x4C	; 76
   156b2:	31 05       	cpc	r19, r1
   156b4:	39 f4       	brne	.+14     	; 0x156c4 <SS80_Command_State+0x402>
   156b6:	80 73       	andi	r24, 0x30	; 48
   156b8:	99 27       	eor	r25, r25
   156ba:	89 2b       	or	r24, r25
   156bc:	d9 f1       	breq	.+118    	; 0x15734 <SS80_Command_State+0x472>
   156be:	85 e2       	ldi	r24, 0x25	; 37
   156c0:	94 e2       	ldi	r25, 0x24	; 36
   156c2:	e4 ce       	rjmp	.-568    	; 0x1548c <SS80_Command_State+0x1ca>
   156c4:	2d 34       	cpi	r18, 0x4D	; 77
   156c6:	31 05       	cpc	r19, r1
   156c8:	39 f4       	brne	.+14     	; 0x156d8 <SS80_Command_State+0x416>
   156ca:	80 73       	andi	r24, 0x30	; 48
   156cc:	99 27       	eor	r25, r25
   156ce:	89 2b       	or	r24, r25
   156d0:	89 f1       	breq	.+98     	; 0x15734 <SS80_Command_State+0x472>
   156d2:	8c e0       	ldi	r24, 0x0C	; 12
   156d4:	94 e2       	ldi	r25, 0x24	; 36
   156d6:	da ce       	rjmp	.-588    	; 0x1548c <SS80_Command_State+0x1ca>
   156d8:	2d 30       	cpi	r18, 0x0D	; 13
   156da:	31 05       	cpc	r19, r1
   156dc:	69 f4       	brne	.+26     	; 0x156f8 <SS80_Command_State+0x436>
   156de:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   156e2:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   156e6:	23 e0       	ldi	r18, 0x03	; 3
   156e8:	30 e0       	ldi	r19, 0x00	; 0
   156ea:	31 83       	std	Z+1, r19	; 0x01
   156ec:	20 83       	st	Z, r18
   156ee:	85 ff       	sbrs	r24, 5
   156f0:	21 c0       	rjmp	.+66     	; 0x15734 <SS80_Command_State+0x472>
   156f2:	85 ef       	ldi	r24, 0xF5	; 245
   156f4:	93 e2       	ldi	r25, 0x23	; 35
   156f6:	ca ce       	rjmp	.-620    	; 0x1548c <SS80_Command_State+0x1ca>
   156f8:	23 33       	cpi	r18, 0x33	; 51
   156fa:	31 05       	cpc	r19, r1
   156fc:	51 f4       	brne	.+20     	; 0x15712 <SS80_Command_State+0x450>
   156fe:	87 01       	movw	r16, r14
   15700:	0c 5f       	subi	r16, 0xFC	; 252
   15702:	1f 4f       	sbci	r17, 0xFF	; 255
   15704:	80 73       	andi	r24, 0x30	; 48
   15706:	99 27       	eor	r25, r25
   15708:	89 2b       	or	r24, r25
   1570a:	a1 f0       	breq	.+40     	; 0x15734 <SS80_Command_State+0x472>
   1570c:	82 ed       	ldi	r24, 0xD2	; 210
   1570e:	93 e2       	ldi	r25, 0x23	; 35
   15710:	bd ce       	rjmp	.-646    	; 0x1548c <SS80_Command_State+0x1ca>
   15712:	80 ff       	sbrs	r24, 0
   15714:	28 c0       	rjmp	.+80     	; 0x15766 <SS80_Command_State+0x4a4>
   15716:	ed b7       	in	r30, 0x3d	; 61
   15718:	fe b7       	in	r31, 0x3e	; 62
   1571a:	35 83       	std	Z+5, r19	; 0x05
   1571c:	24 83       	std	Z+4, r18	; 0x04
   1571e:	82 eb       	ldi	r24, 0xB2	; 178
   15720:	93 e2       	ldi	r25, 0x23	; 35
   15722:	a0 e0       	ldi	r26, 0x00	; 0
   15724:	81 83       	std	Z+1, r24	; 0x01
   15726:	92 83       	std	Z+2, r25	; 0x02
   15728:	a3 83       	std	Z+3, r26	; 0x03
   1572a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1572e:	02 c0       	rjmp	.+4      	; 0x15734 <SS80_Command_State+0x472>
   15730:	78 01       	movw	r14, r16
   15732:	43 ce       	rjmp	.-890    	; 0x153ba <SS80_Command_State+0xf8>
   15734:	8a 85       	ldd	r24, Y+10	; 0x0a
   15736:	9b 85       	ldd	r25, Y+11	; 0x0b
   15738:	08 17       	cp	r16, r24
   1573a:	19 07       	cpc	r17, r25
   1573c:	a1 f0       	breq	.+40     	; 0x15766 <SS80_Command_State+0x4a4>
   1573e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15742:	80 ff       	sbrs	r24, 0
   15744:	10 c0       	rjmp	.+32     	; 0x15766 <SS80_Command_State+0x4a4>
   15746:	2a 85       	ldd	r18, Y+10	; 0x0a
   15748:	3b 85       	ldd	r19, Y+11	; 0x0b
   1574a:	ed b7       	in	r30, 0x3d	; 61
   1574c:	fe b7       	in	r31, 0x3e	; 62
   1574e:	37 83       	std	Z+7, r19	; 0x07
   15750:	26 83       	std	Z+6, r18	; 0x06
   15752:	15 83       	std	Z+5, r17	; 0x05
   15754:	04 83       	std	Z+4, r16	; 0x04
   15756:	8a e7       	ldi	r24, 0x7A	; 122
   15758:	93 e2       	ldi	r25, 0x23	; 35
   1575a:	a0 e0       	ldi	r26, 0x00	; 0
   1575c:	81 83       	std	Z+1, r24	; 0x01
   1575e:	92 83       	std	Z+2, r25	; 0x02
   15760:	a3 83       	std	Z+3, r26	; 0x03
   15762:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15766:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   1576a:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   1576e:	81 81       	ldd	r24, Z+1	; 0x01
   15770:	90 e0       	ldi	r25, 0x00	; 0
   15772:	0e 94 cb 86 	call	0x10d96	; 0x10d96 <gpib_enable_PPR>
   15776:	88 85       	ldd	r24, Y+8	; 0x08
   15778:	99 85       	ldd	r25, Y+9	; 0x09
   1577a:	88 27       	eor	r24, r24
   1577c:	90 7d       	andi	r25, 0xD0	; 208
   1577e:	02 c0       	rjmp	.+4      	; 0x15784 <SS80_Command_State+0x4c2>
   15780:	80 e0       	ldi	r24, 0x00	; 0
   15782:	90 e0       	ldi	r25, 0x00	; 0
   15784:	66 96       	adiw	r28, 0x16	; 22
   15786:	0f b6       	in	r0, 0x3f	; 63
   15788:	f8 94       	cli
   1578a:	de bf       	out	0x3e, r29	; 62
   1578c:	0f be       	out	0x3f, r0	; 63
   1578e:	cd bf       	out	0x3d, r28	; 61
   15790:	df 91       	pop	r29
   15792:	cf 91       	pop	r28
   15794:	1f 91       	pop	r17
   15796:	0f 91       	pop	r16
   15798:	ff 90       	pop	r15
   1579a:	ef 90       	pop	r14
   1579c:	cf 90       	pop	r12
   1579e:	bf 90       	pop	r11
   157a0:	af 90       	pop	r10
   157a2:	8f 90       	pop	r8
   157a4:	7f 90       	pop	r7
   157a6:	6f 90       	pop	r6
   157a8:	4f 90       	pop	r4
   157aa:	3f 90       	pop	r3
   157ac:	2f 90       	pop	r2
   157ae:	08 95       	ret

000157b0 <SS80_cmd_seek>:
   157b0:	a7 e0       	ldi	r26, 0x07	; 7
   157b2:	b0 e0       	ldi	r27, 0x00	; 0
   157b4:	ee ed       	ldi	r30, 0xDE	; 222
   157b6:	fb ea       	ldi	r31, 0xAB	; 171
   157b8:	0c 94 95 e7 	jmp	0x1cf2a	; 0x1cf2a <__prologue_saves__+0x4>
   157bc:	c0 91 5c 19 	lds	r28, 0x195C	; 0x80195c <SS80s>
   157c0:	d0 91 5d 19 	lds	r29, 0x195D	; 0x80195d <SS80s+0x1>
   157c4:	8f 80       	ldd	r8, Y+7	; 0x07
   157c6:	98 84       	ldd	r9, Y+8	; 0x08
   157c8:	a9 84       	ldd	r10, Y+9	; 0x09
   157ca:	ba 84       	ldd	r11, Y+10	; 0x0a
   157cc:	00 91 5e 19 	lds	r16, 0x195E	; 0x80195e <SS80p>
   157d0:	10 91 5f 19 	lds	r17, 0x195F	; 0x80195f <SS80p+0x1>
   157d4:	f8 01       	movw	r30, r16
   157d6:	c2 88       	ldd	r12, Z+18	; 0x12
   157d8:	d3 88       	ldd	r13, Z+19	; 0x13
   157da:	e1 2c       	mov	r14, r1
   157dc:	f1 2c       	mov	r15, r1
   157de:	6b 85       	ldd	r22, Y+11	; 0x0b
   157e0:	7c 85       	ldd	r23, Y+12	; 0x0c
   157e2:	8d 85       	ldd	r24, Y+13	; 0x0d
   157e4:	9e 85       	ldd	r25, Y+14	; 0x0e
   157e6:	a7 01       	movw	r20, r14
   157e8:	96 01       	movw	r18, r12
   157ea:	0e 94 26 e7 	call	0x1ce4c	; 0x1ce4c <__udivmodsi4>
   157ee:	da 01       	movw	r26, r20
   157f0:	c9 01       	movw	r24, r18
   157f2:	88 0d       	add	r24, r8
   157f4:	99 1d       	adc	r25, r9
   157f6:	aa 1d       	adc	r26, r10
   157f8:	bb 1d       	adc	r27, r11
   157fa:	f8 01       	movw	r30, r16
   157fc:	40 a4       	ldd	r4, Z+40	; 0x28
   157fe:	51 a4       	ldd	r5, Z+41	; 0x29
   15800:	62 a4       	ldd	r6, Z+42	; 0x2a
   15802:	73 a4       	ldd	r7, Z+43	; 0x2b
   15804:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   15808:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1580c:	48 16       	cp	r4, r24
   1580e:	59 06       	cpc	r5, r25
   15810:	6a 06       	cpc	r6, r26
   15812:	7b 06       	cpc	r7, r27
   15814:	f0 f4       	brcc	.+60     	; 0x15852 <SS80_cmd_seek+0xa2>
   15816:	81 e0       	ldi	r24, 0x01	; 1
   15818:	8a 83       	std	Y+2, r24	; 0x02
   1581a:	8b 81       	ldd	r24, Y+3	; 0x03
   1581c:	9c 81       	ldd	r25, Y+4	; 0x04
   1581e:	84 60       	ori	r24, 0x04	; 4
   15820:	9c 83       	std	Y+4, r25	; 0x04
   15822:	8b 83       	std	Y+3, r24	; 0x03
   15824:	40 ff       	sbrs	r20, 0
   15826:	31 c0       	rjmp	.+98     	; 0x1588a <SS80_cmd_seek+0xda>
   15828:	a2 89       	ldd	r26, Z+18	; 0x12
   1582a:	b3 89       	ldd	r27, Z+19	; 0x13
   1582c:	a5 01       	movw	r20, r10
   1582e:	94 01       	movw	r18, r8
   15830:	0e 94 73 e7 	call	0x1cee6	; 0x1cee6 <__muluhisi3>
   15834:	ed b7       	in	r30, 0x3d	; 61
   15836:	fe b7       	in	r31, 0x3e	; 62
   15838:	64 83       	std	Z+4, r22	; 0x04
   1583a:	75 83       	std	Z+5, r23	; 0x05
   1583c:	86 83       	std	Z+6, r24	; 0x06
   1583e:	97 83       	std	Z+7, r25	; 0x07
   15840:	87 e3       	ldi	r24, 0x37	; 55
   15842:	92 e2       	ldi	r25, 0x22	; 34
   15844:	a0 e0       	ldi	r26, 0x00	; 0
   15846:	81 83       	std	Z+1, r24	; 0x01
   15848:	92 83       	std	Z+2, r25	; 0x02
   1584a:	a3 83       	std	Z+3, r26	; 0x03
   1584c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15850:	1c c0       	rjmp	.+56     	; 0x1588a <SS80_cmd_seek+0xda>
   15852:	ca 01       	movw	r24, r20
   15854:	80 72       	andi	r24, 0x20	; 32
   15856:	99 27       	eor	r25, r25
   15858:	45 ff       	sbrs	r20, 5
   1585a:	19 c0       	rjmp	.+50     	; 0x1588e <SS80_cmd_seek+0xde>
   1585c:	a5 01       	movw	r20, r10
   1585e:	94 01       	movw	r18, r8
   15860:	c7 01       	movw	r24, r14
   15862:	b6 01       	movw	r22, r12
   15864:	0e 94 e4 e6 	call	0x1cdc8	; 0x1cdc8 <__mulsi3>
   15868:	ed b7       	in	r30, 0x3d	; 61
   1586a:	fe b7       	in	r31, 0x3e	; 62
   1586c:	64 83       	std	Z+4, r22	; 0x04
   1586e:	75 83       	std	Z+5, r23	; 0x05
   15870:	86 83       	std	Z+6, r24	; 0x06
   15872:	97 83       	std	Z+7, r25	; 0x07
   15874:	83 e2       	ldi	r24, 0x23	; 35
   15876:	92 e2       	ldi	r25, 0x22	; 34
   15878:	a0 e0       	ldi	r26, 0x00	; 0
   1587a:	81 83       	std	Z+1, r24	; 0x01
   1587c:	92 83       	std	Z+2, r25	; 0x02
   1587e:	a3 83       	std	Z+3, r26	; 0x03
   15880:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15884:	80 e0       	ldi	r24, 0x00	; 0
   15886:	90 e0       	ldi	r25, 0x00	; 0
   15888:	02 c0       	rjmp	.+4      	; 0x1588e <SS80_cmd_seek+0xde>
   1588a:	81 e0       	ldi	r24, 0x01	; 1
   1588c:	90 e0       	ldi	r25, 0x00	; 0
   1588e:	cd b7       	in	r28, 0x3d	; 61
   15890:	de b7       	in	r29, 0x3e	; 62
   15892:	27 96       	adiw	r28, 0x07	; 7
   15894:	e0 e1       	ldi	r30, 0x10	; 16
   15896:	0c 94 b1 e7 	jmp	0x1cf62	; 0x1cf62 <__epilogue_restores__+0x4>

0001589a <SS80_locate_and_write>:
   1589a:	a3 e1       	ldi	r26, 0x13	; 19
   1589c:	b0 e0       	ldi	r27, 0x00	; 0
   1589e:	e3 e5       	ldi	r30, 0x53	; 83
   158a0:	fc ea       	ldi	r31, 0xAC	; 172
   158a2:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
   158a6:	00 91 5c 19 	lds	r16, 0x195C	; 0x80195c <SS80s>
   158aa:	10 91 5d 19 	lds	r17, 0x195D	; 0x80195d <SS80s+0x1>
   158ae:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <SS80p>
   158b2:	90 91 5f 19 	lds	r25, 0x195F	; 0x80195f <SS80p+0x1>
   158b6:	fc 01       	movw	r30, r24
   158b8:	a2 89       	ldd	r26, Z+18	; 0x12
   158ba:	b3 89       	ldd	r27, Z+19	; 0x13
   158bc:	f8 01       	movw	r30, r16
   158be:	27 81       	ldd	r18, Z+7	; 0x07
   158c0:	30 85       	ldd	r19, Z+8	; 0x08
   158c2:	41 85       	ldd	r20, Z+9	; 0x09
   158c4:	52 85       	ldd	r21, Z+10	; 0x0a
   158c6:	0e 94 73 e7 	call	0x1cee6	; 0x1cee6 <__muluhisi3>
   158ca:	4b 01       	movw	r8, r22
   158cc:	5c 01       	movw	r10, r24
   158ce:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   158d2:	85 ff       	sbrs	r24, 5
   158d4:	16 c0       	rjmp	.+44     	; 0x15902 <SS80_locate_and_write+0x68>
   158d6:	83 85       	ldd	r24, Z+11	; 0x0b
   158d8:	94 85       	ldd	r25, Z+12	; 0x0c
   158da:	a5 85       	ldd	r26, Z+13	; 0x0d
   158dc:	b6 85       	ldd	r27, Z+14	; 0x0e
   158de:	ed b7       	in	r30, 0x3d	; 61
   158e0:	fe b7       	in	r31, 0x3e	; 62
   158e2:	80 87       	std	Z+8, r24	; 0x08
   158e4:	91 87       	std	Z+9, r25	; 0x09
   158e6:	a2 87       	std	Z+10, r26	; 0x0a
   158e8:	b3 87       	std	Z+11, r27	; 0x0b
   158ea:	84 82       	std	Z+4, r8	; 0x04
   158ec:	95 82       	std	Z+5, r9	; 0x05
   158ee:	a6 82       	std	Z+6, r10	; 0x06
   158f0:	b7 82       	std	Z+7, r11	; 0x07
   158f2:	8a eb       	ldi	r24, 0xBA	; 186
   158f4:	97 e2       	ldi	r25, 0x27	; 39
   158f6:	a0 e0       	ldi	r26, 0x00	; 0
   158f8:	81 83       	std	Z+1, r24	; 0x01
   158fa:	92 83       	std	Z+2, r25	; 0x02
   158fc:	a3 83       	std	Z+3, r26	; 0x03
   158fe:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15902:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15906:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   1590a:	12 82       	std	Z+2, r1	; 0x02
   1590c:	54 98       	cbi	0x0a, 4	; 10
   1590e:	4c 99       	sbic	0x09, 4	; 9
   15910:	03 c0       	rjmp	.+6      	; 0x15918 <SS80_locate_and_write+0x7e>
   15912:	80 e0       	ldi	r24, 0x00	; 0
   15914:	90 e1       	ldi	r25, 0x10	; 16
   15916:	4f c1       	rjmp	.+670    	; 0x15bb6 <SS80_locate_and_write+0x31c>
   15918:	4b df       	rcall	.-362    	; 0x157b0 <SS80_cmd_seek>
   1591a:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   1591e:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15922:	89 2b       	or	r24, r25
   15924:	41 f0       	breq	.+16     	; 0x15936 <SS80_locate_and_write+0x9c>
   15926:	83 81       	ldd	r24, Z+3	; 0x03
   15928:	94 81       	ldd	r25, Z+4	; 0x04
   1592a:	82 60       	ori	r24, 0x02	; 2
   1592c:	94 83       	std	Z+4, r25	; 0x04
   1592e:	83 83       	std	Z+3, r24	; 0x03
   15930:	01 e0       	ldi	r16, 0x01	; 1
   15932:	10 e0       	ldi	r17, 0x00	; 0
   15934:	02 c0       	rjmp	.+4      	; 0x1593a <SS80_locate_and_write+0xa0>
   15936:	00 e0       	ldi	r16, 0x00	; 0
   15938:	10 e0       	ldi	r17, 0x00	; 0
   1593a:	23 84       	ldd	r2, Z+11	; 0x0b
   1593c:	34 84       	ldd	r3, Z+12	; 0x0c
   1593e:	1d 86       	std	Y+13, r1	; 0x0d
   15940:	1c 86       	std	Y+12, r1	; 0x0c
   15942:	41 2c       	mov	r4, r1
   15944:	51 2c       	mov	r5, r1
   15946:	32 01       	movw	r6, r4
   15948:	8d e6       	ldi	r24, 0x6D	; 109
   1594a:	97 e2       	ldi	r25, 0x27	; 39
   1594c:	9c 01       	movw	r18, r24
   1594e:	40 e0       	ldi	r20, 0x00	; 0
   15950:	2e 87       	std	Y+14, r18	; 0x0e
   15952:	3f 87       	std	Y+15, r19	; 0x0f
   15954:	48 8b       	std	Y+16, r20	; 0x10
   15956:	83 e9       	ldi	r24, 0x93	; 147
   15958:	97 e2       	ldi	r25, 0x27	; 39
   1595a:	9c 01       	movw	r18, r24
   1595c:	40 e0       	ldi	r20, 0x00	; 0
   1595e:	29 8b       	std	Y+17, r18	; 0x11
   15960:	3a 8b       	std	Y+18, r19	; 0x12
   15962:	4b 8b       	std	Y+19, r20	; 0x13
   15964:	12 14       	cp	r1, r2
   15966:	13 04       	cpc	r1, r3
   15968:	0c f0       	brlt	.+2      	; 0x1596c <SS80_locate_and_write+0xd2>
   1596a:	f5 c0       	rjmp	.+490    	; 0x15b56 <SS80_locate_and_write+0x2bc>
   1596c:	54 98       	cbi	0x0a, 4	; 10
   1596e:	4c 9b       	sbis	0x09, 4	; 9
   15970:	d0 cf       	rjmp	.-96     	; 0x15912 <SS80_locate_and_write+0x78>
   15972:	71 01       	movw	r14, r2
   15974:	31 e0       	ldi	r19, 0x01	; 1
   15976:	23 16       	cp	r2, r19
   15978:	33 06       	cpc	r3, r19
   1597a:	1c f0       	brlt	.+6      	; 0x15982 <SS80_locate_and_write+0xe8>
   1597c:	e1 2c       	mov	r14, r1
   1597e:	ff 24       	eor	r15, r15
   15980:	f3 94       	inc	r15
   15982:	e0 ee       	ldi	r30, 0xE0	; 224
   15984:	fc e1       	ldi	r31, 0x1C	; 28
   15986:	20 e0       	ldi	r18, 0x00	; 0
   15988:	32 e0       	ldi	r19, 0x02	; 2
   1598a:	11 92       	st	Z+, r1
   1598c:	21 50       	subi	r18, 0x01	; 1
   1598e:	30 40       	sbci	r19, 0x00	; 0
   15990:	e1 f7       	brne	.-8      	; 0x1598a <SS80_locate_and_write+0xf0>
   15992:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15996:	87 fd       	sbrc	r24, 7
   15998:	0e 94 f1 85 	call	0x10be2	; 0x10be2 <gpib_timer_elapsed_begin>
   1599c:	ae 01       	movw	r20, r28
   1599e:	44 5f       	subi	r20, 0xF4	; 244
   159a0:	5f 4f       	sbci	r21, 0xFF	; 255
   159a2:	b7 01       	movw	r22, r14
   159a4:	80 ee       	ldi	r24, 0xE0	; 224
   159a6:	9c e1       	ldi	r25, 0x1C	; 28
   159a8:	0e 94 59 8b 	call	0x116b2	; 0x116b2 <gpib_read_str>
   159ac:	6c 01       	movw	r12, r24
   159ae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   159b2:	87 ff       	sbrs	r24, 7
   159b4:	04 c0       	rjmp	.+8      	; 0x159be <SS80_locate_and_write+0x124>
   159b6:	8e e7       	ldi	r24, 0x7E	; 126
   159b8:	90 e1       	ldi	r25, 0x10	; 16
   159ba:	0e 94 03 86 	call	0x10c06	; 0x10c06 <gpib_timer_elapsed_end>
   159be:	ce 14       	cp	r12, r14
   159c0:	df 04       	cpc	r13, r15
   159c2:	39 f1       	breq	.+78     	; 0x15a12 <SS80_locate_and_write+0x178>
   159c4:	8c 85       	ldd	r24, Y+12	; 0x0c
   159c6:	9d 85       	ldd	r25, Y+13	; 0x0d
   159c8:	9c 01       	movw	r18, r24
   159ca:	22 27       	eor	r18, r18
   159cc:	30 7d       	andi	r19, 0xD0	; 208
   159ce:	23 2b       	or	r18, r19
   159d0:	d1 f0       	breq	.+52     	; 0x15a06 <SS80_locate_and_write+0x16c>
   159d2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   159d6:	80 ff       	sbrs	r24, 0
   159d8:	0a c0       	rjmp	.+20     	; 0x159ee <SS80_locate_and_write+0x154>
   159da:	87 ea       	ldi	r24, 0xA7	; 167
   159dc:	97 e2       	ldi	r25, 0x27	; 39
   159de:	a0 e0       	ldi	r26, 0x00	; 0
   159e0:	ed b7       	in	r30, 0x3d	; 61
   159e2:	fe b7       	in	r31, 0x3e	; 62
   159e4:	81 83       	std	Z+1, r24	; 0x01
   159e6:	92 83       	std	Z+2, r25	; 0x02
   159e8:	a3 83       	std	Z+3, r26	; 0x03
   159ea:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   159ee:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   159f2:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   159f6:	83 81       	ldd	r24, Z+3	; 0x03
   159f8:	94 81       	ldd	r25, Z+4	; 0x04
   159fa:	82 60       	ori	r24, 0x02	; 2
   159fc:	94 83       	std	Z+4, r25	; 0x04
   159fe:	83 83       	std	Z+3, r24	; 0x03
   15a00:	81 e0       	ldi	r24, 0x01	; 1
   15a02:	82 83       	std	Z+2, r24	; 0x02
   15a04:	99 c0       	rjmp	.+306    	; 0x15b38 <SS80_locate_and_write+0x29e>
   15a06:	c1 14       	cp	r12, r1
   15a08:	d1 04       	cpc	r13, r1
   15a0a:	09 f0       	breq	.+2      	; 0x15a0e <SS80_locate_and_write+0x174>
   15a0c:	d0 c0       	rjmp	.+416    	; 0x15bae <SS80_locate_and_write+0x314>
   15a0e:	90 fd       	sbrc	r25, 0
   15a10:	93 c0       	rjmp	.+294    	; 0x15b38 <SS80_locate_and_write+0x29e>
   15a12:	01 15       	cp	r16, r1
   15a14:	11 05       	cpc	r17, r1
   15a16:	09 f0       	breq	.+2      	; 0x15a1a <SS80_locate_and_write+0x180>
   15a18:	84 c0       	rjmp	.+264    	; 0x15b22 <SS80_locate_and_write+0x288>
   15a1a:	c1 14       	cp	r12, r1
   15a1c:	d1 04       	cpc	r13, r1
   15a1e:	09 f4       	brne	.+2      	; 0x15a22 <SS80_locate_and_write+0x188>
   15a20:	82 c0       	rjmp	.+260    	; 0x15b26 <SS80_locate_and_write+0x28c>
   15a22:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a26:	86 fd       	sbrc	r24, 6
   15a28:	0e 94 f1 85 	call	0x10be2	; 0x10be2 <gpib_timer_elapsed_begin>
   15a2c:	e0 90 5c 19 	lds	r14, 0x195C	; 0x80195c <SS80s>
   15a30:	f0 90 5d 19 	lds	r15, 0x195D	; 0x80195d <SS80s+0x1>
   15a34:	f3 e0       	ldi	r31, 0x03	; 3
   15a36:	ef 0e       	add	r14, r31
   15a38:	f1 1c       	adc	r15, r1
   15a3a:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   15a3e:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   15a42:	86 01       	movw	r16, r12
   15a44:	20 ee       	ldi	r18, 0xE0	; 224
   15a46:	3c e1       	ldi	r19, 0x1C	; 28
   15a48:	b5 01       	movw	r22, r10
   15a4a:	a4 01       	movw	r20, r8
   15a4c:	82 81       	ldd	r24, Z+2	; 0x02
   15a4e:	93 81       	ldd	r25, Z+3	; 0x03
   15a50:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <dbf_open_write>
   15a54:	7c 01       	movw	r14, r24
   15a56:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15a5a:	86 ff       	sbrs	r24, 6
   15a5c:	04 c0       	rjmp	.+8      	; 0x15a66 <SS80_locate_and_write+0x1cc>
   15a5e:	89 e8       	ldi	r24, 0x89	; 137
   15a60:	90 e1       	ldi	r25, 0x10	; 16
   15a62:	0e 94 03 86 	call	0x10c06	; 0x10c06 <gpib_timer_elapsed_end>
   15a66:	ce 14       	cp	r12, r14
   15a68:	df 04       	cpc	r13, r15
   15a6a:	39 f1       	breq	.+78     	; 0x15aba <SS80_locate_and_write+0x220>
   15a6c:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15a70:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15a74:	83 81       	ldd	r24, Z+3	; 0x03
   15a76:	94 81       	ldd	r25, Z+4	; 0x04
   15a78:	82 60       	ori	r24, 0x02	; 2
   15a7a:	94 83       	std	Z+4, r25	; 0x04
   15a7c:	83 83       	std	Z+3, r24	; 0x03
   15a7e:	0e 94 61 70 	call	0xe0c2	; 0xe0c2 <mmc_wp_status>
   15a82:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15a86:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15a8a:	89 2b       	or	r24, r25
   15a8c:	29 f0       	breq	.+10     	; 0x15a98 <SS80_locate_and_write+0x1fe>
   15a8e:	83 81       	ldd	r24, Z+3	; 0x03
   15a90:	94 81       	ldd	r25, Z+4	; 0x04
   15a92:	88 60       	ori	r24, 0x08	; 8
   15a94:	94 83       	std	Z+4, r25	; 0x04
   15a96:	83 83       	std	Z+3, r24	; 0x03
   15a98:	21 e0       	ldi	r18, 0x01	; 1
   15a9a:	22 83       	std	Z+2, r18	; 0x02
   15a9c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15aa0:	80 ff       	sbrs	r24, 0
   15aa2:	27 c0       	rjmp	.+78     	; 0x15af2 <SS80_locate_and_write+0x258>
   15aa4:	89 89       	ldd	r24, Y+17	; 0x11
   15aa6:	9a 89       	ldd	r25, Y+18	; 0x12
   15aa8:	ab 89       	ldd	r26, Y+19	; 0x13
   15aaa:	ed b7       	in	r30, 0x3d	; 61
   15aac:	fe b7       	in	r31, 0x3e	; 62
   15aae:	81 83       	std	Z+1, r24	; 0x01
   15ab0:	92 83       	std	Z+2, r25	; 0x02
   15ab2:	a3 83       	std	Z+3, r26	; 0x03
   15ab4:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15ab8:	1c c0       	rjmp	.+56     	; 0x15af2 <SS80_locate_and_write+0x258>
   15aba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15abe:	85 ff       	sbrs	r24, 5
   15ac0:	0c c0       	rjmp	.+24     	; 0x15ada <SS80_locate_and_write+0x240>
   15ac2:	ed b7       	in	r30, 0x3d	; 61
   15ac4:	fe b7       	in	r31, 0x3e	; 62
   15ac6:	d5 82       	std	Z+5, r13	; 0x05
   15ac8:	c4 82       	std	Z+4, r12	; 0x04
   15aca:	2e 85       	ldd	r18, Y+14	; 0x0e
   15acc:	3f 85       	ldd	r19, Y+15	; 0x0f
   15ace:	48 89       	ldd	r20, Y+16	; 0x10
   15ad0:	21 83       	std	Z+1, r18	; 0x01
   15ad2:	32 83       	std	Z+2, r19	; 0x02
   15ad4:	43 83       	std	Z+3, r20	; 0x03
   15ad6:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15ada:	c6 01       	movw	r24, r12
   15adc:	0d 2c       	mov	r0, r13
   15ade:	00 0c       	add	r0, r0
   15ae0:	aa 0b       	sbc	r26, r26
   15ae2:	bb 0b       	sbc	r27, r27
   15ae4:	88 0e       	add	r8, r24
   15ae6:	99 1e       	adc	r9, r25
   15ae8:	aa 1e       	adc	r10, r26
   15aea:	bb 1e       	adc	r11, r27
   15aec:	00 e0       	ldi	r16, 0x00	; 0
   15aee:	10 e0       	ldi	r17, 0x00	; 0
   15af0:	05 c0       	rjmp	.+10     	; 0x15afc <SS80_locate_and_write+0x262>
   15af2:	ec 14       	cp	r14, r12
   15af4:	fd 04       	cpc	r15, r13
   15af6:	64 f0       	brlt	.+24     	; 0x15b10 <SS80_locate_and_write+0x276>
   15af8:	01 e0       	ldi	r16, 0x01	; 1
   15afa:	10 e0       	ldi	r17, 0x00	; 0
   15afc:	c7 01       	movw	r24, r14
   15afe:	0f 2c       	mov	r0, r15
   15b00:	00 0c       	add	r0, r0
   15b02:	aa 0b       	sbc	r26, r26
   15b04:	bb 0b       	sbc	r27, r27
   15b06:	48 0e       	add	r4, r24
   15b08:	59 1e       	adc	r5, r25
   15b0a:	6a 1e       	adc	r6, r26
   15b0c:	7b 1e       	adc	r7, r27
   15b0e:	0b c0       	rjmp	.+22     	; 0x15b26 <SS80_locate_and_write+0x28c>
   15b10:	c6 01       	movw	r24, r12
   15b12:	0d 2c       	mov	r0, r13
   15b14:	00 0c       	add	r0, r0
   15b16:	aa 0b       	sbc	r26, r26
   15b18:	bb 0b       	sbc	r27, r27
   15b1a:	48 0e       	add	r4, r24
   15b1c:	59 1e       	adc	r5, r25
   15b1e:	6a 1e       	adc	r6, r26
   15b20:	7b 1e       	adc	r7, r27
   15b22:	01 e0       	ldi	r16, 0x01	; 1
   15b24:	10 e0       	ldi	r17, 0x00	; 0
   15b26:	2c 18       	sub	r2, r12
   15b28:	3d 08       	sbc	r3, r13
   15b2a:	8c 85       	ldd	r24, Y+12	; 0x0c
   15b2c:	9d 85       	ldd	r25, Y+13	; 0x0d
   15b2e:	90 ff       	sbrs	r25, 0
   15b30:	19 cf       	rjmp	.-462    	; 0x15964 <SS80_locate_and_write+0xca>
   15b32:	12 14       	cp	r1, r2
   15b34:	13 04       	cpc	r1, r3
   15b36:	7c f4       	brge	.+30     	; 0x15b56 <SS80_locate_and_write+0x2bc>
   15b38:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15b3c:	80 ff       	sbrs	r24, 0
   15b3e:	1d c0       	rjmp	.+58     	; 0x15b7a <SS80_locate_and_write+0x2e0>
   15b40:	85 e4       	ldi	r24, 0x45	; 69
   15b42:	97 e2       	ldi	r25, 0x27	; 39
   15b44:	a0 e0       	ldi	r26, 0x00	; 0
   15b46:	ed b7       	in	r30, 0x3d	; 61
   15b48:	fe b7       	in	r31, 0x3e	; 62
   15b4a:	81 83       	std	Z+1, r24	; 0x01
   15b4c:	92 83       	std	Z+2, r25	; 0x02
   15b4e:	a3 83       	std	Z+3, r26	; 0x03
   15b50:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15b54:	12 c0       	rjmp	.+36     	; 0x15b7a <SS80_locate_and_write+0x2e0>
   15b56:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15b5a:	85 ff       	sbrs	r24, 5
   15b5c:	0e c0       	rjmp	.+28     	; 0x15b7a <SS80_locate_and_write+0x2e0>
   15b5e:	ed b7       	in	r30, 0x3d	; 61
   15b60:	fe b7       	in	r31, 0x3e	; 62
   15b62:	44 82       	std	Z+4, r4	; 0x04
   15b64:	55 82       	std	Z+5, r5	; 0x05
   15b66:	66 82       	std	Z+6, r6	; 0x06
   15b68:	77 82       	std	Z+7, r7	; 0x07
   15b6a:	8a e1       	ldi	r24, 0x1A	; 26
   15b6c:	97 e2       	ldi	r25, 0x27	; 39
   15b6e:	a0 e0       	ldi	r26, 0x00	; 0
   15b70:	81 83       	std	Z+1, r24	; 0x01
   15b72:	92 83       	std	Z+2, r25	; 0x02
   15b74:	a3 83       	std	Z+3, r26	; 0x03
   15b76:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15b7a:	00 91 5c 19 	lds	r16, 0x195C	; 0x80195c <SS80s>
   15b7e:	10 91 5d 19 	lds	r17, 0x195D	; 0x80195d <SS80s+0x1>
   15b82:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   15b86:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   15b8a:	22 89       	ldd	r18, Z+18	; 0x12
   15b8c:	33 89       	ldd	r19, Z+19	; 0x13
   15b8e:	40 e0       	ldi	r20, 0x00	; 0
   15b90:	50 e0       	ldi	r21, 0x00	; 0
   15b92:	c5 01       	movw	r24, r10
   15b94:	b4 01       	movw	r22, r8
   15b96:	0e 94 26 e7 	call	0x1ce4c	; 0x1ce4c <__udivmodsi4>
   15b9a:	f8 01       	movw	r30, r16
   15b9c:	27 83       	std	Z+7, r18	; 0x07
   15b9e:	30 87       	std	Z+8, r19	; 0x08
   15ba0:	41 87       	std	Z+9, r20	; 0x09
   15ba2:	52 87       	std	Z+10, r21	; 0x0a
   15ba4:	8c 85       	ldd	r24, Y+12	; 0x0c
   15ba6:	9d 85       	ldd	r25, Y+13	; 0x0d
   15ba8:	88 27       	eor	r24, r24
   15baa:	90 7d       	andi	r25, 0xD0	; 208
   15bac:	04 c0       	rjmp	.+8      	; 0x15bb6 <SS80_locate_and_write+0x31c>
   15bae:	01 2b       	or	r16, r17
   15bb0:	09 f4       	brne	.+2      	; 0x15bb4 <SS80_locate_and_write+0x31a>
   15bb2:	37 cf       	rjmp	.-402    	; 0x15a22 <SS80_locate_and_write+0x188>
   15bb4:	b6 cf       	rjmp	.-148    	; 0x15b22 <SS80_locate_and_write+0x288>
   15bb6:	63 96       	adiw	r28, 0x13	; 19
   15bb8:	e2 e1       	ldi	r30, 0x12	; 18
   15bba:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

00015bbe <SS80_Report>:
   15bbe:	a8 e0       	ldi	r26, 0x08	; 8
   15bc0:	b0 e0       	ldi	r27, 0x00	; 0
   15bc2:	e5 ee       	ldi	r30, 0xE5	; 229
   15bc4:	fd ea       	ldi	r31, 0xAD	; 173
   15bc6:	0c 94 a3 e7 	jmp	0x1cf46	; 0x1cf46 <__prologue_saves__+0x20>
   15bca:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15bce:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15bd2:	82 81       	ldd	r24, Z+2	; 0x02
   15bd4:	88 87       	std	Y+8, r24	; 0x08
   15bd6:	80 e0       	ldi	r24, 0x00	; 0
   15bd8:	91 e0       	ldi	r25, 0x01	; 1
   15bda:	9f 83       	std	Y+7, r25	; 0x07
   15bdc:	8e 83       	std	Y+6, r24	; 0x06
   15bde:	ae 01       	movw	r20, r28
   15be0:	4a 5f       	subi	r20, 0xFA	; 250
   15be2:	5f 4f       	sbci	r21, 0xFF	; 255
   15be4:	61 e0       	ldi	r22, 0x01	; 1
   15be6:	70 e0       	ldi	r23, 0x00	; 0
   15be8:	ce 01       	movw	r24, r28
   15bea:	08 96       	adiw	r24, 0x08	; 8
   15bec:	0e 94 fb 8b 	call	0x117f6	; 0x117f6 <gpib_write_str>
   15bf0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15bf4:	01 97       	sbiw	r24, 0x01	; 1
   15bf6:	89 f0       	breq	.+34     	; 0x15c1a <SS80_Report+0x5c>
   15bf8:	20 ff       	sbrs	r18, 0
   15bfa:	0a c0       	rjmp	.+20     	; 0x15c10 <SS80_Report+0x52>
   15bfc:	89 e0       	ldi	r24, 0x09	; 9
   15bfe:	92 e2       	ldi	r25, 0x22	; 34
   15c00:	a0 e0       	ldi	r26, 0x00	; 0
   15c02:	ed b7       	in	r30, 0x3d	; 61
   15c04:	fe b7       	in	r31, 0x3e	; 62
   15c06:	81 83       	std	Z+1, r24	; 0x01
   15c08:	92 83       	std	Z+2, r25	; 0x02
   15c0a:	a3 83       	std	Z+3, r26	; 0x03
   15c0c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15c10:	8e 81       	ldd	r24, Y+6	; 0x06
   15c12:	9f 81       	ldd	r25, Y+7	; 0x07
   15c14:	88 27       	eor	r24, r24
   15c16:	90 7d       	andi	r25, 0xD0	; 208
   15c18:	1b c0       	rjmp	.+54     	; 0x15c50 <SS80_Report+0x92>
   15c1a:	25 ff       	sbrs	r18, 5
   15c1c:	12 c0       	rjmp	.+36     	; 0x15c42 <SS80_Report+0x84>
   15c1e:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15c22:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15c26:	82 81       	ldd	r24, Z+2	; 0x02
   15c28:	90 e0       	ldi	r25, 0x00	; 0
   15c2a:	ed b7       	in	r30, 0x3d	; 61
   15c2c:	fe b7       	in	r31, 0x3e	; 62
   15c2e:	95 83       	std	Z+5, r25	; 0x05
   15c30:	84 83       	std	Z+4, r24	; 0x04
   15c32:	86 ef       	ldi	r24, 0xF6	; 246
   15c34:	91 e2       	ldi	r25, 0x21	; 33
   15c36:	a0 e0       	ldi	r26, 0x00	; 0
   15c38:	81 83       	std	Z+1, r24	; 0x01
   15c3a:	92 83       	std	Z+2, r25	; 0x02
   15c3c:	a3 83       	std	Z+3, r26	; 0x03
   15c3e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15c42:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15c46:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15c4a:	12 82       	std	Z+2, r1	; 0x02
   15c4c:	80 e0       	ldi	r24, 0x00	; 0
   15c4e:	90 e0       	ldi	r25, 0x00	; 0
   15c50:	28 96       	adiw	r28, 0x08	; 8
   15c52:	e2 e0       	ldi	r30, 0x02	; 2
   15c54:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00015c58 <Clear_Common>:
   15c58:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15c5c:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15c60:	25 81       	ldd	r18, Z+5	; 0x05
   15c62:	30 e0       	ldi	r19, 0x00	; 0
   15c64:	28 17       	cp	r18, r24
   15c66:	39 07       	cpc	r19, r25
   15c68:	19 f0       	breq	.+6      	; 0x15c70 <Clear_Common+0x18>
   15c6a:	0f 97       	sbiw	r24, 0x0f	; 15
   15c6c:	99 f4       	brne	.+38     	; 0x15c94 <Clear_Common+0x3c>
   15c6e:	03 c0       	rjmp	.+6      	; 0x15c76 <Clear_Common+0x1e>
   15c70:	2f 30       	cpi	r18, 0x0F	; 15
   15c72:	31 05       	cpc	r19, r1
   15c74:	09 f4       	brne	.+2      	; 0x15c78 <Clear_Common+0x20>
   15c76:	15 82       	std	Z+5, r1	; 0x05
   15c78:	16 82       	std	Z+6, r1	; 0x06
   15c7a:	17 82       	std	Z+7, r1	; 0x07
   15c7c:	10 86       	std	Z+8, r1	; 0x08
   15c7e:	11 86       	std	Z+9, r1	; 0x09
   15c80:	12 86       	std	Z+10, r1	; 0x0a
   15c82:	13 86       	std	Z+11, r1	; 0x0b
   15c84:	14 86       	std	Z+12, r1	; 0x0c
   15c86:	15 86       	std	Z+13, r1	; 0x0d
   15c88:	16 86       	std	Z+14, r1	; 0x0e
   15c8a:	11 82       	std	Z+1, r1	; 0x01
   15c8c:	10 82       	st	Z, r1
   15c8e:	14 82       	std	Z+4, r1	; 0x04
   15c90:	13 82       	std	Z+3, r1	; 0x03
   15c92:	12 82       	std	Z+2, r1	; 0x02
   15c94:	08 95       	ret

00015c96 <SS80_init>:
   15c96:	cf 92       	push	r12
   15c98:	df 92       	push	r13
   15c9a:	ef 92       	push	r14
   15c9c:	0f 93       	push	r16
   15c9e:	1f 93       	push	r17
   15ca0:	cf 93       	push	r28
   15ca2:	df 93       	push	r29
   15ca4:	00 d0       	rcall	.+0      	; 0x15ca6 <SS80_init+0x10>
   15ca6:	00 d0       	rcall	.+0      	; 0x15ca8 <SS80_init+0x12>
   15ca8:	1f 92       	push	r1
   15caa:	03 e6       	ldi	r16, 0x63	; 99
   15cac:	1f e1       	ldi	r17, 0x1F	; 31
   15cae:	cb e0       	ldi	r28, 0x0B	; 11
   15cb0:	d2 e0       	ldi	r29, 0x02	; 2
   15cb2:	83 ec       	ldi	r24, 0xC3	; 195
   15cb4:	98 e2       	ldi	r25, 0x28	; 40
   15cb6:	6c 01       	movw	r12, r24
   15cb8:	e1 2c       	mov	r14, r1
   15cba:	f8 01       	movw	r30, r16
   15cbc:	80 81       	ld	r24, Z
   15cbe:	83 30       	cpi	r24, 0x03	; 3
   15cc0:	29 f5       	brne	.+74     	; 0x15d0c <SS80_init+0x76>
   15cc2:	8c 2f       	mov	r24, r28
   15cc4:	0e 94 b9 97 	call	0x12f72	; 0x12f72 <set_active_device>
   15cc8:	88 23       	and	r24, r24
   15cca:	01 f1       	breq	.+64     	; 0x15d0c <SS80_init+0x76>
   15ccc:	8f e0       	ldi	r24, 0x0F	; 15
   15cce:	90 e0       	ldi	r25, 0x00	; 0
   15cd0:	c3 df       	rcall	.-122    	; 0x15c58 <Clear_Common>
   15cd2:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15cd6:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15cda:	d2 83       	std	Z+2, r29	; 0x02
   15cdc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15ce0:	85 ff       	sbrs	r24, 5
   15ce2:	0c c0       	rjmp	.+24     	; 0x15cfc <SS80_init+0x66>
   15ce4:	f8 01       	movw	r30, r16
   15ce6:	81 81       	ldd	r24, Z+1	; 0x01
   15ce8:	90 e0       	ldi	r25, 0x00	; 0
   15cea:	ed b7       	in	r30, 0x3d	; 61
   15cec:	fe b7       	in	r31, 0x3e	; 62
   15cee:	95 83       	std	Z+5, r25	; 0x05
   15cf0:	84 83       	std	Z+4, r24	; 0x04
   15cf2:	c1 82       	std	Z+1, r12	; 0x01
   15cf4:	d2 82       	std	Z+2, r13	; 0x02
   15cf6:	e3 82       	std	Z+3, r14	; 0x03
   15cf8:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15cfc:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   15d00:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   15d04:	81 81       	ldd	r24, Z+1	; 0x01
   15d06:	90 e0       	ldi	r25, 0x00	; 0
   15d08:	0e 94 01 87 	call	0x10e02	; 0x10e02 <gpib_disable_PPR>
   15d0c:	0b 50       	subi	r16, 0x0B	; 11
   15d0e:	11 09       	sbc	r17, r1
   15d10:	c1 50       	subi	r28, 0x01	; 1
   15d12:	98 f6       	brcc	.-90     	; 0x15cba <SS80_init+0x24>
   15d14:	0f 90       	pop	r0
   15d16:	0f 90       	pop	r0
   15d18:	0f 90       	pop	r0
   15d1a:	0f 90       	pop	r0
   15d1c:	0f 90       	pop	r0
   15d1e:	df 91       	pop	r29
   15d20:	cf 91       	pop	r28
   15d22:	1f 91       	pop	r17
   15d24:	0f 91       	pop	r16
   15d26:	ef 90       	pop	r14
   15d28:	df 90       	pop	r13
   15d2a:	cf 90       	pop	r12
   15d2c:	08 95       	ret

00015d2e <SS80_Channel_Independent_Clear>:
   15d2e:	94 df       	rcall	.-216    	; 0x15c58 <Clear_Common>
   15d30:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   15d34:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   15d38:	81 81       	ldd	r24, Z+1	; 0x01
   15d3a:	90 e0       	ldi	r25, 0x00	; 0
   15d3c:	0e 94 cb 86 	call	0x10d96	; 0x10d96 <gpib_enable_PPR>
   15d40:	80 e0       	ldi	r24, 0x00	; 0
   15d42:	90 e0       	ldi	r25, 0x00	; 0
   15d44:	08 95       	ret

00015d46 <SS80_Universal_Device_Clear>:
   15d46:	8f e0       	ldi	r24, 0x0F	; 15
   15d48:	90 e0       	ldi	r25, 0x00	; 0
   15d4a:	86 df       	rcall	.-244    	; 0x15c58 <Clear_Common>
   15d4c:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   15d50:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   15d54:	81 81       	ldd	r24, Z+1	; 0x01
   15d56:	90 e0       	ldi	r25, 0x00	; 0
   15d58:	0e 94 cb 86 	call	0x10d96	; 0x10d96 <gpib_enable_PPR>
   15d5c:	80 e0       	ldi	r24, 0x00	; 0
   15d5e:	90 e0       	ldi	r25, 0x00	; 0
   15d60:	08 95       	ret

00015d62 <SS80_Selected_Device_Clear>:
   15d62:	cf 93       	push	r28
   15d64:	df 93       	push	r29
   15d66:	00 d0       	rcall	.+0      	; 0x15d68 <SS80_Selected_Device_Clear+0x6>
   15d68:	1f 92       	push	r1
   15d6a:	ec 01       	movw	r28, r24
   15d6c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d70:	85 ff       	sbrs	r24, 5
   15d72:	0a c0       	rjmp	.+20     	; 0x15d88 <SS80_Selected_Device_Clear+0x26>
   15d74:	8a ee       	ldi	r24, 0xEA	; 234
   15d76:	91 e2       	ldi	r25, 0x21	; 33
   15d78:	a0 e0       	ldi	r26, 0x00	; 0
   15d7a:	ed b7       	in	r30, 0x3d	; 61
   15d7c:	fe b7       	in	r31, 0x3e	; 62
   15d7e:	81 83       	std	Z+1, r24	; 0x01
   15d80:	92 83       	std	Z+2, r25	; 0x02
   15d82:	a3 83       	std	Z+3, r26	; 0x03
   15d84:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15d88:	ce 01       	movw	r24, r28
   15d8a:	66 df       	rcall	.-308    	; 0x15c58 <Clear_Common>
   15d8c:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   15d90:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   15d94:	81 81       	ldd	r24, Z+1	; 0x01
   15d96:	90 e0       	ldi	r25, 0x00	; 0
   15d98:	0e 94 cb 86 	call	0x10d96	; 0x10d96 <gpib_enable_PPR>
   15d9c:	80 e0       	ldi	r24, 0x00	; 0
   15d9e:	90 e0       	ldi	r25, 0x00	; 0
   15da0:	cd b7       	in	r28, 0x3d	; 61
   15da2:	de b7       	in	r29, 0x3e	; 62
   15da4:	23 96       	adiw	r28, 0x03	; 3
   15da6:	e2 e0       	ldi	r30, 0x02	; 2
   15da8:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00015dac <SS80_Amigo_Clear>:
   15dac:	a6 e0       	ldi	r26, 0x06	; 6
   15dae:	b0 e0       	ldi	r27, 0x00	; 0
   15db0:	ec ed       	ldi	r30, 0xDC	; 220
   15db2:	fe ea       	ldi	r31, 0xAE	; 174
   15db4:	0c 94 a3 e7 	jmp	0x1cf46	; 0x1cf46 <__prologue_saves__+0x20>
   15db8:	1d 82       	std	Y+5, r1	; 0x05
   15dba:	1c 82       	std	Y+4, r1	; 0x04
   15dbc:	ae 01       	movw	r20, r28
   15dbe:	4c 5f       	subi	r20, 0xFC	; 252
   15dc0:	5f 4f       	sbci	r21, 0xFF	; 255
   15dc2:	61 e0       	ldi	r22, 0x01	; 1
   15dc4:	70 e0       	ldi	r23, 0x00	; 0
   15dc6:	ce 01       	movw	r24, r28
   15dc8:	06 96       	adiw	r24, 0x06	; 6
   15dca:	0e 94 59 8b 	call	0x116b2	; 0x116b2 <gpib_read_str>
   15dce:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15dd2:	01 97       	sbiw	r24, 0x01	; 1
   15dd4:	89 f0       	breq	.+34     	; 0x15df8 <SS80_Amigo_Clear+0x4c>
   15dd6:	20 ff       	sbrs	r18, 0
   15dd8:	0a c0       	rjmp	.+20     	; 0x15dee <SS80_Amigo_Clear+0x42>
   15dda:	87 ed       	ldi	r24, 0xD7	; 215
   15ddc:	91 e2       	ldi	r25, 0x21	; 33
   15dde:	a0 e0       	ldi	r26, 0x00	; 0
   15de0:	ed b7       	in	r30, 0x3d	; 61
   15de2:	fe b7       	in	r31, 0x3e	; 62
   15de4:	81 83       	std	Z+1, r24	; 0x01
   15de6:	92 83       	std	Z+2, r25	; 0x02
   15de8:	a3 83       	std	Z+3, r26	; 0x03
   15dea:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15dee:	8c 81       	ldd	r24, Y+4	; 0x04
   15df0:	9d 81       	ldd	r25, Y+5	; 0x05
   15df2:	88 27       	eor	r24, r24
   15df4:	90 7d       	andi	r25, 0xD0	; 208
   15df6:	19 c0       	rjmp	.+50     	; 0x15e2a <SS80_Amigo_Clear+0x7e>
   15df8:	25 ff       	sbrs	r18, 5
   15dfa:	0a c0       	rjmp	.+20     	; 0x15e10 <SS80_Amigo_Clear+0x64>
   15dfc:	88 ec       	ldi	r24, 0xC8	; 200
   15dfe:	91 e2       	ldi	r25, 0x21	; 33
   15e00:	a0 e0       	ldi	r26, 0x00	; 0
   15e02:	ed b7       	in	r30, 0x3d	; 61
   15e04:	fe b7       	in	r31, 0x3e	; 62
   15e06:	81 83       	std	Z+1, r24	; 0x01
   15e08:	92 83       	std	Z+2, r25	; 0x02
   15e0a:	a3 83       	std	Z+3, r26	; 0x03
   15e0c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15e10:	8f e0       	ldi	r24, 0x0F	; 15
   15e12:	90 e0       	ldi	r25, 0x00	; 0
   15e14:	21 df       	rcall	.-446    	; 0x15c58 <Clear_Common>
   15e16:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   15e1a:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   15e1e:	81 81       	ldd	r24, Z+1	; 0x01
   15e20:	90 e0       	ldi	r25, 0x00	; 0
   15e22:	0e 94 cb 86 	call	0x10d96	; 0x10d96 <gpib_enable_PPR>
   15e26:	80 e0       	ldi	r24, 0x00	; 0
   15e28:	90 e0       	ldi	r25, 0x00	; 0
   15e2a:	26 96       	adiw	r28, 0x06	; 6
   15e2c:	e2 e0       	ldi	r30, 0x02	; 2
   15e2e:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00015e32 <SS80_Cancel>:
   15e32:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15e36:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15e3a:	11 82       	std	Z+1, r1	; 0x01
   15e3c:	10 82       	st	Z, r1
   15e3e:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   15e42:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   15e46:	81 81       	ldd	r24, Z+1	; 0x01
   15e48:	90 e0       	ldi	r25, 0x00	; 0
   15e4a:	0e 94 cb 86 	call	0x10d96	; 0x10d96 <gpib_enable_PPR>
   15e4e:	80 e0       	ldi	r24, 0x00	; 0
   15e50:	90 e0       	ldi	r25, 0x00	; 0
   15e52:	08 95       	ret

00015e54 <SS80_Transparent_State>:
   15e54:	a9 e0       	ldi	r26, 0x09	; 9
   15e56:	b0 e0       	ldi	r27, 0x00	; 0
   15e58:	e0 e3       	ldi	r30, 0x30	; 48
   15e5a:	ff ea       	ldi	r31, 0xAF	; 175
   15e5c:	0c 94 9b e7 	jmp	0x1cf36	; 0x1cf36 <__prologue_saves__+0x10>
   15e60:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   15e64:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   15e68:	81 81       	ldd	r24, Z+1	; 0x01
   15e6a:	90 e0       	ldi	r25, 0x00	; 0
   15e6c:	0e 94 01 87 	call	0x10e02	; 0x10e02 <gpib_disable_PPR>
   15e70:	80 e0       	ldi	r24, 0x00	; 0
   15e72:	91 e0       	ldi	r25, 0x01	; 1
   15e74:	99 87       	std	Y+9, r25	; 0x09
   15e76:	88 87       	std	Y+8, r24	; 0x08
   15e78:	ae 01       	movw	r20, r28
   15e7a:	48 5f       	subi	r20, 0xF8	; 248
   15e7c:	5f 4f       	sbci	r21, 0xFF	; 255
   15e7e:	60 e0       	ldi	r22, 0x00	; 0
   15e80:	72 e0       	ldi	r23, 0x02	; 2
   15e82:	80 ee       	ldi	r24, 0xE0	; 224
   15e84:	9c e1       	ldi	r25, 0x1C	; 28
   15e86:	0e 94 59 8b 	call	0x116b2	; 0x116b2 <gpib_read_str>
   15e8a:	7c 01       	movw	r14, r24
   15e8c:	88 85       	ldd	r24, Y+8	; 0x08
   15e8e:	99 85       	ldd	r25, Y+9	; 0x09
   15e90:	9c 01       	movw	r18, r24
   15e92:	22 27       	eor	r18, r18
   15e94:	30 7d       	andi	r19, 0xD0	; 208
   15e96:	23 2b       	or	r18, r19
   15e98:	79 f0       	breq	.+30     	; 0x15eb8 <SS80_Transparent_State+0x64>
   15e9a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e9e:	80 ff       	sbrs	r24, 0
   15ea0:	da c0       	rjmp	.+436    	; 0x16056 <SS80_Transparent_State+0x202>
   15ea2:	87 e6       	ldi	r24, 0x67	; 103
   15ea4:	93 e2       	ldi	r25, 0x23	; 35
   15ea6:	a0 e0       	ldi	r26, 0x00	; 0
   15ea8:	ed b7       	in	r30, 0x3d	; 61
   15eaa:	fe b7       	in	r31, 0x3e	; 62
   15eac:	81 83       	std	Z+1, r24	; 0x01
   15eae:	92 83       	std	Z+2, r25	; 0x02
   15eb0:	a3 83       	std	Z+3, r26	; 0x03
   15eb2:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15eb6:	cf c0       	rjmp	.+414    	; 0x16056 <SS80_Transparent_State+0x202>
   15eb8:	e1 14       	cp	r14, r1
   15eba:	f1 04       	cpc	r15, r1
   15ebc:	09 f4       	brne	.+2      	; 0x15ec0 <SS80_Transparent_State+0x6c>
   15ebe:	d0 c0       	rjmp	.+416    	; 0x16060 <SS80_Transparent_State+0x20c>
   15ec0:	90 fd       	sbrc	r25, 0
   15ec2:	0e c0       	rjmp	.+28     	; 0x15ee0 <SS80_Transparent_State+0x8c>
   15ec4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15ec8:	80 ff       	sbrs	r24, 0
   15eca:	0a c0       	rjmp	.+20     	; 0x15ee0 <SS80_Transparent_State+0x8c>
   15ecc:	8e e4       	ldi	r24, 0x4E	; 78
   15ece:	93 e2       	ldi	r25, 0x23	; 35
   15ed0:	a0 e0       	ldi	r26, 0x00	; 0
   15ed2:	ed b7       	in	r30, 0x3d	; 61
   15ed4:	fe b7       	in	r31, 0x3e	; 62
   15ed6:	81 83       	std	Z+1, r24	; 0x01
   15ed8:	92 83       	std	Z+2, r25	; 0x02
   15eda:	a3 83       	std	Z+3, r26	; 0x03
   15edc:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15ee0:	80 ee       	ldi	r24, 0xE0	; 224
   15ee2:	a8 2e       	mov	r10, r24
   15ee4:	8c e1       	ldi	r24, 0x1C	; 28
   15ee6:	b8 2e       	mov	r11, r24
   15ee8:	00 e0       	ldi	r16, 0x00	; 0
   15eea:	10 e0       	ldi	r17, 0x00	; 0
   15eec:	0e 15       	cp	r16, r14
   15eee:	1f 05       	cpc	r17, r15
   15ef0:	0c f0       	brlt	.+2      	; 0x15ef4 <SS80_Transparent_State+0xa0>
   15ef2:	9c c0       	rjmp	.+312    	; 0x1602c <SS80_Transparent_State+0x1d8>
   15ef4:	68 01       	movw	r12, r16
   15ef6:	ff ef       	ldi	r31, 0xFF	; 255
   15ef8:	cf 1a       	sub	r12, r31
   15efa:	df 0a       	sbc	r13, r31
   15efc:	f5 01       	movw	r30, r10
   15efe:	81 91       	ld	r24, Z+
   15f00:	5f 01       	movw	r10, r30
   15f02:	28 2f       	mov	r18, r24
   15f04:	30 e0       	ldi	r19, 0x00	; 0
   15f06:	a9 01       	movw	r20, r18
   15f08:	40 52       	subi	r20, 0x20	; 32
   15f0a:	51 09       	sbc	r21, r1
   15f0c:	40 31       	cpi	r20, 0x10	; 16
   15f0e:	51 05       	cpc	r21, r1
   15f10:	20 f4       	brcc	.+8      	; 0x15f1a <SS80_Transparent_State+0xc6>
   15f12:	80 52       	subi	r24, 0x20	; 32
   15f14:	86 d9       	rcall	.-3316   	; 0x15222 <SS80_Check_Unit>
   15f16:	86 01       	movw	r16, r12
   15f18:	e9 cf       	rjmp	.-46     	; 0x15eec <SS80_Transparent_State+0x98>
   15f1a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f1e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   15f22:	21 30       	cpi	r18, 0x01	; 1
   15f24:	31 05       	cpc	r19, r1
   15f26:	c9 f4       	brne	.+50     	; 0x15f5a <SS80_Transparent_State+0x106>
   15f28:	0e 5f       	subi	r16, 0xFE	; 254
   15f2a:	1f 4f       	sbci	r17, 0xFF	; 255
   15f2c:	80 73       	andi	r24, 0x30	; 48
   15f2e:	99 27       	eor	r25, r25
   15f30:	89 2b       	or	r24, r25
   15f32:	51 f0       	breq	.+20     	; 0x15f48 <SS80_Transparent_State+0xf4>
   15f34:	89 e2       	ldi	r24, 0x29	; 41
   15f36:	93 e2       	ldi	r25, 0x23	; 35
   15f38:	a0 e0       	ldi	r26, 0x00	; 0
   15f3a:	ed b7       	in	r30, 0x3d	; 61
   15f3c:	fe b7       	in	r31, 0x3e	; 62
   15f3e:	81 83       	std	Z+1, r24	; 0x01
   15f40:	92 83       	std	Z+2, r25	; 0x02
   15f42:	a3 83       	std	Z+3, r26	; 0x03
   15f44:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15f48:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   15f4c:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   15f50:	81 81       	ldd	r24, Z+1	; 0x01
   15f52:	90 e0       	ldi	r25, 0x00	; 0
   15f54:	0e 94 cb 86 	call	0x10d96	; 0x10d96 <gpib_enable_PPR>
   15f58:	69 c0       	rjmp	.+210    	; 0x1602c <SS80_Transparent_State+0x1d8>
   15f5a:	22 30       	cpi	r18, 0x02	; 2
   15f5c:	31 05       	cpc	r19, r1
   15f5e:	51 f4       	brne	.+20     	; 0x15f74 <SS80_Transparent_State+0x120>
   15f60:	0b 5f       	subi	r16, 0xFB	; 251
   15f62:	1f 4f       	sbci	r17, 0xFF	; 255
   15f64:	80 73       	andi	r24, 0x30	; 48
   15f66:	99 27       	eor	r25, r25
   15f68:	89 2b       	or	r24, r25
   15f6a:	09 f4       	brne	.+2      	; 0x15f6e <SS80_Transparent_State+0x11a>
   15f6c:	5f c0       	rjmp	.+190    	; 0x1602c <SS80_Transparent_State+0x1d8>
   15f6e:	8c e0       	ldi	r24, 0x0C	; 12
   15f70:	93 e2       	ldi	r25, 0x23	; 35
   15f72:	0c c0       	rjmp	.+24     	; 0x15f8c <SS80_Transparent_State+0x138>
   15f74:	23 30       	cpi	r18, 0x03	; 3
   15f76:	31 05       	cpc	r19, r1
   15f78:	91 f4       	brne	.+36     	; 0x15f9e <SS80_Transparent_State+0x14a>
   15f7a:	0b 5f       	subi	r16, 0xFB	; 251
   15f7c:	1f 4f       	sbci	r17, 0xFF	; 255
   15f7e:	80 73       	andi	r24, 0x30	; 48
   15f80:	99 27       	eor	r25, r25
   15f82:	89 2b       	or	r24, r25
   15f84:	09 f4       	brne	.+2      	; 0x15f88 <SS80_Transparent_State+0x134>
   15f86:	52 c0       	rjmp	.+164    	; 0x1602c <SS80_Transparent_State+0x1d8>
   15f88:	8e ee       	ldi	r24, 0xEE	; 238
   15f8a:	92 e2       	ldi	r25, 0x22	; 34
   15f8c:	a0 e0       	ldi	r26, 0x00	; 0
   15f8e:	ed b7       	in	r30, 0x3d	; 61
   15f90:	fe b7       	in	r31, 0x3e	; 62
   15f92:	81 83       	std	Z+1, r24	; 0x01
   15f94:	92 83       	std	Z+2, r25	; 0x02
   15f96:	a3 83       	std	Z+3, r26	; 0x03
   15f98:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15f9c:	47 c0       	rjmp	.+142    	; 0x1602c <SS80_Transparent_State+0x1d8>
   15f9e:	28 30       	cpi	r18, 0x08	; 8
   15fa0:	31 05       	cpc	r19, r1
   15fa2:	e1 f4       	brne	.+56     	; 0x15fdc <SS80_Transparent_State+0x188>
   15fa4:	85 ff       	sbrs	r24, 5
   15fa6:	12 c0       	rjmp	.+36     	; 0x15fcc <SS80_Transparent_State+0x178>
   15fa8:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15fac:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15fb0:	85 81       	ldd	r24, Z+5	; 0x05
   15fb2:	90 e0       	ldi	r25, 0x00	; 0
   15fb4:	ed b7       	in	r30, 0x3d	; 61
   15fb6:	fe b7       	in	r31, 0x3e	; 62
   15fb8:	95 83       	std	Z+5, r25	; 0x05
   15fba:	84 83       	std	Z+4, r24	; 0x04
   15fbc:	87 ec       	ldi	r24, 0xC7	; 199
   15fbe:	92 e2       	ldi	r25, 0x22	; 34
   15fc0:	a0 e0       	ldi	r26, 0x00	; 0
   15fc2:	81 83       	std	Z+1, r24	; 0x01
   15fc4:	92 83       	std	Z+2, r25	; 0x02
   15fc6:	a3 83       	std	Z+3, r26	; 0x03
   15fc8:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   15fcc:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15fd0:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15fd4:	85 81       	ldd	r24, Z+5	; 0x05
   15fd6:	90 e0       	ldi	r25, 0x00	; 0
   15fd8:	aa de       	rcall	.-684    	; 0x15d2e <SS80_Channel_Independent_Clear>
   15fda:	44 c0       	rjmp	.+136    	; 0x16064 <SS80_Transparent_State+0x210>
   15fdc:	29 30       	cpi	r18, 0x09	; 9
   15fde:	31 05       	cpc	r19, r1
   15fe0:	b1 f4       	brne	.+44     	; 0x1600e <SS80_Transparent_State+0x1ba>
   15fe2:	85 ff       	sbrs	r24, 5
   15fe4:	12 c0       	rjmp	.+36     	; 0x1600a <SS80_Transparent_State+0x1b6>
   15fe6:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15fea:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15fee:	85 81       	ldd	r24, Z+5	; 0x05
   15ff0:	90 e0       	ldi	r25, 0x00	; 0
   15ff2:	ed b7       	in	r30, 0x3d	; 61
   15ff4:	fe b7       	in	r31, 0x3e	; 62
   15ff6:	95 83       	std	Z+5, r25	; 0x05
   15ff8:	84 83       	std	Z+4, r24	; 0x04
   15ffa:	83 eb       	ldi	r24, 0xB3	; 179
   15ffc:	92 e2       	ldi	r25, 0x22	; 34
   15ffe:	a0 e0       	ldi	r26, 0x00	; 0
   16000:	81 83       	std	Z+1, r24	; 0x01
   16002:	92 83       	std	Z+2, r25	; 0x02
   16004:	a3 83       	std	Z+3, r26	; 0x03
   16006:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1600a:	13 df       	rcall	.-474    	; 0x15e32 <SS80_Cancel>
   1600c:	2b c0       	rjmp	.+86     	; 0x16064 <SS80_Transparent_State+0x210>
   1600e:	80 ff       	sbrs	r24, 0
   16010:	22 c0       	rjmp	.+68     	; 0x16056 <SS80_Transparent_State+0x202>
   16012:	ed b7       	in	r30, 0x3d	; 61
   16014:	fe b7       	in	r31, 0x3e	; 62
   16016:	35 83       	std	Z+5, r19	; 0x05
   16018:	24 83       	std	Z+4, r18	; 0x04
   1601a:	83 e9       	ldi	r24, 0x93	; 147
   1601c:	92 e2       	ldi	r25, 0x22	; 34
   1601e:	a0 e0       	ldi	r26, 0x00	; 0
   16020:	81 83       	std	Z+1, r24	; 0x01
   16022:	92 83       	std	Z+2, r25	; 0x02
   16024:	a3 83       	std	Z+3, r26	; 0x03
   16026:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1602a:	86 01       	movw	r16, r12
   1602c:	0e 15       	cp	r16, r14
   1602e:	1f 05       	cpc	r17, r15
   16030:	91 f0       	breq	.+36     	; 0x16056 <SS80_Transparent_State+0x202>
   16032:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16036:	80 ff       	sbrs	r24, 0
   16038:	0e c0       	rjmp	.+28     	; 0x16056 <SS80_Transparent_State+0x202>
   1603a:	ed b7       	in	r30, 0x3d	; 61
   1603c:	fe b7       	in	r31, 0x3e	; 62
   1603e:	f7 82       	std	Z+7, r15	; 0x07
   16040:	e6 82       	std	Z+6, r14	; 0x06
   16042:	15 83       	std	Z+5, r17	; 0x05
   16044:	04 83       	std	Z+4, r16	; 0x04
   16046:	87 e5       	ldi	r24, 0x57	; 87
   16048:	92 e2       	ldi	r25, 0x22	; 34
   1604a:	a0 e0       	ldi	r26, 0x00	; 0
   1604c:	81 83       	std	Z+1, r24	; 0x01
   1604e:	92 83       	std	Z+2, r25	; 0x02
   16050:	a3 83       	std	Z+3, r26	; 0x03
   16052:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   16056:	88 85       	ldd	r24, Y+8	; 0x08
   16058:	99 85       	ldd	r25, Y+9	; 0x09
   1605a:	88 27       	eor	r24, r24
   1605c:	90 7d       	andi	r25, 0xD0	; 208
   1605e:	02 c0       	rjmp	.+4      	; 0x16064 <SS80_Transparent_State+0x210>
   16060:	80 e0       	ldi	r24, 0x00	; 0
   16062:	90 e0       	ldi	r25, 0x00	; 0
   16064:	29 96       	adiw	r28, 0x09	; 9
   16066:	ea e0       	ldi	r30, 0x0A	; 10
   16068:	0c 94 b7 e7 	jmp	0x1cf6e	; 0x1cf6e <__epilogue_restores__+0x10>

0001606c <SS80_error_return>:
/// @return  0 on send
/// @return GPIB flags on send error
/// @see gpib.h _FLAGS defines for a full list.

int SS80_error_return( void )
{
   1606c:	a6 e0       	ldi	r26, 0x06	; 6
   1606e:	b0 e0       	ldi	r27, 0x00	; 0
   16070:	ec e3       	ldi	r30, 0x3C	; 60
   16072:	f0 eb       	ldi	r31, 0xB0	; 176
   16074:	0c 94 a3 e7 	jmp	0x1cf46	; 0x1cf46 <__prologue_saves__+0x20>
    uint8_t tmp[1];
    uint16_t status = EOI_FLAG;
   16078:	80 e0       	ldi	r24, 0x00	; 0
   1607a:	91 e0       	ldi	r25, 0x01	; 1
   1607c:	9d 83       	std	Y+5, r25	; 0x05
   1607e:	8c 83       	std	Y+4, r24	; 0x04

    SS80s->qstat = 1;
   16080:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   16084:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   16088:	81 e0       	ldi	r24, 0x01	; 1
   1608a:	82 83       	std	Z+2, r24	; 0x02
    tmp[0] = SS80s->qstat;
   1608c:	8e 83       	std	Y+6, r24	; 0x06

    status = EOI_FLAG;
    if( gpib_write_str(tmp,sizeof(tmp), &status) != sizeof(tmp))
   1608e:	ae 01       	movw	r20, r28
   16090:	4c 5f       	subi	r20, 0xFC	; 252
   16092:	5f 4f       	sbci	r21, 0xFF	; 255
   16094:	61 e0       	ldi	r22, 0x01	; 1
   16096:	70 e0       	ldi	r23, 0x00	; 0
   16098:	ce 01       	movw	r24, r28
   1609a:	06 96       	adiw	r24, 0x06	; 6
   1609c:	0e 94 fb 8b 	call	0x117f6	; 0x117f6 <gpib_write_str>
   160a0:	01 97       	sbiw	r24, 0x01	; 1
   160a2:	99 f0       	breq	.+38     	; 0x160ca <SS80_error_return+0x5e>
    {
        if(debuglevel & GPIB_ERR)
   160a4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   160a8:	80 ff       	sbrs	r24, 0
   160aa:	0a c0       	rjmp	.+20     	; 0x160c0 <SS80_error_return+0x54>
            printf("[GPIB Error Return - Write ERROR]\n");
   160ac:	85 ea       	ldi	r24, 0xA5	; 165
   160ae:	91 e2       	ldi	r25, 0x21	; 33
   160b0:	a0 e0       	ldi	r26, 0x00	; 0
   160b2:	ed b7       	in	r30, 0x3d	; 61
   160b4:	fe b7       	in	r31, 0x3e	; 62
   160b6:	81 83       	std	Z+1, r24	; 0x01
   160b8:	92 83       	std	Z+2, r25	; 0x02
   160ba:	a3 83       	std	Z+3, r26	; 0x03
   160bc:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        return(status & ERROR_MASK);
   160c0:	8c 81       	ldd	r24, Y+4	; 0x04
   160c2:	9d 81       	ldd	r25, Y+5	; 0x05
   160c4:	88 27       	eor	r24, r24
   160c6:	90 7d       	andi	r25, 0xD0	; 208
   160c8:	07 c0       	rjmp	.+14     	; 0x160d8 <SS80_error_return+0x6c>
    }
    SS80s->qstat = 0;
   160ca:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   160ce:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   160d2:	12 82       	std	Z+2, r1	; 0x02
    return(0);
   160d4:	80 e0       	ldi	r24, 0x00	; 0
   160d6:	90 e0       	ldi	r25, 0x00	; 0
}
   160d8:	26 96       	adiw	r28, 0x06	; 6
   160da:	e2 e0       	ldi	r30, 0x02	; 2
   160dc:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

000160e0 <SS80_locate_and_read>:
///  - Currenly we will only process 2 ** 31 bytes Max in one transfer.
///  - If an seek or I/O error happens then we MUST continue to
/// read and discard the GPIB data until we get an EOI or GPIB error...

int SS80_locate_and_read( void )
{
   160e0:	a7 e1       	ldi	r26, 0x17	; 23
   160e2:	b0 e0       	ldi	r27, 0x00	; 0
   160e4:	e6 e7       	ldi	r30, 0x76	; 118
   160e6:	f0 eb       	ldi	r31, 0xB0	; 176
   160e8:	0c 94 94 e7 	jmp	0x1cf28	; 0x1cf28 <__prologue_saves__+0x2>
    DWORD total_bytes;
    DWORD count;
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);
   160ec:	60 91 5c 19 	lds	r22, 0x195C	; 0x80195c <SS80s>
   160f0:	70 91 5d 19 	lds	r23, 0x195D	; 0x80195d <SS80s+0x1>
   160f4:	fb 01       	movw	r30, r22
   160f6:	27 81       	ldd	r18, Z+7	; 0x07
   160f8:	30 85       	ldd	r19, Z+8	; 0x08
   160fa:	41 85       	ldd	r20, Z+9	; 0x09
   160fc:	52 85       	ldd	r21, Z+10	; 0x0a

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   160fe:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <SS80p>
   16102:	90 91 5f 19 	lds	r25, 0x195F	; 0x80195f <SS80p+0x1>
   16106:	fc 01       	movw	r30, r24
   16108:	a2 89       	ldd	r26, Z+18	; 0x12
   1610a:	b3 89       	ldd	r27, Z+19	; 0x13
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);

    SS80s->qstat = 0;
   1610c:	fb 01       	movw	r30, r22
   1610e:	12 82       	std	Z+2, r1	; 0x02

    status = 0;
   16110:	1d 86       	std	Y+13, r1	; 0x0d
   16112:	1c 86       	std	Y+12, r1	; 0x0c

    if( GPIB_IO_RD(IFC) == 0)
   16114:	54 98       	cbi	0x0a, 4	; 10
   16116:	4c 99       	sbic	0x09, 4	; 9
   16118:	03 c0       	rjmp	.+6      	; 0x16120 <SS80_locate_and_read+0x40>
        return(IFC_FLAG);
   1611a:	80 e0       	ldi	r24, 0x00	; 0
   1611c:	90 e1       	ldi	r25, 0x10	; 16
   1611e:	3e c1       	rjmp	.+636    	; 0x1639c <SS80_locate_and_read+0x2bc>

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   16120:	0e 94 73 e7 	call	0x1cee6	; 0x1cee6 <__muluhisi3>
   16124:	4b 01       	movw	r8, r22
   16126:	5c 01       	movw	r10, r24
/// @todo FIXME
///  SS80 4-39
///  For now we will assume the controller will never do this

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16128:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1612c:	85 ff       	sbrs	r24, 5
   1612e:	1a c0       	rjmp	.+52     	; 0x16164 <SS80_locate_and_read+0x84>
        printf("[SS80 Locate and Read at %08lXH(%lXH)]\n",
   16130:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   16134:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   16138:	83 85       	ldd	r24, Z+11	; 0x0b
   1613a:	94 85       	ldd	r25, Z+12	; 0x0c
   1613c:	a5 85       	ldd	r26, Z+13	; 0x0d
   1613e:	b6 85       	ldd	r27, Z+14	; 0x0e
   16140:	ed b7       	in	r30, 0x3d	; 61
   16142:	fe b7       	in	r31, 0x3e	; 62
   16144:	80 87       	std	Z+8, r24	; 0x08
   16146:	91 87       	std	Z+9, r25	; 0x09
   16148:	a2 87       	std	Z+10, r26	; 0x0a
   1614a:	b3 87       	std	Z+11, r27	; 0x0b
   1614c:	84 82       	std	Z+4, r8	; 0x04
   1614e:	95 82       	std	Z+5, r9	; 0x05
   16150:	a6 82       	std	Z+6, r10	; 0x06
   16152:	b7 82       	std	Z+7, r11	; 0x07
   16154:	8f e7       	ldi	r24, 0x7F	; 127
   16156:	98 e2       	ldi	r25, 0x28	; 40
   16158:	a0 e0       	ldi	r26, 0x00	; 0
   1615a:	81 83       	std	Z+1, r24	; 0x01
   1615c:	92 83       	std	Z+2, r25	; 0x02
   1615e:	a3 83       	std	Z+3, r26	; 0x03
   16160:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            (long) Address, (long) SS80s->Length);
#endif

    if( SS80_cmd_seek() )
   16164:	25 db       	rcall	.-2486   	; 0x157b0 <SS80_cmd_seek>
   16166:	89 2b       	or	r24, r25
   16168:	09 f0       	breq	.+2      	; 0x1616c <SS80_locate_and_read+0x8c>
   1616a:	ae c0       	rjmp	.+348    	; 0x162c8 <SS80_locate_and_read+0x1e8>
    {
        return(SS80_error_return());
    }

    count = SS80s->Length;
   1616c:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   16170:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   16174:	43 84       	ldd	r4, Z+11	; 0x0b
   16176:	54 84       	ldd	r5, Z+12	; 0x0c
   16178:	65 84       	ldd	r6, Z+13	; 0x0d
   1617a:	76 84       	ldd	r7, Z+14	; 0x0e
    total_bytes = 0;
   1617c:	1e 86       	std	Y+14, r1	; 0x0e
   1617e:	1f 86       	std	Y+15, r1	; 0x0f
   16180:	18 8a       	std	Y+16, r1	; 0x10
   16182:	19 8a       	std	Y+17, r1	; 0x11

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
            gpib_timer_elapsed_end("disk READ ");
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   16184:	81 e6       	ldi	r24, 0x61	; 97
   16186:	98 e2       	ldi	r25, 0x28	; 40
   16188:	9c 01       	movw	r18, r24
   1618a:	40 e0       	ldi	r20, 0x00	; 0
   1618c:	2a 8b       	std	Y+18, r18	; 0x12
   1618e:	3b 8b       	std	Y+19, r19	; 0x13
   16190:	4c 8b       	std	Y+20, r20	; 0x14
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   16192:	33 24       	eor	r3, r3
   16194:	33 94       	inc	r3
            if(debuglevel & GPIB_ERR)
                printf("[SS80 GPIB Write Error]\n");
   16196:	80 e3       	ldi	r24, 0x30	; 48
   16198:	98 e2       	ldi	r25, 0x28	; 40
   1619a:	9c 01       	movw	r18, r24
   1619c:	40 e0       	ldi	r20, 0x00	; 0
   1619e:	2d 8b       	std	Y+21, r18	; 0x15
   161a0:	3e 8b       	std	Y+22, r19	; 0x16
   161a2:	4f 8b       	std	Y+23, r20	; 0x17
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   161a4:	34 c0       	rjmp	.+104    	; 0x1620e <SS80_locate_and_read+0x12e>
                printf("[SS80 Disk Read Error]\n");
            return( SS80_error_return() );
        }

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   161a6:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   161a8:	0e 94 f1 85 	call	0x10be2	; 0x10be2 <gpib_timer_elapsed_begin>
#endif
        len = gpib_write_str(gpib_iobuff, chunk, &status);
   161ac:	ae 01       	movw	r20, r28
   161ae:	44 5f       	subi	r20, 0xF4	; 244
   161b0:	5f 4f       	sbci	r21, 0xFF	; 255
   161b2:	b6 01       	movw	r22, r12
   161b4:	80 ee       	ldi	r24, 0xE0	; 224
   161b6:	9c e1       	ldi	r25, 0x1C	; 28
   161b8:	0e 94 fb 8b 	call	0x117f6	; 0x117f6 <gpib_write_str>
   161bc:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   161be:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   161c2:	87 ff       	sbrs	r24, 7
   161c4:	04 c0       	rjmp	.+8      	; 0x161ce <SS80_locate_and_read+0xee>
            gpib_timer_elapsed_end("GPIB write");
   161c6:	8f e9       	ldi	r24, 0x9F	; 159
   161c8:	90 e1       	ldi	r25, 0x10	; 16
   161ca:	0e 94 03 86 	call	0x10c06	; 0x10c06 <gpib_timer_elapsed_end>
#endif
        if( len != chunk)
   161ce:	c0 16       	cp	r12, r16
   161d0:	d1 06       	cpc	r13, r17
   161d2:	09 f0       	breq	.+2      	; 0x161d6 <SS80_locate_and_read+0xf6>
   161d4:	82 c0       	rjmp	.+260    	; 0x162da <SS80_locate_and_read+0x1fa>
                SS80s->Errors |= ERR_GPIB;
                break;
            }
        }

        Address += chunk;
   161d6:	0d 2c       	mov	r0, r13
   161d8:	00 0c       	add	r0, r0
   161da:	ee 08       	sbc	r14, r14
   161dc:	ff 08       	sbc	r15, r15
   161de:	8c 0c       	add	r8, r12
   161e0:	9d 1c       	adc	r9, r13
   161e2:	ae 1c       	adc	r10, r14
   161e4:	bf 1c       	adc	r11, r15
        total_bytes = total_bytes + len;
   161e6:	01 2e       	mov	r0, r17
   161e8:	00 0c       	add	r0, r0
   161ea:	22 0b       	sbc	r18, r18
   161ec:	33 0b       	sbc	r19, r19
   161ee:	8e 85       	ldd	r24, Y+14	; 0x0e
   161f0:	9f 85       	ldd	r25, Y+15	; 0x0f
   161f2:	a8 89       	ldd	r26, Y+16	; 0x10
   161f4:	b9 89       	ldd	r27, Y+17	; 0x11
   161f6:	80 0f       	add	r24, r16
   161f8:	91 1f       	adc	r25, r17
   161fa:	a2 1f       	adc	r26, r18
   161fc:	b3 1f       	adc	r27, r19
   161fe:	8e 87       	std	Y+14, r24	; 0x0e
   16200:	9f 87       	std	Y+15, r25	; 0x0f
   16202:	a8 8b       	std	Y+16, r26	; 0x10
   16204:	b9 8b       	std	Y+17, r27	; 0x11
        count -= len;
   16206:	40 1a       	sub	r4, r16
   16208:	51 0a       	sbc	r5, r17
   1620a:	62 0a       	sbc	r6, r18
   1620c:	73 0a       	sbc	r7, r19
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   1620e:	41 14       	cp	r4, r1
   16210:	51 04       	cpc	r5, r1
   16212:	61 04       	cpc	r6, r1
   16214:	71 04       	cpc	r7, r1
   16216:	09 f4       	brne	.+2      	; 0x1621a <SS80_locate_and_read+0x13a>
   16218:	92 c0       	rjmp	.+292    	; 0x1633e <SS80_locate_and_read+0x25e>
    {
        if( GPIB_IO_RD(IFC) == 0)
   1621a:	54 98       	cbi	0x0a, 4	; 10
   1621c:	4c 9b       	sbis	0x09, 4	; 9
   1621e:	7d cf       	rjmp	.-262    	; 0x1611a <SS80_locate_and_read+0x3a>
        {
            return(IFC_FLAG);
        }

        if(count > 256)
   16220:	31 e0       	ldi	r19, 0x01	; 1
   16222:	43 16       	cp	r4, r19
   16224:	53 06       	cpc	r5, r19
   16226:	61 04       	cpc	r6, r1
   16228:	71 04       	cpc	r7, r1
   1622a:	08 f4       	brcc	.+2      	; 0x1622e <SS80_locate_and_read+0x14e>
   1622c:	4f c0       	rjmp	.+158    	; 0x162cc <SS80_locate_and_read+0x1ec>
        {
            chunk = 256;
            status = 0;                           // GPIB status
   1622e:	1d 86       	std	Y+13, r1	; 0x0d
   16230:	1c 86       	std	Y+12, r1	; 0x0c
            return(IFC_FLAG);
        }

        if(count > 256)
        {
            chunk = 256;
   16232:	c1 2c       	mov	r12, r1
   16234:	dd 24       	eor	r13, r13
   16236:	d3 94       	inc	r13
            chunk = count;
            status |= EOI_FLAG;                   // GPIB EOI on final charater
        }

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   16238:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1623c:	86 fd       	sbrc	r24, 6
            gpib_timer_elapsed_begin();
   1623e:	0e 94 f1 85 	call	0x10be2	; 0x10be2 <gpib_timer_elapsed_begin>
#endif

// FIXME len != chunk
        len = dbf_open_read(SS80p->HEADER.NAME, Address, gpib_iobuff, chunk, &SS80s->Errors);
   16242:	e0 90 5c 19 	lds	r14, 0x195C	; 0x80195c <SS80s>
   16246:	f0 90 5d 19 	lds	r15, 0x195D	; 0x80195d <SS80s+0x1>
   1624a:	43 e0       	ldi	r20, 0x03	; 3
   1624c:	e4 0e       	add	r14, r20
   1624e:	f1 1c       	adc	r15, r1
   16250:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   16254:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   16258:	86 01       	movw	r16, r12
   1625a:	20 ee       	ldi	r18, 0xE0	; 224
   1625c:	3c e1       	ldi	r19, 0x1C	; 28
   1625e:	b5 01       	movw	r22, r10
   16260:	a4 01       	movw	r20, r8
   16262:	82 81       	ldd	r24, Z+2	; 0x02
   16264:	93 81       	ldd	r25, Z+3	; 0x03
   16266:	0e 94 43 85 	call	0x10a86	; 0x10a86 <dbf_open_read>
   1626a:	8c 01       	movw	r16, r24

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   1626c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16270:	86 ff       	sbrs	r24, 6
   16272:	04 c0       	rjmp	.+8      	; 0x1627c <SS80_locate_and_read+0x19c>
            gpib_timer_elapsed_end("disk READ ");
   16274:	84 e9       	ldi	r24, 0x94	; 148
   16276:	90 e1       	ldi	r25, 0x10	; 16
   16278:	0e 94 03 86 	call	0x10c06	; 0x10c06 <gpib_timer_elapsed_end>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1627c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16280:	85 ff       	sbrs	r24, 5
   16282:	0c c0       	rjmp	.+24     	; 0x1629c <SS80_locate_and_read+0x1bc>
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   16284:	ed b7       	in	r30, 0x3d	; 61
   16286:	fe b7       	in	r31, 0x3e	; 62
   16288:	15 83       	std	Z+5, r17	; 0x05
   1628a:	04 83       	std	Z+4, r16	; 0x04
   1628c:	2a 89       	ldd	r18, Y+18	; 0x12
   1628e:	3b 89       	ldd	r19, Y+19	; 0x13
   16290:	4c 89       	ldd	r20, Y+20	; 0x14
   16292:	21 83       	std	Z+1, r18	; 0x01
   16294:	32 83       	std	Z+2, r19	; 0x02
   16296:	43 83       	std	Z+3, r20	; 0x03
   16298:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1629c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
#endif
        if(len < 0)
   162a0:	17 ff       	sbrs	r17, 7
   162a2:	81 cf       	rjmp	.-254    	; 0x161a6 <SS80_locate_and_read+0xc6>
        {
            SS80s->qstat = 1;
   162a4:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   162a8:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   162ac:	91 e0       	ldi	r25, 0x01	; 1
   162ae:	92 83       	std	Z+2, r25	; 0x02
/// @return Return
            if(debuglevel & GPIB_ERR)
   162b0:	80 ff       	sbrs	r24, 0
   162b2:	0a c0       	rjmp	.+20     	; 0x162c8 <SS80_locate_and_read+0x1e8>
                printf("[SS80 Disk Read Error]\n");
   162b4:	89 e4       	ldi	r24, 0x49	; 73
   162b6:	98 e2       	ldi	r25, 0x28	; 40
   162b8:	a0 e0       	ldi	r26, 0x00	; 0
   162ba:	ed b7       	in	r30, 0x3d	; 61
   162bc:	fe b7       	in	r31, 0x3e	; 62
   162be:	81 83       	std	Z+1, r24	; 0x01
   162c0:	92 83       	std	Z+2, r25	; 0x02
   162c2:	a3 83       	std	Z+3, r26	; 0x03
   162c4:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            return( SS80_error_return() );
   162c8:	d1 de       	rcall	.-606    	; 0x1606c <SS80_error_return>
   162ca:	68 c0       	rjmp	.+208    	; 0x1639c <SS80_locate_and_read+0x2bc>
            chunk = 256;
            status = 0;                           // GPIB status
        }
        else
        {
            chunk = count;
   162cc:	62 01       	movw	r12, r4
            status |= EOI_FLAG;                   // GPIB EOI on final charater
   162ce:	8c 85       	ldd	r24, Y+12	; 0x0c
   162d0:	9d 85       	ldd	r25, Y+13	; 0x0d
   162d2:	91 60       	ori	r25, 0x01	; 1
   162d4:	9d 87       	std	Y+13, r25	; 0x0d
   162d6:	8c 87       	std	Y+12, r24	; 0x0c
   162d8:	af cf       	rjmp	.-162    	; 0x16238 <SS80_locate_and_read+0x158>
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   162da:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   162de:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   162e2:	32 82       	std	Z+2, r3	; 0x02
            if(debuglevel & GPIB_ERR)
   162e4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   162e8:	80 ff       	sbrs	r24, 0
   162ea:	0a c0       	rjmp	.+20     	; 0x16300 <SS80_locate_and_read+0x220>
                printf("[SS80 GPIB Write Error]\n");
   162ec:	2d 89       	ldd	r18, Y+21	; 0x15
   162ee:	3e 89       	ldd	r19, Y+22	; 0x16
   162f0:	4f 89       	ldd	r20, Y+23	; 0x17
   162f2:	ed b7       	in	r30, 0x3d	; 61
   162f4:	fe b7       	in	r31, 0x3e	; 62
   162f6:	21 83       	std	Z+1, r18	; 0x01
   162f8:	32 83       	std	Z+2, r19	; 0x02
   162fa:	43 83       	std	Z+3, r20	; 0x03
   162fc:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            if(status & ERROR_MASK)
   16300:	8c 85       	ldd	r24, Y+12	; 0x0c
   16302:	9d 85       	ldd	r25, Y+13	; 0x0d
   16304:	88 27       	eor	r24, r24
   16306:	90 7d       	andi	r25, 0xD0	; 208
   16308:	89 2b       	or	r24, r25
   1630a:	09 f4       	brne	.+2      	; 0x1630e <SS80_locate_and_read+0x22e>
   1630c:	64 cf       	rjmp	.-312    	; 0x161d6 <SS80_locate_and_read+0xf6>
            {
                SS80s->Errors |= ERR_GPIB;
   1630e:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   16312:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   16316:	83 81       	ldd	r24, Z+3	; 0x03
   16318:	94 81       	ldd	r25, Z+4	; 0x04
   1631a:	80 62       	ori	r24, 0x20	; 32
   1631c:	94 83       	std	Z+4, r25	; 0x04
   1631e:	83 83       	std	Z+3, r24	; 0x03
        count -= len;
    }
///  Note: this should not happen unless we exit on errors above
    if(count > 0)
    {
        if(debuglevel & GPIB_ERR)
   16320:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16324:	80 ff       	sbrs	r24, 0
   16326:	21 c0       	rjmp	.+66     	; 0x1636a <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read DID NOT FINISH]\n");
   16328:	8b e0       	ldi	r24, 0x0B	; 11
   1632a:	98 e2       	ldi	r25, 0x28	; 40
   1632c:	a0 e0       	ldi	r26, 0x00	; 0
   1632e:	ed b7       	in	r30, 0x3d	; 61
   16330:	fe b7       	in	r31, 0x3e	; 62
   16332:	81 83       	std	Z+1, r24	; 0x01
   16334:	92 83       	std	Z+2, r25	; 0x02
   16336:	a3 83       	std	Z+3, r26	; 0x03
   16338:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1633c:	16 c0       	rjmp	.+44     	; 0x1636a <SS80_locate_and_read+0x28a>
    }
    else
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1633e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16342:	85 ff       	sbrs	r24, 5
   16344:	12 c0       	rjmp	.+36     	; 0x1636a <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
   16346:	8e 85       	ldd	r24, Y+14	; 0x0e
   16348:	9f 85       	ldd	r25, Y+15	; 0x0f
   1634a:	a8 89       	ldd	r26, Y+16	; 0x10
   1634c:	b9 89       	ldd	r27, Y+17	; 0x11
   1634e:	ed b7       	in	r30, 0x3d	; 61
   16350:	fe b7       	in	r31, 0x3e	; 62
   16352:	84 83       	std	Z+4, r24	; 0x04
   16354:	95 83       	std	Z+5, r25	; 0x05
   16356:	a6 83       	std	Z+6, r26	; 0x06
   16358:	b7 83       	std	Z+7, r27	; 0x07
   1635a:	83 ee       	ldi	r24, 0xE3	; 227
   1635c:	97 e2       	ldi	r25, 0x27	; 39
   1635e:	a0 e0       	ldi	r26, 0x00	; 0
   16360:	81 83       	std	Z+1, r24	; 0x01
   16362:	92 83       	std	Z+2, r25	; 0x02
   16364:	a3 83       	std	Z+3, r26	; 0x03
   16366:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   1636a:	00 91 5c 19 	lds	r16, 0x195C	; 0x80195c <SS80s>
   1636e:	10 91 5d 19 	lds	r17, 0x195D	; 0x80195d <SS80s+0x1>

/// @brief  SS80 Return current block addresss from bytes
/// @return Block Address
uint32_t SS80_Bytes_to_Blocks(uint32_t bytes)
{
    return(bytes / SS80p->UNIT.BYTES_PER_BLOCK);
   16372:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   16376:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   1637a:	22 89       	ldd	r18, Z+18	; 0x12
   1637c:	33 89       	ldd	r19, Z+19	; 0x13
   1637e:	40 e0       	ldi	r20, 0x00	; 0
   16380:	50 e0       	ldi	r21, 0x00	; 0
   16382:	c5 01       	movw	r24, r10
   16384:	b4 01       	movw	r22, r8
   16386:	0e 94 26 e7 	call	0x1ce4c	; 0x1ce4c <__udivmodsi4>
   1638a:	f8 01       	movw	r30, r16
   1638c:	27 83       	std	Z+7, r18	; 0x07
   1638e:	30 87       	std	Z+8, r19	; 0x08
   16390:	41 87       	std	Z+9, r20	; 0x09
   16392:	52 87       	std	Z+10, r21	; 0x0a
    return (status & ERROR_MASK);
   16394:	8c 85       	ldd	r24, Y+12	; 0x0c
   16396:	9d 85       	ldd	r25, Y+13	; 0x0d
   16398:	88 27       	eor	r24, r24
   1639a:	90 7d       	andi	r25, 0xD0	; 208
}
   1639c:	67 96       	adiw	r28, 0x17	; 23
   1639e:	e1 e1       	ldi	r30, 0x11	; 17
   163a0:	0c 94 b0 e7 	jmp	0x1cf60	; 0x1cf60 <__epilogue_restores__+0x2>

000163a4 <SS80_Execute_State>:
/// - State: EXEC STATE COMMAND
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
   163a4:	cf 93       	push	r28
   163a6:	df 93       	push	r29
   163a8:	00 d0       	rcall	.+0      	; 0x163aa <SS80_Execute_State+0x6>
   163aa:	00 d0       	rcall	.+0      	; 0x163ac <SS80_Execute_State+0x8>
   163ac:	1f 92       	push	r1
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
   163ae:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   163b2:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   163b6:	81 81       	ldd	r24, Z+1	; 0x01
   163b8:	90 e0       	ldi	r25, 0x00	; 0
   163ba:	0e 94 01 87 	call	0x10e02	; 0x10e02 <gpib_disable_PPR>
    switch(SS80s->estate)
   163be:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   163c2:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   163c6:	80 81       	ld	r24, Z
   163c8:	91 81       	ldd	r25, Z+1	; 0x01
   163ca:	82 30       	cpi	r24, 0x02	; 2
   163cc:	91 05       	cpc	r25, r1
   163ce:	89 f0       	breq	.+34     	; 0x163f2 <SS80_Execute_State+0x4e>
   163d0:	3c f4       	brge	.+14     	; 0x163e0 <SS80_Execute_State+0x3c>
   163d2:	00 97       	sbiw	r24, 0x00	; 0
   163d4:	81 f1       	breq	.+96     	; 0x16436 <SS80_Execute_State+0x92>
   163d6:	81 30       	cpi	r24, 0x01	; 1
   163d8:	91 05       	cpc	r25, r1
   163da:	b9 f4       	brne	.+46     	; 0x1640a <SS80_Execute_State+0x66>
    {
        case EXEC_IDLE:
            break;
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
   163dc:	81 de       	rcall	.-766    	; 0x160e0 <SS80_locate_and_read>
   163de:	0d c0       	rjmp	.+26     	; 0x163fa <SS80_Execute_State+0x56>
int SS80_Execute_State(void)
{
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
    switch(SS80s->estate)
   163e0:	83 30       	cpi	r24, 0x03	; 3
   163e2:	91 05       	cpc	r25, r1
   163e4:	41 f0       	breq	.+16     	; 0x163f6 <SS80_Execute_State+0x52>
   163e6:	84 30       	cpi	r24, 0x04	; 4
   163e8:	91 05       	cpc	r25, r1
   163ea:	79 f4       	brne	.+30     	; 0x1640a <SS80_Execute_State+0x66>
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   163ec:	0e 94 a1 a8 	call	0x15142	; 0x15142 <SS80_describe>
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_LOCATE_AND_WRITE:
            ret = SS80_locate_and_write();
   163f0:	04 c0       	rjmp	.+8      	; 0x163fa <SS80_Execute_State+0x56>
   163f2:	53 da       	rcall	.-2906   	; 0x1589a <SS80_locate_and_write>
   163f4:	02 c0       	rjmp	.+4      	; 0x163fa <SS80_Execute_State+0x56>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
   163f6:	0e 94 20 a8 	call	0x15040	; 0x15040 <SS80_send_status>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   163fa:	ec 01       	movw	r28, r24
            SS80s->estate = EXEC_IDLE;
   163fc:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   16400:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   16404:	11 82       	std	Z+1, r1	; 0x01
   16406:	10 82       	st	Z, r1
            break;
   16408:	18 c0       	rjmp	.+48     	; 0x1643a <SS80_Execute_State+0x96>
        default:
            if(debuglevel & GPIB_ERR)
   1640a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1640e:	20 ff       	sbrs	r18, 0
   16410:	0c c0       	rjmp	.+24     	; 0x1642a <SS80_Execute_State+0x86>
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
   16412:	ed b7       	in	r30, 0x3d	; 61
   16414:	fe b7       	in	r31, 0x3e	; 62
   16416:	95 83       	std	Z+5, r25	; 0x05
   16418:	84 83       	std	Z+4, r24	; 0x04
   1641a:	87 ea       	ldi	r24, 0xA7	; 167
   1641c:	98 e2       	ldi	r25, 0x28	; 40
   1641e:	a0 e0       	ldi	r26, 0x00	; 0
   16420:	81 83       	std	Z+1, r24	; 0x01
   16422:	92 83       	std	Z+2, r25	; 0x02
   16424:	a3 83       	std	Z+3, r26	; 0x03
   16426:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            SS80s->estate = EXEC_IDLE;
   1642a:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   1642e:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   16432:	11 82       	std	Z+1, r1	; 0x01
   16434:	10 82       	st	Z, r1
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
    int ret = 0;
   16436:	c0 e0       	ldi	r28, 0x00	; 0
   16438:	d0 e0       	ldi	r29, 0x00	; 0
            if(debuglevel & GPIB_ERR)
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
            SS80s->estate = EXEC_IDLE;
            break;
    }
    gpib_enable_PPR(SS80p->HEADER.PPR);
   1643a:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   1643e:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   16442:	81 81       	ldd	r24, Z+1	; 0x01
   16444:	90 e0       	ldi	r25, 0x00	; 0
   16446:	0e 94 cb 86 	call	0x10d96	; 0x10d96 <gpib_enable_PPR>
    return(ret);
}
   1644a:	ce 01       	movw	r24, r28
   1644c:	cd b7       	in	r28, 0x3d	; 61
   1644e:	de b7       	in	r29, 0x3e	; 62
   16450:	25 96       	adiw	r28, 0x05	; 5
   16452:	e2 e0       	ldi	r30, 0x02	; 2
   16454:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00016458 <SS80_COMMANDS>:
/// @param[in] ch command.
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
   16458:	a9 e0       	ldi	r26, 0x09	; 9
   1645a:	b0 e0       	ldi	r27, 0x00	; 0
   1645c:	e2 e3       	ldi	r30, 0x32	; 50
   1645e:	f2 eb       	ldi	r31, 0xB2	; 178
   16460:	0c 94 a2 e7 	jmp	0x1cf44	; 0x1cf44 <__prologue_saves__+0x1e>
   16464:	18 2f       	mov	r17, r24
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   16466:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   1646a:	90 e0       	ldi	r25, 0x00	; 0
   1646c:	0e 94 0d 8d 	call	0x11a1a	; 0x11a1a <SS80_is_MTA>
   16470:	89 2b       	or	r24, r25
   16472:	19 f0       	breq	.+6      	; 0x1647a <SS80_COMMANDS+0x22>
    {
        if(ch == 0x65 )
   16474:	15 36       	cpi	r17, 0x65	; 101
   16476:	19 f5       	brne	.+70     	; 0x164be <SS80_COMMANDS+0x66>
   16478:	09 c0       	rjmp	.+18     	; 0x1648c <SS80_COMMANDS+0x34>
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   1647a:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   1647e:	90 e0       	ldi	r25, 0x00	; 0
   16480:	0e 94 fb 8c 	call	0x119f6	; 0x119f6 <SS80_is_MLA>
   16484:	ec 01       	movw	r28, r24
   16486:	89 2b       	or	r24, r25
   16488:	a9 f7       	brne	.-22     	; 0x16474 <SS80_COMMANDS+0x1c>
   1648a:	ad c0       	rjmp	.+346    	; 0x165e6 <SS80_COMMANDS+0x18e>
    {
        if(ch == 0x65 )
        {
            if(SS80_is_MLA(listening))
   1648c:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   16490:	90 e0       	ldi	r25, 0x00	; 0
   16492:	0e 94 fb 8c 	call	0x119f6	; 0x119f6 <SS80_is_MLA>
   16496:	89 2b       	or	r24, r25
   16498:	09 f4       	brne	.+2      	; 0x1649c <SS80_COMMANDS+0x44>
   1649a:	a2 c0       	rjmp	.+324    	; 0x165e0 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1649c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   164a0:	85 ff       	sbrs	r24, 5
   164a2:	0a c0       	rjmp	.+20     	; 0x164b8 <SS80_COMMANDS+0x60>
                    printf("[SS80 Command State]\n");
   164a4:	8f e8       	ldi	r24, 0x8F	; 143
   164a6:	91 e2       	ldi	r25, 0x21	; 33
   164a8:	a0 e0       	ldi	r26, 0x00	; 0
   164aa:	ed b7       	in	r30, 0x3d	; 61
   164ac:	fe b7       	in	r31, 0x3e	; 62
   164ae:	81 83       	std	Z+1, r24	; 0x01
   164b0:	92 83       	std	Z+2, r25	; 0x02
   164b2:	a3 83       	std	Z+3, r26	; 0x03
   164b4:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
                return ( SS80_Command_State() );
   164b8:	0e 94 61 a9 	call	0x152c2	; 0x152c2 <SS80_Command_State>
   164bc:	73 c0       	rjmp	.+230    	; 0x165a4 <SS80_COMMANDS+0x14c>
            }
            return(0);
        }

        if(ch == 0x6e )
   164be:	1e 36       	cpi	r17, 0x6E	; 110
   164c0:	01 f5       	brne	.+64     	; 0x16502 <SS80_COMMANDS+0xaa>
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   164c2:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   164c6:	90 e0       	ldi	r25, 0x00	; 0
   164c8:	0e 94 fb 8c 	call	0x119f6	; 0x119f6 <SS80_is_MLA>
   164cc:	89 2b       	or	r24, r25
   164ce:	79 f0       	breq	.+30     	; 0x164ee <SS80_COMMANDS+0x96>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   164d0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   164d4:	85 ff       	sbrs	r24, 5
   164d6:	13 c0       	rjmp	.+38     	; 0x164fe <SS80_COMMANDS+0xa6>
                    printf("[SS00 Execute State]\n");
   164d8:	89 e7       	ldi	r24, 0x79	; 121
   164da:	91 e2       	ldi	r25, 0x21	; 33
   164dc:	a0 e0       	ldi	r26, 0x00	; 0
   164de:	ed b7       	in	r30, 0x3d	; 61
   164e0:	fe b7       	in	r31, 0x3e	; 62
   164e2:	81 83       	std	Z+1, r24	; 0x01
   164e4:	92 83       	std	Z+2, r25	; 0x02
   164e6:	a3 83       	std	Z+3, r26	; 0x03
   164e8:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   164ec:	08 c0       	rjmp	.+16     	; 0x164fe <SS80_COMMANDS+0xa6>
            return(0);
        }

        if(ch == 0x6e )
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   164ee:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   164f2:	90 e0       	ldi	r25, 0x00	; 0
   164f4:	0e 94 0d 8d 	call	0x11a1a	; 0x11a1a <SS80_is_MTA>
   164f8:	89 2b       	or	r24, r25
   164fa:	51 f7       	brne	.-44     	; 0x164d0 <SS80_COMMANDS+0x78>
   164fc:	71 c0       	rjmp	.+226    	; 0x165e0 <SS80_COMMANDS+0x188>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
                    printf("[SS00 Execute State]\n");
                return ( SS80_Execute_State() );
   164fe:	52 df       	rcall	.-348    	; 0x163a4 <SS80_Execute_State>
   16500:	51 c0       	rjmp	.+162    	; 0x165a4 <SS80_COMMANDS+0x14c>

            }
            return(0);
        }

        if(ch == 0x70 )
   16502:	10 37       	cpi	r17, 0x70	; 112
   16504:	b9 f5       	brne	.+110    	; 0x16574 <SS80_COMMANDS+0x11c>
        {
            if(SS80_is_MTA(talking) )
   16506:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   1650a:	90 e0       	ldi	r25, 0x00	; 0
   1650c:	0e 94 0d 8d 	call	0x11a1a	; 0x11a1a <SS80_is_MTA>
   16510:	89 2b       	or	r24, r25
   16512:	81 f0       	breq	.+32     	; 0x16534 <SS80_COMMANDS+0xdc>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16514:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16518:	85 ff       	sbrs	r24, 5
   1651a:	0a c0       	rjmp	.+20     	; 0x16530 <SS80_COMMANDS+0xd8>
                    printf("[SS80 Report State]\n");
   1651c:	84 e6       	ldi	r24, 0x64	; 100
   1651e:	91 e2       	ldi	r25, 0x21	; 33
   16520:	a0 e0       	ldi	r26, 0x00	; 0
   16522:	ed b7       	in	r30, 0x3d	; 61
   16524:	fe b7       	in	r31, 0x3e	; 62
   16526:	81 83       	std	Z+1, r24	; 0x01
   16528:	92 83       	std	Z+2, r25	; 0x02
   1652a:	a3 83       	std	Z+3, r26	; 0x03
   1652c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
                return( SS80_Report() );
   16530:	46 db       	rcall	.-2420   	; 0x15bbe <SS80_Report>
   16532:	38 c0       	rjmp	.+112    	; 0x165a4 <SS80_COMMANDS+0x14c>
            }

            if(SS80_is_MLA(listening))
   16534:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   16538:	90 e0       	ldi	r25, 0x00	; 0
   1653a:	0e 94 fb 8c 	call	0x119f6	; 0x119f6 <SS80_is_MLA>
   1653e:	89 2b       	or	r24, r25
   16540:	09 f4       	brne	.+2      	; 0x16544 <SS80_COMMANDS+0xec>
   16542:	4e c0       	rjmp	.+156    	; 0x165e0 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16544:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16548:	85 ff       	sbrs	r24, 5
   1654a:	0a c0       	rjmp	.+20     	; 0x16560 <SS80_COMMANDS+0x108>
                    printf("[Amigo Clear]\n");
   1654c:	85 e5       	ldi	r24, 0x55	; 85
   1654e:	91 e2       	ldi	r25, 0x21	; 33
   16550:	a0 e0       	ldi	r26, 0x00	; 0
   16552:	ed b7       	in	r30, 0x3d	; 61
   16554:	fe b7       	in	r31, 0x3e	; 62
   16556:	81 83       	std	Z+1, r24	; 0x01
   16558:	92 83       	std	Z+2, r25	; 0x02
   1655a:	a3 83       	std	Z+3, r26	; 0x03
   1655c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
                gpib_disable_PPR(SS80p->HEADER.PPR);
   16560:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   16564:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   16568:	81 81       	ldd	r24, Z+1	; 0x01
   1656a:	90 e0       	ldi	r25, 0x00	; 0
   1656c:	0e 94 01 87 	call	0x10e02	; 0x10e02 <gpib_disable_PPR>
                return( SS80_Amigo_Clear() );
   16570:	1d dc       	rcall	.-1990   	; 0x15dac <SS80_Amigo_Clear>
   16572:	18 c0       	rjmp	.+48     	; 0x165a4 <SS80_COMMANDS+0x14c>
            }
            return (0);
        }
        if(ch == 0x72 )
   16574:	12 37       	cpi	r17, 0x72	; 114
   16576:	c1 f4       	brne	.+48     	; 0x165a8 <SS80_COMMANDS+0x150>
        {
            if(SS80_is_MLA(listening) )
   16578:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   1657c:	90 e0       	ldi	r25, 0x00	; 0
   1657e:	0e 94 fb 8c 	call	0x119f6	; 0x119f6 <SS80_is_MLA>
   16582:	89 2b       	or	r24, r25
   16584:	89 f0       	breq	.+34     	; 0x165a8 <SS80_COMMANDS+0x150>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16586:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1658a:	85 ff       	sbrs	r24, 5
   1658c:	0a c0       	rjmp	.+20     	; 0x165a2 <SS80_COMMANDS+0x14a>
                    printf("[SS80 Transparent]\n");
   1658e:	81 e4       	ldi	r24, 0x41	; 65
   16590:	91 e2       	ldi	r25, 0x21	; 33
   16592:	a0 e0       	ldi	r26, 0x00	; 0
   16594:	ed b7       	in	r30, 0x3d	; 61
   16596:	fe b7       	in	r31, 0x3e	; 62
   16598:	81 83       	std	Z+1, r24	; 0x01
   1659a:	92 83       	std	Z+2, r25	; 0x02
   1659c:	a3 83       	std	Z+3, r26	; 0x03
   1659e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
                return( SS80_Transparent_State() );
   165a2:	58 dc       	rcall	.-1872   	; 0x15e54 <SS80_Transparent_State>
   165a4:	ec 01       	movw	r28, r24
   165a6:	3b c0       	rjmp	.+118    	; 0x1661e <SS80_COMMANDS+0x1c6>
            }
        }
        if(debuglevel & GPIB_ERR)
   165a8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   165ac:	80 ff       	sbrs	r24, 0
   165ae:	18 c0       	rjmp	.+48     	; 0x165e0 <SS80_COMMANDS+0x188>
            printf("[SS80 SC Unknown: %02XH, listen:%02XH, talk:%02XH]\n",
   165b0:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   165b4:	90 e0       	ldi	r25, 0x00	; 0
   165b6:	ed b7       	in	r30, 0x3d	; 61
   165b8:	fe b7       	in	r31, 0x3e	; 62
   165ba:	91 87       	std	Z+9, r25	; 0x09
   165bc:	80 87       	std	Z+8, r24	; 0x08
   165be:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   165c2:	90 e0       	ldi	r25, 0x00	; 0
   165c4:	97 83       	std	Z+7, r25	; 0x07
   165c6:	86 83       	std	Z+6, r24	; 0x06
   165c8:	81 2f       	mov	r24, r17
   165ca:	90 e0       	ldi	r25, 0x00	; 0
   165cc:	95 83       	std	Z+5, r25	; 0x05
   165ce:	84 83       	std	Z+4, r24	; 0x04
   165d0:	8d e0       	ldi	r24, 0x0D	; 13
   165d2:	91 e2       	ldi	r25, 0x21	; 33
   165d4:	a0 e0       	ldi	r26, 0x00	; 0
   165d6:	81 83       	std	Z+1, r24	; 0x01
   165d8:	92 83       	std	Z+2, r25	; 0x02
   165da:	a3 83       	std	Z+3, r26	; 0x03
   165dc:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
                0xff & ch, 0xff & listening, 0xff & talking);
        return(0);
   165e0:	c0 e0       	ldi	r28, 0x00	; 0
   165e2:	d0 e0       	ldi	r29, 0x00	; 0
   165e4:	1c c0       	rjmp	.+56     	; 0x1661e <SS80_COMMANDS+0x1c6>
    }

    if(debuglevel & GPIB_ERR)
   165e6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   165ea:	80 ff       	sbrs	r24, 0
   165ec:	f9 cf       	rjmp	.-14     	; 0x165e0 <SS80_COMMANDS+0x188>
        printf("[SS80 Unknown SC: %02XH, listen:%02XH, talk:%02XH]\n",
   165ee:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   165f2:	90 e0       	ldi	r25, 0x00	; 0
   165f4:	ed b7       	in	r30, 0x3d	; 61
   165f6:	fe b7       	in	r31, 0x3e	; 62
   165f8:	91 87       	std	Z+9, r25	; 0x09
   165fa:	80 87       	std	Z+8, r24	; 0x08
   165fc:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   16600:	90 e0       	ldi	r25, 0x00	; 0
   16602:	97 83       	std	Z+7, r25	; 0x07
   16604:	86 83       	std	Z+6, r24	; 0x06
   16606:	81 2f       	mov	r24, r17
   16608:	90 e0       	ldi	r25, 0x00	; 0
   1660a:	95 83       	std	Z+5, r25	; 0x05
   1660c:	84 83       	std	Z+4, r24	; 0x04
   1660e:	89 ed       	ldi	r24, 0xD9	; 217
   16610:	90 e2       	ldi	r25, 0x20	; 32
   16612:	a0 e0       	ldi	r26, 0x00	; 0
   16614:	81 83       	std	Z+1, r24	; 0x01
   16616:	92 83       	std	Z+2, r25	; 0x02
   16618:	a3 83       	std	Z+3, r26	; 0x03
   1661a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
    return(0);
}
   1661e:	ce 01       	movw	r24, r28
   16620:	cd b7       	in	r28, 0x3d	; 61
   16622:	de b7       	in	r29, 0x3e	; 62
   16624:	29 96       	adiw	r28, 0x09	; 9
   16626:	e3 e0       	ldi	r30, 0x03	; 3
   16628:	0c 94 be e7 	jmp	0x1cf7c	; 0x1cf7c <__epilogue_restores__+0x1e>

0001662c <amigo_overflow_check>:
    }
/// @todo FIXME
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
    AMIGOs->dsj = 0;
    return(status & ERROR_MASK);
}
   1662c:	cf 92       	push	r12
   1662e:	df 92       	push	r13
   16630:	ef 92       	push	r14
   16632:	0f 93       	push	r16
   16634:	1f 93       	push	r17
   16636:	cf 93       	push	r28
   16638:	df 93       	push	r29
   1663a:	00 d0       	rcall	.+0      	; 0x1663c <amigo_overflow_check+0x10>
   1663c:	00 d0       	rcall	.+0      	; 0x1663e <amigo_overflow_check+0x12>
   1663e:	1f 92       	push	r1
   16640:	ec 01       	movw	r28, r24
   16642:	8b 01       	movw	r16, r22
   16644:	80 e0       	ldi	r24, 0x00	; 0
   16646:	90 e0       	ldi	r25, 0x00	; 0
   16648:	21 e9       	ldi	r18, 0x91	; 145
   1664a:	30 e3       	ldi	r19, 0x30	; 48
   1664c:	69 01       	movw	r12, r18
   1664e:	e1 2c       	mov	r14, r1
   16650:	2d 81       	ldd	r18, Y+5	; 0x05
   16652:	30 e0       	ldi	r19, 0x00	; 0
   16654:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16658:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   1665c:	42 85       	ldd	r20, Z+10	; 0x0a
   1665e:	53 85       	ldd	r21, Z+11	; 0x0b
   16660:	24 17       	cp	r18, r20
   16662:	35 07       	cpc	r19, r21
   16664:	64 f1       	brlt	.+88     	; 0x166be <amigo_overflow_check+0x92>
   16666:	1d 82       	std	Y+5, r1	; 0x05
   16668:	2c 81       	ldd	r18, Y+4	; 0x04
   1666a:	2f 5f       	subi	r18, 0xFF	; 255
   1666c:	2c 83       	std	Y+4, r18	; 0x04
   1666e:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16672:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16676:	2c 81       	ldd	r18, Y+4	; 0x04
   16678:	30 e0       	ldi	r19, 0x00	; 0
   1667a:	44 85       	ldd	r20, Z+12	; 0x0c
   1667c:	55 85       	ldd	r21, Z+13	; 0x0d
   1667e:	24 17       	cp	r18, r20
   16680:	35 07       	cpc	r19, r21
   16682:	34 f3       	brlt	.-52     	; 0x16650 <amigo_overflow_check+0x24>
   16684:	1c 82       	std	Y+4, r1	; 0x04
   16686:	2b 81       	ldd	r18, Y+3	; 0x03
   16688:	2f 5f       	subi	r18, 0xFF	; 255
   1668a:	2b 83       	std	Y+3, r18	; 0x03
   1668c:	30 e0       	ldi	r19, 0x00	; 0
   1668e:	46 85       	ldd	r20, Z+14	; 0x0e
   16690:	57 85       	ldd	r21, Z+15	; 0x0f
   16692:	24 17       	cp	r18, r20
   16694:	35 07       	cpc	r19, r21
   16696:	5c f3       	brlt	.-42     	; 0x1666e <amigo_overflow_check+0x42>
   16698:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1669c:	80 ff       	sbrs	r24, 0
   1669e:	0c c0       	rjmp	.+24     	; 0x166b8 <amigo_overflow_check+0x8c>
   166a0:	01 15       	cp	r16, r1
   166a2:	11 05       	cpc	r17, r1
   166a4:	49 f0       	breq	.+18     	; 0x166b8 <amigo_overflow_check+0x8c>
   166a6:	ed b7       	in	r30, 0x3d	; 61
   166a8:	fe b7       	in	r31, 0x3e	; 62
   166aa:	15 83       	std	Z+5, r17	; 0x05
   166ac:	04 83       	std	Z+4, r16	; 0x04
   166ae:	c1 82       	std	Z+1, r12	; 0x01
   166b0:	d2 82       	std	Z+2, r13	; 0x02
   166b2:	e3 82       	std	Z+3, r14	; 0x03
   166b4:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   166b8:	81 e0       	ldi	r24, 0x01	; 1
   166ba:	90 e0       	ldi	r25, 0x00	; 0
   166bc:	d8 cf       	rjmp	.-80     	; 0x1666e <amigo_overflow_check+0x42>
   166be:	0f 90       	pop	r0
   166c0:	0f 90       	pop	r0
   166c2:	0f 90       	pop	r0
   166c4:	0f 90       	pop	r0
   166c6:	0f 90       	pop	r0
   166c8:	df 91       	pop	r29
   166ca:	cf 91       	pop	r28
   166cc:	1f 91       	pop	r17
   166ce:	0f 91       	pop	r16
   166d0:	ef 90       	pop	r14
   166d2:	df 90       	pop	r13
   166d4:	cf 90       	pop	r12
   166d6:	08 95       	ret

000166d8 <amigo_chs_to_logical>:
   166d8:	a1 e1       	ldi	r26, 0x11	; 17
   166da:	b0 e0       	ldi	r27, 0x00	; 0
   166dc:	e2 e7       	ldi	r30, 0x72	; 114
   166de:	f3 eb       	ldi	r31, 0xB3	; 179
   166e0:	0c 94 97 e7 	jmp	0x1cf2e	; 0x1cf2e <__prologue_saves__+0x8>
   166e4:	8b 01       	movw	r16, r22
   166e6:	60 91 5a 19 	lds	r22, 0x195A	; 0x80195a <AMIGOp>
   166ea:	70 91 5b 19 	lds	r23, 0x195B	; 0x80195b <AMIGOp+0x1>
   166ee:	fb 01       	movw	r30, r22
   166f0:	42 85       	ldd	r20, Z+10	; 0x0a
   166f2:	53 85       	ldd	r21, Z+11	; 0x0b
   166f4:	fc 01       	movw	r30, r24
   166f6:	c4 81       	ldd	r28, Z+4	; 0x04
   166f8:	d0 e0       	ldi	r29, 0x00	; 0
   166fa:	4c 9f       	mul	r20, r28
   166fc:	90 01       	movw	r18, r0
   166fe:	4d 9f       	mul	r20, r29
   16700:	30 0d       	add	r19, r0
   16702:	5c 9f       	mul	r21, r28
   16704:	30 0d       	add	r19, r0
   16706:	11 24       	eor	r1, r1
   16708:	49 01       	movw	r8, r18
   1670a:	33 0f       	add	r19, r19
   1670c:	aa 08       	sbc	r10, r10
   1670e:	bb 08       	sbc	r11, r11
   16710:	63 80       	ldd	r6, Z+3	; 0x03
   16712:	71 2c       	mov	r7, r1
   16714:	fb 01       	movw	r30, r22
   16716:	e4 84       	ldd	r14, Z+12	; 0x0c
   16718:	f5 84       	ldd	r15, Z+13	; 0x0d
   1671a:	4e 9d       	mul	r20, r14
   1671c:	d0 01       	movw	r26, r0
   1671e:	4f 9d       	mul	r20, r15
   16720:	b0 0d       	add	r27, r0
   16722:	5e 9d       	mul	r21, r14
   16724:	b0 0d       	add	r27, r0
   16726:	11 24       	eor	r1, r1
   16728:	a6 9d       	mul	r26, r6
   1672a:	90 01       	movw	r18, r0
   1672c:	a7 9d       	mul	r26, r7
   1672e:	30 0d       	add	r19, r0
   16730:	b6 9d       	mul	r27, r6
   16732:	30 0d       	add	r19, r0
   16734:	11 24       	eor	r1, r1
   16736:	69 01       	movw	r12, r18
   16738:	33 0f       	add	r19, r19
   1673a:	ee 08       	sbc	r14, r14
   1673c:	ff 08       	sbc	r15, r15
   1673e:	8c 0c       	add	r8, r12
   16740:	9d 1c       	adc	r9, r13
   16742:	ae 1c       	adc	r10, r14
   16744:	bf 1c       	adc	r11, r15
   16746:	fc 01       	movw	r30, r24
   16748:	f5 80       	ldd	r15, Z+5	; 0x05
   1674a:	a5 01       	movw	r20, r10
   1674c:	94 01       	movw	r18, r8
   1674e:	2f 0d       	add	r18, r15
   16750:	31 1d       	adc	r19, r1
   16752:	41 1d       	adc	r20, r1
   16754:	51 1d       	adc	r21, r1
   16756:	fb 01       	movw	r30, r22
   16758:	a0 85       	ldd	r26, Z+8	; 0x08
   1675a:	b1 85       	ldd	r27, Z+9	; 0x09
   1675c:	0e 94 7d e7 	call	0x1cefa	; 0x1cefa <__mulshisi3>
   16760:	4b 01       	movw	r8, r22
   16762:	5c 01       	movw	r10, r24
   16764:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16768:	85 ff       	sbrs	r24, 5
   1676a:	22 c0       	rjmp	.+68     	; 0x167b0 <amigo_chs_to_logical+0xd8>
   1676c:	8f 2d       	mov	r24, r15
   1676e:	90 e0       	ldi	r25, 0x00	; 0
   16770:	ed b7       	in	r30, 0x3d	; 61
   16772:	fe b7       	in	r31, 0x3e	; 62
   16774:	91 8b       	std	Z+17, r25	; 0x11
   16776:	80 8b       	std	Z+16, r24	; 0x10
   16778:	d7 87       	std	Z+15, r29	; 0x0f
   1677a:	c6 87       	std	Z+14, r28	; 0x0e
   1677c:	75 86       	std	Z+13, r7	; 0x0d
   1677e:	64 86       	std	Z+12, r6	; 0x0c
   16780:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16784:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16788:	81 81       	ldd	r24, Z+1	; 0x01
   1678a:	90 e0       	ldi	r25, 0x00	; 0
   1678c:	ed b7       	in	r30, 0x3d	; 61
   1678e:	fe b7       	in	r31, 0x3e	; 62
   16790:	93 87       	std	Z+11, r25	; 0x0b
   16792:	82 87       	std	Z+10, r24	; 0x0a
   16794:	86 82       	std	Z+6, r8	; 0x06
   16796:	97 82       	std	Z+7, r9	; 0x07
   16798:	a0 86       	std	Z+8, r10	; 0x08
   1679a:	b1 86       	std	Z+9, r11	; 0x09
   1679c:	15 83       	std	Z+5, r17	; 0x05
   1679e:	04 83       	std	Z+4, r16	; 0x04
   167a0:	8e e3       	ldi	r24, 0x3E	; 62
   167a2:	90 e3       	ldi	r25, 0x30	; 48
   167a4:	a0 e0       	ldi	r26, 0x00	; 0
   167a6:	81 83       	std	Z+1, r24	; 0x01
   167a8:	92 83       	std	Z+2, r25	; 0x02
   167aa:	a3 83       	std	Z+3, r26	; 0x03
   167ac:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   167b0:	c5 01       	movw	r24, r10
   167b2:	b4 01       	movw	r22, r8
   167b4:	cd b7       	in	r28, 0x3d	; 61
   167b6:	de b7       	in	r29, 0x3e	; 62
   167b8:	61 96       	adiw	r28, 0x11	; 17
   167ba:	ee e0       	ldi	r30, 0x0E	; 14
   167bc:	0c 94 b3 e7 	jmp	0x1cf66	; 0x1cf66 <__epilogue_restores__+0x8>

000167c0 <amigo_init>:
   167c0:	ff 92       	push	r15
   167c2:	0f 93       	push	r16
   167c4:	1f 93       	push	r17
   167c6:	cf 93       	push	r28
   167c8:	df 93       	push	r29
   167ca:	03 e6       	ldi	r16, 0x63	; 99
   167cc:	1f e1       	ldi	r17, 0x1F	; 31
   167ce:	cb e0       	ldi	r28, 0x0B	; 11
   167d0:	d4 e0       	ldi	r29, 0x04	; 4
   167d2:	82 e0       	ldi	r24, 0x02	; 2
   167d4:	f8 2e       	mov	r15, r24
   167d6:	d8 01       	movw	r26, r16
   167d8:	8c 91       	ld	r24, X
   167da:	81 30       	cpi	r24, 0x01	; 1
   167dc:	31 f5       	brne	.+76     	; 0x1682a <amigo_init+0x6a>
   167de:	8c 2f       	mov	r24, r28
   167e0:	0e 94 b9 97 	call	0x12f72	; 0x12f72 <set_active_device>
   167e4:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   167e8:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   167ec:	10 82       	st	Z, r1
   167ee:	9f 01       	movw	r18, r30
   167f0:	27 5f       	subi	r18, 0xF7	; 247
   167f2:	3f 4f       	sbci	r19, 0xFF	; 255
   167f4:	d9 01       	movw	r26, r18
   167f6:	8d 2f       	mov	r24, r29
   167f8:	1d 92       	st	X+, r1
   167fa:	8a 95       	dec	r24
   167fc:	e9 f7       	brne	.-6      	; 0x167f8 <amigo_init+0x38>
   167fe:	2c 5f       	subi	r18, 0xFC	; 252
   16800:	3f 4f       	sbci	r19, 0xFF	; 255
   16802:	d9 01       	movw	r26, r18
   16804:	8d 2f       	mov	r24, r29
   16806:	1d 92       	st	X+, r1
   16808:	8a 95       	dec	r24
   1680a:	e9 f7       	brne	.-6      	; 0x16806 <amigo_init+0x46>
   1680c:	11 82       	std	Z+1, r1	; 0x01
   1680e:	15 82       	std	Z+5, r1	; 0x05
   16810:	14 82       	std	Z+4, r1	; 0x04
   16812:	13 82       	std	Z+3, r1	; 0x03
   16814:	f6 82       	std	Z+6, r15	; 0x06
   16816:	10 86       	std	Z+8, r1	; 0x08
   16818:	17 82       	std	Z+7, r1	; 0x07
   1681a:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   1681e:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16822:	81 81       	ldd	r24, Z+1	; 0x01
   16824:	90 e0       	ldi	r25, 0x00	; 0
   16826:	0e 94 01 87 	call	0x10e02	; 0x10e02 <gpib_disable_PPR>
   1682a:	0b 50       	subi	r16, 0x0B	; 11
   1682c:	11 09       	sbc	r17, r1
   1682e:	c1 50       	subi	r28, 0x01	; 1
   16830:	90 f6       	brcc	.-92     	; 0x167d6 <amigo_init+0x16>
   16832:	cd b7       	in	r28, 0x3d	; 61
   16834:	de b7       	in	r29, 0x3e	; 62
   16836:	e5 e0       	ldi	r30, 0x05	; 5
   16838:	0c 94 bc e7 	jmp	0x1cf78	; 0x1cf78 <__epilogue_restores__+0x1a>

0001683c <amigo_request_logical_address>:
   1683c:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16840:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16844:	15 86       	std	Z+13, r1	; 0x0d
   16846:	83 81       	ldd	r24, Z+3	; 0x03
   16848:	86 87       	std	Z+14, r24	; 0x0e
   1684a:	84 81       	ldd	r24, Z+4	; 0x04
   1684c:	87 87       	std	Z+15, r24	; 0x0f
   1684e:	85 81       	ldd	r24, Z+5	; 0x05
   16850:	80 8b       	std	Z+16, r24	; 0x10
   16852:	80 e0       	ldi	r24, 0x00	; 0
   16854:	90 e0       	ldi	r25, 0x00	; 0
   16856:	08 95       	ret

00016858 <amigo_request_status>:
   16858:	00 d0       	rcall	.+0      	; 0x1685a <amigo_request_status+0x2>
   1685a:	1f 92       	push	r1
   1685c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16860:	85 ff       	sbrs	r24, 5
   16862:	0a c0       	rjmp	.+20     	; 0x16878 <amigo_request_status+0x20>
   16864:	81 e1       	ldi	r24, 0x11	; 17
   16866:	91 e3       	ldi	r25, 0x31	; 49
   16868:	a0 e0       	ldi	r26, 0x00	; 0
   1686a:	ed b7       	in	r30, 0x3d	; 61
   1686c:	fe b7       	in	r31, 0x3e	; 62
   1686e:	81 83       	std	Z+1, r24	; 0x01
   16870:	92 83       	std	Z+2, r25	; 0x02
   16872:	a3 83       	std	Z+3, r26	; 0x03
   16874:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   16878:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   1687c:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16880:	11 86       	std	Z+9, r1	; 0x09
   16882:	81 81       	ldd	r24, Z+1	; 0x01
   16884:	82 87       	std	Z+10, r24	; 0x0a
   16886:	8d e0       	ldi	r24, 0x0D	; 13
   16888:	83 87       	std	Z+11, r24	; 0x0b
   1688a:	14 86       	std	Z+12, r1	; 0x0c
   1688c:	0e 94 61 70 	call	0xe0c2	; 0xe0c2 <mmc_wp_status>
   16890:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16894:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16898:	89 2b       	or	r24, r25
   1689a:	19 f0       	breq	.+6      	; 0x168a2 <amigo_request_status+0x4a>
   1689c:	84 85       	ldd	r24, Z+12	; 0x0c
   1689e:	80 66       	ori	r24, 0x60	; 96
   168a0:	84 87       	std	Z+12, r24	; 0x0c
   168a2:	86 81       	ldd	r24, Z+6	; 0x06
   168a4:	82 30       	cpi	r24, 0x02	; 2
   168a6:	31 f4       	brne	.+12     	; 0x168b4 <amigo_request_status+0x5c>
   168a8:	83 e1       	ldi	r24, 0x13	; 19
   168aa:	81 87       	std	Z+9, r24	; 0x09
   168ac:	84 85       	ldd	r24, Z+12	; 0x0c
   168ae:	88 60       	ori	r24, 0x08	; 8
   168b0:	84 87       	std	Z+12, r24	; 0x0c
   168b2:	21 c0       	rjmp	.+66     	; 0x168f6 <amigo_request_status+0x9e>
   168b4:	27 81       	ldd	r18, Z+7	; 0x07
   168b6:	30 85       	ldd	r19, Z+8	; 0x08
   168b8:	21 15       	cp	r18, r1
   168ba:	31 05       	cpc	r19, r1
   168bc:	11 f4       	brne	.+4      	; 0x168c2 <amigo_request_status+0x6a>
   168be:	81 30       	cpi	r24, 0x01	; 1
   168c0:	d1 f4       	brne	.+52     	; 0x168f6 <amigo_request_status+0x9e>
   168c2:	26 fd       	sbrc	r18, 6
   168c4:	0c c0       	rjmp	.+24     	; 0x168de <amigo_request_status+0x86>
   168c6:	25 ff       	sbrs	r18, 5
   168c8:	03 c0       	rjmp	.+6      	; 0x168d0 <amigo_request_status+0x78>
   168ca:	8a e0       	ldi	r24, 0x0A	; 10
   168cc:	81 87       	std	Z+9, r24	; 0x09
   168ce:	0d c0       	rjmp	.+26     	; 0x168ea <amigo_request_status+0x92>
   168d0:	84 85       	ldd	r24, Z+12	; 0x0c
   168d2:	24 ff       	sbrs	r18, 4
   168d4:	02 c0       	rjmp	.+4      	; 0x168da <amigo_request_status+0x82>
   168d6:	83 60       	ori	r24, 0x03	; 3
   168d8:	07 c0       	rjmp	.+14     	; 0x168e8 <amigo_request_status+0x90>
   168da:	21 ff       	sbrs	r18, 1
   168dc:	02 c0       	rjmp	.+4      	; 0x168e2 <amigo_request_status+0x8a>
   168de:	83 e1       	ldi	r24, 0x13	; 19
   168e0:	f5 cf       	rjmp	.-22     	; 0x168cc <amigo_request_status+0x74>
   168e2:	22 ff       	sbrs	r18, 2
   168e4:	02 c0       	rjmp	.+4      	; 0x168ea <amigo_request_status+0x92>
   168e6:	84 60       	ori	r24, 0x04	; 4
   168e8:	84 87       	std	Z+12, r24	; 0x0c
   168ea:	84 85       	ldd	r24, Z+12	; 0x0c
   168ec:	80 61       	ori	r24, 0x10	; 16
   168ee:	84 87       	std	Z+12, r24	; 0x0c
   168f0:	83 85       	ldd	r24, Z+11	; 0x0b
   168f2:	80 68       	ori	r24, 0x80	; 128
   168f4:	83 87       	std	Z+11, r24	; 0x0b
   168f6:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   168fa:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   168fe:	81 81       	ldd	r24, Z+1	; 0x01
   16900:	90 e0       	ldi	r25, 0x00	; 0
   16902:	0e 94 cb 86 	call	0x10d96	; 0x10d96 <gpib_enable_PPR>
   16906:	80 e0       	ldi	r24, 0x00	; 0
   16908:	90 e0       	ldi	r25, 0x00	; 0
   1690a:	0f 90       	pop	r0
   1690c:	0f 90       	pop	r0
   1690e:	0f 90       	pop	r0
   16910:	08 95       	ret

00016912 <amigo_send_logical_address>:
   16912:	a5 e0       	ldi	r26, 0x05	; 5
   16914:	b0 e0       	ldi	r27, 0x00	; 0
   16916:	ef e8       	ldi	r30, 0x8F	; 143
   16918:	f4 eb       	ldi	r31, 0xB4	; 180
   1691a:	0c 94 a3 e7 	jmp	0x1cf46	; 0x1cf46 <__prologue_saves__+0x20>
   1691e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16922:	85 ff       	sbrs	r24, 5
   16924:	0a c0       	rjmp	.+20     	; 0x1693a <amigo_send_logical_address+0x28>
   16926:	83 ef       	ldi	r24, 0xF3	; 243
   16928:	90 e3       	ldi	r25, 0x30	; 48
   1692a:	a0 e0       	ldi	r26, 0x00	; 0
   1692c:	ed b7       	in	r30, 0x3d	; 61
   1692e:	fe b7       	in	r31, 0x3e	; 62
   16930:	81 83       	std	Z+1, r24	; 0x01
   16932:	92 83       	std	Z+2, r25	; 0x02
   16934:	a3 83       	std	Z+3, r26	; 0x03
   16936:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1693a:	80 e0       	ldi	r24, 0x00	; 0
   1693c:	91 e0       	ldi	r25, 0x01	; 1
   1693e:	9d 83       	std	Y+5, r25	; 0x05
   16940:	8c 83       	std	Y+4, r24	; 0x04
   16942:	80 91 58 19 	lds	r24, 0x1958	; 0x801958 <AMIGOs>
   16946:	90 91 59 19 	lds	r25, 0x1959	; 0x801959 <AMIGOs+0x1>
   1694a:	ae 01       	movw	r20, r28
   1694c:	4c 5f       	subi	r20, 0xFC	; 252
   1694e:	5f 4f       	sbci	r21, 0xFF	; 255
   16950:	64 e0       	ldi	r22, 0x04	; 4
   16952:	70 e0       	ldi	r23, 0x00	; 0
   16954:	0d 96       	adiw	r24, 0x0d	; 13
   16956:	0e 94 fb 8b 	call	0x117f6	; 0x117f6 <gpib_write_str>
   1695a:	2c 81       	ldd	r18, Y+4	; 0x04
   1695c:	3d 81       	ldd	r19, Y+5	; 0x05
   1695e:	22 27       	eor	r18, r18
   16960:	30 7d       	andi	r19, 0xD0	; 208
   16962:	23 2b       	or	r18, r19
   16964:	11 f4       	brne	.+4      	; 0x1696a <amigo_send_logical_address+0x58>
   16966:	04 97       	sbiw	r24, 0x04	; 4
   16968:	c9 f0       	breq	.+50     	; 0x1699c <amigo_send_logical_address+0x8a>
   1696a:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   1696e:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16972:	87 81       	ldd	r24, Z+7	; 0x07
   16974:	90 85       	ldd	r25, Z+8	; 0x08
   16976:	80 62       	ori	r24, 0x20	; 32
   16978:	90 87       	std	Z+8, r25	; 0x08
   1697a:	87 83       	std	Z+7, r24	; 0x07
   1697c:	81 e0       	ldi	r24, 0x01	; 1
   1697e:	86 83       	std	Z+6, r24	; 0x06
   16980:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16984:	80 ff       	sbrs	r24, 0
   16986:	0a c0       	rjmp	.+20     	; 0x1699c <amigo_send_logical_address+0x8a>
   16988:	89 ed       	ldi	r24, 0xD9	; 217
   1698a:	90 e3       	ldi	r25, 0x30	; 48
   1698c:	a0 e0       	ldi	r26, 0x00	; 0
   1698e:	ed b7       	in	r30, 0x3d	; 61
   16990:	fe b7       	in	r31, 0x3e	; 62
   16992:	81 83       	std	Z+1, r24	; 0x01
   16994:	92 83       	std	Z+2, r25	; 0x02
   16996:	a3 83       	std	Z+3, r26	; 0x03
   16998:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1699c:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   169a0:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   169a4:	81 81       	ldd	r24, Z+1	; 0x01
   169a6:	90 e0       	ldi	r25, 0x00	; 0
   169a8:	0e 94 cb 86 	call	0x10d96	; 0x10d96 <gpib_enable_PPR>
   169ac:	8c 81       	ldd	r24, Y+4	; 0x04
   169ae:	9d 81       	ldd	r25, Y+5	; 0x05
   169b0:	88 27       	eor	r24, r24
   169b2:	90 7d       	andi	r25, 0xD0	; 208
   169b4:	25 96       	adiw	r28, 0x05	; 5
   169b6:	e2 e0       	ldi	r30, 0x02	; 2
   169b8:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

000169bc <amigo_send_status>:
   169bc:	a5 e0       	ldi	r26, 0x05	; 5
   169be:	b0 e0       	ldi	r27, 0x00	; 0
   169c0:	e4 ee       	ldi	r30, 0xE4	; 228
   169c2:	f4 eb       	ldi	r31, 0xB4	; 180
   169c4:	0c 94 a3 e7 	jmp	0x1cf46	; 0x1cf46 <__prologue_saves__+0x20>
   169c8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   169cc:	85 ff       	sbrs	r24, 5
   169ce:	0a c0       	rjmp	.+20     	; 0x169e4 <amigo_send_status+0x28>
   169d0:	84 ec       	ldi	r24, 0xC4	; 196
   169d2:	90 e3       	ldi	r25, 0x30	; 48
   169d4:	a0 e0       	ldi	r26, 0x00	; 0
   169d6:	ed b7       	in	r30, 0x3d	; 61
   169d8:	fe b7       	in	r31, 0x3e	; 62
   169da:	81 83       	std	Z+1, r24	; 0x01
   169dc:	92 83       	std	Z+2, r25	; 0x02
   169de:	a3 83       	std	Z+3, r26	; 0x03
   169e0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   169e4:	80 e0       	ldi	r24, 0x00	; 0
   169e6:	91 e0       	ldi	r25, 0x01	; 1
   169e8:	9d 83       	std	Y+5, r25	; 0x05
   169ea:	8c 83       	std	Y+4, r24	; 0x04
   169ec:	80 91 58 19 	lds	r24, 0x1958	; 0x801958 <AMIGOs>
   169f0:	90 91 59 19 	lds	r25, 0x1959	; 0x801959 <AMIGOs+0x1>
   169f4:	ae 01       	movw	r20, r28
   169f6:	4c 5f       	subi	r20, 0xFC	; 252
   169f8:	5f 4f       	sbci	r21, 0xFF	; 255
   169fa:	64 e0       	ldi	r22, 0x04	; 4
   169fc:	70 e0       	ldi	r23, 0x00	; 0
   169fe:	09 96       	adiw	r24, 0x09	; 9
   16a00:	0e 94 fb 8b 	call	0x117f6	; 0x117f6 <gpib_write_str>
   16a04:	2c 81       	ldd	r18, Y+4	; 0x04
   16a06:	3d 81       	ldd	r19, Y+5	; 0x05
   16a08:	22 27       	eor	r18, r18
   16a0a:	30 7d       	andi	r19, 0xD0	; 208
   16a0c:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16a10:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16a14:	23 2b       	or	r18, r19
   16a16:	11 f4       	brne	.+4      	; 0x16a1c <amigo_send_status+0x60>
   16a18:	04 97       	sbiw	r24, 0x04	; 4
   16a1a:	b1 f0       	breq	.+44     	; 0x16a48 <amigo_send_status+0x8c>
   16a1c:	87 81       	ldd	r24, Z+7	; 0x07
   16a1e:	90 85       	ldd	r25, Z+8	; 0x08
   16a20:	80 62       	ori	r24, 0x20	; 32
   16a22:	90 87       	std	Z+8, r25	; 0x08
   16a24:	87 83       	std	Z+7, r24	; 0x07
   16a26:	81 e0       	ldi	r24, 0x01	; 1
   16a28:	86 83       	std	Z+6, r24	; 0x06
   16a2a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16a2e:	80 ff       	sbrs	r24, 0
   16a30:	0e c0       	rjmp	.+28     	; 0x16a4e <amigo_send_status+0x92>
   16a32:	8a ea       	ldi	r24, 0xAA	; 170
   16a34:	90 e3       	ldi	r25, 0x30	; 48
   16a36:	a0 e0       	ldi	r26, 0x00	; 0
   16a38:	ed b7       	in	r30, 0x3d	; 61
   16a3a:	fe b7       	in	r31, 0x3e	; 62
   16a3c:	81 83       	std	Z+1, r24	; 0x01
   16a3e:	92 83       	std	Z+2, r25	; 0x02
   16a40:	a3 83       	std	Z+3, r26	; 0x03
   16a42:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   16a46:	03 c0       	rjmp	.+6      	; 0x16a4e <amigo_send_status+0x92>
   16a48:	10 86       	std	Z+8, r1	; 0x08
   16a4a:	17 82       	std	Z+7, r1	; 0x07
   16a4c:	16 82       	std	Z+6, r1	; 0x06
   16a4e:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16a52:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16a56:	81 81       	ldd	r24, Z+1	; 0x01
   16a58:	90 e0       	ldi	r25, 0x00	; 0
   16a5a:	0e 94 cb 86 	call	0x10d96	; 0x10d96 <gpib_enable_PPR>
   16a5e:	8c 81       	ldd	r24, Y+4	; 0x04
   16a60:	9d 81       	ldd	r25, Y+5	; 0x05
   16a62:	88 27       	eor	r24, r24
   16a64:	90 7d       	andi	r25, 0xD0	; 208
   16a66:	25 96       	adiw	r28, 0x05	; 5
   16a68:	e2 e0       	ldi	r30, 0x02	; 2
   16a6a:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00016a6e <amigo_increment>:
   16a6e:	a1 e1       	ldi	r26, 0x11	; 17
   16a70:	b0 e0       	ldi	r27, 0x00	; 0
   16a72:	ed e3       	ldi	r30, 0x3D	; 61
   16a74:	f5 eb       	ldi	r31, 0xB5	; 181
   16a76:	0c 94 a3 e7 	jmp	0x1cf46	; 0x1cf46 <__prologue_saves__+0x20>
   16a7a:	bc 01       	movw	r22, r24
   16a7c:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16a80:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16a84:	91 e1       	ldi	r25, 0x11	; 17
   16a86:	de 01       	movw	r26, r28
   16a88:	11 96       	adiw	r26, 0x01	; 1
   16a8a:	01 90       	ld	r0, Z+
   16a8c:	0d 92       	st	X+, r0
   16a8e:	9a 95       	dec	r25
   16a90:	e1 f7       	brne	.-8      	; 0x16a8a <amigo_increment+0x1c>
   16a92:	9e 81       	ldd	r25, Y+6	; 0x06
   16a94:	9f 5f       	subi	r25, 0xFF	; 255
   16a96:	9e 83       	std	Y+6, r25	; 0x06
   16a98:	ce 01       	movw	r24, r28
   16a9a:	01 96       	adiw	r24, 0x01	; 1
   16a9c:	c7 dd       	rcall	.-1138   	; 0x1662c <amigo_overflow_check>
   16a9e:	00 97       	sbiw	r24, 0x00	; 0
   16aa0:	59 f4       	brne	.+22     	; 0x16ab8 <amigo_increment+0x4a>
   16aa2:	a0 91 58 19 	lds	r26, 0x1958	; 0x801958 <AMIGOs>
   16aa6:	b0 91 59 19 	lds	r27, 0x1959	; 0x801959 <AMIGOs+0x1>
   16aaa:	21 e1       	ldi	r18, 0x11	; 17
   16aac:	fe 01       	movw	r30, r28
   16aae:	31 96       	adiw	r30, 0x01	; 1
   16ab0:	01 90       	ld	r0, Z+
   16ab2:	0d 92       	st	X+, r0
   16ab4:	2a 95       	dec	r18
   16ab6:	e1 f7       	brne	.-8      	; 0x16ab0 <amigo_increment+0x42>
   16ab8:	61 96       	adiw	r28, 0x11	; 17
   16aba:	e2 e0       	ldi	r30, 0x02	; 2
   16abc:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00016ac0 <amigo_seek>:
   16ac0:	0f 93       	push	r16
   16ac2:	1f 93       	push	r17
   16ac4:	cf 93       	push	r28
   16ac6:	df 93       	push	r29
   16ac8:	ec 01       	movw	r28, r24
   16aca:	6b e7       	ldi	r22, 0x7B	; 123
   16acc:	75 e1       	ldi	r23, 0x15	; 21
   16ace:	ae dd       	rcall	.-1188   	; 0x1662c <amigo_overflow_check>
   16ad0:	8c 01       	movw	r16, r24
   16ad2:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16ad6:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16ada:	89 2b       	or	r24, r25
   16adc:	41 f0       	breq	.+16     	; 0x16aee <amigo_seek+0x2e>
   16ade:	81 e0       	ldi	r24, 0x01	; 1
   16ae0:	86 83       	std	Z+6, r24	; 0x06
   16ae2:	87 81       	ldd	r24, Z+7	; 0x07
   16ae4:	90 85       	ldd	r25, Z+8	; 0x08
   16ae6:	84 60       	ori	r24, 0x04	; 4
   16ae8:	90 87       	std	Z+8, r25	; 0x08
   16aea:	87 83       	std	Z+7, r24	; 0x07
   16aec:	06 c0       	rjmp	.+12     	; 0x16afa <amigo_seek+0x3a>
   16aee:	8d 81       	ldd	r24, Y+5	; 0x05
   16af0:	85 83       	std	Z+5, r24	; 0x05
   16af2:	8c 81       	ldd	r24, Y+4	; 0x04
   16af4:	84 83       	std	Z+4, r24	; 0x04
   16af6:	8b 81       	ldd	r24, Y+3	; 0x03
   16af8:	83 83       	std	Z+3, r24	; 0x03
   16afa:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16afe:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16b02:	81 81       	ldd	r24, Z+1	; 0x01
   16b04:	90 e0       	ldi	r25, 0x00	; 0
   16b06:	0e 94 cb 86 	call	0x10d96	; 0x10d96 <gpib_enable_PPR>
   16b0a:	c8 01       	movw	r24, r16
   16b0c:	df 91       	pop	r29
   16b0e:	cf 91       	pop	r28
   16b10:	1f 91       	pop	r17
   16b12:	0f 91       	pop	r16
   16b14:	08 95       	ret

00016b16 <amigo_verify>:
   16b16:	8f 92       	push	r8
   16b18:	9f 92       	push	r9
   16b1a:	af 92       	push	r10
   16b1c:	bf 92       	push	r11
   16b1e:	ef 92       	push	r14
   16b20:	ff 92       	push	r15
   16b22:	0f 93       	push	r16
   16b24:	1f 93       	push	r17
   16b26:	cf 93       	push	r28
   16b28:	df 93       	push	r29
   16b2a:	ad b7       	in	r26, 0x3d	; 61
   16b2c:	be b7       	in	r27, 0x3e	; 62
   16b2e:	19 97       	sbiw	r26, 0x09	; 9
   16b30:	0f b6       	in	r0, 0x3f	; 63
   16b32:	f8 94       	cli
   16b34:	be bf       	out	0x3e, r27	; 62
   16b36:	0f be       	out	0x3f, r0	; 63
   16b38:	ad bf       	out	0x3d, r26	; 61
   16b3a:	7c 01       	movw	r14, r24
   16b3c:	60 e8       	ldi	r22, 0x80	; 128
   16b3e:	75 e1       	ldi	r23, 0x15	; 21
   16b40:	80 91 58 19 	lds	r24, 0x1958	; 0x801958 <AMIGOs>
   16b44:	90 91 59 19 	lds	r25, 0x1959	; 0x801959 <AMIGOs+0x1>
   16b48:	c7 dd       	rcall	.-1138   	; 0x166d8 <amigo_chs_to_logical>
   16b4a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16b4e:	25 ff       	sbrs	r18, 5
   16b50:	10 c0       	rjmp	.+32     	; 0x16b72 <amigo_verify+0x5c>
   16b52:	ed b7       	in	r30, 0x3d	; 61
   16b54:	fe b7       	in	r31, 0x3e	; 62
   16b56:	e0 86       	std	Z+8, r14	; 0x08
   16b58:	f1 86       	std	Z+9, r15	; 0x09
   16b5a:	64 83       	std	Z+4, r22	; 0x04
   16b5c:	75 83       	std	Z+5, r23	; 0x05
   16b5e:	86 83       	std	Z+6, r24	; 0x06
   16b60:	97 83       	std	Z+7, r25	; 0x07
   16b62:	89 e6       	ldi	r24, 0x69	; 105
   16b64:	90 e3       	ldi	r25, 0x30	; 48
   16b66:	a0 e0       	ldi	r26, 0x00	; 0
   16b68:	81 83       	std	Z+1, r24	; 0x01
   16b6a:	92 83       	std	Z+2, r25	; 0x02
   16b6c:	a3 83       	std	Z+3, r26	; 0x03
   16b6e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   16b72:	e7 01       	movw	r28, r14
   16b74:	20 97       	sbiw	r28, 0x00	; 0
   16b76:	09 f4       	brne	.+2      	; 0x16b7a <amigo_verify+0x64>
   16b78:	4b c0       	rjmp	.+150    	; 0x16c10 <amigo_verify+0xfa>
   16b7a:	6d e8       	ldi	r22, 0x8D	; 141
   16b7c:	75 e1       	ldi	r23, 0x15	; 21
   16b7e:	80 91 58 19 	lds	r24, 0x1958	; 0x801958 <AMIGOs>
   16b82:	90 91 59 19 	lds	r25, 0x1959	; 0x801959 <AMIGOs+0x1>
   16b86:	a8 dd       	rcall	.-1200   	; 0x166d8 <amigo_chs_to_logical>
   16b88:	4b 01       	movw	r8, r22
   16b8a:	5c 01       	movw	r10, r24
   16b8c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16b90:	86 fd       	sbrc	r24, 6
   16b92:	0e 94 f1 85 	call	0x10be2	; 0x10be2 <gpib_timer_elapsed_begin>
   16b96:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16b9a:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16b9e:	e0 90 58 19 	lds	r14, 0x1958	; 0x801958 <AMIGOs>
   16ba2:	f0 90 59 19 	lds	r15, 0x1959	; 0x801959 <AMIGOs+0x1>
   16ba6:	87 e0       	ldi	r24, 0x07	; 7
   16ba8:	e8 0e       	add	r14, r24
   16baa:	f1 1c       	adc	r15, r1
   16bac:	00 85       	ldd	r16, Z+8	; 0x08
   16bae:	11 85       	ldd	r17, Z+9	; 0x09
   16bb0:	20 ee       	ldi	r18, 0xE0	; 224
   16bb2:	3c e1       	ldi	r19, 0x1C	; 28
   16bb4:	b5 01       	movw	r22, r10
   16bb6:	a4 01       	movw	r20, r8
   16bb8:	82 81       	ldd	r24, Z+2	; 0x02
   16bba:	93 81       	ldd	r25, Z+3	; 0x03
   16bbc:	0e 94 43 85 	call	0x10a86	; 0x10a86 <dbf_open_read>
   16bc0:	7c 01       	movw	r14, r24
   16bc2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16bc6:	86 ff       	sbrs	r24, 6
   16bc8:	04 c0       	rjmp	.+8      	; 0x16bd2 <amigo_verify+0xbc>
   16bca:	84 e9       	ldi	r24, 0x94	; 148
   16bcc:	90 e1       	ldi	r25, 0x10	; 16
   16bce:	0e 94 03 86 	call	0x10c06	; 0x10c06 <gpib_timer_elapsed_end>
   16bd2:	20 91 58 19 	lds	r18, 0x1958	; 0x801958 <AMIGOs>
   16bd6:	30 91 59 19 	lds	r19, 0x1959	; 0x801959 <AMIGOs+0x1>
   16bda:	f9 01       	movw	r30, r18
   16bdc:	87 81       	ldd	r24, Z+7	; 0x07
   16bde:	90 85       	ldd	r25, Z+8	; 0x08
   16be0:	89 2b       	or	r24, r25
   16be2:	21 f0       	breq	.+8      	; 0x16bec <amigo_verify+0xd6>
   16be4:	81 e0       	ldi	r24, 0x01	; 1
   16be6:	f9 01       	movw	r30, r18
   16be8:	86 83       	std	Z+6, r24	; 0x06
   16bea:	15 c0       	rjmp	.+42     	; 0x16c16 <amigo_verify+0x100>
   16bec:	80 91 5a 19 	lds	r24, 0x195A	; 0x80195a <AMIGOp>
   16bf0:	90 91 5b 19 	lds	r25, 0x195B	; 0x80195b <AMIGOp+0x1>
   16bf4:	fc 01       	movw	r30, r24
   16bf6:	80 85       	ldd	r24, Z+8	; 0x08
   16bf8:	91 85       	ldd	r25, Z+9	; 0x09
   16bfa:	e8 16       	cp	r14, r24
   16bfc:	f9 06       	cpc	r15, r25
   16bfe:	91 f7       	brne	.-28     	; 0x16be4 <amigo_verify+0xce>
   16c00:	85 e9       	ldi	r24, 0x95	; 149
   16c02:	95 e1       	ldi	r25, 0x15	; 21
   16c04:	34 df       	rcall	.-408    	; 0x16a6e <amigo_increment>
   16c06:	21 97       	sbiw	r28, 0x01	; 1
   16c08:	89 2b       	or	r24, r25
   16c0a:	09 f4       	brne	.+2      	; 0x16c0e <amigo_verify+0xf8>
   16c0c:	b3 cf       	rjmp	.-154    	; 0x16b74 <amigo_verify+0x5e>
   16c0e:	03 c0       	rjmp	.+6      	; 0x16c16 <amigo_verify+0x100>
   16c10:	c0 e0       	ldi	r28, 0x00	; 0
   16c12:	d0 e0       	ldi	r29, 0x00	; 0
   16c14:	02 c0       	rjmp	.+4      	; 0x16c1a <amigo_verify+0x104>
   16c16:	c1 e0       	ldi	r28, 0x01	; 1
   16c18:	d0 e0       	ldi	r29, 0x00	; 0
   16c1a:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16c1e:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16c22:	81 81       	ldd	r24, Z+1	; 0x01
   16c24:	90 e0       	ldi	r25, 0x00	; 0
   16c26:	0e 94 cb 86 	call	0x10d96	; 0x10d96 <gpib_enable_PPR>
   16c2a:	ce 01       	movw	r24, r28
   16c2c:	ad b7       	in	r26, 0x3d	; 61
   16c2e:	be b7       	in	r27, 0x3e	; 62
   16c30:	19 96       	adiw	r26, 0x09	; 9
   16c32:	0f b6       	in	r0, 0x3f	; 63
   16c34:	f8 94       	cli
   16c36:	be bf       	out	0x3e, r27	; 62
   16c38:	0f be       	out	0x3f, r0	; 63
   16c3a:	ad bf       	out	0x3d, r26	; 61
   16c3c:	df 91       	pop	r29
   16c3e:	cf 91       	pop	r28
   16c40:	1f 91       	pop	r17
   16c42:	0f 91       	pop	r16
   16c44:	ff 90       	pop	r15
   16c46:	ef 90       	pop	r14
   16c48:	bf 90       	pop	r11
   16c4a:	af 90       	pop	r10
   16c4c:	9f 90       	pop	r9
   16c4e:	8f 90       	pop	r8
   16c50:	08 95       	ret

00016c52 <amigo_format>:
   16c52:	ef 92       	push	r14
   16c54:	ff 92       	push	r15
   16c56:	0f 93       	push	r16
   16c58:	1f 93       	push	r17
   16c5a:	cf 93       	push	r28
   16c5c:	df 93       	push	r29
   16c5e:	00 d0       	rcall	.+0      	; 0x16c60 <amigo_format+0xe>
   16c60:	1f 92       	push	r1
   16c62:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16c66:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16c6a:	15 82       	std	Z+5, r1	; 0x05
   16c6c:	14 82       	std	Z+4, r1	; 0x04
   16c6e:	13 82       	std	Z+3, r1	; 0x03
   16c70:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16c74:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16c78:	40 85       	ldd	r20, Z+8	; 0x08
   16c7a:	51 85       	ldd	r21, Z+9	; 0x09
   16c7c:	68 2f       	mov	r22, r24
   16c7e:	70 e0       	ldi	r23, 0x00	; 0
   16c80:	80 ee       	ldi	r24, 0xE0	; 224
   16c82:	9c e1       	ldi	r25, 0x1C	; 28
   16c84:	0e 94 8b eb 	call	0x1d716	; 0x1d716 <memset>
   16c88:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16c8c:	85 ff       	sbrs	r24, 5
   16c8e:	0a c0       	rjmp	.+20     	; 0x16ca4 <amigo_format+0x52>
   16c90:	8e e2       	ldi	r24, 0x2E	; 46
   16c92:	90 e3       	ldi	r25, 0x30	; 48
   16c94:	a0 e0       	ldi	r26, 0x00	; 0
   16c96:	ed b7       	in	r30, 0x3d	; 61
   16c98:	fe b7       	in	r31, 0x3e	; 62
   16c9a:	81 83       	std	Z+1, r24	; 0x01
   16c9c:	92 83       	std	Z+2, r25	; 0x02
   16c9e:	a3 83       	std	Z+3, r26	; 0x03
   16ca0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   16ca4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ca8:	86 fd       	sbrc	r24, 6
   16caa:	0e 94 f1 85 	call	0x10be2	; 0x10be2 <gpib_timer_elapsed_begin>
   16cae:	6c e9       	ldi	r22, 0x9C	; 156
   16cb0:	75 e1       	ldi	r23, 0x15	; 21
   16cb2:	80 91 58 19 	lds	r24, 0x1958	; 0x801958 <AMIGOs>
   16cb6:	90 91 59 19 	lds	r25, 0x1959	; 0x801959 <AMIGOs+0x1>
   16cba:	0e dd       	rcall	.-1508   	; 0x166d8 <amigo_chs_to_logical>
   16cbc:	ab 01       	movw	r20, r22
   16cbe:	bc 01       	movw	r22, r24
   16cc0:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16cc4:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16cc8:	e0 90 58 19 	lds	r14, 0x1958	; 0x801958 <AMIGOs>
   16ccc:	f0 90 59 19 	lds	r15, 0x1959	; 0x801959 <AMIGOs+0x1>
   16cd0:	87 e0       	ldi	r24, 0x07	; 7
   16cd2:	e8 0e       	add	r14, r24
   16cd4:	f1 1c       	adc	r15, r1
   16cd6:	00 85       	ldd	r16, Z+8	; 0x08
   16cd8:	11 85       	ldd	r17, Z+9	; 0x09
   16cda:	20 ee       	ldi	r18, 0xE0	; 224
   16cdc:	3c e1       	ldi	r19, 0x1C	; 28
   16cde:	82 81       	ldd	r24, Z+2	; 0x02
   16ce0:	93 81       	ldd	r25, Z+3	; 0x03
   16ce2:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <dbf_open_write>
   16ce6:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16cea:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16cee:	27 81       	ldd	r18, Z+7	; 0x07
   16cf0:	30 85       	ldd	r19, Z+8	; 0x08
   16cf2:	21 15       	cp	r18, r1
   16cf4:	31 05       	cpc	r19, r1
   16cf6:	49 f4       	brne	.+18     	; 0x16d0a <amigo_format+0xb8>
   16cf8:	c0 91 5a 19 	lds	r28, 0x195A	; 0x80195a <AMIGOp>
   16cfc:	d0 91 5b 19 	lds	r29, 0x195B	; 0x80195b <AMIGOp+0x1>
   16d00:	48 85       	ldd	r20, Y+8	; 0x08
   16d02:	59 85       	ldd	r21, Y+9	; 0x09
   16d04:	84 17       	cp	r24, r20
   16d06:	95 07       	cpc	r25, r21
   16d08:	41 f0       	breq	.+16     	; 0x16d1a <amigo_format+0xc8>
   16d0a:	22 60       	ori	r18, 0x02	; 2
   16d0c:	30 87       	std	Z+8, r19	; 0x08
   16d0e:	27 83       	std	Z+7, r18	; 0x07
   16d10:	81 e0       	ldi	r24, 0x01	; 1
   16d12:	86 83       	std	Z+6, r24	; 0x06
   16d14:	c1 e0       	ldi	r28, 0x01	; 1
   16d16:	d0 e0       	ldi	r29, 0x00	; 0
   16d18:	0f c0       	rjmp	.+30     	; 0x16d38 <amigo_format+0xe6>
   16d1a:	80 e0       	ldi	r24, 0x00	; 0
   16d1c:	90 e0       	ldi	r25, 0x00	; 0
   16d1e:	a7 de       	rcall	.-690    	; 0x16a6e <amigo_increment>
   16d20:	89 2b       	or	r24, r25
   16d22:	29 f2       	breq	.-118    	; 0x16cae <amigo_format+0x5c>
   16d24:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16d28:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16d2c:	15 82       	std	Z+5, r1	; 0x05
   16d2e:	14 82       	std	Z+4, r1	; 0x04
   16d30:	13 82       	std	Z+3, r1	; 0x03
   16d32:	16 82       	std	Z+6, r1	; 0x06
   16d34:	c0 e0       	ldi	r28, 0x00	; 0
   16d36:	d0 e0       	ldi	r29, 0x00	; 0
   16d38:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d3c:	86 ff       	sbrs	r24, 6
   16d3e:	04 c0       	rjmp	.+8      	; 0x16d48 <amigo_format+0xf6>
   16d40:	8c e9       	ldi	r24, 0x9C	; 156
   16d42:	95 e1       	ldi	r25, 0x15	; 21
   16d44:	0e 94 03 86 	call	0x10c06	; 0x10c06 <gpib_timer_elapsed_end>
   16d48:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d4c:	85 ff       	sbrs	r24, 5
   16d4e:	0a c0       	rjmp	.+20     	; 0x16d64 <amigo_format+0x112>
   16d50:	89 e1       	ldi	r24, 0x19	; 25
   16d52:	90 e3       	ldi	r25, 0x30	; 48
   16d54:	a0 e0       	ldi	r26, 0x00	; 0
   16d56:	ed b7       	in	r30, 0x3d	; 61
   16d58:	fe b7       	in	r31, 0x3e	; 62
   16d5a:	81 83       	std	Z+1, r24	; 0x01
   16d5c:	92 83       	std	Z+2, r25	; 0x02
   16d5e:	a3 83       	std	Z+3, r26	; 0x03
   16d60:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   16d64:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16d68:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16d6c:	81 81       	ldd	r24, Z+1	; 0x01
   16d6e:	90 e0       	ldi	r25, 0x00	; 0
   16d70:	0e 94 cb 86 	call	0x10d96	; 0x10d96 <gpib_enable_PPR>
   16d74:	ce 01       	movw	r24, r28
   16d76:	cd b7       	in	r28, 0x3d	; 61
   16d78:	de b7       	in	r29, 0x3e	; 62
   16d7a:	23 96       	adiw	r28, 0x03	; 3
   16d7c:	e6 e0       	ldi	r30, 0x06	; 6
   16d7e:	0c 94 bb e7 	jmp	0x1cf76	; 0x1cf76 <__epilogue_restores__+0x18>

00016d82 <amigo_buffered_read_command>:
   16d82:	8f 92       	push	r8
   16d84:	9f 92       	push	r9
   16d86:	af 92       	push	r10
   16d88:	bf 92       	push	r11
   16d8a:	ef 92       	push	r14
   16d8c:	ff 92       	push	r15
   16d8e:	0f 93       	push	r16
   16d90:	1f 93       	push	r17
   16d92:	cf 93       	push	r28
   16d94:	df 93       	push	r29
   16d96:	00 d0       	rcall	.+0      	; 0x16d98 <amigo_buffered_read_command+0x16>
   16d98:	00 d0       	rcall	.+0      	; 0x16d9a <amigo_buffered_read_command+0x18>
   16d9a:	1f 92       	push	r1
   16d9c:	63 ea       	ldi	r22, 0xA3	; 163
   16d9e:	75 e1       	ldi	r23, 0x15	; 21
   16da0:	80 91 58 19 	lds	r24, 0x1958	; 0x801958 <AMIGOs>
   16da4:	90 91 59 19 	lds	r25, 0x1959	; 0x801959 <AMIGOs+0x1>
   16da8:	97 dc       	rcall	.-1746   	; 0x166d8 <amigo_chs_to_logical>
   16daa:	4b 01       	movw	r8, r22
   16dac:	5c 01       	movw	r10, r24
   16dae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16db2:	85 ff       	sbrs	r24, 5
   16db4:	12 c0       	rjmp	.+36     	; 0x16dda <amigo_buffered_read_command+0x58>
   16db6:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16dba:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16dbe:	80 81       	ld	r24, Z
   16dc0:	90 e0       	ldi	r25, 0x00	; 0
   16dc2:	ed b7       	in	r30, 0x3d	; 61
   16dc4:	fe b7       	in	r31, 0x3e	; 62
   16dc6:	95 83       	std	Z+5, r25	; 0x05
   16dc8:	84 83       	std	Z+4, r24	; 0x04
   16dca:	87 e0       	ldi	r24, 0x07	; 7
   16dcc:	90 e3       	ldi	r25, 0x30	; 48
   16dce:	a0 e0       	ldi	r26, 0x00	; 0
   16dd0:	81 83       	std	Z+1, r24	; 0x01
   16dd2:	92 83       	std	Z+2, r25	; 0x02
   16dd4:	a3 83       	std	Z+3, r26	; 0x03
   16dd6:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   16dda:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16dde:	86 fd       	sbrc	r24, 6
   16de0:	0e 94 f1 85 	call	0x10be2	; 0x10be2 <gpib_timer_elapsed_begin>
   16de4:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16de8:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16dec:	e0 90 58 19 	lds	r14, 0x1958	; 0x801958 <AMIGOs>
   16df0:	f0 90 59 19 	lds	r15, 0x1959	; 0x801959 <AMIGOs+0x1>
   16df4:	87 e0       	ldi	r24, 0x07	; 7
   16df6:	e8 0e       	add	r14, r24
   16df8:	f1 1c       	adc	r15, r1
   16dfa:	00 85       	ldd	r16, Z+8	; 0x08
   16dfc:	11 85       	ldd	r17, Z+9	; 0x09
   16dfe:	20 ee       	ldi	r18, 0xE0	; 224
   16e00:	3c e1       	ldi	r19, 0x1C	; 28
   16e02:	b5 01       	movw	r22, r10
   16e04:	a4 01       	movw	r20, r8
   16e06:	82 81       	ldd	r24, Z+2	; 0x02
   16e08:	93 81       	ldd	r25, Z+3	; 0x03
   16e0a:	0e 94 43 85 	call	0x10a86	; 0x10a86 <dbf_open_read>
   16e0e:	7c 01       	movw	r14, r24
   16e10:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e14:	86 ff       	sbrs	r24, 6
   16e16:	04 c0       	rjmp	.+8      	; 0x16e20 <amigo_buffered_read_command+0x9e>
   16e18:	84 e9       	ldi	r24, 0x94	; 148
   16e1a:	90 e1       	ldi	r25, 0x10	; 16
   16e1c:	0e 94 03 86 	call	0x10c06	; 0x10c06 <gpib_timer_elapsed_end>
   16e20:	c0 91 58 19 	lds	r28, 0x1958	; 0x801958 <AMIGOs>
   16e24:	d0 91 59 19 	lds	r29, 0x1959	; 0x801959 <AMIGOs+0x1>
   16e28:	8f 81       	ldd	r24, Y+7	; 0x07
   16e2a:	98 85       	ldd	r25, Y+8	; 0x08
   16e2c:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16e30:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16e34:	89 2b       	or	r24, r25
   16e36:	29 f4       	brne	.+10     	; 0x16e42 <amigo_buffered_read_command+0xc0>
   16e38:	80 85       	ldd	r24, Z+8	; 0x08
   16e3a:	91 85       	ldd	r25, Z+9	; 0x09
   16e3c:	e8 16       	cp	r14, r24
   16e3e:	f9 06       	cpc	r15, r25
   16e40:	19 f0       	breq	.+6      	; 0x16e48 <amigo_buffered_read_command+0xc6>
   16e42:	81 e0       	ldi	r24, 0x01	; 1
   16e44:	8e 83       	std	Y+6, r24	; 0x06
   16e46:	14 c0       	rjmp	.+40     	; 0x16e70 <amigo_buffered_read_command+0xee>
   16e48:	83 ea       	ldi	r24, 0xA3	; 163
   16e4a:	95 e1       	ldi	r25, 0x15	; 21
   16e4c:	10 de       	rcall	.-992    	; 0x16a6e <amigo_increment>
   16e4e:	89 2b       	or	r24, r25
   16e50:	59 f0       	breq	.+22     	; 0x16e68 <amigo_buffered_read_command+0xe6>
   16e52:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16e56:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16e5a:	81 e0       	ldi	r24, 0x01	; 1
   16e5c:	86 83       	std	Z+6, r24	; 0x06
   16e5e:	87 81       	ldd	r24, Z+7	; 0x07
   16e60:	90 85       	ldd	r25, Z+8	; 0x08
   16e62:	84 60       	ori	r24, 0x04	; 4
   16e64:	90 87       	std	Z+8, r25	; 0x08
   16e66:	87 83       	std	Z+7, r24	; 0x07
   16e68:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16e6c:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16e70:	81 81       	ldd	r24, Z+1	; 0x01
   16e72:	90 e0       	ldi	r25, 0x00	; 0
   16e74:	0e 94 cb 86 	call	0x10d96	; 0x10d96 <gpib_enable_PPR>
   16e78:	80 e0       	ldi	r24, 0x00	; 0
   16e7a:	90 e0       	ldi	r25, 0x00	; 0
   16e7c:	0f 90       	pop	r0
   16e7e:	0f 90       	pop	r0
   16e80:	0f 90       	pop	r0
   16e82:	0f 90       	pop	r0
   16e84:	0f 90       	pop	r0
   16e86:	df 91       	pop	r29
   16e88:	cf 91       	pop	r28
   16e8a:	1f 91       	pop	r17
   16e8c:	0f 91       	pop	r16
   16e8e:	ff 90       	pop	r15
   16e90:	ef 90       	pop	r14
   16e92:	bf 90       	pop	r11
   16e94:	af 90       	pop	r10
   16e96:	9f 90       	pop	r9
   16e98:	8f 90       	pop	r8
   16e9a:	08 95       	ret

00016e9c <amigo_buffered_read_execute>:
   16e9c:	a5 e0       	ldi	r26, 0x05	; 5
   16e9e:	b0 e0       	ldi	r27, 0x00	; 0
   16ea0:	e4 e5       	ldi	r30, 0x54	; 84
   16ea2:	f7 eb       	ldi	r31, 0xB7	; 183
   16ea4:	0c 94 a1 e7 	jmp	0x1cf42	; 0x1cf42 <__prologue_saves__+0x1c>
   16ea8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16eac:	87 fd       	sbrc	r24, 7
   16eae:	0e 94 f1 85 	call	0x10be2	; 0x10be2 <gpib_timer_elapsed_begin>
   16eb2:	80 e0       	ldi	r24, 0x00	; 0
   16eb4:	91 e0       	ldi	r25, 0x01	; 1
   16eb6:	9d 83       	std	Y+5, r25	; 0x05
   16eb8:	8c 83       	std	Y+4, r24	; 0x04
   16eba:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16ebe:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16ec2:	60 85       	ldd	r22, Z+8	; 0x08
   16ec4:	71 85       	ldd	r23, Z+9	; 0x09
   16ec6:	ae 01       	movw	r20, r28
   16ec8:	4c 5f       	subi	r20, 0xFC	; 252
   16eca:	5f 4f       	sbci	r21, 0xFF	; 255
   16ecc:	80 ee       	ldi	r24, 0xE0	; 224
   16ece:	9c e1       	ldi	r25, 0x1C	; 28
   16ed0:	0e 94 fb 8b 	call	0x117f6	; 0x117f6 <gpib_write_str>
   16ed4:	8c 01       	movw	r16, r24
   16ed6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16eda:	87 ff       	sbrs	r24, 7
   16edc:	04 c0       	rjmp	.+8      	; 0x16ee6 <amigo_buffered_read_execute+0x4a>
   16ede:	8f e9       	ldi	r24, 0x9F	; 159
   16ee0:	90 e1       	ldi	r25, 0x10	; 16
   16ee2:	0e 94 03 86 	call	0x10c06	; 0x10c06 <gpib_timer_elapsed_end>
   16ee6:	8c 81       	ldd	r24, Y+4	; 0x04
   16ee8:	9d 81       	ldd	r25, Y+5	; 0x05
   16eea:	88 27       	eor	r24, r24
   16eec:	90 7d       	andi	r25, 0xD0	; 208
   16eee:	89 2b       	or	r24, r25
   16ef0:	49 f4       	brne	.+18     	; 0x16f04 <amigo_buffered_read_execute+0x68>
   16ef2:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16ef6:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16efa:	80 85       	ldd	r24, Z+8	; 0x08
   16efc:	91 85       	ldd	r25, Z+9	; 0x09
   16efe:	08 17       	cp	r16, r24
   16f00:	19 07       	cpc	r17, r25
   16f02:	c9 f0       	breq	.+50     	; 0x16f36 <amigo_buffered_read_execute+0x9a>
   16f04:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16f08:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16f0c:	81 e0       	ldi	r24, 0x01	; 1
   16f0e:	86 83       	std	Z+6, r24	; 0x06
   16f10:	87 81       	ldd	r24, Z+7	; 0x07
   16f12:	90 85       	ldd	r25, Z+8	; 0x08
   16f14:	80 62       	ori	r24, 0x20	; 32
   16f16:	90 87       	std	Z+8, r25	; 0x08
   16f18:	87 83       	std	Z+7, r24	; 0x07
   16f1a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f1e:	80 ff       	sbrs	r24, 0
   16f20:	0a c0       	rjmp	.+20     	; 0x16f36 <amigo_buffered_read_execute+0x9a>
   16f22:	8d ee       	ldi	r24, 0xED	; 237
   16f24:	9f e2       	ldi	r25, 0x2F	; 47
   16f26:	a0 e0       	ldi	r26, 0x00	; 0
   16f28:	ed b7       	in	r30, 0x3d	; 61
   16f2a:	fe b7       	in	r31, 0x3e	; 62
   16f2c:	81 83       	std	Z+1, r24	; 0x01
   16f2e:	92 83       	std	Z+2, r25	; 0x02
   16f30:	a3 83       	std	Z+3, r26	; 0x03
   16f32:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   16f36:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16f3a:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16f3e:	81 81       	ldd	r24, Z+1	; 0x01
   16f40:	90 e0       	ldi	r25, 0x00	; 0
   16f42:	0e 94 cb 86 	call	0x10d96	; 0x10d96 <gpib_enable_PPR>
   16f46:	8c 81       	ldd	r24, Y+4	; 0x04
   16f48:	9d 81       	ldd	r25, Y+5	; 0x05
   16f4a:	25 96       	adiw	r28, 0x05	; 5
   16f4c:	e4 e0       	ldi	r30, 0x04	; 4
   16f4e:	0c 94 bd e7 	jmp	0x1cf7a	; 0x1cf7a <__epilogue_restores__+0x1c>

00016f52 <amigo_buffered_write>:
   16f52:	8f 92       	push	r8
   16f54:	9f 92       	push	r9
   16f56:	af 92       	push	r10
   16f58:	bf 92       	push	r11
   16f5a:	ef 92       	push	r14
   16f5c:	ff 92       	push	r15
   16f5e:	0f 93       	push	r16
   16f60:	1f 93       	push	r17
   16f62:	cf 93       	push	r28
   16f64:	df 93       	push	r29
   16f66:	cd b7       	in	r28, 0x3d	; 61
   16f68:	de b7       	in	r29, 0x3e	; 62
   16f6a:	27 97       	sbiw	r28, 0x07	; 7
   16f6c:	0f b6       	in	r0, 0x3f	; 63
   16f6e:	f8 94       	cli
   16f70:	de bf       	out	0x3e, r29	; 62
   16f72:	0f be       	out	0x3f, r0	; 63
   16f74:	cd bf       	out	0x3d, r28	; 61
   16f76:	61 eb       	ldi	r22, 0xB1	; 177
   16f78:	75 e1       	ldi	r23, 0x15	; 21
   16f7a:	80 91 58 19 	lds	r24, 0x1958	; 0x801958 <AMIGOs>
   16f7e:	90 91 59 19 	lds	r25, 0x1959	; 0x801959 <AMIGOs+0x1>
   16f82:	aa db       	rcall	.-2220   	; 0x166d8 <amigo_chs_to_logical>
   16f84:	4b 01       	movw	r8, r22
   16f86:	5c 01       	movw	r10, r24
   16f88:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f8c:	87 fd       	sbrc	r24, 7
   16f8e:	0e 94 f1 85 	call	0x10be2	; 0x10be2 <gpib_timer_elapsed_begin>
   16f92:	1f 82       	std	Y+7, r1	; 0x07
   16f94:	1e 82       	std	Y+6, r1	; 0x06
   16f96:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16f9a:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16f9e:	60 85       	ldd	r22, Z+8	; 0x08
   16fa0:	71 85       	ldd	r23, Z+9	; 0x09
   16fa2:	ae 01       	movw	r20, r28
   16fa4:	4a 5f       	subi	r20, 0xFA	; 250
   16fa6:	5f 4f       	sbci	r21, 0xFF	; 255
   16fa8:	80 ee       	ldi	r24, 0xE0	; 224
   16faa:	9c e1       	ldi	r25, 0x1C	; 28
   16fac:	0e 94 59 8b 	call	0x116b2	; 0x116b2 <gpib_read_str>
   16fb0:	7c 01       	movw	r14, r24
   16fb2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16fb6:	85 ff       	sbrs	r24, 5
   16fb8:	12 c0       	rjmp	.+36     	; 0x16fde <amigo_buffered_write+0x8c>
   16fba:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16fbe:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16fc2:	80 81       	ld	r24, Z
   16fc4:	90 e0       	ldi	r25, 0x00	; 0
   16fc6:	ed b7       	in	r30, 0x3d	; 61
   16fc8:	fe b7       	in	r31, 0x3e	; 62
   16fca:	95 83       	std	Z+5, r25	; 0x05
   16fcc:	84 83       	std	Z+4, r24	; 0x04
   16fce:	8b ed       	ldi	r24, 0xDB	; 219
   16fd0:	9f e2       	ldi	r25, 0x2F	; 47
   16fd2:	a0 e0       	ldi	r26, 0x00	; 0
   16fd4:	81 83       	std	Z+1, r24	; 0x01
   16fd6:	92 83       	std	Z+2, r25	; 0x02
   16fd8:	a3 83       	std	Z+3, r26	; 0x03
   16fda:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   16fde:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16fe2:	87 ff       	sbrs	r24, 7
   16fe4:	04 c0       	rjmp	.+8      	; 0x16fee <amigo_buffered_write+0x9c>
   16fe6:	80 ec       	ldi	r24, 0xC0	; 192
   16fe8:	95 e1       	ldi	r25, 0x15	; 21
   16fea:	0e 94 03 86 	call	0x10c06	; 0x10c06 <gpib_timer_elapsed_end>
   16fee:	8e 81       	ldd	r24, Y+6	; 0x06
   16ff0:	9f 81       	ldd	r25, Y+7	; 0x07
   16ff2:	88 27       	eor	r24, r24
   16ff4:	90 7d       	andi	r25, 0xD0	; 208
   16ff6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16ffa:	89 2b       	or	r24, r25
   16ffc:	49 f4       	brne	.+18     	; 0x17010 <amigo_buffered_write+0xbe>
   16ffe:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   17002:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   17006:	80 85       	ldd	r24, Z+8	; 0x08
   17008:	91 85       	ldd	r25, Z+9	; 0x09
   1700a:	e8 16       	cp	r14, r24
   1700c:	f9 06       	cpc	r15, r25
   1700e:	c1 f0       	breq	.+48     	; 0x17040 <amigo_buffered_write+0xee>
   17010:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   17014:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   17018:	81 e0       	ldi	r24, 0x01	; 1
   1701a:	86 83       	std	Z+6, r24	; 0x06
   1701c:	87 81       	ldd	r24, Z+7	; 0x07
   1701e:	90 85       	ldd	r25, Z+8	; 0x08
   17020:	80 62       	ori	r24, 0x20	; 32
   17022:	90 87       	std	Z+8, r25	; 0x08
   17024:	87 83       	std	Z+7, r24	; 0x07
   17026:	20 ff       	sbrs	r18, 0
   17028:	5e c0       	rjmp	.+188    	; 0x170e6 <amigo_buffered_write+0x194>
   1702a:	8c eb       	ldi	r24, 0xBC	; 188
   1702c:	9f e2       	ldi	r25, 0x2F	; 47
   1702e:	a0 e0       	ldi	r26, 0x00	; 0
   17030:	ed b7       	in	r30, 0x3d	; 61
   17032:	fe b7       	in	r31, 0x3e	; 62
   17034:	81 83       	std	Z+1, r24	; 0x01
   17036:	92 83       	std	Z+2, r25	; 0x02
   17038:	a3 83       	std	Z+3, r26	; 0x03
   1703a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1703e:	53 c0       	rjmp	.+166    	; 0x170e6 <amigo_buffered_write+0x194>
   17040:	26 fd       	sbrc	r18, 6
   17042:	0e 94 f1 85 	call	0x10be2	; 0x10be2 <gpib_timer_elapsed_begin>
   17046:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   1704a:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   1704e:	e0 90 58 19 	lds	r14, 0x1958	; 0x801958 <AMIGOs>
   17052:	f0 90 59 19 	lds	r15, 0x1959	; 0x801959 <AMIGOs+0x1>
   17056:	87 e0       	ldi	r24, 0x07	; 7
   17058:	e8 0e       	add	r14, r24
   1705a:	f1 1c       	adc	r15, r1
   1705c:	00 85       	ldd	r16, Z+8	; 0x08
   1705e:	11 85       	ldd	r17, Z+9	; 0x09
   17060:	20 ee       	ldi	r18, 0xE0	; 224
   17062:	3c e1       	ldi	r19, 0x1C	; 28
   17064:	b5 01       	movw	r22, r10
   17066:	a4 01       	movw	r20, r8
   17068:	82 81       	ldd	r24, Z+2	; 0x02
   1706a:	93 81       	ldd	r25, Z+3	; 0x03
   1706c:	0e 94 9a 85 	call	0x10b34	; 0x10b34 <dbf_open_write>
   17070:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17074:	86 ff       	sbrs	r24, 6
   17076:	04 c0       	rjmp	.+8      	; 0x17080 <amigo_buffered_write+0x12e>
   17078:	89 e8       	ldi	r24, 0x89	; 137
   1707a:	90 e1       	ldi	r25, 0x10	; 16
   1707c:	0e 94 03 86 	call	0x10c06	; 0x10c06 <gpib_timer_elapsed_end>
   17080:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   17084:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   17088:	87 81       	ldd	r24, Z+7	; 0x07
   1708a:	90 85       	ldd	r25, Z+8	; 0x08
   1708c:	89 2b       	or	r24, r25
   1708e:	d9 f0       	breq	.+54     	; 0x170c6 <amigo_buffered_write+0x174>
   17090:	81 e0       	ldi	r24, 0x01	; 1
   17092:	86 83       	std	Z+6, r24	; 0x06
   17094:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17098:	80 ff       	sbrs	r24, 0
   1709a:	0a c0       	rjmp	.+20     	; 0x170b0 <amigo_buffered_write+0x15e>
   1709c:	8c e9       	ldi	r24, 0x9C	; 156
   1709e:	9f e2       	ldi	r25, 0x2F	; 47
   170a0:	a0 e0       	ldi	r26, 0x00	; 0
   170a2:	ed b7       	in	r30, 0x3d	; 61
   170a4:	fe b7       	in	r31, 0x3e	; 62
   170a6:	81 83       	std	Z+1, r24	; 0x01
   170a8:	92 83       	std	Z+2, r25	; 0x02
   170aa:	a3 83       	std	Z+3, r26	; 0x03
   170ac:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   170b0:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   170b4:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   170b8:	81 81       	ldd	r24, Z+1	; 0x01
   170ba:	90 e0       	ldi	r25, 0x00	; 0
   170bc:	0e 94 cb 86 	call	0x10d96	; 0x10d96 <gpib_enable_PPR>
   170c0:	80 e0       	ldi	r24, 0x00	; 0
   170c2:	90 e0       	ldi	r25, 0x00	; 0
   170c4:	1c c0       	rjmp	.+56     	; 0x170fe <amigo_buffered_write+0x1ac>
   170c6:	81 eb       	ldi	r24, 0xB1	; 177
   170c8:	95 e1       	ldi	r25, 0x15	; 21
   170ca:	d1 dc       	rcall	.-1630   	; 0x16a6e <amigo_increment>
   170cc:	89 2b       	or	r24, r25
   170ce:	59 f0       	breq	.+22     	; 0x170e6 <amigo_buffered_write+0x194>
   170d0:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   170d4:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   170d8:	81 e0       	ldi	r24, 0x01	; 1
   170da:	86 83       	std	Z+6, r24	; 0x06
   170dc:	87 81       	ldd	r24, Z+7	; 0x07
   170de:	90 85       	ldd	r25, Z+8	; 0x08
   170e0:	84 60       	ori	r24, 0x04	; 4
   170e2:	90 87       	std	Z+8, r25	; 0x08
   170e4:	87 83       	std	Z+7, r24	; 0x07
   170e6:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   170ea:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   170ee:	81 81       	ldd	r24, Z+1	; 0x01
   170f0:	90 e0       	ldi	r25, 0x00	; 0
   170f2:	0e 94 cb 86 	call	0x10d96	; 0x10d96 <gpib_enable_PPR>
   170f6:	8e 81       	ldd	r24, Y+6	; 0x06
   170f8:	9f 81       	ldd	r25, Y+7	; 0x07
   170fa:	88 27       	eor	r24, r24
   170fc:	90 7d       	andi	r25, 0xD0	; 208
   170fe:	27 96       	adiw	r28, 0x07	; 7
   17100:	0f b6       	in	r0, 0x3f	; 63
   17102:	f8 94       	cli
   17104:	de bf       	out	0x3e, r29	; 62
   17106:	0f be       	out	0x3f, r0	; 63
   17108:	cd bf       	out	0x3d, r28	; 61
   1710a:	df 91       	pop	r29
   1710c:	cf 91       	pop	r28
   1710e:	1f 91       	pop	r17
   17110:	0f 91       	pop	r16
   17112:	ff 90       	pop	r15
   17114:	ef 90       	pop	r14
   17116:	bf 90       	pop	r11
   17118:	af 90       	pop	r10
   1711a:	9f 90       	pop	r9
   1711c:	8f 90       	pop	r8
   1711e:	08 95       	ret

00017120 <amigo_cmd_dsj>:
   17120:	a8 e0       	ldi	r26, 0x08	; 8
   17122:	b0 e0       	ldi	r27, 0x00	; 0
   17124:	e6 e9       	ldi	r30, 0x96	; 150
   17126:	f8 eb       	ldi	r31, 0xB8	; 184
   17128:	0c 94 a3 e7 	jmp	0x1cf46	; 0x1cf46 <__prologue_saves__+0x20>
   1712c:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   17130:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   17134:	86 81       	ldd	r24, Z+6	; 0x06
   17136:	88 87       	std	Y+8, r24	; 0x08
   17138:	80 e0       	ldi	r24, 0x00	; 0
   1713a:	91 e0       	ldi	r25, 0x01	; 1
   1713c:	9f 83       	std	Y+7, r25	; 0x07
   1713e:	8e 83       	std	Y+6, r24	; 0x06
   17140:	ae 01       	movw	r20, r28
   17142:	4a 5f       	subi	r20, 0xFA	; 250
   17144:	5f 4f       	sbci	r21, 0xFF	; 255
   17146:	61 e0       	ldi	r22, 0x01	; 1
   17148:	70 e0       	ldi	r23, 0x00	; 0
   1714a:	ce 01       	movw	r24, r28
   1714c:	08 96       	adiw	r24, 0x08	; 8
   1714e:	0e 94 fb 8b 	call	0x117f6	; 0x117f6 <gpib_write_str>
   17152:	2e 81       	ldd	r18, Y+6	; 0x06
   17154:	3f 81       	ldd	r19, Y+7	; 0x07
   17156:	22 27       	eor	r18, r18
   17158:	30 7d       	andi	r19, 0xD0	; 208
   1715a:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   1715e:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   17162:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   17166:	23 2b       	or	r18, r19
   17168:	11 f4       	brne	.+4      	; 0x1716e <amigo_cmd_dsj+0x4e>
   1716a:	01 97       	sbiw	r24, 0x01	; 1
   1716c:	c1 f0       	breq	.+48     	; 0x1719e <amigo_cmd_dsj+0x7e>
   1716e:	81 e0       	ldi	r24, 0x01	; 1
   17170:	86 83       	std	Z+6, r24	; 0x06
   17172:	87 81       	ldd	r24, Z+7	; 0x07
   17174:	90 85       	ldd	r25, Z+8	; 0x08
   17176:	80 62       	ori	r24, 0x20	; 32
   17178:	90 87       	std	Z+8, r25	; 0x08
   1717a:	87 83       	std	Z+7, r24	; 0x07
   1717c:	40 ff       	sbrs	r20, 0
   1717e:	0a c0       	rjmp	.+20     	; 0x17194 <amigo_cmd_dsj+0x74>
   17180:	82 e8       	ldi	r24, 0x82	; 130
   17182:	9f e2       	ldi	r25, 0x2F	; 47
   17184:	a0 e0       	ldi	r26, 0x00	; 0
   17186:	ed b7       	in	r30, 0x3d	; 61
   17188:	fe b7       	in	r31, 0x3e	; 62
   1718a:	81 83       	std	Z+1, r24	; 0x01
   1718c:	92 83       	std	Z+2, r25	; 0x02
   1718e:	a3 83       	std	Z+3, r26	; 0x03
   17190:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   17194:	8e 81       	ldd	r24, Y+6	; 0x06
   17196:	9f 81       	ldd	r25, Y+7	; 0x07
   17198:	88 27       	eor	r24, r24
   1719a:	90 7d       	andi	r25, 0xD0	; 208
   1719c:	19 c0       	rjmp	.+50     	; 0x171d0 <amigo_cmd_dsj+0xb0>
   1719e:	45 ff       	sbrs	r20, 5
   171a0:	0e c0       	rjmp	.+28     	; 0x171be <amigo_cmd_dsj+0x9e>
   171a2:	86 81       	ldd	r24, Z+6	; 0x06
   171a4:	90 e0       	ldi	r25, 0x00	; 0
   171a6:	ed b7       	in	r30, 0x3d	; 61
   171a8:	fe b7       	in	r31, 0x3e	; 62
   171aa:	95 83       	std	Z+5, r25	; 0x05
   171ac:	84 83       	std	Z+4, r24	; 0x04
   171ae:	85 e7       	ldi	r24, 0x75	; 117
   171b0:	9f e2       	ldi	r25, 0x2F	; 47
   171b2:	a0 e0       	ldi	r26, 0x00	; 0
   171b4:	81 83       	std	Z+1, r24	; 0x01
   171b6:	92 83       	std	Z+2, r25	; 0x02
   171b8:	a3 83       	std	Z+3, r26	; 0x03
   171ba:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   171be:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   171c2:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   171c6:	16 82       	std	Z+6, r1	; 0x06
   171c8:	10 86       	std	Z+8, r1	; 0x08
   171ca:	17 82       	std	Z+7, r1	; 0x07
   171cc:	80 e0       	ldi	r24, 0x00	; 0
   171ce:	90 e0       	ldi	r25, 0x00	; 0
   171d0:	28 96       	adiw	r28, 0x08	; 8
   171d2:	e2 e0       	ldi	r30, 0x02	; 2
   171d4:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

000171d8 <amigo_cmd_clear>:
/// - Reference: A23.
/// - Select sector 0.
/// @return  0

int amigo_cmd_clear()
{
   171d8:	00 d0       	rcall	.+0      	; 0x171da <amigo_cmd_clear+0x2>
   171da:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   171dc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   171e0:	85 ff       	sbrs	r24, 5
   171e2:	0a c0       	rjmp	.+20     	; 0x171f8 <amigo_cmd_clear+0x20>
        printf("[AMIGO Clear]\n");
   171e4:	86 e6       	ldi	r24, 0x66	; 102
   171e6:	9f e2       	ldi	r25, 0x2F	; 47
   171e8:	a0 e0       	ldi	r26, 0x00	; 0
   171ea:	ed b7       	in	r30, 0x3d	; 61
   171ec:	fe b7       	in	r31, 0x3e	; 62
   171ee:	81 83       	std	Z+1, r24	; 0x01
   171f0:	92 83       	std	Z+2, r25	; 0x02
   171f2:	a3 83       	std	Z+3, r26	; 0x03
   171f4:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
    AMIGOs->sector = 0;
   171f8:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   171fc:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   17200:	15 82       	std	Z+5, r1	; 0x05
    AMIGOs->head = 0;
   17202:	14 82       	std	Z+4, r1	; 0x04
    AMIGOs->cyl = 0;
   17204:	13 82       	std	Z+3, r1	; 0x03
/// @todo FIXME
///
///  Clear the DSJ byte that might be 2 after powerup
///
    AMIGOs->dsj = 0;
   17206:	16 82       	std	Z+6, r1	; 0x06
    AMIGOs->Errors =0;
   17208:	10 86       	std	Z+8, r1	; 0x08
   1720a:	17 82       	std	Z+7, r1	; 0x07

    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1720c:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   17210:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   17214:	81 81       	ldd	r24, Z+1	; 0x01
   17216:	90 e0       	ldi	r25, 0x00	; 0
   17218:	0e 94 cb 86 	call	0x10d96	; 0x10d96 <gpib_enable_PPR>
    return(0);
}
   1721c:	80 e0       	ldi	r24, 0x00	; 0
   1721e:	90 e0       	ldi	r25, 0x00	; 0
   17220:	0f 90       	pop	r0
   17222:	0f 90       	pop	r0
   17224:	0f 90       	pop	r0
   17226:	08 95       	ret

00017228 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   17228:	af e0       	ldi	r26, 0x0F	; 15
   1722a:	b0 e0       	ldi	r27, 0x00	; 0
   1722c:	ea e1       	ldi	r30, 0x1A	; 26
   1722e:	f9 eb       	ldi	r31, 0xB9	; 185
   17230:	0c 94 9f e7 	jmp	0x1cf3e	; 0x1cf3e <__prologue_saves__+0x18>
   17234:	c8 2f       	mov	r28, r24
   17236:	e6 2e       	mov	r14, r22
   17238:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   1723a:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   1723e:	90 e0       	ldi	r25, 0x00	; 0
   17240:	0e 94 31 8d 	call	0x11a62	; 0x11a62 <AMIGO_is_MLA>
   17244:	20 91 e4 1e 	lds	r18, 0x1EE4	; 0x801ee4 <talking>
   17248:	f1 2c       	mov	r15, r1
   1724a:	d0 e0       	ldi	r29, 0x00	; 0
   1724c:	89 2b       	or	r24, r25
   1724e:	f1 f0       	breq	.+60     	; 0x1728c <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17250:	82 2f       	mov	r24, r18
   17252:	90 e0       	ldi	r25, 0x00	; 0
   17254:	ed b7       	in	r30, 0x3d	; 61
   17256:	fe b7       	in	r31, 0x3e	; 62
   17258:	97 87       	std	Z+15, r25	; 0x0f
   1725a:	86 87       	std	Z+14, r24	; 0x0e
   1725c:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17260:	90 e0       	ldi	r25, 0x00	; 0
   17262:	95 87       	std	Z+13, r25	; 0x0d
   17264:	84 87       	std	Z+12, r24	; 0x0c
   17266:	13 87       	std	Z+11, r17	; 0x0b
   17268:	02 87       	std	Z+10, r16	; 0x0a
   1726a:	f1 86       	std	Z+9, r15	; 0x09
   1726c:	e0 86       	std	Z+8, r14	; 0x08
   1726e:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   17272:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   17276:	80 81       	ld	r24, Z
   17278:	90 e0       	ldi	r25, 0x00	; 0
   1727a:	ed b7       	in	r30, 0x3d	; 61
   1727c:	fe b7       	in	r31, 0x3e	; 62
   1727e:	97 83       	std	Z+7, r25	; 0x07
   17280:	86 83       	std	Z+6, r24	; 0x06
   17282:	d5 83       	std	Z+5, r29	; 0x05
   17284:	c4 83       	std	Z+4, r28	; 0x04
   17286:	8f ef       	ldi	r24, 0xFF	; 255
   17288:	9e e2       	ldi	r25, 0x2E	; 46
   1728a:	51 c0       	rjmp	.+162    	; 0x1732e <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   1728c:	82 2f       	mov	r24, r18
   1728e:	90 e0       	ldi	r25, 0x00	; 0
   17290:	0e 94 43 8d 	call	0x11a86	; 0x11a86 <AMIGO_is_MTA>
   17294:	20 91 e6 1e 	lds	r18, 0x1EE6	; 0x801ee6 <listening>
   17298:	30 91 e4 1e 	lds	r19, 0x1EE4	; 0x801ee4 <talking>
   1729c:	a0 91 58 19 	lds	r26, 0x1958	; 0x801958 <AMIGOs>
   172a0:	b0 91 59 19 	lds	r27, 0x1959	; 0x801959 <AMIGOs+0x1>
   172a4:	89 2b       	or	r24, r25
   172a6:	b1 f0       	breq	.+44     	; 0x172d4 <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   172a8:	83 2f       	mov	r24, r19
   172aa:	90 e0       	ldi	r25, 0x00	; 0
   172ac:	ed b7       	in	r30, 0x3d	; 61
   172ae:	fe b7       	in	r31, 0x3e	; 62
   172b0:	97 87       	std	Z+15, r25	; 0x0f
   172b2:	86 87       	std	Z+14, r24	; 0x0e
   172b4:	30 e0       	ldi	r19, 0x00	; 0
   172b6:	35 87       	std	Z+13, r19	; 0x0d
   172b8:	24 87       	std	Z+12, r18	; 0x0c
   172ba:	13 87       	std	Z+11, r17	; 0x0b
   172bc:	02 87       	std	Z+10, r16	; 0x0a
   172be:	f1 86       	std	Z+9, r15	; 0x09
   172c0:	e0 86       	std	Z+8, r14	; 0x08
   172c2:	8c 91       	ld	r24, X
   172c4:	90 e0       	ldi	r25, 0x00	; 0
   172c6:	97 83       	std	Z+7, r25	; 0x07
   172c8:	86 83       	std	Z+6, r24	; 0x06
   172ca:	d5 83       	std	Z+5, r29	; 0x05
   172cc:	c4 83       	std	Z+4, r28	; 0x04
   172ce:	88 e9       	ldi	r24, 0x98	; 152
   172d0:	9e e2       	ldi	r25, 0x2E	; 46
   172d2:	2d c0       	rjmp	.+90     	; 0x1732e <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   172d4:	3f 35       	cpi	r19, 0x5F	; 95
   172d6:	b1 f4       	brne	.+44     	; 0x17304 <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   172d8:	8f e5       	ldi	r24, 0x5F	; 95
   172da:	90 e0       	ldi	r25, 0x00	; 0
   172dc:	ed b7       	in	r30, 0x3d	; 61
   172de:	fe b7       	in	r31, 0x3e	; 62
   172e0:	97 87       	std	Z+15, r25	; 0x0f
   172e2:	86 87       	std	Z+14, r24	; 0x0e
   172e4:	30 e0       	ldi	r19, 0x00	; 0
   172e6:	35 87       	std	Z+13, r19	; 0x0d
   172e8:	24 87       	std	Z+12, r18	; 0x0c
   172ea:	13 87       	std	Z+11, r17	; 0x0b
   172ec:	02 87       	std	Z+10, r16	; 0x0a
   172ee:	f1 86       	std	Z+9, r15	; 0x09
   172f0:	e0 86       	std	Z+8, r14	; 0x08
   172f2:	8c 91       	ld	r24, X
   172f4:	90 e0       	ldi	r25, 0x00	; 0
   172f6:	97 83       	std	Z+7, r25	; 0x07
   172f8:	86 83       	std	Z+6, r24	; 0x06
   172fa:	d5 83       	std	Z+5, r29	; 0x05
   172fc:	c4 83       	std	Z+4, r28	; 0x04
   172fe:	81 e3       	ldi	r24, 0x31	; 49
   17300:	9e e2       	ldi	r25, 0x2E	; 46
   17302:	15 c0       	rjmp	.+42     	; 0x1732e <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17304:	83 2f       	mov	r24, r19
   17306:	90 e0       	ldi	r25, 0x00	; 0
   17308:	ed b7       	in	r30, 0x3d	; 61
   1730a:	fe b7       	in	r31, 0x3e	; 62
   1730c:	97 87       	std	Z+15, r25	; 0x0f
   1730e:	86 87       	std	Z+14, r24	; 0x0e
   17310:	30 e0       	ldi	r19, 0x00	; 0
   17312:	35 87       	std	Z+13, r19	; 0x0d
   17314:	24 87       	std	Z+12, r18	; 0x0c
   17316:	13 87       	std	Z+11, r17	; 0x0b
   17318:	02 87       	std	Z+10, r16	; 0x0a
   1731a:	f1 86       	std	Z+9, r15	; 0x09
   1731c:	e0 86       	std	Z+8, r14	; 0x08
   1731e:	8c 91       	ld	r24, X
   17320:	90 e0       	ldi	r25, 0x00	; 0
   17322:	97 83       	std	Z+7, r25	; 0x07
   17324:	86 83       	std	Z+6, r24	; 0x06
   17326:	d5 83       	std	Z+5, r29	; 0x05
   17328:	c4 83       	std	Z+4, r28	; 0x04
   1732a:	8c ec       	ldi	r24, 0xCC	; 204
   1732c:	9d e2       	ldi	r25, 0x2D	; 45
   1732e:	a0 e0       	ldi	r26, 0x00	; 0
   17330:	81 83       	std	Z+1, r24	; 0x01
   17332:	92 83       	std	Z+2, r25	; 0x02
   17334:	a3 83       	std	Z+3, r26	; 0x03
   17336:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1733a:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   1733e:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   17342:	81 81       	ldd	r24, Z+1	; 0x01
   17344:	90 e0       	ldi	r25, 0x00	; 0
   17346:	0e 94 cb 86 	call	0x10d96	; 0x10d96 <gpib_enable_PPR>
    return(0);
}
   1734a:	80 e0       	ldi	r24, 0x00	; 0
   1734c:	90 e0       	ldi	r25, 0x00	; 0
   1734e:	cd b7       	in	r28, 0x3d	; 61
   17350:	de b7       	in	r29, 0x3e	; 62
   17352:	2f 96       	adiw	r28, 0x0f	; 15
   17354:	e6 e0       	ldi	r30, 0x06	; 6
   17356:	0c 94 bb e7 	jmp	0x1cf76	; 0x1cf76 <__epilogue_restores__+0x18>

0001735a <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   1735a:	ab e0       	ldi	r26, 0x0B	; 11
   1735c:	b0 e0       	ldi	r27, 0x00	; 0
   1735e:	e3 eb       	ldi	r30, 0xB3	; 179
   17360:	f9 eb       	ldi	r31, 0xB9	; 185
   17362:	0c 94 a3 e7 	jmp	0x1cf46	; 0x1cf46 <__prologue_saves__+0x20>
   17366:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   17368:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   1736c:	90 e0       	ldi	r25, 0x00	; 0
   1736e:	0e 94 31 8d 	call	0x11a62	; 0x11a62 <AMIGO_is_MLA>
   17372:	20 91 e4 1e 	lds	r18, 0x1EE4	; 0x801ee4 <talking>
   17376:	d0 e0       	ldi	r29, 0x00	; 0
   17378:	89 2b       	or	r24, r25
   1737a:	d1 f0       	breq	.+52     	; 0x173b0 <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   1737c:	82 2f       	mov	r24, r18
   1737e:	90 e0       	ldi	r25, 0x00	; 0
   17380:	ed b7       	in	r30, 0x3d	; 61
   17382:	fe b7       	in	r31, 0x3e	; 62
   17384:	93 87       	std	Z+11, r25	; 0x0b
   17386:	82 87       	std	Z+10, r24	; 0x0a
   17388:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   1738c:	90 e0       	ldi	r25, 0x00	; 0
   1738e:	91 87       	std	Z+9, r25	; 0x09
   17390:	80 87       	std	Z+8, r24	; 0x08
   17392:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   17396:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   1739a:	80 81       	ld	r24, Z
   1739c:	90 e0       	ldi	r25, 0x00	; 0
   1739e:	ed b7       	in	r30, 0x3d	; 61
   173a0:	fe b7       	in	r31, 0x3e	; 62
   173a2:	97 83       	std	Z+7, r25	; 0x07
   173a4:	86 83       	std	Z+6, r24	; 0x06
   173a6:	d5 83       	std	Z+5, r29	; 0x05
   173a8:	c4 83       	std	Z+4, r28	; 0x04
   173aa:	8c e7       	ldi	r24, 0x7C	; 124
   173ac:	9d e2       	ldi	r25, 0x2D	; 45
   173ae:	43 c0       	rjmp	.+134    	; 0x17436 <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   173b0:	82 2f       	mov	r24, r18
   173b2:	90 e0       	ldi	r25, 0x00	; 0
   173b4:	0e 94 43 8d 	call	0x11a86	; 0x11a86 <AMIGO_is_MTA>
   173b8:	20 91 e6 1e 	lds	r18, 0x1EE6	; 0x801ee6 <listening>
   173bc:	40 91 e4 1e 	lds	r20, 0x1EE4	; 0x801ee4 <talking>
   173c0:	a0 91 58 19 	lds	r26, 0x1958	; 0x801958 <AMIGOs>
   173c4:	b0 91 59 19 	lds	r27, 0x1959	; 0x801959 <AMIGOs+0x1>
   173c8:	89 2b       	or	r24, r25
   173ca:	89 f0       	breq	.+34     	; 0x173ee <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   173cc:	50 e0       	ldi	r21, 0x00	; 0
   173ce:	ed b7       	in	r30, 0x3d	; 61
   173d0:	fe b7       	in	r31, 0x3e	; 62
   173d2:	53 87       	std	Z+11, r21	; 0x0b
   173d4:	42 87       	std	Z+10, r20	; 0x0a
   173d6:	30 e0       	ldi	r19, 0x00	; 0
   173d8:	31 87       	std	Z+9, r19	; 0x09
   173da:	20 87       	std	Z+8, r18	; 0x08
   173dc:	8c 91       	ld	r24, X
   173de:	90 e0       	ldi	r25, 0x00	; 0
   173e0:	97 83       	std	Z+7, r25	; 0x07
   173e2:	86 83       	std	Z+6, r24	; 0x06
   173e4:	d5 83       	std	Z+5, r29	; 0x05
   173e6:	c4 83       	std	Z+4, r28	; 0x04
   173e8:	8c e2       	ldi	r24, 0x2C	; 44
   173ea:	9d e2       	ldi	r25, 0x2D	; 45
   173ec:	24 c0       	rjmp	.+72     	; 0x17436 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   173ee:	4f 35       	cpi	r20, 0x5F	; 95
   173f0:	91 f4       	brne	.+36     	; 0x17416 <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   173f2:	8f e5       	ldi	r24, 0x5F	; 95
   173f4:	90 e0       	ldi	r25, 0x00	; 0
   173f6:	ed b7       	in	r30, 0x3d	; 61
   173f8:	fe b7       	in	r31, 0x3e	; 62
   173fa:	93 87       	std	Z+11, r25	; 0x0b
   173fc:	82 87       	std	Z+10, r24	; 0x0a
   173fe:	30 e0       	ldi	r19, 0x00	; 0
   17400:	31 87       	std	Z+9, r19	; 0x09
   17402:	20 87       	std	Z+8, r18	; 0x08
   17404:	8c 91       	ld	r24, X
   17406:	90 e0       	ldi	r25, 0x00	; 0
   17408:	97 83       	std	Z+7, r25	; 0x07
   1740a:	86 83       	std	Z+6, r24	; 0x06
   1740c:	d5 83       	std	Z+5, r29	; 0x05
   1740e:	c4 83       	std	Z+4, r28	; 0x04
   17410:	8c ed       	ldi	r24, 0xDC	; 220
   17412:	9c e2       	ldi	r25, 0x2C	; 44
   17414:	10 c0       	rjmp	.+32     	; 0x17436 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17416:	50 e0       	ldi	r21, 0x00	; 0
   17418:	ed b7       	in	r30, 0x3d	; 61
   1741a:	fe b7       	in	r31, 0x3e	; 62
   1741c:	53 87       	std	Z+11, r21	; 0x0b
   1741e:	42 87       	std	Z+10, r20	; 0x0a
   17420:	30 e0       	ldi	r19, 0x00	; 0
   17422:	31 87       	std	Z+9, r19	; 0x09
   17424:	20 87       	std	Z+8, r18	; 0x08
   17426:	8c 91       	ld	r24, X
   17428:	90 e0       	ldi	r25, 0x00	; 0
   1742a:	97 83       	std	Z+7, r25	; 0x07
   1742c:	86 83       	std	Z+6, r24	; 0x06
   1742e:	d5 83       	std	Z+5, r29	; 0x05
   17430:	c4 83       	std	Z+4, r28	; 0x04
   17432:	8b e8       	ldi	r24, 0x8B	; 139
   17434:	9c e2       	ldi	r25, 0x2C	; 44
   17436:	a0 e0       	ldi	r26, 0x00	; 0
   17438:	81 83       	std	Z+1, r24	; 0x01
   1743a:	92 83       	std	Z+2, r25	; 0x02
   1743c:	a3 83       	std	Z+3, r26	; 0x03
   1743e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17442:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   17446:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   1744a:	81 81       	ldd	r24, Z+1	; 0x01
   1744c:	90 e0       	ldi	r25, 0x00	; 0
   1744e:	0e 94 cb 86 	call	0x10d96	; 0x10d96 <gpib_enable_PPR>
    return(0);
}
   17452:	80 e0       	ldi	r24, 0x00	; 0
   17454:	90 e0       	ldi	r25, 0x00	; 0
   17456:	cd b7       	in	r28, 0x3d	; 61
   17458:	de b7       	in	r29, 0x3e	; 62
   1745a:	2b 96       	adiw	r28, 0x0b	; 11
   1745c:	e2 e0       	ldi	r30, 0x02	; 2
   1745e:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00017462 <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   17462:	8f 30       	cpi	r24, 0x0F	; 15
   17464:	29 f0       	breq	.+10     	; 0x17470 <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   17466:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   1746a:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   1746e:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   17470:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   17474:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   17478:	81 81       	ldd	r24, Z+1	; 0x01
   1747a:	88 23       	and	r24, r24
   1747c:	29 f0       	breq	.+10     	; 0x17488 <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   1747e:	87 81       	ldd	r24, Z+7	; 0x07
   17480:	90 85       	ldd	r25, Z+8	; 0x08
   17482:	80 64       	ori	r24, 0x40	; 64
   17484:	90 87       	std	Z+8, r25	; 0x08
   17486:	87 83       	std	Z+7, r24	; 0x07
   17488:	08 95       	ret

0001748a <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   1748a:	ac e1       	ldi	r26, 0x1C	; 28
   1748c:	b0 e0       	ldi	r27, 0x00	; 0
   1748e:	eb e4       	ldi	r30, 0x4B	; 75
   17490:	fa eb       	ldi	r31, 0xBA	; 186
   17492:	0c 94 9f e7 	jmp	0x1cf3e	; 0x1cf3e <__prologue_saves__+0x18>
   17496:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17498:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1749c:	85 ff       	sbrs	r24, 5
   1749e:	16 c0       	rjmp	.+44     	; 0x174cc <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   174a0:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   174a4:	90 e0       	ldi	r25, 0x00	; 0
   174a6:	ed b7       	in	r30, 0x3d	; 61
   174a8:	fe b7       	in	r31, 0x3e	; 62
   174aa:	91 87       	std	Z+9, r25	; 0x09
   174ac:	80 87       	std	Z+8, r24	; 0x08
   174ae:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   174b2:	90 e0       	ldi	r25, 0x00	; 0
   174b4:	97 83       	std	Z+7, r25	; 0x07
   174b6:	86 83       	std	Z+6, r24	; 0x06
   174b8:	f5 82       	std	Z+5, r15	; 0x05
   174ba:	e4 82       	std	Z+4, r14	; 0x04
   174bc:	89 e5       	ldi	r24, 0x59	; 89
   174be:	9c e2       	ldi	r25, 0x2C	; 44
   174c0:	a0 e0       	ldi	r26, 0x00	; 0
   174c2:	81 83       	std	Z+1, r24	; 0x01
   174c4:	92 83       	std	Z+2, r25	; 0x02
   174c6:	a3 83       	std	Z+3, r26	; 0x03
   174c8:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   174cc:	fe e7       	ldi	r31, 0x7E	; 126
   174ce:	ef 16       	cp	r14, r31
   174d0:	f1 04       	cpc	r15, r1
   174d2:	f1 f5       	brne	.+124    	; 0x17550 <Amigo_Command+0xc6>
   174d4:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   174d8:	90 e0       	ldi	r25, 0x00	; 0
   174da:	0e 94 43 8d 	call	0x11a86	; 0x11a86 <AMIGO_is_MTA>
   174de:	89 2b       	or	r24, r25
   174e0:	09 f4       	brne	.+2      	; 0x174e4 <Amigo_Command+0x5a>
   174e2:	86 c0       	rjmp	.+268    	; 0x175f0 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   174e4:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   174e8:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   174ec:	81 81       	ldd	r24, Z+1	; 0x01
   174ee:	90 e0       	ldi	r25, 0x00	; 0
   174f0:	0e 94 01 87 	call	0x10e02	; 0x10e02 <gpib_disable_PPR>
        status = EOI_FLAG;
   174f4:	80 e0       	ldi	r24, 0x00	; 0
   174f6:	91 e0       	ldi	r25, 0x01	; 1
   174f8:	9c 8f       	std	Y+28, r25	; 0x1c
   174fa:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   174fc:	ae 01       	movw	r20, r28
   174fe:	45 5e       	subi	r20, 0xE5	; 229
   17500:	5f 4f       	sbci	r21, 0xFF	; 255
   17502:	60 e0       	ldi	r22, 0x00	; 0
   17504:	72 e0       	ldi	r23, 0x02	; 2
   17506:	80 ee       	ldi	r24, 0xE0	; 224
   17508:	9c e1       	ldi	r25, 0x1C	; 28
   1750a:	0e 94 fb 8b 	call	0x117f6	; 0x117f6 <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1750e:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   17512:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   17516:	81 81       	ldd	r24, Z+1	; 0x01
   17518:	90 e0       	ldi	r25, 0x00	; 0
   1751a:	0e 94 cb 86 	call	0x10d96	; 0x10d96 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   1751e:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17520:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17522:	88 27       	eor	r24, r24
   17524:	90 7d       	andi	r25, 0xD0	; 208
   17526:	89 2b       	or	r24, r25
   17528:	09 f4       	brne	.+2      	; 0x1752c <Amigo_Command+0xa2>
   1752a:	89 c2       	rjmp	.+1298   	; 0x17a3e <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   1752c:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   17530:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   17534:	81 e0       	ldi	r24, 0x01	; 1
   17536:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   17538:	87 81       	ldd	r24, Z+7	; 0x07
   1753a:	90 85       	ldd	r25, Z+8	; 0x08
   1753c:	80 62       	ori	r24, 0x20	; 32
   1753e:	90 87       	std	Z+8, r25	; 0x08
   17540:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   17542:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17546:	80 ff       	sbrs	r24, 0
   17548:	7a c2       	rjmp	.+1268   	; 0x17a3e <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   1754a:	87 e3       	ldi	r24, 0x37	; 55
   1754c:	9c e2       	ldi	r25, 0x2C	; 44
   1754e:	8e c0       	rjmp	.+284    	; 0x1766c <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   17550:	ff e7       	ldi	r31, 0x7F	; 127
   17552:	ef 16       	cp	r14, r31
   17554:	f1 04       	cpc	r15, r1
   17556:	09 f0       	breq	.+2      	; 0x1755a <Amigo_Command+0xd0>
   17558:	4b c0       	rjmp	.+150    	; 0x175f0 <Amigo_Command+0x166>
   1755a:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   1755e:	90 e0       	ldi	r25, 0x00	; 0
   17560:	0e 94 31 8d 	call	0x11a62	; 0x11a62 <AMIGO_is_MLA>
   17564:	89 2b       	or	r24, r25
   17566:	09 f4       	brne	.+2      	; 0x1756a <Amigo_Command+0xe0>
   17568:	43 c0       	rjmp	.+134    	; 0x175f0 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1756a:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   1756e:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   17572:	81 81       	ldd	r24, Z+1	; 0x01
   17574:	90 e0       	ldi	r25, 0x00	; 0
   17576:	0e 94 01 87 	call	0x10e02	; 0x10e02 <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   1757a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1757e:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   17580:	0e 94 f1 85 	call	0x10be2	; 0x10be2 <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   17584:	80 e0       	ldi	r24, 0x00	; 0
   17586:	91 e0       	ldi	r25, 0x01	; 1
   17588:	9c 8f       	std	Y+28, r25	; 0x1c
   1758a:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   1758c:	ae 01       	movw	r20, r28
   1758e:	45 5e       	subi	r20, 0xE5	; 229
   17590:	5f 4f       	sbci	r21, 0xFF	; 255
   17592:	60 e0       	ldi	r22, 0x00	; 0
   17594:	72 e0       	ldi	r23, 0x02	; 2
   17596:	80 ee       	ldi	r24, 0xE0	; 224
   17598:	9c e1       	ldi	r25, 0x1C	; 28
   1759a:	0e 94 59 8b 	call	0x116b2	; 0x116b2 <gpib_read_str>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   1759e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   175a2:	87 ff       	sbrs	r24, 7
   175a4:	04 c0       	rjmp	.+8      	; 0x175ae <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read");
   175a6:	80 ec       	ldi	r24, 0xC0	; 192
   175a8:	95 e1       	ldi	r25, 0x15	; 21
   175aa:	0e 94 03 86 	call	0x10c06	; 0x10c06 <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   175ae:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   175b2:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   175b6:	81 81       	ldd	r24, Z+1	; 0x01
   175b8:	90 e0       	ldi	r25, 0x00	; 0
   175ba:	0e 94 cb 86 	call	0x10d96	; 0x10d96 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   175be:	8b 8d       	ldd	r24, Y+27	; 0x1b
   175c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
   175c2:	88 27       	eor	r24, r24
   175c4:	90 7d       	andi	r25, 0xD0	; 208
   175c6:	89 2b       	or	r24, r25
   175c8:	09 f4       	brne	.+2      	; 0x175cc <Amigo_Command+0x142>
   175ca:	39 c2       	rjmp	.+1138   	; 0x17a3e <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   175cc:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   175d0:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   175d4:	81 e0       	ldi	r24, 0x01	; 1
   175d6:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   175d8:	87 81       	ldd	r24, Z+7	; 0x07
   175da:	90 85       	ldd	r25, Z+8	; 0x08
   175dc:	80 62       	ori	r24, 0x20	; 32
   175de:	90 87       	std	Z+8, r25	; 0x08
   175e0:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   175e2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   175e6:	80 ff       	sbrs	r24, 0
   175e8:	2a c2       	rjmp	.+1108   	; 0x17a3e <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   175ea:	86 e1       	ldi	r24, 0x16	; 22
   175ec:	9c e2       	ldi	r25, 0x2C	; 44
   175ee:	3e c0       	rjmp	.+124    	; 0x1766c <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   175f0:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   175f4:	90 e0       	ldi	r25, 0x00	; 0
   175f6:	0e 94 31 8d 	call	0x11a62	; 0x11a62 <AMIGO_is_MLA>
   175fa:	89 2b       	or	r24, r25
   175fc:	19 f4       	brne	.+6      	; 0x17604 <Amigo_Command+0x17a>
        return(0);
   175fe:	80 e0       	ldi	r24, 0x00	; 0
   17600:	90 e0       	ldi	r25, 0x00	; 0
   17602:	25 c2       	rjmp	.+1098   	; 0x17a4e <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   17604:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   17608:	90 e0       	ldi	r25, 0x00	; 0
   1760a:	0e 94 43 8d 	call	0x11a86	; 0x11a86 <AMIGO_is_MTA>
   1760e:	89 2b       	or	r24, r25
   17610:	b1 f7       	brne	.-20     	; 0x175fe <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17612:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   17616:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   1761a:	81 81       	ldd	r24, Z+1	; 0x01
   1761c:	90 e0       	ldi	r25, 0x00	; 0
   1761e:	0e 94 01 87 	call	0x10e02	; 0x10e02 <gpib_disable_PPR>

///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   17622:	80 e0       	ldi	r24, 0x00	; 0
   17624:	91 e0       	ldi	r25, 0x01	; 1
   17626:	9c 8f       	std	Y+28, r25	; 0x1c
   17628:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   1762a:	ae 01       	movw	r20, r28
   1762c:	45 5e       	subi	r20, 0xE5	; 229
   1762e:	5f 4f       	sbci	r21, 0xFF	; 255
   17630:	60 e0       	ldi	r22, 0x00	; 0
   17632:	72 e0       	ldi	r23, 0x02	; 2
   17634:	80 ee       	ldi	r24, 0xE0	; 224
   17636:	9c e1       	ldi	r25, 0x1C	; 28
   17638:	0e 94 59 8b 	call	0x116b2	; 0x116b2 <gpib_read_str>
   1763c:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   1763e:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17640:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17642:	88 27       	eor	r24, r24
   17644:	90 7d       	andi	r25, 0xD0	; 208
   17646:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1764a:	89 2b       	or	r24, r25
   1764c:	c1 f0       	breq	.+48     	; 0x1767e <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   1764e:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   17652:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   17656:	81 e0       	ldi	r24, 0x01	; 1
   17658:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   1765a:	87 81       	ldd	r24, Z+7	; 0x07
   1765c:	90 85       	ldd	r25, Z+8	; 0x08
   1765e:	80 62       	ori	r24, 0x20	; 32
   17660:	90 87       	std	Z+8, r25	; 0x08
   17662:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & GPIB_ERR)
   17664:	20 ff       	sbrs	r18, 0
   17666:	eb c1       	rjmp	.+982    	; 0x17a3e <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   17668:	85 ef       	ldi	r24, 0xF5	; 245
   1766a:	9b e2       	ldi	r25, 0x2B	; 43
   1766c:	a0 e0       	ldi	r26, 0x00	; 0
   1766e:	ed b7       	in	r30, 0x3d	; 61
   17670:	fe b7       	in	r31, 0x3e	; 62
   17672:	81 83       	std	Z+1, r24	; 0x01
   17674:	92 83       	std	Z+2, r25	; 0x02
   17676:	a3 83       	std	Z+3, r26	; 0x03
   17678:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1767c:	e0 c1       	rjmp	.+960    	; 0x17a3e <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1767e:	25 ff       	sbrs	r18, 5
   17680:	0e c0       	rjmp	.+28     	; 0x1769e <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   17682:	ed b7       	in	r30, 0x3d	; 61
   17684:	fe b7       	in	r31, 0x3e	; 62
   17686:	17 83       	std	Z+7, r17	; 0x07
   17688:	06 83       	std	Z+6, r16	; 0x06
   1768a:	f5 82       	std	Z+5, r15	; 0x05
   1768c:	e4 82       	std	Z+4, r14	; 0x04
   1768e:	86 ec       	ldi	r24, 0xC6	; 198
   17690:	9b e2       	ldi	r25, 0x2B	; 43
   17692:	a0 e0       	ldi	r26, 0x00	; 0
   17694:	81 83       	std	Z+1, r24	; 0x01
   17696:	92 83       	std	Z+2, r25	; 0x02
   17698:	a3 83       	std	Z+3, r26	; 0x03
   1769a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            secondary, len);
#endif
    if(!len)
   1769e:	01 15       	cp	r16, r1
   176a0:	11 05       	cpc	r17, r1
   176a2:	61 f4       	brne	.+24     	; 0x176bc <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   176a4:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   176a8:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   176ac:	81 e0       	ldi	r24, 0x01	; 1
   176ae:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   176b0:	87 81       	ldd	r24, Z+7	; 0x07
   176b2:	90 85       	ldd	r25, Z+8	; 0x08
   176b4:	80 62       	ori	r24, 0x20	; 32
   176b6:	90 87       	std	Z+8, r25	; 0x08
   176b8:	87 83       	std	Z+7, r24	; 0x07
   176ba:	c1 c1       	rjmp	.+898    	; 0x17a3e <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   176bc:	60 91 e0 1c 	lds	r22, 0x1CE0	; 0x801ce0 <gpib_iobuff>

    if (secondary == 0x68)
   176c0:	f8 e6       	ldi	r31, 0x68	; 104
   176c2:	ef 16       	cp	r14, r31
   176c4:	f1 04       	cpc	r15, r1
   176c6:	09 f0       	breq	.+2      	; 0x176ca <Amigo_Command+0x240>
   176c8:	28 c1       	rjmp	.+592    	; 0x1791a <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   176ca:	61 11       	cpse	r22, r1
   176cc:	2e c0       	rjmp	.+92     	; 0x1772a <Amigo_Command+0x2a0>
   176ce:	02 30       	cpi	r16, 0x02	; 2
   176d0:	11 05       	cpc	r17, r1
   176d2:	09 f0       	breq	.+2      	; 0x176d6 <Amigo_Command+0x24c>
   176d4:	b9 c1       	rjmp	.+882    	; 0x17a48 <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   176d6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   176da:	85 ff       	sbrs	r24, 5
   176dc:	0a c0       	rjmp	.+20     	; 0x176f2 <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   176de:	86 ea       	ldi	r24, 0xA6	; 166
   176e0:	9b e2       	ldi	r25, 0x2B	; 43
   176e2:	a0 e0       	ldi	r26, 0x00	; 0
   176e4:	ed b7       	in	r30, 0x3d	; 61
   176e6:	fe b7       	in	r31, 0x3e	; 62
   176e8:	81 83       	std	Z+1, r24	; 0x01
   176ea:	92 83       	std	Z+2, r25	; 0x02
   176ec:	a3 83       	std	Z+3, r26	; 0x03
   176ee:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   176f2:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   176f6:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   176fa:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   176fc:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   176fe:	10 86       	std	Z+8, r1	; 0x08
   17700:	17 82       	std	Z+7, r1	; 0x07
/// Fill in temparary address
            tmp.cyl = 0;
   17702:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   17704:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   17708:	98 2f       	mov	r25, r24
   1770a:	92 95       	swap	r25
   1770c:	96 95       	lsr	r25
   1770e:	96 95       	lsr	r25
   17710:	93 70       	andi	r25, 0x03	; 3
   17712:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   17714:	8f 73       	andi	r24, 0x3F	; 63
   17716:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
//update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   17718:	ce 01       	movw	r24, r28
   1771a:	0a 96       	adiw	r24, 0x0a	; 10
   1771c:	d1 d9       	rcall	.-3166   	; 0x16ac0 <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   1771e:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   17722:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   17726:	85 e0       	ldi	r24, 0x05	; 5
   17728:	19 c1       	rjmp	.+562    	; 0x1795c <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   1772a:	62 30       	cpi	r22, 0x02	; 2
   1772c:	09 f0       	breq	.+2      	; 0x17730 <Amigo_Command+0x2a6>
   1772e:	3f c0       	rjmp	.+126    	; 0x177ae <Amigo_Command+0x324>
   17730:	05 30       	cpi	r16, 0x05	; 5
   17732:	11 05       	cpc	r17, r1
   17734:	d1 f4       	brne	.+52     	; 0x1776a <Amigo_Command+0x2e0>
/// @brief
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17736:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1773a:	85 ff       	sbrs	r24, 5
   1773c:	0a c0       	rjmp	.+20     	; 0x17752 <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   1773e:	82 e9       	ldi	r24, 0x92	; 146
   17740:	9b e2       	ldi	r25, 0x2B	; 43
   17742:	a0 e0       	ldi	r26, 0x00	; 0
   17744:	ed b7       	in	r30, 0x3d	; 61
   17746:	fe b7       	in	r31, 0x3e	; 62
   17748:	81 83       	std	Z+1, r24	; 0x01
   1774a:	92 83       	std	Z+2, r25	; 0x02
   1774c:	a3 83       	std	Z+3, r26	; 0x03
   1774e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17752:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   17756:	85 de       	rcall	.-758    	; 0x17462 <amigo_check_unit>

/// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   17758:	80 91 e2 1c 	lds	r24, 0x1CE2	; 0x801ce2 <gpib_iobuff+0x2>
   1775c:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   1775e:	80 91 e3 1c 	lds	r24, 0x1CE3	; 0x801ce3 <gpib_iobuff+0x3>
   17762:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   17764:	80 91 e4 1c 	lds	r24, 0x1CE4	; 0x801ce4 <gpib_iobuff+0x4>
   17768:	1d c0       	rjmp	.+58     	; 0x177a4 <Amigo_Command+0x31a>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   1776a:	06 30       	cpi	r16, 0x06	; 6
   1776c:	11 05       	cpc	r17, r1
   1776e:	09 f0       	breq	.+2      	; 0x17772 <Amigo_Command+0x2e8>
   17770:	6b c1       	rjmp	.+726    	; 0x17a48 <Amigo_Command+0x5be>
/// @brief
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17772:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17776:	85 ff       	sbrs	r24, 5
   17778:	0a c0       	rjmp	.+20     	; 0x1778e <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   1777a:	8e e7       	ldi	r24, 0x7E	; 126
   1777c:	9b e2       	ldi	r25, 0x2B	; 43
   1777e:	a0 e0       	ldi	r26, 0x00	; 0
   17780:	ed b7       	in	r30, 0x3d	; 61
   17782:	fe b7       	in	r31, 0x3e	; 62
   17784:	81 83       	std	Z+1, r24	; 0x01
   17786:	92 83       	std	Z+2, r25	; 0x02
   17788:	a3 83       	std	Z+3, r26	; 0x03
   1778a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1778e:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   17792:	67 de       	rcall	.-818    	; 0x17462 <amigo_check_unit>
/// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   17794:	80 91 e3 1c 	lds	r24, 0x1CE3	; 0x801ce3 <gpib_iobuff+0x3>
   17798:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   1779a:	80 91 e4 1c 	lds	r24, 0x1CE4	; 0x801ce4 <gpib_iobuff+0x4>
   1779e:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   177a0:	80 91 e5 1c 	lds	r24, 0x1CE5	; 0x801ce5 <gpib_iobuff+0x5>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   177a4:	8f 87       	std	Y+15, r24	; 0x0f
   177a6:	ce 01       	movw	r24, r28
   177a8:	0a 96       	adiw	r24, 0x0a	; 10
   177aa:	8a d9       	rcall	.-3308   	; 0x16ac0 <amigo_seek>
   177ac:	d8 c0       	rjmp	.+432    	; 0x1795e <Amigo_Command+0x4d4>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   177ae:	63 30       	cpi	r22, 0x03	; 3
   177b0:	e9 f4       	brne	.+58     	; 0x177ec <Amigo_Command+0x362>
   177b2:	02 30       	cpi	r16, 0x02	; 2
   177b4:	11 05       	cpc	r17, r1
   177b6:	09 f0       	breq	.+2      	; 0x177ba <Amigo_Command+0x330>
   177b8:	47 c1       	rjmp	.+654    	; 0x17a48 <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   177ba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   177be:	85 ff       	sbrs	r24, 5
   177c0:	0a c0       	rjmp	.+20     	; 0x177d6 <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   177c2:	85 e5       	ldi	r24, 0x55	; 85
   177c4:	9b e2       	ldi	r25, 0x2B	; 43
   177c6:	a0 e0       	ldi	r26, 0x00	; 0
   177c8:	ed b7       	in	r30, 0x3d	; 61
   177ca:	fe b7       	in	r31, 0x3e	; 62
   177cc:	81 83       	std	Z+1, r24	; 0x01
   177ce:	92 83       	std	Z+2, r25	; 0x02
   177d0:	a3 83       	std	Z+3, r26	; 0x03
   177d2:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   177d6:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
            amigo_request_status();
   177da:	43 de       	rcall	.-890    	; 0x17462 <amigo_check_unit>
   177dc:	3d d8       	rcall	.-3974   	; 0x16858 <amigo_request_status>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   177de:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   177e2:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   177e6:	83 e0       	ldi	r24, 0x03	; 3
   177e8:	80 83       	st	Z, r24
   177ea:	29 c1       	rjmp	.+594    	; 0x17a3e <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   177ec:	65 30       	cpi	r22, 0x05	; 5
   177ee:	d9 f4       	brne	.+54     	; 0x17826 <Amigo_Command+0x39c>
   177f0:	02 30       	cpi	r16, 0x02	; 2
   177f2:	11 05       	cpc	r17, r1
   177f4:	09 f0       	breq	.+2      	; 0x177f8 <Amigo_Command+0x36e>
   177f6:	28 c1       	rjmp	.+592    	; 0x17a48 <Amigo_Command+0x5be>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   177f8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   177fc:	85 ff       	sbrs	r24, 5
   177fe:	0a c0       	rjmp	.+20     	; 0x17814 <Amigo_Command+0x38a>
                printf("[AMIGO Read Unbuffered Command]\n");
   17800:	84 e3       	ldi	r24, 0x34	; 52
   17802:	9b e2       	ldi	r25, 0x2B	; 43
   17804:	a0 e0       	ldi	r26, 0x00	; 0
   17806:	ed b7       	in	r30, 0x3d	; 61
   17808:	fe b7       	in	r31, 0x3e	; 62
   1780a:	81 83       	std	Z+1, r24	; 0x01
   1780c:	92 83       	std	Z+2, r25	; 0x02
   1780e:	a3 83       	std	Z+3, r26	; 0x03
   17810:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17814:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   17818:	24 de       	rcall	.-952    	; 0x17462 <amigo_check_unit>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   1781a:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   1781e:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   17822:	86 e0       	ldi	r24, 0x06	; 6
   17824:	e7 c0       	rjmp	.+462    	; 0x179f4 <Amigo_Command+0x56a>
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
#endif
        }
        else if(op == 0x07 && len == 4)
   17826:	67 30       	cpi	r22, 0x07	; 7
   17828:	f9 f4       	brne	.+62     	; 0x17868 <Amigo_Command+0x3de>
   1782a:	04 30       	cpi	r16, 0x04	; 4
   1782c:	11 05       	cpc	r17, r1
   1782e:	09 f0       	breq	.+2      	; 0x17832 <Amigo_Command+0x3a8>
   17830:	0b c1       	rjmp	.+534    	; 0x17a48 <Amigo_Command+0x5be>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17832:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17836:	85 ff       	sbrs	r24, 5
   17838:	0a c0       	rjmp	.+20     	; 0x1784e <Amigo_Command+0x3c4>
                printf("[AMIGO Verify]\n");
   1783a:	84 e2       	ldi	r24, 0x24	; 36
   1783c:	9b e2       	ldi	r25, 0x2B	; 43
   1783e:	a0 e0       	ldi	r26, 0x00	; 0
   17840:	ed b7       	in	r30, 0x3d	; 61
   17842:	fe b7       	in	r31, 0x3e	; 62
   17844:	81 83       	std	Z+1, r24	; 0x01
   17846:	92 83       	std	Z+2, r25	; 0x02
   17848:	a3 83       	std	Z+3, r26	; 0x03
   1784a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1784e:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   17852:	07 de       	rcall	.-1010   	; 0x17462 <amigo_check_unit>
            sectors = (0xff & *ptr++) << 8;
   17854:	80 91 e2 1c 	lds	r24, 0x1CE2	; 0x801ce2 <gpib_iobuff+0x2>
   17858:	90 e0       	ldi	r25, 0x00	; 0
   1785a:	98 2f       	mov	r25, r24
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   1785c:	88 27       	eor	r24, r24
   1785e:	20 91 e3 1c 	lds	r18, 0x1CE3	; 0x801ce3 <gpib_iobuff+0x3>
   17862:	82 2b       	or	r24, r18
   17864:	58 d9       	rcall	.-3408   	; 0x16b16 <amigo_verify>
   17866:	f3 c0       	rjmp	.+486    	; 0x17a4e <Amigo_Command+0x5c4>
        }
        else if(op == 0x08 && len == 2)
   17868:	68 30       	cpi	r22, 0x08	; 8
   1786a:	d9 f4       	brne	.+54     	; 0x178a2 <Amigo_Command+0x418>
   1786c:	02 30       	cpi	r16, 0x02	; 2
   1786e:	11 05       	cpc	r17, r1
   17870:	09 f0       	breq	.+2      	; 0x17874 <Amigo_Command+0x3ea>
   17872:	ea c0       	rjmp	.+468    	; 0x17a48 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17874:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17878:	85 ff       	sbrs	r24, 5
   1787a:	0a c0       	rjmp	.+20     	; 0x17890 <Amigo_Command+0x406>
                printf("[AMIGO Write Unbuffered Command]\n");
   1787c:	82 e0       	ldi	r24, 0x02	; 2
   1787e:	9b e2       	ldi	r25, 0x2B	; 43
   17880:	a0 e0       	ldi	r26, 0x00	; 0
   17882:	ed b7       	in	r30, 0x3d	; 61
   17884:	fe b7       	in	r31, 0x3e	; 62
   17886:	81 83       	std	Z+1, r24	; 0x01
   17888:	92 83       	std	Z+2, r25	; 0x02
   1788a:	a3 83       	std	Z+3, r26	; 0x03
   1788c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17890:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   17894:	e6 dd       	rcall	.-1076   	; 0x17462 <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   17896:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   1789a:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   1789e:	88 e0       	ldi	r24, 0x08	; 8
   178a0:	5d c0       	rjmp	.+186    	; 0x1795c <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   178a2:	86 2f       	mov	r24, r22
   178a4:	8f 7d       	andi	r24, 0xDF	; 223
   178a6:	8b 30       	cpi	r24, 0x0B	; 11
   178a8:	d9 f4       	brne	.+54     	; 0x178e0 <Amigo_Command+0x456>
   178aa:	02 30       	cpi	r16, 0x02	; 2
   178ac:	11 05       	cpc	r17, r1
   178ae:	09 f0       	breq	.+2      	; 0x178b2 <Amigo_Command+0x428>
   178b0:	cb c0       	rjmp	.+406    	; 0x17a48 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   178b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   178b6:	85 ff       	sbrs	r24, 5
   178b8:	0a c0       	rjmp	.+20     	; 0x178ce <Amigo_Command+0x444>
                printf("[AMIGO Initialize Command]\n");
   178ba:	86 ee       	ldi	r24, 0xE6	; 230
   178bc:	9a e2       	ldi	r25, 0x2A	; 42
   178be:	a0 e0       	ldi	r26, 0x00	; 0
   178c0:	ed b7       	in	r30, 0x3d	; 61
   178c2:	fe b7       	in	r31, 0x3e	; 62
   178c4:	81 83       	std	Z+1, r24	; 0x01
   178c6:	92 83       	std	Z+2, r25	; 0x02
   178c8:	a3 83       	std	Z+3, r26	; 0x03
   178ca:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   178ce:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   178d2:	c7 dd       	rcall	.-1138   	; 0x17462 <amigo_check_unit>
            AMIGOs->state = AMIGO_INITIALIZE;
   178d4:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   178d8:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   178dc:	8a e0       	ldi	r24, 0x0A	; 10
   178de:	3e c0       	rjmp	.+124    	; 0x1795c <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   178e0:	64 31       	cpi	r22, 0x14	; 20
   178e2:	09 f0       	breq	.+2      	; 0x178e6 <Amigo_Command+0x45c>
   178e4:	b1 c0       	rjmp	.+354    	; 0x17a48 <Amigo_Command+0x5be>
   178e6:	02 30       	cpi	r16, 0x02	; 2
   178e8:	11 05       	cpc	r17, r1
   178ea:	09 f0       	breq	.+2      	; 0x178ee <Amigo_Command+0x464>
   178ec:	ad c0       	rjmp	.+346    	; 0x17a48 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   178ee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   178f2:	85 ff       	sbrs	r24, 5
   178f4:	0a c0       	rjmp	.+20     	; 0x1790a <Amigo_Command+0x480>
                printf("[AMIGO Request Logical Address Command]\n");
   178f6:	8d eb       	ldi	r24, 0xBD	; 189
   178f8:	9a e2       	ldi	r25, 0x2A	; 42
   178fa:	a0 e0       	ldi	r26, 0x00	; 0
   178fc:	ed b7       	in	r30, 0x3d	; 61
   178fe:	fe b7       	in	r31, 0x3e	; 62
   17900:	81 83       	std	Z+1, r24	; 0x01
   17902:	92 83       	std	Z+2, r25	; 0x02
   17904:	a3 83       	std	Z+3, r26	; 0x03
   17906:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
            amigo_request_logical_address();
   1790a:	0e 94 1e b4 	call	0x1683c	; 0x1683c <amigo_request_logical_address>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   1790e:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   17912:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   17916:	84 e0       	ldi	r24, 0x04	; 4
   17918:	21 c0       	rjmp	.+66     	; 0x1795c <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   1791a:	f9 e6       	ldi	r31, 0x69	; 105
   1791c:	ef 16       	cp	r14, r31
   1791e:	f1 04       	cpc	r15, r1
   17920:	39 f5       	brne	.+78     	; 0x17970 <Amigo_Command+0x4e6>
    {
        if(op == 0x08 && len == 2)
   17922:	68 30       	cpi	r22, 0x08	; 8
   17924:	09 f0       	breq	.+2      	; 0x17928 <Amigo_Command+0x49e>
   17926:	90 c0       	rjmp	.+288    	; 0x17a48 <Amigo_Command+0x5be>
   17928:	02 30       	cpi	r16, 0x02	; 2
   1792a:	11 05       	cpc	r17, r1
   1792c:	09 f0       	breq	.+2      	; 0x17930 <Amigo_Command+0x4a6>
   1792e:	8c c0       	rjmp	.+280    	; 0x17a48 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17930:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17934:	85 ff       	sbrs	r24, 5
   17936:	0a c0       	rjmp	.+20     	; 0x1794c <Amigo_Command+0x4c2>
                printf("[AMIGO Write Buffered Command]\n");
   17938:	8d e9       	ldi	r24, 0x9D	; 157
   1793a:	9a e2       	ldi	r25, 0x2A	; 42
   1793c:	a0 e0       	ldi	r26, 0x00	; 0
   1793e:	ed b7       	in	r30, 0x3d	; 61
   17940:	fe b7       	in	r31, 0x3e	; 62
   17942:	81 83       	std	Z+1, r24	; 0x01
   17944:	92 83       	std	Z+2, r25	; 0x02
   17946:	a3 83       	std	Z+3, r26	; 0x03
   17948:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1794c:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   17950:	88 dd       	rcall	.-1264   	; 0x17462 <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   17952:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   17956:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   1795a:	89 e0       	ldi	r24, 0x09	; 9
   1795c:	80 83       	st	Z, r24
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1795e:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   17962:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   17966:	81 81       	ldd	r24, Z+1	; 0x01
   17968:	90 e0       	ldi	r25, 0x00	; 0
   1796a:	0e 94 cb 86 	call	0x10d96	; 0x10d96 <gpib_enable_PPR>
   1796e:	67 c0       	rjmp	.+206    	; 0x17a3e <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   17970:	fa e6       	ldi	r31, 0x6A	; 106
   17972:	ef 16       	cp	r14, r31
   17974:	f1 04       	cpc	r15, r1
   17976:	09 f0       	breq	.+2      	; 0x1797a <Amigo_Command+0x4f0>
   17978:	40 c0       	rjmp	.+128    	; 0x179fa <Amigo_Command+0x570>
    {
        if(op == 0x08 && len == 2)
   1797a:	68 30       	cpi	r22, 0x08	; 8
   1797c:	f1 f4       	brne	.+60     	; 0x179ba <Amigo_Command+0x530>
   1797e:	02 30       	cpi	r16, 0x02	; 2
   17980:	11 05       	cpc	r17, r1
   17982:	09 f0       	breq	.+2      	; 0x17986 <Amigo_Command+0x4fc>
   17984:	61 c0       	rjmp	.+194    	; 0x17a48 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17986:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1798a:	85 ff       	sbrs	r24, 5
   1798c:	0a c0       	rjmp	.+20     	; 0x179a2 <Amigo_Command+0x518>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   1798e:	82 e7       	ldi	r24, 0x72	; 114
   17990:	9a e2       	ldi	r25, 0x2A	; 42
   17992:	a0 e0       	ldi	r26, 0x00	; 0
   17994:	ed b7       	in	r30, 0x3d	; 61
   17996:	fe b7       	in	r31, 0x3e	; 62
   17998:	81 83       	std	Z+1, r24	; 0x01
   1799a:	92 83       	std	Z+2, r25	; 0x02
   1799c:	a3 83       	std	Z+3, r26	; 0x03
   1799e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   179a2:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   179a6:	5d dd       	rcall	.-1350   	; 0x17462 <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   179a8:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   179ac:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   179b0:	82 e0       	ldi	r24, 0x02	; 2
   179b2:	80 83       	st	Z, r24
            amigo_request_status();
   179b4:	0e 94 2c b4 	call	0x16858	; 0x16858 <amigo_request_status>
   179b8:	42 c0       	rjmp	.+132    	; 0x17a3e <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   179ba:	65 30       	cpi	r22, 0x05	; 5
   179bc:	09 f0       	breq	.+2      	; 0x179c0 <Amigo_Command+0x536>
   179be:	44 c0       	rjmp	.+136    	; 0x17a48 <Amigo_Command+0x5be>
   179c0:	02 30       	cpi	r16, 0x02	; 2
   179c2:	11 05       	cpc	r17, r1
   179c4:	09 f0       	breq	.+2      	; 0x179c8 <Amigo_Command+0x53e>
   179c6:	40 c0       	rjmp	.+128    	; 0x17a48 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   179c8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   179cc:	85 ff       	sbrs	r24, 5
   179ce:	0a c0       	rjmp	.+20     	; 0x179e4 <Amigo_Command+0x55a>
                printf("[AMIGO Read Buffered Command]\n");
   179d0:	83 e5       	ldi	r24, 0x53	; 83
   179d2:	9a e2       	ldi	r25, 0x2A	; 42
   179d4:	a0 e0       	ldi	r26, 0x00	; 0
   179d6:	ed b7       	in	r30, 0x3d	; 61
   179d8:	fe b7       	in	r31, 0x3e	; 62
   179da:	81 83       	std	Z+1, r24	; 0x01
   179dc:	92 83       	std	Z+2, r25	; 0x02
   179de:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   179e0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   179e4:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   179e8:	3c dd       	rcall	.-1416   	; 0x17462 <amigo_check_unit>
   179ea:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   179ee:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   179f2:	87 e0       	ldi	r24, 0x07	; 7

#if 0
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
   179f4:	80 83       	st	Z, r24
   179f6:	c5 d9       	rcall	.-3190   	; 0x16d82 <amigo_buffered_read_command>
   179f8:	2a c0       	rjmp	.+84     	; 0x17a4e <Amigo_Command+0x5c4>
#endif
        }
    }
    else if (secondary == 0x6C)
   179fa:	fc e6       	ldi	r31, 0x6C	; 108
   179fc:	ef 16       	cp	r14, r31
   179fe:	f1 04       	cpc	r15, r1
   17a00:	d1 f4       	brne	.+52     	; 0x17a36 <Amigo_Command+0x5ac>
    {
        if(op == 0x18 && len == 5)
   17a02:	68 31       	cpi	r22, 0x18	; 24
   17a04:	09 f5       	brne	.+66     	; 0x17a48 <Amigo_Command+0x5be>
   17a06:	05 30       	cpi	r16, 0x05	; 5
   17a08:	11 05       	cpc	r17, r1
   17a0a:	f1 f4       	brne	.+60     	; 0x17a48 <Amigo_Command+0x5be>
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a0c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a10:	85 ff       	sbrs	r24, 5
   17a12:	0a c0       	rjmp	.+20     	; 0x17a28 <Amigo_Command+0x59e>
                printf("[AMIGO Format]\n");
   17a14:	83 e4       	ldi	r24, 0x43	; 67
   17a16:	9a e2       	ldi	r25, 0x2A	; 42
   17a18:	a0 e0       	ldi	r26, 0x00	; 0
   17a1a:	ed b7       	in	r30, 0x3d	; 61
   17a1c:	fe b7       	in	r31, 0x3e	; 62
   17a1e:	81 83       	std	Z+1, r24	; 0x01
   17a20:	92 83       	std	Z+2, r25	; 0x02
   17a22:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17a24:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   17a28:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
            ++ptr;                                // override not used
            ++ptr;                                // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   17a2c:	1a dd       	rcall	.-1484   	; 0x17462 <amigo_check_unit>
   17a2e:	80 91 e4 1c 	lds	r24, 0x1CE4	; 0x801ce4 <gpib_iobuff+0x4>
   17a32:	0f d9       	rcall	.-3554   	; 0x16c52 <amigo_format>
   17a34:	04 c0       	rjmp	.+8      	; 0x17a3e <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   17a36:	f0 e7       	ldi	r31, 0x70	; 112
   17a38:	ef 16       	cp	r14, r31
   17a3a:	f1 04       	cpc	r15, r1
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   17a3c:	29 f4       	brne	.+10     	; 0x17a48 <Amigo_Command+0x5be>
   17a3e:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17a40:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17a42:	88 27       	eor	r24, r24
   17a44:	90 7d       	andi	r25, 0xD0	; 208
    }
    return ( amigo_todo_op(secondary, op, len) );
   17a46:	03 c0       	rjmp	.+6      	; 0x17a4e <Amigo_Command+0x5c4>
   17a48:	a8 01       	movw	r20, r16
   17a4a:	8e 2d       	mov	r24, r14
   17a4c:	ed db       	rcall	.-2086   	; 0x17228 <amigo_todo_op>
}
   17a4e:	6c 96       	adiw	r28, 0x1c	; 28
   17a50:	e6 e0       	ldi	r30, 0x06	; 6
   17a52:	0c 94 bb e7 	jmp	0x1cf76	; 0x1cf76 <__epilogue_restores__+0x18>

00017a56 <Amigo_Execute>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Execute( int secondary )
{
   17a56:	a9 e0       	ldi	r26, 0x09	; 9
   17a58:	b0 e0       	ldi	r27, 0x00	; 0
   17a5a:	e1 e3       	ldi	r30, 0x31	; 49
   17a5c:	fd eb       	ldi	r31, 0xBD	; 189
   17a5e:	0c 94 a3 e7 	jmp	0x1cf46	; 0x1cf46 <__prologue_saves__+0x20>
   17a62:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17a64:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17a68:	85 ff       	sbrs	r24, 5
   17a6a:	16 c0       	rjmp	.+44     	; 0x17a98 <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   17a6c:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   17a70:	90 e0       	ldi	r25, 0x00	; 0
   17a72:	ed b7       	in	r30, 0x3d	; 61
   17a74:	fe b7       	in	r31, 0x3e	; 62
   17a76:	91 87       	std	Z+9, r25	; 0x09
   17a78:	80 87       	std	Z+8, r24	; 0x08
   17a7a:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17a7e:	90 e0       	ldi	r25, 0x00	; 0
   17a80:	97 83       	std	Z+7, r25	; 0x07
   17a82:	86 83       	std	Z+6, r24	; 0x06
   17a84:	d5 83       	std	Z+5, r29	; 0x05
   17a86:	c4 83       	std	Z+4, r28	; 0x04
   17a88:	81 e1       	ldi	r24, 0x11	; 17
   17a8a:	9a e2       	ldi	r25, 0x2A	; 42
   17a8c:	a0 e0       	ldi	r26, 0x00	; 0
   17a8e:	81 83       	std	Z+1, r24	; 0x01
   17a90:	92 83       	std	Z+2, r25	; 0x02
   17a92:	a3 83       	std	Z+3, r26	; 0x03
   17a94:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   17a98:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   17a9c:	8f 35       	cpi	r24, 0x5F	; 95
   17a9e:	09 f4       	brne	.+2      	; 0x17aa2 <Amigo_Execute+0x4c>
   17aa0:	ad c0       	rjmp	.+346    	; 0x17bfc <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17aa2:	90 e0       	ldi	r25, 0x00	; 0
   17aa4:	0e 94 43 8d 	call	0x11a86	; 0x11a86 <AMIGO_is_MTA>
   17aa8:	89 2b       	or	r24, r25
   17aaa:	39 f0       	breq	.+14     	; 0x17aba <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   17aac:	ce 01       	movw	r24, r28
   17aae:	87 7f       	andi	r24, 0xF7	; 247
   17ab0:	80 36       	cpi	r24, 0x60	; 96
   17ab2:	91 05       	cpc	r25, r1
   17ab4:	09 f0       	breq	.+2      	; 0x17ab8 <Amigo_Execute+0x62>
   17ab6:	a2 c0       	rjmp	.+324    	; 0x17bfc <Amigo_Execute+0x1a6>
   17ab8:	08 c0       	rjmp	.+16     	; 0x17aca <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17aba:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17abe:	90 e0       	ldi	r25, 0x00	; 0
   17ac0:	0e 94 31 8d 	call	0x11a62	; 0x11a62 <AMIGO_is_MLA>
   17ac4:	89 2b       	or	r24, r25
   17ac6:	91 f7       	brne	.-28     	; 0x17aac <Amigo_Execute+0x56>
   17ac8:	99 c0       	rjmp	.+306    	; 0x17bfc <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17aca:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   17ace:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   17ad2:	81 81       	ldd	r24, Z+1	; 0x01
   17ad4:	90 e0       	ldi	r25, 0x00	; 0
   17ad6:	0e 94 01 87 	call	0x10e02	; 0x10e02 <gpib_disable_PPR>

    if(secondary == 0x60)
   17ada:	c0 36       	cpi	r28, 0x60	; 96
   17adc:	d1 05       	cpc	r29, r1
   17ade:	09 f0       	breq	.+2      	; 0x17ae2 <Amigo_Execute+0x8c>
   17ae0:	4e c0       	rjmp	.+156    	; 0x17b7e <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   17ae2:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   17ae6:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   17aea:	e0 81       	ld	r30, Z
   17aec:	8e 2f       	mov	r24, r30
   17aee:	90 e0       	ldi	r25, 0x00	; 0
   17af0:	8b 30       	cpi	r24, 0x0B	; 11
   17af2:	91 05       	cpc	r25, r1
   17af4:	08 f0       	brcs	.+2      	; 0x17af8 <Amigo_Execute+0xa2>
   17af6:	41 c0       	rjmp	.+130    	; 0x17b7a <Amigo_Execute+0x124>
   17af8:	fc 01       	movw	r30, r24
   17afa:	ea 52       	subi	r30, 0x2A	; 42
   17afc:	ff 4f       	sbci	r31, 0xFF	; 255
   17afe:	0c 94 64 e7 	jmp	0x1cec8	; 0x1cec8 <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17b02:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17b06:	85 ff       	sbrs	r24, 5
   17b08:	18 c0       	rjmp	.+48     	; 0x17b3a <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   17b0a:	81 ef       	ldi	r24, 0xF1	; 241
   17b0c:	99 e2       	ldi	r25, 0x29	; 41
   17b0e:	0d c0       	rjmp	.+26     	; 0x17b2a <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17b10:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17b14:	85 ff       	sbrs	r24, 5
   17b16:	11 c0       	rjmp	.+34     	; 0x17b3a <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   17b18:	80 ed       	ldi	r24, 0xD0	; 208
   17b1a:	99 e2       	ldi	r25, 0x29	; 41
   17b1c:	06 c0       	rjmp	.+12     	; 0x17b2a <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17b1e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17b22:	85 ff       	sbrs	r24, 5
   17b24:	0a c0       	rjmp	.+20     	; 0x17b3a <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   17b26:	81 eb       	ldi	r24, 0xB1	; 177
   17b28:	99 e2       	ldi	r25, 0x29	; 41
   17b2a:	a0 e0       	ldi	r26, 0x00	; 0
   17b2c:	ed b7       	in	r30, 0x3d	; 61
   17b2e:	fe b7       	in	r31, 0x3e	; 62
   17b30:	81 83       	std	Z+1, r24	; 0x01
   17b32:	92 83       	std	Z+2, r25	; 0x02
   17b34:	a3 83       	std	Z+3, r26	; 0x03
   17b36:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
                return ( amigo_buffered_read_execute() );
   17b3a:	b0 d9       	rcall	.-3232   	; 0x16e9c <amigo_buffered_read_execute>
   17b3c:	61 c0       	rjmp	.+194    	; 0x17c00 <Amigo_Execute+0x1aa>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17b3e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17b42:	85 ff       	sbrs	r24, 5
   17b44:	18 c0       	rjmp	.+48     	; 0x17b76 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Unbuffered]\n");
   17b46:	8f e8       	ldi	r24, 0x8F	; 143
   17b48:	99 e2       	ldi	r25, 0x29	; 41
   17b4a:	0d c0       	rjmp	.+26     	; 0x17b66 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17b4c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17b50:	85 ff       	sbrs	r24, 5
   17b52:	11 c0       	rjmp	.+34     	; 0x17b76 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Initialize]\n");
   17b54:	83 e7       	ldi	r24, 0x73	; 115
   17b56:	99 e2       	ldi	r25, 0x29	; 41
   17b58:	06 c0       	rjmp	.+12     	; 0x17b66 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17b5a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17b5e:	85 ff       	sbrs	r24, 5
   17b60:	0a c0       	rjmp	.+20     	; 0x17b76 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Buffered]\n");
   17b62:	83 e5       	ldi	r24, 0x53	; 83
   17b64:	99 e2       	ldi	r25, 0x29	; 41
   17b66:	a0 e0       	ldi	r26, 0x00	; 0
   17b68:	ed b7       	in	r30, 0x3d	; 61
   17b6a:	fe b7       	in	r31, 0x3e	; 62
   17b6c:	81 83       	std	Z+1, r24	; 0x01
   17b6e:	92 83       	std	Z+2, r25	; 0x02
   17b70:	a3 83       	std	Z+3, r26	; 0x03
   17b72:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
                return ( amigo_buffered_write() );
   17b76:	ed d9       	rcall	.-3110   	; 0x16f52 <amigo_buffered_write>
   17b78:	43 c0       	rjmp	.+134    	; 0x17c00 <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17b7a:	80 e6       	ldi	r24, 0x60	; 96
   17b7c:	3d c0       	rjmp	.+122    	; 0x17bf8 <Amigo_Execute+0x1a2>
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   17b7e:	c8 36       	cpi	r28, 0x68	; 104
   17b80:	d1 05       	cpc	r29, r1
   17b82:	e1 f5       	brne	.+120    	; 0x17bfc <Amigo_Execute+0x1a6>
    {
        switch(AMIGOs->state)
   17b84:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   17b88:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   17b8c:	80 81       	ld	r24, Z
   17b8e:	82 30       	cpi	r24, 0x02	; 2
   17b90:	81 f0       	breq	.+32     	; 0x17bb2 <Amigo_Execute+0x15c>
   17b92:	18 f4       	brcc	.+6      	; 0x17b9a <Amigo_Execute+0x144>
   17b94:	88 23       	and	r24, r24
   17b96:	91 f1       	breq	.+100    	; 0x17bfc <Amigo_Execute+0x1a6>
   17b98:	2e c0       	rjmp	.+92     	; 0x17bf6 <Amigo_Execute+0x1a0>
   17b9a:	83 30       	cpi	r24, 0x03	; 3
   17b9c:	19 f0       	breq	.+6      	; 0x17ba4 <Amigo_Execute+0x14e>
   17b9e:	84 30       	cpi	r24, 0x04	; 4
   17ba0:	c9 f0       	breq	.+50     	; 0x17bd4 <Amigo_Execute+0x17e>
   17ba2:	29 c0       	rjmp	.+82     	; 0x17bf6 <Amigo_Execute+0x1a0>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17ba4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17ba8:	85 ff       	sbrs	r24, 5
   17baa:	11 c0       	rjmp	.+34     	; 0x17bce <Amigo_Execute+0x178>
                    printf("[AMIGO Execute Request Status Buffered]\n");
   17bac:	8a e2       	ldi	r24, 0x2A	; 42
   17bae:	99 e2       	ldi	r25, 0x29	; 41
   17bb0:	06 c0       	rjmp	.+12     	; 0x17bbe <Amigo_Execute+0x168>
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17bb2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17bb6:	85 ff       	sbrs	r24, 5
   17bb8:	0a c0       	rjmp	.+20     	; 0x17bce <Amigo_Execute+0x178>
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   17bba:	8f ef       	ldi	r24, 0xFF	; 255
   17bbc:	98 e2       	ldi	r25, 0x28	; 40
   17bbe:	a0 e0       	ldi	r26, 0x00	; 0
   17bc0:	ed b7       	in	r30, 0x3d	; 61
   17bc2:	fe b7       	in	r31, 0x3e	; 62
   17bc4:	81 83       	std	Z+1, r24	; 0x01
   17bc6:	92 83       	std	Z+2, r25	; 0x02
   17bc8:	a3 83       	std	Z+3, r26	; 0x03
   17bca:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
                return ( amigo_send_status() );
   17bce:	0e 94 de b4 	call	0x169bc	; 0x169bc <amigo_send_status>
   17bd2:	16 c0       	rjmp	.+44     	; 0x17c00 <Amigo_Execute+0x1aa>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17bd4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17bd8:	85 ff       	sbrs	r24, 5
   17bda:	0a c0       	rjmp	.+20     	; 0x17bf0 <Amigo_Execute+0x19a>
                    printf("[AMIGO Execute Request Logical Address]\n");
   17bdc:	86 ed       	ldi	r24, 0xD6	; 214
   17bde:	98 e2       	ldi	r25, 0x28	; 40
   17be0:	a0 e0       	ldi	r26, 0x00	; 0
   17be2:	ed b7       	in	r30, 0x3d	; 61
   17be4:	fe b7       	in	r31, 0x3e	; 62
   17be6:	81 83       	std	Z+1, r24	; 0x01
   17be8:	92 83       	std	Z+2, r25	; 0x02
   17bea:	a3 83       	std	Z+3, r26	; 0x03
   17bec:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
                return ( amigo_send_logical_address() );
   17bf0:	0e 94 89 b4 	call	0x16912	; 0x16912 <amigo_send_logical_address>
   17bf4:	05 c0       	rjmp	.+10     	; 0x17c00 <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17bf6:	88 e6       	ldi	r24, 0x68	; 104
   17bf8:	b0 db       	rcall	.-2208   	; 0x1735a <amigo_todo>
   17bfa:	02 c0       	rjmp	.+4      	; 0x17c00 <Amigo_Execute+0x1aa>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   17bfc:	80 e0       	ldi	r24, 0x00	; 0
   17bfe:	90 e0       	ldi	r25, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   17c00:	cd b7       	in	r28, 0x3d	; 61
   17c02:	de b7       	in	r29, 0x3e	; 62
   17c04:	29 96       	adiw	r28, 0x09	; 9
   17c06:	e2 e0       	ldi	r30, 0x02	; 2
   17c08:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00017c0c <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   17c0c:	cf 93       	push	r28
   17c0e:	df 93       	push	r29
   17c10:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17c12:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   17c16:	90 e0       	ldi	r25, 0x00	; 0
   17c18:	0e 94 43 8d 	call	0x11a86	; 0x11a86 <AMIGO_is_MTA>
   17c1c:	89 2b       	or	r24, r25
   17c1e:	51 f0       	breq	.+20     	; 0x17c34 <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   17c20:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   17c24:	8f 35       	cpi	r24, 0x5F	; 95
   17c26:	71 f4       	brne	.+28     	; 0x17c44 <AMIGO_COMMANDS+0x38>
   17c28:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17c2c:	90 e0       	ldi	r25, 0x00	; 0
   17c2e:	0e 94 31 8d 	call	0x11a62	; 0x11a62 <AMIGO_is_MLA>
   17c32:	08 c0       	rjmp	.+16     	; 0x17c44 <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17c34:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17c38:	90 e0       	ldi	r25, 0x00	; 0
   17c3a:	0e 94 31 8d 	call	0x11a62	; 0x11a62 <AMIGO_is_MLA>
   17c3e:	89 2b       	or	r24, r25
   17c40:	79 f7       	brne	.-34     	; 0x17c20 <AMIGO_COMMANDS+0x14>
   17c42:	76 c0       	rjmp	.+236    	; 0x17d30 <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
// printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   17c44:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17c48:	81 11       	cpse	r24, r1
   17c4a:	05 c0       	rjmp	.+10     	; 0x17c56 <AMIGO_COMMANDS+0x4a>
   17c4c:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   17c50:	90 e0       	ldi	r25, 0x00	; 0
   17c52:	0e 94 43 8d 	call	0x11a86	; 0x11a86 <AMIGO_is_MTA>
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17c56:	c0 36       	cpi	r28, 0x60	; 96
   17c58:	99 f4       	brne	.+38     	; 0x17c80 <AMIGO_COMMANDS+0x74>
   17c5a:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   17c5e:	90 e0       	ldi	r25, 0x00	; 0
   17c60:	0e 94 43 8d 	call	0x11a86	; 0x11a86 <AMIGO_is_MTA>
   17c64:	89 2b       	or	r24, r25
   17c66:	19 f0       	breq	.+6      	; 0x17c6e <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   17c68:	80 e6       	ldi	r24, 0x60	; 96
   17c6a:	90 e0       	ldi	r25, 0x00	; 0
   17c6c:	14 c0       	rjmp	.+40     	; 0x17c96 <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17c6e:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17c72:	90 e0       	ldi	r25, 0x00	; 0
   17c74:	0e 94 31 8d 	call	0x11a62	; 0x11a62 <AMIGO_is_MLA>
   17c78:	89 2b       	or	r24, r25
   17c7a:	09 f4       	brne	.+2      	; 0x17c7e <AMIGO_COMMANDS+0x72>
   17c7c:	59 c0       	rjmp	.+178    	; 0x17d30 <AMIGO_COMMANDS+0x124>
   17c7e:	f4 cf       	rjmp	.-24     	; 0x17c68 <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   17c80:	c8 36       	cpi	r28, 0x68	; 104
   17c82:	c1 f4       	brne	.+48     	; 0x17cb4 <AMIGO_COMMANDS+0xa8>
   17c84:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   17c88:	90 e0       	ldi	r25, 0x00	; 0
   17c8a:	0e 94 43 8d 	call	0x11a86	; 0x11a86 <AMIGO_is_MTA>
   17c8e:	89 2b       	or	r24, r25
   17c90:	21 f0       	breq	.+8      	; 0x17c9a <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   17c92:	88 e6       	ldi	r24, 0x68	; 104
   17c94:	90 e0       	ldi	r25, 0x00	; 0
   17c96:	df de       	rcall	.-578    	; 0x17a56 <Amigo_Execute>
   17c98:	0b c0       	rjmp	.+22     	; 0x17cb0 <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
   17c9a:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17c9e:	90 e0       	ldi	r25, 0x00	; 0
   17ca0:	0e 94 31 8d 	call	0x11a62	; 0x11a62 <AMIGO_is_MLA>
   17ca4:	89 2b       	or	r24, r25
   17ca6:	09 f4       	brne	.+2      	; 0x17caa <AMIGO_COMMANDS+0x9e>
   17ca8:	43 c0       	rjmp	.+134    	; 0x17d30 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17caa:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
   17cac:	90 e0       	ldi	r25, 0x00	; 0
   17cae:	ed db       	rcall	.-2086   	; 0x1748a <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   17cb0:	ec 01       	movw	r28, r24
   17cb2:	40 c0       	rjmp	.+128    	; 0x17d34 <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) )// Single byte command
   17cb4:	c9 36       	cpi	r28, 0x69	; 105
   17cb6:	51 f4       	brne	.+20     	; 0x17ccc <AMIGO_COMMANDS+0xc0>
   17cb8:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17cbc:	90 e0       	ldi	r25, 0x00	; 0
   17cbe:	0e 94 31 8d 	call	0x11a62	; 0x11a62 <AMIGO_is_MLA>
   17cc2:	89 2b       	or	r24, r25
   17cc4:	a9 f1       	breq	.+106    	; 0x17d30 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17cc6:	89 e6       	ldi	r24, 0x69	; 105
   17cc8:	90 e0       	ldi	r25, 0x00	; 0
   17cca:	f1 cf       	rjmp	.-30     	; 0x17cae <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) )// Single byte command
   17ccc:	ca 36       	cpi	r28, 0x6A	; 106
   17cce:	51 f4       	brne	.+20     	; 0x17ce4 <AMIGO_COMMANDS+0xd8>
   17cd0:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17cd4:	90 e0       	ldi	r25, 0x00	; 0
   17cd6:	0e 94 31 8d 	call	0x11a62	; 0x11a62 <AMIGO_is_MLA>
   17cda:	89 2b       	or	r24, r25
   17cdc:	49 f1       	breq	.+82     	; 0x17d30 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17cde:	8a e6       	ldi	r24, 0x6A	; 106
   17ce0:	90 e0       	ldi	r25, 0x00	; 0
   17ce2:	e5 cf       	rjmp	.-54     	; 0x17cae <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
   17ce4:	cc 36       	cpi	r28, 0x6C	; 108
   17ce6:	51 f4       	brne	.+20     	; 0x17cfc <AMIGO_COMMANDS+0xf0>
   17ce8:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17cec:	90 e0       	ldi	r25, 0x00	; 0
   17cee:	0e 94 31 8d 	call	0x11a62	; 0x11a62 <AMIGO_is_MLA>
   17cf2:	89 2b       	or	r24, r25
   17cf4:	e9 f0       	breq	.+58     	; 0x17d30 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17cf6:	8c e6       	ldi	r24, 0x6C	; 108
   17cf8:	90 e0       	ldi	r25, 0x00	; 0
   17cfa:	d9 cf       	rjmp	.-78     	; 0x17cae <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   17cfc:	c0 37       	cpi	r28, 0x70	; 112
   17cfe:	c1 f4       	brne	.+48     	; 0x17d30 <AMIGO_COMMANDS+0x124>
   17d00:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   17d04:	90 e0       	ldi	r25, 0x00	; 0
   17d06:	0e 94 43 8d 	call	0x11a86	; 0x11a86 <AMIGO_is_MTA>
   17d0a:	ec 01       	movw	r28, r24
   17d0c:	89 2b       	or	r24, r25
   17d0e:	51 f0       	breq	.+20     	; 0x17d24 <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17d10:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   17d14:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   17d18:	81 81       	ldd	r24, Z+1	; 0x01
   17d1a:	90 e0       	ldi	r25, 0x00	; 0
   17d1c:	0e 94 01 87 	call	0x10e02	; 0x10e02 <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   17d20:	ff d9       	rcall	.-3074   	; 0x17120 <amigo_cmd_dsj>
   17d22:	c6 cf       	rjmp	.-116    	; 0x17cb0 <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   17d24:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17d28:	90 e0       	ldi	r25, 0x00	; 0
   17d2a:	0e 94 31 8d 	call	0x11a62	; 0x11a62 <AMIGO_is_MLA>
   17d2e:	02 c0       	rjmp	.+4      	; 0x17d34 <AMIGO_COMMANDS+0x128>
        {
// NOP
        }
    }
    return(0);
   17d30:	c0 e0       	ldi	r28, 0x00	; 0
   17d32:	d0 e0       	ldi	r29, 0x00	; 0
}
   17d34:	ce 01       	movw	r24, r28
   17d36:	df 91       	pop	r29
   17d38:	cf 91       	pop	r28
   17d3a:	08 95       	ret

00017d3c <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   17d3c:	e3 e9       	ldi	r30, 0x93	; 147
   17d3e:	f9 e1       	ldi	r31, 0x19	; 25
   17d40:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   17d42:	10 82       	st	Z, r1
   17d44:	11 82       	std	Z+1, r1	; 0x01
   17d46:	12 82       	std	Z+2, r1	; 0x02
   17d48:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   17d4a:	15 82       	std	Z+5, r1	; 0x05
   17d4c:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   17d4e:	12 86       	std	Z+10, r1	; 0x0a
   17d50:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   17d52:	14 86       	std	Z+12, r1	; 0x0c
   17d54:	13 86       	std	Z+11, r1	; 0x0b
   17d56:	08 95       	ret

00017d58 <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   17d58:	cf 93       	push	r28
   17d5a:	df 93       	push	r29
   17d5c:	ad b7       	in	r26, 0x3d	; 61
   17d5e:	be b7       	in	r27, 0x3e	; 62
   17d60:	17 97       	sbiw	r26, 0x07	; 7
   17d62:	0f b6       	in	r0, 0x3f	; 63
   17d64:	f8 94       	cli
   17d66:	be bf       	out	0x3e, r27	; 62
   17d68:	0f be       	out	0x3f, r0	; 63
   17d6a:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   17d6c:	20 91 9c 19 	lds	r18, 0x199C	; 0x80199c <plot+0x9>
   17d70:	30 91 9d 19 	lds	r19, 0x199D	; 0x80199d <plot+0xa>
   17d74:	21 15       	cp	r18, r1
   17d76:	31 05       	cpc	r19, r1
   17d78:	09 f4       	brne	.+2      	; 0x17d7c <receive_plot_flush+0x24>
   17d7a:	45 c0       	rjmp	.+138    	; 0x17e06 <receive_plot_flush+0xae>
   17d7c:	80 91 97 19 	lds	r24, 0x1997	; 0x801997 <plot+0x4>
   17d80:	90 91 98 19 	lds	r25, 0x1998	; 0x801998 <plot+0x5>
   17d84:	00 97       	sbiw	r24, 0x00	; 0
   17d86:	09 f4       	brne	.+2      	; 0x17d8a <receive_plot_flush+0x32>
   17d88:	40 c0       	rjmp	.+128    	; 0x17e0a <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   17d8a:	ac 01       	movw	r20, r24
   17d8c:	61 e0       	ldi	r22, 0x01	; 1
   17d8e:	70 e0       	ldi	r23, 0x00	; 0
   17d90:	80 91 9e 19 	lds	r24, 0x199E	; 0x80199e <plot+0xb>
   17d94:	90 91 9f 19 	lds	r25, 0x199F	; 0x80199f <plot+0xc>
   17d98:	0e 94 f1 7c 	call	0xf9e2	; 0xf9e2 <fwrite>
   17d9c:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   17d9e:	80 91 97 19 	lds	r24, 0x1997	; 0x801997 <plot+0x4>
   17da2:	90 91 98 19 	lds	r25, 0x1998	; 0x801998 <plot+0x5>
   17da6:	c8 17       	cp	r28, r24
   17da8:	d9 07       	cpc	r29, r25
   17daa:	09 f1       	breq	.+66     	; 0x17dee <receive_plot_flush+0x96>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17dac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17db0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17db4:	81 72       	andi	r24, 0x21	; 33
   17db6:	99 27       	eor	r25, r25
   17db8:	89 2b       	or	r24, r25
   17dba:	b1 f0       	breq	.+44     	; 0x17de8 <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   17dbc:	8a ec       	ldi	r24, 0xCA	; 202
   17dbe:	95 e1       	ldi	r25, 0x15	; 21
   17dc0:	0e 94 fa 78 	call	0xf1f4	; 0xf1f4 <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   17dc4:	ed b7       	in	r30, 0x3d	; 61
   17dc6:	fe b7       	in	r31, 0x3e	; 62
   17dc8:	d7 83       	std	Z+7, r29	; 0x07
   17dca:	c6 83       	std	Z+6, r28	; 0x06
   17dcc:	80 91 97 19 	lds	r24, 0x1997	; 0x801997 <plot+0x4>
   17dd0:	90 91 98 19 	lds	r25, 0x1998	; 0x801998 <plot+0x5>
   17dd4:	95 83       	std	Z+5, r25	; 0x05
   17dd6:	84 83       	std	Z+4, r24	; 0x04
   17dd8:	86 e6       	ldi	r24, 0x66	; 102
   17dda:	91 e3       	ldi	r25, 0x31	; 49
   17ddc:	a0 e0       	ldi	r26, 0x00	; 0
   17dde:	81 83       	std	Z+1, r24	; 0x01
   17de0:	92 83       	std	Z+2, r25	; 0x02
   17de2:	a3 83       	std	Z+3, r26	; 0x03
   17de4:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        }
        return(-1);
   17de8:	8f ef       	ldi	r24, 0xFF	; 255
   17dea:	9f ef       	ldi	r25, 0xFF	; 255
   17dec:	0e c0       	rjmp	.+28     	; 0x17e0a <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   17dee:	80 91 9c 19 	lds	r24, 0x199C	; 0x80199c <plot+0x9>
   17df2:	90 91 9d 19 	lds	r25, 0x199D	; 0x80199d <plot+0xa>
   17df6:	0e 94 44 77 	call	0xee88	; 0xee88 <fileno>
    if(fno < 0)
   17dfa:	97 fd       	sbrc	r25, 7
   17dfc:	f5 cf       	rjmp	.-22     	; 0x17de8 <receive_plot_flush+0x90>
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
   17dfe:	0e 94 3b 7c 	call	0xf876	; 0xf876 <syncfs>
    return (ret);
   17e02:	ce 01       	movw	r24, r28
   17e04:	02 c0       	rjmp	.+4      	; 0x17e0a <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   17e06:	80 e0       	ldi	r24, 0x00	; 0
   17e08:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
    return (ret);
}
   17e0a:	cd b7       	in	r28, 0x3d	; 61
   17e0c:	de b7       	in	r29, 0x3e	; 62
   17e0e:	27 96       	adiw	r28, 0x07	; 7
   17e10:	e2 e0       	ldi	r30, 0x02	; 2
   17e12:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00017e16 <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   17e16:	ad b7       	in	r26, 0x3d	; 61
   17e18:	be b7       	in	r27, 0x3e	; 62
   17e1a:	17 97       	sbiw	r26, 0x07	; 7
   17e1c:	0f b6       	in	r0, 0x3f	; 63
   17e1e:	f8 94       	cli
   17e20:	be bf       	out	0x3e, r27	; 62
   17e22:	0f be       	out	0x3f, r0	; 63
   17e24:	ad bf       	out	0x3d, r26	; 61
    if( receive_plot_flush() < 0 )
   17e26:	98 df       	rcall	.-208    	; 0x17d58 <receive_plot_flush>
   17e28:	97 ff       	sbrs	r25, 7
   17e2a:	03 c0       	rjmp	.+6      	; 0x17e32 <printer_close+0x1c>
        plot.error = 1;
   17e2c:	81 e0       	ldi	r24, 0x01	; 1
   17e2e:	80 93 9b 19 	sts	0x199B, r24	; 0x80199b <plot+0x8>

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17e32:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17e36:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17e3a:	81 72       	andi	r24, 0x21	; 33
   17e3c:	99 27       	eor	r25, r25
   17e3e:	89 2b       	or	r24, r25
   17e40:	71 f0       	breq	.+28     	; 0x17e5e <printer_close+0x48>
    {
        if(plot.error)
   17e42:	80 91 9b 19 	lds	r24, 0x199B	; 0x80199b <plot+0x8>
   17e46:	88 23       	and	r24, r24
   17e48:	51 f0       	breq	.+20     	; 0x17e5e <printer_close+0x48>
            printf("ERROR durring write\n");
   17e4a:	85 e9       	ldi	r24, 0x95	; 149
   17e4c:	91 e3       	ldi	r25, 0x31	; 49
   17e4e:	a0 e0       	ldi	r26, 0x00	; 0
   17e50:	ed b7       	in	r30, 0x3d	; 61
   17e52:	fe b7       	in	r31, 0x3e	; 62
   17e54:	81 83       	std	Z+1, r24	; 0x01
   17e56:	92 83       	std	Z+2, r25	; 0x02
   17e58:	a3 83       	std	Z+3, r26	; 0x03
   17e5a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    }

    if(plot.fp)
   17e5e:	80 91 9c 19 	lds	r24, 0x199C	; 0x80199c <plot+0x9>
   17e62:	90 91 9d 19 	lds	r25, 0x199D	; 0x80199d <plot+0xa>
   17e66:	00 97       	sbiw	r24, 0x00	; 0
   17e68:	e1 f0       	breq	.+56     	; 0x17ea2 <printer_close+0x8c>
    {
        fclose(plot.fp);
   17e6a:	0e 94 73 7d 	call	0xfae6	; 0xfae6 <fclose>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17e6e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17e72:	85 ff       	sbrs	r24, 5
   17e74:	16 c0       	rjmp	.+44     	; 0x17ea2 <printer_close+0x8c>
            printf("\nDONE: %08ld\n",plot.count);
   17e76:	80 91 93 19 	lds	r24, 0x1993	; 0x801993 <plot>
   17e7a:	90 91 94 19 	lds	r25, 0x1994	; 0x801994 <plot+0x1>
   17e7e:	a0 91 95 19 	lds	r26, 0x1995	; 0x801995 <plot+0x2>
   17e82:	b0 91 96 19 	lds	r27, 0x1996	; 0x801996 <plot+0x3>
   17e86:	ed b7       	in	r30, 0x3d	; 61
   17e88:	fe b7       	in	r31, 0x3e	; 62
   17e8a:	84 83       	std	Z+4, r24	; 0x04
   17e8c:	95 83       	std	Z+5, r25	; 0x05
   17e8e:	a6 83       	std	Z+6, r26	; 0x06
   17e90:	b7 83       	std	Z+7, r27	; 0x07
   17e92:	87 e8       	ldi	r24, 0x87	; 135
   17e94:	91 e3       	ldi	r25, 0x31	; 49
   17e96:	a0 e0       	ldi	r26, 0x00	; 0
   17e98:	81 83       	std	Z+1, r24	; 0x01
   17e9a:	92 83       	std	Z+2, r25	; 0x02
   17e9c:	a3 83       	std	Z+3, r26	; 0x03
   17e9e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    }

    if(plot.buf)
   17ea2:	80 91 9e 19 	lds	r24, 0x199E	; 0x80199e <plot+0xb>
   17ea6:	90 91 9f 19 	lds	r25, 0x199F	; 0x80199f <plot+0xc>
   17eaa:	00 97       	sbiw	r24, 0x00	; 0
   17eac:	11 f0       	breq	.+4      	; 0x17eb2 <printer_close+0x9c>
        safefree(plot.buf);
   17eae:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <safefree>
    printer_init();
   17eb2:	44 df       	rcall	.-376    	; 0x17d3c <printer_init>
}
   17eb4:	ad b7       	in	r26, 0x3d	; 61
   17eb6:	be b7       	in	r27, 0x3e	; 62
   17eb8:	17 96       	adiw	r26, 0x07	; 7
   17eba:	0f b6       	in	r0, 0x3f	; 63
   17ebc:	f8 94       	cli
   17ebe:	be bf       	out	0x3e, r27	; 62
   17ec0:	0f be       	out	0x3f, r0	; 63
   17ec2:	ad bf       	out	0x3d, r26	; 61
   17ec4:	08 95       	ret

00017ec6 <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   17ec6:	ad e5       	ldi	r26, 0x5D	; 93
   17ec8:	b0 e0       	ldi	r27, 0x00	; 0
   17eca:	e9 e6       	ldi	r30, 0x69	; 105
   17ecc:	ff eb       	ldi	r31, 0xBF	; 191
   17ece:	0c 94 9f e7 	jmp	0x1cf3e	; 0x1cf3e <__prologue_saves__+0x18>
   17ed2:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   17ed4:	89 2b       	or	r24, r25
   17ed6:	09 f0       	breq	.+2      	; 0x17eda <printer_open+0x14>
   17ed8:	4f c0       	rjmp	.+158    	; 0x17f78 <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   17eda:	be 01       	movw	r22, r28
   17edc:	6e 5a       	subi	r22, 0xAE	; 174
   17ede:	7f 4f       	sbci	r23, 0xFF	; 255
   17ee0:	80 e0       	ldi	r24, 0x00	; 0
   17ee2:	90 e0       	ldi	r25, 0x00	; 0
   17ee4:	0e 94 2f 34 	call	0x685e	; 0x685e <clock_gettime>
        seconds = ts.tv_sec;
   17ee8:	66 96       	adiw	r28, 0x16	; 22
   17eea:	8c ad       	ldd	r24, Y+60	; 0x3c
   17eec:	9d ad       	ldd	r25, Y+61	; 0x3d
   17eee:	ae ad       	ldd	r26, Y+62	; 0x3e
   17ef0:	bf ad       	ldd	r27, Y+63	; 0x3f
   17ef2:	66 97       	sbiw	r28, 0x16	; 22
   17ef4:	6e 96       	adiw	r28, 0x1e	; 30
   17ef6:	8c af       	std	Y+60, r24	; 0x3c
   17ef8:	9d af       	std	Y+61, r25	; 0x3d
   17efa:	ae af       	std	Y+62, r26	; 0x3e
   17efc:	bf af       	std	Y+63, r27	; 0x3f
   17efe:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   17f00:	ce 01       	movw	r24, r28
   17f02:	86 5a       	subi	r24, 0xA6	; 166
   17f04:	9f 4f       	sbci	r25, 0xFF	; 255
   17f06:	0e 94 19 38 	call	0x7032	; 0x7032 <gmtime>
   17f0a:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   17f0c:	fc 01       	movw	r30, r24
   17f0e:	e6 80       	ldd	r14, Z+6	; 0x06
   17f10:	f7 80       	ldd	r15, Z+7	; 0x07
   17f12:	80 85       	ldd	r24, Z+8	; 0x08
   17f14:	91 85       	ldd	r25, Z+9	; 0x09
   17f16:	0e 94 f5 36 	call	0x6dea	; 0x6dea <tm_mon_to_ascii>
   17f1a:	f8 01       	movw	r30, r16
   17f1c:	20 81       	ld	r18, Z
   17f1e:	31 81       	ldd	r19, Z+1	; 0x01
   17f20:	ed b7       	in	r30, 0x3d	; 61
   17f22:	fe b7       	in	r31, 0x3e	; 62
   17f24:	31 8b       	std	Z+17, r19	; 0x11
   17f26:	20 8b       	std	Z+16, r18	; 0x10
   17f28:	f8 01       	movw	r30, r16
   17f2a:	22 81       	ldd	r18, Z+2	; 0x02
   17f2c:	33 81       	ldd	r19, Z+3	; 0x03
   17f2e:	ed b7       	in	r30, 0x3d	; 61
   17f30:	fe b7       	in	r31, 0x3e	; 62
   17f32:	37 87       	std	Z+15, r19	; 0x0f
   17f34:	26 87       	std	Z+14, r18	; 0x0e
   17f36:	f8 01       	movw	r30, r16
   17f38:	24 81       	ldd	r18, Z+4	; 0x04
   17f3a:	35 81       	ldd	r19, Z+5	; 0x05
   17f3c:	ed b7       	in	r30, 0x3d	; 61
   17f3e:	fe b7       	in	r31, 0x3e	; 62
   17f40:	35 87       	std	Z+13, r19	; 0x0d
   17f42:	24 87       	std	Z+12, r18	; 0x0c
   17f44:	f8 01       	movw	r30, r16
   17f46:	22 85       	ldd	r18, Z+10	; 0x0a
   17f48:	33 85       	ldd	r19, Z+11	; 0x0b
   17f4a:	24 59       	subi	r18, 0x94	; 148
   17f4c:	38 4f       	sbci	r19, 0xF8	; 248
   17f4e:	ed b7       	in	r30, 0x3d	; 61
   17f50:	fe b7       	in	r31, 0x3e	; 62
   17f52:	33 87       	std	Z+11, r19	; 0x0b
   17f54:	22 87       	std	Z+10, r18	; 0x0a
   17f56:	91 87       	std	Z+9, r25	; 0x09
   17f58:	80 87       	std	Z+8, r24	; 0x08
   17f5a:	f7 82       	std	Z+7, r15	; 0x07
   17f5c:	e6 82       	std	Z+6, r14	; 0x06
   17f5e:	8c ec       	ldi	r24, 0xCC	; 204
   17f60:	91 e3       	ldi	r25, 0x31	; 49
   17f62:	a0 e0       	ldi	r26, 0x00	; 0
   17f64:	83 83       	std	Z+3, r24	; 0x03
   17f66:	94 83       	std	Z+4, r25	; 0x04
   17f68:	a5 83       	std	Z+5, r26	; 0x05
   17f6a:	8e 01       	movw	r16, r28
   17f6c:	0e 5e       	subi	r16, 0xEE	; 238
   17f6e:	1f 4f       	sbci	r17, 0xFF	; 255
   17f70:	12 83       	std	Z+2, r17	; 0x02
   17f72:	01 83       	std	Z+1, r16	; 0x01
   17f74:	0e 94 5d 47 	call	0x8eba	; 0x8eba <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17f78:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17f7c:	85 ff       	sbrs	r24, 5
   17f7e:	0c c0       	rjmp	.+24     	; 0x17f98 <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   17f80:	ed b7       	in	r30, 0x3d	; 61
   17f82:	fe b7       	in	r31, 0x3e	; 62
   17f84:	15 83       	std	Z+5, r17	; 0x05
   17f86:	04 83       	std	Z+4, r16	; 0x04
   17f88:	86 eb       	ldi	r24, 0xB6	; 182
   17f8a:	91 e3       	ldi	r25, 0x31	; 49
   17f8c:	a0 e0       	ldi	r26, 0x00	; 0
   17f8e:	81 83       	std	Z+1, r24	; 0x01
   17f90:	92 83       	std	Z+2, r25	; 0x02
   17f92:	a3 83       	std	Z+3, r26	; 0x03
   17f94:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

    plot.fp = fopen(ptr,"wb");
   17f98:	6a ef       	ldi	r22, 0xFA	; 250
   17f9a:	78 e0       	ldi	r23, 0x08	; 8
   17f9c:	c8 01       	movw	r24, r16
   17f9e:	0e 94 c9 7e 	call	0xfd92	; 0xfd92 <fopen>
   17fa2:	90 93 9d 19 	sts	0x199D, r25	; 0x80199d <plot+0xa>
   17fa6:	80 93 9c 19 	sts	0x199C, r24	; 0x80199c <plot+0x9>
    if(plot.fp == NULL)
   17faa:	89 2b       	or	r24, r25
   17fac:	b9 f4       	brne	.+46     	; 0x17fdc <printer_open+0x116>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17fae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17fb2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17fb6:	81 72       	andi	r24, 0x21	; 33
   17fb8:	99 27       	eor	r25, r25
   17fba:	89 2b       	or	r24, r25
   17fbc:	11 f1       	breq	.+68     	; 0x18002 <printer_open+0x13c>
        {
            perror("open failed");
   17fbe:	88 e8       	ldi	r24, 0x88	; 136
   17fc0:	9d e0       	ldi	r25, 0x0D	; 13
   17fc2:	0e 94 fa 78 	call	0xf1f4	; 0xf1f4 <perror>
            printf("exiting...\n");
   17fc6:	8a ea       	ldi	r24, 0xAA	; 170
   17fc8:	91 e3       	ldi	r25, 0x31	; 49
   17fca:	a0 e0       	ldi	r26, 0x00	; 0
   17fcc:	ed b7       	in	r30, 0x3d	; 61
   17fce:	fe b7       	in	r31, 0x3e	; 62
   17fd0:	81 83       	std	Z+1, r24	; 0x01
   17fd2:	92 83       	std	Z+2, r25	; 0x02
   17fd4:	a3 83       	std	Z+3, r26	; 0x03
   17fd6:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   17fda:	13 c0       	rjmp	.+38     	; 0x18002 <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   17fdc:	61 e0       	ldi	r22, 0x01	; 1
   17fde:	70 e0       	ldi	r23, 0x00	; 0
   17fe0:	81 e0       	ldi	r24, 0x01	; 1
   17fe2:	92 e0       	ldi	r25, 0x02	; 2
   17fe4:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safecalloc>
   17fe8:	90 93 9f 19 	sts	0x199F, r25	; 0x80199f <plot+0xc>
   17fec:	80 93 9e 19 	sts	0x199E, r24	; 0x80199e <plot+0xb>
    if(plot.buf == NULL)
   17ff0:	89 2b       	or	r24, r25
   17ff2:	09 f4       	brne	.+2      	; 0x17ff6 <printer_open+0x130>
        printer_close();
   17ff4:	10 df       	rcall	.-480    	; 0x17e16 <printer_close>
    plot.size = 512;
   17ff6:	80 e0       	ldi	r24, 0x00	; 0
   17ff8:	92 e0       	ldi	r25, 0x02	; 2
   17ffa:	90 93 9a 19 	sts	0x199A, r25	; 0x80199a <plot+0x7>
   17ffe:	80 93 99 19 	sts	0x1999, r24	; 0x801999 <plot+0x6>
}
   18002:	c3 5a       	subi	r28, 0xA3	; 163
   18004:	df 4f       	sbci	r29, 0xFF	; 255
   18006:	e6 e0       	ldi	r30, 0x06	; 6
   18008:	0c 94 bb e7 	jmp	0x1cf76	; 0x1cf76 <__epilogue_restores__+0x18>

0001800c <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   1800c:	cf 93       	push	r28
   1800e:	df 93       	push	r29
   18010:	ad b7       	in	r26, 0x3d	; 61
   18012:	be b7       	in	r27, 0x3e	; 62
   18014:	17 97       	sbiw	r26, 0x07	; 7
   18016:	0f b6       	in	r0, 0x3f	; 63
   18018:	f8 94       	cli
   1801a:	be bf       	out	0x3e, r27	; 62
   1801c:	0f be       	out	0x3f, r0	; 63
   1801e:	ad bf       	out	0x3d, r26	; 61
   18020:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   18022:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18026:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1802a:	81 72       	andi	r24, 0x21	; 33
   1802c:	99 27       	eor	r25, r25
   1802e:	89 2b       	or	r24, r25
   18030:	c1 f0       	breq	.+48     	; 0x18062 <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   18032:	80 91 93 19 	lds	r24, 0x1993	; 0x801993 <plot>
   18036:	30 91 94 19 	lds	r19, 0x1994	; 0x801994 <plot+0x1>
   1803a:	20 91 95 19 	lds	r18, 0x1995	; 0x801995 <plot+0x2>
   1803e:	90 91 96 19 	lds	r25, 0x1996	; 0x801996 <plot+0x3>
   18042:	81 11       	cpse	r24, r1
   18044:	0e c0       	rjmp	.+28     	; 0x18062 <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   18046:	ed b7       	in	r30, 0x3d	; 61
   18048:	fe b7       	in	r31, 0x3e	; 62
   1804a:	84 83       	std	Z+4, r24	; 0x04
   1804c:	35 83       	std	Z+5, r19	; 0x05
   1804e:	26 83       	std	Z+6, r18	; 0x06
   18050:	97 83       	std	Z+7, r25	; 0x07
   18052:	8f e5       	ldi	r24, 0x5F	; 95
   18054:	91 e3       	ldi	r25, 0x31	; 49
   18056:	a0 e0       	ldi	r26, 0x00	; 0
   18058:	81 83       	std	Z+1, r24	; 0x01
   1805a:	92 83       	std	Z+2, r25	; 0x02
   1805c:	a3 83       	std	Z+3, r26	; 0x03
   1805e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   18062:	ce 01       	movw	r24, r28
   18064:	88 27       	eor	r24, r24
   18066:	97 7f       	andi	r25, 0xF7	; 247
   18068:	89 2b       	or	r24, r25
   1806a:	41 f0       	breq	.+16     	; 0x1807c <printer_buffer+0x70>
    {
        if( receive_plot_flush() )
   1806c:	75 de       	rcall	.-790    	; 0x17d58 <receive_plot_flush>
   1806e:	89 2b       	or	r24, r25
   18070:	09 f4       	brne	.+2      	; 0x18074 <printer_buffer+0x68>
   18072:	3f c0       	rjmp	.+126    	; 0x180f2 <printer_buffer+0xe6>
            plot.error = 1;
   18074:	81 e0       	ldi	r24, 0x01	; 1
   18076:	80 93 9b 19 	sts	0x199B, r24	; 0x80199b <plot+0x8>
   1807a:	3b c0       	rjmp	.+118    	; 0x180f2 <printer_buffer+0xe6>
//plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   1807c:	20 91 9e 19 	lds	r18, 0x199E	; 0x80199e <plot+0xb>
   18080:	30 91 9f 19 	lds	r19, 0x199F	; 0x80199f <plot+0xc>
   18084:	80 91 97 19 	lds	r24, 0x1997	; 0x801997 <plot+0x4>
   18088:	90 91 98 19 	lds	r25, 0x1998	; 0x801998 <plot+0x5>
   1808c:	ac 01       	movw	r20, r24
   1808e:	4f 5f       	subi	r20, 0xFF	; 255
   18090:	5f 4f       	sbci	r21, 0xFF	; 255
   18092:	50 93 98 19 	sts	0x1998, r21	; 0x801998 <plot+0x5>
   18096:	40 93 97 19 	sts	0x1997, r20	; 0x801997 <plot+0x4>
   1809a:	f9 01       	movw	r30, r18
   1809c:	e8 0f       	add	r30, r24
   1809e:	f9 1f       	adc	r31, r25
   180a0:	c0 83       	st	Z, r28
        plot.count++;
   180a2:	80 91 93 19 	lds	r24, 0x1993	; 0x801993 <plot>
   180a6:	90 91 94 19 	lds	r25, 0x1994	; 0x801994 <plot+0x1>
   180aa:	a0 91 95 19 	lds	r26, 0x1995	; 0x801995 <plot+0x2>
   180ae:	b0 91 96 19 	lds	r27, 0x1996	; 0x801996 <plot+0x3>
   180b2:	01 96       	adiw	r24, 0x01	; 1
   180b4:	a1 1d       	adc	r26, r1
   180b6:	b1 1d       	adc	r27, r1
   180b8:	80 93 93 19 	sts	0x1993, r24	; 0x801993 <plot>
   180bc:	90 93 94 19 	sts	0x1994, r25	; 0x801994 <plot+0x1>
   180c0:	a0 93 95 19 	sts	0x1995, r26	; 0x801995 <plot+0x2>
   180c4:	b0 93 96 19 	sts	0x1996, r27	; 0x801996 <plot+0x3>

        if(plot.ind >= plot.size)
   180c8:	20 91 97 19 	lds	r18, 0x1997	; 0x801997 <plot+0x4>
   180cc:	30 91 98 19 	lds	r19, 0x1998	; 0x801998 <plot+0x5>
   180d0:	80 91 99 19 	lds	r24, 0x1999	; 0x801999 <plot+0x6>
   180d4:	90 91 9a 19 	lds	r25, 0x199A	; 0x80199a <plot+0x7>
   180d8:	28 17       	cp	r18, r24
   180da:	39 07       	cpc	r19, r25
        {
            if( receive_plot_flush() < 0 )
   180dc:	54 f0       	brlt	.+20     	; 0x180f2 <printer_buffer+0xe6>
   180de:	3c de       	rcall	.-904    	; 0x17d58 <receive_plot_flush>
   180e0:	97 ff       	sbrs	r25, 7
   180e2:	03 c0       	rjmp	.+6      	; 0x180ea <printer_buffer+0xde>
                plot.error = 1;
   180e4:	81 e0       	ldi	r24, 0x01	; 1
   180e6:	80 93 9b 19 	sts	0x199B, r24	; 0x80199b <plot+0x8>
            plot.ind  = 0;
   180ea:	10 92 98 19 	sts	0x1998, r1	; 0x801998 <plot+0x5>
   180ee:	10 92 97 19 	sts	0x1997, r1	; 0x801997 <plot+0x4>
        }
    }
}
   180f2:	cd b7       	in	r28, 0x3d	; 61
   180f4:	de b7       	in	r29, 0x3e	; 62
   180f6:	27 96       	adiw	r28, 0x07	; 7
   180f8:	e2 e0       	ldi	r30, 0x02	; 2
   180fa:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

000180fe <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   180fe:	cf 93       	push	r28
   18100:	00 d0       	rcall	.+0      	; 0x18102 <PRINTER_COMMANDS+0x4>
   18102:	00 d0       	rcall	.+0      	; 0x18104 <PRINTER_COMMANDS+0x6>
   18104:	1f 92       	push	r1
   18106:	c8 2f       	mov	r28, r24

// We could, for example, use secondaries to set file names, etc
// We don not use them yet
    if(PRINTER_is_MLA(listening))
   18108:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   1810c:	90 e0       	ldi	r25, 0x00	; 0
   1810e:	0e 94 67 8d 	call	0x11ace	; 0x11ace <PRINTER_is_MLA>
   18112:	89 2b       	or	r24, r25
   18114:	69 f0       	breq	.+26     	; 0x18130 <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   18116:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1811a:	85 ff       	sbrs	r24, 5
   1811c:	22 c0       	rjmp	.+68     	; 0x18162 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   1811e:	8c 2f       	mov	r24, r28
   18120:	90 e0       	ldi	r25, 0x00	; 0
   18122:	ed b7       	in	r30, 0x3d	; 61
   18124:	fe b7       	in	r31, 0x3e	; 62
   18126:	95 83       	std	Z+5, r25	; 0x05
   18128:	84 83       	std	Z+4, r24	; 0x04
   1812a:	83 e4       	ldi	r24, 0x43	; 67
   1812c:	91 e3       	ldi	r25, 0x31	; 49
   1812e:	13 c0       	rjmp	.+38     	; 0x18156 <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   18130:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   18134:	90 e0       	ldi	r25, 0x00	; 0
   18136:	0e 94 79 8d 	call	0x11af2	; 0x11af2 <PRINTER_is_MTA>
   1813a:	89 2b       	or	r24, r25
   1813c:	91 f0       	breq	.+36     	; 0x18162 <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1813e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18142:	85 ff       	sbrs	r24, 5
   18144:	0e c0       	rjmp	.+28     	; 0x18162 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   18146:	8c 2f       	mov	r24, r28
   18148:	90 e0       	ldi	r25, 0x00	; 0
   1814a:	ed b7       	in	r30, 0x3d	; 61
   1814c:	fe b7       	in	r31, 0x3e	; 62
   1814e:	95 83       	std	Z+5, r25	; 0x05
   18150:	84 83       	std	Z+4, r24	; 0x04
   18152:	89 e2       	ldi	r24, 0x29	; 41
   18154:	91 e3       	ldi	r25, 0x31	; 49
   18156:	a0 e0       	ldi	r26, 0x00	; 0
   18158:	81 83       	std	Z+1, r24	; 0x01
   1815a:	92 83       	std	Z+2, r25	; 0x02
   1815c:	a3 83       	std	Z+3, r26	; 0x03
   1815e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
        return(0);
    }
    return(0);
}
   18162:	80 e0       	ldi	r24, 0x00	; 0
   18164:	90 e0       	ldi	r25, 0x00	; 0
   18166:	0f 90       	pop	r0
   18168:	0f 90       	pop	r0
   1816a:	0f 90       	pop	r0
   1816c:	0f 90       	pop	r0
   1816e:	0f 90       	pop	r0
   18170:	cf 91       	pop	r28
   18172:	08 95       	ret

00018174 <V2B_MSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_MSB(uint8_t *B, int index, int size, uint32_t val)
{
   18174:	0f 93       	push	r16
   18176:	1f 93       	push	r17
   18178:	da 01       	movw	r26, r20
   1817a:	11 97       	sbiw	r26, 0x01	; 1
    int i;
    for(i=size-1;i>=0;--i)
   1817c:	b7 fd       	sbrc	r27, 7
   1817e:	0b c0       	rjmp	.+22     	; 0x18196 <V2B_MSB+0x22>
    {
        B[index+i] = val & 0xff;
   18180:	fd 01       	movw	r30, r26
   18182:	e6 0f       	add	r30, r22
   18184:	f7 1f       	adc	r31, r23
   18186:	e8 0f       	add	r30, r24
   18188:	f9 1f       	adc	r31, r25
   1818a:	00 83       	st	Z, r16
        val >>= 8;
   1818c:	01 2f       	mov	r16, r17
   1818e:	12 2f       	mov	r17, r18
   18190:	23 2f       	mov	r18, r19
   18192:	33 27       	eor	r19, r19
   18194:	f2 cf       	rjmp	.-28     	; 0x1817a <V2B_MSB+0x6>
    }
}
   18196:	1f 91       	pop	r17
   18198:	0f 91       	pop	r16
   1819a:	08 95       	ret

0001819c <V2B_LSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_LSB(uint8_t *B, int index, int size, uint32_t val)
{
   1819c:	0f 93       	push	r16
   1819e:	1f 93       	push	r17
   181a0:	fc 01       	movw	r30, r24
   181a2:	e6 0f       	add	r30, r22
   181a4:	f7 1f       	adc	r31, r23
   181a6:	bf 01       	movw	r22, r30
    int i;
    for(i=0;i<size;++i)
   181a8:	cf 01       	movw	r24, r30
   181aa:	86 1b       	sub	r24, r22
   181ac:	97 0b       	sbc	r25, r23
   181ae:	84 17       	cp	r24, r20
   181b0:	95 07       	cpc	r25, r21
   181b2:	34 f4       	brge	.+12     	; 0x181c0 <V2B_LSB+0x24>
    {
        B[index+i] = val & 0xff;
   181b4:	01 93       	st	Z+, r16
        val >>= 8;
   181b6:	01 2f       	mov	r16, r17
   181b8:	12 2f       	mov	r17, r18
   181ba:	23 2f       	mov	r18, r19
   181bc:	33 27       	eor	r19, r19
   181be:	f4 cf       	rjmp	.-24     	; 0x181a8 <V2B_LSB+0xc>
    }
}
   181c0:	1f 91       	pop	r17
   181c2:	0f 91       	pop	r16
   181c4:	08 95       	ret

000181c6 <B2V_MSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_MSB(uint8_t *B, int index, int size)
{
   181c6:	cf 92       	push	r12
   181c8:	df 92       	push	r13
   181ca:	ef 92       	push	r14
   181cc:	ff 92       	push	r15
   181ce:	fc 01       	movw	r30, r24
   181d0:	e6 0f       	add	r30, r22
   181d2:	f7 1f       	adc	r31, r23
    int i;
    uint32_t val = 0;
   181d4:	60 e0       	ldi	r22, 0x00	; 0
   181d6:	70 e0       	ldi	r23, 0x00	; 0
   181d8:	cb 01       	movw	r24, r22
   181da:	df 01       	movw	r26, r30

    for(i=0;i<size;++i)
   181dc:	9f 01       	movw	r18, r30
   181de:	2a 1b       	sub	r18, r26
   181e0:	3b 0b       	sbc	r19, r27
   181e2:	24 17       	cp	r18, r20
   181e4:	35 07       	cpc	r19, r21
   181e6:	4c f4       	brge	.+18     	; 0x181fa <B2V_MSB+0x34>
    {
        val <<= 8;
   181e8:	cc 24       	eor	r12, r12
   181ea:	d6 2e       	mov	r13, r22
   181ec:	e7 2e       	mov	r14, r23
   181ee:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   181f0:	21 91       	ld	r18, Z+
   181f2:	c7 01       	movw	r24, r14
   181f4:	b6 01       	movw	r22, r12
   181f6:	62 2b       	or	r22, r18
   181f8:	f1 cf       	rjmp	.-30     	; 0x181dc <B2V_MSB+0x16>
    }
    return(val);
}
   181fa:	ff 90       	pop	r15
   181fc:	ef 90       	pop	r14
   181fe:	df 90       	pop	r13
   18200:	cf 90       	pop	r12
   18202:	08 95       	ret

00018204 <B2V_LSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_LSB(uint8_t *B, int index, int size)
{
   18204:	cf 92       	push	r12
   18206:	df 92       	push	r13
   18208:	ef 92       	push	r14
   1820a:	ff 92       	push	r15
   1820c:	9c 01       	movw	r18, r24
   1820e:	db 01       	movw	r26, r22
    int i;
    uint32_t val = 0;
   18210:	60 e0       	ldi	r22, 0x00	; 0
   18212:	70 e0       	ldi	r23, 0x00	; 0
   18214:	cb 01       	movw	r24, r22
   18216:	41 50       	subi	r20, 0x01	; 1
   18218:	51 09       	sbc	r21, r1

    for(i=size-1;i>=0;--i)
   1821a:	57 fd       	sbrc	r21, 7
   1821c:	0e c0       	rjmp	.+28     	; 0x1823a <B2V_LSB+0x36>
    {
        val <<= 8;
   1821e:	cc 24       	eor	r12, r12
   18220:	d6 2e       	mov	r13, r22
   18222:	e7 2e       	mov	r14, r23
   18224:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   18226:	fa 01       	movw	r30, r20
   18228:	ea 0f       	add	r30, r26
   1822a:	fb 1f       	adc	r31, r27
   1822c:	e2 0f       	add	r30, r18
   1822e:	f3 1f       	adc	r31, r19
   18230:	e0 81       	ld	r30, Z
   18232:	c7 01       	movw	r24, r14
   18234:	b6 01       	movw	r22, r12
   18236:	6e 2b       	or	r22, r30
   18238:	ee cf       	rjmp	.-36     	; 0x18216 <B2V_LSB+0x12>
    }
    return(val);
}
   1823a:	ff 90       	pop	r15
   1823c:	ef 90       	pop	r14
   1823e:	df 90       	pop	r13
   18240:	cf 90       	pop	r12
   18242:	08 95       	ret

00018244 <lif_help>:
            return( (lifdir_t *) &LIF->DIR );

// Skip purged records
    }
    return( NULL );
}
   18244:	cf 93       	push	r28
   18246:	df 93       	push	r29
   18248:	00 d0       	rcall	.+0      	; 0x1824a <lif_help+0x6>
   1824a:	1f 92       	push	r1
   1824c:	ec 01       	movw	r28, r24
   1824e:	84 e2       	ldi	r24, 0x24	; 36
   18250:	96 e4       	ldi	r25, 0x46	; 70
   18252:	a0 e0       	ldi	r26, 0x00	; 0
   18254:	ed b7       	in	r30, 0x3d	; 61
   18256:	fe b7       	in	r31, 0x3e	; 62
   18258:	81 83       	std	Z+1, r24	; 0x01
   1825a:	92 83       	std	Z+2, r25	; 0x02
   1825c:	a3 83       	std	Z+3, r26	; 0x03
   1825e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   18262:	cd 2b       	or	r28, r29
   18264:	51 f0       	breq	.+20     	; 0x1827a <lif_help+0x36>
   18266:	80 e6       	ldi	r24, 0x60	; 96
   18268:	94 e4       	ldi	r25, 0x44	; 68
   1826a:	a0 e0       	ldi	r26, 0x00	; 0
   1826c:	ed b7       	in	r30, 0x3d	; 61
   1826e:	fe b7       	in	r31, 0x3e	; 62
   18270:	81 83       	std	Z+1, r24	; 0x01
   18272:	92 83       	std	Z+2, r25	; 0x02
   18274:	a3 83       	std	Z+3, r26	; 0x03
   18276:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1827a:	cd b7       	in	r28, 0x3d	; 61
   1827c:	de b7       	in	r29, 0x3e	; 62
   1827e:	23 96       	adiw	r28, 0x03	; 3
   18280:	e2 e0       	ldi	r30, 0x02	; 2
   18282:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00018286 <lif_calloc>:
   18286:	cf 92       	push	r12
   18288:	df 92       	push	r13
   1828a:	ef 92       	push	r14
   1828c:	ff 92       	push	r15
   1828e:	cf 93       	push	r28
   18290:	df 93       	push	r29
   18292:	ad b7       	in	r26, 0x3d	; 61
   18294:	be b7       	in	r27, 0x3e	; 62
   18296:	17 97       	sbiw	r26, 0x07	; 7
   18298:	0f b6       	in	r0, 0x3f	; 63
   1829a:	f8 94       	cli
   1829c:	be bf       	out	0x3e, r27	; 62
   1829e:	0f be       	out	0x3f, r0	; 63
   182a0:	ad bf       	out	0x3d, r26	; 61
   182a2:	6b 01       	movw	r12, r22
   182a4:	7c 01       	movw	r14, r24
   182a6:	61 e0       	ldi	r22, 0x01	; 1
   182a8:	70 e0       	ldi	r23, 0x00	; 0
   182aa:	c6 01       	movw	r24, r12
   182ac:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safecalloc>
   182b0:	ec 01       	movw	r28, r24
   182b2:	89 2b       	or	r24, r25
   182b4:	71 f4       	brne	.+28     	; 0x182d2 <lif_calloc+0x4c>
   182b6:	ed b7       	in	r30, 0x3d	; 61
   182b8:	fe b7       	in	r31, 0x3e	; 62
   182ba:	c4 82       	std	Z+4, r12	; 0x04
   182bc:	d5 82       	std	Z+5, r13	; 0x05
   182be:	e6 82       	std	Z+6, r14	; 0x06
   182c0:	f7 82       	std	Z+7, r15	; 0x07
   182c2:	89 ef       	ldi	r24, 0xF9	; 249
   182c4:	93 e4       	ldi	r25, 0x43	; 67
   182c6:	a0 e0       	ldi	r26, 0x00	; 0
   182c8:	81 83       	std	Z+1, r24	; 0x01
   182ca:	92 83       	std	Z+2, r25	; 0x02
   182cc:	a3 83       	std	Z+3, r26	; 0x03
   182ce:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   182d2:	ce 01       	movw	r24, r28
   182d4:	ad b7       	in	r26, 0x3d	; 61
   182d6:	be b7       	in	r27, 0x3e	; 62
   182d8:	17 96       	adiw	r26, 0x07	; 7
   182da:	0f b6       	in	r0, 0x3f	; 63
   182dc:	f8 94       	cli
   182de:	be bf       	out	0x3e, r27	; 62
   182e0:	0f be       	out	0x3f, r0	; 63
   182e2:	ad bf       	out	0x3d, r26	; 61
   182e4:	df 91       	pop	r29
   182e6:	cf 91       	pop	r28
   182e8:	ff 90       	pop	r15
   182ea:	ef 90       	pop	r14
   182ec:	df 90       	pop	r13
   182ee:	cf 90       	pop	r12
   182f0:	08 95       	ret

000182f2 <lif_free>:
   182f2:	00 d0       	rcall	.+0      	; 0x182f4 <lif_free+0x2>
   182f4:	1f 92       	push	r1
   182f6:	00 97       	sbiw	r24, 0x00	; 0
   182f8:	59 f4       	brne	.+22     	; 0x18310 <lif_free+0x1e>
   182fa:	81 ee       	ldi	r24, 0xE1	; 225
   182fc:	93 e4       	ldi	r25, 0x43	; 67
   182fe:	a0 e0       	ldi	r26, 0x00	; 0
   18300:	ed b7       	in	r30, 0x3d	; 61
   18302:	fe b7       	in	r31, 0x3e	; 62
   18304:	81 83       	std	Z+1, r24	; 0x01
   18306:	92 83       	std	Z+2, r25	; 0x02
   18308:	a3 83       	std	Z+3, r26	; 0x03
   1830a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1830e:	02 c0       	rjmp	.+4      	; 0x18314 <lif_free+0x22>
   18310:	0e 94 e9 27 	call	0x4fd2	; 0x4fd2 <safefree>
   18314:	0f 90       	pop	r0
   18316:	0f 90       	pop	r0
   18318:	0f 90       	pop	r0
   1831a:	08 95       	ret

0001831c <lif_stralloc>:
   1831c:	0f 93       	push	r16
   1831e:	1f 93       	push	r17
   18320:	cf 93       	push	r28
   18322:	df 93       	push	r29
   18324:	ec 01       	movw	r28, r24
   18326:	fc 01       	movw	r30, r24
   18328:	01 90       	ld	r0, Z+
   1832a:	00 20       	and	r0, r0
   1832c:	e9 f7       	brne	.-6      	; 0x18328 <lif_stralloc+0xc>
   1832e:	bf 01       	movw	r22, r30
   18330:	68 1b       	sub	r22, r24
   18332:	79 0b       	sbc	r23, r25
   18334:	6d 5f       	subi	r22, 0xFD	; 253
   18336:	7f 4f       	sbci	r23, 0xFF	; 255
   18338:	07 2e       	mov	r0, r23
   1833a:	00 0c       	add	r0, r0
   1833c:	88 0b       	sbc	r24, r24
   1833e:	99 0b       	sbc	r25, r25
   18340:	a2 df       	rcall	.-188    	; 0x18286 <lif_calloc>
   18342:	8c 01       	movw	r16, r24
   18344:	00 97       	sbiw	r24, 0x00	; 0
   18346:	19 f0       	breq	.+6      	; 0x1834e <lif_stralloc+0x32>
   18348:	be 01       	movw	r22, r28
   1834a:	0e 94 b2 31 	call	0x6364	; 0x6364 <strcpy>
   1834e:	c8 01       	movw	r24, r16
   18350:	df 91       	pop	r29
   18352:	cf 91       	pop	r28
   18354:	1f 91       	pop	r17
   18356:	0f 91       	pop	r16
   18358:	08 95       	ret

0001835a <lif_open>:
   1835a:	ef 92       	push	r14
   1835c:	ff 92       	push	r15
   1835e:	0f 93       	push	r16
   18360:	1f 93       	push	r17
   18362:	cf 93       	push	r28
   18364:	df 93       	push	r29
   18366:	ad b7       	in	r26, 0x3d	; 61
   18368:	be b7       	in	r27, 0x3e	; 62
   1836a:	17 97       	sbiw	r26, 0x07	; 7
   1836c:	0f b6       	in	r0, 0x3f	; 63
   1836e:	f8 94       	cli
   18370:	be bf       	out	0x3e, r27	; 62
   18372:	0f be       	out	0x3f, r0	; 63
   18374:	ad bf       	out	0x3d, r26	; 61
   18376:	8c 01       	movw	r16, r24
   18378:	7b 01       	movw	r14, r22
   1837a:	0e 94 c9 7e 	call	0xfd92	; 0xfd92 <fopen>
   1837e:	ec 01       	movw	r28, r24
   18380:	89 2b       	or	r24, r25
   18382:	71 f4       	brne	.+28     	; 0x183a0 <lif_open+0x46>
   18384:	ed b7       	in	r30, 0x3d	; 61
   18386:	fe b7       	in	r31, 0x3e	; 62
   18388:	f7 82       	std	Z+7, r15	; 0x07
   1838a:	e6 82       	std	Z+6, r14	; 0x06
   1838c:	15 83       	std	Z+5, r17	; 0x05
   1838e:	04 83       	std	Z+4, r16	; 0x04
   18390:	8c eb       	ldi	r24, 0xBC	; 188
   18392:	93 e4       	ldi	r25, 0x43	; 67
   18394:	a0 e0       	ldi	r26, 0x00	; 0
   18396:	81 83       	std	Z+1, r24	; 0x01
   18398:	92 83       	std	Z+2, r25	; 0x02
   1839a:	a3 83       	std	Z+3, r26	; 0x03
   1839c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   183a0:	ce 01       	movw	r24, r28
   183a2:	cd b7       	in	r28, 0x3d	; 61
   183a4:	de b7       	in	r29, 0x3e	; 62
   183a6:	27 96       	adiw	r28, 0x07	; 7
   183a8:	e6 e0       	ldi	r30, 0x06	; 6
   183aa:	0c 94 bb e7 	jmp	0x1cf76	; 0x1cf76 <__epilogue_restores__+0x18>

000183ae <lif_stat>:
   183ae:	0f 93       	push	r16
   183b0:	1f 93       	push	r17
   183b2:	cf 93       	push	r28
   183b4:	df 93       	push	r29
   183b6:	00 d0       	rcall	.+0      	; 0x183b8 <lif_stat+0xa>
   183b8:	00 d0       	rcall	.+0      	; 0x183ba <lif_stat+0xc>
   183ba:	1f 92       	push	r1
   183bc:	8c 01       	movw	r16, r24
   183be:	d6 2f       	mov	r29, r22
   183c0:	c7 2f       	mov	r28, r23
   183c2:	0e 94 ce 79 	call	0xf39c	; 0xf39c <stat>
   183c6:	97 ff       	sbrs	r25, 7
   183c8:	0f c0       	rjmp	.+30     	; 0x183e8 <lif_stat+0x3a>
   183ca:	ed b7       	in	r30, 0x3d	; 61
   183cc:	fe b7       	in	r31, 0x3e	; 62
   183ce:	15 83       	std	Z+5, r17	; 0x05
   183d0:	04 83       	std	Z+4, r16	; 0x04
   183d2:	83 ea       	ldi	r24, 0xA3	; 163
   183d4:	93 e4       	ldi	r25, 0x43	; 67
   183d6:	a0 e0       	ldi	r26, 0x00	; 0
   183d8:	81 83       	std	Z+1, r24	; 0x01
   183da:	92 83       	std	Z+2, r25	; 0x02
   183dc:	a3 83       	std	Z+3, r26	; 0x03
   183de:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   183e2:	80 e0       	ldi	r24, 0x00	; 0
   183e4:	90 e0       	ldi	r25, 0x00	; 0
   183e6:	02 c0       	rjmp	.+4      	; 0x183ec <lif_stat+0x3e>
   183e8:	8d 2f       	mov	r24, r29
   183ea:	9c 2f       	mov	r25, r28
   183ec:	cd b7       	in	r28, 0x3d	; 61
   183ee:	de b7       	in	r29, 0x3e	; 62
   183f0:	25 96       	adiw	r28, 0x05	; 5
   183f2:	e4 e0       	ldi	r30, 0x04	; 4
   183f4:	0c 94 bd e7 	jmp	0x1cf7a	; 0x1cf7a <__epilogue_restores__+0x1c>

000183f8 <lif_seek_msg>:
   183f8:	a9 e0       	ldi	r26, 0x09	; 9
   183fa:	b0 e0       	ldi	r27, 0x00	; 0
   183fc:	e2 e0       	ldi	r30, 0x02	; 2
   183fe:	f2 ec       	ldi	r31, 0xC2	; 194
   18400:	0c 94 9d e7 	jmp	0x1cf3a	; 0x1cf3a <__prologue_saves__+0x14>
   18404:	ec 01       	movw	r28, r24
   18406:	6a 01       	movw	r12, r20
   18408:	7b 01       	movw	r14, r22
   1840a:	89 01       	movw	r16, r18
   1840c:	0e 94 08 7b 	call	0xf610	; 0xf610 <ftell>
   18410:	6c 15       	cp	r22, r12
   18412:	7d 05       	cpc	r23, r13
   18414:	8e 05       	cpc	r24, r14
   18416:	9f 05       	cpc	r25, r15
   18418:	19 f4       	brne	.+6      	; 0x18420 <lif_seek_msg+0x28>
   1841a:	81 e0       	ldi	r24, 0x01	; 1
   1841c:	90 e0       	ldi	r25, 0x00	; 0
   1841e:	1b c0       	rjmp	.+54     	; 0x18456 <lif_seek_msg+0x5e>
   18420:	20 e0       	ldi	r18, 0x00	; 0
   18422:	30 e0       	ldi	r19, 0x00	; 0
   18424:	b7 01       	movw	r22, r14
   18426:	a6 01       	movw	r20, r12
   18428:	ce 01       	movw	r24, r28
   1842a:	0e 94 8b 7b 	call	0xf716	; 0xf716 <fseek>
   1842e:	97 ff       	sbrs	r25, 7
   18430:	f4 cf       	rjmp	.-24     	; 0x1841a <lif_seek_msg+0x22>
   18432:	ed b7       	in	r30, 0x3d	; 61
   18434:	fe b7       	in	r31, 0x3e	; 62
   18436:	c6 82       	std	Z+6, r12	; 0x06
   18438:	d7 82       	std	Z+7, r13	; 0x07
   1843a:	e0 86       	std	Z+8, r14	; 0x08
   1843c:	f1 86       	std	Z+9, r15	; 0x09
   1843e:	15 83       	std	Z+5, r17	; 0x05
   18440:	04 83       	std	Z+4, r16	; 0x04
   18442:	82 e8       	ldi	r24, 0x82	; 130
   18444:	93 e4       	ldi	r25, 0x43	; 67
   18446:	a0 e0       	ldi	r26, 0x00	; 0
   18448:	81 83       	std	Z+1, r24	; 0x01
   1844a:	92 83       	std	Z+2, r25	; 0x02
   1844c:	a3 83       	std	Z+3, r26	; 0x03
   1844e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   18452:	80 e0       	ldi	r24, 0x00	; 0
   18454:	90 e0       	ldi	r25, 0x00	; 0
   18456:	cd b7       	in	r28, 0x3d	; 61
   18458:	de b7       	in	r29, 0x3e	; 62
   1845a:	29 96       	adiw	r28, 0x09	; 9
   1845c:	e8 e0       	ldi	r30, 0x08	; 8
   1845e:	0c 94 b9 e7 	jmp	0x1cf72	; 0x1cf72 <__epilogue_restores__+0x14>

00018462 <lif_read>:
   18462:	af e0       	ldi	r26, 0x0F	; 15
   18464:	b0 e0       	ldi	r27, 0x00	; 0
   18466:	e7 e3       	ldi	r30, 0x37	; 55
   18468:	f2 ec       	ldi	r31, 0xC2	; 194
   1846a:	0c 94 99 e7 	jmp	0x1cf32	; 0x1cf32 <__prologue_saves__+0xc>
   1846e:	ec 01       	movw	r28, r24
   18470:	7b 01       	movw	r14, r22
   18472:	49 01       	movw	r8, r18
   18474:	5a 01       	movw	r10, r20
   18476:	28 81       	ld	r18, Y
   18478:	39 81       	ldd	r19, Y+1	; 0x01
   1847a:	b5 01       	movw	r22, r10
   1847c:	a4 01       	movw	r20, r8
   1847e:	8a 81       	ldd	r24, Y+2	; 0x02
   18480:	9b 81       	ldd	r25, Y+3	; 0x03
   18482:	ba df       	rcall	.-140    	; 0x183f8 <lif_seek_msg>
   18484:	89 2b       	or	r24, r25
   18486:	a1 f1       	breq	.+104    	; 0x184f0 <lif_read+0x8e>
   18488:	2a 81       	ldd	r18, Y+2	; 0x02
   1848a:	3b 81       	ldd	r19, Y+3	; 0x03
   1848c:	a8 01       	movw	r20, r16
   1848e:	61 e0       	ldi	r22, 0x01	; 1
   18490:	70 e0       	ldi	r23, 0x00	; 0
   18492:	c7 01       	movw	r24, r14
   18494:	0e 94 1f 7c 	call	0xf83e	; 0xf83e <fread>
   18498:	6c 01       	movw	r12, r24
   1849a:	e1 2c       	mov	r14, r1
   1849c:	f1 2c       	mov	r15, r1
   1849e:	b8 01       	movw	r22, r16
   184a0:	01 2e       	mov	r0, r17
   184a2:	00 0c       	add	r0, r0
   184a4:	88 0b       	sbc	r24, r24
   184a6:	99 0b       	sbc	r25, r25
   184a8:	c6 16       	cp	r12, r22
   184aa:	d7 06       	cpc	r13, r23
   184ac:	e8 06       	cpc	r14, r24
   184ae:	f9 06       	cpc	r15, r25
   184b0:	29 f1       	breq	.+74     	; 0x184fc <lif_read+0x9a>
   184b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   184b6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   184ba:	92 ff       	sbrs	r25, 2
   184bc:	1d c0       	rjmp	.+58     	; 0x184f8 <lif_read+0x96>
   184be:	ed b7       	in	r30, 0x3d	; 61
   184c0:	fe b7       	in	r31, 0x3e	; 62
   184c2:	17 87       	std	Z+15, r17	; 0x0f
   184c4:	06 87       	std	Z+14, r16	; 0x0e
   184c6:	c2 86       	std	Z+10, r12	; 0x0a
   184c8:	d3 86       	std	Z+11, r13	; 0x0b
   184ca:	e4 86       	std	Z+12, r14	; 0x0c
   184cc:	f5 86       	std	Z+13, r15	; 0x0d
   184ce:	86 82       	std	Z+6, r8	; 0x06
   184d0:	97 82       	std	Z+7, r9	; 0x07
   184d2:	a0 86       	std	Z+8, r10	; 0x08
   184d4:	b1 86       	std	Z+9, r11	; 0x09
   184d6:	88 81       	ld	r24, Y
   184d8:	99 81       	ldd	r25, Y+1	; 0x01
   184da:	95 83       	std	Z+5, r25	; 0x05
   184dc:	84 83       	std	Z+4, r24	; 0x04
   184de:	86 e4       	ldi	r24, 0x46	; 70
   184e0:	93 e4       	ldi	r25, 0x43	; 67
   184e2:	a0 e0       	ldi	r26, 0x00	; 0
   184e4:	81 83       	std	Z+1, r24	; 0x01
   184e6:	92 83       	std	Z+2, r25	; 0x02
   184e8:	a3 83       	std	Z+3, r26	; 0x03
   184ea:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   184ee:	04 c0       	rjmp	.+8      	; 0x184f8 <lif_read+0x96>
   184f0:	60 e0       	ldi	r22, 0x00	; 0
   184f2:	70 e0       	ldi	r23, 0x00	; 0
   184f4:	cb 01       	movw	r24, r22
   184f6:	02 c0       	rjmp	.+4      	; 0x184fc <lif_read+0x9a>
   184f8:	c7 01       	movw	r24, r14
   184fa:	b6 01       	movw	r22, r12
   184fc:	cd b7       	in	r28, 0x3d	; 61
   184fe:	de b7       	in	r29, 0x3e	; 62
   18500:	2f 96       	adiw	r28, 0x0f	; 15
   18502:	ec e0       	ldi	r30, 0x0C	; 12
   18504:	0c 94 b5 e7 	jmp	0x1cf6a	; 0x1cf6a <__epilogue_restores__+0xc>

00018508 <lif_write>:
   18508:	8f 92       	push	r8
   1850a:	9f 92       	push	r9
   1850c:	af 92       	push	r10
   1850e:	bf 92       	push	r11
   18510:	ef 92       	push	r14
   18512:	ff 92       	push	r15
   18514:	0f 93       	push	r16
   18516:	1f 93       	push	r17
   18518:	cf 93       	push	r28
   1851a:	df 93       	push	r29
   1851c:	ad b7       	in	r26, 0x3d	; 61
   1851e:	be b7       	in	r27, 0x3e	; 62
   18520:	1d 97       	sbiw	r26, 0x0d	; 13
   18522:	0f b6       	in	r0, 0x3f	; 63
   18524:	f8 94       	cli
   18526:	be bf       	out	0x3e, r27	; 62
   18528:	0f be       	out	0x3f, r0	; 63
   1852a:	ad bf       	out	0x3d, r26	; 61
   1852c:	7c 01       	movw	r14, r24
   1852e:	eb 01       	movw	r28, r22
   18530:	49 01       	movw	r8, r18
   18532:	5a 01       	movw	r10, r20
   18534:	fc 01       	movw	r30, r24
   18536:	20 81       	ld	r18, Z
   18538:	31 81       	ldd	r19, Z+1	; 0x01
   1853a:	b5 01       	movw	r22, r10
   1853c:	a4 01       	movw	r20, r8
   1853e:	82 81       	ldd	r24, Z+2	; 0x02
   18540:	93 81       	ldd	r25, Z+3	; 0x03
   18542:	5a df       	rcall	.-332    	; 0x183f8 <lif_seek_msg>
   18544:	00 97       	sbiw	r24, 0x00	; 0
   18546:	81 f1       	breq	.+96     	; 0x185a8 <lif_write+0xa0>
   18548:	f7 01       	movw	r30, r14
   1854a:	22 81       	ldd	r18, Z+2	; 0x02
   1854c:	33 81       	ldd	r19, Z+3	; 0x03
   1854e:	a8 01       	movw	r20, r16
   18550:	61 e0       	ldi	r22, 0x01	; 1
   18552:	70 e0       	ldi	r23, 0x00	; 0
   18554:	ce 01       	movw	r24, r28
   18556:	0e 94 f1 7c 	call	0xf9e2	; 0xf9e2 <fwrite>
   1855a:	ec 01       	movw	r28, r24
   1855c:	08 17       	cp	r16, r24
   1855e:	19 07       	cpc	r17, r25
   18560:	01 f1       	breq	.+64     	; 0x185a2 <lif_write+0x9a>
   18562:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18566:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1856a:	92 ff       	sbrs	r25, 2
   1856c:	1c c0       	rjmp	.+56     	; 0x185a6 <lif_write+0x9e>
   1856e:	ed b7       	in	r30, 0x3d	; 61
   18570:	fe b7       	in	r31, 0x3e	; 62
   18572:	15 87       	std	Z+13, r17	; 0x0d
   18574:	04 87       	std	Z+12, r16	; 0x0c
   18576:	d3 87       	std	Z+11, r29	; 0x0b
   18578:	c2 87       	std	Z+10, r28	; 0x0a
   1857a:	86 82       	std	Z+6, r8	; 0x06
   1857c:	97 82       	std	Z+7, r9	; 0x07
   1857e:	a0 86       	std	Z+8, r10	; 0x08
   18580:	b1 86       	std	Z+9, r11	; 0x09
   18582:	f7 01       	movw	r30, r14
   18584:	80 81       	ld	r24, Z
   18586:	91 81       	ldd	r25, Z+1	; 0x01
   18588:	ed b7       	in	r30, 0x3d	; 61
   1858a:	fe b7       	in	r31, 0x3e	; 62
   1858c:	95 83       	std	Z+5, r25	; 0x05
   1858e:	84 83       	std	Z+4, r24	; 0x04
   18590:	89 e0       	ldi	r24, 0x09	; 9
   18592:	93 e4       	ldi	r25, 0x43	; 67
   18594:	a0 e0       	ldi	r26, 0x00	; 0
   18596:	81 83       	std	Z+1, r24	; 0x01
   18598:	92 83       	std	Z+2, r25	; 0x02
   1859a:	a3 83       	std	Z+3, r26	; 0x03
   1859c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   185a0:	02 c0       	rjmp	.+4      	; 0x185a6 <lif_write+0x9e>
   185a2:	c8 01       	movw	r24, r16
   185a4:	01 c0       	rjmp	.+2      	; 0x185a8 <lif_write+0xa0>
   185a6:	ce 01       	movw	r24, r28
   185a8:	ad b7       	in	r26, 0x3d	; 61
   185aa:	be b7       	in	r27, 0x3e	; 62
   185ac:	1d 96       	adiw	r26, 0x0d	; 13
   185ae:	0f b6       	in	r0, 0x3f	; 63
   185b0:	f8 94       	cli
   185b2:	be bf       	out	0x3e, r27	; 62
   185b4:	0f be       	out	0x3f, r0	; 63
   185b6:	ad bf       	out	0x3d, r26	; 61
   185b8:	df 91       	pop	r29
   185ba:	cf 91       	pop	r28
   185bc:	1f 91       	pop	r17
   185be:	0f 91       	pop	r16
   185c0:	ff 90       	pop	r15
   185c2:	ef 90       	pop	r14
   185c4:	bf 90       	pop	r11
   185c6:	af 90       	pop	r10
   185c8:	9f 90       	pop	r9
   185ca:	8f 90       	pop	r8
   185cc:	08 95       	ret

000185ce <lif_chars>:
   185ce:	80 32       	cpi	r24, 0x20	; 32
   185d0:	91 05       	cpc	r25, r1
   185d2:	e1 f0       	breq	.+56     	; 0x1860c <lif_chars+0x3e>
   185d4:	9c 01       	movw	r18, r24
   185d6:	21 56       	subi	r18, 0x61	; 97
   185d8:	31 09       	sbc	r19, r1
   185da:	2a 31       	cpi	r18, 0x1A	; 26
   185dc:	31 05       	cpc	r19, r1
   185de:	10 f4       	brcc	.+4      	; 0x185e4 <lif_chars+0x16>
   185e0:	80 97       	sbiw	r24, 0x20	; 32
   185e2:	08 95       	ret
   185e4:	9c 01       	movw	r18, r24
   185e6:	21 54       	subi	r18, 0x41	; 65
   185e8:	31 09       	sbc	r19, r1
   185ea:	2a 31       	cpi	r18, 0x1A	; 26
   185ec:	31 05       	cpc	r19, r1
   185ee:	c8 f0       	brcs	.+50     	; 0x18622 <lif_chars+0x54>
   185f0:	16 16       	cp	r1, r22
   185f2:	17 06       	cpc	r1, r23
   185f4:	74 f4       	brge	.+28     	; 0x18612 <lif_chars+0x44>
   185f6:	2f 5e       	subi	r18, 0xEF	; 239
   185f8:	3f 4f       	sbci	r19, 0xFF	; 255
   185fa:	2a 30       	cpi	r18, 0x0A	; 10
   185fc:	31 05       	cpc	r19, r1
   185fe:	88 f0       	brcs	.+34     	; 0x18622 <lif_chars+0x54>
   18600:	8f 35       	cpi	r24, 0x5F	; 95
   18602:	91 05       	cpc	r25, r1
   18604:	49 f0       	breq	.+18     	; 0x18618 <lif_chars+0x4a>
   18606:	8d 97       	sbiw	r24, 0x2d	; 45
   18608:	21 f4       	brne	.+8      	; 0x18612 <lif_chars+0x44>
   1860a:	09 c0       	rjmp	.+18     	; 0x1861e <lif_chars+0x50>
   1860c:	80 e2       	ldi	r24, 0x20	; 32
   1860e:	90 e0       	ldi	r25, 0x00	; 0
   18610:	08 95       	ret
   18612:	80 e0       	ldi	r24, 0x00	; 0
   18614:	90 e0       	ldi	r25, 0x00	; 0
   18616:	08 95       	ret
   18618:	8f e5       	ldi	r24, 0x5F	; 95
   1861a:	90 e0       	ldi	r25, 0x00	; 0
   1861c:	08 95       	ret
   1861e:	8d e2       	ldi	r24, 0x2D	; 45
   18620:	90 e0       	ldi	r25, 0x00	; 0
   18622:	08 95       	ret

00018624 <lif_B2S>:
   18624:	a0 e0       	ldi	r26, 0x00	; 0
   18626:	b0 e0       	ldi	r27, 0x00	; 0
   18628:	e8 e1       	ldi	r30, 0x18	; 24
   1862a:	f3 ec       	ldi	r31, 0xC3	; 195
   1862c:	0c 94 99 e7 	jmp	0x1cf32	; 0x1cf32 <__prologue_saves__+0xc>
   18630:	5c 01       	movw	r10, r24
   18632:	6b 01       	movw	r12, r22
   18634:	ea 01       	movw	r28, r20
   18636:	4c 01       	movw	r8, r24
   18638:	ee 24       	eor	r14, r14
   1863a:	e3 94       	inc	r14
   1863c:	f1 2c       	mov	r15, r1
   1863e:	00 e0       	ldi	r16, 0x00	; 0
   18640:	10 e0       	ldi	r17, 0x00	; 0
   18642:	0c 17       	cp	r16, r28
   18644:	1d 07       	cpc	r17, r29
   18646:	6c f4       	brge	.+26     	; 0x18662 <lif_B2S+0x3e>
   18648:	f4 01       	movw	r30, r8
   1864a:	81 91       	ld	r24, Z+
   1864c:	4f 01       	movw	r8, r30
   1864e:	b8 01       	movw	r22, r16
   18650:	90 e0       	ldi	r25, 0x00	; 0
   18652:	bd df       	rcall	.-134    	; 0x185ce <lif_chars>
   18654:	89 2b       	or	r24, r25
   18656:	11 f4       	brne	.+4      	; 0x1865c <lif_B2S+0x38>
   18658:	e1 2c       	mov	r14, r1
   1865a:	f1 2c       	mov	r15, r1
   1865c:	0f 5f       	subi	r16, 0xFF	; 255
   1865e:	1f 4f       	sbci	r17, 0xFF	; 255
   18660:	f0 cf       	rjmp	.-32     	; 0x18642 <lif_B2S+0x1e>
   18662:	d6 01       	movw	r26, r12
   18664:	f5 01       	movw	r30, r10
   18666:	cf 01       	movw	r24, r30
   18668:	8a 19       	sub	r24, r10
   1866a:	9b 09       	sbc	r25, r11
   1866c:	8c 17       	cp	r24, r28
   1866e:	9d 07       	cpc	r25, r29
   18670:	1c f4       	brge	.+6      	; 0x18678 <lif_B2S+0x54>
   18672:	81 91       	ld	r24, Z+
   18674:	8d 93       	st	X+, r24
   18676:	f7 cf       	rjmp	.-18     	; 0x18666 <lif_B2S+0x42>
   18678:	d7 ff       	sbrs	r29, 7
   1867a:	02 c0       	rjmp	.+4      	; 0x18680 <lif_B2S+0x5c>
   1867c:	c0 e0       	ldi	r28, 0x00	; 0
   1867e:	d0 e0       	ldi	r29, 0x00	; 0
   18680:	cc 0d       	add	r28, r12
   18682:	dd 1d       	adc	r29, r13
   18684:	18 82       	st	Y, r1
   18686:	c6 01       	movw	r24, r12
   18688:	0e 94 90 32 	call	0x6520	; 0x6520 <trim_tail>
   1868c:	c7 01       	movw	r24, r14
   1868e:	cd b7       	in	r28, 0x3d	; 61
   18690:	de b7       	in	r29, 0x3e	; 62
   18692:	ec e0       	ldi	r30, 0x0C	; 12
   18694:	0c 94 b5 e7 	jmp	0x1cf6a	; 0x1cf6a <__epilogue_restores__+0xc>

00018698 <lif_checkname>:
   18698:	ef 92       	push	r14
   1869a:	ff 92       	push	r15
   1869c:	0f 93       	push	r16
   1869e:	1f 93       	push	r17
   186a0:	cf 93       	push	r28
   186a2:	df 93       	push	r29
   186a4:	7c 01       	movw	r14, r24
   186a6:	ec 01       	movw	r28, r24
   186a8:	01 e0       	ldi	r16, 0x01	; 1
   186aa:	10 e0       	ldi	r17, 0x00	; 0
   186ac:	be 01       	movw	r22, r28
   186ae:	6e 19       	sub	r22, r14
   186b0:	7f 09       	sbc	r23, r15
   186b2:	89 91       	ld	r24, Y+
   186b4:	88 23       	and	r24, r24
   186b6:	39 f0       	breq	.+14     	; 0x186c6 <lif_checkname+0x2e>
   186b8:	90 e0       	ldi	r25, 0x00	; 0
   186ba:	89 df       	rcall	.-238    	; 0x185ce <lif_chars>
   186bc:	89 2b       	or	r24, r25
   186be:	b1 f7       	brne	.-20     	; 0x186ac <lif_checkname+0x14>
   186c0:	00 e0       	ldi	r16, 0x00	; 0
   186c2:	10 e0       	ldi	r17, 0x00	; 0
   186c4:	f3 cf       	rjmp	.-26     	; 0x186ac <lif_checkname+0x14>
   186c6:	c8 01       	movw	r24, r16
   186c8:	cd b7       	in	r28, 0x3d	; 61
   186ca:	de b7       	in	r29, 0x3e	; 62
   186cc:	e6 e0       	ldi	r30, 0x06	; 6
   186ce:	0c 94 bb e7 	jmp	0x1cf76	; 0x1cf76 <__epilogue_restores__+0x18>

000186d2 <lif_S2B>:
   186d2:	fb 01       	movw	r30, r22
   186d4:	dc 01       	movw	r26, r24
   186d6:	20 e0       	ldi	r18, 0x00	; 0
   186d8:	30 e0       	ldi	r19, 0x00	; 0
   186da:	61 91       	ld	r22, Z+
   186dc:	61 11       	cpse	r22, r1
   186de:	05 c0       	rjmp	.+10     	; 0x186ea <lif_S2B+0x18>
   186e0:	fc 01       	movw	r30, r24
   186e2:	e2 0f       	add	r30, r18
   186e4:	f3 1f       	adc	r31, r19
   186e6:	60 e2       	ldi	r22, 0x20	; 32
   186e8:	08 c0       	rjmp	.+16     	; 0x186fa <lif_S2B+0x28>
   186ea:	24 17       	cp	r18, r20
   186ec:	35 07       	cpc	r19, r21
   186ee:	24 f4       	brge	.+8      	; 0x186f8 <lif_S2B+0x26>
   186f0:	6d 93       	st	X+, r22
   186f2:	2f 5f       	subi	r18, 0xFF	; 255
   186f4:	3f 4f       	sbci	r19, 0xFF	; 255
   186f6:	f1 cf       	rjmp	.-30     	; 0x186da <lif_S2B+0x8>
   186f8:	08 95       	ret
   186fa:	9f 01       	movw	r18, r30
   186fc:	28 1b       	sub	r18, r24
   186fe:	39 0b       	sbc	r19, r25
   18700:	24 17       	cp	r18, r20
   18702:	35 07       	cpc	r19, r21
   18704:	14 f4       	brge	.+4      	; 0x1870a <lif_S2B+0x38>
   18706:	61 93       	st	Z+, r22
   18708:	f8 cf       	rjmp	.-16     	; 0x186fa <lif_S2B+0x28>
   1870a:	08 95       	ret

0001870c <lif_fixname>:
   1870c:	a0 e0       	ldi	r26, 0x00	; 0
   1870e:	b0 e0       	ldi	r27, 0x00	; 0
   18710:	ec e8       	ldi	r30, 0x8C	; 140
   18712:	f3 ec       	ldi	r31, 0xC3	; 195
   18714:	0c 94 9c e7 	jmp	0x1cf38	; 0x1cf38 <__prologue_saves__+0x12>
   18718:	8c 01       	movw	r16, r24
   1871a:	cb 01       	movw	r24, r22
   1871c:	7a 01       	movw	r14, r20
   1871e:	0e 94 9a 77 	call	0xef34	; 0xef34 <basename>
   18722:	6c 01       	movw	r12, r24
   18724:	e8 01       	movw	r28, r16
   18726:	80 e2       	ldi	r24, 0x20	; 32
   18728:	b8 2e       	mov	r11, r24
   1872a:	be 01       	movw	r22, r28
   1872c:	60 1b       	sub	r22, r16
   1872e:	71 0b       	sbc	r23, r17
   18730:	f6 01       	movw	r30, r12
   18732:	81 91       	ld	r24, Z+
   18734:	6f 01       	movw	r12, r30
   18736:	81 11       	cpse	r24, r1
   18738:	02 c0       	rjmp	.+4      	; 0x1873e <lif_fixname+0x32>
   1873a:	20 e2       	ldi	r18, 0x20	; 32
   1873c:	0e c0       	rjmp	.+28     	; 0x1875a <lif_fixname+0x4e>
   1873e:	1e 14       	cp	r1, r14
   18740:	1f 04       	cpc	r1, r15
   18742:	dc f7       	brge	.-10     	; 0x1873a <lif_fixname+0x2e>
   18744:	8e 32       	cpi	r24, 0x2E	; 46
   18746:	c9 f3       	breq	.-14     	; 0x1873a <lif_fixname+0x2e>
   18748:	90 e0       	ldi	r25, 0x00	; 0
   1874a:	41 df       	rcall	.-382    	; 0x185ce <lif_chars>
   1874c:	88 23       	and	r24, r24
   1874e:	11 f0       	breq	.+4      	; 0x18754 <lif_fixname+0x48>
   18750:	88 83       	st	Y, r24
   18752:	01 c0       	rjmp	.+2      	; 0x18756 <lif_fixname+0x4a>
   18754:	b8 82       	st	Y, r11
   18756:	21 96       	adiw	r28, 0x01	; 1
   18758:	e8 cf       	rjmp	.-48     	; 0x1872a <lif_fixname+0x1e>
   1875a:	ce 01       	movw	r24, r28
   1875c:	80 1b       	sub	r24, r16
   1875e:	91 0b       	sbc	r25, r17
   18760:	8e 15       	cp	r24, r14
   18762:	9f 05       	cpc	r25, r15
   18764:	14 f4       	brge	.+4      	; 0x1876a <lif_fixname+0x5e>
   18766:	29 93       	st	Y+, r18
   18768:	f8 cf       	rjmp	.-16     	; 0x1875a <lif_fixname+0x4e>
   1876a:	18 82       	st	Y, r1
   1876c:	f8 01       	movw	r30, r16
   1876e:	01 90       	ld	r0, Z+
   18770:	00 20       	and	r0, r0
   18772:	e9 f7       	brne	.-6      	; 0x1876e <lif_fixname+0x62>
   18774:	cf 01       	movw	r24, r30
   18776:	01 97       	sbiw	r24, 0x01	; 1
   18778:	80 1b       	sub	r24, r16
   1877a:	91 0b       	sbc	r25, r17
   1877c:	cd b7       	in	r28, 0x3d	; 61
   1877e:	de b7       	in	r29, 0x3e	; 62
   18780:	e9 e0       	ldi	r30, 0x09	; 9
   18782:	0c 94 b8 e7 	jmp	0x1cf70	; 0x1cf70 <__epilogue_restores__+0x12>

00018786 <lif_vol2str>:
   18786:	ef 92       	push	r14
   18788:	ff 92       	push	r15
   1878a:	0f 93       	push	r16
   1878c:	1f 93       	push	r17
   1878e:	cf 93       	push	r28
   18790:	df 93       	push	r29
   18792:	7c 01       	movw	r14, r24
   18794:	eb 01       	movw	r28, r22
   18796:	fc 01       	movw	r30, r24
   18798:	04 a1       	ldd	r16, Z+36	; 0x24
   1879a:	15 a1       	ldd	r17, Z+37	; 0x25
   1879c:	20 e0       	ldi	r18, 0x00	; 0
   1879e:	30 e0       	ldi	r19, 0x00	; 0
   187a0:	42 e0       	ldi	r20, 0x02	; 2
   187a2:	50 e0       	ldi	r21, 0x00	; 0
   187a4:	60 e0       	ldi	r22, 0x00	; 0
   187a6:	70 e0       	ldi	r23, 0x00	; 0
   187a8:	ce 01       	movw	r24, r28
   187aa:	e4 dc       	rcall	.-1592   	; 0x18174 <V2B_MSB>
   187ac:	b7 01       	movw	r22, r14
   187ae:	6a 5d       	subi	r22, 0xDA	; 218
   187b0:	7f 4f       	sbci	r23, 0xFF	; 255
   187b2:	46 e0       	ldi	r20, 0x06	; 6
   187b4:	50 e0       	ldi	r21, 0x00	; 0
   187b6:	ce 01       	movw	r24, r28
   187b8:	02 96       	adiw	r24, 0x02	; 2
   187ba:	8b df       	rcall	.-234    	; 0x186d2 <lif_S2B>
   187bc:	f7 01       	movw	r30, r14
   187be:	05 a5       	ldd	r16, Z+45	; 0x2d
   187c0:	16 a5       	ldd	r17, Z+46	; 0x2e
   187c2:	27 a5       	ldd	r18, Z+47	; 0x2f
   187c4:	30 a9       	ldd	r19, Z+48	; 0x30
   187c6:	44 e0       	ldi	r20, 0x04	; 4
   187c8:	50 e0       	ldi	r21, 0x00	; 0
   187ca:	68 e0       	ldi	r22, 0x08	; 8
   187cc:	70 e0       	ldi	r23, 0x00	; 0
   187ce:	ce 01       	movw	r24, r28
   187d0:	d1 dc       	rcall	.-1630   	; 0x18174 <V2B_MSB>
   187d2:	f7 01       	movw	r30, r14
   187d4:	01 a9       	ldd	r16, Z+49	; 0x31
   187d6:	12 a9       	ldd	r17, Z+50	; 0x32
   187d8:	20 e0       	ldi	r18, 0x00	; 0
   187da:	30 e0       	ldi	r19, 0x00	; 0
   187dc:	42 e0       	ldi	r20, 0x02	; 2
   187de:	50 e0       	ldi	r21, 0x00	; 0
   187e0:	6c e0       	ldi	r22, 0x0C	; 12
   187e2:	70 e0       	ldi	r23, 0x00	; 0
   187e4:	ce 01       	movw	r24, r28
   187e6:	c6 dc       	rcall	.-1652   	; 0x18174 <V2B_MSB>
   187e8:	00 e0       	ldi	r16, 0x00	; 0
   187ea:	10 e0       	ldi	r17, 0x00	; 0
   187ec:	98 01       	movw	r18, r16
   187ee:	42 e0       	ldi	r20, 0x02	; 2
   187f0:	50 e0       	ldi	r21, 0x00	; 0
   187f2:	6e e0       	ldi	r22, 0x0E	; 14
   187f4:	70 e0       	ldi	r23, 0x00	; 0
   187f6:	ce 01       	movw	r24, r28
   187f8:	bd dc       	rcall	.-1670   	; 0x18174 <V2B_MSB>
   187fa:	f7 01       	movw	r30, r14
   187fc:	05 a9       	ldd	r16, Z+53	; 0x35
   187fe:	16 a9       	ldd	r17, Z+54	; 0x36
   18800:	27 a9       	ldd	r18, Z+55	; 0x37
   18802:	30 ad       	ldd	r19, Z+56	; 0x38
   18804:	44 e0       	ldi	r20, 0x04	; 4
   18806:	50 e0       	ldi	r21, 0x00	; 0
   18808:	60 e1       	ldi	r22, 0x10	; 16
   1880a:	70 e0       	ldi	r23, 0x00	; 0
   1880c:	ce 01       	movw	r24, r28
   1880e:	b2 dc       	rcall	.-1692   	; 0x18174 <V2B_MSB>
   18810:	f7 01       	movw	r30, r14
   18812:	01 ad       	ldd	r16, Z+57	; 0x39
   18814:	12 ad       	ldd	r17, Z+58	; 0x3a
   18816:	20 e0       	ldi	r18, 0x00	; 0
   18818:	30 e0       	ldi	r19, 0x00	; 0
   1881a:	42 e0       	ldi	r20, 0x02	; 2
   1881c:	50 e0       	ldi	r21, 0x00	; 0
   1881e:	64 e1       	ldi	r22, 0x14	; 20
   18820:	70 e0       	ldi	r23, 0x00	; 0
   18822:	ce 01       	movw	r24, r28
   18824:	a7 dc       	rcall	.-1714   	; 0x18174 <V2B_MSB>
   18826:	00 e0       	ldi	r16, 0x00	; 0
   18828:	10 e0       	ldi	r17, 0x00	; 0
   1882a:	98 01       	movw	r18, r16
   1882c:	42 e0       	ldi	r20, 0x02	; 2
   1882e:	50 e0       	ldi	r21, 0x00	; 0
   18830:	66 e1       	ldi	r22, 0x16	; 22
   18832:	70 e0       	ldi	r23, 0x00	; 0
   18834:	ce 01       	movw	r24, r28
   18836:	9e dc       	rcall	.-1732   	; 0x18174 <V2B_MSB>
   18838:	f7 01       	movw	r30, r14
   1883a:	fd 96       	adiw	r30, 0x3d	; 61
   1883c:	00 81       	ld	r16, Z
   1883e:	11 81       	ldd	r17, Z+1	; 0x01
   18840:	22 81       	ldd	r18, Z+2	; 0x02
   18842:	33 81       	ldd	r19, Z+3	; 0x03
   18844:	44 e0       	ldi	r20, 0x04	; 4
   18846:	50 e0       	ldi	r21, 0x00	; 0
   18848:	68 e1       	ldi	r22, 0x18	; 24
   1884a:	70 e0       	ldi	r23, 0x00	; 0
   1884c:	ce 01       	movw	r24, r28
   1884e:	92 dc       	rcall	.-1756   	; 0x18174 <V2B_MSB>
   18850:	f7 01       	movw	r30, r14
   18852:	ef 5b       	subi	r30, 0xBF	; 191
   18854:	ff 4f       	sbci	r31, 0xFF	; 255
   18856:	00 81       	ld	r16, Z
   18858:	11 81       	ldd	r17, Z+1	; 0x01
   1885a:	22 81       	ldd	r18, Z+2	; 0x02
   1885c:	33 81       	ldd	r19, Z+3	; 0x03
   1885e:	44 e0       	ldi	r20, 0x04	; 4
   18860:	50 e0       	ldi	r21, 0x00	; 0
   18862:	6c e1       	ldi	r22, 0x1C	; 28
   18864:	70 e0       	ldi	r23, 0x00	; 0
   18866:	ce 01       	movw	r24, r28
   18868:	85 dc       	rcall	.-1782   	; 0x18174 <V2B_MSB>
   1886a:	f7 01       	movw	r30, r14
   1886c:	eb 5b       	subi	r30, 0xBB	; 187
   1886e:	ff 4f       	sbci	r31, 0xFF	; 255
   18870:	00 81       	ld	r16, Z
   18872:	11 81       	ldd	r17, Z+1	; 0x01
   18874:	22 81       	ldd	r18, Z+2	; 0x02
   18876:	33 81       	ldd	r19, Z+3	; 0x03
   18878:	44 e0       	ldi	r20, 0x04	; 4
   1887a:	50 e0       	ldi	r21, 0x00	; 0
   1887c:	60 e2       	ldi	r22, 0x20	; 32
   1887e:	70 e0       	ldi	r23, 0x00	; 0
   18880:	ce 01       	movw	r24, r28
   18882:	78 dc       	rcall	.-1808   	; 0x18174 <V2B_MSB>
   18884:	de 01       	movw	r26, r28
   18886:	94 96       	adiw	r26, 0x24	; 36
   18888:	f7 01       	movw	r30, r14
   1888a:	e7 5b       	subi	r30, 0xB7	; 183
   1888c:	ff 4f       	sbci	r31, 0xFF	; 255
   1888e:	86 e0       	ldi	r24, 0x06	; 6
   18890:	01 90       	ld	r0, Z+
   18892:	0d 92       	st	X+, r0
   18894:	8a 95       	dec	r24
   18896:	e1 f7       	brne	.-8      	; 0x18890 <lif_vol2str+0x10a>
   18898:	cd b7       	in	r28, 0x3d	; 61
   1889a:	de b7       	in	r29, 0x3e	; 62
   1889c:	e6 e0       	ldi	r30, 0x06	; 6
   1889e:	0c 94 bb e7 	jmp	0x1cf76	; 0x1cf76 <__epilogue_restores__+0x18>

000188a2 <lif_str2vol>:
   188a2:	0f 93       	push	r16
   188a4:	1f 93       	push	r17
   188a6:	cf 93       	push	r28
   188a8:	df 93       	push	r29
   188aa:	8c 01       	movw	r16, r24
   188ac:	eb 01       	movw	r28, r22
   188ae:	42 e0       	ldi	r20, 0x02	; 2
   188b0:	50 e0       	ldi	r21, 0x00	; 0
   188b2:	60 e0       	ldi	r22, 0x00	; 0
   188b4:	70 e0       	ldi	r23, 0x00	; 0
   188b6:	87 dc       	rcall	.-1778   	; 0x181c6 <B2V_MSB>
   188b8:	7d a3       	std	Y+37, r23	; 0x25
   188ba:	6c a3       	std	Y+36, r22	; 0x24
   188bc:	be 01       	movw	r22, r28
   188be:	6a 5d       	subi	r22, 0xDA	; 218
   188c0:	7f 4f       	sbci	r23, 0xFF	; 255
   188c2:	46 e0       	ldi	r20, 0x06	; 6
   188c4:	50 e0       	ldi	r21, 0x00	; 0
   188c6:	c8 01       	movw	r24, r16
   188c8:	02 96       	adiw	r24, 0x02	; 2
   188ca:	ac de       	rcall	.-680    	; 0x18624 <lif_B2S>
   188cc:	44 e0       	ldi	r20, 0x04	; 4
   188ce:	50 e0       	ldi	r21, 0x00	; 0
   188d0:	68 e0       	ldi	r22, 0x08	; 8
   188d2:	70 e0       	ldi	r23, 0x00	; 0
   188d4:	c8 01       	movw	r24, r16
   188d6:	77 dc       	rcall	.-1810   	; 0x181c6 <B2V_MSB>
   188d8:	6d a7       	std	Y+45, r22	; 0x2d
   188da:	7e a7       	std	Y+46, r23	; 0x2e
   188dc:	8f a7       	std	Y+47, r24	; 0x2f
   188de:	98 ab       	std	Y+48, r25	; 0x30
   188e0:	42 e0       	ldi	r20, 0x02	; 2
   188e2:	50 e0       	ldi	r21, 0x00	; 0
   188e4:	6c e0       	ldi	r22, 0x0C	; 12
   188e6:	70 e0       	ldi	r23, 0x00	; 0
   188e8:	c8 01       	movw	r24, r16
   188ea:	6d dc       	rcall	.-1830   	; 0x181c6 <B2V_MSB>
   188ec:	7a ab       	std	Y+50, r23	; 0x32
   188ee:	69 ab       	std	Y+49, r22	; 0x31
   188f0:	42 e0       	ldi	r20, 0x02	; 2
   188f2:	50 e0       	ldi	r21, 0x00	; 0
   188f4:	6e e0       	ldi	r22, 0x0E	; 14
   188f6:	70 e0       	ldi	r23, 0x00	; 0
   188f8:	c8 01       	movw	r24, r16
   188fa:	65 dc       	rcall	.-1846   	; 0x181c6 <B2V_MSB>
   188fc:	7c ab       	std	Y+52, r23	; 0x34
   188fe:	6b ab       	std	Y+51, r22	; 0x33
   18900:	44 e0       	ldi	r20, 0x04	; 4
   18902:	50 e0       	ldi	r21, 0x00	; 0
   18904:	60 e1       	ldi	r22, 0x10	; 16
   18906:	70 e0       	ldi	r23, 0x00	; 0
   18908:	c8 01       	movw	r24, r16
   1890a:	5d dc       	rcall	.-1862   	; 0x181c6 <B2V_MSB>
   1890c:	6d ab       	std	Y+53, r22	; 0x35
   1890e:	7e ab       	std	Y+54, r23	; 0x36
   18910:	8f ab       	std	Y+55, r24	; 0x37
   18912:	98 af       	std	Y+56, r25	; 0x38
   18914:	42 e0       	ldi	r20, 0x02	; 2
   18916:	50 e0       	ldi	r21, 0x00	; 0
   18918:	64 e1       	ldi	r22, 0x14	; 20
   1891a:	70 e0       	ldi	r23, 0x00	; 0
   1891c:	c8 01       	movw	r24, r16
   1891e:	53 dc       	rcall	.-1882   	; 0x181c6 <B2V_MSB>
   18920:	7a af       	std	Y+58, r23	; 0x3a
   18922:	69 af       	std	Y+57, r22	; 0x39
   18924:	42 e0       	ldi	r20, 0x02	; 2
   18926:	50 e0       	ldi	r21, 0x00	; 0
   18928:	66 e1       	ldi	r22, 0x16	; 22
   1892a:	70 e0       	ldi	r23, 0x00	; 0
   1892c:	c8 01       	movw	r24, r16
   1892e:	4b dc       	rcall	.-1898   	; 0x181c6 <B2V_MSB>
   18930:	7c af       	std	Y+60, r23	; 0x3c
   18932:	6b af       	std	Y+59, r22	; 0x3b
   18934:	44 e0       	ldi	r20, 0x04	; 4
   18936:	50 e0       	ldi	r21, 0x00	; 0
   18938:	68 e1       	ldi	r22, 0x18	; 24
   1893a:	70 e0       	ldi	r23, 0x00	; 0
   1893c:	c8 01       	movw	r24, r16
   1893e:	43 dc       	rcall	.-1914   	; 0x181c6 <B2V_MSB>
   18940:	fe 01       	movw	r30, r28
   18942:	fd 96       	adiw	r30, 0x3d	; 61
   18944:	60 83       	st	Z, r22
   18946:	71 83       	std	Z+1, r23	; 0x01
   18948:	82 83       	std	Z+2, r24	; 0x02
   1894a:	93 83       	std	Z+3, r25	; 0x03
   1894c:	44 e0       	ldi	r20, 0x04	; 4
   1894e:	50 e0       	ldi	r21, 0x00	; 0
   18950:	6c e1       	ldi	r22, 0x1C	; 28
   18952:	70 e0       	ldi	r23, 0x00	; 0
   18954:	c8 01       	movw	r24, r16
   18956:	37 dc       	rcall	.-1938   	; 0x181c6 <B2V_MSB>
   18958:	fe 01       	movw	r30, r28
   1895a:	ef 5b       	subi	r30, 0xBF	; 191
   1895c:	ff 4f       	sbci	r31, 0xFF	; 255
   1895e:	60 83       	st	Z, r22
   18960:	71 83       	std	Z+1, r23	; 0x01
   18962:	82 83       	std	Z+2, r24	; 0x02
   18964:	93 83       	std	Z+3, r25	; 0x03
   18966:	44 e0       	ldi	r20, 0x04	; 4
   18968:	50 e0       	ldi	r21, 0x00	; 0
   1896a:	60 e2       	ldi	r22, 0x20	; 32
   1896c:	70 e0       	ldi	r23, 0x00	; 0
   1896e:	c8 01       	movw	r24, r16
   18970:	2a dc       	rcall	.-1964   	; 0x181c6 <B2V_MSB>
   18972:	fe 01       	movw	r30, r28
   18974:	eb 5b       	subi	r30, 0xBB	; 187
   18976:	ff 4f       	sbci	r31, 0xFF	; 255
   18978:	60 83       	st	Z, r22
   1897a:	71 83       	std	Z+1, r23	; 0x01
   1897c:	82 83       	std	Z+2, r24	; 0x02
   1897e:	93 83       	std	Z+3, r25	; 0x03
   18980:	de 01       	movw	r26, r28
   18982:	a7 5b       	subi	r26, 0xB7	; 183
   18984:	bf 4f       	sbci	r27, 0xFF	; 255
   18986:	f8 01       	movw	r30, r16
   18988:	b4 96       	adiw	r30, 0x24	; 36
   1898a:	86 e0       	ldi	r24, 0x06	; 6
   1898c:	01 90       	ld	r0, Z+
   1898e:	0d 92       	st	X+, r0
   18990:	8a 95       	dec	r24
   18992:	e1 f7       	brne	.-8      	; 0x1898c <lif_str2vol+0xea>
   18994:	df 91       	pop	r29
   18996:	cf 91       	pop	r28
   18998:	1f 91       	pop	r17
   1899a:	0f 91       	pop	r16
   1899c:	08 95       	ret

0001899e <lif_dir2str>:
   1899e:	ef 92       	push	r14
   189a0:	ff 92       	push	r15
   189a2:	0f 93       	push	r16
   189a4:	1f 93       	push	r17
   189a6:	cf 93       	push	r28
   189a8:	df 93       	push	r29
   189aa:	ec 01       	movw	r28, r24
   189ac:	7b 01       	movw	r14, r22
   189ae:	bc 01       	movw	r22, r24
   189b0:	61 5b       	subi	r22, 0xB1	; 177
   189b2:	7f 4f       	sbci	r23, 0xFF	; 255
   189b4:	4a e0       	ldi	r20, 0x0A	; 10
   189b6:	50 e0       	ldi	r21, 0x00	; 0
   189b8:	c7 01       	movw	r24, r14
   189ba:	8b de       	rcall	.-746    	; 0x186d2 <lif_S2B>
   189bc:	fe 01       	movw	r30, r28
   189be:	e6 5a       	subi	r30, 0xA6	; 166
   189c0:	ff 4f       	sbci	r31, 0xFF	; 255
   189c2:	00 81       	ld	r16, Z
   189c4:	11 81       	ldd	r17, Z+1	; 0x01
   189c6:	20 e0       	ldi	r18, 0x00	; 0
   189c8:	30 e0       	ldi	r19, 0x00	; 0
   189ca:	42 e0       	ldi	r20, 0x02	; 2
   189cc:	50 e0       	ldi	r21, 0x00	; 0
   189ce:	6a e0       	ldi	r22, 0x0A	; 10
   189d0:	70 e0       	ldi	r23, 0x00	; 0
   189d2:	c7 01       	movw	r24, r14
   189d4:	cf db       	rcall	.-2146   	; 0x18174 <V2B_MSB>
   189d6:	fe 01       	movw	r30, r28
   189d8:	e4 5a       	subi	r30, 0xA4	; 164
   189da:	ff 4f       	sbci	r31, 0xFF	; 255
   189dc:	00 81       	ld	r16, Z
   189de:	11 81       	ldd	r17, Z+1	; 0x01
   189e0:	22 81       	ldd	r18, Z+2	; 0x02
   189e2:	33 81       	ldd	r19, Z+3	; 0x03
   189e4:	44 e0       	ldi	r20, 0x04	; 4
   189e6:	50 e0       	ldi	r21, 0x00	; 0
   189e8:	6c e0       	ldi	r22, 0x0C	; 12
   189ea:	70 e0       	ldi	r23, 0x00	; 0
   189ec:	c7 01       	movw	r24, r14
   189ee:	c2 db       	rcall	.-2172   	; 0x18174 <V2B_MSB>
   189f0:	fe 01       	movw	r30, r28
   189f2:	e0 5a       	subi	r30, 0xA0	; 160
   189f4:	ff 4f       	sbci	r31, 0xFF	; 255
   189f6:	00 81       	ld	r16, Z
   189f8:	11 81       	ldd	r17, Z+1	; 0x01
   189fa:	22 81       	ldd	r18, Z+2	; 0x02
   189fc:	33 81       	ldd	r19, Z+3	; 0x03
   189fe:	44 e0       	ldi	r20, 0x04	; 4
   18a00:	50 e0       	ldi	r21, 0x00	; 0
   18a02:	60 e1       	ldi	r22, 0x10	; 16
   18a04:	70 e0       	ldi	r23, 0x00	; 0
   18a06:	c7 01       	movw	r24, r14
   18a08:	b5 db       	rcall	.-2198   	; 0x18174 <V2B_MSB>
   18a0a:	d7 01       	movw	r26, r14
   18a0c:	54 96       	adiw	r26, 0x14	; 20
   18a0e:	fe 01       	movw	r30, r28
   18a10:	ec 59       	subi	r30, 0x9C	; 156
   18a12:	ff 4f       	sbci	r31, 0xFF	; 255
   18a14:	86 e0       	ldi	r24, 0x06	; 6
   18a16:	01 90       	ld	r0, Z+
   18a18:	0d 92       	st	X+, r0
   18a1a:	8a 95       	dec	r24
   18a1c:	e1 f7       	brne	.-8      	; 0x18a16 <lif_dir2str+0x78>
   18a1e:	fe 01       	movw	r30, r28
   18a20:	e6 59       	subi	r30, 0x96	; 150
   18a22:	ff 4f       	sbci	r31, 0xFF	; 255
   18a24:	00 81       	ld	r16, Z
   18a26:	11 81       	ldd	r17, Z+1	; 0x01
   18a28:	20 e0       	ldi	r18, 0x00	; 0
   18a2a:	30 e0       	ldi	r19, 0x00	; 0
   18a2c:	42 e0       	ldi	r20, 0x02	; 2
   18a2e:	50 e0       	ldi	r21, 0x00	; 0
   18a30:	6a e1       	ldi	r22, 0x1A	; 26
   18a32:	70 e0       	ldi	r23, 0x00	; 0
   18a34:	c7 01       	movw	r24, r14
   18a36:	9e db       	rcall	.-2244   	; 0x18174 <V2B_MSB>
   18a38:	fe 01       	movw	r30, r28
   18a3a:	e4 59       	subi	r30, 0x94	; 148
   18a3c:	ff 4f       	sbci	r31, 0xFF	; 255
   18a3e:	00 81       	ld	r16, Z
   18a40:	11 81       	ldd	r17, Z+1	; 0x01
   18a42:	20 e0       	ldi	r18, 0x00	; 0
   18a44:	30 e0       	ldi	r19, 0x00	; 0
   18a46:	42 e0       	ldi	r20, 0x02	; 2
   18a48:	50 e0       	ldi	r21, 0x00	; 0
   18a4a:	6c e1       	ldi	r22, 0x1C	; 28
   18a4c:	70 e0       	ldi	r23, 0x00	; 0
   18a4e:	c7 01       	movw	r24, r14
   18a50:	a5 db       	rcall	.-2230   	; 0x1819c <V2B_LSB>
   18a52:	c2 59       	subi	r28, 0x92	; 146
   18a54:	df 4f       	sbci	r29, 0xFF	; 255
   18a56:	08 81       	ld	r16, Y
   18a58:	19 81       	ldd	r17, Y+1	; 0x01
   18a5a:	20 e0       	ldi	r18, 0x00	; 0
   18a5c:	30 e0       	ldi	r19, 0x00	; 0
   18a5e:	42 e0       	ldi	r20, 0x02	; 2
   18a60:	50 e0       	ldi	r21, 0x00	; 0
   18a62:	6e e1       	ldi	r22, 0x1E	; 30
   18a64:	70 e0       	ldi	r23, 0x00	; 0
   18a66:	c7 01       	movw	r24, r14
   18a68:	99 db       	rcall	.-2254   	; 0x1819c <V2B_LSB>
   18a6a:	cd b7       	in	r28, 0x3d	; 61
   18a6c:	de b7       	in	r29, 0x3e	; 62
   18a6e:	e6 e0       	ldi	r30, 0x06	; 6
   18a70:	0c 94 bb e7 	jmp	0x1cf76	; 0x1cf76 <__epilogue_restores__+0x18>

00018a74 <lif_str2dir>:
   18a74:	0f 93       	push	r16
   18a76:	1f 93       	push	r17
   18a78:	cf 93       	push	r28
   18a7a:	df 93       	push	r29
   18a7c:	8c 01       	movw	r16, r24
   18a7e:	eb 01       	movw	r28, r22
   18a80:	61 5b       	subi	r22, 0xB1	; 177
   18a82:	7f 4f       	sbci	r23, 0xFF	; 255
   18a84:	4a e0       	ldi	r20, 0x0A	; 10
   18a86:	50 e0       	ldi	r21, 0x00	; 0
   18a88:	cd dd       	rcall	.-1126   	; 0x18624 <lif_B2S>
   18a8a:	42 e0       	ldi	r20, 0x02	; 2
   18a8c:	50 e0       	ldi	r21, 0x00	; 0
   18a8e:	6a e0       	ldi	r22, 0x0A	; 10
   18a90:	70 e0       	ldi	r23, 0x00	; 0
   18a92:	c8 01       	movw	r24, r16
   18a94:	98 db       	rcall	.-2256   	; 0x181c6 <B2V_MSB>
   18a96:	fe 01       	movw	r30, r28
   18a98:	e6 5a       	subi	r30, 0xA6	; 166
   18a9a:	ff 4f       	sbci	r31, 0xFF	; 255
   18a9c:	71 83       	std	Z+1, r23	; 0x01
   18a9e:	60 83       	st	Z, r22
   18aa0:	44 e0       	ldi	r20, 0x04	; 4
   18aa2:	50 e0       	ldi	r21, 0x00	; 0
   18aa4:	6c e0       	ldi	r22, 0x0C	; 12
   18aa6:	70 e0       	ldi	r23, 0x00	; 0
   18aa8:	c8 01       	movw	r24, r16
   18aaa:	8d db       	rcall	.-2278   	; 0x181c6 <B2V_MSB>
   18aac:	fe 01       	movw	r30, r28
   18aae:	e4 5a       	subi	r30, 0xA4	; 164
   18ab0:	ff 4f       	sbci	r31, 0xFF	; 255
   18ab2:	60 83       	st	Z, r22
   18ab4:	71 83       	std	Z+1, r23	; 0x01
   18ab6:	82 83       	std	Z+2, r24	; 0x02
   18ab8:	93 83       	std	Z+3, r25	; 0x03
   18aba:	44 e0       	ldi	r20, 0x04	; 4
   18abc:	50 e0       	ldi	r21, 0x00	; 0
   18abe:	60 e1       	ldi	r22, 0x10	; 16
   18ac0:	70 e0       	ldi	r23, 0x00	; 0
   18ac2:	c8 01       	movw	r24, r16
   18ac4:	80 db       	rcall	.-2304   	; 0x181c6 <B2V_MSB>
   18ac6:	fe 01       	movw	r30, r28
   18ac8:	e0 5a       	subi	r30, 0xA0	; 160
   18aca:	ff 4f       	sbci	r31, 0xFF	; 255
   18acc:	60 83       	st	Z, r22
   18ace:	71 83       	std	Z+1, r23	; 0x01
   18ad0:	82 83       	std	Z+2, r24	; 0x02
   18ad2:	93 83       	std	Z+3, r25	; 0x03
   18ad4:	de 01       	movw	r26, r28
   18ad6:	ac 59       	subi	r26, 0x9C	; 156
   18ad8:	bf 4f       	sbci	r27, 0xFF	; 255
   18ada:	f8 01       	movw	r30, r16
   18adc:	74 96       	adiw	r30, 0x14	; 20
   18ade:	86 e0       	ldi	r24, 0x06	; 6
   18ae0:	01 90       	ld	r0, Z+
   18ae2:	0d 92       	st	X+, r0
   18ae4:	8a 95       	dec	r24
   18ae6:	e1 f7       	brne	.-8      	; 0x18ae0 <lif_str2dir+0x6c>
   18ae8:	42 e0       	ldi	r20, 0x02	; 2
   18aea:	50 e0       	ldi	r21, 0x00	; 0
   18aec:	6a e1       	ldi	r22, 0x1A	; 26
   18aee:	70 e0       	ldi	r23, 0x00	; 0
   18af0:	c8 01       	movw	r24, r16
   18af2:	69 db       	rcall	.-2350   	; 0x181c6 <B2V_MSB>
   18af4:	fe 01       	movw	r30, r28
   18af6:	e6 59       	subi	r30, 0x96	; 150
   18af8:	ff 4f       	sbci	r31, 0xFF	; 255
   18afa:	71 83       	std	Z+1, r23	; 0x01
   18afc:	60 83       	st	Z, r22
   18afe:	42 e0       	ldi	r20, 0x02	; 2
   18b00:	50 e0       	ldi	r21, 0x00	; 0
   18b02:	6c e1       	ldi	r22, 0x1C	; 28
   18b04:	70 e0       	ldi	r23, 0x00	; 0
   18b06:	c8 01       	movw	r24, r16
   18b08:	7d db       	rcall	.-2310   	; 0x18204 <B2V_LSB>
   18b0a:	fe 01       	movw	r30, r28
   18b0c:	e4 59       	subi	r30, 0x94	; 148
   18b0e:	ff 4f       	sbci	r31, 0xFF	; 255
   18b10:	71 83       	std	Z+1, r23	; 0x01
   18b12:	60 83       	st	Z, r22
   18b14:	42 e0       	ldi	r20, 0x02	; 2
   18b16:	50 e0       	ldi	r21, 0x00	; 0
   18b18:	6e e1       	ldi	r22, 0x1E	; 30
   18b1a:	70 e0       	ldi	r23, 0x00	; 0
   18b1c:	c8 01       	movw	r24, r16
   18b1e:	72 db       	rcall	.-2332   	; 0x18204 <B2V_LSB>
   18b20:	c2 59       	subi	r28, 0x92	; 146
   18b22:	df 4f       	sbci	r29, 0xFF	; 255
   18b24:	79 83       	std	Y+1, r23	; 0x01
   18b26:	68 83       	st	Y, r22
   18b28:	df 91       	pop	r29
   18b2a:	cf 91       	pop	r28
   18b2c:	1f 91       	pop	r17
   18b2e:	0f 91       	pop	r16
   18b30:	08 95       	ret

00018b32 <lif_BIN2BCD>:
   18b32:	6a e0       	ldi	r22, 0x0A	; 10
   18b34:	0e 94 f3 e6 	call	0x1cde6	; 0x1cde6 <__udivmodqi4>
   18b38:	82 95       	swap	r24
   18b3a:	80 7f       	andi	r24, 0xF0	; 240
   18b3c:	89 2b       	or	r24, r25
   18b3e:	08 95       	ret

00018b40 <lif_BCD2BIN>:
   18b40:	28 2f       	mov	r18, r24
   18b42:	22 95       	swap	r18
   18b44:	2f 70       	andi	r18, 0x0F	; 15
   18b46:	8f 70       	andi	r24, 0x0F	; 15
   18b48:	90 e0       	ldi	r25, 0x00	; 0
   18b4a:	3a e0       	ldi	r19, 0x0A	; 10
   18b4c:	23 9f       	mul	r18, r19
   18b4e:	80 0d       	add	r24, r0
   18b50:	91 1d       	adc	r25, r1
   18b52:	11 24       	eor	r1, r1
   18b54:	08 95       	ret

00018b56 <lif_time2lifbcd>:
   18b56:	aa e1       	ldi	r26, 0x1A	; 26
   18b58:	b0 e0       	ldi	r27, 0x00	; 0
   18b5a:	e1 eb       	ldi	r30, 0xB1	; 177
   18b5c:	f5 ec       	ldi	r31, 0xC5	; 197
   18b5e:	0c 94 a1 e7 	jmp	0x1cf42	; 0x1cf42 <__prologue_saves__+0x1c>
   18b62:	8b 01       	movw	r16, r22
   18b64:	9c 01       	movw	r18, r24
   18b66:	6f 8b       	std	Y+23, r22	; 0x17
   18b68:	78 8f       	std	Y+24, r23	; 0x18
   18b6a:	89 8f       	std	Y+25, r24	; 0x19
   18b6c:	9a 8f       	std	Y+26, r25	; 0x1a
   18b6e:	67 2b       	or	r22, r23
   18b70:	68 2b       	or	r22, r24
   18b72:	69 2b       	or	r22, r25
   18b74:	41 f4       	brne	.+16     	; 0x18b86 <lif_time2lifbcd+0x30>
   18b76:	fa 01       	movw	r30, r20
   18b78:	ca 01       	movw	r24, r20
   18b7a:	06 96       	adiw	r24, 0x06	; 6
   18b7c:	11 92       	st	Z+, r1
   18b7e:	e8 17       	cp	r30, r24
   18b80:	f9 07       	cpc	r31, r25
   18b82:	e1 f7       	brne	.-8      	; 0x18b7c <lif_time2lifbcd+0x26>
   18b84:	26 c0       	rjmp	.+76     	; 0x18bd2 <lif_time2lifbcd+0x7c>
   18b86:	8a 01       	movw	r16, r20
   18b88:	be 01       	movw	r22, r28
   18b8a:	6f 5f       	subi	r22, 0xFF	; 255
   18b8c:	7f 4f       	sbci	r23, 0xFF	; 255
   18b8e:	ce 01       	movw	r24, r28
   18b90:	47 96       	adiw	r24, 0x17	; 23
   18b92:	0e 94 04 38 	call	0x7008	; 0x7008 <gmtime_r>
   18b96:	8b 85       	ldd	r24, Y+11	; 0x0b
   18b98:	9c 85       	ldd	r25, Y+12	; 0x0c
   18b9a:	64 e6       	ldi	r22, 0x64	; 100
   18b9c:	70 e0       	ldi	r23, 0x00	; 0
   18b9e:	0e 94 13 e7 	call	0x1ce26	; 0x1ce26 <__divmodhi4>
   18ba2:	c7 df       	rcall	.-114    	; 0x18b32 <lif_BIN2BCD>
   18ba4:	f8 01       	movw	r30, r16
   18ba6:	80 83       	st	Z, r24
   18ba8:	89 85       	ldd	r24, Y+9	; 0x09
   18baa:	8f 5f       	subi	r24, 0xFF	; 255
   18bac:	c2 df       	rcall	.-124    	; 0x18b32 <lif_BIN2BCD>
   18bae:	f8 01       	movw	r30, r16
   18bb0:	81 83       	std	Z+1, r24	; 0x01
   18bb2:	8f 81       	ldd	r24, Y+7	; 0x07
   18bb4:	be df       	rcall	.-132    	; 0x18b32 <lif_BIN2BCD>
   18bb6:	f8 01       	movw	r30, r16
   18bb8:	82 83       	std	Z+2, r24	; 0x02
   18bba:	8d 81       	ldd	r24, Y+5	; 0x05
   18bbc:	ba df       	rcall	.-140    	; 0x18b32 <lif_BIN2BCD>
   18bbe:	f8 01       	movw	r30, r16
   18bc0:	83 83       	std	Z+3, r24	; 0x03
   18bc2:	8b 81       	ldd	r24, Y+3	; 0x03
   18bc4:	b6 df       	rcall	.-148    	; 0x18b32 <lif_BIN2BCD>
   18bc6:	f8 01       	movw	r30, r16
   18bc8:	84 83       	std	Z+4, r24	; 0x04
   18bca:	89 81       	ldd	r24, Y+1	; 0x01
   18bcc:	b2 df       	rcall	.-156    	; 0x18b32 <lif_BIN2BCD>
   18bce:	f8 01       	movw	r30, r16
   18bd0:	85 83       	std	Z+5, r24	; 0x05
   18bd2:	6a 96       	adiw	r28, 0x1a	; 26
   18bd4:	e4 e0       	ldi	r30, 0x04	; 4
   18bd6:	0c 94 bd e7 	jmp	0x1cf7a	; 0x1cf7a <__epilogue_restores__+0x1c>

00018bda <lif_lifbcd2time>:
   18bda:	a6 e1       	ldi	r26, 0x16	; 22
   18bdc:	b0 e0       	ldi	r27, 0x00	; 0
   18bde:	e3 ef       	ldi	r30, 0xF3	; 243
   18be0:	f5 ec       	ldi	r31, 0xC5	; 197
   18be2:	0c 94 9b e7 	jmp	0x1cf36	; 0x1cf36 <__prologue_saves__+0x10>
   18be6:	8c 01       	movw	r16, r24
   18be8:	7c 01       	movw	r14, r24
   18bea:	5c 01       	movw	r10, r24
   18bec:	26 e0       	ldi	r18, 0x06	; 6
   18bee:	a2 0e       	add	r10, r18
   18bf0:	b1 1c       	adc	r11, r1
   18bf2:	cc 24       	eor	r12, r12
   18bf4:	c3 94       	inc	r12
   18bf6:	d1 2c       	mov	r13, r1
   18bf8:	f7 01       	movw	r30, r14
   18bfa:	81 91       	ld	r24, Z+
   18bfc:	7f 01       	movw	r14, r30
   18bfe:	a0 df       	rcall	.-192    	; 0x18b40 <lif_BCD2BIN>
   18c00:	89 2b       	or	r24, r25
   18c02:	11 f0       	breq	.+4      	; 0x18c08 <lif_lifbcd2time+0x2e>
   18c04:	c1 2c       	mov	r12, r1
   18c06:	d1 2c       	mov	r13, r1
   18c08:	ea 14       	cp	r14, r10
   18c0a:	fb 04       	cpc	r15, r11
   18c0c:	a9 f7       	brne	.-22     	; 0x18bf8 <lif_lifbcd2time+0x1e>
   18c0e:	c1 14       	cp	r12, r1
   18c10:	d1 04       	cpc	r13, r1
   18c12:	61 f5       	brne	.+88     	; 0x18c6c <lif_lifbcd2time+0x92>
   18c14:	f8 01       	movw	r30, r16
   18c16:	80 81       	ld	r24, Z
   18c18:	93 df       	rcall	.-218    	; 0x18b40 <lif_BCD2BIN>
   18c1a:	7c 01       	movw	r14, r24
   18c1c:	f8 01       	movw	r30, r16
   18c1e:	81 81       	ldd	r24, Z+1	; 0x01
   18c20:	8f df       	rcall	.-226    	; 0x18b40 <lif_BCD2BIN>
   18c22:	01 97       	sbiw	r24, 0x01	; 1
   18c24:	f6 e4       	ldi	r31, 0x46	; 70
   18c26:	ef 16       	cp	r14, r31
   18c28:	f1 04       	cpc	r15, r1
   18c2a:	1c f4       	brge	.+6      	; 0x18c32 <lif_lifbcd2time+0x58>
   18c2c:	24 e6       	ldi	r18, 0x64	; 100
   18c2e:	e2 0e       	add	r14, r18
   18c30:	f1 1c       	adc	r15, r1
   18c32:	fc 86       	std	Y+12, r15	; 0x0c
   18c34:	eb 86       	std	Y+11, r14	; 0x0b
   18c36:	9a 87       	std	Y+10, r25	; 0x0a
   18c38:	89 87       	std	Y+9, r24	; 0x09
   18c3a:	f8 01       	movw	r30, r16
   18c3c:	82 81       	ldd	r24, Z+2	; 0x02
   18c3e:	80 df       	rcall	.-256    	; 0x18b40 <lif_BCD2BIN>
   18c40:	98 87       	std	Y+8, r25	; 0x08
   18c42:	8f 83       	std	Y+7, r24	; 0x07
   18c44:	f8 01       	movw	r30, r16
   18c46:	83 81       	ldd	r24, Z+3	; 0x03
   18c48:	7b df       	rcall	.-266    	; 0x18b40 <lif_BCD2BIN>
   18c4a:	9e 83       	std	Y+6, r25	; 0x06
   18c4c:	8d 83       	std	Y+5, r24	; 0x05
   18c4e:	f8 01       	movw	r30, r16
   18c50:	84 81       	ldd	r24, Z+4	; 0x04
   18c52:	76 df       	rcall	.-276    	; 0x18b40 <lif_BCD2BIN>
   18c54:	9c 83       	std	Y+4, r25	; 0x04
   18c56:	8b 83       	std	Y+3, r24	; 0x03
   18c58:	f8 01       	movw	r30, r16
   18c5a:	85 81       	ldd	r24, Z+5	; 0x05
   18c5c:	71 df       	rcall	.-286    	; 0x18b40 <lif_BCD2BIN>
   18c5e:	9a 83       	std	Y+2, r25	; 0x02
   18c60:	89 83       	std	Y+1, r24	; 0x01
   18c62:	ce 01       	movw	r24, r28
   18c64:	01 96       	adiw	r24, 0x01	; 1
   18c66:	0e 94 d8 3a 	call	0x75b0	; 0x75b0 <timegm>
   18c6a:	03 c0       	rjmp	.+6      	; 0x18c72 <lif_lifbcd2time+0x98>
   18c6c:	60 e0       	ldi	r22, 0x00	; 0
   18c6e:	70 e0       	ldi	r23, 0x00	; 0
   18c70:	cb 01       	movw	r24, r22
   18c72:	66 96       	adiw	r28, 0x16	; 22
   18c74:	ea e0       	ldi	r30, 0x0A	; 10
   18c76:	0c 94 b7 e7 	jmp	0x1cf6e	; 0x1cf6e <__epilogue_restores__+0x10>

00018c7a <lif_ctime_gmt>:
   18c7a:	a6 e1       	ldi	r26, 0x16	; 22
   18c7c:	b0 e0       	ldi	r27, 0x00	; 0
   18c7e:	e3 e4       	ldi	r30, 0x43	; 67
   18c80:	f6 ec       	ldi	r31, 0xC6	; 198
   18c82:	0c 94 a1 e7 	jmp	0x1cf42	; 0x1cf42 <__prologue_saves__+0x1c>
   18c86:	20 e2       	ldi	r18, 0x20	; 32
   18c88:	e0 ec       	ldi	r30, 0xC0	; 192
   18c8a:	f9 e1       	ldi	r31, 0x19	; 25
   18c8c:	df 01       	movw	r26, r30
   18c8e:	1d 92       	st	X+, r1
   18c90:	2a 95       	dec	r18
   18c92:	e9 f7       	brne	.-6      	; 0x18c8e <lif_ctime_gmt+0x14>
   18c94:	be 01       	movw	r22, r28
   18c96:	6f 5f       	subi	r22, 0xFF	; 255
   18c98:	7f 4f       	sbci	r23, 0xFF	; 255
   18c9a:	0e 94 04 38 	call	0x7008	; 0x7008 <gmtime_r>
   18c9e:	60 ec       	ldi	r22, 0xC0	; 192
   18ca0:	79 e1       	ldi	r23, 0x19	; 25
   18ca2:	0e 94 34 3d 	call	0x7a68	; 0x7a68 <asctime_r>
   18ca6:	8c 01       	movw	r16, r24
   18ca8:	0e 94 90 32 	call	0x6520	; 0x6520 <trim_tail>
   18cac:	c8 01       	movw	r24, r16
   18cae:	66 96       	adiw	r28, 0x16	; 22
   18cb0:	e4 e0       	ldi	r30, 0x04	; 4
   18cb2:	0c 94 bd e7 	jmp	0x1cf7a	; 0x1cf7a <__epilogue_restores__+0x1c>

00018cb6 <lif_lifbcd2timestr>:
   18cb6:	a4 e0       	ldi	r26, 0x04	; 4
   18cb8:	b0 e0       	ldi	r27, 0x00	; 0
   18cba:	e1 e6       	ldi	r30, 0x61	; 97
   18cbc:	f6 ec       	ldi	r31, 0xC6	; 198
   18cbe:	0c 94 a3 e7 	jmp	0x1cf46	; 0x1cf46 <__prologue_saves__+0x20>
   18cc2:	20 e2       	ldi	r18, 0x20	; 32
   18cc4:	e0 ea       	ldi	r30, 0xA0	; 160
   18cc6:	f9 e1       	ldi	r31, 0x19	; 25
   18cc8:	df 01       	movw	r26, r30
   18cca:	1d 92       	st	X+, r1
   18ccc:	2a 95       	dec	r18
   18cce:	e9 f7       	brne	.-6      	; 0x18cca <lif_lifbcd2timestr+0x14>
   18cd0:	84 df       	rcall	.-248    	; 0x18bda <lif_lifbcd2time>
   18cd2:	69 83       	std	Y+1, r22	; 0x01
   18cd4:	7a 83       	std	Y+2, r23	; 0x02
   18cd6:	8b 83       	std	Y+3, r24	; 0x03
   18cd8:	9c 83       	std	Y+4, r25	; 0x04
   18cda:	67 2b       	or	r22, r23
   18cdc:	68 2b       	or	r22, r24
   18cde:	69 2b       	or	r22, r25
   18ce0:	29 f0       	breq	.+10     	; 0x18cec <lif_lifbcd2timestr+0x36>
   18ce2:	ce 01       	movw	r24, r28
   18ce4:	01 96       	adiw	r24, 0x01	; 1
   18ce6:	c9 df       	rcall	.-110    	; 0x18c7a <lif_ctime_gmt>
   18ce8:	bc 01       	movw	r22, r24
   18cea:	02 c0       	rjmp	.+4      	; 0x18cf0 <lif_lifbcd2timestr+0x3a>
   18cec:	6d ed       	ldi	r22, 0xDD	; 221
   18cee:	75 e1       	ldi	r23, 0x15	; 21
   18cf0:	80 ea       	ldi	r24, 0xA0	; 160
   18cf2:	99 e1       	ldi	r25, 0x19	; 25
   18cf4:	0e 94 b2 31 	call	0x6364	; 0x6364 <strcpy>
   18cf8:	80 ea       	ldi	r24, 0xA0	; 160
   18cfa:	99 e1       	ldi	r25, 0x19	; 25
   18cfc:	24 96       	adiw	r28, 0x04	; 4
   18cfe:	e2 e0       	ldi	r30, 0x02	; 2
   18d00:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

00018d04 <lif_image_clear>:
   18d04:	20 e7       	ldi	r18, 0x70	; 112
   18d06:	fc 01       	movw	r30, r24
   18d08:	11 92       	st	Z+, r1
   18d0a:	2a 95       	dec	r18
   18d0c:	e9 f7       	brne	.-6      	; 0x18d08 <lif_image_clear+0x4>
   18d0e:	08 95       	ret

00018d10 <lif_dir_clear>:
   18d10:	81 5b       	subi	r24, 0xB1	; 177
   18d12:	9f 4f       	sbci	r25, 0xFF	; 255
   18d14:	21 e2       	ldi	r18, 0x21	; 33
   18d16:	fc 01       	movw	r30, r24
   18d18:	11 92       	st	Z+, r1
   18d1a:	2a 95       	dec	r18
   18d1c:	e9 f7       	brne	.-6      	; 0x18d18 <lif_dir_clear+0x8>
   18d1e:	08 95       	ret

00018d20 <lif_vol_clear>:
   18d20:	84 96       	adiw	r24, 0x24	; 36
   18d22:	2b e2       	ldi	r18, 0x2B	; 43
   18d24:	fc 01       	movw	r30, r24
   18d26:	11 92       	st	Z+, r1
   18d28:	2a 95       	dec	r18
   18d2a:	e9 f7       	brne	.-6      	; 0x18d26 <lif_vol_clear+0x6>
   18d2c:	08 95       	ret

00018d2e <lif_dump_vol>:
   18d2e:	cf 93       	push	r28
   18d30:	df 93       	push	r29
   18d32:	ad b7       	in	r26, 0x3d	; 61
   18d34:	be b7       	in	r27, 0x3e	; 62
   18d36:	17 97       	sbiw	r26, 0x07	; 7
   18d38:	0f b6       	in	r0, 0x3f	; 63
   18d3a:	f8 94       	cli
   18d3c:	be bf       	out	0x3e, r27	; 62
   18d3e:	0f be       	out	0x3f, r0	; 63
   18d40:	ad bf       	out	0x3d, r26	; 61
   18d42:	ec 01       	movw	r28, r24
   18d44:	ed b7       	in	r30, 0x3d	; 61
   18d46:	fe b7       	in	r31, 0x3e	; 62
   18d48:	75 83       	std	Z+5, r23	; 0x05
   18d4a:	64 83       	std	Z+4, r22	; 0x04
   18d4c:	84 e0       	ldi	r24, 0x04	; 4
   18d4e:	93 e4       	ldi	r25, 0x43	; 67
   18d50:	a0 e0       	ldi	r26, 0x00	; 0
   18d52:	81 83       	std	Z+1, r24	; 0x01
   18d54:	92 83       	std	Z+2, r25	; 0x02
   18d56:	a3 83       	std	Z+3, r26	; 0x03
   18d58:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   18d5c:	88 81       	ld	r24, Y
   18d5e:	99 81       	ldd	r25, Y+1	; 0x01
   18d60:	ed b7       	in	r30, 0x3d	; 61
   18d62:	fe b7       	in	r31, 0x3e	; 62
   18d64:	95 83       	std	Z+5, r25	; 0x05
   18d66:	84 83       	std	Z+4, r24	; 0x04
   18d68:	8a ee       	ldi	r24, 0xEA	; 234
   18d6a:	92 e4       	ldi	r25, 0x42	; 66
   18d6c:	a0 e0       	ldi	r26, 0x00	; 0
   18d6e:	81 83       	std	Z+1, r24	; 0x01
   18d70:	92 83       	std	Z+2, r25	; 0x02
   18d72:	a3 83       	std	Z+3, r26	; 0x03
   18d74:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   18d78:	8c 81       	ldd	r24, Y+4	; 0x04
   18d7a:	9d 81       	ldd	r25, Y+5	; 0x05
   18d7c:	ae 81       	ldd	r26, Y+6	; 0x06
   18d7e:	bf 81       	ldd	r27, Y+7	; 0x07
   18d80:	ed b7       	in	r30, 0x3d	; 61
   18d82:	fe b7       	in	r31, 0x3e	; 62
   18d84:	84 83       	std	Z+4, r24	; 0x04
   18d86:	95 83       	std	Z+5, r25	; 0x05
   18d88:	a6 83       	std	Z+6, r26	; 0x06
   18d8a:	b7 83       	std	Z+7, r27	; 0x07
   18d8c:	8d ec       	ldi	r24, 0xCD	; 205
   18d8e:	92 e4       	ldi	r25, 0x42	; 66
   18d90:	a0 e0       	ldi	r26, 0x00	; 0
   18d92:	81 83       	std	Z+1, r24	; 0x01
   18d94:	92 83       	std	Z+2, r25	; 0x02
   18d96:	a3 83       	std	Z+3, r26	; 0x03
   18d98:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   18d9c:	88 85       	ldd	r24, Y+8	; 0x08
   18d9e:	99 85       	ldd	r25, Y+9	; 0x09
   18da0:	aa 85       	ldd	r26, Y+10	; 0x0a
   18da2:	bb 85       	ldd	r27, Y+11	; 0x0b
   18da4:	ed b7       	in	r30, 0x3d	; 61
   18da6:	fe b7       	in	r31, 0x3e	; 62
   18da8:	84 83       	std	Z+4, r24	; 0x04
   18daa:	95 83       	std	Z+5, r25	; 0x05
   18dac:	a6 83       	std	Z+6, r26	; 0x06
   18dae:	b7 83       	std	Z+7, r27	; 0x07
   18db0:	80 eb       	ldi	r24, 0xB0	; 176
   18db2:	92 e4       	ldi	r25, 0x42	; 66
   18db4:	a0 e0       	ldi	r26, 0x00	; 0
   18db6:	81 83       	std	Z+1, r24	; 0x01
   18db8:	92 83       	std	Z+2, r25	; 0x02
   18dba:	a3 83       	std	Z+3, r26	; 0x03
   18dbc:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   18dc0:	8c 85       	ldd	r24, Y+12	; 0x0c
   18dc2:	9d 85       	ldd	r25, Y+13	; 0x0d
   18dc4:	ae 85       	ldd	r26, Y+14	; 0x0e
   18dc6:	bf 85       	ldd	r27, Y+15	; 0x0f
   18dc8:	ed b7       	in	r30, 0x3d	; 61
   18dca:	fe b7       	in	r31, 0x3e	; 62
   18dcc:	84 83       	std	Z+4, r24	; 0x04
   18dce:	95 83       	std	Z+5, r25	; 0x05
   18dd0:	a6 83       	std	Z+6, r26	; 0x06
   18dd2:	b7 83       	std	Z+7, r27	; 0x07
   18dd4:	83 e9       	ldi	r24, 0x93	; 147
   18dd6:	92 e4       	ldi	r25, 0x42	; 66
   18dd8:	a0 e0       	ldi	r26, 0x00	; 0
   18dda:	81 83       	std	Z+1, r24	; 0x01
   18ddc:	92 83       	std	Z+2, r25	; 0x02
   18dde:	a3 83       	std	Z+3, r26	; 0x03
   18de0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   18de4:	88 89       	ldd	r24, Y+16	; 0x10
   18de6:	99 89       	ldd	r25, Y+17	; 0x11
   18de8:	aa 89       	ldd	r26, Y+18	; 0x12
   18dea:	bb 89       	ldd	r27, Y+19	; 0x13
   18dec:	ed b7       	in	r30, 0x3d	; 61
   18dee:	fe b7       	in	r31, 0x3e	; 62
   18df0:	84 83       	std	Z+4, r24	; 0x04
   18df2:	95 83       	std	Z+5, r25	; 0x05
   18df4:	a6 83       	std	Z+6, r26	; 0x06
   18df6:	b7 83       	std	Z+7, r27	; 0x07
   18df8:	86 e7       	ldi	r24, 0x76	; 118
   18dfa:	92 e4       	ldi	r25, 0x42	; 66
   18dfc:	a0 e0       	ldi	r26, 0x00	; 0
   18dfe:	81 83       	std	Z+1, r24	; 0x01
   18e00:	92 83       	std	Z+2, r25	; 0x02
   18e02:	a3 83       	std	Z+3, r26	; 0x03
   18e04:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   18e08:	8c 89       	ldd	r24, Y+20	; 0x14
   18e0a:	9d 89       	ldd	r25, Y+21	; 0x15
   18e0c:	ae 89       	ldd	r26, Y+22	; 0x16
   18e0e:	bf 89       	ldd	r27, Y+23	; 0x17
   18e10:	ed b7       	in	r30, 0x3d	; 61
   18e12:	fe b7       	in	r31, 0x3e	; 62
   18e14:	84 83       	std	Z+4, r24	; 0x04
   18e16:	95 83       	std	Z+5, r25	; 0x05
   18e18:	a6 83       	std	Z+6, r26	; 0x06
   18e1a:	b7 83       	std	Z+7, r27	; 0x07
   18e1c:	89 e5       	ldi	r24, 0x59	; 89
   18e1e:	92 e4       	ldi	r25, 0x42	; 66
   18e20:	a0 e0       	ldi	r26, 0x00	; 0
   18e22:	81 83       	std	Z+1, r24	; 0x01
   18e24:	92 83       	std	Z+2, r25	; 0x02
   18e26:	a3 83       	std	Z+3, r26	; 0x03
   18e28:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   18e2c:	88 8d       	ldd	r24, Y+24	; 0x18
   18e2e:	99 8d       	ldd	r25, Y+25	; 0x19
   18e30:	aa 8d       	ldd	r26, Y+26	; 0x1a
   18e32:	bb 8d       	ldd	r27, Y+27	; 0x1b
   18e34:	ed b7       	in	r30, 0x3d	; 61
   18e36:	fe b7       	in	r31, 0x3e	; 62
   18e38:	84 83       	std	Z+4, r24	; 0x04
   18e3a:	95 83       	std	Z+5, r25	; 0x05
   18e3c:	a6 83       	std	Z+6, r26	; 0x06
   18e3e:	b7 83       	std	Z+7, r27	; 0x07
   18e40:	8c e3       	ldi	r24, 0x3C	; 60
   18e42:	92 e4       	ldi	r25, 0x42	; 66
   18e44:	a0 e0       	ldi	r26, 0x00	; 0
   18e46:	81 83       	std	Z+1, r24	; 0x01
   18e48:	92 83       	std	Z+2, r25	; 0x02
   18e4a:	a3 83       	std	Z+3, r26	; 0x03
   18e4c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   18e50:	8c 8d       	ldd	r24, Y+28	; 0x1c
   18e52:	9d 8d       	ldd	r25, Y+29	; 0x1d
   18e54:	09 2e       	mov	r0, r25
   18e56:	00 0c       	add	r0, r0
   18e58:	aa 0b       	sbc	r26, r26
   18e5a:	bb 0b       	sbc	r27, r27
   18e5c:	ed b7       	in	r30, 0x3d	; 61
   18e5e:	fe b7       	in	r31, 0x3e	; 62
   18e60:	84 83       	std	Z+4, r24	; 0x04
   18e62:	95 83       	std	Z+5, r25	; 0x05
   18e64:	a6 83       	std	Z+6, r26	; 0x06
   18e66:	b7 83       	std	Z+7, r27	; 0x07
   18e68:	8f e1       	ldi	r24, 0x1F	; 31
   18e6a:	92 e4       	ldi	r25, 0x42	; 66
   18e6c:	a0 e0       	ldi	r26, 0x00	; 0
   18e6e:	81 83       	std	Z+1, r24	; 0x01
   18e70:	92 83       	std	Z+2, r25	; 0x02
   18e72:	a3 83       	std	Z+3, r26	; 0x03
   18e74:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   18e78:	8e 8d       	ldd	r24, Y+30	; 0x1e
   18e7a:	9f 8d       	ldd	r25, Y+31	; 0x1f
   18e7c:	09 2e       	mov	r0, r25
   18e7e:	00 0c       	add	r0, r0
   18e80:	aa 0b       	sbc	r26, r26
   18e82:	bb 0b       	sbc	r27, r27
   18e84:	ed b7       	in	r30, 0x3d	; 61
   18e86:	fe b7       	in	r31, 0x3e	; 62
   18e88:	84 83       	std	Z+4, r24	; 0x04
   18e8a:	95 83       	std	Z+5, r25	; 0x05
   18e8c:	a6 83       	std	Z+6, r26	; 0x06
   18e8e:	b7 83       	std	Z+7, r27	; 0x07
   18e90:	82 e0       	ldi	r24, 0x02	; 2
   18e92:	92 e4       	ldi	r25, 0x42	; 66
   18e94:	a0 e0       	ldi	r26, 0x00	; 0
   18e96:	81 83       	std	Z+1, r24	; 0x01
   18e98:	92 83       	std	Z+2, r25	; 0x02
   18e9a:	a3 83       	std	Z+3, r26	; 0x03
   18e9c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   18ea0:	ce 01       	movw	r24, r28
   18ea2:	86 96       	adiw	r24, 0x26	; 38
   18ea4:	ed b7       	in	r30, 0x3d	; 61
   18ea6:	fe b7       	in	r31, 0x3e	; 62
   18ea8:	95 83       	std	Z+5, r25	; 0x05
   18eaa:	84 83       	std	Z+4, r24	; 0x04
   18eac:	88 ee       	ldi	r24, 0xE8	; 232
   18eae:	91 e4       	ldi	r25, 0x41	; 65
   18eb0:	a0 e0       	ldi	r26, 0x00	; 0
   18eb2:	81 83       	std	Z+1, r24	; 0x01
   18eb4:	92 83       	std	Z+2, r25	; 0x02
   18eb6:	a3 83       	std	Z+3, r26	; 0x03
   18eb8:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   18ebc:	8c a1       	ldd	r24, Y+36	; 0x24
   18ebe:	9d a1       	ldd	r25, Y+37	; 0x25
   18ec0:	ed b7       	in	r30, 0x3d	; 61
   18ec2:	fe b7       	in	r31, 0x3e	; 62
   18ec4:	95 83       	std	Z+5, r25	; 0x05
   18ec6:	84 83       	std	Z+4, r24	; 0x04
   18ec8:	8c ec       	ldi	r24, 0xCC	; 204
   18eca:	91 e4       	ldi	r25, 0x41	; 65
   18ecc:	a0 e0       	ldi	r26, 0x00	; 0
   18ece:	81 83       	std	Z+1, r24	; 0x01
   18ed0:	92 83       	std	Z+2, r25	; 0x02
   18ed2:	a3 83       	std	Z+3, r26	; 0x03
   18ed4:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   18ed8:	8d a5       	ldd	r24, Y+45	; 0x2d
   18eda:	9e a5       	ldd	r25, Y+46	; 0x2e
   18edc:	af a5       	ldd	r26, Y+47	; 0x2f
   18ede:	b8 a9       	ldd	r27, Y+48	; 0x30
   18ee0:	ed b7       	in	r30, 0x3d	; 61
   18ee2:	fe b7       	in	r31, 0x3e	; 62
   18ee4:	84 83       	std	Z+4, r24	; 0x04
   18ee6:	95 83       	std	Z+5, r25	; 0x05
   18ee8:	a6 83       	std	Z+6, r26	; 0x06
   18eea:	b7 83       	std	Z+7, r27	; 0x07
   18eec:	8f ea       	ldi	r24, 0xAF	; 175
   18eee:	91 e4       	ldi	r25, 0x41	; 65
   18ef0:	a0 e0       	ldi	r26, 0x00	; 0
   18ef2:	81 83       	std	Z+1, r24	; 0x01
   18ef4:	92 83       	std	Z+2, r25	; 0x02
   18ef6:	a3 83       	std	Z+3, r26	; 0x03
   18ef8:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   18efc:	8d a9       	ldd	r24, Y+53	; 0x35
   18efe:	9e a9       	ldd	r25, Y+54	; 0x36
   18f00:	af a9       	ldd	r26, Y+55	; 0x37
   18f02:	b8 ad       	ldd	r27, Y+56	; 0x38
   18f04:	ed b7       	in	r30, 0x3d	; 61
   18f06:	fe b7       	in	r31, 0x3e	; 62
   18f08:	84 83       	std	Z+4, r24	; 0x04
   18f0a:	95 83       	std	Z+5, r25	; 0x05
   18f0c:	a6 83       	std	Z+6, r26	; 0x06
   18f0e:	b7 83       	std	Z+7, r27	; 0x07
   18f10:	82 e9       	ldi	r24, 0x92	; 146
   18f12:	91 e4       	ldi	r25, 0x41	; 65
   18f14:	a0 e0       	ldi	r26, 0x00	; 0
   18f16:	81 83       	std	Z+1, r24	; 0x01
   18f18:	92 83       	std	Z+2, r25	; 0x02
   18f1a:	a3 83       	std	Z+3, r26	; 0x03
   18f1c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   18f20:	89 a9       	ldd	r24, Y+49	; 0x31
   18f22:	9a a9       	ldd	r25, Y+50	; 0x32
   18f24:	ed b7       	in	r30, 0x3d	; 61
   18f26:	fe b7       	in	r31, 0x3e	; 62
   18f28:	95 83       	std	Z+5, r25	; 0x05
   18f2a:	84 83       	std	Z+4, r24	; 0x04
   18f2c:	86 e7       	ldi	r24, 0x76	; 118
   18f2e:	91 e4       	ldi	r25, 0x41	; 65
   18f30:	a0 e0       	ldi	r26, 0x00	; 0
   18f32:	81 83       	std	Z+1, r24	; 0x01
   18f34:	92 83       	std	Z+2, r25	; 0x02
   18f36:	a3 83       	std	Z+3, r26	; 0x03
   18f38:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   18f3c:	89 ad       	ldd	r24, Y+57	; 0x39
   18f3e:	9a ad       	ldd	r25, Y+58	; 0x3a
   18f40:	ed b7       	in	r30, 0x3d	; 61
   18f42:	fe b7       	in	r31, 0x3e	; 62
   18f44:	95 83       	std	Z+5, r25	; 0x05
   18f46:	84 83       	std	Z+4, r24	; 0x04
   18f48:	8a e5       	ldi	r24, 0x5A	; 90
   18f4a:	91 e4       	ldi	r25, 0x41	; 65
   18f4c:	a0 e0       	ldi	r26, 0x00	; 0
   18f4e:	81 83       	std	Z+1, r24	; 0x01
   18f50:	92 83       	std	Z+2, r25	; 0x02
   18f52:	a3 83       	std	Z+3, r26	; 0x03
   18f54:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   18f58:	ce 01       	movw	r24, r28
   18f5a:	87 5b       	subi	r24, 0xB7	; 183
   18f5c:	9f 4f       	sbci	r25, 0xFF	; 255
   18f5e:	ab de       	rcall	.-682    	; 0x18cb6 <lif_lifbcd2timestr>
   18f60:	ed b7       	in	r30, 0x3d	; 61
   18f62:	fe b7       	in	r31, 0x3e	; 62
   18f64:	95 83       	std	Z+5, r25	; 0x05
   18f66:	84 83       	std	Z+4, r24	; 0x04
   18f68:	80 e4       	ldi	r24, 0x40	; 64
   18f6a:	91 e4       	ldi	r25, 0x41	; 65
   18f6c:	a0 e0       	ldi	r26, 0x00	; 0
   18f6e:	81 83       	std	Z+1, r24	; 0x01
   18f70:	92 83       	std	Z+2, r25	; 0x02
   18f72:	a3 83       	std	Z+3, r26	; 0x03
   18f74:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   18f78:	ce 01       	movw	r24, r28
   18f7a:	81 5b       	subi	r24, 0xB1	; 177
   18f7c:	9f 4f       	sbci	r25, 0xFF	; 255
   18f7e:	ed b7       	in	r30, 0x3d	; 61
   18f80:	fe b7       	in	r31, 0x3e	; 62
   18f82:	95 83       	std	Z+5, r25	; 0x05
   18f84:	84 83       	std	Z+4, r24	; 0x04
   18f86:	86 e2       	ldi	r24, 0x26	; 38
   18f88:	91 e4       	ldi	r25, 0x41	; 65
   18f8a:	a0 e0       	ldi	r26, 0x00	; 0
   18f8c:	81 83       	std	Z+1, r24	; 0x01
   18f8e:	92 83       	std	Z+2, r25	; 0x02
   18f90:	a3 83       	std	Z+3, r26	; 0x03
   18f92:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   18f96:	fe 01       	movw	r30, r28
   18f98:	e6 5a       	subi	r30, 0xA6	; 166
   18f9a:	ff 4f       	sbci	r31, 0xFF	; 255
   18f9c:	80 81       	ld	r24, Z
   18f9e:	91 81       	ldd	r25, Z+1	; 0x01
   18fa0:	ed b7       	in	r30, 0x3d	; 61
   18fa2:	fe b7       	in	r31, 0x3e	; 62
   18fa4:	95 83       	std	Z+5, r25	; 0x05
   18fa6:	84 83       	std	Z+4, r24	; 0x04
   18fa8:	8a e0       	ldi	r24, 0x0A	; 10
   18faa:	91 e4       	ldi	r25, 0x41	; 65
   18fac:	a0 e0       	ldi	r26, 0x00	; 0
   18fae:	81 83       	std	Z+1, r24	; 0x01
   18fb0:	92 83       	std	Z+2, r25	; 0x02
   18fb2:	a3 83       	std	Z+3, r26	; 0x03
   18fb4:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   18fb8:	fe 01       	movw	r30, r28
   18fba:	e6 59       	subi	r30, 0x96	; 150
   18fbc:	ff 4f       	sbci	r31, 0xFF	; 255
   18fbe:	80 81       	ld	r24, Z
   18fc0:	91 81       	ldd	r25, Z+1	; 0x01
   18fc2:	ed b7       	in	r30, 0x3d	; 61
   18fc4:	fe b7       	in	r31, 0x3e	; 62
   18fc6:	95 83       	std	Z+5, r25	; 0x05
   18fc8:	84 83       	std	Z+4, r24	; 0x04
   18fca:	8e ee       	ldi	r24, 0xEE	; 238
   18fcc:	90 e4       	ldi	r25, 0x40	; 64
   18fce:	a0 e0       	ldi	r26, 0x00	; 0
   18fd0:	81 83       	std	Z+1, r24	; 0x01
   18fd2:	92 83       	std	Z+2, r25	; 0x02
   18fd4:	a3 83       	std	Z+3, r26	; 0x03
   18fd6:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   18fda:	fe 01       	movw	r30, r28
   18fdc:	e4 5a       	subi	r30, 0xA4	; 164
   18fde:	ff 4f       	sbci	r31, 0xFF	; 255
   18fe0:	80 81       	ld	r24, Z
   18fe2:	91 81       	ldd	r25, Z+1	; 0x01
   18fe4:	a2 81       	ldd	r26, Z+2	; 0x02
   18fe6:	b3 81       	ldd	r27, Z+3	; 0x03
   18fe8:	ed b7       	in	r30, 0x3d	; 61
   18fea:	fe b7       	in	r31, 0x3e	; 62
   18fec:	84 83       	std	Z+4, r24	; 0x04
   18fee:	95 83       	std	Z+5, r25	; 0x05
   18ff0:	a6 83       	std	Z+6, r26	; 0x06
   18ff2:	b7 83       	std	Z+7, r27	; 0x07
   18ff4:	81 ed       	ldi	r24, 0xD1	; 209
   18ff6:	90 e4       	ldi	r25, 0x40	; 64
   18ff8:	a0 e0       	ldi	r26, 0x00	; 0
   18ffa:	81 83       	std	Z+1, r24	; 0x01
   18ffc:	92 83       	std	Z+2, r25	; 0x02
   18ffe:	a3 83       	std	Z+3, r26	; 0x03
   19000:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   19004:	fe 01       	movw	r30, r28
   19006:	e0 5a       	subi	r30, 0xA0	; 160
   19008:	ff 4f       	sbci	r31, 0xFF	; 255
   1900a:	80 81       	ld	r24, Z
   1900c:	91 81       	ldd	r25, Z+1	; 0x01
   1900e:	a2 81       	ldd	r26, Z+2	; 0x02
   19010:	b3 81       	ldd	r27, Z+3	; 0x03
   19012:	ed b7       	in	r30, 0x3d	; 61
   19014:	fe b7       	in	r31, 0x3e	; 62
   19016:	84 83       	std	Z+4, r24	; 0x04
   19018:	95 83       	std	Z+5, r25	; 0x05
   1901a:	a6 83       	std	Z+6, r26	; 0x06
   1901c:	b7 83       	std	Z+7, r27	; 0x07
   1901e:	84 eb       	ldi	r24, 0xB4	; 180
   19020:	90 e4       	ldi	r25, 0x40	; 64
   19022:	a0 e0       	ldi	r26, 0x00	; 0
   19024:	81 83       	std	Z+1, r24	; 0x01
   19026:	92 83       	std	Z+2, r25	; 0x02
   19028:	a3 83       	std	Z+3, r26	; 0x03
   1902a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1902e:	fe 01       	movw	r30, r28
   19030:	e4 59       	subi	r30, 0x94	; 148
   19032:	ff 4f       	sbci	r31, 0xFF	; 255
   19034:	80 81       	ld	r24, Z
   19036:	91 81       	ldd	r25, Z+1	; 0x01
   19038:	a0 e0       	ldi	r26, 0x00	; 0
   1903a:	b0 e0       	ldi	r27, 0x00	; 0
   1903c:	ed b7       	in	r30, 0x3d	; 61
   1903e:	fe b7       	in	r31, 0x3e	; 62
   19040:	84 83       	std	Z+4, r24	; 0x04
   19042:	95 83       	std	Z+5, r25	; 0x05
   19044:	a6 83       	std	Z+6, r26	; 0x06
   19046:	b7 83       	std	Z+7, r27	; 0x07
   19048:	87 e9       	ldi	r24, 0x97	; 151
   1904a:	90 e4       	ldi	r25, 0x40	; 64
   1904c:	a0 e0       	ldi	r26, 0x00	; 0
   1904e:	81 83       	std	Z+1, r24	; 0x01
   19050:	92 83       	std	Z+2, r25	; 0x02
   19052:	a3 83       	std	Z+3, r26	; 0x03
   19054:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   19058:	fe 01       	movw	r30, r28
   1905a:	e2 59       	subi	r30, 0x92	; 146
   1905c:	ff 4f       	sbci	r31, 0xFF	; 255
   1905e:	80 81       	ld	r24, Z
   19060:	91 81       	ldd	r25, Z+1	; 0x01
   19062:	ed b7       	in	r30, 0x3d	; 61
   19064:	fe b7       	in	r31, 0x3e	; 62
   19066:	95 83       	std	Z+5, r25	; 0x05
   19068:	84 83       	std	Z+4, r24	; 0x04
   1906a:	8b e7       	ldi	r24, 0x7B	; 123
   1906c:	90 e4       	ldi	r25, 0x40	; 64
   1906e:	a0 e0       	ldi	r26, 0x00	; 0
   19070:	81 83       	std	Z+1, r24	; 0x01
   19072:	92 83       	std	Z+2, r25	; 0x02
   19074:	a3 83       	std	Z+3, r26	; 0x03
   19076:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1907a:	ce 01       	movw	r24, r28
   1907c:	8c 59       	subi	r24, 0x9C	; 156
   1907e:	9f 4f       	sbci	r25, 0xFF	; 255
   19080:	1a de       	rcall	.-972    	; 0x18cb6 <lif_lifbcd2timestr>
   19082:	ed b7       	in	r30, 0x3d	; 61
   19084:	fe b7       	in	r31, 0x3e	; 62
   19086:	95 83       	std	Z+5, r25	; 0x05
   19088:	84 83       	std	Z+4, r24	; 0x04
   1908a:	81 e6       	ldi	r24, 0x61	; 97
   1908c:	90 e4       	ldi	r25, 0x40	; 64
   1908e:	a0 e0       	ldi	r26, 0x00	; 0
   19090:	81 83       	std	Z+1, r24	; 0x01
   19092:	92 83       	std	Z+2, r25	; 0x02
   19094:	a3 83       	std	Z+3, r26	; 0x03
   19096:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1909a:	8f e5       	ldi	r24, 0x5F	; 95
   1909c:	90 e4       	ldi	r25, 0x40	; 64
   1909e:	a0 e0       	ldi	r26, 0x00	; 0
   190a0:	ed b7       	in	r30, 0x3d	; 61
   190a2:	fe b7       	in	r31, 0x3e	; 62
   190a4:	81 83       	std	Z+1, r24	; 0x01
   190a6:	92 83       	std	Z+2, r25	; 0x02
   190a8:	a3 83       	std	Z+3, r26	; 0x03
   190aa:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   190ae:	cd b7       	in	r28, 0x3d	; 61
   190b0:	de b7       	in	r29, 0x3e	; 62
   190b2:	27 96       	adiw	r28, 0x07	; 7
   190b4:	e2 e0       	ldi	r30, 0x02	; 2
   190b6:	0c 94 bf e7 	jmp	0x1cf7e	; 0x1cf7e <__epilogue_restores__+0x20>

000190ba <lif_check_volume>:
   190ba:	0f 93       	push	r16
   190bc:	1f 93       	push	r17
   190be:	cf 93       	push	r28
   190c0:	df 93       	push	r29
   190c2:	ad b7       	in	r26, 0x3d	; 61
   190c4:	be b7       	in	r27, 0x3e	; 62
   190c6:	17 97       	sbiw	r26, 0x07	; 7
   190c8:	0f b6       	in	r0, 0x3f	; 63
   190ca:	f8 94       	cli
   190cc:	be bf       	out	0x3e, r27	; 62
   190ce:	0f be       	out	0x3f, r0	; 63
   190d0:	ad bf       	out	0x3d, r26	; 61
   190d2:	ec 01       	movw	r28, r24
   190d4:	86 96       	adiw	r24, 0x26	; 38
   190d6:	e0 da       	rcall	.-2624   	; 0x18698 <lif_checkname>
   190d8:	89 2b       	or	r24, r25
   190da:	89 f4       	brne	.+34     	; 0x190fe <lif_check_volume+0x44>
   190dc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   190e0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   190e4:	92 ff       	sbrs	r25, 2
   190e6:	0e c0       	rjmp	.+28     	; 0x19104 <lif_check_volume+0x4a>
   190e8:	80 e4       	ldi	r24, 0x40	; 64
   190ea:	90 e4       	ldi	r25, 0x40	; 64
   190ec:	a0 e0       	ldi	r26, 0x00	; 0
   190ee:	ed b7       	in	r30, 0x3d	; 61
   190f0:	fe b7       	in	r31, 0x3e	; 62
   190f2:	81 83       	std	Z+1, r24	; 0x01
   190f4:	92 83       	std	Z+2, r25	; 0x02
   190f6:	a3 83       	std	Z+3, r26	; 0x03
   190f8:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   190fc:	03 c0       	rjmp	.+6      	; 0x19104 <lif_check_volume+0x4a>
   190fe:	81 e0       	ldi	r24, 0x01	; 1
   19100:	90 e0       	ldi	r25, 0x00	; 0
   19102:	02 c0       	rjmp	.+4      	; 0x19108 <lif_check_volume+0x4e>
   19104:	80 e0       	ldi	r24, 0x00	; 0
   19106:	90 e0       	ldi	r25, 0x00	; 0
   19108:	29 a9       	ldd	r18, Y+49	; 0x31
   1910a:	3a a9       	ldd	r19, Y+50	; 0x32
   1910c:	21 15       	cp	r18, r1
   1910e:	f0 e1       	ldi	r31, 0x10	; 16
   19110:	3f 07       	cpc	r19, r31
   19112:	a1 f0       	breq	.+40     	; 0x1913c <lif_check_volume+0x82>
   19114:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19118:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1911c:	92 ff       	sbrs	r25, 2
   1911e:	0c c0       	rjmp	.+24     	; 0x19138 <lif_check_volume+0x7e>
   19120:	ed b7       	in	r30, 0x3d	; 61
   19122:	fe b7       	in	r31, 0x3e	; 62
   19124:	35 83       	std	Z+5, r19	; 0x05
   19126:	24 83       	std	Z+4, r18	; 0x04
   19128:	87 e0       	ldi	r24, 0x07	; 7
   1912a:	90 e4       	ldi	r25, 0x40	; 64
   1912c:	a0 e0       	ldi	r26, 0x00	; 0
   1912e:	81 83       	std	Z+1, r24	; 0x01
   19130:	92 83       	std	Z+2, r25	; 0x02
   19132:	a3 83       	std	Z+3, r26	; 0x03
   19134:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   19138:	80 e0       	ldi	r24, 0x00	; 0
   1913a:	90 e0       	ldi	r25, 0x00	; 0
   1913c:	29 ad       	ldd	r18, Y+57	; 0x39
   1913e:	3a ad       	ldd	r19, Y+58	; 0x3a
   19140:	22 30       	cpi	r18, 0x02	; 2
   19142:	31 05       	cpc	r19, r1
   19144:	a0 f0       	brcs	.+40     	; 0x1916e <lif_check_volume+0xb4>
   19146:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1914a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1914e:	92 ff       	sbrs	r25, 2
   19150:	0c c0       	rjmp	.+24     	; 0x1916a <lif_check_volume+0xb0>
   19152:	ed b7       	in	r30, 0x3d	; 61
   19154:	fe b7       	in	r31, 0x3e	; 62
   19156:	35 83       	std	Z+5, r19	; 0x05
   19158:	24 83       	std	Z+4, r18	; 0x04
   1915a:	8f ee       	ldi	r24, 0xEF	; 239
   1915c:	9f e3       	ldi	r25, 0x3F	; 63
   1915e:	a0 e0       	ldi	r26, 0x00	; 0
   19160:	81 83       	std	Z+1, r24	; 0x01
   19162:	92 83       	std	Z+2, r25	; 0x02
   19164:	a3 83       	std	Z+3, r26	; 0x03
   19166:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1916a:	80 e0       	ldi	r24, 0x00	; 0
   1916c:	90 e0       	ldi	r25, 0x00	; 0
   1916e:	2b a9       	ldd	r18, Y+51	; 0x33
   19170:	3c a9       	ldd	r19, Y+52	; 0x34
   19172:	23 2b       	or	r18, r19
   19174:	91 f0       	breq	.+36     	; 0x1919a <lif_check_volume+0xe0>
   19176:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1917a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1917e:	92 ff       	sbrs	r25, 2
   19180:	0a c0       	rjmp	.+20     	; 0x19196 <lif_check_volume+0xdc>
   19182:	86 eb       	ldi	r24, 0xB6	; 182
   19184:	9f e3       	ldi	r25, 0x3F	; 63
   19186:	a0 e0       	ldi	r26, 0x00	; 0
   19188:	ed b7       	in	r30, 0x3d	; 61
   1918a:	fe b7       	in	r31, 0x3e	; 62
   1918c:	81 83       	std	Z+1, r24	; 0x01
   1918e:	92 83       	std	Z+2, r25	; 0x02
   19190:	a3 83       	std	Z+3, r26	; 0x03
   19192:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   19196:	80 e0       	ldi	r24, 0x00	; 0
   19198:	90 e0       	ldi	r25, 0x00	; 0
   1919a:	2b ad       	ldd	r18, Y+59	; 0x3b
   1919c:	3c ad       	ldd	r19, Y+60	; 0x3c
   1919e:	23 2b       	or	r18, r19
   191a0:	91 f0       	breq	.+36     	; 0x191c6 <lif_check_volume+0x10c>
   191a2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   191a6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   191aa:	92 ff       	sbrs	r25, 2
   191ac:	0a c0       	rjmp	.+20     	; 0x191c2 <lif_check_volume+0x108>
   191ae:	8d e7       	ldi	r24, 0x7D	; 125
   191b0:	9f e3       	ldi	r25, 0x3F	; 63
   191b2:	a0 e0       	ldi	r26, 0x00	; 0
   191b4:	ed b7       	in	r30, 0x3d	; 61
   191b6:	fe b7       	in	r31, 0x3e	; 62
   191b8:	81 83       	std	Z+1, r24	; 0x01
   191ba:	92 83       	std	Z+2, r25	; 0x02
   191bc:	a3 83       	std	Z+3, r26	; 0x03
   191be:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   191c2:	80 e0       	ldi	r24, 0x00	; 0
   191c4:	90 e0       	ldi	r25, 0x00	; 0
   191c6:	4d a5       	ldd	r20, Y+45	; 0x2d
   191c8:	5e a5       	ldd	r21, Y+46	; 0x2e
   191ca:	6f a5       	ldd	r22, Y+47	; 0x2f
   191cc:	78 a9       	ldd	r23, Y+48	; 0x30
   191ce:	45 2b       	or	r20, r21
   191d0:	46 2b       	or	r20, r22
   191d2:	47 2b       	or	r20, r23
   191d4:	b1 f4       	brne	.+44     	; 0x19202 <lif_check_volume+0x148>
   191d6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   191da:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   191de:	92 ff       	sbrs	r25, 2
   191e0:	0e c0       	rjmp	.+28     	; 0x191fe <lif_check_volume+0x144>
   191e2:	ed b7       	in	r30, 0x3d	; 61
   191e4:	fe b7       	in	r31, 0x3e	; 62
   191e6:	14 82       	std	Z+4, r1	; 0x04
   191e8:	15 82       	std	Z+5, r1	; 0x05
   191ea:	16 82       	std	Z+6, r1	; 0x06
   191ec:	17 82       	std	Z+7, r1	; 0x07
   191ee:	88 e5       	ldi	r24, 0x58	; 88
   191f0:	9f e3       	ldi	r25, 0x3F	; 63
   191f2:	a0 e0       	ldi	r26, 0x00	; 0
   191f4:	81 83       	std	Z+1, r24	; 0x01
   191f6:	92 83       	std	Z+2, r25	; 0x02
   191f8:	a3 83       	std	Z+3, r26	; 0x03
   191fa:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   191fe:	80 e0       	ldi	r24, 0x00	; 0
   19200:	90 e0       	ldi	r25, 0x00	; 0
   19202:	4d a9       	ldd	r20, Y+53	; 0x35
   19204:	5e a9       	ldd	r21, Y+54	; 0x36
   19206:	6f a9       	ldd	r22, Y+55	; 0x37
   19208:	78 ad       	ldd	r23, Y+56	; 0x38
   1920a:	45 2b       	or	r20, r21
   1920c:	46 2b       	or	r20, r22
   1920e:	47 2b       	or	r20, r23
   19210:	91 f4       	brne	.+36     	; 0x19236 <lif_check_volume+0x17c>
   19212:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19216:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1921a:	92 ff       	sbrs	r25, 2
   1921c:	0a c0       	rjmp	.+20     	; 0x19232 <lif_check_volume+0x178>
   1921e:	89 e2       	ldi	r24, 0x29	; 41
   19220:	9f e3       	ldi	r25, 0x3F	; 63
   19222:	a0 e0       	ldi	r26, 0x00	; 0
   19224:	ed b7       	in	r30, 0x3d	; 61
   19226:	fe b7       	in	r31, 0x3e	; 62
   19228:	81 83       	std	Z+1, r24	; 0x01
   1922a:	92 83       	std	Z+2, r25	; 0x02
   1922c:	a3 83       	std	Z+3, r26	; 0x03
   1922e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   19232:	80 e0       	ldi	r24, 0x00	; 0
   19234:	90 e0       	ldi	r25, 0x00	; 0
   19236:	0d a5       	ldd	r16, Y+45	; 0x2d
   19238:	1e a5       	ldd	r17, Y+46	; 0x2e
   1923a:	2f a5       	ldd	r18, Y+47	; 0x2f
   1923c:	38 a9       	ldd	r19, Y+48	; 0x30
   1923e:	4d a9       	ldd	r20, Y+53	; 0x35
   19240:	5e a9       	ldd	r21, Y+54	; 0x36
   19242:	6f a9       	ldd	r22, Y+55	; 0x37
   19244:	78 ad       	ldd	r23, Y+56	; 0x38
   19246:	40 0f       	add	r20, r16
   19248:	51 1f       	adc	r21, r17
   1924a:	62 1f       	adc	r22, r18
   1924c:	73 1f       	adc	r23, r19
   1924e:	0c 81       	ldd	r16, Y+4	; 0x04
   19250:	1d 81       	ldd	r17, Y+5	; 0x05
   19252:	2e 81       	ldd	r18, Y+6	; 0x06
   19254:	3f 81       	ldd	r19, Y+7	; 0x07
   19256:	04 17       	cp	r16, r20
   19258:	15 07       	cpc	r17, r21
   1925a:	26 07       	cpc	r18, r22
   1925c:	37 07       	cpc	r19, r23
   1925e:	90 f4       	brcc	.+36     	; 0x19284 <lif_check_volume+0x1ca>
   19260:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19264:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19268:	92 ff       	sbrs	r25, 2
   1926a:	0a c0       	rjmp	.+20     	; 0x19280 <lif_check_volume+0x1c6>
   1926c:	8d ef       	ldi	r24, 0xFD	; 253
   1926e:	9e e3       	ldi	r25, 0x3E	; 62
   19270:	a0 e0       	ldi	r26, 0x00	; 0
   19272:	ed b7       	in	r30, 0x3d	; 61
   19274:	fe b7       	in	r31, 0x3e	; 62
   19276:	81 83       	std	Z+1, r24	; 0x01
   19278:	92 83       	std	Z+2, r25	; 0x02
   1927a:	a3 83       	std	Z+3, r26	; 0x03
   1927c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   19280:	80 e0       	ldi	r24, 0x00	; 0
   19282:	90 e0       	ldi	r25, 0x00	; 0
   19284:	cd b7       	in	r28, 0x3d	; 61
   19286:	de b7       	in	r29, 0x3e	; 62
   19288:	27 96       	adiw	r28, 0x07	; 7
   1928a:	e4 e0       	ldi	r30, 0x04	; 4
   1928c:	0c 94 bd e7 	jmp	0x1cf7a	; 0x1cf7a <__epilogue_restores__+0x1c>

00019290 <lif_check_dir>:
   19290:	a5 e1       	ldi	r26, 0x15	; 21
   19292:	b0 e0       	ldi	r27, 0x00	; 0
   19294:	ee e4       	ldi	r30, 0x4E	; 78
   19296:	f9 ec       	ldi	r31, 0xC9	; 201
   19298:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
   1929c:	6c 01       	movw	r12, r24
   1929e:	2a e5       	ldi	r18, 0x5A	; 90
   192a0:	c2 0e       	add	r12, r18
   192a2:	d1 1c       	adc	r13, r1
   192a4:	f6 01       	movw	r30, r12
   192a6:	20 81       	ld	r18, Z
   192a8:	31 81       	ldd	r19, Z+1	; 0x01
   192aa:	21 50       	subi	r18, 0x01	; 1
   192ac:	31 09       	sbc	r19, r1
   192ae:	2e 3f       	cpi	r18, 0xFE	; 254
   192b0:	3f 4f       	sbci	r19, 0xFF	; 255
   192b2:	08 f0       	brcs	.+2      	; 0x192b6 <lif_check_dir+0x26>
   192b4:	9a c1       	rjmp	.+820    	; 0x195ea <lif_check_dir+0x35a>
   192b6:	9d 8b       	std	Y+21, r25	; 0x15
   192b8:	8c 8b       	std	Y+20, r24	; 0x14
   192ba:	7c 01       	movw	r14, r24
   192bc:	2f e4       	ldi	r18, 0x4F	; 79
   192be:	e2 0e       	add	r14, r18
   192c0:	f1 1c       	adc	r15, r1
   192c2:	c7 01       	movw	r24, r14
   192c4:	e9 d9       	rcall	.-3118   	; 0x18698 <lif_checkname>
   192c6:	89 2b       	or	r24, r25
   192c8:	99 f4       	brne	.+38     	; 0x192f0 <lif_check_dir+0x60>
   192ca:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   192ce:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   192d2:	92 ff       	sbrs	r25, 2
   192d4:	0f c0       	rjmp	.+30     	; 0x192f4 <lif_check_dir+0x64>
   192d6:	ed b7       	in	r30, 0x3d	; 61
   192d8:	fe b7       	in	r31, 0x3e	; 62
   192da:	f5 82       	std	Z+5, r15	; 0x05
   192dc:	e4 82       	std	Z+4, r14	; 0x04
   192de:	8c ed       	ldi	r24, 0xDC	; 220
   192e0:	9e e3       	ldi	r25, 0x3E	; 62
   192e2:	a0 e0       	ldi	r26, 0x00	; 0
   192e4:	81 83       	std	Z+1, r24	; 0x01
   192e6:	92 83       	std	Z+2, r25	; 0x02
   192e8:	a3 83       	std	Z+3, r26	; 0x03
   192ea:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   192ee:	02 c0       	rjmp	.+4      	; 0x192f4 <lif_check_dir+0x64>
   192f0:	01 e0       	ldi	r16, 0x01	; 1
   192f2:	01 c0       	rjmp	.+2      	; 0x192f6 <lif_check_dir+0x66>
   192f4:	00 e0       	ldi	r16, 0x00	; 0
   192f6:	10 e0       	ldi	r17, 0x00	; 0
   192f8:	ec 89       	ldd	r30, Y+20	; 0x14
   192fa:	fd 89       	ldd	r31, Y+21	; 0x15
   192fc:	84 85       	ldd	r24, Z+12	; 0x0c
   192fe:	95 85       	ldd	r25, Z+13	; 0x0d
   19300:	a6 85       	ldd	r26, Z+14	; 0x0e
   19302:	b7 85       	ldd	r27, Z+15	; 0x0f
   19304:	00 97       	sbiw	r24, 0x00	; 0
   19306:	a1 05       	cpc	r26, r1
   19308:	b1 05       	cpc	r27, r1
   1930a:	39 f1       	breq	.+78     	; 0x1935a <lif_check_dir+0xca>
   1930c:	e4 5a       	subi	r30, 0xA4	; 164
   1930e:	ff 4f       	sbci	r31, 0xFF	; 255
   19310:	40 81       	ld	r20, Z
   19312:	51 81       	ldd	r21, Z+1	; 0x01
   19314:	62 81       	ldd	r22, Z+2	; 0x02
   19316:	73 81       	ldd	r23, Z+3	; 0x03
   19318:	48 17       	cp	r20, r24
   1931a:	59 07       	cpc	r21, r25
   1931c:	6a 07       	cpc	r22, r26
   1931e:	7b 07       	cpc	r23, r27
   19320:	e0 f4       	brcc	.+56     	; 0x1935a <lif_check_dir+0xca>
   19322:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19326:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1932a:	32 ff       	sbrs	r19, 2
   1932c:	14 c0       	rjmp	.+40     	; 0x19356 <lif_check_dir+0xc6>
   1932e:	ed b7       	in	r30, 0x3d	; 61
   19330:	fe b7       	in	r31, 0x3e	; 62
   19332:	82 87       	std	Z+10, r24	; 0x0a
   19334:	93 87       	std	Z+11, r25	; 0x0b
   19336:	a4 87       	std	Z+12, r26	; 0x0c
   19338:	b5 87       	std	Z+13, r27	; 0x0d
   1933a:	46 83       	std	Z+6, r20	; 0x06
   1933c:	57 83       	std	Z+7, r21	; 0x07
   1933e:	60 87       	std	Z+8, r22	; 0x08
   19340:	71 87       	std	Z+9, r23	; 0x09
   19342:	f5 82       	std	Z+5, r15	; 0x05
   19344:	e4 82       	std	Z+4, r14	; 0x04
   19346:	88 e9       	ldi	r24, 0x98	; 152
   19348:	9e e3       	ldi	r25, 0x3E	; 62
   1934a:	a0 e0       	ldi	r26, 0x00	; 0
   1934c:	81 83       	std	Z+1, r24	; 0x01
   1934e:	92 83       	std	Z+2, r25	; 0x02
   19350:	a3 83       	std	Z+3, r26	; 0x03
   19352:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   19356:	00 e0       	ldi	r16, 0x00	; 0
   19358:	10 e0       	ldi	r17, 0x00	; 0
   1935a:	ec 89       	ldd	r30, Y+20	; 0x14
   1935c:	fd 89       	ldd	r31, Y+21	; 0x15
   1935e:	44 81       	ldd	r20, Z+4	; 0x04
   19360:	55 81       	ldd	r21, Z+5	; 0x05
   19362:	66 81       	ldd	r22, Z+6	; 0x06
   19364:	77 81       	ldd	r23, Z+7	; 0x07
   19366:	41 15       	cp	r20, r1
   19368:	51 05       	cpc	r21, r1
   1936a:	61 05       	cpc	r22, r1
   1936c:	71 05       	cpc	r23, r1
   1936e:	99 f1       	breq	.+102    	; 0x193d6 <lif_check_dir+0x146>
   19370:	e4 5a       	subi	r30, 0xA4	; 164
   19372:	ff 4f       	sbci	r31, 0xFF	; 255
   19374:	80 80       	ld	r8, Z
   19376:	91 80       	ldd	r9, Z+1	; 0x01
   19378:	a2 80       	ldd	r10, Z+2	; 0x02
   1937a:	b3 80       	ldd	r11, Z+3	; 0x03
   1937c:	ec 89       	ldd	r30, Y+20	; 0x14
   1937e:	fd 89       	ldd	r31, Y+21	; 0x15
   19380:	e0 5a       	subi	r30, 0xA0	; 160
   19382:	ff 4f       	sbci	r31, 0xFF	; 255
   19384:	80 81       	ld	r24, Z
   19386:	91 81       	ldd	r25, Z+1	; 0x01
   19388:	a2 81       	ldd	r26, Z+2	; 0x02
   1938a:	b3 81       	ldd	r27, Z+3	; 0x03
   1938c:	88 0d       	add	r24, r8
   1938e:	99 1d       	adc	r25, r9
   19390:	aa 1d       	adc	r26, r10
   19392:	bb 1d       	adc	r27, r11
   19394:	48 17       	cp	r20, r24
   19396:	59 07       	cpc	r21, r25
   19398:	6a 07       	cpc	r22, r26
   1939a:	7b 07       	cpc	r23, r27
   1939c:	e0 f4       	brcc	.+56     	; 0x193d6 <lif_check_dir+0x146>
   1939e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   193a2:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   193a6:	32 ff       	sbrs	r19, 2
   193a8:	14 c0       	rjmp	.+40     	; 0x193d2 <lif_check_dir+0x142>
   193aa:	ed b7       	in	r30, 0x3d	; 61
   193ac:	fe b7       	in	r31, 0x3e	; 62
   193ae:	42 87       	std	Z+10, r20	; 0x0a
   193b0:	53 87       	std	Z+11, r21	; 0x0b
   193b2:	64 87       	std	Z+12, r22	; 0x0c
   193b4:	75 87       	std	Z+13, r23	; 0x0d
   193b6:	86 83       	std	Z+6, r24	; 0x06
   193b8:	97 83       	std	Z+7, r25	; 0x07
   193ba:	a0 87       	std	Z+8, r26	; 0x08
   193bc:	b1 87       	std	Z+9, r27	; 0x09
   193be:	f5 82       	std	Z+5, r15	; 0x05
   193c0:	e4 82       	std	Z+4, r14	; 0x04
   193c2:	87 e5       	ldi	r24, 0x57	; 87
   193c4:	9e e3       	ldi	r25, 0x3E	; 62
   193c6:	a0 e0       	ldi	r26, 0x00	; 0
   193c8:	81 83       	std	Z+1, r24	; 0x01
   193ca:	92 83       	std	Z+2, r25	; 0x02
   193cc:	a3 83       	std	Z+3, r26	; 0x03
   193ce:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   193d2:	00 e0       	ldi	r16, 0x00	; 0
   193d4:	10 e0       	ldi	r17, 0x00	; 0
   193d6:	ec 89       	ldd	r30, Y+20	; 0x14
   193d8:	fd 89       	ldd	r31, Y+21	; 0x15
   193da:	e6 59       	subi	r30, 0x96	; 150
   193dc:	ff 4f       	sbci	r31, 0xFF	; 255
   193de:	80 81       	ld	r24, Z
   193e0:	91 81       	ldd	r25, Z+1	; 0x01
   193e2:	81 30       	cpi	r24, 0x01	; 1
   193e4:	f0 e8       	ldi	r31, 0x80	; 128
   193e6:	9f 07       	cpc	r25, r31
   193e8:	b1 f0       	breq	.+44     	; 0x19416 <lif_check_dir+0x186>
   193ea:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   193ee:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   193f2:	32 ff       	sbrs	r19, 2
   193f4:	0e c0       	rjmp	.+28     	; 0x19412 <lif_check_dir+0x182>
   193f6:	ed b7       	in	r30, 0x3d	; 61
   193f8:	fe b7       	in	r31, 0x3e	; 62
   193fa:	97 83       	std	Z+7, r25	; 0x07
   193fc:	86 83       	std	Z+6, r24	; 0x06
   193fe:	f5 82       	std	Z+5, r15	; 0x05
   19400:	e4 82       	std	Z+4, r14	; 0x04
   19402:	89 e2       	ldi	r24, 0x29	; 41
   19404:	9e e3       	ldi	r25, 0x3E	; 62
   19406:	a0 e0       	ldi	r26, 0x00	; 0
   19408:	81 83       	std	Z+1, r24	; 0x01
   1940a:	92 83       	std	Z+2, r25	; 0x02
   1940c:	a3 83       	std	Z+3, r26	; 0x03
   1940e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   19412:	00 e0       	ldi	r16, 0x00	; 0
   19414:	10 e0       	ldi	r17, 0x00	; 0
   19416:	f6 01       	movw	r30, r12
   19418:	80 81       	ld	r24, Z
   1941a:	91 81       	ldd	r25, Z+1	; 0x01
   1941c:	8c 7f       	andi	r24, 0xFC	; 252
   1941e:	80 31       	cpi	r24, 0x10	; 16
   19420:	90 4e       	sbci	r25, 0xE0	; 224
   19422:	09 f0       	breq	.+2      	; 0x19426 <lif_check_dir+0x196>
   19424:	b3 c0       	rjmp	.+358    	; 0x1958c <lif_check_dir+0x2fc>
   19426:	cc 88       	ldd	r12, Y+20	; 0x14
   19428:	dd 88       	ldd	r13, Y+21	; 0x15
   1942a:	2c e6       	ldi	r18, 0x6C	; 108
   1942c:	c2 0e       	add	r12, r18
   1942e:	d1 1c       	adc	r13, r1
   19430:	f6 01       	movw	r30, r12
   19432:	80 81       	ld	r24, Z
   19434:	91 81       	ldd	r25, Z+1	; 0x01
   19436:	00 97       	sbiw	r24, 0x00	; 0
   19438:	09 f4       	brne	.+2      	; 0x1943c <lif_check_dir+0x1ac>
   1943a:	a8 c0       	rjmp	.+336    	; 0x1958c <lif_check_dir+0x2fc>
   1943c:	4c 01       	movw	r8, r24
   1943e:	a1 2c       	mov	r10, r1
   19440:	b1 2c       	mov	r11, r1
   19442:	77 27       	eor	r23, r23
   19444:	6b 2d       	mov	r22, r11
   19446:	5a 2d       	mov	r21, r10
   19448:	49 2d       	mov	r20, r9
   1944a:	9c 01       	movw	r18, r24
   1944c:	33 27       	eor	r19, r19
   1944e:	3b 8b       	std	Y+19, r19	; 0x13
   19450:	2a 8b       	std	Y+18, r18	; 0x12
   19452:	db 01       	movw	r26, r22
   19454:	ca 01       	movw	r24, r20
   19456:	23 2b       	or	r18, r19
   19458:	19 f0       	breq	.+6      	; 0x19460 <lif_check_dir+0x1d0>
   1945a:	01 96       	adiw	r24, 0x01	; 1
   1945c:	a1 1d       	adc	r26, r1
   1945e:	b1 1d       	adc	r27, r1
   19460:	2c 88       	ldd	r2, Y+20	; 0x14
   19462:	3d 88       	ldd	r3, Y+21	; 0x15
   19464:	30 e6       	ldi	r19, 0x60	; 96
   19466:	23 0e       	add	r2, r19
   19468:	31 1c       	adc	r3, r1
   1946a:	f1 01       	movw	r30, r2
   1946c:	40 80       	ld	r4, Z
   1946e:	51 80       	ldd	r5, Z+1	; 0x01
   19470:	62 80       	ldd	r6, Z+2	; 0x02
   19472:	73 80       	ldd	r7, Z+3	; 0x03
   19474:	48 16       	cp	r4, r24
   19476:	59 06       	cpc	r5, r25
   19478:	6a 06       	cpc	r6, r26
   1947a:	7b 06       	cpc	r7, r27
   1947c:	40 f5       	brcc	.+80     	; 0x194ce <lif_check_dir+0x23e>
   1947e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19482:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19486:	32 ff       	sbrs	r19, 2
   19488:	20 c0       	rjmp	.+64     	; 0x194ca <lif_check_dir+0x23a>
   1948a:	2a 89       	ldd	r18, Y+18	; 0x12
   1948c:	3b 89       	ldd	r19, Y+19	; 0x13
   1948e:	23 2b       	or	r18, r19
   19490:	21 f0       	breq	.+8      	; 0x1949a <lif_check_dir+0x20a>
   19492:	4f 5f       	subi	r20, 0xFF	; 255
   19494:	5f 4f       	sbci	r21, 0xFF	; 255
   19496:	6f 4f       	sbci	r22, 0xFF	; 255
   19498:	7f 4f       	sbci	r23, 0xFF	; 255
   1949a:	ed b7       	in	r30, 0x3d	; 61
   1949c:	fe b7       	in	r31, 0x3e	; 62
   1949e:	46 86       	std	Z+14, r4	; 0x0e
   194a0:	57 86       	std	Z+15, r5	; 0x0f
   194a2:	60 8a       	std	Z+16, r6	; 0x10
   194a4:	71 8a       	std	Z+17, r7	; 0x11
   194a6:	42 87       	std	Z+10, r20	; 0x0a
   194a8:	53 87       	std	Z+11, r21	; 0x0b
   194aa:	64 87       	std	Z+12, r22	; 0x0c
   194ac:	75 87       	std	Z+13, r23	; 0x0d
   194ae:	86 82       	std	Z+6, r8	; 0x06
   194b0:	97 82       	std	Z+7, r9	; 0x07
   194b2:	a0 86       	std	Z+8, r10	; 0x08
   194b4:	b1 86       	std	Z+9, r11	; 0x09
   194b6:	f5 82       	std	Z+5, r15	; 0x05
   194b8:	e4 82       	std	Z+4, r14	; 0x04
   194ba:	8e ed       	ldi	r24, 0xDE	; 222
   194bc:	9d e3       	ldi	r25, 0x3D	; 61
   194be:	a0 e0       	ldi	r26, 0x00	; 0
   194c0:	81 83       	std	Z+1, r24	; 0x01
   194c2:	92 83       	std	Z+2, r25	; 0x02
   194c4:	a3 83       	std	Z+3, r26	; 0x03
   194c6:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   194ca:	00 e0       	ldi	r16, 0x00	; 0
   194cc:	10 e0       	ldi	r17, 0x00	; 0
   194ce:	f6 01       	movw	r30, r12
   194d0:	20 81       	ld	r18, Z
   194d2:	31 81       	ldd	r19, Z+1	; 0x01
   194d4:	a9 01       	movw	r20, r18
   194d6:	60 e0       	ldi	r22, 0x00	; 0
   194d8:	70 e0       	ldi	r23, 0x00	; 0
   194da:	bb 27       	eor	r27, r27
   194dc:	a7 2f       	mov	r26, r23
   194de:	96 2f       	mov	r25, r22
   194e0:	85 2f       	mov	r24, r21
   194e2:	f9 01       	movw	r30, r18
   194e4:	ff 27       	eor	r31, r31
   194e6:	fb 8b       	std	Y+19, r31	; 0x13
   194e8:	ea 8b       	std	Y+18, r30	; 0x12
   194ea:	2c 01       	movw	r4, r24
   194ec:	3d 01       	movw	r6, r26
   194ee:	ef 2b       	or	r30, r31
   194f0:	29 f0       	breq	.+10     	; 0x194fc <lif_check_dir+0x26c>
   194f2:	ff ef       	ldi	r31, 0xFF	; 255
   194f4:	4f 1a       	sub	r4, r31
   194f6:	5f 0a       	sbc	r5, r31
   194f8:	6f 0a       	sbc	r6, r31
   194fa:	7f 0a       	sbc	r7, r31
   194fc:	f1 01       	movw	r30, r2
   194fe:	80 80       	ld	r8, Z
   19500:	91 80       	ldd	r9, Z+1	; 0x01
   19502:	a2 80       	ldd	r10, Z+2	; 0x02
   19504:	b3 80       	ldd	r11, Z+3	; 0x03
   19506:	48 14       	cp	r4, r8
   19508:	59 04       	cpc	r5, r9
   1950a:	6a 04       	cpc	r6, r10
   1950c:	7b 04       	cpc	r7, r11
   1950e:	28 f5       	brcc	.+74     	; 0x1955a <lif_check_dir+0x2ca>
   19510:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19514:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19518:	32 ff       	sbrs	r19, 2
   1951a:	1f c0       	rjmp	.+62     	; 0x1955a <lif_check_dir+0x2ca>
   1951c:	2a 89       	ldd	r18, Y+18	; 0x12
   1951e:	3b 89       	ldd	r19, Y+19	; 0x13
   19520:	23 2b       	or	r18, r19
   19522:	19 f0       	breq	.+6      	; 0x1952a <lif_check_dir+0x29a>
   19524:	01 96       	adiw	r24, 0x01	; 1
   19526:	a1 1d       	adc	r26, r1
   19528:	b1 1d       	adc	r27, r1
   1952a:	ed b7       	in	r30, 0x3d	; 61
   1952c:	fe b7       	in	r31, 0x3e	; 62
   1952e:	86 86       	std	Z+14, r8	; 0x0e
   19530:	97 86       	std	Z+15, r9	; 0x0f
   19532:	a0 8a       	std	Z+16, r10	; 0x10
   19534:	b1 8a       	std	Z+17, r11	; 0x11
   19536:	82 87       	std	Z+10, r24	; 0x0a
   19538:	93 87       	std	Z+11, r25	; 0x0b
   1953a:	a4 87       	std	Z+12, r26	; 0x0c
   1953c:	b5 87       	std	Z+13, r27	; 0x0d
   1953e:	46 83       	std	Z+6, r20	; 0x06
   19540:	57 83       	std	Z+7, r21	; 0x07
   19542:	60 87       	std	Z+8, r22	; 0x08
   19544:	71 87       	std	Z+9, r23	; 0x09
   19546:	f5 82       	std	Z+5, r15	; 0x05
   19548:	e4 82       	std	Z+4, r14	; 0x04
   1954a:	83 e9       	ldi	r24, 0x93	; 147
   1954c:	9d e3       	ldi	r25, 0x3D	; 61
   1954e:	a0 e0       	ldi	r26, 0x00	; 0
   19550:	81 83       	std	Z+1, r24	; 0x01
   19552:	92 83       	std	Z+2, r25	; 0x02
   19554:	a3 83       	std	Z+3, r26	; 0x03
   19556:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1955a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1955e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19562:	92 ff       	sbrs	r25, 2
   19564:	13 c0       	rjmp	.+38     	; 0x1958c <lif_check_dir+0x2fc>
   19566:	f6 01       	movw	r30, r12
   19568:	80 81       	ld	r24, Z
   1956a:	91 81       	ldd	r25, Z+1	; 0x01
   1956c:	89 2b       	or	r24, r25
   1956e:	71 f4       	brne	.+28     	; 0x1958c <lif_check_dir+0x2fc>
   19570:	ed b7       	in	r30, 0x3d	; 61
   19572:	fe b7       	in	r31, 0x3e	; 62
   19574:	f5 82       	std	Z+5, r15	; 0x05
   19576:	e4 82       	std	Z+4, r14	; 0x04
   19578:	88 e6       	ldi	r24, 0x68	; 104
   1957a:	9d e3       	ldi	r25, 0x3D	; 61
   1957c:	a0 e0       	ldi	r26, 0x00	; 0
   1957e:	81 83       	std	Z+1, r24	; 0x01
   19580:	92 83       	std	Z+2, r25	; 0x02
   19582:	a3 83       	std	Z+3, r26	; 0x03
   19584:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   19588:	00 e0       	ldi	r16, 0x00	; 0
   1958a:	10 e0       	ldi	r17, 0x00	; 0
   1958c:	ec 89       	ldd	r30, Y+20	; 0x14
   1958e:	fd 89       	ldd	r31, Y+21	; 0x15
   19590:	e2 59       	subi	r30, 0x92	; 146
   19592:	ff 4f       	sbci	r31, 0xFF	; 255
   19594:	20 81       	ld	r18, Z
   19596:	31 81       	ldd	r19, Z+1	; 0x01
   19598:	21 15       	cp	r18, r1
   1959a:	f1 e0       	ldi	r31, 0x01	; 1
   1959c:	3f 07       	cpc	r19, r31
   1959e:	41 f1       	breq	.+80     	; 0x195f0 <lif_check_dir+0x360>
   195a0:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   195a4:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   195a8:	ca 01       	movw	r24, r20
   195aa:	88 27       	eor	r24, r24
   195ac:	94 70       	andi	r25, 0x04	; 4
   195ae:	52 ff       	sbrs	r21, 2
   195b0:	20 c0       	rjmp	.+64     	; 0x195f2 <lif_check_dir+0x362>
   195b2:	c9 01       	movw	r24, r18
   195b4:	a0 e0       	ldi	r26, 0x00	; 0
   195b6:	b0 e0       	ldi	r27, 0x00	; 0
   195b8:	ed b7       	in	r30, 0x3d	; 61
   195ba:	fe b7       	in	r31, 0x3e	; 62
   195bc:	86 83       	std	Z+6, r24	; 0x06
   195be:	97 83       	std	Z+7, r25	; 0x07
   195c0:	a0 87       	std	Z+8, r26	; 0x08
   195c2:	b1 87       	std	Z+9, r27	; 0x09
   195c4:	ec 89       	ldd	r30, Y+20	; 0x14
   195c6:	fd 89       	ldd	r31, Y+21	; 0x15
   195c8:	80 81       	ld	r24, Z
   195ca:	91 81       	ldd	r25, Z+1	; 0x01
   195cc:	ed b7       	in	r30, 0x3d	; 61
   195ce:	fe b7       	in	r31, 0x3e	; 62
   195d0:	95 83       	std	Z+5, r25	; 0x05
   195d2:	84 83       	std	Z+4, r24	; 0x04
   195d4:	8c e3       	ldi	r24, 0x3C	; 60
   195d6:	9d e3       	ldi	r25, 0x3D	; 61
   195d8:	a0 e0       	ldi	r26, 0x00	; 0
   195da:	81 83       	std	Z+1, r24	; 0x01
   195dc:	92 83       	std	Z+2, r25	; 0x02
   195de:	a3 83       	std	Z+3, r26	; 0x03
   195e0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   195e4:	80 e0       	ldi	r24, 0x00	; 0
   195e6:	90 e0       	ldi	r25, 0x00	; 0
   195e8:	04 c0       	rjmp	.+8      	; 0x195f2 <lif_check_dir+0x362>
   195ea:	81 e0       	ldi	r24, 0x01	; 1
   195ec:	90 e0       	ldi	r25, 0x00	; 0
   195ee:	01 c0       	rjmp	.+2      	; 0x195f2 <lif_check_dir+0x362>
   195f0:	c8 01       	movw	r24, r16
   195f2:	65 96       	adiw	r28, 0x15	; 21
   195f4:	e2 e1       	ldi	r30, 0x12	; 18
   195f6:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

000195fa <lif_close_volume>:
   195fa:	cf 93       	push	r28
   195fc:	df 93       	push	r29
   195fe:	00 97       	sbiw	r24, 0x00	; 0
   19600:	f9 f0       	breq	.+62     	; 0x19640 <lif_close_volume+0x46>
   19602:	ec 01       	movw	r28, r24
   19604:	8a 81       	ldd	r24, Y+2	; 0x02
   19606:	9b 81       	ldd	r25, Y+3	; 0x03
   19608:	00 97       	sbiw	r24, 0x00	; 0
   1960a:	79 f0       	breq	.+30     	; 0x1962a <lif_close_volume+0x30>
   1960c:	22 e0       	ldi	r18, 0x02	; 2
   1960e:	30 e0       	ldi	r19, 0x00	; 0
   19610:	40 e0       	ldi	r20, 0x00	; 0
   19612:	50 e0       	ldi	r21, 0x00	; 0
   19614:	ba 01       	movw	r22, r20
   19616:	0e 94 8b 7b 	call	0xf716	; 0xf716 <fseek>
   1961a:	8a 81       	ldd	r24, Y+2	; 0x02
   1961c:	9b 81       	ldd	r25, Y+3	; 0x03
   1961e:	0e 94 73 7d 	call	0xfae6	; 0xfae6 <fclose>
   19622:	1b 82       	std	Y+3, r1	; 0x03
   19624:	1a 82       	std	Y+2, r1	; 0x02
   19626:	0e 94 6e 7c 	call	0xf8dc	; 0xf8dc <sync>
   1962a:	88 81       	ld	r24, Y
   1962c:	99 81       	ldd	r25, Y+1	; 0x01
   1962e:	00 97       	sbiw	r24, 0x00	; 0
   19630:	11 f0       	breq	.+4      	; 0x19636 <lif_close_volume+0x3c>
   19632:	0e 94 79 c1 	call	0x182f2	; 0x182f2 <lif_free>
   19636:	ce 01       	movw	r24, r28
   19638:	73 db       	rcall	.-2330   	; 0x18d20 <lif_vol_clear>
   1963a:	ce 01       	movw	r24, r28
   1963c:	0e 94 79 c1 	call	0x182f2	; 0x182f2 <lif_free>
   19640:	df 91       	pop	r29
   19642:	cf 91       	pop	r28
   19644:	08 95       	ret

00019646 <lif_checkdirindex>:
   19646:	cf 92       	push	r12
   19648:	df 92       	push	r13
   1964a:	ef 92       	push	r14
   1964c:	ff 92       	push	r15
   1964e:	cf 93       	push	r28
   19650:	df 93       	push	r29
   19652:	ad b7       	in	r26, 0x3d	; 61
   19654:	be b7       	in	r27, 0x3e	; 62
   19656:	17 97       	sbiw	r26, 0x07	; 7
   19658:	0f b6       	in	r0, 0x3f	; 63
   1965a:	f8 94       	cli
   1965c:	be bf       	out	0x3e, r27	; 62
   1965e:	0f be       	out	0x3f, r0	; 63
   19660:	ad bf       	out	0x3d, r26	; 61
   19662:	9b 01       	movw	r18, r22
   19664:	77 fd       	sbrc	r23, 7
   19666:	25 c0       	rjmp	.+74     	; 0x196b2 <lif_checkdirindex+0x6c>
   19668:	ab 01       	movw	r20, r22
   1966a:	77 0f       	add	r23, r23
   1966c:	66 0b       	sbc	r22, r22
   1966e:	77 0b       	sbc	r23, r23
   19670:	e5 e0       	ldi	r30, 0x05	; 5
   19672:	44 0f       	add	r20, r20
   19674:	55 1f       	adc	r21, r21
   19676:	66 1f       	adc	r22, r22
   19678:	77 1f       	adc	r23, r23
   1967a:	ea 95       	dec	r30
   1967c:	d1 f7       	brne	.-12     	; 0x19672 <lif_checkdirindex+0x2c>
   1967e:	c5 2e       	mov	r12, r21
   19680:	d6 2e       	mov	r13, r22
   19682:	e7 2e       	mov	r14, r23
   19684:	ff 24       	eor	r15, r15
   19686:	55 27       	eor	r21, r21
   19688:	66 27       	eor	r22, r22
   1968a:	77 27       	eor	r23, r23
   1968c:	45 2b       	or	r20, r21
   1968e:	46 2b       	or	r20, r22
   19690:	47 2b       	or	r20, r23
   19692:	29 f0       	breq	.+10     	; 0x1969e <lif_checkdirindex+0x58>
   19694:	4f ef       	ldi	r20, 0xFF	; 255
   19696:	c4 1a       	sub	r12, r20
   19698:	d4 0a       	sbc	r13, r20
   1969a:	e4 0a       	sbc	r14, r20
   1969c:	f4 0a       	sbc	r15, r20
   1969e:	fc 01       	movw	r30, r24
   196a0:	45 a9       	ldd	r20, Z+53	; 0x35
   196a2:	56 a9       	ldd	r21, Z+54	; 0x36
   196a4:	67 a9       	ldd	r22, Z+55	; 0x37
   196a6:	70 ad       	ldd	r23, Z+56	; 0x38
   196a8:	4c 15       	cp	r20, r12
   196aa:	5d 05       	cpc	r21, r13
   196ac:	6e 05       	cpc	r22, r14
   196ae:	7f 05       	cpc	r23, r15
   196b0:	08 f5       	brcc	.+66     	; 0x196f4 <lif_checkdirindex+0xae>
   196b2:	ec 01       	movw	r28, r24
   196b4:	ed b7       	in	r30, 0x3d	; 61
   196b6:	fe b7       	in	r31, 0x3e	; 62
   196b8:	37 83       	std	Z+7, r19	; 0x07
   196ba:	26 83       	std	Z+6, r18	; 0x06
   196bc:	88 81       	ld	r24, Y
   196be:	99 81       	ldd	r25, Y+1	; 0x01
   196c0:	95 83       	std	Z+5, r25	; 0x05
   196c2:	84 83       	std	Z+4, r24	; 0x04
   196c4:	89 e7       	ldi	r24, 0x79	; 121
   196c6:	9c e3       	ldi	r25, 0x3C	; 60
   196c8:	a0 e0       	ldi	r26, 0x00	; 0
   196ca:	81 83       	std	Z+1, r24	; 0x01
   196cc:	92 83       	std	Z+2, r25	; 0x02
   196ce:	a3 83       	std	Z+3, r26	; 0x03
   196d0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   196d4:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   196d8:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   196dc:	c9 01       	movw	r24, r18
   196de:	88 27       	eor	r24, r24
   196e0:	94 70       	andi	r25, 0x04	; 4
   196e2:	32 ff       	sbrs	r19, 2
   196e4:	09 c0       	rjmp	.+18     	; 0x196f8 <lif_checkdirindex+0xb2>
   196e6:	65 ee       	ldi	r22, 0xE5	; 229
   196e8:	75 e1       	ldi	r23, 0x15	; 21
   196ea:	ce 01       	movw	r24, r28
   196ec:	20 db       	rcall	.-2496   	; 0x18d2e <lif_dump_vol>
   196ee:	80 e0       	ldi	r24, 0x00	; 0
   196f0:	90 e0       	ldi	r25, 0x00	; 0
   196f2:	02 c0       	rjmp	.+4      	; 0x196f8 <lif_checkdirindex+0xb2>
   196f4:	81 e0       	ldi	r24, 0x01	; 1
   196f6:	90 e0       	ldi	r25, 0x00	; 0
   196f8:	ad b7       	in	r26, 0x3d	; 61
   196fa:	be b7       	in	r27, 0x3e	; 62
   196fc:	17 96       	adiw	r26, 0x07	; 7
   196fe:	0f b6       	in	r0, 0x3f	; 63
   19700:	f8 94       	cli
   19702:	be bf       	out	0x3e, r27	; 62
   19704:	0f be       	out	0x3f, r0	; 63
   19706:	ad bf       	out	0x3d, r26	; 61
   19708:	df 91       	pop	r29
   1970a:	cf 91       	pop	r28
   1970c:	ff 90       	pop	r15
   1970e:	ef 90       	pop	r14
   19710:	df 90       	pop	r13
   19712:	cf 90       	pop	r12
   19714:	08 95       	ret

00019716 <lif_readdirindex>:
   19716:	a5 e2       	ldi	r26, 0x25	; 37
   19718:	b0 e0       	ldi	r27, 0x00	; 0
   1971a:	e1 e9       	ldi	r30, 0x91	; 145
   1971c:	fb ec       	ldi	r31, 0xCB	; 203
   1971e:	0c 94 9d e7 	jmp	0x1cf3a	; 0x1cf3a <__prologue_saves__+0x14>
   19722:	7c 01       	movw	r14, r24
   19724:	6b 01       	movw	r12, r22
   19726:	8f df       	rcall	.-226    	; 0x19646 <lif_checkdirindex>
   19728:	89 2b       	or	r24, r25
   1972a:	19 f4       	brne	.+6      	; 0x19732 <lif_readdirindex+0x1c>
   1972c:	00 e0       	ldi	r16, 0x00	; 0
   1972e:	10 e0       	ldi	r17, 0x00	; 0
   19730:	54 c0       	rjmp	.+168    	; 0x197da <lif_readdirindex+0xc4>
   19732:	f7 01       	movw	r30, r14
   19734:	85 a5       	ldd	r24, Z+45	; 0x2d
   19736:	96 a5       	ldd	r25, Z+46	; 0x2e
   19738:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1973a:	b0 a9       	ldd	r27, Z+48	; 0x30
   1973c:	44 27       	eor	r20, r20
   1973e:	58 2f       	mov	r21, r24
   19740:	69 2f       	mov	r22, r25
   19742:	7a 2f       	mov	r23, r26
   19744:	c6 01       	movw	r24, r12
   19746:	0d 2c       	mov	r0, r13
   19748:	00 0c       	add	r0, r0
   1974a:	aa 0b       	sbc	r26, r26
   1974c:	bb 0b       	sbc	r27, r27
   1974e:	35 e0       	ldi	r19, 0x05	; 5
   19750:	88 0f       	add	r24, r24
   19752:	99 1f       	adc	r25, r25
   19754:	aa 1f       	adc	r26, r26
   19756:	bb 1f       	adc	r27, r27
   19758:	3a 95       	dec	r19
   1975a:	d1 f7       	brne	.-12     	; 0x19750 <lif_readdirindex+0x3a>
   1975c:	9a 01       	movw	r18, r20
   1975e:	ab 01       	movw	r20, r22
   19760:	28 0f       	add	r18, r24
   19762:	39 1f       	adc	r19, r25
   19764:	4a 1f       	adc	r20, r26
   19766:	5b 1f       	adc	r21, r27
   19768:	00 e2       	ldi	r16, 0x20	; 32
   1976a:	10 e0       	ldi	r17, 0x00	; 0
   1976c:	be 01       	movw	r22, r28
   1976e:	6a 5f       	subi	r22, 0xFA	; 250
   19770:	7f 4f       	sbci	r23, 0xFF	; 255
   19772:	c7 01       	movw	r24, r14
   19774:	0e 94 31 c2 	call	0x18462	; 0x18462 <lif_read>
   19778:	60 32       	cpi	r22, 0x20	; 32
   1977a:	71 05       	cpc	r23, r1
   1977c:	81 05       	cpc	r24, r1
   1977e:	91 05       	cpc	r25, r1
   19780:	a8 f2       	brcs	.-86     	; 0x1972c <lif_readdirindex+0x16>
   19782:	b7 01       	movw	r22, r14
   19784:	ce 01       	movw	r24, r28
   19786:	06 96       	adiw	r24, 0x06	; 6
   19788:	75 d9       	rcall	.-3350   	; 0x18a74 <lif_str2dir>
   1978a:	f7 01       	movw	r30, r14
   1978c:	e6 5a       	subi	r30, 0xA6	; 166
   1978e:	ff 4f       	sbci	r31, 0xFF	; 255
   19790:	80 81       	ld	r24, Z
   19792:	91 81       	ldd	r25, Z+1	; 0x01
   19794:	01 96       	adiw	r24, 0x01	; 1
   19796:	19 f4       	brne	.+6      	; 0x1979e <lif_readdirindex+0x88>
   19798:	f7 01       	movw	r30, r14
   1979a:	d3 a2       	std	Z+35, r13	; 0x23
   1979c:	c2 a2       	std	Z+34, r12	; 0x22
   1979e:	c7 01       	movw	r24, r14
   197a0:	77 dd       	rcall	.-1298   	; 0x19290 <lif_check_dir>
   197a2:	8c 01       	movw	r16, r24
   197a4:	89 2b       	or	r24, r25
   197a6:	b9 f4       	brne	.+46     	; 0x197d6 <lif_readdirindex+0xc0>
   197a8:	ed b7       	in	r30, 0x3d	; 61
   197aa:	fe b7       	in	r31, 0x3e	; 62
   197ac:	d5 82       	std	Z+5, r13	; 0x05
   197ae:	c4 82       	std	Z+4, r12	; 0x04
   197b0:	89 e5       	ldi	r24, 0x59	; 89
   197b2:	9c e3       	ldi	r25, 0x3C	; 60
   197b4:	a0 e0       	ldi	r26, 0x00	; 0
   197b6:	81 83       	std	Z+1, r24	; 0x01
   197b8:	92 83       	std	Z+2, r25	; 0x02
   197ba:	a3 83       	std	Z+3, r26	; 0x03
   197bc:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   197c0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   197c4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   197c8:	92 ff       	sbrs	r25, 2
   197ca:	b0 cf       	rjmp	.-160    	; 0x1972c <lif_readdirindex+0x16>
   197cc:	66 ef       	ldi	r22, 0xF6	; 246
   197ce:	75 e1       	ldi	r23, 0x15	; 21
   197d0:	c7 01       	movw	r24, r14
   197d2:	ad da       	rcall	.-2726   	; 0x18d2e <lif_dump_vol>
   197d4:	02 c0       	rjmp	.+4      	; 0x197da <lif_readdirindex+0xc4>
   197d6:	01 e0       	ldi	r16, 0x01	; 1
   197d8:	10 e0       	ldi	r17, 0x00	; 0
   197da:	c8 01       	movw	r24, r16
   197dc:	a5 96       	adiw	r28, 0x25	; 37
   197de:	e8 e0       	ldi	r30, 0x08	; 8
   197e0:	0c 94 b9 e7 	jmp	0x1cf72	; 0x1cf72 <__epilogue_restores__+0x14>

000197e4 <lif_writedirindex>:
   197e4:	a0 e2       	ldi	r26, 0x20	; 32
   197e6:	b0 e0       	ldi	r27, 0x00	; 0
   197e8:	e8 ef       	ldi	r30, 0xF8	; 248
   197ea:	fb ec       	ldi	r31, 0xCB	; 203
   197ec:	0c 94 9b e7 	jmp	0x1cf36	; 0x1cf36 <__prologue_saves__+0x10>
   197f0:	5c 01       	movw	r10, r24
   197f2:	6b 01       	movw	r12, r22
   197f4:	4d dd       	rcall	.-1382   	; 0x19290 <lif_check_dir>
   197f6:	7c 01       	movw	r14, r24
   197f8:	89 2b       	or	r24, r25
   197fa:	71 f4       	brne	.+28     	; 0x19818 <lif_writedirindex+0x34>
   197fc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19800:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19804:	92 fd       	sbrc	r25, 2
   19806:	03 c0       	rjmp	.+6      	; 0x1980e <lif_writedirindex+0x2a>
   19808:	e1 2c       	mov	r14, r1
   1980a:	f1 2c       	mov	r15, r1
   1980c:	42 c0       	rjmp	.+132    	; 0x19892 <lif_writedirindex+0xae>
   1980e:	67 e0       	ldi	r22, 0x07	; 7
   19810:	76 e1       	ldi	r23, 0x16	; 22
   19812:	c5 01       	movw	r24, r10
   19814:	8c da       	rcall	.-2792   	; 0x18d2e <lif_dump_vol>
   19816:	3d c0       	rjmp	.+122    	; 0x19892 <lif_writedirindex+0xae>
   19818:	b6 01       	movw	r22, r12
   1981a:	c5 01       	movw	r24, r10
   1981c:	14 df       	rcall	.-472    	; 0x19646 <lif_checkdirindex>
   1981e:	89 2b       	or	r24, r25
   19820:	99 f3       	breq	.-26     	; 0x19808 <lif_writedirindex+0x24>
   19822:	f5 01       	movw	r30, r10
   19824:	e6 5a       	subi	r30, 0xA6	; 166
   19826:	ff 4f       	sbci	r31, 0xFF	; 255
   19828:	80 81       	ld	r24, Z
   1982a:	91 81       	ldd	r25, Z+1	; 0x01
   1982c:	01 96       	adiw	r24, 0x01	; 1
   1982e:	19 f4       	brne	.+6      	; 0x19836 <lif_writedirindex+0x52>
   19830:	f5 01       	movw	r30, r10
   19832:	d3 a2       	std	Z+35, r13	; 0x23
   19834:	c2 a2       	std	Z+34, r12	; 0x22
   19836:	f5 01       	movw	r30, r10
   19838:	85 a5       	ldd	r24, Z+45	; 0x2d
   1983a:	96 a5       	ldd	r25, Z+46	; 0x2e
   1983c:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1983e:	b0 a9       	ldd	r27, Z+48	; 0x30
   19840:	ba 2f       	mov	r27, r26
   19842:	a9 2f       	mov	r26, r25
   19844:	98 2f       	mov	r25, r24
   19846:	88 27       	eor	r24, r24
   19848:	0d 2c       	mov	r0, r13
   1984a:	00 0c       	add	r0, r0
   1984c:	ee 08       	sbc	r14, r14
   1984e:	ff 08       	sbc	r15, r15
   19850:	35 e0       	ldi	r19, 0x05	; 5
   19852:	cc 0c       	add	r12, r12
   19854:	dd 1c       	adc	r13, r13
   19856:	ee 1c       	adc	r14, r14
   19858:	ff 1c       	adc	r15, r15
   1985a:	3a 95       	dec	r19
   1985c:	d1 f7       	brne	.-12     	; 0x19852 <lif_writedirindex+0x6e>
   1985e:	c8 0e       	add	r12, r24
   19860:	d9 1e       	adc	r13, r25
   19862:	ea 1e       	adc	r14, r26
   19864:	fb 1e       	adc	r15, r27
   19866:	be 01       	movw	r22, r28
   19868:	6f 5f       	subi	r22, 0xFF	; 255
   1986a:	7f 4f       	sbci	r23, 0xFF	; 255
   1986c:	c5 01       	movw	r24, r10
   1986e:	97 d8       	rcall	.-3794   	; 0x1899e <lif_dir2str>
   19870:	00 e2       	ldi	r16, 0x20	; 32
   19872:	10 e0       	ldi	r17, 0x00	; 0
   19874:	a7 01       	movw	r20, r14
   19876:	96 01       	movw	r18, r12
   19878:	be 01       	movw	r22, r28
   1987a:	6f 5f       	subi	r22, 0xFF	; 255
   1987c:	7f 4f       	sbci	r23, 0xFF	; 255
   1987e:	c5 01       	movw	r24, r10
   19880:	0e 94 84 c2 	call	0x18508	; 0x18508 <lif_write>
   19884:	31 e0       	ldi	r19, 0x01	; 1
   19886:	20 e0       	ldi	r18, 0x00	; 0
   19888:	80 97       	sbiw	r24, 0x20	; 32
   1988a:	0c f4       	brge	.+2      	; 0x1988e <lif_writedirindex+0xaa>
   1988c:	30 e0       	ldi	r19, 0x00	; 0
   1988e:	e3 2e       	mov	r14, r19
   19890:	f2 2e       	mov	r15, r18
   19892:	c7 01       	movw	r24, r14
   19894:	a0 96       	adiw	r28, 0x20	; 32
   19896:	ea e0       	ldi	r30, 0x0A	; 10
   19898:	0c 94 b7 e7 	jmp	0x1cf6e	; 0x1cf6e <__epilogue_restores__+0x10>

0001989c <lif_writedirEOF>:
   1989c:	0f 93       	push	r16
   1989e:	1f 93       	push	r17
   198a0:	cf 93       	push	r28
   198a2:	df 93       	push	r29
   198a4:	ec 01       	movw	r28, r24
   198a6:	8b 01       	movw	r16, r22
   198a8:	33 da       	rcall	.-2970   	; 0x18d10 <lif_dir_clear>
   198aa:	fe 01       	movw	r30, r28
   198ac:	e6 5a       	subi	r30, 0xA6	; 166
   198ae:	ff 4f       	sbci	r31, 0xFF	; 255
   198b0:	8f ef       	ldi	r24, 0xFF	; 255
   198b2:	9f ef       	ldi	r25, 0xFF	; 255
   198b4:	91 83       	std	Z+1, r25	; 0x01
   198b6:	80 83       	st	Z, r24
   198b8:	1b a3       	std	Y+35, r17	; 0x23
   198ba:	0a a3       	std	Y+34, r16	; 0x22
   198bc:	b8 01       	movw	r22, r16
   198be:	ce 01       	movw	r24, r28
   198c0:	91 df       	rcall	.-222    	; 0x197e4 <lif_writedirindex>
   198c2:	df 91       	pop	r29
   198c4:	cf 91       	pop	r28
   198c6:	1f 91       	pop	r17
   198c8:	0f 91       	pop	r16
   198ca:	08 95       	ret

000198cc <lif_updatefree>:
/// @brief Update free space
/// @parameter[in] *LIF: LIF structure
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
   198cc:	2f 92       	push	r2
   198ce:	3f 92       	push	r3
   198d0:	4f 92       	push	r4
   198d2:	5f 92       	push	r5
   198d4:	6f 92       	push	r6
   198d6:	7f 92       	push	r7
   198d8:	8f 92       	push	r8
   198da:	af 92       	push	r10
   198dc:	bf 92       	push	r11
   198de:	cf 92       	push	r12
   198e0:	df 92       	push	r13
   198e2:	ef 92       	push	r14
   198e4:	ff 92       	push	r15
   198e6:	0f 93       	push	r16
   198e8:	1f 93       	push	r17
   198ea:	cf 93       	push	r28
   198ec:	df 93       	push	r29
   198ee:	cd b7       	in	r28, 0x3d	; 61
   198f0:	de b7       	in	r29, 0x3e	; 62
   198f2:	2f 97       	sbiw	r28, 0x0f	; 15
   198f4:	0f b6       	in	r0, 0x3f	; 63
   198f6:	f8 94       	cli
   198f8:	de bf       	out	0x3e, r29	; 62
   198fa:	0f be       	out	0x3f, r0	; 63
   198fc:	cd bf       	out	0x3d, r28	; 61
   198fe:	9f 87       	std	Y+15, r25	; 0x0f
   19900:	8e 87       	std	Y+14, r24	; 0x0e
    int index = 0;
    int purgeindex = -1;

// Start of free space
    uint32_t start = LIF->filestart;
   19902:	fc 01       	movw	r30, r24
   19904:	24 84       	ldd	r2, Z+12	; 0x0c
   19906:	35 84       	ldd	r3, Z+13	; 0x0d
   19908:	46 84       	ldd	r4, Z+14	; 0x0e
   1990a:	57 84       	ldd	r5, Z+15	; 0x0f
// Free sectors
    LIF->freesectors = LIF->filesectors;
   1990c:	80 89       	ldd	r24, Z+16	; 0x10
   1990e:	91 89       	ldd	r25, Z+17	; 0x11
   19910:	a2 89       	ldd	r26, Z+18	; 0x12
   19912:	b3 89       	ldd	r27, Z+19	; 0x13
   19914:	80 8f       	std	Z+24, r24	; 0x18
   19916:	91 8f       	std	Z+25, r25	; 0x19
   19918:	a2 8f       	std	Z+26, r26	; 0x1a
   1991a:	b3 8f       	std	Z+27, r27	; 0x1b
// Used sectors
    LIF->usedsectors = 0;
   1991c:	14 8a       	std	Z+20, r1	; 0x14
   1991e:	15 8a       	std	Z+21, r1	; 0x15
   19920:	16 8a       	std	Z+22, r1	; 0x16
   19922:	17 8a       	std	Z+23, r1	; 0x17
// Purged files
    LIF->purged= 0;
   19924:	17 8e       	std	Z+31, r1	; 0x1f
   19926:	16 8e       	std	Z+30, r1	; 0x1e
// Files
    LIF->files = 0;
   19928:	15 8e       	std	Z+29, r1	; 0x1d
   1992a:	14 8e       	std	Z+28, r1	; 0x1c
// Director pointer
    LIF->dirindex = 0;
   1992c:	11 a2       	std	Z+33, r1	; 0x21
   1992e:	10 a2       	std	Z+32, r1	; 0x20
// Directory EOF record
    LIF->EOFindex = 0;
   19930:	13 a2       	std	Z+35, r1	; 0x23
   19932:	12 a2       	std	Z+34, r1	; 0x22
   19934:	cc 24       	eor	r12, r12
   19936:	c3 94       	inc	r12
   19938:	d1 2c       	mov	r13, r1
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
    int index = 0;
    int purgeindex = -1;
   1993a:	0f ef       	ldi	r16, 0xFF	; 255
   1993c:	1f ef       	ldi	r17, 0xFF	; 255
        if( !lif_readdirindex(LIF,index) )
        {
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
   1993e:	e6 5a       	subi	r30, 0xA6	; 166
   19940:	ff 4f       	sbci	r31, 0xFF	; 255
   19942:	f9 87       	std	Y+9, r31	; 0x09
   19944:	e8 87       	std	Y+8, r30	; 0x08
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   19946:	ae 84       	ldd	r10, Y+14	; 0x0e
   19948:	bf 84       	ldd	r11, Y+15	; 0x0f
   1994a:	fc e5       	ldi	r31, 0x5C	; 92
   1994c:	af 0e       	add	r10, r31
   1994e:	b1 1c       	adc	r11, r1
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   19950:	8e 85       	ldd	r24, Y+14	; 0x0e
   19952:	9f 85       	ldd	r25, Y+15	; 0x0f
   19954:	80 5a       	subi	r24, 0xA0	; 160
   19956:	9f 4f       	sbci	r25, 0xFF	; 255
   19958:	9b 87       	std	Y+11, r25	; 0x0b
   1995a:	8a 87       	std	Y+10, r24	; 0x0a
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   1995c:	ee 85       	ldd	r30, Y+14	; 0x0e
   1995e:	ff 85       	ldd	r31, Y+15	; 0x0f
   19960:	e1 5b       	subi	r30, 0xB1	; 177
   19962:	ff 4f       	sbci	r31, 0xFF	; 255
   19964:	fd 87       	std	Y+13, r31	; 0x0d
   19966:	ec 87       	std	Y+12, r30	; 0x0c
   19968:	8c e0       	ldi	r24, 0x0C	; 12
   1996a:	9c e3       	ldi	r25, 0x3C	; 60
   1996c:	3c 01       	movw	r6, r24
   1996e:	81 2c       	mov	r8, r1
   19970:	76 01       	movw	r14, r12
   19972:	21 e0       	ldi	r18, 0x01	; 1
   19974:	e2 1a       	sub	r14, r18
   19976:	f1 08       	sbc	r15, r1
    LIF->EOFindex = 0;

/// Update free
    while(1)
    {
        if( !lif_readdirindex(LIF,index) )
   19978:	b7 01       	movw	r22, r14
   1997a:	8e 85       	ldd	r24, Y+14	; 0x0e
   1997c:	9f 85       	ldd	r25, Y+15	; 0x0f
   1997e:	cb de       	rcall	.-618    	; 0x19716 <lif_readdirindex>
   19980:	89 2b       	or	r24, r25
   19982:	19 f4       	brne	.+6      	; 0x1998a <lif_updatefree+0xbe>
        {
            return(NULL);
   19984:	80 e0       	ldi	r24, 0x00	; 0
   19986:	90 e0       	ldi	r25, 0x00	; 0
   19988:	93 c0       	rjmp	.+294    	; 0x19ab0 <lif_updatefree+0x1e4>
        }

        if(LIF->DIR.FileType == 0xffff)
   1998a:	e8 85       	ldd	r30, Y+8	; 0x08
   1998c:	f9 85       	ldd	r31, Y+9	; 0x09
   1998e:	80 81       	ld	r24, Z
   19990:	91 81       	ldd	r25, Z+1	; 0x01
   19992:	8f 3f       	cpi	r24, 0xFF	; 255
   19994:	ff ef       	ldi	r31, 0xFF	; 255
   19996:	9f 07       	cpc	r25, r31
   19998:	c1 f4       	brne	.+48     	; 0x199ca <lif_updatefree+0xfe>
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
            {
                LIF->EOFindex = purgeindex;
   1999a:	ee 85       	ldd	r30, Y+14	; 0x0e
   1999c:	ff 85       	ldd	r31, Y+15	; 0x0f
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
   1999e:	0f 3f       	cpi	r16, 0xFF	; 255
   199a0:	2f ef       	ldi	r18, 0xFF	; 255
   199a2:	12 07       	cpc	r17, r18
   199a4:	09 f4       	brne	.+2      	; 0x199a8 <lif_updatefree+0xdc>
   199a6:	7a c0       	rjmp	.+244    	; 0x19a9c <lif_updatefree+0x1d0>
            {
                LIF->EOFindex = purgeindex;
   199a8:	13 a3       	std	Z+35, r17	; 0x23
   199aa:	02 a3       	std	Z+34, r16	; 0x22

// Adjust purged file count
                LIF->purged -= (index - purgeindex);
   199ac:	e0 1a       	sub	r14, r16
   199ae:	f1 0a       	sbc	r15, r17
   199b0:	86 8d       	ldd	r24, Z+30	; 0x1e
   199b2:	97 8d       	ldd	r25, Z+31	; 0x1f
   199b4:	8e 19       	sub	r24, r14
   199b6:	9f 09       	sbc	r25, r15
   199b8:	97 8f       	std	Z+31, r25	; 0x1f
   199ba:	86 8f       	std	Z+30, r24	; 0x1e
// update EOF
                if(!lif_writedirEOF(LIF,purgeindex))
   199bc:	b8 01       	movw	r22, r16
   199be:	cf 01       	movw	r24, r30
   199c0:	6d df       	rcall	.-294    	; 0x1989c <lif_writedirEOF>
   199c2:	89 2b       	or	r24, r25
   199c4:	09 f0       	breq	.+2      	; 0x199c8 <lif_updatefree+0xfc>
   199c6:	6c c0       	rjmp	.+216    	; 0x19aa0 <lif_updatefree+0x1d4>
   199c8:	dd cf       	rjmp	.-70     	; 0x19984 <lif_updatefree+0xb8>
                    return(NULL);
                }
            }
            break;
        }
        if(LIF->DIR.FileType == 0)
   199ca:	89 2b       	or	r24, r25
   199cc:	81 f4       	brne	.+32     	; 0x199ee <lif_updatefree+0x122>
        {
            if(purgeindex == -1)
   199ce:	0f 3f       	cpi	r16, 0xFF	; 255
   199d0:	ff ef       	ldi	r31, 0xFF	; 255
   199d2:	1f 07       	cpc	r17, r31
   199d4:	09 f4       	brne	.+2      	; 0x199d8 <lif_updatefree+0x10c>
   199d6:	87 01       	movw	r16, r14
                purgeindex = index;
            LIF->purged++;
   199d8:	ee 85       	ldd	r30, Y+14	; 0x0e
   199da:	ff 85       	ldd	r31, Y+15	; 0x0f
   199dc:	86 8d       	ldd	r24, Z+30	; 0x1e
   199de:	97 8d       	ldd	r25, Z+31	; 0x1f
   199e0:	01 96       	adiw	r24, 0x01	; 1
   199e2:	97 8f       	std	Z+31, r25	; 0x1f
   199e4:	86 8f       	std	Z+30, r24	; 0x1e
   199e6:	ff ef       	ldi	r31, 0xFF	; 255
   199e8:	cf 1a       	sub	r12, r31
   199ea:	df 0a       	sbc	r13, r31
   199ec:	c1 cf       	rjmp	.-126    	; 0x19970 <lif_updatefree+0xa4>
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   199ee:	f5 01       	movw	r30, r10
   199f0:	80 81       	ld	r24, Z
   199f2:	91 81       	ldd	r25, Z+1	; 0x01
   199f4:	a2 81       	ldd	r26, Z+2	; 0x02
   199f6:	b3 81       	ldd	r27, Z+3	; 0x03
   199f8:	82 15       	cp	r24, r2
   199fa:	93 05       	cpc	r25, r3
   199fc:	a4 05       	cpc	r26, r4
   199fe:	b5 05       	cpc	r27, r5
   19a00:	c8 f4       	brcc	.+50     	; 0x19a34 <lif_updatefree+0x168>
        {
            if(debuglevel & LIF_DEBUG)
   19a02:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19a06:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19a0a:	92 ff       	sbrs	r25, 2
   19a0c:	13 c0       	rjmp	.+38     	; 0x19a34 <lif_updatefree+0x168>
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   19a0e:	8c 85       	ldd	r24, Y+12	; 0x0c
   19a10:	9d 85       	ldd	r25, Y+13	; 0x0d
   19a12:	ed b7       	in	r30, 0x3d	; 61
   19a14:	fe b7       	in	r31, 0x3e	; 62
   19a16:	97 83       	std	Z+7, r25	; 0x07
   19a18:	86 83       	std	Z+6, r24	; 0x06
   19a1a:	ee 85       	ldd	r30, Y+14	; 0x0e
   19a1c:	ff 85       	ldd	r31, Y+15	; 0x0f
   19a1e:	80 81       	ld	r24, Z
   19a20:	91 81       	ldd	r25, Z+1	; 0x01
   19a22:	ed b7       	in	r30, 0x3d	; 61
   19a24:	fe b7       	in	r31, 0x3e	; 62
   19a26:	95 83       	std	Z+5, r25	; 0x05
   19a28:	84 83       	std	Z+4, r24	; 0x04
   19a2a:	61 82       	std	Z+1, r6	; 0x01
   19a2c:	72 82       	std	Z+2, r7	; 0x02
   19a2e:	83 82       	std	Z+3, r8	; 0x03
   19a30:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   19a34:	ea 85       	ldd	r30, Y+10	; 0x0a
   19a36:	fb 85       	ldd	r31, Y+11	; 0x0b
   19a38:	80 81       	ld	r24, Z
   19a3a:	91 81       	ldd	r25, Z+1	; 0x01
   19a3c:	a2 81       	ldd	r26, Z+2	; 0x02
   19a3e:	b3 81       	ldd	r27, Z+3	; 0x03
   19a40:	ee 85       	ldd	r30, Y+14	; 0x0e
   19a42:	ff 85       	ldd	r31, Y+15	; 0x0f
   19a44:	44 89       	ldd	r20, Z+20	; 0x14
   19a46:	55 89       	ldd	r21, Z+21	; 0x15
   19a48:	66 89       	ldd	r22, Z+22	; 0x16
   19a4a:	77 89       	ldd	r23, Z+23	; 0x17
   19a4c:	48 0f       	add	r20, r24
   19a4e:	59 1f       	adc	r21, r25
   19a50:	6a 1f       	adc	r22, r26
   19a52:	7b 1f       	adc	r23, r27
   19a54:	44 8b       	std	Z+20, r20	; 0x14
   19a56:	55 8b       	std	Z+21, r21	; 0x15
   19a58:	66 8b       	std	Z+22, r22	; 0x16
   19a5a:	77 8b       	std	Z+23, r23	; 0x17
        LIF->freesectors -= LIF->DIR.FileSectors;
   19a5c:	40 8d       	ldd	r20, Z+24	; 0x18
   19a5e:	51 8d       	ldd	r21, Z+25	; 0x19
   19a60:	62 8d       	ldd	r22, Z+26	; 0x1a
   19a62:	73 8d       	ldd	r23, Z+27	; 0x1b
   19a64:	48 1b       	sub	r20, r24
   19a66:	59 0b       	sbc	r21, r25
   19a68:	6a 0b       	sbc	r22, r26
   19a6a:	7b 0b       	sbc	r23, r27
   19a6c:	40 8f       	std	Z+24, r20	; 0x18
   19a6e:	51 8f       	std	Z+25, r21	; 0x19
   19a70:	62 8f       	std	Z+26, r22	; 0x1a
   19a72:	73 8f       	std	Z+27, r23	; 0x1b
        LIF->files++;
   19a74:	24 8d       	ldd	r18, Z+28	; 0x1c
   19a76:	35 8d       	ldd	r19, Z+29	; 0x1d
   19a78:	2f 5f       	subi	r18, 0xFF	; 255
   19a7a:	3f 4f       	sbci	r19, 0xFF	; 255
   19a7c:	35 8f       	std	Z+29, r19	; 0x1d
   19a7e:	24 8f       	std	Z+28, r18	; 0x1c
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19a80:	f5 01       	movw	r30, r10
   19a82:	40 81       	ld	r20, Z
   19a84:	51 81       	ldd	r21, Z+1	; 0x01
   19a86:	62 81       	ldd	r22, Z+2	; 0x02
   19a88:	73 81       	ldd	r23, Z+3	; 0x03
   19a8a:	1c 01       	movw	r2, r24
   19a8c:	2d 01       	movw	r4, r26
   19a8e:	24 0e       	add	r2, r20
   19a90:	35 1e       	adc	r3, r21
   19a92:	46 1e       	adc	r4, r22
   19a94:	57 1e       	adc	r5, r23
                purgeindex = index;
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
   19a96:	0f ef       	ldi	r16, 0xFF	; 255
   19a98:	1f ef       	ldi	r17, 0xFF	; 255
   19a9a:	a5 cf       	rjmp	.-182    	; 0x199e6 <lif_updatefree+0x11a>
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
   19a9c:	f3 a2       	std	Z+35, r15	; 0x23
   19a9e:	e2 a2       	std	Z+34, r14	; 0x22
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   19aa0:	8f ef       	ldi	r24, 0xFF	; 255
   19aa2:	9f ef       	ldi	r25, 0xFF	; 255
   19aa4:	ee 85       	ldd	r30, Y+14	; 0x0e
   19aa6:	ff 85       	ldd	r31, Y+15	; 0x0f
   19aa8:	91 a3       	std	Z+33, r25	; 0x21
   19aaa:	80 a3       	std	Z+32, r24	; 0x20
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
    }
// rewind
    lif_rewinddir(LIF);
    return(LIF);
   19aac:	8e 85       	ldd	r24, Y+14	; 0x0e
   19aae:	9f 85       	ldd	r25, Y+15	; 0x0f
}
   19ab0:	2f 96       	adiw	r28, 0x0f	; 15
   19ab2:	0f b6       	in	r0, 0x3f	; 63
   19ab4:	f8 94       	cli
   19ab6:	de bf       	out	0x3e, r29	; 62
   19ab8:	0f be       	out	0x3f, r0	; 63
   19aba:	cd bf       	out	0x3d, r28	; 61
   19abc:	df 91       	pop	r29
   19abe:	cf 91       	pop	r28
   19ac0:	1f 91       	pop	r17
   19ac2:	0f 91       	pop	r16
   19ac4:	ff 90       	pop	r15
   19ac6:	ef 90       	pop	r14
   19ac8:	df 90       	pop	r13
   19aca:	cf 90       	pop	r12
   19acc:	bf 90       	pop	r11
   19ace:	af 90       	pop	r10
   19ad0:	8f 90       	pop	r8
   19ad2:	7f 90       	pop	r7
   19ad4:	6f 90       	pop	r6
   19ad6:	5f 90       	pop	r5
   19ad8:	4f 90       	pop	r4
   19ada:	3f 90       	pop	r3
   19adc:	2f 90       	pop	r2
   19ade:	08 95       	ret

00019ae0 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   19ae0:	a9 e2       	ldi	r26, 0x29	; 41
   19ae2:	b1 e0       	ldi	r27, 0x01	; 1
   19ae4:	e6 e7       	ldi	r30, 0x76	; 118
   19ae6:	fd ec       	ldi	r31, 0xCD	; 205
   19ae8:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
   19aec:	4c 01       	movw	r8, r24
   19aee:	3b 01       	movw	r6, r22
   19af0:	19 01       	movw	r2, r18
   19af2:	2a 01       	movw	r4, r20
   19af4:	ca 5d       	subi	r28, 0xDA	; 218
   19af6:	de 4f       	sbci	r29, 0xFE	; 254
   19af8:	e8 82       	st	Y, r14
   19afa:	f9 82       	std	Y+1, r15	; 0x01
   19afc:	0a 83       	std	Y+2, r16	; 0x02
   19afe:	1b 83       	std	Y+3, r17	; 0x03
   19b00:	c6 52       	subi	r28, 0x26	; 38
   19b02:	d1 40       	sbci	r29, 0x01	; 1
   19b04:	c2 5e       	subi	r28, 0xE2	; 226
   19b06:	de 4f       	sbci	r29, 0xFE	; 254
   19b08:	a8 82       	st	Y, r10
   19b0a:	b9 82       	std	Y+1, r11	; 0x01
   19b0c:	ca 82       	std	Y+2, r12	; 0x02
   19b0e:	db 82       	std	Y+3, r13	; 0x03
   19b10:	ce 51       	subi	r28, 0x1E	; 30
   19b12:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   19b14:	80 e0       	ldi	r24, 0x00	; 0
   19b16:	90 e0       	ldi	r25, 0x00	; 0
   19b18:	0e 94 73 38 	call	0x70e6	; 0x70e6 <time>
   19b1c:	5b 01       	movw	r10, r22
   19b1e:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   19b20:	64 e7       	ldi	r22, 0x74	; 116
   19b22:	70 e0       	ldi	r23, 0x00	; 0
   19b24:	80 e0       	ldi	r24, 0x00	; 0
   19b26:	90 e0       	ldi	r25, 0x00	; 0
   19b28:	0e 94 43 c1 	call	0x18286	; 0x18286 <lif_calloc>
   19b2c:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   19b2e:	89 2b       	or	r24, r25
   19b30:	09 f4       	brne	.+2      	; 0x19b34 <lif_create_volume+0x54>
   19b32:	b6 c2       	rjmp	.+1388   	; 0x1a0a0 <lif_create_volume+0x5c0>
        return(NULL);

    printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   19b34:	c2 5e       	subi	r28, 0xE2	; 226
   19b36:	de 4f       	sbci	r29, 0xFE	; 254
   19b38:	28 81       	ld	r18, Y
   19b3a:	39 81       	ldd	r19, Y+1	; 0x01
   19b3c:	4a 81       	ldd	r20, Y+2	; 0x02
   19b3e:	5b 81       	ldd	r21, Y+3	; 0x03
   19b40:	ce 51       	subi	r28, 0x1E	; 30
   19b42:	d1 40       	sbci	r29, 0x01	; 1
   19b44:	ed b7       	in	r30, 0x3d	; 61
   19b46:	fe b7       	in	r31, 0x3e	; 62
   19b48:	20 8b       	std	Z+16, r18	; 0x10
   19b4a:	31 8b       	std	Z+17, r19	; 0x11
   19b4c:	42 8b       	std	Z+18, r20	; 0x12
   19b4e:	53 8b       	std	Z+19, r21	; 0x13
   19b50:	ca 5d       	subi	r28, 0xDA	; 218
   19b52:	de 4f       	sbci	r29, 0xFE	; 254
   19b54:	28 81       	ld	r18, Y
   19b56:	39 81       	ldd	r19, Y+1	; 0x01
   19b58:	4a 81       	ldd	r20, Y+2	; 0x02
   19b5a:	5b 81       	ldd	r21, Y+3	; 0x03
   19b5c:	c6 52       	subi	r28, 0x26	; 38
   19b5e:	d1 40       	sbci	r29, 0x01	; 1
   19b60:	24 87       	std	Z+12, r18	; 0x0c
   19b62:	35 87       	std	Z+13, r19	; 0x0d
   19b64:	46 87       	std	Z+14, r20	; 0x0e
   19b66:	57 87       	std	Z+15, r21	; 0x0f
   19b68:	20 86       	std	Z+8, r2	; 0x08
   19b6a:	31 86       	std	Z+9, r3	; 0x09
   19b6c:	42 86       	std	Z+10, r4	; 0x0a
   19b6e:	53 86       	std	Z+11, r5	; 0x0b
   19b70:	77 82       	std	Z+7, r7	; 0x07
   19b72:	66 82       	std	Z+6, r6	; 0x06
   19b74:	95 82       	std	Z+5, r9	; 0x05
   19b76:	84 82       	std	Z+4, r8	; 0x04
   19b78:	87 ee       	ldi	r24, 0xE7	; 231
   19b7a:	9c e3       	ldi	r25, 0x3C	; 60
   19b7c:	a0 e0       	ldi	r26, 0x00	; 0
   19b7e:	81 83       	std	Z+1, r24	; 0x01
   19b80:	92 83       	std	Z+2, r25	; 0x02
   19b82:	a3 83       	std	Z+3, r26	; 0x03
   19b84:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & LIF_DEBUG)
   19b88:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19b8c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19b90:	92 ff       	sbrs	r25, 2
   19b92:	04 c0       	rjmp	.+8      	; 0x19b9c <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   19b94:	69 e1       	ldi	r22, 0x19	; 25
   19b96:	76 e1       	ldi	r23, 0x16	; 22
   19b98:	c7 01       	movw	r24, r14
   19b9a:	c9 d8       	rcall	.-3694   	; 0x18d2e <lif_dump_vol>

    lif_image_clear(LIF);
   19b9c:	c7 01       	movw	r24, r14
   19b9e:	b2 d8       	rcall	.-3740   	; 0x18d04 <lif_image_clear>

// Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   19ba0:	80 e0       	ldi	r24, 0x00	; 0
   19ba2:	90 e8       	ldi	r25, 0x80	; 128
   19ba4:	f7 01       	movw	r30, r14
   19ba6:	95 a3       	std	Z+37, r25	; 0x25
   19ba8:	84 a3       	std	Z+36, r24	; 0x24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   19baa:	46 e0       	ldi	r20, 0x06	; 6
   19bac:	50 e0       	ldi	r21, 0x00	; 0
   19bae:	b3 01       	movw	r22, r6
   19bb0:	c7 01       	movw	r24, r14
   19bb2:	86 96       	adiw	r24, 0x26	; 38
   19bb4:	0e 94 86 c3 	call	0x1870c	; 0x1870c <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   19bb8:	f7 01       	movw	r30, r14
   19bba:	25 a6       	std	Z+45, r2	; 0x2d
   19bbc:	36 a6       	std	Z+46, r3	; 0x2e
   19bbe:	47 a6       	std	Z+47, r4	; 0x2f
   19bc0:	50 aa       	std	Z+48, r5	; 0x30
    LIF->VOL.DirSectors = dirsectors;
   19bc2:	ca 5d       	subi	r28, 0xDA	; 218
   19bc4:	de 4f       	sbci	r29, 0xFE	; 254
   19bc6:	28 81       	ld	r18, Y
   19bc8:	39 81       	ldd	r19, Y+1	; 0x01
   19bca:	4a 81       	ldd	r20, Y+2	; 0x02
   19bcc:	5b 81       	ldd	r21, Y+3	; 0x03
   19bce:	c6 52       	subi	r28, 0x26	; 38
   19bd0:	d1 40       	sbci	r29, 0x01	; 1
   19bd2:	25 ab       	std	Z+53, r18	; 0x35
   19bd4:	36 ab       	std	Z+54, r19	; 0x36
   19bd6:	47 ab       	std	Z+55, r20	; 0x37
   19bd8:	50 af       	std	Z+56, r21	; 0x38
    LIF->VOL.System3000LIFid = 0x1000;
   19bda:	80 e0       	ldi	r24, 0x00	; 0
   19bdc:	90 e1       	ldi	r25, 0x10	; 16
   19bde:	92 ab       	std	Z+50, r25	; 0x32
   19be0:	81 ab       	std	Z+49, r24	; 0x31
    LIF->VOL.tracks_per_side = 0;
   19be2:	fd 96       	adiw	r30, 0x3d	; 61
   19be4:	10 82       	st	Z, r1
   19be6:	11 82       	std	Z+1, r1	; 0x01
   19be8:	12 82       	std	Z+2, r1	; 0x02
   19bea:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sides = 0;
   19bec:	34 96       	adiw	r30, 0x04	; 4
   19bee:	10 82       	st	Z, r1
   19bf0:	11 82       	std	Z+1, r1	; 0x01
   19bf2:	12 82       	std	Z+2, r1	; 0x02
   19bf4:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sectors_per_track = 0;
   19bf6:	34 96       	adiw	r30, 0x04	; 4
   19bf8:	10 82       	st	Z, r1
   19bfa:	11 82       	std	Z+1, r1	; 0x01
   19bfc:	12 82       	std	Z+2, r1	; 0x02
   19bfe:	13 82       	std	Z+3, r1	; 0x03
///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   19c00:	a7 01       	movw	r20, r14
   19c02:	47 5b       	subi	r20, 0xB7	; 183
   19c04:	5f 4f       	sbci	r21, 0xFF	; 255
   19c06:	c6 01       	movw	r24, r12
   19c08:	b5 01       	movw	r22, r10
   19c0a:	0e 94 ab c5 	call	0x18b56	; 0x18b56 <lif_time2lifbcd>

// update LIF headers
    LIF->name = lif_stralloc(imagename);
   19c0e:	c4 01       	movw	r24, r8
   19c10:	0e 94 8e c1 	call	0x1831c	; 0x1831c <lif_stralloc>
   19c14:	d7 01       	movw	r26, r14
   19c16:	8d 93       	st	X+, r24
   19c18:	9c 93       	st	X, r25
    if(LIF->name == NULL)
   19c1a:	89 2b       	or	r24, r25
   19c1c:	09 f4       	brne	.+2      	; 0x19c20 <lif_create_volume+0x140>
   19c1e:	35 c2       	rjmp	.+1130   	; 0x1a08a <lif_create_volume+0x5aa>
        lif_close_volume(LIF);
        return(NULL);
    }

// Initilize all LIF headers
    LIF->filesectors = filesectors;
   19c20:	c2 5e       	subi	r28, 0xE2	; 226
   19c22:	de 4f       	sbci	r29, 0xFE	; 254
   19c24:	28 81       	ld	r18, Y
   19c26:	39 81       	ldd	r19, Y+1	; 0x01
   19c28:	4a 81       	ldd	r20, Y+2	; 0x02
   19c2a:	5b 81       	ldd	r21, Y+3	; 0x03
   19c2c:	ce 51       	subi	r28, 0x1E	; 30
   19c2e:	d1 40       	sbci	r29, 0x01	; 1
   19c30:	f7 01       	movw	r30, r14
   19c32:	20 8b       	std	Z+16, r18	; 0x10
   19c34:	31 8b       	std	Z+17, r19	; 0x11
   19c36:	42 8b       	std	Z+18, r20	; 0x12
   19c38:	53 8b       	std	Z+19, r21	; 0x13
    LIF->filestart = dirstart + dirsectors;
   19c3a:	ca 5d       	subi	r28, 0xDA	; 218
   19c3c:	de 4f       	sbci	r29, 0xFE	; 254
   19c3e:	88 81       	ld	r24, Y
   19c40:	99 81       	ldd	r25, Y+1	; 0x01
   19c42:	aa 81       	ldd	r26, Y+2	; 0x02
   19c44:	bb 81       	ldd	r27, Y+3	; 0x03
   19c46:	c6 52       	subi	r28, 0x26	; 38
   19c48:	d1 40       	sbci	r29, 0x01	; 1
   19c4a:	82 0d       	add	r24, r2
   19c4c:	93 1d       	adc	r25, r3
   19c4e:	a4 1d       	adc	r26, r4
   19c50:	b5 1d       	adc	r27, r5
   19c52:	84 87       	std	Z+12, r24	; 0x0c
   19c54:	95 87       	std	Z+13, r25	; 0x0d
   19c56:	a6 87       	std	Z+14, r26	; 0x0e
   19c58:	b7 87       	std	Z+15, r27	; 0x0f
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   19c5a:	82 0f       	add	r24, r18
   19c5c:	93 1f       	adc	r25, r19
   19c5e:	a4 1f       	adc	r26, r20
   19c60:	b5 1f       	adc	r27, r21
   19c62:	84 83       	std	Z+4, r24	; 0x04
   19c64:	95 83       	std	Z+5, r25	; 0x05
   19c66:	a6 83       	std	Z+6, r26	; 0x06
   19c68:	b7 83       	std	Z+7, r27	; 0x07
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   19c6a:	ba 2f       	mov	r27, r26
   19c6c:	a9 2f       	mov	r26, r25
   19c6e:	98 2f       	mov	r25, r24
   19c70:	88 27       	eor	r24, r24
   19c72:	80 87       	std	Z+8, r24	; 0x08
   19c74:	91 87       	std	Z+9, r25	; 0x09
   19c76:	a2 87       	std	Z+10, r26	; 0x0a
   19c78:	b3 87       	std	Z+11, r27	; 0x0b
    LIF->freesectors = LIF->filesectors;
   19c7a:	20 8f       	std	Z+24, r18	; 0x18
   19c7c:	31 8f       	std	Z+25, r19	; 0x19
   19c7e:	42 8f       	std	Z+26, r20	; 0x1a
   19c80:	53 8f       	std	Z+27, r21	; 0x1b
    LIF->usedsectors = 0;
   19c82:	14 8a       	std	Z+20, r1	; 0x14
   19c84:	15 8a       	std	Z+21, r1	; 0x15
   19c86:	16 8a       	std	Z+22, r1	; 0x16
   19c88:	17 8a       	std	Z+23, r1	; 0x17
    LIF->files = 0;
   19c8a:	15 8e       	std	Z+29, r1	; 0x1d
   19c8c:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->purged = 0;
   19c8e:	17 8e       	std	Z+31, r1	; 0x1f
   19c90:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->dirindex = 0;
   19c92:	11 a2       	std	Z+33, r1	; 0x21
   19c94:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19c96:	13 a2       	std	Z+35, r1	; 0x23
   19c98:	12 a2       	std	Z+34, r1	; 0x22

    memset(buffer,0,LIF_SECTOR_SIZE);
   19c9a:	61 2c       	mov	r6, r1
   19c9c:	77 24       	eor	r7, r7
   19c9e:	73 94       	inc	r7
   19ca0:	9e 01       	movw	r18, r28
   19ca2:	2c 5e       	subi	r18, 0xEC	; 236
   19ca4:	3f 4f       	sbci	r19, 0xFF	; 255
   19ca6:	49 01       	movw	r8, r18
   19ca8:	d9 01       	movw	r26, r18
   19caa:	f3 01       	movw	r30, r6
   19cac:	1d 92       	st	X+, r1
   19cae:	31 97       	sbiw	r30, 0x01	; 1
   19cb0:	e9 f7       	brne	.-6      	; 0x19cac <lif_create_volume+0x1cc>

    lif_vol2str(LIF,buffer);
   19cb2:	b9 01       	movw	r22, r18
   19cb4:	c7 01       	movw	r24, r14
   19cb6:	0e 94 c3 c3 	call	0x18786	; 0x18786 <lif_vol2str>

// Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   19cba:	64 e0       	ldi	r22, 0x04	; 4
   19cbc:	79 e0       	ldi	r23, 0x09	; 9
   19cbe:	d7 01       	movw	r26, r14
   19cc0:	8d 91       	ld	r24, X+
   19cc2:	9c 91       	ld	r25, X
   19cc4:	0e 94 ad c1 	call	0x1835a	; 0x1835a <lif_open>
   19cc8:	f7 01       	movw	r30, r14
   19cca:	93 83       	std	Z+3, r25	; 0x03
   19ccc:	82 83       	std	Z+2, r24	; 0x02
    if(LIF->fp == NULL)
   19cce:	89 2b       	or	r24, r25
   19cd0:	09 f4       	brne	.+2      	; 0x19cd4 <lif_create_volume+0x1f4>
   19cd2:	db c1       	rjmp	.+950    	; 0x1a08a <lif_create_volume+0x5aa>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19cd4:	00 e0       	ldi	r16, 0x00	; 0
   19cd6:	11 e0       	ldi	r17, 0x01	; 1
   19cd8:	20 e0       	ldi	r18, 0x00	; 0
   19cda:	30 e0       	ldi	r19, 0x00	; 0
   19cdc:	a9 01       	movw	r20, r18
   19cde:	b4 01       	movw	r22, r8
   19ce0:	c7 01       	movw	r24, r14
   19ce2:	0e 94 84 c2 	call	0x18508	; 0x18508 <lif_write>
   19ce6:	9c 01       	movw	r18, r24
   19ce8:	99 0f       	add	r25, r25
   19cea:	44 0b       	sbc	r20, r20
   19cec:	55 0b       	sbc	r21, r21
   19cee:	ca 5e       	subi	r28, 0xEA	; 234
   19cf0:	de 4f       	sbci	r29, 0xFE	; 254
   19cf2:	28 83       	st	Y, r18
   19cf4:	39 83       	std	Y+1, r19	; 0x01
   19cf6:	4a 83       	std	Y+2, r20	; 0x02
   19cf8:	5b 83       	std	Y+3, r21	; 0x03
   19cfa:	c6 51       	subi	r28, 0x16	; 22
   19cfc:	d1 40       	sbci	r29, 0x01	; 1

    if(size < LIF_SECTOR_SIZE)
   19cfe:	2f 3f       	cpi	r18, 0xFF	; 255
   19d00:	31 05       	cpc	r19, r1
   19d02:	41 05       	cpc	r20, r1
   19d04:	51 05       	cpc	r21, r1
   19d06:	09 f0       	breq	.+2      	; 0x19d0a <lif_create_volume+0x22a>
   19d08:	0c f4       	brge	.+2      	; 0x19d0c <lif_create_volume+0x22c>
   19d0a:	bf c1       	rjmp	.+894    	; 0x1a08a <lif_create_volume+0x5aa>
        return(NULL);
    }
    offset += size;
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);
   19d0c:	d4 01       	movw	r26, r8
   19d0e:	f3 01       	movw	r30, r6
   19d10:	1d 92       	st	X+, r1
   19d12:	31 97       	sbiw	r30, 0x01	; 1
   19d14:	e9 f7       	brne	.-6      	; 0x19d10 <lif_create_volume+0x230>

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19d16:	21 e0       	ldi	r18, 0x01	; 1
   19d18:	30 e0       	ldi	r19, 0x00	; 0
   19d1a:	40 e0       	ldi	r20, 0x00	; 0
   19d1c:	50 e0       	ldi	r21, 0x00	; 0
   19d1e:	c6 5e       	subi	r28, 0xE6	; 230
   19d20:	de 4f       	sbci	r29, 0xFE	; 254
   19d22:	28 83       	st	Y, r18
   19d24:	39 83       	std	Y+1, r19	; 0x01
   19d26:	4a 83       	std	Y+2, r20	; 0x02
   19d28:	5b 83       	std	Y+3, r21	; 0x03
   19d2a:	ca 51       	subi	r28, 0x1A	; 26
   19d2c:	d1 40       	sbci	r29, 0x01	; 1
   19d2e:	64 01       	movw	r12, r8
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        printf("\tWrote: %ld\r", count);
   19d30:	8a ed       	ldi	r24, 0xDA	; 218
   19d32:	9c e3       	ldi	r25, 0x3C	; 60
   19d34:	3c 01       	movw	r6, r24
   19d36:	81 2c       	mov	r8, r1
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19d38:	c6 5e       	subi	r28, 0xE6	; 230
   19d3a:	de 4f       	sbci	r29, 0xFE	; 254
   19d3c:	88 81       	ld	r24, Y
   19d3e:	99 81       	ldd	r25, Y+1	; 0x01
   19d40:	aa 81       	ldd	r26, Y+2	; 0x02
   19d42:	bb 81       	ldd	r27, Y+3	; 0x03
   19d44:	ca 51       	subi	r28, 0x1A	; 26
   19d46:	d1 40       	sbci	r29, 0x01	; 1
   19d48:	82 15       	cp	r24, r2
   19d4a:	93 05       	cpc	r25, r3
   19d4c:	a4 05       	cpc	r26, r4
   19d4e:	b5 05       	cpc	r27, r5
   19d50:	0c f0       	brlt	.+2      	; 0x19d54 <lif_create_volume+0x274>
   19d52:	55 c0       	rjmp	.+170    	; 0x19dfe <lif_create_volume+0x31e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19d54:	00 e0       	ldi	r16, 0x00	; 0
   19d56:	11 e0       	ldi	r17, 0x01	; 1
   19d58:	ca 5e       	subi	r28, 0xEA	; 234
   19d5a:	de 4f       	sbci	r29, 0xFE	; 254
   19d5c:	28 81       	ld	r18, Y
   19d5e:	39 81       	ldd	r19, Y+1	; 0x01
   19d60:	4a 81       	ldd	r20, Y+2	; 0x02
   19d62:	5b 81       	ldd	r21, Y+3	; 0x03
   19d64:	c6 51       	subi	r28, 0x16	; 22
   19d66:	d1 40       	sbci	r29, 0x01	; 1
   19d68:	b6 01       	movw	r22, r12
   19d6a:	c7 01       	movw	r24, r14
   19d6c:	0e 94 84 c2 	call	0x18508	; 0x18508 <lif_write>
   19d70:	09 2e       	mov	r0, r25
   19d72:	00 0c       	add	r0, r0
   19d74:	aa 0b       	sbc	r26, r26
   19d76:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19d78:	8f 3f       	cpi	r24, 0xFF	; 255
   19d7a:	91 05       	cpc	r25, r1
   19d7c:	a1 05       	cpc	r26, r1
   19d7e:	b1 05       	cpc	r27, r1
   19d80:	09 f0       	breq	.+2      	; 0x19d84 <lif_create_volume+0x2a4>
   19d82:	0c f4       	brge	.+2      	; 0x19d86 <lif_create_volume+0x2a6>
   19d84:	82 c1       	rjmp	.+772    	; 0x1a08a <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19d86:	ca 5e       	subi	r28, 0xEA	; 234
   19d88:	de 4f       	sbci	r29, 0xFE	; 254
   19d8a:	28 81       	ld	r18, Y
   19d8c:	39 81       	ldd	r19, Y+1	; 0x01
   19d8e:	4a 81       	ldd	r20, Y+2	; 0x02
   19d90:	5b 81       	ldd	r21, Y+3	; 0x03
   19d92:	c6 51       	subi	r28, 0x16	; 22
   19d94:	d1 40       	sbci	r29, 0x01	; 1
   19d96:	28 0f       	add	r18, r24
   19d98:	39 1f       	adc	r19, r25
   19d9a:	4a 1f       	adc	r20, r26
   19d9c:	5b 1f       	adc	r21, r27
   19d9e:	ca 5e       	subi	r28, 0xEA	; 234
   19da0:	de 4f       	sbci	r29, 0xFE	; 254
   19da2:	28 83       	st	Y, r18
   19da4:	39 83       	std	Y+1, r19	; 0x01
   19da6:	4a 83       	std	Y+2, r20	; 0x02
   19da8:	5b 83       	std	Y+3, r21	; 0x03
   19daa:	c6 51       	subi	r28, 0x16	; 22
   19dac:	d1 40       	sbci	r29, 0x01	; 1
        printf("\tWrote: %ld\r", count);
   19dae:	c6 5e       	subi	r28, 0xE6	; 230
   19db0:	de 4f       	sbci	r29, 0xFE	; 254
   19db2:	88 81       	ld	r24, Y
   19db4:	99 81       	ldd	r25, Y+1	; 0x01
   19db6:	aa 81       	ldd	r26, Y+2	; 0x02
   19db8:	bb 81       	ldd	r27, Y+3	; 0x03
   19dba:	ca 51       	subi	r28, 0x1A	; 26
   19dbc:	d1 40       	sbci	r29, 0x01	; 1
   19dbe:	ed b7       	in	r30, 0x3d	; 61
   19dc0:	fe b7       	in	r31, 0x3e	; 62
   19dc2:	84 83       	std	Z+4, r24	; 0x04
   19dc4:	95 83       	std	Z+5, r25	; 0x05
   19dc6:	a6 83       	std	Z+6, r26	; 0x06
   19dc8:	b7 83       	std	Z+7, r27	; 0x07
   19dca:	61 82       	std	Z+1, r6	; 0x01
   19dcc:	72 82       	std	Z+2, r7	; 0x02
   19dce:	83 82       	std	Z+3, r8	; 0x03
   19dd0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19dd4:	c6 5e       	subi	r28, 0xE6	; 230
   19dd6:	de 4f       	sbci	r29, 0xFE	; 254
   19dd8:	28 81       	ld	r18, Y
   19dda:	39 81       	ldd	r19, Y+1	; 0x01
   19ddc:	4a 81       	ldd	r20, Y+2	; 0x02
   19dde:	5b 81       	ldd	r21, Y+3	; 0x03
   19de0:	ca 51       	subi	r28, 0x1A	; 26
   19de2:	d1 40       	sbci	r29, 0x01	; 1
   19de4:	2f 5f       	subi	r18, 0xFF	; 255
   19de6:	3f 4f       	sbci	r19, 0xFF	; 255
   19de8:	4f 4f       	sbci	r20, 0xFF	; 255
   19dea:	5f 4f       	sbci	r21, 0xFF	; 255
   19dec:	c6 5e       	subi	r28, 0xE6	; 230
   19dee:	de 4f       	sbci	r29, 0xFE	; 254
   19df0:	28 83       	st	Y, r18
   19df2:	39 83       	std	Y+1, r19	; 0x01
   19df4:	4a 83       	std	Y+2, r20	; 0x02
   19df6:	5b 83       	std	Y+3, r21	; 0x03
   19df8:	ca 51       	subi	r28, 0x1A	; 26
   19dfa:	d1 40       	sbci	r29, 0x01	; 1
   19dfc:	9d cf       	rjmp	.-198    	; 0x19d38 <lif_create_volume+0x258>
        printf("\tWrote: %ld\r", count);
        ++count;
    }

// Write Directory sectors
    lif_dir_clear(LIF);
   19dfe:	c7 01       	movw	r24, r14
   19e00:	0e 94 88 c6 	call	0x18d10	; 0x18d10 <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   19e04:	8f ef       	ldi	r24, 0xFF	; 255
   19e06:	9f ef       	ldi	r25, 0xFF	; 255
   19e08:	f7 01       	movw	r30, r14
   19e0a:	e6 5a       	subi	r30, 0xA6	; 166
   19e0c:	ff 4f       	sbci	r31, 0xFF	; 255
   19e0e:	91 83       	std	Z+1, r25	; 0x01
   19e10:	80 83       	st	Z, r24
   19e12:	46 01       	movw	r8, r12
   19e14:	6e 01       	movw	r12, r28
   19e16:	9c ee       	ldi	r25, 0xEC	; 236
   19e18:	c9 1a       	sub	r12, r25
   19e1a:	9e ef       	ldi	r25, 0xFE	; 254
   19e1c:	d9 0a       	sbc	r13, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   19e1e:	b4 01       	movw	r22, r8
   19e20:	c7 01       	movw	r24, r14
   19e22:	0e 94 cf c4 	call	0x1899e	; 0x1899e <lif_dir2str>
   19e26:	a0 e2       	ldi	r26, 0x20	; 32
   19e28:	8a 0e       	add	r8, r26
   19e2a:	91 1c       	adc	r9, r1

// Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   19e2c:	c8 14       	cp	r12, r8
   19e2e:	d9 04       	cpc	r13, r9
   19e30:	b1 f7       	brne	.-20     	; 0x19e1e <lif_create_volume+0x33e>
   19e32:	a1 2c       	mov	r10, r1
   19e34:	b1 2c       	mov	r11, r1
   19e36:	65 01       	movw	r12, r10
   19e38:	fe 01       	movw	r30, r28
   19e3a:	74 96       	adiw	r30, 0x14	; 20
   19e3c:	cc 5e       	subi	r28, 0xEC	; 236
   19e3e:	de 4f       	sbci	r29, 0xFE	; 254
   19e40:	f9 83       	std	Y+1, r31	; 0x01
   19e42:	e8 83       	st	Y, r30
   19e44:	c4 51       	subi	r28, 0x14	; 20
   19e46:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   19e48:	84 e6       	ldi	r24, 0x64	; 100
   19e4a:	28 2e       	mov	r2, r24
   19e4c:	31 2c       	mov	r3, r1
   19e4e:	41 2c       	mov	r4, r1
   19e50:	51 2c       	mov	r5, r1
            printf("\tWrote: %ld\r", count);
   19e52:	8d ec       	ldi	r24, 0xCD	; 205
   19e54:	9c e3       	ldi	r25, 0x3C	; 60
   19e56:	3c 01       	movw	r6, r24
   19e58:	81 2c       	mov	r8, r1
   19e5a:	c6 5e       	subi	r28, 0xE6	; 230
   19e5c:	de 4f       	sbci	r29, 0xFE	; 254
   19e5e:	28 81       	ld	r18, Y
   19e60:	39 81       	ldd	r19, Y+1	; 0x01
   19e62:	4a 81       	ldd	r20, Y+2	; 0x02
   19e64:	5b 81       	ldd	r21, Y+3	; 0x03
   19e66:	ca 51       	subi	r28, 0x1A	; 26
   19e68:	d1 40       	sbci	r29, 0x01	; 1
   19e6a:	2a 0d       	add	r18, r10
   19e6c:	3b 1d       	adc	r19, r11
   19e6e:	4c 1d       	adc	r20, r12
   19e70:	5d 1d       	adc	r21, r13
   19e72:	ce 5d       	subi	r28, 0xDE	; 222
   19e74:	de 4f       	sbci	r29, 0xFE	; 254
   19e76:	28 83       	st	Y, r18
   19e78:	39 83       	std	Y+1, r19	; 0x01
   19e7a:	4a 83       	std	Y+2, r20	; 0x02
   19e7c:	5b 83       	std	Y+3, r21	; 0x03
   19e7e:	c2 52       	subi	r28, 0x22	; 34
   19e80:	d1 40       	sbci	r29, 0x01	; 1
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19e82:	ca 5d       	subi	r28, 0xDA	; 218
   19e84:	de 4f       	sbci	r29, 0xFE	; 254
   19e86:	88 81       	ld	r24, Y
   19e88:	99 81       	ldd	r25, Y+1	; 0x01
   19e8a:	aa 81       	ldd	r26, Y+2	; 0x02
   19e8c:	bb 81       	ldd	r27, Y+3	; 0x03
   19e8e:	c6 52       	subi	r28, 0x26	; 38
   19e90:	d1 40       	sbci	r29, 0x01	; 1
   19e92:	a8 16       	cp	r10, r24
   19e94:	b9 06       	cpc	r11, r25
   19e96:	ca 06       	cpc	r12, r26
   19e98:	db 06       	cpc	r13, r27
   19e9a:	0c f0       	brlt	.+2      	; 0x19e9e <lif_create_volume+0x3be>
   19e9c:	58 c0       	rjmp	.+176    	; 0x19f4e <lif_create_volume+0x46e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19e9e:	00 e0       	ldi	r16, 0x00	; 0
   19ea0:	11 e0       	ldi	r17, 0x01	; 1
   19ea2:	ca 5e       	subi	r28, 0xEA	; 234
   19ea4:	de 4f       	sbci	r29, 0xFE	; 254
   19ea6:	28 81       	ld	r18, Y
   19ea8:	39 81       	ldd	r19, Y+1	; 0x01
   19eaa:	4a 81       	ldd	r20, Y+2	; 0x02
   19eac:	5b 81       	ldd	r21, Y+3	; 0x03
   19eae:	c6 51       	subi	r28, 0x16	; 22
   19eb0:	d1 40       	sbci	r29, 0x01	; 1
   19eb2:	be 01       	movw	r22, r28
   19eb4:	6c 5e       	subi	r22, 0xEC	; 236
   19eb6:	7f 4f       	sbci	r23, 0xFF	; 255
   19eb8:	c7 01       	movw	r24, r14
   19eba:	0e 94 84 c2 	call	0x18508	; 0x18508 <lif_write>
   19ebe:	09 2e       	mov	r0, r25
   19ec0:	00 0c       	add	r0, r0
   19ec2:	aa 0b       	sbc	r26, r26
   19ec4:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19ec6:	8f 3f       	cpi	r24, 0xFF	; 255
   19ec8:	91 05       	cpc	r25, r1
   19eca:	a1 05       	cpc	r26, r1
   19ecc:	b1 05       	cpc	r27, r1
   19ece:	09 f0       	breq	.+2      	; 0x19ed2 <lif_create_volume+0x3f2>
   19ed0:	0c f4       	brge	.+2      	; 0x19ed4 <lif_create_volume+0x3f4>
   19ed2:	db c0       	rjmp	.+438    	; 0x1a08a <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19ed4:	ca 5e       	subi	r28, 0xEA	; 234
   19ed6:	de 4f       	sbci	r29, 0xFE	; 254
   19ed8:	28 81       	ld	r18, Y
   19eda:	39 81       	ldd	r19, Y+1	; 0x01
   19edc:	4a 81       	ldd	r20, Y+2	; 0x02
   19ede:	5b 81       	ldd	r21, Y+3	; 0x03
   19ee0:	c6 51       	subi	r28, 0x16	; 22
   19ee2:	d1 40       	sbci	r29, 0x01	; 1
   19ee4:	28 0f       	add	r18, r24
   19ee6:	39 1f       	adc	r19, r25
   19ee8:	4a 1f       	adc	r20, r26
   19eea:	5b 1f       	adc	r21, r27
   19eec:	ca 5e       	subi	r28, 0xEA	; 234
   19eee:	de 4f       	sbci	r29, 0xFE	; 254
   19ef0:	28 83       	st	Y, r18
   19ef2:	39 83       	std	Y+1, r19	; 0x01
   19ef4:	4a 83       	std	Y+2, r20	; 0x02
   19ef6:	5b 83       	std	Y+3, r21	; 0x03
   19ef8:	c6 51       	subi	r28, 0x16	; 22
   19efa:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   19efc:	ce 5d       	subi	r28, 0xDE	; 222
   19efe:	de 4f       	sbci	r29, 0xFE	; 254
   19f00:	68 81       	ld	r22, Y
   19f02:	79 81       	ldd	r23, Y+1	; 0x01
   19f04:	8a 81       	ldd	r24, Y+2	; 0x02
   19f06:	9b 81       	ldd	r25, Y+3	; 0x03
   19f08:	c2 52       	subi	r28, 0x22	; 34
   19f0a:	d1 40       	sbci	r29, 0x01	; 1
   19f0c:	a2 01       	movw	r20, r4
   19f0e:	91 01       	movw	r18, r2
   19f10:	0e 94 48 e7 	call	0x1ce90	; 0x1ce90 <__divmodsi4>
   19f14:	67 2b       	or	r22, r23
   19f16:	68 2b       	or	r22, r24
   19f18:	69 2b       	or	r22, r25
   19f1a:	99 f4       	brne	.+38     	; 0x19f42 <lif_create_volume+0x462>
            printf("\tWrote: %ld\r", count);
   19f1c:	ce 5d       	subi	r28, 0xDE	; 222
   19f1e:	de 4f       	sbci	r29, 0xFE	; 254
   19f20:	88 81       	ld	r24, Y
   19f22:	99 81       	ldd	r25, Y+1	; 0x01
   19f24:	aa 81       	ldd	r26, Y+2	; 0x02
   19f26:	bb 81       	ldd	r27, Y+3	; 0x03
   19f28:	c2 52       	subi	r28, 0x22	; 34
   19f2a:	d1 40       	sbci	r29, 0x01	; 1
   19f2c:	ed b7       	in	r30, 0x3d	; 61
   19f2e:	fe b7       	in	r31, 0x3e	; 62
   19f30:	84 83       	std	Z+4, r24	; 0x04
   19f32:	95 83       	std	Z+5, r25	; 0x05
   19f34:	a6 83       	std	Z+6, r26	; 0x06
   19f36:	b7 83       	std	Z+7, r27	; 0x07
   19f38:	61 82       	std	Z+1, r6	; 0x01
   19f3a:	72 82       	std	Z+2, r7	; 0x02
   19f3c:	83 82       	std	Z+3, r8	; 0x03
   19f3e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19f42:	ff ef       	ldi	r31, 0xFF	; 255
   19f44:	af 1a       	sub	r10, r31
   19f46:	bf 0a       	sbc	r11, r31
   19f48:	cf 0a       	sbc	r12, r31
   19f4a:	df 0a       	sbc	r13, r31
   19f4c:	86 cf       	rjmp	.-244    	; 0x19e5a <lif_create_volume+0x37a>
            printf("\tWrote: %ld\r", count);
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   19f4e:	80 e0       	ldi	r24, 0x00	; 0
   19f50:	91 e0       	ldi	r25, 0x01	; 1
   19f52:	cc 5e       	subi	r28, 0xEC	; 236
   19f54:	de 4f       	sbci	r29, 0xFE	; 254
   19f56:	a8 81       	ld	r26, Y
   19f58:	b9 81       	ldd	r27, Y+1	; 0x01
   19f5a:	c4 51       	subi	r28, 0x14	; 20
   19f5c:	d1 40       	sbci	r29, 0x01	; 1
   19f5e:	fc 01       	movw	r30, r24
   19f60:	1d 92       	st	X+, r1
   19f62:	31 97       	sbiw	r30, 0x01	; 1
   19f64:	e9 f7       	brne	.-6      	; 0x19f60 <lif_create_volume+0x480>
    for(i=0;i<filesectors;++i)
   19f66:	81 2c       	mov	r8, r1
   19f68:	91 2c       	mov	r9, r1
   19f6a:	54 01       	movw	r10, r8
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   19f6c:	80 ec       	ldi	r24, 0xC0	; 192
   19f6e:	9c e3       	ldi	r25, 0x3C	; 60
   19f70:	9c 01       	movw	r18, r24
   19f72:	40 e0       	ldi	r20, 0x00	; 0
   19f74:	c6 5e       	subi	r28, 0xE6	; 230
   19f76:	de 4f       	sbci	r29, 0xFE	; 254
   19f78:	28 83       	st	Y, r18
   19f7a:	39 83       	std	Y+1, r19	; 0x01
   19f7c:	4a 83       	std	Y+2, r20	; 0x02
   19f7e:	ca 51       	subi	r28, 0x1A	; 26
   19f80:	d1 40       	sbci	r29, 0x01	; 1
   19f82:	ce 5d       	subi	r28, 0xDE	; 222
   19f84:	de 4f       	sbci	r29, 0xFE	; 254
   19f86:	48 80       	ld	r4, Y
   19f88:	59 80       	ldd	r5, Y+1	; 0x01
   19f8a:	6a 80       	ldd	r6, Y+2	; 0x02
   19f8c:	7b 80       	ldd	r7, Y+3	; 0x03
   19f8e:	c2 52       	subi	r28, 0x22	; 34
   19f90:	d1 40       	sbci	r29, 0x01	; 1
   19f92:	48 0c       	add	r4, r8
   19f94:	59 1c       	adc	r5, r9
   19f96:	6a 1c       	adc	r6, r10
   19f98:	7b 1c       	adc	r7, r11
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19f9a:	c2 5e       	subi	r28, 0xE2	; 226
   19f9c:	de 4f       	sbci	r29, 0xFE	; 254
   19f9e:	28 81       	ld	r18, Y
   19fa0:	39 81       	ldd	r19, Y+1	; 0x01
   19fa2:	4a 81       	ldd	r20, Y+2	; 0x02
   19fa4:	5b 81       	ldd	r21, Y+3	; 0x03
   19fa6:	ce 51       	subi	r28, 0x1E	; 30
   19fa8:	d1 40       	sbci	r29, 0x01	; 1
   19faa:	82 16       	cp	r8, r18
   19fac:	93 06       	cpc	r9, r19
   19fae:	a4 06       	cpc	r10, r20
   19fb0:	b5 06       	cpc	r11, r21
   19fb2:	0c f0       	brlt	.+2      	; 0x19fb6 <lif_create_volume+0x4d6>
   19fb4:	53 c0       	rjmp	.+166    	; 0x1a05c <lif_create_volume+0x57c>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19fb6:	00 e0       	ldi	r16, 0x00	; 0
   19fb8:	11 e0       	ldi	r17, 0x01	; 1
   19fba:	ca 5e       	subi	r28, 0xEA	; 234
   19fbc:	de 4f       	sbci	r29, 0xFE	; 254
   19fbe:	28 81       	ld	r18, Y
   19fc0:	39 81       	ldd	r19, Y+1	; 0x01
   19fc2:	4a 81       	ldd	r20, Y+2	; 0x02
   19fc4:	5b 81       	ldd	r21, Y+3	; 0x03
   19fc6:	c6 51       	subi	r28, 0x16	; 22
   19fc8:	d1 40       	sbci	r29, 0x01	; 1
   19fca:	be 01       	movw	r22, r28
   19fcc:	6c 5e       	subi	r22, 0xEC	; 236
   19fce:	7f 4f       	sbci	r23, 0xFF	; 255
   19fd0:	c7 01       	movw	r24, r14
   19fd2:	0e 94 84 c2 	call	0x18508	; 0x18508 <lif_write>
   19fd6:	09 2e       	mov	r0, r25
   19fd8:	00 0c       	add	r0, r0
   19fda:	aa 0b       	sbc	r26, r26
   19fdc:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19fde:	8f 3f       	cpi	r24, 0xFF	; 255
   19fe0:	91 05       	cpc	r25, r1
   19fe2:	a1 05       	cpc	r26, r1
   19fe4:	b1 05       	cpc	r27, r1
   19fe6:	09 f0       	breq	.+2      	; 0x19fea <lif_create_volume+0x50a>
   19fe8:	0c f4       	brge	.+2      	; 0x19fec <lif_create_volume+0x50c>
   19fea:	4f c0       	rjmp	.+158    	; 0x1a08a <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19fec:	ca 5e       	subi	r28, 0xEA	; 234
   19fee:	de 4f       	sbci	r29, 0xFE	; 254
   19ff0:	28 81       	ld	r18, Y
   19ff2:	39 81       	ldd	r19, Y+1	; 0x01
   19ff4:	4a 81       	ldd	r20, Y+2	; 0x02
   19ff6:	5b 81       	ldd	r21, Y+3	; 0x03
   19ff8:	c6 51       	subi	r28, 0x16	; 22
   19ffa:	d1 40       	sbci	r29, 0x01	; 1
   19ffc:	28 0f       	add	r18, r24
   19ffe:	39 1f       	adc	r19, r25
   1a000:	4a 1f       	adc	r20, r26
   1a002:	5b 1f       	adc	r21, r27
   1a004:	ca 5e       	subi	r28, 0xEA	; 234
   1a006:	de 4f       	sbci	r29, 0xFE	; 254
   1a008:	28 83       	st	Y, r18
   1a00a:	39 83       	std	Y+1, r19	; 0x01
   1a00c:	4a 83       	std	Y+2, r20	; 0x02
   1a00e:	5b 83       	std	Y+3, r21	; 0x03
   1a010:	c6 51       	subi	r28, 0x16	; 22
   1a012:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   1a014:	c3 01       	movw	r24, r6
   1a016:	b2 01       	movw	r22, r4
   1a018:	24 e6       	ldi	r18, 0x64	; 100
   1a01a:	30 e0       	ldi	r19, 0x00	; 0
   1a01c:	40 e0       	ldi	r20, 0x00	; 0
   1a01e:	50 e0       	ldi	r21, 0x00	; 0
   1a020:	0e 94 48 e7 	call	0x1ce90	; 0x1ce90 <__divmodsi4>
   1a024:	67 2b       	or	r22, r23
   1a026:	68 2b       	or	r22, r24
   1a028:	69 2b       	or	r22, r25
   1a02a:	91 f4       	brne	.+36     	; 0x1a050 <lif_create_volume+0x570>
            printf("\tWrote: %ld\r", count);
   1a02c:	ed b7       	in	r30, 0x3d	; 61
   1a02e:	fe b7       	in	r31, 0x3e	; 62
   1a030:	44 82       	std	Z+4, r4	; 0x04
   1a032:	55 82       	std	Z+5, r5	; 0x05
   1a034:	66 82       	std	Z+6, r6	; 0x06
   1a036:	77 82       	std	Z+7, r7	; 0x07
   1a038:	c6 5e       	subi	r28, 0xE6	; 230
   1a03a:	de 4f       	sbci	r29, 0xFE	; 254
   1a03c:	28 81       	ld	r18, Y
   1a03e:	39 81       	ldd	r19, Y+1	; 0x01
   1a040:	4a 81       	ldd	r20, Y+2	; 0x02
   1a042:	ca 51       	subi	r28, 0x1A	; 26
   1a044:	d1 40       	sbci	r29, 0x01	; 1
   1a046:	21 83       	std	Z+1, r18	; 0x01
   1a048:	32 83       	std	Z+2, r19	; 0x02
   1a04a:	43 83       	std	Z+3, r20	; 0x03
   1a04c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1a050:	ff ef       	ldi	r31, 0xFF	; 255
   1a052:	8f 1a       	sub	r8, r31
   1a054:	9f 0a       	sbc	r9, r31
   1a056:	af 0a       	sbc	r10, r31
   1a058:	bf 0a       	sbc	r11, r31
   1a05a:	93 cf       	rjmp	.-218    	; 0x19f82 <lif_create_volume+0x4a2>
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   1a05c:	ed b7       	in	r30, 0x3d	; 61
   1a05e:	fe b7       	in	r31, 0x3e	; 62
   1a060:	44 82       	std	Z+4, r4	; 0x04
   1a062:	55 82       	std	Z+5, r5	; 0x05
   1a064:	66 82       	std	Z+6, r6	; 0x06
   1a066:	77 82       	std	Z+7, r7	; 0x07
   1a068:	83 eb       	ldi	r24, 0xB3	; 179
   1a06a:	9c e3       	ldi	r25, 0x3C	; 60
   1a06c:	a0 e0       	ldi	r26, 0x00	; 0
   1a06e:	81 83       	std	Z+1, r24	; 0x01
   1a070:	92 83       	std	Z+2, r25	; 0x02
   1a072:	a3 83       	std	Z+3, r26	; 0x03
   1a074:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   1a078:	8f ef       	ldi	r24, 0xFF	; 255
   1a07a:	9f ef       	ldi	r25, 0xFF	; 255
   1a07c:	f7 01       	movw	r30, r14
   1a07e:	91 a3       	std	Z+33, r25	; 0x21
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

// As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   1a080:	80 a3       	std	Z+32, r24	; 0x20
   1a082:	c7 01       	movw	r24, r14
   1a084:	1a d8       	rcall	.-4044   	; 0x190ba <lif_check_volume>
   1a086:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a088:	19 f4       	brne	.+6      	; 0x1a090 <lif_create_volume+0x5b0>
   1a08a:	c7 01       	movw	r24, r14
   1a08c:	b6 da       	rcall	.-2708   	; 0x195fa <lif_close_volume>
   1a08e:	08 c0       	rjmp	.+16     	; 0x1a0a0 <lif_create_volume+0x5c0>
        lif_closedir(LIF);
        return(NULL);
    }

// Scan directory and verify values
    if( !lif_updatefree(LIF))
   1a090:	c7 01       	movw	r24, r14
   1a092:	1c dc       	rcall	.-1992   	; 0x198cc <lif_updatefree>
   1a094:	6c 01       	movw	r12, r24
   1a096:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a098:	31 f4       	brne	.+12     	; 0x1a0a6 <lif_create_volume+0x5c6>
   1a09a:	c7 01       	movw	r24, r14
   1a09c:	ae da       	rcall	.-2724   	; 0x195fa <lif_close_volume>

// Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   1a09e:	04 c0       	rjmp	.+8      	; 0x1a0a8 <lif_create_volume+0x5c8>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   1a0a0:	c1 2c       	mov	r12, r1
   1a0a2:	d1 2c       	mov	r13, r1
   1a0a4:	01 c0       	rjmp	.+2      	; 0x1a0a8 <lif_create_volume+0x5c8>
   1a0a6:	67 01       	movw	r12, r14
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   1a0a8:	c6 01       	movw	r24, r12
   1a0aa:	c7 5d       	subi	r28, 0xD7	; 215
   1a0ac:	de 4f       	sbci	r29, 0xFE	; 254
   1a0ae:	e2 e1       	ldi	r30, 0x12	; 18
   1a0b0:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

0001a0b4 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   1a0b4:	ad e1       	ldi	r26, 0x1D	; 29
   1a0b6:	b0 e0       	ldi	r27, 0x00	; 0
   1a0b8:	e0 e6       	ldi	r30, 0x60	; 96
   1a0ba:	f0 ed       	ldi	r31, 0xD0	; 208
   1a0bc:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
   1a0c0:	9d 8f       	std	Y+29, r25	; 0x1d
   1a0c2:	8c 8f       	std	Y+28, r24	; 0x1c
   1a0c4:	4a 01       	movw	r8, r20
   1a0c6:	5b 01       	movw	r10, r22

// Directory index
    index = 0;

// Start of free space
    start = LIF->filestart;
   1a0c8:	fc 01       	movw	r30, r24
   1a0ca:	c4 84       	ldd	r12, Z+12	; 0x0c
   1a0cc:	d5 84       	ldd	r13, Z+13	; 0x0d
   1a0ce:	e6 84       	ldd	r14, Z+14	; 0x0e
   1a0d0:	f7 84       	ldd	r15, Z+15	; 0x0f

// Update all file information
    if(lif_updatefree(LIF) == NULL)
   1a0d2:	fc db       	rcall	.-2056   	; 0x198cc <lif_updatefree>
   1a0d4:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a0d6:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a0d8:	40 8d       	ldd	r20, Z+24	; 0x18
   1a0da:	51 8d       	ldd	r21, Z+25	; 0x19
   1a0dc:	62 8d       	ldd	r22, Z+26	; 0x1a
   1a0de:	73 8d       	ldd	r23, Z+27	; 0x1b
   1a0e0:	89 2b       	or	r24, r25
   1a0e2:	99 f4       	brne	.+38     	; 0x1a10a <lif_newdir+0x56>
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   1a0e4:	ed b7       	in	r30, 0x3d	; 61
   1a0e6:	fe b7       	in	r31, 0x3e	; 62
   1a0e8:	80 86       	std	Z+8, r8	; 0x08
   1a0ea:	91 86       	std	Z+9, r9	; 0x09
   1a0ec:	a2 86       	std	Z+10, r10	; 0x0a
   1a0ee:	b3 86       	std	Z+11, r11	; 0x0b
   1a0f0:	44 83       	std	Z+4, r20	; 0x04
   1a0f2:	55 83       	std	Z+5, r21	; 0x05
   1a0f4:	66 83       	std	Z+6, r22	; 0x06
   1a0f6:	77 83       	std	Z+7, r23	; 0x07
   1a0f8:	84 ed       	ldi	r24, 0xD4	; 212
   1a0fa:	9b e3       	ldi	r25, 0x3B	; 59
   1a0fc:	a0 e0       	ldi	r26, 0x00	; 0
   1a0fe:	81 83       	std	Z+1, r24	; 0x01
   1a100:	92 83       	std	Z+2, r25	; 0x02
   1a102:	a3 83       	std	Z+3, r26	; 0x03
   1a104:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1a108:	2f c1       	rjmp	.+606    	; 0x1a368 <lif_newdir+0x2b4>
        return(-1);
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
   1a10a:	48 15       	cp	r20, r8
   1a10c:	59 05       	cpc	r21, r9
   1a10e:	6a 05       	cpc	r22, r10
   1a110:	7b 05       	cpc	r23, r11
   1a112:	c4 f0       	brlt	.+48     	; 0x1a144 <lif_newdir+0x90>
   1a114:	44 24       	eor	r4, r4
   1a116:	43 94       	inc	r4
   1a118:	51 2c       	mov	r5, r1
   1a11a:	61 2c       	mov	r6, r1
   1a11c:	71 2c       	mov	r7, r1
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a11e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a120:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a122:	86 5a       	subi	r24, 0xA6	; 166
   1a124:	9f 4f       	sbci	r25, 0xFF	; 255
   1a126:	9d 8b       	std	Y+21, r25	; 0x15
   1a128:	8c 8b       	std	Y+20, r24	; 0x14
   1a12a:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a12c:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a12e:	e4 5a       	subi	r30, 0xA4	; 164
   1a130:	ff 4f       	sbci	r31, 0xFF	; 255
   1a132:	fb 8b       	std	Y+19, r31	; 0x13
   1a134:	ea 8b       	std	Y+18, r30	; 0x12
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a136:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a138:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a13a:	80 5a       	subi	r24, 0xA0	; 160
   1a13c:	9f 4f       	sbci	r25, 0xFF	; 255
   1a13e:	9f 8b       	std	Y+23, r25	; 0x17
   1a140:	8e 8b       	std	Y+22, r24	; 0x16
   1a142:	21 c0       	rjmp	.+66     	; 0x1a186 <lif_newdir+0xd2>
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   1a144:	ed b7       	in	r30, 0x3d	; 61
   1a146:	fe b7       	in	r31, 0x3e	; 62
   1a148:	44 83       	std	Z+4, r20	; 0x04
   1a14a:	55 83       	std	Z+5, r21	; 0x05
   1a14c:	66 83       	std	Z+6, r22	; 0x06
   1a14e:	77 83       	std	Z+7, r23	; 0x07
   1a150:	8b ea       	ldi	r24, 0xAB	; 171
   1a152:	9b e3       	ldi	r25, 0x3B	; 59
   1a154:	a0 e0       	ldi	r26, 0x00	; 0
   1a156:	81 83       	std	Z+1, r24	; 0x01
   1a158:	92 83       	std	Z+2, r25	; 0x02
   1a15a:	a3 83       	std	Z+3, r26	; 0x03
   1a15c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1a160:	03 c1       	rjmp	.+518    	; 0x1a368 <lif_newdir+0x2b4>
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1a162:	ec 89       	ldd	r30, Y+20	; 0x14
   1a164:	fd 89       	ldd	r31, Y+21	; 0x15
   1a166:	80 81       	ld	r24, Z
   1a168:	91 81       	ldd	r25, Z+1	; 0x01
   1a16a:	8f 3f       	cpi	r24, 0xFF	; 255
   1a16c:	ff ef       	ldi	r31, 0xFF	; 255
   1a16e:	9f 07       	cpc	r25, r31
   1a170:	a1 f0       	breq	.+40     	; 0x1a19a <lif_newdir+0xe6>
            }
            return(index);
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
   1a172:	89 2b       	or	r24, r25
   1a174:	09 f0       	breq	.+2      	; 0x1a178 <lif_newdir+0xc4>
   1a176:	ce c0       	rjmp	.+412    	; 0x1a314 <lif_newdir+0x260>
        {
            if(freestate == 0)
   1a178:	61 14       	cp	r6, r1
   1a17a:	71 04       	cpc	r7, r1
   1a17c:	09 f4       	brne	.+2      	; 0x1a180 <lif_newdir+0xcc>
   1a17e:	c1 c0       	rjmp	.+386    	; 0x1a302 <lif_newdir+0x24e>
   1a180:	ff ef       	ldi	r31, 0xFF	; 255
   1a182:	4f 1a       	sub	r4, r31
   1a184:	5f 0a       	sbc	r5, r31
   1a186:	82 01       	movw	r16, r4
   1a188:	01 50       	subi	r16, 0x01	; 1
   1a18a:	11 09       	sbc	r17, r1

// Update free space and EOF pointers
    while(1)
    {
// Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   1a18c:	b8 01       	movw	r22, r16
   1a18e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a190:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a192:	c1 da       	rcall	.-2686   	; 0x19716 <lif_readdirindex>
   1a194:	89 2b       	or	r24, r25
   1a196:	29 f7       	brne	.-54     	; 0x1a162 <lif_newdir+0xae>
   1a198:	e7 c0       	rjmp	.+462    	; 0x1a368 <lif_newdir+0x2b4>
        if(LIF->DIR.FileType == 0xffff)
        {

// Was enough free space found in purged area ?
// Do NOT need to update EOF!
            if(freestate == 2)
   1a19a:	22 e0       	ldi	r18, 0x02	; 2
   1a19c:	62 16       	cp	r6, r18
   1a19e:	71 04       	cpc	r7, r1
   1a1a0:	09 f0       	breq	.+2      	; 0x1a1a4 <lif_newdir+0xf0>
   1a1a2:	46 c0       	rjmp	.+140    	; 0x1a230 <lif_newdir+0x17c>
            {
// Update free pace for new file
                lif_dir_clear(LIF);
   1a1a4:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a1a6:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a1a8:	0e 94 88 c6 	call	0x18d10	; 0x18d10 <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   1a1ac:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a1ae:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a1b0:	e4 5a       	subi	r30, 0xA4	; 164
   1a1b2:	ff 4f       	sbci	r31, 0xFF	; 255
   1a1b4:	88 8d       	ldd	r24, Y+24	; 0x18
   1a1b6:	80 83       	st	Z, r24
   1a1b8:	99 8d       	ldd	r25, Y+25	; 0x19
   1a1ba:	91 83       	std	Z+1, r25	; 0x01
   1a1bc:	2a 8d       	ldd	r18, Y+26	; 0x1a
   1a1be:	22 83       	std	Z+2, r18	; 0x02
   1a1c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1a1c2:	83 83       	std	Z+3, r24	; 0x03
                LIF->DIR.FileSectors = sectors;
   1a1c4:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a1c6:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a1c8:	e0 5a       	subi	r30, 0xA0	; 160
   1a1ca:	ff 4f       	sbci	r31, 0xFF	; 255
   1a1cc:	80 82       	st	Z, r8
   1a1ce:	91 82       	std	Z+1, r9	; 0x01
   1a1d0:	a2 82       	std	Z+2, r10	; 0x02
   1a1d2:	b3 82       	std	Z+3, r11	; 0x03
                LIF->usedsectors += sectors;
   1a1d4:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a1d6:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a1d8:	84 89       	ldd	r24, Z+20	; 0x14
   1a1da:	95 89       	ldd	r25, Z+21	; 0x15
   1a1dc:	a6 89       	ldd	r26, Z+22	; 0x16
   1a1de:	b7 89       	ldd	r27, Z+23	; 0x17
   1a1e0:	88 0d       	add	r24, r8
   1a1e2:	99 1d       	adc	r25, r9
   1a1e4:	aa 1d       	adc	r26, r10
   1a1e6:	bb 1d       	adc	r27, r11
   1a1e8:	84 8b       	std	Z+20, r24	; 0x14
   1a1ea:	95 8b       	std	Z+21, r25	; 0x15
   1a1ec:	a6 8b       	std	Z+22, r26	; 0x16
   1a1ee:	b7 8b       	std	Z+23, r27	; 0x17
                LIF->freesectors -= sectors;
   1a1f0:	80 8d       	ldd	r24, Z+24	; 0x18
   1a1f2:	91 8d       	ldd	r25, Z+25	; 0x19
   1a1f4:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a1f6:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a1f8:	88 19       	sub	r24, r8
   1a1fa:	99 09       	sbc	r25, r9
   1a1fc:	aa 09       	sbc	r26, r10
   1a1fe:	bb 09       	sbc	r27, r11
   1a200:	80 8f       	std	Z+24, r24	; 0x18
   1a202:	91 8f       	std	Z+25, r25	; 0x19
   1a204:	a2 8f       	std	Z+26, r26	; 0x1a
   1a206:	b3 8f       	std	Z+27, r27	; 0x1b
                LIF->files++;
   1a208:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a20a:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a20c:	01 96       	adiw	r24, 0x01	; 1
   1a20e:	95 8f       	std	Z+29, r25	; 0x1d
   1a210:	84 8f       	std	Z+28, r24	; 0x1c
                LIF->purged--;
   1a212:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a214:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a216:	01 97       	sbiw	r24, 0x01	; 1
   1a218:	97 8f       	std	Z+31, r25	; 0x1f
   1a21a:	86 8f       	std	Z+30, r24	; 0x1e
                LIF->dirindex = freeindex;
   1a21c:	20 a2       	std	Z+32, r2	; 0x20
   1a21e:	31 a2       	std	Z+33, r3	; 0x21
// Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   1a220:	b1 01       	movw	r22, r2
   1a222:	cf 01       	movw	r24, r30
   1a224:	df da       	rcall	.-2626   	; 0x197e4 <lif_writedirindex>
   1a226:	89 2b       	or	r24, r25
   1a228:	09 f4       	brne	.+2      	; 0x1a22c <lif_newdir+0x178>
   1a22a:	9e c0       	rjmp	.+316    	; 0x1a368 <lif_newdir+0x2b4>
   1a22c:	c1 01       	movw	r24, r2
   1a22e:	9e c0       	rjmp	.+316    	; 0x1a36c <lif_newdir+0x2b8>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & LIF_DEBUG)
   1a230:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a234:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a238:	92 ff       	sbrs	r25, 2
   1a23a:	1e c0       	rjmp	.+60     	; 0x1a278 <lif_newdir+0x1c4>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n",
   1a23c:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a23e:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a240:	80 8d       	ldd	r24, Z+24	; 0x18
   1a242:	91 8d       	ldd	r25, Z+25	; 0x19
   1a244:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a246:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a248:	ed b7       	in	r30, 0x3d	; 61
   1a24a:	fe b7       	in	r31, 0x3e	; 62
   1a24c:	86 87       	std	Z+14, r24	; 0x0e
   1a24e:	97 87       	std	Z+15, r25	; 0x0f
   1a250:	a0 8b       	std	Z+16, r26	; 0x10
   1a252:	b1 8b       	std	Z+17, r27	; 0x11
   1a254:	82 86       	std	Z+10, r8	; 0x0a
   1a256:	93 86       	std	Z+11, r9	; 0x0b
   1a258:	a4 86       	std	Z+12, r10	; 0x0c
   1a25a:	b5 86       	std	Z+13, r11	; 0x0d
   1a25c:	c6 82       	std	Z+6, r12	; 0x06
   1a25e:	d7 82       	std	Z+7, r13	; 0x07
   1a260:	e0 86       	std	Z+8, r14	; 0x08
   1a262:	f1 86       	std	Z+9, r15	; 0x09
   1a264:	15 83       	std	Z+5, r17	; 0x05
   1a266:	04 83       	std	Z+4, r16	; 0x04
   1a268:	8a e5       	ldi	r24, 0x5A	; 90
   1a26a:	9b e3       	ldi	r25, 0x3B	; 59
   1a26c:	a0 e0       	ldi	r26, 0x00	; 0
   1a26e:	81 83       	std	Z+1, r24	; 0x01
   1a270:	92 83       	std	Z+2, r25	; 0x02
   1a272:	a3 83       	std	Z+3, r26	; 0x03
   1a274:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

// Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1a278:	b8 01       	movw	r22, r16
   1a27a:	6f 5f       	subi	r22, 0xFF	; 255
   1a27c:	7f 4f       	sbci	r23, 0xFF	; 255
   1a27e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a280:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a282:	0c db       	rcall	.-2536   	; 0x1989c <lif_writedirEOF>
   1a284:	89 2b       	or	r24, r25
   1a286:	09 f4       	brne	.+2      	; 0x1a28a <lif_newdir+0x1d6>
   1a288:	6f c0       	rjmp	.+222    	; 0x1a368 <lif_newdir+0x2b4>
            {
                break;
            }

            lif_dir_clear(LIF);
   1a28a:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a28c:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a28e:	0e 94 88 c6 	call	0x18d10	; 0x18d10 <lif_dir_clear>
            LIF->DIR.FileStartSector = start;
   1a292:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a294:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a296:	e4 5a       	subi	r30, 0xA4	; 164
   1a298:	ff 4f       	sbci	r31, 0xFF	; 255
   1a29a:	c0 82       	st	Z, r12
   1a29c:	d1 82       	std	Z+1, r13	; 0x01
   1a29e:	e2 82       	std	Z+2, r14	; 0x02
   1a2a0:	f3 82       	std	Z+3, r15	; 0x03
            LIF->DIR.FileSectors = sectors;
   1a2a2:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a2a4:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a2a6:	e0 5a       	subi	r30, 0xA0	; 160
   1a2a8:	ff 4f       	sbci	r31, 0xFF	; 255
   1a2aa:	80 82       	st	Z, r8
   1a2ac:	91 82       	std	Z+1, r9	; 0x01
   1a2ae:	a2 82       	std	Z+2, r10	; 0x02
   1a2b0:	b3 82       	std	Z+3, r11	; 0x03
            LIF->usedsectors += sectors;
   1a2b2:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a2b4:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a2b6:	84 89       	ldd	r24, Z+20	; 0x14
   1a2b8:	95 89       	ldd	r25, Z+21	; 0x15
   1a2ba:	a6 89       	ldd	r26, Z+22	; 0x16
   1a2bc:	b7 89       	ldd	r27, Z+23	; 0x17
   1a2be:	88 0d       	add	r24, r8
   1a2c0:	99 1d       	adc	r25, r9
   1a2c2:	aa 1d       	adc	r26, r10
   1a2c4:	bb 1d       	adc	r27, r11
   1a2c6:	84 8b       	std	Z+20, r24	; 0x14
   1a2c8:	95 8b       	std	Z+21, r25	; 0x15
   1a2ca:	a6 8b       	std	Z+22, r26	; 0x16
   1a2cc:	b7 8b       	std	Z+23, r27	; 0x17
            LIF->freesectors -= sectors;
   1a2ce:	80 8d       	ldd	r24, Z+24	; 0x18
   1a2d0:	91 8d       	ldd	r25, Z+25	; 0x19
   1a2d2:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a2d4:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a2d6:	88 19       	sub	r24, r8
   1a2d8:	99 09       	sbc	r25, r9
   1a2da:	aa 09       	sbc	r26, r10
   1a2dc:	bb 09       	sbc	r27, r11
   1a2de:	80 8f       	std	Z+24, r24	; 0x18
   1a2e0:	91 8f       	std	Z+25, r25	; 0x19
   1a2e2:	a2 8f       	std	Z+26, r26	; 0x1a
   1a2e4:	b3 8f       	std	Z+27, r27	; 0x1b
            LIF->files++;
   1a2e6:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a2e8:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a2ea:	01 96       	adiw	r24, 0x01	; 1
   1a2ec:	95 8f       	std	Z+29, r25	; 0x1d
   1a2ee:	84 8f       	std	Z+28, r24	; 0x1c
            LIF->dirindex = index;
   1a2f0:	11 a3       	std	Z+33, r17	; 0x21
// Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   1a2f2:	00 a3       	std	Z+32, r16	; 0x20
   1a2f4:	b8 01       	movw	r22, r16
   1a2f6:	cf 01       	movw	r24, r30
   1a2f8:	75 da       	rcall	.-2838   	; 0x197e4 <lif_writedirindex>
   1a2fa:	89 2b       	or	r24, r25
   1a2fc:	a9 f1       	breq	.+106    	; 0x1a368 <lif_newdir+0x2b4>
   1a2fe:	c8 01       	movw	r24, r16
   1a300:	35 c0       	rjmp	.+106    	; 0x1a36c <lif_newdir+0x2b8>
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   1a302:	c8 8e       	std	Y+24, r12	; 0x18
   1a304:	d9 8e       	std	Y+25, r13	; 0x19
   1a306:	ea 8e       	std	Y+26, r14	; 0x1a
   1a308:	fb 8e       	std	Y+27, r15	; 0x1b
   1a30a:	18 01       	movw	r2, r16
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   1a30c:	66 24       	eor	r6, r6
   1a30e:	63 94       	inc	r6
   1a310:	71 2c       	mov	r7, r1
            }
            ++index;
            continue;
   1a312:	36 cf       	rjmp	.-404    	; 0x1a180 <lif_newdir+0xcc>
        }

// VALID record
        if(freestate == 1)
   1a314:	f1 e0       	ldi	r31, 0x01	; 1
   1a316:	6f 16       	cp	r6, r31
   1a318:	71 04       	cpc	r7, r1
   1a31a:	a9 f4       	brne	.+42     	; 0x1a346 <lif_newdir+0x292>
        {
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   1a31c:	ea 89       	ldd	r30, Y+18	; 0x12
   1a31e:	fb 89       	ldd	r31, Y+19	; 0x13
   1a320:	80 81       	ld	r24, Z
   1a322:	91 81       	ldd	r25, Z+1	; 0x01
   1a324:	a2 81       	ldd	r26, Z+2	; 0x02
   1a326:	b3 81       	ldd	r27, Z+3	; 0x03
   1a328:	8c 19       	sub	r24, r12
   1a32a:	9d 09       	sbc	r25, r13
   1a32c:	ae 09       	sbc	r26, r14
   1a32e:	bf 09       	sbc	r27, r15
   1a330:	88 15       	cp	r24, r8
   1a332:	99 05       	cpc	r25, r9
   1a334:	aa 05       	cpc	r26, r10
   1a336:	bb 05       	cpc	r27, r11
   1a338:	1c f4       	brge	.+6      	; 0x1a340 <lif_newdir+0x28c>
                freestate = 2;                    // Found free space in purged record
            else
                freestate = 0;                    // Try again
   1a33a:	61 2c       	mov	r6, r1
   1a33c:	71 2c       	mov	r7, r1
   1a33e:	03 c0       	rjmp	.+6      	; 0x1a346 <lif_newdir+0x292>
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;                    // Found free space in purged record
   1a340:	82 e0       	ldi	r24, 0x02	; 2
   1a342:	68 2e       	mov	r6, r24
   1a344:	71 2c       	mov	r7, r1
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a346:	ea 89       	ldd	r30, Y+18	; 0x12
   1a348:	fb 89       	ldd	r31, Y+19	; 0x13
   1a34a:	c0 80       	ld	r12, Z
   1a34c:	d1 80       	ldd	r13, Z+1	; 0x01
   1a34e:	e2 80       	ldd	r14, Z+2	; 0x02
   1a350:	f3 80       	ldd	r15, Z+3	; 0x03
   1a352:	ee 89       	ldd	r30, Y+22	; 0x16
   1a354:	ff 89       	ldd	r31, Y+23	; 0x17
   1a356:	80 81       	ld	r24, Z
   1a358:	91 81       	ldd	r25, Z+1	; 0x01
   1a35a:	a2 81       	ldd	r26, Z+2	; 0x02
   1a35c:	b3 81       	ldd	r27, Z+3	; 0x03
   1a35e:	c8 0e       	add	r12, r24
   1a360:	d9 1e       	adc	r13, r25
   1a362:	ea 1e       	adc	r14, r26
   1a364:	fb 1e       	adc	r15, r27
   1a366:	0c cf       	rjmp	.-488    	; 0x1a180 <lif_newdir+0xcc>
        ++index;
    }
// ERROR
    return(-1);
   1a368:	8f ef       	ldi	r24, 0xFF	; 255
   1a36a:	9f ef       	ldi	r25, 0xFF	; 255
}
   1a36c:	6d 96       	adiw	r28, 0x1d	; 29
   1a36e:	e2 e1       	ldi	r30, 0x12	; 18
   1a370:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

0001a374 <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1a374:	a9 e3       	ldi	r26, 0x39	; 57
   1a376:	b1 e0       	ldi	r27, 0x01	; 1
   1a378:	e0 ec       	ldi	r30, 0xC0	; 192
   1a37a:	f1 ed       	ldi	r31, 0xD1	; 209
   1a37c:	0c 94 99 e7 	jmp	0x1cf32	; 0x1cf32 <__prologue_saves__+0xc>
   1a380:	6c 01       	movw	r12, r24
   1a382:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];

    sp = lif_stat(name, (stat_t *)&sb);
   1a384:	be 01       	movw	r22, r28
   1a386:	66 5f       	subi	r22, 0xF6	; 246
   1a388:	7e 4f       	sbci	r23, 0xFE	; 254
   1a38a:	0e 94 d7 c1 	call	0x183ae	; 0x183ae <lif_stat>
   1a38e:	5c 01       	movw	r10, r24
    if(sp == NULL)
   1a390:	00 97       	sbiw	r24, 0x00	; 0
   1a392:	09 f1       	breq	.+66     	; 0x1a3d6 <lif_open_volume+0x62>
        return(NULL);

// To read LIF volume we must have at minimum two sectors
// volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   1a394:	fc 01       	movw	r30, r24
   1a396:	80 8d       	ldd	r24, Z+24	; 0x18
   1a398:	91 8d       	ldd	r25, Z+25	; 0x19
   1a39a:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a39c:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a39e:	81 15       	cp	r24, r1
   1a3a0:	f2 e0       	ldi	r31, 0x02	; 2
   1a3a2:	9f 07       	cpc	r25, r31
   1a3a4:	a1 05       	cpc	r26, r1
   1a3a6:	b1 05       	cpc	r27, r1
   1a3a8:	c8 f4       	brcc	.+50     	; 0x1a3dc <lif_open_volume+0x68>
    {
        if(debuglevel & LIF_DEBUG)
   1a3aa:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a3ae:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a3b2:	32 ff       	sbrs	r19, 2
   1a3b4:	10 c0       	rjmp	.+32     	; 0x1a3d6 <lif_open_volume+0x62>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   1a3b6:	ed b7       	in	r30, 0x3d	; 61
   1a3b8:	fe b7       	in	r31, 0x3e	; 62
   1a3ba:	86 83       	std	Z+6, r24	; 0x06
   1a3bc:	97 83       	std	Z+7, r25	; 0x07
   1a3be:	a0 87       	std	Z+8, r26	; 0x08
   1a3c0:	b1 87       	std	Z+9, r27	; 0x09
   1a3c2:	d5 82       	std	Z+5, r13	; 0x05
   1a3c4:	c4 82       	std	Z+4, r12	; 0x04
   1a3c6:	8b e1       	ldi	r24, 0x1B	; 27
   1a3c8:	9b e3       	ldi	r25, 0x3B	; 59
   1a3ca:	a0 e0       	ldi	r26, 0x00	; 0
   1a3cc:	81 83       	std	Z+1, r24	; 0x01
   1a3ce:	92 83       	std	Z+2, r25	; 0x02
   1a3d0:	a3 83       	std	Z+3, r26	; 0x03
   1a3d2:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        return(NULL);
   1a3d6:	00 e0       	ldi	r16, 0x00	; 0
   1a3d8:	10 e0       	ldi	r17, 0x00	; 0
   1a3da:	c6 c0       	rjmp	.+396    	; 0x1a568 <lif_open_volume+0x1f4>
    }

// Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1a3dc:	64 e7       	ldi	r22, 0x74	; 116
   1a3de:	70 e0       	ldi	r23, 0x00	; 0
   1a3e0:	80 e0       	ldi	r24, 0x00	; 0
   1a3e2:	90 e0       	ldi	r25, 0x00	; 0
   1a3e4:	0e 94 43 c1 	call	0x18286	; 0x18286 <lif_calloc>
   1a3e8:	7c 01       	movw	r14, r24
    if(!LIF)
   1a3ea:	89 2b       	or	r24, r25
   1a3ec:	a1 f3       	breq	.-24     	; 0x1a3d6 <lif_open_volume+0x62>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1a3ee:	c6 01       	movw	r24, r12
   1a3f0:	0e 94 8e c1 	call	0x1831c	; 0x1831c <lif_stralloc>
   1a3f4:	f7 01       	movw	r30, r14
   1a3f6:	91 83       	std	Z+1, r25	; 0x01
   1a3f8:	80 83       	st	Z, r24
    if(!LIF->name)
   1a3fa:	00 97       	sbiw	r24, 0x00	; 0
   1a3fc:	09 f4       	brne	.+2      	; 0x1a400 <lif_open_volume+0x8c>
   1a3fe:	5e c0       	rjmp	.+188    	; 0x1a4bc <lif_open_volume+0x148>
    {
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
   1a400:	f5 01       	movw	r30, r10
   1a402:	80 8c       	ldd	r8, Z+24	; 0x18
   1a404:	91 8c       	ldd	r9, Z+25	; 0x19
   1a406:	a2 8c       	ldd	r10, Z+26	; 0x1a
   1a408:	b3 8c       	ldd	r11, Z+27	; 0x1b
   1a40a:	f7 01       	movw	r30, r14
   1a40c:	80 86       	std	Z+8, r8	; 0x08
   1a40e:	91 86       	std	Z+9, r9	; 0x09
   1a410:	a2 86       	std	Z+10, r10	; 0x0a
   1a412:	b3 86       	std	Z+11, r11	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a414:	77 27       	eor	r23, r23
   1a416:	6b 2d       	mov	r22, r11
   1a418:	5a 2d       	mov	r21, r10
   1a41a:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a41c:	88 20       	and	r8, r8
   1a41e:	21 f0       	breq	.+8      	; 0x1a428 <lif_open_volume+0xb4>
        ++sectors;
   1a420:	4f 5f       	subi	r20, 0xFF	; 255
   1a422:	5f 4f       	sbci	r21, 0xFF	; 255
   1a424:	6f 4f       	sbci	r22, 0xFF	; 255
   1a426:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   1a428:	f7 01       	movw	r30, r14
   1a42a:	44 83       	std	Z+4, r20	; 0x04
   1a42c:	55 83       	std	Z+5, r21	; 0x05
   1a42e:	66 83       	std	Z+6, r22	; 0x06
   1a430:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   1a432:	b8 01       	movw	r22, r16
   1a434:	0e 94 ad c1 	call	0x1835a	; 0x1835a <lif_open>
   1a438:	f7 01       	movw	r30, r14
   1a43a:	93 83       	std	Z+3, r25	; 0x03
   1a43c:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   1a43e:	89 2b       	or	r24, r25
   1a440:	e9 f1       	breq	.+122    	; 0x1a4bc <lif_open_volume+0x148>
        lif_closedir(LIF);
        return(NULL);
    }

// Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1a442:	00 e0       	ldi	r16, 0x00	; 0
   1a444:	11 e0       	ldi	r17, 0x01	; 1
   1a446:	20 e0       	ldi	r18, 0x00	; 0
   1a448:	30 e0       	ldi	r19, 0x00	; 0
   1a44a:	a9 01       	movw	r20, r18
   1a44c:	be 01       	movw	r22, r28
   1a44e:	66 5f       	subi	r22, 0xF6	; 246
   1a450:	7f 4f       	sbci	r23, 0xFF	; 255
   1a452:	c7 01       	movw	r24, r14
   1a454:	0e 94 31 c2 	call	0x18462	; 0x18462 <lif_read>
   1a458:	6f 3f       	cpi	r22, 0xFF	; 255
   1a45a:	71 05       	cpc	r23, r1
   1a45c:	81 05       	cpc	r24, r1
   1a45e:	91 05       	cpc	r25, r1
   1a460:	09 f0       	breq	.+2      	; 0x1a464 <lif_open_volume+0xf0>
   1a462:	6c f4       	brge	.+26     	; 0x1a47e <lif_open_volume+0x10a>
    {
        if(debuglevel & LIF_DEBUG)
   1a464:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a468:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a46c:	92 ff       	sbrs	r25, 2
   1a46e:	26 c0       	rjmp	.+76     	; 0x1a4bc <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   1a470:	ed b7       	in	r30, 0x3d	; 61
   1a472:	fe b7       	in	r31, 0x3e	; 62
   1a474:	d5 82       	std	Z+5, r13	; 0x05
   1a476:	c4 82       	std	Z+4, r12	; 0x04
   1a478:	85 ee       	ldi	r24, 0xE5	; 229
   1a47a:	9a e3       	ldi	r25, 0x3A	; 58
   1a47c:	19 c0       	rjmp	.+50     	; 0x1a4b0 <lif_open_volume+0x13c>
        lif_closedir(LIF);
        return(NULL);
    }

// Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   1a47e:	b7 01       	movw	r22, r14
   1a480:	ce 01       	movw	r24, r28
   1a482:	0a 96       	adiw	r24, 0x0a	; 10
   1a484:	0e 94 51 c4 	call	0x188a2	; 0x188a2 <lif_str2vol>

// Validate basic Volume headers
    if( !lif_check_volume(LIF) )
   1a488:	c7 01       	movw	r24, r14
   1a48a:	0e 94 5d c8 	call	0x190ba	; 0x190ba <lif_check_volume>
   1a48e:	89 2b       	or	r24, r25
   1a490:	c1 f4       	brne	.+48     	; 0x1a4c2 <lif_open_volume+0x14e>
    {
        if(debuglevel & LIF_DEBUG)
   1a492:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a496:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a49a:	92 ff       	sbrs	r25, 2
   1a49c:	0f c0       	rjmp	.+30     	; 0x1a4bc <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   1a49e:	f7 01       	movw	r30, r14
   1a4a0:	80 81       	ld	r24, Z
   1a4a2:	91 81       	ldd	r25, Z+1	; 0x01
   1a4a4:	ed b7       	in	r30, 0x3d	; 61
   1a4a6:	fe b7       	in	r31, 0x3e	; 62
   1a4a8:	95 83       	std	Z+5, r25	; 0x05
   1a4aa:	84 83       	std	Z+4, r24	; 0x04
   1a4ac:	82 eb       	ldi	r24, 0xB2	; 178
   1a4ae:	9a e3       	ldi	r25, 0x3A	; 58
   1a4b0:	a0 e0       	ldi	r26, 0x00	; 0
   1a4b2:	81 83       	std	Z+1, r24	; 0x01
   1a4b4:	92 83       	std	Z+2, r25	; 0x02
   1a4b6:	a3 83       	std	Z+3, r26	; 0x03
   1a4b8:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a4bc:	c7 01       	movw	r24, r14
   1a4be:	9d d8       	rcall	.-3782   	; 0x195fa <lif_close_volume>
   1a4c0:	8a cf       	rjmp	.-236    	; 0x1a3d6 <lif_open_volume+0x62>
        lif_closedir(LIF);
        return(NULL);
    }

// Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1a4c2:	f7 01       	movw	r30, r14
   1a4c4:	45 a5       	ldd	r20, Z+45	; 0x2d
   1a4c6:	56 a5       	ldd	r21, Z+46	; 0x2e
   1a4c8:	67 a5       	ldd	r22, Z+47	; 0x2f
   1a4ca:	70 a9       	ldd	r23, Z+48	; 0x30
   1a4cc:	85 a9       	ldd	r24, Z+53	; 0x35
   1a4ce:	96 a9       	ldd	r25, Z+54	; 0x36
   1a4d0:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a4d2:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a4d4:	48 0f       	add	r20, r24
   1a4d6:	59 1f       	adc	r21, r25
   1a4d8:	6a 1f       	adc	r22, r26
   1a4da:	7b 1f       	adc	r23, r27
   1a4dc:	44 87       	std	Z+12, r20	; 0x0c
   1a4de:	55 87       	std	Z+13, r21	; 0x0d
   1a4e0:	66 87       	std	Z+14, r22	; 0x0e
   1a4e2:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1a4e4:	84 81       	ldd	r24, Z+4	; 0x04
   1a4e6:	95 81       	ldd	r25, Z+5	; 0x05
   1a4e8:	a6 81       	ldd	r26, Z+6	; 0x06
   1a4ea:	b7 81       	ldd	r27, Z+7	; 0x07
   1a4ec:	84 1b       	sub	r24, r20
   1a4ee:	95 0b       	sbc	r25, r21
   1a4f0:	a6 0b       	sbc	r26, r22
   1a4f2:	b7 0b       	sbc	r27, r23
   1a4f4:	80 8b       	std	Z+16, r24	; 0x10
   1a4f6:	91 8b       	std	Z+17, r25	; 0x11
   1a4f8:	a2 8b       	std	Z+18, r26	; 0x12
   1a4fa:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   1a4fc:	80 8f       	std	Z+24, r24	; 0x18
   1a4fe:	91 8f       	std	Z+25, r25	; 0x19
   1a500:	a2 8f       	std	Z+26, r26	; 0x1a
   1a502:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1a504:	14 8a       	std	Z+20, r1	; 0x14
   1a506:	15 8a       	std	Z+21, r1	; 0x15
   1a508:	16 8a       	std	Z+22, r1	; 0x16
   1a50a:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   1a50c:	17 8e       	std	Z+31, r1	; 0x1f
   1a50e:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   1a510:	15 8e       	std	Z+29, r1	; 0x1d
   1a512:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1a514:	11 a2       	std	Z+33, r1	; 0x21
   1a516:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1a518:	13 a2       	std	Z+35, r1	; 0x23
   1a51a:	12 a2       	std	Z+34, r1	; 0x22

    if( lif_updatefree(LIF) == NULL)
   1a51c:	c7 01       	movw	r24, r14
   1a51e:	d6 d9       	rcall	.-3156   	; 0x198cc <lif_updatefree>
   1a520:	8c 01       	movw	r16, r24
   1a522:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a526:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a52a:	01 15       	cp	r16, r1
   1a52c:	11 05       	cpc	r17, r1
   1a52e:	a1 f4       	brne	.+40     	; 0x1a558 <lif_open_volume+0x1e4>
    {
        if(debuglevel & LIF_DEBUG)
   1a530:	92 ff       	sbrs	r25, 2
   1a532:	0f c0       	rjmp	.+30     	; 0x1a552 <lif_open_volume+0x1de>
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1a534:	f7 01       	movw	r30, r14
   1a536:	80 81       	ld	r24, Z
   1a538:	91 81       	ldd	r25, Z+1	; 0x01
   1a53a:	ed b7       	in	r30, 0x3d	; 61
   1a53c:	fe b7       	in	r31, 0x3e	; 62
   1a53e:	95 83       	std	Z+5, r25	; 0x05
   1a540:	84 83       	std	Z+4, r24	; 0x04
   1a542:	8f e7       	ldi	r24, 0x7F	; 127
   1a544:	9a e3       	ldi	r25, 0x3A	; 58
   1a546:	a0 e0       	ldi	r26, 0x00	; 0
   1a548:	81 83       	std	Z+1, r24	; 0x01
   1a54a:	92 83       	std	Z+2, r25	; 0x02
   1a54c:	a3 83       	std	Z+3, r26	; 0x03
   1a54e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a552:	c7 01       	movw	r24, r14
   1a554:	52 d8       	rcall	.-3932   	; 0x195fa <lif_close_volume>
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1a556:	08 c0       	rjmp	.+16     	; 0x1a568 <lif_open_volume+0x1f4>
    }

    if(debuglevel &LIF_DEBUG)
   1a558:	92 ff       	sbrs	r25, 2
   1a55a:	05 c0       	rjmp	.+10     	; 0x1a566 <lif_open_volume+0x1f2>
        lif_dump_vol(LIF, "Volume Listing");
   1a55c:	6b e2       	ldi	r22, 0x2B	; 43
   1a55e:	76 e1       	ldi	r23, 0x16	; 22
   1a560:	c7 01       	movw	r24, r14
   1a562:	0e 94 97 c6 	call	0x18d2e	; 0x18d2e <lif_dump_vol>
   1a566:	87 01       	movw	r16, r14
    return( LIF );
}
   1a568:	c8 01       	movw	r24, r16
   1a56a:	c7 5c       	subi	r28, 0xC7	; 199
   1a56c:	de 4f       	sbci	r29, 0xFE	; 254
   1a56e:	ec e0       	ldi	r30, 0x0C	; 12
   1a570:	0c 94 b5 e7 	jmp	0x1cf6a	; 0x1cf6a <__epilogue_restores__+0xc>

0001a574 <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   1a574:	2f 92       	push	r2
   1a576:	3f 92       	push	r3
   1a578:	4f 92       	push	r4
   1a57a:	5f 92       	push	r5
   1a57c:	6f 92       	push	r6
   1a57e:	8f 92       	push	r8
   1a580:	9f 92       	push	r9
   1a582:	af 92       	push	r10
   1a584:	bf 92       	push	r11
   1a586:	cf 92       	push	r12
   1a588:	df 92       	push	r13
   1a58a:	ef 92       	push	r14
   1a58c:	0f 93       	push	r16
   1a58e:	1f 93       	push	r17
   1a590:	cf 93       	push	r28
   1a592:	df 93       	push	r29
   1a594:	cd b7       	in	r28, 0x3d	; 61
   1a596:	de b7       	in	r29, 0x3e	; 62
   1a598:	af 97       	sbiw	r28, 0x2f	; 47
   1a59a:	0f b6       	in	r0, 0x3f	; 63
   1a59c:	f8 94       	cli
   1a59e:	de bf       	out	0x3e, r29	; 62
   1a5a0:	0f be       	out	0x3f, r0	; 63
   1a5a2:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1a5a4:	66 ef       	ldi	r22, 0xF6	; 246
   1a5a6:	78 e0       	ldi	r23, 0x08	; 8
   1a5a8:	e5 de       	rcall	.-566    	; 0x1a374 <lif_open_volume>
   1a5aa:	9f a7       	std	Y+47, r25	; 0x2f
   1a5ac:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   1a5ae:	00 97       	sbiw	r24, 0x00	; 0
   1a5b0:	09 f4       	brne	.+2      	; 0x1a5b4 <lif_dir+0x40>
   1a5b2:	9e c1       	rjmp	.+828    	; 0x1a8f0 <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1a5b4:	fc 01       	movw	r30, r24
   1a5b6:	86 a1       	ldd	r24, Z+38	; 0x26
   1a5b8:	88 23       	and	r24, r24
   1a5ba:	21 f0       	breq	.+8      	; 0x1a5c4 <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1a5bc:	8f 01       	movw	r16, r30
   1a5be:	0a 5d       	subi	r16, 0xDA	; 218
   1a5c0:	1f 4f       	sbci	r17, 0xFF	; 255
   1a5c2:	02 c0       	rjmp	.+4      	; 0x1a5c8 <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   1a5c4:	0d ed       	ldi	r16, 0xDD	; 221
   1a5c6:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1a5c8:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a5ca:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a5cc:	87 5b       	subi	r24, 0xB7	; 183
   1a5ce:	9f 4f       	sbci	r25, 0xFF	; 255
   1a5d0:	0e 94 5b c6 	call	0x18cb6	; 0x18cb6 <lif_lifbcd2timestr>
   1a5d4:	ed b7       	in	r30, 0x3d	; 61
   1a5d6:	fe b7       	in	r31, 0x3e	; 62
   1a5d8:	97 83       	std	Z+7, r25	; 0x07
   1a5da:	86 83       	std	Z+6, r24	; 0x06
   1a5dc:	15 83       	std	Z+5, r17	; 0x05
   1a5de:	04 83       	std	Z+4, r16	; 0x04
   1a5e0:	88 e6       	ldi	r24, 0x68	; 104
   1a5e2:	9a e3       	ldi	r25, 0x3A	; 58
   1a5e4:	a0 e0       	ldi	r26, 0x00	; 0
   1a5e6:	81 83       	std	Z+1, r24	; 0x01
   1a5e8:	92 83       	std	Z+2, r25	; 0x02
   1a5ea:	a3 83       	std	Z+3, r26	; 0x03
   1a5ec:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1a5f0:	88 e2       	ldi	r24, 0x28	; 40
   1a5f2:	9a e3       	ldi	r25, 0x3A	; 58
   1a5f4:	a0 e0       	ldi	r26, 0x00	; 0
   1a5f6:	ed b7       	in	r30, 0x3d	; 61
   1a5f8:	fe b7       	in	r31, 0x3e	; 62
   1a5fa:	81 83       	std	Z+1, r24	; 0x01
   1a5fc:	92 83       	std	Z+2, r25	; 0x02
   1a5fe:	a3 83       	std	Z+3, r26	; 0x03
   1a600:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1a604:	00 e2       	ldi	r16, 0x20	; 32
   1a606:	10 e0       	ldi	r17, 0x00	; 0
   1a608:	1f 8b       	std	Y+23, r17	; 0x17
   1a60a:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1a60c:	21 2c       	mov	r2, r1
   1a60e:	31 2c       	mov	r3, r1
    {

        if(!lif_readdirindex(LIF,index))
            break;

        if(LIF->DIR.FileType == 0xffff)
   1a610:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a612:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a614:	06 5a       	subi	r16, 0xA6	; 166
   1a616:	1f 4f       	sbci	r17, 0xFF	; 255
   1a618:	1d 8f       	std	Y+29, r17	; 0x1d
   1a61a:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a61c:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a61e:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a620:	00 5a       	subi	r16, 0xA0	; 160
   1a622:	1f 4f       	sbci	r17, 0xFF	; 255
   1a624:	1d a3       	std	Y+37, r17	; 0x25
   1a626:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a628:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a62a:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a62c:	04 59       	subi	r16, 0x94	; 148
   1a62e:	1f 4f       	sbci	r17, 0xFF	; 255
   1a630:	1f a3       	std	Y+39, r17	; 0x27
   1a632:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a634:	8c ed       	ldi	r24, 0xDC	; 220
   1a636:	99 e3       	ldi	r25, 0x39	; 57
   1a638:	6c 01       	movw	r12, r24
   1a63a:	e1 2c       	mov	r14, r1
   1a63c:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a63e:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a640:	01 5b       	subi	r16, 0xB1	; 177
   1a642:	1f 4f       	sbci	r17, 0xFF	; 255
   1a644:	1f 8f       	std	Y+31, r17	; 0x1f
   1a646:	0e 8f       	std	Y+30, r16	; 0x1e
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a648:	8c ea       	ldi	r24, 0xAC	; 172
   1a64a:	99 e3       	ldi	r25, 0x39	; 57
   1a64c:	2c 01       	movw	r4, r24
   1a64e:	61 2c       	mov	r6, r1
   1a650:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a652:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a654:	04 5a       	subi	r16, 0xA4	; 164
   1a656:	1f 4f       	sbci	r17, 0xFF	; 255
   1a658:	19 a7       	std	Y+41, r17	; 0x29
   1a65a:	08 a7       	std	Y+40, r16	; 0x28
   1a65c:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a65e:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a660:	02 59       	subi	r16, 0x92	; 146
   1a662:	1f 4f       	sbci	r17, 0xFF	; 255
   1a664:	1b a7       	std	Y+43, r17	; 0x2b
   1a666:	0a a7       	std	Y+42, r16	; 0x2a
   1a668:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a66a:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a66c:	0c 59       	subi	r16, 0x9C	; 156
   1a66e:	1f 4f       	sbci	r17, 0xFF	; 255
   1a670:	1d a7       	std	Y+45, r17	; 0x2d
   1a672:	0c a7       	std	Y+44, r16	; 0x2c

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1a674:	b1 01       	movw	r22, r2
   1a676:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a678:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a67a:	4d d8       	rcall	.-3942   	; 0x19716 <lif_readdirindex>
   1a67c:	89 2b       	or	r24, r25
   1a67e:	09 f4       	brne	.+2      	; 0x1a682 <lif_dir+0x10e>
   1a680:	ad c0       	rjmp	.+346    	; 0x1a7dc <lif_dir+0x268>
            break;

        if(LIF->DIR.FileType == 0xffff)
   1a682:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a684:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a686:	8d 91       	ld	r24, X+
   1a688:	9c 91       	ld	r25, X
   1a68a:	8f 3f       	cpi	r24, 0xFF	; 255
   1a68c:	bf ef       	ldi	r27, 0xFF	; 255
   1a68e:	9b 07       	cpc	r25, r27
   1a690:	09 f4       	brne	.+2      	; 0x1a694 <lif_dir+0x120>
   1a692:	a4 c0       	rjmp	.+328    	; 0x1a7dc <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a694:	ec a1       	ldd	r30, Y+36	; 0x24
   1a696:	fd a1       	ldd	r31, Y+37	; 0x25
   1a698:	40 81       	ld	r20, Z
   1a69a:	51 81       	ldd	r21, Z+1	; 0x01
   1a69c:	62 81       	ldd	r22, Z+2	; 0x02
   1a69e:	73 81       	ldd	r23, Z+3	; 0x03
   1a6a0:	00 27       	eor	r16, r16
   1a6a2:	14 2f       	mov	r17, r20
   1a6a4:	25 2f       	mov	r18, r21
   1a6a6:	36 2f       	mov	r19, r22
   1a6a8:	08 8f       	std	Y+24, r16	; 0x18
   1a6aa:	19 8f       	std	Y+25, r17	; 0x19
   1a6ac:	2a 8f       	std	Y+26, r18	; 0x1a
   1a6ae:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1a6b0:	8c 7f       	andi	r24, 0xFC	; 252
   1a6b2:	80 31       	cpi	r24, 0x10	; 16
   1a6b4:	90 4e       	sbci	r25, 0xE0	; 224
   1a6b6:	09 f0       	breq	.+2      	; 0x1a6ba <lif_dir+0x146>
   1a6b8:	4b c0       	rjmp	.+150    	; 0x1a750 <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a6ba:	ae a1       	ldd	r26, Y+38	; 0x26
   1a6bc:	bf a1       	ldd	r27, Y+39	; 0x27
   1a6be:	8d 91       	ld	r24, X+
   1a6c0:	9c 91       	ld	r25, X
   1a6c2:	00 97       	sbiw	r24, 0x00	; 0
   1a6c4:	b9 f0       	breq	.+46     	; 0x1a6f4 <lif_dir+0x180>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a6c6:	4c 01       	movw	r8, r24
   1a6c8:	a1 2c       	mov	r10, r1
   1a6ca:	b1 2c       	mov	r11, r1
   1a6cc:	33 27       	eor	r19, r19
   1a6ce:	2b 2d       	mov	r18, r11
   1a6d0:	1a 2d       	mov	r17, r10
   1a6d2:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a6d4:	88 23       	and	r24, r24
   1a6d6:	21 f0       	breq	.+8      	; 0x1a6e0 <lif_dir+0x16c>
        ++sectors;
   1a6d8:	0f 5f       	subi	r16, 0xFF	; 255
   1a6da:	1f 4f       	sbci	r17, 0xFF	; 255
   1a6dc:	2f 4f       	sbci	r18, 0xFF	; 255
   1a6de:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a6e0:	40 17       	cp	r20, r16
   1a6e2:	51 07       	cpc	r21, r17
   1a6e4:	62 07       	cpc	r22, r18
   1a6e6:	73 07       	cpc	r23, r19
   1a6e8:	29 f4       	brne	.+10     	; 0x1a6f4 <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   1a6ea:	88 8e       	std	Y+24, r8	; 0x18
   1a6ec:	99 8e       	std	Y+25, r9	; 0x19
   1a6ee:	aa 8e       	std	Y+26, r10	; 0x1a
   1a6f0:	bb 8e       	std	Y+27, r11	; 0x1b
   1a6f2:	2e c0       	rjmp	.+92     	; 0x1a750 <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
   1a6f4:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a6f8:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a6fc:	32 ff       	sbrs	r19, 2
   1a6fe:	24 c0       	rjmp	.+72     	; 0x1a748 <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a700:	4c 01       	movw	r8, r24
   1a702:	a1 2c       	mov	r10, r1
   1a704:	b1 2c       	mov	r11, r1
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a706:	33 27       	eor	r19, r19
   1a708:	2b 2d       	mov	r18, r11
   1a70a:	1a 2d       	mov	r17, r10
   1a70c:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a70e:	88 23       	and	r24, r24
   1a710:	21 f0       	breq	.+8      	; 0x1a71a <lif_dir+0x1a6>
        ++sectors;
   1a712:	0f 5f       	subi	r16, 0xFF	; 255
   1a714:	1f 4f       	sbci	r17, 0xFF	; 255
   1a716:	2f 4f       	sbci	r18, 0xFF	; 255
   1a718:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a71a:	ed b7       	in	r30, 0x3d	; 61
   1a71c:	fe b7       	in	r31, 0x3e	; 62
   1a71e:	46 87       	std	Z+14, r20	; 0x0e
   1a720:	57 87       	std	Z+15, r21	; 0x0f
   1a722:	60 8b       	std	Z+16, r22	; 0x10
   1a724:	71 8b       	std	Z+17, r23	; 0x11
   1a726:	02 87       	std	Z+10, r16	; 0x0a
   1a728:	13 87       	std	Z+11, r17	; 0x0b
   1a72a:	24 87       	std	Z+12, r18	; 0x0c
   1a72c:	35 87       	std	Z+13, r19	; 0x0d
   1a72e:	86 82       	std	Z+6, r8	; 0x06
   1a730:	97 82       	std	Z+7, r9	; 0x07
   1a732:	a0 86       	std	Z+8, r10	; 0x08
   1a734:	b1 86       	std	Z+9, r11	; 0x09
   1a736:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a738:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a73a:	15 83       	std	Z+5, r17	; 0x05
   1a73c:	04 83       	std	Z+4, r16	; 0x04
   1a73e:	c1 82       	std	Z+1, r12	; 0x01
   1a740:	d2 82       	std	Z+2, r13	; 0x02
   1a742:	e3 82       	std	Z+3, r14	; 0x03
   1a744:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1a748:	01 e2       	ldi	r16, 0x21	; 33
   1a74a:	10 e0       	ldi	r17, 0x00	; 0
   1a74c:	1f 8b       	std	Y+23, r17	; 0x17
   1a74e:	0e 8b       	std	Y+22, r16	; 0x16
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a750:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a752:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a754:	8d 90       	ld	r8, X+
   1a756:	9c 90       	ld	r9, X
   1a758:	81 14       	cp	r8, r1
   1a75a:	91 04       	cpc	r9, r1
   1a75c:	19 f0       	breq	.+6      	; 0x1a764 <lif_dir+0x1f0>
   1a75e:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a760:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a762:	02 c0       	rjmp	.+4      	; 0x1a768 <lif_dir+0x1f4>
   1a764:	0a e3       	ldi	r16, 0x3A	; 58
   1a766:	16 e1       	ldi	r17, 0x16	; 22
   1a768:	a8 a5       	ldd	r26, Y+40	; 0x28
   1a76a:	b9 a5       	ldd	r27, Y+41	; 0x29
   1a76c:	8d 91       	ld	r24, X+
   1a76e:	9d 91       	ld	r25, X+
   1a770:	0d 90       	ld	r0, X+
   1a772:	bc 91       	ld	r27, X
   1a774:	a0 2d       	mov	r26, r0
   1a776:	88 a3       	std	Y+32, r24	; 0x20
   1a778:	99 a3       	std	Y+33, r25	; 0x21
   1a77a:	aa a3       	std	Y+34, r26	; 0x22
   1a77c:	bb a3       	std	Y+35, r27	; 0x23
   1a77e:	ea a5       	ldd	r30, Y+42	; 0x2a
   1a780:	fb a5       	ldd	r31, Y+43	; 0x2b
   1a782:	a0 80       	ld	r10, Z
   1a784:	b1 80       	ldd	r11, Z+1	; 0x01
   1a786:	8c a5       	ldd	r24, Y+44	; 0x2c
   1a788:	9d a5       	ldd	r25, Y+45	; 0x2d
   1a78a:	0e 94 5b c6 	call	0x18cb6	; 0x18cb6 <lif_lifbcd2timestr>
   1a78e:	ed b7       	in	r30, 0x3d	; 61
   1a790:	fe b7       	in	r31, 0x3e	; 62
   1a792:	95 8b       	std	Z+21, r25	; 0x15
   1a794:	84 8b       	std	Z+20, r24	; 0x14
   1a796:	b3 8a       	std	Z+19, r11	; 0x13
   1a798:	a2 8a       	std	Z+18, r10	; 0x12
   1a79a:	2e 89       	ldd	r18, Y+22	; 0x16
   1a79c:	3f 89       	ldd	r19, Y+23	; 0x17
   1a79e:	31 8b       	std	Z+17, r19	; 0x11
   1a7a0:	20 8b       	std	Z+16, r18	; 0x10
   1a7a2:	88 8d       	ldd	r24, Y+24	; 0x18
   1a7a4:	99 8d       	ldd	r25, Y+25	; 0x19
   1a7a6:	aa 8d       	ldd	r26, Y+26	; 0x1a
   1a7a8:	bb 8d       	ldd	r27, Y+27	; 0x1b
   1a7aa:	84 87       	std	Z+12, r24	; 0x0c
   1a7ac:	95 87       	std	Z+13, r25	; 0x0d
   1a7ae:	a6 87       	std	Z+14, r26	; 0x0e
   1a7b0:	b7 87       	std	Z+15, r27	; 0x0f
   1a7b2:	88 a1       	ldd	r24, Y+32	; 0x20
   1a7b4:	99 a1       	ldd	r25, Y+33	; 0x21
   1a7b6:	aa a1       	ldd	r26, Y+34	; 0x22
   1a7b8:	bb a1       	ldd	r27, Y+35	; 0x23
   1a7ba:	80 87       	std	Z+8, r24	; 0x08
   1a7bc:	91 87       	std	Z+9, r25	; 0x09
   1a7be:	a2 87       	std	Z+10, r26	; 0x0a
   1a7c0:	b3 87       	std	Z+11, r27	; 0x0b
   1a7c2:	97 82       	std	Z+7, r9	; 0x07
   1a7c4:	86 82       	std	Z+6, r8	; 0x06
   1a7c6:	15 83       	std	Z+5, r17	; 0x05
   1a7c8:	04 83       	std	Z+4, r16	; 0x04
   1a7ca:	41 82       	std	Z+1, r4	; 0x01
   1a7cc:	52 82       	std	Z+2, r5	; 0x02
   1a7ce:	63 82       	std	Z+3, r6	; 0x03
   1a7d0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            (long)bytes,
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1a7d4:	ff ef       	ldi	r31, 0xFF	; 255
   1a7d6:	2f 1a       	sub	r2, r31
   1a7d8:	3f 0a       	sbc	r3, r31
    }
   1a7da:	4c cf       	rjmp	.-360    	; 0x1a674 <lif_dir+0x100>

    printf("\n");
   1a7dc:	8a ea       	ldi	r24, 0xAA	; 170
   1a7de:	99 e3       	ldi	r25, 0x39	; 57
   1a7e0:	a0 e0       	ldi	r26, 0x00	; 0
   1a7e2:	ed b7       	in	r30, 0x3d	; 61
   1a7e4:	fe b7       	in	r31, 0x3e	; 62
   1a7e6:	81 83       	std	Z+1, r24	; 0x01
   1a7e8:	92 83       	std	Z+2, r25	; 0x02
   1a7ea:	a3 83       	std	Z+3, r26	; 0x03
   1a7ec:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1a7f0:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a7f2:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a7f4:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a7f6:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a7f8:	09 2e       	mov	r0, r25
   1a7fa:	00 0c       	add	r0, r0
   1a7fc:	aa 0b       	sbc	r26, r26
   1a7fe:	bb 0b       	sbc	r27, r27
   1a800:	ed b7       	in	r30, 0x3d	; 61
   1a802:	fe b7       	in	r31, 0x3e	; 62
   1a804:	84 83       	std	Z+4, r24	; 0x04
   1a806:	95 83       	std	Z+5, r25	; 0x05
   1a808:	a6 83       	std	Z+6, r26	; 0x06
   1a80a:	b7 83       	std	Z+7, r27	; 0x07
   1a80c:	8e e9       	ldi	r24, 0x9E	; 158
   1a80e:	99 e3       	ldi	r25, 0x39	; 57
   1a810:	a0 e0       	ldi	r26, 0x00	; 0
   1a812:	81 83       	std	Z+1, r24	; 0x01
   1a814:	92 83       	std	Z+2, r25	; 0x02
   1a816:	a3 83       	std	Z+3, r26	; 0x03
   1a818:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1a81c:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a81e:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a820:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a822:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a824:	09 2e       	mov	r0, r25
   1a826:	00 0c       	add	r0, r0
   1a828:	aa 0b       	sbc	r26, r26
   1a82a:	bb 0b       	sbc	r27, r27
   1a82c:	ed b7       	in	r30, 0x3d	; 61
   1a82e:	fe b7       	in	r31, 0x3e	; 62
   1a830:	84 83       	std	Z+4, r24	; 0x04
   1a832:	95 83       	std	Z+5, r25	; 0x05
   1a834:	a6 83       	std	Z+6, r26	; 0x06
   1a836:	b7 83       	std	Z+7, r27	; 0x07
   1a838:	81 e9       	ldi	r24, 0x91	; 145
   1a83a:	99 e3       	ldi	r25, 0x39	; 57
   1a83c:	a0 e0       	ldi	r26, 0x00	; 0
   1a83e:	81 83       	std	Z+1, r24	; 0x01
   1a840:	92 83       	std	Z+2, r25	; 0x02
   1a842:	a3 83       	std	Z+3, r26	; 0x03
   1a844:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1a848:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a84a:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a84c:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a84e:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a850:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a852:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a854:	ed b7       	in	r30, 0x3d	; 61
   1a856:	fe b7       	in	r31, 0x3e	; 62
   1a858:	84 83       	std	Z+4, r24	; 0x04
   1a85a:	95 83       	std	Z+5, r25	; 0x05
   1a85c:	a6 83       	std	Z+6, r26	; 0x06
   1a85e:	b7 83       	std	Z+7, r27	; 0x07
   1a860:	80 e8       	ldi	r24, 0x80	; 128
   1a862:	99 e3       	ldi	r25, 0x39	; 57
   1a864:	a0 e0       	ldi	r26, 0x00	; 0
   1a866:	81 83       	std	Z+1, r24	; 0x01
   1a868:	92 83       	std	Z+2, r25	; 0x02
   1a86a:	a3 83       	std	Z+3, r26	; 0x03
   1a86c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1a870:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a872:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a874:	85 a9       	ldd	r24, Z+53	; 0x35
   1a876:	96 a9       	ldd	r25, Z+54	; 0x36
   1a878:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a87a:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a87c:	ed b7       	in	r30, 0x3d	; 61
   1a87e:	fe b7       	in	r31, 0x3e	; 62
   1a880:	84 83       	std	Z+4, r24	; 0x04
   1a882:	95 83       	std	Z+5, r25	; 0x05
   1a884:	a6 83       	std	Z+6, r26	; 0x06
   1a886:	b7 83       	std	Z+7, r27	; 0x07
   1a888:	8d e6       	ldi	r24, 0x6D	; 109
   1a88a:	99 e3       	ldi	r25, 0x39	; 57
   1a88c:	a0 e0       	ldi	r26, 0x00	; 0
   1a88e:	81 83       	std	Z+1, r24	; 0x01
   1a890:	92 83       	std	Z+2, r25	; 0x02
   1a892:	a3 83       	std	Z+3, r26	; 0x03
   1a894:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1a898:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a89a:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a89c:	84 89       	ldd	r24, Z+20	; 0x14
   1a89e:	95 89       	ldd	r25, Z+21	; 0x15
   1a8a0:	a6 89       	ldd	r26, Z+22	; 0x16
   1a8a2:	b7 89       	ldd	r27, Z+23	; 0x17
   1a8a4:	ed b7       	in	r30, 0x3d	; 61
   1a8a6:	fe b7       	in	r31, 0x3e	; 62
   1a8a8:	84 83       	std	Z+4, r24	; 0x04
   1a8aa:	95 83       	std	Z+5, r25	; 0x05
   1a8ac:	a6 83       	std	Z+6, r26	; 0x06
   1a8ae:	b7 83       	std	Z+7, r27	; 0x07
   1a8b0:	8a e5       	ldi	r24, 0x5A	; 90
   1a8b2:	99 e3       	ldi	r25, 0x39	; 57
   1a8b4:	a0 e0       	ldi	r26, 0x00	; 0
   1a8b6:	81 83       	std	Z+1, r24	; 0x01
   1a8b8:	92 83       	std	Z+2, r25	; 0x02
   1a8ba:	a3 83       	std	Z+3, r26	; 0x03
   1a8bc:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1a8c0:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a8c2:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a8c4:	80 8d       	ldd	r24, Z+24	; 0x18
   1a8c6:	91 8d       	ldd	r25, Z+25	; 0x19
   1a8c8:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a8ca:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a8cc:	ed b7       	in	r30, 0x3d	; 61
   1a8ce:	fe b7       	in	r31, 0x3e	; 62
   1a8d0:	84 83       	std	Z+4, r24	; 0x04
   1a8d2:	95 83       	std	Z+5, r25	; 0x05
   1a8d4:	a6 83       	std	Z+6, r26	; 0x06
   1a8d6:	b7 83       	std	Z+7, r27	; 0x07
   1a8d8:	87 e4       	ldi	r24, 0x47	; 71
   1a8da:	99 e3       	ldi	r25, 0x39	; 57
   1a8dc:	a0 e0       	ldi	r26, 0x00	; 0
   1a8de:	81 83       	std	Z+1, r24	; 0x01
   1a8e0:	92 83       	std	Z+2, r25	; 0x02
   1a8e2:	a3 83       	std	Z+3, r26	; 0x03
   1a8e4:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a8e8:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a8ea:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a8ec:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1a8f0:	af 96       	adiw	r28, 0x2f	; 47
   1a8f2:	0f b6       	in	r0, 0x3f	; 63
   1a8f4:	f8 94       	cli
   1a8f6:	de bf       	out	0x3e, r29	; 62
   1a8f8:	0f be       	out	0x3f, r0	; 63
   1a8fa:	cd bf       	out	0x3d, r28	; 61
   1a8fc:	df 91       	pop	r29
   1a8fe:	cf 91       	pop	r28
   1a900:	1f 91       	pop	r17
   1a902:	0f 91       	pop	r16
   1a904:	ef 90       	pop	r14
   1a906:	df 90       	pop	r13
   1a908:	cf 90       	pop	r12
   1a90a:	bf 90       	pop	r11
   1a90c:	af 90       	pop	r10
   1a90e:	9f 90       	pop	r9
   1a910:	8f 90       	pop	r8
   1a912:	6f 90       	pop	r6
   1a914:	5f 90       	pop	r5
   1a916:	4f 90       	pop	r4
   1a918:	3f 90       	pop	r3
   1a91a:	2f 90       	pop	r2
   1a91c:	08 95       	ret

0001a91e <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a91e:	a5 e0       	ldi	r26, 0x05	; 5
   1a920:	b0 e0       	ldi	r27, 0x00	; 0
   1a922:	e5 e9       	ldi	r30, 0x95	; 149
   1a924:	f4 ed       	ldi	r31, 0xD4	; 212
   1a926:	0c 94 9b e7 	jmp	0x1cf36	; 0x1cf36 <__prologue_saves__+0x10>
   1a92a:	7c 01       	movw	r14, r24
   1a92c:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   1a92e:	cb 01       	movw	r24, r22
   1a930:	0e 94 4c c3 	call	0x18698	; 0x18698 <lif_checkname>
   1a934:	89 2b       	or	r24, r25
   1a936:	69 f4       	brne	.+26     	; 0x1a952 <lif_find_file+0x34>
    {
        if(debuglevel & LIF_DEBUG)
   1a938:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a93c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a940:	92 ff       	sbrs	r25, 2
   1a942:	48 c0       	rjmp	.+144    	; 0x1a9d4 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a944:	ed b7       	in	r30, 0x3d	; 61
   1a946:	fe b7       	in	r31, 0x3e	; 62
   1a948:	d5 83       	std	Z+5, r29	; 0x05
   1a94a:	c4 83       	std	Z+4, r28	; 0x04
   1a94c:	80 e2       	ldi	r24, 0x20	; 32
   1a94e:	99 e3       	ldi	r25, 0x39	; 57
   1a950:	15 c0       	rjmp	.+42     	; 0x1a97c <lif_find_file+0x5e>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a952:	fe 01       	movw	r30, r28
   1a954:	01 90       	ld	r0, Z+
   1a956:	00 20       	and	r0, r0
   1a958:	e9 f7       	brne	.-6      	; 0x1a954 <lif_find_file+0x36>
   1a95a:	31 97       	sbiw	r30, 0x01	; 1
   1a95c:	ec 1b       	sub	r30, r28
   1a95e:	fd 0b       	sbc	r31, r29
   1a960:	3b 97       	sbiw	r30, 0x0b	; 11
   1a962:	98 f0       	brcs	.+38     	; 0x1a98a <lif_find_file+0x6c>
    {
        if(debuglevel & LIF_DEBUG)
   1a964:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a968:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a96c:	92 ff       	sbrs	r25, 2
   1a96e:	32 c0       	rjmp	.+100    	; 0x1a9d4 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a970:	ed b7       	in	r30, 0x3d	; 61
   1a972:	fe b7       	in	r31, 0x3e	; 62
   1a974:	d5 83       	std	Z+5, r29	; 0x05
   1a976:	c4 83       	std	Z+4, r28	; 0x04
   1a978:	8b ef       	ldi	r24, 0xFB	; 251
   1a97a:	98 e3       	ldi	r25, 0x38	; 56
   1a97c:	a0 e0       	ldi	r26, 0x00	; 0
   1a97e:	81 83       	std	Z+1, r24	; 0x01
   1a980:	92 83       	std	Z+2, r25	; 0x02
   1a982:	a3 83       	std	Z+3, r26	; 0x03
   1a984:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1a988:	25 c0       	rjmp	.+74     	; 0x1a9d4 <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1a98a:	e1 14       	cp	r14, r1
   1a98c:	f1 04       	cpc	r15, r1
   1a98e:	11 f1       	breq	.+68     	; 0x1a9d4 <lif_find_file+0xb6>
   1a990:	00 e0       	ldi	r16, 0x00	; 0
   1a992:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a994:	67 01       	movw	r12, r14
   1a996:	fa e5       	ldi	r31, 0x5A	; 90
   1a998:	cf 0e       	add	r12, r31
   1a99a:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a99c:	57 01       	movw	r10, r14
   1a99e:	2f e4       	ldi	r18, 0x4F	; 79
   1a9a0:	a2 0e       	add	r10, r18
   1a9a2:	b1 1c       	adc	r11, r1
        return(-1);

    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1a9a4:	b8 01       	movw	r22, r16
   1a9a6:	c7 01       	movw	r24, r14
   1a9a8:	0e 94 8b cb 	call	0x19716	; 0x19716 <lif_readdirindex>
   1a9ac:	89 2b       	or	r24, r25
   1a9ae:	91 f0       	breq	.+36     	; 0x1a9d4 <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a9b0:	f6 01       	movw	r30, r12
   1a9b2:	80 81       	ld	r24, Z
   1a9b4:	91 81       	ldd	r25, Z+1	; 0x01
   1a9b6:	8f 3f       	cpi	r24, 0xFF	; 255
   1a9b8:	ff ef       	ldi	r31, 0xFF	; 255
   1a9ba:	9f 07       	cpc	r25, r31
   1a9bc:	59 f0       	breq	.+22     	; 0x1a9d4 <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a9be:	89 2b       	or	r24, r25
   1a9c0:	31 f0       	breq	.+12     	; 0x1a9ce <lif_find_file+0xb0>
   1a9c2:	be 01       	movw	r22, r28
   1a9c4:	c5 01       	movw	r24, r10
   1a9c6:	0e 94 19 32 	call	0x6432	; 0x6432 <strcasecmp>
   1a9ca:	89 2b       	or	r24, r25
   1a9cc:	31 f0       	breq	.+12     	; 0x1a9da <lif_find_file+0xbc>
            break;
        ++index;
   1a9ce:	0f 5f       	subi	r16, 0xFF	; 255
   1a9d0:	1f 4f       	sbci	r17, 0xFF	; 255
   1a9d2:	e8 cf       	rjmp	.-48     	; 0x1a9a4 <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1a9d4:	8f ef       	ldi	r24, 0xFF	; 255
   1a9d6:	9f ef       	ldi	r25, 0xFF	; 255
   1a9d8:	01 c0       	rjmp	.+2      	; 0x1a9dc <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a9da:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   1a9dc:	cd b7       	in	r28, 0x3d	; 61
   1a9de:	de b7       	in	r29, 0x3e	; 62
   1a9e0:	25 96       	adiw	r28, 0x05	; 5
   1a9e2:	ea e0       	ldi	r30, 0x0A	; 10
   1a9e4:	0c 94 b7 e7 	jmp	0x1cf6e	; 0x1cf6e <__epilogue_restores__+0x10>

0001a9e8 <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1a9e8:	a5 e0       	ldi	r26, 0x05	; 5
   1a9ea:	b0 e0       	ldi	r27, 0x00	; 0
   1a9ec:	ea ef       	ldi	r30, 0xFA	; 250
   1a9ee:	f4 ed       	ldi	r31, 0xD4	; 212
   1a9f0:	0c 94 9d e7 	jmp	0x1cf3a	; 0x1cf3a <__prologue_saves__+0x14>
   1a9f4:	6b 01       	movw	r12, r22
   1a9f6:	7c 01       	movw	r14, r24
   1a9f8:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1a9fa:	20 e0       	ldi	r18, 0x00	; 0
   1a9fc:	31 e0       	ldi	r19, 0x01	; 1
   1a9fe:	40 e0       	ldi	r20, 0x00	; 0
   1aa00:	50 e0       	ldi	r21, 0x00	; 0
   1aa02:	0e 94 48 e7 	call	0x1ce90	; 0x1ce90 <__divmodsi4>
    if(!pos)
   1aa06:	61 15       	cp	r22, r1
   1aa08:	71 05       	cpc	r23, r1
   1aa0a:	e1 f1       	breq	.+120    	; 0x1aa84 <lif_e010_pad_sector+0x9c>
        return(0);

// Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1aa0c:	c0 e0       	ldi	r28, 0x00	; 0
   1aa0e:	d1 e0       	ldi	r29, 0x01	; 1
   1aa10:	c6 1b       	sub	r28, r22
   1aa12:	d7 0b       	sbc	r29, r23

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
   1aa14:	f8 01       	movw	r30, r16
   1aa16:	8f ee       	ldi	r24, 0xEF	; 239
   1aa18:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1aa1a:	2f ef       	ldi	r18, 0xFF	; 255

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1aa1c:	cf 01       	movw	r24, r30
   1aa1e:	80 1b       	sub	r24, r16
   1aa20:	91 0b       	sbc	r25, r17
   1aa22:	8c 17       	cp	r24, r28
   1aa24:	9d 07       	cpc	r25, r29
   1aa26:	14 f4       	brge	.+4      	; 0x1aa2c <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1aa28:	21 93       	st	Z+, r18
   1aa2a:	f8 cf       	rjmp	.-16     	; 0x1aa1c <lif_e010_pad_sector+0x34>
   1aa2c:	1c 16       	cp	r1, r28
   1aa2e:	1d 06       	cpc	r1, r29
   1aa30:	14 f0       	brlt	.+4      	; 0x1aa36 <lif_e010_pad_sector+0x4e>
   1aa32:	c1 e0       	ldi	r28, 0x01	; 1
   1aa34:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1aa36:	ce 01       	movw	r24, r28
   1aa38:	0d 2e       	mov	r0, r29
   1aa3a:	00 0c       	add	r0, r0
   1aa3c:	aa 0b       	sbc	r26, r26
   1aa3e:	bb 0b       	sbc	r27, r27
   1aa40:	bc 01       	movw	r22, r24
   1aa42:	cd 01       	movw	r24, r26
   1aa44:	6c 0d       	add	r22, r12
   1aa46:	7d 1d       	adc	r23, r13
   1aa48:	8e 1d       	adc	r24, r14
   1aa4a:	9f 1d       	adc	r25, r15
   1aa4c:	20 e0       	ldi	r18, 0x00	; 0
   1aa4e:	31 e0       	ldi	r19, 0x01	; 1
   1aa50:	40 e0       	ldi	r20, 0x00	; 0
   1aa52:	50 e0       	ldi	r21, 0x00	; 0
   1aa54:	0e 94 48 e7 	call	0x1ce90	; 0x1ce90 <__divmodsi4>
// NEW SECTOR
// Debugging make sure we are at sector boundry
    if(pos)
   1aa58:	61 15       	cp	r22, r1
   1aa5a:	71 05       	cpc	r23, r1
   1aa5c:	b1 f0       	breq	.+44     	; 0x1aa8a <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & LIF_DEBUG)
   1aa5e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1aa62:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1aa66:	32 ff       	sbrs	r19, 2
   1aa68:	12 c0       	rjmp	.+36     	; 0x1aa8e <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1aa6a:	ed b7       	in	r30, 0x3d	; 61
   1aa6c:	fe b7       	in	r31, 0x3e	; 62
   1aa6e:	75 83       	std	Z+5, r23	; 0x05
   1aa70:	64 83       	std	Z+4, r22	; 0x04
   1aa72:	82 ec       	ldi	r24, 0xC2	; 194
   1aa74:	98 e3       	ldi	r25, 0x38	; 56
   1aa76:	a0 e0       	ldi	r26, 0x00	; 0
   1aa78:	81 83       	std	Z+1, r24	; 0x01
   1aa7a:	92 83       	std	Z+2, r25	; 0x02
   1aa7c:	a3 83       	std	Z+3, r26	; 0x03
   1aa7e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1aa82:	05 c0       	rjmp	.+10     	; 0x1aa8e <lif_e010_pad_sector+0xa6>
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1aa84:	80 e0       	ldi	r24, 0x00	; 0
   1aa86:	90 e0       	ldi	r25, 0x00	; 0
   1aa88:	04 c0       	rjmp	.+8      	; 0x1aa92 <lif_e010_pad_sector+0xaa>
   1aa8a:	ce 01       	movw	r24, r28
   1aa8c:	02 c0       	rjmp	.+4      	; 0x1aa92 <lif_e010_pad_sector+0xaa>
// Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1aa8e:	8f ef       	ldi	r24, 0xFF	; 255
   1aa90:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1aa92:	cd b7       	in	r28, 0x3d	; 61
   1aa94:	de b7       	in	r29, 0x3e	; 62
   1aa96:	25 96       	adiw	r28, 0x05	; 5
   1aa98:	e8 e0       	ldi	r30, 0x08	; 8
   1aa9a:	0c 94 b9 e7 	jmp	0x1cf72	; 0x1cf72 <__epilogue_restores__+0x14>

0001aa9e <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1aa9e:	a5 e0       	ldi	r26, 0x05	; 5
   1aaa0:	b0 e0       	ldi	r27, 0x00	; 0
   1aaa2:	e5 e5       	ldi	r30, 0x55	; 85
   1aaa4:	f5 ed       	ldi	r31, 0xD5	; 213
   1aaa6:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
   1aaaa:	ec 01       	movw	r28, r24
   1aaac:	4a 01       	movw	r8, r20
   1aaae:	5b 01       	movw	r10, r22
   1aab0:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;

// String size
    len = strlen(str);
   1aab2:	fc 01       	movw	r30, r24
   1aab4:	01 90       	ld	r0, Z+
   1aab6:	00 20       	and	r0, r0
   1aab8:	e9 f7       	brne	.-6      	; 0x1aab4 <lif_ascii_string_to_e010+0x16>
   1aaba:	31 97       	sbiw	r30, 0x01	; 1
   1aabc:	6f 01       	movw	r12, r30
   1aabe:	c8 1a       	sub	r12, r24
   1aac0:	d9 0a       	sbc	r13, r25
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1aac2:	41 2c       	mov	r4, r1
   1aac4:	51 2c       	mov	r5, r1
   1aac6:	32 01       	movw	r6, r4
   1aac8:	53 94       	inc	r5
   1aaca:	cb 01       	movw	r24, r22
   1aacc:	ba 01       	movw	r22, r20
   1aace:	a3 01       	movw	r20, r6
   1aad0:	92 01       	movw	r18, r4
   1aad2:	0e 94 48 e7 	call	0x1ce90	; 0x1ce90 <__divmodsi4>
   1aad6:	21 2c       	mov	r2, r1
   1aad8:	33 24       	eor	r3, r3
   1aada:	33 94       	inc	r3
   1aadc:	c1 01       	movw	r24, r2
   1aade:	86 1b       	sub	r24, r22
   1aae0:	97 0b       	sbc	r25, r23

/// We ALWAYS pad a sector if:
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1aae2:	86 30       	cpi	r24, 0x06	; 6
   1aae4:	91 05       	cpc	r25, r1
   1aae6:	20 f0       	brcs	.+8      	; 0x1aaf0 <lif_ascii_string_to_e010+0x52>
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1aae8:	1c 01       	movw	r2, r24

// String size
    len = strlen(str);

// Output buffer index
    ind = 0;
   1aaea:	00 e0       	ldi	r16, 0x00	; 0
   1aaec:	10 e0       	ldi	r17, 0x00	; 0
   1aaee:	17 c0       	rjmp	.+46     	; 0x1ab1e <lif_ascii_string_to_e010+0x80>
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1aaf0:	a7 01       	movw	r20, r14
   1aaf2:	c5 01       	movw	r24, r10
   1aaf4:	b4 01       	movw	r22, r8
   1aaf6:	78 df       	rcall	.-272    	; 0x1a9e8 <lif_e010_pad_sector>
   1aaf8:	8c 01       	movw	r16, r24
        if(ind < 0)
   1aafa:	97 fd       	sbrc	r25, 7
   1aafc:	83 c0       	rjmp	.+262    	; 0x1ac04 <lif_ascii_string_to_e010+0x166>
            return(ind);

// Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1aafe:	09 2e       	mov	r0, r25
   1ab00:	00 0c       	add	r0, r0
   1ab02:	aa 0b       	sbc	r26, r26
   1ab04:	bb 0b       	sbc	r27, r27
   1ab06:	bc 01       	movw	r22, r24
   1ab08:	cd 01       	movw	r24, r26
   1ab0a:	68 0d       	add	r22, r8
   1ab0c:	79 1d       	adc	r23, r9
   1ab0e:	8a 1d       	adc	r24, r10
   1ab10:	9b 1d       	adc	r25, r11
   1ab12:	a3 01       	movw	r20, r6
   1ab14:	92 01       	movw	r18, r4
   1ab16:	0e 94 48 e7 	call	0x1ce90	; 0x1ce90 <__divmodsi4>
   1ab1a:	26 1a       	sub	r2, r22
   1ab1c:	37 0a       	sbc	r3, r23
   1ab1e:	f7 01       	movw	r30, r14
   1ab20:	e0 0f       	add	r30, r16
   1ab22:	f1 1f       	adc	r31, r17
   1ab24:	0d 5f       	subi	r16, 0xFD	; 253
   1ab26:	1f 4f       	sbci	r17, 0xFF	; 255
    }

// Note: IMPORTANT we have >= 6 bytes!!!

// Do not have to split, there is enough room
    if(rem >= (3 + len))
   1ab28:	c6 01       	movw	r24, r12
   1ab2a:	02 96       	adiw	r24, 0x02	; 2
   1ab2c:	82 15       	cp	r24, r2
   1ab2e:	93 05       	cpc	r25, r3
   1ab30:	84 f4       	brge	.+32     	; 0x1ab52 <lif_ascii_string_to_e010+0xb4>
    {

// Write string in new sector
// The full string + header will fit
        wbuf[ind++] = 0xDF;
   1ab32:	8f ed       	ldi	r24, 0xDF	; 223
   1ab34:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1ab36:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1ab38:	d2 82       	std	Z+2, r13	; 0x02
   1ab3a:	f7 01       	movw	r30, r14
   1ab3c:	e0 0f       	add	r30, r16
   1ab3e:	f1 1f       	adc	r31, r17
   1ab40:	cf 01       	movw	r24, r30
   1ab42:	8e 19       	sub	r24, r14
   1ab44:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1ab46:	29 91       	ld	r18, Y+
   1ab48:	22 23       	and	r18, r18
   1ab4a:	09 f4       	brne	.+2      	; 0x1ab4e <lif_ascii_string_to_e010+0xb0>
   1ab4c:	5b c0       	rjmp	.+182    	; 0x1ac04 <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1ab4e:	21 93       	st	Z+, r18
   1ab50:	f7 cf       	rjmp	.-18     	; 0x1ab40 <lif_ascii_string_to_e010+0xa2>

// CURRENT SECTOR
// String spans a sector , so split the string

// 1st Split string header
        wbuf[ind++] = 0xCF;
   1ab52:	8f ec       	ldi	r24, 0xCF	; 207
   1ab54:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1ab56:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1ab58:	d2 82       	std	Z+2, r13	; 0x02
   1ab5a:	d7 01       	movw	r26, r14
   1ab5c:	a0 0f       	add	r26, r16
   1ab5e:	b1 1f       	adc	r27, r17
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1ab60:	fe 01       	movw	r30, r28
   1ab62:	81 91       	ld	r24, Z+
   1ab64:	81 11       	cpse	r24, r1
   1ab66:	0e c0       	rjmp	.+28     	; 0x1ab84 <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1ab68:	c8 01       	movw	r24, r16
   1ab6a:	01 2e       	mov	r0, r17
   1ab6c:	00 0c       	add	r0, r0
   1ab6e:	aa 0b       	sbc	r26, r26
   1ab70:	bb 0b       	sbc	r27, r27
   1ab72:	bc 01       	movw	r22, r24
   1ab74:	cd 01       	movw	r24, r26
   1ab76:	68 0d       	add	r22, r8
   1ab78:	79 1d       	adc	r23, r9
   1ab7a:	8a 1d       	adc	r24, r10
   1ab7c:	9b 1d       	adc	r25, r11
   1ab7e:	61 11       	cpse	r22, r1
   1ab80:	09 c0       	rjmp	.+18     	; 0x1ab94 <lif_ascii_string_to_e010+0xf6>
   1ab82:	21 c0       	rjmp	.+66     	; 0x1abc6 <lif_ascii_string_to_e010+0x128>
// 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1ab84:	02 15       	cp	r16, r2
   1ab86:	13 05       	cpc	r17, r3
   1ab88:	7c f7       	brge	.-34     	; 0x1ab68 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1ab8a:	0f 5f       	subi	r16, 0xFF	; 255
   1ab8c:	1f 4f       	sbci	r17, 0xFF	; 255
   1ab8e:	8d 93       	st	X+, r24
   1ab90:	ef 01       	movw	r28, r30
   1ab92:	e6 cf       	rjmp	.-52     	; 0x1ab60 <lif_ascii_string_to_e010+0xc2>

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
   1ab94:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1ab98:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1ab9c:	32 ff       	sbrs	r19, 2
   1ab9e:	30 c0       	rjmp	.+96     	; 0x1ac00 <lif_ascii_string_to_e010+0x162>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1aba0:	20 e0       	ldi	r18, 0x00	; 0
   1aba2:	31 e0       	ldi	r19, 0x01	; 1
   1aba4:	40 e0       	ldi	r20, 0x00	; 0
   1aba6:	50 e0       	ldi	r21, 0x00	; 0
   1aba8:	0e 94 48 e7 	call	0x1ce90	; 0x1ce90 <__divmodsi4>
   1abac:	ed b7       	in	r30, 0x3d	; 61
   1abae:	fe b7       	in	r31, 0x3e	; 62
   1abb0:	75 83       	std	Z+5, r23	; 0x05
   1abb2:	64 83       	std	Z+4, r22	; 0x04
   1abb4:	8e e9       	ldi	r24, 0x9E	; 158
   1abb6:	98 e3       	ldi	r25, 0x38	; 56
   1abb8:	a0 e0       	ldi	r26, 0x00	; 0
   1abba:	81 83       	std	Z+1, r24	; 0x01
   1abbc:	92 83       	std	Z+2, r25	; 0x02
   1abbe:	a3 83       	std	Z+3, r26	; 0x03
   1abc0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1abc4:	1d c0       	rjmp	.+58     	; 0x1ac00 <lif_ascii_string_to_e010+0x162>
            return(-1);
        }

// Update remining string length
        len = strlen(str);
   1abc6:	fe 01       	movw	r30, r28
   1abc8:	01 90       	ld	r0, Z+
   1abca:	00 20       	and	r0, r0
   1abcc:	e9 f7       	brne	.-6      	; 0x1abc8 <lif_ascii_string_to_e010+0x12a>
   1abce:	31 97       	sbiw	r30, 0x01	; 1
   1abd0:	9f 01       	movw	r18, r30
   1abd2:	2c 1b       	sub	r18, r28
   1abd4:	3d 0b       	sbc	r19, r29
// 2nd Split string header
        wbuf[ind++] = 0x6F;
   1abd6:	d7 01       	movw	r26, r14
   1abd8:	a0 0f       	add	r26, r16
   1abda:	b1 1f       	adc	r27, r17
   1abdc:	8f e6       	ldi	r24, 0x6F	; 111
   1abde:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1abe0:	fd 01       	movw	r30, r26
   1abe2:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1abe4:	32 83       	std	Z+2, r19	; 0x02
   1abe6:	0d 5f       	subi	r16, 0xFD	; 253
   1abe8:	1f 4f       	sbci	r17, 0xFF	; 255
   1abea:	f7 01       	movw	r30, r14
   1abec:	e0 0f       	add	r30, r16
   1abee:	f1 1f       	adc	r31, r17
   1abf0:	cf 01       	movw	r24, r30
   1abf2:	8e 19       	sub	r24, r14
   1abf4:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1abf6:	29 91       	ld	r18, Y+
   1abf8:	22 23       	and	r18, r18
   1abfa:	21 f0       	breq	.+8      	; 0x1ac04 <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1abfc:	21 93       	st	Z+, r18
   1abfe:	f8 cf       	rjmp	.-16     	; 0x1abf0 <lif_ascii_string_to_e010+0x152>
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1ac00:	8f ef       	ldi	r24, 0xFF	; 255
   1ac02:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1ac04:	cd b7       	in	r28, 0x3d	; 61
   1ac06:	de b7       	in	r29, 0x3e	; 62
   1ac08:	25 96       	adiw	r28, 0x05	; 5
   1ac0a:	e2 e1       	ldi	r30, 0x12	; 18
   1ac0c:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

0001ac10 <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1ac10:	ad e0       	ldi	r26, 0x0D	; 13
   1ac12:	b3 e0       	ldi	r27, 0x03	; 3
   1ac14:	ee e0       	ldi	r30, 0x0E	; 14
   1ac16:	f6 ed       	ldi	r31, 0xD6	; 214
   1ac18:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
   1ac1c:	5c 01       	movw	r10, r24
   1ac1e:	2a 01       	movw	r4, r20
   1ac20:	3b 01       	movw	r6, r22
   1ac22:	c9 01       	movw	r24, r18
// strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
// output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1ac24:	6c ee       	ldi	r22, 0xEC	; 236
   1ac26:	78 e0       	ldi	r23, 0x08	; 8
   1ac28:	0e 94 ad c1 	call	0x1835a	; 0x1835a <lif_open>
   1ac2c:	c7 5f       	subi	r28, 0xF7	; 247
   1ac2e:	dc 4f       	sbci	r29, 0xFC	; 252
   1ac30:	99 83       	std	Y+1, r25	; 0x01
   1ac32:	88 83       	st	Y, r24
   1ac34:	c9 50       	subi	r28, 0x09	; 9
   1ac36:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1ac38:	89 2b       	or	r24, r25
   1ac3a:	09 f4       	brne	.+2      	; 0x1ac3e <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1ac3c:	63 c0       	rjmp	.+198    	; 0x1ad04 <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1ac3e:	81 2c       	mov	r8, r1
   1ac40:	91 2c       	mov	r9, r1
   1ac42:	c1 2c       	mov	r12, r1
   1ac44:	d1 2c       	mov	r13, r1
   1ac46:	76 01       	movw	r14, r12

        if(count > 256)
        {
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1ac48:	80 e9       	ldi	r24, 0x90	; 144
   1ac4a:	98 e3       	ldi	r25, 0x38	; 56
   1ac4c:	9c 01       	movw	r18, r24
   1ac4e:	40 e0       	ldi	r20, 0x00	; 0
   1ac50:	c5 5f       	subi	r28, 0xF5	; 245
   1ac52:	dc 4f       	sbci	r29, 0xFC	; 252
   1ac54:	28 83       	st	Y, r18
   1ac56:	39 83       	std	Y+1, r19	; 0x01
   1ac58:	4a 83       	std	Y+2, r20	; 0x02
   1ac5a:	cb 50       	subi	r28, 0x0B	; 11
   1ac5c:	d3 40       	sbci	r29, 0x03	; 3
   1ac5e:	14 c0       	rjmp	.+40     	; 0x1ac88 <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1ac60:	c1 01       	movw	r24, r2
   1ac62:	03 2c       	mov	r0, r3
   1ac64:	00 0c       	add	r0, r0
   1ac66:	aa 0b       	sbc	r26, r26
   1ac68:	bb 0b       	sbc	r27, r27
   1ac6a:	48 0e       	add	r4, r24
   1ac6c:	59 1e       	adc	r5, r25
   1ac6e:	6a 1e       	adc	r6, r26
   1ac70:	7b 1e       	adc	r7, r27
        bytes += size;
   1ac72:	c8 0e       	add	r12, r24
   1ac74:	d9 1e       	adc	r13, r25
   1ac76:	ea 1e       	adc	r14, r26
   1ac78:	fb 1e       	adc	r15, r27
        count += size;
   1ac7a:	82 0c       	add	r8, r2
   1ac7c:	93 1c       	adc	r9, r3

        if(count > 256)
   1ac7e:	31 e0       	ldi	r19, 0x01	; 1
   1ac80:	83 16       	cp	r8, r19
   1ac82:	93 06       	cpc	r9, r19
   1ac84:	0c f0       	brlt	.+2      	; 0x1ac88 <lif_add_ascii_file_as_e010_wrapper+0x78>
   1ac86:	43 c0       	rjmp	.+134    	; 0x1ad0e <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

// Read user file and write LIF records
// reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1ac88:	c7 5f       	subi	r28, 0xF7	; 247
   1ac8a:	dc 4f       	sbci	r29, 0xFC	; 252
   1ac8c:	48 81       	ld	r20, Y
   1ac8e:	59 81       	ldd	r21, Y+1	; 0x01
   1ac90:	c9 50       	subi	r28, 0x09	; 9
   1ac92:	d3 40       	sbci	r29, 0x03	; 3
   1ac94:	6d ef       	ldi	r22, 0xFD	; 253
   1ac96:	70 e0       	ldi	r23, 0x00	; 0
   1ac98:	ce 01       	movw	r24, r28
   1ac9a:	88 5f       	subi	r24, 0xF8	; 248
   1ac9c:	9d 4f       	sbci	r25, 0xFD	; 253
   1ac9e:	0e 94 e1 76 	call	0xedc2	; 0xedc2 <fgets>
   1aca2:	89 2b       	or	r24, r25
   1aca4:	09 f4       	brne	.+2      	; 0x1aca8 <lif_add_ascii_file_as_e010_wrapper+0x98>
   1aca6:	4b c0       	rjmp	.+150    	; 0x1ad3e <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1aca8:	ce 01       	movw	r24, r28
   1acaa:	88 5f       	subi	r24, 0xF8	; 248
   1acac:	9d 4f       	sbci	r25, 0xFD	; 253
   1acae:	0e 94 90 32 	call	0x6520	; 0x6520 <trim_tail>

        strcat((char *)str,"\r");                 // HP85 lines end with "\r"
   1acb2:	63 e4       	ldi	r22, 0x43	; 67
   1acb4:	76 e1       	ldi	r23, 0x16	; 22
   1acb6:	ce 01       	movw	r24, r28
   1acb8:	88 5f       	subi	r24, 0xF8	; 248
   1acba:	9d 4f       	sbci	r25, 0xFD	; 253
   1acbc:	0e 94 d3 31 	call	0x63a6	; 0x63a6 <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1acc0:	9e 01       	movw	r18, r28
   1acc2:	28 5f       	subi	r18, 0xF8	; 248
   1acc4:	3f 4f       	sbci	r19, 0xFF	; 255
   1acc6:	b3 01       	movw	r22, r6
   1acc8:	a2 01       	movw	r20, r4
   1acca:	ce 01       	movw	r24, r28
   1accc:	88 5f       	subi	r24, 0xF8	; 248
   1acce:	9d 4f       	sbci	r25, 0xFD	; 253
   1acd0:	e6 de       	rcall	.-564    	; 0x1aa9e <lif_ascii_string_to_e010>
   1acd2:	1c 01       	movw	r2, r24
// Write string
// Now Write string
        if(LIF)
   1acd4:	a1 14       	cp	r10, r1
   1acd6:	b1 04       	cpc	r11, r1
   1acd8:	19 f2       	breq	.-122    	; 0x1ac60 <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1acda:	8c 01       	movw	r16, r24
   1acdc:	a3 01       	movw	r20, r6
   1acde:	92 01       	movw	r18, r4
   1ace0:	be 01       	movw	r22, r28
   1ace2:	68 5f       	subi	r22, 0xF8	; 248
   1ace4:	7f 4f       	sbci	r23, 0xFF	; 255
   1ace6:	c5 01       	movw	r24, r10
   1ace8:	0e 94 84 c2 	call	0x18508	; 0x18508 <lif_write>
            if(len < size)
   1acec:	82 15       	cp	r24, r2
   1acee:	93 05       	cpc	r25, r3
   1acf0:	0c f0       	brlt	.+2      	; 0x1acf4 <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1acf2:	b6 cf       	rjmp	.-148    	; 0x1ac60 <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1acf4:	c7 5f       	subi	r28, 0xF7	; 247
   1acf6:	dc 4f       	sbci	r29, 0xFC	; 252
   1acf8:	88 81       	ld	r24, Y
   1acfa:	99 81       	ldd	r25, Y+1	; 0x01
   1acfc:	c9 50       	subi	r28, 0x09	; 9
   1acfe:	d3 40       	sbci	r29, 0x03	; 3
   1ad00:	0e 94 73 7d 	call	0xfae6	; 0xfae6 <fclose>
                return(-1);
   1ad04:	6f ef       	ldi	r22, 0xFF	; 255
   1ad06:	7f ef       	ldi	r23, 0xFF	; 255
   1ad08:	8f ef       	ldi	r24, 0xFF	; 255
   1ad0a:	9f ef       	ldi	r25, 0xFF	; 255
   1ad0c:	84 c0       	rjmp	.+264    	; 0x1ae16 <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {
            count = 0;
            if(LIF)
   1ad0e:	a1 14       	cp	r10, r1
   1ad10:	b1 04       	cpc	r11, r1
   1ad12:	91 f0       	breq	.+36     	; 0x1ad38 <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1ad14:	ed b7       	in	r30, 0x3d	; 61
   1ad16:	fe b7       	in	r31, 0x3e	; 62
   1ad18:	c4 82       	std	Z+4, r12	; 0x04
   1ad1a:	d5 82       	std	Z+5, r13	; 0x05
   1ad1c:	e6 82       	std	Z+6, r14	; 0x06
   1ad1e:	f7 82       	std	Z+7, r15	; 0x07
   1ad20:	c5 5f       	subi	r28, 0xF5	; 245
   1ad22:	dc 4f       	sbci	r29, 0xFC	; 252
   1ad24:	28 81       	ld	r18, Y
   1ad26:	39 81       	ldd	r19, Y+1	; 0x01
   1ad28:	4a 81       	ldd	r20, Y+2	; 0x02
   1ad2a:	cb 50       	subi	r28, 0x0B	; 11
   1ad2c:	d3 40       	sbci	r29, 0x03	; 3
   1ad2e:	21 83       	std	Z+1, r18	; 0x01
   1ad30:	32 83       	std	Z+2, r19	; 0x02
   1ad32:	43 83       	std	Z+3, r20	; 0x03
   1ad34:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {
            count = 0;
   1ad38:	81 2c       	mov	r8, r1
   1ad3a:	91 2c       	mov	r9, r1
   1ad3c:	a5 cf       	rjmp	.-182    	; 0x1ac88 <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1ad3e:	c7 5f       	subi	r28, 0xF7	; 247
   1ad40:	dc 4f       	sbci	r29, 0xFC	; 252
   1ad42:	88 81       	ld	r24, Y
   1ad44:	99 81       	ldd	r25, Y+1	; 0x01
   1ad46:	c9 50       	subi	r28, 0x09	; 9
   1ad48:	d3 40       	sbci	r29, 0x03	; 3
   1ad4a:	0e 94 73 7d 	call	0xfae6	; 0xfae6 <fclose>

// Write EOF
    str[0] = 0;
   1ad4e:	c8 5f       	subi	r28, 0xF8	; 248
   1ad50:	dd 4f       	sbci	r29, 0xFD	; 253
   1ad52:	18 82       	st	Y, r1
   1ad54:	c8 50       	subi	r28, 0x08	; 8
   1ad56:	d2 40       	sbci	r29, 0x02	; 2
// We only want to return the count of bytes in the file NOT the padding at the end
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1ad58:	9e 01       	movw	r18, r28
   1ad5a:	28 5f       	subi	r18, 0xF8	; 248
   1ad5c:	3f 4f       	sbci	r19, 0xFF	; 255
   1ad5e:	b3 01       	movw	r22, r6
   1ad60:	a2 01       	movw	r20, r4
   1ad62:	ce 01       	movw	r24, r28
   1ad64:	88 5f       	subi	r24, 0xF8	; 248
   1ad66:	9d 4f       	sbci	r25, 0xFD	; 253
   1ad68:	9a de       	rcall	.-716    	; 0x1aa9e <lif_ascii_string_to_e010>
   1ad6a:	4c 01       	movw	r8, r24

    if(LIF)
   1ad6c:	a1 14       	cp	r10, r1
   1ad6e:	b1 04       	cpc	r11, r1
   1ad70:	d1 f4       	brne	.+52     	; 0x1ada6 <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1ad72:	c4 01       	movw	r24, r8
   1ad74:	09 2c       	mov	r0, r9
   1ad76:	00 0c       	add	r0, r0
   1ad78:	aa 0b       	sbc	r26, r26
   1ad7a:	bb 0b       	sbc	r27, r27
   1ad7c:	c8 0e       	add	r12, r24
   1ad7e:	d9 1e       	adc	r13, r25
   1ad80:	ea 1e       	adc	r14, r26
   1ad82:	fb 1e       	adc	r15, r27

// PAD
    size = lif_e010_pad_sector(offset, obuf);
   1ad84:	12 01       	movw	r2, r4
   1ad86:	23 01       	movw	r4, r6
   1ad88:	28 0e       	add	r2, r24
   1ad8a:	39 1e       	adc	r3, r25
   1ad8c:	4a 1e       	adc	r4, r26
   1ad8e:	5b 1e       	adc	r5, r27
   1ad90:	ae 01       	movw	r20, r28
   1ad92:	48 5f       	subi	r20, 0xF8	; 248
   1ad94:	5f 4f       	sbci	r21, 0xFF	; 255
   1ad96:	c2 01       	movw	r24, r4
   1ad98:	b1 01       	movw	r22, r2
   1ad9a:	26 de       	rcall	.-948    	; 0x1a9e8 <lif_e010_pad_sector>
   1ad9c:	3c 01       	movw	r6, r24
    if(LIF)
   1ad9e:	a1 14       	cp	r10, r1
   1ada0:	b1 04       	cpc	r11, r1
   1ada2:	e1 f4       	brne	.+56     	; 0x1addc <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1ada4:	36 c0       	rjmp	.+108    	; 0x1ae12 <lif_add_ascii_file_as_e010_wrapper+0x202>
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1ada6:	ed b7       	in	r30, 0x3d	; 61
   1ada8:	fe b7       	in	r31, 0x3e	; 62
   1adaa:	c4 82       	std	Z+4, r12	; 0x04
   1adac:	d5 82       	std	Z+5, r13	; 0x05
   1adae:	e6 82       	std	Z+6, r14	; 0x06
   1adb0:	f7 82       	std	Z+7, r15	; 0x07
   1adb2:	82 e8       	ldi	r24, 0x82	; 130
   1adb4:	98 e3       	ldi	r25, 0x38	; 56
   1adb6:	a0 e0       	ldi	r26, 0x00	; 0
   1adb8:	81 83       	std	Z+1, r24	; 0x01
   1adba:	92 83       	std	Z+2, r25	; 0x02
   1adbc:	a3 83       	std	Z+3, r26	; 0x03
   1adbe:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1adc2:	84 01       	movw	r16, r8
   1adc4:	a3 01       	movw	r20, r6
   1adc6:	92 01       	movw	r18, r4
   1adc8:	be 01       	movw	r22, r28
   1adca:	68 5f       	subi	r22, 0xF8	; 248
   1adcc:	7f 4f       	sbci	r23, 0xFF	; 255
   1adce:	c5 01       	movw	r24, r10
   1add0:	0e 94 84 c2 	call	0x18508	; 0x18508 <lif_write>
        if(len < size)
   1add4:	88 15       	cp	r24, r8
   1add6:	99 05       	cpc	r25, r9
   1add8:	64 f6       	brge	.-104    	; 0x1ad72 <lif_add_ascii_file_as_e010_wrapper+0x162>
   1adda:	94 cf       	rjmp	.-216    	; 0x1ad04 <lif_add_ascii_file_as_e010_wrapper+0xf4>

// PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1addc:	8c 01       	movw	r16, r24
   1adde:	a2 01       	movw	r20, r4
   1ade0:	91 01       	movw	r18, r2
   1ade2:	be 01       	movw	r22, r28
   1ade4:	68 5f       	subi	r22, 0xF8	; 248
   1ade6:	7f 4f       	sbci	r23, 0xFF	; 255
   1ade8:	c5 01       	movw	r24, r10
   1adea:	0e 94 84 c2 	call	0x18508	; 0x18508 <lif_write>
        if(len < size)
   1adee:	86 15       	cp	r24, r6
   1adf0:	97 05       	cpc	r25, r7
   1adf2:	0c f4       	brge	.+2      	; 0x1adf6 <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1adf4:	87 cf       	rjmp	.-242    	; 0x1ad04 <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1adf6:	ed b7       	in	r30, 0x3d	; 61
   1adf8:	fe b7       	in	r31, 0x3e	; 62
   1adfa:	c4 82       	std	Z+4, r12	; 0x04
   1adfc:	d5 82       	std	Z+5, r13	; 0x05
   1adfe:	e6 82       	std	Z+6, r14	; 0x06
   1ae00:	f7 82       	std	Z+7, r15	; 0x07
   1ae02:	84 e7       	ldi	r24, 0x74	; 116
   1ae04:	98 e3       	ldi	r25, 0x38	; 56
   1ae06:	a0 e0       	ldi	r26, 0x00	; 0
   1ae08:	81 83       	std	Z+1, r24	; 0x01
   1ae0a:	92 83       	std	Z+2, r25	; 0x02
   1ae0c:	a3 83       	std	Z+3, r26	; 0x03
   1ae0e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

    return(bytes);
   1ae12:	b6 01       	movw	r22, r12
   1ae14:	c7 01       	movw	r24, r14
}
   1ae16:	c3 5f       	subi	r28, 0xF3	; 243
   1ae18:	dc 4f       	sbci	r29, 0xFC	; 252
   1ae1a:	e2 e1       	ldi	r30, 0x12	; 18
   1ae1c:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

0001ae20 <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1ae20:	ab e3       	ldi	r26, 0x3B	; 59
   1ae22:	b0 e0       	ldi	r27, 0x00	; 0
   1ae24:	e6 e1       	ldi	r30, 0x16	; 22
   1ae26:	f7 ed       	ldi	r31, 0xD7	; 215
   1ae28:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
   1ae2c:	6c 01       	movw	r12, r24
   1ae2e:	1b 01       	movw	r2, r22
   1ae30:	7a 01       	movw	r14, r20
    long offset;
    int index;
    lif_t *LIF;
    stat_t st, *sp;

    if(!*lifimagename)
   1ae32:	fc 01       	movw	r30, r24
   1ae34:	80 81       	ld	r24, Z
   1ae36:	81 11       	cpse	r24, r1
   1ae38:	03 c0       	rjmp	.+6      	; 0x1ae40 <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1ae3a:	81 e4       	ldi	r24, 0x41	; 65
   1ae3c:	98 e3       	ldi	r25, 0x38	; 56
   1ae3e:	1a c0       	rjmp	.+52     	; 0x1ae74 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1ae40:	fb 01       	movw	r30, r22
   1ae42:	80 81       	ld	r24, Z
   1ae44:	81 11       	cpse	r24, r1
   1ae46:	03 c0       	rjmp	.+6      	; 0x1ae4e <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1ae48:	83 e1       	ldi	r24, 0x13	; 19
   1ae4a:	98 e3       	ldi	r25, 0x38	; 56
   1ae4c:	13 c0       	rjmp	.+38     	; 0x1ae74 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1ae4e:	fa 01       	movw	r30, r20
   1ae50:	80 81       	ld	r24, Z
   1ae52:	81 11       	cpse	r24, r1
   1ae54:	03 c0       	rjmp	.+6      	; 0x1ae5c <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1ae56:	84 ee       	ldi	r24, 0xE4	; 228
   1ae58:	97 e3       	ldi	r25, 0x37	; 55
   1ae5a:	0c c0       	rjmp	.+24     	; 0x1ae74 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

//Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1ae5c:	be 01       	movw	r22, r28
   1ae5e:	66 5f       	subi	r22, 0xF6	; 246
   1ae60:	7f 4f       	sbci	r23, 0xFF	; 255
   1ae62:	ca 01       	movw	r24, r20
   1ae64:	0e 94 d7 c1 	call	0x183ae	; 0x183ae <lif_stat>
   1ae68:	9b af       	std	Y+59, r25	; 0x3b
   1ae6a:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1ae6c:	89 2b       	or	r24, r25
   1ae6e:	59 f4       	brne	.+22     	; 0x1ae86 <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1ae70:	84 eb       	ldi	r24, 0xB4	; 180
   1ae72:	97 e3       	ldi	r25, 0x37	; 55
   1ae74:	a0 e0       	ldi	r26, 0x00	; 0
   1ae76:	ed b7       	in	r30, 0x3d	; 61
   1ae78:	fe b7       	in	r31, 0x3e	; 62
   1ae7a:	81 83       	std	Z+1, r24	; 0x01
   1ae7c:	92 83       	std	Z+2, r25	; 0x02
   1ae7e:	a3 83       	std	Z+3, r26	; 0x03
   1ae80:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1ae84:	01 c1       	rjmp	.+514    	; 0x1b088 <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1ae86:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1ae8a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1ae8e:	92 ff       	sbrs	r25, 2
   1ae90:	10 c0       	rjmp	.+32     	; 0x1aeb2 <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1ae92:	ed b7       	in	r30, 0x3d	; 61
   1ae94:	fe b7       	in	r31, 0x3e	; 62
   1ae96:	f1 86       	std	Z+9, r15	; 0x09
   1ae98:	e0 86       	std	Z+8, r14	; 0x08
   1ae9a:	37 82       	std	Z+7, r3	; 0x07
   1ae9c:	26 82       	std	Z+6, r2	; 0x06
   1ae9e:	d5 82       	std	Z+5, r13	; 0x05
   1aea0:	c4 82       	std	Z+4, r12	; 0x04
   1aea2:	85 e8       	ldi	r24, 0x85	; 133
   1aea4:	97 e3       	ldi	r25, 0x37	; 55
   1aea6:	a0 e0       	ldi	r26, 0x00	; 0
   1aea8:	81 83       	std	Z+1, r24	; 0x01
   1aeaa:	92 83       	std	Z+2, r25	; 0x02
   1aeac:	a3 83       	std	Z+3, r26	; 0x03
   1aeae:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            lifimagename, lifname, userfile);

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1aeb2:	97 01       	movw	r18, r14
   1aeb4:	40 e0       	ldi	r20, 0x00	; 0
   1aeb6:	50 e0       	ldi	r21, 0x00	; 0
   1aeb8:	ba 01       	movw	r22, r20
   1aeba:	80 e0       	ldi	r24, 0x00	; 0
   1aebc:	90 e0       	ldi	r25, 0x00	; 0
   1aebe:	a8 de       	rcall	.-688    	; 0x1ac10 <lif_add_ascii_file_as_e010_wrapper>
   1aec0:	4b 01       	movw	r8, r22
   1aec2:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1aec4:	47 2e       	mov	r4, r23
   1aec6:	58 2e       	mov	r5, r24
   1aec8:	69 2e       	mov	r6, r25
   1aeca:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1aecc:	66 23       	and	r22, r22
   1aece:	29 f0       	breq	.+10     	; 0x1aeda <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1aed0:	ff ef       	ldi	r31, 0xFF	; 255
   1aed2:	4f 1a       	sub	r4, r31
   1aed4:	5f 0a       	sbc	r5, r31
   1aed6:	6f 0a       	sbc	r6, r31
   1aed8:	7f 0a       	sbc	r7, r31

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1aeda:	6f ee       	ldi	r22, 0xEF	; 239
   1aedc:	78 e0       	ldi	r23, 0x08	; 8
   1aede:	c6 01       	movw	r24, r12
   1aee0:	49 da       	rcall	.-2926   	; 0x1a374 <lif_open_volume>
   1aee2:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1aee4:	00 97       	sbiw	r24, 0x00	; 0
   1aee6:	09 f4       	brne	.+2      	; 0x1aeea <lif_add_ascii_file_as_e010+0xca>
   1aee8:	cf c0       	rjmp	.+414    	; 0x1b088 <lif_add_ascii_file_as_e010+0x268>
        return(-1);

// Now find free record
    index = lif_newdir(LIF, sectors);
   1aeea:	b3 01       	movw	r22, r6
   1aeec:	a2 01       	movw	r20, r4
   1aeee:	e2 d8       	rcall	.-3644   	; 0x1a0b4 <lif_newdir>
   1aef0:	3c 01       	movw	r6, r24
    if(index == -1)
   1aef2:	8f ef       	ldi	r24, 0xFF	; 255
   1aef4:	68 16       	cp	r6, r24
   1aef6:	78 06       	cpc	r7, r24
   1aef8:	79 f4       	brne	.+30     	; 0x1af18 <lif_add_ascii_file_as_e010+0xf8>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1aefa:	ed b7       	in	r30, 0x3d	; 61
   1aefc:	fe b7       	in	r31, 0x3e	; 62
   1aefe:	f7 82       	std	Z+7, r15	; 0x07
   1af00:	e6 82       	std	Z+6, r14	; 0x06
   1af02:	d5 82       	std	Z+5, r13	; 0x05
   1af04:	c4 82       	std	Z+4, r12	; 0x04
   1af06:	85 e5       	ldi	r24, 0x55	; 85
   1af08:	97 e3       	ldi	r25, 0x37	; 55
   1af0a:	a0 e0       	ldi	r26, 0x00	; 0
   1af0c:	81 83       	std	Z+1, r24	; 0x01
   1af0e:	92 83       	std	Z+2, r25	; 0x02
   1af10:	a3 83       	std	Z+3, r26	; 0x03
   1af12:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1af16:	a0 c0       	rjmp	.+320    	; 0x1b058 <lif_add_ascii_file_as_e010+0x238>
        lif_closedir(LIF);
        return(-1);
    }

// Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1af18:	68 01       	movw	r12, r16
   1af1a:	ff e4       	ldi	r31, 0x4F	; 79
   1af1c:	cf 0e       	add	r12, r31
   1af1e:	d1 1c       	adc	r13, r1
   1af20:	4a e0       	ldi	r20, 0x0A	; 10
   1af22:	50 e0       	ldi	r21, 0x00	; 0
   1af24:	b1 01       	movw	r22, r2
   1af26:	c6 01       	movw	r24, r12
   1af28:	0e 94 86 c3 	call	0x1870c	; 0x1870c <lif_fixname>
    LIF->DIR.FileType = 0xe010;                   // 10
   1af2c:	80 e1       	ldi	r24, 0x10	; 16
   1af2e:	90 ee       	ldi	r25, 0xE0	; 224
   1af30:	f8 01       	movw	r30, r16
   1af32:	e6 5a       	subi	r30, 0xA6	; 166
   1af34:	ff 4f       	sbci	r31, 0xFF	; 255
   1af36:	91 83       	std	Z+1, r25	; 0x01
   1af38:	80 83       	st	Z, r24
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1af3a:	ea ad       	ldd	r30, Y+58	; 0x3a
   1af3c:	fb ad       	ldd	r31, Y+59	; 0x3b
   1af3e:	60 a5       	ldd	r22, Z+40	; 0x28
   1af40:	71 a5       	ldd	r23, Z+41	; 0x29
   1af42:	82 a5       	ldd	r24, Z+42	; 0x2a
   1af44:	93 a5       	ldd	r25, Z+43	; 0x2b
   1af46:	a8 01       	movw	r20, r16
   1af48:	4c 59       	subi	r20, 0x9C	; 156
   1af4a:	5f 4f       	sbci	r21, 0xFF	; 255
   1af4c:	0e 94 ab c5 	call	0x18b56	; 0x18b56 <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;                  // 26
   1af50:	81 e0       	ldi	r24, 0x01	; 1
   1af52:	90 e8       	ldi	r25, 0x80	; 128
   1af54:	f8 01       	movw	r30, r16
   1af56:	e6 59       	subi	r30, 0x96	; 150
   1af58:	ff 4f       	sbci	r31, 0xFF	; 255
   1af5a:	91 83       	std	Z+1, r25	; 0x01
   1af5c:	80 83       	st	Z, r24
    LIF->DIR.FileBytes = bytes;                   // 28
   1af5e:	32 96       	adiw	r30, 0x02	; 2
   1af60:	91 82       	std	Z+1, r9	; 0x01
   1af62:	80 82       	st	Z, r8
    LIF->DIR.SectorSize  = 0x100;                 // 30
   1af64:	80 e0       	ldi	r24, 0x00	; 0
   1af66:	91 e0       	ldi	r25, 0x01	; 1
   1af68:	32 96       	adiw	r30, 0x02	; 2
   1af6a:	91 83       	std	Z+1, r25	; 0x01
   1af6c:	80 83       	st	Z, r24
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1af6e:	58 01       	movw	r10, r16
   1af70:	fc e5       	ldi	r31, 0x5C	; 92
   1af72:	af 0e       	add	r10, r31
   1af74:	b1 1c       	adc	r11, r1
   1af76:	f5 01       	movw	r30, r10
   1af78:	80 81       	ld	r24, Z
   1af7a:	91 81       	ldd	r25, Z+1	; 0x01
   1af7c:	a2 81       	ldd	r26, Z+2	; 0x02
   1af7e:	b3 81       	ldd	r27, Z+3	; 0x03
   1af80:	22 24       	eor	r2, r2
   1af82:	38 2e       	mov	r3, r24
   1af84:	49 2e       	mov	r4, r25
   1af86:	5a 2e       	mov	r5, r26

    if(debuglevel & LIF_DEBUG)
   1af88:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1af8c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1af90:	92 ff       	sbrs	r25, 2
   1af92:	05 c0       	rjmp	.+10     	; 0x1af9e <lif_add_ascii_file_as_e010+0x17e>
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1af94:	65 e4       	ldi	r22, 0x45	; 69
   1af96:	76 e1       	ldi	r23, 0x16	; 22
   1af98:	c8 01       	movw	r24, r16
   1af9a:	0e 94 97 c6 	call	0x18d2e	; 0x18d2e <lif_dump_vol>

// Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1af9e:	97 01       	movw	r18, r14
   1afa0:	b2 01       	movw	r22, r4
   1afa2:	a1 01       	movw	r20, r2
   1afa4:	c8 01       	movw	r24, r16
   1afa6:	34 de       	rcall	.-920    	; 0x1ac10 <lif_add_ascii_file_as_e010_wrapper>
   1afa8:	4b 01       	movw	r8, r22
   1afaa:	7c 01       	movw	r14, r24

    if(debuglevel & LIF_DEBUG)
   1afac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1afb0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1afb4:	92 ff       	sbrs	r25, 2
   1afb6:	4a c0       	rjmp	.+148    	; 0x1b04c <lif_add_ascii_file_as_e010+0x22c>
    {
        printf("New Directory Information AFTER write\n");
   1afb8:	8e e2       	ldi	r24, 0x2E	; 46
   1afba:	97 e3       	ldi	r25, 0x37	; 55
   1afbc:	a0 e0       	ldi	r26, 0x00	; 0
   1afbe:	ed b7       	in	r30, 0x3d	; 61
   1afc0:	fe b7       	in	r31, 0x3e	; 62
   1afc2:	81 83       	std	Z+1, r24	; 0x01
   1afc4:	92 83       	std	Z+2, r25	; 0x02
   1afc6:	a3 83       	std	Z+3, r26	; 0x03
   1afc8:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1afcc:	ed b7       	in	r30, 0x3d	; 61
   1afce:	fe b7       	in	r31, 0x3e	; 62
   1afd0:	d5 82       	std	Z+5, r13	; 0x05
   1afd2:	c4 82       	std	Z+4, r12	; 0x04
   1afd4:	87 e1       	ldi	r24, 0x17	; 23
   1afd6:	97 e3       	ldi	r25, 0x37	; 55
   1afd8:	a0 e0       	ldi	r26, 0x00	; 0
   1afda:	81 83       	std	Z+1, r24	; 0x01
   1afdc:	92 83       	std	Z+2, r25	; 0x02
   1afde:	a3 83       	std	Z+3, r26	; 0x03
   1afe0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1afe4:	ed b7       	in	r30, 0x3d	; 61
   1afe6:	fe b7       	in	r31, 0x3e	; 62
   1afe8:	75 82       	std	Z+5, r7	; 0x05
   1afea:	64 82       	std	Z+4, r6	; 0x04
   1afec:	80 e0       	ldi	r24, 0x00	; 0
   1afee:	97 e3       	ldi	r25, 0x37	; 55
   1aff0:	a0 e0       	ldi	r26, 0x00	; 0
   1aff2:	81 83       	std	Z+1, r24	; 0x01
   1aff4:	92 83       	std	Z+2, r25	; 0x02
   1aff6:	a3 83       	std	Z+3, r26	; 0x03
   1aff8:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1affc:	f5 01       	movw	r30, r10
   1affe:	80 81       	ld	r24, Z
   1b000:	91 81       	ldd	r25, Z+1	; 0x01
   1b002:	a2 81       	ldd	r26, Z+2	; 0x02
   1b004:	b3 81       	ldd	r27, Z+3	; 0x03
   1b006:	ed b7       	in	r30, 0x3d	; 61
   1b008:	fe b7       	in	r31, 0x3e	; 62
   1b00a:	84 83       	std	Z+4, r24	; 0x04
   1b00c:	95 83       	std	Z+5, r25	; 0x05
   1b00e:	a6 83       	std	Z+6, r26	; 0x06
   1b010:	b7 83       	std	Z+7, r27	; 0x07
   1b012:	87 ee       	ldi	r24, 0xE7	; 231
   1b014:	96 e3       	ldi	r25, 0x36	; 54
   1b016:	a0 e0       	ldi	r26, 0x00	; 0
   1b018:	81 83       	std	Z+1, r24	; 0x01
   1b01a:	92 83       	std	Z+2, r25	; 0x02
   1b01c:	a3 83       	std	Z+3, r26	; 0x03
   1b01e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1b022:	f8 01       	movw	r30, r16
   1b024:	e0 5a       	subi	r30, 0xA0	; 160
   1b026:	ff 4f       	sbci	r31, 0xFF	; 255
   1b028:	80 81       	ld	r24, Z
   1b02a:	91 81       	ldd	r25, Z+1	; 0x01
   1b02c:	a2 81       	ldd	r26, Z+2	; 0x02
   1b02e:	b3 81       	ldd	r27, Z+3	; 0x03
   1b030:	ed b7       	in	r30, 0x3d	; 61
   1b032:	fe b7       	in	r31, 0x3e	; 62
   1b034:	84 83       	std	Z+4, r24	; 0x04
   1b036:	95 83       	std	Z+5, r25	; 0x05
   1b038:	a6 83       	std	Z+6, r26	; 0x06
   1b03a:	b7 83       	std	Z+7, r27	; 0x07
   1b03c:	8e ec       	ldi	r24, 0xCE	; 206
   1b03e:	96 e3       	ldi	r25, 0x36	; 54
   1b040:	a0 e0       	ldi	r26, 0x00	; 0
   1b042:	81 83       	std	Z+1, r24	; 0x01
   1b044:	92 83       	std	Z+2, r25	; 0x02
   1b046:	a3 83       	std	Z+3, r26	; 0x03
   1b048:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    }

// Write directory record
// Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1b04c:	b3 01       	movw	r22, r6
   1b04e:	c8 01       	movw	r24, r16
   1b050:	0e 94 f2 cb 	call	0x197e4	; 0x197e4 <lif_writedirindex>
   1b054:	89 2b       	or	r24, r25
   1b056:	21 f4       	brne	.+8      	; 0x1b060 <lif_add_ascii_file_as_e010+0x240>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b058:	c8 01       	movw	r24, r16
   1b05a:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_close_volume>
   1b05e:	14 c0       	rjmp	.+40     	; 0x1b088 <lif_add_ascii_file_as_e010+0x268>
   1b060:	c8 01       	movw	r24, r16
   1b062:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1b066:	ed b7       	in	r30, 0x3d	; 61
   1b068:	fe b7       	in	r31, 0x3e	; 62
   1b06a:	84 82       	std	Z+4, r8	; 0x04
   1b06c:	95 82       	std	Z+5, r9	; 0x05
   1b06e:	e6 82       	std	Z+6, r14	; 0x06
   1b070:	f7 82       	std	Z+7, r15	; 0x07
   1b072:	80 ec       	ldi	r24, 0xC0	; 192
   1b074:	96 e3       	ldi	r25, 0x36	; 54
   1b076:	a0 e0       	ldi	r26, 0x00	; 0
   1b078:	81 83       	std	Z+1, r24	; 0x01
   1b07a:	92 83       	std	Z+2, r25	; 0x02
   1b07c:	a3 83       	std	Z+3, r26	; 0x03
   1b07e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

// Return file size
    return(bytes);
   1b082:	b4 01       	movw	r22, r8
   1b084:	c7 01       	movw	r24, r14
   1b086:	04 c0       	rjmp	.+8      	; 0x1b090 <lif_add_ascii_file_as_e010+0x270>
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1);
   1b088:	6f ef       	ldi	r22, 0xFF	; 255
   1b08a:	7f ef       	ldi	r23, 0xFF	; 255
   1b08c:	8f ef       	ldi	r24, 0xFF	; 255
   1b08e:	9f ef       	ldi	r25, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

// Return file size
    return(bytes);
}
   1b090:	eb 96       	adiw	r28, 0x3b	; 59
   1b092:	e2 e1       	ldi	r30, 0x12	; 18
   1b094:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

0001b098 <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1b098:	a7 e3       	ldi	r26, 0x37	; 55
   1b09a:	b2 e0       	ldi	r27, 0x02	; 2
   1b09c:	e2 e5       	ldi	r30, 0x52	; 82
   1b09e:	f8 ed       	ldi	r31, 0xD8	; 216
   1b0a0:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
   1b0a4:	7c 01       	movw	r14, r24
   1b0a6:	8b 01       	movw	r16, r22
   1b0a8:	ca 5d       	subi	r28, 0xDA	; 218
   1b0aa:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0ac:	59 83       	std	Y+1, r21	; 0x01
   1b0ae:	48 83       	st	Y, r20
   1b0b0:	c6 52       	subi	r28, 0x26	; 38
   1b0b2:	d2 40       	sbci	r29, 0x02	; 2
// read buffer
    uint8_t buf[LIF_SECTOR_SIZE+4];
// Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1b0b4:	62 e4       	ldi	r22, 0x42	; 66
   1b0b6:	73 e0       	ldi	r23, 0x03	; 3
   1b0b8:	5d d9       	rcall	.-3398   	; 0x1a374 <lif_open_volume>
   1b0ba:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1b0bc:	00 97       	sbiw	r24, 0x00	; 0
   1b0be:	69 f4       	brne	.+26     	; 0x1b0da <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b0c0:	ed b7       	in	r30, 0x3d	; 61
   1b0c2:	fe b7       	in	r31, 0x3e	; 62
   1b0c4:	f5 82       	std	Z+5, r15	; 0x05
   1b0c6:	e4 82       	std	Z+4, r14	; 0x04
   1b0c8:	88 ea       	ldi	r24, 0xA8	; 168
   1b0ca:	96 e3       	ldi	r25, 0x36	; 54
   1b0cc:	a0 e0       	ldi	r26, 0x00	; 0
   1b0ce:	81 83       	std	Z+1, r24	; 0x01
   1b0d0:	92 83       	std	Z+2, r25	; 0x02
   1b0d2:	a3 83       	std	Z+3, r26	; 0x03
   1b0d4:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1b0d8:	13 c0       	rjmp	.+38     	; 0x1b100 <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b0da:	b8 01       	movw	r22, r16
   1b0dc:	20 dc       	rcall	.-1984   	; 0x1a91e <lif_find_file>
    if(index == -1)
   1b0de:	01 96       	adiw	r24, 0x01	; 1
   1b0e0:	91 f4       	brne	.+36     	; 0x1b106 <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1b0e2:	ed b7       	in	r30, 0x3d	; 61
   1b0e4:	fe b7       	in	r31, 0x3e	; 62
   1b0e6:	15 83       	std	Z+5, r17	; 0x05
   1b0e8:	04 83       	std	Z+4, r16	; 0x04
   1b0ea:	81 e9       	ldi	r24, 0x91	; 145
   1b0ec:	96 e3       	ldi	r25, 0x36	; 54
   1b0ee:	a0 e0       	ldi	r26, 0x00	; 0
   1b0f0:	81 83       	std	Z+1, r24	; 0x01
   1b0f2:	92 83       	std	Z+2, r25	; 0x02
   1b0f4:	a3 83       	std	Z+3, r26	; 0x03
   1b0f6:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b0fa:	c6 01       	movw	r24, r12
   1b0fc:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b100:	80 e0       	ldi	r24, 0x00	; 0
   1b102:	90 e0       	ldi	r25, 0x00	; 0
   1b104:	73 c2       	rjmp	.+1254   	; 0x1b5ec <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1b106:	f6 01       	movw	r30, r12
   1b108:	e6 5a       	subi	r30, 0xA6	; 166
   1b10a:	ff 4f       	sbci	r31, 0xFF	; 255
   1b10c:	80 81       	ld	r24, Z
   1b10e:	91 81       	ldd	r25, Z+1	; 0x01
   1b110:	9c 01       	movw	r18, r24
   1b112:	2c 7f       	andi	r18, 0xFC	; 252
   1b114:	20 31       	cpi	r18, 0x10	; 16
   1b116:	30 4e       	sbci	r19, 0xE0	; 224
   1b118:	a9 f0       	breq	.+42     	; 0x1b144 <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1b11a:	ed b7       	in	r30, 0x3d	; 61
   1b11c:	fe b7       	in	r31, 0x3e	; 62
   1b11e:	97 83       	std	Z+7, r25	; 0x07
   1b120:	86 83       	std	Z+6, r24	; 0x06
   1b122:	ca 5d       	subi	r28, 0xDA	; 218
   1b124:	dd 4f       	sbci	r29, 0xFD	; 253
   1b126:	28 81       	ld	r18, Y
   1b128:	39 81       	ldd	r19, Y+1	; 0x01
   1b12a:	c6 52       	subi	r28, 0x26	; 38
   1b12c:	d2 40       	sbci	r29, 0x02	; 2
   1b12e:	35 83       	std	Z+5, r19	; 0x05
   1b130:	24 83       	std	Z+4, r18	; 0x04
   1b132:	89 e5       	ldi	r24, 0x59	; 89
   1b134:	96 e3       	ldi	r25, 0x36	; 54
   1b136:	a0 e0       	ldi	r26, 0x00	; 0
   1b138:	81 83       	std	Z+1, r24	; 0x01
   1b13a:	92 83       	std	Z+2, r25	; 0x02
   1b13c:	a3 83       	std	Z+3, r26	; 0x03
   1b13e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1b142:	db cf       	rjmp	.-74     	; 0x1b0fa <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1b144:	f6 01       	movw	r30, r12
   1b146:	e4 5a       	subi	r30, 0xA4	; 164
   1b148:	ff 4f       	sbci	r31, 0xFF	; 255
   1b14a:	80 80       	ld	r8, Z
   1b14c:	91 80       	ldd	r9, Z+1	; 0x01
   1b14e:	a2 80       	ldd	r10, Z+2	; 0x02
   1b150:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1b152:	34 96       	adiw	r30, 0x04	; 4
   1b154:	80 81       	ld	r24, Z
   1b156:	91 81       	ldd	r25, Z+1	; 0x01
   1b158:	a2 81       	ldd	r26, Z+2	; 0x02
   1b15a:	b3 81       	ldd	r27, Z+3	; 0x03
   1b15c:	a5 01       	movw	r20, r10
   1b15e:	94 01       	movw	r18, r8
   1b160:	28 0f       	add	r18, r24
   1b162:	39 1f       	adc	r19, r25
   1b164:	4a 1f       	adc	r20, r26
   1b166:	5b 1f       	adc	r21, r27
   1b168:	c4 5d       	subi	r28, 0xD4	; 212
   1b16a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b16c:	28 83       	st	Y, r18
   1b16e:	39 83       	std	Y+1, r19	; 0x01
   1b170:	4a 83       	std	Y+2, r20	; 0x02
   1b172:	5b 83       	std	Y+3, r21	; 0x03
   1b174:	cc 52       	subi	r28, 0x2C	; 44
   1b176:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1b178:	c6 01       	movw	r24, r12
   1b17a:	8c 59       	subi	r24, 0x9C	; 156
   1b17c:	9f 4f       	sbci	r25, 0xFF	; 255
   1b17e:	0e 94 ed c5 	call	0x18bda	; 0x18bda <lif_lifbcd2time>
   1b182:	c8 5d       	subi	r28, 0xD8	; 216
   1b184:	dd 4f       	sbci	r29, 0xFD	; 253
   1b186:	68 83       	st	Y, r22
   1b188:	79 83       	std	Y+1, r23	; 0x01
   1b18a:	8a 83       	std	Y+2, r24	; 0x02
   1b18c:	9b 83       	std	Y+3, r25	; 0x03
   1b18e:	c8 52       	subi	r28, 0x28	; 40
   1b190:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1b192:	ba 2d       	mov	r27, r10
   1b194:	a9 2d       	mov	r26, r9
   1b196:	98 2d       	mov	r25, r8
   1b198:	88 27       	eor	r24, r24
   1b19a:	c2 5e       	subi	r28, 0xE2	; 226
   1b19c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b19e:	88 83       	st	Y, r24
   1b1a0:	99 83       	std	Y+1, r25	; 0x01
   1b1a2:	aa 83       	std	Y+2, r26	; 0x02
   1b1a4:	bb 83       	std	Y+3, r27	; 0x03
   1b1a6:	ce 51       	subi	r28, 0x1E	; 30
   1b1a8:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1b1aa:	6a ef       	ldi	r22, 0xFA	; 250
   1b1ac:	78 e0       	ldi	r23, 0x08	; 8
   1b1ae:	ca 5d       	subi	r28, 0xDA	; 218
   1b1b0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1b2:	88 81       	ld	r24, Y
   1b1b4:	99 81       	ldd	r25, Y+1	; 0x01
   1b1b6:	c6 52       	subi	r28, 0x26	; 38
   1b1b8:	d2 40       	sbci	r29, 0x02	; 2
   1b1ba:	0e 94 ad c1 	call	0x1835a	; 0x1835a <lif_open>
   1b1be:	cc 5d       	subi	r28, 0xDC	; 220
   1b1c0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1c2:	99 83       	std	Y+1, r25	; 0x01
   1b1c4:	88 83       	st	Y, r24
   1b1c6:	c4 52       	subi	r28, 0x24	; 36
   1b1c8:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1b1ca:	89 2b       	or	r24, r25
   1b1cc:	09 f4       	brne	.+2      	; 0x1b1d0 <lif_extract_e010_as_ascii+0x138>
   1b1ce:	95 cf       	rjmp	.-214    	; 0x1b0fa <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1b1d0:	ca 5d       	subi	r28, 0xDA	; 218
   1b1d2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1d4:	28 81       	ld	r18, Y
   1b1d6:	39 81       	ldd	r19, Y+1	; 0x01
   1b1d8:	c6 52       	subi	r28, 0x26	; 38
   1b1da:	d2 40       	sbci	r29, 0x02	; 2
   1b1dc:	ed b7       	in	r30, 0x3d	; 61
   1b1de:	fe b7       	in	r31, 0x3e	; 62
   1b1e0:	35 83       	std	Z+5, r19	; 0x05
   1b1e2:	24 83       	std	Z+4, r18	; 0x04
   1b1e4:	89 e4       	ldi	r24, 0x49	; 73
   1b1e6:	96 e3       	ldi	r25, 0x36	; 54
   1b1e8:	a0 e0       	ldi	r26, 0x00	; 0
   1b1ea:	81 83       	std	Z+1, r24	; 0x01
   1b1ec:	92 83       	std	Z+2, r25	; 0x02
   1b1ee:	a3 83       	std	Z+3, r26	; 0x03
   1b1f0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

    bytes = 0;
    wind = 0;
   1b1f4:	21 2c       	mov	r2, r1
   1b1f6:	31 2c       	mov	r3, r1
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1b1f8:	ce 5d       	subi	r28, 0xDE	; 222
   1b1fa:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1fc:	19 82       	std	Y+1, r1	; 0x01
   1b1fe:	18 82       	st	Y, r1
   1b200:	c2 52       	subi	r28, 0x22	; 34
   1b202:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
   1b204:	ee 24       	eor	r14, r14
   1b206:	e3 94       	inc	r14
   1b208:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1b20a:	41 2c       	mov	r4, r1
   1b20c:	51 2c       	mov	r5, r1
   1b20e:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1b210:	88 e8       	ldi	r24, 0x88	; 136
   1b212:	95 e3       	ldi	r25, 0x35	; 53
   1b214:	9c 01       	movw	r18, r24
   1b216:	40 e0       	ldi	r20, 0x00	; 0
   1b218:	ce 5c       	subi	r28, 0xCE	; 206
   1b21a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b21c:	28 83       	st	Y, r18
   1b21e:	39 83       	std	Y+1, r19	; 0x01
   1b220:	4a 83       	std	Y+2, r20	; 0x02
   1b222:	c2 53       	subi	r28, 0x32	; 50
   1b224:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b226:	86 e9       	ldi	r24, 0x96	; 150
   1b228:	95 e3       	ldi	r25, 0x35	; 53
   1b22a:	9c 01       	movw	r18, r24
   1b22c:	40 e0       	ldi	r20, 0x00	; 0
   1b22e:	cb 5c       	subi	r28, 0xCB	; 203
   1b230:	dd 4f       	sbci	r29, 0xFD	; 253
   1b232:	28 83       	st	Y, r18
   1b234:	39 83       	std	Y+1, r19	; 0x01
   1b236:	4a 83       	std	Y+2, r20	; 0x02
   1b238:	c5 53       	subi	r28, 0x35	; 53
   1b23a:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1b23c:	c2 5e       	subi	r28, 0xE2	; 226
   1b23e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b240:	28 81       	ld	r18, Y
   1b242:	39 81       	ldd	r19, Y+1	; 0x01
   1b244:	4a 81       	ldd	r20, Y+2	; 0x02
   1b246:	5b 81       	ldd	r21, Y+3	; 0x03
   1b248:	ce 51       	subi	r28, 0x1E	; 30
   1b24a:	d2 40       	sbci	r29, 0x02	; 2
   1b24c:	bb 27       	eor	r27, r27
   1b24e:	a5 2f       	mov	r26, r21
   1b250:	94 2f       	mov	r25, r20
   1b252:	83 2f       	mov	r24, r19
   1b254:	c4 5d       	subi	r28, 0xD4	; 212
   1b256:	dd 4f       	sbci	r29, 0xFD	; 253
   1b258:	28 81       	ld	r18, Y
   1b25a:	39 81       	ldd	r19, Y+1	; 0x01
   1b25c:	4a 81       	ldd	r20, Y+2	; 0x02
   1b25e:	5b 81       	ldd	r21, Y+3	; 0x03
   1b260:	cc 52       	subi	r28, 0x2C	; 44
   1b262:	d2 40       	sbci	r29, 0x02	; 2
   1b264:	28 17       	cp	r18, r24
   1b266:	39 07       	cpc	r19, r25
   1b268:	4a 07       	cpc	r20, r26
   1b26a:	5b 07       	cpc	r21, r27
   1b26c:	08 f4       	brcc	.+2      	; 0x1b270 <lif_extract_e010_as_ascii+0x1d8>
   1b26e:	51 c1       	rjmp	.+674    	; 0x1b512 <lif_extract_e010_as_ascii+0x47a>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b270:	00 e0       	ldi	r16, 0x00	; 0
   1b272:	11 e0       	ldi	r17, 0x01	; 1
   1b274:	c2 5e       	subi	r28, 0xE2	; 226
   1b276:	dd 4f       	sbci	r29, 0xFD	; 253
   1b278:	28 81       	ld	r18, Y
   1b27a:	39 81       	ldd	r19, Y+1	; 0x01
   1b27c:	4a 81       	ldd	r20, Y+2	; 0x02
   1b27e:	5b 81       	ldd	r21, Y+3	; 0x03
   1b280:	ce 51       	subi	r28, 0x1E	; 30
   1b282:	d2 40       	sbci	r29, 0x02	; 2
   1b284:	be 01       	movw	r22, r28
   1b286:	60 5f       	subi	r22, 0xF0	; 240
   1b288:	7e 4f       	sbci	r23, 0xFE	; 254
   1b28a:	c6 01       	movw	r24, r12
   1b28c:	0e 94 31 c2 	call	0x18462	; 0x18462 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b290:	6f 3f       	cpi	r22, 0xFF	; 255
   1b292:	71 05       	cpc	r23, r1
   1b294:	09 f0       	breq	.+2      	; 0x1b298 <lif_extract_e010_as_ascii+0x200>
   1b296:	0c f4       	brge	.+2      	; 0x1b29a <lif_extract_e010_as_ascii+0x202>
   1b298:	3a c1       	rjmp	.+628    	; 0x1b50e <lif_extract_e010_as_ascii+0x476>
   1b29a:	00 e0       	ldi	r16, 0x00	; 0
   1b29c:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b29e:	ce 5d       	subi	r28, 0xDE	; 222
   1b2a0:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2a2:	88 81       	ld	r24, Y
   1b2a4:	99 81       	ldd	r25, Y+1	; 0x01
   1b2a6:	c2 52       	subi	r28, 0x22	; 34
   1b2a8:	d2 40       	sbci	r29, 0x02	; 2
   1b2aa:	89 2b       	or	r24, r25
   1b2ac:	09 f0       	breq	.+2      	; 0x1b2b0 <lif_extract_e010_as_ascii+0x218>
   1b2ae:	1b c1       	rjmp	.+566    	; 0x1b4e6 <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1b2b0:	e0 e1       	ldi	r30, 0x10	; 16
   1b2b2:	f1 e0       	ldi	r31, 0x01	; 1
   1b2b4:	ec 0f       	add	r30, r28
   1b2b6:	fd 1f       	adc	r31, r29
   1b2b8:	e0 0f       	add	r30, r16
   1b2ba:	f1 1f       	adc	r31, r17
   1b2bc:	80 81       	ld	r24, Z
   1b2be:	98 2f       	mov	r25, r24
   1b2c0:	9f 7e       	andi	r25, 0xEF	; 239
   1b2c2:	9f 3c       	cpi	r25, 0xCF	; 207
   1b2c4:	11 f0       	breq	.+4      	; 0x1b2ca <lif_extract_e010_as_ascii+0x232>
   1b2c6:	8f 36       	cpi	r24, 0x6F	; 111
   1b2c8:	c9 f5       	brne	.+114    	; 0x1b33c <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1b2ca:	e0 e1       	ldi	r30, 0x10	; 16
   1b2cc:	f1 e0       	ldi	r31, 0x01	; 1
   1b2ce:	ec 0f       	add	r30, r28
   1b2d0:	fd 1f       	adc	r31, r29
   1b2d2:	e0 0f       	add	r30, r16
   1b2d4:	f1 1f       	adc	r31, r17
   1b2d6:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8);
   1b2d8:	f8 01       	movw	r30, r16
   1b2da:	32 96       	adiw	r30, 0x02	; 2
   1b2dc:	40 e1       	ldi	r20, 0x10	; 16
   1b2de:	51 e0       	ldi	r21, 0x01	; 1
   1b2e0:	4c 0f       	add	r20, r28
   1b2e2:	5d 1f       	adc	r21, r29
   1b2e4:	e4 0f       	add	r30, r20
   1b2e6:	f5 1f       	adc	r31, r21
   1b2e8:	0d 5f       	subi	r16, 0xFD	; 253
   1b2ea:	1f 4f       	sbci	r17, 0xFF	; 255
   1b2ec:	80 81       	ld	r24, Z
   1b2ee:	b1 2c       	mov	r11, r1
   1b2f0:	b8 2a       	or	r11, r24
// EOF ?
                if(len == 0)
   1b2f2:	a1 14       	cp	r10, r1
   1b2f4:	b1 04       	cpc	r11, r1
   1b2f6:	09 f4       	brne	.+2      	; 0x1b2fa <lif_extract_e010_as_ascii+0x262>
   1b2f8:	ee c0       	rjmp	.+476    	; 0x1b4d6 <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1b2fa:	5f ef       	ldi	r21, 0xFF	; 255
   1b2fc:	a5 16       	cp	r10, r21
   1b2fe:	b1 04       	cpc	r11, r1
   1b300:	09 f0       	breq	.+2      	; 0x1b304 <lif_extract_e010_as_ascii+0x26c>
   1b302:	7c f4       	brge	.+30     	; 0x1b322 <lif_extract_e010_as_ascii+0x28a>
   1b304:	c4 5e       	subi	r28, 0xE4	; 228
   1b306:	dd 4f       	sbci	r29, 0xFD	; 253
   1b308:	19 82       	std	Y+1, r1	; 0x01
   1b30a:	18 82       	st	Y, r1
   1b30c:	cc 51       	subi	r28, 0x1C	; 28
   1b30e:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1b310:	c5 01       	movw	r24, r10
   1b312:	01 97       	sbiw	r24, 0x01	; 1
   1b314:	c0 5d       	subi	r28, 0xD0	; 208
   1b316:	dd 4f       	sbci	r29, 0xFD	; 253
   1b318:	99 83       	std	Y+1, r25	; 0x01
   1b31a:	88 83       	st	Y, r24
   1b31c:	c0 53       	subi	r28, 0x30	; 48
   1b31e:	d2 40       	sbci	r29, 0x02	; 2
   1b320:	68 c0       	rjmp	.+208    	; 0x1b3f2 <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1b322:	ed b7       	in	r30, 0x3d	; 61
   1b324:	fe b7       	in	r31, 0x3e	; 62
   1b326:	b5 82       	std	Z+5, r11	; 0x05
   1b328:	a4 82       	std	Z+4, r10	; 0x04
   1b32a:	84 e1       	ldi	r24, 0x14	; 20
   1b32c:	96 e3       	ldi	r25, 0x36	; 54
   1b32e:	a0 e0       	ldi	r26, 0x00	; 0
   1b330:	81 83       	std	Z+1, r24	; 0x01
   1b332:	92 83       	std	Z+2, r25	; 0x02
   1b334:	a3 83       	std	Z+3, r26	; 0x03
   1b336:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1b33a:	1e c0       	rjmp	.+60     	; 0x1b378 <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1b33c:	8f 3e       	cpi	r24, 0xEF	; 239
   1b33e:	09 f4       	brne	.+2      	; 0x1b342 <lif_extract_e010_as_ascii+0x2aa>
   1b340:	d2 c0       	rjmp	.+420    	; 0x1b4e6 <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1b342:	ed b7       	in	r30, 0x3d	; 61
   1b344:	fe b7       	in	r31, 0x3e	; 62
   1b346:	13 87       	std	Z+11, r17	; 0x0b
   1b348:	02 87       	std	Z+10, r16	; 0x0a
   1b34a:	c2 5e       	subi	r28, 0xE2	; 226
   1b34c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b34e:	28 81       	ld	r18, Y
   1b350:	39 81       	ldd	r19, Y+1	; 0x01
   1b352:	4a 81       	ldd	r20, Y+2	; 0x02
   1b354:	5b 81       	ldd	r21, Y+3	; 0x03
   1b356:	ce 51       	subi	r28, 0x1E	; 30
   1b358:	d2 40       	sbci	r29, 0x02	; 2
   1b35a:	26 83       	std	Z+6, r18	; 0x06
   1b35c:	37 83       	std	Z+7, r19	; 0x07
   1b35e:	40 87       	std	Z+8, r20	; 0x08
   1b360:	51 87       	std	Z+9, r21	; 0x09
   1b362:	90 e0       	ldi	r25, 0x00	; 0
   1b364:	95 83       	std	Z+5, r25	; 0x05
   1b366:	84 83       	std	Z+4, r24	; 0x04
   1b368:	8e eb       	ldi	r24, 0xBE	; 190
   1b36a:	95 e3       	ldi	r25, 0x35	; 53
   1b36c:	a0 e0       	ldi	r26, 0x00	; 0
   1b36e:	81 83       	std	Z+1, r24	; 0x01
   1b370:	92 83       	std	Z+2, r25	; 0x02
   1b372:	a3 83       	std	Z+3, r26	; 0x03
   1b374:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
                status = 0;
                done = 1;
   1b378:	21 e0       	ldi	r18, 0x01	; 1
   1b37a:	30 e0       	ldi	r19, 0x00	; 0
   1b37c:	ce 5d       	subi	r28, 0xDE	; 222
   1b37e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b380:	39 83       	std	Y+1, r19	; 0x01
   1b382:	28 83       	st	Y, r18
   1b384:	c2 52       	subi	r28, 0x22	; 34
   1b386:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1b388:	e1 2c       	mov	r14, r1
   1b38a:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1b38c:	ac c0       	rjmp	.+344    	; 0x1b4e6 <lif_extract_e010_as_ascii+0x44e>
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b38e:	0f 3f       	cpi	r16, 0xFF	; 255
   1b390:	11 05       	cpc	r17, r1
   1b392:	11 f0       	breq	.+4      	; 0x1b398 <lif_extract_e010_as_ascii+0x300>
   1b394:	0c f0       	brlt	.+2      	; 0x1b398 <lif_extract_e010_as_ascii+0x300>
   1b396:	a7 c0       	rjmp	.+334    	; 0x1b4e6 <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b398:	e0 e1       	ldi	r30, 0x10	; 16
   1b39a:	f1 e0       	ldi	r31, 0x01	; 1
   1b39c:	ec 0f       	add	r30, r28
   1b39e:	fd 1f       	adc	r31, r29
   1b3a0:	e0 0f       	add	r30, r16
   1b3a2:	f1 1f       	adc	r31, r17
   1b3a4:	20 81       	ld	r18, Z
   1b3a6:	a1 01       	movw	r20, r2
   1b3a8:	4f 5f       	subi	r20, 0xFF	; 255
   1b3aa:	5f 4f       	sbci	r21, 0xFF	; 255
   1b3ac:	4a 01       	movw	r8, r20
   1b3ae:	2d 30       	cpi	r18, 0x0D	; 13
   1b3b0:	51 f1       	breq	.+84     	; 0x1b406 <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1b3b2:	98 2d       	mov	r25, r8
   1b3b4:	89 2d       	mov	r24, r9
   1b3b6:	0f 5f       	subi	r16, 0xFF	; 255
   1b3b8:	1f 4f       	sbci	r17, 0xFF	; 255
   1b3ba:	ec e0       	ldi	r30, 0x0C	; 12
   1b3bc:	f0 e0       	ldi	r31, 0x00	; 0
   1b3be:	ec 0f       	add	r30, r28
   1b3c0:	fd 1f       	adc	r31, r29
   1b3c2:	e2 0d       	add	r30, r2
   1b3c4:	f3 1d       	adc	r31, r3
   1b3c6:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1b3c8:	ef ef       	ldi	r30, 0xFF	; 255
   1b3ca:	8e 16       	cp	r8, r30
   1b3cc:	91 04       	cpc	r9, r1
   1b3ce:	09 f0       	breq	.+2      	; 0x1b3d2 <lif_extract_e010_as_ascii+0x33a>
   1b3d0:	ac f5       	brge	.+106    	; 0x1b43c <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b3d2:	c4 5e       	subi	r28, 0xE4	; 228
   1b3d4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3d6:	28 81       	ld	r18, Y
   1b3d8:	39 81       	ldd	r19, Y+1	; 0x01
   1b3da:	cc 51       	subi	r28, 0x1C	; 28
   1b3dc:	d2 40       	sbci	r29, 0x02	; 2
   1b3de:	2f 5f       	subi	r18, 0xFF	; 255
   1b3e0:	3f 4f       	sbci	r19, 0xFF	; 255
   1b3e2:	c4 5e       	subi	r28, 0xE4	; 228
   1b3e4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3e6:	39 83       	std	Y+1, r19	; 0x01
   1b3e8:	28 83       	st	Y, r18
   1b3ea:	cc 51       	subi	r28, 0x1C	; 28
   1b3ec:	d2 40       	sbci	r29, 0x02	; 2
   1b3ee:	29 2e       	mov	r2, r25
   1b3f0:	38 2e       	mov	r3, r24
   1b3f2:	c4 5e       	subi	r28, 0xE4	; 228
   1b3f4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3f6:	48 81       	ld	r20, Y
   1b3f8:	59 81       	ldd	r21, Y+1	; 0x01
   1b3fa:	cc 51       	subi	r28, 0x1C	; 28
   1b3fc:	d2 40       	sbci	r29, 0x02	; 2
   1b3fe:	4a 15       	cp	r20, r10
   1b400:	5b 05       	cpc	r21, r11
   1b402:	2c f2       	brlt	.-118    	; 0x1b38e <lif_extract_e010_as_ascii+0x2f6>
   1b404:	62 c0       	rjmp	.+196    	; 0x1b4ca <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b406:	c4 5e       	subi	r28, 0xE4	; 228
   1b408:	dd 4f       	sbci	r29, 0xFD	; 253
   1b40a:	88 81       	ld	r24, Y
   1b40c:	99 81       	ldd	r25, Y+1	; 0x01
   1b40e:	cc 51       	subi	r28, 0x1C	; 28
   1b410:	d2 40       	sbci	r29, 0x02	; 2
   1b412:	c0 5d       	subi	r28, 0xD0	; 208
   1b414:	dd 4f       	sbci	r29, 0xFD	; 253
   1b416:	a8 81       	ld	r26, Y
   1b418:	b9 81       	ldd	r27, Y+1	; 0x01
   1b41a:	c0 53       	subi	r28, 0x30	; 48
   1b41c:	d2 40       	sbci	r29, 0x02	; 2
   1b41e:	8a 17       	cp	r24, r26
   1b420:	9b 07       	cpc	r25, r27
   1b422:	39 f6       	brne	.-114    	; 0x1b3b2 <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1b424:	ec e0       	ldi	r30, 0x0C	; 12
   1b426:	f0 e0       	ldi	r31, 0x00	; 0
   1b428:	ec 0f       	add	r30, r28
   1b42a:	fd 1f       	adc	r31, r29
   1b42c:	e2 0d       	add	r30, r2
   1b42e:	f3 1d       	adc	r31, r3
   1b430:	ba e0       	ldi	r27, 0x0A	; 10
   1b432:	b0 83       	st	Z, r27
                    ++ind;
   1b434:	0f 5f       	subi	r16, 0xFF	; 255
   1b436:	1f 4f       	sbci	r17, 0xFF	; 255
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1b438:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1b43a:	47 c0       	rjmp	.+142    	; 0x1b4ca <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1b43c:	cc 5d       	subi	r28, 0xDC	; 220
   1b43e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b440:	28 81       	ld	r18, Y
   1b442:	39 81       	ldd	r19, Y+1	; 0x01
   1b444:	c4 52       	subi	r28, 0x24	; 36
   1b446:	d2 40       	sbci	r29, 0x02	; 2
   1b448:	a4 01       	movw	r20, r8
   1b44a:	61 e0       	ldi	r22, 0x01	; 1
   1b44c:	70 e0       	ldi	r23, 0x00	; 0
   1b44e:	ce 01       	movw	r24, r28
   1b450:	0c 96       	adiw	r24, 0x0c	; 12
   1b452:	0e 94 f1 7c 	call	0xf9e2	; 0xf9e2 <fwrite>
                    if(size < wind)
   1b456:	88 15       	cp	r24, r8
   1b458:	99 05       	cpc	r25, r9
   1b45a:	d4 f4       	brge	.+52     	; 0x1b490 <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b45c:	cb 5c       	subi	r28, 0xCB	; 203
   1b45e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b460:	28 81       	ld	r18, Y
   1b462:	39 81       	ldd	r19, Y+1	; 0x01
   1b464:	4a 81       	ldd	r20, Y+2	; 0x02
   1b466:	c5 53       	subi	r28, 0x35	; 53
   1b468:	d2 40       	sbci	r29, 0x02	; 2
   1b46a:	ed b7       	in	r30, 0x3d	; 61
   1b46c:	fe b7       	in	r31, 0x3e	; 62
   1b46e:	21 83       	std	Z+1, r18	; 0x01
   1b470:	32 83       	std	Z+2, r19	; 0x02
   1b472:	43 83       	std	Z+3, r20	; 0x03
   1b474:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1b478:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1b47a:	21 e0       	ldi	r18, 0x01	; 1
   1b47c:	30 e0       	ldi	r19, 0x00	; 0
   1b47e:	ce 5d       	subi	r28, 0xDE	; 222
   1b480:	dd 4f       	sbci	r29, 0xFD	; 253
   1b482:	39 83       	std	Y+1, r19	; 0x01
   1b484:	28 83       	st	Y, r18
   1b486:	c2 52       	subi	r28, 0x22	; 34
   1b488:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1b48a:	e1 2c       	mov	r14, r1
   1b48c:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1b48e:	1d c0       	rjmp	.+58     	; 0x1b4ca <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1b490:	09 2e       	mov	r0, r25
   1b492:	00 0c       	add	r0, r0
   1b494:	aa 0b       	sbc	r26, r26
   1b496:	bb 0b       	sbc	r27, r27
   1b498:	48 0e       	add	r4, r24
   1b49a:	59 1e       	adc	r5, r25
   1b49c:	6a 1e       	adc	r6, r26
   1b49e:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1b4a0:	ed b7       	in	r30, 0x3d	; 61
   1b4a2:	fe b7       	in	r31, 0x3e	; 62
   1b4a4:	44 82       	std	Z+4, r4	; 0x04
   1b4a6:	55 82       	std	Z+5, r5	; 0x05
   1b4a8:	66 82       	std	Z+6, r6	; 0x06
   1b4aa:	77 82       	std	Z+7, r7	; 0x07
   1b4ac:	ce 5c       	subi	r28, 0xCE	; 206
   1b4ae:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4b0:	28 81       	ld	r18, Y
   1b4b2:	39 81       	ldd	r19, Y+1	; 0x01
   1b4b4:	4a 81       	ldd	r20, Y+2	; 0x02
   1b4b6:	c2 53       	subi	r28, 0x32	; 50
   1b4b8:	d2 40       	sbci	r29, 0x02	; 2
   1b4ba:	21 83       	std	Z+1, r18	; 0x01
   1b4bc:	32 83       	std	Z+2, r19	; 0x02
   1b4be:	43 83       	std	Z+3, r20	; 0x03
   1b4c0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
                    wind = 0;
   1b4c4:	90 e0       	ldi	r25, 0x00	; 0
   1b4c6:	80 e0       	ldi	r24, 0x00	; 0
   1b4c8:	84 cf       	rjmp	.-248    	; 0x1b3d2 <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b4ca:	0f 3f       	cpi	r16, 0xFF	; 255
   1b4cc:	11 05       	cpc	r17, r1
   1b4ce:	09 f0       	breq	.+2      	; 0x1b4d2 <lif_extract_e010_as_ascii+0x43a>
   1b4d0:	0c f4       	brge	.+2      	; 0x1b4d4 <lif_extract_e010_as_ascii+0x43c>
   1b4d2:	e5 ce       	rjmp	.-566    	; 0x1b29e <lif_extract_e010_as_ascii+0x206>
   1b4d4:	08 c0       	rjmp	.+16     	; 0x1b4e6 <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8);
// EOF ?
                if(len == 0)
                {
                    done = 1;
   1b4d6:	a1 e0       	ldi	r26, 0x01	; 1
   1b4d8:	b0 e0       	ldi	r27, 0x00	; 0
   1b4da:	ce 5d       	subi	r28, 0xDE	; 222
   1b4dc:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4de:	b9 83       	std	Y+1, r27	; 0x01
   1b4e0:	a8 83       	st	Y, r26
   1b4e2:	c2 52       	subi	r28, 0x22	; 34
   1b4e4:	d2 40       	sbci	r29, 0x02	; 2

            }                                     // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }                                         // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1b4e6:	c2 5e       	subi	r28, 0xE2	; 226
   1b4e8:	dd 4f       	sbci	r29, 0xFD	; 253
   1b4ea:	28 81       	ld	r18, Y
   1b4ec:	39 81       	ldd	r19, Y+1	; 0x01
   1b4ee:	4a 81       	ldd	r20, Y+2	; 0x02
   1b4f0:	5b 81       	ldd	r21, Y+3	; 0x03
   1b4f2:	ce 51       	subi	r28, 0x1E	; 30
   1b4f4:	d2 40       	sbci	r29, 0x02	; 2
   1b4f6:	3f 5f       	subi	r19, 0xFF	; 255
   1b4f8:	4f 4f       	sbci	r20, 0xFF	; 255
   1b4fa:	5f 4f       	sbci	r21, 0xFF	; 255
   1b4fc:	c2 5e       	subi	r28, 0xE2	; 226
   1b4fe:	dd 4f       	sbci	r29, 0xFD	; 253
   1b500:	28 83       	st	Y, r18
   1b502:	39 83       	std	Y+1, r19	; 0x01
   1b504:	4a 83       	std	Y+2, r20	; 0x02
   1b506:	5b 83       	std	Y+3, r21	; 0x03
   1b508:	ce 51       	subi	r28, 0x1E	; 30
   1b50a:	d2 40       	sbci	r29, 0x02	; 2
   1b50c:	97 ce       	rjmp	.-722    	; 0x1b23c <lif_extract_e010_as_ascii+0x1a4>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1b50e:	e1 2c       	mov	r14, r1
   1b510:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b512:	c6 01       	movw	r24, r12
   1b514:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_close_volume>

    }                                             // while(offset <= end)

    lif_closedir(LIF);
// Flush any remaining bytes
    if(wind)
   1b518:	21 14       	cp	r2, r1
   1b51a:	31 04       	cpc	r3, r1
   1b51c:	31 f1       	breq	.+76     	; 0x1b56a <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1b51e:	cc 5d       	subi	r28, 0xDC	; 220
   1b520:	dd 4f       	sbci	r29, 0xFD	; 253
   1b522:	28 81       	ld	r18, Y
   1b524:	39 81       	ldd	r19, Y+1	; 0x01
   1b526:	c4 52       	subi	r28, 0x24	; 36
   1b528:	d2 40       	sbci	r29, 0x02	; 2
   1b52a:	a1 01       	movw	r20, r2
   1b52c:	61 e0       	ldi	r22, 0x01	; 1
   1b52e:	70 e0       	ldi	r23, 0x00	; 0
   1b530:	ce 01       	movw	r24, r28
   1b532:	0c 96       	adiw	r24, 0x0c	; 12
   1b534:	0e 94 f1 7c 	call	0xf9e2	; 0xf9e2 <fwrite>
   1b538:	8c 01       	movw	r16, r24
        if(size < wind)
   1b53a:	82 15       	cp	r24, r2
   1b53c:	93 05       	cpc	r25, r3
   1b53e:	64 f4       	brge	.+24     	; 0x1b558 <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1b540:	80 e6       	ldi	r24, 0x60	; 96
   1b542:	95 e3       	ldi	r25, 0x35	; 53
   1b544:	a0 e0       	ldi	r26, 0x00	; 0
   1b546:	ed b7       	in	r30, 0x3d	; 61
   1b548:	fe b7       	in	r31, 0x3e	; 62
   1b54a:	81 83       	std	Z+1, r24	; 0x01
   1b54c:	92 83       	std	Z+2, r25	; 0x02
   1b54e:	a3 83       	std	Z+3, r26	; 0x03
   1b550:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            status = 0;
   1b554:	e1 2c       	mov	r14, r1
   1b556:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1b558:	c8 01       	movw	r24, r16
   1b55a:	01 2e       	mov	r0, r17
   1b55c:	00 0c       	add	r0, r0
   1b55e:	aa 0b       	sbc	r26, r26
   1b560:	bb 0b       	sbc	r27, r27
   1b562:	48 0e       	add	r4, r24
   1b564:	59 1e       	adc	r5, r25
   1b566:	6a 1e       	adc	r6, r26
   1b568:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1b56a:	cc 5d       	subi	r28, 0xDC	; 220
   1b56c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b56e:	88 81       	ld	r24, Y
   1b570:	99 81       	ldd	r25, Y+1	; 0x01
   1b572:	c4 52       	subi	r28, 0x24	; 36
   1b574:	d2 40       	sbci	r29, 0x02	; 2
   1b576:	0e 94 73 7d 	call	0xfae6	; 0xfae6 <fclose>
    if(t)
   1b57a:	c8 5d       	subi	r28, 0xD8	; 216
   1b57c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b57e:	28 81       	ld	r18, Y
   1b580:	39 81       	ldd	r19, Y+1	; 0x01
   1b582:	4a 81       	ldd	r20, Y+2	; 0x02
   1b584:	5b 81       	ldd	r21, Y+3	; 0x03
   1b586:	c8 52       	subi	r28, 0x28	; 40
   1b588:	d2 40       	sbci	r29, 0x02	; 2
   1b58a:	21 15       	cp	r18, r1
   1b58c:	31 05       	cpc	r19, r1
   1b58e:	41 05       	cpc	r20, r1
   1b590:	51 05       	cpc	r21, r1
   1b592:	d9 f0       	breq	.+54     	; 0x1b5ca <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1b594:	c8 5e       	subi	r28, 0xE8	; 232
   1b596:	dd 4f       	sbci	r29, 0xFD	; 253
   1b598:	28 83       	st	Y, r18
   1b59a:	39 83       	std	Y+1, r19	; 0x01
   1b59c:	4a 83       	std	Y+2, r20	; 0x02
   1b59e:	5b 83       	std	Y+3, r21	; 0x03
   1b5a0:	c8 51       	subi	r28, 0x18	; 24
   1b5a2:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1b5a4:	cc 5e       	subi	r28, 0xEC	; 236
   1b5a6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b5a8:	28 83       	st	Y, r18
   1b5aa:	39 83       	std	Y+1, r19	; 0x01
   1b5ac:	4a 83       	std	Y+2, r20	; 0x02
   1b5ae:	5b 83       	std	Y+3, r21	; 0x03
   1b5b0:	c4 51       	subi	r28, 0x14	; 20
   1b5b2:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1b5b4:	be 01       	movw	r22, r28
   1b5b6:	6c 5e       	subi	r22, 0xEC	; 236
   1b5b8:	7d 4f       	sbci	r23, 0xFD	; 253
   1b5ba:	ca 5d       	subi	r28, 0xDA	; 218
   1b5bc:	dd 4f       	sbci	r29, 0xFD	; 253
   1b5be:	88 81       	ld	r24, Y
   1b5c0:	99 81       	ldd	r25, Y+1	; 0x01
   1b5c2:	c6 52       	subi	r28, 0x26	; 38
   1b5c4:	d2 40       	sbci	r29, 0x02	; 2
   1b5c6:	0e 94 b0 7a 	call	0xf560	; 0xf560 <utime>
    }
    sync();
   1b5ca:	0e 94 6e 7c 	call	0xf8dc	; 0xf8dc <sync>
    printf("\tWrote: %8ld\n", bytes);
   1b5ce:	ed b7       	in	r30, 0x3d	; 61
   1b5d0:	fe b7       	in	r31, 0x3e	; 62
   1b5d2:	44 82       	std	Z+4, r4	; 0x04
   1b5d4:	55 82       	std	Z+5, r5	; 0x05
   1b5d6:	66 82       	std	Z+6, r6	; 0x06
   1b5d8:	77 82       	std	Z+7, r7	; 0x07
   1b5da:	82 e5       	ldi	r24, 0x52	; 82
   1b5dc:	95 e3       	ldi	r25, 0x35	; 53
   1b5de:	a0 e0       	ldi	r26, 0x00	; 0
   1b5e0:	81 83       	std	Z+1, r24	; 0x01
   1b5e2:	92 83       	std	Z+2, r25	; 0x02
   1b5e4:	a3 83       	std	Z+3, r26	; 0x03
   1b5e6:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    return(status);
   1b5ea:	c7 01       	movw	r24, r14
}
   1b5ec:	c9 5c       	subi	r28, 0xC9	; 201
   1b5ee:	dd 4f       	sbci	r29, 0xFD	; 253
   1b5f0:	e2 e1       	ldi	r30, 0x12	; 18
   1b5f2:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

0001b5f6 <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1b5f6:	a4 e1       	ldi	r26, 0x14	; 20
   1b5f8:	b1 e0       	ldi	r27, 0x01	; 1
   1b5fa:	e1 e0       	ldi	r30, 0x01	; 1
   1b5fc:	fb ed       	ldi	r31, 0xDB	; 219
   1b5fe:	0c 94 93 e7 	jmp	0x1cf26	; 0x1cf26 <__prologue_saves__>
   1b602:	7c 01       	movw	r14, r24
   1b604:	8b 01       	movw	r16, r22
   1b606:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1b608:	62 e4       	ldi	r22, 0x42	; 66
   1b60a:	73 e0       	ldi	r23, 0x03	; 3
   1b60c:	0e 94 ba d1 	call	0x1a374	; 0x1a374 <lif_open_volume>
   1b610:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1b612:	00 97       	sbiw	r24, 0x00	; 0
   1b614:	69 f4       	brne	.+26     	; 0x1b630 <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b616:	ed b7       	in	r30, 0x3d	; 61
   1b618:	fe b7       	in	r31, 0x3e	; 62
   1b61a:	f5 82       	std	Z+5, r15	; 0x05
   1b61c:	e4 82       	std	Z+4, r14	; 0x04
   1b61e:	8a e3       	ldi	r24, 0x3A	; 58
   1b620:	95 e3       	ldi	r25, 0x35	; 53
   1b622:	a0 e0       	ldi	r26, 0x00	; 0
   1b624:	81 83       	std	Z+1, r24	; 0x01
   1b626:	92 83       	std	Z+2, r25	; 0x02
   1b628:	a3 83       	std	Z+3, r26	; 0x03
   1b62a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1b62e:	13 c0       	rjmp	.+38     	; 0x1b656 <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b630:	b8 01       	movw	r22, r16
   1b632:	75 d9       	rcall	.-3350   	; 0x1a91e <lif_find_file>
    if(index == -1)
   1b634:	01 96       	adiw	r24, 0x01	; 1
   1b636:	91 f4       	brne	.+36     	; 0x1b65c <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1b638:	ed b7       	in	r30, 0x3d	; 61
   1b63a:	fe b7       	in	r31, 0x3e	; 62
   1b63c:	15 83       	std	Z+5, r17	; 0x05
   1b63e:	04 83       	std	Z+4, r16	; 0x04
   1b640:	87 e2       	ldi	r24, 0x27	; 39
   1b642:	95 e3       	ldi	r25, 0x35	; 53
   1b644:	a0 e0       	ldi	r26, 0x00	; 0
   1b646:	81 83       	std	Z+1, r24	; 0x01
   1b648:	92 83       	std	Z+2, r25	; 0x02
   1b64a:	a3 83       	std	Z+3, r26	; 0x03
   1b64c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b650:	c4 01       	movw	r24, r8
   1b652:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b656:	00 e0       	ldi	r16, 0x00	; 0
   1b658:	10 e0       	ldi	r17, 0x00	; 0
   1b65a:	ff c0       	rjmp	.+510    	; 0x1b85a <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1b65c:	94 01       	movw	r18, r8
   1b65e:	20 5a       	subi	r18, 0xA0	; 160
   1b660:	3f 4f       	sbci	r19, 0xFF	; 255
   1b662:	c0 5f       	subi	r28, 0xF0	; 240
   1b664:	de 4f       	sbci	r29, 0xFE	; 254
   1b666:	39 83       	std	Y+1, r19	; 0x01
   1b668:	28 83       	st	Y, r18
   1b66a:	c0 51       	subi	r28, 0x10	; 16
   1b66c:	d1 40       	sbci	r29, 0x01	; 1

//Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1b66e:	f9 01       	movw	r30, r18
   1b670:	a0 80       	ld	r10, Z
   1b672:	b1 80       	ldd	r11, Z+1	; 0x01
   1b674:	0b 2c       	mov	r0, r11
   1b676:	00 0c       	add	r0, r0
   1b678:	cc 08       	sbc	r12, r12
   1b67a:	dd 08       	sbc	r13, r13
   1b67c:	e1 2c       	mov	r14, r1
   1b67e:	f1 2c       	mov	r15, r1
   1b680:	87 01       	movw	r16, r14
   1b682:	e3 94       	inc	r14
   1b684:	21 e0       	ldi	r18, 0x01	; 1
   1b686:	30 e0       	ldi	r19, 0x00	; 0
   1b688:	40 e0       	ldi	r20, 0x00	; 0
   1b68a:	50 e0       	ldi	r21, 0x00	; 0
   1b68c:	6a e5       	ldi	r22, 0x5A	; 90
   1b68e:	76 e1       	ldi	r23, 0x16	; 22
   1b690:	c3 01       	movw	r24, r6
   1b692:	0e 94 70 cd 	call	0x19ae0	; 0x19ae0 <lif_create_volume>
   1b696:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1b698:	89 2b       	or	r24, r25
   1b69a:	d1 f2       	breq	.-76     	; 0x1b650 <lif_extract_lif_as_lif+0x5a>
    }

// Only the start sector changes

// Copy directory record
    ULIF->DIR = LIF->DIR;
   1b69c:	81 e2       	ldi	r24, 0x21	; 33
   1b69e:	f4 01       	movw	r30, r8
   1b6a0:	e1 5b       	subi	r30, 0xB1	; 177
   1b6a2:	ff 4f       	sbci	r31, 0xFF	; 255
   1b6a4:	d7 01       	movw	r26, r14
   1b6a6:	a1 5b       	subi	r26, 0xB1	; 177
   1b6a8:	bf 4f       	sbci	r27, 0xFF	; 255
   1b6aa:	01 90       	ld	r0, Z+
   1b6ac:	0d 92       	st	X+, r0
   1b6ae:	8a 95       	dec	r24
   1b6b0:	e1 f7       	brne	.-8      	; 0x1b6aa <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1b6b2:	82 e0       	ldi	r24, 0x02	; 2
   1b6b4:	90 e0       	ldi	r25, 0x00	; 0
   1b6b6:	a0 e0       	ldi	r26, 0x00	; 0
   1b6b8:	b0 e0       	ldi	r27, 0x00	; 0
   1b6ba:	f7 01       	movw	r30, r14
   1b6bc:	e4 5a       	subi	r30, 0xA4	; 164
   1b6be:	ff 4f       	sbci	r31, 0xFF	; 255
   1b6c0:	80 83       	st	Z, r24
   1b6c2:	91 83       	std	Z+1, r25	; 0x01
   1b6c4:	a2 83       	std	Z+2, r26	; 0x02
   1b6c6:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1b6c8:	c0 5f       	subi	r28, 0xF0	; 240
   1b6ca:	de 4f       	sbci	r29, 0xFE	; 254
   1b6cc:	e8 81       	ld	r30, Y
   1b6ce:	f9 81       	ldd	r31, Y+1	; 0x01
   1b6d0:	c0 51       	subi	r28, 0x10	; 16
   1b6d2:	d1 40       	sbci	r29, 0x01	; 1
   1b6d4:	80 81       	ld	r24, Z
   1b6d6:	91 81       	ldd	r25, Z+1	; 0x01
   1b6d8:	a2 81       	ldd	r26, Z+2	; 0x02
   1b6da:	b3 81       	ldd	r27, Z+3	; 0x03
   1b6dc:	f7 01       	movw	r30, r14
   1b6de:	80 8b       	std	Z+16, r24	; 0x10
   1b6e0:	91 8b       	std	Z+17, r25	; 0x11
   1b6e2:	a2 8b       	std	Z+18, r26	; 0x12
   1b6e4:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1b6e6:	60 e0       	ldi	r22, 0x00	; 0
   1b6e8:	70 e0       	ldi	r23, 0x00	; 0
   1b6ea:	c7 01       	movw	r24, r14
   1b6ec:	0e 94 f2 cb 	call	0x197e4	; 0x197e4 <lif_writedirindex>
   1b6f0:	8c 01       	movw	r16, r24
   1b6f2:	89 2b       	or	r24, r25
   1b6f4:	41 f0       	breq	.+16     	; 0x1b706 <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1b6f6:	61 e0       	ldi	r22, 0x01	; 1
   1b6f8:	70 e0       	ldi	r23, 0x00	; 0
   1b6fa:	c7 01       	movw	r24, r14
   1b6fc:	0e 94 4e cc 	call	0x1989c	; 0x1989c <lif_writedirEOF>
   1b700:	8c 01       	movw	r16, r24
   1b702:	89 2b       	or	r24, r25
   1b704:	39 f4       	brne	.+14     	; 0x1b714 <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b706:	c4 01       	movw	r24, r8
   1b708:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_close_volume>
   1b70c:	c7 01       	movw	r24, r14
   1b70e:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1b712:	a3 c0       	rjmp	.+326    	; 0x1b85a <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1b714:	f7 01       	movw	r30, r14
   1b716:	44 84       	ldd	r4, Z+12	; 0x0c
   1b718:	55 84       	ldd	r5, Z+13	; 0x0d
   1b71a:	66 84       	ldd	r6, Z+14	; 0x0e
   1b71c:	77 84       	ldd	r7, Z+15	; 0x0f
   1b71e:	76 2c       	mov	r7, r6
   1b720:	65 2c       	mov	r6, r5
   1b722:	54 2c       	mov	r5, r4
   1b724:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b726:	f4 01       	movw	r30, r8
   1b728:	e4 5a       	subi	r30, 0xA4	; 164
   1b72a:	ff 4f       	sbci	r31, 0xFF	; 255
   1b72c:	80 81       	ld	r24, Z
   1b72e:	91 81       	ldd	r25, Z+1	; 0x01
   1b730:	a2 81       	ldd	r26, Z+2	; 0x02
   1b732:	b3 81       	ldd	r27, Z+3	; 0x03
   1b734:	22 27       	eor	r18, r18
   1b736:	38 2f       	mov	r19, r24
   1b738:	49 2f       	mov	r20, r25
   1b73a:	5a 2f       	mov	r21, r26
   1b73c:	c4 5f       	subi	r28, 0xF4	; 244
   1b73e:	de 4f       	sbci	r29, 0xFE	; 254
   1b740:	28 83       	st	Y, r18
   1b742:	39 83       	std	Y+1, r19	; 0x01
   1b744:	4a 83       	std	Y+2, r20	; 0x02
   1b746:	5b 83       	std	Y+3, r21	; 0x03
   1b748:	cc 50       	subi	r28, 0x0C	; 12
   1b74a:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b74c:	21 2c       	mov	r2, r1
   1b74e:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b750:	89 e1       	ldi	r24, 0x19	; 25
   1b752:	95 e3       	ldi	r25, 0x35	; 53
   1b754:	9c 01       	movw	r18, r24
   1b756:	40 e0       	ldi	r20, 0x00	; 0
   1b758:	ce 5e       	subi	r28, 0xEE	; 238
   1b75a:	de 4f       	sbci	r29, 0xFE	; 254
   1b75c:	28 83       	st	Y, r18
   1b75e:	39 83       	std	Y+1, r19	; 0x01
   1b760:	4a 83       	std	Y+2, r20	; 0x02
   1b762:	c2 51       	subi	r28, 0x12	; 18
   1b764:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b766:	c0 5f       	subi	r28, 0xF0	; 240
   1b768:	de 4f       	sbci	r29, 0xFE	; 254
   1b76a:	e8 81       	ld	r30, Y
   1b76c:	f9 81       	ldd	r31, Y+1	; 0x01
   1b76e:	c0 51       	subi	r28, 0x10	; 16
   1b770:	d1 40       	sbci	r29, 0x01	; 1
   1b772:	80 81       	ld	r24, Z
   1b774:	91 81       	ldd	r25, Z+1	; 0x01
   1b776:	28 16       	cp	r2, r24
   1b778:	39 06       	cpc	r3, r25
   1b77a:	0c f0       	brlt	.+2      	; 0x1b77e <lif_extract_lif_as_lif+0x188>
   1b77c:	58 c0       	rjmp	.+176    	; 0x1b82e <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1b77e:	00 e0       	ldi	r16, 0x00	; 0
   1b780:	11 e0       	ldi	r17, 0x01	; 1
   1b782:	c4 5f       	subi	r28, 0xF4	; 244
   1b784:	de 4f       	sbci	r29, 0xFE	; 254
   1b786:	28 81       	ld	r18, Y
   1b788:	39 81       	ldd	r19, Y+1	; 0x01
   1b78a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b78c:	5b 81       	ldd	r21, Y+3	; 0x03
   1b78e:	cc 50       	subi	r28, 0x0C	; 12
   1b790:	d1 40       	sbci	r29, 0x01	; 1
   1b792:	be 01       	movw	r22, r28
   1b794:	68 5f       	subi	r22, 0xF8	; 248
   1b796:	7f 4f       	sbci	r23, 0xFF	; 255
   1b798:	c4 01       	movw	r24, r8
   1b79a:	0e 94 31 c2 	call	0x18462	; 0x18462 <lif_read>
   1b79e:	5b 01       	movw	r10, r22
   1b7a0:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1b7a2:	6f 3f       	cpi	r22, 0xFF	; 255
   1b7a4:	71 05       	cpc	r23, r1
   1b7a6:	09 f0       	breq	.+2      	; 0x1b7aa <lif_extract_lif_as_lif+0x1b4>
   1b7a8:	2c f4       	brge	.+10     	; 0x1b7b4 <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b7aa:	c4 01       	movw	r24, r8
   1b7ac:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_close_volume>
   1b7b0:	c7 01       	movw	r24, r14
   1b7b2:	4f cf       	rjmp	.-354    	; 0x1b652 <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1b7b4:	00 e0       	ldi	r16, 0x00	; 0
   1b7b6:	11 e0       	ldi	r17, 0x01	; 1
   1b7b8:	a3 01       	movw	r20, r6
   1b7ba:	92 01       	movw	r18, r4
   1b7bc:	be 01       	movw	r22, r28
   1b7be:	68 5f       	subi	r22, 0xF8	; 248
   1b7c0:	7f 4f       	sbci	r23, 0xFF	; 255
   1b7c2:	c7 01       	movw	r24, r14
   1b7c4:	0e 94 84 c2 	call	0x18508	; 0x18508 <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1b7c8:	c5 01       	movw	r24, r10
   1b7ca:	0b 2c       	mov	r0, r11
   1b7cc:	00 0c       	add	r0, r0
   1b7ce:	aa 0b       	sbc	r26, r26
   1b7d0:	bb 0b       	sbc	r27, r27
   1b7d2:	48 0e       	add	r4, r24
   1b7d4:	59 1e       	adc	r5, r25
   1b7d6:	6a 1e       	adc	r6, r26
   1b7d8:	7b 1e       	adc	r7, r27
        offset += size;
   1b7da:	c4 5f       	subi	r28, 0xF4	; 244
   1b7dc:	de 4f       	sbci	r29, 0xFE	; 254
   1b7de:	28 81       	ld	r18, Y
   1b7e0:	39 81       	ldd	r19, Y+1	; 0x01
   1b7e2:	4a 81       	ldd	r20, Y+2	; 0x02
   1b7e4:	5b 81       	ldd	r21, Y+3	; 0x03
   1b7e6:	cc 50       	subi	r28, 0x0C	; 12
   1b7e8:	d1 40       	sbci	r29, 0x01	; 1
   1b7ea:	28 0f       	add	r18, r24
   1b7ec:	39 1f       	adc	r19, r25
   1b7ee:	4a 1f       	adc	r20, r26
   1b7f0:	5b 1f       	adc	r21, r27
   1b7f2:	c4 5f       	subi	r28, 0xF4	; 244
   1b7f4:	de 4f       	sbci	r29, 0xFE	; 254
   1b7f6:	28 83       	st	Y, r18
   1b7f8:	39 83       	std	Y+1, r19	; 0x01
   1b7fa:	4a 83       	std	Y+2, r20	; 0x02
   1b7fc:	5b 83       	std	Y+3, r21	; 0x03
   1b7fe:	cc 50       	subi	r28, 0x0C	; 12
   1b800:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b802:	ed b7       	in	r30, 0x3d	; 61
   1b804:	fe b7       	in	r31, 0x3e	; 62
   1b806:	44 82       	std	Z+4, r4	; 0x04
   1b808:	55 82       	std	Z+5, r5	; 0x05
   1b80a:	66 82       	std	Z+6, r6	; 0x06
   1b80c:	77 82       	std	Z+7, r7	; 0x07
   1b80e:	ce 5e       	subi	r28, 0xEE	; 238
   1b810:	de 4f       	sbci	r29, 0xFE	; 254
   1b812:	28 81       	ld	r18, Y
   1b814:	39 81       	ldd	r19, Y+1	; 0x01
   1b816:	4a 81       	ldd	r20, Y+2	; 0x02
   1b818:	c2 51       	subi	r28, 0x12	; 18
   1b81a:	d1 40       	sbci	r29, 0x01	; 1
   1b81c:	21 83       	std	Z+1, r18	; 0x01
   1b81e:	32 83       	std	Z+2, r19	; 0x02
   1b820:	43 83       	std	Z+3, r20	; 0x03
   1b822:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b826:	ff ef       	ldi	r31, 0xFF	; 255
   1b828:	2f 1a       	sub	r2, r31
   1b82a:	3f 0a       	sbc	r3, r31
   1b82c:	9c cf       	rjmp	.-200    	; 0x1b766 <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b82e:	c4 01       	movw	r24, r8
   1b830:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_close_volume>
   1b834:	c7 01       	movw	r24, r14
   1b836:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1b83a:	ed b7       	in	r30, 0x3d	; 61
   1b83c:	fe b7       	in	r31, 0x3e	; 62
   1b83e:	44 82       	std	Z+4, r4	; 0x04
   1b840:	55 82       	std	Z+5, r5	; 0x05
   1b842:	66 82       	std	Z+6, r6	; 0x06
   1b844:	77 82       	std	Z+7, r7	; 0x07
   1b846:	8b e0       	ldi	r24, 0x0B	; 11
   1b848:	95 e3       	ldi	r25, 0x35	; 53
   1b84a:	a0 e0       	ldi	r26, 0x00	; 0
   1b84c:	81 83       	std	Z+1, r24	; 0x01
   1b84e:	92 83       	std	Z+2, r25	; 0x02
   1b850:	a3 83       	std	Z+3, r26	; 0x03
   1b852:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    return(1);
   1b856:	01 e0       	ldi	r16, 0x01	; 1
   1b858:	10 e0       	ldi	r17, 0x00	; 0
}
   1b85a:	c8 01       	movw	r24, r16
   1b85c:	cc 5e       	subi	r28, 0xEC	; 236
   1b85e:	de 4f       	sbci	r29, 0xFE	; 254
   1b860:	e2 e1       	ldi	r30, 0x12	; 18
   1b862:	0c 94 af e7 	jmp	0x1cf5e	; 0x1cf5e <__epilogue_restores__>

0001b866 <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1b866:	2f 92       	push	r2
   1b868:	3f 92       	push	r3
   1b86a:	4f 92       	push	r4
   1b86c:	5f 92       	push	r5
   1b86e:	6f 92       	push	r6
   1b870:	8f 92       	push	r8
   1b872:	9f 92       	push	r9
   1b874:	af 92       	push	r10
   1b876:	bf 92       	push	r11
   1b878:	cf 92       	push	r12
   1b87a:	df 92       	push	r13
   1b87c:	ef 92       	push	r14
   1b87e:	ff 92       	push	r15
   1b880:	0f 93       	push	r16
   1b882:	1f 93       	push	r17
   1b884:	cf 93       	push	r28
   1b886:	df 93       	push	r29
   1b888:	cd b7       	in	r28, 0x3d	; 61
   1b88a:	de b7       	in	r29, 0x3e	; 62
   1b88c:	cd 51       	subi	r28, 0x1D	; 29
   1b88e:	d1 40       	sbci	r29, 0x01	; 1
   1b890:	0f b6       	in	r0, 0x3f	; 63
   1b892:	f8 94       	cli
   1b894:	de bf       	out	0x3e, r29	; 62
   1b896:	0f be       	out	0x3f, r0	; 63
   1b898:	cd bf       	out	0x3d, r28	; 61
   1b89a:	5c 01       	movw	r10, r24
   1b89c:	7b 01       	movw	r14, r22
   1b89e:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1b8a0:	dc 01       	movw	r26, r24
   1b8a2:	8c 91       	ld	r24, X
   1b8a4:	81 11       	cpse	r24, r1
   1b8a6:	03 c0       	rjmp	.+6      	; 0x1b8ae <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1b8a8:	8b ee       	ldi	r24, 0xEB	; 235
   1b8aa:	94 e3       	ldi	r25, 0x34	; 52
   1b8ac:	06 c0       	rjmp	.+12     	; 0x1b8ba <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1b8ae:	db 01       	movw	r26, r22
   1b8b0:	8c 91       	ld	r24, X
   1b8b2:	81 11       	cpse	r24, r1
   1b8b4:	0b c0       	rjmp	.+22     	; 0x1b8cc <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1b8b6:	80 ed       	ldi	r24, 0xD0	; 208
   1b8b8:	94 e3       	ldi	r25, 0x34	; 52
   1b8ba:	a0 e0       	ldi	r26, 0x00	; 0
   1b8bc:	ed b7       	in	r30, 0x3d	; 61
   1b8be:	fe b7       	in	r31, 0x3e	; 62
   1b8c0:	81 83       	std	Z+1, r24	; 0x01
   1b8c2:	92 83       	std	Z+2, r25	; 0x02
   1b8c4:	a3 83       	std	Z+3, r26	; 0x03
   1b8c6:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1b8ca:	25 c1       	rjmp	.+586    	; 0x1bb16 <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1b8cc:	da 01       	movw	r26, r20
   1b8ce:	8c 91       	ld	r24, X
   1b8d0:	81 11       	cpse	r24, r1
   1b8d2:	03 c0       	rjmp	.+6      	; 0x1b8da <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1b8d4:	84 eb       	ldi	r24, 0xB4	; 180
   1b8d6:	94 e3       	ldi	r25, 0x34	; 52
   1b8d8:	f0 cf       	rjmp	.-32     	; 0x1b8ba <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1b8da:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b8de:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b8e2:	92 ff       	sbrs	r25, 2
   1b8e4:	10 c0       	rjmp	.+32     	; 0x1b906 <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1b8e6:	ed b7       	in	r30, 0x3d	; 61
   1b8e8:	fe b7       	in	r31, 0x3e	; 62
   1b8ea:	51 87       	std	Z+9, r21	; 0x09
   1b8ec:	40 87       	std	Z+8, r20	; 0x08
   1b8ee:	77 83       	std	Z+7, r23	; 0x07
   1b8f0:	66 83       	std	Z+6, r22	; 0x06
   1b8f2:	b5 82       	std	Z+5, r11	; 0x05
   1b8f4:	a4 82       	std	Z+4, r10	; 0x04
   1b8f6:	85 e8       	ldi	r24, 0x85	; 133
   1b8f8:	94 e3       	ldi	r25, 0x34	; 52
   1b8fa:	a0 e0       	ldi	r26, 0x00	; 0
   1b8fc:	81 83       	std	Z+1, r24	; 0x01
   1b8fe:	92 83       	std	Z+2, r25	; 0x02
   1b900:	a3 83       	std	Z+3, r26	; 0x03
   1b902:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            lifimagename, lifname, userfile);

// open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1b906:	66 ef       	ldi	r22, 0xF6	; 246
   1b908:	78 e0       	ldi	r23, 0x08	; 8
   1b90a:	c4 01       	movw	r24, r8
   1b90c:	0e 94 ba d1 	call	0x1a374	; 0x1a374 <lif_open_volume>
   1b910:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1b912:	00 97       	sbiw	r24, 0x00	; 0
   1b914:	09 f4       	brne	.+2      	; 0x1b918 <lif_add_lif_file+0xb2>
   1b916:	ff c0       	rjmp	.+510    	; 0x1bb16 <lif_add_lif_file+0x2b0>
        return(-1);

// find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1b918:	b7 01       	movw	r22, r14
   1b91a:	01 d8       	rcall	.-4094   	; 0x1a91e <lif_find_file>
    if(index == -1)
   1b91c:	01 96       	adiw	r24, 0x01	; 1
   1b91e:	a1 f4       	brne	.+40     	; 0x1b948 <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1b920:	ed b7       	in	r30, 0x3d	; 61
   1b922:	fe b7       	in	r31, 0x3e	; 62
   1b924:	f5 82       	std	Z+5, r15	; 0x05
   1b926:	e4 82       	std	Z+4, r14	; 0x04
   1b928:	82 e7       	ldi	r24, 0x72	; 114
   1b92a:	94 e3       	ldi	r25, 0x34	; 52
   1b92c:	a0 e0       	ldi	r26, 0x00	; 0
   1b92e:	81 83       	std	Z+1, r24	; 0x01
   1b930:	92 83       	std	Z+2, r25	; 0x02
   1b932:	a3 83       	std	Z+3, r26	; 0x03
   1b934:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b938:	c6 01       	movw	r24, r12
   1b93a:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1b93e:	60 e0       	ldi	r22, 0x00	; 0
   1b940:	70 e0       	ldi	r23, 0x00	; 0
   1b942:	80 e0       	ldi	r24, 0x00	; 0
   1b944:	90 e0       	ldi	r25, 0x00	; 0
   1b946:	ff c0       	rjmp	.+510    	; 0x1bb46 <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b948:	66 ef       	ldi	r22, 0xF6	; 246
   1b94a:	78 e0       	ldi	r23, 0x08	; 8
   1b94c:	c5 01       	movw	r24, r10
   1b94e:	0e 94 ba d1 	call	0x1a374	; 0x1a374 <lif_open_volume>
   1b952:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1b954:	00 97       	sbiw	r24, 0x00	; 0
   1b956:	09 f4       	brne	.+2      	; 0x1b95a <lif_add_lif_file+0xf4>
   1b958:	de c0       	rjmp	.+444    	; 0x1bb16 <lif_add_lif_file+0x2b0>
        return(-1);

// Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1b95a:	f6 01       	movw	r30, r12
   1b95c:	e0 5a       	subi	r30, 0xA0	; 160
   1b95e:	ff 4f       	sbci	r31, 0xFF	; 255
   1b960:	40 81       	ld	r20, Z
   1b962:	51 81       	ldd	r21, Z+1	; 0x01
   1b964:	62 81       	ldd	r22, Z+2	; 0x02
   1b966:	73 81       	ldd	r23, Z+3	; 0x03
   1b968:	0e 94 5a d0 	call	0x1a0b4	; 0x1a0b4 <lif_newdir>
   1b96c:	ca 5e       	subi	r28, 0xEA	; 234
   1b96e:	de 4f       	sbci	r29, 0xFE	; 254
   1b970:	99 83       	std	Y+1, r25	; 0x01
   1b972:	88 83       	st	Y, r24
   1b974:	c6 51       	subi	r28, 0x16	; 22
   1b976:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1b978:	01 96       	adiw	r24, 0x01	; 1
   1b97a:	79 f4       	brne	.+30     	; 0x1b99a <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1b97c:	ed b7       	in	r30, 0x3d	; 61
   1b97e:	fe b7       	in	r31, 0x3e	; 62
   1b980:	97 82       	std	Z+7, r9	; 0x07
   1b982:	86 82       	std	Z+6, r8	; 0x06
   1b984:	b5 82       	std	Z+5, r11	; 0x05
   1b986:	a4 82       	std	Z+4, r10	; 0x04
   1b988:	82 e4       	ldi	r24, 0x42	; 66
   1b98a:	94 e3       	ldi	r25, 0x34	; 52
   1b98c:	a0 e0       	ldi	r26, 0x00	; 0
   1b98e:	81 83       	std	Z+1, r24	; 0x01
   1b990:	92 83       	std	Z+2, r25	; 0x02
   1b992:	a3 83       	std	Z+3, r26	; 0x03
   1b994:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1b998:	a8 c0       	rjmp	.+336    	; 0x1baea <lif_add_lif_file+0x284>
        lif_closedir(ULIF);
        return(-1);
    }

// Save start sector
    start = LIF->DIR.FileStartSector;
   1b99a:	c7 01       	movw	r24, r14
   1b99c:	84 5a       	subi	r24, 0xA4	; 164
   1b99e:	9f 4f       	sbci	r25, 0xFF	; 255
   1b9a0:	dc 01       	movw	r26, r24
   1b9a2:	4d 91       	ld	r20, X+
   1b9a4:	5d 91       	ld	r21, X+
   1b9a6:	6d 91       	ld	r22, X+
   1b9a8:	7c 91       	ld	r23, X
   1b9aa:	13 97       	sbiw	r26, 0x03	; 3

// Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1b9ac:	21 e2       	ldi	r18, 0x21	; 33
   1b9ae:	f6 01       	movw	r30, r12
   1b9b0:	e1 5b       	subi	r30, 0xB1	; 177
   1b9b2:	ff 4f       	sbci	r31, 0xFF	; 255
   1b9b4:	1d 97       	sbiw	r26, 0x0d	; 13
   1b9b6:	01 90       	ld	r0, Z+
   1b9b8:	0d 92       	st	X+, r0
   1b9ba:	2a 95       	dec	r18
   1b9bc:	e1 f7       	brne	.-8      	; 0x1b9b6 <lif_add_lif_file+0x150>

// Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1b9be:	fc 01       	movw	r30, r24
   1b9c0:	40 83       	st	Z, r20
   1b9c2:	51 83       	std	Z+1, r21	; 0x01
   1b9c4:	62 83       	std	Z+2, r22	; 0x02
   1b9c6:	73 83       	std	Z+3, r23	; 0x03

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b9c8:	b6 2f       	mov	r27, r22
   1b9ca:	a5 2f       	mov	r26, r21
   1b9cc:	94 2f       	mov	r25, r20
   1b9ce:	88 27       	eor	r24, r24
   1b9d0:	c2 5f       	subi	r28, 0xF2	; 242
   1b9d2:	de 4f       	sbci	r29, 0xFE	; 254
   1b9d4:	88 83       	st	Y, r24
   1b9d6:	99 83       	std	Y+1, r25	; 0x01
   1b9d8:	aa 83       	std	Y+2, r26	; 0x02
   1b9da:	bb 83       	std	Y+3, r27	; 0x03
   1b9dc:	ce 50       	subi	r28, 0x0E	; 14
   1b9de:	d1 40       	sbci	r29, 0x01	; 1
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b9e0:	f6 01       	movw	r30, r12
   1b9e2:	e4 5a       	subi	r30, 0xA4	; 164
   1b9e4:	ff 4f       	sbci	r31, 0xFF	; 255
   1b9e6:	80 81       	ld	r24, Z
   1b9e8:	91 81       	ldd	r25, Z+1	; 0x01
   1b9ea:	a2 81       	ldd	r26, Z+2	; 0x02
   1b9ec:	b3 81       	ldd	r27, Z+3	; 0x03
   1b9ee:	22 27       	eor	r18, r18
   1b9f0:	38 2f       	mov	r19, r24
   1b9f2:	49 2f       	mov	r20, r25
   1b9f4:	5a 2f       	mov	r21, r26
   1b9f6:	ce 5e       	subi	r28, 0xEE	; 238
   1b9f8:	de 4f       	sbci	r29, 0xFE	; 254
   1b9fa:	28 83       	st	Y, r18
   1b9fc:	39 83       	std	Y+1, r19	; 0x01
   1b9fe:	4a 83       	std	Y+2, r20	; 0x02
   1ba00:	5b 83       	std	Y+3, r21	; 0x03
   1ba02:	c2 51       	subi	r28, 0x12	; 18
   1ba04:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1ba06:	21 2c       	mov	r2, r1
   1ba08:	31 2c       	mov	r3, r1

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1ba0a:	81 2c       	mov	r8, r1
   1ba0c:	91 2c       	mov	r9, r1
   1ba0e:	54 01       	movw	r10, r8
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1ba10:	a7 01       	movw	r20, r14
   1ba12:	40 5a       	subi	r20, 0xA0	; 160
   1ba14:	5f 4f       	sbci	r21, 0xFF	; 255
   1ba16:	c4 5e       	subi	r28, 0xE4	; 228
   1ba18:	de 4f       	sbci	r29, 0xFE	; 254
   1ba1a:	59 83       	std	Y+1, r21	; 0x01
   1ba1c:	48 83       	st	Y, r20
   1ba1e:	cc 51       	subi	r28, 0x1C	; 28
   1ba20:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1ba22:	84 e3       	ldi	r24, 0x34	; 52
   1ba24:	94 e3       	ldi	r25, 0x34	; 52
   1ba26:	2c 01       	movw	r4, r24
   1ba28:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1ba2a:	27 c0       	rjmp	.+78     	; 0x1ba7a <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

// Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1ba2c:	00 e0       	ldi	r16, 0x00	; 0
   1ba2e:	11 e0       	ldi	r17, 0x01	; 1
   1ba30:	c8 5e       	subi	r28, 0xE8	; 232
   1ba32:	de 4f       	sbci	r29, 0xFE	; 254
   1ba34:	28 81       	ld	r18, Y
   1ba36:	39 81       	ldd	r19, Y+1	; 0x01
   1ba38:	4a 81       	ldd	r20, Y+2	; 0x02
   1ba3a:	5b 81       	ldd	r21, Y+3	; 0x03
   1ba3c:	c8 51       	subi	r28, 0x18	; 24
   1ba3e:	d1 40       	sbci	r29, 0x01	; 1
   1ba40:	be 01       	movw	r22, r28
   1ba42:	66 5f       	subi	r22, 0xF6	; 246
   1ba44:	7f 4f       	sbci	r23, 0xFF	; 255
   1ba46:	c7 01       	movw	r24, r14
   1ba48:	0e 94 84 c2 	call	0x18508	; 0x18508 <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1ba4c:	8f 3f       	cpi	r24, 0xFF	; 255
   1ba4e:	91 05       	cpc	r25, r1
   1ba50:	09 f0       	breq	.+2      	; 0x1ba54 <lif_add_lif_file+0x1ee>
   1ba52:	0c f4       	brge	.+2      	; 0x1ba56 <lif_add_lif_file+0x1f0>
   1ba54:	4a c0       	rjmp	.+148    	; 0x1baea <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1ba56:	5f ef       	ldi	r21, 0xFF	; 255
   1ba58:	95 1a       	sub	r9, r21
   1ba5a:	a5 0a       	sbc	r10, r21
   1ba5c:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1ba5e:	ed b7       	in	r30, 0x3d	; 61
   1ba60:	fe b7       	in	r31, 0x3e	; 62
   1ba62:	84 82       	std	Z+4, r8	; 0x04
   1ba64:	95 82       	std	Z+5, r9	; 0x05
   1ba66:	a6 82       	std	Z+6, r10	; 0x06
   1ba68:	b7 82       	std	Z+7, r11	; 0x07
   1ba6a:	41 82       	std	Z+1, r4	; 0x01
   1ba6c:	52 82       	std	Z+2, r5	; 0x02
   1ba6e:	63 82       	std	Z+3, r6	; 0x03
   1ba70:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1ba74:	ff ef       	ldi	r31, 0xFF	; 255
   1ba76:	2f 1a       	sub	r2, r31
   1ba78:	3f 0a       	sbc	r3, r31
   1ba7a:	ce 5e       	subi	r28, 0xEE	; 238
   1ba7c:	de 4f       	sbci	r29, 0xFE	; 254
   1ba7e:	28 81       	ld	r18, Y
   1ba80:	39 81       	ldd	r19, Y+1	; 0x01
   1ba82:	4a 81       	ldd	r20, Y+2	; 0x02
   1ba84:	5b 81       	ldd	r21, Y+3	; 0x03
   1ba86:	c2 51       	subi	r28, 0x12	; 18
   1ba88:	d1 40       	sbci	r29, 0x01	; 1
   1ba8a:	28 0d       	add	r18, r8
   1ba8c:	39 1d       	adc	r19, r9
   1ba8e:	4a 1d       	adc	r20, r10
   1ba90:	5b 1d       	adc	r21, r11
   1ba92:	c2 5f       	subi	r28, 0xF2	; 242
   1ba94:	de 4f       	sbci	r29, 0xFE	; 254
   1ba96:	88 81       	ld	r24, Y
   1ba98:	99 81       	ldd	r25, Y+1	; 0x01
   1ba9a:	aa 81       	ldd	r26, Y+2	; 0x02
   1ba9c:	bb 81       	ldd	r27, Y+3	; 0x03
   1ba9e:	ce 50       	subi	r28, 0x0E	; 14
   1baa0:	d1 40       	sbci	r29, 0x01	; 1
   1baa2:	88 0d       	add	r24, r8
   1baa4:	99 1d       	adc	r25, r9
   1baa6:	aa 1d       	adc	r26, r10
   1baa8:	bb 1d       	adc	r27, r11
   1baaa:	c8 5e       	subi	r28, 0xE8	; 232
   1baac:	de 4f       	sbci	r29, 0xFE	; 254
   1baae:	88 83       	st	Y, r24
   1bab0:	99 83       	std	Y+1, r25	; 0x01
   1bab2:	aa 83       	std	Y+2, r26	; 0x02
   1bab4:	bb 83       	std	Y+3, r27	; 0x03
   1bab6:	c8 51       	subi	r28, 0x18	; 24
   1bab8:	d1 40       	sbci	r29, 0x01	; 1
   1baba:	c4 5e       	subi	r28, 0xE4	; 228
   1babc:	de 4f       	sbci	r29, 0xFE	; 254
   1babe:	a8 81       	ld	r26, Y
   1bac0:	b9 81       	ldd	r27, Y+1	; 0x01
   1bac2:	cc 51       	subi	r28, 0x1C	; 28
   1bac4:	d1 40       	sbci	r29, 0x01	; 1
   1bac6:	8d 91       	ld	r24, X+
   1bac8:	9c 91       	ld	r25, X
   1baca:	28 16       	cp	r2, r24
   1bacc:	39 06       	cpc	r3, r25
   1bace:	94 f4       	brge	.+36     	; 0x1baf4 <lif_add_lif_file+0x28e>
    {
// Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1bad0:	00 e0       	ldi	r16, 0x00	; 0
   1bad2:	11 e0       	ldi	r17, 0x01	; 1
   1bad4:	be 01       	movw	r22, r28
   1bad6:	66 5f       	subi	r22, 0xF6	; 246
   1bad8:	7f 4f       	sbci	r23, 0xFF	; 255
   1bada:	c6 01       	movw	r24, r12
   1badc:	0e 94 31 c2 	call	0x18462	; 0x18462 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1bae0:	6f 3f       	cpi	r22, 0xFF	; 255
   1bae2:	71 05       	cpc	r23, r1
   1bae4:	11 f0       	breq	.+4      	; 0x1baea <lif_add_lif_file+0x284>
   1bae6:	0c f0       	brlt	.+2      	; 0x1baea <lif_add_lif_file+0x284>
   1bae8:	a1 cf       	rjmp	.-190    	; 0x1ba2c <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1baea:	c7 01       	movw	r24, r14
   1baec:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_close_volume>
   1baf0:	c6 01       	movw	r24, r12
   1baf2:	0f c0       	rjmp	.+30     	; 0x1bb12 <lif_add_lif_file+0x2ac>
   1baf4:	c6 01       	movw	r24, r12
   1baf6:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

// Write directory record
    if( !lif_writedirindex(LIF,index))
   1bafa:	ca 5e       	subi	r28, 0xEA	; 234
   1bafc:	de 4f       	sbci	r29, 0xFE	; 254
   1bafe:	68 81       	ld	r22, Y
   1bb00:	79 81       	ldd	r23, Y+1	; 0x01
   1bb02:	c6 51       	subi	r28, 0x16	; 22
   1bb04:	d1 40       	sbci	r29, 0x01	; 1
   1bb06:	c7 01       	movw	r24, r14
   1bb08:	0e 94 f2 cb 	call	0x197e4	; 0x197e4 <lif_writedirindex>
   1bb0c:	89 2b       	or	r24, r25
   1bb0e:	41 f4       	brne	.+16     	; 0x1bb20 <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb10:	c7 01       	movw	r24, r14
   1bb12:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_close_volume>

// Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1bb16:	6f ef       	ldi	r22, 0xFF	; 255
   1bb18:	7f ef       	ldi	r23, 0xFF	; 255
   1bb1a:	8f ef       	ldi	r24, 0xFF	; 255
   1bb1c:	9f ef       	ldi	r25, 0xFF	; 255
   1bb1e:	13 c0       	rjmp	.+38     	; 0x1bb46 <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb20:	c7 01       	movw	r24, r14
   1bb22:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1bb26:	ed b7       	in	r30, 0x3d	; 61
   1bb28:	fe b7       	in	r31, 0x3e	; 62
   1bb2a:	84 82       	std	Z+4, r8	; 0x04
   1bb2c:	95 82       	std	Z+5, r9	; 0x05
   1bb2e:	a6 82       	std	Z+6, r10	; 0x06
   1bb30:	b7 82       	std	Z+7, r11	; 0x07
   1bb32:	86 e2       	ldi	r24, 0x26	; 38
   1bb34:	94 e3       	ldi	r25, 0x34	; 52
   1bb36:	a0 e0       	ldi	r26, 0x00	; 0
   1bb38:	81 83       	std	Z+1, r24	; 0x01
   1bb3a:	92 83       	std	Z+2, r25	; 0x02
   1bb3c:	a3 83       	std	Z+3, r26	; 0x03
   1bb3e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    return(bytes);
   1bb42:	b4 01       	movw	r22, r8
   1bb44:	c5 01       	movw	r24, r10
}
   1bb46:	c3 5e       	subi	r28, 0xE3	; 227
   1bb48:	de 4f       	sbci	r29, 0xFE	; 254
   1bb4a:	0f b6       	in	r0, 0x3f	; 63
   1bb4c:	f8 94       	cli
   1bb4e:	de bf       	out	0x3e, r29	; 62
   1bb50:	0f be       	out	0x3f, r0	; 63
   1bb52:	cd bf       	out	0x3d, r28	; 61
   1bb54:	df 91       	pop	r29
   1bb56:	cf 91       	pop	r28
   1bb58:	1f 91       	pop	r17
   1bb5a:	0f 91       	pop	r16
   1bb5c:	ff 90       	pop	r15
   1bb5e:	ef 90       	pop	r14
   1bb60:	df 90       	pop	r13
   1bb62:	cf 90       	pop	r12
   1bb64:	bf 90       	pop	r11
   1bb66:	af 90       	pop	r10
   1bb68:	9f 90       	pop	r9
   1bb6a:	8f 90       	pop	r8
   1bb6c:	6f 90       	pop	r6
   1bb6e:	5f 90       	pop	r5
   1bb70:	4f 90       	pop	r4
   1bb72:	3f 90       	pop	r3
   1bb74:	2f 90       	pop	r2
   1bb76:	08 95       	ret

0001bb78 <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1bb78:	ef 92       	push	r14
   1bb7a:	ff 92       	push	r15
   1bb7c:	0f 93       	push	r16
   1bb7e:	1f 93       	push	r17
   1bb80:	cf 93       	push	r28
   1bb82:	df 93       	push	r29
   1bb84:	ad b7       	in	r26, 0x3d	; 61
   1bb86:	be b7       	in	r27, 0x3e	; 62
   1bb88:	17 97       	sbiw	r26, 0x07	; 7
   1bb8a:	0f b6       	in	r0, 0x3f	; 63
   1bb8c:	f8 94       	cli
   1bb8e:	be bf       	out	0x3e, r27	; 62
   1bb90:	0f be       	out	0x3f, r0	; 63
   1bb92:	ad bf       	out	0x3d, r26	; 61
   1bb94:	7c 01       	movw	r14, r24
   1bb96:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1bb98:	fc 01       	movw	r30, r24
   1bb9a:	80 81       	ld	r24, Z
   1bb9c:	81 11       	cpse	r24, r1
   1bb9e:	03 c0       	rjmp	.+6      	; 0x1bba6 <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1bba0:	81 e0       	ldi	r24, 0x01	; 1
   1bba2:	94 e3       	ldi	r25, 0x34	; 52
   1bba4:	06 c0       	rjmp	.+12     	; 0x1bbb2 <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1bba6:	fb 01       	movw	r30, r22
   1bba8:	80 81       	ld	r24, Z
   1bbaa:	81 11       	cpse	r24, r1
   1bbac:	0b c0       	rjmp	.+22     	; 0x1bbc4 <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1bbae:	81 ee       	ldi	r24, 0xE1	; 225
   1bbb0:	93 e3       	ldi	r25, 0x33	; 51
   1bbb2:	a0 e0       	ldi	r26, 0x00	; 0
   1bbb4:	ed b7       	in	r30, 0x3d	; 61
   1bbb6:	fe b7       	in	r31, 0x3e	; 62
   1bbb8:	81 83       	std	Z+1, r24	; 0x01
   1bbba:	92 83       	std	Z+2, r25	; 0x02
   1bbbc:	a3 83       	std	Z+3, r26	; 0x03
   1bbbe:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1bbc2:	68 c0       	rjmp	.+208    	; 0x1bc94 <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & LIF_DEBUG)
   1bbc4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1bbc8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1bbcc:	92 ff       	sbrs	r25, 2
   1bbce:	0e c0       	rjmp	.+28     	; 0x1bbec <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n",
   1bbd0:	ed b7       	in	r30, 0x3d	; 61
   1bbd2:	fe b7       	in	r31, 0x3e	; 62
   1bbd4:	77 83       	std	Z+7, r23	; 0x07
   1bbd6:	66 83       	std	Z+6, r22	; 0x06
   1bbd8:	f5 82       	std	Z+5, r15	; 0x05
   1bbda:	e4 82       	std	Z+4, r14	; 0x04
   1bbdc:	82 ec       	ldi	r24, 0xC2	; 194
   1bbde:	93 e3       	ldi	r25, 0x33	; 51
   1bbe0:	a0 e0       	ldi	r26, 0x00	; 0
   1bbe2:	81 83       	std	Z+1, r24	; 0x01
   1bbe4:	92 83       	std	Z+2, r25	; 0x02
   1bbe6:	a3 83       	std	Z+3, r26	; 0x03
   1bbe8:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
   1bbec:	66 ef       	ldi	r22, 0xF6	; 246
   1bbee:	78 e0       	ldi	r23, 0x08	; 8
   1bbf0:	c7 01       	movw	r24, r14
   1bbf2:	0e 94 ba d1 	call	0x1a374	; 0x1a374 <lif_open_volume>
   1bbf6:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bbf8:	00 97       	sbiw	r24, 0x00	; 0
   1bbfa:	09 f4       	brne	.+2      	; 0x1bbfe <lif_del_file+0x86>
   1bbfc:	4b c0       	rjmp	.+150    	; 0x1bc94 <lif_del_file+0x11c>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, lifname);
   1bbfe:	b8 01       	movw	r22, r16
   1bc00:	0e 94 8f d4 	call	0x1a91e	; 0x1a91e <lif_find_file>
    if(index == -1)
   1bc04:	8f 3f       	cpi	r24, 0xFF	; 255
   1bc06:	ff ef       	ldi	r31, 0xFF	; 255
   1bc08:	9f 07       	cpc	r25, r31
   1bc0a:	a1 f4       	brne	.+40     	; 0x1bc34 <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc0c:	ce 01       	movw	r24, r28
   1bc0e:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_close_volume>
// Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1bc12:	ed b7       	in	r30, 0x3d	; 61
   1bc14:	fe b7       	in	r31, 0x3e	; 62
   1bc16:	17 83       	std	Z+7, r17	; 0x07
   1bc18:	06 83       	std	Z+6, r16	; 0x06
   1bc1a:	f5 82       	std	Z+5, r15	; 0x05
   1bc1c:	e4 82       	std	Z+4, r14	; 0x04
   1bc1e:	8a e9       	ldi	r24, 0x9A	; 154
   1bc20:	93 e3       	ldi	r25, 0x33	; 51
   1bc22:	a0 e0       	ldi	r26, 0x00	; 0
   1bc24:	81 83       	std	Z+1, r24	; 0x01
   1bc26:	92 83       	std	Z+2, r25	; 0x02
   1bc28:	a3 83       	std	Z+3, r26	; 0x03
   1bc2a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        return(0);
   1bc2e:	80 e0       	ldi	r24, 0x00	; 0
   1bc30:	90 e0       	ldi	r25, 0x00	; 0
   1bc32:	32 c0       	rjmp	.+100    	; 0x1bc98 <lif_del_file+0x120>
    }

// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1bc34:	2a a1       	ldd	r18, Y+34	; 0x22
   1bc36:	3b a1       	ldd	r19, Y+35	; 0x23
   1bc38:	21 50       	subi	r18, 0x01	; 1
   1bc3a:	31 09       	sbc	r19, r1
   1bc3c:	fe 01       	movw	r30, r28
   1bc3e:	e6 5a       	subi	r30, 0xA6	; 166
   1bc40:	ff 4f       	sbci	r31, 0xFF	; 255
   1bc42:	82 17       	cp	r24, r18
   1bc44:	93 07       	cpc	r25, r19
   1bc46:	2c f0       	brlt	.+10     	; 0x1bc52 <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1bc48:	2f ef       	ldi	r18, 0xFF	; 255
   1bc4a:	3f ef       	ldi	r19, 0xFF	; 255
   1bc4c:	31 83       	std	Z+1, r19	; 0x01
   1bc4e:	20 83       	st	Z, r18
   1bc50:	02 c0       	rjmp	.+4      	; 0x1bc56 <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1bc52:	11 82       	std	Z+1, r1	; 0x01
   1bc54:	10 82       	st	Z, r1

// re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1bc56:	bc 01       	movw	r22, r24
   1bc58:	ce 01       	movw	r24, r28
   1bc5a:	0e 94 f2 cb 	call	0x197e4	; 0x197e4 <lif_writedirindex>
   1bc5e:	89 2b       	or	r24, r25
   1bc60:	21 f4       	brne	.+8      	; 0x1bc6a <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc62:	ce 01       	movw	r24, r28
   1bc64:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_close_volume>
   1bc68:	15 c0       	rjmp	.+42     	; 0x1bc94 <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1bc6a:	ce 01       	movw	r24, r28
   1bc6c:	0e 94 66 cc 	call	0x198cc	; 0x198cc <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc70:	ce 01       	movw	r24, r28
   1bc72:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1bc76:	ed b7       	in	r30, 0x3d	; 61
   1bc78:	fe b7       	in	r31, 0x3e	; 62
   1bc7a:	15 83       	std	Z+5, r17	; 0x05
   1bc7c:	04 83       	std	Z+4, r16	; 0x04
   1bc7e:	8b e8       	ldi	r24, 0x8B	; 139
   1bc80:	93 e3       	ldi	r25, 0x33	; 51
   1bc82:	a0 e0       	ldi	r26, 0x00	; 0
   1bc84:	81 83       	std	Z+1, r24	; 0x01
   1bc86:	92 83       	std	Z+2, r25	; 0x02
   1bc88:	a3 83       	std	Z+3, r26	; 0x03
   1bc8a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

    return(1);
   1bc8e:	81 e0       	ldi	r24, 0x01	; 1
   1bc90:	90 e0       	ldi	r25, 0x00	; 0
   1bc92:	02 c0       	rjmp	.+4      	; 0x1bc98 <lif_del_file+0x120>
        printf("LIF image:[%s], LIF name:[%s]\n",
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1bc94:	8f ef       	ldi	r24, 0xFF	; 255
   1bc96:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1bc98:	cd b7       	in	r28, 0x3d	; 61
   1bc9a:	de b7       	in	r29, 0x3e	; 62
   1bc9c:	27 96       	adiw	r28, 0x07	; 7
   1bc9e:	e6 e0       	ldi	r30, 0x06	; 6
   1bca0:	0c 94 bb e7 	jmp	0x1cf76	; 0x1cf76 <__epilogue_restores__+0x18>

0001bca4 <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1bca4:	a7 e0       	ldi	r26, 0x07	; 7
   1bca6:	b0 e0       	ldi	r27, 0x00	; 0
   1bca8:	e8 e5       	ldi	r30, 0x58	; 88
   1bcaa:	fe ed       	ldi	r31, 0xDE	; 222
   1bcac:	0c 94 9b e7 	jmp	0x1cf36	; 0x1cf36 <__prologue_saves__+0x10>
   1bcb0:	6c 01       	movw	r12, r24
   1bcb2:	8b 01       	movw	r16, r22
   1bcb4:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1bcb6:	fc 01       	movw	r30, r24
   1bcb8:	80 81       	ld	r24, Z
   1bcba:	81 11       	cpse	r24, r1
   1bcbc:	03 c0       	rjmp	.+6      	; 0x1bcc4 <lif_rename_file+0x20>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1bcbe:	83 e6       	ldi	r24, 0x63	; 99
   1bcc0:	93 e3       	ldi	r25, 0x33	; 51
   1bcc2:	06 c0       	rjmp	.+12     	; 0x1bcd0 <lif_rename_file+0x2c>
        return(-1);
    }
    if(!*oldlifname)
   1bcc4:	fb 01       	movw	r30, r22
   1bcc6:	80 81       	ld	r24, Z
   1bcc8:	81 11       	cpse	r24, r1
   1bcca:	0b c0       	rjmp	.+22     	; 0x1bce2 <lif_rename_file+0x3e>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1bccc:	8c e3       	ldi	r24, 0x3C	; 60
   1bcce:	93 e3       	ldi	r25, 0x33	; 51
   1bcd0:	a0 e0       	ldi	r26, 0x00	; 0
   1bcd2:	ed b7       	in	r30, 0x3d	; 61
   1bcd4:	fe b7       	in	r31, 0x3e	; 62
   1bcd6:	81 83       	std	Z+1, r24	; 0x01
   1bcd8:	92 83       	std	Z+2, r25	; 0x02
   1bcda:	a3 83       	std	Z+3, r26	; 0x03
   1bcdc:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1bce0:	58 c0       	rjmp	.+176    	; 0x1bd92 <lif_rename_file+0xee>
        return(-1);
    }
    if(!*newlifname)
   1bce2:	fa 01       	movw	r30, r20
   1bce4:	80 81       	ld	r24, Z
   1bce6:	81 11       	cpse	r24, r1
   1bce8:	03 c0       	rjmp	.+6      	; 0x1bcf0 <lif_rename_file+0x4c>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1bcea:	85 e1       	ldi	r24, 0x15	; 21
   1bcec:	93 e3       	ldi	r25, 0x33	; 51
   1bcee:	f0 cf       	rjmp	.-32     	; 0x1bcd0 <lif_rename_file+0x2c>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1bcf0:	ca 01       	movw	r24, r20
   1bcf2:	0e 94 4c c3 	call	0x18698	; 0x18698 <lif_checkname>
   1bcf6:	89 2b       	or	r24, r25
   1bcf8:	19 f4       	brne	.+6      	; 0x1bd00 <lif_rename_file+0x5c>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1bcfa:	8f ed       	ldi	r24, 0xDF	; 223
   1bcfc:	92 e3       	ldi	r25, 0x32	; 50
   1bcfe:	e8 cf       	rjmp	.-48     	; 0x1bcd0 <lif_rename_file+0x2c>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1bd00:	66 ef       	ldi	r22, 0xF6	; 246
   1bd02:	78 e0       	ldi	r23, 0x08	; 8
   1bd04:	c6 01       	movw	r24, r12
   1bd06:	0e 94 ba d1 	call	0x1a374	; 0x1a374 <lif_open_volume>
   1bd0a:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bd0c:	00 97       	sbiw	r24, 0x00	; 0
   1bd0e:	09 f4       	brne	.+2      	; 0x1bd12 <lif_rename_file+0x6e>
   1bd10:	40 c0       	rjmp	.+128    	; 0x1bd92 <lif_rename_file+0xee>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, oldlifname);
   1bd12:	b8 01       	movw	r22, r16
   1bd14:	0e 94 8f d4 	call	0x1a91e	; 0x1a91e <lif_find_file>
   1bd18:	5c 01       	movw	r10, r24
    if(index == -1)
   1bd1a:	01 96       	adiw	r24, 0x01	; 1
   1bd1c:	a1 f4       	brne	.+40     	; 0x1bd46 <lif_rename_file+0xa2>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1bd1e:	ed b7       	in	r30, 0x3d	; 61
   1bd20:	fe b7       	in	r31, 0x3e	; 62
   1bd22:	17 83       	std	Z+7, r17	; 0x07
   1bd24:	06 83       	std	Z+6, r16	; 0x06
   1bd26:	d5 82       	std	Z+5, r13	; 0x05
   1bd28:	c4 82       	std	Z+4, r12	; 0x04
   1bd2a:	86 eb       	ldi	r24, 0xB6	; 182
   1bd2c:	92 e3       	ldi	r25, 0x32	; 50
   1bd2e:	a0 e0       	ldi	r26, 0x00	; 0
   1bd30:	81 83       	std	Z+1, r24	; 0x01
   1bd32:	92 83       	std	Z+2, r25	; 0x02
   1bd34:	a3 83       	std	Z+3, r26	; 0x03
   1bd36:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bd3a:	ce 01       	movw	r24, r28
   1bd3c:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1bd40:	80 e0       	ldi	r24, 0x00	; 0
   1bd42:	90 e0       	ldi	r25, 0x00	; 0
   1bd44:	28 c0       	rjmp	.+80     	; 0x1bd96 <lif_rename_file+0xf2>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1bd46:	4a e0       	ldi	r20, 0x0A	; 10
   1bd48:	50 e0       	ldi	r21, 0x00	; 0
   1bd4a:	b7 01       	movw	r22, r14
   1bd4c:	ce 01       	movw	r24, r28
   1bd4e:	81 5b       	subi	r24, 0xB1	; 177
   1bd50:	9f 4f       	sbci	r25, 0xFF	; 255
   1bd52:	0e 94 86 c3 	call	0x1870c	; 0x1870c <lif_fixname>

// re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1bd56:	b5 01       	movw	r22, r10
   1bd58:	ce 01       	movw	r24, r28
   1bd5a:	0e 94 f2 cb 	call	0x197e4	; 0x197e4 <lif_writedirindex>
   1bd5e:	89 2b       	or	r24, r25
   1bd60:	21 f4       	brne	.+8      	; 0x1bd6a <lif_rename_file+0xc6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bd62:	ce 01       	movw	r24, r28
   1bd64:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_close_volume>
   1bd68:	14 c0       	rjmp	.+40     	; 0x1bd92 <lif_rename_file+0xee>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1bd6a:	ed b7       	in	r30, 0x3d	; 61
   1bd6c:	fe b7       	in	r31, 0x3e	; 62
   1bd6e:	f7 82       	std	Z+7, r15	; 0x07
   1bd70:	e6 82       	std	Z+6, r14	; 0x06
   1bd72:	15 83       	std	Z+5, r17	; 0x05
   1bd74:	04 83       	std	Z+4, r16	; 0x04
   1bd76:	8f e9       	ldi	r24, 0x9F	; 159
   1bd78:	92 e3       	ldi	r25, 0x32	; 50
   1bd7a:	a0 e0       	ldi	r26, 0x00	; 0
   1bd7c:	81 83       	std	Z+1, r24	; 0x01
   1bd7e:	92 83       	std	Z+2, r25	; 0x02
   1bd80:	a3 83       	std	Z+3, r26	; 0x03
   1bd82:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bd86:	ce 01       	movw	r24, r28
   1bd88:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1bd8c:	81 e0       	ldi	r24, 0x01	; 1
   1bd8e:	90 e0       	ldi	r25, 0x00	; 0
   1bd90:	02 c0       	rjmp	.+4      	; 0x1bd96 <lif_rename_file+0xf2>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1bd92:	8f ef       	ldi	r24, 0xFF	; 255
   1bd94:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1bd96:	cd b7       	in	r28, 0x3d	; 61
   1bd98:	de b7       	in	r29, 0x3e	; 62
   1bd9a:	27 96       	adiw	r28, 0x07	; 7
   1bd9c:	ea e0       	ldi	r30, 0x0A	; 10
   1bd9e:	0c 94 b7 e7 	jmp	0x1cf6e	; 0x1cf6e <__epilogue_restores__+0x10>

0001bda2 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1bda2:	4f 92       	push	r4
   1bda4:	5f 92       	push	r5
   1bda6:	6f 92       	push	r6
   1bda8:	7f 92       	push	r7
   1bdaa:	af 92       	push	r10
   1bdac:	bf 92       	push	r11
   1bdae:	cf 92       	push	r12
   1bdb0:	df 92       	push	r13
   1bdb2:	ef 92       	push	r14
   1bdb4:	ff 92       	push	r15
   1bdb6:	0f 93       	push	r16
   1bdb8:	1f 93       	push	r17
   1bdba:	cf 93       	push	r28
   1bdbc:	df 93       	push	r29
   1bdbe:	ad b7       	in	r26, 0x3d	; 61
   1bdc0:	be b7       	in	r27, 0x3e	; 62
   1bdc2:	17 97       	sbiw	r26, 0x07	; 7
   1bdc4:	0f b6       	in	r0, 0x3f	; 63
   1bdc6:	f8 94       	cli
   1bdc8:	be bf       	out	0x3e, r27	; 62
   1bdca:	0f be       	out	0x3f, r0	; 63
   1bdcc:	ad bf       	out	0x3d, r26	; 61
   1bdce:	27 01       	movw	r4, r14
   1bdd0:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1bdd2:	dc 01       	movw	r26, r24
   1bdd4:	ec 91       	ld	r30, X
   1bdd6:	e1 11       	cpse	r30, r1
   1bdd8:	03 c0       	rjmp	.+6      	; 0x1bde0 <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1bdda:	86 e7       	ldi	r24, 0x76	; 118
   1bddc:	92 e3       	ldi	r25, 0x32	; 50
   1bdde:	16 c0       	rjmp	.+44     	; 0x1be0c <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1bde0:	db 01       	movw	r26, r22
   1bde2:	ec 91       	ld	r30, X
   1bde4:	e1 11       	cpse	r30, r1
   1bde6:	03 c0       	rjmp	.+6      	; 0x1bdee <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1bde8:	81 e5       	ldi	r24, 0x51	; 81
   1bdea:	92 e3       	ldi	r25, 0x32	; 50
   1bdec:	0f c0       	rjmp	.+30     	; 0x1be0c <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1bdee:	21 15       	cp	r18, r1
   1bdf0:	31 05       	cpc	r19, r1
   1bdf2:	41 05       	cpc	r20, r1
   1bdf4:	51 05       	cpc	r21, r1
   1bdf6:	19 f4       	brne	.+6      	; 0x1bdfe <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1bdf8:	8e e2       	ldi	r24, 0x2E	; 46
   1bdfa:	92 e3       	ldi	r25, 0x32	; 50
   1bdfc:	07 c0       	rjmp	.+14     	; 0x1be0c <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1bdfe:	e1 14       	cp	r14, r1
   1be00:	f1 04       	cpc	r15, r1
   1be02:	01 05       	cpc	r16, r1
   1be04:	11 05       	cpc	r17, r1
   1be06:	59 f4       	brne	.+22     	; 0x1be1e <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1be08:	8e e0       	ldi	r24, 0x0E	; 14
   1be0a:	92 e3       	ldi	r25, 0x32	; 50
   1be0c:	a0 e0       	ldi	r26, 0x00	; 0
   1be0e:	ed b7       	in	r30, 0x3d	; 61
   1be10:	fe b7       	in	r31, 0x3e	; 62
   1be12:	81 83       	std	Z+1, r24	; 0x01
   1be14:	92 83       	std	Z+2, r25	; 0x02
   1be16:	a3 83       	std	Z+3, r26	; 0x03
   1be18:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1be1c:	2b c0       	rjmp	.+86     	; 0x1be74 <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1be1e:	67 01       	movw	r12, r14
   1be20:	78 01       	movw	r14, r16
   1be22:	f2 e0       	ldi	r31, 0x02	; 2
   1be24:	cf 1a       	sub	r12, r31
   1be26:	d1 08       	sbc	r13, r1
   1be28:	e1 08       	sbc	r14, r1
   1be2a:	f1 08       	sbc	r15, r1
   1be2c:	56 01       	movw	r10, r12
   1be2e:	67 01       	movw	r12, r14
   1be30:	a2 1a       	sub	r10, r18
   1be32:	b3 0a       	sbc	r11, r19
   1be34:	c4 0a       	sbc	r12, r20
   1be36:	d5 0a       	sbc	r13, r21
   1be38:	79 01       	movw	r14, r18
   1be3a:	8a 01       	movw	r16, r20
   1be3c:	22 e0       	ldi	r18, 0x02	; 2
   1be3e:	30 e0       	ldi	r19, 0x00	; 0
   1be40:	40 e0       	ldi	r20, 0x00	; 0
   1be42:	50 e0       	ldi	r21, 0x00	; 0
   1be44:	0e 94 70 cd 	call	0x19ae0	; 0x19ae0 <lif_create_volume>
    if(LIF == NULL)
   1be48:	00 97       	sbiw	r24, 0x00	; 0
   1be4a:	a1 f0       	breq	.+40     	; 0x1be74 <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1be4c:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_close_volume>

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
   1be50:	82 01       	movw	r16, r4
   1be52:	d6 2d       	mov	r29, r6
   1be54:	c7 2d       	mov	r28, r7
   1be56:	ed b7       	in	r30, 0x3d	; 61
   1be58:	fe b7       	in	r31, 0x3e	; 62
   1be5a:	44 82       	std	Z+4, r4	; 0x04
   1be5c:	15 83       	std	Z+5, r17	; 0x05
   1be5e:	66 82       	std	Z+6, r6	; 0x06
   1be60:	77 82       	std	Z+7, r7	; 0x07
   1be62:	8e ee       	ldi	r24, 0xEE	; 238
   1be64:	91 e3       	ldi	r25, 0x31	; 49
   1be66:	a0 e0       	ldi	r26, 0x00	; 0
   1be68:	81 83       	std	Z+1, r24	; 0x01
   1be6a:	92 83       	std	Z+2, r25	; 0x02
   1be6c:	a3 83       	std	Z+3, r26	; 0x03
   1be6e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    return(end);
   1be72:	04 c0       	rjmp	.+8      	; 0x1be7c <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1be74:	0f ef       	ldi	r16, 0xFF	; 255
   1be76:	1f ef       	ldi	r17, 0xFF	; 255
   1be78:	df ef       	ldi	r29, 0xFF	; 255
   1be7a:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
    return(end);
}
   1be7c:	b8 01       	movw	r22, r16
   1be7e:	8d 2f       	mov	r24, r29
   1be80:	9c 2f       	mov	r25, r28
   1be82:	ad b7       	in	r26, 0x3d	; 61
   1be84:	be b7       	in	r27, 0x3e	; 62
   1be86:	17 96       	adiw	r26, 0x07	; 7
   1be88:	0f b6       	in	r0, 0x3f	; 63
   1be8a:	f8 94       	cli
   1be8c:	be bf       	out	0x3e, r27	; 62
   1be8e:	0f be       	out	0x3f, r0	; 63
   1be90:	ad bf       	out	0x3d, r26	; 61
   1be92:	df 91       	pop	r29
   1be94:	cf 91       	pop	r28
   1be96:	1f 91       	pop	r17
   1be98:	0f 91       	pop	r16
   1be9a:	ff 90       	pop	r15
   1be9c:	ef 90       	pop	r14
   1be9e:	df 90       	pop	r13
   1bea0:	cf 90       	pop	r12
   1bea2:	bf 90       	pop	r11
   1bea4:	af 90       	pop	r10
   1bea6:	7f 90       	pop	r7
   1bea8:	6f 90       	pop	r6
   1beaa:	5f 90       	pop	r5
   1beac:	4f 90       	pop	r4
   1beae:	08 95       	ret

0001beb0 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1beb0:	a5 e0       	ldi	r26, 0x05	; 5
   1beb2:	b0 e0       	ldi	r27, 0x00	; 0
   1beb4:	ee e5       	ldi	r30, 0x5E	; 94
   1beb6:	ff ed       	ldi	r31, 0xDF	; 223
   1beb8:	0c 94 99 e7 	jmp	0x1cf32	; 0x1cf32 <__prologue_saves__+0xc>
        printf("%d:%s\n", i, argv[i]);
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
   1bebc:	82 30       	cpi	r24, 0x02	; 2
   1bebe:	91 05       	cpc	r25, r1
   1bec0:	1c f4       	brge	.+6      	; 0x1bec8 <lif_tests+0x18>
        return (0);
   1bec2:	80 e0       	ldi	r24, 0x00	; 0
   1bec4:	90 e0       	ldi	r25, 0x00	; 0
   1bec6:	8f c1       	rjmp	.+798    	; 0x1c1e6 <lif_tests+0x336>

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1bec8:	fb 01       	movw	r30, r22
   1beca:	e2 80       	ldd	r14, Z+2	; 0x02
   1becc:	f3 80       	ldd	r15, Z+3	; 0x03

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
   1bece:	e1 14       	cp	r14, r1
   1bed0:	f1 04       	cpc	r15, r1
   1bed2:	09 f4       	brne	.+2      	; 0x1bed6 <lif_tests+0x26>
   1bed4:	86 c1       	rjmp	.+780    	; 0x1c1e2 <lif_tests+0x332>
   1bed6:	f7 01       	movw	r30, r14
   1bed8:	20 81       	ld	r18, Z
   1beda:	22 23       	and	r18, r18
   1bedc:	09 f4       	brne	.+2      	; 0x1bee0 <lif_tests+0x30>
   1bede:	81 c1       	rjmp	.+770    	; 0x1c1e2 <lif_tests+0x332>
   1bee0:	8b 01       	movw	r16, r22
   1bee2:	6c 01       	movw	r12, r24
        return(1);


	if(MATCHI_LEN(argv[0],"lif"))
   1bee4:	68 ea       	ldi	r22, 0xA8	; 168
   1bee6:	76 e1       	ldi	r23, 0x16	; 22
   1bee8:	f8 01       	movw	r30, r16
   1beea:	80 81       	ld	r24, Z
   1beec:	91 81       	ldd	r25, Z+1	; 0x01
   1beee:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <MATCHI_LEN>
   1bef2:	89 2b       	or	r24, r25
   1bef4:	d1 f0       	breq	.+52     	; 0x1bf2a <lif_tests+0x7a>
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1bef6:	62 e6       	ldi	r22, 0x62	; 98
   1bef8:	76 e1       	ldi	r23, 0x16	; 22
   1befa:	c7 01       	movw	r24, r14
   1befc:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   1bf00:	89 2b       	or	r24, r25
   1bf02:	29 f0       	breq	.+10     	; 0x1bf0e <lif_tests+0x5e>
		{
			lif_help(1);
   1bf04:	81 e0       	ldi	r24, 0x01	; 1
   1bf06:	90 e0       	ldi	r25, 0x00	; 0
   1bf08:	0e 94 22 c1 	call	0x18244	; 0x18244 <lif_help>
   1bf0c:	6a c1       	rjmp	.+724    	; 0x1c1e2 <lif_tests+0x332>
        return(1);


	if(MATCHI_LEN(argv[0],"lif"))
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1bf0e:	61 e6       	ldi	r22, 0x61	; 97
   1bf10:	76 e1       	ldi	r23, 0x16	; 22
   1bf12:	c7 01       	movw	r24, r14
   1bf14:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   1bf18:	89 2b       	or	r24, r25
   1bf1a:	a1 f7       	brne	.-24     	; 0x1bf04 <lif_tests+0x54>
   1bf1c:	67 e6       	ldi	r22, 0x67	; 103
   1bf1e:	76 e1       	ldi	r23, 0x16	; 22
   1bf20:	c7 01       	movw	r24, r14
   1bf22:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   1bf26:	89 2b       	or	r24, r25
   1bf28:	69 f7       	brne	.-38     	; 0x1bf04 <lif_tests+0x54>
		}
	}

// Turn one debugging
// in the future we can add tests for specific messages
	debuglevel &= ~0x400;
   1bf2a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1bf2e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1bf32:	9b 7f       	andi	r25, 0xFB	; 251
   1bf34:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1bf38:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1bf3c:	96 01       	movw	r18, r12
   1bf3e:	42 e0       	ldi	r20, 0x02	; 2
   1bf40:	50 e0       	ldi	r21, 0x00	; 0
   1bf42:	6a e6       	ldi	r22, 0x6A	; 106
   1bf44:	76 e1       	ldi	r23, 0x16	; 22
   1bf46:	c7 01       	movw	r24, r14
   1bf48:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <MATCHARGS>
   1bf4c:	89 2b       	or	r24, r25
   1bf4e:	79 f0       	breq	.+30     	; 0x1bf6e <lif_tests+0xbe>
    {
        debuglevel |= 0x400;
   1bf50:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1bf54:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1bf58:	94 60       	ori	r25, 0x04	; 4
   1bf5a:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1bf5e:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
        ptr = argv[ind++];
   1bf62:	f8 01       	movw	r30, r16
   1bf64:	e4 80       	ldd	r14, Z+4	; 0x04
   1bf66:	f5 80       	ldd	r15, Z+5	; 0x05
   1bf68:	c3 e0       	ldi	r28, 0x03	; 3
   1bf6a:	d0 e0       	ldi	r29, 0x00	; 0
   1bf6c:	02 c0       	rjmp	.+4      	; 0x1bf72 <lif_tests+0xc2>
    if(argc < 2)
        return (0);

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1bf6e:	c2 e0       	ldi	r28, 0x02	; 2
   1bf70:	d0 e0       	ldi	r29, 0x00	; 0
    {
        debuglevel |= 0x400;
        ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1bf72:	5e 01       	movw	r10, r28
   1bf74:	f3 e0       	ldi	r31, 0x03	; 3
   1bf76:	af 0e       	add	r10, r31
   1bf78:	b1 1c       	adc	r11, r1
   1bf7a:	96 01       	movw	r18, r12
   1bf7c:	a5 01       	movw	r20, r10
   1bf7e:	6d e6       	ldi	r22, 0x6D	; 109
   1bf80:	76 e1       	ldi	r23, 0x16	; 22
   1bf82:	c7 01       	movw	r24, r14
   1bf84:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <MATCHARGS>
   1bf88:	89 2b       	or	r24, r25
   1bf8a:	61 f0       	breq	.+24     	; 0x1bfa4 <lif_tests+0xf4>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1bf8c:	cc 0f       	add	r28, r28
   1bf8e:	dd 1f       	adc	r29, r29
   1bf90:	c0 0f       	add	r28, r16
   1bf92:	d1 1f       	adc	r29, r17
   1bf94:	4c 81       	ldd	r20, Y+4	; 0x04
   1bf96:	5d 81       	ldd	r21, Y+5	; 0x05
   1bf98:	6a 81       	ldd	r22, Y+2	; 0x02
   1bf9a:	7b 81       	ldd	r23, Y+3	; 0x03
   1bf9c:	88 81       	ld	r24, Y
   1bf9e:	99 81       	ldd	r25, Y+1	; 0x01
   1bfa0:	62 dc       	rcall	.-1852   	; 0x1b866 <lif_add_lif_file>
   1bfa2:	1f c1       	rjmp	.+574    	; 0x1c1e2 <lif_tests+0x332>

        return(1);
    }

    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1bfa4:	96 01       	movw	r18, r12
   1bfa6:	a5 01       	movw	r20, r10
   1bfa8:	64 e7       	ldi	r22, 0x74	; 116
   1bfaa:	76 e1       	ldi	r23, 0x16	; 22
   1bfac:	c7 01       	movw	r24, r14
   1bfae:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <MATCHARGS>
   1bfb2:	89 2b       	or	r24, r25
   1bfb4:	69 f0       	breq	.+26     	; 0x1bfd0 <lif_tests+0x120>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1bfb6:	cc 0f       	add	r28, r28
   1bfb8:	dd 1f       	adc	r29, r29
   1bfba:	c0 0f       	add	r28, r16
   1bfbc:	d1 1f       	adc	r29, r17
   1bfbe:	4c 81       	ldd	r20, Y+4	; 0x04
   1bfc0:	5d 81       	ldd	r21, Y+5	; 0x05
   1bfc2:	6a 81       	ldd	r22, Y+2	; 0x02
   1bfc4:	7b 81       	ldd	r23, Y+3	; 0x03
   1bfc6:	88 81       	ld	r24, Y
   1bfc8:	99 81       	ldd	r25, Y+1	; 0x01
   1bfca:	0e 94 10 d7 	call	0x1ae20	; 0x1ae20 <lif_add_ascii_file_as_e010>
   1bfce:	09 c1       	rjmp	.+530    	; 0x1c1e2 <lif_tests+0x332>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1bfd0:	96 01       	movw	r18, r12
   1bfd2:	a5 01       	movw	r20, r10
   1bfd4:	68 e7       	ldi	r22, 0x78	; 120
   1bfd6:	76 e1       	ldi	r23, 0x16	; 22
   1bfd8:	c7 01       	movw	r24, r14
   1bfda:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <MATCHARGS>
   1bfde:	89 2b       	or	r24, r25
   1bfe0:	09 f4       	brne	.+2      	; 0x1bfe4 <lif_tests+0x134>
   1bfe2:	42 c0       	rjmp	.+132    	; 0x1c068 <lif_tests+0x1b8>
    {
///@brief format LIF image
        long dir,sectors;
        char *name = argv[ind];
   1bfe4:	ce 01       	movw	r24, r28
   1bfe6:	88 0f       	add	r24, r24
   1bfe8:	99 1f       	adc	r25, r25
   1bfea:	e8 01       	movw	r28, r16
   1bfec:	c8 0f       	add	r28, r24
   1bfee:	d9 1f       	adc	r29, r25
   1bff0:	c8 80       	ld	r12, Y
   1bff2:	d9 80       	ldd	r13, Y+1	; 0x01
        char *label = argv[ind+1];
   1bff4:	aa 80       	ldd	r10, Y+2	; 0x02
   1bff6:	bb 80       	ldd	r11, Y+3	; 0x03
        char *model = argv[ind+2];
   1bff8:	0c 80       	ldd	r0, Y+4	; 0x04
   1bffa:	dd 81       	ldd	r29, Y+5	; 0x05
   1bffc:	c0 2d       	mov	r28, r0
        if( MATCHI_LEN(model,"hp"))
   1bffe:	63 e8       	ldi	r22, 0x83	; 131
   1c000:	76 e1       	ldi	r23, 0x16	; 22
   1c002:	ce 01       	movw	r24, r28
   1c004:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <MATCHI_LEN>
   1c008:	89 2b       	or	r24, r25
   1c00a:	09 f0       	breq	.+2      	; 0x1c00e <lif_tests+0x15e>
            model +=2;
   1c00c:	22 96       	adiw	r28, 0x02	; 2
        if(hpdir_find_drive(model,0, 0))
   1c00e:	40 e0       	ldi	r20, 0x00	; 0
   1c010:	50 e0       	ldi	r21, 0x00	; 0
   1c012:	60 e0       	ldi	r22, 0x00	; 0
   1c014:	70 e0       	ldi	r23, 0x00	; 0
   1c016:	ce 01       	movw	r24, r28
   1c018:	0e 94 65 a4 	call	0x148ca	; 0x148ca <hpdir_find_drive>
   1c01c:	89 2b       	or	r24, r25
   1c01e:	b9 f0       	breq	.+46     	; 0x1c04e <lif_tests+0x19e>
        {
            dir = lif_dir_count(hpdir.BLOCKS);
   1c020:	60 91 1a 20 	lds	r22, 0x201A	; 0x80201a <hpdir+0xac>
   1c024:	70 91 1b 20 	lds	r23, 0x201B	; 0x80201b <hpdir+0xad>
   1c028:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <hpdir+0xae>
   1c02c:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <hpdir+0xaf>
   1c030:	0e 94 48 a4 	call	0x14890	; 0x14890 <lif_dir_count>
   1c034:	9b 01       	movw	r18, r22
   1c036:	ac 01       	movw	r20, r24
            sectors = hpdir.BLOCKS;
			// NOTE: we could grab the directory size for non 0 entries in the hpdir.ini file - I use a computed value which is also fine
            lif_create_image(name, label, dir, sectors);
   1c038:	e0 90 1a 20 	lds	r14, 0x201A	; 0x80201a <hpdir+0xac>
   1c03c:	f0 90 1b 20 	lds	r15, 0x201B	; 0x80201b <hpdir+0xad>
   1c040:	00 91 1c 20 	lds	r16, 0x201C	; 0x80201c <hpdir+0xae>
   1c044:	10 91 1d 20 	lds	r17, 0x201D	; 0x80201d <hpdir+0xaf>
   1c048:	b5 01       	movw	r22, r10
   1c04a:	c6 01       	movw	r24, r12
   1c04c:	2e c0       	rjmp	.+92     	; 0x1c0aa <lif_tests+0x1fa>
            return(1);
        }
        printf("Disk: %s not found in hpdir.ini\n", model);
   1c04e:	ed b7       	in	r30, 0x3d	; 61
   1c050:	fe b7       	in	r31, 0x3e	; 62
   1c052:	d5 83       	std	Z+5, r29	; 0x05
   1c054:	c4 83       	std	Z+4, r28	; 0x04
   1c056:	8f e3       	ldi	r24, 0x3F	; 63
   1c058:	94 e4       	ldi	r25, 0x44	; 68
   1c05a:	a0 e0       	ldi	r26, 0x00	; 0
   1c05c:	81 83       	std	Z+1, r24	; 0x01
   1c05e:	92 83       	std	Z+2, r25	; 0x02
   1c060:	a3 83       	std	Z+3, r26	; 0x03
   1c062:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1c066:	bd c0       	rjmp	.+378    	; 0x1c1e2 <lif_tests+0x332>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1c068:	96 01       	movw	r18, r12
   1c06a:	ae 01       	movw	r20, r28
   1c06c:	4c 5f       	subi	r20, 0xFC	; 252
   1c06e:	5f 4f       	sbci	r21, 0xFF	; 255
   1c070:	66 e8       	ldi	r22, 0x86	; 134
   1c072:	76 e1       	ldi	r23, 0x16	; 22
   1c074:	c7 01       	movw	r24, r14
   1c076:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <MATCHARGS>
   1c07a:	89 2b       	or	r24, r25
   1c07c:	c1 f0       	breq	.+48     	; 0x1c0ae <lif_tests+0x1fe>
    {
///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1c07e:	cc 0f       	add	r28, r28
   1c080:	dd 1f       	adc	r29, r29
   1c082:	c0 0f       	add	r28, r16
   1c084:	d1 1f       	adc	r29, r17
   1c086:	8c 81       	ldd	r24, Y+4	; 0x04
   1c088:	9d 81       	ldd	r25, Y+5	; 0x05
   1c08a:	0e 94 11 48 	call	0x9022	; 0x9022 <atol>
   1c08e:	4b 01       	movw	r8, r22
   1c090:	5c 01       	movw	r10, r24
   1c092:	8e 81       	ldd	r24, Y+6	; 0x06
   1c094:	9f 81       	ldd	r25, Y+7	; 0x07
   1c096:	0e 94 11 48 	call	0x9022	; 0x9022 <atol>
   1c09a:	7b 01       	movw	r14, r22
   1c09c:	8c 01       	movw	r16, r24
   1c09e:	6a 81       	ldd	r22, Y+2	; 0x02
   1c0a0:	7b 81       	ldd	r23, Y+3	; 0x03
   1c0a2:	a5 01       	movw	r20, r10
   1c0a4:	94 01       	movw	r18, r8
   1c0a6:	88 81       	ld	r24, Y
   1c0a8:	99 81       	ldd	r25, Y+1	; 0x01
   1c0aa:	7b de       	rcall	.-778    	; 0x1bda2 <lif_create_image>
   1c0ac:	9a c0       	rjmp	.+308    	; 0x1c1e2 <lif_tests+0x332>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1c0ae:	96 01       	movw	r18, r12
   1c0b0:	ae 01       	movw	r20, r28
   1c0b2:	4e 5f       	subi	r20, 0xFE	; 254
   1c0b4:	5f 4f       	sbci	r21, 0xFF	; 255
   1c0b6:	6d e8       	ldi	r22, 0x8D	; 141
   1c0b8:	76 e1       	ldi	r23, 0x16	; 22
   1c0ba:	c7 01       	movw	r24, r14
   1c0bc:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <MATCHARGS>
   1c0c0:	89 2b       	or	r24, r25
   1c0c2:	51 f0       	breq	.+20     	; 0x1c0d8 <lif_tests+0x228>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1c0c4:	cc 0f       	add	r28, r28
   1c0c6:	dd 1f       	adc	r29, r29
   1c0c8:	c0 0f       	add	r28, r16
   1c0ca:	d1 1f       	adc	r29, r17
   1c0cc:	6a 81       	ldd	r22, Y+2	; 0x02
   1c0ce:	7b 81       	ldd	r23, Y+3	; 0x03
   1c0d0:	88 81       	ld	r24, Y
   1c0d2:	99 81       	ldd	r25, Y+1	; 0x01
   1c0d4:	51 dd       	rcall	.-1374   	; 0x1bb78 <lif_del_file>
   1c0d6:	85 c0       	rjmp	.+266    	; 0x1c1e2 <lif_tests+0x332>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1c0d8:	96 01       	movw	r18, r12
   1c0da:	ae 01       	movw	r20, r28
   1c0dc:	4f 5f       	subi	r20, 0xFF	; 255
   1c0de:	5f 4f       	sbci	r21, 0xFF	; 255
   1c0e0:	66 ec       	ldi	r22, 0xC6	; 198
   1c0e2:	7b e0       	ldi	r23, 0x0B	; 11
   1c0e4:	c7 01       	movw	r24, r14
   1c0e6:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <MATCHARGS>
   1c0ea:	89 2b       	or	r24, r25
   1c0ec:	49 f0       	breq	.+18     	; 0x1c100 <lif_tests+0x250>
    {
        lif_dir(argv[ind]);
   1c0ee:	cc 0f       	add	r28, r28
   1c0f0:	dd 1f       	adc	r29, r29
   1c0f2:	c0 0f       	add	r28, r16
   1c0f4:	d1 1f       	adc	r29, r17
   1c0f6:	88 81       	ld	r24, Y
   1c0f8:	99 81       	ldd	r25, Y+1	; 0x01
   1c0fa:	0e 94 ba d2 	call	0x1a574	; 0x1a574 <lif_dir>
   1c0fe:	71 c0       	rjmp	.+226    	; 0x1c1e2 <lif_tests+0x332>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1c100:	96 01       	movw	r18, r12
   1c102:	a5 01       	movw	r20, r10
   1c104:	61 e9       	ldi	r22, 0x91	; 145
   1c106:	76 e1       	ldi	r23, 0x16	; 22
   1c108:	c7 01       	movw	r24, r14
   1c10a:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <MATCHARGS>
   1c10e:	89 2b       	or	r24, r25
   1c110:	71 f0       	breq	.+28     	; 0x1c12e <lif_tests+0x27e>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1c112:	ce 01       	movw	r24, r28
   1c114:	88 0f       	add	r24, r24
   1c116:	99 1f       	adc	r25, r25
   1c118:	e8 01       	movw	r28, r16
   1c11a:	c8 0f       	add	r28, r24
   1c11c:	d9 1f       	adc	r29, r25
   1c11e:	4c 81       	ldd	r20, Y+4	; 0x04
   1c120:	5d 81       	ldd	r21, Y+5	; 0x05
   1c122:	6a 81       	ldd	r22, Y+2	; 0x02
   1c124:	7b 81       	ldd	r23, Y+3	; 0x03
   1c126:	88 81       	ld	r24, Y
   1c128:	99 81       	ldd	r25, Y+1	; 0x01
   1c12a:	65 da       	rcall	.-2870   	; 0x1b5f6 <lif_extract_lif_as_lif>
   1c12c:	5a c0       	rjmp	.+180    	; 0x1c1e2 <lif_tests+0x332>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1c12e:	96 01       	movw	r18, r12
   1c130:	a5 01       	movw	r20, r10
   1c132:	6c e9       	ldi	r22, 0x9C	; 156
   1c134:	76 e1       	ldi	r23, 0x16	; 22
   1c136:	c7 01       	movw	r24, r14
   1c138:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <MATCHARGS>
   1c13c:	89 2b       	or	r24, r25
   1c13e:	79 f0       	breq	.+30     	; 0x1c15e <lif_tests+0x2ae>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1c140:	ce 01       	movw	r24, r28
   1c142:	88 0f       	add	r24, r24
   1c144:	99 1f       	adc	r25, r25
   1c146:	e8 01       	movw	r28, r16
   1c148:	c8 0f       	add	r28, r24
   1c14a:	d9 1f       	adc	r29, r25
   1c14c:	4c 81       	ldd	r20, Y+4	; 0x04
   1c14e:	5d 81       	ldd	r21, Y+5	; 0x05
   1c150:	6a 81       	ldd	r22, Y+2	; 0x02
   1c152:	7b 81       	ldd	r23, Y+3	; 0x03
   1c154:	88 81       	ld	r24, Y
   1c156:	99 81       	ldd	r25, Y+1	; 0x01
   1c158:	0e 94 4c d8 	call	0x1b098	; 0x1b098 <lif_extract_e010_as_ascii>
   1c15c:	42 c0       	rjmp	.+132    	; 0x1c1e2 <lif_tests+0x332>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1c15e:	96 01       	movw	r18, r12
   1c160:	a5 01       	movw	r20, r10
   1c162:	63 ed       	ldi	r22, 0xD3	; 211
   1c164:	7b e0       	ldi	r23, 0x0B	; 11
   1c166:	c7 01       	movw	r24, r14
   1c168:	0e 94 d2 32 	call	0x65a4	; 0x65a4 <MATCHARGS>
   1c16c:	89 2b       	or	r24, r25
   1c16e:	71 f0       	breq	.+28     	; 0x1c18c <lif_tests+0x2dc>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1c170:	ce 01       	movw	r24, r28
   1c172:	88 0f       	add	r24, r24
   1c174:	99 1f       	adc	r25, r25
   1c176:	e8 01       	movw	r28, r16
   1c178:	c8 0f       	add	r28, r24
   1c17a:	d9 1f       	adc	r29, r25
   1c17c:	4c 81       	ldd	r20, Y+4	; 0x04
   1c17e:	5d 81       	ldd	r21, Y+5	; 0x05
   1c180:	6a 81       	ldd	r22, Y+2	; 0x02
   1c182:	7b 81       	ldd	r23, Y+3	; 0x03
   1c184:	88 81       	ld	r24, Y
   1c186:	99 81       	ldd	r25, Y+1	; 0x01
   1c188:	8d dd       	rcall	.-1254   	; 0x1bca4 <lif_rename_file>
   1c18a:	2b c0       	rjmp	.+86     	; 0x1c1e2 <lif_tests+0x332>
        return(1);
    }

	if(MATCHI_LEN(argv[0],"td02lif"))
   1c18c:	64 ea       	ldi	r22, 0xA4	; 164
   1c18e:	76 e1       	ldi	r23, 0x16	; 22
   1c190:	f8 01       	movw	r30, r16
   1c192:	80 81       	ld	r24, Z
   1c194:	91 81       	ldd	r25, Z+1	; 0x01
   1c196:	0e 94 fc 32 	call	0x65f8	; 0x65f8 <MATCHI_LEN>
   1c19a:	89 2b       	or	r24, r25
   1c19c:	09 f4       	brne	.+2      	; 0x1c1a0 <lif_tests+0x2f0>
   1c19e:	91 ce       	rjmp	.-734    	; 0x1bec2 <lif_tests+0x12>
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1c1a0:	62 e6       	ldi	r22, 0x62	; 98
   1c1a2:	76 e1       	ldi	r23, 0x16	; 22
   1c1a4:	c7 01       	movw	r24, r14
   1c1a6:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   1c1aa:	89 2b       	or	r24, r25
   1c1ac:	59 f0       	breq	.+22     	; 0x1c1c4 <lif_tests+0x314>
		{
#ifdef TELEDISK
			td0_help(1);
			return(1);
#else
		    printf("td02lif support not enabled\n");
   1c1ae:	82 e2       	ldi	r24, 0x22	; 34
   1c1b0:	94 e4       	ldi	r25, 0x44	; 68
   1c1b2:	a0 e0       	ldi	r26, 0x00	; 0
   1c1b4:	ed b7       	in	r30, 0x3d	; 61
   1c1b6:	fe b7       	in	r31, 0x3e	; 62
   1c1b8:	81 83       	std	Z+1, r24	; 0x01
   1c1ba:	92 83       	std	Z+2, r25	; 0x02
   1c1bc:	a3 83       	std	Z+3, r26	; 0x03
   1c1be:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1c1c2:	0f c0       	rjmp	.+30     	; 0x1c1e2 <lif_tests+0x332>
        return(1);
    }

	if(MATCHI_LEN(argv[0],"td02lif"))
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1c1c4:	61 e6       	ldi	r22, 0x61	; 97
   1c1c6:	76 e1       	ldi	r23, 0x16	; 22
   1c1c8:	c7 01       	movw	r24, r14
   1c1ca:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   1c1ce:	89 2b       	or	r24, r25
   1c1d0:	71 f7       	brne	.-36     	; 0x1c1ae <lif_tests+0x2fe>
   1c1d2:	67 e6       	ldi	r22, 0x67	; 103
   1c1d4:	76 e1       	ldi	r23, 0x16	; 22
   1c1d6:	c7 01       	movw	r24, r14
   1c1d8:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   1c1dc:	89 2b       	or	r24, r25
   1c1de:	39 f7       	brne	.-50     	; 0x1c1ae <lif_tests+0x2fe>
   1c1e0:	70 ce       	rjmp	.-800    	; 0x1bec2 <lif_tests+0x12>

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);
   1c1e2:	81 e0       	ldi	r24, 0x01	; 1
   1c1e4:	90 e0       	ldi	r25, 0x00	; 0
        td02lif(argc,argv);
        return(1);
#endif
    }
    return(0);
}
   1c1e6:	cd b7       	in	r28, 0x3d	; 61
   1c1e8:	de b7       	in	r29, 0x3e	; 62
   1c1ea:	25 96       	adiw	r28, 0x05	; 5
   1c1ec:	ec e0       	ldi	r30, 0x0C	; 12
   1c1ee:	bd c6       	rjmp	.+3450   	; 0x1cf6a <__epilogue_restores__+0xc>

0001c1f0 <lcd_task>:
static int16_t lcd_display_time = 0;

///@brief LCD timer function called at 1000HZ
void lcd_task()
{
	++lcd_display_time;
   1c1f0:	80 91 e0 19 	lds	r24, 0x19E0	; 0x8019e0 <lcd_display_time>
   1c1f4:	90 91 e1 19 	lds	r25, 0x19E1	; 0x8019e1 <lcd_display_time+0x1>
   1c1f8:	01 96       	adiw	r24, 0x01	; 1
   1c1fa:	90 93 e1 19 	sts	0x19E1, r25	; 0x8019e1 <lcd_display_time+0x1>
   1c1fe:	80 93 e0 19 	sts	0x19E0, r24	; 0x8019e0 <lcd_display_time>
   1c202:	08 95       	ret

0001c204 <copyright>:
int8_t debug_input = 0;

///@brief Display Copyright
///@return void
void copyright()
{
   1c204:	00 d0       	rcall	.+0      	; 0x1c206 <copyright+0x2>
   1c206:	00 d0       	rcall	.+0      	; 0x1c208 <copyright+0x4>
   1c208:	1f 92       	push	r1
    printf("HP85 Disk and Device Emulator with built in LIF utilities\n");
   1c20a:	84 e7       	ldi	r24, 0x74	; 116
   1c20c:	9b e4       	ldi	r25, 0x4B	; 75
   1c20e:	a0 e0       	ldi	r26, 0x00	; 0
   1c210:	ed b7       	in	r30, 0x3d	; 61
   1c212:	fe b7       	in	r31, 0x3e	; 62
   1c214:	81 83       	std	Z+1, r24	; 0x01
   1c216:	92 83       	std	Z+2, r25	; 0x02
   1c218:	a3 83       	std	Z+3, r26	; 0x03
   1c21a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1c21e:	87 e5       	ldi	r24, 0x57	; 87
   1c220:	9b e4       	ldi	r25, 0x4B	; 75
   1c222:	a0 e0       	ldi	r26, 0x00	; 0
   1c224:	ed b7       	in	r30, 0x3d	; 61
   1c226:	fe b7       	in	r31, 0x3e	; 62
   1c228:	81 83       	std	Z+1, r24	; 0x01
   1c22a:	92 83       	std	Z+2, r25	; 0x02
   1c22c:	a3 83       	std	Z+3, r26	; 0x03
   1c22e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf(" GNU version 3\n");
   1c232:	87 e4       	ldi	r24, 0x47	; 71
   1c234:	9b e4       	ldi	r25, 0x4B	; 75
   1c236:	a0 e0       	ldi	r26, 0x00	; 0
   1c238:	ed b7       	in	r30, 0x3d	; 61
   1c23a:	fe b7       	in	r31, 0x3e	; 62
   1c23c:	81 83       	std	Z+1, r24	; 0x01
   1c23e:	92 83       	std	Z+2, r25	; 0x02
   1c240:	a3 83       	std	Z+3, r26	; 0x03
   1c242:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c246:	80 e2       	ldi	r24, 0x20	; 32
   1c248:	9b e4       	ldi	r25, 0x4B	; 75
   1c24a:	a0 e0       	ldi	r26, 0x00	; 0
   1c24c:	ed b7       	in	r30, 0x3d	; 61
   1c24e:	fe b7       	in	r31, 0x3e	; 62
   1c250:	81 83       	std	Z+1, r24	; 0x01
   1c252:	92 83       	std	Z+2, r25	; 0x02
   1c254:	a3 83       	std	Z+3, r26	; 0x03
   1c256:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c25a:	8c ea       	ldi	r24, 0xAC	; 172
   1c25c:	96 e1       	ldi	r25, 0x16	; 22
   1c25e:	ed b7       	in	r30, 0x3d	; 61
   1c260:	fe b7       	in	r31, 0x3e	; 62
   1c262:	95 83       	std	Z+5, r25	; 0x05
   1c264:	84 83       	std	Z+4, r24	; 0x04
   1c266:	86 e0       	ldi	r24, 0x06	; 6
   1c268:	9b e4       	ldi	r25, 0x4B	; 75
   1c26a:	a0 e0       	ldi	r26, 0x00	; 0
   1c26c:	81 83       	std	Z+1, r24	; 0x01
   1c26e:	92 83       	std	Z+2, r25	; 0x02
   1c270:	a3 83       	std	Z+3, r26	; 0x03
   1c272:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c276:	80 ed       	ldi	r24, 0xD0	; 208
   1c278:	96 e1       	ldi	r25, 0x16	; 22
   1c27a:	ed b7       	in	r30, 0x3d	; 61
   1c27c:	fe b7       	in	r31, 0x3e	; 62
   1c27e:	95 83       	std	Z+5, r25	; 0x05
   1c280:	84 83       	std	Z+4, r24	; 0x04
   1c282:	8c ee       	ldi	r24, 0xEC	; 236
   1c284:	9a e4       	ldi	r25, 0x4A	; 74
   1c286:	a0 e0       	ldi	r26, 0x00	; 0
   1c288:	81 83       	std	Z+1, r24	; 0x01
   1c28a:	92 83       	std	Z+2, r25	; 0x02
   1c28c:	a3 83       	std	Z+3, r26	; 0x03
   1c28e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("\n");
   1c292:	8a ee       	ldi	r24, 0xEA	; 234
   1c294:	9a e4       	ldi	r25, 0x4A	; 74
   1c296:	a0 e0       	ldi	r26, 0x00	; 0
   1c298:	ed b7       	in	r30, 0x3d	; 61
   1c29a:	fe b7       	in	r31, 0x3e	; 62
   1c29c:	81 83       	std	Z+1, r24	; 0x01
   1c29e:	92 83       	std	Z+2, r25	; 0x02
   1c2a0:	a3 83       	std	Z+3, r26	; 0x03
   1c2a2:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
}
   1c2a6:	0f 90       	pop	r0
   1c2a8:	0f 90       	pop	r0
   1c2aa:	0f 90       	pop	r0
   1c2ac:	0f 90       	pop	r0
   1c2ae:	0f 90       	pop	r0
   1c2b0:	08 95       	ret

0001c2b2 <lcd_time>:
/// - Example output: "Thu Dec  8 21:45:05 EST 2011".
///
/// @return buf string pointer.
MEMSPACE
char *lcd_time(tm_t *t, char *buf, int max)
{
   1c2b2:	a1 e1       	ldi	r26, 0x11	; 17
   1c2b4:	b0 e0       	ldi	r27, 0x00	; 0
   1c2b6:	ee e5       	ldi	r30, 0x5E	; 94
   1c2b8:	f1 ee       	ldi	r31, 0xE1	; 225
   1c2ba:	41 c6       	rjmp	.+3202   	; 0x1cf3e <__prologue_saves__+0x18>
   1c2bc:	ec 01       	movw	r28, r24
   1c2be:	7b 01       	movw	r14, r22
   1c2c0:	8a 01       	movw	r16, r20
// normaize tm_t before output
    (void) normalize(t,0);
   1c2c2:	60 e0       	ldi	r22, 0x00	; 0
   1c2c4:	70 e0       	ldi	r23, 0x00	; 0
   1c2c6:	0e 94 10 39 	call	0x7220	; 0x7220 <normalize>
    memset(buf,0,max);
   1c2ca:	a8 01       	movw	r20, r16
   1c2cc:	60 e0       	ldi	r22, 0x00	; 0
   1c2ce:	70 e0       	ldi	r23, 0x00	; 0
   1c2d0:	c7 01       	movw	r24, r14
   1c2d2:	0e 94 8b eb 	call	0x1d716	; 0x1d716 <memset>
    snprintf(buf,max-1,"%s %2d %02d:%02d:%02d",
   1c2d6:	88 85       	ldd	r24, Y+8	; 0x08
   1c2d8:	99 85       	ldd	r25, Y+9	; 0x09
   1c2da:	0e 94 f5 36 	call	0x6dea	; 0x6dea <tm_mon_to_ascii>
   1c2de:	28 81       	ld	r18, Y
   1c2e0:	39 81       	ldd	r19, Y+1	; 0x01
   1c2e2:	ed b7       	in	r30, 0x3d	; 61
   1c2e4:	fe b7       	in	r31, 0x3e	; 62
   1c2e6:	31 8b       	std	Z+17, r19	; 0x11
   1c2e8:	20 8b       	std	Z+16, r18	; 0x10
   1c2ea:	2a 81       	ldd	r18, Y+2	; 0x02
   1c2ec:	3b 81       	ldd	r19, Y+3	; 0x03
   1c2ee:	37 87       	std	Z+15, r19	; 0x0f
   1c2f0:	26 87       	std	Z+14, r18	; 0x0e
   1c2f2:	2c 81       	ldd	r18, Y+4	; 0x04
   1c2f4:	3d 81       	ldd	r19, Y+5	; 0x05
   1c2f6:	35 87       	std	Z+13, r19	; 0x0d
   1c2f8:	24 87       	std	Z+12, r18	; 0x0c
   1c2fa:	2e 81       	ldd	r18, Y+6	; 0x06
   1c2fc:	3f 81       	ldd	r19, Y+7	; 0x07
   1c2fe:	33 87       	std	Z+11, r19	; 0x0b
   1c300:	22 87       	std	Z+10, r18	; 0x0a
   1c302:	91 87       	std	Z+9, r25	; 0x09
   1c304:	80 87       	std	Z+8, r24	; 0x08
   1c306:	84 ed       	ldi	r24, 0xD4	; 212
   1c308:	9a e4       	ldi	r25, 0x4A	; 74
   1c30a:	a0 e0       	ldi	r26, 0x00	; 0
   1c30c:	85 83       	std	Z+5, r24	; 0x05
   1c30e:	96 83       	std	Z+6, r25	; 0x06
   1c310:	a7 83       	std	Z+7, r26	; 0x07
   1c312:	01 50       	subi	r16, 0x01	; 1
   1c314:	11 09       	sbc	r17, r1
   1c316:	14 83       	std	Z+4, r17	; 0x04
   1c318:	03 83       	std	Z+3, r16	; 0x03
   1c31a:	f2 82       	std	Z+2, r15	; 0x02
   1c31c:	e1 82       	std	Z+1, r14	; 0x01
   1c31e:	0e 94 49 47 	call	0x8e92	; 0x8e92 <snprintf_P>
        (int)t->tm_mday,
        (int)t->tm_hour,
        (int)t->tm_min,
        (int)t->tm_sec);
    return(buf);
}
   1c322:	c7 01       	movw	r24, r14
   1c324:	cd b7       	in	r28, 0x3d	; 61
   1c326:	de b7       	in	r29, 0x3e	; 62
   1c328:	61 96       	adiw	r28, 0x11	; 17
   1c32a:	e6 e0       	ldi	r30, 0x06	; 6
   1c32c:	24 c6       	rjmp	.+3144   	; 0x1cf76 <__epilogue_restores__+0x18>

0001c32e <lcd_backlight>:

///@brief lcd_backlight LCD Backlight settings
/// @param[in] rgb: hex value 0xRRGGBB, RR,GG,BB values are 0 to 255
uint8_t  _backlight[5] = { 0x7c, '+', 0x80, 0x80, 0x80 };	/* Backlight half bright */
uint8_t lcd_backlight(uint32_t rgb)
{
   1c32e:	cf 93       	push	r28
   1c330:	00 d0       	rcall	.+0      	; 0x1c332 <lcd_backlight+0x4>
   1c332:	1f 92       	push	r1

	_backlight[2] = 0xff & (rgb >> 16);
   1c334:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <_backlight+0x2>
	_backlight[3] = 0xff & (rgb >> 8);
   1c338:	70 93 f3 02 	sts	0x02F3, r23	; 0x8002f3 <_backlight+0x3>
	_backlight[4] = 0xff & (rgb );
   1c33c:	60 93 f4 02 	sts	0x02F4, r22	; 0x8002f4 <_backlight+0x4>

	if(! i2c_fn(0x72, TW_WRITE, _backlight, sizeof(_backlight)) )
   1c340:	25 e0       	ldi	r18, 0x05	; 5
   1c342:	40 ef       	ldi	r20, 0xF0	; 240
   1c344:	52 e0       	ldi	r21, 0x02	; 2
   1c346:	60 e0       	ldi	r22, 0x00	; 0
   1c348:	82 e7       	ldi	r24, 0x72	; 114
   1c34a:	0e 94 3c 2d 	call	0x5a78	; 0x5a78 <i2c_fn>
   1c34e:	c8 2f       	mov	r28, r24
   1c350:	81 11       	cpse	r24, r1
   1c352:	0d c0       	rjmp	.+26     	; 0x1c36e <lcd_backlight+0x40>
	{
		i2c_display_task_errors();
   1c354:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1c358:	8a eb       	ldi	r24, 0xBA	; 186
   1c35a:	9a e4       	ldi	r25, 0x4A	; 74
   1c35c:	a0 e0       	ldi	r26, 0x00	; 0
   1c35e:	ed b7       	in	r30, 0x3d	; 61
   1c360:	fe b7       	in	r31, 0x3e	; 62
   1c362:	81 83       	std	Z+1, r24	; 0x01
   1c364:	92 83       	std	Z+2, r25	; 0x02
   1c366:	a3 83       	std	Z+3, r26	; 0x03
   1c368:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1c36c:	01 c0       	rjmp	.+2      	; 0x1c370 <lcd_backlight+0x42>
		return(0);
	}
	return(1);
   1c36e:	c1 e0       	ldi	r28, 0x01	; 1
}
   1c370:	8c 2f       	mov	r24, r28
   1c372:	0f 90       	pop	r0
   1c374:	0f 90       	pop	r0
   1c376:	0f 90       	pop	r0
   1c378:	cf 91       	pop	r28
   1c37a:	08 95       	ret

0001c37c <lcd_setup>:
///@brief LCD setup code
/// For a SparkFun SERLCD 2x16 display
/// Initializes the I2C deiplay update task structure 
/// Passes the structures to the interrupt handler
void lcd_setup()
{
   1c37c:	cf 93       	push	r28
   1c37e:	ad b7       	in	r26, 0x3d	; 61
   1c380:	be b7       	in	r27, 0x3e	; 62
   1c382:	17 97       	sbiw	r26, 0x07	; 7
   1c384:	0f b6       	in	r0, 0x3f	; 63
   1c386:	f8 94       	cli
   1c388:	be bf       	out	0x3e, r27	; 62
   1c38a:	0f be       	out	0x3f, r0	; 63
   1c38c:	ad bf       	out	0x3d, r26	; 61
	int ind = 0;
    uint8_t sreg = SREG;
   1c38e:	cf b7       	in	r28, 0x3f	; 63

    printf("I2C LCD initialization start\n");
   1c390:	8c e9       	ldi	r24, 0x9C	; 156
   1c392:	9a e4       	ldi	r25, 0x4A	; 74
   1c394:	a0 e0       	ldi	r26, 0x00	; 0
   1c396:	ed b7       	in	r30, 0x3d	; 61
   1c398:	fe b7       	in	r31, 0x3e	; 62
   1c39a:	81 83       	std	Z+1, r24	; 0x01
   1c39c:	92 83       	std	Z+2, r25	; 0x02
   1c39e:	a3 83       	std	Z+3, r26	; 0x03
   1c3a0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

	if(set_timers(lcd_task,1) == -1)
   1c3a4:	61 e0       	ldi	r22, 0x01	; 1
   1c3a6:	70 e0       	ldi	r23, 0x00	; 0
   1c3a8:	88 ef       	ldi	r24, 0xF8	; 248
   1c3aa:	90 ee       	ldi	r25, 0xE0	; 224
   1c3ac:	0e 94 1f 35 	call	0x6a3e	; 0x6a3e <set_timers>
   1c3b0:	01 96       	adiw	r24, 0x01	; 1
   1c3b2:	51 f4       	brne	.+20     	; 0x1c3c8 <lcd_setup+0x4c>
        printf("lcd_task init failed\n");
   1c3b4:	86 e8       	ldi	r24, 0x86	; 134
   1c3b6:	9a e4       	ldi	r25, 0x4A	; 74
   1c3b8:	a0 e0       	ldi	r26, 0x00	; 0
   1c3ba:	ed b7       	in	r30, 0x3d	; 61
   1c3bc:	fe b7       	in	r31, 0x3e	; 62
   1c3be:	81 83       	std	Z+1, r24	; 0x01
   1c3c0:	92 83       	std	Z+2, r25	; 0x02
   1c3c2:	a3 83       	std	Z+3, r26	; 0x03
   1c3c4:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

	i2c_init(100000);
   1c3c8:	60 ea       	ldi	r22, 0xA0	; 160
   1c3ca:	76 e8       	ldi	r23, 0x86	; 134
   1c3cc:	81 e0       	ldi	r24, 0x01	; 1
   1c3ce:	90 e0       	ldi	r25, 0x00	; 0
   1c3d0:	0e 94 43 2c 	call	0x5886	; 0x5886 <i2c_init>

	i2c_task_init();
   1c3d4:	0e 94 04 2c 	call	0x5808	; 0x5808 <i2c_task_init>

	cli();
   1c3d8:	f8 94       	cli

	// Default startup message
    sprintf((char *) _line1, "%-16s", "HP85Disk V2");
   1c3da:	84 ef       	ldi	r24, 0xF4	; 244
   1c3dc:	96 e1       	ldi	r25, 0x16	; 22
   1c3de:	ed b7       	in	r30, 0x3d	; 61
   1c3e0:	fe b7       	in	r31, 0x3e	; 62
   1c3e2:	97 83       	std	Z+7, r25	; 0x07
   1c3e4:	86 83       	std	Z+6, r24	; 0x06
   1c3e6:	80 e8       	ldi	r24, 0x80	; 128
   1c3e8:	9a e4       	ldi	r25, 0x4A	; 74
   1c3ea:	a0 e0       	ldi	r26, 0x00	; 0
   1c3ec:	83 83       	std	Z+3, r24	; 0x03
   1c3ee:	94 83       	std	Z+4, r25	; 0x04
   1c3f0:	a5 83       	std	Z+5, r26	; 0x05
   1c3f2:	8c e0       	ldi	r24, 0x0C	; 12
   1c3f4:	93 e0       	ldi	r25, 0x03	; 3
   1c3f6:	92 83       	std	Z+2, r25	; 0x02
   1c3f8:	81 83       	std	Z+1, r24	; 0x01
   1c3fa:	0e 94 5d 47 	call	0x8eba	; 0x8eba <sprintf_P>
    sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1c3fe:	80 e0       	ldi	r24, 0x00	; 0
   1c400:	97 e1       	ldi	r25, 0x17	; 23
   1c402:	ed b7       	in	r30, 0x3d	; 61
   1c404:	fe b7       	in	r31, 0x3e	; 62
   1c406:	97 83       	std	Z+7, r25	; 0x07
   1c408:	86 83       	std	Z+6, r24	; 0x06
   1c40a:	8a e7       	ldi	r24, 0x7A	; 122
   1c40c:	9a e4       	ldi	r25, 0x4A	; 74
   1c40e:	a0 e0       	ldi	r26, 0x00	; 0
   1c410:	83 83       	std	Z+3, r24	; 0x03
   1c412:	94 83       	std	Z+4, r25	; 0x04
   1c414:	a5 83       	std	Z+5, r26	; 0x05
   1c416:	85 ef       	ldi	r24, 0xF5	; 245
   1c418:	92 e0       	ldi	r25, 0x02	; 2
   1c41a:	92 83       	std	Z+2, r25	; 0x02
   1c41c:	81 83       	std	Z+1, r24	; 0x01
   1c41e:	0e 94 5d 47 	call	0x8eba	; 0x8eba <sprintf_P>

	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd1, sizeof(_cmd1));
   1c422:	22 e0       	ldi	r18, 0x02	; 2
   1c424:	41 e2       	ldi	r20, 0x21	; 33
   1c426:	53 e0       	ldi	r21, 0x03	; 3
   1c428:	60 e0       	ldi	r22, 0x00	; 0
   1c42a:	82 e7       	ldi	r24, 0x72	; 114
   1c42c:	0e 94 19 2c 	call	0x5832	; 0x5832 <i2c_task_op_add>
   1c430:	90 93 4d 17 	sts	0x174D, r25	; 0x80174d <i2c_task_op+0x1>
   1c434:	80 93 4c 17 	sts	0x174C, r24	; 0x80174c <i2c_task_op>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line1, 16);
   1c438:	20 e1       	ldi	r18, 0x10	; 16
   1c43a:	4c e0       	ldi	r20, 0x0C	; 12
   1c43c:	53 e0       	ldi	r21, 0x03	; 3
   1c43e:	60 e0       	ldi	r22, 0x00	; 0
   1c440:	82 e7       	ldi	r24, 0x72	; 114
   1c442:	0e 94 19 2c 	call	0x5832	; 0x5832 <i2c_task_op_add>
   1c446:	90 93 4f 17 	sts	0x174F, r25	; 0x80174f <i2c_task_op+0x3>
   1c44a:	80 93 4e 17 	sts	0x174E, r24	; 0x80174e <i2c_task_op+0x2>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd2, sizeof(_cmd2));
   1c44e:	22 e0       	ldi	r18, 0x02	; 2
   1c450:	4a e0       	ldi	r20, 0x0A	; 10
   1c452:	53 e0       	ldi	r21, 0x03	; 3
   1c454:	60 e0       	ldi	r22, 0x00	; 0
   1c456:	82 e7       	ldi	r24, 0x72	; 114
   1c458:	0e 94 19 2c 	call	0x5832	; 0x5832 <i2c_task_op_add>
   1c45c:	90 93 51 17 	sts	0x1751, r25	; 0x801751 <i2c_task_op+0x5>
   1c460:	80 93 50 17 	sts	0x1750, r24	; 0x801750 <i2c_task_op+0x4>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line2, 16);
   1c464:	20 e1       	ldi	r18, 0x10	; 16
   1c466:	45 ef       	ldi	r20, 0xF5	; 245
   1c468:	52 e0       	ldi	r21, 0x02	; 2
   1c46a:	60 e0       	ldi	r22, 0x00	; 0
   1c46c:	82 e7       	ldi	r24, 0x72	; 114
   1c46e:	0e 94 19 2c 	call	0x5832	; 0x5832 <i2c_task_op_add>
   1c472:	90 93 53 17 	sts	0x1753, r25	; 0x801753 <i2c_task_op+0x7>
   1c476:	80 93 52 17 	sts	0x1752, r24	; 0x801752 <i2c_task_op+0x6>

	SREG = sreg;
   1c47a:	cf bf       	out	0x3f, r28	; 63

    i2c_task_run();
   1c47c:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <i2c_task_run>
	// wait long enough for us to see the startup message
    delayms(1000);
   1c480:	68 ee       	ldi	r22, 0xE8	; 232
   1c482:	73 e0       	ldi	r23, 0x03	; 3
   1c484:	80 e0       	ldi	r24, 0x00	; 0
   1c486:	90 e0       	ldi	r25, 0x00	; 0
   1c488:	0e 94 47 28 	call	0x508e	; 0x508e <delayms>
	
	// Verify the task finished - it normally takes < 30mS
    if(!i2c_task_done())
   1c48c:	0e 94 ba 2c 	call	0x5974	; 0x5974 <i2c_task_done>
   1c490:	81 11       	cpse	r24, r1
   1c492:	0c c0       	rjmp	.+24     	; 0x1c4ac <lcd_setup+0x130>
	{
		i2c_display_task_errors();
   1c494:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1c498:	80 e6       	ldi	r24, 0x60	; 96
   1c49a:	9a e4       	ldi	r25, 0x4A	; 74
   1c49c:	a0 e0       	ldi	r26, 0x00	; 0
   1c49e:	ed b7       	in	r30, 0x3d	; 61
   1c4a0:	fe b7       	in	r31, 0x3e	; 62
   1c4a2:	81 83       	std	Z+1, r24	; 0x01
   1c4a4:	92 83       	std	Z+2, r25	; 0x02
   1c4a6:	a3 83       	std	Z+3, r26	; 0x03
   1c4a8:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
	}

    sep();
   1c4ac:	0e 94 80 32 	call	0x6500	; 0x6500 <sep>
}
   1c4b0:	ad b7       	in	r26, 0x3d	; 61
   1c4b2:	be b7       	in	r27, 0x3e	; 62
   1c4b4:	17 96       	adiw	r26, 0x07	; 7
   1c4b6:	0f b6       	in	r0, 0x3f	; 63
   1c4b8:	f8 94       	cli
   1c4ba:	be bf       	out	0x3e, r27	; 62
   1c4bc:	0f be       	out	0x3f, r0	; 63
   1c4be:	ad bf       	out	0x3d, r26	; 61
   1c4c0:	cf 91       	pop	r28
   1c4c2:	08 95       	ret

0001c4c4 <i2c_lcd_task>:


///@brief Update the LCD wile the system is running
/// Display SD card fault status and the current time
void i2c_lcd_task()
{
   1c4c4:	af e2       	ldi	r26, 0x2F	; 47
   1c4c6:	b0 e0       	ldi	r27, 0x00	; 0
   1c4c8:	e7 e6       	ldi	r30, 0x67	; 103
   1c4ca:	f2 ee       	ldi	r31, 0xE2	; 226
   1c4cc:	3b c5       	rjmp	.+2678   	; 0x1cf44 <__prologue_saves__+0x1e>
	char buf[32];
	uint8_t sreg=SREG;
   1c4ce:	1f b7       	in	r17, 0x3f	; 63
    ts_t ts;

	cli();
   1c4d0:	f8 94       	cli
	if(!mmc_ins_status())
   1c4d2:	0e 94 5f 6f 	call	0xdebe	; 0xdebe <mmc_ins_status>
   1c4d6:	89 2b       	or	r24, r25
   1c4d8:	49 f4       	brne	.+18     	; 0x1c4ec <i2c_lcd_task+0x28>
	{
		sprintf((char *) _line2,"%-16s", "SD Card Fault");
   1c4da:	8d e0       	ldi	r24, 0x0D	; 13
   1c4dc:	97 e1       	ldi	r25, 0x17	; 23
   1c4de:	ed b7       	in	r30, 0x3d	; 61
   1c4e0:	fe b7       	in	r31, 0x3e	; 62
   1c4e2:	97 83       	std	Z+7, r25	; 0x07
   1c4e4:	86 83       	std	Z+6, r24	; 0x06
   1c4e6:	8a e5       	ldi	r24, 0x5A	; 90
   1c4e8:	9a e4       	ldi	r25, 0x4A	; 74
   1c4ea:	17 c0       	rjmp	.+46     	; 0x1c51a <i2c_lcd_task+0x56>
	}
	else
	{
		clock_gettime(0, (ts_t *) &ts);
   1c4ec:	be 01       	movw	r22, r28
   1c4ee:	68 5d       	subi	r22, 0xD8	; 216
   1c4f0:	7f 4f       	sbci	r23, 0xFF	; 255
   1c4f2:	80 e0       	ldi	r24, 0x00	; 0
   1c4f4:	90 e0       	ldi	r25, 0x00	; 0
   1c4f6:	0e 94 2f 34 	call	0x685e	; 0x685e <clock_gettime>
		sprintf((char *) _line2, "%-16s", lcd_time(gmtime(&(ts.tv_sec)),buf,sizeof(buf)-1) );
   1c4fa:	ce 01       	movw	r24, r28
   1c4fc:	88 96       	adiw	r24, 0x28	; 40
   1c4fe:	0e 94 19 38 	call	0x7032	; 0x7032 <gmtime>
   1c502:	4f e1       	ldi	r20, 0x1F	; 31
   1c504:	50 e0       	ldi	r21, 0x00	; 0
   1c506:	be 01       	movw	r22, r28
   1c508:	68 5f       	subi	r22, 0xF8	; 248
   1c50a:	7f 4f       	sbci	r23, 0xFF	; 255
   1c50c:	d2 de       	rcall	.-604    	; 0x1c2b2 <lcd_time>
   1c50e:	ed b7       	in	r30, 0x3d	; 61
   1c510:	fe b7       	in	r31, 0x3e	; 62
   1c512:	97 83       	std	Z+7, r25	; 0x07
   1c514:	86 83       	std	Z+6, r24	; 0x06
   1c516:	84 e5       	ldi	r24, 0x54	; 84
   1c518:	9a e4       	ldi	r25, 0x4A	; 74
   1c51a:	a0 e0       	ldi	r26, 0x00	; 0
   1c51c:	83 83       	std	Z+3, r24	; 0x03
   1c51e:	94 83       	std	Z+4, r25	; 0x04
   1c520:	a5 83       	std	Z+5, r26	; 0x05
   1c522:	85 ef       	ldi	r24, 0xF5	; 245
   1c524:	92 e0       	ldi	r25, 0x02	; 2
   1c526:	92 83       	std	Z+2, r25	; 0x02
   1c528:	81 83       	std	Z+1, r24	; 0x01
   1c52a:	0e 94 5d 47 	call	0x8eba	; 0x8eba <sprintf_P>
		// sprintf((char *) _line2,"%16ld.%03ld", (long) ts.tv_sec, (long) ts.tv_nsec / 1000000UL);
	}
	SREG=sreg;
   1c52e:	1f bf       	out	0x3f, r17	; 63

    i2c_task_run();
   1c530:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <i2c_task_run>
}
   1c534:	af 96       	adiw	r28, 0x2f	; 47
   1c536:	e3 e0       	ldi	r30, 0x03	; 3
   1c538:	21 c5       	rjmp	.+2626   	; 0x1cf7c <__epilogue_restores__+0x1e>

0001c53a <gpib_user_task>:
///@brief GPIB callback from gpib_read_byte()
/// This function gets called evry time trough the read loop
/// This task run in the forground - is not an interrupt task
void gpib_user_task()
{
	uint8_t sreg = SREG;
   1c53a:	8f b7       	in	r24, 0x3f	; 63

	cli();
   1c53c:	f8 94       	cli
	if(lcd_display_time > 100) // increments at 1000HZ
   1c53e:	20 91 e0 19 	lds	r18, 0x19E0	; 0x8019e0 <lcd_display_time>
   1c542:	30 91 e1 19 	lds	r19, 0x19E1	; 0x8019e1 <lcd_display_time+0x1>
   1c546:	25 36       	cpi	r18, 0x65	; 101
   1c548:	31 05       	cpc	r19, r1
   1c54a:	3c f0       	brlt	.+14     	; 0x1c55a <gpib_user_task+0x20>
	{
		lcd_display_time = 0;
   1c54c:	10 92 e1 19 	sts	0x19E1, r1	; 0x8019e1 <lcd_display_time+0x1>
   1c550:	10 92 e0 19 	sts	0x19E0, r1	; 0x8019e0 <lcd_display_time>
		SREG = sreg;
   1c554:	8f bf       	out	0x3f, r24	; 63
		i2c_lcd_task();
   1c556:	b6 cf       	rjmp	.-148    	; 0x1c4c4 <i2c_lcd_task>
		return;
   1c558:	08 95       	ret
	}
	SREG = sreg;
   1c55a:	8f bf       	out	0x3f, r24	; 63
   1c55c:	08 95       	ret

0001c55e <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1c55e:	00 d0       	rcall	.+0      	; 0x1c560 <help+0x2>
   1c560:	1f 92       	push	r1

    copyright();
   1c562:	50 de       	rcall	.-864    	; 0x1c204 <copyright>

	printf("help     - displays this help menu\n");
   1c564:	80 e3       	ldi	r24, 0x30	; 48
   1c566:	9a e4       	ldi	r25, 0x4A	; 74
   1c568:	a0 e0       	ldi	r26, 0x00	; 0
   1c56a:	ed b7       	in	r30, 0x3d	; 61
   1c56c:	fe b7       	in	r31, 0x3e	; 62
   1c56e:	81 83       	std	Z+1, r24	; 0x01
   1c570:	92 83       	std	Z+2, r25	; 0x02
   1c572:	a3 83       	std	Z+3, r26	; 0x03
   1c574:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

#ifdef LCD_SUPPORT
    printf("backlight 0xRRGGBB - format 0x[00-FF][00-FF][00-FF]\n");
   1c578:	8b ef       	ldi	r24, 0xFB	; 251
   1c57a:	99 e4       	ldi	r25, 0x49	; 73
   1c57c:	a0 e0       	ldi	r26, 0x00	; 0
   1c57e:	ed b7       	in	r30, 0x3d	; 61
   1c580:	fe b7       	in	r31, 0x3e	; 62
   1c582:	81 83       	std	Z+1, r24	; 0x01
   1c584:	92 83       	std	Z+2, r25	; 0x02
   1c586:	a3 83       	std	Z+3, r26	; 0x03
   1c588:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
#endif
    printf("dir       Directory list MSDOS format\n");
   1c58c:	84 ed       	ldi	r24, 0xD4	; 212
   1c58e:	99 e4       	ldi	r25, 0x49	; 73
   1c590:	a0 e0       	ldi	r26, 0x00	; 0
   1c592:	ed b7       	in	r30, 0x3d	; 61
   1c594:	fe b7       	in	r31, 0x3e	; 62
   1c596:	81 83       	std	Z+1, r24	; 0x01
   1c598:	92 83       	std	Z+2, r25	; 0x02
   1c59a:	a3 83       	std	Z+3, r26	; 0x03
   1c59c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

	drives_help(0);
   1c5a0:	80 e0       	ldi	r24, 0x00	; 0
   1c5a2:	0e 94 7d 9c 	call	0x138fa	; 0x138fa <drives_help>

#ifdef FATFS_TESTS
    fatfs_help(0);
   1c5a6:	80 e0       	ldi	r24, 0x00	; 0
   1c5a8:	90 e0       	ldi	r25, 0x00	; 0
   1c5aa:	0e 94 f9 73 	call	0xe7f2	; 0xe7f2 <fatfs_help>
#endif
	gpib_help(0);
   1c5ae:	80 e0       	ldi	r24, 0x00	; 0
   1c5b0:	90 e0       	ldi	r25, 0x00	; 0
   1c5b2:	0e 94 56 92 	call	0x124ac	; 0x124ac <gpib_help>

#ifdef LIF_SUPPORT
    lif_help(0);
   1c5b6:	80 e0       	ldi	r24, 0x00	; 0
   1c5b8:	90 e0       	ldi	r25, 0x00	; 0
   1c5ba:	0e 94 22 c1 	call	0x18244	; 0x18244 <lif_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1c5be:	80 e0       	ldi	r24, 0x00	; 0
   1c5c0:	90 e0       	ldi	r25, 0x00	; 0
   1c5c2:	0e 94 f5 7e 	call	0xfdea	; 0xfdea <posix_help>
#endif

    printf(
   1c5c6:	84 e9       	ldi	r24, 0x94	; 148
   1c5c8:	99 e4       	ldi	r25, 0x49	; 73
   1c5ca:	a0 e0       	ldi	r26, 0x00	; 0
   1c5cc:	ed b7       	in	r30, 0x3d	; 61
   1c5ce:	fe b7       	in	r31, 0x3e	; 62
   1c5d0:	81 83       	std	Z+1, r24	; 0x01
   1c5d2:	92 83       	std	Z+2, r25	; 0x02
   1c5d4:	a3 83       	std	Z+3, r26	; 0x03
   1c5d6:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        "setdate - set date - prompts for date\n");
#ifdef TELEDISK
    td0_help(0);
#endif

    printf(
   1c5da:	8a e6       	ldi	r24, 0x6A	; 106
   1c5dc:	99 e4       	ldi	r25, 0x49	; 73
   1c5de:	a0 e0       	ldi	r26, 0x00	; 0
   1c5e0:	ed b7       	in	r30, 0x3d	; 61
   1c5e2:	fe b7       	in	r31, 0x3e	; 62
   1c5e4:	81 83       	std	Z+1, r24	; 0x01
   1c5e6:	92 83       	std	Z+2, r25	; 0x02
   1c5e8:	a3 83       	std	Z+3, r26	; 0x03
   1c5ea:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        "time    - display current date and time\n"
		"\n");

/* CPU debugging */
    printf(
   1c5ee:	82 e2       	ldi	r24, 0x22	; 34
   1c5f0:	99 e4       	ldi	r25, 0x49	; 73
   1c5f2:	a0 e0       	ldi	r26, 0x00	; 0
   1c5f4:	ed b7       	in	r30, 0x3d	; 61
   1c5f6:	fe b7       	in	r31, 0x3e	; 62
   1c5f8:	81 83       	std	Z+1, r24	; 0x01
   1c5fa:	92 83       	std	Z+2, r25	; 0x02
   1c5fc:	a3 83       	std	Z+3, r26	; 0x03
   1c5fe:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        "mem     - Display free memory\n"
        );
#ifdef PORTIO_TESTS
	portio_help(0);
#endif
	printf("\n");
   1c602:	80 e2       	ldi	r24, 0x20	; 32
   1c604:	99 e4       	ldi	r25, 0x49	; 73
   1c606:	a0 e0       	ldi	r26, 0x00	; 0
   1c608:	ed b7       	in	r30, 0x3d	; 61
   1c60a:	fe b7       	in	r31, 0x3e	; 62
   1c60c:	81 83       	std	Z+1, r24	; 0x01
   1c60e:	92 83       	std	Z+2, r25	; 0x02
   1c610:	a3 83       	std	Z+3, r26	; 0x03
   1c612:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

}
   1c616:	0f 90       	pop	r0
   1c618:	0f 90       	pop	r0
   1c61a:	0f 90       	pop	r0
   1c61c:	08 95       	ret

0001c61e <user_task.part.1>:
/// If a keypress is detected read a line from the uart
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void user_task(uint8_t gpib)
   1c61e:	6f 92       	push	r6
   1c620:	7f 92       	push	r7
   1c622:	8f 92       	push	r8
   1c624:	af 92       	push	r10
   1c626:	bf 92       	push	r11
   1c628:	cf 92       	push	r12
   1c62a:	df 92       	push	r13
   1c62c:	ef 92       	push	r14
   1c62e:	ff 92       	push	r15
   1c630:	0f 93       	push	r16
   1c632:	1f 93       	push	r17
   1c634:	cf 93       	push	r28
   1c636:	df 93       	push	r29
   1c638:	cd b7       	in	r28, 0x3d	; 61
   1c63a:	de b7       	in	r29, 0x3e	; 62
   1c63c:	cb 56       	subi	r28, 0x6B	; 107
   1c63e:	d1 40       	sbci	r29, 0x01	; 1
   1c640:	0f b6       	in	r0, 0x3f	; 63
   1c642:	f8 94       	cli
   1c644:	de bf       	out	0x3e, r29	; 62
   1c646:	0f be       	out	0x3f, r0	; 63
   1c648:	cd bf       	out	0x3d, r28	; 61
        gpib_task();

    if(!kbhit(0))
        return;

    printf("\n>");
   1c64a:	8d e1       	ldi	r24, 0x1D	; 29
   1c64c:	99 e4       	ldi	r25, 0x49	; 73
   1c64e:	a0 e0       	ldi	r26, 0x00	; 0
   1c650:	ed b7       	in	r30, 0x3d	; 61
   1c652:	fe b7       	in	r31, 0x3e	; 62
   1c654:	81 83       	std	Z+1, r24	; 0x01
   1c656:	92 83       	std	Z+2, r25	; 0x02
   1c658:	a3 83       	std	Z+3, r26	; 0x03
   1c65a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

	memset(line,0,sizeof(line)-1);
   1c65e:	8e 01       	movw	r16, r28
   1c660:	0a 5f       	subi	r16, 0xFA	; 250
   1c662:	1f 4f       	sbci	r17, 0xFF	; 255
   1c664:	8f ef       	ldi	r24, 0xFF	; 255
   1c666:	f8 01       	movw	r30, r16
   1c668:	11 92       	st	Z+, r1
   1c66a:	8a 95       	dec	r24
   1c66c:	e9 f7       	brne	.-6      	; 0x1c668 <user_task.part.1+0x4a>

    fgets(line,sizeof(line)-2,stdin);
   1c66e:	40 91 b5 1c 	lds	r20, 0x1CB5	; 0x801cb5 <__iob>
   1c672:	50 91 b6 1c 	lds	r21, 0x1CB6	; 0x801cb6 <__iob+0x1>
   1c676:	6e ef       	ldi	r22, 0xFE	; 254
   1c678:	70 e0       	ldi	r23, 0x00	; 0
   1c67a:	c8 01       	movw	r24, r16
   1c67c:	0e 94 e1 76 	call	0xedc2	; 0xedc2 <fgets>
    trim_tail(line);
   1c680:	c8 01       	movw	r24, r16
   1c682:	0e 94 90 32 	call	0x6520	; 0x6520 <trim_tail>
    argc = split_args(line,argv,50);
   1c686:	42 e3       	ldi	r20, 0x32	; 50
   1c688:	50 e0       	ldi	r21, 0x00	; 0
   1c68a:	be 01       	movw	r22, r28
   1c68c:	6a 5f       	subi	r22, 0xFA	; 250
   1c68e:	7e 4f       	sbci	r23, 0xFE	; 254
   1c690:	c8 01       	movw	r24, r16
   1c692:	0e 94 16 33 	call	0x662c	; 0x662c <split_args>
   1c696:	6c 01       	movw	r12, r24

	if(debug_input)
   1c698:	80 91 e2 19 	lds	r24, 0x19E2	; 0x8019e2 <debug_input>
   1c69c:	81 11       	cpse	r24, r1
   1c69e:	0a c0       	rjmp	.+20     	; 0x1c6b4 <user_task.part.1+0x96>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1c6a0:	ca 5f       	subi	r28, 0xFA	; 250
   1c6a2:	de 4f       	sbci	r29, 0xFE	; 254
   1c6a4:	e8 80       	ld	r14, Y
   1c6a6:	f9 80       	ldd	r15, Y+1	; 0x01
   1c6a8:	c6 50       	subi	r28, 0x06	; 6
   1c6aa:	d1 40       	sbci	r29, 0x01	; 1

    if(!ptr || argc < 1)
   1c6ac:	e1 14       	cp	r14, r1
   1c6ae:	f1 04       	cpc	r15, r1
   1c6b0:	51 f5       	brne	.+84     	; 0x1c706 <user_task.part.1+0xe8>
   1c6b2:	8b c0       	rjmp	.+278    	; 0x1c7ca <user_task.part.1+0x1ac>
    trim_tail(line);
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
   1c6b4:	ed b7       	in	r30, 0x3d	; 61
   1c6b6:	fe b7       	in	r31, 0x3e	; 62
   1c6b8:	d5 82       	std	Z+5, r13	; 0x05
   1c6ba:	c4 82       	std	Z+4, r12	; 0x04
   1c6bc:	88 e0       	ldi	r24, 0x08	; 8
   1c6be:	99 e4       	ldi	r25, 0x49	; 73
   1c6c0:	a0 e0       	ldi	r26, 0x00	; 0
   1c6c2:	81 83       	std	Z+1, r24	; 0x01
   1c6c4:	92 83       	std	Z+2, r25	; 0x02
   1c6c6:	a3 83       	std	Z+3, r26	; 0x03
   1c6c8:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1c6cc:	ce 01       	movw	r24, r28
   1c6ce:	8a 5f       	subi	r24, 0xFA	; 250
   1c6d0:	9e 4f       	sbci	r25, 0xFE	; 254
   1c6d2:	7c 01       	movw	r14, r24
		for(i=0;i<argc;++i)
   1c6d4:	00 e0       	ldi	r16, 0x00	; 0
   1c6d6:	10 e0       	ldi	r17, 0x00	; 0
			printf("   [%s]\n", argv[i]);
   1c6d8:	8f ef       	ldi	r24, 0xFF	; 255
   1c6da:	98 e4       	ldi	r25, 0x48	; 72
   1c6dc:	3c 01       	movw	r6, r24
   1c6de:	81 2c       	mov	r8, r1
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c6e0:	0c 15       	cp	r16, r12
   1c6e2:	1d 05       	cpc	r17, r13
   1c6e4:	ec f6       	brge	.-70     	; 0x1c6a0 <user_task.part.1+0x82>
			printf("   [%s]\n", argv[i]);
   1c6e6:	f7 01       	movw	r30, r14
   1c6e8:	81 91       	ld	r24, Z+
   1c6ea:	91 91       	ld	r25, Z+
   1c6ec:	7f 01       	movw	r14, r30
   1c6ee:	ed b7       	in	r30, 0x3d	; 61
   1c6f0:	fe b7       	in	r31, 0x3e	; 62
   1c6f2:	95 83       	std	Z+5, r25	; 0x05
   1c6f4:	84 83       	std	Z+4, r24	; 0x04
   1c6f6:	61 82       	std	Z+1, r6	; 0x01
   1c6f8:	72 82       	std	Z+2, r7	; 0x02
   1c6fa:	83 82       	std	Z+3, r8	; 0x03
   1c6fc:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c700:	0f 5f       	subi	r16, 0xFF	; 255
   1c702:	1f 4f       	sbci	r17, 0xFF	; 255
   1c704:	ed cf       	rjmp	.-38     	; 0x1c6e0 <user_task.part.1+0xc2>

    ind = 0;
	result = 0;
    ptr = argv[ind++];

    if(!ptr || argc < 1)
   1c706:	1c 14       	cp	r1, r12
   1c708:	1d 04       	cpc	r1, r13
   1c70a:	0c f0       	brlt	.+2      	; 0x1c70e <user_task.part.1+0xf0>
   1c70c:	5e c0       	rjmp	.+188    	; 0x1c7ca <user_task.part.1+0x1ac>
    {
        result = 1;
    }

#ifdef LCD_SUPPORT
    else if (MATCHI(ptr,"backlight") )
   1c70e:	62 e2       	ldi	r22, 0x22	; 34
   1c710:	77 e1       	ldi	r23, 0x17	; 23
   1c712:	c7 01       	movw	r24, r14
   1c714:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   1c718:	89 2b       	or	r24, r25
   1c71a:	f9 f0       	breq	.+62     	; 0x1c75a <user_task.part.1+0x13c>
    {
		uint32_t rgb;
        ptr = argv[ind];
   1c71c:	c8 5f       	subi	r28, 0xF8	; 248
   1c71e:	de 4f       	sbci	r29, 0xFE	; 254
   1c720:	e8 80       	ld	r14, Y
   1c722:	f9 80       	ldd	r15, Y+1	; 0x01
   1c724:	c8 50       	subi	r28, 0x08	; 8
   1c726:	d1 40       	sbci	r29, 0x01	; 1
        if(*ptr == '=')
   1c728:	f7 01       	movw	r30, r14
   1c72a:	80 81       	ld	r24, Z
   1c72c:	8d 33       	cpi	r24, 0x3D	; 61
   1c72e:	19 f4       	brne	.+6      	; 0x1c736 <user_task.part.1+0x118>
            ++ind;
   1c730:	82 e0       	ldi	r24, 0x02	; 2
   1c732:	90 e0       	ldi	r25, 0x00	; 0
   1c734:	02 c0       	rjmp	.+4      	; 0x1c73a <user_task.part.1+0x11c>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1c736:	81 e0       	ldi	r24, 0x01	; 1
   1c738:	90 e0       	ldi	r25, 0x00	; 0
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
            ++ind;
        rgb = get_value(argv[ind]);
   1c73a:	88 0f       	add	r24, r24
   1c73c:	99 1f       	adc	r25, r25
   1c73e:	e6 e0       	ldi	r30, 0x06	; 6
   1c740:	f1 e0       	ldi	r31, 0x01	; 1
   1c742:	ec 0f       	add	r30, r28
   1c744:	fd 1f       	adc	r31, r29
   1c746:	e8 0f       	add	r30, r24
   1c748:	f9 1f       	adc	r31, r25
   1c74a:	80 81       	ld	r24, Z
   1c74c:	91 81       	ldd	r25, Z+1	; 0x01
   1c74e:	0e 94 b5 33 	call	0x676a	; 0x676a <get_value>
		result = lcd_backlight(rgb);
   1c752:	ed dd       	rcall	.-1062   	; 0x1c32e <lcd_backlight>
   1c754:	08 2f       	mov	r16, r24
   1c756:	10 e0       	ldi	r17, 0x00	; 0
   1c758:	3a c0       	rjmp	.+116    	; 0x1c7ce <user_task.part.1+0x1b0>
    }
#endif

    else if ( MATCHI(ptr,"reset") )
   1c75a:	67 ea       	ldi	r22, 0xA7	; 167
   1c75c:	7d e0       	ldi	r23, 0x0D	; 13
   1c75e:	c7 01       	movw	r24, r14
   1c760:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   1c764:	89 2b       	or	r24, r25
   1c766:	51 f0       	breq	.+20     	; 0x1c77c <user_task.part.1+0x15e>
    {
        cli();
   1c768:	f8 94       	cli
        uart_rx_flush(0);
   1c76a:	80 e0       	ldi	r24, 0x00	; 0
   1c76c:	0e 94 8f 28 	call	0x511e	; 0x511e <uart_rx_flush>
        cli();
   1c770:	f8 94       	cli
        MCUSR = (1 << EXTRF);
   1c772:	82 e0       	ldi	r24, 0x02	; 2
   1c774:	84 bf       	out	0x34, r24	; 52
        RESET();
   1c776:	e0 e0       	ldi	r30, 0x00	; 0
   1c778:	fc ef       	ldi	r31, 0xFC	; 252
   1c77a:	09 95       	icall
		// should not return!
        result = 1;
    }
    else if ( MATCHI(ptr,"setdate" ) )
   1c77c:	6c e2       	ldi	r22, 0x2C	; 44
   1c77e:	77 e1       	ldi	r23, 0x17	; 23
   1c780:	c7 01       	movw	r24, r14
   1c782:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   1c786:	89 2b       	or	r24, r25
   1c788:	19 f0       	breq	.+6      	; 0x1c790 <user_task.part.1+0x172>
    {
        setdate();
   1c78a:	0e 94 f9 3b 	call	0x77f2	; 0x77f2 <setdate>
   1c78e:	07 c0       	rjmp	.+14     	; 0x1c79e <user_task.part.1+0x180>
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"time") )
   1c790:	64 e3       	ldi	r22, 0x34	; 52
   1c792:	77 e1       	ldi	r23, 0x17	; 23
   1c794:	c7 01       	movw	r24, r14
   1c796:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   1c79a:	89 2b       	or	r24, r25
   1c79c:	19 f0       	breq	.+6      	; 0x1c7a4 <user_task.part.1+0x186>
    {
        display_clock();
   1c79e:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <display_clock>
   1c7a2:	13 c0       	rjmp	.+38     	; 0x1c7ca <user_task.part.1+0x1ac>
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c7a4:	62 e6       	ldi	r22, 0x62	; 98
   1c7a6:	76 e1       	ldi	r23, 0x16	; 22
   1c7a8:	c7 01       	movw	r24, r14
   1c7aa:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   1c7ae:	89 2b       	or	r24, r25
    {
        help();
   1c7b0:	11 f0       	breq	.+4      	; 0x1c7b6 <user_task.part.1+0x198>
   1c7b2:	d5 de       	rcall	.-598    	; 0x1c55e <help>
   1c7b4:	0a c0       	rjmp	.+20     	; 0x1c7ca <user_task.part.1+0x1ac>
    else if ( MATCHI(ptr,"time") )
    {
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c7b6:	68 e6       	ldi	r22, 0x68	; 104
   1c7b8:	76 e1       	ldi	r23, 0x16	; 22
   1c7ba:	c7 01       	movw	r24, r14
   1c7bc:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   1c7c0:	89 2b       	or	r24, r25
   1c7c2:	b9 f7       	brne	.-18     	; 0x1c7b2 <user_task.part.1+0x194>
		for(i=0;i<argc;++i)
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
   1c7c4:	00 e0       	ldi	r16, 0x00	; 0
   1c7c6:	10 e0       	ldi	r17, 0x00	; 0
   1c7c8:	02 c0       	rjmp	.+4      	; 0x1c7ce <user_task.part.1+0x1b0>
    ptr = argv[ind++];

    if(!ptr || argc < 1)
    {
        result = 1;
   1c7ca:	01 e0       	ldi	r16, 0x01	; 1
   1c7cc:	10 e0       	ldi	r17, 0x00	; 0
    {
        help();
        result = 1;
    }

    if (MATCHI(ptr,"dir") )
   1c7ce:	66 ec       	ldi	r22, 0xC6	; 198
   1c7d0:	7b e0       	ldi	r23, 0x0B	; 11
   1c7d2:	c7 01       	movw	r24, r14
   1c7d4:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   1c7d8:	89 2b       	or	r24, r25
   1c7da:	51 f1       	breq	.+84     	; 0x1c830 <user_task.part.1+0x212>
   1c7dc:	86 e0       	ldi	r24, 0x06	; 6
   1c7de:	68 2e       	mov	r6, r24
   1c7e0:	77 24       	eor	r7, r7
   1c7e2:	73 94       	inc	r7
   1c7e4:	6c 0e       	add	r6, r28
   1c7e6:	7d 1e       	adc	r7, r29
   1c7e8:	f2 e0       	ldi	r31, 0x02	; 2
   1c7ea:	6f 0e       	add	r6, r31
   1c7ec:	71 1c       	adc	r7, r1
   1c7ee:	aa 24       	eor	r10, r10
   1c7f0:	a3 94       	inc	r10
   1c7f2:	b1 2c       	mov	r11, r1
   1c7f4:	01 e0       	ldi	r16, 0x01	; 1
   1c7f6:	10 e0       	ldi	r17, 0x00	; 0
    {
        int i;
        int args = 0;
        result = 1;
        for(i=1;i<argc;++i)
   1c7f8:	ac 14       	cp	r10, r12
   1c7fa:	bd 04       	cpc	r11, r13
   1c7fc:	74 f4       	brge	.+28     	; 0x1c81a <user_task.part.1+0x1fc>
        {
            if(fatfs_ls(argv[i]) == 0)
   1c7fe:	f3 01       	movw	r30, r6
   1c800:	81 91       	ld	r24, Z+
   1c802:	91 91       	ld	r25, Z+
   1c804:	3f 01       	movw	r6, r30
   1c806:	0e 94 0e 74 	call	0xe81c	; 0xe81c <fatfs_ls>
   1c80a:	89 2b       	or	r24, r25
   1c80c:	11 f4       	brne	.+4      	; 0x1c812 <user_task.part.1+0x1f4>
				result = -1;
   1c80e:	0f ef       	ldi	r16, 0xFF	; 255
   1c810:	1f ef       	ldi	r17, 0xFF	; 255
    if (MATCHI(ptr,"dir") )
    {
        int i;
        int args = 0;
        result = 1;
        for(i=1;i<argc;++i)
   1c812:	ff ef       	ldi	r31, 0xFF	; 255
   1c814:	af 1a       	sub	r10, r31
   1c816:	bf 0a       	sbc	r11, r31
   1c818:	ef cf       	rjmp	.-34     	; 0x1c7f8 <user_task.part.1+0x1da>
        {
            if(fatfs_ls(argv[i]) == 0)
				result = -1;
            ++args;
        }
        if(!args)
   1c81a:	aa 94       	dec	r10
   1c81c:	ab 28       	or	r10, r11
   1c81e:	41 f4       	brne	.+16     	; 0x1c830 <user_task.part.1+0x212>
        {
            if(fatfs_ls("") == 0)
   1c820:	8e e0       	ldi	r24, 0x0E	; 14
   1c822:	9c e0       	ldi	r25, 0x0C	; 12
   1c824:	0e 94 0e 74 	call	0xe81c	; 0xe81c <fatfs_ls>
   1c828:	89 2b       	or	r24, r25
   1c82a:	11 f4       	brne	.+4      	; 0x1c830 <user_task.part.1+0x212>
				result = -1;
   1c82c:	0f ef       	ldi	r16, 0xFF	; 255
   1c82e:	1f ef       	ldi	r17, 0xFF	; 255
    }



#ifdef POSIX_TESTS
    if( (ret = posix_tests(argc,argv)) )
   1c830:	be 01       	movw	r22, r28
   1c832:	6a 5f       	subi	r22, 0xFA	; 250
   1c834:	7e 4f       	sbci	r23, 0xFE	; 254
   1c836:	c6 01       	movw	r24, r12
   1c838:	0e 94 5c 82 	call	0x104b8	; 0x104b8 <posix_tests>
   1c83c:	00 97       	sbiw	r24, 0x00	; 0
   1c83e:	39 f0       	breq	.+14     	; 0x1c84e <user_task.part.1+0x230>
	{
		if(ret < 0)
   1c840:	97 fd       	sbrc	r25, 7
   1c842:	03 c0       	rjmp	.+6      	; 0x1c84a <user_task.part.1+0x22c>
			result = -1;
		else
			result = 1;
   1c844:	01 e0       	ldi	r16, 0x01	; 1
   1c846:	10 e0       	ldi	r17, 0x00	; 0
   1c848:	02 c0       	rjmp	.+4      	; 0x1c84e <user_task.part.1+0x230>

#ifdef POSIX_TESTS
    if( (ret = posix_tests(argc,argv)) )
	{
		if(ret < 0)
			result = -1;
   1c84a:	0f ef       	ldi	r16, 0xFF	; 255
   1c84c:	1f ef       	ldi	r17, 0xFF	; 255
		else
			result = 1;
	}
#endif
    if( (ret = drives_tests(argc,argv)) )
   1c84e:	be 01       	movw	r22, r28
   1c850:	6a 5f       	subi	r22, 0xFA	; 250
   1c852:	7e 4f       	sbci	r23, 0xFE	; 254
   1c854:	c6 01       	movw	r24, r12
   1c856:	0e 94 49 a3 	call	0x14692	; 0x14692 <drives_tests>
   1c85a:	00 97       	sbiw	r24, 0x00	; 0
   1c85c:	39 f0       	breq	.+14     	; 0x1c86c <user_task.part.1+0x24e>
	{
		if(ret < 0)
   1c85e:	97 fd       	sbrc	r25, 7
   1c860:	03 c0       	rjmp	.+6      	; 0x1c868 <user_task.part.1+0x24a>
			result = -1;
		else
			result = 1;
   1c862:	01 e0       	ldi	r16, 0x01	; 1
   1c864:	10 e0       	ldi	r17, 0x00	; 0
   1c866:	02 c0       	rjmp	.+4      	; 0x1c86c <user_task.part.1+0x24e>
	}
#endif
    if( (ret = drives_tests(argc,argv)) )
	{
		if(ret < 0)
			result = -1;
   1c868:	0f ef       	ldi	r16, 0xFF	; 255
   1c86a:	1f ef       	ldi	r17, 0xFF	; 255
		else
			result = 1;
	}

#ifdef FATFS_TESTS
    if( (ret = fatfs_tests(argc,argv) ))
   1c86c:	be 01       	movw	r22, r28
   1c86e:	6a 5f       	subi	r22, 0xFA	; 250
   1c870:	7e 4f       	sbci	r23, 0xFE	; 254
   1c872:	c6 01       	movw	r24, r12
   1c874:	0e 94 e1 74 	call	0xe9c2	; 0xe9c2 <fatfs_tests>
   1c878:	00 97       	sbiw	r24, 0x00	; 0
   1c87a:	39 f0       	breq	.+14     	; 0x1c88a <user_task.part.1+0x26c>
	{
		if(ret < 0)
   1c87c:	97 fd       	sbrc	r25, 7
   1c87e:	03 c0       	rjmp	.+6      	; 0x1c886 <user_task.part.1+0x268>
			result = -1;
		else
			result = 1;
   1c880:	01 e0       	ldi	r16, 0x01	; 1
   1c882:	10 e0       	ldi	r17, 0x00	; 0
   1c884:	02 c0       	rjmp	.+4      	; 0x1c88a <user_task.part.1+0x26c>

#ifdef FATFS_TESTS
    if( (ret = fatfs_tests(argc,argv) ))
	{
		if(ret < 0)
			result = -1;
   1c886:	0f ef       	ldi	r16, 0xFF	; 255
   1c888:	1f ef       	ldi	r17, 0xFF	; 255
		else
			result = 1;
	}
#endif
	if( (ret = gpib_tests(argc,argv)) )
   1c88a:	be 01       	movw	r22, r28
   1c88c:	6a 5f       	subi	r22, 0xFA	; 250
   1c88e:	7e 4f       	sbci	r23, 0xFE	; 254
   1c890:	c6 01       	movw	r24, r12
   1c892:	0e 94 77 92 	call	0x124ee	; 0x124ee <gpib_tests>
   1c896:	00 97       	sbiw	r24, 0x00	; 0
   1c898:	49 f0       	breq	.+18     	; 0x1c8ac <user_task.part.1+0x28e>
    {
		if(ret < 0)
   1c89a:	97 fd       	sbrc	r25, 7
   1c89c:	03 c0       	rjmp	.+6      	; 0x1c8a4 <user_task.part.1+0x286>
			result = -1;
		else
			result = 1;
   1c89e:	01 e0       	ldi	r16, 0x01	; 1
   1c8a0:	10 e0       	ldi	r17, 0x00	; 0
   1c8a2:	02 c0       	rjmp	.+4      	; 0x1c8a8 <user_task.part.1+0x28a>
	}
#endif
	if( (ret = gpib_tests(argc,argv)) )
    {
		if(ret < 0)
			result = -1;
   1c8a4:	0f ef       	ldi	r16, 0xFF	; 255
   1c8a6:	1f ef       	ldi	r17, 0xFF	; 255
		else
			result = 1;
// Restore GPIB BUS states
        gpib_init_devices();
   1c8a8:	0e 94 8b 8d 	call	0x11b16	; 0x11b16 <gpib_init_devices>
    }

#ifdef LIF_SUPPORT
    if( (ret = lif_tests(argc,argv)) )
   1c8ac:	be 01       	movw	r22, r28
   1c8ae:	6a 5f       	subi	r22, 0xFA	; 250
   1c8b0:	7e 4f       	sbci	r23, 0xFE	; 254
   1c8b2:	c6 01       	movw	r24, r12
   1c8b4:	fd da       	rcall	.-2566   	; 0x1beb0 <lif_tests>
   1c8b6:	00 97       	sbiw	r24, 0x00	; 0
   1c8b8:	39 f0       	breq	.+14     	; 0x1c8c8 <user_task.part.1+0x2aa>
	{
		if(ret < 0)
   1c8ba:	97 fd       	sbrc	r25, 7
   1c8bc:	03 c0       	rjmp	.+6      	; 0x1c8c4 <user_task.part.1+0x2a6>
			result = -1;
		else
			result = 1;
   1c8be:	01 e0       	ldi	r16, 0x01	; 1
   1c8c0:	10 e0       	ldi	r17, 0x00	; 0
   1c8c2:	02 c0       	rjmp	.+4      	; 0x1c8c8 <user_task.part.1+0x2aa>

#ifdef LIF_SUPPORT
    if( (ret = lif_tests(argc,argv)) )
	{
		if(ret < 0)
			result = -1;
   1c8c4:	0f ef       	ldi	r16, 0xFF	; 255
   1c8c6:	1f ef       	ldi	r17, 0xFF	; 255
			result = 1;
	}
#endif

/* CPU related tests */
    if (MATCHI(ptr,"input") )
   1c8c8:	69 e3       	ldi	r22, 0x39	; 57
   1c8ca:	77 e1       	ldi	r23, 0x17	; 23
   1c8cc:	c7 01       	movw	r24, r14
   1c8ce:	0e 94 be 32 	call	0x657c	; 0x657c <MATCHI>
   1c8d2:	89 2b       	or	r24, r25
   1c8d4:	d9 f0       	breq	.+54     	; 0x1c90c <user_task.part.1+0x2ee>
    {
        debug_input = !debug_input;
   1c8d6:	80 91 e2 19 	lds	r24, 0x19E2	; 0x8019e2 <debug_input>
   1c8da:	91 e0       	ldi	r25, 0x01	; 1
   1c8dc:	81 11       	cpse	r24, r1
   1c8de:	90 e0       	ldi	r25, 0x00	; 0
   1c8e0:	90 93 e2 19 	sts	0x19E2, r25	; 0x8019e2 <debug_input>
		printf("Input debugging: %s\n", debug_input ? "ON" : "OFF");
   1c8e4:	88 23       	and	r24, r24
   1c8e6:	19 f0       	breq	.+6      	; 0x1c8ee <user_task.part.1+0x2d0>
   1c8e8:	8e e1       	ldi	r24, 0x1E	; 30
   1c8ea:	97 e1       	ldi	r25, 0x17	; 23
   1c8ec:	02 c0       	rjmp	.+4      	; 0x1c8f2 <user_task.part.1+0x2d4>
   1c8ee:	8b e1       	ldi	r24, 0x1B	; 27
   1c8f0:	97 e1       	ldi	r25, 0x17	; 23
   1c8f2:	ed b7       	in	r30, 0x3d	; 61
   1c8f4:	fe b7       	in	r31, 0x3e	; 62
   1c8f6:	95 83       	std	Z+5, r25	; 0x05
   1c8f8:	84 83       	std	Z+4, r24	; 0x04
   1c8fa:	8a ee       	ldi	r24, 0xEA	; 234
   1c8fc:	98 e4       	ldi	r25, 0x48	; 72
   1c8fe:	a0 e0       	ldi	r26, 0x00	; 0
   1c900:	81 83       	std	Z+1, r24	; 0x01
   1c902:	92 83       	std	Z+2, r25	; 0x02
   1c904:	a3 83       	std	Z+3, r26	; 0x03
   1c906:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1c90a:	46 c0       	rjmp	.+140    	; 0x1c998 <user_task.part.1+0x37a>
        result = 1;
    }
    else if ( MATCH(ptr,"mem") )
   1c90c:	6f e3       	ldi	r22, 0x3F	; 63
   1c90e:	77 e1       	ldi	r23, 0x17	; 23
   1c910:	c7 01       	movw	r24, r14
   1c912:	0e 94 aa 32 	call	0x6554	; 0x6554 <MATCH>
   1c916:	89 2b       	or	r24, r25
   1c918:	19 f0       	breq	.+6      	; 0x1c920 <user_task.part.1+0x302>
    {
        PrintFree();
   1c91a:	0e 94 21 27 	call	0x4e42	; 0x4e42 <PrintFree>
   1c91e:	3c c0       	rjmp	.+120    	; 0x1c998 <user_task.part.1+0x37a>
			result = 1;
	}
#endif
/* CPU related tests */

    if(result == 1)
   1c920:	01 30       	cpi	r16, 0x01	; 1
   1c922:	11 05       	cpc	r17, r1
   1c924:	c9 f1       	breq	.+114    	; 0x1c998 <user_task.part.1+0x37a>
        printf("OK\n");
	else if(result == -1)
   1c926:	0f 3f       	cpi	r16, 0xFF	; 255
   1c928:	1f 4f       	sbci	r17, 0xFF	; 255
   1c92a:	19 f4       	brne	.+6      	; 0x1c932 <user_task.part.1+0x314>
        printf("Command FAILED\n");
   1c92c:	86 ed       	ldi	r24, 0xD6	; 214
   1c92e:	98 e4       	ldi	r25, 0x48	; 72
   1c930:	35 c0       	rjmp	.+106    	; 0x1c99c <user_task.part.1+0x37e>
    else
	{
        printf("Invalid Command\n");
   1c932:	85 ec       	ldi	r24, 0xC5	; 197
   1c934:	98 e4       	ldi	r25, 0x48	; 72
   1c936:	a0 e0       	ldi	r26, 0x00	; 0
   1c938:	ed b7       	in	r30, 0x3d	; 61
   1c93a:	fe b7       	in	r31, 0x3e	; 62
   1c93c:	81 83       	std	Z+1, r24	; 0x01
   1c93e:	92 83       	std	Z+2, r25	; 0x02
   1c940:	a3 83       	std	Z+3, r26	; 0x03
   1c942:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        printf("    Argument count = %d\n", argc);
   1c946:	ed b7       	in	r30, 0x3d	; 61
   1c948:	fe b7       	in	r31, 0x3e	; 62
   1c94a:	d5 82       	std	Z+5, r13	; 0x05
   1c94c:	c4 82       	std	Z+4, r12	; 0x04
   1c94e:	8c ea       	ldi	r24, 0xAC	; 172
   1c950:	98 e4       	ldi	r25, 0x48	; 72
   1c952:	a0 e0       	ldi	r26, 0x00	; 0
   1c954:	81 83       	std	Z+1, r24	; 0x01
   1c956:	92 83       	std	Z+2, r25	; 0x02
   1c958:	a3 83       	std	Z+3, r26	; 0x03
   1c95a:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
   1c95e:	8e 01       	movw	r16, r28
   1c960:	0a 5f       	subi	r16, 0xFA	; 250
   1c962:	1e 4f       	sbci	r17, 0xFE	; 254
		for(i=0;i<argc;++i)
   1c964:	e1 2c       	mov	r14, r1
   1c966:	f1 2c       	mov	r15, r1
			printf("       [%s]\n", argv[i]);
   1c968:	8f e9       	ldi	r24, 0x9F	; 159
   1c96a:	98 e4       	ldi	r25, 0x48	; 72
   1c96c:	3c 01       	movw	r6, r24
   1c96e:	81 2c       	mov	r8, r1
        printf("Command FAILED\n");
    else
	{
        printf("Invalid Command\n");
        printf("    Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c970:	ec 14       	cp	r14, r12
   1c972:	fd 04       	cpc	r15, r13
   1c974:	dc f4       	brge	.+54     	; 0x1c9ac <user_task.part.1+0x38e>
			printf("       [%s]\n", argv[i]);
   1c976:	f8 01       	movw	r30, r16
   1c978:	81 91       	ld	r24, Z+
   1c97a:	91 91       	ld	r25, Z+
   1c97c:	8f 01       	movw	r16, r30
   1c97e:	ed b7       	in	r30, 0x3d	; 61
   1c980:	fe b7       	in	r31, 0x3e	; 62
   1c982:	95 83       	std	Z+5, r25	; 0x05
   1c984:	84 83       	std	Z+4, r24	; 0x04
   1c986:	61 82       	std	Z+1, r6	; 0x01
   1c988:	72 82       	std	Z+2, r7	; 0x02
   1c98a:	83 82       	std	Z+3, r8	; 0x03
   1c98c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        printf("Command FAILED\n");
    else
	{
        printf("Invalid Command\n");
        printf("    Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c990:	ff ef       	ldi	r31, 0xFF	; 255
   1c992:	ef 1a       	sub	r14, r31
   1c994:	ff 0a       	sbc	r15, r31
   1c996:	ec cf       	rjmp	.-40     	; 0x1c970 <user_task.part.1+0x352>
	}
#endif
/* CPU related tests */

    if(result == 1)
        printf("OK\n");
   1c998:	86 ee       	ldi	r24, 0xE6	; 230
   1c99a:	98 e4       	ldi	r25, 0x48	; 72
   1c99c:	a0 e0       	ldi	r26, 0x00	; 0
   1c99e:	ed b7       	in	r30, 0x3d	; 61
   1c9a0:	fe b7       	in	r31, 0x3e	; 62
   1c9a2:	81 83       	std	Z+1, r24	; 0x01
   1c9a4:	92 83       	std	Z+2, r25	; 0x02
   1c9a6:	a3 83       	std	Z+3, r26	; 0x03
   1c9a8:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
        printf("Invalid Command\n");
        printf("    Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
			printf("       [%s]\n", argv[i]);
	}
}
   1c9ac:	c5 59       	subi	r28, 0x95	; 149
   1c9ae:	de 4f       	sbci	r29, 0xFE	; 254
   1c9b0:	0f b6       	in	r0, 0x3f	; 63
   1c9b2:	f8 94       	cli
   1c9b4:	de bf       	out	0x3e, r29	; 62
   1c9b6:	0f be       	out	0x3f, r0	; 63
   1c9b8:	cd bf       	out	0x3d, r28	; 61
   1c9ba:	df 91       	pop	r29
   1c9bc:	cf 91       	pop	r28
   1c9be:	1f 91       	pop	r17
   1c9c0:	0f 91       	pop	r16
   1c9c2:	ff 90       	pop	r15
   1c9c4:	ef 90       	pop	r14
   1c9c6:	df 90       	pop	r13
   1c9c8:	cf 90       	pop	r12
   1c9ca:	bf 90       	pop	r11
   1c9cc:	af 90       	pop	r10
   1c9ce:	8f 90       	pop	r8
   1c9d0:	7f 90       	pop	r7
   1c9d2:	6f 90       	pop	r6
   1c9d4:	08 95       	ret

0001c9d6 <user_task>:
	int ret;
    char *argv[51];
    char line[256];


    if(gpib)
   1c9d6:	81 11       	cpse	r24, r1
        gpib_task();
   1c9d8:	0e 94 f6 91 	call	0x123ec	; 0x123ec <gpib_task>

    if(!kbhit(0))
   1c9dc:	80 e0       	ldi	r24, 0x00	; 0
   1c9de:	0e 94 cf 29 	call	0x539e	; 0x539e <uart_rx_count>
   1c9e2:	89 2b       	or	r24, r25
   1c9e4:	09 f0       	breq	.+2      	; 0x1c9e8 <user_task+0x12>
   1c9e6:	1b ce       	rjmp	.-970    	; 0x1c61e <user_task.part.1>
   1c9e8:	08 95       	ret

0001c9ea <update_drive_counts>:
	}
}

#ifdef LCD_SUPPORT
void update_drive_counts()
{
   1c9ea:	a9 e2       	ldi	r26, 0x29	; 41
   1c9ec:	b0 e0       	ldi	r27, 0x00	; 0
   1c9ee:	ea ef       	ldi	r30, 0xFA	; 250
   1c9f0:	f4 ee       	ldi	r31, 0xE4	; 228
   1c9f2:	a7 c2       	rjmp	.+1358   	; 0x1cf42 <__prologue_saves__+0x1c>
	char tmp[32];

    sprintf((char *) tmp, "SS80=%d AMIGO=%d",
   1c9f4:	83 e0       	ldi	r24, 0x03	; 3
   1c9f6:	0e 94 63 97 	call	0x12ec6	; 0x12ec6 <count_drive_types>
   1c9fa:	18 2f       	mov	r17, r24
   1c9fc:	81 e0       	ldi	r24, 0x01	; 1
   1c9fe:	0e 94 63 97 	call	0x12ec6	; 0x12ec6 <count_drive_types>
   1ca02:	08 2e       	mov	r0, r24
   1ca04:	00 0c       	add	r0, r0
   1ca06:	99 0b       	sbc	r25, r25
   1ca08:	ed b7       	in	r30, 0x3d	; 61
   1ca0a:	fe b7       	in	r31, 0x3e	; 62
   1ca0c:	91 87       	std	Z+9, r25	; 0x09
   1ca0e:	80 87       	std	Z+8, r24	; 0x08
   1ca10:	81 2f       	mov	r24, r17
   1ca12:	11 0f       	add	r17, r17
   1ca14:	99 0b       	sbc	r25, r25
   1ca16:	97 83       	std	Z+7, r25	; 0x07
   1ca18:	86 83       	std	Z+6, r24	; 0x06
   1ca1a:	8e e8       	ldi	r24, 0x8E	; 142
   1ca1c:	98 e4       	ldi	r25, 0x48	; 72
   1ca1e:	a0 e0       	ldi	r26, 0x00	; 0
   1ca20:	83 83       	std	Z+3, r24	; 0x03
   1ca22:	94 83       	std	Z+4, r25	; 0x04
   1ca24:	a5 83       	std	Z+5, r26	; 0x05
   1ca26:	8e 01       	movw	r16, r28
   1ca28:	06 5f       	subi	r16, 0xF6	; 246
   1ca2a:	1f 4f       	sbci	r17, 0xFF	; 255
   1ca2c:	12 83       	std	Z+2, r17	; 0x02
   1ca2e:	01 83       	std	Z+1, r16	; 0x01
   1ca30:	0e 94 5d 47 	call	0x8eba	; 0x8eba <sprintf_P>
        (int) count_drive_types(SS80_TYPE),
        (int) count_drive_types(AMIGO_TYPE) );
	sprintf((char *) _line1, "%-16s", tmp);
   1ca34:	ed b7       	in	r30, 0x3d	; 61
   1ca36:	fe b7       	in	r31, 0x3e	; 62
   1ca38:	17 83       	std	Z+7, r17	; 0x07
   1ca3a:	06 83       	std	Z+6, r16	; 0x06
   1ca3c:	88 e8       	ldi	r24, 0x88	; 136
   1ca3e:	98 e4       	ldi	r25, 0x48	; 72
   1ca40:	a0 e0       	ldi	r26, 0x00	; 0
   1ca42:	83 83       	std	Z+3, r24	; 0x03
   1ca44:	94 83       	std	Z+4, r25	; 0x04
   1ca46:	a5 83       	std	Z+5, r26	; 0x05
   1ca48:	8c e0       	ldi	r24, 0x0C	; 12
   1ca4a:	93 e0       	ldi	r25, 0x03	; 3
   1ca4c:	92 83       	std	Z+2, r25	; 0x02
   1ca4e:	81 83       	std	Z+1, r24	; 0x01
   1ca50:	0e 94 5d 47 	call	0x8eba	; 0x8eba <sprintf_P>
}
   1ca54:	a9 96       	adiw	r28, 0x29	; 41
   1ca56:	e4 e0       	ldi	r30, 0x04	; 4
   1ca58:	90 c2       	rjmp	.+1312   	; 0x1cf7a <__epilogue_restores__+0x1c>

0001ca5a <main>:
#endif

/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1ca5a:	cf 93       	push	r28
   1ca5c:	df 93       	push	r29
   1ca5e:	cd b7       	in	r28, 0x3d	; 61
   1ca60:	de b7       	in	r29, 0x3e	; 62
   1ca62:	63 97       	sbiw	r28, 0x13	; 19
   1ca64:	0f b6       	in	r0, 0x3f	; 63
   1ca66:	f8 94       	cli
   1ca68:	de bf       	out	0x3e, r29	; 62
   1ca6a:	0f be       	out	0x3f, r0	; 63
   1ca6c:	cd bf       	out	0x3d, r28	; 61
    ts_t ts;
    uint32_t actual,baud;

	clear_error();		// Clear error state
   1ca6e:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <clear_error>

	GPIO_PIN_LOW(LED1);	// Activity status
   1ca72:	46 98       	cbi	0x08, 6	; 8
   1ca74:	3e 9a       	sbi	0x07, 6	; 7

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1ca76:	0e 94 36 86 	call	0x10c6c	; 0x10c6c <gpib_bus_init>
// BAUD setting moved to Makefile
    baud = BAUD;

///@ Initialize UART early
/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud);                  // Serial Port Initialize
   1ca7a:	40 e0       	ldi	r20, 0x00	; 0
   1ca7c:	52 ec       	ldi	r21, 0xC2	; 194
   1ca7e:	61 e0       	ldi	r22, 0x01	; 1
   1ca80:	70 e0       	ldi	r23, 0x00	; 0
   1ca82:	80 e0       	ldi	r24, 0x00	; 0
   1ca84:	0e 94 3a 29 	call	0x5274	; 0x5274 <uart_init>
   1ca88:	6b 01       	movw	r12, r22
   1ca8a:	7c 01       	movw	r14, r24

///@brief Power up delay
    delayms(200);
   1ca8c:	68 ec       	ldi	r22, 0xC8	; 200
   1ca8e:	70 e0       	ldi	r23, 0x00	; 0
   1ca90:	80 e0       	ldi	r24, 0x00	; 0
   1ca92:	90 e0       	ldi	r25, 0x00	; 0
   1ca94:	0e 94 47 28 	call	0x508e	; 0x508e <delayms>

    sep();
   1ca98:	0e 94 80 32 	call	0x6500	; 0x6500 <sep>
    printf("Start\n");
   1ca9c:	81 e8       	ldi	r24, 0x81	; 129
   1ca9e:	98 e4       	ldi	r25, 0x48	; 72
   1caa0:	a0 e0       	ldi	r26, 0x00	; 0
   1caa2:	ed b7       	in	r30, 0x3d	; 61
   1caa4:	fe b7       	in	r31, 0x3e	; 62
   1caa6:	81 83       	std	Z+1, r24	; 0x01
   1caa8:	92 83       	std	Z+2, r25	; 0x02
   1caaa:	a3 83       	std	Z+3, r26	; 0x03
   1caac:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1cab0:	80 e0       	ldi	r24, 0x00	; 0
   1cab2:	9d e2       	ldi	r25, 0x2D	; 45
   1cab4:	a1 e3       	ldi	r26, 0x31	; 49
   1cab6:	b1 e0       	ldi	r27, 0x01	; 1
   1cab8:	ed b7       	in	r30, 0x3d	; 61
   1caba:	fe b7       	in	r31, 0x3e	; 62
   1cabc:	84 83       	std	Z+4, r24	; 0x04
   1cabe:	95 83       	std	Z+5, r25	; 0x05
   1cac0:	a6 83       	std	Z+6, r26	; 0x06
   1cac2:	b7 83       	std	Z+7, r27	; 0x07
   1cac4:	80 e7       	ldi	r24, 0x70	; 112
   1cac6:	98 e4       	ldi	r25, 0x48	; 72
   1cac8:	a0 e0       	ldi	r26, 0x00	; 0
   1caca:	81 83       	std	Z+1, r24	; 0x01
   1cacc:	92 83       	std	Z+2, r25	; 0x02
   1cace:	a3 83       	std	Z+3, r26	; 0x03
   1cad0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1cad4:	ed b7       	in	r30, 0x3d	; 61
   1cad6:	fe b7       	in	r31, 0x3e	; 62
   1cad8:	c0 86       	std	Z+8, r12	; 0x08
   1cada:	d1 86       	std	Z+9, r13	; 0x09
   1cadc:	e2 86       	std	Z+10, r14	; 0x0a
   1cade:	f3 86       	std	Z+11, r15	; 0x0b
   1cae0:	80 e0       	ldi	r24, 0x00	; 0
   1cae2:	92 ec       	ldi	r25, 0xC2	; 194
   1cae4:	a1 e0       	ldi	r26, 0x01	; 1
   1cae6:	b0 e0       	ldi	r27, 0x00	; 0
   1cae8:	84 83       	std	Z+4, r24	; 0x04
   1caea:	95 83       	std	Z+5, r25	; 0x05
   1caec:	a6 83       	std	Z+6, r26	; 0x06
   1caee:	b7 83       	std	Z+7, r27	; 0x07
   1caf0:	89 e4       	ldi	r24, 0x49	; 73
   1caf2:	98 e4       	ldi	r25, 0x48	; 72
   1caf4:	a0 e0       	ldi	r26, 0x00	; 0
   1caf6:	81 83       	std	Z+1, r24	; 0x01
   1caf8:	92 83       	std	Z+2, r25	; 0x02
   1cafa:	a3 83       	std	Z+3, r26	; 0x03
   1cafc:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

    init_timers();
   1cb00:	0e 94 66 36 	call	0x6ccc	; 0x6ccc <init_timers>

    sep();
   1cb04:	0e 94 80 32 	call	0x6500	; 0x6500 <sep>
    printf("HP85 Disk and Device Emulator\n");
   1cb08:	8a e2       	ldi	r24, 0x2A	; 42
   1cb0a:	98 e4       	ldi	r25, 0x48	; 72
   1cb0c:	a0 e0       	ldi	r26, 0x00	; 0
   1cb0e:	ed b7       	in	r30, 0x3d	; 61
   1cb10:	fe b7       	in	r31, 0x3e	; 62
   1cb12:	81 83       	std	Z+1, r24	; 0x01
   1cb14:	92 83       	std	Z+2, r25	; 0x02
   1cb16:	a3 83       	std	Z+3, r26	; 0x03
   1cb18:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1cb1c:	8d e0       	ldi	r24, 0x0D	; 13
   1cb1e:	98 e4       	ldi	r25, 0x48	; 72
   1cb20:	a0 e0       	ldi	r26, 0x00	; 0
   1cb22:	ed b7       	in	r30, 0x3d	; 61
   1cb24:	fe b7       	in	r31, 0x3e	; 62
   1cb26:	81 83       	std	Z+1, r24	; 0x01
   1cb28:	92 83       	std	Z+2, r25	; 0x02
   1cb2a:	a3 83       	std	Z+3, r26	; 0x03
   1cb2c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf(" GNU version 3\n");
   1cb30:	8d ef       	ldi	r24, 0xFD	; 253
   1cb32:	97 e4       	ldi	r25, 0x47	; 71
   1cb34:	a0 e0       	ldi	r26, 0x00	; 0
   1cb36:	ed b7       	in	r30, 0x3d	; 61
   1cb38:	fe b7       	in	r31, 0x3e	; 62
   1cb3a:	81 83       	std	Z+1, r24	; 0x01
   1cb3c:	92 83       	std	Z+2, r25	; 0x02
   1cb3e:	a3 83       	std	Z+3, r26	; 0x03
   1cb40:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1cb44:	86 ed       	ldi	r24, 0xD6	; 214
   1cb46:	97 e4       	ldi	r25, 0x47	; 71
   1cb48:	a0 e0       	ldi	r26, 0x00	; 0
   1cb4a:	ed b7       	in	r30, 0x3d	; 61
   1cb4c:	fe b7       	in	r31, 0x3e	; 62
   1cb4e:	81 83       	std	Z+1, r24	; 0x01
   1cb50:	92 83       	std	Z+2, r25	; 0x02
   1cb52:	a3 83       	std	Z+3, r26	; 0x03
   1cb54:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1cb58:	8c ea       	ldi	r24, 0xAC	; 172
   1cb5a:	96 e1       	ldi	r25, 0x16	; 22
   1cb5c:	ed b7       	in	r30, 0x3d	; 61
   1cb5e:	fe b7       	in	r31, 0x3e	; 62
   1cb60:	95 83       	std	Z+5, r25	; 0x05
   1cb62:	84 83       	std	Z+4, r24	; 0x04
   1cb64:	8c eb       	ldi	r24, 0xBC	; 188
   1cb66:	97 e4       	ldi	r25, 0x47	; 71
   1cb68:	a0 e0       	ldi	r26, 0x00	; 0
   1cb6a:	81 83       	std	Z+1, r24	; 0x01
   1cb6c:	92 83       	std	Z+2, r25	; 0x02
   1cb6e:	a3 83       	std	Z+3, r26	; 0x03
   1cb70:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1cb74:	80 ed       	ldi	r24, 0xD0	; 208
   1cb76:	96 e1       	ldi	r25, 0x16	; 22
   1cb78:	ed b7       	in	r30, 0x3d	; 61
   1cb7a:	fe b7       	in	r31, 0x3e	; 62
   1cb7c:	95 83       	std	Z+5, r25	; 0x05
   1cb7e:	84 83       	std	Z+4, r24	; 0x04
   1cb80:	82 ea       	ldi	r24, 0xA2	; 162
   1cb82:	97 e4       	ldi	r25, 0x47	; 71
   1cb84:	a0 e0       	ldi	r26, 0x00	; 0
   1cb86:	81 83       	std	Z+1, r24	; 0x01
   1cb88:	92 83       	std	Z+2, r25	; 0x02
   1cb8a:	a3 83       	std	Z+3, r26	; 0x03
   1cb8c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

    sep();
   1cb90:	0e 94 80 32 	call	0x6500	; 0x6500 <sep>
    PrintFree();
   1cb94:	0e 94 21 27 	call	0x4e42	; 0x4e42 <PrintFree>

    sep();
   1cb98:	0e 94 80 32 	call	0x6500	; 0x6500 <sep>
    // delayms(200);                                 ///@brief Power up delay

///@ initialize SPI bus
    printf("Initializing SPI bus\n");
   1cb9c:	8c e8       	ldi	r24, 0x8C	; 140
   1cb9e:	97 e4       	ldi	r25, 0x47	; 71
   1cba0:	a0 e0       	ldi	r26, 0x00	; 0
   1cba2:	ed b7       	in	r30, 0x3d	; 61
   1cba4:	fe b7       	in	r31, 0x3e	; 62
   1cba6:	81 83       	std	Z+1, r24	; 0x01
   1cba8:	92 83       	std	Z+2, r25	; 0x02
   1cbaa:	a3 83       	std	Z+3, r26	; 0x03
   1cbac:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1cbb0:	4b e0       	ldi	r20, 0x0B	; 11
   1cbb2:	50 e0       	ldi	r21, 0x00	; 0
   1cbb4:	60 e2       	ldi	r22, 0x20	; 32
   1cbb6:	71 ea       	ldi	r23, 0xA1	; 161
   1cbb8:	87 e0       	ldi	r24, 0x07	; 7
   1cbba:	90 e0       	ldi	r25, 0x00	; 0
   1cbbc:	0e 94 70 26 	call	0x4ce0	; 0x4ce0 <spi_init>

///@ initialize I2C bus
    printf("Initializing I2C bus\n");
   1cbc0:	86 e7       	ldi	r24, 0x76	; 118
   1cbc2:	97 e4       	ldi	r25, 0x47	; 71
   1cbc4:	a0 e0       	ldi	r26, 0x00	; 0
   1cbc6:	ed b7       	in	r30, 0x3d	; 61
   1cbc8:	fe b7       	in	r31, 0x3e	; 62
   1cbca:	81 83       	std	Z+1, r24	; 0x01
   1cbcc:	92 83       	std	Z+2, r25	; 0x02
   1cbce:	a3 83       	std	Z+3, r26	; 0x03
   1cbd0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
	i2c_init(100000);
   1cbd4:	60 ea       	ldi	r22, 0xA0	; 160
   1cbd6:	76 e8       	ldi	r23, 0x86	; 134
   1cbd8:	81 e0       	ldi	r24, 0x01	; 1
   1cbda:	90 e0       	ldi	r25, 0x00	; 0
   1cbdc:	0e 94 43 2c 	call	0x5886	; 0x5886 <i2c_init>
    sep();
   1cbe0:	0e 94 80 32 	call	0x6500	; 0x6500 <sep>

///@ initialize clock by RTC if we have it
    printf("Initializing RTC\n");
   1cbe4:	84 e6       	ldi	r24, 0x64	; 100
   1cbe6:	97 e4       	ldi	r25, 0x47	; 71
   1cbe8:	a0 e0       	ldi	r26, 0x00	; 0
   1cbea:	ed b7       	in	r30, 0x3d	; 61
   1cbec:	fe b7       	in	r31, 0x3e	; 62
   1cbee:	81 83       	std	Z+1, r24	; 0x01
   1cbf0:	92 83       	std	Z+2, r25	; 0x02
   1cbf2:	a3 83       	std	Z+3, r26	; 0x03
   1cbf4:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    clock_clear();
   1cbf8:	0e 94 23 36 	call	0x6c46	; 0x6c46 <clock_clear>
    printf("Clock cleared\n");
   1cbfc:	85 e5       	ldi	r24, 0x55	; 85
   1cbfe:	97 e4       	ldi	r25, 0x47	; 71
   1cc00:	a0 e0       	ldi	r26, 0x00	; 0
   1cc02:	ed b7       	in	r30, 0x3d	; 61
   1cc04:	fe b7       	in	r31, 0x3e	; 62
   1cc06:	81 83       	std	Z+1, r24	; 0x01
   1cc08:	92 83       	std	Z+2, r25	; 0x02
   1cc0a:	a3 83       	std	Z+3, r26	; 0x03
   1cc0c:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1cc10:	be 01       	movw	r22, r28
   1cc12:	64 5f       	subi	r22, 0xF4	; 244
   1cc14:	7f 4f       	sbci	r23, 0xFF	; 255
   1cc16:	80 e0       	ldi	r24, 0x00	; 0
   1cc18:	90 e0       	ldi	r25, 0x00	; 0
   1cc1a:	0e 94 c3 36 	call	0x6d86	; 0x6d86 <clock_getres>
    printf("System Task Interrupt Rate: %ld Nano Seconds\n", (long) ts.tv_nsec);
   1cc1e:	88 89       	ldd	r24, Y+16	; 0x10
   1cc20:	99 89       	ldd	r25, Y+17	; 0x11
   1cc22:	aa 89       	ldd	r26, Y+18	; 0x12
   1cc24:	bb 89       	ldd	r27, Y+19	; 0x13
   1cc26:	ed b7       	in	r30, 0x3d	; 61
   1cc28:	fe b7       	in	r31, 0x3e	; 62
   1cc2a:	84 83       	std	Z+4, r24	; 0x04
   1cc2c:	95 83       	std	Z+5, r25	; 0x05
   1cc2e:	a6 83       	std	Z+6, r26	; 0x06
   1cc30:	b7 83       	std	Z+7, r27	; 0x07
   1cc32:	87 e2       	ldi	r24, 0x27	; 39
   1cc34:	97 e4       	ldi	r25, 0x47	; 71
   1cc36:	a0 e0       	ldi	r26, 0x00	; 0
   1cc38:	81 83       	std	Z+1, r24	; 0x01
   1cc3a:	92 83       	std	Z+2, r25	; 0x02
   1cc3c:	a3 83       	std	Z+3, r26	; 0x03
   1cc3e:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

// Timezone offset we just use local time
    initialize_clock(0);
   1cc42:	80 e0       	ldi	r24, 0x00	; 0
   1cc44:	90 e0       	ldi	r25, 0x00	; 0
   1cc46:	0e 94 9e 3d 	call	0x7b3c	; 0x7b3c <initialize_clock>
    display_clock();
   1cc4a:	0e 94 15 3e 	call	0x7c2a	; 0x7c2a <display_clock>
    sep();
   1cc4e:	0e 94 80 32 	call	0x6500	; 0x6500 <sep>

///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
	lcd_setup();
   1cc52:	94 db       	rcall	.-2264   	; 0x1c37c <lcd_setup>
#endif

///@ initialize MMC bus
    printf("MMC initializing start\n");
   1cc54:	8f e0       	ldi	r24, 0x0F	; 15
   1cc56:	97 e4       	ldi	r25, 0x47	; 71
   1cc58:	a0 e0       	ldi	r26, 0x00	; 0
   1cc5a:	ed b7       	in	r30, 0x3d	; 61
   1cc5c:	fe b7       	in	r31, 0x3e	; 62
   1cc5e:	81 83       	std	Z+1, r24	; 0x01
   1cc60:	92 83       	std	Z+2, r25	; 0x02
   1cc62:	a3 83       	std	Z+3, r26	; 0x03
   1cc64:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    if ( !mmc_init(1) )
   1cc68:	81 e0       	ldi	r24, 0x01	; 1
   1cc6a:	90 e0       	ldi	r25, 0x00	; 0
   1cc6c:	0e 94 90 6f 	call	0xdf20	; 0xdf20 <mmc_init>
   1cc70:	89 2b       	or	r24, r25
   1cc72:	51 f4       	brne	.+20     	; 0x1cc88 <main+0x22e>
		printf("MMC initialized\n");
   1cc74:	8e ef       	ldi	r24, 0xFE	; 254
   1cc76:	96 e4       	ldi	r25, 0x46	; 70
   1cc78:	a0 e0       	ldi	r26, 0x00	; 0
   1cc7a:	ed b7       	in	r30, 0x3d	; 61
   1cc7c:	fe b7       	in	r31, 0x3e	; 62
   1cc7e:	81 83       	std	Z+1, r24	; 0x01
   1cc80:	92 83       	std	Z+2, r25	; 0x02
   1cc82:	a3 83       	std	Z+3, r26	; 0x03
   1cc84:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    sep();
   1cc88:	0e 94 80 32 	call	0x6500	; 0x6500 <sep>

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1cc8c:	0e 94 36 86 	call	0x10c6c	; 0x10c6c <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1cc90:	88 ee       	ldi	r24, 0xE8	; 232
   1cc92:	96 e4       	ldi	r25, 0x46	; 70
   1cc94:	a0 e0       	ldi	r26, 0x00	; 0
   1cc96:	ed b7       	in	r30, 0x3d	; 61
   1cc98:	fe b7       	in	r31, 0x3e	; 62
   1cc9a:	81 83       	std	Z+1, r24	; 0x01
   1cc9c:	92 83       	std	Z+2, r25	; 0x02
   1cc9e:	a3 83       	std	Z+3, r26	; 0x03
   1cca0:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

///@ initialize Printer Capture
    printer_init();
   1cca4:	0e 94 9e be 	call	0x17d3c	; 0x17d3c <printer_init>
    printf("Printer initialized\n");
   1cca8:	83 ed       	ldi	r24, 0xD3	; 211
   1ccaa:	96 e4       	ldi	r25, 0x46	; 70
   1ccac:	a0 e0       	ldi	r26, 0x00	; 0
   1ccae:	ed b7       	in	r30, 0x3d	; 61
   1ccb0:	fe b7       	in	r31, 0x3e	; 62
   1ccb2:	81 83       	std	Z+1, r24	; 0x01
   1ccb4:	92 83       	std	Z+2, r25	; 0x02
   1ccb6:	a3 83       	std	Z+3, r26	; 0x03
   1ccb8:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

///@ initialize GPIB timer tasks
    printf("GPIB Timer Setup\n");
   1ccbc:	81 ec       	ldi	r24, 0xC1	; 193
   1ccbe:	96 e4       	ldi	r25, 0x46	; 70
   1ccc0:	a0 e0       	ldi	r26, 0x00	; 0
   1ccc2:	ed b7       	in	r30, 0x3d	; 61
   1ccc4:	fe b7       	in	r31, 0x3e	; 62
   1ccc6:	81 83       	std	Z+1, r24	; 0x01
   1ccc8:	92 83       	std	Z+2, r25	; 0x02
   1ccca:	a3 83       	std	Z+3, r26	; 0x03
   1cccc:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    gpib_timer_init();
   1ccd0:	0e 94 4a 84 	call	0x10894	; 0x10894 <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1ccd4:	89 ea       	ldi	r24, 0xA9	; 169
   1ccd6:	96 e4       	ldi	r25, 0x46	; 70
   1ccd8:	a0 e0       	ldi	r26, 0x00	; 0
   1ccda:	ed b7       	in	r30, 0x3d	; 61
   1ccdc:	fe b7       	in	r31, 0x3e	; 62
   1ccde:	81 83       	std	Z+1, r24	; 0x01
   1cce0:	92 83       	std	Z+2, r25	; 0x02
   1cce2:	a3 83       	std	Z+3, r26	; 0x03
   1cce4:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

///@brief Process hp85disk emulator config file
    gpib_file_init();
   1cce8:	0e 94 ae 8c 	call	0x1195c	; 0x1195c <gpib_file_init>
    printf("GPIB File init done\n");
   1ccec:	84 e9       	ldi	r24, 0x94	; 148
   1ccee:	96 e4       	ldi	r25, 0x46	; 70
   1ccf0:	a0 e0       	ldi	r26, 0x00	; 0
   1ccf2:	ed b7       	in	r30, 0x3d	; 61
   1ccf4:	fe b7       	in	r31, 0x3e	; 62
   1ccf6:	81 83       	std	Z+1, r24	; 0x01
   1ccf8:	92 83       	std	Z+2, r25	; 0x02
   1ccfa:	a3 83       	std	Z+3, r26	; 0x03
   1ccfc:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>

///@brief GPIB talking/listening state variables
///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1cd00:	0e 94 9e 86 	call	0x10d3c	; 0x10d3c <gpib_state_init>
    printf("GPIB State init done\n");
   1cd04:	8e e7       	ldi	r24, 0x7E	; 126
   1cd06:	96 e4       	ldi	r25, 0x46	; 70
   1cd08:	a0 e0       	ldi	r26, 0x00	; 0
   1cd0a:	ed b7       	in	r30, 0x3d	; 61
   1cd0c:	fe b7       	in	r31, 0x3e	; 62
   1cd0e:	81 83       	std	Z+1, r24	; 0x01
   1cd10:	92 83       	std	Z+2, r25	; 0x02
   1cd12:	a3 83       	std	Z+3, r26	; 0x03
   1cd14:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    sep();
   1cd18:	0e 94 80 32 	call	0x6500	; 0x6500 <sep>

///@brief Display Address Summary
    display_Addresses(0);
   1cd1c:	80 e0       	ldi	r24, 0x00	; 0
   1cd1e:	90 e0       	ldi	r25, 0x00	; 0
   1cd20:	0e 94 f4 93 	call	0x127e8	; 0x127e8 <display_Addresses>
    sep();
   1cd24:	0e 94 80 32 	call	0x6500	; 0x6500 <sep>

///@brief Display debug level
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1cd28:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1cd2c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1cd30:	ed b7       	in	r30, 0x3d	; 61
   1cd32:	fe b7       	in	r31, 0x3e	; 62
   1cd34:	95 83       	std	Z+5, r25	; 0x05
   1cd36:	84 83       	std	Z+4, r24	; 0x04
   1cd38:	88 e6       	ldi	r24, 0x68	; 104
   1cd3a:	96 e4       	ldi	r25, 0x46	; 70
   1cd3c:	a0 e0       	ldi	r26, 0x00	; 0
   1cd3e:	81 83       	std	Z+1, r24	; 0x01
   1cd40:	92 83       	std	Z+2, r25	; 0x02
   1cd42:	a3 83       	std	Z+3, r26	; 0x03
   1cd44:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
    sep();
   1cd48:	0e 94 80 32 	call	0x6500	; 0x6500 <sep>

///@brief Format any drives that do not yet exist
    format_drives();
   1cd4c:	0e 94 02 9b 	call	0x13604	; 0x13604 <format_drives>

#ifdef LCD_SUPPORT
	update_drive_counts();
   1cd50:	4c de       	rcall	.-872    	; 0x1c9ea <update_drive_counts>
	sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1cd52:	80 e0       	ldi	r24, 0x00	; 0
   1cd54:	97 e1       	ldi	r25, 0x17	; 23
   1cd56:	ed b7       	in	r30, 0x3d	; 61
   1cd58:	fe b7       	in	r31, 0x3e	; 62
   1cd5a:	97 83       	std	Z+7, r25	; 0x07
   1cd5c:	86 83       	std	Z+6, r24	; 0x06
   1cd5e:	82 e6       	ldi	r24, 0x62	; 98
   1cd60:	96 e4       	ldi	r25, 0x46	; 70
   1cd62:	a0 e0       	ldi	r26, 0x00	; 0
   1cd64:	83 83       	std	Z+3, r24	; 0x03
   1cd66:	94 83       	std	Z+4, r25	; 0x04
   1cd68:	a5 83       	std	Z+5, r26	; 0x05
   1cd6a:	85 ef       	ldi	r24, 0xF5	; 245
   1cd6c:	92 e0       	ldi	r25, 0x02	; 2
   1cd6e:	92 83       	std	Z+2, r25	; 0x02
   1cd70:	81 83       	std	Z+1, r24	; 0x01
   1cd72:	0e 94 5d 47 	call	0x8eba	; 0x8eba <sprintf_P>

	i2c_task_run();
   1cd76:	0e 94 d9 2c 	call	0x59b2	; 0x59b2 <i2c_task_run>
	delayms(1000);
   1cd7a:	68 ee       	ldi	r22, 0xE8	; 232
   1cd7c:	73 e0       	ldi	r23, 0x03	; 3
   1cd7e:	80 e0       	ldi	r24, 0x00	; 0
   1cd80:	90 e0       	ldi	r25, 0x00	; 0
   1cd82:	0e 94 47 28 	call	0x508e	; 0x508e <delayms>
    if(!i2c_task.done || i2c_task.error )
   1cd86:	80 91 6e 17 	lds	r24, 0x176E	; 0x80176e <i2c_task+0x2>
   1cd8a:	88 23       	and	r24, r24
   1cd8c:	21 f0       	breq	.+8      	; 0x1cd96 <main+0x33c>
   1cd8e:	80 91 6f 17 	lds	r24, 0x176F	; 0x80176f <i2c_task+0x3>
   1cd92:	88 23       	and	r24, r24
   1cd94:	61 f0       	breq	.+24     	; 0x1cdae <main+0x354>
	{
		i2c_display_task_errors();
   1cd96:	0e 94 40 2f 	call	0x5e80	; 0x5e80 <i2c_display_task_errors>
		printf("I2C LCD is NOT attached!\n");
   1cd9a:	88 e4       	ldi	r24, 0x48	; 72
   1cd9c:	96 e4       	ldi	r25, 0x46	; 70
   1cd9e:	a0 e0       	ldi	r26, 0x00	; 0
   1cda0:	ed b7       	in	r30, 0x3d	; 61
   1cda2:	fe b7       	in	r31, 0x3e	; 62
   1cda4:	81 83       	std	Z+1, r24	; 0x01
   1cda6:	92 83       	std	Z+2, r25	; 0x02
   1cda8:	a3 83       	std	Z+3, r26	; 0x03
   1cdaa:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
	}
#endif

///@brief Start main GPIB state machine
    printf("Starting GPIB TASK\n");
   1cdae:	84 e3       	ldi	r24, 0x34	; 52
   1cdb0:	96 e4       	ldi	r25, 0x46	; 70
   1cdb2:	a0 e0       	ldi	r26, 0x00	; 0
   1cdb4:	ed b7       	in	r30, 0x3d	; 61
   1cdb6:	fe b7       	in	r31, 0x3e	; 62
   1cdb8:	81 83       	std	Z+1, r24	; 0x01
   1cdba:	92 83       	std	Z+2, r25	; 0x02
   1cdbc:	a3 83       	std	Z+3, r26	; 0x03
   1cdbe:	0e 94 71 47 	call	0x8ee2	; 0x8ee2 <printf_P>
///@brief Keep the task running 
/// task does not exit unless a keypress occurs
/// When it restarts ALL GPIB states are reset 
    while ( 1)
    {
        user_task(1);
   1cdc2:	81 e0       	ldi	r24, 0x01	; 1
   1cdc4:	08 de       	rcall	.-1008   	; 0x1c9d6 <user_task>
   1cdc6:	fd cf       	rjmp	.-6      	; 0x1cdc2 <main+0x368>

0001cdc8 <__mulsi3>:
   1cdc8:	db 01       	movw	r26, r22
   1cdca:	8f 93       	push	r24
   1cdcc:	9f 93       	push	r25
   1cdce:	8b d0       	rcall	.+278    	; 0x1cee6 <__muluhisi3>
   1cdd0:	bf 91       	pop	r27
   1cdd2:	af 91       	pop	r26
   1cdd4:	a2 9f       	mul	r26, r18
   1cdd6:	80 0d       	add	r24, r0
   1cdd8:	91 1d       	adc	r25, r1
   1cdda:	a3 9f       	mul	r26, r19
   1cddc:	90 0d       	add	r25, r0
   1cdde:	b2 9f       	mul	r27, r18
   1cde0:	90 0d       	add	r25, r0
   1cde2:	11 24       	eor	r1, r1
   1cde4:	08 95       	ret

0001cde6 <__udivmodqi4>:
   1cde6:	99 1b       	sub	r25, r25
   1cde8:	79 e0       	ldi	r23, 0x09	; 9
   1cdea:	04 c0       	rjmp	.+8      	; 0x1cdf4 <__udivmodqi4_ep>

0001cdec <__udivmodqi4_loop>:
   1cdec:	99 1f       	adc	r25, r25
   1cdee:	96 17       	cp	r25, r22
   1cdf0:	08 f0       	brcs	.+2      	; 0x1cdf4 <__udivmodqi4_ep>
   1cdf2:	96 1b       	sub	r25, r22

0001cdf4 <__udivmodqi4_ep>:
   1cdf4:	88 1f       	adc	r24, r24
   1cdf6:	7a 95       	dec	r23
   1cdf8:	c9 f7       	brne	.-14     	; 0x1cdec <__udivmodqi4_loop>
   1cdfa:	80 95       	com	r24
   1cdfc:	08 95       	ret

0001cdfe <__udivmodhi4>:
   1cdfe:	aa 1b       	sub	r26, r26
   1ce00:	bb 1b       	sub	r27, r27
   1ce02:	51 e1       	ldi	r21, 0x11	; 17
   1ce04:	07 c0       	rjmp	.+14     	; 0x1ce14 <__udivmodhi4_ep>

0001ce06 <__udivmodhi4_loop>:
   1ce06:	aa 1f       	adc	r26, r26
   1ce08:	bb 1f       	adc	r27, r27
   1ce0a:	a6 17       	cp	r26, r22
   1ce0c:	b7 07       	cpc	r27, r23
   1ce0e:	10 f0       	brcs	.+4      	; 0x1ce14 <__udivmodhi4_ep>
   1ce10:	a6 1b       	sub	r26, r22
   1ce12:	b7 0b       	sbc	r27, r23

0001ce14 <__udivmodhi4_ep>:
   1ce14:	88 1f       	adc	r24, r24
   1ce16:	99 1f       	adc	r25, r25
   1ce18:	5a 95       	dec	r21
   1ce1a:	a9 f7       	brne	.-22     	; 0x1ce06 <__udivmodhi4_loop>
   1ce1c:	80 95       	com	r24
   1ce1e:	90 95       	com	r25
   1ce20:	bc 01       	movw	r22, r24
   1ce22:	cd 01       	movw	r24, r26
   1ce24:	08 95       	ret

0001ce26 <__divmodhi4>:
   1ce26:	97 fb       	bst	r25, 7
   1ce28:	07 2e       	mov	r0, r23
   1ce2a:	16 f4       	brtc	.+4      	; 0x1ce30 <__divmodhi4+0xa>
   1ce2c:	00 94       	com	r0
   1ce2e:	06 d0       	rcall	.+12     	; 0x1ce3c <__divmodhi4_neg1>
   1ce30:	77 fd       	sbrc	r23, 7
   1ce32:	08 d0       	rcall	.+16     	; 0x1ce44 <__divmodhi4_neg2>
   1ce34:	e4 df       	rcall	.-56     	; 0x1cdfe <__udivmodhi4>
   1ce36:	07 fc       	sbrc	r0, 7
   1ce38:	05 d0       	rcall	.+10     	; 0x1ce44 <__divmodhi4_neg2>
   1ce3a:	3e f4       	brtc	.+14     	; 0x1ce4a <__divmodhi4_exit>

0001ce3c <__divmodhi4_neg1>:
   1ce3c:	90 95       	com	r25
   1ce3e:	81 95       	neg	r24
   1ce40:	9f 4f       	sbci	r25, 0xFF	; 255
   1ce42:	08 95       	ret

0001ce44 <__divmodhi4_neg2>:
   1ce44:	70 95       	com	r23
   1ce46:	61 95       	neg	r22
   1ce48:	7f 4f       	sbci	r23, 0xFF	; 255

0001ce4a <__divmodhi4_exit>:
   1ce4a:	08 95       	ret

0001ce4c <__udivmodsi4>:
   1ce4c:	a1 e2       	ldi	r26, 0x21	; 33
   1ce4e:	1a 2e       	mov	r1, r26
   1ce50:	aa 1b       	sub	r26, r26
   1ce52:	bb 1b       	sub	r27, r27
   1ce54:	fd 01       	movw	r30, r26
   1ce56:	0d c0       	rjmp	.+26     	; 0x1ce72 <__udivmodsi4_ep>

0001ce58 <__udivmodsi4_loop>:
   1ce58:	aa 1f       	adc	r26, r26
   1ce5a:	bb 1f       	adc	r27, r27
   1ce5c:	ee 1f       	adc	r30, r30
   1ce5e:	ff 1f       	adc	r31, r31
   1ce60:	a2 17       	cp	r26, r18
   1ce62:	b3 07       	cpc	r27, r19
   1ce64:	e4 07       	cpc	r30, r20
   1ce66:	f5 07       	cpc	r31, r21
   1ce68:	20 f0       	brcs	.+8      	; 0x1ce72 <__udivmodsi4_ep>
   1ce6a:	a2 1b       	sub	r26, r18
   1ce6c:	b3 0b       	sbc	r27, r19
   1ce6e:	e4 0b       	sbc	r30, r20
   1ce70:	f5 0b       	sbc	r31, r21

0001ce72 <__udivmodsi4_ep>:
   1ce72:	66 1f       	adc	r22, r22
   1ce74:	77 1f       	adc	r23, r23
   1ce76:	88 1f       	adc	r24, r24
   1ce78:	99 1f       	adc	r25, r25
   1ce7a:	1a 94       	dec	r1
   1ce7c:	69 f7       	brne	.-38     	; 0x1ce58 <__udivmodsi4_loop>
   1ce7e:	60 95       	com	r22
   1ce80:	70 95       	com	r23
   1ce82:	80 95       	com	r24
   1ce84:	90 95       	com	r25
   1ce86:	9b 01       	movw	r18, r22
   1ce88:	ac 01       	movw	r20, r24
   1ce8a:	bd 01       	movw	r22, r26
   1ce8c:	cf 01       	movw	r24, r30
   1ce8e:	08 95       	ret

0001ce90 <__divmodsi4>:
   1ce90:	05 2e       	mov	r0, r21
   1ce92:	97 fb       	bst	r25, 7
   1ce94:	16 f4       	brtc	.+4      	; 0x1ce9a <__divmodsi4+0xa>
   1ce96:	00 94       	com	r0
   1ce98:	0f d0       	rcall	.+30     	; 0x1ceb8 <__negsi2>
   1ce9a:	57 fd       	sbrc	r21, 7
   1ce9c:	05 d0       	rcall	.+10     	; 0x1cea8 <__divmodsi4_neg2>
   1ce9e:	d6 df       	rcall	.-84     	; 0x1ce4c <__udivmodsi4>
   1cea0:	07 fc       	sbrc	r0, 7
   1cea2:	02 d0       	rcall	.+4      	; 0x1cea8 <__divmodsi4_neg2>
   1cea4:	46 f4       	brtc	.+16     	; 0x1ceb6 <__divmodsi4_exit>
   1cea6:	08 c0       	rjmp	.+16     	; 0x1ceb8 <__negsi2>

0001cea8 <__divmodsi4_neg2>:
   1cea8:	50 95       	com	r21
   1ceaa:	40 95       	com	r20
   1ceac:	30 95       	com	r19
   1ceae:	21 95       	neg	r18
   1ceb0:	3f 4f       	sbci	r19, 0xFF	; 255
   1ceb2:	4f 4f       	sbci	r20, 0xFF	; 255
   1ceb4:	5f 4f       	sbci	r21, 0xFF	; 255

0001ceb6 <__divmodsi4_exit>:
   1ceb6:	08 95       	ret

0001ceb8 <__negsi2>:
   1ceb8:	90 95       	com	r25
   1ceba:	80 95       	com	r24
   1cebc:	70 95       	com	r23
   1cebe:	61 95       	neg	r22
   1cec0:	7f 4f       	sbci	r23, 0xFF	; 255
   1cec2:	8f 4f       	sbci	r24, 0xFF	; 255
   1cec4:	9f 4f       	sbci	r25, 0xFF	; 255
   1cec6:	08 95       	ret

0001cec8 <__tablejump2__>:
   1cec8:	ee 0f       	add	r30, r30
   1ceca:	ff 1f       	adc	r31, r31
   1cecc:	00 24       	eor	r0, r0
   1cece:	00 1c       	adc	r0, r0
   1ced0:	0b be       	out	0x3b, r0	; 59
   1ced2:	07 90       	elpm	r0, Z+
   1ced4:	f6 91       	elpm	r31, Z
   1ced6:	e0 2d       	mov	r30, r0
   1ced8:	09 94       	ijmp

0001ceda <__usmulhisi3>:
   1ceda:	6f d0       	rcall	.+222    	; 0x1cfba <__umulhisi3>

0001cedc <__usmulhisi3_tail>:
   1cedc:	b7 ff       	sbrs	r27, 7
   1cede:	08 95       	ret
   1cee0:	82 1b       	sub	r24, r18
   1cee2:	93 0b       	sbc	r25, r19
   1cee4:	08 95       	ret

0001cee6 <__muluhisi3>:
   1cee6:	69 d0       	rcall	.+210    	; 0x1cfba <__umulhisi3>
   1cee8:	a5 9f       	mul	r26, r21
   1ceea:	90 0d       	add	r25, r0
   1ceec:	b4 9f       	mul	r27, r20
   1ceee:	90 0d       	add	r25, r0
   1cef0:	a4 9f       	mul	r26, r20
   1cef2:	80 0d       	add	r24, r0
   1cef4:	91 1d       	adc	r25, r1
   1cef6:	11 24       	eor	r1, r1
   1cef8:	08 95       	ret

0001cefa <__mulshisi3>:
   1cefa:	b7 ff       	sbrs	r27, 7
   1cefc:	f4 cf       	rjmp	.-24     	; 0x1cee6 <__muluhisi3>

0001cefe <__mulohisi3>:
   1cefe:	f3 df       	rcall	.-26     	; 0x1cee6 <__muluhisi3>
   1cf00:	82 1b       	sub	r24, r18
   1cf02:	93 0b       	sbc	r25, r19
   1cf04:	08 95       	ret

0001cf06 <__negdi2>:
   1cf06:	60 95       	com	r22
   1cf08:	70 95       	com	r23
   1cf0a:	80 95       	com	r24
   1cf0c:	90 95       	com	r25
   1cf0e:	30 95       	com	r19
   1cf10:	40 95       	com	r20
   1cf12:	50 95       	com	r21
   1cf14:	21 95       	neg	r18
   1cf16:	3f 4f       	sbci	r19, 0xFF	; 255
   1cf18:	4f 4f       	sbci	r20, 0xFF	; 255
   1cf1a:	5f 4f       	sbci	r21, 0xFF	; 255
   1cf1c:	6f 4f       	sbci	r22, 0xFF	; 255
   1cf1e:	7f 4f       	sbci	r23, 0xFF	; 255
   1cf20:	8f 4f       	sbci	r24, 0xFF	; 255
   1cf22:	9f 4f       	sbci	r25, 0xFF	; 255
   1cf24:	08 95       	ret

0001cf26 <__prologue_saves__>:
   1cf26:	2f 92       	push	r2
   1cf28:	3f 92       	push	r3
   1cf2a:	4f 92       	push	r4
   1cf2c:	5f 92       	push	r5
   1cf2e:	6f 92       	push	r6
   1cf30:	7f 92       	push	r7
   1cf32:	8f 92       	push	r8
   1cf34:	9f 92       	push	r9
   1cf36:	af 92       	push	r10
   1cf38:	bf 92       	push	r11
   1cf3a:	cf 92       	push	r12
   1cf3c:	df 92       	push	r13
   1cf3e:	ef 92       	push	r14
   1cf40:	ff 92       	push	r15
   1cf42:	0f 93       	push	r16
   1cf44:	1f 93       	push	r17
   1cf46:	cf 93       	push	r28
   1cf48:	df 93       	push	r29
   1cf4a:	cd b7       	in	r28, 0x3d	; 61
   1cf4c:	de b7       	in	r29, 0x3e	; 62
   1cf4e:	ca 1b       	sub	r28, r26
   1cf50:	db 0b       	sbc	r29, r27
   1cf52:	0f b6       	in	r0, 0x3f	; 63
   1cf54:	f8 94       	cli
   1cf56:	de bf       	out	0x3e, r29	; 62
   1cf58:	0f be       	out	0x3f, r0	; 63
   1cf5a:	cd bf       	out	0x3d, r28	; 61
   1cf5c:	09 94       	ijmp

0001cf5e <__epilogue_restores__>:
   1cf5e:	2a 88       	ldd	r2, Y+18	; 0x12
   1cf60:	39 88       	ldd	r3, Y+17	; 0x11
   1cf62:	48 88       	ldd	r4, Y+16	; 0x10
   1cf64:	5f 84       	ldd	r5, Y+15	; 0x0f
   1cf66:	6e 84       	ldd	r6, Y+14	; 0x0e
   1cf68:	7d 84       	ldd	r7, Y+13	; 0x0d
   1cf6a:	8c 84       	ldd	r8, Y+12	; 0x0c
   1cf6c:	9b 84       	ldd	r9, Y+11	; 0x0b
   1cf6e:	aa 84       	ldd	r10, Y+10	; 0x0a
   1cf70:	b9 84       	ldd	r11, Y+9	; 0x09
   1cf72:	c8 84       	ldd	r12, Y+8	; 0x08
   1cf74:	df 80       	ldd	r13, Y+7	; 0x07
   1cf76:	ee 80       	ldd	r14, Y+6	; 0x06
   1cf78:	fd 80       	ldd	r15, Y+5	; 0x05
   1cf7a:	0c 81       	ldd	r16, Y+4	; 0x04
   1cf7c:	1b 81       	ldd	r17, Y+3	; 0x03
   1cf7e:	aa 81       	ldd	r26, Y+2	; 0x02
   1cf80:	b9 81       	ldd	r27, Y+1	; 0x01
   1cf82:	ce 0f       	add	r28, r30
   1cf84:	d1 1d       	adc	r29, r1
   1cf86:	0f b6       	in	r0, 0x3f	; 63
   1cf88:	f8 94       	cli
   1cf8a:	de bf       	out	0x3e, r29	; 62
   1cf8c:	0f be       	out	0x3f, r0	; 63
   1cf8e:	cd bf       	out	0x3d, r28	; 61
   1cf90:	ed 01       	movw	r28, r26
   1cf92:	08 95       	ret

0001cf94 <__xload_1>:
   1cf94:	57 fd       	sbrc	r21, 7
   1cf96:	03 c0       	rjmp	.+6      	; 0x1cf9e <__xload_1+0xa>
   1cf98:	5b bf       	out	0x3b, r21	; 59
   1cf9a:	67 91       	elpm	r22, Z+
   1cf9c:	08 95       	ret
   1cf9e:	60 81       	ld	r22, Z
   1cfa0:	08 95       	ret

0001cfa2 <__cmpdi2_s8>:
   1cfa2:	00 24       	eor	r0, r0
   1cfa4:	a7 fd       	sbrc	r26, 7
   1cfa6:	00 94       	com	r0
   1cfa8:	2a 17       	cp	r18, r26
   1cfaa:	30 05       	cpc	r19, r0
   1cfac:	40 05       	cpc	r20, r0
   1cfae:	50 05       	cpc	r21, r0
   1cfb0:	60 05       	cpc	r22, r0
   1cfb2:	70 05       	cpc	r23, r0
   1cfb4:	80 05       	cpc	r24, r0
   1cfb6:	90 05       	cpc	r25, r0
   1cfb8:	08 95       	ret

0001cfba <__umulhisi3>:
   1cfba:	a2 9f       	mul	r26, r18
   1cfbc:	b0 01       	movw	r22, r0
   1cfbe:	b3 9f       	mul	r27, r19
   1cfc0:	c0 01       	movw	r24, r0
   1cfc2:	a3 9f       	mul	r26, r19
   1cfc4:	70 0d       	add	r23, r0
   1cfc6:	81 1d       	adc	r24, r1
   1cfc8:	11 24       	eor	r1, r1
   1cfca:	91 1d       	adc	r25, r1
   1cfcc:	b2 9f       	mul	r27, r18
   1cfce:	70 0d       	add	r23, r0
   1cfd0:	81 1d       	adc	r24, r1
   1cfd2:	11 24       	eor	r1, r1
   1cfd4:	91 1d       	adc	r25, r1
   1cfd6:	08 95       	ret

0001cfd8 <__subsf3>:
   1cfd8:	50 58       	subi	r21, 0x80	; 128

0001cfda <__addsf3>:
   1cfda:	bb 27       	eor	r27, r27
   1cfdc:	aa 27       	eor	r26, r26
   1cfde:	0e d0       	rcall	.+28     	; 0x1cffc <__addsf3x>
   1cfe0:	75 c1       	rjmp	.+746    	; 0x1d2cc <__fp_round>
   1cfe2:	66 d1       	rcall	.+716    	; 0x1d2b0 <__fp_pscA>
   1cfe4:	30 f0       	brcs	.+12     	; 0x1cff2 <__addsf3+0x18>
   1cfe6:	6b d1       	rcall	.+726    	; 0x1d2be <__fp_pscB>
   1cfe8:	20 f0       	brcs	.+8      	; 0x1cff2 <__addsf3+0x18>
   1cfea:	31 f4       	brne	.+12     	; 0x1cff8 <__addsf3+0x1e>
   1cfec:	9f 3f       	cpi	r25, 0xFF	; 255
   1cfee:	11 f4       	brne	.+4      	; 0x1cff4 <__addsf3+0x1a>
   1cff0:	1e f4       	brtc	.+6      	; 0x1cff8 <__addsf3+0x1e>
   1cff2:	5b c1       	rjmp	.+694    	; 0x1d2aa <__fp_nan>
   1cff4:	0e f4       	brtc	.+2      	; 0x1cff8 <__addsf3+0x1e>
   1cff6:	e0 95       	com	r30
   1cff8:	e7 fb       	bst	r30, 7
   1cffa:	51 c1       	rjmp	.+674    	; 0x1d29e <__fp_inf>

0001cffc <__addsf3x>:
   1cffc:	e9 2f       	mov	r30, r25
   1cffe:	77 d1       	rcall	.+750    	; 0x1d2ee <__fp_split3>
   1d000:	80 f3       	brcs	.-32     	; 0x1cfe2 <__addsf3+0x8>
   1d002:	ba 17       	cp	r27, r26
   1d004:	62 07       	cpc	r22, r18
   1d006:	73 07       	cpc	r23, r19
   1d008:	84 07       	cpc	r24, r20
   1d00a:	95 07       	cpc	r25, r21
   1d00c:	18 f0       	brcs	.+6      	; 0x1d014 <__addsf3x+0x18>
   1d00e:	71 f4       	brne	.+28     	; 0x1d02c <__addsf3x+0x30>
   1d010:	9e f5       	brtc	.+102    	; 0x1d078 <__addsf3x+0x7c>
   1d012:	8f c1       	rjmp	.+798    	; 0x1d332 <__fp_zero>
   1d014:	0e f4       	brtc	.+2      	; 0x1d018 <__addsf3x+0x1c>
   1d016:	e0 95       	com	r30
   1d018:	0b 2e       	mov	r0, r27
   1d01a:	ba 2f       	mov	r27, r26
   1d01c:	a0 2d       	mov	r26, r0
   1d01e:	0b 01       	movw	r0, r22
   1d020:	b9 01       	movw	r22, r18
   1d022:	90 01       	movw	r18, r0
   1d024:	0c 01       	movw	r0, r24
   1d026:	ca 01       	movw	r24, r20
   1d028:	a0 01       	movw	r20, r0
   1d02a:	11 24       	eor	r1, r1
   1d02c:	ff 27       	eor	r31, r31
   1d02e:	59 1b       	sub	r21, r25
   1d030:	99 f0       	breq	.+38     	; 0x1d058 <__addsf3x+0x5c>
   1d032:	59 3f       	cpi	r21, 0xF9	; 249
   1d034:	50 f4       	brcc	.+20     	; 0x1d04a <__addsf3x+0x4e>
   1d036:	50 3e       	cpi	r21, 0xE0	; 224
   1d038:	68 f1       	brcs	.+90     	; 0x1d094 <__addsf3x+0x98>
   1d03a:	1a 16       	cp	r1, r26
   1d03c:	f0 40       	sbci	r31, 0x00	; 0
   1d03e:	a2 2f       	mov	r26, r18
   1d040:	23 2f       	mov	r18, r19
   1d042:	34 2f       	mov	r19, r20
   1d044:	44 27       	eor	r20, r20
   1d046:	58 5f       	subi	r21, 0xF8	; 248
   1d048:	f3 cf       	rjmp	.-26     	; 0x1d030 <__addsf3x+0x34>
   1d04a:	46 95       	lsr	r20
   1d04c:	37 95       	ror	r19
   1d04e:	27 95       	ror	r18
   1d050:	a7 95       	ror	r26
   1d052:	f0 40       	sbci	r31, 0x00	; 0
   1d054:	53 95       	inc	r21
   1d056:	c9 f7       	brne	.-14     	; 0x1d04a <__addsf3x+0x4e>
   1d058:	7e f4       	brtc	.+30     	; 0x1d078 <__addsf3x+0x7c>
   1d05a:	1f 16       	cp	r1, r31
   1d05c:	ba 0b       	sbc	r27, r26
   1d05e:	62 0b       	sbc	r22, r18
   1d060:	73 0b       	sbc	r23, r19
   1d062:	84 0b       	sbc	r24, r20
   1d064:	ba f0       	brmi	.+46     	; 0x1d094 <__addsf3x+0x98>
   1d066:	91 50       	subi	r25, 0x01	; 1
   1d068:	a1 f0       	breq	.+40     	; 0x1d092 <__addsf3x+0x96>
   1d06a:	ff 0f       	add	r31, r31
   1d06c:	bb 1f       	adc	r27, r27
   1d06e:	66 1f       	adc	r22, r22
   1d070:	77 1f       	adc	r23, r23
   1d072:	88 1f       	adc	r24, r24
   1d074:	c2 f7       	brpl	.-16     	; 0x1d066 <__addsf3x+0x6a>
   1d076:	0e c0       	rjmp	.+28     	; 0x1d094 <__addsf3x+0x98>
   1d078:	ba 0f       	add	r27, r26
   1d07a:	62 1f       	adc	r22, r18
   1d07c:	73 1f       	adc	r23, r19
   1d07e:	84 1f       	adc	r24, r20
   1d080:	48 f4       	brcc	.+18     	; 0x1d094 <__addsf3x+0x98>
   1d082:	87 95       	ror	r24
   1d084:	77 95       	ror	r23
   1d086:	67 95       	ror	r22
   1d088:	b7 95       	ror	r27
   1d08a:	f7 95       	ror	r31
   1d08c:	9e 3f       	cpi	r25, 0xFE	; 254
   1d08e:	08 f0       	brcs	.+2      	; 0x1d092 <__addsf3x+0x96>
   1d090:	b3 cf       	rjmp	.-154    	; 0x1cff8 <__addsf3+0x1e>
   1d092:	93 95       	inc	r25
   1d094:	88 0f       	add	r24, r24
   1d096:	08 f0       	brcs	.+2      	; 0x1d09a <__addsf3x+0x9e>
   1d098:	99 27       	eor	r25, r25
   1d09a:	ee 0f       	add	r30, r30
   1d09c:	97 95       	ror	r25
   1d09e:	87 95       	ror	r24
   1d0a0:	08 95       	ret

0001d0a2 <__cmpsf2>:
   1d0a2:	d9 d0       	rcall	.+434    	; 0x1d256 <__fp_cmp>
   1d0a4:	08 f4       	brcc	.+2      	; 0x1d0a8 <__cmpsf2+0x6>
   1d0a6:	81 e0       	ldi	r24, 0x01	; 1
   1d0a8:	08 95       	ret

0001d0aa <__divsf3>:
   1d0aa:	0c d0       	rcall	.+24     	; 0x1d0c4 <__divsf3x>
   1d0ac:	0f c1       	rjmp	.+542    	; 0x1d2cc <__fp_round>
   1d0ae:	07 d1       	rcall	.+526    	; 0x1d2be <__fp_pscB>
   1d0b0:	40 f0       	brcs	.+16     	; 0x1d0c2 <__divsf3+0x18>
   1d0b2:	fe d0       	rcall	.+508    	; 0x1d2b0 <__fp_pscA>
   1d0b4:	30 f0       	brcs	.+12     	; 0x1d0c2 <__divsf3+0x18>
   1d0b6:	21 f4       	brne	.+8      	; 0x1d0c0 <__divsf3+0x16>
   1d0b8:	5f 3f       	cpi	r21, 0xFF	; 255
   1d0ba:	19 f0       	breq	.+6      	; 0x1d0c2 <__divsf3+0x18>
   1d0bc:	f0 c0       	rjmp	.+480    	; 0x1d29e <__fp_inf>
   1d0be:	51 11       	cpse	r21, r1
   1d0c0:	39 c1       	rjmp	.+626    	; 0x1d334 <__fp_szero>
   1d0c2:	f3 c0       	rjmp	.+486    	; 0x1d2aa <__fp_nan>

0001d0c4 <__divsf3x>:
   1d0c4:	14 d1       	rcall	.+552    	; 0x1d2ee <__fp_split3>
   1d0c6:	98 f3       	brcs	.-26     	; 0x1d0ae <__divsf3+0x4>

0001d0c8 <__divsf3_pse>:
   1d0c8:	99 23       	and	r25, r25
   1d0ca:	c9 f3       	breq	.-14     	; 0x1d0be <__divsf3+0x14>
   1d0cc:	55 23       	and	r21, r21
   1d0ce:	b1 f3       	breq	.-20     	; 0x1d0bc <__divsf3+0x12>
   1d0d0:	95 1b       	sub	r25, r21
   1d0d2:	55 0b       	sbc	r21, r21
   1d0d4:	bb 27       	eor	r27, r27
   1d0d6:	aa 27       	eor	r26, r26
   1d0d8:	62 17       	cp	r22, r18
   1d0da:	73 07       	cpc	r23, r19
   1d0dc:	84 07       	cpc	r24, r20
   1d0de:	38 f0       	brcs	.+14     	; 0x1d0ee <__divsf3_pse+0x26>
   1d0e0:	9f 5f       	subi	r25, 0xFF	; 255
   1d0e2:	5f 4f       	sbci	r21, 0xFF	; 255
   1d0e4:	22 0f       	add	r18, r18
   1d0e6:	33 1f       	adc	r19, r19
   1d0e8:	44 1f       	adc	r20, r20
   1d0ea:	aa 1f       	adc	r26, r26
   1d0ec:	a9 f3       	breq	.-22     	; 0x1d0d8 <__divsf3_pse+0x10>
   1d0ee:	33 d0       	rcall	.+102    	; 0x1d156 <__divsf3_pse+0x8e>
   1d0f0:	0e 2e       	mov	r0, r30
   1d0f2:	3a f0       	brmi	.+14     	; 0x1d102 <__divsf3_pse+0x3a>
   1d0f4:	e0 e8       	ldi	r30, 0x80	; 128
   1d0f6:	30 d0       	rcall	.+96     	; 0x1d158 <__divsf3_pse+0x90>
   1d0f8:	91 50       	subi	r25, 0x01	; 1
   1d0fa:	50 40       	sbci	r21, 0x00	; 0
   1d0fc:	e6 95       	lsr	r30
   1d0fe:	00 1c       	adc	r0, r0
   1d100:	ca f7       	brpl	.-14     	; 0x1d0f4 <__divsf3_pse+0x2c>
   1d102:	29 d0       	rcall	.+82     	; 0x1d156 <__divsf3_pse+0x8e>
   1d104:	fe 2f       	mov	r31, r30
   1d106:	27 d0       	rcall	.+78     	; 0x1d156 <__divsf3_pse+0x8e>
   1d108:	66 0f       	add	r22, r22
   1d10a:	77 1f       	adc	r23, r23
   1d10c:	88 1f       	adc	r24, r24
   1d10e:	bb 1f       	adc	r27, r27
   1d110:	26 17       	cp	r18, r22
   1d112:	37 07       	cpc	r19, r23
   1d114:	48 07       	cpc	r20, r24
   1d116:	ab 07       	cpc	r26, r27
   1d118:	b0 e8       	ldi	r27, 0x80	; 128
   1d11a:	09 f0       	breq	.+2      	; 0x1d11e <__divsf3_pse+0x56>
   1d11c:	bb 0b       	sbc	r27, r27
   1d11e:	80 2d       	mov	r24, r0
   1d120:	bf 01       	movw	r22, r30
   1d122:	ff 27       	eor	r31, r31
   1d124:	93 58       	subi	r25, 0x83	; 131
   1d126:	5f 4f       	sbci	r21, 0xFF	; 255
   1d128:	2a f0       	brmi	.+10     	; 0x1d134 <__divsf3_pse+0x6c>
   1d12a:	9e 3f       	cpi	r25, 0xFE	; 254
   1d12c:	51 05       	cpc	r21, r1
   1d12e:	68 f0       	brcs	.+26     	; 0x1d14a <__divsf3_pse+0x82>
   1d130:	b6 c0       	rjmp	.+364    	; 0x1d29e <__fp_inf>
   1d132:	00 c1       	rjmp	.+512    	; 0x1d334 <__fp_szero>
   1d134:	5f 3f       	cpi	r21, 0xFF	; 255
   1d136:	ec f3       	brlt	.-6      	; 0x1d132 <__divsf3_pse+0x6a>
   1d138:	98 3e       	cpi	r25, 0xE8	; 232
   1d13a:	dc f3       	brlt	.-10     	; 0x1d132 <__divsf3_pse+0x6a>
   1d13c:	86 95       	lsr	r24
   1d13e:	77 95       	ror	r23
   1d140:	67 95       	ror	r22
   1d142:	b7 95       	ror	r27
   1d144:	f7 95       	ror	r31
   1d146:	9f 5f       	subi	r25, 0xFF	; 255
   1d148:	c9 f7       	brne	.-14     	; 0x1d13c <__divsf3_pse+0x74>
   1d14a:	88 0f       	add	r24, r24
   1d14c:	91 1d       	adc	r25, r1
   1d14e:	96 95       	lsr	r25
   1d150:	87 95       	ror	r24
   1d152:	97 f9       	bld	r25, 7
   1d154:	08 95       	ret
   1d156:	e1 e0       	ldi	r30, 0x01	; 1
   1d158:	66 0f       	add	r22, r22
   1d15a:	77 1f       	adc	r23, r23
   1d15c:	88 1f       	adc	r24, r24
   1d15e:	bb 1f       	adc	r27, r27
   1d160:	62 17       	cp	r22, r18
   1d162:	73 07       	cpc	r23, r19
   1d164:	84 07       	cpc	r24, r20
   1d166:	ba 07       	cpc	r27, r26
   1d168:	20 f0       	brcs	.+8      	; 0x1d172 <__divsf3_pse+0xaa>
   1d16a:	62 1b       	sub	r22, r18
   1d16c:	73 0b       	sbc	r23, r19
   1d16e:	84 0b       	sbc	r24, r20
   1d170:	ba 0b       	sbc	r27, r26
   1d172:	ee 1f       	adc	r30, r30
   1d174:	88 f7       	brcc	.-30     	; 0x1d158 <__divsf3_pse+0x90>
   1d176:	e0 95       	com	r30
   1d178:	08 95       	ret

0001d17a <__fixsfsi>:
   1d17a:	04 d0       	rcall	.+8      	; 0x1d184 <__fixunssfsi>
   1d17c:	68 94       	set
   1d17e:	b1 11       	cpse	r27, r1
   1d180:	d9 c0       	rjmp	.+434    	; 0x1d334 <__fp_szero>
   1d182:	08 95       	ret

0001d184 <__fixunssfsi>:
   1d184:	bc d0       	rcall	.+376    	; 0x1d2fe <__fp_splitA>
   1d186:	88 f0       	brcs	.+34     	; 0x1d1aa <__fixunssfsi+0x26>
   1d188:	9f 57       	subi	r25, 0x7F	; 127
   1d18a:	90 f0       	brcs	.+36     	; 0x1d1b0 <__fixunssfsi+0x2c>
   1d18c:	b9 2f       	mov	r27, r25
   1d18e:	99 27       	eor	r25, r25
   1d190:	b7 51       	subi	r27, 0x17	; 23
   1d192:	a0 f0       	brcs	.+40     	; 0x1d1bc <__fixunssfsi+0x38>
   1d194:	d1 f0       	breq	.+52     	; 0x1d1ca <__fixunssfsi+0x46>
   1d196:	66 0f       	add	r22, r22
   1d198:	77 1f       	adc	r23, r23
   1d19a:	88 1f       	adc	r24, r24
   1d19c:	99 1f       	adc	r25, r25
   1d19e:	1a f0       	brmi	.+6      	; 0x1d1a6 <__fixunssfsi+0x22>
   1d1a0:	ba 95       	dec	r27
   1d1a2:	c9 f7       	brne	.-14     	; 0x1d196 <__fixunssfsi+0x12>
   1d1a4:	12 c0       	rjmp	.+36     	; 0x1d1ca <__fixunssfsi+0x46>
   1d1a6:	b1 30       	cpi	r27, 0x01	; 1
   1d1a8:	81 f0       	breq	.+32     	; 0x1d1ca <__fixunssfsi+0x46>
   1d1aa:	c3 d0       	rcall	.+390    	; 0x1d332 <__fp_zero>
   1d1ac:	b1 e0       	ldi	r27, 0x01	; 1
   1d1ae:	08 95       	ret
   1d1b0:	c0 c0       	rjmp	.+384    	; 0x1d332 <__fp_zero>
   1d1b2:	67 2f       	mov	r22, r23
   1d1b4:	78 2f       	mov	r23, r24
   1d1b6:	88 27       	eor	r24, r24
   1d1b8:	b8 5f       	subi	r27, 0xF8	; 248
   1d1ba:	39 f0       	breq	.+14     	; 0x1d1ca <__fixunssfsi+0x46>
   1d1bc:	b9 3f       	cpi	r27, 0xF9	; 249
   1d1be:	cc f3       	brlt	.-14     	; 0x1d1b2 <__fixunssfsi+0x2e>
   1d1c0:	86 95       	lsr	r24
   1d1c2:	77 95       	ror	r23
   1d1c4:	67 95       	ror	r22
   1d1c6:	b3 95       	inc	r27
   1d1c8:	d9 f7       	brne	.-10     	; 0x1d1c0 <__fixunssfsi+0x3c>
   1d1ca:	3e f4       	brtc	.+14     	; 0x1d1da <__fixunssfsi+0x56>
   1d1cc:	90 95       	com	r25
   1d1ce:	80 95       	com	r24
   1d1d0:	70 95       	com	r23
   1d1d2:	61 95       	neg	r22
   1d1d4:	7f 4f       	sbci	r23, 0xFF	; 255
   1d1d6:	8f 4f       	sbci	r24, 0xFF	; 255
   1d1d8:	9f 4f       	sbci	r25, 0xFF	; 255
   1d1da:	08 95       	ret

0001d1dc <__floatunsisf>:
   1d1dc:	e8 94       	clt
   1d1de:	09 c0       	rjmp	.+18     	; 0x1d1f2 <__floatsisf+0x12>

0001d1e0 <__floatsisf>:
   1d1e0:	97 fb       	bst	r25, 7
   1d1e2:	3e f4       	brtc	.+14     	; 0x1d1f2 <__floatsisf+0x12>
   1d1e4:	90 95       	com	r25
   1d1e6:	80 95       	com	r24
   1d1e8:	70 95       	com	r23
   1d1ea:	61 95       	neg	r22
   1d1ec:	7f 4f       	sbci	r23, 0xFF	; 255
   1d1ee:	8f 4f       	sbci	r24, 0xFF	; 255
   1d1f0:	9f 4f       	sbci	r25, 0xFF	; 255
   1d1f2:	99 23       	and	r25, r25
   1d1f4:	a9 f0       	breq	.+42     	; 0x1d220 <__floatsisf+0x40>
   1d1f6:	f9 2f       	mov	r31, r25
   1d1f8:	96 e9       	ldi	r25, 0x96	; 150
   1d1fa:	bb 27       	eor	r27, r27
   1d1fc:	93 95       	inc	r25
   1d1fe:	f6 95       	lsr	r31
   1d200:	87 95       	ror	r24
   1d202:	77 95       	ror	r23
   1d204:	67 95       	ror	r22
   1d206:	b7 95       	ror	r27
   1d208:	f1 11       	cpse	r31, r1
   1d20a:	f8 cf       	rjmp	.-16     	; 0x1d1fc <__floatsisf+0x1c>
   1d20c:	fa f4       	brpl	.+62     	; 0x1d24c <__floatsisf+0x6c>
   1d20e:	bb 0f       	add	r27, r27
   1d210:	11 f4       	brne	.+4      	; 0x1d216 <__floatsisf+0x36>
   1d212:	60 ff       	sbrs	r22, 0
   1d214:	1b c0       	rjmp	.+54     	; 0x1d24c <__floatsisf+0x6c>
   1d216:	6f 5f       	subi	r22, 0xFF	; 255
   1d218:	7f 4f       	sbci	r23, 0xFF	; 255
   1d21a:	8f 4f       	sbci	r24, 0xFF	; 255
   1d21c:	9f 4f       	sbci	r25, 0xFF	; 255
   1d21e:	16 c0       	rjmp	.+44     	; 0x1d24c <__floatsisf+0x6c>
   1d220:	88 23       	and	r24, r24
   1d222:	11 f0       	breq	.+4      	; 0x1d228 <__floatsisf+0x48>
   1d224:	96 e9       	ldi	r25, 0x96	; 150
   1d226:	11 c0       	rjmp	.+34     	; 0x1d24a <__floatsisf+0x6a>
   1d228:	77 23       	and	r23, r23
   1d22a:	21 f0       	breq	.+8      	; 0x1d234 <__floatsisf+0x54>
   1d22c:	9e e8       	ldi	r25, 0x8E	; 142
   1d22e:	87 2f       	mov	r24, r23
   1d230:	76 2f       	mov	r23, r22
   1d232:	05 c0       	rjmp	.+10     	; 0x1d23e <__floatsisf+0x5e>
   1d234:	66 23       	and	r22, r22
   1d236:	71 f0       	breq	.+28     	; 0x1d254 <__floatsisf+0x74>
   1d238:	96 e8       	ldi	r25, 0x86	; 134
   1d23a:	86 2f       	mov	r24, r22
   1d23c:	70 e0       	ldi	r23, 0x00	; 0
   1d23e:	60 e0       	ldi	r22, 0x00	; 0
   1d240:	2a f0       	brmi	.+10     	; 0x1d24c <__floatsisf+0x6c>
   1d242:	9a 95       	dec	r25
   1d244:	66 0f       	add	r22, r22
   1d246:	77 1f       	adc	r23, r23
   1d248:	88 1f       	adc	r24, r24
   1d24a:	da f7       	brpl	.-10     	; 0x1d242 <__floatsisf+0x62>
   1d24c:	88 0f       	add	r24, r24
   1d24e:	96 95       	lsr	r25
   1d250:	87 95       	ror	r24
   1d252:	97 f9       	bld	r25, 7
   1d254:	08 95       	ret

0001d256 <__fp_cmp>:
   1d256:	99 0f       	add	r25, r25
   1d258:	00 08       	sbc	r0, r0
   1d25a:	55 0f       	add	r21, r21
   1d25c:	aa 0b       	sbc	r26, r26
   1d25e:	e0 e8       	ldi	r30, 0x80	; 128
   1d260:	fe ef       	ldi	r31, 0xFE	; 254
   1d262:	16 16       	cp	r1, r22
   1d264:	17 06       	cpc	r1, r23
   1d266:	e8 07       	cpc	r30, r24
   1d268:	f9 07       	cpc	r31, r25
   1d26a:	c0 f0       	brcs	.+48     	; 0x1d29c <__fp_cmp+0x46>
   1d26c:	12 16       	cp	r1, r18
   1d26e:	13 06       	cpc	r1, r19
   1d270:	e4 07       	cpc	r30, r20
   1d272:	f5 07       	cpc	r31, r21
   1d274:	98 f0       	brcs	.+38     	; 0x1d29c <__fp_cmp+0x46>
   1d276:	62 1b       	sub	r22, r18
   1d278:	73 0b       	sbc	r23, r19
   1d27a:	84 0b       	sbc	r24, r20
   1d27c:	95 0b       	sbc	r25, r21
   1d27e:	39 f4       	brne	.+14     	; 0x1d28e <__fp_cmp+0x38>
   1d280:	0a 26       	eor	r0, r26
   1d282:	61 f0       	breq	.+24     	; 0x1d29c <__fp_cmp+0x46>
   1d284:	23 2b       	or	r18, r19
   1d286:	24 2b       	or	r18, r20
   1d288:	25 2b       	or	r18, r21
   1d28a:	21 f4       	brne	.+8      	; 0x1d294 <__fp_cmp+0x3e>
   1d28c:	08 95       	ret
   1d28e:	0a 26       	eor	r0, r26
   1d290:	09 f4       	brne	.+2      	; 0x1d294 <__fp_cmp+0x3e>
   1d292:	a1 40       	sbci	r26, 0x01	; 1
   1d294:	a6 95       	lsr	r26
   1d296:	8f ef       	ldi	r24, 0xFF	; 255
   1d298:	81 1d       	adc	r24, r1
   1d29a:	81 1d       	adc	r24, r1
   1d29c:	08 95       	ret

0001d29e <__fp_inf>:
   1d29e:	97 f9       	bld	r25, 7
   1d2a0:	9f 67       	ori	r25, 0x7F	; 127
   1d2a2:	80 e8       	ldi	r24, 0x80	; 128
   1d2a4:	70 e0       	ldi	r23, 0x00	; 0
   1d2a6:	60 e0       	ldi	r22, 0x00	; 0
   1d2a8:	08 95       	ret

0001d2aa <__fp_nan>:
   1d2aa:	9f ef       	ldi	r25, 0xFF	; 255
   1d2ac:	80 ec       	ldi	r24, 0xC0	; 192
   1d2ae:	08 95       	ret

0001d2b0 <__fp_pscA>:
   1d2b0:	00 24       	eor	r0, r0
   1d2b2:	0a 94       	dec	r0
   1d2b4:	16 16       	cp	r1, r22
   1d2b6:	17 06       	cpc	r1, r23
   1d2b8:	18 06       	cpc	r1, r24
   1d2ba:	09 06       	cpc	r0, r25
   1d2bc:	08 95       	ret

0001d2be <__fp_pscB>:
   1d2be:	00 24       	eor	r0, r0
   1d2c0:	0a 94       	dec	r0
   1d2c2:	12 16       	cp	r1, r18
   1d2c4:	13 06       	cpc	r1, r19
   1d2c6:	14 06       	cpc	r1, r20
   1d2c8:	05 06       	cpc	r0, r21
   1d2ca:	08 95       	ret

0001d2cc <__fp_round>:
   1d2cc:	09 2e       	mov	r0, r25
   1d2ce:	03 94       	inc	r0
   1d2d0:	00 0c       	add	r0, r0
   1d2d2:	11 f4       	brne	.+4      	; 0x1d2d8 <__fp_round+0xc>
   1d2d4:	88 23       	and	r24, r24
   1d2d6:	52 f0       	brmi	.+20     	; 0x1d2ec <__fp_round+0x20>
   1d2d8:	bb 0f       	add	r27, r27
   1d2da:	40 f4       	brcc	.+16     	; 0x1d2ec <__fp_round+0x20>
   1d2dc:	bf 2b       	or	r27, r31
   1d2de:	11 f4       	brne	.+4      	; 0x1d2e4 <__fp_round+0x18>
   1d2e0:	60 ff       	sbrs	r22, 0
   1d2e2:	04 c0       	rjmp	.+8      	; 0x1d2ec <__fp_round+0x20>
   1d2e4:	6f 5f       	subi	r22, 0xFF	; 255
   1d2e6:	7f 4f       	sbci	r23, 0xFF	; 255
   1d2e8:	8f 4f       	sbci	r24, 0xFF	; 255
   1d2ea:	9f 4f       	sbci	r25, 0xFF	; 255
   1d2ec:	08 95       	ret

0001d2ee <__fp_split3>:
   1d2ee:	57 fd       	sbrc	r21, 7
   1d2f0:	90 58       	subi	r25, 0x80	; 128
   1d2f2:	44 0f       	add	r20, r20
   1d2f4:	55 1f       	adc	r21, r21
   1d2f6:	59 f0       	breq	.+22     	; 0x1d30e <__fp_splitA+0x10>
   1d2f8:	5f 3f       	cpi	r21, 0xFF	; 255
   1d2fa:	71 f0       	breq	.+28     	; 0x1d318 <__fp_splitA+0x1a>
   1d2fc:	47 95       	ror	r20

0001d2fe <__fp_splitA>:
   1d2fe:	88 0f       	add	r24, r24
   1d300:	97 fb       	bst	r25, 7
   1d302:	99 1f       	adc	r25, r25
   1d304:	61 f0       	breq	.+24     	; 0x1d31e <__fp_splitA+0x20>
   1d306:	9f 3f       	cpi	r25, 0xFF	; 255
   1d308:	79 f0       	breq	.+30     	; 0x1d328 <__fp_splitA+0x2a>
   1d30a:	87 95       	ror	r24
   1d30c:	08 95       	ret
   1d30e:	12 16       	cp	r1, r18
   1d310:	13 06       	cpc	r1, r19
   1d312:	14 06       	cpc	r1, r20
   1d314:	55 1f       	adc	r21, r21
   1d316:	f2 cf       	rjmp	.-28     	; 0x1d2fc <__fp_split3+0xe>
   1d318:	46 95       	lsr	r20
   1d31a:	f1 df       	rcall	.-30     	; 0x1d2fe <__fp_splitA>
   1d31c:	08 c0       	rjmp	.+16     	; 0x1d32e <__fp_splitA+0x30>
   1d31e:	16 16       	cp	r1, r22
   1d320:	17 06       	cpc	r1, r23
   1d322:	18 06       	cpc	r1, r24
   1d324:	99 1f       	adc	r25, r25
   1d326:	f1 cf       	rjmp	.-30     	; 0x1d30a <__fp_splitA+0xc>
   1d328:	86 95       	lsr	r24
   1d32a:	71 05       	cpc	r23, r1
   1d32c:	61 05       	cpc	r22, r1
   1d32e:	08 94       	sec
   1d330:	08 95       	ret

0001d332 <__fp_zero>:
   1d332:	e8 94       	clt

0001d334 <__fp_szero>:
   1d334:	bb 27       	eor	r27, r27
   1d336:	66 27       	eor	r22, r22
   1d338:	77 27       	eor	r23, r23
   1d33a:	cb 01       	movw	r24, r22
   1d33c:	97 f9       	bld	r25, 7
   1d33e:	08 95       	ret

0001d340 <__gesf2>:
   1d340:	8a df       	rcall	.-236    	; 0x1d256 <__fp_cmp>
   1d342:	08 f4       	brcc	.+2      	; 0x1d346 <__gesf2+0x6>
   1d344:	8f ef       	ldi	r24, 0xFF	; 255
   1d346:	08 95       	ret

0001d348 <__mulsf3>:
   1d348:	0b d0       	rcall	.+22     	; 0x1d360 <__mulsf3x>
   1d34a:	c0 cf       	rjmp	.-128    	; 0x1d2cc <__fp_round>
   1d34c:	b1 df       	rcall	.-158    	; 0x1d2b0 <__fp_pscA>
   1d34e:	28 f0       	brcs	.+10     	; 0x1d35a <__mulsf3+0x12>
   1d350:	b6 df       	rcall	.-148    	; 0x1d2be <__fp_pscB>
   1d352:	18 f0       	brcs	.+6      	; 0x1d35a <__mulsf3+0x12>
   1d354:	95 23       	and	r25, r21
   1d356:	09 f0       	breq	.+2      	; 0x1d35a <__mulsf3+0x12>
   1d358:	a2 cf       	rjmp	.-188    	; 0x1d29e <__fp_inf>
   1d35a:	a7 cf       	rjmp	.-178    	; 0x1d2aa <__fp_nan>
   1d35c:	11 24       	eor	r1, r1
   1d35e:	ea cf       	rjmp	.-44     	; 0x1d334 <__fp_szero>

0001d360 <__mulsf3x>:
   1d360:	c6 df       	rcall	.-116    	; 0x1d2ee <__fp_split3>
   1d362:	a0 f3       	brcs	.-24     	; 0x1d34c <__mulsf3+0x4>

0001d364 <__mulsf3_pse>:
   1d364:	95 9f       	mul	r25, r21
   1d366:	d1 f3       	breq	.-12     	; 0x1d35c <__mulsf3+0x14>
   1d368:	95 0f       	add	r25, r21
   1d36a:	50 e0       	ldi	r21, 0x00	; 0
   1d36c:	55 1f       	adc	r21, r21
   1d36e:	62 9f       	mul	r22, r18
   1d370:	f0 01       	movw	r30, r0
   1d372:	72 9f       	mul	r23, r18
   1d374:	bb 27       	eor	r27, r27
   1d376:	f0 0d       	add	r31, r0
   1d378:	b1 1d       	adc	r27, r1
   1d37a:	63 9f       	mul	r22, r19
   1d37c:	aa 27       	eor	r26, r26
   1d37e:	f0 0d       	add	r31, r0
   1d380:	b1 1d       	adc	r27, r1
   1d382:	aa 1f       	adc	r26, r26
   1d384:	64 9f       	mul	r22, r20
   1d386:	66 27       	eor	r22, r22
   1d388:	b0 0d       	add	r27, r0
   1d38a:	a1 1d       	adc	r26, r1
   1d38c:	66 1f       	adc	r22, r22
   1d38e:	82 9f       	mul	r24, r18
   1d390:	22 27       	eor	r18, r18
   1d392:	b0 0d       	add	r27, r0
   1d394:	a1 1d       	adc	r26, r1
   1d396:	62 1f       	adc	r22, r18
   1d398:	73 9f       	mul	r23, r19
   1d39a:	b0 0d       	add	r27, r0
   1d39c:	a1 1d       	adc	r26, r1
   1d39e:	62 1f       	adc	r22, r18
   1d3a0:	83 9f       	mul	r24, r19
   1d3a2:	a0 0d       	add	r26, r0
   1d3a4:	61 1d       	adc	r22, r1
   1d3a6:	22 1f       	adc	r18, r18
   1d3a8:	74 9f       	mul	r23, r20
   1d3aa:	33 27       	eor	r19, r19
   1d3ac:	a0 0d       	add	r26, r0
   1d3ae:	61 1d       	adc	r22, r1
   1d3b0:	23 1f       	adc	r18, r19
   1d3b2:	84 9f       	mul	r24, r20
   1d3b4:	60 0d       	add	r22, r0
   1d3b6:	21 1d       	adc	r18, r1
   1d3b8:	82 2f       	mov	r24, r18
   1d3ba:	76 2f       	mov	r23, r22
   1d3bc:	6a 2f       	mov	r22, r26
   1d3be:	11 24       	eor	r1, r1
   1d3c0:	9f 57       	subi	r25, 0x7F	; 127
   1d3c2:	50 40       	sbci	r21, 0x00	; 0
   1d3c4:	8a f0       	brmi	.+34     	; 0x1d3e8 <__mulsf3_pse+0x84>
   1d3c6:	e1 f0       	breq	.+56     	; 0x1d400 <__mulsf3_pse+0x9c>
   1d3c8:	88 23       	and	r24, r24
   1d3ca:	4a f0       	brmi	.+18     	; 0x1d3de <__mulsf3_pse+0x7a>
   1d3cc:	ee 0f       	add	r30, r30
   1d3ce:	ff 1f       	adc	r31, r31
   1d3d0:	bb 1f       	adc	r27, r27
   1d3d2:	66 1f       	adc	r22, r22
   1d3d4:	77 1f       	adc	r23, r23
   1d3d6:	88 1f       	adc	r24, r24
   1d3d8:	91 50       	subi	r25, 0x01	; 1
   1d3da:	50 40       	sbci	r21, 0x00	; 0
   1d3dc:	a9 f7       	brne	.-22     	; 0x1d3c8 <__mulsf3_pse+0x64>
   1d3de:	9e 3f       	cpi	r25, 0xFE	; 254
   1d3e0:	51 05       	cpc	r21, r1
   1d3e2:	70 f0       	brcs	.+28     	; 0x1d400 <__mulsf3_pse+0x9c>
   1d3e4:	5c cf       	rjmp	.-328    	; 0x1d29e <__fp_inf>
   1d3e6:	a6 cf       	rjmp	.-180    	; 0x1d334 <__fp_szero>
   1d3e8:	5f 3f       	cpi	r21, 0xFF	; 255
   1d3ea:	ec f3       	brlt	.-6      	; 0x1d3e6 <__mulsf3_pse+0x82>
   1d3ec:	98 3e       	cpi	r25, 0xE8	; 232
   1d3ee:	dc f3       	brlt	.-10     	; 0x1d3e6 <__mulsf3_pse+0x82>
   1d3f0:	86 95       	lsr	r24
   1d3f2:	77 95       	ror	r23
   1d3f4:	67 95       	ror	r22
   1d3f6:	b7 95       	ror	r27
   1d3f8:	f7 95       	ror	r31
   1d3fa:	e7 95       	ror	r30
   1d3fc:	9f 5f       	subi	r25, 0xFF	; 255
   1d3fe:	c1 f7       	brne	.-16     	; 0x1d3f0 <__mulsf3_pse+0x8c>
   1d400:	fe 2b       	or	r31, r30
   1d402:	88 0f       	add	r24, r24
   1d404:	91 1d       	adc	r25, r1
   1d406:	96 95       	lsr	r25
   1d408:	87 95       	ror	r24
   1d40a:	97 f9       	bld	r25, 7
   1d40c:	08 95       	ret

0001d40e <round>:
   1d40e:	77 df       	rcall	.-274    	; 0x1d2fe <__fp_splitA>
   1d410:	e0 f0       	brcs	.+56     	; 0x1d44a <round+0x3c>
   1d412:	9e 37       	cpi	r25, 0x7E	; 126
   1d414:	d8 f0       	brcs	.+54     	; 0x1d44c <round+0x3e>
   1d416:	96 39       	cpi	r25, 0x96	; 150
   1d418:	b8 f4       	brcc	.+46     	; 0x1d448 <round+0x3a>
   1d41a:	9e 38       	cpi	r25, 0x8E	; 142
   1d41c:	48 f4       	brcc	.+18     	; 0x1d430 <round+0x22>
   1d41e:	67 2f       	mov	r22, r23
   1d420:	78 2f       	mov	r23, r24
   1d422:	88 27       	eor	r24, r24
   1d424:	98 5f       	subi	r25, 0xF8	; 248
   1d426:	f9 cf       	rjmp	.-14     	; 0x1d41a <round+0xc>
   1d428:	86 95       	lsr	r24
   1d42a:	77 95       	ror	r23
   1d42c:	67 95       	ror	r22
   1d42e:	93 95       	inc	r25
   1d430:	95 39       	cpi	r25, 0x95	; 149
   1d432:	d0 f3       	brcs	.-12     	; 0x1d428 <round+0x1a>
   1d434:	b6 2f       	mov	r27, r22
   1d436:	b1 70       	andi	r27, 0x01	; 1
   1d438:	6b 0f       	add	r22, r27
   1d43a:	71 1d       	adc	r23, r1
   1d43c:	81 1d       	adc	r24, r1
   1d43e:	20 f4       	brcc	.+8      	; 0x1d448 <round+0x3a>
   1d440:	87 95       	ror	r24
   1d442:	77 95       	ror	r23
   1d444:	67 95       	ror	r22
   1d446:	93 95       	inc	r25
   1d448:	02 c0       	rjmp	.+4      	; 0x1d44e <__fp_mintl>
   1d44a:	1c c0       	rjmp	.+56     	; 0x1d484 <__fp_mpack>
   1d44c:	73 cf       	rjmp	.-282    	; 0x1d334 <__fp_szero>

0001d44e <__fp_mintl>:
   1d44e:	88 23       	and	r24, r24
   1d450:	71 f4       	brne	.+28     	; 0x1d46e <__fp_mintl+0x20>
   1d452:	77 23       	and	r23, r23
   1d454:	21 f0       	breq	.+8      	; 0x1d45e <__fp_mintl+0x10>
   1d456:	98 50       	subi	r25, 0x08	; 8
   1d458:	87 2b       	or	r24, r23
   1d45a:	76 2f       	mov	r23, r22
   1d45c:	07 c0       	rjmp	.+14     	; 0x1d46c <__fp_mintl+0x1e>
   1d45e:	66 23       	and	r22, r22
   1d460:	11 f4       	brne	.+4      	; 0x1d466 <__fp_mintl+0x18>
   1d462:	99 27       	eor	r25, r25
   1d464:	0d c0       	rjmp	.+26     	; 0x1d480 <__fp_mintl+0x32>
   1d466:	90 51       	subi	r25, 0x10	; 16
   1d468:	86 2b       	or	r24, r22
   1d46a:	70 e0       	ldi	r23, 0x00	; 0
   1d46c:	60 e0       	ldi	r22, 0x00	; 0
   1d46e:	2a f0       	brmi	.+10     	; 0x1d47a <__fp_mintl+0x2c>
   1d470:	9a 95       	dec	r25
   1d472:	66 0f       	add	r22, r22
   1d474:	77 1f       	adc	r23, r23
   1d476:	88 1f       	adc	r24, r24
   1d478:	da f7       	brpl	.-10     	; 0x1d470 <__fp_mintl+0x22>
   1d47a:	88 0f       	add	r24, r24
   1d47c:	96 95       	lsr	r25
   1d47e:	87 95       	ror	r24
   1d480:	97 f9       	bld	r25, 7
   1d482:	08 95       	ret

0001d484 <__fp_mpack>:
   1d484:	9f 3f       	cpi	r25, 0xFF	; 255
   1d486:	31 f0       	breq	.+12     	; 0x1d494 <__fp_mpack_finite+0xc>

0001d488 <__fp_mpack_finite>:
   1d488:	91 50       	subi	r25, 0x01	; 1
   1d48a:	20 f4       	brcc	.+8      	; 0x1d494 <__fp_mpack_finite+0xc>
   1d48c:	87 95       	ror	r24
   1d48e:	77 95       	ror	r23
   1d490:	67 95       	ror	r22
   1d492:	b7 95       	ror	r27
   1d494:	88 0f       	add	r24, r24
   1d496:	91 1d       	adc	r25, r1
   1d498:	96 95       	lsr	r25
   1d49a:	87 95       	ror	r24
   1d49c:	97 f9       	bld	r25, 7
   1d49e:	08 95       	ret

0001d4a0 <calloc>:
   1d4a0:	0f 93       	push	r16
   1d4a2:	1f 93       	push	r17
   1d4a4:	cf 93       	push	r28
   1d4a6:	df 93       	push	r29
   1d4a8:	86 9f       	mul	r24, r22
   1d4aa:	80 01       	movw	r16, r0
   1d4ac:	87 9f       	mul	r24, r23
   1d4ae:	10 0d       	add	r17, r0
   1d4b0:	96 9f       	mul	r25, r22
   1d4b2:	10 0d       	add	r17, r0
   1d4b4:	11 24       	eor	r1, r1
   1d4b6:	c8 01       	movw	r24, r16
   1d4b8:	0d d0       	rcall	.+26     	; 0x1d4d4 <malloc>
   1d4ba:	ec 01       	movw	r28, r24
   1d4bc:	00 97       	sbiw	r24, 0x00	; 0
   1d4be:	21 f0       	breq	.+8      	; 0x1d4c8 <calloc+0x28>
   1d4c0:	a8 01       	movw	r20, r16
   1d4c2:	60 e0       	ldi	r22, 0x00	; 0
   1d4c4:	70 e0       	ldi	r23, 0x00	; 0
   1d4c6:	27 d1       	rcall	.+590    	; 0x1d716 <memset>
   1d4c8:	ce 01       	movw	r24, r28
   1d4ca:	df 91       	pop	r29
   1d4cc:	cf 91       	pop	r28
   1d4ce:	1f 91       	pop	r17
   1d4d0:	0f 91       	pop	r16
   1d4d2:	08 95       	ret

0001d4d4 <malloc>:
   1d4d4:	0f 93       	push	r16
   1d4d6:	1f 93       	push	r17
   1d4d8:	cf 93       	push	r28
   1d4da:	df 93       	push	r29
   1d4dc:	82 30       	cpi	r24, 0x02	; 2
   1d4de:	91 05       	cpc	r25, r1
   1d4e0:	10 f4       	brcc	.+4      	; 0x1d4e6 <malloc+0x12>
   1d4e2:	82 e0       	ldi	r24, 0x02	; 2
   1d4e4:	90 e0       	ldi	r25, 0x00	; 0
   1d4e6:	e0 91 24 20 	lds	r30, 0x2024	; 0x802024 <__flp>
   1d4ea:	f0 91 25 20 	lds	r31, 0x2025	; 0x802025 <__flp+0x1>
   1d4ee:	20 e0       	ldi	r18, 0x00	; 0
   1d4f0:	30 e0       	ldi	r19, 0x00	; 0
   1d4f2:	a0 e0       	ldi	r26, 0x00	; 0
   1d4f4:	b0 e0       	ldi	r27, 0x00	; 0
   1d4f6:	30 97       	sbiw	r30, 0x00	; 0
   1d4f8:	19 f1       	breq	.+70     	; 0x1d540 <malloc+0x6c>
   1d4fa:	40 81       	ld	r20, Z
   1d4fc:	51 81       	ldd	r21, Z+1	; 0x01
   1d4fe:	02 81       	ldd	r16, Z+2	; 0x02
   1d500:	13 81       	ldd	r17, Z+3	; 0x03
   1d502:	48 17       	cp	r20, r24
   1d504:	59 07       	cpc	r21, r25
   1d506:	c8 f0       	brcs	.+50     	; 0x1d53a <malloc+0x66>
   1d508:	84 17       	cp	r24, r20
   1d50a:	95 07       	cpc	r25, r21
   1d50c:	69 f4       	brne	.+26     	; 0x1d528 <malloc+0x54>
   1d50e:	10 97       	sbiw	r26, 0x00	; 0
   1d510:	31 f0       	breq	.+12     	; 0x1d51e <malloc+0x4a>
   1d512:	12 96       	adiw	r26, 0x02	; 2
   1d514:	0c 93       	st	X, r16
   1d516:	12 97       	sbiw	r26, 0x02	; 2
   1d518:	13 96       	adiw	r26, 0x03	; 3
   1d51a:	1c 93       	st	X, r17
   1d51c:	27 c0       	rjmp	.+78     	; 0x1d56c <malloc+0x98>
   1d51e:	00 93 24 20 	sts	0x2024, r16	; 0x802024 <__flp>
   1d522:	10 93 25 20 	sts	0x2025, r17	; 0x802025 <__flp+0x1>
   1d526:	22 c0       	rjmp	.+68     	; 0x1d56c <malloc+0x98>
   1d528:	21 15       	cp	r18, r1
   1d52a:	31 05       	cpc	r19, r1
   1d52c:	19 f0       	breq	.+6      	; 0x1d534 <malloc+0x60>
   1d52e:	42 17       	cp	r20, r18
   1d530:	53 07       	cpc	r21, r19
   1d532:	18 f4       	brcc	.+6      	; 0x1d53a <malloc+0x66>
   1d534:	9a 01       	movw	r18, r20
   1d536:	bd 01       	movw	r22, r26
   1d538:	ef 01       	movw	r28, r30
   1d53a:	df 01       	movw	r26, r30
   1d53c:	f8 01       	movw	r30, r16
   1d53e:	db cf       	rjmp	.-74     	; 0x1d4f6 <malloc+0x22>
   1d540:	21 15       	cp	r18, r1
   1d542:	31 05       	cpc	r19, r1
   1d544:	f9 f0       	breq	.+62     	; 0x1d584 <malloc+0xb0>
   1d546:	28 1b       	sub	r18, r24
   1d548:	39 0b       	sbc	r19, r25
   1d54a:	24 30       	cpi	r18, 0x04	; 4
   1d54c:	31 05       	cpc	r19, r1
   1d54e:	80 f4       	brcc	.+32     	; 0x1d570 <malloc+0x9c>
   1d550:	8a 81       	ldd	r24, Y+2	; 0x02
   1d552:	9b 81       	ldd	r25, Y+3	; 0x03
   1d554:	61 15       	cp	r22, r1
   1d556:	71 05       	cpc	r23, r1
   1d558:	21 f0       	breq	.+8      	; 0x1d562 <malloc+0x8e>
   1d55a:	fb 01       	movw	r30, r22
   1d55c:	93 83       	std	Z+3, r25	; 0x03
   1d55e:	82 83       	std	Z+2, r24	; 0x02
   1d560:	04 c0       	rjmp	.+8      	; 0x1d56a <malloc+0x96>
   1d562:	90 93 25 20 	sts	0x2025, r25	; 0x802025 <__flp+0x1>
   1d566:	80 93 24 20 	sts	0x2024, r24	; 0x802024 <__flp>
   1d56a:	fe 01       	movw	r30, r28
   1d56c:	32 96       	adiw	r30, 0x02	; 2
   1d56e:	44 c0       	rjmp	.+136    	; 0x1d5f8 <malloc+0x124>
   1d570:	fe 01       	movw	r30, r28
   1d572:	e2 0f       	add	r30, r18
   1d574:	f3 1f       	adc	r31, r19
   1d576:	81 93       	st	Z+, r24
   1d578:	91 93       	st	Z+, r25
   1d57a:	22 50       	subi	r18, 0x02	; 2
   1d57c:	31 09       	sbc	r19, r1
   1d57e:	39 83       	std	Y+1, r19	; 0x01
   1d580:	28 83       	st	Y, r18
   1d582:	3a c0       	rjmp	.+116    	; 0x1d5f8 <malloc+0x124>
   1d584:	20 91 22 20 	lds	r18, 0x2022	; 0x802022 <__brkval>
   1d588:	30 91 23 20 	lds	r19, 0x2023	; 0x802023 <__brkval+0x1>
   1d58c:	23 2b       	or	r18, r19
   1d58e:	41 f4       	brne	.+16     	; 0x1d5a0 <malloc+0xcc>
   1d590:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1d594:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1d598:	30 93 23 20 	sts	0x2023, r19	; 0x802023 <__brkval+0x1>
   1d59c:	20 93 22 20 	sts	0x2022, r18	; 0x802022 <__brkval>
   1d5a0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1d5a4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
   1d5a8:	21 15       	cp	r18, r1
   1d5aa:	31 05       	cpc	r19, r1
   1d5ac:	41 f4       	brne	.+16     	; 0x1d5be <malloc+0xea>
   1d5ae:	2d b7       	in	r18, 0x3d	; 61
   1d5b0:	3e b7       	in	r19, 0x3e	; 62
   1d5b2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1d5b6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1d5ba:	24 1b       	sub	r18, r20
   1d5bc:	35 0b       	sbc	r19, r21
   1d5be:	e0 91 22 20 	lds	r30, 0x2022	; 0x802022 <__brkval>
   1d5c2:	f0 91 23 20 	lds	r31, 0x2023	; 0x802023 <__brkval+0x1>
   1d5c6:	e2 17       	cp	r30, r18
   1d5c8:	f3 07       	cpc	r31, r19
   1d5ca:	a0 f4       	brcc	.+40     	; 0x1d5f4 <malloc+0x120>
   1d5cc:	2e 1b       	sub	r18, r30
   1d5ce:	3f 0b       	sbc	r19, r31
   1d5d0:	28 17       	cp	r18, r24
   1d5d2:	39 07       	cpc	r19, r25
   1d5d4:	78 f0       	brcs	.+30     	; 0x1d5f4 <malloc+0x120>
   1d5d6:	ac 01       	movw	r20, r24
   1d5d8:	4e 5f       	subi	r20, 0xFE	; 254
   1d5da:	5f 4f       	sbci	r21, 0xFF	; 255
   1d5dc:	24 17       	cp	r18, r20
   1d5de:	35 07       	cpc	r19, r21
   1d5e0:	48 f0       	brcs	.+18     	; 0x1d5f4 <malloc+0x120>
   1d5e2:	4e 0f       	add	r20, r30
   1d5e4:	5f 1f       	adc	r21, r31
   1d5e6:	50 93 23 20 	sts	0x2023, r21	; 0x802023 <__brkval+0x1>
   1d5ea:	40 93 22 20 	sts	0x2022, r20	; 0x802022 <__brkval>
   1d5ee:	81 93       	st	Z+, r24
   1d5f0:	91 93       	st	Z+, r25
   1d5f2:	02 c0       	rjmp	.+4      	; 0x1d5f8 <malloc+0x124>
   1d5f4:	e0 e0       	ldi	r30, 0x00	; 0
   1d5f6:	f0 e0       	ldi	r31, 0x00	; 0
   1d5f8:	cf 01       	movw	r24, r30
   1d5fa:	df 91       	pop	r29
   1d5fc:	cf 91       	pop	r28
   1d5fe:	1f 91       	pop	r17
   1d600:	0f 91       	pop	r16
   1d602:	08 95       	ret

0001d604 <free>:
   1d604:	cf 93       	push	r28
   1d606:	df 93       	push	r29
   1d608:	00 97       	sbiw	r24, 0x00	; 0
   1d60a:	09 f4       	brne	.+2      	; 0x1d60e <free+0xa>
   1d60c:	81 c0       	rjmp	.+258    	; 0x1d710 <free+0x10c>
   1d60e:	fc 01       	movw	r30, r24
   1d610:	32 97       	sbiw	r30, 0x02	; 2
   1d612:	13 82       	std	Z+3, r1	; 0x03
   1d614:	12 82       	std	Z+2, r1	; 0x02
   1d616:	a0 91 24 20 	lds	r26, 0x2024	; 0x802024 <__flp>
   1d61a:	b0 91 25 20 	lds	r27, 0x2025	; 0x802025 <__flp+0x1>
   1d61e:	10 97       	sbiw	r26, 0x00	; 0
   1d620:	81 f4       	brne	.+32     	; 0x1d642 <free+0x3e>
   1d622:	20 81       	ld	r18, Z
   1d624:	31 81       	ldd	r19, Z+1	; 0x01
   1d626:	82 0f       	add	r24, r18
   1d628:	93 1f       	adc	r25, r19
   1d62a:	20 91 22 20 	lds	r18, 0x2022	; 0x802022 <__brkval>
   1d62e:	30 91 23 20 	lds	r19, 0x2023	; 0x802023 <__brkval+0x1>
   1d632:	28 17       	cp	r18, r24
   1d634:	39 07       	cpc	r19, r25
   1d636:	51 f5       	brne	.+84     	; 0x1d68c <free+0x88>
   1d638:	f0 93 23 20 	sts	0x2023, r31	; 0x802023 <__brkval+0x1>
   1d63c:	e0 93 22 20 	sts	0x2022, r30	; 0x802022 <__brkval>
   1d640:	67 c0       	rjmp	.+206    	; 0x1d710 <free+0x10c>
   1d642:	ed 01       	movw	r28, r26
   1d644:	20 e0       	ldi	r18, 0x00	; 0
   1d646:	30 e0       	ldi	r19, 0x00	; 0
   1d648:	ce 17       	cp	r28, r30
   1d64a:	df 07       	cpc	r29, r31
   1d64c:	40 f4       	brcc	.+16     	; 0x1d65e <free+0x5a>
   1d64e:	4a 81       	ldd	r20, Y+2	; 0x02
   1d650:	5b 81       	ldd	r21, Y+3	; 0x03
   1d652:	9e 01       	movw	r18, r28
   1d654:	41 15       	cp	r20, r1
   1d656:	51 05       	cpc	r21, r1
   1d658:	f1 f0       	breq	.+60     	; 0x1d696 <free+0x92>
   1d65a:	ea 01       	movw	r28, r20
   1d65c:	f5 cf       	rjmp	.-22     	; 0x1d648 <free+0x44>
   1d65e:	d3 83       	std	Z+3, r29	; 0x03
   1d660:	c2 83       	std	Z+2, r28	; 0x02
   1d662:	40 81       	ld	r20, Z
   1d664:	51 81       	ldd	r21, Z+1	; 0x01
   1d666:	84 0f       	add	r24, r20
   1d668:	95 1f       	adc	r25, r21
   1d66a:	c8 17       	cp	r28, r24
   1d66c:	d9 07       	cpc	r29, r25
   1d66e:	59 f4       	brne	.+22     	; 0x1d686 <free+0x82>
   1d670:	88 81       	ld	r24, Y
   1d672:	99 81       	ldd	r25, Y+1	; 0x01
   1d674:	84 0f       	add	r24, r20
   1d676:	95 1f       	adc	r25, r21
   1d678:	02 96       	adiw	r24, 0x02	; 2
   1d67a:	91 83       	std	Z+1, r25	; 0x01
   1d67c:	80 83       	st	Z, r24
   1d67e:	8a 81       	ldd	r24, Y+2	; 0x02
   1d680:	9b 81       	ldd	r25, Y+3	; 0x03
   1d682:	93 83       	std	Z+3, r25	; 0x03
   1d684:	82 83       	std	Z+2, r24	; 0x02
   1d686:	21 15       	cp	r18, r1
   1d688:	31 05       	cpc	r19, r1
   1d68a:	29 f4       	brne	.+10     	; 0x1d696 <free+0x92>
   1d68c:	f0 93 25 20 	sts	0x2025, r31	; 0x802025 <__flp+0x1>
   1d690:	e0 93 24 20 	sts	0x2024, r30	; 0x802024 <__flp>
   1d694:	3d c0       	rjmp	.+122    	; 0x1d710 <free+0x10c>
   1d696:	e9 01       	movw	r28, r18
   1d698:	fb 83       	std	Y+3, r31	; 0x03
   1d69a:	ea 83       	std	Y+2, r30	; 0x02
   1d69c:	49 91       	ld	r20, Y+
   1d69e:	59 91       	ld	r21, Y+
   1d6a0:	c4 0f       	add	r28, r20
   1d6a2:	d5 1f       	adc	r29, r21
   1d6a4:	ec 17       	cp	r30, r28
   1d6a6:	fd 07       	cpc	r31, r29
   1d6a8:	61 f4       	brne	.+24     	; 0x1d6c2 <free+0xbe>
   1d6aa:	80 81       	ld	r24, Z
   1d6ac:	91 81       	ldd	r25, Z+1	; 0x01
   1d6ae:	84 0f       	add	r24, r20
   1d6b0:	95 1f       	adc	r25, r21
   1d6b2:	02 96       	adiw	r24, 0x02	; 2
   1d6b4:	e9 01       	movw	r28, r18
   1d6b6:	99 83       	std	Y+1, r25	; 0x01
   1d6b8:	88 83       	st	Y, r24
   1d6ba:	82 81       	ldd	r24, Z+2	; 0x02
   1d6bc:	93 81       	ldd	r25, Z+3	; 0x03
   1d6be:	9b 83       	std	Y+3, r25	; 0x03
   1d6c0:	8a 83       	std	Y+2, r24	; 0x02
   1d6c2:	e0 e0       	ldi	r30, 0x00	; 0
   1d6c4:	f0 e0       	ldi	r31, 0x00	; 0
   1d6c6:	12 96       	adiw	r26, 0x02	; 2
   1d6c8:	8d 91       	ld	r24, X+
   1d6ca:	9c 91       	ld	r25, X
   1d6cc:	13 97       	sbiw	r26, 0x03	; 3
   1d6ce:	00 97       	sbiw	r24, 0x00	; 0
   1d6d0:	19 f0       	breq	.+6      	; 0x1d6d8 <free+0xd4>
   1d6d2:	fd 01       	movw	r30, r26
   1d6d4:	dc 01       	movw	r26, r24
   1d6d6:	f7 cf       	rjmp	.-18     	; 0x1d6c6 <free+0xc2>
   1d6d8:	8d 91       	ld	r24, X+
   1d6da:	9c 91       	ld	r25, X
   1d6dc:	11 97       	sbiw	r26, 0x01	; 1
   1d6de:	9d 01       	movw	r18, r26
   1d6e0:	2e 5f       	subi	r18, 0xFE	; 254
   1d6e2:	3f 4f       	sbci	r19, 0xFF	; 255
   1d6e4:	82 0f       	add	r24, r18
   1d6e6:	93 1f       	adc	r25, r19
   1d6e8:	20 91 22 20 	lds	r18, 0x2022	; 0x802022 <__brkval>
   1d6ec:	30 91 23 20 	lds	r19, 0x2023	; 0x802023 <__brkval+0x1>
   1d6f0:	28 17       	cp	r18, r24
   1d6f2:	39 07       	cpc	r19, r25
   1d6f4:	69 f4       	brne	.+26     	; 0x1d710 <free+0x10c>
   1d6f6:	30 97       	sbiw	r30, 0x00	; 0
   1d6f8:	29 f4       	brne	.+10     	; 0x1d704 <free+0x100>
   1d6fa:	10 92 25 20 	sts	0x2025, r1	; 0x802025 <__flp+0x1>
   1d6fe:	10 92 24 20 	sts	0x2024, r1	; 0x802024 <__flp>
   1d702:	02 c0       	rjmp	.+4      	; 0x1d708 <free+0x104>
   1d704:	13 82       	std	Z+3, r1	; 0x03
   1d706:	12 82       	std	Z+2, r1	; 0x02
   1d708:	b0 93 23 20 	sts	0x2023, r27	; 0x802023 <__brkval+0x1>
   1d70c:	a0 93 22 20 	sts	0x2022, r26	; 0x802022 <__brkval>
   1d710:	df 91       	pop	r29
   1d712:	cf 91       	pop	r28
   1d714:	08 95       	ret

0001d716 <memset>:
   1d716:	dc 01       	movw	r26, r24
   1d718:	01 c0       	rjmp	.+2      	; 0x1d71c <memset+0x6>
   1d71a:	6d 93       	st	X+, r22
   1d71c:	41 50       	subi	r20, 0x01	; 1
   1d71e:	50 40       	sbci	r21, 0x00	; 0
   1d720:	e0 f7       	brcc	.-8      	; 0x1d71a <memset+0x4>
   1d722:	08 95       	ret

0001d724 <_exit>:
   1d724:	f8 94       	cli

0001d726 <__stop_program>:
   1d726:	ff cf       	rjmp	.-2      	; 0x1d726 <__stop_program>
