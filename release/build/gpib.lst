
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00001644  00800100  0001d4ce  0001d562  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001d4ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000008e2  00801744  00801744  0001eba6  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001eba6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001ebb8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001728  00000000  00000000  0001ebf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00029200  00000000  00000000  00020320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000614f  00000000  00000000  00049520  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0001254b  00000000  00000000  0004f66f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000514c  00000000  00000000  00061bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004abc  00000000  00000000  00066d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00024726  00000000  00000000  0006b7c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001770  00000000  00000000  0008feea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 8e 25 	jmp	0x4b1c	; 0x4b1c <__ctors_end>
       4:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
       8:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
       c:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      10:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      14:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      18:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      1c:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      20:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      24:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      28:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      2c:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      30:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      34:	0c 94 3c 33 	jmp	0x6678	; 0x6678 <__vector_13>
      38:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      3c:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      40:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      44:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      48:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      4c:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      50:	0c 94 5d 29 	jmp	0x52ba	; 0x52ba <__vector_20>
      54:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      58:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      5c:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      60:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      64:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      68:	0c 94 5f 2d 	jmp	0x5abe	; 0x5abe <__vector_26>
      6c:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      70:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      74:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      78:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      7c:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      80:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      84:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      88:	0c 94 ad 25 	jmp	0x4b5a	; 0x4b5a <__bad_interrupt>
      8c:	6c 43       	sbci	r22, 0x3C	; 60
      8e:	bc 44       	sbci	r27, 0x4C	; 76
      90:	a4 43       	sbci	r26, 0x34	; 52
      92:	8f 44       	sbci	r24, 0x4F	; 79
      94:	8f 44       	sbci	r24, 0x4F	; 79
      96:	bc 44       	sbci	r27, 0x4C	; 76
      98:	bc 44       	sbci	r27, 0x4C	; 76
      9a:	bc 44       	sbci	r27, 0x4C	; 76
      9c:	bc 44       	sbci	r27, 0x4C	; 76
      9e:	bc 44       	sbci	r27, 0x4C	; 76
      a0:	bc 44       	sbci	r27, 0x4C	; 76
      a2:	bc 44       	sbci	r27, 0x4C	; 76
      a4:	bc 44       	sbci	r27, 0x4C	; 76
      a6:	6c 43       	sbci	r22, 0x3C	; 60
      a8:	69 43       	sbci	r22, 0x39	; 57
      aa:	bc 44       	sbci	r27, 0x4C	; 76
      ac:	bc 44       	sbci	r27, 0x4C	; 76
      ae:	b2 44       	sbci	r27, 0x42	; 66
      b0:	bc 44       	sbci	r27, 0x4C	; 76
      b2:	9e 43       	sbci	r25, 0x3E	; 62
      b4:	bc 44       	sbci	r27, 0x4C	; 76
      b6:	bc 44       	sbci	r27, 0x4C	; 76
      b8:	6c 43       	sbci	r22, 0x3C	; 60
      ba:	bc 44       	sbci	r27, 0x4C	; 76
      bc:	bc 44       	sbci	r27, 0x4C	; 76
      be:	bc 44       	sbci	r27, 0x4C	; 76
      c0:	bc 44       	sbci	r27, 0x4C	; 76
      c2:	bc 44       	sbci	r27, 0x4C	; 76
      c4:	bc 44       	sbci	r27, 0x4C	; 76
      c6:	bc 44       	sbci	r27, 0x4C	; 76
      c8:	bc 44       	sbci	r27, 0x4C	; 76
      ca:	bc 44       	sbci	r27, 0x4C	; 76
      cc:	6c 43       	sbci	r22, 0x3C	; 60
      ce:	b7 44       	sbci	r27, 0x47	; 71
      d0:	a4 43       	sbci	r26, 0x34	; 52
      d2:	8f 44       	sbci	r24, 0x4F	; 79
      d4:	8f 44       	sbci	r24, 0x4F	; 79
      d6:	bc 44       	sbci	r27, 0x4C	; 76
      d8:	bc 44       	sbci	r27, 0x4C	; 76
      da:	bc 44       	sbci	r27, 0x4C	; 76
      dc:	bc 44       	sbci	r27, 0x4C	; 76
      de:	bc 44       	sbci	r27, 0x4C	; 76
      e0:	bc 44       	sbci	r27, 0x4C	; 76
      e2:	bc 44       	sbci	r27, 0x4C	; 76
      e4:	bc 44       	sbci	r27, 0x4C	; 76
      e6:	6c 43       	sbci	r22, 0x3C	; 60
      e8:	69 43       	sbci	r22, 0x39	; 57
      ea:	bc 44       	sbci	r27, 0x4C	; 76
      ec:	bc 44       	sbci	r27, 0x4C	; 76
      ee:	ad 44       	sbci	r26, 0x4D	; 77
      f0:	bc 44       	sbci	r27, 0x4C	; 76
      f2:	9e 43       	sbci	r25, 0x3E	; 62
      f4:	bc 44       	sbci	r27, 0x4C	; 76
      f6:	bc 44       	sbci	r27, 0x4C	; 76
      f8:	6c 43       	sbci	r22, 0x3C	; 60
      fa:	e1 44       	sbci	r30, 0x41	; 65
      fc:	22 46       	sbci	r18, 0x62	; 98
      fe:	d4 44       	sbci	r29, 0x44	; 68
     100:	3c 45       	sbci	r19, 0x5C	; 92
     102:	20 45       	sbci	r18, 0x50	; 80
     104:	22 46       	sbci	r18, 0x62	; 98
     106:	22 46       	sbci	r18, 0x62	; 98
     108:	22 46       	sbci	r18, 0x62	; 98
     10a:	22 46       	sbci	r18, 0x62	; 98
     10c:	22 46       	sbci	r18, 0x62	; 98
     10e:	22 46       	sbci	r18, 0x62	; 98
     110:	22 46       	sbci	r18, 0x62	; 98
     112:	22 46       	sbci	r18, 0x62	; 98
     114:	ee 44       	sbci	r30, 0x4E	; 78
     116:	02 45       	sbci	r16, 0x52	; 82
     118:	22 46       	sbci	r18, 0x62	; 98
     11a:	22 46       	sbci	r18, 0x62	; 98
     11c:	c8 45       	sbci	r28, 0x58	; 88
     11e:	22 46       	sbci	r18, 0x62	; 98
     120:	d0 44       	sbci	r29, 0x40	; 64
     122:	22 46       	sbci	r18, 0x62	; 98
     124:	22 46       	sbci	r18, 0x62	; 98
     126:	02 45       	sbci	r16, 0x52	; 82
     128:	22 46       	sbci	r18, 0x62	; 98
     12a:	22 46       	sbci	r18, 0x62	; 98
     12c:	22 46       	sbci	r18, 0x62	; 98
     12e:	22 46       	sbci	r18, 0x62	; 98
     130:	22 46       	sbci	r18, 0x62	; 98
     132:	22 46       	sbci	r18, 0x62	; 98
     134:	22 46       	sbci	r18, 0x62	; 98
     136:	22 46       	sbci	r18, 0x62	; 98
     138:	22 46       	sbci	r18, 0x62	; 98
     13a:	e1 44       	sbci	r30, 0x41	; 65
     13c:	70 45       	sbci	r23, 0x50	; 80
     13e:	d4 44       	sbci	r29, 0x44	; 68
     140:	3c 45       	sbci	r19, 0x5C	; 92
     142:	20 45       	sbci	r18, 0x50	; 80
     144:	22 46       	sbci	r18, 0x62	; 98
     146:	22 46       	sbci	r18, 0x62	; 98
     148:	22 46       	sbci	r18, 0x62	; 98
     14a:	22 46       	sbci	r18, 0x62	; 98
     14c:	22 46       	sbci	r18, 0x62	; 98
     14e:	22 46       	sbci	r18, 0x62	; 98
     150:	22 46       	sbci	r18, 0x62	; 98
     152:	22 46       	sbci	r18, 0x62	; 98
     154:	ee 44       	sbci	r30, 0x4E	; 78
     156:	02 45       	sbci	r16, 0x52	; 82
     158:	22 46       	sbci	r18, 0x62	; 98
     15a:	22 46       	sbci	r18, 0x62	; 98
     15c:	70 45       	sbci	r23, 0x50	; 80
     15e:	22 46       	sbci	r18, 0x62	; 98
     160:	d0 44       	sbci	r29, 0x40	; 64
     162:	22 46       	sbci	r18, 0x62	; 98
     164:	22 46       	sbci	r18, 0x62	; 98
     166:	02 45       	sbci	r16, 0x52	; 82
     168:	01 69       	ori	r16, 0x91	; 145
     16a:	0b 69       	ori	r16, 0x9B	; 155
     16c:	13 69       	ori	r17, 0x93	; 147
     16e:	16 69       	ori	r17, 0x96	; 150
     170:	19 69       	ori	r17, 0x99	; 153
     172:	1c 69       	ori	r17, 0x9C	; 156
     174:	1f 69       	ori	r17, 0x9F	; 159
     176:	22 69       	ori	r18, 0x92	; 146
     178:	25 69       	ori	r18, 0x95	; 149
     17a:	ee 86       	std	Y+14, r14	; 0x0e
     17c:	f6 86       	std	Z+14, r15	; 0x0e
     17e:	27 87       	std	Z+15, r18	; 0x0f
     180:	40 87       	std	Z+8, r20	; 0x08
     182:	5c 87       	std	Y+12, r21	; 0x0c
     184:	69 87       	std	Y+9, r22	; 0x09
     186:	85 87       	std	Z+13, r24	; 0x0d
     188:	af 87       	std	Y+15, r26	; 0x0f
     18a:	92 87       	std	Z+10, r25	; 0x0a
     18c:	4b 9e       	mul	r4, r27
     18e:	1b 9f       	mul	r17, r27
     190:	57 9f       	mul	r21, r23
     192:	8a 9f       	mul	r24, r26
     194:	9a 9f       	mul	r25, r26
     196:	b7 9f       	mul	r27, r23
     198:	17 a0       	ldd	r1, Z+39	; 0x27
     19a:	02 a1       	ldd	r16, Z+34	; 0x22
     19c:	02 a1       	ldd	r16, Z+34	; 0x22
     19e:	02 a1       	ldd	r16, Z+34	; 0x22
     1a0:	4b a0       	ldd	r4, Y+35	; 0x23
     1a2:	77 a0       	ldd	r7, Z+39	; 0x27
     1a4:	ba a0       	ldd	r11, Y+34	; 0x22
     1a6:	d1 a0       	ldd	r13, Z+33	; 0x21
     1a8:	e4 9e       	mul	r14, r20
     1aa:	f7 9e       	mul	r15, r23
     1ac:	09 bd       	out	0x29, r16	; 41
     1ae:	c8 bc       	out	0x28, r12	; 40
     1b0:	c8 bc       	out	0x28, r12	; 40
     1b2:	c8 bc       	out	0x28, r12	; 40
     1b4:	c8 bc       	out	0x28, r12	; 40
     1b6:	8c bc       	out	0x2c, r8	; 44
     1b8:	93 bc       	out	0x23, r9	; 35
     1ba:	9a bc       	out	0x2a, r9	; 42
     1bc:	aa bc       	out	0x2a, r10	; 42
     1be:	b8 bc       	out	0x28, r11	; 40
     1c0:	b1 bc       	out	0x21, r11	; 33

000001c2 <__trampolines_end>:
     1c2:	63 73       	andi	r22, 0x33	; 51
     1c4:	5f 64       	ori	r21, 0x4F	; 79
     1c6:	69 73       	andi	r22, 0x39	; 57
     1c8:	61 62       	ori	r22, 0x21	; 33
     1ca:	6c 65       	ori	r22, 0x5C	; 92
     1cc:	20 77       	andi	r18, 0x70	; 112
     1ce:	61 73       	andi	r22, 0x31	; 49
     1d0:	3a 20       	and	r3, r10
     1d2:	25 64       	ori	r18, 0x45	; 69
     1d4:	2c 20       	and	r2, r12
     1d6:	77 61       	ori	r23, 0x17	; 23
     1d8:	6e 74       	andi	r22, 0x4E	; 78
     1da:	3a 20       	and	r3, r10
     1dc:	25 64       	ori	r18, 0x45	; 69
     1de:	0a 00       	.word	0x000a	; ????

000001e0 <__c.3615>:
     1e0:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     1f0:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

000001fd <__c.3646>:
     1fd:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     20d:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     21d:	25 75 29 0a 00                                      %u)..

00000222 <__c.3637>:
     222:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     232:	61 69 6c 65 64 21 0a 00                             ailed!..

0000023a <__c.3631>:
     23a:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     24a:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

00000255 <__c.3616>:
     255:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     265:	35 75 0a 00                                         5u..

00000269 <__c.3614>:
     269:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     279:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

00000287 <__c.3612>:
     287:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     297:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002a5 <__c.3610>:
     2a5:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     2b5:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002c3 <__c.3608>:
     2c3:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     2d3:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002e1 <__c.3606>:
     2e1:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     2f1:	75 0a 00                                            u..

000002f4 <__c.3604>:
     2f4:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     304:	75 0a 00                                            u..

00000307 <__c.3602>:
     307:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

00000314 <__c.3600>:
     314:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     324:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000331 <__c.3719>:
     331:	0a 00                                               ..

00000333 <__c.3717>:
     333:	74 61 73 6b 3a 20 25 64 0a 00                       task: %d..

0000033d <__c.3715>:
     33d:	69 32 63 5f 74 61 73 6b 2e 65 72 72 6f 72 3a 20     i2c_task.error: 
     34d:	25 64 0a 00                                         %d..

00000351 <__c.3713>:
     351:	69 32 63 5f 74 61 73 6b 2e 64 6f 6e 65 3a 20 25     i2c_task.done: %
     361:	64 0a 00                                            d..

00000364 <__c.3708>:
     364:	0a 00                                               ..

00000366 <__c.3706>:
     366:	20 20 54 57 5f 4d 54 5f 44 41 54 41 5f 4e 41 43       TW_MT_DATA_NAC
     376:	4b 0a 00                                            K..

00000379 <__c.3704>:
     379:	20 20 54 57 5f 4d 54 5f 53 4c 41 5f 4e 41 43 4b       TW_MT_SLA_NACK
     389:	0a 00                                               ..

0000038b <__c.3702>:
     38b:	20 20 54 57 5f 4d 52 5f 53 4c 41 5f 4e 41 43 4b       TW_MR_SLA_NACK
     39b:	0a 00                                               ..

0000039d <__c.3700>:
     39d:	20 20 4f 50 5f 45 52 52 4f 52 0a 00                   OP_ERROR..

000003a9 <__c.3698>:
     3a9:	20 20 4f 50 5f 4c 45 4e 0a 00                         OP_LEN..

000003b3 <__c.3696>:
     3b3:	20 20 4f 50 5f 54 49 4d 45 4f 55 54 0a 00             OP_TIMEOUT..

000003c1 <__c.3694>:
     3c1:	20 20 25 73 0a 00                                     %s..

000003c7 <__c.3644>:
     3c7:	69 32 63 5f 74 69 6d 65 72 20 69 6e 69 74 20 66     i2c_timer init f
     3d7:	61 69 6c 65 64 0a 00                                ailed..

000003de <__c.3638>:
     3de:	69 32 63 5f 69 6e 69 74 20 70 72 65 73 63 61 6c     i2c_init prescal
     3ee:	65 20 6f 76 65 72 66 6c 6f 77 0a 00                 e overflow..

000003fa <__c.3595>:
     3fa:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 6c 65 6e 20     I2C op[%d]->len 
     40a:	3d 3d 20 30 0a 00                                   == 0..

00000410 <__c.3593>:
     410:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 62 75 66 20     I2C op[%d]->buf 
     420:	3d 3d 20 4e 55 4c 4c 0a 00                          == NULL..

00000429 <__c.3591>:
     429:	49 32 43 20 6f 70 5b 49 4e 44 45 58 20 25 64 20     I2C op[INDEX %d 
     439:	3e 3d 20 25 64 5d 0a 00                             >= %d]..

00000441 <__c.3641>:
     441:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     451:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

0000045f <__c.3631>:
     45f:	72 74 63 5f 72 75 6e 20 77 72 69 74 65 20 65 72     rtc_run write er
     46f:	72 6f 72 0a 00                                      ror..

00000474 <__c.3629>:
     474:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     484:	6f 72 0a 00                                         or..

00000488 <__c.3623>:
     488:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000498 <__c.3617>:
     498:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

000004a9 <__c.3609>:
     4a9:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 64 61 74     i2c_rtc_read dat
     4b9:	61 20 65 72 72 6f 72 0a 00                          a error..

000004c2 <__c.3607>:
     4c2:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 61 64 64     i2c_rtc_read add
     4d2:	72 65 73 73 20 65 72 72 6f 72 0a 00                 ress error..

000004de <__c.3599>:
     4de:	69 32 63 5f 72 74 63 5f 77 72 69 74 65 20 64 61     i2c_rtc_write da
     4ee:	74 61 20 65 72 72 6f 72 0a 00                       ta error..

000004f8 <__c.3627>:
     4f8:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     508:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     518:	74 20 25 64 0a 00                                   t %d..

0000051e <__c.3584>:
     51e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     52e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

0000053e <__c.3663>:
     53e:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

0000054e <__c.3661>:
     54e:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

0000055f <__c.3659>:
     55f:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     56f:	66 61 69 6c 65 64 0a 00                             failed..

00000577 <__c.3657>:
     577:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000583 <__c.3655>:
     583:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     593:	64 0a 00                                            d..

00000596 <__c.3653>:
     596:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     5a6:	65 64 0a 00                                         ed..

000005aa <__c.3633>:
     5aa:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

000005b5 <__c.3631>:
     5b5:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005c3 <__c.3617>:
     5c3:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005cd <__c.3597>:
     5cd:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5dd:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005ea <__c.3872>:
     5ea:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005fb <__c.3870>:
     5fb:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     60b:	0a 00                                               ..

0000060d <__c.3868>:
     60d:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

0000061e <__c.3866>:
     61e:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

0000062f <__c.3864>:
     62f:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     63f:	0a 00                                               ..

00000641 <__c.3857>:
     641:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     651:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     661:	6d 65 0a 00                                         me..

00000665 <__c.3855>:
     665:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     675:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

0000067f <__c.3853>:
     67f:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     68f:	61 69 6c 65 64 0a 00                                ailed..

00000696 <__c.3851>:
     696:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     6a6:	6e 69 74 0a 00                                      nit..

000006ab <__c.3849>:
     6ab:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6bb:	0a 00                                               ..

000006bd <__c.3803>:
     6bd:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     6cd:	61 69 6c 65 64 0a 00                                ailed..

000006d4 <__c.3801>:
     6d4:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

000006e5 <__c.3799>:
     6e5:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     6f5:	0a 00                                               ..

000006f7 <__c.3797>:
     6f7:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

00000708 <__c.3795>:
     708:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

00000719 <__c.3793>:
     719:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     729:	0a 00                                               ..

0000072b <__c.3772>:
     72b:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     73b:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000074c <__c.3647>:
     74c:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     75c:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

00000769 <__c.3615>:
     769:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

00000779 <__c.3649>:
     779:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

00000787 <__c.3647>:
     787:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     797:	25 6c 64 0a 00                                      %ld..

0000079c <__c.3645>:
     79c:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ac:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

000007ba <__c.3642>:
     7ba:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

000007cb <__c.3640>:
     7cb:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

000007d7 <__c.3638>:
     7d7:	4d 4d 43 20 43 61 72 64 20 49 6e 73 65 72 74 65     MMC Card Inserte
     7e7:	64 0a 00                                            d..

000007ea <__c.3636>:
     7ea:	2a 2a 2a 20 4d 4d 43 20 43 61 72 64 20 4e 4f 54     *** MMC Card NOT
     7fa:	20 49 6e 73 65 72 74 65 64 21 20 2a 2a 2a 0a 00      Inserted! ***..

0000080a <__c.3634>:
     80a:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000081a <__c.3620>:
     81a:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000827 <__c.3592>:
     827:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     837:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000843 <__c.3671>:
     843:	0a 00                                               ..

00000845 <__c.3669>:
     845:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     855:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     865:	73 00                                               s.

00000867 <__c.3667>:
     867:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     877:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

00000882 <__c.3661>:
     882:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     892:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8a2:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8b2:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8c2:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008cf <__c.3659>:
     8cf:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 61 74     fatfs_status fat
     8df:	66 73 5f 73 63 61 6e 5f 66 69 6c 65 73 20 66 61     fs_scan_files fa
     8ef:	69 6c 65 64 0a 00                                   iled..

000008f5 <__c.3657>:
     8f5:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     905:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     915:	30 34 58 0a 00                                      04X..

0000091a <__c.3655>:
     91a:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     92a:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000938 <__c.3653>:
     938:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 5f 67     fatfs_status f_g
     948:	65 74 6c 61 62 65 6c 20 66 61 69 6c 65 64 0a 00     etlabel failed..

00000958 <__c.3651>:
     958:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     968:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000977 <__c.3649>:
     977:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     987:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000996 <__c.3647>:
     996:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     9a6:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009b5 <__c.3645>:
     9b5:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     9c5:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009d4 <__c.3643>:
     9d4:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9e4:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009f3 <__c.3641>:
     9f3:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     a03:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a11 <__c.3639>:
     a11:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     a21:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a2f <__c.3637>:
     a2f:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a3f:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a4e <__c.3635>:
     a4e:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a5e:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a6c <__c.3633>:
     a6c:	66 61 74 66 73 5f 73 74 61 74 75 73 20 66 5f 67     fatfs_status f_g
     a7c:	65 74 66 72 65 65 20 66 61 69 6c 65 64 0a 00        etfree failed..

00000a8b <__c.3631>:
     a8b:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a9c <__c.3594>:
     a9c:	72 63 3d 25 75 0a 00                                rc=%u..

00000aa3 <__c.3617>:
     aa3:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     ab3:	72 65 65 0a 00                                      ree..

00000ab8 <__c.3615>:
     ab8:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     ac8:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     ad8:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000ae1 <__c.3611>:
     ae1:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000aef <__c.3587>:
     aef:	66 61 74 66 73 20 20 20 20 20 68 65 6c 70 0a 00     fatfs     help..

00000aff <__c.3585>:
     aff:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b0f:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b1f:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b2f:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b3f:	66 73 20 6c 73 20 64 69 72 65 63 74 6f 72 79 0a     fs ls directory.
     b4f:	66 61 74 66 73 20 73 74 61 74 75 73 0a 0a 00        fatfs status...

00000b5e <__c.3917>:
     b5e:	25 73 0a 00                                         %s..

00000b62 <__c.3915>:
     b62:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000b6a <__c.3670>:
     b6a:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000b76 <__c.3599>:
     b76:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     b86:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000b8e <__c.3592>:
     b8e:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     b9e:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000ba6 <__c.3762>:
     ba6:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000bb1 <__c.3758>:
     bb1:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     bc1:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     bd1:	68 0a 00                                            h..

00000bd4 <__c.3755>:
     bd4:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000be4 <__c.3750>:
     be4:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000bf2 <__c.3748>:
     bf2:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     c02:	5b 25 73 5d 0a 00                                   [%s]..

00000c08 <__c.3746>:
     c08:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     c18:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000c29 <__c.3733>:
     c29:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     c39:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000c43 <__c.3728>:
     c43:	25 73 0a 00                                         %s..

00000c47 <__c.3726>:
     c47:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     c57:	0a 00                                               ..

00000c59 <__c.3714>:
     c59:	0d 00                                               ..

00000c5b <__c.3712>:
     c5b:	4d 6f 72 65 2e 2e 00                                More...

00000c62 <__c.3702>:
     c62:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     c72:	2e 0a 00                                            ...

00000c75 <__c.3698>:
     c75:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000c84 <__c.3695>:
     c84:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000c91 <__c.3693>:
     c91:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000c9e <__c.3691>:
     c9e:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cae <__c.3689>:
     cae:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000cbb <__c.3687>:
     cbb:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000ccb <__c.3685>:
     ccb:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000cd7 <__c.3674>:
     cd7:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000ce2 <__c.3672>:
     ce2:	0a 00                                               ..

00000ce4 <__c.3667>:
     ce4:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cf4 <__c.3657>:
     cf4:	72 6d 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     rmdir %s failed.
	...

00000d05 <__c.3655>:
     d05:	72 6d 20 25 73 20 66 61 69 6c 65 64 0a 00           rm %s failed..

00000d13 <__c.3653>:
     d13:	72 65 6e 61 6d 65 20 25 73 20 74 6f 20 25 73 0a     rename %s to %s.
	...

00000d24 <__c.3651>:
     d24:	25 73 0a 00                                         %s..

00000d28 <__c.3649>:
     d28:	70 77 64 20 46 41 49 4c 45 44 0a 00                 pwd FAILED..

00000d34 <__c.3645>:
     d34:	6d 6b 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     mkdir %s failed.
	...

00000d45 <__c.3638>:
     d45:	6c 73 3a 20 6e 75 6c 6c 20 61 72 67 75 6d 65 6e     ls: null argumen
     d55:	74 20 23 20 25 64 0a 00                             t # %d..

00000d5d <__c.3634>:
     d5d:	63 68 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     chdir %s failed.
	...

00000d6e <__c.3618>:
     d6e:	4e 6f 74 65 3a 20 70 6f 73 69 78 20 70 72 65 66     Note: posix pref
     d7e:	69 78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 70     ix is optional.p
     d8e:	6f 73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d     osix cat file [-
     d9e:	70 5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a     p].posix cd dir.
     dae:	70 6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31     posix copy file1
     dbe:	20 66 69 6c 65 32 0a 70 6f 73 69 78 20 6c 73 20      file2.posix ls 
     dce:	64 69 72 20 5b 2d 6c 5d 0a 70 6f 73 69 78 20 6d     dir [-l].posix m
     dde:	6b 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 70     kdir dir.posix p
     dee:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     dfe:	0a 70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70     .posix rm file.p
     e0e:	6f 73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70     osix rmdir dir.p
     e1e:	6f 73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20     osix rename old 
     e2e:	6e 65 77 0a 0a 00                                   new...

00000e34 <__c.3616>:
     e34:	70 6f 73 69 78 20 20 20 20 20 68 65 6c 70 0a 00     posix     help..

00000e44 <__c.3805>:
     e44:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000e52 <__c.3799>:
     e52:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000e5f <__c.3792>:
     e5f:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000e6d <__c.3783>:
     e6d:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000e7a <__c.3774>:
     e7a:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000e8b <__c.3760>:
     e8b:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     e9b:	5d 0a 00                                            ]..

00000e9e <__c.3742>:
     e9e:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     eae:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000ebb <__c.4421>:
     ebb:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     ecb:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     edb:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000ee3 <__c.4413>:
     ee3:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
     ef3:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00000efd <__c.4408>:
     efd:	3c 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     <gpib_write_str 
     f0d:	74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67 20     timeout waiting 
     f1d:	66 6f 72 20 41 54 4e 20 3d 20 31 3e 0a 00           for ATN = 1>..

00000f2b <__c.4406>:
     f2b:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     f3b:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000f45 <__c.4396>:
     f45:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     f55:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     f65:	28 25 64 29 5d 0a 00                                (%d)]..

00000f6c <__c.4392>:
     f6c:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     f7c:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     f8c:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000f99 <__c.4389>:
     f99:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     fa9:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000fb2 <__c.4373>:
     fb2:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000fbd <__c.4371>:
     fbd:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00000fc8 <__c.4369>:
     fc8:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

00000fd3 <__c.4365>:
     fd3:	20 20 20 20 20 00                                        .

00000fd9 <__c.4363>:
     fd9:	25 30 32 58 20 25 63 20 00                          %02X %c .

00000fe2 <__c.4337>:
     fe2:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
     ff2:	49 46 43 20 73 74 61 74 65 3d 25 64 0a 00           IFC state=%d..

00001000 <__c.4321>:
    1000:	3c 47 50 49 42 20 54 58 20 54 49 4d 45 4f 55 54     <GPIB TX TIMEOUT
    1010:	3e 0a 00                                            >..

00001013 <__c.4316>:
    1013:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    1023:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    1033:	20 66 6f 72 20 4e 44 41 43 3d 3d 31 3e 0a 00         for NDAC==1>..

00001042 <__c.4312>:
    1042:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    1052:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    1062:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    1072:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

0000107e <__c.4308>:
    107e:	3c 67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65     <gpib_write_byte
    108e:	20 74 69 6d 65 6f 75 74 20 77 61 69 74 69 6e 67      timeout waiting
    109e:	20 66 6f 72 20 4e 52 46 44 3d 3d 31 20 26 26 20      for NRFD==1 && 
    10ae:	4e 44 41 43 20 3d 3d 20 30 3e 0a 00                 NDAC == 0>..

000010ba <__c.4306>:
    10ba:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    10ca:	20 41 54 4e 20 3d 20 30 20 77 68 69 6c 65 20 77      ATN = 0 while w
    10da:	61 69 74 69 6e 67 20 66 6f 72 20 4e 52 46 44 20     aiting for NRFD 
    10ea:	4c 4f 57 20 73 74 61 74 65 20 3d 25 64 0a 00        LOW state =%d..

000010f9 <__c.4301>:
    10f9:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    1109:	20 49 46 43 20 73 74 61 74 65 3d 25 64 0a 00         IFC state=%d..

00001118 <__c.4285>:
    1118:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    1128:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    1138:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

00001146 <__c.4269>:
    1146:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    1156:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001161 <__c.4267>:
    1161:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    1171:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    1181:	72 61 6e 67 65 0a 00                                range..

00001188 <__c.4262>:
    1188:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    1198:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

000011a3 <__c.4260>:
    11a3:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    11b3:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    11c3:	61 6e 67 65 0a 00                                   ange..

000011c9 <__c.4255>:
    11c9:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    11d9:	5d 0a 00                                            ]..

000011dc <__c.4243>:
    11dc:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

000011ed <__c.4420>:
    11ed:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

000011fe <__c.4415>:
    11fe:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    120e:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    121e:	32 58 48 5d 0a 00                                   2XH]..

00001224 <__c.4413>:
    1224:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    1234:	0a 00                                               ..

00001236 <__c.4411>:
    1236:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

00001247 <__c.4406>:
    1247:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

00001253 <__c.4404>:
    1253:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

00001263 <__c.4402>:
    1263:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    1273:	52 5d 0a 00                                         R]..

00001277 <__c.4400>:
    1277:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    1287:	0a 00                                               ..

00001289 <__c.4398>:
    1289:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

0000129a <__c.4396>:
    129a:	5b 55 4e 54 5d 0a 00                                [UNT]..

000012a1 <__c.4391>:
    12a1:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

000012ad <__c.4389>:
    12ad:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    12bd:	52 5d 0a 00                                         R]..

000012c1 <__c.4387>:
    12c1:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

000012d2 <__c.4385>:
    12d2:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    12e2:	0a 00                                               ..

000012e4 <__c.4383>:
    12e4:	0a 00                                               ..

000012e6 <__c.4381>:
    12e6:	5b 55 4e 4c 5d 0a 00                                [UNL]..

000012ed <__c.4376>:
    12ed:	5b 47 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [GPIB (%02XH) no
    12fd:	74 20 64 65 66 69 6e 65 64 20 54 4f 44 4f 5d 0a     t defined TODO].
	...

0000130e <__c.4374>:
    130e:	5b 44 43 4c 5d 0a 00                                [DCL]..

00001315 <__c.4372>:
    1315:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

00001322 <__c.4370>:
    1322:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

0000132e <__c.4368>:
    132e:	5b 53 44 43 5d 0a 00                                [SDC]..

00001335 <__c.4366>:
    1335:	5b 53 50 44 5d 0a 00                                [SPD]..

0000133c <__c.4364>:
    133c:	5b 53 50 45 5d 0a 00                                [SPE]..

00001343 <__c.4362>:
    1343:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    1353:	20 54 4f 44 4f 5d 0a 00                              TODO]..

0000135b <__c.4360>:
    135b:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    136b:	20 54 4f 44 4f 5d 0a 00                              TODO]..

00001373 <__c.4355>:
    1373:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1383:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

0000138d <__c.4353>:
    138d:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    139d:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

000013ae <__c.4326>:
    13ae:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

000013bf <__c.4324>:
    13bf:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

000013cc <__c.4322>:
    13cc:	3c 42 55 53 3e 0a 00                                <BUS>..

000013d3 <__c.4320>:
    13d3:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

000013de <__c.4318>:
    13de:	3c 49 46 43 3e 0a 00                                <IFC>..

000013e5 <__c.4313>:
    13e5:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    13f5:	0a 00                                               ..

000013f7 <__c.4311>:
    13f7:	44 6f 6e 65 0a 00                                   Done..

000013fd <__c.4307>:
    13fd:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00001409 <__c.4305>:
    1409:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    1419:	20 65 78 69 74 0a 00                                 exit..

00001420 <__c.4303>:
    1420:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    1430:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    1440:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

0000144b <__c.4301>:
    144b:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    145b:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

00001465 <__c.4255>:
    1465:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    1475:	6f 74 65 63 74 65 64 0a 00                          otected..

0000147e <__c.4253>:
    147e:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

0000148f <__c.4251>:
    148f:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    149f:	0a 00                                               ..

000014a1 <__c.4446>:
    14a1:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

000014ae <__c.4438>:
    14ae:	4e 6f 74 65 3a 20 67 70 69 62 20 70 72 65 66 69     Note: gpib prefi
    14be:	78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 67 70     x is optional.gp
    14ce:	69 62 20 64 65 62 75 67 20 4e 0a 20 20 20 64 65     ib debug N.   de
    14de:	62 75 67 20 6d 65 73 73 61 67 65 20 72 65 70 6f     bug message repo
    14ee:	72 74 69 6e 67 20 73 65 65 20 68 70 64 69 73 6b     rting see hpdisk
    14fe:	2e 63 66 67 20 66 6f 72 20 64 65 74 61 69 6c 73     .cfg for details
    150e:	0a 67 70 69 62 20 65 6c 61 70 73 65 64 0a 67 70     .gpib elapsed.gp
    151e:	69 62 20 65 6c 61 70 73 65 64 5f 72 65 73 65 74     ib elapsed_reset
    152e:	0a 67 70 69 62 20 69 66 63 0a 67 70 69 62 20 74     .gpib ifc.gpib t
    153e:	61 73 6b 0a 67 70 69 62 20 74 72 61 63 65 20 66     ask.gpib trace f
    154e:	69 6c 65 6e 61 6d 65 2e 74 78 74 20 5b 42 55 53     ilename.txt [BUS
    155e:	5d 0a 20 20 20 44 69 73 70 6c 61 79 20 61 63 74     ].   Display act
    156e:	69 76 69 74 79 20 6f 66 20 47 50 49 42 20 62 75     ivity of GPIB bu
    157e:	73 20 61 6e 64 20 6c 6f 67 20 69 74 0a 20 20 20     s and log it.   
    158e:	42 55 53 20 2d 20 69 6e 63 6c 75 64 65 20 68 61     BUS - include ha
    159e:	6e 64 73 68 61 6b 65 20 73 74 61 74 65 73 0a 0a     ndshake states..
	...

000015af <__c.4436>:
    15af:	67 70 69 62 20 20 20 20 20 20 68 65 6c 70 0a 00     gpib      help..

000015bf <__c.4967>:
    15bf:	0a 00                                               ..

000015c1 <__c.4962>:
    15c1:	4d 6f 75 6e 74 65 64 20 64 72 69 76 65 73 0a 00     Mounted drives..

000015d1 <__c.4957>:
    15d1:	50 52 49 4e 54 45 52 20 25 2d 38 73 20 25 32 64     PRINTER %-8s %2d
    15e1:	0a 00                                               ..

000015e3 <__c.4955>:
    15e3:	41 4d 49 47 4f 20 20 20 25 2d 38 73 20 25 32 64     AMIGO   %-8s %2d
    15f3:	20 25 73 0a 00                                       %s..

000015f8 <__c.4953>:
    15f8:	53 53 38 30 20 20 20 20 25 2d 38 73 20 25 32 64     SS80    %-8s %2d
    1608:	20 25 73 0a 00                                       %s..

0000160d <__c.4945>:
    160d:	45 78 70 65 63 74 65 64 20 41 4d 49 47 4f 20 6f     Expected AMIGO o
    161d:	72 20 53 53 38 30 20 6f 72 20 43 53 38 30 20 66     r SS80 or CS80 f
    162d:	6f 72 20 5b 25 73 5d 0a 00                          or [%s]..

00001636 <__c.4943>:
    1636:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    1646:	74 65 20 41 4d 49 47 4f 20 73 74 72 75 63 74 75     te AMIGO structu
    1656:	72 65 20 66 6f 72 20 25 73 0a 00                    re for %s..

00001661 <__c.4939>:
    1661:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    1671:	74 65 20 53 53 38 30 20 73 74 72 75 63 74 75 72     te SS80 structur
    1681:	65 20 66 6f 72 20 25 73 0a 00                       e for %s..

0000168b <__c.4935>:
    168b:	57 41 52 4e 49 4e 47 3a 20 6d 6f 64 65 6c 20 4e     WARNING: model N
    169b:	4f 54 20 66 6f 75 6e 64 20 69 6e 20 68 70 64 69     OT found in hpdi
    16ab:	72 2e 69 6e 69 21 0a 00                             r.ini!..

000016b3 <__c.4933>:
    16b3:	43 6f 75 6c 64 20 6e 6f 74 20 61 6c 6c 6f 63 61     Could not alloca
    16c3:	74 65 20 50 52 49 4e 54 45 52 20 73 74 72 75 63     te PRINTER struc
    16d3:	74 75 72 65 0a 00                                   ture..

000016d9 <__c.4922>:
    16d9:	75 6d 6f 75 6e 74 20 61 64 64 72 65 73 73 3a 5b     umount address:[
    16e9:	25 64 5d 20 4e 4f 54 20 66 6f 75 6e 64 0a 00        %d] NOT found..

000016f8 <__c.4920>:
    16f8:	20 20 2d 20 61 64 64 72 65 73 73 20 69 73 20 74       - address is t
    1708:	68 65 20 64 65 76 69 63 65 20 61 64 64 72 65 73     he device addres
    1718:	73 0a 00                                            s..

0000171b <__c.4918>:
    171b:	20 20 75 6d 6f 75 6e 74 20 61 64 64 72 65 73 73       umount address
    172b:	0a 00                                               ..

0000172d <__c.4916>:
    172d:	55 73 61 67 65 3a 0a 00                             Usage:..

00001735 <__c.4870>:
    1735:	55 73 61 67 65 3a 20 0a 00                          Usage: ..

0000173e <__c.4866>:
    173e:	6d 6f 75 6e 74 0a 20 20 20 20 20 64 69 73 70 6c     mount.     displ
    174e:	61 79 73 20 61 20 6c 69 73 74 20 6f 66 20 6d 6f     ays a list of mo
    175e:	75 6e 74 65 64 20 64 72 69 76 65 73 20 6f 6e 65     unted drives one
    176e:	20 70 65 72 20 6c 69 6e 65 0a 6d 6f 75 6e 74 20      per line.mount 
    177e:	41 4d 49 47 4f 7c 53 53 38 30 20 6d 6f 64 65 6c     AMIGO|SS80 model
    178e:	20 61 64 64 72 65 73 73 20 66 69 6c 65 0a 20 20      address file.  
    179e:	20 20 20 45 78 61 6d 70 6c 65 3a 20 6d 6f 75 6e        Example: moun
    17ae:	74 20 39 31 32 31 20 20 36 20 2f 61 6d 69 67 6f     t 9121  6 /amigo
    17be:	36 2e 6c 69 66 0a 20 20 20 20 20 45 78 61 6d 70     6.lif.     Examp
    17ce:	6c 65 3a 20 6d 6f 75 6e 74 20 39 31 33 34 44 20     le: mount 9134D 
    17de:	32 20 2f 61 6d 69 67 6f 32 2e 6c 69 66 0a 20 20     2 /amigo2.lif.  
    17ee:	20 20 20 4e 6f 74 65 3a 20 64 72 69 76 65 20 6d        Note: drive m
    17fe:	6f 64 65 6c 20 6d 75 73 74 20 65 78 69 73 74 20     odel must exist 
    180e:	69 6e 20 68 70 64 69 72 2e 69 6e 69 20 5b 64 72     in hpdir.ini [dr
    181e:	69 76 65 69 6e 66 6f 5d 20 73 65 63 74 69 6f 6e     iveinfo] section
    182e:	0a 6d 6f 75 6e 74 20 50 52 49 4e 54 45 52 20 61     .mount PRINTER a
    183e:	64 64 72 65 73 73 0a 20 20 20 20 20 45 78 61 6d     ddress.     Exam
    184e:	70 6c 65 3a 20 6d 6f 75 6e 74 20 50 52 49 4e 54     ple: mount PRINT
    185e:	45 52 20 35 0a 75 6d 6f 75 6e 74 20 61 64 64 72     ER 5.umount addr
    186e:	65 73 73 0a 20 20 20 20 20 45 78 61 6d 70 6c 65     ess.     Example
    187e:	3a 20 75 6d 6f 75 6e 74 20 36 0a 0a 61 64 64 72     : umount 6..addr
    188e:	65 73 73 65 73 0a 20 20 20 44 69 73 70 6c 61 79     esses.   Display
    189e:	20 61 6c 6c 20 64 65 76 69 63 65 20 47 50 49 42      all device GPIB
    18ae:	20 62 75 73 20 61 64 64 72 65 73 73 65 73 20 61      bus addresses a
    18be:	6e 64 20 50 50 52 20 76 61 6c 75 65 73 0a 63 6f     nd PPR values.co
    18ce:	6e 66 69 67 20 5b 2d 76 5d 0a 20 20 20 44 69 73     nfig [-v].   Dis
    18de:	70 6c 61 79 20 63 75 72 72 65 6e 74 20 64 72 69     play current dri
    18ee:	76 65 73 20 63 6f 6e 66 69 67 75 72 61 74 69 6f     ves configuratio
    18fe:	6e 0a 20 20 20 2d 76 20 56 65 72 62 6f 73 65 20     n.   -v Verbose 
    190e:	2d 20 73 68 6f 77 20 66 75 6c 6c 20 64 65 74 61     - show full deta
    191e:	69 6c 0a 0a 00                                      il...

00001923 <__c.4864>:
    1923:	64 72 69 76 65 73 20 20 20 20 68 65 6c 70 0a 00     drives    help..

00001933 <__c.4856>:
    1933:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

0000193b <__c.4854>:
    193b:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    194b:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

00001955 <__c.4852>:
    1955:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    1965:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    1975:	0a 00                                               ..

00001977 <__c.4850>:
    1977:	53 53 38 30 2d 25 64 00                             SS80-%d.

0000197f <__c.4848>:
    197f:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    198f:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

00001999 <__c.4846>:
    1999:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    19a9:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    19b9:	0a 00                                               ..

000019bb <__c.4826>:
    19bb:	44 65 76 69 63 65 20 65 72 72 6f 72 73 20 2d 20     Device errors - 
    19cb:	72 65 6d 6f 76 69 6e 67 3a 20 00                    removing: .

000019d6 <__c.4824>:
    19d6:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    19e6:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    19f6:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    1a06:	6f 20 32 35 36 0a 00                                o 256..

00001a0d <__c.4822>:
    1a0d:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    1a1d:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    1a2d:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    1a3d:	20 32 35 36 0a 00                                    256..

00001a43 <__c.4816>:
    1a43:	41 64 64 72 65 73 73 20 28 25 64 29 20 6f 75 74     Address (%d) out
    1a53:	20 6f 66 20 72 61 6e 67 65 0a 00                     of range..

00001a5e <__c.4800>:
    1a5e:	57 41 52 4e 49 4e 47 3a 20 6d 6f 64 65 6c 20 4e     WARNING: model N
    1a6e:	4f 54 20 66 6f 75 6e 64 20 69 6e 20 68 70 64 69     OT found in hpdi
    1a7e:	72 2e 69 6e 69 21 0a 00                             r.ini!..

00001a86 <__c.4794>:
    1a86:	68 70 64 69 72 20 69 6e 76 61 6c 69 64 20 74 79     hpdir invalid ty
    1a96:	70 65 20 2d 20 4e 4f 54 20 41 4d 49 47 4f 20 6f     pe - NOT AMIGO o
    1aa6:	66 20 53 53 38 30 0a 00                             f SS80..

00001aae <__c.4758>:
    1aae:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    1abe:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    1ace:	0a 00                                               ..

00001ad0 <__c.4750>:
    1ad0:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    1ae0:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    1af0:	6c 6c 0a 00                                         ll..

00001af4 <__c.4729>:
    1af4:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1b04:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    1b14:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

00001b1f <__c.4727>:
    1b1f:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1b2f:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    1b3f:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    1b4f:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00001b57 <__c.4725>:
    1b57:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1b67:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    1b77:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    1b87:	3a 25 73 0a 00                                      :%s..

00001b8c <__c.4723>:
    1b8c:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1b9c:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    1bac:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    1bbc:	55 4c 4c 0a 00                                      ULL..

00001bc1 <__c.4721>:
    1bc1:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1bd1:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    1be1:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    1bf1:	66 20 72 61 6e 67 65 0a 00                          f range..

00001bfa <__c.4719>:
    1bfa:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1c0a:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    1c1a:	6e 67 65 0a 00                                      nge..

00001c1f <__c.4680>:
    1c1f:	0a 00                                               ..

00001c21 <__c.4675>:
    1c21:	0a 00                                               ..

00001c23 <__c.4673>:
    1c23:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1c33:	6c 64 0a 00                                         ld..

00001c37 <__c.4671>:
    1c37:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1c47:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001c56 <__c.4669>:
    1c56:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001c60 <__c.4667>:
    1c60:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1c70:	6c 64 0a 00                                         ld..

00001c74 <__c.4665>:
    1c74:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1c84:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001c93 <__c.4663>:
    1c93:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001c9c <__c.4660>:
    1c9c:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    1cac:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00001cbc <__c.4651>:
    1cbc:	0a 00                                               ..

00001cbe <__c.4646>:
    1cbe:	0a 00                                               ..

00001cc0 <__c.4644>:
    1cc0:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

00001cc9 <__c.4642>:
    1cc9:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001cd3 <__c.4640>:
    1cd3:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

00001cdc <__c.4637>:
    1cdc:	44 65 76 69 63 65 20 41 64 64 72 65 73 73 65 73     Device Addresses
    1cec:	0a 00                                               ..

00001cee <__c.4631>:
    1cee:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    1cfe:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    1d0e:	2a 2a 2a 2a 2a 0a 00                                *****..

00001d15 <__c.4629>:
    1d15:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    1d25:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00001d32 <__c.4627>:
    1d32:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    1d42:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    1d52:	0a 00                                               ..

00001d54 <__c.4623>:
    1d54:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    1d64:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1d74:	0a 00                                               ..

00001d76 <__c.4620>:
    1d76:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1d86:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1d96:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001da6 <__c.4611>:
    1da6:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1db6:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1dc6:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001dd5 <__c.4608>:
    1dd5:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1de5:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1df5:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001e05 <__c.4599>:
    1e05:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1e15:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1e25:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001e33 <__c.4591>:
    1e33:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1e43:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1e53:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001e61 <__c.4581>:
    1e61:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1e71:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1e81:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001e8d <__c.4564>:
    1e8d:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1e9d:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1ead:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1ebd:	0a 00                                               ..

00001ebf <__c.4556>:
    1ebf:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1ecf:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1edf:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001eed <__c.4553>:
    1eed:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1efd:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1f0d:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001f1b <__c.4545>:
    1f1b:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1f2b:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1f3b:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001f48 <__c.4535>:
    1f48:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1f58:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1f68:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001f79 <__c.4532>:
    1f79:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1f89:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1f99:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001fa3 <__c.4528>:
    1fa3:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1fb3:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1fc3:	0a 00                                               ..

00001fc5 <__c.4517>:
    1fc5:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1fd5:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1fe5:	0a 00                                               ..

00001fe7 <__c.4514>:
    1fe7:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    1ff7:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00002005 <__c.4512>:
    2005:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00002012 <__c.4491>:
    2012:	25 73 0a 00                                         %s..

00002016 <__c.4481>:
    2016:	25 2d 32 35 73 20 3d 20 25 73 0a 00                 %-25s = %s..

00002022 <__c.4470>:
    2022:	25 2d 32 35 73 20 3d 20 25 38 6c 78 48 20 28 25     %-25s = %8lxH (%
    2032:	6c 64 29 0a 00                                      ld)..

00002037 <__c.3646>:
    2037:	4d 6f 64 65 6c 3a 20 25 73 20 4e 4f 54 20 66 6f     Model: %s NOT fo
    2047:	75 6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69     und in hpdir.ini
    2057:	0a 00                                               ..

00002059 <__c.3641>:
    2059:	4d 6f 64 65 6c 3a 20 25 73 20 66 6f 75 6e 64 20     Model: %s found 
    2069:	69 6e 20 68 70 64 69 72 2e 69 6e 69 0a 00           in hpdir.ini..

00002077 <__c.3639>:
    2077:	25 73 20 25 73 0a 00                                %s %s..

0000207e <__c.3635>:
    207e:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    208e:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

0000209b <__c.4563>:
    209b:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    20ab:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    20bb:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    20cb:	48 5d 0a 00                                         H]..

000020cf <__c.4561>:
    20cf:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    20df:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    20ef:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    20ff:	48 5d 0a 00                                         H]..

00002103 <__c.4559>:
    2103:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    2113:	74 5d 0a 00                                         t]..

00002117 <__c.4557>:
    2117:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00002126 <__c.4555>:
    2126:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    2136:	74 65 5d 0a 00                                      te]..

0000213b <__c.4553>:
    213b:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    214b:	61 74 65 5d 0a 00                                   ate]..

00002151 <__c.4551>:
    2151:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    2161:	61 74 65 5d 0a 00                                   ate]..

00002167 <__c.4546>:
    2167:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    2177:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    2187:	5d 0a 00                                            ]..

0000218a <__c.4532>:
    218a:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00002199 <__c.4530>:
    2199:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    21a9:	5d 0a 00                                            ]..

000021ac <__c.4523>:
    21ac:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

000021b8 <__c.4509>:
    21b8:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    21c8:	5d 0a 00                                            ]..

000021cb <__c.4507>:
    21cb:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    21db:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

000021e5 <__c.4500>:
    21e5:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    21f5:	48 5d 0a 00                                         H]..

000021f9 <__c.4498>:
    21f9:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    2209:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

00002219 <__c.4493>:
    2219:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    2229:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    2239:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    2249:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

00002255 <__c.4490>:
    2255:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    2265:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00002275 <__c.4488>:
    2275:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    2285:	29 5d 0a 00                                         )]..

00002289 <__c.4486>:
    2289:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    2299:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    22a9:	28 25 64 29 5d 0a 00                                (%d)]..

000022b0 <__c.4484>:
    22b0:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    22c0:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

000022ce <__c.4482>:
    22ce:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    22de:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

000022eb <__c.4479>:
    22eb:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    22fb:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    230b:	44 4f 5d 0a 00                                      DO]..

00002310 <__c.4476>:
    2310:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    2320:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002329 <__c.4474>:
    2329:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    2339:	5d 0a 00                                            ]..

0000233c <__c.4465>:
    233c:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    234c:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    235c:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    236c:	43 6f 64 65 73 5d 0a 00                             Codes]..

00002374 <__c.4462>:
    2374:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    2384:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00002394 <__c.4460>:
    2394:	5b 53 53 38 30 20 49 6e 69 74 69 61 74 65 20 44     [SS80 Initiate D
    23a4:	69 61 67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f     iagnostic - TODO
    23b4:	5d 0a 00                                            ]..

000023b7 <__c.4458>:
    23b7:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    23c7:	61 74 75 73 5d 0a 00                                atus]..

000023ce <__c.4456>:
    23ce:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    23de:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

000023e7 <__c.4454>:
    23e7:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    23f7:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

00002402 <__c.4452>:
    2402:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    2412:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

00002421 <__c.4450>:
    2421:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    2431:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

0000243f <__c.4448>:
    243f:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00002450 <__c.4446>:
    2450:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    2460:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

0000246c <__c.4444>:
    246c:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    247c:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

00002489 <__c.4442>:
    2489:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    2499:	2d 4f 50 5d 0a 00                                   -OP]..

0000249f <__c.4440>:
    249f:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    24af:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

000024c0 <__c.4438>:
    24c0:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    24d0:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    24e0:	44 4f 5d 0a 00                                      DO]..

000024e5 <__c.4436>:
    24e5:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    24f5:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

000024ff <__c.4434>:
    24ff:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    250f:	2d 4f 50 5d 0a 00                                   -OP]..

00002515 <__c.4432>:
    2515:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

00002523 <__c.4430>:
    2523:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    2533:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

0000253f <__c.4428>:
    253f:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    254f:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

0000255c <__c.4426>:
    255c:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    256c:	20 57 72 69 74 65 5d 0a 00                           Write]..

00002575 <__c.4423>:
    2575:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2585:	20 52 65 61 64 5d 0a 00                              Read]..

0000258d <__c.4421>:
    258d:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    259d:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

000025a6 <__c.4418>:
    25a6:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    25b6:	25 64 29 5d 0a 00                                   %d)]..

000025bc <__c.4416>:
    25bc:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    25cc:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

000025d5 <__c.4414>:
    25d5:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    25e5:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    25f5:	52 4f 52 5d 0a 00                                   ROR]..

000025fb <__c.4405>:
    25fb:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    260b:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

00002615 <__c.4400>:
    2615:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    2625:	76 61 6c 69 64 5d 0a 00                             valid]..

0000262d <__c.4395>:
    262d:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    263d:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

0000264c <__c.4393>:
    264c:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    265c:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

00002669 <__c.4391>:
    2669:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    2679:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    2689:	5d 0a 00                                            ]..

0000268c <__c.4389>:
    268c:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

0000269d <__c.4381>:
    269d:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    26ad:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

000026b8 <__c.4379>:
    26b8:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    26c8:	73 5d 0a 00                                         s]..

000026cc <__c.4369>:
    26cc:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

000026d7 <__c.4367>:
    26d7:	25 73 3a 0a 00                                      %s:..

000026dc <__c.4342>:
    26dc:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    26ec:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    26fc:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

00002707 <__c.4340>:
    2707:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2717:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    2727:	49 4e 49 53 48 5d 0a 00                             INISH]..

0000272f <__c.4336>:
    272f:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    273f:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    274f:	58 48 29 5d 0a 00                                   XH)]..

00002755 <__c.4334>:
    2755:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    2765:	72 5d 0a 00                                         r]..

00002769 <__c.4330>:
    2769:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    2779:	5d 0a 00                                            ]..

0000277c <__c.4328>:
    277c:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    278c:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    279c:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

000027a5 <__c.4316>:
    27a5:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    27b5:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    27c5:	62 79 74 65 73 5d 0a 00                             bytes]..

000027cd <__c.4314>:
    27cd:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    27dd:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    27ed:	53 48 5d 0a 00                                      SH]..

000027f2 <__c.4309>:
    27f2:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    2802:	20 45 72 72 6f 72 5d 0a 00                           Error]..

0000280b <__c.4307>:
    280b:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    281b:	45 72 72 6f 72 5d 0a 00                             Error]..

00002823 <__c.4305>:
    2823:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    2833:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

00002841 <__c.4303>:
    2841:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2851:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    2861:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

00002869 <__c.4286>:
    2869:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    2879:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

00002885 <__c.4270>:
    2885:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    2895:	5d 0a 00                                            ]..

00002898 <__c.4386>:
    2898:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    28a8:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    28b8:	64 64 72 65 73 73 5d 0a 00                          ddress]..

000028c1 <__c.4383>:
    28c1:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    28d1:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    28e1:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

000028ec <__c.4380>:
    28ec:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    28fc:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    290c:	66 66 65 72 65 64 5d 0a 00                          ffered]..

00002915 <__c.4375>:
    2915:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2925:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

00002935 <__c.4372>:
    2935:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    2945:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

00002951 <__c.4369>:
    2951:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    2961:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    2971:	0a 00                                               ..

00002973 <__c.4366>:
    2973:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2983:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

00002992 <__c.4363>:
    2992:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    29a2:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

000029b3 <__c.4360>:
    29b3:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    29c3:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

000029d3 <__c.4356>:
    29d3:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    29e3:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    29f3:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2a03:	0a 00                                               ..

00002a05 <__c.4351>:
    2a05:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

00002a15 <__c.4348>:
    2a15:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    2a25:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

00002a34 <__c.4346>:
    2a34:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2a44:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    2a54:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

00002a5f <__c.4344>:
    2a5f:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    2a6f:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

00002a7f <__c.4342>:
    2a7f:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    2a8f:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    2a9f:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002aa8 <__c.4340>:
    2aa8:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2ab8:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

00002ac4 <__c.4338>:
    2ac4:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    2ad4:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    2ae4:	0a 00                                               ..

00002ae6 <__c.4336>:
    2ae6:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

00002af6 <__c.4333>:
    2af6:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    2b06:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

00002b17 <__c.4331>:
    2b17:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    2b27:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    2b37:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002b40 <__c.4329>:
    2b40:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2b50:	36 5d 0a 00                                         6]..

00002b54 <__c.4326>:
    2b54:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2b64:	35 5d 0a 00                                         5]..

00002b68 <__c.4323>:
    2b68:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2b78:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002b88 <__c.4320>:
    2b88:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2b98:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2ba8:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002bb7 <__c.4318>:
    2bb7:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2bc7:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002bd8 <__c.4316>:
    2bd8:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2be8:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002bf9 <__c.4314>:
    2bf9:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    2c09:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    2c19:	0a 00                                               ..

00002c1b <__c.4312>:
    2c1b:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2c2b:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2c3b:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2c4b:	0a 00                                               ..

00002c4d <__c.4300>:
    2c4d:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    2c5d:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    2c6d:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2c7d:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2c8d:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002c9e <__c.4298>:
    2c9e:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2cae:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2cbe:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2cce:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2cde:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002cee <__c.4296>:
    2cee:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2cfe:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d0e:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2d1e:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2d2e:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002d3e <__c.4294>:
    2d3e:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2d4e:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2d5e:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2d6e:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2d7e:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002d8e <__c.4289>:
    2d8e:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2d9e:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2dae:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2dbe:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2dce:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2dde:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2dee:	58 48 5d 0a 00                                      XH]..

00002df3 <__c.4287>:
    2df3:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2e03:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2e13:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2e23:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2e33:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2e43:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2e53:	30 32 58 48 5d 0a 00                                02XH]..

00002e5a <__c.4285>:
    2e5a:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2e6a:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2e7a:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2e8a:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2e9a:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2eaa:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2eba:	30 32 58 48 5d 0a 00                                02XH]..

00002ec1 <__c.4283>:
    2ec1:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2ed1:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2ee1:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2ef1:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2f01:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2f11:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2f21:	30 32 58 48 5d 0a 00                                02XH]..

00002f28 <__c.4276>:
    2f28:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002f37 <__c.4263>:
    2f37:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002f44 <__c.4261>:
    2f44:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2f54:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002f5e <__c.4254>:
    2f5e:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 64 69 73     [AMIGO Write dis
    2f6e:	6b 20 77 72 69 74 65 20 65 72 72 6f 72 5d 0a 00     k write error]..

00002f7e <__c.4252>:
    2f7e:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2f8e:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002f9d <__c.4250>:
    2f9d:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2fad:	0a 00                                               ..

00002faf <__c.4243>:
    2faf:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2fbf:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002fc9 <__c.4237>:
    2fc9:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2fd9:	0a 00                                               ..

00002fdb <__c.4231>:
    2fdb:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    2feb:	6e 65 5d 0a 00                                      ne]..

00002ff0 <__c.4227>:
    2ff0:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00003000 <__c.4186>:
    3000:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    3010:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    3020:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

0000302b <__c.4216>:
    302b:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    303b:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    304b:	25 30 34 58 48 5d 0a 00                             %04XH]..

00003053 <__c.4193>:
    3053:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    3063:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

0000306c <__c.4179>:
    306c:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    307c:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00003086 <__c.4177>:
    3086:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    3096:	75 73 5d 0a 00                                      us]..

0000309b <__c.4171>:
    309b:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    30ab:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

000030b5 <__c.4169>:
    30b5:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    30c5:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

000030d3 <__c.4163>:
    30d3:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    30e3:	74 61 74 75 73 5d 0a 00                             tatus]..

000030eb <__c.4148>:
    30eb:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    30fb:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

00003105 <__c.4146>:
    3105:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    3115:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

00003121 <__c.4141>:
    3121:	25 30 38 6c 64 0d 00                                %08ld..

00003128 <__c.4135>:
    3128:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    3138:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00003149 <__c.4129>:
    3149:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00003157 <__c.4127>:
    3157:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    3167:	69 74 65 0a 00                                      ite..

0000316c <__c.4121>:
    316c:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00003178 <__c.4119>:
    3178:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    3188:	6f 3a 25 73 0a 00                                   o:%s..

0000318e <__c.4117>:
    318e:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    319e:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    31ae:	74 00                                               t.

000031b0 <__c.4553>:
    31b0:	09 46 6f 72 6d 61 74 74 69 6e 67 3a 20 77 72 6f     .Formatting: wro
    31c0:	74 65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00     te %ld sectors..

000031d0 <__c.4551>:
    31d0:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    31e0:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

000031f0 <__c.4549>:
    31f0:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3200:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    3210:	30 0a 00                                            0..

00003213 <__c.4547>:
    3213:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3223:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    3233:	70 74 79 0a 00                                      pty..

00003238 <__c.4545>:
    3238:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3248:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    3258:	73 20 65 6d 70 74 79 0a 00                          s empty..

00003261 <__c.4532>:
    3261:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    3271:	20 25 31 30 73 0a 00                                 %10s..

00003278 <__c.4530>:
    3278:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    3288:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    3298:	74 20 66 6f 75 6e 64 0a 00                          t found..

000032a1 <__c.4528>:
    32a1:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    32b1:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    32c1:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    32d1:	74 65 72 73 0a 00                                   ters..

000032d7 <__c.4526>:
    32d7:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    32e7:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    32f7:	65 6d 70 74 79 0a 00                                empty..

000032fe <__c.4524>:
    32fe:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    330e:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    331e:	65 6d 70 74 79 0a 00                                empty..

00003325 <__c.4522>:
    3325:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3335:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    3345:	20 65 6d 70 74 79 0a 00                              empty..

0000334d <__c.4513>:
    334d:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

0000335c <__c.4511>:
    335c:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    336c:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    337c:	20 66 6f 75 6e 64 0a 00                              found..

00003384 <__c.4509>:
    3384:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3394:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

000033a3 <__c.4507>:
    33a3:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    33b3:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

000033c3 <__c.4505>:
    33c3:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    33d3:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    33e3:	70 74 79 0a 00                                      pty..

000033e8 <__c.4497>:
    33e8:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000033f6 <__c.4492>:
    33f6:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003404 <__c.4490>:
    3404:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3414:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3424:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003434 <__c.4488>:
    3434:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3444:	73 0a 00                                            s..

00003447 <__c.4486>:
    3447:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3457:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    3467:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

00003476 <__c.4484>:
    3476:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    3486:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

00003492 <__c.4482>:
    3492:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    34a2:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

000034ad <__c.4480>:
    34ad:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    34bd:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

000034cd <__c.4463>:
    34cd:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000034db <__c.4458>:
    34db:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000034e9 <__c.4456>:
    34e9:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    34f9:	73 0a 00                                            s..

000034fc <__c.4454>:
    34fc:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    350c:	75 6e 64 3a 25 73 0a 00                             und:%s..

00003514 <__c.4437>:
    3514:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003522 <__c.4434>:
    3522:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3532:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    3542:	20 65 72 72 6f 72 0a 00                              error..

0000354a <__c.4426>:
    354a:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003558 <__c.4424>:
    3558:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3568:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    3578:	20 65 72 72 6f 72 0a 00                              error..

00003580 <__c.4421>:
    3580:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3590:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    35a0:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    35b0:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    35c0:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    35d0:	30 32 58 48 0a 00                                   02XH..

000035d6 <__c.4419>:
    35d6:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    35e6:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    35f6:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    3606:	20 25 64 0a 00                                       %d..

0000360b <__c.4415>:
    360b:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

0000361b <__c.4413>:
    361b:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    362b:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    363b:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    364b:	30 78 45 30 31 33 0a 00                             0xE013..

00003653 <__c.4411>:
    3653:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    3663:	6e 64 3a 25 73 0a 00                                nd:%s..

0000366a <__c.4409>:
    366a:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    367a:	75 6e 64 3a 25 73 0a 00                             und:%s..

00003682 <__c.4385>:
    3682:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003690 <__c.4383>:
    3690:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    36a0:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000036a9 <__c.4381>:
    36a9:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    36b9:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000036c2 <__c.4379>:
    36c2:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    36d2:	20 20 25 34 64 0a 00                                  %4d..

000036d9 <__c.4377>:
    36d9:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    36e9:	20 20 20 25 73 0a 00                                   %s..

000036f0 <__c.4375>:
    36f0:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    3700:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    3710:	77 72 69 74 65 0a 00                                write..

00003717 <__c.4373>:
    3717:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3727:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3737:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003747 <__c.4371>:
    3747:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3757:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    3767:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

00003776 <__c.4369>:
    3776:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3786:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    3796:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

000037a6 <__c.4367>:
    37a6:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    37b6:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    37c6:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

000037d5 <__c.4365>:
    37d5:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    37e5:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    37f5:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

00003803 <__c.4363>:
    3803:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3813:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    3823:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    3833:	79 0a 00                                            y..

00003836 <__c.4349>:
    3836:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003844 <__c.4347>:
    3844:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003852 <__c.4342>:
    3852:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003860 <__c.4325>:
    3860:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    3870:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    3880:	25 64 0a 00                                         %d..

00003884 <__c.4308>:
    3884:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    3894:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    38a4:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    38b4:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

000038bd <__c.4294>:
    38bd:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    38cd:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    38dd:	62 69 67 0a 00                                      big..

000038e2 <__c.4292>:
    38e2:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    38f2:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    3902:	63 74 65 72 73 0a 00                                cters..

00003909 <__c.4285>:
    3909:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    3919:	73 0a 00                                            s..

0000391c <__c.4283>:
    391c:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    392c:	73 0a 00                                            s..

0000392f <__c.4281>:
    392f:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    393f:	73 0a 00                                            s..

00003942 <__c.4279>:
    3942:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

00003953 <__c.4277>:
    3953:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

00003960 <__c.4275>:
    3960:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

0000396c <__c.4273>:
    396c:	0a 00                                               ..

0000396e <__c.4270>:
    396e:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    397e:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    398e:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

0000399e <__c.4268>:
    399e:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    39ae:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    39be:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    39ce:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    39de:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

000039ea <__c.4265>:
    39ea:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    39fa:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3a0a:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3a1a:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003a2a <__c.4263>:
    3a2a:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3a3a:	3a 5b 25 73 5d 0a 00                                :[%s]..

00003a41 <__c.4253>:
    3a41:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3a51:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    3a61:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    3a71:	64 0a 00                                            d..

00003a74 <__c.4251>:
    3a74:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3a84:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3a94:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    3aa4:	64 0a 00                                            d..

00003aa7 <__c.4249>:
    3aa7:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3ab7:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3ac7:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3ad7:	69 6c 65 64 0a 00                                   iled..

00003add <__c.4247>:
    3add:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3aed:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3afd:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3b0d:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003b1c <__c.4234>:
    3b1c:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3b2c:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3b3c:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3b4c:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    3b5c:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

00003b6d <__c.4231>:
    3b6d:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3b7d:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3b8d:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003b96 <__c.4229>:
    3b96:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3ba6:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3bb6:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3bc6:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003bce <__c.4217>:
    3bce:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3bde:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3bee:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3bfe:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3c0e:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003c1b <__c.4192>:
    3c1b:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3c2b:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003c3b <__c.4183>:
    3c3b:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3c4b:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    3c5b:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    3c6b:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003c75 <__c.4164>:
    3c75:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

00003c82 <__c.4159>:
    3c82:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003c8f <__c.4154>:
    3c8f:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003c9c <__c.4146>:
    3c9c:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003ca9 <__c.4144>:
    3ca9:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3cb9:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    3cc9:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3cd9:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3ce9:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3cf9:	25 6c 64 0a 00                                      %ld..

00003cfe <__c.4128>:
    3cfe:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d0e:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3d1e:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003d2a <__c.4126>:
    3d2a:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d3a:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3d4a:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003d55 <__c.4124>:
    3d55:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d65:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3d75:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3d85:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3d95:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003da0 <__c.4122>:
    3da0:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3db0:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3dc0:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3dd0:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3de0:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003deb <__c.4120>:
    3deb:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3dfb:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3e0b:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003e19 <__c.4118>:
    3e19:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e29:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3e39:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3e49:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003e5a <__c.4116>:
    3e5a:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e6a:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3e7a:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3e8a:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3e9a:	58 68 0a 00                                         Xh..

00003e9e <__c.4114>:
    3e9e:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3eae:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003ebf <__c.4108>:
    3ebf:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3ecf:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3edf:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003eeb <__c.4106>:
    3eeb:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3efb:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3f0b:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003f1a <__c.4104>:
    3f1a:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f2a:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3f3a:	25 6c 64 0a 00                                      %ld..

00003f3f <__c.4102>:
    3f3f:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f4f:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3f5f:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3f6f:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003f78 <__c.4100>:
    3f78:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f88:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3f98:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3fa8:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003fb1 <__c.4098>:
    3fb1:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3fc1:	58 48 20 3e 20 31 0a 00                             XH > 1..

00003fc9 <__c.4096>:
    3fc9:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3fd9:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    3fe9:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    3ff9:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00004002 <__c.4094>:
    4002:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4012:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00004021 <__c.4087>:
    4021:	0a 00                                               ..

00004023 <__c.4085>:
    4023:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    4033:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000403d <__c.4083>:
    403d:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    404d:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00004059 <__c.4081>:
    4059:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    4069:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004076 <__c.4079>:
    4076:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    4086:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00004093 <__c.4077>:
    4093:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    40a3:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000040b0 <__c.4075>:
    40b0:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    40c0:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

000040cc <__c.4073>:
    40cc:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    40dc:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000040e8 <__c.4071>:
    40e8:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    40f8:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004102 <__c.4069>:
    4102:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    4112:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000411c <__c.4067>:
    411c:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    412c:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004138 <__c.4065>:
    4138:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    4148:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004154 <__c.4063>:
    4154:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    4164:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004171 <__c.4061>:
    4171:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    4181:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000418e <__c.4059>:
    418e:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    419e:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000041aa <__c.4057>:
    41aa:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    41ba:	20 20 20 20 20 20 25 73 0a 00                             %s..

000041c4 <__c.4055>:
    41c4:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    41d4:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041e1 <__c.4053>:
    41e1:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    41f1:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041fe <__c.4051>:
    41fe:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    420e:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000421b <__c.4049>:
    421b:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    422b:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004238 <__c.4047>:
    4238:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    4248:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00004255 <__c.4045>:
    4255:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    4265:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004272 <__c.4043>:
    4272:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    4282:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000428f <__c.4041>:
    428f:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    429f:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042ac <__c.4039>:
    42ac:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    42bc:	20 20 20 20 20 20 25 73 0a 00                             %s..

000042c6 <__c.4037>:
    42c6:	0a 25 73 0a 00                                      .%s..

000042cb <__c.3914>:
    42cb:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    42db:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    42eb:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    42fb:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

00004308 <__c.3905>:
    4308:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    4318:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    4328:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    4338:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

00004344 <__c.3896>:
    4344:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    4354:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

00004365 <__c.3889>:
    4365:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    4375:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

0000437e <__c.3883>:
    437e:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    438e:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    439e:	25 73 5d 0a 00                                      %s]..

000043a3 <__c.3871>:
    43a3:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    43b3:	6f 69 6e 74 65 72 0a 00                             ointer..

000043bb <__c.3866>:
    43bb:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    43cb:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    43db:	20 6d 65 6d 6f 72 79 0a 00                           memory..

000043e4 <__c.3860>:
    43e4:	74 64 30 32 6c 69 66 20 73 75 70 70 6f 72 74 20     td02lif support 
    43f4:	6e 6f 74 20 65 6e 61 62 6c 65 64 0a 00              not enabled..

00004401 <__c.3858>:
    4401:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    4411:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

00004422 <__c.3845>:
    4422:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    4432:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    4442:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    4452:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    4462:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    4472:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    4482:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    4492:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    44a2:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    44b2:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    44c2:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    44d2:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    44e2:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    44f2:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    4502:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    4512:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    4522:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    4532:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    4542:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    4552:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    4562:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    4572:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    4582:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    4592:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    45a2:	6d 65 0a 55 73 65 20 2d 64 20 20 61 66 74 65 72     me.Use -d  after
    45b2:	20 27 6c 69 66 27 20 6b 65 79 77 6f 72 64 20 74      'lif' keyword t
    45c2:	6f 20 65 6e 61 62 6c 65 20 4c 49 46 20 66 69 6c     o enable LIF fil
    45d2:	65 73 79 73 74 65 6d 20 64 65 62 75 67 67 69 6e     esystem debuggin
    45e2:	67 0a 0a 00                                         g...

000045e6 <__c.3843>:
    45e6:	6c 69 66 20 20 20 20 20 20 20 68 65 6c 70 0a 00     lif       help..

000045f6 <__c.4639>:
    45f6:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    4606:	53 4b 0a 00                                         SK..

0000460a <__c.4637>:
    460a:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    461a:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004624 <__c.4635>:
    4624:	25 2d 31 36 73 00                                   %-16s.

0000462a <__c.4633>:
    462a:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    463a:	30 34 78 48 0a 00                                   04xH..

00004640 <__c.4631>:
    4640:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    4650:	64 6f 6e 65 0a 00                                   done..

00004656 <__c.4629>:
    4656:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    4666:	6f 6e 65 0a 00                                      one..

0000466b <__c.4627>:
    466b:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    467b:	61 6c 69 7a 65 64 0a 00                             alized..

00004683 <__c.4625>:
    4683:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    4693:	0a 00                                               ..

00004695 <__c.4623>:
    4695:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    46a5:	7a 65 64 0a 00                                      zed..

000046aa <__c.4621>:
    46aa:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    46ba:	69 7a 65 64 0a 00                                   ized..

000046c0 <__c.4619>:
    46c0:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

000046d1 <__c.4617>:
    46d1:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    46e1:	20 73 74 61 72 74 0a 00                              start..

000046e9 <__c.4615>:
    46e9:	53 79 73 74 65 6d 20 54 61 73 6b 20 49 6e 74 65     System Task Inte
    46f9:	72 72 75 70 74 20 52 61 74 65 3a 20 25 6c 64 20     rrupt Rate: %ld 
    4709:	4e 61 6e 6f 20 53 65 63 6f 6e 64 73 0a 00           Nano Seconds..

00004717 <__c.4613>:
    4717:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

00004726 <__c.4611>:
    4726:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     Initializing RTC
    4736:	0a 00                                               ..

00004738 <__c.4609>:
    4738:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
    4748:	20 62 75 73 0a 00                                    bus..

0000474e <__c.4607>:
    474e:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     Initializing SPI
    475e:	20 62 75 73 0a 00                                    bus..

00004764 <__c.4605>:
    4764:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4774:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

0000477e <__c.4603>:
    477e:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    478e:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004798 <__c.4601>:
    4798:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    47a8:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    47b8:	35 64 69 73 6b 0a 00                                5disk..

000047bf <__c.4599>:
    47bf:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

000047cf <__c.4597>:
    47cf:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    47df:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

000047ec <__c.4595>:
    47ec:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    47fc:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

0000480b <__c.4593>:
    480b:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    481b:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    482b:	3a 20 25 6c 64 0a 00                                : %ld..

00004832 <__c.4591>:
    4832:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

00004843 <__c.4589>:
    4843:	53 74 61 72 74 0a 00                                Start..

0000484a <__c.4581>:
    484a:	25 2d 31 36 73 00                                   %-16s.

00004850 <__c.4579>:
    4850:	53 53 38 30 3d 25 64 20 41 4d 49 47 4f 3d 25 64     SS80=%d AMIGO=%d
	...

00004861 <__c.4571>:
    4861:	20 20 20 20 20 20 20 5b 25 73 5d 0a 00                     [%s]..

0000486e <__c.4569>:
    486e:	20 20 20 20 41 72 67 75 6d 65 6e 74 20 63 6f 75         Argument cou
    487e:	6e 74 20 3d 20 25 64 0a 00                          nt = %d..

00004887 <__c.4567>:
    4887:	49 6e 76 61 6c 69 64 20 43 6f 6d 6d 61 6e 64 0a     Invalid Command.
	...

00004898 <__c.4565>:
    4898:	43 6f 6d 6d 61 6e 64 20 46 41 49 4c 45 44 0a 00     Command FAILED..

000048a8 <__c.4563>:
    48a8:	4f 4b 0a 00                                         OK..

000048ac <__c.4555>:
    48ac:	49 6e 70 75 74 20 64 65 62 75 67 67 69 6e 67 3a     Input debugging:
    48bc:	20 25 73 0a 00                                       %s..

000048c1 <__c.4550>:
    48c1:	20 20 20 5b 25 73 5d 0a 00                             [%s]..

000048ca <__c.4548>:
    48ca:	41 72 67 75 6d 65 6e 74 20 63 6f 75 6e 74 20 3d     Argument count =
    48da:	20 25 64 0a 00                                       %d..

000048df <__c.4546>:
    48df:	0a 3e 00                                            .>.

000048e2 <__c.4533>:
    48e2:	62 61 63 6b 6c 69 67 68 74 20 30 78 52 52 47 47     backlight 0xRRGG
    48f2:	42 42 0a 64 69 72 20 20 20 20 20 20 20 64 69 72     BB.dir       dir
    4902:	65 63 74 6f 72 69 65 73 20 6c 69 73 74 0a 69 6e     ectories list.in
    4912:	70 75 74 20 20 20 2d 20 74 6f 67 67 6c 65 20 69     put   - toggle i
    4922:	6e 70 75 74 20 64 65 62 75 67 67 69 6e 67 0a 6d     nput debugging.m
    4932:	65 6d 20 20 20 20 20 2d 20 64 69 73 70 6c 61 79     em     - display
    4942:	20 66 72 65 65 20 6d 65 6d 6f 72 79 0a 72 65 73      free memory.res
    4952:	65 74 20 20 20 2d 20 72 65 73 65 74 20 65 6d 75     et   - reset emu
    4962:	6c 61 74 6f 72 0a 73 65 74 64 61 74 65 20 2d 20     lator.setdate - 
    4972:	73 65 74 20 64 61 74 65 0a 74 69 6d 65 20 20 20     set date.time   
    4982:	20 2d 20 64 69 73 70 6c 61 79 20 63 75 72 72 65      - display curre
    4992:	6e 74 20 74 69 6d 65 0a 0a 00                       nt time...

0000499c <__c.4531>:
    499c:	68 65 6c 70 20 20 20 20 20 2d 20 64 69 73 70 6c     help     - displ
    49ac:	61 79 73 20 74 68 69 73 20 68 65 6c 70 20 6d 65     ays this help me
    49bc:	6e 75 0a 00                                         nu..

000049c0 <__c.4524>:
    49c0:	25 2d 31 36 73 00                                   %-16s.

000049c6 <__c.4522>:
    49c6:	25 2d 31 36 73 00                                   %-16s.

000049cc <__c.4515>:
    49cc:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    49dc:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

000049e6 <__c.4513>:
    49e6:	25 2d 31 36 73 00                                   %-16s.

000049ec <__c.4511>:
    49ec:	25 2d 31 36 73 00                                   %-16s.

000049f2 <__c.4509>:
    49f2:	6c 63 64 5f 74 61 73 6b 20 69 6e 69 74 20 66 61     lcd_task init fa
    4a02:	69 6c 65 64 0a 00                                   iled..

00004a08 <__c.4507>:
    4a08:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4a18:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

00004a26 <__c.4501>:
    4a26:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4a36:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004a40 <__c.4495>:
    4a40:	25 73 20 25 32 64 20 25 30 32 64 3a 25 30 32 64     %s %2d %02d:%02d
    4a50:	3a 25 30 32 64 00                                   :%02d.

00004a56 <__c.4481>:
    4a56:	0a 00                                               ..

00004a58 <__c.4479>:
    4a58:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4a68:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004a72 <__c.4477>:
    4a72:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4a82:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004a8c <__c.4475>:
    4a8c:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4a9c:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4aac:	35 64 69 73 6b 0a 00                                5disk..

00004ab3 <__c.4473>:
    4ab3:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004ac3 <__c.4471>:
    4ac3:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    4ad3:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004ae0 <__c.4469>:
    4ae0:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4af0:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 20 77 69     vice Emulator wi
    4b00:	74 68 20 62 75 69 6c 74 20 69 6e 20 4c 49 46 20     th built in LIF 
    4b10:	75 74 69 6c 69 74 69 65 73 0a 00 00                 utilities...

00004b1c <__ctors_end>:
    4b1c:	11 24       	eor	r1, r1
    4b1e:	1f be       	out	0x3f, r1	; 63
    4b20:	cf ef       	ldi	r28, 0xFF	; 255
    4b22:	d0 e4       	ldi	r29, 0x40	; 64
    4b24:	de bf       	out	0x3e, r29	; 62
    4b26:	cd bf       	out	0x3d, r28	; 61

00004b28 <__do_copy_data>:
    4b28:	17 e1       	ldi	r17, 0x17	; 23
    4b2a:	a0 e0       	ldi	r26, 0x00	; 0
    4b2c:	b1 e0       	ldi	r27, 0x01	; 1
    4b2e:	ee ec       	ldi	r30, 0xCE	; 206
    4b30:	f4 ed       	ldi	r31, 0xD4	; 212
    4b32:	01 e0       	ldi	r16, 0x01	; 1
    4b34:	0b bf       	out	0x3b, r16	; 59
    4b36:	02 c0       	rjmp	.+4      	; 0x4b3c <__do_copy_data+0x14>
    4b38:	07 90       	elpm	r0, Z+
    4b3a:	0d 92       	st	X+, r0
    4b3c:	a4 34       	cpi	r26, 0x44	; 68
    4b3e:	b1 07       	cpc	r27, r17
    4b40:	d9 f7       	brne	.-10     	; 0x4b38 <__do_copy_data+0x10>

00004b42 <__do_clear_bss>:
    4b42:	20 e2       	ldi	r18, 0x20	; 32
    4b44:	a4 e4       	ldi	r26, 0x44	; 68
    4b46:	b7 e1       	ldi	r27, 0x17	; 23
    4b48:	01 c0       	rjmp	.+2      	; 0x4b4c <.do_clear_bss_start>

00004b4a <.do_clear_bss_loop>:
    4b4a:	1d 92       	st	X+, r1

00004b4c <.do_clear_bss_start>:
    4b4c:	a6 32       	cpi	r26, 0x26	; 38
    4b4e:	b2 07       	cpc	r27, r18
    4b50:	e1 f7       	brne	.-8      	; 0x4b4a <.do_clear_bss_loop>
    4b52:	0e 94 00 e4 	call	0x1c800	; 0x1c800 <main>
    4b56:	0c 94 65 ea 	jmp	0x1d4ca	; 0x1d4ca <_exit>

00004b5a <__bad_interrupt>:
    4b5a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004b5e <chip_select>:
#endif
#ifdef AVR
    SPI0_RX(&data,1);
#endif
    return(data);
}
    4b5e:	e8 2f       	mov	r30, r24
    4b60:	e6 95       	lsr	r30
    4b62:	e6 95       	lsr	r30
    4b64:	e6 95       	lsr	r30
    4b66:	93 e0       	ldi	r25, 0x03	; 3
    4b68:	e9 9f       	mul	r30, r25
    4b6a:	f0 01       	movw	r30, r0
    4b6c:	11 24       	eor	r1, r1
    4b6e:	32 a1       	ldd	r19, Z+34	; 0x22
    4b70:	28 2f       	mov	r18, r24
    4b72:	27 70       	andi	r18, 0x07	; 7
    4b74:	81 e0       	ldi	r24, 0x01	; 1
    4b76:	90 e0       	ldi	r25, 0x00	; 0
    4b78:	01 c0       	rjmp	.+2      	; 0x4b7c <chip_select+0x1e>
    4b7a:	88 0f       	add	r24, r24
    4b7c:	2a 95       	dec	r18
    4b7e:	ea f7       	brpl	.-6      	; 0x4b7a <chip_select+0x1c>
    4b80:	98 2f       	mov	r25, r24
    4b82:	90 95       	com	r25
    4b84:	93 23       	and	r25, r19
    4b86:	92 a3       	std	Z+34, r25	; 0x22
    4b88:	91 a1       	ldd	r25, Z+33	; 0x21
    4b8a:	89 2b       	or	r24, r25
    4b8c:	81 a3       	std	Z+33, r24	; 0x21
    4b8e:	08 95       	ret

00004b90 <chip_deselect>:
    4b90:	e8 2f       	mov	r30, r24
    4b92:	e6 95       	lsr	r30
    4b94:	e6 95       	lsr	r30
    4b96:	e6 95       	lsr	r30
    4b98:	93 e0       	ldi	r25, 0x03	; 3
    4b9a:	e9 9f       	mul	r30, r25
    4b9c:	f0 01       	movw	r30, r0
    4b9e:	11 24       	eor	r1, r1
    4ba0:	32 a1       	ldd	r19, Z+34	; 0x22
    4ba2:	28 2f       	mov	r18, r24
    4ba4:	27 70       	andi	r18, 0x07	; 7
    4ba6:	81 e0       	ldi	r24, 0x01	; 1
    4ba8:	90 e0       	ldi	r25, 0x00	; 0
    4baa:	01 c0       	rjmp	.+2      	; 0x4bae <chip_deselect+0x1e>
    4bac:	88 0f       	add	r24, r24
    4bae:	2a 95       	dec	r18
    4bb0:	ea f7       	brpl	.-6      	; 0x4bac <chip_deselect+0x1c>
    4bb2:	93 2f       	mov	r25, r19
    4bb4:	98 2b       	or	r25, r24
    4bb6:	92 a3       	std	Z+34, r25	; 0x22
    4bb8:	91 a1       	ldd	r25, Z+33	; 0x21
    4bba:	89 2b       	or	r24, r25
    4bbc:	81 a3       	std	Z+33, r24	; 0x21
    4bbe:	08 95       	ret

00004bc0 <chip_select_init>:
    4bc0:	e7 cf       	rjmp	.-50     	; 0x4b90 <chip_deselect>
    4bc2:	08 95       	ret

00004bc4 <spi_end>:
    4bc4:	cf 93       	push	r28
    4bc6:	ad b7       	in	r26, 0x3d	; 61
    4bc8:	be b7       	in	r27, 0x3e	; 62
    4bca:	17 97       	sbiw	r26, 0x07	; 7
    4bcc:	0f b6       	in	r0, 0x3f	; 63
    4bce:	f8 94       	cli
    4bd0:	be bf       	out	0x3e, r27	; 62
    4bd2:	0f be       	out	0x3f, r0	; 63
    4bd4:	ad bf       	out	0x3d, r26	; 61
    4bd6:	c8 2f       	mov	r28, r24
    4bd8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4bdc:	8c 17       	cp	r24, r28
    4bde:	99 f0       	breq	.+38     	; 0x4c06 <spi_end+0x42>
    4be0:	8f 3f       	cpi	r24, 0xFF	; 255
    4be2:	89 f0       	breq	.+34     	; 0x4c06 <spi_end+0x42>
    4be4:	2c 2f       	mov	r18, r28
    4be6:	30 e0       	ldi	r19, 0x00	; 0
    4be8:	ed b7       	in	r30, 0x3d	; 61
    4bea:	fe b7       	in	r31, 0x3e	; 62
    4bec:	37 83       	std	Z+7, r19	; 0x07
    4bee:	26 83       	std	Z+6, r18	; 0x06
    4bf0:	90 e0       	ldi	r25, 0x00	; 0
    4bf2:	95 83       	std	Z+5, r25	; 0x05
    4bf4:	84 83       	std	Z+4, r24	; 0x04
    4bf6:	82 ec       	ldi	r24, 0xC2	; 194
    4bf8:	91 e0       	ldi	r25, 0x01	; 1
    4bfa:	a0 e0       	ldi	r26, 0x00	; 0
    4bfc:	81 83       	std	Z+1, r24	; 0x01
    4bfe:	92 83       	std	Z+2, r25	; 0x02
    4c00:	a3 83       	std	Z+3, r26	; 0x03
    4c02:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    4c06:	8c 2f       	mov	r24, r28
    4c08:	c3 df       	rcall	.-122    	; 0x4b90 <chip_deselect>
    4c0a:	8f ef       	ldi	r24, 0xFF	; 255
    4c0c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    4c10:	ad b7       	in	r26, 0x3d	; 61
    4c12:	be b7       	in	r27, 0x3e	; 62
    4c14:	17 96       	adiw	r26, 0x07	; 7
    4c16:	0f b6       	in	r0, 0x3f	; 63
    4c18:	f8 94       	cli
    4c1a:	be bf       	out	0x3e, r27	; 62
    4c1c:	0f be       	out	0x3f, r0	; 63
    4c1e:	ad bf       	out	0x3d, r26	; 61
    4c20:	cf 91       	pop	r28
    4c22:	08 95       	ret

00004c24 <spi_TX_buffer>:
    4c24:	cd c4       	rjmp	.+2458   	; 0x55c0 <SPI0_TX>
    4c26:	08 95       	ret

00004c28 <spi_RX_buffer>:
    4c28:	f5 c4       	rjmp	.+2538   	; 0x5614 <SPI0_RX>
    4c2a:	08 95       	ret

00004c2c <spi_TX>:

/// @brief SPI write 1 byte
/// @param[in] data: value to transmit
/// @return  void
void spi_TX(uint8_t data)
{
    4c2c:	a1 e0       	ldi	r26, 0x01	; 1
    4c2e:	b0 e0       	ldi	r27, 0x00	; 0
    4c30:	ec e1       	ldi	r30, 0x1C	; 28
    4c32:	f6 e2       	ldi	r31, 0x26	; 38
    4c34:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
    4c38:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TX(&data,1);
#endif
#ifdef AVR
    SPI0_TX(&data,1);
    4c3a:	61 e0       	ldi	r22, 0x01	; 1
    4c3c:	70 e0       	ldi	r23, 0x00	; 0
    4c3e:	ce 01       	movw	r24, r28
    4c40:	01 96       	adiw	r24, 0x01	; 1
    4c42:	be d4       	rcall	.+2428   	; 0x55c0 <SPI0_TX>
#endif
}
    4c44:	21 96       	adiw	r28, 0x01	; 1
    4c46:	e2 e0       	ldi	r30, 0x02	; 2
    4c48:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00004c4c <spi_init>:
 @return void
*/
uint8_t _cs_pin = 0xff;
uint32_t _spi_clock = -1L;
void spi_init(uint32_t clock, int pin)
{
    4c4c:	cf 92       	push	r12
    4c4e:	df 92       	push	r13
    4c50:	ef 92       	push	r14
    4c52:	ff 92       	push	r15
    4c54:	6b 01       	movw	r12, r22
    4c56:	7c 01       	movw	r14, r24
    4c58:	84 2f       	mov	r24, r20
    spi_waitReady();
    chip_deselect(pin);
    4c5a:	9a df       	rcall	.-204    	; 0x4b90 <chip_deselect>
    _cs_pin = 0xff;
    4c5c:	8f ef       	ldi	r24, 0xFF	; 255
    4c5e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>

#ifdef AVR
    SPI0_Init(clock);                             // Initialize the SPI bus - does nothing if clock unchanged
    4c62:	c7 01       	movw	r24, r14
    4c64:	b6 01       	movw	r22, r12
    4c66:	7f d4       	rcall	.+2302   	; 0x5566 <SPI0_Init>
    SPI0_Mode(0);                                 // Set the clocking mode, etc
    4c68:	80 e0       	ldi	r24, 0x00	; 0
    4c6a:	90 e0       	ldi	r25, 0x00	; 0
#endif
#ifdef ESP8266
    hspi_init(clock,0);                           // Initialize the SPI bus - does nothing if clock unchanged
#endif
    spi_TX(0xff);
    4c6c:	3c d4       	rcall	.+2168   	; 0x54e6 <SPI0_Mode>
    4c6e:	8f ef       	ldi	r24, 0xFF	; 255
    4c70:	dd df       	rcall	.-70     	; 0x4c2c <spi_TX>
    _spi_clock = clock;
    4c72:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    4c76:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    4c7a:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    4c7e:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
// waits for any prior transactions to complete before updating
    spi_waitReady();
}
    4c82:	ff 90       	pop	r15
    4c84:	ef 90       	pop	r14
    4c86:	df 90       	pop	r13
    4c88:	cf 90       	pop	r12
    4c8a:	08 95       	ret

00004c8c <spi_begin>:
 @param[in] clock: SPI clock rate
 @param[in] pin: GPIO CS pin
 @return void
*/
void spi_begin(uint32_t clock, int pin)
{
    4c8c:	cf 92       	push	r12
    4c8e:	df 92       	push	r13
    4c90:	ef 92       	push	r14
    4c92:	ff 92       	push	r15
    4c94:	cf 93       	push	r28
    4c96:	df 93       	push	r29
    4c98:	ad b7       	in	r26, 0x3d	; 61
    4c9a:	be b7       	in	r27, 0x3e	; 62
    4c9c:	17 97       	sbiw	r26, 0x07	; 7
    4c9e:	0f b6       	in	r0, 0x3f	; 63
    4ca0:	f8 94       	cli
    4ca2:	be bf       	out	0x3e, r27	; 62
    4ca4:	0f be       	out	0x3f, r0	; 63
    4ca6:	ad bf       	out	0x3d, r26	; 61
    4ca8:	6b 01       	movw	r12, r22
    4caa:	7c 01       	movw	r14, r24
    4cac:	ea 01       	movw	r28, r20
// FIXME allow nesting by using an array of clock values for each pin

//@brief if there is a prior chip select in progress flag an error
    if(_cs_pin != 0xff)
    4cae:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    4cb2:	8f 3f       	cpi	r24, 0xFF	; 255
    4cb4:	79 f0       	breq	.+30     	; 0x4cd4 <spi_begin+0x48>
    {
// This implies a bug!
        printf("cs_enable was: %d, want: %d\n", 0xff & _cs_pin, pin);
    4cb6:	ed b7       	in	r30, 0x3d	; 61
    4cb8:	fe b7       	in	r31, 0x3e	; 62
    4cba:	46 83       	std	Z+6, r20	; 0x06
    4cbc:	d7 83       	std	Z+7, r29	; 0x07
    4cbe:	90 e0       	ldi	r25, 0x00	; 0
    4cc0:	95 83       	std	Z+5, r25	; 0x05
    4cc2:	84 83       	std	Z+4, r24	; 0x04
    4cc4:	80 ee       	ldi	r24, 0xE0	; 224
    4cc6:	91 e0       	ldi	r25, 0x01	; 1
    4cc8:	a0 e0       	ldi	r26, 0x00	; 0
    4cca:	81 83       	std	Z+1, r24	; 0x01
    4ccc:	92 83       	std	Z+2, r25	; 0x02
    4cce:	a3 83       	std	Z+3, r26	; 0x03
    4cd0:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
// waits for any prior transactions to complete before updating
    spi_waitReady();

///@brief initialize pin in case it has not been done yet
///@ we cache the clock frequency seeting for multiple device support
    if(_spi_clock != clock)
    4cd4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    4cd8:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    4cdc:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    4ce0:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    4ce4:	8c 15       	cp	r24, r12
    4ce6:	9d 05       	cpc	r25, r13
    4ce8:	ae 05       	cpc	r26, r14
    4cea:	bf 05       	cpc	r27, r15
    4cec:	21 f0       	breq	.+8      	; 0x4cf6 <spi_begin+0x6a>
    {
        spi_init(clock,pin);
    4cee:	ae 01       	movw	r20, r28
    4cf0:	c7 01       	movw	r24, r14
    4cf2:	b6 01       	movw	r22, r12
    4cf4:	ab df       	rcall	.-170    	; 0x4c4c <spi_init>
    }

    chip_select(pin);
    4cf6:	8c 2f       	mov	r24, r28
    4cf8:	32 df       	rcall	.-412    	; 0x4b5e <chip_select>
    _cs_pin = pin;
    4cfa:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
}
    4cfe:	ad b7       	in	r26, 0x3d	; 61
    4d00:	be b7       	in	r27, 0x3e	; 62
    4d02:	17 96       	adiw	r26, 0x07	; 7
    4d04:	0f b6       	in	r0, 0x3f	; 63
    4d06:	f8 94       	cli
    4d08:	be bf       	out	0x3e, r27	; 62
    4d0a:	0f be       	out	0x3f, r0	; 63
    4d0c:	ad bf       	out	0x3d, r26	; 61
    4d0e:	df 91       	pop	r29
    4d10:	cf 91       	pop	r28
    4d12:	ff 90       	pop	r15
    4d14:	ef 90       	pop	r14
    4d16:	df 90       	pop	r13
    4d18:	cf 90       	pop	r12
    4d1a:	08 95       	ret

00004d1c <spi_TXRX>:

/// @brief SPI read and write 1 byte
/// @param[in] data: value to transmit
/// @return  uint8_t value read
uint8_t spi_TXRX(uint8_t data)
{
    4d1c:	a1 e0       	ldi	r26, 0x01	; 1
    4d1e:	b0 e0       	ldi	r27, 0x00	; 0
    4d20:	e4 e9       	ldi	r30, 0x94	; 148
    4d22:	f6 e2       	ldi	r31, 0x26	; 38
    4d24:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
    4d28:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TXRX(&data,1);
#endif
#ifdef AVR
    SPI0_TXRX(&data,1);
    4d2a:	61 e0       	ldi	r22, 0x01	; 1
    4d2c:	70 e0       	ldi	r23, 0x00	; 0
    4d2e:	ce 01       	movw	r24, r28
    4d30:	01 96       	adiw	r24, 0x01	; 1
    4d32:	5a d4       	rcall	.+2228   	; 0x55e8 <SPI0_TXRX>
#endif
    return(data);
}
    4d34:	89 81       	ldd	r24, Y+1	; 0x01
    4d36:	21 96       	adiw	r28, 0x01	; 1
    4d38:	e2 e0       	ldi	r30, 0x02	; 2
    4d3a:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00004d3e <set_error>:
static uint8_t error_flag = 0;
/// @brief Set error condition
/// @return  void
void set_error(uint8_t error)
{
	error_flag = error;
    4d3e:	80 93 44 17 	sts	0x1744, r24	; 0x801744 <__data_end>
    GPIO_PIN_HI(LED2);
    4d42:	2c 9a       	sbi	0x05, 4	; 5
    4d44:	24 9a       	sbi	0x04, 4	; 4
    4d46:	08 95       	ret

00004d48 <clear_error>:

/// @brief Set error condition
/// @return  void
void clear_error()
{
	error_flag = 0;
    4d48:	10 92 44 17 	sts	0x1744, r1	; 0x801744 <__data_end>
    GPIO_PIN_LOW(LED2);
    4d4c:	2c 98       	cbi	0x05, 4	; 5
    4d4e:	24 9a       	sbi	0x04, 4	; 4
    4d50:	08 95       	ret

00004d52 <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    4d52:	a2 e0       	ldi	r26, 0x02	; 2
    4d54:	b0 e0       	ldi	r27, 0x00	; 0
    4d56:	ef ea       	ldi	r30, 0xAF	; 175
    4d58:	f6 e2       	ldi	r31, 0x26	; 38
    4d5a:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    4d5e:	20 91 22 20 	lds	r18, 0x2022	; 0x802022 <__brkval>
    4d62:	30 91 23 20 	lds	r19, 0x2023	; 0x802023 <__brkval+0x1>
    4d66:	21 15       	cp	r18, r1
    4d68:	31 05       	cpc	r19, r1
    4d6a:	11 f4       	brne	.+4      	; 0x4d70 <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4d6c:	26 e2       	ldi	r18, 0x26	; 38
    4d6e:	30 e2       	ldi	r19, 0x20	; 32

    ret = (uint16_t) &v - top;
    return ( ret );
}
    4d70:	ce 01       	movw	r24, r28
    4d72:	01 96       	adiw	r24, 0x01	; 1
    4d74:	82 1b       	sub	r24, r18
    4d76:	93 0b       	sbc	r25, r19
    4d78:	22 96       	adiw	r28, 0x02	; 2
    4d7a:	e2 e0       	ldi	r30, 0x02	; 2
    4d7c:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00004d80 <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    4d80:	a9 e0       	ldi	r26, 0x09	; 9
    4d82:	b0 e0       	ldi	r27, 0x00	; 0
    4d84:	e6 ec       	ldi	r30, 0xC6	; 198
    4d86:	f6 e2       	ldi	r31, 0x26	; 38
    4d88:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    4d8c:	e2 df       	rcall	.-60     	; 0x4d52 <freeRam>
    4d8e:	99 87       	std	Y+9, r25	; 0x09
    4d90:	88 87       	std	Y+8, r24	; 0x08

    printf("Free Ram:%u\n", ram);
    4d92:	ed b7       	in	r30, 0x3d	; 61
    4d94:	fe b7       	in	r31, 0x3e	; 62
    4d96:	95 83       	std	Z+5, r25	; 0x05
    4d98:	84 83       	std	Z+4, r24	; 0x04
    4d9a:	87 e0       	ldi	r24, 0x07	; 7
    4d9c:	93 e0       	ldi	r25, 0x03	; 3
    4d9e:	a0 e0       	ldi	r26, 0x00	; 0
    4da0:	81 83       	std	Z+1, r24	; 0x01
    4da2:	92 83       	std	Z+2, r25	; 0x02
    4da4:	a3 83       	std	Z+3, r26	; 0x03
    4da6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    4daa:	8f ef       	ldi	r24, 0xFF	; 255
    4dac:	90 e4       	ldi	r25, 0x40	; 64
    4dae:	ed b7       	in	r30, 0x3d	; 61
    4db0:	fe b7       	in	r31, 0x3e	; 62
    4db2:	95 83       	std	Z+5, r25	; 0x05
    4db4:	84 83       	std	Z+4, r24	; 0x04
    4db6:	84 ef       	ldi	r24, 0xF4	; 244
    4db8:	92 e0       	ldi	r25, 0x02	; 2
    4dba:	a0 e0       	ldi	r26, 0x00	; 0
    4dbc:	81 83       	std	Z+1, r24	; 0x01
    4dbe:	92 83       	std	Z+2, r25	; 0x02
    4dc0:	a3 83       	std	Z+3, r26	; 0x03
    4dc2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    4dc6:	ce 01       	movw	r24, r28
    4dc8:	08 96       	adiw	r24, 0x08	; 8
    4dca:	ed b7       	in	r30, 0x3d	; 61
    4dcc:	fe b7       	in	r31, 0x3e	; 62
    4dce:	95 83       	std	Z+5, r25	; 0x05
    4dd0:	84 83       	std	Z+4, r24	; 0x04
    4dd2:	81 ee       	ldi	r24, 0xE1	; 225
    4dd4:	92 e0       	ldi	r25, 0x02	; 2
    4dd6:	a0 e0       	ldi	r26, 0x00	; 0
    4dd8:	81 83       	std	Z+1, r24	; 0x01
    4dda:	92 83       	std	Z+2, r25	; 0x02
    4ddc:	a3 83       	std	Z+3, r26	; 0x03
    4dde:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    4de2:	86 e2       	ldi	r24, 0x26	; 38
    4de4:	90 e2       	ldi	r25, 0x20	; 32
    4de6:	ed b7       	in	r30, 0x3d	; 61
    4de8:	fe b7       	in	r31, 0x3e	; 62
    4dea:	97 83       	std	Z+7, r25	; 0x07
    4dec:	86 83       	std	Z+6, r24	; 0x06
    4dee:	84 e4       	ldi	r24, 0x44	; 68
    4df0:	97 e1       	ldi	r25, 0x17	; 23
    4df2:	95 83       	std	Z+5, r25	; 0x05
    4df4:	84 83       	std	Z+4, r24	; 0x04
    4df6:	83 ec       	ldi	r24, 0xC3	; 195
    4df8:	92 e0       	ldi	r25, 0x02	; 2
    4dfa:	a0 e0       	ldi	r26, 0x00	; 0
    4dfc:	81 83       	std	Z+1, r24	; 0x01
    4dfe:	92 83       	std	Z+2, r25	; 0x02
    4e00:	a3 83       	std	Z+3, r26	; 0x03
    4e02:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    4e06:	84 e4       	ldi	r24, 0x44	; 68
    4e08:	97 e1       	ldi	r25, 0x17	; 23
    4e0a:	ed b7       	in	r30, 0x3d	; 61
    4e0c:	fe b7       	in	r31, 0x3e	; 62
    4e0e:	97 83       	std	Z+7, r25	; 0x07
    4e10:	86 83       	std	Z+6, r24	; 0x06
    4e12:	80 e0       	ldi	r24, 0x00	; 0
    4e14:	91 e0       	ldi	r25, 0x01	; 1
    4e16:	95 83       	std	Z+5, r25	; 0x05
    4e18:	84 83       	std	Z+4, r24	; 0x04
    4e1a:	85 ea       	ldi	r24, 0xA5	; 165
    4e1c:	92 e0       	ldi	r25, 0x02	; 2
    4e1e:	a0 e0       	ldi	r26, 0x00	; 0
    4e20:	81 83       	std	Z+1, r24	; 0x01
    4e22:	92 83       	std	Z+2, r25	; 0x02
    4e24:	a3 83       	std	Z+3, r26	; 0x03
    4e26:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    4e2a:	80 e0       	ldi	r24, 0x00	; 0
    4e2c:	90 e0       	ldi	r25, 0x00	; 0
    4e2e:	ed b7       	in	r30, 0x3d	; 61
    4e30:	fe b7       	in	r31, 0x3e	; 62
    4e32:	97 83       	std	Z+7, r25	; 0x07
    4e34:	86 83       	std	Z+6, r24	; 0x06
    4e36:	86 e2       	ldi	r24, 0x26	; 38
    4e38:	90 e2       	ldi	r25, 0x20	; 32
    4e3a:	95 83       	std	Z+5, r25	; 0x05
    4e3c:	84 83       	std	Z+4, r24	; 0x04
    4e3e:	87 e8       	ldi	r24, 0x87	; 135
    4e40:	92 e0       	ldi	r25, 0x02	; 2
    4e42:	a0 e0       	ldi	r26, 0x00	; 0
    4e44:	81 83       	std	Z+1, r24	; 0x01
    4e46:	92 83       	std	Z+2, r25	; 0x02
    4e48:	a3 83       	std	Z+3, r26	; 0x03
    4e4a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    4e4e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    4e52:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    4e56:	ed b7       	in	r30, 0x3d	; 61
    4e58:	fe b7       	in	r31, 0x3e	; 62
    4e5a:	97 83       	std	Z+7, r25	; 0x07
    4e5c:	86 83       	std	Z+6, r24	; 0x06
    4e5e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    4e62:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4e66:	95 83       	std	Z+5, r25	; 0x05
    4e68:	84 83       	std	Z+4, r24	; 0x04
    4e6a:	89 e6       	ldi	r24, 0x69	; 105
    4e6c:	92 e0       	ldi	r25, 0x02	; 2
    4e6e:	a0 e0       	ldi	r26, 0x00	; 0
    4e70:	81 83       	std	Z+1, r24	; 0x01
    4e72:	92 83       	std	Z+2, r25	; 0x02
    4e74:	a3 83       	std	Z+3, r26	; 0x03
    4e76:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    4e7a:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <__brkval>
    4e7e:	90 91 23 20 	lds	r25, 0x2023	; 0x802023 <__brkval+0x1>
    4e82:	ed b7       	in	r30, 0x3d	; 61
    4e84:	fe b7       	in	r31, 0x3e	; 62
    4e86:	95 83       	std	Z+5, r25	; 0x05
    4e88:	84 83       	std	Z+4, r24	; 0x04
    4e8a:	85 e5       	ldi	r24, 0x55	; 85
    4e8c:	92 e0       	ldi	r25, 0x02	; 2
    4e8e:	a0 e0       	ldi	r26, 0x00	; 0
    4e90:	81 83       	std	Z+1, r24	; 0x01
    4e92:	92 83       	std	Z+2, r25	; 0x02
    4e94:	a3 83       	std	Z+3, r26	; 0x03
    4e96:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

}
    4e9a:	29 96       	adiw	r28, 0x09	; 9
    4e9c:	e2 e0       	ldi	r30, 0x02	; 2
    4e9e:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00004ea2 <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    4ea2:	ef 92       	push	r14
    4ea4:	ff 92       	push	r15
    4ea6:	0f 93       	push	r16
    4ea8:	1f 93       	push	r17
    4eaa:	cf 93       	push	r28
    4eac:	df 93       	push	r29
    4eae:	ad b7       	in	r26, 0x3d	; 61
    4eb0:	be b7       	in	r27, 0x3e	; 62
    4eb2:	17 97       	sbiw	r26, 0x07	; 7
    4eb4:	0f b6       	in	r0, 0x3f	; 63
    4eb6:	f8 94       	cli
    4eb8:	be bf       	out	0x3e, r27	; 62
    4eba:	0f be       	out	0x3f, r0	; 63
    4ebc:	ad bf       	out	0x3d, r26	; 61
    4ebe:	8c 01       	movw	r16, r24
    4ec0:	7b 01       	movw	r14, r22
    void *p = calloc(size, elements);
    4ec2:	0e 94 23 e9 	call	0x1d246	; 0x1d246 <calloc>
    4ec6:	ec 01       	movw	r28, r24
    if(!p)
    4ec8:	89 2b       	or	r24, r25
    4eca:	71 f4       	brne	.+28     	; 0x4ee8 <safecalloc+0x46>
    {
        printf("safecalloc(%d,%d) failed!\n", size, elements);
    4ecc:	ed b7       	in	r30, 0x3d	; 61
    4ece:	fe b7       	in	r31, 0x3e	; 62
    4ed0:	f7 82       	std	Z+7, r15	; 0x07
    4ed2:	e6 82       	std	Z+6, r14	; 0x06
    4ed4:	15 83       	std	Z+5, r17	; 0x05
    4ed6:	04 83       	std	Z+4, r16	; 0x04
    4ed8:	8a e3       	ldi	r24, 0x3A	; 58
    4eda:	92 e0       	ldi	r25, 0x02	; 2
    4edc:	a0 e0       	ldi	r26, 0x00	; 0
    4ede:	81 83       	std	Z+1, r24	; 0x01
    4ee0:	92 83       	std	Z+2, r25	; 0x02
    4ee2:	a3 83       	std	Z+3, r26	; 0x03
    4ee4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    }
    return(p);
}
    4ee8:	ce 01       	movw	r24, r28
    4eea:	cd b7       	in	r28, 0x3d	; 61
    4eec:	de b7       	in	r29, 0x3e	; 62
    4eee:	27 96       	adiw	r28, 0x07	; 7
    4ef0:	e6 e0       	ldi	r30, 0x06	; 6
    4ef2:	0c 94 8e e6 	jmp	0x1cd1c	; 0x1cd1c <__epilogue_restores__+0x18>

00004ef6 <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    4ef6:	0f 93       	push	r16
    4ef8:	1f 93       	push	r17
    4efa:	cf 93       	push	r28
    4efc:	df 93       	push	r29
    4efe:	00 d0       	rcall	.+0      	; 0x4f00 <safemalloc+0xa>
    4f00:	00 d0       	rcall	.+0      	; 0x4f02 <safemalloc+0xc>
    4f02:	1f 92       	push	r1
    4f04:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    4f06:	61 e0       	ldi	r22, 0x01	; 1
    4f08:	70 e0       	ldi	r23, 0x00	; 0
    4f0a:	0e 94 23 e9 	call	0x1d246	; 0x1d246 <calloc>
    4f0e:	ec 01       	movw	r28, r24
    if(!p)
    4f10:	89 2b       	or	r24, r25
    4f12:	61 f4       	brne	.+24     	; 0x4f2c <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    4f14:	ed b7       	in	r30, 0x3d	; 61
    4f16:	fe b7       	in	r31, 0x3e	; 62
    4f18:	15 83       	std	Z+5, r17	; 0x05
    4f1a:	04 83       	std	Z+4, r16	; 0x04
    4f1c:	82 e2       	ldi	r24, 0x22	; 34
    4f1e:	92 e0       	ldi	r25, 0x02	; 2
    4f20:	a0 e0       	ldi	r26, 0x00	; 0
    4f22:	81 83       	std	Z+1, r24	; 0x01
    4f24:	92 83       	std	Z+2, r25	; 0x02
    4f26:	a3 83       	std	Z+3, r26	; 0x03
    4f28:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    }
    return(p);
}
    4f2c:	ce 01       	movw	r24, r28
    4f2e:	cd b7       	in	r28, 0x3d	; 61
    4f30:	de b7       	in	r29, 0x3e	; 62
    4f32:	25 96       	adiw	r28, 0x05	; 5
    4f34:	e4 e0       	ldi	r30, 0x04	; 4
    4f36:	0c 94 90 e6 	jmp	0x1cd20	; 0x1cd20 <__epilogue_restores__+0x1c>

00004f3a <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    4f3a:	ad b7       	in	r26, 0x3d	; 61
    4f3c:	be b7       	in	r27, 0x3e	; 62
    4f3e:	17 97       	sbiw	r26, 0x07	; 7
    4f40:	0f b6       	in	r0, 0x3f	; 63
    4f42:	f8 94       	cli
    4f44:	be bf       	out	0x3e, r27	; 62
    4f46:	0f be       	out	0x3f, r0	; 63
    4f48:	ad bf       	out	0x3d, r26	; 61
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    4f4a:	00 97       	sbiw	r24, 0x00	; 0
    4f4c:	11 f1       	breq	.+68     	; 0x4f92 <safefree+0x58>
        return;

    if(__brkval)
    4f4e:	20 91 22 20 	lds	r18, 0x2022	; 0x802022 <__brkval>
    4f52:	30 91 23 20 	lds	r19, 0x2023	; 0x802023 <__brkval+0x1>
    4f56:	21 15       	cp	r18, r1
    4f58:	31 05       	cpc	r19, r1
    4f5a:	11 f4       	brne	.+4      	; 0x4f60 <safefree+0x26>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4f5c:	26 e2       	ldi	r18, 0x26	; 38
    4f5e:	30 e2       	ldi	r19, 0x20	; 32

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    4f60:	40 e2       	ldi	r20, 0x20	; 32
    4f62:	86 32       	cpi	r24, 0x26	; 38
    4f64:	94 07       	cpc	r25, r20
    4f66:	30 f0       	brcs	.+12     	; 0x4f74 <safefree+0x3a>
    4f68:	28 17       	cp	r18, r24
    4f6a:	39 07       	cpc	r19, r25
    4f6c:	18 f0       	brcs	.+6      	; 0x4f74 <safefree+0x3a>
        ((uint16_t) p <= top) )
    {
        free(p);
    4f6e:	0e 94 d5 e9 	call	0x1d3aa	; 0x1d3aa <free>
        return;
    4f72:	0f c0       	rjmp	.+30     	; 0x4f92 <safefree+0x58>
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    4f74:	ed b7       	in	r30, 0x3d	; 61
    4f76:	fe b7       	in	r31, 0x3e	; 62
    4f78:	37 83       	std	Z+7, r19	; 0x07
    4f7a:	26 83       	std	Z+6, r18	; 0x06
    4f7c:	95 83       	std	Z+5, r25	; 0x05
    4f7e:	84 83       	std	Z+4, r24	; 0x04
    4f80:	8d ef       	ldi	r24, 0xFD	; 253
    4f82:	91 e0       	ldi	r25, 0x01	; 1
    4f84:	a0 e0       	ldi	r26, 0x00	; 0
    4f86:	81 83       	std	Z+1, r24	; 0x01
    4f88:	92 83       	std	Z+2, r25	; 0x02
    4f8a:	a3 83       	std	Z+3, r26	; 0x03
    4f8c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    PrintFree();
    4f90:	f7 de       	rcall	.-530    	; 0x4d80 <PrintFree>
}
    4f92:	ad b7       	in	r26, 0x3d	; 61
    4f94:	be b7       	in	r27, 0x3e	; 62
    4f96:	17 96       	adiw	r26, 0x07	; 7
    4f98:	0f b6       	in	r0, 0x3f	; 63
    4f9a:	f8 94       	cli
    4f9c:	be bf       	out	0x3e, r27	; 62
    4f9e:	0f be       	out	0x3f, r0	; 63
    4fa0:	ad bf       	out	0x3d, r26	; 61
    4fa2:	08 95       	ret

00004fa4 <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    4fa4:	64 36       	cpi	r22, 0x64	; 100
    4fa6:	71 05       	cpc	r23, r1
    4fa8:	81 05       	cpc	r24, r1
    4faa:	91 05       	cpc	r25, r1
    4fac:	58 f0       	brcs	.+22     	; 0x4fc4 <delayus+0x20>
    {
        us -= 100U;
    4fae:	64 56       	subi	r22, 0x64	; 100
    4fb0:	71 09       	sbc	r23, r1
    4fb2:	81 09       	sbc	r24, r1
    4fb4:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4fb6:	e3 ef       	ldi	r30, 0xF3	; 243
    4fb8:	f1 e0       	ldi	r31, 0x01	; 1
    4fba:	31 97       	sbiw	r30, 0x01	; 1
    4fbc:	f1 f7       	brne	.-4      	; 0x4fba <delayus+0x16>
    4fbe:	00 c0       	rjmp	.+0      	; 0x4fc0 <delayus+0x1c>
    4fc0:	00 00       	nop
    4fc2:	f0 cf       	rjmp	.-32     	; 0x4fa4 <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    4fc4:	6a 30       	cpi	r22, 0x0A	; 10
    4fc6:	71 05       	cpc	r23, r1
    4fc8:	81 05       	cpc	r24, r1
    4fca:	91 05       	cpc	r25, r1
    4fcc:	48 f0       	brcs	.+18     	; 0x4fe0 <delayus+0x3c>
    {
        us -= 10U;
    4fce:	6a 50       	subi	r22, 0x0A	; 10
    4fd0:	71 09       	sbc	r23, r1
    4fd2:	81 09       	sbc	r24, r1
    4fd4:	91 09       	sbc	r25, r1
    4fd6:	f2 e4       	ldi	r31, 0x42	; 66
    4fd8:	fa 95       	dec	r31
    4fda:	f1 f7       	brne	.-4      	; 0x4fd8 <delayus+0x34>
    4fdc:	00 c0       	rjmp	.+0      	; 0x4fde <delayus+0x3a>
    4fde:	f2 cf       	rjmp	.-28     	; 0x4fc4 <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    4fe0:	61 15       	cp	r22, r1
    4fe2:	71 05       	cpc	r23, r1
    4fe4:	81 05       	cpc	r24, r1
    4fe6:	91 05       	cpc	r25, r1
    4fe8:	49 f0       	breq	.+18     	; 0x4ffc <delayus+0x58>
    {
        --us;
    4fea:	61 50       	subi	r22, 0x01	; 1
    4fec:	71 09       	sbc	r23, r1
    4fee:	81 09       	sbc	r24, r1
    4ff0:	91 09       	sbc	r25, r1
    4ff2:	26 e0       	ldi	r18, 0x06	; 6
    4ff4:	2a 95       	dec	r18
    4ff6:	f1 f7       	brne	.-4      	; 0x4ff4 <delayus+0x50>
    4ff8:	00 c0       	rjmp	.+0      	; 0x4ffa <delayus+0x56>
    4ffa:	f2 cf       	rjmp	.-28     	; 0x4fe0 <delayus+0x3c>
        _delay_us(1);
    }
}
    4ffc:	08 95       	ret

00004ffe <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    4ffe:	61 15       	cp	r22, r1
    5000:	71 05       	cpc	r23, r1
    5002:	81 05       	cpc	r24, r1
    5004:	91 05       	cpc	r25, r1
    5006:	09 f4       	brne	.+2      	; 0x500a <delayms+0xc>
    5008:	41 c0       	rjmp	.+130    	; 0x508c <delayms+0x8e>
    500a:	e3 ef       	ldi	r30, 0xF3	; 243
    500c:	f1 e0       	ldi	r31, 0x01	; 1
    500e:	31 97       	sbiw	r30, 0x01	; 1
    5010:	f1 f7       	brne	.-4      	; 0x500e <delayms+0x10>
    5012:	00 c0       	rjmp	.+0      	; 0x5014 <delayms+0x16>
    5014:	00 00       	nop
    5016:	e3 ef       	ldi	r30, 0xF3	; 243
    5018:	f1 e0       	ldi	r31, 0x01	; 1
    501a:	31 97       	sbiw	r30, 0x01	; 1
    501c:	f1 f7       	brne	.-4      	; 0x501a <delayms+0x1c>
    501e:	00 c0       	rjmp	.+0      	; 0x5020 <delayms+0x22>
    5020:	00 00       	nop
    5022:	e3 ef       	ldi	r30, 0xF3	; 243
    5024:	f1 e0       	ldi	r31, 0x01	; 1
    5026:	31 97       	sbiw	r30, 0x01	; 1
    5028:	f1 f7       	brne	.-4      	; 0x5026 <delayms+0x28>
    502a:	00 c0       	rjmp	.+0      	; 0x502c <delayms+0x2e>
    502c:	00 00       	nop
    502e:	e3 ef       	ldi	r30, 0xF3	; 243
    5030:	f1 e0       	ldi	r31, 0x01	; 1
    5032:	31 97       	sbiw	r30, 0x01	; 1
    5034:	f1 f7       	brne	.-4      	; 0x5032 <delayms+0x34>
    5036:	00 c0       	rjmp	.+0      	; 0x5038 <delayms+0x3a>
    5038:	00 00       	nop
    503a:	e3 ef       	ldi	r30, 0xF3	; 243
    503c:	f1 e0       	ldi	r31, 0x01	; 1
    503e:	31 97       	sbiw	r30, 0x01	; 1
    5040:	f1 f7       	brne	.-4      	; 0x503e <delayms+0x40>
    5042:	00 c0       	rjmp	.+0      	; 0x5044 <delayms+0x46>
    5044:	00 00       	nop
    5046:	e3 ef       	ldi	r30, 0xF3	; 243
    5048:	f1 e0       	ldi	r31, 0x01	; 1
    504a:	31 97       	sbiw	r30, 0x01	; 1
    504c:	f1 f7       	brne	.-4      	; 0x504a <delayms+0x4c>
    504e:	00 c0       	rjmp	.+0      	; 0x5050 <delayms+0x52>
    5050:	00 00       	nop
    5052:	e3 ef       	ldi	r30, 0xF3	; 243
    5054:	f1 e0       	ldi	r31, 0x01	; 1
    5056:	31 97       	sbiw	r30, 0x01	; 1
    5058:	f1 f7       	brne	.-4      	; 0x5056 <delayms+0x58>
    505a:	00 c0       	rjmp	.+0      	; 0x505c <delayms+0x5e>
    505c:	00 00       	nop
    505e:	e3 ef       	ldi	r30, 0xF3	; 243
    5060:	f1 e0       	ldi	r31, 0x01	; 1
    5062:	31 97       	sbiw	r30, 0x01	; 1
    5064:	f1 f7       	brne	.-4      	; 0x5062 <delayms+0x64>
    5066:	00 c0       	rjmp	.+0      	; 0x5068 <delayms+0x6a>
    5068:	00 00       	nop
    506a:	e3 ef       	ldi	r30, 0xF3	; 243
    506c:	f1 e0       	ldi	r31, 0x01	; 1
    506e:	31 97       	sbiw	r30, 0x01	; 1
    5070:	f1 f7       	brne	.-4      	; 0x506e <delayms+0x70>
    5072:	00 c0       	rjmp	.+0      	; 0x5074 <delayms+0x76>
    5074:	00 00       	nop
    5076:	e3 ef       	ldi	r30, 0xF3	; 243
    5078:	f1 e0       	ldi	r31, 0x01	; 1
    507a:	31 97       	sbiw	r30, 0x01	; 1
    507c:	f1 f7       	brne	.-4      	; 0x507a <delayms+0x7c>
    507e:	00 c0       	rjmp	.+0      	; 0x5080 <delayms+0x82>
    5080:	00 00       	nop
    5082:	61 50       	subi	r22, 0x01	; 1
    5084:	71 09       	sbc	r23, r1
    5086:	81 09       	sbc	r24, r1
    5088:	91 09       	sbc	r25, r1
    508a:	b9 cf       	rjmp	.-142    	; 0x4ffe <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    508c:	08 95       	ret

0000508e <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    508e:	81 11       	cpse	r24, r1
    5090:	0e c0       	rjmp	.+28     	; 0x50ae <uart_rx_flush+0x20>
    5092:	f8 94       	cli
    5094:	10 92 e9 19 	sts	0x19E9, r1	; 0x8019e9 <uarts+0x4>
    5098:	10 92 e8 19 	sts	0x19E8, r1	; 0x8019e8 <uarts+0x3>
    509c:	10 92 e5 19 	sts	0x19E5, r1	; 0x8019e5 <uarts>
    50a0:	10 92 e6 19 	sts	0x19E6, r1	; 0x8019e6 <uarts+0x1>
    50a4:	10 92 e7 19 	sts	0x19E7, r1	; 0x8019e7 <uarts+0x2>
    50a8:	10 92 ea 19 	sts	0x19EA, r1	; 0x8019ea <uarts+0x5>
    50ac:	78 94       	sei
    50ae:	08 95       	ret

000050b0 <uart_ubr>:
    50b0:	4f 92       	push	r4
    50b2:	5f 92       	push	r5
    50b4:	6f 92       	push	r6
    50b6:	7f 92       	push	r7
    50b8:	8f 92       	push	r8
    50ba:	9f 92       	push	r9
    50bc:	af 92       	push	r10
    50be:	bf 92       	push	r11
    50c0:	cf 92       	push	r12
    50c2:	df 92       	push	r13
    50c4:	ef 92       	push	r14
    50c6:	ff 92       	push	r15
    50c8:	cf 93       	push	r28
    50ca:	df 93       	push	r29
    50cc:	5a 01       	movw	r10, r20
    50ce:	e9 01       	movw	r28, r18
    50d0:	0e 94 c1 e7 	call	0x1cf82	; 0x1cf82 <__floatunsisf>
    50d4:	2b 01       	movw	r4, r22
    50d6:	3c 01       	movw	r6, r24
    50d8:	20 e0       	ldi	r18, 0x00	; 0
    50da:	30 e0       	ldi	r19, 0x00	; 0
    50dc:	40 e0       	ldi	r20, 0x00	; 0
    50de:	51 e4       	ldi	r21, 0x41	; 65
    50e0:	0e 94 77 e8 	call	0x1d0ee	; 0x1d0ee <__mulsf3>
    50e4:	9b 01       	movw	r18, r22
    50e6:	ac 01       	movw	r20, r24
    50e8:	60 e8       	ldi	r22, 0x80	; 128
    50ea:	76 e9       	ldi	r23, 0x96	; 150
    50ec:	88 e9       	ldi	r24, 0x98	; 152
    50ee:	9b e4       	ldi	r25, 0x4B	; 75
    50f0:	0e 94 28 e7 	call	0x1ce50	; 0x1ce50 <__divsf3>
    50f4:	20 e0       	ldi	r18, 0x00	; 0
    50f6:	30 e0       	ldi	r19, 0x00	; 0
    50f8:	40 e8       	ldi	r20, 0x80	; 128
    50fa:	5f e3       	ldi	r21, 0x3F	; 63
    50fc:	0e 94 bf e6 	call	0x1cd7e	; 0x1cd7e <__subsf3>
    5100:	0e 94 da e8 	call	0x1d1b4	; 0x1d1b4 <round>
    5104:	0e 94 95 e7 	call	0x1cf2a	; 0x1cf2a <__fixunssfsi>
    5108:	6b 01       	movw	r12, r22
    510a:	7c 01       	movw	r14, r24
    510c:	c1 14       	cp	r12, r1
    510e:	80 e1       	ldi	r24, 0x10	; 16
    5110:	d8 06       	cpc	r13, r24
    5112:	e1 04       	cpc	r14, r1
    5114:	f1 04       	cpc	r15, r1
    5116:	58 f4       	brcc	.+22     	; 0x512e <uart_ubr+0x7e>
    5118:	81 e0       	ldi	r24, 0x01	; 1
    511a:	90 e0       	ldi	r25, 0x00	; 0
    511c:	f5 01       	movw	r30, r10
    511e:	91 83       	std	Z+1, r25	; 0x01
    5120:	80 83       	st	Z, r24
    5122:	81 2c       	mov	r8, r1
    5124:	91 2c       	mov	r9, r1
    5126:	a1 2c       	mov	r10, r1
    5128:	21 e4       	ldi	r18, 0x41	; 65
    512a:	b2 2e       	mov	r11, r18
    512c:	31 c0       	rjmp	.+98     	; 0x5190 <uart_ubr+0xe0>
    512e:	f5 01       	movw	r30, r10
    5130:	11 82       	std	Z+1, r1	; 0x01
    5132:	10 82       	st	Z, r1
    5134:	20 e0       	ldi	r18, 0x00	; 0
    5136:	30 e0       	ldi	r19, 0x00	; 0
    5138:	40 e8       	ldi	r20, 0x80	; 128
    513a:	51 e4       	ldi	r21, 0x41	; 65
    513c:	c3 01       	movw	r24, r6
    513e:	b2 01       	movw	r22, r4
    5140:	0e 94 77 e8 	call	0x1d0ee	; 0x1d0ee <__mulsf3>
    5144:	9b 01       	movw	r18, r22
    5146:	ac 01       	movw	r20, r24
    5148:	60 e8       	ldi	r22, 0x80	; 128
    514a:	76 e9       	ldi	r23, 0x96	; 150
    514c:	88 e9       	ldi	r24, 0x98	; 152
    514e:	9b e4       	ldi	r25, 0x4B	; 75
    5150:	0e 94 28 e7 	call	0x1ce50	; 0x1ce50 <__divsf3>
    5154:	20 e0       	ldi	r18, 0x00	; 0
    5156:	30 e0       	ldi	r19, 0x00	; 0
    5158:	40 e8       	ldi	r20, 0x80	; 128
    515a:	5f e3       	ldi	r21, 0x3F	; 63
    515c:	0e 94 bf e6 	call	0x1cd7e	; 0x1cd7e <__subsf3>
    5160:	0e 94 da e8 	call	0x1d1b4	; 0x1d1b4 <round>
    5164:	0e 94 95 e7 	call	0x1cf2a	; 0x1cf2a <__fixunssfsi>
    5168:	6b 01       	movw	r12, r22
    516a:	7c 01       	movw	r14, r24
    516c:	81 2c       	mov	r8, r1
    516e:	91 2c       	mov	r9, r1
    5170:	90 e8       	ldi	r25, 0x80	; 128
    5172:	a9 2e       	mov	r10, r25
    5174:	91 e4       	ldi	r25, 0x41	; 65
    5176:	b9 2e       	mov	r11, r25
    5178:	c1 14       	cp	r12, r1
    517a:	f0 e1       	ldi	r31, 0x10	; 16
    517c:	df 06       	cpc	r13, r31
    517e:	e1 04       	cpc	r14, r1
    5180:	f1 04       	cpc	r15, r1
    5182:	30 f0       	brcs	.+12     	; 0x5190 <uart_ubr+0xe0>
    5184:	cc 24       	eor	r12, r12
    5186:	ca 94       	dec	r12
    5188:	8f e0       	ldi	r24, 0x0F	; 15
    518a:	d8 2e       	mov	r13, r24
    518c:	e1 2c       	mov	r14, r1
    518e:	f1 2c       	mov	r15, r1
    5190:	c7 01       	movw	r24, r14
    5192:	b6 01       	movw	r22, r12
    5194:	6f 5f       	subi	r22, 0xFF	; 255
    5196:	7f 4f       	sbci	r23, 0xFF	; 255
    5198:	8f 4f       	sbci	r24, 0xFF	; 255
    519a:	9f 4f       	sbci	r25, 0xFF	; 255
    519c:	0e 94 c1 e7 	call	0x1cf82	; 0x1cf82 <__floatunsisf>
    51a0:	a5 01       	movw	r20, r10
    51a2:	94 01       	movw	r18, r8
    51a4:	0e 94 77 e8 	call	0x1d0ee	; 0x1d0ee <__mulsf3>
    51a8:	9b 01       	movw	r18, r22
    51aa:	ac 01       	movw	r20, r24
    51ac:	60 e8       	ldi	r22, 0x80	; 128
    51ae:	76 e9       	ldi	r23, 0x96	; 150
    51b0:	88 e9       	ldi	r24, 0x98	; 152
    51b2:	9b e4       	ldi	r25, 0x4B	; 75
    51b4:	0e 94 28 e7 	call	0x1ce50	; 0x1ce50 <__divsf3>
    51b8:	0e 94 95 e7 	call	0x1cf2a	; 0x1cf2a <__fixunssfsi>
    51bc:	68 83       	st	Y, r22
    51be:	79 83       	std	Y+1, r23	; 0x01
    51c0:	8a 83       	std	Y+2, r24	; 0x02
    51c2:	9b 83       	std	Y+3, r25	; 0x03
    51c4:	c6 01       	movw	r24, r12
    51c6:	df 91       	pop	r29
    51c8:	cf 91       	pop	r28
    51ca:	ff 90       	pop	r15
    51cc:	ef 90       	pop	r14
    51ce:	df 90       	pop	r13
    51d0:	cf 90       	pop	r12
    51d2:	bf 90       	pop	r11
    51d4:	af 90       	pop	r10
    51d6:	9f 90       	pop	r9
    51d8:	8f 90       	pop	r8
    51da:	7f 90       	pop	r7
    51dc:	6f 90       	pop	r6
    51de:	5f 90       	pop	r5
    51e0:	4f 90       	pop	r4
    51e2:	08 95       	ret

000051e4 <uart_init>:
    51e4:	a6 e0       	ldi	r26, 0x06	; 6
    51e6:	b0 e0       	ldi	r27, 0x00	; 0
    51e8:	e8 ef       	ldi	r30, 0xF8	; 248
    51ea:	f8 e2       	ldi	r31, 0x28	; 40
    51ec:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
    51f0:	1e 82       	std	Y+6, r1	; 0x06
    51f2:	1d 82       	std	Y+5, r1	; 0x05
    51f4:	81 11       	cpse	r24, r1
    51f6:	36 c0       	rjmp	.+108    	; 0x5264 <uart_init+0x80>
    51f8:	cb 01       	movw	r24, r22
    51fa:	ba 01       	movw	r22, r20
    51fc:	9e 01       	movw	r18, r28
    51fe:	2f 5f       	subi	r18, 0xFF	; 255
    5200:	3f 4f       	sbci	r19, 0xFF	; 255
    5202:	ae 01       	movw	r20, r28
    5204:	4b 5f       	subi	r20, 0xFB	; 251
    5206:	5f 4f       	sbci	r21, 0xFF	; 255
    5208:	53 df       	rcall	.-346    	; 0x50b0 <uart_ubr>
    520a:	f8 94       	cli
    520c:	10 92 e9 19 	sts	0x19E9, r1	; 0x8019e9 <uarts+0x4>
    5210:	10 92 e8 19 	sts	0x19E8, r1	; 0x8019e8 <uarts+0x3>
    5214:	10 92 e5 19 	sts	0x19E5, r1	; 0x8019e5 <uarts>
    5218:	10 92 e6 19 	sts	0x19E6, r1	; 0x8019e6 <uarts+0x1>
    521c:	10 92 e7 19 	sts	0x19E7, r1	; 0x8019e7 <uarts+0x2>
    5220:	10 92 ea 19 	sts	0x19EA, r1	; 0x8019ea <uarts+0x5>
    5224:	78 94       	sei
    5226:	f8 94       	cli
    5228:	58 9a       	sbi	0x0b, 0	; 11
    522a:	59 9a       	sbi	0x0b, 1	; 11
    522c:	50 98       	cbi	0x0a, 0	; 10
    522e:	51 9a       	sbi	0x0a, 1	; 10
    5230:	28 e9       	ldi	r18, 0x98	; 152
    5232:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    5236:	2d 81       	ldd	r18, Y+5	; 0x05
    5238:	3e 81       	ldd	r19, Y+6	; 0x06
    523a:	23 2b       	or	r18, r19
    523c:	19 f0       	breq	.+6      	; 0x5244 <uart_init+0x60>
    523e:	22 e0       	ldi	r18, 0x02	; 2
    5240:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5244:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    5248:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    524c:	78 94       	sei
    524e:	6b ee       	ldi	r22, 0xEB	; 235
    5250:	79 e2       	ldi	r23, 0x29	; 41
    5252:	80 e0       	ldi	r24, 0x00	; 0
    5254:	9a e2       	ldi	r25, 0x2A	; 42
    5256:	0e 94 4a 78 	call	0xf094	; 0xf094 <fdevopen>
    525a:	69 81       	ldd	r22, Y+1	; 0x01
    525c:	7a 81       	ldd	r23, Y+2	; 0x02
    525e:	8b 81       	ldd	r24, Y+3	; 0x03
    5260:	9c 81       	ldd	r25, Y+4	; 0x04
    5262:	03 c0       	rjmp	.+6      	; 0x526a <uart_init+0x86>
    5264:	60 e0       	ldi	r22, 0x00	; 0
    5266:	70 e0       	ldi	r23, 0x00	; 0
    5268:	cb 01       	movw	r24, r22
    526a:	26 96       	adiw	r28, 0x06	; 6
    526c:	e2 e0       	ldi	r30, 0x02	; 2
    526e:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00005272 <uart_rx_interrupt>:
    5272:	cf 93       	push	r28
    5274:	df 93       	push	r29
    5276:	27 e5       	ldi	r18, 0x57	; 87
    5278:	82 9f       	mul	r24, r18
    527a:	c0 01       	movw	r24, r0
    527c:	11 24       	eor	r1, r1
    527e:	fc 01       	movw	r30, r24
    5280:	eb 51       	subi	r30, 0x1B	; 27
    5282:	f6 4e       	sbci	r31, 0xE6	; 230
    5284:	83 81       	ldd	r24, Z+3	; 0x03
    5286:	94 81       	ldd	r25, Z+4	; 0x04
    5288:	80 35       	cpi	r24, 0x50	; 80
    528a:	91 05       	cpc	r25, r1
    528c:	84 f4       	brge	.+32     	; 0x52ae <uart_rx_interrupt+0x3c>
    528e:	30 81       	ld	r19, Z
    5290:	21 e0       	ldi	r18, 0x01	; 1
    5292:	23 0f       	add	r18, r19
    5294:	20 83       	st	Z, r18
    5296:	ef 01       	movw	r28, r30
    5298:	c3 0f       	add	r28, r19
    529a:	d1 1d       	adc	r29, r1
    529c:	6f 77       	andi	r22, 0x7F	; 127
    529e:	6e 83       	std	Y+6, r22	; 0x06
    52a0:	01 96       	adiw	r24, 0x01	; 1
    52a2:	94 83       	std	Z+4, r25	; 0x04
    52a4:	83 83       	std	Z+3, r24	; 0x03
    52a6:	20 35       	cpi	r18, 0x50	; 80
    52a8:	28 f0       	brcs	.+10     	; 0x52b4 <uart_rx_interrupt+0x42>
    52aa:	10 82       	st	Z, r1
    52ac:	03 c0       	rjmp	.+6      	; 0x52b4 <uart_rx_interrupt+0x42>
    52ae:	85 81       	ldd	r24, Z+5	; 0x05
    52b0:	81 60       	ori	r24, 0x01	; 1
    52b2:	85 83       	std	Z+5, r24	; 0x05
    52b4:	df 91       	pop	r29
    52b6:	cf 91       	pop	r28
    52b8:	08 95       	ret

000052ba <__vector_20>:
    52ba:	1f 92       	push	r1
    52bc:	0f 92       	push	r0
    52be:	0f b6       	in	r0, 0x3f	; 63
    52c0:	0f 92       	push	r0
    52c2:	11 24       	eor	r1, r1
    52c4:	0b b6       	in	r0, 0x3b	; 59
    52c6:	0f 92       	push	r0
    52c8:	2f 93       	push	r18
    52ca:	3f 93       	push	r19
    52cc:	4f 93       	push	r20
    52ce:	5f 93       	push	r21
    52d0:	6f 93       	push	r22
    52d2:	7f 93       	push	r23
    52d4:	8f 93       	push	r24
    52d6:	9f 93       	push	r25
    52d8:	af 93       	push	r26
    52da:	bf 93       	push	r27
    52dc:	ef 93       	push	r30
    52de:	ff 93       	push	r31
    52e0:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    52e4:	80 e0       	ldi	r24, 0x00	; 0
    52e6:	c5 df       	rcall	.-118    	; 0x5272 <uart_rx_interrupt>
    52e8:	ff 91       	pop	r31
    52ea:	ef 91       	pop	r30
    52ec:	bf 91       	pop	r27
    52ee:	af 91       	pop	r26
    52f0:	9f 91       	pop	r25
    52f2:	8f 91       	pop	r24
    52f4:	7f 91       	pop	r23
    52f6:	6f 91       	pop	r22
    52f8:	5f 91       	pop	r21
    52fa:	4f 91       	pop	r20
    52fc:	3f 91       	pop	r19
    52fe:	2f 91       	pop	r18
    5300:	0f 90       	pop	r0
    5302:	0b be       	out	0x3b, r0	; 59
    5304:	0f 90       	pop	r0
    5306:	0f be       	out	0x3f, r0	; 63
    5308:	0f 90       	pop	r0
    530a:	1f 90       	pop	r1
    530c:	18 95       	reti

0000530e <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    530e:	81 11       	cpse	r24, r1
    5310:	07 c0       	rjmp	.+14     	; 0x5320 <uart_rx_count+0x12>
        return(EOF);

    cli();
    5312:	f8 94       	cli

    count = uarts[uart].rx_count;
    5314:	80 91 e8 19 	lds	r24, 0x19E8	; 0x8019e8 <uarts+0x3>
    5318:	90 91 e9 19 	lds	r25, 0x19E9	; 0x8019e9 <uarts+0x4>

    sei();
    531c:	78 94       	sei

    return (count );
    531e:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    5320:	8f ef       	ldi	r24, 0xFF	; 255
    5322:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    5324:	08 95       	ret

00005326 <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    5326:	81 11       	cpse	r24, r1
    5328:	21 c0       	rjmp	.+66     	; 0x536c <uart_get_tail+0x46>
    {
        return(EOF);
    }

    while(uart_rx_count(uart) < 1)
    532a:	80 e0       	ldi	r24, 0x00	; 0
    532c:	f0 df       	rcall	.-32     	; 0x530e <uart_rx_count>
    532e:	18 16       	cp	r1, r24
    5330:	19 06       	cpc	r1, r25
    5332:	dc f7       	brge	.-10     	; 0x532a <uart_get_tail+0x4>
        ;

    cli();
    5334:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    5336:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <uarts+0x1>
    533a:	91 e0       	ldi	r25, 0x01	; 1
    533c:	9e 0f       	add	r25, r30
    533e:	90 93 e6 19 	sts	0x19E6, r25	; 0x8019e6 <uarts+0x1>
    5342:	f0 e0       	ldi	r31, 0x00	; 0
    5344:	eb 51       	subi	r30, 0x1B	; 27
    5346:	f6 4e       	sbci	r31, 0xE6	; 230
    5348:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    534a:	90 35       	cpi	r25, 0x50	; 80
    534c:	10 f0       	brcs	.+4      	; 0x5352 <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    534e:	10 92 e6 19 	sts	0x19E6, r1	; 0x8019e6 <uarts+0x1>
    uarts[uart].rx_count--;
    5352:	20 91 e8 19 	lds	r18, 0x19E8	; 0x8019e8 <uarts+0x3>
    5356:	30 91 e9 19 	lds	r19, 0x19E9	; 0x8019e9 <uarts+0x4>
    535a:	21 50       	subi	r18, 0x01	; 1
    535c:	31 09       	sbc	r19, r1
    535e:	30 93 e9 19 	sts	0x19E9, r19	; 0x8019e9 <uarts+0x4>
    5362:	20 93 e8 19 	sts	0x19E8, r18	; 0x8019e8 <uarts+0x3>
    sei();
    5366:	78 94       	sei

    return (c & 0xff);
    5368:	90 e0       	ldi	r25, 0x00	; 0
    536a:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
    {
        return(EOF);
    536c:	8f ef       	ldi	r24, 0xFF	; 255
    536e:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    5370:	08 95       	ret

00005372 <uart_rx_byte>:
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    return( uart_get_tail(uart) & 0xff);
    5372:	d9 df       	rcall	.-78     	; 0x5326 <uart_get_tail>
}
    5374:	99 27       	eor	r25, r25
    5376:	08 95       	ret

00005378 <uart_tx_byte>:
/// @param[in] uart: uart number.
///
/// @return void.
int uart_tx_byte(int c, uint8_t uart)
{
    if(uart == 0)
    5378:	61 11       	cpse	r22, r1
    537a:	09 c0       	rjmp	.+18     	; 0x538e <uart_tx_byte+0x16>
    {
        while (!BIT_TST(UCSR0A, UDRE0))
    537c:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5380:	25 ff       	sbrs	r18, 5
    5382:	fc cf       	rjmp	.-8      	; 0x537c <uart_tx_byte+0x4>
            ;
        UDR0 = c & 0x7f;
    5384:	28 2f       	mov	r18, r24
    5386:	2f 77       	andi	r18, 0x7F	; 127
    5388:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
        return(c);
    538c:	08 95       	ret
    }
#ifdef UARTS > 1
    if(uart == 1)
    538e:	61 30       	cpi	r22, 0x01	; 1
    5390:	49 f4       	brne	.+18     	; 0x53a4 <uart_tx_byte+0x2c>
    {
        while (!BIT_TST(UCSR1A, UDRE1))
    5392:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    5396:	25 ff       	sbrs	r18, 5
    5398:	fc cf       	rjmp	.-8      	; 0x5392 <uart_tx_byte+0x1a>
            ;
        UDR1 = c & 0x7f;
    539a:	28 2f       	mov	r18, r24
    539c:	2f 77       	andi	r18, 0x7F	; 127
    539e:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    53a2:	08 95       	ret
        return(c);
    }
#endif
    return(EOF);
    53a4:	8f ef       	ldi	r24, 0xFF	; 255
    53a6:	9f ef       	ldi	r25, 0xFF	; 255
}
    53a8:	08 95       	ret

000053aa <uart_getchar>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_getchar(uint8_t uart)
{
    53aa:	cf 93       	push	r28
    uint8_t c;

    if(uart >= UARTS)
    53ac:	81 11       	cpse	r24, r1
    53ae:	0f c0       	rjmp	.+30     	; 0x53ce <uart_getchar+0x24>
        break;
    }
    if(c == '\r')
        c = '\n';
#endif
    c = uart_rx_byte(uart);
    53b0:	e0 df       	rcall	.-64     	; 0x5372 <uart_rx_byte>
    53b2:	c8 2f       	mov	r28, r24
    uart_tx_byte(c, uart);
    53b4:	60 e0       	ldi	r22, 0x00	; 0
    53b6:	90 e0       	ldi	r25, 0x00	; 0
    53b8:	df df       	rcall	.-66     	; 0x5378 <uart_tx_byte>
    if(c == '\r')
    53ba:	cd 30       	cpi	r28, 0x0D	; 13
    53bc:	29 f4       	brne	.+10     	; 0x53c8 <uart_getchar+0x1e>
    {
        c = '\n';
        uart_tx_byte(c, uart);
    53be:	60 e0       	ldi	r22, 0x00	; 0
    53c0:	8a e0       	ldi	r24, 0x0A	; 10
    53c2:	90 e0       	ldi	r25, 0x00	; 0
    53c4:	d9 df       	rcall	.-78     	; 0x5378 <uart_tx_byte>
#endif
    c = uart_rx_byte(uart);
    uart_tx_byte(c, uart);
    if(c == '\r')
    {
        c = '\n';
    53c6:	ca e0       	ldi	r28, 0x0A	; 10
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
    53c8:	8c 2f       	mov	r24, r28
    53ca:	90 e0       	ldi	r25, 0x00	; 0
    53cc:	02 c0       	rjmp	.+4      	; 0x53d2 <uart_getchar+0x28>
int uart_getchar(uint8_t uart)
{
    uint8_t c;

    if(uart >= UARTS)
        return(EOF);
    53ce:	8f ef       	ldi	r24, 0xFF	; 255
    53d0:	9f ef       	ldi	r25, 0xFF	; 255
        c = '\n';
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
}
    53d2:	cf 91       	pop	r28
    53d4:	08 95       	ret

000053d6 <uart0_getchar>:
///
/// @return  uart_getchar(0);.
/// @see fdevopen() from avr-libc.
int uart0_getchar( void *f  __attribute__((unused)))
{
    return( uart_getchar(0) );
    53d6:	80 e0       	ldi	r24, 0x00	; 0
    53d8:	e8 cf       	rjmp	.-48     	; 0x53aa <uart_getchar>
}
    53da:	08 95       	ret

000053dc <uart_putchar>:
/// @param[in] c: transmit character.
/// @param[in] uart: uart number.
///
/// @return void.
int uart_putchar(int c, int uart)
{
    53dc:	1f 93       	push	r17
    53de:	cf 93       	push	r28
    53e0:	df 93       	push	r29
    53e2:	ec 01       	movw	r28, r24
    53e4:	16 2f       	mov	r17, r22
    uart_tx_byte(c, uart);
    53e6:	c8 df       	rcall	.-112    	; 0x5378 <uart_tx_byte>

    if( c == '\n' )
    53e8:	ca 30       	cpi	r28, 0x0A	; 10
    53ea:	d1 05       	cpc	r29, r1
    53ec:	21 f4       	brne	.+8      	; 0x53f6 <uart_putchar+0x1a>
        uart_tx_byte('\r', uart);
    53ee:	61 2f       	mov	r22, r17
    53f0:	8d e0       	ldi	r24, 0x0D	; 13
    53f2:	90 e0       	ldi	r25, 0x00	; 0
    53f4:	c1 df       	rcall	.-126    	; 0x5378 <uart_tx_byte>

    return(c);
}
    53f6:	ce 01       	movw	r24, r28
    53f8:	df 91       	pop	r29
    53fa:	cf 91       	pop	r28
    53fc:	1f 91       	pop	r17
    53fe:	08 95       	ret

00005400 <uart0_putchar>:
/// @param[in] f: unused FILE *stream pointer.
///
/// @return  uart_putchar(c, 0);.
/// @see fdevopen() from avr-libc.
int uart0_putchar(int c, void *f  __attribute__((unused)))
{
    5400:	cf 93       	push	r28
    5402:	df 93       	push	r29
    5404:	ec 01       	movw	r28, r24
    uart_putchar(c, 0);
    5406:	60 e0       	ldi	r22, 0x00	; 0
    5408:	70 e0       	ldi	r23, 0x00	; 0
    540a:	e8 df       	rcall	.-48     	; 0x53dc <uart_putchar>
    return(c);
}
    540c:	ce 01       	movw	r24, r28
    540e:	df 91       	pop	r29
    5410:	cf 91       	pop	r28
    5412:	08 95       	ret

00005414 <uart_keyhit>:
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
    return ( uart_rx_count( uart ) );
    5414:	7c cf       	rjmp	.-264    	; 0x530e <uart_rx_count>
}
    5416:	08 95       	ret

00005418 <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    5418:	cf 92       	push	r12
    541a:	df 92       	push	r13
    541c:	ef 92       	push	r14
    541e:	ff 92       	push	r15
    5420:	6b 01       	movw	r12, r22
    5422:	7c 01       	movw	r14, r24
    5424:	80 91 47 17 	lds	r24, 0x1747	; 0x801747 <SPI0_Speed_value>
    5428:	90 91 48 17 	lds	r25, 0x1748	; 0x801748 <SPI0_Speed_value+0x1>
    542c:	a0 91 49 17 	lds	r26, 0x1749	; 0x801749 <SPI0_Speed_value+0x2>
    5430:	b0 91 4a 17 	lds	r27, 0x174A	; 0x80174a <SPI0_Speed_value+0x3>
    5434:	8c 15       	cp	r24, r12
    5436:	9d 05       	cpc	r25, r13
    5438:	ae 05       	cpc	r26, r14
    543a:	bf 05       	cpc	r27, r15
    543c:	09 f4       	brne	.+2      	; 0x5440 <SPI0_Speed+0x28>
    543e:	4e c0       	rjmp	.+156    	; 0x54dc <SPI0_Speed+0xc4>
    5440:	60 e0       	ldi	r22, 0x00	; 0
    5442:	7d e2       	ldi	r23, 0x2D	; 45
    5444:	81 e3       	ldi	r24, 0x31	; 49
    5446:	91 e0       	ldi	r25, 0x01	; 1
    5448:	a7 01       	movw	r20, r14
    544a:	96 01       	movw	r18, r12
    544c:	0e 94 f9 e5 	call	0x1cbf2	; 0x1cbf2 <__udivmodsi4>
    5450:	20 38       	cpi	r18, 0x80	; 128
    5452:	31 05       	cpc	r19, r1
    5454:	41 05       	cpc	r20, r1
    5456:	51 05       	cpc	r21, r1
    5458:	28 f4       	brcc	.+10     	; 0x5464 <SPI0_Speed+0x4c>
    545a:	20 34       	cpi	r18, 0x40	; 64
    545c:	31 05       	cpc	r19, r1
    545e:	41 05       	cpc	r20, r1
    5460:	51 05       	cpc	r21, r1
    5462:	30 f0       	brcs	.+12     	; 0x5470 <SPI0_Speed+0x58>
    5464:	8d b5       	in	r24, 0x2d	; 45
    5466:	8e 7f       	andi	r24, 0xFE	; 254
    5468:	8d bd       	out	0x2d, r24	; 45
    546a:	8c b5       	in	r24, 0x2c	; 44
    546c:	82 60       	ori	r24, 0x02	; 2
    546e:	1b c0       	rjmp	.+54     	; 0x54a6 <SPI0_Speed+0x8e>
    5470:	8d b5       	in	r24, 0x2d	; 45
    5472:	20 32       	cpi	r18, 0x20	; 32
    5474:	31 05       	cpc	r19, r1
    5476:	41 05       	cpc	r20, r1
    5478:	51 05       	cpc	r21, r1
    547a:	28 f0       	brcs	.+10     	; 0x5486 <SPI0_Speed+0x6e>
    547c:	81 60       	ori	r24, 0x01	; 1
    547e:	8d bd       	out	0x2d, r24	; 45
    5480:	8c b5       	in	r24, 0x2c	; 44
    5482:	82 60       	ori	r24, 0x02	; 2
    5484:	1f c0       	rjmp	.+62     	; 0x54c4 <SPI0_Speed+0xac>
    5486:	20 31       	cpi	r18, 0x10	; 16
    5488:	31 05       	cpc	r19, r1
    548a:	41 05       	cpc	r20, r1
    548c:	51 05       	cpc	r21, r1
    548e:	10 f0       	brcs	.+4      	; 0x5494 <SPI0_Speed+0x7c>
    5490:	8e 7f       	andi	r24, 0xFE	; 254
    5492:	06 c0       	rjmp	.+12     	; 0x54a0 <SPI0_Speed+0x88>
    5494:	28 30       	cpi	r18, 0x08	; 8
    5496:	31 05       	cpc	r19, r1
    5498:	41 05       	cpc	r20, r1
    549a:	51 05       	cpc	r21, r1
    549c:	40 f0       	brcs	.+16     	; 0x54ae <SPI0_Speed+0x96>
    549e:	81 60       	ori	r24, 0x01	; 1
    54a0:	8d bd       	out	0x2d, r24	; 45
    54a2:	8c b5       	in	r24, 0x2c	; 44
    54a4:	8d 7f       	andi	r24, 0xFD	; 253
    54a6:	8c bd       	out	0x2c, r24	; 44
    54a8:	8c b5       	in	r24, 0x2c	; 44
    54aa:	81 60       	ori	r24, 0x01	; 1
    54ac:	0e c0       	rjmp	.+28     	; 0x54ca <SPI0_Speed+0xb2>
    54ae:	24 30       	cpi	r18, 0x04	; 4
    54b0:	31 05       	cpc	r19, r1
    54b2:	41 05       	cpc	r20, r1
    54b4:	51 05       	cpc	r21, r1
    54b6:	10 f0       	brcs	.+4      	; 0x54bc <SPI0_Speed+0xa4>
    54b8:	8e 7f       	andi	r24, 0xFE	; 254
    54ba:	01 c0       	rjmp	.+2      	; 0x54be <SPI0_Speed+0xa6>
    54bc:	81 60       	ori	r24, 0x01	; 1
    54be:	8d bd       	out	0x2d, r24	; 45
    54c0:	8c b5       	in	r24, 0x2c	; 44
    54c2:	8d 7f       	andi	r24, 0xFD	; 253
    54c4:	8c bd       	out	0x2c, r24	; 44
    54c6:	8c b5       	in	r24, 0x2c	; 44
    54c8:	8e 7f       	andi	r24, 0xFE	; 254
    54ca:	8c bd       	out	0x2c, r24	; 44
    54cc:	c0 92 47 17 	sts	0x1747, r12	; 0x801747 <SPI0_Speed_value>
    54d0:	d0 92 48 17 	sts	0x1748, r13	; 0x801748 <SPI0_Speed_value+0x1>
    54d4:	e0 92 49 17 	sts	0x1749, r14	; 0x801749 <SPI0_Speed_value+0x2>
    54d8:	f0 92 4a 17 	sts	0x174A, r15	; 0x80174a <SPI0_Speed_value+0x3>
    54dc:	ff 90       	pop	r15
    54de:	ef 90       	pop	r14
    54e0:	df 90       	pop	r13
    54e2:	cf 90       	pop	r12
    54e4:	08 95       	ret

000054e6 <SPI0_Mode>:
    54e6:	cf 93       	push	r28
    54e8:	df 93       	push	r29
    54ea:	00 d0       	rcall	.+0      	; 0x54ec <SPI0_Mode+0x6>
    54ec:	00 d0       	rcall	.+0      	; 0x54ee <SPI0_Mode+0x8>
    54ee:	1f 92       	push	r1
    54f0:	ec 01       	movw	r28, r24
    54f2:	81 30       	cpi	r24, 0x01	; 1
    54f4:	91 05       	cpc	r25, r1
    54f6:	71 f0       	breq	.+28     	; 0x5514 <SPI0_Mode+0x2e>
    54f8:	2c f4       	brge	.+10     	; 0x5504 <SPI0_Mode+0x1e>
    54fa:	89 2b       	or	r24, r25
    54fc:	c1 f4       	brne	.+48     	; 0x552e <SPI0_Mode+0x48>
    54fe:	8c b5       	in	r24, 0x2c	; 44
    5500:	87 7f       	andi	r24, 0xF7	; 247
    5502:	11 c0       	rjmp	.+34     	; 0x5526 <SPI0_Mode+0x40>
    5504:	82 30       	cpi	r24, 0x02	; 2
    5506:	91 05       	cpc	r25, r1
    5508:	61 f0       	breq	.+24     	; 0x5522 <SPI0_Mode+0x3c>
    550a:	03 97       	sbiw	r24, 0x03	; 3
    550c:	81 f4       	brne	.+32     	; 0x552e <SPI0_Mode+0x48>
    550e:	8c b5       	in	r24, 0x2c	; 44
    5510:	88 60       	ori	r24, 0x08	; 8
    5512:	02 c0       	rjmp	.+4      	; 0x5518 <SPI0_Mode+0x32>
    5514:	8c b5       	in	r24, 0x2c	; 44
    5516:	87 7f       	andi	r24, 0xF7	; 247
    5518:	8c bd       	out	0x2c, r24	; 44
    551a:	8c b5       	in	r24, 0x2c	; 44
    551c:	84 60       	ori	r24, 0x04	; 4
    551e:	8c bd       	out	0x2c, r24	; 44
    5520:	12 c0       	rjmp	.+36     	; 0x5546 <SPI0_Mode+0x60>
    5522:	8c b5       	in	r24, 0x2c	; 44
    5524:	88 60       	ori	r24, 0x08	; 8
    5526:	8c bd       	out	0x2c, r24	; 44
    5528:	8c b5       	in	r24, 0x2c	; 44
    552a:	8b 7f       	andi	r24, 0xFB	; 251
    552c:	f8 cf       	rjmp	.-16     	; 0x551e <SPI0_Mode+0x38>
    552e:	ed b7       	in	r30, 0x3d	; 61
    5530:	fe b7       	in	r31, 0x3e	; 62
    5532:	d5 83       	std	Z+5, r29	; 0x05
    5534:	c4 83       	std	Z+4, r28	; 0x04
    5536:	84 e1       	ldi	r24, 0x14	; 20
    5538:	93 e0       	ldi	r25, 0x03	; 3
    553a:	a0 e0       	ldi	r26, 0x00	; 0
    553c:	81 83       	std	Z+1, r24	; 0x01
    553e:	92 83       	std	Z+2, r25	; 0x02
    5540:	a3 83       	std	Z+3, r26	; 0x03
    5542:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    5546:	d0 93 46 17 	sts	0x1746, r29	; 0x801746 <SPI0_Mode_value+0x1>
    554a:	c0 93 45 17 	sts	0x1745, r28	; 0x801745 <SPI0_Mode_value>
    554e:	cd b7       	in	r28, 0x3d	; 61
    5550:	de b7       	in	r29, 0x3e	; 62
    5552:	25 96       	adiw	r28, 0x05	; 5
    5554:	e2 e0       	ldi	r30, 0x02	; 2
    5556:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

0000555a <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    555a:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    555c:	0d b4       	in	r0, 0x2d	; 45
    555e:	07 fe       	sbrs	r0, 7
    5560:	fd cf       	rjmp	.-6      	; 0x555c <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    5562:	8e b5       	in	r24, 0x2e	; 46
}
    5564:	08 95       	ret

00005566 <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    5566:	cf 92       	push	r12
    5568:	df 92       	push	r13
    556a:	ef 92       	push	r14
    556c:	ff 92       	push	r15
    556e:	cf 93       	push	r28
    5570:	df 93       	push	r29
    5572:	1f 92       	push	r1
    5574:	cd b7       	in	r28, 0x3d	; 61
    5576:	de b7       	in	r29, 0x3e	; 62
    5578:	6b 01       	movw	r12, r22
    557a:	7c 01       	movw	r14, r24
    printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
    printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
    printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

    SPCR = 0;                                     // Clear SPCR in case we are not called after RESET
    557c:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);                             // SCK Output
    557e:	2f 9a       	sbi	0x05, 7	; 5
    5580:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                            // MOSI Output
    5582:	2d 9a       	sbi	0x05, 5	; 5
    5584:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                         // MISO Input, no pull-up
    5586:	26 98       	cbi	0x04, 6	; 4

// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
    GPIO_PIN_LOW(SS);                             // SS Output must be HI prevent slave mode from getting set while initializing
    5588:	2c 98       	cbi	0x05, 4	; 5
    558a:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);                          // Master Mode
    558c:	8c b5       	in	r24, 0x2c	; 44
    558e:	80 61       	ori	r24, 0x10	; 16
    5590:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);                           // Enable SPI
    5592:	8c b5       	in	r24, 0x2c	; 44
    5594:	80 64       	ori	r24, 0x40	; 64
    5596:	8c bd       	out	0x2c, r24	; 44

// SPI Clear any pending interrupt flags
    D = SPSR;
    5598:	8d b5       	in	r24, 0x2d	; 45
    559a:	89 83       	std	Y+1, r24	; 0x01
    D = SPDR;
    559c:	8e b5       	in	r24, 0x2e	; 46
    559e:	89 83       	std	Y+1, r24	; 0x01

/// Set SPI clock mode 0
///  SPI Mode     CPOL    CPHA            Sample
///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    55a0:	80 e0       	ldi	r24, 0x00	; 0
    55a2:	90 e0       	ldi	r25, 0x00	; 0
    55a4:	a0 df       	rcall	.-192    	; 0x54e6 <SPI0_Mode>

// Set SPI clock speed
    SPI0_Speed(speed);
    55a6:	c7 01       	movw	r24, r14
    55a8:	b6 01       	movw	r22, r12
    55aa:	36 df       	rcall	.-404    	; 0x5418 <SPI0_Speed>

    SPI0_TXRX_Byte(0xff);                         // Send dummy 0xFF
    55ac:	8f ef       	ldi	r24, 0xFF	; 255
    55ae:	d5 df       	rcall	.-86     	; 0x555a <SPI0_TXRX_Byte>
    55b0:	0f 90       	pop	r0
    SPI0_Init_state = 1;

}
    55b2:	df 91       	pop	r29
    55b4:	cf 91       	pop	r28
    55b6:	ff 90       	pop	r15
    55b8:	ef 90       	pop	r14
    55ba:	df 90       	pop	r13
    55bc:	cf 90       	pop	r12
    55be:	08 95       	ret

000055c0 <SPI0_TX>:
    55c0:	0f 93       	push	r16
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    55c2:	1f 93       	push	r17
    55c4:	cf 93       	push	r28
    55c6:	df 93       	push	r29
    55c8:	8c 01       	movw	r16, r24
    55ca:	eb 01       	movw	r28, r22

    while(count > 0)
    55cc:	1c 16       	cp	r1, r28
    55ce:	1d 06       	cpc	r1, r29
    55d0:	34 f4       	brge	.+12     	; 0x55de <SPI0_TX+0x1e>
    {
        SPI0_TXRX_Byte(*data);
    55d2:	f8 01       	movw	r30, r16
    55d4:	81 91       	ld	r24, Z+
    55d6:	8f 01       	movw	r16, r30
    55d8:	c0 df       	rcall	.-128    	; 0x555a <SPI0_TXRX_Byte>
        ++data;
        --count;
    55da:	21 97       	sbiw	r28, 0x01	; 1
    55dc:	f7 cf       	rjmp	.-18     	; 0x55cc <SPI0_TX+0xc>
    }
}
    55de:	df 91       	pop	r29
    55e0:	cf 91       	pop	r28
    55e2:	1f 91       	pop	r17
    55e4:	0f 91       	pop	r16
    55e6:	08 95       	ret

000055e8 <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    55e8:	0f 93       	push	r16
    55ea:	1f 93       	push	r17
    55ec:	cf 93       	push	r28
    55ee:	df 93       	push	r29
    55f0:	8c 01       	movw	r16, r24
    55f2:	eb 01       	movw	r28, r22

    while(count > 0)
    55f4:	1c 16       	cp	r1, r28
    55f6:	1d 06       	cpc	r1, r29
    55f8:	44 f4       	brge	.+16     	; 0x560a <SPI0_TXRX+0x22>
    {
        *data = SPI0_TXRX_Byte(*data);
    55fa:	f8 01       	movw	r30, r16
    55fc:	80 81       	ld	r24, Z
    55fe:	ad df       	rcall	.-166    	; 0x555a <SPI0_TXRX_Byte>
    5600:	f8 01       	movw	r30, r16
    5602:	81 93       	st	Z+, r24
    5604:	8f 01       	movw	r16, r30
        ++data;
        --count;
    5606:	21 97       	sbiw	r28, 0x01	; 1
    5608:	f5 cf       	rjmp	.-22     	; 0x55f4 <SPI0_TXRX+0xc>
    }
}
    560a:	df 91       	pop	r29
    560c:	cf 91       	pop	r28
    560e:	1f 91       	pop	r17
    5610:	0f 91       	pop	r16
    5612:	08 95       	ret

00005614 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    5614:	0f 93       	push	r16
    5616:	1f 93       	push	r17
    5618:	cf 93       	push	r28
    561a:	df 93       	push	r29
    561c:	8c 01       	movw	r16, r24
    561e:	eb 01       	movw	r28, r22

    while(count > 0)
    5620:	1c 16       	cp	r1, r28
    5622:	1d 06       	cpc	r1, r29
    5624:	3c f4       	brge	.+14     	; 0x5634 <SPI0_RX+0x20>
    {
        *data = SPI0_TXRX_Byte(0xff);
    5626:	8f ef       	ldi	r24, 0xFF	; 255
    5628:	98 df       	rcall	.-208    	; 0x555a <SPI0_TXRX_Byte>
    562a:	f8 01       	movw	r30, r16
    562c:	81 93       	st	Z+, r24
    562e:	8f 01       	movw	r16, r30
        ++data;
        --count;
    5630:	21 97       	sbiw	r28, 0x01	; 1
    5632:	f6 cf       	rjmp	.-20     	; 0x5620 <SPI0_RX+0xc>
    }
}
    5634:	df 91       	pop	r29
    5636:	cf 91       	pop	r28
    5638:	1f 91       	pop	r17
    563a:	0f 91       	pop	r16
    563c:	08 95       	ret

0000563e <i2c_timer>:
int8_t i2c_ok()
{
	if (i2c.flags) 
		return(0);
	return(1);
}
    563e:	2f b7       	in	r18, 0x3f	; 63
    5640:	80 91 3d 1a 	lds	r24, 0x1A3D	; 0x801a3d <i2c+0x1>
    5644:	81 11       	cpse	r24, r1
    5646:	04 c0       	rjmp	.+8      	; 0x5650 <i2c_timer+0x12>
    5648:	80 91 3e 1a 	lds	r24, 0x1A3E	; 0x801a3e <i2c+0x2>
    564c:	81 11       	cpse	r24, r1
    564e:	0b c0       	rjmp	.+22     	; 0x5666 <i2c_timer+0x28>
    5650:	80 91 40 1a 	lds	r24, 0x1A40	; 0x801a40 <i2c+0x4>
    5654:	90 91 41 1a 	lds	r25, 0x1A41	; 0x801a41 <i2c+0x5>
    5658:	00 97       	sbiw	r24, 0x00	; 0
    565a:	29 f0       	breq	.+10     	; 0x5666 <i2c_timer+0x28>
    565c:	01 97       	sbiw	r24, 0x01	; 1
    565e:	90 93 41 1a 	sts	0x1A41, r25	; 0x801a41 <i2c+0x5>
    5662:	80 93 40 1a 	sts	0x1A40, r24	; 0x801a40 <i2c+0x4>
    5666:	2f bf       	out	0x3f, r18	; 63
    5668:	08 95       	ret

0000566a <i2c_check_op>:
    566a:	ad b7       	in	r26, 0x3d	; 61
    566c:	be b7       	in	r27, 0x3e	; 62
    566e:	17 97       	sbiw	r26, 0x07	; 7
    5670:	0f b6       	in	r0, 0x3f	; 63
    5672:	f8 94       	cli
    5674:	be bf       	out	0x3e, r27	; 62
    5676:	0f be       	out	0x3f, r0	; 63
    5678:	ad bf       	out	0x3d, r26	; 61
    567a:	28 2f       	mov	r18, r24
    567c:	08 2e       	mov	r0, r24
    567e:	00 0c       	add	r0, r0
    5680:	33 0b       	sbc	r19, r19
    5682:	80 31       	cpi	r24, 0x10	; 16
    5684:	88 f0       	brcs	.+34     	; 0x56a8 <i2c_check_op+0x3e>
    5686:	80 e1       	ldi	r24, 0x10	; 16
    5688:	90 e0       	ldi	r25, 0x00	; 0
    568a:	ed b7       	in	r30, 0x3d	; 61
    568c:	fe b7       	in	r31, 0x3e	; 62
    568e:	97 83       	std	Z+7, r25	; 0x07
    5690:	86 83       	std	Z+6, r24	; 0x06
    5692:	35 83       	std	Z+5, r19	; 0x05
    5694:	24 83       	std	Z+4, r18	; 0x04
    5696:	89 e2       	ldi	r24, 0x29	; 41
    5698:	94 e0       	ldi	r25, 0x04	; 4
    569a:	a0 e0       	ldi	r26, 0x00	; 0
    569c:	81 83       	std	Z+1, r24	; 0x01
    569e:	92 83       	std	Z+2, r25	; 0x02
    56a0:	a3 83       	std	Z+3, r26	; 0x03
    56a2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    56a6:	24 c0       	rjmp	.+72     	; 0x56f0 <i2c_check_op+0x86>
    56a8:	f9 01       	movw	r30, r18
    56aa:	ee 0f       	add	r30, r30
    56ac:	ff 1f       	adc	r31, r31
    56ae:	e4 5b       	subi	r30, 0xB4	; 180
    56b0:	f8 4e       	sbci	r31, 0xE8	; 232
    56b2:	01 90       	ld	r0, Z+
    56b4:	f0 81       	ld	r31, Z
    56b6:	e0 2d       	mov	r30, r0
    56b8:	30 97       	sbiw	r30, 0x00	; 0
    56ba:	d1 f0       	breq	.+52     	; 0x56f0 <i2c_check_op+0x86>
    56bc:	80 85       	ldd	r24, Z+8	; 0x08
    56be:	91 85       	ldd	r25, Z+9	; 0x09
    56c0:	89 2b       	or	r24, r25
    56c2:	39 f4       	brne	.+14     	; 0x56d2 <i2c_check_op+0x68>
    56c4:	ed b7       	in	r30, 0x3d	; 61
    56c6:	fe b7       	in	r31, 0x3e	; 62
    56c8:	35 83       	std	Z+5, r19	; 0x05
    56ca:	24 83       	std	Z+4, r18	; 0x04
    56cc:	80 e1       	ldi	r24, 0x10	; 16
    56ce:	94 e0       	ldi	r25, 0x04	; 4
    56d0:	09 c0       	rjmp	.+18     	; 0x56e4 <i2c_check_op+0x7a>
    56d2:	86 81       	ldd	r24, Z+6	; 0x06
    56d4:	81 11       	cpse	r24, r1
    56d6:	0e c0       	rjmp	.+28     	; 0x56f4 <i2c_check_op+0x8a>
    56d8:	ed b7       	in	r30, 0x3d	; 61
    56da:	fe b7       	in	r31, 0x3e	; 62
    56dc:	35 83       	std	Z+5, r19	; 0x05
    56de:	24 83       	std	Z+4, r18	; 0x04
    56e0:	8a ef       	ldi	r24, 0xFA	; 250
    56e2:	93 e0       	ldi	r25, 0x03	; 3
    56e4:	a0 e0       	ldi	r26, 0x00	; 0
    56e6:	81 83       	std	Z+1, r24	; 0x01
    56e8:	92 83       	std	Z+2, r25	; 0x02
    56ea:	a3 83       	std	Z+3, r26	; 0x03
    56ec:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    56f0:	80 e0       	ldi	r24, 0x00	; 0
    56f2:	01 c0       	rjmp	.+2      	; 0x56f6 <i2c_check_op+0x8c>
    56f4:	81 e0       	ldi	r24, 0x01	; 1
    56f6:	ad b7       	in	r26, 0x3d	; 61
    56f8:	be b7       	in	r27, 0x3e	; 62
    56fa:	17 96       	adiw	r26, 0x07	; 7
    56fc:	0f b6       	in	r0, 0x3f	; 63
    56fe:	f8 94       	cli
    5700:	be bf       	out	0x3e, r27	; 62
    5702:	0f be       	out	0x3f, r0	; 63
    5704:	ad bf       	out	0x3d, r26	; 61
    5706:	08 95       	ret

00005708 <i2c_task_init>:
    5708:	8f b7       	in	r24, 0x3f	; 63
    570a:	f8 94       	cli
    570c:	ec e4       	ldi	r30, 0x4C	; 76
    570e:	f7 e1       	ldi	r31, 0x17	; 23
    5710:	11 92       	st	Z+, r1
    5712:	11 92       	st	Z+, r1
    5714:	97 e1       	ldi	r25, 0x17	; 23
    5716:	ec 36       	cpi	r30, 0x6C	; 108
    5718:	f9 07       	cpc	r31, r25
    571a:	d1 f7       	brne	.-12     	; 0x5710 <i2c_task_init+0x8>
    571c:	10 92 6c 17 	sts	0x176C, r1	; 0x80176c <i2c_task>
    5720:	91 e0       	ldi	r25, 0x01	; 1
    5722:	90 93 6e 17 	sts	0x176E, r25	; 0x80176e <i2c_task+0x2>
    5726:	10 92 6d 17 	sts	0x176D, r1	; 0x80176d <i2c_task+0x1>
    572a:	10 92 6f 17 	sts	0x176F, r1	; 0x80176f <i2c_task+0x3>
    572e:	8f bf       	out	0x3f, r24	; 63
    5730:	08 95       	ret

00005732 <i2c_task_op_add>:
    5732:	ef 92       	push	r14
    5734:	ff 92       	push	r15
    5736:	0f 93       	push	r16
    5738:	1f 93       	push	r17
    573a:	cf 93       	push	r28
    573c:	df 93       	push	r29
    573e:	d8 2f       	mov	r29, r24
    5740:	c6 2f       	mov	r28, r22
    5742:	7a 01       	movw	r14, r20
    5744:	02 2f       	mov	r16, r18
    5746:	1f b7       	in	r17, 0x3f	; 63
    5748:	6a e0       	ldi	r22, 0x0A	; 10
    574a:	70 e0       	ldi	r23, 0x00	; 0
    574c:	81 e0       	ldi	r24, 0x01	; 1
    574e:	90 e0       	ldi	r25, 0x00	; 0
    5750:	a8 db       	rcall	.-2224   	; 0x4ea2 <safecalloc>
    5752:	fc 01       	movw	r30, r24
    5754:	89 2b       	or	r24, r25
    5756:	89 f0       	breq	.+34     	; 0x577a <i2c_task_op_add+0x48>
    5758:	f8 94       	cli
    575a:	11 82       	std	Z+1, r1	; 0x01
    575c:	12 82       	std	Z+2, r1	; 0x02
    575e:	dd 0f       	add	r29, r29
    5760:	c1 70       	andi	r28, 0x01	; 1
    5762:	cd 2b       	or	r28, r29
    5764:	c0 83       	st	Z, r28
    5766:	8a e0       	ldi	r24, 0x0A	; 10
    5768:	90 e0       	ldi	r25, 0x00	; 0
    576a:	95 83       	std	Z+5, r25	; 0x05
    576c:	84 83       	std	Z+4, r24	; 0x04
    576e:	13 82       	std	Z+3, r1	; 0x03
    5770:	06 83       	std	Z+6, r16	; 0x06
    5772:	17 82       	std	Z+7, r1	; 0x07
    5774:	f1 86       	std	Z+9, r15	; 0x09
    5776:	e0 86       	std	Z+8, r14	; 0x08
    5778:	1f bf       	out	0x3f, r17	; 63
    577a:	cf 01       	movw	r24, r30
    577c:	cd b7       	in	r28, 0x3d	; 61
    577e:	de b7       	in	r29, 0x3e	; 62
    5780:	e6 e0       	ldi	r30, 0x06	; 6
    5782:	0c 94 8e e6 	jmp	0x1cd1c	; 0x1cd1c <__epilogue_restores__+0x18>

00005786 <i2c_init>:
    5786:	cf 93       	push	r28
    5788:	00 d0       	rcall	.+0      	; 0x578a <i2c_init+0x4>
    578a:	1f 92       	push	r1
    578c:	9b 01       	movw	r18, r22
    578e:	ac 01       	movw	r20, r24
    5790:	cf b7       	in	r28, 0x3f	; 63
    5792:	60 e0       	ldi	r22, 0x00	; 0
    5794:	7d e2       	ldi	r23, 0x2D	; 45
    5796:	81 e3       	ldi	r24, 0x31	; 49
    5798:	91 e0       	ldi	r25, 0x01	; 1
    579a:	0e 94 f9 e5 	call	0x1cbf2	; 0x1cbf2 <__udivmodsi4>
    579e:	da 01       	movw	r26, r20
    57a0:	c9 01       	movw	r24, r18
    57a2:	40 97       	sbiw	r24, 0x10	; 16
    57a4:	a1 09       	sbc	r26, r1
    57a6:	b1 09       	sbc	r27, r1
    57a8:	ac 01       	movw	r20, r24
    57aa:	bd 01       	movw	r22, r26
    57ac:	76 95       	lsr	r23
    57ae:	67 95       	ror	r22
    57b0:	57 95       	ror	r21
    57b2:	47 95       	ror	r20
    57b4:	ca 01       	movw	r24, r20
    57b6:	88 27       	eor	r24, r24
    57b8:	89 2b       	or	r24, r25
    57ba:	59 f0       	breq	.+22     	; 0x57d2 <i2c_init+0x4c>
    57bc:	8e ed       	ldi	r24, 0xDE	; 222
    57be:	93 e0       	ldi	r25, 0x03	; 3
    57c0:	a0 e0       	ldi	r26, 0x00	; 0
    57c2:	ed b7       	in	r30, 0x3d	; 61
    57c4:	fe b7       	in	r31, 0x3e	; 62
    57c6:	81 83       	std	Z+1, r24	; 0x01
    57c8:	92 83       	std	Z+2, r25	; 0x02
    57ca:	a3 83       	std	Z+3, r26	; 0x03
    57cc:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    57d0:	3a c0       	rjmp	.+116    	; 0x5846 <i2c_init+0xc0>
    57d2:	f8 94       	cli
    57d4:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    57d8:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x1>
    57dc:	81 e0       	ldi	r24, 0x01	; 1
    57de:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <i2c+0x2>
    57e2:	10 92 6c 17 	sts	0x176C, r1	; 0x80176c <i2c_task>
    57e6:	80 93 6e 17 	sts	0x176E, r24	; 0x80176e <i2c_task+0x2>
    57ea:	40 9a       	sbi	0x08, 0	; 8
    57ec:	41 9a       	sbi	0x08, 1	; 8
    57ee:	84 e8       	ldi	r24, 0x84	; 132
    57f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    57f4:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    57f8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    57fc:	8c 7f       	andi	r24, 0xFC	; 252
    57fe:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5802:	80 91 4b 17 	lds	r24, 0x174B	; 0x80174b <i2c_init_status>
    5806:	81 11       	cpse	r24, r1
    5808:	1d c0       	rjmp	.+58     	; 0x5844 <i2c_init+0xbe>
    580a:	ec e4       	ldi	r30, 0x4C	; 76
    580c:	f7 e1       	ldi	r31, 0x17	; 23
    580e:	11 92       	st	Z+, r1
    5810:	11 92       	st	Z+, r1
    5812:	27 e1       	ldi	r18, 0x17	; 23
    5814:	ec 36       	cpi	r30, 0x6C	; 108
    5816:	f2 07       	cpc	r31, r18
    5818:	d1 f7       	brne	.-12     	; 0x580e <i2c_init+0x88>
    581a:	61 e0       	ldi	r22, 0x01	; 1
    581c:	70 e0       	ldi	r23, 0x00	; 0
    581e:	8f e1       	ldi	r24, 0x1F	; 31
    5820:	9b e2       	ldi	r25, 0x2B	; 43
    5822:	0e 94 53 34 	call	0x68a6	; 0x68a6 <set_timers>
    5826:	01 96       	adiw	r24, 0x01	; 1
    5828:	51 f4       	brne	.+20     	; 0x583e <i2c_init+0xb8>
    582a:	87 ec       	ldi	r24, 0xC7	; 199
    582c:	93 e0       	ldi	r25, 0x03	; 3
    582e:	a0 e0       	ldi	r26, 0x00	; 0
    5830:	ed b7       	in	r30, 0x3d	; 61
    5832:	fe b7       	in	r31, 0x3e	; 62
    5834:	81 83       	std	Z+1, r24	; 0x01
    5836:	92 83       	std	Z+2, r25	; 0x02
    5838:	a3 83       	std	Z+3, r26	; 0x03
    583a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    583e:	81 e0       	ldi	r24, 0x01	; 1
    5840:	80 93 4b 17 	sts	0x174B, r24	; 0x80174b <i2c_init_status>
    5844:	cf bf       	out	0x3f, r28	; 63
    5846:	0f 90       	pop	r0
    5848:	0f 90       	pop	r0
    584a:	0f 90       	pop	r0
    584c:	cf 91       	pop	r28
    584e:	08 95       	ret

00005850 <i2c_done>:
///@brief Is i2c structure done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_done()
{
	delayus(1);
    5850:	61 e0       	ldi	r22, 0x01	; 1
    5852:	70 e0       	ldi	r23, 0x00	; 0
    5854:	80 e0       	ldi	r24, 0x00	; 0
    5856:	90 e0       	ldi	r25, 0x00	; 0
    5858:	a5 db       	rcall	.-2230   	; 0x4fa4 <delayus>
	if(!i2c.enable || i2c.done )
    585a:	80 91 3d 1a 	lds	r24, 0x1A3D	; 0x801a3d <i2c+0x1>
    585e:	88 23       	and	r24, r24
    5860:	39 f0       	breq	.+14     	; 0x5870 <i2c_done+0x20>
		return(1);
    5862:	81 e0       	ldi	r24, 0x01	; 1
    5864:	90 91 3e 1a 	lds	r25, 0x1A3E	; 0x801a3e <i2c+0x2>
    5868:	91 11       	cpse	r25, r1
    586a:	03 c0       	rjmp	.+6      	; 0x5872 <i2c_done+0x22>
    586c:	80 e0       	ldi	r24, 0x00	; 0
    586e:	08 95       	ret
    5870:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    5872:	08 95       	ret

00005874 <i2c_task_done>:
///@brief Are all i2c_task_op[] pointers done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_task_done()
{
	delayus(1);
    5874:	61 e0       	ldi	r22, 0x01	; 1
    5876:	70 e0       	ldi	r23, 0x00	; 0
    5878:	80 e0       	ldi	r24, 0x00	; 0
    587a:	90 e0       	ldi	r25, 0x00	; 0
    587c:	93 db       	rcall	.-2266   	; 0x4fa4 <delayus>
	if(!i2c_task.enable || i2c_task.done )
    587e:	80 91 6c 17 	lds	r24, 0x176C	; 0x80176c <i2c_task>
    5882:	88 23       	and	r24, r24
    5884:	39 f0       	breq	.+14     	; 0x5894 <i2c_task_done+0x20>
		return(1);
    5886:	81 e0       	ldi	r24, 0x01	; 1
    5888:	90 91 6e 17 	lds	r25, 0x176E	; 0x80176e <i2c_task+0x2>
    588c:	91 11       	cpse	r25, r1
    588e:	03 c0       	rjmp	.+6      	; 0x5896 <i2c_task_done+0x22>
    5890:	80 e0       	ldi	r24, 0x00	; 0
    5892:	08 95       	ret
    5894:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    5896:	08 95       	ret

00005898 <i2c_send_start>:
///@brief Send I2C START and enable interrupts
///
/// @return  void
void i2c_send_start()
{
	i2c.done = 0;
    5898:	ec e3       	ldi	r30, 0x3C	; 60
    589a:	fa e1       	ldi	r31, 0x1A	; 26
    589c:	12 82       	std	Z+2, r1	; 0x02
	i2c.enable = 1;
    589e:	81 e0       	ldi	r24, 0x01	; 1
    58a0:	81 83       	std	Z+1, r24	; 0x01
	i2c.timeout = I2C_TIMEOUT;		// Start timeout timer
    58a2:	8a e0       	ldi	r24, 0x0A	; 10
    58a4:	90 e0       	ldi	r25, 0x00	; 0
    58a6:	95 83       	std	Z+5, r25	; 0x05
    58a8:	84 83       	std	Z+4, r24	; 0x04
	// Start a transactions
	// TWI Enable
	// TWI Interrupt Enable
	// TWI Interrupt Clear
	// TWI SEND RESTART
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    58aa:	85 ea       	ldi	r24, 0xA5	; 165
    58ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    58b0:	08 95       	ret

000058b2 <i2c_task_run>:

/// @brief Run all valid i2c_task_op[] tasks
///
/// @return  void
void i2c_task_run()
{
    58b2:	ef 92       	push	r14
    58b4:	ff 92       	push	r15
    58b6:	0f 93       	push	r16
    58b8:	1f 93       	push	r17
    58ba:	cf 93       	push	r28
    58bc:	df 93       	push	r29
	uint8_t sreg = SREG;
    58be:	ff b6       	in	r15, 0x3f	; 63
	i2c_op_t *o;
    uint8_t run = 0;
	int8_t i;


	cli();
    58c0:	f8 94       	cli
	i2c_task.done = 0;
    58c2:	10 92 6e 17 	sts	0x176E, r1	; 0x80176e <i2c_task+0x2>
	i2c_task.error = 0;
    58c6:	10 92 6f 17 	sts	0x176F, r1	; 0x80176f <i2c_task+0x3>
	i2c_task.ind = 0;
    58ca:	10 92 6d 17 	sts	0x176D, r1	; 0x80176d <i2c_task+0x1>

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    58ce:	c0 e0       	ldi	r28, 0x00	; 0
/// @return  void
void i2c_task_run()
{
	uint8_t sreg = SREG;
	i2c_op_t *o;
    uint8_t run = 0;
    58d0:	d0 e0       	ldi	r29, 0x00	; 0

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
	{
		o = i2c_task_op[i];
		o->enable = 1;
    58d2:	ee 24       	eor	r14, r14
    58d4:	e3 94       	inc	r14
		o->done = 0;
		o->flags = 0;
		o->ind = 0;
		o->timeout = I2C_TIMEOUT;
    58d6:	0a e0       	ldi	r16, 0x0A	; 10
    58d8:	10 e0       	ldi	r17, 0x00	; 0
	i2c_task.done = 0;
	i2c_task.error = 0;
	i2c_task.ind = 0;

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    58da:	8c 2f       	mov	r24, r28
    58dc:	c6 de       	rcall	.-628    	; 0x566a <i2c_check_op>
    58de:	88 23       	and	r24, r24
    58e0:	d1 f0       	breq	.+52     	; 0x5916 <i2c_task_run+0x64>
	{
		o = i2c_task_op[i];
    58e2:	ec 2f       	mov	r30, r28
    58e4:	ee 0f       	add	r30, r30
    58e6:	ff 0b       	sbc	r31, r31
    58e8:	e4 5b       	subi	r30, 0xB4	; 180
    58ea:	f8 4e       	sbci	r31, 0xE8	; 232
    58ec:	01 90       	ld	r0, Z+
    58ee:	f0 81       	ld	r31, Z
    58f0:	e0 2d       	mov	r30, r0
		o->enable = 1;
    58f2:	e1 82       	std	Z+1, r14	; 0x01
		o->done = 0;
    58f4:	12 82       	std	Z+2, r1	; 0x02
		o->flags = 0;
    58f6:	13 82       	std	Z+3, r1	; 0x03
		o->ind = 0;
    58f8:	17 82       	std	Z+7, r1	; 0x07
		o->timeout = I2C_TIMEOUT;
    58fa:	15 83       	std	Z+5, r17	; 0x05
    58fc:	04 83       	std	Z+4, r16	; 0x04
		if(!run)
    58fe:	d1 11       	cpse	r29, r1
    5900:	07 c0       	rjmp	.+14     	; 0x5910 <i2c_task_run+0x5e>
		{
			run = 1;
			i2c = *o;
    5902:	8a e0       	ldi	r24, 0x0A	; 10
    5904:	ac e3       	ldi	r26, 0x3C	; 60
    5906:	ba e1       	ldi	r27, 0x1A	; 26
    5908:	01 90       	ld	r0, Z+
    590a:	0d 92       	st	X+, r0
    590c:	8a 95       	dec	r24
    590e:	e1 f7       	brne	.-8      	; 0x5908 <i2c_task_run+0x56>
    5910:	cf 5f       	subi	r28, 0xFF	; 255
    5912:	d1 e0       	ldi	r29, 0x01	; 1
    5914:	e2 cf       	rjmp	.-60     	; 0x58da <i2c_task_run+0x28>
		}
	}

	if(run)
    5916:	dd 23       	and	r29, r29
    5918:	91 f0       	breq	.+36     	; 0x593e <i2c_task_run+0x8c>
	{
		// TASK callback
		i2c_callback = i2c_task_next_op;
    591a:	86 ef       	ldi	r24, 0xF6	; 246
    591c:	9c e2       	ldi	r25, 0x2C	; 44
    591e:	90 93 71 17 	sts	0x1771, r25	; 0x801771 <i2c_callback+0x1>
    5922:	80 93 70 17 	sts	0x1770, r24	; 0x801770 <i2c_callback>

		i2c_task.enable = 1;
    5926:	81 e0       	ldi	r24, 0x01	; 1
    5928:	80 93 6c 17 	sts	0x176C, r24	; 0x80176c <i2c_task>
		i2c_task.done = 0;
    592c:	10 92 6e 17 	sts	0x176E, r1	; 0x80176e <i2c_task+0x2>

        // Reset Status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    5930:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5934:	8c 7f       	andi	r24, 0xFC	; 252
    5936:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // TWI Interrupt Clear
        // TWI SEND RESTART
        // TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
        // Disable Slave Mode

		i2c_send_start();
    593a:	ae df       	rcall	.-164    	; 0x5898 <i2c_send_start>
    593c:	15 c0       	rjmp	.+42     	; 0x5968 <i2c_task_run+0xb6>
        // FIXME we should notify the user ?
		// Nothing to DO
		// User Error

		// TASK callback
		i2c_callback = NULL;
    593e:	10 92 71 17 	sts	0x1771, r1	; 0x801771 <i2c_callback+0x1>
    5942:	10 92 70 17 	sts	0x1770, r1	; 0x801770 <i2c_callback>

		// TASK Nothing to DO
		i2c_task.enable = 0;
    5946:	10 92 6c 17 	sts	0x176C, r1	; 0x80176c <i2c_task>
		i2c_task.done = 1;
    594a:	81 e0       	ldi	r24, 0x01	; 1
    594c:	80 93 6e 17 	sts	0x176E, r24	; 0x80176e <i2c_task+0x2>

		// I2C Nothing to do
        i2c.done = 1;
    5950:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <i2c+0x2>
        i2c.enable = 0;
    5954:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x1>

        // TWI Enable
        // TWI Disable Enable
        // TWI Interrupt Clear
        TWCR = _BV(TWEN) | _BV(TWINT);
    5958:	84 e8       	ldi	r24, 0x84	; 132
    595a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        // Reset status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    595e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5962:	8c 7f       	andi	r24, 0xFC	; 252
    5964:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // Disable Slave Mode
        TWAR = 0;
    5968:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	}
	// Disable Slave Mode

	SREG = sreg;
    596c:	ff be       	out	0x3f, r15	; 63

}
    596e:	cd b7       	in	r28, 0x3d	; 61
    5970:	de b7       	in	r29, 0x3e	; 62
    5972:	e6 e0       	ldi	r30, 0x06	; 6
    5974:	0c 94 8e e6 	jmp	0x1cd1c	; 0x1cd1c <__epilogue_restores__+0x18>

00005978 <i2c_fn>:
/// @param[in] *buf: pointer to buffer for send or receive
/// @param[in] len: size of buffer to read or write
/// @return  1 = OK, 0 = ERROR
uint8_t i2c_fn(uint8_t address, uint8_t mode, uint8_t *buf, uint8_t len)
{
	uint8_t sreg = SREG;
    5978:	9f b7       	in	r25, 0x3f	; 63
	
    cli();
    597a:	f8 94       	cli

	// sign task only
	i2c_callback = NULL;
    597c:	10 92 71 17 	sts	0x1771, r1	; 0x801771 <i2c_callback+0x1>
    5980:	10 92 70 17 	sts	0x1770, r1	; 0x801770 <i2c_callback>

	i2c.enable = 1; // Enabled
    5984:	31 e0       	ldi	r19, 0x01	; 1
    5986:	30 93 3d 1a 	sts	0x1A3D, r19	; 0x801a3d <i2c+0x1>
	i2c.done = 0;
    598a:	10 92 3e 1a 	sts	0x1A3E, r1	; 0x801a3e <i2c+0x2>
    i2c.address = (address << 1) | (mode & 1);
    598e:	88 0f       	add	r24, r24
    5990:	61 70       	andi	r22, 0x01	; 1
    5992:	68 2b       	or	r22, r24
    5994:	60 93 3c 1a 	sts	0x1A3C, r22	; 0x801a3c <i2c>
	i2c.flags = 0;
    5998:	10 92 3f 1a 	sts	0x1A3F, r1	; 0x801a3f <i2c+0x3>
    i2c.len = len;
    599c:	20 93 42 1a 	sts	0x1A42, r18	; 0x801a42 <i2c+0x6>
    i2c.ind = 0;
    59a0:	10 92 43 1a 	sts	0x1A43, r1	; 0x801a43 <i2c+0x7>
    i2c.buf = buf;
    59a4:	50 93 45 1a 	sts	0x1A45, r21	; 0x801a45 <i2c+0x9>
    59a8:	40 93 44 1a 	sts	0x1A44, r20	; 0x801a44 <i2c+0x8>

	// Reset Status
	TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    59ac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    59b0:	8c 7f       	andi	r24, 0xFC	; 252
    59b2:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Disable Slave Mode
	TWAR = 0;
    59b6:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>

	SREG = sreg;
    59ba:	9f bf       	out	0x3f, r25	; 63

	i2c_send_start();
    59bc:	6d df       	rcall	.-294    	; 0x5898 <i2c_send_start>
	{
		printf("timeout: %d\r",(int)i2c.timeout);
	}
	printf("\n");
#else
	while(! i2c_done() )
    59be:	48 df       	rcall	.-368    	; 0x5850 <i2c_done>
    59c0:	88 23       	and	r24, r24
    59c2:	e9 f3       	breq	.-6      	; 0x59be <i2c_fn+0x46>
    59c4:	81 e0       	ldi	r24, 0x01	; 1
		;
#endif
	return( i2c.flags ? 0 : 1);
    59c6:	90 91 3f 1a 	lds	r25, 0x1A3F	; 0x801a3f <i2c+0x3>
    59ca:	91 11       	cpse	r25, r1
    59cc:	80 e0       	ldi	r24, 0x00	; 0
    59ce:	08 95       	ret

000059d0 <i2c_send_stop>:
}
    59d0:	ec e3       	ldi	r30, 0x3C	; 60
///
/// @return  void
void i2c_send_stop()
{
    // All transactions are done
    i2c.done = 1;
    59d2:	fa e1       	ldi	r31, 0x1A	; 26
    59d4:	81 e0       	ldi	r24, 0x01	; 1
    59d6:	82 83       	std	Z+2, r24	; 0x02
    i2c.enable = 0;
    59d8:	11 82       	std	Z+1, r1	; 0x01
    // We are DONE
    // TWI Enable
    // TWI Interrupt Disable
    // TWI Interrupt Clear
    // TWI SEND STOP
    TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWSTO);
    59da:	84 e9       	ldi	r24, 0x94	; 148
    59dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	delayus(10);
    59e0:	6a e0       	ldi	r22, 0x0A	; 10
    59e2:	70 e0       	ldi	r23, 0x00	; 0
    59e4:	80 e0       	ldi	r24, 0x00	; 0
    59e6:	90 e0       	ldi	r25, 0x00	; 0
    59e8:	dd ca       	rjmp	.-2630   	; 0x4fa4 <delayus>
    59ea:	08 95       	ret

000059ec <i2c_task_next_op>:

///@brief I2C task ISR callback function
///
/// @return  void
int8_t i2c_task_next_op()
{
    59ec:	cf 93       	push	r28
    59ee:	df 93       	push	r29
	i2c_op_t *o;

	// NOTE: we are in an ISR do not disable other interrupts

	if(i2c_task.enable)
    59f0:	80 91 6c 17 	lds	r24, 0x176C	; 0x80176c <i2c_task>
    59f4:	88 23       	and	r24, r24
    59f6:	09 f4       	brne	.+2      	; 0x59fa <i2c_task_next_op+0xe>
    59f8:	46 c0       	rjmp	.+140    	; 0x5a86 <i2c_task_next_op+0x9a>
	{
		// Save state of LAST operation
		if(i2c_check_op(i2c_task.ind) )
    59fa:	80 91 6d 17 	lds	r24, 0x176D	; 0x80176d <i2c_task+0x1>
    59fe:	35 de       	rcall	.-918    	; 0x566a <i2c_check_op>
    5a00:	88 23       	and	r24, r24
    5a02:	b1 f0       	breq	.+44     	; 0x5a30 <i2c_task_next_op+0x44>
		{
			o = i2c_task_op[i2c_task.ind];
    5a04:	e0 91 6d 17 	lds	r30, 0x176D	; 0x80176d <i2c_task+0x1>
    5a08:	ee 0f       	add	r30, r30
    5a0a:	ff 0b       	sbc	r31, r31
    5a0c:	e4 5b       	subi	r30, 0xB4	; 180
    5a0e:	f8 4e       	sbci	r31, 0xE8	; 232
    5a10:	c0 81       	ld	r28, Z
    5a12:	d1 81       	ldd	r29, Z+1	; 0x01
			// Save state in last opperation
			*o = i2c;
    5a14:	8a e0       	ldi	r24, 0x0A	; 10
    5a16:	ec e3       	ldi	r30, 0x3C	; 60
    5a18:	fa e1       	ldi	r31, 0x1A	; 26
    5a1a:	de 01       	movw	r26, r28
    5a1c:	01 90       	ld	r0, Z+
    5a1e:	0d 92       	st	X+, r0
    5a20:	8a 95       	dec	r24
    5a22:	e1 f7       	brne	.-8      	; 0x5a1c <i2c_task_next_op+0x30>
			if(o->flags)
    5a24:	8b 81       	ldd	r24, Y+3	; 0x03
    5a26:	88 23       	and	r24, r24
    5a28:	19 f0       	breq	.+6      	; 0x5a30 <i2c_task_next_op+0x44>
				i2c_task.error = 1;
    5a2a:	81 e0       	ldi	r24, 0x01	; 1
    5a2c:	80 93 6f 17 	sts	0x176F, r24	; 0x80176f <i2c_task+0x3>
		}

		if(i2c_check_op(i2c_task.ind+1) )
    5a30:	80 91 6d 17 	lds	r24, 0x176D	; 0x80176d <i2c_task+0x1>
    5a34:	8f 5f       	subi	r24, 0xFF	; 255
    5a36:	19 de       	rcall	.-974    	; 0x566a <i2c_check_op>
    5a38:	88 23       	and	r24, r24
    5a3a:	29 f1       	breq	.+74     	; 0x5a86 <i2c_task_next_op+0x9a>
		{
			i2c_task.ind++;
    5a3c:	e0 91 6d 17 	lds	r30, 0x176D	; 0x80176d <i2c_task+0x1>
    5a40:	ef 5f       	subi	r30, 0xFF	; 255
    5a42:	e0 93 6d 17 	sts	0x176D, r30	; 0x80176d <i2c_task+0x1>

			o = i2c_task_op[i2c_task.ind];
    5a46:	ee 0f       	add	r30, r30
    5a48:	ff 0b       	sbc	r31, r31
    5a4a:	e4 5b       	subi	r30, 0xB4	; 180
    5a4c:	f8 4e       	sbci	r31, 0xE8	; 232
    5a4e:	01 90       	ld	r0, Z+
    5a50:	f0 81       	ld	r31, Z
    5a52:	e0 2d       	mov	r30, r0

			if( o->enable == 1 || o->done == 0)
    5a54:	81 81       	ldd	r24, Z+1	; 0x01
    5a56:	81 30       	cpi	r24, 0x01	; 1
    5a58:	19 f0       	breq	.+6      	; 0x5a60 <i2c_task_next_op+0x74>
    5a5a:	82 81       	ldd	r24, Z+2	; 0x02
    5a5c:	81 11       	cpse	r24, r1
    5a5e:	13 c0       	rjmp	.+38     	; 0x5a86 <i2c_task_next_op+0x9a>
			{
				o->timeout = I2C_TIMEOUT;
    5a60:	8a e0       	ldi	r24, 0x0A	; 10
    5a62:	90 e0       	ldi	r25, 0x00	; 0
    5a64:	95 83       	std	Z+5, r25	; 0x05
    5a66:	84 83       	std	Z+4, r24	; 0x04
				o->flags = 0;
    5a68:	13 82       	std	Z+3, r1	; 0x03
				o->ind = 0;
    5a6a:	17 82       	std	Z+7, r1	; 0x07
				o->enable = 1;
    5a6c:	81 e0       	ldi	r24, 0x01	; 1
    5a6e:	81 83       	std	Z+1, r24	; 0x01
				o->done = 0;
    5a70:	12 82       	std	Z+2, r1	; 0x02

				i2c = *o;
    5a72:	8a e0       	ldi	r24, 0x0A	; 10
    5a74:	ac e3       	ldi	r26, 0x3C	; 60
    5a76:	ba e1       	ldi	r27, 0x1A	; 26
    5a78:	01 90       	ld	r0, Z+
    5a7a:	0d 92       	st	X+, r0
    5a7c:	8a 95       	dec	r24

				i2c_send_start();
    5a7e:	e1 f7       	brne	.-8      	; 0x5a78 <i2c_task_next_op+0x8c>
    5a80:	0b df       	rcall	.-490    	; 0x5898 <i2c_send_start>

				return(1);
    5a82:	81 e0       	ldi	r24, 0x01	; 1
    5a84:	0f c0       	rjmp	.+30     	; 0x5aa4 <i2c_task_next_op+0xb8>
			}
		}
	}
	// program error
	// Disable TASK
	i2c_task.enable = 0;
    5a86:	10 92 6c 17 	sts	0x176C, r1	; 0x80176c <i2c_task>
	i2c_task.done = 1;
    5a8a:	81 e0       	ldi	r24, 0x01	; 1
    5a8c:	80 93 6e 17 	sts	0x176E, r24	; 0x80176e <i2c_task+0x2>

	// I2C disable
	i2c.done = 1;
    5a90:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <i2c+0x2>
	i2c.enable = 0;
    5a94:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x1>
	i2c.flags = 0;
    5a98:	10 92 3f 1a 	sts	0x1A3F, r1	; 0x801a3f <i2c+0x3>
	i2c.ind = 0;
    5a9c:	10 92 43 1a 	sts	0x1A43, r1	; 0x801a43 <i2c+0x7>

	i2c_send_stop();
    5aa0:	97 df       	rcall	.-210    	; 0x59d0 <i2c_send_stop>

	return(0);
    5aa2:	80 e0       	ldi	r24, 0x00	; 0
}
    5aa4:	df 91       	pop	r29
    5aa6:	cf 91       	pop	r28
    5aa8:	08 95       	ret

00005aaa <i2c_next>:
{

	// IF we have an i2c_callback() function then
	// it must save status and reset i2c structure for next operation

	if(i2c_callback)
    5aaa:	e0 91 70 17 	lds	r30, 0x1770	; 0x801770 <i2c_callback>
    5aae:	f0 91 71 17 	lds	r31, 0x1771	; 0x801771 <i2c_callback+0x1>
    5ab2:	30 97       	sbiw	r30, 0x00	; 0
    5ab4:	11 f0       	breq	.+4      	; 0x5aba <i2c_next+0x10>
	    i2c_callback();
    5ab6:	09 95       	icall
    5ab8:	08 95       	ret
	else
		i2c_send_stop();
    5aba:	8a cf       	rjmp	.-236    	; 0x59d0 <i2c_send_stop>
    5abc:	08 95       	ret

00005abe <__vector_26>:

///@brief I2C ISR for send/receive
///
/// @return  void
ISR(TWI_vect)
{
    5abe:	1f 92       	push	r1
    5ac0:	0f 92       	push	r0
    5ac2:	0f b6       	in	r0, 0x3f	; 63
    5ac4:	0f 92       	push	r0
    5ac6:	11 24       	eor	r1, r1
    5ac8:	0b b6       	in	r0, 0x3b	; 59
    5aca:	0f 92       	push	r0
    5acc:	2f 93       	push	r18
    5ace:	3f 93       	push	r19
    5ad0:	4f 93       	push	r20
    5ad2:	5f 93       	push	r21
    5ad4:	6f 93       	push	r22
    5ad6:	7f 93       	push	r23
    5ad8:	8f 93       	push	r24
    5ada:	9f 93       	push	r25
    5adc:	af 93       	push	r26
    5ade:	bf 93       	push	r27
    5ae0:	ef 93       	push	r30
    5ae2:	ff 93       	push	r31
	// FYI: reading TWSR clears the status
	// twi.h defines TW_STATUS
    // #define TW_STATUS (TWSR & TW_STATUS_MASK)
    uint8_t status = TW_STATUS;	
    5ae4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Are we Enabled to Receive/Send ?
	// Are we Done ?
	// Program errors - these should not happen
	if(!i2c.enable || i2c.done || !i2c.buf || !i2c.len )
    5ae8:	90 91 3d 1a 	lds	r25, 0x1A3D	; 0x801a3d <i2c+0x1>
    5aec:	99 23       	and	r25, r25
    5aee:	09 f1       	breq	.+66     	; 0x5b32 <__vector_26+0x74>
    5af0:	90 91 3e 1a 	lds	r25, 0x1A3E	; 0x801a3e <i2c+0x2>
    5af4:	91 11       	cpse	r25, r1
    5af6:	1d c0       	rjmp	.+58     	; 0x5b32 <__vector_26+0x74>
    5af8:	20 91 44 1a 	lds	r18, 0x1A44	; 0x801a44 <i2c+0x8>
    5afc:	30 91 45 1a 	lds	r19, 0x1A45	; 0x801a45 <i2c+0x9>
    5b00:	21 15       	cp	r18, r1
    5b02:	31 05       	cpc	r19, r1
    5b04:	b1 f0       	breq	.+44     	; 0x5b32 <__vector_26+0x74>
    5b06:	90 91 42 1a 	lds	r25, 0x1A42	; 0x801a42 <i2c+0x6>
    5b0a:	99 23       	and	r25, r25
    5b0c:	91 f0       	breq	.+36     	; 0x5b32 <__vector_26+0x74>
		i2c_send_stop();
		return;
	}

	// TUMEOUT ? STOP everything
	if(i2c.timeout == 0)
    5b0e:	40 91 40 1a 	lds	r20, 0x1A40	; 0x801a40 <i2c+0x4>
    5b12:	50 91 41 1a 	lds	r21, 0x1A41	; 0x801a41 <i2c+0x5>
    5b16:	45 2b       	or	r20, r21
    5b18:	71 f4       	brne	.+28     	; 0x5b36 <__vector_26+0x78>
	{
		i2c.flags |= (I2C_OP_TIMEOUT);
    5b1a:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <i2c+0x3>
    5b1e:	81 60       	ori	r24, 0x01	; 1
    5b20:	80 93 3f 1a 	sts	0x1A3F, r24	; 0x801a3f <i2c+0x3>
		i2c_task.enable = 0;
    5b24:	10 92 6c 17 	sts	0x176C, r1	; 0x80176c <i2c_task>
		i2c_task.done = 1;
    5b28:	81 e0       	ldi	r24, 0x01	; 1
    5b2a:	80 93 6e 17 	sts	0x176E, r24	; 0x80176e <i2c_task+0x2>
		i2c_task.error = 1;
    5b2e:	80 93 6f 17 	sts	0x176F, r24	; 0x80176f <i2c_task+0x3>
		i2c_send_stop();
    5b32:	4e df       	rcall	.-356    	; 0x59d0 <i2c_send_stop>
		return;
    5b34:	9b c0       	rjmp	.+310    	; 0x5c6c <__vector_26+0x1ae>
	}

	// Master Receiver mode
	switch (status)
    5b36:	88 7f       	andi	r24, 0xF8	; 248
    5b38:	80 33       	cpi	r24, 0x30	; 48
    5b3a:	09 f4       	brne	.+2      	; 0x5b3e <__vector_26+0x80>
    5b3c:	83 c0       	rjmp	.+262    	; 0x5c44 <__vector_26+0x186>
    5b3e:	70 f4       	brcc	.+28     	; 0x5b5c <__vector_26+0x9e>
    5b40:	88 31       	cpi	r24, 0x18	; 24
    5b42:	09 f1       	breq	.+66     	; 0x5b86 <__vector_26+0xc8>
    5b44:	28 f4       	brcc	.+10     	; 0x5b50 <__vector_26+0x92>
    5b46:	88 30       	cpi	r24, 0x08	; 8
    5b48:	c9 f0       	breq	.+50     	; 0x5b7c <__vector_26+0xbe>
    5b4a:	80 31       	cpi	r24, 0x10	; 16
    5b4c:	b9 f0       	breq	.+46     	; 0x5b7c <__vector_26+0xbe>
    5b4e:	83 c0       	rjmp	.+262    	; 0x5c56 <__vector_26+0x198>
    5b50:	80 32       	cpi	r24, 0x20	; 32
    5b52:	09 f4       	brne	.+2      	; 0x5b56 <__vector_26+0x98>
    5b54:	65 c0       	rjmp	.+202    	; 0x5c20 <__vector_26+0x162>
    5b56:	88 32       	cpi	r24, 0x28	; 40
    5b58:	b1 f0       	breq	.+44     	; 0x5b86 <__vector_26+0xc8>
    5b5a:	7d c0       	rjmp	.+250    	; 0x5c56 <__vector_26+0x198>
    5b5c:	88 34       	cpi	r24, 0x48	; 72
    5b5e:	09 f4       	brne	.+2      	; 0x5b62 <__vector_26+0xa4>
    5b60:	68 c0       	rjmp	.+208    	; 0x5c32 <__vector_26+0x174>
    5b62:	38 f4       	brcc	.+14     	; 0x5b72 <__vector_26+0xb4>
    5b64:	88 33       	cpi	r24, 0x38	; 56
    5b66:	09 f4       	brne	.+2      	; 0x5b6a <__vector_26+0xac>
    5b68:	57 c0       	rjmp	.+174    	; 0x5c18 <__vector_26+0x15a>
    5b6a:	80 34       	cpi	r24, 0x40	; 64
    5b6c:	09 f4       	brne	.+2      	; 0x5b70 <__vector_26+0xb2>
    5b6e:	42 c0       	rjmp	.+132    	; 0x5bf4 <__vector_26+0x136>
    5b70:	72 c0       	rjmp	.+228    	; 0x5c56 <__vector_26+0x198>
    5b72:	80 35       	cpi	r24, 0x50	; 80
    5b74:	79 f1       	breq	.+94     	; 0x5bd4 <__vector_26+0x116>
    5b76:	88 35       	cpi	r24, 0x58	; 88
    5b78:	b9 f0       	breq	.+46     	; 0x5ba8 <__vector_26+0xea>
    5b7a:	6d c0       	rjmp	.+218    	; 0x5c56 <__vector_26+0x198>
	{
		case TW_START:		// START has been transmitted
		case TW_REP_START:  // RE-START has been transmitted
			i2c.ind = 0;
    5b7c:	10 92 43 1a 	sts	0x1A43, r1	; 0x801a43 <i2c+0x7>
			TWDR = i2c.address;
    5b80:	80 91 3c 1a 	lds	r24, 0x1A3C	; 0x801a3c <i2c>
    5b84:	0e c0       	rjmp	.+28     	; 0x5ba2 <__vector_26+0xe4>
			break;


		case TW_MT_SLA_ACK:	// SLA+W trasnmitted and ACK received
		case TW_MT_DATA_ACK:// Data trasnmitted and ACK received
			if (i2c.ind < i2c.len)
    5b86:	80 91 43 1a 	lds	r24, 0x1A43	; 0x801a43 <i2c+0x7>
    5b8a:	89 17       	cp	r24, r25
    5b8c:	ec f4       	brge	.+58     	; 0x5bc8 <__vector_26+0x10a>
			{
				TWDR = i2c.buf[i2c.ind++];
    5b8e:	91 e0       	ldi	r25, 0x01	; 1
    5b90:	98 0f       	add	r25, r24
    5b92:	90 93 43 1a 	sts	0x1A43, r25	; 0x801a43 <i2c+0x7>
    5b96:	f9 01       	movw	r30, r18
    5b98:	e8 0f       	add	r30, r24
    5b9a:	f1 1d       	adc	r31, r1
    5b9c:	87 fd       	sbrc	r24, 7
    5b9e:	fa 95       	dec	r31
    5ba0:	80 81       	ld	r24, Z
    5ba2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5ba6:	36 c0       	rjmp	.+108    	; 0x5c14 <__vector_26+0x156>
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			break;

		case TW_MR_DATA_NACK:	// Data received NACK transmitted
			if(i2c.ind < i2c.len)
    5ba8:	80 91 43 1a 	lds	r24, 0x1A43	; 0x801a43 <i2c+0x7>
    5bac:	89 17       	cp	r24, r25
    5bae:	64 f4       	brge	.+24     	; 0x5bc8 <__vector_26+0x10a>
				i2c.buf[i2c.ind++] = TWDR;
    5bb0:	91 e0       	ldi	r25, 0x01	; 1
    5bb2:	98 0f       	add	r25, r24
    5bb4:	90 93 43 1a 	sts	0x1A43, r25	; 0x801a43 <i2c+0x7>
    5bb8:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5bbc:	f9 01       	movw	r30, r18
    5bbe:	e8 0f       	add	r30, r24
    5bc0:	f1 1d       	adc	r31, r1
    5bc2:	87 fd       	sbrc	r24, 7
    5bc4:	fa 95       	dec	r31
    5bc6:	90 83       	st	Z, r25
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			else
			{
				// Done
				i2c.done = 1;
    5bc8:	81 e0       	ldi	r24, 0x01	; 1
    5bca:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <i2c+0x2>
				i2c.enable = 0;
    5bce:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x1>
    5bd2:	4b c0       	rjmp	.+150    	; 0x5c6a <__vector_26+0x1ac>
				i2c_next();
			}
			break;

		case TW_MR_DATA_ACK:	// Data received ACK transmitted
			if(i2c.ind < i2c.len)
    5bd4:	80 91 43 1a 	lds	r24, 0x1A43	; 0x801a43 <i2c+0x7>
    5bd8:	89 17       	cp	r24, r25
    5bda:	64 f4       	brge	.+24     	; 0x5bf4 <__vector_26+0x136>
				i2c.buf[i2c.ind++] = TWDR;
    5bdc:	91 e0       	ldi	r25, 0x01	; 1
    5bde:	98 0f       	add	r25, r24
    5be0:	90 93 43 1a 	sts	0x1A43, r25	; 0x801a43 <i2c+0x7>
    5be4:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5be8:	f9 01       	movw	r30, r18
    5bea:	e8 0f       	add	r30, r24
    5bec:	f1 1d       	adc	r31, r1
    5bee:	87 fd       	sbrc	r24, 7
    5bf0:	fa 95       	dec	r31
    5bf2:	90 83       	st	Z, r25
		case TW_MR_SLA_ACK:		// SLA+R transmitted ACK received
			if ((i2c.ind+1) < i2c.len)
    5bf4:	80 91 43 1a 	lds	r24, 0x1A43	; 0x801a43 <i2c+0x7>
    5bf8:	08 2e       	mov	r0, r24
    5bfa:	00 0c       	add	r0, r0
    5bfc:	99 0b       	sbc	r25, r25
    5bfe:	01 96       	adiw	r24, 0x01	; 1
    5c00:	20 91 42 1a 	lds	r18, 0x1A42	; 0x801a42 <i2c+0x6>
    5c04:	02 2e       	mov	r0, r18
    5c06:	00 0c       	add	r0, r0
    5c08:	33 0b       	sbc	r19, r19
    5c0a:	82 17       	cp	r24, r18
    5c0c:	93 07       	cpc	r25, r19
    5c0e:	14 f4       	brge	.+4      	; 0x5c14 <__vector_26+0x156>
			{
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND ACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5c10:	85 ec       	ldi	r24, 0xC5	; 197
    5c12:	03 c0       	rjmp	.+6      	; 0x5c1a <__vector_26+0x15c>
				// LAST BYTE
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND NACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5c14:	85 e8       	ldi	r24, 0x85	; 133
    5c16:	01 c0       	rjmp	.+2      	; 0x5c1a <__vector_26+0x15c>
		case TW_ARB_LOST:
			// TWI Enable
			// TWI Interrupt Enable
			// TWI Interrupt Clear
			// TWI SEND RESTART
			TWCR = _BV(TWEN) |  _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    5c18:	85 ea       	ldi	r24, 0xA5	; 165
    5c1a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
    5c1e:	26 c0       	rjmp	.+76     	; 0x5c6c <__vector_26+0x1ae>

// Error cases
		case TW_MT_SLA_NACK:	// SLA+W transmitted NACK received
			i2c.done = 1;
    5c20:	81 e0       	ldi	r24, 0x01	; 1
    5c22:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <i2c+0x2>
			i2c.enable = 0;
    5c26:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x1>
			i2c.flags |= I2C_TW_MT_SLA_NACK;
    5c2a:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <i2c+0x3>
    5c2e:	88 60       	ori	r24, 0x08	; 8
    5c30:	1a c0       	rjmp	.+52     	; 0x5c66 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MR_SLA_NACK:	// SLA+R transmitted NACK received
			i2c.done = 1;
    5c32:	81 e0       	ldi	r24, 0x01	; 1
    5c34:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <i2c+0x2>
			i2c.enable = 0;
    5c38:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x1>
			i2c.flags |= I2C_TW_MR_SLA_NACK;
    5c3c:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <i2c+0x3>
    5c40:	80 61       	ori	r24, 0x10	; 16
    5c42:	11 c0       	rjmp	.+34     	; 0x5c66 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MT_DATA_NACK:	// Data Transmitted NACK received
			i2c.done = 1;
    5c44:	81 e0       	ldi	r24, 0x01	; 1
    5c46:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <i2c+0x2>
			i2c.enable = 0;
    5c4a:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x1>
			i2c.flags |= I2C_TW_MT_DATA_NACK;
    5c4e:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <i2c+0x3>
    5c52:	80 62       	ori	r24, 0x20	; 32
    5c54:	08 c0       	rjmp	.+16     	; 0x5c66 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		default:				// Error
			i2c.done = 1;
    5c56:	81 e0       	ldi	r24, 0x01	; 1
    5c58:	80 93 3e 1a 	sts	0x1A3E, r24	; 0x801a3e <i2c+0x2>
			i2c.enable = 0;
    5c5c:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <i2c+0x1>
			// ERROR
			i2c.flags |= I2C_BUS_ERROR;
    5c60:	80 91 3f 1a 	lds	r24, 0x1A3F	; 0x801a3f <i2c+0x3>
    5c64:	80 64       	ori	r24, 0x40	; 64
    5c66:	80 93 3f 1a 	sts	0x1A3F, r24	; 0x801a3f <i2c+0x3>
			i2c_next();
    5c6a:	1f df       	rcall	.-450    	; 0x5aaa <i2c_next>
			break;
	}
}
    5c6c:	ff 91       	pop	r31
    5c6e:	ef 91       	pop	r30
    5c70:	bf 91       	pop	r27
    5c72:	af 91       	pop	r26
    5c74:	9f 91       	pop	r25
    5c76:	8f 91       	pop	r24
    5c78:	7f 91       	pop	r23
    5c7a:	6f 91       	pop	r22
    5c7c:	5f 91       	pop	r21
    5c7e:	4f 91       	pop	r20
    5c80:	3f 91       	pop	r19
    5c82:	2f 91       	pop	r18
    5c84:	0f 90       	pop	r0
    5c86:	0b be       	out	0x3b, r0	; 59
    5c88:	0f 90       	pop	r0
    5c8a:	0f be       	out	0x3f, r0	; 63
    5c8c:	0f 90       	pop	r0
    5c8e:	1f 90       	pop	r1
    5c90:	18 95       	reti

00005c92 <i2c_print_error>:
/// @brief Display Errors for i2c_task_op[index]
///
/// @param[in] index: index of i2c_task_op[] array
/// @return  void
void i2c_print_error(i2c_op_t *o)
{
    5c92:	cf 93       	push	r28
    5c94:	00 d0       	rcall	.+0      	; 0x5c96 <i2c_print_error+0x4>
    5c96:	00 d0       	rcall	.+0      	; 0x5c98 <i2c_print_error+0x6>
    5c98:	1f 92       	push	r1
    int flags = o->flags;
    5c9a:	fc 01       	movw	r30, r24
    5c9c:	c3 81       	ldd	r28, Z+3	; 0x03

	if(flags)
    5c9e:	cc 23       	and	r28, r28
    5ca0:	09 f4       	brne	.+2      	; 0x5ca4 <i2c_print_error+0x12>
    5ca2:	67 c0       	rjmp	.+206    	; 0x5d72 <i2c_print_error+0xe0>
	{
		printf("  %s\n", (i2c.done ? "DONE" : "ACTIVE") );
    5ca4:	80 91 3e 1a 	lds	r24, 0x1A3E	; 0x801a3e <i2c+0x2>
    5ca8:	81 11       	cpse	r24, r1
    5caa:	03 c0       	rjmp	.+6      	; 0x5cb2 <i2c_print_error+0x20>
    5cac:	88 e2       	ldi	r24, 0x28	; 40
    5cae:	93 e0       	ldi	r25, 0x03	; 3
    5cb0:	02 c0       	rjmp	.+4      	; 0x5cb6 <i2c_print_error+0x24>
    5cb2:	83 e2       	ldi	r24, 0x23	; 35
    5cb4:	93 e0       	ldi	r25, 0x03	; 3
    5cb6:	ed b7       	in	r30, 0x3d	; 61
    5cb8:	fe b7       	in	r31, 0x3e	; 62
    5cba:	95 83       	std	Z+5, r25	; 0x05
    5cbc:	84 83       	std	Z+4, r24	; 0x04
    5cbe:	81 ec       	ldi	r24, 0xC1	; 193
    5cc0:	93 e0       	ldi	r25, 0x03	; 3
    5cc2:	a0 e0       	ldi	r26, 0x00	; 0
    5cc4:	81 83       	std	Z+1, r24	; 0x01
    5cc6:	92 83       	std	Z+2, r25	; 0x02
    5cc8:	a3 83       	std	Z+3, r26	; 0x03
    5cca:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
		if(flags & I2C_OP_TIMEOUT)
    5cce:	c0 ff       	sbrs	r28, 0
    5cd0:	0a c0       	rjmp	.+20     	; 0x5ce6 <i2c_print_error+0x54>
			printf("  OP_TIMEOUT\n");
    5cd2:	83 eb       	ldi	r24, 0xB3	; 179
    5cd4:	93 e0       	ldi	r25, 0x03	; 3
    5cd6:	a0 e0       	ldi	r26, 0x00	; 0
    5cd8:	ed b7       	in	r30, 0x3d	; 61
    5cda:	fe b7       	in	r31, 0x3e	; 62
    5cdc:	81 83       	std	Z+1, r24	; 0x01
    5cde:	92 83       	std	Z+2, r25	; 0x02
    5ce0:	a3 83       	std	Z+3, r26	; 0x03
    5ce2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
		if(flags & I2C_OP_LEN)
    5ce6:	c1 ff       	sbrs	r28, 1
    5ce8:	0a c0       	rjmp	.+20     	; 0x5cfe <i2c_print_error+0x6c>
			printf("  OP_LEN\n");
    5cea:	89 ea       	ldi	r24, 0xA9	; 169
    5cec:	93 e0       	ldi	r25, 0x03	; 3
    5cee:	a0 e0       	ldi	r26, 0x00	; 0
    5cf0:	ed b7       	in	r30, 0x3d	; 61
    5cf2:	fe b7       	in	r31, 0x3e	; 62
    5cf4:	81 83       	std	Z+1, r24	; 0x01
    5cf6:	92 83       	std	Z+2, r25	; 0x02
    5cf8:	a3 83       	std	Z+3, r26	; 0x03
    5cfa:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
		if(flags & I2C_OP_ERROR)
    5cfe:	c2 ff       	sbrs	r28, 2
    5d00:	0a c0       	rjmp	.+20     	; 0x5d16 <i2c_print_error+0x84>
			printf("  OP_ERROR\n");
    5d02:	8d e9       	ldi	r24, 0x9D	; 157
    5d04:	93 e0       	ldi	r25, 0x03	; 3
    5d06:	a0 e0       	ldi	r26, 0x00	; 0
    5d08:	ed b7       	in	r30, 0x3d	; 61
    5d0a:	fe b7       	in	r31, 0x3e	; 62
    5d0c:	81 83       	std	Z+1, r24	; 0x01
    5d0e:	92 83       	std	Z+2, r25	; 0x02
    5d10:	a3 83       	std	Z+3, r26	; 0x03
    5d12:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
		if(flags & I2C_TW_MR_SLA_NACK)
    5d16:	c4 ff       	sbrs	r28, 4
    5d18:	0a c0       	rjmp	.+20     	; 0x5d2e <i2c_print_error+0x9c>
			printf("  TW_MR_SLA_NACK\n");
    5d1a:	8b e8       	ldi	r24, 0x8B	; 139
    5d1c:	93 e0       	ldi	r25, 0x03	; 3
    5d1e:	a0 e0       	ldi	r26, 0x00	; 0
    5d20:	ed b7       	in	r30, 0x3d	; 61
    5d22:	fe b7       	in	r31, 0x3e	; 62
    5d24:	81 83       	std	Z+1, r24	; 0x01
    5d26:	92 83       	std	Z+2, r25	; 0x02
    5d28:	a3 83       	std	Z+3, r26	; 0x03
    5d2a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
		if(flags & I2C_TW_MT_SLA_NACK)
    5d2e:	c3 ff       	sbrs	r28, 3
    5d30:	0a c0       	rjmp	.+20     	; 0x5d46 <i2c_print_error+0xb4>
			printf("  TW_MT_SLA_NACK\n");
    5d32:	89 e7       	ldi	r24, 0x79	; 121
    5d34:	93 e0       	ldi	r25, 0x03	; 3
    5d36:	a0 e0       	ldi	r26, 0x00	; 0
    5d38:	ed b7       	in	r30, 0x3d	; 61
    5d3a:	fe b7       	in	r31, 0x3e	; 62
    5d3c:	81 83       	std	Z+1, r24	; 0x01
    5d3e:	92 83       	std	Z+2, r25	; 0x02
    5d40:	a3 83       	std	Z+3, r26	; 0x03
    5d42:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
		if(flags & I2C_TW_MT_DATA_NACK)
    5d46:	c5 ff       	sbrs	r28, 5
    5d48:	0a c0       	rjmp	.+20     	; 0x5d5e <i2c_print_error+0xcc>
			printf("  TW_MT_DATA_NACK\n");
    5d4a:	86 e6       	ldi	r24, 0x66	; 102
    5d4c:	93 e0       	ldi	r25, 0x03	; 3
    5d4e:	a0 e0       	ldi	r26, 0x00	; 0
    5d50:	ed b7       	in	r30, 0x3d	; 61
    5d52:	fe b7       	in	r31, 0x3e	; 62
    5d54:	81 83       	std	Z+1, r24	; 0x01
    5d56:	92 83       	std	Z+2, r25	; 0x02
    5d58:	a3 83       	std	Z+3, r26	; 0x03
    5d5a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
		printf("\n");
    5d5e:	84 e6       	ldi	r24, 0x64	; 100
    5d60:	93 e0       	ldi	r25, 0x03	; 3
    5d62:	a0 e0       	ldi	r26, 0x00	; 0
    5d64:	ed b7       	in	r30, 0x3d	; 61
    5d66:	fe b7       	in	r31, 0x3e	; 62
    5d68:	81 83       	std	Z+1, r24	; 0x01
    5d6a:	92 83       	std	Z+2, r25	; 0x02
    5d6c:	a3 83       	std	Z+3, r26	; 0x03
    5d6e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
	}
}
    5d72:	0f 90       	pop	r0
    5d74:	0f 90       	pop	r0
    5d76:	0f 90       	pop	r0
    5d78:	0f 90       	pop	r0
    5d7a:	0f 90       	pop	r0
    5d7c:	cf 91       	pop	r28
    5d7e:	08 95       	ret

00005d80 <i2c_display_task_errors>:

///@brief Display any task errors
void i2c_display_task_errors()
{
    5d80:	6f 92       	push	r6
    5d82:	7f 92       	push	r7
    5d84:	8f 92       	push	r8
    5d86:	af 92       	push	r10
    5d88:	bf 92       	push	r11
    5d8a:	cf 92       	push	r12
    5d8c:	df 92       	push	r13
    5d8e:	ef 92       	push	r14
    5d90:	0f 93       	push	r16
    5d92:	1f 93       	push	r17
    5d94:	cf 93       	push	r28
    5d96:	df 93       	push	r29
    5d98:	00 d0       	rcall	.+0      	; 0x5d9a <i2c_display_task_errors+0x1a>
    5d9a:	00 d0       	rcall	.+0      	; 0x5d9c <i2c_display_task_errors+0x1c>
    5d9c:	1f 92       	push	r1
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
    5d9e:	80 91 6e 17 	lds	r24, 0x176E	; 0x80176e <i2c_task+0x2>
    5da2:	90 e0       	ldi	r25, 0x00	; 0
    5da4:	ed b7       	in	r30, 0x3d	; 61
    5da6:	fe b7       	in	r31, 0x3e	; 62
    5da8:	95 83       	std	Z+5, r25	; 0x05
    5daa:	84 83       	std	Z+4, r24	; 0x04
    5dac:	81 e5       	ldi	r24, 0x51	; 81
    5dae:	93 e0       	ldi	r25, 0x03	; 3
    5db0:	a0 e0       	ldi	r26, 0x00	; 0
    5db2:	81 83       	std	Z+1, r24	; 0x01
    5db4:	92 83       	std	Z+2, r25	; 0x02
    5db6:	a3 83       	std	Z+3, r26	; 0x03
    5db8:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
    5dbc:	80 91 6f 17 	lds	r24, 0x176F	; 0x80176f <i2c_task+0x3>
    5dc0:	90 e0       	ldi	r25, 0x00	; 0
    5dc2:	ed b7       	in	r30, 0x3d	; 61
    5dc4:	fe b7       	in	r31, 0x3e	; 62
    5dc6:	95 83       	std	Z+5, r25	; 0x05
    5dc8:	84 83       	std	Z+4, r24	; 0x04
    5dca:	8d e3       	ldi	r24, 0x3D	; 61
    5dcc:	93 e0       	ldi	r25, 0x03	; 3
    5dce:	a0 e0       	ldi	r26, 0x00	; 0
    5dd0:	81 83       	std	Z+1, r24	; 0x01
    5dd2:	92 83       	std	Z+2, r25	; 0x02
    5dd4:	a3 83       	std	Z+3, r26	; 0x03
    5dd6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    5dda:	cc e4       	ldi	r28, 0x4C	; 76
    5ddc:	d7 e1       	ldi	r29, 0x17	; 23
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5dde:	00 e0       	ldi	r16, 0x00	; 0
    5de0:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("task: %d\n", (int) i);
    5de2:	83 e3       	ldi	r24, 0x33	; 51
    5de4:	93 e0       	ldi	r25, 0x03	; 3
    5de6:	6c 01       	movw	r12, r24
    5de8:	e1 2c       	mov	r14, r1
		i2c_print_error(i2c_task_op[i]);
		printf("\n");
    5dea:	81 e3       	ldi	r24, 0x31	; 49
    5dec:	93 e0       	ldi	r25, 0x03	; 3
    5dee:	3c 01       	movw	r6, r24
    5df0:	81 2c       	mov	r8, r1
void i2c_display_task_errors()
{
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    5df2:	30 2f       	mov	r19, r16
    5df4:	21 2f       	mov	r18, r17
    5df6:	5e 01       	movw	r10, r28
    5df8:	0f 5f       	subi	r16, 0xFF	; 255
    5dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    5dfc:	88 81       	ld	r24, Y
    5dfe:	99 81       	ldd	r25, Y+1	; 0x01
    5e00:	89 2b       	or	r24, r25
    5e02:	b1 f0       	breq	.+44     	; 0x5e30 <i2c_display_task_errors+0xb0>
	{
		printf("task: %d\n", (int) i);
    5e04:	ed b7       	in	r30, 0x3d	; 61
    5e06:	fe b7       	in	r31, 0x3e	; 62
    5e08:	34 83       	std	Z+4, r19	; 0x04
    5e0a:	25 83       	std	Z+5, r18	; 0x05
    5e0c:	c1 82       	std	Z+1, r12	; 0x01
    5e0e:	d2 82       	std	Z+2, r13	; 0x02
    5e10:	e3 82       	std	Z+3, r14	; 0x03
    5e12:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    5e16:	22 96       	adiw	r28, 0x02	; 2
		i2c_print_error(i2c_task_op[i]);
    5e18:	f5 01       	movw	r30, r10
    5e1a:	80 81       	ld	r24, Z
    5e1c:	91 81       	ldd	r25, Z+1	; 0x01
    5e1e:	39 df       	rcall	.-398    	; 0x5c92 <i2c_print_error>
		printf("\n");
    5e20:	ed b7       	in	r30, 0x3d	; 61
    5e22:	fe b7       	in	r31, 0x3e	; 62
    5e24:	61 82       	std	Z+1, r6	; 0x01
    5e26:	72 82       	std	Z+2, r7	; 0x02
    5e28:	83 82       	std	Z+3, r8	; 0x03
    5e2a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    5e2e:	e1 cf       	rjmp	.-62     	; 0x5df2 <i2c_display_task_errors+0x72>
	}
}
    5e30:	0f 90       	pop	r0
    5e32:	0f 90       	pop	r0
    5e34:	0f 90       	pop	r0
    5e36:	0f 90       	pop	r0
    5e38:	0f 90       	pop	r0
    5e3a:	df 91       	pop	r29
    5e3c:	cf 91       	pop	r28
    5e3e:	1f 91       	pop	r17
    5e40:	0f 91       	pop	r16
    5e42:	ef 90       	pop	r14
    5e44:	df 90       	pop	r13
    5e46:	cf 90       	pop	r12
    5e48:	bf 90       	pop	r11
    5e4a:	af 90       	pop	r10
    5e4c:	8f 90       	pop	r8
    5e4e:	7f 90       	pop	r7
    5e50:	6f 90       	pop	r6
    5e52:	08 95       	ret

00005e54 <BINtoBCD>:
/// @return 0 if not running.
/// @return -1 ERROR
int8_t rtc_run_test()
{
	return ( rtc_run(-1) );
}
    5e54:	6a e0       	ldi	r22, 0x0A	; 10
    5e56:	0e 94 c6 e5 	call	0x1cb8c	; 0x1cb8c <__udivmodqi4>
    5e5a:	82 95       	swap	r24
    5e5c:	80 7f       	andi	r24, 0xF0	; 240
    5e5e:	89 2b       	or	r24, r25
    5e60:	08 95       	ret

00005e62 <BCDtoBIN>:
    5e62:	98 2f       	mov	r25, r24
    5e64:	92 95       	swap	r25
    5e66:	9f 70       	andi	r25, 0x0F	; 15
    5e68:	8f 70       	andi	r24, 0x0F	; 15
    5e6a:	2a e0       	ldi	r18, 0x0A	; 10
    5e6c:	92 9f       	mul	r25, r18
    5e6e:	80 0d       	add	r24, r0
    5e70:	11 24       	eor	r1, r1
    5e72:	08 95       	ret

00005e74 <i2c_rtc_write>:
    5e74:	ac e0       	ldi	r26, 0x0C	; 12
    5e76:	b0 e0       	ldi	r27, 0x00	; 0
    5e78:	e0 e4       	ldi	r30, 0x40	; 64
    5e7a:	ff e2       	ldi	r31, 0x2F	; 47
    5e7c:	0c 94 74 e6 	jmp	0x1cce8	; 0x1cce8 <__prologue_saves__+0x1c>
    5e80:	9f ef       	ldi	r25, 0xFF	; 255
    5e82:	92 0f       	add	r25, r18
    5e84:	98 30       	cpi	r25, 0x08	; 8
    5e86:	50 f5       	brcc	.+84     	; 0x5edc <i2c_rtc_write+0x68>
    5e88:	6c 83       	std	Y+4, r22	; 0x04
    5e8a:	90 e0       	ldi	r25, 0x00	; 0
    5e8c:	02 2f       	mov	r16, r18
    5e8e:	10 e0       	ldi	r17, 0x00	; 0
    5e90:	69 2f       	mov	r22, r25
    5e92:	09 2e       	mov	r0, r25
    5e94:	00 0c       	add	r0, r0
    5e96:	77 0b       	sbc	r23, r23
    5e98:	60 17       	cp	r22, r16
    5e9a:	71 07       	cpc	r23, r17
    5e9c:	6c f4       	brge	.+26     	; 0x5eb8 <i2c_rtc_write+0x44>
    5e9e:	a5 e0       	ldi	r26, 0x05	; 5
    5ea0:	b0 e0       	ldi	r27, 0x00	; 0
    5ea2:	ac 0f       	add	r26, r28
    5ea4:	bd 1f       	adc	r27, r29
    5ea6:	a6 0f       	add	r26, r22
    5ea8:	b7 1f       	adc	r27, r23
    5eaa:	64 0f       	add	r22, r20
    5eac:	75 1f       	adc	r23, r21
    5eae:	fb 01       	movw	r30, r22
    5eb0:	30 81       	ld	r19, Z
    5eb2:	3c 93       	st	X, r19
    5eb4:	9f 5f       	subi	r25, 0xFF	; 255
    5eb6:	ec cf       	rjmp	.-40     	; 0x5e90 <i2c_rtc_write+0x1c>
    5eb8:	2f 5f       	subi	r18, 0xFF	; 255
    5eba:	ae 01       	movw	r20, r28
    5ebc:	4c 5f       	subi	r20, 0xFC	; 252
    5ebe:	5f 4f       	sbci	r21, 0xFF	; 255
    5ec0:	60 e0       	ldi	r22, 0x00	; 0
    5ec2:	5a dd       	rcall	.-1356   	; 0x5978 <i2c_fn>
    5ec4:	81 11       	cpse	r24, r1
    5ec6:	0c c0       	rjmp	.+24     	; 0x5ee0 <i2c_rtc_write+0x6c>
    5ec8:	8e ed       	ldi	r24, 0xDE	; 222
    5eca:	94 e0       	ldi	r25, 0x04	; 4
    5ecc:	a0 e0       	ldi	r26, 0x00	; 0
    5ece:	ed b7       	in	r30, 0x3d	; 61
    5ed0:	fe b7       	in	r31, 0x3e	; 62
    5ed2:	81 83       	std	Z+1, r24	; 0x01
    5ed4:	92 83       	std	Z+2, r25	; 0x02
    5ed6:	a3 83       	std	Z+3, r26	; 0x03
    5ed8:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    5edc:	80 e0       	ldi	r24, 0x00	; 0
    5ede:	01 c0       	rjmp	.+2      	; 0x5ee2 <i2c_rtc_write+0x6e>
    5ee0:	81 e0       	ldi	r24, 0x01	; 1
    5ee2:	2c 96       	adiw	r28, 0x0c	; 12
    5ee4:	e4 e0       	ldi	r30, 0x04	; 4
    5ee6:	0c 94 90 e6 	jmp	0x1cd20	; 0x1cd20 <__epilogue_restores__+0x1c>

00005eea <i2c_rtc_read>:
    5eea:	a4 e0       	ldi	r26, 0x04	; 4
    5eec:	b0 e0       	ldi	r27, 0x00	; 0
    5eee:	eb e7       	ldi	r30, 0x7B	; 123
    5ef0:	ff e2       	ldi	r31, 0x2F	; 47
    5ef2:	0c 94 72 e6 	jmp	0x1cce4	; 0x1cce4 <__prologue_saves__+0x18>
    5ef6:	6c 83       	std	Y+4, r22	; 0x04
    5ef8:	9f ef       	ldi	r25, 0xFF	; 255
    5efa:	92 0f       	add	r25, r18
    5efc:	98 30       	cpi	r25, 0x08	; 8
    5efe:	f8 f4       	brcc	.+62     	; 0x5f3e <i2c_rtc_read+0x54>
    5f00:	02 2f       	mov	r16, r18
    5f02:	7a 01       	movw	r14, r20
    5f04:	18 2f       	mov	r17, r24
    5f06:	21 e0       	ldi	r18, 0x01	; 1
    5f08:	ae 01       	movw	r20, r28
    5f0a:	4c 5f       	subi	r20, 0xFC	; 252
    5f0c:	5f 4f       	sbci	r21, 0xFF	; 255
    5f0e:	60 e0       	ldi	r22, 0x00	; 0
    5f10:	33 dd       	rcall	.-1434   	; 0x5978 <i2c_fn>
    5f12:	81 11       	cpse	r24, r1
    5f14:	03 c0       	rjmp	.+6      	; 0x5f1c <i2c_rtc_read+0x32>
    5f16:	82 ec       	ldi	r24, 0xC2	; 194
    5f18:	94 e0       	ldi	r25, 0x04	; 4
    5f1a:	09 c0       	rjmp	.+18     	; 0x5f2e <i2c_rtc_read+0x44>
    5f1c:	20 2f       	mov	r18, r16
    5f1e:	a7 01       	movw	r20, r14
    5f20:	61 e0       	ldi	r22, 0x01	; 1
    5f22:	81 2f       	mov	r24, r17
    5f24:	29 dd       	rcall	.-1454   	; 0x5978 <i2c_fn>
    5f26:	81 11       	cpse	r24, r1
    5f28:	0c c0       	rjmp	.+24     	; 0x5f42 <i2c_rtc_read+0x58>
    5f2a:	89 ea       	ldi	r24, 0xA9	; 169
    5f2c:	94 e0       	ldi	r25, 0x04	; 4
    5f2e:	a0 e0       	ldi	r26, 0x00	; 0
    5f30:	ed b7       	in	r30, 0x3d	; 61
    5f32:	fe b7       	in	r31, 0x3e	; 62
    5f34:	81 83       	std	Z+1, r24	; 0x01
    5f36:	92 83       	std	Z+2, r25	; 0x02
    5f38:	a3 83       	std	Z+3, r26	; 0x03
    5f3a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    5f3e:	80 e0       	ldi	r24, 0x00	; 0
    5f40:	01 c0       	rjmp	.+2      	; 0x5f44 <i2c_rtc_read+0x5a>
    5f42:	81 e0       	ldi	r24, 0x01	; 1
    5f44:	24 96       	adiw	r28, 0x04	; 4
    5f46:	e6 e0       	ldi	r30, 0x06	; 6
    5f48:	0c 94 8e e6 	jmp	0x1cd1c	; 0x1cd1c <__epilogue_restores__+0x18>

00005f4c <i2c_rtc_init>:
    5f4c:	60 ea       	ldi	r22, 0xA0	; 160
    5f4e:	76 e8       	ldi	r23, 0x86	; 134
    5f50:	81 e0       	ldi	r24, 0x01	; 1
    5f52:	90 e0       	ldi	r25, 0x00	; 0
    5f54:	18 cc       	rjmp	.-2000   	; 0x5786 <i2c_init>
    5f56:	08 95       	ret

00005f58 <rtc_write>:
    5f58:	ab e0       	ldi	r26, 0x0B	; 11
    5f5a:	b0 e0       	ldi	r27, 0x00	; 0
    5f5c:	e2 eb       	ldi	r30, 0xB2	; 178
    5f5e:	ff e2       	ldi	r31, 0x2F	; 47
    5f60:	0c 94 74 e6 	jmp	0x1cce8	; 0x1cce8 <__prologue_saves__+0x1c>
    5f64:	8c 01       	movw	r16, r24
    5f66:	fc 01       	movw	r30, r24
    5f68:	80 81       	ld	r24, Z
    5f6a:	74 df       	rcall	.-280    	; 0x5e54 <BINtoBCD>
    5f6c:	8f 77       	andi	r24, 0x7F	; 127
    5f6e:	8c 83       	std	Y+4, r24	; 0x04
    5f70:	f8 01       	movw	r30, r16
    5f72:	82 81       	ldd	r24, Z+2	; 0x02
    5f74:	6f df       	rcall	.-290    	; 0x5e54 <BINtoBCD>
    5f76:	8f 77       	andi	r24, 0x7F	; 127
    5f78:	8d 83       	std	Y+5, r24	; 0x05
    5f7a:	f8 01       	movw	r30, r16
    5f7c:	84 81       	ldd	r24, Z+4	; 0x04
    5f7e:	6a df       	rcall	.-300    	; 0x5e54 <BINtoBCD>
    5f80:	8f 73       	andi	r24, 0x3F	; 63
    5f82:	8e 83       	std	Y+6, r24	; 0x06
    5f84:	f8 01       	movw	r30, r16
    5f86:	84 85       	ldd	r24, Z+12	; 0x0c
    5f88:	87 70       	andi	r24, 0x07	; 7
    5f8a:	8f 5f       	subi	r24, 0xFF	; 255
    5f8c:	8f 83       	std	Y+7, r24	; 0x07
    5f8e:	86 81       	ldd	r24, Z+6	; 0x06
    5f90:	61 df       	rcall	.-318    	; 0x5e54 <BINtoBCD>
    5f92:	8f 73       	andi	r24, 0x3F	; 63
    5f94:	88 87       	std	Y+8, r24	; 0x08
    5f96:	f8 01       	movw	r30, r16
    5f98:	80 85       	ldd	r24, Z+8	; 0x08
    5f9a:	8f 5f       	subi	r24, 0xFF	; 255
    5f9c:	5b df       	rcall	.-330    	; 0x5e54 <BINtoBCD>
    5f9e:	8f 71       	andi	r24, 0x1F	; 31
    5fa0:	89 87       	std	Y+9, r24	; 0x09
    5fa2:	f8 01       	movw	r30, r16
    5fa4:	82 85       	ldd	r24, Z+10	; 0x0a
    5fa6:	84 56       	subi	r24, 0x64	; 100
    5fa8:	55 df       	rcall	.-342    	; 0x5e54 <BINtoBCD>
    5faa:	8a 87       	std	Y+10, r24	; 0x0a
    5fac:	83 e9       	ldi	r24, 0x93	; 147
    5fae:	8b 87       	std	Y+11, r24	; 0x0b
    5fb0:	28 e0       	ldi	r18, 0x08	; 8
    5fb2:	ae 01       	movw	r20, r28
    5fb4:	4c 5f       	subi	r20, 0xFC	; 252
    5fb6:	5f 4f       	sbci	r21, 0xFF	; 255
    5fb8:	60 e0       	ldi	r22, 0x00	; 0
    5fba:	88 e6       	ldi	r24, 0x68	; 104
    5fbc:	5b df       	rcall	.-330    	; 0x5e74 <i2c_rtc_write>
    5fbe:	81 11       	cpse	r24, r1
    5fc0:	0c c0       	rjmp	.+24     	; 0x5fda <rtc_write+0x82>
    5fc2:	88 e9       	ldi	r24, 0x98	; 152
    5fc4:	94 e0       	ldi	r25, 0x04	; 4
    5fc6:	a0 e0       	ldi	r26, 0x00	; 0
    5fc8:	ed b7       	in	r30, 0x3d	; 61
    5fca:	fe b7       	in	r31, 0x3e	; 62
    5fcc:	81 83       	std	Z+1, r24	; 0x01
    5fce:	92 83       	std	Z+2, r25	; 0x02
    5fd0:	a3 83       	std	Z+3, r26	; 0x03
    5fd2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    5fd6:	80 e0       	ldi	r24, 0x00	; 0
    5fd8:	01 c0       	rjmp	.+2      	; 0x5fdc <rtc_write+0x84>
    5fda:	81 e0       	ldi	r24, 0x01	; 1
    5fdc:	2b 96       	adiw	r28, 0x0b	; 11
    5fde:	e4 e0       	ldi	r30, 0x04	; 4
    5fe0:	0c 94 90 e6 	jmp	0x1cd20	; 0x1cd20 <__epilogue_restores__+0x1c>

00005fe4 <rtc_read>:
    5fe4:	ab e0       	ldi	r26, 0x0B	; 11
    5fe6:	b0 e0       	ldi	r27, 0x00	; 0
    5fe8:	e8 ef       	ldi	r30, 0xF8	; 248
    5fea:	ff e2       	ldi	r31, 0x2F	; 47
    5fec:	0c 94 74 e6 	jmp	0x1cce8	; 0x1cce8 <__prologue_saves__+0x1c>
    5ff0:	8c 01       	movw	r16, r24
    5ff2:	28 e0       	ldi	r18, 0x08	; 8
    5ff4:	ae 01       	movw	r20, r28
    5ff6:	4c 5f       	subi	r20, 0xFC	; 252
    5ff8:	5f 4f       	sbci	r21, 0xFF	; 255
    5ffa:	60 e0       	ldi	r22, 0x00	; 0
    5ffc:	88 e6       	ldi	r24, 0x68	; 104
    5ffe:	75 df       	rcall	.-278    	; 0x5eea <i2c_rtc_read>
    6000:	81 11       	cpse	r24, r1
    6002:	0c c0       	rjmp	.+24     	; 0x601c <rtc_read+0x38>
    6004:	88 e8       	ldi	r24, 0x88	; 136
    6006:	94 e0       	ldi	r25, 0x04	; 4
    6008:	a0 e0       	ldi	r26, 0x00	; 0
    600a:	ed b7       	in	r30, 0x3d	; 61
    600c:	fe b7       	in	r31, 0x3e	; 62
    600e:	81 83       	std	Z+1, r24	; 0x01
    6010:	92 83       	std	Z+2, r25	; 0x02
    6012:	a3 83       	std	Z+3, r26	; 0x03
    6014:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    6018:	80 e0       	ldi	r24, 0x00	; 0
    601a:	33 c0       	rjmp	.+102    	; 0x6082 <rtc_read+0x9e>
    601c:	8c 81       	ldd	r24, Y+4	; 0x04
    601e:	8f 77       	andi	r24, 0x7F	; 127
    6020:	20 df       	rcall	.-448    	; 0x5e62 <BCDtoBIN>
    6022:	90 e0       	ldi	r25, 0x00	; 0
    6024:	f8 01       	movw	r30, r16
    6026:	91 83       	std	Z+1, r25	; 0x01
    6028:	80 83       	st	Z, r24
    602a:	8d 81       	ldd	r24, Y+5	; 0x05
    602c:	8f 77       	andi	r24, 0x7F	; 127
    602e:	19 df       	rcall	.-462    	; 0x5e62 <BCDtoBIN>
    6030:	90 e0       	ldi	r25, 0x00	; 0
    6032:	f8 01       	movw	r30, r16
    6034:	93 83       	std	Z+3, r25	; 0x03
    6036:	82 83       	std	Z+2, r24	; 0x02
    6038:	8e 81       	ldd	r24, Y+6	; 0x06
    603a:	8f 73       	andi	r24, 0x3F	; 63
    603c:	12 df       	rcall	.-476    	; 0x5e62 <BCDtoBIN>
    603e:	90 e0       	ldi	r25, 0x00	; 0
    6040:	f8 01       	movw	r30, r16
    6042:	95 83       	std	Z+5, r25	; 0x05
    6044:	84 83       	std	Z+4, r24	; 0x04
    6046:	8f 81       	ldd	r24, Y+7	; 0x07
    6048:	87 70       	andi	r24, 0x07	; 7
    604a:	90 e0       	ldi	r25, 0x00	; 0
    604c:	01 97       	sbiw	r24, 0x01	; 1
    604e:	95 87       	std	Z+13, r25	; 0x0d
    6050:	84 87       	std	Z+12, r24	; 0x0c
    6052:	88 85       	ldd	r24, Y+8	; 0x08
    6054:	8f 73       	andi	r24, 0x3F	; 63
    6056:	05 df       	rcall	.-502    	; 0x5e62 <BCDtoBIN>
    6058:	90 e0       	ldi	r25, 0x00	; 0
    605a:	f8 01       	movw	r30, r16
    605c:	97 83       	std	Z+7, r25	; 0x07
    605e:	86 83       	std	Z+6, r24	; 0x06
    6060:	89 85       	ldd	r24, Y+9	; 0x09
    6062:	8f 71       	andi	r24, 0x1F	; 31
    6064:	fe de       	rcall	.-516    	; 0x5e62 <BCDtoBIN>
    6066:	90 e0       	ldi	r25, 0x00	; 0
    6068:	01 97       	sbiw	r24, 0x01	; 1
    606a:	f8 01       	movw	r30, r16
    606c:	91 87       	std	Z+9, r25	; 0x09
    606e:	80 87       	std	Z+8, r24	; 0x08
    6070:	8a 85       	ldd	r24, Y+10	; 0x0a
    6072:	f7 de       	rcall	.-530    	; 0x5e62 <BCDtoBIN>
    6074:	90 e0       	ldi	r25, 0x00	; 0
    6076:	8c 59       	subi	r24, 0x9C	; 156
    6078:	9f 4f       	sbci	r25, 0xFF	; 255
    607a:	f8 01       	movw	r30, r16
    607c:	93 87       	std	Z+11, r25	; 0x0b
    607e:	82 87       	std	Z+10, r24	; 0x0a
    6080:	81 e0       	ldi	r24, 0x01	; 1
    6082:	2b 96       	adiw	r28, 0x0b	; 11
    6084:	e4 e0       	ldi	r30, 0x04	; 4
    6086:	0c 94 90 e6 	jmp	0x1cd20	; 0x1cd20 <__epilogue_restores__+0x1c>

0000608a <rtc_run>:
    608a:	a4 e0       	ldi	r26, 0x04	; 4
    608c:	b0 e0       	ldi	r27, 0x00	; 0
    608e:	eb e4       	ldi	r30, 0x4B	; 75
    6090:	f0 e3       	ldi	r31, 0x30	; 48
    6092:	0c 94 74 e6 	jmp	0x1cce8	; 0x1cce8 <__prologue_saves__+0x1c>
    6096:	8c 01       	movw	r16, r24
    6098:	21 e0       	ldi	r18, 0x01	; 1
    609a:	ae 01       	movw	r20, r28
    609c:	4c 5f       	subi	r20, 0xFC	; 252
    609e:	5f 4f       	sbci	r21, 0xFF	; 255
    60a0:	60 e0       	ldi	r22, 0x00	; 0
    60a2:	88 e6       	ldi	r24, 0x68	; 104
    60a4:	22 df       	rcall	.-444    	; 0x5eea <i2c_rtc_read>
    60a6:	81 11       	cpse	r24, r1
    60a8:	03 c0       	rjmp	.+6      	; 0x60b0 <rtc_run+0x26>
    60aa:	84 e7       	ldi	r24, 0x74	; 116
    60ac:	94 e0       	ldi	r25, 0x04	; 4
    60ae:	24 c0       	rjmp	.+72     	; 0x60f8 <rtc_run+0x6e>
    60b0:	8c 81       	ldd	r24, Y+4	; 0x04
    60b2:	0f 3f       	cpi	r16, 0xFF	; 255
    60b4:	ff ef       	ldi	r31, 0xFF	; 255
    60b6:	1f 07       	cpc	r17, r31
    60b8:	59 f4       	brne	.+22     	; 0x60d0 <rtc_run+0x46>
    60ba:	08 2e       	mov	r0, r24
    60bc:	00 0c       	add	r0, r0
    60be:	99 0b       	sbc	r25, r25
    60c0:	80 95       	com	r24
    60c2:	90 95       	com	r25
    60c4:	89 2f       	mov	r24, r25
    60c6:	88 1f       	adc	r24, r24
    60c8:	88 27       	eor	r24, r24
    60ca:	88 1f       	adc	r24, r24
    60cc:	90 e0       	ldi	r25, 0x00	; 0
    60ce:	20 c0       	rjmp	.+64     	; 0x6110 <rtc_run+0x86>
    60d0:	8f 77       	andi	r24, 0x7F	; 127
    60d2:	01 15       	cp	r16, r1
    60d4:	11 05       	cpc	r17, r1
    60d6:	11 f4       	brne	.+4      	; 0x60dc <rtc_run+0x52>
    60d8:	90 e8       	ldi	r25, 0x80	; 128
    60da:	01 c0       	rjmp	.+2      	; 0x60de <rtc_run+0x54>
    60dc:	90 e0       	ldi	r25, 0x00	; 0
    60de:	89 2b       	or	r24, r25
    60e0:	8c 83       	std	Y+4, r24	; 0x04
    60e2:	21 e0       	ldi	r18, 0x01	; 1
    60e4:	ae 01       	movw	r20, r28
    60e6:	4c 5f       	subi	r20, 0xFC	; 252
    60e8:	5f 4f       	sbci	r21, 0xFF	; 255
    60ea:	60 e0       	ldi	r22, 0x00	; 0
    60ec:	88 e6       	ldi	r24, 0x68	; 104
    60ee:	c2 de       	rcall	.-636    	; 0x5e74 <i2c_rtc_write>
    60f0:	81 11       	cpse	r24, r1
    60f2:	0d c0       	rjmp	.+26     	; 0x610e <rtc_run+0x84>
    60f4:	8f e5       	ldi	r24, 0x5F	; 95
    60f6:	94 e0       	ldi	r25, 0x04	; 4
    60f8:	a0 e0       	ldi	r26, 0x00	; 0
    60fa:	ed b7       	in	r30, 0x3d	; 61
    60fc:	fe b7       	in	r31, 0x3e	; 62
    60fe:	81 83       	std	Z+1, r24	; 0x01
    6100:	92 83       	std	Z+2, r25	; 0x02
    6102:	a3 83       	std	Z+3, r26	; 0x03
    6104:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    6108:	8f ef       	ldi	r24, 0xFF	; 255
    610a:	9f ef       	ldi	r25, 0xFF	; 255
    610c:	01 c0       	rjmp	.+2      	; 0x6110 <rtc_run+0x86>
    610e:	c8 01       	movw	r24, r16
    6110:	24 96       	adiw	r28, 0x04	; 4
    6112:	e4 e0       	ldi	r30, 0x04	; 4
    6114:	0c 94 90 e6 	jmp	0x1cd20	; 0x1cd20 <__epilogue_restores__+0x1c>

00006118 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  run state 0 = STOP, 1 = RUN
/// @return -1 = ERROR
uint8_t rtc_init (int force, time_t seconds)
{
    6118:	a7 e0       	ldi	r26, 0x07	; 7
    611a:	b0 e0       	ldi	r27, 0x00	; 0
    611c:	e2 e9       	ldi	r30, 0x92	; 146
    611e:	f0 e3       	ldi	r31, 0x30	; 48
    6120:	0c 94 74 e6 	jmp	0x1cce8	; 0x1cce8 <__prologue_saves__+0x1c>
    6124:	8c 01       	movw	r16, r24
    6126:	4c 83       	std	Y+4, r20	; 0x04
    6128:	5d 83       	std	Y+5, r21	; 0x05
    612a:	6e 83       	std	Y+6, r22	; 0x06
    612c:	7f 83       	std	Y+7, r23	; 0x07
    int8_t    state;

    tm_t *tmp;

    i2c_rtc_init();
    612e:	0e df       	rcall	.-484    	; 0x5f4c <i2c_rtc_init>

    if(!force)
    6130:	01 15       	cp	r16, r1
    6132:	11 05       	cpc	r17, r1
    6134:	39 f4       	brne	.+14     	; 0x6144 <rtc_init+0x2c>
    {
        state = rtc_run(-1);
    6136:	8f ef       	ldi	r24, 0xFF	; 255
    6138:	9f ef       	ldi	r25, 0xFF	; 255
    613a:	a7 df       	rcall	.-178    	; 0x608a <rtc_run>
        if(state < 0)
    613c:	87 fd       	sbrc	r24, 7
    613e:	16 c0       	rjmp	.+44     	; 0x616c <rtc_init+0x54>
        {
            rtc_ok = 0;
            return 0;
        }
        if(state == 0)                            // stopped
    6140:	81 11       	cpse	r24, r1
    6142:	22 c0       	rjmp	.+68     	; 0x6188 <rtc_init+0x70>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    6144:	80 e0       	ldi	r24, 0x00	; 0
    6146:	90 e0       	ldi	r25, 0x00	; 0
    6148:	a0 df       	rcall	.-192    	; 0x608a <rtc_run>
    614a:	97 fd       	sbrc	r25, 7
    614c:	0f c0       	rjmp	.+30     	; 0x616c <rtc_init+0x54>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }

        tmp = gmtime(&seconds);
    614e:	ce 01       	movw	r24, r28
    6150:	04 96       	adiw	r24, 0x04	; 4
    6152:	a3 d6       	rcall	.+3398   	; 0x6e9a <gmtime>
    6154:	00 97       	sbiw	r24, 0x00	; 0

        if(tmp == NULL || !rtc_write(tmp))
    6156:	81 f4       	brne	.+32     	; 0x6178 <rtc_init+0x60>
    6158:	81 e4       	ldi	r24, 0x41	; 65
        {
            printf("rtc_init  write epoch failed\n");
    615a:	94 e0       	ldi	r25, 0x04	; 4
    615c:	a0 e0       	ldi	r26, 0x00	; 0
    615e:	ed b7       	in	r30, 0x3d	; 61
    6160:	fe b7       	in	r31, 0x3e	; 62
    6162:	81 83       	std	Z+1, r24	; 0x01
    6164:	92 83       	std	Z+2, r25	; 0x02
    6166:	a3 83       	std	Z+3, r26	; 0x03
    6168:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    616c:	10 92 e4 19 	sts	0x19E4, r1	; 0x8019e4 <rtc_ok+0x1>
            rtc_ok = 0;
    6170:	10 92 e3 19 	sts	0x19E3, r1	; 0x8019e3 <rtc_ok>
            return 0;
    6174:	80 e0       	ldi	r24, 0x00	; 0
    6176:	0e c0       	rjmp	.+28     	; 0x6194 <rtc_init+0x7c>
            return 0;
        }

        tmp = gmtime(&seconds);

        if(tmp == NULL || !rtc_write(tmp))
    6178:	ef de       	rcall	.-546    	; 0x5f58 <rtc_write>
    617a:	88 23       	and	r24, r24
    617c:	69 f3       	breq	.-38     	; 0x6158 <rtc_init+0x40>
            printf("rtc_init  write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        if(rtc_run(1) < 0)                        // START RTC
    617e:	81 e0       	ldi	r24, 0x01	; 1
    6180:	90 e0       	ldi	r25, 0x00	; 0
    6182:	83 df       	rcall	.-250    	; 0x608a <rtc_run>
    6184:	97 fd       	sbrc	r25, 7
    6186:	f2 cf       	rjmp	.-28     	; 0x616c <rtc_init+0x54>
    6188:	81 e0       	ldi	r24, 0x01	; 1
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    618a:	90 e0       	ldi	r25, 0x00	; 0
    618c:	90 93 e4 19 	sts	0x19E4, r25	; 0x8019e4 <rtc_ok+0x1>
    6190:	80 93 e3 19 	sts	0x19E3, r24	; 0x8019e3 <rtc_ok>
    6194:	27 96       	adiw	r28, 0x07	; 7
    return 1;
}
    6196:	e4 e0       	ldi	r30, 0x04	; 4
    6198:	0c 94 90 e6 	jmp	0x1cd20	; 0x1cd20 <__epilogue_restores__+0x1c>

0000619c <islower>:
    619c:	9c 01       	movw	r18, r24
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    619e:	21 56       	subi	r18, 0x61	; 97
    61a0:	31 09       	sbc	r19, r1
    61a2:	81 e0       	ldi	r24, 0x01	; 1
    61a4:	90 e0       	ldi	r25, 0x00	; 0
    61a6:	2a 31       	cpi	r18, 0x1A	; 26
    61a8:	31 05       	cpc	r19, r1
    61aa:	10 f0       	brcs	.+4      	; 0x61b0 <islower+0x14>
    61ac:	80 e0       	ldi	r24, 0x00	; 0
    61ae:	90 e0       	ldi	r25, 0x00	; 0
    61b0:	08 95       	ret

000061b2 <toupper>:
    61b2:	cf 93       	push	r28
    61b4:	df 93       	push	r29
    61b6:	ec 01       	movw	r28, r24
    61b8:	f1 df       	rcall	.-30     	; 0x619c <islower>
    61ba:	89 2b       	or	r24, r25
    61bc:	19 f0       	breq	.+6      	; 0x61c4 <toupper+0x12>
    61be:	ce 01       	movw	r24, r28
    61c0:	80 97       	sbiw	r24, 0x20	; 32
    61c2:	01 c0       	rjmp	.+2      	; 0x61c6 <toupper+0x14>
    61c4:	ce 01       	movw	r24, r28
    61c6:	df 91       	pop	r29
    61c8:	cf 91       	pop	r28
    61ca:	08 95       	ret

000061cc <strcpy>:
    61cc:	fc 01       	movw	r30, r24
    61ce:	db 01       	movw	r26, r22
    61d0:	2d 91       	ld	r18, X+
    61d2:	bd 01       	movw	r22, r26
    61d4:	01 96       	adiw	r24, 0x01	; 1
    61d6:	22 23       	and	r18, r18
    61d8:	11 f0       	breq	.+4      	; 0x61de <strcpy+0x12>
    61da:	20 83       	st	Z, r18
    61dc:	f7 cf       	rjmp	.-18     	; 0x61cc <strcpy>
    61de:	10 82       	st	Z, r1
    61e0:	08 95       	ret

000061e2 <strncpy>:
    61e2:	db 01       	movw	r26, r22
    61e4:	fc 01       	movw	r30, r24
    61e6:	2d 91       	ld	r18, X+
    61e8:	21 11       	cpse	r18, r1
    61ea:	03 c0       	rjmp	.+6      	; 0x61f2 <strncpy+0x10>
    61ec:	4e 0f       	add	r20, r30
    61ee:	5f 1f       	adc	r21, r31
    61f0:	08 c0       	rjmp	.+16     	; 0x6202 <strncpy+0x20>
    61f2:	41 15       	cp	r20, r1
    61f4:	51 05       	cpc	r21, r1
    61f6:	21 f0       	breq	.+8      	; 0x6200 <strncpy+0x1e>
    61f8:	21 93       	st	Z+, r18
    61fa:	41 50       	subi	r20, 0x01	; 1
    61fc:	51 09       	sbc	r21, r1
    61fe:	f3 cf       	rjmp	.-26     	; 0x61e6 <strncpy+0x4>
    6200:	08 95       	ret
    6202:	4e 17       	cp	r20, r30
    6204:	5f 07       	cpc	r21, r31
    6206:	11 f0       	breq	.+4      	; 0x620c <strncpy+0x2a>
    6208:	11 92       	st	Z+, r1
    620a:	fb cf       	rjmp	.-10     	; 0x6202 <strncpy+0x20>
    620c:	08 95       	ret

0000620e <strcat>:
    620e:	cf 93       	push	r28
    6210:	df 93       	push	r29
    6212:	d8 2f       	mov	r29, r24
    6214:	c9 2f       	mov	r28, r25
    6216:	28 2f       	mov	r18, r24
    6218:	39 2f       	mov	r19, r25
    621a:	c9 01       	movw	r24, r18
    621c:	2f 5f       	subi	r18, 0xFF	; 255
    621e:	3f 4f       	sbci	r19, 0xFF	; 255
    6220:	fc 01       	movw	r30, r24
    6222:	40 81       	ld	r20, Z
    6224:	41 11       	cpse	r20, r1
    6226:	f9 cf       	rjmp	.-14     	; 0x621a <strcat+0xc>
    6228:	d1 df       	rcall	.-94     	; 0x61cc <strcpy>
    622a:	8d 2f       	mov	r24, r29
    622c:	9c 2f       	mov	r25, r28
    622e:	df 91       	pop	r29
    6230:	cf 91       	pop	r28
    6232:	08 95       	ret

00006234 <reverse>:
    6234:	fc 01       	movw	r30, r24
    6236:	01 90       	ld	r0, Z+
    6238:	00 20       	and	r0, r0
    623a:	e9 f7       	brne	.-6      	; 0x6236 <reverse+0x2>
    623c:	31 97       	sbiw	r30, 0x01	; 1
    623e:	e8 1b       	sub	r30, r24
    6240:	f9 0b       	sbc	r31, r25
    6242:	af 01       	movw	r20, r30
    6244:	55 95       	asr	r21
    6246:	47 95       	ror	r20
    6248:	e8 0f       	add	r30, r24
    624a:	f9 1f       	adc	r31, r25
    624c:	dc 01       	movw	r26, r24
    624e:	9d 01       	movw	r18, r26
    6250:	28 1b       	sub	r18, r24
    6252:	39 0b       	sbc	r19, r25
    6254:	24 17       	cp	r18, r20
    6256:	35 07       	cpc	r19, r21
    6258:	2c f4       	brge	.+10     	; 0x6264 <reverse+0x30>
    625a:	22 91       	ld	r18, -Z
    625c:	3c 91       	ld	r19, X
    625e:	30 83       	st	Z, r19
    6260:	2d 93       	st	X+, r18
    6262:	f5 cf       	rjmp	.-22     	; 0x624e <reverse+0x1a>
    6264:	08 95       	ret

00006266 <strupper>:
    6266:	cf 93       	push	r28
    6268:	df 93       	push	r29
    626a:	ec 01       	movw	r28, r24
    626c:	88 81       	ld	r24, Y
    626e:	88 23       	and	r24, r24
    6270:	21 f0       	breq	.+8      	; 0x627a <strupper+0x14>
    6272:	90 e0       	ldi	r25, 0x00	; 0
    6274:	9e df       	rcall	.-196    	; 0x61b2 <toupper>
    6276:	89 93       	st	Y+, r24
    6278:	f9 cf       	rjmp	.-14     	; 0x626c <strupper+0x6>
    627a:	df 91       	pop	r29
    627c:	cf 91       	pop	r28
    627e:	08 95       	ret

00006280 <strcmp>:
    6280:	dc 01       	movw	r26, r24
    6282:	fb 01       	movw	r30, r22
    6284:	2d 91       	ld	r18, X+
    6286:	41 91       	ld	r20, Z+
    6288:	50 e0       	ldi	r21, 0x00	; 0
    628a:	30 e0       	ldi	r19, 0x00	; 0
    628c:	c9 01       	movw	r24, r18
    628e:	84 1b       	sub	r24, r20
    6290:	95 0b       	sbc	r25, r21
    6292:	11 f4       	brne	.+4      	; 0x6298 <strcmp+0x18>
    6294:	45 2b       	or	r20, r21
    6296:	b1 f7       	brne	.-20     	; 0x6284 <strcmp+0x4>
    6298:	08 95       	ret

0000629a <strcasecmp>:
    629a:	ef 92       	push	r14
    629c:	ff 92       	push	r15
    629e:	0f 93       	push	r16
    62a0:	1f 93       	push	r17
    62a2:	cf 93       	push	r28
    62a4:	df 93       	push	r29
    62a6:	7c 01       	movw	r14, r24
    62a8:	8b 01       	movw	r16, r22
    62aa:	f7 01       	movw	r30, r14
    62ac:	81 91       	ld	r24, Z+
    62ae:	7f 01       	movw	r14, r30
    62b0:	90 e0       	ldi	r25, 0x00	; 0
    62b2:	7f df       	rcall	.-258    	; 0x61b2 <toupper>
    62b4:	ec 01       	movw	r28, r24
    62b6:	f8 01       	movw	r30, r16
    62b8:	81 91       	ld	r24, Z+
    62ba:	8f 01       	movw	r16, r30
    62bc:	90 e0       	ldi	r25, 0x00	; 0
    62be:	79 df       	rcall	.-270    	; 0x61b2 <toupper>
    62c0:	9c 01       	movw	r18, r24
    62c2:	ce 01       	movw	r24, r28
    62c4:	82 1b       	sub	r24, r18
    62c6:	93 0b       	sbc	r25, r19
    62c8:	11 f4       	brne	.+4      	; 0x62ce <strcasecmp+0x34>
    62ca:	23 2b       	or	r18, r19
    62cc:	71 f7       	brne	.-36     	; 0x62aa <strcasecmp+0x10>
    62ce:	cd b7       	in	r28, 0x3d	; 61
    62d0:	de b7       	in	r29, 0x3e	; 62
    62d2:	e6 e0       	ldi	r30, 0x06	; 6
    62d4:	0c 94 8e e6 	jmp	0x1cd1c	; 0x1cd1c <__epilogue_restores__+0x18>

000062d8 <strncasecmp>:
    62d8:	a0 e0       	ldi	r26, 0x00	; 0
    62da:	b0 e0       	ldi	r27, 0x00	; 0
    62dc:	e2 e7       	ldi	r30, 0x72	; 114
    62de:	f1 e3       	ldi	r31, 0x31	; 49
    62e0:	0c 94 70 e6 	jmp	0x1cce0	; 0x1cce0 <__prologue_saves__+0x14>
    62e4:	8c 01       	movw	r16, r24
    62e6:	7b 01       	movw	r14, r22
    62e8:	6c 01       	movw	r12, r24
    62ea:	c4 0e       	add	r12, r20
    62ec:	d5 1e       	adc	r13, r21
    62ee:	0c 15       	cp	r16, r12
    62f0:	1d 05       	cpc	r17, r13
    62f2:	99 f0       	breq	.+38     	; 0x631a <strncasecmp+0x42>
    62f4:	f8 01       	movw	r30, r16
    62f6:	81 91       	ld	r24, Z+
    62f8:	8f 01       	movw	r16, r30
    62fa:	90 e0       	ldi	r25, 0x00	; 0
    62fc:	5a df       	rcall	.-332    	; 0x61b2 <toupper>
    62fe:	ec 01       	movw	r28, r24
    6300:	f7 01       	movw	r30, r14
    6302:	81 91       	ld	r24, Z+
    6304:	7f 01       	movw	r14, r30
    6306:	90 e0       	ldi	r25, 0x00	; 0
    6308:	54 df       	rcall	.-344    	; 0x61b2 <toupper>
    630a:	9c 01       	movw	r18, r24
    630c:	ce 01       	movw	r24, r28
    630e:	82 1b       	sub	r24, r18
    6310:	93 0b       	sbc	r25, r19
    6312:	29 f4       	brne	.+10     	; 0x631e <strncasecmp+0x46>
    6314:	23 2b       	or	r18, r19
    6316:	59 f7       	brne	.-42     	; 0x62ee <strncasecmp+0x16>
    6318:	02 c0       	rjmp	.+4      	; 0x631e <strncasecmp+0x46>
    631a:	80 e0       	ldi	r24, 0x00	; 0
    631c:	90 e0       	ldi	r25, 0x00	; 0
    631e:	cd b7       	in	r28, 0x3d	; 61
    6320:	de b7       	in	r29, 0x3e	; 62
    6322:	e8 e0       	ldi	r30, 0x08	; 8
    6324:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__epilogue_restores__+0x14>

00006328 <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    6328:	0f 93       	push	r16
    632a:	1f 93       	push	r17
    632c:	cf 93       	push	r28
    632e:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    6330:	00 97       	sbiw	r24, 0x00	; 0
    6332:	99 f0       	breq	.+38     	; 0x635a <stralloc+0x32>
    6334:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    6336:	fc 01       	movw	r30, r24
    6338:	01 90       	ld	r0, Z+
    633a:	00 20       	and	r0, r0
    633c:	e9 f7       	brne	.-6      	; 0x6338 <stralloc+0x10>
    633e:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    6340:	61 e0       	ldi	r22, 0x01	; 1
    6342:	70 e0       	ldi	r23, 0x00	; 0
    6344:	8c 1b       	sub	r24, r28
    6346:	9d 0b       	sbc	r25, r29
    6348:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <safecalloc>
    634c:	8c 01       	movw	r16, r24
    if(!ptr)
    634e:	00 97       	sbiw	r24, 0x00	; 0
    6350:	21 f0       	breq	.+8      	; 0x635a <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    6352:	be 01       	movw	r22, r28
    6354:	3b df       	rcall	.-394    	; 0x61cc <strcpy>
    return(ptr);
    6356:	c8 01       	movw	r24, r16
    6358:	02 c0       	rjmp	.+4      	; 0x635e <stralloc+0x36>
    635a:	80 e0       	ldi	r24, 0x00	; 0
    635c:	90 e0       	ldi	r25, 0x00	; 0
}
    635e:	df 91       	pop	r29
    6360:	cf 91       	pop	r28
    6362:	1f 91       	pop	r17
    6364:	0f 91       	pop	r16
    6366:	08 95       	ret

00006368 <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    6368:	00 d0       	rcall	.+0      	; 0x636a <sep+0x2>
    636a:	1f 92       	push	r1
    636c:	8e e1       	ldi	r24, 0x1E	; 30
    636e:	95 e0       	ldi	r25, 0x05	; 5
    6370:	a0 e0       	ldi	r26, 0x00	; 0
    6372:	ed b7       	in	r30, 0x3d	; 61
    6374:	fe b7       	in	r31, 0x3e	; 62
    6376:	81 83       	std	Z+1, r24	; 0x01
    6378:	92 83       	std	Z+2, r25	; 0x02
    637a:	a3 83       	std	Z+3, r26	; 0x03
    637c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    6380:	0f 90       	pop	r0
    6382:	0f 90       	pop	r0
    6384:	0f 90       	pop	r0
    6386:	08 95       	ret

00006388 <trim_tail>:
    6388:	00 97       	sbiw	r24, 0x00	; 0
    638a:	69 f0       	breq	.+26     	; 0x63a6 <trim_tail+0x1e>
    638c:	fc 01       	movw	r30, r24
    638e:	01 90       	ld	r0, Z+
    6390:	00 20       	and	r0, r0
    6392:	e9 f7       	brne	.-6      	; 0x638e <trim_tail+0x6>
    6394:	31 97       	sbiw	r30, 0x01	; 1
    6396:	e8 17       	cp	r30, r24
    6398:	f9 07       	cpc	r31, r25
    639a:	29 f0       	breq	.+10     	; 0x63a6 <trim_tail+0x1e>
    639c:	22 91       	ld	r18, -Z
    639e:	21 32       	cpi	r18, 0x21	; 33
    63a0:	10 f4       	brcc	.+4      	; 0x63a6 <trim_tail+0x1e>
    63a2:	10 82       	st	Z, r1
    63a4:	f8 cf       	rjmp	.-16     	; 0x6396 <trim_tail+0xe>
    63a6:	08 95       	ret

000063a8 <skipspaces>:
    63a8:	00 97       	sbiw	r24, 0x00	; 0
    63aa:	39 f0       	breq	.+14     	; 0x63ba <skipspaces+0x12>
    63ac:	fc 01       	movw	r30, r24
    63ae:	cf 01       	movw	r24, r30
    63b0:	21 91       	ld	r18, Z+
    63b2:	20 32       	cpi	r18, 0x20	; 32
    63b4:	e1 f3       	breq	.-8      	; 0x63ae <skipspaces+0x6>
    63b6:	29 30       	cpi	r18, 0x09	; 9
    63b8:	d1 f3       	breq	.-12     	; 0x63ae <skipspaces+0x6>
    63ba:	08 95       	ret

000063bc <MATCH>:
    63bc:	cf 93       	push	r28
    63be:	df 93       	push	r29
    63c0:	fb 01       	movw	r30, r22
    63c2:	01 90       	ld	r0, Z+
    63c4:	00 20       	and	r0, r0
    63c6:	e9 f7       	brne	.-6      	; 0x63c2 <MATCH+0x6>
    63c8:	31 97       	sbiw	r30, 0x01	; 1
    63ca:	ef 01       	movw	r28, r30
    63cc:	c6 1b       	sub	r28, r22
    63ce:	d7 0b       	sbc	r29, r23
    63d0:	57 df       	rcall	.-338    	; 0x6280 <strcmp>
    63d2:	89 2b       	or	r24, r25
    63d4:	11 f4       	brne	.+4      	; 0x63da <MATCH+0x1e>
    63d6:	ce 01       	movw	r24, r28
    63d8:	02 c0       	rjmp	.+4      	; 0x63de <MATCH+0x22>
    63da:	80 e0       	ldi	r24, 0x00	; 0
    63dc:	90 e0       	ldi	r25, 0x00	; 0
    63de:	df 91       	pop	r29
    63e0:	cf 91       	pop	r28
    63e2:	08 95       	ret

000063e4 <MATCHI>:
    63e4:	cf 93       	push	r28
    63e6:	df 93       	push	r29
    63e8:	fb 01       	movw	r30, r22
    63ea:	01 90       	ld	r0, Z+
    63ec:	00 20       	and	r0, r0
    63ee:	e9 f7       	brne	.-6      	; 0x63ea <MATCHI+0x6>
    63f0:	31 97       	sbiw	r30, 0x01	; 1
    63f2:	ef 01       	movw	r28, r30
    63f4:	c6 1b       	sub	r28, r22
    63f6:	d7 0b       	sbc	r29, r23
    63f8:	50 df       	rcall	.-352    	; 0x629a <strcasecmp>
    63fa:	89 2b       	or	r24, r25
    63fc:	11 f4       	brne	.+4      	; 0x6402 <MATCHI+0x1e>
    63fe:	ce 01       	movw	r24, r28
    6400:	02 c0       	rjmp	.+4      	; 0x6406 <MATCHI+0x22>
    6402:	80 e0       	ldi	r24, 0x00	; 0
    6404:	90 e0       	ldi	r25, 0x00	; 0
    6406:	df 91       	pop	r29
    6408:	cf 91       	pop	r28
    640a:	08 95       	ret

0000640c <MATCHARGS>:
    640c:	a9 e0       	ldi	r26, 0x09	; 9
    640e:	b0 e0       	ldi	r27, 0x00	; 0
    6410:	ec e0       	ldi	r30, 0x0C	; 12
    6412:	f2 e3       	ldi	r31, 0x32	; 50
    6414:	0c 94 72 e6 	jmp	0x1cce4	; 0x1cce4 <__prologue_saves__+0x18>
    6418:	eb 01       	movw	r28, r22
    641a:	8a 01       	movw	r16, r20
    641c:	79 01       	movw	r14, r18
    641e:	e2 df       	rcall	.-60     	; 0x63e4 <MATCHI>
    6420:	00 97       	sbiw	r24, 0x00	; 0
    6422:	c1 f0       	breq	.+48     	; 0x6454 <MATCHARGS+0x48>
    6424:	e0 16       	cp	r14, r16
    6426:	f1 06       	cpc	r15, r17
    6428:	9c f4       	brge	.+38     	; 0x6450 <MATCHARGS+0x44>
    642a:	ed b7       	in	r30, 0x3d	; 61
    642c:	fe b7       	in	r31, 0x3e	; 62
    642e:	f1 86       	std	Z+9, r15	; 0x09
    6430:	e0 86       	std	Z+8, r14	; 0x08
    6432:	17 83       	std	Z+7, r17	; 0x07
    6434:	06 83       	std	Z+6, r16	; 0x06
    6436:	d5 83       	std	Z+5, r29	; 0x05
    6438:	c4 83       	std	Z+4, r28	; 0x04
    643a:	88 ef       	ldi	r24, 0xF8	; 248
    643c:	94 e0       	ldi	r25, 0x04	; 4
    643e:	a0 e0       	ldi	r26, 0x00	; 0
    6440:	81 83       	std	Z+1, r24	; 0x01
    6442:	92 83       	std	Z+2, r25	; 0x02
    6444:	a3 83       	std	Z+3, r26	; 0x03
    6446:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    644a:	80 e0       	ldi	r24, 0x00	; 0
    644c:	90 e0       	ldi	r25, 0x00	; 0
    644e:	02 c0       	rjmp	.+4      	; 0x6454 <MATCHARGS+0x48>
    6450:	81 e0       	ldi	r24, 0x01	; 1
    6452:	90 e0       	ldi	r25, 0x00	; 0
    6454:	cd b7       	in	r28, 0x3d	; 61
    6456:	de b7       	in	r29, 0x3e	; 62
    6458:	29 96       	adiw	r28, 0x09	; 9
    645a:	e6 e0       	ldi	r30, 0x06	; 6
    645c:	0c 94 8e e6 	jmp	0x1cd1c	; 0x1cd1c <__epilogue_restores__+0x18>

00006460 <MATCHI_LEN>:
    6460:	cf 93       	push	r28
    6462:	df 93       	push	r29
    6464:	00 97       	sbiw	r24, 0x00	; 0
    6466:	89 f0       	breq	.+34     	; 0x648a <MATCHI_LEN+0x2a>
    6468:	61 15       	cp	r22, r1
    646a:	71 05       	cpc	r23, r1
    646c:	71 f0       	breq	.+28     	; 0x648a <MATCHI_LEN+0x2a>
    646e:	eb 01       	movw	r28, r22
    6470:	09 90       	ld	r0, Y+
    6472:	00 20       	and	r0, r0
    6474:	e9 f7       	brne	.-6      	; 0x6470 <MATCHI_LEN+0x10>
    6476:	21 97       	sbiw	r28, 0x01	; 1
    6478:	c6 1b       	sub	r28, r22
    647a:	d7 0b       	sbc	r29, r23
    647c:	31 f0       	breq	.+12     	; 0x648a <MATCHI_LEN+0x2a>
    647e:	ae 01       	movw	r20, r28
    6480:	2b df       	rcall	.-426    	; 0x62d8 <strncasecmp>
    6482:	89 2b       	or	r24, r25
    6484:	11 f4       	brne	.+4      	; 0x648a <MATCHI_LEN+0x2a>
    6486:	ce 01       	movw	r24, r28
    6488:	02 c0       	rjmp	.+4      	; 0x648e <MATCHI_LEN+0x2e>
    648a:	80 e0       	ldi	r24, 0x00	; 0
    648c:	90 e0       	ldi	r25, 0x00	; 0
    648e:	df 91       	pop	r29
    6490:	cf 91       	pop	r28
    6492:	08 95       	ret

00006494 <split_args>:
    6494:	a0 e0       	ldi	r26, 0x00	; 0
    6496:	b0 e0       	ldi	r27, 0x00	; 0
    6498:	e0 e5       	ldi	r30, 0x50	; 80
    649a:	f2 e3       	ldi	r31, 0x32	; 50
    649c:	0c 94 70 e6 	jmp	0x1cce0	; 0x1cce0 <__prologue_saves__+0x14>
    64a0:	dc 01       	movw	r26, r24
    64a2:	6a 01       	movw	r12, r20
    64a4:	8b 01       	movw	r16, r22
    64a6:	fb 01       	movw	r30, r22
    64a8:	80 e0       	ldi	r24, 0x00	; 0
    64aa:	90 e0       	ldi	r25, 0x00	; 0
    64ac:	8c 15       	cp	r24, r12
    64ae:	9d 05       	cpc	r25, r13
    64b0:	24 f4       	brge	.+8      	; 0x64ba <split_args+0x26>
    64b2:	11 92       	st	Z+, r1
    64b4:	11 92       	st	Z+, r1
    64b6:	01 96       	adiw	r24, 0x01	; 1
    64b8:	f9 cf       	rjmp	.-14     	; 0x64ac <split_args+0x18>
    64ba:	c1 14       	cp	r12, r1
    64bc:	d1 04       	cpc	r13, r1
    64be:	d9 f1       	breq	.+118    	; 0x6536 <split_args+0xa2>
    64c0:	10 97       	sbiw	r26, 0x00	; 0
    64c2:	c9 f1       	breq	.+114    	; 0x6536 <split_args+0xa2>
    64c4:	ee 24       	eor	r14, r14
    64c6:	e3 94       	inc	r14
    64c8:	f1 2c       	mov	r15, r1
    64ca:	c0 e0       	ldi	r28, 0x00	; 0
    64cc:	d0 e0       	ldi	r29, 0x00	; 0
    64ce:	8c 91       	ld	r24, X
    64d0:	88 23       	and	r24, r24
    64d2:	b1 f1       	breq	.+108    	; 0x6540 <split_args+0xac>
    64d4:	cc 15       	cp	r28, r12
    64d6:	dd 05       	cpc	r29, r13
    64d8:	9c f5       	brge	.+102    	; 0x6540 <split_args+0xac>
    64da:	cd 01       	movw	r24, r26
    64dc:	65 df       	rcall	.-310    	; 0x63a8 <skipspaces>
    64de:	dc 01       	movw	r26, r24
    64e0:	2c 91       	ld	r18, X
    64e2:	22 23       	and	r18, r18
    64e4:	69 f1       	breq	.+90     	; 0x6540 <split_args+0xac>
    64e6:	22 32       	cpi	r18, 0x22	; 34
    64e8:	79 f4       	brne	.+30     	; 0x6508 <split_args+0x74>
    64ea:	fc 01       	movw	r30, r24
    64ec:	31 96       	adiw	r30, 0x01	; 1
    64ee:	d8 01       	movw	r26, r16
    64f0:	ed 93       	st	X+, r30
    64f2:	fc 93       	st	X, r31
    64f4:	df 01       	movw	r26, r30
    64f6:	80 81       	ld	r24, Z
    64f8:	31 96       	adiw	r30, 0x01	; 1
    64fa:	88 23       	and	r24, r24
    64fc:	a9 f0       	breq	.+42     	; 0x6528 <split_args+0x94>
    64fe:	82 32       	cpi	r24, 0x22	; 34
    6500:	c9 f7       	brne	.-14     	; 0x64f4 <split_args+0x60>
    6502:	1c 92       	st	X, r1
    6504:	df 01       	movw	r26, r30
    6506:	10 c0       	rjmp	.+32     	; 0x6528 <split_args+0x94>
    6508:	f8 01       	movw	r30, r16
    650a:	91 83       	std	Z+1, r25	; 0x01
    650c:	80 83       	st	Z, r24
    650e:	fc 01       	movw	r30, r24
    6510:	2e 2f       	mov	r18, r30
    6512:	9f 2f       	mov	r25, r31
    6514:	81 91       	ld	r24, Z+
    6516:	3f ed       	ldi	r19, 0xDF	; 223
    6518:	38 0f       	add	r19, r24
    651a:	3e 35       	cpi	r19, 0x5E	; 94
    651c:	c8 f3       	brcs	.-14     	; 0x6510 <split_args+0x7c>
    651e:	88 23       	and	r24, r24
    6520:	69 f0       	breq	.+26     	; 0x653c <split_args+0xa8>
    6522:	a2 2f       	mov	r26, r18
    6524:	b9 2f       	mov	r27, r25
    6526:	1d 92       	st	X+, r1
    6528:	21 96       	adiw	r28, 0x01	; 1
    652a:	ff ef       	ldi	r31, 0xFF	; 255
    652c:	ef 1a       	sub	r14, r31
    652e:	ff 0a       	sbc	r15, r31
    6530:	0e 5f       	subi	r16, 0xFE	; 254
    6532:	1f 4f       	sbci	r17, 0xFF	; 255
    6534:	cc cf       	rjmp	.-104    	; 0x64ce <split_args+0x3a>
    6536:	80 e0       	ldi	r24, 0x00	; 0
    6538:	90 e0       	ldi	r25, 0x00	; 0
    653a:	03 c0       	rjmp	.+6      	; 0x6542 <split_args+0xae>
    653c:	c7 01       	movw	r24, r14
    653e:	01 c0       	rjmp	.+2      	; 0x6542 <split_args+0xae>
    6540:	ce 01       	movw	r24, r28
    6542:	cd b7       	in	r28, 0x3d	; 61
    6544:	de b7       	in	r29, 0x3e	; 62
    6546:	e8 e0       	ldi	r30, 0x08	; 8
    6548:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__epilogue_restores__+0x14>

0000654c <get_token>:
    654c:	ef 92       	push	r14
    654e:	ff 92       	push	r15
    6550:	0f 93       	push	r16
    6552:	1f 93       	push	r17
    6554:	cf 93       	push	r28
    6556:	df 93       	push	r29
    6558:	eb 01       	movw	r28, r22
    655a:	8a 01       	movw	r16, r20
    655c:	18 82       	st	Y, r1
    655e:	00 97       	sbiw	r24, 0x00	; 0
    6560:	89 f1       	breq	.+98     	; 0x65c4 <get_token+0x78>
    6562:	fc 01       	movw	r30, r24
    6564:	20 81       	ld	r18, Z
    6566:	22 23       	and	r18, r18
    6568:	79 f1       	breq	.+94     	; 0x65c8 <get_token+0x7c>
    656a:	1e df       	rcall	.-452    	; 0x63a8 <skipspaces>
    656c:	7c 01       	movw	r14, r24
    656e:	0c df       	rcall	.-488    	; 0x6388 <trim_tail>
    6570:	f7 01       	movw	r30, r14
    6572:	cf 01       	movw	r24, r30
    6574:	21 91       	ld	r18, Z+
    6576:	21 32       	cpi	r18, 0x21	; 33
    6578:	e0 f0       	brcs	.+56     	; 0x65b2 <get_token+0x66>
    657a:	10 16       	cp	r1, r16
    657c:	11 06       	cpc	r1, r17
    657e:	cc f4       	brge	.+50     	; 0x65b2 <get_token+0x66>
    6580:	22 32       	cpi	r18, 0x22	; 34
    6582:	79 f4       	brne	.+30     	; 0x65a2 <get_token+0x56>
    6584:	fc 01       	movw	r30, r24
    6586:	31 96       	adiw	r30, 0x01	; 1
    6588:	0c 0f       	add	r16, r28
    658a:	1d 1f       	adc	r17, r29
    658c:	cf 01       	movw	r24, r30
    658e:	21 91       	ld	r18, Z+
    6590:	22 23       	and	r18, r18
    6592:	79 f0       	breq	.+30     	; 0x65b2 <get_token+0x66>
    6594:	22 32       	cpi	r18, 0x22	; 34
    6596:	59 f0       	breq	.+22     	; 0x65ae <get_token+0x62>
    6598:	c0 17       	cp	r28, r16
    659a:	d1 07       	cpc	r29, r17
    659c:	51 f0       	breq	.+20     	; 0x65b2 <get_token+0x66>
    659e:	29 93       	st	Y+, r18
    65a0:	f5 cf       	rjmp	.-22     	; 0x658c <get_token+0x40>
    65a2:	2c 32       	cpi	r18, 0x2C	; 44
    65a4:	31 f0       	breq	.+12     	; 0x65b2 <get_token+0x66>
    65a6:	29 93       	st	Y+, r18
    65a8:	01 50       	subi	r16, 0x01	; 1
    65aa:	11 09       	sbc	r17, r1
    65ac:	e2 cf       	rjmp	.-60     	; 0x6572 <get_token+0x26>
    65ae:	cf 01       	movw	r24, r30
    65b0:	18 82       	st	Y, r1
    65b2:	fa de       	rcall	.-524    	; 0x63a8 <skipspaces>
    65b4:	fc 01       	movw	r30, r24
    65b6:	80 81       	ld	r24, Z
    65b8:	8c 32       	cpi	r24, 0x2C	; 44
    65ba:	09 f4       	brne	.+2      	; 0x65be <get_token+0x72>
    65bc:	31 96       	adiw	r30, 0x01	; 1
    65be:	18 82       	st	Y, r1
    65c0:	cf 01       	movw	r24, r30
    65c2:	02 c0       	rjmp	.+4      	; 0x65c8 <get_token+0x7c>
    65c4:	80 e0       	ldi	r24, 0x00	; 0
    65c6:	90 e0       	ldi	r25, 0x00	; 0
    65c8:	cd b7       	in	r28, 0x3d	; 61
    65ca:	de b7       	in	r29, 0x3e	; 62
    65cc:	e6 e0       	ldi	r30, 0x06	; 6
    65ce:	0c 94 8e e6 	jmp	0x1cd1c	; 0x1cd1c <__epilogue_restores__+0x18>

000065d2 <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{
    65d2:	a2 e0       	ldi	r26, 0x02	; 2
    65d4:	b0 e0       	ldi	r27, 0x00	; 0
    65d6:	ef ee       	ldi	r30, 0xEF	; 239
    65d8:	f2 e3       	ldi	r31, 0x32	; 50
    65da:	0c 94 74 e6 	jmp	0x1cce8	; 0x1cce8 <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    65de:	00 97       	sbiw	r24, 0x00	; 0
    65e0:	79 f1       	breq	.+94     	; 0x6640 <get_value+0x6e>
    65e2:	fc 01       	movw	r30, r24
    65e4:	20 81       	ld	r18, Z
    65e6:	22 23       	and	r18, r18
    65e8:	59 f1       	breq	.+86     	; 0x6640 <get_value+0x6e>
        return(0);

    ptr = skipspaces(str);
    65ea:	de de       	rcall	.-580    	; 0x63a8 <skipspaces>
    65ec:	8c 01       	movw	r16, r24
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    65ee:	6f e2       	ldi	r22, 0x2F	; 47
    65f0:	73 e0       	ldi	r23, 0x03	; 3
    65f2:	36 df       	rcall	.-404    	; 0x6460 <MATCHI_LEN>
    65f4:	00 97       	sbiw	r24, 0x00	; 0
    65f6:	29 f0       	breq	.+10     	; 0x6602 <get_value+0x30>
    {
        base = 16;
        ptr += ret;
    65f8:	08 0f       	add	r16, r24
    65fa:	19 1f       	adc	r17, r25
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    65fc:	40 e1       	ldi	r20, 0x10	; 16
    65fe:	50 e0       	ldi	r21, 0x00	; 0
    6600:	18 c0       	rjmp	.+48     	; 0x6632 <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    6602:	62 e3       	ldi	r22, 0x32	; 50
    6604:	73 e0       	ldi	r23, 0x03	; 3
    6606:	c8 01       	movw	r24, r16
    6608:	2b df       	rcall	.-426    	; 0x6460 <MATCHI_LEN>
    660a:	00 97       	sbiw	r24, 0x00	; 0
    660c:	29 f0       	breq	.+10     	; 0x6618 <get_value+0x46>
    {
        base = 8;
        ptr += ret;
    660e:	08 0f       	add	r16, r24
    6610:	19 1f       	adc	r17, r25
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    6612:	48 e0       	ldi	r20, 0x08	; 8
    6614:	50 e0       	ldi	r21, 0x00	; 0
    6616:	0d c0       	rjmp	.+26     	; 0x6632 <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    6618:	65 e3       	ldi	r22, 0x35	; 53
    661a:	73 e0       	ldi	r23, 0x03	; 3
    661c:	c8 01       	movw	r24, r16
    661e:	20 df       	rcall	.-448    	; 0x6460 <MATCHI_LEN>
    6620:	00 97       	sbiw	r24, 0x00	; 0
    6622:	29 f0       	breq	.+10     	; 0x662e <get_value+0x5c>
    {
        base = 2;
        ptr += ret;
    6624:	08 0f       	add	r16, r24
    6626:	19 1f       	adc	r17, r25
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    6628:	42 e0       	ldi	r20, 0x02	; 2
    662a:	50 e0       	ldi	r21, 0x00	; 0
    662c:	02 c0       	rjmp	.+4      	; 0x6632 <get_value+0x60>

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    662e:	4a e0       	ldi	r20, 0x0A	; 10
    6630:	50 e0       	ldi	r21, 0x00	; 0
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    6632:	be 01       	movw	r22, r28
    6634:	6f 5f       	subi	r22, 0xFF	; 255
    6636:	7f 4f       	sbci	r23, 0xFF	; 255
    6638:	c8 01       	movw	r24, r16
    663a:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <strtol>
    663e:	03 c0       	rjmp	.+6      	; 0x6646 <get_value+0x74>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    6640:	60 e0       	ldi	r22, 0x00	; 0
    6642:	70 e0       	ldi	r23, 0x00	; 0
    6644:	cb 01       	movw	r24, r22
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    6646:	22 96       	adiw	r28, 0x02	; 2
    6648:	e4 e0       	ldi	r30, 0x04	; 4
    664a:	0c 94 90 e6 	jmp	0x1cd20	; 0x1cd20 <__epilogue_restores__+0x1c>

0000664e <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    664e:	78 94       	sei
    6650:	08 95       	ret

00006652 <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    6652:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;             // No Prescale
    6654:	89 e0       	ldi	r24, 0x09	; 9
    6656:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    665a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);              // 0 .. count
    665e:	8f e1       	ldi	r24, 0x1F	; 31
    6660:	9e e4       	ldi	r25, 0x4E	; 78
    6662:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    6666:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);                        //Enable the Output Compare A interrupt
    666a:	ef e6       	ldi	r30, 0x6F	; 111
    666c:	f0 e0       	ldi	r31, 0x00	; 0
    666e:	80 81       	ld	r24, Z
    6670:	82 60       	ori	r24, 0x02	; 2
    6672:	80 83       	st	Z, r24
    sei();
    6674:	78 94       	sei
    6676:	08 95       	ret

00006678 <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    6678:	1f 92       	push	r1
    667a:	0f 92       	push	r0
    667c:	0f b6       	in	r0, 0x3f	; 63
    667e:	0f 92       	push	r0
    6680:	11 24       	eor	r1, r1
    6682:	0b b6       	in	r0, 0x3b	; 59
    6684:	0f 92       	push	r0
    6686:	2f 93       	push	r18
    6688:	3f 93       	push	r19
    668a:	4f 93       	push	r20
    668c:	5f 93       	push	r21
    668e:	6f 93       	push	r22
    6690:	7f 93       	push	r23
    6692:	8f 93       	push	r24
    6694:	9f 93       	push	r25
    6696:	af 93       	push	r26
    6698:	bf 93       	push	r27
    669a:	ef 93       	push	r30
    669c:	ff 93       	push	r31
    execute_timers();
    669e:	36 d2       	rcall	.+1132   	; 0x6b0c <execute_timers>
}
    66a0:	ff 91       	pop	r31
    66a2:	ef 91       	pop	r30
    66a4:	bf 91       	pop	r27
    66a6:	af 91       	pop	r26
    66a8:	9f 91       	pop	r25
    66aa:	8f 91       	pop	r24
    66ac:	7f 91       	pop	r23
    66ae:	6f 91       	pop	r22
    66b0:	5f 91       	pop	r21
    66b2:	4f 91       	pop	r20
    66b4:	3f 91       	pop	r19
    66b6:	2f 91       	pop	r18
    66b8:	0f 90       	pop	r0
    66ba:	0b be       	out	0x3b, r0	; 59
    66bc:	0f 90       	pop	r0
    66be:	0f be       	out	0x3f, r0	; 63
    66c0:	0f 90       	pop	r0
    66c2:	1f 90       	pop	r1
    66c4:	18 95       	reti

000066c6 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    66c6:	0f 93       	push	r16
    66c8:	1f 93       	push	r17
    66ca:	cf 93       	push	r28
    66cc:	df 93       	push	r29
    66ce:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

// disable interrupts
    cli();
    66d0:	f8 94       	cli

    count1 = TCNT1;
    66d2:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    66d6:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    66da:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <__clock>
    66de:	90 91 47 1a 	lds	r25, 0x1A47	; 0x801a47 <__clock+0x1>
    66e2:	a0 91 48 1a 	lds	r26, 0x1A48	; 0x801a48 <__clock+0x2>
    66e6:	b0 91 49 1a 	lds	r27, 0x1A49	; 0x801a49 <__clock+0x3>
    66ea:	80 83       	st	Z, r24
    66ec:	91 83       	std	Z+1, r25	; 0x01
    66ee:	a2 83       	std	Z+2, r26	; 0x02
    66f0:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    66f2:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <__clock+0x4>
    66f6:	90 91 4b 1a 	lds	r25, 0x1A4B	; 0x801a4b <__clock+0x5>
    66fa:	a0 91 4c 1a 	lds	r26, 0x1A4C	; 0x801a4c <__clock+0x6>
    66fe:	b0 91 4d 1a 	lds	r27, 0x1A4D	; 0x801a4d <__clock+0x7>
    6702:	84 83       	std	Z+4, r24	; 0x04
    6704:	95 83       	std	Z+5, r25	; 0x05
    6706:	a6 83       	std	Z+6, r26	; 0x06
    6708:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    670a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    670e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    6712:	b1 9b       	sbis	0x16, 1	; 22
    6714:	03 c0       	rjmp	.+6      	; 0x671c <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6716:	c0 e0       	ldi	r28, 0x00	; 0
    6718:	d0 e0       	ldi	r29, 0x00	; 0
    671a:	3f c0       	rjmp	.+126    	; 0x679a <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    671c:	82 17       	cp	r24, r18
    671e:	93 07       	cpc	r25, r19
    6720:	d0 f1       	brcs	.+116    	; 0x6796 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6722:	c0 e0       	ldi	r28, 0x00	; 0
    6724:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    6726:	40 e0       	ldi	r20, 0x00	; 0
    6728:	50 e0       	ldi	r21, 0x00	; 0
    672a:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    672c:	9a 01       	movw	r18, r20
    672e:	ab 01       	movw	r20, r22
    6730:	28 0f       	add	r18, r24
    6732:	39 1f       	adc	r19, r25
    6734:	41 1d       	adc	r20, r1
    6736:	51 1d       	adc	r21, r1

// enable interrupts
    sei();
    6738:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    673a:	a2 e3       	ldi	r26, 0x32	; 50
    673c:	b0 e0       	ldi	r27, 0x00	; 0
    673e:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__muluhisi3>
    6742:	04 81       	ldd	r16, Z+4	; 0x04
    6744:	15 81       	ldd	r17, Z+5	; 0x05
    6746:	26 81       	ldd	r18, Z+6	; 0x06
    6748:	37 81       	ldd	r19, Z+7	; 0x07
    674a:	dc 01       	movw	r26, r24
    674c:	cb 01       	movw	r24, r22
    674e:	80 0f       	add	r24, r16
    6750:	91 1f       	adc	r25, r17
    6752:	a2 1f       	adc	r26, r18
    6754:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    6756:	81 15       	cp	r24, r1
    6758:	2a ec       	ldi	r18, 0xCA	; 202
    675a:	92 07       	cpc	r25, r18
    675c:	2a e9       	ldi	r18, 0x9A	; 154
    675e:	a2 07       	cpc	r26, r18
    6760:	2b e3       	ldi	r18, 0x3B	; 59
    6762:	b2 07       	cpc	r27, r18
    6764:	2c f4       	brge	.+10     	; 0x6770 <clock_gettime+0xaa>
// enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6766:	84 83       	std	Z+4, r24	; 0x04
    6768:	95 83       	std	Z+5, r25	; 0x05
    676a:	a6 83       	std	Z+6, r26	; 0x06
    676c:	b7 83       	std	Z+7, r27	; 0x07
    676e:	1a c0       	rjmp	.+52     	; 0x67a4 <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    6770:	9a 5c       	subi	r25, 0xCA	; 202
    6772:	aa 49       	sbci	r26, 0x9A	; 154
    6774:	bb 43       	sbci	r27, 0x3B	; 59
    6776:	84 83       	std	Z+4, r24	; 0x04
    6778:	95 83       	std	Z+5, r25	; 0x05
    677a:	a6 83       	std	Z+6, r26	; 0x06
    677c:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    677e:	80 81       	ld	r24, Z
    6780:	91 81       	ldd	r25, Z+1	; 0x01
    6782:	a2 81       	ldd	r26, Z+2	; 0x02
    6784:	b3 81       	ldd	r27, Z+3	; 0x03
    6786:	01 96       	adiw	r24, 0x01	; 1
    6788:	a1 1d       	adc	r26, r1
    678a:	b1 1d       	adc	r27, r1
    678c:	80 83       	st	Z, r24
    678e:	91 83       	std	Z+1, r25	; 0x01
    6790:	a2 83       	std	Z+2, r26	; 0x02
    6792:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    6794:	07 c0       	rjmp	.+14     	; 0x67a4 <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;                          // counter overflow and NO pending is an error!
    6796:	cf ef       	ldi	r28, 0xFF	; 255
    6798:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    679a:	40 e2       	ldi	r20, 0x20	; 32
    679c:	5e e4       	ldi	r21, 0x4E	; 78
    679e:	60 e0       	ldi	r22, 0x00	; 0
    67a0:	70 e0       	ldi	r23, 0x00	; 0
    67a2:	c4 cf       	rjmp	.-120    	; 0x672c <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    67a4:	ce 01       	movw	r24, r28
    67a6:	df 91       	pop	r29
    67a8:	cf 91       	pop	r28
    67aa:	1f 91       	pop	r17
    67ac:	0f 91       	pop	r16
    67ae:	08 95       	ret

000067b0 <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    67b0:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <__clock+0x4>
    67b4:	90 91 4b 1a 	lds	r25, 0x1A4B	; 0x801a4b <__clock+0x5>
    67b8:	a0 91 4c 1a 	lds	r26, 0x1A4C	; 0x801a4c <__clock+0x6>
    67bc:	b0 91 4d 1a 	lds	r27, 0x1A4D	; 0x801a4d <__clock+0x7>
    67c0:	80 5c       	subi	r24, 0xC0	; 192
    67c2:	9d 4b       	sbci	r25, 0xBD	; 189
    67c4:	a0 4f       	sbci	r26, 0xF0	; 240
    67c6:	bf 4f       	sbci	r27, 0xFF	; 255
    67c8:	80 93 4a 1a 	sts	0x1A4A, r24	; 0x801a4a <__clock+0x4>
    67cc:	90 93 4b 1a 	sts	0x1A4B, r25	; 0x801a4b <__clock+0x5>
    67d0:	a0 93 4c 1a 	sts	0x1A4C, r26	; 0x801a4c <__clock+0x6>
    67d4:	b0 93 4d 1a 	sts	0x1A4D, r27	; 0x801a4d <__clock+0x7>
    67d8:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <__clock+0x4>
    67dc:	90 91 4b 1a 	lds	r25, 0x1A4B	; 0x801a4b <__clock+0x5>
    67e0:	a0 91 4c 1a 	lds	r26, 0x1A4C	; 0x801a4c <__clock+0x6>
    67e4:	b0 91 4d 1a 	lds	r27, 0x1A4D	; 0x801a4d <__clock+0x7>
    67e8:	81 15       	cp	r24, r1
    67ea:	9a 4c       	sbci	r25, 0xCA	; 202
    67ec:	aa 49       	sbci	r26, 0x9A	; 154
    67ee:	bb 43       	sbci	r27, 0x3B	; 59
    67f0:	dc f0       	brlt	.+54     	; 0x6828 <clock_task+0x78>
    67f2:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <__clock>
    67f6:	90 91 47 1a 	lds	r25, 0x1A47	; 0x801a47 <__clock+0x1>
    67fa:	a0 91 48 1a 	lds	r26, 0x1A48	; 0x801a48 <__clock+0x2>
    67fe:	b0 91 49 1a 	lds	r27, 0x1A49	; 0x801a49 <__clock+0x3>
    6802:	01 96       	adiw	r24, 0x01	; 1
    6804:	a1 1d       	adc	r26, r1
    6806:	b1 1d       	adc	r27, r1
    6808:	80 93 46 1a 	sts	0x1A46, r24	; 0x801a46 <__clock>
    680c:	90 93 47 1a 	sts	0x1A47, r25	; 0x801a47 <__clock+0x1>
    6810:	a0 93 48 1a 	sts	0x1A48, r26	; 0x801a48 <__clock+0x2>
    6814:	b0 93 49 1a 	sts	0x1A49, r27	; 0x801a49 <__clock+0x3>
    6818:	10 92 4a 1a 	sts	0x1A4A, r1	; 0x801a4a <__clock+0x4>
    681c:	10 92 4b 1a 	sts	0x1A4B, r1	; 0x801a4b <__clock+0x5>
    6820:	10 92 4c 1a 	sts	0x1A4C, r1	; 0x801a4c <__clock+0x6>
    6824:	10 92 4d 1a 	sts	0x1A4D, r1	; 0x801a4d <__clock+0x7>
    6828:	08 95       	ret

0000682a <clock_settime.part.2>:
    682a:	fc 01       	movw	r30, r24
    682c:	84 81       	ldd	r24, Z+4	; 0x04
    682e:	95 81       	ldd	r25, Z+5	; 0x05
    6830:	a6 81       	ldd	r26, Z+6	; 0x06
    6832:	b7 81       	ldd	r27, Z+7	; 0x07
    6834:	80 93 4a 1a 	sts	0x1A4A, r24	; 0x801a4a <__clock+0x4>
    6838:	90 93 4b 1a 	sts	0x1A4B, r25	; 0x801a4b <__clock+0x5>
    683c:	a0 93 4c 1a 	sts	0x1A4C, r26	; 0x801a4c <__clock+0x6>
    6840:	b0 93 4d 1a 	sts	0x1A4D, r27	; 0x801a4d <__clock+0x7>
    6844:	80 81       	ld	r24, Z
    6846:	91 81       	ldd	r25, Z+1	; 0x01
    6848:	a2 81       	ldd	r26, Z+2	; 0x02
    684a:	b3 81       	ldd	r27, Z+3	; 0x03
    684c:	80 93 46 1a 	sts	0x1A46, r24	; 0x801a46 <__clock>
    6850:	90 93 47 1a 	sts	0x1A47, r25	; 0x801a47 <__clock+0x1>
    6854:	a0 93 48 1a 	sts	0x1A48, r26	; 0x801a48 <__clock+0x2>
    6858:	b0 93 49 1a 	sts	0x1A49, r27	; 0x801a49 <__clock+0x3>
    685c:	80 91 4a 1a 	lds	r24, 0x1A4A	; 0x801a4a <__clock+0x4>
    6860:	90 91 4b 1a 	lds	r25, 0x1A4B	; 0x801a4b <__clock+0x5>
    6864:	a0 91 4c 1a 	lds	r26, 0x1A4C	; 0x801a4c <__clock+0x6>
    6868:	b0 91 4d 1a 	lds	r27, 0x1A4D	; 0x801a4d <__clock+0x7>
    686c:	44 81       	ldd	r20, Z+4	; 0x04
    686e:	55 81       	ldd	r21, Z+5	; 0x05
    6870:	66 81       	ldd	r22, Z+6	; 0x06
    6872:	77 81       	ldd	r23, Z+7	; 0x07
    6874:	48 17       	cp	r20, r24
    6876:	59 07       	cpc	r21, r25
    6878:	6a 07       	cpc	r22, r26
    687a:	7b 07       	cpc	r23, r27
    687c:	b9 f6       	brne	.-82     	; 0x682c <clock_settime.part.2+0x2>
    687e:	80 91 46 1a 	lds	r24, 0x1A46	; 0x801a46 <__clock>
    6882:	90 91 47 1a 	lds	r25, 0x1A47	; 0x801a47 <__clock+0x1>
    6886:	a0 91 48 1a 	lds	r26, 0x1A48	; 0x801a48 <__clock+0x2>
    688a:	b0 91 49 1a 	lds	r27, 0x1A49	; 0x801a49 <__clock+0x3>
    688e:	40 81       	ld	r20, Z
    6890:	51 81       	ldd	r21, Z+1	; 0x01
    6892:	62 81       	ldd	r22, Z+2	; 0x02
    6894:	73 81       	ldd	r23, Z+3	; 0x03
    6896:	48 17       	cp	r20, r24
    6898:	59 07       	cpc	r21, r25
    689a:	6a 07       	cpc	r22, r26
    689c:	7b 07       	cpc	r23, r27
    689e:	31 f6       	brne	.-116    	; 0x682c <clock_settime.part.2+0x2>
    68a0:	80 e0       	ldi	r24, 0x00	; 0
    68a2:	90 e0       	ldi	r25, 0x00	; 0
    68a4:	08 95       	ret

000068a6 <set_timers>:
    68a6:	00 d0       	rcall	.+0      	; 0x68a8 <set_timers+0x2>
    68a8:	1f 92       	push	r1
    68aa:	00 97       	sbiw	r24, 0x00	; 0
    68ac:	79 f1       	breq	.+94     	; 0x690c <set_timers+0x66>
    68ae:	ee e4       	ldi	r30, 0x4E	; 78
    68b0:	fa e1       	ldi	r31, 0x1A	; 26
    68b2:	4f ef       	ldi	r20, 0xFF	; 255
    68b4:	5f ef       	ldi	r21, 0xFF	; 255
    68b6:	20 e0       	ldi	r18, 0x00	; 0
    68b8:	30 e0       	ldi	r19, 0x00	; 0
    68ba:	60 81       	ld	r22, Z
    68bc:	71 81       	ldd	r23, Z+1	; 0x01
    68be:	86 17       	cp	r24, r22
    68c0:	97 07       	cpc	r25, r23
    68c2:	79 f0       	breq	.+30     	; 0x68e2 <set_timers+0x3c>
    68c4:	67 2b       	or	r22, r23
    68c6:	71 f4       	brne	.+28     	; 0x68e4 <set_timers+0x3e>
    68c8:	f9 01       	movw	r30, r18
    68ca:	ee 0f       	add	r30, r30
    68cc:	ff 1f       	adc	r31, r31
    68ce:	e2 0f       	add	r30, r18
    68d0:	f3 1f       	adc	r31, r19
    68d2:	e2 5b       	subi	r30, 0xB2	; 178
    68d4:	f5 4e       	sbci	r31, 0xE5	; 229
    68d6:	91 83       	std	Z+1, r25	; 0x01
    68d8:	80 83       	st	Z, r24
    68da:	81 e0       	ldi	r24, 0x01	; 1
    68dc:	82 83       	std	Z+2, r24	; 0x02
    68de:	c9 01       	movw	r24, r18
    68e0:	19 c0       	rjmp	.+50     	; 0x6914 <set_timers+0x6e>
    68e2:	a9 01       	movw	r20, r18
    68e4:	2f 5f       	subi	r18, 0xFF	; 255
    68e6:	3f 4f       	sbci	r19, 0xFF	; 255
    68e8:	33 96       	adiw	r30, 0x03	; 3
    68ea:	28 30       	cpi	r18, 0x08	; 8
    68ec:	31 05       	cpc	r19, r1
    68ee:	29 f7       	brne	.-54     	; 0x68ba <set_timers+0x14>
    68f0:	4f 3f       	cpi	r20, 0xFF	; 255
    68f2:	8f ef       	ldi	r24, 0xFF	; 255
    68f4:	58 07       	cpc	r21, r24
    68f6:	69 f4       	brne	.+26     	; 0x6912 <set_timers+0x6c>
    68f8:	8d ec       	ldi	r24, 0xCD	; 205
    68fa:	95 e0       	ldi	r25, 0x05	; 5
    68fc:	a0 e0       	ldi	r26, 0x00	; 0
    68fe:	ed b7       	in	r30, 0x3d	; 61
    6900:	fe b7       	in	r31, 0x3e	; 62
    6902:	81 83       	std	Z+1, r24	; 0x01
    6904:	92 83       	std	Z+2, r25	; 0x02
    6906:	a3 83       	std	Z+3, r26	; 0x03
    6908:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    690c:	8f ef       	ldi	r24, 0xFF	; 255
    690e:	9f ef       	ldi	r25, 0xFF	; 255
    6910:	01 c0       	rjmp	.+2      	; 0x6914 <set_timers+0x6e>
    6912:	ca 01       	movw	r24, r20
    6914:	0f 90       	pop	r0
    6916:	0f 90       	pop	r0
    6918:	0f 90       	pop	r0
    691a:	08 95       	ret

0000691c <delete_all_timers>:
    691c:	ee e4       	ldi	r30, 0x4E	; 78
    691e:	fa e1       	ldi	r31, 0x1A	; 26
    6920:	12 82       	std	Z+2, r1	; 0x02
    6922:	11 82       	std	Z+1, r1	; 0x01
    6924:	10 82       	st	Z, r1
    6926:	33 96       	adiw	r30, 0x03	; 3
    6928:	8a e1       	ldi	r24, 0x1A	; 26
    692a:	e6 36       	cpi	r30, 0x66	; 102
    692c:	f8 07       	cpc	r31, r24
    692e:	c1 f7       	brne	.-16     	; 0x6920 <delete_all_timers+0x4>
    6930:	08 95       	ret

00006932 <subtract_timespec>:
    6932:	0f 93       	push	r16
    6934:	1f 93       	push	r17
    6936:	cf 93       	push	r28
    6938:	df 93       	push	r29
    693a:	fc 01       	movw	r30, r24
    693c:	84 81       	ldd	r24, Z+4	; 0x04
    693e:	95 81       	ldd	r25, Z+5	; 0x05
    6940:	a6 81       	ldd	r26, Z+6	; 0x06
    6942:	b7 81       	ldd	r27, Z+7	; 0x07
    6944:	eb 01       	movw	r28, r22
    6946:	0c 81       	ldd	r16, Y+4	; 0x04
    6948:	1d 81       	ldd	r17, Y+5	; 0x05
    694a:	2e 81       	ldd	r18, Y+6	; 0x06
    694c:	3f 81       	ldd	r19, Y+7	; 0x07
    694e:	80 1b       	sub	r24, r16
    6950:	91 0b       	sbc	r25, r17
    6952:	a2 0b       	sbc	r26, r18
    6954:	b3 0b       	sbc	r27, r19
    6956:	b7 fd       	sbrc	r27, 7
    6958:	05 c0       	rjmp	.+10     	; 0x6964 <subtract_timespec+0x32>
    695a:	84 83       	std	Z+4, r24	; 0x04
    695c:	95 83       	std	Z+5, r25	; 0x05
    695e:	a6 83       	std	Z+6, r26	; 0x06
    6960:	b7 83       	std	Z+7, r27	; 0x07
    6962:	12 c0       	rjmp	.+36     	; 0x6988 <subtract_timespec+0x56>
    6964:	96 53       	subi	r25, 0x36	; 54
    6966:	a5 46       	sbci	r26, 0x65	; 101
    6968:	b4 4c       	sbci	r27, 0xC4	; 196
    696a:	84 83       	std	Z+4, r24	; 0x04
    696c:	95 83       	std	Z+5, r25	; 0x05
    696e:	a6 83       	std	Z+6, r26	; 0x06
    6970:	b7 83       	std	Z+7, r27	; 0x07
    6972:	80 81       	ld	r24, Z
    6974:	91 81       	ldd	r25, Z+1	; 0x01
    6976:	a2 81       	ldd	r26, Z+2	; 0x02
    6978:	b3 81       	ldd	r27, Z+3	; 0x03
    697a:	01 97       	sbiw	r24, 0x01	; 1
    697c:	a1 09       	sbc	r26, r1
    697e:	b1 09       	sbc	r27, r1
    6980:	80 83       	st	Z, r24
    6982:	91 83       	std	Z+1, r25	; 0x01
    6984:	a2 83       	std	Z+2, r26	; 0x02
    6986:	b3 83       	std	Z+3, r27	; 0x03
    6988:	80 81       	ld	r24, Z
    698a:	91 81       	ldd	r25, Z+1	; 0x01
    698c:	a2 81       	ldd	r26, Z+2	; 0x02
    698e:	b3 81       	ldd	r27, Z+3	; 0x03
    6990:	eb 01       	movw	r28, r22
    6992:	48 81       	ld	r20, Y
    6994:	59 81       	ldd	r21, Y+1	; 0x01
    6996:	6a 81       	ldd	r22, Y+2	; 0x02
    6998:	7b 81       	ldd	r23, Y+3	; 0x03
    699a:	84 1b       	sub	r24, r20
    699c:	95 0b       	sbc	r25, r21
    699e:	a6 0b       	sbc	r26, r22
    69a0:	b7 0b       	sbc	r27, r23
    69a2:	80 83       	st	Z, r24
    69a4:	91 83       	std	Z+1, r25	; 0x01
    69a6:	a2 83       	std	Z+2, r26	; 0x02
    69a8:	b3 83       	std	Z+3, r27	; 0x03
    69aa:	df 91       	pop	r29
    69ac:	cf 91       	pop	r28
    69ae:	1f 91       	pop	r17
    69b0:	0f 91       	pop	r16
    69b2:	08 95       	ret

000069b4 <ts_to_str>:
    69b4:	ad b7       	in	r26, 0x3d	; 61
    69b6:	be b7       	in	r27, 0x3e	; 62
    69b8:	1f 97       	sbiw	r26, 0x0f	; 15
    69ba:	0f b6       	in	r0, 0x3f	; 63
    69bc:	f8 94       	cli
    69be:	be bf       	out	0x3e, r27	; 62
    69c0:	0f be       	out	0x3f, r0	; 63
    69c2:	ad bf       	out	0x3d, r26	; 61
    69c4:	fc 01       	movw	r30, r24
    69c6:	44 81       	ldd	r20, Z+4	; 0x04
    69c8:	55 81       	ldd	r21, Z+5	; 0x05
    69ca:	66 81       	ldd	r22, Z+6	; 0x06
    69cc:	77 81       	ldd	r23, Z+7	; 0x07
    69ce:	ed b7       	in	r30, 0x3d	; 61
    69d0:	fe b7       	in	r31, 0x3e	; 62
    69d2:	44 87       	std	Z+12, r20	; 0x0c
    69d4:	55 87       	std	Z+13, r21	; 0x0d
    69d6:	66 87       	std	Z+14, r22	; 0x0e
    69d8:	77 87       	std	Z+15, r23	; 0x0f
    69da:	fc 01       	movw	r30, r24
    69dc:	80 81       	ld	r24, Z
    69de:	91 81       	ldd	r25, Z+1	; 0x01
    69e0:	a2 81       	ldd	r26, Z+2	; 0x02
    69e2:	b3 81       	ldd	r27, Z+3	; 0x03
    69e4:	ed b7       	in	r30, 0x3d	; 61
    69e6:	fe b7       	in	r31, 0x3e	; 62
    69e8:	80 87       	std	Z+8, r24	; 0x08
    69ea:	91 87       	std	Z+9, r25	; 0x09
    69ec:	a2 87       	std	Z+10, r26	; 0x0a
    69ee:	b3 87       	std	Z+11, r27	; 0x0b
    69f0:	83 ec       	ldi	r24, 0xC3	; 195
    69f2:	95 e0       	ldi	r25, 0x05	; 5
    69f4:	a0 e0       	ldi	r26, 0x00	; 0
    69f6:	85 83       	std	Z+5, r24	; 0x05
    69f8:	96 83       	std	Z+6, r25	; 0x06
    69fa:	a7 83       	std	Z+7, r26	; 0x07
    69fc:	8f e1       	ldi	r24, 0x1F	; 31
    69fe:	90 e0       	ldi	r25, 0x00	; 0
    6a00:	94 83       	std	Z+4, r25	; 0x04
    6a02:	83 83       	std	Z+3, r24	; 0x03
    6a04:	8a e7       	ldi	r24, 0x7A	; 122
    6a06:	97 e1       	ldi	r25, 0x17	; 23
    6a08:	92 83       	std	Z+2, r25	; 0x02
    6a0a:	81 83       	std	Z+1, r24	; 0x01
    6a0c:	0e 94 7d 46 	call	0x8cfa	; 0x8cfa <snprintf_P>
    6a10:	8a e7       	ldi	r24, 0x7A	; 122
    6a12:	97 e1       	ldi	r25, 0x17	; 23
    6a14:	ad b7       	in	r26, 0x3d	; 61
    6a16:	be b7       	in	r27, 0x3e	; 62
    6a18:	1f 96       	adiw	r26, 0x0f	; 15
    6a1a:	0f b6       	in	r0, 0x3f	; 63
    6a1c:	f8 94       	cli
    6a1e:	be bf       	out	0x3e, r27	; 62
    6a20:	0f be       	out	0x3f, r0	; 63
    6a22:	ad bf       	out	0x3d, r26	; 61
    6a24:	08 95       	ret

00006a26 <clock_elapsed_begin>:
    6a26:	62 e7       	ldi	r22, 0x72	; 114
    6a28:	77 e1       	ldi	r23, 0x17	; 23
    6a2a:	80 e0       	ldi	r24, 0x00	; 0
    6a2c:	90 e0       	ldi	r25, 0x00	; 0
    6a2e:	4b ce       	rjmp	.-874    	; 0x66c6 <clock_gettime>
    6a30:	08 95       	ret

00006a32 <clock_elapsed_end>:
    6a32:	af e0       	ldi	r26, 0x0F	; 15
    6a34:	b0 e0       	ldi	r27, 0x00	; 0
    6a36:	ef e1       	ldi	r30, 0x1F	; 31
    6a38:	f5 e3       	ldi	r31, 0x35	; 53
    6a3a:	0c 94 74 e6 	jmp	0x1cce8	; 0x1cce8 <__prologue_saves__+0x1c>
    6a3e:	8c 01       	movw	r16, r24
    6a40:	be 01       	movw	r22, r28
    6a42:	68 5f       	subi	r22, 0xF8	; 248
    6a44:	7f 4f       	sbci	r23, 0xFF	; 255
    6a46:	80 e0       	ldi	r24, 0x00	; 0
    6a48:	90 e0       	ldi	r25, 0x00	; 0
    6a4a:	3d de       	rcall	.-902    	; 0x66c6 <clock_gettime>
    6a4c:	62 e7       	ldi	r22, 0x72	; 114
    6a4e:	77 e1       	ldi	r23, 0x17	; 23
    6a50:	ce 01       	movw	r24, r28
    6a52:	08 96       	adiw	r24, 0x08	; 8
    6a54:	6e df       	rcall	.-292    	; 0x6932 <subtract_timespec>
    6a56:	01 15       	cp	r16, r1
    6a58:	11 05       	cpc	r17, r1
    6a5a:	b1 f0       	breq	.+44     	; 0x6a88 <clock_elapsed_end+0x56>
    6a5c:	f8 01       	movw	r30, r16
    6a5e:	80 81       	ld	r24, Z
    6a60:	88 23       	and	r24, r24
    6a62:	91 f0       	breq	.+36     	; 0x6a88 <clock_elapsed_end+0x56>
    6a64:	ce 01       	movw	r24, r28
    6a66:	08 96       	adiw	r24, 0x08	; 8
    6a68:	a5 df       	rcall	.-182    	; 0x69b4 <ts_to_str>
    6a6a:	ed b7       	in	r30, 0x3d	; 61
    6a6c:	fe b7       	in	r31, 0x3e	; 62
    6a6e:	97 83       	std	Z+7, r25	; 0x07
    6a70:	86 83       	std	Z+6, r24	; 0x06
    6a72:	15 83       	std	Z+5, r17	; 0x05
    6a74:	04 83       	std	Z+4, r16	; 0x04
    6a76:	85 eb       	ldi	r24, 0xB5	; 181
    6a78:	95 e0       	ldi	r25, 0x05	; 5
    6a7a:	a0 e0       	ldi	r26, 0x00	; 0
    6a7c:	81 83       	std	Z+1, r24	; 0x01
    6a7e:	92 83       	std	Z+2, r25	; 0x02
    6a80:	a3 83       	std	Z+3, r26	; 0x03
    6a82:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    6a86:	0f c0       	rjmp	.+30     	; 0x6aa6 <clock_elapsed_end+0x74>
    6a88:	ce 01       	movw	r24, r28
    6a8a:	08 96       	adiw	r24, 0x08	; 8
    6a8c:	93 df       	rcall	.-218    	; 0x69b4 <ts_to_str>
    6a8e:	ed b7       	in	r30, 0x3d	; 61
    6a90:	fe b7       	in	r31, 0x3e	; 62
    6a92:	95 83       	std	Z+5, r25	; 0x05
    6a94:	84 83       	std	Z+4, r24	; 0x04
    6a96:	8a ea       	ldi	r24, 0xAA	; 170
    6a98:	95 e0       	ldi	r25, 0x05	; 5
    6a9a:	a0 e0       	ldi	r26, 0x00	; 0
    6a9c:	81 83       	std	Z+1, r24	; 0x01
    6a9e:	92 83       	std	Z+2, r25	; 0x02
    6aa0:	a3 83       	std	Z+3, r26	; 0x03
    6aa2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    6aa6:	2f 96       	adiw	r28, 0x0f	; 15
    6aa8:	e4 e0       	ldi	r30, 0x04	; 4
    6aaa:	0c 94 90 e6 	jmp	0x1cd20	; 0x1cd20 <__epilogue_restores__+0x1c>

00006aae <clock_clear>:
    6aae:	a8 e0       	ldi	r26, 0x08	; 8
    6ab0:	b0 e0       	ldi	r27, 0x00	; 0
    6ab2:	ed e5       	ldi	r30, 0x5D	; 93
    6ab4:	f5 e3       	ldi	r31, 0x35	; 53
    6ab6:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
    6aba:	1d 82       	std	Y+5, r1	; 0x05
    6abc:	1e 82       	std	Y+6, r1	; 0x06
    6abe:	1f 82       	std	Y+7, r1	; 0x07
    6ac0:	18 86       	std	Y+8, r1	; 0x08
    6ac2:	19 82       	std	Y+1, r1	; 0x01
    6ac4:	1a 82       	std	Y+2, r1	; 0x02
    6ac6:	1b 82       	std	Y+3, r1	; 0x03
    6ac8:	1c 82       	std	Y+4, r1	; 0x04
    6aca:	ce 01       	movw	r24, r28
    6acc:	01 96       	adiw	r24, 0x01	; 1
    6ace:	ad de       	rcall	.-678    	; 0x682a <clock_settime.part.2>
    6ad0:	e6 e6       	ldi	r30, 0x66	; 102
    6ad2:	fa e1       	ldi	r31, 0x1A	; 26
    6ad4:	11 82       	std	Z+1, r1	; 0x01
    6ad6:	10 82       	st	Z, r1
    6ad8:	13 82       	std	Z+3, r1	; 0x03
    6ada:	12 82       	std	Z+2, r1	; 0x02
    6adc:	28 96       	adiw	r28, 0x08	; 8
    6ade:	e2 e0       	ldi	r30, 0x02	; 2
    6ae0:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00006ae4 <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6ae4:	80 91 9a 17 	lds	r24, 0x179A	; 0x80179a <timers_configured>
    6ae8:	90 91 9b 17 	lds	r25, 0x179B	; 0x80179b <timers_configured+0x1>
    6aec:	89 2b       	or	r24, r25
    6aee:	69 f0       	breq	.+26     	; 0x6b0a <enable_timers+0x26>
    6af0:	80 91 9c 17 	lds	r24, 0x179C	; 0x80179c <timers_enabled>
    6af4:	90 91 9d 17 	lds	r25, 0x179D	; 0x80179d <timers_enabled+0x1>
    6af8:	89 2b       	or	r24, r25
    6afa:	39 f4       	brne	.+14     	; 0x6b0a <enable_timers+0x26>
    {
        enable_system_task();
    6afc:	a8 dd       	rcall	.-1200   	; 0x664e <enable_system_task>
        timers_enabled = 1;
    6afe:	81 e0       	ldi	r24, 0x01	; 1
    6b00:	90 e0       	ldi	r25, 0x00	; 0
    6b02:	90 93 9d 17 	sts	0x179D, r25	; 0x80179d <timers_enabled+0x1>
    6b06:	80 93 9c 17 	sts	0x179C, r24	; 0x80179c <timers_enabled>
    6b0a:	08 95       	ret

00006b0c <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6b0c:	cf 93       	push	r28
    6b0e:	df 93       	push	r29
    6b10:	ce e4       	ldi	r28, 0x4E	; 78
    6b12:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6b14:	8a 81       	ldd	r24, Y+2	; 0x02
    6b16:	88 23       	and	r24, r24
    6b18:	29 f0       	breq	.+10     	; 0x6b24 <execute_timers+0x18>
    6b1a:	e8 81       	ld	r30, Y
    6b1c:	f9 81       	ldd	r31, Y+1	; 0x01
    6b1e:	30 97       	sbiw	r30, 0x00	; 0
    6b20:	09 f0       	breq	.+2      	; 0x6b24 <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6b22:	09 95       	icall
    6b24:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6b26:	8a e1       	ldi	r24, 0x1A	; 26
    6b28:	c6 36       	cpi	r28, 0x66	; 102
    6b2a:	d8 07       	cpc	r29, r24
    6b2c:	99 f7       	brne	.-26     	; 0x6b14 <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6b2e:	df 91       	pop	r29
    6b30:	cf 91       	pop	r28
    6b32:	08 95       	ret

00006b34 <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    6b34:	00 d0       	rcall	.+0      	; 0x6b36 <init_timers+0x2>
    6b36:	1f 92       	push	r1
    printf("Timers init called\n");
    6b38:	86 e9       	ldi	r24, 0x96	; 150
    6b3a:	95 e0       	ldi	r25, 0x05	; 5
    6b3c:	a0 e0       	ldi	r26, 0x00	; 0
    6b3e:	ed b7       	in	r30, 0x3d	; 61
    6b40:	fe b7       	in	r31, 0x3e	; 62
    6b42:	81 83       	std	Z+1, r24	; 0x01
    6b44:	92 83       	std	Z+2, r25	; 0x02
    6b46:	a3 83       	std	Z+3, r26	; 0x03
    6b48:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

    if(!timers_configured)
    6b4c:	80 91 9a 17 	lds	r24, 0x179A	; 0x80179a <timers_configured>
    6b50:	90 91 9b 17 	lds	r25, 0x179B	; 0x80179b <timers_configured+0x1>
    6b54:	89 2b       	or	r24, r25
    6b56:	a9 f4       	brne	.+42     	; 0x6b82 <init_timers+0x4e>
    {
        install_timers_isr();
    6b58:	7c dd       	rcall	.-1288   	; 0x6652 <install_timers_isr>
        timers_configured = 1;
    6b5a:	81 e0       	ldi	r24, 0x01	; 1
    6b5c:	90 e0       	ldi	r25, 0x00	; 0
    6b5e:	90 93 9b 17 	sts	0x179B, r25	; 0x80179b <timers_configured+0x1>
    6b62:	80 93 9a 17 	sts	0x179A, r24	; 0x80179a <timers_configured>
        timers_enabled = 0;
    6b66:	10 92 9d 17 	sts	0x179D, r1	; 0x80179d <timers_enabled+0x1>
    6b6a:	10 92 9c 17 	sts	0x179C, r1	; 0x80179c <timers_enabled>
        printf("Timers configured\n");
    6b6e:	83 e8       	ldi	r24, 0x83	; 131
    6b70:	95 e0       	ldi	r25, 0x05	; 5
    6b72:	a0 e0       	ldi	r26, 0x00	; 0
    6b74:	ed b7       	in	r30, 0x3d	; 61
    6b76:	fe b7       	in	r31, 0x3e	; 62
    6b78:	81 83       	std	Z+1, r24	; 0x01
    6b7a:	92 83       	std	Z+2, r25	; 0x02
    6b7c:	a3 83       	std	Z+3, r26	; 0x03
    6b7e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    }

    delete_all_timers();

    clock_clear();
    6b82:	cc de       	rcall	.-616    	; 0x691c <delete_all_timers>
    6b84:	94 df       	rcall	.-216    	; 0x6aae <clock_clear>
    printf("Clock Init\n");
    6b86:	87 e7       	ldi	r24, 0x77	; 119
    6b88:	95 e0       	ldi	r25, 0x05	; 5
    6b8a:	a0 e0       	ldi	r26, 0x00	; 0
    6b8c:	ed b7       	in	r30, 0x3d	; 61
    6b8e:	fe b7       	in	r31, 0x3e	; 62
    6b90:	81 83       	std	Z+1, r24	; 0x01
    6b92:	92 83       	std	Z+2, r25	; 0x02
    6b94:	a3 83       	std	Z+3, r26	; 0x03
    6b96:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6b9a:	61 e0       	ldi	r22, 0x01	; 1
    6b9c:	70 e0       	ldi	r23, 0x00	; 0
    6b9e:	88 ed       	ldi	r24, 0xD8	; 216
    6ba0:	93 e3       	ldi	r25, 0x33	; 51
    6ba2:	81 de       	rcall	.-766    	; 0x68a6 <set_timers>
    6ba4:	01 96       	adiw	r24, 0x01	; 1
    6ba6:	51 f4       	brne	.+20     	; 0x6bbc <init_timers+0x88>
        printf("Clock task init failed\n");
    6ba8:	8f e5       	ldi	r24, 0x5F	; 95
    6baa:	95 e0       	ldi	r25, 0x05	; 5
    6bac:	a0 e0       	ldi	r26, 0x00	; 0
    6bae:	ed b7       	in	r30, 0x3d	; 61
    6bb0:	fe b7       	in	r31, 0x3e	; 62
    6bb2:	81 83       	std	Z+1, r24	; 0x01
    6bb4:	92 83       	std	Z+2, r25	; 0x02
    6bb6:	a3 83       	std	Z+3, r26	; 0x03
    6bb8:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("Clock Installed\n");
    6bbc:	8e e4       	ldi	r24, 0x4E	; 78
    6bbe:	95 e0       	ldi	r25, 0x05	; 5
    6bc0:	a0 e0       	ldi	r26, 0x00	; 0
    6bc2:	ed b7       	in	r30, 0x3d	; 61
    6bc4:	fe b7       	in	r31, 0x3e	; 62
    6bc6:	81 83       	std	Z+1, r24	; 0x01
    6bc8:	92 83       	std	Z+2, r25	; 0x02
    6bca:	a3 83       	std	Z+3, r26	; 0x03
    6bcc:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

    enable_timers();
    6bd0:	89 df       	rcall	.-238    	; 0x6ae4 <enable_timers>

    printf("Timers enabled\n");
    6bd2:	8e e3       	ldi	r24, 0x3E	; 62
    6bd4:	95 e0       	ldi	r25, 0x05	; 5
    6bd6:	a0 e0       	ldi	r26, 0x00	; 0
    6bd8:	ed b7       	in	r30, 0x3d	; 61
    6bda:	fe b7       	in	r31, 0x3e	; 62
    6bdc:	81 83       	std	Z+1, r24	; 0x01
    6bde:	92 83       	std	Z+2, r25	; 0x02
    6be0:	a3 83       	std	Z+3, r26	; 0x03
    6be2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
}
    6be6:	0f 90       	pop	r0
    6be8:	0f 90       	pop	r0
    6bea:	0f 90       	pop	r0
    6bec:	08 95       	ret

00006bee <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
    6bee:	89 2b       	or	r24, r25
    6bf0:	81 f4       	brne	.+32     	; 0x6c12 <clock_getres+0x24>
        return(-1);
    res->tv_sec = 0;
    6bf2:	fb 01       	movw	r30, r22
    6bf4:	10 82       	st	Z, r1
    6bf6:	11 82       	std	Z+1, r1	; 0x01
    6bf8:	12 82       	std	Z+2, r1	; 0x02
    6bfa:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6bfc:	80 e4       	ldi	r24, 0x40	; 64
    6bfe:	92 e4       	ldi	r25, 0x42	; 66
    6c00:	af e0       	ldi	r26, 0x0F	; 15
    6c02:	b0 e0       	ldi	r27, 0x00	; 0
    6c04:	84 83       	std	Z+4, r24	; 0x04
    6c06:	95 83       	std	Z+5, r25	; 0x05
    6c08:	a6 83       	std	Z+6, r26	; 0x06
    6c0a:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
    6c0c:	80 e0       	ldi	r24, 0x00	; 0
    6c0e:	90 e0       	ldi	r25, 0x00	; 0
    6c10:	08 95       	ret
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
        return(-1);
    6c12:	8f ef       	ldi	r24, 0xFF	; 255
    6c14:	9f ef       	ldi	r25, 0xFF	; 255
    res->tv_sec = 0;
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    return(0);
}
    6c16:	08 95       	ret

00006c18 <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id  __attribute__((unused)), const struct timespec *ts)
{
    if(clk_id)
    6c18:	89 2b       	or	r24, r25
    6c1a:	19 f4       	brne	.+6      	; 0x6c22 <clock_settime+0xa>
    6c1c:	cb 01       	movw	r24, r22
    6c1e:	05 ce       	rjmp	.-1014   	; 0x682a <clock_settime.part.2>
    6c20:	08 95       	ret
        return(-1);
    6c22:	8f ef       	ldi	r24, 0xFF	; 255
    6c24:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6c26:	08 95       	ret

00006c28 <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6c28:	9c 01       	movw	r18, r24
    6c2a:	83 70       	andi	r24, 0x03	; 3
    6c2c:	99 27       	eor	r25, r25
    6c2e:	00 97       	sbiw	r24, 0x00	; 0
    6c30:	69 f4       	brne	.+26     	; 0x6c4c <IS_Leap+0x24>
    6c32:	2c 36       	cpi	r18, 0x6C	; 108
    6c34:	47 e0       	ldi	r20, 0x07	; 7
    6c36:	34 07       	cpc	r19, r20
    6c38:	59 f0       	breq	.+22     	; 0x6c50 <IS_Leap+0x28>
    6c3a:	51 e0       	ldi	r21, 0x01	; 1
    6c3c:	40 e0       	ldi	r20, 0x00	; 0
    6c3e:	24 33       	cpi	r18, 0x34	; 52
    6c40:	38 40       	sbci	r19, 0x08	; 8
    6c42:	09 f4       	brne	.+2      	; 0x6c46 <IS_Leap+0x1e>
    6c44:	50 e0       	ldi	r21, 0x00	; 0
    6c46:	85 2f       	mov	r24, r21
    6c48:	94 2f       	mov	r25, r20
    6c4a:	08 95       	ret
    6c4c:	80 e0       	ldi	r24, 0x00	; 0
    6c4e:	90 e0       	ldi	r25, 0x00	; 0
    6c50:	08 95       	ret

00006c52 <tm_mon_to_ascii>:
    6c52:	8c 30       	cpi	r24, 0x0C	; 12
    6c54:	91 05       	cpc	r25, r1
    6c56:	40 f4       	brcc	.+16     	; 0x6c68 <tm_mon_to_ascii+0x16>
    6c58:	88 0f       	add	r24, r24
    6c5a:	99 1f       	adc	r25, r25
    6c5c:	fc 01       	movw	r30, r24
    6c5e:	e5 5f       	subi	r30, 0xF5	; 245
    6c60:	fe 4f       	sbci	r31, 0xFE	; 254
    6c62:	80 81       	ld	r24, Z
    6c64:	91 81       	ldd	r25, Z+1	; 0x01
    6c66:	08 95       	ret
    6c68:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__Month+0x18>
    6c6c:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__Month+0x19>
    6c70:	08 95       	ret

00006c72 <Days_Per_Month>:
    6c72:	cf 93       	push	r28
    6c74:	df 93       	push	r29
    6c76:	8c 30       	cpi	r24, 0x0C	; 12
    6c78:	91 05       	cpc	r25, r1
    6c7a:	24 f0       	brlt	.+8      	; 0x6c84 <Days_Per_Month+0x12>
    6c7c:	6f 5f       	subi	r22, 0xFF	; 255
    6c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    6c80:	0c 97       	sbiw	r24, 0x0c	; 12
    6c82:	f9 cf       	rjmp	.-14     	; 0x6c76 <Days_Per_Month+0x4>
    6c84:	97 ff       	sbrs	r25, 7
    6c86:	04 c0       	rjmp	.+8      	; 0x6c90 <Days_Per_Month+0x1e>
    6c88:	61 50       	subi	r22, 0x01	; 1
    6c8a:	71 09       	sbc	r23, r1
    6c8c:	0c 96       	adiw	r24, 0x0c	; 12
    6c8e:	fa cf       	rjmp	.-12     	; 0x6c84 <Days_Per_Month+0x12>
    6c90:	fc 01       	movw	r30, r24
    6c92:	ee 0f       	add	r30, r30
    6c94:	ff 1f       	adc	r31, r31
    6c96:	e8 57       	subi	r30, 0x78	; 120
    6c98:	fc 4f       	sbci	r31, 0xFC	; 252
    6c9a:	c0 81       	ld	r28, Z
    6c9c:	d1 81       	ldd	r29, Z+1	; 0x01
    6c9e:	01 97       	sbiw	r24, 0x01	; 1
    6ca0:	29 f4       	brne	.+10     	; 0x6cac <Days_Per_Month+0x3a>
    6ca2:	cb 01       	movw	r24, r22
    6ca4:	c1 df       	rcall	.-126    	; 0x6c28 <IS_Leap>
    6ca6:	89 2b       	or	r24, r25
    6ca8:	09 f0       	breq	.+2      	; 0x6cac <Days_Per_Month+0x3a>
    6caa:	21 96       	adiw	r28, 0x01	; 1
    6cac:	ce 01       	movw	r24, r28
    6cae:	df 91       	pop	r29
    6cb0:	cf 91       	pop	r28
    6cb2:	08 95       	ret

00006cb4 <time_to_tm>:
    6cb4:	a0 e0       	ldi	r26, 0x00	; 0
    6cb6:	b0 e0       	ldi	r27, 0x00	; 0
    6cb8:	e0 e6       	ldi	r30, 0x60	; 96
    6cba:	f6 e3       	ldi	r31, 0x36	; 54
    6cbc:	0c 94 68 e6 	jmp	0x1ccd0	; 0x1ccd0 <__prologue_saves__+0x4>
    6cc0:	e8 01       	movw	r28, r16
    6cc2:	e6 e1       	ldi	r30, 0x16	; 22
    6cc4:	d8 01       	movw	r26, r16
    6cc6:	1d 92       	st	X+, r1
    6cc8:	ea 95       	dec	r30
    6cca:	e9 f7       	brne	.-6      	; 0x6cc6 <time_to_tm+0x12>
    6ccc:	61 15       	cp	r22, r1
    6cce:	bd e5       	ldi	r27, 0x5D	; 93
    6cd0:	7b 07       	cpc	r23, r27
    6cd2:	bd ef       	ldi	r27, 0xFD	; 253
    6cd4:	8b 07       	cpc	r24, r27
    6cd6:	bf ef       	ldi	r27, 0xFF	; 255
    6cd8:	9b 07       	cpc	r25, r27
    6cda:	08 f0       	brcs	.+2      	; 0x6cde <time_to_tm+0x2a>
    6cdc:	c0 c0       	rjmp	.+384    	; 0x6e5e <time_to_tm+0x1aa>
    6cde:	6b 01       	movw	r12, r22
    6ce0:	7c 01       	movw	r14, r24
    6ce2:	c2 1a       	sub	r12, r18
    6ce4:	d3 0a       	sbc	r13, r19
    6ce6:	e4 0a       	sbc	r14, r20
    6ce8:	f5 0a       	sbc	r15, r21
    6cea:	46 01       	movw	r8, r12
    6cec:	57 01       	movw	r10, r14
    6cee:	e0 e8       	ldi	r30, 0x80	; 128
    6cf0:	ce 16       	cp	r12, r30
    6cf2:	ee ea       	ldi	r30, 0xAE	; 174
    6cf4:	de 06       	cpc	r13, r30
    6cf6:	ee ef       	ldi	r30, 0xFE	; 254
    6cf8:	ee 06       	cpc	r14, r30
    6cfa:	ef ef       	ldi	r30, 0xFF	; 255
    6cfc:	fe 06       	cpc	r15, r30
    6cfe:	50 f0       	brcs	.+20     	; 0x6d14 <time_to_tm+0x60>
    6d00:	80 e8       	ldi	r24, 0x80	; 128
    6d02:	88 0e       	add	r8, r24
    6d04:	81 e5       	ldi	r24, 0x51	; 81
    6d06:	98 1e       	adc	r9, r24
    6d08:	81 e0       	ldi	r24, 0x01	; 1
    6d0a:	a8 1e       	adc	r10, r24
    6d0c:	b1 1c       	adc	r11, r1
    6d0e:	01 e0       	ldi	r16, 0x01	; 1
    6d10:	10 e0       	ldi	r17, 0x00	; 0
    6d12:	02 c0       	rjmp	.+4      	; 0x6d18 <time_to_tm+0x64>
    6d14:	00 e0       	ldi	r16, 0x00	; 0
    6d16:	10 e0       	ldi	r17, 0x00	; 0
    6d18:	8c e3       	ldi	r24, 0x3C	; 60
    6d1a:	48 2e       	mov	r4, r24
    6d1c:	51 2c       	mov	r5, r1
    6d1e:	61 2c       	mov	r6, r1
    6d20:	71 2c       	mov	r7, r1
    6d22:	c5 01       	movw	r24, r10
    6d24:	b4 01       	movw	r22, r8
    6d26:	a3 01       	movw	r20, r6
    6d28:	92 01       	movw	r18, r4
    6d2a:	0e 94 f9 e5 	call	0x1cbf2	; 0x1cbf2 <__udivmodsi4>
    6d2e:	79 83       	std	Y+1, r23	; 0x01
    6d30:	68 83       	st	Y, r22
    6d32:	ca 01       	movw	r24, r20
    6d34:	b9 01       	movw	r22, r18
    6d36:	a3 01       	movw	r20, r6
    6d38:	92 01       	movw	r18, r4
    6d3a:	0e 94 f9 e5 	call	0x1cbf2	; 0x1cbf2 <__udivmodsi4>
    6d3e:	7b 83       	std	Y+3, r23	; 0x03
    6d40:	6a 83       	std	Y+2, r22	; 0x02
    6d42:	c5 01       	movw	r24, r10
    6d44:	b4 01       	movw	r22, r8
    6d46:	20 e1       	ldi	r18, 0x10	; 16
    6d48:	3e e0       	ldi	r19, 0x0E	; 14
    6d4a:	40 e0       	ldi	r20, 0x00	; 0
    6d4c:	50 e0       	ldi	r21, 0x00	; 0
    6d4e:	0e 94 f9 e5 	call	0x1cbf2	; 0x1cbf2 <__udivmodsi4>
    6d52:	ca 01       	movw	r24, r20
    6d54:	b9 01       	movw	r22, r18
    6d56:	28 e1       	ldi	r18, 0x18	; 24
    6d58:	30 e0       	ldi	r19, 0x00	; 0
    6d5a:	40 e0       	ldi	r20, 0x00	; 0
    6d5c:	50 e0       	ldi	r21, 0x00	; 0
    6d5e:	0e 94 f9 e5 	call	0x1cbf2	; 0x1cbf2 <__udivmodsi4>
    6d62:	7d 83       	std	Y+5, r23	; 0x05
    6d64:	6c 83       	std	Y+4, r22	; 0x04
    6d66:	01 15       	cp	r16, r1
    6d68:	11 05       	cpc	r17, r1
    6d6a:	89 f0       	breq	.+34     	; 0x6d8e <time_to_tm+0xda>
    6d6c:	85 e4       	ldi	r24, 0x45	; 69
    6d6e:	90 e0       	ldi	r25, 0x00	; 0
    6d70:	9b 87       	std	Y+11, r25	; 0x0b
    6d72:	8a 87       	std	Y+10, r24	; 0x0a
    6d74:	8b e0       	ldi	r24, 0x0B	; 11
    6d76:	90 e0       	ldi	r25, 0x00	; 0
    6d78:	99 87       	std	Y+9, r25	; 0x09
    6d7a:	88 87       	std	Y+8, r24	; 0x08
    6d7c:	8f e1       	ldi	r24, 0x1F	; 31
    6d7e:	90 e0       	ldi	r25, 0x00	; 0
    6d80:	9f 83       	std	Y+7, r25	; 0x07
    6d82:	8e 83       	std	Y+6, r24	; 0x06
    6d84:	83 e0       	ldi	r24, 0x03	; 3
    6d86:	90 e0       	ldi	r25, 0x00	; 0
    6d88:	9d 87       	std	Y+13, r25	; 0x0d
    6d8a:	8c 87       	std	Y+12, r24	; 0x0c
    6d8c:	65 c0       	rjmp	.+202    	; 0x6e58 <time_to_tm+0x1a4>
    6d8e:	c5 01       	movw	r24, r10
    6d90:	b4 01       	movw	r22, r8
    6d92:	20 e8       	ldi	r18, 0x80	; 128
    6d94:	31 e5       	ldi	r19, 0x51	; 81
    6d96:	41 e0       	ldi	r20, 0x01	; 1
    6d98:	50 e0       	ldi	r21, 0x00	; 0
    6d9a:	0e 94 f9 e5 	call	0x1cbf2	; 0x1cbf2 <__udivmodsi4>
    6d9e:	49 01       	movw	r8, r18
    6da0:	5a 01       	movw	r10, r20
    6da2:	ca 01       	movw	r24, r20
    6da4:	b9 01       	movw	r22, r18
    6da6:	6c 5f       	subi	r22, 0xFC	; 252
    6da8:	7f 4f       	sbci	r23, 0xFF	; 255
    6daa:	8f 4f       	sbci	r24, 0xFF	; 255
    6dac:	9f 4f       	sbci	r25, 0xFF	; 255
    6dae:	27 e0       	ldi	r18, 0x07	; 7
    6db0:	30 e0       	ldi	r19, 0x00	; 0
    6db2:	40 e0       	ldi	r20, 0x00	; 0
    6db4:	50 e0       	ldi	r21, 0x00	; 0
    6db6:	0e 94 1b e6 	call	0x1cc36	; 0x1cc36 <__divmodsi4>
    6dba:	7d 87       	std	Y+13, r23	; 0x0d
    6dbc:	6c 87       	std	Y+12, r22	; 0x0c
    6dbe:	02 eb       	ldi	r16, 0xB2	; 178
    6dc0:	17 e0       	ldi	r17, 0x07	; 7
    6dc2:	c8 01       	movw	r24, r16
    6dc4:	31 df       	rcall	.-414    	; 0x6c28 <IS_Leap>
    6dc6:	00 97       	sbiw	r24, 0x00	; 0
    6dc8:	19 f4       	brne	.+6      	; 0x6dd0 <time_to_tm+0x11c>
    6dca:	4d e6       	ldi	r20, 0x6D	; 109
    6dcc:	51 e0       	ldi	r21, 0x01	; 1
    6dce:	02 c0       	rjmp	.+4      	; 0x6dd4 <time_to_tm+0x120>
    6dd0:	4e e6       	ldi	r20, 0x6E	; 110
    6dd2:	51 e0       	ldi	r21, 0x01	; 1
    6dd4:	05 2e       	mov	r0, r21
    6dd6:	00 0c       	add	r0, r0
    6dd8:	66 0b       	sbc	r22, r22
    6dda:	77 0b       	sbc	r23, r23
    6ddc:	84 16       	cp	r8, r20
    6dde:	95 06       	cpc	r9, r21
    6de0:	a6 06       	cpc	r10, r22
    6de2:	b7 06       	cpc	r11, r23
    6de4:	3c f0       	brlt	.+14     	; 0x6df4 <time_to_tm+0x140>
    6de6:	0f 5f       	subi	r16, 0xFF	; 255
    6de8:	1f 4f       	sbci	r17, 0xFF	; 255
    6dea:	84 1a       	sub	r8, r20
    6dec:	95 0a       	sbc	r9, r21
    6dee:	a6 0a       	sbc	r10, r22
    6df0:	b7 0a       	sbc	r11, r23
    6df2:	e7 cf       	rjmp	.-50     	; 0x6dc2 <time_to_tm+0x10e>
    6df4:	0c 56       	subi	r16, 0x6C	; 108
    6df6:	17 40       	sbci	r17, 0x07	; 7
    6df8:	1b 87       	std	Y+11, r17	; 0x0b
    6dfa:	0a 87       	std	Y+10, r16	; 0x0a
    6dfc:	9f 86       	std	Y+15, r9	; 0x0f
    6dfe:	8e 86       	std	Y+14, r8	; 0x0e
    6e00:	e8 e8       	ldi	r30, 0x88	; 136
    6e02:	f3 e0       	ldi	r31, 0x03	; 3
    6e04:	20 e0       	ldi	r18, 0x00	; 0
    6e06:	30 e0       	ldi	r19, 0x00	; 0
    6e08:	18 14       	cp	r1, r8
    6e0a:	19 04       	cpc	r1, r9
    6e0c:	1a 04       	cpc	r1, r10
    6e0e:	1b 04       	cpc	r1, r11
    6e10:	e4 f4       	brge	.+56     	; 0x6e4a <time_to_tm+0x196>
    6e12:	2c 30       	cpi	r18, 0x0C	; 12
    6e14:	31 05       	cpc	r19, r1
    6e16:	c9 f0       	breq	.+50     	; 0x6e4a <time_to_tm+0x196>
    6e18:	41 91       	ld	r20, Z+
    6e1a:	51 91       	ld	r21, Z+
    6e1c:	21 30       	cpi	r18, 0x01	; 1
    6e1e:	31 05       	cpc	r19, r1
    6e20:	21 f4       	brne	.+8      	; 0x6e2a <time_to_tm+0x176>
    6e22:	00 97       	sbiw	r24, 0x00	; 0
    6e24:	11 f0       	breq	.+4      	; 0x6e2a <time_to_tm+0x176>
    6e26:	4f 5f       	subi	r20, 0xFF	; 255
    6e28:	5f 4f       	sbci	r21, 0xFF	; 255
    6e2a:	05 2e       	mov	r0, r21
    6e2c:	00 0c       	add	r0, r0
    6e2e:	66 0b       	sbc	r22, r22
    6e30:	77 0b       	sbc	r23, r23
    6e32:	84 16       	cp	r8, r20
    6e34:	95 06       	cpc	r9, r21
    6e36:	a6 06       	cpc	r10, r22
    6e38:	b7 06       	cpc	r11, r23
    6e3a:	3c f0       	brlt	.+14     	; 0x6e4a <time_to_tm+0x196>
    6e3c:	84 1a       	sub	r8, r20
    6e3e:	95 0a       	sbc	r9, r21
    6e40:	a6 0a       	sbc	r10, r22
    6e42:	b7 0a       	sbc	r11, r23
    6e44:	2f 5f       	subi	r18, 0xFF	; 255
    6e46:	3f 4f       	sbci	r19, 0xFF	; 255
    6e48:	df cf       	rjmp	.-66     	; 0x6e08 <time_to_tm+0x154>
    6e4a:	39 87       	std	Y+9, r19	; 0x09
    6e4c:	28 87       	std	Y+8, r18	; 0x08
    6e4e:	af ef       	ldi	r26, 0xFF	; 255
    6e50:	8a 1a       	sub	r8, r26
    6e52:	9a 0a       	sbc	r9, r26
    6e54:	9f 82       	std	Y+7, r9	; 0x07
    6e56:	8e 82       	std	Y+6, r8	; 0x06
    6e58:	b6 01       	movw	r22, r12
    6e5a:	c7 01       	movw	r24, r14
    6e5c:	04 c0       	rjmp	.+8      	; 0x6e66 <time_to_tm+0x1b2>
    6e5e:	6f ef       	ldi	r22, 0xFF	; 255
    6e60:	7f ef       	ldi	r23, 0xFF	; 255
    6e62:	8f ef       	ldi	r24, 0xFF	; 255
    6e64:	9f ef       	ldi	r25, 0xFF	; 255
    6e66:	cd b7       	in	r28, 0x3d	; 61
    6e68:	de b7       	in	r29, 0x3e	; 62
    6e6a:	e0 e1       	ldi	r30, 0x10	; 16
    6e6c:	0c 94 84 e6 	jmp	0x1cd08	; 0x1cd08 <__epilogue_restores__+0x4>

00006e70 <gmtime_r>:
    6e70:	0f 93       	push	r16
    6e72:	1f 93       	push	r17
    6e74:	cf 93       	push	r28
    6e76:	df 93       	push	r29
    6e78:	eb 01       	movw	r28, r22
    6e7a:	fc 01       	movw	r30, r24
    6e7c:	60 81       	ld	r22, Z
    6e7e:	71 81       	ldd	r23, Z+1	; 0x01
    6e80:	82 81       	ldd	r24, Z+2	; 0x02
    6e82:	93 81       	ldd	r25, Z+3	; 0x03
    6e84:	8e 01       	movw	r16, r28
    6e86:	20 e0       	ldi	r18, 0x00	; 0
    6e88:	30 e0       	ldi	r19, 0x00	; 0
    6e8a:	a9 01       	movw	r20, r18
    6e8c:	13 df       	rcall	.-474    	; 0x6cb4 <time_to_tm>
    6e8e:	ce 01       	movw	r24, r28
    6e90:	df 91       	pop	r29
    6e92:	cf 91       	pop	r28
    6e94:	1f 91       	pop	r17
    6e96:	0f 91       	pop	r16
    6e98:	08 95       	ret

00006e9a <gmtime>:
    6e9a:	2c eb       	ldi	r18, 0xBC	; 188
    6e9c:	37 e1       	ldi	r19, 0x17	; 23
    6e9e:	30 93 d3 17 	sts	0x17D3, r19	; 0x8017d3 <p.3675+0x1>
    6ea2:	20 93 d2 17 	sts	0x17D2, r18	; 0x8017d2 <p.3675>
    6ea6:	b9 01       	movw	r22, r18
    6ea8:	e3 df       	rcall	.-58     	; 0x6e70 <gmtime_r>
    6eaa:	8c eb       	ldi	r24, 0xBC	; 188
    6eac:	97 e1       	ldi	r25, 0x17	; 23
    6eae:	08 95       	ret

00006eb0 <gettimezone>:
    6eb0:	e6 e6       	ldi	r30, 0x66	; 102
    6eb2:	fa e1       	ldi	r31, 0x1A	; 26
    6eb4:	20 81       	ld	r18, Z
    6eb6:	31 81       	ldd	r19, Z+1	; 0x01
    6eb8:	dc 01       	movw	r26, r24
    6eba:	2d 93       	st	X+, r18
    6ebc:	3c 93       	st	X, r19
    6ebe:	22 81       	ldd	r18, Z+2	; 0x02
    6ec0:	33 81       	ldd	r19, Z+3	; 0x03
    6ec2:	fc 01       	movw	r30, r24
    6ec4:	33 83       	std	Z+3, r19	; 0x03
    6ec6:	22 83       	std	Z+2, r18	; 0x02
    6ec8:	80 e0       	ldi	r24, 0x00	; 0
    6eca:	90 e0       	ldi	r25, 0x00	; 0
    6ecc:	08 95       	ret

00006ece <settimezone>:
    6ece:	cf 93       	push	r28
    6ed0:	df 93       	push	r29
    6ed2:	ec 01       	movw	r28, r24
    6ed4:	28 81       	ld	r18, Y
    6ed6:	39 81       	ldd	r19, Y+1	; 0x01
    6ed8:	e6 e6       	ldi	r30, 0x66	; 102
    6eda:	fa e1       	ldi	r31, 0x1A	; 26
    6edc:	31 83       	std	Z+1, r19	; 0x01
    6ede:	20 83       	st	Z, r18
    6ee0:	8a 81       	ldd	r24, Y+2	; 0x02
    6ee2:	9b 81       	ldd	r25, Y+3	; 0x03
    6ee4:	93 83       	std	Z+3, r25	; 0x03
    6ee6:	82 83       	std	Z+2, r24	; 0x02
    6ee8:	80 e0       	ldi	r24, 0x00	; 0
    6eea:	90 e0       	ldi	r25, 0x00	; 0
    6eec:	df 91       	pop	r29
    6eee:	cf 91       	pop	r28
    6ef0:	08 95       	ret

00006ef2 <gettimeofday>:
    6ef2:	a8 e0       	ldi	r26, 0x08	; 8
    6ef4:	b0 e0       	ldi	r27, 0x00	; 0
    6ef6:	ef e7       	ldi	r30, 0x7F	; 127
    6ef8:	f7 e3       	ldi	r31, 0x37	; 55
    6efa:	0c 94 72 e6 	jmp	0x1cce4	; 0x1cce4 <__prologue_saves__+0x18>
    6efe:	8c 01       	movw	r16, r24
    6f00:	7b 01       	movw	r14, r22
    6f02:	be 01       	movw	r22, r28
    6f04:	6f 5f       	subi	r22, 0xFF	; 255
    6f06:	7f 4f       	sbci	r23, 0xFF	; 255
    6f08:	80 e0       	ldi	r24, 0x00	; 0
    6f0a:	90 e0       	ldi	r25, 0x00	; 0
    6f0c:	dc db       	rcall	.-2120   	; 0x66c6 <clock_gettime>
    6f0e:	89 81       	ldd	r24, Y+1	; 0x01
    6f10:	9a 81       	ldd	r25, Y+2	; 0x02
    6f12:	ab 81       	ldd	r26, Y+3	; 0x03
    6f14:	bc 81       	ldd	r27, Y+4	; 0x04
    6f16:	f8 01       	movw	r30, r16
    6f18:	80 83       	st	Z, r24
    6f1a:	91 83       	std	Z+1, r25	; 0x01
    6f1c:	a2 83       	std	Z+2, r26	; 0x02
    6f1e:	b3 83       	std	Z+3, r27	; 0x03
    6f20:	6d 81       	ldd	r22, Y+5	; 0x05
    6f22:	7e 81       	ldd	r23, Y+6	; 0x06
    6f24:	8f 81       	ldd	r24, Y+7	; 0x07
    6f26:	98 85       	ldd	r25, Y+8	; 0x08
    6f28:	28 ee       	ldi	r18, 0xE8	; 232
    6f2a:	33 e0       	ldi	r19, 0x03	; 3
    6f2c:	40 e0       	ldi	r20, 0x00	; 0
    6f2e:	50 e0       	ldi	r21, 0x00	; 0
    6f30:	0e 94 1b e6 	call	0x1cc36	; 0x1cc36 <__divmodsi4>
    6f34:	f8 01       	movw	r30, r16
    6f36:	24 83       	std	Z+4, r18	; 0x04
    6f38:	35 83       	std	Z+5, r19	; 0x05
    6f3a:	46 83       	std	Z+6, r20	; 0x06
    6f3c:	57 83       	std	Z+7, r21	; 0x07
    6f3e:	c7 01       	movw	r24, r14
    6f40:	b7 df       	rcall	.-146    	; 0x6eb0 <gettimezone>
    6f42:	80 e0       	ldi	r24, 0x00	; 0
    6f44:	90 e0       	ldi	r25, 0x00	; 0
    6f46:	28 96       	adiw	r28, 0x08	; 8
    6f48:	e6 e0       	ldi	r30, 0x06	; 6
    6f4a:	0c 94 8e e6 	jmp	0x1cd1c	; 0x1cd1c <__epilogue_restores__+0x18>

00006f4e <time>:
    6f4e:	cf 93       	push	r28
    6f50:	df 93       	push	r29
    6f52:	ec 01       	movw	r28, r24
    6f54:	6e e9       	ldi	r22, 0x9E	; 158
    6f56:	77 e1       	ldi	r23, 0x17	; 23
    6f58:	80 e0       	ldi	r24, 0x00	; 0
    6f5a:	90 e0       	ldi	r25, 0x00	; 0
    6f5c:	b4 db       	rcall	.-2200   	; 0x66c6 <clock_gettime>
    6f5e:	20 97       	sbiw	r28, 0x00	; 0
    6f60:	61 f0       	breq	.+24     	; 0x6f7a <time+0x2c>
    6f62:	80 91 9e 17 	lds	r24, 0x179E	; 0x80179e <ts.3753>
    6f66:	90 91 9f 17 	lds	r25, 0x179F	; 0x80179f <ts.3753+0x1>
    6f6a:	a0 91 a0 17 	lds	r26, 0x17A0	; 0x8017a0 <ts.3753+0x2>
    6f6e:	b0 91 a1 17 	lds	r27, 0x17A1	; 0x8017a1 <ts.3753+0x3>
    6f72:	88 83       	st	Y, r24
    6f74:	99 83       	std	Y+1, r25	; 0x01
    6f76:	aa 83       	std	Y+2, r26	; 0x02
    6f78:	bb 83       	std	Y+3, r27	; 0x03
    6f7a:	60 91 9e 17 	lds	r22, 0x179E	; 0x80179e <ts.3753>
    6f7e:	70 91 9f 17 	lds	r23, 0x179F	; 0x80179f <ts.3753+0x1>
    6f82:	80 91 a0 17 	lds	r24, 0x17A0	; 0x8017a0 <ts.3753+0x2>
    6f86:	90 91 a1 17 	lds	r25, 0x17A1	; 0x8017a1 <ts.3753+0x3>
    6f8a:	df 91       	pop	r29
    6f8c:	cf 91       	pop	r28
    6f8e:	08 95       	ret

00006f90 <is_dst>:
    6f90:	cf 92       	push	r12
    6f92:	df 92       	push	r13
    6f94:	ef 92       	push	r14
    6f96:	ff 92       	push	r15
    6f98:	6b 01       	movw	r12, r22
    6f9a:	7c 01       	movw	r14, r24
    6f9c:	05 d4       	rcall	.+2058   	; 0x77a8 <set_dst>
    6f9e:	80 91 6a 1a 	lds	r24, 0x1A6A	; 0x801a6a <dst>
    6fa2:	90 91 6b 1a 	lds	r25, 0x1A6B	; 0x801a6b <dst+0x1>
    6fa6:	a0 91 6c 1a 	lds	r26, 0x1A6C	; 0x801a6c <dst+0x2>
    6faa:	b0 91 6d 1a 	lds	r27, 0x1A6D	; 0x801a6d <dst+0x3>
    6fae:	c8 16       	cp	r12, r24
    6fb0:	d9 06       	cpc	r13, r25
    6fb2:	ea 06       	cpc	r14, r26
    6fb4:	fb 06       	cpc	r15, r27
    6fb6:	88 f0       	brcs	.+34     	; 0x6fda <is_dst+0x4a>
    6fb8:	81 e0       	ldi	r24, 0x01	; 1
    6fba:	90 e0       	ldi	r25, 0x00	; 0
    6fbc:	40 91 6e 1a 	lds	r20, 0x1A6E	; 0x801a6e <dst+0x4>
    6fc0:	50 91 6f 1a 	lds	r21, 0x1A6F	; 0x801a6f <dst+0x5>
    6fc4:	60 91 70 1a 	lds	r22, 0x1A70	; 0x801a70 <dst+0x6>
    6fc8:	70 91 71 1a 	lds	r23, 0x1A71	; 0x801a71 <dst+0x7>
    6fcc:	4c 15       	cp	r20, r12
    6fce:	5d 05       	cpc	r21, r13
    6fd0:	6e 05       	cpc	r22, r14
    6fd2:	7f 05       	cpc	r23, r15
    6fd4:	20 f4       	brcc	.+8      	; 0x6fde <is_dst+0x4e>
    6fd6:	80 e0       	ldi	r24, 0x00	; 0
    6fd8:	02 c0       	rjmp	.+4      	; 0x6fde <is_dst+0x4e>
    6fda:	80 e0       	ldi	r24, 0x00	; 0
    6fdc:	90 e0       	ldi	r25, 0x00	; 0
    6fde:	ff 90       	pop	r15
    6fe0:	ef 90       	pop	r14
    6fe2:	df 90       	pop	r13
    6fe4:	cf 90       	pop	r12
    6fe6:	08 95       	ret

00006fe8 <localtime_r>:
    6fe8:	4f 92       	push	r4
    6fea:	5f 92       	push	r5
    6fec:	6f 92       	push	r6
    6fee:	7f 92       	push	r7
    6ff0:	af 92       	push	r10
    6ff2:	bf 92       	push	r11
    6ff4:	cf 92       	push	r12
    6ff6:	df 92       	push	r13
    6ff8:	ef 92       	push	r14
    6ffa:	ff 92       	push	r15
    6ffc:	0f 93       	push	r16
    6ffe:	1f 93       	push	r17
    7000:	cf 93       	push	r28
    7002:	df 93       	push	r29
    7004:	00 d0       	rcall	.+0      	; 0x7006 <localtime_r+0x1e>
    7006:	00 d0       	rcall	.+0      	; 0x7008 <localtime_r+0x20>
    7008:	cd b7       	in	r28, 0x3d	; 61
    700a:	de b7       	in	r29, 0x3e	; 62
    700c:	5b 01       	movw	r10, r22
    700e:	fc 01       	movw	r30, r24
    7010:	40 80       	ld	r4, Z
    7012:	51 80       	ldd	r5, Z+1	; 0x01
    7014:	62 80       	ldd	r6, Z+2	; 0x02
    7016:	73 80       	ldd	r7, Z+3	; 0x03
    7018:	ce 01       	movw	r24, r28
    701a:	01 96       	adiw	r24, 0x01	; 1
    701c:	49 df       	rcall	.-366    	; 0x6eb0 <gettimezone>
    701e:	a9 81       	ldd	r26, Y+1	; 0x01
    7020:	ba 81       	ldd	r27, Y+2	; 0x02
    7022:	2c e3       	ldi	r18, 0x3C	; 60
    7024:	30 e0       	ldi	r19, 0x00	; 0
    7026:	0e 94 40 e6 	call	0x1cc80	; 0x1cc80 <__usmulhisi3>
    702a:	6b 01       	movw	r12, r22
    702c:	7c 01       	movw	r14, r24
    702e:	c3 01       	movw	r24, r6
    7030:	b2 01       	movw	r22, r4
    7032:	6c 19       	sub	r22, r12
    7034:	7d 09       	sbc	r23, r13
    7036:	8e 09       	sbc	r24, r14
    7038:	9f 09       	sbc	r25, r15
    703a:	aa df       	rcall	.-172    	; 0x6f90 <is_dst>
    703c:	89 2b       	or	r24, r25
    703e:	31 f0       	breq	.+12     	; 0x704c <localtime_r+0x64>
    7040:	f0 e1       	ldi	r31, 0x10	; 16
    7042:	cf 1a       	sub	r12, r31
    7044:	fe e0       	ldi	r31, 0x0E	; 14
    7046:	df 0a       	sbc	r13, r31
    7048:	e1 08       	sbc	r14, r1
    704a:	f1 08       	sbc	r15, r1
    704c:	85 01       	movw	r16, r10
    704e:	a7 01       	movw	r20, r14
    7050:	96 01       	movw	r18, r12
    7052:	c3 01       	movw	r24, r6
    7054:	b2 01       	movw	r22, r4
    7056:	2e de       	rcall	.-932    	; 0x6cb4 <time_to_tm>
    7058:	c5 01       	movw	r24, r10
    705a:	0f 90       	pop	r0
    705c:	0f 90       	pop	r0
    705e:	0f 90       	pop	r0
    7060:	0f 90       	pop	r0
    7062:	df 91       	pop	r29
    7064:	cf 91       	pop	r28
    7066:	1f 91       	pop	r17
    7068:	0f 91       	pop	r16
    706a:	ff 90       	pop	r15
    706c:	ef 90       	pop	r14
    706e:	df 90       	pop	r13
    7070:	cf 90       	pop	r12
    7072:	bf 90       	pop	r11
    7074:	af 90       	pop	r10
    7076:	7f 90       	pop	r7
    7078:	6f 90       	pop	r6
    707a:	5f 90       	pop	r5
    707c:	4f 90       	pop	r4
    707e:	08 95       	ret

00007080 <localtime>:
    7080:	66 ea       	ldi	r22, 0xA6	; 166
    7082:	77 e1       	ldi	r23, 0x17	; 23
    7084:	b1 cf       	rjmp	.-158    	; 0x6fe8 <localtime_r>
    7086:	08 95       	ret

00007088 <normalize>:
    7088:	aa e0       	ldi	r26, 0x0A	; 10
    708a:	b0 e0       	ldi	r27, 0x00	; 0
    708c:	ea e4       	ldi	r30, 0x4A	; 74
    708e:	f8 e3       	ldi	r31, 0x38	; 56
    7090:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
    7094:	7c 01       	movw	r14, r24
    7096:	7a 87       	std	Y+10, r23	; 0x0a
    7098:	69 87       	std	Y+9, r22	; 0x09
    709a:	f7 01       	movw	r30, r14
    709c:	80 81       	ld	r24, Z
    709e:	91 81       	ldd	r25, Z+1	; 0x01
    70a0:	8c 33       	cpi	r24, 0x3C	; 60
    70a2:	91 05       	cpc	r25, r1
    70a4:	5c f0       	brlt	.+22     	; 0x70bc <normalize+0x34>
    70a6:	f7 01       	movw	r30, r14
    70a8:	22 81       	ldd	r18, Z+2	; 0x02
    70aa:	33 81       	ldd	r19, Z+3	; 0x03
    70ac:	2f 5f       	subi	r18, 0xFF	; 255
    70ae:	3f 4f       	sbci	r19, 0xFF	; 255
    70b0:	33 83       	std	Z+3, r19	; 0x03
    70b2:	22 83       	std	Z+2, r18	; 0x02
    70b4:	cc 97       	sbiw	r24, 0x3c	; 60
    70b6:	91 83       	std	Z+1, r25	; 0x01
    70b8:	80 83       	st	Z, r24
    70ba:	ef cf       	rjmp	.-34     	; 0x709a <normalize+0x12>
    70bc:	f7 01       	movw	r30, r14
    70be:	01 90       	ld	r0, Z+
    70c0:	f0 81       	ld	r31, Z
    70c2:	e0 2d       	mov	r30, r0
    70c4:	fe 83       	std	Y+6, r31	; 0x06
    70c6:	ed 83       	std	Y+5, r30	; 0x05
    70c8:	f7 ff       	sbrs	r31, 7
    70ca:	0d c0       	rjmp	.+26     	; 0x70e6 <normalize+0x5e>
    70cc:	f7 01       	movw	r30, r14
    70ce:	82 81       	ldd	r24, Z+2	; 0x02
    70d0:	93 81       	ldd	r25, Z+3	; 0x03
    70d2:	01 97       	sbiw	r24, 0x01	; 1
    70d4:	93 83       	std	Z+3, r25	; 0x03
    70d6:	82 83       	std	Z+2, r24	; 0x02
    70d8:	6d 81       	ldd	r22, Y+5	; 0x05
    70da:	7e 81       	ldd	r23, Y+6	; 0x06
    70dc:	64 5c       	subi	r22, 0xC4	; 196
    70de:	7f 4f       	sbci	r23, 0xFF	; 255
    70e0:	71 83       	std	Z+1, r23	; 0x01
    70e2:	60 83       	st	Z, r22
    70e4:	eb cf       	rjmp	.-42     	; 0x70bc <normalize+0x34>
    70e6:	f7 01       	movw	r30, r14
    70e8:	82 81       	ldd	r24, Z+2	; 0x02
    70ea:	93 81       	ldd	r25, Z+3	; 0x03
    70ec:	8c 33       	cpi	r24, 0x3C	; 60
    70ee:	91 05       	cpc	r25, r1
    70f0:	5c f0       	brlt	.+22     	; 0x7108 <normalize+0x80>
    70f2:	f7 01       	movw	r30, r14
    70f4:	24 81       	ldd	r18, Z+4	; 0x04
    70f6:	35 81       	ldd	r19, Z+5	; 0x05
    70f8:	2f 5f       	subi	r18, 0xFF	; 255
    70fa:	3f 4f       	sbci	r19, 0xFF	; 255
    70fc:	35 83       	std	Z+5, r19	; 0x05
    70fe:	24 83       	std	Z+4, r18	; 0x04
    7100:	cc 97       	sbiw	r24, 0x3c	; 60
    7102:	93 83       	std	Z+3, r25	; 0x03
    7104:	82 83       	std	Z+2, r24	; 0x02
    7106:	ef cf       	rjmp	.-34     	; 0x70e6 <normalize+0x5e>
    7108:	f7 01       	movw	r30, r14
    710a:	22 80       	ldd	r2, Z+2	; 0x02
    710c:	33 80       	ldd	r3, Z+3	; 0x03
    710e:	37 fe       	sbrs	r3, 7
    7110:	0d c0       	rjmp	.+26     	; 0x712c <normalize+0xa4>
    7112:	f7 01       	movw	r30, r14
    7114:	84 81       	ldd	r24, Z+4	; 0x04
    7116:	95 81       	ldd	r25, Z+5	; 0x05
    7118:	01 97       	sbiw	r24, 0x01	; 1
    711a:	95 83       	std	Z+5, r25	; 0x05
    711c:	84 83       	std	Z+4, r24	; 0x04
    711e:	fc e3       	ldi	r31, 0x3C	; 60
    7120:	2f 0e       	add	r2, r31
    7122:	31 1c       	adc	r3, r1
    7124:	f7 01       	movw	r30, r14
    7126:	33 82       	std	Z+3, r3	; 0x03
    7128:	22 82       	std	Z+2, r2	; 0x02
    712a:	ee cf       	rjmp	.-36     	; 0x7108 <normalize+0x80>
    712c:	f7 01       	movw	r30, r14
    712e:	84 81       	ldd	r24, Z+4	; 0x04
    7130:	95 81       	ldd	r25, Z+5	; 0x05
    7132:	88 31       	cpi	r24, 0x18	; 24
    7134:	91 05       	cpc	r25, r1
    7136:	5c f0       	brlt	.+22     	; 0x714e <normalize+0xc6>
    7138:	f7 01       	movw	r30, r14
    713a:	26 81       	ldd	r18, Z+6	; 0x06
    713c:	37 81       	ldd	r19, Z+7	; 0x07
    713e:	2f 5f       	subi	r18, 0xFF	; 255
    7140:	3f 4f       	sbci	r19, 0xFF	; 255
    7142:	37 83       	std	Z+7, r19	; 0x07
    7144:	26 83       	std	Z+6, r18	; 0x06
    7146:	48 97       	sbiw	r24, 0x18	; 24
    7148:	95 83       	std	Z+5, r25	; 0x05
    714a:	84 83       	std	Z+4, r24	; 0x04
    714c:	ef cf       	rjmp	.-34     	; 0x712c <normalize+0xa4>
    714e:	f7 01       	movw	r30, r14
    7150:	04 81       	ldd	r16, Z+4	; 0x04
    7152:	15 81       	ldd	r17, Z+5	; 0x05
    7154:	17 ff       	sbrs	r17, 7
    7156:	0b c0       	rjmp	.+22     	; 0x716e <normalize+0xe6>
    7158:	f7 01       	movw	r30, r14
    715a:	86 81       	ldd	r24, Z+6	; 0x06
    715c:	97 81       	ldd	r25, Z+7	; 0x07
    715e:	01 97       	sbiw	r24, 0x01	; 1
    7160:	97 83       	std	Z+7, r25	; 0x07
    7162:	86 83       	std	Z+6, r24	; 0x06
    7164:	08 5e       	subi	r16, 0xE8	; 232
    7166:	1f 4f       	sbci	r17, 0xFF	; 255
    7168:	15 83       	std	Z+5, r17	; 0x05
    716a:	04 83       	std	Z+4, r16	; 0x04
    716c:	f0 cf       	rjmp	.-32     	; 0x714e <normalize+0xc6>
    716e:	f7 01       	movw	r30, r14
    7170:	80 85       	ldd	r24, Z+8	; 0x08
    7172:	91 85       	ldd	r25, Z+9	; 0x09
    7174:	8c 30       	cpi	r24, 0x0C	; 12
    7176:	91 05       	cpc	r25, r1
    7178:	5c f0       	brlt	.+22     	; 0x7190 <normalize+0x108>
    717a:	f7 01       	movw	r30, r14
    717c:	22 85       	ldd	r18, Z+10	; 0x0a
    717e:	33 85       	ldd	r19, Z+11	; 0x0b
    7180:	2f 5f       	subi	r18, 0xFF	; 255
    7182:	3f 4f       	sbci	r19, 0xFF	; 255
    7184:	33 87       	std	Z+11, r19	; 0x0b
    7186:	22 87       	std	Z+10, r18	; 0x0a
    7188:	0c 97       	sbiw	r24, 0x0c	; 12
    718a:	91 87       	std	Z+9, r25	; 0x09
    718c:	80 87       	std	Z+8, r24	; 0x08
    718e:	ef cf       	rjmp	.-34     	; 0x716e <normalize+0xe6>
    7190:	f7 01       	movw	r30, r14
    7192:	80 85       	ldd	r24, Z+8	; 0x08
    7194:	91 85       	ldd	r25, Z+9	; 0x09
    7196:	97 ff       	sbrs	r25, 7
    7198:	2d c0       	rjmp	.+90     	; 0x71f4 <normalize+0x16c>
    719a:	f7 01       	movw	r30, r14
    719c:	22 85       	ldd	r18, Z+10	; 0x0a
    719e:	33 85       	ldd	r19, Z+11	; 0x0b
    71a0:	21 50       	subi	r18, 0x01	; 1
    71a2:	31 09       	sbc	r19, r1
    71a4:	33 87       	std	Z+11, r19	; 0x0b
    71a6:	22 87       	std	Z+10, r18	; 0x0a
    71a8:	0c 96       	adiw	r24, 0x0c	; 12
    71aa:	91 87       	std	Z+9, r25	; 0x09
    71ac:	80 87       	std	Z+8, r24	; 0x08
    71ae:	f0 cf       	rjmp	.-32     	; 0x7190 <normalize+0x108>
    71b0:	f7 01       	movw	r30, r14
    71b2:	c6 80       	ldd	r12, Z+6	; 0x06
    71b4:	d7 80       	ldd	r13, Z+7	; 0x07
    71b6:	a0 84       	ldd	r10, Z+8	; 0x08
    71b8:	b1 84       	ldd	r11, Z+9	; 0x09
    71ba:	b4 01       	movw	r22, r8
    71bc:	c5 01       	movw	r24, r10
    71be:	59 dd       	rcall	.-1358   	; 0x6c72 <Days_Per_Month>
    71c0:	8c 15       	cp	r24, r12
    71c2:	9d 05       	cpc	r25, r13
    71c4:	84 f5       	brge	.+96     	; 0x7226 <normalize+0x19e>
    71c6:	c8 1a       	sub	r12, r24
    71c8:	d9 0a       	sbc	r13, r25
    71ca:	f7 01       	movw	r30, r14
    71cc:	d7 82       	std	Z+7, r13	; 0x07
    71ce:	c6 82       	std	Z+6, r12	; 0x06
    71d0:	c5 01       	movw	r24, r10
    71d2:	01 96       	adiw	r24, 0x01	; 1
    71d4:	91 87       	std	Z+9, r25	; 0x09
    71d6:	80 87       	std	Z+8, r24	; 0x08
    71d8:	0c 97       	sbiw	r24, 0x0c	; 12
    71da:	54 f3       	brlt	.-44     	; 0x71b0 <normalize+0x128>
    71dc:	fb e0       	ldi	r31, 0x0B	; 11
    71de:	af 1a       	sub	r10, r31
    71e0:	b1 08       	sbc	r11, r1
    71e2:	f7 01       	movw	r30, r14
    71e4:	b1 86       	std	Z+9, r11	; 0x09
    71e6:	a0 86       	std	Z+8, r10	; 0x08
    71e8:	ff ef       	ldi	r31, 0xFF	; 255
    71ea:	8f 1a       	sub	r8, r31
    71ec:	9f 0a       	sbc	r9, r31
    71ee:	f7 01       	movw	r30, r14
    71f0:	93 86       	std	Z+11, r9	; 0x0b
    71f2:	82 86       	std	Z+10, r8	; 0x0a
    71f4:	f7 01       	movw	r30, r14
    71f6:	82 84       	ldd	r8, Z+10	; 0x0a
    71f8:	93 84       	ldd	r9, Z+11	; 0x0b
    71fa:	da cf       	rjmp	.-76     	; 0x71b0 <normalize+0x128>
    71fc:	f7 01       	movw	r30, r14
    71fe:	80 85       	ldd	r24, Z+8	; 0x08
    7200:	91 85       	ldd	r25, Z+9	; 0x09
    7202:	9c 01       	movw	r18, r24
    7204:	21 50       	subi	r18, 0x01	; 1
    7206:	31 09       	sbc	r19, r1
    7208:	37 fd       	sbrc	r19, 7
    720a:	16 c0       	rjmp	.+44     	; 0x7238 <normalize+0x1b0>
    720c:	31 87       	std	Z+9, r19	; 0x09
    720e:	20 87       	std	Z+8, r18	; 0x08
    7210:	f7 01       	movw	r30, r14
    7212:	62 85       	ldd	r22, Z+10	; 0x0a
    7214:	73 85       	ldd	r23, Z+11	; 0x0b
    7216:	80 85       	ldd	r24, Z+8	; 0x08
    7218:	91 85       	ldd	r25, Z+9	; 0x09
    721a:	2b dd       	rcall	.-1450   	; 0x6c72 <Days_Per_Month>
    721c:	88 0d       	add	r24, r8
    721e:	99 1d       	adc	r25, r9
    7220:	f7 01       	movw	r30, r14
    7222:	97 83       	std	Z+7, r25	; 0x07
    7224:	86 83       	std	Z+6, r24	; 0x06
    7226:	f7 01       	movw	r30, r14
    7228:	86 80       	ldd	r8, Z+6	; 0x06
    722a:	97 80       	ldd	r9, Z+7	; 0x07
    722c:	a2 84       	ldd	r10, Z+10	; 0x0a
    722e:	b3 84       	ldd	r11, Z+11	; 0x0b
    7230:	18 14       	cp	r1, r8
    7232:	19 04       	cpc	r1, r9
    7234:	1c f7       	brge	.-58     	; 0x71fc <normalize+0x174>
    7236:	0b c0       	rjmp	.+22     	; 0x724e <normalize+0x1c6>
    7238:	0b 96       	adiw	r24, 0x0b	; 11
    723a:	f7 01       	movw	r30, r14
    723c:	91 87       	std	Z+9, r25	; 0x09
    723e:	80 87       	std	Z+8, r24	; 0x08
    7240:	f1 e0       	ldi	r31, 0x01	; 1
    7242:	af 1a       	sub	r10, r31
    7244:	b1 08       	sbc	r11, r1
    7246:	f7 01       	movw	r30, r14
    7248:	b3 86       	std	Z+11, r11	; 0x0b
    724a:	a2 86       	std	Z+10, r10	; 0x0a
    724c:	e1 cf       	rjmp	.-62     	; 0x7210 <normalize+0x188>
    724e:	a5 01       	movw	r20, r10
    7250:	44 59       	subi	r20, 0x94	; 148
    7252:	58 4f       	sbci	r21, 0xF8	; 248
    7254:	58 87       	std	Y+8, r21	; 0x08
    7256:	4f 83       	std	Y+7, r20	; 0x07
    7258:	35 01       	movw	r6, r10
    725a:	56 e4       	ldi	r21, 0x46	; 70
    725c:	65 1a       	sub	r6, r21
    725e:	71 08       	sbc	r7, r1
    7260:	89 e8       	ldi	r24, 0x89	; 137
    7262:	68 16       	cp	r6, r24
    7264:	71 04       	cpc	r7, r1
    7266:	08 f0       	brcs	.+2      	; 0x726a <normalize+0x1e2>
    7268:	9b c0       	rjmp	.+310    	; 0x73a0 <normalize+0x318>
    726a:	c0 84       	ldd	r12, Z+8	; 0x08
    726c:	d1 84       	ldd	r13, Z+9	; 0x09
    726e:	9c e0       	ldi	r25, 0x0C	; 12
    7270:	c9 16       	cp	r12, r25
    7272:	d1 04       	cpc	r13, r1
    7274:	08 f0       	brcs	.+2      	; 0x7278 <normalize+0x1f0>
    7276:	94 c0       	rjmp	.+296    	; 0x73a0 <normalize+0x318>
    7278:	24 01       	movw	r4, r8
    727a:	e1 e0       	ldi	r30, 0x01	; 1
    727c:	4e 1a       	sub	r4, r30
    727e:	51 08       	sbc	r5, r1
    7280:	6f 81       	ldd	r22, Y+7	; 0x07
    7282:	78 85       	ldd	r23, Y+8	; 0x08
    7284:	c6 01       	movw	r24, r12
    7286:	f5 dc       	rcall	.-1558   	; 0x6c72 <Days_Per_Month>
    7288:	48 16       	cp	r4, r24
    728a:	59 06       	cpc	r5, r25
    728c:	0c f0       	brlt	.+2      	; 0x7290 <normalize+0x208>
    728e:	88 c0       	rjmp	.+272    	; 0x73a0 <normalize+0x318>
    7290:	08 31       	cpi	r16, 0x18	; 24
    7292:	11 05       	cpc	r17, r1
    7294:	0c f0       	brlt	.+2      	; 0x7298 <normalize+0x210>
    7296:	84 c0       	rjmp	.+264    	; 0x73a0 <normalize+0x318>
    7298:	fc e3       	ldi	r31, 0x3C	; 60
    729a:	2f 16       	cp	r2, r31
    729c:	31 04       	cpc	r3, r1
    729e:	0c f0       	brlt	.+2      	; 0x72a2 <normalize+0x21a>
    72a0:	7f c0       	rjmp	.+254    	; 0x73a0 <normalize+0x318>
    72a2:	4d 81       	ldd	r20, Y+5	; 0x05
    72a4:	5e 81       	ldd	r21, Y+6	; 0x06
    72a6:	4c 33       	cpi	r20, 0x3C	; 60
    72a8:	51 05       	cpc	r21, r1
    72aa:	0c f0       	brlt	.+2      	; 0x72ae <normalize+0x226>
    72ac:	79 c0       	rjmp	.+242    	; 0x73a0 <normalize+0x318>
    72ae:	2d e6       	ldi	r18, 0x6D	; 109
    72b0:	31 e0       	ldi	r19, 0x01	; 1
    72b2:	d3 01       	movw	r26, r6
    72b4:	0e 94 40 e6 	call	0x1cc80	; 0x1cc80 <__usmulhisi3>
    72b8:	f6 01       	movw	r30, r12
    72ba:	ee 0f       	add	r30, r30
    72bc:	ff 1f       	adc	r31, r31
    72be:	e0 56       	subi	r30, 0x60	; 96
    72c0:	fc 4f       	sbci	r31, 0xFC	; 252
    72c2:	20 81       	ld	r18, Z
    72c4:	31 81       	ldd	r19, Z+1	; 0x01
    72c6:	dc 01       	movw	r26, r24
    72c8:	cb 01       	movw	r24, r22
    72ca:	82 0f       	add	r24, r18
    72cc:	93 1f       	adc	r25, r19
    72ce:	a1 1d       	adc	r26, r1
    72d0:	b1 1d       	adc	r27, r1
    72d2:	05 2c       	mov	r0, r5
    72d4:	00 0c       	add	r0, r0
    72d6:	66 08       	sbc	r6, r6
    72d8:	77 08       	sbc	r7, r7
    72da:	48 0e       	add	r4, r24
    72dc:	59 1e       	adc	r5, r25
    72de:	6a 1e       	adc	r6, r26
    72e0:	7b 1e       	adc	r7, r27
    72e2:	1a 14       	cp	r1, r10
    72e4:	1b 04       	cpc	r1, r11
    72e6:	1c f4       	brge	.+6      	; 0x72ee <normalize+0x266>
    72e8:	51 e0       	ldi	r21, 0x01	; 1
    72ea:	a5 1a       	sub	r10, r21
    72ec:	b1 08       	sbc	r11, r1
    72ee:	45 01       	movw	r8, r10
    72f0:	95 94       	asr	r9
    72f2:	87 94       	ror	r8
    72f4:	95 94       	asr	r9
    72f6:	87 94       	ror	r8
    72f8:	88 ec       	ldi	r24, 0xC8	; 200
    72fa:	a8 16       	cp	r10, r24
    72fc:	b1 04       	cpc	r11, r1
    72fe:	1c f0       	brlt	.+6      	; 0x7306 <normalize+0x27e>
    7300:	91 e0       	ldi	r25, 0x01	; 1
    7302:	89 1a       	sub	r8, r25
    7304:	91 08       	sbc	r9, r1
    7306:	09 2c       	mov	r0, r9
    7308:	00 0c       	add	r0, r0
    730a:	aa 08       	sbc	r10, r10
    730c:	bb 08       	sbc	r11, r11
    730e:	84 0c       	add	r8, r4
    7310:	95 1c       	adc	r9, r5
    7312:	a6 1c       	adc	r10, r6
    7314:	b7 1c       	adc	r11, r7
    7316:	24 01       	movw	r4, r8
    7318:	35 01       	movw	r6, r10
    731a:	e1 e1       	ldi	r30, 0x11	; 17
    731c:	4e 1a       	sub	r4, r30
    731e:	51 08       	sbc	r5, r1
    7320:	61 08       	sbc	r6, r1
    7322:	71 08       	sbc	r7, r1
    7324:	f2 e0       	ldi	r31, 0x02	; 2
    7326:	cf 16       	cp	r12, r31
    7328:	d1 04       	cpc	r13, r1
    732a:	64 f0       	brlt	.+24     	; 0x7344 <normalize+0x2bc>
    732c:	8f 81       	ldd	r24, Y+7	; 0x07
    732e:	98 85       	ldd	r25, Y+8	; 0x08
    7330:	7b dc       	rcall	.-1802   	; 0x6c28 <IS_Leap>
    7332:	89 2b       	or	r24, r25
    7334:	39 f0       	breq	.+14     	; 0x7344 <normalize+0x2bc>
    7336:	24 01       	movw	r4, r8
    7338:	35 01       	movw	r6, r10
    733a:	40 e1       	ldi	r20, 0x10	; 16
    733c:	44 1a       	sub	r4, r20
    733e:	51 08       	sbc	r5, r1
    7340:	61 08       	sbc	r6, r1
    7342:	71 08       	sbc	r7, r1
    7344:	a8 e1       	ldi	r26, 0x18	; 24
    7346:	b0 e0       	ldi	r27, 0x00	; 0
    7348:	a3 01       	movw	r20, r6
    734a:	92 01       	movw	r18, r4
    734c:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__muluhisi3>
    7350:	01 2e       	mov	r0, r17
    7352:	00 0c       	add	r0, r0
    7354:	22 0b       	sbc	r18, r18
    7356:	33 0b       	sbc	r19, r19
    7358:	a9 01       	movw	r20, r18
    735a:	98 01       	movw	r18, r16
    735c:	26 0f       	add	r18, r22
    735e:	37 1f       	adc	r19, r23
    7360:	48 1f       	adc	r20, r24
    7362:	59 1f       	adc	r21, r25
    7364:	ac e3       	ldi	r26, 0x3C	; 60
    7366:	b0 e0       	ldi	r27, 0x00	; 0
    7368:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__muluhisi3>
    736c:	81 01       	movw	r16, r2
    736e:	03 2c       	mov	r0, r3
    7370:	00 0c       	add	r0, r0
    7372:	22 0b       	sbc	r18, r18
    7374:	33 0b       	sbc	r19, r19
    7376:	a9 01       	movw	r20, r18
    7378:	98 01       	movw	r18, r16
    737a:	26 0f       	add	r18, r22
    737c:	37 1f       	adc	r19, r23
    737e:	48 1f       	adc	r20, r24
    7380:	59 1f       	adc	r21, r25
    7382:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__muluhisi3>
    7386:	ed 81       	ldd	r30, Y+5	; 0x05
    7388:	fe 81       	ldd	r31, Y+6	; 0x06
    738a:	8f 01       	movw	r16, r30
    738c:	ff 0f       	add	r31, r31
    738e:	22 0b       	sbc	r18, r18
    7390:	33 0b       	sbc	r19, r19
    7392:	48 01       	movw	r8, r16
    7394:	59 01       	movw	r10, r18
    7396:	86 0e       	add	r8, r22
    7398:	97 1e       	adc	r9, r23
    739a:	a8 1e       	adc	r10, r24
    739c:	b9 1e       	adc	r11, r25
    739e:	04 c0       	rjmp	.+8      	; 0x73a8 <normalize+0x320>
    73a0:	88 24       	eor	r8, r8
    73a2:	8a 94       	dec	r8
    73a4:	98 2c       	mov	r9, r8
    73a6:	54 01       	movw	r10, r8
    73a8:	49 85       	ldd	r20, Y+9	; 0x09
    73aa:	5a 85       	ldd	r21, Y+10	; 0x0a
    73ac:	45 2b       	or	r20, r21
    73ae:	e9 f0       	breq	.+58     	; 0x73ea <normalize+0x362>
    73b0:	ce 01       	movw	r24, r28
    73b2:	01 96       	adiw	r24, 0x01	; 1
    73b4:	7d dd       	rcall	.-1286   	; 0x6eb0 <gettimezone>
    73b6:	a9 81       	ldd	r26, Y+1	; 0x01
    73b8:	ba 81       	ldd	r27, Y+2	; 0x02
    73ba:	2c e3       	ldi	r18, 0x3C	; 60
    73bc:	30 e0       	ldi	r19, 0x00	; 0
    73be:	0e 94 40 e6 	call	0x1cc80	; 0x1cc80 <__usmulhisi3>
    73c2:	2b 01       	movw	r4, r22
    73c4:	3c 01       	movw	r6, r24
    73c6:	c5 01       	movw	r24, r10
    73c8:	b4 01       	movw	r22, r8
    73ca:	e2 dd       	rcall	.-1084   	; 0x6f90 <is_dst>
    73cc:	89 2b       	or	r24, r25
    73ce:	51 f0       	breq	.+20     	; 0x73e4 <normalize+0x35c>
    73d0:	50 e1       	ldi	r21, 0x10	; 16
    73d2:	45 1a       	sub	r4, r21
    73d4:	5e e0       	ldi	r21, 0x0E	; 14
    73d6:	55 0a       	sbc	r5, r21
    73d8:	61 08       	sbc	r6, r1
    73da:	71 08       	sbc	r7, r1
    73dc:	cc 24       	eor	r12, r12
    73de:	c3 94       	inc	r12
    73e0:	d1 2c       	mov	r13, r1
    73e2:	08 c0       	rjmp	.+16     	; 0x73f4 <normalize+0x36c>
    73e4:	c1 2c       	mov	r12, r1
    73e6:	d1 2c       	mov	r13, r1
    73e8:	05 c0       	rjmp	.+10     	; 0x73f4 <normalize+0x36c>
    73ea:	c1 2c       	mov	r12, r1
    73ec:	d1 2c       	mov	r13, r1
    73ee:	41 2c       	mov	r4, r1
    73f0:	51 2c       	mov	r5, r1
    73f2:	32 01       	movw	r6, r4
    73f4:	87 01       	movw	r16, r14
    73f6:	a3 01       	movw	r20, r6
    73f8:	92 01       	movw	r18, r4
    73fa:	c5 01       	movw	r24, r10
    73fc:	b4 01       	movw	r22, r8
    73fe:	5a dc       	rcall	.-1868   	; 0x6cb4 <time_to_tm>
    7400:	c1 14       	cp	r12, r1
    7402:	d1 04       	cpc	r13, r1
    7404:	29 f0       	breq	.+10     	; 0x7410 <normalize+0x388>
    7406:	21 e0       	ldi	r18, 0x01	; 1
    7408:	30 e0       	ldi	r19, 0x00	; 0
    740a:	f7 01       	movw	r30, r14
    740c:	31 8b       	std	Z+17, r19	; 0x11
    740e:	20 8b       	std	Z+16, r18	; 0x10
    7410:	2a 96       	adiw	r28, 0x0a	; 10
    7412:	e2 e1       	ldi	r30, 0x12	; 18
    7414:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

00007418 <timegm>:
    7418:	60 e0       	ldi	r22, 0x00	; 0
    741a:	70 e0       	ldi	r23, 0x00	; 0
    741c:	35 ce       	rjmp	.-918    	; 0x7088 <normalize>
    741e:	08 95       	ret

00007420 <setdate_r>:
    7420:	cf 92       	push	r12
    7422:	df 92       	push	r13
    7424:	ef 92       	push	r14
    7426:	ff 92       	push	r15
    7428:	cf 93       	push	r28
    742a:	df 93       	push	r29
    742c:	cd b7       	in	r28, 0x3d	; 61
    742e:	de b7       	in	r29, 0x3e	; 62
    7430:	a5 97       	sbiw	r28, 0x25	; 37
    7432:	0f b6       	in	r0, 0x3f	; 63
    7434:	f8 94       	cli
    7436:	de bf       	out	0x3e, r29	; 62
    7438:	0f be       	out	0x3f, r0	; 63
    743a:	cd bf       	out	0x3d, r28	; 61
    743c:	9d a3       	std	Y+37, r25	; 0x25
    743e:	8c a3       	std	Y+36, r24	; 0x24
    7440:	1f 82       	std	Y+7, r1	; 0x07
    7442:	1e 82       	std	Y+6, r1	; 0x06
    7444:	19 86       	std	Y+9, r1	; 0x09
    7446:	18 86       	std	Y+8, r1	; 0x08
    7448:	1b 86       	std	Y+11, r1	; 0x0b
    744a:	1a 86       	std	Y+10, r1	; 0x0a
    744c:	1d 86       	std	Y+13, r1	; 0x0d
    744e:	1c 86       	std	Y+12, r1	; 0x0c
    7450:	1f 86       	std	Y+15, r1	; 0x0f
    7452:	1e 86       	std	Y+14, r1	; 0x0e
    7454:	19 8a       	std	Y+17, r1	; 0x11
    7456:	18 8a       	std	Y+16, r1	; 0x10
    7458:	8c a1       	ldd	r24, Y+36	; 0x24
    745a:	9d a1       	ldd	r25, Y+37	; 0x25
    745c:	fc 01       	movw	r30, r24
    745e:	20 81       	ld	r18, Z
    7460:	20 32       	cpi	r18, 0x20	; 32
    7462:	21 f4       	brne	.+8      	; 0x746c <setdate_r+0x4c>
    7464:	01 96       	adiw	r24, 0x01	; 1
    7466:	9d a3       	std	Y+37, r25	; 0x25
    7468:	8c a3       	std	Y+36, r24	; 0x24
    746a:	f6 cf       	rjmp	.-20     	; 0x7458 <setdate_r+0x38>
    746c:	4a e0       	ldi	r20, 0x0A	; 10
    746e:	50 e0       	ldi	r21, 0x00	; 0
    7470:	be 01       	movw	r22, r28
    7472:	6c 5d       	subi	r22, 0xDC	; 220
    7474:	7f 4f       	sbci	r23, 0xFF	; 255
    7476:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <strtol>
    747a:	79 8b       	std	Y+17, r23	; 0x11
    747c:	68 8b       	std	Y+16, r22	; 0x10
    747e:	8c a1       	ldd	r24, Y+36	; 0x24
    7480:	9d a1       	ldd	r25, Y+37	; 0x25
    7482:	fc 01       	movw	r30, r24
    7484:	20 81       	ld	r18, Z
    7486:	20 32       	cpi	r18, 0x20	; 32
    7488:	21 f4       	brne	.+8      	; 0x7492 <setdate_r+0x72>
    748a:	01 96       	adiw	r24, 0x01	; 1
    748c:	9d a3       	std	Y+37, r25	; 0x25
    748e:	8c a3       	std	Y+36, r24	; 0x24
    7490:	f6 cf       	rjmp	.-20     	; 0x747e <setdate_r+0x5e>
    7492:	4a e0       	ldi	r20, 0x0A	; 10
    7494:	50 e0       	ldi	r21, 0x00	; 0
    7496:	be 01       	movw	r22, r28
    7498:	6c 5d       	subi	r22, 0xDC	; 220
    749a:	7f 4f       	sbci	r23, 0xFF	; 255
    749c:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <strtol>
    74a0:	7f 87       	std	Y+15, r23	; 0x0f
    74a2:	6e 87       	std	Y+14, r22	; 0x0e
    74a4:	8c a1       	ldd	r24, Y+36	; 0x24
    74a6:	9d a1       	ldd	r25, Y+37	; 0x25
    74a8:	fc 01       	movw	r30, r24
    74aa:	20 81       	ld	r18, Z
    74ac:	20 32       	cpi	r18, 0x20	; 32
    74ae:	21 f4       	brne	.+8      	; 0x74b8 <setdate_r+0x98>
    74b0:	01 96       	adiw	r24, 0x01	; 1
    74b2:	9d a3       	std	Y+37, r25	; 0x25
    74b4:	8c a3       	std	Y+36, r24	; 0x24
    74b6:	f6 cf       	rjmp	.-20     	; 0x74a4 <setdate_r+0x84>
    74b8:	4a e0       	ldi	r20, 0x0A	; 10
    74ba:	50 e0       	ldi	r21, 0x00	; 0
    74bc:	be 01       	movw	r22, r28
    74be:	6c 5d       	subi	r22, 0xDC	; 220
    74c0:	7f 4f       	sbci	r23, 0xFF	; 255
    74c2:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <strtol>
    74c6:	7d 87       	std	Y+13, r23	; 0x0d
    74c8:	6c 87       	std	Y+12, r22	; 0x0c
    74ca:	8c a1       	ldd	r24, Y+36	; 0x24
    74cc:	9d a1       	ldd	r25, Y+37	; 0x25
    74ce:	fc 01       	movw	r30, r24
    74d0:	20 81       	ld	r18, Z
    74d2:	20 32       	cpi	r18, 0x20	; 32
    74d4:	21 f4       	brne	.+8      	; 0x74de <setdate_r+0xbe>
    74d6:	01 96       	adiw	r24, 0x01	; 1
    74d8:	9d a3       	std	Y+37, r25	; 0x25
    74da:	8c a3       	std	Y+36, r24	; 0x24
    74dc:	f6 cf       	rjmp	.-20     	; 0x74ca <setdate_r+0xaa>
    74de:	4a e0       	ldi	r20, 0x0A	; 10
    74e0:	50 e0       	ldi	r21, 0x00	; 0
    74e2:	be 01       	movw	r22, r28
    74e4:	6c 5d       	subi	r22, 0xDC	; 220
    74e6:	7f 4f       	sbci	r23, 0xFF	; 255
    74e8:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <strtol>
    74ec:	7b 87       	std	Y+11, r23	; 0x0b
    74ee:	6a 87       	std	Y+10, r22	; 0x0a
    74f0:	ec a1       	ldd	r30, Y+36	; 0x24
    74f2:	fd a1       	ldd	r31, Y+37	; 0x25
    74f4:	80 81       	ld	r24, Z
    74f6:	88 23       	and	r24, r24
    74f8:	39 f0       	breq	.+14     	; 0x7508 <setdate_r+0xe8>
    74fa:	80 32       	cpi	r24, 0x20	; 32
    74fc:	11 f0       	breq	.+4      	; 0x7502 <setdate_r+0xe2>
    74fe:	8a 33       	cpi	r24, 0x3A	; 58
    7500:	19 f4       	brne	.+6      	; 0x7508 <setdate_r+0xe8>
    7502:	31 96       	adiw	r30, 0x01	; 1
    7504:	fd a3       	std	Y+37, r31	; 0x25
    7506:	ec a3       	std	Y+36, r30	; 0x24
    7508:	4a e0       	ldi	r20, 0x0A	; 10
    750a:	50 e0       	ldi	r21, 0x00	; 0
    750c:	be 01       	movw	r22, r28
    750e:	6c 5d       	subi	r22, 0xDC	; 220
    7510:	7f 4f       	sbci	r23, 0xFF	; 255
    7512:	8c a1       	ldd	r24, Y+36	; 0x24
    7514:	9d a1       	ldd	r25, Y+37	; 0x25
    7516:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <strtol>
    751a:	79 87       	std	Y+9, r23	; 0x09
    751c:	68 87       	std	Y+8, r22	; 0x08
    751e:	ec a1       	ldd	r30, Y+36	; 0x24
    7520:	fd a1       	ldd	r31, Y+37	; 0x25
    7522:	80 81       	ld	r24, Z
    7524:	88 23       	and	r24, r24
    7526:	39 f0       	breq	.+14     	; 0x7536 <setdate_r+0x116>
    7528:	80 32       	cpi	r24, 0x20	; 32
    752a:	11 f0       	breq	.+4      	; 0x7530 <setdate_r+0x110>
    752c:	8a 33       	cpi	r24, 0x3A	; 58
    752e:	19 f4       	brne	.+6      	; 0x7536 <setdate_r+0x116>
    7530:	31 96       	adiw	r30, 0x01	; 1
    7532:	fd a3       	std	Y+37, r31	; 0x25
    7534:	ec a3       	std	Y+36, r30	; 0x24
    7536:	4a e0       	ldi	r20, 0x0A	; 10
    7538:	50 e0       	ldi	r21, 0x00	; 0
    753a:	be 01       	movw	r22, r28
    753c:	6c 5d       	subi	r22, 0xDC	; 220
    753e:	7f 4f       	sbci	r23, 0xFF	; 255
    7540:	8c a1       	ldd	r24, Y+36	; 0x24
    7542:	9d a1       	ldd	r25, Y+37	; 0x25
    7544:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <strtol>
    7548:	7f 83       	std	Y+7, r23	; 0x07
    754a:	6e 83       	std	Y+6, r22	; 0x06
    754c:	2e 85       	ldd	r18, Y+14	; 0x0e
    754e:	3f 85       	ldd	r19, Y+15	; 0x0f
    7550:	21 50       	subi	r18, 0x01	; 1
    7552:	31 09       	sbc	r19, r1
    7554:	3f 87       	std	Y+15, r19	; 0x0f
    7556:	2e 87       	std	Y+14, r18	; 0x0e
    7558:	88 89       	ldd	r24, Y+16	; 0x10
    755a:	99 89       	ldd	r25, Y+17	; 0x11
    755c:	ac 01       	movw	r20, r24
    755e:	42 5b       	subi	r20, 0xB2	; 178
    7560:	57 40       	sbci	r21, 0x07	; 7
    7562:	45 34       	cpi	r20, 0x45	; 69
    7564:	51 05       	cpc	r21, r1
    7566:	38 f0       	brcs	.+14     	; 0x7576 <setdate_r+0x156>
    7568:	ed b7       	in	r30, 0x3d	; 61
    756a:	fe b7       	in	r31, 0x3e	; 62
    756c:	95 83       	std	Z+5, r25	; 0x05
    756e:	84 83       	std	Z+4, r24	; 0x04
    7570:	89 e1       	ldi	r24, 0x19	; 25
    7572:	97 e0       	ldi	r25, 0x07	; 7
    7574:	34 c0       	rjmp	.+104    	; 0x75de <setdate_r+0x1be>
    7576:	8c 56       	subi	r24, 0x6C	; 108
    7578:	97 40       	sbci	r25, 0x07	; 7
    757a:	99 8b       	std	Y+17, r25	; 0x11
    757c:	88 8b       	std	Y+16, r24	; 0x10
    757e:	2c 30       	cpi	r18, 0x0C	; 12
    7580:	31 05       	cpc	r19, r1
    7582:	38 f0       	brcs	.+14     	; 0x7592 <setdate_r+0x172>
    7584:	ed b7       	in	r30, 0x3d	; 61
    7586:	fe b7       	in	r31, 0x3e	; 62
    7588:	95 83       	std	Z+5, r25	; 0x05
    758a:	84 83       	std	Z+4, r24	; 0x04
    758c:	88 e0       	ldi	r24, 0x08	; 8
    758e:	97 e0       	ldi	r25, 0x07	; 7
    7590:	26 c0       	rjmp	.+76     	; 0x75de <setdate_r+0x1be>
    7592:	8c 85       	ldd	r24, Y+12	; 0x0c
    7594:	9d 85       	ldd	r25, Y+13	; 0x0d
    7596:	9c 01       	movw	r18, r24
    7598:	21 50       	subi	r18, 0x01	; 1
    759a:	31 09       	sbc	r19, r1
    759c:	2f 31       	cpi	r18, 0x1F	; 31
    759e:	31 05       	cpc	r19, r1
    75a0:	38 f0       	brcs	.+14     	; 0x75b0 <setdate_r+0x190>
    75a2:	ed b7       	in	r30, 0x3d	; 61
    75a4:	fe b7       	in	r31, 0x3e	; 62
    75a6:	95 83       	std	Z+5, r25	; 0x05
    75a8:	84 83       	std	Z+4, r24	; 0x04
    75aa:	87 ef       	ldi	r24, 0xF7	; 247
    75ac:	96 e0       	ldi	r25, 0x06	; 6
    75ae:	17 c0       	rjmp	.+46     	; 0x75de <setdate_r+0x1be>
    75b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    75b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    75b4:	88 31       	cpi	r24, 0x18	; 24
    75b6:	91 05       	cpc	r25, r1
    75b8:	38 f0       	brcs	.+14     	; 0x75c8 <setdate_r+0x1a8>
    75ba:	ed b7       	in	r30, 0x3d	; 61
    75bc:	fe b7       	in	r31, 0x3e	; 62
    75be:	95 83       	std	Z+5, r25	; 0x05
    75c0:	84 83       	std	Z+4, r24	; 0x04
    75c2:	85 ee       	ldi	r24, 0xE5	; 229
    75c4:	96 e0       	ldi	r25, 0x06	; 6
    75c6:	0b c0       	rjmp	.+22     	; 0x75de <setdate_r+0x1be>
    75c8:	88 85       	ldd	r24, Y+8	; 0x08
    75ca:	99 85       	ldd	r25, Y+9	; 0x09
    75cc:	8c 33       	cpi	r24, 0x3C	; 60
    75ce:	91 05       	cpc	r25, r1
    75d0:	68 f0       	brcs	.+26     	; 0x75ec <setdate_r+0x1cc>
    75d2:	ed b7       	in	r30, 0x3d	; 61
    75d4:	fe b7       	in	r31, 0x3e	; 62
    75d6:	95 83       	std	Z+5, r25	; 0x05
    75d8:	84 83       	std	Z+4, r24	; 0x04
    75da:	84 ed       	ldi	r24, 0xD4	; 212
    75dc:	96 e0       	ldi	r25, 0x06	; 6
    75de:	a0 e0       	ldi	r26, 0x00	; 0
    75e0:	81 83       	std	Z+1, r24	; 0x01
    75e2:	92 83       	std	Z+2, r25	; 0x02
    75e4:	a3 83       	std	Z+3, r26	; 0x03
    75e6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    75ea:	25 c0       	rjmp	.+74     	; 0x7636 <setdate_r+0x216>
    75ec:	ce 01       	movw	r24, r28
    75ee:	06 96       	adiw	r24, 0x06	; 6
    75f0:	13 df       	rcall	.-474    	; 0x7418 <timegm>
    75f2:	6b 01       	movw	r12, r22
    75f4:	7c 01       	movw	r14, r24
    75f6:	6c 8f       	std	Y+28, r22	; 0x1c
    75f8:	7d 8f       	std	Y+29, r23	; 0x1d
    75fa:	8e 8f       	std	Y+30, r24	; 0x1e
    75fc:	9f 8f       	std	Y+31, r25	; 0x1f
    75fe:	18 a2       	std	Y+32, r1	; 0x20
    7600:	19 a2       	std	Y+33, r1	; 0x21
    7602:	1a a2       	std	Y+34, r1	; 0x22
    7604:	1b a2       	std	Y+35, r1	; 0x23
    7606:	be 01       	movw	r22, r28
    7608:	64 5e       	subi	r22, 0xE4	; 228
    760a:	7f 4f       	sbci	r23, 0xFF	; 255
    760c:	80 e0       	ldi	r24, 0x00	; 0
    760e:	90 e0       	ldi	r25, 0x00	; 0
    7610:	03 db       	rcall	.-2554   	; 0x6c18 <clock_settime>
    7612:	b7 01       	movw	r22, r14
    7614:	a6 01       	movw	r20, r12
    7616:	81 e0       	ldi	r24, 0x01	; 1
    7618:	90 e0       	ldi	r25, 0x00	; 0
    761a:	0e 94 8c 30 	call	0x6118	; 0x6118 <rtc_init>
    761e:	81 11       	cpse	r24, r1
    7620:	0d c0       	rjmp	.+26     	; 0x763c <setdate_r+0x21c>
    7622:	8d eb       	ldi	r24, 0xBD	; 189
    7624:	96 e0       	ldi	r25, 0x06	; 6
    7626:	a0 e0       	ldi	r26, 0x00	; 0
    7628:	ed b7       	in	r30, 0x3d	; 61
    762a:	fe b7       	in	r31, 0x3e	; 62
    762c:	81 83       	std	Z+1, r24	; 0x01
    762e:	92 83       	std	Z+2, r25	; 0x02
    7630:	a3 83       	std	Z+3, r26	; 0x03
    7632:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    7636:	8f ef       	ldi	r24, 0xFF	; 255
    7638:	9f ef       	ldi	r25, 0xFF	; 255
    763a:	02 c0       	rjmp	.+4      	; 0x7640 <setdate_r+0x220>
    763c:	80 e0       	ldi	r24, 0x00	; 0
    763e:	90 e0       	ldi	r25, 0x00	; 0
    7640:	a5 96       	adiw	r28, 0x25	; 37
    7642:	0f b6       	in	r0, 0x3f	; 63
    7644:	f8 94       	cli
    7646:	de bf       	out	0x3e, r29	; 62
    7648:	0f be       	out	0x3f, r0	; 63
    764a:	cd bf       	out	0x3d, r28	; 61
    764c:	df 91       	pop	r29
    764e:	cf 91       	pop	r28
    7650:	ff 90       	pop	r15
    7652:	ef 90       	pop	r14
    7654:	df 90       	pop	r13
    7656:	cf 90       	pop	r12
    7658:	08 95       	ret

0000765a <setdate>:
    765a:	ab e2       	ldi	r26, 0x2B	; 43
    765c:	b0 e0       	ldi	r27, 0x00	; 0
    765e:	e3 e3       	ldi	r30, 0x33	; 51
    7660:	fb e3       	ldi	r31, 0x3B	; 59
    7662:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
    7666:	8b e2       	ldi	r24, 0x2B	; 43
    7668:	97 e0       	ldi	r25, 0x07	; 7
    766a:	a0 e0       	ldi	r26, 0x00	; 0
    766c:	ed b7       	in	r30, 0x3d	; 61
    766e:	fe b7       	in	r31, 0x3e	; 62
    7670:	81 83       	std	Z+1, r24	; 0x01
    7672:	92 83       	std	Z+2, r25	; 0x02
    7674:	a3 83       	std	Z+3, r26	; 0x03
    7676:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    767a:	40 91 b5 1c 	lds	r20, 0x1CB5	; 0x801cb5 <__iob>
    767e:	50 91 b6 1c 	lds	r21, 0x1CB6	; 0x801cb6 <__iob+0x1>
    7682:	66 e2       	ldi	r22, 0x26	; 38
    7684:	70 e0       	ldi	r23, 0x00	; 0
    7686:	ce 01       	movw	r24, r28
    7688:	04 96       	adiw	r24, 0x04	; 4
    768a:	0e 94 ec 75 	call	0xebd8	; 0xebd8 <fgets>
    768e:	ce 01       	movw	r24, r28
    7690:	04 96       	adiw	r24, 0x04	; 4
    7692:	c6 de       	rcall	.-628    	; 0x7420 <setdate_r>
    7694:	ab 96       	adiw	r28, 0x2b	; 43
    7696:	e2 e0       	ldi	r30, 0x02	; 2
    7698:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

0000769c <find_dst>:
    769c:	a8 e2       	ldi	r26, 0x28	; 40
    769e:	b0 e0       	ldi	r27, 0x00	; 0
    76a0:	e4 e5       	ldi	r30, 0x54	; 84
    76a2:	fb e3       	ldi	r31, 0x3B	; 59
    76a4:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
    76a8:	3c 01       	movw	r6, r24
    76aa:	1a 01       	movw	r2, r20
    76ac:	2b 01       	movw	r4, r22
    76ae:	49 01       	movw	r8, r18
    76b0:	1c a3       	std	Y+36, r17	; 0x24
    76b2:	0b a3       	std	Y+35, r16	; 0x23
    76b4:	de a2       	std	Y+38, r13	; 0x26
    76b6:	cd a2       	std	Y+37, r12	; 0x25
    76b8:	b8 a6       	std	Y+40, r11	; 0x28
    76ba:	af a2       	std	Y+39, r10	; 0x27
    76bc:	be 01       	movw	r22, r28
    76be:	61 5e       	subi	r22, 0xE1	; 225
    76c0:	7f 4f       	sbci	r23, 0xFF	; 255
    76c2:	ce 01       	movw	r24, r28
    76c4:	47 96       	adiw	r24, 0x17	; 23
    76c6:	15 dc       	rcall	.-2006   	; 0x6ef2 <gettimeofday>
    76c8:	af 8d       	ldd	r26, Y+31	; 0x1f
    76ca:	b8 a1       	ldd	r27, Y+32	; 0x20
    76cc:	2c e3       	ldi	r18, 0x3C	; 60
    76ce:	30 e0       	ldi	r19, 0x00	; 0
    76d0:	0e 94 40 e6 	call	0x1cc80	; 0x1cc80 <__usmulhisi3>
    76d4:	5b 01       	movw	r10, r22
    76d6:	6c 01       	movw	r12, r24
    76d8:	61 14       	cp	r6, r1
    76da:	71 04       	cpc	r7, r1
    76dc:	31 f0       	breq	.+12     	; 0x76ea <find_dst+0x4e>
    76de:	20 e1       	ldi	r18, 0x10	; 16
    76e0:	a2 1a       	sub	r10, r18
    76e2:	2e e0       	ldi	r18, 0x0E	; 14
    76e4:	b2 0a       	sbc	r11, r18
    76e6:	c1 08       	sbc	r12, r1
    76e8:	d1 08       	sbc	r13, r1
    76ea:	81 14       	cp	r8, r1
    76ec:	91 04       	cpc	r9, r1
    76ee:	39 f0       	breq	.+14     	; 0x76fe <find_dst+0x62>
    76f0:	4c e6       	ldi	r20, 0x6C	; 108
    76f2:	84 1a       	sub	r8, r20
    76f4:	47 e0       	ldi	r20, 0x07	; 7
    76f6:	94 0a       	sbc	r9, r20
    76f8:	9c 86       	std	Y+12, r9	; 0x0c
    76fa:	8b 86       	std	Y+11, r8	; 0x0b
    76fc:	11 c0       	rjmp	.+34     	; 0x7720 <find_dst+0x84>
    76fe:	21 14       	cp	r2, r1
    7700:	31 04       	cpc	r3, r1
    7702:	41 04       	cpc	r4, r1
    7704:	51 04       	cpc	r5, r1
    7706:	21 f4       	brne	.+8      	; 0x7710 <find_dst+0x74>
    7708:	2f 88       	ldd	r2, Y+23	; 0x17
    770a:	38 8c       	ldd	r3, Y+24	; 0x18
    770c:	49 8c       	ldd	r4, Y+25	; 0x19
    770e:	5a 8c       	ldd	r5, Y+26	; 0x1a
    7710:	8e 01       	movw	r16, r28
    7712:	0f 5f       	subi	r16, 0xFF	; 255
    7714:	1f 4f       	sbci	r17, 0xFF	; 255
    7716:	a6 01       	movw	r20, r12
    7718:	95 01       	movw	r18, r10
    771a:	c2 01       	movw	r24, r4
    771c:	b1 01       	movw	r22, r2
    771e:	ca da       	rcall	.-2668   	; 0x6cb4 <time_to_tm>
    7720:	8b a1       	ldd	r24, Y+35	; 0x23
    7722:	9c a1       	ldd	r25, Y+36	; 0x24
    7724:	01 97       	sbiw	r24, 0x01	; 1
    7726:	9a 87       	std	Y+10, r25	; 0x0a
    7728:	89 87       	std	Y+9, r24	; 0x09
    772a:	81 e0       	ldi	r24, 0x01	; 1
    772c:	90 e0       	ldi	r25, 0x00	; 0
    772e:	98 87       	std	Y+8, r25	; 0x08
    7730:	8f 83       	std	Y+7, r24	; 0x07
    7732:	8f a1       	ldd	r24, Y+39	; 0x27
    7734:	98 a5       	ldd	r25, Y+40	; 0x28
    7736:	9e 83       	std	Y+6, r25	; 0x06
    7738:	8d 83       	std	Y+5, r24	; 0x05
    773a:	1c 82       	std	Y+4, r1	; 0x04
    773c:	1b 82       	std	Y+3, r1	; 0x03
    773e:	1a 82       	std	Y+2, r1	; 0x02
    7740:	19 82       	std	Y+1, r1	; 0x01
    7742:	ce 01       	movw	r24, r28
    7744:	01 96       	adiw	r24, 0x01	; 1
    7746:	68 de       	rcall	.-816    	; 0x7418 <timegm>
    7748:	45 01       	movw	r8, r10
    774a:	56 01       	movw	r10, r12
    774c:	86 0e       	add	r8, r22
    774e:	97 1e       	adc	r9, r23
    7750:	a8 1e       	adc	r10, r24
    7752:	b9 1e       	adc	r11, r25
    7754:	8e 01       	movw	r16, r28
    7756:	0f 5f       	subi	r16, 0xFF	; 255
    7758:	1f 4f       	sbci	r17, 0xFF	; 255
    775a:	20 e0       	ldi	r18, 0x00	; 0
    775c:	30 e0       	ldi	r19, 0x00	; 0
    775e:	a9 01       	movw	r20, r18
    7760:	c5 01       	movw	r24, r10
    7762:	b4 01       	movw	r22, r8
    7764:	a7 da       	rcall	.-2738   	; 0x6cb4 <time_to_tm>
    7766:	2d 85       	ldd	r18, Y+13	; 0x0d
    7768:	3e 85       	ldd	r19, Y+14	; 0x0e
    776a:	e7 e0       	ldi	r30, 0x07	; 7
    776c:	f0 e0       	ldi	r31, 0x00	; 0
    776e:	c9 01       	movw	r24, r18
    7770:	bf 01       	movw	r22, r30
    7772:	0e 94 e6 e5 	call	0x1cbcc	; 0x1cbcc <__divmodhi4>
    7776:	4d a1       	ldd	r20, Y+37	; 0x25
    7778:	5e a1       	ldd	r21, Y+38	; 0x26
    777a:	48 17       	cp	r20, r24
    777c:	59 07       	cpc	r21, r25
    777e:	21 f4       	brne	.+8      	; 0x7788 <find_dst+0xec>
    7780:	51 e0       	ldi	r21, 0x01	; 1
    7782:	e5 1a       	sub	r14, r21
    7784:	f1 08       	sbc	r15, r1
    7786:	51 f0       	breq	.+20     	; 0x779c <find_dst+0x100>
    7788:	80 e8       	ldi	r24, 0x80	; 128
    778a:	88 0e       	add	r8, r24
    778c:	81 e5       	ldi	r24, 0x51	; 81
    778e:	98 1e       	adc	r9, r24
    7790:	81 e0       	ldi	r24, 0x01	; 1
    7792:	a8 1e       	adc	r10, r24
    7794:	b1 1c       	adc	r11, r1
    7796:	2f 5f       	subi	r18, 0xFF	; 255
    7798:	3f 4f       	sbci	r19, 0xFF	; 255
    779a:	e9 cf       	rjmp	.-46     	; 0x776e <find_dst+0xd2>
    779c:	c5 01       	movw	r24, r10
    779e:	b4 01       	movw	r22, r8
    77a0:	a8 96       	adiw	r28, 0x28	; 40
    77a2:	e2 e1       	ldi	r30, 0x12	; 18
    77a4:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

000077a8 <set_dst>:
    77a8:	4f 92       	push	r4
    77aa:	5f 92       	push	r5
    77ac:	6f 92       	push	r6
    77ae:	7f 92       	push	r7
    77b0:	af 92       	push	r10
    77b2:	bf 92       	push	r11
    77b4:	cf 92       	push	r12
    77b6:	df 92       	push	r13
    77b8:	ef 92       	push	r14
    77ba:	ff 92       	push	r15
    77bc:	0f 93       	push	r16
    77be:	1f 93       	push	r17
    77c0:	cf 93       	push	r28
    77c2:	df 93       	push	r29
    77c4:	cd b7       	in	r28, 0x3d	; 61
    77c6:	de b7       	in	r29, 0x3e	; 62
    77c8:	2c 97       	sbiw	r28, 0x0c	; 12
    77ca:	0f b6       	in	r0, 0x3f	; 63
    77cc:	f8 94       	cli
    77ce:	de bf       	out	0x3e, r29	; 62
    77d0:	0f be       	out	0x3f, r0	; 63
    77d2:	cd bf       	out	0x3d, r28	; 61
    77d4:	2b 01       	movw	r4, r22
    77d6:	3c 01       	movw	r6, r24
    77d8:	67 2b       	or	r22, r23
    77da:	68 2b       	or	r22, r24
    77dc:	69 2b       	or	r22, r25
    77de:	51 f4       	brne	.+20     	; 0x77f4 <set_dst+0x4c>
    77e0:	be 01       	movw	r22, r28
    77e2:	67 5f       	subi	r22, 0xF7	; 247
    77e4:	7f 4f       	sbci	r23, 0xFF	; 255
    77e6:	ce 01       	movw	r24, r28
    77e8:	01 96       	adiw	r24, 0x01	; 1
    77ea:	83 db       	rcall	.-2298   	; 0x6ef2 <gettimeofday>
    77ec:	49 80       	ldd	r4, Y+1	; 0x01
    77ee:	5a 80       	ldd	r5, Y+2	; 0x02
    77f0:	6b 80       	ldd	r6, Y+3	; 0x03
    77f2:	7c 80       	ldd	r7, Y+4	; 0x04
    77f4:	80 91 72 1a 	lds	r24, 0x1A72	; 0x801a72 <dst+0x8>
    77f8:	90 91 73 1a 	lds	r25, 0x1A73	; 0x801a73 <dst+0x9>
    77fc:	a0 91 74 1a 	lds	r26, 0x1A74	; 0x801a74 <dst+0xa>
    7800:	b0 91 75 1a 	lds	r27, 0x1A75	; 0x801a75 <dst+0xb>
    7804:	84 15       	cp	r24, r4
    7806:	95 05       	cpc	r25, r5
    7808:	a6 05       	cpc	r26, r6
    780a:	b7 05       	cpc	r27, r7
    780c:	50 f0       	brcs	.+20     	; 0x7822 <set_dst+0x7a>
    780e:	84 19       	sub	r24, r4
    7810:	95 09       	sbc	r25, r5
    7812:	a6 09       	sbc	r26, r6
    7814:	b7 09       	sbc	r27, r7
    7816:	80 38       	cpi	r24, 0x80	; 128
    7818:	91 45       	sbci	r25, 0x51	; 81
    781a:	a1 40       	sbci	r26, 0x01	; 1
    781c:	b1 05       	cpc	r27, r1
    781e:	70 f4       	brcc	.+28     	; 0x783c <set_dst+0x94>
    7820:	42 c0       	rjmp	.+132    	; 0x78a6 <set_dst+0xfe>
    7822:	a3 01       	movw	r20, r6
    7824:	92 01       	movw	r18, r4
    7826:	28 1b       	sub	r18, r24
    7828:	39 0b       	sbc	r19, r25
    782a:	4a 0b       	sbc	r20, r26
    782c:	5b 0b       	sbc	r21, r27
    782e:	da 01       	movw	r26, r20
    7830:	c9 01       	movw	r24, r18
    7832:	80 38       	cpi	r24, 0x80	; 128
    7834:	91 45       	sbci	r25, 0x51	; 81
    7836:	a1 40       	sbci	r26, 0x01	; 1
    7838:	b1 05       	cpc	r27, r1
    783a:	a8 f1       	brcs	.+106    	; 0x78a6 <set_dst+0xfe>
    783c:	40 92 72 1a 	sts	0x1A72, r4	; 0x801a72 <dst+0x8>
    7840:	50 92 73 1a 	sts	0x1A73, r5	; 0x801a73 <dst+0x9>
    7844:	60 92 74 1a 	sts	0x1A74, r6	; 0x801a74 <dst+0xa>
    7848:	70 92 75 1a 	sts	0x1A75, r7	; 0x801a75 <dst+0xb>
    784c:	82 e0       	ldi	r24, 0x02	; 2
    784e:	a8 2e       	mov	r10, r24
    7850:	b1 2c       	mov	r11, r1
    7852:	c1 2c       	mov	r12, r1
    7854:	d1 2c       	mov	r13, r1
    7856:	92 e0       	ldi	r25, 0x02	; 2
    7858:	e9 2e       	mov	r14, r25
    785a:	f1 2c       	mov	r15, r1
    785c:	03 e0       	ldi	r16, 0x03	; 3
    785e:	10 e0       	ldi	r17, 0x00	; 0
    7860:	20 e0       	ldi	r18, 0x00	; 0
    7862:	30 e0       	ldi	r19, 0x00	; 0
    7864:	b3 01       	movw	r22, r6
    7866:	a2 01       	movw	r20, r4
    7868:	80 e0       	ldi	r24, 0x00	; 0
    786a:	90 e0       	ldi	r25, 0x00	; 0
    786c:	17 df       	rcall	.-466    	; 0x769c <find_dst>
    786e:	60 93 6a 1a 	sts	0x1A6A, r22	; 0x801a6a <dst>
    7872:	70 93 6b 1a 	sts	0x1A6B, r23	; 0x801a6b <dst+0x1>
    7876:	80 93 6c 1a 	sts	0x1A6C, r24	; 0x801a6c <dst+0x2>
    787a:	90 93 6d 1a 	sts	0x1A6D, r25	; 0x801a6d <dst+0x3>
    787e:	ee 24       	eor	r14, r14
    7880:	e3 94       	inc	r14
    7882:	f1 2c       	mov	r15, r1
    7884:	0b e0       	ldi	r16, 0x0B	; 11
    7886:	10 e0       	ldi	r17, 0x00	; 0
    7888:	20 e0       	ldi	r18, 0x00	; 0
    788a:	30 e0       	ldi	r19, 0x00	; 0
    788c:	b3 01       	movw	r22, r6
    788e:	a2 01       	movw	r20, r4
    7890:	81 e0       	ldi	r24, 0x01	; 1
    7892:	90 e0       	ldi	r25, 0x00	; 0
    7894:	03 df       	rcall	.-506    	; 0x769c <find_dst>
    7896:	60 93 6e 1a 	sts	0x1A6E, r22	; 0x801a6e <dst+0x4>
    789a:	70 93 6f 1a 	sts	0x1A6F, r23	; 0x801a6f <dst+0x5>
    789e:	80 93 70 1a 	sts	0x1A70, r24	; 0x801a70 <dst+0x6>
    78a2:	90 93 71 1a 	sts	0x1A71, r25	; 0x801a71 <dst+0x7>
    78a6:	2c 96       	adiw	r28, 0x0c	; 12
    78a8:	0f b6       	in	r0, 0x3f	; 63
    78aa:	f8 94       	cli
    78ac:	de bf       	out	0x3e, r29	; 62
    78ae:	0f be       	out	0x3f, r0	; 63
    78b0:	cd bf       	out	0x3d, r28	; 61
    78b2:	df 91       	pop	r29
    78b4:	cf 91       	pop	r28
    78b6:	1f 91       	pop	r17
    78b8:	0f 91       	pop	r16
    78ba:	ff 90       	pop	r15
    78bc:	ef 90       	pop	r14
    78be:	df 90       	pop	r13
    78c0:	cf 90       	pop	r12
    78c2:	bf 90       	pop	r11
    78c4:	af 90       	pop	r10
    78c6:	7f 90       	pop	r7
    78c8:	6f 90       	pop	r6
    78ca:	5f 90       	pop	r5
    78cc:	4f 90       	pop	r4
    78ce:	08 95       	ret

000078d0 <asctime_r>:
    78d0:	a5 e1       	ldi	r26, 0x15	; 21
    78d2:	b0 e0       	ldi	r27, 0x00	; 0
    78d4:	ee e6       	ldi	r30, 0x6E	; 110
    78d6:	fc e3       	ldi	r31, 0x3C	; 60
    78d8:	0c 94 74 e6 	jmp	0x1cce8	; 0x1cce8 <__prologue_saves__+0x1c>
    78dc:	ec 01       	movw	r28, r24
    78de:	8b 01       	movw	r16, r22
    78e0:	60 e0       	ldi	r22, 0x00	; 0
    78e2:	70 e0       	ldi	r23, 0x00	; 0
    78e4:	d1 db       	rcall	.-2142   	; 0x7088 <normalize>
    78e6:	80 e2       	ldi	r24, 0x20	; 32
    78e8:	f8 01       	movw	r30, r16
    78ea:	11 92       	st	Z+, r1
    78ec:	8a 95       	dec	r24
    78ee:	e9 f7       	brne	.-6      	; 0x78ea <asctime_r+0x1a>
    78f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    78f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    78f4:	84 59       	subi	r24, 0x94	; 148
    78f6:	98 4f       	sbci	r25, 0xF8	; 248
    78f8:	ed b7       	in	r30, 0x3d	; 61
    78fa:	fe b7       	in	r31, 0x3e	; 62
    78fc:	95 8b       	std	Z+21, r25	; 0x15
    78fe:	84 8b       	std	Z+20, r24	; 0x14
    7900:	88 81       	ld	r24, Y
    7902:	99 81       	ldd	r25, Y+1	; 0x01
    7904:	93 8b       	std	Z+19, r25	; 0x13
    7906:	82 8b       	std	Z+18, r24	; 0x12
    7908:	8a 81       	ldd	r24, Y+2	; 0x02
    790a:	9b 81       	ldd	r25, Y+3	; 0x03
    790c:	91 8b       	std	Z+17, r25	; 0x11
    790e:	80 8b       	std	Z+16, r24	; 0x10
    7910:	8c 81       	ldd	r24, Y+4	; 0x04
    7912:	9d 81       	ldd	r25, Y+5	; 0x05
    7914:	97 87       	std	Z+15, r25	; 0x0f
    7916:	86 87       	std	Z+14, r24	; 0x0e
    7918:	8e 81       	ldd	r24, Y+6	; 0x06
    791a:	9f 81       	ldd	r25, Y+7	; 0x07
    791c:	95 87       	std	Z+13, r25	; 0x0d
    791e:	84 87       	std	Z+12, r24	; 0x0c
    7920:	e8 85       	ldd	r30, Y+8	; 0x08
    7922:	f9 85       	ldd	r31, Y+9	; 0x09
    7924:	ee 0f       	add	r30, r30
    7926:	ff 1f       	adc	r31, r31
    7928:	e5 5f       	subi	r30, 0xF5	; 245
    792a:	fe 4f       	sbci	r31, 0xFE	; 254
    792c:	80 81       	ld	r24, Z
    792e:	91 81       	ldd	r25, Z+1	; 0x01
    7930:	ed b7       	in	r30, 0x3d	; 61
    7932:	fe b7       	in	r31, 0x3e	; 62
    7934:	93 87       	std	Z+11, r25	; 0x0b
    7936:	82 87       	std	Z+10, r24	; 0x0a
    7938:	ec 85       	ldd	r30, Y+12	; 0x0c
    793a:	fd 85       	ldd	r31, Y+13	; 0x0d
    793c:	ee 0f       	add	r30, r30
    793e:	ff 1f       	adc	r31, r31
    7940:	eb 5d       	subi	r30, 0xDB	; 219
    7942:	fe 4f       	sbci	r31, 0xFE	; 254
    7944:	80 81       	ld	r24, Z
    7946:	91 81       	ldd	r25, Z+1	; 0x01
    7948:	ed b7       	in	r30, 0x3d	; 61
    794a:	fe b7       	in	r31, 0x3e	; 62
    794c:	91 87       	std	Z+9, r25	; 0x09
    794e:	80 87       	std	Z+8, r24	; 0x08
    7950:	8c e4       	ldi	r24, 0x4C	; 76
    7952:	97 e0       	ldi	r25, 0x07	; 7
    7954:	a0 e0       	ldi	r26, 0x00	; 0
    7956:	85 83       	std	Z+5, r24	; 0x05
    7958:	96 83       	std	Z+6, r25	; 0x06
    795a:	a7 83       	std	Z+7, r26	; 0x07
    795c:	80 e2       	ldi	r24, 0x20	; 32
    795e:	90 e0       	ldi	r25, 0x00	; 0
    7960:	94 83       	std	Z+4, r25	; 0x04
    7962:	83 83       	std	Z+3, r24	; 0x03
    7964:	12 83       	std	Z+2, r17	; 0x02
    7966:	01 83       	std	Z+1, r16	; 0x01
    7968:	0e 94 7d 46 	call	0x8cfa	; 0x8cfa <snprintf_P>
    796c:	c8 01       	movw	r24, r16
    796e:	cd b7       	in	r28, 0x3d	; 61
    7970:	de b7       	in	r29, 0x3e	; 62
    7972:	65 96       	adiw	r28, 0x15	; 21
    7974:	e4 e0       	ldi	r30, 0x04	; 4
    7976:	0c 94 90 e6 	jmp	0x1cd20	; 0x1cd20 <__epilogue_restores__+0x1c>

0000797a <asctime>:
    797a:	64 ef       	ldi	r22, 0xF4	; 244
    797c:	77 e1       	ldi	r23, 0x17	; 23
    797e:	a8 cf       	rjmp	.-176    	; 0x78d0 <asctime_r>
    7980:	08 95       	ret

00007982 <ctime_gm>:
    7982:	a6 e1       	ldi	r26, 0x16	; 22
    7984:	b0 e0       	ldi	r27, 0x00	; 0
    7986:	e7 ec       	ldi	r30, 0xC7	; 199
    7988:	fc e3       	ldi	r31, 0x3C	; 60
    798a:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
    798e:	be 01       	movw	r22, r28
    7990:	6f 5f       	subi	r22, 0xFF	; 255
    7992:	7f 4f       	sbci	r23, 0xFF	; 255
    7994:	6d da       	rcall	.-2854   	; 0x6e70 <gmtime_r>
    7996:	64 ed       	ldi	r22, 0xD4	; 212
    7998:	77 e1       	ldi	r23, 0x17	; 23
    799a:	9a df       	rcall	.-204    	; 0x78d0 <asctime_r>
    799c:	66 96       	adiw	r28, 0x16	; 22
    799e:	e2 e0       	ldi	r30, 0x02	; 2
    79a0:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

000079a4 <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    79a4:	a5 e2       	ldi	r26, 0x25	; 37
    79a6:	b0 e0       	ldi	r27, 0x00	; 0
    79a8:	e8 ed       	ldi	r30, 0xD8	; 216
    79aa:	fc e3       	ldi	r31, 0x3C	; 60
    79ac:	0c 94 70 e6 	jmp	0x1cce0	; 0x1cce0 <__prologue_saves__+0x14>
    79b0:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    79b2:	40 e0       	ldi	r20, 0x00	; 0
    79b4:	50 e0       	ldi	r21, 0x00	; 0
    79b6:	ba 01       	movw	r22, r20
    79b8:	80 e0       	ldi	r24, 0x00	; 0
    79ba:	90 e0       	ldi	r25, 0x00	; 0
    79bc:	0e 94 8c 30 	call	0x6118	; 0x6118 <rtc_init>
    79c0:	81 11       	cpse	r24, r1
    79c2:	27 c0       	rjmp	.+78     	; 0x7a12 <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    79c4:	8b ea       	ldi	r24, 0xAB	; 171
    79c6:	96 e0       	ldi	r25, 0x06	; 6
    79c8:	a0 e0       	ldi	r26, 0x00	; 0
    79ca:	ed b7       	in	r30, 0x3d	; 61
    79cc:	fe b7       	in	r31, 0x3e	; 62
    79ce:	81 83       	std	Z+1, r24	; 0x01
    79d0:	92 83       	std	Z+2, r25	; 0x02
    79d2:	a3 83       	std	Z+3, r26	; 0x03
    79d4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        printf("attempting rtc init\n");
    79d8:	86 e9       	ldi	r24, 0x96	; 150
    79da:	96 e0       	ldi	r25, 0x06	; 6
    79dc:	a0 e0       	ldi	r26, 0x00	; 0
    79de:	ed b7       	in	r30, 0x3d	; 61
    79e0:	fe b7       	in	r31, 0x3e	; 62
    79e2:	81 83       	std	Z+1, r24	; 0x01
    79e4:	92 83       	std	Z+2, r25	; 0x02
    79e6:	a3 83       	std	Z+3, r26	; 0x03
    79e8:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    79ec:	40 e0       	ldi	r20, 0x00	; 0
    79ee:	50 e0       	ldi	r21, 0x00	; 0
    79f0:	ba 01       	movw	r22, r20
    79f2:	81 e0       	ldi	r24, 0x01	; 1
    79f4:	90 e0       	ldi	r25, 0x00	; 0
    79f6:	0e 94 8c 30 	call	0x6118	; 0x6118 <rtc_init>
    79fa:	81 11       	cpse	r24, r1
    79fc:	0a c0       	rjmp	.+20     	; 0x7a12 <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    79fe:	8f e7       	ldi	r24, 0x7F	; 127
    7a00:	96 e0       	ldi	r25, 0x06	; 6
    7a02:	a0 e0       	ldi	r26, 0x00	; 0
    7a04:	ed b7       	in	r30, 0x3d	; 61
    7a06:	fe b7       	in	r31, 0x3e	; 62
    7a08:	81 83       	std	Z+1, r24	; 0x01
    7a0a:	92 83       	std	Z+2, r25	; 0x02
    7a0c:	a3 83       	std	Z+3, r26	; 0x03
    7a0e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        }
    }

    if(rtc_read(&tc))
    7a12:	ce 01       	movw	r24, r28
    7a14:	04 96       	adiw	r24, 0x04	; 4
    7a16:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <rtc_read>
    7a1a:	88 23       	and	r24, r24
    7a1c:	51 f0       	breq	.+20     	; 0x7a32 <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7a1e:	ce 01       	movw	r24, r28
    7a20:	04 96       	adiw	r24, 0x04	; 4
    7a22:	fa dc       	rcall	.-1548   	; 0x7418 <timegm>
    7a24:	6b 01       	movw	r12, r22
    7a26:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
    7a28:	67 2b       	or	r22, r23
    7a2a:	68 2b       	or	r22, r24
    7a2c:	69 2b       	or	r22, r25
    7a2e:	c1 f4       	brne	.+48     	; 0x7a60 <initialize_clock+0xbc>
    7a30:	0a c0       	rjmp	.+20     	; 0x7a46 <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7a32:	85 e6       	ldi	r24, 0x65	; 101
    7a34:	96 e0       	ldi	r25, 0x06	; 6
    7a36:	a0 e0       	ldi	r26, 0x00	; 0
    7a38:	ed b7       	in	r30, 0x3d	; 61
    7a3a:	fe b7       	in	r31, 0x3e	; 62
    7a3c:	81 83       	std	Z+1, r24	; 0x01
    7a3e:	92 83       	std	Z+2, r25	; 0x02
    7a40:	a3 83       	std	Z+3, r26	; 0x03
    7a42:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7a46:	81 e4       	ldi	r24, 0x41	; 65
    7a48:	96 e0       	ldi	r25, 0x06	; 6
    7a4a:	a0 e0       	ldi	r26, 0x00	; 0
    7a4c:	ed b7       	in	r30, 0x3d	; 61
    7a4e:	fe b7       	in	r31, 0x3e	; 62
    7a50:	81 83       	std	Z+1, r24	; 0x01
    7a52:	92 83       	std	Z+2, r25	; 0x02
    7a54:	a3 83       	std	Z+3, r26	; 0x03
    7a56:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    7a5a:	c1 2c       	mov	r12, r1
    7a5c:	d1 2c       	mov	r13, r1
    7a5e:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7a60:	1b a3       	std	Y+35, r17	; 0x23
    7a62:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    7a64:	1d a2       	std	Y+37, r1	; 0x25
    7a66:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    7a68:	ce 01       	movw	r24, r28
    7a6a:	82 96       	adiw	r24, 0x22	; 34
    7a6c:	30 da       	rcall	.-2976   	; 0x6ece <settimezone>

    ts.tv_sec = seconds;
    7a6e:	ca 8e       	std	Y+26, r12	; 0x1a
    7a70:	db 8e       	std	Y+27, r13	; 0x1b
    7a72:	ec 8e       	std	Y+28, r14	; 0x1c
    7a74:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    7a76:	1e 8e       	std	Y+30, r1	; 0x1e
    7a78:	1f 8e       	std	Y+31, r1	; 0x1f
    7a7a:	18 a2       	std	Y+32, r1	; 0x20
    7a7c:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    7a7e:	be 01       	movw	r22, r28
    7a80:	66 5e       	subi	r22, 0xE6	; 230
    7a82:	7f 4f       	sbci	r23, 0xFF	; 255
    7a84:	80 e0       	ldi	r24, 0x00	; 0
    7a86:	90 e0       	ldi	r25, 0x00	; 0
    7a88:	c7 d8       	rcall	.-3698   	; 0x6c18 <clock_settime>
}
    7a8a:	a5 96       	adiw	r28, 0x25	; 37
    7a8c:	e8 e0       	ldi	r30, 0x08	; 8
    7a8e:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__epilogue_restores__+0x14>

00007a92 <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7a92:	a9 e2       	ldi	r26, 0x29	; 41
    7a94:	b0 e0       	ldi	r27, 0x00	; 0
    7a96:	ef e4       	ldi	r30, 0x4F	; 79
    7a98:	fd e3       	ldi	r31, 0x3D	; 61
    7a9a:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7a9e:	ce 01       	movw	r24, r28
    7aa0:	08 96       	adiw	r24, 0x08	; 8
    7aa2:	0e 94 f2 2f 	call	0x5fe4	; 0x5fe4 <rtc_read>
    7aa6:	88 23       	and	r24, r24
    7aa8:	29 f1       	breq	.+74     	; 0x7af4 <display_clock+0x62>
    {
        seconds = timegm(&tc);
    7aaa:	ce 01       	movw	r24, r28
    7aac:	08 96       	adiw	r24, 0x08	; 8
    7aae:	b4 dc       	rcall	.-1688   	; 0x7418 <timegm>
    7ab0:	6e a3       	std	Y+38, r22	; 0x26
    7ab2:	7f a3       	std	Y+39, r23	; 0x27
    7ab4:	88 a7       	std	Y+40, r24	; 0x28
    7ab6:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    7ab8:	ed b7       	in	r30, 0x3d	; 61
    7aba:	fe b7       	in	r31, 0x3e	; 62
    7abc:	64 83       	std	Z+4, r22	; 0x04
    7abe:	75 83       	std	Z+5, r23	; 0x05
    7ac0:	86 83       	std	Z+6, r24	; 0x06
    7ac2:	97 83       	std	Z+7, r25	; 0x07
    7ac4:	8f e2       	ldi	r24, 0x2F	; 47
    7ac6:	96 e0       	ldi	r25, 0x06	; 6
    7ac8:	a0 e0       	ldi	r26, 0x00	; 0
    7aca:	81 83       	std	Z+1, r24	; 0x01
    7acc:	92 83       	std	Z+2, r25	; 0x02
    7ace:	a3 83       	std	Z+3, r26	; 0x03
    7ad0:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7ad4:	ce 01       	movw	r24, r28
    7ad6:	08 96       	adiw	r24, 0x08	; 8
    7ad8:	50 df       	rcall	.-352    	; 0x797a <asctime>
    7ada:	ed b7       	in	r30, 0x3d	; 61
    7adc:	fe b7       	in	r31, 0x3e	; 62
    7ade:	95 83       	std	Z+5, r25	; 0x05
    7ae0:	84 83       	std	Z+4, r24	; 0x04
    7ae2:	8e e1       	ldi	r24, 0x1E	; 30
    7ae4:	96 e0       	ldi	r25, 0x06	; 6
    7ae6:	a0 e0       	ldi	r26, 0x00	; 0
    7ae8:	81 83       	std	Z+1, r24	; 0x01
    7aea:	92 83       	std	Z+2, r25	; 0x02
    7aec:	a3 83       	std	Z+3, r26	; 0x03
    7aee:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    7af2:	0a c0       	rjmp	.+20     	; 0x7b08 <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7af4:	8d e0       	ldi	r24, 0x0D	; 13
    7af6:	96 e0       	ldi	r25, 0x06	; 6
    7af8:	a0 e0       	ldi	r26, 0x00	; 0
    7afa:	ed b7       	in	r30, 0x3d	; 61
    7afc:	fe b7       	in	r31, 0x3e	; 62
    7afe:	81 83       	std	Z+1, r24	; 0x01
    7b00:	92 83       	std	Z+2, r25	; 0x02
    7b02:	a3 83       	std	Z+3, r26	; 0x03
    7b04:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    }
#endif                                        // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7b08:	be 01       	movw	r22, r28
    7b0a:	62 5e       	subi	r22, 0xE2	; 226
    7b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    7b0e:	80 e0       	ldi	r24, 0x00	; 0
    7b10:	90 e0       	ldi	r25, 0x00	; 0
    7b12:	0e 94 63 33 	call	0x66c6	; 0x66c6 <clock_gettime>
    seconds = ts.tv_sec;
    7b16:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7b18:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7b1a:	a8 a1       	ldd	r26, Y+32	; 0x20
    7b1c:	b9 a1       	ldd	r27, Y+33	; 0x21
    7b1e:	8e a3       	std	Y+38, r24	; 0x26
    7b20:	9f a3       	std	Y+39, r25	; 0x27
    7b22:	a8 a7       	std	Y+40, r26	; 0x28
    7b24:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    7b26:	ed b7       	in	r30, 0x3d	; 61
    7b28:	fe b7       	in	r31, 0x3e	; 62
    7b2a:	84 83       	std	Z+4, r24	; 0x04
    7b2c:	95 83       	std	Z+5, r25	; 0x05
    7b2e:	a6 83       	std	Z+6, r26	; 0x06
    7b30:	b7 83       	std	Z+7, r27	; 0x07
    7b32:	8b ef       	ldi	r24, 0xFB	; 251
    7b34:	95 e0       	ldi	r25, 0x05	; 5
    7b36:	a0 e0       	ldi	r26, 0x00	; 0
    7b38:	81 83       	std	Z+1, r24	; 0x01
    7b3a:	92 83       	std	Z+2, r25	; 0x02
    7b3c:	a3 83       	std	Z+3, r26	; 0x03
    7b3e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7b42:	ce 01       	movw	r24, r28
    7b44:	86 96       	adiw	r24, 0x26	; 38
    7b46:	a9 d9       	rcall	.-3246   	; 0x6e9a <gmtime>
    7b48:	18 df       	rcall	.-464    	; 0x797a <asctime>
    7b4a:	ed b7       	in	r30, 0x3d	; 61
    7b4c:	fe b7       	in	r31, 0x3e	; 62
    7b4e:	95 83       	std	Z+5, r25	; 0x05
    7b50:	84 83       	std	Z+4, r24	; 0x04
    7b52:	8a ee       	ldi	r24, 0xEA	; 234
    7b54:	95 e0       	ldi	r25, 0x05	; 5
    7b56:	a0 e0       	ldi	r26, 0x00	; 0
    7b58:	81 83       	std	Z+1, r24	; 0x01
    7b5a:	92 83       	std	Z+2, r25	; 0x02
    7b5c:	a3 83       	std	Z+3, r26	; 0x03
    7b5e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
}
    7b62:	a9 96       	adiw	r28, 0x29	; 41
    7b64:	e2 e0       	ldi	r30, 0x02	; 2
    7b66:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00007b6a <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7b6a:	fc 01       	movw	r30, r24
    7b6c:	84 81       	ldd	r24, Z+4	; 0x04
    7b6e:	95 81       	ldd	r25, Z+5	; 0x05
    7b70:	00 97       	sbiw	r24, 0x00	; 0
    7b72:	79 f0       	breq	.+30     	; 0x7b92 <_putc_buffer_fn+0x28>
    7b74:	66 23       	and	r22, r22
    7b76:	69 f0       	breq	.+26     	; 0x7b92 <_putc_buffer_fn+0x28>
    7b78:	01 97       	sbiw	r24, 0x01	; 1
    7b7a:	95 83       	std	Z+5, r25	; 0x05
    7b7c:	84 83       	std	Z+4, r24	; 0x04
    7b7e:	86 81       	ldd	r24, Z+6	; 0x06
    7b80:	97 81       	ldd	r25, Z+7	; 0x07
    7b82:	01 96       	adiw	r24, 0x01	; 1
    7b84:	97 83       	std	Z+7, r25	; 0x07
    7b86:	86 83       	std	Z+6, r24	; 0x06
    7b88:	a2 81       	ldd	r26, Z+2	; 0x02
    7b8a:	b3 81       	ldd	r27, Z+3	; 0x03
    7b8c:	6d 93       	st	X+, r22
    7b8e:	b3 83       	std	Z+3, r27	; 0x03
    7b90:	a2 83       	std	Z+2, r26	; 0x02
    7b92:	02 80       	ldd	r0, Z+2	; 0x02
    7b94:	f3 81       	ldd	r31, Z+3	; 0x03
    7b96:	e0 2d       	mov	r30, r0
    7b98:	10 82       	st	Z, r1
    7b9a:	08 95       	ret

00007b9c <_putc_fn>:
    7b9c:	fc 01       	movw	r30, r24
    7b9e:	26 81       	ldd	r18, Z+6	; 0x06
    7ba0:	37 81       	ldd	r19, Z+7	; 0x07
    7ba2:	2f 5f       	subi	r18, 0xFF	; 255
    7ba4:	3f 4f       	sbci	r19, 0xFF	; 255
    7ba6:	37 83       	std	Z+7, r19	; 0x07
    7ba8:	26 83       	std	Z+6, r18	; 0x06
    7baa:	86 2f       	mov	r24, r22
    7bac:	90 e0       	ldi	r25, 0x00	; 0
    7bae:	0c 94 e6 75 	jmp	0xebcc	; 0xebcc <putchar>
    7bb2:	08 95       	ret

00007bb4 <bin2num>:
    7bb4:	a0 e0       	ldi	r26, 0x00	; 0
    7bb6:	b0 e0       	ldi	r27, 0x00	; 0
    7bb8:	e0 ee       	ldi	r30, 0xE0	; 224
    7bba:	fd e3       	ldi	r31, 0x3D	; 61
    7bbc:	0c 94 6d e6 	jmp	0x1ccda	; 0x1ccda <__prologue_saves__+0xe>
    7bc0:	ea 01       	movw	r28, r20
    7bc2:	53 e0       	ldi	r21, 0x03	; 3
    7bc4:	ee 0c       	add	r14, r14
    7bc6:	ff 1c       	adc	r15, r15
    7bc8:	5a 95       	dec	r21
    7bca:	e1 f7       	brne	.-8      	; 0x7bc4 <bin2num+0x10>
    7bcc:	fc 01       	movw	r30, r24
    7bce:	af 01       	movw	r20, r30
    7bd0:	48 1b       	sub	r20, r24
    7bd2:	59 0b       	sbc	r21, r25
    7bd4:	c4 17       	cp	r28, r20
    7bd6:	d5 07       	cpc	r29, r21
    7bd8:	14 f0       	brlt	.+4      	; 0x7bde <bin2num+0x2a>
    7bda:	11 92       	st	Z+, r1
    7bdc:	f8 cf       	rjmp	.-16     	; 0x7bce <bin2num+0x1a>
    7bde:	41 e0       	ldi	r20, 0x01	; 1
    7be0:	e4 1a       	sub	r14, r20
    7be2:	f1 08       	sbc	r15, r1
    7be4:	5b 01       	movw	r10, r22
    7be6:	42 e0       	ldi	r20, 0x02	; 2
    7be8:	a4 1a       	sub	r10, r20
    7bea:	b1 08       	sbc	r11, r1
    7bec:	f7 fc       	sbrc	r15, 7
    7bee:	3b c0       	rjmp	.+118    	; 0x7c66 <bin2num+0xb2>
    7bf0:	f7 01       	movw	r30, r14
    7bf2:	43 e0       	ldi	r20, 0x03	; 3
    7bf4:	f5 95       	asr	r31
    7bf6:	e7 95       	ror	r30
    7bf8:	4a 95       	dec	r20
    7bfa:	e1 f7       	brne	.-8      	; 0x7bf4 <bin2num+0x40>
    7bfc:	e0 0f       	add	r30, r16
    7bfe:	f1 1f       	adc	r31, r17
    7c00:	40 81       	ld	r20, Z
    7c02:	50 e0       	ldi	r21, 0x00	; 0
    7c04:	f7 01       	movw	r30, r14
    7c06:	e7 70       	andi	r30, 0x07	; 7
    7c08:	ff 27       	eor	r31, r31
    7c0a:	02 c0       	rjmp	.+4      	; 0x7c10 <bin2num+0x5c>
    7c0c:	55 95       	asr	r21
    7c0e:	47 95       	ror	r20
    7c10:	ea 95       	dec	r30
    7c12:	e2 f7       	brpl	.-8      	; 0x7c0c <bin2num+0x58>
    7c14:	41 70       	andi	r20, 0x01	; 1
    7c16:	55 27       	eor	r21, r21
    7c18:	dc 01       	movw	r26, r24
    7c1a:	e0 e0       	ldi	r30, 0x00	; 0
    7c1c:	f0 e0       	ldi	r31, 0x00	; 0
    7c1e:	ec 17       	cp	r30, r28
    7c20:	fd 07       	cpc	r31, r29
    7c22:	ec f4       	brge	.+58     	; 0x7c5e <bin2num+0xaa>
    7c24:	ea 15       	cp	r30, r10
    7c26:	fb 05       	cpc	r31, r11
    7c28:	4c f0       	brlt	.+18     	; 0x7c3c <bin2num+0x88>
    7c2a:	dc 01       	movw	r26, r24
    7c2c:	ae 0f       	add	r26, r30
    7c2e:	bf 1f       	adc	r27, r31
    7c30:	1c 92       	st	X, r1
    7c32:	41 e0       	ldi	r20, 0x01	; 1
    7c34:	e4 1a       	sub	r14, r20
    7c36:	f1 08       	sbc	r15, r1
    7c38:	ef 01       	movw	r28, r30
    7c3a:	d8 cf       	rjmp	.-80     	; 0x7bec <bin2num+0x38>
    7c3c:	9c 90       	ld	r9, X
    7c3e:	99 0c       	add	r9, r9
    7c40:	94 2a       	or	r9, r20
    7c42:	49 2d       	mov	r20, r9
    7c44:	50 e0       	ldi	r21, 0x00	; 0
    7c46:	42 17       	cp	r20, r18
    7c48:	53 07       	cpc	r21, r19
    7c4a:	24 f0       	brlt	.+8      	; 0x7c54 <bin2num+0xa0>
    7c4c:	92 1a       	sub	r9, r18
    7c4e:	41 e0       	ldi	r20, 0x01	; 1
    7c50:	50 e0       	ldi	r21, 0x00	; 0
    7c52:	02 c0       	rjmp	.+4      	; 0x7c58 <bin2num+0xa4>
    7c54:	40 e0       	ldi	r20, 0x00	; 0
    7c56:	50 e0       	ldi	r21, 0x00	; 0
    7c58:	9d 92       	st	X+, r9
    7c5a:	31 96       	adiw	r30, 0x01	; 1
    7c5c:	e0 cf       	rjmp	.-64     	; 0x7c1e <bin2num+0x6a>
    7c5e:	41 15       	cp	r20, r1
    7c60:	51 05       	cpc	r21, r1
    7c62:	01 f7       	brne	.-64     	; 0x7c24 <bin2num+0x70>
    7c64:	e2 cf       	rjmp	.-60     	; 0x7c2a <bin2num+0x76>
    7c66:	fc 01       	movw	r30, r24
    7c68:	9f 01       	movw	r18, r30
    7c6a:	28 1b       	sub	r18, r24
    7c6c:	39 0b       	sbc	r19, r25
    7c6e:	2c 17       	cp	r18, r28
    7c70:	3d 07       	cpc	r19, r29
    7c72:	4c f4       	brge	.+18     	; 0x7c86 <bin2num+0xd2>
    7c74:	20 81       	ld	r18, Z
    7c76:	2a 30       	cpi	r18, 0x0A	; 10
    7c78:	10 f4       	brcc	.+4      	; 0x7c7e <bin2num+0xca>
    7c7a:	20 5d       	subi	r18, 0xD0	; 208
    7c7c:	01 c0       	rjmp	.+2      	; 0x7c80 <bin2num+0xcc>
    7c7e:	29 5a       	subi	r18, 0xA9	; 169
    7c80:	20 83       	st	Z, r18
    7c82:	31 96       	adiw	r30, 0x01	; 1
    7c84:	f1 cf       	rjmp	.-30     	; 0x7c68 <bin2num+0xb4>
    7c86:	9e 01       	movw	r18, r28
    7c88:	d7 ff       	sbrs	r29, 7
    7c8a:	02 c0       	rjmp	.+4      	; 0x7c90 <bin2num+0xdc>
    7c8c:	20 e0       	ldi	r18, 0x00	; 0
    7c8e:	30 e0       	ldi	r19, 0x00	; 0
    7c90:	c1 14       	cp	r12, r1
    7c92:	d1 04       	cpc	r13, r1
    7c94:	61 f0       	breq	.+24     	; 0x7cae <bin2num+0xfa>
    7c96:	61 50       	subi	r22, 0x01	; 1
    7c98:	71 09       	sbc	r23, r1
    7c9a:	26 17       	cp	r18, r22
    7c9c:	37 07       	cpc	r19, r23
    7c9e:	3c f4       	brge	.+14     	; 0x7cae <bin2num+0xfa>
    7ca0:	fc 01       	movw	r30, r24
    7ca2:	e2 0f       	add	r30, r18
    7ca4:	f3 1f       	adc	r31, r19
    7ca6:	c0 82       	st	Z, r12
    7ca8:	21 96       	adiw	r28, 0x01	; 1
    7caa:	2f 5f       	subi	r18, 0xFF	; 255
    7cac:	3f 4f       	sbci	r19, 0xFF	; 255
    7cae:	fc 01       	movw	r30, r24
    7cb0:	e2 0f       	add	r30, r18
    7cb2:	f3 1f       	adc	r31, r19
    7cb4:	10 82       	st	Z, r1
    7cb6:	0e 94 1a 31 	call	0x6234	; 0x6234 <reverse>
    7cba:	ce 01       	movw	r24, r28
    7cbc:	cd b7       	in	r28, 0x3d	; 61
    7cbe:	de b7       	in	r29, 0x3e	; 62
    7cc0:	eb e0       	ldi	r30, 0x0B	; 11
    7cc2:	0c 94 89 e6 	jmp	0x1cd12	; 0x1cd12 <__epilogue_restores__+0xe>

00007cc6 <pch>:
    7cc6:	fc 01       	movw	r30, r24
    7cc8:	22 81       	ldd	r18, Z+2	; 0x02
    7cca:	33 81       	ldd	r19, Z+3	; 0x03
    7ccc:	44 81       	ldd	r20, Z+4	; 0x04
    7cce:	55 81       	ldd	r21, Z+5	; 0x05
    7cd0:	80 81       	ld	r24, Z
    7cd2:	91 81       	ldd	r25, Z+1	; 0x01
    7cd4:	24 17       	cp	r18, r20
    7cd6:	35 07       	cpc	r19, r21
    7cd8:	54 f4       	brge	.+20     	; 0x7cee <pch+0x28>
    7cda:	a9 01       	movw	r20, r18
    7cdc:	4f 5f       	subi	r20, 0xFF	; 255
    7cde:	5f 4f       	sbci	r21, 0xFF	; 255
    7ce0:	53 83       	std	Z+3, r21	; 0x03
    7ce2:	42 83       	std	Z+2, r20	; 0x02
    7ce4:	dc 01       	movw	r26, r24
    7ce6:	a2 0f       	add	r26, r18
    7ce8:	b3 1f       	adc	r27, r19
    7cea:	6c 93       	st	X, r22
    7cec:	04 c0       	rjmp	.+8      	; 0x7cf6 <pch+0x30>
    7cee:	dc 01       	movw	r26, r24
    7cf0:	a2 0f       	add	r26, r18
    7cf2:	b3 1f       	adc	r27, r19
    7cf4:	1c 92       	st	X, r1
    7cf6:	82 81       	ldd	r24, Z+2	; 0x02
    7cf8:	93 81       	ldd	r25, Z+3	; 0x03
    7cfa:	08 95       	ret

00007cfc <p_ntoa>:
    7cfc:	af 92       	push	r10
    7cfe:	cf 92       	push	r12
    7d00:	df 92       	push	r13
    7d02:	ef 92       	push	r14
    7d04:	ff 92       	push	r15
    7d06:	0f 93       	push	r16
    7d08:	1f 93       	push	r17
    7d0a:	cf 93       	push	r28
    7d0c:	df 93       	push	r29
    7d0e:	dc 01       	movw	r26, r24
    7d10:	eb 01       	movw	r28, r22
    7d12:	fa 01       	movw	r30, r20
    7d14:	b9 01       	movw	r22, r18
    7d16:	98 01       	movw	r18, r16
    7d18:	a6 01       	movw	r20, r12
    7d1a:	9a 2d       	mov	r25, r10
    7d1c:	a5 fa       	bst	r10, 5
    7d1e:	cc 24       	eor	r12, r12
    7d20:	c0 f8       	bld	r12, 0
    7d22:	a6 fc       	sbrc	r10, 6
    7d24:	07 c0       	rjmp	.+14     	; 0x7d34 <p_ntoa+0x38>
    7d26:	a2 fc       	sbrc	r10, 2
    7d28:	08 c0       	rjmp	.+16     	; 0x7d3a <p_ntoa+0x3e>
    7d2a:	a4 fe       	sbrs	r10, 4
    7d2c:	09 c0       	rjmp	.+18     	; 0x7d40 <p_ntoa+0x44>
    7d2e:	00 e2       	ldi	r16, 0x20	; 32
    7d30:	10 e0       	ldi	r17, 0x00	; 0
    7d32:	08 c0       	rjmp	.+16     	; 0x7d44 <p_ntoa+0x48>
    7d34:	0d e2       	ldi	r16, 0x2D	; 45
    7d36:	10 e0       	ldi	r17, 0x00	; 0
    7d38:	05 c0       	rjmp	.+10     	; 0x7d44 <p_ntoa+0x48>
    7d3a:	0b e2       	ldi	r16, 0x2B	; 43
    7d3c:	10 e0       	ldi	r17, 0x00	; 0
    7d3e:	02 c0       	rjmp	.+4      	; 0x7d44 <p_ntoa+0x48>
    7d40:	00 e0       	ldi	r16, 0x00	; 0
    7d42:	10 e0       	ldi	r17, 0x00	; 0
    7d44:	95 ff       	sbrs	r25, 5
    7d46:	04 c0       	rjmp	.+8      	; 0x7d50 <p_ntoa+0x54>
    7d48:	89 2f       	mov	r24, r25
    7d4a:	8a 70       	andi	r24, 0x0A	; 10
    7d4c:	09 f0       	breq	.+2      	; 0x7d50 <p_ntoa+0x54>
    7d4e:	c1 2c       	mov	r12, r1
    7d50:	c0 fa       	bst	r12, 0
    7d52:	95 f9       	bld	r25, 5
    7d54:	89 2f       	mov	r24, r25
    7d56:	82 70       	andi	r24, 0x02	; 2
    7d58:	c8 2e       	mov	r12, r24
    7d5a:	91 fd       	sbrc	r25, 1
    7d5c:	02 c0       	rjmp	.+4      	; 0x7d62 <p_ntoa+0x66>
    7d5e:	40 e0       	ldi	r20, 0x00	; 0
    7d60:	50 e0       	ldi	r21, 0x00	; 0
    7d62:	89 2f       	mov	r24, r25
    7d64:	83 70       	andi	r24, 0x03	; 3
    7d66:	11 f4       	brne	.+4      	; 0x7d6c <p_ntoa+0x70>
    7d68:	41 e0       	ldi	r20, 0x01	; 1
    7d6a:	50 e0       	ldi	r21, 0x00	; 0
    7d6c:	90 ff       	sbrs	r25, 0
    7d6e:	0c c0       	rjmp	.+24     	; 0x7d88 <p_ntoa+0x8c>
    7d70:	95 fd       	sbrc	r25, 5
    7d72:	05 c0       	rjmp	.+10     	; 0x7d7e <p_ntoa+0x82>
    7d74:	c1 10       	cpse	r12, r1
    7d76:	08 c0       	rjmp	.+16     	; 0x7d88 <p_ntoa+0x8c>
    7d78:	41 e0       	ldi	r20, 0x01	; 1
    7d7a:	50 e0       	ldi	r21, 0x00	; 0
    7d7c:	05 c0       	rjmp	.+10     	; 0x7d88 <p_ntoa+0x8c>
    7d7e:	94 75       	andi	r25, 0x54	; 84
    7d80:	a7 01       	movw	r20, r14
    7d82:	11 f0       	breq	.+4      	; 0x7d88 <p_ntoa+0x8c>
    7d84:	41 50       	subi	r20, 0x01	; 1
    7d86:	51 09       	sbc	r21, r1
    7d88:	68 01       	movw	r12, r16
    7d8a:	7e 01       	movw	r14, r28
    7d8c:	8d 01       	movw	r16, r26
    7d8e:	cf 01       	movw	r24, r30
    7d90:	11 df       	rcall	.-478    	; 0x7bb4 <bin2num>
    7d92:	df 91       	pop	r29
    7d94:	cf 91       	pop	r28
    7d96:	1f 91       	pop	r17
    7d98:	0f 91       	pop	r16
    7d9a:	ff 90       	pop	r15
    7d9c:	ef 90       	pop	r14
    7d9e:	df 90       	pop	r13
    7da0:	cf 90       	pop	r12
    7da2:	af 90       	pop	r10
    7da4:	08 95       	ret

00007da6 <p_ftoa>:
    7da6:	aa e0       	ldi	r26, 0x0A	; 10
    7da8:	b0 e0       	ldi	r27, 0x00	; 0
    7daa:	e9 ed       	ldi	r30, 0xD9	; 217
    7dac:	fe e3       	ldi	r31, 0x3E	; 62
    7dae:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
    7db2:	4b 01       	movw	r8, r22
    7db4:	5c 01       	movw	r10, r24
    7db6:	1a 01       	movw	r2, r20
    7db8:	28 01       	movw	r4, r16
    7dba:	c6 fa       	bst	r12, 6
    7dbc:	11 27       	eor	r17, r17
    7dbe:	10 f9       	bld	r17, 0
    7dc0:	5a 83       	std	Y+2, r21	; 0x02
    7dc2:	49 83       	std	Y+1, r20	; 0x01
    7dc4:	1c 82       	std	Y+4, r1	; 0x04
    7dc6:	1b 82       	std	Y+3, r1	; 0x03
    7dc8:	21 50       	subi	r18, 0x01	; 1
    7dca:	31 09       	sbc	r19, r1
    7dcc:	3e 83       	std	Y+6, r19	; 0x06
    7dce:	2d 83       	std	Y+5, r18	; 0x05
    7dd0:	fa 01       	movw	r30, r20
    7dd2:	10 82       	st	Z, r1
    7dd4:	20 e0       	ldi	r18, 0x00	; 0
    7dd6:	30 e0       	ldi	r19, 0x00	; 0
    7dd8:	a9 01       	movw	r20, r18
    7dda:	0e 94 24 e7 	call	0x1ce48	; 0x1ce48 <__cmpsf2>
    7dde:	87 ff       	sbrs	r24, 7
    7de0:	05 c0       	rjmp	.+10     	; 0x7dec <p_ftoa+0x46>
    7de2:	b7 fa       	bst	r11, 7
    7de4:	b0 94       	com	r11
    7de6:	b7 f8       	bld	r11, 7
    7de8:	b0 94       	com	r11
    7dea:	11 e0       	ldi	r17, 0x01	; 1
    7dec:	10 fb       	bst	r17, 0
    7dee:	c6 f8       	bld	r12, 6
    7df0:	c6 fe       	sbrs	r12, 6
    7df2:	02 c0       	rjmp	.+4      	; 0x7df8 <p_ftoa+0x52>
    7df4:	6d e2       	ldi	r22, 0x2D	; 45
    7df6:	07 c0       	rjmp	.+14     	; 0x7e06 <p_ftoa+0x60>
    7df8:	c2 fe       	sbrs	r12, 2
    7dfa:	02 c0       	rjmp	.+4      	; 0x7e00 <p_ftoa+0x5a>
    7dfc:	6b e2       	ldi	r22, 0x2B	; 43
    7dfe:	03 c0       	rjmp	.+6      	; 0x7e06 <p_ftoa+0x60>
    7e00:	c4 fe       	sbrs	r12, 4
    7e02:	04 c0       	rjmp	.+8      	; 0x7e0c <p_ftoa+0x66>
    7e04:	60 e2       	ldi	r22, 0x20	; 32
    7e06:	ce 01       	movw	r24, r28
    7e08:	01 96       	adiw	r24, 0x01	; 1
    7e0a:	5d df       	rcall	.-326    	; 0x7cc6 <pch>
    7e0c:	37 01       	movw	r6, r14
    7e0e:	f7 fe       	sbrs	r15, 7
    7e10:	02 c0       	rjmp	.+4      	; 0x7e16 <p_ftoa+0x70>
    7e12:	61 2c       	mov	r6, r1
    7e14:	71 2c       	mov	r7, r1
    7e16:	20 e0       	ldi	r18, 0x00	; 0
    7e18:	30 e0       	ldi	r19, 0x00	; 0
    7e1a:	a9 01       	movw	r20, r18
    7e1c:	c5 01       	movw	r24, r10
    7e1e:	b4 01       	movw	r22, r8
    7e20:	0e 94 24 e7 	call	0x1ce48	; 0x1ce48 <__cmpsf2>
    7e24:	88 23       	and	r24, r24
    7e26:	d1 f1       	breq	.+116    	; 0x7e9c <p_ftoa+0xf6>
    7e28:	c1 fe       	sbrs	r12, 1
    7e2a:	11 c0       	rjmp	.+34     	; 0x7e4e <p_ftoa+0xa8>
    7e2c:	83 01       	movw	r16, r6
    7e2e:	60 e0       	ldi	r22, 0x00	; 0
    7e30:	70 e0       	ldi	r23, 0x00	; 0
    7e32:	80 e0       	ldi	r24, 0x00	; 0
    7e34:	9f e3       	ldi	r25, 0x3F	; 63
    7e36:	01 15       	cp	r16, r1
    7e38:	11 05       	cpc	r17, r1
    7e3a:	69 f0       	breq	.+26     	; 0x7e56 <p_ftoa+0xb0>
    7e3c:	20 e0       	ldi	r18, 0x00	; 0
    7e3e:	30 e0       	ldi	r19, 0x00	; 0
    7e40:	40 e2       	ldi	r20, 0x20	; 32
    7e42:	51 e4       	ldi	r21, 0x41	; 65
    7e44:	0e 94 28 e7 	call	0x1ce50	; 0x1ce50 <__divsf3>
    7e48:	01 50       	subi	r16, 0x01	; 1
    7e4a:	11 09       	sbc	r17, r1
    7e4c:	f4 cf       	rjmp	.-24     	; 0x7e36 <p_ftoa+0x90>
    7e4e:	60 e0       	ldi	r22, 0x00	; 0
    7e50:	70 e0       	ldi	r23, 0x00	; 0
    7e52:	80 e0       	ldi	r24, 0x00	; 0
    7e54:	9f e3       	ldi	r25, 0x3F	; 63
    7e56:	9b 01       	movw	r18, r22
    7e58:	ac 01       	movw	r20, r24
    7e5a:	c5 01       	movw	r24, r10
    7e5c:	b4 01       	movw	r22, r8
    7e5e:	0e 94 c0 e6 	call	0x1cd80	; 0x1cd80 <__addsf3>
    7e62:	4b 01       	movw	r8, r22
    7e64:	5c 01       	movw	r10, r24
    7e66:	ee 24       	eor	r14, r14
    7e68:	e3 94       	inc	r14
    7e6a:	f1 2c       	mov	r15, r1
    7e6c:	20 e0       	ldi	r18, 0x00	; 0
    7e6e:	30 e0       	ldi	r19, 0x00	; 0
    7e70:	40 e2       	ldi	r20, 0x20	; 32
    7e72:	51 e4       	ldi	r21, 0x41	; 65
    7e74:	c5 01       	movw	r24, r10
    7e76:	b4 01       	movw	r22, r8
    7e78:	0e 94 73 e8 	call	0x1d0e6	; 0x1d0e6 <__gesf2>
    7e7c:	87 fd       	sbrc	r24, 7
    7e7e:	11 c0       	rjmp	.+34     	; 0x7ea2 <p_ftoa+0xfc>
    7e80:	ff ef       	ldi	r31, 0xFF	; 255
    7e82:	ef 1a       	sub	r14, r31
    7e84:	ff 0a       	sbc	r15, r31
    7e86:	20 e0       	ldi	r18, 0x00	; 0
    7e88:	30 e0       	ldi	r19, 0x00	; 0
    7e8a:	40 e2       	ldi	r20, 0x20	; 32
    7e8c:	51 e4       	ldi	r21, 0x41	; 65
    7e8e:	c5 01       	movw	r24, r10
    7e90:	b4 01       	movw	r22, r8
    7e92:	0e 94 28 e7 	call	0x1ce50	; 0x1ce50 <__divsf3>
    7e96:	4b 01       	movw	r8, r22
    7e98:	5c 01       	movw	r10, r24
    7e9a:	e8 cf       	rjmp	.-48     	; 0x7e6c <p_ftoa+0xc6>
    7e9c:	ee 24       	eor	r14, r14
    7e9e:	e3 94       	inc	r14
    7ea0:	f1 2c       	mov	r15, r1
    7ea2:	8c 2d       	mov	r24, r12
    7ea4:	88 72       	andi	r24, 0x28	; 40
    7ea6:	80 32       	cpi	r24, 0x20	; 32
    7ea8:	c1 f4       	brne	.+48     	; 0x7eda <p_ftoa+0x134>
    7eaa:	82 01       	movw	r16, r4
    7eac:	0e 19       	sub	r16, r14
    7eae:	1f 09       	sbc	r17, r15
    7eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    7eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    7eb4:	08 1b       	sub	r16, r24
    7eb6:	19 0b       	sbc	r17, r25
    7eb8:	c1 fe       	sbrs	r12, 1
    7eba:	07 c0       	rjmp	.+14     	; 0x7eca <p_ftoa+0x124>
    7ebc:	61 14       	cp	r6, r1
    7ebe:	71 04       	cpc	r7, r1
    7ec0:	21 f0       	breq	.+8      	; 0x7eca <p_ftoa+0x124>
    7ec2:	06 19       	sub	r16, r6
    7ec4:	17 09       	sbc	r17, r7
    7ec6:	01 50       	subi	r16, 0x01	; 1
    7ec8:	11 09       	sbc	r17, r1
    7eca:	10 16       	cp	r1, r16
    7ecc:	11 06       	cpc	r1, r17
    7ece:	2c f4       	brge	.+10     	; 0x7eda <p_ftoa+0x134>
    7ed0:	60 e3       	ldi	r22, 0x30	; 48
    7ed2:	ce 01       	movw	r24, r28
    7ed4:	01 96       	adiw	r24, 0x01	; 1
    7ed6:	f7 de       	rcall	.-530    	; 0x7cc6 <pch>
    7ed8:	f6 cf       	rjmp	.-20     	; 0x7ec6 <p_ftoa+0x120>
    7eda:	c5 01       	movw	r24, r10
    7edc:	b4 01       	movw	r22, r8
    7ede:	0e 94 90 e7 	call	0x1cf20	; 0x1cf20 <__fixsfsi>
    7ee2:	6f 83       	std	Y+7, r22	; 0x07
    7ee4:	78 87       	std	Y+8, r23	; 0x08
    7ee6:	89 87       	std	Y+9, r24	; 0x09
    7ee8:	9a 87       	std	Y+10, r25	; 0x0a
    7eea:	6f 81       	ldd	r22, Y+7	; 0x07
    7eec:	60 5d       	subi	r22, 0xD0	; 208
    7eee:	ce 01       	movw	r24, r28
    7ef0:	01 96       	adiw	r24, 0x01	; 1
    7ef2:	e9 de       	rcall	.-558    	; 0x7cc6 <pch>
    7ef4:	2f 81       	ldd	r18, Y+7	; 0x07
    7ef6:	38 85       	ldd	r19, Y+8	; 0x08
    7ef8:	b9 01       	movw	r22, r18
    7efa:	33 0f       	add	r19, r19
    7efc:	88 0b       	sbc	r24, r24
    7efe:	99 0b       	sbc	r25, r25
    7f00:	0e 94 c3 e7 	call	0x1cf86	; 0x1cf86 <__floatsisf>
    7f04:	9b 01       	movw	r18, r22
    7f06:	ac 01       	movw	r20, r24
    7f08:	c5 01       	movw	r24, r10
    7f0a:	b4 01       	movw	r22, r8
    7f0c:	0e 94 bf e6 	call	0x1cd7e	; 0x1cd7e <__subsf3>
    7f10:	31 e0       	ldi	r19, 0x01	; 1
    7f12:	e3 1a       	sub	r14, r19
    7f14:	f1 08       	sbc	r15, r1
    7f16:	20 e0       	ldi	r18, 0x00	; 0
    7f18:	30 e0       	ldi	r19, 0x00	; 0
    7f1a:	40 e2       	ldi	r20, 0x20	; 32
    7f1c:	51 e4       	ldi	r21, 0x41	; 65
    7f1e:	0e 94 77 e8 	call	0x1d0ee	; 0x1d0ee <__mulsf3>
    7f22:	4b 01       	movw	r8, r22
    7f24:	5c 01       	movw	r10, r24
    7f26:	e1 14       	cp	r14, r1
    7f28:	f1 04       	cpc	r15, r1
    7f2a:	b9 f6       	brne	.-82     	; 0x7eda <p_ftoa+0x134>
    7f2c:	c1 fc       	sbrc	r12, 1
    7f2e:	10 c0       	rjmp	.+32     	; 0x7f50 <p_ftoa+0x1aa>
    7f30:	60 e0       	ldi	r22, 0x00	; 0
    7f32:	ce 01       	movw	r24, r28
    7f34:	01 96       	adiw	r24, 0x01	; 1
    7f36:	c7 de       	rcall	.-626    	; 0x7cc6 <pch>
    7f38:	f1 01       	movw	r30, r2
    7f3a:	01 90       	ld	r0, Z+
    7f3c:	00 20       	and	r0, r0
    7f3e:	e9 f7       	brne	.-6      	; 0x7f3a <p_ftoa+0x194>
    7f40:	31 97       	sbiw	r30, 0x01	; 1
    7f42:	cf 01       	movw	r24, r30
    7f44:	82 19       	sub	r24, r2
    7f46:	93 09       	sbc	r25, r3
    7f48:	2a 96       	adiw	r28, 0x0a	; 10
    7f4a:	e2 e1       	ldi	r30, 0x12	; 18
    7f4c:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>
    7f50:	61 14       	cp	r6, r1
    7f52:	71 04       	cpc	r7, r1
    7f54:	69 f3       	breq	.-38     	; 0x7f30 <p_ftoa+0x18a>
    7f56:	6e e2       	ldi	r22, 0x2E	; 46
    7f58:	ce 01       	movw	r24, r28
    7f5a:	01 96       	adiw	r24, 0x01	; 1
    7f5c:	b4 de       	rcall	.-664    	; 0x7cc6 <pch>
    7f5e:	c5 01       	movw	r24, r10
    7f60:	b4 01       	movw	r22, r8
    7f62:	0e 94 90 e7 	call	0x1cf20	; 0x1cf20 <__fixsfsi>
    7f66:	6b 01       	movw	r12, r22
    7f68:	7c 01       	movw	r14, r24
    7f6a:	07 2e       	mov	r0, r23
    7f6c:	00 0c       	add	r0, r0
    7f6e:	88 0b       	sbc	r24, r24
    7f70:	99 0b       	sbc	r25, r25
    7f72:	0e 94 c3 e7 	call	0x1cf86	; 0x1cf86 <__floatsisf>
    7f76:	9b 01       	movw	r18, r22
    7f78:	ac 01       	movw	r20, r24
    7f7a:	c5 01       	movw	r24, r10
    7f7c:	b4 01       	movw	r22, r8
    7f7e:	0e 94 bf e6 	call	0x1cd7e	; 0x1cd7e <__subsf3>
    7f82:	4b 01       	movw	r8, r22
    7f84:	5c 01       	movw	r10, r24
    7f86:	b6 01       	movw	r22, r12
    7f88:	60 5d       	subi	r22, 0xD0	; 208
    7f8a:	7f 4f       	sbci	r23, 0xFF	; 255
    7f8c:	ce 01       	movw	r24, r28
    7f8e:	01 96       	adiw	r24, 0x01	; 1
    7f90:	9a de       	rcall	.-716    	; 0x7cc6 <pch>
    7f92:	81 e0       	ldi	r24, 0x01	; 1
    7f94:	68 1a       	sub	r6, r24
    7f96:	71 08       	sbc	r7, r1
    7f98:	20 e0       	ldi	r18, 0x00	; 0
    7f9a:	30 e0       	ldi	r19, 0x00	; 0
    7f9c:	40 e2       	ldi	r20, 0x20	; 32
    7f9e:	51 e4       	ldi	r21, 0x41	; 65
    7fa0:	c5 01       	movw	r24, r10
    7fa2:	b4 01       	movw	r22, r8
    7fa4:	0e 94 77 e8 	call	0x1d0ee	; 0x1d0ee <__mulsf3>
    7fa8:	4b 01       	movw	r8, r22
    7faa:	5c 01       	movw	r10, r24
    7fac:	61 14       	cp	r6, r1
    7fae:	71 04       	cpc	r7, r1
    7fb0:	b1 f6       	brne	.-84     	; 0x7f5e <p_ftoa+0x1b8>
    7fb2:	be cf       	rjmp	.-132    	; 0x7f30 <p_ftoa+0x18a>

00007fb4 <p_etoa>:
    7fb4:	a3 e1       	ldi	r26, 0x13	; 19
    7fb6:	b0 e0       	ldi	r27, 0x00	; 0
    7fb8:	e0 ee       	ldi	r30, 0xE0	; 224
    7fba:	ff e3       	ldi	r31, 0x3F	; 63
    7fbc:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
    7fc0:	4b 01       	movw	r8, r22
    7fc2:	5c 01       	movw	r10, r24
    7fc4:	59 8b       	std	Y+17, r21	; 0x11
    7fc6:	48 8b       	std	Y+16, r20	; 0x10
    7fc8:	1b 8b       	std	Y+19, r17	; 0x13
    7fca:	0a 8b       	std	Y+18, r16	; 0x12
    7fcc:	3c 2c       	mov	r3, r12
    7fce:	c6 fa       	bst	r12, 6
    7fd0:	11 27       	eor	r17, r17
    7fd2:	10 f9       	bld	r17, 0
    7fd4:	59 87       	std	Y+9, r21	; 0x09
    7fd6:	48 87       	std	Y+8, r20	; 0x08
    7fd8:	1b 86       	std	Y+11, r1	; 0x0b
    7fda:	1a 86       	std	Y+10, r1	; 0x0a
    7fdc:	21 50       	subi	r18, 0x01	; 1
    7fde:	31 09       	sbc	r19, r1
    7fe0:	3d 87       	std	Y+13, r19	; 0x0d
    7fe2:	2c 87       	std	Y+12, r18	; 0x0c
    7fe4:	fa 01       	movw	r30, r20
    7fe6:	10 82       	st	Z, r1
    7fe8:	20 e0       	ldi	r18, 0x00	; 0
    7fea:	30 e0       	ldi	r19, 0x00	; 0
    7fec:	a9 01       	movw	r20, r18
    7fee:	0e 94 24 e7 	call	0x1ce48	; 0x1ce48 <__cmpsf2>
    7ff2:	87 ff       	sbrs	r24, 7
    7ff4:	05 c0       	rjmp	.+10     	; 0x8000 <p_etoa+0x4c>
    7ff6:	b7 fa       	bst	r11, 7
    7ff8:	b0 94       	com	r11
    7ffa:	b7 f8       	bld	r11, 7
    7ffc:	b0 94       	com	r11
    7ffe:	11 e0       	ldi	r17, 0x01	; 1
    8000:	10 fb       	bst	r17, 0
    8002:	36 f8       	bld	r3, 6
    8004:	36 fe       	sbrs	r3, 6
    8006:	02 c0       	rjmp	.+4      	; 0x800c <p_etoa+0x58>
    8008:	6d e2       	ldi	r22, 0x2D	; 45
    800a:	07 c0       	rjmp	.+14     	; 0x801a <p_etoa+0x66>
    800c:	32 fe       	sbrs	r3, 2
    800e:	02 c0       	rjmp	.+4      	; 0x8014 <p_etoa+0x60>
    8010:	6b e2       	ldi	r22, 0x2B	; 43
    8012:	03 c0       	rjmp	.+6      	; 0x801a <p_etoa+0x66>
    8014:	34 fe       	sbrs	r3, 4
    8016:	04 c0       	rjmp	.+8      	; 0x8020 <p_etoa+0x6c>
    8018:	60 e2       	ldi	r22, 0x20	; 32
    801a:	ce 01       	movw	r24, r28
    801c:	08 96       	adiw	r24, 0x08	; 8
    801e:	53 de       	rcall	.-858    	; 0x7cc6 <pch>
    8020:	37 01       	movw	r6, r14
    8022:	f7 fe       	sbrs	r15, 7
    8024:	02 c0       	rjmp	.+4      	; 0x802a <p_etoa+0x76>
    8026:	61 2c       	mov	r6, r1
    8028:	71 2c       	mov	r7, r1
    802a:	1f 86       	std	Y+15, r1	; 0x0f
    802c:	1e 86       	std	Y+14, r1	; 0x0e
    802e:	20 e0       	ldi	r18, 0x00	; 0
    8030:	30 e0       	ldi	r19, 0x00	; 0
    8032:	a9 01       	movw	r20, r18
    8034:	c5 01       	movw	r24, r10
    8036:	b4 01       	movw	r22, r8
    8038:	0e 94 24 e7 	call	0x1ce48	; 0x1ce48 <__cmpsf2>
    803c:	f3 2d       	mov	r31, r3
    803e:	f2 70       	andi	r31, 0x02	; 2
    8040:	2f 2e       	mov	r2, r31
    8042:	88 23       	and	r24, r24
    8044:	09 f4       	brne	.+2      	; 0x8048 <p_etoa+0x94>
    8046:	70 c0       	rjmp	.+224    	; 0x8128 <p_etoa+0x174>
    8048:	ff 23       	and	r31, r31
    804a:	b1 f0       	breq	.+44     	; 0x8078 <p_etoa+0xc4>
    804c:	83 01       	movw	r16, r6
    804e:	c1 2c       	mov	r12, r1
    8050:	d1 2c       	mov	r13, r1
    8052:	e1 2c       	mov	r14, r1
    8054:	2f e3       	ldi	r18, 0x3F	; 63
    8056:	f2 2e       	mov	r15, r18
    8058:	01 15       	cp	r16, r1
    805a:	11 05       	cpc	r17, r1
    805c:	91 f0       	breq	.+36     	; 0x8082 <p_etoa+0xce>
    805e:	20 e0       	ldi	r18, 0x00	; 0
    8060:	30 e0       	ldi	r19, 0x00	; 0
    8062:	40 e2       	ldi	r20, 0x20	; 32
    8064:	51 e4       	ldi	r21, 0x41	; 65
    8066:	c7 01       	movw	r24, r14
    8068:	b6 01       	movw	r22, r12
    806a:	0e 94 28 e7 	call	0x1ce50	; 0x1ce50 <__divsf3>
    806e:	6b 01       	movw	r12, r22
    8070:	7c 01       	movw	r14, r24
    8072:	01 50       	subi	r16, 0x01	; 1
    8074:	11 09       	sbc	r17, r1
    8076:	f0 cf       	rjmp	.-32     	; 0x8058 <p_etoa+0xa4>
    8078:	c1 2c       	mov	r12, r1
    807a:	d1 2c       	mov	r13, r1
    807c:	e1 2c       	mov	r14, r1
    807e:	9f e3       	ldi	r25, 0x3F	; 63
    8080:	f9 2e       	mov	r15, r25
    8082:	41 2c       	mov	r4, r1
    8084:	51 2c       	mov	r5, r1
    8086:	82 01       	movw	r16, r4
    8088:	01 50       	subi	r16, 0x01	; 1
    808a:	11 09       	sbc	r17, r1
    808c:	20 e0       	ldi	r18, 0x00	; 0
    808e:	30 e0       	ldi	r19, 0x00	; 0
    8090:	40 e8       	ldi	r20, 0x80	; 128
    8092:	5f e3       	ldi	r21, 0x3F	; 63
    8094:	c5 01       	movw	r24, r10
    8096:	b4 01       	movw	r22, r8
    8098:	0e 94 24 e7 	call	0x1ce48	; 0x1ce48 <__cmpsf2>
    809c:	87 ff       	sbrs	r24, 7
    809e:	0c c0       	rjmp	.+24     	; 0x80b8 <p_etoa+0x104>
    80a0:	20 e0       	ldi	r18, 0x00	; 0
    80a2:	30 e0       	ldi	r19, 0x00	; 0
    80a4:	40 e2       	ldi	r20, 0x20	; 32
    80a6:	51 e4       	ldi	r21, 0x41	; 65
    80a8:	c5 01       	movw	r24, r10
    80aa:	b4 01       	movw	r22, r8
    80ac:	0e 94 77 e8 	call	0x1d0ee	; 0x1d0ee <__mulsf3>
    80b0:	4b 01       	movw	r8, r22
    80b2:	5c 01       	movw	r10, r24
    80b4:	28 01       	movw	r4, r16
    80b6:	e7 cf       	rjmp	.-50     	; 0x8086 <p_etoa+0xd2>
    80b8:	82 01       	movw	r16, r4
    80ba:	0f 5f       	subi	r16, 0xFF	; 255
    80bc:	1f 4f       	sbci	r17, 0xFF	; 255
    80be:	20 e0       	ldi	r18, 0x00	; 0
    80c0:	30 e0       	ldi	r19, 0x00	; 0
    80c2:	40 e2       	ldi	r20, 0x20	; 32
    80c4:	51 e4       	ldi	r21, 0x41	; 65
    80c6:	c5 01       	movw	r24, r10
    80c8:	b4 01       	movw	r22, r8
    80ca:	0e 94 73 e8 	call	0x1d0e6	; 0x1d0e6 <__gesf2>
    80ce:	87 fd       	sbrc	r24, 7
    80d0:	0c c0       	rjmp	.+24     	; 0x80ea <p_etoa+0x136>
    80d2:	20 e0       	ldi	r18, 0x00	; 0
    80d4:	30 e0       	ldi	r19, 0x00	; 0
    80d6:	40 e2       	ldi	r20, 0x20	; 32
    80d8:	51 e4       	ldi	r21, 0x41	; 65
    80da:	c5 01       	movw	r24, r10
    80dc:	b4 01       	movw	r22, r8
    80de:	0e 94 28 e7 	call	0x1ce50	; 0x1ce50 <__divsf3>
    80e2:	4b 01       	movw	r8, r22
    80e4:	5c 01       	movw	r10, r24
    80e6:	28 01       	movw	r4, r16
    80e8:	e7 cf       	rjmp	.-50     	; 0x80b8 <p_etoa+0x104>
    80ea:	a7 01       	movw	r20, r14
    80ec:	96 01       	movw	r18, r12
    80ee:	c5 01       	movw	r24, r10
    80f0:	b4 01       	movw	r22, r8
    80f2:	0e 94 c0 e6 	call	0x1cd80	; 0x1cd80 <__addsf3>
    80f6:	4b 01       	movw	r8, r22
    80f8:	5c 01       	movw	r10, r24
    80fa:	82 01       	movw	r16, r4
    80fc:	2f ef       	ldi	r18, 0xFF	; 255
    80fe:	42 1a       	sub	r4, r18
    8100:	52 0a       	sbc	r5, r18
    8102:	20 e0       	ldi	r18, 0x00	; 0
    8104:	30 e0       	ldi	r19, 0x00	; 0
    8106:	40 e2       	ldi	r20, 0x20	; 32
    8108:	51 e4       	ldi	r21, 0x41	; 65
    810a:	0e 94 73 e8 	call	0x1d0e6	; 0x1d0e6 <__gesf2>
    810e:	87 fd       	sbrc	r24, 7
    8110:	09 c0       	rjmp	.+18     	; 0x8124 <p_etoa+0x170>
    8112:	20 e0       	ldi	r18, 0x00	; 0
    8114:	30 e0       	ldi	r19, 0x00	; 0
    8116:	40 e2       	ldi	r20, 0x20	; 32
    8118:	51 e4       	ldi	r21, 0x41	; 65
    811a:	c5 01       	movw	r24, r10
    811c:	b4 01       	movw	r22, r8
    811e:	0e 94 28 e7 	call	0x1ce50	; 0x1ce50 <__divsf3>
    8122:	e9 cf       	rjmp	.-46     	; 0x80f6 <p_etoa+0x142>
    8124:	0e 87       	std	Y+14, r16	; 0x0e
    8126:	1f 87       	std	Y+15, r17	; 0x0f
    8128:	85 e6       	ldi	r24, 0x65	; 101
    812a:	89 83       	std	Y+1, r24	; 0x01
    812c:	8e 85       	ldd	r24, Y+14	; 0x0e
    812e:	9f 85       	ldd	r25, Y+15	; 0x0f
    8130:	97 ff       	sbrs	r25, 7
    8132:	08 c0       	rjmp	.+16     	; 0x8144 <p_etoa+0x190>
    8134:	91 95       	neg	r25
    8136:	81 95       	neg	r24
    8138:	91 09       	sbc	r25, r1
    813a:	9f 87       	std	Y+15, r25	; 0x0f
    813c:	8e 87       	std	Y+14, r24	; 0x0e
    813e:	8d e2       	ldi	r24, 0x2D	; 45
    8140:	90 e0       	ldi	r25, 0x00	; 0
    8142:	02 c0       	rjmp	.+4      	; 0x8148 <p_etoa+0x194>
    8144:	8b e2       	ldi	r24, 0x2B	; 43
    8146:	90 e0       	ldi	r25, 0x00	; 0
    8148:	6c 01       	movw	r12, r24
    814a:	82 e0       	ldi	r24, 0x02	; 2
    814c:	e8 2e       	mov	r14, r24
    814e:	f1 2c       	mov	r15, r1
    8150:	8e 01       	movw	r16, r28
    8152:	02 5f       	subi	r16, 0xF2	; 242
    8154:	1f 4f       	sbci	r17, 0xFF	; 255
    8156:	2a e0       	ldi	r18, 0x0A	; 10
    8158:	30 e0       	ldi	r19, 0x00	; 0
    815a:	42 e0       	ldi	r20, 0x02	; 2
    815c:	50 e0       	ldi	r21, 0x00	; 0
    815e:	65 e0       	ldi	r22, 0x05	; 5
    8160:	70 e0       	ldi	r23, 0x00	; 0
    8162:	ce 01       	movw	r24, r28
    8164:	02 96       	adiw	r24, 0x02	; 2
    8166:	26 dd       	rcall	.-1460   	; 0x7bb4 <bin2num>
    8168:	9c 01       	movw	r18, r24
    816a:	93 2d       	mov	r25, r3
    816c:	98 72       	andi	r25, 0x28	; 40
    816e:	90 32       	cpi	r25, 0x20	; 32
    8170:	71 f0       	breq	.+28     	; 0x818e <p_etoa+0x1da>
    8172:	c5 01       	movw	r24, r10
    8174:	b4 01       	movw	r22, r8
    8176:	0e 94 90 e7 	call	0x1cf20	; 0x1cf20 <__fixsfsi>
    817a:	6b 01       	movw	r12, r22
    817c:	7c 01       	movw	r14, r24
    817e:	60 e3       	ldi	r22, 0x30	; 48
    8180:	6c 0d       	add	r22, r12
    8182:	ce 01       	movw	r24, r28
    8184:	08 96       	adiw	r24, 0x08	; 8
    8186:	9f dd       	rcall	.-1218   	; 0x7cc6 <pch>
    8188:	21 10       	cpse	r2, r1
    818a:	20 c0       	rjmp	.+64     	; 0x81cc <p_etoa+0x218>
    818c:	63 c0       	rjmp	.+198    	; 0x8254 <p_etoa+0x2a0>
    818e:	8a 85       	ldd	r24, Y+10	; 0x0a
    8190:	9b 85       	ldd	r25, Y+11	; 0x0b
    8192:	0a 89       	ldd	r16, Y+18	; 0x12
    8194:	1b 89       	ldd	r17, Y+19	; 0x13
    8196:	08 1b       	sub	r16, r24
    8198:	19 0b       	sbc	r17, r25
    819a:	22 20       	and	r2, r2
    819c:	41 f0       	breq	.+16     	; 0x81ae <p_etoa+0x1fa>
    819e:	61 14       	cp	r6, r1
    81a0:	71 04       	cpc	r7, r1
    81a2:	29 f0       	breq	.+10     	; 0x81ae <p_etoa+0x1fa>
    81a4:	06 19       	sub	r16, r6
    81a6:	17 09       	sbc	r17, r7
    81a8:	06 50       	subi	r16, 0x06	; 6
    81aa:	11 09       	sbc	r17, r1
    81ac:	02 c0       	rjmp	.+4      	; 0x81b2 <p_etoa+0x1fe>
    81ae:	05 50       	subi	r16, 0x05	; 5
    81b0:	11 09       	sbc	r17, r1
    81b2:	24 30       	cpi	r18, 0x04	; 4
    81b4:	31 05       	cpc	r19, r1
    81b6:	14 f0       	brlt	.+4      	; 0x81bc <p_etoa+0x208>
    81b8:	01 50       	subi	r16, 0x01	; 1
    81ba:	11 09       	sbc	r17, r1
    81bc:	10 16       	cp	r1, r16
    81be:	11 06       	cpc	r1, r17
    81c0:	c4 f6       	brge	.-80     	; 0x8172 <p_etoa+0x1be>
    81c2:	60 e3       	ldi	r22, 0x30	; 48
    81c4:	ce 01       	movw	r24, r28
    81c6:	08 96       	adiw	r24, 0x08	; 8
    81c8:	7e dd       	rcall	.-1284   	; 0x7cc6 <pch>
    81ca:	f6 cf       	rjmp	.-20     	; 0x81b8 <p_etoa+0x204>
    81cc:	61 14       	cp	r6, r1
    81ce:	71 04       	cpc	r7, r1
    81d0:	09 f4       	brne	.+2      	; 0x81d4 <p_etoa+0x220>
    81d2:	40 c0       	rjmp	.+128    	; 0x8254 <p_etoa+0x2a0>
    81d4:	b6 01       	movw	r22, r12
    81d6:	dd 0c       	add	r13, r13
    81d8:	88 0b       	sbc	r24, r24
    81da:	99 0b       	sbc	r25, r25
    81dc:	0e 94 c3 e7 	call	0x1cf86	; 0x1cf86 <__floatsisf>
    81e0:	9b 01       	movw	r18, r22
    81e2:	ac 01       	movw	r20, r24
    81e4:	c5 01       	movw	r24, r10
    81e6:	b4 01       	movw	r22, r8
    81e8:	0e 94 bf e6 	call	0x1cd7e	; 0x1cd7e <__subsf3>
    81ec:	20 e0       	ldi	r18, 0x00	; 0
    81ee:	30 e0       	ldi	r19, 0x00	; 0
    81f0:	40 e2       	ldi	r20, 0x20	; 32
    81f2:	51 e4       	ldi	r21, 0x41	; 65
    81f4:	0e 94 77 e8 	call	0x1d0ee	; 0x1d0ee <__mulsf3>
    81f8:	4b 01       	movw	r8, r22
    81fa:	5c 01       	movw	r10, r24
    81fc:	6e e2       	ldi	r22, 0x2E	; 46
    81fe:	ce 01       	movw	r24, r28
    8200:	08 96       	adiw	r24, 0x08	; 8
    8202:	61 dd       	rcall	.-1342   	; 0x7cc6 <pch>
    8204:	c5 01       	movw	r24, r10
    8206:	b4 01       	movw	r22, r8
    8208:	0e 94 90 e7 	call	0x1cf20	; 0x1cf20 <__fixsfsi>
    820c:	6b 01       	movw	r12, r22
    820e:	7c 01       	movw	r14, r24
    8210:	07 2e       	mov	r0, r23
    8212:	00 0c       	add	r0, r0
    8214:	88 0b       	sbc	r24, r24
    8216:	99 0b       	sbc	r25, r25
    8218:	0e 94 c3 e7 	call	0x1cf86	; 0x1cf86 <__floatsisf>
    821c:	9b 01       	movw	r18, r22
    821e:	ac 01       	movw	r20, r24
    8220:	c5 01       	movw	r24, r10
    8222:	b4 01       	movw	r22, r8
    8224:	0e 94 bf e6 	call	0x1cd7e	; 0x1cd7e <__subsf3>
    8228:	4b 01       	movw	r8, r22
    822a:	5c 01       	movw	r10, r24
    822c:	b6 01       	movw	r22, r12
    822e:	60 5d       	subi	r22, 0xD0	; 208
    8230:	7f 4f       	sbci	r23, 0xFF	; 255
    8232:	ce 01       	movw	r24, r28
    8234:	08 96       	adiw	r24, 0x08	; 8
    8236:	47 dd       	rcall	.-1394   	; 0x7cc6 <pch>
    8238:	20 e0       	ldi	r18, 0x00	; 0
    823a:	30 e0       	ldi	r19, 0x00	; 0
    823c:	40 e2       	ldi	r20, 0x20	; 32
    823e:	51 e4       	ldi	r21, 0x41	; 65
    8240:	c5 01       	movw	r24, r10
    8242:	b4 01       	movw	r22, r8
    8244:	0e 94 77 e8 	call	0x1d0ee	; 0x1d0ee <__mulsf3>
    8248:	4b 01       	movw	r8, r22
    824a:	5c 01       	movw	r10, r24
    824c:	31 e0       	ldi	r19, 0x01	; 1
    824e:	63 1a       	sub	r6, r19
    8250:	71 08       	sbc	r7, r1
    8252:	c1 f6       	brne	.-80     	; 0x8204 <p_etoa+0x250>
    8254:	8e 01       	movw	r16, r28
    8256:	0f 5f       	subi	r16, 0xFF	; 255
    8258:	1f 4f       	sbci	r17, 0xFF	; 255
    825a:	f8 01       	movw	r30, r16
    825c:	61 91       	ld	r22, Z+
    825e:	8f 01       	movw	r16, r30
    8260:	ce 01       	movw	r24, r28
    8262:	08 96       	adiw	r24, 0x08	; 8
    8264:	66 23       	and	r22, r22
    8266:	11 f0       	breq	.+4      	; 0x826c <p_etoa+0x2b8>
    8268:	2e dd       	rcall	.-1444   	; 0x7cc6 <pch>
    826a:	f7 cf       	rjmp	.-18     	; 0x825a <p_etoa+0x2a6>
    826c:	2c dd       	rcall	.-1448   	; 0x7cc6 <pch>
    826e:	e8 89       	ldd	r30, Y+16	; 0x10
    8270:	f9 89       	ldd	r31, Y+17	; 0x11
    8272:	01 90       	ld	r0, Z+
    8274:	00 20       	and	r0, r0
    8276:	e9 f7       	brne	.-6      	; 0x8272 <p_etoa+0x2be>
    8278:	cf 01       	movw	r24, r30
    827a:	01 97       	sbiw	r24, 0x01	; 1
    827c:	28 89       	ldd	r18, Y+16	; 0x10
    827e:	39 89       	ldd	r19, Y+17	; 0x11
    8280:	82 1b       	sub	r24, r18
    8282:	93 0b       	sbc	r25, r19
    8284:	63 96       	adiw	r28, 0x13	; 19
    8286:	e2 e1       	ldi	r30, 0x12	; 18
    8288:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

0000828c <_puts_pad>:
    828c:	a0 e0       	ldi	r26, 0x00	; 0
    828e:	b0 e0       	ldi	r27, 0x00	; 0
    8290:	ec e4       	ldi	r30, 0x4C	; 76
    8292:	f1 e4       	ldi	r31, 0x41	; 65
    8294:	0c 94 6c e6 	jmp	0x1ccd8	; 0x1ccd8 <__prologue_saves__+0xc>
    8298:	6c 01       	movw	r12, r24
    829a:	4b 01       	movw	r8, r22
    829c:	79 01       	movw	r14, r18
    829e:	24 17       	cp	r18, r20
    82a0:	35 07       	cpc	r19, r21
    82a2:	24 f4       	brge	.+8      	; 0x82ac <_puts_pad+0x20>
    82a4:	ea 01       	movw	r28, r20
    82a6:	c2 1b       	sub	r28, r18
    82a8:	d3 0b       	sbc	r29, r19
    82aa:	02 c0       	rjmp	.+4      	; 0x82b0 <_puts_pad+0x24>
    82ac:	c0 e0       	ldi	r28, 0x00	; 0
    82ae:	d0 e0       	ldi	r29, 0x00	; 0
    82b0:	01 15       	cp	r16, r1
    82b2:	11 05       	cpc	r17, r1
    82b4:	49 f4       	brne	.+18     	; 0x82c8 <_puts_pad+0x3c>
    82b6:	21 97       	sbiw	r28, 0x01	; 1
    82b8:	38 f0       	brcs	.+14     	; 0x82c8 <_puts_pad+0x3c>
    82ba:	d6 01       	movw	r26, r12
    82bc:	ed 91       	ld	r30, X+
    82be:	fc 91       	ld	r31, X
    82c0:	60 e2       	ldi	r22, 0x20	; 32
    82c2:	c6 01       	movw	r24, r12
    82c4:	09 95       	icall
    82c6:	f7 cf       	rjmp	.-18     	; 0x82b6 <_puts_pad+0x2a>
    82c8:	54 01       	movw	r10, r8
    82ca:	f5 01       	movw	r30, r10
    82cc:	61 91       	ld	r22, Z+
    82ce:	5f 01       	movw	r10, r30
    82d0:	66 23       	and	r22, r22
    82d2:	61 f0       	breq	.+24     	; 0x82ec <_puts_pad+0x60>
    82d4:	e1 14       	cp	r14, r1
    82d6:	f1 04       	cpc	r15, r1
    82d8:	49 f0       	breq	.+18     	; 0x82ec <_puts_pad+0x60>
    82da:	d6 01       	movw	r26, r12
    82dc:	ed 91       	ld	r30, X+
    82de:	fc 91       	ld	r31, X
    82e0:	c6 01       	movw	r24, r12
    82e2:	09 95       	icall
    82e4:	b1 e0       	ldi	r27, 0x01	; 1
    82e6:	eb 1a       	sub	r14, r27
    82e8:	f1 08       	sbc	r15, r1
    82ea:	ef cf       	rjmp	.-34     	; 0x82ca <_puts_pad+0x3e>
    82ec:	01 15       	cp	r16, r1
    82ee:	11 05       	cpc	r17, r1
    82f0:	51 f0       	breq	.+20     	; 0x8306 <_puts_pad+0x7a>
    82f2:	20 97       	sbiw	r28, 0x00	; 0
    82f4:	41 f0       	breq	.+16     	; 0x8306 <_puts_pad+0x7a>
    82f6:	d6 01       	movw	r26, r12
    82f8:	ed 91       	ld	r30, X+
    82fa:	fc 91       	ld	r31, X
    82fc:	60 e2       	ldi	r22, 0x20	; 32
    82fe:	c6 01       	movw	r24, r12
    8300:	09 95       	icall
    8302:	21 97       	sbiw	r28, 0x01	; 1
    8304:	f6 cf       	rjmp	.-20     	; 0x82f2 <_puts_pad+0x66>
    8306:	cd b7       	in	r28, 0x3d	; 61
    8308:	de b7       	in	r29, 0x3e	; 62
    830a:	ec e0       	ldi	r30, 0x0C	; 12
    830c:	0c 94 88 e6 	jmp	0x1cd10	; 0x1cd10 <__epilogue_restores__+0xc>

00008310 <_puts_pad_X>:
    8310:	2f 92       	push	r2
    8312:	3f 92       	push	r3
    8314:	4f 92       	push	r4
    8316:	6f 92       	push	r6
    8318:	7f 92       	push	r7
    831a:	8f 92       	push	r8
    831c:	cf 92       	push	r12
    831e:	df 92       	push	r13
    8320:	ef 92       	push	r14
    8322:	ff 92       	push	r15
    8324:	0f 93       	push	r16
    8326:	1f 93       	push	r17
    8328:	cf 93       	push	r28
    832a:	df 93       	push	r29
    832c:	6c 01       	movw	r12, r24
    832e:	3a 01       	movw	r6, r20
    8330:	86 2e       	mov	r8, r22
    8332:	02 17       	cp	r16, r18
    8334:	13 07       	cpc	r17, r19
    8336:	24 f4       	brge	.+8      	; 0x8340 <_puts_pad_X+0x30>
    8338:	e9 01       	movw	r28, r18
    833a:	c0 1b       	sub	r28, r16
    833c:	d1 0b       	sbc	r29, r17
    833e:	02 c0       	rjmp	.+4      	; 0x8344 <_puts_pad_X+0x34>
    8340:	c0 e0       	ldi	r28, 0x00	; 0
    8342:	d0 e0       	ldi	r29, 0x00	; 0
    8344:	e1 14       	cp	r14, r1
    8346:	f1 04       	cpc	r15, r1
    8348:	49 f4       	brne	.+18     	; 0x835c <_puts_pad_X+0x4c>
    834a:	21 97       	sbiw	r28, 0x01	; 1
    834c:	38 f0       	brcs	.+14     	; 0x835c <_puts_pad_X+0x4c>
    834e:	d6 01       	movw	r26, r12
    8350:	ed 91       	ld	r30, X+
    8352:	fc 91       	ld	r31, X
    8354:	60 e2       	ldi	r22, 0x20	; 32
    8356:	c6 01       	movw	r24, r12
    8358:	09 95       	icall
    835a:	f7 cf       	rjmp	.-18     	; 0x834a <_puts_pad_X+0x3a>
    835c:	13 01       	movw	r2, r6
    835e:	48 2c       	mov	r4, r8
    8360:	20 0e       	add	r2, r16
    8362:	31 1e       	adc	r3, r17
    8364:	41 1c       	adc	r4, r1
    8366:	17 fd       	sbrc	r17, 7
    8368:	4a 94       	dec	r4
    836a:	f3 01       	movw	r30, r6
    836c:	58 2d       	mov	r21, r8
    836e:	0e 94 9d e6 	call	0x1cd3a	; 0x1cd3a <__xload_1>
    8372:	66 23       	and	r22, r22
    8374:	71 f0       	breq	.+28     	; 0x8392 <_puts_pad_X+0x82>
    8376:	62 14       	cp	r6, r2
    8378:	73 04       	cpc	r7, r3
    837a:	84 04       	cpc	r8, r4
    837c:	51 f0       	breq	.+20     	; 0x8392 <_puts_pad_X+0x82>
    837e:	d6 01       	movw	r26, r12
    8380:	ed 91       	ld	r30, X+
    8382:	fc 91       	ld	r31, X
    8384:	c6 01       	movw	r24, r12
    8386:	09 95       	icall
    8388:	bf ef       	ldi	r27, 0xFF	; 255
    838a:	6b 1a       	sub	r6, r27
    838c:	7b 0a       	sbc	r7, r27
    838e:	8b 0a       	sbc	r8, r27
    8390:	ec cf       	rjmp	.-40     	; 0x836a <_puts_pad_X+0x5a>
    8392:	ef 28       	or	r14, r15
    8394:	51 f0       	breq	.+20     	; 0x83aa <_puts_pad_X+0x9a>
    8396:	20 97       	sbiw	r28, 0x00	; 0
    8398:	41 f0       	breq	.+16     	; 0x83aa <_puts_pad_X+0x9a>
    839a:	d6 01       	movw	r26, r12
    839c:	ed 91       	ld	r30, X+
    839e:	fc 91       	ld	r31, X
    83a0:	60 e2       	ldi	r22, 0x20	; 32
    83a2:	c6 01       	movw	r24, r12
    83a4:	09 95       	icall
    83a6:	21 97       	sbiw	r28, 0x01	; 1
    83a8:	f6 cf       	rjmp	.-20     	; 0x8396 <_puts_pad_X+0x86>
    83aa:	df 91       	pop	r29
    83ac:	cf 91       	pop	r28
    83ae:	1f 91       	pop	r17
    83b0:	0f 91       	pop	r16
    83b2:	ff 90       	pop	r15
    83b4:	ef 90       	pop	r14
    83b6:	df 90       	pop	r13
    83b8:	cf 90       	pop	r12
    83ba:	8f 90       	pop	r8
    83bc:	7f 90       	pop	r7
    83be:	6f 90       	pop	r6
    83c0:	4f 90       	pop	r4
    83c2:	3f 90       	pop	r3
    83c4:	2f 90       	pop	r2
    83c6:	08 95       	ret

000083c8 <strlen_X>:
    83c8:	cf 92       	push	r12
    83ca:	df 92       	push	r13
    83cc:	ef 92       	push	r14
    83ce:	9b 01       	movw	r18, r22
    83d0:	48 2f       	mov	r20, r24
    83d2:	80 e0       	ldi	r24, 0x00	; 0
    83d4:	90 e0       	ldi	r25, 0x00	; 0
    83d6:	2f 5f       	subi	r18, 0xFF	; 255
    83d8:	3f 4f       	sbci	r19, 0xFF	; 255
    83da:	4f 4f       	sbci	r20, 0xFF	; 255
    83dc:	69 01       	movw	r12, r18
    83de:	e4 2e       	mov	r14, r20
    83e0:	51 e0       	ldi	r21, 0x01	; 1
    83e2:	c5 1a       	sub	r12, r21
    83e4:	d1 08       	sbc	r13, r1
    83e6:	e1 08       	sbc	r14, r1
    83e8:	f6 01       	movw	r30, r12
    83ea:	5e 2d       	mov	r21, r14
    83ec:	0e 94 9d e6 	call	0x1cd3a	; 0x1cd3a <__xload_1>
    83f0:	66 23       	and	r22, r22
    83f2:	11 f0       	breq	.+4      	; 0x83f8 <strlen_X+0x30>
    83f4:	01 96       	adiw	r24, 0x01	; 1
    83f6:	ef cf       	rjmp	.-34     	; 0x83d6 <strlen_X+0xe>
    83f8:	ef 90       	pop	r14
    83fa:	df 90       	pop	r13
    83fc:	cf 90       	pop	r12
    83fe:	08 95       	ret

00008400 <_printf_fn>:
    8400:	ae e6       	ldi	r26, 0x6E	; 110
    8402:	b0 e0       	ldi	r27, 0x00	; 0
    8404:	e6 e0       	ldi	r30, 0x06	; 6
    8406:	f2 e4       	ldi	r31, 0x42	; 66
    8408:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
    840c:	a5 96       	adiw	r28, 0x25	; 37
    840e:	9f af       	std	Y+63, r25	; 0x3f
    8410:	8e af       	std	Y+62, r24	; 0x3e
    8412:	a5 97       	sbiw	r28, 0x25	; 37
    8414:	6a 01       	movw	r12, r20
    8416:	e6 2e       	mov	r14, r22
    8418:	19 01       	movw	r2, r18
    841a:	a9 96       	adiw	r28, 0x29	; 41
    841c:	1c ae       	std	Y+60, r1	; 0x3c
    841e:	1d ae       	std	Y+61, r1	; 0x3d
    8420:	1e ae       	std	Y+62, r1	; 0x3e
    8422:	1f ae       	std	Y+63, r1	; 0x3f
    8424:	a9 97       	sbiw	r28, 0x29	; 41
    8426:	8a e1       	ldi	r24, 0x1A	; 26
    8428:	94 e0       	ldi	r25, 0x04	; 4
    842a:	9c 01       	movw	r18, r24
    842c:	40 e8       	ldi	r20, 0x80	; 128
    842e:	ae 96       	adiw	r28, 0x2e	; 46
    8430:	2d af       	std	Y+61, r18	; 0x3d
    8432:	3e af       	std	Y+62, r19	; 0x3e
    8434:	4f af       	std	Y+63, r20	; 0x3f
    8436:	ae 97       	sbiw	r28, 0x2e	; 46
    8438:	ae 01       	movw	r20, r28
    843a:	4f 5a       	subi	r20, 0xAF	; 175
    843c:	5f 4f       	sbci	r21, 0xFF	; 255
    843e:	67 96       	adiw	r28, 0x17	; 23
    8440:	5f af       	std	Y+63, r21	; 0x3f
    8442:	4e af       	std	Y+62, r20	; 0x3e
    8444:	67 97       	sbiw	r28, 0x17	; 23
    8446:	ce 01       	movw	r24, r28
    8448:	8d 5b       	subi	r24, 0xBD	; 189
    844a:	9f 4f       	sbci	r25, 0xFF	; 255
    844c:	69 96       	adiw	r28, 0x19	; 25
    844e:	9f af       	std	Y+63, r25	; 0x3f
    8450:	8e af       	std	Y+62, r24	; 0x3e
    8452:	69 97       	sbiw	r28, 0x19	; 25
    8454:	de 01       	movw	r26, r28
    8456:	a5 5b       	subi	r26, 0xB5	; 181
    8458:	bf 4f       	sbci	r27, 0xFF	; 255
    845a:	6b 96       	adiw	r28, 0x1b	; 27
    845c:	bf af       	std	Y+63, r27	; 0x3f
    845e:	ae af       	std	Y+62, r26	; 0x3e
    8460:	6b 97       	sbiw	r28, 0x1b	; 27
    8462:	fe 01       	movw	r30, r28
    8464:	ed 5a       	subi	r30, 0xAD	; 173
    8466:	ff 4f       	sbci	r31, 0xFF	; 255
    8468:	6d 96       	adiw	r28, 0x1d	; 29
    846a:	ff af       	std	Y+63, r31	; 0x3f
    846c:	ee af       	std	Y+62, r30	; 0x3e
    846e:	6d 97       	sbiw	r28, 0x1d	; 29
    8470:	f6 01       	movw	r30, r12
    8472:	5e 2d       	mov	r21, r14
    8474:	0e 94 9d e6 	call	0x1cd3a	; 0x1cd3a <__xload_1>
    8478:	66 23       	and	r22, r22
    847a:	09 f4       	brne	.+2      	; 0x847e <_printf_fn+0x7e>
    847c:	13 c4       	rjmp	.+2086   	; 0x8ca4 <_printf_fn+0x8a4>
    847e:	ae 2d       	mov	r26, r14
    8480:	c6 01       	movw	r24, r12
    8482:	01 96       	adiw	r24, 0x01	; 1
    8484:	a1 1d       	adc	r26, r1
    8486:	3c 01       	movw	r6, r24
    8488:	8a 2e       	mov	r8, r26
    848a:	65 32       	cpi	r22, 0x25	; 37
    848c:	51 f0       	breq	.+20     	; 0x84a2 <_printf_fn+0xa2>
    848e:	a5 96       	adiw	r28, 0x25	; 37
    8490:	ae ad       	ldd	r26, Y+62	; 0x3e
    8492:	bf ad       	ldd	r27, Y+63	; 0x3f
    8494:	a5 97       	sbiw	r28, 0x25	; 37
    8496:	ed 91       	ld	r30, X+
    8498:	fc 91       	ld	r31, X
    849a:	11 97       	sbiw	r26, 0x01	; 1
    849c:	cd 01       	movw	r24, r26
    849e:	09 95       	icall
    84a0:	d5 c3       	rjmp	.+1962   	; 0x8c4c <_printf_fn+0x84c>
    84a2:	91 2c       	mov	r9, r1
    84a4:	f3 01       	movw	r30, r6
    84a6:	58 2d       	mov	r21, r8
    84a8:	0e 94 9d e6 	call	0x1cd3a	; 0x1cd3a <__xload_1>
    84ac:	63 32       	cpi	r22, 0x23	; 35
    84ae:	19 f4       	brne	.+6      	; 0x84b6 <_printf_fn+0xb6>
    84b0:	68 94       	set
    84b2:	97 f8       	bld	r9, 7
    84b4:	04 c0       	rjmp	.+8      	; 0x84be <_printf_fn+0xbe>
    84b6:	6b 32       	cpi	r22, 0x2B	; 43
    84b8:	39 f4       	brne	.+14     	; 0x84c8 <_printf_fn+0xc8>
    84ba:	68 94       	set
    84bc:	92 f8       	bld	r9, 2
    84be:	bf ef       	ldi	r27, 0xFF	; 255
    84c0:	6b 1a       	sub	r6, r27
    84c2:	7b 0a       	sbc	r7, r27
    84c4:	8b 0a       	sbc	r8, r27
    84c6:	ee cf       	rjmp	.-36     	; 0x84a4 <_printf_fn+0xa4>
    84c8:	6d 32       	cpi	r22, 0x2D	; 45
    84ca:	a9 f4       	brne	.+42     	; 0x84f6 <_printf_fn+0xf6>
    84cc:	93 fc       	sbrc	r9, 3
    84ce:	05 c0       	rjmp	.+10     	; 0x84da <_printf_fn+0xda>
    84d0:	6d 32       	cpi	r22, 0x2D	; 45
    84d2:	19 f4       	brne	.+6      	; 0x84da <_printf_fn+0xda>
    84d4:	68 94       	set
    84d6:	93 f8       	bld	r9, 3
    84d8:	f2 cf       	rjmp	.-28     	; 0x84be <_printf_fn+0xbe>
    84da:	94 fc       	sbrc	r9, 4
    84dc:	05 c0       	rjmp	.+10     	; 0x84e8 <_printf_fn+0xe8>
    84de:	60 32       	cpi	r22, 0x20	; 32
    84e0:	19 f4       	brne	.+6      	; 0x84e8 <_printf_fn+0xe8>
    84e2:	68 94       	set
    84e4:	94 f8       	bld	r9, 4
    84e6:	eb cf       	rjmp	.-42     	; 0x84be <_printf_fn+0xbe>
    84e8:	95 fc       	sbrc	r9, 5
    84ea:	e9 cf       	rjmp	.-46     	; 0x84be <_printf_fn+0xbe>
    84ec:	60 33       	cpi	r22, 0x30	; 48
    84ee:	39 f7       	brne	.-50     	; 0x84be <_printf_fn+0xbe>
    84f0:	68 94       	set
    84f2:	95 f8       	bld	r9, 5
    84f4:	e4 cf       	rjmp	.-56     	; 0x84be <_printf_fn+0xbe>
    84f6:	86 2f       	mov	r24, r22
    84f8:	8f 7e       	andi	r24, 0xEF	; 239
    84fa:	80 32       	cpi	r24, 0x20	; 32
    84fc:	39 f3       	breq	.-50     	; 0x84cc <_printf_fn+0xcc>
    84fe:	70 e0       	ldi	r23, 0x00	; 0
    8500:	60 53       	subi	r22, 0x30	; 48
    8502:	71 09       	sbc	r23, r1
    8504:	6f 96       	adiw	r28, 0x1f	; 31
    8506:	1f ae       	std	Y+63, r1	; 0x3f
    8508:	1e ae       	std	Y+62, r1	; 0x3e
    850a:	6f 97       	sbiw	r28, 0x1f	; 31
    850c:	6a 30       	cpi	r22, 0x0A	; 10
    850e:	71 05       	cpc	r23, r1
    8510:	10 f5       	brcc	.+68     	; 0x8556 <_printf_fn+0x156>
    8512:	2a e0       	ldi	r18, 0x0A	; 10
    8514:	f3 01       	movw	r30, r6
    8516:	58 2d       	mov	r21, r8
    8518:	0e 94 9d e6 	call	0x1cd3a	; 0x1cd3a <__xload_1>
    851c:	70 e0       	ldi	r23, 0x00	; 0
    851e:	cb 01       	movw	r24, r22
    8520:	c0 97       	sbiw	r24, 0x30	; 48
    8522:	0a 97       	sbiw	r24, 0x0a	; 10
    8524:	b0 f4       	brcc	.+44     	; 0x8552 <_printf_fn+0x152>
    8526:	ef ef       	ldi	r30, 0xFF	; 255
    8528:	6e 1a       	sub	r6, r30
    852a:	7e 0a       	sbc	r7, r30
    852c:	8e 0a       	sbc	r8, r30
    852e:	6f 96       	adiw	r28, 0x1f	; 31
    8530:	4e ad       	ldd	r20, Y+62	; 0x3e
    8532:	5f ad       	ldd	r21, Y+63	; 0x3f
    8534:	6f 97       	sbiw	r28, 0x1f	; 31
    8536:	24 9f       	mul	r18, r20
    8538:	c0 01       	movw	r24, r0
    853a:	25 9f       	mul	r18, r21
    853c:	90 0d       	add	r25, r0
    853e:	11 24       	eor	r1, r1
    8540:	68 0f       	add	r22, r24
    8542:	79 1f       	adc	r23, r25
    8544:	cb 01       	movw	r24, r22
    8546:	c0 97       	sbiw	r24, 0x30	; 48
    8548:	6f 96       	adiw	r28, 0x1f	; 31
    854a:	9f af       	std	Y+63, r25	; 0x3f
    854c:	8e af       	std	Y+62, r24	; 0x3e
    854e:	6f 97       	sbiw	r28, 0x1f	; 31
    8550:	e1 cf       	rjmp	.-62     	; 0x8514 <_printf_fn+0x114>
    8552:	68 94       	set
    8554:	90 f8       	bld	r9, 0
    8556:	f3 01       	movw	r30, r6
    8558:	58 2d       	mov	r21, r8
    855a:	0e 94 9d e6 	call	0x1cd3a	; 0x1cd3a <__xload_1>
    855e:	6e 32       	cpi	r22, 0x2E	; 46
    8560:	61 f5       	brne	.+88     	; 0x85ba <_printf_fn+0x1ba>
    8562:	9f ef       	ldi	r25, 0xFF	; 255
    8564:	69 1a       	sub	r6, r25
    8566:	79 0a       	sbc	r7, r25
    8568:	89 0a       	sbc	r8, r25
    856a:	a1 96       	adiw	r28, 0x21	; 33
    856c:	1f ae       	std	Y+63, r1	; 0x3f
    856e:	1e ae       	std	Y+62, r1	; 0x3e
    8570:	a1 97       	sbiw	r28, 0x21	; 33
    8572:	2a e0       	ldi	r18, 0x0A	; 10
    8574:	f3 01       	movw	r30, r6
    8576:	58 2d       	mov	r21, r8
    8578:	0e 94 9d e6 	call	0x1cd3a	; 0x1cd3a <__xload_1>
    857c:	70 e0       	ldi	r23, 0x00	; 0
    857e:	cb 01       	movw	r24, r22
    8580:	c0 97       	sbiw	r24, 0x30	; 48
    8582:	0a 97       	sbiw	r24, 0x0a	; 10
    8584:	b8 f4       	brcc	.+46     	; 0x85b4 <_printf_fn+0x1b4>
    8586:	af ef       	ldi	r26, 0xFF	; 255
    8588:	6a 1a       	sub	r6, r26
    858a:	7a 0a       	sbc	r7, r26
    858c:	8a 0a       	sbc	r8, r26
    858e:	a1 96       	adiw	r28, 0x21	; 33
    8590:	ee ad       	ldd	r30, Y+62	; 0x3e
    8592:	ff ad       	ldd	r31, Y+63	; 0x3f
    8594:	a1 97       	sbiw	r28, 0x21	; 33
    8596:	2e 9f       	mul	r18, r30
    8598:	c0 01       	movw	r24, r0
    859a:	2f 9f       	mul	r18, r31
    859c:	90 0d       	add	r25, r0
    859e:	11 24       	eor	r1, r1
    85a0:	68 0f       	add	r22, r24
    85a2:	79 1f       	adc	r23, r25
    85a4:	ab 01       	movw	r20, r22
    85a6:	40 53       	subi	r20, 0x30	; 48
    85a8:	51 09       	sbc	r21, r1
    85aa:	a1 96       	adiw	r28, 0x21	; 33
    85ac:	5f af       	std	Y+63, r21	; 0x3f
    85ae:	4e af       	std	Y+62, r20	; 0x3e
    85b0:	a1 97       	sbiw	r28, 0x21	; 33
    85b2:	e0 cf       	rjmp	.-64     	; 0x8574 <_printf_fn+0x174>
    85b4:	68 94       	set
    85b6:	91 f8       	bld	r9, 1
    85b8:	04 c0       	rjmp	.+8      	; 0x85c2 <_printf_fn+0x1c2>
    85ba:	a1 96       	adiw	r28, 0x21	; 33
    85bc:	1f ae       	std	Y+63, r1	; 0x3f
    85be:	1e ae       	std	Y+62, r1	; 0x3e
    85c0:	a1 97       	sbiw	r28, 0x21	; 33
    85c2:	f3 01       	movw	r30, r6
    85c4:	58 2d       	mov	r21, r8
    85c6:	0e 94 9d e6 	call	0x1cd3a	; 0x1cd3a <__xload_1>
    85ca:	69 34       	cpi	r22, 0x49	; 73
    85cc:	91 f5       	brne	.+100    	; 0x8632 <_printf_fn+0x232>
    85ce:	5f ef       	ldi	r21, 0xFF	; 255
    85d0:	65 1a       	sub	r6, r21
    85d2:	75 0a       	sbc	r7, r21
    85d4:	85 0a       	sbc	r8, r21
    85d6:	41 2c       	mov	r4, r1
    85d8:	51 2c       	mov	r5, r1
    85da:	2a e0       	ldi	r18, 0x0A	; 10
    85dc:	f3 01       	movw	r30, r6
    85de:	58 2d       	mov	r21, r8
    85e0:	0e 94 9d e6 	call	0x1cd3a	; 0x1cd3a <__xload_1>
    85e4:	70 e0       	ldi	r23, 0x00	; 0
    85e6:	cb 01       	movw	r24, r22
    85e8:	c0 97       	sbiw	r24, 0x30	; 48
    85ea:	0a 97       	sbiw	r24, 0x0a	; 10
    85ec:	80 f4       	brcc	.+32     	; 0x860e <_printf_fn+0x20e>
    85ee:	8f ef       	ldi	r24, 0xFF	; 255
    85f0:	68 1a       	sub	r6, r24
    85f2:	78 0a       	sbc	r7, r24
    85f4:	88 0a       	sbc	r8, r24
    85f6:	24 9d       	mul	r18, r4
    85f8:	c0 01       	movw	r24, r0
    85fa:	25 9d       	mul	r18, r5
    85fc:	90 0d       	add	r25, r0
    85fe:	11 24       	eor	r1, r1
    8600:	68 0f       	add	r22, r24
    8602:	79 1f       	adc	r23, r25
    8604:	2b 01       	movw	r4, r22
    8606:	90 e3       	ldi	r25, 0x30	; 48
    8608:	49 1a       	sub	r4, r25
    860a:	51 08       	sbc	r5, r1
    860c:	e7 cf       	rjmp	.-50     	; 0x85dc <_printf_fn+0x1dc>
    860e:	41 14       	cp	r4, r1
    8610:	51 04       	cpc	r5, r1
    8612:	09 f4       	brne	.+2      	; 0x8616 <_printf_fn+0x216>
    8614:	40 c0       	rjmp	.+128    	; 0x8696 <_printf_fn+0x296>
    8616:	c2 01       	movw	r24, r4
    8618:	87 70       	andi	r24, 0x07	; 7
    861a:	99 27       	eor	r25, r25
    861c:	89 2b       	or	r24, r25
    861e:	c9 f5       	brne	.+114    	; 0x8692 <_printf_fn+0x292>
    8620:	63 e0       	ldi	r22, 0x03	; 3
    8622:	55 94       	asr	r5
    8624:	47 94       	ror	r4
    8626:	6a 95       	dec	r22
    8628:	e1 f7       	brne	.-8      	; 0x8622 <_printf_fn+0x222>
    862a:	41 14       	cp	r4, r1
    862c:	51 04       	cpc	r5, r1
    862e:	99 f1       	breq	.+102    	; 0x8696 <_printf_fn+0x296>
    8630:	21 c0       	rjmp	.+66     	; 0x8674 <_printf_fn+0x274>
    8632:	68 36       	cpi	r22, 0x68	; 104
    8634:	29 f4       	brne	.+10     	; 0x8640 <_printf_fn+0x240>
    8636:	af ef       	ldi	r26, 0xFF	; 255
    8638:	6a 1a       	sub	r6, r26
    863a:	7a 0a       	sbc	r7, r26
    863c:	8a 0a       	sbc	r8, r26
    863e:	09 c3       	rjmp	.+1554   	; 0x8c52 <_printf_fn+0x852>
    8640:	6c 36       	cpi	r22, 0x6C	; 108
    8642:	09 f0       	breq	.+2      	; 0x8646 <_printf_fn+0x246>
    8644:	06 c3       	rjmp	.+1548   	; 0x8c52 <_printf_fn+0x852>
    8646:	a8 2d       	mov	r26, r8
    8648:	c3 01       	movw	r24, r6
    864a:	01 96       	adiw	r24, 0x01	; 1
    864c:	a1 1d       	adc	r26, r1
    864e:	fc 01       	movw	r30, r24
    8650:	5a 2f       	mov	r21, r26
    8652:	0e 94 9d e6 	call	0x1cd3a	; 0x1cd3a <__xload_1>
    8656:	6c 36       	cpi	r22, 0x6C	; 108
    8658:	31 f0       	breq	.+12     	; 0x8666 <_printf_fn+0x266>
    865a:	3c 01       	movw	r6, r24
    865c:	8a 2e       	mov	r8, r26
    865e:	54 e0       	ldi	r21, 0x04	; 4
    8660:	45 2e       	mov	r4, r21
    8662:	51 2c       	mov	r5, r1
    8664:	07 c0       	rjmp	.+14     	; 0x8674 <_printf_fn+0x274>
    8666:	b2 e0       	ldi	r27, 0x02	; 2
    8668:	6b 0e       	add	r6, r27
    866a:	71 1c       	adc	r7, r1
    866c:	81 1c       	adc	r8, r1
    866e:	48 e0       	ldi	r20, 0x08	; 8
    8670:	44 2e       	mov	r4, r20
    8672:	51 2c       	mov	r5, r1
    8674:	f3 01       	movw	r30, r6
    8676:	58 2d       	mov	r21, r8
    8678:	0e 94 9d e6 	call	0x1cd3a	; 0x1cd3a <__xload_1>
    867c:	e6 2f       	mov	r30, r22
    867e:	f0 e0       	ldi	r31, 0x00	; 0
    8680:	a3 96       	adiw	r28, 0x23	; 35
    8682:	ff af       	std	Y+63, r31	; 0x3f
    8684:	ee af       	std	Y+62, r30	; 0x3e
    8686:	a3 97       	sbiw	r28, 0x23	; 35
    8688:	e4 36       	cpi	r30, 0x64	; 100
    868a:	f1 05       	cpc	r31, r1
    868c:	09 f4       	brne	.+2      	; 0x8690 <_printf_fn+0x290>
    868e:	e5 c2       	rjmp	.+1482   	; 0x8c5a <_printf_fn+0x85a>
    8690:	06 c0       	rjmp	.+12     	; 0x869e <_printf_fn+0x29e>
    8692:	41 2c       	mov	r4, r1
    8694:	51 2c       	mov	r5, r1
    8696:	a3 96       	adiw	r28, 0x23	; 35
    8698:	1f ae       	std	Y+63, r1	; 0x3f
    869a:	1e ae       	std	Y+62, r1	; 0x3e
    869c:	a3 97       	sbiw	r28, 0x23	; 35
    869e:	31 e0       	ldi	r19, 0x01	; 1
    86a0:	20 e0       	ldi	r18, 0x00	; 0
    86a2:	a3 96       	adiw	r28, 0x23	; 35
    86a4:	4e ad       	ldd	r20, Y+62	; 0x3e
    86a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    86a8:	a3 97       	sbiw	r28, 0x23	; 35
    86aa:	44 34       	cpi	r20, 0x44	; 68
    86ac:	51 05       	cpc	r21, r1
    86ae:	09 f0       	breq	.+2      	; 0x86b2 <_printf_fn+0x2b2>
    86b0:	30 e0       	ldi	r19, 0x00	; 0
    86b2:	83 2f       	mov	r24, r19
    86b4:	92 2f       	mov	r25, r18
    86b6:	a3 96       	adiw	r28, 0x23	; 35
    86b8:	ee ad       	ldd	r30, Y+62	; 0x3e
    86ba:	ff ad       	ldd	r31, Y+63	; 0x3f
    86bc:	a3 97       	sbiw	r28, 0x23	; 35
    86be:	e2 54       	subi	r30, 0x42	; 66
    86c0:	f1 09       	sbc	r31, r1
    86c2:	e7 33       	cpi	r30, 0x37	; 55
    86c4:	f1 05       	cpc	r31, r1
    86c6:	08 f0       	brcs	.+2      	; 0x86ca <_printf_fn+0x2ca>
    86c8:	57 c1       	rjmp	.+686    	; 0x8978 <_printf_fn+0x578>
    86ca:	ea 5b       	subi	r30, 0xBA	; 186
    86cc:	ff 4f       	sbci	r31, 0xFF	; 255
    86ce:	0c 94 37 e6 	jmp	0x1cc6e	; 0x1cc6e <__tablejump2__>
    86d2:	32 e0       	ldi	r19, 0x02	; 2
    86d4:	43 2e       	mov	r4, r19
    86d6:	51 2c       	mov	r5, r1
    86d8:	29 2d       	mov	r18, r9
    86da:	28 72       	andi	r18, 0x28	; 40
    86dc:	28 32       	cpi	r18, 0x28	; 40
    86de:	11 f4       	brne	.+4      	; 0x86e4 <_printf_fn+0x2e4>
    86e0:	e8 94       	clt
    86e2:	95 f8       	bld	r9, 5
    86e4:	29 2d       	mov	r18, r9
    86e6:	22 72       	andi	r18, 0x22	; 34
    86e8:	22 32       	cpi	r18, 0x22	; 34
    86ea:	11 f4       	brne	.+4      	; 0x86f0 <_printf_fn+0x2f0>
    86ec:	e8 94       	clt
    86ee:	95 f8       	bld	r9, 5
    86f0:	29 2d       	mov	r18, r9
    86f2:	21 72       	andi	r18, 0x21	; 33
    86f4:	21 32       	cpi	r18, 0x21	; 33
    86f6:	79 f4       	brne	.+30     	; 0x8716 <_printf_fn+0x316>
    86f8:	a1 96       	adiw	r28, 0x21	; 33
    86fa:	ae ad       	ldd	r26, Y+62	; 0x3e
    86fc:	bf ad       	ldd	r27, Y+63	; 0x3f
    86fe:	a1 97       	sbiw	r28, 0x21	; 33
    8700:	6f 96       	adiw	r28, 0x1f	; 31
    8702:	ee ad       	ldd	r30, Y+62	; 0x3e
    8704:	ff ad       	ldd	r31, Y+63	; 0x3f
    8706:	6f 97       	sbiw	r28, 0x1f	; 31
    8708:	ae 17       	cp	r26, r30
    870a:	bf 07       	cpc	r27, r31
    870c:	24 f4       	brge	.+8      	; 0x8716 <_printf_fn+0x316>
    870e:	a1 96       	adiw	r28, 0x21	; 33
    8710:	ff af       	std	Y+63, r31	; 0x3f
    8712:	ee af       	std	Y+62, r30	; 0x3e
    8714:	a1 97       	sbiw	r28, 0x21	; 33
    8716:	29 2d       	mov	r18, r9
    8718:	23 72       	andi	r18, 0x23	; 35
    871a:	23 32       	cpi	r18, 0x23	; 35
    871c:	79 f4       	brne	.+30     	; 0x873c <_printf_fn+0x33c>
    871e:	a1 96       	adiw	r28, 0x21	; 33
    8720:	2e ad       	ldd	r18, Y+62	; 0x3e
    8722:	3f ad       	ldd	r19, Y+63	; 0x3f
    8724:	a1 97       	sbiw	r28, 0x21	; 33
    8726:	6f 96       	adiw	r28, 0x1f	; 31
    8728:	4e ad       	ldd	r20, Y+62	; 0x3e
    872a:	5f ad       	ldd	r21, Y+63	; 0x3f
    872c:	6f 97       	sbiw	r28, 0x1f	; 31
    872e:	24 17       	cp	r18, r20
    8730:	35 07       	cpc	r19, r21
    8732:	24 f4       	brge	.+8      	; 0x873c <_printf_fn+0x33c>
    8734:	a1 96       	adiw	r28, 0x21	; 33
    8736:	5f af       	std	Y+63, r21	; 0x3f
    8738:	4e af       	std	Y+62, r20	; 0x3e
    873a:	a1 97       	sbiw	r28, 0x21	; 33
    873c:	e8 94       	clt
    873e:	94 f8       	bld	r9, 4
    8740:	e8 94       	clt
    8742:	92 f8       	bld	r9, 2
    8744:	e8 94       	clt
    8746:	96 f8       	bld	r9, 6
    8748:	52 e0       	ldi	r21, 0x02	; 2
    874a:	45 16       	cp	r4, r21
    874c:	51 04       	cpc	r5, r1
    874e:	f9 f4       	brne	.+62     	; 0x878e <_printf_fn+0x38e>
    8750:	51 01       	movw	r10, r2
    8752:	82 e0       	ldi	r24, 0x02	; 2
    8754:	a8 0e       	add	r10, r24
    8756:	b1 1c       	adc	r11, r1
    8758:	d1 01       	movw	r26, r2
    875a:	8d 91       	ld	r24, X+
    875c:	9c 91       	ld	r25, X
    875e:	65 96       	adiw	r28, 0x15	; 21
    8760:	9f af       	std	Y+63, r25	; 0x3f
    8762:	8e af       	std	Y+62, r24	; 0x3e
    8764:	65 97       	sbiw	r28, 0x15	; 21
    8766:	a3 96       	adiw	r28, 0x23	; 35
    8768:	ee ad       	ldd	r30, Y+62	; 0x3e
    876a:	ff ad       	ldd	r31, Y+63	; 0x3f
    876c:	a3 97       	sbiw	r28, 0x23	; 35
    876e:	e4 34       	cpi	r30, 0x44	; 68
    8770:	f1 05       	cpc	r31, r1
    8772:	09 f0       	breq	.+2      	; 0x8776 <_printf_fn+0x376>
    8774:	ac c0       	rjmp	.+344    	; 0x88ce <_printf_fn+0x4ce>
    8776:	97 ff       	sbrs	r25, 7
    8778:	a7 c0       	rjmp	.+334    	; 0x88c8 <_printf_fn+0x4c8>
    877a:	68 94       	set
    877c:	96 f8       	bld	r9, 6
    877e:	91 95       	neg	r25
    8780:	81 95       	neg	r24
    8782:	91 09       	sbc	r25, r1
    8784:	65 96       	adiw	r28, 0x15	; 21
    8786:	9f af       	std	Y+63, r25	; 0x3f
    8788:	8e af       	std	Y+62, r24	; 0x3e
    878a:	65 97       	sbiw	r28, 0x15	; 21
    878c:	9d c0       	rjmp	.+314    	; 0x88c8 <_printf_fn+0x4c8>
    878e:	f4 e0       	ldi	r31, 0x04	; 4
    8790:	4f 16       	cp	r4, r31
    8792:	51 04       	cpc	r5, r1
    8794:	59 f5       	brne	.+86     	; 0x87ec <_printf_fn+0x3ec>
    8796:	51 01       	movw	r10, r2
    8798:	24 e0       	ldi	r18, 0x04	; 4
    879a:	a2 0e       	add	r10, r18
    879c:	b1 1c       	adc	r11, r1
    879e:	f1 01       	movw	r30, r2
    87a0:	80 81       	ld	r24, Z
    87a2:	91 81       	ldd	r25, Z+1	; 0x01
    87a4:	a2 81       	ldd	r26, Z+2	; 0x02
    87a6:	b3 81       	ldd	r27, Z+3	; 0x03
    87a8:	2f 96       	adiw	r28, 0x0f	; 15
    87aa:	8c af       	std	Y+60, r24	; 0x3c
    87ac:	9d af       	std	Y+61, r25	; 0x3d
    87ae:	ae af       	std	Y+62, r26	; 0x3e
    87b0:	bf af       	std	Y+63, r27	; 0x3f
    87b2:	2f 97       	sbiw	r28, 0x0f	; 15
    87b4:	a3 96       	adiw	r28, 0x23	; 35
    87b6:	2e ad       	ldd	r18, Y+62	; 0x3e
    87b8:	3f ad       	ldd	r19, Y+63	; 0x3f
    87ba:	a3 97       	sbiw	r28, 0x23	; 35
    87bc:	24 34       	cpi	r18, 0x44	; 68
    87be:	31 05       	cpc	r19, r1
    87c0:	09 f0       	breq	.+2      	; 0x87c4 <_printf_fn+0x3c4>
    87c2:	8f c0       	rjmp	.+286    	; 0x88e2 <_printf_fn+0x4e2>
    87c4:	b7 ff       	sbrs	r27, 7
    87c6:	8a c0       	rjmp	.+276    	; 0x88dc <_printf_fn+0x4dc>
    87c8:	68 94       	set
    87ca:	96 f8       	bld	r9, 6
    87cc:	b0 95       	com	r27
    87ce:	a0 95       	com	r26
    87d0:	90 95       	com	r25
    87d2:	81 95       	neg	r24
    87d4:	9f 4f       	sbci	r25, 0xFF	; 255
    87d6:	af 4f       	sbci	r26, 0xFF	; 255
    87d8:	bf 4f       	sbci	r27, 0xFF	; 255
    87da:	2f 96       	adiw	r28, 0x0f	; 15
    87dc:	8c af       	std	Y+60, r24	; 0x3c
    87de:	9d af       	std	Y+61, r25	; 0x3d
    87e0:	ae af       	std	Y+62, r26	; 0x3e
    87e2:	bf af       	std	Y+63, r27	; 0x3f
    87e4:	2f 97       	sbiw	r28, 0x0f	; 15
    87e6:	7a c0       	rjmp	.+244    	; 0x88dc <_printf_fn+0x4dc>
    87e8:	81 e0       	ldi	r24, 0x01	; 1
    87ea:	90 e0       	ldi	r25, 0x00	; 0
    87ec:	51 01       	movw	r10, r2
    87ee:	38 e0       	ldi	r19, 0x08	; 8
    87f0:	43 16       	cp	r4, r19
    87f2:	51 04       	cpc	r5, r1
    87f4:	09 f0       	breq	.+2      	; 0x87f8 <_printf_fn+0x3f8>
    87f6:	7c c0       	rjmp	.+248    	; 0x88f0 <_printf_fn+0x4f0>
    87f8:	48 e0       	ldi	r20, 0x08	; 8
    87fa:	a4 0e       	add	r10, r20
    87fc:	b1 1c       	adc	r11, r1
    87fe:	d1 01       	movw	r26, r2
    8800:	fc 90       	ld	r15, X
    8802:	f1 01       	movw	r30, r2
    8804:	01 81       	ldd	r16, Z+1	; 0x01
    8806:	12 81       	ldd	r17, Z+2	; 0x02
    8808:	f3 81       	ldd	r31, Z+3	; 0x03
    880a:	aa 96       	adiw	r28, 0x2a	; 42
    880c:	ff af       	std	Y+63, r31	; 0x3f
    880e:	aa 97       	sbiw	r28, 0x2a	; 42
    8810:	f1 01       	movw	r30, r2
    8812:	f4 81       	ldd	r31, Z+4	; 0x04
    8814:	ab 96       	adiw	r28, 0x2b	; 43
    8816:	ff af       	std	Y+63, r31	; 0x3f
    8818:	ab 97       	sbiw	r28, 0x2b	; 43
    881a:	f1 01       	movw	r30, r2
    881c:	b5 81       	ldd	r27, Z+5	; 0x05
    881e:	f6 81       	ldd	r31, Z+6	; 0x06
    8820:	af 96       	adiw	r28, 0x2f	; 47
    8822:	ff af       	std	Y+63, r31	; 0x3f
    8824:	af 97       	sbiw	r28, 0x2f	; 47
    8826:	f1 01       	movw	r30, r2
    8828:	37 80       	ldd	r3, Z+7	; 0x07
    882a:	24 96       	adiw	r28, 0x04	; 4
    882c:	ff ae       	std	Y+63, r15	; 0x3f
    882e:	24 97       	sbiw	r28, 0x04	; 4
    8830:	25 96       	adiw	r28, 0x05	; 5
    8832:	0f af       	std	Y+63, r16	; 0x3f
    8834:	25 97       	sbiw	r28, 0x05	; 5
    8836:	26 96       	adiw	r28, 0x06	; 6
    8838:	1f af       	std	Y+63, r17	; 0x3f
    883a:	26 97       	sbiw	r28, 0x06	; 6
    883c:	aa 96       	adiw	r28, 0x2a	; 42
    883e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8840:	aa 97       	sbiw	r28, 0x2a	; 42
    8842:	27 96       	adiw	r28, 0x07	; 7
    8844:	ff af       	std	Y+63, r31	; 0x3f
    8846:	27 97       	sbiw	r28, 0x07	; 7
    8848:	ab 96       	adiw	r28, 0x2b	; 43
    884a:	ef ad       	ldd	r30, Y+63	; 0x3f
    884c:	ab 97       	sbiw	r28, 0x2b	; 43
    884e:	28 96       	adiw	r28, 0x08	; 8
    8850:	ef af       	std	Y+63, r30	; 0x3f
    8852:	28 97       	sbiw	r28, 0x08	; 8
    8854:	29 96       	adiw	r28, 0x09	; 9
    8856:	bf af       	std	Y+63, r27	; 0x3f
    8858:	29 97       	sbiw	r28, 0x09	; 9
    885a:	af 96       	adiw	r28, 0x2f	; 47
    885c:	ff ad       	ldd	r31, Y+63	; 0x3f
    885e:	af 97       	sbiw	r28, 0x2f	; 47
    8860:	2a 96       	adiw	r28, 0x0a	; 10
    8862:	ff af       	std	Y+63, r31	; 0x3f
    8864:	2a 97       	sbiw	r28, 0x0a	; 10
    8866:	2b 96       	adiw	r28, 0x0b	; 11
    8868:	3f ae       	std	Y+63, r3	; 0x3f
    886a:	2b 97       	sbiw	r28, 0x0b	; 11
    886c:	89 2b       	or	r24, r25
    886e:	09 f4       	brne	.+2      	; 0x8872 <_printf_fn+0x472>
    8870:	4a c0       	rjmp	.+148    	; 0x8906 <_printf_fn+0x506>
    8872:	2f 2d       	mov	r18, r15
    8874:	30 2f       	mov	r19, r16
    8876:	41 2f       	mov	r20, r17
    8878:	aa 96       	adiw	r28, 0x2a	; 42
    887a:	5f ad       	ldd	r21, Y+63	; 0x3f
    887c:	aa 97       	sbiw	r28, 0x2a	; 42
    887e:	6e 2f       	mov	r22, r30
    8880:	7b 2f       	mov	r23, r27
    8882:	8f 2f       	mov	r24, r31
    8884:	93 2d       	mov	r25, r3
    8886:	a0 e0       	ldi	r26, 0x00	; 0
    8888:	0e 94 a4 e6 	call	0x1cd48	; 0x1cd48 <__cmpdi2_s8>
    888c:	e4 f5       	brge	.+120    	; 0x8906 <_printf_fn+0x506>
    888e:	68 94       	set
    8890:	96 f8       	bld	r9, 6
    8892:	0e 94 56 e6 	call	0x1ccac	; 0x1ccac <__negdi2>
    8896:	24 96       	adiw	r28, 0x04	; 4
    8898:	2f af       	std	Y+63, r18	; 0x3f
    889a:	24 97       	sbiw	r28, 0x04	; 4
    889c:	25 96       	adiw	r28, 0x05	; 5
    889e:	3f af       	std	Y+63, r19	; 0x3f
    88a0:	25 97       	sbiw	r28, 0x05	; 5
    88a2:	26 96       	adiw	r28, 0x06	; 6
    88a4:	4f af       	std	Y+63, r20	; 0x3f
    88a6:	26 97       	sbiw	r28, 0x06	; 6
    88a8:	27 96       	adiw	r28, 0x07	; 7
    88aa:	5f af       	std	Y+63, r21	; 0x3f
    88ac:	27 97       	sbiw	r28, 0x07	; 7
    88ae:	28 96       	adiw	r28, 0x08	; 8
    88b0:	6f af       	std	Y+63, r22	; 0x3f
    88b2:	28 97       	sbiw	r28, 0x08	; 8
    88b4:	29 96       	adiw	r28, 0x09	; 9
    88b6:	7f af       	std	Y+63, r23	; 0x3f
    88b8:	29 97       	sbiw	r28, 0x09	; 9
    88ba:	2a 96       	adiw	r28, 0x0a	; 10
    88bc:	8f af       	std	Y+63, r24	; 0x3f
    88be:	2a 97       	sbiw	r28, 0x0a	; 10
    88c0:	2b 96       	adiw	r28, 0x0b	; 11
    88c2:	9f af       	std	Y+63, r25	; 0x3f
    88c4:	2b 97       	sbiw	r28, 0x0b	; 11
    88c6:	1f c0       	rjmp	.+62     	; 0x8906 <_printf_fn+0x506>
    88c8:	22 e0       	ldi	r18, 0x02	; 2
    88ca:	42 2e       	mov	r4, r18
    88cc:	51 2c       	mov	r5, r1
    88ce:	6c 96       	adiw	r28, 0x1c	; 28
    88d0:	8f ad       	ldd	r24, Y+63	; 0x3f
    88d2:	6c 97       	sbiw	r28, 0x1c	; 28
    88d4:	6d 96       	adiw	r28, 0x1d	; 29
    88d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    88d8:	6d 97       	sbiw	r28, 0x1d	; 29
    88da:	1b c0       	rjmp	.+54     	; 0x8912 <_printf_fn+0x512>
    88dc:	94 e0       	ldi	r25, 0x04	; 4
    88de:	49 2e       	mov	r4, r25
    88e0:	51 2c       	mov	r5, r1
    88e2:	6a 96       	adiw	r28, 0x1a	; 26
    88e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    88e6:	6a 97       	sbiw	r28, 0x1a	; 26
    88e8:	6b 96       	adiw	r28, 0x1b	; 27
    88ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    88ec:	6b 97       	sbiw	r28, 0x1b	; 27
    88ee:	11 c0       	rjmp	.+34     	; 0x8912 <_printf_fn+0x512>
    88f0:	66 96       	adiw	r28, 0x16	; 22
    88f2:	8f ad       	ldd	r24, Y+63	; 0x3f
    88f4:	66 97       	sbiw	r28, 0x16	; 22
    88f6:	67 96       	adiw	r28, 0x17	; 23
    88f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    88fa:	67 97       	sbiw	r28, 0x17	; 23
    88fc:	a3 96       	adiw	r28, 0x23	; 35
    88fe:	1f ae       	std	Y+63, r1	; 0x3f
    8900:	1e ae       	std	Y+62, r1	; 0x3e
    8902:	a3 97       	sbiw	r28, 0x23	; 35
    8904:	06 c0       	rjmp	.+12     	; 0x8912 <_printf_fn+0x512>
    8906:	68 96       	adiw	r28, 0x18	; 24
    8908:	8f ad       	ldd	r24, Y+63	; 0x3f
    890a:	68 97       	sbiw	r28, 0x18	; 24
    890c:	69 96       	adiw	r28, 0x19	; 25
    890e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8910:	69 97       	sbiw	r28, 0x19	; 25
    8912:	2f ef       	ldi	r18, 0xFF	; 255
    8914:	62 1a       	sub	r6, r18
    8916:	72 0a       	sbc	r7, r18
    8918:	82 0a       	sbc	r8, r18
    891a:	15 01       	movw	r2, r10
    891c:	33 c0       	rjmp	.+102    	; 0x8984 <_printf_fn+0x584>
    891e:	91 fc       	sbrc	r9, 1
    8920:	08 c0       	rjmp	.+16     	; 0x8932 <_printf_fn+0x532>
    8922:	68 94       	set
    8924:	91 f8       	bld	r9, 1
    8926:	46 e0       	ldi	r20, 0x06	; 6
    8928:	50 e0       	ldi	r21, 0x00	; 0
    892a:	a1 96       	adiw	r28, 0x21	; 33
    892c:	5f af       	std	Y+63, r21	; 0x3f
    892e:	4e af       	std	Y+62, r20	; 0x3e
    8930:	a1 97       	sbiw	r28, 0x21	; 33
    8932:	d1 01       	movw	r26, r2
    8934:	8d 91       	ld	r24, X+
    8936:	9d 91       	ld	r25, X+
    8938:	0d 90       	ld	r0, X+
    893a:	bc 91       	ld	r27, X
    893c:	a0 2d       	mov	r26, r0
    893e:	a9 96       	adiw	r28, 0x29	; 41
    8940:	8c af       	std	Y+60, r24	; 0x3c
    8942:	9d af       	std	Y+61, r25	; 0x3d
    8944:	ae af       	std	Y+62, r26	; 0x3e
    8946:	bf af       	std	Y+63, r27	; 0x3f
    8948:	a9 97       	sbiw	r28, 0x29	; 41
    894a:	bf ef       	ldi	r27, 0xFF	; 255
    894c:	6b 1a       	sub	r6, r27
    894e:	7b 0a       	sbc	r7, r27
    8950:	8b 0a       	sbc	r8, r27
    8952:	f1 01       	movw	r30, r2
    8954:	34 96       	adiw	r30, 0x04	; 4
    8956:	1f 01       	movw	r2, r30
    8958:	0f c0       	rjmp	.+30     	; 0x8978 <_printf_fn+0x578>
    895a:	ff ef       	ldi	r31, 0xFF	; 255
    895c:	6f 1a       	sub	r6, r31
    895e:	7f 0a       	sbc	r7, r31
    8960:	8f 0a       	sbc	r8, r31
    8962:	c5 c0       	rjmp	.+394    	; 0x8aee <_printf_fn+0x6ee>
    8964:	2f ef       	ldi	r18, 0xFF	; 255
    8966:	62 1a       	sub	r6, r18
    8968:	72 0a       	sbc	r7, r18
    896a:	82 0a       	sbc	r8, r18
    896c:	11 c1       	rjmp	.+546    	; 0x8b90 <_printf_fn+0x790>
    896e:	3f ef       	ldi	r19, 0xFF	; 255
    8970:	63 1a       	sub	r6, r19
    8972:	73 0a       	sbc	r7, r19
    8974:	83 0a       	sbc	r8, r19
    8976:	c8 c0       	rjmp	.+400    	; 0x8b08 <_printf_fn+0x708>
    8978:	66 96       	adiw	r28, 0x16	; 22
    897a:	8f ad       	ldd	r24, Y+63	; 0x3f
    897c:	66 97       	sbiw	r28, 0x16	; 22
    897e:	67 96       	adiw	r28, 0x17	; 23
    8980:	9f ad       	ldd	r25, Y+63	; 0x3f
    8982:	67 97       	sbiw	r28, 0x17	; 23
    8984:	a3 96       	adiw	r28, 0x23	; 35
    8986:	ee ad       	ldd	r30, Y+62	; 0x3e
    8988:	ff ad       	ldd	r31, Y+63	; 0x3f
    898a:	a3 97       	sbiw	r28, 0x23	; 35
    898c:	e2 54       	subi	r30, 0x42	; 66
    898e:	f1 09       	sbc	r31, r1
    8990:	e7 33       	cpi	r30, 0x37	; 55
    8992:	f1 05       	cpc	r31, r1
    8994:	08 f0       	brcs	.+2      	; 0x8998 <_printf_fn+0x598>
    8996:	56 c1       	rjmp	.+684    	; 0x8c44 <_printf_fn+0x844>
    8998:	e3 58       	subi	r30, 0x83	; 131
    899a:	ff 4f       	sbci	r31, 0xFF	; 255
    899c:	0c 94 37 e6 	jmp	0x1cc6e	; 0x1cc6e <__tablejump2__>
    89a0:	e8 94       	clt
    89a2:	94 f8       	bld	r9, 4
    89a4:	e8 94       	clt
    89a6:	92 f8       	bld	r9, 2
    89a8:	a9 2c       	mov	r10, r9
    89aa:	b1 2c       	mov	r11, r1
    89ac:	a1 96       	adiw	r28, 0x21	; 33
    89ae:	ce ac       	ldd	r12, Y+62	; 0x3e
    89b0:	df ac       	ldd	r13, Y+63	; 0x3f
    89b2:	a1 97       	sbiw	r28, 0x21	; 33
    89b4:	6f 96       	adiw	r28, 0x1f	; 31
    89b6:	ee ac       	ldd	r14, Y+62	; 0x3e
    89b8:	ff ac       	ldd	r15, Y+63	; 0x3f
    89ba:	6f 97       	sbiw	r28, 0x1f	; 31
    89bc:	0a e0       	ldi	r16, 0x0A	; 10
    89be:	10 e0       	ldi	r17, 0x00	; 0
    89c0:	19 c0       	rjmp	.+50     	; 0x89f4 <_printf_fn+0x5f4>
    89c2:	a9 2c       	mov	r10, r9
    89c4:	b1 2c       	mov	r11, r1
    89c6:	a1 96       	adiw	r28, 0x21	; 33
    89c8:	ce ac       	ldd	r12, Y+62	; 0x3e
    89ca:	df ac       	ldd	r13, Y+63	; 0x3f
    89cc:	a1 97       	sbiw	r28, 0x21	; 33
    89ce:	6f 96       	adiw	r28, 0x1f	; 31
    89d0:	ee ac       	ldd	r14, Y+62	; 0x3e
    89d2:	ff ac       	ldd	r15, Y+63	; 0x3f
    89d4:	6f 97       	sbiw	r28, 0x1f	; 31
    89d6:	02 e0       	ldi	r16, 0x02	; 2
    89d8:	10 e0       	ldi	r17, 0x00	; 0
    89da:	0c c0       	rjmp	.+24     	; 0x89f4 <_printf_fn+0x5f4>
    89dc:	a9 2c       	mov	r10, r9
    89de:	b1 2c       	mov	r11, r1
    89e0:	a1 96       	adiw	r28, 0x21	; 33
    89e2:	ce ac       	ldd	r12, Y+62	; 0x3e
    89e4:	df ac       	ldd	r13, Y+63	; 0x3f
    89e6:	a1 97       	sbiw	r28, 0x21	; 33
    89e8:	6f 96       	adiw	r28, 0x1f	; 31
    89ea:	ee ac       	ldd	r14, Y+62	; 0x3e
    89ec:	ff ac       	ldd	r15, Y+63	; 0x3f
    89ee:	6f 97       	sbiw	r28, 0x1f	; 31
    89f0:	08 e0       	ldi	r16, 0x08	; 8
    89f2:	10 e0       	ldi	r17, 0x00	; 0
    89f4:	22 e4       	ldi	r18, 0x42	; 66
    89f6:	30 e0       	ldi	r19, 0x00	; 0
    89f8:	ae 01       	movw	r20, r28
    89fa:	4f 5f       	subi	r20, 0xFF	; 255
    89fc:	5f 4f       	sbci	r21, 0xFF	; 255
    89fe:	b2 01       	movw	r22, r4
    8a00:	7d d9       	rcall	.-3334   	; 0x7cfc <p_ntoa>
    8a02:	34 c0       	rjmp	.+104    	; 0x8a6c <_printf_fn+0x66c>
    8a04:	a9 2c       	mov	r10, r9
    8a06:	b1 2c       	mov	r11, r1
    8a08:	a1 96       	adiw	r28, 0x21	; 33
    8a0a:	ce ac       	ldd	r12, Y+62	; 0x3e
    8a0c:	df ac       	ldd	r13, Y+63	; 0x3f
    8a0e:	a1 97       	sbiw	r28, 0x21	; 33
    8a10:	6f 96       	adiw	r28, 0x1f	; 31
    8a12:	ee ac       	ldd	r14, Y+62	; 0x3e
    8a14:	ff ac       	ldd	r15, Y+63	; 0x3f
    8a16:	6f 97       	sbiw	r28, 0x1f	; 31
    8a18:	00 e1       	ldi	r16, 0x10	; 16
    8a1a:	10 e0       	ldi	r17, 0x00	; 0
    8a1c:	22 e4       	ldi	r18, 0x42	; 66
    8a1e:	30 e0       	ldi	r19, 0x00	; 0
    8a20:	ae 01       	movw	r20, r28
    8a22:	4f 5f       	subi	r20, 0xFF	; 255
    8a24:	5f 4f       	sbci	r21, 0xFF	; 255
    8a26:	b2 01       	movw	r22, r4
    8a28:	69 d9       	rcall	.-3374   	; 0x7cfc <p_ntoa>
    8a2a:	6c 01       	movw	r12, r24
    8a2c:	a3 96       	adiw	r28, 0x23	; 35
    8a2e:	6e ad       	ldd	r22, Y+62	; 0x3e
    8a30:	7f ad       	ldd	r23, Y+63	; 0x3f
    8a32:	a3 97       	sbiw	r28, 0x23	; 35
    8a34:	67 7f       	andi	r22, 0xF7	; 247
    8a36:	60 35       	cpi	r22, 0x50	; 80
    8a38:	71 05       	cpc	r23, r1
    8a3a:	09 f0       	breq	.+2      	; 0x8a3e <_printf_fn+0x63e>
    8a3c:	3f c0       	rjmp	.+126    	; 0x8abc <_printf_fn+0x6bc>
    8a3e:	3a c0       	rjmp	.+116    	; 0x8ab4 <_printf_fn+0x6b4>
    8a40:	c9 2c       	mov	r12, r9
    8a42:	d1 2c       	mov	r13, r1
    8a44:	a1 96       	adiw	r28, 0x21	; 33
    8a46:	ee ac       	ldd	r14, Y+62	; 0x3e
    8a48:	ff ac       	ldd	r15, Y+63	; 0x3f
    8a4a:	a1 97       	sbiw	r28, 0x21	; 33
    8a4c:	6f 96       	adiw	r28, 0x1f	; 31
    8a4e:	0e ad       	ldd	r16, Y+62	; 0x3e
    8a50:	1f ad       	ldd	r17, Y+63	; 0x3f
    8a52:	6f 97       	sbiw	r28, 0x1f	; 31
    8a54:	22 e4       	ldi	r18, 0x42	; 66
    8a56:	30 e0       	ldi	r19, 0x00	; 0
    8a58:	ae 01       	movw	r20, r28
    8a5a:	4f 5f       	subi	r20, 0xFF	; 255
    8a5c:	5f 4f       	sbci	r21, 0xFF	; 255
    8a5e:	a9 96       	adiw	r28, 0x29	; 41
    8a60:	6c ad       	ldd	r22, Y+60	; 0x3c
    8a62:	7d ad       	ldd	r23, Y+61	; 0x3d
    8a64:	8e ad       	ldd	r24, Y+62	; 0x3e
    8a66:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a68:	a9 97       	sbiw	r28, 0x29	; 41
    8a6a:	9d d9       	rcall	.-3270   	; 0x7da6 <p_ftoa>
    8a6c:	93 fa       	bst	r9, 3
    8a6e:	00 27       	eor	r16, r16
    8a70:	00 f9       	bld	r16, 0
    8a72:	10 e0       	ldi	r17, 0x00	; 0
    8a74:	9c 01       	movw	r18, r24
    8a76:	27 c0       	rjmp	.+78     	; 0x8ac6 <_printf_fn+0x6c6>
    8a78:	c9 2c       	mov	r12, r9
    8a7a:	d1 2c       	mov	r13, r1
    8a7c:	a1 96       	adiw	r28, 0x21	; 33
    8a7e:	ee ac       	ldd	r14, Y+62	; 0x3e
    8a80:	ff ac       	ldd	r15, Y+63	; 0x3f
    8a82:	a1 97       	sbiw	r28, 0x21	; 33
    8a84:	6f 96       	adiw	r28, 0x1f	; 31
    8a86:	0e ad       	ldd	r16, Y+62	; 0x3e
    8a88:	1f ad       	ldd	r17, Y+63	; 0x3f
    8a8a:	6f 97       	sbiw	r28, 0x1f	; 31
    8a8c:	22 e4       	ldi	r18, 0x42	; 66
    8a8e:	30 e0       	ldi	r19, 0x00	; 0
    8a90:	ae 01       	movw	r20, r28
    8a92:	4f 5f       	subi	r20, 0xFF	; 255
    8a94:	5f 4f       	sbci	r21, 0xFF	; 255
    8a96:	a9 96       	adiw	r28, 0x29	; 41
    8a98:	6c ad       	ldd	r22, Y+60	; 0x3c
    8a9a:	7d ad       	ldd	r23, Y+61	; 0x3d
    8a9c:	8e ad       	ldd	r24, Y+62	; 0x3e
    8a9e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8aa0:	a9 97       	sbiw	r28, 0x29	; 41
    8aa2:	88 da       	rcall	.-2800   	; 0x7fb4 <p_etoa>
    8aa4:	6c 01       	movw	r12, r24
    8aa6:	a3 96       	adiw	r28, 0x23	; 35
    8aa8:	4e ad       	ldd	r20, Y+62	; 0x3e
    8aaa:	5f ad       	ldd	r21, Y+63	; 0x3f
    8aac:	a3 97       	sbiw	r28, 0x23	; 35
    8aae:	45 34       	cpi	r20, 0x45	; 69
    8ab0:	51 05       	cpc	r21, r1
    8ab2:	21 f4       	brne	.+8      	; 0x8abc <_printf_fn+0x6bc>
    8ab4:	ce 01       	movw	r24, r28
    8ab6:	01 96       	adiw	r24, 0x01	; 1
    8ab8:	0e 94 33 31 	call	0x6266	; 0x6266 <strupper>
    8abc:	93 fa       	bst	r9, 3
    8abe:	00 27       	eor	r16, r16
    8ac0:	00 f9       	bld	r16, 0
    8ac2:	10 e0       	ldi	r17, 0x00	; 0
    8ac4:	96 01       	movw	r18, r12
    8ac6:	6f 96       	adiw	r28, 0x1f	; 31
    8ac8:	4e ad       	ldd	r20, Y+62	; 0x3e
    8aca:	5f ad       	ldd	r21, Y+63	; 0x3f
    8acc:	6f 97       	sbiw	r28, 0x1f	; 31
    8ace:	be 01       	movw	r22, r28
    8ad0:	6f 5f       	subi	r22, 0xFF	; 255
    8ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    8ad4:	a5 96       	adiw	r28, 0x25	; 37
    8ad6:	8e ad       	ldd	r24, Y+62	; 0x3e
    8ad8:	9f ad       	ldd	r25, Y+63	; 0x3f
    8ada:	a5 97       	sbiw	r28, 0x25	; 37
    8adc:	d7 db       	rcall	.-2130   	; 0x828c <_puts_pad>
    8ade:	b6 c0       	rjmp	.+364    	; 0x8c4c <_printf_fn+0x84c>
    8ae0:	a3 96       	adiw	r28, 0x23	; 35
    8ae2:	8e ad       	ldd	r24, Y+62	; 0x3e
    8ae4:	9f ad       	ldd	r25, Y+63	; 0x3f
    8ae6:	a3 97       	sbiw	r28, 0x23	; 35
    8ae8:	83 37       	cpi	r24, 0x73	; 115
    8aea:	91 05       	cpc	r25, r1
    8aec:	69 f4       	brne	.+26     	; 0x8b08 <_printf_fn+0x708>
    8aee:	61 01       	movw	r12, r2
    8af0:	92 e0       	ldi	r25, 0x02	; 2
    8af2:	c9 0e       	add	r12, r25
    8af4:	d1 1c       	adc	r13, r1
    8af6:	d1 01       	movw	r26, r2
    8af8:	6d 91       	ld	r22, X+
    8afa:	7c 91       	ld	r23, X
    8afc:	61 15       	cp	r22, r1
    8afe:	71 05       	cpc	r23, r1
    8b00:	91 f4       	brne	.+36     	; 0x8b26 <_printf_fn+0x726>
    8b02:	6a e1       	ldi	r22, 0x1A	; 26
    8b04:	74 e0       	ldi	r23, 0x04	; 4
    8b06:	0f c0       	rjmp	.+30     	; 0x8b26 <_printf_fn+0x726>
    8b08:	61 01       	movw	r12, r2
    8b0a:	b2 e0       	ldi	r27, 0x02	; 2
    8b0c:	cb 0e       	add	r12, r27
    8b0e:	d1 1c       	adc	r13, r1
    8b10:	f1 01       	movw	r30, r2
    8b12:	80 81       	ld	r24, Z
    8b14:	60 96       	adiw	r28, 0x10	; 16
    8b16:	8f af       	std	Y+63, r24	; 0x3f
    8b18:	60 97       	sbiw	r28, 0x10	; 16
    8b1a:	61 96       	adiw	r28, 0x11	; 17
    8b1c:	1f ae       	std	Y+63, r1	; 0x3f
    8b1e:	61 97       	sbiw	r28, 0x11	; 17
    8b20:	be 01       	movw	r22, r28
    8b22:	61 5b       	subi	r22, 0xB1	; 177
    8b24:	7f 4f       	sbci	r23, 0xFF	; 255
    8b26:	fb 01       	movw	r30, r22
    8b28:	01 90       	ld	r0, Z+
    8b2a:	00 20       	and	r0, r0
    8b2c:	e9 f7       	brne	.-6      	; 0x8b28 <_printf_fn+0x728>
    8b2e:	31 97       	sbiw	r30, 0x01	; 1
    8b30:	e6 1b       	sub	r30, r22
    8b32:	f7 0b       	sbc	r31, r23
    8b34:	a1 96       	adiw	r28, 0x21	; 33
    8b36:	2e ad       	ldd	r18, Y+62	; 0x3e
    8b38:	3f ad       	ldd	r19, Y+63	; 0x3f
    8b3a:	a1 97       	sbiw	r28, 0x21	; 33
    8b3c:	23 2b       	or	r18, r19
    8b3e:	21 f4       	brne	.+8      	; 0x8b48 <_printf_fn+0x748>
    8b40:	a1 96       	adiw	r28, 0x21	; 33
    8b42:	ff af       	std	Y+63, r31	; 0x3f
    8b44:	ee af       	std	Y+62, r30	; 0x3e
    8b46:	a1 97       	sbiw	r28, 0x21	; 33
    8b48:	6f 96       	adiw	r28, 0x1f	; 31
    8b4a:	4e ad       	ldd	r20, Y+62	; 0x3e
    8b4c:	5f ad       	ldd	r21, Y+63	; 0x3f
    8b4e:	6f 97       	sbiw	r28, 0x1f	; 31
    8b50:	a1 96       	adiw	r28, 0x21	; 33
    8b52:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b54:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b56:	a1 97       	sbiw	r28, 0x21	; 33
    8b58:	48 17       	cp	r20, r24
    8b5a:	59 07       	cpc	r21, r25
    8b5c:	3c f4       	brge	.+14     	; 0x8b6c <_printf_fn+0x76c>
    8b5e:	41 15       	cp	r20, r1
    8b60:	51 05       	cpc	r21, r1
    8b62:	21 f0       	breq	.+8      	; 0x8b6c <_printf_fn+0x76c>
    8b64:	a1 96       	adiw	r28, 0x21	; 33
    8b66:	5f af       	std	Y+63, r21	; 0x3f
    8b68:	4e af       	std	Y+62, r20	; 0x3e
    8b6a:	a1 97       	sbiw	r28, 0x21	; 33
    8b6c:	93 fa       	bst	r9, 3
    8b6e:	00 27       	eor	r16, r16
    8b70:	00 f9       	bld	r16, 0
    8b72:	10 e0       	ldi	r17, 0x00	; 0
    8b74:	a1 96       	adiw	r28, 0x21	; 33
    8b76:	2e ad       	ldd	r18, Y+62	; 0x3e
    8b78:	3f ad       	ldd	r19, Y+63	; 0x3f
    8b7a:	a1 97       	sbiw	r28, 0x21	; 33
    8b7c:	6f 96       	adiw	r28, 0x1f	; 31
    8b7e:	4e ad       	ldd	r20, Y+62	; 0x3e
    8b80:	5f ad       	ldd	r21, Y+63	; 0x3f
    8b82:	6f 97       	sbiw	r28, 0x1f	; 31
    8b84:	a5 96       	adiw	r28, 0x25	; 37
    8b86:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b88:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b8a:	a5 97       	sbiw	r28, 0x25	; 37
    8b8c:	7f db       	rcall	.-2306   	; 0x828c <_puts_pad>
    8b8e:	45 c0       	rjmp	.+138    	; 0x8c1a <_printf_fn+0x81a>
    8b90:	61 01       	movw	r12, r2
    8b92:	92 e0       	ldi	r25, 0x02	; 2
    8b94:	c9 0e       	add	r12, r25
    8b96:	d1 1c       	adc	r13, r1
    8b98:	d1 01       	movw	r26, r2
    8b9a:	2d 90       	ld	r2, X+
    8b9c:	3c 90       	ld	r3, X
    8b9e:	41 2c       	mov	r4, r1
    8ba0:	21 14       	cp	r2, r1
    8ba2:	31 04       	cpc	r3, r1
    8ba4:	41 04       	cpc	r4, r1
    8ba6:	29 f4       	brne	.+10     	; 0x8bb2 <_printf_fn+0x7b2>
    8ba8:	ae 96       	adiw	r28, 0x2e	; 46
    8baa:	2d ac       	ldd	r2, Y+61	; 0x3d
    8bac:	3e ac       	ldd	r3, Y+62	; 0x3e
    8bae:	4f ac       	ldd	r4, Y+63	; 0x3f
    8bb0:	ae 97       	sbiw	r28, 0x2e	; 46
    8bb2:	84 2d       	mov	r24, r4
    8bb4:	b1 01       	movw	r22, r2
    8bb6:	08 dc       	rcall	.-2032   	; 0x83c8 <strlen_X>
    8bb8:	a1 96       	adiw	r28, 0x21	; 33
    8bba:	ee ad       	ldd	r30, Y+62	; 0x3e
    8bbc:	ff ad       	ldd	r31, Y+63	; 0x3f
    8bbe:	a1 97       	sbiw	r28, 0x21	; 33
    8bc0:	ef 2b       	or	r30, r31
    8bc2:	31 f4       	brne	.+12     	; 0x8bd0 <_printf_fn+0x7d0>
    8bc4:	a0 96       	adiw	r28, 0x20	; 32
    8bc6:	8f af       	std	Y+63, r24	; 0x3f
    8bc8:	a0 97       	sbiw	r28, 0x20	; 32
    8bca:	a1 96       	adiw	r28, 0x21	; 33
    8bcc:	9f af       	std	Y+63, r25	; 0x3f
    8bce:	a1 97       	sbiw	r28, 0x21	; 33
    8bd0:	6f 96       	adiw	r28, 0x1f	; 31
    8bd2:	2e ad       	ldd	r18, Y+62	; 0x3e
    8bd4:	3f ad       	ldd	r19, Y+63	; 0x3f
    8bd6:	6f 97       	sbiw	r28, 0x1f	; 31
    8bd8:	a1 96       	adiw	r28, 0x21	; 33
    8bda:	4e ad       	ldd	r20, Y+62	; 0x3e
    8bdc:	5f ad       	ldd	r21, Y+63	; 0x3f
    8bde:	a1 97       	sbiw	r28, 0x21	; 33
    8be0:	24 17       	cp	r18, r20
    8be2:	35 07       	cpc	r19, r21
    8be4:	3c f4       	brge	.+14     	; 0x8bf4 <_printf_fn+0x7f4>
    8be6:	21 15       	cp	r18, r1
    8be8:	31 05       	cpc	r19, r1
    8bea:	21 f0       	breq	.+8      	; 0x8bf4 <_printf_fn+0x7f4>
    8bec:	a1 96       	adiw	r28, 0x21	; 33
    8bee:	3f af       	std	Y+63, r19	; 0x3f
    8bf0:	2e af       	std	Y+62, r18	; 0x3e
    8bf2:	a1 97       	sbiw	r28, 0x21	; 33
    8bf4:	93 fa       	bst	r9, 3
    8bf6:	ee 24       	eor	r14, r14
    8bf8:	e0 f8       	bld	r14, 0
    8bfa:	f1 2c       	mov	r15, r1
    8bfc:	a1 96       	adiw	r28, 0x21	; 33
    8bfe:	0e ad       	ldd	r16, Y+62	; 0x3e
    8c00:	1f ad       	ldd	r17, Y+63	; 0x3f
    8c02:	a1 97       	sbiw	r28, 0x21	; 33
    8c04:	6f 96       	adiw	r28, 0x1f	; 31
    8c06:	2e ad       	ldd	r18, Y+62	; 0x3e
    8c08:	3f ad       	ldd	r19, Y+63	; 0x3f
    8c0a:	6f 97       	sbiw	r28, 0x1f	; 31
    8c0c:	64 2d       	mov	r22, r4
    8c0e:	a1 01       	movw	r20, r2
    8c10:	a5 96       	adiw	r28, 0x25	; 37
    8c12:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c14:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c16:	a5 97       	sbiw	r28, 0x25	; 37
    8c18:	7b db       	rcall	.-2314   	; 0x8310 <_puts_pad_X>
    8c1a:	16 01       	movw	r2, r12
    8c1c:	17 c0       	rjmp	.+46     	; 0x8c4c <_printf_fn+0x84c>
    8c1e:	f6 01       	movw	r30, r12
    8c20:	5e 2d       	mov	r21, r14
    8c22:	0e 94 9d e6 	call	0x1cd3a	; 0x1cd3a <__xload_1>
    8c26:	66 23       	and	r22, r22
    8c28:	89 f0       	breq	.+34     	; 0x8c4c <_printf_fn+0x84c>
    8c2a:	5f ef       	ldi	r21, 0xFF	; 255
    8c2c:	c5 1a       	sub	r12, r21
    8c2e:	d5 0a       	sbc	r13, r21
    8c30:	e5 0a       	sbc	r14, r21
    8c32:	a5 96       	adiw	r28, 0x25	; 37
    8c34:	ae ad       	ldd	r26, Y+62	; 0x3e
    8c36:	bf ad       	ldd	r27, Y+63	; 0x3f
    8c38:	a5 97       	sbiw	r28, 0x25	; 37
    8c3a:	ed 91       	ld	r30, X+
    8c3c:	fc 91       	ld	r31, X
    8c3e:	11 97       	sbiw	r26, 0x01	; 1
    8c40:	cd 01       	movw	r24, r26
    8c42:	09 95       	icall
    8c44:	6c 14       	cp	r6, r12
    8c46:	7d 04       	cpc	r7, r13
    8c48:	8e 04       	cpc	r8, r14
    8c4a:	48 f7       	brcc	.-46     	; 0x8c1e <_printf_fn+0x81e>
    8c4c:	e8 2c       	mov	r14, r8
    8c4e:	63 01       	movw	r12, r6
    8c50:	0f cc       	rjmp	.-2018   	; 0x8470 <_printf_fn+0x70>
    8c52:	82 e0       	ldi	r24, 0x02	; 2
    8c54:	48 2e       	mov	r4, r24
    8c56:	51 2c       	mov	r5, r1
    8c58:	0d cd       	rjmp	.-1510   	; 0x8674 <_printf_fn+0x274>
    8c5a:	f2 e0       	ldi	r31, 0x02	; 2
    8c5c:	4f 16       	cp	r4, r31
    8c5e:	51 04       	cpc	r5, r1
    8c60:	61 f4       	brne	.+24     	; 0x8c7a <_printf_fn+0x87a>
    8c62:	51 01       	movw	r10, r2
    8c64:	b2 e0       	ldi	r27, 0x02	; 2
    8c66:	ab 0e       	add	r10, r27
    8c68:	b1 1c       	adc	r11, r1
    8c6a:	f1 01       	movw	r30, r2
    8c6c:	80 81       	ld	r24, Z
    8c6e:	91 81       	ldd	r25, Z+1	; 0x01
    8c70:	65 96       	adiw	r28, 0x15	; 21
    8c72:	9f af       	std	Y+63, r25	; 0x3f
    8c74:	8e af       	std	Y+62, r24	; 0x3e
    8c76:	65 97       	sbiw	r28, 0x15	; 21
    8c78:	7e cd       	rjmp	.-1284   	; 0x8776 <_printf_fn+0x376>
    8c7a:	f4 e0       	ldi	r31, 0x04	; 4
    8c7c:	4f 16       	cp	r4, r31
    8c7e:	51 04       	cpc	r5, r1
    8c80:	09 f0       	breq	.+2      	; 0x8c84 <_printf_fn+0x884>
    8c82:	b2 cd       	rjmp	.-1180   	; 0x87e8 <_printf_fn+0x3e8>
    8c84:	51 01       	movw	r10, r2
    8c86:	24 e0       	ldi	r18, 0x04	; 4
    8c88:	a2 0e       	add	r10, r18
    8c8a:	b1 1c       	adc	r11, r1
    8c8c:	f1 01       	movw	r30, r2
    8c8e:	80 81       	ld	r24, Z
    8c90:	91 81       	ldd	r25, Z+1	; 0x01
    8c92:	a2 81       	ldd	r26, Z+2	; 0x02
    8c94:	b3 81       	ldd	r27, Z+3	; 0x03
    8c96:	2f 96       	adiw	r28, 0x0f	; 15
    8c98:	8c af       	std	Y+60, r24	; 0x3c
    8c9a:	9d af       	std	Y+61, r25	; 0x3d
    8c9c:	ae af       	std	Y+62, r26	; 0x3e
    8c9e:	bf af       	std	Y+63, r27	; 0x3f
    8ca0:	2f 97       	sbiw	r28, 0x0f	; 15
    8ca2:	90 cd       	rjmp	.-1248   	; 0x87c4 <_printf_fn+0x3c4>
    8ca4:	c2 59       	subi	r28, 0x92	; 146
    8ca6:	df 4f       	sbci	r29, 0xFF	; 255
    8ca8:	e2 e1       	ldi	r30, 0x12	; 18
    8caa:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

00008cae <vsnprintf_P>:
    8cae:	a8 e0       	ldi	r26, 0x08	; 8
    8cb0:	b0 e0       	ldi	r27, 0x00	; 0
    8cb2:	ed e5       	ldi	r30, 0x5D	; 93
    8cb4:	f6 e4       	ldi	r31, 0x46	; 70
    8cb6:	0c 94 72 e6 	jmp	0x1cce4	; 0x1cce4 <__prologue_saves__+0x18>
    8cba:	7c 01       	movw	r14, r24
    8cbc:	cb 01       	movw	r24, r22
    8cbe:	64 2f       	mov	r22, r20
    8cc0:	a9 01       	movw	r20, r18
    8cc2:	98 01       	movw	r18, r16
    8cc4:	f7 01       	movw	r30, r14
    8cc6:	10 82       	st	Z, r1
    8cc8:	e5 eb       	ldi	r30, 0xB5	; 181
    8cca:	fd e3       	ldi	r31, 0x3D	; 61
    8ccc:	fa 83       	std	Y+2, r31	; 0x02
    8cce:	e9 83       	std	Y+1, r30	; 0x01
    8cd0:	9e 83       	std	Y+6, r25	; 0x06
    8cd2:	8d 83       	std	Y+5, r24	; 0x05
    8cd4:	18 86       	std	Y+8, r1	; 0x08
    8cd6:	1f 82       	std	Y+7, r1	; 0x07
    8cd8:	fc 82       	std	Y+4, r15	; 0x04
    8cda:	eb 82       	std	Y+3, r14	; 0x03
    8cdc:	ce 01       	movw	r24, r28
    8cde:	01 96       	adiw	r24, 0x01	; 1
    8ce0:	8f db       	rcall	.-2274   	; 0x8400 <_printf_fn>
    8ce2:	f7 01       	movw	r30, r14
    8ce4:	01 90       	ld	r0, Z+
    8ce6:	00 20       	and	r0, r0
    8ce8:	e9 f7       	brne	.-6      	; 0x8ce4 <vsnprintf_P+0x36>
    8cea:	cf 01       	movw	r24, r30
    8cec:	01 97       	sbiw	r24, 0x01	; 1
    8cee:	8e 19       	sub	r24, r14
    8cf0:	9f 09       	sbc	r25, r15
    8cf2:	28 96       	adiw	r28, 0x08	; 8
    8cf4:	e6 e0       	ldi	r30, 0x06	; 6
    8cf6:	0c 94 8e e6 	jmp	0x1cd1c	; 0x1cd1c <__epilogue_restores__+0x18>

00008cfa <snprintf_P>:
    8cfa:	a0 e0       	ldi	r26, 0x00	; 0
    8cfc:	b0 e0       	ldi	r27, 0x00	; 0
    8cfe:	e3 e8       	ldi	r30, 0x83	; 131
    8d00:	f6 e4       	ldi	r31, 0x46	; 70
    8d02:	0c 94 74 e6 	jmp	0x1cce8	; 0x1cce8 <__prologue_saves__+0x1c>
    8d06:	8e 01       	movw	r16, r28
    8d08:	02 5f       	subi	r16, 0xF2	; 242
    8d0a:	1f 4f       	sbci	r17, 0xFF	; 255
    8d0c:	2b 85       	ldd	r18, Y+11	; 0x0b
    8d0e:	3c 85       	ldd	r19, Y+12	; 0x0c
    8d10:	4d 85       	ldd	r20, Y+13	; 0x0d
    8d12:	69 85       	ldd	r22, Y+9	; 0x09
    8d14:	7a 85       	ldd	r23, Y+10	; 0x0a
    8d16:	8f 81       	ldd	r24, Y+7	; 0x07
    8d18:	98 85       	ldd	r25, Y+8	; 0x08
    8d1a:	c9 df       	rcall	.-110    	; 0x8cae <vsnprintf_P>
    8d1c:	e4 e0       	ldi	r30, 0x04	; 4
    8d1e:	0c 94 90 e6 	jmp	0x1cd20	; 0x1cd20 <__epilogue_restores__+0x1c>

00008d22 <sprintf_P>:
    8d22:	a0 e0       	ldi	r26, 0x00	; 0
    8d24:	b0 e0       	ldi	r27, 0x00	; 0
    8d26:	e7 e9       	ldi	r30, 0x97	; 151
    8d28:	f6 e4       	ldi	r31, 0x46	; 70
    8d2a:	0c 94 74 e6 	jmp	0x1cce8	; 0x1cce8 <__prologue_saves__+0x1c>
    8d2e:	8e 01       	movw	r16, r28
    8d30:	04 5f       	subi	r16, 0xF4	; 244
    8d32:	1f 4f       	sbci	r17, 0xFF	; 255
    8d34:	29 85       	ldd	r18, Y+9	; 0x09
    8d36:	3a 85       	ldd	r19, Y+10	; 0x0a
    8d38:	4b 85       	ldd	r20, Y+11	; 0x0b
    8d3a:	60 e0       	ldi	r22, 0x00	; 0
    8d3c:	74 e0       	ldi	r23, 0x04	; 4
    8d3e:	8f 81       	ldd	r24, Y+7	; 0x07
    8d40:	98 85       	ldd	r25, Y+8	; 0x08
    8d42:	b5 df       	rcall	.-150    	; 0x8cae <vsnprintf_P>
    8d44:	e4 e0       	ldi	r30, 0x04	; 4
    8d46:	0c 94 90 e6 	jmp	0x1cd20	; 0x1cd20 <__epilogue_restores__+0x1c>

00008d4a <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE
int
printf_P(__memx const char *format, ...)
{
    8d4a:	a8 e0       	ldi	r26, 0x08	; 8
    8d4c:	b0 e0       	ldi	r27, 0x00	; 0
    8d4e:	eb ea       	ldi	r30, 0xAB	; 171
    8d50:	f6 e4       	ldi	r31, 0x46	; 70
    8d52:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
    8d56:	9e 01       	movw	r18, r28
    8d58:	23 5f       	subi	r18, 0xF3	; 243
    8d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    8d5c:	f9 01       	movw	r30, r18
    8d5e:	41 91       	ld	r20, Z+
    8d60:	51 91       	ld	r21, Z+
    8d62:	61 91       	ld	r22, Z+
    8d64:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8d66:	8e ec       	ldi	r24, 0xCE	; 206
    8d68:	9d e3       	ldi	r25, 0x3D	; 61
    8d6a:	9a 83       	std	Y+2, r25	; 0x02
    8d6c:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8d6e:	18 86       	std	Y+8, r1	; 0x08
    8d70:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8d72:	ce 01       	movw	r24, r28
    8d74:	01 96       	adiw	r24, 0x01	; 1
    8d76:	44 db       	rcall	.-2424   	; 0x8400 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8d78:	8f 81       	ldd	r24, Y+7	; 0x07
    8d7a:	98 85       	ldd	r25, Y+8	; 0x08
    8d7c:	28 96       	adiw	r28, 0x08	; 8
    8d7e:	e2 e0       	ldi	r30, 0x02	; 2
    8d80:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00008d84 <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8d84:	9c 01       	movw	r18, r24
    8d86:	20 53       	subi	r18, 0x30	; 48
    8d88:	31 09       	sbc	r19, r1
    8d8a:	2a 30       	cpi	r18, 0x0A	; 10
    8d8c:	31 05       	cpc	r19, r1
    8d8e:	10 f4       	brcc	.+4      	; 0x8d94 <atodigit+0x10>
    8d90:	c9 01       	movw	r24, r18
    8d92:	10 c0       	rjmp	.+32     	; 0x8db4 <atodigit+0x30>
    8d94:	9c 01       	movw	r18, r24
    8d96:	21 54       	subi	r18, 0x41	; 65
    8d98:	31 09       	sbc	r19, r1
    8d9a:	26 30       	cpi	r18, 0x06	; 6
    8d9c:	31 05       	cpc	r19, r1
    8d9e:	10 f4       	brcc	.+4      	; 0x8da4 <atodigit+0x20>
    8da0:	c7 97       	sbiw	r24, 0x37	; 55
    8da2:	08 c0       	rjmp	.+16     	; 0x8db4 <atodigit+0x30>
    8da4:	9c 01       	movw	r18, r24
    8da6:	21 56       	subi	r18, 0x61	; 97
    8da8:	31 09       	sbc	r19, r1
    8daa:	26 30       	cpi	r18, 0x06	; 6
    8dac:	31 05       	cpc	r19, r1
    8dae:	28 f4       	brcc	.+10     	; 0x8dba <atodigit+0x36>
    8db0:	87 55       	subi	r24, 0x57	; 87
    8db2:	91 09       	sbc	r25, r1
    8db4:	86 17       	cp	r24, r22
    8db6:	97 07       	cpc	r25, r23
    8db8:	14 f0       	brlt	.+4      	; 0x8dbe <atodigit+0x3a>
    8dba:	8f ef       	ldi	r24, 0xFF	; 255
    8dbc:	9f ef       	ldi	r25, 0xFF	; 255
    8dbe:	08 95       	ret

00008dc0 <strtol>:
    8dc0:	a0 e0       	ldi	r26, 0x00	; 0
    8dc2:	b0 e0       	ldi	r27, 0x00	; 0
    8dc4:	e6 ee       	ldi	r30, 0xE6	; 230
    8dc6:	f6 e4       	ldi	r31, 0x46	; 70
    8dc8:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
    8dcc:	2b 01       	movw	r4, r22
    8dce:	8a 01       	movw	r16, r20
    8dd0:	ec 01       	movw	r28, r24
    8dd2:	28 81       	ld	r18, Y
    8dd4:	01 96       	adiw	r24, 0x01	; 1
    8dd6:	20 32       	cpi	r18, 0x20	; 32
    8dd8:	d9 f3       	breq	.-10     	; 0x8dd0 <strtol+0x10>
    8dda:	29 30       	cpi	r18, 0x09	; 9
    8ddc:	c9 f3       	breq	.-14     	; 0x8dd0 <strtol+0x10>
    8dde:	2d 32       	cpi	r18, 0x2D	; 45
    8de0:	29 f4       	brne	.+10     	; 0x8dec <strtol+0x2c>
    8de2:	ec 01       	movw	r28, r24
    8de4:	66 24       	eor	r6, r6
    8de6:	63 94       	inc	r6
    8de8:	71 2c       	mov	r7, r1
    8dea:	05 c0       	rjmp	.+10     	; 0x8df6 <strtol+0x36>
    8dec:	2b 32       	cpi	r18, 0x2B	; 43
    8dee:	09 f4       	brne	.+2      	; 0x8df2 <strtol+0x32>
    8df0:	ec 01       	movw	r28, r24
    8df2:	61 2c       	mov	r6, r1
    8df4:	71 2c       	mov	r7, r1
    8df6:	9e 01       	movw	r18, r28
    8df8:	2f 5f       	subi	r18, 0xFF	; 255
    8dfa:	3f 4f       	sbci	r19, 0xFF	; 255
    8dfc:	88 81       	ld	r24, Y
    8dfe:	80 33       	cpi	r24, 0x30	; 48
    8e00:	11 f4       	brne	.+4      	; 0x8e06 <strtol+0x46>
    8e02:	e9 01       	movw	r28, r18
    8e04:	f8 cf       	rjmp	.-16     	; 0x8df6 <strtol+0x36>
    8e06:	c1 2c       	mov	r12, r1
    8e08:	d1 2c       	mov	r13, r1
    8e0a:	76 01       	movw	r14, r12
    8e0c:	48 01       	movw	r8, r16
    8e0e:	01 2e       	mov	r0, r17
    8e10:	00 0c       	add	r0, r0
    8e12:	aa 08       	sbc	r10, r10
    8e14:	bb 08       	sbc	r11, r11
    8e16:	3c 2e       	mov	r3, r28
    8e18:	2d 2e       	mov	r2, r29
    8e1a:	89 91       	ld	r24, Y+
    8e1c:	88 23       	and	r24, r24
    8e1e:	31 f0       	breq	.+12     	; 0x8e2c <strtol+0x6c>
    8e20:	b8 01       	movw	r22, r16
    8e22:	90 e0       	ldi	r25, 0x00	; 0
    8e24:	af df       	rcall	.-162    	; 0x8d84 <atodigit>
    8e26:	fc 01       	movw	r30, r24
    8e28:	97 ff       	sbrs	r25, 7
    8e2a:	0c c0       	rjmp	.+24     	; 0x8e44 <strtol+0x84>
    8e2c:	61 14       	cp	r6, r1
    8e2e:	71 04       	cpc	r7, r1
    8e30:	c1 f0       	breq	.+48     	; 0x8e62 <strtol+0xa2>
    8e32:	f0 94       	com	r15
    8e34:	e0 94       	com	r14
    8e36:	d0 94       	com	r13
    8e38:	c0 94       	com	r12
    8e3a:	c1 1c       	adc	r12, r1
    8e3c:	d1 1c       	adc	r13, r1
    8e3e:	e1 1c       	adc	r14, r1
    8e40:	f1 1c       	adc	r15, r1
    8e42:	0f c0       	rjmp	.+30     	; 0x8e62 <strtol+0xa2>
    8e44:	a5 01       	movw	r20, r10
    8e46:	94 01       	movw	r18, r8
    8e48:	c7 01       	movw	r24, r14
    8e4a:	b6 01       	movw	r22, r12
    8e4c:	0e 94 b7 e5 	call	0x1cb6e	; 0x1cb6e <__mulsi3>
    8e50:	6f 01       	movw	r12, r30
    8e52:	ff 0f       	add	r31, r31
    8e54:	ee 08       	sbc	r14, r14
    8e56:	ff 08       	sbc	r15, r15
    8e58:	c6 0e       	add	r12, r22
    8e5a:	d7 1e       	adc	r13, r23
    8e5c:	e8 1e       	adc	r14, r24
    8e5e:	f9 1e       	adc	r15, r25
    8e60:	da cf       	rjmp	.-76     	; 0x8e16 <strtol+0x56>
    8e62:	41 14       	cp	r4, r1
    8e64:	51 04       	cpc	r5, r1
    8e66:	19 f0       	breq	.+6      	; 0x8e6e <strtol+0xae>
    8e68:	f2 01       	movw	r30, r4
    8e6a:	30 82       	st	Z, r3
    8e6c:	21 82       	std	Z+1, r2	; 0x01
    8e6e:	c7 01       	movw	r24, r14
    8e70:	b6 01       	movw	r22, r12
    8e72:	cd b7       	in	r28, 0x3d	; 61
    8e74:	de b7       	in	r29, 0x3e	; 62
    8e76:	e2 e1       	ldi	r30, 0x12	; 18
    8e78:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

00008e7c <atoi>:
MEMSPACE
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8e7c:	4a e0       	ldi	r20, 0x0A	; 10
    8e7e:	50 e0       	ldi	r21, 0x00	; 0
    8e80:	60 e0       	ldi	r22, 0x00	; 0
    8e82:	70 e0       	ldi	r23, 0x00	; 0
    8e84:	9d df       	rcall	.-198    	; 0x8dc0 <strtol>
    return((int)num);
}
    8e86:	cb 01       	movw	r24, r22
    8e88:	08 95       	ret

00008e8a <atol>:
MEMSPACE
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8e8a:	4a e0       	ldi	r20, 0x0A	; 10
    8e8c:	50 e0       	ldi	r21, 0x00	; 0
    8e8e:	60 e0       	ldi	r22, 0x00	; 0
    8e90:	70 e0       	ldi	r23, 0x00	; 0
    8e92:	96 cf       	rjmp	.-212    	; 0x8dc0 <strtol>
    return(num);
}
    8e94:	08 95       	ret

00008e96 <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    8e96:	fc 01       	movw	r30, r24
    8e98:	62 81       	ldd	r22, Z+2	; 0x02
    8e9a:	73 81       	ldd	r23, Z+3	; 0x03
    8e9c:	cb 01       	movw	r24, r22
    8e9e:	a0 e0       	ldi	r26, 0x00	; 0
    8ea0:	b0 e0       	ldi	r27, 0x00	; 0
    8ea2:	ba 2f       	mov	r27, r26
    8ea4:	a9 2f       	mov	r26, r25
    8ea6:	98 2f       	mov	r25, r24
    8ea8:	88 27       	eor	r24, r24
    8eaa:	21 81       	ldd	r18, Z+1	; 0x01
    8eac:	82 2b       	or	r24, r18
    8eae:	ba 2f       	mov	r27, r26
    8eb0:	a9 2f       	mov	r26, r25
    8eb2:	98 2f       	mov	r25, r24
    8eb4:	88 27       	eor	r24, r24
    8eb6:	20 81       	ld	r18, Z
    8eb8:	bc 01       	movw	r22, r24
    8eba:	cd 01       	movw	r24, r26
    8ebc:	62 2b       	or	r22, r18
    8ebe:	08 95       	ret

00008ec0 <st_dword>:
    8ec0:	fc 01       	movw	r30, r24
    8ec2:	40 83       	st	Z, r20
    8ec4:	51 83       	std	Z+1, r21	; 0x01
    8ec6:	62 83       	std	Z+2, r22	; 0x02
    8ec8:	73 83       	std	Z+3, r23	; 0x03
    8eca:	08 95       	ret

00008ecc <mem_set>:
    8ecc:	48 0f       	add	r20, r24
    8ece:	59 1f       	adc	r21, r25
    8ed0:	fc 01       	movw	r30, r24
    8ed2:	61 93       	st	Z+, r22
    8ed4:	cf 01       	movw	r24, r30
    8ed6:	e4 17       	cp	r30, r20
    8ed8:	f5 07       	cpc	r31, r21
    8eda:	d1 f7       	brne	.-12     	; 0x8ed0 <mem_set+0x4>
    8edc:	08 95       	ret

00008ede <mem_cmp>:
    8ede:	dc 01       	movw	r26, r24
    8ee0:	fb 01       	movw	r30, r22
    8ee2:	2d 91       	ld	r18, X+
    8ee4:	81 91       	ld	r24, Z+
    8ee6:	30 e0       	ldi	r19, 0x00	; 0
    8ee8:	b9 01       	movw	r22, r18
    8eea:	68 1b       	sub	r22, r24
    8eec:	71 09       	sbc	r23, r1
    8eee:	cb 01       	movw	r24, r22
    8ef0:	41 50       	subi	r20, 0x01	; 1
    8ef2:	51 09       	sbc	r21, r1
    8ef4:	11 f0       	breq	.+4      	; 0x8efa <mem_cmp+0x1c>
    8ef6:	00 97       	sbiw	r24, 0x00	; 0
    8ef8:	a1 f3       	breq	.-24     	; 0x8ee2 <mem_cmp+0x4>
    8efa:	08 95       	ret

00008efc <clst2sect>:
    8efc:	0f 93       	push	r16
    8efe:	1f 93       	push	r17
    8f00:	fc 01       	movw	r30, r24
    8f02:	9a 01       	movw	r18, r20
    8f04:	ab 01       	movw	r20, r22
    8f06:	22 50       	subi	r18, 0x02	; 2
    8f08:	31 09       	sbc	r19, r1
    8f0a:	41 09       	sbc	r20, r1
    8f0c:	51 09       	sbc	r21, r1
    8f0e:	81 8d       	ldd	r24, Z+25	; 0x19
    8f10:	92 8d       	ldd	r25, Z+26	; 0x1a
    8f12:	a3 8d       	ldd	r26, Z+27	; 0x1b
    8f14:	b4 8d       	ldd	r27, Z+28	; 0x1c
    8f16:	02 97       	sbiw	r24, 0x02	; 2
    8f18:	a1 09       	sbc	r26, r1
    8f1a:	b1 09       	sbc	r27, r1
    8f1c:	28 17       	cp	r18, r24
    8f1e:	39 07       	cpc	r19, r25
    8f20:	4a 07       	cpc	r20, r26
    8f22:	5b 07       	cpc	r21, r27
    8f24:	68 f4       	brcc	.+26     	; 0x8f40 <clst2sect+0x44>
    8f26:	a1 85       	ldd	r26, Z+9	; 0x09
    8f28:	b2 85       	ldd	r27, Z+10	; 0x0a
    8f2a:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__muluhisi3>
    8f2e:	05 a5       	ldd	r16, Z+45	; 0x2d
    8f30:	16 a5       	ldd	r17, Z+46	; 0x2e
    8f32:	27 a5       	ldd	r18, Z+47	; 0x2f
    8f34:	30 a9       	ldd	r19, Z+48	; 0x30
    8f36:	60 0f       	add	r22, r16
    8f38:	71 1f       	adc	r23, r17
    8f3a:	82 1f       	adc	r24, r18
    8f3c:	93 1f       	adc	r25, r19
    8f3e:	03 c0       	rjmp	.+6      	; 0x8f46 <clst2sect+0x4a>
    8f40:	60 e0       	ldi	r22, 0x00	; 0
    8f42:	70 e0       	ldi	r23, 0x00	; 0
    8f44:	cb 01       	movw	r24, r22
    8f46:	1f 91       	pop	r17
    8f48:	0f 91       	pop	r16
    8f4a:	08 95       	ret

00008f4c <clmt_clust>:
    8f4c:	cf 93       	push	r28
    8f4e:	df 93       	push	r29
    8f50:	fc 01       	movw	r30, r24
    8f52:	c2 a1       	ldd	r28, Z+34	; 0x22
    8f54:	d3 a1       	ldd	r29, Z+35	; 0x23
    8f56:	24 96       	adiw	r28, 0x04	; 4
    8f58:	cb 01       	movw	r24, r22
    8f5a:	ba 01       	movw	r22, r20
    8f5c:	29 e0       	ldi	r18, 0x09	; 9
    8f5e:	96 95       	lsr	r25
    8f60:	87 95       	ror	r24
    8f62:	77 95       	ror	r23
    8f64:	67 95       	ror	r22
    8f66:	2a 95       	dec	r18
    8f68:	d1 f7       	brne	.-12     	; 0x8f5e <clmt_clust+0x12>
    8f6a:	01 90       	ld	r0, Z+
    8f6c:	f0 81       	ld	r31, Z
    8f6e:	e0 2d       	mov	r30, r0
    8f70:	21 85       	ldd	r18, Z+9	; 0x09
    8f72:	32 85       	ldd	r19, Z+10	; 0x0a
    8f74:	40 e0       	ldi	r20, 0x00	; 0
    8f76:	50 e0       	ldi	r21, 0x00	; 0
    8f78:	0e 94 f9 e5 	call	0x1cbf2	; 0x1cbf2 <__udivmodsi4>
    8f7c:	88 81       	ld	r24, Y
    8f7e:	99 81       	ldd	r25, Y+1	; 0x01
    8f80:	aa 81       	ldd	r26, Y+2	; 0x02
    8f82:	bb 81       	ldd	r27, Y+3	; 0x03
    8f84:	00 97       	sbiw	r24, 0x00	; 0
    8f86:	a1 05       	cpc	r26, r1
    8f88:	b1 05       	cpc	r27, r1
    8f8a:	b1 f0       	breq	.+44     	; 0x8fb8 <clmt_clust+0x6c>
    8f8c:	28 17       	cp	r18, r24
    8f8e:	39 07       	cpc	r19, r25
    8f90:	4a 07       	cpc	r20, r26
    8f92:	5b 07       	cpc	r21, r27
    8f94:	30 f0       	brcs	.+12     	; 0x8fa2 <clmt_clust+0x56>
    8f96:	28 1b       	sub	r18, r24
    8f98:	39 0b       	sbc	r19, r25
    8f9a:	4a 0b       	sbc	r20, r26
    8f9c:	5b 0b       	sbc	r21, r27
    8f9e:	28 96       	adiw	r28, 0x08	; 8
    8fa0:	ed cf       	rjmp	.-38     	; 0x8f7c <clmt_clust+0x30>
    8fa2:	8c 81       	ldd	r24, Y+4	; 0x04
    8fa4:	9d 81       	ldd	r25, Y+5	; 0x05
    8fa6:	ae 81       	ldd	r26, Y+6	; 0x06
    8fa8:	bf 81       	ldd	r27, Y+7	; 0x07
    8faa:	bc 01       	movw	r22, r24
    8fac:	cd 01       	movw	r24, r26
    8fae:	62 0f       	add	r22, r18
    8fb0:	73 1f       	adc	r23, r19
    8fb2:	84 1f       	adc	r24, r20
    8fb4:	95 1f       	adc	r25, r21
    8fb6:	03 c0       	rjmp	.+6      	; 0x8fbe <clmt_clust+0x72>
    8fb8:	60 e0       	ldi	r22, 0x00	; 0
    8fba:	70 e0       	ldi	r23, 0x00	; 0
    8fbc:	cb 01       	movw	r24, r22
    8fbe:	df 91       	pop	r29
    8fc0:	cf 91       	pop	r28
    8fc2:	08 95       	ret

00008fc4 <sum_sfn>:
    8fc4:	fc 01       	movw	r30, r24
    8fc6:	9c 01       	movw	r18, r24
    8fc8:	25 5f       	subi	r18, 0xF5	; 245
    8fca:	3f 4f       	sbci	r19, 0xFF	; 255
    8fcc:	80 e0       	ldi	r24, 0x00	; 0
    8fce:	98 2f       	mov	r25, r24
    8fd0:	90 fb       	bst	r25, 0
    8fd2:	97 95       	ror	r25
    8fd4:	97 f9       	bld	r25, 7
    8fd6:	81 91       	ld	r24, Z+
    8fd8:	89 0f       	add	r24, r25
    8fda:	e2 17       	cp	r30, r18
    8fdc:	f3 07       	cpc	r31, r19
    8fde:	b9 f7       	brne	.-18     	; 0x8fce <sum_sfn+0xa>
    8fe0:	08 95       	ret

00008fe2 <get_ldnumber>:
    8fe2:	cf 93       	push	r28
    8fe4:	df 93       	push	r29
    8fe6:	dc 01       	movw	r26, r24
    8fe8:	ed 91       	ld	r30, X+
    8fea:	fc 91       	ld	r31, X
    8fec:	11 97       	sbiw	r26, 0x01	; 1
    8fee:	30 97       	sbiw	r30, 0x00	; 0
    8ff0:	f9 f0       	breq	.+62     	; 0x9030 <get_ldnumber+0x4e>
    8ff2:	9f 01       	movw	r18, r30
    8ff4:	2f 5f       	subi	r18, 0xFF	; 255
    8ff6:	3f 4f       	sbci	r19, 0xFF	; 255
    8ff8:	e9 01       	movw	r28, r18
    8ffa:	21 97       	sbiw	r28, 0x01	; 1
    8ffc:	88 81       	ld	r24, Y
    8ffe:	80 32       	cpi	r24, 0x20	; 32
    9000:	18 f0       	brcs	.+6      	; 0x9008 <get_ldnumber+0x26>
    9002:	8a 33       	cpi	r24, 0x3A	; 58
    9004:	b9 f7       	brne	.-18     	; 0x8ff4 <get_ldnumber+0x12>
    9006:	04 c0       	rjmp	.+8      	; 0x9010 <get_ldnumber+0x2e>
    9008:	80 91 14 18 	lds	r24, 0x1814	; 0x801814 <CurrVol>
    900c:	90 e0       	ldi	r25, 0x00	; 0
    900e:	12 c0       	rjmp	.+36     	; 0x9034 <get_ldnumber+0x52>
    9010:	90 81       	ld	r25, Z
    9012:	80 ed       	ldi	r24, 0xD0	; 208
    9014:	89 0f       	add	r24, r25
    9016:	8a 30       	cpi	r24, 0x0A	; 10
    9018:	58 f4       	brcc	.+22     	; 0x9030 <get_ldnumber+0x4e>
    901a:	32 96       	adiw	r30, 0x02	; 2
    901c:	2e 17       	cp	r18, r30
    901e:	3f 07       	cpc	r19, r31
    9020:	39 f4       	brne	.+14     	; 0x9030 <get_ldnumber+0x4e>
    9022:	90 33       	cpi	r25, 0x30	; 48
    9024:	29 f4       	brne	.+10     	; 0x9030 <get_ldnumber+0x4e>
    9026:	2d 93       	st	X+, r18
    9028:	3c 93       	st	X, r19
    902a:	80 e0       	ldi	r24, 0x00	; 0
    902c:	90 e0       	ldi	r25, 0x00	; 0
    902e:	02 c0       	rjmp	.+4      	; 0x9034 <get_ldnumber+0x52>
    9030:	8f ef       	ldi	r24, 0xFF	; 255
    9032:	9f ef       	ldi	r25, 0xFF	; 255
    9034:	df 91       	pop	r29
    9036:	cf 91       	pop	r28
    9038:	08 95       	ret

0000903a <validate>:
    903a:	0f 93       	push	r16
    903c:	1f 93       	push	r17
    903e:	cf 93       	push	r28
    9040:	df 93       	push	r29
    9042:	ec 01       	movw	r28, r24
    9044:	8b 01       	movw	r16, r22
    9046:	89 2b       	or	r24, r25
    9048:	f9 f0       	breq	.+62     	; 0x9088 <validate+0x4e>
    904a:	e8 81       	ld	r30, Y
    904c:	f9 81       	ldd	r31, Y+1	; 0x01
    904e:	30 97       	sbiw	r30, 0x00	; 0
    9050:	d9 f0       	breq	.+54     	; 0x9088 <validate+0x4e>
    9052:	80 81       	ld	r24, Z
    9054:	88 23       	and	r24, r24
    9056:	c1 f0       	breq	.+48     	; 0x9088 <validate+0x4e>
    9058:	2a 81       	ldd	r18, Y+2	; 0x02
    905a:	3b 81       	ldd	r19, Y+3	; 0x03
    905c:	85 81       	ldd	r24, Z+5	; 0x05
    905e:	96 81       	ldd	r25, Z+6	; 0x06
    9060:	28 17       	cp	r18, r24
    9062:	39 07       	cpc	r19, r25
    9064:	89 f4       	brne	.+34     	; 0x9088 <validate+0x4e>
    9066:	81 81       	ldd	r24, Z+1	; 0x01
    9068:	0e 94 33 69 	call	0xd266	; 0xd266 <disk_status>
    906c:	80 fd       	sbrc	r24, 0
    906e:	0c c0       	rjmp	.+24     	; 0x9088 <validate+0x4e>
    9070:	28 81       	ld	r18, Y
    9072:	39 81       	ldd	r19, Y+1	; 0x01
    9074:	80 e0       	ldi	r24, 0x00	; 0
    9076:	90 e0       	ldi	r25, 0x00	; 0
    9078:	f8 01       	movw	r30, r16
    907a:	31 83       	std	Z+1, r19	; 0x01
    907c:	20 83       	st	Z, r18
    907e:	df 91       	pop	r29
    9080:	cf 91       	pop	r28
    9082:	1f 91       	pop	r17
    9084:	0f 91       	pop	r16
    9086:	08 95       	ret
    9088:	89 e0       	ldi	r24, 0x09	; 9
    908a:	90 e0       	ldi	r25, 0x00	; 0
    908c:	20 e0       	ldi	r18, 0x00	; 0
    908e:	30 e0       	ldi	r19, 0x00	; 0
    9090:	f3 cf       	rjmp	.-26     	; 0x9078 <validate+0x3e>

00009092 <get_fileinfo>:
    9092:	a8 e0       	ldi	r26, 0x08	; 8
    9094:	b0 e0       	ldi	r27, 0x00	; 0
    9096:	ef e4       	ldi	r30, 0x4F	; 79
    9098:	f8 e4       	ldi	r31, 0x48	; 72
    909a:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
    909e:	fc 01       	movw	r30, r24
    90a0:	01 90       	ld	r0, Z+
    90a2:	f0 81       	ld	r31, Z
    90a4:	e0 2d       	mov	r30, r0
    90a6:	f8 87       	std	Y+8, r31	; 0x08
    90a8:	ef 83       	std	Y+7, r30	; 0x07
    90aa:	fb 01       	movw	r30, r22
    90ac:	16 8a       	std	Z+22, r1	; 0x16
    90ae:	fc 01       	movw	r30, r24
    90b0:	06 89       	ldd	r16, Z+22	; 0x16
    90b2:	17 89       	ldd	r17, Z+23	; 0x17
    90b4:	20 8d       	ldd	r18, Z+24	; 0x18
    90b6:	31 8d       	ldd	r19, Z+25	; 0x19
    90b8:	01 15       	cp	r16, r1
    90ba:	11 05       	cpc	r17, r1
    90bc:	21 05       	cpc	r18, r1
    90be:	31 05       	cpc	r19, r1
    90c0:	09 f4       	brne	.+2      	; 0x90c4 <get_fileinfo+0x32>
    90c2:	0d c1       	rjmp	.+538    	; 0x92de <get_fileinfo+0x24c>
    90c4:	7e 83       	std	Y+6, r23	; 0x06
    90c6:	6d 83       	std	Y+5, r22	; 0x05
    90c8:	7c 01       	movw	r14, r24
    90ca:	80 a5       	ldd	r24, Z+40	; 0x28
    90cc:	91 a5       	ldd	r25, Z+41	; 0x29
    90ce:	a2 a5       	ldd	r26, Z+42	; 0x2a
    90d0:	b3 a5       	ldd	r27, Z+43	; 0x2b
    90d2:	8f 3f       	cpi	r24, 0xFF	; 255
    90d4:	9f 4f       	sbci	r25, 0xFF	; 255
    90d6:	af 4f       	sbci	r26, 0xFF	; 255
    90d8:	bf 4f       	sbci	r27, 0xFF	; 255
    90da:	09 f4       	brne	.+2      	; 0x90de <get_fileinfo+0x4c>
    90dc:	6c c0       	rjmp	.+216    	; 0x91b6 <get_fileinfo+0x124>
    90de:	a1 2c       	mov	r10, r1
    90e0:	b1 2c       	mov	r11, r1
    90e2:	c1 2c       	mov	r12, r1
    90e4:	d1 2c       	mov	r13, r1
    90e6:	00 e0       	ldi	r16, 0x00	; 0
    90e8:	10 e0       	ldi	r17, 0x00	; 0
    90ea:	66 24       	eor	r6, r6
    90ec:	6a 94       	dec	r6
    90ee:	71 2c       	mov	r7, r1
    90f0:	ef 81       	ldd	r30, Y+7	; 0x07
    90f2:	f8 85       	ldd	r31, Y+8	; 0x08
    90f4:	83 85       	ldd	r24, Z+11	; 0x0b
    90f6:	94 85       	ldd	r25, Z+12	; 0x0c
    90f8:	fc 01       	movw	r30, r24
    90fa:	ea 0d       	add	r30, r10
    90fc:	fb 1d       	adc	r31, r11
    90fe:	80 81       	ld	r24, Z
    9100:	91 81       	ldd	r25, Z+1	; 0x01
    9102:	00 97       	sbiw	r24, 0x00	; 0
    9104:	09 f4       	brne	.+2      	; 0x9108 <get_fileinfo+0x76>
    9106:	4d c0       	rjmp	.+154    	; 0x91a2 <get_fileinfo+0x110>
    9108:	c1 14       	cp	r12, r1
    910a:	d1 04       	cpc	r13, r1
    910c:	29 f4       	brne	.+10     	; 0x9118 <get_fileinfo+0x86>
    910e:	9c 01       	movw	r18, r24
    9110:	38 5d       	subi	r19, 0xD8	; 216
    9112:	21 15       	cp	r18, r1
    9114:	38 40       	sbci	r19, 0x08	; 8
    9116:	f0 f1       	brcs	.+124    	; 0x9194 <get_fileinfo+0x102>
    9118:	43 01       	movw	r8, r6
    911a:	80 1a       	sub	r8, r16
    911c:	91 0a       	sbc	r9, r17
    911e:	a6 01       	movw	r20, r12
    9120:	60 e0       	ldi	r22, 0x00	; 0
    9122:	70 e0       	ldi	r23, 0x00	; 0
    9124:	2a 01       	movw	r4, r20
    9126:	33 24       	eor	r3, r3
    9128:	22 24       	eor	r2, r2
    912a:	a0 e0       	ldi	r26, 0x00	; 0
    912c:	b0 e0       	ldi	r27, 0x00	; 0
    912e:	28 2a       	or	r2, r24
    9130:	39 2a       	or	r3, r25
    9132:	4a 2a       	or	r4, r26
    9134:	5b 2a       	or	r5, r27
    9136:	c2 01       	movw	r24, r4
    9138:	b1 01       	movw	r22, r2
    913a:	45 eb       	ldi	r20, 0xB5	; 181
    913c:	51 e0       	ldi	r21, 0x01	; 1
    913e:	0e 94 89 68 	call	0xd112	; 0xd112 <ff_uni2oem>
    9142:	8f 3f       	cpi	r24, 0xFF	; 255
    9144:	91 05       	cpc	r25, r1
    9146:	89 f0       	breq	.+34     	; 0x916a <get_fileinfo+0xd8>
    9148:	80 f0       	brcs	.+32     	; 0x916a <get_fileinfo+0xd8>
    914a:	22 e0       	ldi	r18, 0x02	; 2
    914c:	82 16       	cp	r8, r18
    914e:	91 04       	cpc	r9, r1
    9150:	c0 f0       	brcs	.+48     	; 0x9182 <get_fileinfo+0xf0>
    9152:	ed 81       	ldd	r30, Y+5	; 0x05
    9154:	fe 81       	ldd	r31, Y+6	; 0x06
    9156:	e0 0f       	add	r30, r16
    9158:	f1 1f       	adc	r31, r17
    915a:	96 8b       	std	Z+22, r25	; 0x16
    915c:	ed 81       	ldd	r30, Y+5	; 0x05
    915e:	fe 81       	ldd	r31, Y+6	; 0x06
    9160:	e0 0f       	add	r30, r16
    9162:	f1 1f       	adc	r31, r17
    9164:	87 8b       	std	Z+23, r24	; 0x17
    9166:	82 e0       	ldi	r24, 0x02	; 2
    9168:	0d c0       	rjmp	.+26     	; 0x9184 <get_fileinfo+0xf2>
    916a:	00 97       	sbiw	r24, 0x00	; 0
    916c:	51 f0       	breq	.+20     	; 0x9182 <get_fileinfo+0xf0>
    916e:	81 14       	cp	r8, r1
    9170:	91 04       	cpc	r9, r1
    9172:	39 f0       	breq	.+14     	; 0x9182 <get_fileinfo+0xf0>
    9174:	ed 81       	ldd	r30, Y+5	; 0x05
    9176:	fe 81       	ldd	r31, Y+6	; 0x06
    9178:	e0 0f       	add	r30, r16
    917a:	f1 1f       	adc	r31, r17
    917c:	86 8b       	std	Z+22, r24	; 0x16
    917e:	81 e0       	ldi	r24, 0x01	; 1
    9180:	01 c0       	rjmp	.+2      	; 0x9184 <get_fileinfo+0xf2>
    9182:	80 e0       	ldi	r24, 0x00	; 0
    9184:	28 2f       	mov	r18, r24
    9186:	30 e0       	ldi	r19, 0x00	; 0
    9188:	88 23       	and	r24, r24
    918a:	49 f0       	breq	.+18     	; 0x919e <get_fileinfo+0x10c>
    918c:	02 0f       	add	r16, r18
    918e:	13 1f       	adc	r17, r19
    9190:	80 e0       	ldi	r24, 0x00	; 0
    9192:	90 e0       	ldi	r25, 0x00	; 0
    9194:	32 e0       	ldi	r19, 0x02	; 2
    9196:	a3 0e       	add	r10, r19
    9198:	b1 1c       	adc	r11, r1
    919a:	6c 01       	movw	r12, r24
    919c:	a9 cf       	rjmp	.-174    	; 0x90f0 <get_fileinfo+0x5e>
    919e:	00 e0       	ldi	r16, 0x00	; 0
    91a0:	10 e0       	ldi	r17, 0x00	; 0
    91a2:	c1 14       	cp	r12, r1
    91a4:	d1 04       	cpc	r13, r1
    91a6:	11 f0       	breq	.+4      	; 0x91ac <get_fileinfo+0x11a>
    91a8:	00 e0       	ldi	r16, 0x00	; 0
    91aa:	10 e0       	ldi	r17, 0x00	; 0
    91ac:	ed 81       	ldd	r30, Y+5	; 0x05
    91ae:	fe 81       	ldd	r31, Y+6	; 0x06
    91b0:	e0 0f       	add	r30, r16
    91b2:	f1 1f       	adc	r31, r17
    91b4:	16 8a       	std	Z+22, r1	; 0x16
    91b6:	80 e0       	ldi	r24, 0x00	; 0
    91b8:	90 e0       	ldi	r25, 0x00	; 0
    91ba:	20 e0       	ldi	r18, 0x00	; 0
    91bc:	30 e0       	ldi	r19, 0x00	; 0
    91be:	6e e2       	ldi	r22, 0x2E	; 46
    91c0:	a9 01       	movw	r20, r18
    91c2:	4f 5f       	subi	r20, 0xFF	; 255
    91c4:	5f 4f       	sbci	r21, 0xFF	; 255
    91c6:	f7 01       	movw	r30, r14
    91c8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    91ca:	b3 8d       	ldd	r27, Z+27	; 0x1b
    91cc:	fd 01       	movw	r30, r26
    91ce:	e2 0f       	add	r30, r18
    91d0:	f3 1f       	adc	r31, r19
    91d2:	20 81       	ld	r18, Z
    91d4:	30 e0       	ldi	r19, 0x00	; 0
    91d6:	20 32       	cpi	r18, 0x20	; 32
    91d8:	31 05       	cpc	r19, r1
    91da:	b9 f0       	breq	.+46     	; 0x920a <get_fileinfo+0x178>
    91dc:	25 30       	cpi	r18, 0x05	; 5
    91de:	31 05       	cpc	r19, r1
    91e0:	11 f4       	brne	.+4      	; 0x91e6 <get_fileinfo+0x154>
    91e2:	25 ee       	ldi	r18, 0xE5	; 229
    91e4:	30 e0       	ldi	r19, 0x00	; 0
    91e6:	49 30       	cpi	r20, 0x09	; 9
    91e8:	51 05       	cpc	r21, r1
    91ea:	49 f4       	brne	.+18     	; 0x91fe <get_fileinfo+0x16c>
    91ec:	8c 30       	cpi	r24, 0x0C	; 12
    91ee:	91 05       	cpc	r25, r1
    91f0:	30 f4       	brcc	.+12     	; 0x91fe <get_fileinfo+0x16c>
    91f2:	ed 81       	ldd	r30, Y+5	; 0x05
    91f4:	fe 81       	ldd	r31, Y+6	; 0x06
    91f6:	e8 0f       	add	r30, r24
    91f8:	f9 1f       	adc	r31, r25
    91fa:	61 87       	std	Z+9, r22	; 0x09
    91fc:	01 96       	adiw	r24, 0x01	; 1
    91fe:	ed 81       	ldd	r30, Y+5	; 0x05
    9200:	fe 81       	ldd	r31, Y+6	; 0x06
    9202:	e8 0f       	add	r30, r24
    9204:	f9 1f       	adc	r31, r25
    9206:	21 87       	std	Z+9, r18	; 0x09
    9208:	01 96       	adiw	r24, 0x01	; 1
    920a:	9a 01       	movw	r18, r20
    920c:	4b 30       	cpi	r20, 0x0B	; 11
    920e:	51 05       	cpc	r21, r1
    9210:	b9 f6       	brne	.-82     	; 0x91c0 <get_fileinfo+0x12e>
    9212:	ed 81       	ldd	r30, Y+5	; 0x05
    9214:	fe 81       	ldd	r31, Y+6	; 0x06
    9216:	e8 0f       	add	r30, r24
    9218:	f9 1f       	adc	r31, r25
    921a:	11 86       	std	Z+9, r1	; 0x09
    921c:	ed 81       	ldd	r30, Y+5	; 0x05
    921e:	fe 81       	ldd	r31, Y+6	; 0x06
    9220:	26 89       	ldd	r18, Z+22	; 0x16
    9222:	21 11       	cpse	r18, r1
    9224:	3a c0       	rjmp	.+116    	; 0x929a <get_fileinfo+0x208>
    9226:	89 2b       	or	r24, r25
    9228:	31 f0       	breq	.+12     	; 0x9236 <get_fileinfo+0x1a4>
    922a:	df 01       	movw	r26, r30
    922c:	19 96       	adiw	r26, 0x09	; 9
    922e:	58 e0       	ldi	r21, 0x08	; 8
    9230:	20 e0       	ldi	r18, 0x00	; 0
    9232:	30 e0       	ldi	r19, 0x00	; 0
    9234:	16 c0       	rjmp	.+44     	; 0x9262 <get_fileinfo+0x1d0>
    9236:	8f e3       	ldi	r24, 0x3F	; 63
    9238:	ed 81       	ldd	r30, Y+5	; 0x05
    923a:	fe 81       	ldd	r31, Y+6	; 0x06
    923c:	86 8b       	std	Z+22, r24	; 0x16
    923e:	21 e0       	ldi	r18, 0x01	; 1
    9240:	30 e0       	ldi	r19, 0x00	; 0
    9242:	1c c0       	rjmp	.+56     	; 0x927c <get_fileinfo+0x1ea>
    9244:	90 e0       	ldi	r25, 0x00	; 0
    9246:	8e 32       	cpi	r24, 0x2E	; 46
    9248:	91 05       	cpc	r25, r1
    924a:	09 f4       	brne	.+2      	; 0x924e <get_fileinfo+0x1bc>
    924c:	50 e1       	ldi	r21, 0x10	; 16
    924e:	bc 01       	movw	r22, r24
    9250:	61 54       	subi	r22, 0x41	; 65
    9252:	71 09       	sbc	r23, r1
    9254:	6a 31       	cpi	r22, 0x1A	; 26
    9256:	71 05       	cpc	r23, r1
    9258:	40 f0       	brcs	.+16     	; 0x926a <get_fileinfo+0x1d8>
    925a:	fd 01       	movw	r30, r26
    925c:	84 87       	std	Z+12, r24	; 0x0c
    925e:	2f 5f       	subi	r18, 0xFF	; 255
    9260:	3f 4f       	sbci	r19, 0xFF	; 255
    9262:	8d 91       	ld	r24, X+
    9264:	81 11       	cpse	r24, r1
    9266:	ee cf       	rjmp	.-36     	; 0x9244 <get_fileinfo+0x1b2>
    9268:	09 c0       	rjmp	.+18     	; 0x927c <get_fileinfo+0x1ea>
    926a:	f7 01       	movw	r30, r14
    926c:	62 8d       	ldd	r22, Z+26	; 0x1a
    926e:	73 8d       	ldd	r23, Z+27	; 0x1b
    9270:	fb 01       	movw	r30, r22
    9272:	44 85       	ldd	r20, Z+12	; 0x0c
    9274:	45 23       	and	r20, r21
    9276:	89 f3       	breq	.-30     	; 0x925a <get_fileinfo+0x1c8>
    9278:	80 96       	adiw	r24, 0x20	; 32
    927a:	ef cf       	rjmp	.-34     	; 0x925a <get_fileinfo+0x1c8>
    927c:	ed 81       	ldd	r30, Y+5	; 0x05
    927e:	fe 81       	ldd	r31, Y+6	; 0x06
    9280:	e2 0f       	add	r30, r18
    9282:	f3 1f       	adc	r31, r19
    9284:	16 8a       	std	Z+22, r1	; 0x16
    9286:	f7 01       	movw	r30, r14
    9288:	82 8d       	ldd	r24, Z+26	; 0x1a
    928a:	93 8d       	ldd	r25, Z+27	; 0x1b
    928c:	fc 01       	movw	r30, r24
    928e:	84 85       	ldd	r24, Z+12	; 0x0c
    9290:	81 11       	cpse	r24, r1
    9292:	03 c0       	rjmp	.+6      	; 0x929a <get_fileinfo+0x208>
    9294:	ed 81       	ldd	r30, Y+5	; 0x05
    9296:	fe 81       	ldd	r31, Y+6	; 0x06
    9298:	11 86       	std	Z+9, r1	; 0x09
    929a:	f7 01       	movw	r30, r14
    929c:	82 8d       	ldd	r24, Z+26	; 0x1a
    929e:	93 8d       	ldd	r25, Z+27	; 0x1b
    92a0:	fc 01       	movw	r30, r24
    92a2:	83 85       	ldd	r24, Z+11	; 0x0b
    92a4:	ed 81       	ldd	r30, Y+5	; 0x05
    92a6:	fe 81       	ldd	r31, Y+6	; 0x06
    92a8:	80 87       	std	Z+8, r24	; 0x08
    92aa:	f7 01       	movw	r30, r14
    92ac:	02 8d       	ldd	r16, Z+26	; 0x1a
    92ae:	13 8d       	ldd	r17, Z+27	; 0x1b
    92b0:	c8 01       	movw	r24, r16
    92b2:	4c 96       	adiw	r24, 0x1c	; 28
    92b4:	f0 dd       	rcall	.-1056   	; 0x8e96 <ld_dword>
    92b6:	ed 81       	ldd	r30, Y+5	; 0x05
    92b8:	fe 81       	ldd	r31, Y+6	; 0x06
    92ba:	60 83       	st	Z, r22
    92bc:	71 83       	std	Z+1, r23	; 0x01
    92be:	82 83       	std	Z+2, r24	; 0x02
    92c0:	93 83       	std	Z+3, r25	; 0x03
    92c2:	f8 01       	movw	r30, r16
    92c4:	86 89       	ldd	r24, Z+22	; 0x16
    92c6:	97 89       	ldd	r25, Z+23	; 0x17
    92c8:	ed 81       	ldd	r30, Y+5	; 0x05
    92ca:	fe 81       	ldd	r31, Y+6	; 0x06
    92cc:	97 83       	std	Z+7, r25	; 0x07
    92ce:	86 83       	std	Z+6, r24	; 0x06
    92d0:	f8 01       	movw	r30, r16
    92d2:	80 8d       	ldd	r24, Z+24	; 0x18
    92d4:	91 8d       	ldd	r25, Z+25	; 0x19
    92d6:	ed 81       	ldd	r30, Y+5	; 0x05
    92d8:	fe 81       	ldd	r31, Y+6	; 0x06
    92da:	95 83       	std	Z+5, r25	; 0x05
    92dc:	84 83       	std	Z+4, r24	; 0x04
    92de:	28 96       	adiw	r28, 0x08	; 8
    92e0:	e2 e1       	ldi	r30, 0x12	; 18
    92e2:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

000092e6 <mem_cpy.part.0>:
    92e6:	fb 01       	movw	r30, r22
    92e8:	48 0f       	add	r20, r24
    92ea:	59 1f       	adc	r21, r25
    92ec:	21 91       	ld	r18, Z+
    92ee:	dc 01       	movw	r26, r24
    92f0:	2d 93       	st	X+, r18
    92f2:	cd 01       	movw	r24, r26
    92f4:	a4 17       	cp	r26, r20
    92f6:	b5 07       	cpc	r27, r21
    92f8:	c9 f7       	brne	.-14     	; 0x92ec <mem_cpy.part.0+0x6>
    92fa:	08 95       	ret

000092fc <ld_clust.isra.3>:
    92fc:	fb 01       	movw	r30, r22
    92fe:	42 8d       	ldd	r20, Z+26	; 0x1a
    9300:	53 8d       	ldd	r21, Z+27	; 0x1b
    9302:	60 e0       	ldi	r22, 0x00	; 0
    9304:	70 e0       	ldi	r23, 0x00	; 0
    9306:	83 30       	cpi	r24, 0x03	; 3
    9308:	59 f4       	brne	.+22     	; 0x9320 <ld_clust.isra.3+0x24>
    930a:	84 89       	ldd	r24, Z+20	; 0x14
    930c:	95 89       	ldd	r25, Z+21	; 0x15
    930e:	a0 e0       	ldi	r26, 0x00	; 0
    9310:	b0 e0       	ldi	r27, 0x00	; 0
    9312:	dc 01       	movw	r26, r24
    9314:	99 27       	eor	r25, r25
    9316:	88 27       	eor	r24, r24
    9318:	48 2b       	or	r20, r24
    931a:	59 2b       	or	r21, r25
    931c:	6a 2b       	or	r22, r26
    931e:	7b 2b       	or	r23, r27
    9320:	cb 01       	movw	r24, r22
    9322:	ba 01       	movw	r22, r20
    9324:	08 95       	ret

00009326 <st_clust.isra.4>:
    9326:	fb 01       	movw	r30, r22
    9328:	22 8f       	std	Z+26, r18	; 0x1a
    932a:	33 8f       	std	Z+27, r19	; 0x1b
    932c:	dc 01       	movw	r26, r24
    932e:	8c 91       	ld	r24, X
    9330:	83 30       	cpi	r24, 0x03	; 3
    9332:	29 f4       	brne	.+10     	; 0x933e <st_clust.isra.4+0x18>
    9334:	ca 01       	movw	r24, r20
    9336:	aa 27       	eor	r26, r26
    9338:	bb 27       	eor	r27, r27
    933a:	84 8b       	std	Z+20, r24	; 0x14
    933c:	95 8b       	std	Z+21, r25	; 0x15
    933e:	08 95       	ret

00009340 <sync_window.part.5>:
    9340:	8f 92       	push	r8
    9342:	9f 92       	push	r9
    9344:	af 92       	push	r10
    9346:	bf 92       	push	r11
    9348:	ef 92       	push	r14
    934a:	ff 92       	push	r15
    934c:	0f 93       	push	r16
    934e:	1f 93       	push	r17
    9350:	cf 93       	push	r28
    9352:	df 93       	push	r29
    9354:	ec 01       	movw	r28, r24
    9356:	7c 01       	movw	r14, r24
    9358:	45 e3       	ldi	r20, 0x35	; 53
    935a:	e4 0e       	add	r14, r20
    935c:	f1 1c       	adc	r15, r1
    935e:	29 a9       	ldd	r18, Y+49	; 0x31
    9360:	3a a9       	ldd	r19, Y+50	; 0x32
    9362:	4b a9       	ldd	r20, Y+51	; 0x33
    9364:	5c a9       	ldd	r21, Y+52	; 0x34
    9366:	01 e0       	ldi	r16, 0x01	; 1
    9368:	10 e0       	ldi	r17, 0x00	; 0
    936a:	b7 01       	movw	r22, r14
    936c:	89 81       	ldd	r24, Y+1	; 0x01
    936e:	0e 94 4f 69 	call	0xd29e	; 0xd29e <disk_write>
    9372:	89 2b       	or	r24, r25
    9374:	41 f5       	brne	.+80     	; 0x93c6 <sync_window.part.5+0x86>
    9376:	1b 82       	std	Y+3, r1	; 0x03
    9378:	09 a9       	ldd	r16, Y+49	; 0x31
    937a:	1a a9       	ldd	r17, Y+50	; 0x32
    937c:	2b a9       	ldd	r18, Y+51	; 0x33
    937e:	3c a9       	ldd	r19, Y+52	; 0x34
    9380:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9382:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9384:	af 8d       	ldd	r26, Y+31	; 0x1f
    9386:	b8 a1       	ldd	r27, Y+32	; 0x20
    9388:	8d a0       	ldd	r8, Y+37	; 0x25
    938a:	9e a0       	ldd	r9, Y+38	; 0x26
    938c:	af a0       	ldd	r10, Y+39	; 0x27
    938e:	b8 a4       	ldd	r11, Y+40	; 0x28
    9390:	b9 01       	movw	r22, r18
    9392:	a8 01       	movw	r20, r16
    9394:	48 19       	sub	r20, r8
    9396:	59 09       	sbc	r21, r9
    9398:	6a 09       	sbc	r22, r10
    939a:	7b 09       	sbc	r23, r11
    939c:	48 17       	cp	r20, r24
    939e:	59 07       	cpc	r21, r25
    93a0:	6a 07       	cpc	r22, r26
    93a2:	7b 07       	cpc	r23, r27
    93a4:	98 f4       	brcc	.+38     	; 0x93cc <sync_window.part.5+0x8c>
    93a6:	6a 81       	ldd	r22, Y+2	; 0x02
    93a8:	62 30       	cpi	r22, 0x02	; 2
    93aa:	81 f4       	brne	.+32     	; 0x93cc <sync_window.part.5+0x8c>
    93ac:	a9 01       	movw	r20, r18
    93ae:	98 01       	movw	r18, r16
    93b0:	28 0f       	add	r18, r24
    93b2:	39 1f       	adc	r19, r25
    93b4:	4a 1f       	adc	r20, r26
    93b6:	5b 1f       	adc	r21, r27
    93b8:	01 e0       	ldi	r16, 0x01	; 1
    93ba:	10 e0       	ldi	r17, 0x00	; 0
    93bc:	b7 01       	movw	r22, r14
    93be:	89 81       	ldd	r24, Y+1	; 0x01
    93c0:	0e 94 4f 69 	call	0xd29e	; 0xd29e <disk_write>
    93c4:	03 c0       	rjmp	.+6      	; 0x93cc <sync_window.part.5+0x8c>
    93c6:	81 e0       	ldi	r24, 0x01	; 1
    93c8:	90 e0       	ldi	r25, 0x00	; 0
    93ca:	02 c0       	rjmp	.+4      	; 0x93d0 <sync_window.part.5+0x90>
    93cc:	80 e0       	ldi	r24, 0x00	; 0
    93ce:	90 e0       	ldi	r25, 0x00	; 0
    93d0:	df 91       	pop	r29
    93d2:	cf 91       	pop	r28
    93d4:	1f 91       	pop	r17
    93d6:	0f 91       	pop	r16
    93d8:	ff 90       	pop	r15
    93da:	ef 90       	pop	r14
    93dc:	bf 90       	pop	r11
    93de:	af 90       	pop	r10
    93e0:	9f 90       	pop	r9
    93e2:	8f 90       	pop	r8
    93e4:	08 95       	ret

000093e6 <sync_fs>:
    93e6:	ef 92       	push	r14
    93e8:	ff 92       	push	r15
    93ea:	0f 93       	push	r16
    93ec:	1f 93       	push	r17
    93ee:	cf 93       	push	r28
    93f0:	df 93       	push	r29
    93f2:	ec 01       	movw	r28, r24
    93f4:	8b 81       	ldd	r24, Y+3	; 0x03
    93f6:	81 11       	cpse	r24, r1
    93f8:	05 c0       	rjmp	.+10     	; 0x9404 <sync_fs+0x1e>
    93fa:	88 81       	ld	r24, Y
    93fc:	83 30       	cpi	r24, 0x03	; 3
    93fe:	09 f0       	breq	.+2      	; 0x9402 <sync_fs+0x1c>
    9400:	52 c0       	rjmp	.+164    	; 0x94a6 <sync_fs+0xc0>
    9402:	06 c0       	rjmp	.+12     	; 0x9410 <sync_fs+0x2a>
    9404:	ce 01       	movw	r24, r28
    9406:	9c df       	rcall	.-200    	; 0x9340 <sync_window.part.5>
    9408:	00 97       	sbiw	r24, 0x00	; 0
    940a:	09 f0       	breq	.+2      	; 0x940e <sync_fs+0x28>
    940c:	59 c0       	rjmp	.+178    	; 0x94c0 <sync_fs+0xda>
    940e:	f5 cf       	rjmp	.-22     	; 0x93fa <sync_fs+0x14>
    9410:	8c 81       	ldd	r24, Y+4	; 0x04
    9412:	81 30       	cpi	r24, 0x01	; 1
    9414:	09 f0       	breq	.+2      	; 0x9418 <sync_fs+0x32>
    9416:	47 c0       	rjmp	.+142    	; 0x94a6 <sync_fs+0xc0>
    9418:	40 e0       	ldi	r20, 0x00	; 0
    941a:	52 e0       	ldi	r21, 0x02	; 2
    941c:	60 e0       	ldi	r22, 0x00	; 0
    941e:	70 e0       	ldi	r23, 0x00	; 0
    9420:	7e 01       	movw	r14, r28
    9422:	85 e3       	ldi	r24, 0x35	; 53
    9424:	e8 0e       	add	r14, r24
    9426:	f1 1c       	adc	r15, r1
    9428:	c7 01       	movw	r24, r14
    942a:	50 dd       	rcall	.-1376   	; 0x8ecc <mem_set>
    942c:	85 e5       	ldi	r24, 0x55	; 85
    942e:	fe 01       	movw	r30, r28
    9430:	ed 5c       	subi	r30, 0xCD	; 205
    9432:	fd 4f       	sbci	r31, 0xFD	; 253
    9434:	80 83       	st	Z, r24
    9436:	8a ea       	ldi	r24, 0xAA	; 170
    9438:	31 96       	adiw	r30, 0x01	; 1
    943a:	80 83       	st	Z, r24
    943c:	82 e5       	ldi	r24, 0x52	; 82
    943e:	8d ab       	std	Y+53, r24	; 0x35
    9440:	8e ab       	std	Y+54, r24	; 0x36
    9442:	81 e6       	ldi	r24, 0x61	; 97
    9444:	8f ab       	std	Y+55, r24	; 0x37
    9446:	91 e4       	ldi	r25, 0x41	; 65
    9448:	98 af       	std	Y+56, r25	; 0x38
    944a:	22 e7       	ldi	r18, 0x72	; 114
    944c:	7b 97       	sbiw	r30, 0x1b	; 27
    944e:	20 83       	st	Z, r18
    9450:	31 96       	adiw	r30, 0x01	; 1
    9452:	20 83       	st	Z, r18
    9454:	31 96       	adiw	r30, 0x01	; 1
    9456:	90 83       	st	Z, r25
    9458:	31 96       	adiw	r30, 0x01	; 1
    945a:	80 83       	st	Z, r24
    945c:	49 89       	ldd	r20, Y+17	; 0x11
    945e:	5a 89       	ldd	r21, Y+18	; 0x12
    9460:	6b 89       	ldd	r22, Y+19	; 0x13
    9462:	7c 89       	ldd	r23, Y+20	; 0x14
    9464:	ce 01       	movw	r24, r28
    9466:	83 5e       	subi	r24, 0xE3	; 227
    9468:	9d 4f       	sbci	r25, 0xFD	; 253
    946a:	2a dd       	rcall	.-1452   	; 0x8ec0 <st_dword>
    946c:	4d 85       	ldd	r20, Y+13	; 0x0d
    946e:	5e 85       	ldd	r21, Y+14	; 0x0e
    9470:	6f 85       	ldd	r22, Y+15	; 0x0f
    9472:	78 89       	ldd	r23, Y+16	; 0x10
    9474:	ce 01       	movw	r24, r28
    9476:	8f 5d       	subi	r24, 0xDF	; 223
    9478:	9d 4f       	sbci	r25, 0xFD	; 253
    947a:	22 dd       	rcall	.-1468   	; 0x8ec0 <st_dword>
    947c:	89 a1       	ldd	r24, Y+33	; 0x21
    947e:	9a a1       	ldd	r25, Y+34	; 0x22
    9480:	ab a1       	ldd	r26, Y+35	; 0x23
    9482:	bc a1       	ldd	r27, Y+36	; 0x24
    9484:	9c 01       	movw	r18, r24
    9486:	ad 01       	movw	r20, r26
    9488:	2f 5f       	subi	r18, 0xFF	; 255
    948a:	3f 4f       	sbci	r19, 0xFF	; 255
    948c:	4f 4f       	sbci	r20, 0xFF	; 255
    948e:	5f 4f       	sbci	r21, 0xFF	; 255
    9490:	29 ab       	std	Y+49, r18	; 0x31
    9492:	3a ab       	std	Y+50, r19	; 0x32
    9494:	4b ab       	std	Y+51, r20	; 0x33
    9496:	5c ab       	std	Y+52, r21	; 0x34
    9498:	01 e0       	ldi	r16, 0x01	; 1
    949a:	10 e0       	ldi	r17, 0x00	; 0
    949c:	b7 01       	movw	r22, r14
    949e:	89 81       	ldd	r24, Y+1	; 0x01
    94a0:	0e 94 4f 69 	call	0xd29e	; 0xd29e <disk_write>
    94a4:	1c 82       	std	Y+4, r1	; 0x04
    94a6:	40 e0       	ldi	r20, 0x00	; 0
    94a8:	50 e0       	ldi	r21, 0x00	; 0
    94aa:	60 e0       	ldi	r22, 0x00	; 0
    94ac:	89 81       	ldd	r24, Y+1	; 0x01
    94ae:	0e 94 5f 69 	call	0xd2be	; 0xd2be <disk_ioctl>
    94b2:	31 e0       	ldi	r19, 0x01	; 1
    94b4:	20 e0       	ldi	r18, 0x00	; 0
    94b6:	89 2b       	or	r24, r25
    94b8:	09 f4       	brne	.+2      	; 0x94bc <sync_fs+0xd6>
    94ba:	30 e0       	ldi	r19, 0x00	; 0
    94bc:	83 2f       	mov	r24, r19
    94be:	92 2f       	mov	r25, r18
    94c0:	cd b7       	in	r28, 0x3d	; 61
    94c2:	de b7       	in	r29, 0x3e	; 62
    94c4:	e6 e0       	ldi	r30, 0x06	; 6
    94c6:	0c 94 8e e6 	jmp	0x1cd1c	; 0x1cd1c <__epilogue_restores__+0x18>

000094ca <dir_clear>:
    94ca:	4f 92       	push	r4
    94cc:	5f 92       	push	r5
    94ce:	6f 92       	push	r6
    94d0:	7f 92       	push	r7
    94d2:	af 92       	push	r10
    94d4:	bf 92       	push	r11
    94d6:	cf 92       	push	r12
    94d8:	df 92       	push	r13
    94da:	ef 92       	push	r14
    94dc:	ff 92       	push	r15
    94de:	0f 93       	push	r16
    94e0:	1f 93       	push	r17
    94e2:	cf 93       	push	r28
    94e4:	df 93       	push	r29
    94e6:	ec 01       	movw	r28, r24
    94e8:	6a 01       	movw	r12, r20
    94ea:	7b 01       	movw	r14, r22
    94ec:	8b 81       	ldd	r24, Y+3	; 0x03
    94ee:	81 11       	cpse	r24, r1
    94f0:	28 c0       	rjmp	.+80     	; 0x9542 <dir_clear+0x78>
    94f2:	b7 01       	movw	r22, r14
    94f4:	a6 01       	movw	r20, r12
    94f6:	ce 01       	movw	r24, r28
    94f8:	01 dd       	rcall	.-1534   	; 0x8efc <clst2sect>
    94fa:	2b 01       	movw	r4, r22
    94fc:	3c 01       	movw	r6, r24
    94fe:	69 ab       	std	Y+49, r22	; 0x31
    9500:	7a ab       	std	Y+50, r23	; 0x32
    9502:	8b ab       	std	Y+51, r24	; 0x33
    9504:	9c ab       	std	Y+52, r25	; 0x34
    9506:	5e 01       	movw	r10, r28
    9508:	25 e3       	ldi	r18, 0x35	; 53
    950a:	a2 0e       	add	r10, r18
    950c:	b1 1c       	adc	r11, r1
    950e:	40 e0       	ldi	r20, 0x00	; 0
    9510:	52 e0       	ldi	r21, 0x02	; 2
    9512:	60 e0       	ldi	r22, 0x00	; 0
    9514:	70 e0       	ldi	r23, 0x00	; 0
    9516:	c5 01       	movw	r24, r10
    9518:	d9 dc       	rcall	.-1614   	; 0x8ecc <mem_set>
    951a:	09 85       	ldd	r16, Y+9	; 0x09
    951c:	1a 85       	ldd	r17, Y+10	; 0x0a
    951e:	c8 01       	movw	r24, r16
    9520:	a0 e0       	ldi	r26, 0x00	; 0
    9522:	b0 e0       	ldi	r27, 0x00	; 0
    9524:	39 e0       	ldi	r19, 0x09	; 9
    9526:	88 0f       	add	r24, r24
    9528:	99 1f       	adc	r25, r25
    952a:	aa 1f       	adc	r26, r26
    952c:	bb 1f       	adc	r27, r27
    952e:	3a 95       	dec	r19
    9530:	d1 f7       	brne	.-12     	; 0x9526 <dir_clear+0x5c>
    9532:	81 15       	cp	r24, r1
    9534:	90 48       	sbci	r25, 0x80	; 128
    9536:	a1 05       	cpc	r26, r1
    9538:	b1 05       	cpc	r27, r1
    953a:	50 f0       	brcs	.+20     	; 0x9550 <dir_clear+0x86>
    953c:	00 e0       	ldi	r16, 0x00	; 0
    953e:	10 e8       	ldi	r17, 0x80	; 128
    9540:	14 c0       	rjmp	.+40     	; 0x956a <dir_clear+0xa0>
    9542:	ce 01       	movw	r24, r28
    9544:	fd de       	rcall	.-518    	; 0x9340 <sync_window.part.5>
    9546:	89 2b       	or	r24, r25
    9548:	a1 f2       	breq	.-88     	; 0x94f2 <dir_clear+0x28>
    954a:	81 e0       	ldi	r24, 0x01	; 1
    954c:	90 e0       	ldi	r25, 0x00	; 0
    954e:	56 c0       	rjmp	.+172    	; 0x95fc <dir_clear+0x132>
    9550:	10 2f       	mov	r17, r16
    9552:	00 27       	eor	r16, r16
    9554:	11 0f       	add	r17, r17
    9556:	09 c0       	rjmp	.+18     	; 0x956a <dir_clear+0xa0>
    9558:	c8 01       	movw	r24, r16
    955a:	0e 94 83 68 	call	0xd106	; 0xd106 <ff_memalloc>
    955e:	6c 01       	movw	r12, r24
    9560:	00 97       	sbiw	r24, 0x00	; 0
    9562:	09 f0       	breq	.+2      	; 0x9566 <dir_clear+0x9c>
    9564:	40 c0       	rjmp	.+128    	; 0x95e6 <dir_clear+0x11c>
    9566:	16 95       	lsr	r17
    9568:	07 95       	ror	r16
    956a:	01 30       	cpi	r16, 0x01	; 1
    956c:	82 e0       	ldi	r24, 0x02	; 2
    956e:	18 07       	cpc	r17, r24
    9570:	98 f7       	brcc	.-26     	; 0x9558 <dir_clear+0x8e>
    9572:	e1 2c       	mov	r14, r1
    9574:	f1 2c       	mov	r15, r1
    9576:	11 c0       	rjmp	.+34     	; 0x959a <dir_clear+0xd0>
    9578:	01 e0       	ldi	r16, 0x01	; 1
    957a:	10 e0       	ldi	r17, 0x00	; 0
    957c:	a3 01       	movw	r20, r6
    957e:	92 01       	movw	r18, r4
    9580:	2e 0d       	add	r18, r14
    9582:	3f 1d       	adc	r19, r15
    9584:	41 1d       	adc	r20, r1
    9586:	51 1d       	adc	r21, r1
    9588:	b5 01       	movw	r22, r10
    958a:	89 81       	ldd	r24, Y+1	; 0x01
    958c:	0e 94 4f 69 	call	0xd29e	; 0xd29e <disk_write>
    9590:	89 2b       	or	r24, r25
    9592:	01 f5       	brne	.+64     	; 0x95d4 <dir_clear+0x10a>
    9594:	2f ef       	ldi	r18, 0xFF	; 255
    9596:	e2 1a       	sub	r14, r18
    9598:	f2 0a       	sbc	r15, r18
    959a:	89 85       	ldd	r24, Y+9	; 0x09
    959c:	9a 85       	ldd	r25, Y+10	; 0x0a
    959e:	e8 16       	cp	r14, r24
    95a0:	f9 06       	cpc	r15, r25
    95a2:	50 f3       	brcs	.-44     	; 0x9578 <dir_clear+0xae>
    95a4:	17 c0       	rjmp	.+46     	; 0x95d4 <dir_clear+0x10a>
    95a6:	85 01       	movw	r16, r10
    95a8:	a3 01       	movw	r20, r6
    95aa:	92 01       	movw	r18, r4
    95ac:	2e 0d       	add	r18, r14
    95ae:	3f 1d       	adc	r19, r15
    95b0:	41 1d       	adc	r20, r1
    95b2:	51 1d       	adc	r21, r1
    95b4:	b6 01       	movw	r22, r12
    95b6:	89 81       	ldd	r24, Y+1	; 0x01
    95b8:	0e 94 4f 69 	call	0xd29e	; 0xd29e <disk_write>
    95bc:	89 2b       	or	r24, r25
    95be:	39 f4       	brne	.+14     	; 0x95ce <dir_clear+0x104>
    95c0:	ea 0c       	add	r14, r10
    95c2:	fb 1c       	adc	r15, r11
    95c4:	89 85       	ldd	r24, Y+9	; 0x09
    95c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    95c8:	e8 16       	cp	r14, r24
    95ca:	f9 06       	cpc	r15, r25
    95cc:	60 f3       	brcs	.-40     	; 0x95a6 <dir_clear+0xdc>
    95ce:	c6 01       	movw	r24, r12
    95d0:	0e 94 86 68 	call	0xd10c	; 0xd10c <ff_memfree>
    95d4:	81 e0       	ldi	r24, 0x01	; 1
    95d6:	90 e0       	ldi	r25, 0x00	; 0
    95d8:	29 85       	ldd	r18, Y+9	; 0x09
    95da:	3a 85       	ldd	r19, Y+10	; 0x0a
    95dc:	2e 15       	cp	r18, r14
    95de:	3f 05       	cpc	r19, r15
    95e0:	69 f4       	brne	.+26     	; 0x95fc <dir_clear+0x132>
    95e2:	80 e0       	ldi	r24, 0x00	; 0
    95e4:	0b c0       	rjmp	.+22     	; 0x95fc <dir_clear+0x132>
    95e6:	a8 01       	movw	r20, r16
    95e8:	60 e0       	ldi	r22, 0x00	; 0
    95ea:	70 e0       	ldi	r23, 0x00	; 0
    95ec:	6f dc       	rcall	.-1826   	; 0x8ecc <mem_set>
    95ee:	58 01       	movw	r10, r16
    95f0:	ab 2c       	mov	r10, r11
    95f2:	bb 24       	eor	r11, r11
    95f4:	a6 94       	lsr	r10
    95f6:	e1 2c       	mov	r14, r1
    95f8:	f1 2c       	mov	r15, r1
    95fa:	e4 cf       	rjmp	.-56     	; 0x95c4 <dir_clear+0xfa>
    95fc:	df 91       	pop	r29
    95fe:	cf 91       	pop	r28
    9600:	1f 91       	pop	r17
    9602:	0f 91       	pop	r16
    9604:	ff 90       	pop	r15
    9606:	ef 90       	pop	r14
    9608:	df 90       	pop	r13
    960a:	cf 90       	pop	r12
    960c:	bf 90       	pop	r11
    960e:	af 90       	pop	r10
    9610:	7f 90       	pop	r7
    9612:	6f 90       	pop	r6
    9614:	5f 90       	pop	r5
    9616:	4f 90       	pop	r4
    9618:	08 95       	ret

0000961a <move_window>:
    961a:	a0 e0       	ldi	r26, 0x00	; 0
    961c:	b0 e0       	ldi	r27, 0x00	; 0
    961e:	e3 e1       	ldi	r30, 0x13	; 19
    9620:	fb e4       	ldi	r31, 0x4B	; 75
    9622:	0c 94 70 e6 	jmp	0x1cce0	; 0x1cce0 <__prologue_saves__+0x14>
    9626:	ec 01       	movw	r28, r24
    9628:	6a 01       	movw	r12, r20
    962a:	7b 01       	movw	r14, r22
    962c:	89 a9       	ldd	r24, Y+49	; 0x31
    962e:	9a a9       	ldd	r25, Y+50	; 0x32
    9630:	ab a9       	ldd	r26, Y+51	; 0x33
    9632:	bc a9       	ldd	r27, Y+52	; 0x34
    9634:	84 17       	cp	r24, r20
    9636:	95 07       	cpc	r25, r21
    9638:	a6 07       	cpc	r26, r22
    963a:	b7 07       	cpc	r27, r23
    963c:	11 f1       	breq	.+68     	; 0x9682 <move_window+0x68>
    963e:	8b 81       	ldd	r24, Y+3	; 0x03
    9640:	81 11       	cpse	r24, r1
    9642:	13 c0       	rjmp	.+38     	; 0x966a <move_window+0x50>
    9644:	01 e0       	ldi	r16, 0x01	; 1
    9646:	10 e0       	ldi	r17, 0x00	; 0
    9648:	a7 01       	movw	r20, r14
    964a:	96 01       	movw	r18, r12
    964c:	be 01       	movw	r22, r28
    964e:	6b 5c       	subi	r22, 0xCB	; 203
    9650:	7f 4f       	sbci	r23, 0xFF	; 255
    9652:	89 81       	ldd	r24, Y+1	; 0x01
    9654:	0e 94 3f 69 	call	0xd27e	; 0xd27e <disk_read>
    9658:	89 2b       	or	r24, r25
    965a:	61 f0       	breq	.+24     	; 0x9674 <move_window+0x5a>
    965c:	81 e0       	ldi	r24, 0x01	; 1
    965e:	90 e0       	ldi	r25, 0x00	; 0
    9660:	cc 24       	eor	r12, r12
    9662:	ca 94       	dec	r12
    9664:	dc 2c       	mov	r13, r12
    9666:	76 01       	movw	r14, r12
    9668:	07 c0       	rjmp	.+14     	; 0x9678 <move_window+0x5e>
    966a:	ce 01       	movw	r24, r28
    966c:	69 de       	rcall	.-814    	; 0x9340 <sync_window.part.5>
    966e:	00 97       	sbiw	r24, 0x00	; 0
    9670:	51 f4       	brne	.+20     	; 0x9686 <move_window+0x6c>
    9672:	e8 cf       	rjmp	.-48     	; 0x9644 <move_window+0x2a>
    9674:	80 e0       	ldi	r24, 0x00	; 0
    9676:	90 e0       	ldi	r25, 0x00	; 0
    9678:	c9 aa       	std	Y+49, r12	; 0x31
    967a:	da aa       	std	Y+50, r13	; 0x32
    967c:	eb aa       	std	Y+51, r14	; 0x33
    967e:	fc aa       	std	Y+52, r15	; 0x34
    9680:	02 c0       	rjmp	.+4      	; 0x9686 <move_window+0x6c>
    9682:	80 e0       	ldi	r24, 0x00	; 0
    9684:	90 e0       	ldi	r25, 0x00	; 0
    9686:	cd b7       	in	r28, 0x3d	; 61
    9688:	de b7       	in	r29, 0x3e	; 62
    968a:	e8 e0       	ldi	r30, 0x08	; 8
    968c:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__epilogue_restores__+0x14>

00009690 <check_fs>:
    9690:	cf 93       	push	r28
    9692:	df 93       	push	r29
    9694:	ec 01       	movw	r28, r24
    9696:	1b 82       	std	Y+3, r1	; 0x03
    9698:	8f ef       	ldi	r24, 0xFF	; 255
    969a:	9f ef       	ldi	r25, 0xFF	; 255
    969c:	dc 01       	movw	r26, r24
    969e:	89 ab       	std	Y+49, r24	; 0x31
    96a0:	9a ab       	std	Y+50, r25	; 0x32
    96a2:	ab ab       	std	Y+51, r26	; 0x33
    96a4:	bc ab       	std	Y+52, r27	; 0x34
    96a6:	ce 01       	movw	r24, r28
    96a8:	b8 df       	rcall	.-144    	; 0x961a <move_window>
    96aa:	89 2b       	or	r24, r25
    96ac:	19 f5       	brne	.+70     	; 0x96f4 <check_fs+0x64>
    96ae:	fe 01       	movw	r30, r28
    96b0:	ed 5c       	subi	r30, 0xCD	; 205
    96b2:	fd 4f       	sbci	r31, 0xFD	; 253
    96b4:	80 81       	ld	r24, Z
    96b6:	91 81       	ldd	r25, Z+1	; 0x01
    96b8:	85 35       	cpi	r24, 0x55	; 85
    96ba:	9a 4a       	sbci	r25, 0xAA	; 170
    96bc:	f1 f4       	brne	.+60     	; 0x96fa <check_fs+0x6a>
    96be:	8d a9       	ldd	r24, Y+53	; 0x35
    96c0:	8b 3e       	cpi	r24, 0xEB	; 235
    96c2:	19 f0       	breq	.+6      	; 0x96ca <check_fs+0x3a>
    96c4:	88 5e       	subi	r24, 0xE8	; 232
    96c6:	82 30       	cpi	r24, 0x02	; 2
    96c8:	f0 f4       	brcc	.+60     	; 0x9706 <check_fs+0x76>
    96ca:	43 e0       	ldi	r20, 0x03	; 3
    96cc:	50 e0       	ldi	r21, 0x00	; 0
    96ce:	66 ec       	ldi	r22, 0xC6	; 198
    96d0:	78 e0       	ldi	r23, 0x08	; 8
    96d2:	ce 01       	movw	r24, r28
    96d4:	85 59       	subi	r24, 0x95	; 149
    96d6:	9f 4f       	sbci	r25, 0xFF	; 255
    96d8:	02 dc       	rcall	.-2044   	; 0x8ede <mem_cmp>
    96da:	89 2b       	or	r24, r25
    96dc:	89 f0       	breq	.+34     	; 0x9700 <check_fs+0x70>
    96de:	45 e0       	ldi	r20, 0x05	; 5
    96e0:	50 e0       	ldi	r21, 0x00	; 0
    96e2:	61 e2       	ldi	r22, 0x21	; 33
    96e4:	74 e0       	ldi	r23, 0x04	; 4
    96e6:	ce 01       	movw	r24, r28
    96e8:	89 57       	subi	r24, 0x79	; 121
    96ea:	9f 4f       	sbci	r25, 0xFF	; 255
    96ec:	f8 db       	rcall	.-2064   	; 0x8ede <mem_cmp>
    96ee:	89 2b       	or	r24, r25
    96f0:	51 f4       	brne	.+20     	; 0x9706 <check_fs+0x76>
    96f2:	06 c0       	rjmp	.+12     	; 0x9700 <check_fs+0x70>
    96f4:	84 e0       	ldi	r24, 0x04	; 4
    96f6:	90 e0       	ldi	r25, 0x00	; 0
    96f8:	08 c0       	rjmp	.+16     	; 0x970a <check_fs+0x7a>
    96fa:	83 e0       	ldi	r24, 0x03	; 3
    96fc:	90 e0       	ldi	r25, 0x00	; 0
    96fe:	05 c0       	rjmp	.+10     	; 0x970a <check_fs+0x7a>
    9700:	80 e0       	ldi	r24, 0x00	; 0
    9702:	90 e0       	ldi	r25, 0x00	; 0
    9704:	02 c0       	rjmp	.+4      	; 0x970a <check_fs+0x7a>
    9706:	82 e0       	ldi	r24, 0x02	; 2
    9708:	90 e0       	ldi	r25, 0x00	; 0
    970a:	df 91       	pop	r29
    970c:	cf 91       	pop	r28
    970e:	08 95       	ret

00009710 <mount_volume>:
    9710:	a0 e2       	ldi	r26, 0x20	; 32
    9712:	b0 e0       	ldi	r27, 0x00	; 0
    9714:	ee e8       	ldi	r30, 0x8E	; 142
    9716:	fb e4       	ldi	r31, 0x4B	; 75
    9718:	0c 94 68 e6 	jmp	0x1ccd0	; 0x1ccd0 <__prologue_saves__+0x4>
    971c:	5b 01       	movw	r10, r22
    971e:	f4 2e       	mov	r15, r20
    9720:	db 01       	movw	r26, r22
    9722:	1d 92       	st	X+, r1
    9724:	1c 92       	st	X, r1
    9726:	5d dc       	rcall	.-1862   	; 0x8fe2 <get_ldnumber>
    9728:	6c 01       	movw	r12, r24
    972a:	97 fd       	sbrc	r25, 7
    972c:	39 c2       	rjmp	.+1138   	; 0x9ba0 <mount_volume+0x490>
    972e:	fc 01       	movw	r30, r24
    9730:	ee 0f       	add	r30, r30
    9732:	ff 1f       	adc	r31, r31
    9734:	e9 5e       	subi	r30, 0xE9	; 233
    9736:	f7 4e       	sbci	r31, 0xE7	; 231
    9738:	00 81       	ld	r16, Z
    973a:	11 81       	ldd	r17, Z+1	; 0x01
    973c:	01 15       	cp	r16, r1
    973e:	11 05       	cpc	r17, r1
    9740:	09 f4       	brne	.+2      	; 0x9744 <mount_volume+0x34>
    9742:	31 c2       	rjmp	.+1122   	; 0x9ba6 <mount_volume+0x496>
    9744:	f5 01       	movw	r30, r10
    9746:	11 83       	std	Z+1, r17	; 0x01
    9748:	00 83       	st	Z, r16
    974a:	ff 2d       	mov	r31, r15
    974c:	fe 7f       	andi	r31, 0xFE	; 254
    974e:	ff 2e       	mov	r15, r31
    9750:	d8 01       	movw	r26, r16
    9752:	8c 91       	ld	r24, X
    9754:	88 23       	and	r24, r24
    9756:	71 f0       	breq	.+28     	; 0x9774 <mount_volume+0x64>
    9758:	f8 01       	movw	r30, r16
    975a:	81 81       	ldd	r24, Z+1	; 0x01
    975c:	0e 94 33 69 	call	0xd266	; 0xd266 <disk_status>
    9760:	80 fd       	sbrc	r24, 0
    9762:	08 c0       	rjmp	.+16     	; 0x9774 <mount_volume+0x64>
    9764:	ff 20       	and	r15, r15
    9766:	09 f4       	brne	.+2      	; 0x976a <mount_volume+0x5a>
    9768:	21 c2       	rjmp	.+1090   	; 0x9bac <mount_volume+0x49c>
    976a:	82 ff       	sbrs	r24, 2
    976c:	1f c2       	rjmp	.+1086   	; 0x9bac <mount_volume+0x49c>
    976e:	8a e0       	ldi	r24, 0x0A	; 10
    9770:	90 e0       	ldi	r25, 0x00	; 0
    9772:	24 c2       	rjmp	.+1096   	; 0x9bbc <mount_volume+0x4ac>
    9774:	d8 01       	movw	r26, r16
    9776:	1c 92       	st	X, r1
    9778:	f8 01       	movw	r30, r16
    977a:	c1 82       	std	Z+1, r12	; 0x01
    977c:	8c 2d       	mov	r24, r12
    977e:	0e 94 39 69 	call	0xd272	; 0xd272 <disk_initialize>
    9782:	80 fd       	sbrc	r24, 0
    9784:	16 c2       	rjmp	.+1068   	; 0x9bb2 <mount_volume+0x4a2>
    9786:	ff 20       	and	r15, r15
    9788:	11 f0       	breq	.+4      	; 0x978e <mount_volume+0x7e>
    978a:	82 fd       	sbrc	r24, 2
    978c:	f0 cf       	rjmp	.-32     	; 0x976e <mount_volume+0x5e>
    978e:	40 e0       	ldi	r20, 0x00	; 0
    9790:	50 e0       	ldi	r21, 0x00	; 0
    9792:	ba 01       	movw	r22, r20
    9794:	c8 01       	movw	r24, r16
    9796:	7c df       	rcall	.-264    	; 0x9690 <check_fs>
    9798:	82 30       	cpi	r24, 0x02	; 2
    979a:	91 05       	cpc	r25, r1
    979c:	b9 f5       	brne	.+110    	; 0x980c <mount_volume+0xfc>
    979e:	68 01       	movw	r12, r16
    97a0:	f5 e0       	ldi	r31, 0x05	; 5
    97a2:	cf 1a       	sub	r12, r31
    97a4:	fe ef       	ldi	r31, 0xFE	; 254
    97a6:	df 0a       	sbc	r13, r31
    97a8:	9e 01       	movw	r18, r28
    97aa:	2f 5f       	subi	r18, 0xFF	; 255
    97ac:	3f 4f       	sbci	r19, 0xFF	; 255
    97ae:	79 01       	movw	r14, r18
    97b0:	48 01       	movw	r8, r16
    97b2:	35 ec       	ldi	r19, 0xC5	; 197
    97b4:	83 1a       	sub	r8, r19
    97b6:	3d ef       	ldi	r19, 0xFD	; 253
    97b8:	93 0a       	sbc	r9, r19
    97ba:	57 01       	movw	r10, r14
    97bc:	c6 01       	movw	r24, r12
    97be:	6b db       	rcall	.-2346   	; 0x8e96 <ld_dword>
    97c0:	d5 01       	movw	r26, r10
    97c2:	6d 93       	st	X+, r22
    97c4:	7d 93       	st	X+, r23
    97c6:	8d 93       	st	X+, r24
    97c8:	9d 93       	st	X+, r25
    97ca:	5d 01       	movw	r10, r26
    97cc:	b0 e1       	ldi	r27, 0x10	; 16
    97ce:	cb 0e       	add	r12, r27
    97d0:	d1 1c       	adc	r13, r1
    97d2:	c8 14       	cp	r12, r8
    97d4:	d9 04       	cpc	r13, r9
    97d6:	91 f7       	brne	.-28     	; 0x97bc <mount_volume+0xac>
    97d8:	6e 01       	movw	r12, r28
    97da:	e1 e1       	ldi	r30, 0x11	; 17
    97dc:	ce 0e       	add	r12, r30
    97de:	d1 1c       	adc	r13, r1
    97e0:	d7 01       	movw	r26, r14
    97e2:	4d 91       	ld	r20, X+
    97e4:	5d 91       	ld	r21, X+
    97e6:	6d 91       	ld	r22, X+
    97e8:	7d 91       	ld	r23, X+
    97ea:	7d 01       	movw	r14, r26
    97ec:	41 15       	cp	r20, r1
    97ee:	51 05       	cpc	r21, r1
    97f0:	61 05       	cpc	r22, r1
    97f2:	71 05       	cpc	r23, r1
    97f4:	31 f0       	breq	.+12     	; 0x9802 <mount_volume+0xf2>
    97f6:	c8 01       	movw	r24, r16
    97f8:	4b df       	rcall	.-362    	; 0x9690 <check_fs>
    97fa:	82 30       	cpi	r24, 0x02	; 2
    97fc:	91 05       	cpc	r25, r1
    97fe:	18 f4       	brcc	.+6      	; 0x9806 <mount_volume+0xf6>
    9800:	05 c0       	rjmp	.+10     	; 0x980c <mount_volume+0xfc>
    9802:	83 e0       	ldi	r24, 0x03	; 3
    9804:	90 e0       	ldi	r25, 0x00	; 0
    9806:	ce 14       	cp	r12, r14
    9808:	df 04       	cpc	r13, r15
    980a:	51 f7       	brne	.-44     	; 0x97e0 <mount_volume+0xd0>
    980c:	84 30       	cpi	r24, 0x04	; 4
    980e:	91 05       	cpc	r25, r1
    9810:	09 f4       	brne	.+2      	; 0x9814 <mount_volume+0x104>
    9812:	d2 c1       	rjmp	.+932    	; 0x9bb8 <mount_volume+0x4a8>
    9814:	02 97       	sbiw	r24, 0x02	; 2
    9816:	18 f0       	brcs	.+6      	; 0x981e <mount_volume+0x10e>
    9818:	8d e0       	ldi	r24, 0x0D	; 13
    981a:	90 e0       	ldi	r25, 0x00	; 0
    981c:	cf c1       	rjmp	.+926    	; 0x9bbc <mount_volume+0x4ac>
    981e:	f8 01       	movw	r30, r16
    9820:	e0 5c       	subi	r30, 0xC0	; 192
    9822:	ff 4f       	sbci	r31, 0xFF	; 255
    9824:	80 81       	ld	r24, Z
    9826:	91 81       	ldd	r25, Z+1	; 0x01
    9828:	81 15       	cp	r24, r1
    982a:	92 40       	sbci	r25, 0x02	; 2
    982c:	a9 f7       	brne	.-22     	; 0x9818 <mount_volume+0x108>
    982e:	3b 96       	adiw	r30, 0x0b	; 11
    9830:	40 80       	ld	r4, Z
    9832:	51 80       	ldd	r5, Z+1	; 0x01
    9834:	41 14       	cp	r4, r1
    9836:	51 04       	cpc	r5, r1
    9838:	19 f0       	breq	.+6      	; 0x9840 <mount_volume+0x130>
    983a:	61 2c       	mov	r6, r1
    983c:	71 2c       	mov	r7, r1
    983e:	06 c0       	rjmp	.+12     	; 0x984c <mount_volume+0x13c>
    9840:	c8 01       	movw	r24, r16
    9842:	87 5a       	subi	r24, 0xA7	; 167
    9844:	9f 4f       	sbci	r25, 0xFF	; 255
    9846:	27 db       	rcall	.-2482   	; 0x8e96 <ld_dword>
    9848:	2b 01       	movw	r4, r22
    984a:	3c 01       	movw	r6, r24
    984c:	f8 01       	movw	r30, r16
    984e:	21 a9       	ldd	r18, Z+49	; 0x31
    9850:	32 a9       	ldd	r19, Z+50	; 0x32
    9852:	43 a9       	ldd	r20, Z+51	; 0x33
    9854:	54 a9       	ldd	r21, Z+52	; 0x34
    9856:	29 8b       	std	Y+17, r18	; 0x11
    9858:	3a 8b       	std	Y+18, r19	; 0x12
    985a:	4b 8b       	std	Y+19, r20	; 0x13
    985c:	5c 8b       	std	Y+20, r21	; 0x14
    985e:	45 8e       	std	Z+29, r4	; 0x1d
    9860:	56 8e       	std	Z+30, r5	; 0x1e
    9862:	67 8e       	std	Z+31, r6	; 0x1f
    9864:	70 a2       	std	Z+32, r7	; 0x20
    9866:	eb 5b       	subi	r30, 0xBB	; 187
    9868:	ff 4f       	sbci	r31, 0xFF	; 255
    986a:	a0 80       	ld	r10, Z
    986c:	f8 01       	movw	r30, r16
    986e:	a2 82       	std	Z+2, r10	; 0x02
    9870:	8f ef       	ldi	r24, 0xFF	; 255
    9872:	8a 0d       	add	r24, r10
    9874:	82 30       	cpi	r24, 0x02	; 2
    9876:	80 f6       	brcc	.-96     	; 0x9818 <mount_volume+0x108>
    9878:	ee 5b       	subi	r30, 0xBE	; 190
    987a:	ff 4f       	sbci	r31, 0xFF	; 255
    987c:	b0 80       	ld	r11, Z
    987e:	8b 2d       	mov	r24, r11
    9880:	90 e0       	ldi	r25, 0x00	; 0
    9882:	f8 01       	movw	r30, r16
    9884:	92 87       	std	Z+10, r25	; 0x0a
    9886:	81 87       	std	Z+9, r24	; 0x09
    9888:	00 97       	sbiw	r24, 0x00	; 0
    988a:	31 f2       	breq	.-116    	; 0x9818 <mount_volume+0x108>
    988c:	9c 01       	movw	r18, r24
    988e:	21 50       	subi	r18, 0x01	; 1
    9890:	31 09       	sbc	r19, r1
    9892:	82 23       	and	r24, r18
    9894:	93 23       	and	r25, r19
    9896:	89 2b       	or	r24, r25
    9898:	09 f0       	breq	.+2      	; 0x989c <mount_volume+0x18c>
    989a:	be cf       	rjmp	.-132    	; 0x9818 <mount_volume+0x108>
    989c:	ea 5b       	subi	r30, 0xBA	; 186
    989e:	ff 4f       	sbci	r31, 0xFF	; 255
    98a0:	80 80       	ld	r8, Z
    98a2:	91 80       	ldd	r9, Z+1	; 0x01
    98a4:	f8 01       	movw	r30, r16
    98a6:	90 86       	std	Z+8, r9	; 0x08
    98a8:	87 82       	std	Z+7, r8	; 0x07
    98aa:	c4 01       	movw	r24, r8
    98ac:	8f 70       	andi	r24, 0x0F	; 15
    98ae:	99 27       	eor	r25, r25
    98b0:	89 2b       	or	r24, r25
    98b2:	09 f0       	breq	.+2      	; 0x98b6 <mount_volume+0x1a6>
    98b4:	b1 cf       	rjmp	.-158    	; 0x9818 <mount_volume+0x108>
    98b6:	e8 5b       	subi	r30, 0xB8	; 184
    98b8:	ff 4f       	sbci	r31, 0xFF	; 255
    98ba:	80 81       	ld	r24, Z
    98bc:	91 81       	ldd	r25, Z+1	; 0x01
    98be:	6c 01       	movw	r12, r24
    98c0:	e1 2c       	mov	r14, r1
    98c2:	f1 2c       	mov	r15, r1
    98c4:	89 2b       	or	r24, r25
    98c6:	31 f4       	brne	.+12     	; 0x98d4 <mount_volume+0x1c4>
    98c8:	c8 01       	movw	r24, r16
    98ca:	8b 5a       	subi	r24, 0xAB	; 171
    98cc:	9f 4f       	sbci	r25, 0xFF	; 255
    98ce:	e3 da       	rcall	.-2618   	; 0x8e96 <ld_dword>
    98d0:	6b 01       	movw	r12, r22
    98d2:	7c 01       	movw	r14, r24
    98d4:	f8 01       	movw	r30, r16
    98d6:	ed 5b       	subi	r30, 0xBD	; 189
    98d8:	ff 4f       	sbci	r31, 0xFF	; 255
    98da:	01 90       	ld	r0, Z+
    98dc:	f0 81       	ld	r31, Z
    98de:	e0 2d       	mov	r30, r0
    98e0:	30 97       	sbiw	r30, 0x00	; 0
    98e2:	09 f4       	brne	.+2      	; 0x98e6 <mount_volume+0x1d6>
    98e4:	99 cf       	rjmp	.-206    	; 0x9818 <mount_volume+0x108>
    98e6:	aa 2d       	mov	r26, r10
    98e8:	b0 e0       	ldi	r27, 0x00	; 0
    98ea:	a3 01       	movw	r20, r6
    98ec:	92 01       	movw	r18, r4
    98ee:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__muluhisi3>
    98f2:	69 8f       	std	Y+25, r22	; 0x19
    98f4:	7a 8f       	std	Y+26, r23	; 0x1a
    98f6:	8b 8f       	std	Y+27, r24	; 0x1b
    98f8:	9c 8f       	std	Y+28, r25	; 0x1c
    98fa:	9f 01       	movw	r18, r30
    98fc:	40 e0       	ldi	r20, 0x00	; 0
    98fe:	50 e0       	ldi	r21, 0x00	; 0
    9900:	2d 8f       	std	Y+29, r18	; 0x1d
    9902:	3e 8f       	std	Y+30, r19	; 0x1e
    9904:	4f 8f       	std	Y+31, r20	; 0x1f
    9906:	58 a3       	std	Y+32, r21	; 0x20
    9908:	c4 01       	movw	r24, r8
    990a:	f4 e0       	ldi	r31, 0x04	; 4
    990c:	96 95       	lsr	r25
    990e:	87 95       	ror	r24
    9910:	fa 95       	dec	r31
    9912:	e1 f7       	brne	.-8      	; 0x990c <mount_volume+0x1fc>
    9914:	28 0f       	add	r18, r24
    9916:	39 1f       	adc	r19, r25
    9918:	41 1d       	adc	r20, r1
    991a:	51 1d       	adc	r21, r1
    991c:	da 01       	movw	r26, r20
    991e:	c9 01       	movw	r24, r18
    9920:	29 8d       	ldd	r18, Y+25	; 0x19
    9922:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9924:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9926:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9928:	28 0f       	add	r18, r24
    992a:	39 1f       	adc	r19, r25
    992c:	4a 1f       	adc	r20, r26
    992e:	5b 1f       	adc	r21, r27
    9930:	2d 8b       	std	Y+21, r18	; 0x15
    9932:	3e 8b       	std	Y+22, r19	; 0x16
    9934:	4f 8b       	std	Y+23, r20	; 0x17
    9936:	58 8f       	std	Y+24, r21	; 0x18
    9938:	c2 16       	cp	r12, r18
    993a:	d3 06       	cpc	r13, r19
    993c:	e4 06       	cpc	r14, r20
    993e:	f5 06       	cpc	r15, r21
    9940:	08 f4       	brcc	.+2      	; 0x9944 <mount_volume+0x234>
    9942:	6a cf       	rjmp	.-300    	; 0x9818 <mount_volume+0x108>
    9944:	c7 01       	movw	r24, r14
    9946:	b6 01       	movw	r22, r12
    9948:	62 1b       	sub	r22, r18
    994a:	73 0b       	sbc	r23, r19
    994c:	84 0b       	sbc	r24, r20
    994e:	95 0b       	sbc	r25, r21
    9950:	2b 2d       	mov	r18, r11
    9952:	30 e0       	ldi	r19, 0x00	; 0
    9954:	40 e0       	ldi	r20, 0x00	; 0
    9956:	50 e0       	ldi	r21, 0x00	; 0
    9958:	0e 94 f9 e5 	call	0x1cbf2	; 0x1cbf2 <__udivmodsi4>
    995c:	da 01       	movw	r26, r20
    995e:	c9 01       	movw	r24, r18
    9960:	01 97       	sbiw	r24, 0x01	; 1
    9962:	a1 09       	sbc	r26, r1
    9964:	b1 09       	sbc	r27, r1
    9966:	85 3f       	cpi	r24, 0xF5	; 245
    9968:	9f 4f       	sbci	r25, 0xFF	; 255
    996a:	af 4f       	sbci	r26, 0xFF	; 255
    996c:	bf 40       	sbci	r27, 0x0F	; 15
    996e:	08 f0       	brcs	.+2      	; 0x9972 <mount_volume+0x262>
    9970:	53 cf       	rjmp	.-346    	; 0x9818 <mount_volume+0x108>
    9972:	26 3f       	cpi	r18, 0xF6	; 246
    9974:	8f ef       	ldi	r24, 0xFF	; 255
    9976:	38 07       	cpc	r19, r24
    9978:	41 05       	cpc	r20, r1
    997a:	51 05       	cpc	r21, r1
    997c:	50 f4       	brcc	.+20     	; 0x9992 <mount_volume+0x282>
    997e:	26 3f       	cpi	r18, 0xF6	; 246
    9980:	9f e0       	ldi	r25, 0x0F	; 15
    9982:	39 07       	cpc	r19, r25
    9984:	41 05       	cpc	r20, r1
    9986:	51 05       	cpc	r21, r1
    9988:	40 f4       	brcc	.+16     	; 0x999a <mount_volume+0x28a>
    998a:	aa 24       	eor	r10, r10
    998c:	a3 94       	inc	r10
    998e:	b1 2c       	mov	r11, r1
    9990:	07 c0       	rjmp	.+14     	; 0x99a0 <mount_volume+0x290>
    9992:	73 e0       	ldi	r23, 0x03	; 3
    9994:	a7 2e       	mov	r10, r23
    9996:	b1 2c       	mov	r11, r1
    9998:	03 c0       	rjmp	.+6      	; 0x99a0 <mount_volume+0x290>
    999a:	62 e0       	ldi	r22, 0x02	; 2
    999c:	a6 2e       	mov	r10, r22
    999e:	b1 2c       	mov	r11, r1
    99a0:	69 01       	movw	r12, r18
    99a2:	7a 01       	movw	r14, r20
    99a4:	a2 e0       	ldi	r26, 0x02	; 2
    99a6:	ca 0e       	add	r12, r26
    99a8:	d1 1c       	adc	r13, r1
    99aa:	e1 1c       	adc	r14, r1
    99ac:	f1 1c       	adc	r15, r1
    99ae:	f8 01       	movw	r30, r16
    99b0:	c1 8e       	std	Z+25, r12	; 0x19
    99b2:	d2 8e       	std	Z+26, r13	; 0x1a
    99b4:	e3 8e       	std	Z+27, r14	; 0x1b
    99b6:	f4 8e       	std	Z+28, r15	; 0x1c
    99b8:	29 89       	ldd	r18, Y+17	; 0x11
    99ba:	3a 89       	ldd	r19, Y+18	; 0x12
    99bc:	4b 89       	ldd	r20, Y+19	; 0x13
    99be:	5c 89       	ldd	r21, Y+20	; 0x14
    99c0:	21 a3       	std	Z+33, r18	; 0x21
    99c2:	32 a3       	std	Z+34, r19	; 0x22
    99c4:	43 a3       	std	Z+35, r20	; 0x23
    99c6:	54 a3       	std	Z+36, r21	; 0x24
    99c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    99ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    99cc:	af 8d       	ldd	r26, Y+31	; 0x1f
    99ce:	b8 a1       	ldd	r27, Y+32	; 0x20
    99d0:	28 0f       	add	r18, r24
    99d2:	39 1f       	adc	r19, r25
    99d4:	4a 1f       	adc	r20, r26
    99d6:	5b 1f       	adc	r21, r27
    99d8:	2d 8f       	std	Y+29, r18	; 0x1d
    99da:	3e 8f       	std	Y+30, r19	; 0x1e
    99dc:	4f 8f       	std	Y+31, r20	; 0x1f
    99de:	58 a3       	std	Y+32, r21	; 0x20
    99e0:	25 a3       	std	Z+37, r18	; 0x25
    99e2:	36 a3       	std	Z+38, r19	; 0x26
    99e4:	47 a3       	std	Z+39, r20	; 0x27
    99e6:	50 a7       	std	Z+40, r21	; 0x28
    99e8:	49 89       	ldd	r20, Y+17	; 0x11
    99ea:	5a 89       	ldd	r21, Y+18	; 0x12
    99ec:	6b 89       	ldd	r22, Y+19	; 0x13
    99ee:	7c 89       	ldd	r23, Y+20	; 0x14
    99f0:	8d 89       	ldd	r24, Y+21	; 0x15
    99f2:	9e 89       	ldd	r25, Y+22	; 0x16
    99f4:	af 89       	ldd	r26, Y+23	; 0x17
    99f6:	b8 8d       	ldd	r27, Y+24	; 0x18
    99f8:	48 0f       	add	r20, r24
    99fa:	59 1f       	adc	r21, r25
    99fc:	6a 1f       	adc	r22, r26
    99fe:	7b 1f       	adc	r23, r27
    9a00:	45 a7       	std	Z+45, r20	; 0x2d
    9a02:	56 a7       	std	Z+46, r21	; 0x2e
    9a04:	67 a7       	std	Z+47, r22	; 0x2f
    9a06:	70 ab       	std	Z+48, r23	; 0x30
    9a08:	f3 e0       	ldi	r31, 0x03	; 3
    9a0a:	af 16       	cp	r10, r31
    9a0c:	b1 04       	cpc	r11, r1
    9a0e:	e9 f4       	brne	.+58     	; 0x9a4a <mount_volume+0x33a>
    9a10:	f8 01       	movw	r30, r16
    9a12:	e1 5a       	subi	r30, 0xA1	; 161
    9a14:	ff 4f       	sbci	r31, 0xFF	; 255
    9a16:	80 81       	ld	r24, Z
    9a18:	91 81       	ldd	r25, Z+1	; 0x01
    9a1a:	89 2b       	or	r24, r25
    9a1c:	09 f0       	breq	.+2      	; 0x9a20 <mount_volume+0x310>
    9a1e:	fc ce       	rjmp	.-520    	; 0x9818 <mount_volume+0x108>
    9a20:	81 14       	cp	r8, r1
    9a22:	91 04       	cpc	r9, r1
    9a24:	09 f0       	breq	.+2      	; 0x9a28 <mount_volume+0x318>
    9a26:	f8 ce       	rjmp	.-528    	; 0x9818 <mount_volume+0x108>
    9a28:	c8 01       	movw	r24, r16
    9a2a:	8f 59       	subi	r24, 0x9F	; 159
    9a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    9a2e:	33 da       	rcall	.-2970   	; 0x8e96 <ld_dword>
    9a30:	f8 01       	movw	r30, r16
    9a32:	61 a7       	std	Z+41, r22	; 0x29
    9a34:	72 a7       	std	Z+42, r23	; 0x2a
    9a36:	83 a7       	std	Z+43, r24	; 0x2b
    9a38:	94 a7       	std	Z+44, r25	; 0x2c
    9a3a:	42 e0       	ldi	r20, 0x02	; 2
    9a3c:	cc 0c       	add	r12, r12
    9a3e:	dd 1c       	adc	r13, r13
    9a40:	ee 1c       	adc	r14, r14
    9a42:	ff 1c       	adc	r15, r15
    9a44:	4a 95       	dec	r20
    9a46:	d1 f7       	brne	.-12     	; 0x9a3c <mount_volume+0x32c>
    9a48:	33 c0       	rjmp	.+102    	; 0x9ab0 <mount_volume+0x3a0>
    9a4a:	81 14       	cp	r8, r1
    9a4c:	91 04       	cpc	r9, r1
    9a4e:	09 f4       	brne	.+2      	; 0x9a52 <mount_volume+0x342>
    9a50:	e3 ce       	rjmp	.-570    	; 0x9818 <mount_volume+0x108>
    9a52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9a54:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9a56:	af 8d       	ldd	r26, Y+31	; 0x1f
    9a58:	b8 a1       	ldd	r27, Y+32	; 0x20
    9a5a:	29 8d       	ldd	r18, Y+25	; 0x19
    9a5c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9a5e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9a60:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9a62:	82 0f       	add	r24, r18
    9a64:	93 1f       	adc	r25, r19
    9a66:	a4 1f       	adc	r26, r20
    9a68:	b5 1f       	adc	r27, r21
    9a6a:	f8 01       	movw	r30, r16
    9a6c:	81 a7       	std	Z+41, r24	; 0x29
    9a6e:	92 a7       	std	Z+42, r25	; 0x2a
    9a70:	a3 a7       	std	Z+43, r26	; 0x2b
    9a72:	b4 a7       	std	Z+44, r27	; 0x2c
    9a74:	f2 e0       	ldi	r31, 0x02	; 2
    9a76:	af 16       	cp	r10, r31
    9a78:	b1 04       	cpc	r11, r1
    9a7a:	29 f4       	brne	.+10     	; 0x9a86 <mount_volume+0x376>
    9a7c:	cc 0c       	add	r12, r12
    9a7e:	dd 1c       	adc	r13, r13
    9a80:	ee 1c       	adc	r14, r14
    9a82:	ff 1c       	adc	r15, r15
    9a84:	15 c0       	rjmp	.+42     	; 0x9ab0 <mount_volume+0x3a0>
    9a86:	a3 e0       	ldi	r26, 0x03	; 3
    9a88:	b0 e0       	ldi	r27, 0x00	; 0
    9a8a:	a7 01       	movw	r20, r14
    9a8c:	96 01       	movw	r18, r12
    9a8e:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__muluhisi3>
    9a92:	dc 01       	movw	r26, r24
    9a94:	cb 01       	movw	r24, r22
    9a96:	b6 95       	lsr	r27
    9a98:	a7 95       	ror	r26
    9a9a:	97 95       	ror	r25
    9a9c:	87 95       	ror	r24
    9a9e:	21 e0       	ldi	r18, 0x01	; 1
    9aa0:	c2 22       	and	r12, r18
    9aa2:	dd 24       	eor	r13, r13
    9aa4:	ee 24       	eor	r14, r14
    9aa6:	ff 24       	eor	r15, r15
    9aa8:	c8 0e       	add	r12, r24
    9aaa:	d9 1e       	adc	r13, r25
    9aac:	ea 1e       	adc	r14, r26
    9aae:	fb 1e       	adc	r15, r27
    9ab0:	3f ef       	ldi	r19, 0xFF	; 255
    9ab2:	c3 0e       	add	r12, r19
    9ab4:	31 e0       	ldi	r19, 0x01	; 1
    9ab6:	d3 1e       	adc	r13, r19
    9ab8:	e1 1c       	adc	r14, r1
    9aba:	f1 1c       	adc	r15, r1
    9abc:	89 e0       	ldi	r24, 0x09	; 9
    9abe:	f6 94       	lsr	r15
    9ac0:	e7 94       	ror	r14
    9ac2:	d7 94       	ror	r13
    9ac4:	c7 94       	ror	r12
    9ac6:	8a 95       	dec	r24
    9ac8:	d1 f7       	brne	.-12     	; 0x9abe <mount_volume+0x3ae>
    9aca:	4c 14       	cp	r4, r12
    9acc:	5d 04       	cpc	r5, r13
    9ace:	6e 04       	cpc	r6, r14
    9ad0:	7f 04       	cpc	r7, r15
    9ad2:	08 f4       	brcc	.+2      	; 0x9ad6 <mount_volume+0x3c6>
    9ad4:	a1 ce       	rjmp	.-702    	; 0x9818 <mount_volume+0x108>
    9ad6:	8f ef       	ldi	r24, 0xFF	; 255
    9ad8:	9f ef       	ldi	r25, 0xFF	; 255
    9ada:	dc 01       	movw	r26, r24
    9adc:	f8 01       	movw	r30, r16
    9ade:	81 8b       	std	Z+17, r24	; 0x11
    9ae0:	92 8b       	std	Z+18, r25	; 0x12
    9ae2:	a3 8b       	std	Z+19, r26	; 0x13
    9ae4:	b4 8b       	std	Z+20, r27	; 0x14
    9ae6:	85 87       	std	Z+13, r24	; 0x0d
    9ae8:	96 87       	std	Z+14, r25	; 0x0e
    9aea:	a7 87       	std	Z+15, r26	; 0x0f
    9aec:	b0 8b       	std	Z+16, r27	; 0x10
    9aee:	80 e8       	ldi	r24, 0x80	; 128
    9af0:	84 83       	std	Z+4, r24	; 0x04
    9af2:	f3 e0       	ldi	r31, 0x03	; 3
    9af4:	af 16       	cp	r10, r31
    9af6:	b1 04       	cpc	r11, r1
    9af8:	09 f0       	breq	.+2      	; 0x9afc <mount_volume+0x3ec>
    9afa:	3f c0       	rjmp	.+126    	; 0x9b7a <mount_volume+0x46a>
    9afc:	f8 01       	movw	r30, r16
    9afe:	eb 59       	subi	r30, 0x9B	; 155
    9b00:	ff 4f       	sbci	r31, 0xFF	; 255
    9b02:	80 81       	ld	r24, Z
    9b04:	91 81       	ldd	r25, Z+1	; 0x01
    9b06:	01 97       	sbiw	r24, 0x01	; 1
    9b08:	c1 f5       	brne	.+112    	; 0x9b7a <mount_volume+0x46a>
    9b0a:	49 89       	ldd	r20, Y+17	; 0x11
    9b0c:	5a 89       	ldd	r21, Y+18	; 0x12
    9b0e:	6b 89       	ldd	r22, Y+19	; 0x13
    9b10:	7c 89       	ldd	r23, Y+20	; 0x14
    9b12:	4f 5f       	subi	r20, 0xFF	; 255
    9b14:	5f 4f       	sbci	r21, 0xFF	; 255
    9b16:	6f 4f       	sbci	r22, 0xFF	; 255
    9b18:	7f 4f       	sbci	r23, 0xFF	; 255
    9b1a:	c8 01       	movw	r24, r16
    9b1c:	7e dd       	rcall	.-1284   	; 0x961a <move_window>
    9b1e:	89 2b       	or	r24, r25
    9b20:	61 f5       	brne	.+88     	; 0x9b7a <mount_volume+0x46a>
    9b22:	f8 01       	movw	r30, r16
    9b24:	14 82       	std	Z+4, r1	; 0x04
    9b26:	ed 5c       	subi	r30, 0xCD	; 205
    9b28:	fd 4f       	sbci	r31, 0xFD	; 253
    9b2a:	80 81       	ld	r24, Z
    9b2c:	91 81       	ldd	r25, Z+1	; 0x01
    9b2e:	85 35       	cpi	r24, 0x55	; 85
    9b30:	9a 4a       	sbci	r25, 0xAA	; 170
    9b32:	19 f5       	brne	.+70     	; 0x9b7a <mount_volume+0x46a>
    9b34:	c8 01       	movw	r24, r16
    9b36:	c5 96       	adiw	r24, 0x35	; 53
    9b38:	ae d9       	rcall	.-3236   	; 0x8e96 <ld_dword>
    9b3a:	62 35       	cpi	r22, 0x52	; 82
    9b3c:	72 45       	sbci	r23, 0x52	; 82
    9b3e:	81 46       	sbci	r24, 0x61	; 97
    9b40:	91 44       	sbci	r25, 0x41	; 65
    9b42:	d9 f4       	brne	.+54     	; 0x9b7a <mount_volume+0x46a>
    9b44:	c8 01       	movw	r24, r16
    9b46:	87 5e       	subi	r24, 0xE7	; 231
    9b48:	9d 4f       	sbci	r25, 0xFD	; 253
    9b4a:	a5 d9       	rcall	.-3254   	; 0x8e96 <ld_dword>
    9b4c:	62 37       	cpi	r22, 0x72	; 114
    9b4e:	72 47       	sbci	r23, 0x72	; 114
    9b50:	81 44       	sbci	r24, 0x41	; 65
    9b52:	91 46       	sbci	r25, 0x61	; 97
    9b54:	91 f4       	brne	.+36     	; 0x9b7a <mount_volume+0x46a>
    9b56:	c8 01       	movw	r24, r16
    9b58:	83 5e       	subi	r24, 0xE3	; 227
    9b5a:	9d 4f       	sbci	r25, 0xFD	; 253
    9b5c:	9c d9       	rcall	.-3272   	; 0x8e96 <ld_dword>
    9b5e:	f8 01       	movw	r30, r16
    9b60:	61 8b       	std	Z+17, r22	; 0x11
    9b62:	72 8b       	std	Z+18, r23	; 0x12
    9b64:	83 8b       	std	Z+19, r24	; 0x13
    9b66:	94 8b       	std	Z+20, r25	; 0x14
    9b68:	c8 01       	movw	r24, r16
    9b6a:	8f 5d       	subi	r24, 0xDF	; 223
    9b6c:	9d 4f       	sbci	r25, 0xFD	; 253
    9b6e:	93 d9       	rcall	.-3290   	; 0x8e96 <ld_dword>
    9b70:	f8 01       	movw	r30, r16
    9b72:	65 87       	std	Z+13, r22	; 0x0d
    9b74:	76 87       	std	Z+14, r23	; 0x0e
    9b76:	87 87       	std	Z+15, r24	; 0x0f
    9b78:	90 8b       	std	Z+16, r25	; 0x10
    9b7a:	d8 01       	movw	r26, r16
    9b7c:	ac 92       	st	X, r10
    9b7e:	80 91 15 18 	lds	r24, 0x1815	; 0x801815 <Fsid>
    9b82:	90 91 16 18 	lds	r25, 0x1816	; 0x801816 <Fsid+0x1>
    9b86:	01 96       	adiw	r24, 0x01	; 1
    9b88:	90 93 16 18 	sts	0x1816, r25	; 0x801816 <Fsid+0x1>
    9b8c:	80 93 15 18 	sts	0x1815, r24	; 0x801815 <Fsid>
    9b90:	f8 01       	movw	r30, r16
    9b92:	96 83       	std	Z+6, r25	; 0x06
    9b94:	85 83       	std	Z+5, r24	; 0x05
    9b96:	15 8a       	std	Z+21, r1	; 0x15
    9b98:	16 8a       	std	Z+22, r1	; 0x16
    9b9a:	17 8a       	std	Z+23, r1	; 0x17
    9b9c:	10 8e       	std	Z+24, r1	; 0x18
    9b9e:	06 c0       	rjmp	.+12     	; 0x9bac <mount_volume+0x49c>
    9ba0:	8b e0       	ldi	r24, 0x0B	; 11
    9ba2:	90 e0       	ldi	r25, 0x00	; 0
    9ba4:	0b c0       	rjmp	.+22     	; 0x9bbc <mount_volume+0x4ac>
    9ba6:	8c e0       	ldi	r24, 0x0C	; 12
    9ba8:	90 e0       	ldi	r25, 0x00	; 0
    9baa:	08 c0       	rjmp	.+16     	; 0x9bbc <mount_volume+0x4ac>
    9bac:	80 e0       	ldi	r24, 0x00	; 0
    9bae:	90 e0       	ldi	r25, 0x00	; 0
    9bb0:	05 c0       	rjmp	.+10     	; 0x9bbc <mount_volume+0x4ac>
    9bb2:	83 e0       	ldi	r24, 0x03	; 3
    9bb4:	90 e0       	ldi	r25, 0x00	; 0
    9bb6:	02 c0       	rjmp	.+4      	; 0x9bbc <mount_volume+0x4ac>
    9bb8:	81 e0       	ldi	r24, 0x01	; 1
    9bba:	90 e0       	ldi	r25, 0x00	; 0
    9bbc:	a0 96       	adiw	r28, 0x20	; 32
    9bbe:	e0 e1       	ldi	r30, 0x10	; 16
    9bc0:	0c 94 84 e6 	jmp	0x1cd08	; 0x1cd08 <__epilogue_restores__+0x4>

00009bc4 <put_fat>:
    9bc4:	a6 e0       	ldi	r26, 0x06	; 6
    9bc6:	b0 e0       	ldi	r27, 0x00	; 0
    9bc8:	e8 ee       	ldi	r30, 0xE8	; 232
    9bca:	fd e4       	ldi	r31, 0x4D	; 77
    9bcc:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
    9bd0:	42 30       	cpi	r20, 0x02	; 2
    9bd2:	51 05       	cpc	r21, r1
    9bd4:	61 05       	cpc	r22, r1
    9bd6:	71 05       	cpc	r23, r1
    9bd8:	08 f4       	brcc	.+2      	; 0x9bdc <put_fat+0x18>
    9bda:	e5 c0       	rjmp	.+458    	; 0x9da6 <put_fat+0x1e2>
    9bdc:	fc 01       	movw	r30, r24
    9bde:	c1 8c       	ldd	r12, Z+25	; 0x19
    9be0:	d2 8c       	ldd	r13, Z+26	; 0x1a
    9be2:	e3 8c       	ldd	r14, Z+27	; 0x1b
    9be4:	f4 8c       	ldd	r15, Z+28	; 0x1c
    9be6:	4c 15       	cp	r20, r12
    9be8:	5d 05       	cpc	r21, r13
    9bea:	6e 05       	cpc	r22, r14
    9bec:	7f 05       	cpc	r23, r15
    9bee:	08 f0       	brcs	.+2      	; 0x9bf2 <put_fat+0x2e>
    9bf0:	da c0       	rjmp	.+436    	; 0x9da6 <put_fat+0x1e2>
    9bf2:	28 01       	movw	r4, r16
    9bf4:	39 01       	movw	r6, r18
    9bf6:	6a 01       	movw	r12, r20
    9bf8:	7b 01       	movw	r14, r22
    9bfa:	9e 83       	std	Y+6, r25	; 0x06
    9bfc:	8d 83       	std	Y+5, r24	; 0x05
    9bfe:	80 81       	ld	r24, Z
    9c00:	82 30       	cpi	r24, 0x02	; 2
    9c02:	09 f4       	brne	.+2      	; 0x9c06 <put_fat+0x42>
    9c04:	73 c0       	rjmp	.+230    	; 0x9cec <put_fat+0x128>
    9c06:	83 30       	cpi	r24, 0x03	; 3
    9c08:	09 f4       	brne	.+2      	; 0x9c0c <put_fat+0x48>
    9c0a:	92 c0       	rjmp	.+292    	; 0x9d30 <put_fat+0x16c>
    9c0c:	81 30       	cpi	r24, 0x01	; 1
    9c0e:	09 f0       	breq	.+2      	; 0x9c12 <put_fat+0x4e>
    9c10:	ca c0       	rjmp	.+404    	; 0x9da6 <put_fat+0x1e2>
    9c12:	4a 01       	movw	r8, r20
    9c14:	96 94       	lsr	r9
    9c16:	87 94       	ror	r8
    9c18:	84 0e       	add	r8, r20
    9c1a:	95 1e       	adc	r9, r21
    9c1c:	c4 01       	movw	r24, r8
    9c1e:	89 2f       	mov	r24, r25
    9c20:	99 27       	eor	r25, r25
    9c22:	86 95       	lsr	r24
    9c24:	45 a1       	ldd	r20, Z+37	; 0x25
    9c26:	56 a1       	ldd	r21, Z+38	; 0x26
    9c28:	67 a1       	ldd	r22, Z+39	; 0x27
    9c2a:	70 a5       	ldd	r23, Z+40	; 0x28
    9c2c:	48 0f       	add	r20, r24
    9c2e:	59 1f       	adc	r21, r25
    9c30:	61 1d       	adc	r22, r1
    9c32:	71 1d       	adc	r23, r1
    9c34:	cf 01       	movw	r24, r30
    9c36:	f1 dc       	rcall	.-1566   	; 0x961a <move_window>
    9c38:	5c 01       	movw	r10, r24
    9c3a:	89 2b       	or	r24, r25
    9c3c:	09 f0       	breq	.+2      	; 0x9c40 <put_fat+0x7c>
    9c3e:	b6 c0       	rjmp	.+364    	; 0x9dac <put_fat+0x1e8>
    9c40:	2d 80       	ldd	r2, Y+5	; 0x05
    9c42:	3e 80       	ldd	r3, Y+6	; 0x06
    9c44:	f5 e3       	ldi	r31, 0x35	; 53
    9c46:	2f 0e       	add	r2, r31
    9c48:	31 1c       	adc	r3, r1
    9c4a:	84 01       	movw	r16, r8
    9c4c:	0f 5f       	subi	r16, 0xFF	; 255
    9c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    9c50:	21 e0       	ldi	r18, 0x01	; 1
    9c52:	92 22       	and	r9, r18
    9c54:	f1 01       	movw	r30, r2
    9c56:	e8 0d       	add	r30, r8
    9c58:	f9 1d       	adc	r31, r9
    9c5a:	d7 01       	movw	r26, r14
    9c5c:	c6 01       	movw	r24, r12
    9c5e:	81 70       	andi	r24, 0x01	; 1
    9c60:	99 27       	eor	r25, r25
    9c62:	aa 27       	eor	r26, r26
    9c64:	bb 27       	eor	r27, r27
    9c66:	89 83       	std	Y+1, r24	; 0x01
    9c68:	9a 83       	std	Y+2, r25	; 0x02
    9c6a:	ab 83       	std	Y+3, r26	; 0x03
    9c6c:	bc 83       	std	Y+4, r27	; 0x04
    9c6e:	c0 fe       	sbrs	r12, 0
    9c70:	09 c0       	rjmp	.+18     	; 0x9c84 <put_fat+0xc0>
    9c72:	80 81       	ld	r24, Z
    9c74:	28 2f       	mov	r18, r24
    9c76:	2f 70       	andi	r18, 0x0F	; 15
    9c78:	a0 e1       	ldi	r26, 0x10	; 16
    9c7a:	4a 9e       	mul	r4, r26
    9c7c:	c0 01       	movw	r24, r0
    9c7e:	11 24       	eor	r1, r1
    9c80:	82 2b       	or	r24, r18
    9c82:	01 c0       	rjmp	.+2      	; 0x9c86 <put_fat+0xc2>
    9c84:	84 2d       	mov	r24, r4
    9c86:	80 83       	st	Z, r24
    9c88:	81 e0       	ldi	r24, 0x01	; 1
    9c8a:	ed 81       	ldd	r30, Y+5	; 0x05
    9c8c:	fe 81       	ldd	r31, Y+6	; 0x06
    9c8e:	83 83       	std	Z+3, r24	; 0x03
    9c90:	45 a1       	ldd	r20, Z+37	; 0x25
    9c92:	56 a1       	ldd	r21, Z+38	; 0x26
    9c94:	67 a1       	ldd	r22, Z+39	; 0x27
    9c96:	70 a5       	ldd	r23, Z+40	; 0x28
    9c98:	c8 01       	movw	r24, r16
    9c9a:	89 2f       	mov	r24, r25
    9c9c:	99 27       	eor	r25, r25
    9c9e:	86 95       	lsr	r24
    9ca0:	48 0f       	add	r20, r24
    9ca2:	59 1f       	adc	r21, r25
    9ca4:	61 1d       	adc	r22, r1
    9ca6:	71 1d       	adc	r23, r1
    9ca8:	cf 01       	movw	r24, r30
    9caa:	b7 dc       	rcall	.-1682   	; 0x961a <move_window>
    9cac:	5c 01       	movw	r10, r24
    9cae:	89 2b       	or	r24, r25
    9cb0:	09 f0       	breq	.+2      	; 0x9cb4 <put_fat+0xf0>
    9cb2:	7c c0       	rjmp	.+248    	; 0x9dac <put_fat+0x1e8>
    9cb4:	11 70       	andi	r17, 0x01	; 1
    9cb6:	f1 01       	movw	r30, r2
    9cb8:	e0 0f       	add	r30, r16
    9cba:	f1 1f       	adc	r31, r17
    9cbc:	89 81       	ldd	r24, Y+1	; 0x01
    9cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    9cc0:	ab 81       	ldd	r26, Y+3	; 0x03
    9cc2:	bc 81       	ldd	r27, Y+4	; 0x04
    9cc4:	89 2b       	or	r24, r25
    9cc6:	8a 2b       	or	r24, r26
    9cc8:	8b 2b       	or	r24, r27
    9cca:	41 f0       	breq	.+16     	; 0x9cdc <put_fat+0x118>
    9ccc:	54 e0       	ldi	r21, 0x04	; 4
    9cce:	76 94       	lsr	r7
    9cd0:	67 94       	ror	r6
    9cd2:	57 94       	ror	r5
    9cd4:	47 94       	ror	r4
    9cd6:	5a 95       	dec	r21
    9cd8:	d1 f7       	brne	.-12     	; 0x9cce <put_fat+0x10a>
    9cda:	06 c0       	rjmp	.+12     	; 0x9ce8 <put_fat+0x124>
    9cdc:	00 81       	ld	r16, Z
    9cde:	00 7f       	andi	r16, 0xF0	; 240
    9ce0:	85 2d       	mov	r24, r5
    9ce2:	8f 70       	andi	r24, 0x0F	; 15
    9ce4:	40 2e       	mov	r4, r16
    9ce6:	48 2a       	or	r4, r24
    9ce8:	40 82       	st	Z, r4
    9cea:	58 c0       	rjmp	.+176    	; 0x9d9c <put_fat+0x1d8>
    9cec:	77 27       	eor	r23, r23
    9cee:	6f 2d       	mov	r22, r15
    9cf0:	5e 2d       	mov	r21, r14
    9cf2:	4d 2d       	mov	r20, r13
    9cf4:	ed 81       	ldd	r30, Y+5	; 0x05
    9cf6:	fe 81       	ldd	r31, Y+6	; 0x06
    9cf8:	85 a1       	ldd	r24, Z+37	; 0x25
    9cfa:	96 a1       	ldd	r25, Z+38	; 0x26
    9cfc:	a7 a1       	ldd	r26, Z+39	; 0x27
    9cfe:	b0 a5       	ldd	r27, Z+40	; 0x28
    9d00:	48 0f       	add	r20, r24
    9d02:	59 1f       	adc	r21, r25
    9d04:	6a 1f       	adc	r22, r26
    9d06:	7b 1f       	adc	r23, r27
    9d08:	cf 01       	movw	r24, r30
    9d0a:	87 dc       	rcall	.-1778   	; 0x961a <move_window>
    9d0c:	5c 01       	movw	r10, r24
    9d0e:	89 2b       	or	r24, r25
    9d10:	09 f0       	breq	.+2      	; 0x9d14 <put_fat+0x150>
    9d12:	4c c0       	rjmp	.+152    	; 0x9dac <put_fat+0x1e8>
    9d14:	ed 81       	ldd	r30, Y+5	; 0x05
    9d16:	fe 81       	ldd	r31, Y+6	; 0x06
    9d18:	f5 96       	adiw	r30, 0x35	; 53
    9d1a:	cc 0c       	add	r12, r12
    9d1c:	dd 1c       	adc	r13, r13
    9d1e:	e8 94       	clt
    9d20:	c0 f8       	bld	r12, 0
    9d22:	21 e0       	ldi	r18, 0x01	; 1
    9d24:	d2 22       	and	r13, r18
    9d26:	ec 0d       	add	r30, r12
    9d28:	fd 1d       	adc	r31, r13
    9d2a:	40 82       	st	Z, r4
    9d2c:	51 82       	std	Z+1, r5	; 0x01
    9d2e:	36 c0       	rjmp	.+108    	; 0x9d9c <put_fat+0x1d8>
    9d30:	ed 81       	ldd	r30, Y+5	; 0x05
    9d32:	fe 81       	ldd	r31, Y+6	; 0x06
    9d34:	85 a1       	ldd	r24, Z+37	; 0x25
    9d36:	96 a1       	ldd	r25, Z+38	; 0x26
    9d38:	a7 a1       	ldd	r26, Z+39	; 0x27
    9d3a:	b0 a5       	ldd	r27, Z+40	; 0x28
    9d3c:	27 e0       	ldi	r18, 0x07	; 7
    9d3e:	76 95       	lsr	r23
    9d40:	67 95       	ror	r22
    9d42:	57 95       	ror	r21
    9d44:	47 95       	ror	r20
    9d46:	2a 95       	dec	r18
    9d48:	d1 f7       	brne	.-12     	; 0x9d3e <put_fat+0x17a>
    9d4a:	48 0f       	add	r20, r24
    9d4c:	59 1f       	adc	r21, r25
    9d4e:	6a 1f       	adc	r22, r26
    9d50:	7b 1f       	adc	r23, r27
    9d52:	cf 01       	movw	r24, r30
    9d54:	62 dc       	rcall	.-1852   	; 0x961a <move_window>
    9d56:	5c 01       	movw	r10, r24
    9d58:	89 2b       	or	r24, r25
    9d5a:	41 f5       	brne	.+80     	; 0x9dac <put_fat+0x1e8>
    9d5c:	4d 81       	ldd	r20, Y+5	; 0x05
    9d5e:	5e 81       	ldd	r21, Y+6	; 0x06
    9d60:	4b 5c       	subi	r20, 0xCB	; 203
    9d62:	5f 4f       	sbci	r21, 0xFF	; 255
    9d64:	cc 0c       	add	r12, r12
    9d66:	dd 1c       	adc	r13, r13
    9d68:	cc 0c       	add	r12, r12
    9d6a:	dd 1c       	adc	r13, r13
    9d6c:	fc ef       	ldi	r31, 0xFC	; 252
    9d6e:	cf 22       	and	r12, r31
    9d70:	f1 e0       	ldi	r31, 0x01	; 1
    9d72:	df 22       	and	r13, r31
    9d74:	c4 0e       	add	r12, r20
    9d76:	d5 1e       	adc	r13, r21
    9d78:	c6 01       	movw	r24, r12
    9d7a:	8d d8       	rcall	.-3814   	; 0x8e96 <ld_dword>
    9d7c:	2f e0       	ldi	r18, 0x0F	; 15
    9d7e:	72 22       	and	r7, r18
    9d80:	dc 01       	movw	r26, r24
    9d82:	cb 01       	movw	r24, r22
    9d84:	88 27       	eor	r24, r24
    9d86:	99 27       	eor	r25, r25
    9d88:	aa 27       	eor	r26, r26
    9d8a:	b0 7f       	andi	r27, 0xF0	; 240
    9d8c:	b3 01       	movw	r22, r6
    9d8e:	a2 01       	movw	r20, r4
    9d90:	48 2b       	or	r20, r24
    9d92:	59 2b       	or	r21, r25
    9d94:	6a 2b       	or	r22, r26
    9d96:	7b 2b       	or	r23, r27
    9d98:	c6 01       	movw	r24, r12
    9d9a:	92 d8       	rcall	.-3804   	; 0x8ec0 <st_dword>
    9d9c:	81 e0       	ldi	r24, 0x01	; 1
    9d9e:	ed 81       	ldd	r30, Y+5	; 0x05
    9da0:	fe 81       	ldd	r31, Y+6	; 0x06
    9da2:	83 83       	std	Z+3, r24	; 0x03
    9da4:	03 c0       	rjmp	.+6      	; 0x9dac <put_fat+0x1e8>
    9da6:	82 e0       	ldi	r24, 0x02	; 2
    9da8:	a8 2e       	mov	r10, r24
    9daa:	b1 2c       	mov	r11, r1
    9dac:	c5 01       	movw	r24, r10
    9dae:	26 96       	adiw	r28, 0x06	; 6
    9db0:	e2 e1       	ldi	r30, 0x12	; 18
    9db2:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

00009db6 <get_fat.isra.9>:
    9db6:	a0 e0       	ldi	r26, 0x00	; 0
    9db8:	b0 e0       	ldi	r27, 0x00	; 0
    9dba:	e1 ee       	ldi	r30, 0xE1	; 225
    9dbc:	fe e4       	ldi	r31, 0x4E	; 78
    9dbe:	0c 94 6e e6 	jmp	0x1ccdc	; 0x1ccdc <__prologue_saves__+0x10>
    9dc2:	42 30       	cpi	r20, 0x02	; 2
    9dc4:	51 05       	cpc	r21, r1
    9dc6:	61 05       	cpc	r22, r1
    9dc8:	71 05       	cpc	r23, r1
    9dca:	08 f4       	brcc	.+2      	; 0x9dce <get_fat.isra.9+0x18>
    9dcc:	9f c0       	rjmp	.+318    	; 0x9f0c <get_fat.isra.9+0x156>
    9dce:	fc 01       	movw	r30, r24
    9dd0:	01 8d       	ldd	r16, Z+25	; 0x19
    9dd2:	12 8d       	ldd	r17, Z+26	; 0x1a
    9dd4:	23 8d       	ldd	r18, Z+27	; 0x1b
    9dd6:	34 8d       	ldd	r19, Z+28	; 0x1c
    9dd8:	40 17       	cp	r20, r16
    9dda:	51 07       	cpc	r21, r17
    9ddc:	62 07       	cpc	r22, r18
    9dde:	73 07       	cpc	r23, r19
    9de0:	08 f0       	brcs	.+2      	; 0x9de4 <get_fat.isra.9+0x2e>
    9de2:	94 c0       	rjmp	.+296    	; 0x9f0c <get_fat.isra.9+0x156>
    9de4:	6a 01       	movw	r12, r20
    9de6:	7b 01       	movw	r14, r22
    9de8:	8c 01       	movw	r16, r24
    9dea:	80 81       	ld	r24, Z
    9dec:	82 30       	cpi	r24, 0x02	; 2
    9dee:	09 f4       	brne	.+2      	; 0x9df2 <get_fat.isra.9+0x3c>
    9df0:	4b c0       	rjmp	.+150    	; 0x9e88 <get_fat.isra.9+0xd2>
    9df2:	83 30       	cpi	r24, 0x03	; 3
    9df4:	09 f4       	brne	.+2      	; 0x9df8 <get_fat.isra.9+0x42>
    9df6:	67 c0       	rjmp	.+206    	; 0x9ec6 <get_fat.isra.9+0x110>
    9df8:	81 30       	cpi	r24, 0x01	; 1
    9dfa:	09 f0       	breq	.+2      	; 0x9dfe <get_fat.isra.9+0x48>
    9dfc:	87 c0       	rjmp	.+270    	; 0x9f0c <get_fat.isra.9+0x156>
    9dfe:	ea 01       	movw	r28, r20
    9e00:	d6 95       	lsr	r29
    9e02:	c7 95       	ror	r28
    9e04:	cc 0d       	add	r28, r12
    9e06:	dd 1d       	adc	r29, r13
    9e08:	ce 01       	movw	r24, r28
    9e0a:	89 2f       	mov	r24, r25
    9e0c:	99 27       	eor	r25, r25
    9e0e:	86 95       	lsr	r24
    9e10:	45 a1       	ldd	r20, Z+37	; 0x25
    9e12:	56 a1       	ldd	r21, Z+38	; 0x26
    9e14:	67 a1       	ldd	r22, Z+39	; 0x27
    9e16:	70 a5       	ldd	r23, Z+40	; 0x28
    9e18:	48 0f       	add	r20, r24
    9e1a:	59 1f       	adc	r21, r25
    9e1c:	61 1d       	adc	r22, r1
    9e1e:	71 1d       	adc	r23, r1
    9e20:	cf 01       	movw	r24, r30
    9e22:	fb db       	rcall	.-2058   	; 0x961a <move_window>
    9e24:	89 2b       	or	r24, r25
    9e26:	21 f0       	breq	.+8      	; 0x9e30 <get_fat.isra.9+0x7a>
    9e28:	6f ef       	ldi	r22, 0xFF	; 255
    9e2a:	7f ef       	ldi	r23, 0xFF	; 255
    9e2c:	cb 01       	movw	r24, r22
    9e2e:	72 c0       	rjmp	.+228    	; 0x9f14 <get_fat.isra.9+0x15e>
    9e30:	5e 01       	movw	r10, r28
    9e32:	ff ef       	ldi	r31, 0xFF	; 255
    9e34:	af 1a       	sub	r10, r31
    9e36:	bf 0a       	sbc	r11, r31
    9e38:	d1 70       	andi	r29, 0x01	; 1
    9e3a:	c0 0f       	add	r28, r16
    9e3c:	d1 1f       	adc	r29, r17
    9e3e:	cd a9       	ldd	r28, Y+53	; 0x35
    9e40:	c5 01       	movw	r24, r10
    9e42:	89 2f       	mov	r24, r25
    9e44:	99 27       	eor	r25, r25
    9e46:	86 95       	lsr	r24
    9e48:	f8 01       	movw	r30, r16
    9e4a:	45 a1       	ldd	r20, Z+37	; 0x25
    9e4c:	56 a1       	ldd	r21, Z+38	; 0x26
    9e4e:	67 a1       	ldd	r22, Z+39	; 0x27
    9e50:	70 a5       	ldd	r23, Z+40	; 0x28
    9e52:	48 0f       	add	r20, r24
    9e54:	59 1f       	adc	r21, r25
    9e56:	61 1d       	adc	r22, r1
    9e58:	71 1d       	adc	r23, r1
    9e5a:	c8 01       	movw	r24, r16
    9e5c:	de db       	rcall	.-2116   	; 0x961a <move_window>
    9e5e:	89 2b       	or	r24, r25
    9e60:	19 f7       	brne	.-58     	; 0x9e28 <get_fat.isra.9+0x72>
    9e62:	f1 e0       	ldi	r31, 0x01	; 1
    9e64:	bf 22       	and	r11, r31
    9e66:	f8 01       	movw	r30, r16
    9e68:	ea 0d       	add	r30, r10
    9e6a:	fb 1d       	adc	r31, r11
    9e6c:	85 a9       	ldd	r24, Z+53	; 0x35
    9e6e:	6c 2f       	mov	r22, r28
    9e70:	70 e0       	ldi	r23, 0x00	; 0
    9e72:	78 2b       	or	r23, r24
    9e74:	c0 fe       	sbrs	r12, 0
    9e76:	06 c0       	rjmp	.+12     	; 0x9e84 <get_fat.isra.9+0xce>
    9e78:	54 e0       	ldi	r21, 0x04	; 4
    9e7a:	76 95       	lsr	r23
    9e7c:	67 95       	ror	r22
    9e7e:	5a 95       	dec	r21
    9e80:	e1 f7       	brne	.-8      	; 0x9e7a <get_fat.isra.9+0xc4>
    9e82:	1e c0       	rjmp	.+60     	; 0x9ec0 <get_fat.isra.9+0x10a>
    9e84:	7f 70       	andi	r23, 0x0F	; 15
    9e86:	1c c0       	rjmp	.+56     	; 0x9ec0 <get_fat.isra.9+0x10a>
    9e88:	77 27       	eor	r23, r23
    9e8a:	6f 2d       	mov	r22, r15
    9e8c:	5e 2d       	mov	r21, r14
    9e8e:	4d 2d       	mov	r20, r13
    9e90:	85 a1       	ldd	r24, Z+37	; 0x25
    9e92:	96 a1       	ldd	r25, Z+38	; 0x26
    9e94:	a7 a1       	ldd	r26, Z+39	; 0x27
    9e96:	b0 a5       	ldd	r27, Z+40	; 0x28
    9e98:	48 0f       	add	r20, r24
    9e9a:	59 1f       	adc	r21, r25
    9e9c:	6a 1f       	adc	r22, r26
    9e9e:	7b 1f       	adc	r23, r27
    9ea0:	cf 01       	movw	r24, r30
    9ea2:	bb db       	rcall	.-2186   	; 0x961a <move_window>
    9ea4:	89 2b       	or	r24, r25
    9ea6:	09 f0       	breq	.+2      	; 0x9eaa <get_fat.isra.9+0xf4>
    9ea8:	bf cf       	rjmp	.-130    	; 0x9e28 <get_fat.isra.9+0x72>
    9eaa:	cc 0c       	add	r12, r12
    9eac:	dd 1c       	adc	r13, r13
    9eae:	e8 94       	clt
    9eb0:	c0 f8       	bld	r12, 0
    9eb2:	f1 e0       	ldi	r31, 0x01	; 1
    9eb4:	df 22       	and	r13, r31
    9eb6:	f8 01       	movw	r30, r16
    9eb8:	ec 0d       	add	r30, r12
    9eba:	fd 1d       	adc	r31, r13
    9ebc:	65 a9       	ldd	r22, Z+53	; 0x35
    9ebe:	76 a9       	ldd	r23, Z+54	; 0x36
    9ec0:	80 e0       	ldi	r24, 0x00	; 0
    9ec2:	90 e0       	ldi	r25, 0x00	; 0
    9ec4:	27 c0       	rjmp	.+78     	; 0x9f14 <get_fat.isra.9+0x15e>
    9ec6:	85 a1       	ldd	r24, Z+37	; 0x25
    9ec8:	96 a1       	ldd	r25, Z+38	; 0x26
    9eca:	a7 a1       	ldd	r26, Z+39	; 0x27
    9ecc:	b0 a5       	ldd	r27, Z+40	; 0x28
    9ece:	27 e0       	ldi	r18, 0x07	; 7
    9ed0:	76 95       	lsr	r23
    9ed2:	67 95       	ror	r22
    9ed4:	57 95       	ror	r21
    9ed6:	47 95       	ror	r20
    9ed8:	2a 95       	dec	r18
    9eda:	d1 f7       	brne	.-12     	; 0x9ed0 <get_fat.isra.9+0x11a>
    9edc:	48 0f       	add	r20, r24
    9ede:	59 1f       	adc	r21, r25
    9ee0:	6a 1f       	adc	r22, r26
    9ee2:	7b 1f       	adc	r23, r27
    9ee4:	cf 01       	movw	r24, r30
    9ee6:	99 db       	rcall	.-2254   	; 0x961a <move_window>
    9ee8:	89 2b       	or	r24, r25
    9eea:	09 f0       	breq	.+2      	; 0x9eee <get_fat.isra.9+0x138>
    9eec:	9d cf       	rjmp	.-198    	; 0x9e28 <get_fat.isra.9+0x72>
    9eee:	0b 5c       	subi	r16, 0xCB	; 203
    9ef0:	1f 4f       	sbci	r17, 0xFF	; 255
    9ef2:	cc 0c       	add	r12, r12
    9ef4:	dd 1c       	adc	r13, r13
    9ef6:	cc 0c       	add	r12, r12
    9ef8:	dd 1c       	adc	r13, r13
    9efa:	c6 01       	movw	r24, r12
    9efc:	8c 7f       	andi	r24, 0xFC	; 252
    9efe:	91 70       	andi	r25, 0x01	; 1
    9f00:	80 0f       	add	r24, r16
    9f02:	91 1f       	adc	r25, r17
    9f04:	0e 94 4b 47 	call	0x8e96	; 0x8e96 <ld_dword>
    9f08:	9f 70       	andi	r25, 0x0F	; 15
    9f0a:	04 c0       	rjmp	.+8      	; 0x9f14 <get_fat.isra.9+0x15e>
    9f0c:	61 e0       	ldi	r22, 0x01	; 1
    9f0e:	70 e0       	ldi	r23, 0x00	; 0
    9f10:	80 e0       	ldi	r24, 0x00	; 0
    9f12:	90 e0       	ldi	r25, 0x00	; 0
    9f14:	cd b7       	in	r28, 0x3d	; 61
    9f16:	de b7       	in	r29, 0x3e	; 62
    9f18:	ea e0       	ldi	r30, 0x0A	; 10
    9f1a:	0c 94 8a e6 	jmp	0x1cd14	; 0x1cd14 <__epilogue_restores__+0x10>

00009f1e <dir_sdi>:
    9f1e:	a0 e0       	ldi	r26, 0x00	; 0
    9f20:	b0 e0       	ldi	r27, 0x00	; 0
    9f22:	e5 e9       	ldi	r30, 0x95	; 149
    9f24:	ff e4       	ldi	r31, 0x4F	; 79
    9f26:	0c 94 68 e6 	jmp	0x1ccd0	; 0x1ccd0 <__prologue_saves__+0x4>
    9f2a:	ec 01       	movw	r28, r24
    9f2c:	6a 01       	movw	r12, r20
    9f2e:	7b 01       	movw	r14, r22
    9f30:	41 15       	cp	r20, r1
    9f32:	51 05       	cpc	r21, r1
    9f34:	80 e2       	ldi	r24, 0x20	; 32
    9f36:	68 07       	cpc	r22, r24
    9f38:	71 05       	cpc	r23, r1
    9f3a:	18 f0       	brcs	.+6      	; 0x9f42 <dir_sdi+0x24>
    9f3c:	82 e0       	ldi	r24, 0x02	; 2
    9f3e:	90 e0       	ldi	r25, 0x00	; 0
    9f40:	aa c0       	rjmp	.+340    	; 0xa096 <dir_sdi+0x178>
    9f42:	db 01       	movw	r26, r22
    9f44:	ca 01       	movw	r24, r20
    9f46:	8f 71       	andi	r24, 0x1F	; 31
    9f48:	99 27       	eor	r25, r25
    9f4a:	aa 27       	eor	r26, r26
    9f4c:	bb 27       	eor	r27, r27
    9f4e:	89 2b       	or	r24, r25
    9f50:	8a 2b       	or	r24, r26
    9f52:	8b 2b       	or	r24, r27
    9f54:	99 f7       	brne	.-26     	; 0x9f3c <dir_sdi+0x1e>
    9f56:	08 81       	ld	r16, Y
    9f58:	19 81       	ldd	r17, Y+1	; 0x01
    9f5a:	4e 87       	std	Y+14, r20	; 0x0e
    9f5c:	5f 87       	std	Y+15, r21	; 0x0f
    9f5e:	68 8b       	std	Y+16, r22	; 0x10
    9f60:	79 8b       	std	Y+17, r23	; 0x11
    9f62:	8e 80       	ldd	r8, Y+6	; 0x06
    9f64:	9f 80       	ldd	r9, Y+7	; 0x07
    9f66:	a8 84       	ldd	r10, Y+8	; 0x08
    9f68:	b9 84       	ldd	r11, Y+9	; 0x09
    9f6a:	81 14       	cp	r8, r1
    9f6c:	91 04       	cpc	r9, r1
    9f6e:	a1 04       	cpc	r10, r1
    9f70:	b1 04       	cpc	r11, r1
    9f72:	51 f5       	brne	.+84     	; 0x9fc8 <dir_sdi+0xaa>
    9f74:	f8 01       	movw	r30, r16
    9f76:	80 81       	ld	r24, Z
    9f78:	83 30       	cpi	r24, 0x03	; 3
    9f7a:	40 f0       	brcs	.+16     	; 0x9f8c <dir_sdi+0x6e>
    9f7c:	81 a5       	ldd	r24, Z+41	; 0x29
    9f7e:	92 a5       	ldd	r25, Z+42	; 0x2a
    9f80:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9f82:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9f84:	00 97       	sbiw	r24, 0x00	; 0
    9f86:	a1 05       	cpc	r26, r1
    9f88:	b1 05       	cpc	r27, r1
    9f8a:	e1 f4       	brne	.+56     	; 0x9fc4 <dir_sdi+0xa6>
    9f8c:	f8 01       	movw	r30, r16
    9f8e:	87 81       	ldd	r24, Z+7	; 0x07
    9f90:	90 85       	ldd	r25, Z+8	; 0x08
    9f92:	a0 e0       	ldi	r26, 0x00	; 0
    9f94:	b0 e0       	ldi	r27, 0x00	; 0
    9f96:	b7 01       	movw	r22, r14
    9f98:	a6 01       	movw	r20, r12
    9f9a:	25 e0       	ldi	r18, 0x05	; 5
    9f9c:	76 95       	lsr	r23
    9f9e:	67 95       	ror	r22
    9fa0:	57 95       	ror	r21
    9fa2:	47 95       	ror	r20
    9fa4:	2a 95       	dec	r18
    9fa6:	d1 f7       	brne	.-12     	; 0x9f9c <dir_sdi+0x7e>
    9fa8:	48 17       	cp	r20, r24
    9faa:	59 07       	cpc	r21, r25
    9fac:	6a 07       	cpc	r22, r26
    9fae:	7b 07       	cpc	r23, r27
    9fb0:	28 f6       	brcc	.-118    	; 0x9f3c <dir_sdi+0x1e>
    9fb2:	81 a5       	ldd	r24, Z+41	; 0x29
    9fb4:	92 a5       	ldd	r25, Z+42	; 0x2a
    9fb6:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9fb8:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9fba:	8e 8b       	std	Y+22, r24	; 0x16
    9fbc:	9f 8b       	std	Y+23, r25	; 0x17
    9fbe:	a8 8f       	std	Y+24, r26	; 0x18
    9fc0:	b9 8f       	std	Y+25, r27	; 0x19
    9fc2:	3e c0       	rjmp	.+124    	; 0xa040 <dir_sdi+0x122>
    9fc4:	4c 01       	movw	r8, r24
    9fc6:	5d 01       	movw	r10, r26
    9fc8:	f8 01       	movw	r30, r16
    9fca:	41 84       	ldd	r4, Z+9	; 0x09
    9fcc:	52 84       	ldd	r5, Z+10	; 0x0a
    9fce:	61 2c       	mov	r6, r1
    9fd0:	71 2c       	mov	r7, r1
    9fd2:	39 e0       	ldi	r19, 0x09	; 9
    9fd4:	44 0c       	add	r4, r4
    9fd6:	55 1c       	adc	r5, r5
    9fd8:	66 1c       	adc	r6, r6
    9fda:	77 1c       	adc	r7, r7
    9fdc:	3a 95       	dec	r19
    9fde:	d1 f7       	brne	.-12     	; 0x9fd4 <dir_sdi+0xb6>
    9fe0:	b5 01       	movw	r22, r10
    9fe2:	a4 01       	movw	r20, r8
    9fe4:	c4 14       	cp	r12, r4
    9fe6:	d5 04       	cpc	r13, r5
    9fe8:	e6 04       	cpc	r14, r6
    9fea:	f7 04       	cpc	r15, r7
    9fec:	10 f1       	brcs	.+68     	; 0xa032 <dir_sdi+0x114>
    9fee:	88 81       	ld	r24, Y
    9ff0:	99 81       	ldd	r25, Y+1	; 0x01
    9ff2:	e1 de       	rcall	.-574    	; 0x9db6 <get_fat.isra.9>
    9ff4:	4b 01       	movw	r8, r22
    9ff6:	5c 01       	movw	r10, r24
    9ff8:	6f 3f       	cpi	r22, 0xFF	; 255
    9ffa:	7f 4f       	sbci	r23, 0xFF	; 255
    9ffc:	8f 4f       	sbci	r24, 0xFF	; 255
    9ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    a000:	09 f4       	brne	.+2      	; 0xa004 <dir_sdi+0xe6>
    a002:	47 c0       	rjmp	.+142    	; 0xa092 <dir_sdi+0x174>
    a004:	82 e0       	ldi	r24, 0x02	; 2
    a006:	88 16       	cp	r8, r24
    a008:	91 04       	cpc	r9, r1
    a00a:	a1 04       	cpc	r10, r1
    a00c:	b1 04       	cpc	r11, r1
    a00e:	08 f4       	brcc	.+2      	; 0xa012 <dir_sdi+0xf4>
    a010:	95 cf       	rjmp	.-214    	; 0x9f3c <dir_sdi+0x1e>
    a012:	f8 01       	movw	r30, r16
    a014:	81 8d       	ldd	r24, Z+25	; 0x19
    a016:	92 8d       	ldd	r25, Z+26	; 0x1a
    a018:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a01a:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a01c:	88 16       	cp	r8, r24
    a01e:	99 06       	cpc	r9, r25
    a020:	aa 06       	cpc	r10, r26
    a022:	bb 06       	cpc	r11, r27
    a024:	08 f0       	brcs	.+2      	; 0xa028 <dir_sdi+0x10a>
    a026:	8a cf       	rjmp	.-236    	; 0x9f3c <dir_sdi+0x1e>
    a028:	c4 18       	sub	r12, r4
    a02a:	d5 08       	sbc	r13, r5
    a02c:	e6 08       	sbc	r14, r6
    a02e:	f7 08       	sbc	r15, r7
    a030:	d7 cf       	rjmp	.-82     	; 0x9fe0 <dir_sdi+0xc2>
    a032:	c8 01       	movw	r24, r16
    a034:	0e 94 7e 47 	call	0x8efc	; 0x8efc <clst2sect>
    a038:	6e 8b       	std	Y+22, r22	; 0x16
    a03a:	7f 8b       	std	Y+23, r23	; 0x17
    a03c:	88 8f       	std	Y+24, r24	; 0x18
    a03e:	99 8f       	std	Y+25, r25	; 0x19
    a040:	8a 8a       	std	Y+18, r8	; 0x12
    a042:	9b 8a       	std	Y+19, r9	; 0x13
    a044:	ac 8a       	std	Y+20, r10	; 0x14
    a046:	bd 8a       	std	Y+21, r11	; 0x15
    a048:	8e 89       	ldd	r24, Y+22	; 0x16
    a04a:	9f 89       	ldd	r25, Y+23	; 0x17
    a04c:	a8 8d       	ldd	r26, Y+24	; 0x18
    a04e:	b9 8d       	ldd	r27, Y+25	; 0x19
    a050:	00 97       	sbiw	r24, 0x00	; 0
    a052:	a1 05       	cpc	r26, r1
    a054:	b1 05       	cpc	r27, r1
    a056:	09 f4       	brne	.+2      	; 0xa05a <dir_sdi+0x13c>
    a058:	71 cf       	rjmp	.-286    	; 0x9f3c <dir_sdi+0x1e>
    a05a:	b7 01       	movw	r22, r14
    a05c:	a6 01       	movw	r20, r12
    a05e:	29 e0       	ldi	r18, 0x09	; 9
    a060:	76 95       	lsr	r23
    a062:	67 95       	ror	r22
    a064:	57 95       	ror	r21
    a066:	47 95       	ror	r20
    a068:	2a 95       	dec	r18
    a06a:	d1 f7       	brne	.-12     	; 0xa060 <dir_sdi+0x142>
    a06c:	84 0f       	add	r24, r20
    a06e:	95 1f       	adc	r25, r21
    a070:	a6 1f       	adc	r26, r22
    a072:	b7 1f       	adc	r27, r23
    a074:	8e 8b       	std	Y+22, r24	; 0x16
    a076:	9f 8b       	std	Y+23, r25	; 0x17
    a078:	a8 8f       	std	Y+24, r26	; 0x18
    a07a:	b9 8f       	std	Y+25, r27	; 0x19
    a07c:	0b 5c       	subi	r16, 0xCB	; 203
    a07e:	1f 4f       	sbci	r17, 0xFF	; 255
    a080:	f1 e0       	ldi	r31, 0x01	; 1
    a082:	df 22       	and	r13, r31
    a084:	c0 0e       	add	r12, r16
    a086:	d1 1e       	adc	r13, r17
    a088:	db 8e       	std	Y+27, r13	; 0x1b
    a08a:	ca 8e       	std	Y+26, r12	; 0x1a
    a08c:	80 e0       	ldi	r24, 0x00	; 0
    a08e:	90 e0       	ldi	r25, 0x00	; 0
    a090:	02 c0       	rjmp	.+4      	; 0xa096 <dir_sdi+0x178>
    a092:	81 e0       	ldi	r24, 0x01	; 1
    a094:	90 e0       	ldi	r25, 0x00	; 0
    a096:	cd b7       	in	r28, 0x3d	; 61
    a098:	de b7       	in	r29, 0x3e	; 62
    a09a:	e0 e1       	ldi	r30, 0x10	; 16
    a09c:	0c 94 84 e6 	jmp	0x1cd08	; 0x1cd08 <__epilogue_restores__+0x4>

0000a0a0 <create_chain>:
    a0a0:	a0 e0       	ldi	r26, 0x00	; 0
    a0a2:	b0 e0       	ldi	r27, 0x00	; 0
    a0a4:	e6 e5       	ldi	r30, 0x56	; 86
    a0a6:	f0 e5       	ldi	r31, 0x50	; 80
    a0a8:	0c 94 68 e6 	jmp	0x1ccd0	; 0x1ccd0 <__prologue_saves__+0x4>
    a0ac:	8c 01       	movw	r16, r24
    a0ae:	2a 01       	movw	r4, r20
    a0b0:	3b 01       	movw	r6, r22
    a0b2:	fc 01       	movw	r30, r24
    a0b4:	c0 81       	ld	r28, Z
    a0b6:	d1 81       	ldd	r29, Z+1	; 0x01
    a0b8:	41 15       	cp	r20, r1
    a0ba:	51 05       	cpc	r21, r1
    a0bc:	61 05       	cpc	r22, r1
    a0be:	71 05       	cpc	r23, r1
    a0c0:	99 f4       	brne	.+38     	; 0xa0e8 <create_chain+0x48>
    a0c2:	8d 84       	ldd	r8, Y+13	; 0x0d
    a0c4:	9e 84       	ldd	r9, Y+14	; 0x0e
    a0c6:	af 84       	ldd	r10, Y+15	; 0x0f
    a0c8:	b8 88       	ldd	r11, Y+16	; 0x10
    a0ca:	81 14       	cp	r8, r1
    a0cc:	91 04       	cpc	r9, r1
    a0ce:	a1 04       	cpc	r10, r1
    a0d0:	b1 04       	cpc	r11, r1
    a0d2:	51 f1       	breq	.+84     	; 0xa128 <create_chain+0x88>
    a0d4:	89 8d       	ldd	r24, Y+25	; 0x19
    a0d6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a0d8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a0da:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a0dc:	88 16       	cp	r8, r24
    a0de:	99 06       	cpc	r9, r25
    a0e0:	aa 06       	cpc	r10, r26
    a0e2:	bb 06       	cpc	r11, r27
    a0e4:	28 f1       	brcs	.+74     	; 0xa130 <create_chain+0x90>
    a0e6:	20 c0       	rjmp	.+64     	; 0xa128 <create_chain+0x88>
    a0e8:	ce 01       	movw	r24, r28
    a0ea:	65 de       	rcall	.-822    	; 0x9db6 <get_fat.isra.9>
    a0ec:	62 30       	cpi	r22, 0x02	; 2
    a0ee:	71 05       	cpc	r23, r1
    a0f0:	81 05       	cpc	r24, r1
    a0f2:	91 05       	cpc	r25, r1
    a0f4:	08 f4       	brcc	.+2      	; 0xa0f8 <create_chain+0x58>
    a0f6:	ea c0       	rjmp	.+468    	; 0xa2cc <create_chain+0x22c>
    a0f8:	6f 3f       	cpi	r22, 0xFF	; 255
    a0fa:	ff ef       	ldi	r31, 0xFF	; 255
    a0fc:	7f 07       	cpc	r23, r31
    a0fe:	8f 07       	cpc	r24, r31
    a100:	9f 07       	cpc	r25, r31
    a102:	29 f4       	brne	.+10     	; 0xa10e <create_chain+0x6e>
    a104:	4f ef       	ldi	r20, 0xFF	; 255
    a106:	3f ef       	ldi	r19, 0xFF	; 255
    a108:	2f ef       	ldi	r18, 0xFF	; 255
    a10a:	9f ef       	ldi	r25, 0xFF	; 255
    a10c:	e7 c0       	rjmp	.+462    	; 0xa2dc <create_chain+0x23c>
    a10e:	c9 8c       	ldd	r12, Y+25	; 0x19
    a110:	da 8c       	ldd	r13, Y+26	; 0x1a
    a112:	eb 8c       	ldd	r14, Y+27	; 0x1b
    a114:	fc 8c       	ldd	r15, Y+28	; 0x1c
    a116:	6c 15       	cp	r22, r12
    a118:	7d 05       	cpc	r23, r13
    a11a:	8e 05       	cpc	r24, r14
    a11c:	9f 05       	cpc	r25, r15
    a11e:	08 f4       	brcc	.+2      	; 0xa122 <create_chain+0x82>
    a120:	da c0       	rjmp	.+436    	; 0xa2d6 <create_chain+0x236>
    a122:	53 01       	movw	r10, r6
    a124:	42 01       	movw	r8, r4
    a126:	04 c0       	rjmp	.+8      	; 0xa130 <create_chain+0x90>
    a128:	81 2c       	mov	r8, r1
    a12a:	91 2c       	mov	r9, r1
    a12c:	54 01       	movw	r10, r8
    a12e:	83 94       	inc	r8
    a130:	89 89       	ldd	r24, Y+17	; 0x11
    a132:	9a 89       	ldd	r25, Y+18	; 0x12
    a134:	ab 89       	ldd	r26, Y+19	; 0x13
    a136:	bc 89       	ldd	r27, Y+20	; 0x14
    a138:	89 2b       	or	r24, r25
    a13a:	8a 2b       	or	r24, r26
    a13c:	8b 2b       	or	r24, r27
    a13e:	11 f4       	brne	.+4      	; 0xa144 <create_chain+0xa4>
    a140:	40 e0       	ldi	r20, 0x00	; 0
    a142:	c5 c0       	rjmp	.+394    	; 0xa2ce <create_chain+0x22e>
    a144:	84 14       	cp	r8, r4
    a146:	95 04       	cpc	r9, r5
    a148:	a6 04       	cpc	r10, r6
    a14a:	b7 04       	cpc	r11, r7
    a14c:	09 f0       	breq	.+2      	; 0xa150 <create_chain+0xb0>
    a14e:	46 c0       	rjmp	.+140    	; 0xa1dc <create_chain+0x13c>
    a150:	75 01       	movw	r14, r10
    a152:	64 01       	movw	r12, r8
    a154:	2f ef       	ldi	r18, 0xFF	; 255
    a156:	c2 1a       	sub	r12, r18
    a158:	d2 0a       	sbc	r13, r18
    a15a:	e2 0a       	sbc	r14, r18
    a15c:	f2 0a       	sbc	r15, r18
    a15e:	89 8d       	ldd	r24, Y+25	; 0x19
    a160:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a162:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a164:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a166:	c8 16       	cp	r12, r24
    a168:	d9 06       	cpc	r13, r25
    a16a:	ea 06       	cpc	r14, r26
    a16c:	fb 06       	cpc	r15, r27
    a16e:	28 f0       	brcs	.+10     	; 0xa17a <create_chain+0xda>
    a170:	92 e0       	ldi	r25, 0x02	; 2
    a172:	c9 2e       	mov	r12, r25
    a174:	d1 2c       	mov	r13, r1
    a176:	e1 2c       	mov	r14, r1
    a178:	f1 2c       	mov	r15, r1
    a17a:	b7 01       	movw	r22, r14
    a17c:	a6 01       	movw	r20, r12
    a17e:	f8 01       	movw	r30, r16
    a180:	80 81       	ld	r24, Z
    a182:	91 81       	ldd	r25, Z+1	; 0x01
    a184:	18 de       	rcall	.-976    	; 0x9db6 <get_fat.isra.9>
    a186:	61 30       	cpi	r22, 0x01	; 1
    a188:	71 05       	cpc	r23, r1
    a18a:	81 05       	cpc	r24, r1
    a18c:	91 05       	cpc	r25, r1
    a18e:	09 f4       	brne	.+2      	; 0xa192 <create_chain+0xf2>
    a190:	9d c0       	rjmp	.+314    	; 0xa2cc <create_chain+0x22c>
    a192:	6f 3f       	cpi	r22, 0xFF	; 255
    a194:	ff ef       	ldi	r31, 0xFF	; 255
    a196:	7f 07       	cpc	r23, r31
    a198:	8f 07       	cpc	r24, r31
    a19a:	9f 07       	cpc	r25, r31
    a19c:	09 f4       	brne	.+2      	; 0xa1a0 <create_chain+0x100>
    a19e:	b2 cf       	rjmp	.-156    	; 0xa104 <create_chain+0x64>
    a1a0:	67 2b       	or	r22, r23
    a1a2:	68 2b       	or	r22, r24
    a1a4:	69 2b       	or	r22, r25
    a1a6:	a9 f0       	breq	.+42     	; 0xa1d2 <create_chain+0x132>
    a1a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    a1aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    a1ac:	af 85       	ldd	r26, Y+15	; 0x0f
    a1ae:	b8 89       	ldd	r27, Y+16	; 0x10
    a1b0:	82 30       	cpi	r24, 0x02	; 2
    a1b2:	91 05       	cpc	r25, r1
    a1b4:	a1 05       	cpc	r26, r1
    a1b6:	b1 05       	cpc	r27, r1
    a1b8:	88 f0       	brcs	.+34     	; 0xa1dc <create_chain+0x13c>
    a1ba:	49 8d       	ldd	r20, Y+25	; 0x19
    a1bc:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a1be:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a1c0:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a1c2:	84 17       	cp	r24, r20
    a1c4:	95 07       	cpc	r25, r21
    a1c6:	a6 07       	cpc	r26, r22
    a1c8:	b7 07       	cpc	r27, r23
    a1ca:	40 f4       	brcc	.+16     	; 0xa1dc <create_chain+0x13c>
    a1cc:	4c 01       	movw	r8, r24
    a1ce:	5d 01       	movw	r10, r26
    a1d0:	05 c0       	rjmp	.+10     	; 0xa1dc <create_chain+0x13c>
    a1d2:	c1 14       	cp	r12, r1
    a1d4:	d1 04       	cpc	r13, r1
    a1d6:	e1 04       	cpc	r14, r1
    a1d8:	f1 04       	cpc	r15, r1
    a1da:	c9 f5       	brne	.+114    	; 0xa24e <create_chain+0x1ae>
    a1dc:	75 01       	movw	r14, r10
    a1de:	64 01       	movw	r12, r8
    a1e0:	2f ef       	ldi	r18, 0xFF	; 255
    a1e2:	c2 1a       	sub	r12, r18
    a1e4:	d2 0a       	sbc	r13, r18
    a1e6:	e2 0a       	sbc	r14, r18
    a1e8:	f2 0a       	sbc	r15, r18
    a1ea:	89 8d       	ldd	r24, Y+25	; 0x19
    a1ec:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a1ee:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a1f0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a1f2:	c8 16       	cp	r12, r24
    a1f4:	d9 06       	cpc	r13, r25
    a1f6:	ea 06       	cpc	r14, r26
    a1f8:	fb 06       	cpc	r15, r27
    a1fa:	60 f0       	brcs	.+24     	; 0xa214 <create_chain+0x174>
    a1fc:	82 e0       	ldi	r24, 0x02	; 2
    a1fe:	88 16       	cp	r8, r24
    a200:	91 04       	cpc	r9, r1
    a202:	a1 04       	cpc	r10, r1
    a204:	b1 04       	cpc	r11, r1
    a206:	08 f4       	brcc	.+2      	; 0xa20a <create_chain+0x16a>
    a208:	9b cf       	rjmp	.-202    	; 0xa140 <create_chain+0xa0>
    a20a:	82 e0       	ldi	r24, 0x02	; 2
    a20c:	c8 2e       	mov	r12, r24
    a20e:	d1 2c       	mov	r13, r1
    a210:	e1 2c       	mov	r14, r1
    a212:	f1 2c       	mov	r15, r1
    a214:	b7 01       	movw	r22, r14
    a216:	a6 01       	movw	r20, r12
    a218:	f8 01       	movw	r30, r16
    a21a:	80 81       	ld	r24, Z
    a21c:	91 81       	ldd	r25, Z+1	; 0x01
    a21e:	cb dd       	rcall	.-1130   	; 0x9db6 <get_fat.isra.9>
    a220:	61 15       	cp	r22, r1
    a222:	71 05       	cpc	r23, r1
    a224:	81 05       	cpc	r24, r1
    a226:	91 05       	cpc	r25, r1
    a228:	91 f0       	breq	.+36     	; 0xa24e <create_chain+0x1ae>
    a22a:	61 30       	cpi	r22, 0x01	; 1
    a22c:	71 05       	cpc	r23, r1
    a22e:	81 05       	cpc	r24, r1
    a230:	91 05       	cpc	r25, r1
    a232:	09 f4       	brne	.+2      	; 0xa236 <create_chain+0x196>
    a234:	4b c0       	rjmp	.+150    	; 0xa2cc <create_chain+0x22c>
    a236:	6f 3f       	cpi	r22, 0xFF	; 255
    a238:	7f 4f       	sbci	r23, 0xFF	; 255
    a23a:	8f 4f       	sbci	r24, 0xFF	; 255
    a23c:	9f 4f       	sbci	r25, 0xFF	; 255
    a23e:	09 f4       	brne	.+2      	; 0xa242 <create_chain+0x1a2>
    a240:	61 cf       	rjmp	.-318    	; 0xa104 <create_chain+0x64>
    a242:	c8 14       	cp	r12, r8
    a244:	d9 04       	cpc	r13, r9
    a246:	ea 04       	cpc	r14, r10
    a248:	fb 04       	cpc	r15, r11
    a24a:	51 f6       	brne	.-108    	; 0xa1e0 <create_chain+0x140>
    a24c:	79 cf       	rjmp	.-270    	; 0xa140 <create_chain+0xa0>
    a24e:	0f ef       	ldi	r16, 0xFF	; 255
    a250:	1f ef       	ldi	r17, 0xFF	; 255
    a252:	98 01       	movw	r18, r16
    a254:	b7 01       	movw	r22, r14
    a256:	a6 01       	movw	r20, r12
    a258:	ce 01       	movw	r24, r28
    a25a:	b4 dc       	rcall	.-1688   	; 0x9bc4 <put_fat>
    a25c:	00 97       	sbiw	r24, 0x00	; 0
    a25e:	99 f5       	brne	.+102    	; 0xa2c6 <create_chain+0x226>
    a260:	41 14       	cp	r4, r1
    a262:	51 04       	cpc	r5, r1
    a264:	61 04       	cpc	r6, r1
    a266:	71 04       	cpc	r7, r1
    a268:	e9 f4       	brne	.+58     	; 0xa2a4 <create_chain+0x204>
    a26a:	cd 86       	std	Y+13, r12	; 0x0d
    a26c:	de 86       	std	Y+14, r13	; 0x0e
    a26e:	ef 86       	std	Y+15, r14	; 0x0f
    a270:	f8 8a       	std	Y+16, r15	; 0x10
    a272:	89 89       	ldd	r24, Y+17	; 0x11
    a274:	9a 89       	ldd	r25, Y+18	; 0x12
    a276:	ab 89       	ldd	r26, Y+19	; 0x13
    a278:	bc 89       	ldd	r27, Y+20	; 0x14
    a27a:	49 8d       	ldd	r20, Y+25	; 0x19
    a27c:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a27e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a280:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a282:	42 50       	subi	r20, 0x02	; 2
    a284:	51 09       	sbc	r21, r1
    a286:	61 09       	sbc	r22, r1
    a288:	71 09       	sbc	r23, r1
    a28a:	48 17       	cp	r20, r24
    a28c:	59 07       	cpc	r21, r25
    a28e:	6a 07       	cpc	r22, r26
    a290:	7b 07       	cpc	r23, r27
    a292:	88 f0       	brcs	.+34     	; 0xa2b6 <create_chain+0x216>
    a294:	01 97       	sbiw	r24, 0x01	; 1
    a296:	a1 09       	sbc	r26, r1
    a298:	b1 09       	sbc	r27, r1
    a29a:	89 8b       	std	Y+17, r24	; 0x11
    a29c:	9a 8b       	std	Y+18, r25	; 0x12
    a29e:	ab 8b       	std	Y+19, r26	; 0x13
    a2a0:	bc 8b       	std	Y+20, r27	; 0x14
    a2a2:	09 c0       	rjmp	.+18     	; 0xa2b6 <create_chain+0x216>
    a2a4:	97 01       	movw	r18, r14
    a2a6:	86 01       	movw	r16, r12
    a2a8:	b3 01       	movw	r22, r6
    a2aa:	a2 01       	movw	r20, r4
    a2ac:	ce 01       	movw	r24, r28
    a2ae:	8a dc       	rcall	.-1772   	; 0x9bc4 <put_fat>
    a2b0:	00 97       	sbiw	r24, 0x00	; 0
    a2b2:	d9 f2       	breq	.-74     	; 0xa26a <create_chain+0x1ca>
    a2b4:	08 c0       	rjmp	.+16     	; 0xa2c6 <create_chain+0x226>
    a2b6:	8c 81       	ldd	r24, Y+4	; 0x04
    a2b8:	81 60       	ori	r24, 0x01	; 1
    a2ba:	8c 83       	std	Y+4, r24	; 0x04
    a2bc:	4c 2d       	mov	r20, r12
    a2be:	3d 2d       	mov	r19, r13
    a2c0:	2e 2d       	mov	r18, r14
    a2c2:	9f 2d       	mov	r25, r15
    a2c4:	0b c0       	rjmp	.+22     	; 0xa2dc <create_chain+0x23c>
    a2c6:	01 97       	sbiw	r24, 0x01	; 1
    a2c8:	09 f4       	brne	.+2      	; 0xa2cc <create_chain+0x22c>
    a2ca:	1c cf       	rjmp	.-456    	; 0xa104 <create_chain+0x64>
    a2cc:	41 e0       	ldi	r20, 0x01	; 1
    a2ce:	30 e0       	ldi	r19, 0x00	; 0
    a2d0:	20 e0       	ldi	r18, 0x00	; 0
    a2d2:	90 e0       	ldi	r25, 0x00	; 0
    a2d4:	03 c0       	rjmp	.+6      	; 0xa2dc <create_chain+0x23c>
    a2d6:	46 2f       	mov	r20, r22
    a2d8:	37 2f       	mov	r19, r23
    a2da:	28 2f       	mov	r18, r24
    a2dc:	64 2f       	mov	r22, r20
    a2de:	73 2f       	mov	r23, r19
    a2e0:	82 2f       	mov	r24, r18
    a2e2:	cd b7       	in	r28, 0x3d	; 61
    a2e4:	de b7       	in	r29, 0x3e	; 62
    a2e6:	e0 e1       	ldi	r30, 0x10	; 16
    a2e8:	0c 94 84 e6 	jmp	0x1cd08	; 0x1cd08 <__epilogue_restores__+0x4>

0000a2ec <remove_chain>:
    a2ec:	4f 92       	push	r4
    a2ee:	5f 92       	push	r5
    a2f0:	6f 92       	push	r6
    a2f2:	7f 92       	push	r7
    a2f4:	af 92       	push	r10
    a2f6:	bf 92       	push	r11
    a2f8:	cf 92       	push	r12
    a2fa:	df 92       	push	r13
    a2fc:	ef 92       	push	r14
    a2fe:	ff 92       	push	r15
    a300:	0f 93       	push	r16
    a302:	1f 93       	push	r17
    a304:	cf 93       	push	r28
    a306:	df 93       	push	r29
    a308:	5c 01       	movw	r10, r24
    a30a:	6a 01       	movw	r12, r20
    a30c:	7b 01       	movw	r14, r22
    a30e:	b9 01       	movw	r22, r18
    a310:	a8 01       	movw	r20, r16
    a312:	22 e0       	ldi	r18, 0x02	; 2
    a314:	c2 16       	cp	r12, r18
    a316:	d1 04       	cpc	r13, r1
    a318:	e1 04       	cpc	r14, r1
    a31a:	f1 04       	cpc	r15, r1
    a31c:	10 f4       	brcc	.+4      	; 0xa322 <remove_chain+0x36>
    a31e:	22 e0       	ldi	r18, 0x02	; 2
    a320:	27 c0       	rjmp	.+78     	; 0xa370 <remove_chain+0x84>
    a322:	fc 01       	movw	r30, r24
    a324:	c0 81       	ld	r28, Z
    a326:	d1 81       	ldd	r29, Z+1	; 0x01
    a328:	89 8d       	ldd	r24, Y+25	; 0x19
    a32a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a32c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a32e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a330:	c8 16       	cp	r12, r24
    a332:	d9 06       	cpc	r13, r25
    a334:	ea 06       	cpc	r14, r26
    a336:	fb 06       	cpc	r15, r27
    a338:	90 f7       	brcc	.-28     	; 0xa31e <remove_chain+0x32>
    a33a:	41 15       	cp	r20, r1
    a33c:	51 05       	cpc	r21, r1
    a33e:	61 05       	cpc	r22, r1
    a340:	71 05       	cpc	r23, r1
    a342:	41 f0       	breq	.+16     	; 0xa354 <remove_chain+0x68>
    a344:	0f ef       	ldi	r16, 0xFF	; 255
    a346:	1f ef       	ldi	r17, 0xFF	; 255
    a348:	98 01       	movw	r18, r16
    a34a:	ce 01       	movw	r24, r28
    a34c:	3b dc       	rcall	.-1930   	; 0x9bc4 <put_fat>
    a34e:	00 97       	sbiw	r24, 0x00	; 0
    a350:	09 f0       	breq	.+2      	; 0xa354 <remove_chain+0x68>
    a352:	4c c0       	rjmp	.+152    	; 0xa3ec <remove_chain+0x100>
    a354:	b7 01       	movw	r22, r14
    a356:	a6 01       	movw	r20, r12
    a358:	f5 01       	movw	r30, r10
    a35a:	80 81       	ld	r24, Z
    a35c:	91 81       	ldd	r25, Z+1	; 0x01
    a35e:	2b dd       	rcall	.-1450   	; 0x9db6 <get_fat.isra.9>
    a360:	2b 01       	movw	r4, r22
    a362:	3c 01       	movw	r6, r24
    a364:	61 15       	cp	r22, r1
    a366:	71 05       	cpc	r23, r1
    a368:	81 05       	cpc	r24, r1
    a36a:	91 05       	cpc	r25, r1
    a36c:	19 f4       	brne	.+6      	; 0xa374 <remove_chain+0x88>
    a36e:	20 e0       	ldi	r18, 0x00	; 0
    a370:	90 e0       	ldi	r25, 0x00	; 0
    a372:	3d c0       	rjmp	.+122    	; 0xa3ee <remove_chain+0x102>
    a374:	61 30       	cpi	r22, 0x01	; 1
    a376:	71 05       	cpc	r23, r1
    a378:	81 05       	cpc	r24, r1
    a37a:	91 05       	cpc	r25, r1
    a37c:	81 f2       	breq	.-96     	; 0xa31e <remove_chain+0x32>
    a37e:	6f 3f       	cpi	r22, 0xFF	; 255
    a380:	7f 4f       	sbci	r23, 0xFF	; 255
    a382:	8f 4f       	sbci	r24, 0xFF	; 255
    a384:	9f 4f       	sbci	r25, 0xFF	; 255
    a386:	81 f1       	breq	.+96     	; 0xa3e8 <remove_chain+0xfc>
    a388:	00 e0       	ldi	r16, 0x00	; 0
    a38a:	10 e0       	ldi	r17, 0x00	; 0
    a38c:	98 01       	movw	r18, r16
    a38e:	b7 01       	movw	r22, r14
    a390:	a6 01       	movw	r20, r12
    a392:	ce 01       	movw	r24, r28
    a394:	17 dc       	rcall	.-2002   	; 0x9bc4 <put_fat>
    a396:	00 97       	sbiw	r24, 0x00	; 0
    a398:	49 f5       	brne	.+82     	; 0xa3ec <remove_chain+0x100>
    a39a:	89 89       	ldd	r24, Y+17	; 0x11
    a39c:	9a 89       	ldd	r25, Y+18	; 0x12
    a39e:	ab 89       	ldd	r26, Y+19	; 0x13
    a3a0:	bc 89       	ldd	r27, Y+20	; 0x14
    a3a2:	49 8d       	ldd	r20, Y+25	; 0x19
    a3a4:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a3a6:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a3a8:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a3aa:	6a 01       	movw	r12, r20
    a3ac:	7b 01       	movw	r14, r22
    a3ae:	e2 e0       	ldi	r30, 0x02	; 2
    a3b0:	ce 1a       	sub	r12, r30
    a3b2:	d1 08       	sbc	r13, r1
    a3b4:	e1 08       	sbc	r14, r1
    a3b6:	f1 08       	sbc	r15, r1
    a3b8:	8c 15       	cp	r24, r12
    a3ba:	9d 05       	cpc	r25, r13
    a3bc:	ae 05       	cpc	r26, r14
    a3be:	bf 05       	cpc	r27, r15
    a3c0:	50 f4       	brcc	.+20     	; 0xa3d6 <remove_chain+0xea>
    a3c2:	01 96       	adiw	r24, 0x01	; 1
    a3c4:	a1 1d       	adc	r26, r1
    a3c6:	b1 1d       	adc	r27, r1
    a3c8:	89 8b       	std	Y+17, r24	; 0x11
    a3ca:	9a 8b       	std	Y+18, r25	; 0x12
    a3cc:	ab 8b       	std	Y+19, r26	; 0x13
    a3ce:	bc 8b       	std	Y+20, r27	; 0x14
    a3d0:	8c 81       	ldd	r24, Y+4	; 0x04
    a3d2:	81 60       	ori	r24, 0x01	; 1
    a3d4:	8c 83       	std	Y+4, r24	; 0x04
    a3d6:	73 01       	movw	r14, r6
    a3d8:	62 01       	movw	r12, r4
    a3da:	44 16       	cp	r4, r20
    a3dc:	55 06       	cpc	r5, r21
    a3de:	66 06       	cpc	r6, r22
    a3e0:	77 06       	cpc	r7, r23
    a3e2:	08 f4       	brcc	.+2      	; 0xa3e6 <remove_chain+0xfa>
    a3e4:	b7 cf       	rjmp	.-146    	; 0xa354 <remove_chain+0x68>
    a3e6:	c3 cf       	rjmp	.-122    	; 0xa36e <remove_chain+0x82>
    a3e8:	21 e0       	ldi	r18, 0x01	; 1
    a3ea:	c2 cf       	rjmp	.-124    	; 0xa370 <remove_chain+0x84>
    a3ec:	28 2f       	mov	r18, r24
    a3ee:	82 2f       	mov	r24, r18
    a3f0:	df 91       	pop	r29
    a3f2:	cf 91       	pop	r28
    a3f4:	1f 91       	pop	r17
    a3f6:	0f 91       	pop	r16
    a3f8:	ff 90       	pop	r15
    a3fa:	ef 90       	pop	r14
    a3fc:	df 90       	pop	r13
    a3fe:	cf 90       	pop	r12
    a400:	bf 90       	pop	r11
    a402:	af 90       	pop	r10
    a404:	7f 90       	pop	r7
    a406:	6f 90       	pop	r6
    a408:	5f 90       	pop	r5
    a40a:	4f 90       	pop	r4
    a40c:	08 95       	ret

0000a40e <dir_next>:
    a40e:	4f 92       	push	r4
    a410:	5f 92       	push	r5
    a412:	6f 92       	push	r6
    a414:	7f 92       	push	r7
    a416:	af 92       	push	r10
    a418:	bf 92       	push	r11
    a41a:	cf 92       	push	r12
    a41c:	df 92       	push	r13
    a41e:	ef 92       	push	r14
    a420:	ff 92       	push	r15
    a422:	0f 93       	push	r16
    a424:	1f 93       	push	r17
    a426:	cf 93       	push	r28
    a428:	df 93       	push	r29
    a42a:	ec 01       	movw	r28, r24
    a42c:	08 81       	ld	r16, Y
    a42e:	19 81       	ldd	r17, Y+1	; 0x01
    a430:	ce 84       	ldd	r12, Y+14	; 0x0e
    a432:	df 84       	ldd	r13, Y+15	; 0x0f
    a434:	e8 88       	ldd	r14, Y+16	; 0x10
    a436:	f9 88       	ldd	r15, Y+17	; 0x11
    a438:	80 e2       	ldi	r24, 0x20	; 32
    a43a:	c8 0e       	add	r12, r24
    a43c:	d1 1c       	adc	r13, r1
    a43e:	e1 1c       	adc	r14, r1
    a440:	f1 1c       	adc	r15, r1
    a442:	c1 14       	cp	r12, r1
    a444:	d1 04       	cpc	r13, r1
    a446:	e0 e2       	ldi	r30, 0x20	; 32
    a448:	ee 06       	cpc	r14, r30
    a44a:	f1 04       	cpc	r15, r1
    a44c:	20 f0       	brcs	.+8      	; 0xa456 <dir_next+0x48>
    a44e:	1e 8a       	std	Y+22, r1	; 0x16
    a450:	1f 8a       	std	Y+23, r1	; 0x17
    a452:	18 8e       	std	Y+24, r1	; 0x18
    a454:	19 8e       	std	Y+25, r1	; 0x19
    a456:	8e 89       	ldd	r24, Y+22	; 0x16
    a458:	9f 89       	ldd	r25, Y+23	; 0x17
    a45a:	a8 8d       	ldd	r26, Y+24	; 0x18
    a45c:	b9 8d       	ldd	r27, Y+25	; 0x19
    a45e:	00 97       	sbiw	r24, 0x00	; 0
    a460:	a1 05       	cpc	r26, r1
    a462:	b1 05       	cpc	r27, r1
    a464:	09 f4       	brne	.+2      	; 0xa468 <dir_next+0x5a>
    a466:	a7 c0       	rjmp	.+334    	; 0xa5b6 <dir_next+0x1a8>
    a468:	5b 01       	movw	r10, r22
    a46a:	b7 01       	movw	r22, r14
    a46c:	a6 01       	movw	r20, r12
    a46e:	51 70       	andi	r21, 0x01	; 1
    a470:	66 27       	eor	r22, r22
    a472:	77 27       	eor	r23, r23
    a474:	45 2b       	or	r20, r21
    a476:	46 2b       	or	r20, r22
    a478:	47 2b       	or	r20, r23
    a47a:	09 f0       	breq	.+2      	; 0xa47e <dir_next+0x70>
    a47c:	8d c0       	rjmp	.+282    	; 0xa598 <dir_next+0x18a>
    a47e:	01 96       	adiw	r24, 0x01	; 1
    a480:	a1 1d       	adc	r26, r1
    a482:	b1 1d       	adc	r27, r1
    a484:	8e 8b       	std	Y+22, r24	; 0x16
    a486:	9f 8b       	std	Y+23, r25	; 0x17
    a488:	a8 8f       	std	Y+24, r26	; 0x18
    a48a:	b9 8f       	std	Y+25, r27	; 0x19
    a48c:	4a 89       	ldd	r20, Y+18	; 0x12
    a48e:	5b 89       	ldd	r21, Y+19	; 0x13
    a490:	6c 89       	ldd	r22, Y+20	; 0x14
    a492:	7d 89       	ldd	r23, Y+21	; 0x15
    a494:	f8 01       	movw	r30, r16
    a496:	41 15       	cp	r20, r1
    a498:	51 05       	cpc	r21, r1
    a49a:	61 05       	cpc	r22, r1
    a49c:	71 05       	cpc	r23, r1
    a49e:	c1 f4       	brne	.+48     	; 0xa4d0 <dir_next+0xc2>
    a4a0:	87 81       	ldd	r24, Z+7	; 0x07
    a4a2:	90 85       	ldd	r25, Z+8	; 0x08
    a4a4:	a0 e0       	ldi	r26, 0x00	; 0
    a4a6:	b0 e0       	ldi	r27, 0x00	; 0
    a4a8:	b7 01       	movw	r22, r14
    a4aa:	a6 01       	movw	r20, r12
    a4ac:	35 e0       	ldi	r19, 0x05	; 5
    a4ae:	76 95       	lsr	r23
    a4b0:	67 95       	ror	r22
    a4b2:	57 95       	ror	r21
    a4b4:	47 95       	ror	r20
    a4b6:	3a 95       	dec	r19
    a4b8:	d1 f7       	brne	.-12     	; 0xa4ae <dir_next+0xa0>
    a4ba:	48 17       	cp	r20, r24
    a4bc:	59 07       	cpc	r21, r25
    a4be:	6a 07       	cpc	r22, r26
    a4c0:	7b 07       	cpc	r23, r27
    a4c2:	08 f4       	brcc	.+2      	; 0xa4c6 <dir_next+0xb8>
    a4c4:	69 c0       	rjmp	.+210    	; 0xa598 <dir_next+0x18a>
    a4c6:	1e 8a       	std	Y+22, r1	; 0x16
    a4c8:	1f 8a       	std	Y+23, r1	; 0x17
    a4ca:	18 8e       	std	Y+24, r1	; 0x18
    a4cc:	19 8e       	std	Y+25, r1	; 0x19
    a4ce:	73 c0       	rjmp	.+230    	; 0xa5b6 <dir_next+0x1a8>
    a4d0:	81 85       	ldd	r24, Z+9	; 0x09
    a4d2:	92 85       	ldd	r25, Z+10	; 0x0a
    a4d4:	01 97       	sbiw	r24, 0x01	; 1
    a4d6:	a0 e0       	ldi	r26, 0x00	; 0
    a4d8:	b0 e0       	ldi	r27, 0x00	; 0
    a4da:	26 01       	movw	r4, r12
    a4dc:	37 01       	movw	r6, r14
    a4de:	29 e0       	ldi	r18, 0x09	; 9
    a4e0:	76 94       	lsr	r7
    a4e2:	67 94       	ror	r6
    a4e4:	57 94       	ror	r5
    a4e6:	47 94       	ror	r4
    a4e8:	2a 95       	dec	r18
    a4ea:	d1 f7       	brne	.-12     	; 0xa4e0 <dir_next+0xd2>
    a4ec:	84 21       	and	r24, r4
    a4ee:	95 21       	and	r25, r5
    a4f0:	a6 21       	and	r26, r6
    a4f2:	b7 21       	and	r27, r7
    a4f4:	89 2b       	or	r24, r25
    a4f6:	8a 2b       	or	r24, r26
    a4f8:	8b 2b       	or	r24, r27
    a4fa:	09 f0       	breq	.+2      	; 0xa4fe <dir_next+0xf0>
    a4fc:	4d c0       	rjmp	.+154    	; 0xa598 <dir_next+0x18a>
    a4fe:	c8 01       	movw	r24, r16
    a500:	5a dc       	rcall	.-1868   	; 0x9db6 <get_fat.isra.9>
    a502:	2b 01       	movw	r4, r22
    a504:	3c 01       	movw	r6, r24
    a506:	62 30       	cpi	r22, 0x02	; 2
    a508:	71 05       	cpc	r23, r1
    a50a:	81 05       	cpc	r24, r1
    a50c:	91 05       	cpc	r25, r1
    a50e:	18 f4       	brcc	.+6      	; 0xa516 <dir_next+0x108>
    a510:	82 e0       	ldi	r24, 0x02	; 2
    a512:	90 e0       	ldi	r25, 0x00	; 0
    a514:	55 c0       	rjmp	.+170    	; 0xa5c0 <dir_next+0x1b2>
    a516:	8f ef       	ldi	r24, 0xFF	; 255
    a518:	48 16       	cp	r4, r24
    a51a:	58 06       	cpc	r5, r24
    a51c:	68 06       	cpc	r6, r24
    a51e:	78 06       	cpc	r7, r24
    a520:	19 f4       	brne	.+6      	; 0xa528 <dir_next+0x11a>
    a522:	81 e0       	ldi	r24, 0x01	; 1
    a524:	90 e0       	ldi	r25, 0x00	; 0
    a526:	4c c0       	rjmp	.+152    	; 0xa5c0 <dir_next+0x1b2>
    a528:	f8 01       	movw	r30, r16
    a52a:	81 8d       	ldd	r24, Z+25	; 0x19
    a52c:	92 8d       	ldd	r25, Z+26	; 0x1a
    a52e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a530:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a532:	48 16       	cp	r4, r24
    a534:	59 06       	cpc	r5, r25
    a536:	6a 06       	cpc	r6, r26
    a538:	7b 06       	cpc	r7, r27
    a53a:	08 f1       	brcs	.+66     	; 0xa57e <dir_next+0x170>
    a53c:	ab 28       	or	r10, r11
    a53e:	19 f2       	breq	.-122    	; 0xa4c6 <dir_next+0xb8>
    a540:	4a 89       	ldd	r20, Y+18	; 0x12
    a542:	5b 89       	ldd	r21, Y+19	; 0x13
    a544:	6c 89       	ldd	r22, Y+20	; 0x14
    a546:	7d 89       	ldd	r23, Y+21	; 0x15
    a548:	ce 01       	movw	r24, r28
    a54a:	aa dd       	rcall	.-1196   	; 0xa0a0 <create_chain>
    a54c:	2b 01       	movw	r4, r22
    a54e:	3c 01       	movw	r6, r24
    a550:	61 15       	cp	r22, r1
    a552:	71 05       	cpc	r23, r1
    a554:	81 05       	cpc	r24, r1
    a556:	91 05       	cpc	r25, r1
    a558:	89 f1       	breq	.+98     	; 0xa5bc <dir_next+0x1ae>
    a55a:	61 30       	cpi	r22, 0x01	; 1
    a55c:	71 05       	cpc	r23, r1
    a55e:	81 05       	cpc	r24, r1
    a560:	91 05       	cpc	r25, r1
    a562:	b1 f2       	breq	.-84     	; 0xa510 <dir_next+0x102>
    a564:	8f ef       	ldi	r24, 0xFF	; 255
    a566:	48 16       	cp	r4, r24
    a568:	58 06       	cpc	r5, r24
    a56a:	68 06       	cpc	r6, r24
    a56c:	78 06       	cpc	r7, r24
    a56e:	c9 f2       	breq	.-78     	; 0xa522 <dir_next+0x114>
    a570:	b3 01       	movw	r22, r6
    a572:	a2 01       	movw	r20, r4
    a574:	c8 01       	movw	r24, r16
    a576:	0e 94 65 4a 	call	0x94ca	; 0x94ca <dir_clear>
    a57a:	89 2b       	or	r24, r25
    a57c:	91 f6       	brne	.-92     	; 0xa522 <dir_next+0x114>
    a57e:	4a 8a       	std	Y+18, r4	; 0x12
    a580:	5b 8a       	std	Y+19, r5	; 0x13
    a582:	6c 8a       	std	Y+20, r6	; 0x14
    a584:	7d 8a       	std	Y+21, r7	; 0x15
    a586:	b3 01       	movw	r22, r6
    a588:	a2 01       	movw	r20, r4
    a58a:	c8 01       	movw	r24, r16
    a58c:	0e 94 7e 47 	call	0x8efc	; 0x8efc <clst2sect>
    a590:	6e 8b       	std	Y+22, r22	; 0x16
    a592:	7f 8b       	std	Y+23, r23	; 0x17
    a594:	88 8f       	std	Y+24, r24	; 0x18
    a596:	99 8f       	std	Y+25, r25	; 0x19
    a598:	ce 86       	std	Y+14, r12	; 0x0e
    a59a:	df 86       	std	Y+15, r13	; 0x0f
    a59c:	e8 8a       	std	Y+16, r14	; 0x10
    a59e:	f9 8a       	std	Y+17, r15	; 0x11
    a5a0:	0b 5c       	subi	r16, 0xCB	; 203
    a5a2:	1f 4f       	sbci	r17, 0xFF	; 255
    a5a4:	e1 e0       	ldi	r30, 0x01	; 1
    a5a6:	de 22       	and	r13, r30
    a5a8:	c0 0e       	add	r12, r16
    a5aa:	d1 1e       	adc	r13, r17
    a5ac:	db 8e       	std	Y+27, r13	; 0x1b
    a5ae:	ca 8e       	std	Y+26, r12	; 0x1a
    a5b0:	80 e0       	ldi	r24, 0x00	; 0
    a5b2:	90 e0       	ldi	r25, 0x00	; 0
    a5b4:	05 c0       	rjmp	.+10     	; 0xa5c0 <dir_next+0x1b2>
    a5b6:	84 e0       	ldi	r24, 0x04	; 4
    a5b8:	90 e0       	ldi	r25, 0x00	; 0
    a5ba:	02 c0       	rjmp	.+4      	; 0xa5c0 <dir_next+0x1b2>
    a5bc:	87 e0       	ldi	r24, 0x07	; 7
    a5be:	90 e0       	ldi	r25, 0x00	; 0
    a5c0:	df 91       	pop	r29
    a5c2:	cf 91       	pop	r28
    a5c4:	1f 91       	pop	r17
    a5c6:	0f 91       	pop	r16
    a5c8:	ff 90       	pop	r15
    a5ca:	ef 90       	pop	r14
    a5cc:	df 90       	pop	r13
    a5ce:	cf 90       	pop	r12
    a5d0:	bf 90       	pop	r11
    a5d2:	af 90       	pop	r10
    a5d4:	7f 90       	pop	r7
    a5d6:	6f 90       	pop	r6
    a5d8:	5f 90       	pop	r5
    a5da:	4f 90       	pop	r4
    a5dc:	08 95       	ret

0000a5de <dir_alloc>:
    a5de:	a0 e0       	ldi	r26, 0x00	; 0
    a5e0:	b0 e0       	ldi	r27, 0x00	; 0
    a5e2:	e5 ef       	ldi	r30, 0xF5	; 245
    a5e4:	f2 e5       	ldi	r31, 0x52	; 82
    a5e6:	0c 94 70 e6 	jmp	0x1cce0	; 0x1cce0 <__prologue_saves__+0x14>
    a5ea:	ec 01       	movw	r28, r24
    a5ec:	6b 01       	movw	r12, r22
    a5ee:	e8 80       	ld	r14, Y
    a5f0:	f9 80       	ldd	r15, Y+1	; 0x01
    a5f2:	40 e0       	ldi	r20, 0x00	; 0
    a5f4:	50 e0       	ldi	r21, 0x00	; 0
    a5f6:	ba 01       	movw	r22, r20
    a5f8:	92 dc       	rcall	.-1756   	; 0x9f1e <dir_sdi>
    a5fa:	00 97       	sbiw	r24, 0x00	; 0
    a5fc:	f9 f4       	brne	.+62     	; 0xa63c <dir_alloc+0x5e>
    a5fe:	00 e0       	ldi	r16, 0x00	; 0
    a600:	10 e0       	ldi	r17, 0x00	; 0
    a602:	4e 89       	ldd	r20, Y+22	; 0x16
    a604:	5f 89       	ldd	r21, Y+23	; 0x17
    a606:	68 8d       	ldd	r22, Y+24	; 0x18
    a608:	79 8d       	ldd	r23, Y+25	; 0x19
    a60a:	c7 01       	movw	r24, r14
    a60c:	06 d8       	rcall	.-4084   	; 0x961a <move_window>
    a60e:	00 97       	sbiw	r24, 0x00	; 0
    a610:	a9 f4       	brne	.+42     	; 0xa63c <dir_alloc+0x5e>
    a612:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a614:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a616:	20 81       	ld	r18, Z
    a618:	25 3e       	cpi	r18, 0xE5	; 229
    a61a:	11 f0       	breq	.+4      	; 0xa620 <dir_alloc+0x42>
    a61c:	21 11       	cpse	r18, r1
    a61e:	06 c0       	rjmp	.+12     	; 0xa62c <dir_alloc+0x4e>
    a620:	0f 5f       	subi	r16, 0xFF	; 255
    a622:	1f 4f       	sbci	r17, 0xFF	; 255
    a624:	0c 15       	cp	r16, r12
    a626:	1d 05       	cpc	r17, r13
    a628:	19 f4       	brne	.+6      	; 0xa630 <dir_alloc+0x52>
    a62a:	0d c0       	rjmp	.+26     	; 0xa646 <dir_alloc+0x68>
    a62c:	00 e0       	ldi	r16, 0x00	; 0
    a62e:	10 e0       	ldi	r17, 0x00	; 0
    a630:	61 e0       	ldi	r22, 0x01	; 1
    a632:	70 e0       	ldi	r23, 0x00	; 0
    a634:	ce 01       	movw	r24, r28
    a636:	eb de       	rcall	.-554    	; 0xa40e <dir_next>
    a638:	00 97       	sbiw	r24, 0x00	; 0
    a63a:	19 f3       	breq	.-58     	; 0xa602 <dir_alloc+0x24>
    a63c:	84 30       	cpi	r24, 0x04	; 4
    a63e:	91 05       	cpc	r25, r1
    a640:	11 f4       	brne	.+4      	; 0xa646 <dir_alloc+0x68>
    a642:	87 e0       	ldi	r24, 0x07	; 7
    a644:	90 e0       	ldi	r25, 0x00	; 0
    a646:	cd b7       	in	r28, 0x3d	; 61
    a648:	de b7       	in	r29, 0x3e	; 62
    a64a:	e8 e0       	ldi	r30, 0x08	; 8
    a64c:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__epilogue_restores__+0x14>

0000a650 <dir_read>:
    a650:	a0 e0       	ldi	r26, 0x00	; 0
    a652:	b0 e0       	ldi	r27, 0x00	; 0
    a654:	ee e2       	ldi	r30, 0x2E	; 46
    a656:	f3 e5       	ldi	r31, 0x53	; 83
    a658:	0c 94 6c e6 	jmp	0x1ccd8	; 0x1ccd8 <__prologue_saves__+0xc>
    a65c:	ec 01       	movw	r28, r24
    a65e:	7b 01       	movw	r14, r22
    a660:	a8 80       	ld	r10, Y
    a662:	b9 80       	ldd	r11, Y+1	; 0x01
    a664:	dd 24       	eor	r13, r13
    a666:	da 94       	dec	r13
    a668:	1f ef       	ldi	r17, 0xFF	; 255
    a66a:	84 e0       	ldi	r24, 0x04	; 4
    a66c:	90 e0       	ldi	r25, 0x00	; 0
    a66e:	fd e0       	ldi	r31, 0x0D	; 13
    a670:	cf 2e       	mov	r12, r31
    a672:	4e 89       	ldd	r20, Y+22	; 0x16
    a674:	5f 89       	ldd	r21, Y+23	; 0x17
    a676:	68 8d       	ldd	r22, Y+24	; 0x18
    a678:	79 8d       	ldd	r23, Y+25	; 0x19
    a67a:	41 15       	cp	r20, r1
    a67c:	51 05       	cpc	r21, r1
    a67e:	61 05       	cpc	r22, r1
    a680:	71 05       	cpc	r23, r1
    a682:	09 f4       	brne	.+2      	; 0xa686 <dir_read+0x36>
    a684:	9a c0       	rjmp	.+308    	; 0xa7ba <dir_read+0x16a>
    a686:	c5 01       	movw	r24, r10
    a688:	0e 94 0d 4b 	call	0x961a	; 0x961a <move_window>
    a68c:	00 97       	sbiw	r24, 0x00	; 0
    a68e:	09 f0       	breq	.+2      	; 0xa692 <dir_read+0x42>
    a690:	96 c0       	rjmp	.+300    	; 0xa7be <dir_read+0x16e>
    a692:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a694:	9b 8c       	ldd	r9, Y+27	; 0x1b
    a696:	f4 01       	movw	r30, r8
    a698:	00 81       	ld	r16, Z
    a69a:	00 23       	and	r16, r16
    a69c:	09 f4       	brne	.+2      	; 0xa6a0 <dir_read+0x50>
    a69e:	97 c0       	rjmp	.+302    	; 0xa7ce <dir_read+0x17e>
    a6a0:	83 85       	ldd	r24, Z+11	; 0x0b
    a6a2:	8f 73       	andi	r24, 0x3F	; 63
    a6a4:	8c 83       	std	Y+4, r24	; 0x04
    a6a6:	05 3e       	cpi	r16, 0xE5	; 229
    a6a8:	09 f4       	brne	.+2      	; 0xa6ac <dir_read+0x5c>
    a6aa:	7e c0       	rjmp	.+252    	; 0xa7a8 <dir_read+0x158>
    a6ac:	0e 32       	cpi	r16, 0x2E	; 46
    a6ae:	09 f4       	brne	.+2      	; 0xa6b2 <dir_read+0x62>
    a6b0:	7b c0       	rjmp	.+246    	; 0xa7a8 <dir_read+0x158>
    a6b2:	21 e0       	ldi	r18, 0x01	; 1
    a6b4:	30 e0       	ldi	r19, 0x00	; 0
    a6b6:	98 2f       	mov	r25, r24
    a6b8:	9f 71       	andi	r25, 0x1F	; 31
    a6ba:	98 30       	cpi	r25, 0x08	; 8
    a6bc:	11 f0       	breq	.+4      	; 0xa6c2 <dir_read+0x72>
    a6be:	20 e0       	ldi	r18, 0x00	; 0
    a6c0:	30 e0       	ldi	r19, 0x00	; 0
    a6c2:	2e 15       	cp	r18, r14
    a6c4:	3f 05       	cpc	r19, r15
    a6c6:	09 f0       	breq	.+2      	; 0xa6ca <dir_read+0x7a>
    a6c8:	6f c0       	rjmp	.+222    	; 0xa7a8 <dir_read+0x158>
    a6ca:	8f 30       	cpi	r24, 0x0F	; 15
    a6cc:	09 f0       	breq	.+2      	; 0xa6d0 <dir_read+0x80>
    a6ce:	5c c0       	rjmp	.+184    	; 0xa788 <dir_read+0x138>
    a6d0:	06 ff       	sbrs	r16, 6
    a6d2:	0c c0       	rjmp	.+24     	; 0xa6ec <dir_read+0x9c>
    a6d4:	f4 01       	movw	r30, r8
    a6d6:	85 85       	ldd	r24, Z+13	; 0x0d
    a6d8:	0f 7b       	andi	r16, 0xBF	; 191
    a6da:	4e 85       	ldd	r20, Y+14	; 0x0e
    a6dc:	5f 85       	ldd	r21, Y+15	; 0x0f
    a6de:	68 89       	ldd	r22, Y+16	; 0x10
    a6e0:	79 89       	ldd	r23, Y+17	; 0x11
    a6e2:	48 a7       	std	Y+40, r20	; 0x28
    a6e4:	59 a7       	std	Y+41, r21	; 0x29
    a6e6:	6a a7       	std	Y+42, r22	; 0x2a
    a6e8:	7b a7       	std	Y+43, r23	; 0x2b
    a6ea:	03 c0       	rjmp	.+6      	; 0xa6f2 <dir_read+0xa2>
    a6ec:	10 13       	cpse	r17, r16
    a6ee:	5c c0       	rjmp	.+184    	; 0xa7a8 <dir_read+0x158>
    a6f0:	8d 2d       	mov	r24, r13
    a6f2:	f4 01       	movw	r30, r8
    a6f4:	d5 84       	ldd	r13, Z+13	; 0x0d
    a6f6:	d8 12       	cpse	r13, r24
    a6f8:	56 c0       	rjmp	.+172    	; 0xa7a6 <dir_read+0x156>
    a6fa:	82 8d       	ldd	r24, Z+26	; 0x1a
    a6fc:	93 8d       	ldd	r25, Z+27	; 0x1b
    a6fe:	89 2b       	or	r24, r25
    a700:	09 f0       	breq	.+2      	; 0xa704 <dir_read+0xb4>
    a702:	52 c0       	rjmp	.+164    	; 0xa7a8 <dir_read+0x158>
    a704:	f5 01       	movw	r30, r10
    a706:	63 85       	ldd	r22, Z+11	; 0x0b
    a708:	74 85       	ldd	r23, Z+12	; 0x0c
    a70a:	f4 01       	movw	r30, r8
    a70c:	80 81       	ld	r24, Z
    a70e:	90 e0       	ldi	r25, 0x00	; 0
    a710:	8f 7b       	andi	r24, 0xBF	; 191
    a712:	01 97       	sbiw	r24, 0x01	; 1
    a714:	c8 9e       	mul	r12, r24
    a716:	90 01       	movw	r18, r0
    a718:	c9 9e       	mul	r12, r25
    a71a:	30 0d       	add	r19, r0
    a71c:	11 24       	eor	r1, r1
    a71e:	ab ee       	ldi	r26, 0xEB	; 235
    a720:	b4 e0       	ldi	r27, 0x04	; 4
    a722:	81 e0       	ldi	r24, 0x01	; 1
    a724:	90 e0       	ldi	r25, 0x00	; 0
    a726:	4d 91       	ld	r20, X+
    a728:	f4 01       	movw	r30, r8
    a72a:	e4 0f       	add	r30, r20
    a72c:	f1 1d       	adc	r31, r1
    a72e:	40 81       	ld	r20, Z
    a730:	51 81       	ldd	r21, Z+1	; 0x01
    a732:	00 97       	sbiw	r24, 0x00	; 0
    a734:	81 f0       	breq	.+32     	; 0xa756 <dir_read+0x106>
    a736:	2f 3f       	cpi	r18, 0xFF	; 255
    a738:	31 05       	cpc	r19, r1
    a73a:	09 f0       	breq	.+2      	; 0xa73e <dir_read+0xee>
    a73c:	a8 f5       	brcc	.+106    	; 0xa7a8 <dir_read+0x158>
    a73e:	c9 01       	movw	r24, r18
    a740:	88 0f       	add	r24, r24
    a742:	99 1f       	adc	r25, r25
    a744:	86 0f       	add	r24, r22
    a746:	97 1f       	adc	r25, r23
    a748:	fc 01       	movw	r30, r24
    a74a:	51 83       	std	Z+1, r21	; 0x01
    a74c:	40 83       	st	Z, r20
    a74e:	ca 01       	movw	r24, r20
    a750:	2f 5f       	subi	r18, 0xFF	; 255
    a752:	3f 4f       	sbci	r19, 0xFF	; 255
    a754:	03 c0       	rjmp	.+6      	; 0xa75c <dir_read+0x10c>
    a756:	4f 3f       	cpi	r20, 0xFF	; 255
    a758:	5f 4f       	sbci	r21, 0xFF	; 255
    a75a:	31 f5       	brne	.+76     	; 0xa7a8 <dir_read+0x158>
    a75c:	44 e0       	ldi	r20, 0x04	; 4
    a75e:	a8 3f       	cpi	r26, 0xF8	; 248
    a760:	b4 07       	cpc	r27, r20
    a762:	09 f7       	brne	.-62     	; 0xa726 <dir_read+0xd6>
    a764:	f4 01       	movw	r30, r8
    a766:	40 81       	ld	r20, Z
    a768:	46 ff       	sbrs	r20, 6
    a76a:	2e c0       	rjmp	.+92     	; 0xa7c8 <dir_read+0x178>
    a76c:	89 2b       	or	r24, r25
    a76e:	61 f1       	breq	.+88     	; 0xa7c8 <dir_read+0x178>
    a770:	2f 3f       	cpi	r18, 0xFF	; 255
    a772:	31 05       	cpc	r19, r1
    a774:	09 f0       	breq	.+2      	; 0xa778 <dir_read+0x128>
    a776:	c0 f4       	brcc	.+48     	; 0xa7a8 <dir_read+0x158>
    a778:	22 0f       	add	r18, r18
    a77a:	33 1f       	adc	r19, r19
    a77c:	fb 01       	movw	r30, r22
    a77e:	e2 0f       	add	r30, r18
    a780:	f3 1f       	adc	r31, r19
    a782:	11 82       	std	Z+1, r1	; 0x01
    a784:	10 82       	st	Z, r1
    a786:	20 c0       	rjmp	.+64     	; 0xa7c8 <dir_read+0x178>
    a788:	11 11       	cpse	r17, r1
    a78a:	05 c0       	rjmp	.+10     	; 0xa796 <dir_read+0x146>
    a78c:	c4 01       	movw	r24, r8
    a78e:	0e 94 e2 47 	call	0x8fc4	; 0x8fc4 <sum_sfn>
    a792:	d8 16       	cp	r13, r24
    a794:	f9 f0       	breq	.+62     	; 0xa7d4 <dir_read+0x184>
    a796:	8f ef       	ldi	r24, 0xFF	; 255
    a798:	9f ef       	ldi	r25, 0xFF	; 255
    a79a:	dc 01       	movw	r26, r24
    a79c:	88 a7       	std	Y+40, r24	; 0x28
    a79e:	99 a7       	std	Y+41, r25	; 0x29
    a7a0:	aa a7       	std	Y+42, r26	; 0x2a
    a7a2:	bb a7       	std	Y+43, r27	; 0x2b
    a7a4:	17 c0       	rjmp	.+46     	; 0xa7d4 <dir_read+0x184>
    a7a6:	d8 2e       	mov	r13, r24
    a7a8:	1f ef       	ldi	r17, 0xFF	; 255
    a7aa:	60 e0       	ldi	r22, 0x00	; 0
    a7ac:	70 e0       	ldi	r23, 0x00	; 0
    a7ae:	ce 01       	movw	r24, r28
    a7b0:	2e de       	rcall	.-932    	; 0xa40e <dir_next>
    a7b2:	00 97       	sbiw	r24, 0x00	; 0
    a7b4:	09 f4       	brne	.+2      	; 0xa7b8 <dir_read+0x168>
    a7b6:	5d cf       	rjmp	.-326    	; 0xa672 <dir_read+0x22>
    a7b8:	02 c0       	rjmp	.+4      	; 0xa7be <dir_read+0x16e>
    a7ba:	00 97       	sbiw	r24, 0x00	; 0
    a7bc:	59 f0       	breq	.+22     	; 0xa7d4 <dir_read+0x184>
    a7be:	1e 8a       	std	Y+22, r1	; 0x16
    a7c0:	1f 8a       	std	Y+23, r1	; 0x17
    a7c2:	18 8e       	std	Y+24, r1	; 0x18
    a7c4:	19 8e       	std	Y+25, r1	; 0x19
    a7c6:	08 c0       	rjmp	.+16     	; 0xa7d8 <dir_read+0x188>
    a7c8:	1f ef       	ldi	r17, 0xFF	; 255
    a7ca:	10 0f       	add	r17, r16
    a7cc:	ee cf       	rjmp	.-36     	; 0xa7aa <dir_read+0x15a>
    a7ce:	84 e0       	ldi	r24, 0x04	; 4
    a7d0:	90 e0       	ldi	r25, 0x00	; 0
    a7d2:	f5 cf       	rjmp	.-22     	; 0xa7be <dir_read+0x16e>
    a7d4:	80 e0       	ldi	r24, 0x00	; 0
    a7d6:	90 e0       	ldi	r25, 0x00	; 0
    a7d8:	cd b7       	in	r28, 0x3d	; 61
    a7da:	de b7       	in	r29, 0x3e	; 62
    a7dc:	ec e0       	ldi	r30, 0x0C	; 12
    a7de:	0c 94 88 e6 	jmp	0x1cd10	; 0x1cd10 <__epilogue_restores__+0xc>

0000a7e2 <dir_remove>:
    a7e2:	a0 e0       	ldi	r26, 0x00	; 0
    a7e4:	b0 e0       	ldi	r27, 0x00	; 0
    a7e6:	e7 ef       	ldi	r30, 0xF7	; 247
    a7e8:	f3 e5       	ldi	r31, 0x53	; 83
    a7ea:	0c 94 6e e6 	jmp	0x1ccdc	; 0x1ccdc <__prologue_saves__+0x10>
    a7ee:	ec 01       	movw	r28, r24
    a7f0:	08 81       	ld	r16, Y
    a7f2:	19 81       	ldd	r17, Y+1	; 0x01
    a7f4:	ce 84       	ldd	r12, Y+14	; 0x0e
    a7f6:	df 84       	ldd	r13, Y+15	; 0x0f
    a7f8:	e8 88       	ldd	r14, Y+16	; 0x10
    a7fa:	f9 88       	ldd	r15, Y+17	; 0x11
    a7fc:	48 a5       	ldd	r20, Y+40	; 0x28
    a7fe:	59 a5       	ldd	r21, Y+41	; 0x29
    a800:	6a a5       	ldd	r22, Y+42	; 0x2a
    a802:	7b a5       	ldd	r23, Y+43	; 0x2b
    a804:	4f 3f       	cpi	r20, 0xFF	; 255
    a806:	8f ef       	ldi	r24, 0xFF	; 255
    a808:	58 07       	cpc	r21, r24
    a80a:	68 07       	cpc	r22, r24
    a80c:	78 07       	cpc	r23, r24
    a80e:	29 f4       	brne	.+10     	; 0xa81a <dir_remove+0x38>
    a810:	85 ee       	ldi	r24, 0xE5	; 229
    a812:	b8 2e       	mov	r11, r24
    a814:	aa 24       	eor	r10, r10
    a816:	a3 94       	inc	r10
    a818:	19 c0       	rjmp	.+50     	; 0xa84c <dir_remove+0x6a>
    a81a:	ce 01       	movw	r24, r28
    a81c:	80 db       	rcall	.-2304   	; 0x9f1e <dir_sdi>
    a81e:	00 97       	sbiw	r24, 0x00	; 0
    a820:	19 f5       	brne	.+70     	; 0xa868 <dir_remove+0x86>
    a822:	f6 cf       	rjmp	.-20     	; 0xa810 <dir_remove+0x2e>
    a824:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a826:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a828:	b0 82       	st	Z, r11
    a82a:	f8 01       	movw	r30, r16
    a82c:	a3 82       	std	Z+3, r10	; 0x03
    a82e:	4e 85       	ldd	r20, Y+14	; 0x0e
    a830:	5f 85       	ldd	r21, Y+15	; 0x0f
    a832:	68 89       	ldd	r22, Y+16	; 0x10
    a834:	79 89       	ldd	r23, Y+17	; 0x11
    a836:	4c 15       	cp	r20, r12
    a838:	5d 05       	cpc	r21, r13
    a83a:	6e 05       	cpc	r22, r14
    a83c:	7f 05       	cpc	r23, r15
    a83e:	a0 f4       	brcc	.+40     	; 0xa868 <dir_remove+0x86>
    a840:	60 e0       	ldi	r22, 0x00	; 0
    a842:	70 e0       	ldi	r23, 0x00	; 0
    a844:	ce 01       	movw	r24, r28
    a846:	e3 dd       	rcall	.-1082   	; 0xa40e <dir_next>
    a848:	00 97       	sbiw	r24, 0x00	; 0
    a84a:	49 f4       	brne	.+18     	; 0xa85e <dir_remove+0x7c>
    a84c:	4e 89       	ldd	r20, Y+22	; 0x16
    a84e:	5f 89       	ldd	r21, Y+23	; 0x17
    a850:	68 8d       	ldd	r22, Y+24	; 0x18
    a852:	79 8d       	ldd	r23, Y+25	; 0x19
    a854:	c8 01       	movw	r24, r16
    a856:	0e 94 0d 4b 	call	0x961a	; 0x961a <move_window>
    a85a:	00 97       	sbiw	r24, 0x00	; 0
    a85c:	19 f3       	breq	.-58     	; 0xa824 <dir_remove+0x42>
    a85e:	84 30       	cpi	r24, 0x04	; 4
    a860:	91 05       	cpc	r25, r1
    a862:	11 f4       	brne	.+4      	; 0xa868 <dir_remove+0x86>
    a864:	82 e0       	ldi	r24, 0x02	; 2
    a866:	90 e0       	ldi	r25, 0x00	; 0
    a868:	cd b7       	in	r28, 0x3d	; 61
    a86a:	de b7       	in	r29, 0x3e	; 62
    a86c:	ea e0       	ldi	r30, 0x0A	; 10
    a86e:	0c 94 8a e6 	jmp	0x1cd14	; 0x1cd14 <__epilogue_restores__+0x10>

0000a872 <dir_find>:
    a872:	ac e0       	ldi	r26, 0x0C	; 12
    a874:	b0 e0       	ldi	r27, 0x00	; 0
    a876:	ef e3       	ldi	r30, 0x3F	; 63
    a878:	f4 e5       	ldi	r31, 0x54	; 84
    a87a:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
    a87e:	9c 87       	std	Y+12, r25	; 0x0c
    a880:	8b 87       	std	Y+11, r24	; 0x0b
    a882:	fc 01       	movw	r30, r24
    a884:	01 90       	ld	r0, Z+
    a886:	f0 81       	ld	r31, Z
    a888:	e0 2d       	mov	r30, r0
    a88a:	fc 83       	std	Y+4, r31	; 0x04
    a88c:	eb 83       	std	Y+3, r30	; 0x03
    a88e:	40 e0       	ldi	r20, 0x00	; 0
    a890:	50 e0       	ldi	r21, 0x00	; 0
    a892:	ba 01       	movw	r22, r20
    a894:	44 db       	rcall	.-2424   	; 0x9f1e <dir_sdi>
    a896:	00 97       	sbiw	r24, 0x00	; 0
    a898:	09 f0       	breq	.+2      	; 0xa89c <dir_find+0x2a>
    a89a:	e7 c0       	rjmp	.+462    	; 0xaa6a <dir_find+0x1f8>
    a89c:	8f ef       	ldi	r24, 0xFF	; 255
    a89e:	9f ef       	ldi	r25, 0xFF	; 255
    a8a0:	dc 01       	movw	r26, r24
    a8a2:	eb 85       	ldd	r30, Y+11	; 0x0b
    a8a4:	fc 85       	ldd	r31, Y+12	; 0x0c
    a8a6:	80 a7       	std	Z+40, r24	; 0x28
    a8a8:	91 a7       	std	Z+41, r25	; 0x29
    a8aa:	a2 a7       	std	Z+42, r26	; 0x2a
    a8ac:	b3 a7       	std	Z+43, r27	; 0x2b
    a8ae:	0f ef       	ldi	r16, 0xFF	; 255
    a8b0:	1f ef       	ldi	r17, 0xFF	; 255
    a8b2:	44 24       	eor	r4, r4
    a8b4:	4a 94       	dec	r4
    a8b6:	54 2c       	mov	r5, r4
    a8b8:	32 01       	movw	r6, r4
    a8ba:	7c 96       	adiw	r30, 0x1c	; 28
    a8bc:	fa 87       	std	Y+10, r31	; 0x0a
    a8be:	e9 87       	std	Y+9, r30	; 0x09
    a8c0:	eb 85       	ldd	r30, Y+11	; 0x0b
    a8c2:	fc 85       	ldd	r31, Y+12	; 0x0c
    a8c4:	46 89       	ldd	r20, Z+22	; 0x16
    a8c6:	57 89       	ldd	r21, Z+23	; 0x17
    a8c8:	60 8d       	ldd	r22, Z+24	; 0x18
    a8ca:	71 8d       	ldd	r23, Z+25	; 0x19
    a8cc:	8b 81       	ldd	r24, Y+3	; 0x03
    a8ce:	9c 81       	ldd	r25, Y+4	; 0x04
    a8d0:	0e 94 0d 4b 	call	0x961a	; 0x961a <move_window>
    a8d4:	00 97       	sbiw	r24, 0x00	; 0
    a8d6:	09 f0       	breq	.+2      	; 0xa8da <dir_find+0x68>
    a8d8:	c8 c0       	rjmp	.+400    	; 0xaa6a <dir_find+0x1f8>
    a8da:	eb 85       	ldd	r30, Y+11	; 0x0b
    a8dc:	fc 85       	ldd	r31, Y+12	; 0x0c
    a8de:	e2 8c       	ldd	r14, Z+26	; 0x1a
    a8e0:	f3 8c       	ldd	r15, Z+27	; 0x1b
    a8e2:	f7 01       	movw	r30, r14
    a8e4:	d0 80       	ld	r13, Z
    a8e6:	dd 20       	and	r13, r13
    a8e8:	09 f4       	brne	.+2      	; 0xa8ec <dir_find+0x7a>
    a8ea:	c1 c0       	rjmp	.+386    	; 0xaa6e <dir_find+0x1fc>
    a8ec:	93 85       	ldd	r25, Z+11	; 0x0b
    a8ee:	89 2f       	mov	r24, r25
    a8f0:	8f 73       	andi	r24, 0x3F	; 63
    a8f2:	eb 85       	ldd	r30, Y+11	; 0x0b
    a8f4:	fc 85       	ldd	r31, Y+12	; 0x0c
    a8f6:	84 83       	std	Z+4, r24	; 0x04
    a8f8:	f5 ee       	ldi	r31, 0xE5	; 229
    a8fa:	df 16       	cp	r13, r31
    a8fc:	09 f4       	brne	.+2      	; 0xa900 <dir_find+0x8e>
    a8fe:	a6 c0       	rjmp	.+332    	; 0xaa4c <dir_find+0x1da>
    a900:	93 ff       	sbrs	r25, 3
    a902:	04 c0       	rjmp	.+8      	; 0xa90c <dir_find+0x9a>
    a904:	8f 30       	cpi	r24, 0x0F	; 15
    a906:	09 f0       	breq	.+2      	; 0xa90a <dir_find+0x98>
    a908:	a1 c0       	rjmp	.+322    	; 0xaa4c <dir_find+0x1da>
    a90a:	03 c0       	rjmp	.+6      	; 0xa912 <dir_find+0xa0>
    a90c:	8f 30       	cpi	r24, 0x0F	; 15
    a90e:	09 f0       	breq	.+2      	; 0xa912 <dir_find+0xa0>
    a910:	88 c0       	rjmp	.+272    	; 0xaa22 <dir_find+0x1b0>
    a912:	eb 85       	ldd	r30, Y+11	; 0x0b
    a914:	fc 85       	ldd	r31, Y+12	; 0x0c
    a916:	87 a1       	ldd	r24, Z+39	; 0x27
    a918:	86 fd       	sbrc	r24, 6
    a91a:	9f c0       	rjmp	.+318    	; 0xaa5a <dir_find+0x1e8>
    a91c:	d6 fe       	sbrs	r13, 6
    a91e:	10 c0       	rjmp	.+32     	; 0xa940 <dir_find+0xce>
    a920:	f7 01       	movw	r30, r14
    a922:	05 85       	ldd	r16, Z+13	; 0x0d
    a924:	fd 2d       	mov	r31, r13
    a926:	ff 7b       	andi	r31, 0xBF	; 191
    a928:	df 2e       	mov	r13, r31
    a92a:	eb 85       	ldd	r30, Y+11	; 0x0b
    a92c:	fc 85       	ldd	r31, Y+12	; 0x0c
    a92e:	86 85       	ldd	r24, Z+14	; 0x0e
    a930:	97 85       	ldd	r25, Z+15	; 0x0f
    a932:	a0 89       	ldd	r26, Z+16	; 0x10
    a934:	b1 89       	ldd	r27, Z+17	; 0x11
    a936:	80 a7       	std	Z+40, r24	; 0x28
    a938:	91 a7       	std	Z+41, r25	; 0x29
    a93a:	a2 a7       	std	Z+42, r26	; 0x2a
    a93c:	b3 a7       	std	Z+43, r27	; 0x2b
    a93e:	02 c0       	rjmp	.+4      	; 0xa944 <dir_find+0xd2>
    a940:	1d 11       	cpse	r17, r13
    a942:	8a c0       	rjmp	.+276    	; 0xaa58 <dir_find+0x1e6>
    a944:	f7 01       	movw	r30, r14
    a946:	c5 84       	ldd	r12, Z+13	; 0x0d
    a948:	c0 12       	cpse	r12, r16
    a94a:	86 c0       	rjmp	.+268    	; 0xaa58 <dir_find+0x1e6>
    a94c:	82 8d       	ldd	r24, Z+26	; 0x1a
    a94e:	93 8d       	ldd	r25, Z+27	; 0x1b
    a950:	89 2b       	or	r24, r25
    a952:	09 f0       	breq	.+2      	; 0xa956 <dir_find+0xe4>
    a954:	91 c0       	rjmp	.+290    	; 0xaa78 <dir_find+0x206>
    a956:	eb 81       	ldd	r30, Y+3	; 0x03
    a958:	fc 81       	ldd	r31, Y+4	; 0x04
    a95a:	03 84       	ldd	r0, Z+11	; 0x0b
    a95c:	f4 85       	ldd	r31, Z+12	; 0x0c
    a95e:	e0 2d       	mov	r30, r0
    a960:	fe 83       	std	Y+6, r31	; 0x06
    a962:	ed 83       	std	Y+5, r30	; 0x05
    a964:	f7 01       	movw	r30, r14
    a966:	80 81       	ld	r24, Z
    a968:	8f 73       	andi	r24, 0x3F	; 63
    a96a:	90 e0       	ldi	r25, 0x00	; 0
    a96c:	01 97       	sbiw	r24, 0x01	; 1
    a96e:	fd e0       	ldi	r31, 0x0D	; 13
    a970:	f8 9f       	mul	r31, r24
    a972:	80 01       	movw	r16, r0
    a974:	f9 9f       	mul	r31, r25
    a976:	10 0d       	add	r17, r0
    a978:	11 24       	eor	r1, r1
    a97a:	2b ee       	ldi	r18, 0xEB	; 235
    a97c:	34 e0       	ldi	r19, 0x04	; 4
    a97e:	3a 83       	std	Y+2, r19	; 0x02
    a980:	29 83       	std	Y+1, r18	; 0x01
    a982:	81 e0       	ldi	r24, 0x01	; 1
    a984:	90 e0       	ldi	r25, 0x00	; 0
    a986:	e9 81       	ldd	r30, Y+1	; 0x01
    a988:	fa 81       	ldd	r31, Y+2	; 0x02
    a98a:	21 91       	ld	r18, Z+
    a98c:	fa 83       	std	Y+2, r31	; 0x02
    a98e:	e9 83       	std	Y+1, r30	; 0x01
    a990:	f7 01       	movw	r30, r14
    a992:	e2 0f       	add	r30, r18
    a994:	f1 1d       	adc	r31, r1
    a996:	20 80       	ld	r2, Z
    a998:	31 80       	ldd	r3, Z+1	; 0x01
    a99a:	00 97       	sbiw	r24, 0x00	; 0
    a99c:	39 f1       	breq	.+78     	; 0xa9ec <dir_find+0x17a>
    a99e:	0f 3f       	cpi	r16, 0xFF	; 255
    a9a0:	11 05       	cpc	r17, r1
    a9a2:	11 f0       	breq	.+4      	; 0xa9a8 <dir_find+0x136>
    a9a4:	08 f0       	brcs	.+2      	; 0xa9a8 <dir_find+0x136>
    a9a6:	68 c0       	rjmp	.+208    	; 0xaa78 <dir_find+0x206>
    a9a8:	b1 01       	movw	r22, r2
    a9aa:	80 e0       	ldi	r24, 0x00	; 0
    a9ac:	90 e0       	ldi	r25, 0x00	; 0
    a9ae:	0e 94 d1 68 	call	0xd1a2	; 0xd1a2 <ff_wtoupper>
    a9b2:	4b 01       	movw	r8, r22
    a9b4:	5c 01       	movw	r10, r24
    a9b6:	98 01       	movw	r18, r16
    a9b8:	2f 5f       	subi	r18, 0xFF	; 255
    a9ba:	3f 4f       	sbci	r19, 0xFF	; 255
    a9bc:	38 87       	std	Y+8, r19	; 0x08
    a9be:	2f 83       	std	Y+7, r18	; 0x07
    a9c0:	00 0f       	add	r16, r16
    a9c2:	11 1f       	adc	r17, r17
    a9c4:	ed 81       	ldd	r30, Y+5	; 0x05
    a9c6:	fe 81       	ldd	r31, Y+6	; 0x06
    a9c8:	e0 0f       	add	r30, r16
    a9ca:	f1 1f       	adc	r31, r17
    a9cc:	60 81       	ld	r22, Z
    a9ce:	71 81       	ldd	r23, Z+1	; 0x01
    a9d0:	80 e0       	ldi	r24, 0x00	; 0
    a9d2:	90 e0       	ldi	r25, 0x00	; 0
    a9d4:	0e 94 d1 68 	call	0xd1a2	; 0xd1a2 <ff_wtoupper>
    a9d8:	86 16       	cp	r8, r22
    a9da:	97 06       	cpc	r9, r23
    a9dc:	a8 06       	cpc	r10, r24
    a9de:	b9 06       	cpc	r11, r25
    a9e0:	09 f0       	breq	.+2      	; 0xa9e4 <dir_find+0x172>
    a9e2:	4a c0       	rjmp	.+148    	; 0xaa78 <dir_find+0x206>
    a9e4:	c1 01       	movw	r24, r2
    a9e6:	0f 81       	ldd	r16, Y+7	; 0x07
    a9e8:	18 85       	ldd	r17, Y+8	; 0x08
    a9ea:	05 c0       	rjmp	.+10     	; 0xa9f6 <dir_find+0x184>
    a9ec:	3f ef       	ldi	r19, 0xFF	; 255
    a9ee:	23 16       	cp	r2, r19
    a9f0:	33 06       	cpc	r3, r19
    a9f2:	09 f0       	breq	.+2      	; 0xa9f6 <dir_find+0x184>
    a9f4:	41 c0       	rjmp	.+130    	; 0xaa78 <dir_find+0x206>
    a9f6:	e9 81       	ldd	r30, Y+1	; 0x01
    a9f8:	fa 81       	ldd	r31, Y+2	; 0x02
    a9fa:	e8 5f       	subi	r30, 0xF8	; 248
    a9fc:	f4 40       	sbci	r31, 0x04	; 4
    a9fe:	19 f6       	brne	.-122    	; 0xa986 <dir_find+0x114>
    aa00:	f7 01       	movw	r30, r14
    aa02:	20 81       	ld	r18, Z
    aa04:	26 ff       	sbrs	r18, 6
    aa06:	3a c0       	rjmp	.+116    	; 0xaa7c <dir_find+0x20a>
    aa08:	89 2b       	or	r24, r25
    aa0a:	c1 f1       	breq	.+112    	; 0xaa7c <dir_find+0x20a>
    aa0c:	00 0f       	add	r16, r16
    aa0e:	11 1f       	adc	r17, r17
    aa10:	ed 81       	ldd	r30, Y+5	; 0x05
    aa12:	fe 81       	ldd	r31, Y+6	; 0x06
    aa14:	e0 0f       	add	r30, r16
    aa16:	f1 1f       	adc	r31, r17
    aa18:	80 81       	ld	r24, Z
    aa1a:	91 81       	ldd	r25, Z+1	; 0x01
    aa1c:	89 2b       	or	r24, r25
    aa1e:	71 f1       	breq	.+92     	; 0xaa7c <dir_find+0x20a>
    aa20:	2b c0       	rjmp	.+86     	; 0xaa78 <dir_find+0x206>
    aa22:	11 11       	cpse	r17, r1
    aa24:	05 c0       	rjmp	.+10     	; 0xaa30 <dir_find+0x1be>
    aa26:	c7 01       	movw	r24, r14
    aa28:	0e 94 e2 47 	call	0x8fc4	; 0x8fc4 <sum_sfn>
    aa2c:	08 17       	cp	r16, r24
    aa2e:	09 f1       	breq	.+66     	; 0xaa72 <dir_find+0x200>
    aa30:	eb 85       	ldd	r30, Y+11	; 0x0b
    aa32:	fc 85       	ldd	r31, Y+12	; 0x0c
    aa34:	87 a1       	ldd	r24, Z+39	; 0x27
    aa36:	80 fd       	sbrc	r24, 0
    aa38:	09 c0       	rjmp	.+18     	; 0xaa4c <dir_find+0x1da>
    aa3a:	4b e0       	ldi	r20, 0x0B	; 11
    aa3c:	50 e0       	ldi	r21, 0x00	; 0
    aa3e:	69 85       	ldd	r22, Y+9	; 0x09
    aa40:	7a 85       	ldd	r23, Y+10	; 0x0a
    aa42:	c7 01       	movw	r24, r14
    aa44:	0e 94 6f 47 	call	0x8ede	; 0x8ede <mem_cmp>
    aa48:	89 2b       	or	r24, r25
    aa4a:	99 f0       	breq	.+38     	; 0xaa72 <dir_find+0x200>
    aa4c:	eb 85       	ldd	r30, Y+11	; 0x0b
    aa4e:	fc 85       	ldd	r31, Y+12	; 0x0c
    aa50:	40 a6       	std	Z+40, r4	; 0x28
    aa52:	51 a6       	std	Z+41, r5	; 0x29
    aa54:	62 a6       	std	Z+42, r6	; 0x2a
    aa56:	73 a6       	std	Z+43, r7	; 0x2b
    aa58:	1f ef       	ldi	r17, 0xFF	; 255
    aa5a:	60 e0       	ldi	r22, 0x00	; 0
    aa5c:	70 e0       	ldi	r23, 0x00	; 0
    aa5e:	8b 85       	ldd	r24, Y+11	; 0x0b
    aa60:	9c 85       	ldd	r25, Y+12	; 0x0c
    aa62:	d5 dc       	rcall	.-1622   	; 0xa40e <dir_next>
    aa64:	00 97       	sbiw	r24, 0x00	; 0
    aa66:	09 f4       	brne	.+2      	; 0xaa6a <dir_find+0x1f8>
    aa68:	2b cf       	rjmp	.-426    	; 0xa8c0 <dir_find+0x4e>
    aa6a:	28 2f       	mov	r18, r24
    aa6c:	0b c0       	rjmp	.+22     	; 0xaa84 <dir_find+0x212>
    aa6e:	24 e0       	ldi	r18, 0x04	; 4
    aa70:	01 c0       	rjmp	.+2      	; 0xaa74 <dir_find+0x202>
    aa72:	20 e0       	ldi	r18, 0x00	; 0
    aa74:	90 e0       	ldi	r25, 0x00	; 0
    aa76:	06 c0       	rjmp	.+12     	; 0xaa84 <dir_find+0x212>
    aa78:	0c 2d       	mov	r16, r12
    aa7a:	ee cf       	rjmp	.-36     	; 0xaa58 <dir_find+0x1e6>
    aa7c:	1f ef       	ldi	r17, 0xFF	; 255
    aa7e:	1d 0d       	add	r17, r13
    aa80:	0c 2d       	mov	r16, r12
    aa82:	eb cf       	rjmp	.-42     	; 0xaa5a <dir_find+0x1e8>
    aa84:	82 2f       	mov	r24, r18
    aa86:	2c 96       	adiw	r28, 0x0c	; 12
    aa88:	e2 e1       	ldi	r30, 0x12	; 18
    aa8a:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

0000aa8e <dir_register>:
    aa8e:	a6 e1       	ldi	r26, 0x16	; 22
    aa90:	b0 e0       	ldi	r27, 0x00	; 0
    aa92:	ed e4       	ldi	r30, 0x4D	; 77
    aa94:	f5 e5       	ldi	r31, 0x55	; 85
    aa96:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
    aa9a:	fc 01       	movw	r30, r24
    aa9c:	27 a1       	ldd	r18, Z+39	; 0x27
    aa9e:	20 7a       	andi	r18, 0xA0	; 160
    aaa0:	09 f0       	breq	.+2      	; 0xaaa4 <dir_register+0x16>
    aaa2:	53 c1       	rjmp	.+678    	; 0xad4a <dir_register+0x2bc>
    aaa4:	c0 80       	ld	r12, Z
    aaa6:	d1 80       	ldd	r13, Z+1	; 0x01
    aaa8:	f6 01       	movw	r30, r12
    aaaa:	a3 85       	ldd	r26, Z+11	; 0x0b
    aaac:	b4 85       	ldd	r27, Z+12	; 0x0c
    aaae:	81 2c       	mov	r8, r1
    aab0:	91 2c       	mov	r9, r1
    aab2:	2d 91       	ld	r18, X+
    aab4:	3d 91       	ld	r19, X+
    aab6:	23 2b       	or	r18, r19
    aab8:	21 f0       	breq	.+8      	; 0xaac2 <dir_register+0x34>
    aaba:	ff ef       	ldi	r31, 0xFF	; 255
    aabc:	8f 1a       	sub	r8, r31
    aabe:	9f 0a       	sbc	r9, r31
    aac0:	f8 cf       	rjmp	.-16     	; 0xaab2 <dir_register+0x24>
    aac2:	8c 01       	movw	r16, r24
    aac4:	5c 01       	movw	r10, r24
    aac6:	2c e1       	ldi	r18, 0x1C	; 28
    aac8:	a2 0e       	add	r10, r18
    aaca:	b1 1c       	adc	r11, r1
    aacc:	4c e0       	ldi	r20, 0x0C	; 12
    aace:	50 e0       	ldi	r21, 0x00	; 0
    aad0:	b5 01       	movw	r22, r10
    aad2:	ce 01       	movw	r24, r28
    aad4:	01 96       	adiw	r24, 0x01	; 1
    aad6:	0e 94 73 49 	call	0x92e6	; 0x92e6 <mem_cpy.part.0>
    aada:	8c 85       	ldd	r24, Y+12	; 0x0c
    aadc:	80 ff       	sbrs	r24, 0
    aade:	94 c0       	rjmp	.+296    	; 0xac08 <dir_register+0x17a>
    aae0:	80 e4       	ldi	r24, 0x40	; 64
    aae2:	f8 01       	movw	r30, r16
    aae4:	87 a3       	std	Z+39, r24	; 0x27
    aae6:	41 2c       	mov	r4, r1
    aae8:	51 2c       	mov	r5, r1
    aaea:	32 01       	movw	r6, r4
    aaec:	43 94       	inc	r4
    aaee:	72 01       	movw	r14, r4
    aaf0:	f6 01       	movw	r30, r12
    aaf2:	23 84       	ldd	r2, Z+11	; 0x0b
    aaf4:	34 84       	ldd	r3, Z+12	; 0x0c
    aaf6:	4b e0       	ldi	r20, 0x0B	; 11
    aaf8:	50 e0       	ldi	r21, 0x00	; 0
    aafa:	be 01       	movw	r22, r28
    aafc:	6f 5f       	subi	r22, 0xFF	; 255
    aafe:	7f 4f       	sbci	r23, 0xFF	; 255
    ab00:	c5 01       	movw	r24, r10
    ab02:	0e 94 73 49 	call	0x92e6	; 0x92e6 <mem_cpy.part.0>
    ab06:	f6 e0       	ldi	r31, 0x06	; 6
    ab08:	4f 16       	cp	r4, r31
    ab0a:	51 04       	cpc	r5, r1
    ab0c:	18 f1       	brcs	.+70     	; 0xab54 <dir_register+0xc6>
    ab0e:	f1 01       	movw	r30, r2
    ab10:	b3 01       	movw	r22, r6
    ab12:	a2 01       	movw	r20, r4
    ab14:	81 91       	ld	r24, Z+
    ab16:	91 91       	ld	r25, Z+
    ab18:	00 97       	sbiw	r24, 0x00	; 0
    ab1a:	d9 f0       	breq	.+54     	; 0xab52 <dir_register+0xc4>
    ab1c:	20 e1       	ldi	r18, 0x10	; 16
    ab1e:	30 e0       	ldi	r19, 0x00	; 0
    ab20:	44 0f       	add	r20, r20
    ab22:	55 1f       	adc	r21, r21
    ab24:	66 1f       	adc	r22, r22
    ab26:	77 1f       	adc	r23, r23
    ab28:	dc 01       	movw	r26, r24
    ab2a:	a1 70       	andi	r26, 0x01	; 1
    ab2c:	bb 27       	eor	r27, r27
    ab2e:	4a 0f       	add	r20, r26
    ab30:	5b 1f       	adc	r21, r27
    ab32:	61 1d       	adc	r22, r1
    ab34:	71 1d       	adc	r23, r1
    ab36:	96 95       	lsr	r25
    ab38:	87 95       	ror	r24
    ab3a:	60 ff       	sbrs	r22, 0
    ab3c:	06 c0       	rjmp	.+12     	; 0xab4a <dir_register+0xbc>
    ab3e:	a1 e2       	ldi	r26, 0x21	; 33
    ab40:	4a 27       	eor	r20, r26
    ab42:	a0 e1       	ldi	r26, 0x10	; 16
    ab44:	5a 27       	eor	r21, r26
    ab46:	a1 e0       	ldi	r26, 0x01	; 1
    ab48:	6a 27       	eor	r22, r26
    ab4a:	21 50       	subi	r18, 0x01	; 1
    ab4c:	31 09       	sbc	r19, r1
    ab4e:	41 f7       	brne	.-48     	; 0xab20 <dir_register+0x92>
    ab50:	e1 cf       	rjmp	.-62     	; 0xab14 <dir_register+0x86>
    ab52:	7a 01       	movw	r14, r20
    ab54:	fe 01       	movw	r30, r28
    ab56:	75 96       	adiw	r30, 0x15	; 21
    ab58:	27 e0       	ldi	r18, 0x07	; 7
    ab5a:	30 e0       	ldi	r19, 0x00	; 0
    ab5c:	9e 2d       	mov	r25, r14
    ab5e:	9f 70       	andi	r25, 0x0F	; 15
    ab60:	80 e3       	ldi	r24, 0x30	; 48
    ab62:	89 0f       	add	r24, r25
    ab64:	8a 33       	cpi	r24, 0x3A	; 58
    ab66:	10 f0       	brcs	.+4      	; 0xab6c <dir_register+0xde>
    ab68:	87 e3       	ldi	r24, 0x37	; 55
    ab6a:	89 0f       	add	r24, r25
    ab6c:	21 50       	subi	r18, 0x01	; 1
    ab6e:	31 09       	sbc	r19, r1
    ab70:	82 93       	st	-Z, r24
    ab72:	a4 e0       	ldi	r26, 0x04	; 4
    ab74:	f6 94       	lsr	r15
    ab76:	e7 94       	ror	r14
    ab78:	aa 95       	dec	r26
    ab7a:	e1 f7       	brne	.-8      	; 0xab74 <dir_register+0xe6>
    ab7c:	e1 14       	cp	r14, r1
    ab7e:	f1 04       	cpc	r15, r1
    ab80:	69 f7       	brne	.-38     	; 0xab5c <dir_register+0xce>
    ab82:	ed e0       	ldi	r30, 0x0D	; 13
    ab84:	f0 e0       	ldi	r31, 0x00	; 0
    ab86:	ec 0f       	add	r30, r28
    ab88:	fd 1f       	adc	r31, r29
    ab8a:	e2 0f       	add	r30, r18
    ab8c:	f3 1f       	adc	r31, r19
    ab8e:	4e e7       	ldi	r20, 0x7E	; 126
    ab90:	40 83       	st	Z, r20
    ab92:	f5 01       	movw	r30, r10
    ab94:	80 e0       	ldi	r24, 0x00	; 0
    ab96:	90 e0       	ldi	r25, 0x00	; 0
    ab98:	28 17       	cp	r18, r24
    ab9a:	39 07       	cpc	r19, r25
    ab9c:	29 f0       	breq	.+10     	; 0xaba8 <dir_register+0x11a>
    ab9e:	41 91       	ld	r20, Z+
    aba0:	40 32       	cpi	r20, 0x20	; 32
    aba2:	11 f0       	breq	.+4      	; 0xaba8 <dir_register+0x11a>
    aba4:	01 96       	adiw	r24, 0x01	; 1
    aba6:	f8 cf       	rjmp	.-16     	; 0xab98 <dir_register+0x10a>
    aba8:	f5 01       	movw	r30, r10
    abaa:	e8 0f       	add	r30, r24
    abac:	f9 1f       	adc	r31, r25
    abae:	28 30       	cpi	r18, 0x08	; 8
    abb0:	31 05       	cpc	r19, r1
    abb2:	50 f4       	brcc	.+20     	; 0xabc8 <dir_register+0x13a>
    abb4:	ad e0       	ldi	r26, 0x0D	; 13
    abb6:	b0 e0       	ldi	r27, 0x00	; 0
    abb8:	ac 0f       	add	r26, r28
    abba:	bd 1f       	adc	r27, r29
    abbc:	a2 0f       	add	r26, r18
    abbe:	b3 1f       	adc	r27, r19
    abc0:	8c 91       	ld	r24, X
    abc2:	2f 5f       	subi	r18, 0xFF	; 255
    abc4:	3f 4f       	sbci	r19, 0xFF	; 255
    abc6:	01 c0       	rjmp	.+2      	; 0xabca <dir_register+0x13c>
    abc8:	80 e2       	ldi	r24, 0x20	; 32
    abca:	81 93       	st	Z+, r24
    abcc:	cf 01       	movw	r24, r30
    abce:	8a 19       	sub	r24, r10
    abd0:	9b 09       	sbc	r25, r11
    abd2:	08 97       	sbiw	r24, 0x08	; 8
    abd4:	60 f3       	brcs	.-40     	; 0xabae <dir_register+0x120>
    abd6:	c8 01       	movw	r24, r16
    abd8:	4c de       	rcall	.-872    	; 0xa872 <dir_find>
    abda:	00 97       	sbiw	r24, 0x00	; 0
    abdc:	71 f4       	brne	.+28     	; 0xabfa <dir_register+0x16c>
    abde:	8f ef       	ldi	r24, 0xFF	; 255
    abe0:	48 1a       	sub	r4, r24
    abe2:	58 0a       	sbc	r5, r24
    abe4:	68 0a       	sbc	r6, r24
    abe6:	78 0a       	sbc	r7, r24
    abe8:	94 e6       	ldi	r25, 0x64	; 100
    abea:	49 16       	cp	r4, r25
    abec:	51 04       	cpc	r5, r1
    abee:	61 04       	cpc	r6, r1
    abf0:	71 04       	cpc	r7, r1
    abf2:	09 f0       	breq	.+2      	; 0xabf6 <dir_register+0x168>
    abf4:	7c cf       	rjmp	.-264    	; 0xaaee <dir_register+0x60>
    abf6:	27 e0       	ldi	r18, 0x07	; 7
    abf8:	a9 c0       	rjmp	.+338    	; 0xad4c <dir_register+0x2be>
    abfa:	84 30       	cpi	r24, 0x04	; 4
    abfc:	91 05       	cpc	r25, r1
    abfe:	09 f0       	breq	.+2      	; 0xac02 <dir_register+0x174>
    ac00:	ce c0       	rjmp	.+412    	; 0xad9e <dir_register+0x310>
    ac02:	8c 85       	ldd	r24, Y+12	; 0x0c
    ac04:	f8 01       	movw	r30, r16
    ac06:	87 a3       	std	Z+39, r24	; 0x27
    ac08:	8c 85       	ldd	r24, Y+12	; 0x0c
    ac0a:	81 ff       	sbrs	r24, 1
    ac0c:	0b c0       	rjmp	.+22     	; 0xac24 <dir_register+0x196>
    ac0e:	c4 01       	movw	r24, r8
    ac10:	0c 96       	adiw	r24, 0x0c	; 12
    ac12:	6d e0       	ldi	r22, 0x0D	; 13
    ac14:	70 e0       	ldi	r23, 0x00	; 0
    ac16:	0e 94 d2 e5 	call	0x1cba4	; 0x1cba4 <__udivmodhi4>
    ac1a:	7b 01       	movw	r14, r22
    ac1c:	ff ef       	ldi	r31, 0xFF	; 255
    ac1e:	ef 1a       	sub	r14, r31
    ac20:	ff 0a       	sbc	r15, r31
    ac22:	03 c0       	rjmp	.+6      	; 0xac2a <dir_register+0x19c>
    ac24:	ee 24       	eor	r14, r14
    ac26:	e3 94       	inc	r14
    ac28:	f1 2c       	mov	r15, r1
    ac2a:	b7 01       	movw	r22, r14
    ac2c:	c8 01       	movw	r24, r16
    ac2e:	d7 dc       	rcall	.-1618   	; 0xa5de <dir_alloc>
    ac30:	00 97       	sbiw	r24, 0x00	; 0
    ac32:	09 f0       	breq	.+2      	; 0xac36 <dir_register+0x1a8>
    ac34:	b4 c0       	rjmp	.+360    	; 0xad9e <dir_register+0x310>
    ac36:	21 e0       	ldi	r18, 0x01	; 1
    ac38:	e2 1a       	sub	r14, r18
    ac3a:	f1 08       	sbc	r15, r1
    ac3c:	09 f4       	brne	.+2      	; 0xac40 <dir_register+0x1b2>
    ac3e:	88 c0       	rjmp	.+272    	; 0xad50 <dir_register+0x2c2>
    ac40:	f8 01       	movw	r30, r16
    ac42:	46 85       	ldd	r20, Z+14	; 0x0e
    ac44:	57 85       	ldd	r21, Z+15	; 0x0f
    ac46:	60 89       	ldd	r22, Z+16	; 0x10
    ac48:	71 89       	ldd	r23, Z+17	; 0x11
    ac4a:	c7 01       	movw	r24, r14
    ac4c:	e5 e0       	ldi	r30, 0x05	; 5
    ac4e:	88 0f       	add	r24, r24
    ac50:	99 1f       	adc	r25, r25
    ac52:	ea 95       	dec	r30
    ac54:	e1 f7       	brne	.-8      	; 0xac4e <dir_register+0x1c0>
    ac56:	48 1b       	sub	r20, r24
    ac58:	59 0b       	sbc	r21, r25
    ac5a:	61 09       	sbc	r22, r1
    ac5c:	71 09       	sbc	r23, r1
    ac5e:	c8 01       	movw	r24, r16
    ac60:	5e d9       	rcall	.-3396   	; 0x9f1e <dir_sdi>
    ac62:	00 97       	sbiw	r24, 0x00	; 0
    ac64:	09 f0       	breq	.+2      	; 0xac68 <dir_register+0x1da>
    ac66:	9b c0       	rjmp	.+310    	; 0xad9e <dir_register+0x310>
    ac68:	c5 01       	movw	r24, r10
    ac6a:	0e 94 e2 47 	call	0x8fc4	; 0x8fc4 <sum_sfn>
    ac6e:	68 2e       	mov	r6, r24
    ac70:	5f e0       	ldi	r21, 0x0F	; 15
    ac72:	35 2e       	mov	r3, r21
    ac74:	6d e0       	ldi	r22, 0x0D	; 13
    ac76:	46 2e       	mov	r4, r22
    ac78:	78 ef       	ldi	r23, 0xF8	; 248
    ac7a:	87 2e       	mov	r8, r23
    ac7c:	74 e0       	ldi	r23, 0x04	; 4
    ac7e:	97 2e       	mov	r9, r23
    ac80:	55 24       	eor	r5, r5
    ac82:	53 94       	inc	r5
    ac84:	f8 01       	movw	r30, r16
    ac86:	46 89       	ldd	r20, Z+22	; 0x16
    ac88:	57 89       	ldd	r21, Z+23	; 0x17
    ac8a:	60 8d       	ldd	r22, Z+24	; 0x18
    ac8c:	71 8d       	ldd	r23, Z+25	; 0x19
    ac8e:	c6 01       	movw	r24, r12
    ac90:	0e 94 0d 4b 	call	0x961a	; 0x961a <move_window>
    ac94:	00 97       	sbiw	r24, 0x00	; 0
    ac96:	09 f0       	breq	.+2      	; 0xac9a <dir_register+0x20c>
    ac98:	82 c0       	rjmp	.+260    	; 0xad9e <dir_register+0x310>
    ac9a:	f6 01       	movw	r30, r12
    ac9c:	63 85       	ldd	r22, Z+11	; 0x0b
    ac9e:	74 85       	ldd	r23, Z+12	; 0x0c
    aca0:	f8 01       	movw	r30, r16
    aca2:	02 8c       	ldd	r0, Z+26	; 0x1a
    aca4:	f3 8d       	ldd	r31, Z+27	; 0x1b
    aca6:	e0 2d       	mov	r30, r0
    aca8:	fe 8b       	std	Y+22, r31	; 0x16
    acaa:	ed 8b       	std	Y+21, r30	; 0x15
    acac:	7e 2c       	mov	r7, r14
    acae:	65 86       	std	Z+13, r6	; 0x0d
    acb0:	33 86       	std	Z+11, r3	; 0x0b
    acb2:	14 86       	std	Z+12, r1	; 0x0c
    acb4:	12 8e       	std	Z+26, r1	; 0x1a
    acb6:	13 8e       	std	Z+27, r1	; 0x1b
    acb8:	97 01       	movw	r18, r14
    acba:	33 27       	eor	r19, r19
    acbc:	21 50       	subi	r18, 0x01	; 1
    acbe:	31 09       	sbc	r19, r1
    acc0:	42 9e       	mul	r4, r18
    acc2:	c0 01       	movw	r24, r0
    acc4:	43 9e       	mul	r4, r19
    acc6:	90 0d       	add	r25, r0
    acc8:	11 24       	eor	r1, r1
    acca:	ab ee       	ldi	r26, 0xEB	; 235
    accc:	b4 e0       	ldi	r27, 0x04	; 4
    acce:	20 e0       	ldi	r18, 0x00	; 0
    acd0:	30 e0       	ldi	r19, 0x00	; 0
    acd2:	2f 3f       	cpi	r18, 0xFF	; 255
    acd4:	ff ef       	ldi	r31, 0xFF	; 255
    acd6:	3f 07       	cpc	r19, r31
    acd8:	49 f0       	breq	.+18     	; 0xacec <dir_register+0x25e>
    acda:	9c 01       	movw	r18, r24
    acdc:	22 0f       	add	r18, r18
    acde:	33 1f       	adc	r19, r19
    ace0:	26 0f       	add	r18, r22
    ace2:	37 1f       	adc	r19, r23
    ace4:	f9 01       	movw	r30, r18
    ace6:	20 81       	ld	r18, Z
    ace8:	31 81       	ldd	r19, Z+1	; 0x01
    acea:	01 96       	adiw	r24, 0x01	; 1
    acec:	4d 91       	ld	r20, X+
    acee:	ed 89       	ldd	r30, Y+21	; 0x15
    acf0:	fe 89       	ldd	r31, Y+22	; 0x16
    acf2:	e4 0f       	add	r30, r20
    acf4:	f1 1d       	adc	r31, r1
    acf6:	20 83       	st	Z, r18
    acf8:	31 83       	std	Z+1, r19	; 0x01
    acfa:	21 15       	cp	r18, r1
    acfc:	31 05       	cpc	r19, r1
    acfe:	11 f4       	brne	.+4      	; 0xad04 <dir_register+0x276>
    ad00:	2f ef       	ldi	r18, 0xFF	; 255
    ad02:	3f ef       	ldi	r19, 0xFF	; 255
    ad04:	8a 16       	cp	r8, r26
    ad06:	9b 06       	cpc	r9, r27
    ad08:	21 f7       	brne	.-56     	; 0xacd2 <dir_register+0x244>
    ad0a:	2f 3f       	cpi	r18, 0xFF	; 255
    ad0c:	3f 4f       	sbci	r19, 0xFF	; 255
    ad0e:	49 f0       	breq	.+18     	; 0xad22 <dir_register+0x294>
    ad10:	88 0f       	add	r24, r24
    ad12:	99 1f       	adc	r25, r25
    ad14:	db 01       	movw	r26, r22
    ad16:	a8 0f       	add	r26, r24
    ad18:	b9 1f       	adc	r27, r25
    ad1a:	8d 91       	ld	r24, X+
    ad1c:	9c 91       	ld	r25, X
    ad1e:	89 2b       	or	r24, r25
    ad20:	19 f4       	brne	.+6      	; 0xad28 <dir_register+0x29a>
    ad22:	27 2d       	mov	r18, r7
    ad24:	20 64       	ori	r18, 0x40	; 64
    ad26:	72 2e       	mov	r7, r18
    ad28:	ed 89       	ldd	r30, Y+21	; 0x15
    ad2a:	fe 89       	ldd	r31, Y+22	; 0x16
    ad2c:	70 82       	st	Z, r7
    ad2e:	f6 01       	movw	r30, r12
    ad30:	53 82       	std	Z+3, r5	; 0x03
    ad32:	60 e0       	ldi	r22, 0x00	; 0
    ad34:	70 e0       	ldi	r23, 0x00	; 0
    ad36:	c8 01       	movw	r24, r16
    ad38:	6a db       	rcall	.-2348   	; 0xa40e <dir_next>
    ad3a:	00 97       	sbiw	r24, 0x00	; 0
    ad3c:	81 f5       	brne	.+96     	; 0xad9e <dir_register+0x310>
    ad3e:	f1 e0       	ldi	r31, 0x01	; 1
    ad40:	ef 1a       	sub	r14, r31
    ad42:	f1 08       	sbc	r15, r1
    ad44:	09 f0       	breq	.+2      	; 0xad48 <dir_register+0x2ba>
    ad46:	9e cf       	rjmp	.-196    	; 0xac84 <dir_register+0x1f6>
    ad48:	03 c0       	rjmp	.+6      	; 0xad50 <dir_register+0x2c2>
    ad4a:	26 e0       	ldi	r18, 0x06	; 6
    ad4c:	90 e0       	ldi	r25, 0x00	; 0
    ad4e:	28 c0       	rjmp	.+80     	; 0xada0 <dir_register+0x312>
    ad50:	f8 01       	movw	r30, r16
    ad52:	46 89       	ldd	r20, Z+22	; 0x16
    ad54:	57 89       	ldd	r21, Z+23	; 0x17
    ad56:	60 8d       	ldd	r22, Z+24	; 0x18
    ad58:	71 8d       	ldd	r23, Z+25	; 0x19
    ad5a:	c6 01       	movw	r24, r12
    ad5c:	0e 94 0d 4b 	call	0x961a	; 0x961a <move_window>
    ad60:	00 97       	sbiw	r24, 0x00	; 0
    ad62:	e9 f4       	brne	.+58     	; 0xad9e <dir_register+0x310>
    ad64:	40 e2       	ldi	r20, 0x20	; 32
    ad66:	50 e0       	ldi	r21, 0x00	; 0
    ad68:	60 e0       	ldi	r22, 0x00	; 0
    ad6a:	70 e0       	ldi	r23, 0x00	; 0
    ad6c:	f8 01       	movw	r30, r16
    ad6e:	82 8d       	ldd	r24, Z+26	; 0x1a
    ad70:	93 8d       	ldd	r25, Z+27	; 0x1b
    ad72:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <mem_set>
    ad76:	4b e0       	ldi	r20, 0x0B	; 11
    ad78:	50 e0       	ldi	r21, 0x00	; 0
    ad7a:	b5 01       	movw	r22, r10
    ad7c:	f8 01       	movw	r30, r16
    ad7e:	82 8d       	ldd	r24, Z+26	; 0x1a
    ad80:	93 8d       	ldd	r25, Z+27	; 0x1b
    ad82:	0e 94 73 49 	call	0x92e6	; 0x92e6 <mem_cpy.part.0>
    ad86:	f8 01       	movw	r30, r16
    ad88:	22 8d       	ldd	r18, Z+26	; 0x1a
    ad8a:	33 8d       	ldd	r19, Z+27	; 0x1b
    ad8c:	87 a1       	ldd	r24, Z+39	; 0x27
    ad8e:	88 71       	andi	r24, 0x18	; 24
    ad90:	f9 01       	movw	r30, r18
    ad92:	84 87       	std	Z+12, r24	; 0x0c
    ad94:	81 e0       	ldi	r24, 0x01	; 1
    ad96:	f6 01       	movw	r30, r12
    ad98:	83 83       	std	Z+3, r24	; 0x03
    ad9a:	20 e0       	ldi	r18, 0x00	; 0
    ad9c:	d7 cf       	rjmp	.-82     	; 0xad4c <dir_register+0x2be>
    ad9e:	28 2f       	mov	r18, r24
    ada0:	82 2f       	mov	r24, r18
    ada2:	66 96       	adiw	r28, 0x16	; 22
    ada4:	e2 e1       	ldi	r30, 0x12	; 18
    ada6:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

0000adaa <follow_path>:
    adaa:	a8 e0       	ldi	r26, 0x08	; 8
    adac:	b0 e0       	ldi	r27, 0x00	; 0
    adae:	eb ed       	ldi	r30, 0xDB	; 219
    adb0:	f6 e5       	ldi	r31, 0x56	; 86
    adb2:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
    adb6:	8c 01       	movw	r16, r24
    adb8:	78 87       	std	Y+8, r23	; 0x08
    adba:	6f 83       	std	Y+7, r22	; 0x07
    adbc:	dc 01       	movw	r26, r24
    adbe:	0d 90       	ld	r0, X+
    adc0:	bc 91       	ld	r27, X
    adc2:	a0 2d       	mov	r26, r0
    adc4:	ba 83       	std	Y+2, r27	; 0x02
    adc6:	a9 83       	std	Y+1, r26	; 0x01
    adc8:	fb 01       	movw	r30, r22
    adca:	80 81       	ld	r24, Z
    adcc:	8f 32       	cpi	r24, 0x2F	; 47
    adce:	11 f0       	breq	.+4      	; 0xadd4 <follow_path+0x2a>
    add0:	8c 35       	cpi	r24, 0x5C	; 92
    add2:	19 f4       	brne	.+6      	; 0xadda <follow_path+0x30>
    add4:	2f 81       	ldd	r18, Y+7	; 0x07
    add6:	38 85       	ldd	r19, Y+8	; 0x08
    add8:	0c c0       	rjmp	.+24     	; 0xadf2 <follow_path+0x48>
    adda:	e9 81       	ldd	r30, Y+1	; 0x01
    addc:	fa 81       	ldd	r31, Y+2	; 0x02
    adde:	85 89       	ldd	r24, Z+21	; 0x15
    ade0:	96 89       	ldd	r25, Z+22	; 0x16
    ade2:	a7 89       	ldd	r26, Z+23	; 0x17
    ade4:	b0 8d       	ldd	r27, Z+24	; 0x18
    ade6:	f8 01       	movw	r30, r16
    ade8:	86 83       	std	Z+6, r24	; 0x06
    adea:	97 83       	std	Z+7, r25	; 0x07
    adec:	a0 87       	std	Z+8, r26	; 0x08
    adee:	b1 87       	std	Z+9, r27	; 0x09
    adf0:	0f c0       	rjmp	.+30     	; 0xae10 <follow_path+0x66>
    adf2:	38 87       	std	Y+8, r19	; 0x08
    adf4:	2f 83       	std	Y+7, r18	; 0x07
    adf6:	d9 01       	movw	r26, r18
    adf8:	8c 91       	ld	r24, X
    adfa:	2f 5f       	subi	r18, 0xFF	; 255
    adfc:	3f 4f       	sbci	r19, 0xFF	; 255
    adfe:	8f 32       	cpi	r24, 0x2F	; 47
    ae00:	c1 f3       	breq	.-16     	; 0xadf2 <follow_path+0x48>
    ae02:	8c 35       	cpi	r24, 0x5C	; 92
    ae04:	b1 f3       	breq	.-20     	; 0xadf2 <follow_path+0x48>
    ae06:	f8 01       	movw	r30, r16
    ae08:	16 82       	std	Z+6, r1	; 0x06
    ae0a:	17 82       	std	Z+7, r1	; 0x07
    ae0c:	10 86       	std	Z+8, r1	; 0x08
    ae0e:	11 86       	std	Z+9, r1	; 0x09
    ae10:	af 81       	ldd	r26, Y+7	; 0x07
    ae12:	b8 85       	ldd	r27, Y+8	; 0x08
    ae14:	8c 91       	ld	r24, X
    ae16:	80 32       	cpi	r24, 0x20	; 32
    ae18:	58 f0       	brcs	.+22     	; 0xae30 <follow_path+0x86>
    ae1a:	f8 01       	movw	r30, r16
    ae1c:	7c 96       	adiw	r30, 0x1c	; 28
    ae1e:	fc 83       	std	Y+4, r31	; 0x04
    ae20:	eb 83       	std	Y+3, r30	; 0x03
    ae22:	29 81       	ldd	r18, Y+1	; 0x01
    ae24:	3a 81       	ldd	r19, Y+2	; 0x02
    ae26:	2b 5c       	subi	r18, 0xCB	; 203
    ae28:	3f 4f       	sbci	r19, 0xFF	; 255
    ae2a:	3e 83       	std	Y+6, r19	; 0x06
    ae2c:	2d 83       	std	Y+5, r18	; 0x05
    ae2e:	76 c0       	rjmp	.+236    	; 0xaf1c <follow_path+0x172>
    ae30:	80 e8       	ldi	r24, 0x80	; 128
    ae32:	f8 01       	movw	r30, r16
    ae34:	87 a3       	std	Z+39, r24	; 0x27
    ae36:	40 e0       	ldi	r20, 0x00	; 0
    ae38:	50 e0       	ldi	r21, 0x00	; 0
    ae3a:	ba 01       	movw	r22, r20
    ae3c:	c8 01       	movw	r24, r16
    ae3e:	6f d8       	rcall	.-3874   	; 0x9f1e <dir_sdi>
    ae40:	ec c1       	rjmp	.+984    	; 0xb21a <follow_path+0x470>
    ae42:	65 eb       	ldi	r22, 0xB5	; 181
    ae44:	71 e0       	ldi	r23, 0x01	; 1
    ae46:	0e 94 bc 68 	call	0xd178	; 0xd178 <ff_oem2uni>
    ae4a:	00 97       	sbiw	r24, 0x00	; 0
    ae4c:	09 f4       	brne	.+2      	; 0xae50 <follow_path+0xa6>
    ae4e:	b8 c1       	rjmp	.+880    	; 0xb1c0 <follow_path+0x416>
    ae50:	80 32       	cpi	r24, 0x20	; 32
    ae52:	91 05       	cpc	r25, r1
    ae54:	30 f1       	brcs	.+76     	; 0xaea2 <follow_path+0xf8>
    ae56:	8f 32       	cpi	r24, 0x2F	; 47
    ae58:	91 05       	cpc	r25, r1
    ae5a:	09 f4       	brne	.+2      	; 0xae5e <follow_path+0xb4>
    ae5c:	6b c0       	rjmp	.+214    	; 0xaf34 <follow_path+0x18a>
    ae5e:	8c 35       	cpi	r24, 0x5C	; 92
    ae60:	91 05       	cpc	r25, r1
    ae62:	09 f4       	brne	.+2      	; 0xae66 <follow_path+0xbc>
    ae64:	67 c0       	rjmp	.+206    	; 0xaf34 <follow_path+0x18a>
    ae66:	80 38       	cpi	r24, 0x80	; 128
    ae68:	91 05       	cpc	r25, r1
    ae6a:	28 f4       	brcc	.+10     	; 0xae76 <follow_path+0xcc>
    ae6c:	e7 e2       	ldi	r30, 0x27	; 39
    ae6e:	f4 e0       	ldi	r31, 0x04	; 4
    ae70:	21 91       	ld	r18, Z+
    ae72:	21 11       	cpse	r18, r1
    ae74:	61 c0       	rjmp	.+194    	; 0xaf38 <follow_path+0x18e>
    ae76:	ef 81       	ldd	r30, Y+7	; 0x07
    ae78:	f8 85       	ldd	r31, Y+8	; 0x08
    ae7a:	ef 3f       	cpi	r30, 0xFF	; 255
    ae7c:	f1 05       	cpc	r31, r1
    ae7e:	09 f4       	brne	.+2      	; 0xae82 <follow_path+0xd8>
    ae80:	9f c1       	rjmp	.+830    	; 0xb1c0 <follow_path+0x416>
    ae82:	31 96       	adiw	r30, 0x01	; 1
    ae84:	f8 87       	std	Y+8, r31	; 0x08
    ae86:	ef 83       	std	Y+7, r30	; 0x07
    ae88:	d6 01       	movw	r26, r12
    ae8a:	8d 93       	st	X+, r24
    ae8c:	9d 93       	st	X+, r25
    ae8e:	6d 01       	movw	r12, r26
    ae90:	bf ef       	ldi	r27, 0xFF	; 255
    ae92:	eb 1a       	sub	r14, r27
    ae94:	fb 0a       	sbc	r15, r27
    ae96:	f7 01       	movw	r30, r14
    ae98:	31 97       	sbiw	r30, 0x01	; 1
    ae9a:	80 81       	ld	r24, Z
    ae9c:	90 e0       	ldi	r25, 0x00	; 0
    ae9e:	00 97       	sbiw	r24, 0x00	; 0
    aea0:	81 f6       	brne	.-96     	; 0xae42 <follow_path+0x98>
    aea2:	74 e0       	ldi	r23, 0x04	; 4
    aea4:	37 2e       	mov	r3, r23
    aea6:	2f 81       	ldd	r18, Y+7	; 0x07
    aea8:	38 85       	ldd	r19, Y+8	; 0x08
    aeaa:	22 0f       	add	r18, r18
    aeac:	33 1f       	adc	r19, r19
    aeae:	8f 81       	ldd	r24, Y+7	; 0x07
    aeb0:	98 85       	ldd	r25, Y+8	; 0x08
    aeb2:	01 97       	sbiw	r24, 0x01	; 1
    aeb4:	09 f0       	breq	.+2      	; 0xaeb8 <follow_path+0x10e>
    aeb6:	51 c0       	rjmp	.+162    	; 0xaf5a <follow_path+0x1b0>
    aeb8:	d5 01       	movw	r26, r10
    aeba:	8d 91       	ld	r24, X+
    aebc:	9c 91       	ld	r25, X
    aebe:	8e 97       	sbiw	r24, 0x2e	; 46
    aec0:	09 f0       	breq	.+2      	; 0xaec4 <follow_path+0x11a>
    aec2:	57 c0       	rjmp	.+174    	; 0xaf72 <follow_path+0x1c8>
    aec4:	f9 01       	movw	r30, r18
    aec6:	ea 0d       	add	r30, r10
    aec8:	fb 1d       	adc	r31, r11
    aeca:	11 82       	std	Z+1, r1	; 0x01
    aecc:	10 82       	st	Z, r1
    aece:	f8 01       	movw	r30, r16
    aed0:	7c 96       	adiw	r30, 0x1c	; 28
    aed2:	80 e0       	ldi	r24, 0x00	; 0
    aed4:	90 e0       	ldi	r25, 0x00	; 0
    aed6:	2f 81       	ldd	r18, Y+7	; 0x07
    aed8:	38 85       	ldd	r19, Y+8	; 0x08
    aeda:	82 17       	cp	r24, r18
    aedc:	93 07       	cpc	r25, r19
    aede:	08 f0       	brcs	.+2      	; 0xaee2 <follow_path+0x138>
    aee0:	4c c0       	rjmp	.+152    	; 0xaf7a <follow_path+0x1d0>
    aee2:	2e e2       	ldi	r18, 0x2E	; 46
    aee4:	21 93       	st	Z+, r18
    aee6:	01 96       	adiw	r24, 0x01	; 1
    aee8:	8b 30       	cpi	r24, 0x0B	; 11
    aeea:	91 05       	cpc	r25, r1
    aeec:	a1 f7       	brne	.-24     	; 0xaed6 <follow_path+0x12c>
    aeee:	83 2d       	mov	r24, r3
    aef0:	80 62       	ori	r24, 0x20	; 32
    aef2:	f8 01       	movw	r30, r16
    aef4:	87 a3       	std	Z+39, r24	; 0x27
    aef6:	c8 01       	movw	r24, r16
    aef8:	bc dc       	rcall	.-1672   	; 0xa872 <dir_find>
    aefa:	f8 01       	movw	r30, r16
    aefc:	27 a1       	ldd	r18, Z+39	; 0x27
    aefe:	00 97       	sbiw	r24, 0x00	; 0
    af00:	09 f4       	brne	.+2      	; 0xaf04 <follow_path+0x15a>
    af02:	6a c1       	rjmp	.+724    	; 0xb1d8 <follow_path+0x42e>
    af04:	84 30       	cpi	r24, 0x04	; 4
    af06:	91 05       	cpc	r25, r1
    af08:	09 f0       	breq	.+2      	; 0xaf0c <follow_path+0x162>
    af0a:	87 c1       	rjmp	.+782    	; 0xb21a <follow_path+0x470>
    af0c:	32 2f       	mov	r19, r18
    af0e:	34 70       	andi	r19, 0x04	; 4
    af10:	25 ff       	sbrs	r18, 5
    af12:	5f c1       	rjmp	.+702    	; 0xb1d2 <follow_path+0x428>
    af14:	31 11       	cpse	r19, r1
    af16:	57 c1       	rjmp	.+686    	; 0xb1c6 <follow_path+0x41c>
    af18:	f8 86       	std	Y+8, r15	; 0x08
    af1a:	ef 82       	std	Y+7, r14	; 0x07
    af1c:	d8 01       	movw	r26, r16
    af1e:	ed 91       	ld	r30, X+
    af20:	fc 91       	ld	r31, X
    af22:	a3 84       	ldd	r10, Z+11	; 0x0b
    af24:	b4 84       	ldd	r11, Z+12	; 0x0c
    af26:	45 01       	movw	r8, r10
    af28:	65 01       	movw	r12, r10
    af2a:	ef 80       	ldd	r14, Y+7	; 0x07
    af2c:	f8 84       	ldd	r15, Y+8	; 0x08
    af2e:	18 86       	std	Y+8, r1	; 0x08
    af30:	1f 82       	std	Y+7, r1	; 0x07
    af32:	ae cf       	rjmp	.-164    	; 0xae90 <follow_path+0xe6>
    af34:	97 01       	movw	r18, r14
    af36:	06 c0       	rjmp	.+12     	; 0xaf44 <follow_path+0x19a>
    af38:	30 e0       	ldi	r19, 0x00	; 0
    af3a:	82 17       	cp	r24, r18
    af3c:	93 07       	cpc	r25, r19
    af3e:	09 f0       	breq	.+2      	; 0xaf42 <follow_path+0x198>
    af40:	97 cf       	rjmp	.-210    	; 0xae70 <follow_path+0xc6>
    af42:	3e c1       	rjmp	.+636    	; 0xb1c0 <follow_path+0x416>
    af44:	79 01       	movw	r14, r18
    af46:	f9 01       	movw	r30, r18
    af48:	80 81       	ld	r24, Z
    af4a:	2f 5f       	subi	r18, 0xFF	; 255
    af4c:	3f 4f       	sbci	r19, 0xFF	; 255
    af4e:	8f 32       	cpi	r24, 0x2F	; 47
    af50:	c9 f3       	breq	.-14     	; 0xaf44 <follow_path+0x19a>
    af52:	8c 35       	cpi	r24, 0x5C	; 92
    af54:	b9 f3       	breq	.-18     	; 0xaf44 <follow_path+0x19a>
    af56:	31 2c       	mov	r3, r1
    af58:	a6 cf       	rjmp	.-180    	; 0xaea6 <follow_path+0xfc>
    af5a:	ef 81       	ldd	r30, Y+7	; 0x07
    af5c:	f8 85       	ldd	r31, Y+8	; 0x08
    af5e:	32 97       	sbiw	r30, 0x02	; 2
    af60:	41 f4       	brne	.+16     	; 0xaf72 <follow_path+0x1c8>
    af62:	f5 01       	movw	r30, r10
    af64:	82 81       	ldd	r24, Z+2	; 0x02
    af66:	93 81       	ldd	r25, Z+3	; 0x03
    af68:	8e 97       	sbiw	r24, 0x2e	; 46
    af6a:	19 f4       	brne	.+6      	; 0xaf72 <follow_path+0x1c8>
    af6c:	80 81       	ld	r24, Z
    af6e:	91 81       	ldd	r25, Z+1	; 0x01
    af70:	a6 cf       	rjmp	.-180    	; 0xaebe <follow_path+0x114>
    af72:	f9 01       	movw	r30, r18
    af74:	ea 0d       	add	r30, r10
    af76:	fb 1d       	adc	r31, r11
    af78:	0d c0       	rjmp	.+26     	; 0xaf94 <follow_path+0x1ea>
    af7a:	20 e2       	ldi	r18, 0x20	; 32
    af7c:	b3 cf       	rjmp	.-154    	; 0xaee4 <follow_path+0x13a>
    af7e:	92 91       	ld	r25, -Z
    af80:	82 91       	ld	r24, -Z
    af82:	80 32       	cpi	r24, 0x20	; 32
    af84:	91 05       	cpc	r25, r1
    af86:	59 f4       	brne	.+22     	; 0xaf9e <follow_path+0x1f4>
    af88:	2f 81       	ldd	r18, Y+7	; 0x07
    af8a:	38 85       	ldd	r19, Y+8	; 0x08
    af8c:	21 50       	subi	r18, 0x01	; 1
    af8e:	31 09       	sbc	r19, r1
    af90:	38 87       	std	Y+8, r19	; 0x08
    af92:	2f 83       	std	Y+7, r18	; 0x07
    af94:	8f 81       	ldd	r24, Y+7	; 0x07
    af96:	98 85       	ldd	r25, Y+8	; 0x08
    af98:	89 2b       	or	r24, r25
    af9a:	89 f7       	brne	.-30     	; 0xaf7e <follow_path+0x1d4>
    af9c:	02 c0       	rjmp	.+4      	; 0xafa2 <follow_path+0x1f8>
    af9e:	8e 97       	sbiw	r24, 0x2e	; 46
    afa0:	99 f3       	breq	.-26     	; 0xaf88 <follow_path+0x1de>
    afa2:	ef 81       	ldd	r30, Y+7	; 0x07
    afa4:	f8 85       	ldd	r31, Y+8	; 0x08
    afa6:	ee 0f       	add	r30, r30
    afa8:	ff 1f       	adc	r31, r31
    afaa:	ea 0d       	add	r30, r10
    afac:	fb 1d       	adc	r31, r11
    afae:	11 82       	std	Z+1, r1	; 0x01
    afb0:	10 82       	st	Z, r1
    afb2:	af 81       	ldd	r26, Y+7	; 0x07
    afb4:	b8 85       	ldd	r27, Y+8	; 0x08
    afb6:	ab 2b       	or	r26, r27
    afb8:	09 f4       	brne	.+2      	; 0xafbc <follow_path+0x212>
    afba:	02 c1       	rjmp	.+516    	; 0xb1c0 <follow_path+0x416>
    afbc:	61 2c       	mov	r6, r1
    afbe:	71 2c       	mov	r7, r1
    afc0:	d4 01       	movw	r26, r8
    afc2:	8d 91       	ld	r24, X+
    afc4:	9d 91       	ld	r25, X+
    afc6:	4d 01       	movw	r8, r26
    afc8:	80 32       	cpi	r24, 0x20	; 32
    afca:	91 05       	cpc	r25, r1
    afcc:	21 f4       	brne	.+8      	; 0xafd6 <follow_path+0x22c>
    afce:	bf ef       	ldi	r27, 0xFF	; 255
    afd0:	6b 1a       	sub	r6, r27
    afd2:	7b 0a       	sbc	r7, r27
    afd4:	f5 cf       	rjmp	.-22     	; 0xafc0 <follow_path+0x216>
    afd6:	61 14       	cp	r6, r1
    afd8:	71 04       	cpc	r7, r1
    afda:	11 f4       	brne	.+4      	; 0xafe0 <follow_path+0x236>
    afdc:	8e 97       	sbiw	r24, 0x2e	; 46
    afde:	61 f4       	brne	.+24     	; 0xaff8 <follow_path+0x24e>
    afe0:	b3 2d       	mov	r27, r3
    afe2:	b3 60       	ori	r27, 0x03	; 3
    afe4:	3b 2e       	mov	r3, r27
    afe6:	08 c0       	rjmp	.+16     	; 0xaff8 <follow_path+0x24e>
    afe8:	2f 81       	ldd	r18, Y+7	; 0x07
    afea:	38 85       	ldd	r19, Y+8	; 0x08
    afec:	21 50       	subi	r18, 0x01	; 1
    afee:	31 09       	sbc	r19, r1
    aff0:	38 87       	std	Y+8, r19	; 0x08
    aff2:	2f 83       	std	Y+7, r18	; 0x07
    aff4:	23 2b       	or	r18, r19
    aff6:	21 f0       	breq	.+8      	; 0xb000 <follow_path+0x256>
    aff8:	92 91       	ld	r25, -Z
    affa:	82 91       	ld	r24, -Z
    affc:	8e 97       	sbiw	r24, 0x2e	; 46
    affe:	a1 f7       	brne	.-24     	; 0xafe8 <follow_path+0x23e>
    b000:	4b e0       	ldi	r20, 0x0B	; 11
    b002:	50 e0       	ldi	r21, 0x00	; 0
    b004:	60 e2       	ldi	r22, 0x20	; 32
    b006:	70 e0       	ldi	r23, 0x00	; 0
    b008:	8b 81       	ldd	r24, Y+3	; 0x03
    b00a:	9c 81       	ldd	r25, Y+4	; 0x04
    b00c:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <mem_set>
    b010:	48 e0       	ldi	r20, 0x08	; 8
    b012:	84 2e       	mov	r8, r20
    b014:	91 2c       	mov	r9, r1
    b016:	c1 2c       	mov	r12, r1
    b018:	d1 2c       	mov	r13, r1
    b01a:	21 2c       	mov	r2, r1
    b01c:	23 01       	movw	r4, r6
    b01e:	3f ef       	ldi	r19, 0xFF	; 255
    b020:	43 1a       	sub	r4, r19
    b022:	53 0a       	sbc	r5, r19
    b024:	66 0c       	add	r6, r6
    b026:	77 1c       	adc	r7, r7
    b028:	f5 01       	movw	r30, r10
    b02a:	e6 0d       	add	r30, r6
    b02c:	f7 1d       	adc	r31, r7
    b02e:	80 81       	ld	r24, Z
    b030:	91 81       	ldd	r25, Z+1	; 0x01
    b032:	00 97       	sbiw	r24, 0x00	; 0
    b034:	09 f4       	brne	.+2      	; 0xb038 <follow_path+0x28e>
    b036:	9e c0       	rjmp	.+316    	; 0xb174 <follow_path+0x3ca>
    b038:	80 32       	cpi	r24, 0x20	; 32
    b03a:	91 05       	cpc	r25, r1
    b03c:	41 f0       	breq	.+16     	; 0xb04e <follow_path+0x2a4>
    b03e:	8e 32       	cpi	r24, 0x2E	; 46
    b040:	91 05       	cpc	r25, r1
    b042:	51 f4       	brne	.+20     	; 0xb058 <follow_path+0x2ae>
    b044:	8f 81       	ldd	r24, Y+7	; 0x07
    b046:	98 85       	ldd	r25, Y+8	; 0x08
    b048:	84 15       	cp	r24, r4
    b04a:	95 05       	cpc	r25, r5
    b04c:	71 f0       	breq	.+28     	; 0xb06a <follow_path+0x2c0>
    b04e:	93 2d       	mov	r25, r3
    b050:	93 60       	ori	r25, 0x03	; 3
    b052:	39 2e       	mov	r3, r25
    b054:	32 01       	movw	r6, r4
    b056:	e2 cf       	rjmp	.-60     	; 0xb01c <follow_path+0x272>
    b058:	c8 14       	cp	r12, r8
    b05a:	d9 04       	cpc	r13, r9
    b05c:	50 f4       	brcc	.+20     	; 0xb072 <follow_path+0x2c8>
    b05e:	af 81       	ldd	r26, Y+7	; 0x07
    b060:	b8 85       	ldd	r27, Y+8	; 0x08
    b062:	a4 15       	cp	r26, r4
    b064:	b5 05       	cpc	r27, r5
    b066:	49 f5       	brne	.+82     	; 0xb0ba <follow_path+0x310>
    b068:	d2 c0       	rjmp	.+420    	; 0xb20e <follow_path+0x464>
    b06a:	c8 14       	cp	r12, r8
    b06c:	d9 04       	cpc	r13, r9
    b06e:	08 f4       	brcc	.+2      	; 0xb072 <follow_path+0x2c8>
    b070:	ce c0       	rjmp	.+412    	; 0xb20e <follow_path+0x464>
    b072:	bb e0       	ldi	r27, 0x0B	; 11
    b074:	8b 16       	cp	r8, r27
    b076:	91 04       	cpc	r9, r1
    b078:	39 f4       	brne	.+14     	; 0xb088 <follow_path+0x2de>
    b07a:	e3 2d       	mov	r30, r3
    b07c:	e3 60       	ori	r30, 0x03	; 3
    b07e:	3e 2e       	mov	r3, r30
    b080:	2b e0       	ldi	r18, 0x0B	; 11
    b082:	82 2e       	mov	r8, r18
    b084:	91 2c       	mov	r9, r1
    b086:	76 c0       	rjmp	.+236    	; 0xb174 <follow_path+0x3ca>
    b088:	2f 81       	ldd	r18, Y+7	; 0x07
    b08a:	38 85       	ldd	r19, Y+8	; 0x08
    b08c:	24 15       	cp	r18, r4
    b08e:	35 05       	cpc	r19, r5
    b090:	49 f0       	breq	.+18     	; 0xb0a4 <follow_path+0x2fa>
    b092:	33 2d       	mov	r19, r3
    b094:	33 60       	ori	r19, 0x03	; 3
    b096:	33 2e       	mov	r3, r19
    b098:	8f 81       	ldd	r24, Y+7	; 0x07
    b09a:	98 85       	ldd	r25, Y+8	; 0x08
    b09c:	84 15       	cp	r24, r4
    b09e:	95 05       	cpc	r25, r5
    b0a0:	08 f4       	brcc	.+2      	; 0xb0a4 <follow_path+0x2fa>
    b0a2:	68 c0       	rjmp	.+208    	; 0xb174 <follow_path+0x3ca>
    b0a4:	22 0c       	add	r2, r2
    b0a6:	22 0c       	add	r2, r2
    b0a8:	4f 80       	ldd	r4, Y+7	; 0x07
    b0aa:	58 84       	ldd	r5, Y+8	; 0x08
    b0ac:	8b e0       	ldi	r24, 0x0B	; 11
    b0ae:	88 2e       	mov	r8, r24
    b0b0:	91 2c       	mov	r9, r1
    b0b2:	98 e0       	ldi	r25, 0x08	; 8
    b0b4:	c9 2e       	mov	r12, r25
    b0b6:	d1 2c       	mov	r13, r1
    b0b8:	cd cf       	rjmp	.-102    	; 0xb054 <follow_path+0x2aa>
    b0ba:	80 38       	cpi	r24, 0x80	; 128
    b0bc:	91 05       	cpc	r25, r1
    b0be:	70 f1       	brcs	.+92     	; 0xb11c <follow_path+0x372>
    b0c0:	a3 2d       	mov	r26, r3
    b0c2:	a2 60       	ori	r26, 0x02	; 2
    b0c4:	7a 2e       	mov	r7, r26
    b0c6:	bc 01       	movw	r22, r24
    b0c8:	80 e0       	ldi	r24, 0x00	; 0
    b0ca:	90 e0       	ldi	r25, 0x00	; 0
    b0cc:	45 eb       	ldi	r20, 0xB5	; 181
    b0ce:	51 e0       	ldi	r21, 0x01	; 1
    b0d0:	0e 94 89 68 	call	0xd112	; 0xd112 <ff_uni2oem>
    b0d4:	87 ff       	sbrs	r24, 7
    b0d6:	08 c0       	rjmp	.+16     	; 0xb0e8 <follow_path+0x33e>
    b0d8:	8f 77       	andi	r24, 0x7F	; 127
    b0da:	99 27       	eor	r25, r25
    b0dc:	fc 01       	movw	r30, r24
    b0de:	e5 59       	subi	r30, 0x95	; 149
    b0e0:	fb 4f       	sbci	r31, 0xFB	; 251
    b0e2:	80 81       	ld	r24, Z
    b0e4:	90 e0       	ldi	r25, 0x00	; 0
    b0e6:	17 c0       	rjmp	.+46     	; 0xb116 <follow_path+0x36c>
    b0e8:	8f 3f       	cpi	r24, 0xFF	; 255
    b0ea:	91 05       	cpc	r25, r1
    b0ec:	a1 f0       	breq	.+40     	; 0xb116 <follow_path+0x36c>
    b0ee:	98 f0       	brcs	.+38     	; 0xb116 <follow_path+0x36c>
    b0f0:	94 01       	movw	r18, r8
    b0f2:	21 50       	subi	r18, 0x01	; 1
    b0f4:	31 09       	sbc	r19, r1
    b0f6:	c2 16       	cp	r12, r18
    b0f8:	d3 06       	cpc	r13, r19
    b0fa:	28 f0       	brcs	.+10     	; 0xb106 <follow_path+0x35c>
    b0fc:	b3 2d       	mov	r27, r3
    b0fe:	b3 60       	ori	r27, 0x03	; 3
    b100:	3b 2e       	mov	r3, r27
    b102:	64 01       	movw	r12, r8
    b104:	a7 cf       	rjmp	.-178    	; 0xb054 <follow_path+0x2aa>
    b106:	f8 01       	movw	r30, r16
    b108:	ec 0d       	add	r30, r12
    b10a:	fd 1d       	adc	r31, r13
    b10c:	94 8f       	std	Z+28, r25	; 0x1c
    b10e:	f6 01       	movw	r30, r12
    b110:	31 96       	adiw	r30, 0x01	; 1
    b112:	6f 01       	movw	r12, r30
    b114:	26 c0       	rjmp	.+76     	; 0xb162 <follow_path+0x3b8>
    b116:	00 97       	sbiw	r24, 0x00	; 0
    b118:	59 f0       	breq	.+22     	; 0xb130 <follow_path+0x386>
    b11a:	01 c0       	rjmp	.+2      	; 0xb11e <follow_path+0x374>
    b11c:	73 2c       	mov	r7, r3
    b11e:	e0 e3       	ldi	r30, 0x30	; 48
    b120:	f4 e0       	ldi	r31, 0x04	; 4
    b122:	21 91       	ld	r18, Z+
    b124:	22 23       	and	r18, r18
    b126:	51 f0       	breq	.+20     	; 0xb13c <follow_path+0x392>
    b128:	30 e0       	ldi	r19, 0x00	; 0
    b12a:	82 17       	cp	r24, r18
    b12c:	93 07       	cpc	r25, r19
    b12e:	c9 f7       	brne	.-14     	; 0xb122 <follow_path+0x378>
    b130:	f7 2d       	mov	r31, r7
    b132:	f3 60       	ori	r31, 0x03	; 3
    b134:	7f 2e       	mov	r7, r31
    b136:	8f e5       	ldi	r24, 0x5F	; 95
    b138:	90 e0       	ldi	r25, 0x00	; 0
    b13a:	13 c0       	rjmp	.+38     	; 0xb162 <follow_path+0x3b8>
    b13c:	9c 01       	movw	r18, r24
    b13e:	21 54       	subi	r18, 0x41	; 65
    b140:	31 09       	sbc	r19, r1
    b142:	2a 31       	cpi	r18, 0x1A	; 26
    b144:	31 05       	cpc	r19, r1
    b146:	18 f4       	brcc	.+6      	; 0xb14e <follow_path+0x3a4>
    b148:	22 2d       	mov	r18, r2
    b14a:	22 60       	ori	r18, 0x02	; 2
    b14c:	22 2e       	mov	r2, r18
    b14e:	9c 01       	movw	r18, r24
    b150:	21 56       	subi	r18, 0x61	; 97
    b152:	31 09       	sbc	r19, r1
    b154:	2a 31       	cpi	r18, 0x1A	; 26
    b156:	31 05       	cpc	r19, r1
    b158:	20 f4       	brcc	.+8      	; 0xb162 <follow_path+0x3b8>
    b15a:	32 2d       	mov	r19, r2
    b15c:	31 60       	ori	r19, 0x01	; 1
    b15e:	23 2e       	mov	r2, r19
    b160:	80 97       	sbiw	r24, 0x20	; 32
    b162:	f8 01       	movw	r30, r16
    b164:	ec 0d       	add	r30, r12
    b166:	fd 1d       	adc	r31, r13
    b168:	84 8f       	std	Z+28, r24	; 0x1c
    b16a:	c6 01       	movw	r24, r12
    b16c:	01 96       	adiw	r24, 0x01	; 1
    b16e:	6c 01       	movw	r12, r24
    b170:	37 2c       	mov	r3, r7
    b172:	70 cf       	rjmp	.-288    	; 0xb054 <follow_path+0x2aa>
    b174:	f8 01       	movw	r30, r16
    b176:	84 8d       	ldd	r24, Z+28	; 0x1c
    b178:	85 3e       	cpi	r24, 0xE5	; 229
    b17a:	11 f4       	brne	.+4      	; 0xb180 <follow_path+0x3d6>
    b17c:	25 e0       	ldi	r18, 0x05	; 5
    b17e:	24 8f       	std	Z+28, r18	; 0x1c
    b180:	38 e0       	ldi	r19, 0x08	; 8
    b182:	83 16       	cp	r8, r19
    b184:	91 04       	cpc	r9, r1
    b186:	11 f4       	brne	.+4      	; 0xb18c <follow_path+0x3e2>
    b188:	22 0c       	add	r2, r2
    b18a:	22 0c       	add	r2, r2
    b18c:	82 2d       	mov	r24, r2
    b18e:	8c 70       	andi	r24, 0x0C	; 12
    b190:	8c 30       	cpi	r24, 0x0C	; 12
    b192:	21 f0       	breq	.+8      	; 0xb19c <follow_path+0x3f2>
    b194:	82 2d       	mov	r24, r2
    b196:	83 70       	andi	r24, 0x03	; 3
    b198:	83 30       	cpi	r24, 0x03	; 3
    b19a:	19 f4       	brne	.+6      	; 0xb1a2 <follow_path+0x3f8>
    b19c:	83 2d       	mov	r24, r3
    b19e:	82 60       	ori	r24, 0x02	; 2
    b1a0:	38 2e       	mov	r3, r24
    b1a2:	31 fc       	sbrc	r3, 1
    b1a4:	0a c0       	rjmp	.+20     	; 0xb1ba <follow_path+0x410>
    b1a6:	20 fe       	sbrs	r2, 0
    b1a8:	03 c0       	rjmp	.+6      	; 0xb1b0 <follow_path+0x406>
    b1aa:	93 2d       	mov	r25, r3
    b1ac:	90 61       	ori	r25, 0x10	; 16
    b1ae:	39 2e       	mov	r3, r25
    b1b0:	22 fe       	sbrs	r2, 2
    b1b2:	03 c0       	rjmp	.+6      	; 0xb1ba <follow_path+0x410>
    b1b4:	a3 2d       	mov	r26, r3
    b1b6:	a8 60       	ori	r26, 0x08	; 8
    b1b8:	3a 2e       	mov	r3, r26
    b1ba:	f8 01       	movw	r30, r16
    b1bc:	37 a2       	std	Z+39, r3	; 0x27
    b1be:	9b ce       	rjmp	.-714    	; 0xaef6 <follow_path+0x14c>
    b1c0:	86 e0       	ldi	r24, 0x06	; 6
    b1c2:	90 e0       	ldi	r25, 0x00	; 0
    b1c4:	2a c0       	rjmp	.+84     	; 0xb21a <follow_path+0x470>
    b1c6:	80 e8       	ldi	r24, 0x80	; 128
    b1c8:	f8 01       	movw	r30, r16
    b1ca:	87 a3       	std	Z+39, r24	; 0x27
    b1cc:	80 e0       	ldi	r24, 0x00	; 0
    b1ce:	90 e0       	ldi	r25, 0x00	; 0
    b1d0:	24 c0       	rjmp	.+72     	; 0xb21a <follow_path+0x470>
    b1d2:	33 23       	and	r19, r19
    b1d4:	c9 f0       	breq	.+50     	; 0xb208 <follow_path+0x45e>
    b1d6:	21 c0       	rjmp	.+66     	; 0xb21a <follow_path+0x470>
    b1d8:	22 fd       	sbrc	r18, 2
    b1da:	1f c0       	rjmp	.+62     	; 0xb21a <follow_path+0x470>
    b1dc:	f8 01       	movw	r30, r16
    b1de:	84 81       	ldd	r24, Z+4	; 0x04
    b1e0:	84 ff       	sbrs	r24, 4
    b1e2:	12 c0       	rjmp	.+36     	; 0xb208 <follow_path+0x45e>
    b1e4:	66 85       	ldd	r22, Z+14	; 0x0e
    b1e6:	77 85       	ldd	r23, Z+15	; 0x0f
    b1e8:	71 70       	andi	r23, 0x01	; 1
    b1ea:	2d 81       	ldd	r18, Y+5	; 0x05
    b1ec:	3e 81       	ldd	r19, Y+6	; 0x06
    b1ee:	62 0f       	add	r22, r18
    b1f0:	73 1f       	adc	r23, r19
    b1f2:	a9 81       	ldd	r26, Y+1	; 0x01
    b1f4:	ba 81       	ldd	r27, Y+2	; 0x02
    b1f6:	8c 91       	ld	r24, X
    b1f8:	0e 94 7e 49 	call	0x92fc	; 0x92fc <ld_clust.isra.3>
    b1fc:	f8 01       	movw	r30, r16
    b1fe:	66 83       	std	Z+6, r22	; 0x06
    b200:	77 83       	std	Z+7, r23	; 0x07
    b202:	80 87       	std	Z+8, r24	; 0x08
    b204:	91 87       	std	Z+9, r25	; 0x09
    b206:	88 ce       	rjmp	.-752    	; 0xaf18 <follow_path+0x16e>
    b208:	85 e0       	ldi	r24, 0x05	; 5
    b20a:	90 e0       	ldi	r25, 0x00	; 0
    b20c:	06 c0       	rjmp	.+12     	; 0xb21a <follow_path+0x470>
    b20e:	fb e0       	ldi	r31, 0x0B	; 11
    b210:	8f 16       	cp	r8, r31
    b212:	91 04       	cpc	r9, r1
    b214:	09 f0       	breq	.+2      	; 0xb218 <follow_path+0x46e>
    b216:	46 cf       	rjmp	.-372    	; 0xb0a4 <follow_path+0x2fa>
    b218:	30 cf       	rjmp	.-416    	; 0xb07a <follow_path+0x2d0>
    b21a:	28 96       	adiw	r28, 0x08	; 8
    b21c:	e2 e1       	ldi	r30, 0x12	; 18
    b21e:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

0000b222 <f_mount>:
    b222:	a6 e0       	ldi	r26, 0x06	; 6
    b224:	b0 e0       	ldi	r27, 0x00	; 0
    b226:	e7 e1       	ldi	r30, 0x17	; 23
    b228:	f9 e5       	ldi	r31, 0x59	; 89
    b22a:	0c 94 75 e6 	jmp	0x1ccea	; 0x1ccea <__prologue_saves__+0x1e>
    b22e:	9c 83       	std	Y+4, r25	; 0x04
    b230:	8b 83       	std	Y+3, r24	; 0x03
    b232:	7e 83       	std	Y+6, r23	; 0x06
    b234:	6d 83       	std	Y+5, r22	; 0x05
    b236:	14 2f       	mov	r17, r20
    b238:	7a 83       	std	Y+2, r23	; 0x02
    b23a:	69 83       	std	Y+1, r22	; 0x01
    b23c:	ce 01       	movw	r24, r28
    b23e:	01 96       	adiw	r24, 0x01	; 1
    b240:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <get_ldnumber>
    b244:	97 fd       	sbrc	r25, 7
    b246:	20 c0       	rjmp	.+64     	; 0xb288 <f_mount+0x66>
    b248:	88 0f       	add	r24, r24
    b24a:	99 1f       	adc	r25, r25
    b24c:	fc 01       	movw	r30, r24
    b24e:	e9 5e       	subi	r30, 0xE9	; 233
    b250:	f7 4e       	sbci	r31, 0xE7	; 231
    b252:	01 90       	ld	r0, Z+
    b254:	f0 81       	ld	r31, Z
    b256:	e0 2d       	mov	r30, r0
    b258:	30 97       	sbiw	r30, 0x00	; 0
    b25a:	09 f0       	breq	.+2      	; 0xb25e <f_mount+0x3c>
    b25c:	10 82       	st	Z, r1
    b25e:	eb 81       	ldd	r30, Y+3	; 0x03
    b260:	fc 81       	ldd	r31, Y+4	; 0x04
    b262:	30 97       	sbiw	r30, 0x00	; 0
    b264:	09 f0       	breq	.+2      	; 0xb268 <f_mount+0x46>
    b266:	10 82       	st	Z, r1
    b268:	dc 01       	movw	r26, r24
    b26a:	a9 5e       	subi	r26, 0xE9	; 233
    b26c:	b7 4e       	sbci	r27, 0xE7	; 231
    b26e:	ed 93       	st	X+, r30
    b270:	fc 93       	st	X, r31
    b272:	11 23       	and	r17, r17
    b274:	61 f0       	breq	.+24     	; 0xb28e <f_mount+0x6c>
    b276:	40 e0       	ldi	r20, 0x00	; 0
    b278:	be 01       	movw	r22, r28
    b27a:	6d 5f       	subi	r22, 0xFD	; 253
    b27c:	7f 4f       	sbci	r23, 0xFF	; 255
    b27e:	ce 01       	movw	r24, r28
    b280:	05 96       	adiw	r24, 0x05	; 5
    b282:	0e 94 88 4b 	call	0x9710	; 0x9710 <mount_volume>
    b286:	05 c0       	rjmp	.+10     	; 0xb292 <f_mount+0x70>
    b288:	8b e0       	ldi	r24, 0x0B	; 11
    b28a:	90 e0       	ldi	r25, 0x00	; 0
    b28c:	02 c0       	rjmp	.+4      	; 0xb292 <f_mount+0x70>
    b28e:	80 e0       	ldi	r24, 0x00	; 0
    b290:	90 e0       	ldi	r25, 0x00	; 0
    b292:	26 96       	adiw	r28, 0x06	; 6
    b294:	e3 e0       	ldi	r30, 0x03	; 3
    b296:	0c 94 91 e6 	jmp	0x1cd22	; 0x1cd22 <__epilogue_restores__+0x1e>

0000b29a <f_open>:
    b29a:	a6 e3       	ldi	r26, 0x36	; 54
    b29c:	b0 e0       	ldi	r27, 0x00	; 0
    b29e:	e3 e5       	ldi	r30, 0x53	; 83
    b2a0:	f9 e5       	ldi	r31, 0x59	; 89
    b2a2:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
    b2a6:	7a ab       	std	Y+50, r23	; 0x32
    b2a8:	69 ab       	std	Y+49, r22	; 0x31
    b2aa:	00 97       	sbiw	r24, 0x00	; 0
    b2ac:	09 f4       	brne	.+2      	; 0xb2b0 <f_open+0x16>
    b2ae:	93 c1       	rjmp	.+806    	; 0xb5d6 <f_open+0x33c>
    b2b0:	74 2e       	mov	r7, r20
    b2b2:	7c 01       	movw	r14, r24
    b2b4:	24 2f       	mov	r18, r20
    b2b6:	2f 73       	andi	r18, 0x3F	; 63
    b2b8:	32 2e       	mov	r3, r18
    b2ba:	42 2f       	mov	r20, r18
    b2bc:	be 01       	movw	r22, r28
    b2be:	61 5d       	subi	r22, 0xD1	; 209
    b2c0:	7f 4f       	sbci	r23, 0xFF	; 255
    b2c2:	ce 01       	movw	r24, r28
    b2c4:	c1 96       	adiw	r24, 0x31	; 49
    b2c6:	0e 94 88 4b 	call	0x9710	; 0x9710 <mount_volume>
    b2ca:	00 97       	sbiw	r24, 0x00	; 0
    b2cc:	09 f0       	breq	.+2      	; 0xb2d0 <f_open+0x36>
    b2ce:	7d c1       	rjmp	.+762    	; 0xb5ca <f_open+0x330>
    b2d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    b2d2:	98 a9       	ldd	r25, Y+48	; 0x30
    b2d4:	9a 83       	std	Y+2, r25	; 0x02
    b2d6:	89 83       	std	Y+1, r24	; 0x01
    b2d8:	80 e0       	ldi	r24, 0x00	; 0
    b2da:	92 e0       	ldi	r25, 0x02	; 2
    b2dc:	0e 94 83 68 	call	0xd106	; 0xd106 <ff_memalloc>
    b2e0:	5c 01       	movw	r10, r24
    b2e2:	00 97       	sbiw	r24, 0x00	; 0
    b2e4:	09 f4       	brne	.+2      	; 0xb2e8 <f_open+0x4e>
    b2e6:	79 c1       	rjmp	.+754    	; 0xb5da <f_open+0x340>
    b2e8:	ef a5       	ldd	r30, Y+47	; 0x2f
    b2ea:	f8 a9       	ldd	r31, Y+48	; 0x30
    b2ec:	94 87       	std	Z+12, r25	; 0x0c
    b2ee:	83 87       	std	Z+11, r24	; 0x0b
    b2f0:	69 a9       	ldd	r22, Y+49	; 0x31
    b2f2:	7a a9       	ldd	r23, Y+50	; 0x32
    b2f4:	ce 01       	movw	r24, r28
    b2f6:	01 96       	adiw	r24, 0x01	; 1
    b2f8:	58 dd       	rcall	.-1360   	; 0xadaa <follow_path>
    b2fa:	8c 01       	movw	r16, r24
    b2fc:	89 2b       	or	r24, r25
    b2fe:	29 f4       	brne	.+10     	; 0xb30a <f_open+0x70>
    b300:	88 a5       	ldd	r24, Y+40	; 0x28
    b302:	87 ff       	sbrs	r24, 7
    b304:	02 c0       	rjmp	.+4      	; 0xb30a <f_open+0x70>
    b306:	06 e0       	ldi	r16, 0x06	; 6
    b308:	10 e0       	ldi	r17, 0x00	; 0
    b30a:	87 2d       	mov	r24, r7
    b30c:	8c 71       	andi	r24, 0x1C	; 28
    b30e:	09 f4       	brne	.+2      	; 0xb312 <f_open+0x78>
    b310:	75 c0       	rjmp	.+234    	; 0xb3fc <f_open+0x162>
    b312:	01 15       	cp	r16, r1
    b314:	11 05       	cpc	r17, r1
    b316:	79 f0       	breq	.+30     	; 0xb336 <f_open+0x9c>
    b318:	04 30       	cpi	r16, 0x04	; 4
    b31a:	11 05       	cpc	r17, r1
    b31c:	09 f0       	breq	.+2      	; 0xb320 <f_open+0x86>
    b31e:	6d c1       	rjmp	.+730    	; 0xb5fa <f_open+0x360>
    b320:	ce 01       	movw	r24, r28
    b322:	01 96       	adiw	r24, 0x01	; 1
    b324:	b4 db       	rcall	.-2200   	; 0xaa8e <dir_register>
    b326:	8c 01       	movw	r16, r24
    b328:	89 2b       	or	r24, r25
    b32a:	09 f0       	breq	.+2      	; 0xb32e <f_open+0x94>
    b32c:	66 c1       	rjmp	.+716    	; 0xb5fa <f_open+0x360>
    b32e:	33 2d       	mov	r19, r3
    b330:	38 60       	ori	r19, 0x08	; 8
    b332:	33 2e       	mov	r3, r19
    b334:	06 c0       	rjmp	.+12     	; 0xb342 <f_open+0xa8>
    b336:	8d 81       	ldd	r24, Y+5	; 0x05
    b338:	81 71       	andi	r24, 0x11	; 17
    b33a:	09 f0       	breq	.+2      	; 0xb33e <f_open+0xa4>
    b33c:	5c c1       	rjmp	.+696    	; 0xb5f6 <f_open+0x35c>
    b33e:	72 fc       	sbrc	r7, 2
    b340:	51 c1       	rjmp	.+674    	; 0xb5e4 <f_open+0x34a>
    b342:	33 fe       	sbrs	r3, 3
    b344:	6b c0       	rjmp	.+214    	; 0xb41c <f_open+0x182>
    b346:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b348:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b34a:	ef a5       	ldd	r30, Y+47	; 0x2f
    b34c:	f8 a9       	ldd	r31, Y+48	; 0x30
    b34e:	b8 01       	movw	r22, r16
    b350:	80 81       	ld	r24, Z
    b352:	0e 94 7e 49 	call	0x92fc	; 0x92fc <ld_clust.isra.3>
    b356:	2b 01       	movw	r4, r22
    b358:	3c 01       	movw	r6, r24
    b35a:	0e 94 74 70 	call	0xe0e8	; 0xe0e8 <get_fattime>
    b35e:	ab 01       	movw	r20, r22
    b360:	bc 01       	movw	r22, r24
    b362:	c8 01       	movw	r24, r16
    b364:	0e 96       	adiw	r24, 0x0e	; 14
    b366:	0e 94 60 47 	call	0x8ec0	; 0x8ec0 <st_dword>
    b36a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b36c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b36e:	80 e2       	ldi	r24, 0x20	; 32
    b370:	83 87       	std	Z+11, r24	; 0x0b
    b372:	af a5       	ldd	r26, Y+47	; 0x2f
    b374:	b8 a9       	ldd	r27, Y+48	; 0x30
    b376:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b378:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b37a:	12 8e       	std	Z+26, r1	; 0x1a
    b37c:	13 8e       	std	Z+27, r1	; 0x1b
    b37e:	8c 91       	ld	r24, X
    b380:	83 30       	cpi	r24, 0x03	; 3
    b382:	11 f4       	brne	.+4      	; 0xb388 <f_open+0xee>
    b384:	14 8a       	std	Z+20, r1	; 0x14
    b386:	15 8a       	std	Z+21, r1	; 0x15
    b388:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b38a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b38c:	14 8e       	std	Z+28, r1	; 0x1c
    b38e:	15 8e       	std	Z+29, r1	; 0x1d
    b390:	16 8e       	std	Z+30, r1	; 0x1e
    b392:	17 8e       	std	Z+31, r1	; 0x1f
    b394:	81 e0       	ldi	r24, 0x01	; 1
    b396:	fd 01       	movw	r30, r26
    b398:	83 83       	std	Z+3, r24	; 0x03
    b39a:	41 14       	cp	r4, r1
    b39c:	51 04       	cpc	r5, r1
    b39e:	61 04       	cpc	r6, r1
    b3a0:	71 04       	cpc	r7, r1
    b3a2:	c9 f1       	breq	.+114    	; 0xb416 <f_open+0x17c>
    b3a4:	21 a9       	ldd	r18, Z+49	; 0x31
    b3a6:	32 a9       	ldd	r19, Z+50	; 0x32
    b3a8:	43 a9       	ldd	r20, Z+51	; 0x33
    b3aa:	54 a9       	ldd	r21, Z+52	; 0x34
    b3ac:	2b ab       	std	Y+51, r18	; 0x33
    b3ae:	3c ab       	std	Y+52, r19	; 0x34
    b3b0:	4d ab       	std	Y+53, r20	; 0x35
    b3b2:	5e ab       	std	Y+54, r21	; 0x36
    b3b4:	00 e0       	ldi	r16, 0x00	; 0
    b3b6:	10 e0       	ldi	r17, 0x00	; 0
    b3b8:	98 01       	movw	r18, r16
    b3ba:	b3 01       	movw	r22, r6
    b3bc:	a2 01       	movw	r20, r4
    b3be:	ce 01       	movw	r24, r28
    b3c0:	01 96       	adiw	r24, 0x01	; 1
    b3c2:	0e 94 76 51 	call	0xa2ec	; 0xa2ec <remove_chain>
    b3c6:	8c 01       	movw	r16, r24
    b3c8:	89 2b       	or	r24, r25
    b3ca:	09 f0       	breq	.+2      	; 0xb3ce <f_open+0x134>
    b3cc:	16 c1       	rjmp	.+556    	; 0xb5fa <f_open+0x360>
    b3ce:	4b a9       	ldd	r20, Y+51	; 0x33
    b3d0:	5c a9       	ldd	r21, Y+52	; 0x34
    b3d2:	6d a9       	ldd	r22, Y+53	; 0x35
    b3d4:	7e a9       	ldd	r23, Y+54	; 0x36
    b3d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    b3d8:	98 a9       	ldd	r25, Y+48	; 0x30
    b3da:	0e 94 0d 4b 	call	0x961a	; 0x961a <move_window>
    b3de:	8c 01       	movw	r16, r24
    b3e0:	ef a5       	ldd	r30, Y+47	; 0x2f
    b3e2:	f8 a9       	ldd	r31, Y+48	; 0x30
    b3e4:	21 e0       	ldi	r18, 0x01	; 1
    b3e6:	42 1a       	sub	r4, r18
    b3e8:	51 08       	sbc	r5, r1
    b3ea:	61 08       	sbc	r6, r1
    b3ec:	71 08       	sbc	r7, r1
    b3ee:	45 86       	std	Z+13, r4	; 0x0d
    b3f0:	56 86       	std	Z+14, r5	; 0x0e
    b3f2:	67 86       	std	Z+15, r6	; 0x0f
    b3f4:	70 8a       	std	Z+16, r7	; 0x10
    b3f6:	89 2b       	or	r24, r25
    b3f8:	61 f0       	breq	.+24     	; 0xb412 <f_open+0x178>
    b3fa:	ff c0       	rjmp	.+510    	; 0xb5fa <f_open+0x360>
    b3fc:	01 15       	cp	r16, r1
    b3fe:	11 05       	cpc	r17, r1
    b400:	09 f0       	breq	.+2      	; 0xb404 <f_open+0x16a>
    b402:	fb c0       	rjmp	.+502    	; 0xb5fa <f_open+0x360>
    b404:	8d 81       	ldd	r24, Y+5	; 0x05
    b406:	84 fd       	sbrc	r24, 4
    b408:	f3 c0       	rjmp	.+486    	; 0xb5f0 <f_open+0x356>
    b40a:	71 fe       	sbrs	r7, 1
    b40c:	02 c0       	rjmp	.+4      	; 0xb412 <f_open+0x178>
    b40e:	80 fd       	sbrc	r24, 0
    b410:	f2 c0       	rjmp	.+484    	; 0xb5f6 <f_open+0x35c>
    b412:	33 fe       	sbrs	r3, 3
    b414:	03 c0       	rjmp	.+6      	; 0xb41c <f_open+0x182>
    b416:	33 2d       	mov	r19, r3
    b418:	30 64       	ori	r19, 0x40	; 64
    b41a:	33 2e       	mov	r3, r19
    b41c:	0f a5       	ldd	r16, Y+47	; 0x2f
    b41e:	18 a9       	ldd	r17, Y+48	; 0x30
    b420:	f8 01       	movw	r30, r16
    b422:	81 a9       	ldd	r24, Z+49	; 0x31
    b424:	92 a9       	ldd	r25, Z+50	; 0x32
    b426:	a3 a9       	ldd	r26, Z+51	; 0x33
    b428:	b4 a9       	ldd	r27, Z+52	; 0x34
    b42a:	f7 01       	movw	r30, r14
    b42c:	84 8f       	std	Z+28, r24	; 0x1c
    b42e:	95 8f       	std	Z+29, r25	; 0x1d
    b430:	a6 8f       	std	Z+30, r26	; 0x1e
    b432:	b7 8f       	std	Z+31, r27	; 0x1f
    b434:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b436:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b438:	71 a2       	std	Z+33, r7	; 0x21
    b43a:	60 a2       	std	Z+32, r6	; 0x20
    b43c:	b3 01       	movw	r22, r6
    b43e:	f8 01       	movw	r30, r16
    b440:	80 81       	ld	r24, Z
    b442:	0e 94 7e 49 	call	0x92fc	; 0x92fc <ld_clust.isra.3>
    b446:	f7 01       	movw	r30, r14
    b448:	66 83       	std	Z+6, r22	; 0x06
    b44a:	77 83       	std	Z+7, r23	; 0x07
    b44c:	80 87       	std	Z+8, r24	; 0x08
    b44e:	91 87       	std	Z+9, r25	; 0x09
    b450:	c3 01       	movw	r24, r6
    b452:	4c 96       	adiw	r24, 0x1c	; 28
    b454:	0e 94 4b 47 	call	0x8e96	; 0x8e96 <ld_dword>
    b458:	f7 01       	movw	r30, r14
    b45a:	62 87       	std	Z+10, r22	; 0x0a
    b45c:	73 87       	std	Z+11, r23	; 0x0b
    b45e:	84 87       	std	Z+12, r24	; 0x0c
    b460:	95 87       	std	Z+13, r25	; 0x0d
    b462:	13 a2       	std	Z+35, r1	; 0x23
    b464:	12 a2       	std	Z+34, r1	; 0x22
    b466:	11 83       	std	Z+1, r17	; 0x01
    b468:	00 83       	st	Z, r16
    b46a:	f8 01       	movw	r30, r16
    b46c:	85 81       	ldd	r24, Z+5	; 0x05
    b46e:	96 81       	ldd	r25, Z+6	; 0x06
    b470:	f7 01       	movw	r30, r14
    b472:	93 83       	std	Z+3, r25	; 0x03
    b474:	82 83       	std	Z+2, r24	; 0x02
    b476:	36 86       	std	Z+14, r3	; 0x0e
    b478:	17 86       	std	Z+15, r1	; 0x0f
    b47a:	10 8e       	std	Z+24, r1	; 0x18
    b47c:	11 8e       	std	Z+25, r1	; 0x19
    b47e:	12 8e       	std	Z+26, r1	; 0x1a
    b480:	13 8e       	std	Z+27, r1	; 0x1b
    b482:	10 8a       	std	Z+16, r1	; 0x10
    b484:	11 8a       	std	Z+17, r1	; 0x11
    b486:	12 8a       	std	Z+18, r1	; 0x12
    b488:	13 8a       	std	Z+19, r1	; 0x13
    b48a:	67 01       	movw	r12, r14
    b48c:	f4 e2       	ldi	r31, 0x24	; 36
    b48e:	cf 0e       	add	r12, r31
    b490:	d1 1c       	adc	r13, r1
    b492:	40 e0       	ldi	r20, 0x00	; 0
    b494:	52 e0       	ldi	r21, 0x02	; 2
    b496:	60 e0       	ldi	r22, 0x00	; 0
    b498:	70 e0       	ldi	r23, 0x00	; 0
    b49a:	c6 01       	movw	r24, r12
    b49c:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <mem_set>
    b4a0:	35 fc       	sbrc	r3, 5
    b4a2:	03 c0       	rjmp	.+6      	; 0xb4aa <f_open+0x210>
    b4a4:	00 e0       	ldi	r16, 0x00	; 0
    b4a6:	10 e0       	ldi	r17, 0x00	; 0
    b4a8:	89 c0       	rjmp	.+274    	; 0xb5bc <f_open+0x322>
    b4aa:	f7 01       	movw	r30, r14
    b4ac:	62 84       	ldd	r6, Z+10	; 0x0a
    b4ae:	73 84       	ldd	r7, Z+11	; 0x0b
    b4b0:	84 84       	ldd	r8, Z+12	; 0x0c
    b4b2:	95 84       	ldd	r9, Z+13	; 0x0d
    b4b4:	61 14       	cp	r6, r1
    b4b6:	71 04       	cpc	r7, r1
    b4b8:	81 04       	cpc	r8, r1
    b4ba:	91 04       	cpc	r9, r1
    b4bc:	99 f3       	breq	.-26     	; 0xb4a4 <f_open+0x20a>
    b4be:	60 8a       	std	Z+16, r6	; 0x10
    b4c0:	71 8a       	std	Z+17, r7	; 0x11
    b4c2:	82 8a       	std	Z+18, r8	; 0x12
    b4c4:	93 8a       	std	Z+19, r9	; 0x13
    b4c6:	ef a5       	ldd	r30, Y+47	; 0x2f
    b4c8:	f8 a9       	ldd	r31, Y+48	; 0x30
    b4ca:	21 84       	ldd	r2, Z+9	; 0x09
    b4cc:	32 84       	ldd	r3, Z+10	; 0x0a
    b4ce:	c1 01       	movw	r24, r2
    b4d0:	a0 e0       	ldi	r26, 0x00	; 0
    b4d2:	b0 e0       	ldi	r27, 0x00	; 0
    b4d4:	1c 01       	movw	r2, r24
    b4d6:	2d 01       	movw	r4, r26
    b4d8:	59 e0       	ldi	r21, 0x09	; 9
    b4da:	22 0c       	add	r2, r2
    b4dc:	33 1c       	adc	r3, r3
    b4de:	44 1c       	adc	r4, r4
    b4e0:	55 1c       	adc	r5, r5
    b4e2:	5a 95       	dec	r21
    b4e4:	d1 f7       	brne	.-12     	; 0xb4da <f_open+0x240>
    b4e6:	f7 01       	movw	r30, r14
    b4e8:	46 81       	ldd	r20, Z+6	; 0x06
    b4ea:	57 81       	ldd	r21, Z+7	; 0x07
    b4ec:	60 85       	ldd	r22, Z+8	; 0x08
    b4ee:	71 85       	ldd	r23, Z+9	; 0x09
    b4f0:	26 14       	cp	r2, r6
    b4f2:	37 04       	cpc	r3, r7
    b4f4:	48 04       	cpc	r4, r8
    b4f6:	59 04       	cpc	r5, r9
    b4f8:	f0 f4       	brcc	.+60     	; 0xb536 <f_open+0x29c>
    b4fa:	f7 01       	movw	r30, r14
    b4fc:	80 81       	ld	r24, Z
    b4fe:	91 81       	ldd	r25, Z+1	; 0x01
    b500:	0e 94 db 4e 	call	0x9db6	; 0x9db6 <get_fat.isra.9>
    b504:	ab 01       	movw	r20, r22
    b506:	bc 01       	movw	r22, r24
    b508:	d4 01       	movw	r26, r8
    b50a:	c3 01       	movw	r24, r6
    b50c:	82 19       	sub	r24, r2
    b50e:	93 09       	sbc	r25, r3
    b510:	a4 09       	sbc	r26, r4
    b512:	b5 09       	sbc	r27, r5
    b514:	3c 01       	movw	r6, r24
    b516:	4d 01       	movw	r8, r26
    b518:	42 30       	cpi	r20, 0x02	; 2
    b51a:	51 05       	cpc	r21, r1
    b51c:	61 05       	cpc	r22, r1
    b51e:	71 05       	cpc	r23, r1
    b520:	08 f4       	brcc	.+2      	; 0xb524 <f_open+0x28a>
    b522:	63 c0       	rjmp	.+198    	; 0xb5ea <f_open+0x350>
    b524:	4f 3f       	cpi	r20, 0xFF	; 255
    b526:	ff ef       	ldi	r31, 0xFF	; 255
    b528:	5f 07       	cpc	r21, r31
    b52a:	6f 07       	cpc	r22, r31
    b52c:	7f 07       	cpc	r23, r31
    b52e:	01 f7       	brne	.-64     	; 0xb4f0 <f_open+0x256>
    b530:	01 e0       	ldi	r16, 0x01	; 1
    b532:	10 e0       	ldi	r17, 0x00	; 0
    b534:	02 c0       	rjmp	.+4      	; 0xb53a <f_open+0x2a0>
    b536:	00 e0       	ldi	r16, 0x00	; 0
    b538:	10 e0       	ldi	r17, 0x00	; 0
    b53a:	f7 01       	movw	r30, r14
    b53c:	44 8b       	std	Z+20, r20	; 0x14
    b53e:	55 8b       	std	Z+21, r21	; 0x15
    b540:	66 8b       	std	Z+22, r22	; 0x16
    b542:	77 8b       	std	Z+23, r23	; 0x17
    b544:	01 15       	cp	r16, r1
    b546:	11 05       	cpc	r17, r1
    b548:	c9 f5       	brne	.+114    	; 0xb5bc <f_open+0x322>
    b54a:	d4 01       	movw	r26, r8
    b54c:	c3 01       	movw	r24, r6
    b54e:	91 70       	andi	r25, 0x01	; 1
    b550:	aa 27       	eor	r26, r26
    b552:	bb 27       	eor	r27, r27
    b554:	89 2b       	or	r24, r25
    b556:	8a 2b       	or	r24, r26
    b558:	8b 2b       	or	r24, r27
    b55a:	09 f4       	brne	.+2      	; 0xb55e <f_open+0x2c4>
    b55c:	a3 cf       	rjmp	.-186    	; 0xb4a4 <f_open+0x20a>
    b55e:	4f a4       	ldd	r4, Y+47	; 0x2f
    b560:	58 a8       	ldd	r5, Y+48	; 0x30
    b562:	c2 01       	movw	r24, r4
    b564:	0e 94 7e 47 	call	0x8efc	; 0x8efc <clst2sect>
    b568:	61 15       	cp	r22, r1
    b56a:	71 05       	cpc	r23, r1
    b56c:	81 05       	cpc	r24, r1
    b56e:	91 05       	cpc	r25, r1
    b570:	19 f1       	breq	.+70     	; 0xb5b8 <f_open+0x31e>
    b572:	94 01       	movw	r18, r8
    b574:	83 01       	movw	r16, r6
    b576:	49 e0       	ldi	r20, 0x09	; 9
    b578:	36 95       	lsr	r19
    b57a:	27 95       	ror	r18
    b57c:	17 95       	ror	r17
    b57e:	07 95       	ror	r16
    b580:	4a 95       	dec	r20
    b582:	d1 f7       	brne	.-12     	; 0xb578 <f_open+0x2de>
    b584:	a9 01       	movw	r20, r18
    b586:	98 01       	movw	r18, r16
    b588:	26 0f       	add	r18, r22
    b58a:	37 1f       	adc	r19, r23
    b58c:	48 1f       	adc	r20, r24
    b58e:	59 1f       	adc	r21, r25
    b590:	f7 01       	movw	r30, r14
    b592:	20 8f       	std	Z+24, r18	; 0x18
    b594:	31 8f       	std	Z+25, r19	; 0x19
    b596:	42 8f       	std	Z+26, r20	; 0x1a
    b598:	53 8f       	std	Z+27, r21	; 0x1b
    b59a:	01 e0       	ldi	r16, 0x01	; 1
    b59c:	10 e0       	ldi	r17, 0x00	; 0
    b59e:	b6 01       	movw	r22, r12
    b5a0:	f2 01       	movw	r30, r4
    b5a2:	81 81       	ldd	r24, Z+1	; 0x01
    b5a4:	0e 94 3f 69 	call	0xd27e	; 0xd27e <disk_read>
    b5a8:	31 e0       	ldi	r19, 0x01	; 1
    b5aa:	20 e0       	ldi	r18, 0x00	; 0
    b5ac:	89 2b       	or	r24, r25
    b5ae:	09 f4       	brne	.+2      	; 0xb5b2 <f_open+0x318>
    b5b0:	30 e0       	ldi	r19, 0x00	; 0
    b5b2:	03 2f       	mov	r16, r19
    b5b4:	12 2f       	mov	r17, r18
    b5b6:	02 c0       	rjmp	.+4      	; 0xb5bc <f_open+0x322>
    b5b8:	02 e0       	ldi	r16, 0x02	; 2
    b5ba:	10 e0       	ldi	r17, 0x00	; 0
    b5bc:	c5 01       	movw	r24, r10
    b5be:	0e 94 86 68 	call	0xd10c	; 0xd10c <ff_memfree>
    b5c2:	01 15       	cp	r16, r1
    b5c4:	11 05       	cpc	r17, r1
    b5c6:	59 f0       	breq	.+22     	; 0xb5de <f_open+0x344>
    b5c8:	01 c0       	rjmp	.+2      	; 0xb5cc <f_open+0x332>
    b5ca:	8c 01       	movw	r16, r24
    b5cc:	f7 01       	movw	r30, r14
    b5ce:	11 82       	std	Z+1, r1	; 0x01
    b5d0:	10 82       	st	Z, r1
    b5d2:	c8 01       	movw	r24, r16
    b5d4:	16 c0       	rjmp	.+44     	; 0xb602 <f_open+0x368>
    b5d6:	89 e0       	ldi	r24, 0x09	; 9
    b5d8:	03 c0       	rjmp	.+6      	; 0xb5e0 <f_open+0x346>
    b5da:	81 e1       	ldi	r24, 0x11	; 17
    b5dc:	01 c0       	rjmp	.+2      	; 0xb5e0 <f_open+0x346>
    b5de:	80 e0       	ldi	r24, 0x00	; 0
    b5e0:	90 e0       	ldi	r25, 0x00	; 0
    b5e2:	0f c0       	rjmp	.+30     	; 0xb602 <f_open+0x368>
    b5e4:	08 e0       	ldi	r16, 0x08	; 8
    b5e6:	10 e0       	ldi	r17, 0x00	; 0
    b5e8:	08 c0       	rjmp	.+16     	; 0xb5fa <f_open+0x360>
    b5ea:	02 e0       	ldi	r16, 0x02	; 2
    b5ec:	10 e0       	ldi	r17, 0x00	; 0
    b5ee:	a5 cf       	rjmp	.-182    	; 0xb53a <f_open+0x2a0>
    b5f0:	04 e0       	ldi	r16, 0x04	; 4
    b5f2:	10 e0       	ldi	r17, 0x00	; 0
    b5f4:	02 c0       	rjmp	.+4      	; 0xb5fa <f_open+0x360>
    b5f6:	07 e0       	ldi	r16, 0x07	; 7
    b5f8:	10 e0       	ldi	r17, 0x00	; 0
    b5fa:	c5 01       	movw	r24, r10
    b5fc:	0e 94 86 68 	call	0xd10c	; 0xd10c <ff_memfree>
    b600:	e5 cf       	rjmp	.-54     	; 0xb5cc <f_open+0x332>
    b602:	e6 96       	adiw	r28, 0x36	; 54
    b604:	e2 e1       	ldi	r30, 0x12	; 18
    b606:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

0000b60a <f_read>:
    b60a:	a6 e0       	ldi	r26, 0x06	; 6
    b60c:	b0 e0       	ldi	r27, 0x00	; 0
    b60e:	eb e0       	ldi	r30, 0x0B	; 11
    b610:	fb e5       	ldi	r31, 0x5B	; 91
    b612:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
    b616:	7c 01       	movw	r14, r24
    b618:	4b 01       	movw	r8, r22
    b61a:	5a 01       	movw	r10, r20
    b61c:	3e 83       	std	Y+6, r19	; 0x06
    b61e:	2d 83       	std	Y+5, r18	; 0x05
    b620:	f9 01       	movw	r30, r18
    b622:	11 82       	std	Z+1, r1	; 0x01
    b624:	10 82       	st	Z, r1
    b626:	be 01       	movw	r22, r28
    b628:	6f 5f       	subi	r22, 0xFF	; 255
    b62a:	7f 4f       	sbci	r23, 0xFF	; 255
    b62c:	0e 94 1d 48 	call	0x903a	; 0x903a <validate>
    b630:	00 97       	sbiw	r24, 0x00	; 0
    b632:	09 f0       	breq	.+2      	; 0xb636 <f_read+0x2c>
    b634:	31 c1       	rjmp	.+610    	; 0xb898 <f_read+0x28e>
    b636:	f7 01       	movw	r30, r14
    b638:	87 85       	ldd	r24, Z+15	; 0x0f
    b63a:	90 e0       	ldi	r25, 0x00	; 0
    b63c:	00 97       	sbiw	r24, 0x00	; 0
    b63e:	09 f0       	breq	.+2      	; 0xb642 <f_read+0x38>
    b640:	2b c1       	rjmp	.+598    	; 0xb898 <f_read+0x28e>
    b642:	86 85       	ldd	r24, Z+14	; 0x0e
    b644:	80 ff       	sbrs	r24, 0
    b646:	26 c1       	rjmp	.+588    	; 0xb894 <f_read+0x28a>
    b648:	82 85       	ldd	r24, Z+10	; 0x0a
    b64a:	93 85       	ldd	r25, Z+11	; 0x0b
    b64c:	a4 85       	ldd	r26, Z+12	; 0x0c
    b64e:	b5 85       	ldd	r27, Z+13	; 0x0d
    b650:	40 89       	ldd	r20, Z+16	; 0x10
    b652:	51 89       	ldd	r21, Z+17	; 0x11
    b654:	62 89       	ldd	r22, Z+18	; 0x12
    b656:	73 89       	ldd	r23, Z+19	; 0x13
    b658:	84 1b       	sub	r24, r20
    b65a:	95 0b       	sbc	r25, r21
    b65c:	a6 0b       	sbc	r26, r22
    b65e:	b7 0b       	sbc	r27, r23
    b660:	a5 01       	movw	r20, r10
    b662:	60 e0       	ldi	r22, 0x00	; 0
    b664:	70 e0       	ldi	r23, 0x00	; 0
    b666:	84 17       	cp	r24, r20
    b668:	95 07       	cpc	r25, r21
    b66a:	a6 07       	cpc	r26, r22
    b66c:	b7 07       	cpc	r27, r23
    b66e:	08 f4       	brcc	.+2      	; 0xb672 <f_read+0x68>
    b670:	5c 01       	movw	r10, r24
    b672:	17 01       	movw	r2, r14
    b674:	f4 e2       	ldi	r31, 0x24	; 36
    b676:	2f 0e       	add	r2, r31
    b678:	31 1c       	adc	r3, r1
    b67a:	a1 14       	cp	r10, r1
    b67c:	b1 04       	cpc	r11, r1
    b67e:	09 f4       	brne	.+2      	; 0xb682 <f_read+0x78>
    b680:	07 c1       	rjmp	.+526    	; 0xb890 <f_read+0x286>
    b682:	f7 01       	movw	r30, r14
    b684:	40 89       	ldd	r20, Z+16	; 0x10
    b686:	51 89       	ldd	r21, Z+17	; 0x11
    b688:	62 89       	ldd	r22, Z+18	; 0x12
    b68a:	73 89       	ldd	r23, Z+19	; 0x13
    b68c:	db 01       	movw	r26, r22
    b68e:	ca 01       	movw	r24, r20
    b690:	91 70       	andi	r25, 0x01	; 1
    b692:	aa 27       	eor	r26, r26
    b694:	bb 27       	eor	r27, r27
    b696:	89 2b       	or	r24, r25
    b698:	8a 2b       	or	r24, r26
    b69a:	8b 2b       	or	r24, r27
    b69c:	09 f0       	breq	.+2      	; 0xb6a0 <f_read+0x96>
    b69e:	cb c0       	rjmp	.+406    	; 0xb836 <f_read+0x22c>
    b6a0:	e9 81       	ldd	r30, Y+1	; 0x01
    b6a2:	fa 81       	ldd	r31, Y+2	; 0x02
    b6a4:	01 85       	ldd	r16, Z+9	; 0x09
    b6a6:	12 85       	ldd	r17, Z+10	; 0x0a
    b6a8:	01 50       	subi	r16, 0x01	; 1
    b6aa:	11 09       	sbc	r17, r1
    b6ac:	db 01       	movw	r26, r22
    b6ae:	ca 01       	movw	r24, r20
    b6b0:	e9 e0       	ldi	r30, 0x09	; 9
    b6b2:	b6 95       	lsr	r27
    b6b4:	a7 95       	ror	r26
    b6b6:	97 95       	ror	r25
    b6b8:	87 95       	ror	r24
    b6ba:	ea 95       	dec	r30
    b6bc:	d1 f7       	brne	.-12     	; 0xb6b2 <f_read+0xa8>
    b6be:	08 23       	and	r16, r24
    b6c0:	19 23       	and	r17, r25
    b6c2:	01 15       	cp	r16, r1
    b6c4:	11 05       	cpc	r17, r1
    b6c6:	91 f5       	brne	.+100    	; 0xb72c <f_read+0x122>
    b6c8:	f7 01       	movw	r30, r14
    b6ca:	41 15       	cp	r20, r1
    b6cc:	51 05       	cpc	r21, r1
    b6ce:	61 05       	cpc	r22, r1
    b6d0:	71 05       	cpc	r23, r1
    b6d2:	29 f4       	brne	.+10     	; 0xb6de <f_read+0xd4>
    b6d4:	66 81       	ldd	r22, Z+6	; 0x06
    b6d6:	77 81       	ldd	r23, Z+7	; 0x07
    b6d8:	80 85       	ldd	r24, Z+8	; 0x08
    b6da:	91 85       	ldd	r25, Z+9	; 0x09
    b6dc:	11 c0       	rjmp	.+34     	; 0xb700 <f_read+0xf6>
    b6de:	82 a1       	ldd	r24, Z+34	; 0x22
    b6e0:	93 a1       	ldd	r25, Z+35	; 0x23
    b6e2:	89 2b       	or	r24, r25
    b6e4:	21 f0       	breq	.+8      	; 0xb6ee <f_read+0xe4>
    b6e6:	c7 01       	movw	r24, r14
    b6e8:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <clmt_clust>
    b6ec:	09 c0       	rjmp	.+18     	; 0xb700 <f_read+0xf6>
    b6ee:	f7 01       	movw	r30, r14
    b6f0:	44 89       	ldd	r20, Z+20	; 0x14
    b6f2:	55 89       	ldd	r21, Z+21	; 0x15
    b6f4:	66 89       	ldd	r22, Z+22	; 0x16
    b6f6:	77 89       	ldd	r23, Z+23	; 0x17
    b6f8:	80 81       	ld	r24, Z
    b6fa:	91 81       	ldd	r25, Z+1	; 0x01
    b6fc:	0e 94 db 4e 	call	0x9db6	; 0x9db6 <get_fat.isra.9>
    b700:	62 30       	cpi	r22, 0x02	; 2
    b702:	71 05       	cpc	r23, r1
    b704:	81 05       	cpc	r24, r1
    b706:	91 05       	cpc	r25, r1
    b708:	10 f4       	brcc	.+4      	; 0xb70e <f_read+0x104>
    b70a:	82 e0       	ldi	r24, 0x02	; 2
    b70c:	07 c0       	rjmp	.+14     	; 0xb71c <f_read+0x112>
    b70e:	6f 3f       	cpi	r22, 0xFF	; 255
    b710:	ff ef       	ldi	r31, 0xFF	; 255
    b712:	7f 07       	cpc	r23, r31
    b714:	8f 07       	cpc	r24, r31
    b716:	9f 07       	cpc	r25, r31
    b718:	21 f4       	brne	.+8      	; 0xb722 <f_read+0x118>
    b71a:	81 e0       	ldi	r24, 0x01	; 1
    b71c:	f7 01       	movw	r30, r14
    b71e:	87 87       	std	Z+15, r24	; 0x0f
    b720:	ba c0       	rjmp	.+372    	; 0xb896 <f_read+0x28c>
    b722:	f7 01       	movw	r30, r14
    b724:	64 8b       	std	Z+20, r22	; 0x14
    b726:	75 8b       	std	Z+21, r23	; 0x15
    b728:	86 8b       	std	Z+22, r24	; 0x16
    b72a:	97 8b       	std	Z+23, r25	; 0x17
    b72c:	89 81       	ldd	r24, Y+1	; 0x01
    b72e:	9a 81       	ldd	r25, Y+2	; 0x02
    b730:	9c 83       	std	Y+4, r25	; 0x04
    b732:	8b 83       	std	Y+3, r24	; 0x03
    b734:	f7 01       	movw	r30, r14
    b736:	44 89       	ldd	r20, Z+20	; 0x14
    b738:	55 89       	ldd	r21, Z+21	; 0x15
    b73a:	66 89       	ldd	r22, Z+22	; 0x16
    b73c:	77 89       	ldd	r23, Z+23	; 0x17
    b73e:	0e 94 7e 47 	call	0x8efc	; 0x8efc <clst2sect>
    b742:	61 15       	cp	r22, r1
    b744:	71 05       	cpc	r23, r1
    b746:	81 05       	cpc	r24, r1
    b748:	91 05       	cpc	r25, r1
    b74a:	f9 f2       	breq	.-66     	; 0xb70a <f_read+0x100>
    b74c:	2b 01       	movw	r4, r22
    b74e:	3c 01       	movw	r6, r24
    b750:	40 0e       	add	r4, r16
    b752:	51 1e       	adc	r5, r17
    b754:	61 1c       	adc	r6, r1
    b756:	71 1c       	adc	r7, r1
    b758:	65 01       	movw	r12, r10
    b75a:	cd 2c       	mov	r12, r13
    b75c:	dd 24       	eor	r13, r13
    b75e:	c6 94       	lsr	r12
    b760:	c1 14       	cp	r12, r1
    b762:	d1 04       	cpc	r13, r1
    b764:	d1 f1       	breq	.+116    	; 0xb7da <f_read+0x1d0>
    b766:	eb 81       	ldd	r30, Y+3	; 0x03
    b768:	fc 81       	ldd	r31, Y+4	; 0x04
    b76a:	81 85       	ldd	r24, Z+9	; 0x09
    b76c:	92 85       	ldd	r25, Z+10	; 0x0a
    b76e:	98 01       	movw	r18, r16
    b770:	2c 0d       	add	r18, r12
    b772:	3d 1d       	adc	r19, r13
    b774:	82 17       	cp	r24, r18
    b776:	93 07       	cpc	r25, r19
    b778:	18 f4       	brcc	.+6      	; 0xb780 <f_read+0x176>
    b77a:	6c 01       	movw	r12, r24
    b77c:	c0 1a       	sub	r12, r16
    b77e:	d1 0a       	sbc	r13, r17
    b780:	86 01       	movw	r16, r12
    b782:	a3 01       	movw	r20, r6
    b784:	92 01       	movw	r18, r4
    b786:	b4 01       	movw	r22, r8
    b788:	eb 81       	ldd	r30, Y+3	; 0x03
    b78a:	fc 81       	ldd	r31, Y+4	; 0x04
    b78c:	81 81       	ldd	r24, Z+1	; 0x01
    b78e:	0e 94 3f 69 	call	0xd27e	; 0xd27e <disk_read>
    b792:	89 2b       	or	r24, r25
    b794:	11 f6       	brne	.-124    	; 0xb71a <f_read+0x110>
    b796:	f7 01       	movw	r30, r14
    b798:	86 85       	ldd	r24, Z+14	; 0x0e
    b79a:	87 ff       	sbrs	r24, 7
    b79c:	1a c0       	rjmp	.+52     	; 0xb7d2 <f_read+0x1c8>
    b79e:	80 8d       	ldd	r24, Z+24	; 0x18
    b7a0:	91 8d       	ldd	r25, Z+25	; 0x19
    b7a2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b7a4:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b7a6:	84 19       	sub	r24, r4
    b7a8:	95 09       	sbc	r25, r5
    b7aa:	a6 09       	sbc	r26, r6
    b7ac:	b7 09       	sbc	r27, r7
    b7ae:	a6 01       	movw	r20, r12
    b7b0:	60 e0       	ldi	r22, 0x00	; 0
    b7b2:	70 e0       	ldi	r23, 0x00	; 0
    b7b4:	84 17       	cp	r24, r20
    b7b6:	95 07       	cpc	r25, r21
    b7b8:	a6 07       	cpc	r26, r22
    b7ba:	b7 07       	cpc	r27, r23
    b7bc:	50 f4       	brcc	.+20     	; 0xb7d2 <f_read+0x1c8>
    b7be:	98 2f       	mov	r25, r24
    b7c0:	88 27       	eor	r24, r24
    b7c2:	99 0f       	add	r25, r25
    b7c4:	40 e0       	ldi	r20, 0x00	; 0
    b7c6:	52 e0       	ldi	r21, 0x02	; 2
    b7c8:	b1 01       	movw	r22, r2
    b7ca:	88 0d       	add	r24, r8
    b7cc:	99 1d       	adc	r25, r9
    b7ce:	0e 94 73 49 	call	0x92e6	; 0x92e6 <mem_cpy.part.0>
    b7d2:	dc 2c       	mov	r13, r12
    b7d4:	cc 24       	eor	r12, r12
    b7d6:	dd 0c       	add	r13, r13
    b7d8:	41 c0       	rjmp	.+130    	; 0xb85c <f_read+0x252>
    b7da:	f7 01       	movw	r30, r14
    b7dc:	20 8d       	ldd	r18, Z+24	; 0x18
    b7de:	31 8d       	ldd	r19, Z+25	; 0x19
    b7e0:	42 8d       	ldd	r20, Z+26	; 0x1a
    b7e2:	53 8d       	ldd	r21, Z+27	; 0x1b
    b7e4:	42 16       	cp	r4, r18
    b7e6:	53 06       	cpc	r5, r19
    b7e8:	64 06       	cpc	r6, r20
    b7ea:	75 06       	cpc	r7, r21
    b7ec:	f9 f0       	breq	.+62     	; 0xb82c <f_read+0x222>
    b7ee:	86 85       	ldd	r24, Z+14	; 0x0e
    b7f0:	87 ff       	sbrs	r24, 7
    b7f2:	0f c0       	rjmp	.+30     	; 0xb812 <f_read+0x208>
    b7f4:	01 e0       	ldi	r16, 0x01	; 1
    b7f6:	10 e0       	ldi	r17, 0x00	; 0
    b7f8:	b1 01       	movw	r22, r2
    b7fa:	eb 81       	ldd	r30, Y+3	; 0x03
    b7fc:	fc 81       	ldd	r31, Y+4	; 0x04
    b7fe:	81 81       	ldd	r24, Z+1	; 0x01
    b800:	0e 94 4f 69 	call	0xd29e	; 0xd29e <disk_write>
    b804:	89 2b       	or	r24, r25
    b806:	09 f0       	breq	.+2      	; 0xb80a <f_read+0x200>
    b808:	88 cf       	rjmp	.-240    	; 0xb71a <f_read+0x110>
    b80a:	f7 01       	movw	r30, r14
    b80c:	86 85       	ldd	r24, Z+14	; 0x0e
    b80e:	8f 77       	andi	r24, 0x7F	; 127
    b810:	86 87       	std	Z+14, r24	; 0x0e
    b812:	e9 81       	ldd	r30, Y+1	; 0x01
    b814:	fa 81       	ldd	r31, Y+2	; 0x02
    b816:	01 e0       	ldi	r16, 0x01	; 1
    b818:	10 e0       	ldi	r17, 0x00	; 0
    b81a:	a3 01       	movw	r20, r6
    b81c:	92 01       	movw	r18, r4
    b81e:	b1 01       	movw	r22, r2
    b820:	81 81       	ldd	r24, Z+1	; 0x01
    b822:	0e 94 3f 69 	call	0xd27e	; 0xd27e <disk_read>
    b826:	89 2b       	or	r24, r25
    b828:	09 f0       	breq	.+2      	; 0xb82c <f_read+0x222>
    b82a:	77 cf       	rjmp	.-274    	; 0xb71a <f_read+0x110>
    b82c:	f7 01       	movw	r30, r14
    b82e:	40 8e       	std	Z+24, r4	; 0x18
    b830:	51 8e       	std	Z+25, r5	; 0x19
    b832:	62 8e       	std	Z+26, r6	; 0x1a
    b834:	73 8e       	std	Z+27, r7	; 0x1b
    b836:	f7 01       	movw	r30, r14
    b838:	60 89       	ldd	r22, Z+16	; 0x10
    b83a:	71 89       	ldd	r23, Z+17	; 0x11
    b83c:	71 70       	andi	r23, 0x01	; 1
    b83e:	80 e0       	ldi	r24, 0x00	; 0
    b840:	92 e0       	ldi	r25, 0x02	; 2
    b842:	86 1b       	sub	r24, r22
    b844:	97 0b       	sbc	r25, r23
    b846:	65 01       	movw	r12, r10
    b848:	8a 15       	cp	r24, r10
    b84a:	9b 05       	cpc	r25, r11
    b84c:	08 f4       	brcc	.+2      	; 0xb850 <f_read+0x246>
    b84e:	6c 01       	movw	r12, r24
    b850:	62 0d       	add	r22, r2
    b852:	73 1d       	adc	r23, r3
    b854:	a6 01       	movw	r20, r12
    b856:	c4 01       	movw	r24, r8
    b858:	0e 94 73 49 	call	0x92e6	; 0x92e6 <mem_cpy.part.0>
    b85c:	ac 18       	sub	r10, r12
    b85e:	bd 08       	sbc	r11, r13
    b860:	ed 81       	ldd	r30, Y+5	; 0x05
    b862:	fe 81       	ldd	r31, Y+6	; 0x06
    b864:	80 81       	ld	r24, Z
    b866:	91 81       	ldd	r25, Z+1	; 0x01
    b868:	8c 0d       	add	r24, r12
    b86a:	9d 1d       	adc	r25, r13
    b86c:	91 83       	std	Z+1, r25	; 0x01
    b86e:	80 83       	st	Z, r24
    b870:	8c 0c       	add	r8, r12
    b872:	9d 1c       	adc	r9, r13
    b874:	f7 01       	movw	r30, r14
    b876:	80 89       	ldd	r24, Z+16	; 0x10
    b878:	91 89       	ldd	r25, Z+17	; 0x11
    b87a:	a2 89       	ldd	r26, Z+18	; 0x12
    b87c:	b3 89       	ldd	r27, Z+19	; 0x13
    b87e:	8c 0d       	add	r24, r12
    b880:	9d 1d       	adc	r25, r13
    b882:	a1 1d       	adc	r26, r1
    b884:	b1 1d       	adc	r27, r1
    b886:	80 8b       	std	Z+16, r24	; 0x10
    b888:	91 8b       	std	Z+17, r25	; 0x11
    b88a:	a2 8b       	std	Z+18, r26	; 0x12
    b88c:	b3 8b       	std	Z+19, r27	; 0x13
    b88e:	f5 ce       	rjmp	.-534    	; 0xb67a <f_read+0x70>
    b890:	80 e0       	ldi	r24, 0x00	; 0
    b892:	01 c0       	rjmp	.+2      	; 0xb896 <f_read+0x28c>
    b894:	87 e0       	ldi	r24, 0x07	; 7
    b896:	90 e0       	ldi	r25, 0x00	; 0
    b898:	26 96       	adiw	r28, 0x06	; 6
    b89a:	e2 e1       	ldi	r30, 0x12	; 18
    b89c:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

0000b8a0 <f_write>:
    b8a0:	a8 e0       	ldi	r26, 0x08	; 8
    b8a2:	b0 e0       	ldi	r27, 0x00	; 0
    b8a4:	e6 e5       	ldi	r30, 0x56	; 86
    b8a6:	fc e5       	ldi	r31, 0x5C	; 92
    b8a8:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
    b8ac:	7c 01       	movw	r14, r24
    b8ae:	3b 01       	movw	r6, r22
    b8b0:	5a 01       	movw	r10, r20
    b8b2:	38 87       	std	Y+8, r19	; 0x08
    b8b4:	2f 83       	std	Y+7, r18	; 0x07
    b8b6:	f9 01       	movw	r30, r18
    b8b8:	11 82       	std	Z+1, r1	; 0x01
    b8ba:	10 82       	st	Z, r1
    b8bc:	be 01       	movw	r22, r28
    b8be:	6f 5f       	subi	r22, 0xFF	; 255
    b8c0:	7f 4f       	sbci	r23, 0xFF	; 255
    b8c2:	0e 94 1d 48 	call	0x903a	; 0x903a <validate>
    b8c6:	00 97       	sbiw	r24, 0x00	; 0
    b8c8:	09 f0       	breq	.+2      	; 0xb8cc <f_write+0x2c>
    b8ca:	7d c1       	rjmp	.+762    	; 0xbbc6 <f_write+0x326>
    b8cc:	f7 01       	movw	r30, r14
    b8ce:	87 85       	ldd	r24, Z+15	; 0x0f
    b8d0:	90 e0       	ldi	r25, 0x00	; 0
    b8d2:	00 97       	sbiw	r24, 0x00	; 0
    b8d4:	09 f0       	breq	.+2      	; 0xb8d8 <f_write+0x38>
    b8d6:	77 c1       	rjmp	.+750    	; 0xbbc6 <f_write+0x326>
    b8d8:	86 85       	ldd	r24, Z+14	; 0x0e
    b8da:	81 ff       	sbrs	r24, 1
    b8dc:	72 c1       	rjmp	.+740    	; 0xbbc2 <f_write+0x322>
    b8de:	80 89       	ldd	r24, Z+16	; 0x10
    b8e0:	91 89       	ldd	r25, Z+17	; 0x11
    b8e2:	a2 89       	ldd	r26, Z+18	; 0x12
    b8e4:	b3 89       	ldd	r27, Z+19	; 0x13
    b8e6:	ac 01       	movw	r20, r24
    b8e8:	bd 01       	movw	r22, r26
    b8ea:	4a 0d       	add	r20, r10
    b8ec:	5b 1d       	adc	r21, r11
    b8ee:	61 1d       	adc	r22, r1
    b8f0:	71 1d       	adc	r23, r1
    b8f2:	48 17       	cp	r20, r24
    b8f4:	59 07       	cpc	r21, r25
    b8f6:	6a 07       	cpc	r22, r26
    b8f8:	7b 07       	cpc	r23, r27
    b8fa:	18 f4       	brcc	.+6      	; 0xb902 <f_write+0x62>
    b8fc:	5c 01       	movw	r10, r24
    b8fe:	a0 94       	com	r10
    b900:	b0 94       	com	r11
    b902:	97 01       	movw	r18, r14
    b904:	2c 5d       	subi	r18, 0xDC	; 220
    b906:	3f 4f       	sbci	r19, 0xFF	; 255
    b908:	3e 83       	std	Y+6, r19	; 0x06
    b90a:	2d 83       	std	Y+5, r18	; 0x05
    b90c:	a1 14       	cp	r10, r1
    b90e:	b1 04       	cpc	r11, r1
    b910:	09 f4       	brne	.+2      	; 0xb914 <f_write+0x74>
    b912:	4d c0       	rjmp	.+154    	; 0xb9ae <f_write+0x10e>
    b914:	f7 01       	movw	r30, r14
    b916:	40 89       	ldd	r20, Z+16	; 0x10
    b918:	51 89       	ldd	r21, Z+17	; 0x11
    b91a:	62 89       	ldd	r22, Z+18	; 0x12
    b91c:	73 89       	ldd	r23, Z+19	; 0x13
    b91e:	db 01       	movw	r26, r22
    b920:	ca 01       	movw	r24, r20
    b922:	91 70       	andi	r25, 0x01	; 1
    b924:	aa 27       	eor	r26, r26
    b926:	bb 27       	eor	r27, r27
    b928:	89 2b       	or	r24, r25
    b92a:	8a 2b       	or	r24, r26
    b92c:	8b 2b       	or	r24, r27
    b92e:	09 f0       	breq	.+2      	; 0xb932 <f_write+0x92>
    b930:	05 c1       	rjmp	.+522    	; 0xbb3c <f_write+0x29c>
    b932:	e9 81       	ldd	r30, Y+1	; 0x01
    b934:	fa 81       	ldd	r31, Y+2	; 0x02
    b936:	81 84       	ldd	r8, Z+9	; 0x09
    b938:	92 84       	ldd	r9, Z+10	; 0x0a
    b93a:	f1 e0       	ldi	r31, 0x01	; 1
    b93c:	8f 1a       	sub	r8, r31
    b93e:	91 08       	sbc	r9, r1
    b940:	db 01       	movw	r26, r22
    b942:	ca 01       	movw	r24, r20
    b944:	e9 e0       	ldi	r30, 0x09	; 9
    b946:	b6 95       	lsr	r27
    b948:	a7 95       	ror	r26
    b94a:	97 95       	ror	r25
    b94c:	87 95       	ror	r24
    b94e:	ea 95       	dec	r30
    b950:	d1 f7       	brne	.-12     	; 0xb946 <f_write+0xa6>
    b952:	88 22       	and	r8, r24
    b954:	99 22       	and	r9, r25
    b956:	81 14       	cp	r8, r1
    b958:	91 04       	cpc	r9, r1
    b95a:	09 f0       	breq	.+2      	; 0xb95e <f_write+0xbe>
    b95c:	51 c0       	rjmp	.+162    	; 0xba00 <f_write+0x160>
    b95e:	f7 01       	movw	r30, r14
    b960:	41 15       	cp	r20, r1
    b962:	51 05       	cpc	r21, r1
    b964:	61 05       	cpc	r22, r1
    b966:	71 05       	cpc	r23, r1
    b968:	69 f4       	brne	.+26     	; 0xb984 <f_write+0xe4>
    b96a:	66 81       	ldd	r22, Z+6	; 0x06
    b96c:	77 81       	ldd	r23, Z+7	; 0x07
    b96e:	80 85       	ldd	r24, Z+8	; 0x08
    b970:	91 85       	ldd	r25, Z+9	; 0x09
    b972:	61 15       	cp	r22, r1
    b974:	71 05       	cpc	r23, r1
    b976:	81 05       	cpc	r24, r1
    b978:	91 05       	cpc	r25, r1
    b97a:	f9 f4       	brne	.+62     	; 0xb9ba <f_write+0x11a>
    b97c:	40 e0       	ldi	r20, 0x00	; 0
    b97e:	50 e0       	ldi	r21, 0x00	; 0
    b980:	ba 01       	movw	r22, r20
    b982:	0d c0       	rjmp	.+26     	; 0xb99e <f_write+0xfe>
    b984:	82 a1       	ldd	r24, Z+34	; 0x22
    b986:	93 a1       	ldd	r25, Z+35	; 0x23
    b988:	89 2b       	or	r24, r25
    b98a:	21 f0       	breq	.+8      	; 0xb994 <f_write+0xf4>
    b98c:	c7 01       	movw	r24, r14
    b98e:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <clmt_clust>
    b992:	08 c0       	rjmp	.+16     	; 0xb9a4 <f_write+0x104>
    b994:	f7 01       	movw	r30, r14
    b996:	44 89       	ldd	r20, Z+20	; 0x14
    b998:	55 89       	ldd	r21, Z+21	; 0x15
    b99a:	66 89       	ldd	r22, Z+22	; 0x16
    b99c:	77 89       	ldd	r23, Z+23	; 0x17
    b99e:	c7 01       	movw	r24, r14
    b9a0:	0e 94 50 50 	call	0xa0a0	; 0xa0a0 <create_chain>
    b9a4:	61 15       	cp	r22, r1
    b9a6:	71 05       	cpc	r23, r1
    b9a8:	81 05       	cpc	r24, r1
    b9aa:	91 05       	cpc	r25, r1
    b9ac:	31 f4       	brne	.+12     	; 0xb9ba <f_write+0x11a>
    b9ae:	f7 01       	movw	r30, r14
    b9b0:	86 85       	ldd	r24, Z+14	; 0x0e
    b9b2:	80 64       	ori	r24, 0x40	; 64
    b9b4:	86 87       	std	Z+14, r24	; 0x0e
    b9b6:	80 e0       	ldi	r24, 0x00	; 0
    b9b8:	05 c1       	rjmp	.+522    	; 0xbbc4 <f_write+0x324>
    b9ba:	61 30       	cpi	r22, 0x01	; 1
    b9bc:	71 05       	cpc	r23, r1
    b9be:	81 05       	cpc	r24, r1
    b9c0:	91 05       	cpc	r25, r1
    b9c2:	11 f4       	brne	.+4      	; 0xb9c8 <f_write+0x128>
    b9c4:	82 e0       	ldi	r24, 0x02	; 2
    b9c6:	07 c0       	rjmp	.+14     	; 0xb9d6 <f_write+0x136>
    b9c8:	6f 3f       	cpi	r22, 0xFF	; 255
    b9ca:	ff ef       	ldi	r31, 0xFF	; 255
    b9cc:	7f 07       	cpc	r23, r31
    b9ce:	8f 07       	cpc	r24, r31
    b9d0:	9f 07       	cpc	r25, r31
    b9d2:	21 f4       	brne	.+8      	; 0xb9dc <f_write+0x13c>
    b9d4:	81 e0       	ldi	r24, 0x01	; 1
    b9d6:	f7 01       	movw	r30, r14
    b9d8:	87 87       	std	Z+15, r24	; 0x0f
    b9da:	f4 c0       	rjmp	.+488    	; 0xbbc4 <f_write+0x324>
    b9dc:	f7 01       	movw	r30, r14
    b9de:	64 8b       	std	Z+20, r22	; 0x14
    b9e0:	75 8b       	std	Z+21, r23	; 0x15
    b9e2:	86 8b       	std	Z+22, r24	; 0x16
    b9e4:	97 8b       	std	Z+23, r25	; 0x17
    b9e6:	06 81       	ldd	r16, Z+6	; 0x06
    b9e8:	17 81       	ldd	r17, Z+7	; 0x07
    b9ea:	20 85       	ldd	r18, Z+8	; 0x08
    b9ec:	31 85       	ldd	r19, Z+9	; 0x09
    b9ee:	01 15       	cp	r16, r1
    b9f0:	11 05       	cpc	r17, r1
    b9f2:	21 05       	cpc	r18, r1
    b9f4:	31 05       	cpc	r19, r1
    b9f6:	21 f4       	brne	.+8      	; 0xba00 <f_write+0x160>
    b9f8:	66 83       	std	Z+6, r22	; 0x06
    b9fa:	77 83       	std	Z+7, r23	; 0x07
    b9fc:	80 87       	std	Z+8, r24	; 0x08
    b9fe:	91 87       	std	Z+9, r25	; 0x09
    ba00:	f7 01       	movw	r30, r14
    ba02:	86 85       	ldd	r24, Z+14	; 0x0e
    ba04:	87 ff       	sbrs	r24, 7
    ba06:	13 c0       	rjmp	.+38     	; 0xba2e <f_write+0x18e>
    ba08:	20 8d       	ldd	r18, Z+24	; 0x18
    ba0a:	31 8d       	ldd	r19, Z+25	; 0x19
    ba0c:	42 8d       	ldd	r20, Z+26	; 0x1a
    ba0e:	53 8d       	ldd	r21, Z+27	; 0x1b
    ba10:	e9 81       	ldd	r30, Y+1	; 0x01
    ba12:	fa 81       	ldd	r31, Y+2	; 0x02
    ba14:	01 e0       	ldi	r16, 0x01	; 1
    ba16:	10 e0       	ldi	r17, 0x00	; 0
    ba18:	6d 81       	ldd	r22, Y+5	; 0x05
    ba1a:	7e 81       	ldd	r23, Y+6	; 0x06
    ba1c:	81 81       	ldd	r24, Z+1	; 0x01
    ba1e:	0e 94 4f 69 	call	0xd29e	; 0xd29e <disk_write>
    ba22:	89 2b       	or	r24, r25
    ba24:	b9 f6       	brne	.-82     	; 0xb9d4 <f_write+0x134>
    ba26:	f7 01       	movw	r30, r14
    ba28:	86 85       	ldd	r24, Z+14	; 0x0e
    ba2a:	8f 77       	andi	r24, 0x7F	; 127
    ba2c:	86 87       	std	Z+14, r24	; 0x0e
    ba2e:	29 81       	ldd	r18, Y+1	; 0x01
    ba30:	3a 81       	ldd	r19, Y+2	; 0x02
    ba32:	3c 83       	std	Y+4, r19	; 0x04
    ba34:	2b 83       	std	Y+3, r18	; 0x03
    ba36:	f7 01       	movw	r30, r14
    ba38:	44 89       	ldd	r20, Z+20	; 0x14
    ba3a:	55 89       	ldd	r21, Z+21	; 0x15
    ba3c:	66 89       	ldd	r22, Z+22	; 0x16
    ba3e:	77 89       	ldd	r23, Z+23	; 0x17
    ba40:	c9 01       	movw	r24, r18
    ba42:	0e 94 7e 47 	call	0x8efc	; 0x8efc <clst2sect>
    ba46:	61 15       	cp	r22, r1
    ba48:	71 05       	cpc	r23, r1
    ba4a:	81 05       	cpc	r24, r1
    ba4c:	91 05       	cpc	r25, r1
    ba4e:	09 f4       	brne	.+2      	; 0xba52 <f_write+0x1b2>
    ba50:	b9 cf       	rjmp	.-142    	; 0xb9c4 <f_write+0x124>
    ba52:	1b 01       	movw	r2, r22
    ba54:	2c 01       	movw	r4, r24
    ba56:	28 0c       	add	r2, r8
    ba58:	39 1c       	adc	r3, r9
    ba5a:	41 1c       	adc	r4, r1
    ba5c:	51 1c       	adc	r5, r1
    ba5e:	65 01       	movw	r12, r10
    ba60:	cd 2c       	mov	r12, r13
    ba62:	dd 24       	eor	r13, r13
    ba64:	c6 94       	lsr	r12
    ba66:	c1 14       	cp	r12, r1
    ba68:	d1 04       	cpc	r13, r1
    ba6a:	f1 f1       	breq	.+124    	; 0xbae8 <f_write+0x248>
    ba6c:	eb 81       	ldd	r30, Y+3	; 0x03
    ba6e:	fc 81       	ldd	r31, Y+4	; 0x04
    ba70:	81 85       	ldd	r24, Z+9	; 0x09
    ba72:	92 85       	ldd	r25, Z+10	; 0x0a
    ba74:	94 01       	movw	r18, r8
    ba76:	2c 0d       	add	r18, r12
    ba78:	3d 1d       	adc	r19, r13
    ba7a:	82 17       	cp	r24, r18
    ba7c:	93 07       	cpc	r25, r19
    ba7e:	18 f4       	brcc	.+6      	; 0xba86 <f_write+0x1e6>
    ba80:	6c 01       	movw	r12, r24
    ba82:	c8 18       	sub	r12, r8
    ba84:	d9 08       	sbc	r13, r9
    ba86:	86 01       	movw	r16, r12
    ba88:	a2 01       	movw	r20, r4
    ba8a:	91 01       	movw	r18, r2
    ba8c:	b3 01       	movw	r22, r6
    ba8e:	eb 81       	ldd	r30, Y+3	; 0x03
    ba90:	fc 81       	ldd	r31, Y+4	; 0x04
    ba92:	81 81       	ldd	r24, Z+1	; 0x01
    ba94:	0e 94 4f 69 	call	0xd29e	; 0xd29e <disk_write>
    ba98:	89 2b       	or	r24, r25
    ba9a:	09 f0       	breq	.+2      	; 0xba9e <f_write+0x1fe>
    ba9c:	9b cf       	rjmp	.-202    	; 0xb9d4 <f_write+0x134>
    ba9e:	f7 01       	movw	r30, r14
    baa0:	80 8d       	ldd	r24, Z+24	; 0x18
    baa2:	91 8d       	ldd	r25, Z+25	; 0x19
    baa4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    baa6:	b3 8d       	ldd	r27, Z+27	; 0x1b
    baa8:	82 19       	sub	r24, r2
    baaa:	93 09       	sbc	r25, r3
    baac:	a4 09       	sbc	r26, r4
    baae:	b5 09       	sbc	r27, r5
    bab0:	a6 01       	movw	r20, r12
    bab2:	60 e0       	ldi	r22, 0x00	; 0
    bab4:	70 e0       	ldi	r23, 0x00	; 0
    bab6:	84 17       	cp	r24, r20
    bab8:	95 07       	cpc	r25, r21
    baba:	a6 07       	cpc	r26, r22
    babc:	b7 07       	cpc	r27, r23
    babe:	80 f4       	brcc	.+32     	; 0xbae0 <f_write+0x240>
    bac0:	98 2f       	mov	r25, r24
    bac2:	88 27       	eor	r24, r24
    bac4:	99 0f       	add	r25, r25
    bac6:	b3 01       	movw	r22, r6
    bac8:	68 0f       	add	r22, r24
    baca:	79 1f       	adc	r23, r25
    bacc:	40 e0       	ldi	r20, 0x00	; 0
    bace:	52 e0       	ldi	r21, 0x02	; 2
    bad0:	8d 81       	ldd	r24, Y+5	; 0x05
    bad2:	9e 81       	ldd	r25, Y+6	; 0x06
    bad4:	0e 94 73 49 	call	0x92e6	; 0x92e6 <mem_cpy.part.0>
    bad8:	f7 01       	movw	r30, r14
    bada:	86 85       	ldd	r24, Z+14	; 0x0e
    badc:	8f 77       	andi	r24, 0x7F	; 127
    bade:	86 87       	std	Z+14, r24	; 0x0e
    bae0:	dc 2c       	mov	r13, r12
    bae2:	cc 24       	eor	r12, r12
    bae4:	dd 0c       	add	r13, r13
    bae6:	43 c0       	rjmp	.+134    	; 0xbb6e <f_write+0x2ce>
    bae8:	f7 01       	movw	r30, r14
    baea:	80 8d       	ldd	r24, Z+24	; 0x18
    baec:	91 8d       	ldd	r25, Z+25	; 0x19
    baee:	a2 8d       	ldd	r26, Z+26	; 0x1a
    baf0:	b3 8d       	ldd	r27, Z+27	; 0x1b
    baf2:	28 16       	cp	r2, r24
    baf4:	39 06       	cpc	r3, r25
    baf6:	4a 06       	cpc	r4, r26
    baf8:	5b 06       	cpc	r5, r27
    bafa:	d9 f0       	breq	.+54     	; 0xbb32 <f_write+0x292>
    bafc:	40 89       	ldd	r20, Z+16	; 0x10
    bafe:	51 89       	ldd	r21, Z+17	; 0x11
    bb00:	62 89       	ldd	r22, Z+18	; 0x12
    bb02:	73 89       	ldd	r23, Z+19	; 0x13
    bb04:	82 85       	ldd	r24, Z+10	; 0x0a
    bb06:	93 85       	ldd	r25, Z+11	; 0x0b
    bb08:	a4 85       	ldd	r26, Z+12	; 0x0c
    bb0a:	b5 85       	ldd	r27, Z+13	; 0x0d
    bb0c:	48 17       	cp	r20, r24
    bb0e:	59 07       	cpc	r21, r25
    bb10:	6a 07       	cpc	r22, r26
    bb12:	7b 07       	cpc	r23, r27
    bb14:	70 f4       	brcc	.+28     	; 0xbb32 <f_write+0x292>
    bb16:	01 e0       	ldi	r16, 0x01	; 1
    bb18:	10 e0       	ldi	r17, 0x00	; 0
    bb1a:	a2 01       	movw	r20, r4
    bb1c:	91 01       	movw	r18, r2
    bb1e:	6d 81       	ldd	r22, Y+5	; 0x05
    bb20:	7e 81       	ldd	r23, Y+6	; 0x06
    bb22:	eb 81       	ldd	r30, Y+3	; 0x03
    bb24:	fc 81       	ldd	r31, Y+4	; 0x04
    bb26:	81 81       	ldd	r24, Z+1	; 0x01
    bb28:	0e 94 3f 69 	call	0xd27e	; 0xd27e <disk_read>
    bb2c:	89 2b       	or	r24, r25
    bb2e:	09 f0       	breq	.+2      	; 0xbb32 <f_write+0x292>
    bb30:	51 cf       	rjmp	.-350    	; 0xb9d4 <f_write+0x134>
    bb32:	f7 01       	movw	r30, r14
    bb34:	20 8e       	std	Z+24, r2	; 0x18
    bb36:	31 8e       	std	Z+25, r3	; 0x19
    bb38:	42 8e       	std	Z+26, r4	; 0x1a
    bb3a:	53 8e       	std	Z+27, r5	; 0x1b
    bb3c:	f7 01       	movw	r30, r14
    bb3e:	80 89       	ldd	r24, Z+16	; 0x10
    bb40:	91 89       	ldd	r25, Z+17	; 0x11
    bb42:	91 70       	andi	r25, 0x01	; 1
    bb44:	20 e0       	ldi	r18, 0x00	; 0
    bb46:	32 e0       	ldi	r19, 0x02	; 2
    bb48:	28 1b       	sub	r18, r24
    bb4a:	39 0b       	sbc	r19, r25
    bb4c:	65 01       	movw	r12, r10
    bb4e:	2a 15       	cp	r18, r10
    bb50:	3b 05       	cpc	r19, r11
    bb52:	08 f4       	brcc	.+2      	; 0xbb56 <f_write+0x2b6>
    bb54:	69 01       	movw	r12, r18
    bb56:	a6 01       	movw	r20, r12
    bb58:	b3 01       	movw	r22, r6
    bb5a:	2d 81       	ldd	r18, Y+5	; 0x05
    bb5c:	3e 81       	ldd	r19, Y+6	; 0x06
    bb5e:	82 0f       	add	r24, r18
    bb60:	93 1f       	adc	r25, r19
    bb62:	0e 94 73 49 	call	0x92e6	; 0x92e6 <mem_cpy.part.0>
    bb66:	f7 01       	movw	r30, r14
    bb68:	86 85       	ldd	r24, Z+14	; 0x0e
    bb6a:	80 68       	ori	r24, 0x80	; 128
    bb6c:	86 87       	std	Z+14, r24	; 0x0e
    bb6e:	ac 18       	sub	r10, r12
    bb70:	bd 08       	sbc	r11, r13
    bb72:	ef 81       	ldd	r30, Y+7	; 0x07
    bb74:	f8 85       	ldd	r31, Y+8	; 0x08
    bb76:	80 81       	ld	r24, Z
    bb78:	91 81       	ldd	r25, Z+1	; 0x01
    bb7a:	8c 0d       	add	r24, r12
    bb7c:	9d 1d       	adc	r25, r13
    bb7e:	91 83       	std	Z+1, r25	; 0x01
    bb80:	80 83       	st	Z, r24
    bb82:	6c 0c       	add	r6, r12
    bb84:	7d 1c       	adc	r7, r13
    bb86:	f7 01       	movw	r30, r14
    bb88:	80 89       	ldd	r24, Z+16	; 0x10
    bb8a:	91 89       	ldd	r25, Z+17	; 0x11
    bb8c:	a2 89       	ldd	r26, Z+18	; 0x12
    bb8e:	b3 89       	ldd	r27, Z+19	; 0x13
    bb90:	8c 0d       	add	r24, r12
    bb92:	9d 1d       	adc	r25, r13
    bb94:	a1 1d       	adc	r26, r1
    bb96:	b1 1d       	adc	r27, r1
    bb98:	80 8b       	std	Z+16, r24	; 0x10
    bb9a:	91 8b       	std	Z+17, r25	; 0x11
    bb9c:	a2 8b       	std	Z+18, r26	; 0x12
    bb9e:	b3 8b       	std	Z+19, r27	; 0x13
    bba0:	42 85       	ldd	r20, Z+10	; 0x0a
    bba2:	53 85       	ldd	r21, Z+11	; 0x0b
    bba4:	64 85       	ldd	r22, Z+12	; 0x0c
    bba6:	75 85       	ldd	r23, Z+13	; 0x0d
    bba8:	48 17       	cp	r20, r24
    bbaa:	59 07       	cpc	r21, r25
    bbac:	6a 07       	cpc	r22, r26
    bbae:	7b 07       	cpc	r23, r27
    bbb0:	10 f4       	brcc	.+4      	; 0xbbb6 <f_write+0x316>
    bbb2:	ac 01       	movw	r20, r24
    bbb4:	bd 01       	movw	r22, r26
    bbb6:	f7 01       	movw	r30, r14
    bbb8:	42 87       	std	Z+10, r20	; 0x0a
    bbba:	53 87       	std	Z+11, r21	; 0x0b
    bbbc:	64 87       	std	Z+12, r22	; 0x0c
    bbbe:	75 87       	std	Z+13, r23	; 0x0d
    bbc0:	a5 ce       	rjmp	.-694    	; 0xb90c <f_write+0x6c>
    bbc2:	87 e0       	ldi	r24, 0x07	; 7
    bbc4:	90 e0       	ldi	r25, 0x00	; 0
    bbc6:	28 96       	adiw	r28, 0x08	; 8
    bbc8:	e2 e1       	ldi	r30, 0x12	; 18
    bbca:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

0000bbce <f_sync>:
    bbce:	8f 92       	push	r8
    bbd0:	9f 92       	push	r9
    bbd2:	af 92       	push	r10
    bbd4:	bf 92       	push	r11
    bbd6:	ef 92       	push	r14
    bbd8:	ff 92       	push	r15
    bbda:	0f 93       	push	r16
    bbdc:	1f 93       	push	r17
    bbde:	cf 93       	push	r28
    bbe0:	df 93       	push	r29
    bbe2:	00 d0       	rcall	.+0      	; 0xbbe4 <f_sync+0x16>
    bbe4:	cd b7       	in	r28, 0x3d	; 61
    bbe6:	de b7       	in	r29, 0x3e	; 62
    bbe8:	7c 01       	movw	r14, r24
    bbea:	be 01       	movw	r22, r28
    bbec:	6f 5f       	subi	r22, 0xFF	; 255
    bbee:	7f 4f       	sbci	r23, 0xFF	; 255
    bbf0:	0e 94 1d 48 	call	0x903a	; 0x903a <validate>
    bbf4:	00 97       	sbiw	r24, 0x00	; 0
    bbf6:	09 f0       	breq	.+2      	; 0xbbfa <f_sync+0x2c>
    bbf8:	5d c0       	rjmp	.+186    	; 0xbcb4 <f_sync+0xe6>
    bbfa:	f7 01       	movw	r30, r14
    bbfc:	86 85       	ldd	r24, Z+14	; 0x0e
    bbfe:	86 ff       	sbrs	r24, 6
    bc00:	55 c0       	rjmp	.+170    	; 0xbcac <f_sync+0xde>
    bc02:	87 ff       	sbrs	r24, 7
    bc04:	15 c0       	rjmp	.+42     	; 0xbc30 <f_sync+0x62>
    bc06:	20 8d       	ldd	r18, Z+24	; 0x18
    bc08:	31 8d       	ldd	r19, Z+25	; 0x19
    bc0a:	42 8d       	ldd	r20, Z+26	; 0x1a
    bc0c:	53 8d       	ldd	r21, Z+27	; 0x1b
    bc0e:	e9 81       	ldd	r30, Y+1	; 0x01
    bc10:	fa 81       	ldd	r31, Y+2	; 0x02
    bc12:	01 e0       	ldi	r16, 0x01	; 1
    bc14:	10 e0       	ldi	r17, 0x00	; 0
    bc16:	b7 01       	movw	r22, r14
    bc18:	6c 5d       	subi	r22, 0xDC	; 220
    bc1a:	7f 4f       	sbci	r23, 0xFF	; 255
    bc1c:	81 81       	ldd	r24, Z+1	; 0x01
    bc1e:	0e 94 4f 69 	call	0xd29e	; 0xd29e <disk_write>
    bc22:	89 2b       	or	r24, r25
    bc24:	09 f0       	breq	.+2      	; 0xbc28 <f_sync+0x5a>
    bc26:	44 c0       	rjmp	.+136    	; 0xbcb0 <f_sync+0xe2>
    bc28:	f7 01       	movw	r30, r14
    bc2a:	86 85       	ldd	r24, Z+14	; 0x0e
    bc2c:	8f 77       	andi	r24, 0x7F	; 127
    bc2e:	86 87       	std	Z+14, r24	; 0x0e
    bc30:	0e 94 74 70 	call	0xe0e8	; 0xe0e8 <get_fattime>
    bc34:	4b 01       	movw	r8, r22
    bc36:	5c 01       	movw	r10, r24
    bc38:	f7 01       	movw	r30, r14
    bc3a:	44 8d       	ldd	r20, Z+28	; 0x1c
    bc3c:	55 8d       	ldd	r21, Z+29	; 0x1d
    bc3e:	66 8d       	ldd	r22, Z+30	; 0x1e
    bc40:	77 8d       	ldd	r23, Z+31	; 0x1f
    bc42:	89 81       	ldd	r24, Y+1	; 0x01
    bc44:	9a 81       	ldd	r25, Y+2	; 0x02
    bc46:	0e 94 0d 4b 	call	0x961a	; 0x961a <move_window>
    bc4a:	00 97       	sbiw	r24, 0x00	; 0
    bc4c:	99 f5       	brne	.+102    	; 0xbcb4 <f_sync+0xe6>
    bc4e:	f7 01       	movw	r30, r14
    bc50:	00 a1       	ldd	r16, Z+32	; 0x20
    bc52:	11 a1       	ldd	r17, Z+33	; 0x21
    bc54:	f8 01       	movw	r30, r16
    bc56:	83 85       	ldd	r24, Z+11	; 0x0b
    bc58:	80 62       	ori	r24, 0x20	; 32
    bc5a:	83 87       	std	Z+11, r24	; 0x0b
    bc5c:	f7 01       	movw	r30, r14
    bc5e:	26 81       	ldd	r18, Z+6	; 0x06
    bc60:	37 81       	ldd	r19, Z+7	; 0x07
    bc62:	40 85       	ldd	r20, Z+8	; 0x08
    bc64:	51 85       	ldd	r21, Z+9	; 0x09
    bc66:	b8 01       	movw	r22, r16
    bc68:	80 81       	ld	r24, Z
    bc6a:	91 81       	ldd	r25, Z+1	; 0x01
    bc6c:	0e 94 93 49 	call	0x9326	; 0x9326 <st_clust.isra.4>
    bc70:	f7 01       	movw	r30, r14
    bc72:	42 85       	ldd	r20, Z+10	; 0x0a
    bc74:	53 85       	ldd	r21, Z+11	; 0x0b
    bc76:	64 85       	ldd	r22, Z+12	; 0x0c
    bc78:	75 85       	ldd	r23, Z+13	; 0x0d
    bc7a:	c8 01       	movw	r24, r16
    bc7c:	4c 96       	adiw	r24, 0x1c	; 28
    bc7e:	0e 94 60 47 	call	0x8ec0	; 0x8ec0 <st_dword>
    bc82:	b5 01       	movw	r22, r10
    bc84:	a4 01       	movw	r20, r8
    bc86:	c8 01       	movw	r24, r16
    bc88:	46 96       	adiw	r24, 0x16	; 22
    bc8a:	0e 94 60 47 	call	0x8ec0	; 0x8ec0 <st_dword>
    bc8e:	f8 01       	movw	r30, r16
    bc90:	12 8a       	std	Z+18, r1	; 0x12
    bc92:	13 8a       	std	Z+19, r1	; 0x13
    bc94:	89 81       	ldd	r24, Y+1	; 0x01
    bc96:	9a 81       	ldd	r25, Y+2	; 0x02
    bc98:	21 e0       	ldi	r18, 0x01	; 1
    bc9a:	fc 01       	movw	r30, r24
    bc9c:	23 83       	std	Z+3, r18	; 0x03
    bc9e:	0e 94 f3 49 	call	0x93e6	; 0x93e6 <sync_fs>
    bca2:	f7 01       	movw	r30, r14
    bca4:	26 85       	ldd	r18, Z+14	; 0x0e
    bca6:	2f 7b       	andi	r18, 0xBF	; 191
    bca8:	26 87       	std	Z+14, r18	; 0x0e
    bcaa:	04 c0       	rjmp	.+8      	; 0xbcb4 <f_sync+0xe6>
    bcac:	80 e0       	ldi	r24, 0x00	; 0
    bcae:	01 c0       	rjmp	.+2      	; 0xbcb2 <f_sync+0xe4>
    bcb0:	81 e0       	ldi	r24, 0x01	; 1
    bcb2:	90 e0       	ldi	r25, 0x00	; 0
    bcb4:	0f 90       	pop	r0
    bcb6:	0f 90       	pop	r0
    bcb8:	df 91       	pop	r29
    bcba:	cf 91       	pop	r28
    bcbc:	1f 91       	pop	r17
    bcbe:	0f 91       	pop	r16
    bcc0:	ff 90       	pop	r15
    bcc2:	ef 90       	pop	r14
    bcc4:	bf 90       	pop	r11
    bcc6:	af 90       	pop	r10
    bcc8:	9f 90       	pop	r9
    bcca:	8f 90       	pop	r8
    bccc:	08 95       	ret

0000bcce <f_close>:
    bcce:	a2 e0       	ldi	r26, 0x02	; 2
    bcd0:	b0 e0       	ldi	r27, 0x00	; 0
    bcd2:	ed e6       	ldi	r30, 0x6D	; 109
    bcd4:	fe e5       	ldi	r31, 0x5E	; 94
    bcd6:	0c 94 74 e6 	jmp	0x1cce8	; 0x1cce8 <__prologue_saves__+0x1c>
    bcda:	8c 01       	movw	r16, r24
    bcdc:	78 df       	rcall	.-272    	; 0xbbce <f_sync>
    bcde:	00 97       	sbiw	r24, 0x00	; 0
    bce0:	59 f4       	brne	.+22     	; 0xbcf8 <f_close+0x2a>
    bce2:	be 01       	movw	r22, r28
    bce4:	6f 5f       	subi	r22, 0xFF	; 255
    bce6:	7f 4f       	sbci	r23, 0xFF	; 255
    bce8:	c8 01       	movw	r24, r16
    bcea:	0e 94 1d 48 	call	0x903a	; 0x903a <validate>
    bcee:	00 97       	sbiw	r24, 0x00	; 0
    bcf0:	19 f4       	brne	.+6      	; 0xbcf8 <f_close+0x2a>
    bcf2:	f8 01       	movw	r30, r16
    bcf4:	11 82       	std	Z+1, r1	; 0x01
    bcf6:	10 82       	st	Z, r1
    bcf8:	22 96       	adiw	r28, 0x02	; 2
    bcfa:	e4 e0       	ldi	r30, 0x04	; 4
    bcfc:	0c 94 90 e6 	jmp	0x1cd20	; 0x1cd20 <__epilogue_restores__+0x1c>

0000bd00 <f_chdir>:
    bd00:	a2 e3       	ldi	r26, 0x32	; 50
    bd02:	b0 e0       	ldi	r27, 0x00	; 0
    bd04:	e6 e8       	ldi	r30, 0x86	; 134
    bd06:	fe e5       	ldi	r31, 0x5E	; 94
    bd08:	0c 94 70 e6 	jmp	0x1cce0	; 0x1cce0 <__prologue_saves__+0x14>
    bd0c:	9a ab       	std	Y+50, r25	; 0x32
    bd0e:	89 ab       	std	Y+49, r24	; 0x31
    bd10:	40 e0       	ldi	r20, 0x00	; 0
    bd12:	be 01       	movw	r22, r28
    bd14:	61 5d       	subi	r22, 0xD1	; 209
    bd16:	7f 4f       	sbci	r23, 0xFF	; 255
    bd18:	ce 01       	movw	r24, r28
    bd1a:	c1 96       	adiw	r24, 0x31	; 49
    bd1c:	0e 94 88 4b 	call	0x9710	; 0x9710 <mount_volume>
    bd20:	00 97       	sbiw	r24, 0x00	; 0
    bd22:	09 f0       	breq	.+2      	; 0xbd26 <f_chdir+0x26>
    bd24:	44 c0       	rjmp	.+136    	; 0xbdae <f_chdir+0xae>
    bd26:	8f a5       	ldd	r24, Y+47	; 0x2f
    bd28:	98 a9       	ldd	r25, Y+48	; 0x30
    bd2a:	9a 83       	std	Y+2, r25	; 0x02
    bd2c:	89 83       	std	Y+1, r24	; 0x01
    bd2e:	80 e0       	ldi	r24, 0x00	; 0
    bd30:	92 e0       	ldi	r25, 0x02	; 2
    bd32:	0e 94 83 68 	call	0xd106	; 0xd106 <ff_memalloc>
    bd36:	7c 01       	movw	r14, r24
    bd38:	00 97       	sbiw	r24, 0x00	; 0
    bd3a:	a9 f1       	breq	.+106    	; 0xbda6 <f_chdir+0xa6>
    bd3c:	ef a5       	ldd	r30, Y+47	; 0x2f
    bd3e:	f8 a9       	ldd	r31, Y+48	; 0x30
    bd40:	94 87       	std	Z+12, r25	; 0x0c
    bd42:	83 87       	std	Z+11, r24	; 0x0b
    bd44:	69 a9       	ldd	r22, Y+49	; 0x31
    bd46:	7a a9       	ldd	r23, Y+50	; 0x32
    bd48:	ce 01       	movw	r24, r28
    bd4a:	01 96       	adiw	r24, 0x01	; 1
    bd4c:	2e d8       	rcall	.-4004   	; 0xadaa <follow_path>
    bd4e:	8c 01       	movw	r16, r24
    bd50:	89 2b       	or	r24, r25
    bd52:	09 f5       	brne	.+66     	; 0xbd96 <f_chdir+0x96>
    bd54:	88 a5       	ldd	r24, Y+40	; 0x28
    bd56:	87 ff       	sbrs	r24, 7
    bd58:	0b c0       	rjmp	.+22     	; 0xbd70 <f_chdir+0x70>
    bd5a:	ef a5       	ldd	r30, Y+47	; 0x2f
    bd5c:	f8 a9       	ldd	r31, Y+48	; 0x30
    bd5e:	8f 81       	ldd	r24, Y+7	; 0x07
    bd60:	98 85       	ldd	r25, Y+8	; 0x08
    bd62:	a9 85       	ldd	r26, Y+9	; 0x09
    bd64:	ba 85       	ldd	r27, Y+10	; 0x0a
    bd66:	85 8b       	std	Z+21, r24	; 0x15
    bd68:	96 8b       	std	Z+22, r25	; 0x16
    bd6a:	a7 8b       	std	Z+23, r26	; 0x17
    bd6c:	b0 8f       	std	Z+24, r27	; 0x18
    bd6e:	13 c0       	rjmp	.+38     	; 0xbd96 <f_chdir+0x96>
    bd70:	8d 81       	ldd	r24, Y+5	; 0x05
    bd72:	84 ff       	sbrs	r24, 4
    bd74:	0e c0       	rjmp	.+28     	; 0xbd92 <f_chdir+0x92>
    bd76:	cf a4       	ldd	r12, Y+47	; 0x2f
    bd78:	d8 a8       	ldd	r13, Y+48	; 0x30
    bd7a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    bd7c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    bd7e:	f6 01       	movw	r30, r12
    bd80:	80 81       	ld	r24, Z
    bd82:	0e 94 7e 49 	call	0x92fc	; 0x92fc <ld_clust.isra.3>
    bd86:	f6 01       	movw	r30, r12
    bd88:	65 8b       	std	Z+21, r22	; 0x15
    bd8a:	76 8b       	std	Z+22, r23	; 0x16
    bd8c:	87 8b       	std	Z+23, r24	; 0x17
    bd8e:	90 8f       	std	Z+24, r25	; 0x18
    bd90:	02 c0       	rjmp	.+4      	; 0xbd96 <f_chdir+0x96>
    bd92:	05 e0       	ldi	r16, 0x05	; 5
    bd94:	10 e0       	ldi	r17, 0x00	; 0
    bd96:	c7 01       	movw	r24, r14
    bd98:	0e 94 86 68 	call	0xd10c	; 0xd10c <ff_memfree>
    bd9c:	04 30       	cpi	r16, 0x04	; 4
    bd9e:	11 05       	cpc	r17, r1
    bda0:	29 f4       	brne	.+10     	; 0xbdac <f_chdir+0xac>
    bda2:	85 e0       	ldi	r24, 0x05	; 5
    bda4:	01 c0       	rjmp	.+2      	; 0xbda8 <f_chdir+0xa8>
    bda6:	81 e1       	ldi	r24, 0x11	; 17
    bda8:	90 e0       	ldi	r25, 0x00	; 0
    bdaa:	01 c0       	rjmp	.+2      	; 0xbdae <f_chdir+0xae>
    bdac:	c8 01       	movw	r24, r16
    bdae:	e2 96       	adiw	r28, 0x32	; 50
    bdb0:	e8 e0       	ldi	r30, 0x08	; 8
    bdb2:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__epilogue_restores__+0x14>

0000bdb6 <f_getcwd>:
    bdb6:	a8 e4       	ldi	r26, 0x48	; 72
    bdb8:	b1 e0       	ldi	r27, 0x01	; 1
    bdba:	e1 ee       	ldi	r30, 0xE1	; 225
    bdbc:	fe e5       	ldi	r31, 0x5E	; 94
    bdbe:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
    bdc2:	c9 5b       	subi	r28, 0xB9	; 185
    bdc4:	de 4f       	sbci	r29, 0xFE	; 254
    bdc6:	99 83       	std	Y+1, r25	; 0x01
    bdc8:	88 83       	st	Y, r24
    bdca:	c7 54       	subi	r28, 0x47	; 71
    bdcc:	d1 40       	sbci	r29, 0x01	; 1
    bdce:	4b 01       	movw	r8, r22
    bdd0:	7c 01       	movw	r14, r24
    bdd2:	fc 01       	movw	r30, r24
    bdd4:	10 82       	st	Z, r1
    bdd6:	40 e0       	ldi	r20, 0x00	; 0
    bdd8:	be 01       	movw	r22, r28
    bdda:	6b 5b       	subi	r22, 0xBB	; 187
    bddc:	7e 4f       	sbci	r23, 0xFE	; 254
    bdde:	ce 01       	movw	r24, r28
    bde0:	89 5b       	subi	r24, 0xB9	; 185
    bde2:	9e 4f       	sbci	r25, 0xFE	; 254
    bde4:	0e 94 88 4b 	call	0x9710	; 0x9710 <mount_volume>
    bde8:	1c 01       	movw	r2, r24
    bdea:	89 2b       	or	r24, r25
    bdec:	09 f0       	breq	.+2      	; 0xbdf0 <f_getcwd+0x3a>
    bdee:	03 c1       	rjmp	.+518    	; 0xbff6 <f_getcwd+0x240>
    bdf0:	cb 5b       	subi	r28, 0xBB	; 187
    bdf2:	de 4f       	sbci	r29, 0xFE	; 254
    bdf4:	88 81       	ld	r24, Y
    bdf6:	99 81       	ldd	r25, Y+1	; 0x01
    bdf8:	c5 54       	subi	r28, 0x45	; 69
    bdfa:	d1 40       	sbci	r29, 0x01	; 1
    bdfc:	c9 5e       	subi	r28, 0xE9	; 233
    bdfe:	de 4f       	sbci	r29, 0xFE	; 254
    be00:	99 83       	std	Y+1, r25	; 0x01
    be02:	88 83       	st	Y, r24
    be04:	c7 51       	subi	r28, 0x17	; 23
    be06:	d1 40       	sbci	r29, 0x01	; 1
    be08:	80 e0       	ldi	r24, 0x00	; 0
    be0a:	92 e0       	ldi	r25, 0x02	; 2
    be0c:	0e 94 83 68 	call	0xd106	; 0xd106 <ff_memalloc>
    be10:	5c 01       	movw	r10, r24
    be12:	00 97       	sbiw	r24, 0x00	; 0
    be14:	09 f4       	brne	.+2      	; 0xbe18 <f_getcwd+0x62>
    be16:	f3 c0       	rjmp	.+486    	; 0xbffe <f_getcwd+0x248>
    be18:	cb 5b       	subi	r28, 0xBB	; 187
    be1a:	de 4f       	sbci	r29, 0xFE	; 254
    be1c:	e8 81       	ld	r30, Y
    be1e:	f9 81       	ldd	r31, Y+1	; 0x01
    be20:	c5 54       	subi	r28, 0x45	; 69
    be22:	d1 40       	sbci	r29, 0x01	; 1
    be24:	94 87       	std	Z+12, r25	; 0x0c
    be26:	83 87       	std	Z+11, r24	; 0x0b
    be28:	85 89       	ldd	r24, Z+21	; 0x15
    be2a:	96 89       	ldd	r25, Z+22	; 0x16
    be2c:	a7 89       	ldd	r26, Z+23	; 0x17
    be2e:	b0 8d       	ldd	r27, Z+24	; 0x18
    be30:	c3 5e       	subi	r28, 0xE3	; 227
    be32:	de 4f       	sbci	r29, 0xFE	; 254
    be34:	88 83       	st	Y, r24
    be36:	99 83       	std	Y+1, r25	; 0x01
    be38:	aa 83       	std	Y+2, r26	; 0x02
    be3a:	bb 83       	std	Y+3, r27	; 0x03
    be3c:	cd 51       	subi	r28, 0x1D	; 29
    be3e:	d1 40       	sbci	r29, 0x01	; 1
    be40:	84 01       	movw	r16, r8
    be42:	ce 01       	movw	r24, r28
    be44:	01 96       	adiw	r24, 0x01	; 1
    be46:	6c 01       	movw	r12, r24
    be48:	c3 5e       	subi	r28, 0xE3	; 227
    be4a:	de 4f       	sbci	r29, 0xFE	; 254
    be4c:	48 80       	ld	r4, Y
    be4e:	59 80       	ldd	r5, Y+1	; 0x01
    be50:	6a 80       	ldd	r6, Y+2	; 0x02
    be52:	7b 80       	ldd	r7, Y+3	; 0x03
    be54:	cd 51       	subi	r28, 0x1D	; 29
    be56:	d1 40       	sbci	r29, 0x01	; 1
    be58:	41 14       	cp	r4, r1
    be5a:	51 04       	cpc	r5, r1
    be5c:	61 04       	cpc	r6, r1
    be5e:	71 04       	cpc	r7, r1
    be60:	09 f4       	brne	.+2      	; 0xbe64 <f_getcwd+0xae>
    be62:	a3 c0       	rjmp	.+326    	; 0xbfaa <f_getcwd+0x1f4>
    be64:	40 e2       	ldi	r20, 0x20	; 32
    be66:	50 e0       	ldi	r21, 0x00	; 0
    be68:	60 e0       	ldi	r22, 0x00	; 0
    be6a:	70 e0       	ldi	r23, 0x00	; 0
    be6c:	ce 01       	movw	r24, r28
    be6e:	89 5e       	subi	r24, 0xE9	; 233
    be70:	9e 4f       	sbci	r25, 0xFE	; 254
    be72:	0e 94 8f 4f 	call	0x9f1e	; 0x9f1e <dir_sdi>
    be76:	00 97       	sbiw	r24, 0x00	; 0
    be78:	09 f0       	breq	.+2      	; 0xbe7c <f_getcwd+0xc6>
    be7a:	c6 c0       	rjmp	.+396    	; 0xc008 <f_getcwd+0x252>
    be7c:	c3 5d       	subi	r28, 0xD3	; 211
    be7e:	de 4f       	sbci	r29, 0xFE	; 254
    be80:	48 81       	ld	r20, Y
    be82:	59 81       	ldd	r21, Y+1	; 0x01
    be84:	6a 81       	ldd	r22, Y+2	; 0x02
    be86:	7b 81       	ldd	r23, Y+3	; 0x03
    be88:	cd 52       	subi	r28, 0x2D	; 45
    be8a:	d1 40       	sbci	r29, 0x01	; 1
    be8c:	cb 5b       	subi	r28, 0xBB	; 187
    be8e:	de 4f       	sbci	r29, 0xFE	; 254
    be90:	88 81       	ld	r24, Y
    be92:	99 81       	ldd	r25, Y+1	; 0x01
    be94:	c5 54       	subi	r28, 0x45	; 69
    be96:	d1 40       	sbci	r29, 0x01	; 1
    be98:	0e 94 0d 4b 	call	0x961a	; 0x961a <move_window>
    be9c:	00 97       	sbiw	r24, 0x00	; 0
    be9e:	09 f0       	breq	.+2      	; 0xbea2 <f_getcwd+0xec>
    bea0:	b3 c0       	rjmp	.+358    	; 0xc008 <f_getcwd+0x252>
    bea2:	cf 5c       	subi	r28, 0xCF	; 207
    bea4:	de 4f       	sbci	r29, 0xFE	; 254
    bea6:	68 81       	ld	r22, Y
    bea8:	79 81       	ldd	r23, Y+1	; 0x01
    beaa:	c1 53       	subi	r28, 0x31	; 49
    beac:	d1 40       	sbci	r29, 0x01	; 1
    beae:	cb 5b       	subi	r28, 0xBB	; 187
    beb0:	de 4f       	sbci	r29, 0xFE	; 254
    beb2:	e8 81       	ld	r30, Y
    beb4:	f9 81       	ldd	r31, Y+1	; 0x01
    beb6:	c5 54       	subi	r28, 0x45	; 69
    beb8:	d1 40       	sbci	r29, 0x01	; 1
    beba:	80 81       	ld	r24, Z
    bebc:	0e 94 7e 49 	call	0x92fc	; 0x92fc <ld_clust.isra.3>
    bec0:	c3 5e       	subi	r28, 0xE3	; 227
    bec2:	de 4f       	sbci	r29, 0xFE	; 254
    bec4:	68 83       	st	Y, r22
    bec6:	79 83       	std	Y+1, r23	; 0x01
    bec8:	8a 83       	std	Y+2, r24	; 0x02
    beca:	9b 83       	std	Y+3, r25	; 0x03
    becc:	cd 51       	subi	r28, 0x1D	; 29
    bece:	d1 40       	sbci	r29, 0x01	; 1
    bed0:	40 e0       	ldi	r20, 0x00	; 0
    bed2:	50 e0       	ldi	r21, 0x00	; 0
    bed4:	ba 01       	movw	r22, r20
    bed6:	ce 01       	movw	r24, r28
    bed8:	89 5e       	subi	r24, 0xE9	; 233
    beda:	9e 4f       	sbci	r25, 0xFE	; 254
    bedc:	0e 94 8f 4f 	call	0x9f1e	; 0x9f1e <dir_sdi>
    bee0:	00 97       	sbiw	r24, 0x00	; 0
    bee2:	09 f0       	breq	.+2      	; 0xbee6 <f_getcwd+0x130>
    bee4:	91 c0       	rjmp	.+290    	; 0xc008 <f_getcwd+0x252>
    bee6:	60 e0       	ldi	r22, 0x00	; 0
    bee8:	70 e0       	ldi	r23, 0x00	; 0
    beea:	ce 01       	movw	r24, r28
    beec:	89 5e       	subi	r24, 0xE9	; 233
    beee:	9e 4f       	sbci	r25, 0xFE	; 254
    bef0:	0e 94 28 53 	call	0xa650	; 0xa650 <dir_read>
    bef4:	00 97       	sbiw	r24, 0x00	; 0
    bef6:	09 f0       	breq	.+2      	; 0xbefa <f_getcwd+0x144>
    bef8:	89 c0       	rjmp	.+274    	; 0xc00c <f_getcwd+0x256>
    befa:	cf 5c       	subi	r28, 0xCF	; 207
    befc:	de 4f       	sbci	r29, 0xFE	; 254
    befe:	68 81       	ld	r22, Y
    bf00:	79 81       	ldd	r23, Y+1	; 0x01
    bf02:	c1 53       	subi	r28, 0x31	; 49
    bf04:	d1 40       	sbci	r29, 0x01	; 1
    bf06:	cb 5b       	subi	r28, 0xBB	; 187
    bf08:	de 4f       	sbci	r29, 0xFE	; 254
    bf0a:	e8 81       	ld	r30, Y
    bf0c:	f9 81       	ldd	r31, Y+1	; 0x01
    bf0e:	c5 54       	subi	r28, 0x45	; 69
    bf10:	d1 40       	sbci	r29, 0x01	; 1
    bf12:	80 81       	ld	r24, Z
    bf14:	0e 94 7e 49 	call	0x92fc	; 0x92fc <ld_clust.isra.3>
    bf18:	46 16       	cp	r4, r22
    bf1a:	57 06       	cpc	r5, r23
    bf1c:	68 06       	cpc	r6, r24
    bf1e:	79 06       	cpc	r7, r25
    bf20:	41 f4       	brne	.+16     	; 0xbf32 <f_getcwd+0x17c>
    bf22:	b6 01       	movw	r22, r12
    bf24:	ce 01       	movw	r24, r28
    bf26:	89 5e       	subi	r24, 0xE9	; 233
    bf28:	9e 4f       	sbci	r25, 0xFE	; 254
    bf2a:	0e 94 49 48 	call	0x9092	; 0x9092 <get_fileinfo>
    bf2e:	f6 01       	movw	r30, r12
    bf30:	0a c0       	rjmp	.+20     	; 0xbf46 <f_getcwd+0x190>
    bf32:	60 e0       	ldi	r22, 0x00	; 0
    bf34:	70 e0       	ldi	r23, 0x00	; 0
    bf36:	ce 01       	movw	r24, r28
    bf38:	89 5e       	subi	r24, 0xE9	; 233
    bf3a:	9e 4f       	sbci	r25, 0xFE	; 254
    bf3c:	0e 94 07 52 	call	0xa40e	; 0xa40e <dir_next>
    bf40:	00 97       	sbiw	r24, 0x00	; 0
    bf42:	89 f2       	breq	.-94     	; 0xbee6 <f_getcwd+0x130>
    bf44:	63 c0       	rjmp	.+198    	; 0xc00c <f_getcwd+0x256>
    bf46:	cf 01       	movw	r24, r30
    bf48:	8c 19       	sub	r24, r12
    bf4a:	9d 09       	sbc	r25, r13
    bf4c:	31 96       	adiw	r30, 0x01	; 1
    bf4e:	25 89       	ldd	r18, Z+21	; 0x15
    bf50:	21 11       	cpse	r18, r1
    bf52:	f9 cf       	rjmp	.-14     	; 0xbf46 <f_getcwd+0x190>
    bf54:	9c 01       	movw	r18, r24
    bf56:	2f 5f       	subi	r18, 0xFF	; 255
    bf58:	3f 4f       	sbci	r19, 0xFF	; 255
    bf5a:	02 17       	cp	r16, r18
    bf5c:	13 07       	cpc	r17, r19
    bf5e:	08 f4       	brcc	.+2      	; 0xbf62 <f_getcwd+0x1ac>
    bf60:	51 c0       	rjmp	.+162    	; 0xc004 <f_getcwd+0x24e>
    bf62:	f6 01       	movw	r30, r12
    bf64:	e8 0f       	add	r30, r24
    bf66:	f9 1f       	adc	r31, r25
    bf68:	98 01       	movw	r18, r16
    bf6a:	ce 16       	cp	r12, r30
    bf6c:	df 06       	cpc	r13, r31
    bf6e:	71 f0       	breq	.+28     	; 0xbf8c <f_getcwd+0x1d6>
    bf70:	21 50       	subi	r18, 0x01	; 1
    bf72:	31 09       	sbc	r19, r1
    bf74:	45 89       	ldd	r20, Z+21	; 0x15
    bf76:	c9 5b       	subi	r28, 0xB9	; 185
    bf78:	de 4f       	sbci	r29, 0xFE	; 254
    bf7a:	a8 81       	ld	r26, Y
    bf7c:	b9 81       	ldd	r27, Y+1	; 0x01
    bf7e:	c7 54       	subi	r28, 0x47	; 71
    bf80:	d1 40       	sbci	r29, 0x01	; 1
    bf82:	a2 0f       	add	r26, r18
    bf84:	b3 1f       	adc	r27, r19
    bf86:	4c 93       	st	X, r20
    bf88:	31 97       	sbiw	r30, 0x01	; 1
    bf8a:	ef cf       	rjmp	.-34     	; 0xbf6a <f_getcwd+0x1b4>
    bf8c:	80 95       	com	r24
    bf8e:	90 95       	com	r25
    bf90:	08 0f       	add	r16, r24
    bf92:	19 1f       	adc	r17, r25
    bf94:	c9 5b       	subi	r28, 0xB9	; 185
    bf96:	de 4f       	sbci	r29, 0xFE	; 254
    bf98:	e8 81       	ld	r30, Y
    bf9a:	f9 81       	ldd	r31, Y+1	; 0x01
    bf9c:	c7 54       	subi	r28, 0x47	; 71
    bf9e:	d1 40       	sbci	r29, 0x01	; 1
    bfa0:	e0 0f       	add	r30, r16
    bfa2:	f1 1f       	adc	r31, r17
    bfa4:	9f e2       	ldi	r25, 0x2F	; 47
    bfa6:	90 83       	st	Z, r25
    bfa8:	4f cf       	rjmp	.-354    	; 0xbe48 <f_getcwd+0x92>
    bfaa:	08 15       	cp	r16, r8
    bfac:	19 05       	cpc	r17, r9
    bfae:	61 f4       	brne	.+24     	; 0xbfc8 <f_getcwd+0x212>
    bfb0:	01 50       	subi	r16, 0x01	; 1
    bfb2:	11 09       	sbc	r17, r1
    bfb4:	c9 5b       	subi	r28, 0xB9	; 185
    bfb6:	de 4f       	sbci	r29, 0xFE	; 254
    bfb8:	e8 81       	ld	r30, Y
    bfba:	f9 81       	ldd	r31, Y+1	; 0x01
    bfbc:	c7 54       	subi	r28, 0x47	; 71
    bfbe:	d1 40       	sbci	r29, 0x01	; 1
    bfc0:	e0 0f       	add	r30, r16
    bfc2:	f1 1f       	adc	r31, r17
    bfc4:	8f e2       	ldi	r24, 0x2F	; 47
    bfc6:	80 83       	st	Z, r24
    bfc8:	ef ef       	ldi	r30, 0xFF	; 255
    bfca:	ee 1a       	sub	r14, r30
    bfcc:	fe 0a       	sbc	r15, r30
    bfce:	c9 5b       	subi	r28, 0xB9	; 185
    bfd0:	de 4f       	sbci	r29, 0xFE	; 254
    bfd2:	e8 81       	ld	r30, Y
    bfd4:	f9 81       	ldd	r31, Y+1	; 0x01
    bfd6:	c7 54       	subi	r28, 0x47	; 71
    bfd8:	d1 40       	sbci	r29, 0x01	; 1
    bfda:	e0 0f       	add	r30, r16
    bfdc:	f1 1f       	adc	r31, r17
    bfde:	80 81       	ld	r24, Z
    bfe0:	f7 01       	movw	r30, r14
    bfe2:	31 97       	sbiw	r30, 0x01	; 1
    bfe4:	80 83       	st	Z, r24
    bfe6:	0f 5f       	subi	r16, 0xFF	; 255
    bfe8:	1f 4f       	sbci	r17, 0xFF	; 255
    bfea:	08 15       	cp	r16, r8
    bfec:	19 05       	cpc	r17, r9
    bfee:	60 f3       	brcs	.-40     	; 0xbfc8 <f_getcwd+0x212>
    bff0:	c5 01       	movw	r24, r10
    bff2:	0e 94 86 68 	call	0xd10c	; 0xd10c <ff_memfree>
    bff6:	f7 01       	movw	r30, r14
    bff8:	10 82       	st	Z, r1
    bffa:	c1 01       	movw	r24, r2
    bffc:	0d c0       	rjmp	.+26     	; 0xc018 <f_getcwd+0x262>
    bffe:	81 e1       	ldi	r24, 0x11	; 17
    c000:	90 e0       	ldi	r25, 0x00	; 0
    c002:	0a c0       	rjmp	.+20     	; 0xc018 <f_getcwd+0x262>
    c004:	81 e1       	ldi	r24, 0x11	; 17
    c006:	90 e0       	ldi	r25, 0x00	; 0
    c008:	1c 01       	movw	r2, r24
    c00a:	f2 cf       	rjmp	.-28     	; 0xbff0 <f_getcwd+0x23a>
    c00c:	84 30       	cpi	r24, 0x04	; 4
    c00e:	91 05       	cpc	r25, r1
    c010:	d9 f7       	brne	.-10     	; 0xc008 <f_getcwd+0x252>
    c012:	82 e0       	ldi	r24, 0x02	; 2
    c014:	90 e0       	ldi	r25, 0x00	; 0
    c016:	f8 cf       	rjmp	.-16     	; 0xc008 <f_getcwd+0x252>
    c018:	c8 5b       	subi	r28, 0xB8	; 184
    c01a:	de 4f       	sbci	r29, 0xFE	; 254
    c01c:	e2 e1       	ldi	r30, 0x12	; 18
    c01e:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

0000c022 <f_lseek>:
    c022:	aa e0       	ldi	r26, 0x0A	; 10
    c024:	b0 e0       	ldi	r27, 0x00	; 0
    c026:	e7 e1       	ldi	r30, 0x17	; 23
    c028:	f0 e6       	ldi	r31, 0x60	; 96
    c02a:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
    c02e:	1c 01       	movw	r2, r24
    c030:	6a 01       	movw	r12, r20
    c032:	7b 01       	movw	r14, r22
    c034:	be 01       	movw	r22, r28
    c036:	6f 5f       	subi	r22, 0xFF	; 255
    c038:	7f 4f       	sbci	r23, 0xFF	; 255
    c03a:	0e 94 1d 48 	call	0x903a	; 0x903a <validate>
    c03e:	00 97       	sbiw	r24, 0x00	; 0
    c040:	09 f0       	breq	.+2      	; 0xc044 <f_lseek+0x22>
    c042:	a6 c2       	rjmp	.+1356   	; 0xc590 <f_lseek+0x56e>
    c044:	f1 01       	movw	r30, r2
    c046:	87 85       	ldd	r24, Z+15	; 0x0f
    c048:	90 e0       	ldi	r25, 0x00	; 0
    c04a:	00 97       	sbiw	r24, 0x00	; 0
    c04c:	09 f0       	breq	.+2      	; 0xc050 <f_lseek+0x2e>
    c04e:	a0 c2       	rjmp	.+1344   	; 0xc590 <f_lseek+0x56e>
    c050:	22 a1       	ldd	r18, Z+34	; 0x22
    c052:	33 a1       	ldd	r19, Z+35	; 0x23
    c054:	21 15       	cp	r18, r1
    c056:	31 05       	cpc	r19, r1
    c058:	09 f4       	brne	.+2      	; 0xc05c <f_lseek+0x3a>
    c05a:	2d c1       	rjmp	.+602    	; 0xc2b6 <f_lseek+0x294>
    c05c:	ff ef       	ldi	r31, 0xFF	; 255
    c05e:	cf 16       	cp	r12, r31
    c060:	df 06       	cpc	r13, r31
    c062:	ef 06       	cpc	r14, r31
    c064:	ff 06       	cpc	r15, r31
    c066:	09 f0       	breq	.+2      	; 0xc06a <f_lseek+0x48>
    c068:	9a c0       	rjmp	.+308    	; 0xc19e <f_lseek+0x17c>
    c06a:	89 01       	movw	r16, r18
    c06c:	0c 5f       	subi	r16, 0xFC	; 252
    c06e:	1f 4f       	sbci	r17, 0xFF	; 255
    c070:	d9 01       	movw	r26, r18
    c072:	4d 91       	ld	r20, X+
    c074:	5d 91       	ld	r21, X+
    c076:	6d 91       	ld	r22, X+
    c078:	7c 91       	ld	r23, X
    c07a:	4f 83       	std	Y+7, r20	; 0x07
    c07c:	58 87       	std	Y+8, r21	; 0x08
    c07e:	69 87       	std	Y+9, r22	; 0x09
    c080:	7a 87       	std	Y+10, r23	; 0x0a
    c082:	f1 01       	movw	r30, r2
    c084:	86 80       	ldd	r8, Z+6	; 0x06
    c086:	97 80       	ldd	r9, Z+7	; 0x07
    c088:	a0 84       	ldd	r10, Z+8	; 0x08
    c08a:	b1 84       	ldd	r11, Z+9	; 0x09
    c08c:	52 e0       	ldi	r21, 0x02	; 2
    c08e:	c5 2e       	mov	r12, r21
    c090:	d1 2c       	mov	r13, r1
    c092:	e1 2c       	mov	r14, r1
    c094:	f1 2c       	mov	r15, r1
    c096:	81 14       	cp	r8, r1
    c098:	91 04       	cpc	r9, r1
    c09a:	a1 04       	cpc	r10, r1
    c09c:	b1 04       	cpc	r11, r1
    c09e:	09 f4       	brne	.+2      	; 0xc0a2 <f_lseek+0x80>
    c0a0:	65 c0       	rjmp	.+202    	; 0xc16c <f_lseek+0x14a>
    c0a2:	24 01       	movw	r4, r8
    c0a4:	35 01       	movw	r6, r10
    c0a6:	1b 82       	std	Y+3, r1	; 0x03
    c0a8:	1c 82       	std	Y+4, r1	; 0x04
    c0aa:	1d 82       	std	Y+5, r1	; 0x05
    c0ac:	1e 82       	std	Y+6, r1	; 0x06
    c0ae:	2b 81       	ldd	r18, Y+3	; 0x03
    c0b0:	3c 81       	ldd	r19, Y+4	; 0x04
    c0b2:	4d 81       	ldd	r20, Y+5	; 0x05
    c0b4:	5e 81       	ldd	r21, Y+6	; 0x06
    c0b6:	2f 5f       	subi	r18, 0xFF	; 255
    c0b8:	3f 4f       	sbci	r19, 0xFF	; 255
    c0ba:	4f 4f       	sbci	r20, 0xFF	; 255
    c0bc:	5f 4f       	sbci	r21, 0xFF	; 255
    c0be:	2b 83       	std	Y+3, r18	; 0x03
    c0c0:	3c 83       	std	Y+4, r19	; 0x04
    c0c2:	4d 83       	std	Y+5, r20	; 0x05
    c0c4:	5e 83       	std	Y+6, r21	; 0x06
    c0c6:	b3 01       	movw	r22, r6
    c0c8:	a2 01       	movw	r20, r4
    c0ca:	d1 01       	movw	r26, r2
    c0cc:	8d 91       	ld	r24, X+
    c0ce:	9c 91       	ld	r25, X
    c0d0:	0e 94 db 4e 	call	0x9db6	; 0x9db6 <get_fat.isra.9>
    c0d4:	62 30       	cpi	r22, 0x02	; 2
    c0d6:	71 05       	cpc	r23, r1
    c0d8:	81 05       	cpc	r24, r1
    c0da:	91 05       	cpc	r25, r1
    c0dc:	10 f4       	brcc	.+4      	; 0xc0e2 <f_lseek+0xc0>
    c0de:	82 e0       	ldi	r24, 0x02	; 2
    c0e0:	07 c0       	rjmp	.+14     	; 0xc0f0 <f_lseek+0xce>
    c0e2:	6f 3f       	cpi	r22, 0xFF	; 255
    c0e4:	ff ef       	ldi	r31, 0xFF	; 255
    c0e6:	7f 07       	cpc	r23, r31
    c0e8:	8f 07       	cpc	r24, r31
    c0ea:	9f 07       	cpc	r25, r31
    c0ec:	29 f4       	brne	.+10     	; 0xc0f8 <f_lseek+0xd6>
    c0ee:	81 e0       	ldi	r24, 0x01	; 1
    c0f0:	f1 01       	movw	r30, r2
    c0f2:	87 87       	std	Z+15, r24	; 0x0f
    c0f4:	90 e0       	ldi	r25, 0x00	; 0
    c0f6:	4c c2       	rjmp	.+1176   	; 0xc590 <f_lseek+0x56e>
    c0f8:	a3 01       	movw	r20, r6
    c0fa:	92 01       	movw	r18, r4
    c0fc:	2f 5f       	subi	r18, 0xFF	; 255
    c0fe:	3f 4f       	sbci	r19, 0xFF	; 255
    c100:	4f 4f       	sbci	r20, 0xFF	; 255
    c102:	5f 4f       	sbci	r21, 0xFF	; 255
    c104:	2b 01       	movw	r4, r22
    c106:	3c 01       	movw	r6, r24
    c108:	62 17       	cp	r22, r18
    c10a:	73 07       	cpc	r23, r19
    c10c:	84 07       	cpc	r24, r20
    c10e:	95 07       	cpc	r25, r21
    c110:	71 f2       	breq	.-100    	; 0xc0ae <f_lseek+0x8c>
    c112:	f2 e0       	ldi	r31, 0x02	; 2
    c114:	cf 0e       	add	r12, r31
    c116:	d1 1c       	adc	r13, r1
    c118:	e1 1c       	adc	r14, r1
    c11a:	f1 1c       	adc	r15, r1
    c11c:	2f 81       	ldd	r18, Y+7	; 0x07
    c11e:	38 85       	ldd	r19, Y+8	; 0x08
    c120:	49 85       	ldd	r20, Y+9	; 0x09
    c122:	5a 85       	ldd	r21, Y+10	; 0x0a
    c124:	2c 15       	cp	r18, r12
    c126:	3d 05       	cpc	r19, r13
    c128:	4e 05       	cpc	r20, r14
    c12a:	5f 05       	cpc	r21, r15
    c12c:	88 f0       	brcs	.+34     	; 0xc150 <f_lseek+0x12e>
    c12e:	2b 81       	ldd	r18, Y+3	; 0x03
    c130:	3c 81       	ldd	r19, Y+4	; 0x04
    c132:	4d 81       	ldd	r20, Y+5	; 0x05
    c134:	5e 81       	ldd	r21, Y+6	; 0x06
    c136:	d8 01       	movw	r26, r16
    c138:	2d 93       	st	X+, r18
    c13a:	3d 93       	st	X+, r19
    c13c:	4d 93       	st	X+, r20
    c13e:	5c 93       	st	X, r21
    c140:	13 97       	sbiw	r26, 0x03	; 3
    c142:	f8 01       	movw	r30, r16
    c144:	84 82       	std	Z+4, r8	; 0x04
    c146:	95 82       	std	Z+5, r9	; 0x05
    c148:	a6 82       	std	Z+6, r10	; 0x06
    c14a:	b7 82       	std	Z+7, r11	; 0x07
    c14c:	08 5f       	subi	r16, 0xF8	; 248
    c14e:	1f 4f       	sbci	r17, 0xFF	; 255
    c150:	e9 81       	ldd	r30, Y+1	; 0x01
    c152:	fa 81       	ldd	r31, Y+2	; 0x02
    c154:	81 8c       	ldd	r8, Z+25	; 0x19
    c156:	92 8c       	ldd	r9, Z+26	; 0x1a
    c158:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c15a:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c15c:	68 15       	cp	r22, r8
    c15e:	79 05       	cpc	r23, r9
    c160:	8a 05       	cpc	r24, r10
    c162:	9b 05       	cpc	r25, r11
    c164:	18 f4       	brcc	.+6      	; 0xc16c <f_lseek+0x14a>
    c166:	4b 01       	movw	r8, r22
    c168:	5c 01       	movw	r10, r24
    c16a:	9b cf       	rjmp	.-202    	; 0xc0a2 <f_lseek+0x80>
    c16c:	f1 01       	movw	r30, r2
    c16e:	a2 a1       	ldd	r26, Z+34	; 0x22
    c170:	b3 a1       	ldd	r27, Z+35	; 0x23
    c172:	cd 92       	st	X+, r12
    c174:	dd 92       	st	X+, r13
    c176:	ed 92       	st	X+, r14
    c178:	fc 92       	st	X, r15
    c17a:	13 97       	sbiw	r26, 0x03	; 3
    c17c:	2f 81       	ldd	r18, Y+7	; 0x07
    c17e:	38 85       	ldd	r19, Y+8	; 0x08
    c180:	49 85       	ldd	r20, Y+9	; 0x09
    c182:	5a 85       	ldd	r21, Y+10	; 0x0a
    c184:	2c 15       	cp	r18, r12
    c186:	3d 05       	cpc	r19, r13
    c188:	4e 05       	cpc	r20, r14
    c18a:	5f 05       	cpc	r21, r15
    c18c:	08 f4       	brcc	.+2      	; 0xc190 <f_lseek+0x16e>
    c18e:	f7 c1       	rjmp	.+1006   	; 0xc57e <f_lseek+0x55c>
    c190:	d8 01       	movw	r26, r16
    c192:	1d 92       	st	X+, r1
    c194:	1d 92       	st	X+, r1
    c196:	1d 92       	st	X+, r1
    c198:	1c 92       	st	X, r1
    c19a:	13 97       	sbiw	r26, 0x03	; 3
    c19c:	ee c1       	rjmp	.+988    	; 0xc57a <f_lseek+0x558>
    c19e:	f1 01       	movw	r30, r2
    c1a0:	82 85       	ldd	r24, Z+10	; 0x0a
    c1a2:	93 85       	ldd	r25, Z+11	; 0x0b
    c1a4:	a4 85       	ldd	r26, Z+12	; 0x0c
    c1a6:	b5 85       	ldd	r27, Z+13	; 0x0d
    c1a8:	46 01       	movw	r8, r12
    c1aa:	57 01       	movw	r10, r14
    c1ac:	8c 15       	cp	r24, r12
    c1ae:	9d 05       	cpc	r25, r13
    c1b0:	ae 05       	cpc	r26, r14
    c1b2:	bf 05       	cpc	r27, r15
    c1b4:	10 f4       	brcc	.+4      	; 0xc1ba <f_lseek+0x198>
    c1b6:	4c 01       	movw	r8, r24
    c1b8:	5d 01       	movw	r10, r26
    c1ba:	f1 01       	movw	r30, r2
    c1bc:	80 8a       	std	Z+16, r8	; 0x10
    c1be:	91 8a       	std	Z+17, r9	; 0x11
    c1c0:	a2 8a       	std	Z+18, r10	; 0x12
    c1c2:	b3 8a       	std	Z+19, r11	; 0x13
    c1c4:	81 14       	cp	r8, r1
    c1c6:	91 04       	cpc	r9, r1
    c1c8:	a1 04       	cpc	r10, r1
    c1ca:	b1 04       	cpc	r11, r1
    c1cc:	09 f4       	brne	.+2      	; 0xc1d0 <f_lseek+0x1ae>
    c1ce:	d5 c1       	rjmp	.+938    	; 0xc57a <f_lseek+0x558>
    c1d0:	24 01       	movw	r4, r8
    c1d2:	35 01       	movw	r6, r10
    c1d4:	f1 e0       	ldi	r31, 0x01	; 1
    c1d6:	4f 1a       	sub	r4, r31
    c1d8:	51 08       	sbc	r5, r1
    c1da:	61 08       	sbc	r6, r1
    c1dc:	71 08       	sbc	r7, r1
    c1de:	b3 01       	movw	r22, r6
    c1e0:	a2 01       	movw	r20, r4
    c1e2:	c1 01       	movw	r24, r2
    c1e4:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <clmt_clust>
    c1e8:	ab 01       	movw	r20, r22
    c1ea:	bc 01       	movw	r22, r24
    c1ec:	f1 01       	movw	r30, r2
    c1ee:	44 8b       	std	Z+20, r20	; 0x14
    c1f0:	55 8b       	std	Z+21, r21	; 0x15
    c1f2:	66 8b       	std	Z+22, r22	; 0x16
    c1f4:	77 8b       	std	Z+23, r23	; 0x17
    c1f6:	e9 80       	ldd	r14, Y+1	; 0x01
    c1f8:	fa 80       	ldd	r15, Y+2	; 0x02
    c1fa:	c7 01       	movw	r24, r14
    c1fc:	0e 94 7e 47 	call	0x8efc	; 0x8efc <clst2sect>
    c200:	61 15       	cp	r22, r1
    c202:	71 05       	cpc	r23, r1
    c204:	81 05       	cpc	r24, r1
    c206:	91 05       	cpc	r25, r1
    c208:	09 f4       	brne	.+2      	; 0xc20c <f_lseek+0x1ea>
    c20a:	69 cf       	rjmp	.-302    	; 0xc0de <f_lseek+0xbc>
    c20c:	95 01       	movw	r18, r10
    c20e:	84 01       	movw	r16, r8
    c210:	11 70       	andi	r17, 0x01	; 1
    c212:	22 27       	eor	r18, r18
    c214:	33 27       	eor	r19, r19
    c216:	01 15       	cp	r16, r1
    c218:	11 05       	cpc	r17, r1
    c21a:	21 05       	cpc	r18, r1
    c21c:	31 05       	cpc	r19, r1
    c21e:	09 f4       	brne	.+2      	; 0xc222 <f_lseek+0x200>
    c220:	ac c1       	rjmp	.+856    	; 0xc57a <f_lseek+0x558>
    c222:	f7 01       	movw	r30, r14
    c224:	81 84       	ldd	r8, Z+9	; 0x09
    c226:	92 84       	ldd	r9, Z+10	; 0x0a
    c228:	f1 e0       	ldi	r31, 0x01	; 1
    c22a:	8f 1a       	sub	r8, r31
    c22c:	91 08       	sbc	r9, r1
    c22e:	a1 2c       	mov	r10, r1
    c230:	b1 2c       	mov	r11, r1
    c232:	49 e0       	ldi	r20, 0x09	; 9
    c234:	76 94       	lsr	r7
    c236:	67 94       	ror	r6
    c238:	57 94       	ror	r5
    c23a:	47 94       	ror	r4
    c23c:	4a 95       	dec	r20
    c23e:	d1 f7       	brne	.-12     	; 0xc234 <f_lseek+0x212>
    c240:	48 20       	and	r4, r8
    c242:	59 20       	and	r5, r9
    c244:	6a 20       	and	r6, r10
    c246:	7b 20       	and	r7, r11
    c248:	53 01       	movw	r10, r6
    c24a:	42 01       	movw	r8, r4
    c24c:	86 0e       	add	r8, r22
    c24e:	97 1e       	adc	r9, r23
    c250:	a8 1e       	adc	r10, r24
    c252:	b9 1e       	adc	r11, r25
    c254:	f1 01       	movw	r30, r2
    c256:	20 8d       	ldd	r18, Z+24	; 0x18
    c258:	31 8d       	ldd	r19, Z+25	; 0x19
    c25a:	42 8d       	ldd	r20, Z+26	; 0x1a
    c25c:	53 8d       	ldd	r21, Z+27	; 0x1b
    c25e:	82 16       	cp	r8, r18
    c260:	93 06       	cpc	r9, r19
    c262:	a4 06       	cpc	r10, r20
    c264:	b5 06       	cpc	r11, r21
    c266:	09 f4       	brne	.+2      	; 0xc26a <f_lseek+0x248>
    c268:	88 c1       	rjmp	.+784    	; 0xc57a <f_lseek+0x558>
    c26a:	86 85       	ldd	r24, Z+14	; 0x0e
    c26c:	b1 01       	movw	r22, r2
    c26e:	6c 5d       	subi	r22, 0xDC	; 220
    c270:	7f 4f       	sbci	r23, 0xFF	; 255
    c272:	6b 01       	movw	r12, r22
    c274:	87 ff       	sbrs	r24, 7
    c276:	0d c0       	rjmp	.+26     	; 0xc292 <f_lseek+0x270>
    c278:	01 e0       	ldi	r16, 0x01	; 1
    c27a:	10 e0       	ldi	r17, 0x00	; 0
    c27c:	f7 01       	movw	r30, r14
    c27e:	81 81       	ldd	r24, Z+1	; 0x01
    c280:	0e 94 4f 69 	call	0xd29e	; 0xd29e <disk_write>
    c284:	89 2b       	or	r24, r25
    c286:	09 f0       	breq	.+2      	; 0xc28a <f_lseek+0x268>
    c288:	32 cf       	rjmp	.-412    	; 0xc0ee <f_lseek+0xcc>
    c28a:	f1 01       	movw	r30, r2
    c28c:	86 85       	ldd	r24, Z+14	; 0x0e
    c28e:	8f 77       	andi	r24, 0x7F	; 127
    c290:	86 87       	std	Z+14, r24	; 0x0e
    c292:	e9 81       	ldd	r30, Y+1	; 0x01
    c294:	fa 81       	ldd	r31, Y+2	; 0x02
    c296:	01 e0       	ldi	r16, 0x01	; 1
    c298:	10 e0       	ldi	r17, 0x00	; 0
    c29a:	a5 01       	movw	r20, r10
    c29c:	94 01       	movw	r18, r8
    c29e:	b6 01       	movw	r22, r12
    c2a0:	81 81       	ldd	r24, Z+1	; 0x01
    c2a2:	ed d7       	rcall	.+4058   	; 0xd27e <disk_read>
    c2a4:	89 2b       	or	r24, r25
    c2a6:	09 f0       	breq	.+2      	; 0xc2aa <f_lseek+0x288>
    c2a8:	22 cf       	rjmp	.-444    	; 0xc0ee <f_lseek+0xcc>
    c2aa:	f1 01       	movw	r30, r2
    c2ac:	80 8e       	std	Z+24, r8	; 0x18
    c2ae:	91 8e       	std	Z+25, r9	; 0x19
    c2b0:	a2 8e       	std	Z+26, r10	; 0x1a
    c2b2:	b3 8e       	std	Z+27, r11	; 0x1b
    c2b4:	62 c1       	rjmp	.+708    	; 0xc57a <f_lseek+0x558>
    c2b6:	f1 01       	movw	r30, r2
    c2b8:	82 85       	ldd	r24, Z+10	; 0x0a
    c2ba:	93 85       	ldd	r25, Z+11	; 0x0b
    c2bc:	a4 85       	ldd	r26, Z+12	; 0x0c
    c2be:	b5 85       	ldd	r27, Z+13	; 0x0d
    c2c0:	8c 15       	cp	r24, r12
    c2c2:	9d 05       	cpc	r25, r13
    c2c4:	ae 05       	cpc	r26, r14
    c2c6:	bf 05       	cpc	r27, r15
    c2c8:	28 f4       	brcc	.+10     	; 0xc2d4 <f_lseek+0x2b2>
    c2ca:	26 85       	ldd	r18, Z+14	; 0x0e
    c2cc:	21 fd       	sbrc	r18, 1
    c2ce:	02 c0       	rjmp	.+4      	; 0xc2d4 <f_lseek+0x2b2>
    c2d0:	6c 01       	movw	r12, r24
    c2d2:	7d 01       	movw	r14, r26
    c2d4:	f1 01       	movw	r30, r2
    c2d6:	40 88       	ldd	r4, Z+16	; 0x10
    c2d8:	51 88       	ldd	r5, Z+17	; 0x11
    c2da:	62 88       	ldd	r6, Z+18	; 0x12
    c2dc:	73 88       	ldd	r7, Z+19	; 0x13
    c2de:	10 8a       	std	Z+16, r1	; 0x10
    c2e0:	11 8a       	std	Z+17, r1	; 0x11
    c2e2:	12 8a       	std	Z+18, r1	; 0x12
    c2e4:	13 8a       	std	Z+19, r1	; 0x13
    c2e6:	c1 14       	cp	r12, r1
    c2e8:	d1 04       	cpc	r13, r1
    c2ea:	e1 04       	cpc	r14, r1
    c2ec:	f1 04       	cpc	r15, r1
    c2ee:	09 f4       	brne	.+2      	; 0xc2f2 <f_lseek+0x2d0>
    c2f0:	48 c1       	rjmp	.+656    	; 0xc582 <f_lseek+0x560>
    c2f2:	e9 81       	ldd	r30, Y+1	; 0x01
    c2f4:	fa 81       	ldd	r31, Y+2	; 0x02
    c2f6:	81 84       	ldd	r8, Z+9	; 0x09
    c2f8:	92 84       	ldd	r9, Z+10	; 0x0a
    c2fa:	a1 2c       	mov	r10, r1
    c2fc:	b1 2c       	mov	r11, r1
    c2fe:	39 e0       	ldi	r19, 0x09	; 9
    c300:	88 0c       	add	r8, r8
    c302:	99 1c       	adc	r9, r9
    c304:	aa 1c       	adc	r10, r10
    c306:	bb 1c       	adc	r11, r11
    c308:	3a 95       	dec	r19
    c30a:	d1 f7       	brne	.-12     	; 0xc300 <f_lseek+0x2de>
    c30c:	41 14       	cp	r4, r1
    c30e:	51 04       	cpc	r5, r1
    c310:	61 04       	cpc	r6, r1
    c312:	71 04       	cpc	r7, r1
    c314:	d9 f1       	breq	.+118    	; 0xc38c <f_lseek+0x36a>
    c316:	f1 e0       	ldi	r31, 0x01	; 1
    c318:	4f 1a       	sub	r4, r31
    c31a:	51 08       	sbc	r5, r1
    c31c:	61 08       	sbc	r6, r1
    c31e:	71 08       	sbc	r7, r1
    c320:	c7 01       	movw	r24, r14
    c322:	b6 01       	movw	r22, r12
    c324:	61 50       	subi	r22, 0x01	; 1
    c326:	71 09       	sbc	r23, r1
    c328:	81 09       	sbc	r24, r1
    c32a:	91 09       	sbc	r25, r1
    c32c:	a5 01       	movw	r20, r10
    c32e:	94 01       	movw	r18, r8
    c330:	0e 94 f9 e5 	call	0x1cbf2	; 0x1cbf2 <__udivmodsi4>
    c334:	2b 83       	std	Y+3, r18	; 0x03
    c336:	3c 83       	std	Y+4, r19	; 0x04
    c338:	4d 83       	std	Y+5, r20	; 0x05
    c33a:	5e 83       	std	Y+6, r21	; 0x06
    c33c:	c3 01       	movw	r24, r6
    c33e:	b2 01       	movw	r22, r4
    c340:	a5 01       	movw	r20, r10
    c342:	94 01       	movw	r18, r8
    c344:	0e 94 f9 e5 	call	0x1cbf2	; 0x1cbf2 <__udivmodsi4>
    c348:	6b 81       	ldd	r22, Y+3	; 0x03
    c34a:	7c 81       	ldd	r23, Y+4	; 0x04
    c34c:	8d 81       	ldd	r24, Y+5	; 0x05
    c34e:	9e 81       	ldd	r25, Y+6	; 0x06
    c350:	62 17       	cp	r22, r18
    c352:	73 07       	cpc	r23, r19
    c354:	84 07       	cpc	r24, r20
    c356:	95 07       	cpc	r25, r21
    c358:	c8 f0       	brcs	.+50     	; 0xc38c <f_lseek+0x36a>
    c35a:	88 27       	eor	r24, r24
    c35c:	99 27       	eor	r25, r25
    c35e:	dc 01       	movw	r26, r24
    c360:	88 19       	sub	r24, r8
    c362:	99 09       	sbc	r25, r9
    c364:	aa 09       	sbc	r26, r10
    c366:	bb 09       	sbc	r27, r11
    c368:	48 22       	and	r4, r24
    c36a:	59 22       	and	r5, r25
    c36c:	6a 22       	and	r6, r26
    c36e:	7b 22       	and	r7, r27
    c370:	f1 01       	movw	r30, r2
    c372:	40 8a       	std	Z+16, r4	; 0x10
    c374:	51 8a       	std	Z+17, r5	; 0x11
    c376:	62 8a       	std	Z+18, r6	; 0x12
    c378:	73 8a       	std	Z+19, r7	; 0x13
    c37a:	c4 18       	sub	r12, r4
    c37c:	d5 08       	sbc	r13, r5
    c37e:	e6 08       	sbc	r14, r6
    c380:	f7 08       	sbc	r15, r7
    c382:	44 89       	ldd	r20, Z+20	; 0x14
    c384:	55 89       	ldd	r21, Z+21	; 0x15
    c386:	66 89       	ldd	r22, Z+22	; 0x16
    c388:	77 89       	ldd	r23, Z+23	; 0x17
    c38a:	29 c0       	rjmp	.+82     	; 0xc3de <f_lseek+0x3bc>
    c38c:	f1 01       	movw	r30, r2
    c38e:	46 81       	ldd	r20, Z+6	; 0x06
    c390:	57 81       	ldd	r21, Z+7	; 0x07
    c392:	60 85       	ldd	r22, Z+8	; 0x08
    c394:	71 85       	ldd	r23, Z+9	; 0x09
    c396:	41 15       	cp	r20, r1
    c398:	51 05       	cpc	r21, r1
    c39a:	61 05       	cpc	r22, r1
    c39c:	71 05       	cpc	r23, r1
    c39e:	d1 f4       	brne	.+52     	; 0xc3d4 <f_lseek+0x3b2>
    c3a0:	40 e0       	ldi	r20, 0x00	; 0
    c3a2:	50 e0       	ldi	r21, 0x00	; 0
    c3a4:	ba 01       	movw	r22, r20
    c3a6:	c1 01       	movw	r24, r2
    c3a8:	0e 94 50 50 	call	0xa0a0	; 0xa0a0 <create_chain>
    c3ac:	ab 01       	movw	r20, r22
    c3ae:	bc 01       	movw	r22, r24
    c3b0:	41 30       	cpi	r20, 0x01	; 1
    c3b2:	51 05       	cpc	r21, r1
    c3b4:	61 05       	cpc	r22, r1
    c3b6:	71 05       	cpc	r23, r1
    c3b8:	09 f4       	brne	.+2      	; 0xc3bc <f_lseek+0x39a>
    c3ba:	91 ce       	rjmp	.-734    	; 0xc0de <f_lseek+0xbc>
    c3bc:	4f 3f       	cpi	r20, 0xFF	; 255
    c3be:	ff ef       	ldi	r31, 0xFF	; 255
    c3c0:	5f 07       	cpc	r21, r31
    c3c2:	6f 07       	cpc	r22, r31
    c3c4:	7f 07       	cpc	r23, r31
    c3c6:	09 f4       	brne	.+2      	; 0xc3ca <f_lseek+0x3a8>
    c3c8:	92 ce       	rjmp	.-732    	; 0xc0ee <f_lseek+0xcc>
    c3ca:	f1 01       	movw	r30, r2
    c3cc:	46 83       	std	Z+6, r20	; 0x06
    c3ce:	57 83       	std	Z+7, r21	; 0x07
    c3d0:	60 87       	std	Z+8, r22	; 0x08
    c3d2:	71 87       	std	Z+9, r23	; 0x09
    c3d4:	f1 01       	movw	r30, r2
    c3d6:	44 8b       	std	Z+20, r20	; 0x14
    c3d8:	55 8b       	std	Z+21, r21	; 0x15
    c3da:	66 8b       	std	Z+22, r22	; 0x16
    c3dc:	77 8b       	std	Z+23, r23	; 0x17
    c3de:	41 15       	cp	r20, r1
    c3e0:	51 05       	cpc	r21, r1
    c3e2:	61 05       	cpc	r22, r1
    c3e4:	71 05       	cpc	r23, r1
    c3e6:	09 f0       	breq	.+2      	; 0xc3ea <f_lseek+0x3c8>
    c3e8:	40 c0       	rjmp	.+128    	; 0xc46a <f_lseek+0x448>
    c3ea:	c1 2c       	mov	r12, r1
    c3ec:	d1 2c       	mov	r13, r1
    c3ee:	76 01       	movw	r14, r12
    c3f0:	79 c0       	rjmp	.+242    	; 0xc4e4 <f_lseek+0x4c2>
    c3f2:	c8 18       	sub	r12, r8
    c3f4:	d9 08       	sbc	r13, r9
    c3f6:	ea 08       	sbc	r14, r10
    c3f8:	fb 08       	sbc	r15, r11
    c3fa:	f1 01       	movw	r30, r2
    c3fc:	80 89       	ldd	r24, Z+16	; 0x10
    c3fe:	91 89       	ldd	r25, Z+17	; 0x11
    c400:	a2 89       	ldd	r26, Z+18	; 0x12
    c402:	b3 89       	ldd	r27, Z+19	; 0x13
    c404:	88 0d       	add	r24, r8
    c406:	99 1d       	adc	r25, r9
    c408:	aa 1d       	adc	r26, r10
    c40a:	bb 1d       	adc	r27, r11
    c40c:	80 8b       	std	Z+16, r24	; 0x10
    c40e:	91 8b       	std	Z+17, r25	; 0x11
    c410:	a2 8b       	std	Z+18, r26	; 0x12
    c412:	b3 8b       	std	Z+19, r27	; 0x13
    c414:	86 85       	ldd	r24, Z+14	; 0x0e
    c416:	81 ff       	sbrs	r24, 1
    c418:	2f c0       	rjmp	.+94     	; 0xc478 <f_lseek+0x456>
    c41a:	c1 01       	movw	r24, r2
    c41c:	0e 94 50 50 	call	0xa0a0	; 0xa0a0 <create_chain>
    c420:	ab 01       	movw	r20, r22
    c422:	bc 01       	movw	r22, r24
    c424:	41 15       	cp	r20, r1
    c426:	51 05       	cpc	r21, r1
    c428:	61 05       	cpc	r22, r1
    c42a:	71 05       	cpc	r23, r1
    c42c:	61 f1       	breq	.+88     	; 0xc486 <f_lseek+0x464>
    c42e:	4f 3f       	cpi	r20, 0xFF	; 255
    c430:	bf ef       	ldi	r27, 0xFF	; 255
    c432:	5b 07       	cpc	r21, r27
    c434:	6b 07       	cpc	r22, r27
    c436:	7b 07       	cpc	r23, r27
    c438:	09 f4       	brne	.+2      	; 0xc43c <f_lseek+0x41a>
    c43a:	59 ce       	rjmp	.-846    	; 0xc0ee <f_lseek+0xcc>
    c43c:	42 30       	cpi	r20, 0x02	; 2
    c43e:	51 05       	cpc	r21, r1
    c440:	61 05       	cpc	r22, r1
    c442:	71 05       	cpc	r23, r1
    c444:	08 f4       	brcc	.+2      	; 0xc448 <f_lseek+0x426>
    c446:	4b ce       	rjmp	.-874    	; 0xc0de <f_lseek+0xbc>
    c448:	e9 81       	ldd	r30, Y+1	; 0x01
    c44a:	fa 81       	ldd	r31, Y+2	; 0x02
    c44c:	81 8d       	ldd	r24, Z+25	; 0x19
    c44e:	92 8d       	ldd	r25, Z+26	; 0x1a
    c450:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c452:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c454:	48 17       	cp	r20, r24
    c456:	59 07       	cpc	r21, r25
    c458:	6a 07       	cpc	r22, r26
    c45a:	7b 07       	cpc	r23, r27
    c45c:	08 f0       	brcs	.+2      	; 0xc460 <f_lseek+0x43e>
    c45e:	3f ce       	rjmp	.-898    	; 0xc0de <f_lseek+0xbc>
    c460:	f1 01       	movw	r30, r2
    c462:	44 8b       	std	Z+20, r20	; 0x14
    c464:	55 8b       	std	Z+21, r21	; 0x15
    c466:	66 8b       	std	Z+22, r22	; 0x16
    c468:	77 8b       	std	Z+23, r23	; 0x17
    c46a:	8c 14       	cp	r8, r12
    c46c:	9d 04       	cpc	r9, r13
    c46e:	ae 04       	cpc	r10, r14
    c470:	bf 04       	cpc	r11, r15
    c472:	08 f4       	brcc	.+2      	; 0xc476 <f_lseek+0x454>
    c474:	be cf       	rjmp	.-132    	; 0xc3f2 <f_lseek+0x3d0>
    c476:	0a c0       	rjmp	.+20     	; 0xc48c <f_lseek+0x46a>
    c478:	80 81       	ld	r24, Z
    c47a:	91 81       	ldd	r25, Z+1	; 0x01
    c47c:	0e 94 db 4e 	call	0x9db6	; 0x9db6 <get_fat.isra.9>
    c480:	ab 01       	movw	r20, r22
    c482:	bc 01       	movw	r22, r24
    c484:	d4 cf       	rjmp	.-88     	; 0xc42e <f_lseek+0x40c>
    c486:	c1 2c       	mov	r12, r1
    c488:	d1 2c       	mov	r13, r1
    c48a:	76 01       	movw	r14, r12
    c48c:	f1 01       	movw	r30, r2
    c48e:	80 89       	ldd	r24, Z+16	; 0x10
    c490:	91 89       	ldd	r25, Z+17	; 0x11
    c492:	a2 89       	ldd	r26, Z+18	; 0x12
    c494:	b3 89       	ldd	r27, Z+19	; 0x13
    c496:	8c 0d       	add	r24, r12
    c498:	9d 1d       	adc	r25, r13
    c49a:	ae 1d       	adc	r26, r14
    c49c:	bf 1d       	adc	r27, r15
    c49e:	80 8b       	std	Z+16, r24	; 0x10
    c4a0:	91 8b       	std	Z+17, r25	; 0x11
    c4a2:	a2 8b       	std	Z+18, r26	; 0x12
    c4a4:	b3 8b       	std	Z+19, r27	; 0x13
    c4a6:	d7 01       	movw	r26, r14
    c4a8:	c6 01       	movw	r24, r12
    c4aa:	91 70       	andi	r25, 0x01	; 1
    c4ac:	aa 27       	eor	r26, r26
    c4ae:	bb 27       	eor	r27, r27
    c4b0:	89 2b       	or	r24, r25
    c4b2:	8a 2b       	or	r24, r26
    c4b4:	8b 2b       	or	r24, r27
    c4b6:	09 f4       	brne	.+2      	; 0xc4ba <f_lseek+0x498>
    c4b8:	98 cf       	rjmp	.-208    	; 0xc3ea <f_lseek+0x3c8>
    c4ba:	89 81       	ldd	r24, Y+1	; 0x01
    c4bc:	9a 81       	ldd	r25, Y+2	; 0x02
    c4be:	0e 94 7e 47 	call	0x8efc	; 0x8efc <clst2sect>
    c4c2:	61 15       	cp	r22, r1
    c4c4:	71 05       	cpc	r23, r1
    c4c6:	81 05       	cpc	r24, r1
    c4c8:	91 05       	cpc	r25, r1
    c4ca:	09 f4       	brne	.+2      	; 0xc4ce <f_lseek+0x4ac>
    c4cc:	08 ce       	rjmp	.-1008   	; 0xc0de <f_lseek+0xbc>
    c4ce:	29 e0       	ldi	r18, 0x09	; 9
    c4d0:	f6 94       	lsr	r15
    c4d2:	e7 94       	ror	r14
    c4d4:	d7 94       	ror	r13
    c4d6:	c7 94       	ror	r12
    c4d8:	2a 95       	dec	r18
    c4da:	d1 f7       	brne	.-12     	; 0xc4d0 <f_lseek+0x4ae>
    c4dc:	c6 0e       	add	r12, r22
    c4de:	d7 1e       	adc	r13, r23
    c4e0:	e8 1e       	adc	r14, r24
    c4e2:	f9 1e       	adc	r15, r25
    c4e4:	f1 01       	movw	r30, r2
    c4e6:	80 89       	ldd	r24, Z+16	; 0x10
    c4e8:	91 89       	ldd	r25, Z+17	; 0x11
    c4ea:	a2 89       	ldd	r26, Z+18	; 0x12
    c4ec:	b3 89       	ldd	r27, Z+19	; 0x13
    c4ee:	42 85       	ldd	r20, Z+10	; 0x0a
    c4f0:	53 85       	ldd	r21, Z+11	; 0x0b
    c4f2:	64 85       	ldd	r22, Z+12	; 0x0c
    c4f4:	75 85       	ldd	r23, Z+13	; 0x0d
    c4f6:	48 17       	cp	r20, r24
    c4f8:	59 07       	cpc	r21, r25
    c4fa:	6a 07       	cpc	r22, r26
    c4fc:	7b 07       	cpc	r23, r27
    c4fe:	38 f4       	brcc	.+14     	; 0xc50e <f_lseek+0x4ec>
    c500:	82 87       	std	Z+10, r24	; 0x0a
    c502:	93 87       	std	Z+11, r25	; 0x0b
    c504:	a4 87       	std	Z+12, r26	; 0x0c
    c506:	b5 87       	std	Z+13, r27	; 0x0d
    c508:	26 85       	ldd	r18, Z+14	; 0x0e
    c50a:	20 64       	ori	r18, 0x40	; 64
    c50c:	26 87       	std	Z+14, r18	; 0x0e
    c50e:	91 70       	andi	r25, 0x01	; 1
    c510:	aa 27       	eor	r26, r26
    c512:	bb 27       	eor	r27, r27
    c514:	89 2b       	or	r24, r25
    c516:	8a 2b       	or	r24, r26
    c518:	8b 2b       	or	r24, r27
    c51a:	79 f1       	breq	.+94     	; 0xc57a <f_lseek+0x558>
    c51c:	f1 01       	movw	r30, r2
    c51e:	20 8d       	ldd	r18, Z+24	; 0x18
    c520:	31 8d       	ldd	r19, Z+25	; 0x19
    c522:	42 8d       	ldd	r20, Z+26	; 0x1a
    c524:	53 8d       	ldd	r21, Z+27	; 0x1b
    c526:	2c 15       	cp	r18, r12
    c528:	3d 05       	cpc	r19, r13
    c52a:	4e 05       	cpc	r20, r14
    c52c:	5f 05       	cpc	r21, r15
    c52e:	29 f1       	breq	.+74     	; 0xc57a <f_lseek+0x558>
    c530:	86 85       	ldd	r24, Z+14	; 0x0e
    c532:	b1 01       	movw	r22, r2
    c534:	6c 5d       	subi	r22, 0xDC	; 220
    c536:	7f 4f       	sbci	r23, 0xFF	; 255
    c538:	5b 01       	movw	r10, r22
    c53a:	87 ff       	sbrs	r24, 7
    c53c:	0d c0       	rjmp	.+26     	; 0xc558 <f_lseek+0x536>
    c53e:	e9 81       	ldd	r30, Y+1	; 0x01
    c540:	fa 81       	ldd	r31, Y+2	; 0x02
    c542:	01 e0       	ldi	r16, 0x01	; 1
    c544:	10 e0       	ldi	r17, 0x00	; 0
    c546:	81 81       	ldd	r24, Z+1	; 0x01
    c548:	aa d6       	rcall	.+3412   	; 0xd29e <disk_write>
    c54a:	89 2b       	or	r24, r25
    c54c:	09 f0       	breq	.+2      	; 0xc550 <f_lseek+0x52e>
    c54e:	cf cd       	rjmp	.-1122   	; 0xc0ee <f_lseek+0xcc>
    c550:	f1 01       	movw	r30, r2
    c552:	86 85       	ldd	r24, Z+14	; 0x0e
    c554:	8f 77       	andi	r24, 0x7F	; 127
    c556:	86 87       	std	Z+14, r24	; 0x0e
    c558:	e9 81       	ldd	r30, Y+1	; 0x01
    c55a:	fa 81       	ldd	r31, Y+2	; 0x02
    c55c:	01 e0       	ldi	r16, 0x01	; 1
    c55e:	10 e0       	ldi	r17, 0x00	; 0
    c560:	a7 01       	movw	r20, r14
    c562:	96 01       	movw	r18, r12
    c564:	b5 01       	movw	r22, r10
    c566:	81 81       	ldd	r24, Z+1	; 0x01
    c568:	8a d6       	rcall	.+3348   	; 0xd27e <disk_read>
    c56a:	89 2b       	or	r24, r25
    c56c:	09 f0       	breq	.+2      	; 0xc570 <f_lseek+0x54e>
    c56e:	bf cd       	rjmp	.-1154   	; 0xc0ee <f_lseek+0xcc>
    c570:	f1 01       	movw	r30, r2
    c572:	c0 8e       	std	Z+24, r12	; 0x18
    c574:	d1 8e       	std	Z+25, r13	; 0x19
    c576:	e2 8e       	std	Z+26, r14	; 0x1a
    c578:	f3 8e       	std	Z+27, r15	; 0x1b
    c57a:	80 e0       	ldi	r24, 0x00	; 0
    c57c:	bb cd       	rjmp	.-1162   	; 0xc0f4 <f_lseek+0xd2>
    c57e:	81 e1       	ldi	r24, 0x11	; 17
    c580:	b9 cd       	rjmp	.-1166   	; 0xc0f4 <f_lseek+0xd2>
    c582:	80 e0       	ldi	r24, 0x00	; 0
    c584:	90 e0       	ldi	r25, 0x00	; 0
    c586:	dc 01       	movw	r26, r24
    c588:	c1 2c       	mov	r12, r1
    c58a:	d1 2c       	mov	r13, r1
    c58c:	76 01       	movw	r14, r12
    c58e:	bf cf       	rjmp	.-130    	; 0xc50e <f_lseek+0x4ec>
    c590:	2a 96       	adiw	r28, 0x0a	; 10
    c592:	e2 e1       	ldi	r30, 0x12	; 18
    c594:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

0000c598 <f_opendir>:
    c598:	a4 e0       	ldi	r26, 0x04	; 4
    c59a:	b0 e0       	ldi	r27, 0x00	; 0
    c59c:	e2 ed       	ldi	r30, 0xD2	; 210
    c59e:	f2 e6       	ldi	r31, 0x62	; 98
    c5a0:	0c 94 70 e6 	jmp	0x1cce0	; 0x1cce0 <__prologue_saves__+0x14>
    c5a4:	7c 83       	std	Y+4, r23	; 0x04
    c5a6:	6b 83       	std	Y+3, r22	; 0x03
    c5a8:	00 97       	sbiw	r24, 0x00	; 0
    c5aa:	09 f4       	brne	.+2      	; 0xc5ae <f_opendir+0x16>
    c5ac:	48 c0       	rjmp	.+144    	; 0xc63e <f_opendir+0xa6>
    c5ae:	8c 01       	movw	r16, r24
    c5b0:	40 e0       	ldi	r20, 0x00	; 0
    c5b2:	be 01       	movw	r22, r28
    c5b4:	6f 5f       	subi	r22, 0xFF	; 255
    c5b6:	7f 4f       	sbci	r23, 0xFF	; 255
    c5b8:	ce 01       	movw	r24, r28
    c5ba:	03 96       	adiw	r24, 0x03	; 3
    c5bc:	0e 94 88 4b 	call	0x9710	; 0x9710 <mount_volume>
    c5c0:	7c 01       	movw	r14, r24
    c5c2:	89 2b       	or	r24, r25
    c5c4:	b9 f5       	brne	.+110    	; 0xc634 <f_opendir+0x9c>
    c5c6:	89 81       	ldd	r24, Y+1	; 0x01
    c5c8:	9a 81       	ldd	r25, Y+2	; 0x02
    c5ca:	f8 01       	movw	r30, r16
    c5cc:	91 83       	std	Z+1, r25	; 0x01
    c5ce:	80 83       	st	Z, r24
    c5d0:	80 e0       	ldi	r24, 0x00	; 0
    c5d2:	92 e0       	ldi	r25, 0x02	; 2
    c5d4:	98 d5       	rcall	.+2864   	; 0xd106 <ff_memalloc>
    c5d6:	6c 01       	movw	r12, r24
    c5d8:	00 97       	sbiw	r24, 0x00	; 0
    c5da:	99 f1       	breq	.+102    	; 0xc642 <f_opendir+0xaa>
    c5dc:	e9 81       	ldd	r30, Y+1	; 0x01
    c5de:	fa 81       	ldd	r31, Y+2	; 0x02
    c5e0:	94 87       	std	Z+12, r25	; 0x0c
    c5e2:	83 87       	std	Z+11, r24	; 0x0b
    c5e4:	6b 81       	ldd	r22, Y+3	; 0x03
    c5e6:	7c 81       	ldd	r23, Y+4	; 0x04
    c5e8:	c8 01       	movw	r24, r16
    c5ea:	0e 94 d5 56 	call	0xadaa	; 0xadaa <follow_path>
    c5ee:	7c 01       	movw	r14, r24
    c5f0:	89 2b       	or	r24, r25
    c5f2:	b9 f4       	brne	.+46     	; 0xc622 <f_opendir+0x8a>
    c5f4:	f8 01       	movw	r30, r16
    c5f6:	87 a1       	ldd	r24, Z+39	; 0x27
    c5f8:	87 fd       	sbrc	r24, 7
    c5fa:	28 c0       	rjmp	.+80     	; 0xc64c <f_opendir+0xb4>
    c5fc:	84 81       	ldd	r24, Z+4	; 0x04
    c5fe:	84 ff       	sbrs	r24, 4
    c600:	0d c0       	rjmp	.+26     	; 0xc61c <f_opendir+0x84>
    c602:	62 8d       	ldd	r22, Z+26	; 0x1a
    c604:	73 8d       	ldd	r23, Z+27	; 0x1b
    c606:	e9 81       	ldd	r30, Y+1	; 0x01
    c608:	fa 81       	ldd	r31, Y+2	; 0x02
    c60a:	80 81       	ld	r24, Z
    c60c:	0e 94 7e 49 	call	0x92fc	; 0x92fc <ld_clust.isra.3>
    c610:	f8 01       	movw	r30, r16
    c612:	66 83       	std	Z+6, r22	; 0x06
    c614:	77 83       	std	Z+7, r23	; 0x07
    c616:	80 87       	std	Z+8, r24	; 0x08
    c618:	91 87       	std	Z+9, r25	; 0x09
    c61a:	18 c0       	rjmp	.+48     	; 0xc64c <f_opendir+0xb4>
    c61c:	95 e0       	ldi	r25, 0x05	; 5
    c61e:	e9 2e       	mov	r14, r25
    c620:	f1 2c       	mov	r15, r1
    c622:	c6 01       	movw	r24, r12
    c624:	73 d5       	rcall	.+2790   	; 0xd10c <ff_memfree>
    c626:	f4 e0       	ldi	r31, 0x04	; 4
    c628:	ef 16       	cp	r14, r31
    c62a:	f1 04       	cpc	r15, r1
    c62c:	f1 f0       	breq	.+60     	; 0xc66a <f_opendir+0xd2>
    c62e:	e1 14       	cp	r14, r1
    c630:	f1 04       	cpc	r15, r1
    c632:	49 f0       	breq	.+18     	; 0xc646 <f_opendir+0xae>
    c634:	f8 01       	movw	r30, r16
    c636:	11 82       	std	Z+1, r1	; 0x01
    c638:	10 82       	st	Z, r1
    c63a:	c7 01       	movw	r24, r14
    c63c:	1a c0       	rjmp	.+52     	; 0xc672 <f_opendir+0xda>
    c63e:	89 e0       	ldi	r24, 0x09	; 9
    c640:	03 c0       	rjmp	.+6      	; 0xc648 <f_opendir+0xb0>
    c642:	81 e1       	ldi	r24, 0x11	; 17
    c644:	01 c0       	rjmp	.+2      	; 0xc648 <f_opendir+0xb0>
    c646:	80 e0       	ldi	r24, 0x00	; 0
    c648:	90 e0       	ldi	r25, 0x00	; 0
    c64a:	13 c0       	rjmp	.+38     	; 0xc672 <f_opendir+0xda>
    c64c:	e9 81       	ldd	r30, Y+1	; 0x01
    c64e:	fa 81       	ldd	r31, Y+2	; 0x02
    c650:	85 81       	ldd	r24, Z+5	; 0x05
    c652:	96 81       	ldd	r25, Z+6	; 0x06
    c654:	f8 01       	movw	r30, r16
    c656:	93 83       	std	Z+3, r25	; 0x03
    c658:	82 83       	std	Z+2, r24	; 0x02
    c65a:	40 e0       	ldi	r20, 0x00	; 0
    c65c:	50 e0       	ldi	r21, 0x00	; 0
    c65e:	ba 01       	movw	r22, r20
    c660:	c8 01       	movw	r24, r16
    c662:	0e 94 8f 4f 	call	0x9f1e	; 0x9f1e <dir_sdi>
    c666:	7c 01       	movw	r14, r24
    c668:	dc cf       	rjmp	.-72     	; 0xc622 <f_opendir+0x8a>
    c66a:	85 e0       	ldi	r24, 0x05	; 5
    c66c:	e8 2e       	mov	r14, r24
    c66e:	f1 2c       	mov	r15, r1
    c670:	e1 cf       	rjmp	.-62     	; 0xc634 <f_opendir+0x9c>
    c672:	24 96       	adiw	r28, 0x04	; 4
    c674:	e8 e0       	ldi	r30, 0x08	; 8
    c676:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__epilogue_restores__+0x14>

0000c67a <f_closedir>:
    c67a:	a2 e0       	ldi	r26, 0x02	; 2
    c67c:	b0 e0       	ldi	r27, 0x00	; 0
    c67e:	e3 e4       	ldi	r30, 0x43	; 67
    c680:	f3 e6       	ldi	r31, 0x63	; 99
    c682:	0c 94 74 e6 	jmp	0x1cce8	; 0x1cce8 <__prologue_saves__+0x1c>
    c686:	8c 01       	movw	r16, r24
    c688:	be 01       	movw	r22, r28
    c68a:	6f 5f       	subi	r22, 0xFF	; 255
    c68c:	7f 4f       	sbci	r23, 0xFF	; 255
    c68e:	0e 94 1d 48 	call	0x903a	; 0x903a <validate>
    c692:	00 97       	sbiw	r24, 0x00	; 0
    c694:	19 f4       	brne	.+6      	; 0xc69c <f_closedir+0x22>
    c696:	f8 01       	movw	r30, r16
    c698:	11 82       	std	Z+1, r1	; 0x01
    c69a:	10 82       	st	Z, r1
    c69c:	22 96       	adiw	r28, 0x02	; 2
    c69e:	e4 e0       	ldi	r30, 0x04	; 4
    c6a0:	0c 94 90 e6 	jmp	0x1cd20	; 0x1cd20 <__epilogue_restores__+0x1c>

0000c6a4 <f_readdir>:
    c6a4:	a2 e0       	ldi	r26, 0x02	; 2
    c6a6:	b0 e0       	ldi	r27, 0x00	; 0
    c6a8:	e8 e5       	ldi	r30, 0x58	; 88
    c6aa:	f3 e6       	ldi	r31, 0x63	; 99
    c6ac:	0c 94 6e e6 	jmp	0x1ccdc	; 0x1ccdc <__prologue_saves__+0x10>
    c6b0:	7c 01       	movw	r14, r24
    c6b2:	5b 01       	movw	r10, r22
    c6b4:	be 01       	movw	r22, r28
    c6b6:	6f 5f       	subi	r22, 0xFF	; 255
    c6b8:	7f 4f       	sbci	r23, 0xFF	; 255
    c6ba:	0e 94 1d 48 	call	0x903a	; 0x903a <validate>
    c6be:	00 97       	sbiw	r24, 0x00	; 0
    c6c0:	89 f5       	brne	.+98     	; 0xc724 <f_readdir+0x80>
    c6c2:	a1 14       	cp	r10, r1
    c6c4:	b1 04       	cpc	r11, r1
    c6c6:	39 f4       	brne	.+14     	; 0xc6d6 <f_readdir+0x32>
    c6c8:	40 e0       	ldi	r20, 0x00	; 0
    c6ca:	50 e0       	ldi	r21, 0x00	; 0
    c6cc:	ba 01       	movw	r22, r20
    c6ce:	c7 01       	movw	r24, r14
    c6d0:	0e 94 8f 4f 	call	0x9f1e	; 0x9f1e <dir_sdi>
    c6d4:	27 c0       	rjmp	.+78     	; 0xc724 <f_readdir+0x80>
    c6d6:	80 e0       	ldi	r24, 0x00	; 0
    c6d8:	92 e0       	ldi	r25, 0x02	; 2
    c6da:	15 d5       	rcall	.+2602   	; 0xd106 <ff_memalloc>
    c6dc:	6c 01       	movw	r12, r24
    c6de:	00 97       	sbiw	r24, 0x00	; 0
    c6e0:	f9 f0       	breq	.+62     	; 0xc720 <f_readdir+0x7c>
    c6e2:	e9 81       	ldd	r30, Y+1	; 0x01
    c6e4:	fa 81       	ldd	r31, Y+2	; 0x02
    c6e6:	94 87       	std	Z+12, r25	; 0x0c
    c6e8:	83 87       	std	Z+11, r24	; 0x0b
    c6ea:	60 e0       	ldi	r22, 0x00	; 0
    c6ec:	70 e0       	ldi	r23, 0x00	; 0
    c6ee:	c7 01       	movw	r24, r14
    c6f0:	0e 94 28 53 	call	0xa650	; 0xa650 <dir_read>
    c6f4:	8c 01       	movw	r16, r24
    c6f6:	8b 7f       	andi	r24, 0xFB	; 251
    c6f8:	89 2b       	or	r24, r25
    c6fa:	71 f4       	brne	.+28     	; 0xc718 <f_readdir+0x74>
    c6fc:	b5 01       	movw	r22, r10
    c6fe:	c7 01       	movw	r24, r14
    c700:	0e 94 49 48 	call	0x9092	; 0x9092 <get_fileinfo>
    c704:	60 e0       	ldi	r22, 0x00	; 0
    c706:	70 e0       	ldi	r23, 0x00	; 0
    c708:	c7 01       	movw	r24, r14
    c70a:	0e 94 07 52 	call	0xa40e	; 0xa40e <dir_next>
    c70e:	8c 01       	movw	r16, r24
    c710:	04 97       	sbiw	r24, 0x04	; 4
    c712:	11 f4       	brne	.+4      	; 0xc718 <f_readdir+0x74>
    c714:	00 e0       	ldi	r16, 0x00	; 0
    c716:	10 e0       	ldi	r17, 0x00	; 0
    c718:	c6 01       	movw	r24, r12
    c71a:	f8 d4       	rcall	.+2544   	; 0xd10c <ff_memfree>
    c71c:	c8 01       	movw	r24, r16
    c71e:	02 c0       	rjmp	.+4      	; 0xc724 <f_readdir+0x80>
    c720:	81 e1       	ldi	r24, 0x11	; 17
    c722:	90 e0       	ldi	r25, 0x00	; 0
    c724:	22 96       	adiw	r28, 0x02	; 2
    c726:	ea e0       	ldi	r30, 0x0A	; 10
    c728:	0c 94 8a e6 	jmp	0x1cd14	; 0x1cd14 <__epilogue_restores__+0x10>

0000c72c <f_stat>:
    c72c:	a0 e3       	ldi	r26, 0x30	; 48
    c72e:	b0 e0       	ldi	r27, 0x00	; 0
    c730:	ec e9       	ldi	r30, 0x9C	; 156
    c732:	f3 e6       	ldi	r31, 0x63	; 99
    c734:	0c 94 70 e6 	jmp	0x1cce0	; 0x1cce0 <__prologue_saves__+0x14>
    c738:	98 ab       	std	Y+48, r25	; 0x30
    c73a:	8f a7       	std	Y+47, r24	; 0x2f
    c73c:	6b 01       	movw	r12, r22
    c73e:	40 e0       	ldi	r20, 0x00	; 0
    c740:	be 01       	movw	r22, r28
    c742:	6f 5f       	subi	r22, 0xFF	; 255
    c744:	7f 4f       	sbci	r23, 0xFF	; 255
    c746:	ce 01       	movw	r24, r28
    c748:	8f 96       	adiw	r24, 0x2f	; 47
    c74a:	0e 94 88 4b 	call	0x9710	; 0x9710 <mount_volume>
    c74e:	00 97       	sbiw	r24, 0x00	; 0
    c750:	39 f5       	brne	.+78     	; 0xc7a0 <f_stat+0x74>
    c752:	80 e0       	ldi	r24, 0x00	; 0
    c754:	92 e0       	ldi	r25, 0x02	; 2
    c756:	d7 d4       	rcall	.+2478   	; 0xd106 <ff_memalloc>
    c758:	7c 01       	movw	r14, r24
    c75a:	00 97       	sbiw	r24, 0x00	; 0
    c75c:	f9 f0       	breq	.+62     	; 0xc79c <f_stat+0x70>
    c75e:	e9 81       	ldd	r30, Y+1	; 0x01
    c760:	fa 81       	ldd	r31, Y+2	; 0x02
    c762:	94 87       	std	Z+12, r25	; 0x0c
    c764:	83 87       	std	Z+11, r24	; 0x0b
    c766:	6f a5       	ldd	r22, Y+47	; 0x2f
    c768:	78 a9       	ldd	r23, Y+48	; 0x30
    c76a:	ce 01       	movw	r24, r28
    c76c:	01 96       	adiw	r24, 0x01	; 1
    c76e:	0e 94 d5 56 	call	0xadaa	; 0xadaa <follow_path>
    c772:	8c 01       	movw	r16, r24
    c774:	89 2b       	or	r24, r25
    c776:	71 f4       	brne	.+28     	; 0xc794 <f_stat+0x68>
    c778:	88 a5       	ldd	r24, Y+40	; 0x28
    c77a:	87 fd       	sbrc	r24, 7
    c77c:	09 c0       	rjmp	.+18     	; 0xc790 <f_stat+0x64>
    c77e:	c1 14       	cp	r12, r1
    c780:	d1 04       	cpc	r13, r1
    c782:	41 f0       	breq	.+16     	; 0xc794 <f_stat+0x68>
    c784:	b6 01       	movw	r22, r12
    c786:	ce 01       	movw	r24, r28
    c788:	01 96       	adiw	r24, 0x01	; 1
    c78a:	0e 94 49 48 	call	0x9092	; 0x9092 <get_fileinfo>
    c78e:	02 c0       	rjmp	.+4      	; 0xc794 <f_stat+0x68>
    c790:	06 e0       	ldi	r16, 0x06	; 6
    c792:	10 e0       	ldi	r17, 0x00	; 0
    c794:	c7 01       	movw	r24, r14
    c796:	ba d4       	rcall	.+2420   	; 0xd10c <ff_memfree>
    c798:	c8 01       	movw	r24, r16
    c79a:	02 c0       	rjmp	.+4      	; 0xc7a0 <f_stat+0x74>
    c79c:	81 e1       	ldi	r24, 0x11	; 17
    c79e:	90 e0       	ldi	r25, 0x00	; 0
    c7a0:	e0 96       	adiw	r28, 0x30	; 48
    c7a2:	e8 e0       	ldi	r30, 0x08	; 8
    c7a4:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__epilogue_restores__+0x14>

0000c7a8 <f_getfree>:
    c7a8:	aa e0       	ldi	r26, 0x0A	; 10
    c7aa:	b0 e0       	ldi	r27, 0x00	; 0
    c7ac:	ea ed       	ldi	r30, 0xDA	; 218
    c7ae:	f3 e6       	ldi	r31, 0x63	; 99
    c7b0:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
    c7b4:	9c 83       	std	Y+4, r25	; 0x04
    c7b6:	8b 83       	std	Y+3, r24	; 0x03
    c7b8:	7e 83       	std	Y+6, r23	; 0x06
    c7ba:	6d 83       	std	Y+5, r22	; 0x05
    c7bc:	7a 01       	movw	r14, r20
    c7be:	40 e0       	ldi	r20, 0x00	; 0
    c7c0:	be 01       	movw	r22, r28
    c7c2:	6f 5f       	subi	r22, 0xFF	; 255
    c7c4:	7f 4f       	sbci	r23, 0xFF	; 255
    c7c6:	ce 01       	movw	r24, r28
    c7c8:	03 96       	adiw	r24, 0x03	; 3
    c7ca:	0e 94 88 4b 	call	0x9710	; 0x9710 <mount_volume>
    c7ce:	8c 01       	movw	r16, r24
    c7d0:	89 2b       	or	r24, r25
    c7d2:	09 f0       	breq	.+2      	; 0xc7d6 <f_getfree+0x2e>
    c7d4:	c4 c0       	rjmp	.+392    	; 0xc95e <f_getfree+0x1b6>
    c7d6:	69 80       	ldd	r6, Y+1	; 0x01
    c7d8:	7a 80       	ldd	r7, Y+2	; 0x02
    c7da:	d7 01       	movw	r26, r14
    c7dc:	6d 92       	st	X+, r6
    c7de:	7c 92       	st	X, r7
    c7e0:	f3 01       	movw	r30, r6
    c7e2:	81 89       	ldd	r24, Z+17	; 0x11
    c7e4:	92 89       	ldd	r25, Z+18	; 0x12
    c7e6:	a3 89       	ldd	r26, Z+19	; 0x13
    c7e8:	b4 89       	ldd	r27, Z+20	; 0x14
    c7ea:	81 8c       	ldd	r8, Z+25	; 0x19
    c7ec:	92 8c       	ldd	r9, Z+26	; 0x1a
    c7ee:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c7f0:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c7f2:	b5 01       	movw	r22, r10
    c7f4:	a4 01       	movw	r20, r8
    c7f6:	42 50       	subi	r20, 0x02	; 2
    c7f8:	51 09       	sbc	r21, r1
    c7fa:	61 09       	sbc	r22, r1
    c7fc:	71 09       	sbc	r23, r1
    c7fe:	48 17       	cp	r20, r24
    c800:	59 07       	cpc	r21, r25
    c802:	6a 07       	cpc	r22, r26
    c804:	7b 07       	cpc	r23, r27
    c806:	38 f0       	brcs	.+14     	; 0xc816 <f_getfree+0x6e>
    c808:	ed 81       	ldd	r30, Y+5	; 0x05
    c80a:	fe 81       	ldd	r31, Y+6	; 0x06
    c80c:	80 83       	st	Z, r24
    c80e:	91 83       	std	Z+1, r25	; 0x01
    c810:	a2 83       	std	Z+2, r26	; 0x02
    c812:	b3 83       	std	Z+3, r27	; 0x03
    c814:	a4 c0       	rjmp	.+328    	; 0xc95e <f_getfree+0x1b6>
    c816:	80 81       	ld	r24, Z
    c818:	81 30       	cpi	r24, 0x01	; 1
    c81a:	a1 f5       	brne	.+104    	; 0xc884 <f_getfree+0xdc>
    c81c:	82 e0       	ldi	r24, 0x02	; 2
    c81e:	88 2e       	mov	r8, r24
    c820:	91 2c       	mov	r9, r1
    c822:	a1 2c       	mov	r10, r1
    c824:	b1 2c       	mov	r11, r1
    c826:	c1 2c       	mov	r12, r1
    c828:	d1 2c       	mov	r13, r1
    c82a:	76 01       	movw	r14, r12
    c82c:	b5 01       	movw	r22, r10
    c82e:	a4 01       	movw	r20, r8
    c830:	c3 01       	movw	r24, r6
    c832:	0e 94 db 4e 	call	0x9db6	; 0x9db6 <get_fat.isra.9>
    c836:	6f 3f       	cpi	r22, 0xFF	; 255
    c838:	bf ef       	ldi	r27, 0xFF	; 255
    c83a:	7b 07       	cpc	r23, r27
    c83c:	8b 07       	cpc	r24, r27
    c83e:	9b 07       	cpc	r25, r27
    c840:	09 f4       	brne	.+2      	; 0xc844 <f_getfree+0x9c>
    c842:	76 c0       	rjmp	.+236    	; 0xc930 <f_getfree+0x188>
    c844:	61 30       	cpi	r22, 0x01	; 1
    c846:	71 05       	cpc	r23, r1
    c848:	81 05       	cpc	r24, r1
    c84a:	91 05       	cpc	r25, r1
    c84c:	09 f4       	brne	.+2      	; 0xc850 <f_getfree+0xa8>
    c84e:	73 c0       	rjmp	.+230    	; 0xc936 <f_getfree+0x18e>
    c850:	67 2b       	or	r22, r23
    c852:	68 2b       	or	r22, r24
    c854:	69 2b       	or	r22, r25
    c856:	29 f4       	brne	.+10     	; 0xc862 <f_getfree+0xba>
    c858:	ef ef       	ldi	r30, 0xFF	; 255
    c85a:	ce 1a       	sub	r12, r30
    c85c:	de 0a       	sbc	r13, r30
    c85e:	ee 0a       	sbc	r14, r30
    c860:	fe 0a       	sbc	r15, r30
    c862:	ff ef       	ldi	r31, 0xFF	; 255
    c864:	8f 1a       	sub	r8, r31
    c866:	9f 0a       	sbc	r9, r31
    c868:	af 0a       	sbc	r10, r31
    c86a:	bf 0a       	sbc	r11, r31
    c86c:	e9 81       	ldd	r30, Y+1	; 0x01
    c86e:	fa 81       	ldd	r31, Y+2	; 0x02
    c870:	81 8d       	ldd	r24, Z+25	; 0x19
    c872:	92 8d       	ldd	r25, Z+26	; 0x1a
    c874:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c876:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c878:	88 16       	cp	r8, r24
    c87a:	99 06       	cpc	r9, r25
    c87c:	aa 06       	cpc	r10, r26
    c87e:	bb 06       	cpc	r11, r27
    c880:	a8 f2       	brcs	.-86     	; 0xc82c <f_getfree+0x84>
    c882:	5d c0       	rjmp	.+186    	; 0xc93e <f_getfree+0x196>
    c884:	f3 01       	movw	r30, r6
    c886:	45 a0       	ldd	r4, Z+37	; 0x25
    c888:	56 a0       	ldd	r5, Z+38	; 0x26
    c88a:	67 a0       	ldd	r6, Z+39	; 0x27
    c88c:	70 a4       	ldd	r7, Z+40	; 0x28
    c88e:	21 2c       	mov	r2, r1
    c890:	31 2c       	mov	r3, r1
    c892:	c1 2c       	mov	r12, r1
    c894:	d1 2c       	mov	r13, r1
    c896:	76 01       	movw	r14, r12
    c898:	21 14       	cp	r2, r1
    c89a:	31 04       	cpc	r3, r1
    c89c:	b1 f4       	brne	.+44     	; 0xc8ca <f_getfree+0x122>
    c89e:	d3 01       	movw	r26, r6
    c8a0:	c2 01       	movw	r24, r4
    c8a2:	01 96       	adiw	r24, 0x01	; 1
    c8a4:	a1 1d       	adc	r26, r1
    c8a6:	b1 1d       	adc	r27, r1
    c8a8:	8f 83       	std	Y+7, r24	; 0x07
    c8aa:	98 87       	std	Y+8, r25	; 0x08
    c8ac:	a9 87       	std	Y+9, r26	; 0x09
    c8ae:	ba 87       	std	Y+10, r27	; 0x0a
    c8b0:	b3 01       	movw	r22, r6
    c8b2:	a2 01       	movw	r20, r4
    c8b4:	89 81       	ldd	r24, Y+1	; 0x01
    c8b6:	9a 81       	ldd	r25, Y+2	; 0x02
    c8b8:	0e 94 0d 4b 	call	0x961a	; 0x961a <move_window>
    c8bc:	00 97       	sbiw	r24, 0x00	; 0
    c8be:	09 f0       	breq	.+2      	; 0xc8c2 <f_getfree+0x11a>
    c8c0:	3d c0       	rjmp	.+122    	; 0xc93c <f_getfree+0x194>
    c8c2:	4f 80       	ldd	r4, Y+7	; 0x07
    c8c4:	58 84       	ldd	r5, Y+8	; 0x08
    c8c6:	69 84       	ldd	r6, Y+9	; 0x09
    c8c8:	7a 84       	ldd	r7, Y+10	; 0x0a
    c8ca:	e9 81       	ldd	r30, Y+1	; 0x01
    c8cc:	fa 81       	ldd	r31, Y+2	; 0x02
    c8ce:	80 81       	ld	r24, Z
    c8d0:	82 30       	cpi	r24, 0x02	; 2
    c8d2:	79 f4       	brne	.+30     	; 0xc8f2 <f_getfree+0x14a>
    c8d4:	e2 0d       	add	r30, r2
    c8d6:	f3 1d       	adc	r31, r3
    c8d8:	85 a9       	ldd	r24, Z+53	; 0x35
    c8da:	96 a9       	ldd	r25, Z+54	; 0x36
    c8dc:	89 2b       	or	r24, r25
    c8de:	29 f4       	brne	.+10     	; 0xc8ea <f_getfree+0x142>
    c8e0:	9f ef       	ldi	r25, 0xFF	; 255
    c8e2:	c9 1a       	sub	r12, r25
    c8e4:	d9 0a       	sbc	r13, r25
    c8e6:	e9 0a       	sbc	r14, r25
    c8e8:	f9 0a       	sbc	r15, r25
    c8ea:	a2 e0       	ldi	r26, 0x02	; 2
    c8ec:	2a 0e       	add	r2, r26
    c8ee:	31 1c       	adc	r3, r1
    c8f0:	15 c0       	rjmp	.+42     	; 0xc91c <f_getfree+0x174>
    c8f2:	cf 01       	movw	r24, r30
    c8f4:	c5 96       	adiw	r24, 0x35	; 53
    c8f6:	82 0d       	add	r24, r2
    c8f8:	93 1d       	adc	r25, r3
    c8fa:	0e 94 4b 47 	call	0x8e96	; 0x8e96 <ld_dword>
    c8fe:	dc 01       	movw	r26, r24
    c900:	cb 01       	movw	r24, r22
    c902:	bf 70       	andi	r27, 0x0F	; 15
    c904:	89 2b       	or	r24, r25
    c906:	8a 2b       	or	r24, r26
    c908:	8b 2b       	or	r24, r27
    c90a:	29 f4       	brne	.+10     	; 0xc916 <f_getfree+0x16e>
    c90c:	bf ef       	ldi	r27, 0xFF	; 255
    c90e:	cb 1a       	sub	r12, r27
    c910:	db 0a       	sbc	r13, r27
    c912:	eb 0a       	sbc	r14, r27
    c914:	fb 0a       	sbc	r15, r27
    c916:	e4 e0       	ldi	r30, 0x04	; 4
    c918:	2e 0e       	add	r2, r30
    c91a:	31 1c       	adc	r3, r1
    c91c:	f1 e0       	ldi	r31, 0x01	; 1
    c91e:	3f 22       	and	r3, r31
    c920:	21 e0       	ldi	r18, 0x01	; 1
    c922:	82 1a       	sub	r8, r18
    c924:	91 08       	sbc	r9, r1
    c926:	a1 08       	sbc	r10, r1
    c928:	b1 08       	sbc	r11, r1
    c92a:	09 f0       	breq	.+2      	; 0xc92e <f_getfree+0x186>
    c92c:	b5 cf       	rjmp	.-150    	; 0xc898 <f_getfree+0xf0>
    c92e:	07 c0       	rjmp	.+14     	; 0xc93e <f_getfree+0x196>
    c930:	01 e0       	ldi	r16, 0x01	; 1
    c932:	10 e0       	ldi	r17, 0x00	; 0
    c934:	04 c0       	rjmp	.+8      	; 0xc93e <f_getfree+0x196>
    c936:	02 e0       	ldi	r16, 0x02	; 2
    c938:	10 e0       	ldi	r17, 0x00	; 0
    c93a:	01 c0       	rjmp	.+2      	; 0xc93e <f_getfree+0x196>
    c93c:	8c 01       	movw	r16, r24
    c93e:	ad 81       	ldd	r26, Y+5	; 0x05
    c940:	be 81       	ldd	r27, Y+6	; 0x06
    c942:	cd 92       	st	X+, r12
    c944:	dd 92       	st	X+, r13
    c946:	ed 92       	st	X+, r14
    c948:	fc 92       	st	X, r15
    c94a:	13 97       	sbiw	r26, 0x03	; 3
    c94c:	e9 81       	ldd	r30, Y+1	; 0x01
    c94e:	fa 81       	ldd	r31, Y+2	; 0x02
    c950:	c1 8a       	std	Z+17, r12	; 0x11
    c952:	d2 8a       	std	Z+18, r13	; 0x12
    c954:	e3 8a       	std	Z+19, r14	; 0x13
    c956:	f4 8a       	std	Z+20, r15	; 0x14
    c958:	84 81       	ldd	r24, Z+4	; 0x04
    c95a:	81 60       	ori	r24, 0x01	; 1
    c95c:	84 83       	std	Z+4, r24	; 0x04
    c95e:	c8 01       	movw	r24, r16
    c960:	2a 96       	adiw	r28, 0x0a	; 10
    c962:	e2 e1       	ldi	r30, 0x12	; 18
    c964:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

0000c968 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    c968:	a0 e6       	ldi	r26, 0x60	; 96
    c96a:	b0 e0       	ldi	r27, 0x00	; 0
    c96c:	ea eb       	ldi	r30, 0xBA	; 186
    c96e:	f4 e6       	ldi	r31, 0x64	; 100
    c970:	0c 94 6d e6 	jmp	0x1ccda	; 0x1ccda <__prologue_saves__+0xe>
    c974:	a1 96       	adiw	r28, 0x21	; 33
    c976:	9f af       	std	Y+63, r25	; 0x3f
    c978:	8e af       	std	Y+62, r24	; 0x3e
    c97a:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    c97c:	42 e0       	ldi	r20, 0x02	; 2
    c97e:	be 01       	movw	r22, r28
    c980:	63 5a       	subi	r22, 0xA3	; 163
    c982:	7f 4f       	sbci	r23, 0xFF	; 255
    c984:	ce 01       	movw	r24, r28
    c986:	81 5a       	subi	r24, 0xA1	; 161
    c988:	9f 4f       	sbci	r25, 0xFF	; 255
    c98a:	0e 94 88 4b 	call	0x9710	; 0x9710 <mount_volume>
	if (res == FR_OK) {
    c98e:	00 97       	sbiw	r24, 0x00	; 0
    c990:	09 f0       	breq	.+2      	; 0xc994 <f_unlink+0x2c>
    c992:	8c c0       	rjmp	.+280    	; 0xcaac <f_unlink+0x144>
		dj.obj.fs = fs;
    c994:	6f 96       	adiw	r28, 0x1f	; 31
    c996:	8e ad       	ldd	r24, Y+62	; 0x3e
    c998:	9f ad       	ldd	r25, Y+63	; 0x3f
    c99a:	6f 97       	sbiw	r28, 0x1f	; 31
    c99c:	98 ab       	std	Y+48, r25	; 0x30
    c99e:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    c9a0:	80 e0       	ldi	r24, 0x00	; 0
    c9a2:	92 e0       	ldi	r25, 0x02	; 2
    c9a4:	b0 d3       	rcall	.+1888   	; 0xd106 <ff_memalloc>
    c9a6:	5c 01       	movw	r10, r24
    c9a8:	00 97       	sbiw	r24, 0x00	; 0
    c9aa:	09 f4       	brne	.+2      	; 0xc9ae <f_unlink+0x46>
    c9ac:	49 c0       	rjmp	.+146    	; 0xca40 <f_unlink+0xd8>
    c9ae:	6f 96       	adiw	r28, 0x1f	; 31
    c9b0:	ee ad       	ldd	r30, Y+62	; 0x3e
    c9b2:	ff ad       	ldd	r31, Y+63	; 0x3f
    c9b4:	6f 97       	sbiw	r28, 0x1f	; 31
    c9b6:	94 87       	std	Z+12, r25	; 0x0c
    c9b8:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    c9ba:	a1 96       	adiw	r28, 0x21	; 33
    c9bc:	6e ad       	ldd	r22, Y+62	; 0x3e
    c9be:	7f ad       	ldd	r23, Y+63	; 0x3f
    c9c0:	a1 97       	sbiw	r28, 0x21	; 33
    c9c2:	ce 01       	movw	r24, r28
    c9c4:	8f 96       	adiw	r24, 0x2f	; 47
    c9c6:	0e 94 d5 56 	call	0xadaa	; 0xadaa <follow_path>
    c9ca:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    c9cc:	89 2b       	or	r24, r25
    c9ce:	a1 f5       	brne	.+104    	; 0xca38 <f_unlink+0xd0>
    c9d0:	67 96       	adiw	r28, 0x17	; 23
    c9d2:	8f ad       	ldd	r24, Y+63	; 0x3f
    c9d4:	67 97       	sbiw	r28, 0x17	; 23
    c9d6:	85 fd       	sbrc	r24, 5
    c9d8:	36 c0       	rjmp	.+108    	; 0xca46 <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    c9da:	87 fd       	sbrc	r24, 7
    c9dc:	34 c0       	rjmp	.+104    	; 0xca46 <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    c9de:	9b a8       	ldd	r9, Y+51	; 0x33
    c9e0:	90 fc       	sbrc	r9, 0
    c9e2:	40 c0       	rjmp	.+128    	; 0xca64 <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    c9e4:	6f 96       	adiw	r28, 0x1f	; 31
    c9e6:	0e ad       	ldd	r16, Y+62	; 0x3e
    c9e8:	1f ad       	ldd	r17, Y+63	; 0x3f
    c9ea:	6f 97       	sbiw	r28, 0x1f	; 31
    c9ec:	2b 96       	adiw	r28, 0x0b	; 11
    c9ee:	6e ad       	ldd	r22, Y+62	; 0x3e
    c9f0:	7f ad       	ldd	r23, Y+63	; 0x3f
    c9f2:	2b 97       	sbiw	r28, 0x0b	; 11
    c9f4:	f8 01       	movw	r30, r16
    c9f6:	80 81       	ld	r24, Z
    c9f8:	0e 94 7e 49 	call	0x92fc	; 0x92fc <ld_clust.isra.3>
    c9fc:	6b 01       	movw	r12, r22
    c9fe:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    ca00:	94 fe       	sbrs	r9, 4
    ca02:	33 c0       	rjmp	.+102    	; 0xca6a <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    ca04:	f8 01       	movw	r30, r16
    ca06:	85 89       	ldd	r24, Z+21	; 0x15
    ca08:	96 89       	ldd	r25, Z+22	; 0x16
    ca0a:	a7 89       	ldd	r26, Z+23	; 0x17
    ca0c:	b0 8d       	ldd	r27, Z+24	; 0x18
    ca0e:	c8 16       	cp	r12, r24
    ca10:	d9 06       	cpc	r13, r25
    ca12:	ea 06       	cpc	r14, r26
    ca14:	fb 06       	cpc	r15, r27
    ca16:	31 f1       	breq	.+76     	; 0xca64 <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    ca18:	1a 83       	std	Y+2, r17	; 0x02
    ca1a:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    ca1c:	cf 82       	std	Y+7, r12	; 0x07
    ca1e:	d8 86       	std	Y+8, r13	; 0x08
    ca20:	e9 86       	std	Y+9, r14	; 0x09
    ca22:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    ca24:	40 e0       	ldi	r20, 0x00	; 0
    ca26:	50 e0       	ldi	r21, 0x00	; 0
    ca28:	ba 01       	movw	r22, r20
    ca2a:	ce 01       	movw	r24, r28
    ca2c:	01 96       	adiw	r24, 0x01	; 1
    ca2e:	0e 94 8f 4f 	call	0x9f1e	; 0x9f1e <dir_sdi>
    ca32:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    ca34:	89 2b       	or	r24, r25
    ca36:	51 f0       	breq	.+20     	; 0xca4c <f_unlink+0xe4>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    ca38:	c5 01       	movw	r24, r10
    ca3a:	68 d3       	rcall	.+1744   	; 0xd10c <ff_memfree>
    ca3c:	c8 01       	movw	r24, r16
    ca3e:	36 c0       	rjmp	.+108    	; 0xcaac <f_unlink+0x144>

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    ca40:	81 e1       	ldi	r24, 0x11	; 17
    ca42:	90 e0       	ldi	r25, 0x00	; 0
    ca44:	33 c0       	rjmp	.+102    	; 0xcaac <f_unlink+0x144>
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    ca46:	06 e0       	ldi	r16, 0x06	; 6
    ca48:	10 e0       	ldi	r17, 0x00	; 0
    ca4a:	f6 cf       	rjmp	.-20     	; 0xca38 <f_unlink+0xd0>
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    ca4c:	60 e0       	ldi	r22, 0x00	; 0
    ca4e:	70 e0       	ldi	r23, 0x00	; 0
    ca50:	ce 01       	movw	r24, r28
    ca52:	01 96       	adiw	r24, 0x01	; 1
    ca54:	0e 94 28 53 	call	0xa650	; 0xa650 <dir_read>
    ca58:	8c 01       	movw	r16, r24
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    ca5a:	00 97       	sbiw	r24, 0x00	; 0
    ca5c:	19 f0       	breq	.+6      	; 0xca64 <f_unlink+0xfc>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    ca5e:	04 97       	sbiw	r24, 0x04	; 4
    ca60:	21 f0       	breq	.+8      	; 0xca6a <f_unlink+0x102>
    ca62:	ea cf       	rjmp	.-44     	; 0xca38 <f_unlink+0xd0>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    ca64:	07 e0       	ldi	r16, 0x07	; 7
    ca66:	10 e0       	ldi	r17, 0x00	; 0
    ca68:	e7 cf       	rjmp	.-50     	; 0xca38 <f_unlink+0xd0>
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    ca6a:	ce 01       	movw	r24, r28
    ca6c:	8f 96       	adiw	r24, 0x2f	; 47
    ca6e:	0e 94 f1 53 	call	0xa7e2	; 0xa7e2 <dir_remove>
    ca72:	8c 01       	movw	r16, r24
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    ca74:	89 2b       	or	r24, r25
    ca76:	01 f7       	brne	.-64     	; 0xca38 <f_unlink+0xd0>
    ca78:	c1 14       	cp	r12, r1
    ca7a:	d1 04       	cpc	r13, r1
    ca7c:	e1 04       	cpc	r14, r1
    ca7e:	f1 04       	cpc	r15, r1
    ca80:	41 f4       	brne	.+16     	; 0xca92 <f_unlink+0x12a>
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    ca82:	6f 96       	adiw	r28, 0x1f	; 31
    ca84:	8e ad       	ldd	r24, Y+62	; 0x3e
    ca86:	9f ad       	ldd	r25, Y+63	; 0x3f
    ca88:	6f 97       	sbiw	r28, 0x1f	; 31
    ca8a:	0e 94 f3 49 	call	0x93e6	; 0x93e6 <sync_fs>
    ca8e:	8c 01       	movw	r16, r24
    ca90:	d3 cf       	rjmp	.-90     	; 0xca38 <f_unlink+0xd0>
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    ca92:	00 e0       	ldi	r16, 0x00	; 0
    ca94:	10 e0       	ldi	r17, 0x00	; 0
    ca96:	98 01       	movw	r18, r16
    ca98:	b7 01       	movw	r22, r14
    ca9a:	a6 01       	movw	r20, r12
    ca9c:	ce 01       	movw	r24, r28
    ca9e:	8f 96       	adiw	r24, 0x2f	; 47
    caa0:	0e 94 76 51 	call	0xa2ec	; 0xa2ec <remove_chain>
    caa4:	8c 01       	movw	r16, r24
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    caa6:	89 2b       	or	r24, r25
    caa8:	39 f6       	brne	.-114    	; 0xca38 <f_unlink+0xd0>
    caaa:	eb cf       	rjmp	.-42     	; 0xca82 <f_unlink+0x11a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    caac:	c0 5a       	subi	r28, 0xA0	; 160
    caae:	df 4f       	sbci	r29, 0xFF	; 255
    cab0:	eb e0       	ldi	r30, 0x0B	; 11
    cab2:	0c 94 89 e6 	jmp	0x1cd12	; 0x1cd12 <__epilogue_restores__+0xe>

0000cab6 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    cab6:	a0 e4       	ldi	r26, 0x40	; 64
    cab8:	b0 e0       	ldi	r27, 0x00	; 0
    caba:	e1 e6       	ldi	r30, 0x61	; 97
    cabc:	f5 e6       	ldi	r31, 0x65	; 101
    cabe:	0c 94 68 e6 	jmp	0x1ccd0	; 0x1ccd0 <__prologue_saves__+0x4>
    cac2:	21 96       	adiw	r28, 0x01	; 1
    cac4:	9f af       	std	Y+63, r25	; 0x3f
    cac6:	8e af       	std	Y+62, r24	; 0x3e
    cac8:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    caca:	42 e0       	ldi	r20, 0x02	; 2
    cacc:	be 01       	movw	r22, r28
    cace:	63 5c       	subi	r22, 0xC3	; 195
    cad0:	7f 4f       	sbci	r23, 0xFF	; 255
    cad2:	ce 01       	movw	r24, r28
    cad4:	cf 96       	adiw	r24, 0x3f	; 63
    cad6:	0e 94 88 4b 	call	0x9710	; 0x9710 <mount_volume>
	if (res == FR_OK) {
    cada:	00 97       	sbiw	r24, 0x00	; 0
    cadc:	09 f0       	breq	.+2      	; 0xcae0 <f_mkdir+0x2a>
    cade:	d6 c0       	rjmp	.+428    	; 0xcc8c <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    cae0:	8d ad       	ldd	r24, Y+61	; 0x3d
    cae2:	9e ad       	ldd	r25, Y+62	; 0x3e
    cae4:	9a 83       	std	Y+2, r25	; 0x02
    cae6:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cae8:	80 e0       	ldi	r24, 0x00	; 0
    caea:	92 e0       	ldi	r25, 0x02	; 2
    caec:	0c d3       	rcall	.+1560   	; 0xd106 <ff_memalloc>
    caee:	6c 01       	movw	r12, r24
    caf0:	00 97       	sbiw	r24, 0x00	; 0
    caf2:	e9 f0       	breq	.+58     	; 0xcb2e <f_mkdir+0x78>
    caf4:	ed ad       	ldd	r30, Y+61	; 0x3d
    caf6:	fe ad       	ldd	r31, Y+62	; 0x3e
    caf8:	94 87       	std	Z+12, r25	; 0x0c
    cafa:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    cafc:	21 96       	adiw	r28, 0x01	; 1
    cafe:	6e ad       	ldd	r22, Y+62	; 0x3e
    cb00:	7f ad       	ldd	r23, Y+63	; 0x3f
    cb02:	21 97       	sbiw	r28, 0x01	; 1
    cb04:	ce 01       	movw	r24, r28
    cb06:	01 96       	adiw	r24, 0x01	; 1
    cb08:	0e 94 d5 56 	call	0xadaa	; 0xadaa <follow_path>
    cb0c:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cb0e:	89 2b       	or	r24, r25
    cb10:	89 f0       	breq	.+34     	; 0xcb34 <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    cb12:	84 e0       	ldi	r24, 0x04	; 4
    cb14:	e8 16       	cp	r14, r24
    cb16:	f1 04       	cpc	r15, r1
    cb18:	31 f4       	brne	.+12     	; 0xcb26 <f_mkdir+0x70>
    cb1a:	88 a5       	ldd	r24, Y+40	; 0x28
    cb1c:	85 ff       	sbrs	r24, 5
    cb1e:	0e c0       	rjmp	.+28     	; 0xcb3c <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    cb20:	26 e0       	ldi	r18, 0x06	; 6
    cb22:	e2 2e       	mov	r14, r18
    cb24:	f1 2c       	mov	r15, r1
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    cb26:	c6 01       	movw	r24, r12
    cb28:	f1 d2       	rcall	.+1506   	; 0xd10c <ff_memfree>
    cb2a:	c7 01       	movw	r24, r14
    cb2c:	af c0       	rjmp	.+350    	; 0xcc8c <f_mkdir+0x1d6>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cb2e:	81 e1       	ldi	r24, 0x11	; 17
    cb30:	90 e0       	ldi	r25, 0x00	; 0
    cb32:	ac c0       	rjmp	.+344    	; 0xcc8c <f_mkdir+0x1d6>
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    cb34:	38 e0       	ldi	r19, 0x08	; 8
    cb36:	e3 2e       	mov	r14, r19
    cb38:	f1 2c       	mov	r15, r1
    cb3a:	f5 cf       	rjmp	.-22     	; 0xcb26 <f_mkdir+0x70>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    cb3c:	8d ad       	ldd	r24, Y+61	; 0x3d
    cb3e:	9e ad       	ldd	r25, Y+62	; 0x3e
    cb40:	98 ab       	std	Y+48, r25	; 0x30
    cb42:	8f a7       	std	Y+47, r24	; 0x2f
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    cb44:	40 e0       	ldi	r20, 0x00	; 0
    cb46:	50 e0       	ldi	r21, 0x00	; 0
    cb48:	ba 01       	movw	r22, r20
    cb4a:	ce 01       	movw	r24, r28
    cb4c:	8f 96       	adiw	r24, 0x2f	; 47
    cb4e:	0e 94 50 50 	call	0xa0a0	; 0xa0a0 <create_chain>
    cb52:	4b 01       	movw	r8, r22
    cb54:	5c 01       	movw	r10, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cb56:	67 2b       	or	r22, r23
    cb58:	68 2b       	or	r22, r24
    cb5a:	69 2b       	or	r22, r25
    cb5c:	09 f1       	breq	.+66     	; 0xcba0 <f_mkdir+0xea>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cb5e:	e1 e0       	ldi	r30, 0x01	; 1
    cb60:	8e 16       	cp	r8, r30
    cb62:	91 04       	cpc	r9, r1
    cb64:	a1 04       	cpc	r10, r1
    cb66:	b1 04       	cpc	r11, r1
    cb68:	61 f0       	breq	.+24     	; 0xcb82 <f_mkdir+0xcc>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    cb6a:	ff ef       	ldi	r31, 0xFF	; 255
    cb6c:	8f 16       	cp	r8, r31
    cb6e:	9f 06       	cpc	r9, r31
    cb70:	af 06       	cpc	r10, r31
    cb72:	bf 06       	cpc	r11, r31
    cb74:	d9 f4       	brne	.+54     	; 0xcbac <f_mkdir+0xf6>
			tm = GET_FATTIME();
    cb76:	0e 94 74 70 	call	0xe0e8	; 0xe0e8 <get_fattime>
    cb7a:	ee 24       	eor	r14, r14
    cb7c:	e3 94       	inc	r14
    cb7e:	f1 2c       	mov	r15, r1
    cb80:	05 c0       	rjmp	.+10     	; 0xcb8c <f_mkdir+0xd6>
    cb82:	0e 94 74 70 	call	0xe0e8	; 0xe0e8 <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    cb86:	92 e0       	ldi	r25, 0x02	; 2
    cb88:	e9 2e       	mov	r14, r25
    cb8a:	f1 2c       	mov	r15, r1
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    cb8c:	00 e0       	ldi	r16, 0x00	; 0
    cb8e:	10 e0       	ldi	r17, 0x00	; 0
    cb90:	98 01       	movw	r18, r16
    cb92:	b5 01       	movw	r22, r10
    cb94:	a4 01       	movw	r20, r8
    cb96:	ce 01       	movw	r24, r28
    cb98:	8f 96       	adiw	r24, 0x2f	; 47
    cb9a:	0e 94 76 51 	call	0xa2ec	; 0xa2ec <remove_chain>
    cb9e:	c3 cf       	rjmp	.-122    	; 0xcb26 <f_mkdir+0x70>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cba0:	0e 94 74 70 	call	0xe0e8	; 0xe0e8 <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    cba4:	87 e0       	ldi	r24, 0x07	; 7
    cba6:	e8 2e       	mov	r14, r24
    cba8:	f1 2c       	mov	r15, r1
    cbaa:	f0 cf       	rjmp	.-32     	; 0xcb8c <f_mkdir+0xd6>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    cbac:	0e 94 74 70 	call	0xe0e8	; 0xe0e8 <get_fattime>
    cbb0:	2b 01       	movw	r4, r22
    cbb2:	3c 01       	movw	r6, r24
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    cbb4:	b5 01       	movw	r22, r10
    cbb6:	a4 01       	movw	r20, r8
    cbb8:	8d ad       	ldd	r24, Y+61	; 0x3d
    cbba:	9e ad       	ldd	r25, Y+62	; 0x3e
    cbbc:	0e 94 65 4a 	call	0x94ca	; 0x94ca <dir_clear>
    cbc0:	7c 01       	movw	r14, r24
				if (res == FR_OK) {
    cbc2:	89 2b       	or	r24, r25
    cbc4:	19 f7       	brne	.-58     	; 0xcb8c <f_mkdir+0xd6>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    cbc6:	8d ad       	ldd	r24, Y+61	; 0x3d
    cbc8:	9e ad       	ldd	r25, Y+62	; 0x3e
    cbca:	4b e0       	ldi	r20, 0x0B	; 11
    cbcc:	50 e0       	ldi	r21, 0x00	; 0
    cbce:	60 e2       	ldi	r22, 0x20	; 32
    cbd0:	70 e0       	ldi	r23, 0x00	; 0
    cbd2:	c5 96       	adiw	r24, 0x35	; 53
    cbd4:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <mem_set>
						fs->win[DIR_Name] = '.';
    cbd8:	8d ad       	ldd	r24, Y+61	; 0x3d
    cbda:	9e ad       	ldd	r25, Y+62	; 0x3e
    cbdc:	1e e2       	ldi	r17, 0x2E	; 46
    cbde:	fc 01       	movw	r30, r24
    cbe0:	15 ab       	std	Z+53, r17	; 0x35
						fs->win[DIR_Attr] = AM_DIR;
    cbe2:	e0 5c       	subi	r30, 0xC0	; 192
    cbe4:	ff 4f       	sbci	r31, 0xFF	; 255
    cbe6:	20 e1       	ldi	r18, 0x10	; 16
    cbe8:	20 83       	st	Z, r18
						st_dword(fs->win + DIR_ModTime, tm);
    cbea:	b3 01       	movw	r22, r6
    cbec:	a2 01       	movw	r20, r4
    cbee:	85 5b       	subi	r24, 0xB5	; 181
    cbf0:	9f 4f       	sbci	r25, 0xFF	; 255
    cbf2:	0e 94 60 47 	call	0x8ec0	; 0x8ec0 <st_dword>
						st_clust(fs, fs->win, dcl);
    cbf6:	8d ad       	ldd	r24, Y+61	; 0x3d
    cbf8:	9e ad       	ldd	r25, Y+62	; 0x3e
    cbfa:	bc 01       	movw	r22, r24
    cbfc:	6b 5c       	subi	r22, 0xCB	; 203
    cbfe:	7f 4f       	sbci	r23, 0xFF	; 255
    cc00:	a5 01       	movw	r20, r10
    cc02:	94 01       	movw	r18, r8
    cc04:	0e 94 93 49 	call	0x9326	; 0x9326 <st_clust.isra.4>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    cc08:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc0a:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc0c:	bc 01       	movw	r22, r24
    cc0e:	6b 5c       	subi	r22, 0xCB	; 203
    cc10:	7f 4f       	sbci	r23, 0xFF	; 255
    cc12:	40 e2       	ldi	r20, 0x20	; 32
    cc14:	50 e0       	ldi	r21, 0x00	; 0
    cc16:	8b 5a       	subi	r24, 0xAB	; 171
    cc18:	9f 4f       	sbci	r25, 0xFF	; 255
    cc1a:	0e 94 73 49 	call	0x92e6	; 0x92e6 <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    cc1e:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc20:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc22:	fc 01       	movw	r30, r24
    cc24:	ea 5a       	subi	r30, 0xAA	; 170
    cc26:	ff 4f       	sbci	r31, 0xFF	; 255
    cc28:	10 83       	st	Z, r17
						st_clust(fs, fs->win + SZDIRE, pcl);
    cc2a:	2f 81       	ldd	r18, Y+7	; 0x07
    cc2c:	38 85       	ldd	r19, Y+8	; 0x08
    cc2e:	49 85       	ldd	r20, Y+9	; 0x09
    cc30:	5a 85       	ldd	r21, Y+10	; 0x0a
    cc32:	bc 01       	movw	r22, r24
    cc34:	6b 5a       	subi	r22, 0xAB	; 171
    cc36:	7f 4f       	sbci	r23, 0xFF	; 255
    cc38:	0e 94 93 49 	call	0x9326	; 0x9326 <st_clust.isra.4>
						fs->wflag = 1;
    cc3c:	ed ad       	ldd	r30, Y+61	; 0x3d
    cc3e:	fe ad       	ldd	r31, Y+62	; 0x3e
    cc40:	81 e0       	ldi	r24, 0x01	; 1
    cc42:	83 83       	std	Z+3, r24	; 0x03
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    cc44:	ce 01       	movw	r24, r28
    cc46:	01 96       	adiw	r24, 0x01	; 1
    cc48:	0e 94 47 55 	call	0xaa8e	; 0xaa8e <dir_register>
    cc4c:	7c 01       	movw	r14, r24
				}
			}
			if (res == FR_OK) {
    cc4e:	89 2b       	or	r24, r25
    cc50:	09 f0       	breq	.+2      	; 0xcc54 <f_mkdir+0x19e>
    cc52:	9c cf       	rjmp	.-200    	; 0xcb8c <f_mkdir+0xd6>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    cc54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cc56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cc58:	b3 01       	movw	r22, r6
    cc5a:	a2 01       	movw	r20, r4
    cc5c:	46 96       	adiw	r24, 0x16	; 22
    cc5e:	0e 94 60 47 	call	0x8ec0	; 0x8ec0 <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    cc62:	6b 8d       	ldd	r22, Y+27	; 0x1b
    cc64:	7c 8d       	ldd	r23, Y+28	; 0x1c
    cc66:	a5 01       	movw	r20, r10
    cc68:	94 01       	movw	r18, r8
    cc6a:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc6c:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc6e:	0e 94 93 49 	call	0x9326	; 0x9326 <st_clust.isra.4>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    cc72:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cc74:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cc76:	80 e1       	ldi	r24, 0x10	; 16
    cc78:	83 87       	std	Z+11, r24	; 0x0b
					fs->wflag = 1;
    cc7a:	8d ad       	ldd	r24, Y+61	; 0x3d
    cc7c:	9e ad       	ldd	r25, Y+62	; 0x3e
    cc7e:	21 e0       	ldi	r18, 0x01	; 1
    cc80:	fc 01       	movw	r30, r24
    cc82:	23 83       	std	Z+3, r18	; 0x03
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    cc84:	0e 94 f3 49 	call	0x93e6	; 0x93e6 <sync_fs>
    cc88:	7c 01       	movw	r14, r24
    cc8a:	4d cf       	rjmp	.-358    	; 0xcb26 <f_mkdir+0x70>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cc8c:	c0 5c       	subi	r28, 0xC0	; 192
    cc8e:	df 4f       	sbci	r29, 0xFF	; 255
    cc90:	e0 e1       	ldi	r30, 0x10	; 16
    cc92:	0c 94 84 e6 	jmp	0x1cd08	; 0x1cd08 <__epilogue_restores__+0x4>

0000cc96 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    cc96:	a2 e8       	ldi	r26, 0x82	; 130
    cc98:	b0 e0       	ldi	r27, 0x00	; 0
    cc9a:	e1 e5       	ldi	r30, 0x51	; 81
    cc9c:	f6 e6       	ldi	r31, 0x66	; 102
    cc9e:	0c 94 6f e6 	jmp	0x1ccde	; 0x1ccde <__prologue_saves__+0x12>
    cca2:	c1 58       	subi	r28, 0x81	; 129
    cca4:	df 4f       	sbci	r29, 0xFF	; 255
    cca6:	99 83       	std	Y+1, r25	; 0x01
    cca8:	88 83       	st	Y, r24
    ccaa:	cf 57       	subi	r28, 0x7F	; 127
    ccac:	d0 40       	sbci	r29, 0x00	; 0
    ccae:	cf 57       	subi	r28, 0x7F	; 127
    ccb0:	df 4f       	sbci	r29, 0xFF	; 255
    ccb2:	79 83       	std	Y+1, r23	; 0x01
    ccb4:	68 83       	st	Y, r22
    ccb6:	c1 58       	subi	r28, 0x81	; 129
    ccb8:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    ccba:	ce 01       	movw	r24, r28
    ccbc:	8f 57       	subi	r24, 0x7F	; 127
    ccbe:	9f 4f       	sbci	r25, 0xFF	; 255
    ccc0:	0e 94 f1 47 	call	0x8fe2	; 0x8fe2 <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    ccc4:	42 e0       	ldi	r20, 0x02	; 2
    ccc6:	be 01       	movw	r22, r28
    ccc8:	63 58       	subi	r22, 0x83	; 131
    ccca:	7f 4f       	sbci	r23, 0xFF	; 255
    cccc:	ce 01       	movw	r24, r28
    ccce:	81 58       	subi	r24, 0x81	; 129
    ccd0:	9f 4f       	sbci	r25, 0xFF	; 255
    ccd2:	0e 94 88 4b 	call	0x9710	; 0x9710 <mount_volume>
	if (res == FR_OK) {
    ccd6:	00 97       	sbiw	r24, 0x00	; 0
    ccd8:	09 f0       	breq	.+2      	; 0xccdc <f_rename+0x46>
    ccda:	ed c0       	rjmp	.+474    	; 0xceb6 <f_rename+0x220>
		djo.obj.fs = fs;
    ccdc:	ef 96       	adiw	r28, 0x3f	; 63
    ccde:	8e ad       	ldd	r24, Y+62	; 0x3e
    cce0:	9f ad       	ldd	r25, Y+63	; 0x3f
    cce2:	ef 97       	sbiw	r28, 0x3f	; 63
    cce4:	98 ab       	std	Y+48, r25	; 0x30
    cce6:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    cce8:	80 e0       	ldi	r24, 0x00	; 0
    ccea:	92 e0       	ldi	r25, 0x02	; 2
    ccec:	0c d2       	rcall	.+1048   	; 0xd106 <ff_memalloc>
    ccee:	6c 01       	movw	r12, r24
    ccf0:	00 97       	sbiw	r24, 0x00	; 0
    ccf2:	f1 f0       	breq	.+60     	; 0xcd30 <f_rename+0x9a>
    ccf4:	ef 96       	adiw	r28, 0x3f	; 63
    ccf6:	ee ad       	ldd	r30, Y+62	; 0x3e
    ccf8:	ff ad       	ldd	r31, Y+63	; 0x3f
    ccfa:	ef 97       	sbiw	r28, 0x3f	; 63
    ccfc:	94 87       	std	Z+12, r25	; 0x0c
    ccfe:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    cd00:	c1 58       	subi	r28, 0x81	; 129
    cd02:	df 4f       	sbci	r29, 0xFF	; 255
    cd04:	68 81       	ld	r22, Y
    cd06:	79 81       	ldd	r23, Y+1	; 0x01
    cd08:	cf 57       	subi	r28, 0x7F	; 127
    cd0a:	d0 40       	sbci	r29, 0x00	; 0
    cd0c:	ce 01       	movw	r24, r28
    cd0e:	8f 96       	adiw	r24, 0x2f	; 47
    cd10:	0e 94 d5 56 	call	0xadaa	; 0xadaa <follow_path>
    cd14:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    cd16:	89 2b       	or	r24, r25
    cd18:	39 f4       	brne	.+14     	; 0xcd28 <f_rename+0x92>
    cd1a:	67 96       	adiw	r28, 0x17	; 23
    cd1c:	8f ad       	ldd	r24, Y+63	; 0x3f
    cd1e:	67 97       	sbiw	r28, 0x17	; 23
    cd20:	80 7a       	andi	r24, 0xA0	; 160
    cd22:	49 f0       	breq	.+18     	; 0xcd36 <f_rename+0xa0>
    cd24:	06 e0       	ldi	r16, 0x06	; 6
    cd26:	10 e0       	ldi	r17, 0x00	; 0
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    cd28:	c6 01       	movw	r24, r12
    cd2a:	f0 d1       	rcall	.+992    	; 0xd10c <ff_memfree>
    cd2c:	c8 01       	movw	r24, r16
    cd2e:	c3 c0       	rjmp	.+390    	; 0xceb6 <f_rename+0x220>

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    cd30:	81 e1       	ldi	r24, 0x11	; 17
    cd32:	90 e0       	ldi	r25, 0x00	; 0
    cd34:	c0 c0       	rjmp	.+384    	; 0xceb6 <f_rename+0x220>
    cd36:	2b 96       	adiw	r28, 0x0b	; 11
    cd38:	6e ad       	ldd	r22, Y+62	; 0x3e
    cd3a:	7f ad       	ldd	r23, Y+63	; 0x3f
    cd3c:	2b 97       	sbiw	r28, 0x0b	; 11
    cd3e:	40 e2       	ldi	r20, 0x20	; 32
    cd40:	50 e0       	ldi	r21, 0x00	; 0
    cd42:	ce 01       	movw	r24, r28
    cd44:	83 5a       	subi	r24, 0xA3	; 163
    cd46:	9f 4f       	sbci	r25, 0xFF	; 255
    cd48:	0e 94 73 49 	call	0x92e6	; 0x92e6 <mem_cpy.part.0>
    cd4c:	4e e2       	ldi	r20, 0x2E	; 46
    cd4e:	50 e0       	ldi	r21, 0x00	; 0
    cd50:	be 01       	movw	r22, r28
    cd52:	61 5d       	subi	r22, 0xD1	; 209
    cd54:	7f 4f       	sbci	r23, 0xFF	; 255
    cd56:	ce 01       	movw	r24, r28
    cd58:	01 96       	adiw	r24, 0x01	; 1
    cd5a:	0e 94 73 49 	call	0x92e6	; 0x92e6 <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    cd5e:	cf 57       	subi	r28, 0x7F	; 127
    cd60:	df 4f       	sbci	r29, 0xFF	; 255
    cd62:	68 81       	ld	r22, Y
    cd64:	79 81       	ldd	r23, Y+1	; 0x01
    cd66:	c1 58       	subi	r28, 0x81	; 129
    cd68:	d0 40       	sbci	r29, 0x00	; 0
    cd6a:	ce 01       	movw	r24, r28
    cd6c:	01 96       	adiw	r24, 0x01	; 1
    cd6e:	0e 94 d5 56 	call	0xadaa	; 0xadaa <follow_path>
    cd72:	8c 01       	movw	r16, r24
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    cd74:	89 2b       	or	r24, r25
    cd76:	f9 f4       	brne	.+62     	; 0xcdb6 <f_rename+0x120>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    cd78:	4f 81       	ldd	r20, Y+7	; 0x07
    cd7a:	58 85       	ldd	r21, Y+8	; 0x08
    cd7c:	69 85       	ldd	r22, Y+9	; 0x09
    cd7e:	7a 85       	ldd	r23, Y+10	; 0x0a
    cd80:	8d a9       	ldd	r24, Y+53	; 0x35
    cd82:	9e a9       	ldd	r25, Y+54	; 0x36
    cd84:	af a9       	ldd	r26, Y+55	; 0x37
    cd86:	b8 ad       	ldd	r27, Y+56	; 0x38
    cd88:	48 17       	cp	r20, r24
    cd8a:	59 07       	cpc	r21, r25
    cd8c:	6a 07       	cpc	r22, r26
    cd8e:	7b 07       	cpc	r23, r27
    cd90:	09 f0       	breq	.+2      	; 0xcd94 <f_rename+0xfe>
    cd92:	8b c0       	rjmp	.+278    	; 0xceaa <f_rename+0x214>
    cd94:	4f 85       	ldd	r20, Y+15	; 0x0f
    cd96:	58 89       	ldd	r21, Y+16	; 0x10
    cd98:	69 89       	ldd	r22, Y+17	; 0x11
    cd9a:	7a 89       	ldd	r23, Y+18	; 0x12
    cd9c:	21 96       	adiw	r28, 0x01	; 1
    cd9e:	8c ad       	ldd	r24, Y+60	; 0x3c
    cda0:	9d ad       	ldd	r25, Y+61	; 0x3d
    cda2:	ae ad       	ldd	r26, Y+62	; 0x3e
    cda4:	bf ad       	ldd	r27, Y+63	; 0x3f
    cda6:	21 97       	sbiw	r28, 0x01	; 1
    cda8:	48 17       	cp	r20, r24
    cdaa:	59 07       	cpc	r21, r25
    cdac:	6a 07       	cpc	r22, r26
    cdae:	7b 07       	cpc	r23, r27
    cdb0:	09 f0       	breq	.+2      	; 0xcdb4 <f_rename+0x11e>
    cdb2:	7b c0       	rjmp	.+246    	; 0xceaa <f_rename+0x214>
    cdb4:	04 c0       	rjmp	.+8      	; 0xcdbe <f_rename+0x128>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    cdb6:	04 30       	cpi	r16, 0x04	; 4
    cdb8:	11 05       	cpc	r17, r1
    cdba:	09 f0       	breq	.+2      	; 0xcdbe <f_rename+0x128>
    cdbc:	b5 cf       	rjmp	.-150    	; 0xcd28 <f_rename+0x92>
					res = dir_register(&djn);			/* Register the new entry */
    cdbe:	ce 01       	movw	r24, r28
    cdc0:	01 96       	adiw	r24, 0x01	; 1
    cdc2:	0e 94 47 55 	call	0xaa8e	; 0xaa8e <dir_register>
    cdc6:	8c 01       	movw	r16, r24
					if (res == FR_OK) {
    cdc8:	89 2b       	or	r24, r25
    cdca:	09 f0       	breq	.+2      	; 0xcdce <f_rename+0x138>
    cdcc:	ad cf       	rjmp	.-166    	; 0xcd28 <f_rename+0x92>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    cdce:	0b 8d       	ldd	r16, Y+27	; 0x1b
    cdd0:	1c 8d       	ldd	r17, Y+28	; 0x1c
    cdd2:	6d e5       	ldi	r22, 0x5D	; 93
    cdd4:	70 e0       	ldi	r23, 0x00	; 0
    cdd6:	6c 0f       	add	r22, r28
    cdd8:	7d 1f       	adc	r23, r29
    cdda:	63 5f       	subi	r22, 0xF3	; 243
    cddc:	7f 4f       	sbci	r23, 0xFF	; 255
    cdde:	43 e1       	ldi	r20, 0x13	; 19
    cde0:	50 e0       	ldi	r21, 0x00	; 0
    cde2:	c8 01       	movw	r24, r16
    cde4:	0d 96       	adiw	r24, 0x0d	; 13
    cde6:	0e 94 73 49 	call	0x92e6	; 0x92e6 <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    cdea:	a9 96       	adiw	r28, 0x29	; 41
    cdec:	8f ad       	ldd	r24, Y+63	; 0x3f
    cdee:	a9 97       	sbiw	r28, 0x29	; 41
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    cdf0:	84 ff       	sbrs	r24, 4
    cdf2:	80 62       	ori	r24, 0x20	; 32
    cdf4:	f8 01       	movw	r30, r16
    cdf6:	83 87       	std	Z+11, r24	; 0x0b
						fs->wflag = 1;
    cdf8:	ef 96       	adiw	r28, 0x3f	; 63
    cdfa:	ee ac       	ldd	r14, Y+62	; 0x3e
    cdfc:	ff ac       	ldd	r15, Y+63	; 0x3f
    cdfe:	ef 97       	sbiw	r28, 0x3f	; 63
    ce00:	bb 24       	eor	r11, r11
    ce02:	b3 94       	inc	r11
    ce04:	f7 01       	movw	r30, r14
    ce06:	b3 82       	std	Z+3, r11	; 0x03
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    ce08:	f8 01       	movw	r30, r16
    ce0a:	83 85       	ldd	r24, Z+11	; 0x0b
    ce0c:	84 ff       	sbrs	r24, 4
    ce0e:	3d c0       	rjmp	.+122    	; 0xce8a <f_rename+0x1f4>
    ce10:	4d a9       	ldd	r20, Y+53	; 0x35
    ce12:	5e a9       	ldd	r21, Y+54	; 0x36
    ce14:	6f a9       	ldd	r22, Y+55	; 0x37
    ce16:	78 ad       	ldd	r23, Y+56	; 0x38
    ce18:	8f 81       	ldd	r24, Y+7	; 0x07
    ce1a:	98 85       	ldd	r25, Y+8	; 0x08
    ce1c:	a9 85       	ldd	r26, Y+9	; 0x09
    ce1e:	ba 85       	ldd	r27, Y+10	; 0x0a
    ce20:	48 17       	cp	r20, r24
    ce22:	59 07       	cpc	r21, r25
    ce24:	6a 07       	cpc	r22, r26
    ce26:	7b 07       	cpc	r23, r27
    ce28:	81 f1       	breq	.+96     	; 0xce8a <f_rename+0x1f4>
							sect = clst2sect(fs, ld_clust(fs, dir));
    ce2a:	b8 01       	movw	r22, r16
    ce2c:	f7 01       	movw	r30, r14
    ce2e:	80 81       	ld	r24, Z
    ce30:	0e 94 7e 49 	call	0x92fc	; 0x92fc <ld_clust.isra.3>
    ce34:	ab 01       	movw	r20, r22
    ce36:	bc 01       	movw	r22, r24
    ce38:	c7 01       	movw	r24, r14
    ce3a:	0e 94 7e 47 	call	0x8efc	; 0x8efc <clst2sect>
    ce3e:	ab 01       	movw	r20, r22
    ce40:	bc 01       	movw	r22, r24
							if (sect == 0) {
    ce42:	41 15       	cp	r20, r1
    ce44:	51 05       	cpc	r21, r1
    ce46:	61 05       	cpc	r22, r1
    ce48:	71 05       	cpc	r23, r1
    ce4a:	91 f1       	breq	.+100    	; 0xceb0 <f_rename+0x21a>
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    ce4c:	c7 01       	movw	r24, r14
    ce4e:	0e 94 0d 4b 	call	0x961a	; 0x961a <move_window>
    ce52:	8c 01       	movw	r16, r24
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    ce54:	89 2b       	or	r24, r25
    ce56:	09 f0       	breq	.+2      	; 0xce5a <f_rename+0x1c4>
    ce58:	67 cf       	rjmp	.-306    	; 0xcd28 <f_rename+0x92>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    ce5a:	ef 96       	adiw	r28, 0x3f	; 63
    ce5c:	8e ad       	ldd	r24, Y+62	; 0x3e
    ce5e:	9f ad       	ldd	r25, Y+63	; 0x3f
    ce60:	ef 97       	sbiw	r28, 0x3f	; 63
								if (res == FR_OK && dir[1] == '.') {
    ce62:	fc 01       	movw	r30, r24
    ce64:	ea 5a       	subi	r30, 0xAA	; 170
    ce66:	ff 4f       	sbci	r31, 0xFF	; 255
    ce68:	20 81       	ld	r18, Z
    ce6a:	2e 32       	cpi	r18, 0x2E	; 46
    ce6c:	71 f4       	brne	.+28     	; 0xce8a <f_rename+0x1f4>
									st_clust(fs, dir, djn.obj.sclust);
    ce6e:	2f 81       	ldd	r18, Y+7	; 0x07
    ce70:	38 85       	ldd	r19, Y+8	; 0x08
    ce72:	49 85       	ldd	r20, Y+9	; 0x09
    ce74:	5a 85       	ldd	r21, Y+10	; 0x0a
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    ce76:	bc 01       	movw	r22, r24
    ce78:	6b 5a       	subi	r22, 0xAB	; 171
    ce7a:	7f 4f       	sbci	r23, 0xFF	; 255
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    ce7c:	0e 94 93 49 	call	0x9326	; 0x9326 <st_clust.isra.4>
									fs->wflag = 1;
    ce80:	ef 96       	adiw	r28, 0x3f	; 63
    ce82:	ee ad       	ldd	r30, Y+62	; 0x3e
    ce84:	ff ad       	ldd	r31, Y+63	; 0x3f
    ce86:	ef 97       	sbiw	r28, 0x3f	; 63
    ce88:	b3 82       	std	Z+3, r11	; 0x03
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    ce8a:	ce 01       	movw	r24, r28
    ce8c:	8f 96       	adiw	r24, 0x2f	; 47
    ce8e:	0e 94 f1 53 	call	0xa7e2	; 0xa7e2 <dir_remove>
    ce92:	8c 01       	movw	r16, r24
				if (res == FR_OK) {
    ce94:	89 2b       	or	r24, r25
    ce96:	09 f0       	breq	.+2      	; 0xce9a <f_rename+0x204>
    ce98:	47 cf       	rjmp	.-370    	; 0xcd28 <f_rename+0x92>
					res = sync_fs(fs);
    ce9a:	ef 96       	adiw	r28, 0x3f	; 63
    ce9c:	8e ad       	ldd	r24, Y+62	; 0x3e
    ce9e:	9f ad       	ldd	r25, Y+63	; 0x3f
    cea0:	ef 97       	sbiw	r28, 0x3f	; 63
    cea2:	0e 94 f3 49 	call	0x93e6	; 0x93e6 <sync_fs>
    cea6:	8c 01       	movw	r16, r24
    cea8:	3f cf       	rjmp	.-386    	; 0xcd28 <f_rename+0x92>
    ceaa:	08 e0       	ldi	r16, 0x08	; 8
    ceac:	10 e0       	ldi	r17, 0x00	; 0
    ceae:	3c cf       	rjmp	.-392    	; 0xcd28 <f_rename+0x92>
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    ceb0:	02 e0       	ldi	r16, 0x02	; 2
    ceb2:	10 e0       	ldi	r17, 0x00	; 0
    ceb4:	39 cf       	rjmp	.-398    	; 0xcd28 <f_rename+0x92>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    ceb6:	ce 57       	subi	r28, 0x7E	; 126
    ceb8:	df 4f       	sbci	r29, 0xFF	; 255
    ceba:	e9 e0       	ldi	r30, 0x09	; 9
    cebc:	0c 94 8b e6 	jmp	0x1cd16	; 0x1cd16 <__epilogue_restores__+0x12>

0000cec0 <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    cec0:	a2 e3       	ldi	r26, 0x32	; 50
    cec2:	b0 e0       	ldi	r27, 0x00	; 0
    cec4:	e6 e6       	ldi	r30, 0x66	; 102
    cec6:	f7 e6       	ldi	r31, 0x67	; 103
    cec8:	0c 94 70 e6 	jmp	0x1cce0	; 0x1cce0 <__prologue_saves__+0x14>
    cecc:	9a ab       	std	Y+50, r25	; 0x32
    cece:	89 ab       	std	Y+49, r24	; 0x31
    ced0:	e6 2e       	mov	r14, r22
    ced2:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    ced4:	42 e0       	ldi	r20, 0x02	; 2
    ced6:	be 01       	movw	r22, r28
    ced8:	61 5d       	subi	r22, 0xD1	; 209
    ceda:	7f 4f       	sbci	r23, 0xFF	; 255
    cedc:	ce 01       	movw	r24, r28
    cede:	c1 96       	adiw	r24, 0x31	; 49
    cee0:	0e 94 88 4b 	call	0x9710	; 0x9710 <mount_volume>
	if (res == FR_OK) {
    cee4:	00 97       	sbiw	r24, 0x00	; 0
    cee6:	a9 f5       	brne	.+106    	; 0xcf52 <f_chmod+0x92>
		dj.obj.fs = fs;
    cee8:	8f a5       	ldd	r24, Y+47	; 0x2f
    ceea:	98 a9       	ldd	r25, Y+48	; 0x30
    ceec:	9a 83       	std	Y+2, r25	; 0x02
    ceee:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cef0:	80 e0       	ldi	r24, 0x00	; 0
    cef2:	92 e0       	ldi	r25, 0x02	; 2
    cef4:	08 d1       	rcall	.+528    	; 0xd106 <ff_memalloc>
    cef6:	6c 01       	movw	r12, r24
    cef8:	00 97       	sbiw	r24, 0x00	; 0
    cefa:	b1 f0       	breq	.+44     	; 0xcf28 <f_chmod+0x68>
    cefc:	ef a5       	ldd	r30, Y+47	; 0x2f
    cefe:	f8 a9       	ldd	r31, Y+48	; 0x30
    cf00:	94 87       	std	Z+12, r25	; 0x0c
    cf02:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    cf04:	69 a9       	ldd	r22, Y+49	; 0x31
    cf06:	7a a9       	ldd	r23, Y+50	; 0x32
    cf08:	ce 01       	movw	r24, r28
    cf0a:	01 96       	adiw	r24, 0x01	; 1
    cf0c:	0e 94 d5 56 	call	0xadaa	; 0xadaa <follow_path>
    cf10:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    cf12:	89 2b       	or	r24, r25
    cf14:	29 f4       	brne	.+10     	; 0xcf20 <f_chmod+0x60>
    cf16:	88 a5       	ldd	r24, Y+40	; 0x28
    cf18:	80 7a       	andi	r24, 0xA0	; 160
    cf1a:	49 f0       	breq	.+18     	; 0xcf2e <f_chmod+0x6e>
    cf1c:	06 e0       	ldi	r16, 0x06	; 6
    cf1e:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cf20:	c6 01       	movw	r24, r12
    cf22:	f4 d0       	rcall	.+488    	; 0xd10c <ff_memfree>
    cf24:	c8 01       	movw	r24, r16
    cf26:	15 c0       	rjmp	.+42     	; 0xcf52 <f_chmod+0x92>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cf28:	81 e1       	ldi	r24, 0x11	; 17
    cf2a:	90 e0       	ldi	r25, 0x00	; 0
    cf2c:	12 c0       	rjmp	.+36     	; 0xcf52 <f_chmod+0x92>
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    cf2e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cf30:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cf32:	83 85       	ldd	r24, Z+11	; 0x0b
    cf34:	6e 2d       	mov	r22, r14
    cf36:	68 27       	eor	r22, r24
    cf38:	6f 21       	and	r22, r15
    cf3a:	67 72       	andi	r22, 0x27	; 39
    cf3c:	68 27       	eor	r22, r24
    cf3e:	63 87       	std	Z+11, r22	; 0x0b
				fs->wflag = 1;
    cf40:	8f a5       	ldd	r24, Y+47	; 0x2f
    cf42:	98 a9       	ldd	r25, Y+48	; 0x30
    cf44:	21 e0       	ldi	r18, 0x01	; 1
    cf46:	fc 01       	movw	r30, r24
    cf48:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    cf4a:	0e 94 f3 49 	call	0x93e6	; 0x93e6 <sync_fs>
    cf4e:	8c 01       	movw	r16, r24
    cf50:	e7 cf       	rjmp	.-50     	; 0xcf20 <f_chmod+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cf52:	e2 96       	adiw	r28, 0x32	; 50
    cf54:	e8 e0       	ldi	r30, 0x08	; 8
    cf56:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__epilogue_restores__+0x14>

0000cf5a <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    cf5a:	a2 e3       	ldi	r26, 0x32	; 50
    cf5c:	b0 e0       	ldi	r27, 0x00	; 0
    cf5e:	e3 eb       	ldi	r30, 0xB3	; 179
    cf60:	f7 e6       	ldi	r31, 0x67	; 103
    cf62:	0c 94 70 e6 	jmp	0x1cce0	; 0x1cce0 <__prologue_saves__+0x14>
    cf66:	9a ab       	std	Y+50, r25	; 0x32
    cf68:	89 ab       	std	Y+49, r24	; 0x31
    cf6a:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cf6c:	42 e0       	ldi	r20, 0x02	; 2
    cf6e:	be 01       	movw	r22, r28
    cf70:	61 5d       	subi	r22, 0xD1	; 209
    cf72:	7f 4f       	sbci	r23, 0xFF	; 255
    cf74:	ce 01       	movw	r24, r28
    cf76:	c1 96       	adiw	r24, 0x31	; 49
    cf78:	0e 94 88 4b 	call	0x9710	; 0x9710 <mount_volume>
	if (res == FR_OK) {
    cf7c:	00 97       	sbiw	r24, 0x00	; 0
    cf7e:	09 f0       	breq	.+2      	; 0xcf82 <f_utime+0x28>
    cf80:	41 c0       	rjmp	.+130    	; 0xd004 <f_utime+0xaa>
		dj.obj.fs = fs;
    cf82:	8f a5       	ldd	r24, Y+47	; 0x2f
    cf84:	98 a9       	ldd	r25, Y+48	; 0x30
    cf86:	9a 83       	std	Y+2, r25	; 0x02
    cf88:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cf8a:	80 e0       	ldi	r24, 0x00	; 0
    cf8c:	92 e0       	ldi	r25, 0x02	; 2
    cf8e:	bb d0       	rcall	.+374    	; 0xd106 <ff_memalloc>
    cf90:	7c 01       	movw	r14, r24
    cf92:	00 97       	sbiw	r24, 0x00	; 0
    cf94:	b1 f0       	breq	.+44     	; 0xcfc2 <f_utime+0x68>
    cf96:	ef a5       	ldd	r30, Y+47	; 0x2f
    cf98:	f8 a9       	ldd	r31, Y+48	; 0x30
    cf9a:	94 87       	std	Z+12, r25	; 0x0c
    cf9c:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    cf9e:	69 a9       	ldd	r22, Y+49	; 0x31
    cfa0:	7a a9       	ldd	r23, Y+50	; 0x32
    cfa2:	ce 01       	movw	r24, r28
    cfa4:	01 96       	adiw	r24, 0x01	; 1
    cfa6:	0e 94 d5 56 	call	0xadaa	; 0xadaa <follow_path>
    cfaa:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    cfac:	89 2b       	or	r24, r25
    cfae:	29 f4       	brne	.+10     	; 0xcfba <f_utime+0x60>
    cfb0:	88 a5       	ldd	r24, Y+40	; 0x28
    cfb2:	80 7a       	andi	r24, 0xA0	; 160
    cfb4:	49 f0       	breq	.+18     	; 0xcfc8 <f_utime+0x6e>
    cfb6:	06 e0       	ldi	r16, 0x06	; 6
    cfb8:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cfba:	c7 01       	movw	r24, r14
    cfbc:	a7 d0       	rcall	.+334    	; 0xd10c <ff_memfree>
    cfbe:	c8 01       	movw	r24, r16
    cfc0:	21 c0       	rjmp	.+66     	; 0xd004 <f_utime+0xaa>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cfc2:	81 e1       	ldi	r24, 0x11	; 17
    cfc4:	90 e0       	ldi	r25, 0x00	; 0
    cfc6:	1e c0       	rjmp	.+60     	; 0xd004 <f_utime+0xaa>
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    cfc8:	f6 01       	movw	r30, r12
    cfca:	44 81       	ldd	r20, Z+4	; 0x04
    cfcc:	55 81       	ldd	r21, Z+5	; 0x05
    cfce:	60 e0       	ldi	r22, 0x00	; 0
    cfd0:	70 e0       	ldi	r23, 0x00	; 0
    cfd2:	ba 01       	movw	r22, r20
    cfd4:	55 27       	eor	r21, r21
    cfd6:	44 27       	eor	r20, r20
    cfd8:	86 81       	ldd	r24, Z+6	; 0x06
    cfda:	97 81       	ldd	r25, Z+7	; 0x07
    cfdc:	a0 e0       	ldi	r26, 0x00	; 0
    cfde:	b0 e0       	ldi	r27, 0x00	; 0
    cfe0:	48 2b       	or	r20, r24
    cfe2:	59 2b       	or	r21, r25
    cfe4:	6a 2b       	or	r22, r26
    cfe6:	7b 2b       	or	r23, r27
    cfe8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cfea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cfec:	46 96       	adiw	r24, 0x16	; 22
    cfee:	0e 94 60 47 	call	0x8ec0	; 0x8ec0 <st_dword>
				fs->wflag = 1;
    cff2:	8f a5       	ldd	r24, Y+47	; 0x2f
    cff4:	98 a9       	ldd	r25, Y+48	; 0x30
    cff6:	21 e0       	ldi	r18, 0x01	; 1
    cff8:	fc 01       	movw	r30, r24
    cffa:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    cffc:	0e 94 f3 49 	call	0x93e6	; 0x93e6 <sync_fs>
    d000:	8c 01       	movw	r16, r24
    d002:	db cf       	rjmp	.-74     	; 0xcfba <f_utime+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    d004:	e2 96       	adiw	r28, 0x32	; 50
    d006:	e8 e0       	ldi	r30, 0x08	; 8
    d008:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__epilogue_restores__+0x14>

0000d00c <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    d00c:	a2 e3       	ldi	r26, 0x32	; 50
    d00e:	b0 e0       	ldi	r27, 0x00	; 0
    d010:	ec e0       	ldi	r30, 0x0C	; 12
    d012:	f8 e6       	ldi	r31, 0x68	; 104
    d014:	0c 94 70 e6 	jmp	0x1cce0	; 0x1cce0 <__prologue_saves__+0x14>
    d018:	9a ab       	std	Y+50, r25	; 0x32
    d01a:	89 ab       	std	Y+49, r24	; 0x31
    d01c:	7b 01       	movw	r14, r22
    d01e:	6a 01       	movw	r12, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    d020:	40 e0       	ldi	r20, 0x00	; 0
    d022:	be 01       	movw	r22, r28
    d024:	61 5d       	subi	r22, 0xD1	; 209
    d026:	7f 4f       	sbci	r23, 0xFF	; 255
    d028:	ce 01       	movw	r24, r28
    d02a:	c1 96       	adiw	r24, 0x31	; 49
    d02c:	0e 94 88 4b 	call	0x9710	; 0x9710 <mount_volume>
    d030:	8c 01       	movw	r16, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    d032:	89 2b       	or	r24, r25
    d034:	09 f0       	breq	.+2      	; 0xd038 <f_getlabel+0x2c>
    d036:	62 c0       	rjmp	.+196    	; 0xd0fc <f_getlabel+0xf0>
    d038:	e1 14       	cp	r14, r1
    d03a:	f1 04       	cpc	r15, r1
    d03c:	a1 f1       	breq	.+104    	; 0xd0a6 <f_getlabel+0x9a>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    d03e:	8f a5       	ldd	r24, Y+47	; 0x2f
    d040:	98 a9       	ldd	r25, Y+48	; 0x30
    d042:	9a 83       	std	Y+2, r25	; 0x02
    d044:	89 83       	std	Y+1, r24	; 0x01
    d046:	1f 82       	std	Y+7, r1	; 0x07
    d048:	18 86       	std	Y+8, r1	; 0x08
    d04a:	19 86       	std	Y+9, r1	; 0x09
    d04c:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    d04e:	40 e0       	ldi	r20, 0x00	; 0
    d050:	50 e0       	ldi	r21, 0x00	; 0
    d052:	ba 01       	movw	r22, r20
    d054:	ce 01       	movw	r24, r28
    d056:	01 96       	adiw	r24, 0x01	; 1
    d058:	0e 94 8f 4f 	call	0x9f1e	; 0x9f1e <dir_sdi>
		if (res == FR_OK) {
    d05c:	00 97       	sbiw	r24, 0x00	; 0
    d05e:	f1 f4       	brne	.+60     	; 0xd09c <f_getlabel+0x90>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    d060:	61 e0       	ldi	r22, 0x01	; 1
    d062:	70 e0       	ldi	r23, 0x00	; 0
    d064:	ce 01       	movw	r24, r28
    d066:	01 96       	adiw	r24, 0x01	; 1
    d068:	0e 94 28 53 	call	0xa650	; 0xa650 <dir_read>
		 	if (res == FR_OK) {
    d06c:	00 97       	sbiw	r24, 0x00	; 0
    d06e:	b1 f4       	brne	.+44     	; 0xd09c <f_getlabel+0x90>
    d070:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d072:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d074:	f7 01       	movw	r30, r14
    d076:	3b 96       	adiw	r30, 0x0b	; 11
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    d078:	a7 01       	movw	r20, r14
    d07a:	dc 01       	movw	r26, r24
    d07c:	2d 91       	ld	r18, X+
    d07e:	cd 01       	movw	r24, r26
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
						if (wc == 0) { di = 0; break; }
						di += wc;
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
    d080:	da 01       	movw	r26, r20
    d082:	2d 93       	st	X+, r18
    d084:	ad 01       	movw	r20, r26
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    d086:	ae 17       	cp	r26, r30
    d088:	bf 07       	cpc	r27, r31
    d08a:	b9 f7       	brne	.-18     	; 0xd07a <f_getlabel+0x6e>
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    d08c:	10 82       	st	Z, r1
						if (di == 0) break;
    d08e:	ee 16       	cp	r14, r30
    d090:	ff 06       	cpc	r15, r31
    d092:	49 f0       	breq	.+18     	; 0xd0a6 <f_getlabel+0x9a>
					} while (label[--di] == ' ');
    d094:	82 91       	ld	r24, -Z
    d096:	80 32       	cpi	r24, 0x20	; 32
    d098:	c9 f3       	breq	.-14     	; 0xd08c <f_getlabel+0x80>
    d09a:	05 c0       	rjmp	.+10     	; 0xd0a6 <f_getlabel+0x9a>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d09c:	84 30       	cpi	r24, 0x04	; 4
    d09e:	91 05       	cpc	r25, r1
    d0a0:	61 f5       	brne	.+88     	; 0xd0fa <f_getlabel+0xee>
			label[0] = 0;
    d0a2:	f7 01       	movw	r30, r14
    d0a4:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    d0a6:	c1 14       	cp	r12, r1
    d0a8:	d1 04       	cpc	r13, r1
    d0aa:	41 f1       	breq	.+80     	; 0xd0fc <f_getlabel+0xf0>
		res = move_window(fs, fs->volbase);
    d0ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    d0ae:	98 a9       	ldd	r25, Y+48	; 0x30
    d0b0:	fc 01       	movw	r30, r24
    d0b2:	41 a1       	ldd	r20, Z+33	; 0x21
    d0b4:	52 a1       	ldd	r21, Z+34	; 0x22
    d0b6:	63 a1       	ldd	r22, Z+35	; 0x23
    d0b8:	74 a1       	ldd	r23, Z+36	; 0x24
    d0ba:	0e 94 0d 4b 	call	0x961a	; 0x961a <move_window>
    d0be:	8c 01       	movw	r16, r24
		if (res == FR_OK) {
    d0c0:	89 2b       	or	r24, r25
    d0c2:	e1 f4       	brne	.+56     	; 0xd0fc <f_getlabel+0xf0>
			switch (fs->fs_type) {
    d0c4:	ef a5       	ldd	r30, Y+47	; 0x2f
    d0c6:	f8 a9       	ldd	r31, Y+48	; 0x30
    d0c8:	80 81       	ld	r24, Z
    d0ca:	83 30       	cpi	r24, 0x03	; 3
    d0cc:	29 f0       	breq	.+10     	; 0xd0d8 <f_getlabel+0xcc>
    d0ce:	84 30       	cpi	r24, 0x04	; 4
    d0d0:	31 f0       	breq	.+12     	; 0xd0de <f_getlabel+0xd2>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    d0d2:	87 e2       	ldi	r24, 0x27	; 39
    d0d4:	90 e0       	ldi	r25, 0x00	; 0
    d0d6:	05 c0       	rjmp	.+10     	; 0xd0e2 <f_getlabel+0xd6>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    d0d8:	83 e4       	ldi	r24, 0x43	; 67
    d0da:	90 e0       	ldi	r25, 0x00	; 0
    d0dc:	02 c0       	rjmp	.+4      	; 0xd0e2 <f_getlabel+0xd6>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    d0de:	84 e6       	ldi	r24, 0x64	; 100
    d0e0:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    d0e2:	f5 96       	adiw	r30, 0x35	; 53
    d0e4:	8e 0f       	add	r24, r30
    d0e6:	9f 1f       	adc	r25, r31
    d0e8:	0e 94 4b 47 	call	0x8e96	; 0x8e96 <ld_dword>
    d0ec:	d6 01       	movw	r26, r12
    d0ee:	6d 93       	st	X+, r22
    d0f0:	7d 93       	st	X+, r23
    d0f2:	8d 93       	st	X+, r24
    d0f4:	9c 93       	st	X, r25
    d0f6:	13 97       	sbiw	r26, 0x03	; 3
    d0f8:	01 c0       	rjmp	.+2      	; 0xd0fc <f_getlabel+0xf0>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    d0fa:	8c 01       	movw	r16, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    d0fc:	c8 01       	movw	r24, r16
    d0fe:	e2 96       	adiw	r28, 0x32	; 50
    d100:	e8 e0       	ldi	r30, 0x08	; 8
    d102:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__epilogue_restores__+0x14>

0000d106 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d106:	0c 94 7b 27 	jmp	0x4ef6	; 0x4ef6 <safemalloc>
}
    d10a:	08 95       	ret

0000d10c <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    d10c:	0c 94 9d 27 	jmp	0x4f3a	; 0x4f3a <safefree>
    d110:	08 95       	ret

0000d112 <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    d112:	cf 92       	push	r12
    d114:	df 92       	push	r13
    d116:	ef 92       	push	r14
    d118:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    d11a:	60 38       	cpi	r22, 0x80	; 128
    d11c:	71 05       	cpc	r23, r1
    d11e:	81 05       	cpc	r24, r1
    d120:	91 05       	cpc	r25, r1
    d122:	10 f4       	brcc	.+4      	; 0xd128 <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    d124:	cb 01       	movw	r24, r22
    d126:	23 c0       	rjmp	.+70     	; 0xd16e <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    d128:	61 15       	cp	r22, r1
    d12a:	71 05       	cpc	r23, r1
    d12c:	21 e0       	ldi	r18, 0x01	; 1
    d12e:	82 07       	cpc	r24, r18
    d130:	91 05       	cpc	r25, r1
    d132:	d8 f4       	brcc	.+54     	; 0xd16a <ff_uni2oem+0x58>
    d134:	45 3b       	cpi	r20, 0xB5	; 181
    d136:	51 40       	sbci	r21, 0x01	; 1
    d138:	c1 f4       	brne	.+48     	; 0xd16a <ff_uni2oem+0x58>
    d13a:	e6 ea       	ldi	r30, 0xA6	; 166
    d13c:	f7 e0       	ldi	r31, 0x07	; 7
    d13e:	20 e0       	ldi	r18, 0x00	; 0
    d140:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    d142:	c1 90       	ld	r12, Z+
    d144:	d1 90       	ld	r13, Z+
    d146:	e1 2c       	mov	r14, r1
    d148:	f1 2c       	mov	r15, r1
    d14a:	6c 15       	cp	r22, r12
    d14c:	7d 05       	cpc	r23, r13
    d14e:	8e 05       	cpc	r24, r14
    d150:	9f 05       	cpc	r25, r15
    d152:	29 f0       	breq	.+10     	; 0xd15e <ff_uni2oem+0x4c>
    d154:	2f 5f       	subi	r18, 0xFF	; 255
    d156:	3f 4f       	sbci	r19, 0xFF	; 255
    d158:	20 38       	cpi	r18, 0x80	; 128
    d15a:	31 05       	cpc	r19, r1
    d15c:	91 f7       	brne	.-28     	; 0xd142 <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    d15e:	b9 01       	movw	r22, r18
    d160:	60 58       	subi	r22, 0x80	; 128
    d162:	7f 4f       	sbci	r23, 0xFF	; 255
    d164:	cb 01       	movw	r24, r22
    d166:	99 27       	eor	r25, r25
    d168:	02 c0       	rjmp	.+4      	; 0xd16e <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d16a:	80 e0       	ldi	r24, 0x00	; 0
    d16c:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d16e:	ff 90       	pop	r15
    d170:	ef 90       	pop	r14
    d172:	df 90       	pop	r13
    d174:	cf 90       	pop	r12
    d176:	08 95       	ret

0000d178 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    d178:	80 38       	cpi	r24, 0x80	; 128
    d17a:	91 05       	cpc	r25, r1
    d17c:	88 f0       	brcs	.+34     	; 0xd1a0 <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    d17e:	65 3b       	cpi	r22, 0xB5	; 181
    d180:	71 40       	sbci	r23, 0x01	; 1
    d182:	61 f4       	brne	.+24     	; 0xd19c <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    d184:	8f 3f       	cpi	r24, 0xFF	; 255
    d186:	91 05       	cpc	r25, r1
    d188:	09 f0       	breq	.+2      	; 0xd18c <ff_oem2uni+0x14>
    d18a:	40 f4       	brcc	.+16     	; 0xd19c <ff_oem2uni+0x24>
    d18c:	88 0f       	add	r24, r24
    d18e:	99 1f       	adc	r25, r25
    d190:	fc 01       	movw	r30, r24
    d192:	ea 55       	subi	r30, 0x5A	; 90
    d194:	f9 4f       	sbci	r31, 0xF9	; 249
    d196:	80 81       	ld	r24, Z
    d198:	91 81       	ldd	r25, Z+1	; 0x01
    d19a:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    d19c:	80 e0       	ldi	r24, 0x00	; 0
    d19e:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    d1a0:	08 95       	ret

0000d1a2 <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    d1a2:	61 15       	cp	r22, r1
    d1a4:	71 05       	cpc	r23, r1
    d1a6:	21 e0       	ldi	r18, 0x01	; 1
    d1a8:	82 07       	cpc	r24, r18
    d1aa:	91 05       	cpc	r25, r1
    d1ac:	08 f0       	brcs	.+2      	; 0xd1b0 <ff_wtoupper+0xe>
    d1ae:	5a c0       	rjmp	.+180    	; 0xd264 <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    d1b0:	61 15       	cp	r22, r1
    d1b2:	80 e1       	ldi	r24, 0x10	; 16
    d1b4:	78 07       	cpc	r23, r24
    d1b6:	18 f0       	brcs	.+6      	; 0xd1be <ff_wtoupper+0x1c>
    d1b8:	a8 ef       	ldi	r26, 0xF8	; 248
    d1ba:	b4 e0       	ldi	r27, 0x04	; 4
    d1bc:	02 c0       	rjmp	.+4      	; 0xd1c2 <ff_wtoupper+0x20>
    d1be:	a4 eb       	ldi	r26, 0xB4	; 180
    d1c0:	b5 e0       	ldi	r27, 0x05	; 5
		for (;;) {
			bc = *p++;								/* Get the block base */
    d1c2:	2d 91       	ld	r18, X+
    d1c4:	3c 91       	ld	r19, X
    d1c6:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    d1c8:	21 15       	cp	r18, r1
    d1ca:	31 05       	cpc	r19, r1
    d1cc:	09 f4       	brne	.+2      	; 0xd1d0 <ff_wtoupper+0x2e>
    d1ce:	48 c0       	rjmp	.+144    	; 0xd260 <ff_wtoupper+0xbe>
    d1d0:	62 17       	cp	r22, r18
    d1d2:	73 07       	cpc	r23, r19
    d1d4:	08 f4       	brcc	.+2      	; 0xd1d8 <ff_wtoupper+0x36>
    d1d6:	44 c0       	rjmp	.+136    	; 0xd260 <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d1d8:	14 96       	adiw	r26, 0x04	; 4
    d1da:	fd 01       	movw	r30, r26
    d1dc:	32 97       	sbiw	r30, 0x02	; 2
    d1de:	80 81       	ld	r24, Z
    d1e0:	91 81       	ldd	r25, Z+1	; 0x01
    d1e2:	e9 2f       	mov	r30, r25
    d1e4:	ff 27       	eor	r31, r31
    d1e6:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    d1e8:	a9 01       	movw	r20, r18
    d1ea:	48 0f       	add	r20, r24
    d1ec:	59 1f       	adc	r21, r25
    d1ee:	64 17       	cp	r22, r20
    d1f0:	75 07       	cpc	r23, r21
    d1f2:	70 f5       	brcc	.+92     	; 0xd250 <ff_wtoupper+0xae>
				switch (cmd) {
    d1f4:	e9 30       	cpi	r30, 0x09	; 9
    d1f6:	f1 05       	cpc	r31, r1
    d1f8:	98 f5       	brcc	.+102    	; 0xd260 <ff_wtoupper+0xbe>
    d1fa:	ec 54       	subi	r30, 0x4C	; 76
    d1fc:	ff 4f       	sbci	r31, 0xFF	; 255
    d1fe:	0c 94 37 e6 	jmp	0x1cc6e	; 0x1cc6e <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    d202:	62 1b       	sub	r22, r18
    d204:	73 0b       	sbc	r23, r19
    d206:	fb 01       	movw	r30, r22
    d208:	ee 0f       	add	r30, r30
    d20a:	ff 1f       	adc	r31, r31
    d20c:	ea 0f       	add	r30, r26
    d20e:	fb 1f       	adc	r31, r27
    d210:	60 81       	ld	r22, Z
    d212:	71 81       	ldd	r23, Z+1	; 0x01
    d214:	25 c0       	rjmp	.+74     	; 0xd260 <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    d216:	cb 01       	movw	r24, r22
    d218:	82 1b       	sub	r24, r18
    d21a:	93 0b       	sbc	r25, r19
    d21c:	81 70       	andi	r24, 0x01	; 1
    d21e:	99 27       	eor	r25, r25
    d220:	68 1b       	sub	r22, r24
    d222:	79 0b       	sbc	r23, r25
    d224:	1d c0       	rjmp	.+58     	; 0xd260 <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    d226:	60 51       	subi	r22, 0x10	; 16
    d228:	71 09       	sbc	r23, r1
    d22a:	1a c0       	rjmp	.+52     	; 0xd260 <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    d22c:	60 52       	subi	r22, 0x20	; 32
    d22e:	71 09       	sbc	r23, r1
    d230:	17 c0       	rjmp	.+46     	; 0xd260 <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    d232:	60 53       	subi	r22, 0x30	; 48
    d234:	71 09       	sbc	r23, r1
    d236:	14 c0       	rjmp	.+40     	; 0xd260 <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    d238:	6a 51       	subi	r22, 0x1A	; 26
    d23a:	71 09       	sbc	r23, r1
    d23c:	11 c0       	rjmp	.+34     	; 0xd260 <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    d23e:	68 5f       	subi	r22, 0xF8	; 248
    d240:	7f 4f       	sbci	r23, 0xFF	; 255
    d242:	0e c0       	rjmp	.+28     	; 0xd260 <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    d244:	60 55       	subi	r22, 0x50	; 80
    d246:	71 09       	sbc	r23, r1
    d248:	0b c0       	rjmp	.+22     	; 0xd260 <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    d24a:	60 56       	subi	r22, 0x60	; 96
    d24c:	7c 41       	sbci	r23, 0x1C	; 28
    d24e:	08 c0       	rjmp	.+16     	; 0xd260 <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    d250:	ef 2b       	or	r30, r31
    d252:	09 f0       	breq	.+2      	; 0xd256 <ff_wtoupper+0xb4>
    d254:	b6 cf       	rjmp	.-148    	; 0xd1c2 <ff_wtoupper+0x20>
    d256:	88 0f       	add	r24, r24
    d258:	99 1f       	adc	r25, r25
    d25a:	a8 0f       	add	r26, r24
    d25c:	b9 1f       	adc	r27, r25
    d25e:	b1 cf       	rjmp	.-158    	; 0xd1c2 <ff_wtoupper+0x20>
		}
		uni = uc;
    d260:	80 e0       	ldi	r24, 0x00	; 0
    d262:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d264:	08 95       	ret

0000d266 <disk_status>:

DSTATUS disk_status (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
    d266:	81 11       	cpse	r24, r1
    d268:	02 c0       	rjmp	.+4      	; 0xd26e <disk_status+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_status() );
    d26a:	a1 c1       	rjmp	.+834    	; 0xd5ae <mmc_disk_status>
    d26c:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_status() );
#endif
    }
    return STA_NOINIT;
    d26e:	81 e0       	ldi	r24, 0x01	; 1
}
    d270:	08 95       	ret

0000d272 <disk_initialize>:
DSTATUS disk_initialize (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{

    switch (pdrv)
    d272:	81 11       	cpse	r24, r1
    d274:	02 c0       	rjmp	.+4      	; 0xd27a <disk_initialize+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_initialize() );
    d276:	f6 c0       	rjmp	.+492    	; 0xd464 <mmc_disk_initialize>
    d278:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_initialize() );
#endif
    }
    return STA_NOINIT;
    d27a:	81 e0       	ldi	r24, 0x01	; 1
}
    d27c:	08 95       	ret

0000d27e <disk_read>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
BYTE *buff,                                       /* Data buffer to store read data */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to read */
)
{
    d27e:	0f 93       	push	r16
    d280:	1f 93       	push	r17
    d282:	fb 01       	movw	r30, r22
    switch (pdrv)
    d284:	81 11       	cpse	r24, r1
    d286:	06 c0       	rjmp	.+12     	; 0xd294 <disk_read+0x16>
    d288:	ba 01       	movw	r22, r20
    d28a:	a9 01       	movw	r20, r18
    d28c:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_read(buff, sector, count) );
    d28e:	98 01       	movw	r18, r16
    d290:	91 d1       	rcall	.+802    	; 0xd5b4 <mmc_disk_read>
    d292:	02 c0       	rjmp	.+4      	; 0xd298 <disk_read+0x1a>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_read(buff, sector, count) );
#endif
    }
    return RES_PARERR;
    d294:	84 e0       	ldi	r24, 0x04	; 4
    d296:	90 e0       	ldi	r25, 0x00	; 0
}
    d298:	1f 91       	pop	r17
    d29a:	0f 91       	pop	r16
    d29c:	08 95       	ret

0000d29e <disk_write>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
const BYTE *buff,                                 /* Data to be written */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to write */
)
{
    d29e:	0f 93       	push	r16
    d2a0:	1f 93       	push	r17
    d2a2:	fb 01       	movw	r30, r22
    switch (pdrv)
    d2a4:	81 11       	cpse	r24, r1
    d2a6:	06 c0       	rjmp	.+12     	; 0xd2b4 <disk_write+0x16>
    d2a8:	ba 01       	movw	r22, r20
    d2aa:	a9 01       	movw	r20, r18
    d2ac:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_write(buff, sector, count) );
    d2ae:	98 01       	movw	r18, r16
    d2b0:	e2 d1       	rcall	.+964    	; 0xd676 <mmc_disk_write>
    d2b2:	02 c0       	rjmp	.+4      	; 0xd2b8 <disk_write+0x1a>
        case DEV_USB :
            return ( usb_disk_write(buff, sector, count) );
#endif
    }

    return RES_PARERR;
    d2b4:	84 e0       	ldi	r24, 0x04	; 4
    d2b6:	90 e0       	ldi	r25, 0x00	; 0
}
    d2b8:	1f 91       	pop	r17
    d2ba:	0f 91       	pop	r16
    d2bc:	08 95       	ret

0000d2be <disk_ioctl>:
DRESULT disk_ioctl (
BYTE pdrv,                                        /* Physical drive nmuber (0..) */
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d2be:	96 2f       	mov	r25, r22
    switch (pdrv)
    d2c0:	81 11       	cpse	r24, r1
    d2c2:	04 c0       	rjmp	.+8      	; 0xd2cc <disk_ioctl+0xe>
    d2c4:	ba 01       	movw	r22, r20
    d2c6:	89 2f       	mov	r24, r25
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_ioctl(cmd, buff) );
    d2c8:	4a c2       	rjmp	.+1172   	; 0xd75e <mmc_disk_ioctl>
    d2ca:	08 95       	ret
#ifdef DRV_USB
        case DEV_MMC :
            return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d2cc:	84 e0       	ldi	r24, 0x04	; 4
    d2ce:	90 e0       	ldi	r25, 0x00	; 0
}
    d2d0:	08 95       	ret

0000d2d2 <xchg_spi>:
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d2d2:	f9 c4       	rjmp	.+2546   	; 0xdcc6 <mmc_spi_TXRX>
    return dat;
}
    d2d4:	08 95       	ret

0000d2d6 <deselect>:
///@return void
MEMSPACE
static
void deselect (void)
{
    CS_HIGH();
    d2d6:	ce d4       	rcall	.+2460   	; 0xdc74 <mmc_spi_end>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d2d8:	8f ef       	ldi	r24, 0xFF	; 255
    d2da:	fb df       	rcall	.-10     	; 0xd2d2 <xchg_spi>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d2dc:	8f ef       	ldi	r24, 0xFF	; 255
    d2de:	f9 cf       	rjmp	.-14     	; 0xd2d2 <xchg_spi>
    d2e0:	08 95       	ret

0000d2e2 <rcvr_datablock>:
    d2e2:	0f 93       	push	r16
static
int rcvr_datablock (
BYTE *buff,                                       /*< Data buffer to store received data */
UINT btr                                          /*< Byte count (must be multiple of 4) */
)
{
    d2e4:	1f 93       	push	r17
    d2e6:	cf 93       	push	r28
    d2e8:	df 93       	push	r29
    d2ea:	ec 01       	movw	r28, r24
    d2ec:	8b 01       	movw	r16, r22
    BYTE token;

    mmc_set_ms_timeout(1000);
    d2ee:	88 ee       	ldi	r24, 0xE8	; 232
    d2f0:	93 e0       	ldi	r25, 0x03	; 3
    d2f2:	ec d4       	rcall	.+2520   	; 0xdccc <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d2f4:	8f ef       	ldi	r24, 0xFF	; 255
    d2f6:	e7 d4       	rcall	.+2510   	; 0xdcc6 <mmc_spi_TXRX>

    mmc_set_ms_timeout(1000);
    do                                            /* Wait for data packet in timeout of 400ms */
    {
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    d2f8:	8f 3f       	cpi	r24, 0xFF	; 255
    d2fa:	31 f4       	brne	.+12     	; 0xd308 <rcvr_datablock+0x26>
    d2fc:	ee d4       	rcall	.+2524   	; 0xdcda <mmc_test_timeout>
    d2fe:	89 2b       	or	r24, r25
    d300:	c9 f3       	breq	.-14     	; 0xd2f4 <rcvr_datablock+0x12>
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */
    d302:	80 e0       	ldi	r24, 0x00	; 0
    d304:	90 e0       	ldi	r25, 0x00	; 0
    d306:	0b c0       	rjmp	.+22     	; 0xd31e <rcvr_datablock+0x3c>
    d308:	8e 3f       	cpi	r24, 0xFE	; 254
void rcvr_spi_multi (
BYTE *p,                                          /* Data read buffer */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_RX_buffer((uint8_t *)p, cnt);
    d30a:	d9 f7       	brne	.-10     	; 0xd302 <rcvr_datablock+0x20>
    d30c:	b8 01       	movw	r22, r16
    d30e:	ce 01       	movw	r24, r28
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */

    rcvr_spi_multi(buff, btr);                    /* Receive the data block into buffer */
    xchg_spi(0xFF);                               /* Discard CRC */
    d310:	d7 d4       	rcall	.+2478   	; 0xdcc0 <mmc_spi_RX_buffer>
    d312:	8f ef       	ldi	r24, 0xFF	; 255
    d314:	de df       	rcall	.-68     	; 0xd2d2 <xchg_spi>
    xchg_spi(0xFF);
    d316:	8f ef       	ldi	r24, 0xFF	; 255
    d318:	dc df       	rcall	.-72     	; 0xd2d2 <xchg_spi>
    d31a:	81 e0       	ldi	r24, 0x01	; 1
    d31c:	90 e0       	ldi	r25, 0x00	; 0
    d31e:	df 91       	pop	r29

    return 1;                                     /* Return with success */
}
    d320:	cf 91       	pop	r28
    d322:	1f 91       	pop	r17
    d324:	0f 91       	pop	r16
    d326:	08 95       	ret

0000d328 <wait_ready>:
    d328:	cf 93       	push	r28
int wait_ready (
UINT wt                                           /*< Timeout [ms] */
)
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    d32a:	d0 d4       	rcall	.+2464   	; 0xdccc <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d32c:	8f ef       	ldi	r24, 0xFF	; 255
    d32e:	cb d4       	rcall	.+2454   	; 0xdcc6 <mmc_spi_TXRX>
    d330:	c8 2f       	mov	r28, r24
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    do
    d = xchg_spi(0xFF);
    while (d != 0xFF && !mmc_test_timeout());
    d332:	8f 3f       	cpi	r24, 0xFF	; 255
    d334:	19 f0       	breq	.+6      	; 0xd33c <wait_ready+0x14>
    d336:	d1 d4       	rcall	.+2466   	; 0xdcda <mmc_test_timeout>
    d338:	89 2b       	or	r24, r25
    d33a:	c1 f3       	breq	.-16     	; 0xd32c <wait_ready+0x4>

    return (d == 0xFF) ? 1 : 0;
    d33c:	81 e0       	ldi	r24, 0x01	; 1
    d33e:	90 e0       	ldi	r25, 0x00	; 0
    d340:	cf 3f       	cpi	r28, 0xFF	; 255
    d342:	11 f0       	breq	.+4      	; 0xd348 <wait_ready+0x20>
    d344:	80 e0       	ldi	r24, 0x00	; 0
    d346:	90 e0       	ldi	r25, 0x00	; 0
}
    d348:	cf 91       	pop	r28
    d34a:	08 95       	ret

0000d34c <select>:
///@return 1 Successful
///@return 0 Timeout
MEMSPACE
static
int select (void)
{
    d34c:	cf 93       	push	r28
    d34e:	df 93       	push	r29
    d350:	00 d0       	rcall	.+0      	; 0xd352 <select+0x6>
    d352:	1f 92       	push	r1
    CS_LOW();
    d354:	82 d4       	rcall	.+2308   	; 0xdc5a <mmc_spi_begin>
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */
    d356:	8f ef       	ldi	r24, 0xFF	; 255
    d358:	bc df       	rcall	.-136    	; 0xd2d2 <xchg_spi>

    if (wait_ready(1000))
    d35a:	88 ee       	ldi	r24, 0xE8	; 232
    d35c:	93 e0       	ldi	r25, 0x03	; 3
    d35e:	e4 df       	rcall	.-56     	; 0xd328 <wait_ready>
    d360:	ec 01       	movw	r28, r24
    d362:	89 2b       	or	r24, r25
    d364:	61 f4       	brne	.+24     	; 0xd37e <select+0x32>
        return 1;                                 /* OK */

    printf("select failed!\n");
    d366:	89 e6       	ldi	r24, 0x69	; 105
    d368:	97 e0       	ldi	r25, 0x07	; 7
    d36a:	a0 e0       	ldi	r26, 0x00	; 0
    d36c:	ed b7       	in	r30, 0x3d	; 61
    d36e:	fe b7       	in	r31, 0x3e	; 62
    d370:	81 83       	std	Z+1, r24	; 0x01
    d372:	92 83       	std	Z+2, r25	; 0x02
    d374:	a3 83       	std	Z+3, r26	; 0x03
    d376:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

    deselect();
    d37a:	ad df       	rcall	.-166    	; 0xd2d6 <deselect>
    d37c:	02 c0       	rjmp	.+4      	; 0xd382 <select+0x36>
{
    CS_LOW();
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */

    if (wait_ready(1000))
        return 1;                                 /* OK */
    d37e:	c1 e0       	ldi	r28, 0x01	; 1
    d380:	d0 e0       	ldi	r29, 0x00	; 0

    printf("select failed!\n");

    deselect();
    return 0;                                     /* Timeout */
}
    d382:	ce 01       	movw	r24, r28
    d384:	cd b7       	in	r28, 0x3d	; 61
    d386:	de b7       	in	r29, 0x3e	; 62
    d388:	23 96       	adiw	r28, 0x03	; 3
    d38a:	e2 e0       	ldi	r30, 0x02	; 2
    d38c:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

0000d390 <send_cmd>:
static
BYTE send_cmd (
BYTE cmd,                                         /*< Command index */
DWORD arg                                         /*< Argument */
)
{
    d390:	ff 92       	push	r15
    d392:	0f 93       	push	r16
    d394:	1f 93       	push	r17
    d396:	cf 93       	push	r28
    d398:	df 93       	push	r29
    d39a:	c8 2f       	mov	r28, r24
    d39c:	d4 2f       	mov	r29, r20
    d39e:	15 2f       	mov	r17, r21
    d3a0:	06 2f       	mov	r16, r22
    d3a2:	f7 2e       	mov	r15, r23
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    d3a4:	87 ff       	sbrs	r24, 7
    d3a6:	08 c0       	rjmp	.+16     	; 0xd3b8 <send_cmd+0x28>
    {
        cmd &= 0x7F;
        res = send_cmd(CMD55, 0);
    d3a8:	40 e0       	ldi	r20, 0x00	; 0
    d3aa:	50 e0       	ldi	r21, 0x00	; 0
    d3ac:	ba 01       	movw	r22, r20
    d3ae:	87 e3       	ldi	r24, 0x37	; 55
    d3b0:	ef df       	rcall	.-34     	; 0xd390 <send_cmd>
        if (res > 1) return res;
    d3b2:	82 30       	cpi	r24, 0x02	; 2
    d3b4:	58 f5       	brcc	.+86     	; 0xd40c <send_cmd+0x7c>
{
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    {
        cmd &= 0x7F;
    d3b6:	cf 77       	andi	r28, 0x7F	; 127
        res = send_cmd(CMD55, 0);
        if (res > 1) return res;
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    d3b8:	cc 30       	cpi	r28, 0x0C	; 12
    d3ba:	71 f4       	brne	.+28     	; 0xd3d8 <send_cmd+0x48>
        deselect();
        if (!select()) return 0xFF;
    }

/* Send command packet */
    xchg_spi(0x40 | cmd);                         /* Start + Command index */
    d3bc:	8c 2f       	mov	r24, r28
    d3be:	80 64       	ori	r24, 0x40	; 64
    d3c0:	88 df       	rcall	.-240    	; 0xd2d2 <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));                  /* Argument[31..24] */
    d3c2:	8f 2d       	mov	r24, r15
    d3c4:	86 df       	rcall	.-244    	; 0xd2d2 <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    d3c6:	80 2f       	mov	r24, r16
    d3c8:	84 df       	rcall	.-248    	; 0xd2d2 <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    d3ca:	81 2f       	mov	r24, r17
    d3cc:	82 df       	rcall	.-252    	; 0xd2d2 <xchg_spi>
    d3ce:	8d 2f       	mov	r24, r29
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    d3d0:	80 df       	rcall	.-256    	; 0xd2d2 <xchg_spi>
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    d3d2:	cc 23       	and	r28, r28
    d3d4:	c9 f0       	breq	.+50     	; 0xd408 <send_cmd+0x78>
    d3d6:	06 c0       	rjmp	.+12     	; 0xd3e4 <send_cmd+0x54>
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    {
        deselect();
    d3d8:	7e df       	rcall	.-260    	; 0xd2d6 <deselect>
    d3da:	b8 df       	rcall	.-144    	; 0xd34c <select>
        if (!select()) return 0xFF;
    d3dc:	89 2b       	or	r24, r25
    d3de:	71 f7       	brne	.-36     	; 0xd3bc <send_cmd+0x2c>
    d3e0:	8f ef       	ldi	r24, 0xFF	; 255
    d3e2:	14 c0       	rjmp	.+40     	; 0xd40c <send_cmd+0x7c>
    d3e4:	c8 30       	cpi	r28, 0x08	; 8
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d3e6:	11 f4       	brne	.+4      	; 0xd3ec <send_cmd+0x5c>
    d3e8:	87 e8       	ldi	r24, 0x87	; 135
    d3ea:	01 c0       	rjmp	.+2      	; 0xd3ee <send_cmd+0x5e>

    xchg_spi(n);
    d3ec:	81 e0       	ldi	r24, 0x01	; 1
    d3ee:	71 df       	rcall	.-286    	; 0xd2d2 <xchg_spi>

/* Receive command response */
    if (cmd == CMD12) xchg_spi(0xFF);             /* Skip a stuff byte when stop reading */
    d3f0:	cc 30       	cpi	r28, 0x0C	; 12
    d3f2:	11 f4       	brne	.+4      	; 0xd3f8 <send_cmd+0x68>
    d3f4:	8f ef       	ldi	r24, 0xFF	; 255
    d3f6:	6d df       	rcall	.-294    	; 0xd2d2 <xchg_spi>
    d3f8:	ca e0       	ldi	r28, 0x0A	; 10
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d3fa:	8f ef       	ldi	r24, 0xFF	; 255
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d3fc:	64 d4       	rcall	.+2248   	; 0xdcc6 <mmc_spi_TXRX>
    d3fe:	87 ff       	sbrs	r24, 7
    d400:	05 c0       	rjmp	.+10     	; 0xd40c <send_cmd+0x7c>
    n = 10;                                       /* Wait for a valid response in timeout of 10 attempts */
    do
    {
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);
    d402:	c1 50       	subi	r28, 0x01	; 1
    d404:	d1 f7       	brne	.-12     	; 0xd3fa <send_cmd+0x6a>
    d406:	02 c0       	rjmp	.+4      	; 0xd40c <send_cmd+0x7c>
    d408:	85 e9       	ldi	r24, 0x95	; 149
    d40a:	f5 cf       	rjmp	.-22     	; 0xd3f6 <send_cmd+0x66>
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */

    xchg_spi(n);
    d40c:	cd b7       	in	r28, 0x3d	; 61
    d40e:	de b7       	in	r29, 0x3e	; 62
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);

    return res;                                   /* Return with the response value */
}
    d410:	e5 e0       	ldi	r30, 0x05	; 5
    d412:	0c 94 8f e6 	jmp	0x1cd1e	; 0x1cd1e <__epilogue_restores__+0x1a>

0000d416 <xmit_datablock>:
    d416:	0f 93       	push	r16
    d418:	1f 93       	push	r17
static
int xmit_datablock (
const BYTE *buff,                                 /*< 512 byte data block to be transmitted */
BYTE token                                        /*< Data/Stop token */
)
{
    d41a:	cf 93       	push	r28
    d41c:	8c 01       	movw	r16, r24
    d41e:	c6 2f       	mov	r28, r22
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d420:	88 ee       	ldi	r24, 0xE8	; 232
    d422:	93 e0       	ldi	r25, 0x03	; 3
    d424:	81 df       	rcall	.-254    	; 0xd328 <wait_ready>
    d426:	00 97       	sbiw	r24, 0x00	; 0
    d428:	c9 f0       	breq	.+50     	; 0xd45c <xmit_datablock+0x46>

    xchg_spi(token);                              /* Xmit data token */
    d42a:	8c 2f       	mov	r24, r28
    d42c:	52 df       	rcall	.-348    	; 0xd2d2 <xchg_spi>
    if (token != 0xFD)                            /* Is data token */
    d42e:	cd 3f       	cpi	r28, 0xFD	; 253
    d430:	99 f0       	breq	.+38     	; 0xd458 <xmit_datablock+0x42>
void xmit_spi_multi (
const BYTE *p,                                    /* Data block to be sent */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_TX_buffer((uint8_t *)p, cnt);
    d432:	60 e0       	ldi	r22, 0x00	; 0
    d434:	72 e0       	ldi	r23, 0x02	; 2
    d436:	c8 01       	movw	r24, r16
    xchg_spi(token);                              /* Xmit data token */
    if (token != 0xFD)                            /* Is data token */
    {
        xmit_spi_multi(buff, 512);                /* Xmit the data block to the MMC */

        xchg_spi(0xFF);                           /* CRC (Dummy) */
    d438:	40 d4       	rcall	.+2176   	; 0xdcba <mmc_spi_TX_buffer>
    d43a:	8f ef       	ldi	r24, 0xFF	; 255
        xchg_spi(0xFF);
    d43c:	4a df       	rcall	.-364    	; 0xd2d2 <xchg_spi>
    d43e:	8f ef       	ldi	r24, 0xFF	; 255
    d440:	48 df       	rcall	.-368    	; 0xd2d2 <xchg_spi>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d442:	8f ef       	ldi	r24, 0xFF	; 255
    d444:	40 d4       	rcall	.+2176   	; 0xdcc6 <mmc_spi_TXRX>
    d446:	8f 71       	andi	r24, 0x1F	; 31
BYTE token                                        /*< Data/Stop token */
)
{
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d448:	31 e0       	ldi	r19, 0x01	; 1
    d44a:	20 e0       	ldi	r18, 0x00	; 0
    d44c:	85 30       	cpi	r24, 0x05	; 5
    d44e:	09 f0       	breq	.+2      	; 0xd452 <xmit_datablock+0x3c>
    d450:	30 e0       	ldi	r19, 0x00	; 0
    d452:	83 2f       	mov	r24, r19
    d454:	92 2f       	mov	r25, r18
    d456:	02 c0       	rjmp	.+4      	; 0xd45c <xmit_datablock+0x46>
    d458:	81 e0       	ldi	r24, 0x01	; 1
        resp = xchg_spi(0xFF);                    /* Reveive data response */
        if ((resp & 0x1F) != 0x05)                /* If not accepted, return with error */
            return 0;
    }

    return 1;
    d45a:	90 e0       	ldi	r25, 0x00	; 0
    d45c:	cf 91       	pop	r28
}
    d45e:	1f 91       	pop	r17
    d460:	0f 91       	pop	r16
    d462:	08 95       	ret

0000d464 <mmc_disk_initialize>:
    d464:	a4 e0       	ldi	r26, 0x04	; 4

///@brief Initialize Disk Drive
///@return Stat
MEMSPACE
DSTATUS mmc_disk_initialize (void)
{
    d466:	b0 e0       	ldi	r27, 0x00	; 0
    d468:	e8 e3       	ldi	r30, 0x38	; 56
    d46a:	fa e6       	ldi	r31, 0x6A	; 106
    d46c:	0c 94 70 e6 	jmp	0x1cce0	; 0x1cce0 <__prologue_saves__+0x14>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d470:	59 d4       	rcall	.+2226   	; 0xdd24 <mmc_power_off>
DSTATUS mmc_disk_initialize (void)
{
    BYTE n, cmd, ty, ocr[4];

    power_off();                                  /* Turn off the socket power to reset the card */
    delayms(100);                                 /* Wait for 100ms */
    d472:	64 e6       	ldi	r22, 0x64	; 100
    d474:	70 e0       	ldi	r23, 0x00	; 0
    d476:	80 e0       	ldi	r24, 0x00	; 0
    d478:	90 e0       	ldi	r25, 0x00	; 0
    d47a:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <delayms>

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    d47e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d482:	81 fd       	sbrc	r24, 1
void power_on (void)
{
/* Turn socket power on and wait for 10ms+ (nothing to do if no power controls) */
/* Configure MOSI/MISO/SCLK/CS pins */
/* Enable SPI module in SPI mode 0 */
    mmc_power_on();
    d484:	8e c0       	rjmp	.+284    	; 0xd5a2 <mmc_disk_initialize+0x13e>
    delayms(100);                                 /* Wait for 100ms */

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    power_on();                                   /* Turn on the socket power */

    FCLK_SLOW();
    d486:	4d d4       	rcall	.+2202   	; 0xdd22 <mmc_power_on>
    d488:	f9 d3       	rcall	.+2034   	; 0xdc7c <mmc_slow>

    for (n = 10; n; n--) xchg_spi(0xFF);          /* 80 dummy clocks */
    d48a:	1a e0       	ldi	r17, 0x0A	; 10
    d48c:	8f ef       	ldi	r24, 0xFF	; 255
    d48e:	21 df       	rcall	.-446    	; 0xd2d2 <xchg_spi>
    d490:	11 50       	subi	r17, 0x01	; 1
    d492:	e1 f7       	brne	.-8      	; 0xd48c <mmc_disk_initialize+0x28>

    ty = 0;
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    d494:	40 e0       	ldi	r20, 0x00	; 0
    d496:	50 e0       	ldi	r21, 0x00	; 0
    d498:	ba 01       	movw	r22, r20
    d49a:	80 e0       	ldi	r24, 0x00	; 0
    d49c:	79 df       	rcall	.-270    	; 0xd390 <send_cmd>
    d49e:	81 30       	cpi	r24, 0x01	; 1
    d4a0:	09 f0       	breq	.+2      	; 0xd4a4 <mmc_disk_initialize+0x40>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
    d4a2:	6f c0       	rjmp	.+222    	; 0xd582 <mmc_disk_initialize+0x11e>
    d4a4:	80 ed       	ldi	r24, 0xD0	; 208
    d4a6:	97 e0       	ldi	r25, 0x07	; 7
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
    d4a8:	11 d4       	rcall	.+2082   	; 0xdccc <mmc_set_ms_timeout>
    d4aa:	4a ea       	ldi	r20, 0xAA	; 170
    d4ac:	51 e0       	ldi	r21, 0x01	; 1
    d4ae:	60 e0       	ldi	r22, 0x00	; 0
    d4b0:	70 e0       	ldi	r23, 0x00	; 0
    d4b2:	88 e0       	ldi	r24, 0x08	; 8
    d4b4:	6d df       	rcall	.-294    	; 0xd390 <send_cmd>
    d4b6:	81 30       	cpi	r24, 0x01	; 1
    d4b8:	09 f0       	breq	.+2      	; 0xd4bc <mmc_disk_initialize+0x58>
    d4ba:	3d c0       	rjmp	.+122    	; 0xd536 <mmc_disk_initialize+0xd2>
    d4bc:	8e 01       	movw	r16, r28
    d4be:	0f 5f       	subi	r16, 0xFF	; 255
    d4c0:	1f 4f       	sbci	r17, 0xFF	; 255
    d4c2:	6e 01       	movw	r12, r28
    d4c4:	85 e0       	ldi	r24, 0x05	; 5
    d4c6:	c8 0e       	add	r12, r24
    d4c8:	d1 1c       	adc	r13, r1
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d4ca:	78 01       	movw	r14, r16
    d4cc:	8f ef       	ldi	r24, 0xFF	; 255
    d4ce:	fb d3       	rcall	.+2038   	; 0xdcc6 <mmc_spi_TXRX>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
    d4d0:	f7 01       	movw	r30, r14
    d4d2:	81 93       	st	Z+, r24
    d4d4:	7f 01       	movw	r14, r30
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
    d4d6:	ce 16       	cp	r12, r30
    d4d8:	df 06       	cpc	r13, r31
    d4da:	c1 f7       	brne	.-16     	; 0xd4cc <mmc_disk_initialize+0x68>
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
    d4dc:	8b 81       	ldd	r24, Y+3	; 0x03
    d4de:	81 30       	cpi	r24, 0x01	; 1
    d4e0:	09 f0       	breq	.+2      	; 0xd4e4 <mmc_disk_initialize+0x80>
    d4e2:	4f c0       	rjmp	.+158    	; 0xd582 <mmc_disk_initialize+0x11e>
    d4e4:	8c 81       	ldd	r24, Y+4	; 0x04
    d4e6:	8a 3a       	cpi	r24, 0xAA	; 170
    d4e8:	09 f0       	breq	.+2      	; 0xd4ec <mmc_disk_initialize+0x88>
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d4ea:	4b c0       	rjmp	.+150    	; 0xd582 <mmc_disk_initialize+0x11e>
    d4ec:	f6 d3       	rcall	.+2028   	; 0xdcda <mmc_test_timeout>
    d4ee:	89 2b       	or	r24, r25
    d4f0:	29 f0       	breq	.+10     	; 0xd4fc <mmc_disk_initialize+0x98>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d4f2:	f3 d3       	rcall	.+2022   	; 0xdcda <mmc_test_timeout>
    d4f4:	89 2b       	or	r24, r25
    d4f6:	09 f0       	breq	.+2      	; 0xd4fa <mmc_disk_initialize+0x96>
    d4f8:	44 c0       	rjmp	.+136    	; 0xd582 <mmc_disk_initialize+0x11e>
    d4fa:	09 c0       	rjmp	.+18     	; 0xd50e <mmc_disk_initialize+0xaa>
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d4fc:	40 e0       	ldi	r20, 0x00	; 0
    d4fe:	50 e0       	ldi	r21, 0x00	; 0
    d500:	60 e0       	ldi	r22, 0x00	; 0
    d502:	70 e4       	ldi	r23, 0x40	; 64
    d504:	89 ea       	ldi	r24, 0xA9	; 169
    d506:	44 df       	rcall	.-376    	; 0xd390 <send_cmd>
    d508:	81 11       	cpse	r24, r1
    d50a:	f0 cf       	rjmp	.-32     	; 0xd4ec <mmc_disk_initialize+0x88>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d50c:	f2 cf       	rjmp	.-28     	; 0xd4f2 <mmc_disk_initialize+0x8e>
    d50e:	40 e0       	ldi	r20, 0x00	; 0
    d510:	50 e0       	ldi	r21, 0x00	; 0
    d512:	ba 01       	movw	r22, r20
    d514:	8a e3       	ldi	r24, 0x3A	; 58
    d516:	3c df       	rcall	.-392    	; 0xd390 <send_cmd>
    d518:	81 11       	cpse	r24, r1
    d51a:	33 c0       	rjmp	.+102    	; 0xd582 <mmc_disk_initialize+0x11e>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d51c:	8f ef       	ldi	r24, 0xFF	; 255
    d51e:	d3 d3       	rcall	.+1958   	; 0xdcc6 <mmc_spi_TXRX>
    d520:	f8 01       	movw	r30, r16
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    d522:	81 93       	st	Z+, r24
    d524:	8f 01       	movw	r16, r30
    d526:	ce 16       	cp	r12, r30
    d528:	df 06       	cpc	r13, r31
    d52a:	c1 f7       	brne	.-16     	; 0xd51c <mmc_disk_initialize+0xb8>
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d52c:	89 81       	ldd	r24, Y+1	; 0x01
    d52e:	86 fd       	sbrc	r24, 6
    d530:	2a c0       	rjmp	.+84     	; 0xd586 <mmc_disk_initialize+0x122>
    d532:	14 e0       	ldi	r17, 0x04	; 4
    d534:	29 c0       	rjmp	.+82     	; 0xd588 <mmc_disk_initialize+0x124>
                }
            }
        }
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
    d536:	80 ed       	ldi	r24, 0xD0	; 208
    d538:	97 e0       	ldi	r25, 0x07	; 7
    d53a:	c8 d3       	rcall	.+1936   	; 0xdccc <mmc_set_ms_timeout>
            if (send_cmd(ACMD41, 0) <= 1)
    d53c:	40 e0       	ldi	r20, 0x00	; 0
    d53e:	50 e0       	ldi	r21, 0x00	; 0
    d540:	ba 01       	movw	r22, r20
    d542:	89 ea       	ldi	r24, 0xA9	; 169
    d544:	25 df       	rcall	.-438    	; 0xd390 <send_cmd>
    d546:	82 30       	cpi	r24, 0x02	; 2
    d548:	18 f0       	brcs	.+6      	; 0xd550 <mmc_disk_initialize+0xec>
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
            }
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
    d54a:	11 e0       	ldi	r17, 0x01	; 1
    d54c:	01 e0       	ldi	r16, 0x01	; 1
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
            if (send_cmd(ACMD41, 0) <= 1)
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
    d54e:	02 c0       	rjmp	.+4      	; 0xd554 <mmc_disk_initialize+0xf0>
    d550:	12 e0       	ldi	r17, 0x02	; 2
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d552:	09 ea       	ldi	r16, 0xA9	; 169
    d554:	c2 d3       	rcall	.+1924   	; 0xdcda <mmc_test_timeout>
    d556:	89 2b       	or	r24, r25
    d558:	21 f0       	breq	.+8      	; 0xd562 <mmc_disk_initialize+0xfe>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d55a:	bf d3       	rcall	.+1918   	; 0xdcda <mmc_test_timeout>
    d55c:	89 2b       	or	r24, r25
    d55e:	89 f4       	brne	.+34     	; 0xd582 <mmc_disk_initialize+0x11e>
    d560:	08 c0       	rjmp	.+16     	; 0xd572 <mmc_disk_initialize+0x10e>
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d562:	40 e0       	ldi	r20, 0x00	; 0
    d564:	50 e0       	ldi	r21, 0x00	; 0
    d566:	ba 01       	movw	r22, r20
    d568:	80 2f       	mov	r24, r16
    d56a:	12 df       	rcall	.-476    	; 0xd390 <send_cmd>
    d56c:	81 11       	cpse	r24, r1
    d56e:	f2 cf       	rjmp	.-28     	; 0xd554 <mmc_disk_initialize+0xf0>
    d570:	f4 cf       	rjmp	.-24     	; 0xd55a <mmc_disk_initialize+0xf6>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d572:	40 e0       	ldi	r20, 0x00	; 0
    d574:	52 e0       	ldi	r21, 0x02	; 2
    d576:	60 e0       	ldi	r22, 0x00	; 0
    d578:	70 e0       	ldi	r23, 0x00	; 0
    d57a:	80 e1       	ldi	r24, 0x10	; 16
    d57c:	09 df       	rcall	.-494    	; 0xd390 <send_cmd>
    d57e:	88 23       	and	r24, r24
                ty = 0;
    d580:	19 f0       	breq	.+6      	; 0xd588 <mmc_disk_initialize+0x124>
    d582:	10 e0       	ldi	r17, 0x00	; 0
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d584:	01 c0       	rjmp	.+2      	; 0xd588 <mmc_disk_initialize+0x124>
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
                ty = 0;
        }
    }

    CardType = ty;
    d586:	1c e0       	ldi	r17, 0x0C	; 12
    d588:	10 93 19 18 	sts	0x1819, r17	; 0x801819 <CardType>
    deselect();
    d58c:	a4 de       	rcall	.-696    	; 0xd2d6 <deselect>

    if (ty)                                       /* Initialization succeded */
    d58e:	11 23       	and	r17, r17
    d590:	39 f0       	breq	.+14     	; 0xd5a0 <mmc_disk_initialize+0x13c>
    {
        Stat &= ~STA_NOINIT;                      /* Clear STA_NOINIT */
    d592:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d596:	8e 7f       	andi	r24, 0xFE	; 254
    d598:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
        FCLK_FAST();
    d59c:	81 d3       	rcall	.+1794   	; 0xdca0 <mmc_fast>
    d59e:	01 c0       	rjmp	.+2      	; 0xd5a2 <mmc_disk_initialize+0x13e>
    d5a0:	c1 d3       	rcall	.+1922   	; 0xdd24 <mmc_power_off>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d5a2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    else
    {
        power_off();
    }

    return Stat;
    d5a6:	24 96       	adiw	r28, 0x04	; 4
    d5a8:	e8 e0       	ldi	r30, 0x08	; 8
}
    d5aa:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__epilogue_restores__+0x14>

0000d5ae <mmc_disk_status>:
    d5ae:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
/// @return STA_NOINIT if no drive
MEMSPACE
DSTATUS mmc_disk_status ( void )
{
    return Stat;
}
    d5b2:	08 95       	ret

0000d5b4 <mmc_disk_read>:
DRESULT mmc_disk_read (
BYTE *buff,                                       /*< Pointer to the data buffer to store read data */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /*< Sector count (1..128) */
)
{
    d5b4:	8f 92       	push	r8
    d5b6:	9f 92       	push	r9
    d5b8:	af 92       	push	r10
    d5ba:	bf 92       	push	r11
    d5bc:	ef 92       	push	r14
    d5be:	ff 92       	push	r15
    d5c0:	1f 93       	push	r17
    d5c2:	cf 93       	push	r28
    d5c4:	df 93       	push	r29
    d5c6:	7c 01       	movw	r14, r24
    d5c8:	4a 01       	movw	r8, r20
    d5ca:	5b 01       	movw	r10, r22
    d5cc:	e9 01       	movw	r28, r18
    BYTE cmd;

    if (!count)
    d5ce:	20 97       	sbiw	r28, 0x00	; 0
    d5d0:	19 f4       	brne	.+6      	; 0xd5d8 <mmc_disk_read+0x24>
    {
        deselect();
    d5d2:	81 de       	rcall	.-766    	; 0xd2d6 <deselect>
        return RES_PARERR;
    d5d4:	84 e0       	ldi	r24, 0x04	; 4
    d5d6:	0d c0       	rjmp	.+26     	; 0xd5f2 <mmc_disk_read+0x3e>
    }

	if( Stat )
    d5d8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d5dc:	88 23       	and	r24, r24
    d5de:	19 f0       	breq	.+6      	; 0xd5e6 <mmc_disk_read+0x32>
		set_error(1);
    d5e0:	81 e0       	ldi	r24, 0x01	; 1
    d5e2:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <set_error>

    if (Stat & STA_NOINIT)
    d5e6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d5ea:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d5ec:	04 c0       	rjmp	.+8      	; 0xd5f6 <mmc_disk_read+0x42>
    d5ee:	73 de       	rcall	.-794    	; 0xd2d6 <deselect>
        return RES_NOTRDY;
    d5f0:	83 e0       	ldi	r24, 0x03	; 3
    d5f2:	90 e0       	ldi	r25, 0x00	; 0
    d5f4:	36 c0       	rjmp	.+108    	; 0xd662 <mmc_disk_read+0xae>
    }
    if (Stat & STA_NODISK)
    d5f6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d5fa:	81 fd       	sbrc	r24, 1
    d5fc:	f8 cf       	rjmp	.-16     	; 0xd5ee <mmc_disk_read+0x3a>
    {
        deselect();
        return RES_NOTRDY;
	}
    GPIO_PIN_HI(LED1);
    d5fe:	46 9a       	sbi	0x08, 6	; 8
    d600:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d602:	80 91 19 18 	lds	r24, 0x1819	; 0x801819 <CardType>
    d606:	83 fd       	sbrc	r24, 3
    d608:	07 c0       	rjmp	.+14     	; 0xd618 <mmc_disk_read+0x64>
    d60a:	89 e0       	ldi	r24, 0x09	; 9
    d60c:	88 0c       	add	r8, r8
    d60e:	99 1c       	adc	r9, r9
    d610:	aa 1c       	adc	r10, r10
    d612:	bb 1c       	adc	r11, r11
    d614:	8a 95       	dec	r24
    d616:	d1 f7       	brne	.-12     	; 0xd60c <mmc_disk_read+0x58>

    cmd = count > 1 ? CMD18 : CMD17;              /*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    d618:	c2 30       	cpi	r28, 0x02	; 2
    d61a:	d1 05       	cpc	r29, r1
    d61c:	10 f4       	brcc	.+4      	; 0xd622 <mmc_disk_read+0x6e>
    d61e:	11 e1       	ldi	r17, 0x11	; 17
    d620:	01 c0       	rjmp	.+2      	; 0xd624 <mmc_disk_read+0x70>
    d622:	12 e1       	ldi	r17, 0x12	; 18
    if (send_cmd(cmd, sector) == 0)
    d624:	b5 01       	movw	r22, r10
    d626:	a4 01       	movw	r20, r8
    d628:	81 2f       	mov	r24, r17
    d62a:	b2 de       	rcall	.-668    	; 0xd390 <send_cmd>
    d62c:	81 11       	cpse	r24, r1
    d62e:	11 c0       	rjmp	.+34     	; 0xd652 <mmc_disk_read+0x9e>
    {
        do
        {
            if (!rcvr_datablock(buff, 512))
    d630:	60 e0       	ldi	r22, 0x00	; 0
    d632:	72 e0       	ldi	r23, 0x02	; 2
    d634:	c7 01       	movw	r24, r14
    d636:	55 de       	rcall	.-854    	; 0xd2e2 <rcvr_datablock>
    d638:	89 2b       	or	r24, r25
    d63a:	21 f0       	breq	.+8      	; 0xd644 <mmc_disk_read+0x90>
                break;
            buff += 512;
    d63c:	8e ef       	ldi	r24, 0xFE	; 254
    d63e:	f8 1a       	sub	r15, r24
        } while (--count);
    d640:	21 97       	sbiw	r28, 0x01	; 1
    d642:	b1 f7       	brne	.-20     	; 0xd630 <mmc_disk_read+0x7c>
        if (cmd == CMD18) send_cmd(CMD12, 0);     /* STOP_TRANSMISSION */
    d644:	12 31       	cpi	r17, 0x12	; 18
    d646:	29 f4       	brne	.+10     	; 0xd652 <mmc_disk_read+0x9e>
    d648:	40 e0       	ldi	r20, 0x00	; 0
    d64a:	50 e0       	ldi	r21, 0x00	; 0
    d64c:	ba 01       	movw	r22, r20
    d64e:	8c e0       	ldi	r24, 0x0C	; 12
    }
    deselect();
    d650:	9f de       	rcall	.-706    	; 0xd390 <send_cmd>
    d652:	41 de       	rcall	.-894    	; 0xd2d6 <deselect>
    GPIO_PIN_LOW(LED1);
    d654:	46 98       	cbi	0x08, 6	; 8
    d656:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d658:	81 e0       	ldi	r24, 0x01	; 1
    d65a:	90 e0       	ldi	r25, 0x00	; 0
    d65c:	cd 2b       	or	r28, r29
    d65e:	09 f4       	brne	.+2      	; 0xd662 <mmc_disk_read+0xae>
    d660:	80 e0       	ldi	r24, 0x00	; 0
}
    d662:	df 91       	pop	r29
    d664:	cf 91       	pop	r28
    d666:	1f 91       	pop	r17
    d668:	ff 90       	pop	r15
    d66a:	ef 90       	pop	r14
    d66c:	bf 90       	pop	r11
    d66e:	af 90       	pop	r10
    d670:	9f 90       	pop	r9
    d672:	8f 90       	pop	r8
    d674:	08 95       	ret

0000d676 <mmc_disk_write>:
DRESULT mmc_disk_write (
const BYTE *buff,                                 /*< Pointer to the data to be written */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /* Sector count (1..128) */
)
{
    d676:	a0 e0       	ldi	r26, 0x00	; 0
    d678:	b0 e0       	ldi	r27, 0x00	; 0
    d67a:	e1 e4       	ldi	r30, 0x41	; 65
    d67c:	fb e6       	ldi	r31, 0x6B	; 107
    d67e:	0c 94 70 e6 	jmp	0x1cce0	; 0x1cce0 <__prologue_saves__+0x14>
    d682:	8c 01       	movw	r16, r24
    d684:	6a 01       	movw	r12, r20
    d686:	7b 01       	movw	r14, r22
    d688:	e9 01       	movw	r28, r18
    if (!count)
    d68a:	20 97       	sbiw	r28, 0x00	; 0
    d68c:	19 f4       	brne	.+6      	; 0xd694 <mmc_disk_write+0x1e>
    {
        deselect();
    d68e:	23 de       	rcall	.-954    	; 0xd2d6 <deselect>
        return RES_PARERR;
    d690:	84 e0       	ldi	r24, 0x04	; 4
    d692:	18 c0       	rjmp	.+48     	; 0xd6c4 <mmc_disk_write+0x4e>
    }

	if( Stat )
    d694:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d698:	88 23       	and	r24, r24
    d69a:	19 f0       	breq	.+6      	; 0xd6a2 <mmc_disk_write+0x2c>
		set_error(1);
    d69c:	81 e0       	ldi	r24, 0x01	; 1
    d69e:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <set_error>

    if (Stat & STA_NOINIT)
    d6a2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d6a6:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d6a8:	03 c0       	rjmp	.+6      	; 0xd6b0 <mmc_disk_write+0x3a>
    d6aa:	15 de       	rcall	.-982    	; 0xd2d6 <deselect>
        return RES_NOTRDY;
    d6ac:	83 e0       	ldi	r24, 0x03	; 3
    d6ae:	0a c0       	rjmp	.+20     	; 0xd6c4 <mmc_disk_write+0x4e>
    }
    if (Stat & STA_NODISK)
    d6b0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d6b4:	81 fd       	sbrc	r24, 1
    d6b6:	f9 cf       	rjmp	.-14     	; 0xd6aa <mmc_disk_write+0x34>
    {
        deselect();
        return RES_NOTRDY;
	}
    if (Stat & STA_PROTECT)
    d6b8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d6bc:	82 ff       	sbrs	r24, 2
    {
        deselect();
    d6be:	04 c0       	rjmp	.+8      	; 0xd6c8 <mmc_disk_write+0x52>
    d6c0:	0a de       	rcall	.-1004   	; 0xd2d6 <deselect>
        return RES_WRPRT;
    d6c2:	82 e0       	ldi	r24, 0x02	; 2
    d6c4:	90 e0       	ldi	r25, 0x00	; 0
    d6c6:	46 c0       	rjmp	.+140    	; 0xd754 <mmc_disk_write+0xde>
    }

    GPIO_PIN_HI(LED1);
    d6c8:	46 9a       	sbi	0x08, 6	; 8
    d6ca:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d6cc:	80 91 19 18 	lds	r24, 0x1819	; 0x801819 <CardType>
    d6d0:	83 fd       	sbrc	r24, 3
    d6d2:	07 c0       	rjmp	.+14     	; 0xd6e2 <mmc_disk_write+0x6c>
    d6d4:	99 e0       	ldi	r25, 0x09	; 9
    d6d6:	cc 0c       	add	r12, r12
    d6d8:	dd 1c       	adc	r13, r13
    d6da:	ee 1c       	adc	r14, r14
    d6dc:	ff 1c       	adc	r15, r15
    d6de:	9a 95       	dec	r25
    d6e0:	d1 f7       	brne	.-12     	; 0xd6d6 <mmc_disk_write+0x60>

    if (count == 1)                               /* Single block write */
    d6e2:	c1 30       	cpi	r28, 0x01	; 1
    d6e4:	d1 05       	cpc	r29, r1
    d6e6:	89 f4       	brne	.+34     	; 0xd70a <mmc_disk_write+0x94>
    {
        if ((send_cmd(CMD24, sector) == 0)        /* WRITE_BLOCK */
    d6e8:	b7 01       	movw	r22, r14
    d6ea:	a6 01       	movw	r20, r12
    d6ec:	88 e1       	ldi	r24, 0x18	; 24
    d6ee:	50 de       	rcall	.-864    	; 0xd390 <send_cmd>
    d6f0:	81 11       	cpse	r24, r1
            && xmit_datablock(buff, 0xFE))
    d6f2:	26 c0       	rjmp	.+76     	; 0xd740 <mmc_disk_write+0xca>
    d6f4:	6e ef       	ldi	r22, 0xFE	; 254
    d6f6:	c8 01       	movw	r24, r16
    d6f8:	8e de       	rcall	.-740    	; 0xd416 <xmit_datablock>
    d6fa:	31 e0       	ldi	r19, 0x01	; 1
    d6fc:	20 e0       	ldi	r18, 0x00	; 0
    d6fe:	89 2b       	or	r24, r25
    d700:	09 f0       	breq	.+2      	; 0xd704 <mmc_disk_write+0x8e>
    d702:	30 e0       	ldi	r19, 0x00	; 0
    d704:	c3 2f       	mov	r28, r19
    d706:	d2 2f       	mov	r29, r18
    d708:	1d c0       	rjmp	.+58     	; 0xd744 <mmc_disk_write+0xce>
            count = 0;
    }
    else                                          /* Multiple block write */
    {
        if (CardType & CT_SDC) send_cmd(ACMD23, count);
    d70a:	86 70       	andi	r24, 0x06	; 6
    d70c:	29 f0       	breq	.+10     	; 0xd718 <mmc_disk_write+0xa2>
    d70e:	ae 01       	movw	r20, r28
    d710:	60 e0       	ldi	r22, 0x00	; 0
    d712:	70 e0       	ldi	r23, 0x00	; 0
    d714:	87 e9       	ldi	r24, 0x97	; 151
        if (send_cmd(CMD25, sector) == 0)         /* WRITE_MULTIPLE_BLOCK */
    d716:	3c de       	rcall	.-904    	; 0xd390 <send_cmd>
    d718:	b7 01       	movw	r22, r14
    d71a:	a6 01       	movw	r20, r12
    d71c:	89 e1       	ldi	r24, 0x19	; 25
    d71e:	38 de       	rcall	.-912    	; 0xd390 <send_cmd>
    d720:	81 11       	cpse	r24, r1
        {
            do
            {
                if (!xmit_datablock(buff, 0xFC)) break;
    d722:	10 c0       	rjmp	.+32     	; 0xd744 <mmc_disk_write+0xce>
    d724:	6c ef       	ldi	r22, 0xFC	; 252
    d726:	c8 01       	movw	r24, r16
    d728:	76 de       	rcall	.-788    	; 0xd416 <xmit_datablock>
    d72a:	89 2b       	or	r24, r25
                buff += 512;
    d72c:	19 f0       	breq	.+6      	; 0xd734 <mmc_disk_write+0xbe>
            } while (--count);
    d72e:	1e 5f       	subi	r17, 0xFE	; 254
    d730:	21 97       	sbiw	r28, 0x01	; 1
            if (!xmit_datablock(0, 0xFD))         /* STOP_TRAN token */
    d732:	c1 f7       	brne	.-16     	; 0xd724 <mmc_disk_write+0xae>
    d734:	6d ef       	ldi	r22, 0xFD	; 253
    d736:	80 e0       	ldi	r24, 0x00	; 0
    d738:	90 e0       	ldi	r25, 0x00	; 0
    d73a:	6d de       	rcall	.-806    	; 0xd416 <xmit_datablock>
    d73c:	89 2b       	or	r24, r25
                count = 1;
    d73e:	11 f4       	brne	.+4      	; 0xd744 <mmc_disk_write+0xce>
    d740:	c1 e0       	ldi	r28, 0x01	; 1
        }
    }
    deselect();
    d742:	d0 e0       	ldi	r29, 0x00	; 0
    d744:	c8 dd       	rcall	.-1136   	; 0xd2d6 <deselect>
    GPIO_PIN_LOW(LED1);
    d746:	46 98       	cbi	0x08, 6	; 8
    d748:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d74a:	81 e0       	ldi	r24, 0x01	; 1
    d74c:	90 e0       	ldi	r25, 0x00	; 0
    d74e:	cd 2b       	or	r28, r29
    d750:	09 f4       	brne	.+2      	; 0xd754 <mmc_disk_write+0xde>
    d752:	80 e0       	ldi	r24, 0x00	; 0
}
    d754:	cd b7       	in	r28, 0x3d	; 61
    d756:	de b7       	in	r29, 0x3e	; 62
    d758:	e8 e0       	ldi	r30, 0x08	; 8
    d75a:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__epilogue_restores__+0x14>

0000d75e <mmc_disk_ioctl>:
MEMSPACE
DRESULT mmc_disk_ioctl (
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d75e:	a0 e1       	ldi	r26, 0x10	; 16
    d760:	b0 e0       	ldi	r27, 0x00	; 0
    d762:	e5 eb       	ldi	r30, 0xB5	; 181
    d764:	fb e6       	ldi	r31, 0x6B	; 107
    d766:	0c 94 70 e6 	jmp	0x1cce0	; 0x1cce0 <__prologue_saves__+0x14>
    SDIO_CTRL *sdi;
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
    d76a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d76e:	90 fd       	sbrc	r25, 0
    d770:	31 c2       	rjmp	.+1122   	; 0xdbd4 <mmc_disk_ioctl+0x476>
    d772:	8b 01       	movw	r16, r22
        return RES_NOTRDY;

    if (Stat & STA_NODISK)
    d774:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d778:	91 ff       	sbrs	r25, 1
    d77a:	02 c0       	rjmp	.+4      	; 0xd780 <mmc_disk_ioctl+0x22>
    {
        deselect();
    d77c:	ac dd       	rcall	.-1192   	; 0xd2d6 <deselect>
    d77e:	2a c2       	rjmp	.+1108   	; 0xdbd4 <mmc_disk_ioctl+0x476>
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d780:	83 33       	cpi	r24, 0x33	; 51
    d782:	09 f4       	brne	.+2      	; 0xd786 <mmc_disk_ioctl+0x28>
    d784:	01 c1       	rjmp	.+514    	; 0xd988 <mmc_disk_ioctl+0x22a>
    d786:	a0 f4       	brcc	.+40     	; 0xd7b0 <mmc_disk_ioctl+0x52>
    d788:	83 30       	cpi	r24, 0x03	; 3
    d78a:	09 f4       	brne	.+2      	; 0xd78e <mmc_disk_ioctl+0x30>
    d78c:	85 c0       	rjmp	.+266    	; 0xd898 <mmc_disk_ioctl+0x13a>
    d78e:	28 f4       	brcc	.+10     	; 0xd79a <mmc_disk_ioctl+0x3c>
    d790:	88 23       	and	r24, r24
    d792:	11 f1       	breq	.+68     	; 0xd7d8 <mmc_disk_ioctl+0x7a>
    d794:	81 30       	cpi	r24, 0x01	; 1
    d796:	11 f1       	breq	.+68     	; 0xd7dc <mmc_disk_ioctl+0x7e>
    d798:	1f c2       	rjmp	.+1086   	; 0xdbd8 <mmc_disk_ioctl+0x47a>
    d79a:	87 30       	cpi	r24, 0x07	; 7
    d79c:	09 f4       	brne	.+2      	; 0xd7a0 <mmc_disk_ioctl+0x42>
    d79e:	2a c1       	rjmp	.+596    	; 0xd9f4 <mmc_disk_ioctl+0x296>
    d7a0:	82 33       	cpi	r24, 0x32	; 50
    d7a2:	09 f0       	breq	.+2      	; 0xd7a6 <mmc_disk_ioctl+0x48>
    d7a4:	19 c2       	rjmp	.+1074   	; 0xdbd8 <mmc_disk_ioctl+0x47a>
#endif

/* Following commands are never used by FatFs module */

        case MMC_GET_TYPE :                       /* Get card type flags (1 byte) */
            *ptr = CardType;
    d7a6:	80 91 19 18 	lds	r24, 0x1819	; 0x801819 <CardType>
    d7aa:	fb 01       	movw	r30, r22
    d7ac:	80 83       	st	Z, r24
    d7ae:	28 c1       	rjmp	.+592    	; 0xda00 <mmc_disk_ioctl+0x2a2>
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d7b0:	86 33       	cpi	r24, 0x36	; 54
    d7b2:	09 f4       	brne	.+2      	; 0xd7b6 <mmc_disk_ioctl+0x58>
    d7b4:	0c c1       	rjmp	.+536    	; 0xd9ce <mmc_disk_ioctl+0x270>
    d7b6:	38 f4       	brcc	.+14     	; 0xd7c6 <mmc_disk_ioctl+0x68>
    d7b8:	84 33       	cpi	r24, 0x34	; 52
    d7ba:	09 f4       	brne	.+2      	; 0xd7be <mmc_disk_ioctl+0x60>
    d7bc:	ea c0       	rjmp	.+468    	; 0xd992 <mmc_disk_ioctl+0x234>
    d7be:	85 33       	cpi	r24, 0x35	; 53
    d7c0:	09 f4       	brne	.+2      	; 0xd7c4 <mmc_disk_ioctl+0x66>
    d7c2:	f1 c0       	rjmp	.+482    	; 0xd9a6 <mmc_disk_ioctl+0x248>
    d7c4:	09 c2       	rjmp	.+1042   	; 0xdbd8 <mmc_disk_ioctl+0x47a>
    d7c6:	88 33       	cpi	r24, 0x38	; 56
    d7c8:	09 f4       	brne	.+2      	; 0xd7cc <mmc_disk_ioctl+0x6e>
    d7ca:	74 c1       	rjmp	.+744    	; 0xdab4 <mmc_disk_ioctl+0x356>
    d7cc:	08 f4       	brcc	.+2      	; 0xd7d0 <mmc_disk_ioctl+0x72>
    d7ce:	1a c1       	rjmp	.+564    	; 0xda04 <mmc_disk_ioctl+0x2a6>
    d7d0:	89 33       	cpi	r24, 0x39	; 57
    d7d2:	09 f4       	brne	.+2      	; 0xd7d6 <mmc_disk_ioctl+0x78>
    d7d4:	bc c1       	rjmp	.+888    	; 0xdb4e <mmc_disk_ioctl+0x3f0>
    {
        case CTRL_SYNC :                          /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
            if (select()) res = RES_OK;
    d7d6:	00 c2       	rjmp	.+1024   	; 0xdbd8 <mmc_disk_ioctl+0x47a>
    d7d8:	b9 dd       	rcall	.-1166   	; 0xd34c <select>
    d7da:	06 c1       	rjmp	.+524    	; 0xd9e8 <mmc_disk_ioctl+0x28a>
            deselect();
            break;

        case GET_SECTOR_COUNT :                   /* Get number of sectors on the disk (DWORD) */
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d7dc:	40 e0       	ldi	r20, 0x00	; 0
    d7de:	50 e0       	ldi	r21, 0x00	; 0
    d7e0:	ba 01       	movw	r22, r20
    d7e2:	89 e0       	ldi	r24, 0x09	; 9
    d7e4:	d5 dd       	rcall	.-1110   	; 0xd390 <send_cmd>
    d7e6:	81 11       	cpse	r24, r1
    d7e8:	f1 c1       	rjmp	.+994    	; 0xdbcc <mmc_disk_ioctl+0x46e>
    d7ea:	60 e1       	ldi	r22, 0x10	; 16
    d7ec:	70 e0       	ldi	r23, 0x00	; 0
    d7ee:	ce 01       	movw	r24, r28
    d7f0:	01 96       	adiw	r24, 0x01	; 1
    d7f2:	77 dd       	rcall	.-1298   	; 0xd2e2 <rcvr_datablock>
    d7f4:	89 2b       	or	r24, r25
    d7f6:	09 f4       	brne	.+2      	; 0xd7fa <mmc_disk_ioctl+0x9c>
    d7f8:	e9 c1       	rjmp	.+978    	; 0xdbcc <mmc_disk_ioctl+0x46e>
            {
                if ((csd[0] >> 6) == 1)           /* SDC ver 2.00 */
    d7fa:	99 81       	ldd	r25, Y+1	; 0x01
    d7fc:	92 95       	swap	r25
    d7fe:	96 95       	lsr	r25
    d800:	96 95       	lsr	r25
    d802:	93 70       	andi	r25, 0x03	; 3
    d804:	29 85       	ldd	r18, Y+9	; 0x09
    d806:	4a 85       	ldd	r20, Y+10	; 0x0a
    d808:	88 85       	ldd	r24, Y+8	; 0x08
    d80a:	91 30       	cpi	r25, 0x01	; 1
    d80c:	d9 f4       	brne	.+54     	; 0xd844 <mmc_disk_ioctl+0xe6>
                {
                    csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
                    *(DWORD*)buff = csize << 10;
    d80e:	30 e0       	ldi	r19, 0x00	; 0
    d810:	32 2f       	mov	r19, r18
    d812:	22 27       	eor	r18, r18
    d814:	24 0f       	add	r18, r20
    d816:	31 1d       	adc	r19, r1
    d818:	8f 73       	andi	r24, 0x3F	; 63
    d81a:	90 e0       	ldi	r25, 0x00	; 0
    d81c:	a0 e0       	ldi	r26, 0x00	; 0
    d81e:	b0 e0       	ldi	r27, 0x00	; 0
    d820:	dc 01       	movw	r26, r24
    d822:	99 27       	eor	r25, r25
    d824:	88 27       	eor	r24, r24
    d826:	01 96       	adiw	r24, 0x01	; 1
    d828:	a1 1d       	adc	r26, r1
    d82a:	b1 1d       	adc	r27, r1
    d82c:	82 0f       	add	r24, r18
    d82e:	93 1f       	adc	r25, r19
    d830:	a1 1d       	adc	r26, r1
    d832:	b1 1d       	adc	r27, r1
    d834:	fa e0       	ldi	r31, 0x0A	; 10
    d836:	88 0f       	add	r24, r24
    d838:	99 1f       	adc	r25, r25
    d83a:	aa 1f       	adc	r26, r26
    d83c:	bb 1f       	adc	r27, r27
    d83e:	fa 95       	dec	r31
    d840:	d1 f7       	brne	.-12     	; 0xd836 <mmc_disk_ioctl+0xd8>
    d842:	9b c0       	rjmp	.+310    	; 0xd97a <mmc_disk_ioctl+0x21c>
                }                                 /* SDC ver 1.XX or MMC*/
                else
                {
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
                    *(DWORD*)buff = csize << (n - 9);
    d844:	22 95       	swap	r18
    d846:	26 95       	lsr	r18
    d848:	26 95       	lsr	r18
    d84a:	23 70       	andi	r18, 0x03	; 3
    d84c:	f4 e0       	ldi	r31, 0x04	; 4
    d84e:	8f 9f       	mul	r24, r31
    d850:	c0 01       	movw	r24, r0
    d852:	11 24       	eor	r1, r1
    d854:	82 0f       	add	r24, r18
    d856:	91 1d       	adc	r25, r1
    d858:	01 96       	adiw	r24, 0x01	; 1
    d85a:	2f 81       	ldd	r18, Y+7	; 0x07
    d85c:	23 70       	andi	r18, 0x03	; 3
    d85e:	30 e0       	ldi	r19, 0x00	; 0
    d860:	32 2f       	mov	r19, r18
    d862:	22 27       	eor	r18, r18
    d864:	33 0f       	add	r19, r19
    d866:	33 0f       	add	r19, r19
    d868:	82 0f       	add	r24, r18
    d86a:	93 1f       	adc	r25, r19
    d86c:	a0 e0       	ldi	r26, 0x00	; 0
    d86e:	b0 e0       	ldi	r27, 0x00	; 0
    d870:	2e 81       	ldd	r18, Y+6	; 0x06
    d872:	32 2f       	mov	r19, r18
    d874:	3f 70       	andi	r19, 0x0F	; 15
    d876:	2b 85       	ldd	r18, Y+11	; 0x0b
    d878:	22 1f       	adc	r18, r18
    d87a:	22 27       	eor	r18, r18
    d87c:	22 1f       	adc	r18, r18
    d87e:	23 0f       	add	r18, r19
    d880:	43 70       	andi	r20, 0x03	; 3
    d882:	44 0f       	add	r20, r20
    d884:	42 0f       	add	r20, r18
    d886:	47 50       	subi	r20, 0x07	; 7
    d888:	04 c0       	rjmp	.+8      	; 0xd892 <mmc_disk_ioctl+0x134>
    d88a:	88 0f       	add	r24, r24
    d88c:	99 1f       	adc	r25, r25
    d88e:	aa 1f       	adc	r26, r26
    d890:	bb 1f       	adc	r27, r27
    d892:	4a 95       	dec	r20
    d894:	d2 f7       	brpl	.-12     	; 0xd88a <mmc_disk_ioctl+0x12c>
    d896:	71 c0       	rjmp	.+226    	; 0xd97a <mmc_disk_ioctl+0x21c>
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d898:	80 91 19 18 	lds	r24, 0x1819	; 0x801819 <CardType>
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d89c:	40 e0       	ldi	r20, 0x00	; 0
    d89e:	50 e0       	ldi	r21, 0x00	; 0
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d8a0:	ba 01       	movw	r22, r20
    d8a2:	82 ff       	sbrs	r24, 2
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d8a4:	24 c0       	rjmp	.+72     	; 0xd8ee <mmc_disk_ioctl+0x190>
    d8a6:	8d e8       	ldi	r24, 0x8D	; 141
    d8a8:	73 dd       	rcall	.-1306   	; 0xd390 <send_cmd>
    d8aa:	81 11       	cpse	r24, r1
                {
                    xchg_spi(0xFF);
    d8ac:	8f c1       	rjmp	.+798    	; 0xdbcc <mmc_disk_ioctl+0x46e>
    d8ae:	8f ef       	ldi	r24, 0xFF	; 255
                    if (rcvr_datablock(csd, 16))  /* Read partial block */
    d8b0:	10 dd       	rcall	.-1504   	; 0xd2d2 <xchg_spi>
    d8b2:	60 e1       	ldi	r22, 0x10	; 16
    d8b4:	70 e0       	ldi	r23, 0x00	; 0
    d8b6:	ce 01       	movw	r24, r28
    d8b8:	01 96       	adiw	r24, 0x01	; 1
    d8ba:	13 dd       	rcall	.-1498   	; 0xd2e2 <rcvr_datablock>
    d8bc:	89 2b       	or	r24, r25
    d8be:	09 f4       	brne	.+2      	; 0xd8c2 <mmc_disk_ioctl+0x164>
    d8c0:	85 c1       	rjmp	.+778    	; 0xdbcc <mmc_disk_ioctl+0x46e>
    d8c2:	50 e3       	ldi	r21, 0x30	; 48
                    {
/* Purge trailing data */
                        for (n = 64 - 16; n; n--) xchg_spi(0xFF);
    d8c4:	f5 2e       	mov	r15, r21
    d8c6:	8f ef       	ldi	r24, 0xFF	; 255
    d8c8:	04 dd       	rcall	.-1528   	; 0xd2d2 <xchg_spi>
    d8ca:	fa 94       	dec	r15
    d8cc:	f1 10       	cpse	r15, r1
    d8ce:	fb cf       	rjmp	.-10     	; 0xd8c6 <mmc_disk_ioctl+0x168>
                        *(DWORD*)buff = 16UL << (csd[10] >> 4);
    d8d0:	2b 85       	ldd	r18, Y+11	; 0x0b
    d8d2:	22 95       	swap	r18
    d8d4:	2f 70       	andi	r18, 0x0F	; 15
    d8d6:	80 e1       	ldi	r24, 0x10	; 16
    d8d8:	90 e0       	ldi	r25, 0x00	; 0
    d8da:	a0 e0       	ldi	r26, 0x00	; 0
    d8dc:	b0 e0       	ldi	r27, 0x00	; 0
    d8de:	04 c0       	rjmp	.+8      	; 0xd8e8 <mmc_disk_ioctl+0x18a>
    d8e0:	88 0f       	add	r24, r24
    d8e2:	99 1f       	adc	r25, r25
    d8e4:	aa 1f       	adc	r26, r26
    d8e6:	bb 1f       	adc	r27, r27
    d8e8:	2a 95       	dec	r18
    d8ea:	d2 f7       	brpl	.-12     	; 0xd8e0 <mmc_disk_ioctl+0x182>
                }
            }                                     /* SDv1 or MMCv3 */
            else
            {
/* Read CSD */
                if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d8ec:	46 c0       	rjmp	.+140    	; 0xd97a <mmc_disk_ioctl+0x21c>
    d8ee:	89 e0       	ldi	r24, 0x09	; 9
    d8f0:	4f dd       	rcall	.-1378   	; 0xd390 <send_cmd>
    d8f2:	81 11       	cpse	r24, r1
    d8f4:	6b c1       	rjmp	.+726    	; 0xdbcc <mmc_disk_ioctl+0x46e>
    d8f6:	60 e1       	ldi	r22, 0x10	; 16
    d8f8:	70 e0       	ldi	r23, 0x00	; 0
    d8fa:	ce 01       	movw	r24, r28
    d8fc:	01 96       	adiw	r24, 0x01	; 1
    d8fe:	f1 dc       	rcall	.-1566   	; 0xd2e2 <rcvr_datablock>
    d900:	89 2b       	or	r24, r25
    d902:	09 f4       	brne	.+2      	; 0xd906 <mmc_disk_ioctl+0x1a8>
    d904:	63 c1       	rjmp	.+710    	; 0xdbcc <mmc_disk_ioctl+0x46e>
                {
                    if (CardType & CT_SD1)        /* SDv1 */
    d906:	90 91 19 18 	lds	r25, 0x1819	; 0x801819 <CardType>
    d90a:	2b 85       	ldd	r18, Y+11	; 0x0b
    d90c:	8c 85       	ldd	r24, Y+12	; 0x0c
    d90e:	91 ff       	sbrs	r25, 1
    d910:	16 c0       	rjmp	.+44     	; 0xd93e <mmc_disk_ioctl+0x1e0>
                    {
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    d912:	2f 73       	andi	r18, 0x3F	; 63
    d914:	88 1f       	adc	r24, r24
    d916:	88 27       	eor	r24, r24
    d918:	88 1f       	adc	r24, r24
    d91a:	90 e0       	ldi	r25, 0x00	; 0
    d91c:	01 96       	adiw	r24, 0x01	; 1
    d91e:	82 0f       	add	r24, r18
    d920:	91 1d       	adc	r25, r1
    d922:	82 0f       	add	r24, r18
    d924:	91 1d       	adc	r25, r1
    d926:	2e 85       	ldd	r18, Y+14	; 0x0e
    d928:	22 95       	swap	r18
    d92a:	26 95       	lsr	r18
    d92c:	26 95       	lsr	r18
    d92e:	23 70       	andi	r18, 0x03	; 3
    d930:	21 50       	subi	r18, 0x01	; 1
    d932:	02 c0       	rjmp	.+4      	; 0xd938 <mmc_disk_ioctl+0x1da>
    d934:	88 0f       	add	r24, r24
    d936:	99 1f       	adc	r25, r25
    d938:	2a 95       	dec	r18
    d93a:	e2 f7       	brpl	.-8      	; 0xd934 <mmc_disk_ioctl+0x1d6>
    d93c:	1c c0       	rjmp	.+56     	; 0xd976 <mmc_disk_ioctl+0x218>
                    }                             /* MMCv3 */
                    else
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    d93e:	38 2f       	mov	r19, r24
    d940:	33 70       	andi	r19, 0x03	; 3
    d942:	82 95       	swap	r24
    d944:	86 95       	lsr	r24
    d946:	87 70       	andi	r24, 0x07	; 7
    d948:	90 e0       	ldi	r25, 0x00	; 0
    d94a:	f8 e0       	ldi	r31, 0x08	; 8
    d94c:	3f 9f       	mul	r19, r31
    d94e:	80 0d       	add	r24, r0
    d950:	91 1d       	adc	r25, r1
    d952:	11 24       	eor	r1, r1
    d954:	01 96       	adiw	r24, 0x01	; 1
    d956:	2c 77       	andi	r18, 0x7C	; 124
    d958:	30 e0       	ldi	r19, 0x00	; 0
    d95a:	35 95       	asr	r19
    d95c:	27 95       	ror	r18
    d95e:	35 95       	asr	r19
    d960:	27 95       	ror	r18
    d962:	2f 5f       	subi	r18, 0xFF	; 255
    d964:	3f 4f       	sbci	r19, 0xFF	; 255
    d966:	82 9f       	mul	r24, r18
    d968:	a0 01       	movw	r20, r0
    d96a:	83 9f       	mul	r24, r19
    d96c:	50 0d       	add	r21, r0
    d96e:	92 9f       	mul	r25, r18
    d970:	50 0d       	add	r21, r0
    d972:	11 24       	eor	r1, r1
    d974:	ca 01       	movw	r24, r20
    d976:	a0 e0       	ldi	r26, 0x00	; 0
    d978:	b0 e0       	ldi	r27, 0x00	; 0
    d97a:	f8 01       	movw	r30, r16
    d97c:	80 83       	st	Z, r24
    d97e:	91 83       	std	Z+1, r25	; 0x01
    d980:	a2 83       	std	Z+2, r26	; 0x02
    d982:	b3 83       	std	Z+3, r27	; 0x03
                    }
                    res = RES_OK;
    d984:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
            break;

        case MMC_GET_CSD :                        /* Receive CSD as a data block (16 bytes) */
/* READ_CSD */
            if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))
    d986:	23 c1       	rjmp	.+582    	; 0xdbce <mmc_disk_ioctl+0x470>
    d988:	40 e0       	ldi	r20, 0x00	; 0
    d98a:	50 e0       	ldi	r21, 0x00	; 0
    d98c:	ba 01       	movw	r22, r20
    d98e:	89 e0       	ldi	r24, 0x09	; 9
            deselect();
            break;

        case MMC_GET_CID :                        /* Receive CID as a data block (16 bytes) */
/* READ_CID */
            if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))
    d990:	04 c0       	rjmp	.+8      	; 0xd99a <mmc_disk_ioctl+0x23c>
    d992:	40 e0       	ldi	r20, 0x00	; 0
    d994:	50 e0       	ldi	r21, 0x00	; 0
    d996:	ba 01       	movw	r22, r20
    d998:	8a e0       	ldi	r24, 0x0A	; 10
    d99a:	fa dc       	rcall	.-1548   	; 0xd390 <send_cmd>
    d99c:	81 11       	cpse	r24, r1
    d99e:	16 c1       	rjmp	.+556    	; 0xdbcc <mmc_disk_ioctl+0x46e>
    d9a0:	60 e1       	ldi	r22, 0x10	; 16
    d9a2:	70 e0       	ldi	r23, 0x00	; 0
                res = RES_OK;
            deselect();
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
    d9a4:	1f c0       	rjmp	.+62     	; 0xd9e4 <mmc_disk_ioctl+0x286>
    d9a6:	40 e0       	ldi	r20, 0x00	; 0
    d9a8:	50 e0       	ldi	r21, 0x00	; 0
    d9aa:	ba 01       	movw	r22, r20
    d9ac:	8a e3       	ldi	r24, 0x3A	; 58
    d9ae:	f0 dc       	rcall	.-1568   	; 0xd390 <send_cmd>
    d9b0:	81 11       	cpse	r24, r1
    d9b2:	0c c1       	rjmp	.+536    	; 0xdbcc <mmc_disk_ioctl+0x46e>
    d9b4:	78 01       	movw	r14, r16
    d9b6:	f4 e0       	ldi	r31, 0x04	; 4
    d9b8:	ef 0e       	add	r14, r31
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d9ba:	f1 1c       	adc	r15, r1
    d9bc:	8f ef       	ldi	r24, 0xFF	; 255
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
            {
                for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    d9be:	83 d1       	rcall	.+774    	; 0xdcc6 <mmc_spi_TXRX>
    d9c0:	f8 01       	movw	r30, r16
    d9c2:	81 93       	st	Z+, r24
    d9c4:	8f 01       	movw	r16, r30
    d9c6:	ee 15       	cp	r30, r14
    d9c8:	ff 05       	cpc	r31, r15
            }
            deselect();
            break;

        case MMC_GET_SDSTAT :                     /* Receive SD statsu as a data block (64 bytes) */
            if (send_cmd(ACMD13, 0) == 0)         /* SD_STATUS */
    d9ca:	c1 f7       	brne	.-16     	; 0xd9bc <mmc_disk_ioctl+0x25e>
    d9cc:	db cf       	rjmp	.-74     	; 0xd984 <mmc_disk_ioctl+0x226>
    d9ce:	40 e0       	ldi	r20, 0x00	; 0
    d9d0:	50 e0       	ldi	r21, 0x00	; 0
    d9d2:	ba 01       	movw	r22, r20
    d9d4:	8d e8       	ldi	r24, 0x8D	; 141
    d9d6:	dc dc       	rcall	.-1608   	; 0xd390 <send_cmd>
            {
                xchg_spi(0xFF);
    d9d8:	81 11       	cpse	r24, r1
    d9da:	f8 c0       	rjmp	.+496    	; 0xdbcc <mmc_disk_ioctl+0x46e>
    d9dc:	8f ef       	ldi	r24, 0xFF	; 255
                if (rcvr_datablock(ptr, 64)) res = RES_OK;
    d9de:	79 dc       	rcall	.-1806   	; 0xd2d2 <xchg_spi>
    d9e0:	60 e4       	ldi	r22, 0x40	; 64
    d9e2:	70 e0       	ldi	r23, 0x00	; 0
    d9e4:	c8 01       	movw	r24, r16
    d9e6:	7d dc       	rcall	.-1798   	; 0xd2e2 <rcvr_datablock>
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    d9e8:	01 e0       	ldi	r16, 0x01	; 1
    d9ea:	10 e0       	ldi	r17, 0x00	; 0
    d9ec:	89 2b       	or	r24, r25
    d9ee:	09 f4       	brne	.+2      	; 0xd9f2 <mmc_disk_ioctl+0x294>
    d9f0:	ef c0       	rjmp	.+478    	; 0xdbd0 <mmc_disk_ioctl+0x472>
    d9f2:	ea c0       	rjmp	.+468    	; 0xdbc8 <mmc_disk_ioctl+0x46a>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d9f4:	97 d1       	rcall	.+814    	; 0xdd24 <mmc_power_off>
    d9f6:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
            deselect();
            break;

        case CTRL_POWER_OFF :                     /* Power off */
            power_off();
            Stat |= STA_NOINIT;
    d9fa:	81 60       	ori	r24, 0x01	; 1
    d9fc:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    da00:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
    da02:	eb c0       	rjmp	.+470    	; 0xdbda <mmc_disk_ioctl+0x47c>
    da04:	fb 01       	movw	r30, r22
            break;
#if _USE_ISDIO
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    da06:	43 81       	ldd	r20, Z+3	; 0x03
    da08:	54 81       	ldd	r21, Z+4	; 0x04
    da0a:	65 81       	ldd	r22, Z+5	; 0x05
    da0c:	76 81       	ldd	r23, Z+6	; 0x06
    da0e:	39 e0       	ldi	r19, 0x09	; 9
    da10:	44 0f       	add	r20, r20
    da12:	55 1f       	adc	r21, r21
    da14:	66 1f       	adc	r22, r22
    da16:	77 1f       	adc	r23, r23
    da18:	3a 95       	dec	r19
    da1a:	d1 f7       	brne	.-12     	; 0xda10 <mmc_disk_ioctl+0x2b2>
    da1c:	70 68       	ori	r23, 0x80	; 128
    da1e:	80 81       	ld	r24, Z
    da20:	90 e0       	ldi	r25, 0x00	; 0
    da22:	a0 e0       	ldi	r26, 0x00	; 0
    da24:	b0 e0       	ldi	r27, 0x00	; 0
    da26:	2c e1       	ldi	r18, 0x1C	; 28
    da28:	88 0f       	add	r24, r24
    da2a:	99 1f       	adc	r25, r25
    da2c:	aa 1f       	adc	r26, r26
    da2e:	bb 1f       	adc	r27, r27
    da30:	2a 95       	dec	r18
    da32:	d1 f7       	brne	.-12     	; 0xda28 <mmc_disk_ioctl+0x2ca>
    da34:	48 2b       	or	r20, r24
    da36:	59 2b       	or	r21, r25
    da38:	6a 2b       	or	r22, r26
    da3a:	7b 2b       	or	r23, r27
    da3c:	81 81       	ldd	r24, Z+1	; 0x01
    da3e:	92 81       	ldd	r25, Z+2	; 0x02
    da40:	01 97       	sbiw	r24, 0x01	; 1
    da42:	91 70       	andi	r25, 0x01	; 1
    da44:	a0 e0       	ldi	r26, 0x00	; 0
    da46:	b0 e0       	ldi	r27, 0x00	; 0
    da48:	48 2b       	or	r20, r24
    da4a:	59 2b       	or	r21, r25
    da4c:	6a 2b       	or	r22, r26
    da4e:	7b 2b       	or	r23, r27
    da50:	80 e3       	ldi	r24, 0x30	; 48
    da52:	9e dc       	rcall	.-1732   	; 0xd390 <send_cmd>
            {
                mmc_set_ms_timeout(1000);
    da54:	81 11       	cpse	r24, r1
    da56:	ba c0       	rjmp	.+372    	; 0xdbcc <mmc_disk_ioctl+0x46e>
    da58:	88 ee       	ldi	r24, 0xE8	; 232
    da5a:	93 e0       	ldi	r25, 0x03	; 3
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    da5c:	37 d1       	rcall	.+622    	; 0xdccc <mmc_set_ms_timeout>
    da5e:	8f ef       	ldi	r24, 0xFF	; 255
    da60:	32 d1       	rcall	.+612    	; 0xdcc6 <mmc_spi_TXRX>
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
    da62:	8f 3f       	cpi	r24, 0xFF	; 255
    da64:	21 f4       	brne	.+8      	; 0xda6e <mmc_disk_ioctl+0x310>
    da66:	39 d1       	rcall	.+626    	; 0xdcda <mmc_test_timeout>
    da68:	89 2b       	or	r24, r25
    da6a:	c9 f3       	breq	.-14     	; 0xda5e <mmc_disk_ioctl+0x300>
    da6c:	af c0       	rjmp	.+350    	; 0xdbcc <mmc_disk_ioctl+0x46e>
                    ;
                if (rc == 0xFE)
    da6e:	8e 3f       	cpi	r24, 0xFE	; 254
    da70:	09 f0       	breq	.+2      	; 0xda74 <mmc_disk_ioctl+0x316>
    da72:	ac c0       	rjmp	.+344    	; 0xdbcc <mmc_disk_ioctl+0x46e>
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    da74:	f8 01       	movw	r30, r16
    da76:	e7 80       	ldd	r14, Z+7	; 0x07
    da78:	f0 84       	ldd	r15, Z+8	; 0x08
    da7a:	c1 80       	ldd	r12, Z+1	; 0x01
    da7c:	d2 80       	ldd	r13, Z+2	; 0x02
    da7e:	ce 0c       	add	r12, r14
    da80:	df 1c       	adc	r13, r15
    da82:	ce 14       	cp	r12, r14
    da84:	df 04       	cpc	r13, r15
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    da86:	31 f0       	breq	.+12     	; 0xda94 <mmc_disk_ioctl+0x336>
    da88:	8f ef       	ldi	r24, 0xFF	; 255
    da8a:	1d d1       	rcall	.+570    	; 0xdcc6 <mmc_spi_TXRX>
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
                    ;
                if (rc == 0xFE)
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    da8c:	f7 01       	movw	r30, r14
    da8e:	81 93       	st	Z+, r24
    da90:	7f 01       	movw	r14, r30
    da92:	f7 cf       	rjmp	.-18     	; 0xda82 <mmc_disk_ioctl+0x324>
                    for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    da94:	f8 01       	movw	r30, r16
    da96:	81 81       	ldd	r24, Z+1	; 0x01
    da98:	92 81       	ldd	r25, Z+2	; 0x02
    da9a:	02 e0       	ldi	r16, 0x02	; 2
    da9c:	12 e0       	ldi	r17, 0x02	; 2
    da9e:	08 1b       	sub	r16, r24
    daa0:	19 0b       	sbc	r17, r25
    daa2:	01 15       	cp	r16, r1
    daa4:	11 05       	cpc	r17, r1
    daa6:	09 f4       	brne	.+2      	; 0xdaaa <mmc_disk_ioctl+0x34c>
    daa8:	6d cf       	rjmp	.-294    	; 0xd984 <mmc_disk_ioctl+0x226>
    daaa:	8f ef       	ldi	r24, 0xFF	; 255
    daac:	12 dc       	rcall	.-2012   	; 0xd2d2 <xchg_spi>
    daae:	01 50       	subi	r16, 0x01	; 1
    dab0:	11 09       	sbc	r17, r1
    dab2:	f7 cf       	rjmp	.-18     	; 0xdaa2 <mmc_disk_ioctl+0x344>
    dab4:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_WRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    dab6:	43 81       	ldd	r20, Z+3	; 0x03
    dab8:	54 81       	ldd	r21, Z+4	; 0x04
    daba:	65 81       	ldd	r22, Z+5	; 0x05
    dabc:	76 81       	ldd	r23, Z+6	; 0x06
    dabe:	39 e0       	ldi	r19, 0x09	; 9
    dac0:	44 0f       	add	r20, r20
    dac2:	55 1f       	adc	r21, r21
    dac4:	66 1f       	adc	r22, r22
    dac6:	77 1f       	adc	r23, r23
    dac8:	3a 95       	dec	r19
    daca:	d1 f7       	brne	.-12     	; 0xdac0 <mmc_disk_ioctl+0x362>
    dacc:	70 68       	ori	r23, 0x80	; 128
    dace:	80 81       	ld	r24, Z
    dad0:	90 e0       	ldi	r25, 0x00	; 0
    dad2:	a0 e0       	ldi	r26, 0x00	; 0
    dad4:	b0 e0       	ldi	r27, 0x00	; 0
    dad6:	2c e1       	ldi	r18, 0x1C	; 28
    dad8:	88 0f       	add	r24, r24
    dada:	99 1f       	adc	r25, r25
    dadc:	aa 1f       	adc	r26, r26
    dade:	bb 1f       	adc	r27, r27
    dae0:	2a 95       	dec	r18
    dae2:	d1 f7       	brne	.-12     	; 0xdad8 <mmc_disk_ioctl+0x37a>
    dae4:	48 2b       	or	r20, r24
    dae6:	59 2b       	or	r21, r25
    dae8:	6a 2b       	or	r22, r26
    daea:	7b 2b       	or	r23, r27
    daec:	81 81       	ldd	r24, Z+1	; 0x01
    daee:	92 81       	ldd	r25, Z+2	; 0x02
    daf0:	01 97       	sbiw	r24, 0x01	; 1
    daf2:	91 70       	andi	r25, 0x01	; 1
    daf4:	a0 e0       	ldi	r26, 0x00	; 0
    daf6:	b0 e0       	ldi	r27, 0x00	; 0
    daf8:	48 2b       	or	r20, r24
    dafa:	59 2b       	or	r21, r25
    dafc:	6a 2b       	or	r22, r26
    dafe:	7b 2b       	or	r23, r27
    db00:	81 e3       	ldi	r24, 0x31	; 49
    db02:	46 dc       	rcall	.-1908   	; 0xd390 <send_cmd>
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    db04:	81 11       	cpse	r24, r1
    db06:	62 c0       	rjmp	.+196    	; 0xdbcc <mmc_disk_ioctl+0x46e>
    db08:	8f ef       	ldi	r24, 0xFF	; 255
    db0a:	e3 db       	rcall	.-2106   	; 0xd2d2 <xchg_spi>
    db0c:	8e ef       	ldi	r24, 0xFE	; 254
    db0e:	e1 db       	rcall	.-2110   	; 0xd2d2 <xchg_spi>
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    db10:	f8 01       	movw	r30, r16
    db12:	e7 80       	ldd	r14, Z+7	; 0x07
    db14:	f0 84       	ldd	r15, Z+8	; 0x08
    db16:	c1 80       	ldd	r12, Z+1	; 0x01
    db18:	d2 80       	ldd	r13, Z+2	; 0x02
    db1a:	ce 0c       	add	r12, r14
    db1c:	df 1c       	adc	r13, r15
    db1e:	ec 14       	cp	r14, r12
    db20:	fd 04       	cpc	r15, r13
    db22:	29 f0       	breq	.+10     	; 0xdb2e <mmc_disk_ioctl+0x3d0>
    db24:	f7 01       	movw	r30, r14
    db26:	81 91       	ld	r24, Z+
    db28:	7f 01       	movw	r14, r30
    db2a:	d3 db       	rcall	.-2138   	; 0xd2d2 <xchg_spi>
    db2c:	f8 cf       	rjmp	.-16     	; 0xdb1e <mmc_disk_ioctl+0x3c0>
                for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    db2e:	f8 01       	movw	r30, r16
    db30:	81 81       	ldd	r24, Z+1	; 0x01
    db32:	92 81       	ldd	r25, Z+2	; 0x02
    db34:	02 e0       	ldi	r16, 0x02	; 2
    db36:	12 e0       	ldi	r17, 0x02	; 2
    db38:	08 1b       	sub	r16, r24
    db3a:	19 0b       	sbc	r17, r25
    db3c:	8f ef       	ldi	r24, 0xFF	; 255
    db3e:	01 15       	cp	r16, r1
    db40:	11 05       	cpc	r17, r1
    db42:	09 f4       	brne	.+2      	; 0xdb46 <mmc_disk_ioctl+0x3e8>
    db44:	3b c0       	rjmp	.+118    	; 0xdbbc <mmc_disk_ioctl+0x45e>
    db46:	c5 db       	rcall	.-2166   	; 0xd2d2 <xchg_spi>
    db48:	01 50       	subi	r16, 0x01	; 1
    db4a:	11 09       	sbc	r17, r1
    db4c:	f7 cf       	rjmp	.-18     	; 0xdb3c <mmc_disk_ioctl+0x3de>
    db4e:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_MRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
    db50:	43 81       	ldd	r20, Z+3	; 0x03
    db52:	54 81       	ldd	r21, Z+4	; 0x04
    db54:	65 81       	ldd	r22, Z+5	; 0x05
    db56:	76 81       	ldd	r23, Z+6	; 0x06
    db58:	89 e0       	ldi	r24, 0x09	; 9
    db5a:	44 0f       	add	r20, r20
    db5c:	55 1f       	adc	r21, r21
    db5e:	66 1f       	adc	r22, r22
    db60:	77 1f       	adc	r23, r23
    db62:	8a 95       	dec	r24
    db64:	d1 f7       	brne	.-12     	; 0xdb5a <mmc_disk_ioctl+0x3fc>
    db66:	74 68       	ori	r23, 0x84	; 132
    db68:	80 81       	ld	r24, Z
    db6a:	90 e0       	ldi	r25, 0x00	; 0
    db6c:	a0 e0       	ldi	r26, 0x00	; 0
    db6e:	b0 e0       	ldi	r27, 0x00	; 0
    db70:	2c e1       	ldi	r18, 0x1C	; 28
    db72:	88 0f       	add	r24, r24
    db74:	99 1f       	adc	r25, r25
    db76:	aa 1f       	adc	r26, r26
    db78:	bb 1f       	adc	r27, r27
    db7a:	2a 95       	dec	r18
    db7c:	d1 f7       	brne	.-12     	; 0xdb72 <mmc_disk_ioctl+0x414>
    db7e:	48 2b       	or	r20, r24
    db80:	59 2b       	or	r21, r25
    db82:	6a 2b       	or	r22, r26
    db84:	7b 2b       	or	r23, r27
    db86:	82 81       	ldd	r24, Z+2	; 0x02
    db88:	90 e0       	ldi	r25, 0x00	; 0
    db8a:	a0 e0       	ldi	r26, 0x00	; 0
    db8c:	b0 e0       	ldi	r27, 0x00	; 0
    db8e:	48 2b       	or	r20, r24
    db90:	59 2b       	or	r21, r25
    db92:	6a 2b       	or	r22, r26
    db94:	7b 2b       	or	r23, r27
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    db96:	81 e3       	ldi	r24, 0x31	; 49
    db98:	fb db       	rcall	.-2058   	; 0xd390 <send_cmd>
    db9a:	81 11       	cpse	r24, r1
    db9c:	17 c0       	rjmp	.+46     	; 0xdbcc <mmc_disk_ioctl+0x46e>
    db9e:	8f ef       	ldi	r24, 0xFF	; 255
    dba0:	98 db       	rcall	.-2256   	; 0xd2d2 <xchg_spi>
                xchg_spi(sdi->ndata);
    dba2:	8e ef       	ldi	r24, 0xFE	; 254
    dba4:	96 db       	rcall	.-2260   	; 0xd2d2 <xchg_spi>
    dba6:	f8 01       	movw	r30, r16
    dba8:	81 81       	ldd	r24, Z+1	; 0x01
    dbaa:	93 db       	rcall	.-2266   	; 0xd2d2 <xchg_spi>
    dbac:	01 e0       	ldi	r16, 0x01	; 1
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
    dbae:	12 e0       	ldi	r17, 0x02	; 2
    dbb0:	8f ef       	ldi	r24, 0xFF	; 255
    dbb2:	8f db       	rcall	.-2274   	; 0xd2d2 <xchg_spi>
    dbb4:	01 50       	subi	r16, 0x01	; 1
    dbb6:	11 09       	sbc	r17, r1
    dbb8:	d9 f7       	brne	.-10     	; 0xdbb0 <mmc_disk_ioctl+0x452>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    dbba:	8f ef       	ldi	r24, 0xFF	; 255
    dbbc:	84 d0       	rcall	.+264    	; 0xdcc6 <mmc_spi_TXRX>
    dbbe:	8f 71       	andi	r24, 0x1F	; 31
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    dbc0:	01 e0       	ldi	r16, 0x01	; 1
    dbc2:	10 e0       	ldi	r17, 0x00	; 0
    dbc4:	85 30       	cpi	r24, 0x05	; 5
    dbc6:	21 f4       	brne	.+8      	; 0xdbd0 <mmc_disk_ioctl+0x472>
    dbc8:	00 e0       	ldi	r16, 0x00	; 0
    dbca:	02 c0       	rjmp	.+4      	; 0xdbd0 <mmc_disk_ioctl+0x472>
    dbcc:	01 e0       	ldi	r16, 0x01	; 1
    dbce:	10 e0       	ldi	r17, 0x00	; 0
    dbd0:	82 db       	rcall	.-2300   	; 0xd2d6 <deselect>
                xchg_spi(0xFF); xchg_spi(0xFE);
                xchg_spi(sdi->ndata);
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
                if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
            }
            deselect();
    dbd2:	04 c0       	rjmp	.+8      	; 0xdbdc <mmc_disk_ioctl+0x47e>
    dbd4:	03 e0       	ldi	r16, 0x03	; 3
            break;
    dbd6:	01 c0       	rjmp	.+2      	; 0xdbda <mmc_disk_ioctl+0x47c>
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
        return RES_NOTRDY;
    dbd8:	04 e0       	ldi	r16, 0x04	; 4
    dbda:	10 e0       	ldi	r17, 0x00	; 0
            }
            deselect();
            break;
#endif
        default:
            res = RES_PARERR;
    dbdc:	c8 01       	movw	r24, r16
    dbde:	60 96       	adiw	r28, 0x10	; 16
    }

    return res;
}
    dbe0:	e8 e0       	ldi	r30, 0x08	; 8
    dbe2:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__epilogue_restores__+0x14>

0000dbe6 <mmc_disk_timerproc>:
    dbe6:	cf 93       	push	r28
    dbe8:	80 91 1b 18 	lds	r24, 0x181B	; 0x80181b <Timer1>
{
    BYTE n;
    BYTE s;

    n = Timer1;                                   /* 100Hz decrement timer */
    if (n) Timer1 = --n;
    dbec:	88 23       	and	r24, r24
    dbee:	19 f0       	breq	.+6      	; 0xdbf6 <mmc_disk_timerproc+0x10>
    dbf0:	81 50       	subi	r24, 0x01	; 1
    dbf2:	80 93 1b 18 	sts	0x181B, r24	; 0x80181b <Timer1>
    n = Timer2;
    dbf6:	80 91 1a 18 	lds	r24, 0x181A	; 0x80181a <Timer2>
    if (n) Timer2 = --n;
    dbfa:	88 23       	and	r24, r24
    dbfc:	19 f0       	breq	.+6      	; 0xdc04 <mmc_disk_timerproc+0x1e>
    dbfe:	81 50       	subi	r24, 0x01	; 1
    dc00:	80 93 1a 18 	sts	0x181A, r24	; 0x80181a <Timer2>

    s = Stat;
    dc04:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <Stat>
        s |= STA_PROTECT;
    else                                          /* Write enabled */
        s &= ~STA_PROTECT;
#endif

    if (MMC_CD)                                   /* Card inserted */
    dc08:	8e d0       	rcall	.+284    	; 0xdd26 <mmc_ins_status>
    dc0a:	89 2b       	or	r24, r25
    dc0c:	11 f0       	breq	.+4      	; 0xdc12 <mmc_disk_timerproc+0x2c>
	{
        s &= ~STA_NODISK;
    dc0e:	cd 7f       	andi	r28, 0xFD	; 253
    dc10:	04 c0       	rjmp	.+8      	; 0xdc1a <mmc_disk_timerproc+0x34>
	}
    else                                          /* Socket empty */
	{	
        s |= (STA_NODISK | STA_NOINIT);
    dc12:	c3 60       	ori	r28, 0x03	; 3
		set_error(1);
    dc14:	81 e0       	ldi	r24, 0x01	; 1
    dc16:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <set_error>
	}

    Stat = s;                                     /* Update MMC status */
    dc1a:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <Stat>
}
    dc1e:	cf 91       	pop	r28
    dc20:	08 95       	ret

0000dc22 <mmc_install_timer>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    dc22:	00 d0       	rcall	.+0      	; 0xdc24 <mmc_install_timer+0x2>
    dc24:	1f 92       	push	r1
    dc26:	10 92 25 18 	sts	0x1825, r1	; 0x801825 <_mmc_timeout+0x1>
    dc2a:	10 92 24 18 	sts	0x1824, r1	; 0x801824 <_mmc_timeout>
    dc2e:	61 e0       	ldi	r22, 0x01	; 1
    dc30:	70 e0       	ldi	r23, 0x00	; 0
    dc32:	80 ea       	ldi	r24, 0xA0	; 160
    dc34:	9e e6       	ldi	r25, 0x6E	; 110
    dc36:	0e 94 53 34 	call	0x68a6	; 0x68a6 <set_timers>
    dc3a:	01 96       	adiw	r24, 0x01	; 1
    dc3c:	51 f4       	brne	.+20     	; 0xdc52 <mmc_install_timer+0x30>
    dc3e:	87 e2       	ldi	r24, 0x27	; 39
    dc40:	98 e0       	ldi	r25, 0x08	; 8
    dc42:	a0 e0       	ldi	r26, 0x00	; 0
    dc44:	ed b7       	in	r30, 0x3d	; 61
    dc46:	fe b7       	in	r31, 0x3e	; 62
    dc48:	81 83       	std	Z+1, r24	; 0x01
    dc4a:	92 83       	std	Z+2, r25	; 0x02
    dc4c:	a3 83       	std	Z+3, r26	; 0x03
    dc4e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    dc52:	0f 90       	pop	r0
    dc54:	0f 90       	pop	r0
    dc56:	0f 90       	pop	r0
    dc58:	08 95       	ret

0000dc5a <mmc_spi_begin>:
    dc5a:	60 91 20 18 	lds	r22, 0x1820	; 0x801820 <_mmc_clock>
    dc5e:	70 91 21 18 	lds	r23, 0x1821	; 0x801821 <_mmc_clock+0x1>
    dc62:	80 91 22 18 	lds	r24, 0x1822	; 0x801822 <_mmc_clock+0x2>
    dc66:	90 91 23 18 	lds	r25, 0x1823	; 0x801823 <_mmc_clock+0x3>
    dc6a:	4b e0       	ldi	r20, 0x0B	; 11
    dc6c:	50 e0       	ldi	r21, 0x00	; 0
    dc6e:	0c 94 46 26 	jmp	0x4c8c	; 0x4c8c <spi_begin>
    dc72:	08 95       	ret

0000dc74 <mmc_spi_end>:
    dc74:	8b e0       	ldi	r24, 0x0B	; 11
    dc76:	0c 94 e2 25 	jmp	0x4bc4	; 0x4bc4 <spi_end>
    dc7a:	08 95       	ret

0000dc7c <mmc_slow>:
    dc7c:	80 e2       	ldi	r24, 0x20	; 32
    dc7e:	91 ea       	ldi	r25, 0xA1	; 161
    dc80:	a7 e0       	ldi	r26, 0x07	; 7
    dc82:	b0 e0       	ldi	r27, 0x00	; 0
    dc84:	80 93 20 18 	sts	0x1820, r24	; 0x801820 <_mmc_clock>
    dc88:	90 93 21 18 	sts	0x1821, r25	; 0x801821 <_mmc_clock+0x1>
    dc8c:	a0 93 22 18 	sts	0x1822, r26	; 0x801822 <_mmc_clock+0x2>
    dc90:	b0 93 23 18 	sts	0x1823, r27	; 0x801823 <_mmc_clock+0x3>
    dc94:	08 95       	ret

0000dc96 <mmc_spi_init>:
    dc96:	8b e0       	ldi	r24, 0x0B	; 11
    dc98:	0e 94 e0 25 	call	0x4bc0	; 0x4bc0 <chip_select_init>
    dc9c:	ef cf       	rjmp	.-34     	; 0xdc7c <mmc_slow>
    dc9e:	08 95       	ret

0000dca0 <mmc_fast>:
    dca0:	80 ea       	ldi	r24, 0xA0	; 160
    dca2:	95 e2       	ldi	r25, 0x25	; 37
    dca4:	a6 e2       	ldi	r26, 0x26	; 38
    dca6:	b0 e0       	ldi	r27, 0x00	; 0
    dca8:	80 93 20 18 	sts	0x1820, r24	; 0x801820 <_mmc_clock>
    dcac:	90 93 21 18 	sts	0x1821, r25	; 0x801821 <_mmc_clock+0x1>
    dcb0:	a0 93 22 18 	sts	0x1822, r26	; 0x801822 <_mmc_clock+0x2>
    dcb4:	b0 93 23 18 	sts	0x1823, r27	; 0x801823 <_mmc_clock+0x3>
    dcb8:	08 95       	ret

0000dcba <mmc_spi_TX_buffer>:
    dcba:	0c 94 12 26 	jmp	0x4c24	; 0x4c24 <spi_TX_buffer>
    dcbe:	08 95       	ret

0000dcc0 <mmc_spi_RX_buffer>:
    dcc0:	0c 94 14 26 	jmp	0x4c28	; 0x4c28 <spi_RX_buffer>
    dcc4:	08 95       	ret

0000dcc6 <mmc_spi_TXRX>:
    dcc6:	0c 94 8e 26 	jmp	0x4d1c	; 0x4d1c <spi_TXRX>
    dcca:	08 95       	ret

0000dccc <mmc_set_ms_timeout>:
    dccc:	f8 94       	cli
    dcce:	90 93 25 18 	sts	0x1825, r25	; 0x801825 <_mmc_timeout+0x1>
    dcd2:	80 93 24 18 	sts	0x1824, r24	; 0x801824 <_mmc_timeout>
    dcd6:	78 94       	sei
    dcd8:	08 95       	ret

0000dcda <mmc_test_timeout>:
    dcda:	00 d0       	rcall	.+0      	; 0xdcdc <mmc_test_timeout+0x2>
    dcdc:	1f 92       	push	r1
    dcde:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    dce2:	81 fd       	sbrc	r24, 1
    dce4:	15 c0       	rjmp	.+42     	; 0xdd10 <mmc_test_timeout+0x36>
    dce6:	80 91 24 18 	lds	r24, 0x1824	; 0x801824 <_mmc_timeout>
    dcea:	90 91 25 18 	lds	r25, 0x1825	; 0x801825 <_mmc_timeout+0x1>
    dcee:	89 2b       	or	r24, r25
    dcf0:	91 f4       	brne	.+36     	; 0xdd16 <mmc_test_timeout+0x3c>
    dcf2:	8a e1       	ldi	r24, 0x1A	; 26
    dcf4:	98 e0       	ldi	r25, 0x08	; 8
    dcf6:	a0 e0       	ldi	r26, 0x00	; 0
    dcf8:	ed b7       	in	r30, 0x3d	; 61
    dcfa:	fe b7       	in	r31, 0x3e	; 62
    dcfc:	81 83       	std	Z+1, r24	; 0x01
    dcfe:	92 83       	std	Z+2, r25	; 0x02
    dd00:	a3 83       	std	Z+3, r26	; 0x03
    dd02:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    dd06:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    dd0a:	83 60       	ori	r24, 0x03	; 3
    dd0c:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    dd10:	81 e0       	ldi	r24, 0x01	; 1
    dd12:	90 e0       	ldi	r25, 0x00	; 0
    dd14:	02 c0       	rjmp	.+4      	; 0xdd1a <mmc_test_timeout+0x40>
    dd16:	80 e0       	ldi	r24, 0x00	; 0
    dd18:	90 e0       	ldi	r25, 0x00	; 0
    dd1a:	0f 90       	pop	r0
    dd1c:	0f 90       	pop	r0
    dd1e:	0f 90       	pop	r0
    dd20:	08 95       	ret

0000dd22 <mmc_power_on>:
    dd22:	08 95       	ret

0000dd24 <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    dd24:	08 95       	ret

0000dd26 <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
	// HI when card is NOT inserted
	if( GPIO_PIN_RD(GPIO_C7) )
    dd26:	3f 98       	cbi	0x07, 7	; 7
    dd28:	86 b1       	in	r24, 0x06	; 6
    dd2a:	08 2e       	mov	r0, r24
    dd2c:	00 0c       	add	r0, r0
    dd2e:	99 0b       	sbc	r25, r25
    dd30:	80 95       	com	r24
    dd32:	90 95       	com	r25
		return (0);
	else
		return(1);;	
}
    dd34:	89 2f       	mov	r24, r25
    dd36:	88 1f       	adc	r24, r24
    dd38:	88 27       	eor	r24, r24
    dd3a:	88 1f       	adc	r24, r24
    dd3c:	90 e0       	ldi	r25, 0x00	; 0
    dd3e:	08 95       	ret

0000dd40 <mmc_task>:
 @brief 1000HZ timer task
 @return void
*/
static void mmc_task(void)
{
    if(_mmc_timeout)
    dd40:	80 91 24 18 	lds	r24, 0x1824	; 0x801824 <_mmc_timeout>
    dd44:	90 91 25 18 	lds	r25, 0x1825	; 0x801825 <_mmc_timeout+0x1>
    dd48:	00 97       	sbiw	r24, 0x00	; 0
    dd4a:	29 f0       	breq	.+10     	; 0xdd56 <mmc_task+0x16>
        _mmc_timeout--;
    dd4c:	01 97       	sbiw	r24, 0x01	; 1
    dd4e:	90 93 25 18 	sts	0x1825, r25	; 0x801825 <_mmc_timeout+0x1>
    dd52:	80 93 24 18 	sts	0x1824, r24	; 0x801824 <_mmc_timeout>

// 100HZ
    if(_mmc_pre++  < 10)
    dd56:	80 91 1e 18 	lds	r24, 0x181E	; 0x80181e <_mmc_pre>
    dd5a:	90 91 1f 18 	lds	r25, 0x181F	; 0x80181f <_mmc_pre+0x1>
    dd5e:	8a 30       	cpi	r24, 0x0A	; 10
    dd60:	91 05       	cpc	r25, r1
    dd62:	30 f4       	brcc	.+12     	; 0xdd70 <mmc_task+0x30>
    dd64:	01 96       	adiw	r24, 0x01	; 1
    dd66:	90 93 1f 18 	sts	0x181F, r25	; 0x80181f <_mmc_pre+0x1>
    dd6a:	80 93 1e 18 	sts	0x181E, r24	; 0x80181e <_mmc_pre>
    dd6e:	08 95       	ret
        return;

    _mmc_pre = 0;
    dd70:	10 92 1f 18 	sts	0x181F, r1	; 0x80181f <_mmc_pre+0x1>
    dd74:	10 92 1e 18 	sts	0x181E, r1	; 0x80181e <_mmc_pre>

	if(!mmc_ins_status())
    dd78:	d6 df       	rcall	.-84     	; 0xdd26 <mmc_ins_status>
    dd7a:	89 2b       	or	r24, r25
    dd7c:	19 f4       	brne	.+6      	; 0xdd84 <mmc_task+0x44>
		set_error(1);
    dd7e:	81 e0       	ldi	r24, 0x01	; 1
    dd80:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <set_error>

    mmc_disk_timerproc();
    dd84:	30 cf       	rjmp	.-416    	; 0xdbe6 <mmc_disk_timerproc>
    dd86:	08 95       	ret

0000dd88 <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    dd88:	ac e0       	ldi	r26, 0x0C	; 12
    dd8a:	b1 e0       	ldi	r27, 0x01	; 1
    dd8c:	ea ec       	ldi	r30, 0xCA	; 202
    dd8e:	fe e6       	ldi	r31, 0x6E	; 110
    dd90:	0c 94 72 e6 	jmp	0x1cce4	; 0x1cce4 <__prologue_saves__+0x18>
    dd94:	7c 01       	movw	r14, r24
    int rc;

    char buff[MAX_NAME_LEN+1];

    Stat = 0;
    dd96:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Stat>
	clear_error();
    dd9a:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <clear_error>

	// Card Detect
	GPIO_PIN_LATCH_LOW(GPIO_C7);
    dd9e:	47 98       	cbi	0x08, 7	; 8
	GPIO_PIN_DIR_IN(GPIO_C7);
    dda0:	3f 98       	cbi	0x07, 7	; 7

    mmc_spi_init();
    dda2:	79 df       	rcall	.-270    	; 0xdc96 <mmc_spi_init>

    if( verbose)
    dda4:	e1 14       	cp	r14, r1
    dda6:	f1 04       	cpc	r15, r1
    dda8:	51 f0       	breq	.+20     	; 0xddbe <mmc_init+0x36>
    {
        printf("START MMC INIT\n");
    ddaa:	8a e0       	ldi	r24, 0x0A	; 10
    ddac:	98 e0       	ldi	r25, 0x08	; 8
    ddae:	a0 e0       	ldi	r26, 0x00	; 0
    ddb0:	ed b7       	in	r30, 0x3d	; 61
    ddb2:	fe b7       	in	r31, 0x3e	; 62
    ddb4:	81 83       	std	Z+1, r24	; 0x01
    ddb6:	92 83       	std	Z+2, r25	; 0x02
    ddb8:	a3 83       	std	Z+3, r26	; 0x03
    ddba:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    }
// we only install timers once!
    if(!mmc_init_flag)
    ddbe:	80 91 1c 18 	lds	r24, 0x181C	; 0x80181c <mmc_init_flag>
    ddc2:	90 91 1d 18 	lds	r25, 0x181D	; 0x80181d <mmc_init_flag+0x1>
    ddc6:	89 2b       	or	r24, r25
        mmc_install_timer();
    ddc8:	09 f4       	brne	.+2      	; 0xddcc <mmc_init+0x44>

	if(!mmc_ins_status())
    ddca:	2b df       	rcall	.-426    	; 0xdc22 <mmc_install_timer>
    ddcc:	ac df       	rcall	.-168    	; 0xdd26 <mmc_ins_status>
    ddce:	89 2b       	or	r24, r25
    ddd0:	61 f4       	brne	.+24     	; 0xddea <mmc_init+0x62>
	{
		printf("*** MMC Card NOT Inserted! ***\n");
    ddd2:	8a ee       	ldi	r24, 0xEA	; 234
    ddd4:	97 e0       	ldi	r25, 0x07	; 7
    ddd6:	a0 e0       	ldi	r26, 0x00	; 0
    ddd8:	ed b7       	in	r30, 0x3d	; 61
    ddda:	fe b7       	in	r31, 0x3e	; 62
    dddc:	81 83       	std	Z+1, r24	; 0x01
    ddde:	92 83       	std	Z+2, r25	; 0x02
    dde0:	a3 83       	std	Z+3, r26	; 0x03
    dde2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
		return(RES_NOTRDY);	
    dde6:	83 e0       	ldi	r24, 0x03	; 3
    dde8:	9a c0       	rjmp	.+308    	; 0xdf1e <mmc_init+0x196>
	}


    if( verbose)
    ddea:	e1 14       	cp	r14, r1
    ddec:	f1 04       	cpc	r15, r1
    ddee:	11 f1       	breq	.+68     	; 0xde34 <mmc_init+0xac>
    {
		printf("MMC Card Inserted\n");
    ddf0:	87 ed       	ldi	r24, 0xD7	; 215
    ddf2:	97 e0       	ldi	r25, 0x07	; 7
    ddf4:	a0 e0       	ldi	r26, 0x00	; 0
    ddf6:	ed b7       	in	r30, 0x3d	; 61
    ddf8:	fe b7       	in	r31, 0x3e	; 62
    ddfa:	81 83       	std	Z+1, r24	; 0x01
    ddfc:	92 83       	std	Z+2, r25	; 0x02
    ddfe:	a3 83       	std	Z+3, r26	; 0x03
    de00:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    de04:	8b ec       	ldi	r24, 0xCB	; 203
    de06:	97 e0       	ldi	r25, 0x07	; 7
    de08:	a0 e0       	ldi	r26, 0x00	; 0
    de0a:	ed b7       	in	r30, 0x3d	; 61
    de0c:	fe b7       	in	r31, 0x3e	; 62
    de0e:	81 83       	std	Z+1, r24	; 0x01
    de10:	92 83       	std	Z+2, r25	; 0x02
    de12:	a3 83       	std	Z+3, r26	; 0x03
    de14:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    de18:	85 eb       	ldi	r24, 0xB5	; 181
    de1a:	91 e0       	ldi	r25, 0x01	; 1
    de1c:	ed b7       	in	r30, 0x3d	; 61
    de1e:	fe b7       	in	r31, 0x3e	; 62
    de20:	95 83       	std	Z+5, r25	; 0x05
    de22:	84 83       	std	Z+4, r24	; 0x04
    de24:	8a eb       	ldi	r24, 0xBA	; 186
    de26:	97 e0       	ldi	r25, 0x07	; 7
    de28:	a0 e0       	ldi	r26, 0x00	; 0
    de2a:	81 83       	std	Z+1, r24	; 0x01
    de2c:	92 83       	std	Z+2, r25	; 0x02
    de2e:	a3 83       	std	Z+3, r26	; 0x03
    de30:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    }

    rc = disk_initialize(DEV_MMC);                // aliased to mmc_disk_initialize()
    de34:	80 e0       	ldi	r24, 0x00	; 0
    de36:	1d da       	rcall	.-3014   	; 0xd272 <disk_initialize>
    de38:	08 2f       	mov	r16, r24
    de3a:	10 e0       	ldi	r17, 0x00	; 0

    if( rc != RES_OK  )
    de3c:	01 15       	cp	r16, r1
    de3e:	11 05       	cpc	r17, r1
        put_rc(rc);
    de40:	19 f0       	breq	.+6      	; 0xde48 <mmc_init+0xc0>
    de42:	c8 01       	movw	r24, r16
    de44:	64 d1       	rcall	.+712    	; 0xe10e <put_rc>
    de46:	0e c0       	rjmp	.+28     	; 0xde64 <mmc_init+0xdc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    de48:	40 e0       	ldi	r20, 0x00	; 0
    de4a:	66 ea       	ldi	r22, 0xA6	; 166
    de4c:	78 e0       	ldi	r23, 0x08	; 8
    de4e:	86 e7       	ldi	r24, 0x76	; 118
    de50:	9a e1       	ldi	r25, 0x1A	; 26
    de52:	0e 94 11 59 	call	0xb222	; 0xb222 <f_mount>
    de56:	8c 01       	movw	r16, r24

    if( rc != RES_OK || verbose)
    de58:	89 2b       	or	r24, r25
    de5a:	21 f4       	brne	.+8      	; 0xde64 <mmc_init+0xdc>
    de5c:	e1 14       	cp	r14, r1
    de5e:	f1 04       	cpc	r15, r1
    de60:	09 f4       	brne	.+2      	; 0xde64 <mmc_init+0xdc>
        put_rc( rc );
    de62:	4f c0       	rjmp	.+158    	; 0xdf02 <mmc_init+0x17a>
    de64:	c8 01       	movw	r24, r16
    de66:	53 d1       	rcall	.+678    	; 0xe10e <put_rc>

    if (verbose )
    de68:	e1 14       	cp	r14, r1
    de6a:	f1 04       	cpc	r15, r1
    de6c:	09 f4       	brne	.+2      	; 0xde70 <mmc_init+0xe8>
    de6e:	49 c0       	rjmp	.+146    	; 0xdf02 <mmc_init+0x17a>
    {
        DWORD blksize = 0;
    de70:	c7 5f       	subi	r28, 0xF7	; 247
    de72:	de 4f       	sbci	r29, 0xFE	; 254
    de74:	18 82       	st	Y, r1
    de76:	19 82       	std	Y+1, r1	; 0x01
    de78:	1a 82       	std	Y+2, r1	; 0x02
    de7a:	1b 82       	std	Y+3, r1	; 0x03
    de7c:	c9 50       	subi	r28, 0x09	; 9
    de7e:	d1 40       	sbci	r29, 0x01	; 1
        if(rc == RES_OK)
    de80:	01 15       	cp	r16, r1
    de82:	11 05       	cpc	r17, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    de84:	a1 f5       	brne	.+104    	; 0xdeee <mmc_init+0x166>
    de86:	ae 01       	movw	r20, r28
    de88:	47 5f       	subi	r20, 0xF7	; 247
    de8a:	5e 4f       	sbci	r21, 0xFE	; 254
    de8c:	63 e0       	ldi	r22, 0x03	; 3
    de8e:	80 e0       	ldi	r24, 0x00	; 0
    de90:	16 da       	rcall	.-3028   	; 0xd2be <disk_ioctl>
            if( rc != RES_OK)
    de92:	8c 01       	movw	r16, r24
    de94:	00 97       	sbiw	r24, 0x00	; 0
            {
                put_rc( rc );
    de96:	61 f0       	breq	.+24     	; 0xdeb0 <mmc_init+0x128>
    de98:	3a d1       	rcall	.+628    	; 0xe10e <put_rc>
                printf("MMC Block Size - read failed\n");
    de9a:	8c e9       	ldi	r24, 0x9C	; 156
    de9c:	97 e0       	ldi	r25, 0x07	; 7
    de9e:	a0 e0       	ldi	r26, 0x00	; 0
    dea0:	ed b7       	in	r30, 0x3d	; 61
    dea2:	fe b7       	in	r31, 0x3e	; 62
    dea4:	81 83       	std	Z+1, r24	; 0x01
    dea6:	92 83       	std	Z+2, r25	; 0x02
    dea8:	a3 83       	std	Z+3, r26	; 0x03
    deaa:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    deae:	1f c0       	rjmp	.+62     	; 0xdeee <mmc_init+0x166>
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    deb0:	c7 5f       	subi	r28, 0xF7	; 247
    deb2:	de 4f       	sbci	r29, 0xFE	; 254
    deb4:	88 81       	ld	r24, Y
    deb6:	99 81       	ldd	r25, Y+1	; 0x01
    deb8:	aa 81       	ldd	r26, Y+2	; 0x02
    deba:	bb 81       	ldd	r27, Y+3	; 0x03
    debc:	c9 50       	subi	r28, 0x09	; 9
    debe:	d1 40       	sbci	r29, 0x01	; 1
    dec0:	ed b7       	in	r30, 0x3d	; 61
    dec2:	fe b7       	in	r31, 0x3e	; 62
    dec4:	84 83       	std	Z+4, r24	; 0x04
    dec6:	95 83       	std	Z+5, r25	; 0x05
    dec8:	a6 83       	std	Z+6, r26	; 0x06
    deca:	b7 83       	std	Z+7, r27	; 0x07
    decc:	87 e8       	ldi	r24, 0x87	; 135
    dece:	97 e0       	ldi	r25, 0x07	; 7
    ded0:	a0 e0       	ldi	r26, 0x00	; 0
    ded2:	81 83       	std	Z+1, r24	; 0x01
    ded4:	92 83       	std	Z+2, r25	; 0x02
    ded6:	a3 83       	std	Z+3, r26	; 0x03
    ded8:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            }
            if( rc == RES_OK)
            {
                strcpy(buff,"/");
    dedc:	66 ea       	ldi	r22, 0xA6	; 166
    dede:	78 e0       	ldi	r23, 0x08	; 8
    dee0:	ce 01       	movw	r24, r28
    dee2:	08 96       	adiw	r24, 0x08	; 8
    dee4:	0e 94 e6 30 	call	0x61cc	; 0x61cc <strcpy>
                fatfs_status(buff);
    dee8:	ce 01       	movw	r24, r28
    deea:	08 96       	adiw	r24, 0x08	; 8
    deec:	34 d1       	rcall	.+616    	; 0xe156 <fatfs_status>
            }
        }
        printf("END MMC INIT\n");
    deee:	89 e7       	ldi	r24, 0x79	; 121
    def0:	97 e0       	ldi	r25, 0x07	; 7
    def2:	a0 e0       	ldi	r26, 0x00	; 0
    def4:	ed b7       	in	r30, 0x3d	; 61
    def6:	fe b7       	in	r31, 0x3e	; 62
    def8:	81 83       	std	Z+1, r24	; 0x01
    defa:	92 83       	std	Z+2, r25	; 0x02
    defc:	a3 83       	std	Z+3, r26	; 0x03
    defe:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    }
    mmc_init_flag = 1;
    df02:	81 e0       	ldi	r24, 0x01	; 1
    df04:	90 e0       	ldi	r25, 0x00	; 0
    df06:	90 93 1d 18 	sts	0x181D, r25	; 0x80181d <mmc_init_flag+0x1>
    df0a:	80 93 1c 18 	sts	0x181C, r24	; 0x80181c <mmc_init_flag>

	if(rc != RES_OK)
    df0e:	01 15       	cp	r16, r1
    df10:	11 05       	cpc	r17, r1
    df12:	21 f0       	breq	.+8      	; 0xdf1c <mmc_init+0x194>
		set_error(1);
    df14:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <set_error>
    df18:	c8 01       	movw	r24, r16
    df1a:	02 c0       	rjmp	.+4      	; 0xdf20 <mmc_init+0x198>
    df1c:	80 e0       	ldi	r24, 0x00	; 0
    df1e:	90 e0       	ldi	r25, 0x00	; 0

    return( rc ) ;
}
    df20:	c4 5f       	subi	r28, 0xF4	; 244
    df22:	de 4f       	sbci	r29, 0xFE	; 254
    df24:	e6 e0       	ldi	r30, 0x06	; 6
    df26:	0c 94 8e e6 	jmp	0x1cd1c	; 0x1cd1c <__epilogue_restores__+0x18>

0000df2a <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    df2a:	80 e0       	ldi	r24, 0x00	; 0
    df2c:	90 e0       	ldi	r25, 0x00	; 0
    df2e:	08 95       	ret

0000df30 <fatfs_scan_files>:
/// WARNING path MUST be big enought for the lonest path length
/// @return 0 if no error
static
MEMSPACE
int fatfs_scan_files (char *path) /* Pointer to the working buffer with start path */
{
    df30:	a4 e4       	ldi	r26, 0x44	; 68
    df32:	b1 e0       	ldi	r27, 0x01	; 1
    df34:	ee e9       	ldi	r30, 0x9E	; 158
    df36:	ff e6       	ldi	r31, 0x6F	; 111
    df38:	0c 94 71 e6 	jmp	0x1cce2	; 0x1cce2 <__prologue_saves__+0x16>
    df3c:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;
    fr = f_opendir(&dirs, path);
    df3e:	bc 01       	movw	r22, r24
    df40:	ce 01       	movw	r24, r28
    df42:	89 5e       	subi	r24, 0xE9	; 233
    df44:	9e 4f       	sbci	r25, 0xFE	; 254
    df46:	0e 94 cc 62 	call	0xc598	; 0xc598 <f_opendir>
    if (fr == FR_OK)
    df4a:	00 97       	sbiw	r24, 0x00	; 0
    df4c:	09 f0       	breq	.+2      	; 0xdf50 <fatfs_scan_files+0x20>
    df4e:	5b c0       	rjmp	.+182    	; 0xe006 <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
            {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    df50:	8f e2       	ldi	r24, 0x2F	; 47
    df52:	d8 2e       	mov	r13, r24
    int i;
    FILINFO info;
    fr = f_opendir(&dirs, path);
    if (fr == FR_OK)
    {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0])
    df54:	be 01       	movw	r22, r28
    df56:	6f 5f       	subi	r22, 0xFF	; 255
    df58:	7f 4f       	sbci	r23, 0xFF	; 255
    df5a:	ce 01       	movw	r24, r28
    df5c:	89 5e       	subi	r24, 0xE9	; 233
    df5e:	9e 4f       	sbci	r25, 0xFE	; 254
    df60:	0e 94 52 63 	call	0xc6a4	; 0xc6a4 <f_readdir>
    df64:	00 97       	sbiw	r24, 0x00	; 0
    df66:	09 f0       	breq	.+2      	; 0xdf6a <fatfs_scan_files+0x3a>
    df68:	4e c0       	rjmp	.+156    	; 0xe006 <fatfs_scan_files+0xd6>
    df6a:	2f 89       	ldd	r18, Y+23	; 0x17
    df6c:	22 23       	and	r18, r18
    df6e:	09 f4       	brne	.+2      	; 0xdf72 <fatfs_scan_files+0x42>
    df70:	4a c0       	rjmp	.+148    	; 0xe006 <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
    df72:	89 85       	ldd	r24, Y+9	; 0x09
    df74:	84 ff       	sbrs	r24, 4
    df76:	25 c0       	rjmp	.+74     	; 0xdfc2 <fatfs_scan_files+0x92>
            {
                AccDirs++;
    df78:	80 91 af 1c 	lds	r24, 0x1CAF	; 0x801caf <AccDirs>
    df7c:	90 91 b0 1c 	lds	r25, 0x1CB0	; 0x801cb0 <AccDirs+0x1>
    df80:	01 96       	adiw	r24, 0x01	; 1
    df82:	90 93 b0 1c 	sts	0x1CB0, r25	; 0x801cb0 <AccDirs+0x1>
    df86:	80 93 af 1c 	sts	0x1CAF, r24	; 0x801caf <AccDirs>
                i = strlen(path);
    df8a:	f8 01       	movw	r30, r16
    df8c:	01 90       	ld	r0, Z+
    df8e:	00 20       	and	r0, r0
    df90:	e9 f7       	brne	.-6      	; 0xdf8c <fatfs_scan_files+0x5c>
    df92:	31 97       	sbiw	r30, 0x01	; 1
    df94:	e0 1b       	sub	r30, r16
    df96:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    df98:	78 01       	movw	r14, r16
    df9a:	ee 0e       	add	r14, r30
    df9c:	ff 1e       	adc	r15, r31
    df9e:	d7 01       	movw	r26, r14
    dfa0:	dc 92       	st	X, r13
    dfa2:	cf 01       	movw	r24, r30
    dfa4:	01 96       	adiw	r24, 0x01	; 1
    dfa6:	be 01       	movw	r22, r28
    dfa8:	69 5e       	subi	r22, 0xE9	; 233
    dfaa:	7f 4f       	sbci	r23, 0xFF	; 255
    dfac:	80 0f       	add	r24, r16
    dfae:	91 1f       	adc	r25, r17
    dfb0:	0e 94 e6 30 	call	0x61cc	; 0x61cc <strcpy>
                fr = fatfs_scan_files(path);
    dfb4:	c8 01       	movw	r24, r16
    dfb6:	bc df       	rcall	.-136    	; 0xdf30 <fatfs_scan_files>
                path[i] = 0;
    dfb8:	f7 01       	movw	r30, r14
    dfba:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    dfbc:	00 97       	sbiw	r24, 0x00	; 0
    dfbe:	51 f2       	breq	.-108    	; 0xdf54 <fatfs_scan_files+0x24>
    dfc0:	22 c0       	rjmp	.+68     	; 0xe006 <fatfs_scan_files+0xd6>
            }
            else
            {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    dfc2:	80 91 b1 1c 	lds	r24, 0x1CB1	; 0x801cb1 <AccFiles>
    dfc6:	90 91 b2 1c 	lds	r25, 0x1CB2	; 0x801cb2 <AccFiles+0x1>
    dfca:	01 96       	adiw	r24, 0x01	; 1
    dfcc:	90 93 b2 1c 	sts	0x1CB2, r25	; 0x801cb2 <AccFiles+0x1>
    dfd0:	80 93 b1 1c 	sts	0x1CB1, r24	; 0x801cb1 <AccFiles>
                AccSize += info.fsize;
    dfd4:	40 91 ab 1c 	lds	r20, 0x1CAB	; 0x801cab <AccSize>
    dfd8:	50 91 ac 1c 	lds	r21, 0x1CAC	; 0x801cac <AccSize+0x1>
    dfdc:	60 91 ad 1c 	lds	r22, 0x1CAD	; 0x801cad <AccSize+0x2>
    dfe0:	70 91 ae 1c 	lds	r23, 0x1CAE	; 0x801cae <AccSize+0x3>
    dfe4:	89 81       	ldd	r24, Y+1	; 0x01
    dfe6:	9a 81       	ldd	r25, Y+2	; 0x02
    dfe8:	ab 81       	ldd	r26, Y+3	; 0x03
    dfea:	bc 81       	ldd	r27, Y+4	; 0x04
    dfec:	84 0f       	add	r24, r20
    dfee:	95 1f       	adc	r25, r21
    dff0:	a6 1f       	adc	r26, r22
    dff2:	b7 1f       	adc	r27, r23
    dff4:	80 93 ab 1c 	sts	0x1CAB, r24	; 0x801cab <AccSize>
    dff8:	90 93 ac 1c 	sts	0x1CAC, r25	; 0x801cac <AccSize+0x1>
    dffc:	a0 93 ad 1c 	sts	0x1CAD, r26	; 0x801cad <AccSize+0x2>
    e000:	b0 93 ae 1c 	sts	0x1CAE, r27	; 0x801cae <AccSize+0x3>
    e004:	a7 cf       	rjmp	.-178    	; 0xdf54 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e006:	cc 5b       	subi	r28, 0xBC	; 188
    e008:	de 4f       	sbci	r29, 0xFE	; 254
    e00a:	e7 e0       	ldi	r30, 0x07	; 7
    e00c:	0c 94 8d e6 	jmp	0x1cd1a	; 0x1cd1a <__epilogue_restores__+0x16>

0000e010 <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    e010:	0f 93       	push	r16
    e012:	1f 93       	push	r17
    e014:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    e016:	46 81       	ldd	r20, Z+6	; 0x06
    e018:	57 81       	ldd	r21, Z+7	; 0x07
    e01a:	05 2e       	mov	r0, r21
    e01c:	00 0c       	add	r0, r0
    e01e:	66 0b       	sbc	r22, r22
    e020:	77 0b       	sbc	r23, r23
    e022:	ba 01       	movw	r22, r20
    e024:	55 27       	eor	r21, r21
    e026:	44 27       	eor	r20, r20
    e028:	84 81       	ldd	r24, Z+4	; 0x04
    e02a:	95 81       	ldd	r25, Z+5	; 0x05
    e02c:	09 2e       	mov	r0, r25
    e02e:	00 0c       	add	r0, r0
    e030:	aa 0b       	sbc	r26, r26
    e032:	bb 0b       	sbc	r27, r27
    e034:	2b e0       	ldi	r18, 0x0B	; 11
    e036:	88 0f       	add	r24, r24
    e038:	99 1f       	adc	r25, r25
    e03a:	aa 1f       	adc	r26, r26
    e03c:	bb 1f       	adc	r27, r27
    e03e:	2a 95       	dec	r18
    e040:	d1 f7       	brne	.-12     	; 0xe036 <tm_to_fat+0x26>
    e042:	48 2b       	or	r20, r24
    e044:	59 2b       	or	r21, r25
    e046:	6a 2b       	or	r22, r26
    e048:	7b 2b       	or	r23, r27
    e04a:	82 81       	ldd	r24, Z+2	; 0x02
    e04c:	93 81       	ldd	r25, Z+3	; 0x03
    e04e:	09 2e       	mov	r0, r25
    e050:	00 0c       	add	r0, r0
    e052:	aa 0b       	sbc	r26, r26
    e054:	bb 0b       	sbc	r27, r27
    e056:	35 e0       	ldi	r19, 0x05	; 5
    e058:	88 0f       	add	r24, r24
    e05a:	99 1f       	adc	r25, r25
    e05c:	aa 1f       	adc	r26, r26
    e05e:	bb 1f       	adc	r27, r27
    e060:	3a 95       	dec	r19
    e062:	d1 f7       	brne	.-12     	; 0xe058 <tm_to_fat+0x48>
    e064:	48 2b       	or	r20, r24
    e066:	59 2b       	or	r21, r25
    e068:	6a 2b       	or	r22, r26
    e06a:	7b 2b       	or	r23, r27
    e06c:	80 81       	ld	r24, Z
    e06e:	91 81       	ldd	r25, Z+1	; 0x01
    e070:	09 2e       	mov	r0, r25
    e072:	00 0c       	add	r0, r0
    e074:	aa 0b       	sbc	r26, r26
    e076:	bb 0b       	sbc	r27, r27
    e078:	b6 95       	lsr	r27
    e07a:	a7 95       	ror	r26
    e07c:	97 95       	ror	r25
    e07e:	87 95       	ror	r24
    e080:	84 2b       	or	r24, r20
    e082:	95 2b       	or	r25, r21
    e084:	a6 2b       	or	r26, r22
    e086:	b7 2b       	or	r27, r23
    e088:	02 85       	ldd	r16, Z+10	; 0x0a
    e08a:	13 85       	ldd	r17, Z+11	; 0x0b
    e08c:	00 55       	subi	r16, 0x50	; 80
    e08e:	11 09       	sbc	r17, r1
    e090:	01 2e       	mov	r0, r17
    e092:	00 0c       	add	r0, r0
    e094:	22 0b       	sbc	r18, r18
    e096:	33 0b       	sbc	r19, r19
    e098:	49 e1       	ldi	r20, 0x19	; 25
    e09a:	00 0f       	add	r16, r16
    e09c:	11 1f       	adc	r17, r17
    e09e:	22 1f       	adc	r18, r18
    e0a0:	33 1f       	adc	r19, r19
    e0a2:	4a 95       	dec	r20
    e0a4:	d1 f7       	brne	.-12     	; 0xe09a <tm_to_fat+0x8a>
    e0a6:	ac 01       	movw	r20, r24
    e0a8:	bd 01       	movw	r22, r26
    e0aa:	40 2b       	or	r20, r16
    e0ac:	51 2b       	or	r21, r17
    e0ae:	62 2b       	or	r22, r18
    e0b0:	73 2b       	or	r23, r19
    e0b2:	80 85       	ldd	r24, Z+8	; 0x08
    e0b4:	91 85       	ldd	r25, Z+9	; 0x09
    e0b6:	09 2e       	mov	r0, r25
    e0b8:	00 0c       	add	r0, r0
    e0ba:	aa 0b       	sbc	r26, r26
    e0bc:	bb 0b       	sbc	r27, r27
    e0be:	01 96       	adiw	r24, 0x01	; 1
    e0c0:	a1 1d       	adc	r26, r1
    e0c2:	b1 1d       	adc	r27, r1
    e0c4:	e5 e1       	ldi	r30, 0x15	; 21
    e0c6:	88 0f       	add	r24, r24
    e0c8:	99 1f       	adc	r25, r25
    e0ca:	aa 1f       	adc	r26, r26
    e0cc:	bb 1f       	adc	r27, r27
    e0ce:	ea 95       	dec	r30
    e0d0:	d1 f7       	brne	.-12     	; 0xe0c6 <tm_to_fat+0xb6>
    e0d2:	8a 01       	movw	r16, r20
    e0d4:	9b 01       	movw	r18, r22
    e0d6:	08 2b       	or	r16, r24
    e0d8:	19 2b       	or	r17, r25
    e0da:	2a 2b       	or	r18, r26
    e0dc:	3b 2b       	or	r19, r27
    e0de:	c9 01       	movw	r24, r18
    e0e0:	b8 01       	movw	r22, r16
}
    e0e2:	1f 91       	pop	r17
    e0e4:	0f 91       	pop	r16
    e0e6:	08 95       	ret

0000e0e8 <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    e0e8:	a4 e0       	ldi	r26, 0x04	; 4
    e0ea:	b0 e0       	ldi	r27, 0x00	; 0
    e0ec:	ea e7       	ldi	r30, 0x7A	; 122
    e0ee:	f0 e7       	ldi	r31, 0x70	; 112
    e0f0:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    e0f4:	ce 01       	movw	r24, r28
    e0f6:	01 96       	adiw	r24, 0x01	; 1
    e0f8:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <time>
    return( tm_to_fat(localtime(&t)));
    e0fc:	ce 01       	movw	r24, r28
    e0fe:	01 96       	adiw	r24, 0x01	; 1
    e100:	0e 94 40 38 	call	0x7080	; 0x7080 <localtime>
    e104:	85 df       	rcall	.-246    	; 0xe010 <tm_to_fat>
}
    e106:	24 96       	adiw	r28, 0x04	; 4
    e108:	e2 e0       	ldi	r30, 0x02	; 2
    e10a:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

0000e10e <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    e10e:	00 d0       	rcall	.+0      	; 0xe110 <put_rc+0x2>
    e110:	00 d0       	rcall	.+0      	; 0xe112 <put_rc+0x4>
    e112:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    e114:	ed b7       	in	r30, 0x3d	; 61
    e116:	fe b7       	in	r31, 0x3e	; 62
    e118:	95 83       	std	Z+5, r25	; 0x05
    e11a:	84 83       	std	Z+4, r24	; 0x04
    e11c:	8c e9       	ldi	r24, 0x9C	; 156
    e11e:	9a e0       	ldi	r25, 0x0A	; 10
    e120:	a0 e0       	ldi	r26, 0x00	; 0
    e122:	81 83       	std	Z+1, r24	; 0x01
    e124:	92 83       	std	Z+2, r25	; 0x02
    e126:	a3 83       	std	Z+3, r26	; 0x03
    e128:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
}
    e12c:	0f 90       	pop	r0
    e12e:	0f 90       	pop	r0
    e130:	0f 90       	pop	r0
    e132:	0f 90       	pop	r0
    e134:	0f 90       	pop	r0
    e136:	08 95       	ret

0000e138 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e138:	01 97       	sbiw	r24, 0x01	; 1
    e13a:	84 30       	cpi	r24, 0x04	; 4
    e13c:	91 05       	cpc	r25, r1
    e13e:	40 f4       	brcc	.+16     	; 0xe150 <fatfs_fstype+0x18>
    e140:	88 0f       	add	r24, r24
    e142:	99 1f       	adc	r25, r25
    e144:	fc 01       	movw	r30, r24
    e146:	e6 53       	subi	r30, 0x36	; 54
    e148:	f7 4f       	sbci	r31, 0xF7	; 247
    e14a:	80 81       	ld	r24, Z
    e14c:	91 81       	ldd	r25, Z+1	; 0x01
    e14e:	08 95       	ret
    char *ptr;
    switch(type)
    e150:	88 ea       	ldi	r24, 0xA8	; 168
    e152:	98 e0       	ldi	r25, 0x08	; 8
        default:
            ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e154:	08 95       	ret

0000e156 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  1 on success 0 on error
MEMSPACE
int fatfs_status(char *name)
{
    e156:	a8 e3       	ldi	r26, 0x38	; 56
    e158:	b1 e0       	ldi	r27, 0x01	; 1
    e15a:	e1 eb       	ldi	r30, 0xB1	; 177
    e15c:	f0 e7       	ldi	r31, 0x70	; 112
    e15e:	0c 94 70 e6 	jmp	0x1cce0	; 0x1cce0 <__prologue_saves__+0x14>
    FATFS *fs;
    char label[24+2];
    DWORD vsn;                                    // volume serial number
    char buff[MAX_NAME_LEN+1];

	memset(buff,0,sizeof(buff)-1);
    e162:	8e 01       	movw	r16, r28
    e164:	0c 5e       	subi	r16, 0xEC	; 236
    e166:	1f 4f       	sbci	r17, 0xFF	; 255
    e168:	20 e0       	ldi	r18, 0x00	; 0
    e16a:	31 e0       	ldi	r19, 0x01	; 1
    e16c:	f8 01       	movw	r30, r16
    e16e:	a9 01       	movw	r20, r18
    e170:	11 92       	st	Z+, r1
    e172:	41 50       	subi	r20, 0x01	; 1
    e174:	50 40       	sbci	r21, 0x00	; 0
    e176:	e1 f7       	brne	.-8      	; 0xe170 <fatfs_status+0x1a>
    e178:	fc 01       	movw	r30, r24
    e17a:	bf 01       	movw	r22, r30
    while(*name == ' ' || *name == '\t')
    e17c:	91 91       	ld	r25, Z+
    e17e:	90 32       	cpi	r25, 0x20	; 32
    e180:	e1 f3       	breq	.-8      	; 0xe17a <fatfs_status+0x24>
    e182:	99 30       	cpi	r25, 0x09	; 9
    e184:	d1 f3       	breq	.-12     	; 0xe17a <fatfs_status+0x24>
        ++name;

    if(!name || !*name)
    e186:	61 15       	cp	r22, r1
    e188:	71 05       	cpc	r23, r1
    e18a:	11 f0       	breq	.+4      	; 0xe190 <fatfs_status+0x3a>
    e18c:	91 11       	cpse	r25, r1
    e18e:	02 c0       	rjmp	.+4      	; 0xe194 <fatfs_status+0x3e>
    {
        strcpy(buff,".");
    e190:	66 ee       	ldi	r22, 0xE6	; 230
    e192:	72 e1       	ldi	r23, 0x12	; 18
    }
    else
    {
        strcpy(buff,name);
    e194:	c8 01       	movw	r24, r16
    e196:	0e 94 e6 30 	call	0x61cc	; 0x61cc <strcpy>
	}
    printf("fatfs status:%s\n",buff);
    e19a:	ed b7       	in	r30, 0x3d	; 61
    e19c:	fe b7       	in	r31, 0x3e	; 62
    e19e:	15 83       	std	Z+5, r17	; 0x05
    e1a0:	04 83       	std	Z+4, r16	; 0x04
    e1a2:	8b e8       	ldi	r24, 0x8B	; 139
    e1a4:	9a e0       	ldi	r25, 0x0A	; 10
    e1a6:	a0 e0       	ldi	r26, 0x00	; 0
    e1a8:	81 83       	std	Z+1, r24	; 0x01
    e1aa:	92 83       	std	Z+2, r25	; 0x02
    e1ac:	a3 83       	std	Z+3, r26	; 0x03
    e1ae:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    res = f_getfree(buff, (DWORD*)&p2, &fs);
    e1b2:	ae 01       	movw	r20, r28
    e1b4:	49 5c       	subi	r20, 0xC9	; 201
    e1b6:	5e 4f       	sbci	r21, 0xFE	; 254
    e1b8:	be 01       	movw	r22, r28
    e1ba:	6d 5c       	subi	r22, 0xCD	; 205
    e1bc:	7e 4f       	sbci	r23, 0xFE	; 254
    e1be:	c8 01       	movw	r24, r16
    e1c0:	0e 94 d4 63 	call	0xc7a8	; 0xc7a8 <f_getfree>
    if (res)
    e1c4:	89 2b       	or	r24, r25
    e1c6:	19 f0       	breq	.+6      	; 0xe1ce <fatfs_status+0x78>
    {
        printf("fatfs_status f_getfree failed\n");
    e1c8:	8c e6       	ldi	r24, 0x6C	; 108
    e1ca:	9a e0       	ldi	r25, 0x0A	; 10
    e1cc:	e4 c0       	rjmp	.+456    	; 0xe396 <fatfs_status+0x240>
        return(0);
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e1ce:	c9 5c       	subi	r28, 0xC9	; 201
    e1d0:	de 4f       	sbci	r29, 0xFE	; 254
    e1d2:	e8 81       	ld	r30, Y
    e1d4:	f9 81       	ldd	r31, Y+1	; 0x01
    e1d6:	c7 53       	subi	r28, 0x37	; 55
    e1d8:	d1 40       	sbci	r29, 0x01	; 1
    e1da:	80 81       	ld	r24, Z
    e1dc:	90 e0       	ldi	r25, 0x00	; 0
    e1de:	ac df       	rcall	.-168    	; 0xe138 <fatfs_fstype>
    e1e0:	ed b7       	in	r30, 0x3d	; 61
    e1e2:	fe b7       	in	r31, 0x3e	; 62
    e1e4:	95 83       	std	Z+5, r25	; 0x05
    e1e6:	84 83       	std	Z+4, r24	; 0x04
    e1e8:	8e e4       	ldi	r24, 0x4E	; 78
    e1ea:	9a e0       	ldi	r25, 0x0A	; 10
    e1ec:	a0 e0       	ldi	r26, 0x00	; 0
    e1ee:	81 83       	std	Z+1, r24	; 0x01
    e1f0:	92 83       	std	Z+2, r25	; 0x02
    e1f2:	a3 83       	std	Z+3, r26	; 0x03
    e1f4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e1f8:	c9 5c       	subi	r28, 0xC9	; 201
    e1fa:	de 4f       	sbci	r29, 0xFE	; 254
    e1fc:	e8 81       	ld	r30, Y
    e1fe:	f9 81       	ldd	r31, Y+1	; 0x01
    e200:	c7 53       	subi	r28, 0x37	; 55
    e202:	d1 40       	sbci	r29, 0x01	; 1
    e204:	81 85       	ldd	r24, Z+9	; 0x09
    e206:	92 85       	ldd	r25, Z+10	; 0x0a
    e208:	a0 e0       	ldi	r26, 0x00	; 0
    e20a:	b0 e0       	ldi	r27, 0x00	; 0
    e20c:	39 e0       	ldi	r19, 0x09	; 9
    e20e:	88 0f       	add	r24, r24
    e210:	99 1f       	adc	r25, r25
    e212:	aa 1f       	adc	r26, r26
    e214:	bb 1f       	adc	r27, r27
    e216:	3a 95       	dec	r19
    e218:	d1 f7       	brne	.-12     	; 0xe20e <fatfs_status+0xb8>
    e21a:	ed b7       	in	r30, 0x3d	; 61
    e21c:	fe b7       	in	r31, 0x3e	; 62
    e21e:	84 83       	std	Z+4, r24	; 0x04
    e220:	95 83       	std	Z+5, r25	; 0x05
    e222:	a6 83       	std	Z+6, r26	; 0x06
    e224:	b7 83       	std	Z+7, r27	; 0x07
    e226:	8f e2       	ldi	r24, 0x2F	; 47
    e228:	9a e0       	ldi	r25, 0x0A	; 10
    e22a:	a0 e0       	ldi	r26, 0x00	; 0
    e22c:	81 83       	std	Z+1, r24	; 0x01
    e22e:	92 83       	std	Z+2, r25	; 0x02
    e230:	a3 83       	std	Z+3, r26	; 0x03
    e232:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e236:	c9 5c       	subi	r28, 0xC9	; 201
    e238:	de 4f       	sbci	r29, 0xFE	; 254
    e23a:	e8 81       	ld	r30, Y
    e23c:	f9 81       	ldd	r31, Y+1	; 0x01
    e23e:	c7 53       	subi	r28, 0x37	; 55
    e240:	d1 40       	sbci	r29, 0x01	; 1
    e242:	82 81       	ldd	r24, Z+2	; 0x02
    e244:	90 e0       	ldi	r25, 0x00	; 0
    e246:	ed b7       	in	r30, 0x3d	; 61
    e248:	fe b7       	in	r31, 0x3e	; 62
    e24a:	95 83       	std	Z+5, r25	; 0x05
    e24c:	84 83       	std	Z+4, r24	; 0x04
    e24e:	81 e1       	ldi	r24, 0x11	; 17
    e250:	9a e0       	ldi	r25, 0x0A	; 10
    e252:	a0 e0       	ldi	r26, 0x00	; 0
    e254:	81 83       	std	Z+1, r24	; 0x01
    e256:	92 83       	std	Z+2, r25	; 0x02
    e258:	a3 83       	std	Z+3, r26	; 0x03
    e25a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e25e:	c9 5c       	subi	r28, 0xC9	; 201
    e260:	de 4f       	sbci	r29, 0xFE	; 254
    e262:	e8 81       	ld	r30, Y
    e264:	f9 81       	ldd	r31, Y+1	; 0x01
    e266:	c7 53       	subi	r28, 0x37	; 55
    e268:	d1 40       	sbci	r29, 0x01	; 1
    e26a:	87 81       	ldd	r24, Z+7	; 0x07
    e26c:	90 85       	ldd	r25, Z+8	; 0x08
    e26e:	ed b7       	in	r30, 0x3d	; 61
    e270:	fe b7       	in	r31, 0x3e	; 62
    e272:	95 83       	std	Z+5, r25	; 0x05
    e274:	84 83       	std	Z+4, r24	; 0x04
    e276:	83 ef       	ldi	r24, 0xF3	; 243
    e278:	99 e0       	ldi	r25, 0x09	; 9
    e27a:	a0 e0       	ldi	r26, 0x00	; 0
    e27c:	81 83       	std	Z+1, r24	; 0x01
    e27e:	92 83       	std	Z+2, r25	; 0x02
    e280:	a3 83       	std	Z+3, r26	; 0x03
    e282:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e286:	c9 5c       	subi	r28, 0xC9	; 201
    e288:	de 4f       	sbci	r29, 0xFE	; 254
    e28a:	e8 81       	ld	r30, Y
    e28c:	f9 81       	ldd	r31, Y+1	; 0x01
    e28e:	c7 53       	subi	r28, 0x37	; 55
    e290:	d1 40       	sbci	r29, 0x01	; 1
    e292:	85 8d       	ldd	r24, Z+29	; 0x1d
    e294:	96 8d       	ldd	r25, Z+30	; 0x1e
    e296:	a7 8d       	ldd	r26, Z+31	; 0x1f
    e298:	b0 a1       	ldd	r27, Z+32	; 0x20
    e29a:	ed b7       	in	r30, 0x3d	; 61
    e29c:	fe b7       	in	r31, 0x3e	; 62
    e29e:	84 83       	std	Z+4, r24	; 0x04
    e2a0:	95 83       	std	Z+5, r25	; 0x05
    e2a2:	a6 83       	std	Z+6, r26	; 0x06
    e2a4:	b7 83       	std	Z+7, r27	; 0x07
    e2a6:	84 ed       	ldi	r24, 0xD4	; 212
    e2a8:	99 e0       	ldi	r25, 0x09	; 9
    e2aa:	a0 e0       	ldi	r26, 0x00	; 0
    e2ac:	81 83       	std	Z+1, r24	; 0x01
    e2ae:	92 83       	std	Z+2, r25	; 0x02
    e2b0:	a3 83       	std	Z+3, r26	; 0x03
    e2b2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e2b6:	c9 5c       	subi	r28, 0xC9	; 201
    e2b8:	de 4f       	sbci	r29, 0xFE	; 254
    e2ba:	e8 81       	ld	r30, Y
    e2bc:	f9 81       	ldd	r31, Y+1	; 0x01
    e2be:	c7 53       	subi	r28, 0x37	; 55
    e2c0:	d1 40       	sbci	r29, 0x01	; 1
    e2c2:	81 8d       	ldd	r24, Z+25	; 0x19
    e2c4:	92 8d       	ldd	r25, Z+26	; 0x1a
    e2c6:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e2c8:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e2ca:	02 97       	sbiw	r24, 0x02	; 2
    e2cc:	a1 09       	sbc	r26, r1
    e2ce:	b1 09       	sbc	r27, r1
    e2d0:	ed b7       	in	r30, 0x3d	; 61
    e2d2:	fe b7       	in	r31, 0x3e	; 62
    e2d4:	84 83       	std	Z+4, r24	; 0x04
    e2d6:	95 83       	std	Z+5, r25	; 0x05
    e2d8:	a6 83       	std	Z+6, r26	; 0x06
    e2da:	b7 83       	std	Z+7, r27	; 0x07
    e2dc:	85 eb       	ldi	r24, 0xB5	; 181
    e2de:	99 e0       	ldi	r25, 0x09	; 9
    e2e0:	a0 e0       	ldi	r26, 0x00	; 0
    e2e2:	81 83       	std	Z+1, r24	; 0x01
    e2e4:	92 83       	std	Z+2, r25	; 0x02
    e2e6:	a3 83       	std	Z+3, r26	; 0x03
    e2e8:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e2ec:	c9 5c       	subi	r28, 0xC9	; 201
    e2ee:	de 4f       	sbci	r29, 0xFE	; 254
    e2f0:	e8 81       	ld	r30, Y
    e2f2:	f9 81       	ldd	r31, Y+1	; 0x01
    e2f4:	c7 53       	subi	r28, 0x37	; 55
    e2f6:	d1 40       	sbci	r29, 0x01	; 1
    e2f8:	85 a1       	ldd	r24, Z+37	; 0x25
    e2fa:	96 a1       	ldd	r25, Z+38	; 0x26
    e2fc:	a7 a1       	ldd	r26, Z+39	; 0x27
    e2fe:	b0 a5       	ldd	r27, Z+40	; 0x28
    e300:	ed b7       	in	r30, 0x3d	; 61
    e302:	fe b7       	in	r31, 0x3e	; 62
    e304:	84 83       	std	Z+4, r24	; 0x04
    e306:	95 83       	std	Z+5, r25	; 0x05
    e308:	a6 83       	std	Z+6, r26	; 0x06
    e30a:	b7 83       	std	Z+7, r27	; 0x07
    e30c:	86 e9       	ldi	r24, 0x96	; 150
    e30e:	99 e0       	ldi	r25, 0x09	; 9
    e310:	a0 e0       	ldi	r26, 0x00	; 0
    e312:	81 83       	std	Z+1, r24	; 0x01
    e314:	92 83       	std	Z+2, r25	; 0x02
    e316:	a3 83       	std	Z+3, r26	; 0x03
    e318:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e31c:	c9 5c       	subi	r28, 0xC9	; 201
    e31e:	de 4f       	sbci	r29, 0xFE	; 254
    e320:	e8 81       	ld	r30, Y
    e322:	f9 81       	ldd	r31, Y+1	; 0x01
    e324:	c7 53       	subi	r28, 0x37	; 55
    e326:	d1 40       	sbci	r29, 0x01	; 1
    e328:	81 a5       	ldd	r24, Z+41	; 0x29
    e32a:	92 a5       	ldd	r25, Z+42	; 0x2a
    e32c:	a3 a5       	ldd	r26, Z+43	; 0x2b
    e32e:	b4 a5       	ldd	r27, Z+44	; 0x2c
    e330:	ed b7       	in	r30, 0x3d	; 61
    e332:	fe b7       	in	r31, 0x3e	; 62
    e334:	84 83       	std	Z+4, r24	; 0x04
    e336:	95 83       	std	Z+5, r25	; 0x05
    e338:	a6 83       	std	Z+6, r26	; 0x06
    e33a:	b7 83       	std	Z+7, r27	; 0x07
    e33c:	87 e7       	ldi	r24, 0x77	; 119
    e33e:	99 e0       	ldi	r25, 0x09	; 9
    e340:	a0 e0       	ldi	r26, 0x00	; 0
    e342:	81 83       	std	Z+1, r24	; 0x01
    e344:	92 83       	std	Z+2, r25	; 0x02
    e346:	a3 83       	std	Z+3, r26	; 0x03
    e348:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e34c:	c9 5c       	subi	r28, 0xC9	; 201
    e34e:	de 4f       	sbci	r29, 0xFE	; 254
    e350:	e8 81       	ld	r30, Y
    e352:	f9 81       	ldd	r31, Y+1	; 0x01
    e354:	c7 53       	subi	r28, 0x37	; 55
    e356:	d1 40       	sbci	r29, 0x01	; 1
    e358:	85 a5       	ldd	r24, Z+45	; 0x2d
    e35a:	96 a5       	ldd	r25, Z+46	; 0x2e
    e35c:	a7 a5       	ldd	r26, Z+47	; 0x2f
    e35e:	b0 a9       	ldd	r27, Z+48	; 0x30
    e360:	ed b7       	in	r30, 0x3d	; 61
    e362:	fe b7       	in	r31, 0x3e	; 62
    e364:	84 83       	std	Z+4, r24	; 0x04
    e366:	95 83       	std	Z+5, r25	; 0x05
    e368:	a6 83       	std	Z+6, r26	; 0x06
    e36a:	b7 83       	std	Z+7, r27	; 0x07
    e36c:	88 e5       	ldi	r24, 0x58	; 88
    e36e:	99 e0       	ldi	r25, 0x09	; 9
    e370:	a0 e0       	ldi	r26, 0x00	; 0
    e372:	81 83       	std	Z+1, r24	; 0x01
    e374:	92 83       	std	Z+2, r25	; 0x02
    e376:	a3 83       	std	Z+3, r26	; 0x03
    e378:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(buff, label, (DWORD*)&vsn);
    e37c:	ae 01       	movw	r20, r28
    e37e:	41 5d       	subi	r20, 0xD1	; 209
    e380:	5e 4f       	sbci	r21, 0xFE	; 254
    e382:	be 01       	movw	r22, r28
    e384:	6b 5e       	subi	r22, 0xEB	; 235
    e386:	7e 4f       	sbci	r23, 0xFE	; 254
    e388:	c8 01       	movw	r24, r16
    e38a:	0e 94 06 68 	call	0xd00c	; 0xd00c <f_getlabel>
    if (res)
    e38e:	89 2b       	or	r24, r25
    e390:	69 f0       	breq	.+26     	; 0xe3ac <fatfs_status+0x256>
    {
        printf("fatfs_status f_getlabel failed\n");
    e392:	88 e3       	ldi	r24, 0x38	; 56
    e394:	99 e0       	ldi	r25, 0x09	; 9
    e396:	a0 e0       	ldi	r26, 0x00	; 0
    e398:	ed b7       	in	r30, 0x3d	; 61
    e39a:	fe b7       	in	r31, 0x3e	; 62
    e39c:	81 83       	std	Z+1, r24	; 0x01
    e39e:	92 83       	std	Z+2, r25	; 0x02
    e3a0:	a3 83       	std	Z+3, r26	; 0x03
    e3a2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        return(0);
    e3a6:	80 e0       	ldi	r24, 0x00	; 0
    e3a8:	90 e0       	ldi	r25, 0x00	; 0
    e3aa:	a6 c0       	rjmp	.+332    	; 0xe4f8 <fatfs_status+0x3a2>
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e3ac:	cb 5e       	subi	r28, 0xEB	; 235
    e3ae:	de 4f       	sbci	r29, 0xFE	; 254
    e3b0:	88 81       	ld	r24, Y
    e3b2:	c5 51       	subi	r28, 0x15	; 21
    e3b4:	d1 40       	sbci	r29, 0x01	; 1
    e3b6:	81 11       	cpse	r24, r1
    e3b8:	03 c0       	rjmp	.+6      	; 0xe3c0 <fatfs_status+0x26a>
    e3ba:	80 eb       	ldi	r24, 0xB0	; 176
    e3bc:	98 e0       	ldi	r25, 0x08	; 8
    e3be:	03 c0       	rjmp	.+6      	; 0xe3c6 <fatfs_status+0x270>
    e3c0:	ce 01       	movw	r24, r28
    e3c2:	8b 5e       	subi	r24, 0xEB	; 235
    e3c4:	9e 4f       	sbci	r25, 0xFE	; 254
    e3c6:	ed b7       	in	r30, 0x3d	; 61
    e3c8:	fe b7       	in	r31, 0x3e	; 62
    e3ca:	95 83       	std	Z+5, r25	; 0x05
    e3cc:	84 83       	std	Z+4, r24	; 0x04
    e3ce:	8a e1       	ldi	r24, 0x1A	; 26
    e3d0:	99 e0       	ldi	r25, 0x09	; 9
    e3d2:	a0 e0       	ldi	r26, 0x00	; 0
    e3d4:	81 83       	std	Z+1, r24	; 0x01
    e3d6:	92 83       	std	Z+2, r25	; 0x02
    e3d8:	a3 83       	std	Z+3, r26	; 0x03
    e3da:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e3de:	c1 5d       	subi	r28, 0xD1	; 209
    e3e0:	de 4f       	sbci	r29, 0xFE	; 254
    e3e2:	88 81       	ld	r24, Y
    e3e4:	99 81       	ldd	r25, Y+1	; 0x01
    e3e6:	aa 81       	ldd	r26, Y+2	; 0x02
    e3e8:	bb 81       	ldd	r27, Y+3	; 0x03
    e3ea:	cf 52       	subi	r28, 0x2F	; 47
    e3ec:	d1 40       	sbci	r29, 0x01	; 1
    e3ee:	ed b7       	in	r30, 0x3d	; 61
    e3f0:	fe b7       	in	r31, 0x3e	; 62
    e3f2:	97 83       	std	Z+7, r25	; 0x07
    e3f4:	86 83       	std	Z+6, r24	; 0x06
    e3f6:	b5 83       	std	Z+5, r27	; 0x05
    e3f8:	a4 83       	std	Z+4, r26	; 0x04
    e3fa:	85 ef       	ldi	r24, 0xF5	; 245
    e3fc:	98 e0       	ldi	r25, 0x08	; 8
    e3fe:	a0 e0       	ldi	r26, 0x00	; 0
    e400:	81 83       	std	Z+1, r24	; 0x01
    e402:	92 83       	std	Z+2, r25	; 0x02
    e404:	a3 83       	std	Z+3, r26	; 0x03
    e406:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e40a:	10 92 b0 1c 	sts	0x1CB0, r1	; 0x801cb0 <AccDirs+0x1>
    e40e:	10 92 af 1c 	sts	0x1CAF, r1	; 0x801caf <AccDirs>
    e412:	10 92 b2 1c 	sts	0x1CB2, r1	; 0x801cb2 <AccFiles+0x1>
    e416:	10 92 b1 1c 	sts	0x1CB1, r1	; 0x801cb1 <AccFiles>
    e41a:	10 92 ab 1c 	sts	0x1CAB, r1	; 0x801cab <AccSize>
    e41e:	10 92 ac 1c 	sts	0x1CAC, r1	; 0x801cac <AccSize+0x1>
    e422:	10 92 ad 1c 	sts	0x1CAD, r1	; 0x801cad <AccSize+0x2>
    e426:	10 92 ae 1c 	sts	0x1CAE, r1	; 0x801cae <AccSize+0x3>
    res = fatfs_scan_files(buff);
    e42a:	c8 01       	movw	r24, r16
    e42c:	81 dd       	rcall	.-1278   	; 0xdf30 <fatfs_scan_files>
    if (res)
    e42e:	89 2b       	or	r24, r25
    e430:	19 f0       	breq	.+6      	; 0xe438 <fatfs_status+0x2e2>
    {
        printf("fatfs_status fatfs_scan_files failed\n");
    e432:	8f ec       	ldi	r24, 0xCF	; 207
    e434:	98 e0       	ldi	r25, 0x08	; 8
    e436:	af cf       	rjmp	.-162    	; 0xe396 <fatfs_status+0x240>
        return(0);
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e438:	c9 5c       	subi	r28, 0xC9	; 201
    e43a:	de 4f       	sbci	r29, 0xFE	; 254
    e43c:	08 81       	ld	r16, Y
    e43e:	19 81       	ldd	r17, Y+1	; 0x01
    e440:	c7 53       	subi	r28, 0x37	; 55
    e442:	d1 40       	sbci	r29, 0x01	; 1
    e444:	f8 01       	movw	r30, r16
    e446:	c1 84       	ldd	r12, Z+9	; 0x09
    e448:	d2 84       	ldd	r13, Z+10	; 0x0a
    e44a:	e1 2c       	mov	r14, r1
    e44c:	f1 2c       	mov	r15, r1
    e44e:	cd 5c       	subi	r28, 0xCD	; 205
    e450:	de 4f       	sbci	r29, 0xFE	; 254
    e452:	68 81       	ld	r22, Y
    e454:	79 81       	ldd	r23, Y+1	; 0x01
    e456:	8a 81       	ldd	r24, Y+2	; 0x02
    e458:	9b 81       	ldd	r25, Y+3	; 0x03
    e45a:	c3 53       	subi	r28, 0x33	; 51
    e45c:	d1 40       	sbci	r29, 0x01	; 1
    e45e:	a7 01       	movw	r20, r14
    e460:	96 01       	movw	r18, r12
    e462:	0e 94 b7 e5 	call	0x1cb6e	; 0x1cb6e <__mulsi3>
    e466:	22 e0       	ldi	r18, 0x02	; 2
    e468:	30 e0       	ldi	r19, 0x00	; 0
    e46a:	40 e0       	ldi	r20, 0x00	; 0
    e46c:	50 e0       	ldi	r21, 0x00	; 0
    e46e:	0e 94 1b e6 	call	0x1cc36	; 0x1cc36 <__divmodsi4>
    e472:	ed b7       	in	r30, 0x3d	; 61
    e474:	fe b7       	in	r31, 0x3e	; 62
    e476:	20 8b       	std	Z+16, r18	; 0x10
    e478:	31 8b       	std	Z+17, r19	; 0x11
    e47a:	42 8b       	std	Z+18, r20	; 0x12
    e47c:	53 8b       	std	Z+19, r21	; 0x13
    e47e:	f8 01       	movw	r30, r16
    e480:	81 8d       	ldd	r24, Z+25	; 0x19
    e482:	92 8d       	ldd	r25, Z+26	; 0x1a
    e484:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e486:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e488:	9c 01       	movw	r18, r24
    e48a:	ad 01       	movw	r20, r26
    e48c:	22 50       	subi	r18, 0x02	; 2
    e48e:	31 09       	sbc	r19, r1
    e490:	41 09       	sbc	r20, r1
    e492:	51 09       	sbc	r21, r1
    e494:	c7 01       	movw	r24, r14
    e496:	b6 01       	movw	r22, r12
    e498:	0e 94 b7 e5 	call	0x1cb6e	; 0x1cb6e <__mulsi3>
    e49c:	dc 01       	movw	r26, r24
    e49e:	cb 01       	movw	r24, r22
    e4a0:	b6 95       	lsr	r27
    e4a2:	a7 95       	ror	r26
    e4a4:	97 95       	ror	r25
    e4a6:	87 95       	ror	r24
    e4a8:	ed b7       	in	r30, 0x3d	; 61
    e4aa:	fe b7       	in	r31, 0x3e	; 62
    e4ac:	84 87       	std	Z+12, r24	; 0x0c
    e4ae:	95 87       	std	Z+13, r25	; 0x0d
    e4b0:	a6 87       	std	Z+14, r26	; 0x0e
    e4b2:	b7 87       	std	Z+15, r27	; 0x0f
    e4b4:	80 91 af 1c 	lds	r24, 0x1CAF	; 0x801caf <AccDirs>
    e4b8:	90 91 b0 1c 	lds	r25, 0x1CB0	; 0x801cb0 <AccDirs+0x1>
    e4bc:	93 87       	std	Z+11, r25	; 0x0b
    e4be:	82 87       	std	Z+10, r24	; 0x0a
    e4c0:	80 91 ab 1c 	lds	r24, 0x1CAB	; 0x801cab <AccSize>
    e4c4:	90 91 ac 1c 	lds	r25, 0x1CAC	; 0x801cac <AccSize+0x1>
    e4c8:	a0 91 ad 1c 	lds	r26, 0x1CAD	; 0x801cad <AccSize+0x2>
    e4cc:	b0 91 ae 1c 	lds	r27, 0x1CAE	; 0x801cae <AccSize+0x3>
    e4d0:	86 83       	std	Z+6, r24	; 0x06
    e4d2:	97 83       	std	Z+7, r25	; 0x07
    e4d4:	a0 87       	std	Z+8, r26	; 0x08
    e4d6:	b1 87       	std	Z+9, r27	; 0x09
    e4d8:	80 91 b1 1c 	lds	r24, 0x1CB1	; 0x801cb1 <AccFiles>
    e4dc:	90 91 b2 1c 	lds	r25, 0x1CB2	; 0x801cb2 <AccFiles+0x1>
    e4e0:	95 83       	std	Z+5, r25	; 0x05
    e4e2:	84 83       	std	Z+4, r24	; 0x04
    e4e4:	82 e8       	ldi	r24, 0x82	; 130
    e4e6:	98 e0       	ldi	r25, 0x08	; 8
    e4e8:	a0 e0       	ldi	r26, 0x00	; 0
    e4ea:	81 83       	std	Z+1, r24	; 0x01
    e4ec:	92 83       	std	Z+2, r25	; 0x02
    e4ee:	a3 83       	std	Z+3, r26	; 0x03
    e4f0:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        "%lu KB total disk space.\n%lu KB available.\n",
        AccFiles, AccSize, AccDirs,
        (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
        );
	return(1);
    e4f4:	81 e0       	ldi	r24, 0x01	; 1
    e4f6:	90 e0       	ldi	r25, 0x00	; 0
}
    e4f8:	c8 5c       	subi	r28, 0xC8	; 200
    e4fa:	de 4f       	sbci	r29, 0xFE	; 254
    e4fc:	e8 e0       	ldi	r30, 0x08	; 8
    e4fe:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__epilogue_restores__+0x14>

0000e502 <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e502:	ab e1       	ldi	r26, 0x1B	; 27
    e504:	b0 e0       	ldi	r27, 0x00	; 0
    e506:	e7 e8       	ldi	r30, 0x87	; 135
    e508:	f2 e7       	ldi	r31, 0x72	; 114
    e50a:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
    e50e:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e510:	fc 01       	movw	r30, r24
    e512:	86 89       	ldd	r24, Z+22	; 0x16
    e514:	81 11       	cpse	r24, r1
    e516:	03 c0       	rjmp	.+6      	; 0xe51e <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e518:	87 e6       	ldi	r24, 0x67	; 103
    e51a:	98 e0       	ldi	r25, 0x08	; 8
    e51c:	69 c0       	rjmp	.+210    	; 0xe5f0 <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e51e:	fd 01       	movw	r30, r26
    e520:	80 85       	ldd	r24, Z+8	; 0x08
    e522:	84 fd       	sbrc	r24, 4
    e524:	02 c0       	rjmp	.+4      	; 0xe52a <fatfs_filinfo_list+0x28>
    e526:	9d e2       	ldi	r25, 0x2D	; 45
    e528:	01 c0       	rjmp	.+2      	; 0xe52c <fatfs_filinfo_list+0x2a>
    e52a:	94 e4       	ldi	r25, 0x44	; 68
    e52c:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e52e:	80 fd       	sbrc	r24, 0
    e530:	02 c0       	rjmp	.+4      	; 0xe536 <fatfs_filinfo_list+0x34>
    e532:	9d e2       	ldi	r25, 0x2D	; 45
    e534:	01 c0       	rjmp	.+2      	; 0xe538 <fatfs_filinfo_list+0x36>
    e536:	92 e5       	ldi	r25, 0x52	; 82
    e538:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e53a:	81 fd       	sbrc	r24, 1
    e53c:	02 c0       	rjmp	.+4      	; 0xe542 <fatfs_filinfo_list+0x40>
    e53e:	9d e2       	ldi	r25, 0x2D	; 45
    e540:	01 c0       	rjmp	.+2      	; 0xe544 <fatfs_filinfo_list+0x42>
    e542:	98 e4       	ldi	r25, 0x48	; 72
    e544:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e546:	82 fd       	sbrc	r24, 2
    e548:	02 c0       	rjmp	.+4      	; 0xe54e <fatfs_filinfo_list+0x4c>
    e54a:	9d e2       	ldi	r25, 0x2D	; 45
    e54c:	01 c0       	rjmp	.+2      	; 0xe550 <fatfs_filinfo_list+0x4e>
    e54e:	93 e5       	ldi	r25, 0x53	; 83
    e550:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e552:	85 fd       	sbrc	r24, 5
    e554:	02 c0       	rjmp	.+4      	; 0xe55a <fatfs_filinfo_list+0x58>
    e556:	8d e2       	ldi	r24, 0x2D	; 45
    e558:	01 c0       	rjmp	.+2      	; 0xe55c <fatfs_filinfo_list+0x5a>
    e55a:	81 e4       	ldi	r24, 0x41	; 65
    e55c:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e55e:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e560:	fd 01       	movw	r30, r26
    e562:	24 81       	ldd	r18, Z+4	; 0x04
    e564:	35 81       	ldd	r19, Z+5	; 0x05
    e566:	46 81       	ldd	r20, Z+6	; 0x06
    e568:	57 81       	ldd	r21, Z+7	; 0x07
    e56a:	cd 01       	movw	r24, r26
    e56c:	46 96       	adiw	r24, 0x16	; 22
    e56e:	ed b7       	in	r30, 0x3d	; 61
    e570:	fe b7       	in	r31, 0x3e	; 62
    e572:	95 8b       	std	Z+21, r25	; 0x15
    e574:	84 8b       	std	Z+20, r24	; 0x14
    e576:	8d 91       	ld	r24, X+
    e578:	9d 91       	ld	r25, X+
    e57a:	0d 90       	ld	r0, X+
    e57c:	bc 91       	ld	r27, X
    e57e:	a0 2d       	mov	r26, r0
    e580:	80 8b       	std	Z+16, r24	; 0x10
    e582:	91 8b       	std	Z+17, r25	; 0x11
    e584:	a2 8b       	std	Z+18, r26	; 0x12
    e586:	b3 8b       	std	Z+19, r27	; 0x13
    e588:	ca 01       	movw	r24, r20
    e58a:	45 e0       	ldi	r20, 0x05	; 5
    e58c:	96 95       	lsr	r25
    e58e:	87 95       	ror	r24
    e590:	4a 95       	dec	r20
    e592:	e1 f7       	brne	.-8      	; 0xe58c <fatfs_filinfo_list+0x8a>
    e594:	8f 73       	andi	r24, 0x3F	; 63
    e596:	99 27       	eor	r25, r25
    e598:	97 87       	std	Z+15, r25	; 0x0f
    e59a:	86 87       	std	Z+14, r24	; 0x0e
    e59c:	85 2f       	mov	r24, r21
    e59e:	86 95       	lsr	r24
    e5a0:	86 95       	lsr	r24
    e5a2:	86 95       	lsr	r24
    e5a4:	84 87       	std	Z+12, r24	; 0x0c
    e5a6:	15 86       	std	Z+13, r1	; 0x0d
    e5a8:	c9 01       	movw	r24, r18
    e5aa:	8f 71       	andi	r24, 0x1F	; 31
    e5ac:	99 27       	eor	r25, r25
    e5ae:	93 87       	std	Z+11, r25	; 0x0b
    e5b0:	82 87       	std	Z+10, r24	; 0x0a
    e5b2:	c9 01       	movw	r24, r18
    e5b4:	55 e0       	ldi	r21, 0x05	; 5
    e5b6:	96 95       	lsr	r25
    e5b8:	87 95       	ror	r24
    e5ba:	5a 95       	dec	r21
    e5bc:	e1 f7       	brne	.-8      	; 0xe5b6 <fatfs_filinfo_list+0xb4>
    e5be:	8f 70       	andi	r24, 0x0F	; 15
    e5c0:	99 27       	eor	r25, r25
    e5c2:	91 87       	std	Z+9, r25	; 0x09
    e5c4:	80 87       	std	Z+8, r24	; 0x08
    e5c6:	23 2f       	mov	r18, r19
    e5c8:	33 27       	eor	r19, r19
    e5ca:	26 95       	lsr	r18
    e5cc:	24 54       	subi	r18, 0x44	; 68
    e5ce:	38 4f       	sbci	r19, 0xF8	; 248
    e5d0:	37 83       	std	Z+7, r19	; 0x07
    e5d2:	26 83       	std	Z+6, r18	; 0x06
    e5d4:	ce 01       	movw	r24, r28
    e5d6:	46 96       	adiw	r24, 0x16	; 22
    e5d8:	95 83       	std	Z+5, r25	; 0x05
    e5da:	84 83       	std	Z+4, r24	; 0x04
    e5dc:	85 e4       	ldi	r24, 0x45	; 69
    e5de:	98 e0       	ldi	r25, 0x08	; 8
    e5e0:	a0 e0       	ldi	r26, 0x00	; 0
    e5e2:	81 83       	std	Z+1, r24	; 0x01
    e5e4:	92 83       	std	Z+2, r25	; 0x02
    e5e6:	a3 83       	std	Z+3, r26	; 0x03
    e5e8:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e5ec:	83 e4       	ldi	r24, 0x43	; 67
    e5ee:	98 e0       	ldi	r25, 0x08	; 8
    e5f0:	a0 e0       	ldi	r26, 0x00	; 0
    e5f2:	ed b7       	in	r30, 0x3d	; 61
    e5f4:	fe b7       	in	r31, 0x3e	; 62
    e5f6:	81 83       	std	Z+1, r24	; 0x01
    e5f8:	92 83       	std	Z+2, r25	; 0x02
    e5fa:	a3 83       	std	Z+3, r26	; 0x03
    e5fc:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
}
    e600:	6b 96       	adiw	r28, 0x1b	; 27
    e602:	e2 e0       	ldi	r30, 0x02	; 2
    e604:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

0000e608 <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e608:	00 d0       	rcall	.+0      	; 0xe60a <fatfs_help+0x2>
    e60a:	1f 92       	push	r1
    if(full)
    e60c:	89 2b       	or	r24, r25
    e60e:	19 f0       	breq	.+6      	; 0xe616 <fatfs_help+0xe>
    {
        printf(
    e610:	8f ef       	ldi	r24, 0xFF	; 255
    e612:	9a e0       	ldi	r25, 0x0A	; 10
    e614:	02 c0       	rjmp	.+4      	; 0xe61a <fatfs_help+0x12>
            "\n"
            );
    }
	else
	{
		printf("fatfs     help\n");
    e616:	8f ee       	ldi	r24, 0xEF	; 239
    e618:	9a e0       	ldi	r25, 0x0A	; 10
    e61a:	a0 e0       	ldi	r26, 0x00	; 0
    e61c:	ed b7       	in	r30, 0x3d	; 61
    e61e:	fe b7       	in	r31, 0x3e	; 62
    e620:	81 83       	std	Z+1, r24	; 0x01
    e622:	92 83       	std	Z+2, r25	; 0x02
    e624:	a3 83       	std	Z+3, r26	; 0x03
    e626:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
	}

}
    e62a:	0f 90       	pop	r0
    e62c:	0f 90       	pop	r0
    e62e:	0f 90       	pop	r0
    e630:	08 95       	ret

0000e632 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  1 on success or 0 on error
MEMSPACE
int fatfs_ls(char *name)
{
    e632:	a6 e5       	ldi	r26, 0x56	; 86
    e634:	b2 e0       	ldi	r27, 0x02	; 2
    e636:	ef e1       	ldi	r30, 0x1F	; 31
    e638:	f3 e7       	ldi	r31, 0x73	; 115
    e63a:	0c 94 6e e6 	jmp	0x1ccdc	; 0x1ccdc <__prologue_saves__+0x10>
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[MAX_NAME_LEN+1];

	memset(buff,0,sizeof(buff)-1);
    e63e:	8e 01       	movw	r16, r28
    e640:	0e 5d       	subi	r16, 0xDE	; 222
    e642:	1e 4f       	sbci	r17, 0xFE	; 254
    e644:	20 e0       	ldi	r18, 0x00	; 0
    e646:	31 e0       	ldi	r19, 0x01	; 1
    e648:	f8 01       	movw	r30, r16
    e64a:	a9 01       	movw	r20, r18
    e64c:	11 92       	st	Z+, r1
    e64e:	41 50       	subi	r20, 0x01	; 1
    e650:	50 40       	sbci	r21, 0x00	; 0
    e652:	e1 f7       	brne	.-8      	; 0xe64c <fatfs_ls+0x1a>

    if(!name || !*name)
    e654:	00 97       	sbiw	r24, 0x00	; 0
    e656:	21 f0       	breq	.+8      	; 0xe660 <fatfs_ls+0x2e>
    e658:	fc 01       	movw	r30, r24
    e65a:	20 81       	ld	r18, Z
    e65c:	21 11       	cpse	r18, r1
    e65e:	03 c0       	rjmp	.+6      	; 0xe666 <fatfs_ls+0x34>
    {
        strcpy(buff,".");
    e660:	66 ee       	ldi	r22, 0xE6	; 230
    e662:	72 e1       	ldi	r23, 0x12	; 18
    e664:	01 c0       	rjmp	.+2      	; 0xe668 <fatfs_ls+0x36>
    }
    else
    {
        strcpy(buff,name);
    e666:	bc 01       	movw	r22, r24
    e668:	c8 01       	movw	r24, r16
    e66a:	0e 94 e6 30 	call	0x61cc	; 0x61cc <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e66e:	ed b7       	in	r30, 0x3d	; 61
    e670:	fe b7       	in	r31, 0x3e	; 62
    e672:	15 83       	std	Z+5, r17	; 0x05
    e674:	04 83       	std	Z+4, r16	; 0x04
    e676:	81 ee       	ldi	r24, 0xE1	; 225
    e678:	9a e0       	ldi	r25, 0x0A	; 10
    e67a:	a0 e0       	ldi	r26, 0x00	; 0
    e67c:	81 83       	std	Z+1, r24	; 0x01
    e67e:	92 83       	std	Z+2, r25	; 0x02
    e680:	a3 83       	std	Z+3, r26	; 0x03
    e682:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

    res = f_opendir(&dirs, buff);
    e686:	b8 01       	movw	r22, r16
    e688:	ce 01       	movw	r24, r28
    e68a:	8d 5d       	subi	r24, 0xDD	; 221
    e68c:	9d 4f       	sbci	r25, 0xFD	; 253
    e68e:	0e 94 cc 62 	call	0xc598	; 0xc598 <f_opendir>
    if (res != FR_OK) 
    e692:	89 2b       	or	r24, r25
    e694:	09 f0       	breq	.+2      	; 0xe698 <fatfs_ls+0x66>
    e696:	96 c0       	rjmp	.+300    	; 0xe7c4 <fatfs_ls+0x192>
	{ 
		return(0); 
	}
    p1 = s1 = s2 = 0;
    e698:	cf 5a       	subi	r28, 0xAF	; 175
    e69a:	dd 4f       	sbci	r29, 0xFD	; 253
    e69c:	18 82       	st	Y, r1
    e69e:	19 82       	std	Y+1, r1	; 0x01
    e6a0:	1a 82       	std	Y+2, r1	; 0x02
    e6a2:	1b 82       	std	Y+3, r1	; 0x03
    e6a4:	c1 55       	subi	r28, 0x51	; 81
    e6a6:	d2 40       	sbci	r29, 0x02	; 2
    e6a8:	a1 2c       	mov	r10, r1
    e6aa:	b1 2c       	mov	r11, r1
    e6ac:	c1 2c       	mov	r12, r1
    e6ae:	d1 2c       	mov	r13, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e6b0:	be 01       	movw	r22, r28
    e6b2:	64 5f       	subi	r22, 0xF4	; 244
    e6b4:	7f 4f       	sbci	r23, 0xFF	; 255
    e6b6:	ce 01       	movw	r24, r28
    e6b8:	8d 5d       	subi	r24, 0xDD	; 221
    e6ba:	9d 4f       	sbci	r25, 0xFD	; 253
    e6bc:	0e 94 52 63 	call	0xc6a4	; 0xc6a4 <f_readdir>
    e6c0:	7c 01       	movw	r14, r24
        if (res != FR_OK) 
    e6c2:	89 2b       	or	r24, r25
    e6c4:	49 f5       	brne	.+82     	; 0xe718 <fatfs_ls+0xe6>
			break;
		if(!fno.fname[0]) 
    e6c6:	8a a1       	ldd	r24, Y+34	; 0x22
    e6c8:	88 23       	and	r24, r24
    e6ca:	31 f1       	breq	.+76     	; 0xe718 <fatfs_ls+0xe6>
			break;
        if (fno.fattrib & AM_DIR)
    e6cc:	8c 89       	ldd	r24, Y+20	; 0x14
    e6ce:	84 ff       	sbrs	r24, 4
    e6d0:	04 c0       	rjmp	.+8      	; 0xe6da <fatfs_ls+0xa8>
        {
            s2++;
    e6d2:	ff ef       	ldi	r31, 0xFF	; 255
    e6d4:	af 1a       	sub	r10, r31
    e6d6:	bf 0a       	sbc	r11, r31
    e6d8:	1b c0       	rjmp	.+54     	; 0xe710 <fatfs_ls+0xde>
        }
        else
        {
            s1++; p1 += fno.fsize;
    e6da:	4f ef       	ldi	r20, 0xFF	; 255
    e6dc:	c4 1a       	sub	r12, r20
    e6de:	d4 0a       	sbc	r13, r20
    e6e0:	4c 85       	ldd	r20, Y+12	; 0x0c
    e6e2:	5d 85       	ldd	r21, Y+13	; 0x0d
    e6e4:	6e 85       	ldd	r22, Y+14	; 0x0e
    e6e6:	7f 85       	ldd	r23, Y+15	; 0x0f
    e6e8:	cf 5a       	subi	r28, 0xAF	; 175
    e6ea:	dd 4f       	sbci	r29, 0xFD	; 253
    e6ec:	88 81       	ld	r24, Y
    e6ee:	99 81       	ldd	r25, Y+1	; 0x01
    e6f0:	aa 81       	ldd	r26, Y+2	; 0x02
    e6f2:	bb 81       	ldd	r27, Y+3	; 0x03
    e6f4:	c1 55       	subi	r28, 0x51	; 81
    e6f6:	d2 40       	sbci	r29, 0x02	; 2
    e6f8:	84 0f       	add	r24, r20
    e6fa:	95 1f       	adc	r25, r21
    e6fc:	a6 1f       	adc	r26, r22
    e6fe:	b7 1f       	adc	r27, r23
    e700:	cf 5a       	subi	r28, 0xAF	; 175
    e702:	dd 4f       	sbci	r29, 0xFD	; 253
    e704:	88 83       	st	Y, r24
    e706:	99 83       	std	Y+1, r25	; 0x01
    e708:	aa 83       	std	Y+2, r26	; 0x02
    e70a:	bb 83       	std	Y+3, r27	; 0x03
    e70c:	c1 55       	subi	r28, 0x51	; 81
    e70e:	d2 40       	sbci	r29, 0x02	; 2
        }
        fatfs_filinfo_list(&fno);
    e710:	ce 01       	movw	r24, r28
    e712:	0c 96       	adiw	r24, 0x0c	; 12
    e714:	f6 de       	rcall	.-532    	; 0xe502 <fatfs_filinfo_list>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e716:	cc cf       	rjmp	.-104    	; 0xe6b0 <fatfs_ls+0x7e>
	f_closedir(&dirs);
    e718:	ce 01       	movw	r24, r28
    e71a:	8d 5d       	subi	r24, 0xDD	; 221
    e71c:	9d 4f       	sbci	r25, 0xFD	; 253
    e71e:	0e 94 3d 63 	call	0xc67a	; 0xc67a <f_closedir>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e722:	ed b7       	in	r30, 0x3d	; 61
    e724:	fe b7       	in	r31, 0x3e	; 62
    e726:	b3 86       	std	Z+11, r11	; 0x0b
    e728:	a2 86       	std	Z+10, r10	; 0x0a
    e72a:	cf 5a       	subi	r28, 0xAF	; 175
    e72c:	dd 4f       	sbci	r29, 0xFD	; 253
    e72e:	88 81       	ld	r24, Y
    e730:	99 81       	ldd	r25, Y+1	; 0x01
    e732:	aa 81       	ldd	r26, Y+2	; 0x02
    e734:	bb 81       	ldd	r27, Y+3	; 0x03
    e736:	c1 55       	subi	r28, 0x51	; 81
    e738:	d2 40       	sbci	r29, 0x02	; 2
    e73a:	86 83       	std	Z+6, r24	; 0x06
    e73c:	97 83       	std	Z+7, r25	; 0x07
    e73e:	a0 87       	std	Z+8, r26	; 0x08
    e740:	b1 87       	std	Z+9, r27	; 0x09
    e742:	d5 82       	std	Z+5, r13	; 0x05
    e744:	c4 82       	std	Z+4, r12	; 0x04
    e746:	88 eb       	ldi	r24, 0xB8	; 184
    e748:	9a e0       	ldi	r25, 0x0A	; 10
    e74a:	a0 e0       	ldi	r26, 0x00	; 0
    e74c:	81 83       	std	Z+1, r24	; 0x01
    e74e:	92 83       	std	Z+2, r25	; 0x02
    e750:	a3 83       	std	Z+3, r26	; 0x03
    e752:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e756:	ae 01       	movw	r20, r28
    e758:	4b 5a       	subi	r20, 0xAB	; 171
    e75a:	5d 4f       	sbci	r21, 0xFD	; 253
    e75c:	be 01       	movw	r22, r28
    e75e:	6f 5a       	subi	r22, 0xAF	; 175
    e760:	7d 4f       	sbci	r23, 0xFD	; 253
    e762:	c8 01       	movw	r24, r16
    e764:	0e 94 d4 63 	call	0xc7a8	; 0xc7a8 <f_getfree>
    e768:	89 2b       	or	r24, r25
    e76a:	31 f5       	brne	.+76     	; 0xe7b8 <fatfs_ls+0x186>
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e76c:	cb 5a       	subi	r28, 0xAB	; 171
    e76e:	dd 4f       	sbci	r29, 0xFD	; 253
    e770:	e8 81       	ld	r30, Y
    e772:	f9 81       	ldd	r31, Y+1	; 0x01
    e774:	c5 55       	subi	r28, 0x55	; 85
    e776:	d2 40       	sbci	r29, 0x02	; 2
    e778:	a1 85       	ldd	r26, Z+9	; 0x09
    e77a:	b2 85       	ldd	r27, Z+10	; 0x0a
    e77c:	cf 5a       	subi	r28, 0xAF	; 175
    e77e:	dd 4f       	sbci	r29, 0xFD	; 253
    e780:	28 81       	ld	r18, Y
    e782:	39 81       	ldd	r19, Y+1	; 0x01
    e784:	4a 81       	ldd	r20, Y+2	; 0x02
    e786:	5b 81       	ldd	r21, Y+3	; 0x03
    e788:	c1 55       	subi	r28, 0x51	; 81
    e78a:	d2 40       	sbci	r29, 0x02	; 2
    e78c:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__muluhisi3>
    e790:	22 e0       	ldi	r18, 0x02	; 2
    e792:	30 e0       	ldi	r19, 0x00	; 0
    e794:	40 e0       	ldi	r20, 0x00	; 0
    e796:	50 e0       	ldi	r21, 0x00	; 0
    e798:	0e 94 1b e6 	call	0x1cc36	; 0x1cc36 <__divmodsi4>
    e79c:	ed b7       	in	r30, 0x3d	; 61
    e79e:	fe b7       	in	r31, 0x3e	; 62
    e7a0:	24 83       	std	Z+4, r18	; 0x04
    e7a2:	35 83       	std	Z+5, r19	; 0x05
    e7a4:	46 83       	std	Z+6, r20	; 0x06
    e7a6:	57 83       	std	Z+7, r21	; 0x07
    e7a8:	83 ea       	ldi	r24, 0xA3	; 163
    e7aa:	9a e0       	ldi	r25, 0x0A	; 10
    e7ac:	a0 e0       	ldi	r26, 0x00	; 0
    e7ae:	81 83       	std	Z+1, r24	; 0x01
    e7b0:	92 83       	std	Z+2, r25	; 0x02
    e7b2:	a3 83       	std	Z+3, r26	; 0x03
    e7b4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
	if(res)
    e7b8:	e1 14       	cp	r14, r1
    e7ba:	f1 04       	cpc	r15, r1
    e7bc:	31 f4       	brne	.+12     	; 0xe7ca <fatfs_ls+0x198>
		return(-1);
	return(1);
    e7be:	81 e0       	ldi	r24, 0x01	; 1
    e7c0:	90 e0       	ldi	r25, 0x00	; 0
    e7c2:	05 c0       	rjmp	.+10     	; 0xe7ce <fatfs_ls+0x19c>
    printf("Listing:[%s]\n",buff);

    res = f_opendir(&dirs, buff);
    if (res != FR_OK) 
	{ 
		return(0); 
    e7c4:	80 e0       	ldi	r24, 0x00	; 0
    e7c6:	90 e0       	ldi	r25, 0x00	; 0
    e7c8:	02 c0       	rjmp	.+4      	; 0xe7ce <fatfs_ls+0x19c>
	f_closedir(&dirs);
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
	if(res)
		return(-1);
    e7ca:	8f ef       	ldi	r24, 0xFF	; 255
    e7cc:	9f ef       	ldi	r25, 0xFF	; 255
	return(1);
}
    e7ce:	ca 5a       	subi	r28, 0xAA	; 170
    e7d0:	dd 4f       	sbci	r29, 0xFD	; 253
    e7d2:	ea e0       	ldi	r30, 0x0A	; 10
    e7d4:	0c 94 8a e6 	jmp	0x1cd14	; 0x1cd14 <__epilogue_restores__+0x10>

0000e7d8 <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e7d8:	ef 92       	push	r14
    e7da:	ff 92       	push	r15
    e7dc:	0f 93       	push	r16
    e7de:	1f 93       	push	r17
    e7e0:	cf 93       	push	r28
    e7e2:	df 93       	push	r29
    e7e4:	00 d0       	rcall	.+0      	; 0xe7e6 <fatfs_tests+0xe>
    e7e6:	1f 92       	push	r1
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind];
    e7e8:	fb 01       	movw	r30, r22
    e7ea:	20 81       	ld	r18, Z
    e7ec:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    e7ee:	21 15       	cp	r18, r1
    e7f0:	31 05       	cpc	r19, r1
    e7f2:	19 f4       	brne	.+6      	; 0xe7fa <fatfs_tests+0x22>
        return(0);
    e7f4:	80 e0       	ldi	r24, 0x00	; 0
    e7f6:	90 e0       	ldi	r25, 0x00	; 0
    e7f8:	5a c0       	rjmp	.+180    	; 0xe8ae <fatfs_tests+0xd6>
    e7fa:	eb 01       	movw	r28, r22
    e7fc:	7c 01       	movw	r14, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCHI(ptr,"fatfs") )
    e7fe:	62 ed       	ldi	r22, 0xD2	; 210
    e800:	78 e0       	ldi	r23, 0x08	; 8
    e802:	c9 01       	movw	r24, r18
    e804:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
    e808:	89 2b       	or	r24, r25
    e80a:	a1 f3       	breq	.-24     	; 0xe7f4 <fatfs_tests+0x1c>
    {
        ptr = argv[++ind];
    e80c:	0a 81       	ldd	r16, Y+2	; 0x02
    e80e:	1b 81       	ldd	r17, Y+3	; 0x03
        if ( !ptr || MATCHI(ptr,"help") )
    e810:	01 15       	cp	r16, r1
    e812:	11 05       	cpc	r17, r1
    e814:	59 f4       	brne	.+22     	; 0xe82c <fatfs_tests+0x54>
MEMSPACE
void fatfs_help( int full)
{
    if(full)
    {
        printf(
    e816:	8f ef       	ldi	r24, 0xFF	; 255
    e818:	9a e0       	ldi	r25, 0x0A	; 10
    e81a:	a0 e0       	ldi	r26, 0x00	; 0
    e81c:	ed b7       	in	r30, 0x3d	; 61
    e81e:	fe b7       	in	r31, 0x3e	; 62
    e820:	81 83       	std	Z+1, r24	; 0x01
    e822:	92 83       	std	Z+2, r25	; 0x02
    e824:	a3 83       	std	Z+3, r26	; 0x03
    e826:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    e82a:	2f c0       	rjmp	.+94     	; 0xe88a <fatfs_tests+0xb2>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCHI(ptr,"fatfs") )
    {
        ptr = argv[++ind];
        if ( !ptr || MATCHI(ptr,"help") )
    e82c:	62 e6       	ldi	r22, 0x62	; 98
    e82e:	76 e1       	ldi	r23, 0x16	; 22
    e830:	c8 01       	movw	r24, r16
    e832:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
    e836:	89 2b       	or	r24, r25
    e838:	71 f7       	brne	.-36     	; 0xe816 <fatfs_tests+0x3e>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    e83a:	68 ed       	ldi	r22, 0xD8	; 216
    e83c:	78 e0       	ldi	r23, 0x08	; 8
    e83e:	c8 01       	movw	r24, r16
    e840:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
    e844:	89 2b       	or	r24, r25
    e846:	21 f0       	breq	.+8      	; 0xe850 <fatfs_tests+0x78>
    e848:	24 96       	adiw	r28, 0x04	; 4
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e84a:	02 e0       	ldi	r16, 0x02	; 2
    e84c:	10 e0       	ldi	r17, 0x00	; 0
    e84e:	0f c0       	rjmp	.+30     	; 0xe86e <fatfs_tests+0x96>
    {
        return(0);
    }
#endif

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    e850:	66 ec       	ldi	r22, 0xC6	; 198
    e852:	7b e0       	ldi	r23, 0x0B	; 11
    e854:	c8 01       	movw	r24, r16
    e856:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
    e85a:	89 2b       	or	r24, r25
    e85c:	a9 f7       	brne	.-22     	; 0xe848 <fatfs_tests+0x70>
    e85e:	18 c0       	rjmp	.+48     	; 0xe890 <fatfs_tests+0xb8>
    {
        int i;
        int args = 0;
        for(i=ind+1;i<argc;++i)
        {
            if(fatfs_ls(argv[i]) == 0)
    e860:	89 91       	ld	r24, Y+
    e862:	99 91       	ld	r25, Y+
    e864:	e6 de       	rcall	.-564    	; 0xe632 <fatfs_ls>
    e866:	89 2b       	or	r24, r25
    e868:	69 f0       	breq	.+26     	; 0xe884 <fatfs_tests+0xac>

    if (MATCHI(ptr,"ls") || MATCHI(ptr,"dir") )
    {
        int i;
        int args = 0;
        for(i=ind+1;i<argc;++i)
    e86a:	0f 5f       	subi	r16, 0xFF	; 255
    e86c:	1f 4f       	sbci	r17, 0xFF	; 255
    e86e:	0e 15       	cp	r16, r14
    e870:	1f 05       	cpc	r17, r15
    e872:	b4 f3       	brlt	.-20     	; 0xe860 <fatfs_tests+0x88>
			{
				return(-1);
			}
            ++args;
        }
        if(!args)
    e874:	02 30       	cpi	r16, 0x02	; 2
    e876:	11 05       	cpc	r17, r1
    e878:	41 f4       	brne	.+16     	; 0xe88a <fatfs_tests+0xb2>
        {
            if(fatfs_ls("") == 0)
    e87a:	8e e0       	ldi	r24, 0x0E	; 14
    e87c:	9c e0       	ldi	r25, 0x0C	; 12
    e87e:	d9 de       	rcall	.-590    	; 0xe632 <fatfs_ls>
        }
        return(1);
    }
    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    {
        if(fatfs_status("/")== 0)
    e880:	89 2b       	or	r24, r25
    e882:	19 f4       	brne	.+6      	; 0xe88a <fatfs_tests+0xb2>
        int args = 0;
        for(i=ind+1;i<argc;++i)
        {
            if(fatfs_ls(argv[i]) == 0)
			{
				return(-1);
    e884:	8f ef       	ldi	r24, 0xFF	; 255
    e886:	9f ef       	ldi	r25, 0xFF	; 255
    e888:	12 c0       	rjmp	.+36     	; 0xe8ae <fatfs_tests+0xd6>
            if(fatfs_ls("") == 0)
			{
				return(-1);
			}
        }
        return(1);
    e88a:	81 e0       	ldi	r24, 0x01	; 1
    e88c:	90 e0       	ldi	r25, 0x00	; 0
    e88e:	0f c0       	rjmp	.+30     	; 0xe8ae <fatfs_tests+0xd6>
    }
    else if (MATCHARGS(ptr,"status", (ind + 1), argc))
    e890:	97 01       	movw	r18, r14
    e892:	42 e0       	ldi	r20, 0x02	; 2
    e894:	50 e0       	ldi	r21, 0x00	; 0
    e896:	6b ed       	ldi	r22, 0xDB	; 219
    e898:	78 e0       	ldi	r23, 0x08	; 8
    e89a:	c8 01       	movw	r24, r16
    e89c:	0e 94 06 32 	call	0x640c	; 0x640c <MATCHARGS>
    e8a0:	89 2b       	or	r24, r25
    e8a2:	09 f4       	brne	.+2      	; 0xe8a6 <fatfs_tests+0xce>
    e8a4:	a7 cf       	rjmp	.-178    	; 0xe7f4 <fatfs_tests+0x1c>
    {
        if(fatfs_status("/")== 0)
    e8a6:	86 ea       	ldi	r24, 0xA6	; 166
    e8a8:	98 e0       	ldi	r25, 0x08	; 8
    e8aa:	55 dc       	rcall	.-1878   	; 0xe156 <fatfs_status>
    e8ac:	e9 cf       	rjmp	.-46     	; 0xe880 <fatfs_tests+0xa8>
        return(1);
    }
#endif // FATFS_UTILS_FULL

    return(0);
}
    e8ae:	cd b7       	in	r28, 0x3d	; 61
    e8b0:	de b7       	in	r29, 0x3e	; 62
    e8b2:	23 96       	adiw	r28, 0x03	; 3
    e8b4:	e6 e0       	ldi	r30, 0x06	; 6
    e8b6:	0c 94 8e e6 	jmp	0x1cd1c	; 0x1cd1c <__epilogue_restores__+0x18>

0000e8ba <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    e8ba:	8f 92       	push	r8
    e8bc:	9f 92       	push	r9
    e8be:	af 92       	push	r10
    e8c0:	bf 92       	push	r11
    e8c2:	ef 92       	push	r14
    e8c4:	ff 92       	push	r15
    e8c6:	0f 93       	push	r16
    e8c8:	1f 93       	push	r17
    e8ca:	cf 93       	push	r28
    e8cc:	df 93       	push	r29
    e8ce:	00 d0       	rcall	.+0      	; 0xe8d0 <fatfs_getc+0x16>
    e8d0:	1f 92       	push	r1
    e8d2:	cd b7       	in	r28, 0x3d	; 61
    e8d4:	de b7       	in	r29, 0x3e	; 62
    e8d6:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    e8da:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    e8de:	00 97       	sbiw	r24, 0x00	; 0
    e8e0:	39 f4       	brne	.+14     	; 0xe8f0 <fatfs_getc+0x36>
    e8e2:	89 e0       	ldi	r24, 0x09	; 9
    e8e4:	90 e0       	ldi	r25, 0x00	; 0
    e8e6:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    e8ea:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    e8ee:	2f c0       	rjmp	.+94     	; 0xe94e <fatfs_getc+0x94>
    e8f0:	fc 01       	movw	r30, r24
    e8f2:	e4 84       	ldd	r14, Z+12	; 0x0c
    e8f4:	f5 84       	ldd	r15, Z+13	; 0x0d
    e8f6:	e1 14       	cp	r14, r1
    e8f8:	f1 04       	cpc	r15, r1
    e8fa:	99 f3       	breq	.-26     	; 0xe8e2 <fatfs_getc+0x28>
    e8fc:	8c 01       	movw	r16, r24
    e8fe:	9e 01       	movw	r18, r28
    e900:	2f 5f       	subi	r18, 0xFF	; 255
    e902:	3f 4f       	sbci	r19, 0xFF	; 255
    e904:	41 e0       	ldi	r20, 0x01	; 1
    e906:	50 e0       	ldi	r21, 0x00	; 0
    e908:	be 01       	movw	r22, r28
    e90a:	6d 5f       	subi	r22, 0xFD	; 253
    e90c:	7f 4f       	sbci	r23, 0xFF	; 255
    e90e:	c7 01       	movw	r24, r14
    e910:	0e 94 05 5b 	call	0xb60a	; 0xb60a <f_read>
    e914:	00 97       	sbiw	r24, 0x00	; 0
    e916:	31 f4       	brne	.+12     	; 0xe924 <fatfs_getc+0x6a>
    e918:	29 81       	ldd	r18, Y+1	; 0x01
    e91a:	3a 81       	ldd	r19, Y+2	; 0x02
    e91c:	21 30       	cpi	r18, 0x01	; 1
    e91e:	31 05       	cpc	r19, r1
    e920:	c9 f0       	breq	.+50     	; 0xe954 <fatfs_getc+0x9a>
    e922:	03 c0       	rjmp	.+6      	; 0xe92a <fatfs_getc+0x70>
    e924:	84 31       	cpi	r24, 0x14	; 20
    e926:	91 05       	cpc	r25, r1
    e928:	40 f4       	brcc	.+16     	; 0xe93a <fatfs_getc+0x80>
    e92a:	fc 01       	movw	r30, r24
    e92c:	ec 56       	subi	r30, 0x6C	; 108
    e92e:	f4 4f       	sbci	r31, 0xF4	; 244
    e930:	80 81       	ld	r24, Z
    e932:	08 2e       	mov	r0, r24
    e934:	00 0c       	add	r0, r0
    e936:	99 0b       	sbc	r25, r25
    e938:	02 c0       	rjmp	.+4      	; 0xe93e <fatfs_getc+0x84>
    e93a:	83 e2       	ldi	r24, 0x23	; 35
    e93c:	90 e0       	ldi	r25, 0x00	; 0
    e93e:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    e942:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    e946:	f8 01       	movw	r30, r16
    e948:	83 81       	ldd	r24, Z+3	; 0x03
    e94a:	80 62       	ori	r24, 0x20	; 32
    e94c:	83 83       	std	Z+3, r24	; 0x03
    e94e:	8f ef       	ldi	r24, 0xFF	; 255
    e950:	9f ef       	ldi	r25, 0xFF	; 255
    e952:	28 c0       	rjmp	.+80     	; 0xe9a4 <fatfs_getc+0xea>
    e954:	8b 81       	ldd	r24, Y+3	; 0x03
    e956:	8d 30       	cpi	r24, 0x0D	; 13
    e958:	01 f5       	brne	.+64     	; 0xe99a <fatfs_getc+0xe0>
    e95a:	f7 01       	movw	r30, r14
    e95c:	80 88       	ldd	r8, Z+16	; 0x10
    e95e:	91 88       	ldd	r9, Z+17	; 0x11
    e960:	a2 88       	ldd	r10, Z+18	; 0x12
    e962:	b3 88       	ldd	r11, Z+19	; 0x13
    e964:	9e 01       	movw	r18, r28
    e966:	2f 5f       	subi	r18, 0xFF	; 255
    e968:	3f 4f       	sbci	r19, 0xFF	; 255
    e96a:	41 e0       	ldi	r20, 0x01	; 1
    e96c:	50 e0       	ldi	r21, 0x00	; 0
    e96e:	be 01       	movw	r22, r28
    e970:	6d 5f       	subi	r22, 0xFD	; 253
    e972:	7f 4f       	sbci	r23, 0xFF	; 255
    e974:	c7 01       	movw	r24, r14
    e976:	0e 94 05 5b 	call	0xb60a	; 0xb60a <f_read>
    e97a:	89 2b       	or	r24, r25
    e97c:	89 f4       	brne	.+34     	; 0xe9a0 <fatfs_getc+0xe6>
    e97e:	89 81       	ldd	r24, Y+1	; 0x01
    e980:	9a 81       	ldd	r25, Y+2	; 0x02
    e982:	01 97       	sbiw	r24, 0x01	; 1
    e984:	69 f4       	brne	.+26     	; 0xe9a0 <fatfs_getc+0xe6>
    e986:	8b 81       	ldd	r24, Y+3	; 0x03
    e988:	8a 30       	cpi	r24, 0x0A	; 10
    e98a:	31 f0       	breq	.+12     	; 0xe998 <fatfs_getc+0xde>
    e98c:	b5 01       	movw	r22, r10
    e98e:	a4 01       	movw	r20, r8
    e990:	c7 01       	movw	r24, r14
    e992:	0e 94 11 60 	call	0xc022	; 0xc022 <f_lseek>
    e996:	04 c0       	rjmp	.+8      	; 0xe9a0 <fatfs_getc+0xe6>
    e998:	8b 83       	std	Y+3, r24	; 0x03
    e99a:	8b 81       	ldd	r24, Y+3	; 0x03
    e99c:	90 e0       	ldi	r25, 0x00	; 0
    e99e:	02 c0       	rjmp	.+4      	; 0xe9a4 <fatfs_getc+0xea>
    e9a0:	8a e0       	ldi	r24, 0x0A	; 10
    e9a2:	90 e0       	ldi	r25, 0x00	; 0
    e9a4:	0f 90       	pop	r0
    e9a6:	0f 90       	pop	r0
    e9a8:	0f 90       	pop	r0
    e9aa:	df 91       	pop	r29
    e9ac:	cf 91       	pop	r28
    e9ae:	1f 91       	pop	r17
    e9b0:	0f 91       	pop	r16
    e9b2:	ff 90       	pop	r15
    e9b4:	ef 90       	pop	r14
    e9b6:	bf 90       	pop	r11
    e9b8:	af 90       	pop	r10
    e9ba:	9f 90       	pop	r9
    e9bc:	8f 90       	pop	r8
    e9be:	08 95       	ret

0000e9c0 <fatfs_putc>:
    e9c0:	a3 e0       	ldi	r26, 0x03	; 3
    e9c2:	b0 e0       	ldi	r27, 0x00	; 0
    e9c4:	e6 ee       	ldi	r30, 0xE6	; 230
    e9c6:	f4 e7       	ldi	r31, 0x74	; 116
    e9c8:	0c 94 74 e6 	jmp	0x1cce8	; 0x1cce8 <__prologue_saves__+0x1c>
    e9cc:	8b 83       	std	Y+3, r24	; 0x03
    e9ce:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    e9d2:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    e9d6:	61 15       	cp	r22, r1
    e9d8:	71 05       	cpc	r23, r1
    e9da:	39 f4       	brne	.+14     	; 0xe9ea <fatfs_putc+0x2a>
    e9dc:	89 e0       	ldi	r24, 0x09	; 9
    e9de:	90 e0       	ldi	r25, 0x00	; 0
    e9e0:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    e9e4:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    e9e8:	2d c0       	rjmp	.+90     	; 0xea44 <fatfs_putc+0x84>
    e9ea:	fb 01       	movw	r30, r22
    e9ec:	84 85       	ldd	r24, Z+12	; 0x0c
    e9ee:	95 85       	ldd	r25, Z+13	; 0x0d
    e9f0:	00 97       	sbiw	r24, 0x00	; 0
    e9f2:	a1 f3       	breq	.-24     	; 0xe9dc <fatfs_putc+0x1c>
    e9f4:	8b 01       	movw	r16, r22
    e9f6:	9e 01       	movw	r18, r28
    e9f8:	2f 5f       	subi	r18, 0xFF	; 255
    e9fa:	3f 4f       	sbci	r19, 0xFF	; 255
    e9fc:	41 e0       	ldi	r20, 0x01	; 1
    e9fe:	50 e0       	ldi	r21, 0x00	; 0
    ea00:	be 01       	movw	r22, r28
    ea02:	6d 5f       	subi	r22, 0xFD	; 253
    ea04:	7f 4f       	sbci	r23, 0xFF	; 255
    ea06:	0e 94 50 5c 	call	0xb8a0	; 0xb8a0 <f_write>
    ea0a:	00 97       	sbiw	r24, 0x00	; 0
    ea0c:	31 f4       	brne	.+12     	; 0xea1a <fatfs_putc+0x5a>
    ea0e:	29 81       	ldd	r18, Y+1	; 0x01
    ea10:	3a 81       	ldd	r19, Y+2	; 0x02
    ea12:	21 30       	cpi	r18, 0x01	; 1
    ea14:	31 05       	cpc	r19, r1
    ea16:	c9 f0       	breq	.+50     	; 0xea4a <fatfs_putc+0x8a>
    ea18:	03 c0       	rjmp	.+6      	; 0xea20 <fatfs_putc+0x60>
    ea1a:	84 31       	cpi	r24, 0x14	; 20
    ea1c:	91 05       	cpc	r25, r1
    ea1e:	40 f4       	brcc	.+16     	; 0xea30 <fatfs_putc+0x70>
    ea20:	fc 01       	movw	r30, r24
    ea22:	ec 56       	subi	r30, 0x6C	; 108
    ea24:	f4 4f       	sbci	r31, 0xF4	; 244
    ea26:	80 81       	ld	r24, Z
    ea28:	08 2e       	mov	r0, r24
    ea2a:	00 0c       	add	r0, r0
    ea2c:	99 0b       	sbc	r25, r25
    ea2e:	02 c0       	rjmp	.+4      	; 0xea34 <fatfs_putc+0x74>
    ea30:	83 e2       	ldi	r24, 0x23	; 35
    ea32:	90 e0       	ldi	r25, 0x00	; 0
    ea34:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    ea38:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    ea3c:	f8 01       	movw	r30, r16
    ea3e:	83 81       	ldd	r24, Z+3	; 0x03
    ea40:	80 62       	ori	r24, 0x20	; 32
    ea42:	83 83       	std	Z+3, r24	; 0x03
    ea44:	8f ef       	ldi	r24, 0xFF	; 255
    ea46:	9f ef       	ldi	r25, 0xFF	; 255
    ea48:	02 c0       	rjmp	.+4      	; 0xea4e <fatfs_putc+0x8e>
    ea4a:	8b 81       	ldd	r24, Y+3	; 0x03
    ea4c:	90 e0       	ldi	r25, 0x00	; 0
    ea4e:	23 96       	adiw	r28, 0x03	; 3
    ea50:	e4 e0       	ldi	r30, 0x04	; 4
    ea52:	0c 94 90 e6 	jmp	0x1cd20	; 0x1cd20 <__epilogue_restores__+0x1c>

0000ea56 <fgetc>:
    ea56:	cf 93       	push	r28
    ea58:	df 93       	push	r29
    ea5a:	00 d0       	rcall	.+0      	; 0xea5c <fgetc+0x6>
    ea5c:	1f 92       	push	r1
    ea5e:	ec 01       	movw	r28, r24
    ea60:	00 97       	sbiw	r24, 0x00	; 0
    ea62:	39 f4       	brne	.+14     	; 0xea72 <fgetc+0x1c>
    ea64:	89 e0       	ldi	r24, 0x09	; 9
    ea66:	90 e0       	ldi	r25, 0x00	; 0
    ea68:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    ea6c:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    ea70:	40 c0       	rjmp	.+128    	; 0xeaf2 <fgetc+0x9c>
    ea72:	2b 81       	ldd	r18, Y+3	; 0x03
    ea74:	20 ff       	sbrs	r18, 0
    ea76:	3d c0       	rjmp	.+122    	; 0xeaf2 <fgetc+0x9c>
    ea78:	26 ff       	sbrs	r18, 6
    ea7a:	0a c0       	rjmp	.+20     	; 0xea90 <fgetc+0x3a>
    ea7c:	2f 7b       	andi	r18, 0xBF	; 191
    ea7e:	2b 83       	std	Y+3, r18	; 0x03
    ea80:	8e 81       	ldd	r24, Y+6	; 0x06
    ea82:	9f 81       	ldd	r25, Y+7	; 0x07
    ea84:	01 96       	adiw	r24, 0x01	; 1
    ea86:	9f 83       	std	Y+7, r25	; 0x07
    ea88:	8e 83       	std	Y+6, r24	; 0x06
    ea8a:	8a 81       	ldd	r24, Y+2	; 0x02
    ea8c:	90 e0       	ldi	r25, 0x00	; 0
    ea8e:	33 c0       	rjmp	.+102    	; 0xeaf6 <fgetc+0xa0>
    ea90:	22 ff       	sbrs	r18, 2
    ea92:	0d c0       	rjmp	.+26     	; 0xeaae <fgetc+0x58>
    ea94:	e8 81       	ld	r30, Y
    ea96:	f9 81       	ldd	r31, Y+1	; 0x01
    ea98:	80 81       	ld	r24, Z
    ea9a:	90 e0       	ldi	r25, 0x00	; 0
    ea9c:	00 97       	sbiw	r24, 0x00	; 0
    ea9e:	19 f4       	brne	.+6      	; 0xeaa6 <fgetc+0x50>
    eaa0:	20 62       	ori	r18, 0x20	; 32
    eaa2:	2b 83       	std	Y+3, r18	; 0x03
    eaa4:	26 c0       	rjmp	.+76     	; 0xeaf2 <fgetc+0x9c>
    eaa6:	31 96       	adiw	r30, 0x01	; 1
    eaa8:	f9 83       	std	Y+1, r31	; 0x01
    eaaa:	e8 83       	st	Y, r30
    eaac:	1b c0       	rjmp	.+54     	; 0xeae4 <fgetc+0x8e>
    eaae:	ea 85       	ldd	r30, Y+10	; 0x0a
    eab0:	fb 85       	ldd	r31, Y+11	; 0x0b
    eab2:	30 97       	sbiw	r30, 0x00	; 0
    eab4:	59 f4       	brne	.+22     	; 0xeacc <fgetc+0x76>
    eab6:	8e e8       	ldi	r24, 0x8E	; 142
    eab8:	9b e0       	ldi	r25, 0x0B	; 11
    eaba:	a0 e0       	ldi	r26, 0x00	; 0
    eabc:	ed b7       	in	r30, 0x3d	; 61
    eabe:	fe b7       	in	r31, 0x3e	; 62
    eac0:	81 83       	std	Z+1, r24	; 0x01
    eac2:	92 83       	std	Z+2, r25	; 0x02
    eac4:	a3 83       	std	Z+3, r26	; 0x03
    eac6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    eaca:	13 c0       	rjmp	.+38     	; 0xeaf2 <fgetc+0x9c>
    eacc:	09 95       	icall
    eace:	97 ff       	sbrs	r25, 7
    ead0:	09 c0       	rjmp	.+18     	; 0xeae4 <fgetc+0x8e>
    ead2:	2b 81       	ldd	r18, Y+3	; 0x03
    ead4:	02 96       	adiw	r24, 0x02	; 2
    ead6:	11 f0       	breq	.+4      	; 0xeadc <fgetc+0x86>
    ead8:	80 e2       	ldi	r24, 0x20	; 32
    eada:	01 c0       	rjmp	.+2      	; 0xeade <fgetc+0x88>
    eadc:	80 e1       	ldi	r24, 0x10	; 16
    eade:	82 2b       	or	r24, r18
    eae0:	8b 83       	std	Y+3, r24	; 0x03
    eae2:	07 c0       	rjmp	.+14     	; 0xeaf2 <fgetc+0x9c>
    eae4:	2e 81       	ldd	r18, Y+6	; 0x06
    eae6:	3f 81       	ldd	r19, Y+7	; 0x07
    eae8:	2f 5f       	subi	r18, 0xFF	; 255
    eaea:	3f 4f       	sbci	r19, 0xFF	; 255
    eaec:	3f 83       	std	Y+7, r19	; 0x07
    eaee:	2e 83       	std	Y+6, r18	; 0x06
    eaf0:	02 c0       	rjmp	.+4      	; 0xeaf6 <fgetc+0xa0>
    eaf2:	8f ef       	ldi	r24, 0xFF	; 255
    eaf4:	9f ef       	ldi	r25, 0xFF	; 255
    eaf6:	cd b7       	in	r28, 0x3d	; 61
    eaf8:	de b7       	in	r29, 0x3e	; 62
    eafa:	23 96       	adiw	r28, 0x03	; 3
    eafc:	e2 e0       	ldi	r30, 0x02	; 2
    eafe:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

0000eb02 <fputc>:
    eb02:	cf 93       	push	r28
    eb04:	df 93       	push	r29
    eb06:	00 d0       	rcall	.+0      	; 0xeb08 <fputc+0x6>
    eb08:	1f 92       	push	r1
    eb0a:	eb 01       	movw	r28, r22
    eb0c:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    eb10:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    eb14:	20 91 b7 1c 	lds	r18, 0x1CB7	; 0x801cb7 <__iob+0x2>
    eb18:	30 91 b8 1c 	lds	r19, 0x1CB8	; 0x801cb8 <__iob+0x3>
    eb1c:	62 17       	cp	r22, r18
    eb1e:	73 07       	cpc	r23, r19
    eb20:	49 f0       	breq	.+18     	; 0xeb34 <fputc+0x32>
    eb22:	20 91 b9 1c 	lds	r18, 0x1CB9	; 0x801cb9 <__iob+0x4>
    eb26:	30 91 ba 1c 	lds	r19, 0x1CBA	; 0x801cba <__iob+0x5>
    eb2a:	62 17       	cp	r22, r18
    eb2c:	73 07       	cpc	r23, r19
    eb2e:	11 f0       	breq	.+4      	; 0xeb34 <fputc+0x32>
    eb30:	47 df       	rcall	.-370    	; 0xe9c0 <fatfs_putc>
    eb32:	33 c0       	rjmp	.+102    	; 0xeb9a <fputc+0x98>
    eb34:	2b 81       	ldd	r18, Y+3	; 0x03
    eb36:	21 ff       	sbrs	r18, 1
    eb38:	2e c0       	rjmp	.+92     	; 0xeb96 <fputc+0x94>
    eb3a:	22 ff       	sbrs	r18, 2
    eb3c:	10 c0       	rjmp	.+32     	; 0xeb5e <fputc+0x5c>
    eb3e:	4e 81       	ldd	r20, Y+6	; 0x06
    eb40:	5f 81       	ldd	r21, Y+7	; 0x07
    eb42:	2c 81       	ldd	r18, Y+4	; 0x04
    eb44:	3d 81       	ldd	r19, Y+5	; 0x05
    eb46:	42 17       	cp	r20, r18
    eb48:	53 07       	cpc	r21, r19
    eb4a:	f4 f4       	brge	.+60     	; 0xeb88 <fputc+0x86>
    eb4c:	e8 81       	ld	r30, Y
    eb4e:	f9 81       	ldd	r31, Y+1	; 0x01
    eb50:	9f 01       	movw	r18, r30
    eb52:	2f 5f       	subi	r18, 0xFF	; 255
    eb54:	3f 4f       	sbci	r19, 0xFF	; 255
    eb56:	39 83       	std	Y+1, r19	; 0x01
    eb58:	28 83       	st	Y, r18
    eb5a:	80 83       	st	Z, r24
    eb5c:	15 c0       	rjmp	.+42     	; 0xeb88 <fputc+0x86>
    eb5e:	e8 85       	ldd	r30, Y+8	; 0x08
    eb60:	f9 85       	ldd	r31, Y+9	; 0x09
    eb62:	30 97       	sbiw	r30, 0x00	; 0
    eb64:	59 f4       	brne	.+22     	; 0xeb7c <fputc+0x7a>
    eb66:	86 e7       	ldi	r24, 0x76	; 118
    eb68:	9b e0       	ldi	r25, 0x0B	; 11
    eb6a:	a0 e0       	ldi	r26, 0x00	; 0
    eb6c:	ed b7       	in	r30, 0x3d	; 61
    eb6e:	fe b7       	in	r31, 0x3e	; 62
    eb70:	81 83       	std	Z+1, r24	; 0x01
    eb72:	92 83       	std	Z+2, r25	; 0x02
    eb74:	a3 83       	std	Z+3, r26	; 0x03
    eb76:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    eb7a:	0d c0       	rjmp	.+26     	; 0xeb96 <fputc+0x94>
    eb7c:	be 01       	movw	r22, r28
    eb7e:	09 95       	icall
    eb80:	8f 3f       	cpi	r24, 0xFF	; 255
    eb82:	ff ef       	ldi	r31, 0xFF	; 255
    eb84:	9f 07       	cpc	r25, r31
    eb86:	39 f0       	breq	.+14     	; 0xeb96 <fputc+0x94>
    eb88:	2e 81       	ldd	r18, Y+6	; 0x06
    eb8a:	3f 81       	ldd	r19, Y+7	; 0x07
    eb8c:	2f 5f       	subi	r18, 0xFF	; 255
    eb8e:	3f 4f       	sbci	r19, 0xFF	; 255
    eb90:	3f 83       	std	Y+7, r19	; 0x07
    eb92:	2e 83       	std	Y+6, r18	; 0x06
    eb94:	02 c0       	rjmp	.+4      	; 0xeb9a <fputc+0x98>
    eb96:	8f ef       	ldi	r24, 0xFF	; 255
    eb98:	9f ef       	ldi	r25, 0xFF	; 255
    eb9a:	cd b7       	in	r28, 0x3d	; 61
    eb9c:	de b7       	in	r29, 0x3e	; 62
    eb9e:	23 96       	adiw	r28, 0x03	; 3
    eba0:	e2 e0       	ldi	r30, 0x02	; 2
    eba2:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

0000eba6 <_fprintf_putc>:
    eba6:	fc 01       	movw	r30, r24
    eba8:	86 2f       	mov	r24, r22
    ebaa:	26 81       	ldd	r18, Z+6	; 0x06
    ebac:	37 81       	ldd	r19, Z+7	; 0x07
    ebae:	2f 5f       	subi	r18, 0xFF	; 255
    ebb0:	3f 4f       	sbci	r19, 0xFF	; 255
    ebb2:	37 83       	std	Z+7, r19	; 0x07
    ebb4:	26 83       	std	Z+6, r18	; 0x06
    ebb6:	62 81       	ldd	r22, Z+2	; 0x02
    ebb8:	73 81       	ldd	r23, Z+3	; 0x03
    ebba:	90 e0       	ldi	r25, 0x00	; 0
    ebbc:	a2 cf       	rjmp	.-188    	; 0xeb02 <fputc>
    ebbe:	08 95       	ret

0000ebc0 <getchar>:
    ebc0:	80 91 b5 1c 	lds	r24, 0x1CB5	; 0x801cb5 <__iob>
    ebc4:	90 91 b6 1c 	lds	r25, 0x1CB6	; 0x801cb6 <__iob+0x1>
    ebc8:	46 cf       	rjmp	.-372    	; 0xea56 <fgetc>
    ebca:	08 95       	ret

0000ebcc <putchar>:
    ebcc:	60 91 b7 1c 	lds	r22, 0x1CB7	; 0x801cb7 <__iob+0x2>
    ebd0:	70 91 b8 1c 	lds	r23, 0x1CB8	; 0x801cb8 <__iob+0x3>
    ebd4:	96 cf       	rjmp	.-212    	; 0xeb02 <fputc>
    ebd6:	08 95       	ret

0000ebd8 <fgets>:
    ebd8:	a0 e0       	ldi	r26, 0x00	; 0
    ebda:	b0 e0       	ldi	r27, 0x00	; 0
    ebdc:	e2 ef       	ldi	r30, 0xF2	; 242
    ebde:	f5 e7       	ldi	r31, 0x75	; 117
    ebe0:	0c 94 70 e6 	jmp	0x1cce0	; 0x1cce0 <__prologue_saves__+0x14>
    ebe4:	7c 01       	movw	r14, r24
    ebe6:	6a 01       	movw	r12, r20
    ebe8:	8b 01       	movw	r16, r22
    ebea:	c0 e0       	ldi	r28, 0x00	; 0
    ebec:	d0 e0       	ldi	r29, 0x00	; 0
    ebee:	01 15       	cp	r16, r1
    ebf0:	11 05       	cpc	r17, r1
    ebf2:	41 f0       	breq	.+16     	; 0xec04 <fgets+0x2c>
    ebf4:	c6 01       	movw	r24, r12
    ebf6:	2f df       	rcall	.-418    	; 0xea56 <fgetc>
    ebf8:	8f 3f       	cpi	r24, 0xFF	; 255
    ebfa:	2f ef       	ldi	r18, 0xFF	; 255
    ebfc:	92 07       	cpc	r25, r18
    ebfe:	39 f4       	brne	.+14     	; 0xec0e <fgets+0x36>
    ec00:	20 97       	sbiw	r28, 0x00	; 0
    ec02:	b9 f0       	breq	.+46     	; 0xec32 <fgets+0x5a>
    ec04:	ce 0d       	add	r28, r14
    ec06:	df 1d       	adc	r29, r15
    ec08:	18 82       	st	Y, r1
    ec0a:	c7 01       	movw	r24, r14
    ec0c:	14 c0       	rjmp	.+40     	; 0xec36 <fgets+0x5e>
    ec0e:	8a 30       	cpi	r24, 0x0A	; 10
    ec10:	91 05       	cpc	r25, r1
    ec12:	c1 f3       	breq	.-16     	; 0xec04 <fgets+0x2c>
    ec14:	88 30       	cpi	r24, 0x08	; 8
    ec16:	91 05       	cpc	r25, r1
    ec18:	21 f4       	brne	.+8      	; 0xec22 <fgets+0x4a>
    ec1a:	20 97       	sbiw	r28, 0x00	; 0
    ec1c:	39 f0       	breq	.+14     	; 0xec2c <fgets+0x54>
    ec1e:	21 97       	sbiw	r28, 0x01	; 1
    ec20:	05 c0       	rjmp	.+10     	; 0xec2c <fgets+0x54>
    ec22:	f7 01       	movw	r30, r14
    ec24:	ec 0f       	add	r30, r28
    ec26:	fd 1f       	adc	r31, r29
    ec28:	80 83       	st	Z, r24
    ec2a:	21 96       	adiw	r28, 0x01	; 1
    ec2c:	01 50       	subi	r16, 0x01	; 1
    ec2e:	11 09       	sbc	r17, r1
    ec30:	de cf       	rjmp	.-68     	; 0xebee <fgets+0x16>
    ec32:	80 e0       	ldi	r24, 0x00	; 0
    ec34:	90 e0       	ldi	r25, 0x00	; 0
    ec36:	cd b7       	in	r28, 0x3d	; 61
    ec38:	de b7       	in	r29, 0x3e	; 62
    ec3a:	e8 e0       	ldi	r30, 0x08	; 8
    ec3c:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__epilogue_restores__+0x14>

0000ec40 <fputs>:
    ec40:	0f 93       	push	r16
    ec42:	1f 93       	push	r17
    ec44:	cf 93       	push	r28
    ec46:	df 93       	push	r29
    ec48:	8b 01       	movw	r16, r22
    ec4a:	ec 01       	movw	r28, r24
    ec4c:	89 91       	ld	r24, Y+
    ec4e:	88 23       	and	r24, r24
    ec50:	41 f0       	breq	.+16     	; 0xec62 <fputs+0x22>
    ec52:	b8 01       	movw	r22, r16
    ec54:	90 e0       	ldi	r25, 0x00	; 0
    ec56:	55 df       	rcall	.-342    	; 0xeb02 <fputc>
    ec58:	8f 3f       	cpi	r24, 0xFF	; 255
    ec5a:	2f ef       	ldi	r18, 0xFF	; 255
    ec5c:	92 07       	cpc	r25, r18
    ec5e:	b1 f7       	brne	.-20     	; 0xec4c <fputs+0xc>
    ec60:	02 c0       	rjmp	.+4      	; 0xec66 <fputs+0x26>
    ec62:	80 e0       	ldi	r24, 0x00	; 0
    ec64:	90 e0       	ldi	r25, 0x00	; 0
    ec66:	df 91       	pop	r29
    ec68:	cf 91       	pop	r28
    ec6a:	1f 91       	pop	r17
    ec6c:	0f 91       	pop	r16
    ec6e:	08 95       	ret

0000ec70 <puts>:
    ec70:	cf 93       	push	r28
    ec72:	df 93       	push	r29
    ec74:	ec 01       	movw	r28, r24
    ec76:	89 91       	ld	r24, Y+
    ec78:	60 91 b7 1c 	lds	r22, 0x1CB7	; 0x801cb7 <__iob+0x2>
    ec7c:	70 91 b8 1c 	lds	r23, 0x1CB8	; 0x801cb8 <__iob+0x3>
    ec80:	88 23       	and	r24, r24
    ec82:	39 f0       	breq	.+14     	; 0xec92 <puts+0x22>
    ec84:	90 e0       	ldi	r25, 0x00	; 0
    ec86:	3d df       	rcall	.-390    	; 0xeb02 <fputc>
    ec88:	8f 3f       	cpi	r24, 0xFF	; 255
    ec8a:	2f ef       	ldi	r18, 0xFF	; 255
    ec8c:	92 07       	cpc	r25, r18
    ec8e:	99 f7       	brne	.-26     	; 0xec76 <puts+0x6>
    ec90:	03 c0       	rjmp	.+6      	; 0xec98 <puts+0x28>
    ec92:	8a e0       	ldi	r24, 0x0A	; 10
    ec94:	90 e0       	ldi	r25, 0x00	; 0
    ec96:	35 df       	rcall	.-406    	; 0xeb02 <fputc>
    ec98:	df 91       	pop	r29
    ec9a:	cf 91       	pop	r28
    ec9c:	08 95       	ret

0000ec9e <fileno>:
    ec9e:	00 97       	sbiw	r24, 0x00	; 0
    eca0:	39 f4       	brne	.+14     	; 0xecb0 <fileno+0x12>
    eca2:	89 e0       	ldi	r24, 0x09	; 9
    eca4:	90 e0       	ldi	r25, 0x00	; 0
    eca6:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    ecaa:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    ecae:	0e c0       	rjmp	.+28     	; 0xeccc <fileno+0x2e>
    ecb0:	e5 eb       	ldi	r30, 0xB5	; 181
    ecb2:	fc e1       	ldi	r31, 0x1C	; 28
    ecb4:	20 e0       	ldi	r18, 0x00	; 0
    ecb6:	30 e0       	ldi	r19, 0x00	; 0
    ecb8:	41 91       	ld	r20, Z+
    ecba:	51 91       	ld	r21, Z+
    ecbc:	84 17       	cp	r24, r20
    ecbe:	95 07       	cpc	r25, r21
    ecc0:	41 f0       	breq	.+16     	; 0xecd2 <fileno+0x34>
    ecc2:	2f 5f       	subi	r18, 0xFF	; 255
    ecc4:	3f 4f       	sbci	r19, 0xFF	; 255
    ecc6:	20 31       	cpi	r18, 0x10	; 16
    ecc8:	31 05       	cpc	r19, r1
    ecca:	b1 f7       	brne	.-20     	; 0xecb8 <fileno+0x1a>
    eccc:	8f ef       	ldi	r24, 0xFF	; 255
    ecce:	9f ef       	ldi	r25, 0xFF	; 255
    ecd0:	08 95       	ret
    ecd2:	c9 01       	movw	r24, r18
    ecd4:	08 95       	ret

0000ecd6 <fileno_to_stream>:
    ecd6:	80 31       	cpi	r24, 0x10	; 16
    ecd8:	91 05       	cpc	r25, r1
    ecda:	48 f4       	brcc	.+18     	; 0xecee <fileno_to_stream+0x18>
    ecdc:	88 0f       	add	r24, r24
    ecde:	99 1f       	adc	r25, r25
    ece0:	fc 01       	movw	r30, r24
    ece2:	eb 54       	subi	r30, 0x4B	; 75
    ece4:	f3 4e       	sbci	r31, 0xE3	; 227
    ece6:	80 81       	ld	r24, Z
    ece8:	91 81       	ldd	r25, Z+1	; 0x01
    ecea:	00 97       	sbiw	r24, 0x00	; 0
    ecec:	41 f4       	brne	.+16     	; 0xecfe <fileno_to_stream+0x28>
    ecee:	89 e0       	ldi	r24, 0x09	; 9
    ecf0:	90 e0       	ldi	r25, 0x00	; 0
    ecf2:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    ecf6:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    ecfa:	80 e0       	ldi	r24, 0x00	; 0
    ecfc:	90 e0       	ldi	r25, 0x00	; 0
    ecfe:	08 95       	ret

0000ed00 <mctime>:
    ed00:	a4 e0       	ldi	r26, 0x04	; 4
    ed02:	b0 e0       	ldi	r27, 0x00	; 0
    ed04:	e6 e8       	ldi	r30, 0x86	; 134
    ed06:	f6 e7       	ldi	r31, 0x76	; 118
    ed08:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
    ed0c:	69 83       	std	Y+1, r22	; 0x01
    ed0e:	7a 83       	std	Y+2, r23	; 0x02
    ed10:	8b 83       	std	Y+3, r24	; 0x03
    ed12:	9c 83       	std	Y+4, r25	; 0x04
    ed14:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    ed18:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    ed1c:	ce 01       	movw	r24, r28
    ed1e:	01 96       	adiw	r24, 0x01	; 1
    ed20:	0e 94 c1 3c 	call	0x7982	; 0x7982 <ctime_gm>
    ed24:	fc 01       	movw	r30, r24
    ed26:	01 90       	ld	r0, Z+
    ed28:	00 20       	and	r0, r0
    ed2a:	e9 f7       	brne	.-6      	; 0xed26 <mctime+0x26>
    ed2c:	31 97       	sbiw	r30, 0x01	; 1
    ed2e:	e8 1b       	sub	r30, r24
    ed30:	f9 0b       	sbc	r31, r25
    ed32:	39 f0       	breq	.+14     	; 0xed42 <mctime+0x42>
    ed34:	31 97       	sbiw	r30, 0x01	; 1
    ed36:	e8 0f       	add	r30, r24
    ed38:	f9 1f       	adc	r31, r25
    ed3a:	20 81       	ld	r18, Z
    ed3c:	2a 30       	cpi	r18, 0x0A	; 10
    ed3e:	09 f4       	brne	.+2      	; 0xed42 <mctime+0x42>
    ed40:	10 82       	st	Z, r1
    ed42:	24 96       	adiw	r28, 0x04	; 4
    ed44:	e2 e0       	ldi	r30, 0x02	; 2
    ed46:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

0000ed4a <basename>:
    ed4a:	00 97       	sbiw	r24, 0x00	; 0
    ed4c:	49 f0       	breq	.+18     	; 0xed60 <basename+0x16>
    ed4e:	fc 01       	movw	r30, r24
    ed50:	21 91       	ld	r18, Z+
    ed52:	22 23       	and	r18, r18
    ed54:	21 f0       	breq	.+8      	; 0xed5e <basename+0x14>
    ed56:	2f 32       	cpi	r18, 0x2F	; 47
    ed58:	d9 f7       	brne	.-10     	; 0xed50 <basename+0x6>
    ed5a:	cf 01       	movw	r24, r30
    ed5c:	f9 cf       	rjmp	.-14     	; 0xed50 <basename+0x6>
    ed5e:	08 95       	ret
    ed60:	8e e0       	ldi	r24, 0x0E	; 14
    ed62:	9c e0       	ldi	r25, 0x0C	; 12
    ed64:	08 95       	ret

0000ed66 <chdir>:
    ed66:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    ed6a:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    ed6e:	0e 94 80 5e 	call	0xbd00	; 0xbd00 <f_chdir>
    ed72:	00 97       	sbiw	r24, 0x00	; 0
    ed74:	a1 f0       	breq	.+40     	; 0xed9e <chdir+0x38>
    ed76:	84 31       	cpi	r24, 0x14	; 20
    ed78:	91 05       	cpc	r25, r1
    ed7a:	40 f4       	brcc	.+16     	; 0xed8c <chdir+0x26>
    ed7c:	fc 01       	movw	r30, r24
    ed7e:	ec 56       	subi	r30, 0x6C	; 108
    ed80:	f4 4f       	sbci	r31, 0xF4	; 244
    ed82:	80 81       	ld	r24, Z
    ed84:	08 2e       	mov	r0, r24
    ed86:	00 0c       	add	r0, r0
    ed88:	99 0b       	sbc	r25, r25
    ed8a:	02 c0       	rjmp	.+4      	; 0xed90 <chdir+0x2a>
    ed8c:	83 e2       	ldi	r24, 0x23	; 35
    ed8e:	90 e0       	ldi	r25, 0x00	; 0
    ed90:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    ed94:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    ed98:	8f ef       	ldi	r24, 0xFF	; 255
    ed9a:	9f ef       	ldi	r25, 0xFF	; 255
    ed9c:	08 95       	ret
    ed9e:	80 e0       	ldi	r24, 0x00	; 0
    eda0:	90 e0       	ldi	r25, 0x00	; 0
    eda2:	08 95       	ret

0000eda4 <chmod>:
    eda4:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    eda8:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    edac:	42 79       	andi	r20, 0x92	; 146
    edae:	55 27       	eor	r21, r21
    edb0:	66 27       	eor	r22, r22
    edb2:	77 27       	eor	r23, r23
    edb4:	45 2b       	or	r20, r21
    edb6:	46 2b       	or	r20, r22
    edb8:	47 2b       	or	r20, r23
    edba:	19 f0       	breq	.+6      	; 0xedc2 <chmod+0x1e>
    edbc:	80 e0       	ldi	r24, 0x00	; 0
    edbe:	90 e0       	ldi	r25, 0x00	; 0
    edc0:	08 95       	ret
    edc2:	41 e0       	ldi	r20, 0x01	; 1
    edc4:	61 e0       	ldi	r22, 0x01	; 1
    edc6:	0e 94 60 67 	call	0xcec0	; 0xcec0 <f_chmod>
    edca:	00 97       	sbiw	r24, 0x00	; 0
    edcc:	b9 f3       	breq	.-18     	; 0xedbc <chmod+0x18>
    edce:	84 31       	cpi	r24, 0x14	; 20
    edd0:	91 05       	cpc	r25, r1
    edd2:	40 f4       	brcc	.+16     	; 0xede4 <chmod+0x40>
    edd4:	fc 01       	movw	r30, r24
    edd6:	ec 56       	subi	r30, 0x6C	; 108
    edd8:	f4 4f       	sbci	r31, 0xF4	; 244
    edda:	80 81       	ld	r24, Z
    eddc:	08 2e       	mov	r0, r24
    edde:	00 0c       	add	r0, r0
    ede0:	99 0b       	sbc	r25, r25
    ede2:	02 c0       	rjmp	.+4      	; 0xede8 <chmod+0x44>
    ede4:	83 e2       	ldi	r24, 0x23	; 35
    ede6:	90 e0       	ldi	r25, 0x00	; 0
    ede8:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    edec:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    edf0:	8f ef       	ldi	r24, 0xFF	; 255
    edf2:	9f ef       	ldi	r25, 0xFF	; 255
    edf4:	08 95       	ret

0000edf6 <getcwd>:
    edf6:	cf 93       	push	r28
    edf8:	df 93       	push	r29
    edfa:	d8 2f       	mov	r29, r24
    edfc:	c9 2f       	mov	r28, r25
    edfe:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    ee02:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    ee06:	0e 94 db 5e 	call	0xbdb6	; 0xbdb6 <f_getcwd>
    ee0a:	00 97       	sbiw	r24, 0x00	; 0
    ee0c:	a1 f0       	breq	.+40     	; 0xee36 <getcwd+0x40>
    ee0e:	84 31       	cpi	r24, 0x14	; 20
    ee10:	91 05       	cpc	r25, r1
    ee12:	40 f4       	brcc	.+16     	; 0xee24 <getcwd+0x2e>
    ee14:	fc 01       	movw	r30, r24
    ee16:	ec 56       	subi	r30, 0x6C	; 108
    ee18:	f4 4f       	sbci	r31, 0xF4	; 244
    ee1a:	80 81       	ld	r24, Z
    ee1c:	08 2e       	mov	r0, r24
    ee1e:	00 0c       	add	r0, r0
    ee20:	99 0b       	sbc	r25, r25
    ee22:	02 c0       	rjmp	.+4      	; 0xee28 <getcwd+0x32>
    ee24:	83 e2       	ldi	r24, 0x23	; 35
    ee26:	90 e0       	ldi	r25, 0x00	; 0
    ee28:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    ee2c:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    ee30:	80 e0       	ldi	r24, 0x00	; 0
    ee32:	90 e0       	ldi	r25, 0x00	; 0
    ee34:	02 c0       	rjmp	.+4      	; 0xee3a <getcwd+0x44>
    ee36:	8d 2f       	mov	r24, r29
    ee38:	9c 2f       	mov	r25, r28
    ee3a:	df 91       	pop	r29
    ee3c:	cf 91       	pop	r28
    ee3e:	08 95       	ret

0000ee40 <mkdir>:
    ee40:	cf 93       	push	r28
    ee42:	df 93       	push	r29
    ee44:	ec 01       	movw	r28, r24
    ee46:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    ee4a:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    ee4e:	41 15       	cp	r20, r1
    ee50:	51 05       	cpc	r21, r1
    ee52:	61 05       	cpc	r22, r1
    ee54:	71 05       	cpc	r23, r1
    ee56:	41 f4       	brne	.+16     	; 0xee68 <mkdir+0x28>
    ee58:	ce 01       	movw	r24, r28
    ee5a:	0e 94 5b 65 	call	0xcab6	; 0xcab6 <f_mkdir>
    ee5e:	00 97       	sbiw	r24, 0x00	; 0
    ee60:	39 f4       	brne	.+14     	; 0xee70 <mkdir+0x30>
    ee62:	80 e0       	ldi	r24, 0x00	; 0
    ee64:	90 e0       	ldi	r25, 0x00	; 0
    ee66:	17 c0       	rjmp	.+46     	; 0xee96 <mkdir+0x56>
    ee68:	9d df       	rcall	.-198    	; 0xeda4 <chmod>
    ee6a:	89 2b       	or	r24, r25
    ee6c:	a9 f3       	breq	.-22     	; 0xee58 <mkdir+0x18>
    ee6e:	11 c0       	rjmp	.+34     	; 0xee92 <mkdir+0x52>
    ee70:	84 31       	cpi	r24, 0x14	; 20
    ee72:	91 05       	cpc	r25, r1
    ee74:	40 f4       	brcc	.+16     	; 0xee86 <mkdir+0x46>
    ee76:	fc 01       	movw	r30, r24
    ee78:	ec 56       	subi	r30, 0x6C	; 108
    ee7a:	f4 4f       	sbci	r31, 0xF4	; 244
    ee7c:	80 81       	ld	r24, Z
    ee7e:	08 2e       	mov	r0, r24
    ee80:	00 0c       	add	r0, r0
    ee82:	99 0b       	sbc	r25, r25
    ee84:	02 c0       	rjmp	.+4      	; 0xee8a <mkdir+0x4a>
    ee86:	83 e2       	ldi	r24, 0x23	; 35
    ee88:	90 e0       	ldi	r25, 0x00	; 0
    ee8a:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    ee8e:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    ee92:	8f ef       	ldi	r24, 0xFF	; 255
    ee94:	9f ef       	ldi	r25, 0xFF	; 255
    ee96:	df 91       	pop	r29
    ee98:	cf 91       	pop	r28
    ee9a:	08 95       	ret

0000ee9c <rename>:
    ee9c:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    eea0:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    eea4:	0e 94 4b 66 	call	0xcc96	; 0xcc96 <f_rename>
    eea8:	00 97       	sbiw	r24, 0x00	; 0
    eeaa:	a1 f0       	breq	.+40     	; 0xeed4 <rename+0x38>
    eeac:	84 31       	cpi	r24, 0x14	; 20
    eeae:	91 05       	cpc	r25, r1
    eeb0:	40 f4       	brcc	.+16     	; 0xeec2 <rename+0x26>
    eeb2:	fc 01       	movw	r30, r24
    eeb4:	ec 56       	subi	r30, 0x6C	; 108
    eeb6:	f4 4f       	sbci	r31, 0xF4	; 244
    eeb8:	80 81       	ld	r24, Z
    eeba:	08 2e       	mov	r0, r24
    eebc:	00 0c       	add	r0, r0
    eebe:	99 0b       	sbc	r25, r25
    eec0:	02 c0       	rjmp	.+4      	; 0xeec6 <rename+0x2a>
    eec2:	83 e2       	ldi	r24, 0x23	; 35
    eec4:	90 e0       	ldi	r25, 0x00	; 0
    eec6:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    eeca:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    eece:	8f ef       	ldi	r24, 0xFF	; 255
    eed0:	9f ef       	ldi	r25, 0xFF	; 255
    eed2:	08 95       	ret
    eed4:	80 e0       	ldi	r24, 0x00	; 0
    eed6:	90 e0       	ldi	r25, 0x00	; 0
    eed8:	08 95       	ret

0000eeda <unlink>:
    eeda:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    eede:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    eee2:	0e 94 b4 64 	call	0xc968	; 0xc968 <f_unlink>
    eee6:	00 97       	sbiw	r24, 0x00	; 0
    eee8:	a1 f0       	breq	.+40     	; 0xef12 <unlink+0x38>
    eeea:	84 31       	cpi	r24, 0x14	; 20
    eeec:	91 05       	cpc	r25, r1
    eeee:	40 f4       	brcc	.+16     	; 0xef00 <unlink+0x26>
    eef0:	fc 01       	movw	r30, r24
    eef2:	ec 56       	subi	r30, 0x6C	; 108
    eef4:	f4 4f       	sbci	r31, 0xF4	; 244
    eef6:	80 81       	ld	r24, Z
    eef8:	08 2e       	mov	r0, r24
    eefa:	00 0c       	add	r0, r0
    eefc:	99 0b       	sbc	r25, r25
    eefe:	02 c0       	rjmp	.+4      	; 0xef04 <unlink+0x2a>
    ef00:	83 e2       	ldi	r24, 0x23	; 35
    ef02:	90 e0       	ldi	r25, 0x00	; 0
    ef04:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    ef08:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    ef0c:	8f ef       	ldi	r24, 0xFF	; 255
    ef0e:	9f ef       	ldi	r25, 0xFF	; 255
    ef10:	08 95       	ret
    ef12:	80 e0       	ldi	r24, 0x00	; 0
    ef14:	90 e0       	ldi	r25, 0x00	; 0
    ef16:	08 95       	ret

0000ef18 <rmdir>:
    ef18:	e0 cf       	rjmp	.-64     	; 0xeeda <unlink>
    ef1a:	08 95       	ret

0000ef1c <closedir>:
    ef1c:	0e 94 3d 63 	call	0xc67a	; 0xc67a <f_closedir>
    ef20:	00 97       	sbiw	r24, 0x00	; 0
    ef22:	a1 f0       	breq	.+40     	; 0xef4c <closedir+0x30>
    ef24:	84 31       	cpi	r24, 0x14	; 20
    ef26:	91 05       	cpc	r25, r1
    ef28:	40 f4       	brcc	.+16     	; 0xef3a <closedir+0x1e>
    ef2a:	fc 01       	movw	r30, r24
    ef2c:	ec 56       	subi	r30, 0x6C	; 108
    ef2e:	f4 4f       	sbci	r31, 0xF4	; 244
    ef30:	80 81       	ld	r24, Z
    ef32:	08 2e       	mov	r0, r24
    ef34:	00 0c       	add	r0, r0
    ef36:	99 0b       	sbc	r25, r25
    ef38:	02 c0       	rjmp	.+4      	; 0xef3e <closedir+0x22>
    ef3a:	83 e2       	ldi	r24, 0x23	; 35
    ef3c:	90 e0       	ldi	r25, 0x00	; 0
    ef3e:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    ef42:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    ef46:	8f ef       	ldi	r24, 0xFF	; 255
    ef48:	9f ef       	ldi	r25, 0xFF	; 255
    ef4a:	08 95       	ret
    ef4c:	80 e0       	ldi	r24, 0x00	; 0
    ef4e:	90 e0       	ldi	r25, 0x00	; 0
    ef50:	08 95       	ret

0000ef52 <opendir>:
    ef52:	bc 01       	movw	r22, r24
    ef54:	86 e2       	ldi	r24, 0x26	; 38
    ef56:	99 e1       	ldi	r25, 0x19	; 25
    ef58:	0e 94 cc 62 	call	0xc598	; 0xc598 <f_opendir>
    ef5c:	00 97       	sbiw	r24, 0x00	; 0
    ef5e:	a1 f0       	breq	.+40     	; 0xef88 <opendir+0x36>
    ef60:	84 31       	cpi	r24, 0x14	; 20
    ef62:	91 05       	cpc	r25, r1
    ef64:	40 f4       	brcc	.+16     	; 0xef76 <opendir+0x24>
    ef66:	fc 01       	movw	r30, r24
    ef68:	ec 56       	subi	r30, 0x6C	; 108
    ef6a:	f4 4f       	sbci	r31, 0xF4	; 244
    ef6c:	80 81       	ld	r24, Z
    ef6e:	08 2e       	mov	r0, r24
    ef70:	00 0c       	add	r0, r0
    ef72:	99 0b       	sbc	r25, r25
    ef74:	02 c0       	rjmp	.+4      	; 0xef7a <opendir+0x28>
    ef76:	83 e2       	ldi	r24, 0x23	; 35
    ef78:	90 e0       	ldi	r25, 0x00	; 0
    ef7a:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    ef7e:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    ef82:	80 e0       	ldi	r24, 0x00	; 0
    ef84:	90 e0       	ldi	r25, 0x00	; 0
    ef86:	08 95       	ret
    ef88:	86 e2       	ldi	r24, 0x26	; 38
    ef8a:	99 e1       	ldi	r25, 0x19	; 25
    ef8c:	08 95       	ret

0000ef8e <readdir>:
    ef8e:	a6 e1       	ldi	r26, 0x16	; 22
    ef90:	b1 e0       	ldi	r27, 0x01	; 1
    ef92:	ed ec       	ldi	r30, 0xCD	; 205
    ef94:	f7 e7       	ldi	r31, 0x77	; 119
    ef96:	0c 94 74 e6 	jmp	0x1cce8	; 0x1cce8 <__prologue_saves__+0x1c>
    ef9a:	10 92 26 18 	sts	0x1826, r1	; 0x801826 <_de>
    ef9e:	be 01       	movw	r22, r28
    efa0:	6f 5f       	subi	r22, 0xFF	; 255
    efa2:	7f 4f       	sbci	r23, 0xFF	; 255
    efa4:	0e 94 52 63 	call	0xc6a4	; 0xc6a4 <f_readdir>
    efa8:	00 97       	sbiw	r24, 0x00	; 0
    efaa:	a1 f0       	breq	.+40     	; 0xefd4 <readdir+0x46>
    efac:	84 31       	cpi	r24, 0x14	; 20
    efae:	91 05       	cpc	r25, r1
    efb0:	40 f4       	brcc	.+16     	; 0xefc2 <readdir+0x34>
    efb2:	fc 01       	movw	r30, r24
    efb4:	ec 56       	subi	r30, 0x6C	; 108
    efb6:	f4 4f       	sbci	r31, 0xF4	; 244
    efb8:	80 81       	ld	r24, Z
    efba:	08 2e       	mov	r0, r24
    efbc:	00 0c       	add	r0, r0
    efbe:	99 0b       	sbc	r25, r25
    efc0:	02 c0       	rjmp	.+4      	; 0xefc6 <readdir+0x38>
    efc2:	83 e2       	ldi	r24, 0x23	; 35
    efc4:	90 e0       	ldi	r25, 0x00	; 0
    efc6:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    efca:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    efce:	80 e0       	ldi	r24, 0x00	; 0
    efd0:	90 e0       	ldi	r25, 0x00	; 0
    efd2:	16 c0       	rjmp	.+44     	; 0xf000 <readdir+0x72>
    efd4:	be 01       	movw	r22, r28
    efd6:	69 5e       	subi	r22, 0xE9	; 233
    efd8:	7f 4f       	sbci	r23, 0xFF	; 255
    efda:	fb 01       	movw	r30, r22
    efdc:	01 90       	ld	r0, Z+
    efde:	00 20       	and	r0, r0
    efe0:	e9 f7       	brne	.-6      	; 0xefdc <readdir+0x4e>
    efe2:	31 97       	sbiw	r30, 0x01	; 1
    efe4:	8f 01       	movw	r16, r30
    efe6:	06 1b       	sub	r16, r22
    efe8:	17 0b       	sbc	r17, r23
    efea:	a8 01       	movw	r20, r16
    efec:	86 e2       	ldi	r24, 0x26	; 38
    efee:	98 e1       	ldi	r25, 0x18	; 24
    eff0:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <strncpy>
    eff4:	f8 01       	movw	r30, r16
    eff6:	ea 5d       	subi	r30, 0xDA	; 218
    eff8:	f7 4e       	sbci	r31, 0xE7	; 231
    effa:	10 82       	st	Z, r1
    effc:	86 e2       	ldi	r24, 0x26	; 38
    effe:	98 e1       	ldi	r25, 0x18	; 24
    f000:	ca 5e       	subi	r28, 0xEA	; 234
    f002:	de 4f       	sbci	r29, 0xFE	; 254
    f004:	e4 e0       	ldi	r30, 0x04	; 4
    f006:	0c 94 90 e6 	jmp	0x1cd20	; 0x1cd20 <__epilogue_restores__+0x1c>

0000f00a <perror>:
    f00a:	ad b7       	in	r26, 0x3d	; 61
    f00c:	be b7       	in	r27, 0x3e	; 62
    f00e:	17 97       	sbiw	r26, 0x07	; 7
    f010:	0f b6       	in	r0, 0x3f	; 63
    f012:	f8 94       	cli
    f014:	be bf       	out	0x3e, r27	; 62
    f016:	0f be       	out	0x3f, r0	; 63
    f018:	ad bf       	out	0x3d, r26	; 61
    f01a:	20 91 b3 1c 	lds	r18, 0x1CB3	; 0x801cb3 <errno>
    f01e:	30 91 b4 1c 	lds	r19, 0x1CB4	; 0x801cb4 <errno+0x1>
    f022:	23 32       	cpi	r18, 0x23	; 35
    f024:	31 05       	cpc	r19, r1
    f026:	40 f4       	brcc	.+16     	; 0xf038 <perror+0x2e>
    f028:	22 0f       	add	r18, r18
    f02a:	33 1f       	adc	r19, r19
    f02c:	f9 01       	movw	r30, r18
    f02e:	ea 5c       	subi	r30, 0xCA	; 202
    f030:	fe 4f       	sbci	r31, 0xFE	; 254
    f032:	20 81       	ld	r18, Z
    f034:	31 81       	ldd	r19, Z+1	; 0x01
    f036:	04 c0       	rjmp	.+8      	; 0xf040 <perror+0x36>
    f038:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <sys_errlist+0x46>
    f03c:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <sys_errlist+0x47>
    f040:	00 97       	sbiw	r24, 0x00	; 0
    f042:	99 f0       	breq	.+38     	; 0xf06a <perror+0x60>
    f044:	fc 01       	movw	r30, r24
    f046:	40 81       	ld	r20, Z
    f048:	44 23       	and	r20, r20
    f04a:	79 f0       	breq	.+30     	; 0xf06a <perror+0x60>
    f04c:	ed b7       	in	r30, 0x3d	; 61
    f04e:	fe b7       	in	r31, 0x3e	; 62
    f050:	37 83       	std	Z+7, r19	; 0x07
    f052:	26 83       	std	Z+6, r18	; 0x06
    f054:	95 83       	std	Z+5, r25	; 0x05
    f056:	84 83       	std	Z+4, r24	; 0x04
    f058:	82 e6       	ldi	r24, 0x62	; 98
    f05a:	9b e0       	ldi	r25, 0x0B	; 11
    f05c:	a0 e0       	ldi	r26, 0x00	; 0
    f05e:	81 83       	std	Z+1, r24	; 0x01
    f060:	92 83       	std	Z+2, r25	; 0x02
    f062:	a3 83       	std	Z+3, r26	; 0x03
    f064:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    f068:	0c c0       	rjmp	.+24     	; 0xf082 <perror+0x78>
    f06a:	ed b7       	in	r30, 0x3d	; 61
    f06c:	fe b7       	in	r31, 0x3e	; 62
    f06e:	35 83       	std	Z+5, r19	; 0x05
    f070:	24 83       	std	Z+4, r18	; 0x04
    f072:	8e e5       	ldi	r24, 0x5E	; 94
    f074:	9b e0       	ldi	r25, 0x0B	; 11
    f076:	a0 e0       	ldi	r26, 0x00	; 0
    f078:	81 83       	std	Z+1, r24	; 0x01
    f07a:	92 83       	std	Z+2, r25	; 0x02
    f07c:	a3 83       	std	Z+3, r26	; 0x03
    f07e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    f082:	ad b7       	in	r26, 0x3d	; 61
    f084:	be b7       	in	r27, 0x3e	; 62
    f086:	17 96       	adiw	r26, 0x07	; 7
    f088:	0f b6       	in	r0, 0x3f	; 63
    f08a:	f8 94       	cli
    f08c:	be bf       	out	0x3e, r27	; 62
    f08e:	0f be       	out	0x3f, r0	; 63
    f090:	ad bf       	out	0x3d, r26	; 61
    f092:	08 95       	ret

0000f094 <fdevopen>:
    f094:	0f 93       	push	r16
    f096:	1f 93       	push	r17
    f098:	cf 93       	push	r28
    f09a:	df 93       	push	r29
    f09c:	00 97       	sbiw	r24, 0x00	; 0
    f09e:	31 f4       	brne	.+12     	; 0xf0ac <fdevopen+0x18>
    f0a0:	61 15       	cp	r22, r1
    f0a2:	71 05       	cpc	r23, r1
    f0a4:	19 f4       	brne	.+6      	; 0xf0ac <fdevopen+0x18>
    f0a6:	80 e0       	ldi	r24, 0x00	; 0
    f0a8:	90 e0       	ldi	r25, 0x00	; 0
    f0aa:	3a c0       	rjmp	.+116    	; 0xf120 <fdevopen+0x8c>
    f0ac:	8b 01       	movw	r16, r22
    f0ae:	ec 01       	movw	r28, r24
    f0b0:	6e e0       	ldi	r22, 0x0E	; 14
    f0b2:	70 e0       	ldi	r23, 0x00	; 0
    f0b4:	81 e0       	ldi	r24, 0x01	; 1
    f0b6:	90 e0       	ldi	r25, 0x00	; 0
    f0b8:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <safecalloc>
    f0bc:	fc 01       	movw	r30, r24
    f0be:	89 2b       	or	r24, r25
    f0c0:	91 f3       	breq	.-28     	; 0xf0a6 <fdevopen+0x12>
    f0c2:	80 e8       	ldi	r24, 0x80	; 128
    f0c4:	83 83       	std	Z+3, r24	; 0x03
    f0c6:	01 15       	cp	r16, r1
    f0c8:	11 05       	cpc	r17, r1
    f0ca:	71 f0       	breq	.+28     	; 0xf0e8 <fdevopen+0x54>
    f0cc:	13 87       	std	Z+11, r17	; 0x0b
    f0ce:	02 87       	std	Z+10, r16	; 0x0a
    f0d0:	81 e8       	ldi	r24, 0x81	; 129
    f0d2:	83 83       	std	Z+3, r24	; 0x03
    f0d4:	80 91 b5 1c 	lds	r24, 0x1CB5	; 0x801cb5 <__iob>
    f0d8:	90 91 b6 1c 	lds	r25, 0x1CB6	; 0x801cb6 <__iob+0x1>
    f0dc:	89 2b       	or	r24, r25
    f0de:	21 f4       	brne	.+8      	; 0xf0e8 <fdevopen+0x54>
    f0e0:	f0 93 b6 1c 	sts	0x1CB6, r31	; 0x801cb6 <__iob+0x1>
    f0e4:	e0 93 b5 1c 	sts	0x1CB5, r30	; 0x801cb5 <__iob>
    f0e8:	20 97       	sbiw	r28, 0x00	; 0
    f0ea:	c9 f0       	breq	.+50     	; 0xf11e <fdevopen+0x8a>
    f0ec:	d1 87       	std	Z+9, r29	; 0x09
    f0ee:	c0 87       	std	Z+8, r28	; 0x08
    f0f0:	83 81       	ldd	r24, Z+3	; 0x03
    f0f2:	82 60       	ori	r24, 0x02	; 2
    f0f4:	83 83       	std	Z+3, r24	; 0x03
    f0f6:	80 91 b7 1c 	lds	r24, 0x1CB7	; 0x801cb7 <__iob+0x2>
    f0fa:	90 91 b8 1c 	lds	r25, 0x1CB8	; 0x801cb8 <__iob+0x3>
    f0fe:	89 2b       	or	r24, r25
    f100:	21 f4       	brne	.+8      	; 0xf10a <fdevopen+0x76>
    f102:	f0 93 b8 1c 	sts	0x1CB8, r31	; 0x801cb8 <__iob+0x3>
    f106:	e0 93 b7 1c 	sts	0x1CB7, r30	; 0x801cb7 <__iob+0x2>
    f10a:	80 91 b9 1c 	lds	r24, 0x1CB9	; 0x801cb9 <__iob+0x4>
    f10e:	90 91 ba 1c 	lds	r25, 0x1CBA	; 0x801cba <__iob+0x5>
    f112:	89 2b       	or	r24, r25
    f114:	21 f4       	brne	.+8      	; 0xf11e <fdevopen+0x8a>
    f116:	f0 93 ba 1c 	sts	0x1CBA, r31	; 0x801cba <__iob+0x5>
    f11a:	e0 93 b9 1c 	sts	0x1CB9, r30	; 0x801cb9 <__iob+0x4>
    f11e:	cf 01       	movw	r24, r30
    f120:	df 91       	pop	r29
    f122:	cf 91       	pop	r28
    f124:	1f 91       	pop	r17
    f126:	0f 91       	pop	r16
    f128:	08 95       	ret

0000f12a <fat_time_to_unix>:
    f12a:	a6 e1       	ldi	r26, 0x16	; 22
    f12c:	b0 e0       	ldi	r27, 0x00	; 0
    f12e:	eb e9       	ldi	r30, 0x9B	; 155
    f130:	f8 e7       	ldi	r31, 0x78	; 120
    f132:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
    f136:	fe 01       	movw	r30, r28
    f138:	31 96       	adiw	r30, 0x01	; 1
    f13a:	26 e1       	ldi	r18, 0x16	; 22
    f13c:	df 01       	movw	r26, r30
    f13e:	1d 92       	st	X+, r1
    f140:	2a 95       	dec	r18
    f142:	e9 f7       	brne	.-6      	; 0xf13e <fat_time_to_unix+0x14>
    f144:	9b 01       	movw	r18, r22
    f146:	22 0f       	add	r18, r18
    f148:	33 1f       	adc	r19, r19
    f14a:	2e 73       	andi	r18, 0x3E	; 62
    f14c:	33 27       	eor	r19, r19
    f14e:	3a 83       	std	Y+2, r19	; 0x02
    f150:	29 83       	std	Y+1, r18	; 0x01
    f152:	9b 01       	movw	r18, r22
    f154:	55 e0       	ldi	r21, 0x05	; 5
    f156:	36 95       	lsr	r19
    f158:	27 95       	ror	r18
    f15a:	5a 95       	dec	r21
    f15c:	e1 f7       	brne	.-8      	; 0xf156 <fat_time_to_unix+0x2c>
    f15e:	2f 73       	andi	r18, 0x3F	; 63
    f160:	33 27       	eor	r19, r19
    f162:	3c 83       	std	Y+4, r19	; 0x04
    f164:	2b 83       	std	Y+3, r18	; 0x03
    f166:	27 2f       	mov	r18, r23
    f168:	26 95       	lsr	r18
    f16a:	26 95       	lsr	r18
    f16c:	26 95       	lsr	r18
    f16e:	2d 83       	std	Y+5, r18	; 0x05
    f170:	1e 82       	std	Y+6, r1	; 0x06
    f172:	9c 01       	movw	r18, r24
    f174:	2f 71       	andi	r18, 0x1F	; 31
    f176:	33 27       	eor	r19, r19
    f178:	38 87       	std	Y+8, r19	; 0x08
    f17a:	2f 83       	std	Y+7, r18	; 0x07
    f17c:	9c 01       	movw	r18, r24
    f17e:	65 e0       	ldi	r22, 0x05	; 5
    f180:	36 95       	lsr	r19
    f182:	27 95       	ror	r18
    f184:	6a 95       	dec	r22
    f186:	e1 f7       	brne	.-8      	; 0xf180 <fat_time_to_unix+0x56>
    f188:	2f 70       	andi	r18, 0x0F	; 15
    f18a:	33 27       	eor	r19, r19
    f18c:	21 50       	subi	r18, 0x01	; 1
    f18e:	31 09       	sbc	r19, r1
    f190:	3a 87       	std	Y+10, r19	; 0x0a
    f192:	29 87       	std	Y+9, r18	; 0x09
    f194:	9c 01       	movw	r18, r24
    f196:	23 2f       	mov	r18, r19
    f198:	33 27       	eor	r19, r19
    f19a:	26 95       	lsr	r18
    f19c:	20 5b       	subi	r18, 0xB0	; 176
    f19e:	3f 4f       	sbci	r19, 0xFF	; 255
    f1a0:	3c 87       	std	Y+12, r19	; 0x0c
    f1a2:	2b 87       	std	Y+11, r18	; 0x0b
    f1a4:	cf 01       	movw	r24, r30
    f1a6:	0e 94 0c 3a 	call	0x7418	; 0x7418 <timegm>
    f1aa:	66 96       	adiw	r28, 0x16	; 22
    f1ac:	e2 e0       	ldi	r30, 0x02	; 2
    f1ae:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

0000f1b2 <stat>:
    f1b2:	a6 e1       	ldi	r26, 0x16	; 22
    f1b4:	b1 e0       	ldi	r27, 0x01	; 1
    f1b6:	ef ed       	ldi	r30, 0xDF	; 223
    f1b8:	f8 e7       	ldi	r31, 0x78	; 120
    f1ba:	0c 94 70 e6 	jmp	0x1cce0	; 0x1cce0 <__prologue_saves__+0x14>
    f1be:	6c 01       	movw	r12, r24
    f1c0:	8b 01       	movw	r16, r22
    f1c2:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    f1c6:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    f1ca:	6a ee       	ldi	r22, 0xEA	; 234
    f1cc:	78 e0       	ldi	r23, 0x08	; 8
    f1ce:	0e 94 de 31 	call	0x63bc	; 0x63bc <MATCH>
    f1d2:	89 2b       	or	r24, r25
    f1d4:	01 f1       	breq	.+64     	; 0xf216 <stat+0x64>
    f1d6:	f8 01       	movw	r30, r16
    f1d8:	14 a2       	std	Z+36, r1	; 0x24
    f1da:	15 a2       	std	Z+37, r1	; 0x25
    f1dc:	16 a2       	std	Z+38, r1	; 0x26
    f1de:	17 a2       	std	Z+39, r1	; 0x27
    f1e0:	10 a6       	std	Z+40, r1	; 0x28
    f1e2:	11 a6       	std	Z+41, r1	; 0x29
    f1e4:	12 a6       	std	Z+42, r1	; 0x2a
    f1e6:	13 a6       	std	Z+43, r1	; 0x2b
    f1e8:	14 a6       	std	Z+44, r1	; 0x2c
    f1ea:	15 a6       	std	Z+45, r1	; 0x2d
    f1ec:	16 a6       	std	Z+46, r1	; 0x2e
    f1ee:	17 a6       	std	Z+47, r1	; 0x2f
    f1f0:	11 8a       	std	Z+17, r1	; 0x11
    f1f2:	10 8a       	std	Z+16, r1	; 0x10
    f1f4:	13 8a       	std	Z+19, r1	; 0x13
    f1f6:	12 8a       	std	Z+18, r1	; 0x12
    f1f8:	10 8e       	std	Z+24, r1	; 0x18
    f1fa:	11 8e       	std	Z+25, r1	; 0x19
    f1fc:	12 8e       	std	Z+26, r1	; 0x1a
    f1fe:	13 8e       	std	Z+27, r1	; 0x1b
    f200:	80 e0       	ldi	r24, 0x00	; 0
    f202:	90 e4       	ldi	r25, 0x40	; 64
    f204:	a0 e0       	ldi	r26, 0x00	; 0
    f206:	b0 e0       	ldi	r27, 0x00	; 0
    f208:	80 87       	std	Z+8, r24	; 0x08
    f20a:	91 87       	std	Z+9, r25	; 0x09
    f20c:	a2 87       	std	Z+10, r26	; 0x0a
    f20e:	b3 87       	std	Z+11, r27	; 0x0b
    f210:	e1 2c       	mov	r14, r1
    f212:	f1 2c       	mov	r15, r1
    f214:	62 c0       	rjmp	.+196    	; 0xf2da <stat+0x128>
    f216:	66 ea       	ldi	r22, 0xA6	; 166
    f218:	78 e0       	ldi	r23, 0x08	; 8
    f21a:	c6 01       	movw	r24, r12
    f21c:	0e 94 de 31 	call	0x63bc	; 0x63bc <MATCH>
    f220:	89 2b       	or	r24, r25
    f222:	c9 f6       	brne	.-78     	; 0xf1d6 <stat+0x24>
    f224:	66 ee       	ldi	r22, 0xE6	; 230
    f226:	72 e1       	ldi	r23, 0x12	; 18
    f228:	c6 01       	movw	r24, r12
    f22a:	0e 94 de 31 	call	0x63bc	; 0x63bc <MATCH>
    f22e:	7c 01       	movw	r14, r24
    f230:	89 2b       	or	r24, r25
    f232:	89 f6       	brne	.-94     	; 0xf1d6 <stat+0x24>
    f234:	be 01       	movw	r22, r28
    f236:	6f 5f       	subi	r22, 0xFF	; 255
    f238:	7f 4f       	sbci	r23, 0xFF	; 255
    f23a:	c6 01       	movw	r24, r12
    f23c:	0e 94 96 63 	call	0xc72c	; 0xc72c <f_stat>
    f240:	00 97       	sbiw	r24, 0x00	; 0
    f242:	a9 f0       	breq	.+42     	; 0xf26e <stat+0xbc>
    f244:	84 31       	cpi	r24, 0x14	; 20
    f246:	91 05       	cpc	r25, r1
    f248:	40 f4       	brcc	.+16     	; 0xf25a <stat+0xa8>
    f24a:	fc 01       	movw	r30, r24
    f24c:	ec 56       	subi	r30, 0x6C	; 108
    f24e:	f4 4f       	sbci	r31, 0xF4	; 244
    f250:	80 81       	ld	r24, Z
    f252:	08 2e       	mov	r0, r24
    f254:	00 0c       	add	r0, r0
    f256:	99 0b       	sbc	r25, r25
    f258:	02 c0       	rjmp	.+4      	; 0xf25e <stat+0xac>
    f25a:	83 e2       	ldi	r24, 0x23	; 35
    f25c:	90 e0       	ldi	r25, 0x00	; 0
    f25e:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f262:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f266:	ee 24       	eor	r14, r14
    f268:	ea 94       	dec	r14
    f26a:	fe 2c       	mov	r15, r14
    f26c:	36 c0       	rjmp	.+108    	; 0xf2da <stat+0x128>
    f26e:	89 81       	ldd	r24, Y+1	; 0x01
    f270:	9a 81       	ldd	r25, Y+2	; 0x02
    f272:	ab 81       	ldd	r26, Y+3	; 0x03
    f274:	bc 81       	ldd	r27, Y+4	; 0x04
    f276:	f8 01       	movw	r30, r16
    f278:	80 8f       	std	Z+24, r24	; 0x18
    f27a:	91 8f       	std	Z+25, r25	; 0x19
    f27c:	a2 8f       	std	Z+26, r26	; 0x1a
    f27e:	b3 8f       	std	Z+27, r27	; 0x1b
    f280:	6f 81       	ldd	r22, Y+7	; 0x07
    f282:	78 85       	ldd	r23, Y+8	; 0x08
    f284:	8d 81       	ldd	r24, Y+5	; 0x05
    f286:	9e 81       	ldd	r25, Y+6	; 0x06
    f288:	50 df       	rcall	.-352    	; 0xf12a <fat_time_to_unix>
    f28a:	f8 01       	movw	r30, r16
    f28c:	64 a3       	std	Z+36, r22	; 0x24
    f28e:	75 a3       	std	Z+37, r23	; 0x25
    f290:	86 a3       	std	Z+38, r24	; 0x26
    f292:	97 a3       	std	Z+39, r25	; 0x27
    f294:	60 a7       	std	Z+40, r22	; 0x28
    f296:	71 a7       	std	Z+41, r23	; 0x29
    f298:	82 a7       	std	Z+42, r24	; 0x2a
    f29a:	93 a7       	std	Z+43, r25	; 0x2b
    f29c:	64 a7       	std	Z+44, r22	; 0x2c
    f29e:	75 a7       	std	Z+45, r23	; 0x2d
    f2a0:	86 a7       	std	Z+46, r24	; 0x2e
    f2a2:	97 a7       	std	Z+47, r25	; 0x2f
    f2a4:	29 85       	ldd	r18, Y+9	; 0x09
    f2a6:	20 fd       	sbrc	r18, 0
    f2a8:	03 c0       	rjmp	.+6      	; 0xf2b0 <stat+0xfe>
    f2aa:	8f ef       	ldi	r24, 0xFF	; 255
    f2ac:	91 e0       	ldi	r25, 0x01	; 1
    f2ae:	02 c0       	rjmp	.+4      	; 0xf2b4 <stat+0x102>
    f2b0:	8d e6       	ldi	r24, 0x6D	; 109
    f2b2:	91 e0       	ldi	r25, 0x01	; 1
    f2b4:	48 ee       	ldi	r20, 0xE8	; 232
    f2b6:	53 e0       	ldi	r21, 0x03	; 3
    f2b8:	f8 01       	movw	r30, r16
    f2ba:	51 8b       	std	Z+17, r21	; 0x11
    f2bc:	40 8b       	std	Z+16, r20	; 0x10
    f2be:	53 8b       	std	Z+19, r21	; 0x13
    f2c0:	42 8b       	std	Z+18, r20	; 0x12
    f2c2:	24 ff       	sbrs	r18, 4
    f2c4:	02 c0       	rjmp	.+4      	; 0xf2ca <stat+0x118>
    f2c6:	90 64       	ori	r25, 0x40	; 64
    f2c8:	01 c0       	rjmp	.+2      	; 0xf2cc <stat+0x11a>
    f2ca:	90 68       	ori	r25, 0x80	; 128
    f2cc:	a0 e0       	ldi	r26, 0x00	; 0
    f2ce:	b0 e0       	ldi	r27, 0x00	; 0
    f2d0:	f8 01       	movw	r30, r16
    f2d2:	80 87       	std	Z+8, r24	; 0x08
    f2d4:	91 87       	std	Z+9, r25	; 0x09
    f2d6:	a2 87       	std	Z+10, r26	; 0x0a
    f2d8:	b3 87       	std	Z+11, r27	; 0x0b
    f2da:	c7 01       	movw	r24, r14
    f2dc:	ca 5e       	subi	r28, 0xEA	; 234
    f2de:	de 4f       	sbci	r29, 0xFE	; 254
    f2e0:	e8 e0       	ldi	r30, 0x08	; 8
    f2e2:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__epilogue_restores__+0x14>

0000f2e6 <unix_time_to_fat>:
    f2e6:	a4 e0       	ldi	r26, 0x04	; 4
    f2e8:	b0 e0       	ldi	r27, 0x00	; 0
    f2ea:	e9 e7       	ldi	r30, 0x79	; 121
    f2ec:	f9 e7       	ldi	r31, 0x79	; 121
    f2ee:	0c 94 72 e6 	jmp	0x1cce4	; 0x1cce4 <__prologue_saves__+0x18>
    f2f2:	69 83       	std	Y+1, r22	; 0x01
    f2f4:	7a 83       	std	Y+2, r23	; 0x02
    f2f6:	8b 83       	std	Y+3, r24	; 0x03
    f2f8:	9c 83       	std	Y+4, r25	; 0x04
    f2fa:	7a 01       	movw	r14, r20
    f2fc:	89 01       	movw	r16, r18
    f2fe:	ce 01       	movw	r24, r28
    f300:	01 96       	adiw	r24, 0x01	; 1
    f302:	0e 94 4d 37 	call	0x6e9a	; 0x6e9a <gmtime>
    f306:	fc 01       	movw	r30, r24
    f308:	22 85       	ldd	r18, Z+10	; 0x0a
    f30a:	33 85       	ldd	r19, Z+11	; 0x0b
    f30c:	20 55       	subi	r18, 0x50	; 80
    f30e:	31 09       	sbc	r19, r1
    f310:	c9 01       	movw	r24, r18
    f312:	98 2f       	mov	r25, r24
    f314:	88 27       	eor	r24, r24
    f316:	99 0f       	add	r25, r25
    f318:	20 85       	ldd	r18, Z+8	; 0x08
    f31a:	31 85       	ldd	r19, Z+9	; 0x09
    f31c:	2f 5f       	subi	r18, 0xFF	; 255
    f31e:	3f 4f       	sbci	r19, 0xFF	; 255
    f320:	45 e0       	ldi	r20, 0x05	; 5
    f322:	22 0f       	add	r18, r18
    f324:	33 1f       	adc	r19, r19
    f326:	4a 95       	dec	r20
    f328:	e1 f7       	brne	.-8      	; 0xf322 <unix_time_to_fat+0x3c>
    f32a:	28 2b       	or	r18, r24
    f32c:	39 2b       	or	r19, r25
    f32e:	86 81       	ldd	r24, Z+6	; 0x06
    f330:	97 81       	ldd	r25, Z+7	; 0x07
    f332:	28 2b       	or	r18, r24
    f334:	39 2b       	or	r19, r25
    f336:	d7 01       	movw	r26, r14
    f338:	2d 93       	st	X+, r18
    f33a:	3c 93       	st	X, r19
    f33c:	84 81       	ldd	r24, Z+4	; 0x04
    f33e:	20 e0       	ldi	r18, 0x00	; 0
    f340:	30 e0       	ldi	r19, 0x00	; 0
    f342:	38 2f       	mov	r19, r24
    f344:	33 0f       	add	r19, r19
    f346:	33 0f       	add	r19, r19
    f348:	33 0f       	add	r19, r19
    f34a:	82 81       	ldd	r24, Z+2	; 0x02
    f34c:	93 81       	ldd	r25, Z+3	; 0x03
    f34e:	55 e0       	ldi	r21, 0x05	; 5
    f350:	88 0f       	add	r24, r24
    f352:	99 1f       	adc	r25, r25
    f354:	5a 95       	dec	r21
    f356:	e1 f7       	brne	.-8      	; 0xf350 <unix_time_to_fat+0x6a>
    f358:	82 2b       	or	r24, r18
    f35a:	93 2b       	or	r25, r19
    f35c:	20 81       	ld	r18, Z
    f35e:	31 81       	ldd	r19, Z+1	; 0x01
    f360:	36 95       	lsr	r19
    f362:	27 95       	ror	r18
    f364:	82 2b       	or	r24, r18
    f366:	93 2b       	or	r25, r19
    f368:	f8 01       	movw	r30, r16
    f36a:	91 83       	std	Z+1, r25	; 0x01
    f36c:	80 83       	st	Z, r24
    f36e:	24 96       	adiw	r28, 0x04	; 4
    f370:	e6 e0       	ldi	r30, 0x06	; 6
    f372:	0c 94 8e e6 	jmp	0x1cd1c	; 0x1cd1c <__epilogue_restores__+0x18>

0000f376 <utime>:
    f376:	aa e1       	ldi	r26, 0x1A	; 26
    f378:	b1 e0       	ldi	r27, 0x01	; 1
    f37a:	e1 ec       	ldi	r30, 0xC1	; 193
    f37c:	f9 e7       	ldi	r31, 0x79	; 121
    f37e:	0c 94 74 e6 	jmp	0x1cce8	; 0x1cce8 <__prologue_saves__+0x1c>
    f382:	8c 01       	movw	r16, r24
    f384:	61 15       	cp	r22, r1
    f386:	71 05       	cpc	r23, r1
    f388:	31 f0       	breq	.+12     	; 0xf396 <utime+0x20>
    f38a:	fb 01       	movw	r30, r22
    f38c:	64 81       	ldd	r22, Z+4	; 0x04
    f38e:	75 81       	ldd	r23, Z+5	; 0x05
    f390:	86 81       	ldd	r24, Z+6	; 0x06
    f392:	97 81       	ldd	r25, Z+7	; 0x07
    f394:	04 c0       	rjmp	.+8      	; 0xf39e <utime+0x28>
    f396:	80 e0       	ldi	r24, 0x00	; 0
    f398:	90 e0       	ldi	r25, 0x00	; 0
    f39a:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <time>
    f39e:	9e 01       	movw	r18, r28
    f3a0:	29 5e       	subi	r18, 0xE9	; 233
    f3a2:	3e 4f       	sbci	r19, 0xFE	; 254
    f3a4:	ae 01       	movw	r20, r28
    f3a6:	47 5e       	subi	r20, 0xE7	; 231
    f3a8:	5e 4f       	sbci	r21, 0xFE	; 254
    f3aa:	9d df       	rcall	.-198    	; 0xf2e6 <unix_time_to_fat>
    f3ac:	c7 5e       	subi	r28, 0xE7	; 231
    f3ae:	de 4f       	sbci	r29, 0xFE	; 254
    f3b0:	88 81       	ld	r24, Y
    f3b2:	99 81       	ldd	r25, Y+1	; 0x01
    f3b4:	c9 51       	subi	r28, 0x19	; 25
    f3b6:	d1 40       	sbci	r29, 0x01	; 1
    f3b8:	9e 83       	std	Y+6, r25	; 0x06
    f3ba:	8d 83       	std	Y+5, r24	; 0x05
    f3bc:	c9 5e       	subi	r28, 0xE9	; 233
    f3be:	de 4f       	sbci	r29, 0xFE	; 254
    f3c0:	88 81       	ld	r24, Y
    f3c2:	99 81       	ldd	r25, Y+1	; 0x01
    f3c4:	c7 51       	subi	r28, 0x17	; 23
    f3c6:	d1 40       	sbci	r29, 0x01	; 1
    f3c8:	98 87       	std	Y+8, r25	; 0x08
    f3ca:	8f 83       	std	Y+7, r24	; 0x07
    f3cc:	be 01       	movw	r22, r28
    f3ce:	6f 5f       	subi	r22, 0xFF	; 255
    f3d0:	7f 4f       	sbci	r23, 0xFF	; 255
    f3d2:	c8 01       	movw	r24, r16
    f3d4:	0e 94 ad 67 	call	0xcf5a	; 0xcf5a <f_utime>
    f3d8:	84 31       	cpi	r24, 0x14	; 20
    f3da:	91 05       	cpc	r25, r1
    f3dc:	40 f4       	brcc	.+16     	; 0xf3ee <utime+0x78>
    f3de:	fc 01       	movw	r30, r24
    f3e0:	ec 56       	subi	r30, 0x6C	; 108
    f3e2:	f4 4f       	sbci	r31, 0xF4	; 244
    f3e4:	80 81       	ld	r24, Z
    f3e6:	08 2e       	mov	r0, r24
    f3e8:	00 0c       	add	r0, r0
    f3ea:	99 0b       	sbc	r25, r25
    f3ec:	02 c0       	rjmp	.+4      	; 0xf3f2 <utime+0x7c>
    f3ee:	83 e2       	ldi	r24, 0x23	; 35
    f3f0:	90 e0       	ldi	r25, 0x00	; 0
    f3f2:	c6 5e       	subi	r28, 0xE6	; 230
    f3f4:	de 4f       	sbci	r29, 0xFE	; 254
    f3f6:	e4 e0       	ldi	r30, 0x04	; 4
    f3f8:	0c 94 90 e6 	jmp	0x1cd20	; 0x1cd20 <__epilogue_restores__+0x1c>

0000f3fc <fileno_to_fatfs>:
    f3fc:	83 30       	cpi	r24, 0x03	; 3
    f3fe:	91 05       	cpc	r25, r1
    f400:	48 f4       	brcc	.+18     	; 0xf414 <fileno_to_fatfs+0x18>
    f402:	89 e0       	ldi	r24, 0x09	; 9
    f404:	90 e0       	ldi	r25, 0x00	; 0
    f406:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f40a:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f40e:	80 e0       	ldi	r24, 0x00	; 0
    f410:	90 e0       	ldi	r25, 0x00	; 0
    f412:	08 95       	ret
    f414:	60 dc       	rcall	.-1856   	; 0xecd6 <fileno_to_stream>
    f416:	00 97       	sbiw	r24, 0x00	; 0
    f418:	d1 f3       	breq	.-12     	; 0xf40e <fileno_to_fatfs+0x12>
    f41a:	fc 01       	movw	r30, r24
    f41c:	84 85       	ldd	r24, Z+12	; 0x0c
    f41e:	95 85       	ldd	r25, Z+13	; 0x0d
    f420:	00 97       	sbiw	r24, 0x00	; 0
    f422:	79 f3       	breq	.-34     	; 0xf402 <fileno_to_fatfs+0x6>
    f424:	08 95       	ret

0000f426 <ftell>:
    f426:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    f42a:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    f42e:	37 dc       	rcall	.-1938   	; 0xec9e <fileno>
    f430:	83 30       	cpi	r24, 0x03	; 3
    f432:	91 05       	cpc	r25, r1
    f434:	48 f0       	brcs	.+18     	; 0xf448 <ftell+0x22>
    f436:	e2 df       	rcall	.-60     	; 0xf3fc <fileno_to_fatfs>
    f438:	00 97       	sbiw	r24, 0x00	; 0
    f43a:	51 f4       	brne	.+20     	; 0xf450 <ftell+0x2a>
    f43c:	89 e0       	ldi	r24, 0x09	; 9
    f43e:	90 e0       	ldi	r25, 0x00	; 0
    f440:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f444:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f448:	6f ef       	ldi	r22, 0xFF	; 255
    f44a:	7f ef       	ldi	r23, 0xFF	; 255
    f44c:	cb 01       	movw	r24, r22
    f44e:	08 95       	ret
    f450:	fc 01       	movw	r30, r24
    f452:	60 89       	ldd	r22, Z+16	; 0x10
    f454:	71 89       	ldd	r23, Z+17	; 0x11
    f456:	82 89       	ldd	r24, Z+18	; 0x12
    f458:	93 89       	ldd	r25, Z+19	; 0x13
    f45a:	08 95       	ret

0000f45c <lseek>:
    f45c:	a3 e0       	ldi	r26, 0x03	; 3
    f45e:	b0 e0       	ldi	r27, 0x00	; 0
    f460:	e4 e3       	ldi	r30, 0x34	; 52
    f462:	fa e7       	ldi	r31, 0x7A	; 122
    f464:	0c 94 6e e6 	jmp	0x1ccdc	; 0x1ccdc <__prologue_saves__+0x10>
    f468:	5c 01       	movw	r10, r24
    f46a:	6a 01       	movw	r12, r20
    f46c:	7b 01       	movw	r14, r22
    f46e:	89 01       	movw	r16, r18
    f470:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    f474:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
    f478:	c1 df       	rcall	.-126    	; 0xf3fc <fileno_to_fatfs>
    f47a:	ec 01       	movw	r28, r24
    f47c:	89 2b       	or	r24, r25
    f47e:	19 f4       	brne	.+6      	; 0xf486 <lseek+0x2a>
    f480:	88 e1       	ldi	r24, 0x18	; 24
    f482:	90 e0       	ldi	r25, 0x00	; 0
    f484:	26 c0       	rjmp	.+76     	; 0xf4d2 <lseek+0x76>
    f486:	83 e0       	ldi	r24, 0x03	; 3
    f488:	a8 16       	cp	r10, r24
    f48a:	b1 04       	cpc	r11, r1
    f48c:	d0 f1       	brcs	.+116    	; 0xf502 <lseek+0xa6>
    f48e:	c5 01       	movw	r24, r10
    f490:	22 dc       	rcall	.-1980   	; 0xecd6 <fileno_to_stream>
    f492:	fc 01       	movw	r30, r24
    f494:	93 81       	ldd	r25, Z+3	; 0x03
    f496:	90 64       	ori	r25, 0x40	; 64
    f498:	93 83       	std	Z+3, r25	; 0x03
    f49a:	02 30       	cpi	r16, 0x02	; 2
    f49c:	11 05       	cpc	r17, r1
    f49e:	a9 f5       	brne	.+106    	; 0xf50a <lseek+0xae>
    f4a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    f4a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    f4a4:	ac 85       	ldd	r26, Y+12	; 0x0c
    f4a6:	bd 85       	ldd	r27, Y+13	; 0x0d
    f4a8:	c8 0e       	add	r12, r24
    f4aa:	d9 1e       	adc	r13, r25
    f4ac:	ea 1e       	adc	r14, r26
    f4ae:	fb 1e       	adc	r15, r27
    f4b0:	b7 01       	movw	r22, r14
    f4b2:	a6 01       	movw	r20, r12
    f4b4:	ce 01       	movw	r24, r28
    f4b6:	0e 94 11 60 	call	0xc022	; 0xc022 <f_lseek>
    f4ba:	00 97       	sbiw	r24, 0x00	; 0
    f4bc:	79 f0       	breq	.+30     	; 0xf4dc <lseek+0x80>
    f4be:	84 31       	cpi	r24, 0x14	; 20
    f4c0:	91 05       	cpc	r25, r1
    f4c2:	58 f5       	brcc	.+86     	; 0xf51a <lseek+0xbe>
    f4c4:	fc 01       	movw	r30, r24
    f4c6:	ec 56       	subi	r30, 0x6C	; 108
    f4c8:	f4 4f       	sbci	r31, 0xF4	; 244
    f4ca:	80 81       	ld	r24, Z
    f4cc:	08 2e       	mov	r0, r24
    f4ce:	00 0c       	add	r0, r0
    f4d0:	99 0b       	sbc	r25, r25
    f4d2:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f4d6:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f4da:	13 c0       	rjmp	.+38     	; 0xf502 <lseek+0xa6>
    f4dc:	68 89       	ldd	r22, Y+16	; 0x10
    f4de:	79 89       	ldd	r23, Y+17	; 0x11
    f4e0:	8a 89       	ldd	r24, Y+18	; 0x12
    f4e2:	9b 89       	ldd	r25, Y+19	; 0x13
    f4e4:	c6 16       	cp	r12, r22
    f4e6:	d7 06       	cpc	r13, r23
    f4e8:	e8 06       	cpc	r14, r24
    f4ea:	f9 06       	cpc	r15, r25
    f4ec:	c9 f0       	breq	.+50     	; 0xf520 <lseek+0xc4>
    f4ee:	8a e6       	ldi	r24, 0x6A	; 106
    f4f0:	9b e0       	ldi	r25, 0x0B	; 11
    f4f2:	a0 e0       	ldi	r26, 0x00	; 0
    f4f4:	ed b7       	in	r30, 0x3d	; 61
    f4f6:	fe b7       	in	r31, 0x3e	; 62
    f4f8:	81 83       	std	Z+1, r24	; 0x01
    f4fa:	92 83       	std	Z+2, r25	; 0x02
    f4fc:	a3 83       	std	Z+3, r26	; 0x03
    f4fe:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    f502:	6f ef       	ldi	r22, 0xFF	; 255
    f504:	7f ef       	ldi	r23, 0xFF	; 255
    f506:	cb 01       	movw	r24, r22
    f508:	0b c0       	rjmp	.+22     	; 0xf520 <lseek+0xc4>
    f50a:	01 30       	cpi	r16, 0x01	; 1
    f50c:	11 05       	cpc	r17, r1
    f50e:	81 f6       	brne	.-96     	; 0xf4b0 <lseek+0x54>
    f510:	88 89       	ldd	r24, Y+16	; 0x10
    f512:	99 89       	ldd	r25, Y+17	; 0x11
    f514:	aa 89       	ldd	r26, Y+18	; 0x12
    f516:	bb 89       	ldd	r27, Y+19	; 0x13
    f518:	c7 cf       	rjmp	.-114    	; 0xf4a8 <lseek+0x4c>
    f51a:	83 e2       	ldi	r24, 0x23	; 35
    f51c:	90 e0       	ldi	r25, 0x00	; 0
    f51e:	d9 cf       	rjmp	.-78     	; 0xf4d2 <lseek+0x76>
    f520:	cd b7       	in	r28, 0x3d	; 61
    f522:	de b7       	in	r29, 0x3e	; 62
    f524:	23 96       	adiw	r28, 0x03	; 3
    f526:	ea e0       	ldi	r30, 0x0A	; 10
    f528:	0c 94 8a e6 	jmp	0x1cd14	; 0x1cd14 <__epilogue_restores__+0x10>

0000f52c <fseek>:
    f52c:	cf 92       	push	r12
    f52e:	df 92       	push	r13
    f530:	ef 92       	push	r14
    f532:	ff 92       	push	r15
    f534:	cf 93       	push	r28
    f536:	df 93       	push	r29
    f538:	6a 01       	movw	r12, r20
    f53a:	7b 01       	movw	r14, r22
    f53c:	e9 01       	movw	r28, r18
    f53e:	af db       	rcall	.-2210   	; 0xec9e <fileno>
    f540:	97 fd       	sbrc	r25, 7
    f542:	12 c0       	rjmp	.+36     	; 0xf568 <fseek+0x3c>
    f544:	9e 01       	movw	r18, r28
    f546:	b7 01       	movw	r22, r14
    f548:	a6 01       	movw	r20, r12
    f54a:	88 df       	rcall	.-240    	; 0xf45c <lseek>
    f54c:	21 e0       	ldi	r18, 0x01	; 1
    f54e:	30 e0       	ldi	r19, 0x00	; 0
    f550:	6f 3f       	cpi	r22, 0xFF	; 255
    f552:	7f 4f       	sbci	r23, 0xFF	; 255
    f554:	8f 4f       	sbci	r24, 0xFF	; 255
    f556:	9f 4f       	sbci	r25, 0xFF	; 255
    f558:	11 f0       	breq	.+4      	; 0xf55e <fseek+0x32>
    f55a:	20 e0       	ldi	r18, 0x00	; 0
    f55c:	30 e0       	ldi	r19, 0x00	; 0
    f55e:	88 27       	eor	r24, r24
    f560:	99 27       	eor	r25, r25
    f562:	82 1b       	sub	r24, r18
    f564:	93 0b       	sbc	r25, r19
    f566:	02 c0       	rjmp	.+4      	; 0xf56c <fseek+0x40>
    f568:	8f ef       	ldi	r24, 0xFF	; 255
    f56a:	9f ef       	ldi	r25, 0xFF	; 255
    f56c:	df 91       	pop	r29
    f56e:	cf 91       	pop	r28
    f570:	ff 90       	pop	r15
    f572:	ef 90       	pop	r14
    f574:	df 90       	pop	r13
    f576:	cf 90       	pop	r12
    f578:	08 95       	ret

0000f57a <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f57a:	a2 e0       	ldi	r26, 0x02	; 2
    f57c:	b0 e0       	ldi	r27, 0x00	; 0
    f57e:	e3 ec       	ldi	r30, 0xC3	; 195
    f580:	fa e7       	ldi	r31, 0x7A	; 122
    f582:	0c 94 6e e6 	jmp	0x1ccdc	; 0x1ccdc <__prologue_saves__+0x10>
    f586:	5c 01       	movw	r10, r24
    f588:	8b 01       	movw	r16, r22
    f58a:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

//FIXME
    *(char *) buf = 0;
    f58c:	fb 01       	movw	r30, r22
    f58e:	10 82       	st	Z, r1

    errno = 0;
    f590:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    f594:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>

// TTY read function
// FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f598:	9e db       	rcall	.-2244   	; 0xecd6 <fileno_to_stream>
    f59a:	7c 01       	movw	r14, r24
    if(stream == stdin)
    f59c:	80 91 b5 1c 	lds	r24, 0x1CB5	; 0x801cb5 <__iob>
    f5a0:	90 91 b6 1c 	lds	r25, 0x1CB6	; 0x801cb6 <__iob+0x1>
    f5a4:	e8 16       	cp	r14, r24
    f5a6:	f9 06       	cpc	r15, r25
    f5a8:	c9 f4       	brne	.+50     	; 0xf5dc <read+0x62>
    {
        char *ptr = (char *) buf;
// ungetc is undefined for read
        stream->flags |= __SUNGET;
    f5aa:	f7 01       	movw	r30, r14
    f5ac:	83 81       	ldd	r24, Z+3	; 0x03
    f5ae:	80 64       	ori	r24, 0x40	; 64
    f5b0:	83 83       	std	Z+3, r24	; 0x03
        size = 0;
    f5b2:	1a 82       	std	Y+2, r1	; 0x02
    f5b4:	19 82       	std	Y+1, r1	; 0x01
    f5b6:	c0 0e       	add	r12, r16
    f5b8:	d1 1e       	adc	r13, r17
        while(count--)
    f5ba:	0c 15       	cp	r16, r12
    f5bc:	1d 05       	cpc	r17, r13
    f5be:	09 f4       	brne	.+2      	; 0xf5c2 <read+0x48>
    f5c0:	3d c0       	rjmp	.+122    	; 0xf63c <read+0xc2>
        {
            ret = fgetc(stream);
    f5c2:	c7 01       	movw	r24, r14
    f5c4:	48 da       	rcall	.-2928   	; 0xea56 <fgetc>
            if(ret < 0)
    f5c6:	97 fd       	sbrc	r25, 7
    f5c8:	39 c0       	rjmp	.+114    	; 0xf63c <read+0xc2>
                break;

            *ptr++ = ret;
    f5ca:	f8 01       	movw	r30, r16
    f5cc:	81 93       	st	Z+, r24
    f5ce:	8f 01       	movw	r16, r30
            ++size;
    f5d0:	89 81       	ldd	r24, Y+1	; 0x01
    f5d2:	9a 81       	ldd	r25, Y+2	; 0x02
    f5d4:	01 96       	adiw	r24, 0x01	; 1
    f5d6:	9a 83       	std	Y+2, r25	; 0x02
    f5d8:	89 83       	std	Y+1, r24	; 0x01
    f5da:	ef cf       	rjmp	.-34     	; 0xf5ba <read+0x40>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f5dc:	80 91 b7 1c 	lds	r24, 0x1CB7	; 0x801cb7 <__iob+0x2>
    f5e0:	90 91 b8 1c 	lds	r25, 0x1CB8	; 0x801cb8 <__iob+0x3>
    f5e4:	e8 16       	cp	r14, r24
    f5e6:	f9 06       	cpc	r15, r25
    f5e8:	71 f1       	breq	.+92     	; 0xf646 <read+0xcc>
    f5ea:	80 91 b9 1c 	lds	r24, 0x1CB9	; 0x801cb9 <__iob+0x4>
    f5ee:	90 91 ba 1c 	lds	r25, 0x1CBA	; 0x801cba <__iob+0x5>
    f5f2:	e8 16       	cp	r14, r24
    f5f4:	f9 06       	cpc	r15, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f5f6:	39 f1       	breq	.+78     	; 0xf646 <read+0xcc>
    f5f8:	c5 01       	movw	r24, r10
    f5fa:	00 df       	rcall	.-512    	; 0xf3fc <fileno_to_fatfs>
    if ( fh == NULL )
    f5fc:	00 97       	sbiw	r24, 0x00	; 0
    f5fe:	19 f4       	brne	.+6      	; 0xf606 <read+0x8c>
    {
        errno = EBADF;
    f600:	89 e0       	ldi	r24, 0x09	; 9
    f602:	90 e0       	ldi	r25, 0x00	; 0
    f604:	16 c0       	rjmp	.+44     	; 0xf632 <read+0xb8>
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f606:	9e 01       	movw	r18, r28
    f608:	2f 5f       	subi	r18, 0xFF	; 255
    f60a:	3f 4f       	sbci	r19, 0xFF	; 255
    f60c:	a6 01       	movw	r20, r12
    f60e:	b8 01       	movw	r22, r16
    f610:	0e 94 05 5b 	call	0xb60a	; 0xb60a <f_read>
    if(res != FR_OK)
    f614:	00 97       	sbiw	r24, 0x00	; 0
    f616:	91 f0       	breq	.+36     	; 0xf63c <read+0xc2>
    f618:	84 31       	cpi	r24, 0x14	; 20
    f61a:	91 05       	cpc	r25, r1
    f61c:	40 f4       	brcc	.+16     	; 0xf62e <read+0xb4>
    f61e:	fc 01       	movw	r30, r24
    f620:	ec 56       	subi	r30, 0x6C	; 108
    f622:	f4 4f       	sbci	r31, 0xF4	; 244
    f624:	80 81       	ld	r24, Z
    f626:	08 2e       	mov	r0, r24
    f628:	00 0c       	add	r0, r0
    f62a:	99 0b       	sbc	r25, r25
    f62c:	02 c0       	rjmp	.+4      	; 0xf632 <read+0xb8>
    f62e:	83 e2       	ldi	r24, 0x23	; 35
    f630:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f632:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f636:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f63a:	05 c0       	rjmp	.+10     	; 0xf646 <read+0xcc>
        return(-1);
    }
    return ((ssize_t) size);
    f63c:	69 81       	ldd	r22, Y+1	; 0x01
    f63e:	7a 81       	ldd	r23, Y+2	; 0x02
    f640:	80 e0       	ldi	r24, 0x00	; 0
    f642:	90 e0       	ldi	r25, 0x00	; 0
    f644:	03 c0       	rjmp	.+6      	; 0xf64c <read+0xd2>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f646:	6f ef       	ldi	r22, 0xFF	; 255
    f648:	7f ef       	ldi	r23, 0xFF	; 255
    f64a:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f64c:	22 96       	adiw	r28, 0x02	; 2
    f64e:	ea e0       	ldi	r30, 0x0A	; 10
    f650:	0c 94 8a e6 	jmp	0x1cd14	; 0x1cd14 <__epilogue_restores__+0x10>

0000f654 <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f654:	0f 93       	push	r16
    f656:	1f 93       	push	r17
    f658:	cf 93       	push	r28
    f65a:	df 93       	push	r29
    f65c:	ec 01       	movw	r28, r24
    f65e:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f660:	64 9f       	mul	r22, r20
    f662:	80 01       	movw	r16, r0
    f664:	65 9f       	mul	r22, r21
    f666:	10 0d       	add	r17, r0
    f668:	74 9f       	mul	r23, r20
    f66a:	10 0d       	add	r17, r0
    f66c:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f66e:	17 db       	rcall	.-2514   	; 0xec9e <fileno>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f670:	a8 01       	movw	r20, r16
    f672:	be 01       	movw	r22, r28
    f674:	82 df       	rcall	.-252    	; 0xf57a <read>
    if(ret < 0)
    f676:	97 fd       	sbrc	r25, 7
    f678:	02 c0       	rjmp	.+4      	; 0xf67e <fread+0x2a>
        return(0);

    return((size_t) ret);
    f67a:	cb 01       	movw	r24, r22
    f67c:	02 c0       	rjmp	.+4      	; 0xf682 <fread+0x2e>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f67e:	80 e0       	ldi	r24, 0x00	; 0
    f680:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f682:	df 91       	pop	r29
    f684:	cf 91       	pop	r28
    f686:	1f 91       	pop	r17
    f688:	0f 91       	pop	r16
    f68a:	08 95       	ret

0000f68c <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f68c:	cf 93       	push	r28
    f68e:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f690:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    f694:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f698:	83 30       	cpi	r24, 0x03	; 3
    f69a:	91 05       	cpc	r25, r1
    f69c:	18 f4       	brcc	.+6      	; 0xf6a4 <syncfs+0x18>

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f69e:	89 e0       	ldi	r24, 0x09	; 9
    f6a0:	90 e0       	ldi	r25, 0x00	; 0
    f6a2:	18 c0       	rjmp	.+48     	; 0xf6d4 <syncfs+0x48>
    f6a4:	ec 01       	movw	r28, r24
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f6a6:	17 db       	rcall	.-2514   	; 0xecd6 <fileno_to_stream>
    f6a8:	fc 01       	movw	r30, r24
// reset unget on sync
    stream->flags |= __SUNGET;
    f6aa:	93 81       	ldd	r25, Z+3	; 0x03
    f6ac:	90 64       	ori	r25, 0x40	; 64
    f6ae:	93 83       	std	Z+3, r25	; 0x03

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f6b0:	ce 01       	movw	r24, r28
    f6b2:	a4 de       	rcall	.-696    	; 0xf3fc <fileno_to_fatfs>
    if(fh == NULL)
    f6b4:	00 97       	sbiw	r24, 0x00	; 0
    f6b6:	99 f3       	breq	.-26     	; 0xf69e <syncfs+0x12>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f6b8:	0e 94 e7 5d 	call	0xbbce	; 0xbbce <f_sync>
    if (res != FR_OK)
    f6bc:	00 97       	sbiw	r24, 0x00	; 0
    f6be:	a1 f0       	breq	.+40     	; 0xf6e8 <syncfs+0x5c>
    f6c0:	84 31       	cpi	r24, 0x14	; 20
    f6c2:	91 05       	cpc	r25, r1
    f6c4:	70 f4       	brcc	.+28     	; 0xf6e2 <syncfs+0x56>
    f6c6:	fc 01       	movw	r30, r24
    f6c8:	ec 56       	subi	r30, 0x6C	; 108
    f6ca:	f4 4f       	sbci	r31, 0xF4	; 244
    f6cc:	80 81       	ld	r24, Z
    f6ce:	08 2e       	mov	r0, r24
    f6d0:	00 0c       	add	r0, r0
    f6d2:	99 0b       	sbc	r25, r25
    {
        errno = fatfs_to_errno(res);
    f6d4:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f6d8:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
        return(-1);
    f6dc:	8f ef       	ldi	r24, 0xFF	; 255
    f6de:	9f ef       	ldi	r25, 0xFF	; 255
    f6e0:	05 c0       	rjmp	.+10     	; 0xf6ec <syncfs+0x60>
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f6e2:	83 e2       	ldi	r24, 0x23	; 35
    f6e4:	90 e0       	ldi	r25, 0x00	; 0
    f6e6:	f6 cf       	rjmp	.-20     	; 0xf6d4 <syncfs+0x48>
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f6e8:	80 e0       	ldi	r24, 0x00	; 0
    f6ea:	90 e0       	ldi	r25, 0x00	; 0
}
    f6ec:	df 91       	pop	r29
    f6ee:	cf 91       	pop	r28
    f6f0:	08 95       	ret

0000f6f2 <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f6f2:	cf 93       	push	r28
    f6f4:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f6f6:	c0 e0       	ldi	r28, 0x00	; 0
    f6f8:	d0 e0       	ldi	r29, 0x00	; 0
    f6fa:	21 96       	adiw	r28, 0x01	; 1
    f6fc:	c0 31       	cpi	r28, 0x10	; 16
    f6fe:	d1 05       	cpc	r29, r1
    f700:	51 f0       	breq	.+20     	; 0xf716 <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f702:	c3 30       	cpi	r28, 0x03	; 3
    f704:	d1 05       	cpc	r29, r1
    f706:	cc f3       	brlt	.-14     	; 0xf6fa <sync+0x8>
    {
        if(isatty(i))
            continue;

// fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f708:	ce 01       	movw	r24, r28
    f70a:	78 de       	rcall	.-784    	; 0xf3fc <fileno_to_fatfs>
        if(fh == NULL)
    f70c:	89 2b       	or	r24, r25
    f70e:	a9 f3       	breq	.-22     	; 0xf6fa <sync+0x8>
            continue;

        (void ) syncfs(i);
    f710:	ce 01       	movw	r24, r28
    f712:	bc df       	rcall	.-136    	; 0xf68c <syncfs>
    f714:	f2 cf       	rjmp	.-28     	; 0xf6fa <sync+0x8>
    }
}
    f716:	df 91       	pop	r29
    f718:	cf 91       	pop	r28
    f71a:	08 95       	ret

0000f71c <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f71c:	a2 e0       	ldi	r26, 0x02	; 2
    f71e:	b0 e0       	ldi	r27, 0x00	; 0
    f720:	e4 e9       	ldi	r30, 0x94	; 148
    f722:	fb e7       	ldi	r31, 0x7B	; 123
    f724:	0c 94 6c e6 	jmp	0x1ccd8	; 0x1ccd8 <__prologue_saves__+0xc>
    f728:	8c 01       	movw	r16, r24
    f72a:	b6 2e       	mov	r11, r22
    f72c:	f7 2e       	mov	r15, r23
    f72e:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f730:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    f734:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>

// TTY read function
    stream = fileno_to_stream(fd);
    f738:	ce da       	rcall	.-2660   	; 0xecd6 <fileno_to_stream>
    f73a:	6c 01       	movw	r12, r24
    if(stream == stdout || stream == stderr)
    f73c:	80 91 b7 1c 	lds	r24, 0x1CB7	; 0x801cb7 <__iob+0x2>
    f740:	90 91 b8 1c 	lds	r25, 0x1CB8	; 0x801cb8 <__iob+0x3>
    f744:	c8 16       	cp	r12, r24
    f746:	d9 06       	cpc	r13, r25
    f748:	39 f0       	breq	.+14     	; 0xf758 <write+0x3c>
    f74a:	80 91 b9 1c 	lds	r24, 0x1CB9	; 0x801cb9 <__iob+0x4>
    f74e:	90 91 ba 1c 	lds	r25, 0x1CBA	; 0x801cba <__iob+0x5>
    f752:	c8 16       	cp	r12, r24
    f754:	d9 06       	cpc	r13, r25
    f756:	d1 f4       	brne	.+52     	; 0xf78c <write+0x70>
    {
        char *ptr = (char *) buf;
        size = 0;
    f758:	1a 82       	std	Y+2, r1	; 0x02
    f75a:	19 82       	std	Y+1, r1	; 0x01
    f75c:	0b 2d       	mov	r16, r11
    f75e:	1f 2d       	mov	r17, r15
    f760:	78 01       	movw	r14, r16
    f762:	e8 0c       	add	r14, r8
    f764:	f9 1c       	adc	r15, r9
        while(count--)
    f766:	0e 15       	cp	r16, r14
    f768:	1f 05       	cpc	r17, r15
    f76a:	d1 f1       	breq	.+116    	; 0xf7e0 <write+0xc4>
        {
            int c,ret;
            c = *ptr++;
    f76c:	f8 01       	movw	r30, r16
    f76e:	a1 90       	ld	r10, Z+
    f770:	8f 01       	movw	r16, r30
    f772:	b1 2c       	mov	r11, r1
            ret = fputc(c, stream);
    f774:	b6 01       	movw	r22, r12
    f776:	c5 01       	movw	r24, r10
    f778:	c4 d9       	rcall	.-3192   	; 0xeb02 <fputc>
            if(c != ret)
    f77a:	a8 16       	cp	r10, r24
    f77c:	b9 06       	cpc	r11, r25
    f77e:	81 f5       	brne	.+96     	; 0xf7e0 <write+0xc4>
                break;

            ++size;
    f780:	89 81       	ldd	r24, Y+1	; 0x01
    f782:	9a 81       	ldd	r25, Y+2	; 0x02
    f784:	01 96       	adiw	r24, 0x01	; 1
    f786:	9a 83       	std	Y+2, r25	; 0x02
    f788:	89 83       	std	Y+1, r24	; 0x01
    f78a:	ed cf       	rjmp	.-38     	; 0xf766 <write+0x4a>
        }
        return(size);
    }
    if(stream == stdin)
    f78c:	80 91 b5 1c 	lds	r24, 0x1CB5	; 0x801cb5 <__iob>
    f790:	90 91 b6 1c 	lds	r25, 0x1CB6	; 0x801cb6 <__iob+0x1>
    f794:	c8 16       	cp	r12, r24
    f796:	d9 06       	cpc	r13, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f798:	41 f1       	breq	.+80     	; 0xf7ea <write+0xce>
    f79a:	c8 01       	movw	r24, r16
    f79c:	2f de       	rcall	.-930    	; 0xf3fc <fileno_to_fatfs>
    if ( fh == NULL )
    f79e:	00 97       	sbiw	r24, 0x00	; 0
    f7a0:	19 f4       	brne	.+6      	; 0xf7a8 <write+0x8c>
    {
        errno = EBADF;
    f7a2:	89 e0       	ldi	r24, 0x09	; 9
    f7a4:	90 e0       	ldi	r25, 0x00	; 0
    f7a6:	17 c0       	rjmp	.+46     	; 0xf7d6 <write+0xba>
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    f7a8:	9e 01       	movw	r18, r28
    f7aa:	2f 5f       	subi	r18, 0xFF	; 255
    f7ac:	3f 4f       	sbci	r19, 0xFF	; 255
    f7ae:	a4 01       	movw	r20, r8
    f7b0:	6b 2d       	mov	r22, r11
    f7b2:	7f 2d       	mov	r23, r15
    f7b4:	0e 94 50 5c 	call	0xb8a0	; 0xb8a0 <f_write>
    if(res != FR_OK)
    f7b8:	00 97       	sbiw	r24, 0x00	; 0
    f7ba:	91 f0       	breq	.+36     	; 0xf7e0 <write+0xc4>
    f7bc:	84 31       	cpi	r24, 0x14	; 20
    f7be:	91 05       	cpc	r25, r1
    f7c0:	40 f4       	brcc	.+16     	; 0xf7d2 <write+0xb6>
    f7c2:	fc 01       	movw	r30, r24
    f7c4:	ec 56       	subi	r30, 0x6C	; 108
    f7c6:	f4 4f       	sbci	r31, 0xF4	; 244
    f7c8:	80 81       	ld	r24, Z
    f7ca:	08 2e       	mov	r0, r24
    f7cc:	00 0c       	add	r0, r0
    f7ce:	99 0b       	sbc	r25, r25
    f7d0:	02 c0       	rjmp	.+4      	; 0xf7d6 <write+0xba>
    f7d2:	83 e2       	ldi	r24, 0x23	; 35
    f7d4:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f7d6:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f7da:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    f7de:	05 c0       	rjmp	.+10     	; 0xf7ea <write+0xce>
        return(-1);
    }
    return ((ssize_t) size);
    f7e0:	69 81       	ldd	r22, Y+1	; 0x01
    f7e2:	7a 81       	ldd	r23, Y+2	; 0x02
    f7e4:	80 e0       	ldi	r24, 0x00	; 0
    f7e6:	90 e0       	ldi	r25, 0x00	; 0
    f7e8:	03 c0       	rjmp	.+6      	; 0xf7f0 <write+0xd4>
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    f7ea:	6f ef       	ldi	r22, 0xFF	; 255
    f7ec:	7f ef       	ldi	r23, 0xFF	; 255
    f7ee:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f7f0:	22 96       	adiw	r28, 0x02	; 2
    f7f2:	ec e0       	ldi	r30, 0x0C	; 12
    f7f4:	0c 94 88 e6 	jmp	0x1cd10	; 0x1cd10 <__epilogue_restores__+0xc>

0000f7f8 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f7f8:	0f 93       	push	r16
    f7fa:	1f 93       	push	r17
    f7fc:	cf 93       	push	r28
    f7fe:	df 93       	push	r29
    f800:	ec 01       	movw	r28, r24
    f802:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f804:	64 9f       	mul	r22, r20
    f806:	80 01       	movw	r16, r0
    f808:	65 9f       	mul	r22, r21
    f80a:	10 0d       	add	r17, r0
    f80c:	74 9f       	mul	r23, r20
    f80e:	10 0d       	add	r17, r0
    f810:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f812:	45 da       	rcall	.-2934   	; 0xec9e <fileno>
    ssize_t ret;

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    f814:	a8 01       	movw	r20, r16
    f816:	be 01       	movw	r22, r28
    f818:	81 df       	rcall	.-254    	; 0xf71c <write>

    if(ret < 0)
    f81a:	97 fd       	sbrc	r25, 7
    f81c:	02 c0       	rjmp	.+4      	; 0xf822 <fwrite+0x2a>
        return(0);

    return((size_t) ret);
    f81e:	cb 01       	movw	r24, r22
    f820:	02 c0       	rjmp	.+4      	; 0xf826 <fwrite+0x2e>

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    f822:	80 e0       	ldi	r24, 0x00	; 0
    f824:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f826:	df 91       	pop	r29
    f828:	cf 91       	pop	r28
    f82a:	1f 91       	pop	r17
    f82c:	0f 91       	pop	r16
    f82e:	08 95       	ret

0000f830 <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    f830:	0f 93       	push	r16
    f832:	1f 93       	push	r17
    f834:	cf 93       	push	r28
    f836:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f838:	83 30       	cpi	r24, 0x03	; 3
    f83a:	91 05       	cpc	r25, r1
    f83c:	48 f4       	brcc	.+18     	; 0xf850 <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    f83e:	89 e0       	ldi	r24, 0x09	; 9
    f840:	90 e0       	ldi	r25, 0x00	; 0
    f842:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f846:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
        return(-1);
    f84a:	8f ef       	ldi	r24, 0xFF	; 255
    f84c:	9f ef       	ldi	r25, 0xFF	; 255
    f84e:	20 c0       	rjmp	.+64     	; 0xf890 <free_file_descriptor+0x60>
    f850:	ec 01       	movw	r28, r24
    }

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f852:	41 da       	rcall	.-2942   	; 0xecd6 <fileno_to_stream>
    f854:	8c 01       	movw	r16, r24
    if(stream == NULL)
    f856:	89 2b       	or	r24, r25
    f858:	c1 f3       	breq	.-16     	; 0xf84a <free_file_descriptor+0x1a>
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    f85a:	f8 01       	movw	r30, r16
    f85c:	84 85       	ldd	r24, Z+12	; 0x0c
    f85e:	95 85       	ldd	r25, Z+13	; 0x0d

    if(fh != NULL)
    f860:	00 97       	sbiw	r24, 0x00	; 0
    f862:	11 f0       	breq	.+4      	; 0xf868 <free_file_descriptor+0x38>
    {
        safefree(fh);
    f864:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    f868:	f8 01       	movw	r30, r16
    f86a:	80 81       	ld	r24, Z
    f86c:	91 81       	ldd	r25, Z+1	; 0x01
    f86e:	00 97       	sbiw	r24, 0x00	; 0
    f870:	21 f0       	breq	.+8      	; 0xf87a <free_file_descriptor+0x4a>
    f872:	23 81       	ldd	r18, Z+3	; 0x03
    f874:	27 fd       	sbrc	r18, 7
    {
        safefree(stream->buf);
    f876:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safefree>
    }

    __iob[fileno]  = NULL;
    f87a:	fe 01       	movw	r30, r28
    f87c:	ee 0f       	add	r30, r30
    f87e:	ff 1f       	adc	r31, r31
    f880:	eb 54       	subi	r30, 0x4B	; 75
    f882:	f3 4e       	sbci	r31, 0xE3	; 227
    f884:	11 82       	std	Z+1, r1	; 0x01
    f886:	10 82       	st	Z, r1
    safefree(stream);
    f888:	c8 01       	movw	r24, r16
    f88a:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safefree>
    return(fileno);
    f88e:	ce 01       	movw	r24, r28
}
    f890:	df 91       	pop	r29
    f892:	cf 91       	pop	r28
    f894:	1f 91       	pop	r17
    f896:	0f 91       	pop	r16
    f898:	08 95       	ret

0000f89a <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    f89a:	0f 93       	push	r16
    f89c:	1f 93       	push	r17
    f89e:	cf 93       	push	r28
    f8a0:	df 93       	push	r29
    f8a2:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f8a4:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    f8a8:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f8ac:	14 da       	rcall	.-3032   	; 0xecd6 <fileno_to_stream>
    if(stream == NULL)
    f8ae:	89 2b       	or	r24, r25
    f8b0:	d9 f0       	breq	.+54     	; 0xf8e8 <close+0x4e>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f8b2:	c8 01       	movw	r24, r16
    f8b4:	a3 dd       	rcall	.-1210   	; 0xf3fc <fileno_to_fatfs>
    if(fh == NULL)
    f8b6:	00 97       	sbiw	r24, 0x00	; 0
    f8b8:	b9 f0       	breq	.+46     	; 0xf8e8 <close+0x4e>
    {
        return(-1);
    }
    res = f_close(fh);
    f8ba:	0e 94 67 5e 	call	0xbcce	; 0xbcce <f_close>
    free_file_descriptor(fileno);
    f8be:	ec 01       	movw	r28, r24
    f8c0:	c8 01       	movw	r24, r16
    f8c2:	b6 df       	rcall	.-148    	; 0xf830 <free_file_descriptor>
    if (res != FR_OK)
    f8c4:	20 97       	sbiw	r28, 0x00	; 0
    f8c6:	99 f0       	breq	.+38     	; 0xf8ee <close+0x54>
    f8c8:	c4 31       	cpi	r28, 0x14	; 20
    f8ca:	d1 05       	cpc	r29, r1
    f8cc:	38 f4       	brcc	.+14     	; 0xf8dc <close+0x42>
    f8ce:	cc 56       	subi	r28, 0x6C	; 108
    f8d0:	d4 4f       	sbci	r29, 0xF4	; 244
    f8d2:	88 81       	ld	r24, Y
    f8d4:	08 2e       	mov	r0, r24
    f8d6:	00 0c       	add	r0, r0
    f8d8:	99 0b       	sbc	r25, r25
    f8da:	02 c0       	rjmp	.+4      	; 0xf8e0 <close+0x46>
    f8dc:	83 e2       	ldi	r24, 0x23	; 35
    f8de:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f8e0:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f8e4:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
        return(-1);
    f8e8:	8f ef       	ldi	r24, 0xFF	; 255
    f8ea:	9f ef       	ldi	r25, 0xFF	; 255
    f8ec:	02 c0       	rjmp	.+4      	; 0xf8f2 <close+0x58>
    }
    return(0);
    f8ee:	80 e0       	ldi	r24, 0x00	; 0
    f8f0:	90 e0       	ldi	r25, 0x00	; 0
}
    f8f2:	df 91       	pop	r29
    f8f4:	cf 91       	pop	r28
    f8f6:	1f 91       	pop	r17
    f8f8:	0f 91       	pop	r16
    f8fa:	08 95       	ret

0000f8fc <fclose>:
/// @return  0 on sucess.
/// @return  -1 on error witrh errno set.
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    f8fc:	d0 d9       	rcall	.-3168   	; 0xec9e <fileno>
    if(fn < 0)
    f8fe:	97 fd       	sbrc	r25, 7
        return(EOF);

    return( close(fn) );
    f900:	02 c0       	rjmp	.+4      	; 0xf906 <fclose+0xa>
    f902:	cb cf       	rjmp	.-106    	; 0xf89a <close>
    f904:	08 95       	ret
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    if(fn < 0)
        return(EOF);
    f906:	8f ef       	ldi	r24, 0xFF	; 255
    f908:	9f ef       	ldi	r25, 0xFF	; 255

    return( close(fn) );
}
    f90a:	08 95       	ret

0000f90c <new_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure with errno set.
MEMSPACE
int new_file_descriptor( void )
{
    f90c:	0f 93       	push	r16
    f90e:	1f 93       	push	r17
    f910:	cf 93       	push	r28
    f912:	df 93       	push	r29
    f914:	e5 eb       	ldi	r30, 0xB5	; 181
    f916:	fc e1       	ldi	r31, 0x1C	; 28
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    f918:	c0 e0       	ldi	r28, 0x00	; 0
    f91a:	d0 e0       	ldi	r29, 0x00	; 0
    f91c:	21 96       	adiw	r28, 0x01	; 1
    f91e:	c0 31       	cpi	r28, 0x10	; 16
    f920:	d1 05       	cpc	r29, r1
    f922:	49 f0       	breq	.+18     	; 0xf936 <new_file_descriptor+0x2a>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f924:	c3 30       	cpi	r28, 0x03	; 3
    f926:	d1 05       	cpc	r29, r1
    f928:	24 f0       	brlt	.+8      	; 0xf932 <new_file_descriptor+0x26>

    for(i=0;i<MAX_FILES;++i)
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
    f92a:	82 81       	ldd	r24, Z+2	; 0x02
    f92c:	93 81       	ldd	r25, Z+3	; 0x03
    f92e:	89 2b       	or	r24, r25
    f930:	59 f0       	breq	.+22     	; 0xf948 <new_file_descriptor+0x3c>
    f932:	32 96       	adiw	r30, 0x02	; 2
    f934:	f3 cf       	rjmp	.-26     	; 0xf91c <new_file_descriptor+0x10>
            __iob[i]  = stream;
            fdev_set_udata(stream, (void *) fh);
            return(i);
        }
    }
    errno = ENFILE;
    f936:	87 e1       	ldi	r24, 0x17	; 23
    f938:	90 e0       	ldi	r25, 0x00	; 0
    f93a:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    f93e:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    return(-1);
    f942:	8f ef       	ldi	r24, 0xFF	; 255
    f944:	9f ef       	ldi	r25, 0xFF	; 255
    f946:	22 c0       	rjmp	.+68     	; 0xf98c <new_file_descriptor+0x80>
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
        {
            stream = (FILE *) safecalloc(sizeof(FILE),1);
    f948:	61 e0       	ldi	r22, 0x01	; 1
    f94a:	70 e0       	ldi	r23, 0x00	; 0
    f94c:	8e e0       	ldi	r24, 0x0E	; 14
    f94e:	90 e0       	ldi	r25, 0x00	; 0
    f950:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <safecalloc>
    f954:	8c 01       	movw	r16, r24
            if(stream == NULL)
    f956:	89 2b       	or	r24, r25
    f958:	59 f0       	breq	.+22     	; 0xf970 <new_file_descriptor+0x64>
            {
                errno = ENOMEM;
                return(-1);
            }
            fh = (FIL *) safecalloc(sizeof(FIL),1);
    f95a:	61 e0       	ldi	r22, 0x01	; 1
    f95c:	70 e0       	ldi	r23, 0x00	; 0
    f95e:	84 e2       	ldi	r24, 0x24	; 36
    f960:	92 e0       	ldi	r25, 0x02	; 2
    f962:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <safecalloc>
            if(fh == NULL)
    f966:	00 97       	sbiw	r24, 0x00	; 0
    f968:	31 f4       	brne	.+12     	; 0xf976 <new_file_descriptor+0x6a>
            {
                safefree(stream);
    f96a:	c8 01       	movw	r24, r16
    f96c:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safefree>
                errno = ENOMEM;
    f970:	8c e0       	ldi	r24, 0x0C	; 12
    f972:	90 e0       	ldi	r25, 0x00	; 0
    f974:	e2 cf       	rjmp	.-60     	; 0xf93a <new_file_descriptor+0x2e>
                return(-1);
            }

            __iob[i]  = stream;
    f976:	fe 01       	movw	r30, r28
    f978:	ee 0f       	add	r30, r30
    f97a:	ff 1f       	adc	r31, r31
    f97c:	eb 54       	subi	r30, 0x4B	; 75
    f97e:	f3 4e       	sbci	r31, 0xE3	; 227
    f980:	11 83       	std	Z+1, r17	; 0x01
    f982:	00 83       	st	Z, r16
            fdev_set_udata(stream, (void *) fh);
    f984:	f8 01       	movw	r30, r16
    f986:	95 87       	std	Z+13, r25	; 0x0d
    f988:	84 87       	std	Z+12, r24	; 0x0c
{
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    f98a:	ce 01       	movw	r24, r28
            return(i);
        }
    }
    errno = ENFILE;
    return(-1);
}
    f98c:	df 91       	pop	r29
    f98e:	cf 91       	pop	r28
    f990:	1f 91       	pop	r17
    f992:	0f 91       	pop	r16
    f994:	08 95       	ret

0000f996 <open>:
///
/// @return fileno on success.
/// @return -1 on error with errno set.
MEMSPACE
int open(const char *pathname, int flags)
{
    f996:	a0 e0       	ldi	r26, 0x00	; 0
    f998:	b0 e0       	ldi	r27, 0x00	; 0
    f99a:	e1 ed       	ldi	r30, 0xD1	; 209
    f99c:	fc e7       	ldi	r31, 0x7C	; 124
    f99e:	0c 94 6a e6 	jmp	0x1ccd4	; 0x1ccd4 <__prologue_saves__+0x8>
    f9a2:	5c 01       	movw	r10, r24
    f9a4:	6b 01       	movw	r12, r22
    int fatfs_modes;
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f9a6:	10 92 b4 1c 	sts	0x1CB4, r1	; 0x801cb4 <errno+0x1>
    f9aa:	10 92 b3 1c 	sts	0x1CB3, r1	; 0x801cb3 <errno>
        errno = fatfs_to_errno(res);
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
    f9ae:	7b 01       	movw	r14, r22
    f9b0:	83 e0       	ldi	r24, 0x03	; 3
    f9b2:	e8 22       	and	r14, r24
    f9b4:	ff 24       	eor	r15, r15
    f9b6:	e2 e0       	ldi	r30, 0x02	; 2
    f9b8:	ee 16       	cp	r14, r30
    f9ba:	f1 04       	cpc	r15, r1
    f9bc:	31 f0       	breq	.+12     	; 0xf9ca <open+0x34>
        fatfs_modes = FA_READ | FA_WRITE;
    else if((flags & O_ACCMODE) == O_RDONLY)
    f9be:	e1 14       	cp	r14, r1
    f9c0:	f1 04       	cpc	r15, r1
    f9c2:	31 f0       	breq	.+12     	; 0xf9d0 <open+0x3a>
        fatfs_modes = FA_READ;
    else
        fatfs_modes = FA_WRITE;
    f9c4:	02 e0       	ldi	r16, 0x02	; 2
    f9c6:	10 e0       	ldi	r17, 0x00	; 0
    f9c8:	05 c0       	rjmp	.+10     	; 0xf9d4 <open+0x3e>
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
        fatfs_modes = FA_READ | FA_WRITE;
    f9ca:	03 e0       	ldi	r16, 0x03	; 3
    f9cc:	10 e0       	ldi	r17, 0x00	; 0
    f9ce:	02 c0       	rjmp	.+4      	; 0xf9d4 <open+0x3e>
    else if((flags & O_ACCMODE) == O_RDONLY)
        fatfs_modes = FA_READ;
    f9d0:	01 e0       	ldi	r16, 0x01	; 1
    f9d2:	10 e0       	ldi	r17, 0x00	; 0
    else
        fatfs_modes = FA_WRITE;

    if(flags & O_CREAT)
    f9d4:	c6 fe       	sbrs	r12, 6
    f9d6:	05 c0       	rjmp	.+10     	; 0xf9e2 <open+0x4c>
    {
        if(flags & O_TRUNC)
    f9d8:	d1 fe       	sbrs	r13, 1
    f9da:	02 c0       	rjmp	.+4      	; 0xf9e0 <open+0x4a>
            fatfs_modes |= FA_CREATE_ALWAYS;
    f9dc:	08 60       	ori	r16, 0x08	; 8
    f9de:	01 c0       	rjmp	.+2      	; 0xf9e2 <open+0x4c>
        else
            fatfs_modes |= FA_OPEN_ALWAYS;
    f9e0:	00 61       	ori	r16, 0x10	; 16
    }

    fileno = new_file_descriptor();
    f9e2:	94 df       	rcall	.-216    	; 0xf90c <new_file_descriptor>
    f9e4:	3c 01       	movw	r6, r24

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f9e6:	77 d9       	rcall	.-3346   	; 0xecd6 <fileno_to_stream>
    f9e8:	ec 01       	movw	r28, r24
    f9ea:	c3 01       	movw	r24, r6
    if(stream == NULL)
    {
        free_file_descriptor(fileno);
    f9ec:	20 97       	sbiw	r28, 0x00	; 0

    fileno = new_file_descriptor();

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    f9ee:	09 f4       	brne	.+2      	; 0xf9f2 <open+0x5c>
    f9f0:	48 c0       	rjmp	.+144    	; 0xfa82 <open+0xec>
        free_file_descriptor(fileno);
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f9f2:	04 dd       	rcall	.-1528   	; 0xf3fc <fileno_to_fatfs>
    f9f4:	4c 01       	movw	r8, r24
    f9f6:	00 97       	sbiw	r24, 0x00	; 0
    if(fh == NULL)
    f9f8:	59 f4       	brne	.+22     	; 0xfa10 <open+0x7a>
    {
        free_file_descriptor(fileno);
    f9fa:	c3 01       	movw	r24, r6
    f9fc:	19 df       	rcall	.-462    	; 0xf830 <free_file_descriptor>
    f9fe:	89 e0       	ldi	r24, 0x09	; 9
        errno = EBADF;
    fa00:	90 e0       	ldi	r25, 0x00	; 0
    fa02:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    fa06:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    fa0a:	8f ef       	ldi	r24, 0xFF	; 255
        return(-1);
    fa0c:	9f ef       	ldi	r25, 0xFF	; 255
    fa0e:	5d c0       	rjmp	.+186    	; 0xfaca <open+0x134>
    fa10:	40 2f       	mov	r20, r16
    }
    res = f_open(fh, pathname, (BYTE) (fatfs_modes & 0xff));
    fa12:	b5 01       	movw	r22, r10
    fa14:	0e 94 4d 59 	call	0xb29a	; 0xb29a <f_open>
    fa18:	00 97       	sbiw	r24, 0x00	; 0
    if(res != FR_OK)
    fa1a:	91 f0       	breq	.+36     	; 0xfa40 <open+0xaa>
    fa1c:	84 31       	cpi	r24, 0x14	; 20
    fa1e:	91 05       	cpc	r25, r1
    fa20:	40 f4       	brcc	.+16     	; 0xfa32 <open+0x9c>
    fa22:	fc 01       	movw	r30, r24
    fa24:	ec 56       	subi	r30, 0x6C	; 108
    fa26:	f4 4f       	sbci	r31, 0xF4	; 244
    fa28:	80 81       	ld	r24, Z
    fa2a:	08 2e       	mov	r0, r24
    fa2c:	00 0c       	add	r0, r0
    fa2e:	99 0b       	sbc	r25, r25
    fa30:	02 c0       	rjmp	.+4      	; 0xfa36 <open+0xa0>
    fa32:	83 e2       	ldi	r24, 0x23	; 35
    fa34:	90 e0       	ldi	r25, 0x00	; 0
    fa36:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
    {
        errno = fatfs_to_errno(res);
    fa3a:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    fa3e:	20 c0       	rjmp	.+64     	; 0xfa80 <open+0xea>
    fa40:	d2 fe       	sbrs	r13, 2
        free_file_descriptor(fileno);
        return(-1);
    }
    if(flags & O_APPEND)
    fa42:	21 c0       	rjmp	.+66     	; 0xfa86 <open+0xf0>
    fa44:	f4 01       	movw	r30, r8
    {
///  Seek to end of the file
        res = f_lseek(fh, f_size(fh));
    fa46:	42 85       	ldd	r20, Z+10	; 0x0a
    fa48:	53 85       	ldd	r21, Z+11	; 0x0b
    fa4a:	64 85       	ldd	r22, Z+12	; 0x0c
    fa4c:	75 85       	ldd	r23, Z+13	; 0x0d
    fa4e:	c4 01       	movw	r24, r8
    fa50:	0e 94 11 60 	call	0xc022	; 0xc022 <f_lseek>
    fa54:	00 97       	sbiw	r24, 0x00	; 0
        if (res != FR_OK)
    fa56:	b9 f0       	breq	.+46     	; 0xfa86 <open+0xf0>
    fa58:	84 31       	cpi	r24, 0x14	; 20
    fa5a:	91 05       	cpc	r25, r1
    fa5c:	40 f4       	brcc	.+16     	; 0xfa6e <open+0xd8>
    fa5e:	fc 01       	movw	r30, r24
    fa60:	ec 56       	subi	r30, 0x6C	; 108
    fa62:	f4 4f       	sbci	r31, 0xF4	; 244
    fa64:	80 81       	ld	r24, Z
    fa66:	08 2e       	mov	r0, r24
    fa68:	00 0c       	add	r0, r0
    fa6a:	99 0b       	sbc	r25, r25
    fa6c:	02 c0       	rjmp	.+4      	; 0xfa72 <open+0xdc>
    fa6e:	83 e2       	ldi	r24, 0x23	; 35
    fa70:	90 e0       	ldi	r25, 0x00	; 0
    fa72:	90 93 b4 1c 	sts	0x1CB4, r25	; 0x801cb4 <errno+0x1>
        {
            errno = fatfs_to_errno(res);
    fa76:	80 93 b3 1c 	sts	0x1CB3, r24	; 0x801cb3 <errno>
    fa7a:	c4 01       	movw	r24, r8
            f_close(fh);
    fa7c:	0e 94 67 5e 	call	0xbcce	; 0xbcce <f_close>
            free_file_descriptor(fileno);
    fa80:	c3 01       	movw	r24, r6
    fa82:	d6 de       	rcall	.-596    	; 0xf830 <free_file_descriptor>
    fa84:	c2 cf       	rjmp	.-124    	; 0xfa0a <open+0x74>
    fa86:	f2 e0       	ldi	r31, 0x02	; 2
            return(-1);
        }
    }

    if((flags & O_ACCMODE) == O_RDWR)
    fa88:	ef 16       	cp	r14, r31
    fa8a:	f1 04       	cpc	r15, r1
    fa8c:	51 f4       	brne	.+20     	; 0xfaa2 <open+0x10c>
    fa8e:	80 ee       	ldi	r24, 0xE0	; 224
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    fa90:	94 e7       	ldi	r25, 0x74	; 116
    fa92:	99 87       	std	Y+9, r25	; 0x09
    fa94:	88 87       	std	Y+8, r24	; 0x08
    fa96:	8d e5       	ldi	r24, 0x5D	; 93
        stream->get = fatfs_getc;
    fa98:	94 e7       	ldi	r25, 0x74	; 116
    fa9a:	9b 87       	std	Y+11, r25	; 0x0b
    fa9c:	8a 87       	std	Y+10, r24	; 0x0a
    fa9e:	83 e0       	ldi	r24, 0x03	; 3
        stream->flags = _FDEV_SETUP_RW;
    faa0:	12 c0       	rjmp	.+36     	; 0xfac6 <open+0x130>
    faa2:	e1 14       	cp	r14, r1
    }
    else if((flags & O_ACCMODE) == O_RDONLY)
    faa4:	f1 04       	cpc	r15, r1
    faa6:	41 f4       	brne	.+16     	; 0xfab8 <open+0x122>
    faa8:	19 86       	std	Y+9, r1	; 0x09
    {
// FIXME fdevopen should do this
        stream->put = NULL;
    faaa:	18 86       	std	Y+8, r1	; 0x08
    faac:	8d e5       	ldi	r24, 0x5D	; 93
        stream->get = fatfs_getc;
    faae:	94 e7       	ldi	r25, 0x74	; 116
    fab0:	9b 87       	std	Y+11, r25	; 0x0b
    fab2:	8a 87       	std	Y+10, r24	; 0x0a
    fab4:	81 e0       	ldi	r24, 0x01	; 1
        stream->flags = _FDEV_SETUP_READ;
    fab6:	07 c0       	rjmp	.+14     	; 0xfac6 <open+0x130>
    fab8:	80 ee       	ldi	r24, 0xE0	; 224
    }
    else
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    faba:	94 e7       	ldi	r25, 0x74	; 116
    fabc:	99 87       	std	Y+9, r25	; 0x09
    fabe:	88 87       	std	Y+8, r24	; 0x08
    fac0:	1b 86       	std	Y+11, r1	; 0x0b
        stream->get = NULL;
    fac2:	1a 86       	std	Y+10, r1	; 0x0a
    fac4:	82 e0       	ldi	r24, 0x02	; 2
        stream->flags = _FDEV_SETUP_WRITE;
    fac6:	8b 83       	std	Y+3, r24	; 0x03
    fac8:	c3 01       	movw	r24, r6
    }

    return(fileno);
    faca:	cd b7       	in	r28, 0x3d	; 61
}
    facc:	de b7       	in	r29, 0x3e	; 62
    face:	ee e0       	ldi	r30, 0x0E	; 14
    fad0:	0c 94 86 e6 	jmp	0x1cd0c	; 0x1cd0c <__epilogue_restores__+0x8>

0000fad4 <posix_fopen_modes_to_open>:
    fad4:	cf 93       	push	r28
/// @return open mode flags.
/// @return -1 on error.
/// @warning read and write BOTH share the same stream buffer and buffer index pointers.
MEMSPACE
int posix_fopen_modes_to_open(const char *mode)
{
    fad6:	df 93       	push	r29
    fad8:	ec 01       	movw	r28, r24
    int flag = 0;

    if(modecmp(mode,"r") || modecmp(mode,"rb"))
    fada:	62 e4       	ldi	r22, 0x42	; 66
    fadc:	73 e0       	ldi	r23, 0x03	; 3
    fade:	0e 94 40 31 	call	0x6280	; 0x6280 <strcmp>
    fae2:	00 97       	sbiw	r24, 0x00	; 0
    fae4:	09 f4       	brne	.+2      	; 0xfae8 <posix_fopen_modes_to_open+0x14>
    fae6:	5d c0       	rjmp	.+186    	; 0xfba2 <posix_fopen_modes_to_open+0xce>
    fae8:	6c ee       	ldi	r22, 0xEC	; 236
    faea:	78 e0       	ldi	r23, 0x08	; 8
    faec:	ce 01       	movw	r24, r28
    faee:	0e 94 40 31 	call	0x6280	; 0x6280 <strcmp>
    faf2:	00 97       	sbiw	r24, 0x00	; 0
    faf4:	09 f4       	brne	.+2      	; 0xfaf8 <posix_fopen_modes_to_open+0x24>
    faf6:	55 c0       	rjmp	.+170    	; 0xfba2 <posix_fopen_modes_to_open+0xce>
    {
        flag = O_RDONLY;
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    faf8:	6f ee       	ldi	r22, 0xEF	; 239
    fafa:	78 e0       	ldi	r23, 0x08	; 8
    fafc:	ce 01       	movw	r24, r28
    fafe:	0e 94 40 31 	call	0x6280	; 0x6280 <strcmp>
    fb02:	89 2b       	or	r24, r25
    fb04:	09 f4       	brne	.+2      	; 0xfb08 <posix_fopen_modes_to_open+0x34>
    fb06:	42 c0       	rjmp	.+132    	; 0xfb8c <posix_fopen_modes_to_open+0xb8>
    fb08:	62 ef       	ldi	r22, 0xF2	; 242
    fb0a:	78 e0       	ldi	r23, 0x08	; 8
    fb0c:	ce 01       	movw	r24, r28
    fb0e:	0e 94 40 31 	call	0x6280	; 0x6280 <strcmp>
    fb12:	89 2b       	or	r24, r25
    fb14:	d9 f1       	breq	.+118    	; 0xfb8c <posix_fopen_modes_to_open+0xb8>
    fb16:	66 ef       	ldi	r22, 0xF6	; 246
    fb18:	78 e0       	ldi	r23, 0x08	; 8
    fb1a:	ce 01       	movw	r24, r28
    fb1c:	0e 94 40 31 	call	0x6280	; 0x6280 <strcmp>
    fb20:	89 2b       	or	r24, r25
    fb22:	a1 f1       	breq	.+104    	; 0xfb8c <posix_fopen_modes_to_open+0xb8>
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    fb24:	6b ea       	ldi	r22, 0xAB	; 171
    fb26:	7a e0       	ldi	r23, 0x0A	; 10
    fb28:	ce 01       	movw	r24, r28
    fb2a:	0e 94 40 31 	call	0x6280	; 0x6280 <strcmp>
    fb2e:	89 2b       	or	r24, r25
    fb30:	81 f1       	breq	.+96     	; 0xfb92 <posix_fopen_modes_to_open+0xbe>
    fb32:	6a ef       	ldi	r22, 0xFA	; 250
    fb34:	78 e0       	ldi	r23, 0x08	; 8
    fb36:	ce 01       	movw	r24, r28
    fb38:	0e 94 40 31 	call	0x6280	; 0x6280 <strcmp>
    fb3c:	89 2b       	or	r24, r25
    fb3e:	49 f1       	breq	.+82     	; 0xfb92 <posix_fopen_modes_to_open+0xbe>
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    fb40:	6d ef       	ldi	r22, 0xFD	; 253
    fb42:	78 e0       	ldi	r23, 0x08	; 8
    fb44:	ce 01       	movw	r24, r28
    fb46:	0e 94 40 31 	call	0x6280	; 0x6280 <strcmp>
    fb4a:	89 2b       	or	r24, r25
    fb4c:	29 f1       	breq	.+74     	; 0xfb98 <posix_fopen_modes_to_open+0xc4>
    fb4e:	60 e0       	ldi	r22, 0x00	; 0
    fb50:	79 e0       	ldi	r23, 0x09	; 9
    fb52:	ce 01       	movw	r24, r28
    fb54:	0e 94 40 31 	call	0x6280	; 0x6280 <strcmp>
    fb58:	89 2b       	or	r24, r25
    fb5a:	f1 f0       	breq	.+60     	; 0xfb98 <posix_fopen_modes_to_open+0xc4>
    fb5c:	64 e0       	ldi	r22, 0x04	; 4
    fb5e:	79 e0       	ldi	r23, 0x09	; 9
    fb60:	ce 01       	movw	r24, r28
    fb62:	0e 94 40 31 	call	0x6280	; 0x6280 <strcmp>
    fb66:	89 2b       	or	r24, r25
    fb68:	b9 f0       	breq	.+46     	; 0xfb98 <posix_fopen_modes_to_open+0xc4>
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    fb6a:	67 e1       	ldi	r22, 0x17	; 23
    fb6c:	73 e1       	ldi	r23, 0x13	; 19
    fb6e:	ce 01       	movw	r24, r28
    fb70:	0e 94 40 31 	call	0x6280	; 0x6280 <strcmp>
    fb74:	89 2b       	or	r24, r25
    fb76:	99 f0       	breq	.+38     	; 0xfb9e <posix_fopen_modes_to_open+0xca>
    fb78:	68 e0       	ldi	r22, 0x08	; 8
    fb7a:	79 e0       	ldi	r23, 0x09	; 9
    fb7c:	ce 01       	movw	r24, r28
    fb7e:	0e 94 40 31 	call	0x6280	; 0x6280 <strcmp>
    fb82:	89 2b       	or	r24, r25
    fb84:	61 f0       	breq	.+24     	; 0xfb9e <posix_fopen_modes_to_open+0xca>
        return(flag);
    }
    if(modecmp(mode,"a+") || modecmp(mode, "a+b" ) || modecmp(mode, "ab+" ))
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    fb86:	8f ef       	ldi	r24, 0xFF	; 255
    fb88:	9f ef       	ldi	r25, 0xFF	; 255
    fb8a:	0b c0       	rjmp	.+22     	; 0xfba2 <posix_fopen_modes_to_open+0xce>
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    fb8c:	82 e0       	ldi	r24, 0x02	; 2
    fb8e:	92 e0       	ldi	r25, 0x02	; 2
    fb90:	08 c0       	rjmp	.+16     	; 0xfba2 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    fb92:	81 e4       	ldi	r24, 0x41	; 65
    fb94:	92 e0       	ldi	r25, 0x02	; 2
    fb96:	05 c0       	rjmp	.+10     	; 0xfba2 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    fb98:	82 e4       	ldi	r24, 0x42	; 66
    fb9a:	92 e0       	ldi	r25, 0x02	; 2
    fb9c:	02 c0       	rjmp	.+4      	; 0xfba2 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    {
        flag = O_WRONLY | O_CREAT | O_APPEND;
        return(flag);
    fb9e:	81 e4       	ldi	r24, 0x41	; 65
    fba0:	94 e0       	ldi	r25, 0x04	; 4
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    }
    return(-1);                                   // nvalid mode
}
    fba2:	df 91       	pop	r29
    fba4:	cf 91       	pop	r28
    fba6:	08 95       	ret

0000fba8 <fopen>:
///
/// @return stream * on success.
/// @return NULL on error with errno set.
MEMSPACE
FILE *fopen(const char *path, const char *mode)
{
    fba8:	cf 93       	push	r28
    fbaa:	df 93       	push	r29
    fbac:	ec 01       	movw	r28, r24
    fbae:	cb 01       	movw	r24, r22
    int flags = posix_fopen_modes_to_open(mode);
    fbb0:	91 df       	rcall	.-222    	; 0xfad4 <posix_fopen_modes_to_open>
    int fileno = open(path, flags);
    fbb2:	bc 01       	movw	r22, r24
    fbb4:	ce 01       	movw	r24, r28

// checks if fileno out of bounds
    return( fileno_to_stream(fileno) );
    fbb6:	ef de       	rcall	.-546    	; 0xf996 <open>
    fbb8:	8e d8       	rcall	.-3812   	; 0xecd6 <fileno_to_stream>
}
    fbba:	df 91       	pop	r29
    fbbc:	cf 91       	pop	r28
    fbbe:	08 95       	ret

0000fbc0 <fprintf>:
/// @param[in] ...: vararg list or arguments
/// @return size of printed result
MEMSPACE
int
fprintf(FILE *fp, const char *format, ...)
{
    fbc0:	a8 e0       	ldi	r26, 0x08	; 8
    fbc2:	b0 e0       	ldi	r27, 0x00	; 0
    fbc4:	e6 ee       	ldi	r30, 0xE6	; 230
    fbc6:	fd e7       	ldi	r31, 0x7D	; 125
    fbc8:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
    printf_t fn;
    va_list va;

    fn.put = _fprintf_putc;
    fbcc:	83 ed       	ldi	r24, 0xD3	; 211
    fbce:	95 e7       	ldi	r25, 0x75	; 117
    fbd0:	9a 83       	std	Y+2, r25	; 0x02
    fbd2:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    fbd4:	18 86       	std	Y+8, r1	; 0x08
    fbd6:	1f 82       	std	Y+7, r1	; 0x07
    fn.buffer = (void *) fp;
    fbd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    fbda:	9e 85       	ldd	r25, Y+14	; 0x0e
    fbdc:	9c 83       	std	Y+4, r25	; 0x04
    fbde:	8b 83       	std	Y+3, r24	; 0x03

    va_start(va, format);
    _printf_fn(&fn, format, va);
    fbe0:	4f 85       	ldd	r20, Y+15	; 0x0f
    fbe2:	58 89       	ldd	r21, Y+16	; 0x10
    fbe4:	60 e8       	ldi	r22, 0x80	; 128
    fbe6:	9e 01       	movw	r18, r28
    fbe8:	2f 5e       	subi	r18, 0xEF	; 239
    fbea:	3f 4f       	sbci	r19, 0xFF	; 255
    fbec:	ce 01       	movw	r24, r28
    fbee:	01 96       	adiw	r24, 0x01	; 1
    fbf0:	0e 94 00 42 	call	0x8400	; 0x8400 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    fbf4:	8f 81       	ldd	r24, Y+7	; 0x07
    fbf6:	98 85       	ldd	r25, Y+8	; 0x08
    fbf8:	28 96       	adiw	r28, 0x08	; 8
    fbfa:	e2 e0       	ldi	r30, 0x02	; 2
    fbfc:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

0000fc00 <posix_help>:
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
    return(_pagesize);
}
    fc00:	cf 93       	push	r28
    fc02:	df 93       	push	r29
    fc04:	00 d0       	rcall	.+0      	; 0xfc06 <posix_help+0x6>
    fc06:	1f 92       	push	r1
    fc08:	ec 01       	movw	r28, r24
    fc0a:	84 e3       	ldi	r24, 0x34	; 52
    fc0c:	9e e0       	ldi	r25, 0x0E	; 14
    fc0e:	a0 e0       	ldi	r26, 0x00	; 0
    fc10:	ed b7       	in	r30, 0x3d	; 61
    fc12:	fe b7       	in	r31, 0x3e	; 62
    fc14:	81 83       	std	Z+1, r24	; 0x01
    fc16:	92 83       	std	Z+2, r25	; 0x02
    fc18:	a3 83       	std	Z+3, r26	; 0x03
    fc1a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    fc1e:	cd 2b       	or	r28, r29
    fc20:	51 f0       	breq	.+20     	; 0xfc36 <posix_help+0x36>
    fc22:	8e e6       	ldi	r24, 0x6E	; 110
    fc24:	9d e0       	ldi	r25, 0x0D	; 13
    fc26:	a0 e0       	ldi	r26, 0x00	; 0
    fc28:	ed b7       	in	r30, 0x3d	; 61
    fc2a:	fe b7       	in	r31, 0x3e	; 62
    fc2c:	81 83       	std	Z+1, r24	; 0x01
    fc2e:	92 83       	std	Z+2, r25	; 0x02
    fc30:	a3 83       	std	Z+3, r26	; 0x03
    fc32:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    fc36:	cd b7       	in	r28, 0x3d	; 61
    fc38:	de b7       	in	r29, 0x3e	; 62
    fc3a:	23 96       	adiw	r28, 0x03	; 3
    fc3c:	e2 e0       	ldi	r30, 0x02	; 2
    fc3e:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

0000fc42 <copy>:
    fc42:	4f 92       	push	r4
    fc44:	5f 92       	push	r5
    fc46:	6f 92       	push	r6
    fc48:	8f 92       	push	r8
    fc4a:	9f 92       	push	r9
    fc4c:	af 92       	push	r10
    fc4e:	bf 92       	push	r11
    fc50:	cf 92       	push	r12
    fc52:	df 92       	push	r13
    fc54:	ef 92       	push	r14
    fc56:	ff 92       	push	r15
    fc58:	0f 93       	push	r16
    fc5a:	1f 93       	push	r17
    fc5c:	cf 93       	push	r28
    fc5e:	df 93       	push	r29
    fc60:	ad b7       	in	r26, 0x3d	; 61
    fc62:	be b7       	in	r27, 0x3e	; 62
    fc64:	17 97       	sbiw	r26, 0x07	; 7
    fc66:	0f b6       	in	r0, 0x3f	; 63
    fc68:	f8 94       	cli
    fc6a:	be bf       	out	0x3e, r27	; 62
    fc6c:	0f be       	out	0x3f, r0	; 63
    fc6e:	ad bf       	out	0x3d, r26	; 61
    fc70:	8c 01       	movw	r16, r24
    fc72:	eb 01       	movw	r28, r22
    fc74:	ed b7       	in	r30, 0x3d	; 61
    fc76:	fe b7       	in	r31, 0x3e	; 62
    fc78:	95 83       	std	Z+5, r25	; 0x05
    fc7a:	84 83       	std	Z+4, r24	; 0x04
    fc7c:	8b ec       	ldi	r24, 0xCB	; 203
    fc7e:	9c e0       	ldi	r25, 0x0C	; 12
    fc80:	a0 e0       	ldi	r26, 0x00	; 0
    fc82:	81 83       	std	Z+1, r24	; 0x01
    fc84:	92 83       	std	Z+2, r25	; 0x02
    fc86:	a3 83       	std	Z+3, r26	; 0x03
    fc88:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    fc8c:	6c ee       	ldi	r22, 0xEC	; 236
    fc8e:	78 e0       	ldi	r23, 0x08	; 8
    fc90:	c8 01       	movw	r24, r16
    fc92:	8a df       	rcall	.-236    	; 0xfba8 <fopen>
    fc94:	7c 01       	movw	r14, r24
    fc96:	ed b7       	in	r30, 0x3d	; 61
    fc98:	fe b7       	in	r31, 0x3e	; 62
    fc9a:	89 2b       	or	r24, r25
    fc9c:	59 f4       	brne	.+22     	; 0xfcb4 <copy+0x72>
    fc9e:	15 83       	std	Z+5, r17	; 0x05
    fca0:	04 83       	std	Z+4, r16	; 0x04
    fca2:	8b eb       	ldi	r24, 0xBB	; 187
    fca4:	9c e0       	ldi	r25, 0x0C	; 12
    fca6:	a0 e0       	ldi	r26, 0x00	; 0
    fca8:	81 83       	std	Z+1, r24	; 0x01
    fcaa:	92 83       	std	Z+2, r25	; 0x02
    fcac:	a3 83       	std	Z+3, r26	; 0x03
    fcae:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    fcb2:	20 c0       	rjmp	.+64     	; 0xfcf4 <copy+0xb2>
    fcb4:	d5 83       	std	Z+5, r29	; 0x05
    fcb6:	c4 83       	std	Z+4, r28	; 0x04
    fcb8:	8e ea       	ldi	r24, 0xAE	; 174
    fcba:	9c e0       	ldi	r25, 0x0C	; 12
    fcbc:	a0 e0       	ldi	r26, 0x00	; 0
    fcbe:	81 83       	std	Z+1, r24	; 0x01
    fcc0:	92 83       	std	Z+2, r25	; 0x02
    fcc2:	a3 83       	std	Z+3, r26	; 0x03
    fcc4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    fcc8:	6a ef       	ldi	r22, 0xFA	; 250
    fcca:	78 e0       	ldi	r23, 0x08	; 8
    fccc:	ce 01       	movw	r24, r28
    fcce:	6c df       	rcall	.-296    	; 0xfba8 <fopen>
    fcd0:	8c 01       	movw	r16, r24
    fcd2:	89 2b       	or	r24, r25
    fcd4:	a1 f4       	brne	.+40     	; 0xfcfe <copy+0xbc>
    fcd6:	ed b7       	in	r30, 0x3d	; 61
    fcd8:	fe b7       	in	r31, 0x3e	; 62
    fcda:	d5 83       	std	Z+5, r29	; 0x05
    fcdc:	c4 83       	std	Z+4, r28	; 0x04
    fcde:	8e e9       	ldi	r24, 0x9E	; 158
    fce0:	9c e0       	ldi	r25, 0x0C	; 12
    fce2:	a0 e0       	ldi	r26, 0x00	; 0
    fce4:	81 83       	std	Z+1, r24	; 0x01
    fce6:	92 83       	std	Z+2, r25	; 0x02
    fce8:	a3 83       	std	Z+3, r26	; 0x03
    fcea:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    fcee:	80 e0       	ldi	r24, 0x00	; 0
    fcf0:	90 e0       	ldi	r25, 0x00	; 0
    fcf2:	04 de       	rcall	.-1016   	; 0xf8fc <fclose>
    fcf4:	6f ef       	ldi	r22, 0xFF	; 255
    fcf6:	7f ef       	ldi	r23, 0xFF	; 255
    fcf8:	8f ef       	ldi	r24, 0xFF	; 255
    fcfa:	9f ef       	ldi	r25, 0xFF	; 255
    fcfc:	68 c0       	rjmp	.+208    	; 0xfdce <copy+0x18c>
    fcfe:	61 e0       	ldi	r22, 0x01	; 1
    fd00:	70 e0       	ldi	r23, 0x00	; 0
    fd02:	80 e0       	ldi	r24, 0x00	; 0
    fd04:	92 e0       	ldi	r25, 0x02	; 2
    fd06:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <safecalloc>
    fd0a:	6c 01       	movw	r12, r24
    fd0c:	89 2b       	or	r24, r25
    fd0e:	21 f4       	brne	.+8      	; 0xfd18 <copy+0xd6>
    fd10:	c7 01       	movw	r24, r14
    fd12:	f4 dd       	rcall	.-1048   	; 0xf8fc <fclose>
    fd14:	c8 01       	movw	r24, r16
    fd16:	ed cf       	rjmp	.-38     	; 0xfcf2 <copy+0xb0>
    fd18:	81 e9       	ldi	r24, 0x91	; 145
    fd1a:	9c e0       	ldi	r25, 0x0C	; 12
    fd1c:	a0 e0       	ldi	r26, 0x00	; 0
    fd1e:	ed b7       	in	r30, 0x3d	; 61
    fd20:	fe b7       	in	r31, 0x3e	; 62
    fd22:	81 83       	std	Z+1, r24	; 0x01
    fd24:	92 83       	std	Z+2, r25	; 0x02
    fd26:	a3 83       	std	Z+3, r26	; 0x03
    fd28:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    fd2c:	81 2c       	mov	r8, r1
    fd2e:	91 2c       	mov	r9, r1
    fd30:	54 01       	movw	r10, r8
    fd32:	85 e7       	ldi	r24, 0x75	; 117
    fd34:	9c e0       	ldi	r25, 0x0C	; 12
    fd36:	2c 01       	movw	r4, r24
    fd38:	61 2c       	mov	r6, r1
    fd3a:	97 01       	movw	r18, r14
    fd3c:	40 e0       	ldi	r20, 0x00	; 0
    fd3e:	52 e0       	ldi	r21, 0x02	; 2
    fd40:	61 e0       	ldi	r22, 0x01	; 1
    fd42:	70 e0       	ldi	r23, 0x00	; 0
    fd44:	c6 01       	movw	r24, r12
    fd46:	86 dc       	rcall	.-1780   	; 0xf654 <fread>
    fd48:	ec 01       	movw	r28, r24
    fd4a:	18 16       	cp	r1, r24
    fd4c:	19 06       	cpc	r1, r25
    fd4e:	44 f5       	brge	.+80     	; 0xfda0 <copy+0x15e>
    fd50:	98 01       	movw	r18, r16
    fd52:	ae 01       	movw	r20, r28
    fd54:	61 e0       	ldi	r22, 0x01	; 1
    fd56:	70 e0       	ldi	r23, 0x00	; 0
    fd58:	c6 01       	movw	r24, r12
    fd5a:	4e dd       	rcall	.-1380   	; 0xf7f8 <fwrite>
    fd5c:	8c 17       	cp	r24, r28
    fd5e:	9d 07       	cpc	r25, r29
    fd60:	5c f4       	brge	.+22     	; 0xfd78 <copy+0x136>
    fd62:	84 e8       	ldi	r24, 0x84	; 132
    fd64:	9c e0       	ldi	r25, 0x0C	; 12
    fd66:	a0 e0       	ldi	r26, 0x00	; 0
    fd68:	ed b7       	in	r30, 0x3d	; 61
    fd6a:	fe b7       	in	r31, 0x3e	; 62
    fd6c:	81 83       	std	Z+1, r24	; 0x01
    fd6e:	92 83       	std	Z+2, r25	; 0x02
    fd70:	a3 83       	std	Z+3, r26	; 0x03
    fd72:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    fd76:	14 c0       	rjmp	.+40     	; 0xfda0 <copy+0x15e>
    fd78:	ce 01       	movw	r24, r28
    fd7a:	dd 0f       	add	r29, r29
    fd7c:	aa 0b       	sbc	r26, r26
    fd7e:	bb 0b       	sbc	r27, r27
    fd80:	88 0e       	add	r8, r24
    fd82:	99 1e       	adc	r9, r25
    fd84:	aa 1e       	adc	r10, r26
    fd86:	bb 1e       	adc	r11, r27
    fd88:	ed b7       	in	r30, 0x3d	; 61
    fd8a:	fe b7       	in	r31, 0x3e	; 62
    fd8c:	84 82       	std	Z+4, r8	; 0x04
    fd8e:	95 82       	std	Z+5, r9	; 0x05
    fd90:	a6 82       	std	Z+6, r10	; 0x06
    fd92:	b7 82       	std	Z+7, r11	; 0x07
    fd94:	41 82       	std	Z+1, r4	; 0x01
    fd96:	52 82       	std	Z+2, r5	; 0x02
    fd98:	63 82       	std	Z+3, r6	; 0x03
    fd9a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    fd9e:	cd cf       	rjmp	.-102    	; 0xfd3a <copy+0xf8>
    fda0:	ed b7       	in	r30, 0x3d	; 61
    fda2:	fe b7       	in	r31, 0x3e	; 62
    fda4:	84 82       	std	Z+4, r8	; 0x04
    fda6:	95 82       	std	Z+5, r9	; 0x05
    fda8:	a6 82       	std	Z+6, r10	; 0x06
    fdaa:	b7 82       	std	Z+7, r11	; 0x07
    fdac:	82 e6       	ldi	r24, 0x62	; 98
    fdae:	9c e0       	ldi	r25, 0x0C	; 12
    fdb0:	a0 e0       	ldi	r26, 0x00	; 0
    fdb2:	81 83       	std	Z+1, r24	; 0x01
    fdb4:	92 83       	std	Z+2, r25	; 0x02
    fdb6:	a3 83       	std	Z+3, r26	; 0x03
    fdb8:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    fdbc:	c6 01       	movw	r24, r12
    fdbe:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safefree>
    fdc2:	c7 01       	movw	r24, r14
    fdc4:	9b dd       	rcall	.-1226   	; 0xf8fc <fclose>
    fdc6:	c8 01       	movw	r24, r16
    fdc8:	99 dd       	rcall	.-1230   	; 0xf8fc <fclose>
    fdca:	b4 01       	movw	r22, r8
    fdcc:	c5 01       	movw	r24, r10
    fdce:	ad b7       	in	r26, 0x3d	; 61
    fdd0:	be b7       	in	r27, 0x3e	; 62
    fdd2:	17 96       	adiw	r26, 0x07	; 7
    fdd4:	0f b6       	in	r0, 0x3f	; 63
    fdd6:	f8 94       	cli
    fdd8:	be bf       	out	0x3e, r27	; 62
    fdda:	0f be       	out	0x3f, r0	; 63
    fddc:	ad bf       	out	0x3d, r26	; 61
    fdde:	df 91       	pop	r29
    fde0:	cf 91       	pop	r28
    fde2:	1f 91       	pop	r17
    fde4:	0f 91       	pop	r16
    fde6:	ff 90       	pop	r15
    fde8:	ef 90       	pop	r14
    fdea:	df 90       	pop	r13
    fdec:	cf 90       	pop	r12
    fdee:	bf 90       	pop	r11
    fdf0:	af 90       	pop	r10
    fdf2:	9f 90       	pop	r9
    fdf4:	8f 90       	pop	r8
    fdf6:	6f 90       	pop	r6
    fdf8:	5f 90       	pop	r5
    fdfa:	4f 90       	pop	r4
    fdfc:	08 95       	ret

0000fdfe <testpage>:
/// @brief Used to page output of functions like cat, hexdump, etc
/// @param[in] *name: file to hexdump
/// @retrun -1 = quit, return count or 0 at new page
MEMSPACE
int testpage(int count)
{
    fdfe:	cf 93       	push	r28
    fe00:	df 93       	push	r29
    fe02:	00 d0       	rcall	.+0      	; 0xfe04 <testpage+0x6>
    fe04:	1f 92       	push	r1
    int c;
    if(count >= _pagesize)
    fe06:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <_pagesize>
    fe0a:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <_pagesize+0x1>
    fe0e:	82 17       	cp	r24, r18
    fe10:	93 07       	cpc	r25, r19
    fe12:	3c f1       	brlt	.+78     	; 0xfe62 <testpage+0x64>
    {
        printf("More..");
    fe14:	8b e5       	ldi	r24, 0x5B	; 91
    fe16:	9c e0       	ldi	r25, 0x0C	; 12
    fe18:	a0 e0       	ldi	r26, 0x00	; 0
    fe1a:	ed b7       	in	r30, 0x3d	; 61
    fe1c:	fe b7       	in	r31, 0x3e	; 62
    fe1e:	81 83       	std	Z+1, r24	; 0x01
    fe20:	92 83       	std	Z+2, r25	; 0x02
    fe22:	a3 83       	std	Z+3, r26	; 0x03
    fe24:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        {
            optimistic_yield(1000);
            wdt_reset();
        }
#endif
        c = getchar();
    fe28:	0e 94 e0 75 	call	0xebc0	; 0xebc0 <getchar>
    fe2c:	ec 01       	movw	r28, r24
        printf("\r");
    fe2e:	89 e5       	ldi	r24, 0x59	; 89
    fe30:	9c e0       	ldi	r25, 0x0C	; 12
    fe32:	a0 e0       	ldi	r26, 0x00	; 0
    fe34:	ed b7       	in	r30, 0x3d	; 61
    fe36:	fe b7       	in	r31, 0x3e	; 62
    fe38:	81 83       	std	Z+1, r24	; 0x01
    fe3a:	92 83       	std	Z+2, r25	; 0x02
    fe3c:	a3 83       	std	Z+3, r26	; 0x03
    fe3e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        if(c == 'q')
    fe42:	c1 37       	cpi	r28, 0x71	; 113
    fe44:	d1 05       	cpc	r29, r1
    fe46:	41 f0       	breq	.+16     	; 0xfe58 <testpage+0x5a>
            return(-1);                           // quit
        if(c == '\n')
    fe48:	2a 97       	sbiw	r28, 0x0a	; 10
    fe4a:	49 f4       	brne	.+18     	; 0xfe5e <testpage+0x60>
            return(_pagesize-1);                  // single line
    fe4c:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_pagesize>
    fe50:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_pagesize+0x1>
    fe54:	01 97       	sbiw	r24, 0x01	; 1
    fe56:	05 c0       	rjmp	.+10     	; 0xfe62 <testpage+0x64>
        }
#endif
        c = getchar();
        printf("\r");
        if(c == 'q')
            return(-1);                           // quit
    fe58:	8f ef       	ldi	r24, 0xFF	; 255
    fe5a:	9f ef       	ldi	r25, 0xFF	; 255
    fe5c:	02 c0       	rjmp	.+4      	; 0xfe62 <testpage+0x64>
        if(c == '\n')
            return(_pagesize-1);                  // single line
        return(0);                                // new page
    fe5e:	80 e0       	ldi	r24, 0x00	; 0
    fe60:	90 e0       	ldi	r25, 0x00	; 0
    }
    return (count);
}
    fe62:	cd b7       	in	r28, 0x3d	; 61
    fe64:	de b7       	in	r29, 0x3e	; 62
    fe66:	23 96       	adiw	r28, 0x03	; 3
    fe68:	e2 e0       	ldi	r30, 0x02	; 2
    fe6a:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

0000fe6e <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  number of characters in file or -1 on error
MEMSPACE
long cat(char *name, int dopage)
{
    fe6e:	a7 e0       	ldi	r26, 0x07	; 7
    fe70:	b1 e0       	ldi	r27, 0x01	; 1
    fe72:	ed e3       	ldi	r30, 0x3D	; 61
    fe74:	ff e7       	ldi	r31, 0x7F	; 127
    fe76:	0c 94 6c e6 	jmp	0x1ccd8	; 0x1ccd8 <__prologue_saves__+0xc>
    fe7a:	8c 01       	movw	r16, r24
    fe7c:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
    fe7e:	6c ee       	ldi	r22, 0xEC	; 236
    fe80:	78 e0       	ldi	r23, 0x08	; 8
    fe82:	92 de       	rcall	.-732    	; 0xfba8 <fopen>
    fe84:	7c 01       	movw	r14, r24
    if (!fp)
    fe86:	89 2b       	or	r24, r25
    fe88:	41 f0       	breq	.+16     	; 0xfe9a <cat+0x2c>
    fe8a:	c1 2c       	mov	r12, r1
    fe8c:	d1 2c       	mov	r13, r1
    fe8e:	a1 2c       	mov	r10, r1
    fe90:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(-1);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fe92:	8e 01       	movw	r16, r28
    fe94:	08 5f       	subi	r16, 0xF8	; 248
    fe96:	1f 4f       	sbci	r17, 0xFF	; 255
    fe98:	23 c0       	rjmp	.+70     	; 0xfee0 <cat+0x72>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
    fe9a:	ed b7       	in	r30, 0x3d	; 61
    fe9c:	fe b7       	in	r31, 0x3e	; 62
    fe9e:	15 83       	std	Z+5, r17	; 0x05
    fea0:	04 83       	std	Z+4, r16	; 0x04
    fea2:	84 ee       	ldi	r24, 0xE4	; 228
    fea4:	9c e0       	ldi	r25, 0x0C	; 12
    fea6:	a0 e0       	ldi	r26, 0x00	; 0
    fea8:	81 83       	std	Z+1, r24	; 0x01
    feaa:	92 83       	std	Z+2, r25	; 0x02
    feac:	a3 83       	std	Z+3, r26	; 0x03
    feae:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        return(-1);
    feb2:	cc 24       	eor	r12, r12
    feb4:	ca 94       	dec	r12
    feb6:	dc 2c       	mov	r13, r12
    feb8:	76 01       	movw	r14, r12
    feba:	3f c0       	rjmp	.+126    	; 0xff3a <__DATA_REGION_LENGTH__+0x3a>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
    febc:	c8 01       	movw	r24, r16
    febe:	0e 94 c4 31 	call	0x6388	; 0x6388 <trim_tail>
        size += strlen(line);
    fec2:	f8 01       	movw	r30, r16
    fec4:	01 90       	ld	r0, Z+
    fec6:	00 20       	and	r0, r0
    fec8:	e9 f7       	brne	.-6      	; 0xfec4 <cat+0x56>
    feca:	31 97       	sbiw	r30, 0x01	; 1
    fecc:	e0 1b       	sub	r30, r16
    fece:	f1 0b       	sbc	r31, r17
    fed0:	ce 0e       	add	r12, r30
    fed2:	df 1e       	adc	r13, r31
        puts(line);
    fed4:	c8 01       	movw	r24, r16
    fed6:	0e 94 38 76 	call	0xec70	; 0xec70 <puts>
        if(dopage)
    feda:	81 14       	cp	r8, r1
    fedc:	91 04       	cpc	r9, r1
    fede:	49 f4       	brne	.+18     	; 0xfef2 <cat+0x84>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(-1);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fee0:	a7 01       	movw	r20, r14
    fee2:	6e ef       	ldi	r22, 0xFE	; 254
    fee4:	70 e0       	ldi	r23, 0x00	; 0
    fee6:	c8 01       	movw	r24, r16
    fee8:	0e 94 ec 75 	call	0xebd8	; 0xebd8 <fgets>
    feec:	89 2b       	or	r24, r25
    feee:	31 f7       	brne	.-52     	; 0xfebc <cat+0x4e>
    fef0:	06 c0       	rjmp	.+12     	; 0xfefe <cat+0x90>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
    fef2:	c5 01       	movw	r24, r10
    fef4:	01 96       	adiw	r24, 0x01	; 1
    fef6:	83 df       	rcall	.-250    	; 0xfdfe <testpage>
    fef8:	5c 01       	movw	r10, r24
            if(count < 0)
    fefa:	97 ff       	sbrs	r25, 7
    fefc:	f1 cf       	rjmp	.-30     	; 0xfee0 <cat+0x72>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
    fefe:	82 ee       	ldi	r24, 0xE2	; 226
    ff00:	9c e0       	ldi	r25, 0x0C	; 12
    ff02:	a0 e0       	ldi	r26, 0x00	; 0
    ff04:	ed b7       	in	r30, 0x3d	; 61
    ff06:	fe b7       	in	r31, 0x3e	; 62
    ff08:	81 83       	std	Z+1, r24	; 0x01
    ff0a:	92 83       	std	Z+2, r25	; 0x02
    ff0c:	a3 83       	std	Z+3, r26	; 0x03
    ff0e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    fclose(fp);
    ff12:	c7 01       	movw	r24, r14
    ff14:	f3 dc       	rcall	.-1562   	; 0xf8fc <fclose>
    printf("%ld bytes\n", (long)size);
    ff16:	0d 2c       	mov	r0, r13
    ff18:	00 0c       	add	r0, r0
    ff1a:	ee 08       	sbc	r14, r14
    ff1c:	ff 08       	sbc	r15, r15
    ff1e:	ed b7       	in	r30, 0x3d	; 61
    ff20:	fe b7       	in	r31, 0x3e	; 62
    ff22:	c4 82       	std	Z+4, r12	; 0x04
    ff24:	d5 82       	std	Z+5, r13	; 0x05
    ff26:	e6 82       	std	Z+6, r14	; 0x06
    ff28:	f7 82       	std	Z+7, r15	; 0x07
    ff2a:	87 ed       	ldi	r24, 0xD7	; 215
    ff2c:	9c e0       	ldi	r25, 0x0C	; 12
    ff2e:	a0 e0       	ldi	r26, 0x00	; 0
    ff30:	81 83       	std	Z+1, r24	; 0x01
    ff32:	92 83       	std	Z+2, r25	; 0x02
    ff34:	a3 83       	std	Z+3, r26	; 0x03
    ff36:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    return(size);
}
    ff3a:	c7 01       	movw	r24, r14
    ff3c:	b6 01       	movw	r22, r12
    ff3e:	c9 5f       	subi	r28, 0xF9	; 249
    ff40:	de 4f       	sbci	r29, 0xFE	; 254
    ff42:	ec e0       	ldi	r30, 0x0C	; 12
    ff44:	0c 94 88 e6 	jmp	0x1cd10	; 0x1cd10 <__epilogue_restores__+0xc>

0000ff48 <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    ff48:	4f 92       	push	r4
    ff4a:	5f 92       	push	r5
    ff4c:	6f 92       	push	r6
    ff4e:	7f 92       	push	r7
    ff50:	af 92       	push	r10
    ff52:	bf 92       	push	r11
    ff54:	cf 92       	push	r12
    ff56:	df 92       	push	r13
    ff58:	ef 92       	push	r14
    ff5a:	ff 92       	push	r15
    ff5c:	0f 93       	push	r16
    ff5e:	1f 93       	push	r17
    ff60:	cf 93       	push	r28
    ff62:	df 93       	push	r29
    ff64:	cd b7       	in	r28, 0x3d	; 61
    ff66:	de b7       	in	r29, 0x3e	; 62
    ff68:	c9 54       	subi	r28, 0x49	; 73
    ff6a:	d1 09       	sbc	r29, r1
    ff6c:	0f b6       	in	r0, 0x3f	; 63
    ff6e:	f8 94       	cli
    ff70:	de bf       	out	0x3e, r29	; 62
    ff72:	0f be       	out	0x3f, r0	; 63
    ff74:	cd bf       	out	0x3d, r28	; 61
    ff76:	8c 01       	movw	r16, r24
    ff78:	7b 01       	movw	r14, r22
    struct stat sp;
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;

    if(stat(name, &sp) == -1)
    ff7a:	be 01       	movw	r22, r28
    ff7c:	62 5f       	subi	r22, 0xF2	; 242
    ff7e:	7f 4f       	sbci	r23, 0xFF	; 255
    ff80:	18 d9       	rcall	.-3536   	; 0xf1b2 <stat>
    ff82:	01 96       	adiw	r24, 0x01	; 1
    ff84:	79 f4       	brne	.+30     	; 0xffa4 <ls_info+0x5c>
    {
        printf("can not stat: %s\n", name);
    ff86:	ed b7       	in	r30, 0x3d	; 61
    ff88:	fe b7       	in	r31, 0x3e	; 62
    ff8a:	15 83       	std	Z+5, r17	; 0x05
    ff8c:	04 83       	std	Z+4, r16	; 0x04
    ff8e:	87 e4       	ldi	r24, 0x47	; 71
    ff90:	9c e0       	ldi	r25, 0x0C	; 12
    ff92:	a0 e0       	ldi	r26, 0x00	; 0
    ff94:	81 83       	std	Z+1, r24	; 0x01
    ff96:	92 83       	std	Z+2, r25	; 0x02
    ff98:	a3 83       	std	Z+3, r26	; 0x03
    ff9a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        return(0);
    ff9e:	80 e0       	ldi	r24, 0x00	; 0
    ffa0:	90 e0       	ldi	r25, 0x00	; 0
    ffa2:	77 c0       	rjmp	.+238    	; 0x10092 <__EEPROM_REGION_LENGTH__+0x92>
    }

    if(!verbose)
    ffa4:	ef 28       	or	r14, r15
    ffa6:	81 f4       	brne	.+32     	; 0xffc8 <ls_info+0x80>
    {
        printf("%s\n",basename(name));
    ffa8:	c8 01       	movw	r24, r16
    ffaa:	0e 94 a5 76 	call	0xed4a	; 0xed4a <basename>
    ffae:	ed b7       	in	r30, 0x3d	; 61
    ffb0:	fe b7       	in	r31, 0x3e	; 62
    ffb2:	95 83       	std	Z+5, r25	; 0x05
    ffb4:	84 83       	std	Z+4, r24	; 0x04
    ffb6:	83 e4       	ldi	r24, 0x43	; 67
    ffb8:	9c e0       	ldi	r25, 0x0C	; 12
    ffba:	a0 e0       	ldi	r26, 0x00	; 0
    ffbc:	81 83       	std	Z+1, r24	; 0x01
    ffbe:	92 83       	std	Z+2, r25	; 0x02
    ffc0:	a3 83       	std	Z+3, r26	; 0x03
    ffc2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    ffc6:	63 c0       	rjmp	.+198    	; 0x1008e <__EEPROM_REGION_LENGTH__+0x8e>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
    ffc8:	4e 88       	ldd	r4, Y+22	; 0x16
    ffca:	5f 88       	ldd	r5, Y+23	; 0x17
    ffcc:	68 8c       	ldd	r6, Y+24	; 0x18
    ffce:	79 8c       	ldd	r7, Y+25	; 0x19
    ffd0:	d3 01       	movw	r26, r6
    ffd2:	c2 01       	movw	r24, r4
    ffd4:	88 27       	eor	r24, r24
    ffd6:	90 7f       	andi	r25, 0xF0	; 240
    ffd8:	aa 27       	eor	r26, r26
    ffda:	bb 27       	eor	r27, r27
    ffdc:	81 15       	cp	r24, r1
    ffde:	90 44       	sbci	r25, 0x40	; 64
    ffe0:	a1 05       	cpc	r26, r1
    ffe2:	b1 05       	cpc	r27, r1
    ffe4:	11 f4       	brne	.+4      	; 0xffea <ls_info+0xa2>
        *p++ = 'd';
    ffe6:	84 e6       	ldi	r24, 0x64	; 100
    ffe8:	01 c0       	rjmp	.+2      	; 0xffec <ls_info+0xa4>
    else
        *p++ = '-';
    ffea:	8d e2       	ldi	r24, 0x2D	; 45
    ffec:	8e af       	std	Y+62, r24	; 0x3e
    ffee:	fe 01       	movw	r30, r28
    fff0:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    fff2:	e1 2c       	mov	r14, r1
    fff4:	ff 24       	eor	r15, r15
    fff6:	f3 94       	inc	r15
    fff8:	20 e0       	ldi	r18, 0x00	; 0
    fffa:	30 e0       	ldi	r19, 0x00	; 0
    fffc:	be 2e       	mov	r11, r30
    fffe:	af 2e       	mov	r10, r31
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   10000:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   10002:	53 e0       	ldi	r21, 0x03	; 3
   10004:	c5 2e       	mov	r12, r21
   10006:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
   10008:	c7 01       	movw	r24, r14
   1000a:	a0 e0       	ldi	r26, 0x00	; 0
   1000c:	b0 e0       	ldi	r27, 0x00	; 0
   1000e:	84 21       	and	r24, r4
   10010:	95 21       	and	r25, r5
   10012:	a6 21       	and	r26, r6
   10014:	b7 21       	and	r27, r7
   10016:	89 2b       	or	r24, r25
   10018:	8a 2b       	or	r24, r26
   1001a:	8b 2b       	or	r24, r27
   1001c:	51 f0       	breq	.+20     	; 0x10032 <__EEPROM_REGION_LENGTH__+0x32>
            *p++ = cm[ i % 3];
   1001e:	c9 01       	movw	r24, r18
   10020:	b6 01       	movw	r22, r12
   10022:	0e 94 e6 e5 	call	0x1cbcc	; 0x1cbcc <__divmodhi4>
   10026:	dc 01       	movw	r26, r24
   10028:	a8 55       	subi	r26, 0x58	; 88
   1002a:	b4 4f       	sbci	r27, 0xF4	; 244
   1002c:	8c 91       	ld	r24, X
   1002e:	81 83       	std	Z+1, r24	; 0x01
   10030:	01 c0       	rjmp	.+2      	; 0x10034 <__EEPROM_REGION_LENGTH__+0x34>
        else
            *p++ = '-';
   10032:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   10034:	f6 94       	lsr	r15
   10036:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   10038:	2f 5f       	subi	r18, 0xFF	; 255
   1003a:	3f 4f       	sbci	r19, 0xFF	; 255
   1003c:	31 96       	adiw	r30, 0x01	; 1
   1003e:	29 30       	cpi	r18, 0x09	; 9
   10040:	31 05       	cpc	r19, r1
   10042:	11 f7       	brne	.-60     	; 0x10008 <__EEPROM_REGION_LENGTH__+0x8>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   10044:	29 96       	adiw	r28, 0x09	; 9
   10046:	1f ae       	std	Y+63, r1	; 0x3f
   10048:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
   1004a:	4e a0       	ldd	r4, Y+38	; 0x26
   1004c:	5f a0       	ldd	r5, Y+39	; 0x27
   1004e:	68 a4       	ldd	r6, Y+40	; 0x28
   10050:	79 a4       	ldd	r7, Y+41	; 0x29
   10052:	6e a9       	ldd	r22, Y+54	; 0x36
   10054:	7f a9       	ldd	r23, Y+55	; 0x37
   10056:	88 ad       	ldd	r24, Y+56	; 0x38
   10058:	99 ad       	ldd	r25, Y+57	; 0x39
   1005a:	0e 94 80 76 	call	0xed00	; 0xed00 <mctime>
   1005e:	7c 01       	movw	r14, r24
   10060:	c8 01       	movw	r24, r16
   10062:	0e 94 a5 76 	call	0xed4a	; 0xed4a <basename>
   10066:	ed b7       	in	r30, 0x3d	; 61
   10068:	fe b7       	in	r31, 0x3e	; 62
   1006a:	95 87       	std	Z+13, r25	; 0x0d
   1006c:	84 87       	std	Z+12, r24	; 0x0c
   1006e:	f3 86       	std	Z+11, r15	; 0x0b
   10070:	e2 86       	std	Z+10, r14	; 0x0a
   10072:	46 82       	std	Z+6, r4	; 0x06
   10074:	57 82       	std	Z+7, r5	; 0x07
   10076:	60 86       	std	Z+8, r6	; 0x08
   10078:	71 86       	std	Z+9, r7	; 0x09
   1007a:	b4 82       	std	Z+4, r11	; 0x04
   1007c:	a5 82       	std	Z+5, r10	; 0x05
   1007e:	89 e2       	ldi	r24, 0x29	; 41
   10080:	9c e0       	ldi	r25, 0x0C	; 12
   10082:	a0 e0       	ldi	r26, 0x00	; 0
   10084:	81 83       	std	Z+1, r24	; 0x01
   10086:	92 83       	std	Z+2, r25	; 0x02
   10088:	a3 83       	std	Z+3, r26	; 0x03
   1008a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        attr,
        (long) sp.st_size,
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   1008e:	81 e0       	ldi	r24, 0x01	; 1
   10090:	90 e0       	ldi	r25, 0x00	; 0
}
   10092:	c7 5b       	subi	r28, 0xB7	; 183
   10094:	df 4f       	sbci	r29, 0xFF	; 255
   10096:	0f b6       	in	r0, 0x3f	; 63
   10098:	f8 94       	cli
   1009a:	de bf       	out	0x3e, r29	; 62
   1009c:	0f be       	out	0x3f, r0	; 63
   1009e:	cd bf       	out	0x3d, r28	; 61
   100a0:	df 91       	pop	r29
   100a2:	cf 91       	pop	r28
   100a4:	1f 91       	pop	r17
   100a6:	0f 91       	pop	r16
   100a8:	ff 90       	pop	r15
   100aa:	ef 90       	pop	r14
   100ac:	df 90       	pop	r13
   100ae:	cf 90       	pop	r12
   100b0:	bf 90       	pop	r11
   100b2:	af 90       	pop	r10
   100b4:	7f 90       	pop	r7
   100b6:	6f 90       	pop	r6
   100b8:	5f 90       	pop	r5
   100ba:	4f 90       	pop	r4
   100bc:	08 95       	ret

000100be <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files or -1 on error
MEMSPACE
int ls(char *name, int verbose)
{
   100be:	2f 92       	push	r2
   100c0:	3f 92       	push	r3
   100c2:	4f 92       	push	r4
   100c4:	5f 92       	push	r5
   100c6:	6f 92       	push	r6
   100c8:	8f 92       	push	r8
   100ca:	9f 92       	push	r9
   100cc:	af 92       	push	r10
   100ce:	bf 92       	push	r11
   100d0:	cf 92       	push	r12
   100d2:	df 92       	push	r13
   100d4:	ef 92       	push	r14
   100d6:	ff 92       	push	r15
   100d8:	0f 93       	push	r16
   100da:	1f 93       	push	r17
   100dc:	cf 93       	push	r28
   100de:	df 93       	push	r29
   100e0:	cd b7       	in	r28, 0x3d	; 61
   100e2:	de b7       	in	r29, 0x3e	; 62
   100e4:	c8 53       	subi	r28, 0x38	; 56
   100e6:	d1 40       	sbci	r29, 0x01	; 1
   100e8:	0f b6       	in	r0, 0x3f	; 63
   100ea:	f8 94       	cli
   100ec:	de bf       	out	0x3e, r29	; 62
   100ee:	0f be       	out	0x3f, r0	; 63
   100f0:	cd bf       	out	0x3d, r28	; 61
   100f2:	7c 01       	movw	r14, r24
   100f4:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   100f6:	1e 82       	std	Y+6, r1	; 0x06
   100f8:	8e 01       	movw	r16, r28
   100fa:	0a 5f       	subi	r16, 0xFA	; 250
   100fc:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   100fe:	00 97       	sbiw	r24, 0x00	; 0
   10100:	51 f4       	brne	.+20     	; 0x10116 <ls+0x58>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   10102:	6f ef       	ldi	r22, 0xFF	; 255
   10104:	70 e0       	ldi	r23, 0x00	; 0
   10106:	c8 01       	movw	r24, r16
   10108:	0e 94 fb 76 	call	0xedf6	; 0xedf6 <getcwd>
   1010c:	89 2b       	or	r24, r25
   1010e:	91 f4       	brne	.+36     	; 0x10134 <ls+0x76>
        {
            printf("ls: Can't get current directory\n");
   10110:	88 e0       	ldi	r24, 0x08	; 8
   10112:	9c e0       	ldi	r25, 0x0C	; 12
   10114:	6a c0       	rjmp	.+212    	; 0x101ea <ls+0x12c>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   10116:	fc 01       	movw	r30, r24
   10118:	80 81       	ld	r24, Z
   1011a:	88 23       	and	r24, r24
   1011c:	91 f3       	breq	.-28     	; 0x10102 <ls+0x44>
   1011e:	66 ee       	ldi	r22, 0xE6	; 230
   10120:	72 e1       	ldi	r23, 0x12	; 18
   10122:	c7 01       	movw	r24, r14
   10124:	0e 94 de 31 	call	0x63bc	; 0x63bc <MATCH>
   10128:	89 2b       	or	r24, r25
   1012a:	59 f7       	brne	.-42     	; 0x10102 <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   1012c:	b7 01       	movw	r22, r14
   1012e:	c8 01       	movw	r24, r16
   10130:	0e 94 e6 30 	call	0x61cc	; 0x61cc <strcpy>
    }
    len = strlen(fullpath);
   10134:	f8 01       	movw	r30, r16
   10136:	01 90       	ld	r0, Z+
   10138:	00 20       	and	r0, r0
   1013a:	e9 f7       	brne	.-6      	; 0x10136 <ls+0x78>
   1013c:	31 97       	sbiw	r30, 0x01	; 1
   1013e:	1f 01       	movw	r2, r30
   10140:	20 1a       	sub	r2, r16
   10142:	31 0a       	sbc	r3, r17


    if (stat(fullpath, &st))
   10144:	be 01       	movw	r22, r28
   10146:	69 5f       	subi	r22, 0xF9	; 249
   10148:	7e 4f       	sbci	r23, 0xFE	; 254
   1014a:	c8 01       	movw	r24, r16
   1014c:	32 d8       	rcall	.-3996   	; 0xf1b2 <stat>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
   1014e:	ed b7       	in	r30, 0x3d	; 61
   10150:	fe b7       	in	r31, 0x3e	; 62
   10152:	15 83       	std	Z+5, r17	; 0x05
   10154:	04 83       	std	Z+4, r16	; 0x04
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);


    if (stat(fullpath, &st))
   10156:	89 2b       	or	r24, r25
   10158:	59 f0       	breq	.+22     	; 0x10170 <ls+0xb2>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
   1015a:	82 ef       	ldi	r24, 0xF2	; 242
   1015c:	9b e0       	ldi	r25, 0x0B	; 11
   1015e:	a0 e0       	ldi	r26, 0x00	; 0
   10160:	81 83       	std	Z+1, r24	; 0x01
   10162:	92 83       	std	Z+2, r25	; 0x02
   10164:	a3 83       	std	Z+3, r26	; 0x03
   10166:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        return(-1);
   1016a:	8f ef       	ldi	r24, 0xFF	; 255
   1016c:	9f ef       	ldi	r25, 0xFF	; 255
   1016e:	96 c0       	rjmp	.+300    	; 0x1029c <ls+0x1de>
    }
    printf("Listing:[%s]\n",fullpath);
   10170:	84 ee       	ldi	r24, 0xE4	; 228
   10172:	9b e0       	ldi	r25, 0x0B	; 11
   10174:	a0 e0       	ldi	r26, 0x00	; 0
   10176:	81 83       	std	Z+1, r24	; 0x01
   10178:	92 83       	std	Z+2, r25	; 0x02
   1017a:	a3 83       	std	Z+3, r26	; 0x03
   1017c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

    switch (st.st_mode & S_IFMT)
   10180:	c1 5f       	subi	r28, 0xF1	; 241
   10182:	de 4f       	sbci	r29, 0xFE	; 254
   10184:	88 81       	ld	r24, Y
   10186:	99 81       	ldd	r25, Y+1	; 0x01
   10188:	aa 81       	ldd	r26, Y+2	; 0x02
   1018a:	bb 81       	ldd	r27, Y+3	; 0x03
   1018c:	cf 50       	subi	r28, 0x0F	; 15
   1018e:	d1 40       	sbci	r29, 0x01	; 1
   10190:	88 27       	eor	r24, r24
   10192:	90 7f       	andi	r25, 0xF0	; 240
   10194:	aa 27       	eor	r26, r26
   10196:	bb 27       	eor	r27, r27
   10198:	81 15       	cp	r24, r1
   1019a:	f0 e4       	ldi	r31, 0x40	; 64
   1019c:	9f 07       	cpc	r25, r31
   1019e:	a1 05       	cpc	r26, r1
   101a0:	b1 05       	cpc	r27, r1
   101a2:	59 f0       	breq	.+22     	; 0x101ba <ls+0xfc>
   101a4:	81 15       	cp	r24, r1
   101a6:	90 48       	sbci	r25, 0x80	; 128
   101a8:	a1 05       	cpc	r26, r1
   101aa:	b1 05       	cpc	r27, r1
   101ac:	09 f0       	breq	.+2      	; 0x101b0 <ls+0xf2>
   101ae:	67 c0       	rjmp	.+206    	; 0x1027e <ls+0x1c0>
    {
        case S_IFREG:
            files = ls_info(fullpath,verbose);
   101b0:	b4 01       	movw	r22, r8
   101b2:	c8 01       	movw	r24, r16
   101b4:	c9 de       	rcall	.-622    	; 0xff48 <ls_info>
   101b6:	7c 01       	movw	r14, r24
            break;
   101b8:	64 c0       	rjmp	.+200    	; 0x10282 <ls+0x1c4>
        case S_IFDIR:
            dirp = opendir(fullpath);
   101ba:	c8 01       	movw	r24, r16
   101bc:	0e 94 a9 77 	call	0xef52	; 0xef52 <opendir>
   101c0:	5c 01       	movw	r10, r24
            if(!dirp)
   101c2:	89 2b       	or	r24, r25
   101c4:	81 f0       	breq	.+32     	; 0x101e6 <ls+0x128>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   101c6:	e1 2c       	mov	r14, r1
   101c8:	f1 2c       	mov	r15, r1
                    strcat(fullpath,"/");
                }
                strcat(fullpath,de->d_name);
                files +=ls_info(fullpath,verbose);
// restore path
                fullpath[len] = 0;
   101ca:	c8 01       	movw	r24, r16
   101cc:	82 0d       	add	r24, r2
   101ce:	93 1d       	adc	r25, r3
   101d0:	c9 5c       	subi	r28, 0xC9	; 201
   101d2:	de 4f       	sbci	r29, 0xFE	; 254
   101d4:	99 83       	std	Y+1, r25	; 0x01
   101d6:	88 83       	st	Y, r24
   101d8:	c7 53       	subi	r28, 0x37	; 55
   101da:	d1 40       	sbci	r29, 0x01	; 1
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   101dc:	81 eb       	ldi	r24, 0xB1	; 177
   101de:	9b e0       	ldi	r25, 0x0B	; 11
   101e0:	2c 01       	movw	r4, r24
   101e2:	61 2c       	mov	r6, r1
   101e4:	25 c0       	rjmp	.+74     	; 0x10230 <ls+0x172>
            break;
        case S_IFDIR:
            dirp = opendir(fullpath);
            if(!dirp)
            {
                printf("opendir failed\n");
   101e6:	84 ed       	ldi	r24, 0xD4	; 212
   101e8:	9b e0       	ldi	r25, 0x0B	; 11
   101ea:	a0 e0       	ldi	r26, 0x00	; 0
   101ec:	ed b7       	in	r30, 0x3d	; 61
   101ee:	fe b7       	in	r31, 0x3e	; 62
   101f0:	81 83       	std	Z+1, r24	; 0x01
   101f2:	92 83       	std	Z+2, r25	; 0x02
   101f4:	a3 83       	std	Z+3, r26	; 0x03
   101f6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   101fa:	b7 cf       	rjmp	.-146    	; 0x1016a <ls+0xac>
                return(-1);
            }
            while ( (de = readdir(dirp)) )
            {
                if(de->d_name[0] == 0)
   101fc:	f6 01       	movw	r30, r12
   101fe:	80 81       	ld	r24, Z
   10200:	88 23       	and	r24, r24
   10202:	e1 f0       	breq	.+56     	; 0x1023c <ls+0x17e>
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
   10204:	f6 01       	movw	r30, r12
   10206:	01 90       	ld	r0, Z+
   10208:	00 20       	and	r0, r0
   1020a:	e9 f7       	brne	.-6      	; 0x10206 <ls+0x148>
   1020c:	31 97       	sbiw	r30, 0x01	; 1
   1020e:	ec 19       	sub	r30, r12
   10210:	fd 09       	sbc	r31, r13
                if(len + len2 >= MAX_NAME_LEN)
   10212:	e2 0d       	add	r30, r2
   10214:	f3 1d       	adc	r31, r3
   10216:	ef 3f       	cpi	r30, 0xFF	; 255
   10218:	f1 05       	cpc	r31, r1
   1021a:	a1 f0       	breq	.+40     	; 0x10244 <ls+0x186>
   1021c:	9c f0       	brlt	.+38     	; 0x10244 <ls+0x186>
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
   1021e:	ed b7       	in	r30, 0x3d	; 61
   10220:	fe b7       	in	r31, 0x3e	; 62
   10222:	d5 82       	std	Z+5, r13	; 0x05
   10224:	c4 82       	std	Z+4, r12	; 0x04
   10226:	41 82       	std	Z+1, r4	; 0x01
   10228:	52 82       	std	Z+2, r5	; 0x02
   1022a:	63 82       	std	Z+3, r6	; 0x03
   1022c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            if(!dirp)
            {
                printf("opendir failed\n");
                return(-1);
            }
            while ( (de = readdir(dirp)) )
   10230:	c5 01       	movw	r24, r10
   10232:	0e 94 c7 77 	call	0xef8e	; 0xef8e <readdir>
   10236:	6c 01       	movw	r12, r24
   10238:	89 2b       	or	r24, r25
   1023a:	01 f7       	brne	.-64     	; 0x101fc <ls+0x13e>
#ifdef ESP8266
                optimistic_yield(1000);
                wdt_reset();
#endif
            }
            closedir(dirp);
   1023c:	c5 01       	movw	r24, r10
   1023e:	0e 94 8e 77 	call	0xef1c	; 0xef1c <closedir>
            break;
   10242:	1f c0       	rjmp	.+62     	; 0x10282 <ls+0x1c4>
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
                    continue;
                }
                if(!MATCH(fullpath,"/") )
   10244:	66 ea       	ldi	r22, 0xA6	; 166
   10246:	78 e0       	ldi	r23, 0x08	; 8
   10248:	c8 01       	movw	r24, r16
   1024a:	0e 94 de 31 	call	0x63bc	; 0x63bc <MATCH>
   1024e:	89 2b       	or	r24, r25
   10250:	29 f4       	brne	.+10     	; 0x1025c <ls+0x19e>
                {
                    strcat(fullpath,"/");
   10252:	66 ea       	ldi	r22, 0xA6	; 166
   10254:	78 e0       	ldi	r23, 0x08	; 8
   10256:	c8 01       	movw	r24, r16
   10258:	0e 94 07 31 	call	0x620e	; 0x620e <strcat>
                }
                strcat(fullpath,de->d_name);
   1025c:	b6 01       	movw	r22, r12
   1025e:	c8 01       	movw	r24, r16
   10260:	0e 94 07 31 	call	0x620e	; 0x620e <strcat>
                files +=ls_info(fullpath,verbose);
   10264:	b4 01       	movw	r22, r8
   10266:	c8 01       	movw	r24, r16
   10268:	6f de       	rcall	.-802    	; 0xff48 <ls_info>
   1026a:	e8 0e       	add	r14, r24
   1026c:	f9 1e       	adc	r15, r25
// restore path
                fullpath[len] = 0;
   1026e:	c9 5c       	subi	r28, 0xC9	; 201
   10270:	de 4f       	sbci	r29, 0xFE	; 254
   10272:	e8 81       	ld	r30, Y
   10274:	f9 81       	ldd	r31, Y+1	; 0x01
   10276:	c7 53       	subi	r28, 0x37	; 55
   10278:	d1 40       	sbci	r29, 0x01	; 1
   1027a:	10 82       	st	Z, r1
   1027c:	d9 cf       	rjmp	.-78     	; 0x10230 <ls+0x172>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   1027e:	e1 2c       	mov	r14, r1
   10280:	f1 2c       	mov	r15, r1
#endif
            }
            closedir(dirp);
            break;
    }
    printf("Files: %d\n", (int)files);
   10282:	ed b7       	in	r30, 0x3d	; 61
   10284:	fe b7       	in	r31, 0x3e	; 62
   10286:	f5 82       	std	Z+5, r15	; 0x05
   10288:	e4 82       	std	Z+4, r14	; 0x04
   1028a:	86 ea       	ldi	r24, 0xA6	; 166
   1028c:	9b e0       	ldi	r25, 0x0B	; 11
   1028e:	a0 e0       	ldi	r26, 0x00	; 0
   10290:	81 83       	std	Z+1, r24	; 0x01
   10292:	92 83       	std	Z+2, r25	; 0x02
   10294:	a3 83       	std	Z+3, r26	; 0x03
   10296:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    return(files);
   1029a:	c7 01       	movw	r24, r14
}
   1029c:	c8 5c       	subi	r28, 0xC8	; 200
   1029e:	de 4f       	sbci	r29, 0xFE	; 254
   102a0:	0f b6       	in	r0, 0x3f	; 63
   102a2:	f8 94       	cli
   102a4:	de bf       	out	0x3e, r29	; 62
   102a6:	0f be       	out	0x3f, r0	; 63
   102a8:	cd bf       	out	0x3d, r28	; 61
   102aa:	df 91       	pop	r29
   102ac:	cf 91       	pop	r28
   102ae:	1f 91       	pop	r17
   102b0:	0f 91       	pop	r16
   102b2:	ff 90       	pop	r15
   102b4:	ef 90       	pop	r14
   102b6:	df 90       	pop	r13
   102b8:	cf 90       	pop	r12
   102ba:	bf 90       	pop	r11
   102bc:	af 90       	pop	r10
   102be:	9f 90       	pop	r9
   102c0:	8f 90       	pop	r8
   102c2:	6f 90       	pop	r6
   102c4:	5f 90       	pop	r5
   102c6:	4f 90       	pop	r4
   102c8:	3f 90       	pop	r3
   102ca:	2f 90       	pop	r2
   102cc:	08 95       	ret

000102ce <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   102ce:	a8 e0       	ldi	r26, 0x08	; 8
   102d0:	b1 e0       	ldi	r27, 0x01	; 1
   102d2:	ed e6       	ldi	r30, 0x6D	; 109
   102d4:	f1 e8       	ldi	r31, 0x81	; 129
   102d6:	0c 94 68 e6 	jmp	0x1ccd0	; 0x1ccd0 <__prologue_saves__+0x4>
    char *ptr;
    int ind = 0;

	if(argc < 1)
   102da:	18 16       	cp	r1, r24
   102dc:	19 06       	cpc	r1, r25
   102de:	1c f0       	brlt	.+6      	; 0x102e6 <posix_tests+0x18>
		return(0);
   102e0:	80 e0       	ldi	r24, 0x00	; 0
   102e2:	90 e0       	ldi	r25, 0x00	; 0
   102e4:	dd c1       	rjmp	.+954    	; 0x106a0 <posix_tests+0x3d2>

    ptr = argv[ind++];
   102e6:	fb 01       	movw	r30, r22
   102e8:	c0 80       	ld	r12, Z
   102ea:	d1 80       	ldd	r13, Z+1	; 0x01
	printf("argv[%d]=%s\n",(int)i, argv[i]);
}
#endif


    if(!ptr)
   102ec:	c1 14       	cp	r12, r1
   102ee:	d1 04       	cpc	r13, r1
   102f0:	b9 f3       	breq	.-18     	; 0x102e0 <posix_tests+0x12>
   102f2:	4b 01       	movw	r8, r22
   102f4:	3c 01       	movw	r6, r24
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
   102f6:	6c ea       	ldi	r22, 0xAC	; 172
   102f8:	7b e0       	ldi	r23, 0x0B	; 11
   102fa:	c6 01       	movw	r24, r12
   102fc:	0e 94 de 31 	call	0x63bc	; 0x63bc <MATCH>
   10300:	89 2b       	or	r24, r25
   10302:	a1 f0       	breq	.+40     	; 0x1032c <posix_tests+0x5e>
    {
        ptr = argv[ind++];
   10304:	f4 01       	movw	r30, r8
   10306:	c2 80       	ldd	r12, Z+2	; 0x02
   10308:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   1030a:	c1 14       	cp	r12, r1
   1030c:	d1 04       	cpc	r13, r1
   1030e:	21 f4       	brne	.+8      	; 0x10318 <posix_tests+0x4a>
        {
            posix_help(1);
   10310:	81 e0       	ldi	r24, 0x01	; 1
   10312:	90 e0       	ldi	r25, 0x00	; 0
   10314:	75 dc       	rcall	.-1814   	; 0xfc00 <posix_help>
   10316:	45 c1       	rjmp	.+650    	; 0x105a2 <posix_tests+0x2d4>
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   10318:	62 e6       	ldi	r22, 0x62	; 98
   1031a:	76 e1       	ldi	r23, 0x16	; 22
   1031c:	c6 01       	movw	r24, r12
   1031e:	0e 94 de 31 	call	0x63bc	; 0x63bc <MATCH>
   10322:	89 2b       	or	r24, r25
   10324:	a9 f7       	brne	.-22     	; 0x10310 <posix_tests+0x42>
    if(!ptr)
        return(0);	// nothing no match

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   10326:	02 e0       	ldi	r16, 0x02	; 2
   10328:	10 e0       	ldi	r17, 0x00	; 0
   1032a:	02 c0       	rjmp	.+4      	; 0x10330 <posix_tests+0x62>
    int ind = 0;

	if(argc < 1)
		return(0);

    ptr = argv[ind++];
   1032c:	01 e0       	ldi	r16, 0x01	; 1
   1032e:	10 e0       	ldi	r17, 0x00	; 0
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   10330:	78 01       	movw	r14, r16
   10332:	ff ef       	ldi	r31, 0xFF	; 255
   10334:	ef 1a       	sub	r14, r31
   10336:	ff 0a       	sbc	r15, r31
   10338:	93 01       	movw	r18, r6
   1033a:	a7 01       	movw	r20, r14
   1033c:	62 eb       	ldi	r22, 0xB2	; 178
   1033e:	7b e0       	ldi	r23, 0x0B	; 11
   10340:	c6 01       	movw	r24, r12
   10342:	0e 94 06 32 	call	0x640c	; 0x640c <MATCHARGS>
   10346:	89 2b       	or	r24, r25
   10348:	99 f1       	breq	.+102    	; 0x103b0 <posix_tests+0xe2>
   1034a:	78 01       	movw	r14, r16
   1034c:	ee 0c       	add	r14, r14
   1034e:	ff 1c       	adc	r15, r15
   10350:	e8 0c       	add	r14, r8
   10352:	f9 1c       	adc	r15, r9
   10354:	57 01       	movw	r10, r14
   10356:	47 01       	movw	r8, r14
   10358:	68 01       	movw	r12, r16
   1035a:	41 2c       	mov	r4, r1
   1035c:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1035e:	c6 14       	cp	r12, r6
   10360:	d7 04       	cpc	r13, r7
   10362:	14 f5       	brge	.+68     	; 0x103a8 <posix_tests+0xda>
        {
            if(MATCH(argv[i],"-p"))
   10364:	66 eb       	ldi	r22, 0xB6	; 182
   10366:	7b e0       	ldi	r23, 0x0B	; 11
   10368:	f4 01       	movw	r30, r8
   1036a:	81 91       	ld	r24, Z+
   1036c:	91 91       	ld	r25, Z+
   1036e:	4f 01       	movw	r8, r30
   10370:	0e 94 de 31 	call	0x63bc	; 0x63bc <MATCH>
   10374:	89 2b       	or	r24, r25
   10376:	19 f0       	breq	.+6      	; 0x1037e <posix_tests+0xb0>
                page = 1;
   10378:	44 24       	eor	r4, r4
   1037a:	43 94       	inc	r4
   1037c:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   1037e:	ff ef       	ldi	r31, 0xFF	; 255
   10380:	cf 1a       	sub	r12, r31
   10382:	df 0a       	sbc	r13, r31
   10384:	ec cf       	rjmp	.-40     	; 0x1035e <posix_tests+0x90>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   10386:	66 eb       	ldi	r22, 0xB6	; 182
   10388:	7b e0       	ldi	r23, 0x0B	; 11
   1038a:	f5 01       	movw	r30, r10
   1038c:	81 91       	ld	r24, Z+
   1038e:	91 91       	ld	r25, Z+
   10390:	5f 01       	movw	r10, r30
   10392:	0e 94 de 31 	call	0x63bc	; 0x63bc <MATCH>
   10396:	89 2b       	or	r24, r25
   10398:	29 f4       	brne	.+10     	; 0x103a4 <posix_tests+0xd6>
			{
				// displays its own errors
                cat(argv[ind], page);
   1039a:	b2 01       	movw	r22, r4
   1039c:	f7 01       	movw	r30, r14
   1039e:	80 81       	ld	r24, Z
   103a0:	91 81       	ldd	r25, Z+1	; 0x01
   103a2:	65 dd       	rcall	.-1334   	; 0xfe6e <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   103a4:	0f 5f       	subi	r16, 0xFF	; 255
   103a6:	1f 4f       	sbci	r17, 0xFF	; 255
   103a8:	06 15       	cp	r16, r6
   103aa:	17 05       	cpc	r17, r7
   103ac:	64 f3       	brlt	.-40     	; 0x10386 <posix_tests+0xb8>
   103ae:	f9 c0       	rjmp	.+498    	; 0x105a2 <posix_tests+0x2d4>
		}
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   103b0:	58 01       	movw	r10, r16
   103b2:	f2 e0       	ldi	r31, 0x02	; 2
   103b4:	af 0e       	add	r10, r31
   103b6:	b1 1c       	adc	r11, r1
   103b8:	93 01       	movw	r18, r6
   103ba:	a5 01       	movw	r20, r10
   103bc:	69 eb       	ldi	r22, 0xB9	; 185
   103be:	7b e0       	ldi	r23, 0x0B	; 11
   103c0:	c6 01       	movw	r24, r12
   103c2:	0e 94 06 32 	call	0x640c	; 0x640c <MATCHARGS>
   103c6:	89 2b       	or	r24, r25
   103c8:	69 f0       	breq	.+26     	; 0x103e4 <posix_tests+0x116>
    {
		if( copy(argv[ind],argv[ind+1]) < 0)
   103ca:	f8 01       	movw	r30, r16
   103cc:	ee 0f       	add	r30, r30
   103ce:	ff 1f       	adc	r31, r31
   103d0:	e8 0d       	add	r30, r8
   103d2:	f9 1d       	adc	r31, r9
   103d4:	62 81       	ldd	r22, Z+2	; 0x02
   103d6:	73 81       	ldd	r23, Z+3	; 0x03
   103d8:	80 81       	ld	r24, Z
   103da:	91 81       	ldd	r25, Z+1	; 0x01
   103dc:	32 dc       	rcall	.-1948   	; 0xfc42 <copy>
   103de:	97 ff       	sbrs	r25, 7
   103e0:	e0 c0       	rjmp	.+448    	; 0x105a2 <posix_tests+0x2d4>
   103e2:	5c c1       	rjmp	.+696    	; 0x1069c <posix_tests+0x3ce>
			return(-1);
        return(1);
    }

    else if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   103e4:	93 01       	movw	r18, r6
   103e6:	a7 01       	movw	r20, r14
   103e8:	6e eb       	ldi	r22, 0xBE	; 190
   103ea:	7b e0       	ldi	r23, 0x0B	; 11
   103ec:	c6 01       	movw	r24, r12
   103ee:	0e 94 06 32 	call	0x640c	; 0x640c <MATCHARGS>
   103f2:	89 2b       	or	r24, r25
   103f4:	b9 f0       	breq	.+46     	; 0x10424 <posix_tests+0x156>
    {
        if ( chdir(argv[ind]) != 0)
   103f6:	78 01       	movw	r14, r16
   103f8:	ee 0c       	add	r14, r14
   103fa:	ff 1c       	adc	r15, r15
   103fc:	e8 0c       	add	r14, r8
   103fe:	f9 1c       	adc	r15, r9
   10400:	f7 01       	movw	r30, r14
   10402:	80 81       	ld	r24, Z
   10404:	91 81       	ldd	r25, Z+1	; 0x01
   10406:	0e 94 b3 76 	call	0xed66	; 0xed66 <chdir>
   1040a:	89 2b       	or	r24, r25
   1040c:	09 f4       	brne	.+2      	; 0x10410 <posix_tests+0x142>
   1040e:	c9 c0       	rjmp	.+402    	; 0x105a2 <posix_tests+0x2d4>
		{
            printf("chdir %s failed\n", argv[ind]);
   10410:	f7 01       	movw	r30, r14
   10412:	80 81       	ld	r24, Z
   10414:	91 81       	ldd	r25, Z+1	; 0x01
   10416:	ed b7       	in	r30, 0x3d	; 61
   10418:	fe b7       	in	r31, 0x3e	; 62
   1041a:	95 83       	std	Z+5, r25	; 0x05
   1041c:	84 83       	std	Z+4, r24	; 0x04
   1041e:	8d e5       	ldi	r24, 0x5D	; 93
   10420:	9d e0       	ldi	r25, 0x0D	; 13
   10422:	36 c1       	rjmp	.+620    	; 0x10690 <posix_tests+0x3c2>
			return(-1);
        return(1);
    }
#endif

    else if (MATCHI(ptr,"ls") )
   10424:	68 ed       	ldi	r22, 0xD8	; 216
   10426:	78 e0       	ldi	r23, 0x08	; 8
   10428:	c6 01       	movw	r24, r12
   1042a:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   1042e:	89 2b       	or	r24, r25
   10430:	09 f4       	brne	.+2      	; 0x10434 <posix_tests+0x166>
   10432:	40 c0       	rjmp	.+128    	; 0x104b4 <posix_tests+0x1e6>
   10434:	78 01       	movw	r14, r16
   10436:	ee 0c       	add	r14, r14
   10438:	ff 1c       	adc	r15, r15
   1043a:	e8 0c       	add	r14, r8
   1043c:	f9 1c       	adc	r15, r9
   1043e:	c1 2c       	mov	r12, r1
   10440:	d1 2c       	mov	r13, r1
        int args = 0;
        for(i=ind;i<argc;++i)
        {
			if(!argv[i])
			{
				printf("ls: null argument # %d\n", i);
   10442:	85 e4       	ldi	r24, 0x45	; 69
   10444:	9d e0       	ldi	r25, 0x0D	; 13
   10446:	4c 01       	movw	r8, r24
   10448:	a1 2c       	mov	r10, r1

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   1044a:	06 15       	cp	r16, r6
   1044c:	17 05       	cpc	r17, r7
   1044e:	34 f5       	brge	.+76     	; 0x1049c <posix_tests+0x1ce>
        {
			if(!argv[i])
   10450:	f7 01       	movw	r30, r14
   10452:	80 81       	ld	r24, Z
   10454:	91 81       	ldd	r25, Z+1	; 0x01
   10456:	00 97       	sbiw	r24, 0x00	; 0
   10458:	51 f4       	brne	.+20     	; 0x1046e <posix_tests+0x1a0>
			{
				printf("ls: null argument # %d\n", i);
   1045a:	ed b7       	in	r30, 0x3d	; 61
   1045c:	fe b7       	in	r31, 0x3e	; 62
   1045e:	15 83       	std	Z+5, r17	; 0x05
   10460:	04 83       	std	Z+4, r16	; 0x04
   10462:	81 82       	std	Z+1, r8	; 0x01
   10464:	92 82       	std	Z+2, r9	; 0x02
   10466:	a3 82       	std	Z+3, r10	; 0x03
   10468:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
				continue;
   1046c:	11 c0       	rjmp	.+34     	; 0x10490 <posix_tests+0x1c2>
			}
            if(MATCH(argv[i],"-l"))	// skip long format test - we always use long format
   1046e:	61 ec       	ldi	r22, 0xC1	; 193
   10470:	7b e0       	ldi	r23, 0x0B	; 11
   10472:	0e 94 de 31 	call	0x63bc	; 0x63bc <MATCH>
   10476:	89 2b       	or	r24, r25
   10478:	59 f4       	brne	.+22     	; 0x10490 <posix_tests+0x1c2>
				continue;
			if( ls(argv[i],1) < 0)
   1047a:	61 e0       	ldi	r22, 0x01	; 1
   1047c:	70 e0       	ldi	r23, 0x00	; 0
   1047e:	f7 01       	movw	r30, r14
   10480:	80 81       	ld	r24, Z
   10482:	91 81       	ldd	r25, Z+1	; 0x01
   10484:	1c de       	rcall	.-968    	; 0x100be <ls>
   10486:	97 fd       	sbrc	r25, 7
   10488:	09 c1       	rjmp	.+530    	; 0x1069c <posix_tests+0x3ce>
			{
				return(-1);
			};
            ++args;
   1048a:	ff ef       	ldi	r31, 0xFF	; 255
   1048c:	cf 1a       	sub	r12, r31
   1048e:	df 0a       	sbc	r13, r31

    else if (MATCHI(ptr,"ls") )
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   10490:	0f 5f       	subi	r16, 0xFF	; 255
   10492:	1f 4f       	sbci	r17, 0xFF	; 255
   10494:	82 e0       	ldi	r24, 0x02	; 2
   10496:	e8 0e       	add	r14, r24
   10498:	f1 1c       	adc	r15, r1
   1049a:	d7 cf       	rjmp	.-82     	; 0x1044a <posix_tests+0x17c>
			{
				return(-1);
			};
            ++args;
        }
        if(!args)
   1049c:	c1 14       	cp	r12, r1
   1049e:	d1 04       	cpc	r13, r1
   104a0:	09 f0       	breq	.+2      	; 0x104a4 <posix_tests+0x1d6>
   104a2:	7f c0       	rjmp	.+254    	; 0x105a2 <posix_tests+0x2d4>
        {
            if( ls("",1) < 0)
   104a4:	61 e0       	ldi	r22, 0x01	; 1
   104a6:	70 e0       	ldi	r23, 0x00	; 0
   104a8:	8e e0       	ldi	r24, 0x0E	; 14
   104aa:	9c e0       	ldi	r25, 0x0C	; 12
   104ac:	08 de       	rcall	.-1008   	; 0x100be <ls>
   104ae:	97 ff       	sbrs	r25, 7
   104b0:	78 c0       	rjmp	.+240    	; 0x105a2 <posix_tests+0x2d4>
   104b2:	f4 c0       	rjmp	.+488    	; 0x1069c <posix_tests+0x3ce>
		}
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   104b4:	93 01       	movw	r18, r6
   104b6:	a7 01       	movw	r20, r14
   104b8:	64 ec       	ldi	r22, 0xC4	; 196
   104ba:	7b e0       	ldi	r23, 0x0B	; 11
   104bc:	c6 01       	movw	r24, r12
   104be:	0e 94 06 32 	call	0x640c	; 0x640c <MATCHARGS>
   104c2:	89 2b       	or	r24, r25
   104c4:	79 f1       	breq	.+94     	; 0x10524 <posix_tests+0x256>
    {
        int mode = 0777;
        if((ind+2) <= argc)
   104c6:	e6 14       	cp	r14, r6
   104c8:	f7 04       	cpc	r15, r7
   104ca:	7c f4       	brge	.+30     	; 0x104ea <posix_tests+0x21c>
        {
            mode = strtol(argv[ind+1],NULL,8);
   104cc:	ee 0c       	add	r14, r14
   104ce:	ff 1c       	adc	r15, r15
   104d0:	f4 01       	movw	r30, r8
   104d2:	ee 0d       	add	r30, r14
   104d4:	ff 1d       	adc	r31, r15
   104d6:	48 e0       	ldi	r20, 0x08	; 8
   104d8:	50 e0       	ldi	r21, 0x00	; 0
   104da:	60 e0       	ldi	r22, 0x00	; 0
   104dc:	70 e0       	ldi	r23, 0x00	; 0
   104de:	80 81       	ld	r24, Z
   104e0:	91 81       	ldd	r25, Z+1	; 0x01
   104e2:	0e 94 e0 46 	call	0x8dc0	; 0x8dc0 <strtol>
   104e6:	ab 01       	movw	r20, r22
   104e8:	02 c0       	rjmp	.+4      	; 0x104ee <posix_tests+0x220>
    }
#endif

    else if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   104ea:	4f ef       	ldi	r20, 0xFF	; 255
   104ec:	51 e0       	ldi	r21, 0x01	; 1
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        if ( mkdir(argv[ind],mode) != 0 )
   104ee:	78 01       	movw	r14, r16
   104f0:	ee 0c       	add	r14, r14
   104f2:	ff 1c       	adc	r15, r15
   104f4:	e8 0c       	add	r14, r8
   104f6:	f9 1c       	adc	r15, r9
   104f8:	05 2e       	mov	r0, r21
   104fa:	00 0c       	add	r0, r0
   104fc:	66 0b       	sbc	r22, r22
   104fe:	77 0b       	sbc	r23, r23
   10500:	f7 01       	movw	r30, r14
   10502:	80 81       	ld	r24, Z
   10504:	91 81       	ldd	r25, Z+1	; 0x01
   10506:	0e 94 20 77 	call	0xee40	; 0xee40 <mkdir>
   1050a:	89 2b       	or	r24, r25
   1050c:	09 f4       	brne	.+2      	; 0x10510 <posix_tests+0x242>
   1050e:	49 c0       	rjmp	.+146    	; 0x105a2 <posix_tests+0x2d4>
        {
            printf("mkdir %s failed\n", argv[ind]);
   10510:	f7 01       	movw	r30, r14
   10512:	80 81       	ld	r24, Z
   10514:	91 81       	ldd	r25, Z+1	; 0x01
   10516:	ed b7       	in	r30, 0x3d	; 61
   10518:	fe b7       	in	r31, 0x3e	; 62
   1051a:	95 83       	std	Z+5, r25	; 0x05
   1051c:	84 83       	std	Z+4, r24	; 0x04
   1051e:	84 e3       	ldi	r24, 0x34	; 52
   10520:	9d e0       	ldi	r25, 0x0D	; 13
   10522:	b6 c0       	rjmp	.+364    	; 0x10690 <posix_tests+0x3c2>
            return(-1);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"page", (ind + 1), argc))
   10524:	93 01       	movw	r18, r6
   10526:	a7 01       	movw	r20, r14
   10528:	6a ec       	ldi	r22, 0xCA	; 202
   1052a:	7b e0       	ldi	r23, 0x0B	; 11
   1052c:	c6 01       	movw	r24, r12
   1052e:	0e 94 06 32 	call	0x640c	; 0x640c <MATCHARGS>
   10532:	89 2b       	or	r24, r25
   10534:	71 f0       	breq	.+28     	; 0x10552 <posix_tests+0x284>
    {
        setpage(atoi(argv[ind]));
   10536:	00 0f       	add	r16, r16
   10538:	11 1f       	adc	r17, r17
   1053a:	f4 01       	movw	r30, r8
   1053c:	e0 0f       	add	r30, r16
   1053e:	f1 1f       	adc	r31, r17
   10540:	80 81       	ld	r24, Z
   10542:	91 81       	ldd	r25, Z+1	; 0x01
   10544:	0e 94 3e 47 	call	0x8e7c	; 0x8e7c <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   10548:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <_pagesize+0x1>
   1054c:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <_pagesize>
   10550:	28 c0       	rjmp	.+80     	; 0x105a2 <posix_tests+0x2d4>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    else if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   10552:	93 01       	movw	r18, r6
   10554:	a8 01       	movw	r20, r16
   10556:	6f ec       	ldi	r22, 0xCF	; 207
   10558:	7b e0       	ldi	r23, 0x0B	; 11
   1055a:	c6 01       	movw	r24, r12
   1055c:	0e 94 06 32 	call	0x640c	; 0x640c <MATCHARGS>
   10560:	89 2b       	or	r24, r25
   10562:	11 f1       	breq	.+68     	; 0x105a8 <posix_tests+0x2da>
    {
        char path[MAX_NAME_LEN+1];
		char *ptr = getcwd(path, sizeof(path)-2);
   10564:	6f ef       	ldi	r22, 0xFF	; 255
   10566:	70 e0       	ldi	r23, 0x00	; 0
   10568:	ce 01       	movw	r24, r28
   1056a:	08 96       	adiw	r24, 0x08	; 8
   1056c:	0e 94 fb 76 	call	0xedf6	; 0xedf6 <getcwd>
		if(ptr == NULL)
   10570:	00 97       	sbiw	r24, 0x00	; 0
   10572:	59 f4       	brne	.+22     	; 0x1058a <posix_tests+0x2bc>
		{
			printf("pwd FAILED\n");
   10574:	88 e2       	ldi	r24, 0x28	; 40
   10576:	9d e0       	ldi	r25, 0x0D	; 13
   10578:	a0 e0       	ldi	r26, 0x00	; 0
   1057a:	ed b7       	in	r30, 0x3d	; 61
   1057c:	fe b7       	in	r31, 0x3e	; 62
   1057e:	81 83       	std	Z+1, r24	; 0x01
   10580:	92 83       	std	Z+2, r25	; 0x02
   10582:	a3 83       	std	Z+3, r26	; 0x03
   10584:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   10588:	89 c0       	rjmp	.+274    	; 0x1069c <posix_tests+0x3ce>
			return(-1);
		}
        printf("%s\n", ptr);
   1058a:	ed b7       	in	r30, 0x3d	; 61
   1058c:	fe b7       	in	r31, 0x3e	; 62
   1058e:	95 83       	std	Z+5, r25	; 0x05
   10590:	84 83       	std	Z+4, r24	; 0x04
   10592:	84 e2       	ldi	r24, 0x24	; 36
   10594:	9d e0       	ldi	r25, 0x0D	; 13
   10596:	a0 e0       	ldi	r26, 0x00	; 0
   10598:	81 83       	std	Z+1, r24	; 0x01
   1059a:	92 83       	std	Z+2, r25	; 0x02
   1059c:	a3 83       	std	Z+3, r26	; 0x03
   1059e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        return(1);
   105a2:	81 e0       	ldi	r24, 0x01	; 1
   105a4:	90 e0       	ldi	r25, 0x00	; 0
   105a6:	7c c0       	rjmp	.+248    	; 0x106a0 <posix_tests+0x3d2>
    }

    else if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   105a8:	93 01       	movw	r18, r6
   105aa:	a5 01       	movw	r20, r10
   105ac:	63 ed       	ldi	r22, 0xD3	; 211
   105ae:	7b e0       	ldi	r23, 0x0B	; 11
   105b0:	c6 01       	movw	r24, r12
   105b2:	0e 94 06 32 	call	0x640c	; 0x640c <MATCHARGS>
   105b6:	89 2b       	or	r24, r25
   105b8:	59 f1       	breq	.+86     	; 0x10610 <posix_tests+0x342>
    {
        if( rename(argv[ind],argv[ind+1]) != 0)
   105ba:	00 0f       	add	r16, r16
   105bc:	11 1f       	adc	r17, r17
   105be:	64 01       	movw	r12, r8
   105c0:	c0 0e       	add	r12, r16
   105c2:	d1 1e       	adc	r13, r17
   105c4:	0e 5f       	subi	r16, 0xFE	; 254
   105c6:	1f 4f       	sbci	r17, 0xFF	; 255
   105c8:	74 01       	movw	r14, r8
   105ca:	e0 0e       	add	r14, r16
   105cc:	f1 1e       	adc	r15, r17
   105ce:	f7 01       	movw	r30, r14
   105d0:	60 81       	ld	r22, Z
   105d2:	71 81       	ldd	r23, Z+1	; 0x01
   105d4:	f6 01       	movw	r30, r12
   105d6:	80 81       	ld	r24, Z
   105d8:	91 81       	ldd	r25, Z+1	; 0x01
   105da:	0e 94 4e 77 	call	0xee9c	; 0xee9c <rename>
   105de:	89 2b       	or	r24, r25
   105e0:	01 f3       	breq	.-64     	; 0x105a2 <posix_tests+0x2d4>
        {
            printf("rename %s to %s\n", argv[ind], argv[ind+1]);
   105e2:	f7 01       	movw	r30, r14
   105e4:	80 81       	ld	r24, Z
   105e6:	91 81       	ldd	r25, Z+1	; 0x01
   105e8:	ed b7       	in	r30, 0x3d	; 61
   105ea:	fe b7       	in	r31, 0x3e	; 62
   105ec:	97 83       	std	Z+7, r25	; 0x07
   105ee:	86 83       	std	Z+6, r24	; 0x06
   105f0:	f6 01       	movw	r30, r12
   105f2:	80 81       	ld	r24, Z
   105f4:	91 81       	ldd	r25, Z+1	; 0x01
   105f6:	ed b7       	in	r30, 0x3d	; 61
   105f8:	fe b7       	in	r31, 0x3e	; 62
   105fa:	95 83       	std	Z+5, r25	; 0x05
   105fc:	84 83       	std	Z+4, r24	; 0x04
   105fe:	83 e1       	ldi	r24, 0x13	; 19
   10600:	9d e0       	ldi	r25, 0x0D	; 13
   10602:	a0 e0       	ldi	r26, 0x00	; 0
   10604:	81 83       	std	Z+1, r24	; 0x01
   10606:	92 83       	std	Z+2, r25	; 0x02
   10608:	a3 83       	std	Z+3, r26	; 0x03
   1060a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1060e:	46 c0       	rjmp	.+140    	; 0x1069c <posix_tests+0x3ce>
            return(-1);
        }
        return(1);
    }

    else if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   10610:	93 01       	movw	r18, r6
   10612:	a7 01       	movw	r20, r14
   10614:	6a ed       	ldi	r22, 0xDA	; 218
   10616:	7b e0       	ldi	r23, 0x0B	; 11
   10618:	c6 01       	movw	r24, r12
   1061a:	0e 94 06 32 	call	0x640c	; 0x640c <MATCHARGS>
   1061e:	89 2b       	or	r24, r25
   10620:	b9 f0       	breq	.+46     	; 0x10650 <posix_tests+0x382>
    {
        if ( unlink(argv[ind]) != 0)
   10622:	78 01       	movw	r14, r16
   10624:	ee 0c       	add	r14, r14
   10626:	ff 1c       	adc	r15, r15
   10628:	e8 0c       	add	r14, r8
   1062a:	f9 1c       	adc	r15, r9
   1062c:	f7 01       	movw	r30, r14
   1062e:	80 81       	ld	r24, Z
   10630:	91 81       	ldd	r25, Z+1	; 0x01
   10632:	0e 94 6d 77 	call	0xeeda	; 0xeeda <unlink>
   10636:	89 2b       	or	r24, r25
   10638:	09 f4       	brne	.+2      	; 0x1063c <posix_tests+0x36e>
   1063a:	b3 cf       	rjmp	.-154    	; 0x105a2 <posix_tests+0x2d4>
        {
            printf("rm %s failed\n", argv[ind]);
   1063c:	f7 01       	movw	r30, r14
   1063e:	80 81       	ld	r24, Z
   10640:	91 81       	ldd	r25, Z+1	; 0x01
   10642:	ed b7       	in	r30, 0x3d	; 61
   10644:	fe b7       	in	r31, 0x3e	; 62
   10646:	95 83       	std	Z+5, r25	; 0x05
   10648:	84 83       	std	Z+4, r24	; 0x04
   1064a:	85 e0       	ldi	r24, 0x05	; 5
   1064c:	9d e0       	ldi	r25, 0x0D	; 13
   1064e:	20 c0       	rjmp	.+64     	; 0x10690 <posix_tests+0x3c2>
        dump_stat(&p);
        return(1);
    }
#endif

    else if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   10650:	93 01       	movw	r18, r6
   10652:	a7 01       	movw	r20, r14
   10654:	6d ed       	ldi	r22, 0xDD	; 221
   10656:	7b e0       	ldi	r23, 0x0B	; 11
   10658:	c6 01       	movw	r24, r12
   1065a:	0e 94 06 32 	call	0x640c	; 0x640c <MATCHARGS>
   1065e:	89 2b       	or	r24, r25
   10660:	09 f4       	brne	.+2      	; 0x10664 <posix_tests+0x396>
   10662:	3e ce       	rjmp	.-900    	; 0x102e0 <posix_tests+0x12>
    {
        if ( rmdir(argv[ind]) != 0)
   10664:	78 01       	movw	r14, r16
   10666:	ee 0c       	add	r14, r14
   10668:	ff 1c       	adc	r15, r15
   1066a:	e8 0c       	add	r14, r8
   1066c:	f9 1c       	adc	r15, r9
   1066e:	f7 01       	movw	r30, r14
   10670:	80 81       	ld	r24, Z
   10672:	91 81       	ldd	r25, Z+1	; 0x01
   10674:	0e 94 8c 77 	call	0xef18	; 0xef18 <rmdir>
   10678:	89 2b       	or	r24, r25
   1067a:	09 f4       	brne	.+2      	; 0x1067e <posix_tests+0x3b0>
   1067c:	92 cf       	rjmp	.-220    	; 0x105a2 <posix_tests+0x2d4>
        {
            printf("rmdir %s failed\n", argv[ind]);
   1067e:	f7 01       	movw	r30, r14
   10680:	80 81       	ld	r24, Z
   10682:	91 81       	ldd	r25, Z+1	; 0x01
   10684:	ed b7       	in	r30, 0x3d	; 61
   10686:	fe b7       	in	r31, 0x3e	; 62
   10688:	95 83       	std	Z+5, r25	; 0x05
   1068a:	84 83       	std	Z+4, r24	; 0x04
   1068c:	84 ef       	ldi	r24, 0xF4	; 244
   1068e:	9c e0       	ldi	r25, 0x0C	; 12
   10690:	a0 e0       	ldi	r26, 0x00	; 0
   10692:	81 83       	std	Z+1, r24	; 0x01
   10694:	92 83       	std	Z+2, r25	; 0x02
   10696:	a3 83       	std	Z+3, r26	; 0x03
   10698:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            return(-1);
   1069c:	8f ef       	ldi	r24, 0xFF	; 255
   1069e:	9f ef       	ldi	r25, 0xFF	; 255
        return(1);
    }
#endif

    return(0);
}
   106a0:	c8 5f       	subi	r28, 0xF8	; 248
   106a2:	de 4f       	sbci	r29, 0xFE	; 254
   106a4:	e0 e1       	ldi	r30, 0x10	; 16
   106a6:	0c 94 84 e6 	jmp	0x1cd08	; 0x1cd08 <__epilogue_restores__+0x4>

000106aa <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   106aa:	00 d0       	rcall	.+0      	; 0x106ac <gpib_timer_init+0x2>
   106ac:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   106ae:	61 e0       	ldi	r22, 0x01	; 1
   106b0:	70 e0       	ldi	r23, 0x00	; 0
   106b2:	81 e1       	ldi	r24, 0x11	; 17
   106b4:	95 e8       	ldi	r25, 0x85	; 133
   106b6:	0e 94 53 34 	call	0x68a6	; 0x68a6 <set_timers>
   106ba:	01 96       	adiw	r24, 0x01	; 1
   106bc:	51 f4       	brne	.+20     	; 0x106d2 <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   106be:	8e e9       	ldi	r24, 0x9E	; 158
   106c0:	9e e0       	ldi	r25, 0x0E	; 14
   106c2:	a0 e0       	ldi	r26, 0x00	; 0
   106c4:	ed b7       	in	r30, 0x3d	; 61
   106c6:	fe b7       	in	r31, 0x3e	; 62
   106c8:	81 83       	std	Z+1, r24	; 0x01
   106ca:	92 83       	std	Z+2, r25	; 0x02
   106cc:	a3 83       	std	Z+3, r26	; 0x03
   106ce:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

    gpib_timer_reset();
   106d2:	95 d1       	rcall	.+810    	; 0x109fe <gpib_timer_reset>
}
   106d4:	0f 90       	pop	r0
   106d6:	0f 90       	pop	r0
   106d8:	0f 90       	pop	r0
   106da:	08 95       	ret

000106dc <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   106dc:	28 2f       	mov	r18, r24
   106de:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   106e0:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   106e2:	88 0f       	add	r24, r24
        if(mask & 1)
   106e4:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   106e6:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   106e8:	26 95       	lsr	r18
   106ea:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   106ec:	d1 f7       	brne	.-12     	; 0x106e2 <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   106ee:	08 95       	ret

000106f0 <ppr_set>:
void ppr_set(uint8_t mask)
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    _ppr_reg = reverse_8bits(mask);
   106f0:	f5 df       	rcall	.-22     	; 0x106dc <reverse_8bits>
   106f2:	80 93 54 19 	sts	0x1954, r24	; 0x801954 <_ppr_reg>
#else
    _ppr_reg = mask;
#endif
    SPI0_TXRX_Byte(_ppr_reg);
   106f6:	0e 94 ad 2a 	call	0x555a	; 0x555a <SPI0_TXRX_Byte>

    GPIB_IO_HI(PPE);
   106fa:	2a 9a       	sbi	0x05, 2	; 5
   106fc:	22 9a       	sbi	0x04, 2	; 4
    GPIB_IO_LOW(PPE);
   106fe:	2a 98       	cbi	0x05, 2	; 5
   10700:	22 9a       	sbi	0x04, 2	; 4
   10702:	08 95       	ret

00010704 <ppr_reg>:
uint8_t ppr_reg()
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    return(reverse_8bits(_ppr_reg));
   10704:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <_ppr_reg>
   10708:	e9 cf       	rjmp	.-46     	; 0x106dc <reverse_8bits>
#else
    return(_ppr_reg);
#endif
}
   1070a:	08 95       	ret

0001070c <ppr_init>:
///
/// - Hides the register access implimentation from the upper level.
/// @return  void

void ppr_init()
{
   1070c:	00 d0       	rcall	.+0      	; 0x1070e <ppr_init+0x2>
   1070e:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_PPR)
   10710:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10714:	81 ff       	sbrs	r24, 1
   10716:	0a c0       	rjmp	.+20     	; 0x1072c <ppr_init+0x20>
        printf("[PPR DISABLE ALL]\n");
   10718:	8b e8       	ldi	r24, 0x8B	; 139
   1071a:	9e e0       	ldi	r25, 0x0E	; 14
   1071c:	a0 e0       	ldi	r26, 0x00	; 0
   1071e:	ed b7       	in	r30, 0x3d	; 61
   10720:	fe b7       	in	r31, 0x3e	; 62
   10722:	81 83       	std	Z+1, r24	; 0x01
   10724:	92 83       	std	Z+2, r25	; 0x02
   10726:	a3 83       	std	Z+3, r26	; 0x03
   10728:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
    ppr_set(0);
   1072c:	80 e0       	ldi	r24, 0x00	; 0
   1072e:	e0 df       	rcall	.-64     	; 0x106f0 <ppr_set>
}
   10730:	0f 90       	pop	r0
   10732:	0f 90       	pop	r0
   10734:	0f 90       	pop	r0
   10736:	08 95       	ret

00010738 <ppr_bit_set>:
/// @return  void

void ppr_bit_set(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_SET(_ppr_reg,bit);
   10738:	21 e0       	ldi	r18, 0x01	; 1
   1073a:	30 e0       	ldi	r19, 0x00	; 0
   1073c:	01 c0       	rjmp	.+2      	; 0x10740 <ppr_bit_set+0x8>
   1073e:	22 0f       	add	r18, r18
   10740:	8a 95       	dec	r24
   10742:	ea f7       	brpl	.-6      	; 0x1073e <ppr_bit_set+0x6>
   10744:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <_ppr_reg>
   10748:	82 2b       	or	r24, r18
   1074a:	80 93 54 19 	sts	0x1954, r24	; 0x801954 <_ppr_reg>
    ppr_set(_ppr_reg);
   1074e:	d0 cf       	rjmp	.-96     	; 0x106f0 <ppr_set>
   10750:	08 95       	ret

00010752 <ppr_bit_clr>:
/// @return  void

void ppr_bit_clr(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_CLR(_ppr_reg,bit);
   10752:	21 e0       	ldi	r18, 0x01	; 1
   10754:	30 e0       	ldi	r19, 0x00	; 0
   10756:	01 c0       	rjmp	.+2      	; 0x1075a <ppr_bit_clr+0x8>
   10758:	22 0f       	add	r18, r18
   1075a:	8a 95       	dec	r24
   1075c:	ea f7       	brpl	.-6      	; 0x10758 <ppr_bit_clr+0x6>
   1075e:	20 95       	com	r18
   10760:	80 91 54 19 	lds	r24, 0x1954	; 0x801954 <_ppr_reg>
   10764:	82 23       	and	r24, r18
   10766:	80 93 54 19 	sts	0x1954, r24	; 0x801954 <_ppr_reg>
    ppr_set(_ppr_reg);
   1076a:	c2 cf       	rjmp	.-124    	; 0x106f0 <ppr_set>
   1076c:	08 95       	ret

0001076e <dbf_open>:
/// @see ff.h
///
/// @return  FRESULT f_open(fp,path, mode);

FRESULT dbf_open (FIL* fp, const TCHAR* path, BYTE mode)
{
   1076e:	0f 93       	push	r16
   10770:	1f 93       	push	r17
   10772:	cf 93       	push	r28
   10774:	df 93       	push	r29
   10776:	00 d0       	rcall	.+0      	; 0x10778 <dbf_open+0xa>
   10778:	00 d0       	rcall	.+0      	; 0x1077a <dbf_open+0xc>
   1077a:	1f 92       	push	r1
   1077c:	8b 01       	movw	r16, r22
    int rc;
    rc = f_open(fp,path, mode);
   1077e:	0e 94 4d 59 	call	0xb29a	; 0xb29a <f_open>
   10782:	ec 01       	movw	r28, r24
    if(rc)
   10784:	89 2b       	or	r24, r25
   10786:	79 f0       	breq	.+30     	; 0x107a6 <dbf_open+0x38>
    {
        printf("Open error:[%s] ", path);
   10788:	ed b7       	in	r30, 0x3d	; 61
   1078a:	fe b7       	in	r31, 0x3e	; 62
   1078c:	15 83       	std	Z+5, r17	; 0x05
   1078e:	04 83       	std	Z+4, r16	; 0x04
   10790:	8a e7       	ldi	r24, 0x7A	; 122
   10792:	9e e0       	ldi	r25, 0x0E	; 14
   10794:	a0 e0       	ldi	r26, 0x00	; 0
   10796:	81 83       	std	Z+1, r24	; 0x01
   10798:	92 83       	std	Z+2, r25	; 0x02
   1079a:	a3 83       	std	Z+3, r26	; 0x03
   1079c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        put_rc(rc);
   107a0:	ce 01       	movw	r24, r28
   107a2:	0e 94 87 70 	call	0xe10e	; 0xe10e <put_rc>
        return (rc);
    }
    return(0);
}
   107a6:	ce 01       	movw	r24, r28
   107a8:	cd b7       	in	r28, 0x3d	; 61
   107aa:	de b7       	in	r29, 0x3e	; 62
   107ac:	25 96       	adiw	r28, 0x05	; 5
   107ae:	e4 e0       	ldi	r30, 0x04	; 4
   107b0:	0c 94 90 e6 	jmp	0x1cd20	; 0x1cd20 <__epilogue_restores__+0x1c>

000107b4 <dbf_read>:
/// @see ff.h
///
/// @return  FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br)

FRESULT dbf_read (FIL* fp, void* buff, UINT btr, UINT* br)
{
   107b4:	cf 93       	push	r28
   107b6:	df 93       	push	r29
   107b8:	00 d0       	rcall	.+0      	; 0x107ba <dbf_read+0x6>
   107ba:	1f 92       	push	r1
    int rc;
    rc = f_read(fp, buff, btr, br);
   107bc:	0e 94 05 5b 	call	0xb60a	; 0xb60a <f_read>
   107c0:	ec 01       	movw	r28, r24
    if(rc)
   107c2:	89 2b       	or	r24, r25
   107c4:	69 f0       	breq	.+26     	; 0x107e0 <dbf_read+0x2c>
    {
        printf("Read error: ");
   107c6:	8d e6       	ldi	r24, 0x6D	; 109
   107c8:	9e e0       	ldi	r25, 0x0E	; 14
   107ca:	a0 e0       	ldi	r26, 0x00	; 0
   107cc:	ed b7       	in	r30, 0x3d	; 61
   107ce:	fe b7       	in	r31, 0x3e	; 62
   107d0:	81 83       	std	Z+1, r24	; 0x01
   107d2:	92 83       	std	Z+2, r25	; 0x02
   107d4:	a3 83       	std	Z+3, r26	; 0x03
   107d6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        put_rc(rc);
   107da:	ce 01       	movw	r24, r28
   107dc:	0e 94 87 70 	call	0xe10e	; 0xe10e <put_rc>
        return (rc);
    }
    return(0);
}
   107e0:	ce 01       	movw	r24, r28
   107e2:	cd b7       	in	r28, 0x3d	; 61
   107e4:	de b7       	in	r29, 0x3e	; 62
   107e6:	23 96       	adiw	r28, 0x03	; 3
   107e8:	e2 e0       	ldi	r30, 0x02	; 2
   107ea:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

000107ee <dbf_write>:
///
/// @see ff.h
/// @return  FRESULT f_write (FIL* fp, void* buff, UINT btw, UINT* bw)

FRESULT dbf_write (FIL* fp, const void* buff, UINT btw, UINT* bw)
{
   107ee:	cf 93       	push	r28
   107f0:	df 93       	push	r29
   107f2:	00 d0       	rcall	.+0      	; 0x107f4 <dbf_write+0x6>
   107f4:	1f 92       	push	r1
    int rc;
    rc = f_write(fp, buff, btw, bw);
   107f6:	0e 94 50 5c 	call	0xb8a0	; 0xb8a0 <f_write>
   107fa:	ec 01       	movw	r28, r24
    if(rc)
   107fc:	89 2b       	or	r24, r25
   107fe:	69 f0       	breq	.+26     	; 0x1081a <dbf_write+0x2c>
    {
        printf("Write error: ");
   10800:	8f e5       	ldi	r24, 0x5F	; 95
   10802:	9e e0       	ldi	r25, 0x0E	; 14
   10804:	a0 e0       	ldi	r26, 0x00	; 0
   10806:	ed b7       	in	r30, 0x3d	; 61
   10808:	fe b7       	in	r31, 0x3e	; 62
   1080a:	81 83       	std	Z+1, r24	; 0x01
   1080c:	92 83       	std	Z+2, r25	; 0x02
   1080e:	a3 83       	std	Z+3, r26	; 0x03
   10810:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        put_rc(rc);
   10814:	ce 01       	movw	r24, r28
   10816:	0e 94 87 70 	call	0xe10e	; 0xe10e <put_rc>
        return (rc);
    }
    return(0);
}
   1081a:	ce 01       	movw	r24, r28
   1081c:	cd b7       	in	r28, 0x3d	; 61
   1081e:	de b7       	in	r29, 0x3e	; 62
   10820:	23 96       	adiw	r28, 0x03	; 3
   10822:	e2 e0       	ldi	r30, 0x02	; 2
   10824:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00010828 <dbf_lseek>:
///
/// @see ff.h.
/// @return  FRESULT

FRESULT dbf_lseek (FIL* fp, DWORD ofs)
{
   10828:	cf 93       	push	r28
   1082a:	df 93       	push	r29
   1082c:	00 d0       	rcall	.+0      	; 0x1082e <dbf_lseek+0x6>
   1082e:	1f 92       	push	r1
    int rc;
    rc = f_lseek(fp, ofs);
   10830:	0e 94 11 60 	call	0xc022	; 0xc022 <f_lseek>
   10834:	ec 01       	movw	r28, r24
    if(rc)
   10836:	89 2b       	or	r24, r25
   10838:	69 f0       	breq	.+26     	; 0x10854 <dbf_lseek+0x2c>
    {
        printf("Seek error: ");
   1083a:	82 e5       	ldi	r24, 0x52	; 82
   1083c:	9e e0       	ldi	r25, 0x0E	; 14
   1083e:	a0 e0       	ldi	r26, 0x00	; 0
   10840:	ed b7       	in	r30, 0x3d	; 61
   10842:	fe b7       	in	r31, 0x3e	; 62
   10844:	81 83       	std	Z+1, r24	; 0x01
   10846:	92 83       	std	Z+2, r25	; 0x02
   10848:	a3 83       	std	Z+3, r26	; 0x03
   1084a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        put_rc(rc);
   1084e:	ce 01       	movw	r24, r28
   10850:	0e 94 87 70 	call	0xe10e	; 0xe10e <put_rc>
        return (rc);
    }
    return(0);
}
   10854:	ce 01       	movw	r24, r28
   10856:	cd b7       	in	r28, 0x3d	; 61
   10858:	de b7       	in	r29, 0x3e	; 62
   1085a:	23 96       	adiw	r28, 0x03	; 3
   1085c:	e2 e0       	ldi	r30, 0x02	; 2
   1085e:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00010862 <dbf_close>:
///
/// @see ff.h.
/// @return  FRESULT dbf_close (FIL* fp)

FRESULT dbf_close (FIL* fp)
{
   10862:	cf 93       	push	r28
   10864:	df 93       	push	r29
   10866:	00 d0       	rcall	.+0      	; 0x10868 <dbf_close+0x6>
   10868:	1f 92       	push	r1
    int rc;
    rc = f_close(fp);
   1086a:	0e 94 67 5e 	call	0xbcce	; 0xbcce <f_close>
   1086e:	ec 01       	movw	r28, r24
    if(rc != FR_OK)
   10870:	89 2b       	or	r24, r25
   10872:	69 f0       	breq	.+26     	; 0x1088e <dbf_close+0x2c>
    {
        printf("Close error: ");
   10874:	84 e4       	ldi	r24, 0x44	; 68
   10876:	9e e0       	ldi	r25, 0x0E	; 14
   10878:	a0 e0       	ldi	r26, 0x00	; 0
   1087a:	ed b7       	in	r30, 0x3d	; 61
   1087c:	fe b7       	in	r31, 0x3e	; 62
   1087e:	81 83       	std	Z+1, r24	; 0x01
   10880:	92 83       	std	Z+2, r25	; 0x02
   10882:	a3 83       	std	Z+3, r26	; 0x03
   10884:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        put_rc(rc);
   10888:	ce 01       	movw	r24, r28
   1088a:	0e 94 87 70 	call	0xe10e	; 0xe10e <put_rc>
        return (rc);
    }
    return(0);
}
   1088e:	ce 01       	movw	r24, r28
   10890:	cd b7       	in	r28, 0x3d	; 61
   10892:	de b7       	in	r29, 0x3e	; 62
   10894:	23 96       	adiw	r28, 0x03	; 3
   10896:	e2 e0       	ldi	r30, 0x02	; 2
   10898:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

0001089c <dbf_open_read>:
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT

int dbf_open_read(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   1089c:	a6 e2       	ldi	r26, 0x26	; 38
   1089e:	b2 e0       	ldi	r27, 0x02	; 2
   108a0:	e4 e5       	ldi	r30, 0x54	; 84
   108a2:	f4 e8       	ldi	r31, 0x84	; 132
   108a4:	0c 94 6c e6 	jmp	0x1ccd8	; 0x1ccd8 <__prologue_saves__+0xc>
   108a8:	4a 01       	movw	r8, r20
   108aa:	5b 01       	movw	r10, r22
   108ac:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   108ae:	cb 5d       	subi	r28, 0xDB	; 219
   108b0:	dd 4f       	sbci	r29, 0xFD	; 253
   108b2:	19 82       	std	Y+1, r1	; 0x01
   108b4:	18 82       	st	Y, r1
   108b6:	c5 52       	subi	r28, 0x25	; 37
   108b8:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   108ba:	43 e0       	ldi	r20, 0x03	; 3
   108bc:	bc 01       	movw	r22, r24
   108be:	ce 01       	movw	r24, r28
   108c0:	01 96       	adiw	r24, 0x01	; 1
   108c2:	55 df       	rcall	.-342    	; 0x1076e <dbf_open>
    if( rc != FR_OK)
   108c4:	89 2b       	or	r24, r25
   108c6:	19 f0       	breq	.+6      	; 0x108ce <dbf_open_read+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_READ;
        *errors = flags;
   108c8:	81 e1       	ldi	r24, 0x11	; 17
   108ca:	90 e0       	ldi	r25, 0x00	; 0
   108cc:	2f c0       	rjmp	.+94     	; 0x1092c <dbf_open_read+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   108ce:	b5 01       	movw	r22, r10
   108d0:	a4 01       	movw	r20, r8
   108d2:	ce 01       	movw	r24, r28
   108d4:	01 96       	adiw	r24, 0x01	; 1
   108d6:	a8 df       	rcall	.-176    	; 0x10828 <dbf_lseek>
    if( rc != FR_OK)
   108d8:	89 2b       	or	r24, r25
   108da:	59 f0       	breq	.+22     	; 0x108f2 <dbf_open_read+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_READ;
        *errors = flags;
   108dc:	85 e0       	ldi	r24, 0x05	; 5
   108de:	90 e0       	ldi	r25, 0x00	; 0
   108e0:	f7 01       	movw	r30, r14
   108e2:	91 83       	std	Z+1, r25	; 0x01
   108e4:	80 83       	st	Z, r24
        dbf_close(&fp);
   108e6:	ce 01       	movw	r24, r28
   108e8:	01 96       	adiw	r24, 0x01	; 1
   108ea:	bb df       	rcall	.-138    	; 0x10862 <dbf_close>
        return( -1 );
   108ec:	8f ef       	ldi	r24, 0xFF	; 255
   108ee:	9f ef       	ldi	r25, 0xFF	; 255
   108f0:	27 c0       	rjmp	.+78     	; 0x10940 <dbf_open_read+0xa4>
    }

    rc = dbf_read(&fp, buff,size,&bytes);
   108f2:	9e 01       	movw	r18, r28
   108f4:	2b 5d       	subi	r18, 0xDB	; 219
   108f6:	3d 4f       	sbci	r19, 0xFD	; 253
   108f8:	a8 01       	movw	r20, r16
   108fa:	b6 01       	movw	r22, r12
   108fc:	ce 01       	movw	r24, r28
   108fe:	01 96       	adiw	r24, 0x01	; 1
   10900:	59 df       	rcall	.-334    	; 0x107b4 <dbf_read>
    if( rc != FR_OK || (UINT) size != bytes)
   10902:	89 2b       	or	r24, r25
   10904:	49 f4       	brne	.+18     	; 0x10918 <dbf_open_read+0x7c>
   10906:	cb 5d       	subi	r28, 0xDB	; 219
   10908:	dd 4f       	sbci	r29, 0xFD	; 253
   1090a:	88 81       	ld	r24, Y
   1090c:	99 81       	ldd	r25, Y+1	; 0x01
   1090e:	c5 52       	subi	r28, 0x25	; 37
   10910:	d2 40       	sbci	r29, 0x02	; 2
   10912:	08 17       	cp	r16, r24
   10914:	19 07       	cpc	r17, r25
   10916:	19 f0       	breq	.+6      	; 0x1091e <dbf_open_read+0x82>
    {
        flags |= ERR_READ;
        *errors = flags;
   10918:	81 e0       	ldi	r24, 0x01	; 1
   1091a:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   1091c:	e1 cf       	rjmp	.-62     	; 0x108e0 <dbf_open_read+0x44>
   1091e:	ce 01       	movw	r24, r28
   10920:	01 96       	adiw	r24, 0x01	; 1
   10922:	9f df       	rcall	.-194    	; 0x10862 <dbf_close>
    if( rc != FR_OK)
   10924:	89 2b       	or	r24, r25
   10926:	31 f0       	breq	.+12     	; 0x10934 <dbf_open_read+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   10928:	80 e1       	ldi	r24, 0x10	; 16
   1092a:	90 e0       	ldi	r25, 0x00	; 0
   1092c:	f7 01       	movw	r30, r14
   1092e:	91 83       	std	Z+1, r25	; 0x01
   10930:	80 83       	st	Z, r24
   10932:	dc cf       	rjmp	.-72     	; 0x108ec <dbf_open_read+0x50>
#if 0
// test timeout - this works ok
	delayms(500); 
#endif

    return(bytes);
   10934:	cb 5d       	subi	r28, 0xDB	; 219
   10936:	dd 4f       	sbci	r29, 0xFD	; 253
   10938:	88 81       	ld	r24, Y
   1093a:	99 81       	ldd	r25, Y+1	; 0x01
   1093c:	c5 52       	subi	r28, 0x25	; 37
   1093e:	d2 40       	sbci	r29, 0x02	; 2
}
   10940:	ca 5d       	subi	r28, 0xDA	; 218
   10942:	dd 4f       	sbci	r29, 0xFD	; 253
   10944:	ec e0       	ldi	r30, 0x0C	; 12
   10946:	0c 94 88 e6 	jmp	0x1cd10	; 0x1cd10 <__epilogue_restores__+0xc>

0001094a <dbf_open_write>:
/// @return  bytes actually written.
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT
int dbf_open_write(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   1094a:	a6 e2       	ldi	r26, 0x26	; 38
   1094c:	b2 e0       	ldi	r27, 0x02	; 2
   1094e:	eb ea       	ldi	r30, 0xAB	; 171
   10950:	f4 e8       	ldi	r31, 0x84	; 132
   10952:	0c 94 6c e6 	jmp	0x1ccd8	; 0x1ccd8 <__prologue_saves__+0xc>
   10956:	4a 01       	movw	r8, r20
   10958:	5b 01       	movw	r10, r22
   1095a:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   1095c:	cb 5d       	subi	r28, 0xDB	; 219
   1095e:	dd 4f       	sbci	r29, 0xFD	; 253
   10960:	19 82       	std	Y+1, r1	; 0x01
   10962:	18 82       	st	Y, r1
   10964:	c5 52       	subi	r28, 0x25	; 37
   10966:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   10968:	43 e0       	ldi	r20, 0x03	; 3
   1096a:	bc 01       	movw	r22, r24
   1096c:	ce 01       	movw	r24, r28
   1096e:	01 96       	adiw	r24, 0x01	; 1
   10970:	fe de       	rcall	.-516    	; 0x1076e <dbf_open>
    if( rc != FR_OK)
   10972:	89 2b       	or	r24, r25
   10974:	19 f0       	breq	.+6      	; 0x1097c <dbf_open_write+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_WRITE;
        *errors = flags;
   10976:	82 e1       	ldi	r24, 0x12	; 18
   10978:	90 e0       	ldi	r25, 0x00	; 0
   1097a:	2f c0       	rjmp	.+94     	; 0x109da <dbf_open_write+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   1097c:	b5 01       	movw	r22, r10
   1097e:	a4 01       	movw	r20, r8
   10980:	ce 01       	movw	r24, r28
   10982:	01 96       	adiw	r24, 0x01	; 1
   10984:	51 df       	rcall	.-350    	; 0x10828 <dbf_lseek>
    if( rc != FR_OK)
   10986:	89 2b       	or	r24, r25
   10988:	59 f0       	breq	.+22     	; 0x109a0 <dbf_open_write+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_WRITE;
        *errors = flags;
   1098a:	86 e0       	ldi	r24, 0x06	; 6
   1098c:	90 e0       	ldi	r25, 0x00	; 0
   1098e:	f7 01       	movw	r30, r14
   10990:	91 83       	std	Z+1, r25	; 0x01
   10992:	80 83       	st	Z, r24
        dbf_close(&fp);
   10994:	ce 01       	movw	r24, r28
   10996:	01 96       	adiw	r24, 0x01	; 1
   10998:	64 df       	rcall	.-312    	; 0x10862 <dbf_close>
        return( -1 );
   1099a:	8f ef       	ldi	r24, 0xFF	; 255
   1099c:	9f ef       	ldi	r25, 0xFF	; 255
   1099e:	27 c0       	rjmp	.+78     	; 0x109ee <dbf_open_write+0xa4>
    }

    rc = dbf_write(&fp, buff,size,&bytes);
   109a0:	9e 01       	movw	r18, r28
   109a2:	2b 5d       	subi	r18, 0xDB	; 219
   109a4:	3d 4f       	sbci	r19, 0xFD	; 253
   109a6:	a8 01       	movw	r20, r16
   109a8:	b6 01       	movw	r22, r12
   109aa:	ce 01       	movw	r24, r28
   109ac:	01 96       	adiw	r24, 0x01	; 1
   109ae:	1f df       	rcall	.-450    	; 0x107ee <dbf_write>
    if( rc != FR_OK || (UINT) size != bytes)
   109b0:	89 2b       	or	r24, r25
   109b2:	49 f4       	brne	.+18     	; 0x109c6 <dbf_open_write+0x7c>
   109b4:	cb 5d       	subi	r28, 0xDB	; 219
   109b6:	dd 4f       	sbci	r29, 0xFD	; 253
   109b8:	88 81       	ld	r24, Y
   109ba:	99 81       	ldd	r25, Y+1	; 0x01
   109bc:	c5 52       	subi	r28, 0x25	; 37
   109be:	d2 40       	sbci	r29, 0x02	; 2
   109c0:	08 17       	cp	r16, r24
   109c2:	19 07       	cpc	r17, r25
   109c4:	19 f0       	breq	.+6      	; 0x109cc <dbf_open_write+0x82>
    {
        flags |= ERR_WRITE;
        *errors = flags;
   109c6:	82 e0       	ldi	r24, 0x02	; 2
   109c8:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   109ca:	e1 cf       	rjmp	.-62     	; 0x1098e <dbf_open_write+0x44>
   109cc:	ce 01       	movw	r24, r28
   109ce:	01 96       	adiw	r24, 0x01	; 1
   109d0:	48 df       	rcall	.-368    	; 0x10862 <dbf_close>
    if( rc != FR_OK)
   109d2:	89 2b       	or	r24, r25
   109d4:	31 f0       	breq	.+12     	; 0x109e2 <dbf_open_write+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   109d6:	80 e1       	ldi	r24, 0x10	; 16
   109d8:	90 e0       	ldi	r25, 0x00	; 0
   109da:	f7 01       	movw	r30, r14
   109dc:	91 83       	std	Z+1, r25	; 0x01
   109de:	80 83       	st	Z, r24
   109e0:	dc cf       	rjmp	.-72     	; 0x1099a <dbf_open_write+0x50>
#if 0
// test timeout - this causes timeout
	delayms(200); 
#endif

    return(bytes);
   109e2:	cb 5d       	subi	r28, 0xDB	; 219
   109e4:	dd 4f       	sbci	r29, 0xFD	; 253
   109e6:	88 81       	ld	r24, Y
   109e8:	99 81       	ldd	r25, Y+1	; 0x01
   109ea:	c5 52       	subi	r28, 0x25	; 37
   109ec:	d2 40       	sbci	r29, 0x02	; 2
}
   109ee:	ca 5d       	subi	r28, 0xDA	; 218
   109f0:	dd 4f       	sbci	r29, 0xFD	; 253
   109f2:	ec e0       	ldi	r30, 0x0C	; 12
   109f4:	0c 94 88 e6 	jmp	0x1cd10	; 0x1cd10 <__epilogue_restores__+0xc>

000109f8 <gpib_timer_elapsed_begin>:
            gpib_timer_elapsed_end("PP released");
#endif
        return(1);
    }
    return(0);
}
   109f8:	0c 94 13 35 	jmp	0x6a26	; 0x6a26 <clock_elapsed_begin>
   109fc:	08 95       	ret

000109fe <gpib_timer_reset>:
   109fe:	f8 94       	cli
   10a00:	e5 ed       	ldi	r30, 0xD5	; 213
   10a02:	fc e1       	ldi	r31, 0x1C	; 28
   10a04:	10 82       	st	Z, r1
   10a06:	11 82       	std	Z+1, r1	; 0x01
   10a08:	12 82       	std	Z+2, r1	; 0x02
   10a0a:	13 82       	std	Z+3, r1	; 0x03
   10a0c:	14 82       	std	Z+4, r1	; 0x04
   10a0e:	15 82       	std	Z+5, r1	; 0x05
   10a10:	16 82       	std	Z+6, r1	; 0x06
   10a12:	17 82       	std	Z+7, r1	; 0x07
   10a14:	81 e0       	ldi	r24, 0x01	; 1
   10a16:	80 87       	std	Z+8, r24	; 0x08
   10a18:	78 94       	sei
   10a1a:	08 95       	ret

00010a1c <gpib_timer_elapsed_end>:
   10a1c:	0c 94 19 35 	jmp	0x6a32	; 0x6a32 <clock_elapsed_end>
   10a20:	08 95       	ret

00010a22 <gpib_timer_task>:
   10a22:	f8 94       	cli
   10a24:	80 91 d9 1c 	lds	r24, 0x1CD9	; 0x801cd9 <gpib_timer+0x4>
   10a28:	90 91 da 1c 	lds	r25, 0x1CDA	; 0x801cda <gpib_timer+0x5>
   10a2c:	a0 91 db 1c 	lds	r26, 0x1CDB	; 0x801cdb <gpib_timer+0x6>
   10a30:	b0 91 dc 1c 	lds	r27, 0x1CDC	; 0x801cdc <gpib_timer+0x7>
   10a34:	89 2b       	or	r24, r25
   10a36:	8a 2b       	or	r24, r26
   10a38:	8b 2b       	or	r24, r27
   10a3a:	a1 f0       	breq	.+40     	; 0x10a64 <gpib_timer_task+0x42>
   10a3c:	80 91 d9 1c 	lds	r24, 0x1CD9	; 0x801cd9 <gpib_timer+0x4>
   10a40:	90 91 da 1c 	lds	r25, 0x1CDA	; 0x801cda <gpib_timer+0x5>
   10a44:	a0 91 db 1c 	lds	r26, 0x1CDB	; 0x801cdb <gpib_timer+0x6>
   10a48:	b0 91 dc 1c 	lds	r27, 0x1CDC	; 0x801cdc <gpib_timer+0x7>
   10a4c:	01 97       	sbiw	r24, 0x01	; 1
   10a4e:	a1 09       	sbc	r26, r1
   10a50:	b1 09       	sbc	r27, r1
   10a52:	80 93 d9 1c 	sts	0x1CD9, r24	; 0x801cd9 <gpib_timer+0x4>
   10a56:	90 93 da 1c 	sts	0x1CDA, r25	; 0x801cda <gpib_timer+0x5>
   10a5a:	a0 93 db 1c 	sts	0x1CDB, r26	; 0x801cdb <gpib_timer+0x6>
   10a5e:	b0 93 dc 1c 	sts	0x1CDC, r27	; 0x801cdc <gpib_timer+0x7>
   10a62:	03 c0       	rjmp	.+6      	; 0x10a6a <gpib_timer_task+0x48>
   10a64:	81 e0       	ldi	r24, 0x01	; 1
   10a66:	80 93 dd 1c 	sts	0x1CDD, r24	; 0x801cdd <gpib_timer+0x8>
   10a6a:	78 94       	sei
   10a6c:	08 95       	ret

00010a6e <gpib_timeout_set>:
   10a6e:	f8 94       	cli
   10a70:	e5 ed       	ldi	r30, 0xD5	; 213
   10a72:	fc e1       	ldi	r31, 0x1C	; 28
   10a74:	64 83       	std	Z+4, r22	; 0x04
   10a76:	75 83       	std	Z+5, r23	; 0x05
   10a78:	86 83       	std	Z+6, r24	; 0x06
   10a7a:	97 83       	std	Z+7, r25	; 0x07
   10a7c:	10 86       	std	Z+8, r1	; 0x08
   10a7e:	78 94       	sei
   10a80:	08 95       	ret

00010a82 <gpib_bus_init>:
   10a82:	00 d0       	rcall	.+0      	; 0x10a84 <gpib_bus_init+0x2>
   10a84:	1f 92       	push	r1
   10a86:	8f b7       	in	r24, 0x3f	; 63
   10a88:	f8 94       	cli
   10a8a:	10 92 55 19 	sts	0x1955, r1	; 0x801955 <gpib_unread_f>
   10a8e:	11 b8       	out	0x01, r1	; 1
   10a90:	9f ef       	ldi	r25, 0xFF	; 255
   10a92:	92 b9       	out	0x02, r25	; 2
   10a94:	21 98       	cbi	0x04, 1	; 4
   10a96:	29 9a       	sbi	0x05, 1	; 5
   10a98:	52 98       	cbi	0x0a, 2	; 10
   10a9a:	5a 9a       	sbi	0x0b, 2	; 11
   10a9c:	53 98       	cbi	0x0a, 3	; 10
   10a9e:	5b 9a       	sbi	0x0b, 3	; 11
   10aa0:	56 98       	cbi	0x0a, 6	; 10
   10aa2:	5e 9a       	sbi	0x0b, 6	; 11
   10aa4:	54 98       	cbi	0x0a, 4	; 10
   10aa6:	5c 9a       	sbi	0x0b, 4	; 11
   10aa8:	57 98       	cbi	0x0a, 7	; 10
   10aaa:	5f 9a       	sbi	0x0b, 7	; 11
   10aac:	55 98       	cbi	0x0a, 5	; 10
   10aae:	5d 9a       	sbi	0x0b, 5	; 11
   10ab0:	20 98       	cbi	0x04, 0	; 4
   10ab2:	28 9a       	sbi	0x05, 0	; 5
   10ab4:	45 98       	cbi	0x08, 5	; 8
   10ab6:	3d 9a       	sbi	0x07, 5	; 7
   10ab8:	44 9a       	sbi	0x08, 4	; 8
   10aba:	3c 9a       	sbi	0x07, 4	; 7
   10abc:	43 98       	cbi	0x08, 3	; 8
   10abe:	3b 9a       	sbi	0x07, 3	; 7
   10ac0:	42 98       	cbi	0x08, 2	; 8
   10ac2:	3a 9a       	sbi	0x07, 2	; 7
   10ac4:	9d e0       	ldi	r25, 0x0D	; 13
   10ac6:	9a 95       	dec	r25
   10ac8:	f1 f7       	brne	.-4      	; 0x10ac6 <gpib_bus_init+0x44>
   10aca:	00 00       	nop
   10acc:	8f bf       	out	0x3f, r24	; 63
   10ace:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10ad2:	82 ff       	sbrs	r24, 2
   10ad4:	0a c0       	rjmp	.+20     	; 0x10aea <gpib_bus_init+0x68>
   10ad6:	8c ed       	ldi	r24, 0xDC	; 220
   10ad8:	91 e1       	ldi	r25, 0x11	; 17
   10ada:	a0 e0       	ldi	r26, 0x00	; 0
   10adc:	ed b7       	in	r30, 0x3d	; 61
   10ade:	fe b7       	in	r31, 0x3e	; 62
   10ae0:	81 83       	std	Z+1, r24	; 0x01
   10ae2:	92 83       	std	Z+2, r25	; 0x02
   10ae4:	a3 83       	std	Z+3, r26	; 0x03
   10ae6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   10aea:	0f 90       	pop	r0
   10aec:	0f 90       	pop	r0
   10aee:	0f 90       	pop	r0
   10af0:	08 95       	ret

00010af2 <gpib_rx_init>:
   10af2:	9f b7       	in	r25, 0x3f	; 63
   10af4:	f8 94       	cli
   10af6:	11 b8       	out	0x01, r1	; 1
   10af8:	2f ef       	ldi	r18, 0xFF	; 255
   10afa:	22 b9       	out	0x02, r18	; 2
   10afc:	21 98       	cbi	0x04, 1	; 4
   10afe:	29 9a       	sbi	0x05, 1	; 5
   10b00:	20 98       	cbi	0x04, 0	; 4
   10b02:	28 9a       	sbi	0x05, 0	; 5
   10b04:	4e 9b       	sbis	0x09, 6	; 9
   10b06:	09 c0       	rjmp	.+18     	; 0x10b1a <gpib_rx_init+0x28>
   10b08:	81 11       	cpse	r24, r1
   10b0a:	07 c0       	rjmp	.+14     	; 0x10b1a <gpib_rx_init+0x28>
   10b0c:	52 98       	cbi	0x0a, 2	; 10
   10b0e:	5a 9a       	sbi	0x0b, 2	; 11
   10b10:	53 98       	cbi	0x0a, 3	; 10
   10b12:	5b 9a       	sbi	0x0b, 3	; 11
   10b14:	42 98       	cbi	0x08, 2	; 8
   10b16:	3a 9a       	sbi	0x07, 2	; 7
   10b18:	08 c0       	rjmp	.+16     	; 0x10b2a <gpib_rx_init+0x38>
   10b1a:	42 98       	cbi	0x08, 2	; 8
   10b1c:	3a 9a       	sbi	0x07, 2	; 7
   10b1e:	5b 98       	cbi	0x0b, 3	; 11
   10b20:	53 9a       	sbi	0x0a, 3	; 10
   10b22:	5a 98       	cbi	0x0b, 2	; 11
   10b24:	52 9a       	sbi	0x0a, 2	; 10
   10b26:	88 23       	and	r24, r24
   10b28:	89 f3       	breq	.-30     	; 0x10b0c <gpib_rx_init+0x1a>
   10b2a:	9f bf       	out	0x3f, r25	; 63
   10b2c:	08 95       	ret

00010b2e <gpib_tx_init>:
   10b2e:	9f b7       	in	r25, 0x3f	; 63
   10b30:	f8 94       	cli
   10b32:	11 b8       	out	0x01, r1	; 1
   10b34:	8f ef       	ldi	r24, 0xFF	; 255
   10b36:	82 b9       	out	0x02, r24	; 2
   10b38:	21 98       	cbi	0x04, 1	; 4
   10b3a:	29 9a       	sbi	0x05, 1	; 5
   10b3c:	52 98       	cbi	0x0a, 2	; 10
   10b3e:	5a 9a       	sbi	0x0b, 2	; 11
   10b40:	53 98       	cbi	0x0a, 3	; 10
   10b42:	5b 9a       	sbi	0x0b, 3	; 11
   10b44:	20 98       	cbi	0x04, 0	; 4
   10b46:	28 9a       	sbi	0x05, 0	; 5
   10b48:	42 9a       	sbi	0x08, 2	; 8
   10b4a:	3a 9a       	sbi	0x07, 2	; 7
   10b4c:	81 b9       	out	0x01, r24	; 1
   10b4e:	9f bf       	out	0x3f, r25	; 63
   10b50:	08 95       	ret

00010b52 <gpib_state_init>:
   10b52:	00 d0       	rcall	.+0      	; 0x10b54 <gpib_state_init+0x2>
   10b54:	1f 92       	push	r1
   10b56:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10b5a:	82 ff       	sbrs	r24, 2
   10b5c:	0a c0       	rjmp	.+20     	; 0x10b72 <gpib_state_init+0x20>
   10b5e:	89 ec       	ldi	r24, 0xC9	; 201
   10b60:	91 e1       	ldi	r25, 0x11	; 17
   10b62:	a0 e0       	ldi	r26, 0x00	; 0
   10b64:	ed b7       	in	r30, 0x3d	; 61
   10b66:	fe b7       	in	r31, 0x3e	; 62
   10b68:	81 83       	std	Z+1, r24	; 0x01
   10b6a:	92 83       	std	Z+2, r25	; 0x02
   10b6c:	a3 83       	std	Z+3, r26	; 0x03
   10b6e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   10b72:	cc dd       	rcall	.-1128   	; 0x1070c <ppr_init>
   10b74:	0e 94 4a 90 	call	0x12094	; 0x12094 <listen_cleanup>
   10b78:	0e 94 60 91 	call	0x122c0	; 0x122c0 <talk_cleanup>
   10b7c:	10 92 e1 1e 	sts	0x1EE1, r1	; 0x801ee1 <spoll>
   10b80:	10 92 e4 1e 	sts	0x1EE4, r1	; 0x801ee4 <talking>
   10b84:	10 92 e7 1e 	sts	0x1EE7, r1	; 0x801ee7 <talking_last>
   10b88:	10 92 e6 1e 	sts	0x1EE6, r1	; 0x801ee6 <listening>
   10b8c:	10 92 e0 1e 	sts	0x1EE0, r1	; 0x801ee0 <listening_last>
   10b90:	10 92 df 1c 	sts	0x1CDF, r1	; 0x801cdf <lastcmd+0x1>
   10b94:	10 92 de 1c 	sts	0x1CDE, r1	; 0x801cde <lastcmd>
   10b98:	10 92 e3 1e 	sts	0x1EE3, r1	; 0x801ee3 <current+0x1>
   10b9c:	10 92 e2 1e 	sts	0x1EE2, r1	; 0x801ee2 <current>
   10ba0:	10 92 e5 1e 	sts	0x1EE5, r1	; 0x801ee5 <secondary>
   10ba4:	0f 90       	pop	r0
   10ba6:	0f 90       	pop	r0
   10ba8:	0f 90       	pop	r0
   10baa:	08 95       	ret

00010bac <gpib_enable_PPR>:
   10bac:	cf 93       	push	r28
   10bae:	df 93       	push	r29
   10bb0:	ad b7       	in	r26, 0x3d	; 61
   10bb2:	be b7       	in	r27, 0x3e	; 62
   10bb4:	17 97       	sbiw	r26, 0x07	; 7
   10bb6:	0f b6       	in	r0, 0x3f	; 63
   10bb8:	f8 94       	cli
   10bba:	be bf       	out	0x3e, r27	; 62
   10bbc:	0f be       	out	0x3f, r0	; 63
   10bbe:	ad bf       	out	0x3d, r26	; 61
   10bc0:	ec 01       	movw	r28, r24
   10bc2:	88 30       	cpi	r24, 0x08	; 8
   10bc4:	91 05       	cpc	r25, r1
   10bc6:	68 f0       	brcs	.+26     	; 0x10be2 <gpib_enable_PPR+0x36>
   10bc8:	ed b7       	in	r30, 0x3d	; 61
   10bca:	fe b7       	in	r31, 0x3e	; 62
   10bcc:	95 83       	std	Z+5, r25	; 0x05
   10bce:	84 83       	std	Z+4, r24	; 0x04
   10bd0:	83 ea       	ldi	r24, 0xA3	; 163
   10bd2:	91 e1       	ldi	r25, 0x11	; 17
   10bd4:	a0 e0       	ldi	r26, 0x00	; 0
   10bd6:	81 83       	std	Z+1, r24	; 0x01
   10bd8:	92 83       	std	Z+2, r25	; 0x02
   10bda:	a3 83       	std	Z+3, r26	; 0x03
   10bdc:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   10be0:	15 c0       	rjmp	.+42     	; 0x10c0c <gpib_enable_PPR+0x60>
   10be2:	aa dd       	rcall	.-1196   	; 0x10738 <ppr_bit_set>
   10be4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10be8:	81 ff       	sbrs	r24, 1
   10bea:	10 c0       	rjmp	.+32     	; 0x10c0c <gpib_enable_PPR+0x60>
   10bec:	8b dd       	rcall	.-1258   	; 0x10704 <ppr_reg>
   10bee:	90 e0       	ldi	r25, 0x00	; 0
   10bf0:	ed b7       	in	r30, 0x3d	; 61
   10bf2:	fe b7       	in	r31, 0x3e	; 62
   10bf4:	97 83       	std	Z+7, r25	; 0x07
   10bf6:	86 83       	std	Z+6, r24	; 0x06
   10bf8:	d5 83       	std	Z+5, r29	; 0x05
   10bfa:	c4 83       	std	Z+4, r28	; 0x04
   10bfc:	88 e8       	ldi	r24, 0x88	; 136
   10bfe:	91 e1       	ldi	r25, 0x11	; 17
   10c00:	a0 e0       	ldi	r26, 0x00	; 0
   10c02:	81 83       	std	Z+1, r24	; 0x01
   10c04:	92 83       	std	Z+2, r25	; 0x02
   10c06:	a3 83       	std	Z+3, r26	; 0x03
   10c08:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   10c0c:	cd b7       	in	r28, 0x3d	; 61
   10c0e:	de b7       	in	r29, 0x3e	; 62
   10c10:	27 96       	adiw	r28, 0x07	; 7
   10c12:	e2 e0       	ldi	r30, 0x02	; 2
   10c14:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00010c18 <gpib_disable_PPR>:
   10c18:	cf 93       	push	r28
   10c1a:	df 93       	push	r29
   10c1c:	ad b7       	in	r26, 0x3d	; 61
   10c1e:	be b7       	in	r27, 0x3e	; 62
   10c20:	17 97       	sbiw	r26, 0x07	; 7
   10c22:	0f b6       	in	r0, 0x3f	; 63
   10c24:	f8 94       	cli
   10c26:	be bf       	out	0x3e, r27	; 62
   10c28:	0f be       	out	0x3f, r0	; 63
   10c2a:	ad bf       	out	0x3d, r26	; 61
   10c2c:	ec 01       	movw	r28, r24
   10c2e:	88 30       	cpi	r24, 0x08	; 8
   10c30:	91 05       	cpc	r25, r1
   10c32:	68 f0       	brcs	.+26     	; 0x10c4e <gpib_disable_PPR+0x36>
   10c34:	ed b7       	in	r30, 0x3d	; 61
   10c36:	fe b7       	in	r31, 0x3e	; 62
   10c38:	95 83       	std	Z+5, r25	; 0x05
   10c3a:	84 83       	std	Z+4, r24	; 0x04
   10c3c:	81 e6       	ldi	r24, 0x61	; 97
   10c3e:	91 e1       	ldi	r25, 0x11	; 17
   10c40:	a0 e0       	ldi	r26, 0x00	; 0
   10c42:	81 83       	std	Z+1, r24	; 0x01
   10c44:	92 83       	std	Z+2, r25	; 0x02
   10c46:	a3 83       	std	Z+3, r26	; 0x03
   10c48:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   10c4c:	15 c0       	rjmp	.+42     	; 0x10c78 <gpib_disable_PPR+0x60>
   10c4e:	81 dd       	rcall	.-1278   	; 0x10752 <ppr_bit_clr>
   10c50:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c54:	81 ff       	sbrs	r24, 1
   10c56:	10 c0       	rjmp	.+32     	; 0x10c78 <gpib_disable_PPR+0x60>
   10c58:	55 dd       	rcall	.-1366   	; 0x10704 <ppr_reg>
   10c5a:	90 e0       	ldi	r25, 0x00	; 0
   10c5c:	ed b7       	in	r30, 0x3d	; 61
   10c5e:	fe b7       	in	r31, 0x3e	; 62
   10c60:	97 83       	std	Z+7, r25	; 0x07
   10c62:	86 83       	std	Z+6, r24	; 0x06
   10c64:	d5 83       	std	Z+5, r29	; 0x05
   10c66:	c4 83       	std	Z+4, r28	; 0x04
   10c68:	86 e4       	ldi	r24, 0x46	; 70
   10c6a:	91 e1       	ldi	r25, 0x11	; 17
   10c6c:	a0 e0       	ldi	r26, 0x00	; 0
   10c6e:	81 83       	std	Z+1, r24	; 0x01
   10c70:	92 83       	std	Z+2, r25	; 0x02
   10c72:	a3 83       	std	Z+3, r26	; 0x03
   10c74:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   10c78:	cd b7       	in	r28, 0x3d	; 61
   10c7a:	de b7       	in	r29, 0x3e	; 62
   10c7c:	27 96       	adiw	r28, 0x07	; 7
   10c7e:	e2 e0       	ldi	r30, 0x02	; 2
   10c80:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00010c84 <gpib_unread>:
///     - If ATN is LOW then we strip parity from the byte.
///   - Upper 8 bits: Status and Errors present.
///     - @see gpib.h _FLAGS defines for a full list.
/// @return ch
uint16_t gpib_unread(uint16_t ch)
{
   10c84:	cf 93       	push	r28
   10c86:	df 93       	push	r29
   10c88:	00 d0       	rcall	.+0      	; 0x10c8a <gpib_unread+0x6>
   10c8a:	1f 92       	push	r1
   10c8c:	ec 01       	movw	r28, r24
    if(!gpib_unread_f)
   10c8e:	80 91 55 19 	lds	r24, 0x1955	; 0x801955 <gpib_unread_f>
   10c92:	81 11       	cpse	r24, r1
   10c94:	08 c0       	rjmp	.+16     	; 0x10ca6 <gpib_unread+0x22>
    {
        gpib_unread_data = ch;
   10c96:	d0 93 e9 1e 	sts	0x1EE9, r29	; 0x801ee9 <gpib_unread_data+0x1>
   10c9a:	c0 93 e8 1e 	sts	0x1EE8, r28	; 0x801ee8 <gpib_unread_data>
        gpib_unread_f = 1;
   10c9e:	81 e0       	ldi	r24, 0x01	; 1
   10ca0:	80 93 55 19 	sts	0x1955, r24	; 0x801955 <gpib_unread_f>
   10ca4:	12 c0       	rjmp	.+36     	; 0x10cca <gpib_unread+0x46>
    }
    else
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10ca6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10caa:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10cae:	85 70       	andi	r24, 0x05	; 5
   10cb0:	99 27       	eor	r25, r25
   10cb2:	89 2b       	or	r24, r25
   10cb4:	51 f0       	breq	.+20     	; 0x10cca <gpib_unread+0x46>
            printf("gpib_unread: error, can only be called once!\n");
   10cb6:	88 e1       	ldi	r24, 0x18	; 24
   10cb8:	91 e1       	ldi	r25, 0x11	; 17
   10cba:	a0 e0       	ldi	r26, 0x00	; 0
   10cbc:	ed b7       	in	r30, 0x3d	; 61
   10cbe:	fe b7       	in	r31, 0x3e	; 62
   10cc0:	81 83       	std	Z+1, r24	; 0x01
   10cc2:	92 83       	std	Z+2, r25	; 0x02
   10cc4:	a3 83       	std	Z+3, r26	; 0x03
   10cc6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    }
    return(ch);
}
   10cca:	ce 01       	movw	r24, r28
   10ccc:	cd b7       	in	r28, 0x3d	; 61
   10cce:	de b7       	in	r29, 0x3e	; 62
   10cd0:	23 96       	adiw	r28, 0x03	; 3
   10cd2:	e2 e0       	ldi	r30, 0x02	; 2
   10cd4:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00010cd8 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10cd8:	11 b8       	out	0x01, r1	; 1
   10cda:	80 b1       	in	r24, 0x00	; 0
   10cdc:	80 95       	com	r24

///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10cde:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10ce0:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10ce2:	08 95       	ret

00010ce4 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10ce4:	4e 99       	sbic	0x09, 6	; 9
   10ce6:	03 c0       	rjmp	.+6      	; 0x10cee <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10ce8:	80 e0       	ldi	r24, 0x00	; 0
   10cea:	94 e0       	ldi	r25, 0x04	; 4
   10cec:	02 c0       	rjmp	.+4      	; 0x10cf2 <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_rx_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10cee:	80 e0       	ldi	r24, 0x00	; 0
   10cf0:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10cf2:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10cf4:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10cf6:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10cf8:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10cfa:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10cfc:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10cfe:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10d00:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10d02:	08 95       	ret

00010d04 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10d04:	19 99       	sbic	0x03, 1	; 3
   10d06:	03 c0       	rjmp	.+6      	; 0x10d0e <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10d08:	80 e0       	ldi	r24, 0x00	; 0
   10d0a:	90 e2       	ldi	r25, 0x20	; 32
   10d0c:	02 c0       	rjmp	.+4      	; 0x10d12 <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10d0e:	80 e0       	ldi	r24, 0x00	; 0
   10d10:	90 e0       	ldi	r25, 0x00	; 0
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10d12:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10d14:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10d16:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10d18:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10d1a:	08 95       	ret

00010d1c <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10d1c:	2f 92       	push	r2
   10d1e:	3f 92       	push	r3
   10d20:	4f 92       	push	r4
   10d22:	6f 92       	push	r6
   10d24:	7f 92       	push	r7
   10d26:	8f 92       	push	r8
   10d28:	af 92       	push	r10
   10d2a:	bf 92       	push	r11
   10d2c:	cf 92       	push	r12
   10d2e:	df 92       	push	r13
   10d30:	ef 92       	push	r14
   10d32:	1f 93       	push	r17
   10d34:	cf 93       	push	r28
   10d36:	df 93       	push	r29
   10d38:	cd b7       	in	r28, 0x3d	; 61
   10d3a:	de b7       	in	r29, 0x3e	; 62
   10d3c:	2a 97       	sbiw	r28, 0x0a	; 10
   10d3e:	0f b6       	in	r0, 0x3f	; 63
   10d40:	f8 94       	cli
   10d42:	de bf       	out	0x3e, r29	; 62
   10d44:	0f be       	out	0x3f, r0	; 63
   10d46:	cd bf       	out	0x3d, r28	; 61
   10d48:	9a 87       	std	Y+10, r25	; 0x0a
   10d4a:	89 87       	std	Y+9, r24	; 0x09
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10d4c:	64 ef       	ldi	r22, 0xF4	; 244
   10d4e:	71 e0       	ldi	r23, 0x01	; 1
   10d50:	80 e0       	ldi	r24, 0x00	; 0
   10d52:	90 e0       	ldi	r25, 0x00	; 0
   10d54:	8c de       	rcall	.-744    	; 0x10a6e <gpib_timeout_set>
// Now Done in write_str
#if 0
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
   10d56:	10 e0       	ldi	r17, 0x00	; 0
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10d58:	83 e1       	ldi	r24, 0x13	; 19
   10d5a:	90 e1       	ldi	r25, 0x10	; 16
   10d5c:	6c 01       	movw	r12, r24
   10d5e:	e1 2c       	mov	r14, r1
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10d60:	82 e4       	ldi	r24, 0x42	; 66
   10d62:	90 e1       	ldi	r25, 0x10	; 16
   10d64:	3c 01       	movw	r6, r24
   10d66:	81 2c       	mov	r8, r1
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10d68:	aa 24       	eor	r10, r10
   10d6a:	a3 94       	inc	r10
   10d6c:	b1 2c       	mov	r11, r1
   10d6e:	8a eb       	ldi	r24, 0xBA	; 186
   10d70:	90 e1       	ldi	r25, 0x10	; 16
   10d72:	1c 01       	movw	r2, r24
   10d74:	41 2c       	mov	r4, r1
					break;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10d76:	8e e7       	ldi	r24, 0x7E	; 126
   10d78:	90 e1       	ldi	r25, 0x10	; 16
   10d7a:	9c 01       	movw	r18, r24
   10d7c:	40 e0       	ldi	r20, 0x00	; 0
   10d7e:	2e 83       	std	Y+6, r18	; 0x06
   10d80:	3f 83       	std	Y+7, r19	; 0x07
   10d82:	48 87       	std	Y+8, r20	; 0x08
	// Not called for writting
#if 0
        gpib_user_task();
#endif

		if(uart_keyhit(0))
   10d84:	80 e0       	ldi	r24, 0x00	; 0
   10d86:	0e 94 0a 2a 	call	0x5414	; 0x5414 <uart_keyhit>
   10d8a:	89 2b       	or	r24, r25
   10d8c:	09 f0       	breq	.+2      	; 0x10d90 <gpib_write_byte+0x74>
   10d8e:	e7 c0       	rjmp	.+462    	; 0x10f5e <gpib_write_byte+0x242>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10d90:	4c 99       	sbic	0x09, 4	; 9
   10d92:	19 c0       	rjmp	.+50     	; 0x10dc6 <gpib_write_byte+0xaa>
        {
            ch |= IFC_FLAG;
   10d94:	89 85       	ldd	r24, Y+9	; 0x09
   10d96:	9a 85       	ldd	r25, Y+10	; 0x0a
   10d98:	90 61       	ori	r25, 0x10	; 16
   10d9a:	9a 87       	std	Y+10, r25	; 0x0a
            gpib_bus_init();
   10d9c:	89 87       	std	Y+9, r24	; 0x09
   10d9e:	71 de       	rcall	.-798    	; 0x10a82 <gpib_bus_init>
			if(debuglevel & GPIB_ERR)
   10da0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10da4:	80 ff       	sbrs	r24, 0
   10da6:	db c0       	rjmp	.+438    	; 0x10f5e <gpib_write_byte+0x242>
				printf("gpib_write_byte: IFC state=%d\n", tx_state);
   10da8:	81 2f       	mov	r24, r17
   10daa:	90 e0       	ldi	r25, 0x00	; 0
   10dac:	ed b7       	in	r30, 0x3d	; 61
   10dae:	fe b7       	in	r31, 0x3e	; 62
   10db0:	95 83       	std	Z+5, r25	; 0x05
   10db2:	84 83       	std	Z+4, r24	; 0x04
   10db4:	89 ef       	ldi	r24, 0xF9	; 249
   10db6:	90 e1       	ldi	r25, 0x10	; 16
   10db8:	a0 e0       	ldi	r26, 0x00	; 0
   10dba:	81 83       	std	Z+1, r24	; 0x01
   10dbc:	92 83       	std	Z+2, r25	; 0x02
   10dbe:	a3 83       	std	Z+3, r26	; 0x03
   10dc0:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   10dc4:	cc c0       	rjmp	.+408    	; 0x10f5e <gpib_write_byte+0x242>
            break;
        }

        switch(tx_state)
   10dc6:	81 2f       	mov	r24, r17
   10dc8:	90 e0       	ldi	r25, 0x00	; 0
   10dca:	89 30       	cpi	r24, 0x09	; 9
   10dcc:	91 05       	cpc	r25, r1
   10dce:	08 f0       	brcs	.+2      	; 0x10dd2 <gpib_write_byte+0xb6>
   10dd0:	be c0       	rjmp	.+380    	; 0x10f4e <gpib_write_byte+0x232>
   10dd2:	fc 01       	movw	r30, r24
   10dd4:	e3 54       	subi	r30, 0x43	; 67
   10dd6:	ff 4f       	sbci	r31, 0xFF	; 255
   10dd8:	0c 94 37 e6 	jmp	0x1cc6e	; 0x1cc6e <__tablejump2__>
        {
			// DAV == 1 the bus is ready
            case GPIB_TX_START:
				gpib_tx_init();
   10ddc:	a8 de       	rcall	.-688    	; 0x10b2e <gpib_tx_init>
				GPIB_PIN_FLOAT_UP(DAV);
   10dde:	21 98       	cbi	0x04, 1	; 4
   10de0:	29 9a       	sbi	0x05, 1	; 5
   10de2:	fd e0       	ldi	r31, 0x0D	; 13
   10de4:	fa 95       	dec	r31
   10de6:	f1 f7       	brne	.-4      	; 0x10de4 <gpib_write_byte+0xc8>
   10de8:	00 00       	nop
   10dea:	06 c0       	rjmp	.+12     	; 0x10df8 <gpib_write_byte+0xdc>
                tx_state = GPIB_TX_PUT_DATA;
                break;

// Wait for NRFD or NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_OR_NDAC_LOW:
                if(GPIB_PIN_TST(NRFD) == 0 || GPIB_PIN_TST(NDAC) == 0)
   10dec:	4a 9b       	sbis	0x09, 2	; 9
   10dee:	02 c0       	rjmp	.+4      	; 0x10df4 <gpib_write_byte+0xd8>
   10df0:	4b 99       	sbic	0x09, 3	; 9
   10df2:	17 c0       	rjmp	.+46     	; 0x10e22 <gpib_write_byte+0x106>
                {
					if(GPIB_PIN_TST(ATN) == 1)
   10df4:	4e 9b       	sbis	0x09, 6	; 9
   10df6:	07 c0       	rjmp	.+14     	; 0x10e06 <gpib_write_byte+0xea>
					{
						gpib_timeout_set(HTIMEOUT);
   10df8:	64 ef       	ldi	r22, 0xF4	; 244
   10dfa:	71 e0       	ldi	r23, 0x01	; 1
   10dfc:	80 e0       	ldi	r24, 0x00	; 0
   10dfe:	90 e0       	ldi	r25, 0x00	; 0
   10e00:	36 de       	rcall	.-916    	; 0x10a6e <gpib_timeout_set>
						tx_state = GPIB_TX_PUT_DATA;
   10e02:	12 e0       	ldi	r17, 0x02	; 2
   10e04:	bf cf       	rjmp	.-130    	; 0x10d84 <gpib_write_byte+0x68>
					}
					else
					{
#ifdef SDEBUG
						if(debuglevel & GPIB_ERR)
   10e06:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10e0a:	80 ff       	sbrs	r24, 0
   10e0c:	bb cf       	rjmp	.-138    	; 0x10d84 <gpib_write_byte+0x68>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
   10e0e:	ed b7       	in	r30, 0x3d	; 61
   10e10:	fe b7       	in	r31, 0x3e	; 62
   10e12:	b5 82       	std	Z+5, r11	; 0x05
   10e14:	a4 82       	std	Z+4, r10	; 0x04
   10e16:	21 82       	std	Z+1, r2	; 0x01
   10e18:	32 82       	std	Z+2, r3	; 0x02
   10e1a:	43 82       	std	Z+3, r4	; 0x03
   10e1c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   10e20:	b1 cf       	rjmp	.-158    	; 0x10d84 <gpib_write_byte+0x68>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10e22:	80 91 dd 1c 	lds	r24, 0x1CDD	; 0x801cdd <gpib_timer+0x8>
							printf("gpib_write_byte: ATN = 0 while waiting for NRFD LOW state =%d\n",tx_state);
#endif
					}
					break;
                }
                if (gpib_timeout_test())
   10e26:	88 23       	and	r24, r24
   10e28:	09 f4       	brne	.+2      	; 0x10e2c <gpib_write_byte+0x110>
   10e2a:	ac cf       	rjmp	.-168    	; 0x10d84 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10e2c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10e30:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10e34:	85 70       	andi	r24, 0x05	; 5
   10e36:	99 27       	eor	r25, r25
   10e38:	89 2b       	or	r24, r25
   10e3a:	c1 f1       	breq	.+112    	; 0x10eac <gpib_write_byte+0x190>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10e3c:	2e 81       	ldd	r18, Y+6	; 0x06
   10e3e:	3f 81       	ldd	r19, Y+7	; 0x07
   10e40:	48 85       	ldd	r20, Y+8	; 0x08
   10e42:	ed b7       	in	r30, 0x3d	; 61
   10e44:	fe b7       	in	r31, 0x3e	; 62
   10e46:	21 83       	std	Z+1, r18	; 0x01
   10e48:	32 83       	std	Z+2, r19	; 0x02
   10e4a:	43 83       	std	Z+3, r20	; 0x03
   10e4c:	2d c0       	rjmp	.+90     	; 0x10ea8 <gpib_write_byte+0x18c>
                }
                break;

// Write Data
            case GPIB_TX_PUT_DATA:
                if(ch & EOI_FLAG)
   10e4e:	89 85       	ldd	r24, Y+9	; 0x09
   10e50:	9a 85       	ldd	r25, Y+10	; 0x0a
   10e52:	90 ff       	sbrs	r25, 0
   10e54:	03 c0       	rjmp	.+6      	; 0x10e5c <gpib_write_byte+0x140>
                    GPIB_IO_LOW(EOI);
   10e56:	28 98       	cbi	0x05, 0	; 5
   10e58:	20 9a       	sbi	0x04, 0	; 4
   10e5a:	02 c0       	rjmp	.+4      	; 0x10e60 <gpib_write_byte+0x144>
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   10e5c:	20 98       	cbi	0x04, 0	; 4
   10e5e:	28 9a       	sbi	0x05, 0	; 5
                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   10e60:	8f ef       	ldi	r24, 0xFF	; 255
   10e62:	81 b9       	out	0x01, r24	; 1
   10e64:	89 85       	ldd	r24, Y+9	; 0x09
   10e66:	80 95       	com	r24
   10e68:	82 b9       	out	0x02, r24	; 2
   10e6a:	9d e0       	ldi	r25, 0x0D	; 13
   10e6c:	9a 95       	dec	r25
   10e6e:	f1 f7       	brne	.-4      	; 0x10e6c <gpib_write_byte+0x150>
   10e70:	00 00       	nop
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   10e72:	64 ef       	ldi	r22, 0xF4	; 244
   10e74:	71 e0       	ldi	r23, 0x01	; 1
   10e76:	80 e0       	ldi	r24, 0x00	; 0
   10e78:	90 e0       	ldi	r25, 0x00	; 0
   10e7a:	f9 dd       	rcall	.-1038   	; 0x10a6e <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NRFD_HI;
   10e7c:	13 e0       	ldi	r17, 0x03	; 3
                break;
   10e7e:	82 cf       	rjmp	.-252    	; 0x10d84 <gpib_write_byte+0x68>
// Wait for BOTH NRFD HI and NDAC LOW
            case GPIB_TX_WAIT_FOR_NRFD_HI:
#if 0
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
#else
                if(GPIB_PIN_TST(NRFD))
   10e80:	4a 99       	sbic	0x09, 2	; 9
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
   10e82:	14 e0       	ldi	r17, 0x04	; 4
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10e84:	80 91 dd 1c 	lds	r24, 0x1CDD	; 0x801cdd <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD))
#endif
                {
                    tx_state = GPIB_TX_SET_DAV_LOW;
                }
                if (gpib_timeout_test())
   10e88:	88 23       	and	r24, r24
   10e8a:	09 f4       	brne	.+2      	; 0x10e8e <gpib_write_byte+0x172>
   10e8c:	7b cf       	rjmp	.-266    	; 0x10d84 <gpib_write_byte+0x68>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10e8e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10e92:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10e96:	85 70       	andi	r24, 0x05	; 5
   10e98:	99 27       	eor	r25, r25
   10e9a:	89 2b       	or	r24, r25
   10e9c:	39 f0       	breq	.+14     	; 0x10eac <gpib_write_byte+0x190>
                        printf("<gpib_write_byte timeout waiting for NRFD==1 && NDAC == 0>\n");
   10e9e:	ed b7       	in	r30, 0x3d	; 61
   10ea0:	fe b7       	in	r31, 0x3e	; 62
   10ea2:	61 82       	std	Z+1, r6	; 0x01
   10ea4:	72 82       	std	Z+2, r7	; 0x02
   10ea6:	83 82       	std	Z+3, r8	; 0x03
   10ea8:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
                    ch |= TIMEOUT_FLAG;
   10eac:	29 85       	ldd	r18, Y+9	; 0x09
   10eae:	3a 85       	ldd	r19, Y+10	; 0x0a
   10eb0:	30 64       	ori	r19, 0x40	; 64
   10eb2:	3a 87       	std	Y+10, r19	; 0x0a
   10eb4:	29 87       	std	Y+9, r18	; 0x09
   10eb6:	51 c0       	rjmp	.+162    	; 0x10f5a <gpib_write_byte+0x23e>
                    break;
                }
                break;

            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   10eb8:	29 98       	cbi	0x05, 1	; 5
   10eba:	21 9a       	sbi	0x04, 1	; 4
   10ebc:	3d e0       	ldi	r19, 0x0D	; 13
   10ebe:	3a 95       	dec	r19
   10ec0:	f1 f7       	brne	.-4      	; 0x10ebe <gpib_write_byte+0x1a2>
                GPIB_BUS_SETTLE();                
                gpib_timeout_set(HTIMEOUT);
   10ec2:	00 00       	nop
   10ec4:	64 ef       	ldi	r22, 0xF4	; 244
   10ec6:	71 e0       	ldi	r23, 0x01	; 1
   10ec8:	80 e0       	ldi	r24, 0x00	; 0
   10eca:	90 e0       	ldi	r25, 0x00	; 0
   10ecc:	d0 dd       	rcall	.-1120   	; 0x10a6e <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   10ece:	15 e0       	ldi	r17, 0x05	; 5
                break;
   10ed0:	59 cf       	rjmp	.-334    	; 0x10d84 <gpib_write_byte+0x68>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
   10ed2:	4b 99       	sbic	0x09, 3	; 9
   10ed4:	40 c0       	rjmp	.+128    	; 0x10f56 <gpib_write_byte+0x23a>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10ed6:	80 91 dd 1c 	lds	r24, 0x1CDD	; 0x801cdd <gpib_timer+0x8>
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   10eda:	88 23       	and	r24, r24
   10edc:	09 f4       	brne	.+2      	; 0x10ee0 <gpib_write_byte+0x1c4>
   10ede:	52 cf       	rjmp	.-348    	; 0x10d84 <gpib_write_byte+0x68>
                {
                    ch |= TIMEOUT_FLAG;
   10ee0:	89 85       	ldd	r24, Y+9	; 0x09
   10ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
   10ee4:	90 64       	ori	r25, 0x40	; 64
   10ee6:	9a 87       	std	Y+10, r25	; 0x0a
   10ee8:	89 87       	std	Y+9, r24	; 0x09
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10eea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10eee:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10ef2:	85 70       	andi	r24, 0x05	; 5
   10ef4:	99 27       	eor	r25, r25
   10ef6:	89 2b       	or	r24, r25
   10ef8:	81 f1       	breq	.+96     	; 0x10f5a <gpib_write_byte+0x23e>
                        printf("<gpib_write_byte timeout waiting for NDAC==1>\n");
   10efa:	ed b7       	in	r30, 0x3d	; 61
   10efc:	fe b7       	in	r31, 0x3e	; 62
   10efe:	c1 82       	std	Z+1, r12	; 0x01
   10f00:	d2 82       	std	Z+2, r13	; 0x02
   10f02:	e3 82       	std	Z+3, r14	; 0x03
   10f04:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   10f08:	28 c0       	rjmp	.+80     	; 0x10f5a <gpib_write_byte+0x23e>
                }
                break;

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   10f0a:	21 98       	cbi	0x04, 1	; 4
   10f0c:	29 9a       	sbi	0x05, 1	; 5
   10f0e:	fd e0       	ldi	r31, 0x0D	; 13
   10f10:	fa 95       	dec	r31
   10f12:	f1 f7       	brne	.-4      	; 0x10f10 <gpib_write_byte+0x1f4>
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
                gpib_timeout_set(HTIMEOUT);
   10f14:	00 00       	nop
   10f16:	64 ef       	ldi	r22, 0xF4	; 244
   10f18:	71 e0       	ldi	r23, 0x01	; 1
   10f1a:	80 e0       	ldi	r24, 0x00	; 0
   10f1c:	90 e0       	ldi	r25, 0x00	; 0

///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
                GPIB_BUS_SETTLE();
                tx_state = GPIB_TX_FINISH;
   10f1e:	a7 dd       	rcall	.-1202   	; 0x10a6e <gpib_timeout_set>
                gpib_timeout_set(HTIMEOUT);
                break;
   10f20:	17 e0       	ldi	r17, 0x07	; 7
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
				// Free BUS, BUSY on error
                gpib_rx_init(1);
   10f22:	30 cf       	rjmp	.-416    	; 0x10d84 <gpib_write_byte+0x68>
   10f24:	81 e0       	ldi	r24, 0x01	; 1
   10f26:	e5 dd       	rcall	.-1078   	; 0x10af2 <gpib_rx_init>
                if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10f28:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10f2c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10f30:	85 70       	andi	r24, 0x05	; 5
   10f32:	99 27       	eor	r25, r25
   10f34:	89 2b       	or	r24, r25
   10f36:	99 f0       	breq	.+38     	; 0x10f5e <gpib_write_byte+0x242>
                    printf("<GPIB TX TIMEOUT>\n");
   10f38:	80 e0       	ldi	r24, 0x00	; 0
   10f3a:	90 e1       	ldi	r25, 0x10	; 16
   10f3c:	a0 e0       	ldi	r26, 0x00	; 0
   10f3e:	ed b7       	in	r30, 0x3d	; 61
   10f40:	fe b7       	in	r31, 0x3e	; 62
   10f42:	81 83       	std	Z+1, r24	; 0x01
   10f44:	92 83       	std	Z+2, r25	; 0x02
   10f46:	a3 83       	std	Z+3, r26	; 0x03
   10f48:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   10f4c:	08 c0       	rjmp	.+16     	; 0x10f5e <gpib_write_byte+0x242>
	gpib_rx_init(0);	// NOT busy, NRFD and NDAC OC
#endif

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
    while(tx_state != GPIB_TX_DONE )
   10f4e:	19 30       	cpi	r17, 0x09	; 9
   10f50:	09 f0       	breq	.+2      	; 0x10f54 <gpib_write_byte+0x238>
   10f52:	18 cf       	rjmp	.-464    	; 0x10d84 <gpib_write_byte+0x68>
   10f54:	04 c0       	rjmp	.+8      	; 0x10f5e <gpib_write_byte+0x242>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   10f56:	16 e0       	ldi	r17, 0x06	; 6
   10f58:	15 cf       	rjmp	.-470    	; 0x10d84 <gpib_write_byte+0x68>
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   10f5a:	18 e0       	ldi	r17, 0x08	; 8
   10f5c:	13 cf       	rjmp	.-474    	; 0x10d84 <gpib_write_byte+0x68>
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   10f5e:	89 85       	ldd	r24, Y+9	; 0x09
   10f60:	9a 85       	ldd	r25, Y+10	; 0x0a
   10f62:	2a 96       	adiw	r28, 0x0a	; 10
   10f64:	0f b6       	in	r0, 0x3f	; 63
   10f66:	f8 94       	cli
   10f68:	de bf       	out	0x3e, r29	; 62
   10f6a:	0f be       	out	0x3f, r0	; 63
   10f6c:	cd bf       	out	0x3d, r28	; 61
   10f6e:	df 91       	pop	r29
   10f70:	cf 91       	pop	r28
   10f72:	1f 91       	pop	r17
   10f74:	ef 90       	pop	r14
   10f76:	df 90       	pop	r13
   10f78:	cf 90       	pop	r12
   10f7a:	bf 90       	pop	r11
   10f7c:	af 90       	pop	r10
   10f7e:	8f 90       	pop	r8
   10f80:	7f 90       	pop	r7
   10f82:	6f 90       	pop	r6
   10f84:	4f 90       	pop	r4
   10f86:	3f 90       	pop	r3
   10f88:	2f 90       	pop	r2
   10f8a:	08 95       	ret

00010f8c <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   10f8c:	cf 93       	push	r28
   10f8e:	df 93       	push	r29
   10f90:	ec 01       	movw	r28, r24
    if(fo == NULL)
   10f92:	89 2b       	or	r24, r25
   10f94:	21 f4       	brne	.+8      	; 0x10f9e <gpib_decode_header+0x12>
        fo = stdout;
   10f96:	c0 91 b7 1c 	lds	r28, 0x1CB7	; 0x801cb7 <__iob+0x2>
   10f9a:	d0 91 b8 1c 	lds	r29, 0x1CB8	; 0x801cb8 <__iob+0x3>

    fprintf(fo,"==============================\n");
   10f9e:	be 01       	movw	r22, r28
   10fa0:	8f ee       	ldi	r24, 0xEF	; 239
   10fa2:	9b e0       	ldi	r25, 0x0B	; 11
   10fa4:	0e 94 20 76 	call	0xec40	; 0xec40 <fputs>
    fprintf(fo,"GPIB bus state\n");
   10fa8:	be 01       	movw	r22, r28
   10faa:	8f e0       	ldi	r24, 0x0F	; 15
   10fac:	9c e0       	ldi	r25, 0x0C	; 12
   10fae:	0e 94 20 76 	call	0xec40	; 0xec40 <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   10fb2:	be 01       	movw	r22, r28
   10fb4:	8f e1       	ldi	r24, 0x1F	; 31
   10fb6:	9c e0       	ldi	r25, 0x0C	; 12
   10fb8:	0e 94 20 76 	call	0xec40	; 0xec40 <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   10fbc:	be 01       	movw	r22, r28
   10fbe:	83 e3       	ldi	r24, 0x33	; 51
   10fc0:	9c e0       	ldi	r25, 0x0C	; 12
   10fc2:	0e 94 20 76 	call	0xec40	; 0xec40 <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   10fc6:	be 01       	movw	r22, r28
   10fc8:	86 e5       	ldi	r24, 0x56	; 86
   10fca:	9c e0       	ldi	r25, 0x0C	; 12
   10fcc:	0e 94 20 76 	call	0xec40	; 0xec40 <fputs>
    fprintf(fo,"     A = ATN\n");
   10fd0:	be 01       	movw	r22, r28
   10fd2:	80 e8       	ldi	r24, 0x80	; 128
   10fd4:	9c e0       	ldi	r25, 0x0C	; 12
   10fd6:	0e 94 20 76 	call	0xec40	; 0xec40 <fputs>
    fprintf(fo,"      E = EOI\n");
   10fda:	be 01       	movw	r22, r28
   10fdc:	8e e8       	ldi	r24, 0x8E	; 142
   10fde:	9c e0       	ldi	r25, 0x0C	; 12
   10fe0:	0e 94 20 76 	call	0xec40	; 0xec40 <fputs>
    fprintf(fo,"       S = SRQ\n");
   10fe4:	be 01       	movw	r22, r28
   10fe6:	8d e9       	ldi	r24, 0x9D	; 157
   10fe8:	9c e0       	ldi	r25, 0x0C	; 12
   10fea:	0e 94 20 76 	call	0xec40	; 0xec40 <fputs>
    fprintf(fo,"        R = REN\n");
   10fee:	be 01       	movw	r22, r28
   10ff0:	8d ea       	ldi	r24, 0xAD	; 173
   10ff2:	9c e0       	ldi	r25, 0x0C	; 12
   10ff4:	0e 94 20 76 	call	0xec40	; 0xec40 <fputs>
    fprintf(fo,"         I = IFC\n");
   10ff8:	be 01       	movw	r22, r28
   10ffa:	8e eb       	ldi	r24, 0xBE	; 190
   10ffc:	9c e0       	ldi	r25, 0x0C	; 12
   10ffe:	0e 94 20 76 	call	0xec40	; 0xec40 <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   11002:	be 01       	movw	r22, r28
   11004:	80 ed       	ldi	r24, 0xD0	; 208
   11006:	9c e0       	ldi	r25, 0x0C	; 12
   11008:	0e 94 20 76 	call	0xec40	; 0xec40 <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   1100c:	be 01       	movw	r22, r28
   1100e:	82 ef       	ldi	r24, 0xF2	; 242
   11010:	9c e0       	ldi	r25, 0x0C	; 12
   11012:	0e 94 20 76 	call	0xec40	; 0xec40 <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   11016:	be 01       	movw	r22, r28
   11018:	8a e0       	ldi	r24, 0x0A	; 10
   1101a:	9d e0       	ldi	r25, 0x0D	; 13
   1101c:	0e 94 20 76 	call	0xec40	; 0xec40 <fputs>
    fprintf(fo,"              GPIB commands\n");
   11020:	be 01       	movw	r22, r28
   11022:	85 e2       	ldi	r24, 0x25	; 37
   11024:	9d e0       	ldi	r25, 0x0D	; 13
   11026:	0e 94 20 76 	call	0xec40	; 0xec40 <fputs>
}
   1102a:	df 91       	pop	r29
   1102c:	cf 91       	pop	r28
   1102e:	08 95       	ret

00011030 <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   11030:	a9 e8       	ldi	r26, 0x89	; 137
   11032:	b0 e0       	ldi	r27, 0x00	; 0
   11034:	ee e1       	ldi	r30, 0x1E	; 30
   11036:	f8 e8       	ldi	r31, 0x88	; 136
   11038:	0c 94 6c e6 	jmp	0x1ccd8	; 0x1ccd8 <__prologue_saves__+0xc>
   1103c:	8c 01       	movw	r16, r24
   1103e:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   11040:	1a 86       	std	Y+10, r1	; 0x0a
   11042:	4c 01       	movw	r8, r24
   11044:	88 24       	eor	r8, r8
   11046:	44 e0       	ldi	r20, 0x04	; 4
   11048:	94 22       	and	r9, r20
   1104a:	ce 01       	movw	r24, r28
   1104c:	0a 96       	adiw	r24, 0x0a	; 10
   1104e:	7c 01       	movw	r14, r24

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   11050:	62 30       	cpi	r22, 0x02	; 2
   11052:	71 05       	cpc	r23, r1
   11054:	e8 f4       	brcc	.+58     	; 0x11090 <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   11056:	81 14       	cp	r8, r1
   11058:	91 04       	cpc	r9, r1
   1105a:	29 f4       	brne	.+10     	; 0x11066 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   1105c:	80 2f       	mov	r24, r16

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   1105e:	90 ee       	ldi	r25, 0xE0	; 224
   11060:	90 0f       	add	r25, r16
   11062:	9f 35       	cpi	r25, 0x5F	; 95
   11064:	08 f0       	brcs	.+2      	; 0x11068 <gpib_trace_display+0x38>
    str[0] = 0;

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
   11066:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   11068:	90 e0       	ldi	r25, 0x00	; 0
   1106a:	ed b7       	in	r30, 0x3d	; 61
   1106c:	fe b7       	in	r31, 0x3e	; 62
   1106e:	91 87       	std	Z+9, r25	; 0x09
   11070:	80 87       	std	Z+8, r24	; 0x08
   11072:	c8 01       	movw	r24, r16
   11074:	99 27       	eor	r25, r25
   11076:	97 83       	std	Z+7, r25	; 0x07
   11078:	86 83       	std	Z+6, r24	; 0x06
   1107a:	89 ed       	ldi	r24, 0xD9	; 217
   1107c:	9f e0       	ldi	r25, 0x0F	; 15
   1107e:	a0 e0       	ldi	r26, 0x00	; 0
   11080:	83 83       	std	Z+3, r24	; 0x03
   11082:	94 83       	std	Z+4, r25	; 0x04
   11084:	a5 83       	std	Z+5, r26	; 0x05
   11086:	f2 82       	std	Z+2, r15	; 0x02
   11088:	e1 82       	std	Z+1, r14	; 0x01
   1108a:	0e 94 91 46 	call	0x8d22	; 0x8d22 <sprintf_P>
   1108e:	0c c0       	rjmp	.+24     	; 0x110a8 <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   11090:	83 ed       	ldi	r24, 0xD3	; 211
   11092:	9f e0       	ldi	r25, 0x0F	; 15
   11094:	a0 e0       	ldi	r26, 0x00	; 0
   11096:	ed b7       	in	r30, 0x3d	; 61
   11098:	fe b7       	in	r31, 0x3e	; 62
   1109a:	83 83       	std	Z+3, r24	; 0x03
   1109c:	94 83       	std	Z+4, r25	; 0x04
   1109e:	a5 83       	std	Z+5, r26	; 0x05
   110a0:	f2 82       	std	Z+2, r15	; 0x02
   110a2:	e1 82       	std	Z+1, r14	; 0x01
   110a4:	0e 94 91 46 	call	0x8d22	; 0x8d22 <sprintf_P>
    }

    tmp = str + strlen(str);
   110a8:	f7 01       	movw	r30, r14
   110aa:	01 90       	ld	r0, Z+
   110ac:	00 20       	and	r0, r0
   110ae:	e9 f7       	brne	.-6      	; 0x110aa <gpib_trace_display+0x7a>
   110b0:	31 97       	sbiw	r30, 0x01	; 1
   110b2:	cf 01       	movw	r24, r30
   110b4:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   110b6:	81 14       	cp	r8, r1
   110b8:	91 04       	cpc	r9, r1
   110ba:	11 f0       	breq	.+4      	; 0x110c0 <gpib_trace_display+0x90>
        *tmp++ = 'A';
   110bc:	21 e4       	ldi	r18, 0x41	; 65
   110be:	01 c0       	rjmp	.+2      	; 0x110c2 <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   110c0:	2d e2       	ldi	r18, 0x2D	; 45
   110c2:	20 83       	st	Z, r18
   110c4:	dc 01       	movw	r26, r24
   110c6:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   110c8:	10 ff       	sbrs	r17, 0
   110ca:	02 c0       	rjmp	.+4      	; 0x110d0 <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   110cc:	25 e4       	ldi	r18, 0x45	; 69
   110ce:	01 c0       	rjmp	.+2      	; 0x110d2 <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   110d0:	2d e2       	ldi	r18, 0x2D	; 45
   110d2:	fc 01       	movw	r30, r24
   110d4:	20 83       	st	Z, r18
   110d6:	fd 01       	movw	r30, r26
   110d8:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   110da:	11 ff       	sbrs	r17, 1
   110dc:	02 c0       	rjmp	.+4      	; 0x110e2 <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   110de:	83 e5       	ldi	r24, 0x53	; 83
   110e0:	01 c0       	rjmp	.+2      	; 0x110e4 <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   110e2:	8d e2       	ldi	r24, 0x2D	; 45
   110e4:	8c 93       	st	X, r24
   110e6:	df 01       	movw	r26, r30
   110e8:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   110ea:	13 ff       	sbrs	r17, 3
   110ec:	02 c0       	rjmp	.+4      	; 0x110f2 <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   110ee:	82 e5       	ldi	r24, 0x52	; 82
   110f0:	01 c0       	rjmp	.+2      	; 0x110f4 <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   110f2:	8d e2       	ldi	r24, 0x2D	; 45
   110f4:	80 83       	st	Z, r24
   110f6:	fd 01       	movw	r30, r26
   110f8:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   110fa:	14 ff       	sbrs	r17, 4
   110fc:	02 c0       	rjmp	.+4      	; 0x11102 <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   110fe:	89 e4       	ldi	r24, 0x49	; 73
   11100:	01 c0       	rjmp	.+2      	; 0x11104 <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   11102:	8d e2       	ldi	r24, 0x2D	; 45
   11104:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   11106:	a1 14       	cp	r10, r1
   11108:	b1 04       	cpc	r11, r1
   1110a:	d1 f4       	brne	.+52     	; 0x11140 <gpib_trace_display+0x110>
   1110c:	df 01       	movw	r26, r30
   1110e:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   11110:	15 ff       	sbrs	r17, 5
   11112:	02 c0       	rjmp	.+4      	; 0x11118 <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   11114:	80 e5       	ldi	r24, 0x50	; 80
   11116:	01 c0       	rjmp	.+2      	; 0x1111a <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   11118:	8d e2       	ldi	r24, 0x2D	; 45
   1111a:	80 83       	st	Z, r24
   1111c:	fd 01       	movw	r30, r26
   1111e:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   11120:	16 ff       	sbrs	r17, 6
   11122:	02 c0       	rjmp	.+4      	; 0x11128 <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   11124:	84 e5       	ldi	r24, 0x54	; 84
   11126:	01 c0       	rjmp	.+2      	; 0x1112a <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   11128:	8d e2       	ldi	r24, 0x2D	; 45
   1112a:	8c 93       	st	X, r24
   1112c:	cf 01       	movw	r24, r30
   1112e:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   11130:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   11132:	17 ff       	sbrs	r17, 7
   11134:	02 c0       	rjmp	.+4      	; 0x1113a <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   11136:	82 e4       	ldi	r24, 0x42	; 66
   11138:	01 c0       	rjmp	.+2      	; 0x1113c <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   1113a:	8d e2       	ldi	r24, 0x2D	; 45
   1113c:	80 83       	st	Z, r24
   1113e:	08 c0       	rjmp	.+16     	; 0x11150 <gpib_trace_display+0x120>
    }
    else
    {
// not used when tracing
        *tmp++ = '-';
   11140:	8d e2       	ldi	r24, 0x2D	; 45
   11142:	80 83       	st	Z, r24
        *tmp++ = '-';
   11144:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   11146:	6f 01       	movw	r12, r30
   11148:	43 e0       	ldi	r20, 0x03	; 3
   1114a:	c4 0e       	add	r12, r20
   1114c:	d1 1c       	adc	r13, r1
   1114e:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   11150:	f6 01       	movw	r30, r12
   11152:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   11154:	f1 e0       	ldi	r31, 0x01	; 1
   11156:	af 1a       	sub	r10, r31
   11158:	b1 08       	sbc	r11, r1
   1115a:	42 e0       	ldi	r20, 0x02	; 2
   1115c:	a4 16       	cp	r10, r20
   1115e:	b1 04       	cpc	r11, r1
   11160:	f0 f4       	brcc	.+60     	; 0x1119e <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   11162:	15 ff       	sbrs	r17, 5
   11164:	03 c0       	rjmp	.+6      	; 0x1116c <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   11166:	62 e4       	ldi	r22, 0x42	; 66
   11168:	7d e0       	ldi	r23, 0x0D	; 13
   1116a:	02 c0       	rjmp	.+4      	; 0x11170 <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   1116c:	65 e6       	ldi	r22, 0x65	; 101
   1116e:	74 e0       	ldi	r23, 0x04	; 4
   11170:	c7 01       	movw	r24, r14
   11172:	0e 94 07 31 	call	0x620e	; 0x620e <strcat>
        if(status & NRFD_FLAG)
   11176:	16 ff       	sbrs	r17, 6
   11178:	03 c0       	rjmp	.+6      	; 0x11180 <gpib_trace_display+0x150>
            strcat(str," NRFD");
   1117a:	68 e4       	ldi	r22, 0x48	; 72
   1117c:	7d e0       	ldi	r23, 0x0D	; 13
   1117e:	02 c0       	rjmp	.+4      	; 0x11184 <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   11180:	65 e6       	ldi	r22, 0x65	; 101
   11182:	74 e0       	ldi	r23, 0x04	; 4
   11184:	c7 01       	movw	r24, r14
   11186:	0e 94 07 31 	call	0x620e	; 0x620e <strcat>
        if(status & NDAC_FLAG)
   1118a:	17 ff       	sbrs	r17, 7
   1118c:	03 c0       	rjmp	.+6      	; 0x11194 <gpib_trace_display+0x164>
            strcat(str," NDAC");
   1118e:	6e e4       	ldi	r22, 0x4E	; 78
   11190:	7d e0       	ldi	r23, 0x0D	; 13
   11192:	02 c0       	rjmp	.+4      	; 0x11198 <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   11194:	65 e6       	ldi	r22, 0x65	; 101
   11196:	74 e0       	ldi	r23, 0x04	; 4
   11198:	c7 01       	movw	r24, r14
   1119a:	0e 94 07 31 	call	0x620e	; 0x620e <strcat>
    }

    if( (status & ATN_FLAG) )
   1119e:	81 14       	cp	r8, r1
   111a0:	91 04       	cpc	r9, r1
   111a2:	09 f4       	brne	.+2      	; 0x111a6 <gpib_trace_display+0x176>
   111a4:	5a c0       	rjmp	.+180    	; 0x1125a <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   111a6:	c8 01       	movw	r24, r16
   111a8:	8f 77       	andi	r24, 0x7F	; 127
   111aa:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   111ac:	9c 01       	movw	r18, r24
   111ae:	20 52       	subi	r18, 0x20	; 32
   111b0:	31 09       	sbc	r19, r1
   111b2:	2f 31       	cpi	r18, 0x1F	; 31
   111b4:	31 05       	cpc	r19, r1
   111b6:	48 f4       	brcc	.+18     	; 0x111ca <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   111b8:	0f 71       	andi	r16, 0x1F	; 31
   111ba:	11 27       	eor	r17, r17
   111bc:	ed b7       	in	r30, 0x3d	; 61
   111be:	fe b7       	in	r31, 0x3e	; 62
   111c0:	17 83       	std	Z+7, r17	; 0x07
   111c2:	06 83       	std	Z+6, r16	; 0x06
   111c4:	88 ec       	ldi	r24, 0xC8	; 200
   111c6:	9f e0       	ldi	r25, 0x0F	; 15
   111c8:	0e c0       	rjmp	.+28     	; 0x111e6 <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   111ca:	9c 01       	movw	r18, r24
   111cc:	20 54       	subi	r18, 0x40	; 64
   111ce:	31 09       	sbc	r19, r1
   111d0:	2f 30       	cpi	r18, 0x0F	; 15
   111d2:	31 05       	cpc	r19, r1
   111d4:	88 f4       	brcc	.+34     	; 0x111f8 <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   111d6:	0f 71       	andi	r16, 0x1F	; 31
   111d8:	11 27       	eor	r17, r17
   111da:	ed b7       	in	r30, 0x3d	; 61
   111dc:	fe b7       	in	r31, 0x3e	; 62
   111de:	17 83       	std	Z+7, r17	; 0x07
   111e0:	06 83       	std	Z+6, r16	; 0x06
   111e2:	8d eb       	ldi	r24, 0xBD	; 189
   111e4:	9f e0       	ldi	r25, 0x0F	; 15
   111e6:	a0 e0       	ldi	r26, 0x00	; 0
   111e8:	83 83       	std	Z+3, r24	; 0x03
   111ea:	94 83       	std	Z+4, r25	; 0x04
   111ec:	a5 83       	std	Z+5, r26	; 0x05
   111ee:	d2 82       	std	Z+2, r13	; 0x02
   111f0:	c1 82       	std	Z+1, r12	; 0x01
   111f2:	0e 94 91 46 	call	0x8d22	; 0x8d22 <sprintf_P>
   111f6:	31 c0       	rjmp	.+98     	; 0x1125a <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   111f8:	9c 01       	movw	r18, r24
   111fa:	20 56       	subi	r18, 0x60	; 96
   111fc:	31 09       	sbc	r19, r1
   111fe:	20 31       	cpi	r18, 0x10	; 16
   11200:	31 05       	cpc	r19, r1
   11202:	28 f0       	brcs	.+10     	; 0x1120e <gpib_trace_display+0x1de>
   11204:	e2 e8       	ldi	r30, 0x82	; 130
   11206:	f1 e0       	ldi	r31, 0x01	; 1
   11208:	00 e0       	ldi	r16, 0x00	; 0
   1120a:	10 e0       	ldi	r17, 0x00	; 0
   1120c:	0b c0       	rjmp	.+22     	; 0x11224 <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   1120e:	0f 71       	andi	r16, 0x1F	; 31
   11210:	11 27       	eor	r17, r17
   11212:	ed b7       	in	r30, 0x3d	; 61
   11214:	fe b7       	in	r31, 0x3e	; 62
   11216:	17 83       	std	Z+7, r17	; 0x07
   11218:	06 83       	std	Z+6, r16	; 0x06
   1121a:	82 eb       	ldi	r24, 0xB2	; 178
   1121c:	9f e0       	ldi	r25, 0x0F	; 15
   1121e:	e3 cf       	rjmp	.-58     	; 0x111e6 <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   11220:	0f 5f       	subi	r16, 0xFF	; 255
   11222:	1f 4f       	sbci	r17, 0xFF	; 255
   11224:	20 81       	ld	r18, Z
   11226:	31 81       	ldd	r19, Z+1	; 0x01
   11228:	2f 3f       	cpi	r18, 0xFF	; 255
   1122a:	4f ef       	ldi	r20, 0xFF	; 255
   1122c:	34 07       	cpc	r19, r20
   1122e:	a9 f0       	breq	.+42     	; 0x1125a <gpib_trace_display+0x22a>
   11230:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   11232:	82 17       	cp	r24, r18
   11234:	93 07       	cpc	r25, r19
   11236:	a1 f7       	brne	.-24     	; 0x11220 <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   11238:	69 e6       	ldi	r22, 0x69	; 105
   1123a:	74 e0       	ldi	r23, 0x04	; 4
   1123c:	c6 01       	movw	r24, r12
   1123e:	0e 94 07 31 	call	0x620e	; 0x620e <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   11242:	f8 01       	movw	r30, r16
   11244:	ee 0f       	add	r30, r30
   11246:	ff 1f       	adc	r31, r31
   11248:	ee 0f       	add	r30, r30
   1124a:	ff 1f       	adc	r31, r31
   1124c:	ee 57       	subi	r30, 0x7E	; 126
   1124e:	fe 4f       	sbci	r31, 0xFE	; 254
   11250:	62 81       	ldd	r22, Z+2	; 0x02
   11252:	73 81       	ldd	r23, Z+3	; 0x03
   11254:	c6 01       	movw	r24, r12
   11256:	0e 94 07 31 	call	0x620e	; 0x620e <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   1125a:	20 91 56 19 	lds	r18, 0x1956	; 0x801956 <gpib_log_fp>
   1125e:	30 91 57 19 	lds	r19, 0x1957	; 0x801957 <gpib_log_fp+0x1>
   11262:	80 91 b7 1c 	lds	r24, 0x1CB7	; 0x801cb7 <__iob+0x2>
   11266:	90 91 b8 1c 	lds	r25, 0x1CB8	; 0x801cb8 <__iob+0x3>
   1126a:	23 2b       	or	r18, r19
   1126c:	21 f4       	brne	.+8      	; 0x11276 <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   1126e:	90 93 57 19 	sts	0x1957, r25	; 0x801957 <gpib_log_fp+0x1>
   11272:	80 93 56 19 	sts	0x1956, r24	; 0x801956 <gpib_log_fp>

// Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   11276:	20 91 56 19 	lds	r18, 0x1956	; 0x801956 <gpib_log_fp>
   1127a:	30 91 57 19 	lds	r19, 0x1957	; 0x801957 <gpib_log_fp+0x1>
   1127e:	82 17       	cp	r24, r18
   11280:	93 07       	cpc	r25, r19
   11282:	19 f0       	breq	.+6      	; 0x1128a <gpib_trace_display+0x25a>
        puts(str);
   11284:	c7 01       	movw	r24, r14
   11286:	0e 94 38 76 	call	0xec70	; 0xec70 <puts>

// Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   1128a:	ed b7       	in	r30, 0x3d	; 61
   1128c:	fe b7       	in	r31, 0x3e	; 62
   1128e:	f6 82       	std	Z+6, r15	; 0x06
   11290:	e5 82       	std	Z+5, r14	; 0x05
   11292:	84 e5       	ldi	r24, 0x54	; 84
   11294:	9d e0       	ldi	r25, 0x0D	; 13
   11296:	94 83       	std	Z+4, r25	; 0x04
   11298:	83 83       	std	Z+3, r24	; 0x03
   1129a:	80 91 56 19 	lds	r24, 0x1956	; 0x801956 <gpib_log_fp>
   1129e:	90 91 57 19 	lds	r25, 0x1957	; 0x801957 <gpib_log_fp+0x1>
   112a2:	92 83       	std	Z+2, r25	; 0x02
   112a4:	81 83       	std	Z+1, r24	; 0x01
   112a6:	0e 94 e0 7d 	call	0xfbc0	; 0xfbc0 <fprintf>
}
   112aa:	c7 57       	subi	r28, 0x77	; 119
   112ac:	df 4f       	sbci	r29, 0xFF	; 255
   112ae:	ec e0       	ldi	r30, 0x0C	; 12
   112b0:	0c 94 88 e6 	jmp	0x1cd10	; 0x1cd10 <__epilogue_restores__+0xc>

000112b4 <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   112b4:	af 92       	push	r10
   112b6:	bf 92       	push	r11
   112b8:	cf 92       	push	r12
   112ba:	df 92       	push	r13
   112bc:	ef 92       	push	r14
   112be:	ff 92       	push	r15
   112c0:	0f 93       	push	r16
   112c2:	1f 93       	push	r17
   112c4:	cf 93       	push	r28
   112c6:	00 d0       	rcall	.+0      	; 0x112c8 <gpib_read_byte+0x14>
   112c8:	00 d0       	rcall	.+0      	; 0x112ca <gpib_read_byte+0x16>
   112ca:	1f 92       	push	r1

    ch = 0;
    control_last = 0;

	// Return unread - last read - data and control lines
    if(gpib_unread_f)
   112cc:	20 91 55 19 	lds	r18, 0x1955	; 0x801955 <gpib_unread_f>
   112d0:	22 23       	and	r18, r18
   112d2:	39 f0       	breq	.+14     	; 0x112e2 <gpib_read_byte+0x2e>
    {
		// FYI any unread data has been traced
        gpib_unread_f = 0;
   112d4:	10 92 55 19 	sts	0x1955, r1	; 0x801955 <gpib_unread_f>
        return(gpib_unread_data);
   112d8:	80 91 e8 1e 	lds	r24, 0x1EE8	; 0x801ee8 <gpib_unread_data>
   112dc:	90 91 e9 1e 	lds	r25, 0x1EE9	; 0x801ee9 <gpib_unread_data+0x1>
   112e0:	e0 c0       	rjmp	.+448    	; 0x114a2 <gpib_read_byte+0x1ee>
   112e2:	6c 01       	movw	r12, r24
	// We start and end gpib_read_byte() with NRFD and NDAC LOW 
	// When ATN goes LOW all devices must pull NRFD and NDAC lines LOW
	// within 200 nanoseconds to permit three-wire handshake 
	// ATN requirements are met because we are always reading in command mode
	// ATN = 0 = COmmand Mode
    gpib_rx_init(1);
   112e4:	81 e0       	ldi	r24, 0x01	; 1
   112e6:	05 dc       	rcall	.-2038   	; 0x10af2 <gpib_rx_init>
	// GPIB_IO_LOW(TE);			// BUS IN
	// BUS IN, DAV IN, NDAC OUT , NRFD OUT 
	// ATN IN, EOI IN, SRQ OUT OC

	///@brief V2 boards can NOT read ALL bits on the control bus at once
    if(trace)
   112e8:	c1 14       	cp	r12, r1
   112ea:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   112ec:	51 f0       	breq	.+20     	; 0x11302 <gpib_read_byte+0x4e>
   112ee:	fa dc       	rcall	.-1548   	; 0x10ce4 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   112f0:	7c 01       	movw	r14, r24
   112f2:	08 dd       	rcall	.-1520   	; 0x10d04 <gpib_handshake_pin_read>
   112f4:	e8 2a       	or	r14, r24
   112f6:	f9 2a       	or	r15, r25
        gpib_trace_display(control_last, TRACE_BUS);
   112f8:	62 e0       	ldi	r22, 0x02	; 2
   112fa:	70 e0       	ldi	r23, 0x00	; 0
   112fc:	c7 01       	movw	r24, r14
   112fe:	98 de       	rcall	.-720    	; 0x11030 <gpib_trace_display>
   11300:	02 c0       	rjmp	.+4      	; 0x11306 <gpib_read_byte+0x52>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   11302:	e1 2c       	mov	r14, r1
   11304:	f1 2c       	mov	r15, r1
        control_last = gpib_control_pin_read();
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
   11306:	64 ef       	ldi	r22, 0xF4	; 244
   11308:	71 e0       	ldi	r23, 0x01	; 1
   1130a:	80 e0       	ldi	r24, 0x00	; 0
   1130c:	90 e0       	ldi	r25, 0x00	; 0
   1130e:	af db       	rcall	.-2210   	; 0x10a6e <gpib_timeout_set>
    rx_state = GPIB_RX_START;
   11310:	c0 e0       	ldi	r28, 0x00	; 0
    uint16_t ch;
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
   11312:	00 e0       	ldi	r16, 0x00	; 0
   11314:	10 e0       	ldi	r17, 0x00	; 0
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
    {

        // User task that is called while waiting for commands
        gpib_user_task();
   11316:	0e 94 a8 e1 	call	0x1c350	; 0x1c350 <gpib_user_task>

        if(uart_keyhit(0))
   1131a:	80 e0       	ldi	r24, 0x00	; 0
   1131c:	0e 94 0a 2a 	call	0x5414	; 0x5414 <uart_keyhit>
   11320:	89 2b       	or	r24, r25
   11322:	09 f0       	breq	.+2      	; 0x11326 <gpib_read_byte+0x72>
   11324:	9c c0       	rjmp	.+312    	; 0x1145e <gpib_read_byte+0x1aa>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is alwayon IN always in device mode
        if(GPIB_PIN_TST(IFC) == 0)
   11326:	4c 99       	sbic	0x09, 4	; 9
   11328:	15 c0       	rjmp	.+42     	; 0x11354 <gpib_read_byte+0xa0>
        {
            ch |= IFC_FLAG;
   1132a:	10 61       	ori	r17, 0x10	; 16
			if(debuglevel & GPIB_ERR)
   1132c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11330:	80 ff       	sbrs	r24, 0
   11332:	0e c0       	rjmp	.+28     	; 0x11350 <gpib_read_byte+0x9c>
				printf("gpib_read_byte: IFC state=%d\n", rx_state);
   11334:	8c 2f       	mov	r24, r28
   11336:	90 e0       	ldi	r25, 0x00	; 0
   11338:	ed b7       	in	r30, 0x3d	; 61
   1133a:	fe b7       	in	r31, 0x3e	; 62
   1133c:	95 83       	std	Z+5, r25	; 0x05
   1133e:	84 83       	std	Z+4, r24	; 0x04
   11340:	82 ee       	ldi	r24, 0xE2	; 226
   11342:	9f e0       	ldi	r25, 0x0F	; 15
   11344:	a0 e0       	ldi	r26, 0x00	; 0
   11346:	81 83       	std	Z+1, r24	; 0x01
   11348:	92 83       	std	Z+2, r25	; 0x02
   1134a:	a3 83       	std	Z+3, r26	; 0x03
   1134c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            gpib_bus_init();
   11350:	98 db       	rcall	.-2256   	; 0x10a82 <gpib_bus_init>
   11352:	85 c0       	rjmp	.+266    	; 0x1145e <gpib_read_byte+0x1aa>
            break;
        }

        switch(rx_state)
   11354:	c2 30       	cpi	r28, 0x02	; 2
   11356:	31 f1       	breq	.+76     	; 0x113a4 <gpib_read_byte+0xf0>
   11358:	28 f4       	brcc	.+10     	; 0x11364 <gpib_read_byte+0xb0>
   1135a:	cc 23       	and	r28, r28
   1135c:	69 f0       	breq	.+26     	; 0x11378 <gpib_read_byte+0xc4>
   1135e:	c1 30       	cpi	r28, 0x01	; 1
   11360:	c9 f0       	breq	.+50     	; 0x11394 <gpib_read_byte+0xe0>
   11362:	63 c0       	rjmp	.+198    	; 0x1142a <gpib_read_byte+0x176>
   11364:	c5 30       	cpi	r28, 0x05	; 5
   11366:	09 f4       	brne	.+2      	; 0x1136a <gpib_read_byte+0xb6>
   11368:	54 c0       	rjmp	.+168    	; 0x11412 <gpib_read_byte+0x15e>
   1136a:	c7 30       	cpi	r28, 0x07	; 7
   1136c:	09 f4       	brne	.+2      	; 0x11370 <gpib_read_byte+0xbc>
   1136e:	58 c0       	rjmp	.+176    	; 0x11420 <gpib_read_byte+0x16c>
   11370:	c4 30       	cpi	r28, 0x04	; 4
   11372:	09 f0       	breq	.+2      	; 0x11376 <gpib_read_byte+0xc2>
   11374:	5a c0       	rjmp	.+180    	; 0x1142a <gpib_read_byte+0x176>
   11376:	3e c0       	rjmp	.+124    	; 0x113f4 <gpib_read_byte+0x140>
        {

			///@brief DAV must be high
            case GPIB_RX_START:
				//DEBUG
				if (GPIB_PIN_TST(DAV) == 1)
   11378:	19 9b       	sbis	0x03, 1	; 3
   1137a:	43 c0       	rjmp	.+134    	; 0x11402 <gpib_read_byte+0x14e>
   1137c:	fd e0       	ldi	r31, 0x0D	; 13
   1137e:	fa 95       	dec	r31
   11380:	f1 f7       	brne	.-4      	; 0x1137e <gpib_read_byte+0xca>
   11382:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					GPIB_PIN_FLOAT_UP(NRFD);
   11384:	52 98       	cbi	0x0a, 2	; 10
   11386:	5a 9a       	sbi	0x0b, 2	; 11
   11388:	8d e0       	ldi	r24, 0x0D	; 13
   1138a:	8a 95       	dec	r24
   1138c:	f1 f7       	brne	.-4      	; 0x1138a <gpib_read_byte+0xd6>
   1138e:	00 00       	nop
					GPIB_BUS_SETTLE();                // Let Data BUS settle
					rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   11390:	c1 e0       	ldi	r28, 0x01	; 1
   11392:	37 c0       	rjmp	.+110    	; 0x11402 <gpib_read_byte+0x14e>
                }
                break;

			// Wait for Data Avalable without timeout
            case GPIB_RX_WAIT_FOR_DAV_LOW:
                if ( GPIB_PIN_TST(DAV) == 0 )
   11394:	19 99       	sbic	0x03, 1	; 3
   11396:	80 c0       	rjmp	.+256    	; 0x11498 <gpib_read_byte+0x1e4>
   11398:	ed e0       	ldi	r30, 0x0D	; 13
   1139a:	ea 95       	dec	r30
   1139c:	f1 f7       	brne	.-4      	; 0x1139a <gpib_read_byte+0xe6>
   1139e:	00 00       	nop
				{
					GPIB_BUS_SETTLE();                
                    rx_state = GPIB_RX_DAV_IS_LOW;
   113a0:	c2 e0       	ldi	r28, 0x02	; 2
   113a2:	7a c0       	rjmp	.+244    	; 0x11498 <gpib_read_byte+0x1e4>
				}
                break;

			// Data is Avaliable
            case GPIB_RX_DAV_IS_LOW:
				GPIB_IO_LOW(NRFD); // BUSY
   113a4:	5a 98       	cbi	0x0b, 2	; 11
   113a6:	52 9a       	sbi	0x0a, 2	; 10
   113a8:	fd e0       	ldi	r31, 0x0D	; 13
   113aa:	fa 95       	dec	r31
				GPIB_BUS_SETTLE();                

				// Read DATA and Control lines
				// gpib_bus_read() strips parity if ATN is low command state

                bus = gpib_bus_read();
   113ac:	f1 f7       	brne	.-4      	; 0x113aa <gpib_read_byte+0xf6>
   113ae:	00 00       	nop
   113b0:	93 dc       	rcall	.-1754   	; 0x10cd8 <gpib_bus_read>
   113b2:	a8 2e       	mov	r10, r24
                ch |= bus;

				///@brief V2 boards can NOT read all control bits at once
				///@brief NRFD,NDAC and SRQ are cirrently outputs

                control_last = gpib_control_pin_read();
   113b4:	b1 2c       	mov	r11, r1
   113b6:	96 dc       	rcall	.-1748   	; 0x10ce4 <gpib_control_pin_read>
   113b8:	7c 01       	movw	r14, r24
   113ba:	08 2b       	or	r16, r24
                ch |= control_last;
   113bc:	19 2b       	or	r17, r25
   113be:	0a 29       	or	r16, r10

				// In theory the control_last should not have changed
				// from the initial values. ONly the Data BUS
                if(trace)
   113c0:	1b 29       	or	r17, r11
   113c2:	c1 14       	cp	r12, r1
   113c4:	d1 04       	cpc	r13, r1
                {
                    control_last |= gpib_handshake_pin_read();
   113c6:	49 f0       	breq	.+18     	; 0x113da <gpib_read_byte+0x126>
   113c8:	9d dc       	rcall	.-1734   	; 0x10d04 <gpib_handshake_pin_read>
   113ca:	e8 2a       	or	r14, r24
                    gpib_trace_display(bus | control_last, TRACE_READ);
   113cc:	f9 2a       	or	r15, r25
   113ce:	61 e0       	ldi	r22, 0x01	; 1
   113d0:	70 e0       	ldi	r23, 0x00	; 0
   113d2:	c5 01       	movw	r24, r10
   113d4:	8e 29       	or	r24, r14
   113d6:	9f 29       	or	r25, r15
   113d8:	2b de       	rcall	.-938    	; 0x11030 <gpib_trace_display>
                }

				// Release NDAC to say we read the byte
                GPIB_PIN_FLOAT_UP(NDAC);
   113da:	53 98       	cbi	0x0a, 3	; 10
   113dc:	5b 9a       	sbi	0x0b, 3	; 11
   113de:	8d e0       	ldi	r24, 0x0D	; 13
   113e0:	8a 95       	dec	r24
   113e2:	f1 f7       	brne	.-4      	; 0x113e0 <gpib_read_byte+0x12c>
                GPIB_BUS_SETTLE();                // NDAC bus settle time
                gpib_timeout_set(HTIMEOUT);
   113e4:	00 00       	nop
   113e6:	64 ef       	ldi	r22, 0xF4	; 244
   113e8:	71 e0       	ldi	r23, 0x01	; 1
   113ea:	80 e0       	ldi	r24, 0x00	; 0
   113ec:	90 e0       	ldi	r25, 0x00	; 0
   113ee:	3f db       	rcall	.-2434   	; 0x10a6e <gpib_timeout_set>
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   113f0:	c4 e0       	ldi	r28, 0x04	; 4
   113f2:	52 c0       	rjmp	.+164    	; 0x11498 <gpib_read_byte+0x1e4>
                break;

			///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   113f4:	19 9b       	sbis	0x03, 1	; 3
   113f6:	05 c0       	rjmp	.+10     	; 0x11402 <gpib_read_byte+0x14e>
   113f8:	ed e0       	ldi	r30, 0x0D	; 13
   113fa:	ea 95       	dec	r30
   113fc:	f1 f7       	brne	.-4      	; 0x113fa <gpib_read_byte+0x146>
   113fe:	00 00       	nop
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
   11400:	c5 e0       	ldi	r28, 0x05	; 5
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11402:	80 91 dd 1c 	lds	r24, 0x1CDD	; 0x801cdd <gpib_timer+0x8>
                if (GPIB_PIN_TST(DAV) == 1)
                {
					GPIB_BUS_SETTLE();
                    rx_state = GPIB_RX_DAV_IS_HI;
                }
                if (gpib_timeout_test())
   11406:	88 23       	and	r24, r24
   11408:	09 f4       	brne	.+2      	; 0x1140c <gpib_read_byte+0x158>
   1140a:	46 c0       	rjmp	.+140    	; 0x11498 <gpib_read_byte+0x1e4>
                {
                    ch |= TIMEOUT_FLAG;
   1140c:	10 64       	ori	r17, 0x40	; 64
                    rx_state = GPIB_RX_ERROR;
   1140e:	c7 e0       	ldi	r28, 0x07	; 7
   11410:	43 c0       	rjmp	.+134    	; 0x11498 <gpib_read_byte+0x1e4>
                }
                break;

			///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
				GPIB_IO_LOW(NDAC);
   11412:	5b 98       	cbi	0x0b, 3	; 11
   11414:	53 9a       	sbi	0x0a, 3	; 10
   11416:	fd e0       	ldi	r31, 0x0D	; 13
   11418:	fa 95       	dec	r31
   1141a:	f1 f7       	brne	.-4      	; 0x11418 <gpib_read_byte+0x164>
   1141c:	00 00       	nop
   1141e:	09 c0       	rjmp	.+18     	; 0x11432 <gpib_read_byte+0x17e>
				// Now BOTH NDAC and NRFD are LOW
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_ERROR:
				GPIB_IO_LOW(NRFD);
   11420:	5a 98       	cbi	0x0b, 2	; 11
   11422:	52 9a       	sbi	0x0a, 2	; 10
				GPIB_IO_LOW(NDAC);
   11424:	5b 98       	cbi	0x0b, 3	; 11
   11426:	53 9a       	sbi	0x0a, 3	; 10

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11428:	04 c0       	rjmp	.+8      	; 0x11432 <gpib_read_byte+0x17e>
   1142a:	c1 14       	cp	r12, r1
   1142c:	d1 04       	cpc	r13, r1
   1142e:	91 f0       	breq	.+36     	; 0x11454 <gpib_read_byte+0x1a0>
   11430:	04 c0       	rjmp	.+8      	; 0x1143a <gpib_read_byte+0x186>
   11432:	c1 14       	cp	r12, r1
   11434:	d1 04       	cpc	r13, r1
   11436:	99 f0       	breq	.+38     	; 0x1145e <gpib_read_byte+0x1aa>
        {
/// V2 boards can not read all control and handshake bits at once
/// FIXME We could add a test for read/write state ??
/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   11438:	c8 e0       	ldi	r28, 0x08	; 8
   1143a:	54 dc       	rcall	.-1880   	; 0x10ce4 <gpib_control_pin_read>
            control |= gpib_handshake_pin_read();
   1143c:	5c 01       	movw	r10, r24
   1143e:	62 dc       	rcall	.-1852   	; 0x10d04 <gpib_handshake_pin_read>
   11440:	a8 2a       	or	r10, r24
   11442:	b9 2a       	or	r11, r25
            if(control_last != control)
   11444:	ae 14       	cp	r10, r14
   11446:	bf 04       	cpc	r11, r15
   11448:	31 f0       	breq	.+12     	; 0x11456 <gpib_read_byte+0x1a2>
            {
                gpib_trace_display(control, TRACE_BUS);
   1144a:	62 e0       	ldi	r22, 0x02	; 2
   1144c:	70 e0       	ldi	r23, 0x00	; 0
   1144e:	c5 01       	movw	r24, r10
   11450:	ef dd       	rcall	.-1058   	; 0x11030 <gpib_trace_display>
   11452:	01 c0       	rjmp	.+2      	; 0x11456 <gpib_read_byte+0x1a2>
   11454:	57 01       	movw	r10, r14

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   11456:	c8 30       	cpi	r28, 0x08	; 8
        gpib_trace_display(control_last, TRACE_BUS);
    }

	gpib_timeout_set(HTIMEOUT);
    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   11458:	11 f0       	breq	.+4      	; 0x1145e <gpib_read_byte+0x1aa>
   1145a:	75 01       	movw	r14, r10
   1145c:	5c cf       	rjmp	.-328    	; 0x11316 <gpib_read_byte+0x62>
   1145e:	80 91 e2 1e 	lds	r24, 0x1EE2	; 0x801ee2 <current>
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   11462:	90 91 e3 1e 	lds	r25, 0x1EE3	; 0x801ee3 <current+0x1>
   11466:	90 93 df 1c 	sts	0x1CDF, r25	; 0x801cdf <lastcmd+0x1>
   1146a:	80 93 de 1c 	sts	0x1CDE, r24	; 0x801cde <lastcmd>
   1146e:	c8 01       	movw	r24, r16

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   11470:	88 27       	eor	r24, r24
   11472:	90 7d       	andi	r25, 0xD0	; 208
   11474:	89 2b       	or	r24, r25
   11476:	11 f4       	brne	.+4      	; 0x1147c <gpib_read_byte+0x1c8>
   11478:	12 fd       	sbrc	r17, 2
   1147a:	05 c0       	rjmp	.+10     	; 0x11486 <gpib_read_byte+0x1d2>
   1147c:	10 92 e3 1e 	sts	0x1EE3, r1	; 0x801ee3 <current+0x1>
        current = 0;
   11480:	10 92 e2 1e 	sts	0x1EE2, r1	; 0x801ee2 <current>
   11484:	07 c0       	rjmp	.+14     	; 0x11494 <gpib_read_byte+0x1e0>
   11486:	c8 01       	movw	r24, r16
    else
        current = ch & CMD_MASK;
   11488:	8f 77       	andi	r24, 0x7F	; 127
   1148a:	99 27       	eor	r25, r25
   1148c:	90 93 e3 1e 	sts	0x1EE3, r25	; 0x801ee3 <current+0x1>
   11490:	80 93 e2 1e 	sts	0x1EE2, r24	; 0x801ee2 <current>
   11494:	c8 01       	movw	r24, r16
   11496:	05 c0       	rjmp	.+10     	; 0x114a2 <gpib_read_byte+0x1ee>
   11498:	c1 14       	cp	r12, r1

            case GPIB_RX_DONE:
                break;
        }

        if(trace)
   1149a:	d1 04       	cpc	r13, r1
   1149c:	09 f4       	brne	.+2      	; 0x114a0 <gpib_read_byte+0x1ec>
   1149e:	3b cf       	rjmp	.-394    	; 0x11316 <gpib_read_byte+0x62>
   114a0:	cc cf       	rjmp	.-104    	; 0x1143a <gpib_read_byte+0x186>
   114a2:	0f 90       	pop	r0
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   114a4:	0f 90       	pop	r0
   114a6:	0f 90       	pop	r0
   114a8:	0f 90       	pop	r0
   114aa:	0f 90       	pop	r0
   114ac:	cf 91       	pop	r28
   114ae:	1f 91       	pop	r17
   114b0:	0f 91       	pop	r16
   114b2:	ff 90       	pop	r15
   114b4:	ef 90       	pop	r14
   114b6:	df 90       	pop	r13
   114b8:	cf 90       	pop	r12
   114ba:	bf 90       	pop	r11
   114bc:	af 90       	pop	r10
   114be:	08 95       	ret

000114c0 <gpib_decode>:
   114c0:	60 e0       	ldi	r22, 0x00	; 0
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   114c2:	70 e0       	ldi	r23, 0x00	; 0
   114c4:	b5 cd       	rjmp	.-1174   	; 0x11030 <gpib_trace_display>
   114c6:	08 95       	ret

000114c8 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   114c8:	a7 e0       	ldi	r26, 0x07	; 7
   114ca:	b0 e0       	ldi	r27, 0x00	; 0
   114cc:	ea e6       	ldi	r30, 0x6A	; 106
   114ce:	fa e8       	ldi	r31, 0x8A	; 138
   114d0:	0c 94 6e e6 	jmp	0x1ccdc	; 0x1ccdc <__prologue_saves__+0x10>
   114d4:	5b 01       	movw	r10, r22
   114d6:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   114d8:	fa 01       	movw	r30, r20
   114da:	20 81       	ld	r18, Z
   114dc:	31 81       	ldd	r19, Z+1	; 0x01
   114de:	22 27       	eor	r18, r18
   114e0:	31 83       	std	Z+1, r19	; 0x01
   114e2:	20 83       	st	Z, r18

    if(!size)
   114e4:	67 2b       	or	r22, r23
   114e6:	21 f0       	breq	.+8      	; 0x114f0 <gpib_read_str+0x28>
   114e8:	7c 01       	movw	r14, r24
   114ea:	00 e0       	ldi	r16, 0x00	; 0
   114ec:	10 e0       	ldi	r17, 0x00	; 0
   114ee:	28 c0       	rjmp	.+80     	; 0x11540 <gpib_read_str+0x78>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   114f0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   114f4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   114f8:	81 72       	andi	r24, 0x21	; 33
   114fa:	91 70       	andi	r25, 0x01	; 1
   114fc:	89 2b       	or	r24, r25
   114fe:	09 f4       	brne	.+2      	; 0x11502 <gpib_read_str+0x3a>
   11500:	7c c0       	rjmp	.+248    	; 0x115fa <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   11502:	89 e9       	ldi	r24, 0x99	; 153
   11504:	9f e0       	ldi	r25, 0x0F	; 15
   11506:	a0 e0       	ldi	r26, 0x00	; 0
   11508:	ed b7       	in	r30, 0x3d	; 61
   1150a:	fe b7       	in	r31, 0x3e	; 62
   1150c:	81 83       	std	Z+1, r24	; 0x01
   1150e:	92 83       	std	Z+2, r25	; 0x02
   11510:	a3 83       	std	Z+3, r26	; 0x03
   11512:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   11516:	71 c0       	rjmp	.+226    	; 0x115fa <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   11518:	8c 27       	eor	r24, r28
   1151a:	9d 27       	eor	r25, r29
   1151c:	92 fd       	sbrc	r25, 2
   1151e:	2e c0       	rjmp	.+92     	; 0x1157c <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11520:	ce 01       	movw	r24, r28
   11522:	88 27       	eor	r24, r24
   11524:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   11526:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11528:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   1152a:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   1152c:	f7 01       	movw	r30, r14
   1152e:	20 83       	st	Z, r18
        ++ind;
   11530:	0f 5f       	subi	r16, 0xFF	; 255
   11532:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   11534:	89 2b       	or	r24, r25
   11536:	09 f4       	brne	.+2      	; 0x1153a <gpib_read_str+0x72>
   11538:	3c c0       	rjmp	.+120    	; 0x115b2 <gpib_read_str+0xea>
   1153a:	ff ef       	ldi	r31, 0xFF	; 255
   1153c:	ef 1a       	sub	r14, r31
   1153e:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   11540:	0a 15       	cp	r16, r10
   11542:	1b 05       	cpc	r17, r11
   11544:	0c f0       	brlt	.+2      	; 0x11548 <gpib_read_str+0x80>
   11546:	3f c0       	rjmp	.+126    	; 0x115c6 <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   11548:	80 e0       	ldi	r24, 0x00	; 0
   1154a:	90 e0       	ldi	r25, 0x00	; 0
   1154c:	b3 de       	rcall	.-666    	; 0x112b4 <gpib_read_byte>
   1154e:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   11550:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11554:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11558:	90 ff       	sbrs	r25, 0
   1155a:	02 c0       	rjmp	.+4      	; 0x11560 <gpib_read_str+0x98>
            gpib_decode(val);
   1155c:	ce 01       	movw	r24, r28
   1155e:	b0 df       	rcall	.-160    	; 0x114c0 <gpib_decode>
#endif
        if(val & ERROR_MASK)
   11560:	9e 01       	movw	r18, r28
   11562:	22 27       	eor	r18, r18
   11564:	30 7d       	andi	r19, 0xD0	; 208
   11566:	f6 01       	movw	r30, r12
   11568:	80 81       	ld	r24, Z
   1156a:	91 81       	ldd	r25, Z+1	; 0x01
   1156c:	21 15       	cp	r18, r1
   1156e:	31 05       	cpc	r19, r1
   11570:	99 f2       	breq	.-90     	; 0x11518 <gpib_read_str+0x50>
        {
            *status |= (val & ERROR_MASK);
   11572:	82 2b       	or	r24, r18
   11574:	93 2b       	or	r25, r19
   11576:	91 83       	std	Z+1, r25	; 0x01
   11578:	80 83       	st	Z, r24
            break;
   1157a:	28 c0       	rjmp	.+80     	; 0x115cc <gpib_read_str+0x104>
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1157c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11580:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11584:	81 72       	andi	r24, 0x21	; 33
   11586:	91 70       	andi	r25, 0x01	; 1
   11588:	89 2b       	or	r24, r25
   1158a:	81 f0       	breq	.+32     	; 0x115ac <gpib_read_str+0xe4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   1158c:	ce 01       	movw	r24, r28
   1158e:	99 27       	eor	r25, r25
   11590:	ed b7       	in	r30, 0x3d	; 61
   11592:	fe b7       	in	r31, 0x3e	; 62
   11594:	97 83       	std	Z+7, r25	; 0x07
   11596:	86 83       	std	Z+6, r24	; 0x06
   11598:	15 83       	std	Z+5, r17	; 0x05
   1159a:	04 83       	std	Z+4, r16	; 0x04
   1159c:	8c e6       	ldi	r24, 0x6C	; 108
   1159e:	9f e0       	ldi	r25, 0x0F	; 15
   115a0:	a0 e0       	ldi	r26, 0x00	; 0
   115a2:	81 83       	std	Z+1, r24	; 0x01
   115a4:	92 83       	std	Z+2, r25	; 0x02
   115a6:	a3 83       	std	Z+3, r26	; 0x03
   115a8:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            gpib_unread(val);
   115ac:	ce 01       	movw	r24, r28
   115ae:	6a db       	rcall	.-2348   	; 0x10c84 <gpib_unread>
            break;
   115b0:	0d c0       	rjmp	.+26     	; 0x115cc <gpib_read_str+0x104>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   115b2:	d0 ff       	sbrs	r29, 0
   115b4:	c2 cf       	rjmp	.-124    	; 0x1153a <gpib_read_str+0x72>
        {

            if(*status & EOI_FLAG)
   115b6:	f6 01       	movw	r30, r12
   115b8:	80 81       	ld	r24, Z
   115ba:	91 81       	ldd	r25, Z+1	; 0x01
   115bc:	90 fd       	sbrc	r25, 0
   115be:	1f c0       	rjmp	.+62     	; 0x115fe <gpib_read_str+0x136>
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   115c0:	91 60       	ori	r25, 0x01	; 1
   115c2:	91 83       	std	Z+1, r25	; 0x01
   115c4:	80 83       	st	Z, r24
            break;
        }
    }
    if ( ind != size ) 
   115c6:	0a 15       	cp	r16, r10
   115c8:	1b 05       	cpc	r17, r11
   115ca:	c9 f0       	breq	.+50     	; 0x115fe <gpib_read_str+0x136>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   115cc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   115d0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   115d4:	81 72       	andi	r24, 0x21	; 33
   115d6:	99 27       	eor	r25, r25
   115d8:	89 2b       	or	r24, r25
   115da:	89 f0       	breq	.+34     	; 0x115fe <gpib_read_str+0x136>
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   115dc:	ed b7       	in	r30, 0x3d	; 61
   115de:	fe b7       	in	r31, 0x3e	; 62
   115e0:	b7 82       	std	Z+7, r11	; 0x07
   115e2:	a6 82       	std	Z+6, r10	; 0x06
   115e4:	15 83       	std	Z+5, r17	; 0x05
   115e6:	04 83       	std	Z+4, r16	; 0x04
   115e8:	85 e4       	ldi	r24, 0x45	; 69
   115ea:	9f e0       	ldi	r25, 0x0F	; 15
   115ec:	a0 e0       	ldi	r26, 0x00	; 0
   115ee:	81 83       	std	Z+1, r24	; 0x01
   115f0:	92 83       	std	Z+2, r25	; 0x02
   115f2:	a3 83       	std	Z+3, r26	; 0x03
   115f4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   115f8:	02 c0       	rjmp	.+4      	; 0x115fe <gpib_read_str+0x136>
   115fa:	00 e0       	ldi	r16, 0x00	; 0
   115fc:	10 e0       	ldi	r17, 0x00	; 0
    }
    return(ind);
}
   115fe:	c8 01       	movw	r24, r16
   11600:	cd b7       	in	r28, 0x3d	; 61
   11602:	de b7       	in	r29, 0x3e	; 62
   11604:	27 96       	adiw	r28, 0x07	; 7
   11606:	ea e0       	ldi	r30, 0x0A	; 10
   11608:	0c 94 8a e6 	jmp	0x1cd14	; 0x1cd14 <__epilogue_restores__+0x10>

0001160c <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   1160c:	a7 e0       	ldi	r26, 0x07	; 7
   1160e:	b0 e0       	ldi	r27, 0x00	; 0
   11610:	ec e0       	ldi	r30, 0x0C	; 12
   11612:	fb e8       	ldi	r31, 0x8B	; 139
   11614:	0c 94 6e e6 	jmp	0x1ccdc	; 0x1ccdc <__prologue_saves__+0x10>
   11618:	d8 2f       	mov	r29, r24
   1161a:	c9 2f       	mov	r28, r25
   1161c:	7b 01       	movw	r14, r22
   1161e:	8a 01       	movw	r16, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   11620:	fa 01       	movw	r30, r20
   11622:	80 81       	ld	r24, Z
   11624:	91 81       	ldd	r25, Z+1	; 0x01
   11626:	88 27       	eor	r24, r24
   11628:	91 83       	std	Z+1, r25	; 0x01
   1162a:	80 83       	st	Z, r24

    if(!size)
   1162c:	67 2b       	or	r22, r23
   1162e:	91 f4       	brne	.+36     	; 0x11654 <gpib_write_str+0x48>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11630:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11634:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11638:	81 72       	andi	r24, 0x21	; 33
   1163a:	91 70       	andi	r25, 0x01	; 1
   1163c:	89 2b       	or	r24, r25
   1163e:	51 f0       	breq	.+20     	; 0x11654 <gpib_write_str+0x48>
            printf("gpib_write_str: size = 0\n");
   11640:	8b e2       	ldi	r24, 0x2B	; 43
   11642:	9f e0       	ldi	r25, 0x0F	; 15
   11644:	a0 e0       	ldi	r26, 0x00	; 0
   11646:	ed b7       	in	r30, 0x3d	; 61
   11648:	fe b7       	in	r31, 0x3e	; 62
   1164a:	81 83       	std	Z+1, r24	; 0x01
   1164c:	92 83       	std	Z+2, r25	; 0x02
   1164e:	a3 83       	std	Z+3, r26	; 0x03
   11650:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    }

	// Start with NRFD and NDAC = 1 - ie off the OC BUS
	gpib_rx_init(0);
   11654:	80 e0       	ldi	r24, 0x00	; 0
   11656:	4d da       	rcall	.-2918   	; 0x10af2 <gpib_rx_init>

// Wait until ATN is released!
#if 1
    if (GPIB_PIN_TST(ATN) == 0)
   11658:	4e 9b       	sbis	0x09, 6	; 9
   1165a:	06 c0       	rjmp	.+12     	; 0x11668 <gpib_write_str+0x5c>
#endif

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
   1165c:	64 ef       	ldi	r22, 0xF4	; 244
   1165e:	71 e0       	ldi	r23, 0x01	; 1
   11660:	80 e0       	ldi	r24, 0x00	; 0
   11662:	90 e0       	ldi	r25, 0x00	; 0
   11664:	04 da       	rcall	.-3064   	; 0x10a6e <gpib_timeout_set>
	while ( GPIB_PIN_TST(DAV) == 0)
   11666:	18 c0       	rjmp	.+48     	; 0x11698 <gpib_write_str+0x8c>
#endif
		// Wait for ATN free
		// Keep in mind that we have been addressed to talk already
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
   11668:	64 ef       	ldi	r22, 0xF4	; 244
   1166a:	71 e0       	ldi	r23, 0x01	; 1
   1166c:	80 e0       	ldi	r24, 0x00	; 0
   1166e:	90 e0       	ldi	r25, 0x00	; 0
   11670:	fe d9       	rcall	.-3076   	; 0x10a6e <gpib_timeout_set>
		while(GPIB_PIN_TST(ATN) == 0)
   11672:	4e 99       	sbic	0x09, 6	; 9
   11674:	f3 cf       	rjmp	.-26     	; 0x1165c <gpib_write_str+0x50>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11676:	80 91 dd 1c 	lds	r24, 0x1CDD	; 0x801cdd <gpib_timer+0x8>
		// So waiting is ok - they won't be expecting a reply until
		// They are ready
		gpib_timeout_set(HTIMEOUT);
		while(GPIB_PIN_TST(ATN) == 0)
		{
			if(gpib_timeout_test())
   1167a:	88 23       	and	r24, r24
			{
				gpib_rx_init(1);
   1167c:	d1 f3       	breq	.-12     	; 0x11672 <gpib_write_str+0x66>
   1167e:	81 e0       	ldi	r24, 0x01	; 1
   11680:	38 da       	rcall	.-2960   	; 0x10af2 <gpib_rx_init>
				if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11682:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11686:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1168a:	85 70       	andi	r24, 0x05	; 5
   1168c:	99 27       	eor	r25, r25
   1168e:	89 2b       	or	r24, r25
   11690:	d9 f0       	breq	.+54     	; 0x116c8 <gpib_write_str+0xbc>
					printf("<gpib_write_str timeout waiting for ATN = 1>\n");
   11692:	8d ef       	ldi	r24, 0xFD	; 253
   11694:	9e e0       	ldi	r25, 0x0E	; 14
   11696:	10 c0       	rjmp	.+32     	; 0x116b8 <gpib_write_str+0xac>

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   11698:	19 99       	sbic	0x03, 1	; 3
   1169a:	1f c0       	rjmp	.+62     	; 0x116da <gpib_write_str+0xce>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   1169c:	80 91 dd 1c 	lds	r24, 0x1CDD	; 0x801cdd <gpib_timer+0x8>
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
	{
		if(gpib_timeout_test())
   116a0:	88 23       	and	r24, r24
   116a2:	d1 f3       	breq	.-12     	; 0x11698 <gpib_write_str+0x8c>
		{
			if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   116a4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   116a8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   116ac:	85 70       	andi	r24, 0x05	; 5
   116ae:	99 27       	eor	r25, r25
   116b0:	89 2b       	or	r24, r25
   116b2:	51 f0       	breq	.+20     	; 0x116c8 <gpib_write_str+0xbc>
				printf("<BUS waiting for DAV==1>\n");
   116b4:	83 ee       	ldi	r24, 0xE3	; 227
   116b6:	9e e0       	ldi	r25, 0x0E	; 14
   116b8:	a0 e0       	ldi	r26, 0x00	; 0
   116ba:	ed b7       	in	r30, 0x3d	; 61
   116bc:	fe b7       	in	r31, 0x3e	; 62
   116be:	81 83       	std	Z+1, r24	; 0x01
   116c0:	92 83       	std	Z+2, r25	; 0x02
   116c2:	a3 83       	std	Z+3, r26	; 0x03
   116c4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
			*status |= (TIMEOUT_FLAG | BUS_ERROR_FLAG);
   116c8:	f8 01       	movw	r30, r16
   116ca:	80 81       	ld	r24, Z
   116cc:	91 81       	ldd	r25, Z+1	; 0x01
   116ce:	90 6c       	ori	r25, 0xC0	; 192
   116d0:	91 83       	std	Z+1, r25	; 0x01
   116d2:	80 83       	st	Z, r24
			return(ind);
   116d4:	c0 e0       	ldi	r28, 0x00	; 0
   116d6:	d0 e0       	ldi	r29, 0x00	; 0
   116d8:	45 c0       	rjmp	.+138    	; 0x11764 <gpib_write_str+0x158>
   116da:	cd 2e       	mov	r12, r29
   116dc:	dc 2e       	mov	r13, r28

// Wait until DAV is released!
#if 1
	// Wait if DAV = 0 as the bus is busy
    gpib_timeout_set(HTIMEOUT);
	while ( GPIB_PIN_TST(DAV) == 0)
   116de:	c0 e0       	ldi	r28, 0x00	; 0
   116e0:	d0 e0       	ldi	r29, 0x00	; 0
			return(ind);
		}
	}
#endif

    while(ind < size)
   116e2:	ce 15       	cp	r28, r14
   116e4:	df 05       	cpc	r29, r15
   116e6:	1c f5       	brge	.+70     	; 0x1172e <gpib_write_str+0x122>
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   116e8:	21 96       	adiw	r28, 0x01	; 1
   116ea:	f6 01       	movw	r30, r12
   116ec:	81 91       	ld	r24, Z+
   116ee:	6f 01       	movw	r12, r30
   116f0:	90 e0       	ldi	r25, 0x00	; 0

        if( (*status & EOI_FLAG) && (ind == size ) )
   116f2:	f8 01       	movw	r30, r16
   116f4:	20 81       	ld	r18, Z
   116f6:	31 81       	ldd	r19, Z+1	; 0x01
   116f8:	30 ff       	sbrs	r19, 0
   116fa:	04 c0       	rjmp	.+8      	; 0x11704 <gpib_write_str+0xf8>
   116fc:	ec 16       	cp	r14, r28
   116fe:	fd 06       	cpc	r15, r29
            ch |= EOI_FLAG;
   11700:	09 f4       	brne	.+2      	; 0x11704 <gpib_write_str+0xf8>

/// @return Returns

        val = gpib_write_byte(ch);
   11702:	91 60       	ori	r25, 0x01	; 1
   11704:	0b db       	rcall	.-2538   	; 0x10d1c <gpib_write_byte>
        *status |= (val & ERROR_MASK);
   11706:	5c 01       	movw	r10, r24
   11708:	aa 24       	eor	r10, r10
   1170a:	f0 ed       	ldi	r31, 0xD0	; 208
   1170c:	bf 22       	and	r11, r31
   1170e:	f8 01       	movw	r30, r16
   11710:	20 81       	ld	r18, Z
   11712:	31 81       	ldd	r19, Z+1	; 0x01
   11714:	2a 29       	or	r18, r10
   11716:	3b 29       	or	r19, r11
   11718:	31 83       	std	Z+1, r19	; 0x01
   1171a:	20 83       	st	Z, r18

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   1171c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11720:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
            gpib_decode(val);
   11724:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   11726:	cc de       	rcall	.-616    	; 0x114c0 <gpib_decode>
   11728:	a1 14       	cp	r10, r1
   1172a:	b1 04       	cpc	r11, r1

    }                                             // while(ind < size)

// End by setting receive mode and set NRFD and NDAC busy until
// we get back to the main loop (this happens very quickly
	gpib_rx_init(1);	// BUSY
   1172c:	d1 f2       	breq	.-76     	; 0x116e2 <gpib_write_str+0xd6>
   1172e:	81 e0       	ldi	r24, 0x01	; 1
   11730:	e0 d9       	rcall	.-3136   	; 0x10af2 <gpib_rx_init>

    if ( ind != size )
   11732:	ce 15       	cp	r28, r14
   11734:	df 05       	cpc	r29, r15
   11736:	b1 f0       	breq	.+44     	; 0x11764 <gpib_write_str+0x158>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11738:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1173c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11740:	81 72       	andi	r24, 0x21	; 33
   11742:	91 70       	andi	r25, 0x01	; 1
   11744:	89 2b       	or	r24, r25
   11746:	71 f0       	breq	.+28     	; 0x11764 <gpib_write_str+0x158>
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   11748:	ed b7       	in	r30, 0x3d	; 61
   1174a:	fe b7       	in	r31, 0x3e	; 62
   1174c:	f7 82       	std	Z+7, r15	; 0x07
   1174e:	e6 82       	std	Z+6, r14	; 0x06
   11750:	d5 83       	std	Z+5, r29	; 0x05
   11752:	c4 83       	std	Z+4, r28	; 0x04
   11754:	8b eb       	ldi	r24, 0xBB	; 187
   11756:	9e e0       	ldi	r25, 0x0E	; 14
   11758:	a0 e0       	ldi	r26, 0x00	; 0
   1175a:	81 83       	std	Z+1, r24	; 0x01
   1175c:	92 83       	std	Z+2, r25	; 0x02
   1175e:	a3 83       	std	Z+3, r26	; 0x03
   11760:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    }
    return(ind);
}
   11764:	ce 01       	movw	r24, r28
   11766:	cd b7       	in	r28, 0x3d	; 61
   11768:	de b7       	in	r29, 0x3e	; 62
   1176a:	27 96       	adiw	r28, 0x07	; 7
   1176c:	ea e0       	ldi	r30, 0x0A	; 10
   1176e:	0c 94 8a e6 	jmp	0x1cd14	; 0x1cd14 <__epilogue_restores__+0x10>

00011772 <gpib_file_init>:
{
    int index = find_device(PRINTER_TYPE, address, BASE_MSA);
    if(index == -1)
        return(0);
    return(set_active_device(index));
}
   11772:	ad b7       	in	r26, 0x3d	; 61
   11774:	be b7       	in	r27, 0x3e	; 62
   11776:	17 97       	sbiw	r26, 0x07	; 7
   11778:	0f b6       	in	r0, 0x3f	; 63
   1177a:	f8 94       	cli
   1177c:	be bf       	out	0x3e, r27	; 62
   1177e:	0f be       	out	0x3f, r0	; 63
   11780:	ad bf       	out	0x3d, r26	; 61
   11782:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <debuglevel+0x1>
   11786:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <debuglevel>
   1178a:	88 eb       	ldi	r24, 0xB8	; 184
   1178c:	91 e0       	ldi	r25, 0x01	; 1
   1178e:	0e 94 5b 9d 	call	0x13ab6	; 0x13ab6 <Read_Config>
   11792:	18 16       	cp	r1, r24
   11794:	19 06       	cpc	r1, r25
   11796:	8c f4       	brge	.+34     	; 0x117ba <gpib_file_init+0x48>
   11798:	ed b7       	in	r30, 0x3d	; 61
   1179a:	fe b7       	in	r31, 0x3e	; 62
   1179c:	97 83       	std	Z+7, r25	; 0x07
   1179e:	86 83       	std	Z+6, r24	; 0x06
   117a0:	88 eb       	ldi	r24, 0xB8	; 184
   117a2:	91 e0       	ldi	r25, 0x01	; 1
   117a4:	95 83       	std	Z+5, r25	; 0x05
   117a6:	84 83       	std	Z+4, r24	; 0x04
   117a8:	8f e8       	ldi	r24, 0x8F	; 143
   117aa:	94 e1       	ldi	r25, 0x14	; 20
   117ac:	a0 e0       	ldi	r26, 0x00	; 0
   117ae:	81 83       	std	Z+1, r24	; 0x01
   117b0:	92 83       	std	Z+2, r25	; 0x02
   117b2:	a3 83       	std	Z+3, r26	; 0x03
   117b4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   117b8:	10 c0       	rjmp	.+32     	; 0x117da <gpib_file_init+0x68>
   117ba:	89 2b       	or	r24, r25
   117bc:	71 f0       	breq	.+28     	; 0x117da <gpib_file_init+0x68>
   117be:	88 eb       	ldi	r24, 0xB8	; 184
   117c0:	91 e0       	ldi	r25, 0x01	; 1
   117c2:	ed b7       	in	r30, 0x3d	; 61
   117c4:	fe b7       	in	r31, 0x3e	; 62
   117c6:	95 83       	std	Z+5, r25	; 0x05
   117c8:	84 83       	std	Z+4, r24	; 0x04
   117ca:	8e e7       	ldi	r24, 0x7E	; 126
   117cc:	94 e1       	ldi	r25, 0x14	; 20
   117ce:	a0 e0       	ldi	r26, 0x00	; 0
   117d0:	81 83       	std	Z+1, r24	; 0x01
   117d2:	92 83       	std	Z+2, r25	; 0x02
   117d4:	a3 83       	std	Z+3, r26	; 0x03
   117d6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   117da:	0e 94 63 99 	call	0x132c6	; 0x132c6 <set_Config_Defaults>
   117de:	0e 94 95 6f 	call	0xdf2a	; 0xdf2a <mmc_wp_status>
   117e2:	89 2b       	or	r24, r25
   117e4:	51 f0       	breq	.+20     	; 0x117fa <gpib_file_init+0x88>
   117e6:	85 e6       	ldi	r24, 0x65	; 101
   117e8:	94 e1       	ldi	r25, 0x14	; 20
   117ea:	a0 e0       	ldi	r26, 0x00	; 0
   117ec:	ed b7       	in	r30, 0x3d	; 61
   117ee:	fe b7       	in	r31, 0x3e	; 62
   117f0:	81 83       	std	Z+1, r24	; 0x01
   117f2:	92 83       	std	Z+2, r25	; 0x02
   117f4:	a3 83       	std	Z+3, r26	; 0x03
   117f6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   117fa:	ad b7       	in	r26, 0x3d	; 61
   117fc:	be b7       	in	r27, 0x3e	; 62
   117fe:	17 96       	adiw	r26, 0x07	; 7
   11800:	0f b6       	in	r0, 0x3f	; 63
   11802:	f8 94       	cli
   11804:	be bf       	out	0x3e, r27	; 62
   11806:	0f be       	out	0x3f, r0	; 63
   11808:	ad bf       	out	0x3d, r26	; 61
   1180a:	08 95       	ret

0001180c <SS80_is_MLA>:
   1180c:	40 e2       	ldi	r20, 0x20	; 32
   1180e:	50 e0       	ldi	r21, 0x00	; 0
   11810:	bc 01       	movw	r22, r24
   11812:	83 e0       	ldi	r24, 0x03	; 3
   11814:	90 e0       	ldi	r25, 0x00	; 0
   11816:	0e 94 9b 96 	call	0x12d36	; 0x12d36 <find_device>
   1181a:	8f 3f       	cpi	r24, 0xFF	; 255
   1181c:	31 f0       	breq	.+12     	; 0x1182a <SS80_is_MLA+0x1e>
   1181e:	0e 94 c4 96 	call	0x12d88	; 0x12d88 <set_active_device>
   11822:	08 2e       	mov	r0, r24
   11824:	00 0c       	add	r0, r0
   11826:	99 0b       	sbc	r25, r25
   11828:	08 95       	ret
   1182a:	80 e0       	ldi	r24, 0x00	; 0
   1182c:	90 e0       	ldi	r25, 0x00	; 0
   1182e:	08 95       	ret

00011830 <SS80_is_MTA>:
   11830:	40 e4       	ldi	r20, 0x40	; 64
   11832:	50 e0       	ldi	r21, 0x00	; 0
   11834:	bc 01       	movw	r22, r24
   11836:	83 e0       	ldi	r24, 0x03	; 3
   11838:	90 e0       	ldi	r25, 0x00	; 0
   1183a:	0e 94 9b 96 	call	0x12d36	; 0x12d36 <find_device>
   1183e:	8f 3f       	cpi	r24, 0xFF	; 255
   11840:	31 f0       	breq	.+12     	; 0x1184e <SS80_is_MTA+0x1e>
   11842:	0e 94 c4 96 	call	0x12d88	; 0x12d88 <set_active_device>
   11846:	08 2e       	mov	r0, r24
   11848:	00 0c       	add	r0, r0
   1184a:	99 0b       	sbc	r25, r25
   1184c:	08 95       	ret
   1184e:	80 e0       	ldi	r24, 0x00	; 0
   11850:	90 e0       	ldi	r25, 0x00	; 0
   11852:	08 95       	ret

00011854 <SS80_is_MSA>:
   11854:	40 e6       	ldi	r20, 0x60	; 96
   11856:	50 e0       	ldi	r21, 0x00	; 0
   11858:	bc 01       	movw	r22, r24
   1185a:	83 e0       	ldi	r24, 0x03	; 3
   1185c:	90 e0       	ldi	r25, 0x00	; 0
   1185e:	0e 94 9b 96 	call	0x12d36	; 0x12d36 <find_device>
   11862:	8f 3f       	cpi	r24, 0xFF	; 255
   11864:	31 f0       	breq	.+12     	; 0x11872 <SS80_is_MSA+0x1e>
   11866:	0e 94 c4 96 	call	0x12d88	; 0x12d88 <set_active_device>
   1186a:	08 2e       	mov	r0, r24
   1186c:	00 0c       	add	r0, r0
   1186e:	99 0b       	sbc	r25, r25
   11870:	08 95       	ret
   11872:	80 e0       	ldi	r24, 0x00	; 0
   11874:	90 e0       	ldi	r25, 0x00	; 0
   11876:	08 95       	ret

00011878 <AMIGO_is_MLA>:
   11878:	40 e2       	ldi	r20, 0x20	; 32
   1187a:	50 e0       	ldi	r21, 0x00	; 0
   1187c:	bc 01       	movw	r22, r24
   1187e:	81 e0       	ldi	r24, 0x01	; 1
   11880:	90 e0       	ldi	r25, 0x00	; 0
   11882:	0e 94 9b 96 	call	0x12d36	; 0x12d36 <find_device>
   11886:	8f 3f       	cpi	r24, 0xFF	; 255
   11888:	31 f0       	breq	.+12     	; 0x11896 <AMIGO_is_MLA+0x1e>
   1188a:	0e 94 c4 96 	call	0x12d88	; 0x12d88 <set_active_device>
   1188e:	08 2e       	mov	r0, r24
   11890:	00 0c       	add	r0, r0
   11892:	99 0b       	sbc	r25, r25
   11894:	08 95       	ret
   11896:	80 e0       	ldi	r24, 0x00	; 0
   11898:	90 e0       	ldi	r25, 0x00	; 0
   1189a:	08 95       	ret

0001189c <AMIGO_is_MTA>:
   1189c:	40 e4       	ldi	r20, 0x40	; 64
   1189e:	50 e0       	ldi	r21, 0x00	; 0
   118a0:	bc 01       	movw	r22, r24
   118a2:	81 e0       	ldi	r24, 0x01	; 1
   118a4:	90 e0       	ldi	r25, 0x00	; 0
   118a6:	0e 94 9b 96 	call	0x12d36	; 0x12d36 <find_device>
   118aa:	8f 3f       	cpi	r24, 0xFF	; 255
   118ac:	31 f0       	breq	.+12     	; 0x118ba <AMIGO_is_MTA+0x1e>
   118ae:	0e 94 c4 96 	call	0x12d88	; 0x12d88 <set_active_device>
   118b2:	08 2e       	mov	r0, r24
   118b4:	00 0c       	add	r0, r0
   118b6:	99 0b       	sbc	r25, r25
   118b8:	08 95       	ret
   118ba:	80 e0       	ldi	r24, 0x00	; 0
   118bc:	90 e0       	ldi	r25, 0x00	; 0
   118be:	08 95       	ret

000118c0 <AMIGO_is_MSA>:
   118c0:	40 e6       	ldi	r20, 0x60	; 96
   118c2:	50 e0       	ldi	r21, 0x00	; 0
   118c4:	bc 01       	movw	r22, r24
   118c6:	81 e0       	ldi	r24, 0x01	; 1
   118c8:	90 e0       	ldi	r25, 0x00	; 0
   118ca:	0e 94 9b 96 	call	0x12d36	; 0x12d36 <find_device>
   118ce:	8f 3f       	cpi	r24, 0xFF	; 255
   118d0:	31 f0       	breq	.+12     	; 0x118de <AMIGO_is_MSA+0x1e>
   118d2:	0e 94 c4 96 	call	0x12d88	; 0x12d88 <set_active_device>
   118d6:	08 2e       	mov	r0, r24
   118d8:	00 0c       	add	r0, r0
   118da:	99 0b       	sbc	r25, r25
   118dc:	08 95       	ret
   118de:	80 e0       	ldi	r24, 0x00	; 0
   118e0:	90 e0       	ldi	r25, 0x00	; 0
   118e2:	08 95       	ret

000118e4 <PRINTER_is_MLA>:
   118e4:	40 e2       	ldi	r20, 0x20	; 32
   118e6:	50 e0       	ldi	r21, 0x00	; 0
   118e8:	bc 01       	movw	r22, r24
   118ea:	84 e0       	ldi	r24, 0x04	; 4
   118ec:	90 e0       	ldi	r25, 0x00	; 0
   118ee:	0e 94 9b 96 	call	0x12d36	; 0x12d36 <find_device>
   118f2:	8f 3f       	cpi	r24, 0xFF	; 255
   118f4:	31 f0       	breq	.+12     	; 0x11902 <PRINTER_is_MLA+0x1e>
   118f6:	0e 94 c4 96 	call	0x12d88	; 0x12d88 <set_active_device>
   118fa:	08 2e       	mov	r0, r24
   118fc:	00 0c       	add	r0, r0
   118fe:	99 0b       	sbc	r25, r25
   11900:	08 95       	ret
   11902:	80 e0       	ldi	r24, 0x00	; 0
   11904:	90 e0       	ldi	r25, 0x00	; 0
   11906:	08 95       	ret

00011908 <PRINTER_is_MTA>:
   11908:	40 e4       	ldi	r20, 0x40	; 64
   1190a:	50 e0       	ldi	r21, 0x00	; 0
   1190c:	bc 01       	movw	r22, r24
   1190e:	84 e0       	ldi	r24, 0x04	; 4
   11910:	90 e0       	ldi	r25, 0x00	; 0
   11912:	0e 94 9b 96 	call	0x12d36	; 0x12d36 <find_device>
   11916:	8f 3f       	cpi	r24, 0xFF	; 255
   11918:	31 f0       	breq	.+12     	; 0x11926 <PRINTER_is_MTA+0x1e>
   1191a:	0e 94 c4 96 	call	0x12d88	; 0x12d88 <set_active_device>
   1191e:	08 2e       	mov	r0, r24
   11920:	00 0c       	add	r0, r0
   11922:	99 0b       	sbc	r25, r25
   11924:	08 95       	ret
   11926:	80 e0       	ldi	r24, 0x00	; 0
   11928:	90 e0       	ldi	r25, 0x00	; 0
   1192a:	08 95       	ret

0001192c <gpib_init_devices>:
///
/// - Used at power up, Bus IFC or user aborts
/// @return  void
void gpib_init_devices(void)
{
    gpib_bus_init();                              // Not busy - we have to free all pins on the BUS
   1192c:	aa d8       	rcall	.-3756   	; 0x10a82 <gpib_bus_init>

// Init PPR talking and listening states
// Enable this 14 April 2020 - testing MIke Gore
    gpib_state_init();
   1192e:	11 d9       	rcall	.-3550   	; 0x10b52 <gpib_state_init>
   11930:	0e 94 56 ad 	call	0x15aac	; 0x15aac <SS80_init>

    SS80_init();                                  // SS80 state init
   11934:	0e 94 eb b2 	call	0x165d6	; 0x165d6 <amigo_init>

#ifdef AMIGO
    amigo_init();                                 // AMIGO state init
   11938:	0c 94 16 be 	jmp	0x17c2c	; 0x17c2c <printer_close>
#endif

    printer_close();                              // Close any open fprinter files
   1193c:	08 95       	ret

0001193e <gpib_trace_task>:
   1193e:	0f 93       	push	r16
/// @param name: File name to save log file to.
/// @return  void
///   Exit on Key Press

void gpib_trace_task( char *name , int detail)
{
   11940:	1f 93       	push	r17
   11942:	cf 93       	push	r28
   11944:	df 93       	push	r29
   11946:	00 d0       	rcall	.+0      	; 0x11948 <gpib_trace_task+0xa>
   11948:	00 d0       	rcall	.+0      	; 0x1194a <gpib_trace_task+0xc>
   1194a:	1f 92       	push	r1
   1194c:	eb 01       	movw	r28, r22
    int ch;

    if(name && *name)
   1194e:	00 97       	sbiw	r24, 0x00	; 0
   11950:	09 f4       	brne	.+2      	; 0x11954 <gpib_trace_task+0x16>
   11952:	44 c0       	rjmp	.+136    	; 0x119dc <gpib_trace_task+0x9e>
   11954:	fc 01       	movw	r30, r24
   11956:	20 81       	ld	r18, Z
   11958:	22 23       	and	r18, r18
   1195a:	09 f4       	brne	.+2      	; 0x1195e <gpib_trace_task+0x20>
   1195c:	3f c0       	rjmp	.+126    	; 0x119dc <gpib_trace_task+0x9e>
    {
        name = skipspaces(name);
   1195e:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <skipspaces>
   11962:	8c 01       	movw	r16, r24
        printf("Capturing GPIB BUS to:%s\n", name);
   11964:	ed b7       	in	r30, 0x3d	; 61
   11966:	fe b7       	in	r31, 0x3e	; 62
   11968:	95 83       	std	Z+5, r25	; 0x05
   1196a:	84 83       	std	Z+4, r24	; 0x04
   1196c:	8b e4       	ldi	r24, 0x4B	; 75
   1196e:	94 e1       	ldi	r25, 0x14	; 20
   11970:	a0 e0       	ldi	r26, 0x00	; 0
   11972:	81 83       	std	Z+1, r24	; 0x01
   11974:	92 83       	std	Z+2, r25	; 0x02
   11976:	a3 83       	std	Z+3, r26	; 0x03
   11978:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        if(detail)
   1197c:	20 97       	sbiw	r28, 0x00	; 0
   1197e:	51 f0       	breq	.+20     	; 0x11994 <gpib_trace_task+0x56>
            printf("FULL GPIB BUS handshake logging requested\n");
   11980:	80 e2       	ldi	r24, 0x20	; 32
   11982:	94 e1       	ldi	r25, 0x14	; 20
   11984:	a0 e0       	ldi	r26, 0x00	; 0
   11986:	ed b7       	in	r30, 0x3d	; 61
   11988:	fe b7       	in	r31, 0x3e	; 62
   1198a:	81 83       	std	Z+1, r24	; 0x01
   1198c:	92 83       	std	Z+2, r25	; 0x02
   1198e:	a3 83       	std	Z+3, r26	; 0x03
   11990:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        printf("Press ANY key to exit\n");
   11994:	89 e0       	ldi	r24, 0x09	; 9
   11996:	94 e1       	ldi	r25, 0x14	; 20
   11998:	a0 e0       	ldi	r26, 0x00	; 0
   1199a:	ed b7       	in	r30, 0x3d	; 61
   1199c:	fe b7       	in	r31, 0x3e	; 62
   1199e:	81 83       	std	Z+1, r24	; 0x01
   119a0:	92 83       	std	Z+2, r25	; 0x02
   119a2:	a3 83       	std	Z+3, r26	; 0x03
   119a4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

        gpib_log_fp = fopen(name,"wb");
   119a8:	6a ef       	ldi	r22, 0xFA	; 250
   119aa:	78 e0       	ldi	r23, 0x08	; 8
   119ac:	c8 01       	movw	r24, r16
   119ae:	0e 94 d4 7d 	call	0xfba8	; 0xfba8 <fopen>
   119b2:	90 93 57 19 	sts	0x1957, r25	; 0x801957 <gpib_log_fp+0x1>
   119b6:	80 93 56 19 	sts	0x1956, r24	; 0x801956 <gpib_log_fp>
        if(gpib_log_fp == NULL)
   119ba:	89 2b       	or	r24, r25
   119bc:	b9 f4       	brne	.+46     	; 0x119ec <gpib_trace_task+0xae>
        {
            perror("open failed");
   119be:	88 e8       	ldi	r24, 0x88	; 136
   119c0:	9d e0       	ldi	r25, 0x0D	; 13
   119c2:	0e 94 05 78 	call	0xf00a	; 0xf00a <perror>
            printf("exiting...\n");
   119c6:	8d ef       	ldi	r24, 0xFD	; 253
   119c8:	93 e1       	ldi	r25, 0x13	; 19
   119ca:	a0 e0       	ldi	r26, 0x00	; 0
   119cc:	ed b7       	in	r30, 0x3d	; 61
   119ce:	fe b7       	in	r31, 0x3e	; 62
   119d0:	81 83       	std	Z+1, r24	; 0x01
   119d2:	92 83       	std	Z+2, r25	; 0x02
   119d4:	a3 83       	std	Z+3, r26	; 0x03
   119d6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            return;
   119da:	3d c0       	rjmp	.+122    	; 0x11a56 <gpib_trace_task+0x118>
        }
    }
    else
    {
        gpib_log_fp = stdout;
   119dc:	80 91 b7 1c 	lds	r24, 0x1CB7	; 0x801cb7 <__iob+0x2>
   119e0:	90 91 b8 1c 	lds	r25, 0x1CB8	; 0x801cb8 <__iob+0x3>
   119e4:	90 93 57 19 	sts	0x1957, r25	; 0x801957 <gpib_log_fp+0x1>
   119e8:	80 93 56 19 	sts	0x1956, r24	; 0x801956 <gpib_log_fp>
    }

    // gpib_state_init();                            // Init PPR talking and listening states
	// gpib_state_init is in gpib_init_devices()
    gpib_init_devices();
   119ec:	9f df       	rcall	.-194    	; 0x1192c <gpib_init_devices>

    gpib_decode_header(gpib_log_fp);
   119ee:	80 91 56 19 	lds	r24, 0x1956	; 0x801956 <gpib_log_fp>
   119f2:	90 91 57 19 	lds	r25, 0x1957	; 0x801957 <gpib_log_fp+0x1>
   119f6:	ca da       	rcall	.-2668   	; 0x10f8c <gpib_decode_header>
    while(1)                                      // Main loop, forever
    {
        if(uart_keyhit(0))
   119f8:	80 e0       	ldi	r24, 0x00	; 0
   119fa:	0e 94 0a 2a 	call	0x5414	; 0x5414 <uart_keyhit>
   119fe:	89 2b       	or	r24, r25
            break;

        ch = gpib_read_byte(detail);
   11a00:	31 f4       	brne	.+12     	; 0x11a0e <gpib_trace_task+0xd0>
   11a02:	ce 01       	movw	r24, r28
        if(!detail)
   11a04:	57 dc       	rcall	.-1874   	; 0x112b4 <gpib_read_byte>
   11a06:	20 97       	sbiw	r28, 0x00	; 0
            gpib_decode(ch);
   11a08:	b9 f7       	brne	.-18     	; 0x119f8 <gpib_trace_task+0xba>
   11a0a:	5a dd       	rcall	.-1356   	; 0x114c0 <gpib_decode>
   11a0c:	f5 cf       	rjmp	.-22     	; 0x119f8 <gpib_trace_task+0xba>
    }

    printf("Done\n");
   11a0e:	87 ef       	ldi	r24, 0xF7	; 247
   11a10:	93 e1       	ldi	r25, 0x13	; 19
   11a12:	a0 e0       	ldi	r26, 0x00	; 0
   11a14:	ed b7       	in	r30, 0x3d	; 61
   11a16:	fe b7       	in	r31, 0x3e	; 62
   11a18:	81 83       	std	Z+1, r24	; 0x01
   11a1a:	92 83       	std	Z+2, r25	; 0x02
   11a1c:	a3 83       	std	Z+3, r26	; 0x03
   11a1e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    if(gpib_log_fp)
   11a22:	80 91 56 19 	lds	r24, 0x1956	; 0x801956 <gpib_log_fp>
   11a26:	90 91 57 19 	lds	r25, 0x1957	; 0x801957 <gpib_log_fp+0x1>
   11a2a:	00 97       	sbiw	r24, 0x00	; 0
   11a2c:	a1 f0       	breq	.+40     	; 0x11a56 <gpib_trace_task+0x118>
    {
        fclose(gpib_log_fp);
   11a2e:	0e 94 7e 7c 	call	0xf8fc	; 0xf8fc <fclose>
        printf("Capturing Closed\n");
   11a32:	85 ee       	ldi	r24, 0xE5	; 229
   11a34:	93 e1       	ldi	r25, 0x13	; 19
   11a36:	a0 e0       	ldi	r26, 0x00	; 0
   11a38:	ed b7       	in	r30, 0x3d	; 61
   11a3a:	fe b7       	in	r31, 0x3e	; 62
   11a3c:	81 83       	std	Z+1, r24	; 0x01
   11a3e:	92 83       	std	Z+2, r25	; 0x02
   11a40:	a3 83       	std	Z+3, r26	; 0x03
   11a42:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        gpib_log_fp = stdout;
   11a46:	80 91 b7 1c 	lds	r24, 0x1CB7	; 0x801cb7 <__iob+0x2>
   11a4a:	90 91 b8 1c 	lds	r25, 0x1CB8	; 0x801cb8 <__iob+0x3>
   11a4e:	90 93 57 19 	sts	0x1957, r25	; 0x801957 <gpib_log_fp+0x1>
   11a52:	80 93 56 19 	sts	0x1956, r24	; 0x801956 <gpib_log_fp>
    }
}
   11a56:	cd b7       	in	r28, 0x3d	; 61
   11a58:	de b7       	in	r29, 0x3e	; 62
   11a5a:	25 96       	adiw	r28, 0x05	; 5
   11a5c:	e4 e0       	ldi	r30, 0x04	; 4
   11a5e:	0c 94 90 e6 	jmp	0x1cd20	; 0x1cd20 <__epilogue_restores__+0x1c>

00011a62 <gpib_error_test>:
///
/// @return  val
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{
   11a62:	ef 92       	push	r14
   11a64:	ff 92       	push	r15
   11a66:	0f 93       	push	r16
   11a68:	1f 93       	push	r17
   11a6a:	cf 93       	push	r28
   11a6c:	df 93       	push	r29
   11a6e:	00 d0       	rcall	.+0      	; 0x11a70 <gpib_error_test+0xe>
   11a70:	1f 92       	push	r1
   11a72:	7c 01       	movw	r14, r24

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11a74:	ec 01       	movw	r28, r24
   11a76:	cc 27       	eor	r28, r28
   11a78:	d0 7d       	andi	r29, 0xD0	; 208
   11a7a:	20 97       	sbiw	r28, 0x00	; 0
   11a7c:	61 f0       	breq	.+24     	; 0x11a96 <gpib_error_test+0x34>
    {
        val &= ERROR_MASK;

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11a7e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11a82:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11a86:	8d 72       	andi	r24, 0x2D	; 45
   11a88:	99 27       	eor	r25, r25
   11a8a:	87 01       	movw	r16, r14
   11a8c:	00 27       	eor	r16, r16
   11a8e:	10 71       	andi	r17, 0x10	; 16
   11a90:	89 2b       	or	r24, r25
   11a92:	59 f4       	brne	.+22     	; 0x11aaa <gpib_error_test+0x48>
   11a94:	17 c0       	rjmp	.+46     	; 0x11ac4 <gpib_error_test+0x62>
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   11a96:	80 e0       	ldi	r24, 0x00	; 0
   11a98:	0e 94 0a 2a 	call	0x5414	; 0x5414 <uart_keyhit>
   11a9c:	89 2b       	or	r24, r25
   11a9e:	79 f7       	brne	.-34     	; 0x11a7e <gpib_error_test+0x1c>
   11aa0:	0e 94 93 6e 	call	0xdd26	; 0xdd26 <mmc_ins_status>
   11aa4:	01 97       	sbiw	r24, 0x01	; 1
   11aa6:	59 f7       	brne	.-42     	; 0x11a7e <gpib_error_test+0x1c>
   11aa8:	62 c0       	rjmp	.+196    	; 0x11b6e <gpib_error_test+0x10c>

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
        {
/// Bus Clear, reseat all states, etc
            if(val & IFC_FLAG)
   11aaa:	01 15       	cp	r16, r1
   11aac:	11 05       	cpc	r17, r1
   11aae:	51 f0       	breq	.+20     	; 0x11ac4 <gpib_error_test+0x62>
                printf("<IFC>\n");
   11ab0:	8e ed       	ldi	r24, 0xDE	; 222
   11ab2:	93 e1       	ldi	r25, 0x13	; 19
   11ab4:	a0 e0       	ldi	r26, 0x00	; 0
   11ab6:	ed b7       	in	r30, 0x3d	; 61
   11ab8:	fe b7       	in	r31, 0x3e	; 62
   11aba:	81 83       	std	Z+1, r24	; 0x01
   11abc:	92 83       	std	Z+2, r25	; 0x02
   11abe:	a3 83       	std	Z+3, r26	; 0x03
   11ac0:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        }

        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11ac4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11ac8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11acc:	8d 72       	andi	r24, 0x2D	; 45
   11ace:	99 27       	eor	r25, r25
   11ad0:	89 2b       	or	r24, r25
   11ad2:	c1 f0       	breq	.+48     	; 0x11b04 <gpib_error_test+0xa2>
        {
            if(val & TIMEOUT_FLAG)
   11ad4:	f6 fe       	sbrs	r15, 6
   11ad6:	0a c0       	rjmp	.+20     	; 0x11aec <gpib_error_test+0x8a>
                printf("<TIMEOUT>\n");
   11ad8:	83 ed       	ldi	r24, 0xD3	; 211
   11ada:	93 e1       	ldi	r25, 0x13	; 19
   11adc:	a0 e0       	ldi	r26, 0x00	; 0
   11ade:	ed b7       	in	r30, 0x3d	; 61
   11ae0:	fe b7       	in	r31, 0x3e	; 62
   11ae2:	81 83       	std	Z+1, r24	; 0x01
   11ae4:	92 83       	std	Z+2, r25	; 0x02
   11ae6:	a3 83       	std	Z+3, r26	; 0x03
   11ae8:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            if(val & BUS_ERROR_FLAG)
   11aec:	d7 ff       	sbrs	r29, 7
   11aee:	0a c0       	rjmp	.+20     	; 0x11b04 <gpib_error_test+0xa2>
                printf("<BUS>\n");
   11af0:	8c ec       	ldi	r24, 0xCC	; 204
   11af2:	93 e1       	ldi	r25, 0x13	; 19
   11af4:	a0 e0       	ldi	r26, 0x00	; 0
   11af6:	ed b7       	in	r30, 0x3d	; 61
   11af8:	fe b7       	in	r31, 0x3e	; 62
   11afa:	81 83       	std	Z+1, r24	; 0x01
   11afc:	92 83       	std	Z+2, r25	; 0x02
   11afe:	a3 83       	std	Z+3, r26	; 0x03
   11b00:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        }

        if(uart_keyhit(0))
   11b04:	80 e0       	ldi	r24, 0x00	; 0
   11b06:	0e 94 0a 2a 	call	0x5414	; 0x5414 <uart_keyhit>
   11b0a:	89 2b       	or	r24, r25
   11b0c:	51 f0       	breq	.+20     	; 0x11b22 <gpib_error_test+0xc0>
            printf("<INTERRUPT>\n");
   11b0e:	8f eb       	ldi	r24, 0xBF	; 191
   11b10:	93 e1       	ldi	r25, 0x13	; 19
   11b12:	a0 e0       	ldi	r26, 0x00	; 0
   11b14:	ed b7       	in	r30, 0x3d	; 61
   11b16:	fe b7       	in	r31, 0x3e	; 62
   11b18:	81 83       	std	Z+1, r24	; 0x01
   11b1a:	92 83       	std	Z+2, r25	; 0x02
   11b1c:	a3 83       	std	Z+3, r26	; 0x03
   11b1e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

        if( mmc_ins_status() != 1 )
   11b22:	0e 94 93 6e 	call	0xdd26	; 0xdd26 <mmc_ins_status>
   11b26:	01 97       	sbiw	r24, 0x01	; 1
   11b28:	51 f0       	breq	.+20     	; 0x11b3e <gpib_error_test+0xdc>
            printf("<MEDIA MISSING>\n");
   11b2a:	8e ea       	ldi	r24, 0xAE	; 174
   11b2c:	93 e1       	ldi	r25, 0x13	; 19
   11b2e:	a0 e0       	ldi	r26, 0x00	; 0
   11b30:	ed b7       	in	r30, 0x3d	; 61
   11b32:	fe b7       	in	r31, 0x3e	; 62
   11b34:	81 83       	std	Z+1, r24	; 0x01
   11b36:	92 83       	std	Z+2, r25	; 0x02
   11b38:	a3 83       	std	Z+3, r26	; 0x03
   11b3a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

        if(val & IFC_FLAG)
   11b3e:	01 15       	cp	r16, r1
   11b40:	11 05       	cpc	r17, r1
   11b42:	09 f0       	breq	.+2      	; 0x11b46 <gpib_error_test+0xe4>
        {
            gpib_init_devices();
   11b44:	f3 de       	rcall	.-538    	; 0x1192c <gpib_init_devices>
        }

        if(uart_keyhit(0))
   11b46:	80 e0       	ldi	r24, 0x00	; 0
   11b48:	0e 94 0a 2a 	call	0x5414	; 0x5414 <uart_keyhit>
   11b4c:	89 2b       	or	r24, r25
        {
            gpib_init_devices();
   11b4e:	11 f0       	breq	.+4      	; 0x11b54 <gpib_error_test+0xf2>
   11b50:	ed de       	rcall	.-550    	; 0x1192c <gpib_init_devices>
   11b52:	0b c0       	rjmp	.+22     	; 0x11b6a <gpib_error_test+0x108>
            return(ABORT_FLAG);
        }

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
   11b54:	0e 94 93 6e 	call	0xdd26	; 0xdd26 <mmc_ins_status>
   11b58:	01 97       	sbiw	r24, 0x01	; 1
   11b5a:	39 f4       	brne	.+14     	; 0x11b6a <gpib_error_test+0x108>
        {
            return(ABORT_FLAG);
        }

// Wait for IFC free
        if(val & IFC_FLAG )
   11b5c:	01 15       	cp	r16, r1
   11b5e:	11 05       	cpc	r17, r1
   11b60:	31 f0       	breq	.+12     	; 0x11b6e <gpib_error_test+0x10c>
        {
            while(GPIB_IO_RD(IFC) == 0)
   11b62:	54 98       	cbi	0x0a, 4	; 10
   11b64:	4c 9b       	sbis	0x09, 4	; 9
   11b66:	fd cf       	rjmp	.-6      	; 0x11b62 <gpib_error_test+0x100>
   11b68:	02 c0       	rjmp	.+4      	; 0x11b6e <gpib_error_test+0x10c>

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
        {
            return(ABORT_FLAG);
   11b6a:	c1 e0       	ldi	r28, 0x01	; 1
   11b6c:	d0 e0       	ldi	r29, 0x00	; 0
                ;
        }
        return(val);
    }
    return(0);
}
   11b6e:	ce 01       	movw	r24, r28
   11b70:	cd b7       	in	r28, 0x3d	; 61
   11b72:	de b7       	in	r29, 0x3e	; 62
   11b74:	23 96       	adiw	r28, 0x03	; 3
   11b76:	e6 e0       	ldi	r30, 0x06	; 6
   11b78:	0c 94 8e e6 	jmp	0x1cd1c	; 0x1cd1c <__epilogue_restores__+0x18>

00011b7c <GPIB_COMMANDS>:
///
/// @return GPIB status from emulator command.
/// @return 0 if no emulator command processed.

uint16_t GPIB_COMMANDS(uint16_t val, uint8_t unread)
{
   11b7c:	1f 93       	push	r17
   11b7e:	cf 93       	push	r28
   11b80:	df 93       	push	r29
   11b82:	ec 01       	movw	r28, r24
   11b84:	16 2f       	mov	r17, r22
    uint16_t status;

///@brief talking ?
    if(talking != UNT)
   11b86:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   11b8a:	8f 35       	cpi	r24, 0x5F	; 95
   11b8c:	91 f0       	breq	.+36     	; 0x11bb2 <GPIB_COMMANDS+0x36>
    {

#ifdef AMIGO
        if ( AMIGO_is_MLA(listening) )
   11b8e:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   11b92:	90 e0       	ldi	r25, 0x00	; 0
   11b94:	71 de       	rcall	.-798    	; 0x11878 <AMIGO_is_MLA>
   11b96:	89 2b       	or	r24, r25
   11b98:	c9 f4       	brne	.+50     	; 0x11bcc <GPIB_COMMANDS+0x50>
            secondary = 0;
            return(status);
        }
#endif                                    // ifdef AMIGO

        if ( SS80_is_MLA(listening) )
   11b9a:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   11b9e:	90 e0       	ldi	r25, 0x00	; 0
   11ba0:	35 de       	rcall	.-918    	; 0x1180c <SS80_is_MLA>
   11ba2:	89 2b       	or	r24, r25
   11ba4:	11 f5       	brne	.+68     	; 0x11bea <GPIB_COMMANDS+0x6e>
            status = SS80_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MLA(listening) )
   11ba6:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   11baa:	90 e0       	ldi	r25, 0x00	; 0
   11bac:	9b de       	rcall	.-714    	; 0x118e4 <PRINTER_is_MLA>
   11bae:	89 2b       	or	r24, r25
   11bb0:	59 f5       	brne	.+86     	; 0x11c08 <GPIB_COMMANDS+0x8c>
            return(status);
        }
    }

///@brief listening ?
    if(listening != UNL)
   11bb2:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   11bb6:	8f 33       	cpi	r24, 0x3F	; 63
   11bb8:	19 f4       	brne	.+6      	; 0x11bc0 <GPIB_COMMANDS+0x44>
            status = PRINTER_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }
    }
    return(0);
   11bba:	80 e0       	ldi	r24, 0x00	; 0
   11bbc:	90 e0       	ldi	r25, 0x00	; 0
   11bbe:	2e c0       	rjmp	.+92     	; 0x11c1c <GPIB_COMMANDS+0xa0>

///@brief listening ?
    if(listening != UNL)
    {
#ifdef AMIGO
        if ( AMIGO_is_MTA(talking) )
   11bc0:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   11bc4:	90 e0       	ldi	r25, 0x00	; 0
   11bc6:	6a de       	rcall	.-812    	; 0x1189c <AMIGO_is_MTA>
   11bc8:	89 2b       	or	r24, r25
   11bca:	49 f0       	breq	.+18     	; 0x11bde <GPIB_COMMANDS+0x62>
        {
            if(unread)
   11bcc:	11 23       	and	r17, r17
   11bce:	11 f0       	breq	.+4      	; 0x11bd4 <GPIB_COMMANDS+0x58>
                gpib_unread(val);
   11bd0:	ce 01       	movw	r24, r28
   11bd2:	58 d8       	rcall	.-3920   	; 0x10c84 <gpib_unread>
   11bd4:	80 91 e5 1e 	lds	r24, 0x1EE5	; 0x801ee5 <secondary>
            status = AMIGO_COMMANDS(secondary);
   11bd8:	0e 94 11 bd 	call	0x17a22	; 0x17a22 <AMIGO_COMMANDS>
   11bdc:	1d c0       	rjmp	.+58     	; 0x11c18 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }
#endif

        if ( SS80_is_MTA(talking) )
   11bde:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   11be2:	90 e0       	ldi	r25, 0x00	; 0
   11be4:	25 de       	rcall	.-950    	; 0x11830 <SS80_is_MTA>
   11be6:	89 2b       	or	r24, r25
   11be8:	49 f0       	breq	.+18     	; 0x11bfc <GPIB_COMMANDS+0x80>
        {
            if(unread)
   11bea:	11 23       	and	r17, r17
   11bec:	11 f0       	breq	.+4      	; 0x11bf2 <GPIB_COMMANDS+0x76>
                gpib_unread(val);
   11bee:	ce 01       	movw	r24, r28
   11bf0:	49 d8       	rcall	.-3950   	; 0x10c84 <gpib_unread>
   11bf2:	80 91 e5 1e 	lds	r24, 0x1EE5	; 0x801ee5 <secondary>
            status = SS80_COMMANDS(secondary);
   11bf6:	0e 94 37 b1 	call	0x1626e	; 0x1626e <SS80_COMMANDS>
   11bfa:	0e c0       	rjmp	.+28     	; 0x11c18 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MTA(talking) )
   11bfc:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   11c00:	90 e0       	ldi	r25, 0x00	; 0
   11c02:	82 de       	rcall	.-764    	; 0x11908 <PRINTER_is_MTA>
   11c04:	89 2b       	or	r24, r25
   11c06:	c9 f2       	breq	.-78     	; 0x11bba <GPIB_COMMANDS+0x3e>
        {
            if(unread)
   11c08:	11 23       	and	r17, r17
   11c0a:	11 f0       	breq	.+4      	; 0x11c10 <GPIB_COMMANDS+0x94>
                gpib_unread(val);
   11c0c:	ce 01       	movw	r24, r28
   11c0e:	3a d8       	rcall	.-3980   	; 0x10c84 <gpib_unread>
   11c10:	80 91 e5 1e 	lds	r24, 0x1EE5	; 0x801ee5 <secondary>
            status = PRINTER_COMMANDS(secondary);
   11c14:	0e 94 8a bf 	call	0x17f14	; 0x17f14 <PRINTER_COMMANDS>
   11c18:	10 92 e5 1e 	sts	0x1EE5, r1	; 0x801ee5 <secondary>
            secondary = 0;
   11c1c:	df 91       	pop	r29
            return(status);
        }
    }
    return(0);
}
   11c1e:	cf 91       	pop	r28
   11c20:	1f 91       	pop	r17
   11c22:	08 95       	ret

00011c24 <Send_Identify>:
   11c24:	cf 92       	push	r12
///
/// @return  0 on GPIB error returns error flags
/// @see gpib.h ERROR_MASK for a full list.

int Send_Identify(uint8_t ch, uint16_t ID)
{
   11c26:	df 92       	push	r13
   11c28:	ff 92       	push	r15
   11c2a:	0f 93       	push	r16
   11c2c:	1f 93       	push	r17
   11c2e:	cf 93       	push	r28
   11c30:	df 93       	push	r29
   11c32:	cd b7       	in	r28, 0x3d	; 61
   11c34:	de b7       	in	r29, 0x3e	; 62
   11c36:	2b 97       	sbiw	r28, 0x0b	; 11
   11c38:	0f b6       	in	r0, 0x3f	; 63
   11c3a:	f8 94       	cli
   11c3c:	de bf       	out	0x3e, r29	; 62
   11c3e:	0f be       	out	0x3f, r0	; 63
   11c40:	cd bf       	out	0x3d, r28	; 61
   11c42:	f8 2e       	mov	r15, r24
   11c44:	6b 01       	movw	r12, r22
    uint16_t status = EOI_FLAG;
   11c46:	80 e0       	ldi	r24, 0x00	; 0
   11c48:	91 e0       	ldi	r25, 0x01	; 1
   11c4a:	9b 87       	std	Y+11, r25	; 0x0b
   11c4c:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t tmp[2];

    V2B_MSB(tmp,0,2,ID);
   11c4e:	8b 01       	movw	r16, r22
   11c50:	20 e0       	ldi	r18, 0x00	; 0
   11c52:	30 e0       	ldi	r19, 0x00	; 0
   11c54:	42 e0       	ldi	r20, 0x02	; 2
   11c56:	50 e0       	ldi	r21, 0x00	; 0
   11c58:	60 e0       	ldi	r22, 0x00	; 0
   11c5a:	70 e0       	ldi	r23, 0x00	; 0
   11c5c:	ce 01       	movw	r24, r28
   11c5e:	08 96       	adiw	r24, 0x08	; 8
   11c60:	0e 94 c5 bf 	call	0x17f8a	; 0x17f8a <V2B_MSB>
    if(gpib_write_str(tmp,2, &status) != 2)
   11c64:	ae 01       	movw	r20, r28
   11c66:	46 5f       	subi	r20, 0xF6	; 246
   11c68:	5f 4f       	sbci	r21, 0xFF	; 255
   11c6a:	62 e0       	ldi	r22, 0x02	; 2
   11c6c:	70 e0       	ldi	r23, 0x00	; 0
   11c6e:	ce 01       	movw	r24, r28
   11c70:	08 96       	adiw	r24, 0x08	; 8
   11c72:	cc dc       	rcall	.-1640   	; 0x1160c <gpib_write_str>
   11c74:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11c78:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11c7c:	02 97       	sbiw	r24, 0x02	; 2
   11c7e:	79 f0       	breq	.+30     	; 0x11c9e <Send_Identify+0x7a>
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11c80:	25 72       	andi	r18, 0x25	; 37
   11c82:	33 27       	eor	r19, r19
   11c84:	23 2b       	or	r18, r19
   11c86:	f9 f0       	breq	.+62     	; 0x11cc6 <Send_Identify+0xa2>
            printf("[IDENT Unit:%02XH=%04XH FAILED]\n",
   11c88:	ed b7       	in	r30, 0x3d	; 61
   11c8a:	fe b7       	in	r31, 0x3e	; 62
   11c8c:	d7 82       	std	Z+7, r13	; 0x07
   11c8e:	c6 82       	std	Z+6, r12	; 0x06
   11c90:	8f 2d       	mov	r24, r15
   11c92:	90 e0       	ldi	r25, 0x00	; 0
   11c94:	95 83       	std	Z+5, r25	; 0x05
   11c96:	84 83       	std	Z+4, r24	; 0x04
   11c98:	8d e8       	ldi	r24, 0x8D	; 141
   11c9a:	93 e1       	ldi	r25, 0x13	; 19
   11c9c:	0e c0       	rjmp	.+28     	; 0x11cba <Send_Identify+0x96>
                (int)ch,(int)ID);
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11c9e:	24 72       	andi	r18, 0x24	; 36
   11ca0:	33 27       	eor	r19, r19
   11ca2:	23 2b       	or	r18, r19
   11ca4:	81 f0       	breq	.+32     	; 0x11cc6 <Send_Identify+0xa2>
        printf("[IDENT Unit:%02XH=%04XH]\n", (int)ch,(int)ID);
   11ca6:	ed b7       	in	r30, 0x3d	; 61
   11ca8:	fe b7       	in	r31, 0x3e	; 62
   11caa:	d7 82       	std	Z+7, r13	; 0x07
   11cac:	c6 82       	std	Z+6, r12	; 0x06
   11cae:	8f 2d       	mov	r24, r15
   11cb0:	90 e0       	ldi	r25, 0x00	; 0
   11cb2:	95 83       	std	Z+5, r25	; 0x05
   11cb4:	84 83       	std	Z+4, r24	; 0x04
   11cb6:	83 e7       	ldi	r24, 0x73	; 115
   11cb8:	93 e1       	ldi	r25, 0x13	; 19
   11cba:	a0 e0       	ldi	r26, 0x00	; 0
   11cbc:	81 83       	std	Z+1, r24	; 0x01
   11cbe:	92 83       	std	Z+2, r25	; 0x02
   11cc0:	a3 83       	std	Z+3, r26	; 0x03
   11cc2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
    return (status & ERROR_MASK);
   11cc6:	8a 85       	ldd	r24, Y+10	; 0x0a
   11cc8:	9b 85       	ldd	r25, Y+11	; 0x0b
   11cca:	88 27       	eor	r24, r24
   11ccc:	90 7d       	andi	r25, 0xD0	; 208
}
   11cce:	2b 96       	adiw	r28, 0x0b	; 11
   11cd0:	0f b6       	in	r0, 0x3f	; 63
   11cd2:	f8 94       	cli
   11cd4:	de bf       	out	0x3e, r29	; 62
   11cd6:	0f be       	out	0x3f, r0	; 63
   11cd8:	cd bf       	out	0x3d, r28	; 61
   11cda:	df 91       	pop	r29
   11cdc:	cf 91       	pop	r28
   11cde:	1f 91       	pop	r17
   11ce0:	0f 91       	pop	r16
   11ce2:	ff 90       	pop	r15
   11ce4:	df 90       	pop	r13
   11ce6:	cf 90       	pop	r12
   11ce8:	08 95       	ret

00011cea <GPIB>:
/// @return  0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list.

int GPIB(uint8_t ch)
{
   11cea:	00 d0       	rcall	.+0      	; 0x11cec <GPIB+0x2>
   11cec:	00 d0       	rcall	.+0      	; 0x11cee <GPIB+0x4>
   11cee:	1f 92       	push	r1
   11cf0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11cf4:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
///@brief Parallel Poll Configure
///TODO
    if(ch == PPC)
   11cf8:	85 30       	cpi	r24, 0x05	; 5
   11cfa:	89 f4       	brne	.+34     	; 0x11d1e <GPIB+0x34>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11cfc:	27 71       	andi	r18, 0x17	; 23
   11cfe:	33 27       	eor	r19, r19
   11d00:	23 2b       	or	r18, r19
   11d02:	51 f0       	breq	.+20     	; 0x11d18 <GPIB+0x2e>
            printf("[PPC unsupported TODO]\n");
   11d04:	8b e5       	ldi	r24, 0x5B	; 91
   11d06:	93 e1       	ldi	r25, 0x13	; 19
   11d08:	a0 e0       	ldi	r26, 0x00	; 0
   11d0a:	ed b7       	in	r30, 0x3d	; 61
   11d0c:	fe b7       	in	r31, 0x3e	; 62
   11d0e:	81 83       	std	Z+1, r24	; 0x01
   11d10:	92 83       	std	Z+2, r25	; 0x02
   11d12:	a3 83       	std	Z+3, r26	; 0x03
   11d14:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        spoll = 0;
   11d18:	10 92 e1 1e 	sts	0x1EE1, r1	; 0x801ee1 <spoll>
   11d1c:	a0 c0       	rjmp	.+320    	; 0x11e5e <GPIB+0x174>
        return 0;
    }
///@brief Parallel Poll Unconfigure
///TODO
    if(ch == PPU)
   11d1e:	85 31       	cpi	r24, 0x15	; 21
   11d20:	39 f4       	brne	.+14     	; 0x11d30 <GPIB+0x46>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11d22:	27 71       	andi	r18, 0x17	; 23
   11d24:	33 27       	eor	r19, r19
   11d26:	23 2b       	or	r18, r19
   11d28:	b9 f3       	breq	.-18     	; 0x11d18 <GPIB+0x2e>
            printf("[PPU unsupported TODO]\n");
   11d2a:	83 e4       	ldi	r24, 0x43	; 67
   11d2c:	93 e1       	ldi	r25, 0x13	; 19
   11d2e:	ec cf       	rjmp	.-40     	; 0x11d08 <GPIB+0x1e>
    }

/// @todo FIXME
#if defined(SPOLL)
///@brief Serial Poll Enable
    if(ch == SPE)
   11d30:	88 31       	cpi	r24, 0x18	; 24
   11d32:	d9 f4       	brne	.+54     	; 0x11d6a <GPIB+0x80>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11d34:	26 70       	andi	r18, 0x06	; 6
   11d36:	33 27       	eor	r19, r19
   11d38:	23 2b       	or	r18, r19
   11d3a:	51 f0       	breq	.+20     	; 0x11d50 <GPIB+0x66>
            printf("[SPE]\n");
   11d3c:	8c e3       	ldi	r24, 0x3C	; 60
   11d3e:	93 e1       	ldi	r25, 0x13	; 19
   11d40:	a0 e0       	ldi	r26, 0x00	; 0
   11d42:	ed b7       	in	r30, 0x3d	; 61
   11d44:	fe b7       	in	r31, 0x3e	; 62
   11d46:	81 83       	std	Z+1, r24	; 0x01
   11d48:	92 83       	std	Z+2, r25	; 0x02
   11d4a:	a3 83       	std	Z+3, r26	; 0x03
   11d4c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
        spoll = 1;
   11d50:	81 e0       	ldi	r24, 0x01	; 1
   11d52:	80 93 e1 1e 	sts	0x1EE1, r24	; 0x801ee1 <spoll>
        if(SS80_is_MTA(talking))
   11d56:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   11d5a:	90 e0       	ldi	r25, 0x00	; 0
   11d5c:	69 dd       	rcall	.-1326   	; 0x11830 <SS80_is_MTA>
   11d5e:	89 2b       	or	r24, r25
   11d60:	09 f4       	brne	.+2      	; 0x11d64 <GPIB+0x7a>
   11d62:	7d c0       	rjmp	.+250    	; 0x11e5e <GPIB+0x174>
        {
            return( SS80_Report() );
   11d64:	0e 94 ea ac 	call	0x159d4	; 0x159d4 <SS80_Report>
   11d68:	7c c0       	rjmp	.+248    	; 0x11e62 <GPIB+0x178>
        }
        return 0;
    }

///@brief Serial Poll Disable
    if(ch == SPD)
   11d6a:	89 31       	cpi	r24, 0x19	; 25
   11d6c:	39 f4       	brne	.+14     	; 0x11d7c <GPIB+0x92>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11d6e:	26 70       	andi	r18, 0x06	; 6
   11d70:	33 27       	eor	r19, r19
   11d72:	23 2b       	or	r18, r19
   11d74:	89 f2       	breq	.-94     	; 0x11d18 <GPIB+0x2e>
            printf("[SPD]\n");
   11d76:	85 e3       	ldi	r24, 0x35	; 53
   11d78:	93 e1       	ldi	r25, 0x13	; 19
   11d7a:	c6 cf       	rjmp	.-116    	; 0x11d08 <GPIB+0x1e>
        return 0;
    }
#endif                                        // #if defined(SPOLL)

///@brief Selected Device Clear
    if(ch == SDC )
   11d7c:	84 30       	cpi	r24, 0x04	; 4
   11d7e:	09 f0       	breq	.+2      	; 0x11d82 <GPIB+0x98>
   11d80:	48 c0       	rjmp	.+144    	; 0x11e12 <GPIB+0x128>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11d82:	22 ff       	sbrs	r18, 2
   11d84:	0a c0       	rjmp	.+20     	; 0x11d9a <GPIB+0xb0>
            printf("[SDC]\n");
   11d86:	8e e2       	ldi	r24, 0x2E	; 46
   11d88:	93 e1       	ldi	r25, 0x13	; 19
   11d8a:	a0 e0       	ldi	r26, 0x00	; 0
   11d8c:	ed b7       	in	r30, 0x3d	; 61
   11d8e:	fe b7       	in	r31, 0x3e	; 62
   11d90:	81 83       	std	Z+1, r24	; 0x01
   11d92:	92 83       	std	Z+2, r25	; 0x02
   11d94:	a3 83       	std	Z+3, r26	; 0x03
   11d96:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
        if(SS80_is_MLA(listening))
   11d9a:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   11d9e:	90 e0       	ldi	r25, 0x00	; 0
   11da0:	35 dd       	rcall	.-1430   	; 0x1180c <SS80_is_MLA>
   11da2:	89 2b       	or	r24, r25
   11da4:	d9 f0       	breq	.+54     	; 0x11ddc <GPIB+0xf2>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
///  CS80 3-4
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11da6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11daa:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11dae:	84 72       	andi	r24, 0x24	; 36
   11db0:	99 27       	eor	r25, r25
   11db2:	89 2b       	or	r24, r25
   11db4:	51 f0       	breq	.+20     	; 0x11dca <GPIB+0xe0>
                printf("[SDC SS80]\n");
   11db6:	82 e2       	ldi	r24, 0x22	; 34
   11db8:	93 e1       	ldi	r25, 0x13	; 19
   11dba:	a0 e0       	ldi	r26, 0x00	; 0
   11dbc:	ed b7       	in	r30, 0x3d	; 61
   11dbe:	fe b7       	in	r31, 0x3e	; 62
   11dc0:	81 83       	std	Z+1, r24	; 0x01
   11dc2:	92 83       	std	Z+2, r25	; 0x02
   11dc4:	a3 83       	std	Z+3, r26	; 0x03
   11dc6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
            return(SS80_Selected_Device_Clear(SS80s->unitNO) );
   11dca:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   11dce:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   11dd2:	85 81       	ldd	r24, Z+5	; 0x05
   11dd4:	90 e0       	ldi	r25, 0x00	; 0
   11dd6:	0e 94 bc ad 	call	0x15b78	; 0x15b78 <SS80_Selected_Device_Clear>
   11dda:	43 c0       	rjmp	.+134    	; 0x11e62 <GPIB+0x178>
        }

#ifdef AMIGO
        if(AMIGO_is_MLA(listening))
   11ddc:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   11de0:	90 e0       	ldi	r25, 0x00	; 0
   11de2:	4a dd       	rcall	.-1388   	; 0x11878 <AMIGO_is_MLA>
   11de4:	89 2b       	or	r24, r25
   11de6:	d9 f1       	breq	.+118    	; 0x11e5e <GPIB+0x174>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11de8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11dec:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11df0:	84 72       	andi	r24, 0x24	; 36
   11df2:	99 27       	eor	r25, r25
   11df4:	89 2b       	or	r24, r25
   11df6:	51 f0       	breq	.+20     	; 0x11e0c <GPIB+0x122>
                printf("[SDC AMIGO]\n");
   11df8:	85 e1       	ldi	r24, 0x15	; 21
   11dfa:	93 e1       	ldi	r25, 0x13	; 19
   11dfc:	a0 e0       	ldi	r26, 0x00	; 0
   11dfe:	ed b7       	in	r30, 0x3d	; 61
   11e00:	fe b7       	in	r31, 0x3e	; 62
   11e02:	81 83       	std	Z+1, r24	; 0x01
   11e04:	92 83       	std	Z+2, r25	; 0x02
   11e06:	a3 83       	std	Z+3, r26	; 0x03
   11e08:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
            return( amigo_cmd_clear() );
   11e0c:	0e 94 f7 b7 	call	0x16fee	; 0x16fee <amigo_cmd_clear>
   11e10:	28 c0       	rjmp	.+80     	; 0x11e62 <GPIB+0x178>
/// @todo FIXME
        return( 0 );
    }

///@brief   (Universal) Device Clear
    if(ch == DCL )
   11e12:	84 31       	cpi	r24, 0x14	; 20
   11e14:	99 f4       	brne	.+38     	; 0x11e3c <GPIB+0x152>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11e16:	22 ff       	sbrs	r18, 2
   11e18:	0a c0       	rjmp	.+20     	; 0x11e2e <GPIB+0x144>
            printf("[DCL]\n");
   11e1a:	8e e0       	ldi	r24, 0x0E	; 14
   11e1c:	93 e1       	ldi	r25, 0x13	; 19
   11e1e:	a0 e0       	ldi	r26, 0x00	; 0
   11e20:	ed b7       	in	r30, 0x3d	; 61
   11e22:	fe b7       	in	r31, 0x3e	; 62
   11e24:	81 83       	std	Z+1, r24	; 0x01
   11e26:	92 83       	std	Z+2, r25	; 0x02
   11e28:	a3 83       	std	Z+3, r26	; 0x03
   11e2a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
        SS80_Universal_Device_Clear();
   11e2e:	0e 94 ae ad 	call	0x15b5c	; 0x15b5c <SS80_Universal_Device_Clear>

#ifdef AMIGO
        amigo_cmd_clear();
   11e32:	0e 94 f7 b7 	call	0x16fee	; 0x16fee <amigo_cmd_clear>
#endif

/// @todo Fixme
        printer_close();
   11e36:	0e 94 16 be 	call	0x17c2c	; 0x17c2c <printer_close>
   11e3a:	11 c0       	rjmp	.+34     	; 0x11e5e <GPIB+0x174>
        return( 0 );
    }

    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11e3c:	25 71       	andi	r18, 0x15	; 21
   11e3e:	33 27       	eor	r19, r19
   11e40:	23 2b       	or	r18, r19
   11e42:	69 f0       	breq	.+26     	; 0x11e5e <GPIB+0x174>
        printf("[GPIB (%02XH) not defined TODO]\n", 0xff & ch);
   11e44:	90 e0       	ldi	r25, 0x00	; 0
   11e46:	ed b7       	in	r30, 0x3d	; 61
   11e48:	fe b7       	in	r31, 0x3e	; 62
   11e4a:	95 83       	std	Z+5, r25	; 0x05
   11e4c:	84 83       	std	Z+4, r24	; 0x04
   11e4e:	8d ee       	ldi	r24, 0xED	; 237
   11e50:	92 e1       	ldi	r25, 0x12	; 18
   11e52:	a0 e0       	ldi	r26, 0x00	; 0
   11e54:	81 83       	std	Z+1, r24	; 0x01
   11e56:	92 83       	std	Z+2, r25	; 0x02
   11e58:	a3 83       	std	Z+3, r26	; 0x03
   11e5a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    return(0);
   11e5e:	80 e0       	ldi	r24, 0x00	; 0
   11e60:	90 e0       	ldi	r25, 0x00	; 0
}
   11e62:	0f 90       	pop	r0
   11e64:	0f 90       	pop	r0
   11e66:	0f 90       	pop	r0
   11e68:	0f 90       	pop	r0
   11e6a:	0f 90       	pop	r0
   11e6c:	08 95       	ret

00011e6e <GPIB_TALK>:
/// @param[in] ch 8 bit talk command
///
/// @return  0

int GPIB_TALK(uint8_t ch)
{
   11e6e:	cf 93       	push	r28
   11e70:	df 93       	push	r29
   11e72:	00 d0       	rcall	.+0      	; 0x11e74 <GPIB_TALK+0x6>
   11e74:	00 d0       	rcall	.+0      	; 0x11e76 <GPIB_TALK+0x8>
   11e76:	1f 92       	push	r1

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///  save talking state
    talking_last = talking;
   11e78:	90 91 e4 1e 	lds	r25, 0x1EE4	; 0x801ee4 <talking>
   11e7c:	90 93 e7 1e 	sts	0x1EE7, r25	; 0x801ee7 <talking_last>
    talking = ch;
   11e80:	80 93 e4 1e 	sts	0x1EE4, r24	; 0x801ee4 <talking>

    talk_cleanup();

///@brief  Universal Untalk
    if(ch == UNT)
   11e84:	8f 35       	cpi	r24, 0x5F	; 95
   11e86:	79 f4       	brne	.+30     	; 0x11ea6 <GPIB_TALK+0x38>
    {
//FIXME talking = 0 ????
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11e88:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11e8c:	82 ff       	sbrs	r24, 2
   11e8e:	7f c0       	rjmp	.+254    	; 0x11f8e <GPIB_TALK+0x120>
            printf("[UNT]\n");
   11e90:	8a e9       	ldi	r24, 0x9A	; 154
   11e92:	92 e1       	ldi	r25, 0x12	; 18
   11e94:	a0 e0       	ldi	r26, 0x00	; 0
   11e96:	ed b7       	in	r30, 0x3d	; 61
   11e98:	fe b7       	in	r31, 0x3e	; 62
   11e9a:	81 83       	std	Z+1, r24	; 0x01
   11e9c:	92 83       	std	Z+2, r25	; 0x02
   11e9e:	a3 83       	std	Z+3, r26	; 0x03
   11ea0:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   11ea4:	74 c0       	rjmp	.+232    	; 0x11f8e <GPIB_TALK+0x120>
#endif
        return(0);
    }

    if(SS80_is_MTA(ch))
   11ea6:	c8 2f       	mov	r28, r24
   11ea8:	d0 e0       	ldi	r29, 0x00	; 0
   11eaa:	ce 01       	movw	r24, r28
   11eac:	c1 dc       	rcall	.-1662   	; 0x11830 <SS80_is_MTA>
   11eae:	89 2b       	or	r24, r25
   11eb0:	e1 f0       	breq	.+56     	; 0x11eea <GPIB_TALK+0x7c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11eb2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11eb6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11eba:	84 72       	andi	r24, 0x24	; 36
   11ebc:	99 27       	eor	r25, r25
   11ebe:	89 2b       	or	r24, r25
   11ec0:	61 f0       	breq	.+24     	; 0x11eda <GPIB_TALK+0x6c>
            printf("[TA %02XH SS80]\n", 0xff & ch);
   11ec2:	ed b7       	in	r30, 0x3d	; 61
   11ec4:	fe b7       	in	r31, 0x3e	; 62
   11ec6:	d5 83       	std	Z+5, r29	; 0x05
   11ec8:	c4 83       	std	Z+4, r28	; 0x04
   11eca:	89 e8       	ldi	r24, 0x89	; 137
   11ecc:	92 e1       	ldi	r25, 0x12	; 18
   11ece:	a0 e0       	ldi	r26, 0x00	; 0
   11ed0:	81 83       	std	Z+1, r24	; 0x01
   11ed2:	92 83       	std	Z+2, r25	; 0x02
   11ed4:	a3 83       	std	Z+3, r26	; 0x03
   11ed6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif

        if (spoll)
   11eda:	80 91 e1 1e 	lds	r24, 0x1EE1	; 0x801ee1 <spoll>
   11ede:	88 23       	and	r24, r24
   11ee0:	09 f4       	brne	.+2      	; 0x11ee4 <GPIB_TALK+0x76>
   11ee2:	55 c0       	rjmp	.+170    	; 0x11f8e <GPIB_TALK+0x120>
        {
            SS80_Report();
   11ee4:	0e 94 ea ac 	call	0x159d4	; 0x159d4 <SS80_Report>
   11ee8:	52 c0       	rjmp	.+164    	; 0x11f8e <GPIB_TALK+0x120>
        }
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MTA(ch))
   11eea:	ce 01       	movw	r24, r28
   11eec:	d7 dc       	rcall	.-1618   	; 0x1189c <AMIGO_is_MTA>
   11eee:	89 2b       	or	r24, r25
   11ef0:	81 f0       	breq	.+32     	; 0x11f12 <GPIB_TALK+0xa4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11ef2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11ef6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11efa:	84 72       	andi	r24, 0x24	; 36
   11efc:	99 27       	eor	r25, r25
   11efe:	89 2b       	or	r24, r25
   11f00:	09 f4       	brne	.+2      	; 0x11f04 <GPIB_TALK+0x96>
   11f02:	45 c0       	rjmp	.+138    	; 0x11f8e <GPIB_TALK+0x120>
            printf("[TA %02XH AMIGO]\n", 0xff & ch);
   11f04:	ed b7       	in	r30, 0x3d	; 61
   11f06:	fe b7       	in	r31, 0x3e	; 62
   11f08:	d5 83       	std	Z+5, r29	; 0x05
   11f0a:	c4 83       	std	Z+4, r28	; 0x04
   11f0c:	87 e7       	ldi	r24, 0x77	; 119
   11f0e:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(PRINTER_is_MTA(ch))
   11f10:	38 c0       	rjmp	.+112    	; 0x11f82 <GPIB_TALK+0x114>
   11f12:	ce 01       	movw	r24, r28
   11f14:	f9 dc       	rcall	.-1550   	; 0x11908 <PRINTER_is_MTA>
   11f16:	89 2b       	or	r24, r25
   11f18:	79 f0       	breq	.+30     	; 0x11f38 <GPIB_TALK+0xca>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f1a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11f1e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11f22:	84 72       	andi	r24, 0x24	; 36
   11f24:	99 27       	eor	r25, r25
   11f26:	89 2b       	or	r24, r25
   11f28:	91 f1       	breq	.+100    	; 0x11f8e <GPIB_TALK+0x120>
            printf("[TA %02XH PRINTER]\n", 0xff & ch);
   11f2a:	ed b7       	in	r30, 0x3d	; 61
   11f2c:	fe b7       	in	r31, 0x3e	; 62
   11f2e:	d5 83       	std	Z+5, r29	; 0x05
   11f30:	c4 83       	std	Z+4, r28	; 0x04
   11f32:	83 e6       	ldi	r24, 0x63	; 99
   11f34:	92 e1       	ldi	r25, 0x12	; 18
   11f36:	25 c0       	rjmp	.+74     	; 0x11f82 <GPIB_TALK+0x114>
#endif
        return(0);
    }

    if(PRINTER_is_MLA(listening))
   11f38:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   11f3c:	90 e0       	ldi	r25, 0x00	; 0
   11f3e:	d2 dc       	rcall	.-1628   	; 0x118e4 <PRINTER_is_MLA>
   11f40:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11f44:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11f48:	89 2b       	or	r24, r25
   11f4a:	99 f0       	breq	.+38     	; 0x11f72 <GPIB_TALK+0x104>
    {
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11f4c:	24 72       	andi	r18, 0x24	; 36
   11f4e:	33 27       	eor	r19, r19
   11f50:	23 2b       	or	r18, r19
   11f52:	51 f0       	breq	.+20     	; 0x11f68 <GPIB_TALK+0xfa>
            printf("[PRINTER OPEN]\n");
   11f54:	83 e5       	ldi	r24, 0x53	; 83
   11f56:	92 e1       	ldi	r25, 0x12	; 18
   11f58:	a0 e0       	ldi	r26, 0x00	; 0
   11f5a:	ed b7       	in	r30, 0x3d	; 61
   11f5c:	fe b7       	in	r31, 0x3e	; 62
   11f5e:	81 83       	std	Z+1, r24	; 0x01
   11f60:	92 83       	std	Z+2, r25	; 0x02
   11f62:	a3 83       	std	Z+3, r26	; 0x03
   11f64:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        printer_open(NULL);
   11f68:	80 e0       	ldi	r24, 0x00	; 0
   11f6a:	90 e0       	ldi	r25, 0x00	; 0
   11f6c:	0e 94 6e be 	call	0x17cdc	; 0x17cdc <printer_open>
   11f70:	0e c0       	rjmp	.+28     	; 0x11f8e <GPIB_TALK+0x120>
        return(0);
    }

#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11f72:	22 ff       	sbrs	r18, 2
   11f74:	0c c0       	rjmp	.+24     	; 0x11f8e <GPIB_TALK+0x120>
        printf("[TA %02XH]\n", 0xff & ch);
   11f76:	ed b7       	in	r30, 0x3d	; 61
   11f78:	fe b7       	in	r31, 0x3e	; 62
   11f7a:	d5 83       	std	Z+5, r29	; 0x05
   11f7c:	c4 83       	std	Z+4, r28	; 0x04
   11f7e:	87 e4       	ldi	r24, 0x47	; 71
   11f80:	92 e1       	ldi	r25, 0x12	; 18
   11f82:	a0 e0       	ldi	r26, 0x00	; 0
   11f84:	81 83       	std	Z+1, r24	; 0x01
   11f86:	92 83       	std	Z+2, r25	; 0x02
   11f88:	a3 83       	std	Z+3, r26	; 0x03
   11f8a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
    return(0);
}                                                 // Talk Address primary address group
   11f8e:	80 e0       	ldi	r24, 0x00	; 0
   11f90:	90 e0       	ldi	r25, 0x00	; 0
   11f92:	cd b7       	in	r28, 0x3d	; 61
   11f94:	de b7       	in	r29, 0x3e	; 62
   11f96:	25 96       	adiw	r28, 0x05	; 5
   11f98:	e2 e0       	ldi	r30, 0x02	; 2
   11f9a:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00011f9e <GPIB_SECONDARY_ADDRESS>:
///
/// @param[in] ch 8 bit secondary address.
///
/// @return  0
int GPIB_SECONDARY_ADDRESS(uint8_t ch)
{
   11f9e:	a9 e0       	ldi	r26, 0x09	; 9
   11fa0:	b0 e0       	ldi	r27, 0x00	; 0
   11fa2:	e5 ed       	ldi	r30, 0xD5	; 213
   11fa4:	ff e8       	ldi	r31, 0x8F	; 143
   11fa6:	0c 94 75 e6 	jmp	0x1ccea	; 0x1ccea <__prologue_saves__+0x1e>
   11faa:	18 2f       	mov	r17, r24
///  note: any errors will reset lastcmd
///  Universal Talk mode
///  Treat this as a Secondary Address ?
///  SS80 Ident 4-31
///  If we have our secondary address then send IDENT
    if(SS80_is_MSA(ch) )
   11fac:	c8 2f       	mov	r28, r24
   11fae:	d0 e0       	ldi	r29, 0x00	; 0
   11fb0:	ce 01       	movw	r24, r28
   11fb2:	50 dc       	rcall	.-1888   	; 0x11854 <SS80_is_MSA>
   11fb4:	89 2b       	or	r24, r25
   11fb6:	09 f1       	breq	.+66     	; 0x11ffa <GPIB_SECONDARY_ADDRESS+0x5c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11fb8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11fbc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11fc0:	84 72       	andi	r24, 0x24	; 36
   11fc2:	99 27       	eor	r25, r25
   11fc4:	89 2b       	or	r24, r25
   11fc6:	61 f0       	breq	.+24     	; 0x11fe0 <GPIB_SECONDARY_ADDRESS+0x42>
            printf("[SA %02XH SS80]\n", 0xff & ch);
   11fc8:	ed b7       	in	r30, 0x3d	; 61
   11fca:	fe b7       	in	r31, 0x3e	; 62
   11fcc:	d5 83       	std	Z+5, r29	; 0x05
   11fce:	c4 83       	std	Z+4, r28	; 0x04
   11fd0:	86 e3       	ldi	r24, 0x36	; 54
   11fd2:	92 e1       	ldi	r25, 0x12	; 18
   11fd4:	a0 e0       	ldi	r26, 0x00	; 0
   11fd6:	81 83       	std	Z+1, r24	; 0x01
   11fd8:	92 83       	std	Z+2, r25	; 0x02
   11fda:	a3 83       	std	Z+3, r26	; 0x03
   11fdc:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(SS80p->HEADER.PPR);
   11fe0:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   11fe4:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   11fe8:	81 81       	ldd	r24, Z+1	; 0x01
   11fea:	90 e0       	ldi	r25, 0x00	; 0
   11fec:	0e 94 0c 86 	call	0x10c18	; 0x10c18 <gpib_disable_PPR>
        return(Send_Identify( ch, SS80p->CONFIG.ID) );
   11ff0:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   11ff4:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   11ff8:	25 c0       	rjmp	.+74     	; 0x12044 <GPIB_SECONDARY_ADDRESS+0xa6>

    }

#ifdef AMIGO
    if(AMIGO_is_MSA(ch) )
   11ffa:	ce 01       	movw	r24, r28
   11ffc:	61 dc       	rcall	.-1854   	; 0x118c0 <AMIGO_is_MSA>
   11ffe:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12002:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12006:	89 2b       	or	r24, r25
   12008:	11 f1       	breq	.+68     	; 0x1204e <GPIB_SECONDARY_ADDRESS+0xb0>
    {
/// @todo
///     Two identify bytes should be repeated until untalked
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1200a:	c9 01       	movw	r24, r18
   1200c:	84 72       	andi	r24, 0x24	; 36
   1200e:	99 27       	eor	r25, r25
   12010:	89 2b       	or	r24, r25
   12012:	61 f0       	breq	.+24     	; 0x1202c <GPIB_SECONDARY_ADDRESS+0x8e>
            printf("[SA %02XH AMIGO]\n", 0xff & ch);
   12014:	ed b7       	in	r30, 0x3d	; 61
   12016:	fe b7       	in	r31, 0x3e	; 62
   12018:	d5 83       	std	Z+5, r29	; 0x05
   1201a:	c4 83       	std	Z+4, r28	; 0x04
   1201c:	84 e2       	ldi	r24, 0x24	; 36
   1201e:	92 e1       	ldi	r25, 0x12	; 18
   12020:	a0 e0       	ldi	r26, 0x00	; 0
   12022:	81 83       	std	Z+1, r24	; 0x01
   12024:	92 83       	std	Z+2, r25	; 0x02
   12026:	a3 83       	std	Z+3, r26	; 0x03
   12028:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1202c:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   12030:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   12034:	81 81       	ldd	r24, Z+1	; 0x01
   12036:	90 e0       	ldi	r25, 0x00	; 0
   12038:	0e 94 0c 86 	call	0x10c18	; 0x10c18 <gpib_disable_PPR>
        return( Send_Identify( ch, AMIGOp->CONFIG.ID) );
   1203c:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   12040:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   12044:	66 81       	ldd	r22, Z+6	; 0x06
   12046:	77 81       	ldd	r23, Z+7	; 0x07
   12048:	81 2f       	mov	r24, r17
   1204a:	ec dd       	rcall	.-1064   	; 0x11c24 <Send_Identify>
   1204c:	1d c0       	rjmp	.+58     	; 0x12088 <GPIB_SECONDARY_ADDRESS+0xea>
    }
#endif                                        // #ifdef AMIGO

#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1204e:	c9 01       	movw	r24, r18
   12050:	84 72       	andi	r24, 0x24	; 36
   12052:	99 27       	eor	r25, r25
   12054:	00 97       	sbiw	r24, 0x00	; 0
   12056:	c1 f0       	breq	.+48     	; 0x12088 <GPIB_SECONDARY_ADDRESS+0xea>
        printf("[SA %02XH, listen:%02XH, talk:%02XH]\n",
   12058:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   1205c:	90 e0       	ldi	r25, 0x00	; 0
   1205e:	ed b7       	in	r30, 0x3d	; 61
   12060:	fe b7       	in	r31, 0x3e	; 62
   12062:	91 87       	std	Z+9, r25	; 0x09
   12064:	80 87       	std	Z+8, r24	; 0x08
   12066:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   1206a:	90 e0       	ldi	r25, 0x00	; 0
   1206c:	97 83       	std	Z+7, r25	; 0x07
   1206e:	86 83       	std	Z+6, r24	; 0x06
   12070:	d5 83       	std	Z+5, r29	; 0x05
   12072:	c4 83       	std	Z+4, r28	; 0x04
   12074:	8e ef       	ldi	r24, 0xFE	; 254
   12076:	91 e1       	ldi	r25, 0x11	; 17
   12078:	a0 e0       	ldi	r26, 0x00	; 0
   1207a:	81 83       	std	Z+1, r24	; 0x01
   1207c:	92 83       	std	Z+2, r25	; 0x02
   1207e:	a3 83       	std	Z+3, r26	; 0x03
   12080:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
#endif
    return(0);
   12084:	80 e0       	ldi	r24, 0x00	; 0
   12086:	90 e0       	ldi	r25, 0x00	; 0
}
   12088:	cd b7       	in	r28, 0x3d	; 61
   1208a:	de b7       	in	r29, 0x3e	; 62
   1208c:	29 96       	adiw	r28, 0x09	; 9
   1208e:	e3 e0       	ldi	r30, 0x03	; 3
   12090:	0c 94 91 e6 	jmp	0x1cd22	; 0x1cd22 <__epilogue_restores__+0x1e>

00012094 <listen_cleanup>:
/// - Used to cleanup or close at the end of any listen address transition.
/// - Also called when GPIB bus reset or unlisten.
/// For now we just use this to close printer capture
/// @return  void
void listen_cleanup()
{
   12094:	00 d0       	rcall	.+0      	; 0x12096 <listen_cleanup+0x2>
   12096:	1f 92       	push	r1
    if(listening_last)
   12098:	60 91 e0 1e 	lds	r22, 0x1EE0	; 0x801ee0 <listening_last>
   1209c:	66 23       	and	r22, r22
   1209e:	e1 f0       	breq	.+56     	; 0x120d8 <listen_cleanup+0x44>
    {
        int index = find_device(PRINTER_TYPE, listening_last, BASE_MLA);
   120a0:	70 e0       	ldi	r23, 0x00	; 0
   120a2:	40 e2       	ldi	r20, 0x20	; 32
   120a4:	50 e0       	ldi	r21, 0x00	; 0
   120a6:	84 e0       	ldi	r24, 0x04	; 4
   120a8:	90 e0       	ldi	r25, 0x00	; 0
   120aa:	45 d6       	rcall	.+3210   	; 0x12d36 <find_device>
        if(index == -1)
   120ac:	8f 3f       	cpi	r24, 0xFF	; 255
   120ae:	a1 f0       	breq	.+40     	; 0x120d8 <listen_cleanup+0x44>
            return;

//We should not set the active device globally
//FIXME if we have to then printer close should temprarily do so
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   120b0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   120b4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   120b8:	84 72       	andi	r24, 0x24	; 36
   120ba:	99 27       	eor	r25, r25
   120bc:	89 2b       	or	r24, r25
   120be:	51 f0       	breq	.+20     	; 0x120d4 <listen_cleanup+0x40>
            printf("[PRINTER close]\n");
   120c0:	8d ee       	ldi	r24, 0xED	; 237
   120c2:	91 e1       	ldi	r25, 0x11	; 17
   120c4:	a0 e0       	ldi	r26, 0x00	; 0
   120c6:	ed b7       	in	r30, 0x3d	; 61
   120c8:	fe b7       	in	r31, 0x3e	; 62
   120ca:	81 83       	std	Z+1, r24	; 0x01
   120cc:	92 83       	std	Z+2, r25	; 0x02
   120ce:	a3 83       	std	Z+3, r26	; 0x03
   120d0:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        printer_close();
   120d4:	0e 94 16 be 	call	0x17c2c	; 0x17c2c <printer_close>
    }
}
   120d8:	0f 90       	pop	r0
   120da:	0f 90       	pop	r0
   120dc:	0f 90       	pop	r0
   120de:	08 95       	ret

000120e0 <GPIB_LISTEN>:
/// @param[in] ch 8 bit listen command
///
/// @return  0

int GPIB_LISTEN(uint8_t ch)
{
   120e0:	cf 93       	push	r28
   120e2:	df 93       	push	r29
   120e4:	00 d0       	rcall	.+0      	; 0x120e6 <GPIB_LISTEN+0x6>
   120e6:	00 d0       	rcall	.+0      	; 0x120e8 <GPIB_LISTEN+0x8>
   120e8:	1f 92       	push	r1
   120ea:	c8 2f       	mov	r28, r24
    listening_last = listening;
   120ec:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   120f0:	80 93 e0 1e 	sts	0x1EE0, r24	; 0x801ee0 <listening_last>
    listening = ch;
   120f4:	c0 93 e6 1e 	sts	0x1EE6, r28	; 0x801ee6 <listening>

    listen_cleanup();
   120f8:	cd df       	rcall	.-102    	; 0x12094 <listen_cleanup>

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///@brief  Universal Unlisten
    if(ch == UNL)
   120fa:	cf 33       	cpi	r28, 0x3F	; 63
   120fc:	19 f5       	brne	.+70     	; 0x12144 <GPIB_LISTEN+0x64>
    {
        listening = 0;
   120fe:	10 92 e6 1e 	sts	0x1EE6, r1	; 0x801ee6 <listening>

#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   12102:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12106:	82 ff       	sbrs	r24, 2
   12108:	74 c0       	rjmp	.+232    	; 0x121f2 <GPIB_LISTEN+0x112>
        {
            printf("[UNL]\n");
   1210a:	86 ee       	ldi	r24, 0xE6	; 230
   1210c:	92 e1       	ldi	r25, 0x12	; 18
   1210e:	a0 e0       	ldi	r26, 0x00	; 0
   12110:	ed b7       	in	r30, 0x3d	; 61
   12112:	fe b7       	in	r31, 0x3e	; 62
   12114:	81 83       	std	Z+1, r24	; 0x01
   12116:	92 83       	std	Z+2, r25	; 0x02
   12118:	a3 83       	std	Z+3, r26	; 0x03
   1211a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
///@brief add a line break if we both Untalk and Unlisten
            if(lastcmd == UNT)
   1211e:	80 91 de 1c 	lds	r24, 0x1CDE	; 0x801cde <lastcmd>
   12122:	90 91 df 1c 	lds	r25, 0x1CDF	; 0x801cdf <lastcmd+0x1>
   12126:	8f 35       	cpi	r24, 0x5F	; 95
   12128:	91 05       	cpc	r25, r1
   1212a:	09 f0       	breq	.+2      	; 0x1212e <GPIB_LISTEN+0x4e>
   1212c:	62 c0       	rjmp	.+196    	; 0x121f2 <GPIB_LISTEN+0x112>
                printf("\n");
   1212e:	84 ee       	ldi	r24, 0xE4	; 228
   12130:	92 e1       	ldi	r25, 0x12	; 18
   12132:	a0 e0       	ldi	r26, 0x00	; 0
   12134:	ed b7       	in	r30, 0x3d	; 61
   12136:	fe b7       	in	r31, 0x3e	; 62
   12138:	81 83       	std	Z+1, r24	; 0x01
   1213a:	92 83       	std	Z+2, r25	; 0x02
   1213c:	a3 83       	std	Z+3, r26	; 0x03
   1213e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   12142:	57 c0       	rjmp	.+174    	; 0x121f2 <GPIB_LISTEN+0x112>
#endif
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MLA(ch))
   12144:	d0 e0       	ldi	r29, 0x00	; 0
   12146:	ce 01       	movw	r24, r28
   12148:	97 db       	rcall	.-2258   	; 0x11878 <AMIGO_is_MLA>
   1214a:	89 2b       	or	r24, r25
   1214c:	81 f0       	breq	.+32     	; 0x1216e <GPIB_LISTEN+0x8e>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   1214e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12152:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12156:	84 72       	andi	r24, 0x24	; 36
   12158:	99 27       	eor	r25, r25
   1215a:	89 2b       	or	r24, r25
   1215c:	09 f4       	brne	.+2      	; 0x12160 <GPIB_LISTEN+0x80>
   1215e:	49 c0       	rjmp	.+146    	; 0x121f2 <GPIB_LISTEN+0x112>
            printf("[LA %02XH AMIGO]\n", 0xff & ch);
   12160:	ed b7       	in	r30, 0x3d	; 61
   12162:	fe b7       	in	r31, 0x3e	; 62
   12164:	d5 83       	std	Z+5, r29	; 0x05
   12166:	c4 83       	std	Z+4, r28	; 0x04
   12168:	82 ed       	ldi	r24, 0xD2	; 210
   1216a:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(SS80_is_MLA(ch))
   1216c:	3c c0       	rjmp	.+120    	; 0x121e6 <GPIB_LISTEN+0x106>
   1216e:	ce 01       	movw	r24, r28
   12170:	4d db       	rcall	.-2406   	; 0x1180c <SS80_is_MLA>
   12172:	89 2b       	or	r24, r25
   12174:	79 f0       	breq	.+30     	; 0x12194 <GPIB_LISTEN+0xb4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   12176:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1217a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1217e:	84 72       	andi	r24, 0x24	; 36
   12180:	99 27       	eor	r25, r25
   12182:	89 2b       	or	r24, r25
   12184:	b1 f1       	breq	.+108    	; 0x121f2 <GPIB_LISTEN+0x112>
            printf("[LA %02XH SS80]\n", 0xff & ch);
   12186:	ed b7       	in	r30, 0x3d	; 61
   12188:	fe b7       	in	r31, 0x3e	; 62
   1218a:	d5 83       	std	Z+5, r29	; 0x05
   1218c:	c4 83       	std	Z+4, r28	; 0x04
   1218e:	81 ec       	ldi	r24, 0xC1	; 193
   12190:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }

    if(PRINTER_is_MLA(ch))
   12192:	29 c0       	rjmp	.+82     	; 0x121e6 <GPIB_LISTEN+0x106>
   12194:	ce 01       	movw	r24, r28
   12196:	a6 db       	rcall	.-2228   	; 0x118e4 <PRINTER_is_MLA>
   12198:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1219c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   121a0:	89 2b       	or	r24, r25
   121a2:	c9 f0       	breq	.+50     	; 0x121d6 <GPIB_LISTEN+0xf6>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   121a4:	24 72       	andi	r18, 0x24	; 36
   121a6:	33 27       	eor	r19, r19
   121a8:	23 2b       	or	r18, r19
   121aa:	61 f0       	breq	.+24     	; 0x121c4 <GPIB_LISTEN+0xe4>
            printf("[LA %02XH PRINTER]\n", 0xff & ch);
   121ac:	ed b7       	in	r30, 0x3d	; 61
   121ae:	fe b7       	in	r31, 0x3e	; 62
   121b0:	d5 83       	std	Z+5, r29	; 0x05
   121b2:	c4 83       	std	Z+4, r28	; 0x04
   121b4:	8d ea       	ldi	r24, 0xAD	; 173
   121b6:	92 e1       	ldi	r25, 0x12	; 18
   121b8:	a0 e0       	ldi	r26, 0x00	; 0
   121ba:	81 83       	std	Z+1, r24	; 0x01
   121bc:	92 83       	std	Z+2, r25	; 0x02
   121be:	a3 83       	std	Z+3, r26	; 0x03
   121c0:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
        if(talking != UNT)
   121c4:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   121c8:	8f 35       	cpi	r24, 0x5F	; 95
   121ca:	99 f0       	breq	.+38     	; 0x121f2 <GPIB_LISTEN+0x112>
        {
///@brief NULL creates a file named based on date and time
// FIXME use printer structure to permit multiple printers
            printer_open(NULL);
   121cc:	80 e0       	ldi	r24, 0x00	; 0
   121ce:	90 e0       	ldi	r25, 0x00	; 0
   121d0:	0e 94 6e be 	call	0x17cdc	; 0x17cdc <printer_open>
   121d4:	0e c0       	rjmp	.+28     	; 0x121f2 <GPIB_LISTEN+0x112>
        }
        return(0);
    }
#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   121d6:	22 ff       	sbrs	r18, 2
   121d8:	0c c0       	rjmp	.+24     	; 0x121f2 <GPIB_LISTEN+0x112>
        printf("[LA %02XH]\n", 0xff & ch);
   121da:	ed b7       	in	r30, 0x3d	; 61
   121dc:	fe b7       	in	r31, 0x3e	; 62
   121de:	d5 83       	std	Z+5, r29	; 0x05
   121e0:	c4 83       	std	Z+4, r28	; 0x04
   121e2:	81 ea       	ldi	r24, 0xA1	; 161
   121e4:	92 e1       	ldi	r25, 0x12	; 18
   121e6:	a0 e0       	ldi	r26, 0x00	; 0
   121e8:	81 83       	std	Z+1, r24	; 0x01
   121ea:	92 83       	std	Z+2, r25	; 0x02
   121ec:	a3 83       	std	Z+3, r26	; 0x03
   121ee:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
    return(0);
}                                                 // Listen Primary Address group
   121f2:	80 e0       	ldi	r24, 0x00	; 0
   121f4:	90 e0       	ldi	r25, 0x00	; 0
   121f6:	cd b7       	in	r28, 0x3d	; 61
   121f8:	de b7       	in	r29, 0x3e	; 62
   121fa:	25 96       	adiw	r28, 0x05	; 5
   121fc:	e2 e0       	ldi	r30, 0x02	; 2
   121fe:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00012202 <gpib_task>:
/// - Reads and processes GPIB control or data bytes
/// and calls emulator task.
/// @return  void

void gpib_task(void)
{
   12202:	cf 93       	push	r28
   12204:	df 93       	push	r29
    uint16_t val;
    uint8_t ch;
    uint16_t status;

    gpib_init_devices();                          // Init devices
   12206:	92 db       	rcall	.-2268   	; 0x1192c <gpib_init_devices>
	// gpib_state_init() is now done in gpib_init_devices
    // gpib_state_init();                            // Init PPR talking and listening states

    gpib_log_fp = NULL;
   12208:	10 92 57 19 	sts	0x1957, r1	; 0x801957 <gpib_log_fp+0x1>
   1220c:	10 92 56 19 	sts	0x1956, r1	; 0x801956 <gpib_log_fp>

    while(1)
    {


        val = gpib_read_byte(NO_TRACE);
   12210:	80 e0       	ldi	r24, 0x00	; 0
   12212:	90 e0       	ldi	r25, 0x00	; 0
   12214:	4f d8       	rcall	.-3938   	; 0x112b4 <gpib_read_byte>
   12216:	ec 01       	movw	r28, r24

#if SDEBUG
        if(debuglevel & GPIB_TOP_LEVEL_BUS_DECODE)
   12218:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1221c:	83 ff       	sbrs	r24, 3
            gpib_decode(val);
   1221e:	02 c0       	rjmp	.+4      	; 0x12224 <gpib_task+0x22>
   12220:	ce 01       	movw	r24, r28
   12222:	4e d9       	rcall	.-3428   	; 0x114c0 <gpib_decode>
#endif
        status = gpib_error_test(val);
   12224:	ce 01       	movw	r24, r28
   12226:	1d dc       	rcall	.-1990   	; 0x11a62 <gpib_error_test>
        if(status & ABORT_FLAG)
        {
            return;
        }
        else if(status & MEDIA_FLAG)
   12228:	9c 01       	movw	r18, r24
   1222a:	23 70       	andi	r18, 0x03	; 3
   1222c:	33 27       	eor	r19, r19
   1222e:	23 2b       	or	r18, r19
   12230:	09 f0       	breq	.+2      	; 0x12234 <gpib_task+0x32>
   12232:	43 c0       	rjmp	.+134    	; 0x122ba <gpib_task+0xb8>
        {
            return;
        }
        else if(status)
   12234:	89 2b       	or	r24, r25
   12236:	61 f7       	brne	.-40     	; 0x12210 <gpib_task+0xe>
        {
            continue;
        }
///@brief GPIB commands with ATN set (COMMANDS)
        if(val & ATN_FLAG)
   12238:	d2 ff       	sbrs	r29, 2
   1223a:	26 c0       	rjmp	.+76     	; 0x12288 <gpib_task+0x86>
        {
            ch = val & CMD_MASK;
   1223c:	8c 2f       	mov	r24, r28
   1223e:	8f 77       	andi	r24, 0x7F	; 127
            if(ch <= 0x1f)
   12240:	80 32       	cpi	r24, 0x20	; 32
            {
                GPIB(ch);
   12242:	10 f4       	brcc	.+4      	; 0x12248 <gpib_task+0x46>
   12244:	52 dd       	rcall	.-1372   	; 0x11cea <GPIB>
                continue;
   12246:	e4 cf       	rjmp	.-56     	; 0x12210 <gpib_task+0xe>
            }
///@brief GPIB listen
            if(ch >= 0x20 && ch <= 0x3f)
   12248:	90 ee       	ldi	r25, 0xE0	; 224
   1224a:	98 0f       	add	r25, r24
   1224c:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_LISTEN(ch);
   1224e:	10 f4       	brcc	.+4      	; 0x12254 <gpib_task+0x52>
   12250:	47 df       	rcall	.-370    	; 0x120e0 <GPIB_LISTEN>
                continue;
   12252:	de cf       	rjmp	.-68     	; 0x12210 <gpib_task+0xe>
            }
///@brief GPIB talk
            if(ch >= 0x40 && ch <= 0x5f)
   12254:	90 ec       	ldi	r25, 0xC0	; 192
   12256:	98 0f       	add	r25, r24
   12258:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_TALK(ch);
   1225a:	10 f4       	brcc	.+4      	; 0x12260 <gpib_task+0x5e>
   1225c:	08 de       	rcall	.-1008   	; 0x11e6e <GPIB_TALK>
                continue;
   1225e:	d8 cf       	rjmp	.-80     	; 0x12210 <gpib_task+0xe>
            }

///@brief GPIB secondary
/// Note: We know ch >= 0x60 && ch <= 0x7f because of previous tests

            if( listening && lastcmd == UNT)
   12260:	90 91 e6 1e 	lds	r25, 0x1EE6	; 0x801ee6 <listening>
   12264:	99 23       	and	r25, r25
   12266:	59 f0       	breq	.+22     	; 0x1227e <gpib_task+0x7c>
   12268:	20 91 de 1c 	lds	r18, 0x1CDE	; 0x801cde <lastcmd>
   1226c:	30 91 df 1c 	lds	r19, 0x1CDF	; 0x801cdf <lastcmd+0x1>
   12270:	2f 35       	cpi	r18, 0x5F	; 95
   12272:	31 05       	cpc	r19, r1
            {
                secondary = 0;
   12274:	21 f4       	brne	.+8      	; 0x1227e <gpib_task+0x7c>
   12276:	10 92 e5 1e 	sts	0x1EE5, r1	; 0x801ee5 <secondary>
                GPIB_SECONDARY_ADDRESS(ch);
   1227a:	91 de       	rcall	.-734    	; 0x11f9e <GPIB_SECONDARY_ADDRESS>
                continue;
   1227c:	c9 cf       	rjmp	.-110    	; 0x12210 <gpib_task+0xe>
            }

///@brief We have to keep track of secondary address that may happen out of order with older AMIGO protocol
/// this method works for SS80 as well
            secondary = ch;
   1227e:	80 93 e5 1e 	sts	0x1EE5, r24	; 0x801ee5 <secondary>
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(secondary,0);
   12282:	60 e0       	ldi	r22, 0x00	; 0
   12284:	90 e0       	ldi	r25, 0x00	; 0
        }                                         // GPIB ATN

///@brief GPIB commands without ATN set (DATA)
        else                                      // GPIB Data
        {
            if ( PRINTER_is_MLA(listening) )
   12286:	12 c0       	rjmp	.+36     	; 0x122ac <gpib_task+0xaa>
   12288:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   1228c:	90 e0       	ldi	r25, 0x00	; 0
   1228e:	2a db       	rcall	.-2476   	; 0x118e4 <PRINTER_is_MLA>
   12290:	89 2b       	or	r24, r25
   12292:	29 f0       	breq	.+10     	; 0x1229e <gpib_task+0x9c>
            {
                printer_buffer( 0xff & val );
   12294:	ce 01       	movw	r24, r28
   12296:	99 27       	eor	r25, r25
   12298:	0e 94 11 bf 	call	0x17e22	; 0x17e22 <printer_buffer>
                continue;
   1229c:	b9 cf       	rjmp	.-142    	; 0x12210 <gpib_task+0xe>
            }

            if(!secondary)
   1229e:	80 91 e5 1e 	lds	r24, 0x1EE5	; 0x801ee5 <secondary>
   122a2:	88 23       	and	r24, r24
                continue;

// ONLY secondar commands at this point
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(val,1);
   122a4:	09 f4       	brne	.+2      	; 0x122a8 <gpib_task+0xa6>
   122a6:	b4 cf       	rjmp	.-152    	; 0x12210 <gpib_task+0xe>
   122a8:	61 e0       	ldi	r22, 0x01	; 1
   122aa:	ce 01       	movw	r24, r28
            status = gpib_error_test(status);
   122ac:	67 dc       	rcall	.-1842   	; 0x11b7c <GPIB_COMMANDS>
   122ae:	d9 db       	rcall	.-2126   	; 0x11a62 <gpib_error_test>

            if(status & ( ABORT_FLAG | MEDIA_FLAG ))
   122b0:	83 70       	andi	r24, 0x03	; 3
   122b2:	99 27       	eor	r25, r25
   122b4:	89 2b       	or	r24, r25
   122b6:	09 f4       	brne	.+2      	; 0x122ba <gpib_task+0xb8>
   122b8:	ab cf       	rjmp	.-170    	; 0x12210 <gpib_task+0xe>
            }
            continue;
        }
    }                                             // while(1)
    return;
}
   122ba:	df 91       	pop	r29
   122bc:	cf 91       	pop	r28
   122be:	08 95       	ret

000122c0 <talk_cleanup>:
/// - Not used in this emulator.
///
/// @return  void

void talk_cleanup()
{
   122c0:	08 95       	ret

000122c2 <gpib_help>:
/// @brief
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void
void gpib_help(int full)
{
   122c2:	cf 93       	push	r28
   122c4:	df 93       	push	r29
   122c6:	00 d0       	rcall	.+0      	; 0x122c8 <gpib_help+0x6>
   122c8:	1f 92       	push	r1
   122ca:	ec 01       	movw	r28, r24
    printf("gpib      help\n");
   122cc:	8f ea       	ldi	r24, 0xAF	; 175
   122ce:	95 e1       	ldi	r25, 0x15	; 21
   122d0:	a0 e0       	ldi	r26, 0x00	; 0
   122d2:	ed b7       	in	r30, 0x3d	; 61
   122d4:	fe b7       	in	r31, 0x3e	; 62
   122d6:	81 83       	std	Z+1, r24	; 0x01
   122d8:	92 83       	std	Z+2, r25	; 0x02
   122da:	a3 83       	std	Z+3, r26	; 0x03
   122dc:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    if(full)
   122e0:	cd 2b       	or	r28, r29
   122e2:	51 f0       	breq	.+20     	; 0x122f8 <gpib_help+0x36>
    {
        printf("Note: gpib prefix is optional\n"
   122e4:	8e ea       	ldi	r24, 0xAE	; 174
   122e6:	94 e1       	ldi	r25, 0x14	; 20
   122e8:	a0 e0       	ldi	r26, 0x00	; 0
   122ea:	ed b7       	in	r30, 0x3d	; 61
   122ec:	fe b7       	in	r31, 0x3e	; 62
   122ee:	81 83       	std	Z+1, r24	; 0x01
   122f0:	92 83       	std	Z+2, r25	; 0x02
   122f2:	a3 83       	std	Z+3, r26	; 0x03
   122f4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            "gpib ppr_set XX\n"
            "\n"
#endif
            );
	}
}
   122f8:	cd b7       	in	r28, 0x3d	; 61
   122fa:	de b7       	in	r29, 0x3e	; 62
   122fc:	23 96       	adiw	r28, 0x03	; 3
   122fe:	e2 e0       	ldi	r30, 0x02	; 2
   12300:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00012304 <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   12304:	a5 e0       	ldi	r26, 0x05	; 5
   12306:	b0 e0       	ldi	r27, 0x00	; 0
   12308:	e8 e8       	ldi	r30, 0x88	; 136
   1230a:	f1 e9       	ldi	r31, 0x91	; 145
   1230c:	0c 94 70 e6 	jmp	0x1cce0	; 0x1cce0 <__prologue_saves__+0x14>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   12310:	fb 01       	movw	r30, r22
   12312:	00 81       	ld	r16, Z
   12314:	11 81       	ldd	r17, Z+1	; 0x01

    if(!ptr)
   12316:	01 15       	cp	r16, r1
   12318:	11 05       	cpc	r17, r1
   1231a:	19 f4       	brne	.+6      	; 0x12322 <gpib_tests+0x1e>
        return(0);
   1231c:	80 e0       	ldi	r24, 0x00	; 0
   1231e:	90 e0       	ldi	r25, 0x00	; 0
   12320:	8f c0       	rjmp	.+286    	; 0x12440 <gpib_tests+0x13c>
   12322:	7b 01       	movw	r14, r22
   12324:	6c 01       	movw	r12, r24

    if( MATCH(ptr,"gpib") )
   12326:	64 e9       	ldi	r22, 0x94	; 148
   12328:	7d e0       	ldi	r23, 0x0D	; 13
   1232a:	c8 01       	movw	r24, r16
   1232c:	0e 94 de 31 	call	0x63bc	; 0x63bc <MATCH>
   12330:	89 2b       	or	r24, r25
   12332:	a1 f0       	breq	.+40     	; 0x1235c <gpib_tests+0x58>
    {
        ptr = argv[ind++];
   12334:	f7 01       	movw	r30, r14
   12336:	02 81       	ldd	r16, Z+2	; 0x02
   12338:	13 81       	ldd	r17, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   1233a:	01 15       	cp	r16, r1
   1233c:	11 05       	cpc	r17, r1
   1233e:	21 f4       	brne	.+8      	; 0x12348 <gpib_tests+0x44>
        {
            gpib_help(1);
   12340:	81 e0       	ldi	r24, 0x01	; 1
   12342:	90 e0       	ldi	r25, 0x00	; 0
   12344:	be df       	rcall	.-132    	; 0x122c2 <gpib_help>
   12346:	7a c0       	rjmp	.+244    	; 0x1243c <gpib_tests+0x138>
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   12348:	62 e6       	ldi	r22, 0x62	; 98
   1234a:	76 e1       	ldi	r23, 0x16	; 22
   1234c:	c8 01       	movw	r24, r16
   1234e:	0e 94 de 31 	call	0x63bc	; 0x63bc <MATCH>
   12352:	89 2b       	or	r24, r25
   12354:	a9 f7       	brne	.-22     	; 0x12340 <gpib_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
   12356:	c2 e0       	ldi	r28, 0x02	; 2
   12358:	d0 e0       	ldi	r29, 0x00	; 0
   1235a:	02 c0       	rjmp	.+4      	; 0x12360 <gpib_tests+0x5c>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1235c:	c1 e0       	ldi	r28, 0x01	; 1
   1235e:	d0 e0       	ldi	r29, 0x00	; 0
            gpib_help(1);
            return(1);
        }
    }

    if (MATCHI(ptr,"debug") )
   12360:	69 e9       	ldi	r22, 0x99	; 153
   12362:	7d e0       	ldi	r23, 0x0D	; 13
   12364:	c8 01       	movw	r24, r16
   12366:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   1236a:	89 2b       	or	r24, r25
   1236c:	29 f1       	breq	.+74     	; 0x123b8 <gpib_tests+0xb4>
    {
        ptr = argv[ind];
   1236e:	fe 01       	movw	r30, r28
   12370:	ee 0f       	add	r30, r30
   12372:	ff 1f       	adc	r31, r31
   12374:	ee 0d       	add	r30, r14
   12376:	ff 1d       	adc	r31, r15
        if(*ptr == '=')
   12378:	01 90       	ld	r0, Z+
   1237a:	f0 81       	ld	r31, Z
   1237c:	e0 2d       	mov	r30, r0
   1237e:	80 81       	ld	r24, Z
   12380:	8d 33       	cpi	r24, 0x3D	; 61
   12382:	09 f4       	brne	.+2      	; 0x12386 <gpib_tests+0x82>
            ++ind;
   12384:	21 96       	adiw	r28, 0x01	; 1
        debuglevel = get_value(argv[ind]);
   12386:	cc 0f       	add	r28, r28
   12388:	dd 1f       	adc	r29, r29
   1238a:	ce 0d       	add	r28, r14
   1238c:	df 1d       	adc	r29, r15
   1238e:	88 81       	ld	r24, Y
   12390:	99 81       	ldd	r25, Y+1	; 0x01
   12392:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <get_value>
   12396:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   1239a:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   1239e:	ed b7       	in	r30, 0x3d	; 61
   123a0:	fe b7       	in	r31, 0x3e	; 62
   123a2:	75 83       	std	Z+5, r23	; 0x05
   123a4:	64 83       	std	Z+4, r22	; 0x04
   123a6:	81 ea       	ldi	r24, 0xA1	; 161
   123a8:	94 e1       	ldi	r25, 0x14	; 20
   123aa:	a0 e0       	ldi	r26, 0x00	; 0
   123ac:	81 83       	std	Z+1, r24	; 0x01
   123ae:	92 83       	std	Z+2, r25	; 0x02
   123b0:	a3 83       	std	Z+3, r26	; 0x03
   123b2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   123b6:	42 c0       	rjmp	.+132    	; 0x1243c <gpib_tests+0x138>
        return(1);
    }

    if (MATCHI(ptr,"elapsed_reset") )
   123b8:	6f e9       	ldi	r22, 0x9F	; 159
   123ba:	7d e0       	ldi	r23, 0x0D	; 13
   123bc:	c8 01       	movw	r24, r16
   123be:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   123c2:	89 2b       	or	r24, r25
   123c4:	19 f0       	breq	.+6      	; 0x123cc <gpib_tests+0xc8>
    {
        gpib_timer_elapsed_begin();
   123c6:	0e 94 fc 84 	call	0x109f8	; 0x109f8 <gpib_timer_elapsed_begin>
   123ca:	38 c0       	rjmp	.+112    	; 0x1243c <gpib_tests+0x138>
        return(1);
    }

    if (MATCHI(ptr,"elapsed") )
   123cc:	6d ea       	ldi	r22, 0xAD	; 173
   123ce:	7d e0       	ldi	r23, 0x0D	; 13
   123d0:	c8 01       	movw	r24, r16
   123d2:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   123d6:	89 2b       	or	r24, r25
   123d8:	29 f0       	breq	.+10     	; 0x123e4 <gpib_tests+0xe0>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   123da:	85 eb       	ldi	r24, 0xB5	; 181
   123dc:	9d e0       	ldi	r25, 0x0D	; 13
   123de:	0e 94 0e 85 	call	0x10a1c	; 0x10a1c <gpib_timer_elapsed_end>
   123e2:	2c c0       	rjmp	.+88     	; 0x1243c <gpib_tests+0x138>
        return(1);
    }

    if (MATCHI(ptr,"task") )
   123e4:	63 ec       	ldi	r22, 0xC3	; 195
   123e6:	7d e0       	ldi	r23, 0x0D	; 13
   123e8:	c8 01       	movw	r24, r16
   123ea:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   123ee:	89 2b       	or	r24, r25
    {
        gpib_task();
   123f0:	11 f0       	breq	.+4      	; 0x123f6 <gpib_tests+0xf2>
   123f2:	07 df       	rcall	.-498    	; 0x12202 <gpib_task>
   123f4:	23 c0       	rjmp	.+70     	; 0x1243c <gpib_tests+0x138>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   123f6:	21 96       	adiw	r28, 0x01	; 1
   123f8:	96 01       	movw	r18, r12
   123fa:	ae 01       	movw	r20, r28
   123fc:	68 ec       	ldi	r22, 0xC8	; 200
   123fe:	7d e0       	ldi	r23, 0x0D	; 13
   12400:	c8 01       	movw	r24, r16
   12402:	0e 94 06 32 	call	0x640c	; 0x640c <MATCHARGS>
   12406:	89 2b       	or	r24, r25
   12408:	09 f4       	brne	.+2      	; 0x1240c <gpib_tests+0x108>
   1240a:	88 cf       	rjmp	.-240    	; 0x1231c <gpib_tests+0x18>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   1240c:	cc 0f       	add	r28, r28
   1240e:	dd 1f       	adc	r29, r29
   12410:	ce 0d       	add	r28, r14
   12412:	df 1d       	adc	r29, r15
   12414:	88 81       	ld	r24, Y
   12416:	99 81       	ldd	r25, Y+1	; 0x01
   12418:	00 97       	sbiw	r24, 0x00	; 0
   1241a:	51 f0       	breq	.+20     	; 0x12430 <gpib_tests+0x12c>
   1241c:	6e ec       	ldi	r22, 0xCE	; 206
   1241e:	7d e0       	ldi	r23, 0x0D	; 13
   12420:	0e 94 de 31 	call	0x63bc	; 0x63bc <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   12424:	61 e0       	ldi	r22, 0x01	; 1
   12426:	70 e0       	ldi	r23, 0x00	; 0
   12428:	89 2b       	or	r24, r25
   1242a:	21 f4       	brne	.+8      	; 0x12434 <gpib_tests+0x130>
   1242c:	60 e0       	ldi	r22, 0x00	; 0
   1242e:	02 c0       	rjmp	.+4      	; 0x12434 <gpib_tests+0x130>
   12430:	60 e0       	ldi	r22, 0x00	; 0
   12432:	70 e0       	ldi	r23, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   12434:	22 97       	sbiw	r28, 0x02	; 2
   12436:	88 81       	ld	r24, Y
   12438:	99 81       	ldd	r25, Y+1	; 0x01
   1243a:	81 da       	rcall	.-2814   	; 0x1193e <gpib_trace_task>
        return(1);
   1243c:	81 e0       	ldi	r24, 0x01	; 1
   1243e:	90 e0       	ldi	r25, 0x00	; 0

    }                                             // port write
#endif                                        // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   12440:	cd b7       	in	r28, 0x3d	; 61
   12442:	de b7       	in	r29, 0x3e	; 62
   12444:	25 96       	adiw	r28, 0x05	; 5
   12446:	e8 e0       	ldi	r30, 0x08	; 8
   12448:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__epilogue_restores__+0x14>

0001244c <tok_index>:

	if(index_ppr(ppr) == -1)
		return(1);
	printf("WARNING PPR (%d) already in use\n", (int)ppr);
	return(0);
}
   1244c:	0f 93       	push	r16
   1244e:	1f 93       	push	r17
   12450:	cf 93       	push	r28
   12452:	8c 01       	movw	r16, r24
   12454:	c0 e0       	ldi	r28, 0x00	; 0
   12456:	24 e0       	ldi	r18, 0x04	; 4
   12458:	c2 02       	muls	r28, r18
   1245a:	f0 01       	movw	r30, r0
   1245c:	11 24       	eor	r1, r1
   1245e:	ec 53       	subi	r30, 0x3C	; 60
   12460:	fe 4f       	sbci	r31, 0xFE	; 254
   12462:	82 81       	ldd	r24, Z+2	; 0x02
   12464:	93 81       	ldd	r25, Z+3	; 0x03
   12466:	01 96       	adiw	r24, 0x01	; 1
   12468:	49 f0       	breq	.+18     	; 0x1247c <tok_index+0x30>
   1246a:	60 81       	ld	r22, Z
   1246c:	71 81       	ldd	r23, Z+1	; 0x01
   1246e:	c8 01       	movw	r24, r16
   12470:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   12474:	89 2b       	or	r24, r25
   12476:	21 f4       	brne	.+8      	; 0x12480 <tok_index+0x34>
   12478:	cf 5f       	subi	r28, 0xFF	; 255
   1247a:	ed cf       	rjmp	.-38     	; 0x12456 <tok_index+0xa>
   1247c:	8f ef       	ldi	r24, 0xFF	; 255
   1247e:	01 c0       	rjmp	.+2      	; 0x12482 <tok_index+0x36>
   12480:	8c 2f       	mov	r24, r28
   12482:	cf 91       	pop	r28
   12484:	1f 91       	pop	r17
   12486:	0f 91       	pop	r16
   12488:	08 95       	ret

0001248a <tok_name>:
   1248a:	e4 ec       	ldi	r30, 0xC4	; 196
   1248c:	f1 e0       	ldi	r31, 0x01	; 1
   1248e:	20 e0       	ldi	r18, 0x00	; 0
   12490:	30 e0       	ldi	r19, 0x00	; 0
   12492:	90 e0       	ldi	r25, 0x00	; 0
   12494:	42 81       	ldd	r20, Z+2	; 0x02
   12496:	53 81       	ldd	r21, Z+3	; 0x03
   12498:	4f 3f       	cpi	r20, 0xFF	; 255
   1249a:	6f ef       	ldi	r22, 0xFF	; 255
   1249c:	56 07       	cpc	r21, r22
   1249e:	89 f0       	breq	.+34     	; 0x124c2 <tok_name+0x38>
   124a0:	34 96       	adiw	r30, 0x04	; 4
   124a2:	48 17       	cp	r20, r24
   124a4:	59 07       	cpc	r21, r25
   124a6:	51 f4       	brne	.+20     	; 0x124bc <tok_name+0x32>
   124a8:	22 0f       	add	r18, r18
   124aa:	33 1f       	adc	r19, r19
   124ac:	22 0f       	add	r18, r18
   124ae:	33 1f       	adc	r19, r19
   124b0:	f9 01       	movw	r30, r18
   124b2:	ec 53       	subi	r30, 0x3C	; 60
   124b4:	fe 4f       	sbci	r31, 0xFE	; 254
   124b6:	80 81       	ld	r24, Z
   124b8:	91 81       	ldd	r25, Z+1	; 0x01
   124ba:	08 95       	ret
   124bc:	2f 5f       	subi	r18, 0xFF	; 255
   124be:	3f 4f       	sbci	r19, 0xFF	; 255
   124c0:	e9 cf       	rjmp	.-46     	; 0x12494 <tok_name+0xa>
   124c2:	8e e0       	ldi	r24, 0x0E	; 14
   124c4:	9c e0       	ldi	r25, 0x0C	; 12
   124c6:	08 95       	ret

000124c8 <print_tok_val>:
   124c8:	cf 92       	push	r12
   124ca:	df 92       	push	r13
   124cc:	ef 92       	push	r14
   124ce:	ff 92       	push	r15
   124d0:	0f 93       	push	r16
   124d2:	1f 93       	push	r17
   124d4:	cf 93       	push	r28
   124d6:	ad b7       	in	r26, 0x3d	; 61
   124d8:	be b7       	in	r27, 0x3e	; 62
   124da:	1d 97       	sbiw	r26, 0x0d	; 13
   124dc:	0f b6       	in	r0, 0x3f	; 63
   124de:	f8 94       	cli
   124e0:	be bf       	out	0x3e, r27	; 62
   124e2:	0f be       	out	0x3f, r0	; 63
   124e4:	ad bf       	out	0x3d, r26	; 61
   124e6:	c6 2f       	mov	r28, r22
   124e8:	69 01       	movw	r12, r18
   124ea:	7a 01       	movw	r14, r20
   124ec:	ce df       	rcall	.-100    	; 0x1248a <tok_name>
   124ee:	8c 01       	movw	r16, r24
   124f0:	cc 23       	and	r28, r28
   124f2:	31 f0       	breq	.+12     	; 0x12500 <print_tok_val+0x38>
   124f4:	80 e2       	ldi	r24, 0x20	; 32
   124f6:	90 e0       	ldi	r25, 0x00	; 0
   124f8:	0e 94 e6 75 	call	0xebcc	; 0xebcc <putchar>
   124fc:	c1 50       	subi	r28, 0x01	; 1
   124fe:	f8 cf       	rjmp	.-16     	; 0x124f0 <print_tok_val+0x28>
   12500:	ed b7       	in	r30, 0x3d	; 61
   12502:	fe b7       	in	r31, 0x3e	; 62
   12504:	c2 86       	std	Z+10, r12	; 0x0a
   12506:	d3 86       	std	Z+11, r13	; 0x0b
   12508:	e4 86       	std	Z+12, r14	; 0x0c
   1250a:	f5 86       	std	Z+13, r15	; 0x0d
   1250c:	c6 82       	std	Z+6, r12	; 0x06
   1250e:	d7 82       	std	Z+7, r13	; 0x07
   12510:	e0 86       	std	Z+8, r14	; 0x08
   12512:	f1 86       	std	Z+9, r15	; 0x09
   12514:	15 83       	std	Z+5, r17	; 0x05
   12516:	04 83       	std	Z+4, r16	; 0x04
   12518:	82 e2       	ldi	r24, 0x22	; 34
   1251a:	90 e2       	ldi	r25, 0x20	; 32
   1251c:	a0 e0       	ldi	r26, 0x00	; 0
   1251e:	81 83       	std	Z+1, r24	; 0x01
   12520:	92 83       	std	Z+2, r25	; 0x02
   12522:	a3 83       	std	Z+3, r26	; 0x03
   12524:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   12528:	ad b7       	in	r26, 0x3d	; 61
   1252a:	be b7       	in	r27, 0x3e	; 62
   1252c:	1d 96       	adiw	r26, 0x0d	; 13
   1252e:	0f b6       	in	r0, 0x3f	; 63
   12530:	f8 94       	cli
   12532:	be bf       	out	0x3e, r27	; 62
   12534:	0f be       	out	0x3f, r0	; 63
   12536:	ad bf       	out	0x3d, r26	; 61
   12538:	cf 91       	pop	r28
   1253a:	1f 91       	pop	r17
   1253c:	0f 91       	pop	r16
   1253e:	ff 90       	pop	r15
   12540:	ef 90       	pop	r14
   12542:	df 90       	pop	r13
   12544:	cf 90       	pop	r12
   12546:	08 95       	ret

00012548 <print_tok_str>:
   12548:	ef 92       	push	r14
   1254a:	ff 92       	push	r15
   1254c:	0f 93       	push	r16
   1254e:	1f 93       	push	r17
   12550:	cf 93       	push	r28
   12552:	ad b7       	in	r26, 0x3d	; 61
   12554:	be b7       	in	r27, 0x3e	; 62
   12556:	17 97       	sbiw	r26, 0x07	; 7
   12558:	0f b6       	in	r0, 0x3f	; 63
   1255a:	f8 94       	cli
   1255c:	be bf       	out	0x3e, r27	; 62
   1255e:	0f be       	out	0x3f, r0	; 63
   12560:	ad bf       	out	0x3d, r26	; 61
   12562:	c6 2f       	mov	r28, r22
   12564:	7a 01       	movw	r14, r20
   12566:	91 df       	rcall	.-222    	; 0x1248a <tok_name>
   12568:	8c 01       	movw	r16, r24
   1256a:	cc 23       	and	r28, r28
   1256c:	31 f0       	breq	.+12     	; 0x1257a <print_tok_str+0x32>
   1256e:	80 e2       	ldi	r24, 0x20	; 32
   12570:	90 e0       	ldi	r25, 0x00	; 0
   12572:	0e 94 e6 75 	call	0xebcc	; 0xebcc <putchar>
   12576:	c1 50       	subi	r28, 0x01	; 1
   12578:	f8 cf       	rjmp	.-16     	; 0x1256a <print_tok_str+0x22>
   1257a:	ed b7       	in	r30, 0x3d	; 61
   1257c:	fe b7       	in	r31, 0x3e	; 62
   1257e:	f7 82       	std	Z+7, r15	; 0x07
   12580:	e6 82       	std	Z+6, r14	; 0x06
   12582:	15 83       	std	Z+5, r17	; 0x05
   12584:	04 83       	std	Z+4, r16	; 0x04
   12586:	86 e1       	ldi	r24, 0x16	; 22
   12588:	90 e2       	ldi	r25, 0x20	; 32
   1258a:	a0 e0       	ldi	r26, 0x00	; 0
   1258c:	81 83       	std	Z+1, r24	; 0x01
   1258e:	92 83       	std	Z+2, r25	; 0x02
   12590:	a3 83       	std	Z+3, r26	; 0x03
   12592:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   12596:	ad b7       	in	r26, 0x3d	; 61
   12598:	be b7       	in	r27, 0x3e	; 62
   1259a:	17 96       	adiw	r26, 0x07	; 7
   1259c:	0f b6       	in	r0, 0x3f	; 63
   1259e:	f8 94       	cli
   125a0:	be bf       	out	0x3e, r27	; 62
   125a2:	0f be       	out	0x3f, r0	; 63
   125a4:	ad bf       	out	0x3d, r26	; 61
   125a6:	cf 91       	pop	r28
   125a8:	1f 91       	pop	r17
   125aa:	0f 91       	pop	r16
   125ac:	ff 90       	pop	r15
   125ae:	ef 90       	pop	r14
   125b0:	08 95       	ret

000125b2 <print_tok>:
   125b2:	0f 93       	push	r16
   125b4:	1f 93       	push	r17
   125b6:	cf 93       	push	r28
   125b8:	00 d0       	rcall	.+0      	; 0x125ba <print_tok+0x8>
   125ba:	00 d0       	rcall	.+0      	; 0x125bc <print_tok+0xa>
   125bc:	1f 92       	push	r1
   125be:	c6 2f       	mov	r28, r22
   125c0:	64 df       	rcall	.-312    	; 0x1248a <tok_name>
   125c2:	8c 01       	movw	r16, r24
   125c4:	cc 23       	and	r28, r28
   125c6:	31 f0       	breq	.+12     	; 0x125d4 <print_tok+0x22>
   125c8:	80 e2       	ldi	r24, 0x20	; 32
   125ca:	90 e0       	ldi	r25, 0x00	; 0
   125cc:	0e 94 e6 75 	call	0xebcc	; 0xebcc <putchar>
   125d0:	c1 50       	subi	r28, 0x01	; 1
   125d2:	f8 cf       	rjmp	.-16     	; 0x125c4 <print_tok+0x12>
   125d4:	ed b7       	in	r30, 0x3d	; 61
   125d6:	fe b7       	in	r31, 0x3e	; 62
   125d8:	15 83       	std	Z+5, r17	; 0x05
   125da:	04 83       	std	Z+4, r16	; 0x04
   125dc:	82 e1       	ldi	r24, 0x12	; 18
   125de:	90 e2       	ldi	r25, 0x20	; 32
   125e0:	a0 e0       	ldi	r26, 0x00	; 0
   125e2:	81 83       	std	Z+1, r24	; 0x01
   125e4:	92 83       	std	Z+2, r25	; 0x02
   125e6:	a3 83       	std	Z+3, r26	; 0x03
   125e8:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   125ec:	0f 90       	pop	r0
   125ee:	0f 90       	pop	r0
   125f0:	0f 90       	pop	r0
   125f2:	0f 90       	pop	r0
   125f4:	0f 90       	pop	r0
   125f6:	cf 91       	pop	r28
   125f8:	1f 91       	pop	r17
   125fa:	0f 91       	pop	r16
   125fc:	08 95       	ret

000125fe <display_Addresses>:
   125fe:	2f 92       	push	r2
   12600:	3f 92       	push	r3
   12602:	4f 92       	push	r4
   12604:	6f 92       	push	r6
   12606:	7f 92       	push	r7
   12608:	8f 92       	push	r8
   1260a:	cf 92       	push	r12
   1260c:	df 92       	push	r13
   1260e:	ef 92       	push	r14
   12610:	0f 93       	push	r16
   12612:	1f 93       	push	r17
   12614:	cf 93       	push	r28
   12616:	df 93       	push	r29
   12618:	cd b7       	in	r28, 0x3d	; 61
   1261a:	de b7       	in	r29, 0x3e	; 62
   1261c:	2a 97       	sbiw	r28, 0x0a	; 10
   1261e:	0f b6       	in	r0, 0x3f	; 63
   12620:	f8 94       	cli
   12622:	de bf       	out	0x3e, r29	; 62
   12624:	0f be       	out	0x3f, r0	; 63
   12626:	cd bf       	out	0x3d, r28	; 61
   12628:	8c ed       	ldi	r24, 0xDC	; 220
   1262a:	9c e1       	ldi	r25, 0x1C	; 28
   1262c:	a0 e0       	ldi	r26, 0x00	; 0
   1262e:	ed b7       	in	r30, 0x3d	; 61
   12630:	fe b7       	in	r31, 0x3e	; 62
   12632:	81 83       	std	Z+1, r24	; 0x01
   12634:	92 83       	std	Z+2, r25	; 0x02
   12636:	a3 83       	std	Z+3, r26	; 0x03
   12638:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1263c:	0a ee       	ldi	r16, 0xEA	; 234
   1263e:	1e e1       	ldi	r17, 0x1E	; 30
   12640:	8e eb       	ldi	r24, 0xBE	; 190
   12642:	9c e1       	ldi	r25, 0x1C	; 28
   12644:	6c 01       	movw	r12, r24
   12646:	e1 2c       	mov	r14, r1
   12648:	80 ec       	ldi	r24, 0xC0	; 192
   1264a:	9c e1       	ldi	r25, 0x1C	; 28
   1264c:	3c 01       	movw	r6, r24
   1264e:	81 2c       	mov	r8, r1
   12650:	89 ec       	ldi	r24, 0xC9	; 201
   12652:	9c e1       	ldi	r25, 0x1C	; 28
   12654:	1c 01       	movw	r2, r24
   12656:	41 2c       	mov	r4, r1
   12658:	83 ed       	ldi	r24, 0xD3	; 211
   1265a:	9c e1       	ldi	r25, 0x1C	; 28
   1265c:	9c 01       	movw	r18, r24
   1265e:	40 e0       	ldi	r20, 0x00	; 0
   12660:	2e 83       	std	Y+6, r18	; 0x06
   12662:	3f 83       	std	Y+7, r19	; 0x07
   12664:	48 87       	std	Y+8, r20	; 0x08
   12666:	f8 01       	movw	r30, r16
   12668:	80 81       	ld	r24, Z
   1266a:	88 23       	and	r24, r24
   1266c:	09 f4       	brne	.+2      	; 0x12670 <display_Addresses+0x72>
   1266e:	76 c0       	rjmp	.+236    	; 0x1275c <display_Addresses+0x15e>
   12670:	83 30       	cpi	r24, 0x03	; 3
   12672:	21 f0       	breq	.+8      	; 0x1267c <display_Addresses+0x7e>
   12674:	81 30       	cpi	r24, 0x01	; 1
   12676:	09 f0       	breq	.+2      	; 0x1267a <display_Addresses+0x7c>
   12678:	57 c0       	rjmp	.+174    	; 0x12728 <display_Addresses+0x12a>
   1267a:	1f c0       	rjmp	.+62     	; 0x126ba <display_Addresses+0xbc>
   1267c:	f8 01       	movw	r30, r16
   1267e:	87 81       	ldd	r24, Z+7	; 0x07
   12680:	90 85       	ldd	r25, Z+8	; 0x08
   12682:	90 93 5f 19 	sts	0x195F, r25	; 0x80195f <SS80p+0x1>
   12686:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <SS80p>
   1268a:	fc 01       	movw	r30, r24
   1268c:	84 81       	ldd	r24, Z+4	; 0x04
   1268e:	95 81       	ldd	r25, Z+5	; 0x05
   12690:	ed b7       	in	r30, 0x3d	; 61
   12692:	fe b7       	in	r31, 0x3e	; 62
   12694:	95 83       	std	Z+5, r25	; 0x05
   12696:	84 83       	std	Z+4, r24	; 0x04
   12698:	2e 81       	ldd	r18, Y+6	; 0x06
   1269a:	3f 81       	ldd	r19, Y+7	; 0x07
   1269c:	48 85       	ldd	r20, Y+8	; 0x08
   1269e:	21 83       	std	Z+1, r18	; 0x01
   126a0:	32 83       	std	Z+2, r19	; 0x02
   126a2:	43 83       	std	Z+3, r20	; 0x03
   126a4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   126a8:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   126ac:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   126b0:	42 81       	ldd	r20, Z+2	; 0x02
   126b2:	53 81       	ldd	r21, Z+3	; 0x03
   126b4:	64 e0       	ldi	r22, 0x04	; 4
   126b6:	82 e1       	ldi	r24, 0x12	; 18
   126b8:	47 df       	rcall	.-370    	; 0x12548 <print_tok_str>
   126ba:	f8 01       	movw	r30, r16
   126bc:	80 81       	ld	r24, Z
   126be:	81 30       	cpi	r24, 0x01	; 1
   126c0:	d9 f4       	brne	.+54     	; 0x126f8 <display_Addresses+0xfa>
   126c2:	87 81       	ldd	r24, Z+7	; 0x07
   126c4:	90 85       	ldd	r25, Z+8	; 0x08
   126c6:	90 93 5b 19 	sts	0x195B, r25	; 0x80195b <AMIGOp+0x1>
   126ca:	80 93 5a 19 	sts	0x195A, r24	; 0x80195a <AMIGOp>
   126ce:	fc 01       	movw	r30, r24
   126d0:	84 81       	ldd	r24, Z+4	; 0x04
   126d2:	95 81       	ldd	r25, Z+5	; 0x05
   126d4:	ed b7       	in	r30, 0x3d	; 61
   126d6:	fe b7       	in	r31, 0x3e	; 62
   126d8:	95 83       	std	Z+5, r25	; 0x05
   126da:	84 83       	std	Z+4, r24	; 0x04
   126dc:	21 82       	std	Z+1, r2	; 0x01
   126de:	32 82       	std	Z+2, r3	; 0x02
   126e0:	43 82       	std	Z+3, r4	; 0x03
   126e2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   126e6:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   126ea:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   126ee:	42 81       	ldd	r20, Z+2	; 0x02
   126f0:	53 81       	ldd	r21, Z+3	; 0x03
   126f2:	64 e0       	ldi	r22, 0x04	; 4
   126f4:	82 e1       	ldi	r24, 0x12	; 18
   126f6:	28 df       	rcall	.-432    	; 0x12548 <print_tok_str>
   126f8:	f8 01       	movw	r30, r16
   126fa:	21 81       	ldd	r18, Z+1	; 0x01
   126fc:	30 e0       	ldi	r19, 0x00	; 0
   126fe:	40 e0       	ldi	r20, 0x00	; 0
   12700:	50 e0       	ldi	r21, 0x00	; 0
   12702:	64 e0       	ldi	r22, 0x04	; 4
   12704:	81 e0       	ldi	r24, 0x01	; 1
   12706:	e0 de       	rcall	.-576    	; 0x124c8 <print_tok_val>
   12708:	f8 01       	movw	r30, r16
   1270a:	22 81       	ldd	r18, Z+2	; 0x02
   1270c:	30 e0       	ldi	r19, 0x00	; 0
   1270e:	40 e0       	ldi	r20, 0x00	; 0
   12710:	50 e0       	ldi	r21, 0x00	; 0
   12712:	64 e0       	ldi	r22, 0x04	; 4
   12714:	8f e1       	ldi	r24, 0x1F	; 31
   12716:	d8 de       	rcall	.-592    	; 0x124c8 <print_tok_val>
   12718:	f8 01       	movw	r30, r16
   1271a:	23 81       	ldd	r18, Z+3	; 0x03
   1271c:	34 81       	ldd	r19, Z+4	; 0x04
   1271e:	45 81       	ldd	r20, Z+5	; 0x05
   12720:	56 81       	ldd	r21, Z+6	; 0x06
   12722:	64 e0       	ldi	r22, 0x04	; 4
   12724:	83 e0       	ldi	r24, 0x03	; 3
   12726:	d0 de       	rcall	.-608    	; 0x124c8 <print_tok_val>
   12728:	f8 01       	movw	r30, r16
   1272a:	80 81       	ld	r24, Z
   1272c:	84 30       	cpi	r24, 0x04	; 4
   1272e:	79 f4       	brne	.+30     	; 0x1274e <display_Addresses+0x150>
   12730:	ed b7       	in	r30, 0x3d	; 61
   12732:	fe b7       	in	r31, 0x3e	; 62
   12734:	61 82       	std	Z+1, r6	; 0x01
   12736:	72 82       	std	Z+2, r7	; 0x02
   12738:	83 82       	std	Z+3, r8	; 0x03
   1273a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1273e:	f8 01       	movw	r30, r16
   12740:	21 81       	ldd	r18, Z+1	; 0x01
   12742:	30 e0       	ldi	r19, 0x00	; 0
   12744:	40 e0       	ldi	r20, 0x00	; 0
   12746:	50 e0       	ldi	r21, 0x00	; 0
   12748:	64 e0       	ldi	r22, 0x04	; 4
   1274a:	81 e0       	ldi	r24, 0x01	; 1
   1274c:	bd de       	rcall	.-646    	; 0x124c8 <print_tok_val>
   1274e:	ed b7       	in	r30, 0x3d	; 61
   12750:	fe b7       	in	r31, 0x3e	; 62
   12752:	c1 82       	std	Z+1, r12	; 0x01
   12754:	d2 82       	std	Z+2, r13	; 0x02
   12756:	e3 82       	std	Z+3, r14	; 0x03
   12758:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1275c:	05 5f       	subi	r16, 0xF5	; 245
   1275e:	1f 4f       	sbci	r17, 0xFF	; 255
   12760:	ff e1       	ldi	r31, 0x1F	; 31
   12762:	0e 36       	cpi	r16, 0x6E	; 110
   12764:	1f 07       	cpc	r17, r31
   12766:	09 f0       	breq	.+2      	; 0x1276a <display_Addresses+0x16c>
   12768:	7e cf       	rjmp	.-260    	; 0x12666 <display_Addresses+0x68>
   1276a:	8c eb       	ldi	r24, 0xBC	; 188
   1276c:	9c e1       	ldi	r25, 0x1C	; 28
   1276e:	a0 e0       	ldi	r26, 0x00	; 0
   12770:	ed b7       	in	r30, 0x3d	; 61
   12772:	fe b7       	in	r31, 0x3e	; 62
   12774:	81 83       	std	Z+1, r24	; 0x01
   12776:	92 83       	std	Z+2, r25	; 0x02
   12778:	a3 83       	std	Z+3, r26	; 0x03
   1277a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1277e:	2a 96       	adiw	r28, 0x0a	; 10
   12780:	0f b6       	in	r0, 0x3f	; 63
   12782:	f8 94       	cli
   12784:	de bf       	out	0x3e, r29	; 62
   12786:	0f be       	out	0x3f, r0	; 63
   12788:	cd bf       	out	0x3d, r28	; 61
   1278a:	df 91       	pop	r29
   1278c:	cf 91       	pop	r28
   1278e:	1f 91       	pop	r17
   12790:	0f 91       	pop	r16
   12792:	ef 90       	pop	r14
   12794:	df 90       	pop	r13
   12796:	cf 90       	pop	r12
   12798:	8f 90       	pop	r8
   1279a:	7f 90       	pop	r7
   1279c:	6f 90       	pop	r6
   1279e:	4f 90       	pop	r4
   127a0:	3f 90       	pop	r3
   127a2:	2f 90       	pop	r2
   127a4:	08 95       	ret

000127a6 <display_Config>:
   127a6:	2f 92       	push	r2
   127a8:	3f 92       	push	r3
   127aa:	4f 92       	push	r4
   127ac:	6f 92       	push	r6
   127ae:	7f 92       	push	r7
   127b0:	8f 92       	push	r8
   127b2:	af 92       	push	r10
   127b4:	bf 92       	push	r11
   127b6:	cf 92       	push	r12
   127b8:	df 92       	push	r13
   127ba:	ef 92       	push	r14
   127bc:	0f 93       	push	r16
   127be:	1f 93       	push	r17
   127c0:	cf 93       	push	r28
   127c2:	df 93       	push	r29
   127c4:	cd b7       	in	r28, 0x3d	; 61
   127c6:	de b7       	in	r29, 0x3e	; 62
   127c8:	62 97       	sbiw	r28, 0x12	; 18
   127ca:	0f b6       	in	r0, 0x3f	; 63
   127cc:	f8 94       	cli
   127ce:	de bf       	out	0x3e, r29	; 62
   127d0:	0f be       	out	0x3f, r0	; 63
   127d2:	cd bf       	out	0x3d, r28	; 61
   127d4:	5c 01       	movw	r10, r24
   127d6:	8c e9       	ldi	r24, 0x9C	; 156
   127d8:	9c e1       	ldi	r25, 0x1C	; 28
   127da:	a0 e0       	ldi	r26, 0x00	; 0
   127dc:	ed b7       	in	r30, 0x3d	; 61
   127de:	fe b7       	in	r31, 0x3e	; 62
   127e0:	81 83       	std	Z+1, r24	; 0x01
   127e2:	92 83       	std	Z+2, r25	; 0x02
   127e4:	a3 83       	std	Z+3, r26	; 0x03
   127e6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   127ea:	0a ee       	ldi	r16, 0xEA	; 234
   127ec:	1e e1       	ldi	r17, 0x1E	; 30
   127ee:	81 e2       	ldi	r24, 0x21	; 33
   127f0:	9c e1       	ldi	r25, 0x1C	; 28
   127f2:	9c 01       	movw	r18, r24
   127f4:	40 e0       	ldi	r20, 0x00	; 0
   127f6:	28 87       	std	Y+8, r18	; 0x08
   127f8:	39 87       	std	Y+9, r19	; 0x09
   127fa:	4a 87       	std	Y+10, r20	; 0x0a
   127fc:	86 e5       	ldi	r24, 0x56	; 86
   127fe:	9c e1       	ldi	r25, 0x1C	; 28
   12800:	6c 01       	movw	r12, r24
   12802:	e1 2c       	mov	r14, r1
   12804:	87 e3       	ldi	r24, 0x37	; 55
   12806:	9c e1       	ldi	r25, 0x1C	; 28
   12808:	3c 01       	movw	r6, r24
   1280a:	81 2c       	mov	r8, r1
   1280c:	83 e2       	ldi	r24, 0x23	; 35
   1280e:	9c e1       	ldi	r25, 0x1C	; 28
   12810:	1c 01       	movw	r2, r24
   12812:	41 2c       	mov	r4, r1
   12814:	83 e9       	ldi	r24, 0x93	; 147
   12816:	9c e1       	ldi	r25, 0x1C	; 28
   12818:	9c 01       	movw	r18, r24
   1281a:	40 e0       	ldi	r20, 0x00	; 0
   1281c:	2b 87       	std	Y+11, r18	; 0x0b
   1281e:	3c 87       	std	Y+12, r19	; 0x0c
   12820:	4d 87       	std	Y+13, r20	; 0x0d
   12822:	84 e7       	ldi	r24, 0x74	; 116
   12824:	9c e1       	ldi	r25, 0x1C	; 28
   12826:	9c 01       	movw	r18, r24
   12828:	40 e0       	ldi	r20, 0x00	; 0
   1282a:	2e 87       	std	Y+14, r18	; 0x0e
   1282c:	3f 87       	std	Y+15, r19	; 0x0f
   1282e:	48 8b       	std	Y+16, r20	; 0x10
   12830:	f8 01       	movw	r30, r16
   12832:	80 81       	ld	r24, Z
   12834:	88 23       	and	r24, r24
   12836:	09 f4       	brne	.+2      	; 0x1283a <display_Config+0x94>
   12838:	16 c2       	rjmp	.+1068   	; 0x12c66 <display_Config+0x4c0>
   1283a:	83 30       	cpi	r24, 0x03	; 3
   1283c:	09 f0       	breq	.+2      	; 0x12840 <display_Config+0x9a>
   1283e:	3f c1       	rjmp	.+638    	; 0x12abe <display_Config+0x318>
   12840:	27 81       	ldd	r18, Z+7	; 0x07
   12842:	30 85       	ldd	r19, Z+8	; 0x08
   12844:	3a 8b       	std	Y+18, r19	; 0x12
   12846:	29 8b       	std	Y+17, r18	; 0x11
   12848:	f9 01       	movw	r30, r18
   1284a:	84 81       	ldd	r24, Z+4	; 0x04
   1284c:	95 81       	ldd	r25, Z+5	; 0x05
   1284e:	ed b7       	in	r30, 0x3d	; 61
   12850:	fe b7       	in	r31, 0x3e	; 62
   12852:	95 83       	std	Z+5, r25	; 0x05
   12854:	84 83       	std	Z+4, r24	; 0x04
   12856:	2b 85       	ldd	r18, Y+11	; 0x0b
   12858:	3c 85       	ldd	r19, Y+12	; 0x0c
   1285a:	4d 85       	ldd	r20, Y+13	; 0x0d
   1285c:	21 83       	std	Z+1, r18	; 0x01
   1285e:	32 83       	std	Z+2, r19	; 0x02
   12860:	43 83       	std	Z+3, r20	; 0x03
   12862:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   12866:	e9 89       	ldd	r30, Y+17	; 0x11
   12868:	fa 89       	ldd	r31, Y+18	; 0x12
   1286a:	80 81       	ld	r24, Z
   1286c:	90 e0       	ldi	r25, 0x00	; 0
   1286e:	ed b7       	in	r30, 0x3d	; 61
   12870:	fe b7       	in	r31, 0x3e	; 62
   12872:	95 83       	std	Z+5, r25	; 0x05
   12874:	84 83       	std	Z+4, r24	; 0x04
   12876:	2e 85       	ldd	r18, Y+14	; 0x0e
   12878:	3f 85       	ldd	r19, Y+15	; 0x0f
   1287a:	48 89       	ldd	r20, Y+16	; 0x10
   1287c:	21 83       	std	Z+1, r18	; 0x01
   1287e:	32 83       	std	Z+2, r19	; 0x02
   12880:	43 83       	std	Z+3, r20	; 0x03
   12882:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   12886:	64 e0       	ldi	r22, 0x04	; 4
   12888:	89 e0       	ldi	r24, 0x09	; 9
   1288a:	93 de       	rcall	.-730    	; 0x125b2 <print_tok>
   1288c:	e9 89       	ldd	r30, Y+17	; 0x11
   1288e:	fa 89       	ldd	r31, Y+18	; 0x12
   12890:	20 81       	ld	r18, Z
   12892:	30 e0       	ldi	r19, 0x00	; 0
   12894:	40 e0       	ldi	r20, 0x00	; 0
   12896:	50 e0       	ldi	r21, 0x00	; 0
   12898:	68 e0       	ldi	r22, 0x08	; 8
   1289a:	81 e0       	ldi	r24, 0x01	; 1
   1289c:	15 de       	rcall	.-982    	; 0x124c8 <print_tok_val>
   1289e:	e9 89       	ldd	r30, Y+17	; 0x11
   128a0:	fa 89       	ldd	r31, Y+18	; 0x12
   128a2:	21 81       	ldd	r18, Z+1	; 0x01
   128a4:	30 e0       	ldi	r19, 0x00	; 0
   128a6:	40 e0       	ldi	r20, 0x00	; 0
   128a8:	50 e0       	ldi	r21, 0x00	; 0
   128aa:	68 e0       	ldi	r22, 0x08	; 8
   128ac:	8f e1       	ldi	r24, 0x1F	; 31
   128ae:	0c de       	rcall	.-1000   	; 0x124c8 <print_tok_val>
   128b0:	e9 89       	ldd	r30, Y+17	; 0x11
   128b2:	fa 89       	ldd	r31, Y+18	; 0x12
   128b4:	42 81       	ldd	r20, Z+2	; 0x02
   128b6:	53 81       	ldd	r21, Z+3	; 0x03
   128b8:	68 e0       	ldi	r22, 0x08	; 8
   128ba:	82 e1       	ldi	r24, 0x12	; 18
   128bc:	45 de       	rcall	.-886    	; 0x12548 <print_tok_str>
   128be:	64 e0       	ldi	r22, 0x04	; 4
   128c0:	81 e1       	ldi	r24, 0x11	; 17
   128c2:	77 de       	rcall	.-786    	; 0x125b2 <print_tok>
   128c4:	64 e0       	ldi	r22, 0x04	; 4
   128c6:	85 e1       	ldi	r24, 0x15	; 21
   128c8:	74 de       	rcall	.-792    	; 0x125b2 <print_tok>
   128ca:	e9 89       	ldd	r30, Y+17	; 0x11
   128cc:	fa 89       	ldd	r31, Y+18	; 0x12
   128ce:	26 81       	ldd	r18, Z+6	; 0x06
   128d0:	37 81       	ldd	r19, Z+7	; 0x07
   128d2:	40 e0       	ldi	r20, 0x00	; 0
   128d4:	50 e0       	ldi	r21, 0x00	; 0
   128d6:	68 e0       	ldi	r22, 0x08	; 8
   128d8:	87 e1       	ldi	r24, 0x17	; 23
   128da:	f6 dd       	rcall	.-1044   	; 0x124c8 <print_tok_val>
   128dc:	64 e0       	ldi	r22, 0x04	; 4
   128de:	81 e1       	ldi	r24, 0x11	; 17
   128e0:	68 de       	rcall	.-816    	; 0x125b2 <print_tok>
   128e2:	a1 14       	cp	r10, r1
   128e4:	b1 04       	cpc	r11, r1
   128e6:	09 f1       	breq	.+66     	; 0x1292a <display_Config+0x184>
   128e8:	64 e0       	ldi	r22, 0x04	; 4
   128ea:	8b e0       	ldi	r24, 0x0B	; 11
   128ec:	62 de       	rcall	.-828    	; 0x125b2 <print_tok>
   128ee:	e9 89       	ldd	r30, Y+17	; 0x11
   128f0:	fa 89       	ldd	r31, Y+18	; 0x12
   128f2:	20 85       	ldd	r18, Z+8	; 0x08
   128f4:	31 85       	ldd	r19, Z+9	; 0x09
   128f6:	40 e0       	ldi	r20, 0x00	; 0
   128f8:	50 e0       	ldi	r21, 0x00	; 0
   128fa:	68 e0       	ldi	r22, 0x08	; 8
   128fc:	88 e2       	ldi	r24, 0x28	; 40
   128fe:	e4 dd       	rcall	.-1080   	; 0x124c8 <print_tok_val>
   12900:	e9 89       	ldd	r30, Y+17	; 0x11
   12902:	fa 89       	ldd	r31, Y+18	; 0x12
   12904:	22 85       	ldd	r18, Z+10	; 0x0a
   12906:	33 85       	ldd	r19, Z+11	; 0x0b
   12908:	40 e0       	ldi	r20, 0x00	; 0
   1290a:	50 e0       	ldi	r21, 0x00	; 0
   1290c:	68 e0       	ldi	r22, 0x08	; 8
   1290e:	85 e2       	ldi	r24, 0x25	; 37
   12910:	db dd       	rcall	.-1098   	; 0x124c8 <print_tok_val>
   12912:	e9 89       	ldd	r30, Y+17	; 0x11
   12914:	fa 89       	ldd	r31, Y+18	; 0x12
   12916:	24 85       	ldd	r18, Z+12	; 0x0c
   12918:	30 e0       	ldi	r19, 0x00	; 0
   1291a:	40 e0       	ldi	r20, 0x00	; 0
   1291c:	50 e0       	ldi	r21, 0x00	; 0
   1291e:	68 e0       	ldi	r22, 0x08	; 8
   12920:	86 e2       	ldi	r24, 0x26	; 38
   12922:	d2 dd       	rcall	.-1116   	; 0x124c8 <print_tok_val>
   12924:	64 e0       	ldi	r22, 0x04	; 4
   12926:	81 e1       	ldi	r24, 0x11	; 17
   12928:	44 de       	rcall	.-888    	; 0x125b2 <print_tok>
   1292a:	64 e0       	ldi	r22, 0x04	; 4
   1292c:	87 e2       	ldi	r24, 0x27	; 39
   1292e:	41 de       	rcall	.-894    	; 0x125b2 <print_tok>
   12930:	a1 14       	cp	r10, r1
   12932:	b1 04       	cpc	r11, r1
   12934:	49 f0       	breq	.+18     	; 0x12948 <display_Config+0x1a2>
   12936:	e9 89       	ldd	r30, Y+17	; 0x11
   12938:	fa 89       	ldd	r31, Y+18	; 0x12
   1293a:	25 85       	ldd	r18, Z+13	; 0x0d
   1293c:	30 e0       	ldi	r19, 0x00	; 0
   1293e:	40 e0       	ldi	r20, 0x00	; 0
   12940:	50 e0       	ldi	r21, 0x00	; 0
   12942:	68 e0       	ldi	r22, 0x08	; 8
   12944:	89 e2       	ldi	r24, 0x29	; 41
   12946:	c0 dd       	rcall	.-1152   	; 0x124c8 <print_tok_val>
   12948:	e9 89       	ldd	r30, Y+17	; 0x11
   1294a:	fa 89       	ldd	r31, Y+18	; 0x12
   1294c:	26 85       	ldd	r18, Z+14	; 0x0e
   1294e:	37 85       	ldd	r19, Z+15	; 0x0f
   12950:	40 89       	ldd	r20, Z+16	; 0x10
   12952:	51 89       	ldd	r21, Z+17	; 0x11
   12954:	68 e0       	ldi	r22, 0x08	; 8
   12956:	8f e0       	ldi	r24, 0x0F	; 15
   12958:	b7 dd       	rcall	.-1170   	; 0x124c8 <print_tok_val>
   1295a:	a1 14       	cp	r10, r1
   1295c:	b1 04       	cpc	r11, r1
   1295e:	09 f4       	brne	.+2      	; 0x12962 <display_Config+0x1bc>
   12960:	5a c0       	rjmp	.+180    	; 0x12a16 <display_Config+0x270>
   12962:	e9 89       	ldd	r30, Y+17	; 0x11
   12964:	fa 89       	ldd	r31, Y+18	; 0x12
   12966:	22 89       	ldd	r18, Z+18	; 0x12
   12968:	33 89       	ldd	r19, Z+19	; 0x13
   1296a:	40 e0       	ldi	r20, 0x00	; 0
   1296c:	50 e0       	ldi	r21, 0x00	; 0
   1296e:	68 e0       	ldi	r22, 0x08	; 8
   12970:	87 e0       	ldi	r24, 0x07	; 7
   12972:	aa dd       	rcall	.-1196   	; 0x124c8 <print_tok_val>
   12974:	e9 89       	ldd	r30, Y+17	; 0x11
   12976:	fa 89       	ldd	r31, Y+18	; 0x12
   12978:	24 89       	ldd	r18, Z+20	; 0x14
   1297a:	30 e0       	ldi	r19, 0x00	; 0
   1297c:	40 e0       	ldi	r20, 0x00	; 0
   1297e:	50 e0       	ldi	r21, 0x00	; 0
   12980:	68 e0       	ldi	r22, 0x08	; 8
   12982:	85 e0       	ldi	r24, 0x05	; 5
   12984:	a1 dd       	rcall	.-1214   	; 0x124c8 <print_tok_val>
   12986:	e9 89       	ldd	r30, Y+17	; 0x11
   12988:	fa 89       	ldd	r31, Y+18	; 0x12
   1298a:	25 89       	ldd	r18, Z+21	; 0x15
   1298c:	30 e0       	ldi	r19, 0x00	; 0
   1298e:	40 e0       	ldi	r20, 0x00	; 0
   12990:	50 e0       	ldi	r21, 0x00	; 0
   12992:	68 e0       	ldi	r22, 0x08	; 8
   12994:	86 e0       	ldi	r24, 0x06	; 6
   12996:	98 dd       	rcall	.-1232   	; 0x124c8 <print_tok_val>
   12998:	e9 89       	ldd	r30, Y+17	; 0x11
   1299a:	fa 89       	ldd	r31, Y+18	; 0x12
   1299c:	26 89       	ldd	r18, Z+22	; 0x16
   1299e:	37 89       	ldd	r19, Z+23	; 0x17
   129a0:	40 e0       	ldi	r20, 0x00	; 0
   129a2:	50 e0       	ldi	r21, 0x00	; 0
   129a4:	68 e0       	ldi	r22, 0x08	; 8
   129a6:	84 e0       	ldi	r24, 0x04	; 4
   129a8:	8f dd       	rcall	.-1250   	; 0x124c8 <print_tok_val>
   129aa:	e9 89       	ldd	r30, Y+17	; 0x11
   129ac:	fa 89       	ldd	r31, Y+18	; 0x12
   129ae:	20 8d       	ldd	r18, Z+24	; 0x18
   129b0:	31 8d       	ldd	r19, Z+25	; 0x19
   129b2:	40 e0       	ldi	r20, 0x00	; 0
   129b4:	50 e0       	ldi	r21, 0x00	; 0
   129b6:	68 e0       	ldi	r22, 0x08	; 8
   129b8:	8a e0       	ldi	r24, 0x0A	; 10
   129ba:	86 dd       	rcall	.-1268   	; 0x124c8 <print_tok_val>
   129bc:	e9 89       	ldd	r30, Y+17	; 0x11
   129be:	fa 89       	ldd	r31, Y+18	; 0x12
   129c0:	22 8d       	ldd	r18, Z+26	; 0x1a
   129c2:	33 8d       	ldd	r19, Z+27	; 0x1b
   129c4:	40 e0       	ldi	r20, 0x00	; 0
   129c6:	50 e0       	ldi	r21, 0x00	; 0
   129c8:	68 e0       	ldi	r22, 0x08	; 8
   129ca:	8e e1       	ldi	r24, 0x1E	; 30
   129cc:	7d dd       	rcall	.-1286   	; 0x124c8 <print_tok_val>
   129ce:	e9 89       	ldd	r30, Y+17	; 0x11
   129d0:	fa 89       	ldd	r31, Y+18	; 0x12
   129d2:	24 8d       	ldd	r18, Z+28	; 0x1c
   129d4:	35 8d       	ldd	r19, Z+29	; 0x1d
   129d6:	40 e0       	ldi	r20, 0x00	; 0
   129d8:	50 e0       	ldi	r21, 0x00	; 0
   129da:	68 e0       	ldi	r22, 0x08	; 8
   129dc:	80 e0       	ldi	r24, 0x00	; 0
   129de:	74 dd       	rcall	.-1304   	; 0x124c8 <print_tok_val>
   129e0:	e9 89       	ldd	r30, Y+17	; 0x11
   129e2:	fa 89       	ldd	r31, Y+18	; 0x12
   129e4:	26 8d       	ldd	r18, Z+30	; 0x1e
   129e6:	30 e0       	ldi	r19, 0x00	; 0
   129e8:	40 e0       	ldi	r20, 0x00	; 0
   129ea:	50 e0       	ldi	r21, 0x00	; 0
   129ec:	68 e0       	ldi	r22, 0x08	; 8
   129ee:	8c e1       	ldi	r24, 0x1C	; 28
   129f0:	6b dd       	rcall	.-1322   	; 0x124c8 <print_tok_val>
   129f2:	e9 89       	ldd	r30, Y+17	; 0x11
   129f4:	fa 89       	ldd	r31, Y+18	; 0x12
   129f6:	27 8d       	ldd	r18, Z+31	; 0x1f
   129f8:	30 e0       	ldi	r19, 0x00	; 0
   129fa:	40 e0       	ldi	r20, 0x00	; 0
   129fc:	50 e0       	ldi	r21, 0x00	; 0
   129fe:	68 e0       	ldi	r22, 0x08	; 8
   12a00:	83 e1       	ldi	r24, 0x13	; 19
   12a02:	62 dd       	rcall	.-1340   	; 0x124c8 <print_tok_val>
   12a04:	e9 89       	ldd	r30, Y+17	; 0x11
   12a06:	fa 89       	ldd	r31, Y+18	; 0x12
   12a08:	20 a1       	ldd	r18, Z+32	; 0x20
   12a0a:	30 e0       	ldi	r19, 0x00	; 0
   12a0c:	40 e0       	ldi	r20, 0x00	; 0
   12a0e:	50 e0       	ldi	r21, 0x00	; 0
   12a10:	68 e0       	ldi	r22, 0x08	; 8
   12a12:	81 e2       	ldi	r24, 0x21	; 33
   12a14:	59 dd       	rcall	.-1358   	; 0x124c8 <print_tok_val>
   12a16:	64 e0       	ldi	r22, 0x04	; 4
   12a18:	81 e1       	ldi	r24, 0x11	; 17
   12a1a:	cb dd       	rcall	.-1130   	; 0x125b2 <print_tok>
   12a1c:	a1 14       	cp	r10, r1
   12a1e:	b1 04       	cpc	r11, r1
   12a20:	99 f1       	breq	.+102    	; 0x12a88 <display_Config+0x2e2>
   12a22:	64 e0       	ldi	r22, 0x04	; 4
   12a24:	8a e2       	ldi	r24, 0x2A	; 42
   12a26:	c5 dd       	rcall	.-1142   	; 0x125b2 <print_tok>
   12a28:	e9 89       	ldd	r30, Y+17	; 0x11
   12a2a:	fa 89       	ldd	r31, Y+18	; 0x12
   12a2c:	21 a1       	ldd	r18, Z+33	; 0x21
   12a2e:	32 a1       	ldd	r19, Z+34	; 0x22
   12a30:	43 a1       	ldd	r20, Z+35	; 0x23
   12a32:	54 a1       	ldd	r21, Z+36	; 0x24
   12a34:	68 e0       	ldi	r22, 0x08	; 8
   12a36:	8a e1       	ldi	r24, 0x1A	; 26
   12a38:	47 dd       	rcall	.-1394   	; 0x124c8 <print_tok_val>
   12a3a:	e9 89       	ldd	r30, Y+17	; 0x11
   12a3c:	fa 89       	ldd	r31, Y+18	; 0x12
   12a3e:	25 a1       	ldd	r18, Z+37	; 0x25
   12a40:	30 e0       	ldi	r19, 0x00	; 0
   12a42:	40 e0       	ldi	r20, 0x00	; 0
   12a44:	50 e0       	ldi	r21, 0x00	; 0
   12a46:	68 e0       	ldi	r22, 0x08	; 8
   12a48:	8b e1       	ldi	r24, 0x1B	; 27
   12a4a:	3e dd       	rcall	.-1412   	; 0x124c8 <print_tok_val>
   12a4c:	e9 89       	ldd	r30, Y+17	; 0x11
   12a4e:	fa 89       	ldd	r31, Y+18	; 0x12
   12a50:	26 a1       	ldd	r18, Z+38	; 0x26
   12a52:	37 a1       	ldd	r19, Z+39	; 0x27
   12a54:	40 e0       	ldi	r20, 0x00	; 0
   12a56:	50 e0       	ldi	r21, 0x00	; 0
   12a58:	68 e0       	ldi	r22, 0x08	; 8
   12a5a:	8d e1       	ldi	r24, 0x1D	; 29
   12a5c:	35 dd       	rcall	.-1430   	; 0x124c8 <print_tok_val>
   12a5e:	e9 89       	ldd	r30, Y+17	; 0x11
   12a60:	fa 89       	ldd	r31, Y+18	; 0x12
   12a62:	20 a5       	ldd	r18, Z+40	; 0x28
   12a64:	31 a5       	ldd	r19, Z+41	; 0x29
   12a66:	42 a5       	ldd	r20, Z+42	; 0x2a
   12a68:	53 a5       	ldd	r21, Z+43	; 0x2b
   12a6a:	68 e0       	ldi	r22, 0x08	; 8
   12a6c:	89 e1       	ldi	r24, 0x19	; 25
   12a6e:	2c dd       	rcall	.-1448   	; 0x124c8 <print_tok_val>
   12a70:	e9 89       	ldd	r30, Y+17	; 0x11
   12a72:	fa 89       	ldd	r31, Y+18	; 0x12
   12a74:	24 a5       	ldd	r18, Z+44	; 0x2c
   12a76:	30 e0       	ldi	r19, 0x00	; 0
   12a78:	40 e0       	ldi	r20, 0x00	; 0
   12a7a:	50 e0       	ldi	r21, 0x00	; 0
   12a7c:	68 e0       	ldi	r22, 0x08	; 8
   12a7e:	88 e1       	ldi	r24, 0x18	; 24
   12a80:	23 dd       	rcall	.-1466   	; 0x124c8 <print_tok_val>
   12a82:	64 e0       	ldi	r22, 0x04	; 4
   12a84:	81 e1       	ldi	r24, 0x11	; 17
   12a86:	95 dd       	rcall	.-1238   	; 0x125b2 <print_tok>
   12a88:	e9 89       	ldd	r30, Y+17	; 0x11
   12a8a:	fa 89       	ldd	r31, Y+18	; 0x12
   12a8c:	80 a5       	ldd	r24, Z+40	; 0x28
   12a8e:	91 a5       	ldd	r25, Z+41	; 0x29
   12a90:	a2 a5       	ldd	r26, Z+42	; 0x2a
   12a92:	b3 a5       	ldd	r27, Z+43	; 0x2b
   12a94:	01 96       	adiw	r24, 0x01	; 1
   12a96:	a1 1d       	adc	r26, r1
   12a98:	b1 1d       	adc	r27, r1
   12a9a:	ed b7       	in	r30, 0x3d	; 61
   12a9c:	fe b7       	in	r31, 0x3e	; 62
   12a9e:	84 83       	std	Z+4, r24	; 0x04
   12aa0:	95 83       	std	Z+5, r25	; 0x05
   12aa2:	a6 83       	std	Z+6, r26	; 0x06
   12aa4:	b7 83       	std	Z+7, r27	; 0x07
   12aa6:	20 e6       	ldi	r18, 0x60	; 96
   12aa8:	3c e1       	ldi	r19, 0x1C	; 28
   12aaa:	c9 01       	movw	r24, r18
   12aac:	a0 e0       	ldi	r26, 0x00	; 0
   12aae:	81 83       	std	Z+1, r24	; 0x01
   12ab0:	92 83       	std	Z+2, r25	; 0x02
   12ab2:	a3 83       	std	Z+3, r26	; 0x03
   12ab4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   12ab8:	60 e0       	ldi	r22, 0x00	; 0
   12aba:	81 e1       	ldi	r24, 0x11	; 17
   12abc:	7a dd       	rcall	.-1292   	; 0x125b2 <print_tok>
   12abe:	f8 01       	movw	r30, r16
   12ac0:	80 81       	ld	r24, Z
   12ac2:	81 30       	cpi	r24, 0x01	; 1
   12ac4:	09 f0       	breq	.+2      	; 0x12ac8 <display_Config+0x322>
   12ac6:	a8 c0       	rjmp	.+336    	; 0x12c18 <display_Config+0x472>
   12ac8:	27 81       	ldd	r18, Z+7	; 0x07
   12aca:	30 85       	ldd	r19, Z+8	; 0x08
   12acc:	3a 8b       	std	Y+18, r19	; 0x12
   12ace:	29 8b       	std	Y+17, r18	; 0x11
   12ad0:	f9 01       	movw	r30, r18
   12ad2:	84 81       	ldd	r24, Z+4	; 0x04
   12ad4:	95 81       	ldd	r25, Z+5	; 0x05
   12ad6:	ed b7       	in	r30, 0x3d	; 61
   12ad8:	fe b7       	in	r31, 0x3e	; 62
   12ada:	95 83       	std	Z+5, r25	; 0x05
   12adc:	84 83       	std	Z+4, r24	; 0x04
   12ade:	c1 82       	std	Z+1, r12	; 0x01
   12ae0:	d2 82       	std	Z+2, r13	; 0x02
   12ae2:	e3 82       	std	Z+3, r14	; 0x03
   12ae4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   12ae8:	e9 89       	ldd	r30, Y+17	; 0x11
   12aea:	fa 89       	ldd	r31, Y+18	; 0x12
   12aec:	80 81       	ld	r24, Z
   12aee:	90 e0       	ldi	r25, 0x00	; 0
   12af0:	ed b7       	in	r30, 0x3d	; 61
   12af2:	fe b7       	in	r31, 0x3e	; 62
   12af4:	95 83       	std	Z+5, r25	; 0x05
   12af6:	84 83       	std	Z+4, r24	; 0x04
   12af8:	61 82       	std	Z+1, r6	; 0x01
   12afa:	72 82       	std	Z+2, r7	; 0x02
   12afc:	83 82       	std	Z+3, r8	; 0x03
   12afe:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   12b02:	64 e0       	ldi	r22, 0x04	; 4
   12b04:	85 e1       	ldi	r24, 0x15	; 21
   12b06:	55 dd       	rcall	.-1366   	; 0x125b2 <print_tok>
   12b08:	e9 89       	ldd	r30, Y+17	; 0x11
   12b0a:	fa 89       	ldd	r31, Y+18	; 0x12
   12b0c:	20 81       	ld	r18, Z
   12b0e:	30 e0       	ldi	r19, 0x00	; 0
   12b10:	40 e0       	ldi	r20, 0x00	; 0
   12b12:	50 e0       	ldi	r21, 0x00	; 0
   12b14:	68 e0       	ldi	r22, 0x08	; 8
   12b16:	81 e0       	ldi	r24, 0x01	; 1
   12b18:	d7 dc       	rcall	.-1618   	; 0x124c8 <print_tok_val>
   12b1a:	e9 89       	ldd	r30, Y+17	; 0x11
   12b1c:	fa 89       	ldd	r31, Y+18	; 0x12
   12b1e:	21 81       	ldd	r18, Z+1	; 0x01
   12b20:	30 e0       	ldi	r19, 0x00	; 0
   12b22:	40 e0       	ldi	r20, 0x00	; 0
   12b24:	50 e0       	ldi	r21, 0x00	; 0
   12b26:	68 e0       	ldi	r22, 0x08	; 8
   12b28:	8f e1       	ldi	r24, 0x1F	; 31
   12b2a:	ce dc       	rcall	.-1636   	; 0x124c8 <print_tok_val>
   12b2c:	e9 89       	ldd	r30, Y+17	; 0x11
   12b2e:	fa 89       	ldd	r31, Y+18	; 0x12
   12b30:	42 81       	ldd	r20, Z+2	; 0x02
   12b32:	53 81       	ldd	r21, Z+3	; 0x03
   12b34:	68 e0       	ldi	r22, 0x08	; 8
   12b36:	82 e1       	ldi	r24, 0x12	; 18
   12b38:	07 dd       	rcall	.-1522   	; 0x12548 <print_tok_str>
   12b3a:	64 e0       	ldi	r22, 0x04	; 4
   12b3c:	81 e1       	ldi	r24, 0x11	; 17
   12b3e:	39 dd       	rcall	.-1422   	; 0x125b2 <print_tok>
   12b40:	64 e0       	ldi	r22, 0x04	; 4
   12b42:	89 e0       	ldi	r24, 0x09	; 9
   12b44:	36 dd       	rcall	.-1428   	; 0x125b2 <print_tok>
   12b46:	e9 89       	ldd	r30, Y+17	; 0x11
   12b48:	fa 89       	ldd	r31, Y+18	; 0x12
   12b4a:	26 81       	ldd	r18, Z+6	; 0x06
   12b4c:	37 81       	ldd	r19, Z+7	; 0x07
   12b4e:	40 e0       	ldi	r20, 0x00	; 0
   12b50:	50 e0       	ldi	r21, 0x00	; 0
   12b52:	68 e0       	ldi	r22, 0x08	; 8
   12b54:	87 e1       	ldi	r24, 0x17	; 23
   12b56:	b8 dc       	rcall	.-1680   	; 0x124c8 <print_tok_val>
   12b58:	64 e0       	ldi	r22, 0x04	; 4
   12b5a:	81 e1       	ldi	r24, 0x11	; 17
   12b5c:	2a dd       	rcall	.-1452   	; 0x125b2 <print_tok>
   12b5e:	a1 14       	cp	r10, r1
   12b60:	b1 04       	cpc	r11, r1
   12b62:	91 f1       	breq	.+100    	; 0x12bc8 <display_Config+0x422>
   12b64:	64 e0       	ldi	r22, 0x04	; 4
   12b66:	84 e1       	ldi	r24, 0x14	; 20
   12b68:	24 dd       	rcall	.-1464   	; 0x125b2 <print_tok>
   12b6a:	e9 89       	ldd	r30, Y+17	; 0x11
   12b6c:	fa 89       	ldd	r31, Y+18	; 0x12
   12b6e:	20 85       	ldd	r18, Z+8	; 0x08
   12b70:	31 85       	ldd	r19, Z+9	; 0x09
   12b72:	03 2e       	mov	r0, r19
   12b74:	00 0c       	add	r0, r0
   12b76:	44 0b       	sbc	r20, r20
   12b78:	55 0b       	sbc	r21, r21
   12b7a:	68 e0       	ldi	r22, 0x08	; 8
   12b7c:	88 e0       	ldi	r24, 0x08	; 8
   12b7e:	a4 dc       	rcall	.-1720   	; 0x124c8 <print_tok_val>
   12b80:	e9 89       	ldd	r30, Y+17	; 0x11
   12b82:	fa 89       	ldd	r31, Y+18	; 0x12
   12b84:	22 85       	ldd	r18, Z+10	; 0x0a
   12b86:	33 85       	ldd	r19, Z+11	; 0x0b
   12b88:	03 2e       	mov	r0, r19
   12b8a:	00 0c       	add	r0, r0
   12b8c:	44 0b       	sbc	r20, r20
   12b8e:	55 0b       	sbc	r21, r21
   12b90:	68 e0       	ldi	r22, 0x08	; 8
   12b92:	82 e2       	ldi	r24, 0x22	; 34
   12b94:	99 dc       	rcall	.-1742   	; 0x124c8 <print_tok_val>
   12b96:	e9 89       	ldd	r30, Y+17	; 0x11
   12b98:	fa 89       	ldd	r31, Y+18	; 0x12
   12b9a:	24 85       	ldd	r18, Z+12	; 0x0c
   12b9c:	35 85       	ldd	r19, Z+13	; 0x0d
   12b9e:	03 2e       	mov	r0, r19
   12ba0:	00 0c       	add	r0, r0
   12ba2:	44 0b       	sbc	r20, r20
   12ba4:	55 0b       	sbc	r21, r21
   12ba6:	68 e0       	ldi	r22, 0x08	; 8
   12ba8:	86 e1       	ldi	r24, 0x16	; 22
   12baa:	8e dc       	rcall	.-1764   	; 0x124c8 <print_tok_val>
   12bac:	e9 89       	ldd	r30, Y+17	; 0x11
   12bae:	fa 89       	ldd	r31, Y+18	; 0x12
   12bb0:	26 85       	ldd	r18, Z+14	; 0x0e
   12bb2:	37 85       	ldd	r19, Z+15	; 0x0f
   12bb4:	03 2e       	mov	r0, r19
   12bb6:	00 0c       	add	r0, r0
   12bb8:	44 0b       	sbc	r20, r20
   12bba:	55 0b       	sbc	r21, r21
   12bbc:	68 e0       	ldi	r22, 0x08	; 8
   12bbe:	8d e0       	ldi	r24, 0x0D	; 13
   12bc0:	83 dc       	rcall	.-1786   	; 0x124c8 <print_tok_val>
   12bc2:	64 e0       	ldi	r22, 0x04	; 4
   12bc4:	81 e1       	ldi	r24, 0x11	; 17
   12bc6:	f5 dc       	rcall	.-1558   	; 0x125b2 <print_tok>
   12bc8:	e9 89       	ldd	r30, Y+17	; 0x11
   12bca:	fa 89       	ldd	r31, Y+18	; 0x12
   12bcc:	46 85       	ldd	r20, Z+14	; 0x0e
   12bce:	57 85       	ldd	r21, Z+15	; 0x0f
   12bd0:	22 85       	ldd	r18, Z+10	; 0x0a
   12bd2:	33 85       	ldd	r19, Z+11	; 0x0b
   12bd4:	42 9f       	mul	r20, r18
   12bd6:	c0 01       	movw	r24, r0
   12bd8:	43 9f       	mul	r20, r19
   12bda:	90 0d       	add	r25, r0
   12bdc:	52 9f       	mul	r21, r18
   12bde:	90 0d       	add	r25, r0
   12be0:	11 24       	eor	r1, r1
   12be2:	44 85       	ldd	r20, Z+12	; 0x0c
   12be4:	55 85       	ldd	r21, Z+13	; 0x0d
   12be6:	84 9f       	mul	r24, r20
   12be8:	90 01       	movw	r18, r0
   12bea:	85 9f       	mul	r24, r21
   12bec:	30 0d       	add	r19, r0
   12bee:	94 9f       	mul	r25, r20
   12bf0:	30 0d       	add	r19, r0
   12bf2:	11 24       	eor	r1, r1
   12bf4:	c9 01       	movw	r24, r18
   12bf6:	33 0f       	add	r19, r19
   12bf8:	aa 0b       	sbc	r26, r26
   12bfa:	bb 0b       	sbc	r27, r27
   12bfc:	ed b7       	in	r30, 0x3d	; 61
   12bfe:	fe b7       	in	r31, 0x3e	; 62
   12c00:	84 83       	std	Z+4, r24	; 0x04
   12c02:	95 83       	std	Z+5, r25	; 0x05
   12c04:	a6 83       	std	Z+6, r26	; 0x06
   12c06:	b7 83       	std	Z+7, r27	; 0x07
   12c08:	21 82       	std	Z+1, r2	; 0x01
   12c0a:	32 82       	std	Z+2, r3	; 0x02
   12c0c:	43 82       	std	Z+3, r4	; 0x03
   12c0e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   12c12:	60 e0       	ldi	r22, 0x00	; 0
   12c14:	81 e1       	ldi	r24, 0x11	; 17
   12c16:	cd dc       	rcall	.-1638   	; 0x125b2 <print_tok>
   12c18:	f8 01       	movw	r30, r16
   12c1a:	80 81       	ld	r24, Z
   12c1c:	84 30       	cpi	r24, 0x04	; 4
   12c1e:	c9 f4       	brne	.+50     	; 0x12c52 <display_Config+0x4ac>
   12c20:	27 81       	ldd	r18, Z+7	; 0x07
   12c22:	30 85       	ldd	r19, Z+8	; 0x08
   12c24:	3a 8b       	std	Y+18, r19	; 0x12
   12c26:	29 8b       	std	Y+17, r18	; 0x11
   12c28:	60 e0       	ldi	r22, 0x00	; 0
   12c2a:	80 e2       	ldi	r24, 0x20	; 32
   12c2c:	c2 dc       	rcall	.-1660   	; 0x125b2 <print_tok>
   12c2e:	64 e0       	ldi	r22, 0x04	; 4
   12c30:	89 e0       	ldi	r24, 0x09	; 9
   12c32:	bf dc       	rcall	.-1666   	; 0x125b2 <print_tok>
   12c34:	e9 89       	ldd	r30, Y+17	; 0x11
   12c36:	fa 89       	ldd	r31, Y+18	; 0x12
   12c38:	20 81       	ld	r18, Z
   12c3a:	30 e0       	ldi	r19, 0x00	; 0
   12c3c:	40 e0       	ldi	r20, 0x00	; 0
   12c3e:	50 e0       	ldi	r21, 0x00	; 0
   12c40:	68 e0       	ldi	r22, 0x08	; 8
   12c42:	81 e0       	ldi	r24, 0x01	; 1
   12c44:	41 dc       	rcall	.-1918   	; 0x124c8 <print_tok_val>
   12c46:	64 e0       	ldi	r22, 0x04	; 4
   12c48:	81 e1       	ldi	r24, 0x11	; 17
   12c4a:	b3 dc       	rcall	.-1690   	; 0x125b2 <print_tok>
   12c4c:	60 e0       	ldi	r22, 0x00	; 0
   12c4e:	81 e1       	ldi	r24, 0x11	; 17
   12c50:	b0 dc       	rcall	.-1696   	; 0x125b2 <print_tok>
   12c52:	28 85       	ldd	r18, Y+8	; 0x08
   12c54:	39 85       	ldd	r19, Y+9	; 0x09
   12c56:	4a 85       	ldd	r20, Y+10	; 0x0a
   12c58:	ed b7       	in	r30, 0x3d	; 61
   12c5a:	fe b7       	in	r31, 0x3e	; 62
   12c5c:	21 83       	std	Z+1, r18	; 0x01
   12c5e:	32 83       	std	Z+2, r19	; 0x02
   12c60:	43 83       	std	Z+3, r20	; 0x03
   12c62:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   12c66:	05 5f       	subi	r16, 0xF5	; 245
   12c68:	1f 4f       	sbci	r17, 0xFF	; 255
   12c6a:	2e e6       	ldi	r18, 0x6E	; 110
   12c6c:	3f e1       	ldi	r19, 0x1F	; 31
   12c6e:	20 17       	cp	r18, r16
   12c70:	31 07       	cpc	r19, r17
   12c72:	09 f0       	breq	.+2      	; 0x12c76 <display_Config+0x4d0>
   12c74:	dd cd       	rjmp	.-1094   	; 0x12830 <display_Config+0x8a>
   12c76:	8f e1       	ldi	r24, 0x1F	; 31
   12c78:	9c e1       	ldi	r25, 0x1C	; 28
   12c7a:	a0 e0       	ldi	r26, 0x00	; 0
   12c7c:	ed b7       	in	r30, 0x3d	; 61
   12c7e:	fe b7       	in	r31, 0x3e	; 62
   12c80:	81 83       	std	Z+1, r24	; 0x01
   12c82:	92 83       	std	Z+2, r25	; 0x02
   12c84:	a3 83       	std	Z+3, r26	; 0x03
   12c86:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   12c8a:	62 96       	adiw	r28, 0x12	; 18
   12c8c:	0f b6       	in	r0, 0x3f	; 63
   12c8e:	f8 94       	cli
   12c90:	de bf       	out	0x3e, r29	; 62
   12c92:	0f be       	out	0x3f, r0	; 63
   12c94:	cd bf       	out	0x3d, r28	; 61
   12c96:	df 91       	pop	r29
   12c98:	cf 91       	pop	r28
   12c9a:	1f 91       	pop	r17
   12c9c:	0f 91       	pop	r16
   12c9e:	ef 90       	pop	r14
   12ca0:	df 90       	pop	r13
   12ca2:	cf 90       	pop	r12
   12ca4:	bf 90       	pop	r11
   12ca6:	af 90       	pop	r10
   12ca8:	8f 90       	pop	r8
   12caa:	7f 90       	pop	r7
   12cac:	6f 90       	pop	r6
   12cae:	4f 90       	pop	r4
   12cb0:	3f 90       	pop	r3
   12cb2:	2f 90       	pop	r2
   12cb4:	08 95       	ret

00012cb6 <find_type>:
   12cb6:	ea ee       	ldi	r30, 0xEA	; 234
   12cb8:	fe e1       	ldi	r31, 0x1E	; 30
   12cba:	20 e0       	ldi	r18, 0x00	; 0
   12cbc:	30 e0       	ldi	r19, 0x00	; 0
   12cbe:	40 81       	ld	r20, Z
   12cc0:	50 e0       	ldi	r21, 0x00	; 0
   12cc2:	48 17       	cp	r20, r24
   12cc4:	59 07       	cpc	r21, r25
   12cc6:	11 f4       	brne	.+4      	; 0x12ccc <find_type+0x16>
   12cc8:	82 2f       	mov	r24, r18
   12cca:	08 95       	ret
   12ccc:	2f 5f       	subi	r18, 0xFF	; 255
   12cce:	3f 4f       	sbci	r19, 0xFF	; 255
   12cd0:	3b 96       	adiw	r30, 0x0b	; 11
   12cd2:	2c 30       	cpi	r18, 0x0C	; 12
   12cd4:	31 05       	cpc	r19, r1
   12cd6:	99 f7       	brne	.-26     	; 0x12cbe <find_type+0x8>
   12cd8:	8f ef       	ldi	r24, 0xFF	; 255
   12cda:	08 95       	ret

00012cdc <count_drive_types>:
   12cdc:	ea ee       	ldi	r30, 0xEA	; 234
   12cde:	fe e1       	ldi	r31, 0x1E	; 30
   12ce0:	20 e0       	ldi	r18, 0x00	; 0
   12ce2:	30 e0       	ldi	r19, 0x00	; 0
   12ce4:	90 81       	ld	r25, Z
   12ce6:	98 13       	cpse	r25, r24
   12ce8:	02 c0       	rjmp	.+4      	; 0x12cee <count_drive_types+0x12>
   12cea:	2f 5f       	subi	r18, 0xFF	; 255
   12cec:	3f 4f       	sbci	r19, 0xFF	; 255
   12cee:	3b 96       	adiw	r30, 0x0b	; 11
   12cf0:	9f e1       	ldi	r25, 0x1F	; 31
   12cf2:	ee 36       	cpi	r30, 0x6E	; 110
   12cf4:	f9 07       	cpc	r31, r25
   12cf6:	b1 f7       	brne	.-20     	; 0x12ce4 <count_drive_types+0x8>
   12cf8:	82 2f       	mov	r24, r18
   12cfa:	08 95       	ret

00012cfc <type_to_str>:
   12cfc:	00 97       	sbiw	r24, 0x00	; 0
   12cfe:	59 f0       	breq	.+22     	; 0x12d16 <type_to_str+0x1a>
   12d00:	81 30       	cpi	r24, 0x01	; 1
   12d02:	91 05       	cpc	r25, r1
   12d04:	59 f0       	breq	.+22     	; 0x12d1c <type_to_str+0x20>
   12d06:	83 30       	cpi	r24, 0x03	; 3
   12d08:	91 05       	cpc	r25, r1
   12d0a:	59 f0       	breq	.+22     	; 0x12d22 <type_to_str+0x26>
   12d0c:	04 97       	sbiw	r24, 0x04	; 4
   12d0e:	61 f0       	breq	.+24     	; 0x12d28 <type_to_str+0x2c>
   12d10:	8c ef       	ldi	r24, 0xFC	; 252
   12d12:	9d e0       	ldi	r25, 0x0D	; 13
   12d14:	08 95       	ret
   12d16:	82 ed       	ldi	r24, 0xD2	; 210
   12d18:	9d e0       	ldi	r25, 0x0D	; 13
   12d1a:	08 95       	ret
   12d1c:	8a ed       	ldi	r24, 0xDA	; 218
   12d1e:	9d e0       	ldi	r25, 0x0D	; 13
   12d20:	08 95       	ret
   12d22:	82 ef       	ldi	r24, 0xF2	; 242
   12d24:	9d e0       	ldi	r25, 0x0D	; 13
   12d26:	08 95       	ret
   12d28:	85 ee       	ldi	r24, 0xE5	; 229
   12d2a:	9d e0       	ldi	r25, 0x0D	; 13
   12d2c:	08 95       	ret

00012d2e <find_free>:
   12d2e:	80 e0       	ldi	r24, 0x00	; 0
   12d30:	90 e0       	ldi	r25, 0x00	; 0
   12d32:	c1 cf       	rjmp	.-126    	; 0x12cb6 <find_type>
   12d34:	08 95       	ret

00012d36 <find_device>:
   12d36:	9b 01       	movw	r18, r22
   12d38:	20 52       	subi	r18, 0x20	; 32
   12d3a:	31 09       	sbc	r19, r1
   12d3c:	2f 35       	cpi	r18, 0x5F	; 95
   12d3e:	31 05       	cpc	r19, r1
   12d40:	08 f5       	brcc	.+66     	; 0x12d84 <find_device+0x4e>
   12d42:	64 17       	cp	r22, r20
   12d44:	75 07       	cpc	r23, r21
   12d46:	f4 f0       	brlt	.+60     	; 0x12d84 <find_device+0x4e>
   12d48:	9a 01       	movw	r18, r20
   12d4a:	22 5e       	subi	r18, 0xE2	; 226
   12d4c:	3f 4f       	sbci	r19, 0xFF	; 255
   12d4e:	26 17       	cp	r18, r22
   12d50:	37 07       	cpc	r19, r23
   12d52:	c4 f0       	brlt	.+48     	; 0x12d84 <find_device+0x4e>
   12d54:	64 1b       	sub	r22, r20
   12d56:	75 0b       	sbc	r23, r21
   12d58:	ea ee       	ldi	r30, 0xEA	; 234
   12d5a:	fe e1       	ldi	r31, 0x1E	; 30
   12d5c:	20 e0       	ldi	r18, 0x00	; 0
   12d5e:	30 e0       	ldi	r19, 0x00	; 0
   12d60:	40 81       	ld	r20, Z
   12d62:	50 e0       	ldi	r21, 0x00	; 0
   12d64:	48 17       	cp	r20, r24
   12d66:	59 07       	cpc	r21, r25
   12d68:	39 f4       	brne	.+14     	; 0x12d78 <find_device+0x42>
   12d6a:	41 81       	ldd	r20, Z+1	; 0x01
   12d6c:	50 e0       	ldi	r21, 0x00	; 0
   12d6e:	64 17       	cp	r22, r20
   12d70:	75 07       	cpc	r23, r21
   12d72:	11 f4       	brne	.+4      	; 0x12d78 <find_device+0x42>
   12d74:	82 2f       	mov	r24, r18
   12d76:	08 95       	ret
   12d78:	2f 5f       	subi	r18, 0xFF	; 255
   12d7a:	3f 4f       	sbci	r19, 0xFF	; 255
   12d7c:	3b 96       	adiw	r30, 0x0b	; 11
   12d7e:	2c 30       	cpi	r18, 0x0C	; 12
   12d80:	31 05       	cpc	r19, r1
   12d82:	71 f7       	brne	.-36     	; 0x12d60 <find_device+0x2a>
   12d84:	8f ef       	ldi	r24, 0xFF	; 255
   12d86:	08 95       	ret

00012d88 <set_active_device>:
   12d88:	a9 e0       	ldi	r26, 0x09	; 9
   12d8a:	b0 e0       	ldi	r27, 0x00	; 0
   12d8c:	ea ec       	ldi	r30, 0xCA	; 202
   12d8e:	f6 e9       	ldi	r31, 0x96	; 150
   12d90:	0c 94 74 e6 	jmp	0x1cce8	; 0x1cce8 <__prologue_saves__+0x1c>
   12d94:	8f 3f       	cpi	r24, 0xFF	; 255
   12d96:	09 f4       	brne	.+2      	; 0x12d9a <set_active_device+0x12>
   12d98:	b5 c0       	rjmp	.+362    	; 0x12f04 <set_active_device+0x17c>
   12d9a:	e8 2f       	mov	r30, r24
   12d9c:	8c 30       	cpi	r24, 0x0C	; 12
   12d9e:	a0 f0       	brcs	.+40     	; 0x12dc8 <set_active_device+0x40>
   12da0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12da4:	80 ff       	sbrs	r24, 0
   12da6:	ae c0       	rjmp	.+348    	; 0x12f04 <set_active_device+0x17c>
   12da8:	0e 2e       	mov	r0, r30
   12daa:	00 0c       	add	r0, r0
   12dac:	ff 0b       	sbc	r31, r31
   12dae:	cd b7       	in	r28, 0x3d	; 61
   12db0:	de b7       	in	r29, 0x3e	; 62
   12db2:	fd 83       	std	Y+5, r31	; 0x05
   12db4:	ec 83       	std	Y+4, r30	; 0x04
   12db6:	8a ef       	ldi	r24, 0xFA	; 250
   12db8:	9b e1       	ldi	r25, 0x1B	; 27
   12dba:	a0 e0       	ldi	r26, 0x00	; 0
   12dbc:	89 83       	std	Y+1, r24	; 0x01
   12dbe:	9a 83       	std	Y+2, r25	; 0x02
   12dc0:	ab 83       	std	Y+3, r26	; 0x03
   12dc2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   12dc6:	9e c0       	rjmp	.+316    	; 0x12f04 <set_active_device+0x17c>
   12dc8:	08 2f       	mov	r16, r24
   12dca:	88 0f       	add	r24, r24
   12dcc:	11 0b       	sbc	r17, r17
   12dce:	8b e0       	ldi	r24, 0x0B	; 11
   12dd0:	e8 02       	muls	r30, r24
   12dd2:	f0 01       	movw	r30, r0
   12dd4:	11 24       	eor	r1, r1
   12dd6:	e6 51       	subi	r30, 0x16	; 22
   12dd8:	f1 4e       	sbci	r31, 0xE1	; 225
   12dda:	81 81       	ldd	r24, Z+1	; 0x01
   12ddc:	8f 31       	cpi	r24, 0x1F	; 31
   12dde:	a0 f0       	brcs	.+40     	; 0x12e08 <set_active_device+0x80>
   12de0:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   12de4:	90 ff       	sbrs	r25, 0
   12de6:	8e c0       	rjmp	.+284    	; 0x12f04 <set_active_device+0x17c>
   12de8:	90 e0       	ldi	r25, 0x00	; 0
   12dea:	cd b7       	in	r28, 0x3d	; 61
   12dec:	de b7       	in	r29, 0x3e	; 62
   12dee:	9f 83       	std	Y+7, r25	; 0x07
   12df0:	8e 83       	std	Y+6, r24	; 0x06
   12df2:	1d 83       	std	Y+5, r17	; 0x05
   12df4:	0c 83       	std	Y+4, r16	; 0x04
   12df6:	81 ec       	ldi	r24, 0xC1	; 193
   12df8:	9b e1       	ldi	r25, 0x1B	; 27
   12dfa:	a0 e0       	ldi	r26, 0x00	; 0
   12dfc:	89 83       	std	Y+1, r24	; 0x01
   12dfe:	9a 83       	std	Y+2, r25	; 0x02
   12e00:	ab 83       	std	Y+3, r26	; 0x03
   12e02:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   12e06:	7e c0       	rjmp	.+252    	; 0x12f04 <set_active_device+0x17c>
   12e08:	20 81       	ld	r18, Z
   12e0a:	c2 2f       	mov	r28, r18
   12e0c:	d0 e0       	ldi	r29, 0x00	; 0
   12e0e:	87 81       	ldd	r24, Z+7	; 0x07
   12e10:	90 85       	ldd	r25, Z+8	; 0x08
   12e12:	00 97       	sbiw	r24, 0x00	; 0
   12e14:	89 f4       	brne	.+34     	; 0x12e38 <set_active_device+0xb0>
   12e16:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12e1a:	80 ff       	sbrs	r24, 0
   12e1c:	73 c0       	rjmp	.+230    	; 0x12f04 <set_active_device+0x17c>
   12e1e:	ce 01       	movw	r24, r28
   12e20:	6d df       	rcall	.-294    	; 0x12cfc <type_to_str>
   12e22:	ed b7       	in	r30, 0x3d	; 61
   12e24:	fe b7       	in	r31, 0x3e	; 62
   12e26:	91 87       	std	Z+9, r25	; 0x09
   12e28:	80 87       	std	Z+8, r24	; 0x08
   12e2a:	d7 83       	std	Z+7, r29	; 0x07
   12e2c:	c6 83       	std	Z+6, r28	; 0x06
   12e2e:	15 83       	std	Z+5, r17	; 0x05
   12e30:	04 83       	std	Z+4, r16	; 0x04
   12e32:	8c e8       	ldi	r24, 0x8C	; 140
   12e34:	9b e1       	ldi	r25, 0x1B	; 27
   12e36:	5e c0       	rjmp	.+188    	; 0x12ef4 <set_active_device+0x16c>
   12e38:	20 97       	sbiw	r28, 0x00	; 0
   12e3a:	91 f4       	brne	.+36     	; 0x12e60 <set_active_device+0xd8>
   12e3c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12e40:	80 ff       	sbrs	r24, 0
   12e42:	60 c0       	rjmp	.+192    	; 0x12f04 <set_active_device+0x17c>
   12e44:	80 e0       	ldi	r24, 0x00	; 0
   12e46:	90 e0       	ldi	r25, 0x00	; 0
   12e48:	59 df       	rcall	.-334    	; 0x12cfc <type_to_str>
   12e4a:	ed b7       	in	r30, 0x3d	; 61
   12e4c:	fe b7       	in	r31, 0x3e	; 62
   12e4e:	91 87       	std	Z+9, r25	; 0x09
   12e50:	80 87       	std	Z+8, r24	; 0x08
   12e52:	17 82       	std	Z+7, r1	; 0x07
   12e54:	16 82       	std	Z+6, r1	; 0x06
   12e56:	15 83       	std	Z+5, r17	; 0x05
   12e58:	04 83       	std	Z+4, r16	; 0x04
   12e5a:	87 e5       	ldi	r24, 0x57	; 87
   12e5c:	9b e1       	ldi	r25, 0x1B	; 27
   12e5e:	4a c0       	rjmp	.+148    	; 0x12ef4 <set_active_device+0x16c>
   12e60:	c4 30       	cpi	r28, 0x04	; 4
   12e62:	d1 05       	cpc	r29, r1
   12e64:	29 f4       	brne	.+10     	; 0x12e70 <set_active_device+0xe8>
   12e66:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <PRINTERp+0x1>
   12e6a:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <PRINTERp>
   12e6e:	30 c0       	rjmp	.+96     	; 0x12ed0 <set_active_device+0x148>
   12e70:	2d 7f       	andi	r18, 0xFD	; 253
   12e72:	21 30       	cpi	r18, 0x01	; 1
   12e74:	79 f5       	brne	.+94     	; 0x12ed4 <set_active_device+0x14c>
   12e76:	21 85       	ldd	r18, Z+9	; 0x09
   12e78:	32 85       	ldd	r19, Z+10	; 0x0a
   12e7a:	21 15       	cp	r18, r1
   12e7c:	31 05       	cpc	r19, r1
   12e7e:	89 f4       	brne	.+34     	; 0x12ea2 <set_active_device+0x11a>
   12e80:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12e84:	80 ff       	sbrs	r24, 0
   12e86:	3e c0       	rjmp	.+124    	; 0x12f04 <set_active_device+0x17c>
   12e88:	ce 01       	movw	r24, r28
   12e8a:	38 df       	rcall	.-400    	; 0x12cfc <type_to_str>
   12e8c:	ed b7       	in	r30, 0x3d	; 61
   12e8e:	fe b7       	in	r31, 0x3e	; 62
   12e90:	91 87       	std	Z+9, r25	; 0x09
   12e92:	80 87       	std	Z+8, r24	; 0x08
   12e94:	d7 83       	std	Z+7, r29	; 0x07
   12e96:	c6 83       	std	Z+6, r28	; 0x06
   12e98:	15 83       	std	Z+5, r17	; 0x05
   12e9a:	04 83       	std	Z+4, r16	; 0x04
   12e9c:	8f e1       	ldi	r24, 0x1F	; 31
   12e9e:	9b e1       	ldi	r25, 0x1B	; 27
   12ea0:	29 c0       	rjmp	.+82     	; 0x12ef4 <set_active_device+0x16c>
   12ea2:	c1 30       	cpi	r28, 0x01	; 1
   12ea4:	d1 05       	cpc	r29, r1
   12ea6:	49 f4       	brne	.+18     	; 0x12eba <set_active_device+0x132>
   12ea8:	90 93 5b 19 	sts	0x195B, r25	; 0x80195b <AMIGOp+0x1>
   12eac:	80 93 5a 19 	sts	0x195A, r24	; 0x80195a <AMIGOp>
   12eb0:	30 93 59 19 	sts	0x1959, r19	; 0x801959 <AMIGOs+0x1>
   12eb4:	20 93 58 19 	sts	0x1958, r18	; 0x801958 <AMIGOs>
   12eb8:	0b c0       	rjmp	.+22     	; 0x12ed0 <set_active_device+0x148>
   12eba:	c3 30       	cpi	r28, 0x03	; 3
   12ebc:	d1 05       	cpc	r29, r1
   12ebe:	51 f4       	brne	.+20     	; 0x12ed4 <set_active_device+0x14c>
   12ec0:	90 93 5f 19 	sts	0x195F, r25	; 0x80195f <SS80p+0x1>
   12ec4:	80 93 5e 19 	sts	0x195E, r24	; 0x80195e <SS80p>
   12ec8:	30 93 5d 19 	sts	0x195D, r19	; 0x80195d <SS80s+0x1>
   12ecc:	20 93 5c 19 	sts	0x195C, r18	; 0x80195c <SS80s>
   12ed0:	81 e0       	ldi	r24, 0x01	; 1
   12ed2:	19 c0       	rjmp	.+50     	; 0x12f06 <set_active_device+0x17e>
   12ed4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12ed8:	80 ff       	sbrs	r24, 0
   12eda:	14 c0       	rjmp	.+40     	; 0x12f04 <set_active_device+0x17c>
   12edc:	ce 01       	movw	r24, r28
   12ede:	0e df       	rcall	.-484    	; 0x12cfc <type_to_str>
   12ee0:	ed b7       	in	r30, 0x3d	; 61
   12ee2:	fe b7       	in	r31, 0x3e	; 62
   12ee4:	91 87       	std	Z+9, r25	; 0x09
   12ee6:	80 87       	std	Z+8, r24	; 0x08
   12ee8:	d7 83       	std	Z+7, r29	; 0x07
   12eea:	c6 83       	std	Z+6, r28	; 0x06
   12eec:	15 83       	std	Z+5, r17	; 0x05
   12eee:	04 83       	std	Z+4, r16	; 0x04
   12ef0:	84 ef       	ldi	r24, 0xF4	; 244
   12ef2:	9a e1       	ldi	r25, 0x1A	; 26
   12ef4:	a0 e0       	ldi	r26, 0x00	; 0
   12ef6:	cd b7       	in	r28, 0x3d	; 61
   12ef8:	de b7       	in	r29, 0x3e	; 62
   12efa:	89 83       	std	Y+1, r24	; 0x01
   12efc:	9a 83       	std	Y+2, r25	; 0x02
   12efe:	ab 83       	std	Y+3, r26	; 0x03
   12f00:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   12f04:	80 e0       	ldi	r24, 0x00	; 0
   12f06:	cd b7       	in	r28, 0x3d	; 61
   12f08:	de b7       	in	r29, 0x3e	; 62
   12f0a:	29 96       	adiw	r28, 0x09	; 9
   12f0c:	e4 e0       	ldi	r30, 0x04	; 4
   12f0e:	0c 94 90 e6 	jmp	0x1cd20	; 0x1cd20 <__epilogue_restores__+0x1c>

00012f12 <SS80_Set_Defaults>:
   12f12:	0f 93       	push	r16
   12f14:	1f 93       	push	r17
   12f16:	cf 93       	push	r28
   12f18:	df 93       	push	r29
   12f1a:	18 2f       	mov	r17, r24
   12f1c:	82 e0       	ldi	r24, 0x02	; 2
   12f1e:	90 e0       	ldi	r25, 0x00	; 0
   12f20:	ca de       	rcall	.-620    	; 0x12cb6 <find_type>
   12f22:	87 fd       	sbrc	r24, 7
   12f24:	69 c0       	rjmp	.+210    	; 0x12ff8 <SS80_Set_Defaults+0xe6>
   12f26:	2b e0       	ldi	r18, 0x0B	; 11
   12f28:	12 03       	mulsu	r17, r18
   12f2a:	e0 01       	movw	r28, r0
   12f2c:	11 24       	eor	r1, r1
   12f2e:	c6 51       	subi	r28, 0x16	; 22
   12f30:	d1 4e       	sbci	r29, 0xE1	; 225
   12f32:	0f 80       	ldd	r0, Y+7	; 0x07
   12f34:	d8 85       	ldd	r29, Y+8	; 0x08
   12f36:	c0 2d       	mov	r28, r0
   12f38:	38 2f       	mov	r19, r24
   12f3a:	32 03       	mulsu	r19, r18
   12f3c:	f0 01       	movw	r30, r0
   12f3e:	11 24       	eor	r1, r1
   12f40:	e6 51       	subi	r30, 0x16	; 22
   12f42:	f1 4e       	sbci	r31, 0xE1	; 225
   12f44:	07 81       	ldd	r16, Z+7	; 0x07
   12f46:	10 85       	ldd	r17, Z+8	; 0x08
   12f48:	f8 01       	movw	r30, r16
   12f4a:	80 81       	ld	r24, Z
   12f4c:	88 83       	st	Y, r24
   12f4e:	81 81       	ldd	r24, Z+1	; 0x01
   12f50:	89 83       	std	Y+1, r24	; 0x01
   12f52:	82 81       	ldd	r24, Z+2	; 0x02
   12f54:	93 81       	ldd	r25, Z+3	; 0x03
   12f56:	0e 94 94 31 	call	0x6328	; 0x6328 <stralloc>
   12f5a:	9b 83       	std	Y+3, r25	; 0x03
   12f5c:	8a 83       	std	Y+2, r24	; 0x02
   12f5e:	f8 01       	movw	r30, r16
   12f60:	86 81       	ldd	r24, Z+6	; 0x06
   12f62:	97 81       	ldd	r25, Z+7	; 0x07
   12f64:	9f 83       	std	Y+7, r25	; 0x07
   12f66:	8e 83       	std	Y+6, r24	; 0x06
   12f68:	80 85       	ldd	r24, Z+8	; 0x08
   12f6a:	91 85       	ldd	r25, Z+9	; 0x09
   12f6c:	99 87       	std	Y+9, r25	; 0x09
   12f6e:	88 87       	std	Y+8, r24	; 0x08
   12f70:	82 85       	ldd	r24, Z+10	; 0x0a
   12f72:	93 85       	ldd	r25, Z+11	; 0x0b
   12f74:	9b 87       	std	Y+11, r25	; 0x0b
   12f76:	8a 87       	std	Y+10, r24	; 0x0a
   12f78:	84 85       	ldd	r24, Z+12	; 0x0c
   12f7a:	8c 87       	std	Y+12, r24	; 0x0c
   12f7c:	85 85       	ldd	r24, Z+13	; 0x0d
   12f7e:	8d 87       	std	Y+13, r24	; 0x0d
   12f80:	86 85       	ldd	r24, Z+14	; 0x0e
   12f82:	97 85       	ldd	r25, Z+15	; 0x0f
   12f84:	a0 89       	ldd	r26, Z+16	; 0x10
   12f86:	b1 89       	ldd	r27, Z+17	; 0x11
   12f88:	8e 87       	std	Y+14, r24	; 0x0e
   12f8a:	9f 87       	std	Y+15, r25	; 0x0f
   12f8c:	a8 8b       	std	Y+16, r26	; 0x10
   12f8e:	b9 8b       	std	Y+17, r27	; 0x11
   12f90:	82 89       	ldd	r24, Z+18	; 0x12
   12f92:	93 89       	ldd	r25, Z+19	; 0x13
   12f94:	9b 8b       	std	Y+19, r25	; 0x13
   12f96:	8a 8b       	std	Y+18, r24	; 0x12
   12f98:	84 89       	ldd	r24, Z+20	; 0x14
   12f9a:	8c 8b       	std	Y+20, r24	; 0x14
   12f9c:	85 89       	ldd	r24, Z+21	; 0x15
   12f9e:	8d 8b       	std	Y+21, r24	; 0x15
   12fa0:	86 89       	ldd	r24, Z+22	; 0x16
   12fa2:	97 89       	ldd	r25, Z+23	; 0x17
   12fa4:	9f 8b       	std	Y+23, r25	; 0x17
   12fa6:	8e 8b       	std	Y+22, r24	; 0x16
   12fa8:	80 8d       	ldd	r24, Z+24	; 0x18
   12faa:	91 8d       	ldd	r25, Z+25	; 0x19
   12fac:	99 8f       	std	Y+25, r25	; 0x19
   12fae:	88 8f       	std	Y+24, r24	; 0x18
   12fb0:	82 8d       	ldd	r24, Z+26	; 0x1a
   12fb2:	93 8d       	ldd	r25, Z+27	; 0x1b
   12fb4:	9b 8f       	std	Y+27, r25	; 0x1b
   12fb6:	8a 8f       	std	Y+26, r24	; 0x1a
   12fb8:	84 8d       	ldd	r24, Z+28	; 0x1c
   12fba:	95 8d       	ldd	r25, Z+29	; 0x1d
   12fbc:	9d 8f       	std	Y+29, r25	; 0x1d
   12fbe:	8c 8f       	std	Y+28, r24	; 0x1c
   12fc0:	86 8d       	ldd	r24, Z+30	; 0x1e
   12fc2:	8e 8f       	std	Y+30, r24	; 0x1e
   12fc4:	87 8d       	ldd	r24, Z+31	; 0x1f
   12fc6:	8f 8f       	std	Y+31, r24	; 0x1f
   12fc8:	81 a1       	ldd	r24, Z+33	; 0x21
   12fca:	92 a1       	ldd	r25, Z+34	; 0x22
   12fcc:	a3 a1       	ldd	r26, Z+35	; 0x23
   12fce:	b4 a1       	ldd	r27, Z+36	; 0x24
   12fd0:	89 a3       	std	Y+33, r24	; 0x21
   12fd2:	9a a3       	std	Y+34, r25	; 0x22
   12fd4:	ab a3       	std	Y+35, r26	; 0x23
   12fd6:	bc a3       	std	Y+36, r27	; 0x24
   12fd8:	85 a1       	ldd	r24, Z+37	; 0x25
   12fda:	8d a3       	std	Y+37, r24	; 0x25
   12fdc:	86 a1       	ldd	r24, Z+38	; 0x26
   12fde:	97 a1       	ldd	r25, Z+39	; 0x27
   12fe0:	9f a3       	std	Y+39, r25	; 0x27
   12fe2:	8e a3       	std	Y+38, r24	; 0x26
   12fe4:	80 a5       	ldd	r24, Z+40	; 0x28
   12fe6:	91 a5       	ldd	r25, Z+41	; 0x29
   12fe8:	a2 a5       	ldd	r26, Z+42	; 0x2a
   12fea:	b3 a5       	ldd	r27, Z+43	; 0x2b
   12fec:	88 a7       	std	Y+40, r24	; 0x28
   12fee:	99 a7       	std	Y+41, r25	; 0x29
   12ff0:	aa a7       	std	Y+42, r26	; 0x2a
   12ff2:	bb a7       	std	Y+43, r27	; 0x2b
   12ff4:	84 a5       	ldd	r24, Z+44	; 0x2c
   12ff6:	8c a7       	std	Y+44, r24	; 0x2c
   12ff8:	df 91       	pop	r29
   12ffa:	cf 91       	pop	r28
   12ffc:	1f 91       	pop	r17
   12ffe:	0f 91       	pop	r16
   13000:	08 95       	ret

00013002 <free_device>:
   13002:	0f 93       	push	r16
   13004:	1f 93       	push	r17
   13006:	cf 93       	push	r28
   13008:	df 93       	push	r29
   1300a:	8c 30       	cpi	r24, 0x0C	; 12
   1300c:	08 f0       	brcs	.+2      	; 0x13010 <free_device+0xe>
   1300e:	55 c0       	rjmp	.+170    	; 0x130ba <free_device+0xb8>
   13010:	08 2f       	mov	r16, r24
   13012:	08 2e       	mov	r0, r24
   13014:	00 0c       	add	r0, r0
   13016:	11 0b       	sbc	r17, r17
   13018:	9b e0       	ldi	r25, 0x0B	; 11
   1301a:	89 02       	muls	r24, r25
   1301c:	f0 01       	movw	r30, r0
   1301e:	11 24       	eor	r1, r1
   13020:	e6 51       	subi	r30, 0x16	; 22
   13022:	f1 4e       	sbci	r31, 0xE1	; 225
   13024:	80 81       	ld	r24, Z
   13026:	83 30       	cpi	r24, 0x03	; 3
   13028:	51 f4       	brne	.+20     	; 0x1303e <free_device+0x3c>
   1302a:	c7 81       	ldd	r28, Z+7	; 0x07
   1302c:	d0 85       	ldd	r29, Z+8	; 0x08
   1302e:	8a 81       	ldd	r24, Y+2	; 0x02
   13030:	9b 81       	ldd	r25, Y+3	; 0x03
   13032:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safefree>
   13036:	8c 81       	ldd	r24, Y+4	; 0x04
   13038:	9d 81       	ldd	r25, Y+5	; 0x05
   1303a:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safefree>
   1303e:	8b e0       	ldi	r24, 0x0B	; 11
   13040:	80 9f       	mul	r24, r16
   13042:	f0 01       	movw	r30, r0
   13044:	81 9f       	mul	r24, r17
   13046:	f0 0d       	add	r31, r0
   13048:	11 24       	eor	r1, r1
   1304a:	e6 51       	subi	r30, 0x16	; 22
   1304c:	f1 4e       	sbci	r31, 0xE1	; 225
   1304e:	80 81       	ld	r24, Z
   13050:	81 30       	cpi	r24, 0x01	; 1
   13052:	51 f4       	brne	.+20     	; 0x13068 <free_device+0x66>
   13054:	c7 81       	ldd	r28, Z+7	; 0x07
   13056:	d0 85       	ldd	r29, Z+8	; 0x08
   13058:	8a 81       	ldd	r24, Y+2	; 0x02
   1305a:	9b 81       	ldd	r25, Y+3	; 0x03
   1305c:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safefree>
   13060:	8c 81       	ldd	r24, Y+4	; 0x04
   13062:	9d 81       	ldd	r25, Y+5	; 0x05
   13064:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safefree>
   13068:	8b e0       	ldi	r24, 0x0B	; 11
   1306a:	80 9f       	mul	r24, r16
   1306c:	f0 01       	movw	r30, r0
   1306e:	81 9f       	mul	r24, r17
   13070:	f0 0d       	add	r31, r0
   13072:	11 24       	eor	r1, r1
   13074:	e6 51       	subi	r30, 0x16	; 22
   13076:	f1 4e       	sbci	r31, 0xE1	; 225
   13078:	80 81       	ld	r24, Z
   1307a:	84 30       	cpi	r24, 0x04	; 4
   1307c:	11 f4       	brne	.+4      	; 0x13082 <free_device+0x80>
   1307e:	0e 94 16 be 	call	0x17c2c	; 0x17c2c <printer_close>
   13082:	8b e0       	ldi	r24, 0x0B	; 11
   13084:	80 9f       	mul	r24, r16
   13086:	e0 01       	movw	r28, r0
   13088:	81 9f       	mul	r24, r17
   1308a:	d0 0d       	add	r29, r0
   1308c:	11 24       	eor	r1, r1
   1308e:	c6 51       	subi	r28, 0x16	; 22
   13090:	d1 4e       	sbci	r29, 0xE1	; 225
   13092:	8f 81       	ldd	r24, Y+7	; 0x07
   13094:	98 85       	ldd	r25, Y+8	; 0x08
   13096:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safefree>
   1309a:	89 85       	ldd	r24, Y+9	; 0x09
   1309c:	9a 85       	ldd	r25, Y+10	; 0x0a
   1309e:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safefree>
   130a2:	18 82       	st	Y, r1
   130a4:	19 82       	std	Y+1, r1	; 0x01
   130a6:	8f ef       	ldi	r24, 0xFF	; 255
   130a8:	8a 83       	std	Y+2, r24	; 0x02
   130aa:	1b 82       	std	Y+3, r1	; 0x03
   130ac:	1c 82       	std	Y+4, r1	; 0x04
   130ae:	1d 82       	std	Y+5, r1	; 0x05
   130b0:	1e 82       	std	Y+6, r1	; 0x06
   130b2:	18 86       	std	Y+8, r1	; 0x08
   130b4:	1f 82       	std	Y+7, r1	; 0x07
   130b6:	1a 86       	std	Y+10, r1	; 0x0a
   130b8:	19 86       	std	Y+9, r1	; 0x09
   130ba:	df 91       	pop	r29
   130bc:	cf 91       	pop	r28
   130be:	1f 91       	pop	r17
   130c0:	0f 91       	pop	r16
   130c2:	08 95       	ret

000130c4 <alloc_device>:
   130c4:	0f 93       	push	r16
   130c6:	1f 93       	push	r17
   130c8:	cf 93       	push	r28
   130ca:	ad b7       	in	r26, 0x3d	; 61
   130cc:	be b7       	in	r27, 0x3e	; 62
   130ce:	17 97       	sbiw	r26, 0x07	; 7
   130d0:	0f b6       	in	r0, 0x3f	; 63
   130d2:	f8 94       	cli
   130d4:	be bf       	out	0x3e, r27	; 62
   130d6:	0f be       	out	0x3f, r0	; 63
   130d8:	ad bf       	out	0x3d, r26	; 61
   130da:	8c 01       	movw	r16, r24
   130dc:	28 de       	rcall	.-944    	; 0x12d2e <find_free>
   130de:	c8 2f       	mov	r28, r24
   130e0:	8f 3f       	cpi	r24, 0xFF	; 255
   130e2:	89 f4       	brne	.+34     	; 0x13106 <alloc_device+0x42>
   130e4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   130e8:	80 ff       	sbrs	r24, 0
   130ea:	98 c0       	rjmp	.+304    	; 0x1321c <alloc_device+0x158>
   130ec:	ed b7       	in	r30, 0x3d	; 61
   130ee:	fe b7       	in	r31, 0x3e	; 62
   130f0:	15 83       	std	Z+5, r17	; 0x05
   130f2:	04 83       	std	Z+4, r16	; 0x04
   130f4:	80 ed       	ldi	r24, 0xD0	; 208
   130f6:	9a e1       	ldi	r25, 0x1A	; 26
   130f8:	a0 e0       	ldi	r26, 0x00	; 0
   130fa:	81 83       	std	Z+1, r24	; 0x01
   130fc:	92 83       	std	Z+2, r25	; 0x02
   130fe:	a3 83       	std	Z+3, r26	; 0x03
   13100:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   13104:	8b c0       	rjmp	.+278    	; 0x1321c <alloc_device+0x158>
   13106:	02 30       	cpi	r16, 0x02	; 2
   13108:	11 05       	cpc	r17, r1
   1310a:	c1 f1       	breq	.+112    	; 0x1317c <alloc_device+0xb8>
   1310c:	dc f4       	brge	.+54     	; 0x13144 <alloc_device+0x80>
   1310e:	01 30       	cpi	r16, 0x01	; 1
   13110:	11 05       	cpc	r17, r1
   13112:	09 f0       	breq	.+2      	; 0x13116 <alloc_device+0x52>
   13114:	6e c0       	rjmp	.+220    	; 0x131f2 <alloc_device+0x12e>
   13116:	fb e0       	ldi	r31, 0x0B	; 11
   13118:	8f 02       	muls	r24, r31
   1311a:	80 01       	movw	r16, r0
   1311c:	11 24       	eor	r1, r1
   1311e:	06 51       	subi	r16, 0x16	; 22
   13120:	11 4e       	sbci	r17, 0xE1	; 225
   13122:	81 e0       	ldi	r24, 0x01	; 1
   13124:	f8 01       	movw	r30, r16
   13126:	80 83       	st	Z, r24
   13128:	61 e0       	ldi	r22, 0x01	; 1
   1312a:	70 e0       	ldi	r23, 0x00	; 0
   1312c:	87 e1       	ldi	r24, 0x17	; 23
   1312e:	90 e0       	ldi	r25, 0x00	; 0
   13130:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <safecalloc>
   13134:	f8 01       	movw	r30, r16
   13136:	90 87       	std	Z+8, r25	; 0x08
   13138:	87 83       	std	Z+7, r24	; 0x07
   1313a:	61 e0       	ldi	r22, 0x01	; 1
   1313c:	70 e0       	ldi	r23, 0x00	; 0
   1313e:	88 e1       	ldi	r24, 0x18	; 24
   13140:	90 e0       	ldi	r25, 0x00	; 0
   13142:	51 c0       	rjmp	.+162    	; 0x131e6 <alloc_device+0x122>
   13144:	03 30       	cpi	r16, 0x03	; 3
   13146:	11 05       	cpc	r17, r1
   13148:	81 f1       	breq	.+96     	; 0x131aa <alloc_device+0xe6>
   1314a:	04 30       	cpi	r16, 0x04	; 4
   1314c:	11 05       	cpc	r17, r1
   1314e:	09 f0       	breq	.+2      	; 0x13152 <alloc_device+0x8e>
   13150:	50 c0       	rjmp	.+160    	; 0x131f2 <alloc_device+0x12e>
   13152:	fb e0       	ldi	r31, 0x0B	; 11
   13154:	8f 02       	muls	r24, r31
   13156:	80 01       	movw	r16, r0
   13158:	11 24       	eor	r1, r1
   1315a:	06 51       	subi	r16, 0x16	; 22
   1315c:	11 4e       	sbci	r17, 0xE1	; 225
   1315e:	84 e0       	ldi	r24, 0x04	; 4
   13160:	f8 01       	movw	r30, r16
   13162:	80 83       	st	Z, r24
   13164:	61 e0       	ldi	r22, 0x01	; 1
   13166:	70 e0       	ldi	r23, 0x00	; 0
   13168:	8d e0       	ldi	r24, 0x0D	; 13
   1316a:	90 e0       	ldi	r25, 0x00	; 0
   1316c:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <safecalloc>
   13170:	f8 01       	movw	r30, r16
   13172:	90 87       	std	Z+8, r25	; 0x08
   13174:	87 83       	std	Z+7, r24	; 0x07
   13176:	12 86       	std	Z+10, r1	; 0x0a
   13178:	11 86       	std	Z+9, r1	; 0x09
   1317a:	50 c0       	rjmp	.+160    	; 0x1321c <alloc_device+0x158>
   1317c:	fb e0       	ldi	r31, 0x0B	; 11
   1317e:	8f 02       	muls	r24, r31
   13180:	80 01       	movw	r16, r0
   13182:	11 24       	eor	r1, r1
   13184:	06 51       	subi	r16, 0x16	; 22
   13186:	11 4e       	sbci	r17, 0xE1	; 225
   13188:	82 e0       	ldi	r24, 0x02	; 2
   1318a:	f8 01       	movw	r30, r16
   1318c:	80 83       	st	Z, r24
   1318e:	61 e0       	ldi	r22, 0x01	; 1
   13190:	70 e0       	ldi	r23, 0x00	; 0
   13192:	84 e3       	ldi	r24, 0x34	; 52
   13194:	90 e0       	ldi	r25, 0x00	; 0
   13196:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <safecalloc>
   1319a:	f8 01       	movw	r30, r16
   1319c:	90 87       	std	Z+8, r25	; 0x08
   1319e:	87 83       	std	Z+7, r24	; 0x07
   131a0:	61 e0       	ldi	r22, 0x01	; 1
   131a2:	70 e0       	ldi	r23, 0x00	; 0
   131a4:	86 e1       	ldi	r24, 0x16	; 22
   131a6:	90 e0       	ldi	r25, 0x00	; 0
   131a8:	1e c0       	rjmp	.+60     	; 0x131e6 <alloc_device+0x122>
   131aa:	fb e0       	ldi	r31, 0x0B	; 11
   131ac:	8f 02       	muls	r24, r31
   131ae:	80 01       	movw	r16, r0
   131b0:	11 24       	eor	r1, r1
   131b2:	06 51       	subi	r16, 0x16	; 22
   131b4:	11 4e       	sbci	r17, 0xE1	; 225
   131b6:	83 e0       	ldi	r24, 0x03	; 3
   131b8:	f8 01       	movw	r30, r16
   131ba:	80 83       	st	Z, r24
   131bc:	61 e0       	ldi	r22, 0x01	; 1
   131be:	70 e0       	ldi	r23, 0x00	; 0
   131c0:	84 e3       	ldi	r24, 0x34	; 52
   131c2:	90 e0       	ldi	r25, 0x00	; 0
   131c4:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <safecalloc>
   131c8:	f8 01       	movw	r30, r16
   131ca:	90 87       	std	Z+8, r25	; 0x08
   131cc:	87 83       	std	Z+7, r24	; 0x07
   131ce:	61 e0       	ldi	r22, 0x01	; 1
   131d0:	70 e0       	ldi	r23, 0x00	; 0
   131d2:	86 e1       	ldi	r24, 0x16	; 22
   131d4:	90 e0       	ldi	r25, 0x00	; 0
   131d6:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <safecalloc>
   131da:	f8 01       	movw	r30, r16
   131dc:	92 87       	std	Z+10, r25	; 0x0a
   131de:	81 87       	std	Z+9, r24	; 0x09
   131e0:	8c 2f       	mov	r24, r28
   131e2:	97 de       	rcall	.-722    	; 0x12f12 <SS80_Set_Defaults>
   131e4:	1b c0       	rjmp	.+54     	; 0x1321c <alloc_device+0x158>
   131e6:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <safecalloc>
   131ea:	f8 01       	movw	r30, r16
   131ec:	92 87       	std	Z+10, r25	; 0x0a
   131ee:	81 87       	std	Z+9, r24	; 0x09
   131f0:	15 c0       	rjmp	.+42     	; 0x1321c <alloc_device+0x158>
   131f2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   131f6:	80 ff       	sbrs	r24, 0
   131f8:	10 c0       	rjmp	.+32     	; 0x1321a <alloc_device+0x156>
   131fa:	c8 01       	movw	r24, r16
   131fc:	7f dd       	rcall	.-1282   	; 0x12cfc <type_to_str>
   131fe:	ed b7       	in	r30, 0x3d	; 61
   13200:	fe b7       	in	r31, 0x3e	; 62
   13202:	97 83       	std	Z+7, r25	; 0x07
   13204:	86 83       	std	Z+6, r24	; 0x06
   13206:	15 83       	std	Z+5, r17	; 0x05
   13208:	04 83       	std	Z+4, r16	; 0x04
   1320a:	8e ea       	ldi	r24, 0xAE	; 174
   1320c:	9a e1       	ldi	r25, 0x1A	; 26
   1320e:	a0 e0       	ldi	r26, 0x00	; 0
   13210:	81 83       	std	Z+1, r24	; 0x01
   13212:	92 83       	std	Z+2, r25	; 0x02
   13214:	a3 83       	std	Z+3, r26	; 0x03
   13216:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1321a:	cf ef       	ldi	r28, 0xFF	; 255
   1321c:	8c 2f       	mov	r24, r28
   1321e:	ad b7       	in	r26, 0x3d	; 61
   13220:	be b7       	in	r27, 0x3e	; 62
   13222:	17 96       	adiw	r26, 0x07	; 7
   13224:	0f b6       	in	r0, 0x3f	; 63
   13226:	f8 94       	cli
   13228:	be bf       	out	0x3e, r27	; 62
   1322a:	0f be       	out	0x3f, r0	; 63
   1322c:	ad bf       	out	0x3d, r26	; 61
   1322e:	cf 91       	pop	r28
   13230:	1f 91       	pop	r17
   13232:	0f 91       	pop	r16
   13234:	08 95       	ret

00013236 <init_Devices>:
   13236:	10 92 6d 19 	sts	0x196D, r1	; 0x80196d <stack_ind+0x1>
   1323a:	10 92 6c 19 	sts	0x196C, r1	; 0x80196c <stack_ind>
   1323e:	ea ee       	ldi	r30, 0xEA	; 234
   13240:	fe e1       	ldi	r31, 0x1E	; 30
   13242:	8f ef       	ldi	r24, 0xFF	; 255
   13244:	10 82       	st	Z, r1
   13246:	11 82       	std	Z+1, r1	; 0x01
   13248:	82 83       	std	Z+2, r24	; 0x02
   1324a:	13 82       	std	Z+3, r1	; 0x03
   1324c:	14 82       	std	Z+4, r1	; 0x04
   1324e:	15 82       	std	Z+5, r1	; 0x05
   13250:	16 82       	std	Z+6, r1	; 0x06
   13252:	10 86       	std	Z+8, r1	; 0x08
   13254:	17 82       	std	Z+7, r1	; 0x07
   13256:	12 86       	std	Z+10, r1	; 0x0a
   13258:	11 86       	std	Z+9, r1	; 0x09
   1325a:	3b 96       	adiw	r30, 0x0b	; 11
   1325c:	9f e1       	ldi	r25, 0x1F	; 31
   1325e:	ee 36       	cpi	r30, 0x6E	; 110
   13260:	f9 07       	cpc	r31, r25
   13262:	81 f7       	brne	.-32     	; 0x13244 <init_Devices+0xe>
   13264:	08 95       	ret

00013266 <push_state>:
   13266:	20 91 6c 19 	lds	r18, 0x196C	; 0x80196c <stack_ind>
   1326a:	30 91 6d 19 	lds	r19, 0x196D	; 0x80196d <stack_ind+0x1>
   1326e:	25 30       	cpi	r18, 0x05	; 5
   13270:	31 05       	cpc	r19, r1
   13272:	7c f4       	brge	.+30     	; 0x13292 <push_state+0x2c>
   13274:	a9 01       	movw	r20, r18
   13276:	4f 5f       	subi	r20, 0xFF	; 255
   13278:	5f 4f       	sbci	r21, 0xFF	; 255
   1327a:	50 93 6d 19 	sts	0x196D, r21	; 0x80196d <stack_ind+0x1>
   1327e:	40 93 6c 19 	sts	0x196C, r20	; 0x80196c <stack_ind>
   13282:	22 0f       	add	r18, r18
   13284:	33 1f       	adc	r19, r19
   13286:	f9 01       	movw	r30, r18
   13288:	ee 59       	subi	r30, 0x9E	; 158
   1328a:	f6 4e       	sbci	r31, 0xE6	; 230
   1328c:	80 83       	st	Z, r24
   1328e:	91 83       	std	Z+1, r25	; 0x01
   13290:	08 95       	ret
   13292:	80 e0       	ldi	r24, 0x00	; 0
   13294:	90 e0       	ldi	r25, 0x00	; 0
   13296:	08 95       	ret

00013298 <pop_state>:
   13298:	80 91 6c 19 	lds	r24, 0x196C	; 0x80196c <stack_ind>
   1329c:	90 91 6d 19 	lds	r25, 0x196D	; 0x80196d <stack_ind+0x1>
   132a0:	18 16       	cp	r1, r24
   132a2:	19 06       	cpc	r1, r25
   132a4:	6c f4       	brge	.+26     	; 0x132c0 <pop_state+0x28>
   132a6:	01 97       	sbiw	r24, 0x01	; 1
   132a8:	90 93 6d 19 	sts	0x196D, r25	; 0x80196d <stack_ind+0x1>
   132ac:	80 93 6c 19 	sts	0x196C, r24	; 0x80196c <stack_ind>
   132b0:	88 0f       	add	r24, r24
   132b2:	99 1f       	adc	r25, r25
   132b4:	fc 01       	movw	r30, r24
   132b6:	ee 59       	subi	r30, 0x9E	; 158
   132b8:	f6 4e       	sbci	r31, 0xE6	; 230
   132ba:	80 81       	ld	r24, Z
   132bc:	91 81       	ldd	r25, Z+1	; 0x01
   132be:	08 95       	ret
   132c0:	80 e0       	ldi	r24, 0x00	; 0
   132c2:	90 e0       	ldi	r25, 0x00	; 0
   132c4:	08 95       	ret

000132c6 <set_Config_Defaults>:
   132c6:	08 95       	ret

000132c8 <hpdir_set_device>:
   132c8:	cf 93       	push	r28
   132ca:	df 93       	push	r29
   132cc:	00 d0       	rcall	.+0      	; 0x132ce <hpdir_set_device+0x6>
   132ce:	1f 92       	push	r1
   132d0:	2b e0       	ldi	r18, 0x0B	; 11
   132d2:	82 02       	muls	r24, r18
   132d4:	c0 01       	movw	r24, r0
   132d6:	11 24       	eor	r1, r1
   132d8:	fc 01       	movw	r30, r24
   132da:	e6 51       	subi	r30, 0x16	; 22
   132dc:	f1 4e       	sbci	r31, 0xE1	; 225
   132de:	80 81       	ld	r24, Z
   132e0:	83 30       	cpi	r24, 0x03	; 3
   132e2:	a1 f5       	brne	.+104    	; 0x1334c <hpdir_set_device+0x84>
   132e4:	c7 81       	ldd	r28, Z+7	; 0x07
   132e6:	d0 85       	ldd	r29, Z+8	; 0x08
   132e8:	80 91 ee 1f 	lds	r24, 0x1FEE	; 0x801fee <hpdir+0x80>
   132ec:	90 91 ef 1f 	lds	r25, 0x1FEF	; 0x801fef <hpdir+0x81>
   132f0:	9f 83       	std	Y+7, r25	; 0x07
   132f2:	8e 83       	std	Y+6, r24	; 0x06
   132f4:	80 91 fa 1f 	lds	r24, 0x1FFA	; 0x801ffa <hpdir+0x8c>
   132f8:	90 91 fb 1f 	lds	r25, 0x1FFB	; 0x801ffb <hpdir+0x8d>
   132fc:	a0 91 fc 1f 	lds	r26, 0x1FFC	; 0x801ffc <hpdir+0x8e>
   13300:	b0 91 fd 1f 	lds	r27, 0x1FFD	; 0x801ffd <hpdir+0x8f>
   13304:	8e 87       	std	Y+14, r24	; 0x0e
   13306:	9f 87       	std	Y+15, r25	; 0x0f
   13308:	a8 8b       	std	Y+16, r26	; 0x10
   1330a:	b9 8b       	std	Y+17, r27	; 0x11
   1330c:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <hpdir+0xa0>
   13310:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <hpdir+0xa1>
   13314:	9b 8b       	std	Y+19, r25	; 0x13
   13316:	8a 8b       	std	Y+18, r24	; 0x12
   13318:	19 a2       	std	Y+33, r1	; 0x21
   1331a:	1a a2       	std	Y+34, r1	; 0x22
   1331c:	1b a2       	std	Y+35, r1	; 0x23
   1331e:	1c a2       	std	Y+36, r1	; 0x24
   13320:	1d a2       	std	Y+37, r1	; 0x25
   13322:	1f a2       	std	Y+39, r1	; 0x27
   13324:	1e a2       	std	Y+38, r1	; 0x26
   13326:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <hpdir+0xac>
   1332a:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <hpdir+0xad>
   1332e:	a0 91 1c 20 	lds	r26, 0x201C	; 0x80201c <hpdir+0xae>
   13332:	b0 91 1d 20 	lds	r27, 0x201D	; 0x80201d <hpdir+0xaf>
   13336:	ac 01       	movw	r20, r24
   13338:	bd 01       	movw	r22, r26
   1333a:	41 50       	subi	r20, 0x01	; 1
   1333c:	51 09       	sbc	r21, r1
   1333e:	61 09       	sbc	r22, r1
   13340:	71 09       	sbc	r23, r1
   13342:	48 a7       	std	Y+40, r20	; 0x28
   13344:	59 a7       	std	Y+41, r21	; 0x29
   13346:	6a a7       	std	Y+42, r22	; 0x2a
   13348:	7b a7       	std	Y+43, r23	; 0x2b
   1334a:	2a c0       	rjmp	.+84     	; 0x133a0 <hpdir_set_device+0xd8>
   1334c:	81 30       	cpi	r24, 0x01	; 1
   1334e:	a1 f5       	brne	.+104    	; 0x133b8 <hpdir_set_device+0xf0>
   13350:	c7 81       	ldd	r28, Z+7	; 0x07
   13352:	d0 85       	ldd	r29, Z+8	; 0x08
   13354:	80 91 ee 1f 	lds	r24, 0x1FEE	; 0x801fee <hpdir+0x80>
   13358:	90 91 ef 1f 	lds	r25, 0x1FEF	; 0x801fef <hpdir+0x81>
   1335c:	9f 83       	std	Y+7, r25	; 0x07
   1335e:	8e 83       	std	Y+6, r24	; 0x06
   13360:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <hpdir+0xa0>
   13364:	90 91 0f 20 	lds	r25, 0x200F	; 0x80200f <hpdir+0xa1>
   13368:	99 87       	std	Y+9, r25	; 0x09
   1336a:	88 87       	std	Y+8, r24	; 0x08
   1336c:	80 91 0a 20 	lds	r24, 0x200A	; 0x80200a <hpdir+0x9c>
   13370:	90 91 0b 20 	lds	r25, 0x200B	; 0x80200b <hpdir+0x9d>
   13374:	9b 87       	std	Y+11, r25	; 0x0b
   13376:	8a 87       	std	Y+10, r24	; 0x0a
   13378:	80 91 06 20 	lds	r24, 0x2006	; 0x802006 <hpdir+0x98>
   1337c:	90 91 07 20 	lds	r25, 0x2007	; 0x802007 <hpdir+0x99>
   13380:	9d 87       	std	Y+13, r25	; 0x0d
   13382:	8c 87       	std	Y+12, r24	; 0x0c
   13384:	80 91 02 20 	lds	r24, 0x2002	; 0x802002 <hpdir+0x94>
   13388:	90 91 03 20 	lds	r25, 0x2003	; 0x802003 <hpdir+0x95>
   1338c:	9f 87       	std	Y+15, r25	; 0x0f
   1338e:	8e 87       	std	Y+14, r24	; 0x0e
   13390:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <hpdir+0xac>
   13394:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <hpdir+0xad>
   13398:	a0 91 1c 20 	lds	r26, 0x201C	; 0x80201c <hpdir+0xae>
   1339c:	b0 91 1d 20 	lds	r27, 0x201D	; 0x80201d <hpdir+0xaf>
   133a0:	83 83       	std	Z+3, r24	; 0x03
   133a2:	94 83       	std	Z+4, r25	; 0x04
   133a4:	a5 83       	std	Z+5, r26	; 0x05
   133a6:	b6 83       	std	Z+6, r27	; 0x06
   133a8:	8e e6       	ldi	r24, 0x6E	; 110
   133aa:	9f e1       	ldi	r25, 0x1F	; 31
   133ac:	0e 94 94 31 	call	0x6328	; 0x6328 <stralloc>
   133b0:	9d 83       	std	Y+5, r25	; 0x05
   133b2:	8c 83       	std	Y+4, r24	; 0x04
   133b4:	81 e0       	ldi	r24, 0x01	; 1
   133b6:	0b c0       	rjmp	.+22     	; 0x133ce <hpdir_set_device+0x106>
   133b8:	86 e8       	ldi	r24, 0x86	; 134
   133ba:	9a e1       	ldi	r25, 0x1A	; 26
   133bc:	a0 e0       	ldi	r26, 0x00	; 0
   133be:	ed b7       	in	r30, 0x3d	; 61
   133c0:	fe b7       	in	r31, 0x3e	; 62
   133c2:	81 83       	std	Z+1, r24	; 0x01
   133c4:	92 83       	std	Z+2, r25	; 0x02
   133c6:	a3 83       	std	Z+3, r26	; 0x03
   133c8:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   133cc:	80 e0       	ldi	r24, 0x00	; 0
   133ce:	cd b7       	in	r28, 0x3d	; 61
   133d0:	de b7       	in	r29, 0x3e	; 62
   133d2:	23 96       	adiw	r28, 0x03	; 3
   133d4:	e2 e0       	ldi	r30, 0x02	; 2
   133d6:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

000133da <hpdir_set_parameters>:
   133da:	cf 93       	push	r28
   133dc:	00 d0       	rcall	.+0      	; 0x133de <hpdir_set_parameters+0x4>
   133de:	1f 92       	push	r1
   133e0:	c8 2f       	mov	r28, r24
   133e2:	cb 01       	movw	r24, r22
   133e4:	41 e0       	ldi	r20, 0x01	; 1
   133e6:	50 e0       	ldi	r21, 0x00	; 0
   133e8:	60 e0       	ldi	r22, 0x00	; 0
   133ea:	70 e0       	ldi	r23, 0x00	; 0
   133ec:	0e 94 70 a3 	call	0x146e0	; 0x146e0 <hpdir_find_drive>
   133f0:	89 2b       	or	r24, r25
   133f2:	19 f0       	breq	.+6      	; 0x133fa <hpdir_set_parameters+0x20>
   133f4:	8c 2f       	mov	r24, r28
   133f6:	68 df       	rcall	.-304    	; 0x132c8 <hpdir_set_device>
   133f8:	0b c0       	rjmp	.+22     	; 0x13410 <hpdir_set_parameters+0x36>
   133fa:	8e e5       	ldi	r24, 0x5E	; 94
   133fc:	9a e1       	ldi	r25, 0x1A	; 26
   133fe:	a0 e0       	ldi	r26, 0x00	; 0
   13400:	ed b7       	in	r30, 0x3d	; 61
   13402:	fe b7       	in	r31, 0x3e	; 62
   13404:	81 83       	std	Z+1, r24	; 0x01
   13406:	92 83       	std	Z+2, r25	; 0x02
   13408:	a3 83       	std	Z+3, r26	; 0x03
   1340a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1340e:	80 e0       	ldi	r24, 0x00	; 0
   13410:	0f 90       	pop	r0
   13412:	0f 90       	pop	r0
   13414:	0f 90       	pop	r0
   13416:	cf 91       	pop	r28
   13418:	08 95       	ret

0001341a <format_drives>:
   1341a:	2f 92       	push	r2
   1341c:	3f 92       	push	r3
   1341e:	4f 92       	push	r4
   13420:	5f 92       	push	r5
   13422:	6f 92       	push	r6
   13424:	7f 92       	push	r7
   13426:	8f 92       	push	r8
   13428:	af 92       	push	r10
   1342a:	bf 92       	push	r11
   1342c:	cf 92       	push	r12
   1342e:	df 92       	push	r13
   13430:	ef 92       	push	r14
   13432:	ff 92       	push	r15
   13434:	0f 93       	push	r16
   13436:	1f 93       	push	r17
   13438:	cf 93       	push	r28
   1343a:	df 93       	push	r29
   1343c:	cd b7       	in	r28, 0x3d	; 61
   1343e:	de b7       	in	r29, 0x3e	; 62
   13440:	ce 56       	subi	r28, 0x6E	; 110
   13442:	d1 09       	sbc	r29, r1
   13444:	0f b6       	in	r0, 0x3f	; 63
   13446:	f8 94       	cli
   13448:	de bf       	out	0x3e, r29	; 62
   1344a:	0f be       	out	0x3f, r0	; 63
   1344c:	cd bf       	out	0x3d, r28	; 61
   1344e:	8a ee       	ldi	r24, 0xEA	; 234
   13450:	c8 2e       	mov	r12, r24
   13452:	8e e1       	ldi	r24, 0x1E	; 30
   13454:	d8 2e       	mov	r13, r24
   13456:	a0 96       	adiw	r28, 0x20	; 32
   13458:	1f ae       	std	Y+63, r1	; 0x3f
   1345a:	1e ae       	std	Y+62, r1	; 0x3e
   1345c:	a0 97       	sbiw	r28, 0x20	; 32
   1345e:	6e 96       	adiw	r28, 0x1e	; 30
   13460:	1f ae       	std	Y+63, r1	; 0x3f
   13462:	1e ae       	std	Y+62, r1	; 0x3e
   13464:	6e 97       	sbiw	r28, 0x1e	; 30
   13466:	6c 96       	adiw	r28, 0x1c	; 28
   13468:	1f ae       	std	Y+63, r1	; 0x3f
   1346a:	1e ae       	std	Y+62, r1	; 0x3e
   1346c:	6c 97       	sbiw	r28, 0x1c	; 28
   1346e:	8b e3       	ldi	r24, 0x3B	; 59
   13470:	99 e1       	ldi	r25, 0x19	; 25
   13472:	9c 01       	movw	r18, r24
   13474:	40 e0       	ldi	r20, 0x00	; 0
   13476:	a3 96       	adiw	r28, 0x23	; 35
   13478:	2d af       	std	Y+61, r18	; 0x3d
   1347a:	3e af       	std	Y+62, r19	; 0x3e
   1347c:	4f af       	std	Y+63, r20	; 0x3f
   1347e:	a3 97       	sbiw	r28, 0x23	; 35
   13480:	83 e3       	ldi	r24, 0x33	; 51
   13482:	99 e1       	ldi	r25, 0x19	; 25
   13484:	9c 01       	movw	r18, r24
   13486:	40 e0       	ldi	r20, 0x00	; 0
   13488:	a6 96       	adiw	r28, 0x26	; 38
   1348a:	2d af       	std	Y+61, r18	; 0x3d
   1348c:	3e af       	std	Y+62, r19	; 0x3e
   1348e:	4f af       	std	Y+63, r20	; 0x3f
   13490:	a6 97       	sbiw	r28, 0x26	; 38
   13492:	85 e5       	ldi	r24, 0x55	; 85
   13494:	99 e1       	ldi	r25, 0x19	; 25
   13496:	9c 01       	movw	r18, r24
   13498:	40 e0       	ldi	r20, 0x00	; 0
   1349a:	a9 96       	adiw	r28, 0x29	; 41
   1349c:	2d af       	std	Y+61, r18	; 0x3d
   1349e:	3e af       	std	Y+62, r19	; 0x3e
   134a0:	4f af       	std	Y+63, r20	; 0x3f
   134a2:	a9 97       	sbiw	r28, 0x29	; 41
   134a4:	8f e7       	ldi	r24, 0x7F	; 127
   134a6:	99 e1       	ldi	r25, 0x19	; 25
   134a8:	9c 01       	movw	r18, r24
   134aa:	40 e0       	ldi	r20, 0x00	; 0
   134ac:	ac 96       	adiw	r28, 0x2c	; 44
   134ae:	2d af       	std	Y+61, r18	; 0x3d
   134b0:	3e af       	std	Y+62, r19	; 0x3e
   134b2:	4f af       	std	Y+63, r20	; 0x3f
   134b4:	ac 97       	sbiw	r28, 0x2c	; 44
   134b6:	87 e7       	ldi	r24, 0x77	; 119
   134b8:	99 e1       	ldi	r25, 0x19	; 25
   134ba:	9c 01       	movw	r18, r24
   134bc:	40 e0       	ldi	r20, 0x00	; 0
   134be:	af 96       	adiw	r28, 0x2f	; 47
   134c0:	2d af       	std	Y+61, r18	; 0x3d
   134c2:	3e af       	std	Y+62, r19	; 0x3e
   134c4:	4f af       	std	Y+63, r20	; 0x3f
   134c6:	af 97       	sbiw	r28, 0x2f	; 47
   134c8:	89 e9       	ldi	r24, 0x99	; 153
   134ca:	99 e1       	ldi	r25, 0x19	; 25
   134cc:	3c 01       	movw	r6, r24
   134ce:	81 2c       	mov	r8, r1
   134d0:	f6 01       	movw	r30, r12
   134d2:	80 81       	ld	r24, Z
   134d4:	88 23       	and	r24, r24
   134d6:	09 f4       	brne	.+2      	; 0x134da <format_drives+0xc0>
   134d8:	f1 c0       	rjmp	.+482    	; 0x136bc <format_drives+0x2a2>
   134da:	83 30       	cpi	r24, 0x03	; 3
   134dc:	09 f0       	breq	.+2      	; 0x134e0 <format_drives+0xc6>
   134de:	71 c0       	rjmp	.+226    	; 0x135c2 <format_drives+0x1a8>
   134e0:	a7 80       	ldd	r10, Z+7	; 0x07
   134e2:	b0 84       	ldd	r11, Z+8	; 0x08
   134e4:	be 01       	movw	r22, r28
   134e6:	66 5f       	subi	r22, 0xF6	; 246
   134e8:	7f 4f       	sbci	r23, 0xFF	; 255
   134ea:	f5 01       	movw	r30, r10
   134ec:	82 81       	ldd	r24, Z+2	; 0x02
   134ee:	93 81       	ldd	r25, Z+3	; 0x03
   134f0:	0e 94 d9 78 	call	0xf1b2	; 0xf1b2 <stat>
   134f4:	01 96       	adiw	r24, 0x01	; 1
   134f6:	09 f0       	breq	.+2      	; 0x134fa <format_drives+0xe0>
   134f8:	64 c0       	rjmp	.+200    	; 0x135c2 <format_drives+0x1a8>
   134fa:	f5 01       	movw	r30, r10
   134fc:	82 89       	ldd	r24, Z+18	; 0x12
   134fe:	93 89       	ldd	r25, Z+19	; 0x13
   13500:	81 15       	cp	r24, r1
   13502:	91 40       	sbci	r25, 0x01	; 1
   13504:	31 f0       	breq	.+12     	; 0x13512 <format_drives+0xf8>
   13506:	ed b7       	in	r30, 0x3d	; 61
   13508:	fe b7       	in	r31, 0x3e	; 62
   1350a:	61 82       	std	Z+1, r6	; 0x01
   1350c:	72 82       	std	Z+2, r7	; 0x02
   1350e:	83 82       	std	Z+3, r8	; 0x03
   13510:	7a c0       	rjmp	.+244    	; 0x13606 <format_drives+0x1ec>
   13512:	f6 01       	movw	r30, r12
   13514:	23 80       	ldd	r2, Z+3	; 0x03
   13516:	34 80       	ldd	r3, Z+4	; 0x04
   13518:	45 80       	ldd	r4, Z+5	; 0x05
   1351a:	56 80       	ldd	r5, Z+6	; 0x06
   1351c:	ed b7       	in	r30, 0x3d	; 61
   1351e:	fe b7       	in	r31, 0x3e	; 62
   13520:	26 82       	std	Z+6, r2	; 0x06
   13522:	37 82       	std	Z+7, r3	; 0x07
   13524:	40 86       	std	Z+8, r4	; 0x08
   13526:	51 86       	std	Z+9, r5	; 0x09
   13528:	f5 01       	movw	r30, r10
   1352a:	82 81       	ldd	r24, Z+2	; 0x02
   1352c:	93 81       	ldd	r25, Z+3	; 0x03
   1352e:	ed b7       	in	r30, 0x3d	; 61
   13530:	fe b7       	in	r31, 0x3e	; 62
   13532:	95 83       	std	Z+5, r25	; 0x05
   13534:	84 83       	std	Z+4, r24	; 0x04
   13536:	ac 96       	adiw	r28, 0x2c	; 44
   13538:	2d ad       	ldd	r18, Y+61	; 0x3d
   1353a:	3e ad       	ldd	r19, Y+62	; 0x3e
   1353c:	4f ad       	ldd	r20, Y+63	; 0x3f
   1353e:	ac 97       	sbiw	r28, 0x2c	; 44
   13540:	21 83       	std	Z+1, r18	; 0x01
   13542:	32 83       	std	Z+2, r19	; 0x02
   13544:	43 83       	std	Z+3, r20	; 0x03
   13546:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1354a:	6e 96       	adiw	r28, 0x1e	; 30
   1354c:	2e ad       	ldd	r18, Y+62	; 0x3e
   1354e:	3f ad       	ldd	r19, Y+63	; 0x3f
   13550:	6e 97       	sbiw	r28, 0x1e	; 30
   13552:	ed b7       	in	r30, 0x3d	; 61
   13554:	fe b7       	in	r31, 0x3e	; 62
   13556:	37 83       	std	Z+7, r19	; 0x07
   13558:	26 83       	std	Z+6, r18	; 0x06
   1355a:	af 96       	adiw	r28, 0x2f	; 47
   1355c:	8d ad       	ldd	r24, Y+61	; 0x3d
   1355e:	9e ad       	ldd	r25, Y+62	; 0x3e
   13560:	af ad       	ldd	r26, Y+63	; 0x3f
   13562:	af 97       	sbiw	r28, 0x2f	; 47
   13564:	83 83       	std	Z+3, r24	; 0x03
   13566:	94 83       	std	Z+4, r25	; 0x04
   13568:	a5 83       	std	Z+5, r26	; 0x05
   1356a:	2a e3       	ldi	r18, 0x3A	; 58
   1356c:	30 e0       	ldi	r19, 0x00	; 0
   1356e:	2c 0f       	add	r18, r28
   13570:	3d 1f       	adc	r19, r29
   13572:	32 83       	std	Z+2, r19	; 0x02
   13574:	21 83       	std	Z+1, r18	; 0x01
   13576:	0e 94 91 46 	call	0x8d22	; 0x8d22 <sprintf_P>
   1357a:	f5 01       	movw	r30, r10
   1357c:	a2 80       	ldd	r10, Z+2	; 0x02
   1357e:	b3 80       	ldd	r11, Z+3	; 0x03
   13580:	c2 01       	movw	r24, r4
   13582:	b1 01       	movw	r22, r2
   13584:	0e 94 53 a3 	call	0x146a6	; 0x146a6 <lif_dir_count>
   13588:	9b 01       	movw	r18, r22
   1358a:	ac 01       	movw	r20, r24
   1358c:	82 01       	movw	r16, r4
   1358e:	71 01       	movw	r14, r2
   13590:	be 01       	movw	r22, r28
   13592:	66 5c       	subi	r22, 0xC6	; 198
   13594:	7f 4f       	sbci	r23, 0xFF	; 255
   13596:	c5 01       	movw	r24, r10
   13598:	0e 94 dc dd 	call	0x1bbb8	; 0x1bbb8 <lif_create_image>
   1359c:	6c 96       	adiw	r28, 0x1c	; 28
   1359e:	2e ad       	ldd	r18, Y+62	; 0x3e
   135a0:	3f ad       	ldd	r19, Y+63	; 0x3f
   135a2:	6c 97       	sbiw	r28, 0x1c	; 28
   135a4:	2f 5f       	subi	r18, 0xFF	; 255
   135a6:	3f 4f       	sbci	r19, 0xFF	; 255
   135a8:	6c 96       	adiw	r28, 0x1c	; 28
   135aa:	3f af       	std	Y+63, r19	; 0x3f
   135ac:	2e af       	std	Y+62, r18	; 0x3e
   135ae:	6c 97       	sbiw	r28, 0x1c	; 28
   135b0:	6e 96       	adiw	r28, 0x1e	; 30
   135b2:	8e ad       	ldd	r24, Y+62	; 0x3e
   135b4:	9f ad       	ldd	r25, Y+63	; 0x3f
   135b6:	6e 97       	sbiw	r28, 0x1e	; 30
   135b8:	01 96       	adiw	r24, 0x01	; 1
   135ba:	6e 96       	adiw	r28, 0x1e	; 30
   135bc:	9f af       	std	Y+63, r25	; 0x3f
   135be:	8e af       	std	Y+62, r24	; 0x3e
   135c0:	6e 97       	sbiw	r28, 0x1e	; 30
   135c2:	f6 01       	movw	r30, r12
   135c4:	80 81       	ld	r24, Z
   135c6:	81 30       	cpi	r24, 0x01	; 1
   135c8:	09 f0       	breq	.+2      	; 0x135cc <format_drives+0x1b2>
   135ca:	78 c0       	rjmp	.+240    	; 0x136bc <format_drives+0x2a2>
   135cc:	a7 80       	ldd	r10, Z+7	; 0x07
   135ce:	b0 84       	ldd	r11, Z+8	; 0x08
   135d0:	be 01       	movw	r22, r28
   135d2:	66 5f       	subi	r22, 0xF6	; 246
   135d4:	7f 4f       	sbci	r23, 0xFF	; 255
   135d6:	f5 01       	movw	r30, r10
   135d8:	82 81       	ldd	r24, Z+2	; 0x02
   135da:	93 81       	ldd	r25, Z+3	; 0x03
   135dc:	0e 94 d9 78 	call	0xf1b2	; 0xf1b2 <stat>
   135e0:	01 96       	adiw	r24, 0x01	; 1
   135e2:	09 f0       	breq	.+2      	; 0x135e6 <format_drives+0x1cc>
   135e4:	6b c0       	rjmp	.+214    	; 0x136bc <format_drives+0x2a2>
   135e6:	f5 01       	movw	r30, r10
   135e8:	80 85       	ldd	r24, Z+8	; 0x08
   135ea:	91 85       	ldd	r25, Z+9	; 0x09
   135ec:	81 15       	cp	r24, r1
   135ee:	91 40       	sbci	r25, 0x01	; 1
   135f0:	69 f0       	breq	.+26     	; 0x1360c <format_drives+0x1f2>
   135f2:	a9 96       	adiw	r28, 0x29	; 41
   135f4:	2d ad       	ldd	r18, Y+61	; 0x3d
   135f6:	3e ad       	ldd	r19, Y+62	; 0x3e
   135f8:	4f ad       	ldd	r20, Y+63	; 0x3f
   135fa:	a9 97       	sbiw	r28, 0x29	; 41
   135fc:	ed b7       	in	r30, 0x3d	; 61
   135fe:	fe b7       	in	r31, 0x3e	; 62
   13600:	21 83       	std	Z+1, r18	; 0x01
   13602:	32 83       	std	Z+2, r19	; 0x02
   13604:	43 83       	std	Z+3, r20	; 0x03
   13606:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1360a:	58 c0       	rjmp	.+176    	; 0x136bc <format_drives+0x2a2>
   1360c:	f6 01       	movw	r30, r12
   1360e:	23 80       	ldd	r2, Z+3	; 0x03
   13610:	34 80       	ldd	r3, Z+4	; 0x04
   13612:	45 80       	ldd	r4, Z+5	; 0x05
   13614:	56 80       	ldd	r5, Z+6	; 0x06
   13616:	ed b7       	in	r30, 0x3d	; 61
   13618:	fe b7       	in	r31, 0x3e	; 62
   1361a:	26 82       	std	Z+6, r2	; 0x06
   1361c:	37 82       	std	Z+7, r3	; 0x07
   1361e:	40 86       	std	Z+8, r4	; 0x08
   13620:	51 86       	std	Z+9, r5	; 0x09
   13622:	f5 01       	movw	r30, r10
   13624:	82 81       	ldd	r24, Z+2	; 0x02
   13626:	93 81       	ldd	r25, Z+3	; 0x03
   13628:	ed b7       	in	r30, 0x3d	; 61
   1362a:	fe b7       	in	r31, 0x3e	; 62
   1362c:	95 83       	std	Z+5, r25	; 0x05
   1362e:	84 83       	std	Z+4, r24	; 0x04
   13630:	a3 96       	adiw	r28, 0x23	; 35
   13632:	2d ad       	ldd	r18, Y+61	; 0x3d
   13634:	3e ad       	ldd	r19, Y+62	; 0x3e
   13636:	4f ad       	ldd	r20, Y+63	; 0x3f
   13638:	a3 97       	sbiw	r28, 0x23	; 35
   1363a:	21 83       	std	Z+1, r18	; 0x01
   1363c:	32 83       	std	Z+2, r19	; 0x02
   1363e:	43 83       	std	Z+3, r20	; 0x03
   13640:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   13644:	a0 96       	adiw	r28, 0x20	; 32
   13646:	2e ad       	ldd	r18, Y+62	; 0x3e
   13648:	3f ad       	ldd	r19, Y+63	; 0x3f
   1364a:	a0 97       	sbiw	r28, 0x20	; 32
   1364c:	ed b7       	in	r30, 0x3d	; 61
   1364e:	fe b7       	in	r31, 0x3e	; 62
   13650:	37 83       	std	Z+7, r19	; 0x07
   13652:	26 83       	std	Z+6, r18	; 0x06
   13654:	a6 96       	adiw	r28, 0x26	; 38
   13656:	8d ad       	ldd	r24, Y+61	; 0x3d
   13658:	9e ad       	ldd	r25, Y+62	; 0x3e
   1365a:	af ad       	ldd	r26, Y+63	; 0x3f
   1365c:	a6 97       	sbiw	r28, 0x26	; 38
   1365e:	83 83       	std	Z+3, r24	; 0x03
   13660:	94 83       	std	Z+4, r25	; 0x04
   13662:	a5 83       	std	Z+5, r26	; 0x05
   13664:	2a e3       	ldi	r18, 0x3A	; 58
   13666:	30 e0       	ldi	r19, 0x00	; 0
   13668:	2c 0f       	add	r18, r28
   1366a:	3d 1f       	adc	r19, r29
   1366c:	32 83       	std	Z+2, r19	; 0x02
   1366e:	21 83       	std	Z+1, r18	; 0x01
   13670:	0e 94 91 46 	call	0x8d22	; 0x8d22 <sprintf_P>
   13674:	f5 01       	movw	r30, r10
   13676:	a2 80       	ldd	r10, Z+2	; 0x02
   13678:	b3 80       	ldd	r11, Z+3	; 0x03
   1367a:	c2 01       	movw	r24, r4
   1367c:	b1 01       	movw	r22, r2
   1367e:	0e 94 53 a3 	call	0x146a6	; 0x146a6 <lif_dir_count>
   13682:	9b 01       	movw	r18, r22
   13684:	ac 01       	movw	r20, r24
   13686:	82 01       	movw	r16, r4
   13688:	71 01       	movw	r14, r2
   1368a:	be 01       	movw	r22, r28
   1368c:	66 5c       	subi	r22, 0xC6	; 198
   1368e:	7f 4f       	sbci	r23, 0xFF	; 255
   13690:	c5 01       	movw	r24, r10
   13692:	0e 94 dc dd 	call	0x1bbb8	; 0x1bbb8 <lif_create_image>
   13696:	6c 96       	adiw	r28, 0x1c	; 28
   13698:	2e ad       	ldd	r18, Y+62	; 0x3e
   1369a:	3f ad       	ldd	r19, Y+63	; 0x3f
   1369c:	6c 97       	sbiw	r28, 0x1c	; 28
   1369e:	2f 5f       	subi	r18, 0xFF	; 255
   136a0:	3f 4f       	sbci	r19, 0xFF	; 255
   136a2:	6c 96       	adiw	r28, 0x1c	; 28
   136a4:	3f af       	std	Y+63, r19	; 0x3f
   136a6:	2e af       	std	Y+62, r18	; 0x3e
   136a8:	6c 97       	sbiw	r28, 0x1c	; 28
   136aa:	a0 96       	adiw	r28, 0x20	; 32
   136ac:	8e ad       	ldd	r24, Y+62	; 0x3e
   136ae:	9f ad       	ldd	r25, Y+63	; 0x3f
   136b0:	a0 97       	sbiw	r28, 0x20	; 32
   136b2:	01 96       	adiw	r24, 0x01	; 1
   136b4:	a0 96       	adiw	r28, 0x20	; 32
   136b6:	9f af       	std	Y+63, r25	; 0x3f
   136b8:	8e af       	std	Y+62, r24	; 0x3e
   136ba:	a0 97       	sbiw	r28, 0x20	; 32
   136bc:	9b e0       	ldi	r25, 0x0B	; 11
   136be:	c9 0e       	add	r12, r25
   136c0:	d1 1c       	adc	r13, r1
   136c2:	ae e6       	ldi	r26, 0x6E	; 110
   136c4:	ca 16       	cp	r12, r26
   136c6:	af e1       	ldi	r26, 0x1F	; 31
   136c8:	da 06       	cpc	r13, r26
   136ca:	09 f0       	breq	.+2      	; 0x136ce <format_drives+0x2b4>
   136cc:	01 cf       	rjmp	.-510    	; 0x134d0 <format_drives+0xb6>
   136ce:	6c 96       	adiw	r28, 0x1c	; 28
   136d0:	ee ad       	ldd	r30, Y+62	; 0x3e
   136d2:	ff ad       	ldd	r31, Y+63	; 0x3f
   136d4:	6c 97       	sbiw	r28, 0x1c	; 28
   136d6:	ef 2b       	or	r30, r31
   136d8:	11 f0       	breq	.+4      	; 0x136de <format_drives+0x2c4>
   136da:	0e 94 b4 31 	call	0x6368	; 0x6368 <sep>
   136de:	c2 59       	subi	r28, 0x92	; 146
   136e0:	df 4f       	sbci	r29, 0xFF	; 255
   136e2:	0f b6       	in	r0, 0x3f	; 63
   136e4:	f8 94       	cli
   136e6:	de bf       	out	0x3e, r29	; 62
   136e8:	0f be       	out	0x3f, r0	; 63
   136ea:	cd bf       	out	0x3d, r28	; 61
   136ec:	df 91       	pop	r29
   136ee:	cf 91       	pop	r28
   136f0:	1f 91       	pop	r17
   136f2:	0f 91       	pop	r16
   136f4:	ff 90       	pop	r15
   136f6:	ef 90       	pop	r14
   136f8:	df 90       	pop	r13
   136fa:	cf 90       	pop	r12
   136fc:	bf 90       	pop	r11
   136fe:	af 90       	pop	r10
   13700:	8f 90       	pop	r8
   13702:	7f 90       	pop	r7
   13704:	6f 90       	pop	r6
   13706:	5f 90       	pop	r5
   13708:	4f 90       	pop	r4
   1370a:	3f 90       	pop	r3
   1370c:	2f 90       	pop	r2
   1370e:	08 95       	ret

00013710 <drives_help>:
   13710:	00 d0       	rcall	.+0      	; 0x13712 <drives_help+0x2>
   13712:	1f 92       	push	r1
   13714:	81 11       	cpse	r24, r1
   13716:	03 c0       	rjmp	.+6      	; 0x1371e <drives_help+0xe>
   13718:	83 e2       	ldi	r24, 0x23	; 35
   1371a:	99 e1       	ldi	r25, 0x19	; 25
   1371c:	02 c0       	rjmp	.+4      	; 0x13722 <drives_help+0x12>
   1371e:	8e e3       	ldi	r24, 0x3E	; 62
   13720:	97 e1       	ldi	r25, 0x17	; 23
   13722:	a0 e0       	ldi	r26, 0x00	; 0
   13724:	ed b7       	in	r30, 0x3d	; 61
   13726:	fe b7       	in	r31, 0x3e	; 62
   13728:	81 83       	std	Z+1, r24	; 0x01
   1372a:	92 83       	std	Z+2, r25	; 0x02
   1372c:	a3 83       	std	Z+3, r26	; 0x03
   1372e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   13732:	0f 90       	pop	r0
   13734:	0f 90       	pop	r0
   13736:	0f 90       	pop	r0
   13738:	08 95       	ret

0001373a <mount_usage>:
   1373a:	00 d0       	rcall	.+0      	; 0x1373c <mount_usage+0x2>
   1373c:	1f 92       	push	r1
   1373e:	85 e3       	ldi	r24, 0x35	; 53
   13740:	97 e1       	ldi	r25, 0x17	; 23
   13742:	a0 e0       	ldi	r26, 0x00	; 0
   13744:	ed b7       	in	r30, 0x3d	; 61
   13746:	fe b7       	in	r31, 0x3e	; 62
   13748:	81 83       	std	Z+1, r24	; 0x01
   1374a:	92 83       	std	Z+2, r25	; 0x02
   1374c:	a3 83       	std	Z+3, r26	; 0x03
   1374e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   13752:	81 e0       	ldi	r24, 0x01	; 1
   13754:	dd df       	rcall	.-70     	; 0x13710 <drives_help>
   13756:	0f 90       	pop	r0
   13758:	0f 90       	pop	r0
   1375a:	0f 90       	pop	r0
   1375c:	08 95       	ret

0001375e <index_address>:
   1375e:	ea ee       	ldi	r30, 0xEA	; 234
   13760:	fe e1       	ldi	r31, 0x1E	; 30
   13762:	90 e0       	ldi	r25, 0x00	; 0
   13764:	28 2f       	mov	r18, r24
   13766:	88 0f       	add	r24, r24
   13768:	33 0b       	sbc	r19, r19
   1376a:	80 81       	ld	r24, Z
   1376c:	88 23       	and	r24, r24
   1376e:	29 f0       	breq	.+10     	; 0x1377a <index_address+0x1c>
   13770:	41 81       	ldd	r20, Z+1	; 0x01
   13772:	50 e0       	ldi	r21, 0x00	; 0
   13774:	42 17       	cp	r20, r18
   13776:	53 07       	cpc	r21, r19
   13778:	31 f0       	breq	.+12     	; 0x13786 <index_address+0x28>
   1377a:	9f 5f       	subi	r25, 0xFF	; 255
   1377c:	3b 96       	adiw	r30, 0x0b	; 11
   1377e:	9c 30       	cpi	r25, 0x0C	; 12
   13780:	a1 f7       	brne	.-24     	; 0x1376a <index_address+0xc>
   13782:	8f ef       	ldi	r24, 0xFF	; 255
   13784:	08 95       	ret
   13786:	89 2f       	mov	r24, r25
   13788:	08 95       	ret

0001378a <umount>:

/// ===============================================
/// @brief umount disks - testing
/// @return Devices[] index on success, -1 on error
int8_t umount(int argc, char *argv[])
{
   1378a:	cf 93       	push	r28
   1378c:	df 93       	push	r29
   1378e:	00 d0       	rcall	.+0      	; 0x13790 <umount+0x6>
   13790:	00 d0       	rcall	.+0      	; 0x13792 <umount+0x8>
   13792:	1f 92       	push	r1
   13794:	eb 01       	movw	r28, r22

	int8_t address;
	int8_t index;

	if(argc != 2)
   13796:	02 97       	sbiw	r24, 0x02	; 2
   13798:	f1 f0       	breq	.+60     	; 0x137d6 <umount+0x4c>
	{
		printf("Usage:\n");
   1379a:	8d e2       	ldi	r24, 0x2D	; 45
   1379c:	97 e1       	ldi	r25, 0x17	; 23
   1379e:	a0 e0       	ldi	r26, 0x00	; 0
   137a0:	ed b7       	in	r30, 0x3d	; 61
   137a2:	fe b7       	in	r31, 0x3e	; 62
   137a4:	81 83       	std	Z+1, r24	; 0x01
   137a6:	92 83       	std	Z+2, r25	; 0x02
   137a8:	a3 83       	std	Z+3, r26	; 0x03
   137aa:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
		printf("  umount address\n");
   137ae:	8b e1       	ldi	r24, 0x1B	; 27
   137b0:	97 e1       	ldi	r25, 0x17	; 23
   137b2:	a0 e0       	ldi	r26, 0x00	; 0
   137b4:	ed b7       	in	r30, 0x3d	; 61
   137b6:	fe b7       	in	r31, 0x3e	; 62
   137b8:	81 83       	std	Z+1, r24	; 0x01
   137ba:	92 83       	std	Z+2, r25	; 0x02
   137bc:	a3 83       	std	Z+3, r26	; 0x03
   137be:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
		printf("  - address is the device address\n");
   137c2:	88 ef       	ldi	r24, 0xF8	; 248
   137c4:	96 e1       	ldi	r25, 0x16	; 22
   137c6:	a0 e0       	ldi	r26, 0x00	; 0
   137c8:	ed b7       	in	r30, 0x3d	; 61
   137ca:	fe b7       	in	r31, 0x3e	; 62
   137cc:	81 83       	std	Z+1, r24	; 0x01
   137ce:	92 83       	std	Z+2, r25	; 0x02
   137d0:	a3 83       	std	Z+3, r26	; 0x03
   137d2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
	}
	address = atoi(argv[1]);
   137d6:	8a 81       	ldd	r24, Y+2	; 0x02
   137d8:	9b 81       	ldd	r25, Y+3	; 0x03
   137da:	0e 94 3e 47 	call	0x8e7c	; 0x8e7c <atoi>
   137de:	d8 2f       	mov	r29, r24
	index = index_address(address);
   137e0:	be df       	rcall	.-132    	; 0x1375e <index_address>
   137e2:	c8 2f       	mov	r28, r24
	if(index == -1)
   137e4:	8f 3f       	cpi	r24, 0xFF	; 255
   137e6:	89 f4       	brne	.+34     	; 0x1380a <umount+0x80>
	{
		printf("umount address:[%d] NOT found\n", address);
   137e8:	8d 2f       	mov	r24, r29
   137ea:	dd 0f       	add	r29, r29
   137ec:	99 0b       	sbc	r25, r25
   137ee:	ed b7       	in	r30, 0x3d	; 61
   137f0:	fe b7       	in	r31, 0x3e	; 62
   137f2:	95 83       	std	Z+5, r25	; 0x05
   137f4:	84 83       	std	Z+4, r24	; 0x04
   137f6:	89 ed       	ldi	r24, 0xD9	; 217
   137f8:	96 e1       	ldi	r25, 0x16	; 22
   137fa:	a0 e0       	ldi	r26, 0x00	; 0
   137fc:	81 83       	std	Z+1, r24	; 0x01
   137fe:	92 83       	std	Z+2, r25	; 0x02
   13800:	a3 83       	std	Z+3, r26	; 0x03
   13802:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
		return(-1);
   13806:	8f ef       	ldi	r24, 0xFF	; 255
	}
	free_device(index);
   13808:	02 c0       	rjmp	.+4      	; 0x1380e <umount+0x84>
   1380a:	fb db       	rcall	.-2058   	; 0x13002 <free_device>
	return(index);
   1380c:	8c 2f       	mov	r24, r28
}
   1380e:	cd b7       	in	r28, 0x3d	; 61
   13810:	de b7       	in	r29, 0x3e	; 62
   13812:	25 96       	adiw	r28, 0x05	; 5
   13814:	e2 e0       	ldi	r30, 0x02	; 2
   13816:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

0001381a <display_mount>:
	return(1);
}


void display_mount(int8_t index )
{
   1381a:	a9 e0       	ldi	r26, 0x09	; 9
   1381c:	b0 e0       	ldi	r27, 0x00	; 0
   1381e:	e3 e1       	ldi	r30, 0x13	; 19
   13820:	fc e9       	ldi	r31, 0x9C	; 156
   13822:	0c 94 74 e6 	jmp	0x1cce8	; 0x1cce8 <__prologue_saves__+0x1c>
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

	if(Devices[index].TYPE == NO_TYPE)
   13826:	08 2f       	mov	r16, r24
   13828:	08 2e       	mov	r0, r24
   1382a:	00 0c       	add	r0, r0
   1382c:	11 0b       	sbc	r17, r17
   1382e:	9b e0       	ldi	r25, 0x0B	; 11
   13830:	89 02       	muls	r24, r25
   13832:	f0 01       	movw	r30, r0
   13834:	11 24       	eor	r1, r1
   13836:	e6 51       	subi	r30, 0x16	; 22
   13838:	f1 4e       	sbci	r31, 0xE1	; 225
   1383a:	80 81       	ld	r24, Z
   1383c:	88 23       	and	r24, r24
   1383e:	09 f4       	brne	.+2      	; 0x13842 <display_mount+0x28>
   13840:	5f c0       	rjmp	.+190    	; 0x13900 <display_mount+0xe6>
		return;

	if(Devices[index].TYPE == SS80_TYPE)
   13842:	83 30       	cpi	r24, 0x03	; 3
   13844:	c9 f4       	brne	.+50     	; 0x13878 <display_mount+0x5e>
	{
		SS80p= (SS80DiskType *)Devices[index].dev;
   13846:	07 80       	ldd	r0, Z+7	; 0x07
   13848:	f0 85       	ldd	r31, Z+8	; 0x08
   1384a:	e0 2d       	mov	r30, r0

		printf("SS80    %-8s %2d %s\n", SS80p->HEADER.model, (int) SS80p->HEADER.ADDRESS, SS80p->HEADER.NAME);
   1384c:	82 81       	ldd	r24, Z+2	; 0x02
   1384e:	93 81       	ldd	r25, Z+3	; 0x03
   13850:	cd b7       	in	r28, 0x3d	; 61
   13852:	de b7       	in	r29, 0x3e	; 62
   13854:	99 87       	std	Y+9, r25	; 0x09
   13856:	88 87       	std	Y+8, r24	; 0x08
   13858:	80 81       	ld	r24, Z
   1385a:	90 e0       	ldi	r25, 0x00	; 0
   1385c:	9f 83       	std	Y+7, r25	; 0x07
   1385e:	8e 83       	std	Y+6, r24	; 0x06
   13860:	84 81       	ldd	r24, Z+4	; 0x04
   13862:	95 81       	ldd	r25, Z+5	; 0x05
   13864:	9d 83       	std	Y+5, r25	; 0x05
   13866:	8c 83       	std	Y+4, r24	; 0x04
   13868:	88 ef       	ldi	r24, 0xF8	; 248
   1386a:	95 e1       	ldi	r25, 0x15	; 21
   1386c:	a0 e0       	ldi	r26, 0x00	; 0
   1386e:	89 83       	std	Y+1, r24	; 0x01
   13870:	9a 83       	std	Y+2, r25	; 0x02
   13872:	ab 83       	std	Y+3, r26	; 0x03
   13874:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
	}

#ifdef AMIGO
	if(Devices[index].TYPE == AMIGO_TYPE )
   13878:	8b e0       	ldi	r24, 0x0B	; 11
   1387a:	80 9f       	mul	r24, r16
   1387c:	f0 01       	movw	r30, r0
   1387e:	81 9f       	mul	r24, r17
   13880:	f0 0d       	add	r31, r0
   13882:	11 24       	eor	r1, r1
   13884:	e6 51       	subi	r30, 0x16	; 22
   13886:	f1 4e       	sbci	r31, 0xE1	; 225
   13888:	80 81       	ld	r24, Z
   1388a:	81 30       	cpi	r24, 0x01	; 1
   1388c:	c9 f4       	brne	.+50     	; 0x138c0 <display_mount+0xa6>
	{
		AMIGOp = (AMIGODiskType *)Devices[index].dev;
   1388e:	07 80       	ldd	r0, Z+7	; 0x07
   13890:	f0 85       	ldd	r31, Z+8	; 0x08
   13892:	e0 2d       	mov	r30, r0
		printf("AMIGO   %-8s %2d %s\n", AMIGOp->HEADER.model, (int) AMIGOp->HEADER.ADDRESS, AMIGOp->HEADER.NAME);
   13894:	82 81       	ldd	r24, Z+2	; 0x02
   13896:	93 81       	ldd	r25, Z+3	; 0x03
   13898:	cd b7       	in	r28, 0x3d	; 61
   1389a:	de b7       	in	r29, 0x3e	; 62
   1389c:	99 87       	std	Y+9, r25	; 0x09
   1389e:	88 87       	std	Y+8, r24	; 0x08
   138a0:	80 81       	ld	r24, Z
   138a2:	90 e0       	ldi	r25, 0x00	; 0
   138a4:	9f 83       	std	Y+7, r25	; 0x07
   138a6:	8e 83       	std	Y+6, r24	; 0x06
   138a8:	84 81       	ldd	r24, Z+4	; 0x04
   138aa:	95 81       	ldd	r25, Z+5	; 0x05
   138ac:	9d 83       	std	Y+5, r25	; 0x05
   138ae:	8c 83       	std	Y+4, r24	; 0x04
   138b0:	83 ee       	ldi	r24, 0xE3	; 227
   138b2:	95 e1       	ldi	r25, 0x15	; 21
   138b4:	a0 e0       	ldi	r26, 0x00	; 0
   138b6:	89 83       	std	Y+1, r24	; 0x01
   138b8:	9a 83       	std	Y+2, r25	; 0x02
   138ba:	ab 83       	std	Y+3, r26	; 0x03
   138bc:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
	}
#endif                                    // #ifdef AMIGO

	if(Devices[index].TYPE == PRINTER_TYPE )
   138c0:	8b e0       	ldi	r24, 0x0B	; 11
   138c2:	80 9f       	mul	r24, r16
   138c4:	f0 01       	movw	r30, r0
   138c6:	81 9f       	mul	r24, r17
   138c8:	f0 0d       	add	r31, r0
   138ca:	11 24       	eor	r1, r1
   138cc:	e6 51       	subi	r30, 0x16	; 22
   138ce:	f1 4e       	sbci	r31, 0xE1	; 225
   138d0:	80 81       	ld	r24, Z
   138d2:	84 30       	cpi	r24, 0x04	; 4
   138d4:	a9 f4       	brne	.+42     	; 0x13900 <display_mount+0xe6>
	{
            PRINTERp= (PRINTERDeviceType *)Devices[index].dev;
            printf("PRINTER %-8s %2d\n", " ", (int) PRINTERp->HEADER.ADDRESS);
   138d6:	07 80       	ldd	r0, Z+7	; 0x07
   138d8:	f0 85       	ldd	r31, Z+8	; 0x08
   138da:	e0 2d       	mov	r30, r0
   138dc:	80 81       	ld	r24, Z
   138de:	90 e0       	ldi	r25, 0x00	; 0
   138e0:	cd b7       	in	r28, 0x3d	; 61
   138e2:	de b7       	in	r29, 0x3e	; 62
   138e4:	9f 83       	std	Y+7, r25	; 0x07
   138e6:	8e 83       	std	Y+6, r24	; 0x06
   138e8:	89 e6       	ldi	r24, 0x69	; 105
   138ea:	94 e0       	ldi	r25, 0x04	; 4
   138ec:	9d 83       	std	Y+5, r25	; 0x05
   138ee:	8c 83       	std	Y+4, r24	; 0x04
   138f0:	81 ed       	ldi	r24, 0xD1	; 209
   138f2:	95 e1       	ldi	r25, 0x15	; 21
   138f4:	a0 e0       	ldi	r26, 0x00	; 0
   138f6:	89 83       	std	Y+1, r24	; 0x01
   138f8:	9a 83       	std	Y+2, r25	; 0x02
   138fa:	ab 83       	std	Y+3, r26	; 0x03
   138fc:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
	}
}
   13900:	cd b7       	in	r28, 0x3d	; 61
   13902:	de b7       	in	r29, 0x3e	; 62
   13904:	29 96       	adiw	r28, 0x09	; 9
   13906:	e4 e0       	ldi	r30, 0x04	; 4
   13908:	0c 94 90 e6 	jmp	0x1cd20	; 0x1cd20 <__epilogue_restores__+0x1c>

0001390c <verify_device>:

/// ===============================================
/// @brief Verify a device and delete it is there are any errors
/// @return  1 = OK 0 = ERROR
int8_t verify_device(int8_t index)
{
   1390c:	a5 e0       	ldi	r26, 0x05	; 5
   1390e:	b0 e0       	ldi	r27, 0x00	; 0
   13910:	ec e8       	ldi	r30, 0x8C	; 140
   13912:	fc e9       	ldi	r31, 0x9C	; 156
   13914:	0c 94 71 e6 	jmp	0x1cce2	; 0x1cce2 <__prologue_saves__+0x16>
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    if(Devices[index].TYPE == NO_TYPE)
   13918:	e8 2e       	mov	r14, r24
   1391a:	08 2e       	mov	r0, r24
   1391c:	00 0c       	add	r0, r0
   1391e:	ff 08       	sbc	r15, r15
   13920:	9b e0       	ldi	r25, 0x0B	; 11
   13922:	89 02       	muls	r24, r25
   13924:	f0 01       	movw	r30, r0
   13926:	11 24       	eor	r1, r1
   13928:	e6 51       	subi	r30, 0x16	; 22
   1392a:	f1 4e       	sbci	r31, 0xE1	; 225
   1392c:	10 81       	ld	r17, Z
   1392e:	11 23       	and	r17, r17
   13930:	09 f1       	breq	.+66     	; 0x13974 <verify_device+0x68>
   13932:	d8 2e       	mov	r13, r24
        return(ret);

	address = Devices[index].ADDRESS;
   13934:	81 81       	ldd	r24, Z+1	; 0x01
    type = Devices[index].TYPE;
	ppr = Devices[index].PPR;
   13936:	02 81       	ldd	r16, Z+2	; 0x02

	if(address < 0 || address > 31)
   13938:	80 32       	cpi	r24, 0x20	; 32
   1393a:	78 f0       	brcs	.+30     	; 0x1395a <verify_device+0x4e>
	{
		printf("Address (%d) out of range\n", (int) address);
   1393c:	90 e0       	ldi	r25, 0x00	; 0
   1393e:	ed b7       	in	r30, 0x3d	; 61
   13940:	fe b7       	in	r31, 0x3e	; 62
   13942:	95 83       	std	Z+5, r25	; 0x05
   13944:	84 83       	std	Z+4, r24	; 0x04
   13946:	83 e4       	ldi	r24, 0x43	; 67
   13948:	9a e1       	ldi	r25, 0x1A	; 26
   1394a:	a0 e0       	ldi	r26, 0x00	; 0
   1394c:	81 83       	std	Z+1, r24	; 0x01
   1394e:	92 83       	std	Z+2, r25	; 0x02
   13950:	a3 83       	std	Z+3, r26	; 0x03
   13952:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
		ret = 0;
   13956:	80 e0       	ldi	r24, 0x00	; 0
   13958:	01 c0       	rjmp	.+2      	; 0x1395c <verify_device+0x50>
int8_t verify_device(int8_t index)
{
    long sectors;
	int8_t type;
	int address,ppr;
	int8_t ret = 1;	
   1395a:	81 e0       	ldi	r24, 0x01	; 1
	}
	addr_bits |= addr_mask;

	
	// Printers do not use PPR
	if(type == PRINTER_TYPE)
   1395c:	14 30       	cpi	r17, 0x04	; 4
   1395e:	61 f4       	brne	.+24     	; 0x13978 <verify_device+0x6c>
	{
		Devices[index].PPR = 0xff;
   13960:	8b e0       	ldi	r24, 0x0B	; 11
   13962:	8e 9d       	mul	r24, r14
   13964:	f0 01       	movw	r30, r0
   13966:	8f 9d       	mul	r24, r15
   13968:	f0 0d       	add	r31, r0
   1396a:	11 24       	eor	r1, r1
   1396c:	e6 51       	subi	r30, 0x16	; 22
   1396e:	f1 4e       	sbci	r31, 0xE1	; 225
   13970:	8f ef       	ldi	r24, 0xFF	; 255
   13972:	82 83       	std	Z+2, r24	; 0x02
		return(1);
   13974:	81 e0       	ldi	r24, 0x01	; 1
   13976:	90 c0       	rjmp	.+288    	; 0x13a98 <verify_device+0x18c>
	}
	if(type == SS80_TYPE || AMIGO_TYPE)
	{
		if(ppr < 0 || ppr > 7)
   13978:	08 30       	cpi	r16, 0x08	; 8
   1397a:	08 f0       	brcs	.+2      	; 0x1397e <verify_device+0x72>
		{
			ret = 0;
   1397c:	80 e0       	ldi	r24, 0x00	; 0
			printf("PPR (%d) duplicated\n", (int) ppr);
			ret = 0;
		}
		ppr_bits |= ppr_mask;
	}
    if(type == SS80_TYPE)
   1397e:	13 30       	cpi	r17, 0x03	; 3
   13980:	79 f5       	brne	.+94     	; 0x139e0 <verify_device+0xd4>
    {
        SS80p= (SS80DiskType *)Devices[index].dev;
   13982:	9b e0       	ldi	r25, 0x0B	; 11
   13984:	9e 9d       	mul	r25, r14
   13986:	f0 01       	movw	r30, r0
   13988:	9f 9d       	mul	r25, r15
   1398a:	f0 0d       	add	r31, r0
   1398c:	11 24       	eor	r1, r1
   1398e:	e6 51       	subi	r30, 0x16	; 22
   13990:	f1 4e       	sbci	r31, 0xE1	; 225
   13992:	c7 81       	ldd	r28, Z+7	; 0x07
   13994:	d0 85       	ldd	r29, Z+8	; 0x08
        if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13996:	2a 89       	ldd	r18, Y+18	; 0x12
   13998:	3b 89       	ldd	r19, Y+19	; 0x13
   1399a:	21 15       	cp	r18, r1
   1399c:	31 40       	sbci	r19, 0x01	; 1
   1399e:	79 f0       	breq	.+30     	; 0x139be <verify_device+0xb2>
        {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
            printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", SS80p->HEADER.model);
   139a0:	8c 81       	ldd	r24, Y+4	; 0x04
   139a2:	9d 81       	ldd	r25, Y+5	; 0x05
   139a4:	ed b7       	in	r30, 0x3d	; 61
   139a6:	fe b7       	in	r31, 0x3e	; 62
   139a8:	95 83       	std	Z+5, r25	; 0x05
   139aa:	84 83       	std	Z+4, r24	; 0x04
   139ac:	8d e0       	ldi	r24, 0x0D	; 13
   139ae:	9a e1       	ldi	r25, 0x1A	; 26
   139b0:	a0 e0       	ldi	r26, 0x00	; 0
   139b2:	81 83       	std	Z+1, r24	; 0x01
   139b4:	92 83       	std	Z+2, r25	; 0x02
   139b6:	a3 83       	std	Z+3, r26	; 0x03
   139b8:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
			ret = 0;
   139bc:	80 e0       	ldi	r24, 0x00	; 0
        }
        sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
        Devices[index].BLOCKS = sectors;
   139be:	9b e0       	ldi	r25, 0x0B	; 11
   139c0:	9e 9d       	mul	r25, r14
   139c2:	f0 01       	movw	r30, r0
   139c4:	9f 9d       	mul	r25, r15
   139c6:	f0 0d       	add	r31, r0
   139c8:	11 24       	eor	r1, r1
   139ca:	e6 51       	subi	r30, 0x16	; 22
   139cc:	f1 4e       	sbci	r31, 0xE1	; 225
   139ce:	48 a5       	ldd	r20, Y+40	; 0x28
   139d0:	59 a5       	ldd	r21, Y+41	; 0x29
   139d2:	6a a5       	ldd	r22, Y+42	; 0x2a
   139d4:	7b a5       	ldd	r23, Y+43	; 0x2b
   139d6:	4f 5f       	subi	r20, 0xFF	; 255
   139d8:	5f 4f       	sbci	r21, 0xFF	; 255
   139da:	6f 4f       	sbci	r22, 0xFF	; 255
   139dc:	7f 4f       	sbci	r23, 0xFF	; 255
   139de:	47 c0       	rjmp	.+142    	; 0x13a6e <verify_device+0x162>
    }                                         // SS80_TYPE

#ifdef AMIGO
    if(type == AMIGO_TYPE )
   139e0:	11 30       	cpi	r17, 0x01	; 1
   139e2:	09 f0       	breq	.+2      	; 0x139e6 <verify_device+0xda>
   139e4:	48 c0       	rjmp	.+144    	; 0x13a76 <verify_device+0x16a>
    {
        AMIGOp = (AMIGODiskType *)Devices[index].dev;
   139e6:	9b e0       	ldi	r25, 0x0B	; 11
   139e8:	9e 9d       	mul	r25, r14
   139ea:	f0 01       	movw	r30, r0
   139ec:	9f 9d       	mul	r25, r15
   139ee:	f0 0d       	add	r31, r0
   139f0:	11 24       	eor	r1, r1
   139f2:	e6 51       	subi	r30, 0x16	; 22
   139f4:	f1 4e       	sbci	r31, 0xE1	; 225
   139f6:	c7 81       	ldd	r28, Z+7	; 0x07
   139f8:	d0 85       	ldd	r29, Z+8	; 0x08
        if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   139fa:	28 85       	ldd	r18, Y+8	; 0x08
   139fc:	39 85       	ldd	r19, Y+9	; 0x09
   139fe:	21 15       	cp	r18, r1
   13a00:	31 40       	sbci	r19, 0x01	; 1
   13a02:	a9 f0       	breq	.+42     	; 0x13a2e <verify_device+0x122>
        {
            AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   13a04:	80 e0       	ldi	r24, 0x00	; 0
   13a06:	91 e0       	ldi	r25, 0x01	; 1
   13a08:	99 87       	std	Y+9, r25	; 0x09
   13a0a:	88 87       	std	Y+8, r24	; 0x08
            printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", SS80p->HEADER.model);
   13a0c:	80 91 04 00 	lds	r24, 0x0004	; 0x800004 <__TEXT_REGION_LENGTH__+0x7e0004>
   13a10:	90 91 05 00 	lds	r25, 0x0005	; 0x800005 <__TEXT_REGION_LENGTH__+0x7e0005>
   13a14:	ed b7       	in	r30, 0x3d	; 61
   13a16:	fe b7       	in	r31, 0x3e	; 62
   13a18:	95 83       	std	Z+5, r25	; 0x05
   13a1a:	84 83       	std	Z+4, r24	; 0x04
   13a1c:	86 ed       	ldi	r24, 0xD6	; 214
   13a1e:	99 e1       	ldi	r25, 0x19	; 25
   13a20:	a0 e0       	ldi	r26, 0x00	; 0
   13a22:	81 83       	std	Z+1, r24	; 0x01
   13a24:	92 83       	std	Z+2, r25	; 0x02
   13a26:	a3 83       	std	Z+3, r26	; 0x03
   13a28:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
			ret = 0;
   13a2c:	80 e0       	ldi	r24, 0x00	; 0
        }
        sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
            * AMIGOp->GEOMETRY.HEADS
            * AMIGOp->GEOMETRY.CYLINDERS;
        Devices[index].BLOCKS = sectors;
   13a2e:	9b e0       	ldi	r25, 0x0B	; 11
   13a30:	9e 9d       	mul	r25, r14
   13a32:	f0 01       	movw	r30, r0
   13a34:	9f 9d       	mul	r25, r15
   13a36:	f0 0d       	add	r31, r0
   13a38:	11 24       	eor	r1, r1
   13a3a:	e6 51       	subi	r30, 0x16	; 22
   13a3c:	f1 4e       	sbci	r31, 0xE1	; 225
   13a3e:	4a 85       	ldd	r20, Y+10	; 0x0a
   13a40:	5b 85       	ldd	r21, Y+11	; 0x0b
   13a42:	2c 85       	ldd	r18, Y+12	; 0x0c
   13a44:	3d 85       	ldd	r19, Y+13	; 0x0d
   13a46:	42 9f       	mul	r20, r18
   13a48:	b0 01       	movw	r22, r0
   13a4a:	43 9f       	mul	r20, r19
   13a4c:	70 0d       	add	r23, r0
   13a4e:	52 9f       	mul	r21, r18
   13a50:	70 0d       	add	r23, r0
   13a52:	11 24       	eor	r1, r1
   13a54:	2e 85       	ldd	r18, Y+14	; 0x0e
   13a56:	3f 85       	ldd	r19, Y+15	; 0x0f
   13a58:	62 9f       	mul	r22, r18
   13a5a:	a0 01       	movw	r20, r0
   13a5c:	63 9f       	mul	r22, r19
   13a5e:	50 0d       	add	r21, r0
   13a60:	72 9f       	mul	r23, r18
   13a62:	50 0d       	add	r21, r0
   13a64:	11 24       	eor	r1, r1
   13a66:	05 2e       	mov	r0, r21
   13a68:	00 0c       	add	r0, r0
   13a6a:	66 0b       	sbc	r22, r22
   13a6c:	77 0b       	sbc	r23, r23
   13a6e:	43 83       	std	Z+3, r20	; 0x03
   13a70:	54 83       	std	Z+4, r21	; 0x04
   13a72:	65 83       	std	Z+5, r22	; 0x05
   13a74:	76 83       	std	Z+6, r23	; 0x06
    }
#endif                                    // #ifdef AMIGO
	if(!ret)
   13a76:	81 11       	cpse	r24, r1
   13a78:	7d cf       	rjmp	.-262    	; 0x13974 <verify_device+0x68>
	{
		printf("Device errors - removing: ");
   13a7a:	8b eb       	ldi	r24, 0xBB	; 187
   13a7c:	99 e1       	ldi	r25, 0x19	; 25
   13a7e:	a0 e0       	ldi	r26, 0x00	; 0
   13a80:	ed b7       	in	r30, 0x3d	; 61
   13a82:	fe b7       	in	r31, 0x3e	; 62
   13a84:	81 83       	std	Z+1, r24	; 0x01
   13a86:	92 83       	std	Z+2, r25	; 0x02
   13a88:	a3 83       	std	Z+3, r26	; 0x03
   13a8a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
		display_mount(index);	
   13a8e:	8d 2d       	mov	r24, r13
   13a90:	c4 de       	rcall	.-632    	; 0x1381a <display_mount>
		free_device(index);
   13a92:	8d 2d       	mov	r24, r13
   13a94:	b6 da       	rcall	.-2708   	; 0x13002 <free_device>
   13a96:	80 e0       	ldi	r24, 0x00	; 0
	}
	return(ret);
}
   13a98:	cd b7       	in	r28, 0x3d	; 61
   13a9a:	de b7       	in	r29, 0x3e	; 62
   13a9c:	25 96       	adiw	r28, 0x05	; 5
   13a9e:	e7 e0       	ldi	r30, 0x07	; 7
   13aa0:	0c 94 8d e6 	jmp	0x1cd1a	; 0x1cd1a <__epilogue_restores__+0x16>

00013aa4 <verify_devices>:

/// ===============================================
/// @brief Post process and Verify all devices
/// @return  1 = OK 0 = ERROR
void verify_devices()
{
   13aa4:	cf 93       	push	r28
	int8_t i;

	for(i=0;i<MAX_DEVICES;++i)
   13aa6:	c0 e0       	ldi	r28, 0x00	; 0
		verify_device(i);
   13aa8:	8c 2f       	mov	r24, r28
   13aaa:	30 df       	rcall	.-416    	; 0x1390c <verify_device>
   13aac:	cf 5f       	subi	r28, 0xFF	; 255
/// @return  1 = OK 0 = ERROR
void verify_devices()
{
	int8_t i;

	for(i=0;i<MAX_DEVICES;++i)
   13aae:	cc 30       	cpi	r28, 0x0C	; 12
   13ab0:	d9 f7       	brne	.-10     	; 0x13aa8 <verify_devices+0x4>
		verify_device(i);

}
   13ab2:	cf 91       	pop	r28
   13ab4:	08 95       	ret

00013ab6 <Read_Config>:
/// Set all drive parameters and debuglevel
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   13ab6:	ae e1       	ldi	r26, 0x1E	; 30
   13ab8:	b1 e0       	ldi	r27, 0x01	; 1
   13aba:	e1 e6       	ldi	r30, 0x61	; 97
   13abc:	fd e9       	ldi	r31, 0x9D	; 157
   13abe:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
   13ac2:	8c 01       	movw	r16, r24
	int8_t address;

    char str[128];
    char token[128];

    init_Devices();
   13ac4:	b8 db       	rcall	.-2192   	; 0x13236 <init_Devices>

    printf("Reading: %s\n", name);
   13ac6:	ed b7       	in	r30, 0x3d	; 61
   13ac8:	fe b7       	in	r31, 0x3e	; 62
   13aca:	15 83       	std	Z+5, r17	; 0x05
   13acc:	04 83       	std	Z+4, r16	; 0x04
   13ace:	85 e0       	ldi	r24, 0x05	; 5
   13ad0:	90 e2       	ldi	r25, 0x20	; 32
   13ad2:	a0 e0       	ldi	r26, 0x00	; 0
   13ad4:	81 83       	std	Z+1, r24	; 0x01
   13ad6:	92 83       	std	Z+2, r25	; 0x02
   13ad8:	a3 83       	std	Z+3, r26	; 0x03
   13ada:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    cfg = fopen(name, "rb");
   13ade:	6c ee       	ldi	r22, 0xEC	; 236
   13ae0:	78 e0       	ldi	r23, 0x08	; 8
   13ae2:	c8 01       	movw	r24, r16
   13ae4:	0e 94 d4 7d 	call	0xfba8	; 0xfba8 <fopen>
   13ae8:	c5 5f       	subi	r28, 0xF5	; 245
   13aea:	de 4f       	sbci	r29, 0xFE	; 254
   13aec:	99 83       	std	Y+1, r25	; 0x01
   13aee:	88 83       	st	Y, r24
   13af0:	cb 50       	subi	r28, 0x0B	; 11
   13af2:	d1 40       	sbci	r29, 0x01	; 1
    if(cfg == NULL)
   13af4:	89 2b       	or	r24, r25
   13af6:	09 f4       	brne	.+2      	; 0x13afa <Read_Config+0x44>
   13af8:	58 c0       	rjmp	.+176    	; 0x13baa <Read_Config+0xf4>
   13afa:	21 2c       	mov	r2, r1
   13afc:	31 2c       	mov	r3, r1
   13afe:	c8 5f       	subi	r28, 0xF8	; 248
   13b00:	de 4f       	sbci	r29, 0xFE	; 254
   13b02:	18 82       	st	Y, r1
   13b04:	c8 50       	subi	r28, 0x08	; 8
   13b06:	d1 40       	sbci	r29, 0x01	; 1
   13b08:	41 2c       	mov	r4, r1
   13b0a:	51 2c       	mov	r5, r1
   13b0c:	e1 2c       	mov	r14, r1
   13b0e:	f1 2c       	mov	r15, r1
   13b10:	c7 5f       	subi	r28, 0xF7	; 247
   13b12:	de 4f       	sbci	r29, 0xFE	; 254
   13b14:	19 82       	std	Y+1, r1	; 0x01
   13b16:	18 82       	st	Y, r1
   13b18:	c9 50       	subi	r28, 0x09	; 9
   13b1a:	d1 40       	sbci	r29, 0x01	; 1
   13b1c:	c1 2c       	mov	r12, r1
   13b1e:	d1 2c       	mov	r13, r1
   13b20:	61 2c       	mov	r6, r1
   13b22:	71 2c       	mov	r7, r1
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13b24:	84 e5       	ldi	r24, 0x54	; 84
   13b26:	9d e1       	ldi	r25, 0x1D	; 29
   13b28:	9c 01       	movw	r18, r24
   13b2a:	40 e0       	ldi	r20, 0x00	; 0
   13b2c:	c3 5f       	subi	r28, 0xF3	; 243
   13b2e:	de 4f       	sbci	r29, 0xFE	; 254
   13b30:	28 83       	st	Y, r18
   13b32:	39 83       	std	Y+1, r19	; 0x01
   13b34:	4a 83       	std	Y+2, r20	; 0x02
   13b36:	cd 50       	subi	r28, 0x0D	; 13
   13b38:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
                        break;
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13b3a:	86 e7       	ldi	r24, 0x76	; 118
   13b3c:	9d e1       	ldi	r25, 0x1D	; 29
   13b3e:	9c 01       	movw	r18, r24
   13b40:	40 e0       	ldi	r20, 0x00	; 0
   13b42:	c0 5f       	subi	r28, 0xF0	; 240
   13b44:	de 4f       	sbci	r29, 0xFE	; 254
   13b46:	28 83       	st	Y, r18
   13b48:	39 83       	std	Y+1, r19	; 0x01
   13b4a:	4a 83       	std	Y+2, r20	; 0x02
   13b4c:	c0 51       	subi	r28, 0x10	; 16
   13b4e:	d1 40       	sbci	r29, 0x01	; 1
                {
                    AMIGOp->CONFIG.ID = val.w;
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13b50:	86 ea       	ldi	r24, 0xA6	; 166
   13b52:	9d e1       	ldi	r25, 0x1D	; 29
   13b54:	9c 01       	movw	r18, r24
   13b56:	40 e0       	ldi	r20, 0x00	; 0
   13b58:	cd 5e       	subi	r28, 0xED	; 237
   13b5a:	de 4f       	sbci	r29, 0xFE	; 254
   13b5c:	28 83       	st	Y, r18
   13b5e:	39 83       	std	Y+1, r19	; 0x01
   13b60:	4a 83       	std	Y+2, r20	; 0x02
   13b62:	c3 51       	subi	r28, 0x13	; 19
   13b64:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
                        break;
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   13b66:	85 ed       	ldi	r24, 0xD5	; 213
   13b68:	9d e1       	ldi	r25, 0x1D	; 29
   13b6a:	9c 01       	movw	r18, r24
   13b6c:	40 e0       	ldi	r20, 0x00	; 0
   13b6e:	ca 5e       	subi	r28, 0xEA	; 234
   13b70:	de 4f       	sbci	r29, 0xFE	; 254
   13b72:	28 83       	st	Y, r18
   13b74:	39 83       	std	Y+1, r19	; 0x01
   13b76:	4a 83       	std	Y+2, r20	; 0x02
   13b78:	c6 51       	subi	r28, 0x16	; 22
   13b7a:	d1 40       	sbci	r29, 0x01	; 1
                    case TOK_GEOMETRY:
                        push_state(state);
                        state = AMIGO_GEOMETRY;
                        break;
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13b7c:	85 e0       	ldi	r24, 0x05	; 5
   13b7e:	9e e1       	ldi	r25, 0x1E	; 30
   13b80:	9c 01       	movw	r18, r24
   13b82:	40 e0       	ldi	r20, 0x00	; 0
   13b84:	c7 5e       	subi	r28, 0xE7	; 231
   13b86:	de 4f       	sbci	r29, 0xFE	; 254
   13b88:	28 83       	st	Y, r18
   13b8a:	39 83       	std	Y+1, r19	; 0x01
   13b8c:	4a 83       	std	Y+2, r20	; 0x02
   13b8e:	c9 51       	subi	r28, 0x19	; 25
   13b90:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
                        break;
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13b92:	83 e3       	ldi	r24, 0x33	; 51
   13b94:	9e e1       	ldi	r25, 0x1E	; 30
   13b96:	9c 01       	movw	r18, r24
   13b98:	40 e0       	ldi	r20, 0x00	; 0
   13b9a:	c4 5e       	subi	r28, 0xE4	; 228
   13b9c:	de 4f       	sbci	r29, 0xFE	; 254
   13b9e:	28 83       	st	Y, r18
   13ba0:	39 83       	std	Y+1, r19	; 0x01
   13ba2:	4a 83       	std	Y+2, r20	; 0x02
   13ba4:	cc 51       	subi	r28, 0x1C	; 28
   13ba6:	d1 40       	sbci	r29, 0x01	; 1
   13ba8:	26 c0       	rjmp	.+76     	; 0x13bf6 <Read_Config+0x140>
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
//FIXME
        perror("Read_Config - open");
   13baa:	84 e2       	ldi	r24, 0x24	; 36
   13bac:	9e e0       	ldi	r25, 0x0E	; 14
   13bae:	0e 94 05 78 	call	0xf00a	; 0xf00a <perror>
        printf("Read_Config: open(%s) failed\n", name);
   13bb2:	ed b7       	in	r30, 0x3d	; 61
   13bb4:	fe b7       	in	r31, 0x3e	; 62
   13bb6:	15 83       	std	Z+5, r17	; 0x05
   13bb8:	04 83       	std	Z+4, r16	; 0x04
   13bba:	87 ee       	ldi	r24, 0xE7	; 231
   13bbc:	9f e1       	ldi	r25, 0x1F	; 31
   13bbe:	a0 e0       	ldi	r26, 0x00	; 0
   13bc0:	81 83       	std	Z+1, r24	; 0x01
   13bc2:	92 83       	std	Z+2, r25	; 0x02
   13bc4:	a3 83       	std	Z+3, r26	; 0x03
   13bc6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        set_Config_Defaults();
        return(errors);
   13bca:	81 e0       	ldi	r24, 0x01	; 1
   13bcc:	90 e0       	ldi	r25, 0x00	; 0
   13bce:	70 c3       	rjmp	.+1760   	; 0x142b0 <Read_Config+0x7fa>
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   13bd0:	ff ef       	ldi	r31, 0xFF	; 255
   13bd2:	2f 1a       	sub	r2, r31
   13bd4:	3f 0a       	sbc	r3, r31

        ptr = get_token(str, token, sizeof(token)-2);
   13bd6:	4e e7       	ldi	r20, 0x7E	; 126
   13bd8:	50 e0       	ldi	r21, 0x00	; 0
   13bda:	9e 01       	movw	r18, r28
   13bdc:	28 5f       	subi	r18, 0xF8	; 248
   13bde:	3f 4f       	sbci	r19, 0xFF	; 255
   13be0:	49 01       	movw	r8, r18
   13be2:	b9 01       	movw	r22, r18
   13be4:	ce 01       	movw	r24, r28
   13be6:	88 57       	subi	r24, 0x78	; 120
   13be8:	9f 4f       	sbci	r25, 0xFF	; 255
   13bea:	0e 94 a6 32 	call	0x654c	; 0x654c <get_token>
   13bee:	5c 01       	movw	r10, r24

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13bf0:	88 85       	ldd	r24, Y+8	; 0x08
   13bf2:	81 11       	cpse	r24, r1
   13bf4:	10 c0       	rjmp	.+32     	; 0x13c16 <Read_Config+0x160>
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   13bf6:	c5 5f       	subi	r28, 0xF5	; 245
   13bf8:	de 4f       	sbci	r29, 0xFE	; 254
   13bfa:	48 81       	ld	r20, Y
   13bfc:	59 81       	ldd	r21, Y+1	; 0x01
   13bfe:	cb 50       	subi	r28, 0x0B	; 11
   13c00:	d1 40       	sbci	r29, 0x01	; 1
   13c02:	6e e7       	ldi	r22, 0x7E	; 126
   13c04:	70 e0       	ldi	r23, 0x00	; 0
   13c06:	ce 01       	movw	r24, r28
   13c08:	88 57       	subi	r24, 0x78	; 120
   13c0a:	9f 4f       	sbci	r25, 0xFF	; 255
   13c0c:	0e 94 ec 75 	call	0xebd8	; 0xebd8 <fgets>
   13c10:	89 2b       	or	r24, r25
   13c12:	f1 f6       	brne	.-68     	; 0x13bd0 <Read_Config+0x11a>
   13c14:	0d c3       	rjmp	.+1562   	; 0x14230 <Read_Config+0x77a>
        ++lines;

        ptr = get_token(str, token, sizeof(token)-2);

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13c16:	83 32       	cpi	r24, 0x23	; 35
   13c18:	71 f3       	breq	.-36     	; 0x13bf6 <Read_Config+0x140>
            continue;

        val.l = 0;
        tok = TOK_INVALID;

        if( ( ind = tok_index(token) )  == -1)
   13c1a:	c4 01       	movw	r24, r8
   13c1c:	0e 94 26 92 	call	0x1244c	; 0x1244c <tok_index>
   13c20:	8f 3f       	cpi	r24, 0xFF	; 255
   13c22:	49 f4       	brne	.+18     	; 0x13c36 <Read_Config+0x180>
        {
            printf("Unexpected token: %s, at line:%d\n", token,lines);
   13c24:	ed b7       	in	r30, 0x3d	; 61
   13c26:	fe b7       	in	r31, 0x3e	; 62
   13c28:	37 82       	std	Z+7, r3	; 0x07
   13c2a:	26 82       	std	Z+6, r2	; 0x06
   13c2c:	95 82       	std	Z+5, r9	; 0x05
   13c2e:	84 82       	std	Z+4, r8	; 0x04
   13c30:	85 ec       	ldi	r24, 0xC5	; 197
   13c32:	9f e1       	ldi	r25, 0x1F	; 31
   13c34:	c4 c0       	rjmp	.+392    	; 0x13dbe <Read_Config+0x308>
            ++errors;
            continue;
        }
        tok = tokens[ind].tok;
   13c36:	24 e0       	ldi	r18, 0x04	; 4
   13c38:	82 02       	muls	r24, r18
   13c3a:	f0 01       	movw	r30, r0
   13c3c:	11 24       	eor	r1, r1
   13c3e:	ec 53       	subi	r30, 0x3C	; 60
   13c40:	fe 4f       	sbci	r31, 0xFE	; 254
   13c42:	02 81       	ldd	r16, Z+2	; 0x02
   13c44:	13 81       	ldd	r17, Z+3	; 0x03

// get optional argument
        ptr = get_token(ptr, token, sizeof(token)-2);
   13c46:	4e e7       	ldi	r20, 0x7E	; 126
   13c48:	50 e0       	ldi	r21, 0x00	; 0
   13c4a:	b4 01       	movw	r22, r8
   13c4c:	c5 01       	movw	r24, r10
   13c4e:	0e 94 a6 32 	call	0x654c	; 0x654c <get_token>
   13c52:	5c 01       	movw	r10, r24
        if(MATCH(token,"="))
   13c54:	67 e3       	ldi	r22, 0x37	; 55
   13c56:	7e e0       	ldi	r23, 0x0E	; 14
   13c58:	c4 01       	movw	r24, r8
   13c5a:	0e 94 de 31 	call	0x63bc	; 0x63bc <MATCH>
   13c5e:	89 2b       	or	r24, r25
   13c60:	39 f0       	breq	.+14     	; 0x13c70 <Read_Config+0x1ba>
            ptr = get_token(ptr, token, sizeof(token)-2);
   13c62:	4e e7       	ldi	r20, 0x7E	; 126
   13c64:	50 e0       	ldi	r21, 0x00	; 0
   13c66:	b4 01       	movw	r22, r8
   13c68:	c5 01       	movw	r24, r10
   13c6a:	0e 94 a6 32 	call	0x654c	; 0x654c <get_token>
   13c6e:	5c 01       	movw	r10, r24
        val.l = get_value(token);
   13c70:	c4 01       	movw	r24, r8
   13c72:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <get_value>
        val.w = (uint16_t) 0xFFFF & val.l;
        val.b = (uint8_t) 0xFF & val.l;

//FIXME check for state and last state
        if(tok == TOK_END )
   13c76:	01 31       	cpi	r16, 0x11	; 17
   13c78:	11 05       	cpc	r17, r1
        {
            state = pop_state();
   13c7a:	19 f4       	brne	.+6      	; 0x13c82 <Read_Config+0x1cc>
   13c7c:	0d db       	rcall	.-2534   	; 0x13298 <pop_state>
   13c7e:	3c 01       	movw	r6, r24
            continue;
   13c80:	ba cf       	rjmp	.-140    	; 0x13bf6 <Read_Config+0x140>
        }

        switch(state)
   13c82:	30 e1       	ldi	r19, 0x10	; 16
   13c84:	63 16       	cp	r6, r19
   13c86:	71 04       	cpc	r7, r1
   13c88:	08 f0       	brcs	.+2      	; 0x13c8c <Read_Config+0x1d6>
   13c8a:	bc c2       	rjmp	.+1400   	; 0x14204 <Read_Config+0x74e>
   13c8c:	f3 01       	movw	r30, r6
   13c8e:	ea 53       	subi	r30, 0x3A	; 58
   13c90:	ff 4f       	sbci	r31, 0xFF	; 255
   13c92:	0c 94 37 e6 	jmp	0x1cc6e	; 0x1cc6e <__tablejump2__>
        {
            case START_STATE:
                switch(tok)
   13c96:	0e 30       	cpi	r16, 0x0E	; 14
   13c98:	11 05       	cpc	r17, r1
   13c9a:	09 f4       	brne	.+2      	; 0x13c9e <Read_Config+0x1e8>
   13c9c:	83 c0       	rjmp	.+262    	; 0x13da4 <Read_Config+0x2ee>
   13c9e:	44 f4       	brge	.+16     	; 0x13cb0 <Read_Config+0x1fa>
   13ca0:	02 30       	cpi	r16, 0x02	; 2
   13ca2:	11 05       	cpc	r17, r1
   13ca4:	09 f4       	brne	.+2      	; 0x13ca8 <Read_Config+0x1f2>
   13ca6:	42 c0       	rjmp	.+132    	; 0x13d2c <Read_Config+0x276>
   13ca8:	0c 30       	cpi	r16, 0x0C	; 12
   13caa:	11 05       	cpc	r17, r1
   13cac:	19 f1       	breq	.+70     	; 0x13cf4 <Read_Config+0x23e>
   13cae:	7f c0       	rjmp	.+254    	; 0x13dae <Read_Config+0x2f8>
   13cb0:	03 32       	cpi	r16, 0x23	; 35
   13cb2:	11 05       	cpc	r17, r1
   13cb4:	f9 f0       	breq	.+62     	; 0x13cf4 <Read_Config+0x23e>
   13cb6:	04 32       	cpi	r16, 0x24	; 36
   13cb8:	11 05       	cpc	r17, r1
   13cba:	29 f0       	breq	.+10     	; 0x13cc6 <Read_Config+0x210>
   13cbc:	00 32       	cpi	r16, 0x20	; 32
   13cbe:	11 05       	cpc	r17, r1
   13cc0:	09 f0       	breq	.+2      	; 0x13cc4 <Read_Config+0x20e>
   13cc2:	75 c0       	rjmp	.+234    	; 0x13dae <Read_Config+0x2f8>
   13cc4:	4f c0       	rjmp	.+158    	; 0x13d64 <Read_Config+0x2ae>
                {
                    case TOK_SS80_DEFAULT:
                        push_state(state);
   13cc6:	80 e0       	ldi	r24, 0x00	; 0
   13cc8:	90 e0       	ldi	r25, 0x00	; 0
   13cca:	cd da       	rcall	.-2662   	; 0x13266 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_DEFAULT_TYPE);
   13ccc:	82 e0       	ldi	r24, 0x02	; 2
   13cce:	90 e0       	ldi	r25, 0x00	; 0
   13cd0:	f9 d9       	rcall	.-3086   	; 0x130c4 <alloc_device>
   13cd2:	c8 5f       	subi	r28, 0xF8	; 248
   13cd4:	de 4f       	sbci	r29, 0xFE	; 254
   13cd6:	88 83       	st	Y, r24
   13cd8:	c8 50       	subi	r28, 0x08	; 8
   13cda:	d1 40       	sbci	r29, 0x01	; 1
   13cdc:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   13cde:	09 f4       	brne	.+2      	; 0x13ce2 <Read_Config+0x22c>
   13ce0:	8a cf       	rjmp	.-236    	; 0x13bf6 <Read_Config+0x140>
   13ce2:	4b e0       	ldi	r20, 0x0B	; 11
                            state = START_STATE;
                        else
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13ce4:	84 02       	muls	r24, r20
   13ce6:	f0 01       	movw	r30, r0
   13ce8:	11 24       	eor	r1, r1
   13cea:	e6 51       	subi	r30, 0x16	; 22
   13cec:	f1 4e       	sbci	r31, 0xE1	; 225
   13cee:	e7 80       	ldd	r14, Z+7	; 0x07
   13cf0:	f0 84       	ldd	r15, Z+8	; 0x08
   13cf2:	18 c0       	rjmp	.+48     	; 0x13d24 <Read_Config+0x26e>
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
   13cf4:	80 e0       	ldi	r24, 0x00	; 0
   13cf6:	90 e0       	ldi	r25, 0x00	; 0
   13cf8:	b6 da       	rcall	.-2708   	; 0x13266 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_TYPE);
   13cfa:	83 e0       	ldi	r24, 0x03	; 3
   13cfc:	90 e0       	ldi	r25, 0x00	; 0
   13cfe:	e2 d9       	rcall	.-3132   	; 0x130c4 <alloc_device>
   13d00:	c8 5f       	subi	r28, 0xF8	; 248
   13d02:	de 4f       	sbci	r29, 0xFE	; 254
   13d04:	88 83       	st	Y, r24
   13d06:	c8 50       	subi	r28, 0x08	; 8
   13d08:	d1 40       	sbci	r29, 0x01	; 1
   13d0a:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   13d0c:	09 f4       	brne	.+2      	; 0x13d10 <Read_Config+0x25a>
   13d0e:	73 cf       	rjmp	.-282    	; 0x13bf6 <Read_Config+0x140>
   13d10:	9b e0       	ldi	r25, 0x0B	; 11
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13d12:	89 02       	muls	r24, r25
   13d14:	f0 01       	movw	r30, r0
   13d16:	11 24       	eor	r1, r1
   13d18:	e6 51       	subi	r30, 0x16	; 22
   13d1a:	f1 4e       	sbci	r31, 0xE1	; 225
   13d1c:	e7 80       	ldd	r14, Z+7	; 0x07
   13d1e:	f0 84       	ldd	r15, Z+8	; 0x08
                            hpdir_set_parameters(index,token); // also SS80p->HEADER.model
   13d20:	b4 01       	movw	r22, r8
   13d22:	5b db       	rcall	.-2378   	; 0x133da <hpdir_set_parameters>
   13d24:	66 24       	eor	r6, r6
                            SS80p = (SS80DiskType *) Devices[index].dev;
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
                        state = SS80_STATE;
   13d26:	63 94       	inc	r6
   13d28:	71 2c       	mov	r7, r1
                            hpdir_set_parameters(index,token); // also SS80p->HEADER.model
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
   13d2a:	65 cf       	rjmp	.-310    	; 0x13bf6 <Read_Config+0x140>
   13d2c:	80 e0       	ldi	r24, 0x00	; 0
   13d2e:	90 e0       	ldi	r25, 0x00	; 0
   13d30:	9a da       	rcall	.-2764   	; 0x13266 <push_state>
                        state = AMIGO_STATE;
                        index = alloc_device(AMIGO_TYPE);
   13d32:	81 e0       	ldi	r24, 0x01	; 1
   13d34:	90 e0       	ldi	r25, 0x00	; 0
   13d36:	c6 d9       	rcall	.-3188   	; 0x130c4 <alloc_device>
   13d38:	c8 5f       	subi	r28, 0xF8	; 248
   13d3a:	de 4f       	sbci	r29, 0xFE	; 254
   13d3c:	88 83       	st	Y, r24
   13d3e:	c8 50       	subi	r28, 0x08	; 8
   13d40:	d1 40       	sbci	r29, 0x01	; 1
   13d42:	8f 3f       	cpi	r24, 0xFF	; 255
                        if(index == -1)
   13d44:	09 f4       	brne	.+2      	; 0x13d48 <Read_Config+0x292>
   13d46:	57 cf       	rjmp	.-338    	; 0x13bf6 <Read_Config+0x140>
   13d48:	ab e0       	ldi	r26, 0x0B	; 11
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   13d4a:	8a 02       	muls	r24, r26
   13d4c:	f0 01       	movw	r30, r0
   13d4e:	11 24       	eor	r1, r1
   13d50:	e6 51       	subi	r30, 0x16	; 22
   13d52:	f1 4e       	sbci	r31, 0xE1	; 225
   13d54:	47 80       	ldd	r4, Z+7	; 0x07
   13d56:	50 84       	ldd	r5, Z+8	; 0x08
                            hpdir_set_parameters(index,token); // also sets AMIGOp->HEADER.model
   13d58:	b4 01       	movw	r22, r8
   13d5a:	3f db       	rcall	.-2434   	; 0x133da <hpdir_set_parameters>
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
                        state = AMIGO_STATE;
   13d5c:	aa e0       	ldi	r26, 0x0A	; 10
   13d5e:	6a 2e       	mov	r6, r26
   13d60:	71 2c       	mov	r7, r1
   13d62:	49 cf       	rjmp	.-366    	; 0x13bf6 <Read_Config+0x140>
                            hpdir_set_parameters(index,token); // also sets AMIGOp->HEADER.model
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
   13d64:	80 e0       	ldi	r24, 0x00	; 0
   13d66:	90 e0       	ldi	r25, 0x00	; 0
   13d68:	7e da       	rcall	.-2820   	; 0x13266 <push_state>
   13d6a:	84 e0       	ldi	r24, 0x04	; 4
                        state = PRINTER_STATE;
                        index = alloc_device(PRINTER_TYPE);
   13d6c:	90 e0       	ldi	r25, 0x00	; 0
   13d6e:	aa d9       	rcall	.-3244   	; 0x130c4 <alloc_device>
   13d70:	c8 5f       	subi	r28, 0xF8	; 248
   13d72:	de 4f       	sbci	r29, 0xFE	; 254
   13d74:	88 83       	st	Y, r24
   13d76:	c8 50       	subi	r28, 0x08	; 8
   13d78:	d1 40       	sbci	r29, 0x01	; 1
   13d7a:	8f 3f       	cpi	r24, 0xFF	; 255
   13d7c:	09 f4       	brne	.+2      	; 0x13d80 <Read_Config+0x2ca>
                        if(index == -1)
   13d7e:	3b cf       	rjmp	.-394    	; 0x13bf6 <Read_Config+0x140>
   13d80:	bb e0       	ldi	r27, 0x0B	; 11
   13d82:	8b 02       	muls	r24, r27
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   13d84:	f0 01       	movw	r30, r0
   13d86:	11 24       	eor	r1, r1
   13d88:	e6 51       	subi	r30, 0x16	; 22
   13d8a:	f1 4e       	sbci	r31, 0xE1	; 225
   13d8c:	27 81       	ldd	r18, Z+7	; 0x07
   13d8e:	30 85       	ldd	r19, Z+8	; 0x08
   13d90:	c7 5f       	subi	r28, 0xF7	; 247
   13d92:	de 4f       	sbci	r29, 0xFE	; 254
   13d94:	39 83       	std	Y+1, r19	; 0x01
   13d96:	28 83       	st	Y, r18
   13d98:	c9 50       	subi	r28, 0x09	; 9
   13d9a:	d1 40       	sbci	r29, 0x01	; 1
   13d9c:	fe e0       	ldi	r31, 0x0E	; 14
   13d9e:	6f 2e       	mov	r6, r31
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
                        state = PRINTER_STATE;
   13da0:	71 2c       	mov	r7, r1
   13da2:	29 cf       	rjmp	.-430    	; 0x13bf6 <Read_Config+0x140>
   13da4:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
                        break;
                    case TOK_DEBUG:
                        debuglevel = val.w;
   13da8:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   13dac:	24 cf       	rjmp	.-440    	; 0x13bf6 <Read_Config+0x140>
   13dae:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13db0:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected token: %s, at line:%d\n", ptr,lines);
   13db2:	37 82       	std	Z+7, r3	; 0x07
   13db4:	26 82       	std	Z+6, r2	; 0x06
   13db6:	b5 82       	std	Z+5, r11	; 0x05
   13db8:	a4 82       	std	Z+4, r10	; 0x04
   13dba:	83 ea       	ldi	r24, 0xA3	; 163
   13dbc:	9f e1       	ldi	r25, 0x1F	; 31
   13dbe:	a0 e0       	ldi	r26, 0x00	; 0
   13dc0:	81 83       	std	Z+1, r24	; 0x01
   13dc2:	92 83       	std	Z+2, r25	; 0x02
   13dc4:	a3 83       	std	Z+3, r26	; 0x03
   13dc6:	2e c2       	rjmp	.+1116   	; 0x14224 <Read_Config+0x76e>
   13dc8:	09 30       	cpi	r16, 0x09	; 9
                        break;
                }
                break;

            case PRINTER_STATE:
                if(tok == TOK_CONFIG)
   13dca:	11 05       	cpc	r17, r1
   13dcc:	39 f4       	brne	.+14     	; 0x13ddc <Read_Config+0x326>
   13dce:	8e e0       	ldi	r24, 0x0E	; 14
                {
                    push_state(state);
   13dd0:	90 e0       	ldi	r25, 0x00	; 0
   13dd2:	49 da       	rcall	.-2926   	; 0x13266 <push_state>
   13dd4:	ef e0       	ldi	r30, 0x0F	; 15
   13dd6:	6e 2e       	mov	r6, r30
                    state = PRINTER_CONFIG;
   13dd8:	71 2c       	mov	r7, r1
   13dda:	0d cf       	rjmp	.-486    	; 0x13bf6 <Read_Config+0x140>
   13ddc:	ed b7       	in	r30, 0x3d	; 61
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
                    ++errors;
                    break;
                }
                break;
   13dde:	fe b7       	in	r31, 0x3e	; 62
                    push_state(state);
                    state = PRINTER_CONFIG;
                }
                else
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   13de0:	37 82       	std	Z+7, r3	; 0x07
   13de2:	26 82       	std	Z+6, r2	; 0x06
   13de4:	b5 82       	std	Z+5, r11	; 0x05
   13de6:	a4 82       	std	Z+4, r10	; 0x04
   13de8:	89 e7       	ldi	r24, 0x79	; 121
   13dea:	9f e1       	ldi	r25, 0x1F	; 31
   13dec:	e8 cf       	rjmp	.-48     	; 0x13dbe <Read_Config+0x308>
   13dee:	01 30       	cpi	r16, 0x01	; 1
   13df0:	11 05       	cpc	r17, r1
                    break;
                }
                break;

            case PRINTER_CONFIG:
                if(tok == TOK_ADDRESS)
   13df2:	c1 f4       	brne	.+48     	; 0x13e24 <Read_Config+0x36e>
   13df4:	c8 5f       	subi	r28, 0xF8	; 248
   13df6:	de 4f       	sbci	r29, 0xFE	; 254
                {
					address = val.b;
                    Devices[index].ADDRESS = address;
   13df8:	28 81       	ld	r18, Y
   13dfa:	c8 50       	subi	r28, 0x08	; 8
   13dfc:	d1 40       	sbci	r29, 0x01	; 1
   13dfe:	3b e0       	ldi	r19, 0x0B	; 11
   13e00:	23 02       	muls	r18, r19
   13e02:	f0 01       	movw	r30, r0
   13e04:	11 24       	eor	r1, r1
   13e06:	e6 51       	subi	r30, 0x16	; 22
   13e08:	f1 4e       	sbci	r31, 0xE1	; 225
   13e0a:	61 83       	std	Z+1, r22	; 0x01
   13e0c:	c7 5f       	subi	r28, 0xF7	; 247
   13e0e:	de 4f       	sbci	r29, 0xFE	; 254
                    PRINTERp->HEADER.ADDRESS  = address;
   13e10:	a8 81       	ld	r26, Y
   13e12:	b9 81       	ldd	r27, Y+1	; 0x01
   13e14:	c9 50       	subi	r28, 0x09	; 9
   13e16:	d1 40       	sbci	r29, 0x01	; 1
   13e18:	6c 93       	st	X, r22
   13e1a:	8f ef       	ldi	r24, 0xFF	; 255
   13e1c:	82 83       	std	Z+2, r24	; 0x02
// NO PPR
                    Devices[index].PPR = 0xff;
   13e1e:	fd 01       	movw	r30, r26
   13e20:	81 83       	std	Z+1, r24	; 0x01
                    PRINTERp->HEADER.PPR = 0xff;
   13e22:	e9 ce       	rjmp	.-558    	; 0x13bf6 <Read_Config+0x140>
   13e24:	ed b7       	in	r30, 0x3d	; 61
   13e26:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   13e28:	37 82       	std	Z+7, r3	; 0x07
   13e2a:	26 82       	std	Z+6, r2	; 0x06
   13e2c:	b5 82       	std	Z+5, r11	; 0x05
   13e2e:	a4 82       	std	Z+4, r10	; 0x04
   13e30:	88 e4       	ldi	r24, 0x48	; 72
   13e32:	9f e1       	ldi	r25, 0x1F	; 31
   13e34:	c4 cf       	rjmp	.-120    	; 0x13dbe <Read_Config+0x308>
   13e36:	05 31       	cpi	r16, 0x15	; 21
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   13e38:	11 05       	cpc	r17, r1
   13e3a:	d9 f0       	breq	.+54     	; 0x13e72 <Read_Config+0x3bc>
   13e3c:	6c f4       	brge	.+26     	; 0x13e58 <Read_Config+0x3a2>
   13e3e:	09 30       	cpi	r16, 0x09	; 9
   13e40:	11 05       	cpc	r17, r1
   13e42:	f1 f0       	breq	.+60     	; 0x13e80 <Read_Config+0x3ca>
   13e44:	0b 30       	cpi	r16, 0x0B	; 11
   13e46:	11 05       	cpc	r17, r1
   13e48:	49 f5       	brne	.+82     	; 0x13e9c <Read_Config+0x3e6>
   13e4a:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONFIG:
                        push_state(state);
                        state = SS80_CONFIG;
                        break;
                    case TOK_CONTROLLER:
                        push_state(state);
   13e4c:	90 e0       	ldi	r25, 0x00	; 0
   13e4e:	0b da       	rcall	.-3050   	; 0x13266 <push_state>
   13e50:	54 e0       	ldi	r21, 0x04	; 4
                        state = SS80_CONTROLLER;
   13e52:	65 2e       	mov	r6, r21
   13e54:	71 2c       	mov	r7, r1
   13e56:	cf ce       	rjmp	.-610    	; 0x13bf6 <Read_Config+0x140>
                        break;
   13e58:	07 32       	cpi	r16, 0x27	; 39
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   13e5a:	11 05       	cpc	r17, r1
   13e5c:	c1 f0       	breq	.+48     	; 0x13e8e <Read_Config+0x3d8>
   13e5e:	0a 32       	cpi	r16, 0x2A	; 42
   13e60:	11 05       	cpc	r17, r1
   13e62:	e1 f4       	brne	.+56     	; 0x13e9c <Read_Config+0x3e6>
                    case TOK_UNIT:
                        push_state(state);
                        state = SS80_UNIT;
                        break;
                    case TOK_VOLUME:
                        push_state(state);
   13e64:	81 e0       	ldi	r24, 0x01	; 1
   13e66:	90 e0       	ldi	r25, 0x00	; 0
   13e68:	fe d9       	rcall	.-3076   	; 0x13266 <push_state>
                        state = SS80_VOLUME;
   13e6a:	36 e0       	ldi	r19, 0x06	; 6
   13e6c:	63 2e       	mov	r6, r19
   13e6e:	71 2c       	mov	r7, r1
                        break;
   13e70:	c2 ce       	rjmp	.-636    	; 0x13bf6 <Read_Config+0x140>

            case SS80_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   13e72:	81 e0       	ldi	r24, 0x01	; 1
   13e74:	90 e0       	ldi	r25, 0x00	; 0
   13e76:	f7 d9       	rcall	.-3090   	; 0x13266 <push_state>
                        state = SS80_HEADER;
   13e78:	72 e0       	ldi	r23, 0x02	; 2
   13e7a:	67 2e       	mov	r6, r23
   13e7c:	71 2c       	mov	r7, r1
                        break;
   13e7e:	bb ce       	rjmp	.-650    	; 0x13bf6 <Read_Config+0x140>
                    case TOK_CONFIG:
                        push_state(state);
   13e80:	81 e0       	ldi	r24, 0x01	; 1
   13e82:	90 e0       	ldi	r25, 0x00	; 0
   13e84:	f0 d9       	rcall	.-3104   	; 0x13266 <push_state>
   13e86:	63 e0       	ldi	r22, 0x03	; 3
                        state = SS80_CONFIG;
   13e88:	66 2e       	mov	r6, r22
   13e8a:	71 2c       	mov	r7, r1
   13e8c:	b4 ce       	rjmp	.-664    	; 0x13bf6 <Read_Config+0x140>
                        break;
   13e8e:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONTROLLER:
                        push_state(state);
                        state = SS80_CONTROLLER;
                        break;
                    case TOK_UNIT:
                        push_state(state);
   13e90:	90 e0       	ldi	r25, 0x00	; 0
   13e92:	e9 d9       	rcall	.-3118   	; 0x13266 <push_state>
   13e94:	45 e0       	ldi	r20, 0x05	; 5
   13e96:	64 2e       	mov	r6, r20
                        state = SS80_UNIT;
   13e98:	71 2c       	mov	r7, r1
   13e9a:	ad ce       	rjmp	.-678    	; 0x13bf6 <Read_Config+0x140>
   13e9c:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13e9e:	fe b7       	in	r31, 0x3e	; 62
                    case TOK_VOLUME:
                        push_state(state);
                        state = SS80_VOLUME;
                        break;
                    default:
                        printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   13ea0:	37 82       	std	Z+7, r3	; 0x07
   13ea2:	26 82       	std	Z+6, r2	; 0x06
   13ea4:	b5 82       	std	Z+5, r11	; 0x05
   13ea6:	a4 82       	std	Z+4, r10	; 0x04
   13ea8:	8b e1       	ldi	r24, 0x1B	; 27
   13eaa:	9f e1       	ldi	r25, 0x1F	; 31
   13eac:	88 cf       	rjmp	.-240    	; 0x13dbe <Read_Config+0x308>
   13eae:	02 31       	cpi	r16, 0x12	; 18
   13eb0:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_HEADER:
                switch(tok)
   13eb2:	11 f1       	breq	.+68     	; 0x13ef8 <Read_Config+0x442>
   13eb4:	0f 31       	cpi	r16, 0x1F	; 31
   13eb6:	11 05       	cpc	r17, r1
   13eb8:	89 f0       	breq	.+34     	; 0x13edc <Read_Config+0x426>
   13eba:	01 30       	cpi	r16, 0x01	; 1
   13ebc:	11 05       	cpc	r17, r1
   13ebe:	09 f5       	brne	.+66     	; 0x13f02 <Read_Config+0x44c>
   13ec0:	c8 5f       	subi	r28, 0xF8	; 248
   13ec2:	de 4f       	sbci	r29, 0xFE	; 254
                {
                    case TOK_ADDRESS:
						address = val.b;
                        Devices[index].ADDRESS = address;
   13ec4:	28 81       	ld	r18, Y
   13ec6:	c8 50       	subi	r28, 0x08	; 8
   13ec8:	d1 40       	sbci	r29, 0x01	; 1
   13eca:	3b e0       	ldi	r19, 0x0B	; 11
   13ecc:	23 02       	muls	r18, r19
   13ece:	f0 01       	movw	r30, r0
   13ed0:	11 24       	eor	r1, r1
   13ed2:	e6 51       	subi	r30, 0x16	; 22
   13ed4:	f1 4e       	sbci	r31, 0xE1	; 225
   13ed6:	61 83       	std	Z+1, r22	; 0x01
   13ed8:	d7 01       	movw	r26, r14
   13eda:	33 c1       	rjmp	.+614    	; 0x14142 <Read_Config+0x68c>
                        SS80p->HEADER.ADDRESS  = address;
   13edc:	c8 5f       	subi	r28, 0xF8	; 248
   13ede:	de 4f       	sbci	r29, 0xFE	; 254
                        break;
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
   13ee0:	b8 81       	ld	r27, Y
   13ee2:	c8 50       	subi	r28, 0x08	; 8
   13ee4:	d1 40       	sbci	r29, 0x01	; 1
   13ee6:	2b e0       	ldi	r18, 0x0B	; 11
   13ee8:	b2 02       	muls	r27, r18
   13eea:	f0 01       	movw	r30, r0
   13eec:	11 24       	eor	r1, r1
   13eee:	e6 51       	subi	r30, 0x16	; 22
   13ef0:	f1 4e       	sbci	r31, 0xE1	; 225
   13ef2:	62 83       	std	Z+2, r22	; 0x02
   13ef4:	f7 01       	movw	r30, r14
   13ef6:	27 c1       	rjmp	.+590    	; 0x14146 <Read_Config+0x690>
                        SS80p->HEADER.PPR = ppr;
   13ef8:	c4 01       	movw	r24, r8
   13efa:	0e 94 94 31 	call	0x6328	; 0x6328 <stralloc>
                        break;
                    case TOK_FILE:
                        SS80p->HEADER.NAME = stralloc(token);
   13efe:	f7 01       	movw	r30, r14
   13f00:	28 c1       	rjmp	.+592    	; 0x14152 <Read_Config+0x69c>
   13f02:	ed b7       	in	r30, 0x3d	; 61
   13f04:	fe b7       	in	r31, 0x3e	; 62
                        break;
                    default:
                        printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   13f06:	37 82       	std	Z+7, r3	; 0x07
   13f08:	26 82       	std	Z+6, r2	; 0x06
   13f0a:	b5 82       	std	Z+5, r11	; 0x05
   13f0c:	a4 82       	std	Z+4, r10	; 0x04
   13f0e:	8d ee       	ldi	r24, 0xED	; 237
   13f10:	9e e1       	ldi	r25, 0x1E	; 30
   13f12:	55 cf       	rjmp	.-342    	; 0x13dbe <Read_Config+0x308>
   13f14:	07 31       	cpi	r16, 0x17	; 23
   13f16:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_CONFIG:
                if(tok == TOK_ID )
   13f18:	21 f4       	brne	.+8      	; 0x13f22 <Read_Config+0x46c>
   13f1a:	96 2f       	mov	r25, r22
   13f1c:	87 2f       	mov	r24, r23
                {
                    SS80p->CONFIG.ID = val.w;
   13f1e:	f7 01       	movw	r30, r14
   13f20:	2f c1       	rjmp	.+606    	; 0x14180 <Read_Config+0x6ca>
   13f22:	ed b7       	in	r30, 0x3d	; 61
   13f24:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   13f26:	37 82       	std	Z+7, r3	; 0x07
   13f28:	26 82       	std	Z+6, r2	; 0x06
   13f2a:	b5 82       	std	Z+5, r11	; 0x05
   13f2c:	a4 82       	std	Z+4, r10	; 0x04
   13f2e:	8f eb       	ldi	r24, 0xBF	; 191
   13f30:	9e e1       	ldi	r25, 0x1E	; 30
   13f32:	45 cf       	rjmp	.-374    	; 0x13dbe <Read_Config+0x308>
   13f34:	06 32       	cpi	r16, 0x26	; 38
   13f36:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case SS80_CONTROLLER:
                switch(tok)
   13f38:	71 f0       	breq	.+28     	; 0x13f56 <Read_Config+0x4a0>
   13f3a:	08 32       	cpi	r16, 0x28	; 40
   13f3c:	11 05       	cpc	r17, r1
   13f3e:	39 f0       	breq	.+14     	; 0x13f4e <Read_Config+0x498>
   13f40:	05 32       	cpi	r16, 0x25	; 37
   13f42:	11 05       	cpc	r17, r1
   13f44:	59 f4       	brne	.+22     	; 0x13f5c <Read_Config+0x4a6>
   13f46:	96 2f       	mov	r25, r22
   13f48:	87 2f       	mov	r24, r23
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   13f4a:	f7 01       	movw	r30, r14
   13f4c:	42 c1       	rjmp	.+644    	; 0x141d2 <Read_Config+0x71c>
   13f4e:	96 2f       	mov	r25, r22
   13f50:	87 2f       	mov	r24, r23

            case SS80_CONTROLLER:
                switch(tok)
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   13f52:	f7 01       	movw	r30, r14
   13f54:	3b c1       	rjmp	.+630    	; 0x141cc <Read_Config+0x716>
   13f56:	f7 01       	movw	r30, r14
   13f58:	64 87       	std	Z+12, r22	; 0x0c
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
                        break;
                    case TOK_TYPE:
                        SS80p->CONTROLLER.TYPE = val.b;
   13f5a:	4d ce       	rjmp	.-870    	; 0x13bf6 <Read_Config+0x140>
   13f5c:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13f5e:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   13f60:	37 82       	std	Z+7, r3	; 0x07
   13f62:	26 82       	std	Z+6, r2	; 0x06
   13f64:	b5 82       	std	Z+5, r11	; 0x05
   13f66:	a4 82       	std	Z+4, r10	; 0x04
   13f68:	8d e8       	ldi	r24, 0x8D	; 141
   13f6a:	9e e1       	ldi	r25, 0x1E	; 30
   13f6c:	28 cf       	rjmp	.-432    	; 0x13dbe <Read_Config+0x308>
   13f6e:	0a 30       	cpi	r16, 0x0A	; 10
   13f70:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13f72:	09 f4       	brne	.+2      	; 0x13f76 <Read_Config+0x4c0>
   13f74:	45 c0       	rjmp	.+138    	; 0x14000 <Read_Config+0x54a>
   13f76:	d4 f4       	brge	.+52     	; 0x13fac <Read_Config+0x4f6>
   13f78:	05 30       	cpi	r16, 0x05	; 5
   13f7a:	11 05       	cpc	r17, r1
   13f7c:	d1 f1       	breq	.+116    	; 0x13ff2 <Read_Config+0x53c>
   13f7e:	64 f4       	brge	.+24     	; 0x13f98 <Read_Config+0x4e2>
   13f80:	01 15       	cp	r16, r1
   13f82:	11 05       	cpc	r17, r1
   13f84:	09 f4       	brne	.+2      	; 0x13f88 <Read_Config+0x4d2>
   13f86:	40 c0       	rjmp	.+128    	; 0x14008 <Read_Config+0x552>
   13f88:	04 30       	cpi	r16, 0x04	; 4
   13f8a:	11 05       	cpc	r17, r1
   13f8c:	09 f0       	breq	.+2      	; 0x13f90 <Read_Config+0x4da>
   13f8e:	46 c0       	rjmp	.+140    	; 0x1401c <Read_Config+0x566>
   13f90:	f7 01       	movw	r30, r14
   13f92:	66 8b       	std	Z+22, r22	; 0x16
                        break;
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
                        break;
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
   13f94:	77 8b       	std	Z+23, r23	; 0x17
   13f96:	2f ce       	rjmp	.-930    	; 0x13bf6 <Read_Config+0x140>
   13f98:	06 30       	cpi	r16, 0x06	; 6
                        break;
   13f9a:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13f9c:	71 f1       	breq	.+92     	; 0x13ffa <Read_Config+0x544>
   13f9e:	07 30       	cpi	r16, 0x07	; 7
   13fa0:	11 05       	cpc	r17, r1
   13fa2:	e1 f5       	brne	.+120    	; 0x1401c <Read_Config+0x566>
   13fa4:	f7 01       	movw	r30, r14
   13fa6:	62 8b       	std	Z+18, r22	; 0x12
                        break;
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
                        break;
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   13fa8:	73 8b       	std	Z+19, r23	; 0x13
   13faa:	25 ce       	rjmp	.-950    	; 0x13bf6 <Read_Config+0x140>
   13fac:	0c 31       	cpi	r16, 0x1C	; 28
                        break;
   13fae:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13fb0:	79 f1       	breq	.+94     	; 0x14010 <Read_Config+0x55a>
   13fb2:	4c f4       	brge	.+18     	; 0x13fc6 <Read_Config+0x510>
   13fb4:	0f 30       	cpi	r16, 0x0F	; 15
   13fb6:	11 05       	cpc	r17, r1
   13fb8:	b1 f0       	breq	.+44     	; 0x13fe6 <Read_Config+0x530>
   13fba:	03 31       	cpi	r16, 0x13	; 19
   13fbc:	11 05       	cpc	r17, r1
   13fbe:	71 f5       	brne	.+92     	; 0x1401c <Read_Config+0x566>
   13fc0:	f7 01       	movw	r30, r14
   13fc2:	67 8f       	std	Z+31, r22	; 0x1f
                        break;
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
                        break;
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
   13fc4:	18 ce       	rjmp	.-976    	; 0x13bf6 <Read_Config+0x140>
   13fc6:	01 32       	cpi	r16, 0x21	; 33
                        break;
   13fc8:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   13fca:	29 f1       	breq	.+74     	; 0x14016 <Read_Config+0x560>
   13fcc:	09 32       	cpi	r16, 0x29	; 41
   13fce:	11 05       	cpc	r17, r1
   13fd0:	39 f0       	breq	.+14     	; 0x13fe0 <Read_Config+0x52a>
   13fd2:	0e 31       	cpi	r16, 0x1E	; 30
   13fd4:	11 05       	cpc	r17, r1
   13fd6:	11 f5       	brne	.+68     	; 0x1401c <Read_Config+0x566>
   13fd8:	f7 01       	movw	r30, r14
   13fda:	62 8f       	std	Z+26, r22	; 0x1a
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
                        break;
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   13fdc:	73 8f       	std	Z+27, r23	; 0x1b
   13fde:	0b ce       	rjmp	.-1002   	; 0x13bf6 <Read_Config+0x140>
   13fe0:	f7 01       	movw	r30, r14
                        break;
   13fe2:	65 87       	std	Z+13, r22	; 0x0d

            case SS80_UNIT:
                switch(tok)
                {
                    case TOK_UNIT_TYPE:
                        SS80p->UNIT.UNIT_TYPE = val.b;
   13fe4:	08 ce       	rjmp	.-1008   	; 0x13bf6 <Read_Config+0x140>
   13fe6:	f7 01       	movw	r30, r14
                        break;
   13fe8:	66 87       	std	Z+14, r22	; 0x0e
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
   13fea:	77 87       	std	Z+15, r23	; 0x0f
   13fec:	80 8b       	std	Z+16, r24	; 0x10
   13fee:	91 8b       	std	Z+17, r25	; 0x11
   13ff0:	02 ce       	rjmp	.-1020   	; 0x13bf6 <Read_Config+0x140>
   13ff2:	61 70       	andi	r22, 0x01	; 1
                        break;
   13ff4:	f7 01       	movw	r30, r14
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
                        break;
                    case TOK_BUFFERED_BLOCKS:
                        SS80p->UNIT.BUFFERED_BLOCKS = 1 & val.b;
   13ff6:	64 8b       	std	Z+20, r22	; 0x14
   13ff8:	fe cd       	rjmp	.-1028   	; 0x13bf6 <Read_Config+0x140>
   13ffa:	f7 01       	movw	r30, r14
                        break;
   13ffc:	65 8b       	std	Z+21, r22	; 0x15
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
   13ffe:	fb cd       	rjmp	.-1034   	; 0x13bf6 <Read_Config+0x140>
   14000:	f7 01       	movw	r30, r14
                        break;
   14002:	60 8f       	std	Z+24, r22	; 0x18
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   14004:	71 8f       	std	Z+25, r23	; 0x19
   14006:	f7 cd       	rjmp	.-1042   	; 0x13bf6 <Read_Config+0x140>
   14008:	f7 01       	movw	r30, r14
                        break;
   1400a:	64 8f       	std	Z+28, r22	; 0x1c
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
                        break;
                    case TOK_ACCESS_TIME:
                        SS80p->UNIT.ACCESS_TIME = val.w;
   1400c:	75 8f       	std	Z+29, r23	; 0x1d
   1400e:	f3 cd       	rjmp	.-1050   	; 0x13bf6 <Read_Config+0x140>
   14010:	f7 01       	movw	r30, r14
                        break;
   14012:	66 8f       	std	Z+30, r22	; 0x1e
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   14014:	f0 cd       	rjmp	.-1056   	; 0x13bf6 <Read_Config+0x140>
   14016:	f7 01       	movw	r30, r14
                        break;
   14018:	60 a3       	std	Z+32, r22	; 0x20
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
                        break;
                    case TOK_REMOVABLE_VOLUMES:
                        SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   1401a:	ed cd       	rjmp	.-1062   	; 0x13bf6 <Read_Config+0x140>
   1401c:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1401e:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   14020:	37 82       	std	Z+7, r3	; 0x07
   14022:	26 82       	std	Z+6, r2	; 0x06
   14024:	b5 82       	std	Z+5, r11	; 0x05
   14026:	a4 82       	std	Z+4, r10	; 0x04
   14028:	81 e6       	ldi	r24, 0x61	; 97
   1402a:	9e e1       	ldi	r25, 0x1E	; 30
   1402c:	c8 ce       	rjmp	.-624    	; 0x13dbe <Read_Config+0x308>
   1402e:	0a 31       	cpi	r16, 0x1A	; 26
   14030:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   14032:	b9 f0       	breq	.+46     	; 0x14062 <Read_Config+0x5ac>
   14034:	64 f4       	brge	.+24     	; 0x1404e <Read_Config+0x598>
   14036:	08 31       	cpi	r16, 0x18	; 24
   14038:	11 05       	cpc	r17, r1
   1403a:	e1 f0       	breq	.+56     	; 0x14074 <Read_Config+0x5be>
   1403c:	09 31       	cpi	r16, 0x19	; 25
   1403e:	11 05       	cpc	r17, r1
   14040:	e1 f4       	brne	.+56     	; 0x1407a <Read_Config+0x5c4>
   14042:	f7 01       	movw	r30, r14
   14044:	60 a7       	std	Z+40, r22	; 0x28
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
   14046:	71 a7       	std	Z+41, r23	; 0x29
   14048:	82 a7       	std	Z+42, r24	; 0x2a
   1404a:	93 a7       	std	Z+43, r25	; 0x2b
   1404c:	d4 cd       	rjmp	.-1112   	; 0x13bf6 <Read_Config+0x140>
   1404e:	0b 31       	cpi	r16, 0x1B	; 27
                        break;
   14050:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   14052:	69 f0       	breq	.+26     	; 0x1406e <Read_Config+0x5b8>
   14054:	0d 31       	cpi	r16, 0x1D	; 29
   14056:	11 05       	cpc	r17, r1
   14058:	81 f4       	brne	.+32     	; 0x1407a <Read_Config+0x5c4>
   1405a:	f7 01       	movw	r30, r14
   1405c:	66 a3       	std	Z+38, r22	; 0x26
                        break;
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
   1405e:	77 a3       	std	Z+39, r23	; 0x27
   14060:	ca cd       	rjmp	.-1132   	; 0x13bf6 <Read_Config+0x140>
   14062:	f7 01       	movw	r30, r14
                        break;
   14064:	61 a3       	std	Z+33, r22	; 0x21

            case SS80_VOLUME:
                switch(tok)
                {
                    case TOK_MAX_CYLINDER:
                        SS80p->VOLUME.MAX_CYLINDER = val.l;
   14066:	72 a3       	std	Z+34, r23	; 0x22
   14068:	83 a3       	std	Z+35, r24	; 0x23
   1406a:	94 a3       	std	Z+36, r25	; 0x24
   1406c:	c4 cd       	rjmp	.-1144   	; 0x13bf6 <Read_Config+0x140>
   1406e:	f7 01       	movw	r30, r14
                        break;
   14070:	65 a3       	std	Z+37, r22	; 0x25
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
   14072:	c1 cd       	rjmp	.-1150   	; 0x13bf6 <Read_Config+0x140>
   14074:	f7 01       	movw	r30, r14
                        break;
   14076:	64 a7       	std	Z+44, r22	; 0x2c
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
   14078:	be cd       	rjmp	.-1156   	; 0x13bf6 <Read_Config+0x140>
   1407a:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1407c:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   1407e:	37 82       	std	Z+7, r3	; 0x07
   14080:	26 82       	std	Z+6, r2	; 0x06
   14082:	b5 82       	std	Z+5, r11	; 0x05
   14084:	a4 82       	std	Z+4, r10	; 0x04
   14086:	c4 5e       	subi	r28, 0xE4	; 228
   14088:	de 4f       	sbci	r29, 0xFE	; 254
   1408a:	28 81       	ld	r18, Y
   1408c:	39 81       	ldd	r19, Y+1	; 0x01
   1408e:	4a 81       	ldd	r20, Y+2	; 0x02
   14090:	cc 51       	subi	r28, 0x1C	; 28
   14092:	d1 40       	sbci	r29, 0x01	; 1
   14094:	c4 c0       	rjmp	.+392    	; 0x1421e <Read_Config+0x768>
   14096:	04 31       	cpi	r16, 0x14	; 20
                }
                break;

#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
   14098:	11 05       	cpc	r17, r1
   1409a:	a1 f0       	breq	.+40     	; 0x140c4 <Read_Config+0x60e>
   1409c:	05 31       	cpi	r16, 0x15	; 21
   1409e:	11 05       	cpc	r17, r1
   140a0:	51 f0       	breq	.+20     	; 0x140b6 <Read_Config+0x600>
   140a2:	09 30       	cpi	r16, 0x09	; 9
   140a4:	11 05       	cpc	r17, r1
                    case TOK_HEADER:
                        push_state(state);
                        state = AMIGO_HEADER;
                        break;
                    case TOK_CONFIG:
                        push_state(state);
   140a6:	a9 f4       	brne	.+42     	; 0x140d2 <Read_Config+0x61c>
   140a8:	8a e0       	ldi	r24, 0x0A	; 10
   140aa:	90 e0       	ldi	r25, 0x00	; 0
   140ac:	dc d8       	rcall	.-3656   	; 0x13266 <push_state>
                        state = AMIGO_CONFIG;
   140ae:	9c e0       	ldi	r25, 0x0C	; 12
   140b0:	69 2e       	mov	r6, r25
   140b2:	71 2c       	mov	r7, r1
                        break;
   140b4:	a0 cd       	rjmp	.-1216   	; 0x13bf6 <Read_Config+0x140>
#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   140b6:	8a e0       	ldi	r24, 0x0A	; 10
   140b8:	90 e0       	ldi	r25, 0x00	; 0
   140ba:	d5 d8       	rcall	.-3670   	; 0x13266 <push_state>
   140bc:	2b e0       	ldi	r18, 0x0B	; 11
                        state = AMIGO_HEADER;
   140be:	62 2e       	mov	r6, r18
   140c0:	71 2c       	mov	r7, r1
   140c2:	99 cd       	rjmp	.-1230   	; 0x13bf6 <Read_Config+0x140>
                        break;
   140c4:	8a e0       	ldi	r24, 0x0A	; 10
                    case TOK_CONFIG:
                        push_state(state);
                        state = AMIGO_CONFIG;
                        break;
                    case TOK_GEOMETRY:
                        push_state(state);
   140c6:	90 e0       	ldi	r25, 0x00	; 0
   140c8:	ce d8       	rcall	.-3684   	; 0x13266 <push_state>
   140ca:	8d e0       	ldi	r24, 0x0D	; 13
   140cc:	68 2e       	mov	r6, r24
                        state = AMIGO_GEOMETRY;
   140ce:	71 2c       	mov	r7, r1
   140d0:	92 cd       	rjmp	.-1244   	; 0x13bf6 <Read_Config+0x140>
   140d2:	ed b7       	in	r30, 0x3d	; 61
                        break;
   140d4:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   140d6:	37 82       	std	Z+7, r3	; 0x07
   140d8:	26 82       	std	Z+6, r2	; 0x06
   140da:	b5 82       	std	Z+5, r11	; 0x05
   140dc:	a4 82       	std	Z+4, r10	; 0x04
   140de:	c7 5e       	subi	r28, 0xE7	; 231
   140e0:	de 4f       	sbci	r29, 0xFE	; 254
   140e2:	28 81       	ld	r18, Y
   140e4:	39 81       	ldd	r19, Y+1	; 0x01
   140e6:	4a 81       	ldd	r20, Y+2	; 0x02
   140e8:	c9 51       	subi	r28, 0x19	; 25
   140ea:	d1 40       	sbci	r29, 0x01	; 1
   140ec:	98 c0       	rjmp	.+304    	; 0x1421e <Read_Config+0x768>
   140ee:	00 31       	cpi	r16, 0x10	; 16
   140f0:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   140f2:	09 f4       	brne	.+2      	; 0x140f6 <Read_Config+0x640>
   140f4:	80 cd       	rjmp	.-1280   	; 0x13bf6 <Read_Config+0x140>
   140f6:	8c f4       	brge	.+34     	; 0x1411a <Read_Config+0x664>
   140f8:	01 30       	cpi	r16, 0x01	; 1
   140fa:	11 05       	cpc	r17, r1
   140fc:	69 f5       	brne	.+90     	; 0x14158 <Read_Config+0x6a2>
   140fe:	c8 5f       	subi	r28, 0xF8	; 248
   14100:	de 4f       	sbci	r29, 0xFE	; 254
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
						address =  val.b;
                        Devices[index].ADDRESS = address;
   14102:	28 81       	ld	r18, Y
   14104:	c8 50       	subi	r28, 0x08	; 8
   14106:	d1 40       	sbci	r29, 0x01	; 1
   14108:	3b e0       	ldi	r19, 0x0B	; 11
   1410a:	23 02       	muls	r18, r19
   1410c:	f0 01       	movw	r30, r0
   1410e:	11 24       	eor	r1, r1
   14110:	e6 51       	subi	r30, 0x16	; 22
   14112:	f1 4e       	sbci	r31, 0xE1	; 225
   14114:	61 83       	std	Z+1, r22	; 0x01
   14116:	d2 01       	movw	r26, r4
   14118:	14 c0       	rjmp	.+40     	; 0x14142 <Read_Config+0x68c>
                        AMIGOp->HEADER.ADDRESS = address;
   1411a:	02 31       	cpi	r16, 0x12	; 18
   1411c:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   1411e:	a9 f0       	breq	.+42     	; 0x1414a <Read_Config+0x694>
   14120:	0f 31       	cpi	r16, 0x1F	; 31
   14122:	11 05       	cpc	r17, r1
   14124:	c9 f4       	brne	.+50     	; 0x14158 <Read_Config+0x6a2>
   14126:	c8 5f       	subi	r28, 0xF8	; 248
   14128:	de 4f       	sbci	r29, 0xFE	; 254
                        Devices[index].ADDRESS = address;
                        AMIGOp->HEADER.ADDRESS = address;
                        break;
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
   1412a:	b8 81       	ld	r27, Y
   1412c:	c8 50       	subi	r28, 0x08	; 8
   1412e:	d1 40       	sbci	r29, 0x01	; 1
   14130:	2b e0       	ldi	r18, 0x0B	; 11
   14132:	b2 02       	muls	r27, r18
   14134:	f0 01       	movw	r30, r0
   14136:	11 24       	eor	r1, r1
   14138:	e6 51       	subi	r30, 0x16	; 22
   1413a:	f1 4e       	sbci	r31, 0xE1	; 225
   1413c:	62 83       	std	Z+2, r22	; 0x02
   1413e:	f2 01       	movw	r30, r4
   14140:	02 c0       	rjmp	.+4      	; 0x14146 <Read_Config+0x690>
                        AMIGOp->HEADER.PPR = ppr;
   14142:	6c 93       	st	X, r22
   14144:	58 cd       	rjmp	.-1360   	; 0x13bf6 <Read_Config+0x140>
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
						address =  val.b;
                        Devices[index].ADDRESS = address;
                        AMIGOp->HEADER.ADDRESS = address;
   14146:	61 83       	std	Z+1, r22	; 0x01
                        break;
   14148:	56 cd       	rjmp	.-1364   	; 0x13bf6 <Read_Config+0x140>
                    case TOK_PPR:
						ppr = val.b;
                        Devices[index].PPR = ppr;
                        AMIGOp->HEADER.PPR = ppr;
   1414a:	c4 01       	movw	r24, r8
                        break;
   1414c:	0e 94 94 31 	call	0x6328	; 0x6328 <stralloc>
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
   14150:	f2 01       	movw	r30, r4
   14152:	93 83       	std	Z+3, r25	; 0x03
   14154:	82 83       	std	Z+2, r24	; 0x02
   14156:	4f cd       	rjmp	.-1378   	; 0x13bf6 <Read_Config+0x140>
   14158:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1415a:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   1415c:	37 82       	std	Z+7, r3	; 0x07
   1415e:	26 82       	std	Z+6, r2	; 0x06
   14160:	b5 82       	std	Z+5, r11	; 0x05
   14162:	a4 82       	std	Z+4, r10	; 0x04
   14164:	ca 5e       	subi	r28, 0xEA	; 234
   14166:	de 4f       	sbci	r29, 0xFE	; 254
   14168:	28 81       	ld	r18, Y
   1416a:	39 81       	ldd	r19, Y+1	; 0x01
   1416c:	4a 81       	ldd	r20, Y+2	; 0x02
   1416e:	c6 51       	subi	r28, 0x16	; 22
   14170:	d1 40       	sbci	r29, 0x01	; 1
   14172:	55 c0       	rjmp	.+170    	; 0x1421e <Read_Config+0x768>
   14174:	07 31       	cpi	r16, 0x17	; 23
   14176:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_CONFIG:
                if(tok == TOK_ID )
   14178:	31 f4       	brne	.+12     	; 0x14186 <Read_Config+0x6d0>
   1417a:	96 2f       	mov	r25, r22
   1417c:	87 2f       	mov	r24, r23
                {
                    AMIGOp->CONFIG.ID = val.w;
   1417e:	f2 01       	movw	r30, r4
   14180:	96 83       	std	Z+6, r25	; 0x06
   14182:	87 83       	std	Z+7, r24	; 0x07
   14184:	38 cd       	rjmp	.-1424   	; 0x13bf6 <Read_Config+0x140>
   14186:	ed b7       	in	r30, 0x3d	; 61
   14188:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   1418a:	37 82       	std	Z+7, r3	; 0x07
   1418c:	26 82       	std	Z+6, r2	; 0x06
   1418e:	b5 82       	std	Z+5, r11	; 0x05
   14190:	a4 82       	std	Z+4, r10	; 0x04
   14192:	cd 5e       	subi	r28, 0xED	; 237
   14194:	de 4f       	sbci	r29, 0xFE	; 254
   14196:	28 81       	ld	r18, Y
   14198:	39 81       	ldd	r19, Y+1	; 0x01
   1419a:	4a 81       	ldd	r20, Y+2	; 0x02
   1419c:	c3 51       	subi	r28, 0x13	; 19
   1419e:	d1 40       	sbci	r29, 0x01	; 1
   141a0:	3e c0       	rjmp	.+124    	; 0x1421e <Read_Config+0x768>
   141a2:	0d 30       	cpi	r16, 0x0D	; 13
   141a4:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   141a6:	e1 f0       	breq	.+56     	; 0x141e0 <Read_Config+0x72a>
   141a8:	3c f4       	brge	.+14     	; 0x141b8 <Read_Config+0x702>
   141aa:	08 30       	cpi	r16, 0x08	; 8
   141ac:	11 05       	cpc	r17, r1
   141ae:	e1 f4       	brne	.+56     	; 0x141e8 <Read_Config+0x732>
   141b0:	96 2f       	mov	r25, r22
   141b2:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   141b4:	f2 01       	movw	r30, r4
   141b6:	0a c0       	rjmp	.+20     	; 0x141cc <Read_Config+0x716>
   141b8:	06 31       	cpi	r16, 0x16	; 22
   141ba:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   141bc:	69 f0       	breq	.+26     	; 0x141d8 <Read_Config+0x722>
   141be:	02 32       	cpi	r16, 0x22	; 34
   141c0:	11 05       	cpc	r17, r1
   141c2:	91 f4       	brne	.+36     	; 0x141e8 <Read_Config+0x732>
   141c4:	96 2f       	mov	r25, r22
   141c6:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
                        break;
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   141c8:	f2 01       	movw	r30, r4
   141ca:	03 c0       	rjmp	.+6      	; 0x141d2 <Read_Config+0x71c>
   141cc:	90 87       	std	Z+8, r25	; 0x08
   141ce:	81 87       	std	Z+9, r24	; 0x09

            case AMIGO_GEOMETRY:
                switch(tok)
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   141d0:	12 cd       	rjmp	.-1500   	; 0x13bf6 <Read_Config+0x140>
   141d2:	92 87       	std	Z+10, r25	; 0x0a
                        break;
   141d4:	83 87       	std	Z+11, r24	; 0x0b
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   141d6:	0f cd       	rjmp	.-1506   	; 0x13bf6 <Read_Config+0x140>
   141d8:	f2 01       	movw	r30, r4
                        break;
   141da:	64 87       	std	Z+12, r22	; 0x0c
                    case TOK_HEADS:
                        AMIGOp->GEOMETRY.HEADS = val.w;
   141dc:	75 87       	std	Z+13, r23	; 0x0d
   141de:	0b cd       	rjmp	.-1514   	; 0x13bf6 <Read_Config+0x140>
   141e0:	f2 01       	movw	r30, r4
                        break;
   141e2:	66 87       	std	Z+14, r22	; 0x0e
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
   141e4:	77 87       	std	Z+15, r23	; 0x0f
   141e6:	07 cd       	rjmp	.-1522   	; 0x13bf6 <Read_Config+0x140>
   141e8:	ed b7       	in	r30, 0x3d	; 61
                        break;
   141ea:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   141ec:	37 82       	std	Z+7, r3	; 0x07
   141ee:	26 82       	std	Z+6, r2	; 0x06
   141f0:	b5 82       	std	Z+5, r11	; 0x05
   141f2:	a4 82       	std	Z+4, r10	; 0x04
   141f4:	c0 5f       	subi	r28, 0xF0	; 240
   141f6:	de 4f       	sbci	r29, 0xFE	; 254
   141f8:	28 81       	ld	r18, Y
   141fa:	39 81       	ldd	r19, Y+1	; 0x01
   141fc:	4a 81       	ldd	r20, Y+2	; 0x02
   141fe:	c0 51       	subi	r28, 0x10	; 16
   14200:	d1 40       	sbci	r29, 0x01	; 1
   14202:	0d c0       	rjmp	.+26     	; 0x1421e <Read_Config+0x768>
   14204:	ed b7       	in	r30, 0x3d	; 61
   14206:	fe b7       	in	r31, 0x3e	; 62
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   14208:	37 82       	std	Z+7, r3	; 0x07
   1420a:	26 82       	std	Z+6, r2	; 0x06
   1420c:	b5 82       	std	Z+5, r11	; 0x05
   1420e:	a4 82       	std	Z+4, r10	; 0x04
   14210:	c3 5f       	subi	r28, 0xF3	; 243
   14212:	de 4f       	sbci	r29, 0xFE	; 254
   14214:	28 81       	ld	r18, Y
   14216:	39 81       	ldd	r19, Y+1	; 0x01
   14218:	4a 81       	ldd	r20, Y+2	; 0x02
   1421a:	cd 50       	subi	r28, 0x0D	; 13
   1421c:	d1 40       	sbci	r29, 0x01	; 1
   1421e:	21 83       	std	Z+1, r18	; 0x01
   14220:	32 83       	std	Z+2, r19	; 0x02
   14222:	43 83       	std	Z+3, r20	; 0x03
   14224:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   14228:	ff ef       	ldi	r31, 0xFF	; 255
   1422a:	cf 1a       	sub	r12, r31
                ++errors;
   1422c:	df 0a       	sbc	r13, r31
   1422e:	e3 cc       	rjmp	.-1594   	; 0x13bf6 <Read_Config+0x140>
   14230:	61 14       	cp	r6, r1
                break;
   14232:	71 04       	cpc	r7, r1

        }                                         // switch
    }                                             //while
    if(state != START_STATE)
   14234:	79 f0       	breq	.+30     	; 0x14254 <Read_Config+0x79e>
   14236:	ed b7       	in	r30, 0x3d	; 61
   14238:	fe b7       	in	r31, 0x3e	; 62
    {
        printf("Missing END statement at line:%d\n", lines);
   1423a:	35 82       	std	Z+5, r3	; 0x05
   1423c:	24 82       	std	Z+4, r2	; 0x04
   1423e:	82 e3       	ldi	r24, 0x32	; 50
   14240:	9d e1       	ldi	r25, 0x1D	; 29
   14242:	a0 e0       	ldi	r26, 0x00	; 0
   14244:	81 83       	std	Z+1, r24	; 0x01
   14246:	92 83       	std	Z+2, r25	; 0x02
   14248:	a3 83       	std	Z+3, r26	; 0x03
   1424a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1424e:	ff ef       	ldi	r31, 0xFF	; 255
   14250:	cf 1a       	sub	r12, r31
        ++errors;
   14252:	df 0a       	sbc	r13, r31
   14254:	ed b7       	in	r30, 0x3d	; 61
   14256:	fe b7       	in	r31, 0x3e	; 62
    }
    printf("Read_Config: read(%d) lines\n", lines);
   14258:	35 82       	std	Z+5, r3	; 0x05
   1425a:	24 82       	std	Z+4, r2	; 0x04
   1425c:	85 e1       	ldi	r24, 0x15	; 21
   1425e:	9d e1       	ldi	r25, 0x1D	; 29
   14260:	a0 e0       	ldi	r26, 0x00	; 0
   14262:	81 83       	std	Z+1, r24	; 0x01
   14264:	92 83       	std	Z+2, r25	; 0x02
   14266:	a3 83       	std	Z+3, r26	; 0x03
   14268:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1426c:	c1 14       	cp	r12, r1
   1426e:	d1 04       	cpc	r13, r1
    if(errors)
   14270:	61 f0       	breq	.+24     	; 0x1428a <Read_Config+0x7d4>
   14272:	ed b7       	in	r30, 0x3d	; 61
   14274:	fe b7       	in	r31, 0x3e	; 62
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   14276:	d5 82       	std	Z+5, r13	; 0x05
   14278:	c4 82       	std	Z+4, r12	; 0x04
   1427a:	8e ee       	ldi	r24, 0xEE	; 238
   1427c:	9c e1       	ldi	r25, 0x1C	; 28
   1427e:	a0 e0       	ldi	r26, 0x00	; 0
   14280:	81 83       	std	Z+1, r24	; 0x01
   14282:	92 83       	std	Z+2, r25	; 0x02
   14284:	a3 83       	std	Z+3, r26	; 0x03
   14286:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1428a:	c5 5f       	subi	r28, 0xF5	; 245
   1428c:	de 4f       	sbci	r29, 0xFE	; 254

    if(fclose(cfg) == EOF)
   1428e:	88 81       	ld	r24, Y
   14290:	99 81       	ldd	r25, Y+1	; 0x01
   14292:	cb 50       	subi	r28, 0x0B	; 11
   14294:	d1 40       	sbci	r29, 0x01	; 1
   14296:	0e 94 7e 7c 	call	0xf8fc	; 0xf8fc <fclose>
   1429a:	01 96       	adiw	r24, 0x01	; 1
   1429c:	39 f4       	brne	.+14     	; 0x142ac <Read_Config+0x7f6>
   1429e:	89 e3       	ldi	r24, 0x39	; 57
    {
        perror("Read_Config - close error");
   142a0:	9e e0       	ldi	r25, 0x0E	; 14
   142a2:	0e 94 05 78 	call	0xf00a	; 0xf00a <perror>
   142a6:	2f ef       	ldi	r18, 0xFF	; 255
        ++errors;
   142a8:	c2 1a       	sub	r12, r18
   142aa:	d2 0a       	sbc	r13, r18
   142ac:	fb db       	rcall	.-2058   	; 0x13aa4 <verify_devices>
    }

// Post process and fixup any devices
    verify_devices();
   142ae:	c6 01       	movw	r24, r12
   142b0:	c2 5e       	subi	r28, 0xE2	; 226

    return(errors);
   142b2:	de 4f       	sbci	r29, 0xFE	; 254
}
   142b4:	e2 e1       	ldi	r30, 0x12	; 18
   142b6:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

000142ba <display_mounts>:
   142ba:	cf 93       	push	r28
   142bc:	00 d0       	rcall	.+0      	; 0x142be <display_mounts+0x4>
            printf("PRINTER %-8s %2d\n", " ", (int) PRINTERp->HEADER.ADDRESS);
	}
}

void display_mounts()
{
   142be:	1f 92       	push	r1
	int8_t i;
	printf("Mounted drives\n");
   142c0:	81 ec       	ldi	r24, 0xC1	; 193
   142c2:	95 e1       	ldi	r25, 0x15	; 21
   142c4:	a0 e0       	ldi	r26, 0x00	; 0
   142c6:	ed b7       	in	r30, 0x3d	; 61
   142c8:	fe b7       	in	r31, 0x3e	; 62
   142ca:	81 83       	std	Z+1, r24	; 0x01
   142cc:	92 83       	std	Z+2, r25	; 0x02
   142ce:	a3 83       	std	Z+3, r26	; 0x03
   142d0:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
	for(i=0;i<MAX_DEVICES;++i)
   142d4:	c0 e0       	ldi	r28, 0x00	; 0
		display_mount(i);
   142d6:	8c 2f       	mov	r24, r28
   142d8:	a0 da       	rcall	.-2752   	; 0x1381a <display_mount>
   142da:	cf 5f       	subi	r28, 0xFF	; 255

void display_mounts()
{
	int8_t i;
	printf("Mounted drives\n");
	for(i=0;i<MAX_DEVICES;++i)
   142dc:	cc 30       	cpi	r28, 0x0C	; 12
   142de:	d9 f7       	brne	.-10     	; 0x142d6 <display_mounts+0x1c>
		display_mount(i);
    printf("\n");
   142e0:	8f eb       	ldi	r24, 0xBF	; 191
   142e2:	95 e1       	ldi	r25, 0x15	; 21
   142e4:	a0 e0       	ldi	r26, 0x00	; 0
   142e6:	ed b7       	in	r30, 0x3d	; 61
   142e8:	fe b7       	in	r31, 0x3e	; 62
   142ea:	81 83       	std	Z+1, r24	; 0x01
   142ec:	92 83       	std	Z+2, r25	; 0x02
   142ee:	a3 83       	std	Z+3, r26	; 0x03
   142f0:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
}
   142f4:	0f 90       	pop	r0
   142f6:	0f 90       	pop	r0
   142f8:	0f 90       	pop	r0
   142fa:	cf 91       	pop	r28
   142fc:	08 95       	ret

000142fe <mount>:

/// ===============================================
/// @brief mount disks - testing
/// @return Devices[] index on success, -1 on error
int8_t mount(int argc, char *argv[])
{
   142fe:	a5 e0       	ldi	r26, 0x05	; 5
   14300:	b0 e0       	ldi	r27, 0x00	; 0
   14302:	e5 e8       	ldi	r30, 0x85	; 133
   14304:	f1 ea       	ldi	r31, 0xA1	; 161
   14306:	0c 94 70 e6 	jmp	0x1cce0	; 0x1cce0 <__prologue_saves__+0x14>
   1430a:	eb 01       	movw	r28, r22
	{
		printf("argv[%d] = %s\n", (int) i, argv[i]);

	}
#endif
	if(argc == 1)
   1430c:	81 30       	cpi	r24, 0x01	; 1
   1430e:	91 05       	cpc	r25, r1
   14310:	11 f4       	brne	.+4      	; 0x14316 <mount+0x18>
	{
		display_mounts();
   14312:	d3 df       	rcall	.-90     	; 0x142ba <display_mounts>
   14314:	c2 c0       	rjmp	.+388    	; 0x1449a <mount+0x19c>
		return(1);
	}
	else if(argc == 3)
   14316:	83 30       	cpi	r24, 0x03	; 3
   14318:	91 05       	cpc	r25, r1
   1431a:	61 f5       	brne	.+88     	; 0x14374 <mount+0x76>
	{
			if(MATCHI(argv[1], "PRINTER"))
   1431c:	63 e5       	ldi	r22, 0x53	; 83
   1431e:	7e e0       	ldi	r23, 0x0E	; 14
   14320:	8a 81       	ldd	r24, Y+2	; 0x02
   14322:	9b 81       	ldd	r25, Y+3	; 0x03
   14324:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   14328:	89 2b       	or	r24, r25
   1432a:	09 f4       	brne	.+2      	; 0x1432e <mount+0x30>
   1432c:	b6 c0       	rjmp	.+364    	; 0x1449a <mount+0x19c>
			{
				// FIXME - do we want to have separtate address and ppr ?
				int8_t address = atoi(argv[2]) & 0xff;
   1432e:	8c 81       	ldd	r24, Y+4	; 0x04
   14330:	9d 81       	ldd	r25, Y+5	; 0x05
   14332:	0e 94 3e 47 	call	0x8e7c	; 0x8e7c <atoi>
   14336:	c8 2f       	mov	r28, r24
				index = alloc_device(PRINTER_TYPE);
   14338:	84 e0       	ldi	r24, 0x04	; 4
   1433a:	90 e0       	ldi	r25, 0x00	; 0
   1433c:	0e 94 62 98 	call	0x130c4	; 0x130c4 <alloc_device>
				if(index < 0)
   14340:	87 ff       	sbrs	r24, 7
   14342:	0b c0       	rjmp	.+22     	; 0x1435a <mount+0x5c>
				{
					printf("Could not allocate PRINTER structure\n");
   14344:	83 eb       	ldi	r24, 0xB3	; 179
   14346:	96 e1       	ldi	r25, 0x16	; 22
   14348:	a0 e0       	ldi	r26, 0x00	; 0
   1434a:	ed b7       	in	r30, 0x3d	; 61
   1434c:	fe b7       	in	r31, 0x3e	; 62
   1434e:	81 83       	std	Z+1, r24	; 0x01
   14350:	92 83       	std	Z+2, r25	; 0x02
   14352:	a3 83       	std	Z+3, r26	; 0x03
   14354:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   14358:	9e c0       	rjmp	.+316    	; 0x14496 <mount+0x198>
					return(0);
				}
				PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   1435a:	9b e0       	ldi	r25, 0x0B	; 11
   1435c:	89 02       	muls	r24, r25
   1435e:	f0 01       	movw	r30, r0
   14360:	11 24       	eor	r1, r1
   14362:	e6 51       	subi	r30, 0x16	; 22
   14364:	f1 4e       	sbci	r31, 0xE1	; 225
				PRINTERp->HEADER.ADDRESS  = address;
   14366:	a7 81       	ldd	r26, Z+7	; 0x07
   14368:	b0 85       	ldd	r27, Z+8	; 0x08
   1436a:	cc 93       	st	X, r28
				Devices[index].ADDRESS = address;
   1436c:	c1 83       	std	Z+1, r28	; 0x01
				Devices[index].PPR = 0xff;
   1436e:	9f ef       	ldi	r25, 0xFF	; 255
   14370:	92 83       	std	Z+2, r25	; 0x02
   14372:	80 c0       	rjmp	.+256    	; 0x14474 <mount+0x176>
				return( verify_device(index) );
			}
	}
	else if(argc == 4)
   14374:	04 97       	sbiw	r24, 0x04	; 4
   14376:	09 f0       	breq	.+2      	; 0x1437a <mount+0x7c>
   14378:	8d c0       	rjmp	.+282    	; 0x14494 <mount+0x196>
		/*
		argv[1] = 9121
		argv[2] = 2
		argv[3] = amigo2.lif
		*/
		if(!hpdir_find_drive(argv[1],0,0) )
   1437a:	40 e0       	ldi	r20, 0x00	; 0
   1437c:	50 e0       	ldi	r21, 0x00	; 0
   1437e:	60 e0       	ldi	r22, 0x00	; 0
   14380:	70 e0       	ldi	r23, 0x00	; 0
   14382:	8a 81       	ldd	r24, Y+2	; 0x02
   14384:	9b 81       	ldd	r25, Y+3	; 0x03
   14386:	ac d1       	rcall	.+856    	; 0x146e0 <hpdir_find_drive>
   14388:	89 2b       	or	r24, r25
   1438a:	59 f4       	brne	.+22     	; 0x143a2 <mount+0xa4>
		{
			printf("WARNING: model NOT found in hpdir.ini!\n");
   1438c:	8b e8       	ldi	r24, 0x8B	; 139
   1438e:	96 e1       	ldi	r25, 0x16	; 22
   14390:	a0 e0       	ldi	r26, 0x00	; 0
   14392:	ed b7       	in	r30, 0x3d	; 61
   14394:	fe b7       	in	r31, 0x3e	; 62
   14396:	81 83       	std	Z+1, r24	; 0x01
   14398:	92 83       	std	Z+2, r25	; 0x02
   1439a:	a3 83       	std	Z+3, r26	; 0x03
   1439c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   143a0:	37 c0       	rjmp	.+110    	; 0x14410 <mount+0x112>
			return(-1);
		}
		if(MATCHI(hpdir.TYPE, "SS80") || MATCHI(hpdir.TYPE,"CS80") )
   143a2:	6b e5       	ldi	r22, 0x5B	; 91
   143a4:	7e e0       	ldi	r23, 0x0E	; 14
   143a6:	8e ec       	ldi	r24, 0xCE	; 206
   143a8:	9f e1       	ldi	r25, 0x1F	; 31
   143aa:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   143ae:	89 2b       	or	r24, r25
   143b0:	a9 f0       	breq	.+42     	; 0x143dc <mount+0xde>
		{
			// FIXME - do we want to have separtate address and ppr ?
			int8_t address = atoi(argv[2]) & 0xff;
   143b2:	8c 81       	ldd	r24, Y+4	; 0x04
   143b4:	9d 81       	ldd	r25, Y+5	; 0x05
   143b6:	0e 94 3e 47 	call	0x8e7c	; 0x8e7c <atoi>
   143ba:	e8 2e       	mov	r14, r24
			int8_t ppr = address;
			index = alloc_device(SS80_TYPE);
   143bc:	83 e0       	ldi	r24, 0x03	; 3
   143be:	90 e0       	ldi	r25, 0x00	; 0
   143c0:	0e 94 62 98 	call	0x130c4	; 0x130c4 <alloc_device>
   143c4:	f8 2e       	mov	r15, r24
			if(index < 0)
   143c6:	87 ff       	sbrs	r24, 7
   143c8:	12 c0       	rjmp	.+36     	; 0x143ee <mount+0xf0>
			{
				printf("Could not allocate SS80 structure for %s\n",argv[2]);
   143ca:	8c 81       	ldd	r24, Y+4	; 0x04
   143cc:	9d 81       	ldd	r25, Y+5	; 0x05
   143ce:	ed b7       	in	r30, 0x3d	; 61
   143d0:	fe b7       	in	r31, 0x3e	; 62
   143d2:	95 83       	std	Z+5, r25	; 0x05
   143d4:	84 83       	std	Z+4, r24	; 0x04
   143d6:	81 e6       	ldi	r24, 0x61	; 97
   143d8:	96 e1       	ldi	r25, 0x16	; 22
   143da:	38 c0       	rjmp	.+112    	; 0x1444c <mount+0x14e>
		if(!hpdir_find_drive(argv[1],0,0) )
		{
			printf("WARNING: model NOT found in hpdir.ini!\n");
			return(-1);
		}
		if(MATCHI(hpdir.TYPE, "SS80") || MATCHI(hpdir.TYPE,"CS80") )
   143dc:	60 e6       	ldi	r22, 0x60	; 96
   143de:	7e e0       	ldi	r23, 0x0E	; 14
   143e0:	8e ec       	ldi	r24, 0xCE	; 206
   143e2:	9f e1       	ldi	r25, 0x1F	; 31
   143e4:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   143e8:	89 2b       	or	r24, r25
   143ea:	19 f7       	brne	.-58     	; 0x143b2 <mount+0xb4>
   143ec:	13 c0       	rjmp	.+38     	; 0x14414 <mount+0x116>
			if(index < 0)
			{
				printf("Could not allocate SS80 structure for %s\n",argv[2]);
				return(0);
			}
			SS80p = (SS80DiskType *) Devices[index].dev;
   143ee:	ff 2d       	mov	r31, r15
   143f0:	8b e0       	ldi	r24, 0x0B	; 11
   143f2:	f8 02       	muls	r31, r24
   143f4:	80 01       	movw	r16, r0
   143f6:	11 24       	eor	r1, r1
   143f8:	06 51       	subi	r16, 0x16	; 22
   143fa:	11 4e       	sbci	r17, 0xE1	; 225
   143fc:	f8 01       	movw	r30, r16
   143fe:	c7 80       	ldd	r12, Z+7	; 0x07
   14400:	d0 84       	ldd	r13, Z+8	; 0x08
			if( !hpdir_set_parameters(index, argv[1] ) )
   14402:	6a 81       	ldd	r22, Y+2	; 0x02
   14404:	7b 81       	ldd	r23, Y+3	; 0x03
   14406:	8f 2d       	mov	r24, r15
   14408:	0e 94 ed 99 	call	0x133da	; 0x133da <hpdir_set_parameters>
   1440c:	81 11       	cpse	r24, r1
   1440e:	25 c0       	rjmp	.+74     	; 0x1445a <mount+0x15c>
				return(-1);
   14410:	8f ef       	ldi	r24, 0xFF	; 255
   14412:	44 c0       	rjmp	.+136    	; 0x1449c <mount+0x19e>
			Devices[index].ADDRESS = address;
			Devices[index].PPR = ppr;
			return( verify_device(index) );
		}
#ifdef AMIGO
		else if(MATCH(hpdir.TYPE, "AMIGO"))
   14414:	65 e6       	ldi	r22, 0x65	; 101
   14416:	7e e0       	ldi	r23, 0x0E	; 14
   14418:	8e ec       	ldi	r24, 0xCE	; 206
   1441a:	9f e1       	ldi	r25, 0x1F	; 31
   1441c:	0e 94 de 31 	call	0x63bc	; 0x63bc <MATCH>
   14420:	89 2b       	or	r24, r25
   14422:	51 f1       	breq	.+84     	; 0x14478 <mount+0x17a>
		{
			// FIXME - do we want to have separtate address and ppr ?
			int8_t address = atoi(argv[2]) & 0xff;
   14424:	8c 81       	ldd	r24, Y+4	; 0x04
   14426:	9d 81       	ldd	r25, Y+5	; 0x05
   14428:	0e 94 3e 47 	call	0x8e7c	; 0x8e7c <atoi>
   1442c:	e8 2e       	mov	r14, r24
			int8_t ppr = address;
			index = alloc_device(AMIGO_TYPE);
   1442e:	81 e0       	ldi	r24, 0x01	; 1
   14430:	90 e0       	ldi	r25, 0x00	; 0
   14432:	0e 94 62 98 	call	0x130c4	; 0x130c4 <alloc_device>
   14436:	f8 2e       	mov	r15, r24
			if(index < 0)
   14438:	87 ff       	sbrs	r24, 7
   1443a:	d9 cf       	rjmp	.-78     	; 0x143ee <mount+0xf0>
			{
				printf("Could not allocate AMIGO structure for %s\n",argv[2]);
   1443c:	8c 81       	ldd	r24, Y+4	; 0x04
   1443e:	9d 81       	ldd	r25, Y+5	; 0x05
   14440:	ed b7       	in	r30, 0x3d	; 61
   14442:	fe b7       	in	r31, 0x3e	; 62
   14444:	95 83       	std	Z+5, r25	; 0x05
   14446:	84 83       	std	Z+4, r24	; 0x04
   14448:	86 e3       	ldi	r24, 0x36	; 54
   1444a:	96 e1       	ldi	r25, 0x16	; 22
   1444c:	a0 e0       	ldi	r26, 0x00	; 0
   1444e:	81 83       	std	Z+1, r24	; 0x01
   14450:	92 83       	std	Z+2, r25	; 0x02
   14452:	a3 83       	std	Z+3, r26	; 0x03
   14454:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   14458:	1e c0       	rjmp	.+60     	; 0x14496 <mount+0x198>
				return(0);
			}
			AMIGOp = (AMIGODiskType *) Devices[index].dev;
			if( !hpdir_set_parameters(index, argv[1] ) )
				return(-1);
			AMIGOp->HEADER.NAME = stralloc(argv[3]);
   1445a:	8e 81       	ldd	r24, Y+6	; 0x06
   1445c:	9f 81       	ldd	r25, Y+7	; 0x07
   1445e:	0e 94 94 31 	call	0x6328	; 0x6328 <stralloc>
   14462:	f6 01       	movw	r30, r12
   14464:	93 83       	std	Z+3, r25	; 0x03
   14466:	82 83       	std	Z+2, r24	; 0x02
			AMIGOp->HEADER.ADDRESS  = address;
   14468:	e0 82       	st	Z, r14
			AMIGOp->HEADER.PPR = ppr;
   1446a:	e1 82       	std	Z+1, r14	; 0x01
			Devices[index].ADDRESS = address;
   1446c:	f8 01       	movw	r30, r16
   1446e:	e1 82       	std	Z+1, r14	; 0x01
			Devices[index].PPR = ppr;
			return( verify_device(index) );
   14470:	e2 82       	std	Z+2, r14	; 0x02
   14472:	8f 2d       	mov	r24, r15
   14474:	4b da       	rcall	.-2922   	; 0x1390c <verify_device>
   14476:	12 c0       	rjmp	.+36     	; 0x1449c <mount+0x19e>
		}
#endif
		else
		{
			printf("Expected AMIGO or SS80 or CS80 for [%s]\n",argv[1]);
   14478:	8a 81       	ldd	r24, Y+2	; 0x02
   1447a:	9b 81       	ldd	r25, Y+3	; 0x03
   1447c:	ed b7       	in	r30, 0x3d	; 61
   1447e:	fe b7       	in	r31, 0x3e	; 62
   14480:	95 83       	std	Z+5, r25	; 0x05
   14482:	84 83       	std	Z+4, r24	; 0x04
   14484:	8d e0       	ldi	r24, 0x0D	; 13
   14486:	96 e1       	ldi	r25, 0x16	; 22
   14488:	a0 e0       	ldi	r26, 0x00	; 0
   1448a:	81 83       	std	Z+1, r24	; 0x01
   1448c:	92 83       	std	Z+2, r25	; 0x02
   1448e:	a3 83       	std	Z+3, r26	; 0x03
   14490:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
			return(0);
		}
	}
	else 
	{
		mount_usage();
   14494:	52 d9       	rcall	.-3420   	; 0x1373a <mount_usage>
		return(0);
   14496:	80 e0       	ldi	r24, 0x00	; 0
   14498:	01 c0       	rjmp	.+2      	; 0x1449c <mount+0x19e>
	}
	return(1);
   1449a:	81 e0       	ldi	r24, 0x01	; 1
}
   1449c:	cd b7       	in	r28, 0x3d	; 61
   1449e:	de b7       	in	r29, 0x3e	; 62
   144a0:	25 96       	adiw	r28, 0x05	; 5
   144a2:	e8 e0       	ldi	r30, 0x08	; 8
   144a4:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__epilogue_restores__+0x14>

000144a8 <drives_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int drives_tests(int argc, char * argv[])
{
   144a8:	ef 92       	push	r14
   144aa:	ff 92       	push	r15
   144ac:	0f 93       	push	r16
   144ae:	1f 93       	push	r17
   144b0:	cf 93       	push	r28
   144b2:	df 93       	push	r29
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   144b4:	fb 01       	movw	r30, r22
   144b6:	00 81       	ld	r16, Z
   144b8:	11 81       	ldd	r17, Z+1	; 0x01

    if(!ptr)
   144ba:	01 15       	cp	r16, r1
   144bc:	11 05       	cpc	r17, r1
   144be:	19 f4       	brne	.+6      	; 0x144c6 <drives_tests+0x1e>
        return(0);
   144c0:	80 e0       	ldi	r24, 0x00	; 0
   144c2:	90 e0       	ldi	r25, 0x00	; 0
   144c4:	6d c0       	rjmp	.+218    	; 0x145a0 <drives_tests+0xf8>
   144c6:	eb 01       	movw	r28, r22
   144c8:	7c 01       	movw	r14, r24

    if (MATCHI(ptr,"drives") && MATCHI(argv[ind], "help"))
   144ca:	6b e6       	ldi	r22, 0x6B	; 107
   144cc:	7e e0       	ldi	r23, 0x0E	; 14
   144ce:	c8 01       	movw	r24, r16
   144d0:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   144d4:	89 2b       	or	r24, r25
   144d6:	59 f0       	breq	.+22     	; 0x144ee <drives_tests+0x46>
   144d8:	62 e6       	ldi	r22, 0x62	; 98
   144da:	76 e1       	ldi	r23, 0x16	; 22
   144dc:	8a 81       	ldd	r24, Y+2	; 0x02
   144de:	9b 81       	ldd	r25, Y+3	; 0x03
   144e0:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   144e4:	89 2b       	or	r24, r25
   144e6:	19 f0       	breq	.+6      	; 0x144ee <drives_tests+0x46>
	{
		drives_help(1);
   144e8:	81 e0       	ldi	r24, 0x01	; 1
   144ea:	12 d9       	rcall	.-3548   	; 0x13710 <drives_help>
   144ec:	57 c0       	rjmp	.+174    	; 0x1459c <drives_tests+0xf4>
		return(1);
	}

    if (MATCHI(ptr,"mount") )
   144ee:	63 e7       	ldi	r22, 0x73	; 115
   144f0:	7e e0       	ldi	r23, 0x0E	; 14
   144f2:	c8 01       	movw	r24, r16
   144f4:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   144f8:	89 2b       	or	r24, r25
   144fa:	59 f0       	breq	.+22     	; 0x14512 <drives_tests+0x6a>
    {
		if(!mount(argc, argv))
   144fc:	be 01       	movw	r22, r28
   144fe:	c7 01       	movw	r24, r14
   14500:	fe de       	rcall	.-516    	; 0x142fe <mount>
   14502:	81 11       	cpse	r24, r1
   14504:	03 c0       	rjmp	.+6      	; 0x1450c <drives_tests+0x64>
			return(-1);
   14506:	8f ef       	ldi	r24, 0xFF	; 255
   14508:	9f ef       	ldi	r25, 0xFF	; 255
   1450a:	4a c0       	rjmp	.+148    	; 0x145a0 <drives_tests+0xf8>
#ifdef LCD_SUPPORT
    extern void update_drive_counts();
    update_drive_counts();
   1450c:	0e 94 c8 e3 	call	0x1c790	; 0x1c790 <update_drive_counts>
   14510:	45 c0       	rjmp	.+138    	; 0x1459c <drives_tests+0xf4>
#endif

		return(1);
    }
    if (MATCHI(ptr,"umount") )
   14512:	62 e7       	ldi	r22, 0x72	; 114
   14514:	7e e0       	ldi	r23, 0x0E	; 14
   14516:	c8 01       	movw	r24, r16
   14518:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   1451c:	89 2b       	or	r24, r25
   1451e:	21 f0       	breq	.+8      	; 0x14528 <drives_tests+0x80>
    {
		if(!umount(argc, argv))
   14520:	be 01       	movw	r22, r28
   14522:	c7 01       	movw	r24, r14
   14524:	32 d9       	rcall	.-3484   	; 0x1378a <umount>
   14526:	ed cf       	rjmp	.-38     	; 0x14502 <drives_tests+0x5a>
    update_drive_counts();
#endif
		return(1);
	}

    if (MATCHI(ptr,"addresses") )
   14528:	69 e7       	ldi	r22, 0x79	; 121
   1452a:	7e e0       	ldi	r23, 0x0E	; 14
   1452c:	c8 01       	movw	r24, r16
   1452e:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   14532:	89 2b       	or	r24, r25
   14534:	b1 f0       	breq	.+44     	; 0x14562 <drives_tests+0xba>
    {
        ptr = argv[ind];
   14536:	8a 81       	ldd	r24, Y+2	; 0x02
   14538:	9b 81       	ldd	r25, Y+3	; 0x03
        if(ptr && *ptr && MATCH(ptr,"-v"))
   1453a:	00 97       	sbiw	r24, 0x00	; 0
   1453c:	69 f0       	breq	.+26     	; 0x14558 <drives_tests+0xb0>
   1453e:	fc 01       	movw	r30, r24
   14540:	20 81       	ld	r18, Z
   14542:	22 23       	and	r18, r18
   14544:	49 f0       	breq	.+18     	; 0x14558 <drives_tests+0xb0>
   14546:	63 e8       	ldi	r22, 0x83	; 131
   14548:	7e e0       	ldi	r23, 0x0E	; 14
   1454a:	0e 94 de 31 	call	0x63bc	; 0x63bc <MATCH>
   1454e:	89 2b       	or	r24, r25
   14550:	19 f0       	breq	.+6      	; 0x14558 <drives_tests+0xb0>
            display_Addresses(1);
   14552:	81 e0       	ldi	r24, 0x01	; 1
   14554:	90 e0       	ldi	r25, 0x00	; 0
   14556:	02 c0       	rjmp	.+4      	; 0x1455c <drives_tests+0xb4>
        else
            display_Addresses(0);
   14558:	80 e0       	ldi	r24, 0x00	; 0
   1455a:	90 e0       	ldi	r25, 0x00	; 0
   1455c:	0e 94 ff 92 	call	0x125fe	; 0x125fe <display_Addresses>
   14560:	1d c0       	rjmp	.+58     	; 0x1459c <drives_tests+0xf4>
        return(1);
    }

    if (MATCHI(ptr,"config") )
   14562:	66 e8       	ldi	r22, 0x86	; 134
   14564:	7e e0       	ldi	r23, 0x0E	; 14
   14566:	c8 01       	movw	r24, r16
   14568:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   1456c:	89 2b       	or	r24, r25
   1456e:	09 f4       	brne	.+2      	; 0x14572 <drives_tests+0xca>
   14570:	a7 cf       	rjmp	.-178    	; 0x144c0 <drives_tests+0x18>
    {
        ptr = argv[ind];
   14572:	8a 81       	ldd	r24, Y+2	; 0x02
   14574:	9b 81       	ldd	r25, Y+3	; 0x03
        if(ptr && *ptr && MATCH(ptr,"-v"))
   14576:	00 97       	sbiw	r24, 0x00	; 0
   14578:	69 f0       	breq	.+26     	; 0x14594 <drives_tests+0xec>
   1457a:	fc 01       	movw	r30, r24
   1457c:	20 81       	ld	r18, Z
   1457e:	22 23       	and	r18, r18
   14580:	49 f0       	breq	.+18     	; 0x14594 <drives_tests+0xec>
   14582:	63 e8       	ldi	r22, 0x83	; 131
   14584:	7e e0       	ldi	r23, 0x0E	; 14
   14586:	0e 94 de 31 	call	0x63bc	; 0x63bc <MATCH>
   1458a:	89 2b       	or	r24, r25
   1458c:	19 f0       	breq	.+6      	; 0x14594 <drives_tests+0xec>
            display_Config(1);
   1458e:	81 e0       	ldi	r24, 0x01	; 1
   14590:	90 e0       	ldi	r25, 0x00	; 0
   14592:	02 c0       	rjmp	.+4      	; 0x14598 <drives_tests+0xf0>
        else
            display_Config(0);
   14594:	80 e0       	ldi	r24, 0x00	; 0
   14596:	90 e0       	ldi	r25, 0x00	; 0
   14598:	0e 94 d3 93 	call	0x127a6	; 0x127a6 <display_Config>
        return(1);
   1459c:	81 e0       	ldi	r24, 0x01	; 1
   1459e:	90 e0       	ldi	r25, 0x00	; 0
    }
	return(0);
}
   145a0:	cd b7       	in	r28, 0x3d	; 61
   145a2:	de b7       	in	r29, 0x3e	; 62
   145a4:	e6 e0       	ldi	r30, 0x06	; 6
   145a6:	0c 94 8e e6 	jmp	0x1cd1c	; 0x1cd1c <__epilogue_restores__+0x18>

000145aa <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1); // 1
   145aa:	8f e1       	ldi	r24, 0x1F	; 31
   145ac:	ee e6       	ldi	r30, 0x6E	; 110
   145ae:	ff e1       	ldi	r31, 0x1F	; 31
   145b0:	df 01       	movw	r26, r30
   145b2:	98 2f       	mov	r25, r24
   145b4:	1d 92       	st	X+, r1
   145b6:	9a 95       	dec	r25
   145b8:	e9 f7       	brne	.-6      	; 0x145b4 <hpdir_init+0xa>
// 2
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);
   145ba:	9f e3       	ldi	r25, 0x3F	; 63
   145bc:	ee e8       	ldi	r30, 0x8E	; 142
   145be:	ff e1       	ldi	r31, 0x1F	; 31
   145c0:	df 01       	movw	r26, r30
   145c2:	1d 92       	st	X+, r1
   145c4:	9a 95       	dec	r25
   145c6:	e9 f7       	brne	.-6      	; 0x145c2 <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);   // 3
   145c8:	ee ec       	ldi	r30, 0xCE	; 206
   145ca:	ff e1       	ldi	r31, 0x1F	; 31
   145cc:	df 01       	movw	r26, r30
   145ce:	1d 92       	st	X+, r1
   145d0:	8a 95       	dec	r24
   145d2:	e9 f7       	brne	.-6      	; 0x145ce <hpdir_init+0x24>
    hpdir.ID = 0;                                 // 4
   145d4:	10 92 ee 1f 	sts	0x1FEE, r1	; 0x801fee <hpdir+0x80>
   145d8:	10 92 ef 1f 	sts	0x1FEF, r1	; 0x801fef <hpdir+0x81>
   145dc:	10 92 f0 1f 	sts	0x1FF0, r1	; 0x801ff0 <hpdir+0x82>
   145e0:	10 92 f1 1f 	sts	0x1FF1, r1	; 0x801ff1 <hpdir+0x83>
    hpdir.mask_stat2 = 0;                         // 5
   145e4:	10 92 f2 1f 	sts	0x1FF2, r1	; 0x801ff2 <hpdir+0x84>
   145e8:	10 92 f3 1f 	sts	0x1FF3, r1	; 0x801ff3 <hpdir+0x85>
   145ec:	10 92 f4 1f 	sts	0x1FF4, r1	; 0x801ff4 <hpdir+0x86>
   145f0:	10 92 f5 1f 	sts	0x1FF5, r1	; 0x801ff5 <hpdir+0x87>
    hpdir.id_stat2 = 0;                           // 6
   145f4:	10 92 f6 1f 	sts	0x1FF6, r1	; 0x801ff6 <hpdir+0x88>
   145f8:	10 92 f7 1f 	sts	0x1FF7, r1	; 0x801ff7 <hpdir+0x89>
   145fc:	10 92 f8 1f 	sts	0x1FF8, r1	; 0x801ff8 <hpdir+0x8a>
   14600:	10 92 f9 1f 	sts	0x1FF9, r1	; 0x801ff9 <hpdir+0x8b>
    hpdir.DEVICE_NUMBER = 0;                      // 7
   14604:	10 92 fa 1f 	sts	0x1FFA, r1	; 0x801ffa <hpdir+0x8c>
   14608:	10 92 fb 1f 	sts	0x1FFB, r1	; 0x801ffb <hpdir+0x8d>
   1460c:	10 92 fc 1f 	sts	0x1FFC, r1	; 0x801ffc <hpdir+0x8e>
   14610:	10 92 fd 1f 	sts	0x1FFD, r1	; 0x801ffd <hpdir+0x8f>
    hpdir.UNITS_INSTALLED = 0x8001;               // 8
   14614:	81 e0       	ldi	r24, 0x01	; 1
   14616:	90 e8       	ldi	r25, 0x80	; 128
   14618:	a0 e0       	ldi	r26, 0x00	; 0
   1461a:	b0 e0       	ldi	r27, 0x00	; 0
   1461c:	80 93 fe 1f 	sts	0x1FFE, r24	; 0x801ffe <hpdir+0x90>
   14620:	90 93 ff 1f 	sts	0x1FFF, r25	; 0x801fff <hpdir+0x91>
   14624:	a0 93 00 20 	sts	0x2000, r26	; 0x802000 <hpdir+0x92>
   14628:	b0 93 01 20 	sts	0x2001, r27	; 0x802001 <hpdir+0x93>
    hpdir.CYLINDERS = 0;                          // 9
   1462c:	10 92 02 20 	sts	0x2002, r1	; 0x802002 <hpdir+0x94>
   14630:	10 92 03 20 	sts	0x2003, r1	; 0x802003 <hpdir+0x95>
   14634:	10 92 04 20 	sts	0x2004, r1	; 0x802004 <hpdir+0x96>
   14638:	10 92 05 20 	sts	0x2005, r1	; 0x802005 <hpdir+0x97>
    hpdir.HEADS= 0;                               // 10
   1463c:	10 92 06 20 	sts	0x2006, r1	; 0x802006 <hpdir+0x98>
   14640:	10 92 07 20 	sts	0x2007, r1	; 0x802007 <hpdir+0x99>
   14644:	10 92 08 20 	sts	0x2008, r1	; 0x802008 <hpdir+0x9a>
   14648:	10 92 09 20 	sts	0x2009, r1	; 0x802009 <hpdir+0x9b>
    hpdir.SECTORS= 0;                             // 11
   1464c:	10 92 0a 20 	sts	0x200A, r1	; 0x80200a <hpdir+0x9c>
   14650:	10 92 0b 20 	sts	0x200B, r1	; 0x80200b <hpdir+0x9d>
   14654:	10 92 0c 20 	sts	0x200C, r1	; 0x80200c <hpdir+0x9e>
   14658:	10 92 0d 20 	sts	0x200D, r1	; 0x80200d <hpdir+0x9f>
    hpdir.BYTES_PER_SECTOR = 0;                   // 12
   1465c:	10 92 0e 20 	sts	0x200E, r1	; 0x80200e <hpdir+0xa0>
   14660:	10 92 0f 20 	sts	0x200F, r1	; 0x80200f <hpdir+0xa1>
   14664:	10 92 10 20 	sts	0x2010, r1	; 0x802010 <hpdir+0xa2>
   14668:	10 92 11 20 	sts	0x2011, r1	; 0x802011 <hpdir+0xa3>
    hpdir.INTERLEAVE = 0;                         // 13
   1466c:	10 92 12 20 	sts	0x2012, r1	; 0x802012 <hpdir+0xa4>
   14670:	10 92 13 20 	sts	0x2013, r1	; 0x802013 <hpdir+0xa5>
   14674:	10 92 14 20 	sts	0x2014, r1	; 0x802014 <hpdir+0xa6>
   14678:	10 92 15 20 	sts	0x2015, r1	; 0x802015 <hpdir+0xa7>
    hpdir.FIXED = 1;                              // 14 ALWAYS 1
   1467c:	81 e0       	ldi	r24, 0x01	; 1
   1467e:	90 e0       	ldi	r25, 0x00	; 0
   14680:	a0 e0       	ldi	r26, 0x00	; 0
   14682:	b0 e0       	ldi	r27, 0x00	; 0
   14684:	80 93 16 20 	sts	0x2016, r24	; 0x802016 <hpdir+0xa8>
   14688:	90 93 17 20 	sts	0x2017, r25	; 0x802017 <hpdir+0xa9>
   1468c:	a0 93 18 20 	sts	0x2018, r26	; 0x802018 <hpdir+0xaa>
   14690:	b0 93 19 20 	sts	0x2019, r27	; 0x802019 <hpdir+0xab>

// Computed values
    hpdir.BLOCKS = 0;
   14694:	10 92 1a 20 	sts	0x201A, r1	; 0x80201a <hpdir+0xac>
   14698:	10 92 1b 20 	sts	0x201B, r1	; 0x80201b <hpdir+0xad>
   1469c:	10 92 1c 20 	sts	0x201C, r1	; 0x80201c <hpdir+0xae>
   146a0:	10 92 1d 20 	sts	0x201D, r1	; 0x80201d <hpdir+0xaf>
   146a4:	08 95       	ret

000146a6 <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
   146a6:	20 e0       	ldi	r18, 0x00	; 0
   146a8:	30 e0       	ldi	r19, 0x00	; 0
    long num = 1;
    while(blocks)
   146aa:	61 15       	cp	r22, r1
   146ac:	71 05       	cpc	r23, r1
   146ae:	81 05       	cpc	r24, r1
   146b0:	91 05       	cpc	r25, r1
   146b2:	39 f0       	breq	.+14     	; 0x146c2 <lif_dir_count+0x1c>
    {
        scale++;
   146b4:	2f 5f       	subi	r18, 0xFF	; 255
   146b6:	3f 4f       	sbci	r19, 0xFF	; 255
        blocks >>= 1;
   146b8:	95 95       	asr	r25
   146ba:	87 95       	ror	r24
   146bc:	77 95       	ror	r23
   146be:	67 95       	ror	r22
   146c0:	f4 cf       	rjmp	.-24     	; 0x146aa <lif_dir_count+0x4>
    }
    scale>>=1;
   146c2:	35 95       	asr	r19
   146c4:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
    long num = 1;
   146c6:	61 e0       	ldi	r22, 0x01	; 1
   146c8:	70 e0       	ldi	r23, 0x00	; 0
   146ca:	80 e0       	ldi	r24, 0x00	; 0
   146cc:	90 e0       	ldi	r25, 0x00	; 0
    {
        scale++;
        blocks >>= 1;
    }
    scale>>=1;
    while(scale--)
   146ce:	21 50       	subi	r18, 0x01	; 1
   146d0:	31 09       	sbc	r19, r1
   146d2:	28 f0       	brcs	.+10     	; 0x146de <lif_dir_count+0x38>
        num <<=1;
   146d4:	66 0f       	add	r22, r22
   146d6:	77 1f       	adc	r23, r23
   146d8:	88 1f       	adc	r24, r24
   146da:	99 1f       	adc	r25, r25
   146dc:	f8 cf       	rjmp	.-16     	; 0x146ce <lif_dir_count+0x28>
    return(num);
}
   146de:	08 95       	ret

000146e0 <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   146e0:	2f 92       	push	r2
   146e2:	3f 92       	push	r3
   146e4:	4f 92       	push	r4
   146e6:	5f 92       	push	r5
   146e8:	6f 92       	push	r6
   146ea:	8f 92       	push	r8
   146ec:	9f 92       	push	r9
   146ee:	af 92       	push	r10
   146f0:	bf 92       	push	r11
   146f2:	cf 92       	push	r12
   146f4:	df 92       	push	r13
   146f6:	ef 92       	push	r14
   146f8:	ff 92       	push	r15
   146fa:	0f 93       	push	r16
   146fc:	1f 93       	push	r17
   146fe:	cf 93       	push	r28
   14700:	df 93       	push	r29
   14702:	cd b7       	in	r28, 0x3d	; 61
   14704:	de b7       	in	r29, 0x3e	; 62
   14706:	c9 58       	subi	r28, 0x89	; 137
   14708:	d1 40       	sbci	r29, 0x01	; 1
   1470a:	0f b6       	in	r0, 0x3f	; 63
   1470c:	f8 94       	cli
   1470e:	de bf       	out	0x3e, r29	; 62
   14710:	0f be       	out	0x3f, r0	; 63
   14712:	cd bf       	out	0x3d, r28	; 61
   14714:	6c 01       	movw	r12, r24
   14716:	c8 57       	subi	r28, 0x78	; 120
   14718:	de 4f       	sbci	r29, 0xFE	; 254
   1471a:	79 83       	std	Y+1, r23	; 0x01
   1471c:	68 83       	st	Y, r22
   1471e:	c8 58       	subi	r28, 0x88	; 136
   14720:	d1 40       	sbci	r29, 0x01	; 1
   14722:	5a 01       	movw	r10, r20
    FILE *cfg;
    char *ptr;
    char str[256];
    char token[128];

    hpdir_init();
   14724:	42 df       	rcall	.-380    	; 0x145aa <hpdir_init>

    cfg = fopen("hpdir.ini","rb");
   14726:	6c ee       	ldi	r22, 0xEC	; 236
   14728:	78 e0       	ldi	r23, 0x08	; 8
   1472a:	8c e4       	ldi	r24, 0x4C	; 76
   1472c:	90 e1       	ldi	r25, 0x10	; 16
   1472e:	0e 94 d4 7d 	call	0xfba8	; 0xfba8 <fopen>
   14732:	7c 01       	movw	r14, r24

#ifndef LIF_STAND_ALONE
    if(cfg == NULL)
   14734:	89 2b       	or	r24, r25
   14736:	49 f4       	brne	.+18     	; 0x1474a <hpdir_find_drive+0x6a>
        cfg = fopen("/hpdir.ini","rb");
   14738:	6c ee       	ldi	r22, 0xEC	; 236
   1473a:	78 e0       	ldi	r23, 0x08	; 8
   1473c:	8b e4       	ldi	r24, 0x4B	; 75
   1473e:	90 e1       	ldi	r25, 0x10	; 16
   14740:	0e 94 d4 7d 	call	0xfba8	; 0xfba8 <fopen>
   14744:	7c 01       	movw	r14, r24
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

    if(cfg == NULL)
   14746:	89 2b       	or	r24, r25
   14748:	51 f0       	breq	.+20     	; 0x1475e <hpdir_find_drive+0x7e>
// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
            driveinfo = 1;
   1474a:	21 2c       	mov	r2, r1
   1474c:	31 2c       	mov	r3, r1

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   1474e:	8e 01       	movw	r16, r28
   14750:	08 5f       	subi	r16, 0xF8	; 248
   14752:	1e 4f       	sbci	r17, 0xFE	; 254
        if( driveinfo != 1)
            continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   14754:	87 e7       	ldi	r24, 0x77	; 119
   14756:	90 e2       	ldi	r25, 0x20	; 32
   14758:	2c 01       	movw	r4, r24
   1475a:	61 2c       	mov	r6, r1
   1475c:	1e c0       	rjmp	.+60     	; 0x1479a <hpdir_find_drive+0xba>
    }
#endif

    if(cfg == NULL)
    {
        if(verbose)
   1475e:	ab 28       	or	r10, r11
   14760:	09 f4       	brne	.+2      	; 0x14764 <hpdir_find_drive+0x84>
   14762:	79 c1       	rjmp	.+754    	; 0x14a56 <hpdir_find_drive+0x376>
            printf("Error: hpdir.ini not found!\n");
   14764:	8e e7       	ldi	r24, 0x7E	; 126
   14766:	90 e2       	ldi	r25, 0x20	; 32
   14768:	a0 e0       	ldi	r26, 0x00	; 0
   1476a:	ed b7       	in	r30, 0x3d	; 61
   1476c:	fe b7       	in	r31, 0x3e	; 62
   1476e:	81 83       	std	Z+1, r24	; 0x01
   14770:	92 83       	std	Z+2, r25	; 0x02
   14772:	a3 83       	std	Z+3, r26	; 0x03
   14774:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   14778:	6e c1       	rjmp	.+732    	; 0x14a56 <hpdir_find_drive+0x376>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        errors = 0;
        ptr = str;

        trim_tail(ptr);
   1477a:	ce 01       	movw	r24, r28
   1477c:	08 96       	adiw	r24, 0x08	; 8
   1477e:	0e 94 c4 31 	call	0x6388	; 0x6388 <trim_tail>
        ptr = skipspaces(ptr);
   14782:	ce 01       	movw	r24, r28
   14784:	08 96       	adiw	r24, 0x08	; 8
   14786:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <skipspaces>

        len = strlen(ptr);
   1478a:	fc 01       	movw	r30, r24
   1478c:	01 90       	ld	r0, Z+
   1478e:	00 20       	and	r0, r0
   14790:	e9 f7       	brne	.-6      	; 0x1478c <hpdir_find_drive+0xac>
   14792:	31 97       	sbiw	r30, 0x01	; 1
        if(!len)
   14794:	8e 17       	cp	r24, r30
   14796:	9f 07       	cpc	r25, r31
   14798:	51 f4       	brne	.+20     	; 0x147ae <hpdir_find_drive+0xce>
        return(0);
    }

// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   1479a:	a7 01       	movw	r20, r14
   1479c:	6e ef       	ldi	r22, 0xFE	; 254
   1479e:	70 e0       	ldi	r23, 0x00	; 0
   147a0:	ce 01       	movw	r24, r28
   147a2:	08 96       	adiw	r24, 0x08	; 8
   147a4:	0e 94 ec 75 	call	0xebd8	; 0xebd8 <fgets>
   147a8:	89 2b       	or	r24, r25
   147aa:	39 f7       	brne	.-50     	; 0x1477a <hpdir_find_drive+0x9a>
   147ac:	0c c0       	rjmp	.+24     	; 0x147c6 <hpdir_find_drive+0xe6>
        len = strlen(ptr);
        if(!len)
            continue;

// Skip comments
        if(*ptr == ';' || *ptr == '#' )
   147ae:	fc 01       	movw	r30, r24
   147b0:	20 81       	ld	r18, Z
   147b2:	2b 33       	cpi	r18, 0x3B	; 59
   147b4:	91 f3       	breq	.-28     	; 0x1479a <hpdir_find_drive+0xba>
   147b6:	23 32       	cpi	r18, 0x23	; 35
   147b8:	81 f3       	breq	.-32     	; 0x1479a <hpdir_find_drive+0xba>
            continue;

        if(*ptr == '[' && driveinfo == 1 )
   147ba:	2b 35       	cpi	r18, 0x5B	; 91
   147bc:	39 f4       	brne	.+14     	; 0x147cc <hpdir_find_drive+0xec>
   147be:	f1 e0       	ldi	r31, 0x01	; 1
   147c0:	2f 16       	cp	r2, r31
   147c2:	31 04       	cpc	r3, r1
   147c4:	19 f4       	brne	.+6      	; 0x147cc <hpdir_find_drive+0xec>
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   147c6:	00 e0       	ldi	r16, 0x00	; 0
   147c8:	10 e0       	ldi	r17, 0x00	; 0
   147ca:	32 c1       	rjmp	.+612    	; 0x14a30 <hpdir_find_drive+0x350>

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   147cc:	4e e7       	ldi	r20, 0x7E	; 126
   147ce:	50 e0       	ldi	r21, 0x00	; 0
   147d0:	b8 01       	movw	r22, r16
   147d2:	0e 94 a6 32 	call	0x654c	; 0x654c <get_token>
   147d6:	4c 01       	movw	r8, r24

        if(MATCHI(token,"[driveinfo]"))
   147d8:	66 e5       	ldi	r22, 0x56	; 86
   147da:	70 e1       	ldi	r23, 0x10	; 16
   147dc:	c8 01       	movw	r24, r16
   147de:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   147e2:	89 2b       	or	r24, r25
   147e4:	21 f0       	breq	.+8      	; 0x147ee <hpdir_find_drive+0x10e>
        {
            driveinfo = 1;
   147e6:	22 24       	eor	r2, r2
   147e8:	23 94       	inc	r2
   147ea:	31 2c       	mov	r3, r1
   147ec:	d6 cf       	rjmp	.-84     	; 0x1479a <hpdir_find_drive+0xba>
            continue;
        }

        if( driveinfo != 1)
   147ee:	21 e0       	ldi	r18, 0x01	; 1
   147f0:	22 16       	cp	r2, r18
   147f2:	31 04       	cpc	r3, r1
   147f4:	91 f6       	brne	.-92     	; 0x1479a <hpdir_find_drive+0xba>
            continue;

        if(list)
   147f6:	c8 57       	subi	r28, 0x78	; 120
   147f8:	de 4f       	sbci	r29, 0xFE	; 254
   147fa:	88 81       	ld	r24, Y
   147fc:	99 81       	ldd	r25, Y+1	; 0x01
   147fe:	c8 58       	subi	r28, 0x88	; 136
   14800:	d1 40       	sbci	r29, 0x01	; 1
   14802:	89 2b       	or	r24, r25
   14804:	61 f0       	breq	.+24     	; 0x1481e <hpdir_find_drive+0x13e>
        {
            printf("%s %s\n", token, ptr);
   14806:	ed b7       	in	r30, 0x3d	; 61
   14808:	fe b7       	in	r31, 0x3e	; 62
   1480a:	97 82       	std	Z+7, r9	; 0x07
   1480c:	86 82       	std	Z+6, r8	; 0x06
   1480e:	15 83       	std	Z+5, r17	; 0x05
   14810:	04 83       	std	Z+4, r16	; 0x04
   14812:	41 82       	std	Z+1, r4	; 0x01
   14814:	52 82       	std	Z+2, r5	; 0x02
   14816:	63 82       	std	Z+3, r6	; 0x03
   14818:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            continue;
   1481c:	be cf       	rjmp	.-132    	; 0x1479a <hpdir_find_drive+0xba>
        }

        if ( ! MATCHI(model,token) )
   1481e:	b8 01       	movw	r22, r16
   14820:	c6 01       	movw	r24, r12
   14822:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   14826:	89 2b       	or	r24, r25
            continue;

        hpdir_init();
   14828:	f1 f2       	breq	.-68     	; 0x147e6 <hpdir_find_drive+0x106>
   1482a:	bf de       	rcall	.-642    	; 0x145aa <hpdir_init>

        if(verbose)
   1482c:	a1 14       	cp	r10, r1
   1482e:	b1 04       	cpc	r11, r1
   14830:	61 f0       	breq	.+24     	; 0x1484a <hpdir_find_drive+0x16a>
            printf("Model: %s found in hpdir.ini\n", model);
   14832:	ed b7       	in	r30, 0x3d	; 61
   14834:	fe b7       	in	r31, 0x3e	; 62
   14836:	d5 82       	std	Z+5, r13	; 0x05
   14838:	c4 82       	std	Z+4, r12	; 0x04
   1483a:	89 e5       	ldi	r24, 0x59	; 89
   1483c:	90 e2       	ldi	r25, 0x20	; 32
   1483e:	a0 e0       	ldi	r26, 0x00	; 0
   14840:	81 83       	std	Z+1, r24	; 0x01
   14842:	92 83       	std	Z+2, r25	; 0x02
   14844:	a3 83       	std	Z+3, r26	; 0x03
   14846:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

// 1 Model
        strncpy(hpdir.model,token,sizeof(hpdir.model)-2);
   1484a:	4e e1       	ldi	r20, 0x1E	; 30
   1484c:	50 e0       	ldi	r21, 0x00	; 0
   1484e:	b8 01       	movw	r22, r16
   14850:	8e e6       	ldi	r24, 0x6E	; 110
   14852:	9f e1       	ldi	r25, 0x1F	; 31
   14854:	0e 94 f1 30 	call	0x61e2	; 0x61e2 <strncpy>

// =
        ptr = get_token(ptr, token,     sizeof(token)-2);
   14858:	4e e7       	ldi	r20, 0x7E	; 126
   1485a:	50 e0       	ldi	r21, 0x00	; 0
   1485c:	b8 01       	movw	r22, r16
   1485e:	c4 01       	movw	r24, r8
   14860:	0e 94 a6 32 	call	0x654c	; 0x654c <get_token>

// 2 Comment
        ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);
   14864:	4e e3       	ldi	r20, 0x3E	; 62
   14866:	50 e0       	ldi	r21, 0x00	; 0
   14868:	6e e8       	ldi	r22, 0x8E	; 142
   1486a:	7f e1       	ldi	r23, 0x1F	; 31
   1486c:	0e 94 a6 32 	call	0x654c	; 0x654c <get_token>

// 3 AMIGO/SS80/CS80
        ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);
   14870:	4e e1       	ldi	r20, 0x1E	; 30
   14872:	50 e0       	ldi	r21, 0x00	; 0
   14874:	6e ec       	ldi	r22, 0xCE	; 206
   14876:	7f e1       	ldi	r23, 0x1F	; 31
   14878:	0e 94 a6 32 	call	0x654c	; 0x654c <get_token>

// 4 Identify ID
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1487c:	4e e7       	ldi	r20, 0x7E	; 126
   1487e:	50 e0       	ldi	r21, 0x00	; 0
   14880:	b8 01       	movw	r22, r16
   14882:	0e 94 a6 32 	call	0x654c	; 0x654c <get_token>
   14886:	4c 01       	movw	r8, r24
        hpdir.ID = get_value(token);
   14888:	c8 01       	movw	r24, r16
   1488a:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <get_value>
   1488e:	60 93 ee 1f 	sts	0x1FEE, r22	; 0x801fee <hpdir+0x80>
   14892:	70 93 ef 1f 	sts	0x1FEF, r23	; 0x801fef <hpdir+0x81>
   14896:	80 93 f0 1f 	sts	0x1FF0, r24	; 0x801ff0 <hpdir+0x82>
   1489a:	90 93 f1 1f 	sts	0x1FF1, r25	; 0x801ff1 <hpdir+0x83>

// 5 MASK STAT 2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1489e:	4e e7       	ldi	r20, 0x7E	; 126
   148a0:	50 e0       	ldi	r21, 0x00	; 0
   148a2:	b8 01       	movw	r22, r16
   148a4:	c4 01       	movw	r24, r8
   148a6:	0e 94 a6 32 	call	0x654c	; 0x654c <get_token>
   148aa:	4c 01       	movw	r8, r24
        hpdir.mask_stat2 = get_value(token);
   148ac:	c8 01       	movw	r24, r16
   148ae:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <get_value>
   148b2:	60 93 f2 1f 	sts	0x1FF2, r22	; 0x801ff2 <hpdir+0x84>
   148b6:	70 93 f3 1f 	sts	0x1FF3, r23	; 0x801ff3 <hpdir+0x85>
   148ba:	80 93 f4 1f 	sts	0x1FF4, r24	; 0x801ff4 <hpdir+0x86>
   148be:	90 93 f5 1f 	sts	0x1FF5, r25	; 0x801ff5 <hpdir+0x87>

// 6 STAT2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   148c2:	4e e7       	ldi	r20, 0x7E	; 126
   148c4:	50 e0       	ldi	r21, 0x00	; 0
   148c6:	b8 01       	movw	r22, r16
   148c8:	c4 01       	movw	r24, r8
   148ca:	0e 94 a6 32 	call	0x654c	; 0x654c <get_token>
   148ce:	4c 01       	movw	r8, r24
        hpdir.id_stat2 = get_value(token);
   148d0:	c8 01       	movw	r24, r16
   148d2:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <get_value>
   148d6:	60 93 f6 1f 	sts	0x1FF6, r22	; 0x801ff6 <hpdir+0x88>
   148da:	70 93 f7 1f 	sts	0x1FF7, r23	; 0x801ff7 <hpdir+0x89>
   148de:	80 93 f8 1f 	sts	0x1FF8, r24	; 0x801ff8 <hpdir+0x8a>
   148e2:	90 93 f9 1f 	sts	0x1FF9, r25	; 0x801ff9 <hpdir+0x8b>

// 7 BCD include model number
        ptr = get_token(ptr, token,         sizeof(token)-2);
   148e6:	4e e7       	ldi	r20, 0x7E	; 126
   148e8:	50 e0       	ldi	r21, 0x00	; 0
   148ea:	b8 01       	movw	r22, r16
   148ec:	c4 01       	movw	r24, r8
   148ee:	0e 94 a6 32 	call	0x654c	; 0x654c <get_token>
   148f2:	4c 01       	movw	r8, r24
        hpdir.DEVICE_NUMBER = get_value(token);
   148f4:	c8 01       	movw	r24, r16
   148f6:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <get_value>
   148fa:	60 93 fa 1f 	sts	0x1FFA, r22	; 0x801ffa <hpdir+0x8c>
   148fe:	70 93 fb 1f 	sts	0x1FFB, r23	; 0x801ffb <hpdir+0x8d>
   14902:	80 93 fc 1f 	sts	0x1FFC, r24	; 0x801ffc <hpdir+0x8e>
   14906:	90 93 fd 1f 	sts	0x1FFD, r25	; 0x801ffd <hpdir+0x8f>

// 8 Units installed
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1490a:	4e e7       	ldi	r20, 0x7E	; 126
   1490c:	50 e0       	ldi	r21, 0x00	; 0
   1490e:	b8 01       	movw	r22, r16
   14910:	c4 01       	movw	r24, r8
   14912:	0e 94 a6 32 	call	0x654c	; 0x654c <get_token>
   14916:	4c 01       	movw	r8, r24
        hpdir.UNITS_INSTALLED = get_value(token);
   14918:	c8 01       	movw	r24, r16
   1491a:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <get_value>
   1491e:	60 93 fe 1f 	sts	0x1FFE, r22	; 0x801ffe <hpdir+0x90>
   14922:	70 93 ff 1f 	sts	0x1FFF, r23	; 0x801fff <hpdir+0x91>
   14926:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <hpdir+0x92>
   1492a:	90 93 01 20 	sts	0x2001, r25	; 0x802001 <hpdir+0x93>

// 9 Cylinders
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1492e:	4e e7       	ldi	r20, 0x7E	; 126
   14930:	50 e0       	ldi	r21, 0x00	; 0
   14932:	b8 01       	movw	r22, r16
   14934:	c4 01       	movw	r24, r8
   14936:	0e 94 a6 32 	call	0x654c	; 0x654c <get_token>
   1493a:	4c 01       	movw	r8, r24
        hpdir.CYLINDERS = get_value(token);
   1493c:	c8 01       	movw	r24, r16
   1493e:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <get_value>
   14942:	60 93 02 20 	sts	0x2002, r22	; 0x802002 <hpdir+0x94>
   14946:	70 93 03 20 	sts	0x2003, r23	; 0x802003 <hpdir+0x95>
   1494a:	80 93 04 20 	sts	0x2004, r24	; 0x802004 <hpdir+0x96>
   1494e:	90 93 05 20 	sts	0x2005, r25	; 0x802005 <hpdir+0x97>

// 10 Heads
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14952:	4e e7       	ldi	r20, 0x7E	; 126
   14954:	50 e0       	ldi	r21, 0x00	; 0
   14956:	b8 01       	movw	r22, r16
   14958:	c4 01       	movw	r24, r8
   1495a:	0e 94 a6 32 	call	0x654c	; 0x654c <get_token>
   1495e:	4c 01       	movw	r8, r24
        hpdir.HEADS = get_value(token);
   14960:	c8 01       	movw	r24, r16
   14962:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <get_value>
   14966:	60 93 06 20 	sts	0x2006, r22	; 0x802006 <hpdir+0x98>
   1496a:	70 93 07 20 	sts	0x2007, r23	; 0x802007 <hpdir+0x99>
   1496e:	80 93 08 20 	sts	0x2008, r24	; 0x802008 <hpdir+0x9a>
   14972:	90 93 09 20 	sts	0x2009, r25	; 0x802009 <hpdir+0x9b>

// 11 Sectors
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14976:	4e e7       	ldi	r20, 0x7E	; 126
   14978:	50 e0       	ldi	r21, 0x00	; 0
   1497a:	b8 01       	movw	r22, r16
   1497c:	c4 01       	movw	r24, r8
   1497e:	0e 94 a6 32 	call	0x654c	; 0x654c <get_token>
   14982:	4c 01       	movw	r8, r24
        hpdir.SECTORS = get_value(token);
   14984:	c8 01       	movw	r24, r16
   14986:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <get_value>
   1498a:	60 93 0a 20 	sts	0x200A, r22	; 0x80200a <hpdir+0x9c>
   1498e:	70 93 0b 20 	sts	0x200B, r23	; 0x80200b <hpdir+0x9d>
   14992:	80 93 0c 20 	sts	0x200C, r24	; 0x80200c <hpdir+0x9e>
   14996:	90 93 0d 20 	sts	0x200D, r25	; 0x80200d <hpdir+0x9f>

// 12 Bytes Per Block/Sector
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1499a:	4e e7       	ldi	r20, 0x7E	; 126
   1499c:	50 e0       	ldi	r21, 0x00	; 0
   1499e:	b8 01       	movw	r22, r16
   149a0:	c4 01       	movw	r24, r8
   149a2:	0e 94 a6 32 	call	0x654c	; 0x654c <get_token>
   149a6:	4c 01       	movw	r8, r24
        hpdir.BYTES_PER_SECTOR = get_value(token);
   149a8:	c8 01       	movw	r24, r16
   149aa:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <get_value>
   149ae:	60 93 0e 20 	sts	0x200E, r22	; 0x80200e <hpdir+0xa0>
   149b2:	70 93 0f 20 	sts	0x200F, r23	; 0x80200f <hpdir+0xa1>
   149b6:	80 93 10 20 	sts	0x2010, r24	; 0x802010 <hpdir+0xa2>
   149ba:	90 93 11 20 	sts	0x2011, r25	; 0x802011 <hpdir+0xa3>

// 13 Interleave
        ptr = get_token(ptr, token,         sizeof(token)-2);
   149be:	4e e7       	ldi	r20, 0x7E	; 126
   149c0:	50 e0       	ldi	r21, 0x00	; 0
   149c2:	b8 01       	movw	r22, r16
   149c4:	c4 01       	movw	r24, r8
   149c6:	0e 94 a6 32 	call	0x654c	; 0x654c <get_token>
        hpdir.INTERLEAVE = get_value(token);
   149ca:	c8 01       	movw	r24, r16
   149cc:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <get_value>
   149d0:	60 93 12 20 	sts	0x2012, r22	; 0x802012 <hpdir+0xa4>
   149d4:	70 93 13 20 	sts	0x2013, r23	; 0x802013 <hpdir+0xa5>
   149d8:	80 93 14 20 	sts	0x2014, r24	; 0x802014 <hpdir+0xa6>
   149dc:	90 93 15 20 	sts	0x2015, r25	; 0x802015 <hpdir+0xa7>

// Computed values
        hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   149e0:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <hpdir+0x94>
   149e4:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <hpdir+0x95>
   149e8:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <hpdir+0x96>
   149ec:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <hpdir+0x97>
   149f0:	60 91 06 20 	lds	r22, 0x2006	; 0x802006 <hpdir+0x98>
   149f4:	70 91 07 20 	lds	r23, 0x2007	; 0x802007 <hpdir+0x99>
   149f8:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <hpdir+0x9a>
   149fc:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <hpdir+0x9b>
   14a00:	0e 94 b7 e5 	call	0x1cb6e	; 0x1cb6e <__mulsi3>
   14a04:	9b 01       	movw	r18, r22
   14a06:	ac 01       	movw	r20, r24
   14a08:	60 91 0a 20 	lds	r22, 0x200A	; 0x80200a <hpdir+0x9c>
   14a0c:	70 91 0b 20 	lds	r23, 0x200B	; 0x80200b <hpdir+0x9d>
   14a10:	80 91 0c 20 	lds	r24, 0x200C	; 0x80200c <hpdir+0x9e>
   14a14:	90 91 0d 20 	lds	r25, 0x200D	; 0x80200d <hpdir+0x9f>
   14a18:	0e 94 b7 e5 	call	0x1cb6e	; 0x1cb6e <__mulsi3>
   14a1c:	60 93 1a 20 	sts	0x201A, r22	; 0x80201a <hpdir+0xac>
   14a20:	70 93 1b 20 	sts	0x201B, r23	; 0x80201b <hpdir+0xad>
   14a24:	80 93 1c 20 	sts	0x201C, r24	; 0x80201c <hpdir+0xae>
   14a28:	90 93 1d 20 	sts	0x201D, r25	; 0x80201d <hpdir+0xaf>
        {
            if(verbose)
                printf("Error /hpdir.ini parsing\n");
            break;
        }
        found = 1;
   14a2c:	01 e0       	ldi	r16, 0x01	; 1
   14a2e:	10 e0       	ldi	r17, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
   14a30:	c7 01       	movw	r24, r14
   14a32:	0e 94 7e 7c 	call	0xf8fc	; 0xf8fc <fclose>
	if(verbose && !found)
   14a36:	ab 28       	or	r10, r11
   14a38:	81 f0       	breq	.+32     	; 0x14a5a <hpdir_find_drive+0x37a>
   14a3a:	01 2b       	or	r16, r17
   14a3c:	81 f4       	brne	.+32     	; 0x14a5e <hpdir_find_drive+0x37e>
		printf("Model: %s NOT found in hpdir.ini\n", model);
   14a3e:	ed b7       	in	r30, 0x3d	; 61
   14a40:	fe b7       	in	r31, 0x3e	; 62
   14a42:	d5 82       	std	Z+5, r13	; 0x05
   14a44:	c4 82       	std	Z+4, r12	; 0x04
   14a46:	87 e3       	ldi	r24, 0x37	; 55
   14a48:	90 e2       	ldi	r25, 0x20	; 32
   14a4a:	a0 e0       	ldi	r26, 0x00	; 0
   14a4c:	81 83       	std	Z+1, r24	; 0x01
   14a4e:	92 83       	std	Z+2, r25	; 0x02
   14a50:	a3 83       	std	Z+3, r26	; 0x03
   14a52:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

    if(cfg == NULL)
    {
        if(verbose)
            printf("Error: hpdir.ini not found!\n");
        return(0);
   14a56:	80 e0       	ldi	r24, 0x00	; 0
   14a58:	03 c0       	rjmp	.+6      	; 0x14a60 <hpdir_find_drive+0x380>
   14a5a:	c8 01       	movw	r24, r16
   14a5c:	02 c0       	rjmp	.+4      	; 0x14a62 <hpdir_find_drive+0x382>
   14a5e:	81 e0       	ldi	r24, 0x01	; 1
   14a60:	90 e0       	ldi	r25, 0x00	; 0
    }                                             // while
    fclose(cfg);
	if(verbose && !found)
		printf("Model: %s NOT found in hpdir.ini\n", model);
    return(found);
}
   14a62:	c7 57       	subi	r28, 0x77	; 119
   14a64:	de 4f       	sbci	r29, 0xFE	; 254
   14a66:	0f b6       	in	r0, 0x3f	; 63
   14a68:	f8 94       	cli
   14a6a:	de bf       	out	0x3e, r29	; 62
   14a6c:	0f be       	out	0x3f, r0	; 63
   14a6e:	cd bf       	out	0x3d, r28	; 61
   14a70:	df 91       	pop	r29
   14a72:	cf 91       	pop	r28
   14a74:	1f 91       	pop	r17
   14a76:	0f 91       	pop	r16
   14a78:	ff 90       	pop	r15
   14a7a:	ef 90       	pop	r14
   14a7c:	df 90       	pop	r13
   14a7e:	cf 90       	pop	r12
   14a80:	bf 90       	pop	r11
   14a82:	af 90       	pop	r10
   14a84:	9f 90       	pop	r9
   14a86:	8f 90       	pop	r8
   14a88:	6f 90       	pop	r6
   14a8a:	5f 90       	pop	r5
   14a8c:	4f 90       	pop	r4
   14a8e:	3f 90       	pop	r3
   14a90:	2f 90       	pop	r2
   14a92:	08 95       	ret

00014a94 <SS80ControllerPack>:
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
        printf("[SS80 Increment to (%lXH)]\n",
            (long) SS80_Blocks_to_Bytes(SS80s->AddressBlocks));
#endif
    return(0);
}
   14a94:	0f 93       	push	r16
   14a96:	1f 93       	push	r17
   14a98:	25 e0       	ldi	r18, 0x05	; 5
   14a9a:	30 e0       	ldi	r19, 0x00	; 0
   14a9c:	fc 01       	movw	r30, r24
   14a9e:	31 83       	std	Z+1, r19	; 0x01
   14aa0:	20 83       	st	Z, r18
   14aa2:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14aa6:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14aaa:	00 85       	ldd	r16, Z+8	; 0x08
   14aac:	11 85       	ldd	r17, Z+9	; 0x09
   14aae:	20 e0       	ldi	r18, 0x00	; 0
   14ab0:	30 e0       	ldi	r19, 0x00	; 0
   14ab2:	42 e0       	ldi	r20, 0x02	; 2
   14ab4:	50 e0       	ldi	r21, 0x00	; 0
   14ab6:	60 e0       	ldi	r22, 0x00	; 0
   14ab8:	70 e0       	ldi	r23, 0x00	; 0
   14aba:	8e e8       	ldi	r24, 0x8E	; 142
   14abc:	99 e1       	ldi	r25, 0x19	; 25
   14abe:	0e 94 c5 bf 	call	0x17f8a	; 0x17f8a <V2B_MSB>
   14ac2:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14ac6:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14aca:	02 85       	ldd	r16, Z+10	; 0x0a
   14acc:	13 85       	ldd	r17, Z+11	; 0x0b
   14ace:	20 e0       	ldi	r18, 0x00	; 0
   14ad0:	30 e0       	ldi	r19, 0x00	; 0
   14ad2:	42 e0       	ldi	r20, 0x02	; 2
   14ad4:	50 e0       	ldi	r21, 0x00	; 0
   14ad6:	61 e0       	ldi	r22, 0x01	; 1
   14ad8:	70 e0       	ldi	r23, 0x00	; 0
   14ada:	8e e8       	ldi	r24, 0x8E	; 142
   14adc:	99 e1       	ldi	r25, 0x19	; 25
   14ade:	0e 94 c5 bf 	call	0x17f8a	; 0x17f8a <V2B_MSB>
   14ae2:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14ae6:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14aea:	04 85       	ldd	r16, Z+12	; 0x0c
   14aec:	10 e0       	ldi	r17, 0x00	; 0
   14aee:	20 e0       	ldi	r18, 0x00	; 0
   14af0:	30 e0       	ldi	r19, 0x00	; 0
   14af2:	41 e0       	ldi	r20, 0x01	; 1
   14af4:	50 e0       	ldi	r21, 0x00	; 0
   14af6:	64 e0       	ldi	r22, 0x04	; 4
   14af8:	70 e0       	ldi	r23, 0x00	; 0
   14afa:	8e e8       	ldi	r24, 0x8E	; 142
   14afc:	99 e1       	ldi	r25, 0x19	; 25
   14afe:	0e 94 c5 bf 	call	0x17f8a	; 0x17f8a <V2B_MSB>
   14b02:	8e e8       	ldi	r24, 0x8E	; 142
   14b04:	99 e1       	ldi	r25, 0x19	; 25
   14b06:	1f 91       	pop	r17
   14b08:	0f 91       	pop	r16
   14b0a:	08 95       	ret

00014b0c <SS80UnitPack>:
   14b0c:	0f 93       	push	r16
   14b0e:	1f 93       	push	r17
   14b10:	23 e1       	ldi	r18, 0x13	; 19
   14b12:	30 e0       	ldi	r19, 0x00	; 0
   14b14:	fc 01       	movw	r30, r24
   14b16:	31 83       	std	Z+1, r19	; 0x01
   14b18:	20 83       	st	Z, r18
   14b1a:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14b1e:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14b22:	05 85       	ldd	r16, Z+13	; 0x0d
   14b24:	10 e0       	ldi	r17, 0x00	; 0
   14b26:	20 e0       	ldi	r18, 0x00	; 0
   14b28:	30 e0       	ldi	r19, 0x00	; 0
   14b2a:	41 e0       	ldi	r20, 0x01	; 1
   14b2c:	50 e0       	ldi	r21, 0x00	; 0
   14b2e:	60 e0       	ldi	r22, 0x00	; 0
   14b30:	70 e0       	ldi	r23, 0x00	; 0
   14b32:	8b e7       	ldi	r24, 0x7B	; 123
   14b34:	99 e1       	ldi	r25, 0x19	; 25
   14b36:	0e 94 c5 bf 	call	0x17f8a	; 0x17f8a <V2B_MSB>
   14b3a:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14b3e:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14b42:	06 85       	ldd	r16, Z+14	; 0x0e
   14b44:	17 85       	ldd	r17, Z+15	; 0x0f
   14b46:	20 89       	ldd	r18, Z+16	; 0x10
   14b48:	31 89       	ldd	r19, Z+17	; 0x11
   14b4a:	43 e0       	ldi	r20, 0x03	; 3
   14b4c:	50 e0       	ldi	r21, 0x00	; 0
   14b4e:	61 e0       	ldi	r22, 0x01	; 1
   14b50:	70 e0       	ldi	r23, 0x00	; 0
   14b52:	8b e7       	ldi	r24, 0x7B	; 123
   14b54:	99 e1       	ldi	r25, 0x19	; 25
   14b56:	0e 94 c5 bf 	call	0x17f8a	; 0x17f8a <V2B_MSB>
   14b5a:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14b5e:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14b62:	02 89       	ldd	r16, Z+18	; 0x12
   14b64:	13 89       	ldd	r17, Z+19	; 0x13
   14b66:	20 e0       	ldi	r18, 0x00	; 0
   14b68:	30 e0       	ldi	r19, 0x00	; 0
   14b6a:	42 e0       	ldi	r20, 0x02	; 2
   14b6c:	50 e0       	ldi	r21, 0x00	; 0
   14b6e:	64 e0       	ldi	r22, 0x04	; 4
   14b70:	70 e0       	ldi	r23, 0x00	; 0
   14b72:	8b e7       	ldi	r24, 0x7B	; 123
   14b74:	99 e1       	ldi	r25, 0x19	; 25
   14b76:	0e 94 c5 bf 	call	0x17f8a	; 0x17f8a <V2B_MSB>
   14b7a:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14b7e:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14b82:	04 89       	ldd	r16, Z+20	; 0x14
   14b84:	10 e0       	ldi	r17, 0x00	; 0
   14b86:	20 e0       	ldi	r18, 0x00	; 0
   14b88:	30 e0       	ldi	r19, 0x00	; 0
   14b8a:	41 e0       	ldi	r20, 0x01	; 1
   14b8c:	50 e0       	ldi	r21, 0x00	; 0
   14b8e:	66 e0       	ldi	r22, 0x06	; 6
   14b90:	70 e0       	ldi	r23, 0x00	; 0
   14b92:	8b e7       	ldi	r24, 0x7B	; 123
   14b94:	99 e1       	ldi	r25, 0x19	; 25
   14b96:	0e 94 c5 bf 	call	0x17f8a	; 0x17f8a <V2B_MSB>
   14b9a:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14b9e:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14ba2:	05 89       	ldd	r16, Z+21	; 0x15
   14ba4:	10 e0       	ldi	r17, 0x00	; 0
   14ba6:	20 e0       	ldi	r18, 0x00	; 0
   14ba8:	30 e0       	ldi	r19, 0x00	; 0
   14baa:	41 e0       	ldi	r20, 0x01	; 1
   14bac:	50 e0       	ldi	r21, 0x00	; 0
   14bae:	67 e0       	ldi	r22, 0x07	; 7
   14bb0:	70 e0       	ldi	r23, 0x00	; 0
   14bb2:	8b e7       	ldi	r24, 0x7B	; 123
   14bb4:	99 e1       	ldi	r25, 0x19	; 25
   14bb6:	0e 94 c5 bf 	call	0x17f8a	; 0x17f8a <V2B_MSB>
   14bba:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14bbe:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14bc2:	06 89       	ldd	r16, Z+22	; 0x16
   14bc4:	17 89       	ldd	r17, Z+23	; 0x17
   14bc6:	20 e0       	ldi	r18, 0x00	; 0
   14bc8:	30 e0       	ldi	r19, 0x00	; 0
   14bca:	42 e0       	ldi	r20, 0x02	; 2
   14bcc:	50 e0       	ldi	r21, 0x00	; 0
   14bce:	68 e0       	ldi	r22, 0x08	; 8
   14bd0:	70 e0       	ldi	r23, 0x00	; 0
   14bd2:	8b e7       	ldi	r24, 0x7B	; 123
   14bd4:	99 e1       	ldi	r25, 0x19	; 25
   14bd6:	0e 94 c5 bf 	call	0x17f8a	; 0x17f8a <V2B_MSB>
   14bda:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14bde:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14be2:	00 8d       	ldd	r16, Z+24	; 0x18
   14be4:	11 8d       	ldd	r17, Z+25	; 0x19
   14be6:	20 e0       	ldi	r18, 0x00	; 0
   14be8:	30 e0       	ldi	r19, 0x00	; 0
   14bea:	42 e0       	ldi	r20, 0x02	; 2
   14bec:	50 e0       	ldi	r21, 0x00	; 0
   14bee:	6a e0       	ldi	r22, 0x0A	; 10
   14bf0:	70 e0       	ldi	r23, 0x00	; 0
   14bf2:	8b e7       	ldi	r24, 0x7B	; 123
   14bf4:	99 e1       	ldi	r25, 0x19	; 25
   14bf6:	0e 94 c5 bf 	call	0x17f8a	; 0x17f8a <V2B_MSB>
   14bfa:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14bfe:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14c02:	02 8d       	ldd	r16, Z+26	; 0x1a
   14c04:	13 8d       	ldd	r17, Z+27	; 0x1b
   14c06:	20 e0       	ldi	r18, 0x00	; 0
   14c08:	30 e0       	ldi	r19, 0x00	; 0
   14c0a:	42 e0       	ldi	r20, 0x02	; 2
   14c0c:	50 e0       	ldi	r21, 0x00	; 0
   14c0e:	6c e0       	ldi	r22, 0x0C	; 12
   14c10:	70 e0       	ldi	r23, 0x00	; 0
   14c12:	8b e7       	ldi	r24, 0x7B	; 123
   14c14:	99 e1       	ldi	r25, 0x19	; 25
   14c16:	0e 94 c5 bf 	call	0x17f8a	; 0x17f8a <V2B_MSB>
   14c1a:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14c1e:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14c22:	04 8d       	ldd	r16, Z+28	; 0x1c
   14c24:	15 8d       	ldd	r17, Z+29	; 0x1d
   14c26:	20 e0       	ldi	r18, 0x00	; 0
   14c28:	30 e0       	ldi	r19, 0x00	; 0
   14c2a:	42 e0       	ldi	r20, 0x02	; 2
   14c2c:	50 e0       	ldi	r21, 0x00	; 0
   14c2e:	6e e0       	ldi	r22, 0x0E	; 14
   14c30:	70 e0       	ldi	r23, 0x00	; 0
   14c32:	8b e7       	ldi	r24, 0x7B	; 123
   14c34:	99 e1       	ldi	r25, 0x19	; 25
   14c36:	0e 94 c5 bf 	call	0x17f8a	; 0x17f8a <V2B_MSB>
   14c3a:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14c3e:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14c42:	06 8d       	ldd	r16, Z+30	; 0x1e
   14c44:	10 e0       	ldi	r17, 0x00	; 0
   14c46:	20 e0       	ldi	r18, 0x00	; 0
   14c48:	30 e0       	ldi	r19, 0x00	; 0
   14c4a:	41 e0       	ldi	r20, 0x01	; 1
   14c4c:	50 e0       	ldi	r21, 0x00	; 0
   14c4e:	60 e1       	ldi	r22, 0x10	; 16
   14c50:	70 e0       	ldi	r23, 0x00	; 0
   14c52:	8b e7       	ldi	r24, 0x7B	; 123
   14c54:	99 e1       	ldi	r25, 0x19	; 25
   14c56:	0e 94 c5 bf 	call	0x17f8a	; 0x17f8a <V2B_MSB>
   14c5a:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14c5e:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14c62:	07 8d       	ldd	r16, Z+31	; 0x1f
   14c64:	10 e0       	ldi	r17, 0x00	; 0
   14c66:	20 e0       	ldi	r18, 0x00	; 0
   14c68:	30 e0       	ldi	r19, 0x00	; 0
   14c6a:	41 e0       	ldi	r20, 0x01	; 1
   14c6c:	50 e0       	ldi	r21, 0x00	; 0
   14c6e:	61 e1       	ldi	r22, 0x11	; 17
   14c70:	70 e0       	ldi	r23, 0x00	; 0
   14c72:	8b e7       	ldi	r24, 0x7B	; 123
   14c74:	99 e1       	ldi	r25, 0x19	; 25
   14c76:	0e 94 c5 bf 	call	0x17f8a	; 0x17f8a <V2B_MSB>
   14c7a:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14c7e:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14c82:	00 a1       	ldd	r16, Z+32	; 0x20
   14c84:	10 e0       	ldi	r17, 0x00	; 0
   14c86:	20 e0       	ldi	r18, 0x00	; 0
   14c88:	30 e0       	ldi	r19, 0x00	; 0
   14c8a:	41 e0       	ldi	r20, 0x01	; 1
   14c8c:	50 e0       	ldi	r21, 0x00	; 0
   14c8e:	62 e1       	ldi	r22, 0x12	; 18
   14c90:	70 e0       	ldi	r23, 0x00	; 0
   14c92:	8b e7       	ldi	r24, 0x7B	; 123
   14c94:	99 e1       	ldi	r25, 0x19	; 25
   14c96:	0e 94 c5 bf 	call	0x17f8a	; 0x17f8a <V2B_MSB>
   14c9a:	8b e7       	ldi	r24, 0x7B	; 123
   14c9c:	99 e1       	ldi	r25, 0x19	; 25
   14c9e:	1f 91       	pop	r17
   14ca0:	0f 91       	pop	r16
   14ca2:	08 95       	ret

00014ca4 <SS80VolumePack>:
   14ca4:	0f 93       	push	r16
   14ca6:	1f 93       	push	r17
   14ca8:	2d e0       	ldi	r18, 0x0D	; 13
   14caa:	30 e0       	ldi	r19, 0x00	; 0
   14cac:	fc 01       	movw	r30, r24
   14cae:	31 83       	std	Z+1, r19	; 0x01
   14cb0:	20 83       	st	Z, r18
   14cb2:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14cb6:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14cba:	01 a1       	ldd	r16, Z+33	; 0x21
   14cbc:	12 a1       	ldd	r17, Z+34	; 0x22
   14cbe:	23 a1       	ldd	r18, Z+35	; 0x23
   14cc0:	34 a1       	ldd	r19, Z+36	; 0x24
   14cc2:	43 e0       	ldi	r20, 0x03	; 3
   14cc4:	50 e0       	ldi	r21, 0x00	; 0
   14cc6:	60 e0       	ldi	r22, 0x00	; 0
   14cc8:	70 e0       	ldi	r23, 0x00	; 0
   14cca:	8e e6       	ldi	r24, 0x6E	; 110
   14ccc:	99 e1       	ldi	r25, 0x19	; 25
   14cce:	0e 94 c5 bf 	call	0x17f8a	; 0x17f8a <V2B_MSB>
   14cd2:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14cd6:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14cda:	05 a1       	ldd	r16, Z+37	; 0x25
   14cdc:	10 e0       	ldi	r17, 0x00	; 0
   14cde:	20 e0       	ldi	r18, 0x00	; 0
   14ce0:	30 e0       	ldi	r19, 0x00	; 0
   14ce2:	41 e0       	ldi	r20, 0x01	; 1
   14ce4:	50 e0       	ldi	r21, 0x00	; 0
   14ce6:	63 e0       	ldi	r22, 0x03	; 3
   14ce8:	70 e0       	ldi	r23, 0x00	; 0
   14cea:	8e e6       	ldi	r24, 0x6E	; 110
   14cec:	99 e1       	ldi	r25, 0x19	; 25
   14cee:	0e 94 c5 bf 	call	0x17f8a	; 0x17f8a <V2B_MSB>
   14cf2:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14cf6:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14cfa:	06 a1       	ldd	r16, Z+38	; 0x26
   14cfc:	17 a1       	ldd	r17, Z+39	; 0x27
   14cfe:	20 e0       	ldi	r18, 0x00	; 0
   14d00:	30 e0       	ldi	r19, 0x00	; 0
   14d02:	42 e0       	ldi	r20, 0x02	; 2
   14d04:	50 e0       	ldi	r21, 0x00	; 0
   14d06:	64 e0       	ldi	r22, 0x04	; 4
   14d08:	70 e0       	ldi	r23, 0x00	; 0
   14d0a:	8e e6       	ldi	r24, 0x6E	; 110
   14d0c:	99 e1       	ldi	r25, 0x19	; 25
   14d0e:	0e 94 c5 bf 	call	0x17f8a	; 0x17f8a <V2B_MSB>
   14d12:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14d16:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14d1a:	00 a5       	ldd	r16, Z+40	; 0x28
   14d1c:	11 a5       	ldd	r17, Z+41	; 0x29
   14d1e:	22 a5       	ldd	r18, Z+42	; 0x2a
   14d20:	33 a5       	ldd	r19, Z+43	; 0x2b
   14d22:	46 e0       	ldi	r20, 0x06	; 6
   14d24:	50 e0       	ldi	r21, 0x00	; 0
   14d26:	66 e0       	ldi	r22, 0x06	; 6
   14d28:	70 e0       	ldi	r23, 0x00	; 0
   14d2a:	8e e6       	ldi	r24, 0x6E	; 110
   14d2c:	99 e1       	ldi	r25, 0x19	; 25
   14d2e:	0e 94 c5 bf 	call	0x17f8a	; 0x17f8a <V2B_MSB>
   14d32:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   14d36:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   14d3a:	04 a5       	ldd	r16, Z+44	; 0x2c
   14d3c:	10 e0       	ldi	r17, 0x00	; 0
   14d3e:	20 e0       	ldi	r18, 0x00	; 0
   14d40:	30 e0       	ldi	r19, 0x00	; 0
   14d42:	41 e0       	ldi	r20, 0x01	; 1
   14d44:	50 e0       	ldi	r21, 0x00	; 0
   14d46:	6c e0       	ldi	r22, 0x0C	; 12
   14d48:	70 e0       	ldi	r23, 0x00	; 0
   14d4a:	8e e6       	ldi	r24, 0x6E	; 110
   14d4c:	99 e1       	ldi	r25, 0x19	; 25
   14d4e:	0e 94 c5 bf 	call	0x17f8a	; 0x17f8a <V2B_MSB>
   14d52:	8e e6       	ldi	r24, 0x6E	; 110
   14d54:	99 e1       	ldi	r25, 0x19	; 25
   14d56:	1f 91       	pop	r17
   14d58:	0f 91       	pop	r16
   14d5a:	08 95       	ret

00014d5c <SS80_test_extended_status>:
   14d5c:	9b 01       	movw	r18, r22
   14d5e:	43 e0       	ldi	r20, 0x03	; 3
   14d60:	35 95       	asr	r19
   14d62:	27 95       	ror	r18
   14d64:	4a 95       	dec	r20
   14d66:	e1 f7       	brne	.-8      	; 0x14d60 <SS80_test_extended_status+0x4>
   14d68:	82 0f       	add	r24, r18
   14d6a:	93 1f       	adc	r25, r19
   14d6c:	67 70       	andi	r22, 0x07	; 7
   14d6e:	77 27       	eor	r23, r23
   14d70:	20 e8       	ldi	r18, 0x80	; 128
   14d72:	30 e0       	ldi	r19, 0x00	; 0
   14d74:	02 c0       	rjmp	.+4      	; 0x14d7a <SS80_test_extended_status+0x1e>
   14d76:	35 95       	asr	r19
   14d78:	27 95       	ror	r18
   14d7a:	6a 95       	dec	r22
   14d7c:	e2 f7       	brpl	.-8      	; 0x14d76 <SS80_test_extended_status+0x1a>
   14d7e:	fc 01       	movw	r30, r24
   14d80:	80 81       	ld	r24, Z
   14d82:	28 23       	and	r18, r24
   14d84:	81 e0       	ldi	r24, 0x01	; 1
   14d86:	90 e0       	ldi	r25, 0x00	; 0
   14d88:	11 f4       	brne	.+4      	; 0x14d8e <SS80_test_extended_status+0x32>
   14d8a:	80 e0       	ldi	r24, 0x00	; 0
   14d8c:	90 e0       	ldi	r25, 0x00	; 0
   14d8e:	08 95       	ret

00014d90 <SS80_display_extended_status>:
   14d90:	6f 92       	push	r6
   14d92:	7f 92       	push	r7
   14d94:	8f 92       	push	r8
   14d96:	ef 92       	push	r14
   14d98:	ff 92       	push	r15
   14d9a:	0f 93       	push	r16
   14d9c:	1f 93       	push	r17
   14d9e:	cf 93       	push	r28
   14da0:	df 93       	push	r29
   14da2:	ad b7       	in	r26, 0x3d	; 61
   14da4:	be b7       	in	r27, 0x3e	; 62
   14da6:	17 97       	sbiw	r26, 0x07	; 7
   14da8:	0f b6       	in	r0, 0x3f	; 63
   14daa:	f8 94       	cli
   14dac:	be bf       	out	0x3e, r27	; 62
   14dae:	0f be       	out	0x3f, r0	; 63
   14db0:	ad bf       	out	0x3d, r26	; 61
   14db2:	fc 01       	movw	r30, r24
   14db4:	ac 01       	movw	r20, r24
   14db6:	48 5f       	subi	r20, 0xF8	; 248
   14db8:	5f 4f       	sbci	r21, 0xFF	; 255
   14dba:	20 e0       	ldi	r18, 0x00	; 0
   14dbc:	30 e0       	ldi	r19, 0x00	; 0
   14dbe:	a1 91       	ld	r26, Z+
   14dc0:	aa 23       	and	r26, r26
   14dc2:	11 f0       	breq	.+4      	; 0x14dc8 <SS80_display_extended_status+0x38>
   14dc4:	21 e0       	ldi	r18, 0x01	; 1
   14dc6:	30 e0       	ldi	r19, 0x00	; 0
   14dc8:	e4 17       	cp	r30, r20
   14dca:	f5 07       	cpc	r31, r21
   14dcc:	c1 f7       	brne	.-16     	; 0x14dbe <SS80_display_extended_status+0x2e>
   14dce:	23 2b       	or	r18, r19
   14dd0:	81 f1       	breq	.+96     	; 0x14e32 <SS80_display_extended_status+0xa2>
   14dd2:	ec 01       	movw	r28, r24
   14dd4:	ed b7       	in	r30, 0x3d	; 61
   14dd6:	fe b7       	in	r31, 0x3e	; 62
   14dd8:	75 83       	std	Z+5, r23	; 0x05
   14dda:	64 83       	std	Z+4, r22	; 0x04
   14ddc:	87 ed       	ldi	r24, 0xD7	; 215
   14dde:	96 e2       	ldi	r25, 0x26	; 38
   14de0:	a0 e0       	ldi	r26, 0x00	; 0
   14de2:	81 83       	std	Z+1, r24	; 0x01
   14de4:	92 83       	std	Z+2, r25	; 0x02
   14de6:	a3 83       	std	Z+3, r26	; 0x03
   14de8:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   14dec:	0c e7       	ldi	r16, 0x7C	; 124
   14dee:	12 e0       	ldi	r17, 0x02	; 2
   14df0:	8c ec       	ldi	r24, 0xCC	; 204
   14df2:	96 e2       	ldi	r25, 0x26	; 38
   14df4:	3c 01       	movw	r6, r24
   14df6:	81 2c       	mov	r8, r1
   14df8:	f8 01       	movw	r30, r16
   14dfa:	e0 80       	ld	r14, Z
   14dfc:	f1 80       	ldd	r15, Z+1	; 0x01
   14dfe:	ff ef       	ldi	r31, 0xFF	; 255
   14e00:	ef 16       	cp	r14, r31
   14e02:	ff 06       	cpc	r15, r31
   14e04:	b1 f0       	breq	.+44     	; 0x14e32 <SS80_display_extended_status+0xa2>
   14e06:	b7 01       	movw	r22, r14
   14e08:	ce 01       	movw	r24, r28
   14e0a:	a8 df       	rcall	.-176    	; 0x14d5c <SS80_test_extended_status>
   14e0c:	89 2b       	or	r24, r25
   14e0e:	71 f0       	breq	.+28     	; 0x14e2c <SS80_display_extended_status+0x9c>
   14e10:	f8 01       	movw	r30, r16
   14e12:	82 81       	ldd	r24, Z+2	; 0x02
   14e14:	93 81       	ldd	r25, Z+3	; 0x03
   14e16:	ed b7       	in	r30, 0x3d	; 61
   14e18:	fe b7       	in	r31, 0x3e	; 62
   14e1a:	97 83       	std	Z+7, r25	; 0x07
   14e1c:	86 83       	std	Z+6, r24	; 0x06
   14e1e:	f5 82       	std	Z+5, r15	; 0x05
   14e20:	e4 82       	std	Z+4, r14	; 0x04
   14e22:	61 82       	std	Z+1, r6	; 0x01
   14e24:	72 82       	std	Z+2, r7	; 0x02
   14e26:	83 82       	std	Z+3, r8	; 0x03
   14e28:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   14e2c:	0c 5f       	subi	r16, 0xFC	; 252
   14e2e:	1f 4f       	sbci	r17, 0xFF	; 255
   14e30:	e3 cf       	rjmp	.-58     	; 0x14df8 <SS80_display_extended_status+0x68>
   14e32:	ad b7       	in	r26, 0x3d	; 61
   14e34:	be b7       	in	r27, 0x3e	; 62
   14e36:	17 96       	adiw	r26, 0x07	; 7
   14e38:	0f b6       	in	r0, 0x3f	; 63
   14e3a:	f8 94       	cli
   14e3c:	be bf       	out	0x3e, r27	; 62
   14e3e:	0f be       	out	0x3f, r0	; 63
   14e40:	ad bf       	out	0x3d, r26	; 61
   14e42:	df 91       	pop	r29
   14e44:	cf 91       	pop	r28
   14e46:	1f 91       	pop	r17
   14e48:	0f 91       	pop	r16
   14e4a:	ff 90       	pop	r15
   14e4c:	ef 90       	pop	r14
   14e4e:	8f 90       	pop	r8
   14e50:	7f 90       	pop	r7
   14e52:	6f 90       	pop	r6
   14e54:	08 95       	ret

00014e56 <SS80_send_status>:
   14e56:	a9 e1       	ldi	r26, 0x19	; 25
   14e58:	b0 e0       	ldi	r27, 0x00	; 0
   14e5a:	e1 e3       	ldi	r30, 0x31	; 49
   14e5c:	f7 ea       	ldi	r31, 0xA7	; 167
   14e5e:	0c 94 72 e6 	jmp	0x1cce4	; 0x1cce4 <__prologue_saves__+0x18>
   14e62:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14e66:	85 ff       	sbrs	r24, 5
   14e68:	0a c0       	rjmp	.+20     	; 0x14e7e <SS80_send_status+0x28>
   14e6a:	88 eb       	ldi	r24, 0xB8	; 184
   14e6c:	96 e2       	ldi	r25, 0x26	; 38
   14e6e:	a0 e0       	ldi	r26, 0x00	; 0
   14e70:	ed b7       	in	r30, 0x3d	; 61
   14e72:	fe b7       	in	r31, 0x3e	; 62
   14e74:	81 83       	std	Z+1, r24	; 0x01
   14e76:	92 83       	std	Z+2, r25	; 0x02
   14e78:	a3 83       	std	Z+3, r26	; 0x03
   14e7a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   14e7e:	ce 01       	movw	r24, r28
   14e80:	04 96       	adiw	r24, 0x04	; 4
   14e82:	7c 01       	movw	r14, r24
   14e84:	84 e1       	ldi	r24, 0x14	; 20
   14e86:	f7 01       	movw	r30, r14
   14e88:	11 92       	st	Z+, r1
   14e8a:	8a 95       	dec	r24
   14e8c:	e9 f7       	brne	.-6      	; 0x14e88 <SS80_send_status+0x32>
   14e8e:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   14e92:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   14e96:	86 81       	ldd	r24, Z+6	; 0x06
   14e98:	20 e1       	ldi	r18, 0x10	; 16
   14e9a:	82 9f       	mul	r24, r18
   14e9c:	c0 01       	movw	r24, r0
   14e9e:	11 24       	eor	r1, r1
   14ea0:	95 81       	ldd	r25, Z+5	; 0x05
   14ea2:	9f 70       	andi	r25, 0x0F	; 15
   14ea4:	89 2b       	or	r24, r25
   14ea6:	8c 83       	std	Y+4, r24	; 0x04
   14ea8:	8f ef       	ldi	r24, 0xFF	; 255
   14eaa:	8d 83       	std	Y+5, r24	; 0x05
   14eac:	83 81       	ldd	r24, Z+3	; 0x03
   14eae:	86 ff       	sbrs	r24, 6
   14eb0:	02 c0       	rjmp	.+4      	; 0x14eb6 <SS80_send_status+0x60>
   14eb2:	92 e0       	ldi	r25, 0x02	; 2
   14eb4:	9e 83       	std	Y+6, r25	; 0x06
   14eb6:	82 ff       	sbrs	r24, 2
   14eb8:	03 c0       	rjmp	.+6      	; 0x14ec0 <SS80_send_status+0x6a>
   14eba:	9e 81       	ldd	r25, Y+6	; 0x06
   14ebc:	91 60       	ori	r25, 0x01	; 1
   14ebe:	9e 83       	std	Y+6, r25	; 0x06
   14ec0:	80 ff       	sbrs	r24, 0
   14ec2:	02 c0       	rjmp	.+4      	; 0x14ec8 <SS80_send_status+0x72>
   14ec4:	82 e0       	ldi	r24, 0x02	; 2
   14ec6:	88 87       	std	Y+8, r24	; 0x08
   14ec8:	83 81       	ldd	r24, Z+3	; 0x03
   14eca:	81 ff       	sbrs	r24, 1
   14ecc:	03 c0       	rjmp	.+6      	; 0x14ed4 <SS80_send_status+0x7e>
   14ece:	88 85       	ldd	r24, Y+8	; 0x08
   14ed0:	82 60       	ori	r24, 0x02	; 2
   14ed2:	88 87       	std	Y+8, r24	; 0x08
   14ed4:	83 81       	ldd	r24, Z+3	; 0x03
   14ed6:	83 ff       	sbrs	r24, 3
   14ed8:	02 c0       	rjmp	.+4      	; 0x14ede <SS80_send_status+0x88>
   14eda:	88 e0       	ldi	r24, 0x08	; 8
   14edc:	8a 87       	std	Y+10, r24	; 0x0a
   14ede:	83 81       	ldd	r24, Z+3	; 0x03
   14ee0:	94 81       	ldd	r25, Z+4	; 0x04
   14ee2:	89 2b       	or	r24, r25
   14ee4:	59 f4       	brne	.+22     	; 0x14efc <SS80_send_status+0xa6>
   14ee6:	07 81       	ldd	r16, Z+7	; 0x07
   14ee8:	10 85       	ldd	r17, Z+8	; 0x08
   14eea:	21 85       	ldd	r18, Z+9	; 0x09
   14eec:	32 85       	ldd	r19, Z+10	; 0x0a
   14eee:	46 e0       	ldi	r20, 0x06	; 6
   14ef0:	50 e0       	ldi	r21, 0x00	; 0
   14ef2:	6a e0       	ldi	r22, 0x0A	; 10
   14ef4:	70 e0       	ldi	r23, 0x00	; 0
   14ef6:	c7 01       	movw	r24, r14
   14ef8:	0e 94 c5 bf 	call	0x17f8a	; 0x17f8a <V2B_MSB>
   14efc:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   14f00:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   14f04:	83 81       	ldd	r24, Z+3	; 0x03
   14f06:	94 81       	ldd	r25, Z+4	; 0x04
   14f08:	89 2b       	or	r24, r25
   14f0a:	11 f0       	breq	.+4      	; 0x14f10 <SS80_send_status+0xba>
   14f0c:	81 e0       	ldi	r24, 0x01	; 1
   14f0e:	82 83       	std	Z+2, r24	; 0x02
   14f10:	80 e0       	ldi	r24, 0x00	; 0
   14f12:	91 e0       	ldi	r25, 0x01	; 1
   14f14:	99 8f       	std	Y+25, r25	; 0x19
   14f16:	88 8f       	std	Y+24, r24	; 0x18
   14f18:	ae 01       	movw	r20, r28
   14f1a:	48 5e       	subi	r20, 0xE8	; 232
   14f1c:	5f 4f       	sbci	r21, 0xFF	; 255
   14f1e:	64 e1       	ldi	r22, 0x14	; 20
   14f20:	70 e0       	ldi	r23, 0x00	; 0
   14f22:	c7 01       	movw	r24, r14
   14f24:	0e 94 06 8b 	call	0x1160c	; 0x1160c <gpib_write_str>
   14f28:	44 97       	sbiw	r24, 0x14	; 20
   14f2a:	71 f0       	breq	.+28     	; 0x14f48 <SS80_send_status+0xf2>
   14f2c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14f30:	80 ff       	sbrs	r24, 0
   14f32:	0a c0       	rjmp	.+20     	; 0x14f48 <SS80_send_status+0xf2>
   14f34:	8d e9       	ldi	r24, 0x9D	; 157
   14f36:	96 e2       	ldi	r25, 0x26	; 38
   14f38:	a0 e0       	ldi	r26, 0x00	; 0
   14f3a:	ed b7       	in	r30, 0x3d	; 61
   14f3c:	fe b7       	in	r31, 0x3e	; 62
   14f3e:	81 83       	std	Z+1, r24	; 0x01
   14f40:	92 83       	std	Z+2, r25	; 0x02
   14f42:	a3 83       	std	Z+3, r26	; 0x03
   14f44:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   14f48:	88 8d       	ldd	r24, Y+24	; 0x18
   14f4a:	99 8d       	ldd	r25, Y+25	; 0x19
   14f4c:	88 27       	eor	r24, r24
   14f4e:	90 7d       	andi	r25, 0xD0	; 208
   14f50:	69 96       	adiw	r28, 0x19	; 25
   14f52:	e6 e0       	ldi	r30, 0x06	; 6
   14f54:	0c 94 8e e6 	jmp	0x1cd1c	; 0x1cd1c <__epilogue_restores__+0x18>

00014f58 <SS80_describe>:
   14f58:	a7 e0       	ldi	r26, 0x07	; 7
   14f5a:	b0 e0       	ldi	r27, 0x00	; 0
   14f5c:	e2 eb       	ldi	r30, 0xB2	; 178
   14f5e:	f7 ea       	ldi	r31, 0xA7	; 167
   14f60:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
   14f64:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14f68:	85 ff       	sbrs	r24, 5
   14f6a:	0a c0       	rjmp	.+20     	; 0x14f80 <SS80_describe+0x28>
   14f6c:	8c e8       	ldi	r24, 0x8C	; 140
   14f6e:	96 e2       	ldi	r25, 0x26	; 38
   14f70:	a0 e0       	ldi	r26, 0x00	; 0
   14f72:	ed b7       	in	r30, 0x3d	; 61
   14f74:	fe b7       	in	r31, 0x3e	; 62
   14f76:	81 83       	std	Z+1, r24	; 0x01
   14f78:	92 83       	std	Z+2, r25	; 0x02
   14f7a:	a3 83       	std	Z+3, r26	; 0x03
   14f7c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   14f80:	1f 82       	std	Y+7, r1	; 0x07
   14f82:	1e 82       	std	Y+6, r1	; 0x06
   14f84:	ce 01       	movw	r24, r28
   14f86:	04 96       	adiw	r24, 0x04	; 4
   14f88:	85 dd       	rcall	.-1270   	; 0x14a94 <SS80ControllerPack>
   14f8a:	6c 81       	ldd	r22, Y+4	; 0x04
   14f8c:	7d 81       	ldd	r23, Y+5	; 0x05
   14f8e:	ae 01       	movw	r20, r28
   14f90:	4a 5f       	subi	r20, 0xFA	; 250
   14f92:	5f 4f       	sbci	r21, 0xFF	; 255
   14f94:	0e 94 06 8b 	call	0x1160c	; 0x1160c <gpib_write_str>
   14f98:	2c 81       	ldd	r18, Y+4	; 0x04
   14f9a:	3d 81       	ldd	r19, Y+5	; 0x05
   14f9c:	82 17       	cp	r24, r18
   14f9e:	93 07       	cpc	r25, r19
   14fa0:	39 f0       	breq	.+14     	; 0x14fb0 <SS80_describe+0x58>
   14fa2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14fa6:	80 ff       	sbrs	r24, 0
   14fa8:	3c c0       	rjmp	.+120    	; 0x15022 <SS80_describe+0xca>
   14faa:	89 e6       	ldi	r24, 0x69	; 105
   14fac:	96 e2       	ldi	r25, 0x26	; 38
   14fae:	31 c0       	rjmp	.+98     	; 0x15012 <SS80_describe+0xba>
   14fb0:	1f 82       	std	Y+7, r1	; 0x07
   14fb2:	1e 82       	std	Y+6, r1	; 0x06
   14fb4:	ce 01       	movw	r24, r28
   14fb6:	04 96       	adiw	r24, 0x04	; 4
   14fb8:	a9 dd       	rcall	.-1198   	; 0x14b0c <SS80UnitPack>
   14fba:	6c 81       	ldd	r22, Y+4	; 0x04
   14fbc:	7d 81       	ldd	r23, Y+5	; 0x05
   14fbe:	ae 01       	movw	r20, r28
   14fc0:	4a 5f       	subi	r20, 0xFA	; 250
   14fc2:	5f 4f       	sbci	r21, 0xFF	; 255
   14fc4:	0e 94 06 8b 	call	0x1160c	; 0x1160c <gpib_write_str>
   14fc8:	2c 81       	ldd	r18, Y+4	; 0x04
   14fca:	3d 81       	ldd	r19, Y+5	; 0x05
   14fcc:	82 17       	cp	r24, r18
   14fce:	93 07       	cpc	r25, r19
   14fd0:	39 f0       	breq	.+14     	; 0x14fe0 <SS80_describe+0x88>
   14fd2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14fd6:	80 ff       	sbrs	r24, 0
   14fd8:	24 c0       	rjmp	.+72     	; 0x15022 <SS80_describe+0xca>
   14fda:	8c e4       	ldi	r24, 0x4C	; 76
   14fdc:	96 e2       	ldi	r25, 0x26	; 38
   14fde:	19 c0       	rjmp	.+50     	; 0x15012 <SS80_describe+0xba>
   14fe0:	80 e0       	ldi	r24, 0x00	; 0
   14fe2:	91 e0       	ldi	r25, 0x01	; 1
   14fe4:	9f 83       	std	Y+7, r25	; 0x07
   14fe6:	8e 83       	std	Y+6, r24	; 0x06
   14fe8:	ce 01       	movw	r24, r28
   14fea:	04 96       	adiw	r24, 0x04	; 4
   14fec:	5b de       	rcall	.-842    	; 0x14ca4 <SS80VolumePack>
   14fee:	6c 81       	ldd	r22, Y+4	; 0x04
   14ff0:	7d 81       	ldd	r23, Y+5	; 0x05
   14ff2:	ae 01       	movw	r20, r28
   14ff4:	4a 5f       	subi	r20, 0xFA	; 250
   14ff6:	5f 4f       	sbci	r21, 0xFF	; 255
   14ff8:	0e 94 06 8b 	call	0x1160c	; 0x1160c <gpib_write_str>
   14ffc:	2c 81       	ldd	r18, Y+4	; 0x04
   14ffe:	3d 81       	ldd	r19, Y+5	; 0x05
   15000:	82 17       	cp	r24, r18
   15002:	93 07       	cpc	r25, r19
   15004:	99 f0       	breq	.+38     	; 0x1502c <SS80_describe+0xd4>
   15006:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1500a:	80 ff       	sbrs	r24, 0
   1500c:	0a c0       	rjmp	.+20     	; 0x15022 <SS80_describe+0xca>
   1500e:	8d e2       	ldi	r24, 0x2D	; 45
   15010:	96 e2       	ldi	r25, 0x26	; 38
   15012:	a0 e0       	ldi	r26, 0x00	; 0
   15014:	ed b7       	in	r30, 0x3d	; 61
   15016:	fe b7       	in	r31, 0x3e	; 62
   15018:	81 83       	std	Z+1, r24	; 0x01
   1501a:	92 83       	std	Z+2, r25	; 0x02
   1501c:	a3 83       	std	Z+3, r26	; 0x03
   1501e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   15022:	8e 81       	ldd	r24, Y+6	; 0x06
   15024:	9f 81       	ldd	r25, Y+7	; 0x07
   15026:	88 27       	eor	r24, r24
   15028:	90 7d       	andi	r25, 0xD0	; 208
   1502a:	02 c0       	rjmp	.+4      	; 0x15030 <SS80_describe+0xd8>
   1502c:	80 e0       	ldi	r24, 0x00	; 0
   1502e:	90 e0       	ldi	r25, 0x00	; 0
   15030:	27 96       	adiw	r28, 0x07	; 7
   15032:	e2 e0       	ldi	r30, 0x02	; 2
   15034:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00015038 <SS80_Check_Unit>:
   15038:	00 d0       	rcall	.+0      	; 0x1503a <SS80_Check_Unit+0x2>
   1503a:	00 d0       	rcall	.+0      	; 0x1503c <SS80_Check_Unit+0x4>
   1503c:	1f 92       	push	r1
   1503e:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15042:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15046:	88 23       	and	r24, r24
   15048:	c9 f0       	breq	.+50     	; 0x1507c <SS80_Check_Unit+0x44>
   1504a:	8f 30       	cpi	r24, 0x0F	; 15
   1504c:	b9 f0       	breq	.+46     	; 0x1507c <SS80_Check_Unit+0x44>
   1504e:	23 81       	ldd	r18, Z+3	; 0x03
   15050:	34 81       	ldd	r19, Z+4	; 0x04
   15052:	20 64       	ori	r18, 0x40	; 64
   15054:	34 83       	std	Z+4, r19	; 0x04
   15056:	23 83       	std	Z+3, r18	; 0x03
   15058:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   1505c:	90 ff       	sbrs	r25, 0
   1505e:	0f c0       	rjmp	.+30     	; 0x1507e <SS80_Check_Unit+0x46>
   15060:	90 e0       	ldi	r25, 0x00	; 0
   15062:	ed b7       	in	r30, 0x3d	; 61
   15064:	fe b7       	in	r31, 0x3e	; 62
   15066:	95 83       	std	Z+5, r25	; 0x05
   15068:	84 83       	std	Z+4, r24	; 0x04
   1506a:	85 e1       	ldi	r24, 0x15	; 21
   1506c:	96 e2       	ldi	r25, 0x26	; 38
   1506e:	a0 e0       	ldi	r26, 0x00	; 0
   15070:	81 83       	std	Z+1, r24	; 0x01
   15072:	92 83       	std	Z+2, r25	; 0x02
   15074:	a3 83       	std	Z+3, r26	; 0x03
   15076:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1507a:	01 c0       	rjmp	.+2      	; 0x1507e <SS80_Check_Unit+0x46>
   1507c:	85 83       	std	Z+5, r24	; 0x05
   1507e:	0f 90       	pop	r0
   15080:	0f 90       	pop	r0
   15082:	0f 90       	pop	r0
   15084:	0f 90       	pop	r0
   15086:	0f 90       	pop	r0
   15088:	08 95       	ret

0001508a <SS80_Check_Volume>:
   1508a:	00 d0       	rcall	.+0      	; 0x1508c <SS80_Check_Volume+0x2>
   1508c:	00 d0       	rcall	.+0      	; 0x1508e <SS80_Check_Volume+0x4>
   1508e:	1f 92       	push	r1
   15090:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15094:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15098:	88 23       	and	r24, r24
   1509a:	b9 f0       	breq	.+46     	; 0x150ca <SS80_Check_Volume+0x40>
   1509c:	23 81       	ldd	r18, Z+3	; 0x03
   1509e:	34 81       	ldd	r19, Z+4	; 0x04
   150a0:	20 64       	ori	r18, 0x40	; 64
   150a2:	34 83       	std	Z+4, r19	; 0x04
   150a4:	23 83       	std	Z+3, r18	; 0x03
   150a6:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   150aa:	90 ff       	sbrs	r25, 0
   150ac:	0f c0       	rjmp	.+30     	; 0x150cc <SS80_Check_Volume+0x42>
   150ae:	90 e0       	ldi	r25, 0x00	; 0
   150b0:	ed b7       	in	r30, 0x3d	; 61
   150b2:	fe b7       	in	r31, 0x3e	; 62
   150b4:	95 83       	std	Z+5, r25	; 0x05
   150b6:	84 83       	std	Z+4, r24	; 0x04
   150b8:	8b ef       	ldi	r24, 0xFB	; 251
   150ba:	95 e2       	ldi	r25, 0x25	; 37
   150bc:	a0 e0       	ldi	r26, 0x00	; 0
   150be:	81 83       	std	Z+1, r24	; 0x01
   150c0:	92 83       	std	Z+2, r25	; 0x02
   150c2:	a3 83       	std	Z+3, r26	; 0x03
   150c4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   150c8:	01 c0       	rjmp	.+2      	; 0x150cc <SS80_Check_Volume+0x42>
   150ca:	16 82       	std	Z+6, r1	; 0x06
   150cc:	0f 90       	pop	r0
   150ce:	0f 90       	pop	r0
   150d0:	0f 90       	pop	r0
   150d2:	0f 90       	pop	r0
   150d4:	0f 90       	pop	r0
   150d6:	08 95       	ret

000150d8 <SS80_Command_State>:
   150d8:	2f 92       	push	r2
   150da:	3f 92       	push	r3
   150dc:	4f 92       	push	r4
   150de:	6f 92       	push	r6
   150e0:	7f 92       	push	r7
   150e2:	8f 92       	push	r8
   150e4:	af 92       	push	r10
   150e6:	bf 92       	push	r11
   150e8:	cf 92       	push	r12
   150ea:	ef 92       	push	r14
   150ec:	ff 92       	push	r15
   150ee:	0f 93       	push	r16
   150f0:	1f 93       	push	r17
   150f2:	cf 93       	push	r28
   150f4:	df 93       	push	r29
   150f6:	cd b7       	in	r28, 0x3d	; 61
   150f8:	de b7       	in	r29, 0x3e	; 62
   150fa:	66 97       	sbiw	r28, 0x16	; 22
   150fc:	0f b6       	in	r0, 0x3f	; 63
   150fe:	f8 94       	cli
   15100:	de bf       	out	0x3e, r29	; 62
   15102:	0f be       	out	0x3f, r0	; 63
   15104:	cd bf       	out	0x3d, r28	; 61
   15106:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   1510a:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   1510e:	81 81       	ldd	r24, Z+1	; 0x01
   15110:	90 e0       	ldi	r25, 0x00	; 0
   15112:	0e 94 0c 86 	call	0x10c18	; 0x10c18 <gpib_disable_PPR>
   15116:	80 e0       	ldi	r24, 0x00	; 0
   15118:	91 e0       	ldi	r25, 0x01	; 1
   1511a:	99 87       	std	Y+9, r25	; 0x09
   1511c:	88 87       	std	Y+8, r24	; 0x08
   1511e:	ae 01       	movw	r20, r28
   15120:	48 5f       	subi	r20, 0xF8	; 248
   15122:	5f 4f       	sbci	r21, 0xFF	; 255
   15124:	60 e0       	ldi	r22, 0x00	; 0
   15126:	72 e0       	ldi	r23, 0x02	; 2
   15128:	80 ee       	ldi	r24, 0xE0	; 224
   1512a:	9c e1       	ldi	r25, 0x1C	; 28
   1512c:	0e 94 64 8a 	call	0x114c8	; 0x114c8 <gpib_read_str>
   15130:	9b 87       	std	Y+11, r25	; 0x0b
   15132:	8a 87       	std	Y+10, r24	; 0x0a
   15134:	88 85       	ldd	r24, Y+8	; 0x08
   15136:	99 85       	ldd	r25, Y+9	; 0x09
   15138:	9c 01       	movw	r18, r24
   1513a:	22 27       	eor	r18, r18
   1513c:	30 7d       	andi	r19, 0xD0	; 208
   1513e:	23 2b       	or	r18, r19
   15140:	79 f0       	breq	.+30     	; 0x15160 <SS80_Command_State+0x88>
   15142:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15146:	80 ff       	sbrs	r24, 0
   15148:	21 c2       	rjmp	.+1090   	; 0x1558c <SS80_Command_State+0x4b4>
   1514a:	85 ed       	ldi	r24, 0xD5	; 213
   1514c:	95 e2       	ldi	r25, 0x25	; 37
   1514e:	a0 e0       	ldi	r26, 0x00	; 0
   15150:	ed b7       	in	r30, 0x3d	; 61
   15152:	fe b7       	in	r31, 0x3e	; 62
   15154:	81 83       	std	Z+1, r24	; 0x01
   15156:	92 83       	std	Z+2, r25	; 0x02
   15158:	a3 83       	std	Z+3, r26	; 0x03
   1515a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1515e:	16 c2       	rjmp	.+1068   	; 0x1558c <SS80_Command_State+0x4b4>
   15160:	2a 85       	ldd	r18, Y+10	; 0x0a
   15162:	3b 85       	ldd	r19, Y+11	; 0x0b
   15164:	23 2b       	or	r18, r19
   15166:	09 f4       	brne	.+2      	; 0x1516a <SS80_Command_State+0x92>
   15168:	16 c2       	rjmp	.+1068   	; 0x15596 <SS80_Command_State+0x4be>
   1516a:	90 fd       	sbrc	r25, 0
   1516c:	0e c0       	rjmp	.+28     	; 0x1518a <SS80_Command_State+0xb2>
   1516e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15172:	80 ff       	sbrs	r24, 0
   15174:	0a c0       	rjmp	.+20     	; 0x1518a <SS80_Command_State+0xb2>
   15176:	8c eb       	ldi	r24, 0xBC	; 188
   15178:	95 e2       	ldi	r25, 0x25	; 37
   1517a:	a0 e0       	ldi	r26, 0x00	; 0
   1517c:	ed b7       	in	r30, 0x3d	; 61
   1517e:	fe b7       	in	r31, 0x3e	; 62
   15180:	81 83       	std	Z+1, r24	; 0x01
   15182:	92 83       	std	Z+2, r25	; 0x02
   15184:	a3 83       	std	Z+3, r26	; 0x03
   15186:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1518a:	e1 2c       	mov	r14, r1
   1518c:	f1 2c       	mov	r15, r1
   1518e:	80 ec       	ldi	r24, 0xC0	; 192
   15190:	94 e2       	ldi	r25, 0x24	; 36
   15192:	9c 01       	movw	r18, r24
   15194:	40 e0       	ldi	r20, 0x00	; 0
   15196:	2e 87       	std	Y+14, r18	; 0x0e
   15198:	3f 87       	std	Y+15, r19	; 0x0f
   1519a:	48 8b       	std	Y+16, r20	; 0x10
   1519c:	85 ee       	ldi	r24, 0xE5	; 229
   1519e:	94 e2       	ldi	r25, 0x24	; 36
   151a0:	9c 01       	movw	r18, r24
   151a2:	40 e0       	ldi	r20, 0x00	; 0
   151a4:	29 8b       	std	Y+17, r18	; 0x11
   151a6:	3a 8b       	std	Y+18, r19	; 0x12
   151a8:	4b 8b       	std	Y+19, r20	; 0x13
   151aa:	8f ef       	ldi	r24, 0xFF	; 255
   151ac:	94 e2       	ldi	r25, 0x24	; 36
   151ae:	9c 01       	movw	r18, r24
   151b0:	40 e0       	ldi	r20, 0x00	; 0
   151b2:	2c 8b       	std	Y+20, r18	; 0x14
   151b4:	3d 8b       	std	Y+21, r19	; 0x15
   151b6:	4e 8b       	std	Y+22, r20	; 0x16
   151b8:	85 e1       	ldi	r24, 0x15	; 21
   151ba:	95 e2       	ldi	r25, 0x25	; 37
   151bc:	3c 01       	movw	r6, r24
   151be:	81 2c       	mov	r8, r1
   151c0:	83 e2       	ldi	r24, 0x23	; 35
   151c2:	95 e2       	ldi	r25, 0x25	; 37
   151c4:	5c 01       	movw	r10, r24
   151c6:	c1 2c       	mov	r12, r1
   151c8:	8f e3       	ldi	r24, 0x3F	; 63
   151ca:	95 e2       	ldi	r25, 0x25	; 37
   151cc:	1c 01       	movw	r2, r24
   151ce:	41 2c       	mov	r4, r1
   151d0:	2a 85       	ldd	r18, Y+10	; 0x0a
   151d2:	3b 85       	ldd	r19, Y+11	; 0x0b
   151d4:	87 01       	movw	r16, r14
   151d6:	e2 16       	cp	r14, r18
   151d8:	f3 06       	cpc	r15, r19
   151da:	0c f0       	brlt	.+2      	; 0x151de <SS80_Command_State+0x106>
   151dc:	b6 c1       	rjmp	.+876    	; 0x1554a <SS80_Command_State+0x472>
   151de:	0f 5f       	subi	r16, 0xFF	; 255
   151e0:	1f 4f       	sbci	r17, 0xFF	; 255
   151e2:	f7 01       	movw	r30, r14
   151e4:	e0 52       	subi	r30, 0x20	; 32
   151e6:	f3 4e       	sbci	r31, 0xE3	; 227
   151e8:	80 81       	ld	r24, Z
   151ea:	28 2f       	mov	r18, r24
   151ec:	30 e0       	ldi	r19, 0x00	; 0
   151ee:	a9 01       	movw	r20, r18
   151f0:	40 52       	subi	r20, 0x20	; 32
   151f2:	51 09       	sbc	r21, r1
   151f4:	40 31       	cpi	r20, 0x10	; 16
   151f6:	51 05       	cpc	r21, r1
   151f8:	98 f4       	brcc	.+38     	; 0x15220 <SS80_Command_State+0x148>
   151fa:	80 52       	subi	r24, 0x20	; 32
   151fc:	1d df       	rcall	.-454    	; 0x15038 <SS80_Check_Unit>
   151fe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15202:	85 ff       	sbrs	r24, 5
   15204:	a0 c1       	rjmp	.+832    	; 0x15546 <SS80_Command_State+0x46e>
   15206:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   1520a:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   1520e:	85 81       	ldd	r24, Z+5	; 0x05
   15210:	90 e0       	ldi	r25, 0x00	; 0
   15212:	ed b7       	in	r30, 0x3d	; 61
   15214:	fe b7       	in	r31, 0x3e	; 62
   15216:	95 83       	std	Z+5, r25	; 0x05
   15218:	84 83       	std	Z+4, r24	; 0x04
   1521a:	86 ea       	ldi	r24, 0xA6	; 166
   1521c:	95 e2       	ldi	r25, 0x25	; 37
   1521e:	19 c0       	rjmp	.+50     	; 0x15252 <SS80_Command_State+0x17a>
   15220:	a9 01       	movw	r20, r18
   15222:	40 54       	subi	r20, 0x40	; 64
   15224:	51 09       	sbc	r21, r1
   15226:	40 31       	cpi	r20, 0x10	; 16
   15228:	51 05       	cpc	r21, r1
   1522a:	d0 f4       	brcc	.+52     	; 0x15260 <SS80_Command_State+0x188>
   1522c:	80 54       	subi	r24, 0x40	; 64
   1522e:	2d df       	rcall	.-422    	; 0x1508a <SS80_Check_Volume>
   15230:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15234:	85 ff       	sbrs	r24, 5
   15236:	87 c1       	rjmp	.+782    	; 0x15546 <SS80_Command_State+0x46e>
   15238:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   1523c:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15240:	86 81       	ldd	r24, Z+6	; 0x06
   15242:	90 e0       	ldi	r25, 0x00	; 0
   15244:	ed b7       	in	r30, 0x3d	; 61
   15246:	fe b7       	in	r31, 0x3e	; 62
   15248:	95 83       	std	Z+5, r25	; 0x05
   1524a:	84 83       	std	Z+4, r24	; 0x04
   1524c:	2d e8       	ldi	r18, 0x8D	; 141
   1524e:	35 e2       	ldi	r19, 0x25	; 37
   15250:	c9 01       	movw	r24, r18
   15252:	a0 e0       	ldi	r26, 0x00	; 0
   15254:	81 83       	std	Z+1, r24	; 0x01
   15256:	92 83       	std	Z+2, r25	; 0x02
   15258:	a3 83       	std	Z+3, r26	; 0x03
   1525a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1525e:	73 c1       	rjmp	.+742    	; 0x15546 <SS80_Command_State+0x46e>
   15260:	21 15       	cp	r18, r1
   15262:	31 05       	cpc	r19, r1
   15264:	79 f4       	brne	.+30     	; 0x15284 <SS80_Command_State+0x1ac>
   15266:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   1526a:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   1526e:	81 e0       	ldi	r24, 0x01	; 1
   15270:	90 e0       	ldi	r25, 0x00	; 0
   15272:	91 83       	std	Z+1, r25	; 0x01
   15274:	80 83       	st	Z, r24
   15276:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1527a:	85 ff       	sbrs	r24, 5
   1527c:	66 c1       	rjmp	.+716    	; 0x1554a <SS80_Command_State+0x472>
   1527e:	85 e7       	ldi	r24, 0x75	; 117
   15280:	95 e2       	ldi	r25, 0x25	; 37
   15282:	0f c0       	rjmp	.+30     	; 0x152a2 <SS80_Command_State+0x1ca>
   15284:	22 30       	cpi	r18, 0x02	; 2
   15286:	31 05       	cpc	r19, r1
   15288:	a9 f4       	brne	.+42     	; 0x152b4 <SS80_Command_State+0x1dc>
   1528a:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   1528e:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15292:	31 83       	std	Z+1, r19	; 0x01
   15294:	20 83       	st	Z, r18
   15296:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1529a:	85 ff       	sbrs	r24, 5
   1529c:	56 c1       	rjmp	.+684    	; 0x1554a <SS80_Command_State+0x472>
   1529e:	8c e5       	ldi	r24, 0x5C	; 92
   152a0:	95 e2       	ldi	r25, 0x25	; 37
   152a2:	a0 e0       	ldi	r26, 0x00	; 0
   152a4:	ed b7       	in	r30, 0x3d	; 61
   152a6:	fe b7       	in	r31, 0x3e	; 62
   152a8:	81 83       	std	Z+1, r24	; 0x01
   152aa:	92 83       	std	Z+2, r25	; 0x02
   152ac:	a3 83       	std	Z+3, r26	; 0x03
   152ae:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   152b2:	4b c1       	rjmp	.+662    	; 0x1554a <SS80_Command_State+0x472>
   152b4:	20 31       	cpi	r18, 0x10	; 16
   152b6:	31 05       	cpc	r19, r1
   152b8:	b1 f5       	brne	.+108    	; 0x15326 <SS80_Command_State+0x24e>
   152ba:	20 91 5c 19 	lds	r18, 0x195C	; 0x80195c <SS80s>
   152be:	30 91 5d 19 	lds	r19, 0x195D	; 0x80195d <SS80s+0x1>
   152c2:	3d 87       	std	Y+13, r19	; 0x0d
   152c4:	2c 87       	std	Y+12, r18	; 0x0c
   152c6:	46 e0       	ldi	r20, 0x06	; 6
   152c8:	50 e0       	ldi	r21, 0x00	; 0
   152ca:	b8 01       	movw	r22, r16
   152cc:	80 ee       	ldi	r24, 0xE0	; 224
   152ce:	9c e1       	ldi	r25, 0x1C	; 28
   152d0:	0e 94 ee bf 	call	0x17fdc	; 0x17fdc <B2V_MSB>
   152d4:	ec 85       	ldd	r30, Y+12	; 0x0c
   152d6:	fd 85       	ldd	r31, Y+13	; 0x0d
   152d8:	67 83       	std	Z+7, r22	; 0x07
   152da:	70 87       	std	Z+8, r23	; 0x08
   152dc:	81 87       	std	Z+9, r24	; 0x09
   152de:	92 87       	std	Z+10, r25	; 0x0a
   152e0:	87 01       	movw	r16, r14
   152e2:	09 5f       	subi	r16, 0xF9	; 249
   152e4:	1f 4f       	sbci	r17, 0xFF	; 255
   152e6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   152ea:	85 ff       	sbrs	r24, 5
   152ec:	2c c1       	rjmp	.+600    	; 0x15546 <SS80_Command_State+0x46e>
   152ee:	20 91 5c 19 	lds	r18, 0x195C	; 0x80195c <SS80s>
   152f2:	30 91 5d 19 	lds	r19, 0x195D	; 0x80195d <SS80s+0x1>
   152f6:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <SS80p>
   152fa:	90 91 5f 19 	lds	r25, 0x195F	; 0x80195f <SS80p+0x1>
   152fe:	fc 01       	movw	r30, r24
   15300:	a2 89       	ldd	r26, Z+18	; 0x12
   15302:	b3 89       	ldd	r27, Z+19	; 0x13
   15304:	f9 01       	movw	r30, r18
   15306:	27 81       	ldd	r18, Z+7	; 0x07
   15308:	30 85       	ldd	r19, Z+8	; 0x08
   1530a:	41 85       	ldd	r20, Z+9	; 0x09
   1530c:	52 85       	ldd	r21, Z+10	; 0x0a
   1530e:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__muluhisi3>
   15312:	ed b7       	in	r30, 0x3d	; 61
   15314:	fe b7       	in	r31, 0x3e	; 62
   15316:	64 83       	std	Z+4, r22	; 0x04
   15318:	75 83       	std	Z+5, r23	; 0x05
   1531a:	86 83       	std	Z+6, r24	; 0x06
   1531c:	97 83       	std	Z+7, r25	; 0x07
   1531e:	21 82       	std	Z+1, r2	; 0x01
   15320:	32 82       	std	Z+2, r3	; 0x02
   15322:	43 82       	std	Z+3, r4	; 0x03
   15324:	2e c0       	rjmp	.+92     	; 0x15382 <SS80_Command_State+0x2aa>
   15326:	28 31       	cpi	r18, 0x18	; 24
   15328:	31 05       	cpc	r19, r1
   1532a:	71 f5       	brne	.+92     	; 0x15388 <SS80_Command_State+0x2b0>
   1532c:	20 91 5c 19 	lds	r18, 0x195C	; 0x80195c <SS80s>
   15330:	30 91 5d 19 	lds	r19, 0x195D	; 0x80195d <SS80s+0x1>
   15334:	3d 87       	std	Y+13, r19	; 0x0d
   15336:	2c 87       	std	Y+12, r18	; 0x0c
   15338:	44 e0       	ldi	r20, 0x04	; 4
   1533a:	50 e0       	ldi	r21, 0x00	; 0
   1533c:	b8 01       	movw	r22, r16
   1533e:	80 ee       	ldi	r24, 0xE0	; 224
   15340:	9c e1       	ldi	r25, 0x1C	; 28
   15342:	0e 94 ee bf 	call	0x17fdc	; 0x17fdc <B2V_MSB>
   15346:	ec 85       	ldd	r30, Y+12	; 0x0c
   15348:	fd 85       	ldd	r31, Y+13	; 0x0d
   1534a:	63 87       	std	Z+11, r22	; 0x0b
   1534c:	74 87       	std	Z+12, r23	; 0x0c
   1534e:	85 87       	std	Z+13, r24	; 0x0d
   15350:	96 87       	std	Z+14, r25	; 0x0e
   15352:	87 01       	movw	r16, r14
   15354:	0b 5f       	subi	r16, 0xFB	; 251
   15356:	1f 4f       	sbci	r17, 0xFF	; 255
   15358:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1535c:	85 ff       	sbrs	r24, 5
   1535e:	f3 c0       	rjmp	.+486    	; 0x15546 <SS80_Command_State+0x46e>
   15360:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15364:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15368:	83 85       	ldd	r24, Z+11	; 0x0b
   1536a:	94 85       	ldd	r25, Z+12	; 0x0c
   1536c:	a5 85       	ldd	r26, Z+13	; 0x0d
   1536e:	b6 85       	ldd	r27, Z+14	; 0x0e
   15370:	ed b7       	in	r30, 0x3d	; 61
   15372:	fe b7       	in	r31, 0x3e	; 62
   15374:	84 83       	std	Z+4, r24	; 0x04
   15376:	95 83       	std	Z+5, r25	; 0x05
   15378:	a6 83       	std	Z+6, r26	; 0x06
   1537a:	b7 83       	std	Z+7, r27	; 0x07
   1537c:	a1 82       	std	Z+1, r10	; 0x01
   1537e:	b2 82       	std	Z+2, r11	; 0x02
   15380:	c3 82       	std	Z+3, r12	; 0x03
   15382:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   15386:	df c0       	rjmp	.+446    	; 0x15546 <SS80_Command_State+0x46e>
   15388:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1538c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   15390:	24 33       	cpi	r18, 0x34	; 52
   15392:	31 05       	cpc	r19, r1
   15394:	41 f4       	brne	.+16     	; 0x153a6 <SS80_Command_State+0x2ce>
   15396:	85 ff       	sbrs	r24, 5
   15398:	d6 c0       	rjmp	.+428    	; 0x15546 <SS80_Command_State+0x46e>
   1539a:	ed b7       	in	r30, 0x3d	; 61
   1539c:	fe b7       	in	r31, 0x3e	; 62
   1539e:	61 82       	std	Z+1, r6	; 0x01
   153a0:	72 82       	std	Z+2, r7	; 0x02
   153a2:	83 82       	std	Z+3, r8	; 0x03
   153a4:	2b c0       	rjmp	.+86     	; 0x153fc <SS80_Command_State+0x324>
   153a6:	29 33       	cpi	r18, 0x39	; 57
   153a8:	31 05       	cpc	r19, r1
   153aa:	49 f4       	brne	.+18     	; 0x153be <SS80_Command_State+0x2e6>
   153ac:	87 01       	movw	r16, r14
   153ae:	0d 5f       	subi	r16, 0xFD	; 253
   153b0:	1f 4f       	sbci	r17, 0xFF	; 255
   153b2:	85 ff       	sbrs	r24, 5
   153b4:	c8 c0       	rjmp	.+400    	; 0x15546 <SS80_Command_State+0x46e>
   153b6:	2c 89       	ldd	r18, Y+20	; 0x14
   153b8:	3d 89       	ldd	r19, Y+21	; 0x15
   153ba:	4e 89       	ldd	r20, Y+22	; 0x16
   153bc:	1a c0       	rjmp	.+52     	; 0x153f2 <SS80_Command_State+0x31a>
   153be:	2b 33       	cpi	r18, 0x3B	; 59
   153c0:	31 05       	cpc	r19, r1
   153c2:	49 f4       	brne	.+18     	; 0x153d6 <SS80_Command_State+0x2fe>
   153c4:	87 01       	movw	r16, r14
   153c6:	0e 5f       	subi	r16, 0xFE	; 254
   153c8:	1f 4f       	sbci	r17, 0xFF	; 255
   153ca:	85 ff       	sbrs	r24, 5
   153cc:	bc c0       	rjmp	.+376    	; 0x15546 <SS80_Command_State+0x46e>
   153ce:	29 89       	ldd	r18, Y+17	; 0x11
   153d0:	3a 89       	ldd	r19, Y+18	; 0x12
   153d2:	4b 89       	ldd	r20, Y+19	; 0x13
   153d4:	0e c0       	rjmp	.+28     	; 0x153f2 <SS80_Command_State+0x31a>
   153d6:	28 34       	cpi	r18, 0x48	; 72
   153d8:	31 05       	cpc	r19, r1
   153da:	99 f4       	brne	.+38     	; 0x15402 <SS80_Command_State+0x32a>
   153dc:	87 01       	movw	r16, r14
   153de:	0e 5f       	subi	r16, 0xFE	; 254
   153e0:	1f 4f       	sbci	r17, 0xFF	; 255
   153e2:	80 73       	andi	r24, 0x30	; 48
   153e4:	99 27       	eor	r25, r25
   153e6:	89 2b       	or	r24, r25
   153e8:	09 f4       	brne	.+2      	; 0x153ec <SS80_Command_State+0x314>
   153ea:	ad c0       	rjmp	.+346    	; 0x15546 <SS80_Command_State+0x46e>
   153ec:	2e 85       	ldd	r18, Y+14	; 0x0e
   153ee:	3f 85       	ldd	r19, Y+15	; 0x0f
   153f0:	48 89       	ldd	r20, Y+16	; 0x10
   153f2:	ed b7       	in	r30, 0x3d	; 61
   153f4:	fe b7       	in	r31, 0x3e	; 62
   153f6:	21 83       	std	Z+1, r18	; 0x01
   153f8:	32 83       	std	Z+2, r19	; 0x02
   153fa:	43 83       	std	Z+3, r20	; 0x03
   153fc:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   15400:	a2 c0       	rjmp	.+324    	; 0x15546 <SS80_Command_State+0x46e>
   15402:	24 30       	cpi	r18, 0x04	; 4
   15404:	31 05       	cpc	r19, r1
   15406:	41 f4       	brne	.+16     	; 0x15418 <SS80_Command_State+0x340>
   15408:	80 73       	andi	r24, 0x30	; 48
   1540a:	99 27       	eor	r25, r25
   1540c:	89 2b       	or	r24, r25
   1540e:	09 f4       	brne	.+2      	; 0x15412 <SS80_Command_State+0x33a>
   15410:	9c c0       	rjmp	.+312    	; 0x1554a <SS80_Command_State+0x472>
   15412:	8f e9       	ldi	r24, 0x9F	; 159
   15414:	94 e2       	ldi	r25, 0x24	; 36
   15416:	45 cf       	rjmp	.-374    	; 0x152a2 <SS80_Command_State+0x1ca>
   15418:	2e 30       	cpi	r18, 0x0E	; 14
   1541a:	31 05       	cpc	r19, r1
   1541c:	29 f4       	brne	.+10     	; 0x15428 <SS80_Command_State+0x350>
   1541e:	85 ff       	sbrs	r24, 5
   15420:	94 c0       	rjmp	.+296    	; 0x1554a <SS80_Command_State+0x472>
   15422:	89 e8       	ldi	r24, 0x89	; 137
   15424:	94 e2       	ldi	r25, 0x24	; 36
   15426:	3d cf       	rjmp	.-390    	; 0x152a2 <SS80_Command_State+0x1ca>
   15428:	2f 30       	cpi	r18, 0x0F	; 15
   1542a:	31 05       	cpc	r19, r1
   1542c:	29 f4       	brne	.+10     	; 0x15438 <SS80_Command_State+0x360>
   1542e:	85 ff       	sbrs	r24, 5
   15430:	8c c0       	rjmp	.+280    	; 0x1554a <SS80_Command_State+0x472>
   15432:	8c e6       	ldi	r24, 0x6C	; 108
   15434:	94 e2       	ldi	r25, 0x24	; 36
   15436:	35 cf       	rjmp	.-406    	; 0x152a2 <SS80_Command_State+0x1ca>
   15438:	21 33       	cpi	r18, 0x31	; 49
   1543a:	31 05       	cpc	r19, r1
   1543c:	59 f4       	brne	.+22     	; 0x15454 <SS80_Command_State+0x37c>
   1543e:	87 01       	movw	r16, r14
   15440:	0d 5f       	subi	r16, 0xFD	; 253
   15442:	1f 4f       	sbci	r17, 0xFF	; 255
   15444:	80 73       	andi	r24, 0x30	; 48
   15446:	99 27       	eor	r25, r25
   15448:	89 2b       	or	r24, r25
   1544a:	09 f4       	brne	.+2      	; 0x1544e <SS80_Command_State+0x376>
   1544c:	7e c0       	rjmp	.+252    	; 0x1554a <SS80_Command_State+0x472>
   1544e:	80 e5       	ldi	r24, 0x50	; 80
   15450:	94 e2       	ldi	r25, 0x24	; 36
   15452:	27 cf       	rjmp	.-434    	; 0x152a2 <SS80_Command_State+0x1ca>
   15454:	25 33       	cpi	r18, 0x35	; 53
   15456:	31 05       	cpc	r19, r1
   15458:	69 f4       	brne	.+26     	; 0x15474 <SS80_Command_State+0x39c>
   1545a:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   1545e:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15462:	24 e0       	ldi	r18, 0x04	; 4
   15464:	30 e0       	ldi	r19, 0x00	; 0
   15466:	31 83       	std	Z+1, r19	; 0x01
   15468:	20 83       	st	Z, r18
   1546a:	85 ff       	sbrs	r24, 5
   1546c:	6e c0       	rjmp	.+220    	; 0x1554a <SS80_Command_State+0x472>
   1546e:	8f e3       	ldi	r24, 0x3F	; 63
   15470:	94 e2       	ldi	r25, 0x24	; 36
   15472:	17 cf       	rjmp	.-466    	; 0x152a2 <SS80_Command_State+0x1ca>
   15474:	27 33       	cpi	r18, 0x37	; 55
   15476:	31 05       	cpc	r19, r1
   15478:	59 f4       	brne	.+22     	; 0x15490 <SS80_Command_State+0x3b8>
   1547a:	87 01       	movw	r16, r14
   1547c:	0d 5f       	subi	r16, 0xFD	; 253
   1547e:	1f 4f       	sbci	r17, 0xFF	; 255
   15480:	80 73       	andi	r24, 0x30	; 48
   15482:	99 27       	eor	r25, r25
   15484:	89 2b       	or	r24, r25
   15486:	09 f4       	brne	.+2      	; 0x1548a <SS80_Command_State+0x3b2>
   15488:	60 c0       	rjmp	.+192    	; 0x1554a <SS80_Command_State+0x472>
   1548a:	81 e2       	ldi	r24, 0x21	; 33
   1548c:	94 e2       	ldi	r25, 0x24	; 36
   1548e:	09 cf       	rjmp	.-494    	; 0x152a2 <SS80_Command_State+0x1ca>
   15490:	2e 33       	cpi	r18, 0x3E	; 62
   15492:	31 05       	cpc	r19, r1
   15494:	c1 f4       	brne	.+48     	; 0x154c6 <SS80_Command_State+0x3ee>
   15496:	80 73       	andi	r24, 0x30	; 48
   15498:	99 27       	eor	r25, r25
   1549a:	89 2b       	or	r24, r25
   1549c:	81 f0       	breq	.+32     	; 0x154be <SS80_Command_State+0x3e6>
   1549e:	82 e0       	ldi	r24, 0x02	; 2
   154a0:	94 e2       	ldi	r25, 0x24	; 36
   154a2:	a0 e0       	ldi	r26, 0x00	; 0
   154a4:	ed b7       	in	r30, 0x3d	; 61
   154a6:	fe b7       	in	r31, 0x3e	; 62
   154a8:	81 83       	std	Z+1, r24	; 0x01
   154aa:	92 83       	std	Z+2, r25	; 0x02
   154ac:	a3 83       	std	Z+3, r26	; 0x03
   154ae:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   154b2:	62 e6       	ldi	r22, 0x62	; 98
   154b4:	70 e1       	ldi	r23, 0x10	; 16
   154b6:	c8 01       	movw	r24, r16
   154b8:	80 52       	subi	r24, 0x20	; 32
   154ba:	93 4e       	sbci	r25, 0xE3	; 227
   154bc:	69 dc       	rcall	.-1838   	; 0x14d90 <SS80_display_extended_status>
   154be:	87 01       	movw	r16, r14
   154c0:	07 5f       	subi	r16, 0xF7	; 247
   154c2:	1f 4f       	sbci	r17, 0xFF	; 255
   154c4:	42 c0       	rjmp	.+132    	; 0x1554a <SS80_Command_State+0x472>
   154c6:	2c 34       	cpi	r18, 0x4C	; 76
   154c8:	31 05       	cpc	r19, r1
   154ca:	39 f4       	brne	.+14     	; 0x154da <SS80_Command_State+0x402>
   154cc:	80 73       	andi	r24, 0x30	; 48
   154ce:	99 27       	eor	r25, r25
   154d0:	89 2b       	or	r24, r25
   154d2:	d9 f1       	breq	.+118    	; 0x1554a <SS80_Command_State+0x472>
   154d4:	87 ee       	ldi	r24, 0xE7	; 231
   154d6:	93 e2       	ldi	r25, 0x23	; 35
   154d8:	e4 ce       	rjmp	.-568    	; 0x152a2 <SS80_Command_State+0x1ca>
   154da:	2d 34       	cpi	r18, 0x4D	; 77
   154dc:	31 05       	cpc	r19, r1
   154de:	39 f4       	brne	.+14     	; 0x154ee <SS80_Command_State+0x416>
   154e0:	80 73       	andi	r24, 0x30	; 48
   154e2:	99 27       	eor	r25, r25
   154e4:	89 2b       	or	r24, r25
   154e6:	89 f1       	breq	.+98     	; 0x1554a <SS80_Command_State+0x472>
   154e8:	8e ec       	ldi	r24, 0xCE	; 206
   154ea:	93 e2       	ldi	r25, 0x23	; 35
   154ec:	da ce       	rjmp	.-588    	; 0x152a2 <SS80_Command_State+0x1ca>
   154ee:	2d 30       	cpi	r18, 0x0D	; 13
   154f0:	31 05       	cpc	r19, r1
   154f2:	69 f4       	brne	.+26     	; 0x1550e <SS80_Command_State+0x436>
   154f4:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   154f8:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   154fc:	23 e0       	ldi	r18, 0x03	; 3
   154fe:	30 e0       	ldi	r19, 0x00	; 0
   15500:	31 83       	std	Z+1, r19	; 0x01
   15502:	20 83       	st	Z, r18
   15504:	85 ff       	sbrs	r24, 5
   15506:	21 c0       	rjmp	.+66     	; 0x1554a <SS80_Command_State+0x472>
   15508:	87 eb       	ldi	r24, 0xB7	; 183
   1550a:	93 e2       	ldi	r25, 0x23	; 35
   1550c:	ca ce       	rjmp	.-620    	; 0x152a2 <SS80_Command_State+0x1ca>
   1550e:	23 33       	cpi	r18, 0x33	; 51
   15510:	31 05       	cpc	r19, r1
   15512:	51 f4       	brne	.+20     	; 0x15528 <SS80_Command_State+0x450>
   15514:	87 01       	movw	r16, r14
   15516:	0c 5f       	subi	r16, 0xFC	; 252
   15518:	1f 4f       	sbci	r17, 0xFF	; 255
   1551a:	80 73       	andi	r24, 0x30	; 48
   1551c:	99 27       	eor	r25, r25
   1551e:	89 2b       	or	r24, r25
   15520:	a1 f0       	breq	.+40     	; 0x1554a <SS80_Command_State+0x472>
   15522:	84 e9       	ldi	r24, 0x94	; 148
   15524:	93 e2       	ldi	r25, 0x23	; 35
   15526:	bd ce       	rjmp	.-646    	; 0x152a2 <SS80_Command_State+0x1ca>
   15528:	80 ff       	sbrs	r24, 0
   1552a:	28 c0       	rjmp	.+80     	; 0x1557c <SS80_Command_State+0x4a4>
   1552c:	ed b7       	in	r30, 0x3d	; 61
   1552e:	fe b7       	in	r31, 0x3e	; 62
   15530:	35 83       	std	Z+5, r19	; 0x05
   15532:	24 83       	std	Z+4, r18	; 0x04
   15534:	84 e7       	ldi	r24, 0x74	; 116
   15536:	93 e2       	ldi	r25, 0x23	; 35
   15538:	a0 e0       	ldi	r26, 0x00	; 0
   1553a:	81 83       	std	Z+1, r24	; 0x01
   1553c:	92 83       	std	Z+2, r25	; 0x02
   1553e:	a3 83       	std	Z+3, r26	; 0x03
   15540:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   15544:	02 c0       	rjmp	.+4      	; 0x1554a <SS80_Command_State+0x472>
   15546:	78 01       	movw	r14, r16
   15548:	43 ce       	rjmp	.-890    	; 0x151d0 <SS80_Command_State+0xf8>
   1554a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1554c:	9b 85       	ldd	r25, Y+11	; 0x0b
   1554e:	08 17       	cp	r16, r24
   15550:	19 07       	cpc	r17, r25
   15552:	a1 f0       	breq	.+40     	; 0x1557c <SS80_Command_State+0x4a4>
   15554:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15558:	80 ff       	sbrs	r24, 0
   1555a:	10 c0       	rjmp	.+32     	; 0x1557c <SS80_Command_State+0x4a4>
   1555c:	2a 85       	ldd	r18, Y+10	; 0x0a
   1555e:	3b 85       	ldd	r19, Y+11	; 0x0b
   15560:	ed b7       	in	r30, 0x3d	; 61
   15562:	fe b7       	in	r31, 0x3e	; 62
   15564:	37 83       	std	Z+7, r19	; 0x07
   15566:	26 83       	std	Z+6, r18	; 0x06
   15568:	15 83       	std	Z+5, r17	; 0x05
   1556a:	04 83       	std	Z+4, r16	; 0x04
   1556c:	8c e3       	ldi	r24, 0x3C	; 60
   1556e:	93 e2       	ldi	r25, 0x23	; 35
   15570:	a0 e0       	ldi	r26, 0x00	; 0
   15572:	81 83       	std	Z+1, r24	; 0x01
   15574:	92 83       	std	Z+2, r25	; 0x02
   15576:	a3 83       	std	Z+3, r26	; 0x03
   15578:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1557c:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   15580:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   15584:	81 81       	ldd	r24, Z+1	; 0x01
   15586:	90 e0       	ldi	r25, 0x00	; 0
   15588:	0e 94 d6 85 	call	0x10bac	; 0x10bac <gpib_enable_PPR>
   1558c:	88 85       	ldd	r24, Y+8	; 0x08
   1558e:	99 85       	ldd	r25, Y+9	; 0x09
   15590:	88 27       	eor	r24, r24
   15592:	90 7d       	andi	r25, 0xD0	; 208
   15594:	02 c0       	rjmp	.+4      	; 0x1559a <SS80_Command_State+0x4c2>
   15596:	80 e0       	ldi	r24, 0x00	; 0
   15598:	90 e0       	ldi	r25, 0x00	; 0
   1559a:	66 96       	adiw	r28, 0x16	; 22
   1559c:	0f b6       	in	r0, 0x3f	; 63
   1559e:	f8 94       	cli
   155a0:	de bf       	out	0x3e, r29	; 62
   155a2:	0f be       	out	0x3f, r0	; 63
   155a4:	cd bf       	out	0x3d, r28	; 61
   155a6:	df 91       	pop	r29
   155a8:	cf 91       	pop	r28
   155aa:	1f 91       	pop	r17
   155ac:	0f 91       	pop	r16
   155ae:	ff 90       	pop	r15
   155b0:	ef 90       	pop	r14
   155b2:	cf 90       	pop	r12
   155b4:	bf 90       	pop	r11
   155b6:	af 90       	pop	r10
   155b8:	8f 90       	pop	r8
   155ba:	7f 90       	pop	r7
   155bc:	6f 90       	pop	r6
   155be:	4f 90       	pop	r4
   155c0:	3f 90       	pop	r3
   155c2:	2f 90       	pop	r2
   155c4:	08 95       	ret

000155c6 <SS80_cmd_seek>:
   155c6:	a7 e0       	ldi	r26, 0x07	; 7
   155c8:	b0 e0       	ldi	r27, 0x00	; 0
   155ca:	e9 ee       	ldi	r30, 0xE9	; 233
   155cc:	fa ea       	ldi	r31, 0xAA	; 170
   155ce:	0c 94 68 e6 	jmp	0x1ccd0	; 0x1ccd0 <__prologue_saves__+0x4>
   155d2:	c0 91 5c 19 	lds	r28, 0x195C	; 0x80195c <SS80s>
   155d6:	d0 91 5d 19 	lds	r29, 0x195D	; 0x80195d <SS80s+0x1>
   155da:	8f 80       	ldd	r8, Y+7	; 0x07
   155dc:	98 84       	ldd	r9, Y+8	; 0x08
   155de:	a9 84       	ldd	r10, Y+9	; 0x09
   155e0:	ba 84       	ldd	r11, Y+10	; 0x0a
   155e2:	00 91 5e 19 	lds	r16, 0x195E	; 0x80195e <SS80p>
   155e6:	10 91 5f 19 	lds	r17, 0x195F	; 0x80195f <SS80p+0x1>
   155ea:	f8 01       	movw	r30, r16
   155ec:	c2 88       	ldd	r12, Z+18	; 0x12
   155ee:	d3 88       	ldd	r13, Z+19	; 0x13
   155f0:	e1 2c       	mov	r14, r1
   155f2:	f1 2c       	mov	r15, r1
   155f4:	6b 85       	ldd	r22, Y+11	; 0x0b
   155f6:	7c 85       	ldd	r23, Y+12	; 0x0c
   155f8:	8d 85       	ldd	r24, Y+13	; 0x0d
   155fa:	9e 85       	ldd	r25, Y+14	; 0x0e
   155fc:	a7 01       	movw	r20, r14
   155fe:	96 01       	movw	r18, r12
   15600:	0e 94 f9 e5 	call	0x1cbf2	; 0x1cbf2 <__udivmodsi4>
   15604:	da 01       	movw	r26, r20
   15606:	c9 01       	movw	r24, r18
   15608:	88 0d       	add	r24, r8
   1560a:	99 1d       	adc	r25, r9
   1560c:	aa 1d       	adc	r26, r10
   1560e:	bb 1d       	adc	r27, r11
   15610:	f8 01       	movw	r30, r16
   15612:	40 a4       	ldd	r4, Z+40	; 0x28
   15614:	51 a4       	ldd	r5, Z+41	; 0x29
   15616:	62 a4       	ldd	r6, Z+42	; 0x2a
   15618:	73 a4       	ldd	r7, Z+43	; 0x2b
   1561a:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   1561e:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   15622:	48 16       	cp	r4, r24
   15624:	59 06       	cpc	r5, r25
   15626:	6a 06       	cpc	r6, r26
   15628:	7b 06       	cpc	r7, r27
   1562a:	f0 f4       	brcc	.+60     	; 0x15668 <SS80_cmd_seek+0xa2>
   1562c:	81 e0       	ldi	r24, 0x01	; 1
   1562e:	8a 83       	std	Y+2, r24	; 0x02
   15630:	8b 81       	ldd	r24, Y+3	; 0x03
   15632:	9c 81       	ldd	r25, Y+4	; 0x04
   15634:	84 60       	ori	r24, 0x04	; 4
   15636:	9c 83       	std	Y+4, r25	; 0x04
   15638:	8b 83       	std	Y+3, r24	; 0x03
   1563a:	40 ff       	sbrs	r20, 0
   1563c:	31 c0       	rjmp	.+98     	; 0x156a0 <SS80_cmd_seek+0xda>
   1563e:	a2 89       	ldd	r26, Z+18	; 0x12
   15640:	b3 89       	ldd	r27, Z+19	; 0x13
   15642:	a5 01       	movw	r20, r10
   15644:	94 01       	movw	r18, r8
   15646:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__muluhisi3>
   1564a:	ed b7       	in	r30, 0x3d	; 61
   1564c:	fe b7       	in	r31, 0x3e	; 62
   1564e:	64 83       	std	Z+4, r22	; 0x04
   15650:	75 83       	std	Z+5, r23	; 0x05
   15652:	86 83       	std	Z+6, r24	; 0x06
   15654:	97 83       	std	Z+7, r25	; 0x07
   15656:	89 ef       	ldi	r24, 0xF9	; 249
   15658:	91 e2       	ldi	r25, 0x21	; 33
   1565a:	a0 e0       	ldi	r26, 0x00	; 0
   1565c:	81 83       	std	Z+1, r24	; 0x01
   1565e:	92 83       	std	Z+2, r25	; 0x02
   15660:	a3 83       	std	Z+3, r26	; 0x03
   15662:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   15666:	1c c0       	rjmp	.+56     	; 0x156a0 <SS80_cmd_seek+0xda>
   15668:	ca 01       	movw	r24, r20
   1566a:	80 72       	andi	r24, 0x20	; 32
   1566c:	99 27       	eor	r25, r25
   1566e:	45 ff       	sbrs	r20, 5
   15670:	19 c0       	rjmp	.+50     	; 0x156a4 <SS80_cmd_seek+0xde>
   15672:	a5 01       	movw	r20, r10
   15674:	94 01       	movw	r18, r8
   15676:	c7 01       	movw	r24, r14
   15678:	b6 01       	movw	r22, r12
   1567a:	0e 94 b7 e5 	call	0x1cb6e	; 0x1cb6e <__mulsi3>
   1567e:	ed b7       	in	r30, 0x3d	; 61
   15680:	fe b7       	in	r31, 0x3e	; 62
   15682:	64 83       	std	Z+4, r22	; 0x04
   15684:	75 83       	std	Z+5, r23	; 0x05
   15686:	86 83       	std	Z+6, r24	; 0x06
   15688:	97 83       	std	Z+7, r25	; 0x07
   1568a:	85 ee       	ldi	r24, 0xE5	; 229
   1568c:	91 e2       	ldi	r25, 0x21	; 33
   1568e:	a0 e0       	ldi	r26, 0x00	; 0
   15690:	81 83       	std	Z+1, r24	; 0x01
   15692:	92 83       	std	Z+2, r25	; 0x02
   15694:	a3 83       	std	Z+3, r26	; 0x03
   15696:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1569a:	80 e0       	ldi	r24, 0x00	; 0
   1569c:	90 e0       	ldi	r25, 0x00	; 0
   1569e:	02 c0       	rjmp	.+4      	; 0x156a4 <SS80_cmd_seek+0xde>
   156a0:	81 e0       	ldi	r24, 0x01	; 1
   156a2:	90 e0       	ldi	r25, 0x00	; 0
   156a4:	cd b7       	in	r28, 0x3d	; 61
   156a6:	de b7       	in	r29, 0x3e	; 62
   156a8:	27 96       	adiw	r28, 0x07	; 7
   156aa:	e0 e1       	ldi	r30, 0x10	; 16
   156ac:	0c 94 84 e6 	jmp	0x1cd08	; 0x1cd08 <__epilogue_restores__+0x4>

000156b0 <SS80_locate_and_write>:
   156b0:	a3 e1       	ldi	r26, 0x13	; 19
   156b2:	b0 e0       	ldi	r27, 0x00	; 0
   156b4:	ee e5       	ldi	r30, 0x5E	; 94
   156b6:	fb ea       	ldi	r31, 0xAB	; 171
   156b8:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
   156bc:	00 91 5c 19 	lds	r16, 0x195C	; 0x80195c <SS80s>
   156c0:	10 91 5d 19 	lds	r17, 0x195D	; 0x80195d <SS80s+0x1>
   156c4:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <SS80p>
   156c8:	90 91 5f 19 	lds	r25, 0x195F	; 0x80195f <SS80p+0x1>
   156cc:	fc 01       	movw	r30, r24
   156ce:	a2 89       	ldd	r26, Z+18	; 0x12
   156d0:	b3 89       	ldd	r27, Z+19	; 0x13
   156d2:	f8 01       	movw	r30, r16
   156d4:	27 81       	ldd	r18, Z+7	; 0x07
   156d6:	30 85       	ldd	r19, Z+8	; 0x08
   156d8:	41 85       	ldd	r20, Z+9	; 0x09
   156da:	52 85       	ldd	r21, Z+10	; 0x0a
   156dc:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__muluhisi3>
   156e0:	4b 01       	movw	r8, r22
   156e2:	5c 01       	movw	r10, r24
   156e4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   156e8:	85 ff       	sbrs	r24, 5
   156ea:	16 c0       	rjmp	.+44     	; 0x15718 <SS80_locate_and_write+0x68>
   156ec:	83 85       	ldd	r24, Z+11	; 0x0b
   156ee:	94 85       	ldd	r25, Z+12	; 0x0c
   156f0:	a5 85       	ldd	r26, Z+13	; 0x0d
   156f2:	b6 85       	ldd	r27, Z+14	; 0x0e
   156f4:	ed b7       	in	r30, 0x3d	; 61
   156f6:	fe b7       	in	r31, 0x3e	; 62
   156f8:	80 87       	std	Z+8, r24	; 0x08
   156fa:	91 87       	std	Z+9, r25	; 0x09
   156fc:	a2 87       	std	Z+10, r26	; 0x0a
   156fe:	b3 87       	std	Z+11, r27	; 0x0b
   15700:	84 82       	std	Z+4, r8	; 0x04
   15702:	95 82       	std	Z+5, r9	; 0x05
   15704:	a6 82       	std	Z+6, r10	; 0x06
   15706:	b7 82       	std	Z+7, r11	; 0x07
   15708:	8c e7       	ldi	r24, 0x7C	; 124
   1570a:	97 e2       	ldi	r25, 0x27	; 39
   1570c:	a0 e0       	ldi	r26, 0x00	; 0
   1570e:	81 83       	std	Z+1, r24	; 0x01
   15710:	92 83       	std	Z+2, r25	; 0x02
   15712:	a3 83       	std	Z+3, r26	; 0x03
   15714:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   15718:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   1571c:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15720:	12 82       	std	Z+2, r1	; 0x02
   15722:	54 98       	cbi	0x0a, 4	; 10
   15724:	4c 99       	sbic	0x09, 4	; 9
   15726:	03 c0       	rjmp	.+6      	; 0x1572e <SS80_locate_and_write+0x7e>
   15728:	80 e0       	ldi	r24, 0x00	; 0
   1572a:	90 e1       	ldi	r25, 0x10	; 16
   1572c:	4f c1       	rjmp	.+670    	; 0x159cc <SS80_locate_and_write+0x31c>
   1572e:	4b df       	rcall	.-362    	; 0x155c6 <SS80_cmd_seek>
   15730:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15734:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15738:	89 2b       	or	r24, r25
   1573a:	41 f0       	breq	.+16     	; 0x1574c <SS80_locate_and_write+0x9c>
   1573c:	83 81       	ldd	r24, Z+3	; 0x03
   1573e:	94 81       	ldd	r25, Z+4	; 0x04
   15740:	82 60       	ori	r24, 0x02	; 2
   15742:	94 83       	std	Z+4, r25	; 0x04
   15744:	83 83       	std	Z+3, r24	; 0x03
   15746:	01 e0       	ldi	r16, 0x01	; 1
   15748:	10 e0       	ldi	r17, 0x00	; 0
   1574a:	02 c0       	rjmp	.+4      	; 0x15750 <SS80_locate_and_write+0xa0>
   1574c:	00 e0       	ldi	r16, 0x00	; 0
   1574e:	10 e0       	ldi	r17, 0x00	; 0
   15750:	23 84       	ldd	r2, Z+11	; 0x0b
   15752:	34 84       	ldd	r3, Z+12	; 0x0c
   15754:	1d 86       	std	Y+13, r1	; 0x0d
   15756:	1c 86       	std	Y+12, r1	; 0x0c
   15758:	41 2c       	mov	r4, r1
   1575a:	51 2c       	mov	r5, r1
   1575c:	32 01       	movw	r6, r4
   1575e:	8f e2       	ldi	r24, 0x2F	; 47
   15760:	97 e2       	ldi	r25, 0x27	; 39
   15762:	9c 01       	movw	r18, r24
   15764:	40 e0       	ldi	r20, 0x00	; 0
   15766:	2e 87       	std	Y+14, r18	; 0x0e
   15768:	3f 87       	std	Y+15, r19	; 0x0f
   1576a:	48 8b       	std	Y+16, r20	; 0x10
   1576c:	85 e5       	ldi	r24, 0x55	; 85
   1576e:	97 e2       	ldi	r25, 0x27	; 39
   15770:	9c 01       	movw	r18, r24
   15772:	40 e0       	ldi	r20, 0x00	; 0
   15774:	29 8b       	std	Y+17, r18	; 0x11
   15776:	3a 8b       	std	Y+18, r19	; 0x12
   15778:	4b 8b       	std	Y+19, r20	; 0x13
   1577a:	12 14       	cp	r1, r2
   1577c:	13 04       	cpc	r1, r3
   1577e:	0c f0       	brlt	.+2      	; 0x15782 <SS80_locate_and_write+0xd2>
   15780:	f5 c0       	rjmp	.+490    	; 0x1596c <SS80_locate_and_write+0x2bc>
   15782:	54 98       	cbi	0x0a, 4	; 10
   15784:	4c 9b       	sbis	0x09, 4	; 9
   15786:	d0 cf       	rjmp	.-96     	; 0x15728 <SS80_locate_and_write+0x78>
   15788:	71 01       	movw	r14, r2
   1578a:	31 e0       	ldi	r19, 0x01	; 1
   1578c:	23 16       	cp	r2, r19
   1578e:	33 06       	cpc	r3, r19
   15790:	1c f0       	brlt	.+6      	; 0x15798 <SS80_locate_and_write+0xe8>
   15792:	e1 2c       	mov	r14, r1
   15794:	ff 24       	eor	r15, r15
   15796:	f3 94       	inc	r15
   15798:	e0 ee       	ldi	r30, 0xE0	; 224
   1579a:	fc e1       	ldi	r31, 0x1C	; 28
   1579c:	20 e0       	ldi	r18, 0x00	; 0
   1579e:	32 e0       	ldi	r19, 0x02	; 2
   157a0:	11 92       	st	Z+, r1
   157a2:	21 50       	subi	r18, 0x01	; 1
   157a4:	30 40       	sbci	r19, 0x00	; 0
   157a6:	e1 f7       	brne	.-8      	; 0x157a0 <SS80_locate_and_write+0xf0>
   157a8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   157ac:	87 fd       	sbrc	r24, 7
   157ae:	0e 94 fc 84 	call	0x109f8	; 0x109f8 <gpib_timer_elapsed_begin>
   157b2:	ae 01       	movw	r20, r28
   157b4:	44 5f       	subi	r20, 0xF4	; 244
   157b6:	5f 4f       	sbci	r21, 0xFF	; 255
   157b8:	b7 01       	movw	r22, r14
   157ba:	80 ee       	ldi	r24, 0xE0	; 224
   157bc:	9c e1       	ldi	r25, 0x1C	; 28
   157be:	0e 94 64 8a 	call	0x114c8	; 0x114c8 <gpib_read_str>
   157c2:	6c 01       	movw	r12, r24
   157c4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   157c8:	87 ff       	sbrs	r24, 7
   157ca:	04 c0       	rjmp	.+8      	; 0x157d4 <SS80_locate_and_write+0x124>
   157cc:	8e e7       	ldi	r24, 0x7E	; 126
   157ce:	90 e1       	ldi	r25, 0x10	; 16
   157d0:	0e 94 0e 85 	call	0x10a1c	; 0x10a1c <gpib_timer_elapsed_end>
   157d4:	ce 14       	cp	r12, r14
   157d6:	df 04       	cpc	r13, r15
   157d8:	39 f1       	breq	.+78     	; 0x15828 <SS80_locate_and_write+0x178>
   157da:	8c 85       	ldd	r24, Y+12	; 0x0c
   157dc:	9d 85       	ldd	r25, Y+13	; 0x0d
   157de:	9c 01       	movw	r18, r24
   157e0:	22 27       	eor	r18, r18
   157e2:	30 7d       	andi	r19, 0xD0	; 208
   157e4:	23 2b       	or	r18, r19
   157e6:	d1 f0       	breq	.+52     	; 0x1581c <SS80_locate_and_write+0x16c>
   157e8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   157ec:	80 ff       	sbrs	r24, 0
   157ee:	0a c0       	rjmp	.+20     	; 0x15804 <SS80_locate_and_write+0x154>
   157f0:	89 e6       	ldi	r24, 0x69	; 105
   157f2:	97 e2       	ldi	r25, 0x27	; 39
   157f4:	a0 e0       	ldi	r26, 0x00	; 0
   157f6:	ed b7       	in	r30, 0x3d	; 61
   157f8:	fe b7       	in	r31, 0x3e	; 62
   157fa:	81 83       	std	Z+1, r24	; 0x01
   157fc:	92 83       	std	Z+2, r25	; 0x02
   157fe:	a3 83       	std	Z+3, r26	; 0x03
   15800:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   15804:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15808:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   1580c:	83 81       	ldd	r24, Z+3	; 0x03
   1580e:	94 81       	ldd	r25, Z+4	; 0x04
   15810:	82 60       	ori	r24, 0x02	; 2
   15812:	94 83       	std	Z+4, r25	; 0x04
   15814:	83 83       	std	Z+3, r24	; 0x03
   15816:	81 e0       	ldi	r24, 0x01	; 1
   15818:	82 83       	std	Z+2, r24	; 0x02
   1581a:	99 c0       	rjmp	.+306    	; 0x1594e <SS80_locate_and_write+0x29e>
   1581c:	c1 14       	cp	r12, r1
   1581e:	d1 04       	cpc	r13, r1
   15820:	09 f0       	breq	.+2      	; 0x15824 <SS80_locate_and_write+0x174>
   15822:	d0 c0       	rjmp	.+416    	; 0x159c4 <SS80_locate_and_write+0x314>
   15824:	90 fd       	sbrc	r25, 0
   15826:	93 c0       	rjmp	.+294    	; 0x1594e <SS80_locate_and_write+0x29e>
   15828:	01 15       	cp	r16, r1
   1582a:	11 05       	cpc	r17, r1
   1582c:	09 f0       	breq	.+2      	; 0x15830 <SS80_locate_and_write+0x180>
   1582e:	84 c0       	rjmp	.+264    	; 0x15938 <SS80_locate_and_write+0x288>
   15830:	c1 14       	cp	r12, r1
   15832:	d1 04       	cpc	r13, r1
   15834:	09 f4       	brne	.+2      	; 0x15838 <SS80_locate_and_write+0x188>
   15836:	82 c0       	rjmp	.+260    	; 0x1593c <SS80_locate_and_write+0x28c>
   15838:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1583c:	86 fd       	sbrc	r24, 6
   1583e:	0e 94 fc 84 	call	0x109f8	; 0x109f8 <gpib_timer_elapsed_begin>
   15842:	e0 90 5c 19 	lds	r14, 0x195C	; 0x80195c <SS80s>
   15846:	f0 90 5d 19 	lds	r15, 0x195D	; 0x80195d <SS80s+0x1>
   1584a:	f3 e0       	ldi	r31, 0x03	; 3
   1584c:	ef 0e       	add	r14, r31
   1584e:	f1 1c       	adc	r15, r1
   15850:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   15854:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   15858:	86 01       	movw	r16, r12
   1585a:	20 ee       	ldi	r18, 0xE0	; 224
   1585c:	3c e1       	ldi	r19, 0x1C	; 28
   1585e:	b5 01       	movw	r22, r10
   15860:	a4 01       	movw	r20, r8
   15862:	82 81       	ldd	r24, Z+2	; 0x02
   15864:	93 81       	ldd	r25, Z+3	; 0x03
   15866:	0e 94 a5 84 	call	0x1094a	; 0x1094a <dbf_open_write>
   1586a:	7c 01       	movw	r14, r24
   1586c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15870:	86 ff       	sbrs	r24, 6
   15872:	04 c0       	rjmp	.+8      	; 0x1587c <SS80_locate_and_write+0x1cc>
   15874:	89 e8       	ldi	r24, 0x89	; 137
   15876:	90 e1       	ldi	r25, 0x10	; 16
   15878:	0e 94 0e 85 	call	0x10a1c	; 0x10a1c <gpib_timer_elapsed_end>
   1587c:	ce 14       	cp	r12, r14
   1587e:	df 04       	cpc	r13, r15
   15880:	39 f1       	breq	.+78     	; 0x158d0 <SS80_locate_and_write+0x220>
   15882:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15886:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   1588a:	83 81       	ldd	r24, Z+3	; 0x03
   1588c:	94 81       	ldd	r25, Z+4	; 0x04
   1588e:	82 60       	ori	r24, 0x02	; 2
   15890:	94 83       	std	Z+4, r25	; 0x04
   15892:	83 83       	std	Z+3, r24	; 0x03
   15894:	0e 94 95 6f 	call	0xdf2a	; 0xdf2a <mmc_wp_status>
   15898:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   1589c:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   158a0:	89 2b       	or	r24, r25
   158a2:	29 f0       	breq	.+10     	; 0x158ae <SS80_locate_and_write+0x1fe>
   158a4:	83 81       	ldd	r24, Z+3	; 0x03
   158a6:	94 81       	ldd	r25, Z+4	; 0x04
   158a8:	88 60       	ori	r24, 0x08	; 8
   158aa:	94 83       	std	Z+4, r25	; 0x04
   158ac:	83 83       	std	Z+3, r24	; 0x03
   158ae:	21 e0       	ldi	r18, 0x01	; 1
   158b0:	22 83       	std	Z+2, r18	; 0x02
   158b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   158b6:	80 ff       	sbrs	r24, 0
   158b8:	27 c0       	rjmp	.+78     	; 0x15908 <SS80_locate_and_write+0x258>
   158ba:	89 89       	ldd	r24, Y+17	; 0x11
   158bc:	9a 89       	ldd	r25, Y+18	; 0x12
   158be:	ab 89       	ldd	r26, Y+19	; 0x13
   158c0:	ed b7       	in	r30, 0x3d	; 61
   158c2:	fe b7       	in	r31, 0x3e	; 62
   158c4:	81 83       	std	Z+1, r24	; 0x01
   158c6:	92 83       	std	Z+2, r25	; 0x02
   158c8:	a3 83       	std	Z+3, r26	; 0x03
   158ca:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   158ce:	1c c0       	rjmp	.+56     	; 0x15908 <SS80_locate_and_write+0x258>
   158d0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   158d4:	85 ff       	sbrs	r24, 5
   158d6:	0c c0       	rjmp	.+24     	; 0x158f0 <SS80_locate_and_write+0x240>
   158d8:	ed b7       	in	r30, 0x3d	; 61
   158da:	fe b7       	in	r31, 0x3e	; 62
   158dc:	d5 82       	std	Z+5, r13	; 0x05
   158de:	c4 82       	std	Z+4, r12	; 0x04
   158e0:	2e 85       	ldd	r18, Y+14	; 0x0e
   158e2:	3f 85       	ldd	r19, Y+15	; 0x0f
   158e4:	48 89       	ldd	r20, Y+16	; 0x10
   158e6:	21 83       	std	Z+1, r18	; 0x01
   158e8:	32 83       	std	Z+2, r19	; 0x02
   158ea:	43 83       	std	Z+3, r20	; 0x03
   158ec:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   158f0:	c6 01       	movw	r24, r12
   158f2:	0d 2c       	mov	r0, r13
   158f4:	00 0c       	add	r0, r0
   158f6:	aa 0b       	sbc	r26, r26
   158f8:	bb 0b       	sbc	r27, r27
   158fa:	88 0e       	add	r8, r24
   158fc:	99 1e       	adc	r9, r25
   158fe:	aa 1e       	adc	r10, r26
   15900:	bb 1e       	adc	r11, r27
   15902:	00 e0       	ldi	r16, 0x00	; 0
   15904:	10 e0       	ldi	r17, 0x00	; 0
   15906:	05 c0       	rjmp	.+10     	; 0x15912 <SS80_locate_and_write+0x262>
   15908:	ec 14       	cp	r14, r12
   1590a:	fd 04       	cpc	r15, r13
   1590c:	64 f0       	brlt	.+24     	; 0x15926 <SS80_locate_and_write+0x276>
   1590e:	01 e0       	ldi	r16, 0x01	; 1
   15910:	10 e0       	ldi	r17, 0x00	; 0
   15912:	c7 01       	movw	r24, r14
   15914:	0f 2c       	mov	r0, r15
   15916:	00 0c       	add	r0, r0
   15918:	aa 0b       	sbc	r26, r26
   1591a:	bb 0b       	sbc	r27, r27
   1591c:	48 0e       	add	r4, r24
   1591e:	59 1e       	adc	r5, r25
   15920:	6a 1e       	adc	r6, r26
   15922:	7b 1e       	adc	r7, r27
   15924:	0b c0       	rjmp	.+22     	; 0x1593c <SS80_locate_and_write+0x28c>
   15926:	c6 01       	movw	r24, r12
   15928:	0d 2c       	mov	r0, r13
   1592a:	00 0c       	add	r0, r0
   1592c:	aa 0b       	sbc	r26, r26
   1592e:	bb 0b       	sbc	r27, r27
   15930:	48 0e       	add	r4, r24
   15932:	59 1e       	adc	r5, r25
   15934:	6a 1e       	adc	r6, r26
   15936:	7b 1e       	adc	r7, r27
   15938:	01 e0       	ldi	r16, 0x01	; 1
   1593a:	10 e0       	ldi	r17, 0x00	; 0
   1593c:	2c 18       	sub	r2, r12
   1593e:	3d 08       	sbc	r3, r13
   15940:	8c 85       	ldd	r24, Y+12	; 0x0c
   15942:	9d 85       	ldd	r25, Y+13	; 0x0d
   15944:	90 ff       	sbrs	r25, 0
   15946:	19 cf       	rjmp	.-462    	; 0x1577a <SS80_locate_and_write+0xca>
   15948:	12 14       	cp	r1, r2
   1594a:	13 04       	cpc	r1, r3
   1594c:	7c f4       	brge	.+30     	; 0x1596c <SS80_locate_and_write+0x2bc>
   1594e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15952:	80 ff       	sbrs	r24, 0
   15954:	1d c0       	rjmp	.+58     	; 0x15990 <SS80_locate_and_write+0x2e0>
   15956:	87 e0       	ldi	r24, 0x07	; 7
   15958:	97 e2       	ldi	r25, 0x27	; 39
   1595a:	a0 e0       	ldi	r26, 0x00	; 0
   1595c:	ed b7       	in	r30, 0x3d	; 61
   1595e:	fe b7       	in	r31, 0x3e	; 62
   15960:	81 83       	std	Z+1, r24	; 0x01
   15962:	92 83       	std	Z+2, r25	; 0x02
   15964:	a3 83       	std	Z+3, r26	; 0x03
   15966:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1596a:	12 c0       	rjmp	.+36     	; 0x15990 <SS80_locate_and_write+0x2e0>
   1596c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15970:	85 ff       	sbrs	r24, 5
   15972:	0e c0       	rjmp	.+28     	; 0x15990 <SS80_locate_and_write+0x2e0>
   15974:	ed b7       	in	r30, 0x3d	; 61
   15976:	fe b7       	in	r31, 0x3e	; 62
   15978:	44 82       	std	Z+4, r4	; 0x04
   1597a:	55 82       	std	Z+5, r5	; 0x05
   1597c:	66 82       	std	Z+6, r6	; 0x06
   1597e:	77 82       	std	Z+7, r7	; 0x07
   15980:	8c ed       	ldi	r24, 0xDC	; 220
   15982:	96 e2       	ldi	r25, 0x26	; 38
   15984:	a0 e0       	ldi	r26, 0x00	; 0
   15986:	81 83       	std	Z+1, r24	; 0x01
   15988:	92 83       	std	Z+2, r25	; 0x02
   1598a:	a3 83       	std	Z+3, r26	; 0x03
   1598c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   15990:	00 91 5c 19 	lds	r16, 0x195C	; 0x80195c <SS80s>
   15994:	10 91 5d 19 	lds	r17, 0x195D	; 0x80195d <SS80s+0x1>
   15998:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   1599c:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   159a0:	22 89       	ldd	r18, Z+18	; 0x12
   159a2:	33 89       	ldd	r19, Z+19	; 0x13
   159a4:	40 e0       	ldi	r20, 0x00	; 0
   159a6:	50 e0       	ldi	r21, 0x00	; 0
   159a8:	c5 01       	movw	r24, r10
   159aa:	b4 01       	movw	r22, r8
   159ac:	0e 94 f9 e5 	call	0x1cbf2	; 0x1cbf2 <__udivmodsi4>
   159b0:	f8 01       	movw	r30, r16
   159b2:	27 83       	std	Z+7, r18	; 0x07
   159b4:	30 87       	std	Z+8, r19	; 0x08
   159b6:	41 87       	std	Z+9, r20	; 0x09
   159b8:	52 87       	std	Z+10, r21	; 0x0a
   159ba:	8c 85       	ldd	r24, Y+12	; 0x0c
   159bc:	9d 85       	ldd	r25, Y+13	; 0x0d
   159be:	88 27       	eor	r24, r24
   159c0:	90 7d       	andi	r25, 0xD0	; 208
   159c2:	04 c0       	rjmp	.+8      	; 0x159cc <SS80_locate_and_write+0x31c>
   159c4:	01 2b       	or	r16, r17
   159c6:	09 f4       	brne	.+2      	; 0x159ca <SS80_locate_and_write+0x31a>
   159c8:	37 cf       	rjmp	.-402    	; 0x15838 <SS80_locate_and_write+0x188>
   159ca:	b6 cf       	rjmp	.-148    	; 0x15938 <SS80_locate_and_write+0x288>
   159cc:	63 96       	adiw	r28, 0x13	; 19
   159ce:	e2 e1       	ldi	r30, 0x12	; 18
   159d0:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

000159d4 <SS80_Report>:
   159d4:	a8 e0       	ldi	r26, 0x08	; 8
   159d6:	b0 e0       	ldi	r27, 0x00	; 0
   159d8:	e0 ef       	ldi	r30, 0xF0	; 240
   159da:	fc ea       	ldi	r31, 0xAC	; 172
   159dc:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
   159e0:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   159e4:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   159e8:	82 81       	ldd	r24, Z+2	; 0x02
   159ea:	88 87       	std	Y+8, r24	; 0x08
   159ec:	80 e0       	ldi	r24, 0x00	; 0
   159ee:	91 e0       	ldi	r25, 0x01	; 1
   159f0:	9f 83       	std	Y+7, r25	; 0x07
   159f2:	8e 83       	std	Y+6, r24	; 0x06
   159f4:	ae 01       	movw	r20, r28
   159f6:	4a 5f       	subi	r20, 0xFA	; 250
   159f8:	5f 4f       	sbci	r21, 0xFF	; 255
   159fa:	61 e0       	ldi	r22, 0x01	; 1
   159fc:	70 e0       	ldi	r23, 0x00	; 0
   159fe:	ce 01       	movw	r24, r28
   15a00:	08 96       	adiw	r24, 0x08	; 8
   15a02:	0e 94 06 8b 	call	0x1160c	; 0x1160c <gpib_write_str>
   15a06:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15a0a:	01 97       	sbiw	r24, 0x01	; 1
   15a0c:	89 f0       	breq	.+34     	; 0x15a30 <SS80_Report+0x5c>
   15a0e:	20 ff       	sbrs	r18, 0
   15a10:	0a c0       	rjmp	.+20     	; 0x15a26 <SS80_Report+0x52>
   15a12:	8b ec       	ldi	r24, 0xCB	; 203
   15a14:	91 e2       	ldi	r25, 0x21	; 33
   15a16:	a0 e0       	ldi	r26, 0x00	; 0
   15a18:	ed b7       	in	r30, 0x3d	; 61
   15a1a:	fe b7       	in	r31, 0x3e	; 62
   15a1c:	81 83       	std	Z+1, r24	; 0x01
   15a1e:	92 83       	std	Z+2, r25	; 0x02
   15a20:	a3 83       	std	Z+3, r26	; 0x03
   15a22:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   15a26:	8e 81       	ldd	r24, Y+6	; 0x06
   15a28:	9f 81       	ldd	r25, Y+7	; 0x07
   15a2a:	88 27       	eor	r24, r24
   15a2c:	90 7d       	andi	r25, 0xD0	; 208
   15a2e:	1b c0       	rjmp	.+54     	; 0x15a66 <SS80_Report+0x92>
   15a30:	25 ff       	sbrs	r18, 5
   15a32:	12 c0       	rjmp	.+36     	; 0x15a58 <SS80_Report+0x84>
   15a34:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15a38:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15a3c:	82 81       	ldd	r24, Z+2	; 0x02
   15a3e:	90 e0       	ldi	r25, 0x00	; 0
   15a40:	ed b7       	in	r30, 0x3d	; 61
   15a42:	fe b7       	in	r31, 0x3e	; 62
   15a44:	95 83       	std	Z+5, r25	; 0x05
   15a46:	84 83       	std	Z+4, r24	; 0x04
   15a48:	88 eb       	ldi	r24, 0xB8	; 184
   15a4a:	91 e2       	ldi	r25, 0x21	; 33
   15a4c:	a0 e0       	ldi	r26, 0x00	; 0
   15a4e:	81 83       	std	Z+1, r24	; 0x01
   15a50:	92 83       	std	Z+2, r25	; 0x02
   15a52:	a3 83       	std	Z+3, r26	; 0x03
   15a54:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   15a58:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15a5c:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15a60:	12 82       	std	Z+2, r1	; 0x02
   15a62:	80 e0       	ldi	r24, 0x00	; 0
   15a64:	90 e0       	ldi	r25, 0x00	; 0
   15a66:	28 96       	adiw	r28, 0x08	; 8
   15a68:	e2 e0       	ldi	r30, 0x02	; 2
   15a6a:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00015a6e <Clear_Common>:
   15a6e:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15a72:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15a76:	25 81       	ldd	r18, Z+5	; 0x05
   15a78:	30 e0       	ldi	r19, 0x00	; 0
   15a7a:	28 17       	cp	r18, r24
   15a7c:	39 07       	cpc	r19, r25
   15a7e:	19 f0       	breq	.+6      	; 0x15a86 <Clear_Common+0x18>
   15a80:	0f 97       	sbiw	r24, 0x0f	; 15
   15a82:	99 f4       	brne	.+38     	; 0x15aaa <Clear_Common+0x3c>
   15a84:	03 c0       	rjmp	.+6      	; 0x15a8c <Clear_Common+0x1e>
   15a86:	2f 30       	cpi	r18, 0x0F	; 15
   15a88:	31 05       	cpc	r19, r1
   15a8a:	09 f4       	brne	.+2      	; 0x15a8e <Clear_Common+0x20>
   15a8c:	15 82       	std	Z+5, r1	; 0x05
   15a8e:	16 82       	std	Z+6, r1	; 0x06
   15a90:	17 82       	std	Z+7, r1	; 0x07
   15a92:	10 86       	std	Z+8, r1	; 0x08
   15a94:	11 86       	std	Z+9, r1	; 0x09
   15a96:	12 86       	std	Z+10, r1	; 0x0a
   15a98:	13 86       	std	Z+11, r1	; 0x0b
   15a9a:	14 86       	std	Z+12, r1	; 0x0c
   15a9c:	15 86       	std	Z+13, r1	; 0x0d
   15a9e:	16 86       	std	Z+14, r1	; 0x0e
   15aa0:	11 82       	std	Z+1, r1	; 0x01
   15aa2:	10 82       	st	Z, r1
   15aa4:	14 82       	std	Z+4, r1	; 0x04
   15aa6:	13 82       	std	Z+3, r1	; 0x03
   15aa8:	12 82       	std	Z+2, r1	; 0x02
   15aaa:	08 95       	ret

00015aac <SS80_init>:
   15aac:	cf 92       	push	r12
   15aae:	df 92       	push	r13
   15ab0:	ef 92       	push	r14
   15ab2:	0f 93       	push	r16
   15ab4:	1f 93       	push	r17
   15ab6:	cf 93       	push	r28
   15ab8:	df 93       	push	r29
   15aba:	00 d0       	rcall	.+0      	; 0x15abc <SS80_init+0x10>
   15abc:	00 d0       	rcall	.+0      	; 0x15abe <SS80_init+0x12>
   15abe:	1f 92       	push	r1
   15ac0:	03 e6       	ldi	r16, 0x63	; 99
   15ac2:	1f e1       	ldi	r17, 0x1F	; 31
   15ac4:	cb e0       	ldi	r28, 0x0B	; 11
   15ac6:	d2 e0       	ldi	r29, 0x02	; 2
   15ac8:	85 e8       	ldi	r24, 0x85	; 133
   15aca:	98 e2       	ldi	r25, 0x28	; 40
   15acc:	6c 01       	movw	r12, r24
   15ace:	e1 2c       	mov	r14, r1
   15ad0:	f8 01       	movw	r30, r16
   15ad2:	80 81       	ld	r24, Z
   15ad4:	83 30       	cpi	r24, 0x03	; 3
   15ad6:	29 f5       	brne	.+74     	; 0x15b22 <SS80_init+0x76>
   15ad8:	8c 2f       	mov	r24, r28
   15ada:	0e 94 c4 96 	call	0x12d88	; 0x12d88 <set_active_device>
   15ade:	88 23       	and	r24, r24
   15ae0:	01 f1       	breq	.+64     	; 0x15b22 <SS80_init+0x76>
   15ae2:	8f e0       	ldi	r24, 0x0F	; 15
   15ae4:	90 e0       	ldi	r25, 0x00	; 0
   15ae6:	c3 df       	rcall	.-122    	; 0x15a6e <Clear_Common>
   15ae8:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15aec:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15af0:	d2 83       	std	Z+2, r29	; 0x02
   15af2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15af6:	85 ff       	sbrs	r24, 5
   15af8:	0c c0       	rjmp	.+24     	; 0x15b12 <SS80_init+0x66>
   15afa:	f8 01       	movw	r30, r16
   15afc:	81 81       	ldd	r24, Z+1	; 0x01
   15afe:	90 e0       	ldi	r25, 0x00	; 0
   15b00:	ed b7       	in	r30, 0x3d	; 61
   15b02:	fe b7       	in	r31, 0x3e	; 62
   15b04:	95 83       	std	Z+5, r25	; 0x05
   15b06:	84 83       	std	Z+4, r24	; 0x04
   15b08:	c1 82       	std	Z+1, r12	; 0x01
   15b0a:	d2 82       	std	Z+2, r13	; 0x02
   15b0c:	e3 82       	std	Z+3, r14	; 0x03
   15b0e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   15b12:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   15b16:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   15b1a:	81 81       	ldd	r24, Z+1	; 0x01
   15b1c:	90 e0       	ldi	r25, 0x00	; 0
   15b1e:	0e 94 0c 86 	call	0x10c18	; 0x10c18 <gpib_disable_PPR>
   15b22:	0b 50       	subi	r16, 0x0B	; 11
   15b24:	11 09       	sbc	r17, r1
   15b26:	c1 50       	subi	r28, 0x01	; 1
   15b28:	98 f6       	brcc	.-90     	; 0x15ad0 <SS80_init+0x24>
   15b2a:	0f 90       	pop	r0
   15b2c:	0f 90       	pop	r0
   15b2e:	0f 90       	pop	r0
   15b30:	0f 90       	pop	r0
   15b32:	0f 90       	pop	r0
   15b34:	df 91       	pop	r29
   15b36:	cf 91       	pop	r28
   15b38:	1f 91       	pop	r17
   15b3a:	0f 91       	pop	r16
   15b3c:	ef 90       	pop	r14
   15b3e:	df 90       	pop	r13
   15b40:	cf 90       	pop	r12
   15b42:	08 95       	ret

00015b44 <SS80_Channel_Independent_Clear>:
   15b44:	94 df       	rcall	.-216    	; 0x15a6e <Clear_Common>
   15b46:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   15b4a:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   15b4e:	81 81       	ldd	r24, Z+1	; 0x01
   15b50:	90 e0       	ldi	r25, 0x00	; 0
   15b52:	0e 94 d6 85 	call	0x10bac	; 0x10bac <gpib_enable_PPR>
   15b56:	80 e0       	ldi	r24, 0x00	; 0
   15b58:	90 e0       	ldi	r25, 0x00	; 0
   15b5a:	08 95       	ret

00015b5c <SS80_Universal_Device_Clear>:
   15b5c:	8f e0       	ldi	r24, 0x0F	; 15
   15b5e:	90 e0       	ldi	r25, 0x00	; 0
   15b60:	86 df       	rcall	.-244    	; 0x15a6e <Clear_Common>
   15b62:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   15b66:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   15b6a:	81 81       	ldd	r24, Z+1	; 0x01
   15b6c:	90 e0       	ldi	r25, 0x00	; 0
   15b6e:	0e 94 d6 85 	call	0x10bac	; 0x10bac <gpib_enable_PPR>
   15b72:	80 e0       	ldi	r24, 0x00	; 0
   15b74:	90 e0       	ldi	r25, 0x00	; 0
   15b76:	08 95       	ret

00015b78 <SS80_Selected_Device_Clear>:
   15b78:	cf 93       	push	r28
   15b7a:	df 93       	push	r29
   15b7c:	00 d0       	rcall	.+0      	; 0x15b7e <SS80_Selected_Device_Clear+0x6>
   15b7e:	1f 92       	push	r1
   15b80:	ec 01       	movw	r28, r24
   15b82:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15b86:	85 ff       	sbrs	r24, 5
   15b88:	0a c0       	rjmp	.+20     	; 0x15b9e <SS80_Selected_Device_Clear+0x26>
   15b8a:	8c ea       	ldi	r24, 0xAC	; 172
   15b8c:	91 e2       	ldi	r25, 0x21	; 33
   15b8e:	a0 e0       	ldi	r26, 0x00	; 0
   15b90:	ed b7       	in	r30, 0x3d	; 61
   15b92:	fe b7       	in	r31, 0x3e	; 62
   15b94:	81 83       	std	Z+1, r24	; 0x01
   15b96:	92 83       	std	Z+2, r25	; 0x02
   15b98:	a3 83       	std	Z+3, r26	; 0x03
   15b9a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   15b9e:	ce 01       	movw	r24, r28
   15ba0:	66 df       	rcall	.-308    	; 0x15a6e <Clear_Common>
   15ba2:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   15ba6:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   15baa:	81 81       	ldd	r24, Z+1	; 0x01
   15bac:	90 e0       	ldi	r25, 0x00	; 0
   15bae:	0e 94 d6 85 	call	0x10bac	; 0x10bac <gpib_enable_PPR>
   15bb2:	80 e0       	ldi	r24, 0x00	; 0
   15bb4:	90 e0       	ldi	r25, 0x00	; 0
   15bb6:	cd b7       	in	r28, 0x3d	; 61
   15bb8:	de b7       	in	r29, 0x3e	; 62
   15bba:	23 96       	adiw	r28, 0x03	; 3
   15bbc:	e2 e0       	ldi	r30, 0x02	; 2
   15bbe:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00015bc2 <SS80_Amigo_Clear>:
   15bc2:	a6 e0       	ldi	r26, 0x06	; 6
   15bc4:	b0 e0       	ldi	r27, 0x00	; 0
   15bc6:	e7 ee       	ldi	r30, 0xE7	; 231
   15bc8:	fd ea       	ldi	r31, 0xAD	; 173
   15bca:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
   15bce:	1d 82       	std	Y+5, r1	; 0x05
   15bd0:	1c 82       	std	Y+4, r1	; 0x04
   15bd2:	ae 01       	movw	r20, r28
   15bd4:	4c 5f       	subi	r20, 0xFC	; 252
   15bd6:	5f 4f       	sbci	r21, 0xFF	; 255
   15bd8:	61 e0       	ldi	r22, 0x01	; 1
   15bda:	70 e0       	ldi	r23, 0x00	; 0
   15bdc:	ce 01       	movw	r24, r28
   15bde:	06 96       	adiw	r24, 0x06	; 6
   15be0:	0e 94 64 8a 	call	0x114c8	; 0x114c8 <gpib_read_str>
   15be4:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15be8:	01 97       	sbiw	r24, 0x01	; 1
   15bea:	89 f0       	breq	.+34     	; 0x15c0e <SS80_Amigo_Clear+0x4c>
   15bec:	20 ff       	sbrs	r18, 0
   15bee:	0a c0       	rjmp	.+20     	; 0x15c04 <SS80_Amigo_Clear+0x42>
   15bf0:	89 e9       	ldi	r24, 0x99	; 153
   15bf2:	91 e2       	ldi	r25, 0x21	; 33
   15bf4:	a0 e0       	ldi	r26, 0x00	; 0
   15bf6:	ed b7       	in	r30, 0x3d	; 61
   15bf8:	fe b7       	in	r31, 0x3e	; 62
   15bfa:	81 83       	std	Z+1, r24	; 0x01
   15bfc:	92 83       	std	Z+2, r25	; 0x02
   15bfe:	a3 83       	std	Z+3, r26	; 0x03
   15c00:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   15c04:	8c 81       	ldd	r24, Y+4	; 0x04
   15c06:	9d 81       	ldd	r25, Y+5	; 0x05
   15c08:	88 27       	eor	r24, r24
   15c0a:	90 7d       	andi	r25, 0xD0	; 208
   15c0c:	19 c0       	rjmp	.+50     	; 0x15c40 <SS80_Amigo_Clear+0x7e>
   15c0e:	25 ff       	sbrs	r18, 5
   15c10:	0a c0       	rjmp	.+20     	; 0x15c26 <SS80_Amigo_Clear+0x64>
   15c12:	8a e8       	ldi	r24, 0x8A	; 138
   15c14:	91 e2       	ldi	r25, 0x21	; 33
   15c16:	a0 e0       	ldi	r26, 0x00	; 0
   15c18:	ed b7       	in	r30, 0x3d	; 61
   15c1a:	fe b7       	in	r31, 0x3e	; 62
   15c1c:	81 83       	std	Z+1, r24	; 0x01
   15c1e:	92 83       	std	Z+2, r25	; 0x02
   15c20:	a3 83       	std	Z+3, r26	; 0x03
   15c22:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   15c26:	8f e0       	ldi	r24, 0x0F	; 15
   15c28:	90 e0       	ldi	r25, 0x00	; 0
   15c2a:	21 df       	rcall	.-446    	; 0x15a6e <Clear_Common>
   15c2c:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   15c30:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   15c34:	81 81       	ldd	r24, Z+1	; 0x01
   15c36:	90 e0       	ldi	r25, 0x00	; 0
   15c38:	0e 94 d6 85 	call	0x10bac	; 0x10bac <gpib_enable_PPR>
   15c3c:	80 e0       	ldi	r24, 0x00	; 0
   15c3e:	90 e0       	ldi	r25, 0x00	; 0
   15c40:	26 96       	adiw	r28, 0x06	; 6
   15c42:	e2 e0       	ldi	r30, 0x02	; 2
   15c44:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00015c48 <SS80_Cancel>:
   15c48:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15c4c:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15c50:	11 82       	std	Z+1, r1	; 0x01
   15c52:	10 82       	st	Z, r1
   15c54:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   15c58:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   15c5c:	81 81       	ldd	r24, Z+1	; 0x01
   15c5e:	90 e0       	ldi	r25, 0x00	; 0
   15c60:	0e 94 d6 85 	call	0x10bac	; 0x10bac <gpib_enable_PPR>
   15c64:	80 e0       	ldi	r24, 0x00	; 0
   15c66:	90 e0       	ldi	r25, 0x00	; 0
   15c68:	08 95       	ret

00015c6a <SS80_Transparent_State>:
   15c6a:	a9 e0       	ldi	r26, 0x09	; 9
   15c6c:	b0 e0       	ldi	r27, 0x00	; 0
   15c6e:	eb e3       	ldi	r30, 0x3B	; 59
   15c70:	fe ea       	ldi	r31, 0xAE	; 174
   15c72:	0c 94 6e e6 	jmp	0x1ccdc	; 0x1ccdc <__prologue_saves__+0x10>
   15c76:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   15c7a:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   15c7e:	81 81       	ldd	r24, Z+1	; 0x01
   15c80:	90 e0       	ldi	r25, 0x00	; 0
   15c82:	0e 94 0c 86 	call	0x10c18	; 0x10c18 <gpib_disable_PPR>
   15c86:	80 e0       	ldi	r24, 0x00	; 0
   15c88:	91 e0       	ldi	r25, 0x01	; 1
   15c8a:	99 87       	std	Y+9, r25	; 0x09
   15c8c:	88 87       	std	Y+8, r24	; 0x08
   15c8e:	ae 01       	movw	r20, r28
   15c90:	48 5f       	subi	r20, 0xF8	; 248
   15c92:	5f 4f       	sbci	r21, 0xFF	; 255
   15c94:	60 e0       	ldi	r22, 0x00	; 0
   15c96:	72 e0       	ldi	r23, 0x02	; 2
   15c98:	80 ee       	ldi	r24, 0xE0	; 224
   15c9a:	9c e1       	ldi	r25, 0x1C	; 28
   15c9c:	0e 94 64 8a 	call	0x114c8	; 0x114c8 <gpib_read_str>
   15ca0:	7c 01       	movw	r14, r24
   15ca2:	88 85       	ldd	r24, Y+8	; 0x08
   15ca4:	99 85       	ldd	r25, Y+9	; 0x09
   15ca6:	9c 01       	movw	r18, r24
   15ca8:	22 27       	eor	r18, r18
   15caa:	30 7d       	andi	r19, 0xD0	; 208
   15cac:	23 2b       	or	r18, r19
   15cae:	79 f0       	breq	.+30     	; 0x15cce <SS80_Transparent_State+0x64>
   15cb0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15cb4:	80 ff       	sbrs	r24, 0
   15cb6:	da c0       	rjmp	.+436    	; 0x15e6c <SS80_Transparent_State+0x202>
   15cb8:	89 e2       	ldi	r24, 0x29	; 41
   15cba:	93 e2       	ldi	r25, 0x23	; 35
   15cbc:	a0 e0       	ldi	r26, 0x00	; 0
   15cbe:	ed b7       	in	r30, 0x3d	; 61
   15cc0:	fe b7       	in	r31, 0x3e	; 62
   15cc2:	81 83       	std	Z+1, r24	; 0x01
   15cc4:	92 83       	std	Z+2, r25	; 0x02
   15cc6:	a3 83       	std	Z+3, r26	; 0x03
   15cc8:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   15ccc:	cf c0       	rjmp	.+414    	; 0x15e6c <SS80_Transparent_State+0x202>
   15cce:	e1 14       	cp	r14, r1
   15cd0:	f1 04       	cpc	r15, r1
   15cd2:	09 f4       	brne	.+2      	; 0x15cd6 <SS80_Transparent_State+0x6c>
   15cd4:	d0 c0       	rjmp	.+416    	; 0x15e76 <SS80_Transparent_State+0x20c>
   15cd6:	90 fd       	sbrc	r25, 0
   15cd8:	0e c0       	rjmp	.+28     	; 0x15cf6 <SS80_Transparent_State+0x8c>
   15cda:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15cde:	80 ff       	sbrs	r24, 0
   15ce0:	0a c0       	rjmp	.+20     	; 0x15cf6 <SS80_Transparent_State+0x8c>
   15ce2:	80 e1       	ldi	r24, 0x10	; 16
   15ce4:	93 e2       	ldi	r25, 0x23	; 35
   15ce6:	a0 e0       	ldi	r26, 0x00	; 0
   15ce8:	ed b7       	in	r30, 0x3d	; 61
   15cea:	fe b7       	in	r31, 0x3e	; 62
   15cec:	81 83       	std	Z+1, r24	; 0x01
   15cee:	92 83       	std	Z+2, r25	; 0x02
   15cf0:	a3 83       	std	Z+3, r26	; 0x03
   15cf2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   15cf6:	80 ee       	ldi	r24, 0xE0	; 224
   15cf8:	a8 2e       	mov	r10, r24
   15cfa:	8c e1       	ldi	r24, 0x1C	; 28
   15cfc:	b8 2e       	mov	r11, r24
   15cfe:	00 e0       	ldi	r16, 0x00	; 0
   15d00:	10 e0       	ldi	r17, 0x00	; 0
   15d02:	0e 15       	cp	r16, r14
   15d04:	1f 05       	cpc	r17, r15
   15d06:	0c f0       	brlt	.+2      	; 0x15d0a <SS80_Transparent_State+0xa0>
   15d08:	9c c0       	rjmp	.+312    	; 0x15e42 <SS80_Transparent_State+0x1d8>
   15d0a:	68 01       	movw	r12, r16
   15d0c:	ff ef       	ldi	r31, 0xFF	; 255
   15d0e:	cf 1a       	sub	r12, r31
   15d10:	df 0a       	sbc	r13, r31
   15d12:	f5 01       	movw	r30, r10
   15d14:	81 91       	ld	r24, Z+
   15d16:	5f 01       	movw	r10, r30
   15d18:	28 2f       	mov	r18, r24
   15d1a:	30 e0       	ldi	r19, 0x00	; 0
   15d1c:	a9 01       	movw	r20, r18
   15d1e:	40 52       	subi	r20, 0x20	; 32
   15d20:	51 09       	sbc	r21, r1
   15d22:	40 31       	cpi	r20, 0x10	; 16
   15d24:	51 05       	cpc	r21, r1
   15d26:	20 f4       	brcc	.+8      	; 0x15d30 <SS80_Transparent_State+0xc6>
   15d28:	80 52       	subi	r24, 0x20	; 32
   15d2a:	86 d9       	rcall	.-3316   	; 0x15038 <SS80_Check_Unit>
   15d2c:	86 01       	movw	r16, r12
   15d2e:	e9 cf       	rjmp	.-46     	; 0x15d02 <SS80_Transparent_State+0x98>
   15d30:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15d34:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   15d38:	21 30       	cpi	r18, 0x01	; 1
   15d3a:	31 05       	cpc	r19, r1
   15d3c:	c9 f4       	brne	.+50     	; 0x15d70 <SS80_Transparent_State+0x106>
   15d3e:	0e 5f       	subi	r16, 0xFE	; 254
   15d40:	1f 4f       	sbci	r17, 0xFF	; 255
   15d42:	80 73       	andi	r24, 0x30	; 48
   15d44:	99 27       	eor	r25, r25
   15d46:	89 2b       	or	r24, r25
   15d48:	51 f0       	breq	.+20     	; 0x15d5e <SS80_Transparent_State+0xf4>
   15d4a:	8b ee       	ldi	r24, 0xEB	; 235
   15d4c:	92 e2       	ldi	r25, 0x22	; 34
   15d4e:	a0 e0       	ldi	r26, 0x00	; 0
   15d50:	ed b7       	in	r30, 0x3d	; 61
   15d52:	fe b7       	in	r31, 0x3e	; 62
   15d54:	81 83       	std	Z+1, r24	; 0x01
   15d56:	92 83       	std	Z+2, r25	; 0x02
   15d58:	a3 83       	std	Z+3, r26	; 0x03
   15d5a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   15d5e:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   15d62:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   15d66:	81 81       	ldd	r24, Z+1	; 0x01
   15d68:	90 e0       	ldi	r25, 0x00	; 0
   15d6a:	0e 94 d6 85 	call	0x10bac	; 0x10bac <gpib_enable_PPR>
   15d6e:	69 c0       	rjmp	.+210    	; 0x15e42 <SS80_Transparent_State+0x1d8>
   15d70:	22 30       	cpi	r18, 0x02	; 2
   15d72:	31 05       	cpc	r19, r1
   15d74:	51 f4       	brne	.+20     	; 0x15d8a <SS80_Transparent_State+0x120>
   15d76:	0b 5f       	subi	r16, 0xFB	; 251
   15d78:	1f 4f       	sbci	r17, 0xFF	; 255
   15d7a:	80 73       	andi	r24, 0x30	; 48
   15d7c:	99 27       	eor	r25, r25
   15d7e:	89 2b       	or	r24, r25
   15d80:	09 f4       	brne	.+2      	; 0x15d84 <SS80_Transparent_State+0x11a>
   15d82:	5f c0       	rjmp	.+190    	; 0x15e42 <SS80_Transparent_State+0x1d8>
   15d84:	8e ec       	ldi	r24, 0xCE	; 206
   15d86:	92 e2       	ldi	r25, 0x22	; 34
   15d88:	0c c0       	rjmp	.+24     	; 0x15da2 <SS80_Transparent_State+0x138>
   15d8a:	23 30       	cpi	r18, 0x03	; 3
   15d8c:	31 05       	cpc	r19, r1
   15d8e:	91 f4       	brne	.+36     	; 0x15db4 <SS80_Transparent_State+0x14a>
   15d90:	0b 5f       	subi	r16, 0xFB	; 251
   15d92:	1f 4f       	sbci	r17, 0xFF	; 255
   15d94:	80 73       	andi	r24, 0x30	; 48
   15d96:	99 27       	eor	r25, r25
   15d98:	89 2b       	or	r24, r25
   15d9a:	09 f4       	brne	.+2      	; 0x15d9e <SS80_Transparent_State+0x134>
   15d9c:	52 c0       	rjmp	.+164    	; 0x15e42 <SS80_Transparent_State+0x1d8>
   15d9e:	80 eb       	ldi	r24, 0xB0	; 176
   15da0:	92 e2       	ldi	r25, 0x22	; 34
   15da2:	a0 e0       	ldi	r26, 0x00	; 0
   15da4:	ed b7       	in	r30, 0x3d	; 61
   15da6:	fe b7       	in	r31, 0x3e	; 62
   15da8:	81 83       	std	Z+1, r24	; 0x01
   15daa:	92 83       	std	Z+2, r25	; 0x02
   15dac:	a3 83       	std	Z+3, r26	; 0x03
   15dae:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   15db2:	47 c0       	rjmp	.+142    	; 0x15e42 <SS80_Transparent_State+0x1d8>
   15db4:	28 30       	cpi	r18, 0x08	; 8
   15db6:	31 05       	cpc	r19, r1
   15db8:	e1 f4       	brne	.+56     	; 0x15df2 <SS80_Transparent_State+0x188>
   15dba:	85 ff       	sbrs	r24, 5
   15dbc:	12 c0       	rjmp	.+36     	; 0x15de2 <SS80_Transparent_State+0x178>
   15dbe:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15dc2:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15dc6:	85 81       	ldd	r24, Z+5	; 0x05
   15dc8:	90 e0       	ldi	r25, 0x00	; 0
   15dca:	ed b7       	in	r30, 0x3d	; 61
   15dcc:	fe b7       	in	r31, 0x3e	; 62
   15dce:	95 83       	std	Z+5, r25	; 0x05
   15dd0:	84 83       	std	Z+4, r24	; 0x04
   15dd2:	89 e8       	ldi	r24, 0x89	; 137
   15dd4:	92 e2       	ldi	r25, 0x22	; 34
   15dd6:	a0 e0       	ldi	r26, 0x00	; 0
   15dd8:	81 83       	std	Z+1, r24	; 0x01
   15dda:	92 83       	std	Z+2, r25	; 0x02
   15ddc:	a3 83       	std	Z+3, r26	; 0x03
   15dde:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   15de2:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15de6:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15dea:	85 81       	ldd	r24, Z+5	; 0x05
   15dec:	90 e0       	ldi	r25, 0x00	; 0
   15dee:	aa de       	rcall	.-684    	; 0x15b44 <SS80_Channel_Independent_Clear>
   15df0:	44 c0       	rjmp	.+136    	; 0x15e7a <SS80_Transparent_State+0x210>
   15df2:	29 30       	cpi	r18, 0x09	; 9
   15df4:	31 05       	cpc	r19, r1
   15df6:	b1 f4       	brne	.+44     	; 0x15e24 <SS80_Transparent_State+0x1ba>
   15df8:	85 ff       	sbrs	r24, 5
   15dfa:	12 c0       	rjmp	.+36     	; 0x15e20 <SS80_Transparent_State+0x1b6>
   15dfc:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15e00:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15e04:	85 81       	ldd	r24, Z+5	; 0x05
   15e06:	90 e0       	ldi	r25, 0x00	; 0
   15e08:	ed b7       	in	r30, 0x3d	; 61
   15e0a:	fe b7       	in	r31, 0x3e	; 62
   15e0c:	95 83       	std	Z+5, r25	; 0x05
   15e0e:	84 83       	std	Z+4, r24	; 0x04
   15e10:	85 e7       	ldi	r24, 0x75	; 117
   15e12:	92 e2       	ldi	r25, 0x22	; 34
   15e14:	a0 e0       	ldi	r26, 0x00	; 0
   15e16:	81 83       	std	Z+1, r24	; 0x01
   15e18:	92 83       	std	Z+2, r25	; 0x02
   15e1a:	a3 83       	std	Z+3, r26	; 0x03
   15e1c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   15e20:	13 df       	rcall	.-474    	; 0x15c48 <SS80_Cancel>
   15e22:	2b c0       	rjmp	.+86     	; 0x15e7a <SS80_Transparent_State+0x210>
   15e24:	80 ff       	sbrs	r24, 0
   15e26:	22 c0       	rjmp	.+68     	; 0x15e6c <SS80_Transparent_State+0x202>
   15e28:	ed b7       	in	r30, 0x3d	; 61
   15e2a:	fe b7       	in	r31, 0x3e	; 62
   15e2c:	35 83       	std	Z+5, r19	; 0x05
   15e2e:	24 83       	std	Z+4, r18	; 0x04
   15e30:	85 e5       	ldi	r24, 0x55	; 85
   15e32:	92 e2       	ldi	r25, 0x22	; 34
   15e34:	a0 e0       	ldi	r26, 0x00	; 0
   15e36:	81 83       	std	Z+1, r24	; 0x01
   15e38:	92 83       	std	Z+2, r25	; 0x02
   15e3a:	a3 83       	std	Z+3, r26	; 0x03
   15e3c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   15e40:	86 01       	movw	r16, r12
   15e42:	0e 15       	cp	r16, r14
   15e44:	1f 05       	cpc	r17, r15
   15e46:	91 f0       	breq	.+36     	; 0x15e6c <SS80_Transparent_State+0x202>
   15e48:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15e4c:	80 ff       	sbrs	r24, 0
   15e4e:	0e c0       	rjmp	.+28     	; 0x15e6c <SS80_Transparent_State+0x202>
   15e50:	ed b7       	in	r30, 0x3d	; 61
   15e52:	fe b7       	in	r31, 0x3e	; 62
   15e54:	f7 82       	std	Z+7, r15	; 0x07
   15e56:	e6 82       	std	Z+6, r14	; 0x06
   15e58:	15 83       	std	Z+5, r17	; 0x05
   15e5a:	04 83       	std	Z+4, r16	; 0x04
   15e5c:	89 e1       	ldi	r24, 0x19	; 25
   15e5e:	92 e2       	ldi	r25, 0x22	; 34
   15e60:	a0 e0       	ldi	r26, 0x00	; 0
   15e62:	81 83       	std	Z+1, r24	; 0x01
   15e64:	92 83       	std	Z+2, r25	; 0x02
   15e66:	a3 83       	std	Z+3, r26	; 0x03
   15e68:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   15e6c:	88 85       	ldd	r24, Y+8	; 0x08
   15e6e:	99 85       	ldd	r25, Y+9	; 0x09
   15e70:	88 27       	eor	r24, r24
   15e72:	90 7d       	andi	r25, 0xD0	; 208
   15e74:	02 c0       	rjmp	.+4      	; 0x15e7a <SS80_Transparent_State+0x210>
   15e76:	80 e0       	ldi	r24, 0x00	; 0
   15e78:	90 e0       	ldi	r25, 0x00	; 0
   15e7a:	29 96       	adiw	r28, 0x09	; 9
   15e7c:	ea e0       	ldi	r30, 0x0A	; 10
   15e7e:	0c 94 8a e6 	jmp	0x1cd14	; 0x1cd14 <__epilogue_restores__+0x10>

00015e82 <SS80_error_return>:
/// @return  0 on send
/// @return GPIB flags on send error
/// @see gpib.h _FLAGS defines for a full list.

int SS80_error_return( void )
{
   15e82:	a6 e0       	ldi	r26, 0x06	; 6
   15e84:	b0 e0       	ldi	r27, 0x00	; 0
   15e86:	e7 e4       	ldi	r30, 0x47	; 71
   15e88:	ff ea       	ldi	r31, 0xAF	; 175
   15e8a:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
    uint8_t tmp[1];
    uint16_t status = EOI_FLAG;
   15e8e:	80 e0       	ldi	r24, 0x00	; 0
   15e90:	91 e0       	ldi	r25, 0x01	; 1
   15e92:	9d 83       	std	Y+5, r25	; 0x05
   15e94:	8c 83       	std	Y+4, r24	; 0x04

    SS80s->qstat = 1;
   15e96:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15e9a:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15e9e:	81 e0       	ldi	r24, 0x01	; 1
   15ea0:	82 83       	std	Z+2, r24	; 0x02
    tmp[0] = SS80s->qstat;
   15ea2:	8e 83       	std	Y+6, r24	; 0x06

    status = EOI_FLAG;
    if( gpib_write_str(tmp,sizeof(tmp), &status) != sizeof(tmp))
   15ea4:	ae 01       	movw	r20, r28
   15ea6:	4c 5f       	subi	r20, 0xFC	; 252
   15ea8:	5f 4f       	sbci	r21, 0xFF	; 255
   15eaa:	61 e0       	ldi	r22, 0x01	; 1
   15eac:	70 e0       	ldi	r23, 0x00	; 0
   15eae:	ce 01       	movw	r24, r28
   15eb0:	06 96       	adiw	r24, 0x06	; 6
   15eb2:	0e 94 06 8b 	call	0x1160c	; 0x1160c <gpib_write_str>
   15eb6:	01 97       	sbiw	r24, 0x01	; 1
   15eb8:	99 f0       	breq	.+38     	; 0x15ee0 <SS80_error_return+0x5e>
    {
        if(debuglevel & GPIB_ERR)
   15eba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15ebe:	80 ff       	sbrs	r24, 0
   15ec0:	0a c0       	rjmp	.+20     	; 0x15ed6 <SS80_error_return+0x54>
            printf("[GPIB Error Return - Write ERROR]\n");
   15ec2:	87 e6       	ldi	r24, 0x67	; 103
   15ec4:	91 e2       	ldi	r25, 0x21	; 33
   15ec6:	a0 e0       	ldi	r26, 0x00	; 0
   15ec8:	ed b7       	in	r30, 0x3d	; 61
   15eca:	fe b7       	in	r31, 0x3e	; 62
   15ecc:	81 83       	std	Z+1, r24	; 0x01
   15ece:	92 83       	std	Z+2, r25	; 0x02
   15ed0:	a3 83       	std	Z+3, r26	; 0x03
   15ed2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        return(status & ERROR_MASK);
   15ed6:	8c 81       	ldd	r24, Y+4	; 0x04
   15ed8:	9d 81       	ldd	r25, Y+5	; 0x05
   15eda:	88 27       	eor	r24, r24
   15edc:	90 7d       	andi	r25, 0xD0	; 208
   15ede:	07 c0       	rjmp	.+14     	; 0x15eee <SS80_error_return+0x6c>
    }
    SS80s->qstat = 0;
   15ee0:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15ee4:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15ee8:	12 82       	std	Z+2, r1	; 0x02
    return(0);
   15eea:	80 e0       	ldi	r24, 0x00	; 0
   15eec:	90 e0       	ldi	r25, 0x00	; 0
}
   15eee:	26 96       	adiw	r28, 0x06	; 6
   15ef0:	e2 e0       	ldi	r30, 0x02	; 2
   15ef2:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00015ef6 <SS80_locate_and_read>:
///  - Currenly we will only process 2 ** 31 bytes Max in one transfer.
///  - If an seek or I/O error happens then we MUST continue to
/// read and discard the GPIB data until we get an EOI or GPIB error...

int SS80_locate_and_read( void )
{
   15ef6:	a7 e1       	ldi	r26, 0x17	; 23
   15ef8:	b0 e0       	ldi	r27, 0x00	; 0
   15efa:	e1 e8       	ldi	r30, 0x81	; 129
   15efc:	ff ea       	ldi	r31, 0xAF	; 175
   15efe:	0c 94 67 e6 	jmp	0x1ccce	; 0x1ccce <__prologue_saves__+0x2>
    DWORD total_bytes;
    DWORD count;
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);
   15f02:	60 91 5c 19 	lds	r22, 0x195C	; 0x80195c <SS80s>
   15f06:	70 91 5d 19 	lds	r23, 0x195D	; 0x80195d <SS80s+0x1>
   15f0a:	fb 01       	movw	r30, r22
   15f0c:	27 81       	ldd	r18, Z+7	; 0x07
   15f0e:	30 85       	ldd	r19, Z+8	; 0x08
   15f10:	41 85       	ldd	r20, Z+9	; 0x09
   15f12:	52 85       	ldd	r21, Z+10	; 0x0a

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   15f14:	80 91 5e 19 	lds	r24, 0x195E	; 0x80195e <SS80p>
   15f18:	90 91 5f 19 	lds	r25, 0x195F	; 0x80195f <SS80p+0x1>
   15f1c:	fc 01       	movw	r30, r24
   15f1e:	a2 89       	ldd	r26, Z+18	; 0x12
   15f20:	b3 89       	ldd	r27, Z+19	; 0x13
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);

    SS80s->qstat = 0;
   15f22:	fb 01       	movw	r30, r22
   15f24:	12 82       	std	Z+2, r1	; 0x02

    status = 0;
   15f26:	1d 86       	std	Y+13, r1	; 0x0d
   15f28:	1c 86       	std	Y+12, r1	; 0x0c

    if( GPIB_IO_RD(IFC) == 0)
   15f2a:	54 98       	cbi	0x0a, 4	; 10
   15f2c:	4c 99       	sbic	0x09, 4	; 9
   15f2e:	03 c0       	rjmp	.+6      	; 0x15f36 <SS80_locate_and_read+0x40>
        return(IFC_FLAG);
   15f30:	80 e0       	ldi	r24, 0x00	; 0
   15f32:	90 e1       	ldi	r25, 0x10	; 16
   15f34:	3e c1       	rjmp	.+636    	; 0x161b2 <SS80_locate_and_read+0x2bc>

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   15f36:	0e 94 46 e6 	call	0x1cc8c	; 0x1cc8c <__muluhisi3>
   15f3a:	4b 01       	movw	r8, r22
   15f3c:	5c 01       	movw	r10, r24
/// @todo FIXME
///  SS80 4-39
///  For now we will assume the controller will never do this

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15f3e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f42:	85 ff       	sbrs	r24, 5
   15f44:	1a c0       	rjmp	.+52     	; 0x15f7a <SS80_locate_and_read+0x84>
        printf("[SS80 Locate and Read at %08lXH(%lXH)]\n",
   15f46:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15f4a:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15f4e:	83 85       	ldd	r24, Z+11	; 0x0b
   15f50:	94 85       	ldd	r25, Z+12	; 0x0c
   15f52:	a5 85       	ldd	r26, Z+13	; 0x0d
   15f54:	b6 85       	ldd	r27, Z+14	; 0x0e
   15f56:	ed b7       	in	r30, 0x3d	; 61
   15f58:	fe b7       	in	r31, 0x3e	; 62
   15f5a:	80 87       	std	Z+8, r24	; 0x08
   15f5c:	91 87       	std	Z+9, r25	; 0x09
   15f5e:	a2 87       	std	Z+10, r26	; 0x0a
   15f60:	b3 87       	std	Z+11, r27	; 0x0b
   15f62:	84 82       	std	Z+4, r8	; 0x04
   15f64:	95 82       	std	Z+5, r9	; 0x05
   15f66:	a6 82       	std	Z+6, r10	; 0x06
   15f68:	b7 82       	std	Z+7, r11	; 0x07
   15f6a:	81 e4       	ldi	r24, 0x41	; 65
   15f6c:	98 e2       	ldi	r25, 0x28	; 40
   15f6e:	a0 e0       	ldi	r26, 0x00	; 0
   15f70:	81 83       	std	Z+1, r24	; 0x01
   15f72:	92 83       	std	Z+2, r25	; 0x02
   15f74:	a3 83       	std	Z+3, r26	; 0x03
   15f76:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            (long) Address, (long) SS80s->Length);
#endif

    if( SS80_cmd_seek() )
   15f7a:	25 db       	rcall	.-2486   	; 0x155c6 <SS80_cmd_seek>
   15f7c:	89 2b       	or	r24, r25
   15f7e:	09 f0       	breq	.+2      	; 0x15f82 <SS80_locate_and_read+0x8c>
   15f80:	ae c0       	rjmp	.+348    	; 0x160de <SS80_locate_and_read+0x1e8>
    {
        return(SS80_error_return());
    }

    count = SS80s->Length;
   15f82:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   15f86:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   15f8a:	43 84       	ldd	r4, Z+11	; 0x0b
   15f8c:	54 84       	ldd	r5, Z+12	; 0x0c
   15f8e:	65 84       	ldd	r6, Z+13	; 0x0d
   15f90:	76 84       	ldd	r7, Z+14	; 0x0e
    total_bytes = 0;
   15f92:	1e 86       	std	Y+14, r1	; 0x0e
   15f94:	1f 86       	std	Y+15, r1	; 0x0f
   15f96:	18 8a       	std	Y+16, r1	; 0x10
   15f98:	19 8a       	std	Y+17, r1	; 0x11

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
            gpib_timer_elapsed_end("disk READ ");
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   15f9a:	83 e2       	ldi	r24, 0x23	; 35
   15f9c:	98 e2       	ldi	r25, 0x28	; 40
   15f9e:	9c 01       	movw	r18, r24
   15fa0:	40 e0       	ldi	r20, 0x00	; 0
   15fa2:	2a 8b       	std	Y+18, r18	; 0x12
   15fa4:	3b 8b       	std	Y+19, r19	; 0x13
   15fa6:	4c 8b       	std	Y+20, r20	; 0x14
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   15fa8:	33 24       	eor	r3, r3
   15faa:	33 94       	inc	r3
            if(debuglevel & GPIB_ERR)
                printf("[SS80 GPIB Write Error]\n");
   15fac:	82 ef       	ldi	r24, 0xF2	; 242
   15fae:	97 e2       	ldi	r25, 0x27	; 39
   15fb0:	9c 01       	movw	r18, r24
   15fb2:	40 e0       	ldi	r20, 0x00	; 0
   15fb4:	2d 8b       	std	Y+21, r18	; 0x15
   15fb6:	3e 8b       	std	Y+22, r19	; 0x16
   15fb8:	4f 8b       	std	Y+23, r20	; 0x17
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   15fba:	34 c0       	rjmp	.+104    	; 0x16024 <SS80_locate_and_read+0x12e>
                printf("[SS80 Disk Read Error]\n");
            return( SS80_error_return() );
        }

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   15fbc:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   15fbe:	0e 94 fc 84 	call	0x109f8	; 0x109f8 <gpib_timer_elapsed_begin>
#endif
        len = gpib_write_str(gpib_iobuff, chunk, &status);
   15fc2:	ae 01       	movw	r20, r28
   15fc4:	44 5f       	subi	r20, 0xF4	; 244
   15fc6:	5f 4f       	sbci	r21, 0xFF	; 255
   15fc8:	b6 01       	movw	r22, r12
   15fca:	80 ee       	ldi	r24, 0xE0	; 224
   15fcc:	9c e1       	ldi	r25, 0x1C	; 28
   15fce:	0e 94 06 8b 	call	0x1160c	; 0x1160c <gpib_write_str>
   15fd2:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   15fd4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15fd8:	87 ff       	sbrs	r24, 7
   15fda:	04 c0       	rjmp	.+8      	; 0x15fe4 <SS80_locate_and_read+0xee>
            gpib_timer_elapsed_end("GPIB write");
   15fdc:	8f e9       	ldi	r24, 0x9F	; 159
   15fde:	90 e1       	ldi	r25, 0x10	; 16
   15fe0:	0e 94 0e 85 	call	0x10a1c	; 0x10a1c <gpib_timer_elapsed_end>
#endif
        if( len != chunk)
   15fe4:	c0 16       	cp	r12, r16
   15fe6:	d1 06       	cpc	r13, r17
   15fe8:	09 f0       	breq	.+2      	; 0x15fec <SS80_locate_and_read+0xf6>
   15fea:	82 c0       	rjmp	.+260    	; 0x160f0 <SS80_locate_and_read+0x1fa>
                SS80s->Errors |= ERR_GPIB;
                break;
            }
        }

        Address += chunk;
   15fec:	0d 2c       	mov	r0, r13
   15fee:	00 0c       	add	r0, r0
   15ff0:	ee 08       	sbc	r14, r14
   15ff2:	ff 08       	sbc	r15, r15
   15ff4:	8c 0c       	add	r8, r12
   15ff6:	9d 1c       	adc	r9, r13
   15ff8:	ae 1c       	adc	r10, r14
   15ffa:	bf 1c       	adc	r11, r15
        total_bytes = total_bytes + len;
   15ffc:	01 2e       	mov	r0, r17
   15ffe:	00 0c       	add	r0, r0
   16000:	22 0b       	sbc	r18, r18
   16002:	33 0b       	sbc	r19, r19
   16004:	8e 85       	ldd	r24, Y+14	; 0x0e
   16006:	9f 85       	ldd	r25, Y+15	; 0x0f
   16008:	a8 89       	ldd	r26, Y+16	; 0x10
   1600a:	b9 89       	ldd	r27, Y+17	; 0x11
   1600c:	80 0f       	add	r24, r16
   1600e:	91 1f       	adc	r25, r17
   16010:	a2 1f       	adc	r26, r18
   16012:	b3 1f       	adc	r27, r19
   16014:	8e 87       	std	Y+14, r24	; 0x0e
   16016:	9f 87       	std	Y+15, r25	; 0x0f
   16018:	a8 8b       	std	Y+16, r26	; 0x10
   1601a:	b9 8b       	std	Y+17, r27	; 0x11
        count -= len;
   1601c:	40 1a       	sub	r4, r16
   1601e:	51 0a       	sbc	r5, r17
   16020:	62 0a       	sbc	r6, r18
   16022:	73 0a       	sbc	r7, r19
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   16024:	41 14       	cp	r4, r1
   16026:	51 04       	cpc	r5, r1
   16028:	61 04       	cpc	r6, r1
   1602a:	71 04       	cpc	r7, r1
   1602c:	09 f4       	brne	.+2      	; 0x16030 <SS80_locate_and_read+0x13a>
   1602e:	92 c0       	rjmp	.+292    	; 0x16154 <SS80_locate_and_read+0x25e>
    {
        if( GPIB_IO_RD(IFC) == 0)
   16030:	54 98       	cbi	0x0a, 4	; 10
   16032:	4c 9b       	sbis	0x09, 4	; 9
   16034:	7d cf       	rjmp	.-262    	; 0x15f30 <SS80_locate_and_read+0x3a>
        {
            return(IFC_FLAG);
        }

        if(count > 256)
   16036:	31 e0       	ldi	r19, 0x01	; 1
   16038:	43 16       	cp	r4, r19
   1603a:	53 06       	cpc	r5, r19
   1603c:	61 04       	cpc	r6, r1
   1603e:	71 04       	cpc	r7, r1
   16040:	08 f4       	brcc	.+2      	; 0x16044 <SS80_locate_and_read+0x14e>
   16042:	4f c0       	rjmp	.+158    	; 0x160e2 <SS80_locate_and_read+0x1ec>
        {
            chunk = 256;
            status = 0;                           // GPIB status
   16044:	1d 86       	std	Y+13, r1	; 0x0d
   16046:	1c 86       	std	Y+12, r1	; 0x0c
            return(IFC_FLAG);
        }

        if(count > 256)
        {
            chunk = 256;
   16048:	c1 2c       	mov	r12, r1
   1604a:	dd 24       	eor	r13, r13
   1604c:	d3 94       	inc	r13
            chunk = count;
            status |= EOI_FLAG;                   // GPIB EOI on final charater
        }

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   1604e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16052:	86 fd       	sbrc	r24, 6
            gpib_timer_elapsed_begin();
   16054:	0e 94 fc 84 	call	0x109f8	; 0x109f8 <gpib_timer_elapsed_begin>
#endif

// FIXME len != chunk
        len = dbf_open_read(SS80p->HEADER.NAME, Address, gpib_iobuff, chunk, &SS80s->Errors);
   16058:	e0 90 5c 19 	lds	r14, 0x195C	; 0x80195c <SS80s>
   1605c:	f0 90 5d 19 	lds	r15, 0x195D	; 0x80195d <SS80s+0x1>
   16060:	43 e0       	ldi	r20, 0x03	; 3
   16062:	e4 0e       	add	r14, r20
   16064:	f1 1c       	adc	r15, r1
   16066:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   1606a:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   1606e:	86 01       	movw	r16, r12
   16070:	20 ee       	ldi	r18, 0xE0	; 224
   16072:	3c e1       	ldi	r19, 0x1C	; 28
   16074:	b5 01       	movw	r22, r10
   16076:	a4 01       	movw	r20, r8
   16078:	82 81       	ldd	r24, Z+2	; 0x02
   1607a:	93 81       	ldd	r25, Z+3	; 0x03
   1607c:	0e 94 4e 84 	call	0x1089c	; 0x1089c <dbf_open_read>
   16080:	8c 01       	movw	r16, r24

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   16082:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16086:	86 ff       	sbrs	r24, 6
   16088:	04 c0       	rjmp	.+8      	; 0x16092 <SS80_locate_and_read+0x19c>
            gpib_timer_elapsed_end("disk READ ");
   1608a:	84 e9       	ldi	r24, 0x94	; 148
   1608c:	90 e1       	ldi	r25, 0x10	; 16
   1608e:	0e 94 0e 85 	call	0x10a1c	; 0x10a1c <gpib_timer_elapsed_end>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16092:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16096:	85 ff       	sbrs	r24, 5
   16098:	0c c0       	rjmp	.+24     	; 0x160b2 <SS80_locate_and_read+0x1bc>
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   1609a:	ed b7       	in	r30, 0x3d	; 61
   1609c:	fe b7       	in	r31, 0x3e	; 62
   1609e:	15 83       	std	Z+5, r17	; 0x05
   160a0:	04 83       	std	Z+4, r16	; 0x04
   160a2:	2a 89       	ldd	r18, Y+18	; 0x12
   160a4:	3b 89       	ldd	r19, Y+19	; 0x13
   160a6:	4c 89       	ldd	r20, Y+20	; 0x14
   160a8:	21 83       	std	Z+1, r18	; 0x01
   160aa:	32 83       	std	Z+2, r19	; 0x02
   160ac:	43 83       	std	Z+3, r20	; 0x03
   160ae:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   160b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
#endif
        if(len < 0)
   160b6:	17 ff       	sbrs	r17, 7
   160b8:	81 cf       	rjmp	.-254    	; 0x15fbc <SS80_locate_and_read+0xc6>
        {
            SS80s->qstat = 1;
   160ba:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   160be:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   160c2:	91 e0       	ldi	r25, 0x01	; 1
   160c4:	92 83       	std	Z+2, r25	; 0x02
/// @return Return
            if(debuglevel & GPIB_ERR)
   160c6:	80 ff       	sbrs	r24, 0
   160c8:	0a c0       	rjmp	.+20     	; 0x160de <SS80_locate_and_read+0x1e8>
                printf("[SS80 Disk Read Error]\n");
   160ca:	8b e0       	ldi	r24, 0x0B	; 11
   160cc:	98 e2       	ldi	r25, 0x28	; 40
   160ce:	a0 e0       	ldi	r26, 0x00	; 0
   160d0:	ed b7       	in	r30, 0x3d	; 61
   160d2:	fe b7       	in	r31, 0x3e	; 62
   160d4:	81 83       	std	Z+1, r24	; 0x01
   160d6:	92 83       	std	Z+2, r25	; 0x02
   160d8:	a3 83       	std	Z+3, r26	; 0x03
   160da:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            return( SS80_error_return() );
   160de:	d1 de       	rcall	.-606    	; 0x15e82 <SS80_error_return>
   160e0:	68 c0       	rjmp	.+208    	; 0x161b2 <SS80_locate_and_read+0x2bc>
            chunk = 256;
            status = 0;                           // GPIB status
        }
        else
        {
            chunk = count;
   160e2:	62 01       	movw	r12, r4
            status |= EOI_FLAG;                   // GPIB EOI on final charater
   160e4:	8c 85       	ldd	r24, Y+12	; 0x0c
   160e6:	9d 85       	ldd	r25, Y+13	; 0x0d
   160e8:	91 60       	ori	r25, 0x01	; 1
   160ea:	9d 87       	std	Y+13, r25	; 0x0d
   160ec:	8c 87       	std	Y+12, r24	; 0x0c
   160ee:	af cf       	rjmp	.-162    	; 0x1604e <SS80_locate_and_read+0x158>
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   160f0:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   160f4:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   160f8:	32 82       	std	Z+2, r3	; 0x02
            if(debuglevel & GPIB_ERR)
   160fa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   160fe:	80 ff       	sbrs	r24, 0
   16100:	0a c0       	rjmp	.+20     	; 0x16116 <SS80_locate_and_read+0x220>
                printf("[SS80 GPIB Write Error]\n");
   16102:	2d 89       	ldd	r18, Y+21	; 0x15
   16104:	3e 89       	ldd	r19, Y+22	; 0x16
   16106:	4f 89       	ldd	r20, Y+23	; 0x17
   16108:	ed b7       	in	r30, 0x3d	; 61
   1610a:	fe b7       	in	r31, 0x3e	; 62
   1610c:	21 83       	std	Z+1, r18	; 0x01
   1610e:	32 83       	std	Z+2, r19	; 0x02
   16110:	43 83       	std	Z+3, r20	; 0x03
   16112:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            if(status & ERROR_MASK)
   16116:	8c 85       	ldd	r24, Y+12	; 0x0c
   16118:	9d 85       	ldd	r25, Y+13	; 0x0d
   1611a:	88 27       	eor	r24, r24
   1611c:	90 7d       	andi	r25, 0xD0	; 208
   1611e:	89 2b       	or	r24, r25
   16120:	09 f4       	brne	.+2      	; 0x16124 <SS80_locate_and_read+0x22e>
   16122:	64 cf       	rjmp	.-312    	; 0x15fec <SS80_locate_and_read+0xf6>
            {
                SS80s->Errors |= ERR_GPIB;
   16124:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   16128:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   1612c:	83 81       	ldd	r24, Z+3	; 0x03
   1612e:	94 81       	ldd	r25, Z+4	; 0x04
   16130:	80 62       	ori	r24, 0x20	; 32
   16132:	94 83       	std	Z+4, r25	; 0x04
   16134:	83 83       	std	Z+3, r24	; 0x03
        count -= len;
    }
///  Note: this should not happen unless we exit on errors above
    if(count > 0)
    {
        if(debuglevel & GPIB_ERR)
   16136:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1613a:	80 ff       	sbrs	r24, 0
   1613c:	21 c0       	rjmp	.+66     	; 0x16180 <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read DID NOT FINISH]\n");
   1613e:	8d ec       	ldi	r24, 0xCD	; 205
   16140:	97 e2       	ldi	r25, 0x27	; 39
   16142:	a0 e0       	ldi	r26, 0x00	; 0
   16144:	ed b7       	in	r30, 0x3d	; 61
   16146:	fe b7       	in	r31, 0x3e	; 62
   16148:	81 83       	std	Z+1, r24	; 0x01
   1614a:	92 83       	std	Z+2, r25	; 0x02
   1614c:	a3 83       	std	Z+3, r26	; 0x03
   1614e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   16152:	16 c0       	rjmp	.+44     	; 0x16180 <SS80_locate_and_read+0x28a>
    }
    else
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16154:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16158:	85 ff       	sbrs	r24, 5
   1615a:	12 c0       	rjmp	.+36     	; 0x16180 <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
   1615c:	8e 85       	ldd	r24, Y+14	; 0x0e
   1615e:	9f 85       	ldd	r25, Y+15	; 0x0f
   16160:	a8 89       	ldd	r26, Y+16	; 0x10
   16162:	b9 89       	ldd	r27, Y+17	; 0x11
   16164:	ed b7       	in	r30, 0x3d	; 61
   16166:	fe b7       	in	r31, 0x3e	; 62
   16168:	84 83       	std	Z+4, r24	; 0x04
   1616a:	95 83       	std	Z+5, r25	; 0x05
   1616c:	a6 83       	std	Z+6, r26	; 0x06
   1616e:	b7 83       	std	Z+7, r27	; 0x07
   16170:	85 ea       	ldi	r24, 0xA5	; 165
   16172:	97 e2       	ldi	r25, 0x27	; 39
   16174:	a0 e0       	ldi	r26, 0x00	; 0
   16176:	81 83       	std	Z+1, r24	; 0x01
   16178:	92 83       	std	Z+2, r25	; 0x02
   1617a:	a3 83       	std	Z+3, r26	; 0x03
   1617c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   16180:	00 91 5c 19 	lds	r16, 0x195C	; 0x80195c <SS80s>
   16184:	10 91 5d 19 	lds	r17, 0x195D	; 0x80195d <SS80s+0x1>

/// @brief  SS80 Return current block addresss from bytes
/// @return Block Address
uint32_t SS80_Bytes_to_Blocks(uint32_t bytes)
{
    return(bytes / SS80p->UNIT.BYTES_PER_BLOCK);
   16188:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   1618c:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   16190:	22 89       	ldd	r18, Z+18	; 0x12
   16192:	33 89       	ldd	r19, Z+19	; 0x13
   16194:	40 e0       	ldi	r20, 0x00	; 0
   16196:	50 e0       	ldi	r21, 0x00	; 0
   16198:	c5 01       	movw	r24, r10
   1619a:	b4 01       	movw	r22, r8
   1619c:	0e 94 f9 e5 	call	0x1cbf2	; 0x1cbf2 <__udivmodsi4>
   161a0:	f8 01       	movw	r30, r16
   161a2:	27 83       	std	Z+7, r18	; 0x07
   161a4:	30 87       	std	Z+8, r19	; 0x08
   161a6:	41 87       	std	Z+9, r20	; 0x09
   161a8:	52 87       	std	Z+10, r21	; 0x0a
    return (status & ERROR_MASK);
   161aa:	8c 85       	ldd	r24, Y+12	; 0x0c
   161ac:	9d 85       	ldd	r25, Y+13	; 0x0d
   161ae:	88 27       	eor	r24, r24
   161b0:	90 7d       	andi	r25, 0xD0	; 208
}
   161b2:	67 96       	adiw	r28, 0x17	; 23
   161b4:	e1 e1       	ldi	r30, 0x11	; 17
   161b6:	0c 94 83 e6 	jmp	0x1cd06	; 0x1cd06 <__epilogue_restores__+0x2>

000161ba <SS80_Execute_State>:
/// - State: EXEC STATE COMMAND
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
   161ba:	cf 93       	push	r28
   161bc:	df 93       	push	r29
   161be:	00 d0       	rcall	.+0      	; 0x161c0 <SS80_Execute_State+0x6>
   161c0:	00 d0       	rcall	.+0      	; 0x161c2 <SS80_Execute_State+0x8>
   161c2:	1f 92       	push	r1
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
   161c4:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   161c8:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   161cc:	81 81       	ldd	r24, Z+1	; 0x01
   161ce:	90 e0       	ldi	r25, 0x00	; 0
   161d0:	0e 94 0c 86 	call	0x10c18	; 0x10c18 <gpib_disable_PPR>
    switch(SS80s->estate)
   161d4:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   161d8:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   161dc:	80 81       	ld	r24, Z
   161de:	91 81       	ldd	r25, Z+1	; 0x01
   161e0:	82 30       	cpi	r24, 0x02	; 2
   161e2:	91 05       	cpc	r25, r1
   161e4:	89 f0       	breq	.+34     	; 0x16208 <SS80_Execute_State+0x4e>
   161e6:	3c f4       	brge	.+14     	; 0x161f6 <SS80_Execute_State+0x3c>
   161e8:	00 97       	sbiw	r24, 0x00	; 0
   161ea:	81 f1       	breq	.+96     	; 0x1624c <SS80_Execute_State+0x92>
   161ec:	81 30       	cpi	r24, 0x01	; 1
   161ee:	91 05       	cpc	r25, r1
   161f0:	b9 f4       	brne	.+46     	; 0x16220 <SS80_Execute_State+0x66>
    {
        case EXEC_IDLE:
            break;
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
   161f2:	81 de       	rcall	.-766    	; 0x15ef6 <SS80_locate_and_read>
   161f4:	0d c0       	rjmp	.+26     	; 0x16210 <SS80_Execute_State+0x56>
int SS80_Execute_State(void)
{
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
    switch(SS80s->estate)
   161f6:	83 30       	cpi	r24, 0x03	; 3
   161f8:	91 05       	cpc	r25, r1
   161fa:	41 f0       	breq	.+16     	; 0x1620c <SS80_Execute_State+0x52>
   161fc:	84 30       	cpi	r24, 0x04	; 4
   161fe:	91 05       	cpc	r25, r1
   16200:	79 f4       	brne	.+30     	; 0x16220 <SS80_Execute_State+0x66>
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   16202:	0e 94 ac a7 	call	0x14f58	; 0x14f58 <SS80_describe>
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_LOCATE_AND_WRITE:
            ret = SS80_locate_and_write();
   16206:	04 c0       	rjmp	.+8      	; 0x16210 <SS80_Execute_State+0x56>
   16208:	53 da       	rcall	.-2906   	; 0x156b0 <SS80_locate_and_write>
   1620a:	02 c0       	rjmp	.+4      	; 0x16210 <SS80_Execute_State+0x56>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
   1620c:	0e 94 2b a7 	call	0x14e56	; 0x14e56 <SS80_send_status>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   16210:	ec 01       	movw	r28, r24
            SS80s->estate = EXEC_IDLE;
   16212:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   16216:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   1621a:	11 82       	std	Z+1, r1	; 0x01
   1621c:	10 82       	st	Z, r1
            break;
   1621e:	18 c0       	rjmp	.+48     	; 0x16250 <SS80_Execute_State+0x96>
        default:
            if(debuglevel & GPIB_ERR)
   16220:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16224:	20 ff       	sbrs	r18, 0
   16226:	0c c0       	rjmp	.+24     	; 0x16240 <SS80_Execute_State+0x86>
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
   16228:	ed b7       	in	r30, 0x3d	; 61
   1622a:	fe b7       	in	r31, 0x3e	; 62
   1622c:	95 83       	std	Z+5, r25	; 0x05
   1622e:	84 83       	std	Z+4, r24	; 0x04
   16230:	89 e6       	ldi	r24, 0x69	; 105
   16232:	98 e2       	ldi	r25, 0x28	; 40
   16234:	a0 e0       	ldi	r26, 0x00	; 0
   16236:	81 83       	std	Z+1, r24	; 0x01
   16238:	92 83       	std	Z+2, r25	; 0x02
   1623a:	a3 83       	std	Z+3, r26	; 0x03
   1623c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            SS80s->estate = EXEC_IDLE;
   16240:	e0 91 5c 19 	lds	r30, 0x195C	; 0x80195c <SS80s>
   16244:	f0 91 5d 19 	lds	r31, 0x195D	; 0x80195d <SS80s+0x1>
   16248:	11 82       	std	Z+1, r1	; 0x01
   1624a:	10 82       	st	Z, r1
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
    int ret = 0;
   1624c:	c0 e0       	ldi	r28, 0x00	; 0
   1624e:	d0 e0       	ldi	r29, 0x00	; 0
            if(debuglevel & GPIB_ERR)
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
            SS80s->estate = EXEC_IDLE;
            break;
    }
    gpib_enable_PPR(SS80p->HEADER.PPR);
   16250:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   16254:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   16258:	81 81       	ldd	r24, Z+1	; 0x01
   1625a:	90 e0       	ldi	r25, 0x00	; 0
   1625c:	0e 94 d6 85 	call	0x10bac	; 0x10bac <gpib_enable_PPR>
    return(ret);
}
   16260:	ce 01       	movw	r24, r28
   16262:	cd b7       	in	r28, 0x3d	; 61
   16264:	de b7       	in	r29, 0x3e	; 62
   16266:	25 96       	adiw	r28, 0x05	; 5
   16268:	e2 e0       	ldi	r30, 0x02	; 2
   1626a:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

0001626e <SS80_COMMANDS>:
/// @param[in] ch command.
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
   1626e:	a9 e0       	ldi	r26, 0x09	; 9
   16270:	b0 e0       	ldi	r27, 0x00	; 0
   16272:	ed e3       	ldi	r30, 0x3D	; 61
   16274:	f1 eb       	ldi	r31, 0xB1	; 177
   16276:	0c 94 75 e6 	jmp	0x1ccea	; 0x1ccea <__prologue_saves__+0x1e>
   1627a:	18 2f       	mov	r17, r24
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   1627c:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   16280:	90 e0       	ldi	r25, 0x00	; 0
   16282:	0e 94 18 8c 	call	0x11830	; 0x11830 <SS80_is_MTA>
   16286:	89 2b       	or	r24, r25
   16288:	19 f0       	breq	.+6      	; 0x16290 <SS80_COMMANDS+0x22>
    {
        if(ch == 0x65 )
   1628a:	15 36       	cpi	r17, 0x65	; 101
   1628c:	19 f5       	brne	.+70     	; 0x162d4 <SS80_COMMANDS+0x66>
   1628e:	09 c0       	rjmp	.+18     	; 0x162a2 <SS80_COMMANDS+0x34>
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   16290:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   16294:	90 e0       	ldi	r25, 0x00	; 0
   16296:	0e 94 06 8c 	call	0x1180c	; 0x1180c <SS80_is_MLA>
   1629a:	ec 01       	movw	r28, r24
   1629c:	89 2b       	or	r24, r25
   1629e:	a9 f7       	brne	.-22     	; 0x1628a <SS80_COMMANDS+0x1c>
   162a0:	ad c0       	rjmp	.+346    	; 0x163fc <SS80_COMMANDS+0x18e>
    {
        if(ch == 0x65 )
        {
            if(SS80_is_MLA(listening))
   162a2:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   162a6:	90 e0       	ldi	r25, 0x00	; 0
   162a8:	0e 94 06 8c 	call	0x1180c	; 0x1180c <SS80_is_MLA>
   162ac:	89 2b       	or	r24, r25
   162ae:	09 f4       	brne	.+2      	; 0x162b2 <SS80_COMMANDS+0x44>
   162b0:	a2 c0       	rjmp	.+324    	; 0x163f6 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   162b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   162b6:	85 ff       	sbrs	r24, 5
   162b8:	0a c0       	rjmp	.+20     	; 0x162ce <SS80_COMMANDS+0x60>
                    printf("[SS80 Command State]\n");
   162ba:	81 e5       	ldi	r24, 0x51	; 81
   162bc:	91 e2       	ldi	r25, 0x21	; 33
   162be:	a0 e0       	ldi	r26, 0x00	; 0
   162c0:	ed b7       	in	r30, 0x3d	; 61
   162c2:	fe b7       	in	r31, 0x3e	; 62
   162c4:	81 83       	std	Z+1, r24	; 0x01
   162c6:	92 83       	std	Z+2, r25	; 0x02
   162c8:	a3 83       	std	Z+3, r26	; 0x03
   162ca:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
                return ( SS80_Command_State() );
   162ce:	0e 94 6c a8 	call	0x150d8	; 0x150d8 <SS80_Command_State>
   162d2:	73 c0       	rjmp	.+230    	; 0x163ba <SS80_COMMANDS+0x14c>
            }
            return(0);
        }

        if(ch == 0x6e )
   162d4:	1e 36       	cpi	r17, 0x6E	; 110
   162d6:	01 f5       	brne	.+64     	; 0x16318 <SS80_COMMANDS+0xaa>
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   162d8:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   162dc:	90 e0       	ldi	r25, 0x00	; 0
   162de:	0e 94 06 8c 	call	0x1180c	; 0x1180c <SS80_is_MLA>
   162e2:	89 2b       	or	r24, r25
   162e4:	79 f0       	breq	.+30     	; 0x16304 <SS80_COMMANDS+0x96>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   162e6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   162ea:	85 ff       	sbrs	r24, 5
   162ec:	13 c0       	rjmp	.+38     	; 0x16314 <SS80_COMMANDS+0xa6>
                    printf("[SS00 Execute State]\n");
   162ee:	8b e3       	ldi	r24, 0x3B	; 59
   162f0:	91 e2       	ldi	r25, 0x21	; 33
   162f2:	a0 e0       	ldi	r26, 0x00	; 0
   162f4:	ed b7       	in	r30, 0x3d	; 61
   162f6:	fe b7       	in	r31, 0x3e	; 62
   162f8:	81 83       	std	Z+1, r24	; 0x01
   162fa:	92 83       	std	Z+2, r25	; 0x02
   162fc:	a3 83       	std	Z+3, r26	; 0x03
   162fe:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   16302:	08 c0       	rjmp	.+16     	; 0x16314 <SS80_COMMANDS+0xa6>
            return(0);
        }

        if(ch == 0x6e )
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   16304:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   16308:	90 e0       	ldi	r25, 0x00	; 0
   1630a:	0e 94 18 8c 	call	0x11830	; 0x11830 <SS80_is_MTA>
   1630e:	89 2b       	or	r24, r25
   16310:	51 f7       	brne	.-44     	; 0x162e6 <SS80_COMMANDS+0x78>
   16312:	71 c0       	rjmp	.+226    	; 0x163f6 <SS80_COMMANDS+0x188>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
                    printf("[SS00 Execute State]\n");
                return ( SS80_Execute_State() );
   16314:	52 df       	rcall	.-348    	; 0x161ba <SS80_Execute_State>
   16316:	51 c0       	rjmp	.+162    	; 0x163ba <SS80_COMMANDS+0x14c>

            }
            return(0);
        }

        if(ch == 0x70 )
   16318:	10 37       	cpi	r17, 0x70	; 112
   1631a:	b9 f5       	brne	.+110    	; 0x1638a <SS80_COMMANDS+0x11c>
        {
            if(SS80_is_MTA(talking) )
   1631c:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   16320:	90 e0       	ldi	r25, 0x00	; 0
   16322:	0e 94 18 8c 	call	0x11830	; 0x11830 <SS80_is_MTA>
   16326:	89 2b       	or	r24, r25
   16328:	81 f0       	breq	.+32     	; 0x1634a <SS80_COMMANDS+0xdc>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1632a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1632e:	85 ff       	sbrs	r24, 5
   16330:	0a c0       	rjmp	.+20     	; 0x16346 <SS80_COMMANDS+0xd8>
                    printf("[SS80 Report State]\n");
   16332:	86 e2       	ldi	r24, 0x26	; 38
   16334:	91 e2       	ldi	r25, 0x21	; 33
   16336:	a0 e0       	ldi	r26, 0x00	; 0
   16338:	ed b7       	in	r30, 0x3d	; 61
   1633a:	fe b7       	in	r31, 0x3e	; 62
   1633c:	81 83       	std	Z+1, r24	; 0x01
   1633e:	92 83       	std	Z+2, r25	; 0x02
   16340:	a3 83       	std	Z+3, r26	; 0x03
   16342:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
                return( SS80_Report() );
   16346:	46 db       	rcall	.-2420   	; 0x159d4 <SS80_Report>
   16348:	38 c0       	rjmp	.+112    	; 0x163ba <SS80_COMMANDS+0x14c>
            }

            if(SS80_is_MLA(listening))
   1634a:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   1634e:	90 e0       	ldi	r25, 0x00	; 0
   16350:	0e 94 06 8c 	call	0x1180c	; 0x1180c <SS80_is_MLA>
   16354:	89 2b       	or	r24, r25
   16356:	09 f4       	brne	.+2      	; 0x1635a <SS80_COMMANDS+0xec>
   16358:	4e c0       	rjmp	.+156    	; 0x163f6 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1635a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1635e:	85 ff       	sbrs	r24, 5
   16360:	0a c0       	rjmp	.+20     	; 0x16376 <SS80_COMMANDS+0x108>
                    printf("[Amigo Clear]\n");
   16362:	87 e1       	ldi	r24, 0x17	; 23
   16364:	91 e2       	ldi	r25, 0x21	; 33
   16366:	a0 e0       	ldi	r26, 0x00	; 0
   16368:	ed b7       	in	r30, 0x3d	; 61
   1636a:	fe b7       	in	r31, 0x3e	; 62
   1636c:	81 83       	std	Z+1, r24	; 0x01
   1636e:	92 83       	std	Z+2, r25	; 0x02
   16370:	a3 83       	std	Z+3, r26	; 0x03
   16372:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
                gpib_disable_PPR(SS80p->HEADER.PPR);
   16376:	e0 91 5e 19 	lds	r30, 0x195E	; 0x80195e <SS80p>
   1637a:	f0 91 5f 19 	lds	r31, 0x195F	; 0x80195f <SS80p+0x1>
   1637e:	81 81       	ldd	r24, Z+1	; 0x01
   16380:	90 e0       	ldi	r25, 0x00	; 0
   16382:	0e 94 0c 86 	call	0x10c18	; 0x10c18 <gpib_disable_PPR>
                return( SS80_Amigo_Clear() );
   16386:	1d dc       	rcall	.-1990   	; 0x15bc2 <SS80_Amigo_Clear>
   16388:	18 c0       	rjmp	.+48     	; 0x163ba <SS80_COMMANDS+0x14c>
            }
            return (0);
        }
        if(ch == 0x72 )
   1638a:	12 37       	cpi	r17, 0x72	; 114
   1638c:	c1 f4       	brne	.+48     	; 0x163be <SS80_COMMANDS+0x150>
        {
            if(SS80_is_MLA(listening) )
   1638e:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   16392:	90 e0       	ldi	r25, 0x00	; 0
   16394:	0e 94 06 8c 	call	0x1180c	; 0x1180c <SS80_is_MLA>
   16398:	89 2b       	or	r24, r25
   1639a:	89 f0       	breq	.+34     	; 0x163be <SS80_COMMANDS+0x150>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1639c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   163a0:	85 ff       	sbrs	r24, 5
   163a2:	0a c0       	rjmp	.+20     	; 0x163b8 <SS80_COMMANDS+0x14a>
                    printf("[SS80 Transparent]\n");
   163a4:	83 e0       	ldi	r24, 0x03	; 3
   163a6:	91 e2       	ldi	r25, 0x21	; 33
   163a8:	a0 e0       	ldi	r26, 0x00	; 0
   163aa:	ed b7       	in	r30, 0x3d	; 61
   163ac:	fe b7       	in	r31, 0x3e	; 62
   163ae:	81 83       	std	Z+1, r24	; 0x01
   163b0:	92 83       	std	Z+2, r25	; 0x02
   163b2:	a3 83       	std	Z+3, r26	; 0x03
   163b4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
                return( SS80_Transparent_State() );
   163b8:	58 dc       	rcall	.-1872   	; 0x15c6a <SS80_Transparent_State>
   163ba:	ec 01       	movw	r28, r24
   163bc:	3b c0       	rjmp	.+118    	; 0x16434 <SS80_COMMANDS+0x1c6>
            }
        }
        if(debuglevel & GPIB_ERR)
   163be:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   163c2:	80 ff       	sbrs	r24, 0
   163c4:	18 c0       	rjmp	.+48     	; 0x163f6 <SS80_COMMANDS+0x188>
            printf("[SS80 SC Unknown: %02XH, listen:%02XH, talk:%02XH]\n",
   163c6:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   163ca:	90 e0       	ldi	r25, 0x00	; 0
   163cc:	ed b7       	in	r30, 0x3d	; 61
   163ce:	fe b7       	in	r31, 0x3e	; 62
   163d0:	91 87       	std	Z+9, r25	; 0x09
   163d2:	80 87       	std	Z+8, r24	; 0x08
   163d4:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   163d8:	90 e0       	ldi	r25, 0x00	; 0
   163da:	97 83       	std	Z+7, r25	; 0x07
   163dc:	86 83       	std	Z+6, r24	; 0x06
   163de:	81 2f       	mov	r24, r17
   163e0:	90 e0       	ldi	r25, 0x00	; 0
   163e2:	95 83       	std	Z+5, r25	; 0x05
   163e4:	84 83       	std	Z+4, r24	; 0x04
   163e6:	8f ec       	ldi	r24, 0xCF	; 207
   163e8:	90 e2       	ldi	r25, 0x20	; 32
   163ea:	a0 e0       	ldi	r26, 0x00	; 0
   163ec:	81 83       	std	Z+1, r24	; 0x01
   163ee:	92 83       	std	Z+2, r25	; 0x02
   163f0:	a3 83       	std	Z+3, r26	; 0x03
   163f2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
                0xff & ch, 0xff & listening, 0xff & talking);
        return(0);
   163f6:	c0 e0       	ldi	r28, 0x00	; 0
   163f8:	d0 e0       	ldi	r29, 0x00	; 0
   163fa:	1c c0       	rjmp	.+56     	; 0x16434 <SS80_COMMANDS+0x1c6>
    }

    if(debuglevel & GPIB_ERR)
   163fc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16400:	80 ff       	sbrs	r24, 0
   16402:	f9 cf       	rjmp	.-14     	; 0x163f6 <SS80_COMMANDS+0x188>
        printf("[SS80 Unknown SC: %02XH, listen:%02XH, talk:%02XH]\n",
   16404:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   16408:	90 e0       	ldi	r25, 0x00	; 0
   1640a:	ed b7       	in	r30, 0x3d	; 61
   1640c:	fe b7       	in	r31, 0x3e	; 62
   1640e:	91 87       	std	Z+9, r25	; 0x09
   16410:	80 87       	std	Z+8, r24	; 0x08
   16412:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   16416:	90 e0       	ldi	r25, 0x00	; 0
   16418:	97 83       	std	Z+7, r25	; 0x07
   1641a:	86 83       	std	Z+6, r24	; 0x06
   1641c:	81 2f       	mov	r24, r17
   1641e:	90 e0       	ldi	r25, 0x00	; 0
   16420:	95 83       	std	Z+5, r25	; 0x05
   16422:	84 83       	std	Z+4, r24	; 0x04
   16424:	8b e9       	ldi	r24, 0x9B	; 155
   16426:	90 e2       	ldi	r25, 0x20	; 32
   16428:	a0 e0       	ldi	r26, 0x00	; 0
   1642a:	81 83       	std	Z+1, r24	; 0x01
   1642c:	92 83       	std	Z+2, r25	; 0x02
   1642e:	a3 83       	std	Z+3, r26	; 0x03
   16430:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
    return(0);
}
   16434:	ce 01       	movw	r24, r28
   16436:	cd b7       	in	r28, 0x3d	; 61
   16438:	de b7       	in	r29, 0x3e	; 62
   1643a:	29 96       	adiw	r28, 0x09	; 9
   1643c:	e3 e0       	ldi	r30, 0x03	; 3
   1643e:	0c 94 91 e6 	jmp	0x1cd22	; 0x1cd22 <__epilogue_restores__+0x1e>

00016442 <amigo_overflow_check>:
    }
/// @todo FIXME
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
    AMIGOs->dsj = 0;
    return(status & ERROR_MASK);
}
   16442:	cf 92       	push	r12
   16444:	df 92       	push	r13
   16446:	ef 92       	push	r14
   16448:	0f 93       	push	r16
   1644a:	1f 93       	push	r17
   1644c:	cf 93       	push	r28
   1644e:	df 93       	push	r29
   16450:	00 d0       	rcall	.+0      	; 0x16452 <amigo_overflow_check+0x10>
   16452:	00 d0       	rcall	.+0      	; 0x16454 <amigo_overflow_check+0x12>
   16454:	1f 92       	push	r1
   16456:	ec 01       	movw	r28, r24
   16458:	8b 01       	movw	r16, r22
   1645a:	80 e0       	ldi	r24, 0x00	; 0
   1645c:	90 e0       	ldi	r25, 0x00	; 0
   1645e:	23 e5       	ldi	r18, 0x53	; 83
   16460:	30 e3       	ldi	r19, 0x30	; 48
   16462:	69 01       	movw	r12, r18
   16464:	e1 2c       	mov	r14, r1
   16466:	2d 81       	ldd	r18, Y+5	; 0x05
   16468:	30 e0       	ldi	r19, 0x00	; 0
   1646a:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   1646e:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16472:	42 85       	ldd	r20, Z+10	; 0x0a
   16474:	53 85       	ldd	r21, Z+11	; 0x0b
   16476:	24 17       	cp	r18, r20
   16478:	35 07       	cpc	r19, r21
   1647a:	64 f1       	brlt	.+88     	; 0x164d4 <amigo_overflow_check+0x92>
   1647c:	1d 82       	std	Y+5, r1	; 0x05
   1647e:	2c 81       	ldd	r18, Y+4	; 0x04
   16480:	2f 5f       	subi	r18, 0xFF	; 255
   16482:	2c 83       	std	Y+4, r18	; 0x04
   16484:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16488:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   1648c:	2c 81       	ldd	r18, Y+4	; 0x04
   1648e:	30 e0       	ldi	r19, 0x00	; 0
   16490:	44 85       	ldd	r20, Z+12	; 0x0c
   16492:	55 85       	ldd	r21, Z+13	; 0x0d
   16494:	24 17       	cp	r18, r20
   16496:	35 07       	cpc	r19, r21
   16498:	34 f3       	brlt	.-52     	; 0x16466 <amigo_overflow_check+0x24>
   1649a:	1c 82       	std	Y+4, r1	; 0x04
   1649c:	2b 81       	ldd	r18, Y+3	; 0x03
   1649e:	2f 5f       	subi	r18, 0xFF	; 255
   164a0:	2b 83       	std	Y+3, r18	; 0x03
   164a2:	30 e0       	ldi	r19, 0x00	; 0
   164a4:	46 85       	ldd	r20, Z+14	; 0x0e
   164a6:	57 85       	ldd	r21, Z+15	; 0x0f
   164a8:	24 17       	cp	r18, r20
   164aa:	35 07       	cpc	r19, r21
   164ac:	5c f3       	brlt	.-42     	; 0x16484 <amigo_overflow_check+0x42>
   164ae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   164b2:	80 ff       	sbrs	r24, 0
   164b4:	0c c0       	rjmp	.+24     	; 0x164ce <amigo_overflow_check+0x8c>
   164b6:	01 15       	cp	r16, r1
   164b8:	11 05       	cpc	r17, r1
   164ba:	49 f0       	breq	.+18     	; 0x164ce <amigo_overflow_check+0x8c>
   164bc:	ed b7       	in	r30, 0x3d	; 61
   164be:	fe b7       	in	r31, 0x3e	; 62
   164c0:	15 83       	std	Z+5, r17	; 0x05
   164c2:	04 83       	std	Z+4, r16	; 0x04
   164c4:	c1 82       	std	Z+1, r12	; 0x01
   164c6:	d2 82       	std	Z+2, r13	; 0x02
   164c8:	e3 82       	std	Z+3, r14	; 0x03
   164ca:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   164ce:	81 e0       	ldi	r24, 0x01	; 1
   164d0:	90 e0       	ldi	r25, 0x00	; 0
   164d2:	d8 cf       	rjmp	.-80     	; 0x16484 <amigo_overflow_check+0x42>
   164d4:	0f 90       	pop	r0
   164d6:	0f 90       	pop	r0
   164d8:	0f 90       	pop	r0
   164da:	0f 90       	pop	r0
   164dc:	0f 90       	pop	r0
   164de:	df 91       	pop	r29
   164e0:	cf 91       	pop	r28
   164e2:	1f 91       	pop	r17
   164e4:	0f 91       	pop	r16
   164e6:	ef 90       	pop	r14
   164e8:	df 90       	pop	r13
   164ea:	cf 90       	pop	r12
   164ec:	08 95       	ret

000164ee <amigo_chs_to_logical>:
   164ee:	a1 e1       	ldi	r26, 0x11	; 17
   164f0:	b0 e0       	ldi	r27, 0x00	; 0
   164f2:	ed e7       	ldi	r30, 0x7D	; 125
   164f4:	f2 eb       	ldi	r31, 0xB2	; 178
   164f6:	0c 94 6a e6 	jmp	0x1ccd4	; 0x1ccd4 <__prologue_saves__+0x8>
   164fa:	8b 01       	movw	r16, r22
   164fc:	60 91 5a 19 	lds	r22, 0x195A	; 0x80195a <AMIGOp>
   16500:	70 91 5b 19 	lds	r23, 0x195B	; 0x80195b <AMIGOp+0x1>
   16504:	fb 01       	movw	r30, r22
   16506:	42 85       	ldd	r20, Z+10	; 0x0a
   16508:	53 85       	ldd	r21, Z+11	; 0x0b
   1650a:	fc 01       	movw	r30, r24
   1650c:	c4 81       	ldd	r28, Z+4	; 0x04
   1650e:	d0 e0       	ldi	r29, 0x00	; 0
   16510:	4c 9f       	mul	r20, r28
   16512:	90 01       	movw	r18, r0
   16514:	4d 9f       	mul	r20, r29
   16516:	30 0d       	add	r19, r0
   16518:	5c 9f       	mul	r21, r28
   1651a:	30 0d       	add	r19, r0
   1651c:	11 24       	eor	r1, r1
   1651e:	49 01       	movw	r8, r18
   16520:	33 0f       	add	r19, r19
   16522:	aa 08       	sbc	r10, r10
   16524:	bb 08       	sbc	r11, r11
   16526:	63 80       	ldd	r6, Z+3	; 0x03
   16528:	71 2c       	mov	r7, r1
   1652a:	fb 01       	movw	r30, r22
   1652c:	e4 84       	ldd	r14, Z+12	; 0x0c
   1652e:	f5 84       	ldd	r15, Z+13	; 0x0d
   16530:	4e 9d       	mul	r20, r14
   16532:	d0 01       	movw	r26, r0
   16534:	4f 9d       	mul	r20, r15
   16536:	b0 0d       	add	r27, r0
   16538:	5e 9d       	mul	r21, r14
   1653a:	b0 0d       	add	r27, r0
   1653c:	11 24       	eor	r1, r1
   1653e:	a6 9d       	mul	r26, r6
   16540:	90 01       	movw	r18, r0
   16542:	a7 9d       	mul	r26, r7
   16544:	30 0d       	add	r19, r0
   16546:	b6 9d       	mul	r27, r6
   16548:	30 0d       	add	r19, r0
   1654a:	11 24       	eor	r1, r1
   1654c:	69 01       	movw	r12, r18
   1654e:	33 0f       	add	r19, r19
   16550:	ee 08       	sbc	r14, r14
   16552:	ff 08       	sbc	r15, r15
   16554:	8c 0c       	add	r8, r12
   16556:	9d 1c       	adc	r9, r13
   16558:	ae 1c       	adc	r10, r14
   1655a:	bf 1c       	adc	r11, r15
   1655c:	fc 01       	movw	r30, r24
   1655e:	f5 80       	ldd	r15, Z+5	; 0x05
   16560:	a5 01       	movw	r20, r10
   16562:	94 01       	movw	r18, r8
   16564:	2f 0d       	add	r18, r15
   16566:	31 1d       	adc	r19, r1
   16568:	41 1d       	adc	r20, r1
   1656a:	51 1d       	adc	r21, r1
   1656c:	fb 01       	movw	r30, r22
   1656e:	a0 85       	ldd	r26, Z+8	; 0x08
   16570:	b1 85       	ldd	r27, Z+9	; 0x09
   16572:	0e 94 50 e6 	call	0x1cca0	; 0x1cca0 <__mulshisi3>
   16576:	4b 01       	movw	r8, r22
   16578:	5c 01       	movw	r10, r24
   1657a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1657e:	85 ff       	sbrs	r24, 5
   16580:	22 c0       	rjmp	.+68     	; 0x165c6 <amigo_chs_to_logical+0xd8>
   16582:	8f 2d       	mov	r24, r15
   16584:	90 e0       	ldi	r25, 0x00	; 0
   16586:	ed b7       	in	r30, 0x3d	; 61
   16588:	fe b7       	in	r31, 0x3e	; 62
   1658a:	91 8b       	std	Z+17, r25	; 0x11
   1658c:	80 8b       	std	Z+16, r24	; 0x10
   1658e:	d7 87       	std	Z+15, r29	; 0x0f
   16590:	c6 87       	std	Z+14, r28	; 0x0e
   16592:	75 86       	std	Z+13, r7	; 0x0d
   16594:	64 86       	std	Z+12, r6	; 0x0c
   16596:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   1659a:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   1659e:	81 81       	ldd	r24, Z+1	; 0x01
   165a0:	90 e0       	ldi	r25, 0x00	; 0
   165a2:	ed b7       	in	r30, 0x3d	; 61
   165a4:	fe b7       	in	r31, 0x3e	; 62
   165a6:	93 87       	std	Z+11, r25	; 0x0b
   165a8:	82 87       	std	Z+10, r24	; 0x0a
   165aa:	86 82       	std	Z+6, r8	; 0x06
   165ac:	97 82       	std	Z+7, r9	; 0x07
   165ae:	a0 86       	std	Z+8, r10	; 0x08
   165b0:	b1 86       	std	Z+9, r11	; 0x09
   165b2:	15 83       	std	Z+5, r17	; 0x05
   165b4:	04 83       	std	Z+4, r16	; 0x04
   165b6:	80 e0       	ldi	r24, 0x00	; 0
   165b8:	90 e3       	ldi	r25, 0x30	; 48
   165ba:	a0 e0       	ldi	r26, 0x00	; 0
   165bc:	81 83       	std	Z+1, r24	; 0x01
   165be:	92 83       	std	Z+2, r25	; 0x02
   165c0:	a3 83       	std	Z+3, r26	; 0x03
   165c2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   165c6:	c5 01       	movw	r24, r10
   165c8:	b4 01       	movw	r22, r8
   165ca:	cd b7       	in	r28, 0x3d	; 61
   165cc:	de b7       	in	r29, 0x3e	; 62
   165ce:	61 96       	adiw	r28, 0x11	; 17
   165d0:	ee e0       	ldi	r30, 0x0E	; 14
   165d2:	0c 94 86 e6 	jmp	0x1cd0c	; 0x1cd0c <__epilogue_restores__+0x8>

000165d6 <amigo_init>:
   165d6:	ff 92       	push	r15
   165d8:	0f 93       	push	r16
   165da:	1f 93       	push	r17
   165dc:	cf 93       	push	r28
   165de:	df 93       	push	r29
   165e0:	03 e6       	ldi	r16, 0x63	; 99
   165e2:	1f e1       	ldi	r17, 0x1F	; 31
   165e4:	cb e0       	ldi	r28, 0x0B	; 11
   165e6:	d4 e0       	ldi	r29, 0x04	; 4
   165e8:	82 e0       	ldi	r24, 0x02	; 2
   165ea:	f8 2e       	mov	r15, r24
   165ec:	d8 01       	movw	r26, r16
   165ee:	8c 91       	ld	r24, X
   165f0:	81 30       	cpi	r24, 0x01	; 1
   165f2:	31 f5       	brne	.+76     	; 0x16640 <amigo_init+0x6a>
   165f4:	8c 2f       	mov	r24, r28
   165f6:	0e 94 c4 96 	call	0x12d88	; 0x12d88 <set_active_device>
   165fa:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   165fe:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16602:	10 82       	st	Z, r1
   16604:	9f 01       	movw	r18, r30
   16606:	27 5f       	subi	r18, 0xF7	; 247
   16608:	3f 4f       	sbci	r19, 0xFF	; 255
   1660a:	d9 01       	movw	r26, r18
   1660c:	8d 2f       	mov	r24, r29
   1660e:	1d 92       	st	X+, r1
   16610:	8a 95       	dec	r24
   16612:	e9 f7       	brne	.-6      	; 0x1660e <amigo_init+0x38>
   16614:	2c 5f       	subi	r18, 0xFC	; 252
   16616:	3f 4f       	sbci	r19, 0xFF	; 255
   16618:	d9 01       	movw	r26, r18
   1661a:	8d 2f       	mov	r24, r29
   1661c:	1d 92       	st	X+, r1
   1661e:	8a 95       	dec	r24
   16620:	e9 f7       	brne	.-6      	; 0x1661c <amigo_init+0x46>
   16622:	11 82       	std	Z+1, r1	; 0x01
   16624:	15 82       	std	Z+5, r1	; 0x05
   16626:	14 82       	std	Z+4, r1	; 0x04
   16628:	13 82       	std	Z+3, r1	; 0x03
   1662a:	f6 82       	std	Z+6, r15	; 0x06
   1662c:	10 86       	std	Z+8, r1	; 0x08
   1662e:	17 82       	std	Z+7, r1	; 0x07
   16630:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16634:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16638:	81 81       	ldd	r24, Z+1	; 0x01
   1663a:	90 e0       	ldi	r25, 0x00	; 0
   1663c:	0e 94 0c 86 	call	0x10c18	; 0x10c18 <gpib_disable_PPR>
   16640:	0b 50       	subi	r16, 0x0B	; 11
   16642:	11 09       	sbc	r17, r1
   16644:	c1 50       	subi	r28, 0x01	; 1
   16646:	90 f6       	brcc	.-92     	; 0x165ec <amigo_init+0x16>
   16648:	cd b7       	in	r28, 0x3d	; 61
   1664a:	de b7       	in	r29, 0x3e	; 62
   1664c:	e5 e0       	ldi	r30, 0x05	; 5
   1664e:	0c 94 8f e6 	jmp	0x1cd1e	; 0x1cd1e <__epilogue_restores__+0x1a>

00016652 <amigo_request_logical_address>:
   16652:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16656:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   1665a:	15 86       	std	Z+13, r1	; 0x0d
   1665c:	83 81       	ldd	r24, Z+3	; 0x03
   1665e:	86 87       	std	Z+14, r24	; 0x0e
   16660:	84 81       	ldd	r24, Z+4	; 0x04
   16662:	87 87       	std	Z+15, r24	; 0x0f
   16664:	85 81       	ldd	r24, Z+5	; 0x05
   16666:	80 8b       	std	Z+16, r24	; 0x10
   16668:	80 e0       	ldi	r24, 0x00	; 0
   1666a:	90 e0       	ldi	r25, 0x00	; 0
   1666c:	08 95       	ret

0001666e <amigo_request_status>:
   1666e:	00 d0       	rcall	.+0      	; 0x16670 <amigo_request_status+0x2>
   16670:	1f 92       	push	r1
   16672:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16676:	85 ff       	sbrs	r24, 5
   16678:	0a c0       	rjmp	.+20     	; 0x1668e <amigo_request_status+0x20>
   1667a:	83 ed       	ldi	r24, 0xD3	; 211
   1667c:	90 e3       	ldi	r25, 0x30	; 48
   1667e:	a0 e0       	ldi	r26, 0x00	; 0
   16680:	ed b7       	in	r30, 0x3d	; 61
   16682:	fe b7       	in	r31, 0x3e	; 62
   16684:	81 83       	std	Z+1, r24	; 0x01
   16686:	92 83       	std	Z+2, r25	; 0x02
   16688:	a3 83       	std	Z+3, r26	; 0x03
   1668a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1668e:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16692:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16696:	11 86       	std	Z+9, r1	; 0x09
   16698:	81 81       	ldd	r24, Z+1	; 0x01
   1669a:	82 87       	std	Z+10, r24	; 0x0a
   1669c:	8d e0       	ldi	r24, 0x0D	; 13
   1669e:	83 87       	std	Z+11, r24	; 0x0b
   166a0:	14 86       	std	Z+12, r1	; 0x0c
   166a2:	0e 94 95 6f 	call	0xdf2a	; 0xdf2a <mmc_wp_status>
   166a6:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   166aa:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   166ae:	89 2b       	or	r24, r25
   166b0:	19 f0       	breq	.+6      	; 0x166b8 <amigo_request_status+0x4a>
   166b2:	84 85       	ldd	r24, Z+12	; 0x0c
   166b4:	80 66       	ori	r24, 0x60	; 96
   166b6:	84 87       	std	Z+12, r24	; 0x0c
   166b8:	86 81       	ldd	r24, Z+6	; 0x06
   166ba:	82 30       	cpi	r24, 0x02	; 2
   166bc:	31 f4       	brne	.+12     	; 0x166ca <amigo_request_status+0x5c>
   166be:	83 e1       	ldi	r24, 0x13	; 19
   166c0:	81 87       	std	Z+9, r24	; 0x09
   166c2:	84 85       	ldd	r24, Z+12	; 0x0c
   166c4:	88 60       	ori	r24, 0x08	; 8
   166c6:	84 87       	std	Z+12, r24	; 0x0c
   166c8:	21 c0       	rjmp	.+66     	; 0x1670c <amigo_request_status+0x9e>
   166ca:	27 81       	ldd	r18, Z+7	; 0x07
   166cc:	30 85       	ldd	r19, Z+8	; 0x08
   166ce:	21 15       	cp	r18, r1
   166d0:	31 05       	cpc	r19, r1
   166d2:	11 f4       	brne	.+4      	; 0x166d8 <amigo_request_status+0x6a>
   166d4:	81 30       	cpi	r24, 0x01	; 1
   166d6:	d1 f4       	brne	.+52     	; 0x1670c <amigo_request_status+0x9e>
   166d8:	26 fd       	sbrc	r18, 6
   166da:	0c c0       	rjmp	.+24     	; 0x166f4 <amigo_request_status+0x86>
   166dc:	25 ff       	sbrs	r18, 5
   166de:	03 c0       	rjmp	.+6      	; 0x166e6 <amigo_request_status+0x78>
   166e0:	8a e0       	ldi	r24, 0x0A	; 10
   166e2:	81 87       	std	Z+9, r24	; 0x09
   166e4:	0d c0       	rjmp	.+26     	; 0x16700 <amigo_request_status+0x92>
   166e6:	84 85       	ldd	r24, Z+12	; 0x0c
   166e8:	24 ff       	sbrs	r18, 4
   166ea:	02 c0       	rjmp	.+4      	; 0x166f0 <amigo_request_status+0x82>
   166ec:	83 60       	ori	r24, 0x03	; 3
   166ee:	07 c0       	rjmp	.+14     	; 0x166fe <amigo_request_status+0x90>
   166f0:	21 ff       	sbrs	r18, 1
   166f2:	02 c0       	rjmp	.+4      	; 0x166f8 <amigo_request_status+0x8a>
   166f4:	83 e1       	ldi	r24, 0x13	; 19
   166f6:	f5 cf       	rjmp	.-22     	; 0x166e2 <amigo_request_status+0x74>
   166f8:	22 ff       	sbrs	r18, 2
   166fa:	02 c0       	rjmp	.+4      	; 0x16700 <amigo_request_status+0x92>
   166fc:	84 60       	ori	r24, 0x04	; 4
   166fe:	84 87       	std	Z+12, r24	; 0x0c
   16700:	84 85       	ldd	r24, Z+12	; 0x0c
   16702:	80 61       	ori	r24, 0x10	; 16
   16704:	84 87       	std	Z+12, r24	; 0x0c
   16706:	83 85       	ldd	r24, Z+11	; 0x0b
   16708:	80 68       	ori	r24, 0x80	; 128
   1670a:	83 87       	std	Z+11, r24	; 0x0b
   1670c:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16710:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16714:	81 81       	ldd	r24, Z+1	; 0x01
   16716:	90 e0       	ldi	r25, 0x00	; 0
   16718:	0e 94 d6 85 	call	0x10bac	; 0x10bac <gpib_enable_PPR>
   1671c:	80 e0       	ldi	r24, 0x00	; 0
   1671e:	90 e0       	ldi	r25, 0x00	; 0
   16720:	0f 90       	pop	r0
   16722:	0f 90       	pop	r0
   16724:	0f 90       	pop	r0
   16726:	08 95       	ret

00016728 <amigo_send_logical_address>:
   16728:	a5 e0       	ldi	r26, 0x05	; 5
   1672a:	b0 e0       	ldi	r27, 0x00	; 0
   1672c:	ea e9       	ldi	r30, 0x9A	; 154
   1672e:	f3 eb       	ldi	r31, 0xB3	; 179
   16730:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
   16734:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16738:	85 ff       	sbrs	r24, 5
   1673a:	0a c0       	rjmp	.+20     	; 0x16750 <amigo_send_logical_address+0x28>
   1673c:	85 eb       	ldi	r24, 0xB5	; 181
   1673e:	90 e3       	ldi	r25, 0x30	; 48
   16740:	a0 e0       	ldi	r26, 0x00	; 0
   16742:	ed b7       	in	r30, 0x3d	; 61
   16744:	fe b7       	in	r31, 0x3e	; 62
   16746:	81 83       	std	Z+1, r24	; 0x01
   16748:	92 83       	std	Z+2, r25	; 0x02
   1674a:	a3 83       	std	Z+3, r26	; 0x03
   1674c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   16750:	80 e0       	ldi	r24, 0x00	; 0
   16752:	91 e0       	ldi	r25, 0x01	; 1
   16754:	9d 83       	std	Y+5, r25	; 0x05
   16756:	8c 83       	std	Y+4, r24	; 0x04
   16758:	80 91 58 19 	lds	r24, 0x1958	; 0x801958 <AMIGOs>
   1675c:	90 91 59 19 	lds	r25, 0x1959	; 0x801959 <AMIGOs+0x1>
   16760:	ae 01       	movw	r20, r28
   16762:	4c 5f       	subi	r20, 0xFC	; 252
   16764:	5f 4f       	sbci	r21, 0xFF	; 255
   16766:	64 e0       	ldi	r22, 0x04	; 4
   16768:	70 e0       	ldi	r23, 0x00	; 0
   1676a:	0d 96       	adiw	r24, 0x0d	; 13
   1676c:	0e 94 06 8b 	call	0x1160c	; 0x1160c <gpib_write_str>
   16770:	2c 81       	ldd	r18, Y+4	; 0x04
   16772:	3d 81       	ldd	r19, Y+5	; 0x05
   16774:	22 27       	eor	r18, r18
   16776:	30 7d       	andi	r19, 0xD0	; 208
   16778:	23 2b       	or	r18, r19
   1677a:	11 f4       	brne	.+4      	; 0x16780 <amigo_send_logical_address+0x58>
   1677c:	04 97       	sbiw	r24, 0x04	; 4
   1677e:	c9 f0       	breq	.+50     	; 0x167b2 <amigo_send_logical_address+0x8a>
   16780:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16784:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16788:	87 81       	ldd	r24, Z+7	; 0x07
   1678a:	90 85       	ldd	r25, Z+8	; 0x08
   1678c:	80 62       	ori	r24, 0x20	; 32
   1678e:	90 87       	std	Z+8, r25	; 0x08
   16790:	87 83       	std	Z+7, r24	; 0x07
   16792:	81 e0       	ldi	r24, 0x01	; 1
   16794:	86 83       	std	Z+6, r24	; 0x06
   16796:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1679a:	80 ff       	sbrs	r24, 0
   1679c:	0a c0       	rjmp	.+20     	; 0x167b2 <amigo_send_logical_address+0x8a>
   1679e:	8b e9       	ldi	r24, 0x9B	; 155
   167a0:	90 e3       	ldi	r25, 0x30	; 48
   167a2:	a0 e0       	ldi	r26, 0x00	; 0
   167a4:	ed b7       	in	r30, 0x3d	; 61
   167a6:	fe b7       	in	r31, 0x3e	; 62
   167a8:	81 83       	std	Z+1, r24	; 0x01
   167aa:	92 83       	std	Z+2, r25	; 0x02
   167ac:	a3 83       	std	Z+3, r26	; 0x03
   167ae:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   167b2:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   167b6:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   167ba:	81 81       	ldd	r24, Z+1	; 0x01
   167bc:	90 e0       	ldi	r25, 0x00	; 0
   167be:	0e 94 d6 85 	call	0x10bac	; 0x10bac <gpib_enable_PPR>
   167c2:	8c 81       	ldd	r24, Y+4	; 0x04
   167c4:	9d 81       	ldd	r25, Y+5	; 0x05
   167c6:	88 27       	eor	r24, r24
   167c8:	90 7d       	andi	r25, 0xD0	; 208
   167ca:	25 96       	adiw	r28, 0x05	; 5
   167cc:	e2 e0       	ldi	r30, 0x02	; 2
   167ce:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

000167d2 <amigo_send_status>:
   167d2:	a5 e0       	ldi	r26, 0x05	; 5
   167d4:	b0 e0       	ldi	r27, 0x00	; 0
   167d6:	ef ee       	ldi	r30, 0xEF	; 239
   167d8:	f3 eb       	ldi	r31, 0xB3	; 179
   167da:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
   167de:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   167e2:	85 ff       	sbrs	r24, 5
   167e4:	0a c0       	rjmp	.+20     	; 0x167fa <amigo_send_status+0x28>
   167e6:	86 e8       	ldi	r24, 0x86	; 134
   167e8:	90 e3       	ldi	r25, 0x30	; 48
   167ea:	a0 e0       	ldi	r26, 0x00	; 0
   167ec:	ed b7       	in	r30, 0x3d	; 61
   167ee:	fe b7       	in	r31, 0x3e	; 62
   167f0:	81 83       	std	Z+1, r24	; 0x01
   167f2:	92 83       	std	Z+2, r25	; 0x02
   167f4:	a3 83       	std	Z+3, r26	; 0x03
   167f6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   167fa:	80 e0       	ldi	r24, 0x00	; 0
   167fc:	91 e0       	ldi	r25, 0x01	; 1
   167fe:	9d 83       	std	Y+5, r25	; 0x05
   16800:	8c 83       	std	Y+4, r24	; 0x04
   16802:	80 91 58 19 	lds	r24, 0x1958	; 0x801958 <AMIGOs>
   16806:	90 91 59 19 	lds	r25, 0x1959	; 0x801959 <AMIGOs+0x1>
   1680a:	ae 01       	movw	r20, r28
   1680c:	4c 5f       	subi	r20, 0xFC	; 252
   1680e:	5f 4f       	sbci	r21, 0xFF	; 255
   16810:	64 e0       	ldi	r22, 0x04	; 4
   16812:	70 e0       	ldi	r23, 0x00	; 0
   16814:	09 96       	adiw	r24, 0x09	; 9
   16816:	0e 94 06 8b 	call	0x1160c	; 0x1160c <gpib_write_str>
   1681a:	2c 81       	ldd	r18, Y+4	; 0x04
   1681c:	3d 81       	ldd	r19, Y+5	; 0x05
   1681e:	22 27       	eor	r18, r18
   16820:	30 7d       	andi	r19, 0xD0	; 208
   16822:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16826:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   1682a:	23 2b       	or	r18, r19
   1682c:	11 f4       	brne	.+4      	; 0x16832 <amigo_send_status+0x60>
   1682e:	04 97       	sbiw	r24, 0x04	; 4
   16830:	b1 f0       	breq	.+44     	; 0x1685e <amigo_send_status+0x8c>
   16832:	87 81       	ldd	r24, Z+7	; 0x07
   16834:	90 85       	ldd	r25, Z+8	; 0x08
   16836:	80 62       	ori	r24, 0x20	; 32
   16838:	90 87       	std	Z+8, r25	; 0x08
   1683a:	87 83       	std	Z+7, r24	; 0x07
   1683c:	81 e0       	ldi	r24, 0x01	; 1
   1683e:	86 83       	std	Z+6, r24	; 0x06
   16840:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16844:	80 ff       	sbrs	r24, 0
   16846:	0e c0       	rjmp	.+28     	; 0x16864 <amigo_send_status+0x92>
   16848:	8c e6       	ldi	r24, 0x6C	; 108
   1684a:	90 e3       	ldi	r25, 0x30	; 48
   1684c:	a0 e0       	ldi	r26, 0x00	; 0
   1684e:	ed b7       	in	r30, 0x3d	; 61
   16850:	fe b7       	in	r31, 0x3e	; 62
   16852:	81 83       	std	Z+1, r24	; 0x01
   16854:	92 83       	std	Z+2, r25	; 0x02
   16856:	a3 83       	std	Z+3, r26	; 0x03
   16858:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1685c:	03 c0       	rjmp	.+6      	; 0x16864 <amigo_send_status+0x92>
   1685e:	10 86       	std	Z+8, r1	; 0x08
   16860:	17 82       	std	Z+7, r1	; 0x07
   16862:	16 82       	std	Z+6, r1	; 0x06
   16864:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16868:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   1686c:	81 81       	ldd	r24, Z+1	; 0x01
   1686e:	90 e0       	ldi	r25, 0x00	; 0
   16870:	0e 94 d6 85 	call	0x10bac	; 0x10bac <gpib_enable_PPR>
   16874:	8c 81       	ldd	r24, Y+4	; 0x04
   16876:	9d 81       	ldd	r25, Y+5	; 0x05
   16878:	88 27       	eor	r24, r24
   1687a:	90 7d       	andi	r25, 0xD0	; 208
   1687c:	25 96       	adiw	r28, 0x05	; 5
   1687e:	e2 e0       	ldi	r30, 0x02	; 2
   16880:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00016884 <amigo_increment>:
   16884:	a1 e1       	ldi	r26, 0x11	; 17
   16886:	b0 e0       	ldi	r27, 0x00	; 0
   16888:	e8 e4       	ldi	r30, 0x48	; 72
   1688a:	f4 eb       	ldi	r31, 0xB4	; 180
   1688c:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
   16890:	bc 01       	movw	r22, r24
   16892:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16896:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   1689a:	91 e1       	ldi	r25, 0x11	; 17
   1689c:	de 01       	movw	r26, r28
   1689e:	11 96       	adiw	r26, 0x01	; 1
   168a0:	01 90       	ld	r0, Z+
   168a2:	0d 92       	st	X+, r0
   168a4:	9a 95       	dec	r25
   168a6:	e1 f7       	brne	.-8      	; 0x168a0 <amigo_increment+0x1c>
   168a8:	9e 81       	ldd	r25, Y+6	; 0x06
   168aa:	9f 5f       	subi	r25, 0xFF	; 255
   168ac:	9e 83       	std	Y+6, r25	; 0x06
   168ae:	ce 01       	movw	r24, r28
   168b0:	01 96       	adiw	r24, 0x01	; 1
   168b2:	c7 dd       	rcall	.-1138   	; 0x16442 <amigo_overflow_check>
   168b4:	00 97       	sbiw	r24, 0x00	; 0
   168b6:	59 f4       	brne	.+22     	; 0x168ce <amigo_increment+0x4a>
   168b8:	a0 91 58 19 	lds	r26, 0x1958	; 0x801958 <AMIGOs>
   168bc:	b0 91 59 19 	lds	r27, 0x1959	; 0x801959 <AMIGOs+0x1>
   168c0:	21 e1       	ldi	r18, 0x11	; 17
   168c2:	fe 01       	movw	r30, r28
   168c4:	31 96       	adiw	r30, 0x01	; 1
   168c6:	01 90       	ld	r0, Z+
   168c8:	0d 92       	st	X+, r0
   168ca:	2a 95       	dec	r18
   168cc:	e1 f7       	brne	.-8      	; 0x168c6 <amigo_increment+0x42>
   168ce:	61 96       	adiw	r28, 0x11	; 17
   168d0:	e2 e0       	ldi	r30, 0x02	; 2
   168d2:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

000168d6 <amigo_seek>:
   168d6:	0f 93       	push	r16
   168d8:	1f 93       	push	r17
   168da:	cf 93       	push	r28
   168dc:	df 93       	push	r29
   168de:	ec 01       	movw	r28, r24
   168e0:	6b e7       	ldi	r22, 0x7B	; 123
   168e2:	75 e1       	ldi	r23, 0x15	; 21
   168e4:	ae dd       	rcall	.-1188   	; 0x16442 <amigo_overflow_check>
   168e6:	8c 01       	movw	r16, r24
   168e8:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   168ec:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   168f0:	89 2b       	or	r24, r25
   168f2:	41 f0       	breq	.+16     	; 0x16904 <amigo_seek+0x2e>
   168f4:	81 e0       	ldi	r24, 0x01	; 1
   168f6:	86 83       	std	Z+6, r24	; 0x06
   168f8:	87 81       	ldd	r24, Z+7	; 0x07
   168fa:	90 85       	ldd	r25, Z+8	; 0x08
   168fc:	84 60       	ori	r24, 0x04	; 4
   168fe:	90 87       	std	Z+8, r25	; 0x08
   16900:	87 83       	std	Z+7, r24	; 0x07
   16902:	06 c0       	rjmp	.+12     	; 0x16910 <amigo_seek+0x3a>
   16904:	8d 81       	ldd	r24, Y+5	; 0x05
   16906:	85 83       	std	Z+5, r24	; 0x05
   16908:	8c 81       	ldd	r24, Y+4	; 0x04
   1690a:	84 83       	std	Z+4, r24	; 0x04
   1690c:	8b 81       	ldd	r24, Y+3	; 0x03
   1690e:	83 83       	std	Z+3, r24	; 0x03
   16910:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16914:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16918:	81 81       	ldd	r24, Z+1	; 0x01
   1691a:	90 e0       	ldi	r25, 0x00	; 0
   1691c:	0e 94 d6 85 	call	0x10bac	; 0x10bac <gpib_enable_PPR>
   16920:	c8 01       	movw	r24, r16
   16922:	df 91       	pop	r29
   16924:	cf 91       	pop	r28
   16926:	1f 91       	pop	r17
   16928:	0f 91       	pop	r16
   1692a:	08 95       	ret

0001692c <amigo_verify>:
   1692c:	8f 92       	push	r8
   1692e:	9f 92       	push	r9
   16930:	af 92       	push	r10
   16932:	bf 92       	push	r11
   16934:	ef 92       	push	r14
   16936:	ff 92       	push	r15
   16938:	0f 93       	push	r16
   1693a:	1f 93       	push	r17
   1693c:	cf 93       	push	r28
   1693e:	df 93       	push	r29
   16940:	ad b7       	in	r26, 0x3d	; 61
   16942:	be b7       	in	r27, 0x3e	; 62
   16944:	19 97       	sbiw	r26, 0x09	; 9
   16946:	0f b6       	in	r0, 0x3f	; 63
   16948:	f8 94       	cli
   1694a:	be bf       	out	0x3e, r27	; 62
   1694c:	0f be       	out	0x3f, r0	; 63
   1694e:	ad bf       	out	0x3d, r26	; 61
   16950:	7c 01       	movw	r14, r24
   16952:	60 e8       	ldi	r22, 0x80	; 128
   16954:	75 e1       	ldi	r23, 0x15	; 21
   16956:	80 91 58 19 	lds	r24, 0x1958	; 0x801958 <AMIGOs>
   1695a:	90 91 59 19 	lds	r25, 0x1959	; 0x801959 <AMIGOs+0x1>
   1695e:	c7 dd       	rcall	.-1138   	; 0x164ee <amigo_chs_to_logical>
   16960:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16964:	25 ff       	sbrs	r18, 5
   16966:	10 c0       	rjmp	.+32     	; 0x16988 <amigo_verify+0x5c>
   16968:	ed b7       	in	r30, 0x3d	; 61
   1696a:	fe b7       	in	r31, 0x3e	; 62
   1696c:	e0 86       	std	Z+8, r14	; 0x08
   1696e:	f1 86       	std	Z+9, r15	; 0x09
   16970:	64 83       	std	Z+4, r22	; 0x04
   16972:	75 83       	std	Z+5, r23	; 0x05
   16974:	86 83       	std	Z+6, r24	; 0x06
   16976:	97 83       	std	Z+7, r25	; 0x07
   16978:	8b e2       	ldi	r24, 0x2B	; 43
   1697a:	90 e3       	ldi	r25, 0x30	; 48
   1697c:	a0 e0       	ldi	r26, 0x00	; 0
   1697e:	81 83       	std	Z+1, r24	; 0x01
   16980:	92 83       	std	Z+2, r25	; 0x02
   16982:	a3 83       	std	Z+3, r26	; 0x03
   16984:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   16988:	e7 01       	movw	r28, r14
   1698a:	20 97       	sbiw	r28, 0x00	; 0
   1698c:	09 f4       	brne	.+2      	; 0x16990 <amigo_verify+0x64>
   1698e:	4b c0       	rjmp	.+150    	; 0x16a26 <amigo_verify+0xfa>
   16990:	6d e8       	ldi	r22, 0x8D	; 141
   16992:	75 e1       	ldi	r23, 0x15	; 21
   16994:	80 91 58 19 	lds	r24, 0x1958	; 0x801958 <AMIGOs>
   16998:	90 91 59 19 	lds	r25, 0x1959	; 0x801959 <AMIGOs+0x1>
   1699c:	a8 dd       	rcall	.-1200   	; 0x164ee <amigo_chs_to_logical>
   1699e:	4b 01       	movw	r8, r22
   169a0:	5c 01       	movw	r10, r24
   169a2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   169a6:	86 fd       	sbrc	r24, 6
   169a8:	0e 94 fc 84 	call	0x109f8	; 0x109f8 <gpib_timer_elapsed_begin>
   169ac:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   169b0:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   169b4:	e0 90 58 19 	lds	r14, 0x1958	; 0x801958 <AMIGOs>
   169b8:	f0 90 59 19 	lds	r15, 0x1959	; 0x801959 <AMIGOs+0x1>
   169bc:	87 e0       	ldi	r24, 0x07	; 7
   169be:	e8 0e       	add	r14, r24
   169c0:	f1 1c       	adc	r15, r1
   169c2:	00 85       	ldd	r16, Z+8	; 0x08
   169c4:	11 85       	ldd	r17, Z+9	; 0x09
   169c6:	20 ee       	ldi	r18, 0xE0	; 224
   169c8:	3c e1       	ldi	r19, 0x1C	; 28
   169ca:	b5 01       	movw	r22, r10
   169cc:	a4 01       	movw	r20, r8
   169ce:	82 81       	ldd	r24, Z+2	; 0x02
   169d0:	93 81       	ldd	r25, Z+3	; 0x03
   169d2:	0e 94 4e 84 	call	0x1089c	; 0x1089c <dbf_open_read>
   169d6:	7c 01       	movw	r14, r24
   169d8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   169dc:	86 ff       	sbrs	r24, 6
   169de:	04 c0       	rjmp	.+8      	; 0x169e8 <amigo_verify+0xbc>
   169e0:	84 e9       	ldi	r24, 0x94	; 148
   169e2:	90 e1       	ldi	r25, 0x10	; 16
   169e4:	0e 94 0e 85 	call	0x10a1c	; 0x10a1c <gpib_timer_elapsed_end>
   169e8:	20 91 58 19 	lds	r18, 0x1958	; 0x801958 <AMIGOs>
   169ec:	30 91 59 19 	lds	r19, 0x1959	; 0x801959 <AMIGOs+0x1>
   169f0:	f9 01       	movw	r30, r18
   169f2:	87 81       	ldd	r24, Z+7	; 0x07
   169f4:	90 85       	ldd	r25, Z+8	; 0x08
   169f6:	89 2b       	or	r24, r25
   169f8:	21 f0       	breq	.+8      	; 0x16a02 <amigo_verify+0xd6>
   169fa:	81 e0       	ldi	r24, 0x01	; 1
   169fc:	f9 01       	movw	r30, r18
   169fe:	86 83       	std	Z+6, r24	; 0x06
   16a00:	15 c0       	rjmp	.+42     	; 0x16a2c <amigo_verify+0x100>
   16a02:	80 91 5a 19 	lds	r24, 0x195A	; 0x80195a <AMIGOp>
   16a06:	90 91 5b 19 	lds	r25, 0x195B	; 0x80195b <AMIGOp+0x1>
   16a0a:	fc 01       	movw	r30, r24
   16a0c:	80 85       	ldd	r24, Z+8	; 0x08
   16a0e:	91 85       	ldd	r25, Z+9	; 0x09
   16a10:	e8 16       	cp	r14, r24
   16a12:	f9 06       	cpc	r15, r25
   16a14:	91 f7       	brne	.-28     	; 0x169fa <amigo_verify+0xce>
   16a16:	85 e9       	ldi	r24, 0x95	; 149
   16a18:	95 e1       	ldi	r25, 0x15	; 21
   16a1a:	34 df       	rcall	.-408    	; 0x16884 <amigo_increment>
   16a1c:	21 97       	sbiw	r28, 0x01	; 1
   16a1e:	89 2b       	or	r24, r25
   16a20:	09 f4       	brne	.+2      	; 0x16a24 <amigo_verify+0xf8>
   16a22:	b3 cf       	rjmp	.-154    	; 0x1698a <amigo_verify+0x5e>
   16a24:	03 c0       	rjmp	.+6      	; 0x16a2c <amigo_verify+0x100>
   16a26:	c0 e0       	ldi	r28, 0x00	; 0
   16a28:	d0 e0       	ldi	r29, 0x00	; 0
   16a2a:	02 c0       	rjmp	.+4      	; 0x16a30 <amigo_verify+0x104>
   16a2c:	c1 e0       	ldi	r28, 0x01	; 1
   16a2e:	d0 e0       	ldi	r29, 0x00	; 0
   16a30:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16a34:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16a38:	81 81       	ldd	r24, Z+1	; 0x01
   16a3a:	90 e0       	ldi	r25, 0x00	; 0
   16a3c:	0e 94 d6 85 	call	0x10bac	; 0x10bac <gpib_enable_PPR>
   16a40:	ce 01       	movw	r24, r28
   16a42:	ad b7       	in	r26, 0x3d	; 61
   16a44:	be b7       	in	r27, 0x3e	; 62
   16a46:	19 96       	adiw	r26, 0x09	; 9
   16a48:	0f b6       	in	r0, 0x3f	; 63
   16a4a:	f8 94       	cli
   16a4c:	be bf       	out	0x3e, r27	; 62
   16a4e:	0f be       	out	0x3f, r0	; 63
   16a50:	ad bf       	out	0x3d, r26	; 61
   16a52:	df 91       	pop	r29
   16a54:	cf 91       	pop	r28
   16a56:	1f 91       	pop	r17
   16a58:	0f 91       	pop	r16
   16a5a:	ff 90       	pop	r15
   16a5c:	ef 90       	pop	r14
   16a5e:	bf 90       	pop	r11
   16a60:	af 90       	pop	r10
   16a62:	9f 90       	pop	r9
   16a64:	8f 90       	pop	r8
   16a66:	08 95       	ret

00016a68 <amigo_format>:
   16a68:	ef 92       	push	r14
   16a6a:	ff 92       	push	r15
   16a6c:	0f 93       	push	r16
   16a6e:	1f 93       	push	r17
   16a70:	cf 93       	push	r28
   16a72:	df 93       	push	r29
   16a74:	00 d0       	rcall	.+0      	; 0x16a76 <amigo_format+0xe>
   16a76:	1f 92       	push	r1
   16a78:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16a7c:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16a80:	15 82       	std	Z+5, r1	; 0x05
   16a82:	14 82       	std	Z+4, r1	; 0x04
   16a84:	13 82       	std	Z+3, r1	; 0x03
   16a86:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16a8a:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16a8e:	40 85       	ldd	r20, Z+8	; 0x08
   16a90:	51 85       	ldd	r21, Z+9	; 0x09
   16a92:	68 2f       	mov	r22, r24
   16a94:	70 e0       	ldi	r23, 0x00	; 0
   16a96:	80 ee       	ldi	r24, 0xE0	; 224
   16a98:	9c e1       	ldi	r25, 0x1C	; 28
   16a9a:	0e 94 5e ea 	call	0x1d4bc	; 0x1d4bc <memset>
   16a9e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16aa2:	85 ff       	sbrs	r24, 5
   16aa4:	0a c0       	rjmp	.+20     	; 0x16aba <amigo_format+0x52>
   16aa6:	80 ef       	ldi	r24, 0xF0	; 240
   16aa8:	9f e2       	ldi	r25, 0x2F	; 47
   16aaa:	a0 e0       	ldi	r26, 0x00	; 0
   16aac:	ed b7       	in	r30, 0x3d	; 61
   16aae:	fe b7       	in	r31, 0x3e	; 62
   16ab0:	81 83       	std	Z+1, r24	; 0x01
   16ab2:	92 83       	std	Z+2, r25	; 0x02
   16ab4:	a3 83       	std	Z+3, r26	; 0x03
   16ab6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   16aba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16abe:	86 fd       	sbrc	r24, 6
   16ac0:	0e 94 fc 84 	call	0x109f8	; 0x109f8 <gpib_timer_elapsed_begin>
   16ac4:	6c e9       	ldi	r22, 0x9C	; 156
   16ac6:	75 e1       	ldi	r23, 0x15	; 21
   16ac8:	80 91 58 19 	lds	r24, 0x1958	; 0x801958 <AMIGOs>
   16acc:	90 91 59 19 	lds	r25, 0x1959	; 0x801959 <AMIGOs+0x1>
   16ad0:	0e dd       	rcall	.-1508   	; 0x164ee <amigo_chs_to_logical>
   16ad2:	ab 01       	movw	r20, r22
   16ad4:	bc 01       	movw	r22, r24
   16ad6:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16ada:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16ade:	e0 90 58 19 	lds	r14, 0x1958	; 0x801958 <AMIGOs>
   16ae2:	f0 90 59 19 	lds	r15, 0x1959	; 0x801959 <AMIGOs+0x1>
   16ae6:	87 e0       	ldi	r24, 0x07	; 7
   16ae8:	e8 0e       	add	r14, r24
   16aea:	f1 1c       	adc	r15, r1
   16aec:	00 85       	ldd	r16, Z+8	; 0x08
   16aee:	11 85       	ldd	r17, Z+9	; 0x09
   16af0:	20 ee       	ldi	r18, 0xE0	; 224
   16af2:	3c e1       	ldi	r19, 0x1C	; 28
   16af4:	82 81       	ldd	r24, Z+2	; 0x02
   16af6:	93 81       	ldd	r25, Z+3	; 0x03
   16af8:	0e 94 a5 84 	call	0x1094a	; 0x1094a <dbf_open_write>
   16afc:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16b00:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16b04:	27 81       	ldd	r18, Z+7	; 0x07
   16b06:	30 85       	ldd	r19, Z+8	; 0x08
   16b08:	21 15       	cp	r18, r1
   16b0a:	31 05       	cpc	r19, r1
   16b0c:	49 f4       	brne	.+18     	; 0x16b20 <amigo_format+0xb8>
   16b0e:	c0 91 5a 19 	lds	r28, 0x195A	; 0x80195a <AMIGOp>
   16b12:	d0 91 5b 19 	lds	r29, 0x195B	; 0x80195b <AMIGOp+0x1>
   16b16:	48 85       	ldd	r20, Y+8	; 0x08
   16b18:	59 85       	ldd	r21, Y+9	; 0x09
   16b1a:	84 17       	cp	r24, r20
   16b1c:	95 07       	cpc	r25, r21
   16b1e:	41 f0       	breq	.+16     	; 0x16b30 <amigo_format+0xc8>
   16b20:	22 60       	ori	r18, 0x02	; 2
   16b22:	30 87       	std	Z+8, r19	; 0x08
   16b24:	27 83       	std	Z+7, r18	; 0x07
   16b26:	81 e0       	ldi	r24, 0x01	; 1
   16b28:	86 83       	std	Z+6, r24	; 0x06
   16b2a:	c1 e0       	ldi	r28, 0x01	; 1
   16b2c:	d0 e0       	ldi	r29, 0x00	; 0
   16b2e:	0f c0       	rjmp	.+30     	; 0x16b4e <amigo_format+0xe6>
   16b30:	80 e0       	ldi	r24, 0x00	; 0
   16b32:	90 e0       	ldi	r25, 0x00	; 0
   16b34:	a7 de       	rcall	.-690    	; 0x16884 <amigo_increment>
   16b36:	89 2b       	or	r24, r25
   16b38:	29 f2       	breq	.-118    	; 0x16ac4 <amigo_format+0x5c>
   16b3a:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16b3e:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16b42:	15 82       	std	Z+5, r1	; 0x05
   16b44:	14 82       	std	Z+4, r1	; 0x04
   16b46:	13 82       	std	Z+3, r1	; 0x03
   16b48:	16 82       	std	Z+6, r1	; 0x06
   16b4a:	c0 e0       	ldi	r28, 0x00	; 0
   16b4c:	d0 e0       	ldi	r29, 0x00	; 0
   16b4e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16b52:	86 ff       	sbrs	r24, 6
   16b54:	04 c0       	rjmp	.+8      	; 0x16b5e <amigo_format+0xf6>
   16b56:	8c e9       	ldi	r24, 0x9C	; 156
   16b58:	95 e1       	ldi	r25, 0x15	; 21
   16b5a:	0e 94 0e 85 	call	0x10a1c	; 0x10a1c <gpib_timer_elapsed_end>
   16b5e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16b62:	85 ff       	sbrs	r24, 5
   16b64:	0a c0       	rjmp	.+20     	; 0x16b7a <amigo_format+0x112>
   16b66:	8b ed       	ldi	r24, 0xDB	; 219
   16b68:	9f e2       	ldi	r25, 0x2F	; 47
   16b6a:	a0 e0       	ldi	r26, 0x00	; 0
   16b6c:	ed b7       	in	r30, 0x3d	; 61
   16b6e:	fe b7       	in	r31, 0x3e	; 62
   16b70:	81 83       	std	Z+1, r24	; 0x01
   16b72:	92 83       	std	Z+2, r25	; 0x02
   16b74:	a3 83       	std	Z+3, r26	; 0x03
   16b76:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   16b7a:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16b7e:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16b82:	81 81       	ldd	r24, Z+1	; 0x01
   16b84:	90 e0       	ldi	r25, 0x00	; 0
   16b86:	0e 94 d6 85 	call	0x10bac	; 0x10bac <gpib_enable_PPR>
   16b8a:	ce 01       	movw	r24, r28
   16b8c:	cd b7       	in	r28, 0x3d	; 61
   16b8e:	de b7       	in	r29, 0x3e	; 62
   16b90:	23 96       	adiw	r28, 0x03	; 3
   16b92:	e6 e0       	ldi	r30, 0x06	; 6
   16b94:	0c 94 8e e6 	jmp	0x1cd1c	; 0x1cd1c <__epilogue_restores__+0x18>

00016b98 <amigo_buffered_read_command>:
   16b98:	8f 92       	push	r8
   16b9a:	9f 92       	push	r9
   16b9c:	af 92       	push	r10
   16b9e:	bf 92       	push	r11
   16ba0:	ef 92       	push	r14
   16ba2:	ff 92       	push	r15
   16ba4:	0f 93       	push	r16
   16ba6:	1f 93       	push	r17
   16ba8:	cf 93       	push	r28
   16baa:	df 93       	push	r29
   16bac:	00 d0       	rcall	.+0      	; 0x16bae <amigo_buffered_read_command+0x16>
   16bae:	00 d0       	rcall	.+0      	; 0x16bb0 <amigo_buffered_read_command+0x18>
   16bb0:	1f 92       	push	r1
   16bb2:	63 ea       	ldi	r22, 0xA3	; 163
   16bb4:	75 e1       	ldi	r23, 0x15	; 21
   16bb6:	80 91 58 19 	lds	r24, 0x1958	; 0x801958 <AMIGOs>
   16bba:	90 91 59 19 	lds	r25, 0x1959	; 0x801959 <AMIGOs+0x1>
   16bbe:	97 dc       	rcall	.-1746   	; 0x164ee <amigo_chs_to_logical>
   16bc0:	4b 01       	movw	r8, r22
   16bc2:	5c 01       	movw	r10, r24
   16bc4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16bc8:	85 ff       	sbrs	r24, 5
   16bca:	12 c0       	rjmp	.+36     	; 0x16bf0 <amigo_buffered_read_command+0x58>
   16bcc:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16bd0:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16bd4:	80 81       	ld	r24, Z
   16bd6:	90 e0       	ldi	r25, 0x00	; 0
   16bd8:	ed b7       	in	r30, 0x3d	; 61
   16bda:	fe b7       	in	r31, 0x3e	; 62
   16bdc:	95 83       	std	Z+5, r25	; 0x05
   16bde:	84 83       	std	Z+4, r24	; 0x04
   16be0:	89 ec       	ldi	r24, 0xC9	; 201
   16be2:	9f e2       	ldi	r25, 0x2F	; 47
   16be4:	a0 e0       	ldi	r26, 0x00	; 0
   16be6:	81 83       	std	Z+1, r24	; 0x01
   16be8:	92 83       	std	Z+2, r25	; 0x02
   16bea:	a3 83       	std	Z+3, r26	; 0x03
   16bec:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   16bf0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16bf4:	86 fd       	sbrc	r24, 6
   16bf6:	0e 94 fc 84 	call	0x109f8	; 0x109f8 <gpib_timer_elapsed_begin>
   16bfa:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16bfe:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16c02:	e0 90 58 19 	lds	r14, 0x1958	; 0x801958 <AMIGOs>
   16c06:	f0 90 59 19 	lds	r15, 0x1959	; 0x801959 <AMIGOs+0x1>
   16c0a:	87 e0       	ldi	r24, 0x07	; 7
   16c0c:	e8 0e       	add	r14, r24
   16c0e:	f1 1c       	adc	r15, r1
   16c10:	00 85       	ldd	r16, Z+8	; 0x08
   16c12:	11 85       	ldd	r17, Z+9	; 0x09
   16c14:	20 ee       	ldi	r18, 0xE0	; 224
   16c16:	3c e1       	ldi	r19, 0x1C	; 28
   16c18:	b5 01       	movw	r22, r10
   16c1a:	a4 01       	movw	r20, r8
   16c1c:	82 81       	ldd	r24, Z+2	; 0x02
   16c1e:	93 81       	ldd	r25, Z+3	; 0x03
   16c20:	0e 94 4e 84 	call	0x1089c	; 0x1089c <dbf_open_read>
   16c24:	7c 01       	movw	r14, r24
   16c26:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16c2a:	86 ff       	sbrs	r24, 6
   16c2c:	04 c0       	rjmp	.+8      	; 0x16c36 <amigo_buffered_read_command+0x9e>
   16c2e:	84 e9       	ldi	r24, 0x94	; 148
   16c30:	90 e1       	ldi	r25, 0x10	; 16
   16c32:	0e 94 0e 85 	call	0x10a1c	; 0x10a1c <gpib_timer_elapsed_end>
   16c36:	c0 91 58 19 	lds	r28, 0x1958	; 0x801958 <AMIGOs>
   16c3a:	d0 91 59 19 	lds	r29, 0x1959	; 0x801959 <AMIGOs+0x1>
   16c3e:	8f 81       	ldd	r24, Y+7	; 0x07
   16c40:	98 85       	ldd	r25, Y+8	; 0x08
   16c42:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16c46:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16c4a:	89 2b       	or	r24, r25
   16c4c:	29 f4       	brne	.+10     	; 0x16c58 <amigo_buffered_read_command+0xc0>
   16c4e:	80 85       	ldd	r24, Z+8	; 0x08
   16c50:	91 85       	ldd	r25, Z+9	; 0x09
   16c52:	e8 16       	cp	r14, r24
   16c54:	f9 06       	cpc	r15, r25
   16c56:	19 f0       	breq	.+6      	; 0x16c5e <amigo_buffered_read_command+0xc6>
   16c58:	81 e0       	ldi	r24, 0x01	; 1
   16c5a:	8e 83       	std	Y+6, r24	; 0x06
   16c5c:	14 c0       	rjmp	.+40     	; 0x16c86 <amigo_buffered_read_command+0xee>
   16c5e:	83 ea       	ldi	r24, 0xA3	; 163
   16c60:	95 e1       	ldi	r25, 0x15	; 21
   16c62:	10 de       	rcall	.-992    	; 0x16884 <amigo_increment>
   16c64:	89 2b       	or	r24, r25
   16c66:	59 f0       	breq	.+22     	; 0x16c7e <amigo_buffered_read_command+0xe6>
   16c68:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16c6c:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16c70:	81 e0       	ldi	r24, 0x01	; 1
   16c72:	86 83       	std	Z+6, r24	; 0x06
   16c74:	87 81       	ldd	r24, Z+7	; 0x07
   16c76:	90 85       	ldd	r25, Z+8	; 0x08
   16c78:	84 60       	ori	r24, 0x04	; 4
   16c7a:	90 87       	std	Z+8, r25	; 0x08
   16c7c:	87 83       	std	Z+7, r24	; 0x07
   16c7e:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16c82:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16c86:	81 81       	ldd	r24, Z+1	; 0x01
   16c88:	90 e0       	ldi	r25, 0x00	; 0
   16c8a:	0e 94 d6 85 	call	0x10bac	; 0x10bac <gpib_enable_PPR>
   16c8e:	80 e0       	ldi	r24, 0x00	; 0
   16c90:	90 e0       	ldi	r25, 0x00	; 0
   16c92:	0f 90       	pop	r0
   16c94:	0f 90       	pop	r0
   16c96:	0f 90       	pop	r0
   16c98:	0f 90       	pop	r0
   16c9a:	0f 90       	pop	r0
   16c9c:	df 91       	pop	r29
   16c9e:	cf 91       	pop	r28
   16ca0:	1f 91       	pop	r17
   16ca2:	0f 91       	pop	r16
   16ca4:	ff 90       	pop	r15
   16ca6:	ef 90       	pop	r14
   16ca8:	bf 90       	pop	r11
   16caa:	af 90       	pop	r10
   16cac:	9f 90       	pop	r9
   16cae:	8f 90       	pop	r8
   16cb0:	08 95       	ret

00016cb2 <amigo_buffered_read_execute>:
   16cb2:	a5 e0       	ldi	r26, 0x05	; 5
   16cb4:	b0 e0       	ldi	r27, 0x00	; 0
   16cb6:	ef e5       	ldi	r30, 0x5F	; 95
   16cb8:	f6 eb       	ldi	r31, 0xB6	; 182
   16cba:	0c 94 74 e6 	jmp	0x1cce8	; 0x1cce8 <__prologue_saves__+0x1c>
   16cbe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16cc2:	87 fd       	sbrc	r24, 7
   16cc4:	0e 94 fc 84 	call	0x109f8	; 0x109f8 <gpib_timer_elapsed_begin>
   16cc8:	80 e0       	ldi	r24, 0x00	; 0
   16cca:	91 e0       	ldi	r25, 0x01	; 1
   16ccc:	9d 83       	std	Y+5, r25	; 0x05
   16cce:	8c 83       	std	Y+4, r24	; 0x04
   16cd0:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16cd4:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16cd8:	60 85       	ldd	r22, Z+8	; 0x08
   16cda:	71 85       	ldd	r23, Z+9	; 0x09
   16cdc:	ae 01       	movw	r20, r28
   16cde:	4c 5f       	subi	r20, 0xFC	; 252
   16ce0:	5f 4f       	sbci	r21, 0xFF	; 255
   16ce2:	80 ee       	ldi	r24, 0xE0	; 224
   16ce4:	9c e1       	ldi	r25, 0x1C	; 28
   16ce6:	0e 94 06 8b 	call	0x1160c	; 0x1160c <gpib_write_str>
   16cea:	8c 01       	movw	r16, r24
   16cec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16cf0:	87 ff       	sbrs	r24, 7
   16cf2:	04 c0       	rjmp	.+8      	; 0x16cfc <amigo_buffered_read_execute+0x4a>
   16cf4:	8f e9       	ldi	r24, 0x9F	; 159
   16cf6:	90 e1       	ldi	r25, 0x10	; 16
   16cf8:	0e 94 0e 85 	call	0x10a1c	; 0x10a1c <gpib_timer_elapsed_end>
   16cfc:	8c 81       	ldd	r24, Y+4	; 0x04
   16cfe:	9d 81       	ldd	r25, Y+5	; 0x05
   16d00:	88 27       	eor	r24, r24
   16d02:	90 7d       	andi	r25, 0xD0	; 208
   16d04:	89 2b       	or	r24, r25
   16d06:	49 f4       	brne	.+18     	; 0x16d1a <amigo_buffered_read_execute+0x68>
   16d08:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16d0c:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16d10:	80 85       	ldd	r24, Z+8	; 0x08
   16d12:	91 85       	ldd	r25, Z+9	; 0x09
   16d14:	08 17       	cp	r16, r24
   16d16:	19 07       	cpc	r17, r25
   16d18:	c9 f0       	breq	.+50     	; 0x16d4c <amigo_buffered_read_execute+0x9a>
   16d1a:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16d1e:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16d22:	81 e0       	ldi	r24, 0x01	; 1
   16d24:	86 83       	std	Z+6, r24	; 0x06
   16d26:	87 81       	ldd	r24, Z+7	; 0x07
   16d28:	90 85       	ldd	r25, Z+8	; 0x08
   16d2a:	80 62       	ori	r24, 0x20	; 32
   16d2c:	90 87       	std	Z+8, r25	; 0x08
   16d2e:	87 83       	std	Z+7, r24	; 0x07
   16d30:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d34:	80 ff       	sbrs	r24, 0
   16d36:	0a c0       	rjmp	.+20     	; 0x16d4c <amigo_buffered_read_execute+0x9a>
   16d38:	8f ea       	ldi	r24, 0xAF	; 175
   16d3a:	9f e2       	ldi	r25, 0x2F	; 47
   16d3c:	a0 e0       	ldi	r26, 0x00	; 0
   16d3e:	ed b7       	in	r30, 0x3d	; 61
   16d40:	fe b7       	in	r31, 0x3e	; 62
   16d42:	81 83       	std	Z+1, r24	; 0x01
   16d44:	92 83       	std	Z+2, r25	; 0x02
   16d46:	a3 83       	std	Z+3, r26	; 0x03
   16d48:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   16d4c:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16d50:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16d54:	81 81       	ldd	r24, Z+1	; 0x01
   16d56:	90 e0       	ldi	r25, 0x00	; 0
   16d58:	0e 94 d6 85 	call	0x10bac	; 0x10bac <gpib_enable_PPR>
   16d5c:	8c 81       	ldd	r24, Y+4	; 0x04
   16d5e:	9d 81       	ldd	r25, Y+5	; 0x05
   16d60:	25 96       	adiw	r28, 0x05	; 5
   16d62:	e4 e0       	ldi	r30, 0x04	; 4
   16d64:	0c 94 90 e6 	jmp	0x1cd20	; 0x1cd20 <__epilogue_restores__+0x1c>

00016d68 <amigo_buffered_write>:
   16d68:	8f 92       	push	r8
   16d6a:	9f 92       	push	r9
   16d6c:	af 92       	push	r10
   16d6e:	bf 92       	push	r11
   16d70:	ef 92       	push	r14
   16d72:	ff 92       	push	r15
   16d74:	0f 93       	push	r16
   16d76:	1f 93       	push	r17
   16d78:	cf 93       	push	r28
   16d7a:	df 93       	push	r29
   16d7c:	cd b7       	in	r28, 0x3d	; 61
   16d7e:	de b7       	in	r29, 0x3e	; 62
   16d80:	27 97       	sbiw	r28, 0x07	; 7
   16d82:	0f b6       	in	r0, 0x3f	; 63
   16d84:	f8 94       	cli
   16d86:	de bf       	out	0x3e, r29	; 62
   16d88:	0f be       	out	0x3f, r0	; 63
   16d8a:	cd bf       	out	0x3d, r28	; 61
   16d8c:	61 eb       	ldi	r22, 0xB1	; 177
   16d8e:	75 e1       	ldi	r23, 0x15	; 21
   16d90:	80 91 58 19 	lds	r24, 0x1958	; 0x801958 <AMIGOs>
   16d94:	90 91 59 19 	lds	r25, 0x1959	; 0x801959 <AMIGOs+0x1>
   16d98:	aa db       	rcall	.-2220   	; 0x164ee <amigo_chs_to_logical>
   16d9a:	4b 01       	movw	r8, r22
   16d9c:	5c 01       	movw	r10, r24
   16d9e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16da2:	87 fd       	sbrc	r24, 7
   16da4:	0e 94 fc 84 	call	0x109f8	; 0x109f8 <gpib_timer_elapsed_begin>
   16da8:	1f 82       	std	Y+7, r1	; 0x07
   16daa:	1e 82       	std	Y+6, r1	; 0x06
   16dac:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16db0:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16db4:	60 85       	ldd	r22, Z+8	; 0x08
   16db6:	71 85       	ldd	r23, Z+9	; 0x09
   16db8:	ae 01       	movw	r20, r28
   16dba:	4a 5f       	subi	r20, 0xFA	; 250
   16dbc:	5f 4f       	sbci	r21, 0xFF	; 255
   16dbe:	80 ee       	ldi	r24, 0xE0	; 224
   16dc0:	9c e1       	ldi	r25, 0x1C	; 28
   16dc2:	0e 94 64 8a 	call	0x114c8	; 0x114c8 <gpib_read_str>
   16dc6:	7c 01       	movw	r14, r24
   16dc8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16dcc:	85 ff       	sbrs	r24, 5
   16dce:	12 c0       	rjmp	.+36     	; 0x16df4 <amigo_buffered_write+0x8c>
   16dd0:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16dd4:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16dd8:	80 81       	ld	r24, Z
   16dda:	90 e0       	ldi	r25, 0x00	; 0
   16ddc:	ed b7       	in	r30, 0x3d	; 61
   16dde:	fe b7       	in	r31, 0x3e	; 62
   16de0:	95 83       	std	Z+5, r25	; 0x05
   16de2:	84 83       	std	Z+4, r24	; 0x04
   16de4:	8d e9       	ldi	r24, 0x9D	; 157
   16de6:	9f e2       	ldi	r25, 0x2F	; 47
   16de8:	a0 e0       	ldi	r26, 0x00	; 0
   16dea:	81 83       	std	Z+1, r24	; 0x01
   16dec:	92 83       	std	Z+2, r25	; 0x02
   16dee:	a3 83       	std	Z+3, r26	; 0x03
   16df0:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   16df4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16df8:	87 ff       	sbrs	r24, 7
   16dfa:	04 c0       	rjmp	.+8      	; 0x16e04 <amigo_buffered_write+0x9c>
   16dfc:	80 ec       	ldi	r24, 0xC0	; 192
   16dfe:	95 e1       	ldi	r25, 0x15	; 21
   16e00:	0e 94 0e 85 	call	0x10a1c	; 0x10a1c <gpib_timer_elapsed_end>
   16e04:	8e 81       	ldd	r24, Y+6	; 0x06
   16e06:	9f 81       	ldd	r25, Y+7	; 0x07
   16e08:	88 27       	eor	r24, r24
   16e0a:	90 7d       	andi	r25, 0xD0	; 208
   16e0c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16e10:	89 2b       	or	r24, r25
   16e12:	49 f4       	brne	.+18     	; 0x16e26 <amigo_buffered_write+0xbe>
   16e14:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16e18:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16e1c:	80 85       	ldd	r24, Z+8	; 0x08
   16e1e:	91 85       	ldd	r25, Z+9	; 0x09
   16e20:	e8 16       	cp	r14, r24
   16e22:	f9 06       	cpc	r15, r25
   16e24:	c1 f0       	breq	.+48     	; 0x16e56 <amigo_buffered_write+0xee>
   16e26:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16e2a:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16e2e:	81 e0       	ldi	r24, 0x01	; 1
   16e30:	86 83       	std	Z+6, r24	; 0x06
   16e32:	87 81       	ldd	r24, Z+7	; 0x07
   16e34:	90 85       	ldd	r25, Z+8	; 0x08
   16e36:	80 62       	ori	r24, 0x20	; 32
   16e38:	90 87       	std	Z+8, r25	; 0x08
   16e3a:	87 83       	std	Z+7, r24	; 0x07
   16e3c:	20 ff       	sbrs	r18, 0
   16e3e:	5e c0       	rjmp	.+188    	; 0x16efc <amigo_buffered_write+0x194>
   16e40:	8e e7       	ldi	r24, 0x7E	; 126
   16e42:	9f e2       	ldi	r25, 0x2F	; 47
   16e44:	a0 e0       	ldi	r26, 0x00	; 0
   16e46:	ed b7       	in	r30, 0x3d	; 61
   16e48:	fe b7       	in	r31, 0x3e	; 62
   16e4a:	81 83       	std	Z+1, r24	; 0x01
   16e4c:	92 83       	std	Z+2, r25	; 0x02
   16e4e:	a3 83       	std	Z+3, r26	; 0x03
   16e50:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   16e54:	53 c0       	rjmp	.+166    	; 0x16efc <amigo_buffered_write+0x194>
   16e56:	26 fd       	sbrc	r18, 6
   16e58:	0e 94 fc 84 	call	0x109f8	; 0x109f8 <gpib_timer_elapsed_begin>
   16e5c:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16e60:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16e64:	e0 90 58 19 	lds	r14, 0x1958	; 0x801958 <AMIGOs>
   16e68:	f0 90 59 19 	lds	r15, 0x1959	; 0x801959 <AMIGOs+0x1>
   16e6c:	87 e0       	ldi	r24, 0x07	; 7
   16e6e:	e8 0e       	add	r14, r24
   16e70:	f1 1c       	adc	r15, r1
   16e72:	00 85       	ldd	r16, Z+8	; 0x08
   16e74:	11 85       	ldd	r17, Z+9	; 0x09
   16e76:	20 ee       	ldi	r18, 0xE0	; 224
   16e78:	3c e1       	ldi	r19, 0x1C	; 28
   16e7a:	b5 01       	movw	r22, r10
   16e7c:	a4 01       	movw	r20, r8
   16e7e:	82 81       	ldd	r24, Z+2	; 0x02
   16e80:	93 81       	ldd	r25, Z+3	; 0x03
   16e82:	0e 94 a5 84 	call	0x1094a	; 0x1094a <dbf_open_write>
   16e86:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e8a:	86 ff       	sbrs	r24, 6
   16e8c:	04 c0       	rjmp	.+8      	; 0x16e96 <amigo_buffered_write+0x12e>
   16e8e:	89 e8       	ldi	r24, 0x89	; 137
   16e90:	90 e1       	ldi	r25, 0x10	; 16
   16e92:	0e 94 0e 85 	call	0x10a1c	; 0x10a1c <gpib_timer_elapsed_end>
   16e96:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16e9a:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16e9e:	87 81       	ldd	r24, Z+7	; 0x07
   16ea0:	90 85       	ldd	r25, Z+8	; 0x08
   16ea2:	89 2b       	or	r24, r25
   16ea4:	d9 f0       	breq	.+54     	; 0x16edc <amigo_buffered_write+0x174>
   16ea6:	81 e0       	ldi	r24, 0x01	; 1
   16ea8:	86 83       	std	Z+6, r24	; 0x06
   16eaa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16eae:	80 ff       	sbrs	r24, 0
   16eb0:	0a c0       	rjmp	.+20     	; 0x16ec6 <amigo_buffered_write+0x15e>
   16eb2:	8e e5       	ldi	r24, 0x5E	; 94
   16eb4:	9f e2       	ldi	r25, 0x2F	; 47
   16eb6:	a0 e0       	ldi	r26, 0x00	; 0
   16eb8:	ed b7       	in	r30, 0x3d	; 61
   16eba:	fe b7       	in	r31, 0x3e	; 62
   16ebc:	81 83       	std	Z+1, r24	; 0x01
   16ebe:	92 83       	std	Z+2, r25	; 0x02
   16ec0:	a3 83       	std	Z+3, r26	; 0x03
   16ec2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   16ec6:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16eca:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16ece:	81 81       	ldd	r24, Z+1	; 0x01
   16ed0:	90 e0       	ldi	r25, 0x00	; 0
   16ed2:	0e 94 d6 85 	call	0x10bac	; 0x10bac <gpib_enable_PPR>
   16ed6:	80 e0       	ldi	r24, 0x00	; 0
   16ed8:	90 e0       	ldi	r25, 0x00	; 0
   16eda:	1c c0       	rjmp	.+56     	; 0x16f14 <amigo_buffered_write+0x1ac>
   16edc:	81 eb       	ldi	r24, 0xB1	; 177
   16ede:	95 e1       	ldi	r25, 0x15	; 21
   16ee0:	d1 dc       	rcall	.-1630   	; 0x16884 <amigo_increment>
   16ee2:	89 2b       	or	r24, r25
   16ee4:	59 f0       	breq	.+22     	; 0x16efc <amigo_buffered_write+0x194>
   16ee6:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16eea:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16eee:	81 e0       	ldi	r24, 0x01	; 1
   16ef0:	86 83       	std	Z+6, r24	; 0x06
   16ef2:	87 81       	ldd	r24, Z+7	; 0x07
   16ef4:	90 85       	ldd	r25, Z+8	; 0x08
   16ef6:	84 60       	ori	r24, 0x04	; 4
   16ef8:	90 87       	std	Z+8, r25	; 0x08
   16efa:	87 83       	std	Z+7, r24	; 0x07
   16efc:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   16f00:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   16f04:	81 81       	ldd	r24, Z+1	; 0x01
   16f06:	90 e0       	ldi	r25, 0x00	; 0
   16f08:	0e 94 d6 85 	call	0x10bac	; 0x10bac <gpib_enable_PPR>
   16f0c:	8e 81       	ldd	r24, Y+6	; 0x06
   16f0e:	9f 81       	ldd	r25, Y+7	; 0x07
   16f10:	88 27       	eor	r24, r24
   16f12:	90 7d       	andi	r25, 0xD0	; 208
   16f14:	27 96       	adiw	r28, 0x07	; 7
   16f16:	0f b6       	in	r0, 0x3f	; 63
   16f18:	f8 94       	cli
   16f1a:	de bf       	out	0x3e, r29	; 62
   16f1c:	0f be       	out	0x3f, r0	; 63
   16f1e:	cd bf       	out	0x3d, r28	; 61
   16f20:	df 91       	pop	r29
   16f22:	cf 91       	pop	r28
   16f24:	1f 91       	pop	r17
   16f26:	0f 91       	pop	r16
   16f28:	ff 90       	pop	r15
   16f2a:	ef 90       	pop	r14
   16f2c:	bf 90       	pop	r11
   16f2e:	af 90       	pop	r10
   16f30:	9f 90       	pop	r9
   16f32:	8f 90       	pop	r8
   16f34:	08 95       	ret

00016f36 <amigo_cmd_dsj>:
   16f36:	a8 e0       	ldi	r26, 0x08	; 8
   16f38:	b0 e0       	ldi	r27, 0x00	; 0
   16f3a:	e1 ea       	ldi	r30, 0xA1	; 161
   16f3c:	f7 eb       	ldi	r31, 0xB7	; 183
   16f3e:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
   16f42:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16f46:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16f4a:	86 81       	ldd	r24, Z+6	; 0x06
   16f4c:	88 87       	std	Y+8, r24	; 0x08
   16f4e:	80 e0       	ldi	r24, 0x00	; 0
   16f50:	91 e0       	ldi	r25, 0x01	; 1
   16f52:	9f 83       	std	Y+7, r25	; 0x07
   16f54:	8e 83       	std	Y+6, r24	; 0x06
   16f56:	ae 01       	movw	r20, r28
   16f58:	4a 5f       	subi	r20, 0xFA	; 250
   16f5a:	5f 4f       	sbci	r21, 0xFF	; 255
   16f5c:	61 e0       	ldi	r22, 0x01	; 1
   16f5e:	70 e0       	ldi	r23, 0x00	; 0
   16f60:	ce 01       	movw	r24, r28
   16f62:	08 96       	adiw	r24, 0x08	; 8
   16f64:	0e 94 06 8b 	call	0x1160c	; 0x1160c <gpib_write_str>
   16f68:	2e 81       	ldd	r18, Y+6	; 0x06
   16f6a:	3f 81       	ldd	r19, Y+7	; 0x07
   16f6c:	22 27       	eor	r18, r18
   16f6e:	30 7d       	andi	r19, 0xD0	; 208
   16f70:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16f74:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16f78:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   16f7c:	23 2b       	or	r18, r19
   16f7e:	11 f4       	brne	.+4      	; 0x16f84 <amigo_cmd_dsj+0x4e>
   16f80:	01 97       	sbiw	r24, 0x01	; 1
   16f82:	c1 f0       	breq	.+48     	; 0x16fb4 <amigo_cmd_dsj+0x7e>
   16f84:	81 e0       	ldi	r24, 0x01	; 1
   16f86:	86 83       	std	Z+6, r24	; 0x06
   16f88:	87 81       	ldd	r24, Z+7	; 0x07
   16f8a:	90 85       	ldd	r25, Z+8	; 0x08
   16f8c:	80 62       	ori	r24, 0x20	; 32
   16f8e:	90 87       	std	Z+8, r25	; 0x08
   16f90:	87 83       	std	Z+7, r24	; 0x07
   16f92:	40 ff       	sbrs	r20, 0
   16f94:	0a c0       	rjmp	.+20     	; 0x16faa <amigo_cmd_dsj+0x74>
   16f96:	84 e4       	ldi	r24, 0x44	; 68
   16f98:	9f e2       	ldi	r25, 0x2F	; 47
   16f9a:	a0 e0       	ldi	r26, 0x00	; 0
   16f9c:	ed b7       	in	r30, 0x3d	; 61
   16f9e:	fe b7       	in	r31, 0x3e	; 62
   16fa0:	81 83       	std	Z+1, r24	; 0x01
   16fa2:	92 83       	std	Z+2, r25	; 0x02
   16fa4:	a3 83       	std	Z+3, r26	; 0x03
   16fa6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   16faa:	8e 81       	ldd	r24, Y+6	; 0x06
   16fac:	9f 81       	ldd	r25, Y+7	; 0x07
   16fae:	88 27       	eor	r24, r24
   16fb0:	90 7d       	andi	r25, 0xD0	; 208
   16fb2:	19 c0       	rjmp	.+50     	; 0x16fe6 <amigo_cmd_dsj+0xb0>
   16fb4:	45 ff       	sbrs	r20, 5
   16fb6:	0e c0       	rjmp	.+28     	; 0x16fd4 <amigo_cmd_dsj+0x9e>
   16fb8:	86 81       	ldd	r24, Z+6	; 0x06
   16fba:	90 e0       	ldi	r25, 0x00	; 0
   16fbc:	ed b7       	in	r30, 0x3d	; 61
   16fbe:	fe b7       	in	r31, 0x3e	; 62
   16fc0:	95 83       	std	Z+5, r25	; 0x05
   16fc2:	84 83       	std	Z+4, r24	; 0x04
   16fc4:	87 e3       	ldi	r24, 0x37	; 55
   16fc6:	9f e2       	ldi	r25, 0x2F	; 47
   16fc8:	a0 e0       	ldi	r26, 0x00	; 0
   16fca:	81 83       	std	Z+1, r24	; 0x01
   16fcc:	92 83       	std	Z+2, r25	; 0x02
   16fce:	a3 83       	std	Z+3, r26	; 0x03
   16fd0:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   16fd4:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   16fd8:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   16fdc:	16 82       	std	Z+6, r1	; 0x06
   16fde:	10 86       	std	Z+8, r1	; 0x08
   16fe0:	17 82       	std	Z+7, r1	; 0x07
   16fe2:	80 e0       	ldi	r24, 0x00	; 0
   16fe4:	90 e0       	ldi	r25, 0x00	; 0
   16fe6:	28 96       	adiw	r28, 0x08	; 8
   16fe8:	e2 e0       	ldi	r30, 0x02	; 2
   16fea:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00016fee <amigo_cmd_clear>:
/// - Reference: A23.
/// - Select sector 0.
/// @return  0

int amigo_cmd_clear()
{
   16fee:	00 d0       	rcall	.+0      	; 0x16ff0 <amigo_cmd_clear+0x2>
   16ff0:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16ff2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ff6:	85 ff       	sbrs	r24, 5
   16ff8:	0a c0       	rjmp	.+20     	; 0x1700e <amigo_cmd_clear+0x20>
        printf("[AMIGO Clear]\n");
   16ffa:	88 e2       	ldi	r24, 0x28	; 40
   16ffc:	9f e2       	ldi	r25, 0x2F	; 47
   16ffe:	a0 e0       	ldi	r26, 0x00	; 0
   17000:	ed b7       	in	r30, 0x3d	; 61
   17002:	fe b7       	in	r31, 0x3e	; 62
   17004:	81 83       	std	Z+1, r24	; 0x01
   17006:	92 83       	std	Z+2, r25	; 0x02
   17008:	a3 83       	std	Z+3, r26	; 0x03
   1700a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
    AMIGOs->sector = 0;
   1700e:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   17012:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   17016:	15 82       	std	Z+5, r1	; 0x05
    AMIGOs->head = 0;
   17018:	14 82       	std	Z+4, r1	; 0x04
    AMIGOs->cyl = 0;
   1701a:	13 82       	std	Z+3, r1	; 0x03
/// @todo FIXME
///
///  Clear the DSJ byte that might be 2 after powerup
///
    AMIGOs->dsj = 0;
   1701c:	16 82       	std	Z+6, r1	; 0x06
    AMIGOs->Errors =0;
   1701e:	10 86       	std	Z+8, r1	; 0x08
   17020:	17 82       	std	Z+7, r1	; 0x07

    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17022:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   17026:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   1702a:	81 81       	ldd	r24, Z+1	; 0x01
   1702c:	90 e0       	ldi	r25, 0x00	; 0
   1702e:	0e 94 d6 85 	call	0x10bac	; 0x10bac <gpib_enable_PPR>
    return(0);
}
   17032:	80 e0       	ldi	r24, 0x00	; 0
   17034:	90 e0       	ldi	r25, 0x00	; 0
   17036:	0f 90       	pop	r0
   17038:	0f 90       	pop	r0
   1703a:	0f 90       	pop	r0
   1703c:	08 95       	ret

0001703e <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   1703e:	af e0       	ldi	r26, 0x0F	; 15
   17040:	b0 e0       	ldi	r27, 0x00	; 0
   17042:	e5 e2       	ldi	r30, 0x25	; 37
   17044:	f8 eb       	ldi	r31, 0xB8	; 184
   17046:	0c 94 72 e6 	jmp	0x1cce4	; 0x1cce4 <__prologue_saves__+0x18>
   1704a:	c8 2f       	mov	r28, r24
   1704c:	e6 2e       	mov	r14, r22
   1704e:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   17050:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17054:	90 e0       	ldi	r25, 0x00	; 0
   17056:	0e 94 3c 8c 	call	0x11878	; 0x11878 <AMIGO_is_MLA>
   1705a:	20 91 e4 1e 	lds	r18, 0x1EE4	; 0x801ee4 <talking>
   1705e:	f1 2c       	mov	r15, r1
   17060:	d0 e0       	ldi	r29, 0x00	; 0
   17062:	89 2b       	or	r24, r25
   17064:	f1 f0       	breq	.+60     	; 0x170a2 <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   17066:	82 2f       	mov	r24, r18
   17068:	90 e0       	ldi	r25, 0x00	; 0
   1706a:	ed b7       	in	r30, 0x3d	; 61
   1706c:	fe b7       	in	r31, 0x3e	; 62
   1706e:	97 87       	std	Z+15, r25	; 0x0f
   17070:	86 87       	std	Z+14, r24	; 0x0e
   17072:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17076:	90 e0       	ldi	r25, 0x00	; 0
   17078:	95 87       	std	Z+13, r25	; 0x0d
   1707a:	84 87       	std	Z+12, r24	; 0x0c
   1707c:	13 87       	std	Z+11, r17	; 0x0b
   1707e:	02 87       	std	Z+10, r16	; 0x0a
   17080:	f1 86       	std	Z+9, r15	; 0x09
   17082:	e0 86       	std	Z+8, r14	; 0x08
   17084:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   17088:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   1708c:	80 81       	ld	r24, Z
   1708e:	90 e0       	ldi	r25, 0x00	; 0
   17090:	ed b7       	in	r30, 0x3d	; 61
   17092:	fe b7       	in	r31, 0x3e	; 62
   17094:	97 83       	std	Z+7, r25	; 0x07
   17096:	86 83       	std	Z+6, r24	; 0x06
   17098:	d5 83       	std	Z+5, r29	; 0x05
   1709a:	c4 83       	std	Z+4, r28	; 0x04
   1709c:	81 ec       	ldi	r24, 0xC1	; 193
   1709e:	9e e2       	ldi	r25, 0x2E	; 46
   170a0:	51 c0       	rjmp	.+162    	; 0x17144 <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   170a2:	82 2f       	mov	r24, r18
   170a4:	90 e0       	ldi	r25, 0x00	; 0
   170a6:	0e 94 4e 8c 	call	0x1189c	; 0x1189c <AMIGO_is_MTA>
   170aa:	20 91 e6 1e 	lds	r18, 0x1EE6	; 0x801ee6 <listening>
   170ae:	30 91 e4 1e 	lds	r19, 0x1EE4	; 0x801ee4 <talking>
   170b2:	a0 91 58 19 	lds	r26, 0x1958	; 0x801958 <AMIGOs>
   170b6:	b0 91 59 19 	lds	r27, 0x1959	; 0x801959 <AMIGOs+0x1>
   170ba:	89 2b       	or	r24, r25
   170bc:	b1 f0       	breq	.+44     	; 0x170ea <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   170be:	83 2f       	mov	r24, r19
   170c0:	90 e0       	ldi	r25, 0x00	; 0
   170c2:	ed b7       	in	r30, 0x3d	; 61
   170c4:	fe b7       	in	r31, 0x3e	; 62
   170c6:	97 87       	std	Z+15, r25	; 0x0f
   170c8:	86 87       	std	Z+14, r24	; 0x0e
   170ca:	30 e0       	ldi	r19, 0x00	; 0
   170cc:	35 87       	std	Z+13, r19	; 0x0d
   170ce:	24 87       	std	Z+12, r18	; 0x0c
   170d0:	13 87       	std	Z+11, r17	; 0x0b
   170d2:	02 87       	std	Z+10, r16	; 0x0a
   170d4:	f1 86       	std	Z+9, r15	; 0x09
   170d6:	e0 86       	std	Z+8, r14	; 0x08
   170d8:	8c 91       	ld	r24, X
   170da:	90 e0       	ldi	r25, 0x00	; 0
   170dc:	97 83       	std	Z+7, r25	; 0x07
   170de:	86 83       	std	Z+6, r24	; 0x06
   170e0:	d5 83       	std	Z+5, r29	; 0x05
   170e2:	c4 83       	std	Z+4, r28	; 0x04
   170e4:	8a e5       	ldi	r24, 0x5A	; 90
   170e6:	9e e2       	ldi	r25, 0x2E	; 46
   170e8:	2d c0       	rjmp	.+90     	; 0x17144 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   170ea:	3f 35       	cpi	r19, 0x5F	; 95
   170ec:	b1 f4       	brne	.+44     	; 0x1711a <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   170ee:	8f e5       	ldi	r24, 0x5F	; 95
   170f0:	90 e0       	ldi	r25, 0x00	; 0
   170f2:	ed b7       	in	r30, 0x3d	; 61
   170f4:	fe b7       	in	r31, 0x3e	; 62
   170f6:	97 87       	std	Z+15, r25	; 0x0f
   170f8:	86 87       	std	Z+14, r24	; 0x0e
   170fa:	30 e0       	ldi	r19, 0x00	; 0
   170fc:	35 87       	std	Z+13, r19	; 0x0d
   170fe:	24 87       	std	Z+12, r18	; 0x0c
   17100:	13 87       	std	Z+11, r17	; 0x0b
   17102:	02 87       	std	Z+10, r16	; 0x0a
   17104:	f1 86       	std	Z+9, r15	; 0x09
   17106:	e0 86       	std	Z+8, r14	; 0x08
   17108:	8c 91       	ld	r24, X
   1710a:	90 e0       	ldi	r25, 0x00	; 0
   1710c:	97 83       	std	Z+7, r25	; 0x07
   1710e:	86 83       	std	Z+6, r24	; 0x06
   17110:	d5 83       	std	Z+5, r29	; 0x05
   17112:	c4 83       	std	Z+4, r28	; 0x04
   17114:	83 ef       	ldi	r24, 0xF3	; 243
   17116:	9d e2       	ldi	r25, 0x2D	; 45
   17118:	15 c0       	rjmp	.+42     	; 0x17144 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   1711a:	83 2f       	mov	r24, r19
   1711c:	90 e0       	ldi	r25, 0x00	; 0
   1711e:	ed b7       	in	r30, 0x3d	; 61
   17120:	fe b7       	in	r31, 0x3e	; 62
   17122:	97 87       	std	Z+15, r25	; 0x0f
   17124:	86 87       	std	Z+14, r24	; 0x0e
   17126:	30 e0       	ldi	r19, 0x00	; 0
   17128:	35 87       	std	Z+13, r19	; 0x0d
   1712a:	24 87       	std	Z+12, r18	; 0x0c
   1712c:	13 87       	std	Z+11, r17	; 0x0b
   1712e:	02 87       	std	Z+10, r16	; 0x0a
   17130:	f1 86       	std	Z+9, r15	; 0x09
   17132:	e0 86       	std	Z+8, r14	; 0x08
   17134:	8c 91       	ld	r24, X
   17136:	90 e0       	ldi	r25, 0x00	; 0
   17138:	97 83       	std	Z+7, r25	; 0x07
   1713a:	86 83       	std	Z+6, r24	; 0x06
   1713c:	d5 83       	std	Z+5, r29	; 0x05
   1713e:	c4 83       	std	Z+4, r28	; 0x04
   17140:	8e e8       	ldi	r24, 0x8E	; 142
   17142:	9d e2       	ldi	r25, 0x2D	; 45
   17144:	a0 e0       	ldi	r26, 0x00	; 0
   17146:	81 83       	std	Z+1, r24	; 0x01
   17148:	92 83       	std	Z+2, r25	; 0x02
   1714a:	a3 83       	std	Z+3, r26	; 0x03
   1714c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17150:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   17154:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   17158:	81 81       	ldd	r24, Z+1	; 0x01
   1715a:	90 e0       	ldi	r25, 0x00	; 0
   1715c:	0e 94 d6 85 	call	0x10bac	; 0x10bac <gpib_enable_PPR>
    return(0);
}
   17160:	80 e0       	ldi	r24, 0x00	; 0
   17162:	90 e0       	ldi	r25, 0x00	; 0
   17164:	cd b7       	in	r28, 0x3d	; 61
   17166:	de b7       	in	r29, 0x3e	; 62
   17168:	2f 96       	adiw	r28, 0x0f	; 15
   1716a:	e6 e0       	ldi	r30, 0x06	; 6
   1716c:	0c 94 8e e6 	jmp	0x1cd1c	; 0x1cd1c <__epilogue_restores__+0x18>

00017170 <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   17170:	ab e0       	ldi	r26, 0x0B	; 11
   17172:	b0 e0       	ldi	r27, 0x00	; 0
   17174:	ee eb       	ldi	r30, 0xBE	; 190
   17176:	f8 eb       	ldi	r31, 0xB8	; 184
   17178:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
   1717c:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   1717e:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17182:	90 e0       	ldi	r25, 0x00	; 0
   17184:	0e 94 3c 8c 	call	0x11878	; 0x11878 <AMIGO_is_MLA>
   17188:	20 91 e4 1e 	lds	r18, 0x1EE4	; 0x801ee4 <talking>
   1718c:	d0 e0       	ldi	r29, 0x00	; 0
   1718e:	89 2b       	or	r24, r25
   17190:	d1 f0       	breq	.+52     	; 0x171c6 <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17192:	82 2f       	mov	r24, r18
   17194:	90 e0       	ldi	r25, 0x00	; 0
   17196:	ed b7       	in	r30, 0x3d	; 61
   17198:	fe b7       	in	r31, 0x3e	; 62
   1719a:	93 87       	std	Z+11, r25	; 0x0b
   1719c:	82 87       	std	Z+10, r24	; 0x0a
   1719e:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   171a2:	90 e0       	ldi	r25, 0x00	; 0
   171a4:	91 87       	std	Z+9, r25	; 0x09
   171a6:	80 87       	std	Z+8, r24	; 0x08
   171a8:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   171ac:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   171b0:	80 81       	ld	r24, Z
   171b2:	90 e0       	ldi	r25, 0x00	; 0
   171b4:	ed b7       	in	r30, 0x3d	; 61
   171b6:	fe b7       	in	r31, 0x3e	; 62
   171b8:	97 83       	std	Z+7, r25	; 0x07
   171ba:	86 83       	std	Z+6, r24	; 0x06
   171bc:	d5 83       	std	Z+5, r29	; 0x05
   171be:	c4 83       	std	Z+4, r28	; 0x04
   171c0:	8e e3       	ldi	r24, 0x3E	; 62
   171c2:	9d e2       	ldi	r25, 0x2D	; 45
   171c4:	43 c0       	rjmp	.+134    	; 0x1724c <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   171c6:	82 2f       	mov	r24, r18
   171c8:	90 e0       	ldi	r25, 0x00	; 0
   171ca:	0e 94 4e 8c 	call	0x1189c	; 0x1189c <AMIGO_is_MTA>
   171ce:	20 91 e6 1e 	lds	r18, 0x1EE6	; 0x801ee6 <listening>
   171d2:	40 91 e4 1e 	lds	r20, 0x1EE4	; 0x801ee4 <talking>
   171d6:	a0 91 58 19 	lds	r26, 0x1958	; 0x801958 <AMIGOs>
   171da:	b0 91 59 19 	lds	r27, 0x1959	; 0x801959 <AMIGOs+0x1>
   171de:	89 2b       	or	r24, r25
   171e0:	89 f0       	breq	.+34     	; 0x17204 <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   171e2:	50 e0       	ldi	r21, 0x00	; 0
   171e4:	ed b7       	in	r30, 0x3d	; 61
   171e6:	fe b7       	in	r31, 0x3e	; 62
   171e8:	53 87       	std	Z+11, r21	; 0x0b
   171ea:	42 87       	std	Z+10, r20	; 0x0a
   171ec:	30 e0       	ldi	r19, 0x00	; 0
   171ee:	31 87       	std	Z+9, r19	; 0x09
   171f0:	20 87       	std	Z+8, r18	; 0x08
   171f2:	8c 91       	ld	r24, X
   171f4:	90 e0       	ldi	r25, 0x00	; 0
   171f6:	97 83       	std	Z+7, r25	; 0x07
   171f8:	86 83       	std	Z+6, r24	; 0x06
   171fa:	d5 83       	std	Z+5, r29	; 0x05
   171fc:	c4 83       	std	Z+4, r28	; 0x04
   171fe:	8e ee       	ldi	r24, 0xEE	; 238
   17200:	9c e2       	ldi	r25, 0x2C	; 44
   17202:	24 c0       	rjmp	.+72     	; 0x1724c <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   17204:	4f 35       	cpi	r20, 0x5F	; 95
   17206:	91 f4       	brne	.+36     	; 0x1722c <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   17208:	8f e5       	ldi	r24, 0x5F	; 95
   1720a:	90 e0       	ldi	r25, 0x00	; 0
   1720c:	ed b7       	in	r30, 0x3d	; 61
   1720e:	fe b7       	in	r31, 0x3e	; 62
   17210:	93 87       	std	Z+11, r25	; 0x0b
   17212:	82 87       	std	Z+10, r24	; 0x0a
   17214:	30 e0       	ldi	r19, 0x00	; 0
   17216:	31 87       	std	Z+9, r19	; 0x09
   17218:	20 87       	std	Z+8, r18	; 0x08
   1721a:	8c 91       	ld	r24, X
   1721c:	90 e0       	ldi	r25, 0x00	; 0
   1721e:	97 83       	std	Z+7, r25	; 0x07
   17220:	86 83       	std	Z+6, r24	; 0x06
   17222:	d5 83       	std	Z+5, r29	; 0x05
   17224:	c4 83       	std	Z+4, r28	; 0x04
   17226:	8e e9       	ldi	r24, 0x9E	; 158
   17228:	9c e2       	ldi	r25, 0x2C	; 44
   1722a:	10 c0       	rjmp	.+32     	; 0x1724c <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   1722c:	50 e0       	ldi	r21, 0x00	; 0
   1722e:	ed b7       	in	r30, 0x3d	; 61
   17230:	fe b7       	in	r31, 0x3e	; 62
   17232:	53 87       	std	Z+11, r21	; 0x0b
   17234:	42 87       	std	Z+10, r20	; 0x0a
   17236:	30 e0       	ldi	r19, 0x00	; 0
   17238:	31 87       	std	Z+9, r19	; 0x09
   1723a:	20 87       	std	Z+8, r18	; 0x08
   1723c:	8c 91       	ld	r24, X
   1723e:	90 e0       	ldi	r25, 0x00	; 0
   17240:	97 83       	std	Z+7, r25	; 0x07
   17242:	86 83       	std	Z+6, r24	; 0x06
   17244:	d5 83       	std	Z+5, r29	; 0x05
   17246:	c4 83       	std	Z+4, r28	; 0x04
   17248:	8d e4       	ldi	r24, 0x4D	; 77
   1724a:	9c e2       	ldi	r25, 0x2C	; 44
   1724c:	a0 e0       	ldi	r26, 0x00	; 0
   1724e:	81 83       	std	Z+1, r24	; 0x01
   17250:	92 83       	std	Z+2, r25	; 0x02
   17252:	a3 83       	std	Z+3, r26	; 0x03
   17254:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17258:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   1725c:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   17260:	81 81       	ldd	r24, Z+1	; 0x01
   17262:	90 e0       	ldi	r25, 0x00	; 0
   17264:	0e 94 d6 85 	call	0x10bac	; 0x10bac <gpib_enable_PPR>
    return(0);
}
   17268:	80 e0       	ldi	r24, 0x00	; 0
   1726a:	90 e0       	ldi	r25, 0x00	; 0
   1726c:	cd b7       	in	r28, 0x3d	; 61
   1726e:	de b7       	in	r29, 0x3e	; 62
   17270:	2b 96       	adiw	r28, 0x0b	; 11
   17272:	e2 e0       	ldi	r30, 0x02	; 2
   17274:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00017278 <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   17278:	8f 30       	cpi	r24, 0x0F	; 15
   1727a:	29 f0       	breq	.+10     	; 0x17286 <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   1727c:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   17280:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   17284:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   17286:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   1728a:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   1728e:	81 81       	ldd	r24, Z+1	; 0x01
   17290:	88 23       	and	r24, r24
   17292:	29 f0       	breq	.+10     	; 0x1729e <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   17294:	87 81       	ldd	r24, Z+7	; 0x07
   17296:	90 85       	ldd	r25, Z+8	; 0x08
   17298:	80 64       	ori	r24, 0x40	; 64
   1729a:	90 87       	std	Z+8, r25	; 0x08
   1729c:	87 83       	std	Z+7, r24	; 0x07
   1729e:	08 95       	ret

000172a0 <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   172a0:	ac e1       	ldi	r26, 0x1C	; 28
   172a2:	b0 e0       	ldi	r27, 0x00	; 0
   172a4:	e6 e5       	ldi	r30, 0x56	; 86
   172a6:	f9 eb       	ldi	r31, 0xB9	; 185
   172a8:	0c 94 72 e6 	jmp	0x1cce4	; 0x1cce4 <__prologue_saves__+0x18>
   172ac:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   172ae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   172b2:	85 ff       	sbrs	r24, 5
   172b4:	16 c0       	rjmp	.+44     	; 0x172e2 <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   172b6:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   172ba:	90 e0       	ldi	r25, 0x00	; 0
   172bc:	ed b7       	in	r30, 0x3d	; 61
   172be:	fe b7       	in	r31, 0x3e	; 62
   172c0:	91 87       	std	Z+9, r25	; 0x09
   172c2:	80 87       	std	Z+8, r24	; 0x08
   172c4:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   172c8:	90 e0       	ldi	r25, 0x00	; 0
   172ca:	97 83       	std	Z+7, r25	; 0x07
   172cc:	86 83       	std	Z+6, r24	; 0x06
   172ce:	f5 82       	std	Z+5, r15	; 0x05
   172d0:	e4 82       	std	Z+4, r14	; 0x04
   172d2:	8b e1       	ldi	r24, 0x1B	; 27
   172d4:	9c e2       	ldi	r25, 0x2C	; 44
   172d6:	a0 e0       	ldi	r26, 0x00	; 0
   172d8:	81 83       	std	Z+1, r24	; 0x01
   172da:	92 83       	std	Z+2, r25	; 0x02
   172dc:	a3 83       	std	Z+3, r26	; 0x03
   172de:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   172e2:	fe e7       	ldi	r31, 0x7E	; 126
   172e4:	ef 16       	cp	r14, r31
   172e6:	f1 04       	cpc	r15, r1
   172e8:	f1 f5       	brne	.+124    	; 0x17366 <Amigo_Command+0xc6>
   172ea:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   172ee:	90 e0       	ldi	r25, 0x00	; 0
   172f0:	0e 94 4e 8c 	call	0x1189c	; 0x1189c <AMIGO_is_MTA>
   172f4:	89 2b       	or	r24, r25
   172f6:	09 f4       	brne	.+2      	; 0x172fa <Amigo_Command+0x5a>
   172f8:	86 c0       	rjmp	.+268    	; 0x17406 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   172fa:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   172fe:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   17302:	81 81       	ldd	r24, Z+1	; 0x01
   17304:	90 e0       	ldi	r25, 0x00	; 0
   17306:	0e 94 0c 86 	call	0x10c18	; 0x10c18 <gpib_disable_PPR>
        status = EOI_FLAG;
   1730a:	80 e0       	ldi	r24, 0x00	; 0
   1730c:	91 e0       	ldi	r25, 0x01	; 1
   1730e:	9c 8f       	std	Y+28, r25	; 0x1c
   17310:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   17312:	ae 01       	movw	r20, r28
   17314:	45 5e       	subi	r20, 0xE5	; 229
   17316:	5f 4f       	sbci	r21, 0xFF	; 255
   17318:	60 e0       	ldi	r22, 0x00	; 0
   1731a:	72 e0       	ldi	r23, 0x02	; 2
   1731c:	80 ee       	ldi	r24, 0xE0	; 224
   1731e:	9c e1       	ldi	r25, 0x1C	; 28
   17320:	0e 94 06 8b 	call	0x1160c	; 0x1160c <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17324:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   17328:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   1732c:	81 81       	ldd	r24, Z+1	; 0x01
   1732e:	90 e0       	ldi	r25, 0x00	; 0
   17330:	0e 94 d6 85 	call	0x10bac	; 0x10bac <gpib_enable_PPR>
        if(status & ERROR_MASK)
   17334:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17336:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17338:	88 27       	eor	r24, r24
   1733a:	90 7d       	andi	r25, 0xD0	; 208
   1733c:	89 2b       	or	r24, r25
   1733e:	09 f4       	brne	.+2      	; 0x17342 <Amigo_Command+0xa2>
   17340:	89 c2       	rjmp	.+1298   	; 0x17854 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   17342:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   17346:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   1734a:	81 e0       	ldi	r24, 0x01	; 1
   1734c:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   1734e:	87 81       	ldd	r24, Z+7	; 0x07
   17350:	90 85       	ldd	r25, Z+8	; 0x08
   17352:	80 62       	ori	r24, 0x20	; 32
   17354:	90 87       	std	Z+8, r25	; 0x08
   17356:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   17358:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1735c:	80 ff       	sbrs	r24, 0
   1735e:	7a c2       	rjmp	.+1268   	; 0x17854 <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   17360:	89 ef       	ldi	r24, 0xF9	; 249
   17362:	9b e2       	ldi	r25, 0x2B	; 43
   17364:	8e c0       	rjmp	.+284    	; 0x17482 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   17366:	ff e7       	ldi	r31, 0x7F	; 127
   17368:	ef 16       	cp	r14, r31
   1736a:	f1 04       	cpc	r15, r1
   1736c:	09 f0       	breq	.+2      	; 0x17370 <Amigo_Command+0xd0>
   1736e:	4b c0       	rjmp	.+150    	; 0x17406 <Amigo_Command+0x166>
   17370:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17374:	90 e0       	ldi	r25, 0x00	; 0
   17376:	0e 94 3c 8c 	call	0x11878	; 0x11878 <AMIGO_is_MLA>
   1737a:	89 2b       	or	r24, r25
   1737c:	09 f4       	brne	.+2      	; 0x17380 <Amigo_Command+0xe0>
   1737e:	43 c0       	rjmp	.+134    	; 0x17406 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17380:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   17384:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   17388:	81 81       	ldd	r24, Z+1	; 0x01
   1738a:	90 e0       	ldi	r25, 0x00	; 0
   1738c:	0e 94 0c 86 	call	0x10c18	; 0x10c18 <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   17390:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17394:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   17396:	0e 94 fc 84 	call	0x109f8	; 0x109f8 <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   1739a:	80 e0       	ldi	r24, 0x00	; 0
   1739c:	91 e0       	ldi	r25, 0x01	; 1
   1739e:	9c 8f       	std	Y+28, r25	; 0x1c
   173a0:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   173a2:	ae 01       	movw	r20, r28
   173a4:	45 5e       	subi	r20, 0xE5	; 229
   173a6:	5f 4f       	sbci	r21, 0xFF	; 255
   173a8:	60 e0       	ldi	r22, 0x00	; 0
   173aa:	72 e0       	ldi	r23, 0x02	; 2
   173ac:	80 ee       	ldi	r24, 0xE0	; 224
   173ae:	9c e1       	ldi	r25, 0x1C	; 28
   173b0:	0e 94 64 8a 	call	0x114c8	; 0x114c8 <gpib_read_str>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   173b4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   173b8:	87 ff       	sbrs	r24, 7
   173ba:	04 c0       	rjmp	.+8      	; 0x173c4 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read");
   173bc:	80 ec       	ldi	r24, 0xC0	; 192
   173be:	95 e1       	ldi	r25, 0x15	; 21
   173c0:	0e 94 0e 85 	call	0x10a1c	; 0x10a1c <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   173c4:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   173c8:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   173cc:	81 81       	ldd	r24, Z+1	; 0x01
   173ce:	90 e0       	ldi	r25, 0x00	; 0
   173d0:	0e 94 d6 85 	call	0x10bac	; 0x10bac <gpib_enable_PPR>
        if(status & ERROR_MASK)
   173d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
   173d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
   173d8:	88 27       	eor	r24, r24
   173da:	90 7d       	andi	r25, 0xD0	; 208
   173dc:	89 2b       	or	r24, r25
   173de:	09 f4       	brne	.+2      	; 0x173e2 <Amigo_Command+0x142>
   173e0:	39 c2       	rjmp	.+1138   	; 0x17854 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   173e2:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   173e6:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   173ea:	81 e0       	ldi	r24, 0x01	; 1
   173ec:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   173ee:	87 81       	ldd	r24, Z+7	; 0x07
   173f0:	90 85       	ldd	r25, Z+8	; 0x08
   173f2:	80 62       	ori	r24, 0x20	; 32
   173f4:	90 87       	std	Z+8, r25	; 0x08
   173f6:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   173f8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   173fc:	80 ff       	sbrs	r24, 0
   173fe:	2a c2       	rjmp	.+1108   	; 0x17854 <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   17400:	88 ed       	ldi	r24, 0xD8	; 216
   17402:	9b e2       	ldi	r25, 0x2B	; 43
   17404:	3e c0       	rjmp	.+124    	; 0x17482 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   17406:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   1740a:	90 e0       	ldi	r25, 0x00	; 0
   1740c:	0e 94 3c 8c 	call	0x11878	; 0x11878 <AMIGO_is_MLA>
   17410:	89 2b       	or	r24, r25
   17412:	19 f4       	brne	.+6      	; 0x1741a <Amigo_Command+0x17a>
        return(0);
   17414:	80 e0       	ldi	r24, 0x00	; 0
   17416:	90 e0       	ldi	r25, 0x00	; 0
   17418:	25 c2       	rjmp	.+1098   	; 0x17864 <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   1741a:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   1741e:	90 e0       	ldi	r25, 0x00	; 0
   17420:	0e 94 4e 8c 	call	0x1189c	; 0x1189c <AMIGO_is_MTA>
   17424:	89 2b       	or	r24, r25
   17426:	b1 f7       	brne	.-20     	; 0x17414 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17428:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   1742c:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   17430:	81 81       	ldd	r24, Z+1	; 0x01
   17432:	90 e0       	ldi	r25, 0x00	; 0
   17434:	0e 94 0c 86 	call	0x10c18	; 0x10c18 <gpib_disable_PPR>

///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   17438:	80 e0       	ldi	r24, 0x00	; 0
   1743a:	91 e0       	ldi	r25, 0x01	; 1
   1743c:	9c 8f       	std	Y+28, r25	; 0x1c
   1743e:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   17440:	ae 01       	movw	r20, r28
   17442:	45 5e       	subi	r20, 0xE5	; 229
   17444:	5f 4f       	sbci	r21, 0xFF	; 255
   17446:	60 e0       	ldi	r22, 0x00	; 0
   17448:	72 e0       	ldi	r23, 0x02	; 2
   1744a:	80 ee       	ldi	r24, 0xE0	; 224
   1744c:	9c e1       	ldi	r25, 0x1C	; 28
   1744e:	0e 94 64 8a 	call	0x114c8	; 0x114c8 <gpib_read_str>
   17452:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   17454:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17456:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17458:	88 27       	eor	r24, r24
   1745a:	90 7d       	andi	r25, 0xD0	; 208
   1745c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   17460:	89 2b       	or	r24, r25
   17462:	c1 f0       	breq	.+48     	; 0x17494 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   17464:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   17468:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   1746c:	81 e0       	ldi	r24, 0x01	; 1
   1746e:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   17470:	87 81       	ldd	r24, Z+7	; 0x07
   17472:	90 85       	ldd	r25, Z+8	; 0x08
   17474:	80 62       	ori	r24, 0x20	; 32
   17476:	90 87       	std	Z+8, r25	; 0x08
   17478:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & GPIB_ERR)
   1747a:	20 ff       	sbrs	r18, 0
   1747c:	eb c1       	rjmp	.+982    	; 0x17854 <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   1747e:	87 eb       	ldi	r24, 0xB7	; 183
   17480:	9b e2       	ldi	r25, 0x2B	; 43
   17482:	a0 e0       	ldi	r26, 0x00	; 0
   17484:	ed b7       	in	r30, 0x3d	; 61
   17486:	fe b7       	in	r31, 0x3e	; 62
   17488:	81 83       	std	Z+1, r24	; 0x01
   1748a:	92 83       	std	Z+2, r25	; 0x02
   1748c:	a3 83       	std	Z+3, r26	; 0x03
   1748e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   17492:	e0 c1       	rjmp	.+960    	; 0x17854 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17494:	25 ff       	sbrs	r18, 5
   17496:	0e c0       	rjmp	.+28     	; 0x174b4 <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   17498:	ed b7       	in	r30, 0x3d	; 61
   1749a:	fe b7       	in	r31, 0x3e	; 62
   1749c:	17 83       	std	Z+7, r17	; 0x07
   1749e:	06 83       	std	Z+6, r16	; 0x06
   174a0:	f5 82       	std	Z+5, r15	; 0x05
   174a2:	e4 82       	std	Z+4, r14	; 0x04
   174a4:	88 e8       	ldi	r24, 0x88	; 136
   174a6:	9b e2       	ldi	r25, 0x2B	; 43
   174a8:	a0 e0       	ldi	r26, 0x00	; 0
   174aa:	81 83       	std	Z+1, r24	; 0x01
   174ac:	92 83       	std	Z+2, r25	; 0x02
   174ae:	a3 83       	std	Z+3, r26	; 0x03
   174b0:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            secondary, len);
#endif
    if(!len)
   174b4:	01 15       	cp	r16, r1
   174b6:	11 05       	cpc	r17, r1
   174b8:	61 f4       	brne	.+24     	; 0x174d2 <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   174ba:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   174be:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   174c2:	81 e0       	ldi	r24, 0x01	; 1
   174c4:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   174c6:	87 81       	ldd	r24, Z+7	; 0x07
   174c8:	90 85       	ldd	r25, Z+8	; 0x08
   174ca:	80 62       	ori	r24, 0x20	; 32
   174cc:	90 87       	std	Z+8, r25	; 0x08
   174ce:	87 83       	std	Z+7, r24	; 0x07
   174d0:	c1 c1       	rjmp	.+898    	; 0x17854 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   174d2:	60 91 e0 1c 	lds	r22, 0x1CE0	; 0x801ce0 <gpib_iobuff>

    if (secondary == 0x68)
   174d6:	f8 e6       	ldi	r31, 0x68	; 104
   174d8:	ef 16       	cp	r14, r31
   174da:	f1 04       	cpc	r15, r1
   174dc:	09 f0       	breq	.+2      	; 0x174e0 <Amigo_Command+0x240>
   174de:	28 c1       	rjmp	.+592    	; 0x17730 <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   174e0:	61 11       	cpse	r22, r1
   174e2:	2e c0       	rjmp	.+92     	; 0x17540 <Amigo_Command+0x2a0>
   174e4:	02 30       	cpi	r16, 0x02	; 2
   174e6:	11 05       	cpc	r17, r1
   174e8:	09 f0       	breq	.+2      	; 0x174ec <Amigo_Command+0x24c>
   174ea:	b9 c1       	rjmp	.+882    	; 0x1785e <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   174ec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174f0:	85 ff       	sbrs	r24, 5
   174f2:	0a c0       	rjmp	.+20     	; 0x17508 <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   174f4:	88 e6       	ldi	r24, 0x68	; 104
   174f6:	9b e2       	ldi	r25, 0x2B	; 43
   174f8:	a0 e0       	ldi	r26, 0x00	; 0
   174fa:	ed b7       	in	r30, 0x3d	; 61
   174fc:	fe b7       	in	r31, 0x3e	; 62
   174fe:	81 83       	std	Z+1, r24	; 0x01
   17500:	92 83       	std	Z+2, r25	; 0x02
   17502:	a3 83       	std	Z+3, r26	; 0x03
   17504:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   17508:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   1750c:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   17510:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   17512:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   17514:	10 86       	std	Z+8, r1	; 0x08
   17516:	17 82       	std	Z+7, r1	; 0x07
/// Fill in temparary address
            tmp.cyl = 0;
   17518:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   1751a:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   1751e:	98 2f       	mov	r25, r24
   17520:	92 95       	swap	r25
   17522:	96 95       	lsr	r25
   17524:	96 95       	lsr	r25
   17526:	93 70       	andi	r25, 0x03	; 3
   17528:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   1752a:	8f 73       	andi	r24, 0x3F	; 63
   1752c:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
//update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   1752e:	ce 01       	movw	r24, r28
   17530:	0a 96       	adiw	r24, 0x0a	; 10
   17532:	d1 d9       	rcall	.-3166   	; 0x168d6 <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   17534:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   17538:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   1753c:	85 e0       	ldi	r24, 0x05	; 5
   1753e:	19 c1       	rjmp	.+562    	; 0x17772 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   17540:	62 30       	cpi	r22, 0x02	; 2
   17542:	09 f0       	breq	.+2      	; 0x17546 <Amigo_Command+0x2a6>
   17544:	3f c0       	rjmp	.+126    	; 0x175c4 <Amigo_Command+0x324>
   17546:	05 30       	cpi	r16, 0x05	; 5
   17548:	11 05       	cpc	r17, r1
   1754a:	d1 f4       	brne	.+52     	; 0x17580 <Amigo_Command+0x2e0>
/// @brief
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1754c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17550:	85 ff       	sbrs	r24, 5
   17552:	0a c0       	rjmp	.+20     	; 0x17568 <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   17554:	84 e5       	ldi	r24, 0x54	; 84
   17556:	9b e2       	ldi	r25, 0x2B	; 43
   17558:	a0 e0       	ldi	r26, 0x00	; 0
   1755a:	ed b7       	in	r30, 0x3d	; 61
   1755c:	fe b7       	in	r31, 0x3e	; 62
   1755e:	81 83       	std	Z+1, r24	; 0x01
   17560:	92 83       	std	Z+2, r25	; 0x02
   17562:	a3 83       	std	Z+3, r26	; 0x03
   17564:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17568:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   1756c:	85 de       	rcall	.-758    	; 0x17278 <amigo_check_unit>

/// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   1756e:	80 91 e2 1c 	lds	r24, 0x1CE2	; 0x801ce2 <gpib_iobuff+0x2>
   17572:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   17574:	80 91 e3 1c 	lds	r24, 0x1CE3	; 0x801ce3 <gpib_iobuff+0x3>
   17578:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   1757a:	80 91 e4 1c 	lds	r24, 0x1CE4	; 0x801ce4 <gpib_iobuff+0x4>
   1757e:	1d c0       	rjmp	.+58     	; 0x175ba <Amigo_Command+0x31a>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   17580:	06 30       	cpi	r16, 0x06	; 6
   17582:	11 05       	cpc	r17, r1
   17584:	09 f0       	breq	.+2      	; 0x17588 <Amigo_Command+0x2e8>
   17586:	6b c1       	rjmp	.+726    	; 0x1785e <Amigo_Command+0x5be>
/// @brief
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17588:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1758c:	85 ff       	sbrs	r24, 5
   1758e:	0a c0       	rjmp	.+20     	; 0x175a4 <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   17590:	80 e4       	ldi	r24, 0x40	; 64
   17592:	9b e2       	ldi	r25, 0x2B	; 43
   17594:	a0 e0       	ldi	r26, 0x00	; 0
   17596:	ed b7       	in	r30, 0x3d	; 61
   17598:	fe b7       	in	r31, 0x3e	; 62
   1759a:	81 83       	std	Z+1, r24	; 0x01
   1759c:	92 83       	std	Z+2, r25	; 0x02
   1759e:	a3 83       	std	Z+3, r26	; 0x03
   175a0:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   175a4:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   175a8:	67 de       	rcall	.-818    	; 0x17278 <amigo_check_unit>
/// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   175aa:	80 91 e3 1c 	lds	r24, 0x1CE3	; 0x801ce3 <gpib_iobuff+0x3>
   175ae:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   175b0:	80 91 e4 1c 	lds	r24, 0x1CE4	; 0x801ce4 <gpib_iobuff+0x4>
   175b4:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   175b6:	80 91 e5 1c 	lds	r24, 0x1CE5	; 0x801ce5 <gpib_iobuff+0x5>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   175ba:	8f 87       	std	Y+15, r24	; 0x0f
   175bc:	ce 01       	movw	r24, r28
   175be:	0a 96       	adiw	r24, 0x0a	; 10
   175c0:	8a d9       	rcall	.-3308   	; 0x168d6 <amigo_seek>
   175c2:	d8 c0       	rjmp	.+432    	; 0x17774 <Amigo_Command+0x4d4>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   175c4:	63 30       	cpi	r22, 0x03	; 3
   175c6:	e9 f4       	brne	.+58     	; 0x17602 <Amigo_Command+0x362>
   175c8:	02 30       	cpi	r16, 0x02	; 2
   175ca:	11 05       	cpc	r17, r1
   175cc:	09 f0       	breq	.+2      	; 0x175d0 <Amigo_Command+0x330>
   175ce:	47 c1       	rjmp	.+654    	; 0x1785e <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   175d0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   175d4:	85 ff       	sbrs	r24, 5
   175d6:	0a c0       	rjmp	.+20     	; 0x175ec <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   175d8:	87 e1       	ldi	r24, 0x17	; 23
   175da:	9b e2       	ldi	r25, 0x2B	; 43
   175dc:	a0 e0       	ldi	r26, 0x00	; 0
   175de:	ed b7       	in	r30, 0x3d	; 61
   175e0:	fe b7       	in	r31, 0x3e	; 62
   175e2:	81 83       	std	Z+1, r24	; 0x01
   175e4:	92 83       	std	Z+2, r25	; 0x02
   175e6:	a3 83       	std	Z+3, r26	; 0x03
   175e8:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   175ec:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
            amigo_request_status();
   175f0:	43 de       	rcall	.-890    	; 0x17278 <amigo_check_unit>
   175f2:	3d d8       	rcall	.-3974   	; 0x1666e <amigo_request_status>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   175f4:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   175f8:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   175fc:	83 e0       	ldi	r24, 0x03	; 3
   175fe:	80 83       	st	Z, r24
   17600:	29 c1       	rjmp	.+594    	; 0x17854 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   17602:	65 30       	cpi	r22, 0x05	; 5
   17604:	d9 f4       	brne	.+54     	; 0x1763c <Amigo_Command+0x39c>
   17606:	02 30       	cpi	r16, 0x02	; 2
   17608:	11 05       	cpc	r17, r1
   1760a:	09 f0       	breq	.+2      	; 0x1760e <Amigo_Command+0x36e>
   1760c:	28 c1       	rjmp	.+592    	; 0x1785e <Amigo_Command+0x5be>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1760e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17612:	85 ff       	sbrs	r24, 5
   17614:	0a c0       	rjmp	.+20     	; 0x1762a <Amigo_Command+0x38a>
                printf("[AMIGO Read Unbuffered Command]\n");
   17616:	86 ef       	ldi	r24, 0xF6	; 246
   17618:	9a e2       	ldi	r25, 0x2A	; 42
   1761a:	a0 e0       	ldi	r26, 0x00	; 0
   1761c:	ed b7       	in	r30, 0x3d	; 61
   1761e:	fe b7       	in	r31, 0x3e	; 62
   17620:	81 83       	std	Z+1, r24	; 0x01
   17622:	92 83       	std	Z+2, r25	; 0x02
   17624:	a3 83       	std	Z+3, r26	; 0x03
   17626:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1762a:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   1762e:	24 de       	rcall	.-952    	; 0x17278 <amigo_check_unit>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   17630:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   17634:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   17638:	86 e0       	ldi	r24, 0x06	; 6
   1763a:	e7 c0       	rjmp	.+462    	; 0x1780a <Amigo_Command+0x56a>
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
#endif
        }
        else if(op == 0x07 && len == 4)
   1763c:	67 30       	cpi	r22, 0x07	; 7
   1763e:	f9 f4       	brne	.+62     	; 0x1767e <Amigo_Command+0x3de>
   17640:	04 30       	cpi	r16, 0x04	; 4
   17642:	11 05       	cpc	r17, r1
   17644:	09 f0       	breq	.+2      	; 0x17648 <Amigo_Command+0x3a8>
   17646:	0b c1       	rjmp	.+534    	; 0x1785e <Amigo_Command+0x5be>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17648:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1764c:	85 ff       	sbrs	r24, 5
   1764e:	0a c0       	rjmp	.+20     	; 0x17664 <Amigo_Command+0x3c4>
                printf("[AMIGO Verify]\n");
   17650:	86 ee       	ldi	r24, 0xE6	; 230
   17652:	9a e2       	ldi	r25, 0x2A	; 42
   17654:	a0 e0       	ldi	r26, 0x00	; 0
   17656:	ed b7       	in	r30, 0x3d	; 61
   17658:	fe b7       	in	r31, 0x3e	; 62
   1765a:	81 83       	std	Z+1, r24	; 0x01
   1765c:	92 83       	std	Z+2, r25	; 0x02
   1765e:	a3 83       	std	Z+3, r26	; 0x03
   17660:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17664:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   17668:	07 de       	rcall	.-1010   	; 0x17278 <amigo_check_unit>
            sectors = (0xff & *ptr++) << 8;
   1766a:	80 91 e2 1c 	lds	r24, 0x1CE2	; 0x801ce2 <gpib_iobuff+0x2>
   1766e:	90 e0       	ldi	r25, 0x00	; 0
   17670:	98 2f       	mov	r25, r24
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   17672:	88 27       	eor	r24, r24
   17674:	20 91 e3 1c 	lds	r18, 0x1CE3	; 0x801ce3 <gpib_iobuff+0x3>
   17678:	82 2b       	or	r24, r18
   1767a:	58 d9       	rcall	.-3408   	; 0x1692c <amigo_verify>
   1767c:	f3 c0       	rjmp	.+486    	; 0x17864 <Amigo_Command+0x5c4>
        }
        else if(op == 0x08 && len == 2)
   1767e:	68 30       	cpi	r22, 0x08	; 8
   17680:	d9 f4       	brne	.+54     	; 0x176b8 <Amigo_Command+0x418>
   17682:	02 30       	cpi	r16, 0x02	; 2
   17684:	11 05       	cpc	r17, r1
   17686:	09 f0       	breq	.+2      	; 0x1768a <Amigo_Command+0x3ea>
   17688:	ea c0       	rjmp	.+468    	; 0x1785e <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1768a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1768e:	85 ff       	sbrs	r24, 5
   17690:	0a c0       	rjmp	.+20     	; 0x176a6 <Amigo_Command+0x406>
                printf("[AMIGO Write Unbuffered Command]\n");
   17692:	84 ec       	ldi	r24, 0xC4	; 196
   17694:	9a e2       	ldi	r25, 0x2A	; 42
   17696:	a0 e0       	ldi	r26, 0x00	; 0
   17698:	ed b7       	in	r30, 0x3d	; 61
   1769a:	fe b7       	in	r31, 0x3e	; 62
   1769c:	81 83       	std	Z+1, r24	; 0x01
   1769e:	92 83       	std	Z+2, r25	; 0x02
   176a0:	a3 83       	std	Z+3, r26	; 0x03
   176a2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   176a6:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   176aa:	e6 dd       	rcall	.-1076   	; 0x17278 <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   176ac:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   176b0:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   176b4:	88 e0       	ldi	r24, 0x08	; 8
   176b6:	5d c0       	rjmp	.+186    	; 0x17772 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   176b8:	86 2f       	mov	r24, r22
   176ba:	8f 7d       	andi	r24, 0xDF	; 223
   176bc:	8b 30       	cpi	r24, 0x0B	; 11
   176be:	d9 f4       	brne	.+54     	; 0x176f6 <Amigo_Command+0x456>
   176c0:	02 30       	cpi	r16, 0x02	; 2
   176c2:	11 05       	cpc	r17, r1
   176c4:	09 f0       	breq	.+2      	; 0x176c8 <Amigo_Command+0x428>
   176c6:	cb c0       	rjmp	.+406    	; 0x1785e <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   176c8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   176cc:	85 ff       	sbrs	r24, 5
   176ce:	0a c0       	rjmp	.+20     	; 0x176e4 <Amigo_Command+0x444>
                printf("[AMIGO Initialize Command]\n");
   176d0:	88 ea       	ldi	r24, 0xA8	; 168
   176d2:	9a e2       	ldi	r25, 0x2A	; 42
   176d4:	a0 e0       	ldi	r26, 0x00	; 0
   176d6:	ed b7       	in	r30, 0x3d	; 61
   176d8:	fe b7       	in	r31, 0x3e	; 62
   176da:	81 83       	std	Z+1, r24	; 0x01
   176dc:	92 83       	std	Z+2, r25	; 0x02
   176de:	a3 83       	std	Z+3, r26	; 0x03
   176e0:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   176e4:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   176e8:	c7 dd       	rcall	.-1138   	; 0x17278 <amigo_check_unit>
            AMIGOs->state = AMIGO_INITIALIZE;
   176ea:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   176ee:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   176f2:	8a e0       	ldi	r24, 0x0A	; 10
   176f4:	3e c0       	rjmp	.+124    	; 0x17772 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   176f6:	64 31       	cpi	r22, 0x14	; 20
   176f8:	09 f0       	breq	.+2      	; 0x176fc <Amigo_Command+0x45c>
   176fa:	b1 c0       	rjmp	.+354    	; 0x1785e <Amigo_Command+0x5be>
   176fc:	02 30       	cpi	r16, 0x02	; 2
   176fe:	11 05       	cpc	r17, r1
   17700:	09 f0       	breq	.+2      	; 0x17704 <Amigo_Command+0x464>
   17702:	ad c0       	rjmp	.+346    	; 0x1785e <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17704:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17708:	85 ff       	sbrs	r24, 5
   1770a:	0a c0       	rjmp	.+20     	; 0x17720 <Amigo_Command+0x480>
                printf("[AMIGO Request Logical Address Command]\n");
   1770c:	8f e7       	ldi	r24, 0x7F	; 127
   1770e:	9a e2       	ldi	r25, 0x2A	; 42
   17710:	a0 e0       	ldi	r26, 0x00	; 0
   17712:	ed b7       	in	r30, 0x3d	; 61
   17714:	fe b7       	in	r31, 0x3e	; 62
   17716:	81 83       	std	Z+1, r24	; 0x01
   17718:	92 83       	std	Z+2, r25	; 0x02
   1771a:	a3 83       	std	Z+3, r26	; 0x03
   1771c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
            amigo_request_logical_address();
   17720:	0e 94 29 b3 	call	0x16652	; 0x16652 <amigo_request_logical_address>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   17724:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   17728:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   1772c:	84 e0       	ldi	r24, 0x04	; 4
   1772e:	21 c0       	rjmp	.+66     	; 0x17772 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   17730:	f9 e6       	ldi	r31, 0x69	; 105
   17732:	ef 16       	cp	r14, r31
   17734:	f1 04       	cpc	r15, r1
   17736:	39 f5       	brne	.+78     	; 0x17786 <Amigo_Command+0x4e6>
    {
        if(op == 0x08 && len == 2)
   17738:	68 30       	cpi	r22, 0x08	; 8
   1773a:	09 f0       	breq	.+2      	; 0x1773e <Amigo_Command+0x49e>
   1773c:	90 c0       	rjmp	.+288    	; 0x1785e <Amigo_Command+0x5be>
   1773e:	02 30       	cpi	r16, 0x02	; 2
   17740:	11 05       	cpc	r17, r1
   17742:	09 f0       	breq	.+2      	; 0x17746 <Amigo_Command+0x4a6>
   17744:	8c c0       	rjmp	.+280    	; 0x1785e <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17746:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1774a:	85 ff       	sbrs	r24, 5
   1774c:	0a c0       	rjmp	.+20     	; 0x17762 <Amigo_Command+0x4c2>
                printf("[AMIGO Write Buffered Command]\n");
   1774e:	8f e5       	ldi	r24, 0x5F	; 95
   17750:	9a e2       	ldi	r25, 0x2A	; 42
   17752:	a0 e0       	ldi	r26, 0x00	; 0
   17754:	ed b7       	in	r30, 0x3d	; 61
   17756:	fe b7       	in	r31, 0x3e	; 62
   17758:	81 83       	std	Z+1, r24	; 0x01
   1775a:	92 83       	std	Z+2, r25	; 0x02
   1775c:	a3 83       	std	Z+3, r26	; 0x03
   1775e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   17762:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   17766:	88 dd       	rcall	.-1264   	; 0x17278 <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   17768:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   1776c:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   17770:	89 e0       	ldi	r24, 0x09	; 9
   17772:	80 83       	st	Z, r24
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   17774:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   17778:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   1777c:	81 81       	ldd	r24, Z+1	; 0x01
   1777e:	90 e0       	ldi	r25, 0x00	; 0
   17780:	0e 94 d6 85 	call	0x10bac	; 0x10bac <gpib_enable_PPR>
   17784:	67 c0       	rjmp	.+206    	; 0x17854 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   17786:	fa e6       	ldi	r31, 0x6A	; 106
   17788:	ef 16       	cp	r14, r31
   1778a:	f1 04       	cpc	r15, r1
   1778c:	09 f0       	breq	.+2      	; 0x17790 <Amigo_Command+0x4f0>
   1778e:	40 c0       	rjmp	.+128    	; 0x17810 <Amigo_Command+0x570>
    {
        if(op == 0x08 && len == 2)
   17790:	68 30       	cpi	r22, 0x08	; 8
   17792:	f1 f4       	brne	.+60     	; 0x177d0 <Amigo_Command+0x530>
   17794:	02 30       	cpi	r16, 0x02	; 2
   17796:	11 05       	cpc	r17, r1
   17798:	09 f0       	breq	.+2      	; 0x1779c <Amigo_Command+0x4fc>
   1779a:	61 c0       	rjmp	.+194    	; 0x1785e <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1779c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   177a0:	85 ff       	sbrs	r24, 5
   177a2:	0a c0       	rjmp	.+20     	; 0x177b8 <Amigo_Command+0x518>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   177a4:	84 e3       	ldi	r24, 0x34	; 52
   177a6:	9a e2       	ldi	r25, 0x2A	; 42
   177a8:	a0 e0       	ldi	r26, 0x00	; 0
   177aa:	ed b7       	in	r30, 0x3d	; 61
   177ac:	fe b7       	in	r31, 0x3e	; 62
   177ae:	81 83       	std	Z+1, r24	; 0x01
   177b0:	92 83       	std	Z+2, r25	; 0x02
   177b2:	a3 83       	std	Z+3, r26	; 0x03
   177b4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   177b8:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
   177bc:	5d dd       	rcall	.-1350   	; 0x17278 <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   177be:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   177c2:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   177c6:	82 e0       	ldi	r24, 0x02	; 2
   177c8:	80 83       	st	Z, r24
            amigo_request_status();
   177ca:	0e 94 37 b3 	call	0x1666e	; 0x1666e <amigo_request_status>
   177ce:	42 c0       	rjmp	.+132    	; 0x17854 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   177d0:	65 30       	cpi	r22, 0x05	; 5
   177d2:	09 f0       	breq	.+2      	; 0x177d6 <Amigo_Command+0x536>
   177d4:	44 c0       	rjmp	.+136    	; 0x1785e <Amigo_Command+0x5be>
   177d6:	02 30       	cpi	r16, 0x02	; 2
   177d8:	11 05       	cpc	r17, r1
   177da:	09 f0       	breq	.+2      	; 0x177de <Amigo_Command+0x53e>
   177dc:	40 c0       	rjmp	.+128    	; 0x1785e <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   177de:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   177e2:	85 ff       	sbrs	r24, 5
   177e4:	0a c0       	rjmp	.+20     	; 0x177fa <Amigo_Command+0x55a>
                printf("[AMIGO Read Buffered Command]\n");
   177e6:	85 e1       	ldi	r24, 0x15	; 21
   177e8:	9a e2       	ldi	r25, 0x2A	; 42
   177ea:	a0 e0       	ldi	r26, 0x00	; 0
   177ec:	ed b7       	in	r30, 0x3d	; 61
   177ee:	fe b7       	in	r31, 0x3e	; 62
   177f0:	81 83       	std	Z+1, r24	; 0x01
   177f2:	92 83       	std	Z+2, r25	; 0x02
   177f4:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   177f6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   177fa:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   177fe:	3c dd       	rcall	.-1416   	; 0x17278 <amigo_check_unit>
   17800:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   17804:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   17808:	87 e0       	ldi	r24, 0x07	; 7

#if 0
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
   1780a:	80 83       	st	Z, r24
   1780c:	c5 d9       	rcall	.-3190   	; 0x16b98 <amigo_buffered_read_command>
   1780e:	2a c0       	rjmp	.+84     	; 0x17864 <Amigo_Command+0x5c4>
#endif
        }
    }
    else if (secondary == 0x6C)
   17810:	fc e6       	ldi	r31, 0x6C	; 108
   17812:	ef 16       	cp	r14, r31
   17814:	f1 04       	cpc	r15, r1
   17816:	d1 f4       	brne	.+52     	; 0x1784c <Amigo_Command+0x5ac>
    {
        if(op == 0x18 && len == 5)
   17818:	68 31       	cpi	r22, 0x18	; 24
   1781a:	09 f5       	brne	.+66     	; 0x1785e <Amigo_Command+0x5be>
   1781c:	05 30       	cpi	r16, 0x05	; 5
   1781e:	11 05       	cpc	r17, r1
   17820:	f1 f4       	brne	.+60     	; 0x1785e <Amigo_Command+0x5be>
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17822:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17826:	85 ff       	sbrs	r24, 5
   17828:	0a c0       	rjmp	.+20     	; 0x1783e <Amigo_Command+0x59e>
                printf("[AMIGO Format]\n");
   1782a:	85 e0       	ldi	r24, 0x05	; 5
   1782c:	9a e2       	ldi	r25, 0x2A	; 42
   1782e:	a0 e0       	ldi	r26, 0x00	; 0
   17830:	ed b7       	in	r30, 0x3d	; 61
   17832:	fe b7       	in	r31, 0x3e	; 62
   17834:	81 83       	std	Z+1, r24	; 0x01
   17836:	92 83       	std	Z+2, r25	; 0x02
   17838:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1783a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1783e:	80 91 e1 1c 	lds	r24, 0x1CE1	; 0x801ce1 <gpib_iobuff+0x1>
            ++ptr;                                // override not used
            ++ptr;                                // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   17842:	1a dd       	rcall	.-1484   	; 0x17278 <amigo_check_unit>
   17844:	80 91 e4 1c 	lds	r24, 0x1CE4	; 0x801ce4 <gpib_iobuff+0x4>
   17848:	0f d9       	rcall	.-3554   	; 0x16a68 <amigo_format>
   1784a:	04 c0       	rjmp	.+8      	; 0x17854 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   1784c:	f0 e7       	ldi	r31, 0x70	; 112
   1784e:	ef 16       	cp	r14, r31
   17850:	f1 04       	cpc	r15, r1
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   17852:	29 f4       	brne	.+10     	; 0x1785e <Amigo_Command+0x5be>
   17854:	8b 8d       	ldd	r24, Y+27	; 0x1b
   17856:	9c 8d       	ldd	r25, Y+28	; 0x1c
   17858:	88 27       	eor	r24, r24
   1785a:	90 7d       	andi	r25, 0xD0	; 208
    }
    return ( amigo_todo_op(secondary, op, len) );
   1785c:	03 c0       	rjmp	.+6      	; 0x17864 <Amigo_Command+0x5c4>
   1785e:	a8 01       	movw	r20, r16
   17860:	8e 2d       	mov	r24, r14
   17862:	ed db       	rcall	.-2086   	; 0x1703e <amigo_todo_op>
}
   17864:	6c 96       	adiw	r28, 0x1c	; 28
   17866:	e6 e0       	ldi	r30, 0x06	; 6
   17868:	0c 94 8e e6 	jmp	0x1cd1c	; 0x1cd1c <__epilogue_restores__+0x18>

0001786c <Amigo_Execute>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Execute( int secondary )
{
   1786c:	a9 e0       	ldi	r26, 0x09	; 9
   1786e:	b0 e0       	ldi	r27, 0x00	; 0
   17870:	ec e3       	ldi	r30, 0x3C	; 60
   17872:	fc eb       	ldi	r31, 0xBC	; 188
   17874:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
   17878:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1787a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1787e:	85 ff       	sbrs	r24, 5
   17880:	16 c0       	rjmp	.+44     	; 0x178ae <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   17882:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   17886:	90 e0       	ldi	r25, 0x00	; 0
   17888:	ed b7       	in	r30, 0x3d	; 61
   1788a:	fe b7       	in	r31, 0x3e	; 62
   1788c:	91 87       	std	Z+9, r25	; 0x09
   1788e:	80 87       	std	Z+8, r24	; 0x08
   17890:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17894:	90 e0       	ldi	r25, 0x00	; 0
   17896:	97 83       	std	Z+7, r25	; 0x07
   17898:	86 83       	std	Z+6, r24	; 0x06
   1789a:	d5 83       	std	Z+5, r29	; 0x05
   1789c:	c4 83       	std	Z+4, r28	; 0x04
   1789e:	83 ed       	ldi	r24, 0xD3	; 211
   178a0:	99 e2       	ldi	r25, 0x29	; 41
   178a2:	a0 e0       	ldi	r26, 0x00	; 0
   178a4:	81 83       	std	Z+1, r24	; 0x01
   178a6:	92 83       	std	Z+2, r25	; 0x02
   178a8:	a3 83       	std	Z+3, r26	; 0x03
   178aa:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   178ae:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   178b2:	8f 35       	cpi	r24, 0x5F	; 95
   178b4:	09 f4       	brne	.+2      	; 0x178b8 <Amigo_Execute+0x4c>
   178b6:	ad c0       	rjmp	.+346    	; 0x17a12 <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   178b8:	90 e0       	ldi	r25, 0x00	; 0
   178ba:	0e 94 4e 8c 	call	0x1189c	; 0x1189c <AMIGO_is_MTA>
   178be:	89 2b       	or	r24, r25
   178c0:	39 f0       	breq	.+14     	; 0x178d0 <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   178c2:	ce 01       	movw	r24, r28
   178c4:	87 7f       	andi	r24, 0xF7	; 247
   178c6:	80 36       	cpi	r24, 0x60	; 96
   178c8:	91 05       	cpc	r25, r1
   178ca:	09 f0       	breq	.+2      	; 0x178ce <Amigo_Execute+0x62>
   178cc:	a2 c0       	rjmp	.+324    	; 0x17a12 <Amigo_Execute+0x1a6>
   178ce:	08 c0       	rjmp	.+16     	; 0x178e0 <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   178d0:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   178d4:	90 e0       	ldi	r25, 0x00	; 0
   178d6:	0e 94 3c 8c 	call	0x11878	; 0x11878 <AMIGO_is_MLA>
   178da:	89 2b       	or	r24, r25
   178dc:	91 f7       	brne	.-28     	; 0x178c2 <Amigo_Execute+0x56>
   178de:	99 c0       	rjmp	.+306    	; 0x17a12 <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   178e0:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   178e4:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   178e8:	81 81       	ldd	r24, Z+1	; 0x01
   178ea:	90 e0       	ldi	r25, 0x00	; 0
   178ec:	0e 94 0c 86 	call	0x10c18	; 0x10c18 <gpib_disable_PPR>

    if(secondary == 0x60)
   178f0:	c0 36       	cpi	r28, 0x60	; 96
   178f2:	d1 05       	cpc	r29, r1
   178f4:	09 f0       	breq	.+2      	; 0x178f8 <Amigo_Execute+0x8c>
   178f6:	4e c0       	rjmp	.+156    	; 0x17994 <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   178f8:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   178fc:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   17900:	e0 81       	ld	r30, Z
   17902:	8e 2f       	mov	r24, r30
   17904:	90 e0       	ldi	r25, 0x00	; 0
   17906:	8b 30       	cpi	r24, 0x0B	; 11
   17908:	91 05       	cpc	r25, r1
   1790a:	08 f0       	brcs	.+2      	; 0x1790e <Amigo_Execute+0xa2>
   1790c:	41 c0       	rjmp	.+130    	; 0x17990 <Amigo_Execute+0x124>
   1790e:	fc 01       	movw	r30, r24
   17910:	ea 52       	subi	r30, 0x2A	; 42
   17912:	ff 4f       	sbci	r31, 0xFF	; 255
   17914:	0c 94 37 e6 	jmp	0x1cc6e	; 0x1cc6e <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17918:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1791c:	85 ff       	sbrs	r24, 5
   1791e:	18 c0       	rjmp	.+48     	; 0x17950 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   17920:	83 eb       	ldi	r24, 0xB3	; 179
   17922:	99 e2       	ldi	r25, 0x29	; 41
   17924:	0d c0       	rjmp	.+26     	; 0x17940 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17926:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1792a:	85 ff       	sbrs	r24, 5
   1792c:	11 c0       	rjmp	.+34     	; 0x17950 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   1792e:	82 e9       	ldi	r24, 0x92	; 146
   17930:	99 e2       	ldi	r25, 0x29	; 41
   17932:	06 c0       	rjmp	.+12     	; 0x17940 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17934:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17938:	85 ff       	sbrs	r24, 5
   1793a:	0a c0       	rjmp	.+20     	; 0x17950 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   1793c:	83 e7       	ldi	r24, 0x73	; 115
   1793e:	99 e2       	ldi	r25, 0x29	; 41
   17940:	a0 e0       	ldi	r26, 0x00	; 0
   17942:	ed b7       	in	r30, 0x3d	; 61
   17944:	fe b7       	in	r31, 0x3e	; 62
   17946:	81 83       	std	Z+1, r24	; 0x01
   17948:	92 83       	std	Z+2, r25	; 0x02
   1794a:	a3 83       	std	Z+3, r26	; 0x03
   1794c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
                return ( amigo_buffered_read_execute() );
   17950:	b0 d9       	rcall	.-3232   	; 0x16cb2 <amigo_buffered_read_execute>
   17952:	61 c0       	rjmp	.+194    	; 0x17a16 <Amigo_Execute+0x1aa>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17954:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17958:	85 ff       	sbrs	r24, 5
   1795a:	18 c0       	rjmp	.+48     	; 0x1798c <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Unbuffered]\n");
   1795c:	81 e5       	ldi	r24, 0x51	; 81
   1795e:	99 e2       	ldi	r25, 0x29	; 41
   17960:	0d c0       	rjmp	.+26     	; 0x1797c <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17962:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17966:	85 ff       	sbrs	r24, 5
   17968:	11 c0       	rjmp	.+34     	; 0x1798c <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Initialize]\n");
   1796a:	85 e3       	ldi	r24, 0x35	; 53
   1796c:	99 e2       	ldi	r25, 0x29	; 41
   1796e:	06 c0       	rjmp	.+12     	; 0x1797c <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17970:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17974:	85 ff       	sbrs	r24, 5
   17976:	0a c0       	rjmp	.+20     	; 0x1798c <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Buffered]\n");
   17978:	85 e1       	ldi	r24, 0x15	; 21
   1797a:	99 e2       	ldi	r25, 0x29	; 41
   1797c:	a0 e0       	ldi	r26, 0x00	; 0
   1797e:	ed b7       	in	r30, 0x3d	; 61
   17980:	fe b7       	in	r31, 0x3e	; 62
   17982:	81 83       	std	Z+1, r24	; 0x01
   17984:	92 83       	std	Z+2, r25	; 0x02
   17986:	a3 83       	std	Z+3, r26	; 0x03
   17988:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
                return ( amigo_buffered_write() );
   1798c:	ed d9       	rcall	.-3110   	; 0x16d68 <amigo_buffered_write>
   1798e:	43 c0       	rjmp	.+134    	; 0x17a16 <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17990:	80 e6       	ldi	r24, 0x60	; 96
   17992:	3d c0       	rjmp	.+122    	; 0x17a0e <Amigo_Execute+0x1a2>
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   17994:	c8 36       	cpi	r28, 0x68	; 104
   17996:	d1 05       	cpc	r29, r1
   17998:	e1 f5       	brne	.+120    	; 0x17a12 <Amigo_Execute+0x1a6>
    {
        switch(AMIGOs->state)
   1799a:	e0 91 58 19 	lds	r30, 0x1958	; 0x801958 <AMIGOs>
   1799e:	f0 91 59 19 	lds	r31, 0x1959	; 0x801959 <AMIGOs+0x1>
   179a2:	80 81       	ld	r24, Z
   179a4:	82 30       	cpi	r24, 0x02	; 2
   179a6:	81 f0       	breq	.+32     	; 0x179c8 <Amigo_Execute+0x15c>
   179a8:	18 f4       	brcc	.+6      	; 0x179b0 <Amigo_Execute+0x144>
   179aa:	88 23       	and	r24, r24
   179ac:	91 f1       	breq	.+100    	; 0x17a12 <Amigo_Execute+0x1a6>
   179ae:	2e c0       	rjmp	.+92     	; 0x17a0c <Amigo_Execute+0x1a0>
   179b0:	83 30       	cpi	r24, 0x03	; 3
   179b2:	19 f0       	breq	.+6      	; 0x179ba <Amigo_Execute+0x14e>
   179b4:	84 30       	cpi	r24, 0x04	; 4
   179b6:	c9 f0       	breq	.+50     	; 0x179ea <Amigo_Execute+0x17e>
   179b8:	29 c0       	rjmp	.+82     	; 0x17a0c <Amigo_Execute+0x1a0>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   179ba:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   179be:	85 ff       	sbrs	r24, 5
   179c0:	11 c0       	rjmp	.+34     	; 0x179e4 <Amigo_Execute+0x178>
                    printf("[AMIGO Execute Request Status Buffered]\n");
   179c2:	8c ee       	ldi	r24, 0xEC	; 236
   179c4:	98 e2       	ldi	r25, 0x28	; 40
   179c6:	06 c0       	rjmp	.+12     	; 0x179d4 <Amigo_Execute+0x168>
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   179c8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   179cc:	85 ff       	sbrs	r24, 5
   179ce:	0a c0       	rjmp	.+20     	; 0x179e4 <Amigo_Execute+0x178>
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   179d0:	81 ec       	ldi	r24, 0xC1	; 193
   179d2:	98 e2       	ldi	r25, 0x28	; 40
   179d4:	a0 e0       	ldi	r26, 0x00	; 0
   179d6:	ed b7       	in	r30, 0x3d	; 61
   179d8:	fe b7       	in	r31, 0x3e	; 62
   179da:	81 83       	std	Z+1, r24	; 0x01
   179dc:	92 83       	std	Z+2, r25	; 0x02
   179de:	a3 83       	std	Z+3, r26	; 0x03
   179e0:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
                return ( amigo_send_status() );
   179e4:	0e 94 e9 b3 	call	0x167d2	; 0x167d2 <amigo_send_status>
   179e8:	16 c0       	rjmp	.+44     	; 0x17a16 <Amigo_Execute+0x1aa>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   179ea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   179ee:	85 ff       	sbrs	r24, 5
   179f0:	0a c0       	rjmp	.+20     	; 0x17a06 <Amigo_Execute+0x19a>
                    printf("[AMIGO Execute Request Logical Address]\n");
   179f2:	88 e9       	ldi	r24, 0x98	; 152
   179f4:	98 e2       	ldi	r25, 0x28	; 40
   179f6:	a0 e0       	ldi	r26, 0x00	; 0
   179f8:	ed b7       	in	r30, 0x3d	; 61
   179fa:	fe b7       	in	r31, 0x3e	; 62
   179fc:	81 83       	std	Z+1, r24	; 0x01
   179fe:	92 83       	std	Z+2, r25	; 0x02
   17a00:	a3 83       	std	Z+3, r26	; 0x03
   17a02:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
                return ( amigo_send_logical_address() );
   17a06:	0e 94 94 b3 	call	0x16728	; 0x16728 <amigo_send_logical_address>
   17a0a:	05 c0       	rjmp	.+10     	; 0x17a16 <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17a0c:	88 e6       	ldi	r24, 0x68	; 104
   17a0e:	b0 db       	rcall	.-2208   	; 0x17170 <amigo_todo>
   17a10:	02 c0       	rjmp	.+4      	; 0x17a16 <Amigo_Execute+0x1aa>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   17a12:	80 e0       	ldi	r24, 0x00	; 0
   17a14:	90 e0       	ldi	r25, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   17a16:	cd b7       	in	r28, 0x3d	; 61
   17a18:	de b7       	in	r29, 0x3e	; 62
   17a1a:	29 96       	adiw	r28, 0x09	; 9
   17a1c:	e2 e0       	ldi	r30, 0x02	; 2
   17a1e:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00017a22 <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   17a22:	cf 93       	push	r28
   17a24:	df 93       	push	r29
   17a26:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17a28:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   17a2c:	90 e0       	ldi	r25, 0x00	; 0
   17a2e:	0e 94 4e 8c 	call	0x1189c	; 0x1189c <AMIGO_is_MTA>
   17a32:	89 2b       	or	r24, r25
   17a34:	51 f0       	breq	.+20     	; 0x17a4a <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   17a36:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   17a3a:	8f 35       	cpi	r24, 0x5F	; 95
   17a3c:	71 f4       	brne	.+28     	; 0x17a5a <AMIGO_COMMANDS+0x38>
   17a3e:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17a42:	90 e0       	ldi	r25, 0x00	; 0
   17a44:	0e 94 3c 8c 	call	0x11878	; 0x11878 <AMIGO_is_MLA>
   17a48:	08 c0       	rjmp	.+16     	; 0x17a5a <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   17a4a:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17a4e:	90 e0       	ldi	r25, 0x00	; 0
   17a50:	0e 94 3c 8c 	call	0x11878	; 0x11878 <AMIGO_is_MLA>
   17a54:	89 2b       	or	r24, r25
   17a56:	79 f7       	brne	.-34     	; 0x17a36 <AMIGO_COMMANDS+0x14>
   17a58:	76 c0       	rjmp	.+236    	; 0x17b46 <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
// printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   17a5a:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17a5e:	81 11       	cpse	r24, r1
   17a60:	05 c0       	rjmp	.+10     	; 0x17a6c <AMIGO_COMMANDS+0x4a>
   17a62:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   17a66:	90 e0       	ldi	r25, 0x00	; 0
   17a68:	0e 94 4e 8c 	call	0x1189c	; 0x1189c <AMIGO_is_MTA>
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17a6c:	c0 36       	cpi	r28, 0x60	; 96
   17a6e:	99 f4       	brne	.+38     	; 0x17a96 <AMIGO_COMMANDS+0x74>
   17a70:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   17a74:	90 e0       	ldi	r25, 0x00	; 0
   17a76:	0e 94 4e 8c 	call	0x1189c	; 0x1189c <AMIGO_is_MTA>
   17a7a:	89 2b       	or	r24, r25
   17a7c:	19 f0       	breq	.+6      	; 0x17a84 <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   17a7e:	80 e6       	ldi	r24, 0x60	; 96
   17a80:	90 e0       	ldi	r25, 0x00	; 0
   17a82:	14 c0       	rjmp	.+40     	; 0x17aac <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   17a84:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17a88:	90 e0       	ldi	r25, 0x00	; 0
   17a8a:	0e 94 3c 8c 	call	0x11878	; 0x11878 <AMIGO_is_MLA>
   17a8e:	89 2b       	or	r24, r25
   17a90:	09 f4       	brne	.+2      	; 0x17a94 <AMIGO_COMMANDS+0x72>
   17a92:	59 c0       	rjmp	.+178    	; 0x17b46 <AMIGO_COMMANDS+0x124>
   17a94:	f4 cf       	rjmp	.-24     	; 0x17a7e <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   17a96:	c8 36       	cpi	r28, 0x68	; 104
   17a98:	c1 f4       	brne	.+48     	; 0x17aca <AMIGO_COMMANDS+0xa8>
   17a9a:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   17a9e:	90 e0       	ldi	r25, 0x00	; 0
   17aa0:	0e 94 4e 8c 	call	0x1189c	; 0x1189c <AMIGO_is_MTA>
   17aa4:	89 2b       	or	r24, r25
   17aa6:	21 f0       	breq	.+8      	; 0x17ab0 <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   17aa8:	88 e6       	ldi	r24, 0x68	; 104
   17aaa:	90 e0       	ldi	r25, 0x00	; 0
   17aac:	df de       	rcall	.-578    	; 0x1786c <Amigo_Execute>
   17aae:	0b c0       	rjmp	.+22     	; 0x17ac6 <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
   17ab0:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17ab4:	90 e0       	ldi	r25, 0x00	; 0
   17ab6:	0e 94 3c 8c 	call	0x11878	; 0x11878 <AMIGO_is_MLA>
   17aba:	89 2b       	or	r24, r25
   17abc:	09 f4       	brne	.+2      	; 0x17ac0 <AMIGO_COMMANDS+0x9e>
   17abe:	43 c0       	rjmp	.+134    	; 0x17b46 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17ac0:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
   17ac2:	90 e0       	ldi	r25, 0x00	; 0
   17ac4:	ed db       	rcall	.-2086   	; 0x172a0 <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   17ac6:	ec 01       	movw	r28, r24
   17ac8:	40 c0       	rjmp	.+128    	; 0x17b4a <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) )// Single byte command
   17aca:	c9 36       	cpi	r28, 0x69	; 105
   17acc:	51 f4       	brne	.+20     	; 0x17ae2 <AMIGO_COMMANDS+0xc0>
   17ace:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17ad2:	90 e0       	ldi	r25, 0x00	; 0
   17ad4:	0e 94 3c 8c 	call	0x11878	; 0x11878 <AMIGO_is_MLA>
   17ad8:	89 2b       	or	r24, r25
   17ada:	a9 f1       	breq	.+106    	; 0x17b46 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17adc:	89 e6       	ldi	r24, 0x69	; 105
   17ade:	90 e0       	ldi	r25, 0x00	; 0
   17ae0:	f1 cf       	rjmp	.-30     	; 0x17ac4 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) )// Single byte command
   17ae2:	ca 36       	cpi	r28, 0x6A	; 106
   17ae4:	51 f4       	brne	.+20     	; 0x17afa <AMIGO_COMMANDS+0xd8>
   17ae6:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17aea:	90 e0       	ldi	r25, 0x00	; 0
   17aec:	0e 94 3c 8c 	call	0x11878	; 0x11878 <AMIGO_is_MLA>
   17af0:	89 2b       	or	r24, r25
   17af2:	49 f1       	breq	.+82     	; 0x17b46 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17af4:	8a e6       	ldi	r24, 0x6A	; 106
   17af6:	90 e0       	ldi	r25, 0x00	; 0
   17af8:	e5 cf       	rjmp	.-54     	; 0x17ac4 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
   17afa:	cc 36       	cpi	r28, 0x6C	; 108
   17afc:	51 f4       	brne	.+20     	; 0x17b12 <AMIGO_COMMANDS+0xf0>
   17afe:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17b02:	90 e0       	ldi	r25, 0x00	; 0
   17b04:	0e 94 3c 8c 	call	0x11878	; 0x11878 <AMIGO_is_MLA>
   17b08:	89 2b       	or	r24, r25
   17b0a:	e9 f0       	breq	.+58     	; 0x17b46 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17b0c:	8c e6       	ldi	r24, 0x6C	; 108
   17b0e:	90 e0       	ldi	r25, 0x00	; 0
   17b10:	d9 cf       	rjmp	.-78     	; 0x17ac4 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   17b12:	c0 37       	cpi	r28, 0x70	; 112
   17b14:	c1 f4       	brne	.+48     	; 0x17b46 <AMIGO_COMMANDS+0x124>
   17b16:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   17b1a:	90 e0       	ldi	r25, 0x00	; 0
   17b1c:	0e 94 4e 8c 	call	0x1189c	; 0x1189c <AMIGO_is_MTA>
   17b20:	ec 01       	movw	r28, r24
   17b22:	89 2b       	or	r24, r25
   17b24:	51 f0       	breq	.+20     	; 0x17b3a <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17b26:	e0 91 5a 19 	lds	r30, 0x195A	; 0x80195a <AMIGOp>
   17b2a:	f0 91 5b 19 	lds	r31, 0x195B	; 0x80195b <AMIGOp+0x1>
   17b2e:	81 81       	ldd	r24, Z+1	; 0x01
   17b30:	90 e0       	ldi	r25, 0x00	; 0
   17b32:	0e 94 0c 86 	call	0x10c18	; 0x10c18 <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   17b36:	ff d9       	rcall	.-3074   	; 0x16f36 <amigo_cmd_dsj>
   17b38:	c6 cf       	rjmp	.-116    	; 0x17ac6 <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   17b3a:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17b3e:	90 e0       	ldi	r25, 0x00	; 0
   17b40:	0e 94 3c 8c 	call	0x11878	; 0x11878 <AMIGO_is_MLA>
   17b44:	02 c0       	rjmp	.+4      	; 0x17b4a <AMIGO_COMMANDS+0x128>
        {
// NOP
        }
    }
    return(0);
   17b46:	c0 e0       	ldi	r28, 0x00	; 0
   17b48:	d0 e0       	ldi	r29, 0x00	; 0
}
   17b4a:	ce 01       	movw	r24, r28
   17b4c:	df 91       	pop	r29
   17b4e:	cf 91       	pop	r28
   17b50:	08 95       	ret

00017b52 <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   17b52:	e3 e9       	ldi	r30, 0x93	; 147
   17b54:	f9 e1       	ldi	r31, 0x19	; 25
   17b56:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   17b58:	10 82       	st	Z, r1
   17b5a:	11 82       	std	Z+1, r1	; 0x01
   17b5c:	12 82       	std	Z+2, r1	; 0x02
   17b5e:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   17b60:	15 82       	std	Z+5, r1	; 0x05
   17b62:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   17b64:	12 86       	std	Z+10, r1	; 0x0a
   17b66:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   17b68:	14 86       	std	Z+12, r1	; 0x0c
   17b6a:	13 86       	std	Z+11, r1	; 0x0b
   17b6c:	08 95       	ret

00017b6e <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   17b6e:	cf 93       	push	r28
   17b70:	df 93       	push	r29
   17b72:	ad b7       	in	r26, 0x3d	; 61
   17b74:	be b7       	in	r27, 0x3e	; 62
   17b76:	17 97       	sbiw	r26, 0x07	; 7
   17b78:	0f b6       	in	r0, 0x3f	; 63
   17b7a:	f8 94       	cli
   17b7c:	be bf       	out	0x3e, r27	; 62
   17b7e:	0f be       	out	0x3f, r0	; 63
   17b80:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   17b82:	20 91 9c 19 	lds	r18, 0x199C	; 0x80199c <plot+0x9>
   17b86:	30 91 9d 19 	lds	r19, 0x199D	; 0x80199d <plot+0xa>
   17b8a:	21 15       	cp	r18, r1
   17b8c:	31 05       	cpc	r19, r1
   17b8e:	09 f4       	brne	.+2      	; 0x17b92 <receive_plot_flush+0x24>
   17b90:	45 c0       	rjmp	.+138    	; 0x17c1c <receive_plot_flush+0xae>
   17b92:	80 91 97 19 	lds	r24, 0x1997	; 0x801997 <plot+0x4>
   17b96:	90 91 98 19 	lds	r25, 0x1998	; 0x801998 <plot+0x5>
   17b9a:	00 97       	sbiw	r24, 0x00	; 0
   17b9c:	09 f4       	brne	.+2      	; 0x17ba0 <receive_plot_flush+0x32>
   17b9e:	40 c0       	rjmp	.+128    	; 0x17c20 <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   17ba0:	ac 01       	movw	r20, r24
   17ba2:	61 e0       	ldi	r22, 0x01	; 1
   17ba4:	70 e0       	ldi	r23, 0x00	; 0
   17ba6:	80 91 9e 19 	lds	r24, 0x199E	; 0x80199e <plot+0xb>
   17baa:	90 91 9f 19 	lds	r25, 0x199F	; 0x80199f <plot+0xc>
   17bae:	0e 94 fc 7b 	call	0xf7f8	; 0xf7f8 <fwrite>
   17bb2:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   17bb4:	80 91 97 19 	lds	r24, 0x1997	; 0x801997 <plot+0x4>
   17bb8:	90 91 98 19 	lds	r25, 0x1998	; 0x801998 <plot+0x5>
   17bbc:	c8 17       	cp	r28, r24
   17bbe:	d9 07       	cpc	r29, r25
   17bc0:	09 f1       	breq	.+66     	; 0x17c04 <receive_plot_flush+0x96>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17bc2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17bc6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17bca:	81 72       	andi	r24, 0x21	; 33
   17bcc:	99 27       	eor	r25, r25
   17bce:	89 2b       	or	r24, r25
   17bd0:	b1 f0       	breq	.+44     	; 0x17bfe <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   17bd2:	8a ec       	ldi	r24, 0xCA	; 202
   17bd4:	95 e1       	ldi	r25, 0x15	; 21
   17bd6:	0e 94 05 78 	call	0xf00a	; 0xf00a <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   17bda:	ed b7       	in	r30, 0x3d	; 61
   17bdc:	fe b7       	in	r31, 0x3e	; 62
   17bde:	d7 83       	std	Z+7, r29	; 0x07
   17be0:	c6 83       	std	Z+6, r28	; 0x06
   17be2:	80 91 97 19 	lds	r24, 0x1997	; 0x801997 <plot+0x4>
   17be6:	90 91 98 19 	lds	r25, 0x1998	; 0x801998 <plot+0x5>
   17bea:	95 83       	std	Z+5, r25	; 0x05
   17bec:	84 83       	std	Z+4, r24	; 0x04
   17bee:	88 e2       	ldi	r24, 0x28	; 40
   17bf0:	91 e3       	ldi	r25, 0x31	; 49
   17bf2:	a0 e0       	ldi	r26, 0x00	; 0
   17bf4:	81 83       	std	Z+1, r24	; 0x01
   17bf6:	92 83       	std	Z+2, r25	; 0x02
   17bf8:	a3 83       	std	Z+3, r26	; 0x03
   17bfa:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        }
        return(-1);
   17bfe:	8f ef       	ldi	r24, 0xFF	; 255
   17c00:	9f ef       	ldi	r25, 0xFF	; 255
   17c02:	0e c0       	rjmp	.+28     	; 0x17c20 <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   17c04:	80 91 9c 19 	lds	r24, 0x199C	; 0x80199c <plot+0x9>
   17c08:	90 91 9d 19 	lds	r25, 0x199D	; 0x80199d <plot+0xa>
   17c0c:	0e 94 4f 76 	call	0xec9e	; 0xec9e <fileno>
    if(fno < 0)
   17c10:	97 fd       	sbrc	r25, 7
   17c12:	f5 cf       	rjmp	.-22     	; 0x17bfe <receive_plot_flush+0x90>
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
   17c14:	0e 94 46 7b 	call	0xf68c	; 0xf68c <syncfs>
    return (ret);
   17c18:	ce 01       	movw	r24, r28
   17c1a:	02 c0       	rjmp	.+4      	; 0x17c20 <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   17c1c:	80 e0       	ldi	r24, 0x00	; 0
   17c1e:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
    return (ret);
}
   17c20:	cd b7       	in	r28, 0x3d	; 61
   17c22:	de b7       	in	r29, 0x3e	; 62
   17c24:	27 96       	adiw	r28, 0x07	; 7
   17c26:	e2 e0       	ldi	r30, 0x02	; 2
   17c28:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00017c2c <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   17c2c:	ad b7       	in	r26, 0x3d	; 61
   17c2e:	be b7       	in	r27, 0x3e	; 62
   17c30:	17 97       	sbiw	r26, 0x07	; 7
   17c32:	0f b6       	in	r0, 0x3f	; 63
   17c34:	f8 94       	cli
   17c36:	be bf       	out	0x3e, r27	; 62
   17c38:	0f be       	out	0x3f, r0	; 63
   17c3a:	ad bf       	out	0x3d, r26	; 61
    if( receive_plot_flush() < 0 )
   17c3c:	98 df       	rcall	.-208    	; 0x17b6e <receive_plot_flush>
   17c3e:	97 ff       	sbrs	r25, 7
   17c40:	03 c0       	rjmp	.+6      	; 0x17c48 <printer_close+0x1c>
        plot.error = 1;
   17c42:	81 e0       	ldi	r24, 0x01	; 1
   17c44:	80 93 9b 19 	sts	0x199B, r24	; 0x80199b <plot+0x8>

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17c48:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17c4c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17c50:	81 72       	andi	r24, 0x21	; 33
   17c52:	99 27       	eor	r25, r25
   17c54:	89 2b       	or	r24, r25
   17c56:	71 f0       	breq	.+28     	; 0x17c74 <printer_close+0x48>
    {
        if(plot.error)
   17c58:	80 91 9b 19 	lds	r24, 0x199B	; 0x80199b <plot+0x8>
   17c5c:	88 23       	and	r24, r24
   17c5e:	51 f0       	breq	.+20     	; 0x17c74 <printer_close+0x48>
            printf("ERROR durring write\n");
   17c60:	87 e5       	ldi	r24, 0x57	; 87
   17c62:	91 e3       	ldi	r25, 0x31	; 49
   17c64:	a0 e0       	ldi	r26, 0x00	; 0
   17c66:	ed b7       	in	r30, 0x3d	; 61
   17c68:	fe b7       	in	r31, 0x3e	; 62
   17c6a:	81 83       	std	Z+1, r24	; 0x01
   17c6c:	92 83       	std	Z+2, r25	; 0x02
   17c6e:	a3 83       	std	Z+3, r26	; 0x03
   17c70:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    }

    if(plot.fp)
   17c74:	80 91 9c 19 	lds	r24, 0x199C	; 0x80199c <plot+0x9>
   17c78:	90 91 9d 19 	lds	r25, 0x199D	; 0x80199d <plot+0xa>
   17c7c:	00 97       	sbiw	r24, 0x00	; 0
   17c7e:	e1 f0       	breq	.+56     	; 0x17cb8 <printer_close+0x8c>
    {
        fclose(plot.fp);
   17c80:	0e 94 7e 7c 	call	0xf8fc	; 0xf8fc <fclose>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17c84:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17c88:	85 ff       	sbrs	r24, 5
   17c8a:	16 c0       	rjmp	.+44     	; 0x17cb8 <printer_close+0x8c>
            printf("\nDONE: %08ld\n",plot.count);
   17c8c:	80 91 93 19 	lds	r24, 0x1993	; 0x801993 <plot>
   17c90:	90 91 94 19 	lds	r25, 0x1994	; 0x801994 <plot+0x1>
   17c94:	a0 91 95 19 	lds	r26, 0x1995	; 0x801995 <plot+0x2>
   17c98:	b0 91 96 19 	lds	r27, 0x1996	; 0x801996 <plot+0x3>
   17c9c:	ed b7       	in	r30, 0x3d	; 61
   17c9e:	fe b7       	in	r31, 0x3e	; 62
   17ca0:	84 83       	std	Z+4, r24	; 0x04
   17ca2:	95 83       	std	Z+5, r25	; 0x05
   17ca4:	a6 83       	std	Z+6, r26	; 0x06
   17ca6:	b7 83       	std	Z+7, r27	; 0x07
   17ca8:	89 e4       	ldi	r24, 0x49	; 73
   17caa:	91 e3       	ldi	r25, 0x31	; 49
   17cac:	a0 e0       	ldi	r26, 0x00	; 0
   17cae:	81 83       	std	Z+1, r24	; 0x01
   17cb0:	92 83       	std	Z+2, r25	; 0x02
   17cb2:	a3 83       	std	Z+3, r26	; 0x03
   17cb4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    }

    if(plot.buf)
   17cb8:	80 91 9e 19 	lds	r24, 0x199E	; 0x80199e <plot+0xb>
   17cbc:	90 91 9f 19 	lds	r25, 0x199F	; 0x80199f <plot+0xc>
   17cc0:	00 97       	sbiw	r24, 0x00	; 0
   17cc2:	11 f0       	breq	.+4      	; 0x17cc8 <printer_close+0x9c>
        safefree(plot.buf);
   17cc4:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safefree>
    printer_init();
   17cc8:	44 df       	rcall	.-376    	; 0x17b52 <printer_init>
}
   17cca:	ad b7       	in	r26, 0x3d	; 61
   17ccc:	be b7       	in	r27, 0x3e	; 62
   17cce:	17 96       	adiw	r26, 0x07	; 7
   17cd0:	0f b6       	in	r0, 0x3f	; 63
   17cd2:	f8 94       	cli
   17cd4:	be bf       	out	0x3e, r27	; 62
   17cd6:	0f be       	out	0x3f, r0	; 63
   17cd8:	ad bf       	out	0x3d, r26	; 61
   17cda:	08 95       	ret

00017cdc <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   17cdc:	ad e5       	ldi	r26, 0x5D	; 93
   17cde:	b0 e0       	ldi	r27, 0x00	; 0
   17ce0:	e4 e7       	ldi	r30, 0x74	; 116
   17ce2:	fe eb       	ldi	r31, 0xBE	; 190
   17ce4:	0c 94 72 e6 	jmp	0x1cce4	; 0x1cce4 <__prologue_saves__+0x18>
   17ce8:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   17cea:	89 2b       	or	r24, r25
   17cec:	09 f0       	breq	.+2      	; 0x17cf0 <printer_open+0x14>
   17cee:	4f c0       	rjmp	.+158    	; 0x17d8e <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   17cf0:	be 01       	movw	r22, r28
   17cf2:	6e 5a       	subi	r22, 0xAE	; 174
   17cf4:	7f 4f       	sbci	r23, 0xFF	; 255
   17cf6:	80 e0       	ldi	r24, 0x00	; 0
   17cf8:	90 e0       	ldi	r25, 0x00	; 0
   17cfa:	0e 94 63 33 	call	0x66c6	; 0x66c6 <clock_gettime>
        seconds = ts.tv_sec;
   17cfe:	66 96       	adiw	r28, 0x16	; 22
   17d00:	8c ad       	ldd	r24, Y+60	; 0x3c
   17d02:	9d ad       	ldd	r25, Y+61	; 0x3d
   17d04:	ae ad       	ldd	r26, Y+62	; 0x3e
   17d06:	bf ad       	ldd	r27, Y+63	; 0x3f
   17d08:	66 97       	sbiw	r28, 0x16	; 22
   17d0a:	6e 96       	adiw	r28, 0x1e	; 30
   17d0c:	8c af       	std	Y+60, r24	; 0x3c
   17d0e:	9d af       	std	Y+61, r25	; 0x3d
   17d10:	ae af       	std	Y+62, r26	; 0x3e
   17d12:	bf af       	std	Y+63, r27	; 0x3f
   17d14:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   17d16:	ce 01       	movw	r24, r28
   17d18:	86 5a       	subi	r24, 0xA6	; 166
   17d1a:	9f 4f       	sbci	r25, 0xFF	; 255
   17d1c:	0e 94 4d 37 	call	0x6e9a	; 0x6e9a <gmtime>
   17d20:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   17d22:	fc 01       	movw	r30, r24
   17d24:	e6 80       	ldd	r14, Z+6	; 0x06
   17d26:	f7 80       	ldd	r15, Z+7	; 0x07
   17d28:	80 85       	ldd	r24, Z+8	; 0x08
   17d2a:	91 85       	ldd	r25, Z+9	; 0x09
   17d2c:	0e 94 29 36 	call	0x6c52	; 0x6c52 <tm_mon_to_ascii>
   17d30:	f8 01       	movw	r30, r16
   17d32:	20 81       	ld	r18, Z
   17d34:	31 81       	ldd	r19, Z+1	; 0x01
   17d36:	ed b7       	in	r30, 0x3d	; 61
   17d38:	fe b7       	in	r31, 0x3e	; 62
   17d3a:	31 8b       	std	Z+17, r19	; 0x11
   17d3c:	20 8b       	std	Z+16, r18	; 0x10
   17d3e:	f8 01       	movw	r30, r16
   17d40:	22 81       	ldd	r18, Z+2	; 0x02
   17d42:	33 81       	ldd	r19, Z+3	; 0x03
   17d44:	ed b7       	in	r30, 0x3d	; 61
   17d46:	fe b7       	in	r31, 0x3e	; 62
   17d48:	37 87       	std	Z+15, r19	; 0x0f
   17d4a:	26 87       	std	Z+14, r18	; 0x0e
   17d4c:	f8 01       	movw	r30, r16
   17d4e:	24 81       	ldd	r18, Z+4	; 0x04
   17d50:	35 81       	ldd	r19, Z+5	; 0x05
   17d52:	ed b7       	in	r30, 0x3d	; 61
   17d54:	fe b7       	in	r31, 0x3e	; 62
   17d56:	35 87       	std	Z+13, r19	; 0x0d
   17d58:	24 87       	std	Z+12, r18	; 0x0c
   17d5a:	f8 01       	movw	r30, r16
   17d5c:	22 85       	ldd	r18, Z+10	; 0x0a
   17d5e:	33 85       	ldd	r19, Z+11	; 0x0b
   17d60:	24 59       	subi	r18, 0x94	; 148
   17d62:	38 4f       	sbci	r19, 0xF8	; 248
   17d64:	ed b7       	in	r30, 0x3d	; 61
   17d66:	fe b7       	in	r31, 0x3e	; 62
   17d68:	33 87       	std	Z+11, r19	; 0x0b
   17d6a:	22 87       	std	Z+10, r18	; 0x0a
   17d6c:	91 87       	std	Z+9, r25	; 0x09
   17d6e:	80 87       	std	Z+8, r24	; 0x08
   17d70:	f7 82       	std	Z+7, r15	; 0x07
   17d72:	e6 82       	std	Z+6, r14	; 0x06
   17d74:	8e e8       	ldi	r24, 0x8E	; 142
   17d76:	91 e3       	ldi	r25, 0x31	; 49
   17d78:	a0 e0       	ldi	r26, 0x00	; 0
   17d7a:	83 83       	std	Z+3, r24	; 0x03
   17d7c:	94 83       	std	Z+4, r25	; 0x04
   17d7e:	a5 83       	std	Z+5, r26	; 0x05
   17d80:	8e 01       	movw	r16, r28
   17d82:	0e 5e       	subi	r16, 0xEE	; 238
   17d84:	1f 4f       	sbci	r17, 0xFF	; 255
   17d86:	12 83       	std	Z+2, r17	; 0x02
   17d88:	01 83       	std	Z+1, r16	; 0x01
   17d8a:	0e 94 91 46 	call	0x8d22	; 0x8d22 <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17d8e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17d92:	85 ff       	sbrs	r24, 5
   17d94:	0c c0       	rjmp	.+24     	; 0x17dae <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   17d96:	ed b7       	in	r30, 0x3d	; 61
   17d98:	fe b7       	in	r31, 0x3e	; 62
   17d9a:	15 83       	std	Z+5, r17	; 0x05
   17d9c:	04 83       	std	Z+4, r16	; 0x04
   17d9e:	88 e7       	ldi	r24, 0x78	; 120
   17da0:	91 e3       	ldi	r25, 0x31	; 49
   17da2:	a0 e0       	ldi	r26, 0x00	; 0
   17da4:	81 83       	std	Z+1, r24	; 0x01
   17da6:	92 83       	std	Z+2, r25	; 0x02
   17da8:	a3 83       	std	Z+3, r26	; 0x03
   17daa:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

    plot.fp = fopen(ptr,"wb");
   17dae:	6a ef       	ldi	r22, 0xFA	; 250
   17db0:	78 e0       	ldi	r23, 0x08	; 8
   17db2:	c8 01       	movw	r24, r16
   17db4:	0e 94 d4 7d 	call	0xfba8	; 0xfba8 <fopen>
   17db8:	90 93 9d 19 	sts	0x199D, r25	; 0x80199d <plot+0xa>
   17dbc:	80 93 9c 19 	sts	0x199C, r24	; 0x80199c <plot+0x9>
    if(plot.fp == NULL)
   17dc0:	89 2b       	or	r24, r25
   17dc2:	b9 f4       	brne	.+46     	; 0x17df2 <printer_open+0x116>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17dc4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17dc8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17dcc:	81 72       	andi	r24, 0x21	; 33
   17dce:	99 27       	eor	r25, r25
   17dd0:	89 2b       	or	r24, r25
   17dd2:	11 f1       	breq	.+68     	; 0x17e18 <printer_open+0x13c>
        {
            perror("open failed");
   17dd4:	88 e8       	ldi	r24, 0x88	; 136
   17dd6:	9d e0       	ldi	r25, 0x0D	; 13
   17dd8:	0e 94 05 78 	call	0xf00a	; 0xf00a <perror>
            printf("exiting...\n");
   17ddc:	8c e6       	ldi	r24, 0x6C	; 108
   17dde:	91 e3       	ldi	r25, 0x31	; 49
   17de0:	a0 e0       	ldi	r26, 0x00	; 0
   17de2:	ed b7       	in	r30, 0x3d	; 61
   17de4:	fe b7       	in	r31, 0x3e	; 62
   17de6:	81 83       	std	Z+1, r24	; 0x01
   17de8:	92 83       	std	Z+2, r25	; 0x02
   17dea:	a3 83       	std	Z+3, r26	; 0x03
   17dec:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   17df0:	13 c0       	rjmp	.+38     	; 0x17e18 <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   17df2:	61 e0       	ldi	r22, 0x01	; 1
   17df4:	70 e0       	ldi	r23, 0x00	; 0
   17df6:	81 e0       	ldi	r24, 0x01	; 1
   17df8:	92 e0       	ldi	r25, 0x02	; 2
   17dfa:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <safecalloc>
   17dfe:	90 93 9f 19 	sts	0x199F, r25	; 0x80199f <plot+0xc>
   17e02:	80 93 9e 19 	sts	0x199E, r24	; 0x80199e <plot+0xb>
    if(plot.buf == NULL)
   17e06:	89 2b       	or	r24, r25
   17e08:	09 f4       	brne	.+2      	; 0x17e0c <printer_open+0x130>
        printer_close();
   17e0a:	10 df       	rcall	.-480    	; 0x17c2c <printer_close>
    plot.size = 512;
   17e0c:	80 e0       	ldi	r24, 0x00	; 0
   17e0e:	92 e0       	ldi	r25, 0x02	; 2
   17e10:	90 93 9a 19 	sts	0x199A, r25	; 0x80199a <plot+0x7>
   17e14:	80 93 99 19 	sts	0x1999, r24	; 0x801999 <plot+0x6>
}
   17e18:	c3 5a       	subi	r28, 0xA3	; 163
   17e1a:	df 4f       	sbci	r29, 0xFF	; 255
   17e1c:	e6 e0       	ldi	r30, 0x06	; 6
   17e1e:	0c 94 8e e6 	jmp	0x1cd1c	; 0x1cd1c <__epilogue_restores__+0x18>

00017e22 <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   17e22:	cf 93       	push	r28
   17e24:	df 93       	push	r29
   17e26:	ad b7       	in	r26, 0x3d	; 61
   17e28:	be b7       	in	r27, 0x3e	; 62
   17e2a:	17 97       	sbiw	r26, 0x07	; 7
   17e2c:	0f b6       	in	r0, 0x3f	; 63
   17e2e:	f8 94       	cli
   17e30:	be bf       	out	0x3e, r27	; 62
   17e32:	0f be       	out	0x3f, r0	; 63
   17e34:	ad bf       	out	0x3d, r26	; 61
   17e36:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17e38:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17e3c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17e40:	81 72       	andi	r24, 0x21	; 33
   17e42:	99 27       	eor	r25, r25
   17e44:	89 2b       	or	r24, r25
   17e46:	c1 f0       	breq	.+48     	; 0x17e78 <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   17e48:	80 91 93 19 	lds	r24, 0x1993	; 0x801993 <plot>
   17e4c:	30 91 94 19 	lds	r19, 0x1994	; 0x801994 <plot+0x1>
   17e50:	20 91 95 19 	lds	r18, 0x1995	; 0x801995 <plot+0x2>
   17e54:	90 91 96 19 	lds	r25, 0x1996	; 0x801996 <plot+0x3>
   17e58:	81 11       	cpse	r24, r1
   17e5a:	0e c0       	rjmp	.+28     	; 0x17e78 <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   17e5c:	ed b7       	in	r30, 0x3d	; 61
   17e5e:	fe b7       	in	r31, 0x3e	; 62
   17e60:	84 83       	std	Z+4, r24	; 0x04
   17e62:	35 83       	std	Z+5, r19	; 0x05
   17e64:	26 83       	std	Z+6, r18	; 0x06
   17e66:	97 83       	std	Z+7, r25	; 0x07
   17e68:	81 e2       	ldi	r24, 0x21	; 33
   17e6a:	91 e3       	ldi	r25, 0x31	; 49
   17e6c:	a0 e0       	ldi	r26, 0x00	; 0
   17e6e:	81 83       	std	Z+1, r24	; 0x01
   17e70:	92 83       	std	Z+2, r25	; 0x02
   17e72:	a3 83       	std	Z+3, r26	; 0x03
   17e74:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   17e78:	ce 01       	movw	r24, r28
   17e7a:	88 27       	eor	r24, r24
   17e7c:	97 7f       	andi	r25, 0xF7	; 247
   17e7e:	89 2b       	or	r24, r25
   17e80:	41 f0       	breq	.+16     	; 0x17e92 <printer_buffer+0x70>
    {
        if( receive_plot_flush() )
   17e82:	75 de       	rcall	.-790    	; 0x17b6e <receive_plot_flush>
   17e84:	89 2b       	or	r24, r25
   17e86:	09 f4       	brne	.+2      	; 0x17e8a <printer_buffer+0x68>
   17e88:	3f c0       	rjmp	.+126    	; 0x17f08 <printer_buffer+0xe6>
            plot.error = 1;
   17e8a:	81 e0       	ldi	r24, 0x01	; 1
   17e8c:	80 93 9b 19 	sts	0x199B, r24	; 0x80199b <plot+0x8>
   17e90:	3b c0       	rjmp	.+118    	; 0x17f08 <printer_buffer+0xe6>
//plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   17e92:	20 91 9e 19 	lds	r18, 0x199E	; 0x80199e <plot+0xb>
   17e96:	30 91 9f 19 	lds	r19, 0x199F	; 0x80199f <plot+0xc>
   17e9a:	80 91 97 19 	lds	r24, 0x1997	; 0x801997 <plot+0x4>
   17e9e:	90 91 98 19 	lds	r25, 0x1998	; 0x801998 <plot+0x5>
   17ea2:	ac 01       	movw	r20, r24
   17ea4:	4f 5f       	subi	r20, 0xFF	; 255
   17ea6:	5f 4f       	sbci	r21, 0xFF	; 255
   17ea8:	50 93 98 19 	sts	0x1998, r21	; 0x801998 <plot+0x5>
   17eac:	40 93 97 19 	sts	0x1997, r20	; 0x801997 <plot+0x4>
   17eb0:	f9 01       	movw	r30, r18
   17eb2:	e8 0f       	add	r30, r24
   17eb4:	f9 1f       	adc	r31, r25
   17eb6:	c0 83       	st	Z, r28
        plot.count++;
   17eb8:	80 91 93 19 	lds	r24, 0x1993	; 0x801993 <plot>
   17ebc:	90 91 94 19 	lds	r25, 0x1994	; 0x801994 <plot+0x1>
   17ec0:	a0 91 95 19 	lds	r26, 0x1995	; 0x801995 <plot+0x2>
   17ec4:	b0 91 96 19 	lds	r27, 0x1996	; 0x801996 <plot+0x3>
   17ec8:	01 96       	adiw	r24, 0x01	; 1
   17eca:	a1 1d       	adc	r26, r1
   17ecc:	b1 1d       	adc	r27, r1
   17ece:	80 93 93 19 	sts	0x1993, r24	; 0x801993 <plot>
   17ed2:	90 93 94 19 	sts	0x1994, r25	; 0x801994 <plot+0x1>
   17ed6:	a0 93 95 19 	sts	0x1995, r26	; 0x801995 <plot+0x2>
   17eda:	b0 93 96 19 	sts	0x1996, r27	; 0x801996 <plot+0x3>

        if(plot.ind >= plot.size)
   17ede:	20 91 97 19 	lds	r18, 0x1997	; 0x801997 <plot+0x4>
   17ee2:	30 91 98 19 	lds	r19, 0x1998	; 0x801998 <plot+0x5>
   17ee6:	80 91 99 19 	lds	r24, 0x1999	; 0x801999 <plot+0x6>
   17eea:	90 91 9a 19 	lds	r25, 0x199A	; 0x80199a <plot+0x7>
   17eee:	28 17       	cp	r18, r24
   17ef0:	39 07       	cpc	r19, r25
        {
            if( receive_plot_flush() < 0 )
   17ef2:	54 f0       	brlt	.+20     	; 0x17f08 <printer_buffer+0xe6>
   17ef4:	3c de       	rcall	.-904    	; 0x17b6e <receive_plot_flush>
   17ef6:	97 ff       	sbrs	r25, 7
   17ef8:	03 c0       	rjmp	.+6      	; 0x17f00 <printer_buffer+0xde>
                plot.error = 1;
   17efa:	81 e0       	ldi	r24, 0x01	; 1
   17efc:	80 93 9b 19 	sts	0x199B, r24	; 0x80199b <plot+0x8>
            plot.ind  = 0;
   17f00:	10 92 98 19 	sts	0x1998, r1	; 0x801998 <plot+0x5>
   17f04:	10 92 97 19 	sts	0x1997, r1	; 0x801997 <plot+0x4>
        }
    }
}
   17f08:	cd b7       	in	r28, 0x3d	; 61
   17f0a:	de b7       	in	r29, 0x3e	; 62
   17f0c:	27 96       	adiw	r28, 0x07	; 7
   17f0e:	e2 e0       	ldi	r30, 0x02	; 2
   17f10:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00017f14 <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   17f14:	cf 93       	push	r28
   17f16:	00 d0       	rcall	.+0      	; 0x17f18 <PRINTER_COMMANDS+0x4>
   17f18:	00 d0       	rcall	.+0      	; 0x17f1a <PRINTER_COMMANDS+0x6>
   17f1a:	1f 92       	push	r1
   17f1c:	c8 2f       	mov	r28, r24

// We could, for example, use secondaries to set file names, etc
// We don not use them yet
    if(PRINTER_is_MLA(listening))
   17f1e:	80 91 e6 1e 	lds	r24, 0x1EE6	; 0x801ee6 <listening>
   17f22:	90 e0       	ldi	r25, 0x00	; 0
   17f24:	0e 94 72 8c 	call	0x118e4	; 0x118e4 <PRINTER_is_MLA>
   17f28:	89 2b       	or	r24, r25
   17f2a:	69 f0       	breq	.+26     	; 0x17f46 <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17f2c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17f30:	85 ff       	sbrs	r24, 5
   17f32:	22 c0       	rjmp	.+68     	; 0x17f78 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   17f34:	8c 2f       	mov	r24, r28
   17f36:	90 e0       	ldi	r25, 0x00	; 0
   17f38:	ed b7       	in	r30, 0x3d	; 61
   17f3a:	fe b7       	in	r31, 0x3e	; 62
   17f3c:	95 83       	std	Z+5, r25	; 0x05
   17f3e:	84 83       	std	Z+4, r24	; 0x04
   17f40:	85 e0       	ldi	r24, 0x05	; 5
   17f42:	91 e3       	ldi	r25, 0x31	; 49
   17f44:	13 c0       	rjmp	.+38     	; 0x17f6c <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   17f46:	80 91 e4 1e 	lds	r24, 0x1EE4	; 0x801ee4 <talking>
   17f4a:	90 e0       	ldi	r25, 0x00	; 0
   17f4c:	0e 94 84 8c 	call	0x11908	; 0x11908 <PRINTER_is_MTA>
   17f50:	89 2b       	or	r24, r25
   17f52:	91 f0       	breq	.+36     	; 0x17f78 <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17f54:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17f58:	85 ff       	sbrs	r24, 5
   17f5a:	0e c0       	rjmp	.+28     	; 0x17f78 <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   17f5c:	8c 2f       	mov	r24, r28
   17f5e:	90 e0       	ldi	r25, 0x00	; 0
   17f60:	ed b7       	in	r30, 0x3d	; 61
   17f62:	fe b7       	in	r31, 0x3e	; 62
   17f64:	95 83       	std	Z+5, r25	; 0x05
   17f66:	84 83       	std	Z+4, r24	; 0x04
   17f68:	8b ee       	ldi	r24, 0xEB	; 235
   17f6a:	90 e3       	ldi	r25, 0x30	; 48
   17f6c:	a0 e0       	ldi	r26, 0x00	; 0
   17f6e:	81 83       	std	Z+1, r24	; 0x01
   17f70:	92 83       	std	Z+2, r25	; 0x02
   17f72:	a3 83       	std	Z+3, r26	; 0x03
   17f74:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
#endif
        return(0);
    }
    return(0);
}
   17f78:	80 e0       	ldi	r24, 0x00	; 0
   17f7a:	90 e0       	ldi	r25, 0x00	; 0
   17f7c:	0f 90       	pop	r0
   17f7e:	0f 90       	pop	r0
   17f80:	0f 90       	pop	r0
   17f82:	0f 90       	pop	r0
   17f84:	0f 90       	pop	r0
   17f86:	cf 91       	pop	r28
   17f88:	08 95       	ret

00017f8a <V2B_MSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_MSB(uint8_t *B, int index, int size, uint32_t val)
{
   17f8a:	0f 93       	push	r16
   17f8c:	1f 93       	push	r17
   17f8e:	da 01       	movw	r26, r20
   17f90:	11 97       	sbiw	r26, 0x01	; 1
    int i;
    for(i=size-1;i>=0;--i)
   17f92:	b7 fd       	sbrc	r27, 7
   17f94:	0b c0       	rjmp	.+22     	; 0x17fac <V2B_MSB+0x22>
    {
        B[index+i] = val & 0xff;
   17f96:	fd 01       	movw	r30, r26
   17f98:	e6 0f       	add	r30, r22
   17f9a:	f7 1f       	adc	r31, r23
   17f9c:	e8 0f       	add	r30, r24
   17f9e:	f9 1f       	adc	r31, r25
   17fa0:	00 83       	st	Z, r16
        val >>= 8;
   17fa2:	01 2f       	mov	r16, r17
   17fa4:	12 2f       	mov	r17, r18
   17fa6:	23 2f       	mov	r18, r19
   17fa8:	33 27       	eor	r19, r19
   17faa:	f2 cf       	rjmp	.-28     	; 0x17f90 <V2B_MSB+0x6>
    }
}
   17fac:	1f 91       	pop	r17
   17fae:	0f 91       	pop	r16
   17fb0:	08 95       	ret

00017fb2 <V2B_LSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_LSB(uint8_t *B, int index, int size, uint32_t val)
{
   17fb2:	0f 93       	push	r16
   17fb4:	1f 93       	push	r17
   17fb6:	fc 01       	movw	r30, r24
   17fb8:	e6 0f       	add	r30, r22
   17fba:	f7 1f       	adc	r31, r23
   17fbc:	bf 01       	movw	r22, r30
    int i;
    for(i=0;i<size;++i)
   17fbe:	cf 01       	movw	r24, r30
   17fc0:	86 1b       	sub	r24, r22
   17fc2:	97 0b       	sbc	r25, r23
   17fc4:	84 17       	cp	r24, r20
   17fc6:	95 07       	cpc	r25, r21
   17fc8:	34 f4       	brge	.+12     	; 0x17fd6 <V2B_LSB+0x24>
    {
        B[index+i] = val & 0xff;
   17fca:	01 93       	st	Z+, r16
        val >>= 8;
   17fcc:	01 2f       	mov	r16, r17
   17fce:	12 2f       	mov	r17, r18
   17fd0:	23 2f       	mov	r18, r19
   17fd2:	33 27       	eor	r19, r19
   17fd4:	f4 cf       	rjmp	.-24     	; 0x17fbe <V2B_LSB+0xc>
    }
}
   17fd6:	1f 91       	pop	r17
   17fd8:	0f 91       	pop	r16
   17fda:	08 95       	ret

00017fdc <B2V_MSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_MSB(uint8_t *B, int index, int size)
{
   17fdc:	cf 92       	push	r12
   17fde:	df 92       	push	r13
   17fe0:	ef 92       	push	r14
   17fe2:	ff 92       	push	r15
   17fe4:	fc 01       	movw	r30, r24
   17fe6:	e6 0f       	add	r30, r22
   17fe8:	f7 1f       	adc	r31, r23
    int i;
    uint32_t val = 0;
   17fea:	60 e0       	ldi	r22, 0x00	; 0
   17fec:	70 e0       	ldi	r23, 0x00	; 0
   17fee:	cb 01       	movw	r24, r22
   17ff0:	df 01       	movw	r26, r30

    for(i=0;i<size;++i)
   17ff2:	9f 01       	movw	r18, r30
   17ff4:	2a 1b       	sub	r18, r26
   17ff6:	3b 0b       	sbc	r19, r27
   17ff8:	24 17       	cp	r18, r20
   17ffa:	35 07       	cpc	r19, r21
   17ffc:	4c f4       	brge	.+18     	; 0x18010 <B2V_MSB+0x34>
    {
        val <<= 8;
   17ffe:	cc 24       	eor	r12, r12
   18000:	d6 2e       	mov	r13, r22
   18002:	e7 2e       	mov	r14, r23
   18004:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   18006:	21 91       	ld	r18, Z+
   18008:	c7 01       	movw	r24, r14
   1800a:	b6 01       	movw	r22, r12
   1800c:	62 2b       	or	r22, r18
   1800e:	f1 cf       	rjmp	.-30     	; 0x17ff2 <B2V_MSB+0x16>
    }
    return(val);
}
   18010:	ff 90       	pop	r15
   18012:	ef 90       	pop	r14
   18014:	df 90       	pop	r13
   18016:	cf 90       	pop	r12
   18018:	08 95       	ret

0001801a <B2V_LSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_LSB(uint8_t *B, int index, int size)
{
   1801a:	cf 92       	push	r12
   1801c:	df 92       	push	r13
   1801e:	ef 92       	push	r14
   18020:	ff 92       	push	r15
   18022:	9c 01       	movw	r18, r24
   18024:	db 01       	movw	r26, r22
    int i;
    uint32_t val = 0;
   18026:	60 e0       	ldi	r22, 0x00	; 0
   18028:	70 e0       	ldi	r23, 0x00	; 0
   1802a:	cb 01       	movw	r24, r22
   1802c:	41 50       	subi	r20, 0x01	; 1
   1802e:	51 09       	sbc	r21, r1

    for(i=size-1;i>=0;--i)
   18030:	57 fd       	sbrc	r21, 7
   18032:	0e c0       	rjmp	.+28     	; 0x18050 <B2V_LSB+0x36>
    {
        val <<= 8;
   18034:	cc 24       	eor	r12, r12
   18036:	d6 2e       	mov	r13, r22
   18038:	e7 2e       	mov	r14, r23
   1803a:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   1803c:	fa 01       	movw	r30, r20
   1803e:	ea 0f       	add	r30, r26
   18040:	fb 1f       	adc	r31, r27
   18042:	e2 0f       	add	r30, r18
   18044:	f3 1f       	adc	r31, r19
   18046:	e0 81       	ld	r30, Z
   18048:	c7 01       	movw	r24, r14
   1804a:	b6 01       	movw	r22, r12
   1804c:	6e 2b       	or	r22, r30
   1804e:	ee cf       	rjmp	.-36     	; 0x1802c <B2V_LSB+0x12>
    }
    return(val);
}
   18050:	ff 90       	pop	r15
   18052:	ef 90       	pop	r14
   18054:	df 90       	pop	r13
   18056:	cf 90       	pop	r12
   18058:	08 95       	ret

0001805a <lif_help>:
            return( (lifdir_t *) &LIF->DIR );

// Skip purged records
    }
    return( NULL );
}
   1805a:	cf 93       	push	r28
   1805c:	df 93       	push	r29
   1805e:	00 d0       	rcall	.+0      	; 0x18060 <lif_help+0x6>
   18060:	1f 92       	push	r1
   18062:	ec 01       	movw	r28, r24
   18064:	86 ee       	ldi	r24, 0xE6	; 230
   18066:	95 e4       	ldi	r25, 0x45	; 69
   18068:	a0 e0       	ldi	r26, 0x00	; 0
   1806a:	ed b7       	in	r30, 0x3d	; 61
   1806c:	fe b7       	in	r31, 0x3e	; 62
   1806e:	81 83       	std	Z+1, r24	; 0x01
   18070:	92 83       	std	Z+2, r25	; 0x02
   18072:	a3 83       	std	Z+3, r26	; 0x03
   18074:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18078:	cd 2b       	or	r28, r29
   1807a:	51 f0       	breq	.+20     	; 0x18090 <lif_help+0x36>
   1807c:	82 e2       	ldi	r24, 0x22	; 34
   1807e:	94 e4       	ldi	r25, 0x44	; 68
   18080:	a0 e0       	ldi	r26, 0x00	; 0
   18082:	ed b7       	in	r30, 0x3d	; 61
   18084:	fe b7       	in	r31, 0x3e	; 62
   18086:	81 83       	std	Z+1, r24	; 0x01
   18088:	92 83       	std	Z+2, r25	; 0x02
   1808a:	a3 83       	std	Z+3, r26	; 0x03
   1808c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18090:	cd b7       	in	r28, 0x3d	; 61
   18092:	de b7       	in	r29, 0x3e	; 62
   18094:	23 96       	adiw	r28, 0x03	; 3
   18096:	e2 e0       	ldi	r30, 0x02	; 2
   18098:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

0001809c <lif_calloc>:
   1809c:	cf 92       	push	r12
   1809e:	df 92       	push	r13
   180a0:	ef 92       	push	r14
   180a2:	ff 92       	push	r15
   180a4:	cf 93       	push	r28
   180a6:	df 93       	push	r29
   180a8:	ad b7       	in	r26, 0x3d	; 61
   180aa:	be b7       	in	r27, 0x3e	; 62
   180ac:	17 97       	sbiw	r26, 0x07	; 7
   180ae:	0f b6       	in	r0, 0x3f	; 63
   180b0:	f8 94       	cli
   180b2:	be bf       	out	0x3e, r27	; 62
   180b4:	0f be       	out	0x3f, r0	; 63
   180b6:	ad bf       	out	0x3d, r26	; 61
   180b8:	6b 01       	movw	r12, r22
   180ba:	7c 01       	movw	r14, r24
   180bc:	61 e0       	ldi	r22, 0x01	; 1
   180be:	70 e0       	ldi	r23, 0x00	; 0
   180c0:	c6 01       	movw	r24, r12
   180c2:	0e 94 51 27 	call	0x4ea2	; 0x4ea2 <safecalloc>
   180c6:	ec 01       	movw	r28, r24
   180c8:	89 2b       	or	r24, r25
   180ca:	71 f4       	brne	.+28     	; 0x180e8 <lif_calloc+0x4c>
   180cc:	ed b7       	in	r30, 0x3d	; 61
   180ce:	fe b7       	in	r31, 0x3e	; 62
   180d0:	c4 82       	std	Z+4, r12	; 0x04
   180d2:	d5 82       	std	Z+5, r13	; 0x05
   180d4:	e6 82       	std	Z+6, r14	; 0x06
   180d6:	f7 82       	std	Z+7, r15	; 0x07
   180d8:	8b eb       	ldi	r24, 0xBB	; 187
   180da:	93 e4       	ldi	r25, 0x43	; 67
   180dc:	a0 e0       	ldi	r26, 0x00	; 0
   180de:	81 83       	std	Z+1, r24	; 0x01
   180e0:	92 83       	std	Z+2, r25	; 0x02
   180e2:	a3 83       	std	Z+3, r26	; 0x03
   180e4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   180e8:	ce 01       	movw	r24, r28
   180ea:	ad b7       	in	r26, 0x3d	; 61
   180ec:	be b7       	in	r27, 0x3e	; 62
   180ee:	17 96       	adiw	r26, 0x07	; 7
   180f0:	0f b6       	in	r0, 0x3f	; 63
   180f2:	f8 94       	cli
   180f4:	be bf       	out	0x3e, r27	; 62
   180f6:	0f be       	out	0x3f, r0	; 63
   180f8:	ad bf       	out	0x3d, r26	; 61
   180fa:	df 91       	pop	r29
   180fc:	cf 91       	pop	r28
   180fe:	ff 90       	pop	r15
   18100:	ef 90       	pop	r14
   18102:	df 90       	pop	r13
   18104:	cf 90       	pop	r12
   18106:	08 95       	ret

00018108 <lif_free>:
   18108:	00 d0       	rcall	.+0      	; 0x1810a <lif_free+0x2>
   1810a:	1f 92       	push	r1
   1810c:	00 97       	sbiw	r24, 0x00	; 0
   1810e:	59 f4       	brne	.+22     	; 0x18126 <lif_free+0x1e>
   18110:	83 ea       	ldi	r24, 0xA3	; 163
   18112:	93 e4       	ldi	r25, 0x43	; 67
   18114:	a0 e0       	ldi	r26, 0x00	; 0
   18116:	ed b7       	in	r30, 0x3d	; 61
   18118:	fe b7       	in	r31, 0x3e	; 62
   1811a:	81 83       	std	Z+1, r24	; 0x01
   1811c:	92 83       	std	Z+2, r25	; 0x02
   1811e:	a3 83       	std	Z+3, r26	; 0x03
   18120:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18124:	02 c0       	rjmp	.+4      	; 0x1812a <lif_free+0x22>
   18126:	0e 94 9d 27 	call	0x4f3a	; 0x4f3a <safefree>
   1812a:	0f 90       	pop	r0
   1812c:	0f 90       	pop	r0
   1812e:	0f 90       	pop	r0
   18130:	08 95       	ret

00018132 <lif_stralloc>:
   18132:	0f 93       	push	r16
   18134:	1f 93       	push	r17
   18136:	cf 93       	push	r28
   18138:	df 93       	push	r29
   1813a:	ec 01       	movw	r28, r24
   1813c:	fc 01       	movw	r30, r24
   1813e:	01 90       	ld	r0, Z+
   18140:	00 20       	and	r0, r0
   18142:	e9 f7       	brne	.-6      	; 0x1813e <lif_stralloc+0xc>
   18144:	bf 01       	movw	r22, r30
   18146:	68 1b       	sub	r22, r24
   18148:	79 0b       	sbc	r23, r25
   1814a:	6d 5f       	subi	r22, 0xFD	; 253
   1814c:	7f 4f       	sbci	r23, 0xFF	; 255
   1814e:	07 2e       	mov	r0, r23
   18150:	00 0c       	add	r0, r0
   18152:	88 0b       	sbc	r24, r24
   18154:	99 0b       	sbc	r25, r25
   18156:	a2 df       	rcall	.-188    	; 0x1809c <lif_calloc>
   18158:	8c 01       	movw	r16, r24
   1815a:	00 97       	sbiw	r24, 0x00	; 0
   1815c:	19 f0       	breq	.+6      	; 0x18164 <lif_stralloc+0x32>
   1815e:	be 01       	movw	r22, r28
   18160:	0e 94 e6 30 	call	0x61cc	; 0x61cc <strcpy>
   18164:	c8 01       	movw	r24, r16
   18166:	df 91       	pop	r29
   18168:	cf 91       	pop	r28
   1816a:	1f 91       	pop	r17
   1816c:	0f 91       	pop	r16
   1816e:	08 95       	ret

00018170 <lif_open>:
   18170:	ef 92       	push	r14
   18172:	ff 92       	push	r15
   18174:	0f 93       	push	r16
   18176:	1f 93       	push	r17
   18178:	cf 93       	push	r28
   1817a:	df 93       	push	r29
   1817c:	ad b7       	in	r26, 0x3d	; 61
   1817e:	be b7       	in	r27, 0x3e	; 62
   18180:	17 97       	sbiw	r26, 0x07	; 7
   18182:	0f b6       	in	r0, 0x3f	; 63
   18184:	f8 94       	cli
   18186:	be bf       	out	0x3e, r27	; 62
   18188:	0f be       	out	0x3f, r0	; 63
   1818a:	ad bf       	out	0x3d, r26	; 61
   1818c:	8c 01       	movw	r16, r24
   1818e:	7b 01       	movw	r14, r22
   18190:	0e 94 d4 7d 	call	0xfba8	; 0xfba8 <fopen>
   18194:	ec 01       	movw	r28, r24
   18196:	89 2b       	or	r24, r25
   18198:	71 f4       	brne	.+28     	; 0x181b6 <lif_open+0x46>
   1819a:	ed b7       	in	r30, 0x3d	; 61
   1819c:	fe b7       	in	r31, 0x3e	; 62
   1819e:	f7 82       	std	Z+7, r15	; 0x07
   181a0:	e6 82       	std	Z+6, r14	; 0x06
   181a2:	15 83       	std	Z+5, r17	; 0x05
   181a4:	04 83       	std	Z+4, r16	; 0x04
   181a6:	8e e7       	ldi	r24, 0x7E	; 126
   181a8:	93 e4       	ldi	r25, 0x43	; 67
   181aa:	a0 e0       	ldi	r26, 0x00	; 0
   181ac:	81 83       	std	Z+1, r24	; 0x01
   181ae:	92 83       	std	Z+2, r25	; 0x02
   181b0:	a3 83       	std	Z+3, r26	; 0x03
   181b2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   181b6:	ce 01       	movw	r24, r28
   181b8:	cd b7       	in	r28, 0x3d	; 61
   181ba:	de b7       	in	r29, 0x3e	; 62
   181bc:	27 96       	adiw	r28, 0x07	; 7
   181be:	e6 e0       	ldi	r30, 0x06	; 6
   181c0:	0c 94 8e e6 	jmp	0x1cd1c	; 0x1cd1c <__epilogue_restores__+0x18>

000181c4 <lif_stat>:
   181c4:	0f 93       	push	r16
   181c6:	1f 93       	push	r17
   181c8:	cf 93       	push	r28
   181ca:	df 93       	push	r29
   181cc:	00 d0       	rcall	.+0      	; 0x181ce <lif_stat+0xa>
   181ce:	00 d0       	rcall	.+0      	; 0x181d0 <lif_stat+0xc>
   181d0:	1f 92       	push	r1
   181d2:	8c 01       	movw	r16, r24
   181d4:	d6 2f       	mov	r29, r22
   181d6:	c7 2f       	mov	r28, r23
   181d8:	0e 94 d9 78 	call	0xf1b2	; 0xf1b2 <stat>
   181dc:	97 ff       	sbrs	r25, 7
   181de:	0f c0       	rjmp	.+30     	; 0x181fe <lif_stat+0x3a>
   181e0:	ed b7       	in	r30, 0x3d	; 61
   181e2:	fe b7       	in	r31, 0x3e	; 62
   181e4:	15 83       	std	Z+5, r17	; 0x05
   181e6:	04 83       	std	Z+4, r16	; 0x04
   181e8:	85 e6       	ldi	r24, 0x65	; 101
   181ea:	93 e4       	ldi	r25, 0x43	; 67
   181ec:	a0 e0       	ldi	r26, 0x00	; 0
   181ee:	81 83       	std	Z+1, r24	; 0x01
   181f0:	92 83       	std	Z+2, r25	; 0x02
   181f2:	a3 83       	std	Z+3, r26	; 0x03
   181f4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   181f8:	80 e0       	ldi	r24, 0x00	; 0
   181fa:	90 e0       	ldi	r25, 0x00	; 0
   181fc:	02 c0       	rjmp	.+4      	; 0x18202 <lif_stat+0x3e>
   181fe:	8d 2f       	mov	r24, r29
   18200:	9c 2f       	mov	r25, r28
   18202:	cd b7       	in	r28, 0x3d	; 61
   18204:	de b7       	in	r29, 0x3e	; 62
   18206:	25 96       	adiw	r28, 0x05	; 5
   18208:	e4 e0       	ldi	r30, 0x04	; 4
   1820a:	0c 94 90 e6 	jmp	0x1cd20	; 0x1cd20 <__epilogue_restores__+0x1c>

0001820e <lif_seek_msg>:
   1820e:	a9 e0       	ldi	r26, 0x09	; 9
   18210:	b0 e0       	ldi	r27, 0x00	; 0
   18212:	ed e0       	ldi	r30, 0x0D	; 13
   18214:	f1 ec       	ldi	r31, 0xC1	; 193
   18216:	0c 94 70 e6 	jmp	0x1cce0	; 0x1cce0 <__prologue_saves__+0x14>
   1821a:	ec 01       	movw	r28, r24
   1821c:	6a 01       	movw	r12, r20
   1821e:	7b 01       	movw	r14, r22
   18220:	89 01       	movw	r16, r18
   18222:	0e 94 13 7a 	call	0xf426	; 0xf426 <ftell>
   18226:	6c 15       	cp	r22, r12
   18228:	7d 05       	cpc	r23, r13
   1822a:	8e 05       	cpc	r24, r14
   1822c:	9f 05       	cpc	r25, r15
   1822e:	19 f4       	brne	.+6      	; 0x18236 <lif_seek_msg+0x28>
   18230:	81 e0       	ldi	r24, 0x01	; 1
   18232:	90 e0       	ldi	r25, 0x00	; 0
   18234:	1b c0       	rjmp	.+54     	; 0x1826c <lif_seek_msg+0x5e>
   18236:	20 e0       	ldi	r18, 0x00	; 0
   18238:	30 e0       	ldi	r19, 0x00	; 0
   1823a:	b7 01       	movw	r22, r14
   1823c:	a6 01       	movw	r20, r12
   1823e:	ce 01       	movw	r24, r28
   18240:	0e 94 96 7a 	call	0xf52c	; 0xf52c <fseek>
   18244:	97 ff       	sbrs	r25, 7
   18246:	f4 cf       	rjmp	.-24     	; 0x18230 <lif_seek_msg+0x22>
   18248:	ed b7       	in	r30, 0x3d	; 61
   1824a:	fe b7       	in	r31, 0x3e	; 62
   1824c:	c6 82       	std	Z+6, r12	; 0x06
   1824e:	d7 82       	std	Z+7, r13	; 0x07
   18250:	e0 86       	std	Z+8, r14	; 0x08
   18252:	f1 86       	std	Z+9, r15	; 0x09
   18254:	15 83       	std	Z+5, r17	; 0x05
   18256:	04 83       	std	Z+4, r16	; 0x04
   18258:	84 e4       	ldi	r24, 0x44	; 68
   1825a:	93 e4       	ldi	r25, 0x43	; 67
   1825c:	a0 e0       	ldi	r26, 0x00	; 0
   1825e:	81 83       	std	Z+1, r24	; 0x01
   18260:	92 83       	std	Z+2, r25	; 0x02
   18262:	a3 83       	std	Z+3, r26	; 0x03
   18264:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18268:	80 e0       	ldi	r24, 0x00	; 0
   1826a:	90 e0       	ldi	r25, 0x00	; 0
   1826c:	cd b7       	in	r28, 0x3d	; 61
   1826e:	de b7       	in	r29, 0x3e	; 62
   18270:	29 96       	adiw	r28, 0x09	; 9
   18272:	e8 e0       	ldi	r30, 0x08	; 8
   18274:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__epilogue_restores__+0x14>

00018278 <lif_read>:
   18278:	af e0       	ldi	r26, 0x0F	; 15
   1827a:	b0 e0       	ldi	r27, 0x00	; 0
   1827c:	e2 e4       	ldi	r30, 0x42	; 66
   1827e:	f1 ec       	ldi	r31, 0xC1	; 193
   18280:	0c 94 6c e6 	jmp	0x1ccd8	; 0x1ccd8 <__prologue_saves__+0xc>
   18284:	ec 01       	movw	r28, r24
   18286:	7b 01       	movw	r14, r22
   18288:	49 01       	movw	r8, r18
   1828a:	5a 01       	movw	r10, r20
   1828c:	28 81       	ld	r18, Y
   1828e:	39 81       	ldd	r19, Y+1	; 0x01
   18290:	b5 01       	movw	r22, r10
   18292:	a4 01       	movw	r20, r8
   18294:	8a 81       	ldd	r24, Y+2	; 0x02
   18296:	9b 81       	ldd	r25, Y+3	; 0x03
   18298:	ba df       	rcall	.-140    	; 0x1820e <lif_seek_msg>
   1829a:	89 2b       	or	r24, r25
   1829c:	a1 f1       	breq	.+104    	; 0x18306 <lif_read+0x8e>
   1829e:	2a 81       	ldd	r18, Y+2	; 0x02
   182a0:	3b 81       	ldd	r19, Y+3	; 0x03
   182a2:	a8 01       	movw	r20, r16
   182a4:	61 e0       	ldi	r22, 0x01	; 1
   182a6:	70 e0       	ldi	r23, 0x00	; 0
   182a8:	c7 01       	movw	r24, r14
   182aa:	0e 94 2a 7b 	call	0xf654	; 0xf654 <fread>
   182ae:	6c 01       	movw	r12, r24
   182b0:	e1 2c       	mov	r14, r1
   182b2:	f1 2c       	mov	r15, r1
   182b4:	b8 01       	movw	r22, r16
   182b6:	01 2e       	mov	r0, r17
   182b8:	00 0c       	add	r0, r0
   182ba:	88 0b       	sbc	r24, r24
   182bc:	99 0b       	sbc	r25, r25
   182be:	c6 16       	cp	r12, r22
   182c0:	d7 06       	cpc	r13, r23
   182c2:	e8 06       	cpc	r14, r24
   182c4:	f9 06       	cpc	r15, r25
   182c6:	29 f1       	breq	.+74     	; 0x18312 <lif_read+0x9a>
   182c8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   182cc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   182d0:	92 ff       	sbrs	r25, 2
   182d2:	1d c0       	rjmp	.+58     	; 0x1830e <lif_read+0x96>
   182d4:	ed b7       	in	r30, 0x3d	; 61
   182d6:	fe b7       	in	r31, 0x3e	; 62
   182d8:	17 87       	std	Z+15, r17	; 0x0f
   182da:	06 87       	std	Z+14, r16	; 0x0e
   182dc:	c2 86       	std	Z+10, r12	; 0x0a
   182de:	d3 86       	std	Z+11, r13	; 0x0b
   182e0:	e4 86       	std	Z+12, r14	; 0x0c
   182e2:	f5 86       	std	Z+13, r15	; 0x0d
   182e4:	86 82       	std	Z+6, r8	; 0x06
   182e6:	97 82       	std	Z+7, r9	; 0x07
   182e8:	a0 86       	std	Z+8, r10	; 0x08
   182ea:	b1 86       	std	Z+9, r11	; 0x09
   182ec:	88 81       	ld	r24, Y
   182ee:	99 81       	ldd	r25, Y+1	; 0x01
   182f0:	95 83       	std	Z+5, r25	; 0x05
   182f2:	84 83       	std	Z+4, r24	; 0x04
   182f4:	88 e0       	ldi	r24, 0x08	; 8
   182f6:	93 e4       	ldi	r25, 0x43	; 67
   182f8:	a0 e0       	ldi	r26, 0x00	; 0
   182fa:	81 83       	std	Z+1, r24	; 0x01
   182fc:	92 83       	std	Z+2, r25	; 0x02
   182fe:	a3 83       	std	Z+3, r26	; 0x03
   18300:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18304:	04 c0       	rjmp	.+8      	; 0x1830e <lif_read+0x96>
   18306:	60 e0       	ldi	r22, 0x00	; 0
   18308:	70 e0       	ldi	r23, 0x00	; 0
   1830a:	cb 01       	movw	r24, r22
   1830c:	02 c0       	rjmp	.+4      	; 0x18312 <lif_read+0x9a>
   1830e:	c7 01       	movw	r24, r14
   18310:	b6 01       	movw	r22, r12
   18312:	cd b7       	in	r28, 0x3d	; 61
   18314:	de b7       	in	r29, 0x3e	; 62
   18316:	2f 96       	adiw	r28, 0x0f	; 15
   18318:	ec e0       	ldi	r30, 0x0C	; 12
   1831a:	0c 94 88 e6 	jmp	0x1cd10	; 0x1cd10 <__epilogue_restores__+0xc>

0001831e <lif_write>:
   1831e:	8f 92       	push	r8
   18320:	9f 92       	push	r9
   18322:	af 92       	push	r10
   18324:	bf 92       	push	r11
   18326:	ef 92       	push	r14
   18328:	ff 92       	push	r15
   1832a:	0f 93       	push	r16
   1832c:	1f 93       	push	r17
   1832e:	cf 93       	push	r28
   18330:	df 93       	push	r29
   18332:	ad b7       	in	r26, 0x3d	; 61
   18334:	be b7       	in	r27, 0x3e	; 62
   18336:	1d 97       	sbiw	r26, 0x0d	; 13
   18338:	0f b6       	in	r0, 0x3f	; 63
   1833a:	f8 94       	cli
   1833c:	be bf       	out	0x3e, r27	; 62
   1833e:	0f be       	out	0x3f, r0	; 63
   18340:	ad bf       	out	0x3d, r26	; 61
   18342:	7c 01       	movw	r14, r24
   18344:	eb 01       	movw	r28, r22
   18346:	49 01       	movw	r8, r18
   18348:	5a 01       	movw	r10, r20
   1834a:	fc 01       	movw	r30, r24
   1834c:	20 81       	ld	r18, Z
   1834e:	31 81       	ldd	r19, Z+1	; 0x01
   18350:	b5 01       	movw	r22, r10
   18352:	a4 01       	movw	r20, r8
   18354:	82 81       	ldd	r24, Z+2	; 0x02
   18356:	93 81       	ldd	r25, Z+3	; 0x03
   18358:	5a df       	rcall	.-332    	; 0x1820e <lif_seek_msg>
   1835a:	00 97       	sbiw	r24, 0x00	; 0
   1835c:	81 f1       	breq	.+96     	; 0x183be <lif_write+0xa0>
   1835e:	f7 01       	movw	r30, r14
   18360:	22 81       	ldd	r18, Z+2	; 0x02
   18362:	33 81       	ldd	r19, Z+3	; 0x03
   18364:	a8 01       	movw	r20, r16
   18366:	61 e0       	ldi	r22, 0x01	; 1
   18368:	70 e0       	ldi	r23, 0x00	; 0
   1836a:	ce 01       	movw	r24, r28
   1836c:	0e 94 fc 7b 	call	0xf7f8	; 0xf7f8 <fwrite>
   18370:	ec 01       	movw	r28, r24
   18372:	08 17       	cp	r16, r24
   18374:	19 07       	cpc	r17, r25
   18376:	01 f1       	breq	.+64     	; 0x183b8 <lif_write+0x9a>
   18378:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1837c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18380:	92 ff       	sbrs	r25, 2
   18382:	1c c0       	rjmp	.+56     	; 0x183bc <lif_write+0x9e>
   18384:	ed b7       	in	r30, 0x3d	; 61
   18386:	fe b7       	in	r31, 0x3e	; 62
   18388:	15 87       	std	Z+13, r17	; 0x0d
   1838a:	04 87       	std	Z+12, r16	; 0x0c
   1838c:	d3 87       	std	Z+11, r29	; 0x0b
   1838e:	c2 87       	std	Z+10, r28	; 0x0a
   18390:	86 82       	std	Z+6, r8	; 0x06
   18392:	97 82       	std	Z+7, r9	; 0x07
   18394:	a0 86       	std	Z+8, r10	; 0x08
   18396:	b1 86       	std	Z+9, r11	; 0x09
   18398:	f7 01       	movw	r30, r14
   1839a:	80 81       	ld	r24, Z
   1839c:	91 81       	ldd	r25, Z+1	; 0x01
   1839e:	ed b7       	in	r30, 0x3d	; 61
   183a0:	fe b7       	in	r31, 0x3e	; 62
   183a2:	95 83       	std	Z+5, r25	; 0x05
   183a4:	84 83       	std	Z+4, r24	; 0x04
   183a6:	8b ec       	ldi	r24, 0xCB	; 203
   183a8:	92 e4       	ldi	r25, 0x42	; 66
   183aa:	a0 e0       	ldi	r26, 0x00	; 0
   183ac:	81 83       	std	Z+1, r24	; 0x01
   183ae:	92 83       	std	Z+2, r25	; 0x02
   183b0:	a3 83       	std	Z+3, r26	; 0x03
   183b2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   183b6:	02 c0       	rjmp	.+4      	; 0x183bc <lif_write+0x9e>
   183b8:	c8 01       	movw	r24, r16
   183ba:	01 c0       	rjmp	.+2      	; 0x183be <lif_write+0xa0>
   183bc:	ce 01       	movw	r24, r28
   183be:	ad b7       	in	r26, 0x3d	; 61
   183c0:	be b7       	in	r27, 0x3e	; 62
   183c2:	1d 96       	adiw	r26, 0x0d	; 13
   183c4:	0f b6       	in	r0, 0x3f	; 63
   183c6:	f8 94       	cli
   183c8:	be bf       	out	0x3e, r27	; 62
   183ca:	0f be       	out	0x3f, r0	; 63
   183cc:	ad bf       	out	0x3d, r26	; 61
   183ce:	df 91       	pop	r29
   183d0:	cf 91       	pop	r28
   183d2:	1f 91       	pop	r17
   183d4:	0f 91       	pop	r16
   183d6:	ff 90       	pop	r15
   183d8:	ef 90       	pop	r14
   183da:	bf 90       	pop	r11
   183dc:	af 90       	pop	r10
   183de:	9f 90       	pop	r9
   183e0:	8f 90       	pop	r8
   183e2:	08 95       	ret

000183e4 <lif_chars>:
   183e4:	80 32       	cpi	r24, 0x20	; 32
   183e6:	91 05       	cpc	r25, r1
   183e8:	e1 f0       	breq	.+56     	; 0x18422 <lif_chars+0x3e>
   183ea:	9c 01       	movw	r18, r24
   183ec:	21 56       	subi	r18, 0x61	; 97
   183ee:	31 09       	sbc	r19, r1
   183f0:	2a 31       	cpi	r18, 0x1A	; 26
   183f2:	31 05       	cpc	r19, r1
   183f4:	10 f4       	brcc	.+4      	; 0x183fa <lif_chars+0x16>
   183f6:	80 97       	sbiw	r24, 0x20	; 32
   183f8:	08 95       	ret
   183fa:	9c 01       	movw	r18, r24
   183fc:	21 54       	subi	r18, 0x41	; 65
   183fe:	31 09       	sbc	r19, r1
   18400:	2a 31       	cpi	r18, 0x1A	; 26
   18402:	31 05       	cpc	r19, r1
   18404:	c8 f0       	brcs	.+50     	; 0x18438 <lif_chars+0x54>
   18406:	16 16       	cp	r1, r22
   18408:	17 06       	cpc	r1, r23
   1840a:	74 f4       	brge	.+28     	; 0x18428 <lif_chars+0x44>
   1840c:	2f 5e       	subi	r18, 0xEF	; 239
   1840e:	3f 4f       	sbci	r19, 0xFF	; 255
   18410:	2a 30       	cpi	r18, 0x0A	; 10
   18412:	31 05       	cpc	r19, r1
   18414:	88 f0       	brcs	.+34     	; 0x18438 <lif_chars+0x54>
   18416:	8f 35       	cpi	r24, 0x5F	; 95
   18418:	91 05       	cpc	r25, r1
   1841a:	49 f0       	breq	.+18     	; 0x1842e <lif_chars+0x4a>
   1841c:	8d 97       	sbiw	r24, 0x2d	; 45
   1841e:	21 f4       	brne	.+8      	; 0x18428 <lif_chars+0x44>
   18420:	09 c0       	rjmp	.+18     	; 0x18434 <lif_chars+0x50>
   18422:	80 e2       	ldi	r24, 0x20	; 32
   18424:	90 e0       	ldi	r25, 0x00	; 0
   18426:	08 95       	ret
   18428:	80 e0       	ldi	r24, 0x00	; 0
   1842a:	90 e0       	ldi	r25, 0x00	; 0
   1842c:	08 95       	ret
   1842e:	8f e5       	ldi	r24, 0x5F	; 95
   18430:	90 e0       	ldi	r25, 0x00	; 0
   18432:	08 95       	ret
   18434:	8d e2       	ldi	r24, 0x2D	; 45
   18436:	90 e0       	ldi	r25, 0x00	; 0
   18438:	08 95       	ret

0001843a <lif_B2S>:
   1843a:	a0 e0       	ldi	r26, 0x00	; 0
   1843c:	b0 e0       	ldi	r27, 0x00	; 0
   1843e:	e3 e2       	ldi	r30, 0x23	; 35
   18440:	f2 ec       	ldi	r31, 0xC2	; 194
   18442:	0c 94 6c e6 	jmp	0x1ccd8	; 0x1ccd8 <__prologue_saves__+0xc>
   18446:	5c 01       	movw	r10, r24
   18448:	6b 01       	movw	r12, r22
   1844a:	ea 01       	movw	r28, r20
   1844c:	4c 01       	movw	r8, r24
   1844e:	ee 24       	eor	r14, r14
   18450:	e3 94       	inc	r14
   18452:	f1 2c       	mov	r15, r1
   18454:	00 e0       	ldi	r16, 0x00	; 0
   18456:	10 e0       	ldi	r17, 0x00	; 0
   18458:	0c 17       	cp	r16, r28
   1845a:	1d 07       	cpc	r17, r29
   1845c:	6c f4       	brge	.+26     	; 0x18478 <lif_B2S+0x3e>
   1845e:	f4 01       	movw	r30, r8
   18460:	81 91       	ld	r24, Z+
   18462:	4f 01       	movw	r8, r30
   18464:	b8 01       	movw	r22, r16
   18466:	90 e0       	ldi	r25, 0x00	; 0
   18468:	bd df       	rcall	.-134    	; 0x183e4 <lif_chars>
   1846a:	89 2b       	or	r24, r25
   1846c:	11 f4       	brne	.+4      	; 0x18472 <lif_B2S+0x38>
   1846e:	e1 2c       	mov	r14, r1
   18470:	f1 2c       	mov	r15, r1
   18472:	0f 5f       	subi	r16, 0xFF	; 255
   18474:	1f 4f       	sbci	r17, 0xFF	; 255
   18476:	f0 cf       	rjmp	.-32     	; 0x18458 <lif_B2S+0x1e>
   18478:	d6 01       	movw	r26, r12
   1847a:	f5 01       	movw	r30, r10
   1847c:	cf 01       	movw	r24, r30
   1847e:	8a 19       	sub	r24, r10
   18480:	9b 09       	sbc	r25, r11
   18482:	8c 17       	cp	r24, r28
   18484:	9d 07       	cpc	r25, r29
   18486:	1c f4       	brge	.+6      	; 0x1848e <lif_B2S+0x54>
   18488:	81 91       	ld	r24, Z+
   1848a:	8d 93       	st	X+, r24
   1848c:	f7 cf       	rjmp	.-18     	; 0x1847c <lif_B2S+0x42>
   1848e:	d7 ff       	sbrs	r29, 7
   18490:	02 c0       	rjmp	.+4      	; 0x18496 <lif_B2S+0x5c>
   18492:	c0 e0       	ldi	r28, 0x00	; 0
   18494:	d0 e0       	ldi	r29, 0x00	; 0
   18496:	cc 0d       	add	r28, r12
   18498:	dd 1d       	adc	r29, r13
   1849a:	18 82       	st	Y, r1
   1849c:	c6 01       	movw	r24, r12
   1849e:	0e 94 c4 31 	call	0x6388	; 0x6388 <trim_tail>
   184a2:	c7 01       	movw	r24, r14
   184a4:	cd b7       	in	r28, 0x3d	; 61
   184a6:	de b7       	in	r29, 0x3e	; 62
   184a8:	ec e0       	ldi	r30, 0x0C	; 12
   184aa:	0c 94 88 e6 	jmp	0x1cd10	; 0x1cd10 <__epilogue_restores__+0xc>

000184ae <lif_checkname>:
   184ae:	ef 92       	push	r14
   184b0:	ff 92       	push	r15
   184b2:	0f 93       	push	r16
   184b4:	1f 93       	push	r17
   184b6:	cf 93       	push	r28
   184b8:	df 93       	push	r29
   184ba:	7c 01       	movw	r14, r24
   184bc:	ec 01       	movw	r28, r24
   184be:	01 e0       	ldi	r16, 0x01	; 1
   184c0:	10 e0       	ldi	r17, 0x00	; 0
   184c2:	be 01       	movw	r22, r28
   184c4:	6e 19       	sub	r22, r14
   184c6:	7f 09       	sbc	r23, r15
   184c8:	89 91       	ld	r24, Y+
   184ca:	88 23       	and	r24, r24
   184cc:	39 f0       	breq	.+14     	; 0x184dc <lif_checkname+0x2e>
   184ce:	90 e0       	ldi	r25, 0x00	; 0
   184d0:	89 df       	rcall	.-238    	; 0x183e4 <lif_chars>
   184d2:	89 2b       	or	r24, r25
   184d4:	b1 f7       	brne	.-20     	; 0x184c2 <lif_checkname+0x14>
   184d6:	00 e0       	ldi	r16, 0x00	; 0
   184d8:	10 e0       	ldi	r17, 0x00	; 0
   184da:	f3 cf       	rjmp	.-26     	; 0x184c2 <lif_checkname+0x14>
   184dc:	c8 01       	movw	r24, r16
   184de:	cd b7       	in	r28, 0x3d	; 61
   184e0:	de b7       	in	r29, 0x3e	; 62
   184e2:	e6 e0       	ldi	r30, 0x06	; 6
   184e4:	0c 94 8e e6 	jmp	0x1cd1c	; 0x1cd1c <__epilogue_restores__+0x18>

000184e8 <lif_S2B>:
   184e8:	fb 01       	movw	r30, r22
   184ea:	dc 01       	movw	r26, r24
   184ec:	20 e0       	ldi	r18, 0x00	; 0
   184ee:	30 e0       	ldi	r19, 0x00	; 0
   184f0:	61 91       	ld	r22, Z+
   184f2:	61 11       	cpse	r22, r1
   184f4:	05 c0       	rjmp	.+10     	; 0x18500 <lif_S2B+0x18>
   184f6:	fc 01       	movw	r30, r24
   184f8:	e2 0f       	add	r30, r18
   184fa:	f3 1f       	adc	r31, r19
   184fc:	60 e2       	ldi	r22, 0x20	; 32
   184fe:	08 c0       	rjmp	.+16     	; 0x18510 <lif_S2B+0x28>
   18500:	24 17       	cp	r18, r20
   18502:	35 07       	cpc	r19, r21
   18504:	24 f4       	brge	.+8      	; 0x1850e <lif_S2B+0x26>
   18506:	6d 93       	st	X+, r22
   18508:	2f 5f       	subi	r18, 0xFF	; 255
   1850a:	3f 4f       	sbci	r19, 0xFF	; 255
   1850c:	f1 cf       	rjmp	.-30     	; 0x184f0 <lif_S2B+0x8>
   1850e:	08 95       	ret
   18510:	9f 01       	movw	r18, r30
   18512:	28 1b       	sub	r18, r24
   18514:	39 0b       	sbc	r19, r25
   18516:	24 17       	cp	r18, r20
   18518:	35 07       	cpc	r19, r21
   1851a:	14 f4       	brge	.+4      	; 0x18520 <lif_S2B+0x38>
   1851c:	61 93       	st	Z+, r22
   1851e:	f8 cf       	rjmp	.-16     	; 0x18510 <lif_S2B+0x28>
   18520:	08 95       	ret

00018522 <lif_fixname>:
   18522:	a0 e0       	ldi	r26, 0x00	; 0
   18524:	b0 e0       	ldi	r27, 0x00	; 0
   18526:	e7 e9       	ldi	r30, 0x97	; 151
   18528:	f2 ec       	ldi	r31, 0xC2	; 194
   1852a:	0c 94 6f e6 	jmp	0x1ccde	; 0x1ccde <__prologue_saves__+0x12>
   1852e:	8c 01       	movw	r16, r24
   18530:	cb 01       	movw	r24, r22
   18532:	7a 01       	movw	r14, r20
   18534:	0e 94 a5 76 	call	0xed4a	; 0xed4a <basename>
   18538:	6c 01       	movw	r12, r24
   1853a:	e8 01       	movw	r28, r16
   1853c:	80 e2       	ldi	r24, 0x20	; 32
   1853e:	b8 2e       	mov	r11, r24
   18540:	be 01       	movw	r22, r28
   18542:	60 1b       	sub	r22, r16
   18544:	71 0b       	sbc	r23, r17
   18546:	f6 01       	movw	r30, r12
   18548:	81 91       	ld	r24, Z+
   1854a:	6f 01       	movw	r12, r30
   1854c:	81 11       	cpse	r24, r1
   1854e:	02 c0       	rjmp	.+4      	; 0x18554 <lif_fixname+0x32>
   18550:	20 e2       	ldi	r18, 0x20	; 32
   18552:	0e c0       	rjmp	.+28     	; 0x18570 <lif_fixname+0x4e>
   18554:	1e 14       	cp	r1, r14
   18556:	1f 04       	cpc	r1, r15
   18558:	dc f7       	brge	.-10     	; 0x18550 <lif_fixname+0x2e>
   1855a:	8e 32       	cpi	r24, 0x2E	; 46
   1855c:	c9 f3       	breq	.-14     	; 0x18550 <lif_fixname+0x2e>
   1855e:	90 e0       	ldi	r25, 0x00	; 0
   18560:	41 df       	rcall	.-382    	; 0x183e4 <lif_chars>
   18562:	88 23       	and	r24, r24
   18564:	11 f0       	breq	.+4      	; 0x1856a <lif_fixname+0x48>
   18566:	88 83       	st	Y, r24
   18568:	01 c0       	rjmp	.+2      	; 0x1856c <lif_fixname+0x4a>
   1856a:	b8 82       	st	Y, r11
   1856c:	21 96       	adiw	r28, 0x01	; 1
   1856e:	e8 cf       	rjmp	.-48     	; 0x18540 <lif_fixname+0x1e>
   18570:	ce 01       	movw	r24, r28
   18572:	80 1b       	sub	r24, r16
   18574:	91 0b       	sbc	r25, r17
   18576:	8e 15       	cp	r24, r14
   18578:	9f 05       	cpc	r25, r15
   1857a:	14 f4       	brge	.+4      	; 0x18580 <lif_fixname+0x5e>
   1857c:	29 93       	st	Y+, r18
   1857e:	f8 cf       	rjmp	.-16     	; 0x18570 <lif_fixname+0x4e>
   18580:	18 82       	st	Y, r1
   18582:	f8 01       	movw	r30, r16
   18584:	01 90       	ld	r0, Z+
   18586:	00 20       	and	r0, r0
   18588:	e9 f7       	brne	.-6      	; 0x18584 <lif_fixname+0x62>
   1858a:	cf 01       	movw	r24, r30
   1858c:	01 97       	sbiw	r24, 0x01	; 1
   1858e:	80 1b       	sub	r24, r16
   18590:	91 0b       	sbc	r25, r17
   18592:	cd b7       	in	r28, 0x3d	; 61
   18594:	de b7       	in	r29, 0x3e	; 62
   18596:	e9 e0       	ldi	r30, 0x09	; 9
   18598:	0c 94 8b e6 	jmp	0x1cd16	; 0x1cd16 <__epilogue_restores__+0x12>

0001859c <lif_vol2str>:
   1859c:	ef 92       	push	r14
   1859e:	ff 92       	push	r15
   185a0:	0f 93       	push	r16
   185a2:	1f 93       	push	r17
   185a4:	cf 93       	push	r28
   185a6:	df 93       	push	r29
   185a8:	7c 01       	movw	r14, r24
   185aa:	eb 01       	movw	r28, r22
   185ac:	fc 01       	movw	r30, r24
   185ae:	04 a1       	ldd	r16, Z+36	; 0x24
   185b0:	15 a1       	ldd	r17, Z+37	; 0x25
   185b2:	20 e0       	ldi	r18, 0x00	; 0
   185b4:	30 e0       	ldi	r19, 0x00	; 0
   185b6:	42 e0       	ldi	r20, 0x02	; 2
   185b8:	50 e0       	ldi	r21, 0x00	; 0
   185ba:	60 e0       	ldi	r22, 0x00	; 0
   185bc:	70 e0       	ldi	r23, 0x00	; 0
   185be:	ce 01       	movw	r24, r28
   185c0:	e4 dc       	rcall	.-1592   	; 0x17f8a <V2B_MSB>
   185c2:	b7 01       	movw	r22, r14
   185c4:	6a 5d       	subi	r22, 0xDA	; 218
   185c6:	7f 4f       	sbci	r23, 0xFF	; 255
   185c8:	46 e0       	ldi	r20, 0x06	; 6
   185ca:	50 e0       	ldi	r21, 0x00	; 0
   185cc:	ce 01       	movw	r24, r28
   185ce:	02 96       	adiw	r24, 0x02	; 2
   185d0:	8b df       	rcall	.-234    	; 0x184e8 <lif_S2B>
   185d2:	f7 01       	movw	r30, r14
   185d4:	05 a5       	ldd	r16, Z+45	; 0x2d
   185d6:	16 a5       	ldd	r17, Z+46	; 0x2e
   185d8:	27 a5       	ldd	r18, Z+47	; 0x2f
   185da:	30 a9       	ldd	r19, Z+48	; 0x30
   185dc:	44 e0       	ldi	r20, 0x04	; 4
   185de:	50 e0       	ldi	r21, 0x00	; 0
   185e0:	68 e0       	ldi	r22, 0x08	; 8
   185e2:	70 e0       	ldi	r23, 0x00	; 0
   185e4:	ce 01       	movw	r24, r28
   185e6:	d1 dc       	rcall	.-1630   	; 0x17f8a <V2B_MSB>
   185e8:	f7 01       	movw	r30, r14
   185ea:	01 a9       	ldd	r16, Z+49	; 0x31
   185ec:	12 a9       	ldd	r17, Z+50	; 0x32
   185ee:	20 e0       	ldi	r18, 0x00	; 0
   185f0:	30 e0       	ldi	r19, 0x00	; 0
   185f2:	42 e0       	ldi	r20, 0x02	; 2
   185f4:	50 e0       	ldi	r21, 0x00	; 0
   185f6:	6c e0       	ldi	r22, 0x0C	; 12
   185f8:	70 e0       	ldi	r23, 0x00	; 0
   185fa:	ce 01       	movw	r24, r28
   185fc:	c6 dc       	rcall	.-1652   	; 0x17f8a <V2B_MSB>
   185fe:	00 e0       	ldi	r16, 0x00	; 0
   18600:	10 e0       	ldi	r17, 0x00	; 0
   18602:	98 01       	movw	r18, r16
   18604:	42 e0       	ldi	r20, 0x02	; 2
   18606:	50 e0       	ldi	r21, 0x00	; 0
   18608:	6e e0       	ldi	r22, 0x0E	; 14
   1860a:	70 e0       	ldi	r23, 0x00	; 0
   1860c:	ce 01       	movw	r24, r28
   1860e:	bd dc       	rcall	.-1670   	; 0x17f8a <V2B_MSB>
   18610:	f7 01       	movw	r30, r14
   18612:	05 a9       	ldd	r16, Z+53	; 0x35
   18614:	16 a9       	ldd	r17, Z+54	; 0x36
   18616:	27 a9       	ldd	r18, Z+55	; 0x37
   18618:	30 ad       	ldd	r19, Z+56	; 0x38
   1861a:	44 e0       	ldi	r20, 0x04	; 4
   1861c:	50 e0       	ldi	r21, 0x00	; 0
   1861e:	60 e1       	ldi	r22, 0x10	; 16
   18620:	70 e0       	ldi	r23, 0x00	; 0
   18622:	ce 01       	movw	r24, r28
   18624:	b2 dc       	rcall	.-1692   	; 0x17f8a <V2B_MSB>
   18626:	f7 01       	movw	r30, r14
   18628:	01 ad       	ldd	r16, Z+57	; 0x39
   1862a:	12 ad       	ldd	r17, Z+58	; 0x3a
   1862c:	20 e0       	ldi	r18, 0x00	; 0
   1862e:	30 e0       	ldi	r19, 0x00	; 0
   18630:	42 e0       	ldi	r20, 0x02	; 2
   18632:	50 e0       	ldi	r21, 0x00	; 0
   18634:	64 e1       	ldi	r22, 0x14	; 20
   18636:	70 e0       	ldi	r23, 0x00	; 0
   18638:	ce 01       	movw	r24, r28
   1863a:	a7 dc       	rcall	.-1714   	; 0x17f8a <V2B_MSB>
   1863c:	00 e0       	ldi	r16, 0x00	; 0
   1863e:	10 e0       	ldi	r17, 0x00	; 0
   18640:	98 01       	movw	r18, r16
   18642:	42 e0       	ldi	r20, 0x02	; 2
   18644:	50 e0       	ldi	r21, 0x00	; 0
   18646:	66 e1       	ldi	r22, 0x16	; 22
   18648:	70 e0       	ldi	r23, 0x00	; 0
   1864a:	ce 01       	movw	r24, r28
   1864c:	9e dc       	rcall	.-1732   	; 0x17f8a <V2B_MSB>
   1864e:	f7 01       	movw	r30, r14
   18650:	fd 96       	adiw	r30, 0x3d	; 61
   18652:	00 81       	ld	r16, Z
   18654:	11 81       	ldd	r17, Z+1	; 0x01
   18656:	22 81       	ldd	r18, Z+2	; 0x02
   18658:	33 81       	ldd	r19, Z+3	; 0x03
   1865a:	44 e0       	ldi	r20, 0x04	; 4
   1865c:	50 e0       	ldi	r21, 0x00	; 0
   1865e:	68 e1       	ldi	r22, 0x18	; 24
   18660:	70 e0       	ldi	r23, 0x00	; 0
   18662:	ce 01       	movw	r24, r28
   18664:	92 dc       	rcall	.-1756   	; 0x17f8a <V2B_MSB>
   18666:	f7 01       	movw	r30, r14
   18668:	ef 5b       	subi	r30, 0xBF	; 191
   1866a:	ff 4f       	sbci	r31, 0xFF	; 255
   1866c:	00 81       	ld	r16, Z
   1866e:	11 81       	ldd	r17, Z+1	; 0x01
   18670:	22 81       	ldd	r18, Z+2	; 0x02
   18672:	33 81       	ldd	r19, Z+3	; 0x03
   18674:	44 e0       	ldi	r20, 0x04	; 4
   18676:	50 e0       	ldi	r21, 0x00	; 0
   18678:	6c e1       	ldi	r22, 0x1C	; 28
   1867a:	70 e0       	ldi	r23, 0x00	; 0
   1867c:	ce 01       	movw	r24, r28
   1867e:	85 dc       	rcall	.-1782   	; 0x17f8a <V2B_MSB>
   18680:	f7 01       	movw	r30, r14
   18682:	eb 5b       	subi	r30, 0xBB	; 187
   18684:	ff 4f       	sbci	r31, 0xFF	; 255
   18686:	00 81       	ld	r16, Z
   18688:	11 81       	ldd	r17, Z+1	; 0x01
   1868a:	22 81       	ldd	r18, Z+2	; 0x02
   1868c:	33 81       	ldd	r19, Z+3	; 0x03
   1868e:	44 e0       	ldi	r20, 0x04	; 4
   18690:	50 e0       	ldi	r21, 0x00	; 0
   18692:	60 e2       	ldi	r22, 0x20	; 32
   18694:	70 e0       	ldi	r23, 0x00	; 0
   18696:	ce 01       	movw	r24, r28
   18698:	78 dc       	rcall	.-1808   	; 0x17f8a <V2B_MSB>
   1869a:	de 01       	movw	r26, r28
   1869c:	94 96       	adiw	r26, 0x24	; 36
   1869e:	f7 01       	movw	r30, r14
   186a0:	e7 5b       	subi	r30, 0xB7	; 183
   186a2:	ff 4f       	sbci	r31, 0xFF	; 255
   186a4:	86 e0       	ldi	r24, 0x06	; 6
   186a6:	01 90       	ld	r0, Z+
   186a8:	0d 92       	st	X+, r0
   186aa:	8a 95       	dec	r24
   186ac:	e1 f7       	brne	.-8      	; 0x186a6 <lif_vol2str+0x10a>
   186ae:	cd b7       	in	r28, 0x3d	; 61
   186b0:	de b7       	in	r29, 0x3e	; 62
   186b2:	e6 e0       	ldi	r30, 0x06	; 6
   186b4:	0c 94 8e e6 	jmp	0x1cd1c	; 0x1cd1c <__epilogue_restores__+0x18>

000186b8 <lif_str2vol>:
   186b8:	0f 93       	push	r16
   186ba:	1f 93       	push	r17
   186bc:	cf 93       	push	r28
   186be:	df 93       	push	r29
   186c0:	8c 01       	movw	r16, r24
   186c2:	eb 01       	movw	r28, r22
   186c4:	42 e0       	ldi	r20, 0x02	; 2
   186c6:	50 e0       	ldi	r21, 0x00	; 0
   186c8:	60 e0       	ldi	r22, 0x00	; 0
   186ca:	70 e0       	ldi	r23, 0x00	; 0
   186cc:	87 dc       	rcall	.-1778   	; 0x17fdc <B2V_MSB>
   186ce:	7d a3       	std	Y+37, r23	; 0x25
   186d0:	6c a3       	std	Y+36, r22	; 0x24
   186d2:	be 01       	movw	r22, r28
   186d4:	6a 5d       	subi	r22, 0xDA	; 218
   186d6:	7f 4f       	sbci	r23, 0xFF	; 255
   186d8:	46 e0       	ldi	r20, 0x06	; 6
   186da:	50 e0       	ldi	r21, 0x00	; 0
   186dc:	c8 01       	movw	r24, r16
   186de:	02 96       	adiw	r24, 0x02	; 2
   186e0:	ac de       	rcall	.-680    	; 0x1843a <lif_B2S>
   186e2:	44 e0       	ldi	r20, 0x04	; 4
   186e4:	50 e0       	ldi	r21, 0x00	; 0
   186e6:	68 e0       	ldi	r22, 0x08	; 8
   186e8:	70 e0       	ldi	r23, 0x00	; 0
   186ea:	c8 01       	movw	r24, r16
   186ec:	77 dc       	rcall	.-1810   	; 0x17fdc <B2V_MSB>
   186ee:	6d a7       	std	Y+45, r22	; 0x2d
   186f0:	7e a7       	std	Y+46, r23	; 0x2e
   186f2:	8f a7       	std	Y+47, r24	; 0x2f
   186f4:	98 ab       	std	Y+48, r25	; 0x30
   186f6:	42 e0       	ldi	r20, 0x02	; 2
   186f8:	50 e0       	ldi	r21, 0x00	; 0
   186fa:	6c e0       	ldi	r22, 0x0C	; 12
   186fc:	70 e0       	ldi	r23, 0x00	; 0
   186fe:	c8 01       	movw	r24, r16
   18700:	6d dc       	rcall	.-1830   	; 0x17fdc <B2V_MSB>
   18702:	7a ab       	std	Y+50, r23	; 0x32
   18704:	69 ab       	std	Y+49, r22	; 0x31
   18706:	42 e0       	ldi	r20, 0x02	; 2
   18708:	50 e0       	ldi	r21, 0x00	; 0
   1870a:	6e e0       	ldi	r22, 0x0E	; 14
   1870c:	70 e0       	ldi	r23, 0x00	; 0
   1870e:	c8 01       	movw	r24, r16
   18710:	65 dc       	rcall	.-1846   	; 0x17fdc <B2V_MSB>
   18712:	7c ab       	std	Y+52, r23	; 0x34
   18714:	6b ab       	std	Y+51, r22	; 0x33
   18716:	44 e0       	ldi	r20, 0x04	; 4
   18718:	50 e0       	ldi	r21, 0x00	; 0
   1871a:	60 e1       	ldi	r22, 0x10	; 16
   1871c:	70 e0       	ldi	r23, 0x00	; 0
   1871e:	c8 01       	movw	r24, r16
   18720:	5d dc       	rcall	.-1862   	; 0x17fdc <B2V_MSB>
   18722:	6d ab       	std	Y+53, r22	; 0x35
   18724:	7e ab       	std	Y+54, r23	; 0x36
   18726:	8f ab       	std	Y+55, r24	; 0x37
   18728:	98 af       	std	Y+56, r25	; 0x38
   1872a:	42 e0       	ldi	r20, 0x02	; 2
   1872c:	50 e0       	ldi	r21, 0x00	; 0
   1872e:	64 e1       	ldi	r22, 0x14	; 20
   18730:	70 e0       	ldi	r23, 0x00	; 0
   18732:	c8 01       	movw	r24, r16
   18734:	53 dc       	rcall	.-1882   	; 0x17fdc <B2V_MSB>
   18736:	7a af       	std	Y+58, r23	; 0x3a
   18738:	69 af       	std	Y+57, r22	; 0x39
   1873a:	42 e0       	ldi	r20, 0x02	; 2
   1873c:	50 e0       	ldi	r21, 0x00	; 0
   1873e:	66 e1       	ldi	r22, 0x16	; 22
   18740:	70 e0       	ldi	r23, 0x00	; 0
   18742:	c8 01       	movw	r24, r16
   18744:	4b dc       	rcall	.-1898   	; 0x17fdc <B2V_MSB>
   18746:	7c af       	std	Y+60, r23	; 0x3c
   18748:	6b af       	std	Y+59, r22	; 0x3b
   1874a:	44 e0       	ldi	r20, 0x04	; 4
   1874c:	50 e0       	ldi	r21, 0x00	; 0
   1874e:	68 e1       	ldi	r22, 0x18	; 24
   18750:	70 e0       	ldi	r23, 0x00	; 0
   18752:	c8 01       	movw	r24, r16
   18754:	43 dc       	rcall	.-1914   	; 0x17fdc <B2V_MSB>
   18756:	fe 01       	movw	r30, r28
   18758:	fd 96       	adiw	r30, 0x3d	; 61
   1875a:	60 83       	st	Z, r22
   1875c:	71 83       	std	Z+1, r23	; 0x01
   1875e:	82 83       	std	Z+2, r24	; 0x02
   18760:	93 83       	std	Z+3, r25	; 0x03
   18762:	44 e0       	ldi	r20, 0x04	; 4
   18764:	50 e0       	ldi	r21, 0x00	; 0
   18766:	6c e1       	ldi	r22, 0x1C	; 28
   18768:	70 e0       	ldi	r23, 0x00	; 0
   1876a:	c8 01       	movw	r24, r16
   1876c:	37 dc       	rcall	.-1938   	; 0x17fdc <B2V_MSB>
   1876e:	fe 01       	movw	r30, r28
   18770:	ef 5b       	subi	r30, 0xBF	; 191
   18772:	ff 4f       	sbci	r31, 0xFF	; 255
   18774:	60 83       	st	Z, r22
   18776:	71 83       	std	Z+1, r23	; 0x01
   18778:	82 83       	std	Z+2, r24	; 0x02
   1877a:	93 83       	std	Z+3, r25	; 0x03
   1877c:	44 e0       	ldi	r20, 0x04	; 4
   1877e:	50 e0       	ldi	r21, 0x00	; 0
   18780:	60 e2       	ldi	r22, 0x20	; 32
   18782:	70 e0       	ldi	r23, 0x00	; 0
   18784:	c8 01       	movw	r24, r16
   18786:	2a dc       	rcall	.-1964   	; 0x17fdc <B2V_MSB>
   18788:	fe 01       	movw	r30, r28
   1878a:	eb 5b       	subi	r30, 0xBB	; 187
   1878c:	ff 4f       	sbci	r31, 0xFF	; 255
   1878e:	60 83       	st	Z, r22
   18790:	71 83       	std	Z+1, r23	; 0x01
   18792:	82 83       	std	Z+2, r24	; 0x02
   18794:	93 83       	std	Z+3, r25	; 0x03
   18796:	de 01       	movw	r26, r28
   18798:	a7 5b       	subi	r26, 0xB7	; 183
   1879a:	bf 4f       	sbci	r27, 0xFF	; 255
   1879c:	f8 01       	movw	r30, r16
   1879e:	b4 96       	adiw	r30, 0x24	; 36
   187a0:	86 e0       	ldi	r24, 0x06	; 6
   187a2:	01 90       	ld	r0, Z+
   187a4:	0d 92       	st	X+, r0
   187a6:	8a 95       	dec	r24
   187a8:	e1 f7       	brne	.-8      	; 0x187a2 <lif_str2vol+0xea>
   187aa:	df 91       	pop	r29
   187ac:	cf 91       	pop	r28
   187ae:	1f 91       	pop	r17
   187b0:	0f 91       	pop	r16
   187b2:	08 95       	ret

000187b4 <lif_dir2str>:
   187b4:	ef 92       	push	r14
   187b6:	ff 92       	push	r15
   187b8:	0f 93       	push	r16
   187ba:	1f 93       	push	r17
   187bc:	cf 93       	push	r28
   187be:	df 93       	push	r29
   187c0:	ec 01       	movw	r28, r24
   187c2:	7b 01       	movw	r14, r22
   187c4:	bc 01       	movw	r22, r24
   187c6:	61 5b       	subi	r22, 0xB1	; 177
   187c8:	7f 4f       	sbci	r23, 0xFF	; 255
   187ca:	4a e0       	ldi	r20, 0x0A	; 10
   187cc:	50 e0       	ldi	r21, 0x00	; 0
   187ce:	c7 01       	movw	r24, r14
   187d0:	8b de       	rcall	.-746    	; 0x184e8 <lif_S2B>
   187d2:	fe 01       	movw	r30, r28
   187d4:	e6 5a       	subi	r30, 0xA6	; 166
   187d6:	ff 4f       	sbci	r31, 0xFF	; 255
   187d8:	00 81       	ld	r16, Z
   187da:	11 81       	ldd	r17, Z+1	; 0x01
   187dc:	20 e0       	ldi	r18, 0x00	; 0
   187de:	30 e0       	ldi	r19, 0x00	; 0
   187e0:	42 e0       	ldi	r20, 0x02	; 2
   187e2:	50 e0       	ldi	r21, 0x00	; 0
   187e4:	6a e0       	ldi	r22, 0x0A	; 10
   187e6:	70 e0       	ldi	r23, 0x00	; 0
   187e8:	c7 01       	movw	r24, r14
   187ea:	cf db       	rcall	.-2146   	; 0x17f8a <V2B_MSB>
   187ec:	fe 01       	movw	r30, r28
   187ee:	e4 5a       	subi	r30, 0xA4	; 164
   187f0:	ff 4f       	sbci	r31, 0xFF	; 255
   187f2:	00 81       	ld	r16, Z
   187f4:	11 81       	ldd	r17, Z+1	; 0x01
   187f6:	22 81       	ldd	r18, Z+2	; 0x02
   187f8:	33 81       	ldd	r19, Z+3	; 0x03
   187fa:	44 e0       	ldi	r20, 0x04	; 4
   187fc:	50 e0       	ldi	r21, 0x00	; 0
   187fe:	6c e0       	ldi	r22, 0x0C	; 12
   18800:	70 e0       	ldi	r23, 0x00	; 0
   18802:	c7 01       	movw	r24, r14
   18804:	c2 db       	rcall	.-2172   	; 0x17f8a <V2B_MSB>
   18806:	fe 01       	movw	r30, r28
   18808:	e0 5a       	subi	r30, 0xA0	; 160
   1880a:	ff 4f       	sbci	r31, 0xFF	; 255
   1880c:	00 81       	ld	r16, Z
   1880e:	11 81       	ldd	r17, Z+1	; 0x01
   18810:	22 81       	ldd	r18, Z+2	; 0x02
   18812:	33 81       	ldd	r19, Z+3	; 0x03
   18814:	44 e0       	ldi	r20, 0x04	; 4
   18816:	50 e0       	ldi	r21, 0x00	; 0
   18818:	60 e1       	ldi	r22, 0x10	; 16
   1881a:	70 e0       	ldi	r23, 0x00	; 0
   1881c:	c7 01       	movw	r24, r14
   1881e:	b5 db       	rcall	.-2198   	; 0x17f8a <V2B_MSB>
   18820:	d7 01       	movw	r26, r14
   18822:	54 96       	adiw	r26, 0x14	; 20
   18824:	fe 01       	movw	r30, r28
   18826:	ec 59       	subi	r30, 0x9C	; 156
   18828:	ff 4f       	sbci	r31, 0xFF	; 255
   1882a:	86 e0       	ldi	r24, 0x06	; 6
   1882c:	01 90       	ld	r0, Z+
   1882e:	0d 92       	st	X+, r0
   18830:	8a 95       	dec	r24
   18832:	e1 f7       	brne	.-8      	; 0x1882c <lif_dir2str+0x78>
   18834:	fe 01       	movw	r30, r28
   18836:	e6 59       	subi	r30, 0x96	; 150
   18838:	ff 4f       	sbci	r31, 0xFF	; 255
   1883a:	00 81       	ld	r16, Z
   1883c:	11 81       	ldd	r17, Z+1	; 0x01
   1883e:	20 e0       	ldi	r18, 0x00	; 0
   18840:	30 e0       	ldi	r19, 0x00	; 0
   18842:	42 e0       	ldi	r20, 0x02	; 2
   18844:	50 e0       	ldi	r21, 0x00	; 0
   18846:	6a e1       	ldi	r22, 0x1A	; 26
   18848:	70 e0       	ldi	r23, 0x00	; 0
   1884a:	c7 01       	movw	r24, r14
   1884c:	9e db       	rcall	.-2244   	; 0x17f8a <V2B_MSB>
   1884e:	fe 01       	movw	r30, r28
   18850:	e4 59       	subi	r30, 0x94	; 148
   18852:	ff 4f       	sbci	r31, 0xFF	; 255
   18854:	00 81       	ld	r16, Z
   18856:	11 81       	ldd	r17, Z+1	; 0x01
   18858:	20 e0       	ldi	r18, 0x00	; 0
   1885a:	30 e0       	ldi	r19, 0x00	; 0
   1885c:	42 e0       	ldi	r20, 0x02	; 2
   1885e:	50 e0       	ldi	r21, 0x00	; 0
   18860:	6c e1       	ldi	r22, 0x1C	; 28
   18862:	70 e0       	ldi	r23, 0x00	; 0
   18864:	c7 01       	movw	r24, r14
   18866:	a5 db       	rcall	.-2230   	; 0x17fb2 <V2B_LSB>
   18868:	c2 59       	subi	r28, 0x92	; 146
   1886a:	df 4f       	sbci	r29, 0xFF	; 255
   1886c:	08 81       	ld	r16, Y
   1886e:	19 81       	ldd	r17, Y+1	; 0x01
   18870:	20 e0       	ldi	r18, 0x00	; 0
   18872:	30 e0       	ldi	r19, 0x00	; 0
   18874:	42 e0       	ldi	r20, 0x02	; 2
   18876:	50 e0       	ldi	r21, 0x00	; 0
   18878:	6e e1       	ldi	r22, 0x1E	; 30
   1887a:	70 e0       	ldi	r23, 0x00	; 0
   1887c:	c7 01       	movw	r24, r14
   1887e:	99 db       	rcall	.-2254   	; 0x17fb2 <V2B_LSB>
   18880:	cd b7       	in	r28, 0x3d	; 61
   18882:	de b7       	in	r29, 0x3e	; 62
   18884:	e6 e0       	ldi	r30, 0x06	; 6
   18886:	0c 94 8e e6 	jmp	0x1cd1c	; 0x1cd1c <__epilogue_restores__+0x18>

0001888a <lif_str2dir>:
   1888a:	0f 93       	push	r16
   1888c:	1f 93       	push	r17
   1888e:	cf 93       	push	r28
   18890:	df 93       	push	r29
   18892:	8c 01       	movw	r16, r24
   18894:	eb 01       	movw	r28, r22
   18896:	61 5b       	subi	r22, 0xB1	; 177
   18898:	7f 4f       	sbci	r23, 0xFF	; 255
   1889a:	4a e0       	ldi	r20, 0x0A	; 10
   1889c:	50 e0       	ldi	r21, 0x00	; 0
   1889e:	cd dd       	rcall	.-1126   	; 0x1843a <lif_B2S>
   188a0:	42 e0       	ldi	r20, 0x02	; 2
   188a2:	50 e0       	ldi	r21, 0x00	; 0
   188a4:	6a e0       	ldi	r22, 0x0A	; 10
   188a6:	70 e0       	ldi	r23, 0x00	; 0
   188a8:	c8 01       	movw	r24, r16
   188aa:	98 db       	rcall	.-2256   	; 0x17fdc <B2V_MSB>
   188ac:	fe 01       	movw	r30, r28
   188ae:	e6 5a       	subi	r30, 0xA6	; 166
   188b0:	ff 4f       	sbci	r31, 0xFF	; 255
   188b2:	71 83       	std	Z+1, r23	; 0x01
   188b4:	60 83       	st	Z, r22
   188b6:	44 e0       	ldi	r20, 0x04	; 4
   188b8:	50 e0       	ldi	r21, 0x00	; 0
   188ba:	6c e0       	ldi	r22, 0x0C	; 12
   188bc:	70 e0       	ldi	r23, 0x00	; 0
   188be:	c8 01       	movw	r24, r16
   188c0:	8d db       	rcall	.-2278   	; 0x17fdc <B2V_MSB>
   188c2:	fe 01       	movw	r30, r28
   188c4:	e4 5a       	subi	r30, 0xA4	; 164
   188c6:	ff 4f       	sbci	r31, 0xFF	; 255
   188c8:	60 83       	st	Z, r22
   188ca:	71 83       	std	Z+1, r23	; 0x01
   188cc:	82 83       	std	Z+2, r24	; 0x02
   188ce:	93 83       	std	Z+3, r25	; 0x03
   188d0:	44 e0       	ldi	r20, 0x04	; 4
   188d2:	50 e0       	ldi	r21, 0x00	; 0
   188d4:	60 e1       	ldi	r22, 0x10	; 16
   188d6:	70 e0       	ldi	r23, 0x00	; 0
   188d8:	c8 01       	movw	r24, r16
   188da:	80 db       	rcall	.-2304   	; 0x17fdc <B2V_MSB>
   188dc:	fe 01       	movw	r30, r28
   188de:	e0 5a       	subi	r30, 0xA0	; 160
   188e0:	ff 4f       	sbci	r31, 0xFF	; 255
   188e2:	60 83       	st	Z, r22
   188e4:	71 83       	std	Z+1, r23	; 0x01
   188e6:	82 83       	std	Z+2, r24	; 0x02
   188e8:	93 83       	std	Z+3, r25	; 0x03
   188ea:	de 01       	movw	r26, r28
   188ec:	ac 59       	subi	r26, 0x9C	; 156
   188ee:	bf 4f       	sbci	r27, 0xFF	; 255
   188f0:	f8 01       	movw	r30, r16
   188f2:	74 96       	adiw	r30, 0x14	; 20
   188f4:	86 e0       	ldi	r24, 0x06	; 6
   188f6:	01 90       	ld	r0, Z+
   188f8:	0d 92       	st	X+, r0
   188fa:	8a 95       	dec	r24
   188fc:	e1 f7       	brne	.-8      	; 0x188f6 <lif_str2dir+0x6c>
   188fe:	42 e0       	ldi	r20, 0x02	; 2
   18900:	50 e0       	ldi	r21, 0x00	; 0
   18902:	6a e1       	ldi	r22, 0x1A	; 26
   18904:	70 e0       	ldi	r23, 0x00	; 0
   18906:	c8 01       	movw	r24, r16
   18908:	69 db       	rcall	.-2350   	; 0x17fdc <B2V_MSB>
   1890a:	fe 01       	movw	r30, r28
   1890c:	e6 59       	subi	r30, 0x96	; 150
   1890e:	ff 4f       	sbci	r31, 0xFF	; 255
   18910:	71 83       	std	Z+1, r23	; 0x01
   18912:	60 83       	st	Z, r22
   18914:	42 e0       	ldi	r20, 0x02	; 2
   18916:	50 e0       	ldi	r21, 0x00	; 0
   18918:	6c e1       	ldi	r22, 0x1C	; 28
   1891a:	70 e0       	ldi	r23, 0x00	; 0
   1891c:	c8 01       	movw	r24, r16
   1891e:	7d db       	rcall	.-2310   	; 0x1801a <B2V_LSB>
   18920:	fe 01       	movw	r30, r28
   18922:	e4 59       	subi	r30, 0x94	; 148
   18924:	ff 4f       	sbci	r31, 0xFF	; 255
   18926:	71 83       	std	Z+1, r23	; 0x01
   18928:	60 83       	st	Z, r22
   1892a:	42 e0       	ldi	r20, 0x02	; 2
   1892c:	50 e0       	ldi	r21, 0x00	; 0
   1892e:	6e e1       	ldi	r22, 0x1E	; 30
   18930:	70 e0       	ldi	r23, 0x00	; 0
   18932:	c8 01       	movw	r24, r16
   18934:	72 db       	rcall	.-2332   	; 0x1801a <B2V_LSB>
   18936:	c2 59       	subi	r28, 0x92	; 146
   18938:	df 4f       	sbci	r29, 0xFF	; 255
   1893a:	79 83       	std	Y+1, r23	; 0x01
   1893c:	68 83       	st	Y, r22
   1893e:	df 91       	pop	r29
   18940:	cf 91       	pop	r28
   18942:	1f 91       	pop	r17
   18944:	0f 91       	pop	r16
   18946:	08 95       	ret

00018948 <lif_BIN2BCD>:
   18948:	6a e0       	ldi	r22, 0x0A	; 10
   1894a:	0e 94 c6 e5 	call	0x1cb8c	; 0x1cb8c <__udivmodqi4>
   1894e:	82 95       	swap	r24
   18950:	80 7f       	andi	r24, 0xF0	; 240
   18952:	89 2b       	or	r24, r25
   18954:	08 95       	ret

00018956 <lif_BCD2BIN>:
   18956:	28 2f       	mov	r18, r24
   18958:	22 95       	swap	r18
   1895a:	2f 70       	andi	r18, 0x0F	; 15
   1895c:	8f 70       	andi	r24, 0x0F	; 15
   1895e:	90 e0       	ldi	r25, 0x00	; 0
   18960:	3a e0       	ldi	r19, 0x0A	; 10
   18962:	23 9f       	mul	r18, r19
   18964:	80 0d       	add	r24, r0
   18966:	91 1d       	adc	r25, r1
   18968:	11 24       	eor	r1, r1
   1896a:	08 95       	ret

0001896c <lif_time2lifbcd>:
   1896c:	aa e1       	ldi	r26, 0x1A	; 26
   1896e:	b0 e0       	ldi	r27, 0x00	; 0
   18970:	ec eb       	ldi	r30, 0xBC	; 188
   18972:	f4 ec       	ldi	r31, 0xC4	; 196
   18974:	0c 94 74 e6 	jmp	0x1cce8	; 0x1cce8 <__prologue_saves__+0x1c>
   18978:	8b 01       	movw	r16, r22
   1897a:	9c 01       	movw	r18, r24
   1897c:	6f 8b       	std	Y+23, r22	; 0x17
   1897e:	78 8f       	std	Y+24, r23	; 0x18
   18980:	89 8f       	std	Y+25, r24	; 0x19
   18982:	9a 8f       	std	Y+26, r25	; 0x1a
   18984:	67 2b       	or	r22, r23
   18986:	68 2b       	or	r22, r24
   18988:	69 2b       	or	r22, r25
   1898a:	41 f4       	brne	.+16     	; 0x1899c <lif_time2lifbcd+0x30>
   1898c:	fa 01       	movw	r30, r20
   1898e:	ca 01       	movw	r24, r20
   18990:	06 96       	adiw	r24, 0x06	; 6
   18992:	11 92       	st	Z+, r1
   18994:	e8 17       	cp	r30, r24
   18996:	f9 07       	cpc	r31, r25
   18998:	e1 f7       	brne	.-8      	; 0x18992 <lif_time2lifbcd+0x26>
   1899a:	26 c0       	rjmp	.+76     	; 0x189e8 <lif_time2lifbcd+0x7c>
   1899c:	8a 01       	movw	r16, r20
   1899e:	be 01       	movw	r22, r28
   189a0:	6f 5f       	subi	r22, 0xFF	; 255
   189a2:	7f 4f       	sbci	r23, 0xFF	; 255
   189a4:	ce 01       	movw	r24, r28
   189a6:	47 96       	adiw	r24, 0x17	; 23
   189a8:	0e 94 38 37 	call	0x6e70	; 0x6e70 <gmtime_r>
   189ac:	8b 85       	ldd	r24, Y+11	; 0x0b
   189ae:	9c 85       	ldd	r25, Y+12	; 0x0c
   189b0:	64 e6       	ldi	r22, 0x64	; 100
   189b2:	70 e0       	ldi	r23, 0x00	; 0
   189b4:	0e 94 e6 e5 	call	0x1cbcc	; 0x1cbcc <__divmodhi4>
   189b8:	c7 df       	rcall	.-114    	; 0x18948 <lif_BIN2BCD>
   189ba:	f8 01       	movw	r30, r16
   189bc:	80 83       	st	Z, r24
   189be:	89 85       	ldd	r24, Y+9	; 0x09
   189c0:	8f 5f       	subi	r24, 0xFF	; 255
   189c2:	c2 df       	rcall	.-124    	; 0x18948 <lif_BIN2BCD>
   189c4:	f8 01       	movw	r30, r16
   189c6:	81 83       	std	Z+1, r24	; 0x01
   189c8:	8f 81       	ldd	r24, Y+7	; 0x07
   189ca:	be df       	rcall	.-132    	; 0x18948 <lif_BIN2BCD>
   189cc:	f8 01       	movw	r30, r16
   189ce:	82 83       	std	Z+2, r24	; 0x02
   189d0:	8d 81       	ldd	r24, Y+5	; 0x05
   189d2:	ba df       	rcall	.-140    	; 0x18948 <lif_BIN2BCD>
   189d4:	f8 01       	movw	r30, r16
   189d6:	83 83       	std	Z+3, r24	; 0x03
   189d8:	8b 81       	ldd	r24, Y+3	; 0x03
   189da:	b6 df       	rcall	.-148    	; 0x18948 <lif_BIN2BCD>
   189dc:	f8 01       	movw	r30, r16
   189de:	84 83       	std	Z+4, r24	; 0x04
   189e0:	89 81       	ldd	r24, Y+1	; 0x01
   189e2:	b2 df       	rcall	.-156    	; 0x18948 <lif_BIN2BCD>
   189e4:	f8 01       	movw	r30, r16
   189e6:	85 83       	std	Z+5, r24	; 0x05
   189e8:	6a 96       	adiw	r28, 0x1a	; 26
   189ea:	e4 e0       	ldi	r30, 0x04	; 4
   189ec:	0c 94 90 e6 	jmp	0x1cd20	; 0x1cd20 <__epilogue_restores__+0x1c>

000189f0 <lif_lifbcd2time>:
   189f0:	a6 e1       	ldi	r26, 0x16	; 22
   189f2:	b0 e0       	ldi	r27, 0x00	; 0
   189f4:	ee ef       	ldi	r30, 0xFE	; 254
   189f6:	f4 ec       	ldi	r31, 0xC4	; 196
   189f8:	0c 94 6e e6 	jmp	0x1ccdc	; 0x1ccdc <__prologue_saves__+0x10>
   189fc:	8c 01       	movw	r16, r24
   189fe:	7c 01       	movw	r14, r24
   18a00:	5c 01       	movw	r10, r24
   18a02:	26 e0       	ldi	r18, 0x06	; 6
   18a04:	a2 0e       	add	r10, r18
   18a06:	b1 1c       	adc	r11, r1
   18a08:	cc 24       	eor	r12, r12
   18a0a:	c3 94       	inc	r12
   18a0c:	d1 2c       	mov	r13, r1
   18a0e:	f7 01       	movw	r30, r14
   18a10:	81 91       	ld	r24, Z+
   18a12:	7f 01       	movw	r14, r30
   18a14:	a0 df       	rcall	.-192    	; 0x18956 <lif_BCD2BIN>
   18a16:	89 2b       	or	r24, r25
   18a18:	11 f0       	breq	.+4      	; 0x18a1e <lif_lifbcd2time+0x2e>
   18a1a:	c1 2c       	mov	r12, r1
   18a1c:	d1 2c       	mov	r13, r1
   18a1e:	ea 14       	cp	r14, r10
   18a20:	fb 04       	cpc	r15, r11
   18a22:	a9 f7       	brne	.-22     	; 0x18a0e <lif_lifbcd2time+0x1e>
   18a24:	c1 14       	cp	r12, r1
   18a26:	d1 04       	cpc	r13, r1
   18a28:	61 f5       	brne	.+88     	; 0x18a82 <lif_lifbcd2time+0x92>
   18a2a:	f8 01       	movw	r30, r16
   18a2c:	80 81       	ld	r24, Z
   18a2e:	93 df       	rcall	.-218    	; 0x18956 <lif_BCD2BIN>
   18a30:	7c 01       	movw	r14, r24
   18a32:	f8 01       	movw	r30, r16
   18a34:	81 81       	ldd	r24, Z+1	; 0x01
   18a36:	8f df       	rcall	.-226    	; 0x18956 <lif_BCD2BIN>
   18a38:	01 97       	sbiw	r24, 0x01	; 1
   18a3a:	f6 e4       	ldi	r31, 0x46	; 70
   18a3c:	ef 16       	cp	r14, r31
   18a3e:	f1 04       	cpc	r15, r1
   18a40:	1c f4       	brge	.+6      	; 0x18a48 <lif_lifbcd2time+0x58>
   18a42:	24 e6       	ldi	r18, 0x64	; 100
   18a44:	e2 0e       	add	r14, r18
   18a46:	f1 1c       	adc	r15, r1
   18a48:	fc 86       	std	Y+12, r15	; 0x0c
   18a4a:	eb 86       	std	Y+11, r14	; 0x0b
   18a4c:	9a 87       	std	Y+10, r25	; 0x0a
   18a4e:	89 87       	std	Y+9, r24	; 0x09
   18a50:	f8 01       	movw	r30, r16
   18a52:	82 81       	ldd	r24, Z+2	; 0x02
   18a54:	80 df       	rcall	.-256    	; 0x18956 <lif_BCD2BIN>
   18a56:	98 87       	std	Y+8, r25	; 0x08
   18a58:	8f 83       	std	Y+7, r24	; 0x07
   18a5a:	f8 01       	movw	r30, r16
   18a5c:	83 81       	ldd	r24, Z+3	; 0x03
   18a5e:	7b df       	rcall	.-266    	; 0x18956 <lif_BCD2BIN>
   18a60:	9e 83       	std	Y+6, r25	; 0x06
   18a62:	8d 83       	std	Y+5, r24	; 0x05
   18a64:	f8 01       	movw	r30, r16
   18a66:	84 81       	ldd	r24, Z+4	; 0x04
   18a68:	76 df       	rcall	.-276    	; 0x18956 <lif_BCD2BIN>
   18a6a:	9c 83       	std	Y+4, r25	; 0x04
   18a6c:	8b 83       	std	Y+3, r24	; 0x03
   18a6e:	f8 01       	movw	r30, r16
   18a70:	85 81       	ldd	r24, Z+5	; 0x05
   18a72:	71 df       	rcall	.-286    	; 0x18956 <lif_BCD2BIN>
   18a74:	9a 83       	std	Y+2, r25	; 0x02
   18a76:	89 83       	std	Y+1, r24	; 0x01
   18a78:	ce 01       	movw	r24, r28
   18a7a:	01 96       	adiw	r24, 0x01	; 1
   18a7c:	0e 94 0c 3a 	call	0x7418	; 0x7418 <timegm>
   18a80:	03 c0       	rjmp	.+6      	; 0x18a88 <lif_lifbcd2time+0x98>
   18a82:	60 e0       	ldi	r22, 0x00	; 0
   18a84:	70 e0       	ldi	r23, 0x00	; 0
   18a86:	cb 01       	movw	r24, r22
   18a88:	66 96       	adiw	r28, 0x16	; 22
   18a8a:	ea e0       	ldi	r30, 0x0A	; 10
   18a8c:	0c 94 8a e6 	jmp	0x1cd14	; 0x1cd14 <__epilogue_restores__+0x10>

00018a90 <lif_ctime_gmt>:
   18a90:	a6 e1       	ldi	r26, 0x16	; 22
   18a92:	b0 e0       	ldi	r27, 0x00	; 0
   18a94:	ee e4       	ldi	r30, 0x4E	; 78
   18a96:	f5 ec       	ldi	r31, 0xC5	; 197
   18a98:	0c 94 74 e6 	jmp	0x1cce8	; 0x1cce8 <__prologue_saves__+0x1c>
   18a9c:	20 e2       	ldi	r18, 0x20	; 32
   18a9e:	e0 ec       	ldi	r30, 0xC0	; 192
   18aa0:	f9 e1       	ldi	r31, 0x19	; 25
   18aa2:	df 01       	movw	r26, r30
   18aa4:	1d 92       	st	X+, r1
   18aa6:	2a 95       	dec	r18
   18aa8:	e9 f7       	brne	.-6      	; 0x18aa4 <lif_ctime_gmt+0x14>
   18aaa:	be 01       	movw	r22, r28
   18aac:	6f 5f       	subi	r22, 0xFF	; 255
   18aae:	7f 4f       	sbci	r23, 0xFF	; 255
   18ab0:	0e 94 38 37 	call	0x6e70	; 0x6e70 <gmtime_r>
   18ab4:	60 ec       	ldi	r22, 0xC0	; 192
   18ab6:	79 e1       	ldi	r23, 0x19	; 25
   18ab8:	0e 94 68 3c 	call	0x78d0	; 0x78d0 <asctime_r>
   18abc:	8c 01       	movw	r16, r24
   18abe:	0e 94 c4 31 	call	0x6388	; 0x6388 <trim_tail>
   18ac2:	c8 01       	movw	r24, r16
   18ac4:	66 96       	adiw	r28, 0x16	; 22
   18ac6:	e4 e0       	ldi	r30, 0x04	; 4
   18ac8:	0c 94 90 e6 	jmp	0x1cd20	; 0x1cd20 <__epilogue_restores__+0x1c>

00018acc <lif_lifbcd2timestr>:
   18acc:	a4 e0       	ldi	r26, 0x04	; 4
   18ace:	b0 e0       	ldi	r27, 0x00	; 0
   18ad0:	ec e6       	ldi	r30, 0x6C	; 108
   18ad2:	f5 ec       	ldi	r31, 0xC5	; 197
   18ad4:	0c 94 76 e6 	jmp	0x1ccec	; 0x1ccec <__prologue_saves__+0x20>
   18ad8:	20 e2       	ldi	r18, 0x20	; 32
   18ada:	e0 ea       	ldi	r30, 0xA0	; 160
   18adc:	f9 e1       	ldi	r31, 0x19	; 25
   18ade:	df 01       	movw	r26, r30
   18ae0:	1d 92       	st	X+, r1
   18ae2:	2a 95       	dec	r18
   18ae4:	e9 f7       	brne	.-6      	; 0x18ae0 <lif_lifbcd2timestr+0x14>
   18ae6:	84 df       	rcall	.-248    	; 0x189f0 <lif_lifbcd2time>
   18ae8:	69 83       	std	Y+1, r22	; 0x01
   18aea:	7a 83       	std	Y+2, r23	; 0x02
   18aec:	8b 83       	std	Y+3, r24	; 0x03
   18aee:	9c 83       	std	Y+4, r25	; 0x04
   18af0:	67 2b       	or	r22, r23
   18af2:	68 2b       	or	r22, r24
   18af4:	69 2b       	or	r22, r25
   18af6:	29 f0       	breq	.+10     	; 0x18b02 <lif_lifbcd2timestr+0x36>
   18af8:	ce 01       	movw	r24, r28
   18afa:	01 96       	adiw	r24, 0x01	; 1
   18afc:	c9 df       	rcall	.-110    	; 0x18a90 <lif_ctime_gmt>
   18afe:	bc 01       	movw	r22, r24
   18b00:	02 c0       	rjmp	.+4      	; 0x18b06 <lif_lifbcd2timestr+0x3a>
   18b02:	6d ed       	ldi	r22, 0xDD	; 221
   18b04:	75 e1       	ldi	r23, 0x15	; 21
   18b06:	80 ea       	ldi	r24, 0xA0	; 160
   18b08:	99 e1       	ldi	r25, 0x19	; 25
   18b0a:	0e 94 e6 30 	call	0x61cc	; 0x61cc <strcpy>
   18b0e:	80 ea       	ldi	r24, 0xA0	; 160
   18b10:	99 e1       	ldi	r25, 0x19	; 25
   18b12:	24 96       	adiw	r28, 0x04	; 4
   18b14:	e2 e0       	ldi	r30, 0x02	; 2
   18b16:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00018b1a <lif_image_clear>:
   18b1a:	20 e7       	ldi	r18, 0x70	; 112
   18b1c:	fc 01       	movw	r30, r24
   18b1e:	11 92       	st	Z+, r1
   18b20:	2a 95       	dec	r18
   18b22:	e9 f7       	brne	.-6      	; 0x18b1e <lif_image_clear+0x4>
   18b24:	08 95       	ret

00018b26 <lif_dir_clear>:
   18b26:	81 5b       	subi	r24, 0xB1	; 177
   18b28:	9f 4f       	sbci	r25, 0xFF	; 255
   18b2a:	21 e2       	ldi	r18, 0x21	; 33
   18b2c:	fc 01       	movw	r30, r24
   18b2e:	11 92       	st	Z+, r1
   18b30:	2a 95       	dec	r18
   18b32:	e9 f7       	brne	.-6      	; 0x18b2e <lif_dir_clear+0x8>
   18b34:	08 95       	ret

00018b36 <lif_vol_clear>:
   18b36:	84 96       	adiw	r24, 0x24	; 36
   18b38:	2b e2       	ldi	r18, 0x2B	; 43
   18b3a:	fc 01       	movw	r30, r24
   18b3c:	11 92       	st	Z+, r1
   18b3e:	2a 95       	dec	r18
   18b40:	e9 f7       	brne	.-6      	; 0x18b3c <lif_vol_clear+0x6>
   18b42:	08 95       	ret

00018b44 <lif_dump_vol>:
   18b44:	cf 93       	push	r28
   18b46:	df 93       	push	r29
   18b48:	ad b7       	in	r26, 0x3d	; 61
   18b4a:	be b7       	in	r27, 0x3e	; 62
   18b4c:	17 97       	sbiw	r26, 0x07	; 7
   18b4e:	0f b6       	in	r0, 0x3f	; 63
   18b50:	f8 94       	cli
   18b52:	be bf       	out	0x3e, r27	; 62
   18b54:	0f be       	out	0x3f, r0	; 63
   18b56:	ad bf       	out	0x3d, r26	; 61
   18b58:	ec 01       	movw	r28, r24
   18b5a:	ed b7       	in	r30, 0x3d	; 61
   18b5c:	fe b7       	in	r31, 0x3e	; 62
   18b5e:	75 83       	std	Z+5, r23	; 0x05
   18b60:	64 83       	std	Z+4, r22	; 0x04
   18b62:	86 ec       	ldi	r24, 0xC6	; 198
   18b64:	92 e4       	ldi	r25, 0x42	; 66
   18b66:	a0 e0       	ldi	r26, 0x00	; 0
   18b68:	81 83       	std	Z+1, r24	; 0x01
   18b6a:	92 83       	std	Z+2, r25	; 0x02
   18b6c:	a3 83       	std	Z+3, r26	; 0x03
   18b6e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18b72:	88 81       	ld	r24, Y
   18b74:	99 81       	ldd	r25, Y+1	; 0x01
   18b76:	ed b7       	in	r30, 0x3d	; 61
   18b78:	fe b7       	in	r31, 0x3e	; 62
   18b7a:	95 83       	std	Z+5, r25	; 0x05
   18b7c:	84 83       	std	Z+4, r24	; 0x04
   18b7e:	8c ea       	ldi	r24, 0xAC	; 172
   18b80:	92 e4       	ldi	r25, 0x42	; 66
   18b82:	a0 e0       	ldi	r26, 0x00	; 0
   18b84:	81 83       	std	Z+1, r24	; 0x01
   18b86:	92 83       	std	Z+2, r25	; 0x02
   18b88:	a3 83       	std	Z+3, r26	; 0x03
   18b8a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18b8e:	8c 81       	ldd	r24, Y+4	; 0x04
   18b90:	9d 81       	ldd	r25, Y+5	; 0x05
   18b92:	ae 81       	ldd	r26, Y+6	; 0x06
   18b94:	bf 81       	ldd	r27, Y+7	; 0x07
   18b96:	ed b7       	in	r30, 0x3d	; 61
   18b98:	fe b7       	in	r31, 0x3e	; 62
   18b9a:	84 83       	std	Z+4, r24	; 0x04
   18b9c:	95 83       	std	Z+5, r25	; 0x05
   18b9e:	a6 83       	std	Z+6, r26	; 0x06
   18ba0:	b7 83       	std	Z+7, r27	; 0x07
   18ba2:	8f e8       	ldi	r24, 0x8F	; 143
   18ba4:	92 e4       	ldi	r25, 0x42	; 66
   18ba6:	a0 e0       	ldi	r26, 0x00	; 0
   18ba8:	81 83       	std	Z+1, r24	; 0x01
   18baa:	92 83       	std	Z+2, r25	; 0x02
   18bac:	a3 83       	std	Z+3, r26	; 0x03
   18bae:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18bb2:	88 85       	ldd	r24, Y+8	; 0x08
   18bb4:	99 85       	ldd	r25, Y+9	; 0x09
   18bb6:	aa 85       	ldd	r26, Y+10	; 0x0a
   18bb8:	bb 85       	ldd	r27, Y+11	; 0x0b
   18bba:	ed b7       	in	r30, 0x3d	; 61
   18bbc:	fe b7       	in	r31, 0x3e	; 62
   18bbe:	84 83       	std	Z+4, r24	; 0x04
   18bc0:	95 83       	std	Z+5, r25	; 0x05
   18bc2:	a6 83       	std	Z+6, r26	; 0x06
   18bc4:	b7 83       	std	Z+7, r27	; 0x07
   18bc6:	82 e7       	ldi	r24, 0x72	; 114
   18bc8:	92 e4       	ldi	r25, 0x42	; 66
   18bca:	a0 e0       	ldi	r26, 0x00	; 0
   18bcc:	81 83       	std	Z+1, r24	; 0x01
   18bce:	92 83       	std	Z+2, r25	; 0x02
   18bd0:	a3 83       	std	Z+3, r26	; 0x03
   18bd2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18bd6:	8c 85       	ldd	r24, Y+12	; 0x0c
   18bd8:	9d 85       	ldd	r25, Y+13	; 0x0d
   18bda:	ae 85       	ldd	r26, Y+14	; 0x0e
   18bdc:	bf 85       	ldd	r27, Y+15	; 0x0f
   18bde:	ed b7       	in	r30, 0x3d	; 61
   18be0:	fe b7       	in	r31, 0x3e	; 62
   18be2:	84 83       	std	Z+4, r24	; 0x04
   18be4:	95 83       	std	Z+5, r25	; 0x05
   18be6:	a6 83       	std	Z+6, r26	; 0x06
   18be8:	b7 83       	std	Z+7, r27	; 0x07
   18bea:	85 e5       	ldi	r24, 0x55	; 85
   18bec:	92 e4       	ldi	r25, 0x42	; 66
   18bee:	a0 e0       	ldi	r26, 0x00	; 0
   18bf0:	81 83       	std	Z+1, r24	; 0x01
   18bf2:	92 83       	std	Z+2, r25	; 0x02
   18bf4:	a3 83       	std	Z+3, r26	; 0x03
   18bf6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18bfa:	88 89       	ldd	r24, Y+16	; 0x10
   18bfc:	99 89       	ldd	r25, Y+17	; 0x11
   18bfe:	aa 89       	ldd	r26, Y+18	; 0x12
   18c00:	bb 89       	ldd	r27, Y+19	; 0x13
   18c02:	ed b7       	in	r30, 0x3d	; 61
   18c04:	fe b7       	in	r31, 0x3e	; 62
   18c06:	84 83       	std	Z+4, r24	; 0x04
   18c08:	95 83       	std	Z+5, r25	; 0x05
   18c0a:	a6 83       	std	Z+6, r26	; 0x06
   18c0c:	b7 83       	std	Z+7, r27	; 0x07
   18c0e:	88 e3       	ldi	r24, 0x38	; 56
   18c10:	92 e4       	ldi	r25, 0x42	; 66
   18c12:	a0 e0       	ldi	r26, 0x00	; 0
   18c14:	81 83       	std	Z+1, r24	; 0x01
   18c16:	92 83       	std	Z+2, r25	; 0x02
   18c18:	a3 83       	std	Z+3, r26	; 0x03
   18c1a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18c1e:	8c 89       	ldd	r24, Y+20	; 0x14
   18c20:	9d 89       	ldd	r25, Y+21	; 0x15
   18c22:	ae 89       	ldd	r26, Y+22	; 0x16
   18c24:	bf 89       	ldd	r27, Y+23	; 0x17
   18c26:	ed b7       	in	r30, 0x3d	; 61
   18c28:	fe b7       	in	r31, 0x3e	; 62
   18c2a:	84 83       	std	Z+4, r24	; 0x04
   18c2c:	95 83       	std	Z+5, r25	; 0x05
   18c2e:	a6 83       	std	Z+6, r26	; 0x06
   18c30:	b7 83       	std	Z+7, r27	; 0x07
   18c32:	8b e1       	ldi	r24, 0x1B	; 27
   18c34:	92 e4       	ldi	r25, 0x42	; 66
   18c36:	a0 e0       	ldi	r26, 0x00	; 0
   18c38:	81 83       	std	Z+1, r24	; 0x01
   18c3a:	92 83       	std	Z+2, r25	; 0x02
   18c3c:	a3 83       	std	Z+3, r26	; 0x03
   18c3e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18c42:	88 8d       	ldd	r24, Y+24	; 0x18
   18c44:	99 8d       	ldd	r25, Y+25	; 0x19
   18c46:	aa 8d       	ldd	r26, Y+26	; 0x1a
   18c48:	bb 8d       	ldd	r27, Y+27	; 0x1b
   18c4a:	ed b7       	in	r30, 0x3d	; 61
   18c4c:	fe b7       	in	r31, 0x3e	; 62
   18c4e:	84 83       	std	Z+4, r24	; 0x04
   18c50:	95 83       	std	Z+5, r25	; 0x05
   18c52:	a6 83       	std	Z+6, r26	; 0x06
   18c54:	b7 83       	std	Z+7, r27	; 0x07
   18c56:	8e ef       	ldi	r24, 0xFE	; 254
   18c58:	91 e4       	ldi	r25, 0x41	; 65
   18c5a:	a0 e0       	ldi	r26, 0x00	; 0
   18c5c:	81 83       	std	Z+1, r24	; 0x01
   18c5e:	92 83       	std	Z+2, r25	; 0x02
   18c60:	a3 83       	std	Z+3, r26	; 0x03
   18c62:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18c66:	8c 8d       	ldd	r24, Y+28	; 0x1c
   18c68:	9d 8d       	ldd	r25, Y+29	; 0x1d
   18c6a:	09 2e       	mov	r0, r25
   18c6c:	00 0c       	add	r0, r0
   18c6e:	aa 0b       	sbc	r26, r26
   18c70:	bb 0b       	sbc	r27, r27
   18c72:	ed b7       	in	r30, 0x3d	; 61
   18c74:	fe b7       	in	r31, 0x3e	; 62
   18c76:	84 83       	std	Z+4, r24	; 0x04
   18c78:	95 83       	std	Z+5, r25	; 0x05
   18c7a:	a6 83       	std	Z+6, r26	; 0x06
   18c7c:	b7 83       	std	Z+7, r27	; 0x07
   18c7e:	81 ee       	ldi	r24, 0xE1	; 225
   18c80:	91 e4       	ldi	r25, 0x41	; 65
   18c82:	a0 e0       	ldi	r26, 0x00	; 0
   18c84:	81 83       	std	Z+1, r24	; 0x01
   18c86:	92 83       	std	Z+2, r25	; 0x02
   18c88:	a3 83       	std	Z+3, r26	; 0x03
   18c8a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18c8e:	8e 8d       	ldd	r24, Y+30	; 0x1e
   18c90:	9f 8d       	ldd	r25, Y+31	; 0x1f
   18c92:	09 2e       	mov	r0, r25
   18c94:	00 0c       	add	r0, r0
   18c96:	aa 0b       	sbc	r26, r26
   18c98:	bb 0b       	sbc	r27, r27
   18c9a:	ed b7       	in	r30, 0x3d	; 61
   18c9c:	fe b7       	in	r31, 0x3e	; 62
   18c9e:	84 83       	std	Z+4, r24	; 0x04
   18ca0:	95 83       	std	Z+5, r25	; 0x05
   18ca2:	a6 83       	std	Z+6, r26	; 0x06
   18ca4:	b7 83       	std	Z+7, r27	; 0x07
   18ca6:	84 ec       	ldi	r24, 0xC4	; 196
   18ca8:	91 e4       	ldi	r25, 0x41	; 65
   18caa:	a0 e0       	ldi	r26, 0x00	; 0
   18cac:	81 83       	std	Z+1, r24	; 0x01
   18cae:	92 83       	std	Z+2, r25	; 0x02
   18cb0:	a3 83       	std	Z+3, r26	; 0x03
   18cb2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18cb6:	ce 01       	movw	r24, r28
   18cb8:	86 96       	adiw	r24, 0x26	; 38
   18cba:	ed b7       	in	r30, 0x3d	; 61
   18cbc:	fe b7       	in	r31, 0x3e	; 62
   18cbe:	95 83       	std	Z+5, r25	; 0x05
   18cc0:	84 83       	std	Z+4, r24	; 0x04
   18cc2:	8a ea       	ldi	r24, 0xAA	; 170
   18cc4:	91 e4       	ldi	r25, 0x41	; 65
   18cc6:	a0 e0       	ldi	r26, 0x00	; 0
   18cc8:	81 83       	std	Z+1, r24	; 0x01
   18cca:	92 83       	std	Z+2, r25	; 0x02
   18ccc:	a3 83       	std	Z+3, r26	; 0x03
   18cce:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18cd2:	8c a1       	ldd	r24, Y+36	; 0x24
   18cd4:	9d a1       	ldd	r25, Y+37	; 0x25
   18cd6:	ed b7       	in	r30, 0x3d	; 61
   18cd8:	fe b7       	in	r31, 0x3e	; 62
   18cda:	95 83       	std	Z+5, r25	; 0x05
   18cdc:	84 83       	std	Z+4, r24	; 0x04
   18cde:	8e e8       	ldi	r24, 0x8E	; 142
   18ce0:	91 e4       	ldi	r25, 0x41	; 65
   18ce2:	a0 e0       	ldi	r26, 0x00	; 0
   18ce4:	81 83       	std	Z+1, r24	; 0x01
   18ce6:	92 83       	std	Z+2, r25	; 0x02
   18ce8:	a3 83       	std	Z+3, r26	; 0x03
   18cea:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18cee:	8d a5       	ldd	r24, Y+45	; 0x2d
   18cf0:	9e a5       	ldd	r25, Y+46	; 0x2e
   18cf2:	af a5       	ldd	r26, Y+47	; 0x2f
   18cf4:	b8 a9       	ldd	r27, Y+48	; 0x30
   18cf6:	ed b7       	in	r30, 0x3d	; 61
   18cf8:	fe b7       	in	r31, 0x3e	; 62
   18cfa:	84 83       	std	Z+4, r24	; 0x04
   18cfc:	95 83       	std	Z+5, r25	; 0x05
   18cfe:	a6 83       	std	Z+6, r26	; 0x06
   18d00:	b7 83       	std	Z+7, r27	; 0x07
   18d02:	81 e7       	ldi	r24, 0x71	; 113
   18d04:	91 e4       	ldi	r25, 0x41	; 65
   18d06:	a0 e0       	ldi	r26, 0x00	; 0
   18d08:	81 83       	std	Z+1, r24	; 0x01
   18d0a:	92 83       	std	Z+2, r25	; 0x02
   18d0c:	a3 83       	std	Z+3, r26	; 0x03
   18d0e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18d12:	8d a9       	ldd	r24, Y+53	; 0x35
   18d14:	9e a9       	ldd	r25, Y+54	; 0x36
   18d16:	af a9       	ldd	r26, Y+55	; 0x37
   18d18:	b8 ad       	ldd	r27, Y+56	; 0x38
   18d1a:	ed b7       	in	r30, 0x3d	; 61
   18d1c:	fe b7       	in	r31, 0x3e	; 62
   18d1e:	84 83       	std	Z+4, r24	; 0x04
   18d20:	95 83       	std	Z+5, r25	; 0x05
   18d22:	a6 83       	std	Z+6, r26	; 0x06
   18d24:	b7 83       	std	Z+7, r27	; 0x07
   18d26:	84 e5       	ldi	r24, 0x54	; 84
   18d28:	91 e4       	ldi	r25, 0x41	; 65
   18d2a:	a0 e0       	ldi	r26, 0x00	; 0
   18d2c:	81 83       	std	Z+1, r24	; 0x01
   18d2e:	92 83       	std	Z+2, r25	; 0x02
   18d30:	a3 83       	std	Z+3, r26	; 0x03
   18d32:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18d36:	89 a9       	ldd	r24, Y+49	; 0x31
   18d38:	9a a9       	ldd	r25, Y+50	; 0x32
   18d3a:	ed b7       	in	r30, 0x3d	; 61
   18d3c:	fe b7       	in	r31, 0x3e	; 62
   18d3e:	95 83       	std	Z+5, r25	; 0x05
   18d40:	84 83       	std	Z+4, r24	; 0x04
   18d42:	88 e3       	ldi	r24, 0x38	; 56
   18d44:	91 e4       	ldi	r25, 0x41	; 65
   18d46:	a0 e0       	ldi	r26, 0x00	; 0
   18d48:	81 83       	std	Z+1, r24	; 0x01
   18d4a:	92 83       	std	Z+2, r25	; 0x02
   18d4c:	a3 83       	std	Z+3, r26	; 0x03
   18d4e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18d52:	89 ad       	ldd	r24, Y+57	; 0x39
   18d54:	9a ad       	ldd	r25, Y+58	; 0x3a
   18d56:	ed b7       	in	r30, 0x3d	; 61
   18d58:	fe b7       	in	r31, 0x3e	; 62
   18d5a:	95 83       	std	Z+5, r25	; 0x05
   18d5c:	84 83       	std	Z+4, r24	; 0x04
   18d5e:	8c e1       	ldi	r24, 0x1C	; 28
   18d60:	91 e4       	ldi	r25, 0x41	; 65
   18d62:	a0 e0       	ldi	r26, 0x00	; 0
   18d64:	81 83       	std	Z+1, r24	; 0x01
   18d66:	92 83       	std	Z+2, r25	; 0x02
   18d68:	a3 83       	std	Z+3, r26	; 0x03
   18d6a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18d6e:	ce 01       	movw	r24, r28
   18d70:	87 5b       	subi	r24, 0xB7	; 183
   18d72:	9f 4f       	sbci	r25, 0xFF	; 255
   18d74:	ab de       	rcall	.-682    	; 0x18acc <lif_lifbcd2timestr>
   18d76:	ed b7       	in	r30, 0x3d	; 61
   18d78:	fe b7       	in	r31, 0x3e	; 62
   18d7a:	95 83       	std	Z+5, r25	; 0x05
   18d7c:	84 83       	std	Z+4, r24	; 0x04
   18d7e:	82 e0       	ldi	r24, 0x02	; 2
   18d80:	91 e4       	ldi	r25, 0x41	; 65
   18d82:	a0 e0       	ldi	r26, 0x00	; 0
   18d84:	81 83       	std	Z+1, r24	; 0x01
   18d86:	92 83       	std	Z+2, r25	; 0x02
   18d88:	a3 83       	std	Z+3, r26	; 0x03
   18d8a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18d8e:	ce 01       	movw	r24, r28
   18d90:	81 5b       	subi	r24, 0xB1	; 177
   18d92:	9f 4f       	sbci	r25, 0xFF	; 255
   18d94:	ed b7       	in	r30, 0x3d	; 61
   18d96:	fe b7       	in	r31, 0x3e	; 62
   18d98:	95 83       	std	Z+5, r25	; 0x05
   18d9a:	84 83       	std	Z+4, r24	; 0x04
   18d9c:	88 ee       	ldi	r24, 0xE8	; 232
   18d9e:	90 e4       	ldi	r25, 0x40	; 64
   18da0:	a0 e0       	ldi	r26, 0x00	; 0
   18da2:	81 83       	std	Z+1, r24	; 0x01
   18da4:	92 83       	std	Z+2, r25	; 0x02
   18da6:	a3 83       	std	Z+3, r26	; 0x03
   18da8:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18dac:	fe 01       	movw	r30, r28
   18dae:	e6 5a       	subi	r30, 0xA6	; 166
   18db0:	ff 4f       	sbci	r31, 0xFF	; 255
   18db2:	80 81       	ld	r24, Z
   18db4:	91 81       	ldd	r25, Z+1	; 0x01
   18db6:	ed b7       	in	r30, 0x3d	; 61
   18db8:	fe b7       	in	r31, 0x3e	; 62
   18dba:	95 83       	std	Z+5, r25	; 0x05
   18dbc:	84 83       	std	Z+4, r24	; 0x04
   18dbe:	8c ec       	ldi	r24, 0xCC	; 204
   18dc0:	90 e4       	ldi	r25, 0x40	; 64
   18dc2:	a0 e0       	ldi	r26, 0x00	; 0
   18dc4:	81 83       	std	Z+1, r24	; 0x01
   18dc6:	92 83       	std	Z+2, r25	; 0x02
   18dc8:	a3 83       	std	Z+3, r26	; 0x03
   18dca:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18dce:	fe 01       	movw	r30, r28
   18dd0:	e6 59       	subi	r30, 0x96	; 150
   18dd2:	ff 4f       	sbci	r31, 0xFF	; 255
   18dd4:	80 81       	ld	r24, Z
   18dd6:	91 81       	ldd	r25, Z+1	; 0x01
   18dd8:	ed b7       	in	r30, 0x3d	; 61
   18dda:	fe b7       	in	r31, 0x3e	; 62
   18ddc:	95 83       	std	Z+5, r25	; 0x05
   18dde:	84 83       	std	Z+4, r24	; 0x04
   18de0:	80 eb       	ldi	r24, 0xB0	; 176
   18de2:	90 e4       	ldi	r25, 0x40	; 64
   18de4:	a0 e0       	ldi	r26, 0x00	; 0
   18de6:	81 83       	std	Z+1, r24	; 0x01
   18de8:	92 83       	std	Z+2, r25	; 0x02
   18dea:	a3 83       	std	Z+3, r26	; 0x03
   18dec:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18df0:	fe 01       	movw	r30, r28
   18df2:	e4 5a       	subi	r30, 0xA4	; 164
   18df4:	ff 4f       	sbci	r31, 0xFF	; 255
   18df6:	80 81       	ld	r24, Z
   18df8:	91 81       	ldd	r25, Z+1	; 0x01
   18dfa:	a2 81       	ldd	r26, Z+2	; 0x02
   18dfc:	b3 81       	ldd	r27, Z+3	; 0x03
   18dfe:	ed b7       	in	r30, 0x3d	; 61
   18e00:	fe b7       	in	r31, 0x3e	; 62
   18e02:	84 83       	std	Z+4, r24	; 0x04
   18e04:	95 83       	std	Z+5, r25	; 0x05
   18e06:	a6 83       	std	Z+6, r26	; 0x06
   18e08:	b7 83       	std	Z+7, r27	; 0x07
   18e0a:	83 e9       	ldi	r24, 0x93	; 147
   18e0c:	90 e4       	ldi	r25, 0x40	; 64
   18e0e:	a0 e0       	ldi	r26, 0x00	; 0
   18e10:	81 83       	std	Z+1, r24	; 0x01
   18e12:	92 83       	std	Z+2, r25	; 0x02
   18e14:	a3 83       	std	Z+3, r26	; 0x03
   18e16:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18e1a:	fe 01       	movw	r30, r28
   18e1c:	e0 5a       	subi	r30, 0xA0	; 160
   18e1e:	ff 4f       	sbci	r31, 0xFF	; 255
   18e20:	80 81       	ld	r24, Z
   18e22:	91 81       	ldd	r25, Z+1	; 0x01
   18e24:	a2 81       	ldd	r26, Z+2	; 0x02
   18e26:	b3 81       	ldd	r27, Z+3	; 0x03
   18e28:	ed b7       	in	r30, 0x3d	; 61
   18e2a:	fe b7       	in	r31, 0x3e	; 62
   18e2c:	84 83       	std	Z+4, r24	; 0x04
   18e2e:	95 83       	std	Z+5, r25	; 0x05
   18e30:	a6 83       	std	Z+6, r26	; 0x06
   18e32:	b7 83       	std	Z+7, r27	; 0x07
   18e34:	86 e7       	ldi	r24, 0x76	; 118
   18e36:	90 e4       	ldi	r25, 0x40	; 64
   18e38:	a0 e0       	ldi	r26, 0x00	; 0
   18e3a:	81 83       	std	Z+1, r24	; 0x01
   18e3c:	92 83       	std	Z+2, r25	; 0x02
   18e3e:	a3 83       	std	Z+3, r26	; 0x03
   18e40:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18e44:	fe 01       	movw	r30, r28
   18e46:	e4 59       	subi	r30, 0x94	; 148
   18e48:	ff 4f       	sbci	r31, 0xFF	; 255
   18e4a:	80 81       	ld	r24, Z
   18e4c:	91 81       	ldd	r25, Z+1	; 0x01
   18e4e:	a0 e0       	ldi	r26, 0x00	; 0
   18e50:	b0 e0       	ldi	r27, 0x00	; 0
   18e52:	ed b7       	in	r30, 0x3d	; 61
   18e54:	fe b7       	in	r31, 0x3e	; 62
   18e56:	84 83       	std	Z+4, r24	; 0x04
   18e58:	95 83       	std	Z+5, r25	; 0x05
   18e5a:	a6 83       	std	Z+6, r26	; 0x06
   18e5c:	b7 83       	std	Z+7, r27	; 0x07
   18e5e:	89 e5       	ldi	r24, 0x59	; 89
   18e60:	90 e4       	ldi	r25, 0x40	; 64
   18e62:	a0 e0       	ldi	r26, 0x00	; 0
   18e64:	81 83       	std	Z+1, r24	; 0x01
   18e66:	92 83       	std	Z+2, r25	; 0x02
   18e68:	a3 83       	std	Z+3, r26	; 0x03
   18e6a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18e6e:	fe 01       	movw	r30, r28
   18e70:	e2 59       	subi	r30, 0x92	; 146
   18e72:	ff 4f       	sbci	r31, 0xFF	; 255
   18e74:	80 81       	ld	r24, Z
   18e76:	91 81       	ldd	r25, Z+1	; 0x01
   18e78:	ed b7       	in	r30, 0x3d	; 61
   18e7a:	fe b7       	in	r31, 0x3e	; 62
   18e7c:	95 83       	std	Z+5, r25	; 0x05
   18e7e:	84 83       	std	Z+4, r24	; 0x04
   18e80:	8d e3       	ldi	r24, 0x3D	; 61
   18e82:	90 e4       	ldi	r25, 0x40	; 64
   18e84:	a0 e0       	ldi	r26, 0x00	; 0
   18e86:	81 83       	std	Z+1, r24	; 0x01
   18e88:	92 83       	std	Z+2, r25	; 0x02
   18e8a:	a3 83       	std	Z+3, r26	; 0x03
   18e8c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18e90:	ce 01       	movw	r24, r28
   18e92:	8c 59       	subi	r24, 0x9C	; 156
   18e94:	9f 4f       	sbci	r25, 0xFF	; 255
   18e96:	1a de       	rcall	.-972    	; 0x18acc <lif_lifbcd2timestr>
   18e98:	ed b7       	in	r30, 0x3d	; 61
   18e9a:	fe b7       	in	r31, 0x3e	; 62
   18e9c:	95 83       	std	Z+5, r25	; 0x05
   18e9e:	84 83       	std	Z+4, r24	; 0x04
   18ea0:	83 e2       	ldi	r24, 0x23	; 35
   18ea2:	90 e4       	ldi	r25, 0x40	; 64
   18ea4:	a0 e0       	ldi	r26, 0x00	; 0
   18ea6:	81 83       	std	Z+1, r24	; 0x01
   18ea8:	92 83       	std	Z+2, r25	; 0x02
   18eaa:	a3 83       	std	Z+3, r26	; 0x03
   18eac:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18eb0:	81 e2       	ldi	r24, 0x21	; 33
   18eb2:	90 e4       	ldi	r25, 0x40	; 64
   18eb4:	a0 e0       	ldi	r26, 0x00	; 0
   18eb6:	ed b7       	in	r30, 0x3d	; 61
   18eb8:	fe b7       	in	r31, 0x3e	; 62
   18eba:	81 83       	std	Z+1, r24	; 0x01
   18ebc:	92 83       	std	Z+2, r25	; 0x02
   18ebe:	a3 83       	std	Z+3, r26	; 0x03
   18ec0:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18ec4:	cd b7       	in	r28, 0x3d	; 61
   18ec6:	de b7       	in	r29, 0x3e	; 62
   18ec8:	27 96       	adiw	r28, 0x07	; 7
   18eca:	e2 e0       	ldi	r30, 0x02	; 2
   18ecc:	0c 94 92 e6 	jmp	0x1cd24	; 0x1cd24 <__epilogue_restores__+0x20>

00018ed0 <lif_check_volume>:
   18ed0:	0f 93       	push	r16
   18ed2:	1f 93       	push	r17
   18ed4:	cf 93       	push	r28
   18ed6:	df 93       	push	r29
   18ed8:	ad b7       	in	r26, 0x3d	; 61
   18eda:	be b7       	in	r27, 0x3e	; 62
   18edc:	17 97       	sbiw	r26, 0x07	; 7
   18ede:	0f b6       	in	r0, 0x3f	; 63
   18ee0:	f8 94       	cli
   18ee2:	be bf       	out	0x3e, r27	; 62
   18ee4:	0f be       	out	0x3f, r0	; 63
   18ee6:	ad bf       	out	0x3d, r26	; 61
   18ee8:	ec 01       	movw	r28, r24
   18eea:	86 96       	adiw	r24, 0x26	; 38
   18eec:	e0 da       	rcall	.-2624   	; 0x184ae <lif_checkname>
   18eee:	89 2b       	or	r24, r25
   18ef0:	89 f4       	brne	.+34     	; 0x18f14 <lif_check_volume+0x44>
   18ef2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18ef6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18efa:	92 ff       	sbrs	r25, 2
   18efc:	0e c0       	rjmp	.+28     	; 0x18f1a <lif_check_volume+0x4a>
   18efe:	82 e0       	ldi	r24, 0x02	; 2
   18f00:	90 e4       	ldi	r25, 0x40	; 64
   18f02:	a0 e0       	ldi	r26, 0x00	; 0
   18f04:	ed b7       	in	r30, 0x3d	; 61
   18f06:	fe b7       	in	r31, 0x3e	; 62
   18f08:	81 83       	std	Z+1, r24	; 0x01
   18f0a:	92 83       	std	Z+2, r25	; 0x02
   18f0c:	a3 83       	std	Z+3, r26	; 0x03
   18f0e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18f12:	03 c0       	rjmp	.+6      	; 0x18f1a <lif_check_volume+0x4a>
   18f14:	81 e0       	ldi	r24, 0x01	; 1
   18f16:	90 e0       	ldi	r25, 0x00	; 0
   18f18:	02 c0       	rjmp	.+4      	; 0x18f1e <lif_check_volume+0x4e>
   18f1a:	80 e0       	ldi	r24, 0x00	; 0
   18f1c:	90 e0       	ldi	r25, 0x00	; 0
   18f1e:	29 a9       	ldd	r18, Y+49	; 0x31
   18f20:	3a a9       	ldd	r19, Y+50	; 0x32
   18f22:	21 15       	cp	r18, r1
   18f24:	f0 e1       	ldi	r31, 0x10	; 16
   18f26:	3f 07       	cpc	r19, r31
   18f28:	a1 f0       	breq	.+40     	; 0x18f52 <lif_check_volume+0x82>
   18f2a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18f2e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18f32:	92 ff       	sbrs	r25, 2
   18f34:	0c c0       	rjmp	.+24     	; 0x18f4e <lif_check_volume+0x7e>
   18f36:	ed b7       	in	r30, 0x3d	; 61
   18f38:	fe b7       	in	r31, 0x3e	; 62
   18f3a:	35 83       	std	Z+5, r19	; 0x05
   18f3c:	24 83       	std	Z+4, r18	; 0x04
   18f3e:	89 ec       	ldi	r24, 0xC9	; 201
   18f40:	9f e3       	ldi	r25, 0x3F	; 63
   18f42:	a0 e0       	ldi	r26, 0x00	; 0
   18f44:	81 83       	std	Z+1, r24	; 0x01
   18f46:	92 83       	std	Z+2, r25	; 0x02
   18f48:	a3 83       	std	Z+3, r26	; 0x03
   18f4a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18f4e:	80 e0       	ldi	r24, 0x00	; 0
   18f50:	90 e0       	ldi	r25, 0x00	; 0
   18f52:	29 ad       	ldd	r18, Y+57	; 0x39
   18f54:	3a ad       	ldd	r19, Y+58	; 0x3a
   18f56:	22 30       	cpi	r18, 0x02	; 2
   18f58:	31 05       	cpc	r19, r1
   18f5a:	a0 f0       	brcs	.+40     	; 0x18f84 <lif_check_volume+0xb4>
   18f5c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18f60:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18f64:	92 ff       	sbrs	r25, 2
   18f66:	0c c0       	rjmp	.+24     	; 0x18f80 <lif_check_volume+0xb0>
   18f68:	ed b7       	in	r30, 0x3d	; 61
   18f6a:	fe b7       	in	r31, 0x3e	; 62
   18f6c:	35 83       	std	Z+5, r19	; 0x05
   18f6e:	24 83       	std	Z+4, r18	; 0x04
   18f70:	81 eb       	ldi	r24, 0xB1	; 177
   18f72:	9f e3       	ldi	r25, 0x3F	; 63
   18f74:	a0 e0       	ldi	r26, 0x00	; 0
   18f76:	81 83       	std	Z+1, r24	; 0x01
   18f78:	92 83       	std	Z+2, r25	; 0x02
   18f7a:	a3 83       	std	Z+3, r26	; 0x03
   18f7c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18f80:	80 e0       	ldi	r24, 0x00	; 0
   18f82:	90 e0       	ldi	r25, 0x00	; 0
   18f84:	2b a9       	ldd	r18, Y+51	; 0x33
   18f86:	3c a9       	ldd	r19, Y+52	; 0x34
   18f88:	23 2b       	or	r18, r19
   18f8a:	91 f0       	breq	.+36     	; 0x18fb0 <lif_check_volume+0xe0>
   18f8c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18f90:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18f94:	92 ff       	sbrs	r25, 2
   18f96:	0a c0       	rjmp	.+20     	; 0x18fac <lif_check_volume+0xdc>
   18f98:	88 e7       	ldi	r24, 0x78	; 120
   18f9a:	9f e3       	ldi	r25, 0x3F	; 63
   18f9c:	a0 e0       	ldi	r26, 0x00	; 0
   18f9e:	ed b7       	in	r30, 0x3d	; 61
   18fa0:	fe b7       	in	r31, 0x3e	; 62
   18fa2:	81 83       	std	Z+1, r24	; 0x01
   18fa4:	92 83       	std	Z+2, r25	; 0x02
   18fa6:	a3 83       	std	Z+3, r26	; 0x03
   18fa8:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18fac:	80 e0       	ldi	r24, 0x00	; 0
   18fae:	90 e0       	ldi	r25, 0x00	; 0
   18fb0:	2b ad       	ldd	r18, Y+59	; 0x3b
   18fb2:	3c ad       	ldd	r19, Y+60	; 0x3c
   18fb4:	23 2b       	or	r18, r19
   18fb6:	91 f0       	breq	.+36     	; 0x18fdc <lif_check_volume+0x10c>
   18fb8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18fbc:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18fc0:	92 ff       	sbrs	r25, 2
   18fc2:	0a c0       	rjmp	.+20     	; 0x18fd8 <lif_check_volume+0x108>
   18fc4:	8f e3       	ldi	r24, 0x3F	; 63
   18fc6:	9f e3       	ldi	r25, 0x3F	; 63
   18fc8:	a0 e0       	ldi	r26, 0x00	; 0
   18fca:	ed b7       	in	r30, 0x3d	; 61
   18fcc:	fe b7       	in	r31, 0x3e	; 62
   18fce:	81 83       	std	Z+1, r24	; 0x01
   18fd0:	92 83       	std	Z+2, r25	; 0x02
   18fd2:	a3 83       	std	Z+3, r26	; 0x03
   18fd4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   18fd8:	80 e0       	ldi	r24, 0x00	; 0
   18fda:	90 e0       	ldi	r25, 0x00	; 0
   18fdc:	4d a5       	ldd	r20, Y+45	; 0x2d
   18fde:	5e a5       	ldd	r21, Y+46	; 0x2e
   18fe0:	6f a5       	ldd	r22, Y+47	; 0x2f
   18fe2:	78 a9       	ldd	r23, Y+48	; 0x30
   18fe4:	45 2b       	or	r20, r21
   18fe6:	46 2b       	or	r20, r22
   18fe8:	47 2b       	or	r20, r23
   18fea:	b1 f4       	brne	.+44     	; 0x19018 <lif_check_volume+0x148>
   18fec:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18ff0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18ff4:	92 ff       	sbrs	r25, 2
   18ff6:	0e c0       	rjmp	.+28     	; 0x19014 <lif_check_volume+0x144>
   18ff8:	ed b7       	in	r30, 0x3d	; 61
   18ffa:	fe b7       	in	r31, 0x3e	; 62
   18ffc:	14 82       	std	Z+4, r1	; 0x04
   18ffe:	15 82       	std	Z+5, r1	; 0x05
   19000:	16 82       	std	Z+6, r1	; 0x06
   19002:	17 82       	std	Z+7, r1	; 0x07
   19004:	8a e1       	ldi	r24, 0x1A	; 26
   19006:	9f e3       	ldi	r25, 0x3F	; 63
   19008:	a0 e0       	ldi	r26, 0x00	; 0
   1900a:	81 83       	std	Z+1, r24	; 0x01
   1900c:	92 83       	std	Z+2, r25	; 0x02
   1900e:	a3 83       	std	Z+3, r26	; 0x03
   19010:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   19014:	80 e0       	ldi	r24, 0x00	; 0
   19016:	90 e0       	ldi	r25, 0x00	; 0
   19018:	4d a9       	ldd	r20, Y+53	; 0x35
   1901a:	5e a9       	ldd	r21, Y+54	; 0x36
   1901c:	6f a9       	ldd	r22, Y+55	; 0x37
   1901e:	78 ad       	ldd	r23, Y+56	; 0x38
   19020:	45 2b       	or	r20, r21
   19022:	46 2b       	or	r20, r22
   19024:	47 2b       	or	r20, r23
   19026:	91 f4       	brne	.+36     	; 0x1904c <lif_check_volume+0x17c>
   19028:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1902c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19030:	92 ff       	sbrs	r25, 2
   19032:	0a c0       	rjmp	.+20     	; 0x19048 <lif_check_volume+0x178>
   19034:	8b ee       	ldi	r24, 0xEB	; 235
   19036:	9e e3       	ldi	r25, 0x3E	; 62
   19038:	a0 e0       	ldi	r26, 0x00	; 0
   1903a:	ed b7       	in	r30, 0x3d	; 61
   1903c:	fe b7       	in	r31, 0x3e	; 62
   1903e:	81 83       	std	Z+1, r24	; 0x01
   19040:	92 83       	std	Z+2, r25	; 0x02
   19042:	a3 83       	std	Z+3, r26	; 0x03
   19044:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   19048:	80 e0       	ldi	r24, 0x00	; 0
   1904a:	90 e0       	ldi	r25, 0x00	; 0
   1904c:	0d a5       	ldd	r16, Y+45	; 0x2d
   1904e:	1e a5       	ldd	r17, Y+46	; 0x2e
   19050:	2f a5       	ldd	r18, Y+47	; 0x2f
   19052:	38 a9       	ldd	r19, Y+48	; 0x30
   19054:	4d a9       	ldd	r20, Y+53	; 0x35
   19056:	5e a9       	ldd	r21, Y+54	; 0x36
   19058:	6f a9       	ldd	r22, Y+55	; 0x37
   1905a:	78 ad       	ldd	r23, Y+56	; 0x38
   1905c:	40 0f       	add	r20, r16
   1905e:	51 1f       	adc	r21, r17
   19060:	62 1f       	adc	r22, r18
   19062:	73 1f       	adc	r23, r19
   19064:	0c 81       	ldd	r16, Y+4	; 0x04
   19066:	1d 81       	ldd	r17, Y+5	; 0x05
   19068:	2e 81       	ldd	r18, Y+6	; 0x06
   1906a:	3f 81       	ldd	r19, Y+7	; 0x07
   1906c:	04 17       	cp	r16, r20
   1906e:	15 07       	cpc	r17, r21
   19070:	26 07       	cpc	r18, r22
   19072:	37 07       	cpc	r19, r23
   19074:	90 f4       	brcc	.+36     	; 0x1909a <lif_check_volume+0x1ca>
   19076:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1907a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1907e:	92 ff       	sbrs	r25, 2
   19080:	0a c0       	rjmp	.+20     	; 0x19096 <lif_check_volume+0x1c6>
   19082:	8f eb       	ldi	r24, 0xBF	; 191
   19084:	9e e3       	ldi	r25, 0x3E	; 62
   19086:	a0 e0       	ldi	r26, 0x00	; 0
   19088:	ed b7       	in	r30, 0x3d	; 61
   1908a:	fe b7       	in	r31, 0x3e	; 62
   1908c:	81 83       	std	Z+1, r24	; 0x01
   1908e:	92 83       	std	Z+2, r25	; 0x02
   19090:	a3 83       	std	Z+3, r26	; 0x03
   19092:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   19096:	80 e0       	ldi	r24, 0x00	; 0
   19098:	90 e0       	ldi	r25, 0x00	; 0
   1909a:	cd b7       	in	r28, 0x3d	; 61
   1909c:	de b7       	in	r29, 0x3e	; 62
   1909e:	27 96       	adiw	r28, 0x07	; 7
   190a0:	e4 e0       	ldi	r30, 0x04	; 4
   190a2:	0c 94 90 e6 	jmp	0x1cd20	; 0x1cd20 <__epilogue_restores__+0x1c>

000190a6 <lif_check_dir>:
   190a6:	a5 e1       	ldi	r26, 0x15	; 21
   190a8:	b0 e0       	ldi	r27, 0x00	; 0
   190aa:	e9 e5       	ldi	r30, 0x59	; 89
   190ac:	f8 ec       	ldi	r31, 0xC8	; 200
   190ae:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
   190b2:	6c 01       	movw	r12, r24
   190b4:	2a e5       	ldi	r18, 0x5A	; 90
   190b6:	c2 0e       	add	r12, r18
   190b8:	d1 1c       	adc	r13, r1
   190ba:	f6 01       	movw	r30, r12
   190bc:	20 81       	ld	r18, Z
   190be:	31 81       	ldd	r19, Z+1	; 0x01
   190c0:	21 50       	subi	r18, 0x01	; 1
   190c2:	31 09       	sbc	r19, r1
   190c4:	2e 3f       	cpi	r18, 0xFE	; 254
   190c6:	3f 4f       	sbci	r19, 0xFF	; 255
   190c8:	08 f0       	brcs	.+2      	; 0x190cc <lif_check_dir+0x26>
   190ca:	9a c1       	rjmp	.+820    	; 0x19400 <lif_check_dir+0x35a>
   190cc:	9d 8b       	std	Y+21, r25	; 0x15
   190ce:	8c 8b       	std	Y+20, r24	; 0x14
   190d0:	7c 01       	movw	r14, r24
   190d2:	2f e4       	ldi	r18, 0x4F	; 79
   190d4:	e2 0e       	add	r14, r18
   190d6:	f1 1c       	adc	r15, r1
   190d8:	c7 01       	movw	r24, r14
   190da:	e9 d9       	rcall	.-3118   	; 0x184ae <lif_checkname>
   190dc:	89 2b       	or	r24, r25
   190de:	99 f4       	brne	.+38     	; 0x19106 <lif_check_dir+0x60>
   190e0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   190e4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   190e8:	92 ff       	sbrs	r25, 2
   190ea:	0f c0       	rjmp	.+30     	; 0x1910a <lif_check_dir+0x64>
   190ec:	ed b7       	in	r30, 0x3d	; 61
   190ee:	fe b7       	in	r31, 0x3e	; 62
   190f0:	f5 82       	std	Z+5, r15	; 0x05
   190f2:	e4 82       	std	Z+4, r14	; 0x04
   190f4:	8e e9       	ldi	r24, 0x9E	; 158
   190f6:	9e e3       	ldi	r25, 0x3E	; 62
   190f8:	a0 e0       	ldi	r26, 0x00	; 0
   190fa:	81 83       	std	Z+1, r24	; 0x01
   190fc:	92 83       	std	Z+2, r25	; 0x02
   190fe:	a3 83       	std	Z+3, r26	; 0x03
   19100:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   19104:	02 c0       	rjmp	.+4      	; 0x1910a <lif_check_dir+0x64>
   19106:	01 e0       	ldi	r16, 0x01	; 1
   19108:	01 c0       	rjmp	.+2      	; 0x1910c <lif_check_dir+0x66>
   1910a:	00 e0       	ldi	r16, 0x00	; 0
   1910c:	10 e0       	ldi	r17, 0x00	; 0
   1910e:	ec 89       	ldd	r30, Y+20	; 0x14
   19110:	fd 89       	ldd	r31, Y+21	; 0x15
   19112:	84 85       	ldd	r24, Z+12	; 0x0c
   19114:	95 85       	ldd	r25, Z+13	; 0x0d
   19116:	a6 85       	ldd	r26, Z+14	; 0x0e
   19118:	b7 85       	ldd	r27, Z+15	; 0x0f
   1911a:	00 97       	sbiw	r24, 0x00	; 0
   1911c:	a1 05       	cpc	r26, r1
   1911e:	b1 05       	cpc	r27, r1
   19120:	39 f1       	breq	.+78     	; 0x19170 <lif_check_dir+0xca>
   19122:	e4 5a       	subi	r30, 0xA4	; 164
   19124:	ff 4f       	sbci	r31, 0xFF	; 255
   19126:	40 81       	ld	r20, Z
   19128:	51 81       	ldd	r21, Z+1	; 0x01
   1912a:	62 81       	ldd	r22, Z+2	; 0x02
   1912c:	73 81       	ldd	r23, Z+3	; 0x03
   1912e:	48 17       	cp	r20, r24
   19130:	59 07       	cpc	r21, r25
   19132:	6a 07       	cpc	r22, r26
   19134:	7b 07       	cpc	r23, r27
   19136:	e0 f4       	brcc	.+56     	; 0x19170 <lif_check_dir+0xca>
   19138:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1913c:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19140:	32 ff       	sbrs	r19, 2
   19142:	14 c0       	rjmp	.+40     	; 0x1916c <lif_check_dir+0xc6>
   19144:	ed b7       	in	r30, 0x3d	; 61
   19146:	fe b7       	in	r31, 0x3e	; 62
   19148:	82 87       	std	Z+10, r24	; 0x0a
   1914a:	93 87       	std	Z+11, r25	; 0x0b
   1914c:	a4 87       	std	Z+12, r26	; 0x0c
   1914e:	b5 87       	std	Z+13, r27	; 0x0d
   19150:	46 83       	std	Z+6, r20	; 0x06
   19152:	57 83       	std	Z+7, r21	; 0x07
   19154:	60 87       	std	Z+8, r22	; 0x08
   19156:	71 87       	std	Z+9, r23	; 0x09
   19158:	f5 82       	std	Z+5, r15	; 0x05
   1915a:	e4 82       	std	Z+4, r14	; 0x04
   1915c:	8a e5       	ldi	r24, 0x5A	; 90
   1915e:	9e e3       	ldi	r25, 0x3E	; 62
   19160:	a0 e0       	ldi	r26, 0x00	; 0
   19162:	81 83       	std	Z+1, r24	; 0x01
   19164:	92 83       	std	Z+2, r25	; 0x02
   19166:	a3 83       	std	Z+3, r26	; 0x03
   19168:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1916c:	00 e0       	ldi	r16, 0x00	; 0
   1916e:	10 e0       	ldi	r17, 0x00	; 0
   19170:	ec 89       	ldd	r30, Y+20	; 0x14
   19172:	fd 89       	ldd	r31, Y+21	; 0x15
   19174:	44 81       	ldd	r20, Z+4	; 0x04
   19176:	55 81       	ldd	r21, Z+5	; 0x05
   19178:	66 81       	ldd	r22, Z+6	; 0x06
   1917a:	77 81       	ldd	r23, Z+7	; 0x07
   1917c:	41 15       	cp	r20, r1
   1917e:	51 05       	cpc	r21, r1
   19180:	61 05       	cpc	r22, r1
   19182:	71 05       	cpc	r23, r1
   19184:	99 f1       	breq	.+102    	; 0x191ec <lif_check_dir+0x146>
   19186:	e4 5a       	subi	r30, 0xA4	; 164
   19188:	ff 4f       	sbci	r31, 0xFF	; 255
   1918a:	80 80       	ld	r8, Z
   1918c:	91 80       	ldd	r9, Z+1	; 0x01
   1918e:	a2 80       	ldd	r10, Z+2	; 0x02
   19190:	b3 80       	ldd	r11, Z+3	; 0x03
   19192:	ec 89       	ldd	r30, Y+20	; 0x14
   19194:	fd 89       	ldd	r31, Y+21	; 0x15
   19196:	e0 5a       	subi	r30, 0xA0	; 160
   19198:	ff 4f       	sbci	r31, 0xFF	; 255
   1919a:	80 81       	ld	r24, Z
   1919c:	91 81       	ldd	r25, Z+1	; 0x01
   1919e:	a2 81       	ldd	r26, Z+2	; 0x02
   191a0:	b3 81       	ldd	r27, Z+3	; 0x03
   191a2:	88 0d       	add	r24, r8
   191a4:	99 1d       	adc	r25, r9
   191a6:	aa 1d       	adc	r26, r10
   191a8:	bb 1d       	adc	r27, r11
   191aa:	48 17       	cp	r20, r24
   191ac:	59 07       	cpc	r21, r25
   191ae:	6a 07       	cpc	r22, r26
   191b0:	7b 07       	cpc	r23, r27
   191b2:	e0 f4       	brcc	.+56     	; 0x191ec <lif_check_dir+0x146>
   191b4:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   191b8:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   191bc:	32 ff       	sbrs	r19, 2
   191be:	14 c0       	rjmp	.+40     	; 0x191e8 <lif_check_dir+0x142>
   191c0:	ed b7       	in	r30, 0x3d	; 61
   191c2:	fe b7       	in	r31, 0x3e	; 62
   191c4:	42 87       	std	Z+10, r20	; 0x0a
   191c6:	53 87       	std	Z+11, r21	; 0x0b
   191c8:	64 87       	std	Z+12, r22	; 0x0c
   191ca:	75 87       	std	Z+13, r23	; 0x0d
   191cc:	86 83       	std	Z+6, r24	; 0x06
   191ce:	97 83       	std	Z+7, r25	; 0x07
   191d0:	a0 87       	std	Z+8, r26	; 0x08
   191d2:	b1 87       	std	Z+9, r27	; 0x09
   191d4:	f5 82       	std	Z+5, r15	; 0x05
   191d6:	e4 82       	std	Z+4, r14	; 0x04
   191d8:	89 e1       	ldi	r24, 0x19	; 25
   191da:	9e e3       	ldi	r25, 0x3E	; 62
   191dc:	a0 e0       	ldi	r26, 0x00	; 0
   191de:	81 83       	std	Z+1, r24	; 0x01
   191e0:	92 83       	std	Z+2, r25	; 0x02
   191e2:	a3 83       	std	Z+3, r26	; 0x03
   191e4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   191e8:	00 e0       	ldi	r16, 0x00	; 0
   191ea:	10 e0       	ldi	r17, 0x00	; 0
   191ec:	ec 89       	ldd	r30, Y+20	; 0x14
   191ee:	fd 89       	ldd	r31, Y+21	; 0x15
   191f0:	e6 59       	subi	r30, 0x96	; 150
   191f2:	ff 4f       	sbci	r31, 0xFF	; 255
   191f4:	80 81       	ld	r24, Z
   191f6:	91 81       	ldd	r25, Z+1	; 0x01
   191f8:	81 30       	cpi	r24, 0x01	; 1
   191fa:	f0 e8       	ldi	r31, 0x80	; 128
   191fc:	9f 07       	cpc	r25, r31
   191fe:	b1 f0       	breq	.+44     	; 0x1922c <lif_check_dir+0x186>
   19200:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19204:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19208:	32 ff       	sbrs	r19, 2
   1920a:	0e c0       	rjmp	.+28     	; 0x19228 <lif_check_dir+0x182>
   1920c:	ed b7       	in	r30, 0x3d	; 61
   1920e:	fe b7       	in	r31, 0x3e	; 62
   19210:	97 83       	std	Z+7, r25	; 0x07
   19212:	86 83       	std	Z+6, r24	; 0x06
   19214:	f5 82       	std	Z+5, r15	; 0x05
   19216:	e4 82       	std	Z+4, r14	; 0x04
   19218:	8b ee       	ldi	r24, 0xEB	; 235
   1921a:	9d e3       	ldi	r25, 0x3D	; 61
   1921c:	a0 e0       	ldi	r26, 0x00	; 0
   1921e:	81 83       	std	Z+1, r24	; 0x01
   19220:	92 83       	std	Z+2, r25	; 0x02
   19222:	a3 83       	std	Z+3, r26	; 0x03
   19224:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   19228:	00 e0       	ldi	r16, 0x00	; 0
   1922a:	10 e0       	ldi	r17, 0x00	; 0
   1922c:	f6 01       	movw	r30, r12
   1922e:	80 81       	ld	r24, Z
   19230:	91 81       	ldd	r25, Z+1	; 0x01
   19232:	8c 7f       	andi	r24, 0xFC	; 252
   19234:	80 31       	cpi	r24, 0x10	; 16
   19236:	90 4e       	sbci	r25, 0xE0	; 224
   19238:	09 f0       	breq	.+2      	; 0x1923c <lif_check_dir+0x196>
   1923a:	b3 c0       	rjmp	.+358    	; 0x193a2 <lif_check_dir+0x2fc>
   1923c:	cc 88       	ldd	r12, Y+20	; 0x14
   1923e:	dd 88       	ldd	r13, Y+21	; 0x15
   19240:	2c e6       	ldi	r18, 0x6C	; 108
   19242:	c2 0e       	add	r12, r18
   19244:	d1 1c       	adc	r13, r1
   19246:	f6 01       	movw	r30, r12
   19248:	80 81       	ld	r24, Z
   1924a:	91 81       	ldd	r25, Z+1	; 0x01
   1924c:	00 97       	sbiw	r24, 0x00	; 0
   1924e:	09 f4       	brne	.+2      	; 0x19252 <lif_check_dir+0x1ac>
   19250:	a8 c0       	rjmp	.+336    	; 0x193a2 <lif_check_dir+0x2fc>
   19252:	4c 01       	movw	r8, r24
   19254:	a1 2c       	mov	r10, r1
   19256:	b1 2c       	mov	r11, r1
   19258:	77 27       	eor	r23, r23
   1925a:	6b 2d       	mov	r22, r11
   1925c:	5a 2d       	mov	r21, r10
   1925e:	49 2d       	mov	r20, r9
   19260:	9c 01       	movw	r18, r24
   19262:	33 27       	eor	r19, r19
   19264:	3b 8b       	std	Y+19, r19	; 0x13
   19266:	2a 8b       	std	Y+18, r18	; 0x12
   19268:	db 01       	movw	r26, r22
   1926a:	ca 01       	movw	r24, r20
   1926c:	23 2b       	or	r18, r19
   1926e:	19 f0       	breq	.+6      	; 0x19276 <lif_check_dir+0x1d0>
   19270:	01 96       	adiw	r24, 0x01	; 1
   19272:	a1 1d       	adc	r26, r1
   19274:	b1 1d       	adc	r27, r1
   19276:	2c 88       	ldd	r2, Y+20	; 0x14
   19278:	3d 88       	ldd	r3, Y+21	; 0x15
   1927a:	30 e6       	ldi	r19, 0x60	; 96
   1927c:	23 0e       	add	r2, r19
   1927e:	31 1c       	adc	r3, r1
   19280:	f1 01       	movw	r30, r2
   19282:	40 80       	ld	r4, Z
   19284:	51 80       	ldd	r5, Z+1	; 0x01
   19286:	62 80       	ldd	r6, Z+2	; 0x02
   19288:	73 80       	ldd	r7, Z+3	; 0x03
   1928a:	48 16       	cp	r4, r24
   1928c:	59 06       	cpc	r5, r25
   1928e:	6a 06       	cpc	r6, r26
   19290:	7b 06       	cpc	r7, r27
   19292:	40 f5       	brcc	.+80     	; 0x192e4 <lif_check_dir+0x23e>
   19294:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19298:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1929c:	32 ff       	sbrs	r19, 2
   1929e:	20 c0       	rjmp	.+64     	; 0x192e0 <lif_check_dir+0x23a>
   192a0:	2a 89       	ldd	r18, Y+18	; 0x12
   192a2:	3b 89       	ldd	r19, Y+19	; 0x13
   192a4:	23 2b       	or	r18, r19
   192a6:	21 f0       	breq	.+8      	; 0x192b0 <lif_check_dir+0x20a>
   192a8:	4f 5f       	subi	r20, 0xFF	; 255
   192aa:	5f 4f       	sbci	r21, 0xFF	; 255
   192ac:	6f 4f       	sbci	r22, 0xFF	; 255
   192ae:	7f 4f       	sbci	r23, 0xFF	; 255
   192b0:	ed b7       	in	r30, 0x3d	; 61
   192b2:	fe b7       	in	r31, 0x3e	; 62
   192b4:	46 86       	std	Z+14, r4	; 0x0e
   192b6:	57 86       	std	Z+15, r5	; 0x0f
   192b8:	60 8a       	std	Z+16, r6	; 0x10
   192ba:	71 8a       	std	Z+17, r7	; 0x11
   192bc:	42 87       	std	Z+10, r20	; 0x0a
   192be:	53 87       	std	Z+11, r21	; 0x0b
   192c0:	64 87       	std	Z+12, r22	; 0x0c
   192c2:	75 87       	std	Z+13, r23	; 0x0d
   192c4:	86 82       	std	Z+6, r8	; 0x06
   192c6:	97 82       	std	Z+7, r9	; 0x07
   192c8:	a0 86       	std	Z+8, r10	; 0x08
   192ca:	b1 86       	std	Z+9, r11	; 0x09
   192cc:	f5 82       	std	Z+5, r15	; 0x05
   192ce:	e4 82       	std	Z+4, r14	; 0x04
   192d0:	80 ea       	ldi	r24, 0xA0	; 160
   192d2:	9d e3       	ldi	r25, 0x3D	; 61
   192d4:	a0 e0       	ldi	r26, 0x00	; 0
   192d6:	81 83       	std	Z+1, r24	; 0x01
   192d8:	92 83       	std	Z+2, r25	; 0x02
   192da:	a3 83       	std	Z+3, r26	; 0x03
   192dc:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   192e0:	00 e0       	ldi	r16, 0x00	; 0
   192e2:	10 e0       	ldi	r17, 0x00	; 0
   192e4:	f6 01       	movw	r30, r12
   192e6:	20 81       	ld	r18, Z
   192e8:	31 81       	ldd	r19, Z+1	; 0x01
   192ea:	a9 01       	movw	r20, r18
   192ec:	60 e0       	ldi	r22, 0x00	; 0
   192ee:	70 e0       	ldi	r23, 0x00	; 0
   192f0:	bb 27       	eor	r27, r27
   192f2:	a7 2f       	mov	r26, r23
   192f4:	96 2f       	mov	r25, r22
   192f6:	85 2f       	mov	r24, r21
   192f8:	f9 01       	movw	r30, r18
   192fa:	ff 27       	eor	r31, r31
   192fc:	fb 8b       	std	Y+19, r31	; 0x13
   192fe:	ea 8b       	std	Y+18, r30	; 0x12
   19300:	2c 01       	movw	r4, r24
   19302:	3d 01       	movw	r6, r26
   19304:	ef 2b       	or	r30, r31
   19306:	29 f0       	breq	.+10     	; 0x19312 <lif_check_dir+0x26c>
   19308:	ff ef       	ldi	r31, 0xFF	; 255
   1930a:	4f 1a       	sub	r4, r31
   1930c:	5f 0a       	sbc	r5, r31
   1930e:	6f 0a       	sbc	r6, r31
   19310:	7f 0a       	sbc	r7, r31
   19312:	f1 01       	movw	r30, r2
   19314:	80 80       	ld	r8, Z
   19316:	91 80       	ldd	r9, Z+1	; 0x01
   19318:	a2 80       	ldd	r10, Z+2	; 0x02
   1931a:	b3 80       	ldd	r11, Z+3	; 0x03
   1931c:	48 14       	cp	r4, r8
   1931e:	59 04       	cpc	r5, r9
   19320:	6a 04       	cpc	r6, r10
   19322:	7b 04       	cpc	r7, r11
   19324:	28 f5       	brcc	.+74     	; 0x19370 <lif_check_dir+0x2ca>
   19326:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1932a:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1932e:	32 ff       	sbrs	r19, 2
   19330:	1f c0       	rjmp	.+62     	; 0x19370 <lif_check_dir+0x2ca>
   19332:	2a 89       	ldd	r18, Y+18	; 0x12
   19334:	3b 89       	ldd	r19, Y+19	; 0x13
   19336:	23 2b       	or	r18, r19
   19338:	19 f0       	breq	.+6      	; 0x19340 <lif_check_dir+0x29a>
   1933a:	01 96       	adiw	r24, 0x01	; 1
   1933c:	a1 1d       	adc	r26, r1
   1933e:	b1 1d       	adc	r27, r1
   19340:	ed b7       	in	r30, 0x3d	; 61
   19342:	fe b7       	in	r31, 0x3e	; 62
   19344:	86 86       	std	Z+14, r8	; 0x0e
   19346:	97 86       	std	Z+15, r9	; 0x0f
   19348:	a0 8a       	std	Z+16, r10	; 0x10
   1934a:	b1 8a       	std	Z+17, r11	; 0x11
   1934c:	82 87       	std	Z+10, r24	; 0x0a
   1934e:	93 87       	std	Z+11, r25	; 0x0b
   19350:	a4 87       	std	Z+12, r26	; 0x0c
   19352:	b5 87       	std	Z+13, r27	; 0x0d
   19354:	46 83       	std	Z+6, r20	; 0x06
   19356:	57 83       	std	Z+7, r21	; 0x07
   19358:	60 87       	std	Z+8, r22	; 0x08
   1935a:	71 87       	std	Z+9, r23	; 0x09
   1935c:	f5 82       	std	Z+5, r15	; 0x05
   1935e:	e4 82       	std	Z+4, r14	; 0x04
   19360:	85 e5       	ldi	r24, 0x55	; 85
   19362:	9d e3       	ldi	r25, 0x3D	; 61
   19364:	a0 e0       	ldi	r26, 0x00	; 0
   19366:	81 83       	std	Z+1, r24	; 0x01
   19368:	92 83       	std	Z+2, r25	; 0x02
   1936a:	a3 83       	std	Z+3, r26	; 0x03
   1936c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   19370:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19374:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19378:	92 ff       	sbrs	r25, 2
   1937a:	13 c0       	rjmp	.+38     	; 0x193a2 <lif_check_dir+0x2fc>
   1937c:	f6 01       	movw	r30, r12
   1937e:	80 81       	ld	r24, Z
   19380:	91 81       	ldd	r25, Z+1	; 0x01
   19382:	89 2b       	or	r24, r25
   19384:	71 f4       	brne	.+28     	; 0x193a2 <lif_check_dir+0x2fc>
   19386:	ed b7       	in	r30, 0x3d	; 61
   19388:	fe b7       	in	r31, 0x3e	; 62
   1938a:	f5 82       	std	Z+5, r15	; 0x05
   1938c:	e4 82       	std	Z+4, r14	; 0x04
   1938e:	8a e2       	ldi	r24, 0x2A	; 42
   19390:	9d e3       	ldi	r25, 0x3D	; 61
   19392:	a0 e0       	ldi	r26, 0x00	; 0
   19394:	81 83       	std	Z+1, r24	; 0x01
   19396:	92 83       	std	Z+2, r25	; 0x02
   19398:	a3 83       	std	Z+3, r26	; 0x03
   1939a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1939e:	00 e0       	ldi	r16, 0x00	; 0
   193a0:	10 e0       	ldi	r17, 0x00	; 0
   193a2:	ec 89       	ldd	r30, Y+20	; 0x14
   193a4:	fd 89       	ldd	r31, Y+21	; 0x15
   193a6:	e2 59       	subi	r30, 0x92	; 146
   193a8:	ff 4f       	sbci	r31, 0xFF	; 255
   193aa:	20 81       	ld	r18, Z
   193ac:	31 81       	ldd	r19, Z+1	; 0x01
   193ae:	21 15       	cp	r18, r1
   193b0:	f1 e0       	ldi	r31, 0x01	; 1
   193b2:	3f 07       	cpc	r19, r31
   193b4:	41 f1       	breq	.+80     	; 0x19406 <lif_check_dir+0x360>
   193b6:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   193ba:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   193be:	ca 01       	movw	r24, r20
   193c0:	88 27       	eor	r24, r24
   193c2:	94 70       	andi	r25, 0x04	; 4
   193c4:	52 ff       	sbrs	r21, 2
   193c6:	20 c0       	rjmp	.+64     	; 0x19408 <lif_check_dir+0x362>
   193c8:	c9 01       	movw	r24, r18
   193ca:	a0 e0       	ldi	r26, 0x00	; 0
   193cc:	b0 e0       	ldi	r27, 0x00	; 0
   193ce:	ed b7       	in	r30, 0x3d	; 61
   193d0:	fe b7       	in	r31, 0x3e	; 62
   193d2:	86 83       	std	Z+6, r24	; 0x06
   193d4:	97 83       	std	Z+7, r25	; 0x07
   193d6:	a0 87       	std	Z+8, r26	; 0x08
   193d8:	b1 87       	std	Z+9, r27	; 0x09
   193da:	ec 89       	ldd	r30, Y+20	; 0x14
   193dc:	fd 89       	ldd	r31, Y+21	; 0x15
   193de:	80 81       	ld	r24, Z
   193e0:	91 81       	ldd	r25, Z+1	; 0x01
   193e2:	ed b7       	in	r30, 0x3d	; 61
   193e4:	fe b7       	in	r31, 0x3e	; 62
   193e6:	95 83       	std	Z+5, r25	; 0x05
   193e8:	84 83       	std	Z+4, r24	; 0x04
   193ea:	8e ef       	ldi	r24, 0xFE	; 254
   193ec:	9c e3       	ldi	r25, 0x3C	; 60
   193ee:	a0 e0       	ldi	r26, 0x00	; 0
   193f0:	81 83       	std	Z+1, r24	; 0x01
   193f2:	92 83       	std	Z+2, r25	; 0x02
   193f4:	a3 83       	std	Z+3, r26	; 0x03
   193f6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   193fa:	80 e0       	ldi	r24, 0x00	; 0
   193fc:	90 e0       	ldi	r25, 0x00	; 0
   193fe:	04 c0       	rjmp	.+8      	; 0x19408 <lif_check_dir+0x362>
   19400:	81 e0       	ldi	r24, 0x01	; 1
   19402:	90 e0       	ldi	r25, 0x00	; 0
   19404:	01 c0       	rjmp	.+2      	; 0x19408 <lif_check_dir+0x362>
   19406:	c8 01       	movw	r24, r16
   19408:	65 96       	adiw	r28, 0x15	; 21
   1940a:	e2 e1       	ldi	r30, 0x12	; 18
   1940c:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

00019410 <lif_close_volume>:
   19410:	cf 93       	push	r28
   19412:	df 93       	push	r29
   19414:	00 97       	sbiw	r24, 0x00	; 0
   19416:	f9 f0       	breq	.+62     	; 0x19456 <lif_close_volume+0x46>
   19418:	ec 01       	movw	r28, r24
   1941a:	8a 81       	ldd	r24, Y+2	; 0x02
   1941c:	9b 81       	ldd	r25, Y+3	; 0x03
   1941e:	00 97       	sbiw	r24, 0x00	; 0
   19420:	79 f0       	breq	.+30     	; 0x19440 <lif_close_volume+0x30>
   19422:	22 e0       	ldi	r18, 0x02	; 2
   19424:	30 e0       	ldi	r19, 0x00	; 0
   19426:	40 e0       	ldi	r20, 0x00	; 0
   19428:	50 e0       	ldi	r21, 0x00	; 0
   1942a:	ba 01       	movw	r22, r20
   1942c:	0e 94 96 7a 	call	0xf52c	; 0xf52c <fseek>
   19430:	8a 81       	ldd	r24, Y+2	; 0x02
   19432:	9b 81       	ldd	r25, Y+3	; 0x03
   19434:	0e 94 7e 7c 	call	0xf8fc	; 0xf8fc <fclose>
   19438:	1b 82       	std	Y+3, r1	; 0x03
   1943a:	1a 82       	std	Y+2, r1	; 0x02
   1943c:	0e 94 79 7b 	call	0xf6f2	; 0xf6f2 <sync>
   19440:	88 81       	ld	r24, Y
   19442:	99 81       	ldd	r25, Y+1	; 0x01
   19444:	00 97       	sbiw	r24, 0x00	; 0
   19446:	11 f0       	breq	.+4      	; 0x1944c <lif_close_volume+0x3c>
   19448:	0e 94 84 c0 	call	0x18108	; 0x18108 <lif_free>
   1944c:	ce 01       	movw	r24, r28
   1944e:	73 db       	rcall	.-2330   	; 0x18b36 <lif_vol_clear>
   19450:	ce 01       	movw	r24, r28
   19452:	0e 94 84 c0 	call	0x18108	; 0x18108 <lif_free>
   19456:	df 91       	pop	r29
   19458:	cf 91       	pop	r28
   1945a:	08 95       	ret

0001945c <lif_checkdirindex>:
   1945c:	cf 92       	push	r12
   1945e:	df 92       	push	r13
   19460:	ef 92       	push	r14
   19462:	ff 92       	push	r15
   19464:	cf 93       	push	r28
   19466:	df 93       	push	r29
   19468:	ad b7       	in	r26, 0x3d	; 61
   1946a:	be b7       	in	r27, 0x3e	; 62
   1946c:	17 97       	sbiw	r26, 0x07	; 7
   1946e:	0f b6       	in	r0, 0x3f	; 63
   19470:	f8 94       	cli
   19472:	be bf       	out	0x3e, r27	; 62
   19474:	0f be       	out	0x3f, r0	; 63
   19476:	ad bf       	out	0x3d, r26	; 61
   19478:	9b 01       	movw	r18, r22
   1947a:	77 fd       	sbrc	r23, 7
   1947c:	25 c0       	rjmp	.+74     	; 0x194c8 <lif_checkdirindex+0x6c>
   1947e:	ab 01       	movw	r20, r22
   19480:	77 0f       	add	r23, r23
   19482:	66 0b       	sbc	r22, r22
   19484:	77 0b       	sbc	r23, r23
   19486:	e5 e0       	ldi	r30, 0x05	; 5
   19488:	44 0f       	add	r20, r20
   1948a:	55 1f       	adc	r21, r21
   1948c:	66 1f       	adc	r22, r22
   1948e:	77 1f       	adc	r23, r23
   19490:	ea 95       	dec	r30
   19492:	d1 f7       	brne	.-12     	; 0x19488 <lif_checkdirindex+0x2c>
   19494:	c5 2e       	mov	r12, r21
   19496:	d6 2e       	mov	r13, r22
   19498:	e7 2e       	mov	r14, r23
   1949a:	ff 24       	eor	r15, r15
   1949c:	55 27       	eor	r21, r21
   1949e:	66 27       	eor	r22, r22
   194a0:	77 27       	eor	r23, r23
   194a2:	45 2b       	or	r20, r21
   194a4:	46 2b       	or	r20, r22
   194a6:	47 2b       	or	r20, r23
   194a8:	29 f0       	breq	.+10     	; 0x194b4 <lif_checkdirindex+0x58>
   194aa:	4f ef       	ldi	r20, 0xFF	; 255
   194ac:	c4 1a       	sub	r12, r20
   194ae:	d4 0a       	sbc	r13, r20
   194b0:	e4 0a       	sbc	r14, r20
   194b2:	f4 0a       	sbc	r15, r20
   194b4:	fc 01       	movw	r30, r24
   194b6:	45 a9       	ldd	r20, Z+53	; 0x35
   194b8:	56 a9       	ldd	r21, Z+54	; 0x36
   194ba:	67 a9       	ldd	r22, Z+55	; 0x37
   194bc:	70 ad       	ldd	r23, Z+56	; 0x38
   194be:	4c 15       	cp	r20, r12
   194c0:	5d 05       	cpc	r21, r13
   194c2:	6e 05       	cpc	r22, r14
   194c4:	7f 05       	cpc	r23, r15
   194c6:	08 f5       	brcc	.+66     	; 0x1950a <lif_checkdirindex+0xae>
   194c8:	ec 01       	movw	r28, r24
   194ca:	ed b7       	in	r30, 0x3d	; 61
   194cc:	fe b7       	in	r31, 0x3e	; 62
   194ce:	37 83       	std	Z+7, r19	; 0x07
   194d0:	26 83       	std	Z+6, r18	; 0x06
   194d2:	88 81       	ld	r24, Y
   194d4:	99 81       	ldd	r25, Y+1	; 0x01
   194d6:	95 83       	std	Z+5, r25	; 0x05
   194d8:	84 83       	std	Z+4, r24	; 0x04
   194da:	8b e3       	ldi	r24, 0x3B	; 59
   194dc:	9c e3       	ldi	r25, 0x3C	; 60
   194de:	a0 e0       	ldi	r26, 0x00	; 0
   194e0:	81 83       	std	Z+1, r24	; 0x01
   194e2:	92 83       	std	Z+2, r25	; 0x02
   194e4:	a3 83       	std	Z+3, r26	; 0x03
   194e6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   194ea:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   194ee:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   194f2:	c9 01       	movw	r24, r18
   194f4:	88 27       	eor	r24, r24
   194f6:	94 70       	andi	r25, 0x04	; 4
   194f8:	32 ff       	sbrs	r19, 2
   194fa:	09 c0       	rjmp	.+18     	; 0x1950e <lif_checkdirindex+0xb2>
   194fc:	65 ee       	ldi	r22, 0xE5	; 229
   194fe:	75 e1       	ldi	r23, 0x15	; 21
   19500:	ce 01       	movw	r24, r28
   19502:	20 db       	rcall	.-2496   	; 0x18b44 <lif_dump_vol>
   19504:	80 e0       	ldi	r24, 0x00	; 0
   19506:	90 e0       	ldi	r25, 0x00	; 0
   19508:	02 c0       	rjmp	.+4      	; 0x1950e <lif_checkdirindex+0xb2>
   1950a:	81 e0       	ldi	r24, 0x01	; 1
   1950c:	90 e0       	ldi	r25, 0x00	; 0
   1950e:	ad b7       	in	r26, 0x3d	; 61
   19510:	be b7       	in	r27, 0x3e	; 62
   19512:	17 96       	adiw	r26, 0x07	; 7
   19514:	0f b6       	in	r0, 0x3f	; 63
   19516:	f8 94       	cli
   19518:	be bf       	out	0x3e, r27	; 62
   1951a:	0f be       	out	0x3f, r0	; 63
   1951c:	ad bf       	out	0x3d, r26	; 61
   1951e:	df 91       	pop	r29
   19520:	cf 91       	pop	r28
   19522:	ff 90       	pop	r15
   19524:	ef 90       	pop	r14
   19526:	df 90       	pop	r13
   19528:	cf 90       	pop	r12
   1952a:	08 95       	ret

0001952c <lif_readdirindex>:
   1952c:	a5 e2       	ldi	r26, 0x25	; 37
   1952e:	b0 e0       	ldi	r27, 0x00	; 0
   19530:	ec e9       	ldi	r30, 0x9C	; 156
   19532:	fa ec       	ldi	r31, 0xCA	; 202
   19534:	0c 94 70 e6 	jmp	0x1cce0	; 0x1cce0 <__prologue_saves__+0x14>
   19538:	7c 01       	movw	r14, r24
   1953a:	6b 01       	movw	r12, r22
   1953c:	8f df       	rcall	.-226    	; 0x1945c <lif_checkdirindex>
   1953e:	89 2b       	or	r24, r25
   19540:	19 f4       	brne	.+6      	; 0x19548 <lif_readdirindex+0x1c>
   19542:	00 e0       	ldi	r16, 0x00	; 0
   19544:	10 e0       	ldi	r17, 0x00	; 0
   19546:	54 c0       	rjmp	.+168    	; 0x195f0 <lif_readdirindex+0xc4>
   19548:	f7 01       	movw	r30, r14
   1954a:	85 a5       	ldd	r24, Z+45	; 0x2d
   1954c:	96 a5       	ldd	r25, Z+46	; 0x2e
   1954e:	a7 a5       	ldd	r26, Z+47	; 0x2f
   19550:	b0 a9       	ldd	r27, Z+48	; 0x30
   19552:	44 27       	eor	r20, r20
   19554:	58 2f       	mov	r21, r24
   19556:	69 2f       	mov	r22, r25
   19558:	7a 2f       	mov	r23, r26
   1955a:	c6 01       	movw	r24, r12
   1955c:	0d 2c       	mov	r0, r13
   1955e:	00 0c       	add	r0, r0
   19560:	aa 0b       	sbc	r26, r26
   19562:	bb 0b       	sbc	r27, r27
   19564:	35 e0       	ldi	r19, 0x05	; 5
   19566:	88 0f       	add	r24, r24
   19568:	99 1f       	adc	r25, r25
   1956a:	aa 1f       	adc	r26, r26
   1956c:	bb 1f       	adc	r27, r27
   1956e:	3a 95       	dec	r19
   19570:	d1 f7       	brne	.-12     	; 0x19566 <lif_readdirindex+0x3a>
   19572:	9a 01       	movw	r18, r20
   19574:	ab 01       	movw	r20, r22
   19576:	28 0f       	add	r18, r24
   19578:	39 1f       	adc	r19, r25
   1957a:	4a 1f       	adc	r20, r26
   1957c:	5b 1f       	adc	r21, r27
   1957e:	00 e2       	ldi	r16, 0x20	; 32
   19580:	10 e0       	ldi	r17, 0x00	; 0
   19582:	be 01       	movw	r22, r28
   19584:	6a 5f       	subi	r22, 0xFA	; 250
   19586:	7f 4f       	sbci	r23, 0xFF	; 255
   19588:	c7 01       	movw	r24, r14
   1958a:	0e 94 3c c1 	call	0x18278	; 0x18278 <lif_read>
   1958e:	60 32       	cpi	r22, 0x20	; 32
   19590:	71 05       	cpc	r23, r1
   19592:	81 05       	cpc	r24, r1
   19594:	91 05       	cpc	r25, r1
   19596:	a8 f2       	brcs	.-86     	; 0x19542 <lif_readdirindex+0x16>
   19598:	b7 01       	movw	r22, r14
   1959a:	ce 01       	movw	r24, r28
   1959c:	06 96       	adiw	r24, 0x06	; 6
   1959e:	75 d9       	rcall	.-3350   	; 0x1888a <lif_str2dir>
   195a0:	f7 01       	movw	r30, r14
   195a2:	e6 5a       	subi	r30, 0xA6	; 166
   195a4:	ff 4f       	sbci	r31, 0xFF	; 255
   195a6:	80 81       	ld	r24, Z
   195a8:	91 81       	ldd	r25, Z+1	; 0x01
   195aa:	01 96       	adiw	r24, 0x01	; 1
   195ac:	19 f4       	brne	.+6      	; 0x195b4 <lif_readdirindex+0x88>
   195ae:	f7 01       	movw	r30, r14
   195b0:	d3 a2       	std	Z+35, r13	; 0x23
   195b2:	c2 a2       	std	Z+34, r12	; 0x22
   195b4:	c7 01       	movw	r24, r14
   195b6:	77 dd       	rcall	.-1298   	; 0x190a6 <lif_check_dir>
   195b8:	8c 01       	movw	r16, r24
   195ba:	89 2b       	or	r24, r25
   195bc:	b9 f4       	brne	.+46     	; 0x195ec <lif_readdirindex+0xc0>
   195be:	ed b7       	in	r30, 0x3d	; 61
   195c0:	fe b7       	in	r31, 0x3e	; 62
   195c2:	d5 82       	std	Z+5, r13	; 0x05
   195c4:	c4 82       	std	Z+4, r12	; 0x04
   195c6:	8b e1       	ldi	r24, 0x1B	; 27
   195c8:	9c e3       	ldi	r25, 0x3C	; 60
   195ca:	a0 e0       	ldi	r26, 0x00	; 0
   195cc:	81 83       	std	Z+1, r24	; 0x01
   195ce:	92 83       	std	Z+2, r25	; 0x02
   195d0:	a3 83       	std	Z+3, r26	; 0x03
   195d2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   195d6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   195da:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   195de:	92 ff       	sbrs	r25, 2
   195e0:	b0 cf       	rjmp	.-160    	; 0x19542 <lif_readdirindex+0x16>
   195e2:	66 ef       	ldi	r22, 0xF6	; 246
   195e4:	75 e1       	ldi	r23, 0x15	; 21
   195e6:	c7 01       	movw	r24, r14
   195e8:	ad da       	rcall	.-2726   	; 0x18b44 <lif_dump_vol>
   195ea:	02 c0       	rjmp	.+4      	; 0x195f0 <lif_readdirindex+0xc4>
   195ec:	01 e0       	ldi	r16, 0x01	; 1
   195ee:	10 e0       	ldi	r17, 0x00	; 0
   195f0:	c8 01       	movw	r24, r16
   195f2:	a5 96       	adiw	r28, 0x25	; 37
   195f4:	e8 e0       	ldi	r30, 0x08	; 8
   195f6:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__epilogue_restores__+0x14>

000195fa <lif_writedirindex>:
   195fa:	a0 e2       	ldi	r26, 0x20	; 32
   195fc:	b0 e0       	ldi	r27, 0x00	; 0
   195fe:	e3 e0       	ldi	r30, 0x03	; 3
   19600:	fb ec       	ldi	r31, 0xCB	; 203
   19602:	0c 94 6e e6 	jmp	0x1ccdc	; 0x1ccdc <__prologue_saves__+0x10>
   19606:	5c 01       	movw	r10, r24
   19608:	6b 01       	movw	r12, r22
   1960a:	4d dd       	rcall	.-1382   	; 0x190a6 <lif_check_dir>
   1960c:	7c 01       	movw	r14, r24
   1960e:	89 2b       	or	r24, r25
   19610:	71 f4       	brne	.+28     	; 0x1962e <lif_writedirindex+0x34>
   19612:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19616:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1961a:	92 fd       	sbrc	r25, 2
   1961c:	03 c0       	rjmp	.+6      	; 0x19624 <lif_writedirindex+0x2a>
   1961e:	e1 2c       	mov	r14, r1
   19620:	f1 2c       	mov	r15, r1
   19622:	42 c0       	rjmp	.+132    	; 0x196a8 <lif_writedirindex+0xae>
   19624:	67 e0       	ldi	r22, 0x07	; 7
   19626:	76 e1       	ldi	r23, 0x16	; 22
   19628:	c5 01       	movw	r24, r10
   1962a:	8c da       	rcall	.-2792   	; 0x18b44 <lif_dump_vol>
   1962c:	3d c0       	rjmp	.+122    	; 0x196a8 <lif_writedirindex+0xae>
   1962e:	b6 01       	movw	r22, r12
   19630:	c5 01       	movw	r24, r10
   19632:	14 df       	rcall	.-472    	; 0x1945c <lif_checkdirindex>
   19634:	89 2b       	or	r24, r25
   19636:	99 f3       	breq	.-26     	; 0x1961e <lif_writedirindex+0x24>
   19638:	f5 01       	movw	r30, r10
   1963a:	e6 5a       	subi	r30, 0xA6	; 166
   1963c:	ff 4f       	sbci	r31, 0xFF	; 255
   1963e:	80 81       	ld	r24, Z
   19640:	91 81       	ldd	r25, Z+1	; 0x01
   19642:	01 96       	adiw	r24, 0x01	; 1
   19644:	19 f4       	brne	.+6      	; 0x1964c <lif_writedirindex+0x52>
   19646:	f5 01       	movw	r30, r10
   19648:	d3 a2       	std	Z+35, r13	; 0x23
   1964a:	c2 a2       	std	Z+34, r12	; 0x22
   1964c:	f5 01       	movw	r30, r10
   1964e:	85 a5       	ldd	r24, Z+45	; 0x2d
   19650:	96 a5       	ldd	r25, Z+46	; 0x2e
   19652:	a7 a5       	ldd	r26, Z+47	; 0x2f
   19654:	b0 a9       	ldd	r27, Z+48	; 0x30
   19656:	ba 2f       	mov	r27, r26
   19658:	a9 2f       	mov	r26, r25
   1965a:	98 2f       	mov	r25, r24
   1965c:	88 27       	eor	r24, r24
   1965e:	0d 2c       	mov	r0, r13
   19660:	00 0c       	add	r0, r0
   19662:	ee 08       	sbc	r14, r14
   19664:	ff 08       	sbc	r15, r15
   19666:	35 e0       	ldi	r19, 0x05	; 5
   19668:	cc 0c       	add	r12, r12
   1966a:	dd 1c       	adc	r13, r13
   1966c:	ee 1c       	adc	r14, r14
   1966e:	ff 1c       	adc	r15, r15
   19670:	3a 95       	dec	r19
   19672:	d1 f7       	brne	.-12     	; 0x19668 <lif_writedirindex+0x6e>
   19674:	c8 0e       	add	r12, r24
   19676:	d9 1e       	adc	r13, r25
   19678:	ea 1e       	adc	r14, r26
   1967a:	fb 1e       	adc	r15, r27
   1967c:	be 01       	movw	r22, r28
   1967e:	6f 5f       	subi	r22, 0xFF	; 255
   19680:	7f 4f       	sbci	r23, 0xFF	; 255
   19682:	c5 01       	movw	r24, r10
   19684:	97 d8       	rcall	.-3794   	; 0x187b4 <lif_dir2str>
   19686:	00 e2       	ldi	r16, 0x20	; 32
   19688:	10 e0       	ldi	r17, 0x00	; 0
   1968a:	a7 01       	movw	r20, r14
   1968c:	96 01       	movw	r18, r12
   1968e:	be 01       	movw	r22, r28
   19690:	6f 5f       	subi	r22, 0xFF	; 255
   19692:	7f 4f       	sbci	r23, 0xFF	; 255
   19694:	c5 01       	movw	r24, r10
   19696:	0e 94 8f c1 	call	0x1831e	; 0x1831e <lif_write>
   1969a:	31 e0       	ldi	r19, 0x01	; 1
   1969c:	20 e0       	ldi	r18, 0x00	; 0
   1969e:	80 97       	sbiw	r24, 0x20	; 32
   196a0:	0c f4       	brge	.+2      	; 0x196a4 <lif_writedirindex+0xaa>
   196a2:	30 e0       	ldi	r19, 0x00	; 0
   196a4:	e3 2e       	mov	r14, r19
   196a6:	f2 2e       	mov	r15, r18
   196a8:	c7 01       	movw	r24, r14
   196aa:	a0 96       	adiw	r28, 0x20	; 32
   196ac:	ea e0       	ldi	r30, 0x0A	; 10
   196ae:	0c 94 8a e6 	jmp	0x1cd14	; 0x1cd14 <__epilogue_restores__+0x10>

000196b2 <lif_writedirEOF>:
   196b2:	0f 93       	push	r16
   196b4:	1f 93       	push	r17
   196b6:	cf 93       	push	r28
   196b8:	df 93       	push	r29
   196ba:	ec 01       	movw	r28, r24
   196bc:	8b 01       	movw	r16, r22
   196be:	33 da       	rcall	.-2970   	; 0x18b26 <lif_dir_clear>
   196c0:	fe 01       	movw	r30, r28
   196c2:	e6 5a       	subi	r30, 0xA6	; 166
   196c4:	ff 4f       	sbci	r31, 0xFF	; 255
   196c6:	8f ef       	ldi	r24, 0xFF	; 255
   196c8:	9f ef       	ldi	r25, 0xFF	; 255
   196ca:	91 83       	std	Z+1, r25	; 0x01
   196cc:	80 83       	st	Z, r24
   196ce:	1b a3       	std	Y+35, r17	; 0x23
   196d0:	0a a3       	std	Y+34, r16	; 0x22
   196d2:	b8 01       	movw	r22, r16
   196d4:	ce 01       	movw	r24, r28
   196d6:	91 df       	rcall	.-222    	; 0x195fa <lif_writedirindex>
   196d8:	df 91       	pop	r29
   196da:	cf 91       	pop	r28
   196dc:	1f 91       	pop	r17
   196de:	0f 91       	pop	r16
   196e0:	08 95       	ret

000196e2 <lif_updatefree>:
/// @brief Update free space
/// @parameter[in] *LIF: LIF structure
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
   196e2:	2f 92       	push	r2
   196e4:	3f 92       	push	r3
   196e6:	4f 92       	push	r4
   196e8:	5f 92       	push	r5
   196ea:	6f 92       	push	r6
   196ec:	7f 92       	push	r7
   196ee:	8f 92       	push	r8
   196f0:	af 92       	push	r10
   196f2:	bf 92       	push	r11
   196f4:	cf 92       	push	r12
   196f6:	df 92       	push	r13
   196f8:	ef 92       	push	r14
   196fa:	ff 92       	push	r15
   196fc:	0f 93       	push	r16
   196fe:	1f 93       	push	r17
   19700:	cf 93       	push	r28
   19702:	df 93       	push	r29
   19704:	cd b7       	in	r28, 0x3d	; 61
   19706:	de b7       	in	r29, 0x3e	; 62
   19708:	2f 97       	sbiw	r28, 0x0f	; 15
   1970a:	0f b6       	in	r0, 0x3f	; 63
   1970c:	f8 94       	cli
   1970e:	de bf       	out	0x3e, r29	; 62
   19710:	0f be       	out	0x3f, r0	; 63
   19712:	cd bf       	out	0x3d, r28	; 61
   19714:	9f 87       	std	Y+15, r25	; 0x0f
   19716:	8e 87       	std	Y+14, r24	; 0x0e
    int index = 0;
    int purgeindex = -1;

// Start of free space
    uint32_t start = LIF->filestart;
   19718:	fc 01       	movw	r30, r24
   1971a:	24 84       	ldd	r2, Z+12	; 0x0c
   1971c:	35 84       	ldd	r3, Z+13	; 0x0d
   1971e:	46 84       	ldd	r4, Z+14	; 0x0e
   19720:	57 84       	ldd	r5, Z+15	; 0x0f
// Free sectors
    LIF->freesectors = LIF->filesectors;
   19722:	80 89       	ldd	r24, Z+16	; 0x10
   19724:	91 89       	ldd	r25, Z+17	; 0x11
   19726:	a2 89       	ldd	r26, Z+18	; 0x12
   19728:	b3 89       	ldd	r27, Z+19	; 0x13
   1972a:	80 8f       	std	Z+24, r24	; 0x18
   1972c:	91 8f       	std	Z+25, r25	; 0x19
   1972e:	a2 8f       	std	Z+26, r26	; 0x1a
   19730:	b3 8f       	std	Z+27, r27	; 0x1b
// Used sectors
    LIF->usedsectors = 0;
   19732:	14 8a       	std	Z+20, r1	; 0x14
   19734:	15 8a       	std	Z+21, r1	; 0x15
   19736:	16 8a       	std	Z+22, r1	; 0x16
   19738:	17 8a       	std	Z+23, r1	; 0x17
// Purged files
    LIF->purged= 0;
   1973a:	17 8e       	std	Z+31, r1	; 0x1f
   1973c:	16 8e       	std	Z+30, r1	; 0x1e
// Files
    LIF->files = 0;
   1973e:	15 8e       	std	Z+29, r1	; 0x1d
   19740:	14 8e       	std	Z+28, r1	; 0x1c
// Director pointer
    LIF->dirindex = 0;
   19742:	11 a2       	std	Z+33, r1	; 0x21
   19744:	10 a2       	std	Z+32, r1	; 0x20
// Directory EOF record
    LIF->EOFindex = 0;
   19746:	13 a2       	std	Z+35, r1	; 0x23
   19748:	12 a2       	std	Z+34, r1	; 0x22
   1974a:	cc 24       	eor	r12, r12
   1974c:	c3 94       	inc	r12
   1974e:	d1 2c       	mov	r13, r1
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
    int index = 0;
    int purgeindex = -1;
   19750:	0f ef       	ldi	r16, 0xFF	; 255
   19752:	1f ef       	ldi	r17, 0xFF	; 255
        if( !lif_readdirindex(LIF,index) )
        {
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
   19754:	e6 5a       	subi	r30, 0xA6	; 166
   19756:	ff 4f       	sbci	r31, 0xFF	; 255
   19758:	f9 87       	std	Y+9, r31	; 0x09
   1975a:	e8 87       	std	Y+8, r30	; 0x08
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   1975c:	ae 84       	ldd	r10, Y+14	; 0x0e
   1975e:	bf 84       	ldd	r11, Y+15	; 0x0f
   19760:	fc e5       	ldi	r31, 0x5C	; 92
   19762:	af 0e       	add	r10, r31
   19764:	b1 1c       	adc	r11, r1
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   19766:	8e 85       	ldd	r24, Y+14	; 0x0e
   19768:	9f 85       	ldd	r25, Y+15	; 0x0f
   1976a:	80 5a       	subi	r24, 0xA0	; 160
   1976c:	9f 4f       	sbci	r25, 0xFF	; 255
   1976e:	9b 87       	std	Y+11, r25	; 0x0b
   19770:	8a 87       	std	Y+10, r24	; 0x0a
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
        {
            if(debuglevel & LIF_DEBUG)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   19772:	ee 85       	ldd	r30, Y+14	; 0x0e
   19774:	ff 85       	ldd	r31, Y+15	; 0x0f
   19776:	e1 5b       	subi	r30, 0xB1	; 177
   19778:	ff 4f       	sbci	r31, 0xFF	; 255
   1977a:	fd 87       	std	Y+13, r31	; 0x0d
   1977c:	ec 87       	std	Y+12, r30	; 0x0c
   1977e:	8e ec       	ldi	r24, 0xCE	; 206
   19780:	9b e3       	ldi	r25, 0x3B	; 59
   19782:	3c 01       	movw	r6, r24
   19784:	81 2c       	mov	r8, r1
   19786:	76 01       	movw	r14, r12
   19788:	21 e0       	ldi	r18, 0x01	; 1
   1978a:	e2 1a       	sub	r14, r18
   1978c:	f1 08       	sbc	r15, r1
    LIF->EOFindex = 0;

/// Update free
    while(1)
    {
        if( !lif_readdirindex(LIF,index) )
   1978e:	b7 01       	movw	r22, r14
   19790:	8e 85       	ldd	r24, Y+14	; 0x0e
   19792:	9f 85       	ldd	r25, Y+15	; 0x0f
   19794:	cb de       	rcall	.-618    	; 0x1952c <lif_readdirindex>
   19796:	89 2b       	or	r24, r25
   19798:	19 f4       	brne	.+6      	; 0x197a0 <lif_updatefree+0xbe>
        {
            return(NULL);
   1979a:	80 e0       	ldi	r24, 0x00	; 0
   1979c:	90 e0       	ldi	r25, 0x00	; 0
   1979e:	93 c0       	rjmp	.+294    	; 0x198c6 <lif_updatefree+0x1e4>
        }

        if(LIF->DIR.FileType == 0xffff)
   197a0:	e8 85       	ldd	r30, Y+8	; 0x08
   197a2:	f9 85       	ldd	r31, Y+9	; 0x09
   197a4:	80 81       	ld	r24, Z
   197a6:	91 81       	ldd	r25, Z+1	; 0x01
   197a8:	8f 3f       	cpi	r24, 0xFF	; 255
   197aa:	ff ef       	ldi	r31, 0xFF	; 255
   197ac:	9f 07       	cpc	r25, r31
   197ae:	c1 f4       	brne	.+48     	; 0x197e0 <lif_updatefree+0xfe>
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
            {
                LIF->EOFindex = purgeindex;
   197b0:	ee 85       	ldd	r30, Y+14	; 0x0e
   197b2:	ff 85       	ldd	r31, Y+15	; 0x0f
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
   197b4:	0f 3f       	cpi	r16, 0xFF	; 255
   197b6:	2f ef       	ldi	r18, 0xFF	; 255
   197b8:	12 07       	cpc	r17, r18
   197ba:	09 f4       	brne	.+2      	; 0x197be <lif_updatefree+0xdc>
   197bc:	7a c0       	rjmp	.+244    	; 0x198b2 <lif_updatefree+0x1d0>
            {
                LIF->EOFindex = purgeindex;
   197be:	13 a3       	std	Z+35, r17	; 0x23
   197c0:	02 a3       	std	Z+34, r16	; 0x22

// Adjust purged file count
                LIF->purged -= (index - purgeindex);
   197c2:	e0 1a       	sub	r14, r16
   197c4:	f1 0a       	sbc	r15, r17
   197c6:	86 8d       	ldd	r24, Z+30	; 0x1e
   197c8:	97 8d       	ldd	r25, Z+31	; 0x1f
   197ca:	8e 19       	sub	r24, r14
   197cc:	9f 09       	sbc	r25, r15
   197ce:	97 8f       	std	Z+31, r25	; 0x1f
   197d0:	86 8f       	std	Z+30, r24	; 0x1e
// update EOF
                if(!lif_writedirEOF(LIF,purgeindex))
   197d2:	b8 01       	movw	r22, r16
   197d4:	cf 01       	movw	r24, r30
   197d6:	6d df       	rcall	.-294    	; 0x196b2 <lif_writedirEOF>
   197d8:	89 2b       	or	r24, r25
   197da:	09 f0       	breq	.+2      	; 0x197de <lif_updatefree+0xfc>
   197dc:	6c c0       	rjmp	.+216    	; 0x198b6 <lif_updatefree+0x1d4>
   197de:	dd cf       	rjmp	.-70     	; 0x1979a <lif_updatefree+0xb8>
                    return(NULL);
                }
            }
            break;
        }
        if(LIF->DIR.FileType == 0)
   197e0:	89 2b       	or	r24, r25
   197e2:	81 f4       	brne	.+32     	; 0x19804 <lif_updatefree+0x122>
        {
            if(purgeindex == -1)
   197e4:	0f 3f       	cpi	r16, 0xFF	; 255
   197e6:	ff ef       	ldi	r31, 0xFF	; 255
   197e8:	1f 07       	cpc	r17, r31
   197ea:	09 f4       	brne	.+2      	; 0x197ee <lif_updatefree+0x10c>
   197ec:	87 01       	movw	r16, r14
                purgeindex = index;
            LIF->purged++;
   197ee:	ee 85       	ldd	r30, Y+14	; 0x0e
   197f0:	ff 85       	ldd	r31, Y+15	; 0x0f
   197f2:	86 8d       	ldd	r24, Z+30	; 0x1e
   197f4:	97 8d       	ldd	r25, Z+31	; 0x1f
   197f6:	01 96       	adiw	r24, 0x01	; 1
   197f8:	97 8f       	std	Z+31, r25	; 0x1f
   197fa:	86 8f       	std	Z+30, r24	; 0x1e
   197fc:	ff ef       	ldi	r31, 0xFF	; 255
   197fe:	cf 1a       	sub	r12, r31
   19800:	df 0a       	sbc	r13, r31
   19802:	c1 cf       	rjmp	.-126    	; 0x19786 <lif_updatefree+0xa4>
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   19804:	f5 01       	movw	r30, r10
   19806:	80 81       	ld	r24, Z
   19808:	91 81       	ldd	r25, Z+1	; 0x01
   1980a:	a2 81       	ldd	r26, Z+2	; 0x02
   1980c:	b3 81       	ldd	r27, Z+3	; 0x03
   1980e:	82 15       	cp	r24, r2
   19810:	93 05       	cpc	r25, r3
   19812:	a4 05       	cpc	r26, r4
   19814:	b5 05       	cpc	r27, r5
   19816:	c8 f4       	brcc	.+50     	; 0x1984a <lif_updatefree+0x168>
        {
            if(debuglevel & LIF_DEBUG)
   19818:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1981c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19820:	92 ff       	sbrs	r25, 2
   19822:	13 c0       	rjmp	.+38     	; 0x1984a <lif_updatefree+0x168>
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   19824:	8c 85       	ldd	r24, Y+12	; 0x0c
   19826:	9d 85       	ldd	r25, Y+13	; 0x0d
   19828:	ed b7       	in	r30, 0x3d	; 61
   1982a:	fe b7       	in	r31, 0x3e	; 62
   1982c:	97 83       	std	Z+7, r25	; 0x07
   1982e:	86 83       	std	Z+6, r24	; 0x06
   19830:	ee 85       	ldd	r30, Y+14	; 0x0e
   19832:	ff 85       	ldd	r31, Y+15	; 0x0f
   19834:	80 81       	ld	r24, Z
   19836:	91 81       	ldd	r25, Z+1	; 0x01
   19838:	ed b7       	in	r30, 0x3d	; 61
   1983a:	fe b7       	in	r31, 0x3e	; 62
   1983c:	95 83       	std	Z+5, r25	; 0x05
   1983e:	84 83       	std	Z+4, r24	; 0x04
   19840:	61 82       	std	Z+1, r6	; 0x01
   19842:	72 82       	std	Z+2, r7	; 0x02
   19844:	83 82       	std	Z+3, r8	; 0x03
   19846:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   1984a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1984c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1984e:	80 81       	ld	r24, Z
   19850:	91 81       	ldd	r25, Z+1	; 0x01
   19852:	a2 81       	ldd	r26, Z+2	; 0x02
   19854:	b3 81       	ldd	r27, Z+3	; 0x03
   19856:	ee 85       	ldd	r30, Y+14	; 0x0e
   19858:	ff 85       	ldd	r31, Y+15	; 0x0f
   1985a:	44 89       	ldd	r20, Z+20	; 0x14
   1985c:	55 89       	ldd	r21, Z+21	; 0x15
   1985e:	66 89       	ldd	r22, Z+22	; 0x16
   19860:	77 89       	ldd	r23, Z+23	; 0x17
   19862:	48 0f       	add	r20, r24
   19864:	59 1f       	adc	r21, r25
   19866:	6a 1f       	adc	r22, r26
   19868:	7b 1f       	adc	r23, r27
   1986a:	44 8b       	std	Z+20, r20	; 0x14
   1986c:	55 8b       	std	Z+21, r21	; 0x15
   1986e:	66 8b       	std	Z+22, r22	; 0x16
   19870:	77 8b       	std	Z+23, r23	; 0x17
        LIF->freesectors -= LIF->DIR.FileSectors;
   19872:	40 8d       	ldd	r20, Z+24	; 0x18
   19874:	51 8d       	ldd	r21, Z+25	; 0x19
   19876:	62 8d       	ldd	r22, Z+26	; 0x1a
   19878:	73 8d       	ldd	r23, Z+27	; 0x1b
   1987a:	48 1b       	sub	r20, r24
   1987c:	59 0b       	sbc	r21, r25
   1987e:	6a 0b       	sbc	r22, r26
   19880:	7b 0b       	sbc	r23, r27
   19882:	40 8f       	std	Z+24, r20	; 0x18
   19884:	51 8f       	std	Z+25, r21	; 0x19
   19886:	62 8f       	std	Z+26, r22	; 0x1a
   19888:	73 8f       	std	Z+27, r23	; 0x1b
        LIF->files++;
   1988a:	24 8d       	ldd	r18, Z+28	; 0x1c
   1988c:	35 8d       	ldd	r19, Z+29	; 0x1d
   1988e:	2f 5f       	subi	r18, 0xFF	; 255
   19890:	3f 4f       	sbci	r19, 0xFF	; 255
   19892:	35 8f       	std	Z+29, r19	; 0x1d
   19894:	24 8f       	std	Z+28, r18	; 0x1c
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19896:	f5 01       	movw	r30, r10
   19898:	40 81       	ld	r20, Z
   1989a:	51 81       	ldd	r21, Z+1	; 0x01
   1989c:	62 81       	ldd	r22, Z+2	; 0x02
   1989e:	73 81       	ldd	r23, Z+3	; 0x03
   198a0:	1c 01       	movw	r2, r24
   198a2:	2d 01       	movw	r4, r26
   198a4:	24 0e       	add	r2, r20
   198a6:	35 1e       	adc	r3, r21
   198a8:	46 1e       	adc	r4, r22
   198aa:	57 1e       	adc	r5, r23
                purgeindex = index;
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
   198ac:	0f ef       	ldi	r16, 0xFF	; 255
   198ae:	1f ef       	ldi	r17, 0xFF	; 255
   198b0:	a5 cf       	rjmp	.-182    	; 0x197fc <lif_updatefree+0x11a>
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
   198b2:	f3 a2       	std	Z+35, r15	; 0x23
   198b4:	e2 a2       	std	Z+34, r14	; 0x22
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   198b6:	8f ef       	ldi	r24, 0xFF	; 255
   198b8:	9f ef       	ldi	r25, 0xFF	; 255
   198ba:	ee 85       	ldd	r30, Y+14	; 0x0e
   198bc:	ff 85       	ldd	r31, Y+15	; 0x0f
   198be:	91 a3       	std	Z+33, r25	; 0x21
   198c0:	80 a3       	std	Z+32, r24	; 0x20
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
    }
// rewind
    lif_rewinddir(LIF);
    return(LIF);
   198c2:	8e 85       	ldd	r24, Y+14	; 0x0e
   198c4:	9f 85       	ldd	r25, Y+15	; 0x0f
}
   198c6:	2f 96       	adiw	r28, 0x0f	; 15
   198c8:	0f b6       	in	r0, 0x3f	; 63
   198ca:	f8 94       	cli
   198cc:	de bf       	out	0x3e, r29	; 62
   198ce:	0f be       	out	0x3f, r0	; 63
   198d0:	cd bf       	out	0x3d, r28	; 61
   198d2:	df 91       	pop	r29
   198d4:	cf 91       	pop	r28
   198d6:	1f 91       	pop	r17
   198d8:	0f 91       	pop	r16
   198da:	ff 90       	pop	r15
   198dc:	ef 90       	pop	r14
   198de:	df 90       	pop	r13
   198e0:	cf 90       	pop	r12
   198e2:	bf 90       	pop	r11
   198e4:	af 90       	pop	r10
   198e6:	8f 90       	pop	r8
   198e8:	7f 90       	pop	r7
   198ea:	6f 90       	pop	r6
   198ec:	5f 90       	pop	r5
   198ee:	4f 90       	pop	r4
   198f0:	3f 90       	pop	r3
   198f2:	2f 90       	pop	r2
   198f4:	08 95       	ret

000198f6 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   198f6:	a9 e2       	ldi	r26, 0x29	; 41
   198f8:	b1 e0       	ldi	r27, 0x01	; 1
   198fa:	e1 e8       	ldi	r30, 0x81	; 129
   198fc:	fc ec       	ldi	r31, 0xCC	; 204
   198fe:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
   19902:	4c 01       	movw	r8, r24
   19904:	3b 01       	movw	r6, r22
   19906:	19 01       	movw	r2, r18
   19908:	2a 01       	movw	r4, r20
   1990a:	ca 5d       	subi	r28, 0xDA	; 218
   1990c:	de 4f       	sbci	r29, 0xFE	; 254
   1990e:	e8 82       	st	Y, r14
   19910:	f9 82       	std	Y+1, r15	; 0x01
   19912:	0a 83       	std	Y+2, r16	; 0x02
   19914:	1b 83       	std	Y+3, r17	; 0x03
   19916:	c6 52       	subi	r28, 0x26	; 38
   19918:	d1 40       	sbci	r29, 0x01	; 1
   1991a:	c2 5e       	subi	r28, 0xE2	; 226
   1991c:	de 4f       	sbci	r29, 0xFE	; 254
   1991e:	a8 82       	st	Y, r10
   19920:	b9 82       	std	Y+1, r11	; 0x01
   19922:	ca 82       	std	Y+2, r12	; 0x02
   19924:	db 82       	std	Y+3, r13	; 0x03
   19926:	ce 51       	subi	r28, 0x1E	; 30
   19928:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   1992a:	80 e0       	ldi	r24, 0x00	; 0
   1992c:	90 e0       	ldi	r25, 0x00	; 0
   1992e:	0e 94 a7 37 	call	0x6f4e	; 0x6f4e <time>
   19932:	5b 01       	movw	r10, r22
   19934:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   19936:	64 e7       	ldi	r22, 0x74	; 116
   19938:	70 e0       	ldi	r23, 0x00	; 0
   1993a:	80 e0       	ldi	r24, 0x00	; 0
   1993c:	90 e0       	ldi	r25, 0x00	; 0
   1993e:	0e 94 4e c0 	call	0x1809c	; 0x1809c <lif_calloc>
   19942:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   19944:	89 2b       	or	r24, r25
   19946:	09 f4       	brne	.+2      	; 0x1994a <lif_create_volume+0x54>
   19948:	b6 c2       	rjmp	.+1388   	; 0x19eb6 <lif_create_volume+0x5c0>
        return(NULL);

    printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   1994a:	c2 5e       	subi	r28, 0xE2	; 226
   1994c:	de 4f       	sbci	r29, 0xFE	; 254
   1994e:	28 81       	ld	r18, Y
   19950:	39 81       	ldd	r19, Y+1	; 0x01
   19952:	4a 81       	ldd	r20, Y+2	; 0x02
   19954:	5b 81       	ldd	r21, Y+3	; 0x03
   19956:	ce 51       	subi	r28, 0x1E	; 30
   19958:	d1 40       	sbci	r29, 0x01	; 1
   1995a:	ed b7       	in	r30, 0x3d	; 61
   1995c:	fe b7       	in	r31, 0x3e	; 62
   1995e:	20 8b       	std	Z+16, r18	; 0x10
   19960:	31 8b       	std	Z+17, r19	; 0x11
   19962:	42 8b       	std	Z+18, r20	; 0x12
   19964:	53 8b       	std	Z+19, r21	; 0x13
   19966:	ca 5d       	subi	r28, 0xDA	; 218
   19968:	de 4f       	sbci	r29, 0xFE	; 254
   1996a:	28 81       	ld	r18, Y
   1996c:	39 81       	ldd	r19, Y+1	; 0x01
   1996e:	4a 81       	ldd	r20, Y+2	; 0x02
   19970:	5b 81       	ldd	r21, Y+3	; 0x03
   19972:	c6 52       	subi	r28, 0x26	; 38
   19974:	d1 40       	sbci	r29, 0x01	; 1
   19976:	24 87       	std	Z+12, r18	; 0x0c
   19978:	35 87       	std	Z+13, r19	; 0x0d
   1997a:	46 87       	std	Z+14, r20	; 0x0e
   1997c:	57 87       	std	Z+15, r21	; 0x0f
   1997e:	20 86       	std	Z+8, r2	; 0x08
   19980:	31 86       	std	Z+9, r3	; 0x09
   19982:	42 86       	std	Z+10, r4	; 0x0a
   19984:	53 86       	std	Z+11, r5	; 0x0b
   19986:	77 82       	std	Z+7, r7	; 0x07
   19988:	66 82       	std	Z+6, r6	; 0x06
   1998a:	95 82       	std	Z+5, r9	; 0x05
   1998c:	84 82       	std	Z+4, r8	; 0x04
   1998e:	89 ea       	ldi	r24, 0xA9	; 169
   19990:	9c e3       	ldi	r25, 0x3C	; 60
   19992:	a0 e0       	ldi	r26, 0x00	; 0
   19994:	81 83       	std	Z+1, r24	; 0x01
   19996:	92 83       	std	Z+2, r25	; 0x02
   19998:	a3 83       	std	Z+3, r26	; 0x03
   1999a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & LIF_DEBUG)
   1999e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   199a2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   199a6:	92 ff       	sbrs	r25, 2
   199a8:	04 c0       	rjmp	.+8      	; 0x199b2 <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   199aa:	69 e1       	ldi	r22, 0x19	; 25
   199ac:	76 e1       	ldi	r23, 0x16	; 22
   199ae:	c7 01       	movw	r24, r14
   199b0:	c9 d8       	rcall	.-3694   	; 0x18b44 <lif_dump_vol>

    lif_image_clear(LIF);
   199b2:	c7 01       	movw	r24, r14
   199b4:	b2 d8       	rcall	.-3740   	; 0x18b1a <lif_image_clear>

// Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   199b6:	80 e0       	ldi	r24, 0x00	; 0
   199b8:	90 e8       	ldi	r25, 0x80	; 128
   199ba:	f7 01       	movw	r30, r14
   199bc:	95 a3       	std	Z+37, r25	; 0x25
   199be:	84 a3       	std	Z+36, r24	; 0x24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   199c0:	46 e0       	ldi	r20, 0x06	; 6
   199c2:	50 e0       	ldi	r21, 0x00	; 0
   199c4:	b3 01       	movw	r22, r6
   199c6:	c7 01       	movw	r24, r14
   199c8:	86 96       	adiw	r24, 0x26	; 38
   199ca:	0e 94 91 c2 	call	0x18522	; 0x18522 <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   199ce:	f7 01       	movw	r30, r14
   199d0:	25 a6       	std	Z+45, r2	; 0x2d
   199d2:	36 a6       	std	Z+46, r3	; 0x2e
   199d4:	47 a6       	std	Z+47, r4	; 0x2f
   199d6:	50 aa       	std	Z+48, r5	; 0x30
    LIF->VOL.DirSectors = dirsectors;
   199d8:	ca 5d       	subi	r28, 0xDA	; 218
   199da:	de 4f       	sbci	r29, 0xFE	; 254
   199dc:	28 81       	ld	r18, Y
   199de:	39 81       	ldd	r19, Y+1	; 0x01
   199e0:	4a 81       	ldd	r20, Y+2	; 0x02
   199e2:	5b 81       	ldd	r21, Y+3	; 0x03
   199e4:	c6 52       	subi	r28, 0x26	; 38
   199e6:	d1 40       	sbci	r29, 0x01	; 1
   199e8:	25 ab       	std	Z+53, r18	; 0x35
   199ea:	36 ab       	std	Z+54, r19	; 0x36
   199ec:	47 ab       	std	Z+55, r20	; 0x37
   199ee:	50 af       	std	Z+56, r21	; 0x38
    LIF->VOL.System3000LIFid = 0x1000;
   199f0:	80 e0       	ldi	r24, 0x00	; 0
   199f2:	90 e1       	ldi	r25, 0x10	; 16
   199f4:	92 ab       	std	Z+50, r25	; 0x32
   199f6:	81 ab       	std	Z+49, r24	; 0x31
    LIF->VOL.tracks_per_side = 0;
   199f8:	fd 96       	adiw	r30, 0x3d	; 61
   199fa:	10 82       	st	Z, r1
   199fc:	11 82       	std	Z+1, r1	; 0x01
   199fe:	12 82       	std	Z+2, r1	; 0x02
   19a00:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sides = 0;
   19a02:	34 96       	adiw	r30, 0x04	; 4
   19a04:	10 82       	st	Z, r1
   19a06:	11 82       	std	Z+1, r1	; 0x01
   19a08:	12 82       	std	Z+2, r1	; 0x02
   19a0a:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sectors_per_track = 0;
   19a0c:	34 96       	adiw	r30, 0x04	; 4
   19a0e:	10 82       	st	Z, r1
   19a10:	11 82       	std	Z+1, r1	; 0x01
   19a12:	12 82       	std	Z+2, r1	; 0x02
   19a14:	13 82       	std	Z+3, r1	; 0x03
///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   19a16:	a7 01       	movw	r20, r14
   19a18:	47 5b       	subi	r20, 0xB7	; 183
   19a1a:	5f 4f       	sbci	r21, 0xFF	; 255
   19a1c:	c6 01       	movw	r24, r12
   19a1e:	b5 01       	movw	r22, r10
   19a20:	0e 94 b6 c4 	call	0x1896c	; 0x1896c <lif_time2lifbcd>

// update LIF headers
    LIF->name = lif_stralloc(imagename);
   19a24:	c4 01       	movw	r24, r8
   19a26:	0e 94 99 c0 	call	0x18132	; 0x18132 <lif_stralloc>
   19a2a:	d7 01       	movw	r26, r14
   19a2c:	8d 93       	st	X+, r24
   19a2e:	9c 93       	st	X, r25
    if(LIF->name == NULL)
   19a30:	89 2b       	or	r24, r25
   19a32:	09 f4       	brne	.+2      	; 0x19a36 <lif_create_volume+0x140>
   19a34:	35 c2       	rjmp	.+1130   	; 0x19ea0 <lif_create_volume+0x5aa>
        lif_close_volume(LIF);
        return(NULL);
    }

// Initilize all LIF headers
    LIF->filesectors = filesectors;
   19a36:	c2 5e       	subi	r28, 0xE2	; 226
   19a38:	de 4f       	sbci	r29, 0xFE	; 254
   19a3a:	28 81       	ld	r18, Y
   19a3c:	39 81       	ldd	r19, Y+1	; 0x01
   19a3e:	4a 81       	ldd	r20, Y+2	; 0x02
   19a40:	5b 81       	ldd	r21, Y+3	; 0x03
   19a42:	ce 51       	subi	r28, 0x1E	; 30
   19a44:	d1 40       	sbci	r29, 0x01	; 1
   19a46:	f7 01       	movw	r30, r14
   19a48:	20 8b       	std	Z+16, r18	; 0x10
   19a4a:	31 8b       	std	Z+17, r19	; 0x11
   19a4c:	42 8b       	std	Z+18, r20	; 0x12
   19a4e:	53 8b       	std	Z+19, r21	; 0x13
    LIF->filestart = dirstart + dirsectors;
   19a50:	ca 5d       	subi	r28, 0xDA	; 218
   19a52:	de 4f       	sbci	r29, 0xFE	; 254
   19a54:	88 81       	ld	r24, Y
   19a56:	99 81       	ldd	r25, Y+1	; 0x01
   19a58:	aa 81       	ldd	r26, Y+2	; 0x02
   19a5a:	bb 81       	ldd	r27, Y+3	; 0x03
   19a5c:	c6 52       	subi	r28, 0x26	; 38
   19a5e:	d1 40       	sbci	r29, 0x01	; 1
   19a60:	82 0d       	add	r24, r2
   19a62:	93 1d       	adc	r25, r3
   19a64:	a4 1d       	adc	r26, r4
   19a66:	b5 1d       	adc	r27, r5
   19a68:	84 87       	std	Z+12, r24	; 0x0c
   19a6a:	95 87       	std	Z+13, r25	; 0x0d
   19a6c:	a6 87       	std	Z+14, r26	; 0x0e
   19a6e:	b7 87       	std	Z+15, r27	; 0x0f
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   19a70:	82 0f       	add	r24, r18
   19a72:	93 1f       	adc	r25, r19
   19a74:	a4 1f       	adc	r26, r20
   19a76:	b5 1f       	adc	r27, r21
   19a78:	84 83       	std	Z+4, r24	; 0x04
   19a7a:	95 83       	std	Z+5, r25	; 0x05
   19a7c:	a6 83       	std	Z+6, r26	; 0x06
   19a7e:	b7 83       	std	Z+7, r27	; 0x07
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   19a80:	ba 2f       	mov	r27, r26
   19a82:	a9 2f       	mov	r26, r25
   19a84:	98 2f       	mov	r25, r24
   19a86:	88 27       	eor	r24, r24
   19a88:	80 87       	std	Z+8, r24	; 0x08
   19a8a:	91 87       	std	Z+9, r25	; 0x09
   19a8c:	a2 87       	std	Z+10, r26	; 0x0a
   19a8e:	b3 87       	std	Z+11, r27	; 0x0b
    LIF->freesectors = LIF->filesectors;
   19a90:	20 8f       	std	Z+24, r18	; 0x18
   19a92:	31 8f       	std	Z+25, r19	; 0x19
   19a94:	42 8f       	std	Z+26, r20	; 0x1a
   19a96:	53 8f       	std	Z+27, r21	; 0x1b
    LIF->usedsectors = 0;
   19a98:	14 8a       	std	Z+20, r1	; 0x14
   19a9a:	15 8a       	std	Z+21, r1	; 0x15
   19a9c:	16 8a       	std	Z+22, r1	; 0x16
   19a9e:	17 8a       	std	Z+23, r1	; 0x17
    LIF->files = 0;
   19aa0:	15 8e       	std	Z+29, r1	; 0x1d
   19aa2:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->purged = 0;
   19aa4:	17 8e       	std	Z+31, r1	; 0x1f
   19aa6:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->dirindex = 0;
   19aa8:	11 a2       	std	Z+33, r1	; 0x21
   19aaa:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19aac:	13 a2       	std	Z+35, r1	; 0x23
   19aae:	12 a2       	std	Z+34, r1	; 0x22

    memset(buffer,0,LIF_SECTOR_SIZE);
   19ab0:	61 2c       	mov	r6, r1
   19ab2:	77 24       	eor	r7, r7
   19ab4:	73 94       	inc	r7
   19ab6:	9e 01       	movw	r18, r28
   19ab8:	2c 5e       	subi	r18, 0xEC	; 236
   19aba:	3f 4f       	sbci	r19, 0xFF	; 255
   19abc:	49 01       	movw	r8, r18
   19abe:	d9 01       	movw	r26, r18
   19ac0:	f3 01       	movw	r30, r6
   19ac2:	1d 92       	st	X+, r1
   19ac4:	31 97       	sbiw	r30, 0x01	; 1
   19ac6:	e9 f7       	brne	.-6      	; 0x19ac2 <lif_create_volume+0x1cc>

    lif_vol2str(LIF,buffer);
   19ac8:	b9 01       	movw	r22, r18
   19aca:	c7 01       	movw	r24, r14
   19acc:	0e 94 ce c2 	call	0x1859c	; 0x1859c <lif_vol2str>

// Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   19ad0:	64 e0       	ldi	r22, 0x04	; 4
   19ad2:	79 e0       	ldi	r23, 0x09	; 9
   19ad4:	d7 01       	movw	r26, r14
   19ad6:	8d 91       	ld	r24, X+
   19ad8:	9c 91       	ld	r25, X
   19ada:	0e 94 b8 c0 	call	0x18170	; 0x18170 <lif_open>
   19ade:	f7 01       	movw	r30, r14
   19ae0:	93 83       	std	Z+3, r25	; 0x03
   19ae2:	82 83       	std	Z+2, r24	; 0x02
    if(LIF->fp == NULL)
   19ae4:	89 2b       	or	r24, r25
   19ae6:	09 f4       	brne	.+2      	; 0x19aea <lif_create_volume+0x1f4>
   19ae8:	db c1       	rjmp	.+950    	; 0x19ea0 <lif_create_volume+0x5aa>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19aea:	00 e0       	ldi	r16, 0x00	; 0
   19aec:	11 e0       	ldi	r17, 0x01	; 1
   19aee:	20 e0       	ldi	r18, 0x00	; 0
   19af0:	30 e0       	ldi	r19, 0x00	; 0
   19af2:	a9 01       	movw	r20, r18
   19af4:	b4 01       	movw	r22, r8
   19af6:	c7 01       	movw	r24, r14
   19af8:	0e 94 8f c1 	call	0x1831e	; 0x1831e <lif_write>
   19afc:	9c 01       	movw	r18, r24
   19afe:	99 0f       	add	r25, r25
   19b00:	44 0b       	sbc	r20, r20
   19b02:	55 0b       	sbc	r21, r21
   19b04:	ca 5e       	subi	r28, 0xEA	; 234
   19b06:	de 4f       	sbci	r29, 0xFE	; 254
   19b08:	28 83       	st	Y, r18
   19b0a:	39 83       	std	Y+1, r19	; 0x01
   19b0c:	4a 83       	std	Y+2, r20	; 0x02
   19b0e:	5b 83       	std	Y+3, r21	; 0x03
   19b10:	c6 51       	subi	r28, 0x16	; 22
   19b12:	d1 40       	sbci	r29, 0x01	; 1

    if(size < LIF_SECTOR_SIZE)
   19b14:	2f 3f       	cpi	r18, 0xFF	; 255
   19b16:	31 05       	cpc	r19, r1
   19b18:	41 05       	cpc	r20, r1
   19b1a:	51 05       	cpc	r21, r1
   19b1c:	09 f0       	breq	.+2      	; 0x19b20 <lif_create_volume+0x22a>
   19b1e:	0c f4       	brge	.+2      	; 0x19b22 <lif_create_volume+0x22c>
   19b20:	bf c1       	rjmp	.+894    	; 0x19ea0 <lif_create_volume+0x5aa>
        return(NULL);
    }
    offset += size;
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);
   19b22:	d4 01       	movw	r26, r8
   19b24:	f3 01       	movw	r30, r6
   19b26:	1d 92       	st	X+, r1
   19b28:	31 97       	sbiw	r30, 0x01	; 1
   19b2a:	e9 f7       	brne	.-6      	; 0x19b26 <lif_create_volume+0x230>

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19b2c:	21 e0       	ldi	r18, 0x01	; 1
   19b2e:	30 e0       	ldi	r19, 0x00	; 0
   19b30:	40 e0       	ldi	r20, 0x00	; 0
   19b32:	50 e0       	ldi	r21, 0x00	; 0
   19b34:	c6 5e       	subi	r28, 0xE6	; 230
   19b36:	de 4f       	sbci	r29, 0xFE	; 254
   19b38:	28 83       	st	Y, r18
   19b3a:	39 83       	std	Y+1, r19	; 0x01
   19b3c:	4a 83       	std	Y+2, r20	; 0x02
   19b3e:	5b 83       	std	Y+3, r21	; 0x03
   19b40:	ca 51       	subi	r28, 0x1A	; 26
   19b42:	d1 40       	sbci	r29, 0x01	; 1
   19b44:	64 01       	movw	r12, r8
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        printf("\tWrote: %ld\r", count);
   19b46:	8c e9       	ldi	r24, 0x9C	; 156
   19b48:	9c e3       	ldi	r25, 0x3C	; 60
   19b4a:	3c 01       	movw	r6, r24
   19b4c:	81 2c       	mov	r8, r1
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19b4e:	c6 5e       	subi	r28, 0xE6	; 230
   19b50:	de 4f       	sbci	r29, 0xFE	; 254
   19b52:	88 81       	ld	r24, Y
   19b54:	99 81       	ldd	r25, Y+1	; 0x01
   19b56:	aa 81       	ldd	r26, Y+2	; 0x02
   19b58:	bb 81       	ldd	r27, Y+3	; 0x03
   19b5a:	ca 51       	subi	r28, 0x1A	; 26
   19b5c:	d1 40       	sbci	r29, 0x01	; 1
   19b5e:	82 15       	cp	r24, r2
   19b60:	93 05       	cpc	r25, r3
   19b62:	a4 05       	cpc	r26, r4
   19b64:	b5 05       	cpc	r27, r5
   19b66:	0c f0       	brlt	.+2      	; 0x19b6a <lif_create_volume+0x274>
   19b68:	55 c0       	rjmp	.+170    	; 0x19c14 <lif_create_volume+0x31e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19b6a:	00 e0       	ldi	r16, 0x00	; 0
   19b6c:	11 e0       	ldi	r17, 0x01	; 1
   19b6e:	ca 5e       	subi	r28, 0xEA	; 234
   19b70:	de 4f       	sbci	r29, 0xFE	; 254
   19b72:	28 81       	ld	r18, Y
   19b74:	39 81       	ldd	r19, Y+1	; 0x01
   19b76:	4a 81       	ldd	r20, Y+2	; 0x02
   19b78:	5b 81       	ldd	r21, Y+3	; 0x03
   19b7a:	c6 51       	subi	r28, 0x16	; 22
   19b7c:	d1 40       	sbci	r29, 0x01	; 1
   19b7e:	b6 01       	movw	r22, r12
   19b80:	c7 01       	movw	r24, r14
   19b82:	0e 94 8f c1 	call	0x1831e	; 0x1831e <lif_write>
   19b86:	09 2e       	mov	r0, r25
   19b88:	00 0c       	add	r0, r0
   19b8a:	aa 0b       	sbc	r26, r26
   19b8c:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19b8e:	8f 3f       	cpi	r24, 0xFF	; 255
   19b90:	91 05       	cpc	r25, r1
   19b92:	a1 05       	cpc	r26, r1
   19b94:	b1 05       	cpc	r27, r1
   19b96:	09 f0       	breq	.+2      	; 0x19b9a <lif_create_volume+0x2a4>
   19b98:	0c f4       	brge	.+2      	; 0x19b9c <lif_create_volume+0x2a6>
   19b9a:	82 c1       	rjmp	.+772    	; 0x19ea0 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19b9c:	ca 5e       	subi	r28, 0xEA	; 234
   19b9e:	de 4f       	sbci	r29, 0xFE	; 254
   19ba0:	28 81       	ld	r18, Y
   19ba2:	39 81       	ldd	r19, Y+1	; 0x01
   19ba4:	4a 81       	ldd	r20, Y+2	; 0x02
   19ba6:	5b 81       	ldd	r21, Y+3	; 0x03
   19ba8:	c6 51       	subi	r28, 0x16	; 22
   19baa:	d1 40       	sbci	r29, 0x01	; 1
   19bac:	28 0f       	add	r18, r24
   19bae:	39 1f       	adc	r19, r25
   19bb0:	4a 1f       	adc	r20, r26
   19bb2:	5b 1f       	adc	r21, r27
   19bb4:	ca 5e       	subi	r28, 0xEA	; 234
   19bb6:	de 4f       	sbci	r29, 0xFE	; 254
   19bb8:	28 83       	st	Y, r18
   19bba:	39 83       	std	Y+1, r19	; 0x01
   19bbc:	4a 83       	std	Y+2, r20	; 0x02
   19bbe:	5b 83       	std	Y+3, r21	; 0x03
   19bc0:	c6 51       	subi	r28, 0x16	; 22
   19bc2:	d1 40       	sbci	r29, 0x01	; 1
        printf("\tWrote: %ld\r", count);
   19bc4:	c6 5e       	subi	r28, 0xE6	; 230
   19bc6:	de 4f       	sbci	r29, 0xFE	; 254
   19bc8:	88 81       	ld	r24, Y
   19bca:	99 81       	ldd	r25, Y+1	; 0x01
   19bcc:	aa 81       	ldd	r26, Y+2	; 0x02
   19bce:	bb 81       	ldd	r27, Y+3	; 0x03
   19bd0:	ca 51       	subi	r28, 0x1A	; 26
   19bd2:	d1 40       	sbci	r29, 0x01	; 1
   19bd4:	ed b7       	in	r30, 0x3d	; 61
   19bd6:	fe b7       	in	r31, 0x3e	; 62
   19bd8:	84 83       	std	Z+4, r24	; 0x04
   19bda:	95 83       	std	Z+5, r25	; 0x05
   19bdc:	a6 83       	std	Z+6, r26	; 0x06
   19bde:	b7 83       	std	Z+7, r27	; 0x07
   19be0:	61 82       	std	Z+1, r6	; 0x01
   19be2:	72 82       	std	Z+2, r7	; 0x02
   19be4:	83 82       	std	Z+3, r8	; 0x03
   19be6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   19bea:	c6 5e       	subi	r28, 0xE6	; 230
   19bec:	de 4f       	sbci	r29, 0xFE	; 254
   19bee:	28 81       	ld	r18, Y
   19bf0:	39 81       	ldd	r19, Y+1	; 0x01
   19bf2:	4a 81       	ldd	r20, Y+2	; 0x02
   19bf4:	5b 81       	ldd	r21, Y+3	; 0x03
   19bf6:	ca 51       	subi	r28, 0x1A	; 26
   19bf8:	d1 40       	sbci	r29, 0x01	; 1
   19bfa:	2f 5f       	subi	r18, 0xFF	; 255
   19bfc:	3f 4f       	sbci	r19, 0xFF	; 255
   19bfe:	4f 4f       	sbci	r20, 0xFF	; 255
   19c00:	5f 4f       	sbci	r21, 0xFF	; 255
   19c02:	c6 5e       	subi	r28, 0xE6	; 230
   19c04:	de 4f       	sbci	r29, 0xFE	; 254
   19c06:	28 83       	st	Y, r18
   19c08:	39 83       	std	Y+1, r19	; 0x01
   19c0a:	4a 83       	std	Y+2, r20	; 0x02
   19c0c:	5b 83       	std	Y+3, r21	; 0x03
   19c0e:	ca 51       	subi	r28, 0x1A	; 26
   19c10:	d1 40       	sbci	r29, 0x01	; 1
   19c12:	9d cf       	rjmp	.-198    	; 0x19b4e <lif_create_volume+0x258>
        printf("\tWrote: %ld\r", count);
        ++count;
    }

// Write Directory sectors
    lif_dir_clear(LIF);
   19c14:	c7 01       	movw	r24, r14
   19c16:	0e 94 93 c5 	call	0x18b26	; 0x18b26 <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   19c1a:	8f ef       	ldi	r24, 0xFF	; 255
   19c1c:	9f ef       	ldi	r25, 0xFF	; 255
   19c1e:	f7 01       	movw	r30, r14
   19c20:	e6 5a       	subi	r30, 0xA6	; 166
   19c22:	ff 4f       	sbci	r31, 0xFF	; 255
   19c24:	91 83       	std	Z+1, r25	; 0x01
   19c26:	80 83       	st	Z, r24
   19c28:	46 01       	movw	r8, r12
   19c2a:	6e 01       	movw	r12, r28
   19c2c:	9c ee       	ldi	r25, 0xEC	; 236
   19c2e:	c9 1a       	sub	r12, r25
   19c30:	9e ef       	ldi	r25, 0xFE	; 254
   19c32:	d9 0a       	sbc	r13, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   19c34:	b4 01       	movw	r22, r8
   19c36:	c7 01       	movw	r24, r14
   19c38:	0e 94 da c3 	call	0x187b4	; 0x187b4 <lif_dir2str>
   19c3c:	a0 e2       	ldi	r26, 0x20	; 32
   19c3e:	8a 0e       	add	r8, r26
   19c40:	91 1c       	adc	r9, r1

// Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   19c42:	c8 14       	cp	r12, r8
   19c44:	d9 04       	cpc	r13, r9
   19c46:	b1 f7       	brne	.-20     	; 0x19c34 <lif_create_volume+0x33e>
   19c48:	a1 2c       	mov	r10, r1
   19c4a:	b1 2c       	mov	r11, r1
   19c4c:	65 01       	movw	r12, r10
   19c4e:	fe 01       	movw	r30, r28
   19c50:	74 96       	adiw	r30, 0x14	; 20
   19c52:	cc 5e       	subi	r28, 0xEC	; 236
   19c54:	de 4f       	sbci	r29, 0xFE	; 254
   19c56:	f9 83       	std	Y+1, r31	; 0x01
   19c58:	e8 83       	st	Y, r30
   19c5a:	c4 51       	subi	r28, 0x14	; 20
   19c5c:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   19c5e:	84 e6       	ldi	r24, 0x64	; 100
   19c60:	28 2e       	mov	r2, r24
   19c62:	31 2c       	mov	r3, r1
   19c64:	41 2c       	mov	r4, r1
   19c66:	51 2c       	mov	r5, r1
            printf("\tWrote: %ld\r", count);
   19c68:	8f e8       	ldi	r24, 0x8F	; 143
   19c6a:	9c e3       	ldi	r25, 0x3C	; 60
   19c6c:	3c 01       	movw	r6, r24
   19c6e:	81 2c       	mov	r8, r1
   19c70:	c6 5e       	subi	r28, 0xE6	; 230
   19c72:	de 4f       	sbci	r29, 0xFE	; 254
   19c74:	28 81       	ld	r18, Y
   19c76:	39 81       	ldd	r19, Y+1	; 0x01
   19c78:	4a 81       	ldd	r20, Y+2	; 0x02
   19c7a:	5b 81       	ldd	r21, Y+3	; 0x03
   19c7c:	ca 51       	subi	r28, 0x1A	; 26
   19c7e:	d1 40       	sbci	r29, 0x01	; 1
   19c80:	2a 0d       	add	r18, r10
   19c82:	3b 1d       	adc	r19, r11
   19c84:	4c 1d       	adc	r20, r12
   19c86:	5d 1d       	adc	r21, r13
   19c88:	ce 5d       	subi	r28, 0xDE	; 222
   19c8a:	de 4f       	sbci	r29, 0xFE	; 254
   19c8c:	28 83       	st	Y, r18
   19c8e:	39 83       	std	Y+1, r19	; 0x01
   19c90:	4a 83       	std	Y+2, r20	; 0x02
   19c92:	5b 83       	std	Y+3, r21	; 0x03
   19c94:	c2 52       	subi	r28, 0x22	; 34
   19c96:	d1 40       	sbci	r29, 0x01	; 1
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19c98:	ca 5d       	subi	r28, 0xDA	; 218
   19c9a:	de 4f       	sbci	r29, 0xFE	; 254
   19c9c:	88 81       	ld	r24, Y
   19c9e:	99 81       	ldd	r25, Y+1	; 0x01
   19ca0:	aa 81       	ldd	r26, Y+2	; 0x02
   19ca2:	bb 81       	ldd	r27, Y+3	; 0x03
   19ca4:	c6 52       	subi	r28, 0x26	; 38
   19ca6:	d1 40       	sbci	r29, 0x01	; 1
   19ca8:	a8 16       	cp	r10, r24
   19caa:	b9 06       	cpc	r11, r25
   19cac:	ca 06       	cpc	r12, r26
   19cae:	db 06       	cpc	r13, r27
   19cb0:	0c f0       	brlt	.+2      	; 0x19cb4 <lif_create_volume+0x3be>
   19cb2:	58 c0       	rjmp	.+176    	; 0x19d64 <lif_create_volume+0x46e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19cb4:	00 e0       	ldi	r16, 0x00	; 0
   19cb6:	11 e0       	ldi	r17, 0x01	; 1
   19cb8:	ca 5e       	subi	r28, 0xEA	; 234
   19cba:	de 4f       	sbci	r29, 0xFE	; 254
   19cbc:	28 81       	ld	r18, Y
   19cbe:	39 81       	ldd	r19, Y+1	; 0x01
   19cc0:	4a 81       	ldd	r20, Y+2	; 0x02
   19cc2:	5b 81       	ldd	r21, Y+3	; 0x03
   19cc4:	c6 51       	subi	r28, 0x16	; 22
   19cc6:	d1 40       	sbci	r29, 0x01	; 1
   19cc8:	be 01       	movw	r22, r28
   19cca:	6c 5e       	subi	r22, 0xEC	; 236
   19ccc:	7f 4f       	sbci	r23, 0xFF	; 255
   19cce:	c7 01       	movw	r24, r14
   19cd0:	0e 94 8f c1 	call	0x1831e	; 0x1831e <lif_write>
   19cd4:	09 2e       	mov	r0, r25
   19cd6:	00 0c       	add	r0, r0
   19cd8:	aa 0b       	sbc	r26, r26
   19cda:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19cdc:	8f 3f       	cpi	r24, 0xFF	; 255
   19cde:	91 05       	cpc	r25, r1
   19ce0:	a1 05       	cpc	r26, r1
   19ce2:	b1 05       	cpc	r27, r1
   19ce4:	09 f0       	breq	.+2      	; 0x19ce8 <lif_create_volume+0x3f2>
   19ce6:	0c f4       	brge	.+2      	; 0x19cea <lif_create_volume+0x3f4>
   19ce8:	db c0       	rjmp	.+438    	; 0x19ea0 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19cea:	ca 5e       	subi	r28, 0xEA	; 234
   19cec:	de 4f       	sbci	r29, 0xFE	; 254
   19cee:	28 81       	ld	r18, Y
   19cf0:	39 81       	ldd	r19, Y+1	; 0x01
   19cf2:	4a 81       	ldd	r20, Y+2	; 0x02
   19cf4:	5b 81       	ldd	r21, Y+3	; 0x03
   19cf6:	c6 51       	subi	r28, 0x16	; 22
   19cf8:	d1 40       	sbci	r29, 0x01	; 1
   19cfa:	28 0f       	add	r18, r24
   19cfc:	39 1f       	adc	r19, r25
   19cfe:	4a 1f       	adc	r20, r26
   19d00:	5b 1f       	adc	r21, r27
   19d02:	ca 5e       	subi	r28, 0xEA	; 234
   19d04:	de 4f       	sbci	r29, 0xFE	; 254
   19d06:	28 83       	st	Y, r18
   19d08:	39 83       	std	Y+1, r19	; 0x01
   19d0a:	4a 83       	std	Y+2, r20	; 0x02
   19d0c:	5b 83       	std	Y+3, r21	; 0x03
   19d0e:	c6 51       	subi	r28, 0x16	; 22
   19d10:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   19d12:	ce 5d       	subi	r28, 0xDE	; 222
   19d14:	de 4f       	sbci	r29, 0xFE	; 254
   19d16:	68 81       	ld	r22, Y
   19d18:	79 81       	ldd	r23, Y+1	; 0x01
   19d1a:	8a 81       	ldd	r24, Y+2	; 0x02
   19d1c:	9b 81       	ldd	r25, Y+3	; 0x03
   19d1e:	c2 52       	subi	r28, 0x22	; 34
   19d20:	d1 40       	sbci	r29, 0x01	; 1
   19d22:	a2 01       	movw	r20, r4
   19d24:	91 01       	movw	r18, r2
   19d26:	0e 94 1b e6 	call	0x1cc36	; 0x1cc36 <__divmodsi4>
   19d2a:	67 2b       	or	r22, r23
   19d2c:	68 2b       	or	r22, r24
   19d2e:	69 2b       	or	r22, r25
   19d30:	99 f4       	brne	.+38     	; 0x19d58 <lif_create_volume+0x462>
            printf("\tWrote: %ld\r", count);
   19d32:	ce 5d       	subi	r28, 0xDE	; 222
   19d34:	de 4f       	sbci	r29, 0xFE	; 254
   19d36:	88 81       	ld	r24, Y
   19d38:	99 81       	ldd	r25, Y+1	; 0x01
   19d3a:	aa 81       	ldd	r26, Y+2	; 0x02
   19d3c:	bb 81       	ldd	r27, Y+3	; 0x03
   19d3e:	c2 52       	subi	r28, 0x22	; 34
   19d40:	d1 40       	sbci	r29, 0x01	; 1
   19d42:	ed b7       	in	r30, 0x3d	; 61
   19d44:	fe b7       	in	r31, 0x3e	; 62
   19d46:	84 83       	std	Z+4, r24	; 0x04
   19d48:	95 83       	std	Z+5, r25	; 0x05
   19d4a:	a6 83       	std	Z+6, r26	; 0x06
   19d4c:	b7 83       	std	Z+7, r27	; 0x07
   19d4e:	61 82       	std	Z+1, r6	; 0x01
   19d50:	72 82       	std	Z+2, r7	; 0x02
   19d52:	83 82       	std	Z+3, r8	; 0x03
   19d54:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19d58:	ff ef       	ldi	r31, 0xFF	; 255
   19d5a:	af 1a       	sub	r10, r31
   19d5c:	bf 0a       	sbc	r11, r31
   19d5e:	cf 0a       	sbc	r12, r31
   19d60:	df 0a       	sbc	r13, r31
   19d62:	86 cf       	rjmp	.-244    	; 0x19c70 <lif_create_volume+0x37a>
            printf("\tWrote: %ld\r", count);
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   19d64:	80 e0       	ldi	r24, 0x00	; 0
   19d66:	91 e0       	ldi	r25, 0x01	; 1
   19d68:	cc 5e       	subi	r28, 0xEC	; 236
   19d6a:	de 4f       	sbci	r29, 0xFE	; 254
   19d6c:	a8 81       	ld	r26, Y
   19d6e:	b9 81       	ldd	r27, Y+1	; 0x01
   19d70:	c4 51       	subi	r28, 0x14	; 20
   19d72:	d1 40       	sbci	r29, 0x01	; 1
   19d74:	fc 01       	movw	r30, r24
   19d76:	1d 92       	st	X+, r1
   19d78:	31 97       	sbiw	r30, 0x01	; 1
   19d7a:	e9 f7       	brne	.-6      	; 0x19d76 <lif_create_volume+0x480>
    for(i=0;i<filesectors;++i)
   19d7c:	81 2c       	mov	r8, r1
   19d7e:	91 2c       	mov	r9, r1
   19d80:	54 01       	movw	r10, r8
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   19d82:	82 e8       	ldi	r24, 0x82	; 130
   19d84:	9c e3       	ldi	r25, 0x3C	; 60
   19d86:	9c 01       	movw	r18, r24
   19d88:	40 e0       	ldi	r20, 0x00	; 0
   19d8a:	c6 5e       	subi	r28, 0xE6	; 230
   19d8c:	de 4f       	sbci	r29, 0xFE	; 254
   19d8e:	28 83       	st	Y, r18
   19d90:	39 83       	std	Y+1, r19	; 0x01
   19d92:	4a 83       	std	Y+2, r20	; 0x02
   19d94:	ca 51       	subi	r28, 0x1A	; 26
   19d96:	d1 40       	sbci	r29, 0x01	; 1
   19d98:	ce 5d       	subi	r28, 0xDE	; 222
   19d9a:	de 4f       	sbci	r29, 0xFE	; 254
   19d9c:	48 80       	ld	r4, Y
   19d9e:	59 80       	ldd	r5, Y+1	; 0x01
   19da0:	6a 80       	ldd	r6, Y+2	; 0x02
   19da2:	7b 80       	ldd	r7, Y+3	; 0x03
   19da4:	c2 52       	subi	r28, 0x22	; 34
   19da6:	d1 40       	sbci	r29, 0x01	; 1
   19da8:	48 0c       	add	r4, r8
   19daa:	59 1c       	adc	r5, r9
   19dac:	6a 1c       	adc	r6, r10
   19dae:	7b 1c       	adc	r7, r11
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19db0:	c2 5e       	subi	r28, 0xE2	; 226
   19db2:	de 4f       	sbci	r29, 0xFE	; 254
   19db4:	28 81       	ld	r18, Y
   19db6:	39 81       	ldd	r19, Y+1	; 0x01
   19db8:	4a 81       	ldd	r20, Y+2	; 0x02
   19dba:	5b 81       	ldd	r21, Y+3	; 0x03
   19dbc:	ce 51       	subi	r28, 0x1E	; 30
   19dbe:	d1 40       	sbci	r29, 0x01	; 1
   19dc0:	82 16       	cp	r8, r18
   19dc2:	93 06       	cpc	r9, r19
   19dc4:	a4 06       	cpc	r10, r20
   19dc6:	b5 06       	cpc	r11, r21
   19dc8:	0c f0       	brlt	.+2      	; 0x19dcc <lif_create_volume+0x4d6>
   19dca:	53 c0       	rjmp	.+166    	; 0x19e72 <lif_create_volume+0x57c>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   19dcc:	00 e0       	ldi	r16, 0x00	; 0
   19dce:	11 e0       	ldi	r17, 0x01	; 1
   19dd0:	ca 5e       	subi	r28, 0xEA	; 234
   19dd2:	de 4f       	sbci	r29, 0xFE	; 254
   19dd4:	28 81       	ld	r18, Y
   19dd6:	39 81       	ldd	r19, Y+1	; 0x01
   19dd8:	4a 81       	ldd	r20, Y+2	; 0x02
   19dda:	5b 81       	ldd	r21, Y+3	; 0x03
   19ddc:	c6 51       	subi	r28, 0x16	; 22
   19dde:	d1 40       	sbci	r29, 0x01	; 1
   19de0:	be 01       	movw	r22, r28
   19de2:	6c 5e       	subi	r22, 0xEC	; 236
   19de4:	7f 4f       	sbci	r23, 0xFF	; 255
   19de6:	c7 01       	movw	r24, r14
   19de8:	0e 94 8f c1 	call	0x1831e	; 0x1831e <lif_write>
   19dec:	09 2e       	mov	r0, r25
   19dee:	00 0c       	add	r0, r0
   19df0:	aa 0b       	sbc	r26, r26
   19df2:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   19df4:	8f 3f       	cpi	r24, 0xFF	; 255
   19df6:	91 05       	cpc	r25, r1
   19df8:	a1 05       	cpc	r26, r1
   19dfa:	b1 05       	cpc	r27, r1
   19dfc:	09 f0       	breq	.+2      	; 0x19e00 <lif_create_volume+0x50a>
   19dfe:	0c f4       	brge	.+2      	; 0x19e02 <lif_create_volume+0x50c>
   19e00:	4f c0       	rjmp	.+158    	; 0x19ea0 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19e02:	ca 5e       	subi	r28, 0xEA	; 234
   19e04:	de 4f       	sbci	r29, 0xFE	; 254
   19e06:	28 81       	ld	r18, Y
   19e08:	39 81       	ldd	r19, Y+1	; 0x01
   19e0a:	4a 81       	ldd	r20, Y+2	; 0x02
   19e0c:	5b 81       	ldd	r21, Y+3	; 0x03
   19e0e:	c6 51       	subi	r28, 0x16	; 22
   19e10:	d1 40       	sbci	r29, 0x01	; 1
   19e12:	28 0f       	add	r18, r24
   19e14:	39 1f       	adc	r19, r25
   19e16:	4a 1f       	adc	r20, r26
   19e18:	5b 1f       	adc	r21, r27
   19e1a:	ca 5e       	subi	r28, 0xEA	; 234
   19e1c:	de 4f       	sbci	r29, 0xFE	; 254
   19e1e:	28 83       	st	Y, r18
   19e20:	39 83       	std	Y+1, r19	; 0x01
   19e22:	4a 83       	std	Y+2, r20	; 0x02
   19e24:	5b 83       	std	Y+3, r21	; 0x03
   19e26:	c6 51       	subi	r28, 0x16	; 22
   19e28:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   19e2a:	c3 01       	movw	r24, r6
   19e2c:	b2 01       	movw	r22, r4
   19e2e:	24 e6       	ldi	r18, 0x64	; 100
   19e30:	30 e0       	ldi	r19, 0x00	; 0
   19e32:	40 e0       	ldi	r20, 0x00	; 0
   19e34:	50 e0       	ldi	r21, 0x00	; 0
   19e36:	0e 94 1b e6 	call	0x1cc36	; 0x1cc36 <__divmodsi4>
   19e3a:	67 2b       	or	r22, r23
   19e3c:	68 2b       	or	r22, r24
   19e3e:	69 2b       	or	r22, r25
   19e40:	91 f4       	brne	.+36     	; 0x19e66 <lif_create_volume+0x570>
            printf("\tWrote: %ld\r", count);
   19e42:	ed b7       	in	r30, 0x3d	; 61
   19e44:	fe b7       	in	r31, 0x3e	; 62
   19e46:	44 82       	std	Z+4, r4	; 0x04
   19e48:	55 82       	std	Z+5, r5	; 0x05
   19e4a:	66 82       	std	Z+6, r6	; 0x06
   19e4c:	77 82       	std	Z+7, r7	; 0x07
   19e4e:	c6 5e       	subi	r28, 0xE6	; 230
   19e50:	de 4f       	sbci	r29, 0xFE	; 254
   19e52:	28 81       	ld	r18, Y
   19e54:	39 81       	ldd	r19, Y+1	; 0x01
   19e56:	4a 81       	ldd	r20, Y+2	; 0x02
   19e58:	ca 51       	subi	r28, 0x1A	; 26
   19e5a:	d1 40       	sbci	r29, 0x01	; 1
   19e5c:	21 83       	std	Z+1, r18	; 0x01
   19e5e:	32 83       	std	Z+2, r19	; 0x02
   19e60:	43 83       	std	Z+3, r20	; 0x03
   19e62:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19e66:	ff ef       	ldi	r31, 0xFF	; 255
   19e68:	8f 1a       	sub	r8, r31
   19e6a:	9f 0a       	sbc	r9, r31
   19e6c:	af 0a       	sbc	r10, r31
   19e6e:	bf 0a       	sbc	r11, r31
   19e70:	93 cf       	rjmp	.-218    	; 0x19d98 <lif_create_volume+0x4a2>
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   19e72:	ed b7       	in	r30, 0x3d	; 61
   19e74:	fe b7       	in	r31, 0x3e	; 62
   19e76:	44 82       	std	Z+4, r4	; 0x04
   19e78:	55 82       	std	Z+5, r5	; 0x05
   19e7a:	66 82       	std	Z+6, r6	; 0x06
   19e7c:	77 82       	std	Z+7, r7	; 0x07
   19e7e:	85 e7       	ldi	r24, 0x75	; 117
   19e80:	9c e3       	ldi	r25, 0x3C	; 60
   19e82:	a0 e0       	ldi	r26, 0x00	; 0
   19e84:	81 83       	std	Z+1, r24	; 0x01
   19e86:	92 83       	std	Z+2, r25	; 0x02
   19e88:	a3 83       	std	Z+3, r26	; 0x03
   19e8a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   19e8e:	8f ef       	ldi	r24, 0xFF	; 255
   19e90:	9f ef       	ldi	r25, 0xFF	; 255
   19e92:	f7 01       	movw	r30, r14
   19e94:	91 a3       	std	Z+33, r25	; 0x21
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

// As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   19e96:	80 a3       	std	Z+32, r24	; 0x20
   19e98:	c7 01       	movw	r24, r14
   19e9a:	1a d8       	rcall	.-4044   	; 0x18ed0 <lif_check_volume>
   19e9c:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19e9e:	19 f4       	brne	.+6      	; 0x19ea6 <lif_create_volume+0x5b0>
   19ea0:	c7 01       	movw	r24, r14
   19ea2:	b6 da       	rcall	.-2708   	; 0x19410 <lif_close_volume>
   19ea4:	08 c0       	rjmp	.+16     	; 0x19eb6 <lif_create_volume+0x5c0>
        lif_closedir(LIF);
        return(NULL);
    }

// Scan directory and verify values
    if( !lif_updatefree(LIF))
   19ea6:	c7 01       	movw	r24, r14
   19ea8:	1c dc       	rcall	.-1992   	; 0x196e2 <lif_updatefree>
   19eaa:	6c 01       	movw	r12, r24
   19eac:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19eae:	31 f4       	brne	.+12     	; 0x19ebc <lif_create_volume+0x5c6>
   19eb0:	c7 01       	movw	r24, r14
   19eb2:	ae da       	rcall	.-2724   	; 0x19410 <lif_close_volume>

// Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   19eb4:	04 c0       	rjmp	.+8      	; 0x19ebe <lif_create_volume+0x5c8>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   19eb6:	c1 2c       	mov	r12, r1
   19eb8:	d1 2c       	mov	r13, r1
   19eba:	01 c0       	rjmp	.+2      	; 0x19ebe <lif_create_volume+0x5c8>
   19ebc:	67 01       	movw	r12, r14
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   19ebe:	c6 01       	movw	r24, r12
   19ec0:	c7 5d       	subi	r28, 0xD7	; 215
   19ec2:	de 4f       	sbci	r29, 0xFE	; 254
   19ec4:	e2 e1       	ldi	r30, 0x12	; 18
   19ec6:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

00019eca <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   19eca:	ad e1       	ldi	r26, 0x1D	; 29
   19ecc:	b0 e0       	ldi	r27, 0x00	; 0
   19ece:	eb e6       	ldi	r30, 0x6B	; 107
   19ed0:	ff ec       	ldi	r31, 0xCF	; 207
   19ed2:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
   19ed6:	9d 8f       	std	Y+29, r25	; 0x1d
   19ed8:	8c 8f       	std	Y+28, r24	; 0x1c
   19eda:	4a 01       	movw	r8, r20
   19edc:	5b 01       	movw	r10, r22

// Directory index
    index = 0;

// Start of free space
    start = LIF->filestart;
   19ede:	fc 01       	movw	r30, r24
   19ee0:	c4 84       	ldd	r12, Z+12	; 0x0c
   19ee2:	d5 84       	ldd	r13, Z+13	; 0x0d
   19ee4:	e6 84       	ldd	r14, Z+14	; 0x0e
   19ee6:	f7 84       	ldd	r15, Z+15	; 0x0f

// Update all file information
    if(lif_updatefree(LIF) == NULL)
   19ee8:	fc db       	rcall	.-2056   	; 0x196e2 <lif_updatefree>
   19eea:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19eec:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19eee:	40 8d       	ldd	r20, Z+24	; 0x18
   19ef0:	51 8d       	ldd	r21, Z+25	; 0x19
   19ef2:	62 8d       	ldd	r22, Z+26	; 0x1a
   19ef4:	73 8d       	ldd	r23, Z+27	; 0x1b
   19ef6:	89 2b       	or	r24, r25
   19ef8:	99 f4       	brne	.+38     	; 0x19f20 <lif_newdir+0x56>
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   19efa:	ed b7       	in	r30, 0x3d	; 61
   19efc:	fe b7       	in	r31, 0x3e	; 62
   19efe:	80 86       	std	Z+8, r8	; 0x08
   19f00:	91 86       	std	Z+9, r9	; 0x09
   19f02:	a2 86       	std	Z+10, r10	; 0x0a
   19f04:	b3 86       	std	Z+11, r11	; 0x0b
   19f06:	44 83       	std	Z+4, r20	; 0x04
   19f08:	55 83       	std	Z+5, r21	; 0x05
   19f0a:	66 83       	std	Z+6, r22	; 0x06
   19f0c:	77 83       	std	Z+7, r23	; 0x07
   19f0e:	86 e9       	ldi	r24, 0x96	; 150
   19f10:	9b e3       	ldi	r25, 0x3B	; 59
   19f12:	a0 e0       	ldi	r26, 0x00	; 0
   19f14:	81 83       	std	Z+1, r24	; 0x01
   19f16:	92 83       	std	Z+2, r25	; 0x02
   19f18:	a3 83       	std	Z+3, r26	; 0x03
   19f1a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   19f1e:	2f c1       	rjmp	.+606    	; 0x1a17e <lif_newdir+0x2b4>
        return(-1);
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
   19f20:	48 15       	cp	r20, r8
   19f22:	59 05       	cpc	r21, r9
   19f24:	6a 05       	cpc	r22, r10
   19f26:	7b 05       	cpc	r23, r11
   19f28:	c4 f0       	brlt	.+48     	; 0x19f5a <lif_newdir+0x90>
   19f2a:	44 24       	eor	r4, r4
   19f2c:	43 94       	inc	r4
   19f2e:	51 2c       	mov	r5, r1
   19f30:	61 2c       	mov	r6, r1
   19f32:	71 2c       	mov	r7, r1
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19f34:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19f36:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19f38:	86 5a       	subi	r24, 0xA6	; 166
   19f3a:	9f 4f       	sbci	r25, 0xFF	; 255
   19f3c:	9d 8b       	std	Y+21, r25	; 0x15
   19f3e:	8c 8b       	std	Y+20, r24	; 0x14
   19f40:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19f42:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19f44:	e4 5a       	subi	r30, 0xA4	; 164
   19f46:	ff 4f       	sbci	r31, 0xFF	; 255
   19f48:	fb 8b       	std	Y+19, r31	; 0x13
   19f4a:	ea 8b       	std	Y+18, r30	; 0x12
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19f4c:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19f4e:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19f50:	80 5a       	subi	r24, 0xA0	; 160
   19f52:	9f 4f       	sbci	r25, 0xFF	; 255
   19f54:	9f 8b       	std	Y+23, r25	; 0x17
   19f56:	8e 8b       	std	Y+22, r24	; 0x16
   19f58:	21 c0       	rjmp	.+66     	; 0x19f9c <lif_newdir+0xd2>
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   19f5a:	ed b7       	in	r30, 0x3d	; 61
   19f5c:	fe b7       	in	r31, 0x3e	; 62
   19f5e:	44 83       	std	Z+4, r20	; 0x04
   19f60:	55 83       	std	Z+5, r21	; 0x05
   19f62:	66 83       	std	Z+6, r22	; 0x06
   19f64:	77 83       	std	Z+7, r23	; 0x07
   19f66:	8d e6       	ldi	r24, 0x6D	; 109
   19f68:	9b e3       	ldi	r25, 0x3B	; 59
   19f6a:	a0 e0       	ldi	r26, 0x00	; 0
   19f6c:	81 83       	std	Z+1, r24	; 0x01
   19f6e:	92 83       	std	Z+2, r25	; 0x02
   19f70:	a3 83       	std	Z+3, r26	; 0x03
   19f72:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   19f76:	03 c1       	rjmp	.+518    	; 0x1a17e <lif_newdir+0x2b4>
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19f78:	ec 89       	ldd	r30, Y+20	; 0x14
   19f7a:	fd 89       	ldd	r31, Y+21	; 0x15
   19f7c:	80 81       	ld	r24, Z
   19f7e:	91 81       	ldd	r25, Z+1	; 0x01
   19f80:	8f 3f       	cpi	r24, 0xFF	; 255
   19f82:	ff ef       	ldi	r31, 0xFF	; 255
   19f84:	9f 07       	cpc	r25, r31
   19f86:	a1 f0       	breq	.+40     	; 0x19fb0 <lif_newdir+0xe6>
            }
            return(index);
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
   19f88:	89 2b       	or	r24, r25
   19f8a:	09 f0       	breq	.+2      	; 0x19f8e <lif_newdir+0xc4>
   19f8c:	ce c0       	rjmp	.+412    	; 0x1a12a <lif_newdir+0x260>
        {
            if(freestate == 0)
   19f8e:	61 14       	cp	r6, r1
   19f90:	71 04       	cpc	r7, r1
   19f92:	09 f4       	brne	.+2      	; 0x19f96 <lif_newdir+0xcc>
   19f94:	c1 c0       	rjmp	.+386    	; 0x1a118 <lif_newdir+0x24e>
   19f96:	ff ef       	ldi	r31, 0xFF	; 255
   19f98:	4f 1a       	sub	r4, r31
   19f9a:	5f 0a       	sbc	r5, r31
   19f9c:	82 01       	movw	r16, r4
   19f9e:	01 50       	subi	r16, 0x01	; 1
   19fa0:	11 09       	sbc	r17, r1

// Update free space and EOF pointers
    while(1)
    {
// Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   19fa2:	b8 01       	movw	r22, r16
   19fa4:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19fa6:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19fa8:	c1 da       	rcall	.-2686   	; 0x1952c <lif_readdirindex>
   19faa:	89 2b       	or	r24, r25
   19fac:	29 f7       	brne	.-54     	; 0x19f78 <lif_newdir+0xae>
   19fae:	e7 c0       	rjmp	.+462    	; 0x1a17e <lif_newdir+0x2b4>
        if(LIF->DIR.FileType == 0xffff)
        {

// Was enough free space found in purged area ?
// Do NOT need to update EOF!
            if(freestate == 2)
   19fb0:	22 e0       	ldi	r18, 0x02	; 2
   19fb2:	62 16       	cp	r6, r18
   19fb4:	71 04       	cpc	r7, r1
   19fb6:	09 f0       	breq	.+2      	; 0x19fba <lif_newdir+0xf0>
   19fb8:	46 c0       	rjmp	.+140    	; 0x1a046 <lif_newdir+0x17c>
            {
// Update free pace for new file
                lif_dir_clear(LIF);
   19fba:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19fbc:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19fbe:	0e 94 93 c5 	call	0x18b26	; 0x18b26 <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   19fc2:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19fc4:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19fc6:	e4 5a       	subi	r30, 0xA4	; 164
   19fc8:	ff 4f       	sbci	r31, 0xFF	; 255
   19fca:	88 8d       	ldd	r24, Y+24	; 0x18
   19fcc:	80 83       	st	Z, r24
   19fce:	99 8d       	ldd	r25, Y+25	; 0x19
   19fd0:	91 83       	std	Z+1, r25	; 0x01
   19fd2:	2a 8d       	ldd	r18, Y+26	; 0x1a
   19fd4:	22 83       	std	Z+2, r18	; 0x02
   19fd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
   19fd8:	83 83       	std	Z+3, r24	; 0x03
                LIF->DIR.FileSectors = sectors;
   19fda:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19fdc:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19fde:	e0 5a       	subi	r30, 0xA0	; 160
   19fe0:	ff 4f       	sbci	r31, 0xFF	; 255
   19fe2:	80 82       	st	Z, r8
   19fe4:	91 82       	std	Z+1, r9	; 0x01
   19fe6:	a2 82       	std	Z+2, r10	; 0x02
   19fe8:	b3 82       	std	Z+3, r11	; 0x03
                LIF->usedsectors += sectors;
   19fea:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19fec:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19fee:	84 89       	ldd	r24, Z+20	; 0x14
   19ff0:	95 89       	ldd	r25, Z+21	; 0x15
   19ff2:	a6 89       	ldd	r26, Z+22	; 0x16
   19ff4:	b7 89       	ldd	r27, Z+23	; 0x17
   19ff6:	88 0d       	add	r24, r8
   19ff8:	99 1d       	adc	r25, r9
   19ffa:	aa 1d       	adc	r26, r10
   19ffc:	bb 1d       	adc	r27, r11
   19ffe:	84 8b       	std	Z+20, r24	; 0x14
   1a000:	95 8b       	std	Z+21, r25	; 0x15
   1a002:	a6 8b       	std	Z+22, r26	; 0x16
   1a004:	b7 8b       	std	Z+23, r27	; 0x17
                LIF->freesectors -= sectors;
   1a006:	80 8d       	ldd	r24, Z+24	; 0x18
   1a008:	91 8d       	ldd	r25, Z+25	; 0x19
   1a00a:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a00c:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a00e:	88 19       	sub	r24, r8
   1a010:	99 09       	sbc	r25, r9
   1a012:	aa 09       	sbc	r26, r10
   1a014:	bb 09       	sbc	r27, r11
   1a016:	80 8f       	std	Z+24, r24	; 0x18
   1a018:	91 8f       	std	Z+25, r25	; 0x19
   1a01a:	a2 8f       	std	Z+26, r26	; 0x1a
   1a01c:	b3 8f       	std	Z+27, r27	; 0x1b
                LIF->files++;
   1a01e:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a020:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a022:	01 96       	adiw	r24, 0x01	; 1
   1a024:	95 8f       	std	Z+29, r25	; 0x1d
   1a026:	84 8f       	std	Z+28, r24	; 0x1c
                LIF->purged--;
   1a028:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a02a:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a02c:	01 97       	sbiw	r24, 0x01	; 1
   1a02e:	97 8f       	std	Z+31, r25	; 0x1f
   1a030:	86 8f       	std	Z+30, r24	; 0x1e
                LIF->dirindex = freeindex;
   1a032:	20 a2       	std	Z+32, r2	; 0x20
   1a034:	31 a2       	std	Z+33, r3	; 0x21
// Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   1a036:	b1 01       	movw	r22, r2
   1a038:	cf 01       	movw	r24, r30
   1a03a:	df da       	rcall	.-2626   	; 0x195fa <lif_writedirindex>
   1a03c:	89 2b       	or	r24, r25
   1a03e:	09 f4       	brne	.+2      	; 0x1a042 <lif_newdir+0x178>
   1a040:	9e c0       	rjmp	.+316    	; 0x1a17e <lif_newdir+0x2b4>
   1a042:	c1 01       	movw	r24, r2
   1a044:	9e c0       	rjmp	.+316    	; 0x1a182 <lif_newdir+0x2b8>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & LIF_DEBUG)
   1a046:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a04a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a04e:	92 ff       	sbrs	r25, 2
   1a050:	1e c0       	rjmp	.+60     	; 0x1a08e <lif_newdir+0x1c4>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n",
   1a052:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a054:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a056:	80 8d       	ldd	r24, Z+24	; 0x18
   1a058:	91 8d       	ldd	r25, Z+25	; 0x19
   1a05a:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a05c:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a05e:	ed b7       	in	r30, 0x3d	; 61
   1a060:	fe b7       	in	r31, 0x3e	; 62
   1a062:	86 87       	std	Z+14, r24	; 0x0e
   1a064:	97 87       	std	Z+15, r25	; 0x0f
   1a066:	a0 8b       	std	Z+16, r26	; 0x10
   1a068:	b1 8b       	std	Z+17, r27	; 0x11
   1a06a:	82 86       	std	Z+10, r8	; 0x0a
   1a06c:	93 86       	std	Z+11, r9	; 0x0b
   1a06e:	a4 86       	std	Z+12, r10	; 0x0c
   1a070:	b5 86       	std	Z+13, r11	; 0x0d
   1a072:	c6 82       	std	Z+6, r12	; 0x06
   1a074:	d7 82       	std	Z+7, r13	; 0x07
   1a076:	e0 86       	std	Z+8, r14	; 0x08
   1a078:	f1 86       	std	Z+9, r15	; 0x09
   1a07a:	15 83       	std	Z+5, r17	; 0x05
   1a07c:	04 83       	std	Z+4, r16	; 0x04
   1a07e:	8c e1       	ldi	r24, 0x1C	; 28
   1a080:	9b e3       	ldi	r25, 0x3B	; 59
   1a082:	a0 e0       	ldi	r26, 0x00	; 0
   1a084:	81 83       	std	Z+1, r24	; 0x01
   1a086:	92 83       	std	Z+2, r25	; 0x02
   1a088:	a3 83       	std	Z+3, r26	; 0x03
   1a08a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

// Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1a08e:	b8 01       	movw	r22, r16
   1a090:	6f 5f       	subi	r22, 0xFF	; 255
   1a092:	7f 4f       	sbci	r23, 0xFF	; 255
   1a094:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a096:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a098:	0c db       	rcall	.-2536   	; 0x196b2 <lif_writedirEOF>
   1a09a:	89 2b       	or	r24, r25
   1a09c:	09 f4       	brne	.+2      	; 0x1a0a0 <lif_newdir+0x1d6>
   1a09e:	6f c0       	rjmp	.+222    	; 0x1a17e <lif_newdir+0x2b4>
            {
                break;
            }

            lif_dir_clear(LIF);
   1a0a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1a0a2:	9d 8d       	ldd	r25, Y+29	; 0x1d
   1a0a4:	0e 94 93 c5 	call	0x18b26	; 0x18b26 <lif_dir_clear>
            LIF->DIR.FileStartSector = start;
   1a0a8:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a0aa:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a0ac:	e4 5a       	subi	r30, 0xA4	; 164
   1a0ae:	ff 4f       	sbci	r31, 0xFF	; 255
   1a0b0:	c0 82       	st	Z, r12
   1a0b2:	d1 82       	std	Z+1, r13	; 0x01
   1a0b4:	e2 82       	std	Z+2, r14	; 0x02
   1a0b6:	f3 82       	std	Z+3, r15	; 0x03
            LIF->DIR.FileSectors = sectors;
   1a0b8:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a0ba:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a0bc:	e0 5a       	subi	r30, 0xA0	; 160
   1a0be:	ff 4f       	sbci	r31, 0xFF	; 255
   1a0c0:	80 82       	st	Z, r8
   1a0c2:	91 82       	std	Z+1, r9	; 0x01
   1a0c4:	a2 82       	std	Z+2, r10	; 0x02
   1a0c6:	b3 82       	std	Z+3, r11	; 0x03
            LIF->usedsectors += sectors;
   1a0c8:	ec 8d       	ldd	r30, Y+28	; 0x1c
   1a0ca:	fd 8d       	ldd	r31, Y+29	; 0x1d
   1a0cc:	84 89       	ldd	r24, Z+20	; 0x14
   1a0ce:	95 89       	ldd	r25, Z+21	; 0x15
   1a0d0:	a6 89       	ldd	r26, Z+22	; 0x16
   1a0d2:	b7 89       	ldd	r27, Z+23	; 0x17
   1a0d4:	88 0d       	add	r24, r8
   1a0d6:	99 1d       	adc	r25, r9
   1a0d8:	aa 1d       	adc	r26, r10
   1a0da:	bb 1d       	adc	r27, r11
   1a0dc:	84 8b       	std	Z+20, r24	; 0x14
   1a0de:	95 8b       	std	Z+21, r25	; 0x15
   1a0e0:	a6 8b       	std	Z+22, r26	; 0x16
   1a0e2:	b7 8b       	std	Z+23, r27	; 0x17
            LIF->freesectors -= sectors;
   1a0e4:	80 8d       	ldd	r24, Z+24	; 0x18
   1a0e6:	91 8d       	ldd	r25, Z+25	; 0x19
   1a0e8:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a0ea:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a0ec:	88 19       	sub	r24, r8
   1a0ee:	99 09       	sbc	r25, r9
   1a0f0:	aa 09       	sbc	r26, r10
   1a0f2:	bb 09       	sbc	r27, r11
   1a0f4:	80 8f       	std	Z+24, r24	; 0x18
   1a0f6:	91 8f       	std	Z+25, r25	; 0x19
   1a0f8:	a2 8f       	std	Z+26, r26	; 0x1a
   1a0fa:	b3 8f       	std	Z+27, r27	; 0x1b
            LIF->files++;
   1a0fc:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a0fe:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a100:	01 96       	adiw	r24, 0x01	; 1
   1a102:	95 8f       	std	Z+29, r25	; 0x1d
   1a104:	84 8f       	std	Z+28, r24	; 0x1c
            LIF->dirindex = index;
   1a106:	11 a3       	std	Z+33, r17	; 0x21
// Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   1a108:	00 a3       	std	Z+32, r16	; 0x20
   1a10a:	b8 01       	movw	r22, r16
   1a10c:	cf 01       	movw	r24, r30
   1a10e:	75 da       	rcall	.-2838   	; 0x195fa <lif_writedirindex>
   1a110:	89 2b       	or	r24, r25
   1a112:	a9 f1       	breq	.+106    	; 0x1a17e <lif_newdir+0x2b4>
   1a114:	c8 01       	movw	r24, r16
   1a116:	35 c0       	rjmp	.+106    	; 0x1a182 <lif_newdir+0x2b8>
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   1a118:	c8 8e       	std	Y+24, r12	; 0x18
   1a11a:	d9 8e       	std	Y+25, r13	; 0x19
   1a11c:	ea 8e       	std	Y+26, r14	; 0x1a
   1a11e:	fb 8e       	std	Y+27, r15	; 0x1b
   1a120:	18 01       	movw	r2, r16
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   1a122:	66 24       	eor	r6, r6
   1a124:	63 94       	inc	r6
   1a126:	71 2c       	mov	r7, r1
            }
            ++index;
            continue;
   1a128:	36 cf       	rjmp	.-404    	; 0x19f96 <lif_newdir+0xcc>
        }

// VALID record
        if(freestate == 1)
   1a12a:	f1 e0       	ldi	r31, 0x01	; 1
   1a12c:	6f 16       	cp	r6, r31
   1a12e:	71 04       	cpc	r7, r1
   1a130:	a9 f4       	brne	.+42     	; 0x1a15c <lif_newdir+0x292>
        {
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   1a132:	ea 89       	ldd	r30, Y+18	; 0x12
   1a134:	fb 89       	ldd	r31, Y+19	; 0x13
   1a136:	80 81       	ld	r24, Z
   1a138:	91 81       	ldd	r25, Z+1	; 0x01
   1a13a:	a2 81       	ldd	r26, Z+2	; 0x02
   1a13c:	b3 81       	ldd	r27, Z+3	; 0x03
   1a13e:	8c 19       	sub	r24, r12
   1a140:	9d 09       	sbc	r25, r13
   1a142:	ae 09       	sbc	r26, r14
   1a144:	bf 09       	sbc	r27, r15
   1a146:	88 15       	cp	r24, r8
   1a148:	99 05       	cpc	r25, r9
   1a14a:	aa 05       	cpc	r26, r10
   1a14c:	bb 05       	cpc	r27, r11
   1a14e:	1c f4       	brge	.+6      	; 0x1a156 <lif_newdir+0x28c>
                freestate = 2;                    // Found free space in purged record
            else
                freestate = 0;                    // Try again
   1a150:	61 2c       	mov	r6, r1
   1a152:	71 2c       	mov	r7, r1
   1a154:	03 c0       	rjmp	.+6      	; 0x1a15c <lif_newdir+0x292>
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;                    // Found free space in purged record
   1a156:	82 e0       	ldi	r24, 0x02	; 2
   1a158:	68 2e       	mov	r6, r24
   1a15a:	71 2c       	mov	r7, r1
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1a15c:	ea 89       	ldd	r30, Y+18	; 0x12
   1a15e:	fb 89       	ldd	r31, Y+19	; 0x13
   1a160:	c0 80       	ld	r12, Z
   1a162:	d1 80       	ldd	r13, Z+1	; 0x01
   1a164:	e2 80       	ldd	r14, Z+2	; 0x02
   1a166:	f3 80       	ldd	r15, Z+3	; 0x03
   1a168:	ee 89       	ldd	r30, Y+22	; 0x16
   1a16a:	ff 89       	ldd	r31, Y+23	; 0x17
   1a16c:	80 81       	ld	r24, Z
   1a16e:	91 81       	ldd	r25, Z+1	; 0x01
   1a170:	a2 81       	ldd	r26, Z+2	; 0x02
   1a172:	b3 81       	ldd	r27, Z+3	; 0x03
   1a174:	c8 0e       	add	r12, r24
   1a176:	d9 1e       	adc	r13, r25
   1a178:	ea 1e       	adc	r14, r26
   1a17a:	fb 1e       	adc	r15, r27
   1a17c:	0c cf       	rjmp	.-488    	; 0x19f96 <lif_newdir+0xcc>
        ++index;
    }
// ERROR
    return(-1);
   1a17e:	8f ef       	ldi	r24, 0xFF	; 255
   1a180:	9f ef       	ldi	r25, 0xFF	; 255
}
   1a182:	6d 96       	adiw	r28, 0x1d	; 29
   1a184:	e2 e1       	ldi	r30, 0x12	; 18
   1a186:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

0001a18a <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1a18a:	a9 e3       	ldi	r26, 0x39	; 57
   1a18c:	b1 e0       	ldi	r27, 0x01	; 1
   1a18e:	eb ec       	ldi	r30, 0xCB	; 203
   1a190:	f0 ed       	ldi	r31, 0xD0	; 208
   1a192:	0c 94 6c e6 	jmp	0x1ccd8	; 0x1ccd8 <__prologue_saves__+0xc>
   1a196:	6c 01       	movw	r12, r24
   1a198:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];

    sp = lif_stat(name, (stat_t *)&sb);
   1a19a:	be 01       	movw	r22, r28
   1a19c:	66 5f       	subi	r22, 0xF6	; 246
   1a19e:	7e 4f       	sbci	r23, 0xFE	; 254
   1a1a0:	0e 94 e2 c0 	call	0x181c4	; 0x181c4 <lif_stat>
   1a1a4:	5c 01       	movw	r10, r24
    if(sp == NULL)
   1a1a6:	00 97       	sbiw	r24, 0x00	; 0
   1a1a8:	09 f1       	breq	.+66     	; 0x1a1ec <lif_open_volume+0x62>
        return(NULL);

// To read LIF volume we must have at minimum two sectors
// volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   1a1aa:	fc 01       	movw	r30, r24
   1a1ac:	80 8d       	ldd	r24, Z+24	; 0x18
   1a1ae:	91 8d       	ldd	r25, Z+25	; 0x19
   1a1b0:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a1b2:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a1b4:	81 15       	cp	r24, r1
   1a1b6:	f2 e0       	ldi	r31, 0x02	; 2
   1a1b8:	9f 07       	cpc	r25, r31
   1a1ba:	a1 05       	cpc	r26, r1
   1a1bc:	b1 05       	cpc	r27, r1
   1a1be:	c8 f4       	brcc	.+50     	; 0x1a1f2 <lif_open_volume+0x68>
    {
        if(debuglevel & LIF_DEBUG)
   1a1c0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a1c4:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a1c8:	32 ff       	sbrs	r19, 2
   1a1ca:	10 c0       	rjmp	.+32     	; 0x1a1ec <lif_open_volume+0x62>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   1a1cc:	ed b7       	in	r30, 0x3d	; 61
   1a1ce:	fe b7       	in	r31, 0x3e	; 62
   1a1d0:	86 83       	std	Z+6, r24	; 0x06
   1a1d2:	97 83       	std	Z+7, r25	; 0x07
   1a1d4:	a0 87       	std	Z+8, r26	; 0x08
   1a1d6:	b1 87       	std	Z+9, r27	; 0x09
   1a1d8:	d5 82       	std	Z+5, r13	; 0x05
   1a1da:	c4 82       	std	Z+4, r12	; 0x04
   1a1dc:	8d ed       	ldi	r24, 0xDD	; 221
   1a1de:	9a e3       	ldi	r25, 0x3A	; 58
   1a1e0:	a0 e0       	ldi	r26, 0x00	; 0
   1a1e2:	81 83       	std	Z+1, r24	; 0x01
   1a1e4:	92 83       	std	Z+2, r25	; 0x02
   1a1e6:	a3 83       	std	Z+3, r26	; 0x03
   1a1e8:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        return(NULL);
   1a1ec:	00 e0       	ldi	r16, 0x00	; 0
   1a1ee:	10 e0       	ldi	r17, 0x00	; 0
   1a1f0:	c6 c0       	rjmp	.+396    	; 0x1a37e <lif_open_volume+0x1f4>
    }

// Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1a1f2:	64 e7       	ldi	r22, 0x74	; 116
   1a1f4:	70 e0       	ldi	r23, 0x00	; 0
   1a1f6:	80 e0       	ldi	r24, 0x00	; 0
   1a1f8:	90 e0       	ldi	r25, 0x00	; 0
   1a1fa:	0e 94 4e c0 	call	0x1809c	; 0x1809c <lif_calloc>
   1a1fe:	7c 01       	movw	r14, r24
    if(!LIF)
   1a200:	89 2b       	or	r24, r25
   1a202:	a1 f3       	breq	.-24     	; 0x1a1ec <lif_open_volume+0x62>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1a204:	c6 01       	movw	r24, r12
   1a206:	0e 94 99 c0 	call	0x18132	; 0x18132 <lif_stralloc>
   1a20a:	f7 01       	movw	r30, r14
   1a20c:	91 83       	std	Z+1, r25	; 0x01
   1a20e:	80 83       	st	Z, r24
    if(!LIF->name)
   1a210:	00 97       	sbiw	r24, 0x00	; 0
   1a212:	09 f4       	brne	.+2      	; 0x1a216 <lif_open_volume+0x8c>
   1a214:	5e c0       	rjmp	.+188    	; 0x1a2d2 <lif_open_volume+0x148>
    {
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
   1a216:	f5 01       	movw	r30, r10
   1a218:	80 8c       	ldd	r8, Z+24	; 0x18
   1a21a:	91 8c       	ldd	r9, Z+25	; 0x19
   1a21c:	a2 8c       	ldd	r10, Z+26	; 0x1a
   1a21e:	b3 8c       	ldd	r11, Z+27	; 0x1b
   1a220:	f7 01       	movw	r30, r14
   1a222:	80 86       	std	Z+8, r8	; 0x08
   1a224:	91 86       	std	Z+9, r9	; 0x09
   1a226:	a2 86       	std	Z+10, r10	; 0x0a
   1a228:	b3 86       	std	Z+11, r11	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a22a:	77 27       	eor	r23, r23
   1a22c:	6b 2d       	mov	r22, r11
   1a22e:	5a 2d       	mov	r21, r10
   1a230:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a232:	88 20       	and	r8, r8
   1a234:	21 f0       	breq	.+8      	; 0x1a23e <lif_open_volume+0xb4>
        ++sectors;
   1a236:	4f 5f       	subi	r20, 0xFF	; 255
   1a238:	5f 4f       	sbci	r21, 0xFF	; 255
   1a23a:	6f 4f       	sbci	r22, 0xFF	; 255
   1a23c:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   1a23e:	f7 01       	movw	r30, r14
   1a240:	44 83       	std	Z+4, r20	; 0x04
   1a242:	55 83       	std	Z+5, r21	; 0x05
   1a244:	66 83       	std	Z+6, r22	; 0x06
   1a246:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   1a248:	b8 01       	movw	r22, r16
   1a24a:	0e 94 b8 c0 	call	0x18170	; 0x18170 <lif_open>
   1a24e:	f7 01       	movw	r30, r14
   1a250:	93 83       	std	Z+3, r25	; 0x03
   1a252:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   1a254:	89 2b       	or	r24, r25
   1a256:	e9 f1       	breq	.+122    	; 0x1a2d2 <lif_open_volume+0x148>
        lif_closedir(LIF);
        return(NULL);
    }

// Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1a258:	00 e0       	ldi	r16, 0x00	; 0
   1a25a:	11 e0       	ldi	r17, 0x01	; 1
   1a25c:	20 e0       	ldi	r18, 0x00	; 0
   1a25e:	30 e0       	ldi	r19, 0x00	; 0
   1a260:	a9 01       	movw	r20, r18
   1a262:	be 01       	movw	r22, r28
   1a264:	66 5f       	subi	r22, 0xF6	; 246
   1a266:	7f 4f       	sbci	r23, 0xFF	; 255
   1a268:	c7 01       	movw	r24, r14
   1a26a:	0e 94 3c c1 	call	0x18278	; 0x18278 <lif_read>
   1a26e:	6f 3f       	cpi	r22, 0xFF	; 255
   1a270:	71 05       	cpc	r23, r1
   1a272:	81 05       	cpc	r24, r1
   1a274:	91 05       	cpc	r25, r1
   1a276:	09 f0       	breq	.+2      	; 0x1a27a <lif_open_volume+0xf0>
   1a278:	6c f4       	brge	.+26     	; 0x1a294 <lif_open_volume+0x10a>
    {
        if(debuglevel & LIF_DEBUG)
   1a27a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a27e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a282:	92 ff       	sbrs	r25, 2
   1a284:	26 c0       	rjmp	.+76     	; 0x1a2d2 <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   1a286:	ed b7       	in	r30, 0x3d	; 61
   1a288:	fe b7       	in	r31, 0x3e	; 62
   1a28a:	d5 82       	std	Z+5, r13	; 0x05
   1a28c:	c4 82       	std	Z+4, r12	; 0x04
   1a28e:	87 ea       	ldi	r24, 0xA7	; 167
   1a290:	9a e3       	ldi	r25, 0x3A	; 58
   1a292:	19 c0       	rjmp	.+50     	; 0x1a2c6 <lif_open_volume+0x13c>
        lif_closedir(LIF);
        return(NULL);
    }

// Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   1a294:	b7 01       	movw	r22, r14
   1a296:	ce 01       	movw	r24, r28
   1a298:	0a 96       	adiw	r24, 0x0a	; 10
   1a29a:	0e 94 5c c3 	call	0x186b8	; 0x186b8 <lif_str2vol>

// Validate basic Volume headers
    if( !lif_check_volume(LIF) )
   1a29e:	c7 01       	movw	r24, r14
   1a2a0:	0e 94 68 c7 	call	0x18ed0	; 0x18ed0 <lif_check_volume>
   1a2a4:	89 2b       	or	r24, r25
   1a2a6:	c1 f4       	brne	.+48     	; 0x1a2d8 <lif_open_volume+0x14e>
    {
        if(debuglevel & LIF_DEBUG)
   1a2a8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a2ac:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a2b0:	92 ff       	sbrs	r25, 2
   1a2b2:	0f c0       	rjmp	.+30     	; 0x1a2d2 <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   1a2b4:	f7 01       	movw	r30, r14
   1a2b6:	80 81       	ld	r24, Z
   1a2b8:	91 81       	ldd	r25, Z+1	; 0x01
   1a2ba:	ed b7       	in	r30, 0x3d	; 61
   1a2bc:	fe b7       	in	r31, 0x3e	; 62
   1a2be:	95 83       	std	Z+5, r25	; 0x05
   1a2c0:	84 83       	std	Z+4, r24	; 0x04
   1a2c2:	84 e7       	ldi	r24, 0x74	; 116
   1a2c4:	9a e3       	ldi	r25, 0x3A	; 58
   1a2c6:	a0 e0       	ldi	r26, 0x00	; 0
   1a2c8:	81 83       	std	Z+1, r24	; 0x01
   1a2ca:	92 83       	std	Z+2, r25	; 0x02
   1a2cc:	a3 83       	std	Z+3, r26	; 0x03
   1a2ce:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a2d2:	c7 01       	movw	r24, r14
   1a2d4:	9d d8       	rcall	.-3782   	; 0x19410 <lif_close_volume>
   1a2d6:	8a cf       	rjmp	.-236    	; 0x1a1ec <lif_open_volume+0x62>
        lif_closedir(LIF);
        return(NULL);
    }

// Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1a2d8:	f7 01       	movw	r30, r14
   1a2da:	45 a5       	ldd	r20, Z+45	; 0x2d
   1a2dc:	56 a5       	ldd	r21, Z+46	; 0x2e
   1a2de:	67 a5       	ldd	r22, Z+47	; 0x2f
   1a2e0:	70 a9       	ldd	r23, Z+48	; 0x30
   1a2e2:	85 a9       	ldd	r24, Z+53	; 0x35
   1a2e4:	96 a9       	ldd	r25, Z+54	; 0x36
   1a2e6:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a2e8:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a2ea:	48 0f       	add	r20, r24
   1a2ec:	59 1f       	adc	r21, r25
   1a2ee:	6a 1f       	adc	r22, r26
   1a2f0:	7b 1f       	adc	r23, r27
   1a2f2:	44 87       	std	Z+12, r20	; 0x0c
   1a2f4:	55 87       	std	Z+13, r21	; 0x0d
   1a2f6:	66 87       	std	Z+14, r22	; 0x0e
   1a2f8:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1a2fa:	84 81       	ldd	r24, Z+4	; 0x04
   1a2fc:	95 81       	ldd	r25, Z+5	; 0x05
   1a2fe:	a6 81       	ldd	r26, Z+6	; 0x06
   1a300:	b7 81       	ldd	r27, Z+7	; 0x07
   1a302:	84 1b       	sub	r24, r20
   1a304:	95 0b       	sbc	r25, r21
   1a306:	a6 0b       	sbc	r26, r22
   1a308:	b7 0b       	sbc	r27, r23
   1a30a:	80 8b       	std	Z+16, r24	; 0x10
   1a30c:	91 8b       	std	Z+17, r25	; 0x11
   1a30e:	a2 8b       	std	Z+18, r26	; 0x12
   1a310:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   1a312:	80 8f       	std	Z+24, r24	; 0x18
   1a314:	91 8f       	std	Z+25, r25	; 0x19
   1a316:	a2 8f       	std	Z+26, r26	; 0x1a
   1a318:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1a31a:	14 8a       	std	Z+20, r1	; 0x14
   1a31c:	15 8a       	std	Z+21, r1	; 0x15
   1a31e:	16 8a       	std	Z+22, r1	; 0x16
   1a320:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   1a322:	17 8e       	std	Z+31, r1	; 0x1f
   1a324:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   1a326:	15 8e       	std	Z+29, r1	; 0x1d
   1a328:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1a32a:	11 a2       	std	Z+33, r1	; 0x21
   1a32c:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1a32e:	13 a2       	std	Z+35, r1	; 0x23
   1a330:	12 a2       	std	Z+34, r1	; 0x22

    if( lif_updatefree(LIF) == NULL)
   1a332:	c7 01       	movw	r24, r14
   1a334:	d6 d9       	rcall	.-3156   	; 0x196e2 <lif_updatefree>
   1a336:	8c 01       	movw	r16, r24
   1a338:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a33c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a340:	01 15       	cp	r16, r1
   1a342:	11 05       	cpc	r17, r1
   1a344:	a1 f4       	brne	.+40     	; 0x1a36e <lif_open_volume+0x1e4>
    {
        if(debuglevel & LIF_DEBUG)
   1a346:	92 ff       	sbrs	r25, 2
   1a348:	0f c0       	rjmp	.+30     	; 0x1a368 <lif_open_volume+0x1de>
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1a34a:	f7 01       	movw	r30, r14
   1a34c:	80 81       	ld	r24, Z
   1a34e:	91 81       	ldd	r25, Z+1	; 0x01
   1a350:	ed b7       	in	r30, 0x3d	; 61
   1a352:	fe b7       	in	r31, 0x3e	; 62
   1a354:	95 83       	std	Z+5, r25	; 0x05
   1a356:	84 83       	std	Z+4, r24	; 0x04
   1a358:	81 e4       	ldi	r24, 0x41	; 65
   1a35a:	9a e3       	ldi	r25, 0x3A	; 58
   1a35c:	a0 e0       	ldi	r26, 0x00	; 0
   1a35e:	81 83       	std	Z+1, r24	; 0x01
   1a360:	92 83       	std	Z+2, r25	; 0x02
   1a362:	a3 83       	std	Z+3, r26	; 0x03
   1a364:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a368:	c7 01       	movw	r24, r14
   1a36a:	52 d8       	rcall	.-3932   	; 0x19410 <lif_close_volume>
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1a36c:	08 c0       	rjmp	.+16     	; 0x1a37e <lif_open_volume+0x1f4>
    }

    if(debuglevel &LIF_DEBUG)
   1a36e:	92 ff       	sbrs	r25, 2
   1a370:	05 c0       	rjmp	.+10     	; 0x1a37c <lif_open_volume+0x1f2>
        lif_dump_vol(LIF, "Volume Listing");
   1a372:	6b e2       	ldi	r22, 0x2B	; 43
   1a374:	76 e1       	ldi	r23, 0x16	; 22
   1a376:	c7 01       	movw	r24, r14
   1a378:	0e 94 a2 c5 	call	0x18b44	; 0x18b44 <lif_dump_vol>
   1a37c:	87 01       	movw	r16, r14
    return( LIF );
}
   1a37e:	c8 01       	movw	r24, r16
   1a380:	c7 5c       	subi	r28, 0xC7	; 199
   1a382:	de 4f       	sbci	r29, 0xFE	; 254
   1a384:	ec e0       	ldi	r30, 0x0C	; 12
   1a386:	0c 94 88 e6 	jmp	0x1cd10	; 0x1cd10 <__epilogue_restores__+0xc>

0001a38a <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   1a38a:	2f 92       	push	r2
   1a38c:	3f 92       	push	r3
   1a38e:	4f 92       	push	r4
   1a390:	5f 92       	push	r5
   1a392:	6f 92       	push	r6
   1a394:	8f 92       	push	r8
   1a396:	9f 92       	push	r9
   1a398:	af 92       	push	r10
   1a39a:	bf 92       	push	r11
   1a39c:	cf 92       	push	r12
   1a39e:	df 92       	push	r13
   1a3a0:	ef 92       	push	r14
   1a3a2:	0f 93       	push	r16
   1a3a4:	1f 93       	push	r17
   1a3a6:	cf 93       	push	r28
   1a3a8:	df 93       	push	r29
   1a3aa:	cd b7       	in	r28, 0x3d	; 61
   1a3ac:	de b7       	in	r29, 0x3e	; 62
   1a3ae:	af 97       	sbiw	r28, 0x2f	; 47
   1a3b0:	0f b6       	in	r0, 0x3f	; 63
   1a3b2:	f8 94       	cli
   1a3b4:	de bf       	out	0x3e, r29	; 62
   1a3b6:	0f be       	out	0x3f, r0	; 63
   1a3b8:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1a3ba:	66 ef       	ldi	r22, 0xF6	; 246
   1a3bc:	78 e0       	ldi	r23, 0x08	; 8
   1a3be:	e5 de       	rcall	.-566    	; 0x1a18a <lif_open_volume>
   1a3c0:	9f a7       	std	Y+47, r25	; 0x2f
   1a3c2:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   1a3c4:	00 97       	sbiw	r24, 0x00	; 0
   1a3c6:	09 f4       	brne	.+2      	; 0x1a3ca <lif_dir+0x40>
   1a3c8:	9e c1       	rjmp	.+828    	; 0x1a706 <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1a3ca:	fc 01       	movw	r30, r24
   1a3cc:	86 a1       	ldd	r24, Z+38	; 0x26
   1a3ce:	88 23       	and	r24, r24
   1a3d0:	21 f0       	breq	.+8      	; 0x1a3da <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1a3d2:	8f 01       	movw	r16, r30
   1a3d4:	0a 5d       	subi	r16, 0xDA	; 218
   1a3d6:	1f 4f       	sbci	r17, 0xFF	; 255
   1a3d8:	02 c0       	rjmp	.+4      	; 0x1a3de <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   1a3da:	0d ed       	ldi	r16, 0xDD	; 221
   1a3dc:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1a3de:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a3e0:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a3e2:	87 5b       	subi	r24, 0xB7	; 183
   1a3e4:	9f 4f       	sbci	r25, 0xFF	; 255
   1a3e6:	0e 94 66 c5 	call	0x18acc	; 0x18acc <lif_lifbcd2timestr>
   1a3ea:	ed b7       	in	r30, 0x3d	; 61
   1a3ec:	fe b7       	in	r31, 0x3e	; 62
   1a3ee:	97 83       	std	Z+7, r25	; 0x07
   1a3f0:	86 83       	std	Z+6, r24	; 0x06
   1a3f2:	15 83       	std	Z+5, r17	; 0x05
   1a3f4:	04 83       	std	Z+4, r16	; 0x04
   1a3f6:	8a e2       	ldi	r24, 0x2A	; 42
   1a3f8:	9a e3       	ldi	r25, 0x3A	; 58
   1a3fa:	a0 e0       	ldi	r26, 0x00	; 0
   1a3fc:	81 83       	std	Z+1, r24	; 0x01
   1a3fe:	92 83       	std	Z+2, r25	; 0x02
   1a400:	a3 83       	std	Z+3, r26	; 0x03
   1a402:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1a406:	8a ee       	ldi	r24, 0xEA	; 234
   1a408:	99 e3       	ldi	r25, 0x39	; 57
   1a40a:	a0 e0       	ldi	r26, 0x00	; 0
   1a40c:	ed b7       	in	r30, 0x3d	; 61
   1a40e:	fe b7       	in	r31, 0x3e	; 62
   1a410:	81 83       	std	Z+1, r24	; 0x01
   1a412:	92 83       	std	Z+2, r25	; 0x02
   1a414:	a3 83       	std	Z+3, r26	; 0x03
   1a416:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1a41a:	00 e2       	ldi	r16, 0x20	; 32
   1a41c:	10 e0       	ldi	r17, 0x00	; 0
   1a41e:	1f 8b       	std	Y+23, r17	; 0x17
   1a420:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1a422:	21 2c       	mov	r2, r1
   1a424:	31 2c       	mov	r3, r1
    {

        if(!lif_readdirindex(LIF,index))
            break;

        if(LIF->DIR.FileType == 0xffff)
   1a426:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a428:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a42a:	06 5a       	subi	r16, 0xA6	; 166
   1a42c:	1f 4f       	sbci	r17, 0xFF	; 255
   1a42e:	1d 8f       	std	Y+29, r17	; 0x1d
   1a430:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a432:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a434:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a436:	00 5a       	subi	r16, 0xA0	; 160
   1a438:	1f 4f       	sbci	r17, 0xFF	; 255
   1a43a:	1d a3       	std	Y+37, r17	; 0x25
   1a43c:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a43e:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a440:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a442:	04 59       	subi	r16, 0x94	; 148
   1a444:	1f 4f       	sbci	r17, 0xFF	; 255
   1a446:	1f a3       	std	Y+39, r17	; 0x27
   1a448:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a44a:	8e e9       	ldi	r24, 0x9E	; 158
   1a44c:	99 e3       	ldi	r25, 0x39	; 57
   1a44e:	6c 01       	movw	r12, r24
   1a450:	e1 2c       	mov	r14, r1
   1a452:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a454:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a456:	01 5b       	subi	r16, 0xB1	; 177
   1a458:	1f 4f       	sbci	r17, 0xFF	; 255
   1a45a:	1f 8f       	std	Y+31, r17	; 0x1f
   1a45c:	0e 8f       	std	Y+30, r16	; 0x1e
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a45e:	8e e6       	ldi	r24, 0x6E	; 110
   1a460:	99 e3       	ldi	r25, 0x39	; 57
   1a462:	2c 01       	movw	r4, r24
   1a464:	61 2c       	mov	r6, r1
   1a466:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a468:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a46a:	04 5a       	subi	r16, 0xA4	; 164
   1a46c:	1f 4f       	sbci	r17, 0xFF	; 255
   1a46e:	19 a7       	std	Y+41, r17	; 0x29
   1a470:	08 a7       	std	Y+40, r16	; 0x28
   1a472:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a474:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a476:	02 59       	subi	r16, 0x92	; 146
   1a478:	1f 4f       	sbci	r17, 0xFF	; 255
   1a47a:	1b a7       	std	Y+43, r17	; 0x2b
   1a47c:	0a a7       	std	Y+42, r16	; 0x2a
   1a47e:	0e a5       	ldd	r16, Y+46	; 0x2e
   1a480:	1f a5       	ldd	r17, Y+47	; 0x2f
   1a482:	0c 59       	subi	r16, 0x9C	; 156
   1a484:	1f 4f       	sbci	r17, 0xFF	; 255
   1a486:	1d a7       	std	Y+45, r17	; 0x2d
   1a488:	0c a7       	std	Y+44, r16	; 0x2c

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1a48a:	b1 01       	movw	r22, r2
   1a48c:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a48e:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a490:	4d d8       	rcall	.-3942   	; 0x1952c <lif_readdirindex>
   1a492:	89 2b       	or	r24, r25
   1a494:	09 f4       	brne	.+2      	; 0x1a498 <lif_dir+0x10e>
   1a496:	ad c0       	rjmp	.+346    	; 0x1a5f2 <lif_dir+0x268>
            break;

        if(LIF->DIR.FileType == 0xffff)
   1a498:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a49a:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a49c:	8d 91       	ld	r24, X+
   1a49e:	9c 91       	ld	r25, X
   1a4a0:	8f 3f       	cpi	r24, 0xFF	; 255
   1a4a2:	bf ef       	ldi	r27, 0xFF	; 255
   1a4a4:	9b 07       	cpc	r25, r27
   1a4a6:	09 f4       	brne	.+2      	; 0x1a4aa <lif_dir+0x120>
   1a4a8:	a4 c0       	rjmp	.+328    	; 0x1a5f2 <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1a4aa:	ec a1       	ldd	r30, Y+36	; 0x24
   1a4ac:	fd a1       	ldd	r31, Y+37	; 0x25
   1a4ae:	40 81       	ld	r20, Z
   1a4b0:	51 81       	ldd	r21, Z+1	; 0x01
   1a4b2:	62 81       	ldd	r22, Z+2	; 0x02
   1a4b4:	73 81       	ldd	r23, Z+3	; 0x03
   1a4b6:	00 27       	eor	r16, r16
   1a4b8:	14 2f       	mov	r17, r20
   1a4ba:	25 2f       	mov	r18, r21
   1a4bc:	36 2f       	mov	r19, r22
   1a4be:	08 8f       	std	Y+24, r16	; 0x18
   1a4c0:	19 8f       	std	Y+25, r17	; 0x19
   1a4c2:	2a 8f       	std	Y+26, r18	; 0x1a
   1a4c4:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1a4c6:	8c 7f       	andi	r24, 0xFC	; 252
   1a4c8:	80 31       	cpi	r24, 0x10	; 16
   1a4ca:	90 4e       	sbci	r25, 0xE0	; 224
   1a4cc:	09 f0       	breq	.+2      	; 0x1a4d0 <lif_dir+0x146>
   1a4ce:	4b c0       	rjmp	.+150    	; 0x1a566 <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a4d0:	ae a1       	ldd	r26, Y+38	; 0x26
   1a4d2:	bf a1       	ldd	r27, Y+39	; 0x27
   1a4d4:	8d 91       	ld	r24, X+
   1a4d6:	9c 91       	ld	r25, X
   1a4d8:	00 97       	sbiw	r24, 0x00	; 0
   1a4da:	b9 f0       	breq	.+46     	; 0x1a50a <lif_dir+0x180>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a4dc:	4c 01       	movw	r8, r24
   1a4de:	a1 2c       	mov	r10, r1
   1a4e0:	b1 2c       	mov	r11, r1
   1a4e2:	33 27       	eor	r19, r19
   1a4e4:	2b 2d       	mov	r18, r11
   1a4e6:	1a 2d       	mov	r17, r10
   1a4e8:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a4ea:	88 23       	and	r24, r24
   1a4ec:	21 f0       	breq	.+8      	; 0x1a4f6 <lif_dir+0x16c>
        ++sectors;
   1a4ee:	0f 5f       	subi	r16, 0xFF	; 255
   1a4f0:	1f 4f       	sbci	r17, 0xFF	; 255
   1a4f2:	2f 4f       	sbci	r18, 0xFF	; 255
   1a4f4:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1a4f6:	40 17       	cp	r20, r16
   1a4f8:	51 07       	cpc	r21, r17
   1a4fa:	62 07       	cpc	r22, r18
   1a4fc:	73 07       	cpc	r23, r19
   1a4fe:	29 f4       	brne	.+10     	; 0x1a50a <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   1a500:	88 8e       	std	Y+24, r8	; 0x18
   1a502:	99 8e       	std	Y+25, r9	; 0x19
   1a504:	aa 8e       	std	Y+26, r10	; 0x1a
   1a506:	bb 8e       	std	Y+27, r11	; 0x1b
   1a508:	2e c0       	rjmp	.+92     	; 0x1a566 <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
   1a50a:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a50e:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a512:	32 ff       	sbrs	r19, 2
   1a514:	24 c0       	rjmp	.+72     	; 0x1a55e <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a516:	4c 01       	movw	r8, r24
   1a518:	a1 2c       	mov	r10, r1
   1a51a:	b1 2c       	mov	r11, r1
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a51c:	33 27       	eor	r19, r19
   1a51e:	2b 2d       	mov	r18, r11
   1a520:	1a 2d       	mov	r17, r10
   1a522:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a524:	88 23       	and	r24, r24
   1a526:	21 f0       	breq	.+8      	; 0x1a530 <lif_dir+0x1a6>
        ++sectors;
   1a528:	0f 5f       	subi	r16, 0xFF	; 255
   1a52a:	1f 4f       	sbci	r17, 0xFF	; 255
   1a52c:	2f 4f       	sbci	r18, 0xFF	; 255
   1a52e:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   1a530:	ed b7       	in	r30, 0x3d	; 61
   1a532:	fe b7       	in	r31, 0x3e	; 62
   1a534:	46 87       	std	Z+14, r20	; 0x0e
   1a536:	57 87       	std	Z+15, r21	; 0x0f
   1a538:	60 8b       	std	Z+16, r22	; 0x10
   1a53a:	71 8b       	std	Z+17, r23	; 0x11
   1a53c:	02 87       	std	Z+10, r16	; 0x0a
   1a53e:	13 87       	std	Z+11, r17	; 0x0b
   1a540:	24 87       	std	Z+12, r18	; 0x0c
   1a542:	35 87       	std	Z+13, r19	; 0x0d
   1a544:	86 82       	std	Z+6, r8	; 0x06
   1a546:	97 82       	std	Z+7, r9	; 0x07
   1a548:	a0 86       	std	Z+8, r10	; 0x08
   1a54a:	b1 86       	std	Z+9, r11	; 0x09
   1a54c:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a54e:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a550:	15 83       	std	Z+5, r17	; 0x05
   1a552:	04 83       	std	Z+4, r16	; 0x04
   1a554:	c1 82       	std	Z+1, r12	; 0x01
   1a556:	d2 82       	std	Z+2, r13	; 0x02
   1a558:	e3 82       	std	Z+3, r14	; 0x03
   1a55a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1a55e:	01 e2       	ldi	r16, 0x21	; 33
   1a560:	10 e0       	ldi	r17, 0x00	; 0
   1a562:	1f 8b       	std	Y+23, r17	; 0x17
   1a564:	0e 8b       	std	Y+22, r16	; 0x16
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   1a566:	ac 8d       	ldd	r26, Y+28	; 0x1c
   1a568:	bd 8d       	ldd	r27, Y+29	; 0x1d
   1a56a:	8d 90       	ld	r8, X+
   1a56c:	9c 90       	ld	r9, X
   1a56e:	81 14       	cp	r8, r1
   1a570:	91 04       	cpc	r9, r1
   1a572:	19 f0       	breq	.+6      	; 0x1a57a <lif_dir+0x1f0>
   1a574:	0e 8d       	ldd	r16, Y+30	; 0x1e
   1a576:	1f 8d       	ldd	r17, Y+31	; 0x1f
   1a578:	02 c0       	rjmp	.+4      	; 0x1a57e <lif_dir+0x1f4>
   1a57a:	0a e3       	ldi	r16, 0x3A	; 58
   1a57c:	16 e1       	ldi	r17, 0x16	; 22
   1a57e:	a8 a5       	ldd	r26, Y+40	; 0x28
   1a580:	b9 a5       	ldd	r27, Y+41	; 0x29
   1a582:	8d 91       	ld	r24, X+
   1a584:	9d 91       	ld	r25, X+
   1a586:	0d 90       	ld	r0, X+
   1a588:	bc 91       	ld	r27, X
   1a58a:	a0 2d       	mov	r26, r0
   1a58c:	88 a3       	std	Y+32, r24	; 0x20
   1a58e:	99 a3       	std	Y+33, r25	; 0x21
   1a590:	aa a3       	std	Y+34, r26	; 0x22
   1a592:	bb a3       	std	Y+35, r27	; 0x23
   1a594:	ea a5       	ldd	r30, Y+42	; 0x2a
   1a596:	fb a5       	ldd	r31, Y+43	; 0x2b
   1a598:	a0 80       	ld	r10, Z
   1a59a:	b1 80       	ldd	r11, Z+1	; 0x01
   1a59c:	8c a5       	ldd	r24, Y+44	; 0x2c
   1a59e:	9d a5       	ldd	r25, Y+45	; 0x2d
   1a5a0:	0e 94 66 c5 	call	0x18acc	; 0x18acc <lif_lifbcd2timestr>
   1a5a4:	ed b7       	in	r30, 0x3d	; 61
   1a5a6:	fe b7       	in	r31, 0x3e	; 62
   1a5a8:	95 8b       	std	Z+21, r25	; 0x15
   1a5aa:	84 8b       	std	Z+20, r24	; 0x14
   1a5ac:	b3 8a       	std	Z+19, r11	; 0x13
   1a5ae:	a2 8a       	std	Z+18, r10	; 0x12
   1a5b0:	2e 89       	ldd	r18, Y+22	; 0x16
   1a5b2:	3f 89       	ldd	r19, Y+23	; 0x17
   1a5b4:	31 8b       	std	Z+17, r19	; 0x11
   1a5b6:	20 8b       	std	Z+16, r18	; 0x10
   1a5b8:	88 8d       	ldd	r24, Y+24	; 0x18
   1a5ba:	99 8d       	ldd	r25, Y+25	; 0x19
   1a5bc:	aa 8d       	ldd	r26, Y+26	; 0x1a
   1a5be:	bb 8d       	ldd	r27, Y+27	; 0x1b
   1a5c0:	84 87       	std	Z+12, r24	; 0x0c
   1a5c2:	95 87       	std	Z+13, r25	; 0x0d
   1a5c4:	a6 87       	std	Z+14, r26	; 0x0e
   1a5c6:	b7 87       	std	Z+15, r27	; 0x0f
   1a5c8:	88 a1       	ldd	r24, Y+32	; 0x20
   1a5ca:	99 a1       	ldd	r25, Y+33	; 0x21
   1a5cc:	aa a1       	ldd	r26, Y+34	; 0x22
   1a5ce:	bb a1       	ldd	r27, Y+35	; 0x23
   1a5d0:	80 87       	std	Z+8, r24	; 0x08
   1a5d2:	91 87       	std	Z+9, r25	; 0x09
   1a5d4:	a2 87       	std	Z+10, r26	; 0x0a
   1a5d6:	b3 87       	std	Z+11, r27	; 0x0b
   1a5d8:	97 82       	std	Z+7, r9	; 0x07
   1a5da:	86 82       	std	Z+6, r8	; 0x06
   1a5dc:	15 83       	std	Z+5, r17	; 0x05
   1a5de:	04 83       	std	Z+4, r16	; 0x04
   1a5e0:	41 82       	std	Z+1, r4	; 0x01
   1a5e2:	52 82       	std	Z+2, r5	; 0x02
   1a5e4:	63 82       	std	Z+3, r6	; 0x03
   1a5e6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            (long)bytes,
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1a5ea:	ff ef       	ldi	r31, 0xFF	; 255
   1a5ec:	2f 1a       	sub	r2, r31
   1a5ee:	3f 0a       	sbc	r3, r31
    }
   1a5f0:	4c cf       	rjmp	.-360    	; 0x1a48a <lif_dir+0x100>

    printf("\n");
   1a5f2:	8c e6       	ldi	r24, 0x6C	; 108
   1a5f4:	99 e3       	ldi	r25, 0x39	; 57
   1a5f6:	a0 e0       	ldi	r26, 0x00	; 0
   1a5f8:	ed b7       	in	r30, 0x3d	; 61
   1a5fa:	fe b7       	in	r31, 0x3e	; 62
   1a5fc:	81 83       	std	Z+1, r24	; 0x01
   1a5fe:	92 83       	std	Z+2, r25	; 0x02
   1a600:	a3 83       	std	Z+3, r26	; 0x03
   1a602:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1a606:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a608:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a60a:	84 8d       	ldd	r24, Z+28	; 0x1c
   1a60c:	95 8d       	ldd	r25, Z+29	; 0x1d
   1a60e:	09 2e       	mov	r0, r25
   1a610:	00 0c       	add	r0, r0
   1a612:	aa 0b       	sbc	r26, r26
   1a614:	bb 0b       	sbc	r27, r27
   1a616:	ed b7       	in	r30, 0x3d	; 61
   1a618:	fe b7       	in	r31, 0x3e	; 62
   1a61a:	84 83       	std	Z+4, r24	; 0x04
   1a61c:	95 83       	std	Z+5, r25	; 0x05
   1a61e:	a6 83       	std	Z+6, r26	; 0x06
   1a620:	b7 83       	std	Z+7, r27	; 0x07
   1a622:	80 e6       	ldi	r24, 0x60	; 96
   1a624:	99 e3       	ldi	r25, 0x39	; 57
   1a626:	a0 e0       	ldi	r26, 0x00	; 0
   1a628:	81 83       	std	Z+1, r24	; 0x01
   1a62a:	92 83       	std	Z+2, r25	; 0x02
   1a62c:	a3 83       	std	Z+3, r26	; 0x03
   1a62e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1a632:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a634:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a636:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a638:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a63a:	09 2e       	mov	r0, r25
   1a63c:	00 0c       	add	r0, r0
   1a63e:	aa 0b       	sbc	r26, r26
   1a640:	bb 0b       	sbc	r27, r27
   1a642:	ed b7       	in	r30, 0x3d	; 61
   1a644:	fe b7       	in	r31, 0x3e	; 62
   1a646:	84 83       	std	Z+4, r24	; 0x04
   1a648:	95 83       	std	Z+5, r25	; 0x05
   1a64a:	a6 83       	std	Z+6, r26	; 0x06
   1a64c:	b7 83       	std	Z+7, r27	; 0x07
   1a64e:	83 e5       	ldi	r24, 0x53	; 83
   1a650:	99 e3       	ldi	r25, 0x39	; 57
   1a652:	a0 e0       	ldi	r26, 0x00	; 0
   1a654:	81 83       	std	Z+1, r24	; 0x01
   1a656:	92 83       	std	Z+2, r25	; 0x02
   1a658:	a3 83       	std	Z+3, r26	; 0x03
   1a65a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   1a65e:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a660:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a662:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a664:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a666:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a668:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a66a:	ed b7       	in	r30, 0x3d	; 61
   1a66c:	fe b7       	in	r31, 0x3e	; 62
   1a66e:	84 83       	std	Z+4, r24	; 0x04
   1a670:	95 83       	std	Z+5, r25	; 0x05
   1a672:	a6 83       	std	Z+6, r26	; 0x06
   1a674:	b7 83       	std	Z+7, r27	; 0x07
   1a676:	82 e4       	ldi	r24, 0x42	; 66
   1a678:	99 e3       	ldi	r25, 0x39	; 57
   1a67a:	a0 e0       	ldi	r26, 0x00	; 0
   1a67c:	81 83       	std	Z+1, r24	; 0x01
   1a67e:	92 83       	std	Z+2, r25	; 0x02
   1a680:	a3 83       	std	Z+3, r26	; 0x03
   1a682:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   1a686:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a688:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a68a:	85 a9       	ldd	r24, Z+53	; 0x35
   1a68c:	96 a9       	ldd	r25, Z+54	; 0x36
   1a68e:	a7 a9       	ldd	r26, Z+55	; 0x37
   1a690:	b0 ad       	ldd	r27, Z+56	; 0x38
   1a692:	ed b7       	in	r30, 0x3d	; 61
   1a694:	fe b7       	in	r31, 0x3e	; 62
   1a696:	84 83       	std	Z+4, r24	; 0x04
   1a698:	95 83       	std	Z+5, r25	; 0x05
   1a69a:	a6 83       	std	Z+6, r26	; 0x06
   1a69c:	b7 83       	std	Z+7, r27	; 0x07
   1a69e:	8f e2       	ldi	r24, 0x2F	; 47
   1a6a0:	99 e3       	ldi	r25, 0x39	; 57
   1a6a2:	a0 e0       	ldi	r26, 0x00	; 0
   1a6a4:	81 83       	std	Z+1, r24	; 0x01
   1a6a6:	92 83       	std	Z+2, r25	; 0x02
   1a6a8:	a3 83       	std	Z+3, r26	; 0x03
   1a6aa:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1a6ae:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a6b0:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a6b2:	84 89       	ldd	r24, Z+20	; 0x14
   1a6b4:	95 89       	ldd	r25, Z+21	; 0x15
   1a6b6:	a6 89       	ldd	r26, Z+22	; 0x16
   1a6b8:	b7 89       	ldd	r27, Z+23	; 0x17
   1a6ba:	ed b7       	in	r30, 0x3d	; 61
   1a6bc:	fe b7       	in	r31, 0x3e	; 62
   1a6be:	84 83       	std	Z+4, r24	; 0x04
   1a6c0:	95 83       	std	Z+5, r25	; 0x05
   1a6c2:	a6 83       	std	Z+6, r26	; 0x06
   1a6c4:	b7 83       	std	Z+7, r27	; 0x07
   1a6c6:	8c e1       	ldi	r24, 0x1C	; 28
   1a6c8:	99 e3       	ldi	r25, 0x39	; 57
   1a6ca:	a0 e0       	ldi	r26, 0x00	; 0
   1a6cc:	81 83       	std	Z+1, r24	; 0x01
   1a6ce:	92 83       	std	Z+2, r25	; 0x02
   1a6d0:	a3 83       	std	Z+3, r26	; 0x03
   1a6d2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1a6d6:	ee a5       	ldd	r30, Y+46	; 0x2e
   1a6d8:	ff a5       	ldd	r31, Y+47	; 0x2f
   1a6da:	80 8d       	ldd	r24, Z+24	; 0x18
   1a6dc:	91 8d       	ldd	r25, Z+25	; 0x19
   1a6de:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1a6e0:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1a6e2:	ed b7       	in	r30, 0x3d	; 61
   1a6e4:	fe b7       	in	r31, 0x3e	; 62
   1a6e6:	84 83       	std	Z+4, r24	; 0x04
   1a6e8:	95 83       	std	Z+5, r25	; 0x05
   1a6ea:	a6 83       	std	Z+6, r26	; 0x06
   1a6ec:	b7 83       	std	Z+7, r27	; 0x07
   1a6ee:	89 e0       	ldi	r24, 0x09	; 9
   1a6f0:	99 e3       	ldi	r25, 0x39	; 57
   1a6f2:	a0 e0       	ldi	r26, 0x00	; 0
   1a6f4:	81 83       	std	Z+1, r24	; 0x01
   1a6f6:	92 83       	std	Z+2, r25	; 0x02
   1a6f8:	a3 83       	std	Z+3, r26	; 0x03
   1a6fa:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a6fe:	8e a5       	ldd	r24, Y+46	; 0x2e
   1a700:	9f a5       	ldd	r25, Y+47	; 0x2f
   1a702:	0e 94 08 ca 	call	0x19410	; 0x19410 <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1a706:	af 96       	adiw	r28, 0x2f	; 47
   1a708:	0f b6       	in	r0, 0x3f	; 63
   1a70a:	f8 94       	cli
   1a70c:	de bf       	out	0x3e, r29	; 62
   1a70e:	0f be       	out	0x3f, r0	; 63
   1a710:	cd bf       	out	0x3d, r28	; 61
   1a712:	df 91       	pop	r29
   1a714:	cf 91       	pop	r28
   1a716:	1f 91       	pop	r17
   1a718:	0f 91       	pop	r16
   1a71a:	ef 90       	pop	r14
   1a71c:	df 90       	pop	r13
   1a71e:	cf 90       	pop	r12
   1a720:	bf 90       	pop	r11
   1a722:	af 90       	pop	r10
   1a724:	9f 90       	pop	r9
   1a726:	8f 90       	pop	r8
   1a728:	6f 90       	pop	r6
   1a72a:	5f 90       	pop	r5
   1a72c:	4f 90       	pop	r4
   1a72e:	3f 90       	pop	r3
   1a730:	2f 90       	pop	r2
   1a732:	08 95       	ret

0001a734 <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1a734:	a5 e0       	ldi	r26, 0x05	; 5
   1a736:	b0 e0       	ldi	r27, 0x00	; 0
   1a738:	e0 ea       	ldi	r30, 0xA0	; 160
   1a73a:	f3 ed       	ldi	r31, 0xD3	; 211
   1a73c:	0c 94 6e e6 	jmp	0x1ccdc	; 0x1ccdc <__prologue_saves__+0x10>
   1a740:	7c 01       	movw	r14, r24
   1a742:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   1a744:	cb 01       	movw	r24, r22
   1a746:	0e 94 57 c2 	call	0x184ae	; 0x184ae <lif_checkname>
   1a74a:	89 2b       	or	r24, r25
   1a74c:	69 f4       	brne	.+26     	; 0x1a768 <lif_find_file+0x34>
    {
        if(debuglevel & LIF_DEBUG)
   1a74e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a752:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a756:	92 ff       	sbrs	r25, 2
   1a758:	48 c0       	rjmp	.+144    	; 0x1a7ea <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1a75a:	ed b7       	in	r30, 0x3d	; 61
   1a75c:	fe b7       	in	r31, 0x3e	; 62
   1a75e:	d5 83       	std	Z+5, r29	; 0x05
   1a760:	c4 83       	std	Z+4, r28	; 0x04
   1a762:	82 ee       	ldi	r24, 0xE2	; 226
   1a764:	98 e3       	ldi	r25, 0x38	; 56
   1a766:	15 c0       	rjmp	.+42     	; 0x1a792 <lif_find_file+0x5e>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1a768:	fe 01       	movw	r30, r28
   1a76a:	01 90       	ld	r0, Z+
   1a76c:	00 20       	and	r0, r0
   1a76e:	e9 f7       	brne	.-6      	; 0x1a76a <lif_find_file+0x36>
   1a770:	31 97       	sbiw	r30, 0x01	; 1
   1a772:	ec 1b       	sub	r30, r28
   1a774:	fd 0b       	sbc	r31, r29
   1a776:	3b 97       	sbiw	r30, 0x0b	; 11
   1a778:	98 f0       	brcs	.+38     	; 0x1a7a0 <lif_find_file+0x6c>
    {
        if(debuglevel & LIF_DEBUG)
   1a77a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a77e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a782:	92 ff       	sbrs	r25, 2
   1a784:	32 c0       	rjmp	.+100    	; 0x1a7ea <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1a786:	ed b7       	in	r30, 0x3d	; 61
   1a788:	fe b7       	in	r31, 0x3e	; 62
   1a78a:	d5 83       	std	Z+5, r29	; 0x05
   1a78c:	c4 83       	std	Z+4, r28	; 0x04
   1a78e:	8d eb       	ldi	r24, 0xBD	; 189
   1a790:	98 e3       	ldi	r25, 0x38	; 56
   1a792:	a0 e0       	ldi	r26, 0x00	; 0
   1a794:	81 83       	std	Z+1, r24	; 0x01
   1a796:	92 83       	std	Z+2, r25	; 0x02
   1a798:	a3 83       	std	Z+3, r26	; 0x03
   1a79a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1a79e:	25 c0       	rjmp	.+74     	; 0x1a7ea <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1a7a0:	e1 14       	cp	r14, r1
   1a7a2:	f1 04       	cpc	r15, r1
   1a7a4:	11 f1       	breq	.+68     	; 0x1a7ea <lif_find_file+0xb6>
   1a7a6:	00 e0       	ldi	r16, 0x00	; 0
   1a7a8:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a7aa:	67 01       	movw	r12, r14
   1a7ac:	fa e5       	ldi	r31, 0x5A	; 90
   1a7ae:	cf 0e       	add	r12, r31
   1a7b0:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a7b2:	57 01       	movw	r10, r14
   1a7b4:	2f e4       	ldi	r18, 0x4F	; 79
   1a7b6:	a2 0e       	add	r10, r18
   1a7b8:	b1 1c       	adc	r11, r1
        return(-1);

    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1a7ba:	b8 01       	movw	r22, r16
   1a7bc:	c7 01       	movw	r24, r14
   1a7be:	0e 94 96 ca 	call	0x1952c	; 0x1952c <lif_readdirindex>
   1a7c2:	89 2b       	or	r24, r25
   1a7c4:	91 f0       	breq	.+36     	; 0x1a7ea <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1a7c6:	f6 01       	movw	r30, r12
   1a7c8:	80 81       	ld	r24, Z
   1a7ca:	91 81       	ldd	r25, Z+1	; 0x01
   1a7cc:	8f 3f       	cpi	r24, 0xFF	; 255
   1a7ce:	ff ef       	ldi	r31, 0xFF	; 255
   1a7d0:	9f 07       	cpc	r25, r31
   1a7d2:	59 f0       	breq	.+22     	; 0x1a7ea <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a7d4:	89 2b       	or	r24, r25
   1a7d6:	31 f0       	breq	.+12     	; 0x1a7e4 <lif_find_file+0xb0>
   1a7d8:	be 01       	movw	r22, r28
   1a7da:	c5 01       	movw	r24, r10
   1a7dc:	0e 94 4d 31 	call	0x629a	; 0x629a <strcasecmp>
   1a7e0:	89 2b       	or	r24, r25
   1a7e2:	31 f0       	breq	.+12     	; 0x1a7f0 <lif_find_file+0xbc>
            break;
        ++index;
   1a7e4:	0f 5f       	subi	r16, 0xFF	; 255
   1a7e6:	1f 4f       	sbci	r17, 0xFF	; 255
   1a7e8:	e8 cf       	rjmp	.-48     	; 0x1a7ba <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1a7ea:	8f ef       	ldi	r24, 0xFF	; 255
   1a7ec:	9f ef       	ldi	r25, 0xFF	; 255
   1a7ee:	01 c0       	rjmp	.+2      	; 0x1a7f2 <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1a7f0:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   1a7f2:	cd b7       	in	r28, 0x3d	; 61
   1a7f4:	de b7       	in	r29, 0x3e	; 62
   1a7f6:	25 96       	adiw	r28, 0x05	; 5
   1a7f8:	ea e0       	ldi	r30, 0x0A	; 10
   1a7fa:	0c 94 8a e6 	jmp	0x1cd14	; 0x1cd14 <__epilogue_restores__+0x10>

0001a7fe <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1a7fe:	a5 e0       	ldi	r26, 0x05	; 5
   1a800:	b0 e0       	ldi	r27, 0x00	; 0
   1a802:	e5 e0       	ldi	r30, 0x05	; 5
   1a804:	f4 ed       	ldi	r31, 0xD4	; 212
   1a806:	0c 94 70 e6 	jmp	0x1cce0	; 0x1cce0 <__prologue_saves__+0x14>
   1a80a:	6b 01       	movw	r12, r22
   1a80c:	7c 01       	movw	r14, r24
   1a80e:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1a810:	20 e0       	ldi	r18, 0x00	; 0
   1a812:	31 e0       	ldi	r19, 0x01	; 1
   1a814:	40 e0       	ldi	r20, 0x00	; 0
   1a816:	50 e0       	ldi	r21, 0x00	; 0
   1a818:	0e 94 1b e6 	call	0x1cc36	; 0x1cc36 <__divmodsi4>
    if(!pos)
   1a81c:	61 15       	cp	r22, r1
   1a81e:	71 05       	cpc	r23, r1
   1a820:	e1 f1       	breq	.+120    	; 0x1a89a <lif_e010_pad_sector+0x9c>
        return(0);

// Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1a822:	c0 e0       	ldi	r28, 0x00	; 0
   1a824:	d1 e0       	ldi	r29, 0x01	; 1
   1a826:	c6 1b       	sub	r28, r22
   1a828:	d7 0b       	sbc	r29, r23

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
   1a82a:	f8 01       	movw	r30, r16
   1a82c:	8f ee       	ldi	r24, 0xEF	; 239
   1a82e:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1a830:	2f ef       	ldi	r18, 0xFF	; 255

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1a832:	cf 01       	movw	r24, r30
   1a834:	80 1b       	sub	r24, r16
   1a836:	91 0b       	sbc	r25, r17
   1a838:	8c 17       	cp	r24, r28
   1a83a:	9d 07       	cpc	r25, r29
   1a83c:	14 f4       	brge	.+4      	; 0x1a842 <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1a83e:	21 93       	st	Z+, r18
   1a840:	f8 cf       	rjmp	.-16     	; 0x1a832 <lif_e010_pad_sector+0x34>
   1a842:	1c 16       	cp	r1, r28
   1a844:	1d 06       	cpc	r1, r29
   1a846:	14 f0       	brlt	.+4      	; 0x1a84c <lif_e010_pad_sector+0x4e>
   1a848:	c1 e0       	ldi	r28, 0x01	; 1
   1a84a:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1a84c:	ce 01       	movw	r24, r28
   1a84e:	0d 2e       	mov	r0, r29
   1a850:	00 0c       	add	r0, r0
   1a852:	aa 0b       	sbc	r26, r26
   1a854:	bb 0b       	sbc	r27, r27
   1a856:	bc 01       	movw	r22, r24
   1a858:	cd 01       	movw	r24, r26
   1a85a:	6c 0d       	add	r22, r12
   1a85c:	7d 1d       	adc	r23, r13
   1a85e:	8e 1d       	adc	r24, r14
   1a860:	9f 1d       	adc	r25, r15
   1a862:	20 e0       	ldi	r18, 0x00	; 0
   1a864:	31 e0       	ldi	r19, 0x01	; 1
   1a866:	40 e0       	ldi	r20, 0x00	; 0
   1a868:	50 e0       	ldi	r21, 0x00	; 0
   1a86a:	0e 94 1b e6 	call	0x1cc36	; 0x1cc36 <__divmodsi4>
// NEW SECTOR
// Debugging make sure we are at sector boundry
    if(pos)
   1a86e:	61 15       	cp	r22, r1
   1a870:	71 05       	cpc	r23, r1
   1a872:	b1 f0       	breq	.+44     	; 0x1a8a0 <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & LIF_DEBUG)
   1a874:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a878:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a87c:	32 ff       	sbrs	r19, 2
   1a87e:	12 c0       	rjmp	.+36     	; 0x1a8a4 <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1a880:	ed b7       	in	r30, 0x3d	; 61
   1a882:	fe b7       	in	r31, 0x3e	; 62
   1a884:	75 83       	std	Z+5, r23	; 0x05
   1a886:	64 83       	std	Z+4, r22	; 0x04
   1a888:	84 e8       	ldi	r24, 0x84	; 132
   1a88a:	98 e3       	ldi	r25, 0x38	; 56
   1a88c:	a0 e0       	ldi	r26, 0x00	; 0
   1a88e:	81 83       	std	Z+1, r24	; 0x01
   1a890:	92 83       	std	Z+2, r25	; 0x02
   1a892:	a3 83       	std	Z+3, r26	; 0x03
   1a894:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1a898:	05 c0       	rjmp	.+10     	; 0x1a8a4 <lif_e010_pad_sector+0xa6>
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1a89a:	80 e0       	ldi	r24, 0x00	; 0
   1a89c:	90 e0       	ldi	r25, 0x00	; 0
   1a89e:	04 c0       	rjmp	.+8      	; 0x1a8a8 <lif_e010_pad_sector+0xaa>
   1a8a0:	ce 01       	movw	r24, r28
   1a8a2:	02 c0       	rjmp	.+4      	; 0x1a8a8 <lif_e010_pad_sector+0xaa>
// Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & LIF_DEBUG)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1a8a4:	8f ef       	ldi	r24, 0xFF	; 255
   1a8a6:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1a8a8:	cd b7       	in	r28, 0x3d	; 61
   1a8aa:	de b7       	in	r29, 0x3e	; 62
   1a8ac:	25 96       	adiw	r28, 0x05	; 5
   1a8ae:	e8 e0       	ldi	r30, 0x08	; 8
   1a8b0:	0c 94 8c e6 	jmp	0x1cd18	; 0x1cd18 <__epilogue_restores__+0x14>

0001a8b4 <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1a8b4:	a5 e0       	ldi	r26, 0x05	; 5
   1a8b6:	b0 e0       	ldi	r27, 0x00	; 0
   1a8b8:	e0 e6       	ldi	r30, 0x60	; 96
   1a8ba:	f4 ed       	ldi	r31, 0xD4	; 212
   1a8bc:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
   1a8c0:	ec 01       	movw	r28, r24
   1a8c2:	4a 01       	movw	r8, r20
   1a8c4:	5b 01       	movw	r10, r22
   1a8c6:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;

// String size
    len = strlen(str);
   1a8c8:	fc 01       	movw	r30, r24
   1a8ca:	01 90       	ld	r0, Z+
   1a8cc:	00 20       	and	r0, r0
   1a8ce:	e9 f7       	brne	.-6      	; 0x1a8ca <lif_ascii_string_to_e010+0x16>
   1a8d0:	31 97       	sbiw	r30, 0x01	; 1
   1a8d2:	6f 01       	movw	r12, r30
   1a8d4:	c8 1a       	sub	r12, r24
   1a8d6:	d9 0a       	sbc	r13, r25
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a8d8:	41 2c       	mov	r4, r1
   1a8da:	51 2c       	mov	r5, r1
   1a8dc:	32 01       	movw	r6, r4
   1a8de:	53 94       	inc	r5
   1a8e0:	cb 01       	movw	r24, r22
   1a8e2:	ba 01       	movw	r22, r20
   1a8e4:	a3 01       	movw	r20, r6
   1a8e6:	92 01       	movw	r18, r4
   1a8e8:	0e 94 1b e6 	call	0x1cc36	; 0x1cc36 <__divmodsi4>
   1a8ec:	21 2c       	mov	r2, r1
   1a8ee:	33 24       	eor	r3, r3
   1a8f0:	33 94       	inc	r3
   1a8f2:	c1 01       	movw	r24, r2
   1a8f4:	86 1b       	sub	r24, r22
   1a8f6:	97 0b       	sbc	r25, r23

/// We ALWAYS pad a sector if:
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1a8f8:	86 30       	cpi	r24, 0x06	; 6
   1a8fa:	91 05       	cpc	r25, r1
   1a8fc:	20 f0       	brcs	.+8      	; 0x1a906 <lif_ascii_string_to_e010+0x52>
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a8fe:	1c 01       	movw	r2, r24

// String size
    len = strlen(str);

// Output buffer index
    ind = 0;
   1a900:	00 e0       	ldi	r16, 0x00	; 0
   1a902:	10 e0       	ldi	r17, 0x00	; 0
   1a904:	17 c0       	rjmp	.+46     	; 0x1a934 <lif_ascii_string_to_e010+0x80>
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1a906:	a7 01       	movw	r20, r14
   1a908:	c5 01       	movw	r24, r10
   1a90a:	b4 01       	movw	r22, r8
   1a90c:	78 df       	rcall	.-272    	; 0x1a7fe <lif_e010_pad_sector>
   1a90e:	8c 01       	movw	r16, r24
        if(ind < 0)
   1a910:	97 fd       	sbrc	r25, 7
   1a912:	83 c0       	rjmp	.+262    	; 0x1aa1a <lif_ascii_string_to_e010+0x166>
            return(ind);

// Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1a914:	09 2e       	mov	r0, r25
   1a916:	00 0c       	add	r0, r0
   1a918:	aa 0b       	sbc	r26, r26
   1a91a:	bb 0b       	sbc	r27, r27
   1a91c:	bc 01       	movw	r22, r24
   1a91e:	cd 01       	movw	r24, r26
   1a920:	68 0d       	add	r22, r8
   1a922:	79 1d       	adc	r23, r9
   1a924:	8a 1d       	adc	r24, r10
   1a926:	9b 1d       	adc	r25, r11
   1a928:	a3 01       	movw	r20, r6
   1a92a:	92 01       	movw	r18, r4
   1a92c:	0e 94 1b e6 	call	0x1cc36	; 0x1cc36 <__divmodsi4>
   1a930:	26 1a       	sub	r2, r22
   1a932:	37 0a       	sbc	r3, r23
   1a934:	f7 01       	movw	r30, r14
   1a936:	e0 0f       	add	r30, r16
   1a938:	f1 1f       	adc	r31, r17
   1a93a:	0d 5f       	subi	r16, 0xFD	; 253
   1a93c:	1f 4f       	sbci	r17, 0xFF	; 255
    }

// Note: IMPORTANT we have >= 6 bytes!!!

// Do not have to split, there is enough room
    if(rem >= (3 + len))
   1a93e:	c6 01       	movw	r24, r12
   1a940:	02 96       	adiw	r24, 0x02	; 2
   1a942:	82 15       	cp	r24, r2
   1a944:	93 05       	cpc	r25, r3
   1a946:	84 f4       	brge	.+32     	; 0x1a968 <lif_ascii_string_to_e010+0xb4>
    {

// Write string in new sector
// The full string + header will fit
        wbuf[ind++] = 0xDF;
   1a948:	8f ed       	ldi	r24, 0xDF	; 223
   1a94a:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a94c:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1a94e:	d2 82       	std	Z+2, r13	; 0x02
   1a950:	f7 01       	movw	r30, r14
   1a952:	e0 0f       	add	r30, r16
   1a954:	f1 1f       	adc	r31, r17
   1a956:	cf 01       	movw	r24, r30
   1a958:	8e 19       	sub	r24, r14
   1a95a:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a95c:	29 91       	ld	r18, Y+
   1a95e:	22 23       	and	r18, r18
   1a960:	09 f4       	brne	.+2      	; 0x1a964 <lif_ascii_string_to_e010+0xb0>
   1a962:	5b c0       	rjmp	.+182    	; 0x1aa1a <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1a964:	21 93       	st	Z+, r18
   1a966:	f7 cf       	rjmp	.-18     	; 0x1a956 <lif_ascii_string_to_e010+0xa2>

// CURRENT SECTOR
// String spans a sector , so split the string

// 1st Split string header
        wbuf[ind++] = 0xCF;
   1a968:	8f ec       	ldi	r24, 0xCF	; 207
   1a96a:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a96c:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1a96e:	d2 82       	std	Z+2, r13	; 0x02
   1a970:	d7 01       	movw	r26, r14
   1a972:	a0 0f       	add	r26, r16
   1a974:	b1 1f       	adc	r27, r17
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a976:	fe 01       	movw	r30, r28
   1a978:	81 91       	ld	r24, Z+
   1a97a:	81 11       	cpse	r24, r1
   1a97c:	0e c0       	rjmp	.+28     	; 0x1a99a <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1a97e:	c8 01       	movw	r24, r16
   1a980:	01 2e       	mov	r0, r17
   1a982:	00 0c       	add	r0, r0
   1a984:	aa 0b       	sbc	r26, r26
   1a986:	bb 0b       	sbc	r27, r27
   1a988:	bc 01       	movw	r22, r24
   1a98a:	cd 01       	movw	r24, r26
   1a98c:	68 0d       	add	r22, r8
   1a98e:	79 1d       	adc	r23, r9
   1a990:	8a 1d       	adc	r24, r10
   1a992:	9b 1d       	adc	r25, r11
   1a994:	61 11       	cpse	r22, r1
   1a996:	09 c0       	rjmp	.+18     	; 0x1a9aa <lif_ascii_string_to_e010+0xf6>
   1a998:	21 c0       	rjmp	.+66     	; 0x1a9dc <lif_ascii_string_to_e010+0x128>
// 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a99a:	02 15       	cp	r16, r2
   1a99c:	13 05       	cpc	r17, r3
   1a99e:	7c f7       	brge	.-34     	; 0x1a97e <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1a9a0:	0f 5f       	subi	r16, 0xFF	; 255
   1a9a2:	1f 4f       	sbci	r17, 0xFF	; 255
   1a9a4:	8d 93       	st	X+, r24
   1a9a6:	ef 01       	movw	r28, r30
   1a9a8:	e6 cf       	rjmp	.-52     	; 0x1a976 <lif_ascii_string_to_e010+0xc2>

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
   1a9aa:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a9ae:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a9b2:	32 ff       	sbrs	r19, 2
   1a9b4:	30 c0       	rjmp	.+96     	; 0x1aa16 <lif_ascii_string_to_e010+0x162>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1a9b6:	20 e0       	ldi	r18, 0x00	; 0
   1a9b8:	31 e0       	ldi	r19, 0x01	; 1
   1a9ba:	40 e0       	ldi	r20, 0x00	; 0
   1a9bc:	50 e0       	ldi	r21, 0x00	; 0
   1a9be:	0e 94 1b e6 	call	0x1cc36	; 0x1cc36 <__divmodsi4>
   1a9c2:	ed b7       	in	r30, 0x3d	; 61
   1a9c4:	fe b7       	in	r31, 0x3e	; 62
   1a9c6:	75 83       	std	Z+5, r23	; 0x05
   1a9c8:	64 83       	std	Z+4, r22	; 0x04
   1a9ca:	80 e6       	ldi	r24, 0x60	; 96
   1a9cc:	98 e3       	ldi	r25, 0x38	; 56
   1a9ce:	a0 e0       	ldi	r26, 0x00	; 0
   1a9d0:	81 83       	std	Z+1, r24	; 0x01
   1a9d2:	92 83       	std	Z+2, r25	; 0x02
   1a9d4:	a3 83       	std	Z+3, r26	; 0x03
   1a9d6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1a9da:	1d c0       	rjmp	.+58     	; 0x1aa16 <lif_ascii_string_to_e010+0x162>
            return(-1);
        }

// Update remining string length
        len = strlen(str);
   1a9dc:	fe 01       	movw	r30, r28
   1a9de:	01 90       	ld	r0, Z+
   1a9e0:	00 20       	and	r0, r0
   1a9e2:	e9 f7       	brne	.-6      	; 0x1a9de <lif_ascii_string_to_e010+0x12a>
   1a9e4:	31 97       	sbiw	r30, 0x01	; 1
   1a9e6:	9f 01       	movw	r18, r30
   1a9e8:	2c 1b       	sub	r18, r28
   1a9ea:	3d 0b       	sbc	r19, r29
// 2nd Split string header
        wbuf[ind++] = 0x6F;
   1a9ec:	d7 01       	movw	r26, r14
   1a9ee:	a0 0f       	add	r26, r16
   1a9f0:	b1 1f       	adc	r27, r17
   1a9f2:	8f e6       	ldi	r24, 0x6F	; 111
   1a9f4:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1a9f6:	fd 01       	movw	r30, r26
   1a9f8:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1a9fa:	32 83       	std	Z+2, r19	; 0x02
   1a9fc:	0d 5f       	subi	r16, 0xFD	; 253
   1a9fe:	1f 4f       	sbci	r17, 0xFF	; 255
   1aa00:	f7 01       	movw	r30, r14
   1aa02:	e0 0f       	add	r30, r16
   1aa04:	f1 1f       	adc	r31, r17
   1aa06:	cf 01       	movw	r24, r30
   1aa08:	8e 19       	sub	r24, r14
   1aa0a:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1aa0c:	29 91       	ld	r18, Y+
   1aa0e:	22 23       	and	r18, r18
   1aa10:	21 f0       	breq	.+8      	; 0x1aa1a <lif_ascii_string_to_e010+0x166>
            wbuf[ind++] = *str++;
   1aa12:	21 93       	st	Z+, r18
   1aa14:	f8 cf       	rjmp	.-16     	; 0x1aa06 <lif_ascii_string_to_e010+0x152>
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & LIF_DEBUG)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1aa16:	8f ef       	ldi	r24, 0xFF	; 255
   1aa18:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1aa1a:	cd b7       	in	r28, 0x3d	; 61
   1aa1c:	de b7       	in	r29, 0x3e	; 62
   1aa1e:	25 96       	adiw	r28, 0x05	; 5
   1aa20:	e2 e1       	ldi	r30, 0x12	; 18
   1aa22:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

0001aa26 <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1aa26:	ad e0       	ldi	r26, 0x0D	; 13
   1aa28:	b3 e0       	ldi	r27, 0x03	; 3
   1aa2a:	e9 e1       	ldi	r30, 0x19	; 25
   1aa2c:	f5 ed       	ldi	r31, 0xD5	; 213
   1aa2e:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
   1aa32:	5c 01       	movw	r10, r24
   1aa34:	2a 01       	movw	r4, r20
   1aa36:	3b 01       	movw	r6, r22
   1aa38:	c9 01       	movw	r24, r18
// strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
// output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1aa3a:	6c ee       	ldi	r22, 0xEC	; 236
   1aa3c:	78 e0       	ldi	r23, 0x08	; 8
   1aa3e:	0e 94 b8 c0 	call	0x18170	; 0x18170 <lif_open>
   1aa42:	c7 5f       	subi	r28, 0xF7	; 247
   1aa44:	dc 4f       	sbci	r29, 0xFC	; 252
   1aa46:	99 83       	std	Y+1, r25	; 0x01
   1aa48:	88 83       	st	Y, r24
   1aa4a:	c9 50       	subi	r28, 0x09	; 9
   1aa4c:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1aa4e:	89 2b       	or	r24, r25
   1aa50:	09 f4       	brne	.+2      	; 0x1aa54 <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1aa52:	63 c0       	rjmp	.+198    	; 0x1ab1a <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1aa54:	81 2c       	mov	r8, r1
   1aa56:	91 2c       	mov	r9, r1
   1aa58:	c1 2c       	mov	r12, r1
   1aa5a:	d1 2c       	mov	r13, r1
   1aa5c:	76 01       	movw	r14, r12

        if(count > 256)
        {
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1aa5e:	82 e5       	ldi	r24, 0x52	; 82
   1aa60:	98 e3       	ldi	r25, 0x38	; 56
   1aa62:	9c 01       	movw	r18, r24
   1aa64:	40 e0       	ldi	r20, 0x00	; 0
   1aa66:	c5 5f       	subi	r28, 0xF5	; 245
   1aa68:	dc 4f       	sbci	r29, 0xFC	; 252
   1aa6a:	28 83       	st	Y, r18
   1aa6c:	39 83       	std	Y+1, r19	; 0x01
   1aa6e:	4a 83       	std	Y+2, r20	; 0x02
   1aa70:	cb 50       	subi	r28, 0x0B	; 11
   1aa72:	d3 40       	sbci	r29, 0x03	; 3
   1aa74:	14 c0       	rjmp	.+40     	; 0x1aa9e <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1aa76:	c1 01       	movw	r24, r2
   1aa78:	03 2c       	mov	r0, r3
   1aa7a:	00 0c       	add	r0, r0
   1aa7c:	aa 0b       	sbc	r26, r26
   1aa7e:	bb 0b       	sbc	r27, r27
   1aa80:	48 0e       	add	r4, r24
   1aa82:	59 1e       	adc	r5, r25
   1aa84:	6a 1e       	adc	r6, r26
   1aa86:	7b 1e       	adc	r7, r27
        bytes += size;
   1aa88:	c8 0e       	add	r12, r24
   1aa8a:	d9 1e       	adc	r13, r25
   1aa8c:	ea 1e       	adc	r14, r26
   1aa8e:	fb 1e       	adc	r15, r27
        count += size;
   1aa90:	82 0c       	add	r8, r2
   1aa92:	93 1c       	adc	r9, r3

        if(count > 256)
   1aa94:	31 e0       	ldi	r19, 0x01	; 1
   1aa96:	83 16       	cp	r8, r19
   1aa98:	93 06       	cpc	r9, r19
   1aa9a:	0c f0       	brlt	.+2      	; 0x1aa9e <lif_add_ascii_file_as_e010_wrapper+0x78>
   1aa9c:	43 c0       	rjmp	.+134    	; 0x1ab24 <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

// Read user file and write LIF records
// reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1aa9e:	c7 5f       	subi	r28, 0xF7	; 247
   1aaa0:	dc 4f       	sbci	r29, 0xFC	; 252
   1aaa2:	48 81       	ld	r20, Y
   1aaa4:	59 81       	ldd	r21, Y+1	; 0x01
   1aaa6:	c9 50       	subi	r28, 0x09	; 9
   1aaa8:	d3 40       	sbci	r29, 0x03	; 3
   1aaaa:	6d ef       	ldi	r22, 0xFD	; 253
   1aaac:	70 e0       	ldi	r23, 0x00	; 0
   1aaae:	ce 01       	movw	r24, r28
   1aab0:	88 5f       	subi	r24, 0xF8	; 248
   1aab2:	9d 4f       	sbci	r25, 0xFD	; 253
   1aab4:	0e 94 ec 75 	call	0xebd8	; 0xebd8 <fgets>
   1aab8:	89 2b       	or	r24, r25
   1aaba:	09 f4       	brne	.+2      	; 0x1aabe <lif_add_ascii_file_as_e010_wrapper+0x98>
   1aabc:	4b c0       	rjmp	.+150    	; 0x1ab54 <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1aabe:	ce 01       	movw	r24, r28
   1aac0:	88 5f       	subi	r24, 0xF8	; 248
   1aac2:	9d 4f       	sbci	r25, 0xFD	; 253
   1aac4:	0e 94 c4 31 	call	0x6388	; 0x6388 <trim_tail>

        strcat((char *)str,"\r");                 // HP85 lines end with "\r"
   1aac8:	63 e4       	ldi	r22, 0x43	; 67
   1aaca:	76 e1       	ldi	r23, 0x16	; 22
   1aacc:	ce 01       	movw	r24, r28
   1aace:	88 5f       	subi	r24, 0xF8	; 248
   1aad0:	9d 4f       	sbci	r25, 0xFD	; 253
   1aad2:	0e 94 07 31 	call	0x620e	; 0x620e <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1aad6:	9e 01       	movw	r18, r28
   1aad8:	28 5f       	subi	r18, 0xF8	; 248
   1aada:	3f 4f       	sbci	r19, 0xFF	; 255
   1aadc:	b3 01       	movw	r22, r6
   1aade:	a2 01       	movw	r20, r4
   1aae0:	ce 01       	movw	r24, r28
   1aae2:	88 5f       	subi	r24, 0xF8	; 248
   1aae4:	9d 4f       	sbci	r25, 0xFD	; 253
   1aae6:	e6 de       	rcall	.-564    	; 0x1a8b4 <lif_ascii_string_to_e010>
   1aae8:	1c 01       	movw	r2, r24
// Write string
// Now Write string
        if(LIF)
   1aaea:	a1 14       	cp	r10, r1
   1aaec:	b1 04       	cpc	r11, r1
   1aaee:	19 f2       	breq	.-122    	; 0x1aa76 <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1aaf0:	8c 01       	movw	r16, r24
   1aaf2:	a3 01       	movw	r20, r6
   1aaf4:	92 01       	movw	r18, r4
   1aaf6:	be 01       	movw	r22, r28
   1aaf8:	68 5f       	subi	r22, 0xF8	; 248
   1aafa:	7f 4f       	sbci	r23, 0xFF	; 255
   1aafc:	c5 01       	movw	r24, r10
   1aafe:	0e 94 8f c1 	call	0x1831e	; 0x1831e <lif_write>
            if(len < size)
   1ab02:	82 15       	cp	r24, r2
   1ab04:	93 05       	cpc	r25, r3
   1ab06:	0c f0       	brlt	.+2      	; 0x1ab0a <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1ab08:	b6 cf       	rjmp	.-148    	; 0x1aa76 <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1ab0a:	c7 5f       	subi	r28, 0xF7	; 247
   1ab0c:	dc 4f       	sbci	r29, 0xFC	; 252
   1ab0e:	88 81       	ld	r24, Y
   1ab10:	99 81       	ldd	r25, Y+1	; 0x01
   1ab12:	c9 50       	subi	r28, 0x09	; 9
   1ab14:	d3 40       	sbci	r29, 0x03	; 3
   1ab16:	0e 94 7e 7c 	call	0xf8fc	; 0xf8fc <fclose>
                return(-1);
   1ab1a:	6f ef       	ldi	r22, 0xFF	; 255
   1ab1c:	7f ef       	ldi	r23, 0xFF	; 255
   1ab1e:	8f ef       	ldi	r24, 0xFF	; 255
   1ab20:	9f ef       	ldi	r25, 0xFF	; 255
   1ab22:	84 c0       	rjmp	.+264    	; 0x1ac2c <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {
            count = 0;
            if(LIF)
   1ab24:	a1 14       	cp	r10, r1
   1ab26:	b1 04       	cpc	r11, r1
   1ab28:	91 f0       	breq	.+36     	; 0x1ab4e <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1ab2a:	ed b7       	in	r30, 0x3d	; 61
   1ab2c:	fe b7       	in	r31, 0x3e	; 62
   1ab2e:	c4 82       	std	Z+4, r12	; 0x04
   1ab30:	d5 82       	std	Z+5, r13	; 0x05
   1ab32:	e6 82       	std	Z+6, r14	; 0x06
   1ab34:	f7 82       	std	Z+7, r15	; 0x07
   1ab36:	c5 5f       	subi	r28, 0xF5	; 245
   1ab38:	dc 4f       	sbci	r29, 0xFC	; 252
   1ab3a:	28 81       	ld	r18, Y
   1ab3c:	39 81       	ldd	r19, Y+1	; 0x01
   1ab3e:	4a 81       	ldd	r20, Y+2	; 0x02
   1ab40:	cb 50       	subi	r28, 0x0B	; 11
   1ab42:	d3 40       	sbci	r29, 0x03	; 3
   1ab44:	21 83       	std	Z+1, r18	; 0x01
   1ab46:	32 83       	std	Z+2, r19	; 0x02
   1ab48:	43 83       	std	Z+3, r20	; 0x03
   1ab4a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {
            count = 0;
   1ab4e:	81 2c       	mov	r8, r1
   1ab50:	91 2c       	mov	r9, r1
   1ab52:	a5 cf       	rjmp	.-182    	; 0x1aa9e <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1ab54:	c7 5f       	subi	r28, 0xF7	; 247
   1ab56:	dc 4f       	sbci	r29, 0xFC	; 252
   1ab58:	88 81       	ld	r24, Y
   1ab5a:	99 81       	ldd	r25, Y+1	; 0x01
   1ab5c:	c9 50       	subi	r28, 0x09	; 9
   1ab5e:	d3 40       	sbci	r29, 0x03	; 3
   1ab60:	0e 94 7e 7c 	call	0xf8fc	; 0xf8fc <fclose>

// Write EOF
    str[0] = 0;
   1ab64:	c8 5f       	subi	r28, 0xF8	; 248
   1ab66:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab68:	18 82       	st	Y, r1
   1ab6a:	c8 50       	subi	r28, 0x08	; 8
   1ab6c:	d2 40       	sbci	r29, 0x02	; 2
// We only want to return the count of bytes in the file NOT the padding at the end
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1ab6e:	9e 01       	movw	r18, r28
   1ab70:	28 5f       	subi	r18, 0xF8	; 248
   1ab72:	3f 4f       	sbci	r19, 0xFF	; 255
   1ab74:	b3 01       	movw	r22, r6
   1ab76:	a2 01       	movw	r20, r4
   1ab78:	ce 01       	movw	r24, r28
   1ab7a:	88 5f       	subi	r24, 0xF8	; 248
   1ab7c:	9d 4f       	sbci	r25, 0xFD	; 253
   1ab7e:	9a de       	rcall	.-716    	; 0x1a8b4 <lif_ascii_string_to_e010>
   1ab80:	4c 01       	movw	r8, r24

    if(LIF)
   1ab82:	a1 14       	cp	r10, r1
   1ab84:	b1 04       	cpc	r11, r1
   1ab86:	d1 f4       	brne	.+52     	; 0x1abbc <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1ab88:	c4 01       	movw	r24, r8
   1ab8a:	09 2c       	mov	r0, r9
   1ab8c:	00 0c       	add	r0, r0
   1ab8e:	aa 0b       	sbc	r26, r26
   1ab90:	bb 0b       	sbc	r27, r27
   1ab92:	c8 0e       	add	r12, r24
   1ab94:	d9 1e       	adc	r13, r25
   1ab96:	ea 1e       	adc	r14, r26
   1ab98:	fb 1e       	adc	r15, r27

// PAD
    size = lif_e010_pad_sector(offset, obuf);
   1ab9a:	12 01       	movw	r2, r4
   1ab9c:	23 01       	movw	r4, r6
   1ab9e:	28 0e       	add	r2, r24
   1aba0:	39 1e       	adc	r3, r25
   1aba2:	4a 1e       	adc	r4, r26
   1aba4:	5b 1e       	adc	r5, r27
   1aba6:	ae 01       	movw	r20, r28
   1aba8:	48 5f       	subi	r20, 0xF8	; 248
   1abaa:	5f 4f       	sbci	r21, 0xFF	; 255
   1abac:	c2 01       	movw	r24, r4
   1abae:	b1 01       	movw	r22, r2
   1abb0:	26 de       	rcall	.-948    	; 0x1a7fe <lif_e010_pad_sector>
   1abb2:	3c 01       	movw	r6, r24
    if(LIF)
   1abb4:	a1 14       	cp	r10, r1
   1abb6:	b1 04       	cpc	r11, r1
   1abb8:	e1 f4       	brne	.+56     	; 0x1abf2 <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1abba:	36 c0       	rjmp	.+108    	; 0x1ac28 <lif_add_ascii_file_as_e010_wrapper+0x202>
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1abbc:	ed b7       	in	r30, 0x3d	; 61
   1abbe:	fe b7       	in	r31, 0x3e	; 62
   1abc0:	c4 82       	std	Z+4, r12	; 0x04
   1abc2:	d5 82       	std	Z+5, r13	; 0x05
   1abc4:	e6 82       	std	Z+6, r14	; 0x06
   1abc6:	f7 82       	std	Z+7, r15	; 0x07
   1abc8:	84 e4       	ldi	r24, 0x44	; 68
   1abca:	98 e3       	ldi	r25, 0x38	; 56
   1abcc:	a0 e0       	ldi	r26, 0x00	; 0
   1abce:	81 83       	std	Z+1, r24	; 0x01
   1abd0:	92 83       	std	Z+2, r25	; 0x02
   1abd2:	a3 83       	std	Z+3, r26	; 0x03
   1abd4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1abd8:	84 01       	movw	r16, r8
   1abda:	a3 01       	movw	r20, r6
   1abdc:	92 01       	movw	r18, r4
   1abde:	be 01       	movw	r22, r28
   1abe0:	68 5f       	subi	r22, 0xF8	; 248
   1abe2:	7f 4f       	sbci	r23, 0xFF	; 255
   1abe4:	c5 01       	movw	r24, r10
   1abe6:	0e 94 8f c1 	call	0x1831e	; 0x1831e <lif_write>
        if(len < size)
   1abea:	88 15       	cp	r24, r8
   1abec:	99 05       	cpc	r25, r9
   1abee:	64 f6       	brge	.-104    	; 0x1ab88 <lif_add_ascii_file_as_e010_wrapper+0x162>
   1abf0:	94 cf       	rjmp	.-216    	; 0x1ab1a <lif_add_ascii_file_as_e010_wrapper+0xf4>

// PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1abf2:	8c 01       	movw	r16, r24
   1abf4:	a2 01       	movw	r20, r4
   1abf6:	91 01       	movw	r18, r2
   1abf8:	be 01       	movw	r22, r28
   1abfa:	68 5f       	subi	r22, 0xF8	; 248
   1abfc:	7f 4f       	sbci	r23, 0xFF	; 255
   1abfe:	c5 01       	movw	r24, r10
   1ac00:	0e 94 8f c1 	call	0x1831e	; 0x1831e <lif_write>
        if(len < size)
   1ac04:	86 15       	cp	r24, r6
   1ac06:	97 05       	cpc	r25, r7
   1ac08:	0c f4       	brge	.+2      	; 0x1ac0c <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1ac0a:	87 cf       	rjmp	.-242    	; 0x1ab1a <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1ac0c:	ed b7       	in	r30, 0x3d	; 61
   1ac0e:	fe b7       	in	r31, 0x3e	; 62
   1ac10:	c4 82       	std	Z+4, r12	; 0x04
   1ac12:	d5 82       	std	Z+5, r13	; 0x05
   1ac14:	e6 82       	std	Z+6, r14	; 0x06
   1ac16:	f7 82       	std	Z+7, r15	; 0x07
   1ac18:	86 e3       	ldi	r24, 0x36	; 54
   1ac1a:	98 e3       	ldi	r25, 0x38	; 56
   1ac1c:	a0 e0       	ldi	r26, 0x00	; 0
   1ac1e:	81 83       	std	Z+1, r24	; 0x01
   1ac20:	92 83       	std	Z+2, r25	; 0x02
   1ac22:	a3 83       	std	Z+3, r26	; 0x03
   1ac24:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

    return(bytes);
   1ac28:	b6 01       	movw	r22, r12
   1ac2a:	c7 01       	movw	r24, r14
}
   1ac2c:	c3 5f       	subi	r28, 0xF3	; 243
   1ac2e:	dc 4f       	sbci	r29, 0xFC	; 252
   1ac30:	e2 e1       	ldi	r30, 0x12	; 18
   1ac32:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

0001ac36 <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1ac36:	ab e3       	ldi	r26, 0x3B	; 59
   1ac38:	b0 e0       	ldi	r27, 0x00	; 0
   1ac3a:	e1 e2       	ldi	r30, 0x21	; 33
   1ac3c:	f6 ed       	ldi	r31, 0xD6	; 214
   1ac3e:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
   1ac42:	6c 01       	movw	r12, r24
   1ac44:	1b 01       	movw	r2, r22
   1ac46:	7a 01       	movw	r14, r20
    long offset;
    int index;
    lif_t *LIF;
    stat_t st, *sp;

    if(!*lifimagename)
   1ac48:	fc 01       	movw	r30, r24
   1ac4a:	80 81       	ld	r24, Z
   1ac4c:	81 11       	cpse	r24, r1
   1ac4e:	03 c0       	rjmp	.+6      	; 0x1ac56 <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1ac50:	83 e0       	ldi	r24, 0x03	; 3
   1ac52:	98 e3       	ldi	r25, 0x38	; 56
   1ac54:	1a c0       	rjmp	.+52     	; 0x1ac8a <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1ac56:	fb 01       	movw	r30, r22
   1ac58:	80 81       	ld	r24, Z
   1ac5a:	81 11       	cpse	r24, r1
   1ac5c:	03 c0       	rjmp	.+6      	; 0x1ac64 <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1ac5e:	85 ed       	ldi	r24, 0xD5	; 213
   1ac60:	97 e3       	ldi	r25, 0x37	; 55
   1ac62:	13 c0       	rjmp	.+38     	; 0x1ac8a <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1ac64:	fa 01       	movw	r30, r20
   1ac66:	80 81       	ld	r24, Z
   1ac68:	81 11       	cpse	r24, r1
   1ac6a:	03 c0       	rjmp	.+6      	; 0x1ac72 <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1ac6c:	86 ea       	ldi	r24, 0xA6	; 166
   1ac6e:	97 e3       	ldi	r25, 0x37	; 55
   1ac70:	0c c0       	rjmp	.+24     	; 0x1ac8a <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

//Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1ac72:	be 01       	movw	r22, r28
   1ac74:	66 5f       	subi	r22, 0xF6	; 246
   1ac76:	7f 4f       	sbci	r23, 0xFF	; 255
   1ac78:	ca 01       	movw	r24, r20
   1ac7a:	0e 94 e2 c0 	call	0x181c4	; 0x181c4 <lif_stat>
   1ac7e:	9b af       	std	Y+59, r25	; 0x3b
   1ac80:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1ac82:	89 2b       	or	r24, r25
   1ac84:	59 f4       	brne	.+22     	; 0x1ac9c <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1ac86:	86 e7       	ldi	r24, 0x76	; 118
   1ac88:	97 e3       	ldi	r25, 0x37	; 55
   1ac8a:	a0 e0       	ldi	r26, 0x00	; 0
   1ac8c:	ed b7       	in	r30, 0x3d	; 61
   1ac8e:	fe b7       	in	r31, 0x3e	; 62
   1ac90:	81 83       	std	Z+1, r24	; 0x01
   1ac92:	92 83       	std	Z+2, r25	; 0x02
   1ac94:	a3 83       	std	Z+3, r26	; 0x03
   1ac96:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1ac9a:	01 c1       	rjmp	.+514    	; 0x1ae9e <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1ac9c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1aca0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1aca4:	92 ff       	sbrs	r25, 2
   1aca6:	10 c0       	rjmp	.+32     	; 0x1acc8 <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1aca8:	ed b7       	in	r30, 0x3d	; 61
   1acaa:	fe b7       	in	r31, 0x3e	; 62
   1acac:	f1 86       	std	Z+9, r15	; 0x09
   1acae:	e0 86       	std	Z+8, r14	; 0x08
   1acb0:	37 82       	std	Z+7, r3	; 0x07
   1acb2:	26 82       	std	Z+6, r2	; 0x06
   1acb4:	d5 82       	std	Z+5, r13	; 0x05
   1acb6:	c4 82       	std	Z+4, r12	; 0x04
   1acb8:	87 e4       	ldi	r24, 0x47	; 71
   1acba:	97 e3       	ldi	r25, 0x37	; 55
   1acbc:	a0 e0       	ldi	r26, 0x00	; 0
   1acbe:	81 83       	std	Z+1, r24	; 0x01
   1acc0:	92 83       	std	Z+2, r25	; 0x02
   1acc2:	a3 83       	std	Z+3, r26	; 0x03
   1acc4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            lifimagename, lifname, userfile);

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1acc8:	97 01       	movw	r18, r14
   1acca:	40 e0       	ldi	r20, 0x00	; 0
   1accc:	50 e0       	ldi	r21, 0x00	; 0
   1acce:	ba 01       	movw	r22, r20
   1acd0:	80 e0       	ldi	r24, 0x00	; 0
   1acd2:	90 e0       	ldi	r25, 0x00	; 0
   1acd4:	a8 de       	rcall	.-688    	; 0x1aa26 <lif_add_ascii_file_as_e010_wrapper>
   1acd6:	4b 01       	movw	r8, r22
   1acd8:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1acda:	47 2e       	mov	r4, r23
   1acdc:	58 2e       	mov	r5, r24
   1acde:	69 2e       	mov	r6, r25
   1ace0:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1ace2:	66 23       	and	r22, r22
   1ace4:	29 f0       	breq	.+10     	; 0x1acf0 <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1ace6:	ff ef       	ldi	r31, 0xFF	; 255
   1ace8:	4f 1a       	sub	r4, r31
   1acea:	5f 0a       	sbc	r5, r31
   1acec:	6f 0a       	sbc	r6, r31
   1acee:	7f 0a       	sbc	r7, r31

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1acf0:	6f ee       	ldi	r22, 0xEF	; 239
   1acf2:	78 e0       	ldi	r23, 0x08	; 8
   1acf4:	c6 01       	movw	r24, r12
   1acf6:	49 da       	rcall	.-2926   	; 0x1a18a <lif_open_volume>
   1acf8:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1acfa:	00 97       	sbiw	r24, 0x00	; 0
   1acfc:	09 f4       	brne	.+2      	; 0x1ad00 <lif_add_ascii_file_as_e010+0xca>
   1acfe:	cf c0       	rjmp	.+414    	; 0x1ae9e <lif_add_ascii_file_as_e010+0x268>
        return(-1);

// Now find free record
    index = lif_newdir(LIF, sectors);
   1ad00:	b3 01       	movw	r22, r6
   1ad02:	a2 01       	movw	r20, r4
   1ad04:	e2 d8       	rcall	.-3644   	; 0x19eca <lif_newdir>
   1ad06:	3c 01       	movw	r6, r24
    if(index == -1)
   1ad08:	8f ef       	ldi	r24, 0xFF	; 255
   1ad0a:	68 16       	cp	r6, r24
   1ad0c:	78 06       	cpc	r7, r24
   1ad0e:	79 f4       	brne	.+30     	; 0x1ad2e <lif_add_ascii_file_as_e010+0xf8>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1ad10:	ed b7       	in	r30, 0x3d	; 61
   1ad12:	fe b7       	in	r31, 0x3e	; 62
   1ad14:	f7 82       	std	Z+7, r15	; 0x07
   1ad16:	e6 82       	std	Z+6, r14	; 0x06
   1ad18:	d5 82       	std	Z+5, r13	; 0x05
   1ad1a:	c4 82       	std	Z+4, r12	; 0x04
   1ad1c:	87 e1       	ldi	r24, 0x17	; 23
   1ad1e:	97 e3       	ldi	r25, 0x37	; 55
   1ad20:	a0 e0       	ldi	r26, 0x00	; 0
   1ad22:	81 83       	std	Z+1, r24	; 0x01
   1ad24:	92 83       	std	Z+2, r25	; 0x02
   1ad26:	a3 83       	std	Z+3, r26	; 0x03
   1ad28:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1ad2c:	a0 c0       	rjmp	.+320    	; 0x1ae6e <lif_add_ascii_file_as_e010+0x238>
        lif_closedir(LIF);
        return(-1);
    }

// Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1ad2e:	68 01       	movw	r12, r16
   1ad30:	ff e4       	ldi	r31, 0x4F	; 79
   1ad32:	cf 0e       	add	r12, r31
   1ad34:	d1 1c       	adc	r13, r1
   1ad36:	4a e0       	ldi	r20, 0x0A	; 10
   1ad38:	50 e0       	ldi	r21, 0x00	; 0
   1ad3a:	b1 01       	movw	r22, r2
   1ad3c:	c6 01       	movw	r24, r12
   1ad3e:	0e 94 91 c2 	call	0x18522	; 0x18522 <lif_fixname>
    LIF->DIR.FileType = 0xe010;                   // 10
   1ad42:	80 e1       	ldi	r24, 0x10	; 16
   1ad44:	90 ee       	ldi	r25, 0xE0	; 224
   1ad46:	f8 01       	movw	r30, r16
   1ad48:	e6 5a       	subi	r30, 0xA6	; 166
   1ad4a:	ff 4f       	sbci	r31, 0xFF	; 255
   1ad4c:	91 83       	std	Z+1, r25	; 0x01
   1ad4e:	80 83       	st	Z, r24
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1ad50:	ea ad       	ldd	r30, Y+58	; 0x3a
   1ad52:	fb ad       	ldd	r31, Y+59	; 0x3b
   1ad54:	60 a5       	ldd	r22, Z+40	; 0x28
   1ad56:	71 a5       	ldd	r23, Z+41	; 0x29
   1ad58:	82 a5       	ldd	r24, Z+42	; 0x2a
   1ad5a:	93 a5       	ldd	r25, Z+43	; 0x2b
   1ad5c:	a8 01       	movw	r20, r16
   1ad5e:	4c 59       	subi	r20, 0x9C	; 156
   1ad60:	5f 4f       	sbci	r21, 0xFF	; 255
   1ad62:	0e 94 b6 c4 	call	0x1896c	; 0x1896c <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;                  // 26
   1ad66:	81 e0       	ldi	r24, 0x01	; 1
   1ad68:	90 e8       	ldi	r25, 0x80	; 128
   1ad6a:	f8 01       	movw	r30, r16
   1ad6c:	e6 59       	subi	r30, 0x96	; 150
   1ad6e:	ff 4f       	sbci	r31, 0xFF	; 255
   1ad70:	91 83       	std	Z+1, r25	; 0x01
   1ad72:	80 83       	st	Z, r24
    LIF->DIR.FileBytes = bytes;                   // 28
   1ad74:	32 96       	adiw	r30, 0x02	; 2
   1ad76:	91 82       	std	Z+1, r9	; 0x01
   1ad78:	80 82       	st	Z, r8
    LIF->DIR.SectorSize  = 0x100;                 // 30
   1ad7a:	80 e0       	ldi	r24, 0x00	; 0
   1ad7c:	91 e0       	ldi	r25, 0x01	; 1
   1ad7e:	32 96       	adiw	r30, 0x02	; 2
   1ad80:	91 83       	std	Z+1, r25	; 0x01
   1ad82:	80 83       	st	Z, r24
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1ad84:	58 01       	movw	r10, r16
   1ad86:	fc e5       	ldi	r31, 0x5C	; 92
   1ad88:	af 0e       	add	r10, r31
   1ad8a:	b1 1c       	adc	r11, r1
   1ad8c:	f5 01       	movw	r30, r10
   1ad8e:	80 81       	ld	r24, Z
   1ad90:	91 81       	ldd	r25, Z+1	; 0x01
   1ad92:	a2 81       	ldd	r26, Z+2	; 0x02
   1ad94:	b3 81       	ldd	r27, Z+3	; 0x03
   1ad96:	22 24       	eor	r2, r2
   1ad98:	38 2e       	mov	r3, r24
   1ad9a:	49 2e       	mov	r4, r25
   1ad9c:	5a 2e       	mov	r5, r26

    if(debuglevel & LIF_DEBUG)
   1ad9e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1ada2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1ada6:	92 ff       	sbrs	r25, 2
   1ada8:	05 c0       	rjmp	.+10     	; 0x1adb4 <lif_add_ascii_file_as_e010+0x17e>
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1adaa:	65 e4       	ldi	r22, 0x45	; 69
   1adac:	76 e1       	ldi	r23, 0x16	; 22
   1adae:	c8 01       	movw	r24, r16
   1adb0:	0e 94 a2 c5 	call	0x18b44	; 0x18b44 <lif_dump_vol>

// Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1adb4:	97 01       	movw	r18, r14
   1adb6:	b2 01       	movw	r22, r4
   1adb8:	a1 01       	movw	r20, r2
   1adba:	c8 01       	movw	r24, r16
   1adbc:	34 de       	rcall	.-920    	; 0x1aa26 <lif_add_ascii_file_as_e010_wrapper>
   1adbe:	4b 01       	movw	r8, r22
   1adc0:	7c 01       	movw	r14, r24

    if(debuglevel & LIF_DEBUG)
   1adc2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1adc6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1adca:	92 ff       	sbrs	r25, 2
   1adcc:	4a c0       	rjmp	.+148    	; 0x1ae62 <lif_add_ascii_file_as_e010+0x22c>
    {
        printf("New Directory Information AFTER write\n");
   1adce:	80 ef       	ldi	r24, 0xF0	; 240
   1add0:	96 e3       	ldi	r25, 0x36	; 54
   1add2:	a0 e0       	ldi	r26, 0x00	; 0
   1add4:	ed b7       	in	r30, 0x3d	; 61
   1add6:	fe b7       	in	r31, 0x3e	; 62
   1add8:	81 83       	std	Z+1, r24	; 0x01
   1adda:	92 83       	std	Z+2, r25	; 0x02
   1addc:	a3 83       	std	Z+3, r26	; 0x03
   1adde:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1ade2:	ed b7       	in	r30, 0x3d	; 61
   1ade4:	fe b7       	in	r31, 0x3e	; 62
   1ade6:	d5 82       	std	Z+5, r13	; 0x05
   1ade8:	c4 82       	std	Z+4, r12	; 0x04
   1adea:	89 ed       	ldi	r24, 0xD9	; 217
   1adec:	96 e3       	ldi	r25, 0x36	; 54
   1adee:	a0 e0       	ldi	r26, 0x00	; 0
   1adf0:	81 83       	std	Z+1, r24	; 0x01
   1adf2:	92 83       	std	Z+2, r25	; 0x02
   1adf4:	a3 83       	std	Z+3, r26	; 0x03
   1adf6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        printf("Index:            %4d\n", (int)index);
   1adfa:	ed b7       	in	r30, 0x3d	; 61
   1adfc:	fe b7       	in	r31, 0x3e	; 62
   1adfe:	75 82       	std	Z+5, r7	; 0x05
   1ae00:	64 82       	std	Z+4, r6	; 0x04
   1ae02:	82 ec       	ldi	r24, 0xC2	; 194
   1ae04:	96 e3       	ldi	r25, 0x36	; 54
   1ae06:	a0 e0       	ldi	r26, 0x00	; 0
   1ae08:	81 83       	std	Z+1, r24	; 0x01
   1ae0a:	92 83       	std	Z+2, r25	; 0x02
   1ae0c:	a3 83       	std	Z+3, r26	; 0x03
   1ae0e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1ae12:	f5 01       	movw	r30, r10
   1ae14:	80 81       	ld	r24, Z
   1ae16:	91 81       	ldd	r25, Z+1	; 0x01
   1ae18:	a2 81       	ldd	r26, Z+2	; 0x02
   1ae1a:	b3 81       	ldd	r27, Z+3	; 0x03
   1ae1c:	ed b7       	in	r30, 0x3d	; 61
   1ae1e:	fe b7       	in	r31, 0x3e	; 62
   1ae20:	84 83       	std	Z+4, r24	; 0x04
   1ae22:	95 83       	std	Z+5, r25	; 0x05
   1ae24:	a6 83       	std	Z+6, r26	; 0x06
   1ae26:	b7 83       	std	Z+7, r27	; 0x07
   1ae28:	89 ea       	ldi	r24, 0xA9	; 169
   1ae2a:	96 e3       	ldi	r25, 0x36	; 54
   1ae2c:	a0 e0       	ldi	r26, 0x00	; 0
   1ae2e:	81 83       	std	Z+1, r24	; 0x01
   1ae30:	92 83       	std	Z+2, r25	; 0x02
   1ae32:	a3 83       	std	Z+3, r26	; 0x03
   1ae34:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1ae38:	f8 01       	movw	r30, r16
   1ae3a:	e0 5a       	subi	r30, 0xA0	; 160
   1ae3c:	ff 4f       	sbci	r31, 0xFF	; 255
   1ae3e:	80 81       	ld	r24, Z
   1ae40:	91 81       	ldd	r25, Z+1	; 0x01
   1ae42:	a2 81       	ldd	r26, Z+2	; 0x02
   1ae44:	b3 81       	ldd	r27, Z+3	; 0x03
   1ae46:	ed b7       	in	r30, 0x3d	; 61
   1ae48:	fe b7       	in	r31, 0x3e	; 62
   1ae4a:	84 83       	std	Z+4, r24	; 0x04
   1ae4c:	95 83       	std	Z+5, r25	; 0x05
   1ae4e:	a6 83       	std	Z+6, r26	; 0x06
   1ae50:	b7 83       	std	Z+7, r27	; 0x07
   1ae52:	80 e9       	ldi	r24, 0x90	; 144
   1ae54:	96 e3       	ldi	r25, 0x36	; 54
   1ae56:	a0 e0       	ldi	r26, 0x00	; 0
   1ae58:	81 83       	std	Z+1, r24	; 0x01
   1ae5a:	92 83       	std	Z+2, r25	; 0x02
   1ae5c:	a3 83       	std	Z+3, r26	; 0x03
   1ae5e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    }

// Write directory record
// Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1ae62:	b3 01       	movw	r22, r6
   1ae64:	c8 01       	movw	r24, r16
   1ae66:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_writedirindex>
   1ae6a:	89 2b       	or	r24, r25
   1ae6c:	21 f4       	brne	.+8      	; 0x1ae76 <lif_add_ascii_file_as_e010+0x240>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ae6e:	c8 01       	movw	r24, r16
   1ae70:	0e 94 08 ca 	call	0x19410	; 0x19410 <lif_close_volume>
   1ae74:	14 c0       	rjmp	.+40     	; 0x1ae9e <lif_add_ascii_file_as_e010+0x268>
   1ae76:	c8 01       	movw	r24, r16
   1ae78:	0e 94 08 ca 	call	0x19410	; 0x19410 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1ae7c:	ed b7       	in	r30, 0x3d	; 61
   1ae7e:	fe b7       	in	r31, 0x3e	; 62
   1ae80:	84 82       	std	Z+4, r8	; 0x04
   1ae82:	95 82       	std	Z+5, r9	; 0x05
   1ae84:	e6 82       	std	Z+6, r14	; 0x06
   1ae86:	f7 82       	std	Z+7, r15	; 0x07
   1ae88:	82 e8       	ldi	r24, 0x82	; 130
   1ae8a:	96 e3       	ldi	r25, 0x36	; 54
   1ae8c:	a0 e0       	ldi	r26, 0x00	; 0
   1ae8e:	81 83       	std	Z+1, r24	; 0x01
   1ae90:	92 83       	std	Z+2, r25	; 0x02
   1ae92:	a3 83       	std	Z+3, r26	; 0x03
   1ae94:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

// Return file size
    return(bytes);
   1ae98:	b4 01       	movw	r22, r8
   1ae9a:	c7 01       	movw	r24, r14
   1ae9c:	04 c0       	rjmp	.+8      	; 0x1aea6 <lif_add_ascii_file_as_e010+0x270>
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1);
   1ae9e:	6f ef       	ldi	r22, 0xFF	; 255
   1aea0:	7f ef       	ldi	r23, 0xFF	; 255
   1aea2:	8f ef       	ldi	r24, 0xFF	; 255
   1aea4:	9f ef       	ldi	r25, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

// Return file size
    return(bytes);
}
   1aea6:	eb 96       	adiw	r28, 0x3b	; 59
   1aea8:	e2 e1       	ldi	r30, 0x12	; 18
   1aeaa:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

0001aeae <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1aeae:	a7 e3       	ldi	r26, 0x37	; 55
   1aeb0:	b2 e0       	ldi	r27, 0x02	; 2
   1aeb2:	ed e5       	ldi	r30, 0x5D	; 93
   1aeb4:	f7 ed       	ldi	r31, 0xD7	; 215
   1aeb6:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
   1aeba:	7c 01       	movw	r14, r24
   1aebc:	8b 01       	movw	r16, r22
   1aebe:	ca 5d       	subi	r28, 0xDA	; 218
   1aec0:	dd 4f       	sbci	r29, 0xFD	; 253
   1aec2:	59 83       	std	Y+1, r21	; 0x01
   1aec4:	48 83       	st	Y, r20
   1aec6:	c6 52       	subi	r28, 0x26	; 38
   1aec8:	d2 40       	sbci	r29, 0x02	; 2
// read buffer
    uint8_t buf[LIF_SECTOR_SIZE+4];
// Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1aeca:	62 e4       	ldi	r22, 0x42	; 66
   1aecc:	73 e0       	ldi	r23, 0x03	; 3
   1aece:	5d d9       	rcall	.-3398   	; 0x1a18a <lif_open_volume>
   1aed0:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1aed2:	00 97       	sbiw	r24, 0x00	; 0
   1aed4:	69 f4       	brne	.+26     	; 0x1aef0 <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1aed6:	ed b7       	in	r30, 0x3d	; 61
   1aed8:	fe b7       	in	r31, 0x3e	; 62
   1aeda:	f5 82       	std	Z+5, r15	; 0x05
   1aedc:	e4 82       	std	Z+4, r14	; 0x04
   1aede:	8a e6       	ldi	r24, 0x6A	; 106
   1aee0:	96 e3       	ldi	r25, 0x36	; 54
   1aee2:	a0 e0       	ldi	r26, 0x00	; 0
   1aee4:	81 83       	std	Z+1, r24	; 0x01
   1aee6:	92 83       	std	Z+2, r25	; 0x02
   1aee8:	a3 83       	std	Z+3, r26	; 0x03
   1aeea:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1aeee:	13 c0       	rjmp	.+38     	; 0x1af16 <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1aef0:	b8 01       	movw	r22, r16
   1aef2:	20 dc       	rcall	.-1984   	; 0x1a734 <lif_find_file>
    if(index == -1)
   1aef4:	01 96       	adiw	r24, 0x01	; 1
   1aef6:	91 f4       	brne	.+36     	; 0x1af1c <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1aef8:	ed b7       	in	r30, 0x3d	; 61
   1aefa:	fe b7       	in	r31, 0x3e	; 62
   1aefc:	15 83       	std	Z+5, r17	; 0x05
   1aefe:	04 83       	std	Z+4, r16	; 0x04
   1af00:	83 e5       	ldi	r24, 0x53	; 83
   1af02:	96 e3       	ldi	r25, 0x36	; 54
   1af04:	a0 e0       	ldi	r26, 0x00	; 0
   1af06:	81 83       	std	Z+1, r24	; 0x01
   1af08:	92 83       	std	Z+2, r25	; 0x02
   1af0a:	a3 83       	std	Z+3, r26	; 0x03
   1af0c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1af10:	c6 01       	movw	r24, r12
   1af12:	0e 94 08 ca 	call	0x19410	; 0x19410 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1af16:	80 e0       	ldi	r24, 0x00	; 0
   1af18:	90 e0       	ldi	r25, 0x00	; 0
   1af1a:	73 c2       	rjmp	.+1254   	; 0x1b402 <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1af1c:	f6 01       	movw	r30, r12
   1af1e:	e6 5a       	subi	r30, 0xA6	; 166
   1af20:	ff 4f       	sbci	r31, 0xFF	; 255
   1af22:	80 81       	ld	r24, Z
   1af24:	91 81       	ldd	r25, Z+1	; 0x01
   1af26:	9c 01       	movw	r18, r24
   1af28:	2c 7f       	andi	r18, 0xFC	; 252
   1af2a:	20 31       	cpi	r18, 0x10	; 16
   1af2c:	30 4e       	sbci	r19, 0xE0	; 224
   1af2e:	a9 f0       	breq	.+42     	; 0x1af5a <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1af30:	ed b7       	in	r30, 0x3d	; 61
   1af32:	fe b7       	in	r31, 0x3e	; 62
   1af34:	97 83       	std	Z+7, r25	; 0x07
   1af36:	86 83       	std	Z+6, r24	; 0x06
   1af38:	ca 5d       	subi	r28, 0xDA	; 218
   1af3a:	dd 4f       	sbci	r29, 0xFD	; 253
   1af3c:	28 81       	ld	r18, Y
   1af3e:	39 81       	ldd	r19, Y+1	; 0x01
   1af40:	c6 52       	subi	r28, 0x26	; 38
   1af42:	d2 40       	sbci	r29, 0x02	; 2
   1af44:	35 83       	std	Z+5, r19	; 0x05
   1af46:	24 83       	std	Z+4, r18	; 0x04
   1af48:	8b e1       	ldi	r24, 0x1B	; 27
   1af4a:	96 e3       	ldi	r25, 0x36	; 54
   1af4c:	a0 e0       	ldi	r26, 0x00	; 0
   1af4e:	81 83       	std	Z+1, r24	; 0x01
   1af50:	92 83       	std	Z+2, r25	; 0x02
   1af52:	a3 83       	std	Z+3, r26	; 0x03
   1af54:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1af58:	db cf       	rjmp	.-74     	; 0x1af10 <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1af5a:	f6 01       	movw	r30, r12
   1af5c:	e4 5a       	subi	r30, 0xA4	; 164
   1af5e:	ff 4f       	sbci	r31, 0xFF	; 255
   1af60:	80 80       	ld	r8, Z
   1af62:	91 80       	ldd	r9, Z+1	; 0x01
   1af64:	a2 80       	ldd	r10, Z+2	; 0x02
   1af66:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1af68:	34 96       	adiw	r30, 0x04	; 4
   1af6a:	80 81       	ld	r24, Z
   1af6c:	91 81       	ldd	r25, Z+1	; 0x01
   1af6e:	a2 81       	ldd	r26, Z+2	; 0x02
   1af70:	b3 81       	ldd	r27, Z+3	; 0x03
   1af72:	a5 01       	movw	r20, r10
   1af74:	94 01       	movw	r18, r8
   1af76:	28 0f       	add	r18, r24
   1af78:	39 1f       	adc	r19, r25
   1af7a:	4a 1f       	adc	r20, r26
   1af7c:	5b 1f       	adc	r21, r27
   1af7e:	c4 5d       	subi	r28, 0xD4	; 212
   1af80:	dd 4f       	sbci	r29, 0xFD	; 253
   1af82:	28 83       	st	Y, r18
   1af84:	39 83       	std	Y+1, r19	; 0x01
   1af86:	4a 83       	std	Y+2, r20	; 0x02
   1af88:	5b 83       	std	Y+3, r21	; 0x03
   1af8a:	cc 52       	subi	r28, 0x2C	; 44
   1af8c:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1af8e:	c6 01       	movw	r24, r12
   1af90:	8c 59       	subi	r24, 0x9C	; 156
   1af92:	9f 4f       	sbci	r25, 0xFF	; 255
   1af94:	0e 94 f8 c4 	call	0x189f0	; 0x189f0 <lif_lifbcd2time>
   1af98:	c8 5d       	subi	r28, 0xD8	; 216
   1af9a:	dd 4f       	sbci	r29, 0xFD	; 253
   1af9c:	68 83       	st	Y, r22
   1af9e:	79 83       	std	Y+1, r23	; 0x01
   1afa0:	8a 83       	std	Y+2, r24	; 0x02
   1afa2:	9b 83       	std	Y+3, r25	; 0x03
   1afa4:	c8 52       	subi	r28, 0x28	; 40
   1afa6:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1afa8:	ba 2d       	mov	r27, r10
   1afaa:	a9 2d       	mov	r26, r9
   1afac:	98 2d       	mov	r25, r8
   1afae:	88 27       	eor	r24, r24
   1afb0:	c2 5e       	subi	r28, 0xE2	; 226
   1afb2:	dd 4f       	sbci	r29, 0xFD	; 253
   1afb4:	88 83       	st	Y, r24
   1afb6:	99 83       	std	Y+1, r25	; 0x01
   1afb8:	aa 83       	std	Y+2, r26	; 0x02
   1afba:	bb 83       	std	Y+3, r27	; 0x03
   1afbc:	ce 51       	subi	r28, 0x1E	; 30
   1afbe:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1afc0:	6a ef       	ldi	r22, 0xFA	; 250
   1afc2:	78 e0       	ldi	r23, 0x08	; 8
   1afc4:	ca 5d       	subi	r28, 0xDA	; 218
   1afc6:	dd 4f       	sbci	r29, 0xFD	; 253
   1afc8:	88 81       	ld	r24, Y
   1afca:	99 81       	ldd	r25, Y+1	; 0x01
   1afcc:	c6 52       	subi	r28, 0x26	; 38
   1afce:	d2 40       	sbci	r29, 0x02	; 2
   1afd0:	0e 94 b8 c0 	call	0x18170	; 0x18170 <lif_open>
   1afd4:	cc 5d       	subi	r28, 0xDC	; 220
   1afd6:	dd 4f       	sbci	r29, 0xFD	; 253
   1afd8:	99 83       	std	Y+1, r25	; 0x01
   1afda:	88 83       	st	Y, r24
   1afdc:	c4 52       	subi	r28, 0x24	; 36
   1afde:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1afe0:	89 2b       	or	r24, r25
   1afe2:	09 f4       	brne	.+2      	; 0x1afe6 <lif_extract_e010_as_ascii+0x138>
   1afe4:	95 cf       	rjmp	.-214    	; 0x1af10 <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1afe6:	ca 5d       	subi	r28, 0xDA	; 218
   1afe8:	dd 4f       	sbci	r29, 0xFD	; 253
   1afea:	28 81       	ld	r18, Y
   1afec:	39 81       	ldd	r19, Y+1	; 0x01
   1afee:	c6 52       	subi	r28, 0x26	; 38
   1aff0:	d2 40       	sbci	r29, 0x02	; 2
   1aff2:	ed b7       	in	r30, 0x3d	; 61
   1aff4:	fe b7       	in	r31, 0x3e	; 62
   1aff6:	35 83       	std	Z+5, r19	; 0x05
   1aff8:	24 83       	std	Z+4, r18	; 0x04
   1affa:	8b e0       	ldi	r24, 0x0B	; 11
   1affc:	96 e3       	ldi	r25, 0x36	; 54
   1affe:	a0 e0       	ldi	r26, 0x00	; 0
   1b000:	81 83       	std	Z+1, r24	; 0x01
   1b002:	92 83       	std	Z+2, r25	; 0x02
   1b004:	a3 83       	std	Z+3, r26	; 0x03
   1b006:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

    bytes = 0;
    wind = 0;
   1b00a:	21 2c       	mov	r2, r1
   1b00c:	31 2c       	mov	r3, r1
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1b00e:	ce 5d       	subi	r28, 0xDE	; 222
   1b010:	dd 4f       	sbci	r29, 0xFD	; 253
   1b012:	19 82       	std	Y+1, r1	; 0x01
   1b014:	18 82       	st	Y, r1
   1b016:	c2 52       	subi	r28, 0x22	; 34
   1b018:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
   1b01a:	ee 24       	eor	r14, r14
   1b01c:	e3 94       	inc	r14
   1b01e:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1b020:	41 2c       	mov	r4, r1
   1b022:	51 2c       	mov	r5, r1
   1b024:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1b026:	8a e4       	ldi	r24, 0x4A	; 74
   1b028:	95 e3       	ldi	r25, 0x35	; 53
   1b02a:	9c 01       	movw	r18, r24
   1b02c:	40 e0       	ldi	r20, 0x00	; 0
   1b02e:	ce 5c       	subi	r28, 0xCE	; 206
   1b030:	dd 4f       	sbci	r29, 0xFD	; 253
   1b032:	28 83       	st	Y, r18
   1b034:	39 83       	std	Y+1, r19	; 0x01
   1b036:	4a 83       	std	Y+2, r20	; 0x02
   1b038:	c2 53       	subi	r28, 0x32	; 50
   1b03a:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b03c:	88 e5       	ldi	r24, 0x58	; 88
   1b03e:	95 e3       	ldi	r25, 0x35	; 53
   1b040:	9c 01       	movw	r18, r24
   1b042:	40 e0       	ldi	r20, 0x00	; 0
   1b044:	cb 5c       	subi	r28, 0xCB	; 203
   1b046:	dd 4f       	sbci	r29, 0xFD	; 253
   1b048:	28 83       	st	Y, r18
   1b04a:	39 83       	std	Y+1, r19	; 0x01
   1b04c:	4a 83       	std	Y+2, r20	; 0x02
   1b04e:	c5 53       	subi	r28, 0x35	; 53
   1b050:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1b052:	c2 5e       	subi	r28, 0xE2	; 226
   1b054:	dd 4f       	sbci	r29, 0xFD	; 253
   1b056:	28 81       	ld	r18, Y
   1b058:	39 81       	ldd	r19, Y+1	; 0x01
   1b05a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b05c:	5b 81       	ldd	r21, Y+3	; 0x03
   1b05e:	ce 51       	subi	r28, 0x1E	; 30
   1b060:	d2 40       	sbci	r29, 0x02	; 2
   1b062:	bb 27       	eor	r27, r27
   1b064:	a5 2f       	mov	r26, r21
   1b066:	94 2f       	mov	r25, r20
   1b068:	83 2f       	mov	r24, r19
   1b06a:	c4 5d       	subi	r28, 0xD4	; 212
   1b06c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b06e:	28 81       	ld	r18, Y
   1b070:	39 81       	ldd	r19, Y+1	; 0x01
   1b072:	4a 81       	ldd	r20, Y+2	; 0x02
   1b074:	5b 81       	ldd	r21, Y+3	; 0x03
   1b076:	cc 52       	subi	r28, 0x2C	; 44
   1b078:	d2 40       	sbci	r29, 0x02	; 2
   1b07a:	28 17       	cp	r18, r24
   1b07c:	39 07       	cpc	r19, r25
   1b07e:	4a 07       	cpc	r20, r26
   1b080:	5b 07       	cpc	r21, r27
   1b082:	08 f4       	brcc	.+2      	; 0x1b086 <lif_extract_e010_as_ascii+0x1d8>
   1b084:	51 c1       	rjmp	.+674    	; 0x1b328 <lif_extract_e010_as_ascii+0x47a>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b086:	00 e0       	ldi	r16, 0x00	; 0
   1b088:	11 e0       	ldi	r17, 0x01	; 1
   1b08a:	c2 5e       	subi	r28, 0xE2	; 226
   1b08c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b08e:	28 81       	ld	r18, Y
   1b090:	39 81       	ldd	r19, Y+1	; 0x01
   1b092:	4a 81       	ldd	r20, Y+2	; 0x02
   1b094:	5b 81       	ldd	r21, Y+3	; 0x03
   1b096:	ce 51       	subi	r28, 0x1E	; 30
   1b098:	d2 40       	sbci	r29, 0x02	; 2
   1b09a:	be 01       	movw	r22, r28
   1b09c:	60 5f       	subi	r22, 0xF0	; 240
   1b09e:	7e 4f       	sbci	r23, 0xFE	; 254
   1b0a0:	c6 01       	movw	r24, r12
   1b0a2:	0e 94 3c c1 	call	0x18278	; 0x18278 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b0a6:	6f 3f       	cpi	r22, 0xFF	; 255
   1b0a8:	71 05       	cpc	r23, r1
   1b0aa:	09 f0       	breq	.+2      	; 0x1b0ae <lif_extract_e010_as_ascii+0x200>
   1b0ac:	0c f4       	brge	.+2      	; 0x1b0b0 <lif_extract_e010_as_ascii+0x202>
   1b0ae:	3a c1       	rjmp	.+628    	; 0x1b324 <lif_extract_e010_as_ascii+0x476>
   1b0b0:	00 e0       	ldi	r16, 0x00	; 0
   1b0b2:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b0b4:	ce 5d       	subi	r28, 0xDE	; 222
   1b0b6:	dd 4f       	sbci	r29, 0xFD	; 253
   1b0b8:	88 81       	ld	r24, Y
   1b0ba:	99 81       	ldd	r25, Y+1	; 0x01
   1b0bc:	c2 52       	subi	r28, 0x22	; 34
   1b0be:	d2 40       	sbci	r29, 0x02	; 2
   1b0c0:	89 2b       	or	r24, r25
   1b0c2:	09 f0       	breq	.+2      	; 0x1b0c6 <lif_extract_e010_as_ascii+0x218>
   1b0c4:	1b c1       	rjmp	.+566    	; 0x1b2fc <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1b0c6:	e0 e1       	ldi	r30, 0x10	; 16
   1b0c8:	f1 e0       	ldi	r31, 0x01	; 1
   1b0ca:	ec 0f       	add	r30, r28
   1b0cc:	fd 1f       	adc	r31, r29
   1b0ce:	e0 0f       	add	r30, r16
   1b0d0:	f1 1f       	adc	r31, r17
   1b0d2:	80 81       	ld	r24, Z
   1b0d4:	98 2f       	mov	r25, r24
   1b0d6:	9f 7e       	andi	r25, 0xEF	; 239
   1b0d8:	9f 3c       	cpi	r25, 0xCF	; 207
   1b0da:	11 f0       	breq	.+4      	; 0x1b0e0 <lif_extract_e010_as_ascii+0x232>
   1b0dc:	8f 36       	cpi	r24, 0x6F	; 111
   1b0de:	c9 f5       	brne	.+114    	; 0x1b152 <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1b0e0:	e0 e1       	ldi	r30, 0x10	; 16
   1b0e2:	f1 e0       	ldi	r31, 0x01	; 1
   1b0e4:	ec 0f       	add	r30, r28
   1b0e6:	fd 1f       	adc	r31, r29
   1b0e8:	e0 0f       	add	r30, r16
   1b0ea:	f1 1f       	adc	r31, r17
   1b0ec:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8);
   1b0ee:	f8 01       	movw	r30, r16
   1b0f0:	32 96       	adiw	r30, 0x02	; 2
   1b0f2:	40 e1       	ldi	r20, 0x10	; 16
   1b0f4:	51 e0       	ldi	r21, 0x01	; 1
   1b0f6:	4c 0f       	add	r20, r28
   1b0f8:	5d 1f       	adc	r21, r29
   1b0fa:	e4 0f       	add	r30, r20
   1b0fc:	f5 1f       	adc	r31, r21
   1b0fe:	0d 5f       	subi	r16, 0xFD	; 253
   1b100:	1f 4f       	sbci	r17, 0xFF	; 255
   1b102:	80 81       	ld	r24, Z
   1b104:	b1 2c       	mov	r11, r1
   1b106:	b8 2a       	or	r11, r24
// EOF ?
                if(len == 0)
   1b108:	a1 14       	cp	r10, r1
   1b10a:	b1 04       	cpc	r11, r1
   1b10c:	09 f4       	brne	.+2      	; 0x1b110 <lif_extract_e010_as_ascii+0x262>
   1b10e:	ee c0       	rjmp	.+476    	; 0x1b2ec <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1b110:	5f ef       	ldi	r21, 0xFF	; 255
   1b112:	a5 16       	cp	r10, r21
   1b114:	b1 04       	cpc	r11, r1
   1b116:	09 f0       	breq	.+2      	; 0x1b11a <lif_extract_e010_as_ascii+0x26c>
   1b118:	7c f4       	brge	.+30     	; 0x1b138 <lif_extract_e010_as_ascii+0x28a>
   1b11a:	c4 5e       	subi	r28, 0xE4	; 228
   1b11c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b11e:	19 82       	std	Y+1, r1	; 0x01
   1b120:	18 82       	st	Y, r1
   1b122:	cc 51       	subi	r28, 0x1C	; 28
   1b124:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1b126:	c5 01       	movw	r24, r10
   1b128:	01 97       	sbiw	r24, 0x01	; 1
   1b12a:	c0 5d       	subi	r28, 0xD0	; 208
   1b12c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b12e:	99 83       	std	Y+1, r25	; 0x01
   1b130:	88 83       	st	Y, r24
   1b132:	c0 53       	subi	r28, 0x30	; 48
   1b134:	d2 40       	sbci	r29, 0x02	; 2
   1b136:	68 c0       	rjmp	.+208    	; 0x1b208 <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1b138:	ed b7       	in	r30, 0x3d	; 61
   1b13a:	fe b7       	in	r31, 0x3e	; 62
   1b13c:	b5 82       	std	Z+5, r11	; 0x05
   1b13e:	a4 82       	std	Z+4, r10	; 0x04
   1b140:	86 ed       	ldi	r24, 0xD6	; 214
   1b142:	95 e3       	ldi	r25, 0x35	; 53
   1b144:	a0 e0       	ldi	r26, 0x00	; 0
   1b146:	81 83       	std	Z+1, r24	; 0x01
   1b148:	92 83       	std	Z+2, r25	; 0x02
   1b14a:	a3 83       	std	Z+3, r26	; 0x03
   1b14c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1b150:	1e c0       	rjmp	.+60     	; 0x1b18e <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1b152:	8f 3e       	cpi	r24, 0xEF	; 239
   1b154:	09 f4       	brne	.+2      	; 0x1b158 <lif_extract_e010_as_ascii+0x2aa>
   1b156:	d2 c0       	rjmp	.+420    	; 0x1b2fc <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1b158:	ed b7       	in	r30, 0x3d	; 61
   1b15a:	fe b7       	in	r31, 0x3e	; 62
   1b15c:	13 87       	std	Z+11, r17	; 0x0b
   1b15e:	02 87       	std	Z+10, r16	; 0x0a
   1b160:	c2 5e       	subi	r28, 0xE2	; 226
   1b162:	dd 4f       	sbci	r29, 0xFD	; 253
   1b164:	28 81       	ld	r18, Y
   1b166:	39 81       	ldd	r19, Y+1	; 0x01
   1b168:	4a 81       	ldd	r20, Y+2	; 0x02
   1b16a:	5b 81       	ldd	r21, Y+3	; 0x03
   1b16c:	ce 51       	subi	r28, 0x1E	; 30
   1b16e:	d2 40       	sbci	r29, 0x02	; 2
   1b170:	26 83       	std	Z+6, r18	; 0x06
   1b172:	37 83       	std	Z+7, r19	; 0x07
   1b174:	40 87       	std	Z+8, r20	; 0x08
   1b176:	51 87       	std	Z+9, r21	; 0x09
   1b178:	90 e0       	ldi	r25, 0x00	; 0
   1b17a:	95 83       	std	Z+5, r25	; 0x05
   1b17c:	84 83       	std	Z+4, r24	; 0x04
   1b17e:	80 e8       	ldi	r24, 0x80	; 128
   1b180:	95 e3       	ldi	r25, 0x35	; 53
   1b182:	a0 e0       	ldi	r26, 0x00	; 0
   1b184:	81 83       	std	Z+1, r24	; 0x01
   1b186:	92 83       	std	Z+2, r25	; 0x02
   1b188:	a3 83       	std	Z+3, r26	; 0x03
   1b18a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
                status = 0;
                done = 1;
   1b18e:	21 e0       	ldi	r18, 0x01	; 1
   1b190:	30 e0       	ldi	r19, 0x00	; 0
   1b192:	ce 5d       	subi	r28, 0xDE	; 222
   1b194:	dd 4f       	sbci	r29, 0xFD	; 253
   1b196:	39 83       	std	Y+1, r19	; 0x01
   1b198:	28 83       	st	Y, r18
   1b19a:	c2 52       	subi	r28, 0x22	; 34
   1b19c:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1b19e:	e1 2c       	mov	r14, r1
   1b1a0:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1b1a2:	ac c0       	rjmp	.+344    	; 0x1b2fc <lif_extract_e010_as_ascii+0x44e>
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b1a4:	0f 3f       	cpi	r16, 0xFF	; 255
   1b1a6:	11 05       	cpc	r17, r1
   1b1a8:	11 f0       	breq	.+4      	; 0x1b1ae <lif_extract_e010_as_ascii+0x300>
   1b1aa:	0c f0       	brlt	.+2      	; 0x1b1ae <lif_extract_e010_as_ascii+0x300>
   1b1ac:	a7 c0       	rjmp	.+334    	; 0x1b2fc <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b1ae:	e0 e1       	ldi	r30, 0x10	; 16
   1b1b0:	f1 e0       	ldi	r31, 0x01	; 1
   1b1b2:	ec 0f       	add	r30, r28
   1b1b4:	fd 1f       	adc	r31, r29
   1b1b6:	e0 0f       	add	r30, r16
   1b1b8:	f1 1f       	adc	r31, r17
   1b1ba:	20 81       	ld	r18, Z
   1b1bc:	a1 01       	movw	r20, r2
   1b1be:	4f 5f       	subi	r20, 0xFF	; 255
   1b1c0:	5f 4f       	sbci	r21, 0xFF	; 255
   1b1c2:	4a 01       	movw	r8, r20
   1b1c4:	2d 30       	cpi	r18, 0x0D	; 13
   1b1c6:	51 f1       	breq	.+84     	; 0x1b21c <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1b1c8:	98 2d       	mov	r25, r8
   1b1ca:	89 2d       	mov	r24, r9
   1b1cc:	0f 5f       	subi	r16, 0xFF	; 255
   1b1ce:	1f 4f       	sbci	r17, 0xFF	; 255
   1b1d0:	ec e0       	ldi	r30, 0x0C	; 12
   1b1d2:	f0 e0       	ldi	r31, 0x00	; 0
   1b1d4:	ec 0f       	add	r30, r28
   1b1d6:	fd 1f       	adc	r31, r29
   1b1d8:	e2 0d       	add	r30, r2
   1b1da:	f3 1d       	adc	r31, r3
   1b1dc:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1b1de:	ef ef       	ldi	r30, 0xFF	; 255
   1b1e0:	8e 16       	cp	r8, r30
   1b1e2:	91 04       	cpc	r9, r1
   1b1e4:	09 f0       	breq	.+2      	; 0x1b1e8 <lif_extract_e010_as_ascii+0x33a>
   1b1e6:	ac f5       	brge	.+106    	; 0x1b252 <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1b1e8:	c4 5e       	subi	r28, 0xE4	; 228
   1b1ea:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1ec:	28 81       	ld	r18, Y
   1b1ee:	39 81       	ldd	r19, Y+1	; 0x01
   1b1f0:	cc 51       	subi	r28, 0x1C	; 28
   1b1f2:	d2 40       	sbci	r29, 0x02	; 2
   1b1f4:	2f 5f       	subi	r18, 0xFF	; 255
   1b1f6:	3f 4f       	sbci	r19, 0xFF	; 255
   1b1f8:	c4 5e       	subi	r28, 0xE4	; 228
   1b1fa:	dd 4f       	sbci	r29, 0xFD	; 253
   1b1fc:	39 83       	std	Y+1, r19	; 0x01
   1b1fe:	28 83       	st	Y, r18
   1b200:	cc 51       	subi	r28, 0x1C	; 28
   1b202:	d2 40       	sbci	r29, 0x02	; 2
   1b204:	29 2e       	mov	r2, r25
   1b206:	38 2e       	mov	r3, r24
   1b208:	c4 5e       	subi	r28, 0xE4	; 228
   1b20a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b20c:	48 81       	ld	r20, Y
   1b20e:	59 81       	ldd	r21, Y+1	; 0x01
   1b210:	cc 51       	subi	r28, 0x1C	; 28
   1b212:	d2 40       	sbci	r29, 0x02	; 2
   1b214:	4a 15       	cp	r20, r10
   1b216:	5b 05       	cpc	r21, r11
   1b218:	2c f2       	brlt	.-118    	; 0x1b1a4 <lif_extract_e010_as_ascii+0x2f6>
   1b21a:	62 c0       	rjmp	.+196    	; 0x1b2e0 <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1b21c:	c4 5e       	subi	r28, 0xE4	; 228
   1b21e:	dd 4f       	sbci	r29, 0xFD	; 253
   1b220:	88 81       	ld	r24, Y
   1b222:	99 81       	ldd	r25, Y+1	; 0x01
   1b224:	cc 51       	subi	r28, 0x1C	; 28
   1b226:	d2 40       	sbci	r29, 0x02	; 2
   1b228:	c0 5d       	subi	r28, 0xD0	; 208
   1b22a:	dd 4f       	sbci	r29, 0xFD	; 253
   1b22c:	a8 81       	ld	r26, Y
   1b22e:	b9 81       	ldd	r27, Y+1	; 0x01
   1b230:	c0 53       	subi	r28, 0x30	; 48
   1b232:	d2 40       	sbci	r29, 0x02	; 2
   1b234:	8a 17       	cp	r24, r26
   1b236:	9b 07       	cpc	r25, r27
   1b238:	39 f6       	brne	.-114    	; 0x1b1c8 <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1b23a:	ec e0       	ldi	r30, 0x0C	; 12
   1b23c:	f0 e0       	ldi	r31, 0x00	; 0
   1b23e:	ec 0f       	add	r30, r28
   1b240:	fd 1f       	adc	r31, r29
   1b242:	e2 0d       	add	r30, r2
   1b244:	f3 1d       	adc	r31, r3
   1b246:	ba e0       	ldi	r27, 0x0A	; 10
   1b248:	b0 83       	st	Z, r27
                    ++ind;
   1b24a:	0f 5f       	subi	r16, 0xFF	; 255
   1b24c:	1f 4f       	sbci	r17, 0xFF	; 255
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1b24e:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1b250:	47 c0       	rjmp	.+142    	; 0x1b2e0 <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1b252:	cc 5d       	subi	r28, 0xDC	; 220
   1b254:	dd 4f       	sbci	r29, 0xFD	; 253
   1b256:	28 81       	ld	r18, Y
   1b258:	39 81       	ldd	r19, Y+1	; 0x01
   1b25a:	c4 52       	subi	r28, 0x24	; 36
   1b25c:	d2 40       	sbci	r29, 0x02	; 2
   1b25e:	a4 01       	movw	r20, r8
   1b260:	61 e0       	ldi	r22, 0x01	; 1
   1b262:	70 e0       	ldi	r23, 0x00	; 0
   1b264:	ce 01       	movw	r24, r28
   1b266:	0c 96       	adiw	r24, 0x0c	; 12
   1b268:	0e 94 fc 7b 	call	0xf7f8	; 0xf7f8 <fwrite>
                    if(size < wind)
   1b26c:	88 15       	cp	r24, r8
   1b26e:	99 05       	cpc	r25, r9
   1b270:	d4 f4       	brge	.+52     	; 0x1b2a6 <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1b272:	cb 5c       	subi	r28, 0xCB	; 203
   1b274:	dd 4f       	sbci	r29, 0xFD	; 253
   1b276:	28 81       	ld	r18, Y
   1b278:	39 81       	ldd	r19, Y+1	; 0x01
   1b27a:	4a 81       	ldd	r20, Y+2	; 0x02
   1b27c:	c5 53       	subi	r28, 0x35	; 53
   1b27e:	d2 40       	sbci	r29, 0x02	; 2
   1b280:	ed b7       	in	r30, 0x3d	; 61
   1b282:	fe b7       	in	r31, 0x3e	; 62
   1b284:	21 83       	std	Z+1, r18	; 0x01
   1b286:	32 83       	std	Z+2, r19	; 0x02
   1b288:	43 83       	std	Z+3, r20	; 0x03
   1b28a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1b28e:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1b290:	21 e0       	ldi	r18, 0x01	; 1
   1b292:	30 e0       	ldi	r19, 0x00	; 0
   1b294:	ce 5d       	subi	r28, 0xDE	; 222
   1b296:	dd 4f       	sbci	r29, 0xFD	; 253
   1b298:	39 83       	std	Y+1, r19	; 0x01
   1b29a:	28 83       	st	Y, r18
   1b29c:	c2 52       	subi	r28, 0x22	; 34
   1b29e:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1b2a0:	e1 2c       	mov	r14, r1
   1b2a2:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1b2a4:	1d c0       	rjmp	.+58     	; 0x1b2e0 <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1b2a6:	09 2e       	mov	r0, r25
   1b2a8:	00 0c       	add	r0, r0
   1b2aa:	aa 0b       	sbc	r26, r26
   1b2ac:	bb 0b       	sbc	r27, r27
   1b2ae:	48 0e       	add	r4, r24
   1b2b0:	59 1e       	adc	r5, r25
   1b2b2:	6a 1e       	adc	r6, r26
   1b2b4:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1b2b6:	ed b7       	in	r30, 0x3d	; 61
   1b2b8:	fe b7       	in	r31, 0x3e	; 62
   1b2ba:	44 82       	std	Z+4, r4	; 0x04
   1b2bc:	55 82       	std	Z+5, r5	; 0x05
   1b2be:	66 82       	std	Z+6, r6	; 0x06
   1b2c0:	77 82       	std	Z+7, r7	; 0x07
   1b2c2:	ce 5c       	subi	r28, 0xCE	; 206
   1b2c4:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2c6:	28 81       	ld	r18, Y
   1b2c8:	39 81       	ldd	r19, Y+1	; 0x01
   1b2ca:	4a 81       	ldd	r20, Y+2	; 0x02
   1b2cc:	c2 53       	subi	r28, 0x32	; 50
   1b2ce:	d2 40       	sbci	r29, 0x02	; 2
   1b2d0:	21 83       	std	Z+1, r18	; 0x01
   1b2d2:	32 83       	std	Z+2, r19	; 0x02
   1b2d4:	43 83       	std	Z+3, r20	; 0x03
   1b2d6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
                    wind = 0;
   1b2da:	90 e0       	ldi	r25, 0x00	; 0
   1b2dc:	80 e0       	ldi	r24, 0x00	; 0
   1b2de:	84 cf       	rjmp	.-248    	; 0x1b1e8 <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1b2e0:	0f 3f       	cpi	r16, 0xFF	; 255
   1b2e2:	11 05       	cpc	r17, r1
   1b2e4:	09 f0       	breq	.+2      	; 0x1b2e8 <lif_extract_e010_as_ascii+0x43a>
   1b2e6:	0c f4       	brge	.+2      	; 0x1b2ea <lif_extract_e010_as_ascii+0x43c>
   1b2e8:	e5 ce       	rjmp	.-566    	; 0x1b0b4 <lif_extract_e010_as_ascii+0x206>
   1b2ea:	08 c0       	rjmp	.+16     	; 0x1b2fc <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8);
// EOF ?
                if(len == 0)
                {
                    done = 1;
   1b2ec:	a1 e0       	ldi	r26, 0x01	; 1
   1b2ee:	b0 e0       	ldi	r27, 0x00	; 0
   1b2f0:	ce 5d       	subi	r28, 0xDE	; 222
   1b2f2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b2f4:	b9 83       	std	Y+1, r27	; 0x01
   1b2f6:	a8 83       	st	Y, r26
   1b2f8:	c2 52       	subi	r28, 0x22	; 34
   1b2fa:	d2 40       	sbci	r29, 0x02	; 2

            }                                     // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }                                         // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1b2fc:	c2 5e       	subi	r28, 0xE2	; 226
   1b2fe:	dd 4f       	sbci	r29, 0xFD	; 253
   1b300:	28 81       	ld	r18, Y
   1b302:	39 81       	ldd	r19, Y+1	; 0x01
   1b304:	4a 81       	ldd	r20, Y+2	; 0x02
   1b306:	5b 81       	ldd	r21, Y+3	; 0x03
   1b308:	ce 51       	subi	r28, 0x1E	; 30
   1b30a:	d2 40       	sbci	r29, 0x02	; 2
   1b30c:	3f 5f       	subi	r19, 0xFF	; 255
   1b30e:	4f 4f       	sbci	r20, 0xFF	; 255
   1b310:	5f 4f       	sbci	r21, 0xFF	; 255
   1b312:	c2 5e       	subi	r28, 0xE2	; 226
   1b314:	dd 4f       	sbci	r29, 0xFD	; 253
   1b316:	28 83       	st	Y, r18
   1b318:	39 83       	std	Y+1, r19	; 0x01
   1b31a:	4a 83       	std	Y+2, r20	; 0x02
   1b31c:	5b 83       	std	Y+3, r21	; 0x03
   1b31e:	ce 51       	subi	r28, 0x1E	; 30
   1b320:	d2 40       	sbci	r29, 0x02	; 2
   1b322:	97 ce       	rjmp	.-722    	; 0x1b052 <lif_extract_e010_as_ascii+0x1a4>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1b324:	e1 2c       	mov	r14, r1
   1b326:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b328:	c6 01       	movw	r24, r12
   1b32a:	0e 94 08 ca 	call	0x19410	; 0x19410 <lif_close_volume>

    }                                             // while(offset <= end)

    lif_closedir(LIF);
// Flush any remaining bytes
    if(wind)
   1b32e:	21 14       	cp	r2, r1
   1b330:	31 04       	cpc	r3, r1
   1b332:	31 f1       	breq	.+76     	; 0x1b380 <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1b334:	cc 5d       	subi	r28, 0xDC	; 220
   1b336:	dd 4f       	sbci	r29, 0xFD	; 253
   1b338:	28 81       	ld	r18, Y
   1b33a:	39 81       	ldd	r19, Y+1	; 0x01
   1b33c:	c4 52       	subi	r28, 0x24	; 36
   1b33e:	d2 40       	sbci	r29, 0x02	; 2
   1b340:	a1 01       	movw	r20, r2
   1b342:	61 e0       	ldi	r22, 0x01	; 1
   1b344:	70 e0       	ldi	r23, 0x00	; 0
   1b346:	ce 01       	movw	r24, r28
   1b348:	0c 96       	adiw	r24, 0x0c	; 12
   1b34a:	0e 94 fc 7b 	call	0xf7f8	; 0xf7f8 <fwrite>
   1b34e:	8c 01       	movw	r16, r24
        if(size < wind)
   1b350:	82 15       	cp	r24, r2
   1b352:	93 05       	cpc	r25, r3
   1b354:	64 f4       	brge	.+24     	; 0x1b36e <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1b356:	82 e2       	ldi	r24, 0x22	; 34
   1b358:	95 e3       	ldi	r25, 0x35	; 53
   1b35a:	a0 e0       	ldi	r26, 0x00	; 0
   1b35c:	ed b7       	in	r30, 0x3d	; 61
   1b35e:	fe b7       	in	r31, 0x3e	; 62
   1b360:	81 83       	std	Z+1, r24	; 0x01
   1b362:	92 83       	std	Z+2, r25	; 0x02
   1b364:	a3 83       	std	Z+3, r26	; 0x03
   1b366:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            status = 0;
   1b36a:	e1 2c       	mov	r14, r1
   1b36c:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1b36e:	c8 01       	movw	r24, r16
   1b370:	01 2e       	mov	r0, r17
   1b372:	00 0c       	add	r0, r0
   1b374:	aa 0b       	sbc	r26, r26
   1b376:	bb 0b       	sbc	r27, r27
   1b378:	48 0e       	add	r4, r24
   1b37a:	59 1e       	adc	r5, r25
   1b37c:	6a 1e       	adc	r6, r26
   1b37e:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1b380:	cc 5d       	subi	r28, 0xDC	; 220
   1b382:	dd 4f       	sbci	r29, 0xFD	; 253
   1b384:	88 81       	ld	r24, Y
   1b386:	99 81       	ldd	r25, Y+1	; 0x01
   1b388:	c4 52       	subi	r28, 0x24	; 36
   1b38a:	d2 40       	sbci	r29, 0x02	; 2
   1b38c:	0e 94 7e 7c 	call	0xf8fc	; 0xf8fc <fclose>
    if(t)
   1b390:	c8 5d       	subi	r28, 0xD8	; 216
   1b392:	dd 4f       	sbci	r29, 0xFD	; 253
   1b394:	28 81       	ld	r18, Y
   1b396:	39 81       	ldd	r19, Y+1	; 0x01
   1b398:	4a 81       	ldd	r20, Y+2	; 0x02
   1b39a:	5b 81       	ldd	r21, Y+3	; 0x03
   1b39c:	c8 52       	subi	r28, 0x28	; 40
   1b39e:	d2 40       	sbci	r29, 0x02	; 2
   1b3a0:	21 15       	cp	r18, r1
   1b3a2:	31 05       	cpc	r19, r1
   1b3a4:	41 05       	cpc	r20, r1
   1b3a6:	51 05       	cpc	r21, r1
   1b3a8:	d9 f0       	breq	.+54     	; 0x1b3e0 <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1b3aa:	c8 5e       	subi	r28, 0xE8	; 232
   1b3ac:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3ae:	28 83       	st	Y, r18
   1b3b0:	39 83       	std	Y+1, r19	; 0x01
   1b3b2:	4a 83       	std	Y+2, r20	; 0x02
   1b3b4:	5b 83       	std	Y+3, r21	; 0x03
   1b3b6:	c8 51       	subi	r28, 0x18	; 24
   1b3b8:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1b3ba:	cc 5e       	subi	r28, 0xEC	; 236
   1b3bc:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3be:	28 83       	st	Y, r18
   1b3c0:	39 83       	std	Y+1, r19	; 0x01
   1b3c2:	4a 83       	std	Y+2, r20	; 0x02
   1b3c4:	5b 83       	std	Y+3, r21	; 0x03
   1b3c6:	c4 51       	subi	r28, 0x14	; 20
   1b3c8:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1b3ca:	be 01       	movw	r22, r28
   1b3cc:	6c 5e       	subi	r22, 0xEC	; 236
   1b3ce:	7d 4f       	sbci	r23, 0xFD	; 253
   1b3d0:	ca 5d       	subi	r28, 0xDA	; 218
   1b3d2:	dd 4f       	sbci	r29, 0xFD	; 253
   1b3d4:	88 81       	ld	r24, Y
   1b3d6:	99 81       	ldd	r25, Y+1	; 0x01
   1b3d8:	c6 52       	subi	r28, 0x26	; 38
   1b3da:	d2 40       	sbci	r29, 0x02	; 2
   1b3dc:	0e 94 bb 79 	call	0xf376	; 0xf376 <utime>
    }
    sync();
   1b3e0:	0e 94 79 7b 	call	0xf6f2	; 0xf6f2 <sync>
    printf("\tWrote: %8ld\n", bytes);
   1b3e4:	ed b7       	in	r30, 0x3d	; 61
   1b3e6:	fe b7       	in	r31, 0x3e	; 62
   1b3e8:	44 82       	std	Z+4, r4	; 0x04
   1b3ea:	55 82       	std	Z+5, r5	; 0x05
   1b3ec:	66 82       	std	Z+6, r6	; 0x06
   1b3ee:	77 82       	std	Z+7, r7	; 0x07
   1b3f0:	84 e1       	ldi	r24, 0x14	; 20
   1b3f2:	95 e3       	ldi	r25, 0x35	; 53
   1b3f4:	a0 e0       	ldi	r26, 0x00	; 0
   1b3f6:	81 83       	std	Z+1, r24	; 0x01
   1b3f8:	92 83       	std	Z+2, r25	; 0x02
   1b3fa:	a3 83       	std	Z+3, r26	; 0x03
   1b3fc:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    return(status);
   1b400:	c7 01       	movw	r24, r14
}
   1b402:	c9 5c       	subi	r28, 0xC9	; 201
   1b404:	dd 4f       	sbci	r29, 0xFD	; 253
   1b406:	e2 e1       	ldi	r30, 0x12	; 18
   1b408:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

0001b40c <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1b40c:	a4 e1       	ldi	r26, 0x14	; 20
   1b40e:	b1 e0       	ldi	r27, 0x01	; 1
   1b410:	ec e0       	ldi	r30, 0x0C	; 12
   1b412:	fa ed       	ldi	r31, 0xDA	; 218
   1b414:	0c 94 66 e6 	jmp	0x1cccc	; 0x1cccc <__prologue_saves__>
   1b418:	7c 01       	movw	r14, r24
   1b41a:	8b 01       	movw	r16, r22
   1b41c:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1b41e:	62 e4       	ldi	r22, 0x42	; 66
   1b420:	73 e0       	ldi	r23, 0x03	; 3
   1b422:	0e 94 c5 d0 	call	0x1a18a	; 0x1a18a <lif_open_volume>
   1b426:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1b428:	00 97       	sbiw	r24, 0x00	; 0
   1b42a:	69 f4       	brne	.+26     	; 0x1b446 <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b42c:	ed b7       	in	r30, 0x3d	; 61
   1b42e:	fe b7       	in	r31, 0x3e	; 62
   1b430:	f5 82       	std	Z+5, r15	; 0x05
   1b432:	e4 82       	std	Z+4, r14	; 0x04
   1b434:	8c ef       	ldi	r24, 0xFC	; 252
   1b436:	94 e3       	ldi	r25, 0x34	; 52
   1b438:	a0 e0       	ldi	r26, 0x00	; 0
   1b43a:	81 83       	std	Z+1, r24	; 0x01
   1b43c:	92 83       	std	Z+2, r25	; 0x02
   1b43e:	a3 83       	std	Z+3, r26	; 0x03
   1b440:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1b444:	13 c0       	rjmp	.+38     	; 0x1b46c <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b446:	b8 01       	movw	r22, r16
   1b448:	75 d9       	rcall	.-3350   	; 0x1a734 <lif_find_file>
    if(index == -1)
   1b44a:	01 96       	adiw	r24, 0x01	; 1
   1b44c:	91 f4       	brne	.+36     	; 0x1b472 <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1b44e:	ed b7       	in	r30, 0x3d	; 61
   1b450:	fe b7       	in	r31, 0x3e	; 62
   1b452:	15 83       	std	Z+5, r17	; 0x05
   1b454:	04 83       	std	Z+4, r16	; 0x04
   1b456:	89 ee       	ldi	r24, 0xE9	; 233
   1b458:	94 e3       	ldi	r25, 0x34	; 52
   1b45a:	a0 e0       	ldi	r26, 0x00	; 0
   1b45c:	81 83       	std	Z+1, r24	; 0x01
   1b45e:	92 83       	std	Z+2, r25	; 0x02
   1b460:	a3 83       	std	Z+3, r26	; 0x03
   1b462:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b466:	c4 01       	movw	r24, r8
   1b468:	0e 94 08 ca 	call	0x19410	; 0x19410 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1b46c:	00 e0       	ldi	r16, 0x00	; 0
   1b46e:	10 e0       	ldi	r17, 0x00	; 0
   1b470:	ff c0       	rjmp	.+510    	; 0x1b670 <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1b472:	94 01       	movw	r18, r8
   1b474:	20 5a       	subi	r18, 0xA0	; 160
   1b476:	3f 4f       	sbci	r19, 0xFF	; 255
   1b478:	c0 5f       	subi	r28, 0xF0	; 240
   1b47a:	de 4f       	sbci	r29, 0xFE	; 254
   1b47c:	39 83       	std	Y+1, r19	; 0x01
   1b47e:	28 83       	st	Y, r18
   1b480:	c0 51       	subi	r28, 0x10	; 16
   1b482:	d1 40       	sbci	r29, 0x01	; 1

//Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1b484:	f9 01       	movw	r30, r18
   1b486:	a0 80       	ld	r10, Z
   1b488:	b1 80       	ldd	r11, Z+1	; 0x01
   1b48a:	0b 2c       	mov	r0, r11
   1b48c:	00 0c       	add	r0, r0
   1b48e:	cc 08       	sbc	r12, r12
   1b490:	dd 08       	sbc	r13, r13
   1b492:	e1 2c       	mov	r14, r1
   1b494:	f1 2c       	mov	r15, r1
   1b496:	87 01       	movw	r16, r14
   1b498:	e3 94       	inc	r14
   1b49a:	21 e0       	ldi	r18, 0x01	; 1
   1b49c:	30 e0       	ldi	r19, 0x00	; 0
   1b49e:	40 e0       	ldi	r20, 0x00	; 0
   1b4a0:	50 e0       	ldi	r21, 0x00	; 0
   1b4a2:	6a e5       	ldi	r22, 0x5A	; 90
   1b4a4:	76 e1       	ldi	r23, 0x16	; 22
   1b4a6:	c3 01       	movw	r24, r6
   1b4a8:	0e 94 7b cc 	call	0x198f6	; 0x198f6 <lif_create_volume>
   1b4ac:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1b4ae:	89 2b       	or	r24, r25
   1b4b0:	d1 f2       	breq	.-76     	; 0x1b466 <lif_extract_lif_as_lif+0x5a>
    }

// Only the start sector changes

// Copy directory record
    ULIF->DIR = LIF->DIR;
   1b4b2:	81 e2       	ldi	r24, 0x21	; 33
   1b4b4:	f4 01       	movw	r30, r8
   1b4b6:	e1 5b       	subi	r30, 0xB1	; 177
   1b4b8:	ff 4f       	sbci	r31, 0xFF	; 255
   1b4ba:	d7 01       	movw	r26, r14
   1b4bc:	a1 5b       	subi	r26, 0xB1	; 177
   1b4be:	bf 4f       	sbci	r27, 0xFF	; 255
   1b4c0:	01 90       	ld	r0, Z+
   1b4c2:	0d 92       	st	X+, r0
   1b4c4:	8a 95       	dec	r24
   1b4c6:	e1 f7       	brne	.-8      	; 0x1b4c0 <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1b4c8:	82 e0       	ldi	r24, 0x02	; 2
   1b4ca:	90 e0       	ldi	r25, 0x00	; 0
   1b4cc:	a0 e0       	ldi	r26, 0x00	; 0
   1b4ce:	b0 e0       	ldi	r27, 0x00	; 0
   1b4d0:	f7 01       	movw	r30, r14
   1b4d2:	e4 5a       	subi	r30, 0xA4	; 164
   1b4d4:	ff 4f       	sbci	r31, 0xFF	; 255
   1b4d6:	80 83       	st	Z, r24
   1b4d8:	91 83       	std	Z+1, r25	; 0x01
   1b4da:	a2 83       	std	Z+2, r26	; 0x02
   1b4dc:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1b4de:	c0 5f       	subi	r28, 0xF0	; 240
   1b4e0:	de 4f       	sbci	r29, 0xFE	; 254
   1b4e2:	e8 81       	ld	r30, Y
   1b4e4:	f9 81       	ldd	r31, Y+1	; 0x01
   1b4e6:	c0 51       	subi	r28, 0x10	; 16
   1b4e8:	d1 40       	sbci	r29, 0x01	; 1
   1b4ea:	80 81       	ld	r24, Z
   1b4ec:	91 81       	ldd	r25, Z+1	; 0x01
   1b4ee:	a2 81       	ldd	r26, Z+2	; 0x02
   1b4f0:	b3 81       	ldd	r27, Z+3	; 0x03
   1b4f2:	f7 01       	movw	r30, r14
   1b4f4:	80 8b       	std	Z+16, r24	; 0x10
   1b4f6:	91 8b       	std	Z+17, r25	; 0x11
   1b4f8:	a2 8b       	std	Z+18, r26	; 0x12
   1b4fa:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1b4fc:	60 e0       	ldi	r22, 0x00	; 0
   1b4fe:	70 e0       	ldi	r23, 0x00	; 0
   1b500:	c7 01       	movw	r24, r14
   1b502:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_writedirindex>
   1b506:	8c 01       	movw	r16, r24
   1b508:	89 2b       	or	r24, r25
   1b50a:	41 f0       	breq	.+16     	; 0x1b51c <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1b50c:	61 e0       	ldi	r22, 0x01	; 1
   1b50e:	70 e0       	ldi	r23, 0x00	; 0
   1b510:	c7 01       	movw	r24, r14
   1b512:	0e 94 59 cb 	call	0x196b2	; 0x196b2 <lif_writedirEOF>
   1b516:	8c 01       	movw	r16, r24
   1b518:	89 2b       	or	r24, r25
   1b51a:	39 f4       	brne	.+14     	; 0x1b52a <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b51c:	c4 01       	movw	r24, r8
   1b51e:	0e 94 08 ca 	call	0x19410	; 0x19410 <lif_close_volume>
   1b522:	c7 01       	movw	r24, r14
   1b524:	0e 94 08 ca 	call	0x19410	; 0x19410 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1b528:	a3 c0       	rjmp	.+326    	; 0x1b670 <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1b52a:	f7 01       	movw	r30, r14
   1b52c:	44 84       	ldd	r4, Z+12	; 0x0c
   1b52e:	55 84       	ldd	r5, Z+13	; 0x0d
   1b530:	66 84       	ldd	r6, Z+14	; 0x0e
   1b532:	77 84       	ldd	r7, Z+15	; 0x0f
   1b534:	76 2c       	mov	r7, r6
   1b536:	65 2c       	mov	r6, r5
   1b538:	54 2c       	mov	r5, r4
   1b53a:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b53c:	f4 01       	movw	r30, r8
   1b53e:	e4 5a       	subi	r30, 0xA4	; 164
   1b540:	ff 4f       	sbci	r31, 0xFF	; 255
   1b542:	80 81       	ld	r24, Z
   1b544:	91 81       	ldd	r25, Z+1	; 0x01
   1b546:	a2 81       	ldd	r26, Z+2	; 0x02
   1b548:	b3 81       	ldd	r27, Z+3	; 0x03
   1b54a:	22 27       	eor	r18, r18
   1b54c:	38 2f       	mov	r19, r24
   1b54e:	49 2f       	mov	r20, r25
   1b550:	5a 2f       	mov	r21, r26
   1b552:	c4 5f       	subi	r28, 0xF4	; 244
   1b554:	de 4f       	sbci	r29, 0xFE	; 254
   1b556:	28 83       	st	Y, r18
   1b558:	39 83       	std	Y+1, r19	; 0x01
   1b55a:	4a 83       	std	Y+2, r20	; 0x02
   1b55c:	5b 83       	std	Y+3, r21	; 0x03
   1b55e:	cc 50       	subi	r28, 0x0C	; 12
   1b560:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b562:	21 2c       	mov	r2, r1
   1b564:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b566:	8b ed       	ldi	r24, 0xDB	; 219
   1b568:	94 e3       	ldi	r25, 0x34	; 52
   1b56a:	9c 01       	movw	r18, r24
   1b56c:	40 e0       	ldi	r20, 0x00	; 0
   1b56e:	ce 5e       	subi	r28, 0xEE	; 238
   1b570:	de 4f       	sbci	r29, 0xFE	; 254
   1b572:	28 83       	st	Y, r18
   1b574:	39 83       	std	Y+1, r19	; 0x01
   1b576:	4a 83       	std	Y+2, r20	; 0x02
   1b578:	c2 51       	subi	r28, 0x12	; 18
   1b57a:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b57c:	c0 5f       	subi	r28, 0xF0	; 240
   1b57e:	de 4f       	sbci	r29, 0xFE	; 254
   1b580:	e8 81       	ld	r30, Y
   1b582:	f9 81       	ldd	r31, Y+1	; 0x01
   1b584:	c0 51       	subi	r28, 0x10	; 16
   1b586:	d1 40       	sbci	r29, 0x01	; 1
   1b588:	80 81       	ld	r24, Z
   1b58a:	91 81       	ldd	r25, Z+1	; 0x01
   1b58c:	28 16       	cp	r2, r24
   1b58e:	39 06       	cpc	r3, r25
   1b590:	0c f0       	brlt	.+2      	; 0x1b594 <lif_extract_lif_as_lif+0x188>
   1b592:	58 c0       	rjmp	.+176    	; 0x1b644 <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1b594:	00 e0       	ldi	r16, 0x00	; 0
   1b596:	11 e0       	ldi	r17, 0x01	; 1
   1b598:	c4 5f       	subi	r28, 0xF4	; 244
   1b59a:	de 4f       	sbci	r29, 0xFE	; 254
   1b59c:	28 81       	ld	r18, Y
   1b59e:	39 81       	ldd	r19, Y+1	; 0x01
   1b5a0:	4a 81       	ldd	r20, Y+2	; 0x02
   1b5a2:	5b 81       	ldd	r21, Y+3	; 0x03
   1b5a4:	cc 50       	subi	r28, 0x0C	; 12
   1b5a6:	d1 40       	sbci	r29, 0x01	; 1
   1b5a8:	be 01       	movw	r22, r28
   1b5aa:	68 5f       	subi	r22, 0xF8	; 248
   1b5ac:	7f 4f       	sbci	r23, 0xFF	; 255
   1b5ae:	c4 01       	movw	r24, r8
   1b5b0:	0e 94 3c c1 	call	0x18278	; 0x18278 <lif_read>
   1b5b4:	5b 01       	movw	r10, r22
   1b5b6:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1b5b8:	6f 3f       	cpi	r22, 0xFF	; 255
   1b5ba:	71 05       	cpc	r23, r1
   1b5bc:	09 f0       	breq	.+2      	; 0x1b5c0 <lif_extract_lif_as_lif+0x1b4>
   1b5be:	2c f4       	brge	.+10     	; 0x1b5ca <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b5c0:	c4 01       	movw	r24, r8
   1b5c2:	0e 94 08 ca 	call	0x19410	; 0x19410 <lif_close_volume>
   1b5c6:	c7 01       	movw	r24, r14
   1b5c8:	4f cf       	rjmp	.-354    	; 0x1b468 <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1b5ca:	00 e0       	ldi	r16, 0x00	; 0
   1b5cc:	11 e0       	ldi	r17, 0x01	; 1
   1b5ce:	a3 01       	movw	r20, r6
   1b5d0:	92 01       	movw	r18, r4
   1b5d2:	be 01       	movw	r22, r28
   1b5d4:	68 5f       	subi	r22, 0xF8	; 248
   1b5d6:	7f 4f       	sbci	r23, 0xFF	; 255
   1b5d8:	c7 01       	movw	r24, r14
   1b5da:	0e 94 8f c1 	call	0x1831e	; 0x1831e <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1b5de:	c5 01       	movw	r24, r10
   1b5e0:	0b 2c       	mov	r0, r11
   1b5e2:	00 0c       	add	r0, r0
   1b5e4:	aa 0b       	sbc	r26, r26
   1b5e6:	bb 0b       	sbc	r27, r27
   1b5e8:	48 0e       	add	r4, r24
   1b5ea:	59 1e       	adc	r5, r25
   1b5ec:	6a 1e       	adc	r6, r26
   1b5ee:	7b 1e       	adc	r7, r27
        offset += size;
   1b5f0:	c4 5f       	subi	r28, 0xF4	; 244
   1b5f2:	de 4f       	sbci	r29, 0xFE	; 254
   1b5f4:	28 81       	ld	r18, Y
   1b5f6:	39 81       	ldd	r19, Y+1	; 0x01
   1b5f8:	4a 81       	ldd	r20, Y+2	; 0x02
   1b5fa:	5b 81       	ldd	r21, Y+3	; 0x03
   1b5fc:	cc 50       	subi	r28, 0x0C	; 12
   1b5fe:	d1 40       	sbci	r29, 0x01	; 1
   1b600:	28 0f       	add	r18, r24
   1b602:	39 1f       	adc	r19, r25
   1b604:	4a 1f       	adc	r20, r26
   1b606:	5b 1f       	adc	r21, r27
   1b608:	c4 5f       	subi	r28, 0xF4	; 244
   1b60a:	de 4f       	sbci	r29, 0xFE	; 254
   1b60c:	28 83       	st	Y, r18
   1b60e:	39 83       	std	Y+1, r19	; 0x01
   1b610:	4a 83       	std	Y+2, r20	; 0x02
   1b612:	5b 83       	std	Y+3, r21	; 0x03
   1b614:	cc 50       	subi	r28, 0x0C	; 12
   1b616:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1b618:	ed b7       	in	r30, 0x3d	; 61
   1b61a:	fe b7       	in	r31, 0x3e	; 62
   1b61c:	44 82       	std	Z+4, r4	; 0x04
   1b61e:	55 82       	std	Z+5, r5	; 0x05
   1b620:	66 82       	std	Z+6, r6	; 0x06
   1b622:	77 82       	std	Z+7, r7	; 0x07
   1b624:	ce 5e       	subi	r28, 0xEE	; 238
   1b626:	de 4f       	sbci	r29, 0xFE	; 254
   1b628:	28 81       	ld	r18, Y
   1b62a:	39 81       	ldd	r19, Y+1	; 0x01
   1b62c:	4a 81       	ldd	r20, Y+2	; 0x02
   1b62e:	c2 51       	subi	r28, 0x12	; 18
   1b630:	d1 40       	sbci	r29, 0x01	; 1
   1b632:	21 83       	std	Z+1, r18	; 0x01
   1b634:	32 83       	std	Z+2, r19	; 0x02
   1b636:	43 83       	std	Z+3, r20	; 0x03
   1b638:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b63c:	ff ef       	ldi	r31, 0xFF	; 255
   1b63e:	2f 1a       	sub	r2, r31
   1b640:	3f 0a       	sbc	r3, r31
   1b642:	9c cf       	rjmp	.-200    	; 0x1b57c <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b644:	c4 01       	movw	r24, r8
   1b646:	0e 94 08 ca 	call	0x19410	; 0x19410 <lif_close_volume>
   1b64a:	c7 01       	movw	r24, r14
   1b64c:	0e 94 08 ca 	call	0x19410	; 0x19410 <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1b650:	ed b7       	in	r30, 0x3d	; 61
   1b652:	fe b7       	in	r31, 0x3e	; 62
   1b654:	44 82       	std	Z+4, r4	; 0x04
   1b656:	55 82       	std	Z+5, r5	; 0x05
   1b658:	66 82       	std	Z+6, r6	; 0x06
   1b65a:	77 82       	std	Z+7, r7	; 0x07
   1b65c:	8d ec       	ldi	r24, 0xCD	; 205
   1b65e:	94 e3       	ldi	r25, 0x34	; 52
   1b660:	a0 e0       	ldi	r26, 0x00	; 0
   1b662:	81 83       	std	Z+1, r24	; 0x01
   1b664:	92 83       	std	Z+2, r25	; 0x02
   1b666:	a3 83       	std	Z+3, r26	; 0x03
   1b668:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    return(1);
   1b66c:	01 e0       	ldi	r16, 0x01	; 1
   1b66e:	10 e0       	ldi	r17, 0x00	; 0
}
   1b670:	c8 01       	movw	r24, r16
   1b672:	cc 5e       	subi	r28, 0xEC	; 236
   1b674:	de 4f       	sbci	r29, 0xFE	; 254
   1b676:	e2 e1       	ldi	r30, 0x12	; 18
   1b678:	0c 94 82 e6 	jmp	0x1cd04	; 0x1cd04 <__epilogue_restores__>

0001b67c <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1b67c:	2f 92       	push	r2
   1b67e:	3f 92       	push	r3
   1b680:	4f 92       	push	r4
   1b682:	5f 92       	push	r5
   1b684:	6f 92       	push	r6
   1b686:	8f 92       	push	r8
   1b688:	9f 92       	push	r9
   1b68a:	af 92       	push	r10
   1b68c:	bf 92       	push	r11
   1b68e:	cf 92       	push	r12
   1b690:	df 92       	push	r13
   1b692:	ef 92       	push	r14
   1b694:	ff 92       	push	r15
   1b696:	0f 93       	push	r16
   1b698:	1f 93       	push	r17
   1b69a:	cf 93       	push	r28
   1b69c:	df 93       	push	r29
   1b69e:	cd b7       	in	r28, 0x3d	; 61
   1b6a0:	de b7       	in	r29, 0x3e	; 62
   1b6a2:	cd 51       	subi	r28, 0x1D	; 29
   1b6a4:	d1 40       	sbci	r29, 0x01	; 1
   1b6a6:	0f b6       	in	r0, 0x3f	; 63
   1b6a8:	f8 94       	cli
   1b6aa:	de bf       	out	0x3e, r29	; 62
   1b6ac:	0f be       	out	0x3f, r0	; 63
   1b6ae:	cd bf       	out	0x3d, r28	; 61
   1b6b0:	5c 01       	movw	r10, r24
   1b6b2:	7b 01       	movw	r14, r22
   1b6b4:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1b6b6:	dc 01       	movw	r26, r24
   1b6b8:	8c 91       	ld	r24, X
   1b6ba:	81 11       	cpse	r24, r1
   1b6bc:	03 c0       	rjmp	.+6      	; 0x1b6c4 <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1b6be:	8d ea       	ldi	r24, 0xAD	; 173
   1b6c0:	94 e3       	ldi	r25, 0x34	; 52
   1b6c2:	06 c0       	rjmp	.+12     	; 0x1b6d0 <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1b6c4:	db 01       	movw	r26, r22
   1b6c6:	8c 91       	ld	r24, X
   1b6c8:	81 11       	cpse	r24, r1
   1b6ca:	0b c0       	rjmp	.+22     	; 0x1b6e2 <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1b6cc:	82 e9       	ldi	r24, 0x92	; 146
   1b6ce:	94 e3       	ldi	r25, 0x34	; 52
   1b6d0:	a0 e0       	ldi	r26, 0x00	; 0
   1b6d2:	ed b7       	in	r30, 0x3d	; 61
   1b6d4:	fe b7       	in	r31, 0x3e	; 62
   1b6d6:	81 83       	std	Z+1, r24	; 0x01
   1b6d8:	92 83       	std	Z+2, r25	; 0x02
   1b6da:	a3 83       	std	Z+3, r26	; 0x03
   1b6dc:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1b6e0:	25 c1       	rjmp	.+586    	; 0x1b92c <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1b6e2:	da 01       	movw	r26, r20
   1b6e4:	8c 91       	ld	r24, X
   1b6e6:	81 11       	cpse	r24, r1
   1b6e8:	03 c0       	rjmp	.+6      	; 0x1b6f0 <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1b6ea:	86 e7       	ldi	r24, 0x76	; 118
   1b6ec:	94 e3       	ldi	r25, 0x34	; 52
   1b6ee:	f0 cf       	rjmp	.-32     	; 0x1b6d0 <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1b6f0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b6f4:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b6f8:	92 ff       	sbrs	r25, 2
   1b6fa:	10 c0       	rjmp	.+32     	; 0x1b71c <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1b6fc:	ed b7       	in	r30, 0x3d	; 61
   1b6fe:	fe b7       	in	r31, 0x3e	; 62
   1b700:	51 87       	std	Z+9, r21	; 0x09
   1b702:	40 87       	std	Z+8, r20	; 0x08
   1b704:	77 83       	std	Z+7, r23	; 0x07
   1b706:	66 83       	std	Z+6, r22	; 0x06
   1b708:	b5 82       	std	Z+5, r11	; 0x05
   1b70a:	a4 82       	std	Z+4, r10	; 0x04
   1b70c:	87 e4       	ldi	r24, 0x47	; 71
   1b70e:	94 e3       	ldi	r25, 0x34	; 52
   1b710:	a0 e0       	ldi	r26, 0x00	; 0
   1b712:	81 83       	std	Z+1, r24	; 0x01
   1b714:	92 83       	std	Z+2, r25	; 0x02
   1b716:	a3 83       	std	Z+3, r26	; 0x03
   1b718:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            lifimagename, lifname, userfile);

// open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1b71c:	66 ef       	ldi	r22, 0xF6	; 246
   1b71e:	78 e0       	ldi	r23, 0x08	; 8
   1b720:	c4 01       	movw	r24, r8
   1b722:	0e 94 c5 d0 	call	0x1a18a	; 0x1a18a <lif_open_volume>
   1b726:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1b728:	00 97       	sbiw	r24, 0x00	; 0
   1b72a:	09 f4       	brne	.+2      	; 0x1b72e <lif_add_lif_file+0xb2>
   1b72c:	ff c0       	rjmp	.+510    	; 0x1b92c <lif_add_lif_file+0x2b0>
        return(-1);

// find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1b72e:	b7 01       	movw	r22, r14
   1b730:	01 d8       	rcall	.-4094   	; 0x1a734 <lif_find_file>
    if(index == -1)
   1b732:	01 96       	adiw	r24, 0x01	; 1
   1b734:	a1 f4       	brne	.+40     	; 0x1b75e <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1b736:	ed b7       	in	r30, 0x3d	; 61
   1b738:	fe b7       	in	r31, 0x3e	; 62
   1b73a:	f5 82       	std	Z+5, r15	; 0x05
   1b73c:	e4 82       	std	Z+4, r14	; 0x04
   1b73e:	84 e3       	ldi	r24, 0x34	; 52
   1b740:	94 e3       	ldi	r25, 0x34	; 52
   1b742:	a0 e0       	ldi	r26, 0x00	; 0
   1b744:	81 83       	std	Z+1, r24	; 0x01
   1b746:	92 83       	std	Z+2, r25	; 0x02
   1b748:	a3 83       	std	Z+3, r26	; 0x03
   1b74a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b74e:	c6 01       	movw	r24, r12
   1b750:	0e 94 08 ca 	call	0x19410	; 0x19410 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1b754:	60 e0       	ldi	r22, 0x00	; 0
   1b756:	70 e0       	ldi	r23, 0x00	; 0
   1b758:	80 e0       	ldi	r24, 0x00	; 0
   1b75a:	90 e0       	ldi	r25, 0x00	; 0
   1b75c:	ff c0       	rjmp	.+510    	; 0x1b95c <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b75e:	66 ef       	ldi	r22, 0xF6	; 246
   1b760:	78 e0       	ldi	r23, 0x08	; 8
   1b762:	c5 01       	movw	r24, r10
   1b764:	0e 94 c5 d0 	call	0x1a18a	; 0x1a18a <lif_open_volume>
   1b768:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1b76a:	00 97       	sbiw	r24, 0x00	; 0
   1b76c:	09 f4       	brne	.+2      	; 0x1b770 <lif_add_lif_file+0xf4>
   1b76e:	de c0       	rjmp	.+444    	; 0x1b92c <lif_add_lif_file+0x2b0>
        return(-1);

// Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1b770:	f6 01       	movw	r30, r12
   1b772:	e0 5a       	subi	r30, 0xA0	; 160
   1b774:	ff 4f       	sbci	r31, 0xFF	; 255
   1b776:	40 81       	ld	r20, Z
   1b778:	51 81       	ldd	r21, Z+1	; 0x01
   1b77a:	62 81       	ldd	r22, Z+2	; 0x02
   1b77c:	73 81       	ldd	r23, Z+3	; 0x03
   1b77e:	0e 94 65 cf 	call	0x19eca	; 0x19eca <lif_newdir>
   1b782:	ca 5e       	subi	r28, 0xEA	; 234
   1b784:	de 4f       	sbci	r29, 0xFE	; 254
   1b786:	99 83       	std	Y+1, r25	; 0x01
   1b788:	88 83       	st	Y, r24
   1b78a:	c6 51       	subi	r28, 0x16	; 22
   1b78c:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1b78e:	01 96       	adiw	r24, 0x01	; 1
   1b790:	79 f4       	brne	.+30     	; 0x1b7b0 <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1b792:	ed b7       	in	r30, 0x3d	; 61
   1b794:	fe b7       	in	r31, 0x3e	; 62
   1b796:	97 82       	std	Z+7, r9	; 0x07
   1b798:	86 82       	std	Z+6, r8	; 0x06
   1b79a:	b5 82       	std	Z+5, r11	; 0x05
   1b79c:	a4 82       	std	Z+4, r10	; 0x04
   1b79e:	84 e0       	ldi	r24, 0x04	; 4
   1b7a0:	94 e3       	ldi	r25, 0x34	; 52
   1b7a2:	a0 e0       	ldi	r26, 0x00	; 0
   1b7a4:	81 83       	std	Z+1, r24	; 0x01
   1b7a6:	92 83       	std	Z+2, r25	; 0x02
   1b7a8:	a3 83       	std	Z+3, r26	; 0x03
   1b7aa:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1b7ae:	a8 c0       	rjmp	.+336    	; 0x1b900 <lif_add_lif_file+0x284>
        lif_closedir(ULIF);
        return(-1);
    }

// Save start sector
    start = LIF->DIR.FileStartSector;
   1b7b0:	c7 01       	movw	r24, r14
   1b7b2:	84 5a       	subi	r24, 0xA4	; 164
   1b7b4:	9f 4f       	sbci	r25, 0xFF	; 255
   1b7b6:	dc 01       	movw	r26, r24
   1b7b8:	4d 91       	ld	r20, X+
   1b7ba:	5d 91       	ld	r21, X+
   1b7bc:	6d 91       	ld	r22, X+
   1b7be:	7c 91       	ld	r23, X
   1b7c0:	13 97       	sbiw	r26, 0x03	; 3

// Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1b7c2:	21 e2       	ldi	r18, 0x21	; 33
   1b7c4:	f6 01       	movw	r30, r12
   1b7c6:	e1 5b       	subi	r30, 0xB1	; 177
   1b7c8:	ff 4f       	sbci	r31, 0xFF	; 255
   1b7ca:	1d 97       	sbiw	r26, 0x0d	; 13
   1b7cc:	01 90       	ld	r0, Z+
   1b7ce:	0d 92       	st	X+, r0
   1b7d0:	2a 95       	dec	r18
   1b7d2:	e1 f7       	brne	.-8      	; 0x1b7cc <lif_add_lif_file+0x150>

// Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1b7d4:	fc 01       	movw	r30, r24
   1b7d6:	40 83       	st	Z, r20
   1b7d8:	51 83       	std	Z+1, r21	; 0x01
   1b7da:	62 83       	std	Z+2, r22	; 0x02
   1b7dc:	73 83       	std	Z+3, r23	; 0x03

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b7de:	b6 2f       	mov	r27, r22
   1b7e0:	a5 2f       	mov	r26, r21
   1b7e2:	94 2f       	mov	r25, r20
   1b7e4:	88 27       	eor	r24, r24
   1b7e6:	c2 5f       	subi	r28, 0xF2	; 242
   1b7e8:	de 4f       	sbci	r29, 0xFE	; 254
   1b7ea:	88 83       	st	Y, r24
   1b7ec:	99 83       	std	Y+1, r25	; 0x01
   1b7ee:	aa 83       	std	Y+2, r26	; 0x02
   1b7f0:	bb 83       	std	Y+3, r27	; 0x03
   1b7f2:	ce 50       	subi	r28, 0x0E	; 14
   1b7f4:	d1 40       	sbci	r29, 0x01	; 1
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b7f6:	f6 01       	movw	r30, r12
   1b7f8:	e4 5a       	subi	r30, 0xA4	; 164
   1b7fa:	ff 4f       	sbci	r31, 0xFF	; 255
   1b7fc:	80 81       	ld	r24, Z
   1b7fe:	91 81       	ldd	r25, Z+1	; 0x01
   1b800:	a2 81       	ldd	r26, Z+2	; 0x02
   1b802:	b3 81       	ldd	r27, Z+3	; 0x03
   1b804:	22 27       	eor	r18, r18
   1b806:	38 2f       	mov	r19, r24
   1b808:	49 2f       	mov	r20, r25
   1b80a:	5a 2f       	mov	r21, r26
   1b80c:	ce 5e       	subi	r28, 0xEE	; 238
   1b80e:	de 4f       	sbci	r29, 0xFE	; 254
   1b810:	28 83       	st	Y, r18
   1b812:	39 83       	std	Y+1, r19	; 0x01
   1b814:	4a 83       	std	Y+2, r20	; 0x02
   1b816:	5b 83       	std	Y+3, r21	; 0x03
   1b818:	c2 51       	subi	r28, 0x12	; 18
   1b81a:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b81c:	21 2c       	mov	r2, r1
   1b81e:	31 2c       	mov	r3, r1

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1b820:	81 2c       	mov	r8, r1
   1b822:	91 2c       	mov	r9, r1
   1b824:	54 01       	movw	r10, r8
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b826:	a7 01       	movw	r20, r14
   1b828:	40 5a       	subi	r20, 0xA0	; 160
   1b82a:	5f 4f       	sbci	r21, 0xFF	; 255
   1b82c:	c4 5e       	subi	r28, 0xE4	; 228
   1b82e:	de 4f       	sbci	r29, 0xFE	; 254
   1b830:	59 83       	std	Y+1, r21	; 0x01
   1b832:	48 83       	st	Y, r20
   1b834:	cc 51       	subi	r28, 0x1C	; 28
   1b836:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1b838:	86 ef       	ldi	r24, 0xF6	; 246
   1b83a:	93 e3       	ldi	r25, 0x33	; 51
   1b83c:	2c 01       	movw	r4, r24
   1b83e:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b840:	27 c0       	rjmp	.+78     	; 0x1b890 <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

// Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b842:	00 e0       	ldi	r16, 0x00	; 0
   1b844:	11 e0       	ldi	r17, 0x01	; 1
   1b846:	c8 5e       	subi	r28, 0xE8	; 232
   1b848:	de 4f       	sbci	r29, 0xFE	; 254
   1b84a:	28 81       	ld	r18, Y
   1b84c:	39 81       	ldd	r19, Y+1	; 0x01
   1b84e:	4a 81       	ldd	r20, Y+2	; 0x02
   1b850:	5b 81       	ldd	r21, Y+3	; 0x03
   1b852:	c8 51       	subi	r28, 0x18	; 24
   1b854:	d1 40       	sbci	r29, 0x01	; 1
   1b856:	be 01       	movw	r22, r28
   1b858:	66 5f       	subi	r22, 0xF6	; 246
   1b85a:	7f 4f       	sbci	r23, 0xFF	; 255
   1b85c:	c7 01       	movw	r24, r14
   1b85e:	0e 94 8f c1 	call	0x1831e	; 0x1831e <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1b862:	8f 3f       	cpi	r24, 0xFF	; 255
   1b864:	91 05       	cpc	r25, r1
   1b866:	09 f0       	breq	.+2      	; 0x1b86a <lif_add_lif_file+0x1ee>
   1b868:	0c f4       	brge	.+2      	; 0x1b86c <lif_add_lif_file+0x1f0>
   1b86a:	4a c0       	rjmp	.+148    	; 0x1b900 <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1b86c:	5f ef       	ldi	r21, 0xFF	; 255
   1b86e:	95 1a       	sub	r9, r21
   1b870:	a5 0a       	sbc	r10, r21
   1b872:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1b874:	ed b7       	in	r30, 0x3d	; 61
   1b876:	fe b7       	in	r31, 0x3e	; 62
   1b878:	84 82       	std	Z+4, r8	; 0x04
   1b87a:	95 82       	std	Z+5, r9	; 0x05
   1b87c:	a6 82       	std	Z+6, r10	; 0x06
   1b87e:	b7 82       	std	Z+7, r11	; 0x07
   1b880:	41 82       	std	Z+1, r4	; 0x01
   1b882:	52 82       	std	Z+2, r5	; 0x02
   1b884:	63 82       	std	Z+3, r6	; 0x03
   1b886:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b88a:	ff ef       	ldi	r31, 0xFF	; 255
   1b88c:	2f 1a       	sub	r2, r31
   1b88e:	3f 0a       	sbc	r3, r31
   1b890:	ce 5e       	subi	r28, 0xEE	; 238
   1b892:	de 4f       	sbci	r29, 0xFE	; 254
   1b894:	28 81       	ld	r18, Y
   1b896:	39 81       	ldd	r19, Y+1	; 0x01
   1b898:	4a 81       	ldd	r20, Y+2	; 0x02
   1b89a:	5b 81       	ldd	r21, Y+3	; 0x03
   1b89c:	c2 51       	subi	r28, 0x12	; 18
   1b89e:	d1 40       	sbci	r29, 0x01	; 1
   1b8a0:	28 0d       	add	r18, r8
   1b8a2:	39 1d       	adc	r19, r9
   1b8a4:	4a 1d       	adc	r20, r10
   1b8a6:	5b 1d       	adc	r21, r11
   1b8a8:	c2 5f       	subi	r28, 0xF2	; 242
   1b8aa:	de 4f       	sbci	r29, 0xFE	; 254
   1b8ac:	88 81       	ld	r24, Y
   1b8ae:	99 81       	ldd	r25, Y+1	; 0x01
   1b8b0:	aa 81       	ldd	r26, Y+2	; 0x02
   1b8b2:	bb 81       	ldd	r27, Y+3	; 0x03
   1b8b4:	ce 50       	subi	r28, 0x0E	; 14
   1b8b6:	d1 40       	sbci	r29, 0x01	; 1
   1b8b8:	88 0d       	add	r24, r8
   1b8ba:	99 1d       	adc	r25, r9
   1b8bc:	aa 1d       	adc	r26, r10
   1b8be:	bb 1d       	adc	r27, r11
   1b8c0:	c8 5e       	subi	r28, 0xE8	; 232
   1b8c2:	de 4f       	sbci	r29, 0xFE	; 254
   1b8c4:	88 83       	st	Y, r24
   1b8c6:	99 83       	std	Y+1, r25	; 0x01
   1b8c8:	aa 83       	std	Y+2, r26	; 0x02
   1b8ca:	bb 83       	std	Y+3, r27	; 0x03
   1b8cc:	c8 51       	subi	r28, 0x18	; 24
   1b8ce:	d1 40       	sbci	r29, 0x01	; 1
   1b8d0:	c4 5e       	subi	r28, 0xE4	; 228
   1b8d2:	de 4f       	sbci	r29, 0xFE	; 254
   1b8d4:	a8 81       	ld	r26, Y
   1b8d6:	b9 81       	ldd	r27, Y+1	; 0x01
   1b8d8:	cc 51       	subi	r28, 0x1C	; 28
   1b8da:	d1 40       	sbci	r29, 0x01	; 1
   1b8dc:	8d 91       	ld	r24, X+
   1b8de:	9c 91       	ld	r25, X
   1b8e0:	28 16       	cp	r2, r24
   1b8e2:	39 06       	cpc	r3, r25
   1b8e4:	94 f4       	brge	.+36     	; 0x1b90a <lif_add_lif_file+0x28e>
    {
// Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1b8e6:	00 e0       	ldi	r16, 0x00	; 0
   1b8e8:	11 e0       	ldi	r17, 0x01	; 1
   1b8ea:	be 01       	movw	r22, r28
   1b8ec:	66 5f       	subi	r22, 0xF6	; 246
   1b8ee:	7f 4f       	sbci	r23, 0xFF	; 255
   1b8f0:	c6 01       	movw	r24, r12
   1b8f2:	0e 94 3c c1 	call	0x18278	; 0x18278 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b8f6:	6f 3f       	cpi	r22, 0xFF	; 255
   1b8f8:	71 05       	cpc	r23, r1
   1b8fa:	11 f0       	breq	.+4      	; 0x1b900 <lif_add_lif_file+0x284>
   1b8fc:	0c f0       	brlt	.+2      	; 0x1b900 <lif_add_lif_file+0x284>
   1b8fe:	a1 cf       	rjmp	.-190    	; 0x1b842 <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b900:	c7 01       	movw	r24, r14
   1b902:	0e 94 08 ca 	call	0x19410	; 0x19410 <lif_close_volume>
   1b906:	c6 01       	movw	r24, r12
   1b908:	0f c0       	rjmp	.+30     	; 0x1b928 <lif_add_lif_file+0x2ac>
   1b90a:	c6 01       	movw	r24, r12
   1b90c:	0e 94 08 ca 	call	0x19410	; 0x19410 <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

// Write directory record
    if( !lif_writedirindex(LIF,index))
   1b910:	ca 5e       	subi	r28, 0xEA	; 234
   1b912:	de 4f       	sbci	r29, 0xFE	; 254
   1b914:	68 81       	ld	r22, Y
   1b916:	79 81       	ldd	r23, Y+1	; 0x01
   1b918:	c6 51       	subi	r28, 0x16	; 22
   1b91a:	d1 40       	sbci	r29, 0x01	; 1
   1b91c:	c7 01       	movw	r24, r14
   1b91e:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_writedirindex>
   1b922:	89 2b       	or	r24, r25
   1b924:	41 f4       	brne	.+16     	; 0x1b936 <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b926:	c7 01       	movw	r24, r14
   1b928:	0e 94 08 ca 	call	0x19410	; 0x19410 <lif_close_volume>

// Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1b92c:	6f ef       	ldi	r22, 0xFF	; 255
   1b92e:	7f ef       	ldi	r23, 0xFF	; 255
   1b930:	8f ef       	ldi	r24, 0xFF	; 255
   1b932:	9f ef       	ldi	r25, 0xFF	; 255
   1b934:	13 c0       	rjmp	.+38     	; 0x1b95c <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b936:	c7 01       	movw	r24, r14
   1b938:	0e 94 08 ca 	call	0x19410	; 0x19410 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1b93c:	ed b7       	in	r30, 0x3d	; 61
   1b93e:	fe b7       	in	r31, 0x3e	; 62
   1b940:	84 82       	std	Z+4, r8	; 0x04
   1b942:	95 82       	std	Z+5, r9	; 0x05
   1b944:	a6 82       	std	Z+6, r10	; 0x06
   1b946:	b7 82       	std	Z+7, r11	; 0x07
   1b948:	88 ee       	ldi	r24, 0xE8	; 232
   1b94a:	93 e3       	ldi	r25, 0x33	; 51
   1b94c:	a0 e0       	ldi	r26, 0x00	; 0
   1b94e:	81 83       	std	Z+1, r24	; 0x01
   1b950:	92 83       	std	Z+2, r25	; 0x02
   1b952:	a3 83       	std	Z+3, r26	; 0x03
   1b954:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    return(bytes);
   1b958:	b4 01       	movw	r22, r8
   1b95a:	c5 01       	movw	r24, r10
}
   1b95c:	c3 5e       	subi	r28, 0xE3	; 227
   1b95e:	de 4f       	sbci	r29, 0xFE	; 254
   1b960:	0f b6       	in	r0, 0x3f	; 63
   1b962:	f8 94       	cli
   1b964:	de bf       	out	0x3e, r29	; 62
   1b966:	0f be       	out	0x3f, r0	; 63
   1b968:	cd bf       	out	0x3d, r28	; 61
   1b96a:	df 91       	pop	r29
   1b96c:	cf 91       	pop	r28
   1b96e:	1f 91       	pop	r17
   1b970:	0f 91       	pop	r16
   1b972:	ff 90       	pop	r15
   1b974:	ef 90       	pop	r14
   1b976:	df 90       	pop	r13
   1b978:	cf 90       	pop	r12
   1b97a:	bf 90       	pop	r11
   1b97c:	af 90       	pop	r10
   1b97e:	9f 90       	pop	r9
   1b980:	8f 90       	pop	r8
   1b982:	6f 90       	pop	r6
   1b984:	5f 90       	pop	r5
   1b986:	4f 90       	pop	r4
   1b988:	3f 90       	pop	r3
   1b98a:	2f 90       	pop	r2
   1b98c:	08 95       	ret

0001b98e <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1b98e:	ef 92       	push	r14
   1b990:	ff 92       	push	r15
   1b992:	0f 93       	push	r16
   1b994:	1f 93       	push	r17
   1b996:	cf 93       	push	r28
   1b998:	df 93       	push	r29
   1b99a:	ad b7       	in	r26, 0x3d	; 61
   1b99c:	be b7       	in	r27, 0x3e	; 62
   1b99e:	17 97       	sbiw	r26, 0x07	; 7
   1b9a0:	0f b6       	in	r0, 0x3f	; 63
   1b9a2:	f8 94       	cli
   1b9a4:	be bf       	out	0x3e, r27	; 62
   1b9a6:	0f be       	out	0x3f, r0	; 63
   1b9a8:	ad bf       	out	0x3d, r26	; 61
   1b9aa:	7c 01       	movw	r14, r24
   1b9ac:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1b9ae:	fc 01       	movw	r30, r24
   1b9b0:	80 81       	ld	r24, Z
   1b9b2:	81 11       	cpse	r24, r1
   1b9b4:	03 c0       	rjmp	.+6      	; 0x1b9bc <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1b9b6:	83 ec       	ldi	r24, 0xC3	; 195
   1b9b8:	93 e3       	ldi	r25, 0x33	; 51
   1b9ba:	06 c0       	rjmp	.+12     	; 0x1b9c8 <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1b9bc:	fb 01       	movw	r30, r22
   1b9be:	80 81       	ld	r24, Z
   1b9c0:	81 11       	cpse	r24, r1
   1b9c2:	0b c0       	rjmp	.+22     	; 0x1b9da <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1b9c4:	83 ea       	ldi	r24, 0xA3	; 163
   1b9c6:	93 e3       	ldi	r25, 0x33	; 51
   1b9c8:	a0 e0       	ldi	r26, 0x00	; 0
   1b9ca:	ed b7       	in	r30, 0x3d	; 61
   1b9cc:	fe b7       	in	r31, 0x3e	; 62
   1b9ce:	81 83       	std	Z+1, r24	; 0x01
   1b9d0:	92 83       	std	Z+2, r25	; 0x02
   1b9d2:	a3 83       	std	Z+3, r26	; 0x03
   1b9d4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1b9d8:	68 c0       	rjmp	.+208    	; 0x1baaa <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & LIF_DEBUG)
   1b9da:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b9de:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b9e2:	92 ff       	sbrs	r25, 2
   1b9e4:	0e c0       	rjmp	.+28     	; 0x1ba02 <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n",
   1b9e6:	ed b7       	in	r30, 0x3d	; 61
   1b9e8:	fe b7       	in	r31, 0x3e	; 62
   1b9ea:	77 83       	std	Z+7, r23	; 0x07
   1b9ec:	66 83       	std	Z+6, r22	; 0x06
   1b9ee:	f5 82       	std	Z+5, r15	; 0x05
   1b9f0:	e4 82       	std	Z+4, r14	; 0x04
   1b9f2:	84 e8       	ldi	r24, 0x84	; 132
   1b9f4:	93 e3       	ldi	r25, 0x33	; 51
   1b9f6:	a0 e0       	ldi	r26, 0x00	; 0
   1b9f8:	81 83       	std	Z+1, r24	; 0x01
   1b9fa:	92 83       	std	Z+2, r25	; 0x02
   1b9fc:	a3 83       	std	Z+3, r26	; 0x03
   1b9fe:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
   1ba02:	66 ef       	ldi	r22, 0xF6	; 246
   1ba04:	78 e0       	ldi	r23, 0x08	; 8
   1ba06:	c7 01       	movw	r24, r14
   1ba08:	0e 94 c5 d0 	call	0x1a18a	; 0x1a18a <lif_open_volume>
   1ba0c:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1ba0e:	00 97       	sbiw	r24, 0x00	; 0
   1ba10:	09 f4       	brne	.+2      	; 0x1ba14 <lif_del_file+0x86>
   1ba12:	4b c0       	rjmp	.+150    	; 0x1baaa <lif_del_file+0x11c>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, lifname);
   1ba14:	b8 01       	movw	r22, r16
   1ba16:	0e 94 9a d3 	call	0x1a734	; 0x1a734 <lif_find_file>
    if(index == -1)
   1ba1a:	8f 3f       	cpi	r24, 0xFF	; 255
   1ba1c:	ff ef       	ldi	r31, 0xFF	; 255
   1ba1e:	9f 07       	cpc	r25, r31
   1ba20:	a1 f4       	brne	.+40     	; 0x1ba4a <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba22:	ce 01       	movw	r24, r28
   1ba24:	0e 94 08 ca 	call	0x19410	; 0x19410 <lif_close_volume>
// Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1ba28:	ed b7       	in	r30, 0x3d	; 61
   1ba2a:	fe b7       	in	r31, 0x3e	; 62
   1ba2c:	17 83       	std	Z+7, r17	; 0x07
   1ba2e:	06 83       	std	Z+6, r16	; 0x06
   1ba30:	f5 82       	std	Z+5, r15	; 0x05
   1ba32:	e4 82       	std	Z+4, r14	; 0x04
   1ba34:	8c e5       	ldi	r24, 0x5C	; 92
   1ba36:	93 e3       	ldi	r25, 0x33	; 51
   1ba38:	a0 e0       	ldi	r26, 0x00	; 0
   1ba3a:	81 83       	std	Z+1, r24	; 0x01
   1ba3c:	92 83       	std	Z+2, r25	; 0x02
   1ba3e:	a3 83       	std	Z+3, r26	; 0x03
   1ba40:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        return(0);
   1ba44:	80 e0       	ldi	r24, 0x00	; 0
   1ba46:	90 e0       	ldi	r25, 0x00	; 0
   1ba48:	32 c0       	rjmp	.+100    	; 0x1baae <lif_del_file+0x120>
    }

// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1ba4a:	2a a1       	ldd	r18, Y+34	; 0x22
   1ba4c:	3b a1       	ldd	r19, Y+35	; 0x23
   1ba4e:	21 50       	subi	r18, 0x01	; 1
   1ba50:	31 09       	sbc	r19, r1
   1ba52:	fe 01       	movw	r30, r28
   1ba54:	e6 5a       	subi	r30, 0xA6	; 166
   1ba56:	ff 4f       	sbci	r31, 0xFF	; 255
   1ba58:	82 17       	cp	r24, r18
   1ba5a:	93 07       	cpc	r25, r19
   1ba5c:	2c f0       	brlt	.+10     	; 0x1ba68 <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1ba5e:	2f ef       	ldi	r18, 0xFF	; 255
   1ba60:	3f ef       	ldi	r19, 0xFF	; 255
   1ba62:	31 83       	std	Z+1, r19	; 0x01
   1ba64:	20 83       	st	Z, r18
   1ba66:	02 c0       	rjmp	.+4      	; 0x1ba6c <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1ba68:	11 82       	std	Z+1, r1	; 0x01
   1ba6a:	10 82       	st	Z, r1

// re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1ba6c:	bc 01       	movw	r22, r24
   1ba6e:	ce 01       	movw	r24, r28
   1ba70:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_writedirindex>
   1ba74:	89 2b       	or	r24, r25
   1ba76:	21 f4       	brne	.+8      	; 0x1ba80 <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba78:	ce 01       	movw	r24, r28
   1ba7a:	0e 94 08 ca 	call	0x19410	; 0x19410 <lif_close_volume>
   1ba7e:	15 c0       	rjmp	.+42     	; 0x1baaa <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1ba80:	ce 01       	movw	r24, r28
   1ba82:	0e 94 71 cb 	call	0x196e2	; 0x196e2 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba86:	ce 01       	movw	r24, r28
   1ba88:	0e 94 08 ca 	call	0x19410	; 0x19410 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1ba8c:	ed b7       	in	r30, 0x3d	; 61
   1ba8e:	fe b7       	in	r31, 0x3e	; 62
   1ba90:	15 83       	std	Z+5, r17	; 0x05
   1ba92:	04 83       	std	Z+4, r16	; 0x04
   1ba94:	8d e4       	ldi	r24, 0x4D	; 77
   1ba96:	93 e3       	ldi	r25, 0x33	; 51
   1ba98:	a0 e0       	ldi	r26, 0x00	; 0
   1ba9a:	81 83       	std	Z+1, r24	; 0x01
   1ba9c:	92 83       	std	Z+2, r25	; 0x02
   1ba9e:	a3 83       	std	Z+3, r26	; 0x03
   1baa0:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

    return(1);
   1baa4:	81 e0       	ldi	r24, 0x01	; 1
   1baa6:	90 e0       	ldi	r25, 0x00	; 0
   1baa8:	02 c0       	rjmp	.+4      	; 0x1baae <lif_del_file+0x120>
        printf("LIF image:[%s], LIF name:[%s]\n",
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1baaa:	8f ef       	ldi	r24, 0xFF	; 255
   1baac:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1baae:	cd b7       	in	r28, 0x3d	; 61
   1bab0:	de b7       	in	r29, 0x3e	; 62
   1bab2:	27 96       	adiw	r28, 0x07	; 7
   1bab4:	e6 e0       	ldi	r30, 0x06	; 6
   1bab6:	0c 94 8e e6 	jmp	0x1cd1c	; 0x1cd1c <__epilogue_restores__+0x18>

0001baba <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1baba:	a7 e0       	ldi	r26, 0x07	; 7
   1babc:	b0 e0       	ldi	r27, 0x00	; 0
   1babe:	e3 e6       	ldi	r30, 0x63	; 99
   1bac0:	fd ed       	ldi	r31, 0xDD	; 221
   1bac2:	0c 94 6e e6 	jmp	0x1ccdc	; 0x1ccdc <__prologue_saves__+0x10>
   1bac6:	6c 01       	movw	r12, r24
   1bac8:	8b 01       	movw	r16, r22
   1baca:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1bacc:	fc 01       	movw	r30, r24
   1bace:	80 81       	ld	r24, Z
   1bad0:	81 11       	cpse	r24, r1
   1bad2:	03 c0       	rjmp	.+6      	; 0x1bada <lif_rename_file+0x20>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1bad4:	85 e2       	ldi	r24, 0x25	; 37
   1bad6:	93 e3       	ldi	r25, 0x33	; 51
   1bad8:	06 c0       	rjmp	.+12     	; 0x1bae6 <lif_rename_file+0x2c>
        return(-1);
    }
    if(!*oldlifname)
   1bada:	fb 01       	movw	r30, r22
   1badc:	80 81       	ld	r24, Z
   1bade:	81 11       	cpse	r24, r1
   1bae0:	0b c0       	rjmp	.+22     	; 0x1baf8 <lif_rename_file+0x3e>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1bae2:	8e ef       	ldi	r24, 0xFE	; 254
   1bae4:	92 e3       	ldi	r25, 0x32	; 50
   1bae6:	a0 e0       	ldi	r26, 0x00	; 0
   1bae8:	ed b7       	in	r30, 0x3d	; 61
   1baea:	fe b7       	in	r31, 0x3e	; 62
   1baec:	81 83       	std	Z+1, r24	; 0x01
   1baee:	92 83       	std	Z+2, r25	; 0x02
   1baf0:	a3 83       	std	Z+3, r26	; 0x03
   1baf2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1baf6:	58 c0       	rjmp	.+176    	; 0x1bba8 <lif_rename_file+0xee>
        return(-1);
    }
    if(!*newlifname)
   1baf8:	fa 01       	movw	r30, r20
   1bafa:	80 81       	ld	r24, Z
   1bafc:	81 11       	cpse	r24, r1
   1bafe:	03 c0       	rjmp	.+6      	; 0x1bb06 <lif_rename_file+0x4c>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1bb00:	87 ed       	ldi	r24, 0xD7	; 215
   1bb02:	92 e3       	ldi	r25, 0x32	; 50
   1bb04:	f0 cf       	rjmp	.-32     	; 0x1bae6 <lif_rename_file+0x2c>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1bb06:	ca 01       	movw	r24, r20
   1bb08:	0e 94 57 c2 	call	0x184ae	; 0x184ae <lif_checkname>
   1bb0c:	89 2b       	or	r24, r25
   1bb0e:	19 f4       	brne	.+6      	; 0x1bb16 <lif_rename_file+0x5c>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1bb10:	81 ea       	ldi	r24, 0xA1	; 161
   1bb12:	92 e3       	ldi	r25, 0x32	; 50
   1bb14:	e8 cf       	rjmp	.-48     	; 0x1bae6 <lif_rename_file+0x2c>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1bb16:	66 ef       	ldi	r22, 0xF6	; 246
   1bb18:	78 e0       	ldi	r23, 0x08	; 8
   1bb1a:	c6 01       	movw	r24, r12
   1bb1c:	0e 94 c5 d0 	call	0x1a18a	; 0x1a18a <lif_open_volume>
   1bb20:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1bb22:	00 97       	sbiw	r24, 0x00	; 0
   1bb24:	09 f4       	brne	.+2      	; 0x1bb28 <lif_rename_file+0x6e>
   1bb26:	40 c0       	rjmp	.+128    	; 0x1bba8 <lif_rename_file+0xee>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, oldlifname);
   1bb28:	b8 01       	movw	r22, r16
   1bb2a:	0e 94 9a d3 	call	0x1a734	; 0x1a734 <lif_find_file>
   1bb2e:	5c 01       	movw	r10, r24
    if(index == -1)
   1bb30:	01 96       	adiw	r24, 0x01	; 1
   1bb32:	a1 f4       	brne	.+40     	; 0x1bb5c <lif_rename_file+0xa2>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1bb34:	ed b7       	in	r30, 0x3d	; 61
   1bb36:	fe b7       	in	r31, 0x3e	; 62
   1bb38:	17 83       	std	Z+7, r17	; 0x07
   1bb3a:	06 83       	std	Z+6, r16	; 0x06
   1bb3c:	d5 82       	std	Z+5, r13	; 0x05
   1bb3e:	c4 82       	std	Z+4, r12	; 0x04
   1bb40:	88 e7       	ldi	r24, 0x78	; 120
   1bb42:	92 e3       	ldi	r25, 0x32	; 50
   1bb44:	a0 e0       	ldi	r26, 0x00	; 0
   1bb46:	81 83       	std	Z+1, r24	; 0x01
   1bb48:	92 83       	std	Z+2, r25	; 0x02
   1bb4a:	a3 83       	std	Z+3, r26	; 0x03
   1bb4c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb50:	ce 01       	movw	r24, r28
   1bb52:	0e 94 08 ca 	call	0x19410	; 0x19410 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1bb56:	80 e0       	ldi	r24, 0x00	; 0
   1bb58:	90 e0       	ldi	r25, 0x00	; 0
   1bb5a:	28 c0       	rjmp	.+80     	; 0x1bbac <lif_rename_file+0xf2>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1bb5c:	4a e0       	ldi	r20, 0x0A	; 10
   1bb5e:	50 e0       	ldi	r21, 0x00	; 0
   1bb60:	b7 01       	movw	r22, r14
   1bb62:	ce 01       	movw	r24, r28
   1bb64:	81 5b       	subi	r24, 0xB1	; 177
   1bb66:	9f 4f       	sbci	r25, 0xFF	; 255
   1bb68:	0e 94 91 c2 	call	0x18522	; 0x18522 <lif_fixname>

// re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1bb6c:	b5 01       	movw	r22, r10
   1bb6e:	ce 01       	movw	r24, r28
   1bb70:	0e 94 fd ca 	call	0x195fa	; 0x195fa <lif_writedirindex>
   1bb74:	89 2b       	or	r24, r25
   1bb76:	21 f4       	brne	.+8      	; 0x1bb80 <lif_rename_file+0xc6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb78:	ce 01       	movw	r24, r28
   1bb7a:	0e 94 08 ca 	call	0x19410	; 0x19410 <lif_close_volume>
   1bb7e:	14 c0       	rjmp	.+40     	; 0x1bba8 <lif_rename_file+0xee>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1bb80:	ed b7       	in	r30, 0x3d	; 61
   1bb82:	fe b7       	in	r31, 0x3e	; 62
   1bb84:	f7 82       	std	Z+7, r15	; 0x07
   1bb86:	e6 82       	std	Z+6, r14	; 0x06
   1bb88:	15 83       	std	Z+5, r17	; 0x05
   1bb8a:	04 83       	std	Z+4, r16	; 0x04
   1bb8c:	81 e6       	ldi	r24, 0x61	; 97
   1bb8e:	92 e3       	ldi	r25, 0x32	; 50
   1bb90:	a0 e0       	ldi	r26, 0x00	; 0
   1bb92:	81 83       	std	Z+1, r24	; 0x01
   1bb94:	92 83       	std	Z+2, r25	; 0x02
   1bb96:	a3 83       	std	Z+3, r26	; 0x03
   1bb98:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb9c:	ce 01       	movw	r24, r28
   1bb9e:	0e 94 08 ca 	call	0x19410	; 0x19410 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1bba2:	81 e0       	ldi	r24, 0x01	; 1
   1bba4:	90 e0       	ldi	r25, 0x00	; 0
   1bba6:	02 c0       	rjmp	.+4      	; 0x1bbac <lif_rename_file+0xf2>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1bba8:	8f ef       	ldi	r24, 0xFF	; 255
   1bbaa:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1bbac:	cd b7       	in	r28, 0x3d	; 61
   1bbae:	de b7       	in	r29, 0x3e	; 62
   1bbb0:	27 96       	adiw	r28, 0x07	; 7
   1bbb2:	ea e0       	ldi	r30, 0x0A	; 10
   1bbb4:	0c 94 8a e6 	jmp	0x1cd14	; 0x1cd14 <__epilogue_restores__+0x10>

0001bbb8 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1bbb8:	4f 92       	push	r4
   1bbba:	5f 92       	push	r5
   1bbbc:	6f 92       	push	r6
   1bbbe:	7f 92       	push	r7
   1bbc0:	af 92       	push	r10
   1bbc2:	bf 92       	push	r11
   1bbc4:	cf 92       	push	r12
   1bbc6:	df 92       	push	r13
   1bbc8:	ef 92       	push	r14
   1bbca:	ff 92       	push	r15
   1bbcc:	0f 93       	push	r16
   1bbce:	1f 93       	push	r17
   1bbd0:	cf 93       	push	r28
   1bbd2:	df 93       	push	r29
   1bbd4:	ad b7       	in	r26, 0x3d	; 61
   1bbd6:	be b7       	in	r27, 0x3e	; 62
   1bbd8:	17 97       	sbiw	r26, 0x07	; 7
   1bbda:	0f b6       	in	r0, 0x3f	; 63
   1bbdc:	f8 94       	cli
   1bbde:	be bf       	out	0x3e, r27	; 62
   1bbe0:	0f be       	out	0x3f, r0	; 63
   1bbe2:	ad bf       	out	0x3d, r26	; 61
   1bbe4:	27 01       	movw	r4, r14
   1bbe6:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1bbe8:	dc 01       	movw	r26, r24
   1bbea:	ec 91       	ld	r30, X
   1bbec:	e1 11       	cpse	r30, r1
   1bbee:	03 c0       	rjmp	.+6      	; 0x1bbf6 <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1bbf0:	88 e3       	ldi	r24, 0x38	; 56
   1bbf2:	92 e3       	ldi	r25, 0x32	; 50
   1bbf4:	16 c0       	rjmp	.+44     	; 0x1bc22 <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1bbf6:	db 01       	movw	r26, r22
   1bbf8:	ec 91       	ld	r30, X
   1bbfa:	e1 11       	cpse	r30, r1
   1bbfc:	03 c0       	rjmp	.+6      	; 0x1bc04 <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1bbfe:	83 e1       	ldi	r24, 0x13	; 19
   1bc00:	92 e3       	ldi	r25, 0x32	; 50
   1bc02:	0f c0       	rjmp	.+30     	; 0x1bc22 <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1bc04:	21 15       	cp	r18, r1
   1bc06:	31 05       	cpc	r19, r1
   1bc08:	41 05       	cpc	r20, r1
   1bc0a:	51 05       	cpc	r21, r1
   1bc0c:	19 f4       	brne	.+6      	; 0x1bc14 <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1bc0e:	80 ef       	ldi	r24, 0xF0	; 240
   1bc10:	91 e3       	ldi	r25, 0x31	; 49
   1bc12:	07 c0       	rjmp	.+14     	; 0x1bc22 <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1bc14:	e1 14       	cp	r14, r1
   1bc16:	f1 04       	cpc	r15, r1
   1bc18:	01 05       	cpc	r16, r1
   1bc1a:	11 05       	cpc	r17, r1
   1bc1c:	59 f4       	brne	.+22     	; 0x1bc34 <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1bc1e:	80 ed       	ldi	r24, 0xD0	; 208
   1bc20:	91 e3       	ldi	r25, 0x31	; 49
   1bc22:	a0 e0       	ldi	r26, 0x00	; 0
   1bc24:	ed b7       	in	r30, 0x3d	; 61
   1bc26:	fe b7       	in	r31, 0x3e	; 62
   1bc28:	81 83       	std	Z+1, r24	; 0x01
   1bc2a:	92 83       	std	Z+2, r25	; 0x02
   1bc2c:	a3 83       	std	Z+3, r26	; 0x03
   1bc2e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1bc32:	2b c0       	rjmp	.+86     	; 0x1bc8a <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1bc34:	67 01       	movw	r12, r14
   1bc36:	78 01       	movw	r14, r16
   1bc38:	f2 e0       	ldi	r31, 0x02	; 2
   1bc3a:	cf 1a       	sub	r12, r31
   1bc3c:	d1 08       	sbc	r13, r1
   1bc3e:	e1 08       	sbc	r14, r1
   1bc40:	f1 08       	sbc	r15, r1
   1bc42:	56 01       	movw	r10, r12
   1bc44:	67 01       	movw	r12, r14
   1bc46:	a2 1a       	sub	r10, r18
   1bc48:	b3 0a       	sbc	r11, r19
   1bc4a:	c4 0a       	sbc	r12, r20
   1bc4c:	d5 0a       	sbc	r13, r21
   1bc4e:	79 01       	movw	r14, r18
   1bc50:	8a 01       	movw	r16, r20
   1bc52:	22 e0       	ldi	r18, 0x02	; 2
   1bc54:	30 e0       	ldi	r19, 0x00	; 0
   1bc56:	40 e0       	ldi	r20, 0x00	; 0
   1bc58:	50 e0       	ldi	r21, 0x00	; 0
   1bc5a:	0e 94 7b cc 	call	0x198f6	; 0x198f6 <lif_create_volume>
    if(LIF == NULL)
   1bc5e:	00 97       	sbiw	r24, 0x00	; 0
   1bc60:	a1 f0       	breq	.+40     	; 0x1bc8a <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1bc62:	0e 94 08 ca 	call	0x19410	; 0x19410 <lif_close_volume>

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
   1bc66:	82 01       	movw	r16, r4
   1bc68:	d6 2d       	mov	r29, r6
   1bc6a:	c7 2d       	mov	r28, r7
   1bc6c:	ed b7       	in	r30, 0x3d	; 61
   1bc6e:	fe b7       	in	r31, 0x3e	; 62
   1bc70:	44 82       	std	Z+4, r4	; 0x04
   1bc72:	15 83       	std	Z+5, r17	; 0x05
   1bc74:	66 82       	std	Z+6, r6	; 0x06
   1bc76:	77 82       	std	Z+7, r7	; 0x07
   1bc78:	80 eb       	ldi	r24, 0xB0	; 176
   1bc7a:	91 e3       	ldi	r25, 0x31	; 49
   1bc7c:	a0 e0       	ldi	r26, 0x00	; 0
   1bc7e:	81 83       	std	Z+1, r24	; 0x01
   1bc80:	92 83       	std	Z+2, r25	; 0x02
   1bc82:	a3 83       	std	Z+3, r26	; 0x03
   1bc84:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    return(end);
   1bc88:	04 c0       	rjmp	.+8      	; 0x1bc92 <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1bc8a:	0f ef       	ldi	r16, 0xFF	; 255
   1bc8c:	1f ef       	ldi	r17, 0xFF	; 255
   1bc8e:	df ef       	ldi	r29, 0xFF	; 255
   1bc90:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
    return(end);
}
   1bc92:	b8 01       	movw	r22, r16
   1bc94:	8d 2f       	mov	r24, r29
   1bc96:	9c 2f       	mov	r25, r28
   1bc98:	ad b7       	in	r26, 0x3d	; 61
   1bc9a:	be b7       	in	r27, 0x3e	; 62
   1bc9c:	17 96       	adiw	r26, 0x07	; 7
   1bc9e:	0f b6       	in	r0, 0x3f	; 63
   1bca0:	f8 94       	cli
   1bca2:	be bf       	out	0x3e, r27	; 62
   1bca4:	0f be       	out	0x3f, r0	; 63
   1bca6:	ad bf       	out	0x3d, r26	; 61
   1bca8:	df 91       	pop	r29
   1bcaa:	cf 91       	pop	r28
   1bcac:	1f 91       	pop	r17
   1bcae:	0f 91       	pop	r16
   1bcb0:	ff 90       	pop	r15
   1bcb2:	ef 90       	pop	r14
   1bcb4:	df 90       	pop	r13
   1bcb6:	cf 90       	pop	r12
   1bcb8:	bf 90       	pop	r11
   1bcba:	af 90       	pop	r10
   1bcbc:	7f 90       	pop	r7
   1bcbe:	6f 90       	pop	r6
   1bcc0:	5f 90       	pop	r5
   1bcc2:	4f 90       	pop	r4
   1bcc4:	08 95       	ret

0001bcc6 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1bcc6:	a5 e0       	ldi	r26, 0x05	; 5
   1bcc8:	b0 e0       	ldi	r27, 0x00	; 0
   1bcca:	e9 e6       	ldi	r30, 0x69	; 105
   1bccc:	fe ed       	ldi	r31, 0xDE	; 222
   1bcce:	0c 94 6c e6 	jmp	0x1ccd8	; 0x1ccd8 <__prologue_saves__+0xc>
        printf("%d:%s\n", i, argv[i]);
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
   1bcd2:	82 30       	cpi	r24, 0x02	; 2
   1bcd4:	91 05       	cpc	r25, r1
   1bcd6:	1c f4       	brge	.+6      	; 0x1bcde <lif_tests+0x18>
        return (0);
   1bcd8:	80 e0       	ldi	r24, 0x00	; 0
   1bcda:	90 e0       	ldi	r25, 0x00	; 0
   1bcdc:	8f c1       	rjmp	.+798    	; 0x1bffc <lif_tests+0x336>

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1bcde:	fb 01       	movw	r30, r22
   1bce0:	e2 80       	ldd	r14, Z+2	; 0x02
   1bce2:	f3 80       	ldd	r15, Z+3	; 0x03

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
   1bce4:	e1 14       	cp	r14, r1
   1bce6:	f1 04       	cpc	r15, r1
   1bce8:	09 f4       	brne	.+2      	; 0x1bcec <lif_tests+0x26>
   1bcea:	86 c1       	rjmp	.+780    	; 0x1bff8 <lif_tests+0x332>
   1bcec:	f7 01       	movw	r30, r14
   1bcee:	20 81       	ld	r18, Z
   1bcf0:	22 23       	and	r18, r18
   1bcf2:	09 f4       	brne	.+2      	; 0x1bcf6 <lif_tests+0x30>
   1bcf4:	81 c1       	rjmp	.+770    	; 0x1bff8 <lif_tests+0x332>
   1bcf6:	8b 01       	movw	r16, r22
   1bcf8:	6c 01       	movw	r12, r24
        return(1);


	if(MATCHI_LEN(argv[0],"lif"))
   1bcfa:	68 ea       	ldi	r22, 0xA8	; 168
   1bcfc:	76 e1       	ldi	r23, 0x16	; 22
   1bcfe:	f8 01       	movw	r30, r16
   1bd00:	80 81       	ld	r24, Z
   1bd02:	91 81       	ldd	r25, Z+1	; 0x01
   1bd04:	0e 94 30 32 	call	0x6460	; 0x6460 <MATCHI_LEN>
   1bd08:	89 2b       	or	r24, r25
   1bd0a:	d1 f0       	breq	.+52     	; 0x1bd40 <lif_tests+0x7a>
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1bd0c:	62 e6       	ldi	r22, 0x62	; 98
   1bd0e:	76 e1       	ldi	r23, 0x16	; 22
   1bd10:	c7 01       	movw	r24, r14
   1bd12:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   1bd16:	89 2b       	or	r24, r25
   1bd18:	29 f0       	breq	.+10     	; 0x1bd24 <lif_tests+0x5e>
		{
			lif_help(1);
   1bd1a:	81 e0       	ldi	r24, 0x01	; 1
   1bd1c:	90 e0       	ldi	r25, 0x00	; 0
   1bd1e:	0e 94 2d c0 	call	0x1805a	; 0x1805a <lif_help>
   1bd22:	6a c1       	rjmp	.+724    	; 0x1bff8 <lif_tests+0x332>
        return(1);


	if(MATCHI_LEN(argv[0],"lif"))
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1bd24:	61 e6       	ldi	r22, 0x61	; 97
   1bd26:	76 e1       	ldi	r23, 0x16	; 22
   1bd28:	c7 01       	movw	r24, r14
   1bd2a:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   1bd2e:	89 2b       	or	r24, r25
   1bd30:	a1 f7       	brne	.-24     	; 0x1bd1a <lif_tests+0x54>
   1bd32:	67 e6       	ldi	r22, 0x67	; 103
   1bd34:	76 e1       	ldi	r23, 0x16	; 22
   1bd36:	c7 01       	movw	r24, r14
   1bd38:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   1bd3c:	89 2b       	or	r24, r25
   1bd3e:	69 f7       	brne	.-38     	; 0x1bd1a <lif_tests+0x54>
		}
	}

// Turn one debugging
// in the future we can add tests for specific messages
	debuglevel &= ~0x400;
   1bd40:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1bd44:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1bd48:	9b 7f       	andi	r25, 0xFB	; 251
   1bd4a:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1bd4e:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1bd52:	96 01       	movw	r18, r12
   1bd54:	42 e0       	ldi	r20, 0x02	; 2
   1bd56:	50 e0       	ldi	r21, 0x00	; 0
   1bd58:	6a e6       	ldi	r22, 0x6A	; 106
   1bd5a:	76 e1       	ldi	r23, 0x16	; 22
   1bd5c:	c7 01       	movw	r24, r14
   1bd5e:	0e 94 06 32 	call	0x640c	; 0x640c <MATCHARGS>
   1bd62:	89 2b       	or	r24, r25
   1bd64:	79 f0       	breq	.+30     	; 0x1bd84 <lif_tests+0xbe>
    {
        debuglevel |= 0x400;
   1bd66:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1bd6a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1bd6e:	94 60       	ori	r25, 0x04	; 4
   1bd70:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1bd74:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
        ptr = argv[ind++];
   1bd78:	f8 01       	movw	r30, r16
   1bd7a:	e4 80       	ldd	r14, Z+4	; 0x04
   1bd7c:	f5 80       	ldd	r15, Z+5	; 0x05
   1bd7e:	c3 e0       	ldi	r28, 0x03	; 3
   1bd80:	d0 e0       	ldi	r29, 0x00	; 0
   1bd82:	02 c0       	rjmp	.+4      	; 0x1bd88 <lif_tests+0xc2>
    if(argc < 2)
        return (0);

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1bd84:	c2 e0       	ldi	r28, 0x02	; 2
   1bd86:	d0 e0       	ldi	r29, 0x00	; 0
    {
        debuglevel |= 0x400;
        ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1bd88:	5e 01       	movw	r10, r28
   1bd8a:	f3 e0       	ldi	r31, 0x03	; 3
   1bd8c:	af 0e       	add	r10, r31
   1bd8e:	b1 1c       	adc	r11, r1
   1bd90:	96 01       	movw	r18, r12
   1bd92:	a5 01       	movw	r20, r10
   1bd94:	6d e6       	ldi	r22, 0x6D	; 109
   1bd96:	76 e1       	ldi	r23, 0x16	; 22
   1bd98:	c7 01       	movw	r24, r14
   1bd9a:	0e 94 06 32 	call	0x640c	; 0x640c <MATCHARGS>
   1bd9e:	89 2b       	or	r24, r25
   1bda0:	61 f0       	breq	.+24     	; 0x1bdba <lif_tests+0xf4>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1bda2:	cc 0f       	add	r28, r28
   1bda4:	dd 1f       	adc	r29, r29
   1bda6:	c0 0f       	add	r28, r16
   1bda8:	d1 1f       	adc	r29, r17
   1bdaa:	4c 81       	ldd	r20, Y+4	; 0x04
   1bdac:	5d 81       	ldd	r21, Y+5	; 0x05
   1bdae:	6a 81       	ldd	r22, Y+2	; 0x02
   1bdb0:	7b 81       	ldd	r23, Y+3	; 0x03
   1bdb2:	88 81       	ld	r24, Y
   1bdb4:	99 81       	ldd	r25, Y+1	; 0x01
   1bdb6:	62 dc       	rcall	.-1852   	; 0x1b67c <lif_add_lif_file>
   1bdb8:	1f c1       	rjmp	.+574    	; 0x1bff8 <lif_tests+0x332>

        return(1);
    }

    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1bdba:	96 01       	movw	r18, r12
   1bdbc:	a5 01       	movw	r20, r10
   1bdbe:	64 e7       	ldi	r22, 0x74	; 116
   1bdc0:	76 e1       	ldi	r23, 0x16	; 22
   1bdc2:	c7 01       	movw	r24, r14
   1bdc4:	0e 94 06 32 	call	0x640c	; 0x640c <MATCHARGS>
   1bdc8:	89 2b       	or	r24, r25
   1bdca:	69 f0       	breq	.+26     	; 0x1bde6 <lif_tests+0x120>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1bdcc:	cc 0f       	add	r28, r28
   1bdce:	dd 1f       	adc	r29, r29
   1bdd0:	c0 0f       	add	r28, r16
   1bdd2:	d1 1f       	adc	r29, r17
   1bdd4:	4c 81       	ldd	r20, Y+4	; 0x04
   1bdd6:	5d 81       	ldd	r21, Y+5	; 0x05
   1bdd8:	6a 81       	ldd	r22, Y+2	; 0x02
   1bdda:	7b 81       	ldd	r23, Y+3	; 0x03
   1bddc:	88 81       	ld	r24, Y
   1bdde:	99 81       	ldd	r25, Y+1	; 0x01
   1bde0:	0e 94 1b d6 	call	0x1ac36	; 0x1ac36 <lif_add_ascii_file_as_e010>
   1bde4:	09 c1       	rjmp	.+530    	; 0x1bff8 <lif_tests+0x332>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1bde6:	96 01       	movw	r18, r12
   1bde8:	a5 01       	movw	r20, r10
   1bdea:	68 e7       	ldi	r22, 0x78	; 120
   1bdec:	76 e1       	ldi	r23, 0x16	; 22
   1bdee:	c7 01       	movw	r24, r14
   1bdf0:	0e 94 06 32 	call	0x640c	; 0x640c <MATCHARGS>
   1bdf4:	89 2b       	or	r24, r25
   1bdf6:	09 f4       	brne	.+2      	; 0x1bdfa <lif_tests+0x134>
   1bdf8:	42 c0       	rjmp	.+132    	; 0x1be7e <lif_tests+0x1b8>
    {
///@brief format LIF image
        long dir,sectors;
        char *name = argv[ind];
   1bdfa:	ce 01       	movw	r24, r28
   1bdfc:	88 0f       	add	r24, r24
   1bdfe:	99 1f       	adc	r25, r25
   1be00:	e8 01       	movw	r28, r16
   1be02:	c8 0f       	add	r28, r24
   1be04:	d9 1f       	adc	r29, r25
   1be06:	c8 80       	ld	r12, Y
   1be08:	d9 80       	ldd	r13, Y+1	; 0x01
        char *label = argv[ind+1];
   1be0a:	aa 80       	ldd	r10, Y+2	; 0x02
   1be0c:	bb 80       	ldd	r11, Y+3	; 0x03
        char *model = argv[ind+2];
   1be0e:	0c 80       	ldd	r0, Y+4	; 0x04
   1be10:	dd 81       	ldd	r29, Y+5	; 0x05
   1be12:	c0 2d       	mov	r28, r0
        if( MATCHI_LEN(model,"hp"))
   1be14:	63 e8       	ldi	r22, 0x83	; 131
   1be16:	76 e1       	ldi	r23, 0x16	; 22
   1be18:	ce 01       	movw	r24, r28
   1be1a:	0e 94 30 32 	call	0x6460	; 0x6460 <MATCHI_LEN>
   1be1e:	89 2b       	or	r24, r25
   1be20:	09 f0       	breq	.+2      	; 0x1be24 <lif_tests+0x15e>
            model +=2;
   1be22:	22 96       	adiw	r28, 0x02	; 2
        if(hpdir_find_drive(model,0, 0))
   1be24:	40 e0       	ldi	r20, 0x00	; 0
   1be26:	50 e0       	ldi	r21, 0x00	; 0
   1be28:	60 e0       	ldi	r22, 0x00	; 0
   1be2a:	70 e0       	ldi	r23, 0x00	; 0
   1be2c:	ce 01       	movw	r24, r28
   1be2e:	0e 94 70 a3 	call	0x146e0	; 0x146e0 <hpdir_find_drive>
   1be32:	89 2b       	or	r24, r25
   1be34:	b9 f0       	breq	.+46     	; 0x1be64 <lif_tests+0x19e>
        {
            dir = lif_dir_count(hpdir.BLOCKS);
   1be36:	60 91 1a 20 	lds	r22, 0x201A	; 0x80201a <hpdir+0xac>
   1be3a:	70 91 1b 20 	lds	r23, 0x201B	; 0x80201b <hpdir+0xad>
   1be3e:	80 91 1c 20 	lds	r24, 0x201C	; 0x80201c <hpdir+0xae>
   1be42:	90 91 1d 20 	lds	r25, 0x201D	; 0x80201d <hpdir+0xaf>
   1be46:	0e 94 53 a3 	call	0x146a6	; 0x146a6 <lif_dir_count>
   1be4a:	9b 01       	movw	r18, r22
   1be4c:	ac 01       	movw	r20, r24
            sectors = hpdir.BLOCKS;
			// NOTE: we could grab the directory size for non 0 entries in the hpdir.ini file - I use a computed value which is also fine
            lif_create_image(name, label, dir, sectors);
   1be4e:	e0 90 1a 20 	lds	r14, 0x201A	; 0x80201a <hpdir+0xac>
   1be52:	f0 90 1b 20 	lds	r15, 0x201B	; 0x80201b <hpdir+0xad>
   1be56:	00 91 1c 20 	lds	r16, 0x201C	; 0x80201c <hpdir+0xae>
   1be5a:	10 91 1d 20 	lds	r17, 0x201D	; 0x80201d <hpdir+0xaf>
   1be5e:	b5 01       	movw	r22, r10
   1be60:	c6 01       	movw	r24, r12
   1be62:	2e c0       	rjmp	.+92     	; 0x1bec0 <lif_tests+0x1fa>
            return(1);
        }
        printf("Disk: %s not found in hpdir.ini\n", model);
   1be64:	ed b7       	in	r30, 0x3d	; 61
   1be66:	fe b7       	in	r31, 0x3e	; 62
   1be68:	d5 83       	std	Z+5, r29	; 0x05
   1be6a:	c4 83       	std	Z+4, r28	; 0x04
   1be6c:	81 e0       	ldi	r24, 0x01	; 1
   1be6e:	94 e4       	ldi	r25, 0x44	; 68
   1be70:	a0 e0       	ldi	r26, 0x00	; 0
   1be72:	81 83       	std	Z+1, r24	; 0x01
   1be74:	92 83       	std	Z+2, r25	; 0x02
   1be76:	a3 83       	std	Z+3, r26	; 0x03
   1be78:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1be7c:	bd c0       	rjmp	.+378    	; 0x1bff8 <lif_tests+0x332>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1be7e:	96 01       	movw	r18, r12
   1be80:	ae 01       	movw	r20, r28
   1be82:	4c 5f       	subi	r20, 0xFC	; 252
   1be84:	5f 4f       	sbci	r21, 0xFF	; 255
   1be86:	66 e8       	ldi	r22, 0x86	; 134
   1be88:	76 e1       	ldi	r23, 0x16	; 22
   1be8a:	c7 01       	movw	r24, r14
   1be8c:	0e 94 06 32 	call	0x640c	; 0x640c <MATCHARGS>
   1be90:	89 2b       	or	r24, r25
   1be92:	c1 f0       	breq	.+48     	; 0x1bec4 <lif_tests+0x1fe>
    {
///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1be94:	cc 0f       	add	r28, r28
   1be96:	dd 1f       	adc	r29, r29
   1be98:	c0 0f       	add	r28, r16
   1be9a:	d1 1f       	adc	r29, r17
   1be9c:	8c 81       	ldd	r24, Y+4	; 0x04
   1be9e:	9d 81       	ldd	r25, Y+5	; 0x05
   1bea0:	0e 94 45 47 	call	0x8e8a	; 0x8e8a <atol>
   1bea4:	4b 01       	movw	r8, r22
   1bea6:	5c 01       	movw	r10, r24
   1bea8:	8e 81       	ldd	r24, Y+6	; 0x06
   1beaa:	9f 81       	ldd	r25, Y+7	; 0x07
   1beac:	0e 94 45 47 	call	0x8e8a	; 0x8e8a <atol>
   1beb0:	7b 01       	movw	r14, r22
   1beb2:	8c 01       	movw	r16, r24
   1beb4:	6a 81       	ldd	r22, Y+2	; 0x02
   1beb6:	7b 81       	ldd	r23, Y+3	; 0x03
   1beb8:	a5 01       	movw	r20, r10
   1beba:	94 01       	movw	r18, r8
   1bebc:	88 81       	ld	r24, Y
   1bebe:	99 81       	ldd	r25, Y+1	; 0x01
   1bec0:	7b de       	rcall	.-778    	; 0x1bbb8 <lif_create_image>
   1bec2:	9a c0       	rjmp	.+308    	; 0x1bff8 <lif_tests+0x332>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1bec4:	96 01       	movw	r18, r12
   1bec6:	ae 01       	movw	r20, r28
   1bec8:	4e 5f       	subi	r20, 0xFE	; 254
   1beca:	5f 4f       	sbci	r21, 0xFF	; 255
   1becc:	6d e8       	ldi	r22, 0x8D	; 141
   1bece:	76 e1       	ldi	r23, 0x16	; 22
   1bed0:	c7 01       	movw	r24, r14
   1bed2:	0e 94 06 32 	call	0x640c	; 0x640c <MATCHARGS>
   1bed6:	89 2b       	or	r24, r25
   1bed8:	51 f0       	breq	.+20     	; 0x1beee <lif_tests+0x228>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1beda:	cc 0f       	add	r28, r28
   1bedc:	dd 1f       	adc	r29, r29
   1bede:	c0 0f       	add	r28, r16
   1bee0:	d1 1f       	adc	r29, r17
   1bee2:	6a 81       	ldd	r22, Y+2	; 0x02
   1bee4:	7b 81       	ldd	r23, Y+3	; 0x03
   1bee6:	88 81       	ld	r24, Y
   1bee8:	99 81       	ldd	r25, Y+1	; 0x01
   1beea:	51 dd       	rcall	.-1374   	; 0x1b98e <lif_del_file>
   1beec:	85 c0       	rjmp	.+266    	; 0x1bff8 <lif_tests+0x332>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1beee:	96 01       	movw	r18, r12
   1bef0:	ae 01       	movw	r20, r28
   1bef2:	4f 5f       	subi	r20, 0xFF	; 255
   1bef4:	5f 4f       	sbci	r21, 0xFF	; 255
   1bef6:	66 ec       	ldi	r22, 0xC6	; 198
   1bef8:	7b e0       	ldi	r23, 0x0B	; 11
   1befa:	c7 01       	movw	r24, r14
   1befc:	0e 94 06 32 	call	0x640c	; 0x640c <MATCHARGS>
   1bf00:	89 2b       	or	r24, r25
   1bf02:	49 f0       	breq	.+18     	; 0x1bf16 <lif_tests+0x250>
    {
        lif_dir(argv[ind]);
   1bf04:	cc 0f       	add	r28, r28
   1bf06:	dd 1f       	adc	r29, r29
   1bf08:	c0 0f       	add	r28, r16
   1bf0a:	d1 1f       	adc	r29, r17
   1bf0c:	88 81       	ld	r24, Y
   1bf0e:	99 81       	ldd	r25, Y+1	; 0x01
   1bf10:	0e 94 c5 d1 	call	0x1a38a	; 0x1a38a <lif_dir>
   1bf14:	71 c0       	rjmp	.+226    	; 0x1bff8 <lif_tests+0x332>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1bf16:	96 01       	movw	r18, r12
   1bf18:	a5 01       	movw	r20, r10
   1bf1a:	61 e9       	ldi	r22, 0x91	; 145
   1bf1c:	76 e1       	ldi	r23, 0x16	; 22
   1bf1e:	c7 01       	movw	r24, r14
   1bf20:	0e 94 06 32 	call	0x640c	; 0x640c <MATCHARGS>
   1bf24:	89 2b       	or	r24, r25
   1bf26:	71 f0       	breq	.+28     	; 0x1bf44 <lif_tests+0x27e>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1bf28:	ce 01       	movw	r24, r28
   1bf2a:	88 0f       	add	r24, r24
   1bf2c:	99 1f       	adc	r25, r25
   1bf2e:	e8 01       	movw	r28, r16
   1bf30:	c8 0f       	add	r28, r24
   1bf32:	d9 1f       	adc	r29, r25
   1bf34:	4c 81       	ldd	r20, Y+4	; 0x04
   1bf36:	5d 81       	ldd	r21, Y+5	; 0x05
   1bf38:	6a 81       	ldd	r22, Y+2	; 0x02
   1bf3a:	7b 81       	ldd	r23, Y+3	; 0x03
   1bf3c:	88 81       	ld	r24, Y
   1bf3e:	99 81       	ldd	r25, Y+1	; 0x01
   1bf40:	65 da       	rcall	.-2870   	; 0x1b40c <lif_extract_lif_as_lif>
   1bf42:	5a c0       	rjmp	.+180    	; 0x1bff8 <lif_tests+0x332>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1bf44:	96 01       	movw	r18, r12
   1bf46:	a5 01       	movw	r20, r10
   1bf48:	6c e9       	ldi	r22, 0x9C	; 156
   1bf4a:	76 e1       	ldi	r23, 0x16	; 22
   1bf4c:	c7 01       	movw	r24, r14
   1bf4e:	0e 94 06 32 	call	0x640c	; 0x640c <MATCHARGS>
   1bf52:	89 2b       	or	r24, r25
   1bf54:	79 f0       	breq	.+30     	; 0x1bf74 <lif_tests+0x2ae>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1bf56:	ce 01       	movw	r24, r28
   1bf58:	88 0f       	add	r24, r24
   1bf5a:	99 1f       	adc	r25, r25
   1bf5c:	e8 01       	movw	r28, r16
   1bf5e:	c8 0f       	add	r28, r24
   1bf60:	d9 1f       	adc	r29, r25
   1bf62:	4c 81       	ldd	r20, Y+4	; 0x04
   1bf64:	5d 81       	ldd	r21, Y+5	; 0x05
   1bf66:	6a 81       	ldd	r22, Y+2	; 0x02
   1bf68:	7b 81       	ldd	r23, Y+3	; 0x03
   1bf6a:	88 81       	ld	r24, Y
   1bf6c:	99 81       	ldd	r25, Y+1	; 0x01
   1bf6e:	0e 94 57 d7 	call	0x1aeae	; 0x1aeae <lif_extract_e010_as_ascii>
   1bf72:	42 c0       	rjmp	.+132    	; 0x1bff8 <lif_tests+0x332>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1bf74:	96 01       	movw	r18, r12
   1bf76:	a5 01       	movw	r20, r10
   1bf78:	63 ed       	ldi	r22, 0xD3	; 211
   1bf7a:	7b e0       	ldi	r23, 0x0B	; 11
   1bf7c:	c7 01       	movw	r24, r14
   1bf7e:	0e 94 06 32 	call	0x640c	; 0x640c <MATCHARGS>
   1bf82:	89 2b       	or	r24, r25
   1bf84:	71 f0       	breq	.+28     	; 0x1bfa2 <lif_tests+0x2dc>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1bf86:	ce 01       	movw	r24, r28
   1bf88:	88 0f       	add	r24, r24
   1bf8a:	99 1f       	adc	r25, r25
   1bf8c:	e8 01       	movw	r28, r16
   1bf8e:	c8 0f       	add	r28, r24
   1bf90:	d9 1f       	adc	r29, r25
   1bf92:	4c 81       	ldd	r20, Y+4	; 0x04
   1bf94:	5d 81       	ldd	r21, Y+5	; 0x05
   1bf96:	6a 81       	ldd	r22, Y+2	; 0x02
   1bf98:	7b 81       	ldd	r23, Y+3	; 0x03
   1bf9a:	88 81       	ld	r24, Y
   1bf9c:	99 81       	ldd	r25, Y+1	; 0x01
   1bf9e:	8d dd       	rcall	.-1254   	; 0x1baba <lif_rename_file>
   1bfa0:	2b c0       	rjmp	.+86     	; 0x1bff8 <lif_tests+0x332>
        return(1);
    }

	if(MATCHI_LEN(argv[0],"td02lif"))
   1bfa2:	64 ea       	ldi	r22, 0xA4	; 164
   1bfa4:	76 e1       	ldi	r23, 0x16	; 22
   1bfa6:	f8 01       	movw	r30, r16
   1bfa8:	80 81       	ld	r24, Z
   1bfaa:	91 81       	ldd	r25, Z+1	; 0x01
   1bfac:	0e 94 30 32 	call	0x6460	; 0x6460 <MATCHI_LEN>
   1bfb0:	89 2b       	or	r24, r25
   1bfb2:	09 f4       	brne	.+2      	; 0x1bfb6 <lif_tests+0x2f0>
   1bfb4:	91 ce       	rjmp	.-734    	; 0x1bcd8 <lif_tests+0x12>
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1bfb6:	62 e6       	ldi	r22, 0x62	; 98
   1bfb8:	76 e1       	ldi	r23, 0x16	; 22
   1bfba:	c7 01       	movw	r24, r14
   1bfbc:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   1bfc0:	89 2b       	or	r24, r25
   1bfc2:	59 f0       	breq	.+22     	; 0x1bfda <lif_tests+0x314>
		{
#ifdef TELEDISK
			td0_help(1);
			return(1);
#else
		    printf("td02lif support not enabled\n");
   1bfc4:	84 ee       	ldi	r24, 0xE4	; 228
   1bfc6:	93 e4       	ldi	r25, 0x43	; 67
   1bfc8:	a0 e0       	ldi	r26, 0x00	; 0
   1bfca:	ed b7       	in	r30, 0x3d	; 61
   1bfcc:	fe b7       	in	r31, 0x3e	; 62
   1bfce:	81 83       	std	Z+1, r24	; 0x01
   1bfd0:	92 83       	std	Z+2, r25	; 0x02
   1bfd2:	a3 83       	std	Z+3, r26	; 0x03
   1bfd4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1bfd8:	0f c0       	rjmp	.+30     	; 0x1bff8 <lif_tests+0x332>
        return(1);
    }

	if(MATCHI_LEN(argv[0],"td02lif"))
	{
		if(MATCHI(ptr,"help") || MATCHI(ptr,"-help") || MATCHI(ptr,"-?") )
   1bfda:	61 e6       	ldi	r22, 0x61	; 97
   1bfdc:	76 e1       	ldi	r23, 0x16	; 22
   1bfde:	c7 01       	movw	r24, r14
   1bfe0:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   1bfe4:	89 2b       	or	r24, r25
   1bfe6:	71 f7       	brne	.-36     	; 0x1bfc4 <lif_tests+0x2fe>
   1bfe8:	67 e6       	ldi	r22, 0x67	; 103
   1bfea:	76 e1       	ldi	r23, 0x16	; 22
   1bfec:	c7 01       	movw	r24, r14
   1bfee:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   1bff2:	89 2b       	or	r24, r25
   1bff4:	39 f7       	brne	.-50     	; 0x1bfc4 <lif_tests+0x2fe>
   1bff6:	70 ce       	rjmp	.-800    	; 0x1bcd8 <lif_tests+0x12>

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);
   1bff8:	81 e0       	ldi	r24, 0x01	; 1
   1bffa:	90 e0       	ldi	r25, 0x00	; 0
        td02lif(argc,argv);
        return(1);
#endif
    }
    return(0);
}
   1bffc:	cd b7       	in	r28, 0x3d	; 61
   1bffe:	de b7       	in	r29, 0x3e	; 62
   1c000:	25 96       	adiw	r28, 0x05	; 5
   1c002:	ec e0       	ldi	r30, 0x0C	; 12
   1c004:	85 c6       	rjmp	.+3338   	; 0x1cd10 <__epilogue_restores__+0xc>

0001c006 <lcd_task>:
static int16_t lcd_display_time = 0;

///@brief LCD timer function called at 1000HZ
void lcd_task()
{
	++lcd_display_time;
   1c006:	80 91 e0 19 	lds	r24, 0x19E0	; 0x8019e0 <lcd_display_time>
   1c00a:	90 91 e1 19 	lds	r25, 0x19E1	; 0x8019e1 <lcd_display_time+0x1>
   1c00e:	01 96       	adiw	r24, 0x01	; 1
   1c010:	90 93 e1 19 	sts	0x19E1, r25	; 0x8019e1 <lcd_display_time+0x1>
   1c014:	80 93 e0 19 	sts	0x19E0, r24	; 0x8019e0 <lcd_display_time>
   1c018:	08 95       	ret

0001c01a <copyright>:
int8_t debug_input = 0;

///@brief Display Copyright
///@return void
void copyright()
{
   1c01a:	00 d0       	rcall	.+0      	; 0x1c01c <copyright+0x2>
   1c01c:	00 d0       	rcall	.+0      	; 0x1c01e <copyright+0x4>
   1c01e:	1f 92       	push	r1
    printf("HP85 Disk and Device Emulator with built in LIF utilities\n");
   1c020:	80 ee       	ldi	r24, 0xE0	; 224
   1c022:	9a e4       	ldi	r25, 0x4A	; 74
   1c024:	a0 e0       	ldi	r26, 0x00	; 0
   1c026:	ed b7       	in	r30, 0x3d	; 61
   1c028:	fe b7       	in	r31, 0x3e	; 62
   1c02a:	81 83       	std	Z+1, r24	; 0x01
   1c02c:	92 83       	std	Z+2, r25	; 0x02
   1c02e:	a3 83       	std	Z+3, r26	; 0x03
   1c030:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1c034:	83 ec       	ldi	r24, 0xC3	; 195
   1c036:	9a e4       	ldi	r25, 0x4A	; 74
   1c038:	a0 e0       	ldi	r26, 0x00	; 0
   1c03a:	ed b7       	in	r30, 0x3d	; 61
   1c03c:	fe b7       	in	r31, 0x3e	; 62
   1c03e:	81 83       	std	Z+1, r24	; 0x01
   1c040:	92 83       	std	Z+2, r25	; 0x02
   1c042:	a3 83       	std	Z+3, r26	; 0x03
   1c044:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf(" GNU version 3\n");
   1c048:	83 eb       	ldi	r24, 0xB3	; 179
   1c04a:	9a e4       	ldi	r25, 0x4A	; 74
   1c04c:	a0 e0       	ldi	r26, 0x00	; 0
   1c04e:	ed b7       	in	r30, 0x3d	; 61
   1c050:	fe b7       	in	r31, 0x3e	; 62
   1c052:	81 83       	std	Z+1, r24	; 0x01
   1c054:	92 83       	std	Z+2, r25	; 0x02
   1c056:	a3 83       	std	Z+3, r26	; 0x03
   1c058:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c05c:	8c e8       	ldi	r24, 0x8C	; 140
   1c05e:	9a e4       	ldi	r25, 0x4A	; 74
   1c060:	a0 e0       	ldi	r26, 0x00	; 0
   1c062:	ed b7       	in	r30, 0x3d	; 61
   1c064:	fe b7       	in	r31, 0x3e	; 62
   1c066:	81 83       	std	Z+1, r24	; 0x01
   1c068:	92 83       	std	Z+2, r25	; 0x02
   1c06a:	a3 83       	std	Z+3, r26	; 0x03
   1c06c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c070:	8c ea       	ldi	r24, 0xAC	; 172
   1c072:	96 e1       	ldi	r25, 0x16	; 22
   1c074:	ed b7       	in	r30, 0x3d	; 61
   1c076:	fe b7       	in	r31, 0x3e	; 62
   1c078:	95 83       	std	Z+5, r25	; 0x05
   1c07a:	84 83       	std	Z+4, r24	; 0x04
   1c07c:	82 e7       	ldi	r24, 0x72	; 114
   1c07e:	9a e4       	ldi	r25, 0x4A	; 74
   1c080:	a0 e0       	ldi	r26, 0x00	; 0
   1c082:	81 83       	std	Z+1, r24	; 0x01
   1c084:	92 83       	std	Z+2, r25	; 0x02
   1c086:	a3 83       	std	Z+3, r26	; 0x03
   1c088:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c08c:	80 ed       	ldi	r24, 0xD0	; 208
   1c08e:	96 e1       	ldi	r25, 0x16	; 22
   1c090:	ed b7       	in	r30, 0x3d	; 61
   1c092:	fe b7       	in	r31, 0x3e	; 62
   1c094:	95 83       	std	Z+5, r25	; 0x05
   1c096:	84 83       	std	Z+4, r24	; 0x04
   1c098:	88 e5       	ldi	r24, 0x58	; 88
   1c09a:	9a e4       	ldi	r25, 0x4A	; 74
   1c09c:	a0 e0       	ldi	r26, 0x00	; 0
   1c09e:	81 83       	std	Z+1, r24	; 0x01
   1c0a0:	92 83       	std	Z+2, r25	; 0x02
   1c0a2:	a3 83       	std	Z+3, r26	; 0x03
   1c0a4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("\n");
   1c0a8:	86 e5       	ldi	r24, 0x56	; 86
   1c0aa:	9a e4       	ldi	r25, 0x4A	; 74
   1c0ac:	a0 e0       	ldi	r26, 0x00	; 0
   1c0ae:	ed b7       	in	r30, 0x3d	; 61
   1c0b0:	fe b7       	in	r31, 0x3e	; 62
   1c0b2:	81 83       	std	Z+1, r24	; 0x01
   1c0b4:	92 83       	std	Z+2, r25	; 0x02
   1c0b6:	a3 83       	std	Z+3, r26	; 0x03
   1c0b8:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
}
   1c0bc:	0f 90       	pop	r0
   1c0be:	0f 90       	pop	r0
   1c0c0:	0f 90       	pop	r0
   1c0c2:	0f 90       	pop	r0
   1c0c4:	0f 90       	pop	r0
   1c0c6:	08 95       	ret

0001c0c8 <lcd_time>:
/// - Example output: "Thu Dec  8 21:45:05 EST 2011".
///
/// @return buf string pointer.
MEMSPACE
char *lcd_time(tm_t *t, char *buf, int max)
{
   1c0c8:	a1 e1       	ldi	r26, 0x11	; 17
   1c0ca:	b0 e0       	ldi	r27, 0x00	; 0
   1c0cc:	e9 e6       	ldi	r30, 0x69	; 105
   1c0ce:	f0 ee       	ldi	r31, 0xE0	; 224
   1c0d0:	09 c6       	rjmp	.+3090   	; 0x1cce4 <__prologue_saves__+0x18>
   1c0d2:	ec 01       	movw	r28, r24
   1c0d4:	7b 01       	movw	r14, r22
   1c0d6:	8a 01       	movw	r16, r20
// normaize tm_t before output
    (void) normalize(t,0);
   1c0d8:	60 e0       	ldi	r22, 0x00	; 0
   1c0da:	70 e0       	ldi	r23, 0x00	; 0
   1c0dc:	0e 94 44 38 	call	0x7088	; 0x7088 <normalize>
    memset(buf,0,max);
   1c0e0:	a8 01       	movw	r20, r16
   1c0e2:	60 e0       	ldi	r22, 0x00	; 0
   1c0e4:	70 e0       	ldi	r23, 0x00	; 0
   1c0e6:	c7 01       	movw	r24, r14
   1c0e8:	0e 94 5e ea 	call	0x1d4bc	; 0x1d4bc <memset>
    snprintf(buf,max-1,"%s %2d %02d:%02d:%02d",
   1c0ec:	88 85       	ldd	r24, Y+8	; 0x08
   1c0ee:	99 85       	ldd	r25, Y+9	; 0x09
   1c0f0:	0e 94 29 36 	call	0x6c52	; 0x6c52 <tm_mon_to_ascii>
   1c0f4:	28 81       	ld	r18, Y
   1c0f6:	39 81       	ldd	r19, Y+1	; 0x01
   1c0f8:	ed b7       	in	r30, 0x3d	; 61
   1c0fa:	fe b7       	in	r31, 0x3e	; 62
   1c0fc:	31 8b       	std	Z+17, r19	; 0x11
   1c0fe:	20 8b       	std	Z+16, r18	; 0x10
   1c100:	2a 81       	ldd	r18, Y+2	; 0x02
   1c102:	3b 81       	ldd	r19, Y+3	; 0x03
   1c104:	37 87       	std	Z+15, r19	; 0x0f
   1c106:	26 87       	std	Z+14, r18	; 0x0e
   1c108:	2c 81       	ldd	r18, Y+4	; 0x04
   1c10a:	3d 81       	ldd	r19, Y+5	; 0x05
   1c10c:	35 87       	std	Z+13, r19	; 0x0d
   1c10e:	24 87       	std	Z+12, r18	; 0x0c
   1c110:	2e 81       	ldd	r18, Y+6	; 0x06
   1c112:	3f 81       	ldd	r19, Y+7	; 0x07
   1c114:	33 87       	std	Z+11, r19	; 0x0b
   1c116:	22 87       	std	Z+10, r18	; 0x0a
   1c118:	91 87       	std	Z+9, r25	; 0x09
   1c11a:	80 87       	std	Z+8, r24	; 0x08
   1c11c:	80 e4       	ldi	r24, 0x40	; 64
   1c11e:	9a e4       	ldi	r25, 0x4A	; 74
   1c120:	a0 e0       	ldi	r26, 0x00	; 0
   1c122:	85 83       	std	Z+5, r24	; 0x05
   1c124:	96 83       	std	Z+6, r25	; 0x06
   1c126:	a7 83       	std	Z+7, r26	; 0x07
   1c128:	01 50       	subi	r16, 0x01	; 1
   1c12a:	11 09       	sbc	r17, r1
   1c12c:	14 83       	std	Z+4, r17	; 0x04
   1c12e:	03 83       	std	Z+3, r16	; 0x03
   1c130:	f2 82       	std	Z+2, r15	; 0x02
   1c132:	e1 82       	std	Z+1, r14	; 0x01
   1c134:	0e 94 7d 46 	call	0x8cfa	; 0x8cfa <snprintf_P>
        (int)t->tm_mday,
        (int)t->tm_hour,
        (int)t->tm_min,
        (int)t->tm_sec);
    return(buf);
}
   1c138:	c7 01       	movw	r24, r14
   1c13a:	cd b7       	in	r28, 0x3d	; 61
   1c13c:	de b7       	in	r29, 0x3e	; 62
   1c13e:	61 96       	adiw	r28, 0x11	; 17
   1c140:	e6 e0       	ldi	r30, 0x06	; 6
   1c142:	ec c5       	rjmp	.+3032   	; 0x1cd1c <__epilogue_restores__+0x18>

0001c144 <lcd_backlight>:

///@brief lcd_backlight LCD Backlight settings
/// @param[in] rgb: hex value 0xRRGGBB, RR,GG,BB values are 0 to 255
uint8_t  _backlight[5] = { 0x7c, '+', 0x80, 0x80, 0x80 };	/* Backlight half bright */
uint8_t lcd_backlight(uint32_t rgb)
{
   1c144:	cf 93       	push	r28
   1c146:	00 d0       	rcall	.+0      	; 0x1c148 <lcd_backlight+0x4>
   1c148:	1f 92       	push	r1

	_backlight[2] = 0xff & (rgb >> 16);
   1c14a:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <_backlight+0x2>
	_backlight[3] = 0xff & (rgb >> 8);
   1c14e:	70 93 f3 02 	sts	0x02F3, r23	; 0x8002f3 <_backlight+0x3>
	_backlight[4] = 0xff & (rgb );
   1c152:	60 93 f4 02 	sts	0x02F4, r22	; 0x8002f4 <_backlight+0x4>

	if(! i2c_fn(0x72, TW_WRITE, _backlight, sizeof(_backlight)) )
   1c156:	25 e0       	ldi	r18, 0x05	; 5
   1c158:	40 ef       	ldi	r20, 0xF0	; 240
   1c15a:	52 e0       	ldi	r21, 0x02	; 2
   1c15c:	60 e0       	ldi	r22, 0x00	; 0
   1c15e:	82 e7       	ldi	r24, 0x72	; 114
   1c160:	0e 94 bc 2c 	call	0x5978	; 0x5978 <i2c_fn>
   1c164:	c8 2f       	mov	r28, r24
   1c166:	81 11       	cpse	r24, r1
   1c168:	0d c0       	rjmp	.+26     	; 0x1c184 <lcd_backlight+0x40>
	{
		i2c_display_task_errors();
   1c16a:	0e 94 c0 2e 	call	0x5d80	; 0x5d80 <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1c16e:	86 e2       	ldi	r24, 0x26	; 38
   1c170:	9a e4       	ldi	r25, 0x4A	; 74
   1c172:	a0 e0       	ldi	r26, 0x00	; 0
   1c174:	ed b7       	in	r30, 0x3d	; 61
   1c176:	fe b7       	in	r31, 0x3e	; 62
   1c178:	81 83       	std	Z+1, r24	; 0x01
   1c17a:	92 83       	std	Z+2, r25	; 0x02
   1c17c:	a3 83       	std	Z+3, r26	; 0x03
   1c17e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1c182:	01 c0       	rjmp	.+2      	; 0x1c186 <lcd_backlight+0x42>
		return(0);
	}
	return(1);
   1c184:	c1 e0       	ldi	r28, 0x01	; 1
}
   1c186:	8c 2f       	mov	r24, r28
   1c188:	0f 90       	pop	r0
   1c18a:	0f 90       	pop	r0
   1c18c:	0f 90       	pop	r0
   1c18e:	cf 91       	pop	r28
   1c190:	08 95       	ret

0001c192 <lcd_setup>:
///@brief LCD setup code
/// For a SparkFun SERLCD 2x16 display
/// Initializes the I2C deiplay update task structure 
/// Passes the structures to the interrupt handler
void lcd_setup()
{
   1c192:	cf 93       	push	r28
   1c194:	ad b7       	in	r26, 0x3d	; 61
   1c196:	be b7       	in	r27, 0x3e	; 62
   1c198:	17 97       	sbiw	r26, 0x07	; 7
   1c19a:	0f b6       	in	r0, 0x3f	; 63
   1c19c:	f8 94       	cli
   1c19e:	be bf       	out	0x3e, r27	; 62
   1c1a0:	0f be       	out	0x3f, r0	; 63
   1c1a2:	ad bf       	out	0x3d, r26	; 61
	int ind = 0;
    uint8_t sreg = SREG;
   1c1a4:	cf b7       	in	r28, 0x3f	; 63

    printf("I2C LCD initialization start\n");
   1c1a6:	88 e0       	ldi	r24, 0x08	; 8
   1c1a8:	9a e4       	ldi	r25, 0x4A	; 74
   1c1aa:	a0 e0       	ldi	r26, 0x00	; 0
   1c1ac:	ed b7       	in	r30, 0x3d	; 61
   1c1ae:	fe b7       	in	r31, 0x3e	; 62
   1c1b0:	81 83       	std	Z+1, r24	; 0x01
   1c1b2:	92 83       	std	Z+2, r25	; 0x02
   1c1b4:	a3 83       	std	Z+3, r26	; 0x03
   1c1b6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

	if(set_timers(lcd_task,1) == -1)
   1c1ba:	61 e0       	ldi	r22, 0x01	; 1
   1c1bc:	70 e0       	ldi	r23, 0x00	; 0
   1c1be:	83 e0       	ldi	r24, 0x03	; 3
   1c1c0:	90 ee       	ldi	r25, 0xE0	; 224
   1c1c2:	0e 94 53 34 	call	0x68a6	; 0x68a6 <set_timers>
   1c1c6:	01 96       	adiw	r24, 0x01	; 1
   1c1c8:	51 f4       	brne	.+20     	; 0x1c1de <lcd_setup+0x4c>
        printf("lcd_task init failed\n");
   1c1ca:	82 ef       	ldi	r24, 0xF2	; 242
   1c1cc:	99 e4       	ldi	r25, 0x49	; 73
   1c1ce:	a0 e0       	ldi	r26, 0x00	; 0
   1c1d0:	ed b7       	in	r30, 0x3d	; 61
   1c1d2:	fe b7       	in	r31, 0x3e	; 62
   1c1d4:	81 83       	std	Z+1, r24	; 0x01
   1c1d6:	92 83       	std	Z+2, r25	; 0x02
   1c1d8:	a3 83       	std	Z+3, r26	; 0x03
   1c1da:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

	i2c_init(100000);
   1c1de:	60 ea       	ldi	r22, 0xA0	; 160
   1c1e0:	76 e8       	ldi	r23, 0x86	; 134
   1c1e2:	81 e0       	ldi	r24, 0x01	; 1
   1c1e4:	90 e0       	ldi	r25, 0x00	; 0
   1c1e6:	0e 94 c3 2b 	call	0x5786	; 0x5786 <i2c_init>

	i2c_task_init();
   1c1ea:	0e 94 84 2b 	call	0x5708	; 0x5708 <i2c_task_init>

	cli();
   1c1ee:	f8 94       	cli

	// Default startup message
    sprintf((char *) _line1, "%-16s", "HP85Disk V2");
   1c1f0:	84 ef       	ldi	r24, 0xF4	; 244
   1c1f2:	96 e1       	ldi	r25, 0x16	; 22
   1c1f4:	ed b7       	in	r30, 0x3d	; 61
   1c1f6:	fe b7       	in	r31, 0x3e	; 62
   1c1f8:	97 83       	std	Z+7, r25	; 0x07
   1c1fa:	86 83       	std	Z+6, r24	; 0x06
   1c1fc:	8c ee       	ldi	r24, 0xEC	; 236
   1c1fe:	99 e4       	ldi	r25, 0x49	; 73
   1c200:	a0 e0       	ldi	r26, 0x00	; 0
   1c202:	83 83       	std	Z+3, r24	; 0x03
   1c204:	94 83       	std	Z+4, r25	; 0x04
   1c206:	a5 83       	std	Z+5, r26	; 0x05
   1c208:	8c e0       	ldi	r24, 0x0C	; 12
   1c20a:	93 e0       	ldi	r25, 0x03	; 3
   1c20c:	92 83       	std	Z+2, r25	; 0x02
   1c20e:	81 83       	std	Z+1, r24	; 0x01
   1c210:	0e 94 91 46 	call	0x8d22	; 0x8d22 <sprintf_P>
    sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1c214:	80 e0       	ldi	r24, 0x00	; 0
   1c216:	97 e1       	ldi	r25, 0x17	; 23
   1c218:	ed b7       	in	r30, 0x3d	; 61
   1c21a:	fe b7       	in	r31, 0x3e	; 62
   1c21c:	97 83       	std	Z+7, r25	; 0x07
   1c21e:	86 83       	std	Z+6, r24	; 0x06
   1c220:	86 ee       	ldi	r24, 0xE6	; 230
   1c222:	99 e4       	ldi	r25, 0x49	; 73
   1c224:	a0 e0       	ldi	r26, 0x00	; 0
   1c226:	83 83       	std	Z+3, r24	; 0x03
   1c228:	94 83       	std	Z+4, r25	; 0x04
   1c22a:	a5 83       	std	Z+5, r26	; 0x05
   1c22c:	85 ef       	ldi	r24, 0xF5	; 245
   1c22e:	92 e0       	ldi	r25, 0x02	; 2
   1c230:	92 83       	std	Z+2, r25	; 0x02
   1c232:	81 83       	std	Z+1, r24	; 0x01
   1c234:	0e 94 91 46 	call	0x8d22	; 0x8d22 <sprintf_P>

	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd1, sizeof(_cmd1));
   1c238:	22 e0       	ldi	r18, 0x02	; 2
   1c23a:	41 e2       	ldi	r20, 0x21	; 33
   1c23c:	53 e0       	ldi	r21, 0x03	; 3
   1c23e:	60 e0       	ldi	r22, 0x00	; 0
   1c240:	82 e7       	ldi	r24, 0x72	; 114
   1c242:	0e 94 99 2b 	call	0x5732	; 0x5732 <i2c_task_op_add>
   1c246:	90 93 4d 17 	sts	0x174D, r25	; 0x80174d <i2c_task_op+0x1>
   1c24a:	80 93 4c 17 	sts	0x174C, r24	; 0x80174c <i2c_task_op>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line1, 16);
   1c24e:	20 e1       	ldi	r18, 0x10	; 16
   1c250:	4c e0       	ldi	r20, 0x0C	; 12
   1c252:	53 e0       	ldi	r21, 0x03	; 3
   1c254:	60 e0       	ldi	r22, 0x00	; 0
   1c256:	82 e7       	ldi	r24, 0x72	; 114
   1c258:	0e 94 99 2b 	call	0x5732	; 0x5732 <i2c_task_op_add>
   1c25c:	90 93 4f 17 	sts	0x174F, r25	; 0x80174f <i2c_task_op+0x3>
   1c260:	80 93 4e 17 	sts	0x174E, r24	; 0x80174e <i2c_task_op+0x2>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd2, sizeof(_cmd2));
   1c264:	22 e0       	ldi	r18, 0x02	; 2
   1c266:	4a e0       	ldi	r20, 0x0A	; 10
   1c268:	53 e0       	ldi	r21, 0x03	; 3
   1c26a:	60 e0       	ldi	r22, 0x00	; 0
   1c26c:	82 e7       	ldi	r24, 0x72	; 114
   1c26e:	0e 94 99 2b 	call	0x5732	; 0x5732 <i2c_task_op_add>
   1c272:	90 93 51 17 	sts	0x1751, r25	; 0x801751 <i2c_task_op+0x5>
   1c276:	80 93 50 17 	sts	0x1750, r24	; 0x801750 <i2c_task_op+0x4>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line2, 16);
   1c27a:	20 e1       	ldi	r18, 0x10	; 16
   1c27c:	45 ef       	ldi	r20, 0xF5	; 245
   1c27e:	52 e0       	ldi	r21, 0x02	; 2
   1c280:	60 e0       	ldi	r22, 0x00	; 0
   1c282:	82 e7       	ldi	r24, 0x72	; 114
   1c284:	0e 94 99 2b 	call	0x5732	; 0x5732 <i2c_task_op_add>
   1c288:	90 93 53 17 	sts	0x1753, r25	; 0x801753 <i2c_task_op+0x7>
   1c28c:	80 93 52 17 	sts	0x1752, r24	; 0x801752 <i2c_task_op+0x6>

	SREG = sreg;
   1c290:	cf bf       	out	0x3f, r28	; 63

    i2c_task_run();
   1c292:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <i2c_task_run>
	// wait long enough for us to see the startup message
    delayms(1000);
   1c296:	68 ee       	ldi	r22, 0xE8	; 232
   1c298:	73 e0       	ldi	r23, 0x03	; 3
   1c29a:	80 e0       	ldi	r24, 0x00	; 0
   1c29c:	90 e0       	ldi	r25, 0x00	; 0
   1c29e:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <delayms>
	
	// Verify the task finished - it normally takes < 30mS
    if(!i2c_task_done())
   1c2a2:	0e 94 3a 2c 	call	0x5874	; 0x5874 <i2c_task_done>
   1c2a6:	81 11       	cpse	r24, r1
   1c2a8:	0c c0       	rjmp	.+24     	; 0x1c2c2 <lcd_setup+0x130>
	{
		i2c_display_task_errors();
   1c2aa:	0e 94 c0 2e 	call	0x5d80	; 0x5d80 <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1c2ae:	8c ec       	ldi	r24, 0xCC	; 204
   1c2b0:	99 e4       	ldi	r25, 0x49	; 73
   1c2b2:	a0 e0       	ldi	r26, 0x00	; 0
   1c2b4:	ed b7       	in	r30, 0x3d	; 61
   1c2b6:	fe b7       	in	r31, 0x3e	; 62
   1c2b8:	81 83       	std	Z+1, r24	; 0x01
   1c2ba:	92 83       	std	Z+2, r25	; 0x02
   1c2bc:	a3 83       	std	Z+3, r26	; 0x03
   1c2be:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
	}

    sep();
   1c2c2:	0e 94 b4 31 	call	0x6368	; 0x6368 <sep>
}
   1c2c6:	ad b7       	in	r26, 0x3d	; 61
   1c2c8:	be b7       	in	r27, 0x3e	; 62
   1c2ca:	17 96       	adiw	r26, 0x07	; 7
   1c2cc:	0f b6       	in	r0, 0x3f	; 63
   1c2ce:	f8 94       	cli
   1c2d0:	be bf       	out	0x3e, r27	; 62
   1c2d2:	0f be       	out	0x3f, r0	; 63
   1c2d4:	ad bf       	out	0x3d, r26	; 61
   1c2d6:	cf 91       	pop	r28
   1c2d8:	08 95       	ret

0001c2da <i2c_lcd_task>:


///@brief Update the LCD wile the system is running
/// Display SD card fault status and the current time
void i2c_lcd_task()
{
   1c2da:	af e2       	ldi	r26, 0x2F	; 47
   1c2dc:	b0 e0       	ldi	r27, 0x00	; 0
   1c2de:	e2 e7       	ldi	r30, 0x72	; 114
   1c2e0:	f1 ee       	ldi	r31, 0xE1	; 225
   1c2e2:	03 c5       	rjmp	.+2566   	; 0x1ccea <__prologue_saves__+0x1e>
	char buf[32];
	uint8_t sreg=SREG;
   1c2e4:	1f b7       	in	r17, 0x3f	; 63
    ts_t ts;

	cli();
   1c2e6:	f8 94       	cli
	if(!mmc_ins_status())
   1c2e8:	0e 94 93 6e 	call	0xdd26	; 0xdd26 <mmc_ins_status>
   1c2ec:	89 2b       	or	r24, r25
   1c2ee:	49 f4       	brne	.+18     	; 0x1c302 <i2c_lcd_task+0x28>
	{
		sprintf((char *) _line2,"%-16s", "SD Card Fault");
   1c2f0:	8d e0       	ldi	r24, 0x0D	; 13
   1c2f2:	97 e1       	ldi	r25, 0x17	; 23
   1c2f4:	ed b7       	in	r30, 0x3d	; 61
   1c2f6:	fe b7       	in	r31, 0x3e	; 62
   1c2f8:	97 83       	std	Z+7, r25	; 0x07
   1c2fa:	86 83       	std	Z+6, r24	; 0x06
   1c2fc:	86 ec       	ldi	r24, 0xC6	; 198
   1c2fe:	99 e4       	ldi	r25, 0x49	; 73
   1c300:	17 c0       	rjmp	.+46     	; 0x1c330 <i2c_lcd_task+0x56>
	}
	else
	{
		clock_gettime(0, (ts_t *) &ts);
   1c302:	be 01       	movw	r22, r28
   1c304:	68 5d       	subi	r22, 0xD8	; 216
   1c306:	7f 4f       	sbci	r23, 0xFF	; 255
   1c308:	80 e0       	ldi	r24, 0x00	; 0
   1c30a:	90 e0       	ldi	r25, 0x00	; 0
   1c30c:	0e 94 63 33 	call	0x66c6	; 0x66c6 <clock_gettime>
		sprintf((char *) _line2, "%-16s", lcd_time(gmtime(&(ts.tv_sec)),buf,sizeof(buf)-1) );
   1c310:	ce 01       	movw	r24, r28
   1c312:	88 96       	adiw	r24, 0x28	; 40
   1c314:	0e 94 4d 37 	call	0x6e9a	; 0x6e9a <gmtime>
   1c318:	4f e1       	ldi	r20, 0x1F	; 31
   1c31a:	50 e0       	ldi	r21, 0x00	; 0
   1c31c:	be 01       	movw	r22, r28
   1c31e:	68 5f       	subi	r22, 0xF8	; 248
   1c320:	7f 4f       	sbci	r23, 0xFF	; 255
   1c322:	d2 de       	rcall	.-604    	; 0x1c0c8 <lcd_time>
   1c324:	ed b7       	in	r30, 0x3d	; 61
   1c326:	fe b7       	in	r31, 0x3e	; 62
   1c328:	97 83       	std	Z+7, r25	; 0x07
   1c32a:	86 83       	std	Z+6, r24	; 0x06
   1c32c:	80 ec       	ldi	r24, 0xC0	; 192
   1c32e:	99 e4       	ldi	r25, 0x49	; 73
   1c330:	a0 e0       	ldi	r26, 0x00	; 0
   1c332:	83 83       	std	Z+3, r24	; 0x03
   1c334:	94 83       	std	Z+4, r25	; 0x04
   1c336:	a5 83       	std	Z+5, r26	; 0x05
   1c338:	85 ef       	ldi	r24, 0xF5	; 245
   1c33a:	92 e0       	ldi	r25, 0x02	; 2
   1c33c:	92 83       	std	Z+2, r25	; 0x02
   1c33e:	81 83       	std	Z+1, r24	; 0x01
   1c340:	0e 94 91 46 	call	0x8d22	; 0x8d22 <sprintf_P>
		// sprintf((char *) _line2,"%16ld.%03ld", (long) ts.tv_sec, (long) ts.tv_nsec / 1000000UL);
	}
	SREG=sreg;
   1c344:	1f bf       	out	0x3f, r17	; 63

    i2c_task_run();
   1c346:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <i2c_task_run>
}
   1c34a:	af 96       	adiw	r28, 0x2f	; 47
   1c34c:	e3 e0       	ldi	r30, 0x03	; 3
   1c34e:	e9 c4       	rjmp	.+2514   	; 0x1cd22 <__epilogue_restores__+0x1e>

0001c350 <gpib_user_task>:
///@brief GPIB callback from gpib_read_byte()
/// This function gets called evry time trough the read loop
/// This task run in the forground - is not an interrupt task
void gpib_user_task()
{
	uint8_t sreg = SREG;
   1c350:	8f b7       	in	r24, 0x3f	; 63

	cli();
   1c352:	f8 94       	cli
	if(lcd_display_time > 100) // increments at 1000HZ
   1c354:	20 91 e0 19 	lds	r18, 0x19E0	; 0x8019e0 <lcd_display_time>
   1c358:	30 91 e1 19 	lds	r19, 0x19E1	; 0x8019e1 <lcd_display_time+0x1>
   1c35c:	25 36       	cpi	r18, 0x65	; 101
   1c35e:	31 05       	cpc	r19, r1
   1c360:	3c f0       	brlt	.+14     	; 0x1c370 <gpib_user_task+0x20>
	{
		lcd_display_time = 0;
   1c362:	10 92 e1 19 	sts	0x19E1, r1	; 0x8019e1 <lcd_display_time+0x1>
   1c366:	10 92 e0 19 	sts	0x19E0, r1	; 0x8019e0 <lcd_display_time>
		SREG = sreg;
   1c36a:	8f bf       	out	0x3f, r24	; 63
		i2c_lcd_task();
   1c36c:	b6 cf       	rjmp	.-148    	; 0x1c2da <i2c_lcd_task>
		return;
   1c36e:	08 95       	ret
	}
	SREG = sreg;
   1c370:	8f bf       	out	0x3f, r24	; 63
   1c372:	08 95       	ret

0001c374 <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1c374:	00 d0       	rcall	.+0      	; 0x1c376 <help+0x2>
   1c376:	1f 92       	push	r1

    copyright();
   1c378:	50 de       	rcall	.-864    	; 0x1c01a <copyright>

	printf("help     - displays this help menu\n");
   1c37a:	8c e9       	ldi	r24, 0x9C	; 156
   1c37c:	99 e4       	ldi	r25, 0x49	; 73
   1c37e:	a0 e0       	ldi	r26, 0x00	; 0
   1c380:	ed b7       	in	r30, 0x3d	; 61
   1c382:	fe b7       	in	r31, 0x3e	; 62
   1c384:	81 83       	std	Z+1, r24	; 0x01
   1c386:	92 83       	std	Z+2, r25	; 0x02
   1c388:	a3 83       	std	Z+3, r26	; 0x03
   1c38a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>


#ifdef FATFS_TESTS
    fatfs_help(0);
   1c38e:	80 e0       	ldi	r24, 0x00	; 0
   1c390:	90 e0       	ldi	r25, 0x00	; 0
   1c392:	0e 94 04 73 	call	0xe608	; 0xe608 <fatfs_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1c396:	80 e0       	ldi	r24, 0x00	; 0
   1c398:	90 e0       	ldi	r25, 0x00	; 0
   1c39a:	0e 94 00 7e 	call	0xfc00	; 0xfc00 <posix_help>
#endif

#ifdef LIF_SUPPORT
    lif_help(0);
   1c39e:	80 e0       	ldi	r24, 0x00	; 0
   1c3a0:	90 e0       	ldi	r25, 0x00	; 0
   1c3a2:	0e 94 2d c0 	call	0x1805a	; 0x1805a <lif_help>

#ifdef TELEDISK
    td0_help(0);
#endif

	gpib_help(0);
   1c3a6:	80 e0       	ldi	r24, 0x00	; 0
   1c3a8:	90 e0       	ldi	r25, 0x00	; 0
   1c3aa:	0e 94 61 91 	call	0x122c2	; 0x122c2 <gpib_help>

	drives_help(0);
   1c3ae:	80 e0       	ldi	r24, 0x00	; 0
   1c3b0:	0e 94 88 9b 	call	0x13710	; 0x13710 <drives_help>

    printf(
   1c3b4:	82 ee       	ldi	r24, 0xE2	; 226
   1c3b6:	98 e4       	ldi	r25, 0x48	; 72
   1c3b8:	a0 e0       	ldi	r26, 0x00	; 0
   1c3ba:	ed b7       	in	r30, 0x3d	; 61
   1c3bc:	fe b7       	in	r31, 0x3e	; 62
   1c3be:	81 83       	std	Z+1, r24	; 0x01
   1c3c0:	92 83       	std	Z+2, r25	; 0x02
   1c3c2:	a3 83       	std	Z+3, r26	; 0x03
   1c3c4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        "reset   - reset emulator\n"
        "setdate - set date\n"
        "time    - display current time\n"
        "\n"
        );
}
   1c3c8:	0f 90       	pop	r0
   1c3ca:	0f 90       	pop	r0
   1c3cc:	0f 90       	pop	r0
   1c3ce:	08 95       	ret

0001c3d0 <user_task.part.1>:
/// If a keypress is detected read a line from the uart
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void user_task(uint8_t gpib)
   1c3d0:	6f 92       	push	r6
   1c3d2:	7f 92       	push	r7
   1c3d4:	8f 92       	push	r8
   1c3d6:	cf 92       	push	r12
   1c3d8:	df 92       	push	r13
   1c3da:	ef 92       	push	r14
   1c3dc:	ff 92       	push	r15
   1c3de:	0f 93       	push	r16
   1c3e0:	1f 93       	push	r17
   1c3e2:	cf 93       	push	r28
   1c3e4:	df 93       	push	r29
   1c3e6:	cd b7       	in	r28, 0x3d	; 61
   1c3e8:	de b7       	in	r29, 0x3e	; 62
   1c3ea:	cb 56       	subi	r28, 0x6B	; 107
   1c3ec:	d1 40       	sbci	r29, 0x01	; 1
   1c3ee:	0f b6       	in	r0, 0x3f	; 63
   1c3f0:	f8 94       	cli
   1c3f2:	de bf       	out	0x3e, r29	; 62
   1c3f4:	0f be       	out	0x3f, r0	; 63
   1c3f6:	cd bf       	out	0x3d, r28	; 61
        gpib_task();

    if(!kbhit(0))
        return;

    printf("\n>");
   1c3f8:	8f ed       	ldi	r24, 0xDF	; 223
   1c3fa:	98 e4       	ldi	r25, 0x48	; 72
   1c3fc:	a0 e0       	ldi	r26, 0x00	; 0
   1c3fe:	ed b7       	in	r30, 0x3d	; 61
   1c400:	fe b7       	in	r31, 0x3e	; 62
   1c402:	81 83       	std	Z+1, r24	; 0x01
   1c404:	92 83       	std	Z+2, r25	; 0x02
   1c406:	a3 83       	std	Z+3, r26	; 0x03
   1c408:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

	memset(line,0,sizeof(line)-1);
   1c40c:	8e 01       	movw	r16, r28
   1c40e:	0a 5f       	subi	r16, 0xFA	; 250
   1c410:	1f 4f       	sbci	r17, 0xFF	; 255
   1c412:	8f ef       	ldi	r24, 0xFF	; 255
   1c414:	f8 01       	movw	r30, r16
   1c416:	11 92       	st	Z+, r1
   1c418:	8a 95       	dec	r24
   1c41a:	e9 f7       	brne	.-6      	; 0x1c416 <user_task.part.1+0x46>

    fgets(line,sizeof(line)-2,stdin);
   1c41c:	40 91 b5 1c 	lds	r20, 0x1CB5	; 0x801cb5 <__iob>
   1c420:	50 91 b6 1c 	lds	r21, 0x1CB6	; 0x801cb6 <__iob+0x1>
   1c424:	6e ef       	ldi	r22, 0xFE	; 254
   1c426:	70 e0       	ldi	r23, 0x00	; 0
   1c428:	c8 01       	movw	r24, r16
   1c42a:	0e 94 ec 75 	call	0xebd8	; 0xebd8 <fgets>
    trim_tail(line);
   1c42e:	c8 01       	movw	r24, r16
   1c430:	0e 94 c4 31 	call	0x6388	; 0x6388 <trim_tail>
    argc = split_args(line,argv,50);
   1c434:	42 e3       	ldi	r20, 0x32	; 50
   1c436:	50 e0       	ldi	r21, 0x00	; 0
   1c438:	be 01       	movw	r22, r28
   1c43a:	6a 5f       	subi	r22, 0xFA	; 250
   1c43c:	7e 4f       	sbci	r23, 0xFE	; 254
   1c43e:	c8 01       	movw	r24, r16
   1c440:	0e 94 4a 32 	call	0x6494	; 0x6494 <split_args>
   1c444:	6c 01       	movw	r12, r24

	if(debug_input)
   1c446:	80 91 e2 19 	lds	r24, 0x19E2	; 0x8019e2 <debug_input>
   1c44a:	81 11       	cpse	r24, r1
   1c44c:	0a c0       	rjmp	.+20     	; 0x1c462 <user_task.part.1+0x92>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1c44e:	ca 5f       	subi	r28, 0xFA	; 250
   1c450:	de 4f       	sbci	r29, 0xFE	; 254
   1c452:	e8 80       	ld	r14, Y
   1c454:	f9 80       	ldd	r15, Y+1	; 0x01
   1c456:	c6 50       	subi	r28, 0x06	; 6
   1c458:	d1 40       	sbci	r29, 0x01	; 1

    if(!ptr || argc < 1)
   1c45a:	e1 14       	cp	r14, r1
   1c45c:	f1 04       	cpc	r15, r1
   1c45e:	51 f5       	brne	.+84     	; 0x1c4b4 <user_task.part.1+0xe4>
   1c460:	b7 c0       	rjmp	.+366    	; 0x1c5d0 <user_task.part.1+0x200>
    trim_tail(line);
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
   1c462:	ed b7       	in	r30, 0x3d	; 61
   1c464:	fe b7       	in	r31, 0x3e	; 62
   1c466:	d5 82       	std	Z+5, r13	; 0x05
   1c468:	c4 82       	std	Z+4, r12	; 0x04
   1c46a:	8a ec       	ldi	r24, 0xCA	; 202
   1c46c:	98 e4       	ldi	r25, 0x48	; 72
   1c46e:	a0 e0       	ldi	r26, 0x00	; 0
   1c470:	81 83       	std	Z+1, r24	; 0x01
   1c472:	92 83       	std	Z+2, r25	; 0x02
   1c474:	a3 83       	std	Z+3, r26	; 0x03
   1c476:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1c47a:	ce 01       	movw	r24, r28
   1c47c:	8a 5f       	subi	r24, 0xFA	; 250
   1c47e:	9e 4f       	sbci	r25, 0xFE	; 254
   1c480:	7c 01       	movw	r14, r24
		for(i=0;i<argc;++i)
   1c482:	00 e0       	ldi	r16, 0x00	; 0
   1c484:	10 e0       	ldi	r17, 0x00	; 0
			printf("   [%s]\n", argv[i]);
   1c486:	81 ec       	ldi	r24, 0xC1	; 193
   1c488:	98 e4       	ldi	r25, 0x48	; 72
   1c48a:	3c 01       	movw	r6, r24
   1c48c:	81 2c       	mov	r8, r1
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c48e:	0c 15       	cp	r16, r12
   1c490:	1d 05       	cpc	r17, r13
   1c492:	ec f6       	brge	.-70     	; 0x1c44e <user_task.part.1+0x7e>
			printf("   [%s]\n", argv[i]);
   1c494:	f7 01       	movw	r30, r14
   1c496:	81 91       	ld	r24, Z+
   1c498:	91 91       	ld	r25, Z+
   1c49a:	7f 01       	movw	r14, r30
   1c49c:	ed b7       	in	r30, 0x3d	; 61
   1c49e:	fe b7       	in	r31, 0x3e	; 62
   1c4a0:	95 83       	std	Z+5, r25	; 0x05
   1c4a2:	84 83       	std	Z+4, r24	; 0x04
   1c4a4:	61 82       	std	Z+1, r6	; 0x01
   1c4a6:	72 82       	std	Z+2, r7	; 0x02
   1c4a8:	83 82       	std	Z+3, r8	; 0x03
   1c4aa:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    argc = split_args(line,argv,50);

	if(debug_input)
	{
        printf("Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c4ae:	0f 5f       	subi	r16, 0xFF	; 255
   1c4b0:	1f 4f       	sbci	r17, 0xFF	; 255
   1c4b2:	ed cf       	rjmp	.-38     	; 0x1c48e <user_task.part.1+0xbe>

    ind = 0;
	result = 0;
    ptr = argv[ind++];

    if(!ptr || argc < 1)
   1c4b4:	1c 14       	cp	r1, r12
   1c4b6:	1d 04       	cpc	r1, r13
   1c4b8:	0c f0       	brlt	.+2      	; 0x1c4bc <user_task.part.1+0xec>
   1c4ba:	8a c0       	rjmp	.+276    	; 0x1c5d0 <user_task.part.1+0x200>
    {
        result = 1;
    }
    else if (MATCHI(ptr,"input") )
   1c4bc:	62 e2       	ldi	r22, 0x22	; 34
   1c4be:	77 e1       	ldi	r23, 0x17	; 23
   1c4c0:	c7 01       	movw	r24, r14
   1c4c2:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   1c4c6:	89 2b       	or	r24, r25
   1c4c8:	d9 f0       	breq	.+54     	; 0x1c500 <user_task.part.1+0x130>
    {
        debug_input = !debug_input;
   1c4ca:	80 91 e2 19 	lds	r24, 0x19E2	; 0x8019e2 <debug_input>
   1c4ce:	91 e0       	ldi	r25, 0x01	; 1
   1c4d0:	81 11       	cpse	r24, r1
   1c4d2:	90 e0       	ldi	r25, 0x00	; 0
   1c4d4:	90 93 e2 19 	sts	0x19E2, r25	; 0x8019e2 <debug_input>
		printf("Input debugging: %s\n", debug_input ? "ON" : "OFF");
   1c4d8:	88 23       	and	r24, r24
   1c4da:	19 f0       	breq	.+6      	; 0x1c4e2 <user_task.part.1+0x112>
   1c4dc:	8e e1       	ldi	r24, 0x1E	; 30
   1c4de:	97 e1       	ldi	r25, 0x17	; 23
   1c4e0:	02 c0       	rjmp	.+4      	; 0x1c4e6 <user_task.part.1+0x116>
   1c4e2:	8b e1       	ldi	r24, 0x1B	; 27
   1c4e4:	97 e1       	ldi	r25, 0x17	; 23
   1c4e6:	ed b7       	in	r30, 0x3d	; 61
   1c4e8:	fe b7       	in	r31, 0x3e	; 62
   1c4ea:	95 83       	std	Z+5, r25	; 0x05
   1c4ec:	84 83       	std	Z+4, r24	; 0x04
   1c4ee:	8c ea       	ldi	r24, 0xAC	; 172
   1c4f0:	98 e4       	ldi	r25, 0x48	; 72
   1c4f2:	a0 e0       	ldi	r26, 0x00	; 0
   1c4f4:	81 83       	std	Z+1, r24	; 0x01
   1c4f6:	92 83       	std	Z+2, r25	; 0x02
   1c4f8:	a3 83       	std	Z+3, r26	; 0x03
   1c4fa:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1c4fe:	68 c0       	rjmp	.+208    	; 0x1c5d0 <user_task.part.1+0x200>

    }
#endif

#ifdef LCD_SUPPORT
    else if (MATCHI(ptr,"backlight") )
   1c500:	68 e2       	ldi	r22, 0x28	; 40
   1c502:	77 e1       	ldi	r23, 0x17	; 23
   1c504:	c7 01       	movw	r24, r14
   1c506:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   1c50a:	89 2b       	or	r24, r25
   1c50c:	f9 f0       	breq	.+62     	; 0x1c54c <user_task.part.1+0x17c>
    {
		uint32_t rgb;
        ptr = argv[ind];
   1c50e:	c8 5f       	subi	r28, 0xF8	; 248
   1c510:	de 4f       	sbci	r29, 0xFE	; 254
   1c512:	e8 80       	ld	r14, Y
   1c514:	f9 80       	ldd	r15, Y+1	; 0x01
   1c516:	c8 50       	subi	r28, 0x08	; 8
   1c518:	d1 40       	sbci	r29, 0x01	; 1
        if(*ptr == '=')
   1c51a:	f7 01       	movw	r30, r14
   1c51c:	80 81       	ld	r24, Z
   1c51e:	8d 33       	cpi	r24, 0x3D	; 61
   1c520:	19 f4       	brne	.+6      	; 0x1c528 <user_task.part.1+0x158>
            ++ind;
   1c522:	82 e0       	ldi	r24, 0x02	; 2
   1c524:	90 e0       	ldi	r25, 0x00	; 0
   1c526:	02 c0       	rjmp	.+4      	; 0x1c52c <user_task.part.1+0x15c>
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
    ptr = argv[ind++];
   1c528:	81 e0       	ldi	r24, 0x01	; 1
   1c52a:	90 e0       	ldi	r25, 0x00	; 0
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
            ++ind;
        rgb = get_value(argv[ind]);
   1c52c:	88 0f       	add	r24, r24
   1c52e:	99 1f       	adc	r25, r25
   1c530:	e6 e0       	ldi	r30, 0x06	; 6
   1c532:	f1 e0       	ldi	r31, 0x01	; 1
   1c534:	ec 0f       	add	r30, r28
   1c536:	fd 1f       	adc	r31, r29
   1c538:	e8 0f       	add	r30, r24
   1c53a:	f9 1f       	adc	r31, r25
   1c53c:	80 81       	ld	r24, Z
   1c53e:	91 81       	ldd	r25, Z+1	; 0x01
   1c540:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <get_value>
		result = lcd_backlight(rgb);
   1c544:	ff dd       	rcall	.-1026   	; 0x1c144 <lcd_backlight>
   1c546:	08 2f       	mov	r16, r24
   1c548:	10 e0       	ldi	r17, 0x00	; 0
   1c54a:	44 c0       	rjmp	.+136    	; 0x1c5d4 <user_task.part.1+0x204>
    }
#endif

    else if ( MATCH(ptr,"mem") )
   1c54c:	62 e3       	ldi	r22, 0x32	; 50
   1c54e:	77 e1       	ldi	r23, 0x17	; 23
   1c550:	c7 01       	movw	r24, r14
   1c552:	0e 94 de 31 	call	0x63bc	; 0x63bc <MATCH>
   1c556:	89 2b       	or	r24, r25
   1c558:	19 f0       	breq	.+6      	; 0x1c560 <user_task.part.1+0x190>
    {
        PrintFree();
   1c55a:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <PrintFree>
   1c55e:	38 c0       	rjmp	.+112    	; 0x1c5d0 <user_task.part.1+0x200>
        result = 1;

    }
    else if ( MATCHI(ptr,"reset") )
   1c560:	67 ea       	ldi	r22, 0xA7	; 167
   1c562:	7d e0       	ldi	r23, 0x0D	; 13
   1c564:	c7 01       	movw	r24, r14
   1c566:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   1c56a:	89 2b       	or	r24, r25
   1c56c:	51 f0       	breq	.+20     	; 0x1c582 <user_task.part.1+0x1b2>
    {
        cli();
   1c56e:	f8 94       	cli
        uart_rx_flush(0);
   1c570:	80 e0       	ldi	r24, 0x00	; 0
   1c572:	0e 94 47 28 	call	0x508e	; 0x508e <uart_rx_flush>
        cli();
   1c576:	f8 94       	cli
        MCUSR = (1 << EXTRF);
   1c578:	82 e0       	ldi	r24, 0x02	; 2
   1c57a:	84 bf       	out	0x34, r24	; 52
        RESET();
   1c57c:	e0 e0       	ldi	r30, 0x00	; 0
   1c57e:	fc ef       	ldi	r31, 0xFC	; 252
   1c580:	09 95       	icall
		// should not return!
        result = 1;
    }
    else if ( MATCHI(ptr,"setdate" ) )
   1c582:	66 e3       	ldi	r22, 0x36	; 54
   1c584:	77 e1       	ldi	r23, 0x17	; 23
   1c586:	c7 01       	movw	r24, r14
   1c588:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   1c58c:	89 2b       	or	r24, r25
   1c58e:	19 f0       	breq	.+6      	; 0x1c596 <user_task.part.1+0x1c6>
    {
        setdate();
   1c590:	0e 94 2d 3b 	call	0x765a	; 0x765a <setdate>
   1c594:	07 c0       	rjmp	.+14     	; 0x1c5a4 <user_task.part.1+0x1d4>
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"time") )
   1c596:	6e e3       	ldi	r22, 0x3E	; 62
   1c598:	77 e1       	ldi	r23, 0x17	; 23
   1c59a:	c7 01       	movw	r24, r14
   1c59c:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   1c5a0:	89 2b       	or	r24, r25
   1c5a2:	19 f0       	breq	.+6      	; 0x1c5aa <user_task.part.1+0x1da>
    {
        display_clock();
   1c5a4:	0e 94 49 3d 	call	0x7a92	; 0x7a92 <display_clock>
   1c5a8:	13 c0       	rjmp	.+38     	; 0x1c5d0 <user_task.part.1+0x200>
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c5aa:	62 e6       	ldi	r22, 0x62	; 98
   1c5ac:	76 e1       	ldi	r23, 0x16	; 22
   1c5ae:	c7 01       	movw	r24, r14
   1c5b0:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   1c5b4:	89 2b       	or	r24, r25
    {
        help();
   1c5b6:	11 f0       	breq	.+4      	; 0x1c5bc <user_task.part.1+0x1ec>
   1c5b8:	dd de       	rcall	.-582    	; 0x1c374 <help>
   1c5ba:	0a c0       	rjmp	.+20     	; 0x1c5d0 <user_task.part.1+0x200>
    else if ( MATCHI(ptr,"time") )
    {
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1c5bc:	68 e6       	ldi	r22, 0x68	; 104
   1c5be:	76 e1       	ldi	r23, 0x16	; 22
   1c5c0:	c7 01       	movw	r24, r14
   1c5c2:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   1c5c6:	89 2b       	or	r24, r25
   1c5c8:	b9 f7       	brne	.-18     	; 0x1c5b8 <user_task.part.1+0x1e8>
		for(i=0;i<argc;++i)
			printf("   [%s]\n", argv[i]);
	}

    ind = 0;
	result = 0;
   1c5ca:	00 e0       	ldi	r16, 0x00	; 0
   1c5cc:	10 e0       	ldi	r17, 0x00	; 0
   1c5ce:	02 c0       	rjmp	.+4      	; 0x1c5d4 <user_task.part.1+0x204>
    ptr = argv[ind++];

    if(!ptr || argc < 1)
    {
        result = 1;
   1c5d0:	01 e0       	ldi	r16, 0x01	; 1
   1c5d2:	10 e0       	ldi	r17, 0x00	; 0
    {
        help();
        result = 1;
    }

    if (MATCHI(ptr,"dir") )
   1c5d4:	66 ec       	ldi	r22, 0xC6	; 198
   1c5d6:	7b e0       	ldi	r23, 0x0B	; 11
   1c5d8:	c7 01       	movw	r24, r14
   1c5da:	0e 94 f2 31 	call	0x63e4	; 0x63e4 <MATCHI>
   1c5de:	89 2b       	or	r24, r25
   1c5e0:	51 f1       	breq	.+84     	; 0x1c636 <user_task.part.1+0x266>
   1c5e2:	86 e0       	ldi	r24, 0x06	; 6
   1c5e4:	68 2e       	mov	r6, r24
   1c5e6:	77 24       	eor	r7, r7
   1c5e8:	73 94       	inc	r7
   1c5ea:	6c 0e       	add	r6, r28
   1c5ec:	7d 1e       	adc	r7, r29
   1c5ee:	f2 e0       	ldi	r31, 0x02	; 2
   1c5f0:	6f 0e       	add	r6, r31
   1c5f2:	71 1c       	adc	r7, r1
   1c5f4:	ee 24       	eor	r14, r14
   1c5f6:	e3 94       	inc	r14
   1c5f8:	f1 2c       	mov	r15, r1
   1c5fa:	01 e0       	ldi	r16, 0x01	; 1
   1c5fc:	10 e0       	ldi	r17, 0x00	; 0
    {
        int i;
        int args = 0;
        result = 1;
        for(i=1;i<argc;++i)
   1c5fe:	ec 14       	cp	r14, r12
   1c600:	fd 04       	cpc	r15, r13
   1c602:	74 f4       	brge	.+28     	; 0x1c620 <user_task.part.1+0x250>
        {
            if(fatfs_ls(argv[i]) == 0)
   1c604:	f3 01       	movw	r30, r6
   1c606:	81 91       	ld	r24, Z+
   1c608:	91 91       	ld	r25, Z+
   1c60a:	3f 01       	movw	r6, r30
   1c60c:	0e 94 19 73 	call	0xe632	; 0xe632 <fatfs_ls>
   1c610:	89 2b       	or	r24, r25
   1c612:	11 f4       	brne	.+4      	; 0x1c618 <user_task.part.1+0x248>
				result = -1;
   1c614:	0f ef       	ldi	r16, 0xFF	; 255
   1c616:	1f ef       	ldi	r17, 0xFF	; 255
    if (MATCHI(ptr,"dir") )
    {
        int i;
        int args = 0;
        result = 1;
        for(i=1;i<argc;++i)
   1c618:	ff ef       	ldi	r31, 0xFF	; 255
   1c61a:	ef 1a       	sub	r14, r31
   1c61c:	ff 0a       	sbc	r15, r31
   1c61e:	ef cf       	rjmp	.-34     	; 0x1c5fe <user_task.part.1+0x22e>
        {
            if(fatfs_ls(argv[i]) == 0)
				result = -1;
            ++args;
        }
        if(!args)
   1c620:	ea 94       	dec	r14
   1c622:	ef 28       	or	r14, r15
   1c624:	41 f4       	brne	.+16     	; 0x1c636 <user_task.part.1+0x266>
        {
            if(fatfs_ls("") == 0)
   1c626:	8e e0       	ldi	r24, 0x0E	; 14
   1c628:	9c e0       	ldi	r25, 0x0C	; 12
   1c62a:	0e 94 19 73 	call	0xe632	; 0xe632 <fatfs_ls>
   1c62e:	89 2b       	or	r24, r25
   1c630:	11 f4       	brne	.+4      	; 0x1c636 <user_task.part.1+0x266>
				result = -1;
   1c632:	0f ef       	ldi	r16, 0xFF	; 255
   1c634:	1f ef       	ldi	r17, 0xFF	; 255
        }
    }

	if( (ret = gpib_tests(argc,argv)) )
   1c636:	be 01       	movw	r22, r28
   1c638:	6a 5f       	subi	r22, 0xFA	; 250
   1c63a:	7e 4f       	sbci	r23, 0xFE	; 254
   1c63c:	c6 01       	movw	r24, r12
   1c63e:	0e 94 82 91 	call	0x12304	; 0x12304 <gpib_tests>
   1c642:	00 97       	sbiw	r24, 0x00	; 0
   1c644:	51 f0       	breq	.+20     	; 0x1c65a <user_task.part.1+0x28a>
    {
		if(ret < 0)
   1c646:	97 fd       	sbrc	r25, 7
   1c648:	03 c0       	rjmp	.+6      	; 0x1c650 <user_task.part.1+0x280>
			result = -1;
		else
			result = 1;
   1c64a:	01 e0       	ldi	r16, 0x01	; 1
   1c64c:	10 e0       	ldi	r17, 0x00	; 0
   1c64e:	02 c0       	rjmp	.+4      	; 0x1c654 <user_task.part.1+0x284>
    }

	if( (ret = gpib_tests(argc,argv)) )
    {
		if(ret < 0)
			result = -1;
   1c650:	0f ef       	ldi	r16, 0xFF	; 255
   1c652:	1f ef       	ldi	r17, 0xFF	; 255
		else
			result = 1;
// Restore GPIB BUS states
        gpib_init_devices();
   1c654:	0e 94 96 8c 	call	0x1192c	; 0x1192c <gpib_init_devices>
   1c658:	0f c0       	rjmp	.+30     	; 0x1c678 <user_task.part.1+0x2a8>
    }

#ifdef POSIX_TESTS
    else if( (ret = posix_tests(argc,argv)) )
   1c65a:	be 01       	movw	r22, r28
   1c65c:	6a 5f       	subi	r22, 0xFA	; 250
   1c65e:	7e 4f       	sbci	r23, 0xFE	; 254
   1c660:	c6 01       	movw	r24, r12
   1c662:	0e 94 67 81 	call	0x102ce	; 0x102ce <posix_tests>
   1c666:	00 97       	sbiw	r24, 0x00	; 0
   1c668:	39 f0       	breq	.+14     	; 0x1c678 <user_task.part.1+0x2a8>
	{
		if(ret < 0)
   1c66a:	97 fd       	sbrc	r25, 7
   1c66c:	03 c0       	rjmp	.+6      	; 0x1c674 <user_task.part.1+0x2a4>
			result = -1;
		else
			result = 1;
   1c66e:	01 e0       	ldi	r16, 0x01	; 1
   1c670:	10 e0       	ldi	r17, 0x00	; 0
   1c672:	02 c0       	rjmp	.+4      	; 0x1c678 <user_task.part.1+0x2a8>

#ifdef POSIX_TESTS
    else if( (ret = posix_tests(argc,argv)) )
	{
		if(ret < 0)
			result = -1;
   1c674:	0f ef       	ldi	r16, 0xFF	; 255
   1c676:	1f ef       	ldi	r17, 0xFF	; 255
			result = 1;
	}
#endif

#ifdef FATFS_TESTS
    if( (ret = fatfs_tests(argc,argv) ))
   1c678:	be 01       	movw	r22, r28
   1c67a:	6a 5f       	subi	r22, 0xFA	; 250
   1c67c:	7e 4f       	sbci	r23, 0xFE	; 254
   1c67e:	c6 01       	movw	r24, r12
   1c680:	0e 94 ec 73 	call	0xe7d8	; 0xe7d8 <fatfs_tests>
   1c684:	00 97       	sbiw	r24, 0x00	; 0
   1c686:	39 f0       	breq	.+14     	; 0x1c696 <user_task.part.1+0x2c6>
	{
		if(ret < 0)
   1c688:	97 fd       	sbrc	r25, 7
   1c68a:	03 c0       	rjmp	.+6      	; 0x1c692 <user_task.part.1+0x2c2>
			result = -1;
		else
			result = 1;
   1c68c:	01 e0       	ldi	r16, 0x01	; 1
   1c68e:	10 e0       	ldi	r17, 0x00	; 0
   1c690:	02 c0       	rjmp	.+4      	; 0x1c696 <user_task.part.1+0x2c6>

#ifdef FATFS_TESTS
    if( (ret = fatfs_tests(argc,argv) ))
	{
		if(ret < 0)
			result = -1;
   1c692:	0f ef       	ldi	r16, 0xFF	; 255
   1c694:	1f ef       	ldi	r17, 0xFF	; 255
			result = 1;
	}
#endif

#ifdef LIF_SUPPORT
    if( (ret = lif_tests(argc,argv)) )
   1c696:	be 01       	movw	r22, r28
   1c698:	6a 5f       	subi	r22, 0xFA	; 250
   1c69a:	7e 4f       	sbci	r23, 0xFE	; 254
   1c69c:	c6 01       	movw	r24, r12
   1c69e:	13 db       	rcall	.-2522   	; 0x1bcc6 <lif_tests>
   1c6a0:	00 97       	sbiw	r24, 0x00	; 0
   1c6a2:	39 f0       	breq	.+14     	; 0x1c6b2 <user_task.part.1+0x2e2>
	{
		if(ret < 0)
   1c6a4:	97 fd       	sbrc	r25, 7
   1c6a6:	03 c0       	rjmp	.+6      	; 0x1c6ae <user_task.part.1+0x2de>
			result = -1;
		else
			result = 1;
   1c6a8:	01 e0       	ldi	r16, 0x01	; 1
   1c6aa:	10 e0       	ldi	r17, 0x00	; 0
   1c6ac:	02 c0       	rjmp	.+4      	; 0x1c6b2 <user_task.part.1+0x2e2>

#ifdef LIF_SUPPORT
    if( (ret = lif_tests(argc,argv)) )
	{
		if(ret < 0)
			result = -1;
   1c6ae:	0f ef       	ldi	r16, 0xFF	; 255
   1c6b0:	1f ef       	ldi	r17, 0xFF	; 255
		else
			result = 1;
	}
#endif
    if( (ret = drives_tests(argc,argv)) )
   1c6b2:	be 01       	movw	r22, r28
   1c6b4:	6a 5f       	subi	r22, 0xFA	; 250
   1c6b6:	7e 4f       	sbci	r23, 0xFE	; 254
   1c6b8:	c6 01       	movw	r24, r12
   1c6ba:	0e 94 54 a2 	call	0x144a8	; 0x144a8 <drives_tests>
   1c6be:	00 97       	sbiw	r24, 0x00	; 0
   1c6c0:	19 f0       	breq	.+6      	; 0x1c6c8 <user_task.part.1+0x2f8>
	{
		if(ret < 0)
   1c6c2:	97 ff       	sbrs	r25, 7
   1c6c4:	04 c0       	rjmp	.+8      	; 0x1c6ce <user_task.part.1+0x2fe>
   1c6c6:	09 c0       	rjmp	.+18     	; 0x1c6da <user_task.part.1+0x30a>
			result = -1;
		else
			result = 1;
	}

    if(result == 1)
   1c6c8:	01 30       	cpi	r16, 0x01	; 1
   1c6ca:	11 05       	cpc	r17, r1
   1c6cc:	19 f4       	brne	.+6      	; 0x1c6d4 <user_task.part.1+0x304>
        printf("OK\n");
   1c6ce:	88 ea       	ldi	r24, 0xA8	; 168
   1c6d0:	98 e4       	ldi	r25, 0x48	; 72
   1c6d2:	05 c0       	rjmp	.+10     	; 0x1c6de <user_task.part.1+0x30e>
	else if(result == -1)
   1c6d4:	0f 3f       	cpi	r16, 0xFF	; 255
   1c6d6:	1f 4f       	sbci	r17, 0xFF	; 255
   1c6d8:	59 f4       	brne	.+22     	; 0x1c6f0 <user_task.part.1+0x320>
        printf("Command FAILED\n");
   1c6da:	88 e9       	ldi	r24, 0x98	; 152
   1c6dc:	98 e4       	ldi	r25, 0x48	; 72
   1c6de:	a0 e0       	ldi	r26, 0x00	; 0
   1c6e0:	ed b7       	in	r30, 0x3d	; 61
   1c6e2:	fe b7       	in	r31, 0x3e	; 62
   1c6e4:	81 83       	std	Z+1, r24	; 0x01
   1c6e6:	92 83       	std	Z+2, r25	; 0x02
   1c6e8:	a3 83       	std	Z+3, r26	; 0x03
   1c6ea:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1c6ee:	33 c0       	rjmp	.+102    	; 0x1c756 <user_task.part.1+0x386>
    else
	{
        printf("Invalid Command\n");
   1c6f0:	87 e8       	ldi	r24, 0x87	; 135
   1c6f2:	98 e4       	ldi	r25, 0x48	; 72
   1c6f4:	a0 e0       	ldi	r26, 0x00	; 0
   1c6f6:	ed b7       	in	r30, 0x3d	; 61
   1c6f8:	fe b7       	in	r31, 0x3e	; 62
   1c6fa:	81 83       	std	Z+1, r24	; 0x01
   1c6fc:	92 83       	std	Z+2, r25	; 0x02
   1c6fe:	a3 83       	std	Z+3, r26	; 0x03
   1c700:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        printf("    Argument count = %d\n", argc);
   1c704:	ed b7       	in	r30, 0x3d	; 61
   1c706:	fe b7       	in	r31, 0x3e	; 62
   1c708:	d5 82       	std	Z+5, r13	; 0x05
   1c70a:	c4 82       	std	Z+4, r12	; 0x04
   1c70c:	8e e6       	ldi	r24, 0x6E	; 110
   1c70e:	98 e4       	ldi	r25, 0x48	; 72
   1c710:	a0 e0       	ldi	r26, 0x00	; 0
   1c712:	81 83       	std	Z+1, r24	; 0x01
   1c714:	92 83       	std	Z+2, r25	; 0x02
   1c716:	a3 83       	std	Z+3, r26	; 0x03
   1c718:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
   1c71c:	8e 01       	movw	r16, r28
   1c71e:	0a 5f       	subi	r16, 0xFA	; 250
   1c720:	1e 4f       	sbci	r17, 0xFE	; 254
		for(i=0;i<argc;++i)
   1c722:	e1 2c       	mov	r14, r1
   1c724:	f1 2c       	mov	r15, r1
			printf("       [%s]\n", argv[i]);
   1c726:	81 e6       	ldi	r24, 0x61	; 97
   1c728:	98 e4       	ldi	r25, 0x48	; 72
   1c72a:	3c 01       	movw	r6, r24
   1c72c:	81 2c       	mov	r8, r1
        printf("Command FAILED\n");
    else
	{
        printf("Invalid Command\n");
        printf("    Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c72e:	ec 14       	cp	r14, r12
   1c730:	fd 04       	cpc	r15, r13
   1c732:	8c f4       	brge	.+34     	; 0x1c756 <user_task.part.1+0x386>
			printf("       [%s]\n", argv[i]);
   1c734:	f8 01       	movw	r30, r16
   1c736:	81 91       	ld	r24, Z+
   1c738:	91 91       	ld	r25, Z+
   1c73a:	8f 01       	movw	r16, r30
   1c73c:	ed b7       	in	r30, 0x3d	; 61
   1c73e:	fe b7       	in	r31, 0x3e	; 62
   1c740:	95 83       	std	Z+5, r25	; 0x05
   1c742:	84 83       	std	Z+4, r24	; 0x04
   1c744:	61 82       	std	Z+1, r6	; 0x01
   1c746:	72 82       	std	Z+2, r7	; 0x02
   1c748:	83 82       	std	Z+3, r8	; 0x03
   1c74a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
        printf("Command FAILED\n");
    else
	{
        printf("Invalid Command\n");
        printf("    Argument count = %d\n", argc);
		for(i=0;i<argc;++i)
   1c74e:	ff ef       	ldi	r31, 0xFF	; 255
   1c750:	ef 1a       	sub	r14, r31
   1c752:	ff 0a       	sbc	r15, r31
   1c754:	ec cf       	rjmp	.-40     	; 0x1c72e <user_task.part.1+0x35e>
			printf("       [%s]\n", argv[i]);
	}
}
   1c756:	c5 59       	subi	r28, 0x95	; 149
   1c758:	de 4f       	sbci	r29, 0xFE	; 254
   1c75a:	0f b6       	in	r0, 0x3f	; 63
   1c75c:	f8 94       	cli
   1c75e:	de bf       	out	0x3e, r29	; 62
   1c760:	0f be       	out	0x3f, r0	; 63
   1c762:	cd bf       	out	0x3d, r28	; 61
   1c764:	df 91       	pop	r29
   1c766:	cf 91       	pop	r28
   1c768:	1f 91       	pop	r17
   1c76a:	0f 91       	pop	r16
   1c76c:	ff 90       	pop	r15
   1c76e:	ef 90       	pop	r14
   1c770:	df 90       	pop	r13
   1c772:	cf 90       	pop	r12
   1c774:	8f 90       	pop	r8
   1c776:	7f 90       	pop	r7
   1c778:	6f 90       	pop	r6
   1c77a:	08 95       	ret

0001c77c <user_task>:
	int ret;
    char *argv[51];
    char line[256];


    if(gpib)
   1c77c:	81 11       	cpse	r24, r1
        gpib_task();
   1c77e:	0e 94 01 91 	call	0x12202	; 0x12202 <gpib_task>

    if(!kbhit(0))
   1c782:	80 e0       	ldi	r24, 0x00	; 0
   1c784:	0e 94 87 29 	call	0x530e	; 0x530e <uart_rx_count>
   1c788:	89 2b       	or	r24, r25
   1c78a:	09 f0       	breq	.+2      	; 0x1c78e <user_task+0x12>
   1c78c:	21 ce       	rjmp	.-958    	; 0x1c3d0 <user_task.part.1>
   1c78e:	08 95       	ret

0001c790 <update_drive_counts>:
	}
}

#ifdef LCD_SUPPORT
void update_drive_counts()
{
   1c790:	a9 e2       	ldi	r26, 0x29	; 41
   1c792:	b0 e0       	ldi	r27, 0x00	; 0
   1c794:	ed ec       	ldi	r30, 0xCD	; 205
   1c796:	f3 ee       	ldi	r31, 0xE3	; 227
   1c798:	a7 c2       	rjmp	.+1358   	; 0x1cce8 <__prologue_saves__+0x1c>
	char tmp[32];

    sprintf((char *) tmp, "SS80=%d AMIGO=%d",
   1c79a:	83 e0       	ldi	r24, 0x03	; 3
   1c79c:	0e 94 6e 96 	call	0x12cdc	; 0x12cdc <count_drive_types>
   1c7a0:	18 2f       	mov	r17, r24
   1c7a2:	81 e0       	ldi	r24, 0x01	; 1
   1c7a4:	0e 94 6e 96 	call	0x12cdc	; 0x12cdc <count_drive_types>
   1c7a8:	08 2e       	mov	r0, r24
   1c7aa:	00 0c       	add	r0, r0
   1c7ac:	99 0b       	sbc	r25, r25
   1c7ae:	ed b7       	in	r30, 0x3d	; 61
   1c7b0:	fe b7       	in	r31, 0x3e	; 62
   1c7b2:	91 87       	std	Z+9, r25	; 0x09
   1c7b4:	80 87       	std	Z+8, r24	; 0x08
   1c7b6:	81 2f       	mov	r24, r17
   1c7b8:	11 0f       	add	r17, r17
   1c7ba:	99 0b       	sbc	r25, r25
   1c7bc:	97 83       	std	Z+7, r25	; 0x07
   1c7be:	86 83       	std	Z+6, r24	; 0x06
   1c7c0:	80 e5       	ldi	r24, 0x50	; 80
   1c7c2:	98 e4       	ldi	r25, 0x48	; 72
   1c7c4:	a0 e0       	ldi	r26, 0x00	; 0
   1c7c6:	83 83       	std	Z+3, r24	; 0x03
   1c7c8:	94 83       	std	Z+4, r25	; 0x04
   1c7ca:	a5 83       	std	Z+5, r26	; 0x05
   1c7cc:	8e 01       	movw	r16, r28
   1c7ce:	06 5f       	subi	r16, 0xF6	; 246
   1c7d0:	1f 4f       	sbci	r17, 0xFF	; 255
   1c7d2:	12 83       	std	Z+2, r17	; 0x02
   1c7d4:	01 83       	std	Z+1, r16	; 0x01
   1c7d6:	0e 94 91 46 	call	0x8d22	; 0x8d22 <sprintf_P>
        (int) count_drive_types(SS80_TYPE),
        (int) count_drive_types(AMIGO_TYPE) );
	sprintf((char *) _line1, "%-16s", tmp);
   1c7da:	ed b7       	in	r30, 0x3d	; 61
   1c7dc:	fe b7       	in	r31, 0x3e	; 62
   1c7de:	17 83       	std	Z+7, r17	; 0x07
   1c7e0:	06 83       	std	Z+6, r16	; 0x06
   1c7e2:	8a e4       	ldi	r24, 0x4A	; 74
   1c7e4:	98 e4       	ldi	r25, 0x48	; 72
   1c7e6:	a0 e0       	ldi	r26, 0x00	; 0
   1c7e8:	83 83       	std	Z+3, r24	; 0x03
   1c7ea:	94 83       	std	Z+4, r25	; 0x04
   1c7ec:	a5 83       	std	Z+5, r26	; 0x05
   1c7ee:	8c e0       	ldi	r24, 0x0C	; 12
   1c7f0:	93 e0       	ldi	r25, 0x03	; 3
   1c7f2:	92 83       	std	Z+2, r25	; 0x02
   1c7f4:	81 83       	std	Z+1, r24	; 0x01
   1c7f6:	0e 94 91 46 	call	0x8d22	; 0x8d22 <sprintf_P>
}
   1c7fa:	a9 96       	adiw	r28, 0x29	; 41
   1c7fc:	e4 e0       	ldi	r30, 0x04	; 4
   1c7fe:	90 c2       	rjmp	.+1312   	; 0x1cd20 <__epilogue_restores__+0x1c>

0001c800 <main>:
#endif

/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1c800:	cf 93       	push	r28
   1c802:	df 93       	push	r29
   1c804:	cd b7       	in	r28, 0x3d	; 61
   1c806:	de b7       	in	r29, 0x3e	; 62
   1c808:	63 97       	sbiw	r28, 0x13	; 19
   1c80a:	0f b6       	in	r0, 0x3f	; 63
   1c80c:	f8 94       	cli
   1c80e:	de bf       	out	0x3e, r29	; 62
   1c810:	0f be       	out	0x3f, r0	; 63
   1c812:	cd bf       	out	0x3d, r28	; 61
    ts_t ts;
    uint32_t actual,baud;

	clear_error();		// Clear error state
   1c814:	0e 94 a4 26 	call	0x4d48	; 0x4d48 <clear_error>

	GPIO_PIN_LOW(LED1);	// Activity status
   1c818:	46 98       	cbi	0x08, 6	; 8
   1c81a:	3e 9a       	sbi	0x07, 6	; 7

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1c81c:	0e 94 41 85 	call	0x10a82	; 0x10a82 <gpib_bus_init>
// BAUD setting moved to Makefile
    baud = BAUD;

///@ Initialize UART early
/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud);                  // Serial Port Initialize
   1c820:	40 e0       	ldi	r20, 0x00	; 0
   1c822:	52 ec       	ldi	r21, 0xC2	; 194
   1c824:	61 e0       	ldi	r22, 0x01	; 1
   1c826:	70 e0       	ldi	r23, 0x00	; 0
   1c828:	80 e0       	ldi	r24, 0x00	; 0
   1c82a:	0e 94 f2 28 	call	0x51e4	; 0x51e4 <uart_init>
   1c82e:	6b 01       	movw	r12, r22
   1c830:	7c 01       	movw	r14, r24

///@brief Power up delay
    delayms(200);
   1c832:	68 ec       	ldi	r22, 0xC8	; 200
   1c834:	70 e0       	ldi	r23, 0x00	; 0
   1c836:	80 e0       	ldi	r24, 0x00	; 0
   1c838:	90 e0       	ldi	r25, 0x00	; 0
   1c83a:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <delayms>

    sep();
   1c83e:	0e 94 b4 31 	call	0x6368	; 0x6368 <sep>
    printf("Start\n");
   1c842:	83 e4       	ldi	r24, 0x43	; 67
   1c844:	98 e4       	ldi	r25, 0x48	; 72
   1c846:	a0 e0       	ldi	r26, 0x00	; 0
   1c848:	ed b7       	in	r30, 0x3d	; 61
   1c84a:	fe b7       	in	r31, 0x3e	; 62
   1c84c:	81 83       	std	Z+1, r24	; 0x01
   1c84e:	92 83       	std	Z+2, r25	; 0x02
   1c850:	a3 83       	std	Z+3, r26	; 0x03
   1c852:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1c856:	80 e0       	ldi	r24, 0x00	; 0
   1c858:	9d e2       	ldi	r25, 0x2D	; 45
   1c85a:	a1 e3       	ldi	r26, 0x31	; 49
   1c85c:	b1 e0       	ldi	r27, 0x01	; 1
   1c85e:	ed b7       	in	r30, 0x3d	; 61
   1c860:	fe b7       	in	r31, 0x3e	; 62
   1c862:	84 83       	std	Z+4, r24	; 0x04
   1c864:	95 83       	std	Z+5, r25	; 0x05
   1c866:	a6 83       	std	Z+6, r26	; 0x06
   1c868:	b7 83       	std	Z+7, r27	; 0x07
   1c86a:	82 e3       	ldi	r24, 0x32	; 50
   1c86c:	98 e4       	ldi	r25, 0x48	; 72
   1c86e:	a0 e0       	ldi	r26, 0x00	; 0
   1c870:	81 83       	std	Z+1, r24	; 0x01
   1c872:	92 83       	std	Z+2, r25	; 0x02
   1c874:	a3 83       	std	Z+3, r26	; 0x03
   1c876:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1c87a:	ed b7       	in	r30, 0x3d	; 61
   1c87c:	fe b7       	in	r31, 0x3e	; 62
   1c87e:	c0 86       	std	Z+8, r12	; 0x08
   1c880:	d1 86       	std	Z+9, r13	; 0x09
   1c882:	e2 86       	std	Z+10, r14	; 0x0a
   1c884:	f3 86       	std	Z+11, r15	; 0x0b
   1c886:	80 e0       	ldi	r24, 0x00	; 0
   1c888:	92 ec       	ldi	r25, 0xC2	; 194
   1c88a:	a1 e0       	ldi	r26, 0x01	; 1
   1c88c:	b0 e0       	ldi	r27, 0x00	; 0
   1c88e:	84 83       	std	Z+4, r24	; 0x04
   1c890:	95 83       	std	Z+5, r25	; 0x05
   1c892:	a6 83       	std	Z+6, r26	; 0x06
   1c894:	b7 83       	std	Z+7, r27	; 0x07
   1c896:	8b e0       	ldi	r24, 0x0B	; 11
   1c898:	98 e4       	ldi	r25, 0x48	; 72
   1c89a:	a0 e0       	ldi	r26, 0x00	; 0
   1c89c:	81 83       	std	Z+1, r24	; 0x01
   1c89e:	92 83       	std	Z+2, r25	; 0x02
   1c8a0:	a3 83       	std	Z+3, r26	; 0x03
   1c8a2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

    init_timers();
   1c8a6:	0e 94 9a 35 	call	0x6b34	; 0x6b34 <init_timers>

    sep();
   1c8aa:	0e 94 b4 31 	call	0x6368	; 0x6368 <sep>
    printf("HP85 Disk and Device Emulator\n");
   1c8ae:	8c ee       	ldi	r24, 0xEC	; 236
   1c8b0:	97 e4       	ldi	r25, 0x47	; 71
   1c8b2:	a0 e0       	ldi	r26, 0x00	; 0
   1c8b4:	ed b7       	in	r30, 0x3d	; 61
   1c8b6:	fe b7       	in	r31, 0x3e	; 62
   1c8b8:	81 83       	std	Z+1, r24	; 0x01
   1c8ba:	92 83       	std	Z+2, r25	; 0x02
   1c8bc:	a3 83       	std	Z+3, r26	; 0x03
   1c8be:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1c8c2:	8f ec       	ldi	r24, 0xCF	; 207
   1c8c4:	97 e4       	ldi	r25, 0x47	; 71
   1c8c6:	a0 e0       	ldi	r26, 0x00	; 0
   1c8c8:	ed b7       	in	r30, 0x3d	; 61
   1c8ca:	fe b7       	in	r31, 0x3e	; 62
   1c8cc:	81 83       	std	Z+1, r24	; 0x01
   1c8ce:	92 83       	std	Z+2, r25	; 0x02
   1c8d0:	a3 83       	std	Z+3, r26	; 0x03
   1c8d2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf(" GNU version 3\n");
   1c8d6:	8f eb       	ldi	r24, 0xBF	; 191
   1c8d8:	97 e4       	ldi	r25, 0x47	; 71
   1c8da:	a0 e0       	ldi	r26, 0x00	; 0
   1c8dc:	ed b7       	in	r30, 0x3d	; 61
   1c8de:	fe b7       	in	r31, 0x3e	; 62
   1c8e0:	81 83       	std	Z+1, r24	; 0x01
   1c8e2:	92 83       	std	Z+2, r25	; 0x02
   1c8e4:	a3 83       	std	Z+3, r26	; 0x03
   1c8e6:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1c8ea:	88 e9       	ldi	r24, 0x98	; 152
   1c8ec:	97 e4       	ldi	r25, 0x47	; 71
   1c8ee:	a0 e0       	ldi	r26, 0x00	; 0
   1c8f0:	ed b7       	in	r30, 0x3d	; 61
   1c8f2:	fe b7       	in	r31, 0x3e	; 62
   1c8f4:	81 83       	std	Z+1, r24	; 0x01
   1c8f6:	92 83       	std	Z+2, r25	; 0x02
   1c8f8:	a3 83       	std	Z+3, r26	; 0x03
   1c8fa:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1c8fe:	8c ea       	ldi	r24, 0xAC	; 172
   1c900:	96 e1       	ldi	r25, 0x16	; 22
   1c902:	ed b7       	in	r30, 0x3d	; 61
   1c904:	fe b7       	in	r31, 0x3e	; 62
   1c906:	95 83       	std	Z+5, r25	; 0x05
   1c908:	84 83       	std	Z+4, r24	; 0x04
   1c90a:	8e e7       	ldi	r24, 0x7E	; 126
   1c90c:	97 e4       	ldi	r25, 0x47	; 71
   1c90e:	a0 e0       	ldi	r26, 0x00	; 0
   1c910:	81 83       	std	Z+1, r24	; 0x01
   1c912:	92 83       	std	Z+2, r25	; 0x02
   1c914:	a3 83       	std	Z+3, r26	; 0x03
   1c916:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1c91a:	80 ed       	ldi	r24, 0xD0	; 208
   1c91c:	96 e1       	ldi	r25, 0x16	; 22
   1c91e:	ed b7       	in	r30, 0x3d	; 61
   1c920:	fe b7       	in	r31, 0x3e	; 62
   1c922:	95 83       	std	Z+5, r25	; 0x05
   1c924:	84 83       	std	Z+4, r24	; 0x04
   1c926:	84 e6       	ldi	r24, 0x64	; 100
   1c928:	97 e4       	ldi	r25, 0x47	; 71
   1c92a:	a0 e0       	ldi	r26, 0x00	; 0
   1c92c:	81 83       	std	Z+1, r24	; 0x01
   1c92e:	92 83       	std	Z+2, r25	; 0x02
   1c930:	a3 83       	std	Z+3, r26	; 0x03
   1c932:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

    sep();
   1c936:	0e 94 b4 31 	call	0x6368	; 0x6368 <sep>
    PrintFree();
   1c93a:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <PrintFree>

    sep();
   1c93e:	0e 94 b4 31 	call	0x6368	; 0x6368 <sep>
    // delayms(200);                                 ///@brief Power up delay

///@ initialize SPI bus
    printf("Initializing SPI bus\n");
   1c942:	8e e4       	ldi	r24, 0x4E	; 78
   1c944:	97 e4       	ldi	r25, 0x47	; 71
   1c946:	a0 e0       	ldi	r26, 0x00	; 0
   1c948:	ed b7       	in	r30, 0x3d	; 61
   1c94a:	fe b7       	in	r31, 0x3e	; 62
   1c94c:	81 83       	std	Z+1, r24	; 0x01
   1c94e:	92 83       	std	Z+2, r25	; 0x02
   1c950:	a3 83       	std	Z+3, r26	; 0x03
   1c952:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1c956:	4b e0       	ldi	r20, 0x0B	; 11
   1c958:	50 e0       	ldi	r21, 0x00	; 0
   1c95a:	60 e2       	ldi	r22, 0x20	; 32
   1c95c:	71 ea       	ldi	r23, 0xA1	; 161
   1c95e:	87 e0       	ldi	r24, 0x07	; 7
   1c960:	90 e0       	ldi	r25, 0x00	; 0
   1c962:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <spi_init>

///@ initialize I2C bus
    printf("Initializing I2C bus\n");
   1c966:	88 e3       	ldi	r24, 0x38	; 56
   1c968:	97 e4       	ldi	r25, 0x47	; 71
   1c96a:	a0 e0       	ldi	r26, 0x00	; 0
   1c96c:	ed b7       	in	r30, 0x3d	; 61
   1c96e:	fe b7       	in	r31, 0x3e	; 62
   1c970:	81 83       	std	Z+1, r24	; 0x01
   1c972:	92 83       	std	Z+2, r25	; 0x02
   1c974:	a3 83       	std	Z+3, r26	; 0x03
   1c976:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
	i2c_init(100000);
   1c97a:	60 ea       	ldi	r22, 0xA0	; 160
   1c97c:	76 e8       	ldi	r23, 0x86	; 134
   1c97e:	81 e0       	ldi	r24, 0x01	; 1
   1c980:	90 e0       	ldi	r25, 0x00	; 0
   1c982:	0e 94 c3 2b 	call	0x5786	; 0x5786 <i2c_init>
    sep();
   1c986:	0e 94 b4 31 	call	0x6368	; 0x6368 <sep>

///@ initialize clock by RTC if we have it
    printf("Initializing RTC\n");
   1c98a:	86 e2       	ldi	r24, 0x26	; 38
   1c98c:	97 e4       	ldi	r25, 0x47	; 71
   1c98e:	a0 e0       	ldi	r26, 0x00	; 0
   1c990:	ed b7       	in	r30, 0x3d	; 61
   1c992:	fe b7       	in	r31, 0x3e	; 62
   1c994:	81 83       	std	Z+1, r24	; 0x01
   1c996:	92 83       	std	Z+2, r25	; 0x02
   1c998:	a3 83       	std	Z+3, r26	; 0x03
   1c99a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    clock_clear();
   1c99e:	0e 94 57 35 	call	0x6aae	; 0x6aae <clock_clear>
    printf("Clock cleared\n");
   1c9a2:	87 e1       	ldi	r24, 0x17	; 23
   1c9a4:	97 e4       	ldi	r25, 0x47	; 71
   1c9a6:	a0 e0       	ldi	r26, 0x00	; 0
   1c9a8:	ed b7       	in	r30, 0x3d	; 61
   1c9aa:	fe b7       	in	r31, 0x3e	; 62
   1c9ac:	81 83       	std	Z+1, r24	; 0x01
   1c9ae:	92 83       	std	Z+2, r25	; 0x02
   1c9b0:	a3 83       	std	Z+3, r26	; 0x03
   1c9b2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1c9b6:	be 01       	movw	r22, r28
   1c9b8:	64 5f       	subi	r22, 0xF4	; 244
   1c9ba:	7f 4f       	sbci	r23, 0xFF	; 255
   1c9bc:	80 e0       	ldi	r24, 0x00	; 0
   1c9be:	90 e0       	ldi	r25, 0x00	; 0
   1c9c0:	0e 94 f7 35 	call	0x6bee	; 0x6bee <clock_getres>
    printf("System Task Interrupt Rate: %ld Nano Seconds\n", (long) ts.tv_nsec);
   1c9c4:	88 89       	ldd	r24, Y+16	; 0x10
   1c9c6:	99 89       	ldd	r25, Y+17	; 0x11
   1c9c8:	aa 89       	ldd	r26, Y+18	; 0x12
   1c9ca:	bb 89       	ldd	r27, Y+19	; 0x13
   1c9cc:	ed b7       	in	r30, 0x3d	; 61
   1c9ce:	fe b7       	in	r31, 0x3e	; 62
   1c9d0:	84 83       	std	Z+4, r24	; 0x04
   1c9d2:	95 83       	std	Z+5, r25	; 0x05
   1c9d4:	a6 83       	std	Z+6, r26	; 0x06
   1c9d6:	b7 83       	std	Z+7, r27	; 0x07
   1c9d8:	89 ee       	ldi	r24, 0xE9	; 233
   1c9da:	96 e4       	ldi	r25, 0x46	; 70
   1c9dc:	a0 e0       	ldi	r26, 0x00	; 0
   1c9de:	81 83       	std	Z+1, r24	; 0x01
   1c9e0:	92 83       	std	Z+2, r25	; 0x02
   1c9e2:	a3 83       	std	Z+3, r26	; 0x03
   1c9e4:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

// Timezone offset we just use local time
    initialize_clock(0);
   1c9e8:	80 e0       	ldi	r24, 0x00	; 0
   1c9ea:	90 e0       	ldi	r25, 0x00	; 0
   1c9ec:	0e 94 d2 3c 	call	0x79a4	; 0x79a4 <initialize_clock>
    display_clock();
   1c9f0:	0e 94 49 3d 	call	0x7a92	; 0x7a92 <display_clock>
    sep();
   1c9f4:	0e 94 b4 31 	call	0x6368	; 0x6368 <sep>

///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
	lcd_setup();
   1c9f8:	cc db       	rcall	.-2152   	; 0x1c192 <lcd_setup>
#endif

///@ initialize MMC bus
    printf("MMC initializing start\n");
   1c9fa:	81 ed       	ldi	r24, 0xD1	; 209
   1c9fc:	96 e4       	ldi	r25, 0x46	; 70
   1c9fe:	a0 e0       	ldi	r26, 0x00	; 0
   1ca00:	ed b7       	in	r30, 0x3d	; 61
   1ca02:	fe b7       	in	r31, 0x3e	; 62
   1ca04:	81 83       	std	Z+1, r24	; 0x01
   1ca06:	92 83       	std	Z+2, r25	; 0x02
   1ca08:	a3 83       	std	Z+3, r26	; 0x03
   1ca0a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    if ( !mmc_init(1) )
   1ca0e:	81 e0       	ldi	r24, 0x01	; 1
   1ca10:	90 e0       	ldi	r25, 0x00	; 0
   1ca12:	0e 94 c4 6e 	call	0xdd88	; 0xdd88 <mmc_init>
   1ca16:	89 2b       	or	r24, r25
   1ca18:	51 f4       	brne	.+20     	; 0x1ca2e <main+0x22e>
		printf("MMC initialized\n");
   1ca1a:	80 ec       	ldi	r24, 0xC0	; 192
   1ca1c:	96 e4       	ldi	r25, 0x46	; 70
   1ca1e:	a0 e0       	ldi	r26, 0x00	; 0
   1ca20:	ed b7       	in	r30, 0x3d	; 61
   1ca22:	fe b7       	in	r31, 0x3e	; 62
   1ca24:	81 83       	std	Z+1, r24	; 0x01
   1ca26:	92 83       	std	Z+2, r25	; 0x02
   1ca28:	a3 83       	std	Z+3, r26	; 0x03
   1ca2a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    sep();
   1ca2e:	0e 94 b4 31 	call	0x6368	; 0x6368 <sep>

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1ca32:	0e 94 41 85 	call	0x10a82	; 0x10a82 <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1ca36:	8a ea       	ldi	r24, 0xAA	; 170
   1ca38:	96 e4       	ldi	r25, 0x46	; 70
   1ca3a:	a0 e0       	ldi	r26, 0x00	; 0
   1ca3c:	ed b7       	in	r30, 0x3d	; 61
   1ca3e:	fe b7       	in	r31, 0x3e	; 62
   1ca40:	81 83       	std	Z+1, r24	; 0x01
   1ca42:	92 83       	std	Z+2, r25	; 0x02
   1ca44:	a3 83       	std	Z+3, r26	; 0x03
   1ca46:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

///@ initialize Printer Capture
    printer_init();
   1ca4a:	0e 94 a9 bd 	call	0x17b52	; 0x17b52 <printer_init>
    printf("Printer initialized\n");
   1ca4e:	85 e9       	ldi	r24, 0x95	; 149
   1ca50:	96 e4       	ldi	r25, 0x46	; 70
   1ca52:	a0 e0       	ldi	r26, 0x00	; 0
   1ca54:	ed b7       	in	r30, 0x3d	; 61
   1ca56:	fe b7       	in	r31, 0x3e	; 62
   1ca58:	81 83       	std	Z+1, r24	; 0x01
   1ca5a:	92 83       	std	Z+2, r25	; 0x02
   1ca5c:	a3 83       	std	Z+3, r26	; 0x03
   1ca5e:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

///@ initialize GPIB timer tasks
    printf("GPIB Timer Setup\n");
   1ca62:	83 e8       	ldi	r24, 0x83	; 131
   1ca64:	96 e4       	ldi	r25, 0x46	; 70
   1ca66:	a0 e0       	ldi	r26, 0x00	; 0
   1ca68:	ed b7       	in	r30, 0x3d	; 61
   1ca6a:	fe b7       	in	r31, 0x3e	; 62
   1ca6c:	81 83       	std	Z+1, r24	; 0x01
   1ca6e:	92 83       	std	Z+2, r25	; 0x02
   1ca70:	a3 83       	std	Z+3, r26	; 0x03
   1ca72:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    gpib_timer_init();
   1ca76:	0e 94 55 83 	call	0x106aa	; 0x106aa <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1ca7a:	8b e6       	ldi	r24, 0x6B	; 107
   1ca7c:	96 e4       	ldi	r25, 0x46	; 70
   1ca7e:	a0 e0       	ldi	r26, 0x00	; 0
   1ca80:	ed b7       	in	r30, 0x3d	; 61
   1ca82:	fe b7       	in	r31, 0x3e	; 62
   1ca84:	81 83       	std	Z+1, r24	; 0x01
   1ca86:	92 83       	std	Z+2, r25	; 0x02
   1ca88:	a3 83       	std	Z+3, r26	; 0x03
   1ca8a:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

///@brief Process hp85disk emulator config file
    gpib_file_init();
   1ca8e:	0e 94 b9 8b 	call	0x11772	; 0x11772 <gpib_file_init>
    printf("GPIB File init done\n");
   1ca92:	86 e5       	ldi	r24, 0x56	; 86
   1ca94:	96 e4       	ldi	r25, 0x46	; 70
   1ca96:	a0 e0       	ldi	r26, 0x00	; 0
   1ca98:	ed b7       	in	r30, 0x3d	; 61
   1ca9a:	fe b7       	in	r31, 0x3e	; 62
   1ca9c:	81 83       	std	Z+1, r24	; 0x01
   1ca9e:	92 83       	std	Z+2, r25	; 0x02
   1caa0:	a3 83       	std	Z+3, r26	; 0x03
   1caa2:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>

///@brief GPIB talking/listening state variables
///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1caa6:	0e 94 a9 85 	call	0x10b52	; 0x10b52 <gpib_state_init>
    printf("GPIB State init done\n");
   1caaa:	80 e4       	ldi	r24, 0x40	; 64
   1caac:	96 e4       	ldi	r25, 0x46	; 70
   1caae:	a0 e0       	ldi	r26, 0x00	; 0
   1cab0:	ed b7       	in	r30, 0x3d	; 61
   1cab2:	fe b7       	in	r31, 0x3e	; 62
   1cab4:	81 83       	std	Z+1, r24	; 0x01
   1cab6:	92 83       	std	Z+2, r25	; 0x02
   1cab8:	a3 83       	std	Z+3, r26	; 0x03
   1caba:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    sep();
   1cabe:	0e 94 b4 31 	call	0x6368	; 0x6368 <sep>

///@brief Display Address Summary
    display_Addresses(0);
   1cac2:	80 e0       	ldi	r24, 0x00	; 0
   1cac4:	90 e0       	ldi	r25, 0x00	; 0
   1cac6:	0e 94 ff 92 	call	0x125fe	; 0x125fe <display_Addresses>
    sep();
   1caca:	0e 94 b4 31 	call	0x6368	; 0x6368 <sep>

///@brief Display debug level
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1cace:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1cad2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1cad6:	ed b7       	in	r30, 0x3d	; 61
   1cad8:	fe b7       	in	r31, 0x3e	; 62
   1cada:	95 83       	std	Z+5, r25	; 0x05
   1cadc:	84 83       	std	Z+4, r24	; 0x04
   1cade:	8a e2       	ldi	r24, 0x2A	; 42
   1cae0:	96 e4       	ldi	r25, 0x46	; 70
   1cae2:	a0 e0       	ldi	r26, 0x00	; 0
   1cae4:	81 83       	std	Z+1, r24	; 0x01
   1cae6:	92 83       	std	Z+2, r25	; 0x02
   1cae8:	a3 83       	std	Z+3, r26	; 0x03
   1caea:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
    sep();
   1caee:	0e 94 b4 31 	call	0x6368	; 0x6368 <sep>

///@brief Format any drives that do not yet exist
    format_drives();
   1caf2:	0e 94 0d 9a 	call	0x1341a	; 0x1341a <format_drives>

#ifdef LCD_SUPPORT
	update_drive_counts();
   1caf6:	4c de       	rcall	.-872    	; 0x1c790 <update_drive_counts>
	sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1caf8:	80 e0       	ldi	r24, 0x00	; 0
   1cafa:	97 e1       	ldi	r25, 0x17	; 23
   1cafc:	ed b7       	in	r30, 0x3d	; 61
   1cafe:	fe b7       	in	r31, 0x3e	; 62
   1cb00:	97 83       	std	Z+7, r25	; 0x07
   1cb02:	86 83       	std	Z+6, r24	; 0x06
   1cb04:	84 e2       	ldi	r24, 0x24	; 36
   1cb06:	96 e4       	ldi	r25, 0x46	; 70
   1cb08:	a0 e0       	ldi	r26, 0x00	; 0
   1cb0a:	83 83       	std	Z+3, r24	; 0x03
   1cb0c:	94 83       	std	Z+4, r25	; 0x04
   1cb0e:	a5 83       	std	Z+5, r26	; 0x05
   1cb10:	85 ef       	ldi	r24, 0xF5	; 245
   1cb12:	92 e0       	ldi	r25, 0x02	; 2
   1cb14:	92 83       	std	Z+2, r25	; 0x02
   1cb16:	81 83       	std	Z+1, r24	; 0x01
   1cb18:	0e 94 91 46 	call	0x8d22	; 0x8d22 <sprintf_P>

	i2c_task_run();
   1cb1c:	0e 94 59 2c 	call	0x58b2	; 0x58b2 <i2c_task_run>
	delayms(1000);
   1cb20:	68 ee       	ldi	r22, 0xE8	; 232
   1cb22:	73 e0       	ldi	r23, 0x03	; 3
   1cb24:	80 e0       	ldi	r24, 0x00	; 0
   1cb26:	90 e0       	ldi	r25, 0x00	; 0
   1cb28:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <delayms>
    if(!i2c_task.done || i2c_task.error )
   1cb2c:	80 91 6e 17 	lds	r24, 0x176E	; 0x80176e <i2c_task+0x2>
   1cb30:	88 23       	and	r24, r24
   1cb32:	21 f0       	breq	.+8      	; 0x1cb3c <main+0x33c>
   1cb34:	80 91 6f 17 	lds	r24, 0x176F	; 0x80176f <i2c_task+0x3>
   1cb38:	88 23       	and	r24, r24
   1cb3a:	61 f0       	breq	.+24     	; 0x1cb54 <main+0x354>
	{
		i2c_display_task_errors();
   1cb3c:	0e 94 c0 2e 	call	0x5d80	; 0x5d80 <i2c_display_task_errors>
		printf("I2C LCD is NOT attached!\n");
   1cb40:	8a e0       	ldi	r24, 0x0A	; 10
   1cb42:	96 e4       	ldi	r25, 0x46	; 70
   1cb44:	a0 e0       	ldi	r26, 0x00	; 0
   1cb46:	ed b7       	in	r30, 0x3d	; 61
   1cb48:	fe b7       	in	r31, 0x3e	; 62
   1cb4a:	81 83       	std	Z+1, r24	; 0x01
   1cb4c:	92 83       	std	Z+2, r25	; 0x02
   1cb4e:	a3 83       	std	Z+3, r26	; 0x03
   1cb50:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
	}
#endif

///@brief Start main GPIB state machine
    printf("Starting GPIB TASK\n");
   1cb54:	86 ef       	ldi	r24, 0xF6	; 246
   1cb56:	95 e4       	ldi	r25, 0x45	; 69
   1cb58:	a0 e0       	ldi	r26, 0x00	; 0
   1cb5a:	ed b7       	in	r30, 0x3d	; 61
   1cb5c:	fe b7       	in	r31, 0x3e	; 62
   1cb5e:	81 83       	std	Z+1, r24	; 0x01
   1cb60:	92 83       	std	Z+2, r25	; 0x02
   1cb62:	a3 83       	std	Z+3, r26	; 0x03
   1cb64:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <printf_P>
///@brief Keep the task running 
/// task does not exit unless a keypress occurs
/// When it restarts ALL GPIB states are reset 
    while ( 1)
    {
        user_task(1);
   1cb68:	81 e0       	ldi	r24, 0x01	; 1
   1cb6a:	08 de       	rcall	.-1008   	; 0x1c77c <user_task>
   1cb6c:	fd cf       	rjmp	.-6      	; 0x1cb68 <main+0x368>

0001cb6e <__mulsi3>:
   1cb6e:	db 01       	movw	r26, r22
   1cb70:	8f 93       	push	r24
   1cb72:	9f 93       	push	r25
   1cb74:	8b d0       	rcall	.+278    	; 0x1cc8c <__muluhisi3>
   1cb76:	bf 91       	pop	r27
   1cb78:	af 91       	pop	r26
   1cb7a:	a2 9f       	mul	r26, r18
   1cb7c:	80 0d       	add	r24, r0
   1cb7e:	91 1d       	adc	r25, r1
   1cb80:	a3 9f       	mul	r26, r19
   1cb82:	90 0d       	add	r25, r0
   1cb84:	b2 9f       	mul	r27, r18
   1cb86:	90 0d       	add	r25, r0
   1cb88:	11 24       	eor	r1, r1
   1cb8a:	08 95       	ret

0001cb8c <__udivmodqi4>:
   1cb8c:	99 1b       	sub	r25, r25
   1cb8e:	79 e0       	ldi	r23, 0x09	; 9
   1cb90:	04 c0       	rjmp	.+8      	; 0x1cb9a <__udivmodqi4_ep>

0001cb92 <__udivmodqi4_loop>:
   1cb92:	99 1f       	adc	r25, r25
   1cb94:	96 17       	cp	r25, r22
   1cb96:	08 f0       	brcs	.+2      	; 0x1cb9a <__udivmodqi4_ep>
   1cb98:	96 1b       	sub	r25, r22

0001cb9a <__udivmodqi4_ep>:
   1cb9a:	88 1f       	adc	r24, r24
   1cb9c:	7a 95       	dec	r23
   1cb9e:	c9 f7       	brne	.-14     	; 0x1cb92 <__udivmodqi4_loop>
   1cba0:	80 95       	com	r24
   1cba2:	08 95       	ret

0001cba4 <__udivmodhi4>:
   1cba4:	aa 1b       	sub	r26, r26
   1cba6:	bb 1b       	sub	r27, r27
   1cba8:	51 e1       	ldi	r21, 0x11	; 17
   1cbaa:	07 c0       	rjmp	.+14     	; 0x1cbba <__udivmodhi4_ep>

0001cbac <__udivmodhi4_loop>:
   1cbac:	aa 1f       	adc	r26, r26
   1cbae:	bb 1f       	adc	r27, r27
   1cbb0:	a6 17       	cp	r26, r22
   1cbb2:	b7 07       	cpc	r27, r23
   1cbb4:	10 f0       	brcs	.+4      	; 0x1cbba <__udivmodhi4_ep>
   1cbb6:	a6 1b       	sub	r26, r22
   1cbb8:	b7 0b       	sbc	r27, r23

0001cbba <__udivmodhi4_ep>:
   1cbba:	88 1f       	adc	r24, r24
   1cbbc:	99 1f       	adc	r25, r25
   1cbbe:	5a 95       	dec	r21
   1cbc0:	a9 f7       	brne	.-22     	; 0x1cbac <__udivmodhi4_loop>
   1cbc2:	80 95       	com	r24
   1cbc4:	90 95       	com	r25
   1cbc6:	bc 01       	movw	r22, r24
   1cbc8:	cd 01       	movw	r24, r26
   1cbca:	08 95       	ret

0001cbcc <__divmodhi4>:
   1cbcc:	97 fb       	bst	r25, 7
   1cbce:	07 2e       	mov	r0, r23
   1cbd0:	16 f4       	brtc	.+4      	; 0x1cbd6 <__divmodhi4+0xa>
   1cbd2:	00 94       	com	r0
   1cbd4:	06 d0       	rcall	.+12     	; 0x1cbe2 <__divmodhi4_neg1>
   1cbd6:	77 fd       	sbrc	r23, 7
   1cbd8:	08 d0       	rcall	.+16     	; 0x1cbea <__divmodhi4_neg2>
   1cbda:	e4 df       	rcall	.-56     	; 0x1cba4 <__udivmodhi4>
   1cbdc:	07 fc       	sbrc	r0, 7
   1cbde:	05 d0       	rcall	.+10     	; 0x1cbea <__divmodhi4_neg2>
   1cbe0:	3e f4       	brtc	.+14     	; 0x1cbf0 <__divmodhi4_exit>

0001cbe2 <__divmodhi4_neg1>:
   1cbe2:	90 95       	com	r25
   1cbe4:	81 95       	neg	r24
   1cbe6:	9f 4f       	sbci	r25, 0xFF	; 255
   1cbe8:	08 95       	ret

0001cbea <__divmodhi4_neg2>:
   1cbea:	70 95       	com	r23
   1cbec:	61 95       	neg	r22
   1cbee:	7f 4f       	sbci	r23, 0xFF	; 255

0001cbf0 <__divmodhi4_exit>:
   1cbf0:	08 95       	ret

0001cbf2 <__udivmodsi4>:
   1cbf2:	a1 e2       	ldi	r26, 0x21	; 33
   1cbf4:	1a 2e       	mov	r1, r26
   1cbf6:	aa 1b       	sub	r26, r26
   1cbf8:	bb 1b       	sub	r27, r27
   1cbfa:	fd 01       	movw	r30, r26
   1cbfc:	0d c0       	rjmp	.+26     	; 0x1cc18 <__udivmodsi4_ep>

0001cbfe <__udivmodsi4_loop>:
   1cbfe:	aa 1f       	adc	r26, r26
   1cc00:	bb 1f       	adc	r27, r27
   1cc02:	ee 1f       	adc	r30, r30
   1cc04:	ff 1f       	adc	r31, r31
   1cc06:	a2 17       	cp	r26, r18
   1cc08:	b3 07       	cpc	r27, r19
   1cc0a:	e4 07       	cpc	r30, r20
   1cc0c:	f5 07       	cpc	r31, r21
   1cc0e:	20 f0       	brcs	.+8      	; 0x1cc18 <__udivmodsi4_ep>
   1cc10:	a2 1b       	sub	r26, r18
   1cc12:	b3 0b       	sbc	r27, r19
   1cc14:	e4 0b       	sbc	r30, r20
   1cc16:	f5 0b       	sbc	r31, r21

0001cc18 <__udivmodsi4_ep>:
   1cc18:	66 1f       	adc	r22, r22
   1cc1a:	77 1f       	adc	r23, r23
   1cc1c:	88 1f       	adc	r24, r24
   1cc1e:	99 1f       	adc	r25, r25
   1cc20:	1a 94       	dec	r1
   1cc22:	69 f7       	brne	.-38     	; 0x1cbfe <__udivmodsi4_loop>
   1cc24:	60 95       	com	r22
   1cc26:	70 95       	com	r23
   1cc28:	80 95       	com	r24
   1cc2a:	90 95       	com	r25
   1cc2c:	9b 01       	movw	r18, r22
   1cc2e:	ac 01       	movw	r20, r24
   1cc30:	bd 01       	movw	r22, r26
   1cc32:	cf 01       	movw	r24, r30
   1cc34:	08 95       	ret

0001cc36 <__divmodsi4>:
   1cc36:	05 2e       	mov	r0, r21
   1cc38:	97 fb       	bst	r25, 7
   1cc3a:	16 f4       	brtc	.+4      	; 0x1cc40 <__divmodsi4+0xa>
   1cc3c:	00 94       	com	r0
   1cc3e:	0f d0       	rcall	.+30     	; 0x1cc5e <__negsi2>
   1cc40:	57 fd       	sbrc	r21, 7
   1cc42:	05 d0       	rcall	.+10     	; 0x1cc4e <__divmodsi4_neg2>
   1cc44:	d6 df       	rcall	.-84     	; 0x1cbf2 <__udivmodsi4>
   1cc46:	07 fc       	sbrc	r0, 7
   1cc48:	02 d0       	rcall	.+4      	; 0x1cc4e <__divmodsi4_neg2>
   1cc4a:	46 f4       	brtc	.+16     	; 0x1cc5c <__divmodsi4_exit>
   1cc4c:	08 c0       	rjmp	.+16     	; 0x1cc5e <__negsi2>

0001cc4e <__divmodsi4_neg2>:
   1cc4e:	50 95       	com	r21
   1cc50:	40 95       	com	r20
   1cc52:	30 95       	com	r19
   1cc54:	21 95       	neg	r18
   1cc56:	3f 4f       	sbci	r19, 0xFF	; 255
   1cc58:	4f 4f       	sbci	r20, 0xFF	; 255
   1cc5a:	5f 4f       	sbci	r21, 0xFF	; 255

0001cc5c <__divmodsi4_exit>:
   1cc5c:	08 95       	ret

0001cc5e <__negsi2>:
   1cc5e:	90 95       	com	r25
   1cc60:	80 95       	com	r24
   1cc62:	70 95       	com	r23
   1cc64:	61 95       	neg	r22
   1cc66:	7f 4f       	sbci	r23, 0xFF	; 255
   1cc68:	8f 4f       	sbci	r24, 0xFF	; 255
   1cc6a:	9f 4f       	sbci	r25, 0xFF	; 255
   1cc6c:	08 95       	ret

0001cc6e <__tablejump2__>:
   1cc6e:	ee 0f       	add	r30, r30
   1cc70:	ff 1f       	adc	r31, r31
   1cc72:	00 24       	eor	r0, r0
   1cc74:	00 1c       	adc	r0, r0
   1cc76:	0b be       	out	0x3b, r0	; 59
   1cc78:	07 90       	elpm	r0, Z+
   1cc7a:	f6 91       	elpm	r31, Z
   1cc7c:	e0 2d       	mov	r30, r0
   1cc7e:	09 94       	ijmp

0001cc80 <__usmulhisi3>:
   1cc80:	6f d0       	rcall	.+222    	; 0x1cd60 <__umulhisi3>

0001cc82 <__usmulhisi3_tail>:
   1cc82:	b7 ff       	sbrs	r27, 7
   1cc84:	08 95       	ret
   1cc86:	82 1b       	sub	r24, r18
   1cc88:	93 0b       	sbc	r25, r19
   1cc8a:	08 95       	ret

0001cc8c <__muluhisi3>:
   1cc8c:	69 d0       	rcall	.+210    	; 0x1cd60 <__umulhisi3>
   1cc8e:	a5 9f       	mul	r26, r21
   1cc90:	90 0d       	add	r25, r0
   1cc92:	b4 9f       	mul	r27, r20
   1cc94:	90 0d       	add	r25, r0
   1cc96:	a4 9f       	mul	r26, r20
   1cc98:	80 0d       	add	r24, r0
   1cc9a:	91 1d       	adc	r25, r1
   1cc9c:	11 24       	eor	r1, r1
   1cc9e:	08 95       	ret

0001cca0 <__mulshisi3>:
   1cca0:	b7 ff       	sbrs	r27, 7
   1cca2:	f4 cf       	rjmp	.-24     	; 0x1cc8c <__muluhisi3>

0001cca4 <__mulohisi3>:
   1cca4:	f3 df       	rcall	.-26     	; 0x1cc8c <__muluhisi3>
   1cca6:	82 1b       	sub	r24, r18
   1cca8:	93 0b       	sbc	r25, r19
   1ccaa:	08 95       	ret

0001ccac <__negdi2>:
   1ccac:	60 95       	com	r22
   1ccae:	70 95       	com	r23
   1ccb0:	80 95       	com	r24
   1ccb2:	90 95       	com	r25
   1ccb4:	30 95       	com	r19
   1ccb6:	40 95       	com	r20
   1ccb8:	50 95       	com	r21
   1ccba:	21 95       	neg	r18
   1ccbc:	3f 4f       	sbci	r19, 0xFF	; 255
   1ccbe:	4f 4f       	sbci	r20, 0xFF	; 255
   1ccc0:	5f 4f       	sbci	r21, 0xFF	; 255
   1ccc2:	6f 4f       	sbci	r22, 0xFF	; 255
   1ccc4:	7f 4f       	sbci	r23, 0xFF	; 255
   1ccc6:	8f 4f       	sbci	r24, 0xFF	; 255
   1ccc8:	9f 4f       	sbci	r25, 0xFF	; 255
   1ccca:	08 95       	ret

0001cccc <__prologue_saves__>:
   1cccc:	2f 92       	push	r2
   1ccce:	3f 92       	push	r3
   1ccd0:	4f 92       	push	r4
   1ccd2:	5f 92       	push	r5
   1ccd4:	6f 92       	push	r6
   1ccd6:	7f 92       	push	r7
   1ccd8:	8f 92       	push	r8
   1ccda:	9f 92       	push	r9
   1ccdc:	af 92       	push	r10
   1ccde:	bf 92       	push	r11
   1cce0:	cf 92       	push	r12
   1cce2:	df 92       	push	r13
   1cce4:	ef 92       	push	r14
   1cce6:	ff 92       	push	r15
   1cce8:	0f 93       	push	r16
   1ccea:	1f 93       	push	r17
   1ccec:	cf 93       	push	r28
   1ccee:	df 93       	push	r29
   1ccf0:	cd b7       	in	r28, 0x3d	; 61
   1ccf2:	de b7       	in	r29, 0x3e	; 62
   1ccf4:	ca 1b       	sub	r28, r26
   1ccf6:	db 0b       	sbc	r29, r27
   1ccf8:	0f b6       	in	r0, 0x3f	; 63
   1ccfa:	f8 94       	cli
   1ccfc:	de bf       	out	0x3e, r29	; 62
   1ccfe:	0f be       	out	0x3f, r0	; 63
   1cd00:	cd bf       	out	0x3d, r28	; 61
   1cd02:	09 94       	ijmp

0001cd04 <__epilogue_restores__>:
   1cd04:	2a 88       	ldd	r2, Y+18	; 0x12
   1cd06:	39 88       	ldd	r3, Y+17	; 0x11
   1cd08:	48 88       	ldd	r4, Y+16	; 0x10
   1cd0a:	5f 84       	ldd	r5, Y+15	; 0x0f
   1cd0c:	6e 84       	ldd	r6, Y+14	; 0x0e
   1cd0e:	7d 84       	ldd	r7, Y+13	; 0x0d
   1cd10:	8c 84       	ldd	r8, Y+12	; 0x0c
   1cd12:	9b 84       	ldd	r9, Y+11	; 0x0b
   1cd14:	aa 84       	ldd	r10, Y+10	; 0x0a
   1cd16:	b9 84       	ldd	r11, Y+9	; 0x09
   1cd18:	c8 84       	ldd	r12, Y+8	; 0x08
   1cd1a:	df 80       	ldd	r13, Y+7	; 0x07
   1cd1c:	ee 80       	ldd	r14, Y+6	; 0x06
   1cd1e:	fd 80       	ldd	r15, Y+5	; 0x05
   1cd20:	0c 81       	ldd	r16, Y+4	; 0x04
   1cd22:	1b 81       	ldd	r17, Y+3	; 0x03
   1cd24:	aa 81       	ldd	r26, Y+2	; 0x02
   1cd26:	b9 81       	ldd	r27, Y+1	; 0x01
   1cd28:	ce 0f       	add	r28, r30
   1cd2a:	d1 1d       	adc	r29, r1
   1cd2c:	0f b6       	in	r0, 0x3f	; 63
   1cd2e:	f8 94       	cli
   1cd30:	de bf       	out	0x3e, r29	; 62
   1cd32:	0f be       	out	0x3f, r0	; 63
   1cd34:	cd bf       	out	0x3d, r28	; 61
   1cd36:	ed 01       	movw	r28, r26
   1cd38:	08 95       	ret

0001cd3a <__xload_1>:
   1cd3a:	57 fd       	sbrc	r21, 7
   1cd3c:	03 c0       	rjmp	.+6      	; 0x1cd44 <__xload_1+0xa>
   1cd3e:	5b bf       	out	0x3b, r21	; 59
   1cd40:	67 91       	elpm	r22, Z+
   1cd42:	08 95       	ret
   1cd44:	60 81       	ld	r22, Z
   1cd46:	08 95       	ret

0001cd48 <__cmpdi2_s8>:
   1cd48:	00 24       	eor	r0, r0
   1cd4a:	a7 fd       	sbrc	r26, 7
   1cd4c:	00 94       	com	r0
   1cd4e:	2a 17       	cp	r18, r26
   1cd50:	30 05       	cpc	r19, r0
   1cd52:	40 05       	cpc	r20, r0
   1cd54:	50 05       	cpc	r21, r0
   1cd56:	60 05       	cpc	r22, r0
   1cd58:	70 05       	cpc	r23, r0
   1cd5a:	80 05       	cpc	r24, r0
   1cd5c:	90 05       	cpc	r25, r0
   1cd5e:	08 95       	ret

0001cd60 <__umulhisi3>:
   1cd60:	a2 9f       	mul	r26, r18
   1cd62:	b0 01       	movw	r22, r0
   1cd64:	b3 9f       	mul	r27, r19
   1cd66:	c0 01       	movw	r24, r0
   1cd68:	a3 9f       	mul	r26, r19
   1cd6a:	70 0d       	add	r23, r0
   1cd6c:	81 1d       	adc	r24, r1
   1cd6e:	11 24       	eor	r1, r1
   1cd70:	91 1d       	adc	r25, r1
   1cd72:	b2 9f       	mul	r27, r18
   1cd74:	70 0d       	add	r23, r0
   1cd76:	81 1d       	adc	r24, r1
   1cd78:	11 24       	eor	r1, r1
   1cd7a:	91 1d       	adc	r25, r1
   1cd7c:	08 95       	ret

0001cd7e <__subsf3>:
   1cd7e:	50 58       	subi	r21, 0x80	; 128

0001cd80 <__addsf3>:
   1cd80:	bb 27       	eor	r27, r27
   1cd82:	aa 27       	eor	r26, r26
   1cd84:	0e d0       	rcall	.+28     	; 0x1cda2 <__addsf3x>
   1cd86:	75 c1       	rjmp	.+746    	; 0x1d072 <__fp_round>
   1cd88:	66 d1       	rcall	.+716    	; 0x1d056 <__fp_pscA>
   1cd8a:	30 f0       	brcs	.+12     	; 0x1cd98 <__addsf3+0x18>
   1cd8c:	6b d1       	rcall	.+726    	; 0x1d064 <__fp_pscB>
   1cd8e:	20 f0       	brcs	.+8      	; 0x1cd98 <__addsf3+0x18>
   1cd90:	31 f4       	brne	.+12     	; 0x1cd9e <__addsf3+0x1e>
   1cd92:	9f 3f       	cpi	r25, 0xFF	; 255
   1cd94:	11 f4       	brne	.+4      	; 0x1cd9a <__addsf3+0x1a>
   1cd96:	1e f4       	brtc	.+6      	; 0x1cd9e <__addsf3+0x1e>
   1cd98:	5b c1       	rjmp	.+694    	; 0x1d050 <__fp_nan>
   1cd9a:	0e f4       	brtc	.+2      	; 0x1cd9e <__addsf3+0x1e>
   1cd9c:	e0 95       	com	r30
   1cd9e:	e7 fb       	bst	r30, 7
   1cda0:	51 c1       	rjmp	.+674    	; 0x1d044 <__fp_inf>

0001cda2 <__addsf3x>:
   1cda2:	e9 2f       	mov	r30, r25
   1cda4:	77 d1       	rcall	.+750    	; 0x1d094 <__fp_split3>
   1cda6:	80 f3       	brcs	.-32     	; 0x1cd88 <__addsf3+0x8>
   1cda8:	ba 17       	cp	r27, r26
   1cdaa:	62 07       	cpc	r22, r18
   1cdac:	73 07       	cpc	r23, r19
   1cdae:	84 07       	cpc	r24, r20
   1cdb0:	95 07       	cpc	r25, r21
   1cdb2:	18 f0       	brcs	.+6      	; 0x1cdba <__addsf3x+0x18>
   1cdb4:	71 f4       	brne	.+28     	; 0x1cdd2 <__addsf3x+0x30>
   1cdb6:	9e f5       	brtc	.+102    	; 0x1ce1e <__addsf3x+0x7c>
   1cdb8:	8f c1       	rjmp	.+798    	; 0x1d0d8 <__fp_zero>
   1cdba:	0e f4       	brtc	.+2      	; 0x1cdbe <__addsf3x+0x1c>
   1cdbc:	e0 95       	com	r30
   1cdbe:	0b 2e       	mov	r0, r27
   1cdc0:	ba 2f       	mov	r27, r26
   1cdc2:	a0 2d       	mov	r26, r0
   1cdc4:	0b 01       	movw	r0, r22
   1cdc6:	b9 01       	movw	r22, r18
   1cdc8:	90 01       	movw	r18, r0
   1cdca:	0c 01       	movw	r0, r24
   1cdcc:	ca 01       	movw	r24, r20
   1cdce:	a0 01       	movw	r20, r0
   1cdd0:	11 24       	eor	r1, r1
   1cdd2:	ff 27       	eor	r31, r31
   1cdd4:	59 1b       	sub	r21, r25
   1cdd6:	99 f0       	breq	.+38     	; 0x1cdfe <__addsf3x+0x5c>
   1cdd8:	59 3f       	cpi	r21, 0xF9	; 249
   1cdda:	50 f4       	brcc	.+20     	; 0x1cdf0 <__addsf3x+0x4e>
   1cddc:	50 3e       	cpi	r21, 0xE0	; 224
   1cdde:	68 f1       	brcs	.+90     	; 0x1ce3a <__addsf3x+0x98>
   1cde0:	1a 16       	cp	r1, r26
   1cde2:	f0 40       	sbci	r31, 0x00	; 0
   1cde4:	a2 2f       	mov	r26, r18
   1cde6:	23 2f       	mov	r18, r19
   1cde8:	34 2f       	mov	r19, r20
   1cdea:	44 27       	eor	r20, r20
   1cdec:	58 5f       	subi	r21, 0xF8	; 248
   1cdee:	f3 cf       	rjmp	.-26     	; 0x1cdd6 <__addsf3x+0x34>
   1cdf0:	46 95       	lsr	r20
   1cdf2:	37 95       	ror	r19
   1cdf4:	27 95       	ror	r18
   1cdf6:	a7 95       	ror	r26
   1cdf8:	f0 40       	sbci	r31, 0x00	; 0
   1cdfa:	53 95       	inc	r21
   1cdfc:	c9 f7       	brne	.-14     	; 0x1cdf0 <__addsf3x+0x4e>
   1cdfe:	7e f4       	brtc	.+30     	; 0x1ce1e <__addsf3x+0x7c>
   1ce00:	1f 16       	cp	r1, r31
   1ce02:	ba 0b       	sbc	r27, r26
   1ce04:	62 0b       	sbc	r22, r18
   1ce06:	73 0b       	sbc	r23, r19
   1ce08:	84 0b       	sbc	r24, r20
   1ce0a:	ba f0       	brmi	.+46     	; 0x1ce3a <__addsf3x+0x98>
   1ce0c:	91 50       	subi	r25, 0x01	; 1
   1ce0e:	a1 f0       	breq	.+40     	; 0x1ce38 <__addsf3x+0x96>
   1ce10:	ff 0f       	add	r31, r31
   1ce12:	bb 1f       	adc	r27, r27
   1ce14:	66 1f       	adc	r22, r22
   1ce16:	77 1f       	adc	r23, r23
   1ce18:	88 1f       	adc	r24, r24
   1ce1a:	c2 f7       	brpl	.-16     	; 0x1ce0c <__addsf3x+0x6a>
   1ce1c:	0e c0       	rjmp	.+28     	; 0x1ce3a <__addsf3x+0x98>
   1ce1e:	ba 0f       	add	r27, r26
   1ce20:	62 1f       	adc	r22, r18
   1ce22:	73 1f       	adc	r23, r19
   1ce24:	84 1f       	adc	r24, r20
   1ce26:	48 f4       	brcc	.+18     	; 0x1ce3a <__addsf3x+0x98>
   1ce28:	87 95       	ror	r24
   1ce2a:	77 95       	ror	r23
   1ce2c:	67 95       	ror	r22
   1ce2e:	b7 95       	ror	r27
   1ce30:	f7 95       	ror	r31
   1ce32:	9e 3f       	cpi	r25, 0xFE	; 254
   1ce34:	08 f0       	brcs	.+2      	; 0x1ce38 <__addsf3x+0x96>
   1ce36:	b3 cf       	rjmp	.-154    	; 0x1cd9e <__addsf3+0x1e>
   1ce38:	93 95       	inc	r25
   1ce3a:	88 0f       	add	r24, r24
   1ce3c:	08 f0       	brcs	.+2      	; 0x1ce40 <__addsf3x+0x9e>
   1ce3e:	99 27       	eor	r25, r25
   1ce40:	ee 0f       	add	r30, r30
   1ce42:	97 95       	ror	r25
   1ce44:	87 95       	ror	r24
   1ce46:	08 95       	ret

0001ce48 <__cmpsf2>:
   1ce48:	d9 d0       	rcall	.+434    	; 0x1cffc <__fp_cmp>
   1ce4a:	08 f4       	brcc	.+2      	; 0x1ce4e <__cmpsf2+0x6>
   1ce4c:	81 e0       	ldi	r24, 0x01	; 1
   1ce4e:	08 95       	ret

0001ce50 <__divsf3>:
   1ce50:	0c d0       	rcall	.+24     	; 0x1ce6a <__divsf3x>
   1ce52:	0f c1       	rjmp	.+542    	; 0x1d072 <__fp_round>
   1ce54:	07 d1       	rcall	.+526    	; 0x1d064 <__fp_pscB>
   1ce56:	40 f0       	brcs	.+16     	; 0x1ce68 <__divsf3+0x18>
   1ce58:	fe d0       	rcall	.+508    	; 0x1d056 <__fp_pscA>
   1ce5a:	30 f0       	brcs	.+12     	; 0x1ce68 <__divsf3+0x18>
   1ce5c:	21 f4       	brne	.+8      	; 0x1ce66 <__divsf3+0x16>
   1ce5e:	5f 3f       	cpi	r21, 0xFF	; 255
   1ce60:	19 f0       	breq	.+6      	; 0x1ce68 <__divsf3+0x18>
   1ce62:	f0 c0       	rjmp	.+480    	; 0x1d044 <__fp_inf>
   1ce64:	51 11       	cpse	r21, r1
   1ce66:	39 c1       	rjmp	.+626    	; 0x1d0da <__fp_szero>
   1ce68:	f3 c0       	rjmp	.+486    	; 0x1d050 <__fp_nan>

0001ce6a <__divsf3x>:
   1ce6a:	14 d1       	rcall	.+552    	; 0x1d094 <__fp_split3>
   1ce6c:	98 f3       	brcs	.-26     	; 0x1ce54 <__divsf3+0x4>

0001ce6e <__divsf3_pse>:
   1ce6e:	99 23       	and	r25, r25
   1ce70:	c9 f3       	breq	.-14     	; 0x1ce64 <__divsf3+0x14>
   1ce72:	55 23       	and	r21, r21
   1ce74:	b1 f3       	breq	.-20     	; 0x1ce62 <__divsf3+0x12>
   1ce76:	95 1b       	sub	r25, r21
   1ce78:	55 0b       	sbc	r21, r21
   1ce7a:	bb 27       	eor	r27, r27
   1ce7c:	aa 27       	eor	r26, r26
   1ce7e:	62 17       	cp	r22, r18
   1ce80:	73 07       	cpc	r23, r19
   1ce82:	84 07       	cpc	r24, r20
   1ce84:	38 f0       	brcs	.+14     	; 0x1ce94 <__divsf3_pse+0x26>
   1ce86:	9f 5f       	subi	r25, 0xFF	; 255
   1ce88:	5f 4f       	sbci	r21, 0xFF	; 255
   1ce8a:	22 0f       	add	r18, r18
   1ce8c:	33 1f       	adc	r19, r19
   1ce8e:	44 1f       	adc	r20, r20
   1ce90:	aa 1f       	adc	r26, r26
   1ce92:	a9 f3       	breq	.-22     	; 0x1ce7e <__divsf3_pse+0x10>
   1ce94:	33 d0       	rcall	.+102    	; 0x1cefc <__divsf3_pse+0x8e>
   1ce96:	0e 2e       	mov	r0, r30
   1ce98:	3a f0       	brmi	.+14     	; 0x1cea8 <__divsf3_pse+0x3a>
   1ce9a:	e0 e8       	ldi	r30, 0x80	; 128
   1ce9c:	30 d0       	rcall	.+96     	; 0x1cefe <__divsf3_pse+0x90>
   1ce9e:	91 50       	subi	r25, 0x01	; 1
   1cea0:	50 40       	sbci	r21, 0x00	; 0
   1cea2:	e6 95       	lsr	r30
   1cea4:	00 1c       	adc	r0, r0
   1cea6:	ca f7       	brpl	.-14     	; 0x1ce9a <__divsf3_pse+0x2c>
   1cea8:	29 d0       	rcall	.+82     	; 0x1cefc <__divsf3_pse+0x8e>
   1ceaa:	fe 2f       	mov	r31, r30
   1ceac:	27 d0       	rcall	.+78     	; 0x1cefc <__divsf3_pse+0x8e>
   1ceae:	66 0f       	add	r22, r22
   1ceb0:	77 1f       	adc	r23, r23
   1ceb2:	88 1f       	adc	r24, r24
   1ceb4:	bb 1f       	adc	r27, r27
   1ceb6:	26 17       	cp	r18, r22
   1ceb8:	37 07       	cpc	r19, r23
   1ceba:	48 07       	cpc	r20, r24
   1cebc:	ab 07       	cpc	r26, r27
   1cebe:	b0 e8       	ldi	r27, 0x80	; 128
   1cec0:	09 f0       	breq	.+2      	; 0x1cec4 <__divsf3_pse+0x56>
   1cec2:	bb 0b       	sbc	r27, r27
   1cec4:	80 2d       	mov	r24, r0
   1cec6:	bf 01       	movw	r22, r30
   1cec8:	ff 27       	eor	r31, r31
   1ceca:	93 58       	subi	r25, 0x83	; 131
   1cecc:	5f 4f       	sbci	r21, 0xFF	; 255
   1cece:	2a f0       	brmi	.+10     	; 0x1ceda <__divsf3_pse+0x6c>
   1ced0:	9e 3f       	cpi	r25, 0xFE	; 254
   1ced2:	51 05       	cpc	r21, r1
   1ced4:	68 f0       	brcs	.+26     	; 0x1cef0 <__divsf3_pse+0x82>
   1ced6:	b6 c0       	rjmp	.+364    	; 0x1d044 <__fp_inf>
   1ced8:	00 c1       	rjmp	.+512    	; 0x1d0da <__fp_szero>
   1ceda:	5f 3f       	cpi	r21, 0xFF	; 255
   1cedc:	ec f3       	brlt	.-6      	; 0x1ced8 <__divsf3_pse+0x6a>
   1cede:	98 3e       	cpi	r25, 0xE8	; 232
   1cee0:	dc f3       	brlt	.-10     	; 0x1ced8 <__divsf3_pse+0x6a>
   1cee2:	86 95       	lsr	r24
   1cee4:	77 95       	ror	r23
   1cee6:	67 95       	ror	r22
   1cee8:	b7 95       	ror	r27
   1ceea:	f7 95       	ror	r31
   1ceec:	9f 5f       	subi	r25, 0xFF	; 255
   1ceee:	c9 f7       	brne	.-14     	; 0x1cee2 <__divsf3_pse+0x74>
   1cef0:	88 0f       	add	r24, r24
   1cef2:	91 1d       	adc	r25, r1
   1cef4:	96 95       	lsr	r25
   1cef6:	87 95       	ror	r24
   1cef8:	97 f9       	bld	r25, 7
   1cefa:	08 95       	ret
   1cefc:	e1 e0       	ldi	r30, 0x01	; 1
   1cefe:	66 0f       	add	r22, r22
   1cf00:	77 1f       	adc	r23, r23
   1cf02:	88 1f       	adc	r24, r24
   1cf04:	bb 1f       	adc	r27, r27
   1cf06:	62 17       	cp	r22, r18
   1cf08:	73 07       	cpc	r23, r19
   1cf0a:	84 07       	cpc	r24, r20
   1cf0c:	ba 07       	cpc	r27, r26
   1cf0e:	20 f0       	brcs	.+8      	; 0x1cf18 <__divsf3_pse+0xaa>
   1cf10:	62 1b       	sub	r22, r18
   1cf12:	73 0b       	sbc	r23, r19
   1cf14:	84 0b       	sbc	r24, r20
   1cf16:	ba 0b       	sbc	r27, r26
   1cf18:	ee 1f       	adc	r30, r30
   1cf1a:	88 f7       	brcc	.-30     	; 0x1cefe <__divsf3_pse+0x90>
   1cf1c:	e0 95       	com	r30
   1cf1e:	08 95       	ret

0001cf20 <__fixsfsi>:
   1cf20:	04 d0       	rcall	.+8      	; 0x1cf2a <__fixunssfsi>
   1cf22:	68 94       	set
   1cf24:	b1 11       	cpse	r27, r1
   1cf26:	d9 c0       	rjmp	.+434    	; 0x1d0da <__fp_szero>
   1cf28:	08 95       	ret

0001cf2a <__fixunssfsi>:
   1cf2a:	bc d0       	rcall	.+376    	; 0x1d0a4 <__fp_splitA>
   1cf2c:	88 f0       	brcs	.+34     	; 0x1cf50 <__fixunssfsi+0x26>
   1cf2e:	9f 57       	subi	r25, 0x7F	; 127
   1cf30:	90 f0       	brcs	.+36     	; 0x1cf56 <__fixunssfsi+0x2c>
   1cf32:	b9 2f       	mov	r27, r25
   1cf34:	99 27       	eor	r25, r25
   1cf36:	b7 51       	subi	r27, 0x17	; 23
   1cf38:	a0 f0       	brcs	.+40     	; 0x1cf62 <__fixunssfsi+0x38>
   1cf3a:	d1 f0       	breq	.+52     	; 0x1cf70 <__fixunssfsi+0x46>
   1cf3c:	66 0f       	add	r22, r22
   1cf3e:	77 1f       	adc	r23, r23
   1cf40:	88 1f       	adc	r24, r24
   1cf42:	99 1f       	adc	r25, r25
   1cf44:	1a f0       	brmi	.+6      	; 0x1cf4c <__fixunssfsi+0x22>
   1cf46:	ba 95       	dec	r27
   1cf48:	c9 f7       	brne	.-14     	; 0x1cf3c <__fixunssfsi+0x12>
   1cf4a:	12 c0       	rjmp	.+36     	; 0x1cf70 <__fixunssfsi+0x46>
   1cf4c:	b1 30       	cpi	r27, 0x01	; 1
   1cf4e:	81 f0       	breq	.+32     	; 0x1cf70 <__fixunssfsi+0x46>
   1cf50:	c3 d0       	rcall	.+390    	; 0x1d0d8 <__fp_zero>
   1cf52:	b1 e0       	ldi	r27, 0x01	; 1
   1cf54:	08 95       	ret
   1cf56:	c0 c0       	rjmp	.+384    	; 0x1d0d8 <__fp_zero>
   1cf58:	67 2f       	mov	r22, r23
   1cf5a:	78 2f       	mov	r23, r24
   1cf5c:	88 27       	eor	r24, r24
   1cf5e:	b8 5f       	subi	r27, 0xF8	; 248
   1cf60:	39 f0       	breq	.+14     	; 0x1cf70 <__fixunssfsi+0x46>
   1cf62:	b9 3f       	cpi	r27, 0xF9	; 249
   1cf64:	cc f3       	brlt	.-14     	; 0x1cf58 <__fixunssfsi+0x2e>
   1cf66:	86 95       	lsr	r24
   1cf68:	77 95       	ror	r23
   1cf6a:	67 95       	ror	r22
   1cf6c:	b3 95       	inc	r27
   1cf6e:	d9 f7       	brne	.-10     	; 0x1cf66 <__fixunssfsi+0x3c>
   1cf70:	3e f4       	brtc	.+14     	; 0x1cf80 <__fixunssfsi+0x56>
   1cf72:	90 95       	com	r25
   1cf74:	80 95       	com	r24
   1cf76:	70 95       	com	r23
   1cf78:	61 95       	neg	r22
   1cf7a:	7f 4f       	sbci	r23, 0xFF	; 255
   1cf7c:	8f 4f       	sbci	r24, 0xFF	; 255
   1cf7e:	9f 4f       	sbci	r25, 0xFF	; 255
   1cf80:	08 95       	ret

0001cf82 <__floatunsisf>:
   1cf82:	e8 94       	clt
   1cf84:	09 c0       	rjmp	.+18     	; 0x1cf98 <__floatsisf+0x12>

0001cf86 <__floatsisf>:
   1cf86:	97 fb       	bst	r25, 7
   1cf88:	3e f4       	brtc	.+14     	; 0x1cf98 <__floatsisf+0x12>
   1cf8a:	90 95       	com	r25
   1cf8c:	80 95       	com	r24
   1cf8e:	70 95       	com	r23
   1cf90:	61 95       	neg	r22
   1cf92:	7f 4f       	sbci	r23, 0xFF	; 255
   1cf94:	8f 4f       	sbci	r24, 0xFF	; 255
   1cf96:	9f 4f       	sbci	r25, 0xFF	; 255
   1cf98:	99 23       	and	r25, r25
   1cf9a:	a9 f0       	breq	.+42     	; 0x1cfc6 <__floatsisf+0x40>
   1cf9c:	f9 2f       	mov	r31, r25
   1cf9e:	96 e9       	ldi	r25, 0x96	; 150
   1cfa0:	bb 27       	eor	r27, r27
   1cfa2:	93 95       	inc	r25
   1cfa4:	f6 95       	lsr	r31
   1cfa6:	87 95       	ror	r24
   1cfa8:	77 95       	ror	r23
   1cfaa:	67 95       	ror	r22
   1cfac:	b7 95       	ror	r27
   1cfae:	f1 11       	cpse	r31, r1
   1cfb0:	f8 cf       	rjmp	.-16     	; 0x1cfa2 <__floatsisf+0x1c>
   1cfb2:	fa f4       	brpl	.+62     	; 0x1cff2 <__floatsisf+0x6c>
   1cfb4:	bb 0f       	add	r27, r27
   1cfb6:	11 f4       	brne	.+4      	; 0x1cfbc <__floatsisf+0x36>
   1cfb8:	60 ff       	sbrs	r22, 0
   1cfba:	1b c0       	rjmp	.+54     	; 0x1cff2 <__floatsisf+0x6c>
   1cfbc:	6f 5f       	subi	r22, 0xFF	; 255
   1cfbe:	7f 4f       	sbci	r23, 0xFF	; 255
   1cfc0:	8f 4f       	sbci	r24, 0xFF	; 255
   1cfc2:	9f 4f       	sbci	r25, 0xFF	; 255
   1cfc4:	16 c0       	rjmp	.+44     	; 0x1cff2 <__floatsisf+0x6c>
   1cfc6:	88 23       	and	r24, r24
   1cfc8:	11 f0       	breq	.+4      	; 0x1cfce <__floatsisf+0x48>
   1cfca:	96 e9       	ldi	r25, 0x96	; 150
   1cfcc:	11 c0       	rjmp	.+34     	; 0x1cff0 <__floatsisf+0x6a>
   1cfce:	77 23       	and	r23, r23
   1cfd0:	21 f0       	breq	.+8      	; 0x1cfda <__floatsisf+0x54>
   1cfd2:	9e e8       	ldi	r25, 0x8E	; 142
   1cfd4:	87 2f       	mov	r24, r23
   1cfd6:	76 2f       	mov	r23, r22
   1cfd8:	05 c0       	rjmp	.+10     	; 0x1cfe4 <__floatsisf+0x5e>
   1cfda:	66 23       	and	r22, r22
   1cfdc:	71 f0       	breq	.+28     	; 0x1cffa <__floatsisf+0x74>
   1cfde:	96 e8       	ldi	r25, 0x86	; 134
   1cfe0:	86 2f       	mov	r24, r22
   1cfe2:	70 e0       	ldi	r23, 0x00	; 0
   1cfe4:	60 e0       	ldi	r22, 0x00	; 0
   1cfe6:	2a f0       	brmi	.+10     	; 0x1cff2 <__floatsisf+0x6c>
   1cfe8:	9a 95       	dec	r25
   1cfea:	66 0f       	add	r22, r22
   1cfec:	77 1f       	adc	r23, r23
   1cfee:	88 1f       	adc	r24, r24
   1cff0:	da f7       	brpl	.-10     	; 0x1cfe8 <__floatsisf+0x62>
   1cff2:	88 0f       	add	r24, r24
   1cff4:	96 95       	lsr	r25
   1cff6:	87 95       	ror	r24
   1cff8:	97 f9       	bld	r25, 7
   1cffa:	08 95       	ret

0001cffc <__fp_cmp>:
   1cffc:	99 0f       	add	r25, r25
   1cffe:	00 08       	sbc	r0, r0
   1d000:	55 0f       	add	r21, r21
   1d002:	aa 0b       	sbc	r26, r26
   1d004:	e0 e8       	ldi	r30, 0x80	; 128
   1d006:	fe ef       	ldi	r31, 0xFE	; 254
   1d008:	16 16       	cp	r1, r22
   1d00a:	17 06       	cpc	r1, r23
   1d00c:	e8 07       	cpc	r30, r24
   1d00e:	f9 07       	cpc	r31, r25
   1d010:	c0 f0       	brcs	.+48     	; 0x1d042 <__fp_cmp+0x46>
   1d012:	12 16       	cp	r1, r18
   1d014:	13 06       	cpc	r1, r19
   1d016:	e4 07       	cpc	r30, r20
   1d018:	f5 07       	cpc	r31, r21
   1d01a:	98 f0       	brcs	.+38     	; 0x1d042 <__fp_cmp+0x46>
   1d01c:	62 1b       	sub	r22, r18
   1d01e:	73 0b       	sbc	r23, r19
   1d020:	84 0b       	sbc	r24, r20
   1d022:	95 0b       	sbc	r25, r21
   1d024:	39 f4       	brne	.+14     	; 0x1d034 <__fp_cmp+0x38>
   1d026:	0a 26       	eor	r0, r26
   1d028:	61 f0       	breq	.+24     	; 0x1d042 <__fp_cmp+0x46>
   1d02a:	23 2b       	or	r18, r19
   1d02c:	24 2b       	or	r18, r20
   1d02e:	25 2b       	or	r18, r21
   1d030:	21 f4       	brne	.+8      	; 0x1d03a <__fp_cmp+0x3e>
   1d032:	08 95       	ret
   1d034:	0a 26       	eor	r0, r26
   1d036:	09 f4       	brne	.+2      	; 0x1d03a <__fp_cmp+0x3e>
   1d038:	a1 40       	sbci	r26, 0x01	; 1
   1d03a:	a6 95       	lsr	r26
   1d03c:	8f ef       	ldi	r24, 0xFF	; 255
   1d03e:	81 1d       	adc	r24, r1
   1d040:	81 1d       	adc	r24, r1
   1d042:	08 95       	ret

0001d044 <__fp_inf>:
   1d044:	97 f9       	bld	r25, 7
   1d046:	9f 67       	ori	r25, 0x7F	; 127
   1d048:	80 e8       	ldi	r24, 0x80	; 128
   1d04a:	70 e0       	ldi	r23, 0x00	; 0
   1d04c:	60 e0       	ldi	r22, 0x00	; 0
   1d04e:	08 95       	ret

0001d050 <__fp_nan>:
   1d050:	9f ef       	ldi	r25, 0xFF	; 255
   1d052:	80 ec       	ldi	r24, 0xC0	; 192
   1d054:	08 95       	ret

0001d056 <__fp_pscA>:
   1d056:	00 24       	eor	r0, r0
   1d058:	0a 94       	dec	r0
   1d05a:	16 16       	cp	r1, r22
   1d05c:	17 06       	cpc	r1, r23
   1d05e:	18 06       	cpc	r1, r24
   1d060:	09 06       	cpc	r0, r25
   1d062:	08 95       	ret

0001d064 <__fp_pscB>:
   1d064:	00 24       	eor	r0, r0
   1d066:	0a 94       	dec	r0
   1d068:	12 16       	cp	r1, r18
   1d06a:	13 06       	cpc	r1, r19
   1d06c:	14 06       	cpc	r1, r20
   1d06e:	05 06       	cpc	r0, r21
   1d070:	08 95       	ret

0001d072 <__fp_round>:
   1d072:	09 2e       	mov	r0, r25
   1d074:	03 94       	inc	r0
   1d076:	00 0c       	add	r0, r0
   1d078:	11 f4       	brne	.+4      	; 0x1d07e <__fp_round+0xc>
   1d07a:	88 23       	and	r24, r24
   1d07c:	52 f0       	brmi	.+20     	; 0x1d092 <__fp_round+0x20>
   1d07e:	bb 0f       	add	r27, r27
   1d080:	40 f4       	brcc	.+16     	; 0x1d092 <__fp_round+0x20>
   1d082:	bf 2b       	or	r27, r31
   1d084:	11 f4       	brne	.+4      	; 0x1d08a <__fp_round+0x18>
   1d086:	60 ff       	sbrs	r22, 0
   1d088:	04 c0       	rjmp	.+8      	; 0x1d092 <__fp_round+0x20>
   1d08a:	6f 5f       	subi	r22, 0xFF	; 255
   1d08c:	7f 4f       	sbci	r23, 0xFF	; 255
   1d08e:	8f 4f       	sbci	r24, 0xFF	; 255
   1d090:	9f 4f       	sbci	r25, 0xFF	; 255
   1d092:	08 95       	ret

0001d094 <__fp_split3>:
   1d094:	57 fd       	sbrc	r21, 7
   1d096:	90 58       	subi	r25, 0x80	; 128
   1d098:	44 0f       	add	r20, r20
   1d09a:	55 1f       	adc	r21, r21
   1d09c:	59 f0       	breq	.+22     	; 0x1d0b4 <__fp_splitA+0x10>
   1d09e:	5f 3f       	cpi	r21, 0xFF	; 255
   1d0a0:	71 f0       	breq	.+28     	; 0x1d0be <__fp_splitA+0x1a>
   1d0a2:	47 95       	ror	r20

0001d0a4 <__fp_splitA>:
   1d0a4:	88 0f       	add	r24, r24
   1d0a6:	97 fb       	bst	r25, 7
   1d0a8:	99 1f       	adc	r25, r25
   1d0aa:	61 f0       	breq	.+24     	; 0x1d0c4 <__fp_splitA+0x20>
   1d0ac:	9f 3f       	cpi	r25, 0xFF	; 255
   1d0ae:	79 f0       	breq	.+30     	; 0x1d0ce <__fp_splitA+0x2a>
   1d0b0:	87 95       	ror	r24
   1d0b2:	08 95       	ret
   1d0b4:	12 16       	cp	r1, r18
   1d0b6:	13 06       	cpc	r1, r19
   1d0b8:	14 06       	cpc	r1, r20
   1d0ba:	55 1f       	adc	r21, r21
   1d0bc:	f2 cf       	rjmp	.-28     	; 0x1d0a2 <__fp_split3+0xe>
   1d0be:	46 95       	lsr	r20
   1d0c0:	f1 df       	rcall	.-30     	; 0x1d0a4 <__fp_splitA>
   1d0c2:	08 c0       	rjmp	.+16     	; 0x1d0d4 <__fp_splitA+0x30>
   1d0c4:	16 16       	cp	r1, r22
   1d0c6:	17 06       	cpc	r1, r23
   1d0c8:	18 06       	cpc	r1, r24
   1d0ca:	99 1f       	adc	r25, r25
   1d0cc:	f1 cf       	rjmp	.-30     	; 0x1d0b0 <__fp_splitA+0xc>
   1d0ce:	86 95       	lsr	r24
   1d0d0:	71 05       	cpc	r23, r1
   1d0d2:	61 05       	cpc	r22, r1
   1d0d4:	08 94       	sec
   1d0d6:	08 95       	ret

0001d0d8 <__fp_zero>:
   1d0d8:	e8 94       	clt

0001d0da <__fp_szero>:
   1d0da:	bb 27       	eor	r27, r27
   1d0dc:	66 27       	eor	r22, r22
   1d0de:	77 27       	eor	r23, r23
   1d0e0:	cb 01       	movw	r24, r22
   1d0e2:	97 f9       	bld	r25, 7
   1d0e4:	08 95       	ret

0001d0e6 <__gesf2>:
   1d0e6:	8a df       	rcall	.-236    	; 0x1cffc <__fp_cmp>
   1d0e8:	08 f4       	brcc	.+2      	; 0x1d0ec <__gesf2+0x6>
   1d0ea:	8f ef       	ldi	r24, 0xFF	; 255
   1d0ec:	08 95       	ret

0001d0ee <__mulsf3>:
   1d0ee:	0b d0       	rcall	.+22     	; 0x1d106 <__mulsf3x>
   1d0f0:	c0 cf       	rjmp	.-128    	; 0x1d072 <__fp_round>
   1d0f2:	b1 df       	rcall	.-158    	; 0x1d056 <__fp_pscA>
   1d0f4:	28 f0       	brcs	.+10     	; 0x1d100 <__mulsf3+0x12>
   1d0f6:	b6 df       	rcall	.-148    	; 0x1d064 <__fp_pscB>
   1d0f8:	18 f0       	brcs	.+6      	; 0x1d100 <__mulsf3+0x12>
   1d0fa:	95 23       	and	r25, r21
   1d0fc:	09 f0       	breq	.+2      	; 0x1d100 <__mulsf3+0x12>
   1d0fe:	a2 cf       	rjmp	.-188    	; 0x1d044 <__fp_inf>
   1d100:	a7 cf       	rjmp	.-178    	; 0x1d050 <__fp_nan>
   1d102:	11 24       	eor	r1, r1
   1d104:	ea cf       	rjmp	.-44     	; 0x1d0da <__fp_szero>

0001d106 <__mulsf3x>:
   1d106:	c6 df       	rcall	.-116    	; 0x1d094 <__fp_split3>
   1d108:	a0 f3       	brcs	.-24     	; 0x1d0f2 <__mulsf3+0x4>

0001d10a <__mulsf3_pse>:
   1d10a:	95 9f       	mul	r25, r21
   1d10c:	d1 f3       	breq	.-12     	; 0x1d102 <__mulsf3+0x14>
   1d10e:	95 0f       	add	r25, r21
   1d110:	50 e0       	ldi	r21, 0x00	; 0
   1d112:	55 1f       	adc	r21, r21
   1d114:	62 9f       	mul	r22, r18
   1d116:	f0 01       	movw	r30, r0
   1d118:	72 9f       	mul	r23, r18
   1d11a:	bb 27       	eor	r27, r27
   1d11c:	f0 0d       	add	r31, r0
   1d11e:	b1 1d       	adc	r27, r1
   1d120:	63 9f       	mul	r22, r19
   1d122:	aa 27       	eor	r26, r26
   1d124:	f0 0d       	add	r31, r0
   1d126:	b1 1d       	adc	r27, r1
   1d128:	aa 1f       	adc	r26, r26
   1d12a:	64 9f       	mul	r22, r20
   1d12c:	66 27       	eor	r22, r22
   1d12e:	b0 0d       	add	r27, r0
   1d130:	a1 1d       	adc	r26, r1
   1d132:	66 1f       	adc	r22, r22
   1d134:	82 9f       	mul	r24, r18
   1d136:	22 27       	eor	r18, r18
   1d138:	b0 0d       	add	r27, r0
   1d13a:	a1 1d       	adc	r26, r1
   1d13c:	62 1f       	adc	r22, r18
   1d13e:	73 9f       	mul	r23, r19
   1d140:	b0 0d       	add	r27, r0
   1d142:	a1 1d       	adc	r26, r1
   1d144:	62 1f       	adc	r22, r18
   1d146:	83 9f       	mul	r24, r19
   1d148:	a0 0d       	add	r26, r0
   1d14a:	61 1d       	adc	r22, r1
   1d14c:	22 1f       	adc	r18, r18
   1d14e:	74 9f       	mul	r23, r20
   1d150:	33 27       	eor	r19, r19
   1d152:	a0 0d       	add	r26, r0
   1d154:	61 1d       	adc	r22, r1
   1d156:	23 1f       	adc	r18, r19
   1d158:	84 9f       	mul	r24, r20
   1d15a:	60 0d       	add	r22, r0
   1d15c:	21 1d       	adc	r18, r1
   1d15e:	82 2f       	mov	r24, r18
   1d160:	76 2f       	mov	r23, r22
   1d162:	6a 2f       	mov	r22, r26
   1d164:	11 24       	eor	r1, r1
   1d166:	9f 57       	subi	r25, 0x7F	; 127
   1d168:	50 40       	sbci	r21, 0x00	; 0
   1d16a:	8a f0       	brmi	.+34     	; 0x1d18e <__mulsf3_pse+0x84>
   1d16c:	e1 f0       	breq	.+56     	; 0x1d1a6 <__mulsf3_pse+0x9c>
   1d16e:	88 23       	and	r24, r24
   1d170:	4a f0       	brmi	.+18     	; 0x1d184 <__mulsf3_pse+0x7a>
   1d172:	ee 0f       	add	r30, r30
   1d174:	ff 1f       	adc	r31, r31
   1d176:	bb 1f       	adc	r27, r27
   1d178:	66 1f       	adc	r22, r22
   1d17a:	77 1f       	adc	r23, r23
   1d17c:	88 1f       	adc	r24, r24
   1d17e:	91 50       	subi	r25, 0x01	; 1
   1d180:	50 40       	sbci	r21, 0x00	; 0
   1d182:	a9 f7       	brne	.-22     	; 0x1d16e <__mulsf3_pse+0x64>
   1d184:	9e 3f       	cpi	r25, 0xFE	; 254
   1d186:	51 05       	cpc	r21, r1
   1d188:	70 f0       	brcs	.+28     	; 0x1d1a6 <__mulsf3_pse+0x9c>
   1d18a:	5c cf       	rjmp	.-328    	; 0x1d044 <__fp_inf>
   1d18c:	a6 cf       	rjmp	.-180    	; 0x1d0da <__fp_szero>
   1d18e:	5f 3f       	cpi	r21, 0xFF	; 255
   1d190:	ec f3       	brlt	.-6      	; 0x1d18c <__mulsf3_pse+0x82>
   1d192:	98 3e       	cpi	r25, 0xE8	; 232
   1d194:	dc f3       	brlt	.-10     	; 0x1d18c <__mulsf3_pse+0x82>
   1d196:	86 95       	lsr	r24
   1d198:	77 95       	ror	r23
   1d19a:	67 95       	ror	r22
   1d19c:	b7 95       	ror	r27
   1d19e:	f7 95       	ror	r31
   1d1a0:	e7 95       	ror	r30
   1d1a2:	9f 5f       	subi	r25, 0xFF	; 255
   1d1a4:	c1 f7       	brne	.-16     	; 0x1d196 <__mulsf3_pse+0x8c>
   1d1a6:	fe 2b       	or	r31, r30
   1d1a8:	88 0f       	add	r24, r24
   1d1aa:	91 1d       	adc	r25, r1
   1d1ac:	96 95       	lsr	r25
   1d1ae:	87 95       	ror	r24
   1d1b0:	97 f9       	bld	r25, 7
   1d1b2:	08 95       	ret

0001d1b4 <round>:
   1d1b4:	77 df       	rcall	.-274    	; 0x1d0a4 <__fp_splitA>
   1d1b6:	e0 f0       	brcs	.+56     	; 0x1d1f0 <round+0x3c>
   1d1b8:	9e 37       	cpi	r25, 0x7E	; 126
   1d1ba:	d8 f0       	brcs	.+54     	; 0x1d1f2 <round+0x3e>
   1d1bc:	96 39       	cpi	r25, 0x96	; 150
   1d1be:	b8 f4       	brcc	.+46     	; 0x1d1ee <round+0x3a>
   1d1c0:	9e 38       	cpi	r25, 0x8E	; 142
   1d1c2:	48 f4       	brcc	.+18     	; 0x1d1d6 <round+0x22>
   1d1c4:	67 2f       	mov	r22, r23
   1d1c6:	78 2f       	mov	r23, r24
   1d1c8:	88 27       	eor	r24, r24
   1d1ca:	98 5f       	subi	r25, 0xF8	; 248
   1d1cc:	f9 cf       	rjmp	.-14     	; 0x1d1c0 <round+0xc>
   1d1ce:	86 95       	lsr	r24
   1d1d0:	77 95       	ror	r23
   1d1d2:	67 95       	ror	r22
   1d1d4:	93 95       	inc	r25
   1d1d6:	95 39       	cpi	r25, 0x95	; 149
   1d1d8:	d0 f3       	brcs	.-12     	; 0x1d1ce <round+0x1a>
   1d1da:	b6 2f       	mov	r27, r22
   1d1dc:	b1 70       	andi	r27, 0x01	; 1
   1d1de:	6b 0f       	add	r22, r27
   1d1e0:	71 1d       	adc	r23, r1
   1d1e2:	81 1d       	adc	r24, r1
   1d1e4:	20 f4       	brcc	.+8      	; 0x1d1ee <round+0x3a>
   1d1e6:	87 95       	ror	r24
   1d1e8:	77 95       	ror	r23
   1d1ea:	67 95       	ror	r22
   1d1ec:	93 95       	inc	r25
   1d1ee:	02 c0       	rjmp	.+4      	; 0x1d1f4 <__fp_mintl>
   1d1f0:	1c c0       	rjmp	.+56     	; 0x1d22a <__fp_mpack>
   1d1f2:	73 cf       	rjmp	.-282    	; 0x1d0da <__fp_szero>

0001d1f4 <__fp_mintl>:
   1d1f4:	88 23       	and	r24, r24
   1d1f6:	71 f4       	brne	.+28     	; 0x1d214 <__fp_mintl+0x20>
   1d1f8:	77 23       	and	r23, r23
   1d1fa:	21 f0       	breq	.+8      	; 0x1d204 <__fp_mintl+0x10>
   1d1fc:	98 50       	subi	r25, 0x08	; 8
   1d1fe:	87 2b       	or	r24, r23
   1d200:	76 2f       	mov	r23, r22
   1d202:	07 c0       	rjmp	.+14     	; 0x1d212 <__fp_mintl+0x1e>
   1d204:	66 23       	and	r22, r22
   1d206:	11 f4       	brne	.+4      	; 0x1d20c <__fp_mintl+0x18>
   1d208:	99 27       	eor	r25, r25
   1d20a:	0d c0       	rjmp	.+26     	; 0x1d226 <__fp_mintl+0x32>
   1d20c:	90 51       	subi	r25, 0x10	; 16
   1d20e:	86 2b       	or	r24, r22
   1d210:	70 e0       	ldi	r23, 0x00	; 0
   1d212:	60 e0       	ldi	r22, 0x00	; 0
   1d214:	2a f0       	brmi	.+10     	; 0x1d220 <__fp_mintl+0x2c>
   1d216:	9a 95       	dec	r25
   1d218:	66 0f       	add	r22, r22
   1d21a:	77 1f       	adc	r23, r23
   1d21c:	88 1f       	adc	r24, r24
   1d21e:	da f7       	brpl	.-10     	; 0x1d216 <__fp_mintl+0x22>
   1d220:	88 0f       	add	r24, r24
   1d222:	96 95       	lsr	r25
   1d224:	87 95       	ror	r24
   1d226:	97 f9       	bld	r25, 7
   1d228:	08 95       	ret

0001d22a <__fp_mpack>:
   1d22a:	9f 3f       	cpi	r25, 0xFF	; 255
   1d22c:	31 f0       	breq	.+12     	; 0x1d23a <__fp_mpack_finite+0xc>

0001d22e <__fp_mpack_finite>:
   1d22e:	91 50       	subi	r25, 0x01	; 1
   1d230:	20 f4       	brcc	.+8      	; 0x1d23a <__fp_mpack_finite+0xc>
   1d232:	87 95       	ror	r24
   1d234:	77 95       	ror	r23
   1d236:	67 95       	ror	r22
   1d238:	b7 95       	ror	r27
   1d23a:	88 0f       	add	r24, r24
   1d23c:	91 1d       	adc	r25, r1
   1d23e:	96 95       	lsr	r25
   1d240:	87 95       	ror	r24
   1d242:	97 f9       	bld	r25, 7
   1d244:	08 95       	ret

0001d246 <calloc>:
   1d246:	0f 93       	push	r16
   1d248:	1f 93       	push	r17
   1d24a:	cf 93       	push	r28
   1d24c:	df 93       	push	r29
   1d24e:	86 9f       	mul	r24, r22
   1d250:	80 01       	movw	r16, r0
   1d252:	87 9f       	mul	r24, r23
   1d254:	10 0d       	add	r17, r0
   1d256:	96 9f       	mul	r25, r22
   1d258:	10 0d       	add	r17, r0
   1d25a:	11 24       	eor	r1, r1
   1d25c:	c8 01       	movw	r24, r16
   1d25e:	0d d0       	rcall	.+26     	; 0x1d27a <malloc>
   1d260:	ec 01       	movw	r28, r24
   1d262:	00 97       	sbiw	r24, 0x00	; 0
   1d264:	21 f0       	breq	.+8      	; 0x1d26e <calloc+0x28>
   1d266:	a8 01       	movw	r20, r16
   1d268:	60 e0       	ldi	r22, 0x00	; 0
   1d26a:	70 e0       	ldi	r23, 0x00	; 0
   1d26c:	27 d1       	rcall	.+590    	; 0x1d4bc <memset>
   1d26e:	ce 01       	movw	r24, r28
   1d270:	df 91       	pop	r29
   1d272:	cf 91       	pop	r28
   1d274:	1f 91       	pop	r17
   1d276:	0f 91       	pop	r16
   1d278:	08 95       	ret

0001d27a <malloc>:
   1d27a:	0f 93       	push	r16
   1d27c:	1f 93       	push	r17
   1d27e:	cf 93       	push	r28
   1d280:	df 93       	push	r29
   1d282:	82 30       	cpi	r24, 0x02	; 2
   1d284:	91 05       	cpc	r25, r1
   1d286:	10 f4       	brcc	.+4      	; 0x1d28c <malloc+0x12>
   1d288:	82 e0       	ldi	r24, 0x02	; 2
   1d28a:	90 e0       	ldi	r25, 0x00	; 0
   1d28c:	e0 91 24 20 	lds	r30, 0x2024	; 0x802024 <__flp>
   1d290:	f0 91 25 20 	lds	r31, 0x2025	; 0x802025 <__flp+0x1>
   1d294:	20 e0       	ldi	r18, 0x00	; 0
   1d296:	30 e0       	ldi	r19, 0x00	; 0
   1d298:	a0 e0       	ldi	r26, 0x00	; 0
   1d29a:	b0 e0       	ldi	r27, 0x00	; 0
   1d29c:	30 97       	sbiw	r30, 0x00	; 0
   1d29e:	19 f1       	breq	.+70     	; 0x1d2e6 <malloc+0x6c>
   1d2a0:	40 81       	ld	r20, Z
   1d2a2:	51 81       	ldd	r21, Z+1	; 0x01
   1d2a4:	02 81       	ldd	r16, Z+2	; 0x02
   1d2a6:	13 81       	ldd	r17, Z+3	; 0x03
   1d2a8:	48 17       	cp	r20, r24
   1d2aa:	59 07       	cpc	r21, r25
   1d2ac:	c8 f0       	brcs	.+50     	; 0x1d2e0 <malloc+0x66>
   1d2ae:	84 17       	cp	r24, r20
   1d2b0:	95 07       	cpc	r25, r21
   1d2b2:	69 f4       	brne	.+26     	; 0x1d2ce <malloc+0x54>
   1d2b4:	10 97       	sbiw	r26, 0x00	; 0
   1d2b6:	31 f0       	breq	.+12     	; 0x1d2c4 <malloc+0x4a>
   1d2b8:	12 96       	adiw	r26, 0x02	; 2
   1d2ba:	0c 93       	st	X, r16
   1d2bc:	12 97       	sbiw	r26, 0x02	; 2
   1d2be:	13 96       	adiw	r26, 0x03	; 3
   1d2c0:	1c 93       	st	X, r17
   1d2c2:	27 c0       	rjmp	.+78     	; 0x1d312 <malloc+0x98>
   1d2c4:	00 93 24 20 	sts	0x2024, r16	; 0x802024 <__flp>
   1d2c8:	10 93 25 20 	sts	0x2025, r17	; 0x802025 <__flp+0x1>
   1d2cc:	22 c0       	rjmp	.+68     	; 0x1d312 <malloc+0x98>
   1d2ce:	21 15       	cp	r18, r1
   1d2d0:	31 05       	cpc	r19, r1
   1d2d2:	19 f0       	breq	.+6      	; 0x1d2da <malloc+0x60>
   1d2d4:	42 17       	cp	r20, r18
   1d2d6:	53 07       	cpc	r21, r19
   1d2d8:	18 f4       	brcc	.+6      	; 0x1d2e0 <malloc+0x66>
   1d2da:	9a 01       	movw	r18, r20
   1d2dc:	bd 01       	movw	r22, r26
   1d2de:	ef 01       	movw	r28, r30
   1d2e0:	df 01       	movw	r26, r30
   1d2e2:	f8 01       	movw	r30, r16
   1d2e4:	db cf       	rjmp	.-74     	; 0x1d29c <malloc+0x22>
   1d2e6:	21 15       	cp	r18, r1
   1d2e8:	31 05       	cpc	r19, r1
   1d2ea:	f9 f0       	breq	.+62     	; 0x1d32a <malloc+0xb0>
   1d2ec:	28 1b       	sub	r18, r24
   1d2ee:	39 0b       	sbc	r19, r25
   1d2f0:	24 30       	cpi	r18, 0x04	; 4
   1d2f2:	31 05       	cpc	r19, r1
   1d2f4:	80 f4       	brcc	.+32     	; 0x1d316 <malloc+0x9c>
   1d2f6:	8a 81       	ldd	r24, Y+2	; 0x02
   1d2f8:	9b 81       	ldd	r25, Y+3	; 0x03
   1d2fa:	61 15       	cp	r22, r1
   1d2fc:	71 05       	cpc	r23, r1
   1d2fe:	21 f0       	breq	.+8      	; 0x1d308 <malloc+0x8e>
   1d300:	fb 01       	movw	r30, r22
   1d302:	93 83       	std	Z+3, r25	; 0x03
   1d304:	82 83       	std	Z+2, r24	; 0x02
   1d306:	04 c0       	rjmp	.+8      	; 0x1d310 <malloc+0x96>
   1d308:	90 93 25 20 	sts	0x2025, r25	; 0x802025 <__flp+0x1>
   1d30c:	80 93 24 20 	sts	0x2024, r24	; 0x802024 <__flp>
   1d310:	fe 01       	movw	r30, r28
   1d312:	32 96       	adiw	r30, 0x02	; 2
   1d314:	44 c0       	rjmp	.+136    	; 0x1d39e <malloc+0x124>
   1d316:	fe 01       	movw	r30, r28
   1d318:	e2 0f       	add	r30, r18
   1d31a:	f3 1f       	adc	r31, r19
   1d31c:	81 93       	st	Z+, r24
   1d31e:	91 93       	st	Z+, r25
   1d320:	22 50       	subi	r18, 0x02	; 2
   1d322:	31 09       	sbc	r19, r1
   1d324:	39 83       	std	Y+1, r19	; 0x01
   1d326:	28 83       	st	Y, r18
   1d328:	3a c0       	rjmp	.+116    	; 0x1d39e <malloc+0x124>
   1d32a:	20 91 22 20 	lds	r18, 0x2022	; 0x802022 <__brkval>
   1d32e:	30 91 23 20 	lds	r19, 0x2023	; 0x802023 <__brkval+0x1>
   1d332:	23 2b       	or	r18, r19
   1d334:	41 f4       	brne	.+16     	; 0x1d346 <malloc+0xcc>
   1d336:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1d33a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1d33e:	30 93 23 20 	sts	0x2023, r19	; 0x802023 <__brkval+0x1>
   1d342:	20 93 22 20 	sts	0x2022, r18	; 0x802022 <__brkval>
   1d346:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1d34a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
   1d34e:	21 15       	cp	r18, r1
   1d350:	31 05       	cpc	r19, r1
   1d352:	41 f4       	brne	.+16     	; 0x1d364 <malloc+0xea>
   1d354:	2d b7       	in	r18, 0x3d	; 61
   1d356:	3e b7       	in	r19, 0x3e	; 62
   1d358:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1d35c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1d360:	24 1b       	sub	r18, r20
   1d362:	35 0b       	sbc	r19, r21
   1d364:	e0 91 22 20 	lds	r30, 0x2022	; 0x802022 <__brkval>
   1d368:	f0 91 23 20 	lds	r31, 0x2023	; 0x802023 <__brkval+0x1>
   1d36c:	e2 17       	cp	r30, r18
   1d36e:	f3 07       	cpc	r31, r19
   1d370:	a0 f4       	brcc	.+40     	; 0x1d39a <malloc+0x120>
   1d372:	2e 1b       	sub	r18, r30
   1d374:	3f 0b       	sbc	r19, r31
   1d376:	28 17       	cp	r18, r24
   1d378:	39 07       	cpc	r19, r25
   1d37a:	78 f0       	brcs	.+30     	; 0x1d39a <malloc+0x120>
   1d37c:	ac 01       	movw	r20, r24
   1d37e:	4e 5f       	subi	r20, 0xFE	; 254
   1d380:	5f 4f       	sbci	r21, 0xFF	; 255
   1d382:	24 17       	cp	r18, r20
   1d384:	35 07       	cpc	r19, r21
   1d386:	48 f0       	brcs	.+18     	; 0x1d39a <malloc+0x120>
   1d388:	4e 0f       	add	r20, r30
   1d38a:	5f 1f       	adc	r21, r31
   1d38c:	50 93 23 20 	sts	0x2023, r21	; 0x802023 <__brkval+0x1>
   1d390:	40 93 22 20 	sts	0x2022, r20	; 0x802022 <__brkval>
   1d394:	81 93       	st	Z+, r24
   1d396:	91 93       	st	Z+, r25
   1d398:	02 c0       	rjmp	.+4      	; 0x1d39e <malloc+0x124>
   1d39a:	e0 e0       	ldi	r30, 0x00	; 0
   1d39c:	f0 e0       	ldi	r31, 0x00	; 0
   1d39e:	cf 01       	movw	r24, r30
   1d3a0:	df 91       	pop	r29
   1d3a2:	cf 91       	pop	r28
   1d3a4:	1f 91       	pop	r17
   1d3a6:	0f 91       	pop	r16
   1d3a8:	08 95       	ret

0001d3aa <free>:
   1d3aa:	cf 93       	push	r28
   1d3ac:	df 93       	push	r29
   1d3ae:	00 97       	sbiw	r24, 0x00	; 0
   1d3b0:	09 f4       	brne	.+2      	; 0x1d3b4 <free+0xa>
   1d3b2:	81 c0       	rjmp	.+258    	; 0x1d4b6 <free+0x10c>
   1d3b4:	fc 01       	movw	r30, r24
   1d3b6:	32 97       	sbiw	r30, 0x02	; 2
   1d3b8:	13 82       	std	Z+3, r1	; 0x03
   1d3ba:	12 82       	std	Z+2, r1	; 0x02
   1d3bc:	a0 91 24 20 	lds	r26, 0x2024	; 0x802024 <__flp>
   1d3c0:	b0 91 25 20 	lds	r27, 0x2025	; 0x802025 <__flp+0x1>
   1d3c4:	10 97       	sbiw	r26, 0x00	; 0
   1d3c6:	81 f4       	brne	.+32     	; 0x1d3e8 <free+0x3e>
   1d3c8:	20 81       	ld	r18, Z
   1d3ca:	31 81       	ldd	r19, Z+1	; 0x01
   1d3cc:	82 0f       	add	r24, r18
   1d3ce:	93 1f       	adc	r25, r19
   1d3d0:	20 91 22 20 	lds	r18, 0x2022	; 0x802022 <__brkval>
   1d3d4:	30 91 23 20 	lds	r19, 0x2023	; 0x802023 <__brkval+0x1>
   1d3d8:	28 17       	cp	r18, r24
   1d3da:	39 07       	cpc	r19, r25
   1d3dc:	51 f5       	brne	.+84     	; 0x1d432 <free+0x88>
   1d3de:	f0 93 23 20 	sts	0x2023, r31	; 0x802023 <__brkval+0x1>
   1d3e2:	e0 93 22 20 	sts	0x2022, r30	; 0x802022 <__brkval>
   1d3e6:	67 c0       	rjmp	.+206    	; 0x1d4b6 <free+0x10c>
   1d3e8:	ed 01       	movw	r28, r26
   1d3ea:	20 e0       	ldi	r18, 0x00	; 0
   1d3ec:	30 e0       	ldi	r19, 0x00	; 0
   1d3ee:	ce 17       	cp	r28, r30
   1d3f0:	df 07       	cpc	r29, r31
   1d3f2:	40 f4       	brcc	.+16     	; 0x1d404 <free+0x5a>
   1d3f4:	4a 81       	ldd	r20, Y+2	; 0x02
   1d3f6:	5b 81       	ldd	r21, Y+3	; 0x03
   1d3f8:	9e 01       	movw	r18, r28
   1d3fa:	41 15       	cp	r20, r1
   1d3fc:	51 05       	cpc	r21, r1
   1d3fe:	f1 f0       	breq	.+60     	; 0x1d43c <free+0x92>
   1d400:	ea 01       	movw	r28, r20
   1d402:	f5 cf       	rjmp	.-22     	; 0x1d3ee <free+0x44>
   1d404:	d3 83       	std	Z+3, r29	; 0x03
   1d406:	c2 83       	std	Z+2, r28	; 0x02
   1d408:	40 81       	ld	r20, Z
   1d40a:	51 81       	ldd	r21, Z+1	; 0x01
   1d40c:	84 0f       	add	r24, r20
   1d40e:	95 1f       	adc	r25, r21
   1d410:	c8 17       	cp	r28, r24
   1d412:	d9 07       	cpc	r29, r25
   1d414:	59 f4       	brne	.+22     	; 0x1d42c <free+0x82>
   1d416:	88 81       	ld	r24, Y
   1d418:	99 81       	ldd	r25, Y+1	; 0x01
   1d41a:	84 0f       	add	r24, r20
   1d41c:	95 1f       	adc	r25, r21
   1d41e:	02 96       	adiw	r24, 0x02	; 2
   1d420:	91 83       	std	Z+1, r25	; 0x01
   1d422:	80 83       	st	Z, r24
   1d424:	8a 81       	ldd	r24, Y+2	; 0x02
   1d426:	9b 81       	ldd	r25, Y+3	; 0x03
   1d428:	93 83       	std	Z+3, r25	; 0x03
   1d42a:	82 83       	std	Z+2, r24	; 0x02
   1d42c:	21 15       	cp	r18, r1
   1d42e:	31 05       	cpc	r19, r1
   1d430:	29 f4       	brne	.+10     	; 0x1d43c <free+0x92>
   1d432:	f0 93 25 20 	sts	0x2025, r31	; 0x802025 <__flp+0x1>
   1d436:	e0 93 24 20 	sts	0x2024, r30	; 0x802024 <__flp>
   1d43a:	3d c0       	rjmp	.+122    	; 0x1d4b6 <free+0x10c>
   1d43c:	e9 01       	movw	r28, r18
   1d43e:	fb 83       	std	Y+3, r31	; 0x03
   1d440:	ea 83       	std	Y+2, r30	; 0x02
   1d442:	49 91       	ld	r20, Y+
   1d444:	59 91       	ld	r21, Y+
   1d446:	c4 0f       	add	r28, r20
   1d448:	d5 1f       	adc	r29, r21
   1d44a:	ec 17       	cp	r30, r28
   1d44c:	fd 07       	cpc	r31, r29
   1d44e:	61 f4       	brne	.+24     	; 0x1d468 <free+0xbe>
   1d450:	80 81       	ld	r24, Z
   1d452:	91 81       	ldd	r25, Z+1	; 0x01
   1d454:	84 0f       	add	r24, r20
   1d456:	95 1f       	adc	r25, r21
   1d458:	02 96       	adiw	r24, 0x02	; 2
   1d45a:	e9 01       	movw	r28, r18
   1d45c:	99 83       	std	Y+1, r25	; 0x01
   1d45e:	88 83       	st	Y, r24
   1d460:	82 81       	ldd	r24, Z+2	; 0x02
   1d462:	93 81       	ldd	r25, Z+3	; 0x03
   1d464:	9b 83       	std	Y+3, r25	; 0x03
   1d466:	8a 83       	std	Y+2, r24	; 0x02
   1d468:	e0 e0       	ldi	r30, 0x00	; 0
   1d46a:	f0 e0       	ldi	r31, 0x00	; 0
   1d46c:	12 96       	adiw	r26, 0x02	; 2
   1d46e:	8d 91       	ld	r24, X+
   1d470:	9c 91       	ld	r25, X
   1d472:	13 97       	sbiw	r26, 0x03	; 3
   1d474:	00 97       	sbiw	r24, 0x00	; 0
   1d476:	19 f0       	breq	.+6      	; 0x1d47e <free+0xd4>
   1d478:	fd 01       	movw	r30, r26
   1d47a:	dc 01       	movw	r26, r24
   1d47c:	f7 cf       	rjmp	.-18     	; 0x1d46c <free+0xc2>
   1d47e:	8d 91       	ld	r24, X+
   1d480:	9c 91       	ld	r25, X
   1d482:	11 97       	sbiw	r26, 0x01	; 1
   1d484:	9d 01       	movw	r18, r26
   1d486:	2e 5f       	subi	r18, 0xFE	; 254
   1d488:	3f 4f       	sbci	r19, 0xFF	; 255
   1d48a:	82 0f       	add	r24, r18
   1d48c:	93 1f       	adc	r25, r19
   1d48e:	20 91 22 20 	lds	r18, 0x2022	; 0x802022 <__brkval>
   1d492:	30 91 23 20 	lds	r19, 0x2023	; 0x802023 <__brkval+0x1>
   1d496:	28 17       	cp	r18, r24
   1d498:	39 07       	cpc	r19, r25
   1d49a:	69 f4       	brne	.+26     	; 0x1d4b6 <free+0x10c>
   1d49c:	30 97       	sbiw	r30, 0x00	; 0
   1d49e:	29 f4       	brne	.+10     	; 0x1d4aa <free+0x100>
   1d4a0:	10 92 25 20 	sts	0x2025, r1	; 0x802025 <__flp+0x1>
   1d4a4:	10 92 24 20 	sts	0x2024, r1	; 0x802024 <__flp>
   1d4a8:	02 c0       	rjmp	.+4      	; 0x1d4ae <free+0x104>
   1d4aa:	13 82       	std	Z+3, r1	; 0x03
   1d4ac:	12 82       	std	Z+2, r1	; 0x02
   1d4ae:	b0 93 23 20 	sts	0x2023, r27	; 0x802023 <__brkval+0x1>
   1d4b2:	a0 93 22 20 	sts	0x2022, r26	; 0x802022 <__brkval>
   1d4b6:	df 91       	pop	r29
   1d4b8:	cf 91       	pop	r28
   1d4ba:	08 95       	ret

0001d4bc <memset>:
   1d4bc:	dc 01       	movw	r26, r24
   1d4be:	01 c0       	rjmp	.+2      	; 0x1d4c2 <memset+0x6>
   1d4c0:	6d 93       	st	X+, r22
   1d4c2:	41 50       	subi	r20, 0x01	; 1
   1d4c4:	50 40       	sbci	r21, 0x00	; 0
   1d4c6:	e0 f7       	brcc	.-8      	; 0x1d4c0 <memset+0x4>
   1d4c8:	08 95       	ret

0001d4ca <_exit>:
   1d4ca:	f8 94       	cli

0001d4cc <__stop_program>:
   1d4cc:	ff cf       	rjmp	.-2      	; 0x1d4cc <__stop_program>
